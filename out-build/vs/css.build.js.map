{"version":3,"sources":["file:///workspace/appflow/src/vs/css.build.ts","vs/css.build.ts"],"names":[],"mappings":"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","file":"css.build.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\ninterface ICSSPluginConfig {\n\tinlineResources?: boolean | 'base64';\n\tinlineResourcesLimit?: number;\n}\n\ninterface ICSSEntryPointData {\n\tmoduleName: string;\n\tcontents: string;\n\tfsPath: string;\n}\n\n// This file gets compiled also with the standalone editor,\n// so we cannot depend on types from node.d.ts\ninterface INodeFS {\n\treadFileSync(path: string, encoding: 'utf8'): string;\n\treadFileSync(path: string): INodeBuffer;\n}\ninterface INodeBuffer {\n\tlength: number;\n\ttoString(encoding?: 'base64'): string;\n}\ninterface INodePath {\n\tdirname(p: string): string;\n\tjoin(...paths: string[]): string;\n}\n\nconst nodeReq = <T>(module: string): T | undefined => {\n\tif (typeof (<any>require).__$__nodeRequire === 'function') {\n\t\treturn (<any>require).__$__nodeRequire(module);\n\t}\n\treturn undefined;\n};\n\nconst fs = nodeReq<INodeFS>('fs');\nconst path = nodeReq<INodePath>('path');\n\nlet inlineResources: boolean | 'base64' = false;\nlet inlineResourcesLimit: number = 5000;\n\nconst contentsMap: { [moduleName: string]: string } = {};\nconst pathMap: { [moduleName: string]: string } = {};\nconst entryPoints: { [entryPoint: string]: ICSSEntryPointData[] } = {};\nconst inlinedResources: string[] = [];\n\n/**\n * Invoked by the loader at build-time\n */\nexport function load(name: string, req: AMDLoader.IRelativeRequire, load: AMDLoader.IPluginLoadCallback, config: AMDLoader.IConfigurationOptions): void {\n\tif (!fs) {\n\t\tthrow new Error(`Cannot load files without 'fs'!`);\n\t}\n\tconfig = config || {};\n\tconst myConfig = <ICSSPluginConfig>(config['vs/css'] || {});\n\tinlineResources = (typeof myConfig.inlineResources === 'undefined' ? false : myConfig.inlineResources);\n\tinlineResourcesLimit = (myConfig.inlineResourcesLimit || 5000);\n\tconst cssUrl = req.toUrl(name + '.css');\n\tlet contents = fs.readFileSync(cssUrl, 'utf8');\n\tif (contents.charCodeAt(0) === 65279 /* BOM */) {\n\t\t// Remove BOM\n\t\tcontents = contents.substring(1);\n\t}\n\tif (config.isBuild) {\n\t\tcontentsMap[name] = contents;\n\t\tpathMap[name] = cssUrl;\n\t}\n\tload({});\n}\n\n/**\n * Invoked by the loader at build-time\n */\nexport function write(pluginName: string, moduleName: string, write: AMDLoader.IPluginWriteCallback): void {\n\tconst entryPoint = write.getEntryPoint();\n\n\tentryPoints[entryPoint] = entryPoints[entryPoint] || [];\n\tentryPoints[entryPoint].push({\n\t\tmoduleName: moduleName,\n\t\tcontents: contentsMap[moduleName],\n\t\tfsPath: pathMap[moduleName],\n\t});\n\n\twrite.asModule(pluginName + '!' + moduleName,\n\t\t'define([\\'vs/css!' + entryPoint + '\\'], {});'\n\t);\n}\n\n/**\n * Invoked by the loader at build-time\n */\nexport function writeFile(pluginName: string, moduleName: string, req: AMDLoader.IRelativeRequire, write: AMDLoader.IPluginWriteFileCallback, config: AMDLoader.IConfigurationOptions): void {\n\tif (entryPoints && entryPoints.hasOwnProperty(moduleName)) {\n\t\tconst fileName = req.toUrl(moduleName + '.css');\n\t\tconst contents = [\n\t\t\t'/*---------------------------------------------------------',\n\t\t\t' * Copyright (c) Microsoft Corporation. All rights reserved.',\n\t\t\t' *--------------------------------------------------------*/'\n\t\t],\n\t\t\tentries = entryPoints[moduleName];\n\t\tfor (let i = 0; i < entries.length; i++) {\n\t\t\tif (inlineResources) {\n\t\t\t\tcontents.push(rewriteOrInlineUrls(entries[i].fsPath, entries[i].moduleName, moduleName, entries[i].contents, inlineResources === 'base64', inlineResourcesLimit));\n\t\t\t} else {\n\t\t\t\tcontents.push(rewriteUrls(entries[i].moduleName, moduleName, entries[i].contents));\n\t\t\t}\n\t\t}\n\t\twrite(fileName, contents.join('\\r\\n'));\n\t}\n}\n\nexport function getInlinedResources(): string[] {\n\treturn inlinedResources || [];\n}\n\nfunction rewriteOrInlineUrls(originalFileFSPath: string, originalFile: string, newFile: string, contents: string, forceBase64: boolean, inlineByteLimit: number): string {\n\tif (!fs || !path) {\n\t\tthrow new Error(`Cannot rewrite or inline urls without 'fs' or 'path'!`);\n\t}\n\treturn CSSPluginUtilities.replaceURL(contents, (url) => {\n\t\tif (/\\.(svg|png)$/.test(url)) {\n\t\t\tconst fsPath = path.join(path.dirname(originalFileFSPath), url);\n\t\t\tconst fileContents = fs.readFileSync(fsPath);\n\n\t\t\tif (fileContents.length < inlineByteLimit) {\n\t\t\t\tconst normalizedFSPath = fsPath.replace(/\\\\/g, '/');\n\t\t\t\tinlinedResources.push(normalizedFSPath);\n\n\t\t\t\tconst MIME = /\\.svg$/.test(url) ? 'image/svg+xml' : 'image/png';\n\t\t\t\tlet DATA = ';base64,' + fileContents.toString('base64');\n\n\t\t\t\tif (!forceBase64 && /\\.svg$/.test(url)) {\n\t\t\t\t\t// .svg => url encode as explained at https://codepen.io/tigt/post/optimizing-svgs-in-data-uris\n\t\t\t\t\tconst newText = fileContents.toString()\n\t\t\t\t\t\t.replace(/\"/g, '\\'')\n\t\t\t\t\t\t.replace(/%/g, '%25')\n\t\t\t\t\t\t.replace(/</g, '%3C')\n\t\t\t\t\t\t.replace(/>/g, '%3E')\n\t\t\t\t\t\t.replace(/&/g, '%26')\n\t\t\t\t\t\t.replace(/#/g, '%23')\n\t\t\t\t\t\t.replace(/\\s+/g, ' ');\n\t\t\t\t\tconst encodedData = ',' + newText;\n\t\t\t\t\tif (encodedData.length < DATA.length) {\n\t\t\t\t\t\tDATA = encodedData;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn '\"data:' + MIME + DATA + '\"';\n\t\t\t}\n\t\t}\n\n\t\tconst absoluteUrl = CSSPluginUtilities.joinPaths(CSSPluginUtilities.pathOf(originalFile), url);\n\t\treturn CSSPluginUtilities.relativePath(newFile, absoluteUrl);\n\t});\n}\n\nexport function rewriteUrls(originalFile: string, newFile: string, contents: string): string {\n\treturn CSSPluginUtilities.replaceURL(contents, (url) => {\n\t\tconst absoluteUrl = CSSPluginUtilities.joinPaths(CSSPluginUtilities.pathOf(originalFile), url);\n\t\treturn CSSPluginUtilities.relativePath(newFile, absoluteUrl);\n\t});\n}\n\nexport class CSSPluginUtilities {\n\n\tpublic static startsWith(haystack: string, needle: string): boolean {\n\t\treturn haystack.length >= needle.length && haystack.substr(0, needle.length) === needle;\n\t}\n\n\t/**\n\t * Find the path of a file.\n\t */\n\tpublic static pathOf(filename: string): string {\n\t\tconst lastSlash = filename.lastIndexOf('/');\n\t\tif (lastSlash !== -1) {\n\t\t\treturn filename.substr(0, lastSlash + 1);\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\t/**\n\t * A conceptual a + b for paths.\n\t * Takes into account if `a` contains a protocol.\n\t * Also normalizes the result: e.g.: a/b/ + ../c => a/c\n\t */\n\tpublic static joinPaths(a: string, b: string): string {\n\n\t\tfunction findSlashIndexAfterPrefix(haystack: string, prefix: string): number {\n\t\t\tif (CSSPluginUtilities.startsWith(haystack, prefix)) {\n\t\t\t\treturn Math.max(prefix.length, haystack.indexOf('/', prefix.length));\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet aPathStartIndex = 0;\n\t\taPathStartIndex = aPathStartIndex || findSlashIndexAfterPrefix(a, '//');\n\t\taPathStartIndex = aPathStartIndex || findSlashIndexAfterPrefix(a, 'http://');\n\t\taPathStartIndex = aPathStartIndex || findSlashIndexAfterPrefix(a, 'https://');\n\n\t\tfunction pushPiece(pieces: string[], piece: string): void {\n\t\t\tif (piece === './') {\n\t\t\t\t// Ignore\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (piece === '../') {\n\t\t\t\tconst prevPiece = (pieces.length > 0 ? pieces[pieces.length - 1] : null);\n\t\t\t\tif (prevPiece && prevPiece === '/') {\n\t\t\t\t\t// Ignore\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (prevPiece && prevPiece !== '../') {\n\t\t\t\t\t// Pop\n\t\t\t\t\tpieces.pop();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Push\n\t\t\tpieces.push(piece);\n\t\t}\n\n\t\tfunction push(pieces: string[], path: string): void {\n\t\t\twhile (path.length > 0) {\n\t\t\t\tconst slashIndex = path.indexOf('/');\n\t\t\t\tconst piece = (slashIndex >= 0 ? path.substring(0, slashIndex + 1) : path);\n\t\t\t\tpath = (slashIndex >= 0 ? path.substring(slashIndex + 1) : '');\n\t\t\t\tpushPiece(pieces, piece);\n\t\t\t}\n\t\t}\n\n\t\tlet pieces: string[] = [];\n\t\tpush(pieces, a.substr(aPathStartIndex));\n\t\tif (b.length > 0 && b.charAt(0) === '/') {\n\t\t\tpieces = [];\n\t\t}\n\t\tpush(pieces, b);\n\n\t\treturn a.substring(0, aPathStartIndex) + pieces.join('');\n\t}\n\n\tpublic static commonPrefix(str1: string, str2: string): string {\n\t\tconst len = Math.min(str1.length, str2.length);\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tif (str1.charCodeAt(i) !== str2.charCodeAt(i)) {\n\t\t\t\treturn str1.substring(0, i);\n\t\t\t}\n\t\t}\n\t\treturn str1.substring(0, len);\n\t}\n\n\tpublic static commonFolderPrefix(fromPath: string, toPath: string): string {\n\t\tconst prefix = CSSPluginUtilities.commonPrefix(fromPath, toPath);\n\t\tconst slashIndex = prefix.lastIndexOf('/');\n\t\tif (slashIndex === -1) {\n\t\t\treturn '';\n\t\t}\n\t\treturn prefix.substring(0, slashIndex + 1);\n\t}\n\n\tpublic static relativePath(fromPath: string, toPath: string): string {\n\t\tif (CSSPluginUtilities.startsWith(toPath, '/') || CSSPluginUtilities.startsWith(toPath, 'http://') || CSSPluginUtilities.startsWith(toPath, 'https://')) {\n\t\t\treturn toPath;\n\t\t}\n\n\t\t// Ignore common folder prefix\n\t\tconst prefix = CSSPluginUtilities.commonFolderPrefix(fromPath, toPath);\n\t\tfromPath = fromPath.substr(prefix.length);\n\t\ttoPath = toPath.substr(prefix.length);\n\n\t\tconst upCount = fromPath.split('/').length;\n\t\tlet result = '';\n\t\tfor (let i = 1; i < upCount; i++) {\n\t\t\tresult += '../';\n\t\t}\n\t\treturn result + toPath;\n\t}\n\n\tpublic static replaceURL(contents: string, replacer: (url: string) => string): string {\n\t\t// Use \")\" as the terminator as quotes are oftentimes not used at all\n\t\treturn contents.replace(/url\\(\\s*([^\\)]+)\\s*\\)?/g, (_: string, ...matches: string[]) => {\n\t\t\tlet url = matches[0];\n\t\t\t// Eliminate starting quotes (the initial whitespace is not captured)\n\t\t\tif (url.charAt(0) === '\"' || url.charAt(0) === '\\'') {\n\t\t\t\turl = url.substring(1);\n\t\t\t}\n\t\t\t// The ending whitespace is captured\n\t\t\twhile (url.length > 0 && (url.charAt(url.length - 1) === ' ' || url.charAt(url.length - 1) === '\\t')) {\n\t\t\t\turl = url.substring(0, url.length - 1);\n\t\t\t}\n\t\t\t// Eliminate ending quotes\n\t\t\tif (url.charAt(url.length - 1) === '\"' || url.charAt(url.length - 1) === '\\'') {\n\t\t\t\turl = url.substring(0, url.length - 1);\n\t\t\t}\n\n\t\t\tif (!CSSPluginUtilities.startsWith(url, 'data:') && !CSSPluginUtilities.startsWith(url, 'http://') && !CSSPluginUtilities.startsWith(url, 'https://')) {\n\t\t\t\turl = replacer(url);\n\t\t\t}\n\n\t\t\treturn 'url(' + url + ')';\n\t\t});\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\ninterface ICSSPluginConfig {\n\tinlineResources?: boolean | 'base64';\n\tinlineResourcesLimit?: number;\n}\n\ninterface ICSSEntryPointData {\n\tmoduleName: string;\n\tcontents: string;\n\tfsPath: string;\n}\n\n// This file gets compiled also with the standalone editor,\n// so we cannot depend on types from node.d.ts\ninterface INodeFS {\n\treadFileSync(path: string, encoding: 'utf8'): string;\n\treadFileSync(path: string): INodeBuffer;\n}\ninterface INodeBuffer {\n\tlength: number;\n\ttoString(encoding?: 'base64'): string;\n}\ninterface INodePath {\n\tdirname(p: string): string;\n\tjoin(...paths: string[]): string;\n}\n\nconst nodeReq = <T>(module: string): T | undefined => {\n\tif (typeof (<any>require).__$__nodeRequire === 'function') {\n\t\treturn (<any>require).__$__nodeRequire(module);\n\t}\n\treturn undefined;\n};\n\nconst fs = nodeReq<INodeFS>('fs');\nconst path = nodeReq<INodePath>('path');\n\nlet inlineResources: boolean | 'base64' = false;\nlet inlineResourcesLimit: number = 5000;\n\nconst contentsMap: { [moduleName: string]: string } = {};\nconst pathMap: { [moduleName: string]: string } = {};\nconst entryPoints: { [entryPoint: string]: ICSSEntryPointData[] } = {};\nconst inlinedResources: string[] = [];\n\n/**\n * Invoked by the loader at build-time\n */\nexport function load(name: string, req: AMDLoader.IRelativeRequire, load: AMDLoader.IPluginLoadCallback, config: AMDLoader.IConfigurationOptions): void {\n\tif (!fs) {\n\t\tthrow new Error(`Cannot load files without 'fs'!`);\n\t}\n\tconfig = config || {};\n\tconst myConfig = <ICSSPluginConfig>(config['vs/css'] || {});\n\tinlineResources = (typeof myConfig.inlineResources === 'undefined' ? false : myConfig.inlineResources);\n\tinlineResourcesLimit = (myConfig.inlineResourcesLimit || 5000);\n\tconst cssUrl = req.toUrl(name + '.css');\n\tlet contents = fs.readFileSync(cssUrl, 'utf8');\n\tif (contents.charCodeAt(0) === 65279 /* BOM */) {\n\t\t// Remove BOM\n\t\tcontents = contents.substring(1);\n\t}\n\tif (config.isBuild) {\n\t\tcontentsMap[name] = contents;\n\t\tpathMap[name] = cssUrl;\n\t}\n\tload({});\n}\n\n/**\n * Invoked by the loader at build-time\n */\nexport function write(pluginName: string, moduleName: string, write: AMDLoader.IPluginWriteCallback): void {\n\tconst entryPoint = write.getEntryPoint();\n\n\tentryPoints[entryPoint] = entryPoints[entryPoint] || [];\n\tentryPoints[entryPoint].push({\n\t\tmoduleName: moduleName,\n\t\tcontents: contentsMap[moduleName],\n\t\tfsPath: pathMap[moduleName],\n\t});\n\n\twrite.asModule(pluginName + '!' + moduleName,\n\t\t'define([\\'vs/css!' + entryPoint + '\\'], {});'\n\t);\n}\n\n/**\n * Invoked by the loader at build-time\n */\nexport function writeFile(pluginName: string, moduleName: string, req: AMDLoader.IRelativeRequire, write: AMDLoader.IPluginWriteFileCallback, config: AMDLoader.IConfigurationOptions): void {\n\tif (entryPoints && entryPoints.hasOwnProperty(moduleName)) {\n\t\tconst fileName = req.toUrl(moduleName + '.css');\n\t\tconst contents = [\n\t\t\t'/*---------------------------------------------------------',\n\t\t\t' * Copyright (c) Microsoft Corporation. All rights reserved.',\n\t\t\t' *--------------------------------------------------------*/'\n\t\t],\n\t\t\tentries = entryPoints[moduleName];\n\t\tfor (let i = 0; i < entries.length; i++) {\n\t\t\tif (inlineResources) {\n\t\t\t\tcontents.push(rewriteOrInlineUrls(entries[i].fsPath, entries[i].moduleName, moduleName, entries[i].contents, inlineResources === 'base64', inlineResourcesLimit));\n\t\t\t} else {\n\t\t\t\tcontents.push(rewriteUrls(entries[i].moduleName, moduleName, entries[i].contents));\n\t\t\t}\n\t\t}\n\t\twrite(fileName, contents.join('\\r\\n'));\n\t}\n}\n\nexport function getInlinedResources(): string[] {\n\treturn inlinedResources || [];\n}\n\nfunction rewriteOrInlineUrls(originalFileFSPath: string, originalFile: string, newFile: string, contents: string, forceBase64: boolean, inlineByteLimit: number): string {\n\tif (!fs || !path) {\n\t\tthrow new Error(`Cannot rewrite or inline urls without 'fs' or 'path'!`);\n\t}\n\treturn CSSPluginUtilities.replaceURL(contents, (url) => {\n\t\tif (/\\.(svg|png)$/.test(url)) {\n\t\t\tconst fsPath = path.join(path.dirname(originalFileFSPath), url);\n\t\t\tconst fileContents = fs.readFileSync(fsPath);\n\n\t\t\tif (fileContents.length < inlineByteLimit) {\n\t\t\t\tconst normalizedFSPath = fsPath.replace(/\\\\/g, '/');\n\t\t\t\tinlinedResources.push(normalizedFSPath);\n\n\t\t\t\tconst MIME = /\\.svg$/.test(url) ? 'image/svg+xml' : 'image/png';\n\t\t\t\tlet DATA = ';base64,' + fileContents.toString('base64');\n\n\t\t\t\tif (!forceBase64 && /\\.svg$/.test(url)) {\n\t\t\t\t\t// .svg => url encode as explained at https://codepen.io/tigt/post/optimizing-svgs-in-data-uris\n\t\t\t\t\tconst newText = fileContents.toString()\n\t\t\t\t\t\t.replace(/\"/g, '\\'')\n\t\t\t\t\t\t.replace(/%/g, '%25')\n\t\t\t\t\t\t.replace(/</g, '%3C')\n\t\t\t\t\t\t.replace(/>/g, '%3E')\n\t\t\t\t\t\t.replace(/&/g, '%26')\n\t\t\t\t\t\t.replace(/#/g, '%23')\n\t\t\t\t\t\t.replace(/\\s+/g, ' ');\n\t\t\t\t\tconst encodedData = ',' + newText;\n\t\t\t\t\tif (encodedData.length < DATA.length) {\n\t\t\t\t\t\tDATA = encodedData;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn '\"data:' + MIME + DATA + '\"';\n\t\t\t}\n\t\t}\n\n\t\tconst absoluteUrl = CSSPluginUtilities.joinPaths(CSSPluginUtilities.pathOf(originalFile), url);\n\t\treturn CSSPluginUtilities.relativePath(newFile, absoluteUrl);\n\t});\n}\n\nexport function rewriteUrls(originalFile: string, newFile: string, contents: string): string {\n\treturn CSSPluginUtilities.replaceURL(contents, (url) => {\n\t\tconst absoluteUrl = CSSPluginUtilities.joinPaths(CSSPluginUtilities.pathOf(originalFile), url);\n\t\treturn CSSPluginUtilities.relativePath(newFile, absoluteUrl);\n\t});\n}\n\nexport class CSSPluginUtilities {\n\n\tpublic static startsWith(haystack: string, needle: string): boolean {\n\t\treturn haystack.length >= needle.length && haystack.substr(0, needle.length) === needle;\n\t}\n\n\t/**\n\t * Find the path of a file.\n\t */\n\tpublic static pathOf(filename: string): string {\n\t\tconst lastSlash = filename.lastIndexOf('/');\n\t\tif (lastSlash !== -1) {\n\t\t\treturn filename.substr(0, lastSlash + 1);\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\t/**\n\t * A conceptual a + b for paths.\n\t * Takes into account if `a` contains a protocol.\n\t * Also normalizes the result: e.g.: a/b/ + ../c => a/c\n\t */\n\tpublic static joinPaths(a: string, b: string): string {\n\n\t\tfunction findSlashIndexAfterPrefix(haystack: string, prefix: string): number {\n\t\t\tif (CSSPluginUtilities.startsWith(haystack, prefix)) {\n\t\t\t\treturn Math.max(prefix.length, haystack.indexOf('/', prefix.length));\n\t\t\t}\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet aPathStartIndex = 0;\n\t\taPathStartIndex = aPathStartIndex || findSlashIndexAfterPrefix(a, '//');\n\t\taPathStartIndex = aPathStartIndex || findSlashIndexAfterPrefix(a, 'http://');\n\t\taPathStartIndex = aPathStartIndex || findSlashIndexAfterPrefix(a, 'https://');\n\n\t\tfunction pushPiece(pieces: string[], piece: string): void {\n\t\t\tif (piece === './') {\n\t\t\t\t// Ignore\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (piece === '../') {\n\t\t\t\tconst prevPiece = (pieces.length > 0 ? pieces[pieces.length - 1] : null);\n\t\t\t\tif (prevPiece && prevPiece === '/') {\n\t\t\t\t\t// Ignore\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (prevPiece && prevPiece !== '../') {\n\t\t\t\t\t// Pop\n\t\t\t\t\tpieces.pop();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Push\n\t\t\tpieces.push(piece);\n\t\t}\n\n\t\tfunction push(pieces: string[], path: string): void {\n\t\t\twhile (path.length > 0) {\n\t\t\t\tconst slashIndex = path.indexOf('/');\n\t\t\t\tconst piece = (slashIndex >= 0 ? path.substring(0, slashIndex + 1) : path);\n\t\t\t\tpath = (slashIndex >= 0 ? path.substring(slashIndex + 1) : '');\n\t\t\t\tpushPiece(pieces, piece);\n\t\t\t}\n\t\t}\n\n\t\tlet pieces: string[] = [];\n\t\tpush(pieces, a.substr(aPathStartIndex));\n\t\tif (b.length > 0 && b.charAt(0) === '/') {\n\t\t\tpieces = [];\n\t\t}\n\t\tpush(pieces, b);\n\n\t\treturn a.substring(0, aPathStartIndex) + pieces.join('');\n\t}\n\n\tpublic static commonPrefix(str1: string, str2: string): string {\n\t\tconst len = Math.min(str1.length, str2.length);\n\t\tfor (let i = 0; i < len; i++) {\n\t\t\tif (str1.charCodeAt(i) !== str2.charCodeAt(i)) {\n\t\t\t\treturn str1.substring(0, i);\n\t\t\t}\n\t\t}\n\t\treturn str1.substring(0, len);\n\t}\n\n\tpublic static commonFolderPrefix(fromPath: string, toPath: string): string {\n\t\tconst prefix = CSSPluginUtilities.commonPrefix(fromPath, toPath);\n\t\tconst slashIndex = prefix.lastIndexOf('/');\n\t\tif (slashIndex === -1) {\n\t\t\treturn '';\n\t\t}\n\t\treturn prefix.substring(0, slashIndex + 1);\n\t}\n\n\tpublic static relativePath(fromPath: string, toPath: string): string {\n\t\tif (CSSPluginUtilities.startsWith(toPath, '/') || CSSPluginUtilities.startsWith(toPath, 'http://') || CSSPluginUtilities.startsWith(toPath, 'https://')) {\n\t\t\treturn toPath;\n\t\t}\n\n\t\t// Ignore common folder prefix\n\t\tconst prefix = CSSPluginUtilities.commonFolderPrefix(fromPath, toPath);\n\t\tfromPath = fromPath.substr(prefix.length);\n\t\ttoPath = toPath.substr(prefix.length);\n\n\t\tconst upCount = fromPath.split('/').length;\n\t\tlet result = '';\n\t\tfor (let i = 1; i < upCount; i++) {\n\t\t\tresult += '../';\n\t\t}\n\t\treturn result + toPath;\n\t}\n\n\tpublic static replaceURL(contents: string, replacer: (url: string) => string): string {\n\t\t// Use \")\" as the terminator as quotes are oftentimes not used at all\n\t\treturn contents.replace(/url\\(\\s*([^\\)]+)\\s*\\)?/g, (_: string, ...matches: string[]) => {\n\t\t\tlet url = matches[0];\n\t\t\t// Eliminate starting quotes (the initial whitespace is not captured)\n\t\t\tif (url.charAt(0) === '\"' || url.charAt(0) === '\\'') {\n\t\t\t\turl = url.substring(1);\n\t\t\t}\n\t\t\t// The ending whitespace is captured\n\t\t\twhile (url.length > 0 && (url.charAt(url.length - 1) === ' ' || url.charAt(url.length - 1) === '\\t')) {\n\t\t\t\turl = url.substring(0, url.length - 1);\n\t\t\t}\n\t\t\t// Eliminate ending quotes\n\t\t\tif (url.charAt(url.length - 1) === '\"' || url.charAt(url.length - 1) === '\\'') {\n\t\t\t\turl = url.substring(0, url.length - 1);\n\t\t\t}\n\n\t\t\tif (!CSSPluginUtilities.startsWith(url, 'data:') && !CSSPluginUtilities.startsWith(url, 'http://') && !CSSPluginUtilities.startsWith(url, 'https://')) {\n\t\t\t\turl = replacer(url);\n\t\t\t}\n\n\t\t\treturn 'url(' + url + ')';\n\t\t});\n\t}\n}\n"]}