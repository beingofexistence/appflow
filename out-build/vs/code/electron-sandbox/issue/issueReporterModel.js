/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
define(["require", "exports", "vs/platform/diagnostics/common/diagnostics"], function (require, exports, diagnostics_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.$s7b = void 0;
    class $s7b {
        constructor(initialData) {
            const defaultData = {
                issueType: 0 /* IssueType.Bug */,
                includeSystemInfo: true,
                includeWorkspaceInfo: true,
                includeProcessInfo: true,
                includeExtensions: true,
                includeExperiments: true,
                allExtensions: []
            };
            this.a = initialData ? Object.assign(defaultData, initialData) : defaultData;
        }
        getData() {
            return this.a;
        }
        update(newData) {
            Object.assign(this.a, newData);
        }
        serialize() {
            const modes = [];
            if (this.a.restrictedMode) {
                modes.push('Restricted');
            }
            if (this.a.isUnsupported) {
                modes.push('Unsupported');
            }
            return `
Type: <b>${this.d()}</b>

${this.a.issueDescription}
${this.c()}
VS Code version: ${this.a.versionInfo && this.a.versionInfo.vscodeVersion}
OS version: ${this.a.versionInfo && this.a.versionInfo.os}
Modes:${modes.length ? ' ' + modes.join(', ') : ''}
${this.b()}
${this.f()}
<!-- generated by issue reporter -->`;
        }
        b() {
            if (this.a.systemInfo && this.a.systemInfo.remoteData.length) {
                return this.a.systemInfo.remoteData
                    .map(remote => (0, diagnostics_1.$hm)(remote) ? remote.errorMessage : `Remote OS version: ${remote.machineInfo.os}`).join('\n') + '\n';
            }
            return '';
        }
        fileOnExtension() {
            const fileOnExtensionSupported = this.a.issueType === 0 /* IssueType.Bug */
                || this.a.issueType === 1 /* IssueType.PerformanceIssue */
                || this.a.issueType === 2 /* IssueType.FeatureRequest */;
            return fileOnExtensionSupported && this.a.fileOnExtension;
        }
        c() {
            if (this.fileOnExtension() && this.a.selectedExtension) {
                return `\nExtension version: ${this.a.selectedExtension.version}`;
            }
            else {
                return '';
            }
        }
        d() {
            if (this.a.issueType === 0 /* IssueType.Bug */) {
                return 'Bug';
            }
            else if (this.a.issueType === 1 /* IssueType.PerformanceIssue */) {
                return 'Performance Issue';
            }
            else {
                return 'Feature Request';
            }
        }
        f() {
            let info = '';
            if (this.a.issueType === 0 /* IssueType.Bug */ || this.a.issueType === 1 /* IssueType.PerformanceIssue */) {
                if (!this.a.fileOnMarketplace && this.a.includeSystemInfo && this.a.systemInfo) {
                    info += this.g();
                }
            }
            if (this.a.issueType === 1 /* IssueType.PerformanceIssue */) {
                if (!this.a.fileOnMarketplace && this.a.includeProcessInfo) {
                    info += this.h();
                }
                if (!this.a.fileOnMarketplace && this.a.includeWorkspaceInfo) {
                    info += this.i();
                }
            }
            if (this.a.issueType === 0 /* IssueType.Bug */ || this.a.issueType === 1 /* IssueType.PerformanceIssue */) {
                if (!this.a.fileOnMarketplace && !this.a.fileOnExtension && this.a.includeExtensions) {
                    info += this.k();
                }
            }
            if (this.a.issueType === 0 /* IssueType.Bug */ || this.a.issueType === 1 /* IssueType.PerformanceIssue */) {
                if (!this.a.fileOnMarketplace && this.a.includeExperiments && this.a.experimentInfo) {
                    info += this.j();
                }
            }
            return info;
        }
        g() {
            let md = `<details>
<summary>System Info</summary>

|Item|Value|
|---|---|
`;
            if (this.a.systemInfo) {
                md += `|CPUs|${this.a.systemInfo.cpus}|
|GPU Status|${Object.keys(this.a.systemInfo.gpuStatus).map(key => `${key}: ${this.a.systemInfo.gpuStatus[key]}`).join('<br>')}|
|Load (avg)|${this.a.systemInfo.load}|
|Memory (System)|${this.a.systemInfo.memory}|
|Process Argv|${this.a.systemInfo.processArgs.replace(/\\/g, '\\\\')}|
|Screen Reader|${this.a.systemInfo.screenReader}|
|VM|${this.a.systemInfo.vmHint}|`;
                if (this.a.systemInfo.linuxEnv) {
                    md += `\n|DESKTOP_SESSION|${this.a.systemInfo.linuxEnv.desktopSession}|
|XDG_CURRENT_DESKTOP|${this.a.systemInfo.linuxEnv.xdgCurrentDesktop}|
|XDG_SESSION_DESKTOP|${this.a.systemInfo.linuxEnv.xdgSessionDesktop}|
|XDG_SESSION_TYPE|${this.a.systemInfo.linuxEnv.xdgSessionType}|`;
                }
                this.a.systemInfo.remoteData.forEach(remote => {
                    if ((0, diagnostics_1.$hm)(remote)) {
                        md += `\n\n${remote.errorMessage}`;
                    }
                    else {
                        md += `

|Item|Value|
|---|---|
|Remote|${remote.latency ? `${remote.hostName} (latency: ${remote.latency.current.toFixed(2)}ms last, ${remote.latency.average.toFixed(2)}ms average)` : remote.hostName}|
|OS|${remote.machineInfo.os}|
|CPUs|${remote.machineInfo.cpus}|
|Memory (System)|${remote.machineInfo.memory}|
|VM|${remote.machineInfo.vmHint}|`;
                    }
                });
            }
            md += '\n</details>';
            return md;
        }
        h() {
            return `<details>
<summary>Process Info</summary>

\`\`\`
${this.a.processInfo}
\`\`\`

</details>
`;
        }
        i() {
            return `<details>
<summary>Workspace Info</summary>

\`\`\`
${this.a.workspaceInfo};
\`\`\`

</details>
`;
        }
        j() {
            return `<details>
<summary>A/B Experiments</summary>

\`\`\`
${this.a.experimentInfo}
\`\`\`

</details>
`;
        }
        k() {
            if (this.a.extensionsDisabled) {
                return 'Extensions disabled';
            }
            const themeExclusionStr = this.a.numberOfThemeExtesions ? `\n(${this.a.numberOfThemeExtesions} theme extensions excluded)` : '';
            if (!this.a.enabledNonThemeExtesions) {
                return 'Extensions: none' + themeExclusionStr;
            }
            const tableHeader = `Extension|Author (truncated)|Version
---|---|---`;
            const table = this.a.enabledNonThemeExtesions.map(e => {
                return `${e.name}|${e.publisher?.substr(0, 3) ?? 'N/A'}|${e.version}`;
            }).join('\n');
            return `<details><summary>Extensions (${this.a.enabledNonThemeExtesions.length})</summary>

${tableHeader}
${table}
${themeExclusionStr}

</details>`;
        }
    }
    exports.$s7b = $s7b;
});
//# sourceMappingURL=issueReporterModel.js.map