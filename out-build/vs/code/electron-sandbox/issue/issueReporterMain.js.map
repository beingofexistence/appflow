{"version":3,"sources":["file:///workspace/appflow/src/vs/code/electron-sandbox/issue/issueReporterMain.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAmBhG,SAAgB,OAAO,CAAC,aAA+C;QACtE,MAAM,aAAa,GAAG,aAAE,CAAQ,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,aAAE,CAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC;QACxE,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,oBAAoB;QAEhE,IAAA,SAAG,EAAW,QAAQ,CAAC,IAAI,EAAE,IAAA,2BAAQ,GAAE,CAAC,CAAC;QAEzC,MAAM,oBAAoB,GAAG,YAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAElE,MAAM,aAAa,GAAG,oBAAoB,CAAC,cAAc,CAAC,2BAAI,EAAW,aAAa,CAAC,CAAC;QACxF,aAAa,CAAC,MAAM,EAAE,CAAC;QACvB,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,OAAO,CAAC;QACtC,aAAa,CAAC,eAAe,EAAE,CAAC;IACjC,CAAC;IAZD,0BAYC;IAED,SAAS,YAAY,CAAC,QAAgB;QACrC,MAAM,QAAQ,GAAG,IAAI,uBAAG,EAAgB,CAAC;QAEzC,MAAM,mBAAmB,GAAG,IAAA,gBAAG,GAA6B,CAAC;QAC7D,KAAK,MAAM,CAAC,EAAE,EAAE,UAAU,CAAC,IAAI,mBAAmB,EAAE;YACnD,QAAQ,CAAC,GAAG,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;SAC7B;QAED,QAAQ,CAAC,GAAG,CAAC,yBAAI,EAAiB,IAAI,iBAAG,CAAY,yBAAI,EAA2B,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QACjG,QAAQ,CAAC,GAAG,CAAC,aAAI,EAAgB,IAAI,iBAAG,CAAY,wBAAI,EAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;QAEpF,OAAO,IAAI,0BAAG,CAAkB,QAAQ,EAAE,IAAI,CAAC,CAAC;IACjD,CAAC;IAED,IAAA,eAAI,EAA6B,YAAI,EAAe,OAAO,CAAC,CAAC","file":"issueReporterMain.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/issueReporter';\nimport 'vs/base/browser/ui/codicons/codiconStyles'; // make sure codicon css is loaded\nimport { safeInnerHtml } from 'vs/base/browser/dom';\nimport { isLinux, isWindows } from 'vs/base/common/platform';\nimport BaseHtml from 'vs/code/electron-sandbox/issue/issueReporterPage';\nimport { ElectronIPCMainProcessService } from 'vs/platform/ipc/electron-sandbox/mainProcessService';\nimport { IIssueMainService, IssueReporterWindowConfiguration } from 'vs/platform/issue/common/issue';\nimport { INativeHostService } from 'vs/platform/native/common/native';\nimport { NativeHostService } from 'vs/platform/native/electron-sandbox/nativeHostService';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { IMainProcessService } from 'vs/platform/ipc/common/mainProcessService';\nimport { IssueReporter } from './issueReporterService';\nimport { InstantiationService } from 'vs/platform/instantiation/common/instantiationService';\nimport { getSingletonServiceDescriptors } from 'vs/platform/instantiation/common/extensions';\nimport { registerMainProcessRemoteService } from 'vs/platform/ipc/electron-sandbox/services';\n\nexport function startup(configuration: IssueReporterWindowConfiguration) {\n\tconst platformClass = isWindows ? 'windows' : isLinux ? 'linux' : 'mac';\n\tdocument.body.classList.add(platformClass); // used by our fonts\n\n\tsafeInnerHtml(document.body, BaseHtml());\n\n\tconst instantiationService = initServices(configuration.windowId);\n\n\tconst issueReporter = instantiationService.createInstance(IssueReporter, configuration);\n\tissueReporter.render();\n\tdocument.body.style.display = 'block';\n\tissueReporter.setInitialFocus();\n}\n\nfunction initServices(windowId: number) {\n\tconst services = new ServiceCollection();\n\n\tconst contributedServices = getSingletonServiceDescriptors();\n\tfor (const [id, descriptor] of contributedServices) {\n\t\tservices.set(id, descriptor);\n\t}\n\n\tservices.set(IMainProcessService, new SyncDescriptor(ElectronIPCMainProcessService, [windowId]));\n\tservices.set(INativeHostService, new SyncDescriptor(NativeHostService, [windowId]));\n\n\treturn new InstantiationService(services, true);\n}\n\nregisterMainProcessRemoteService(IIssueMainService, 'issue');\n"]}