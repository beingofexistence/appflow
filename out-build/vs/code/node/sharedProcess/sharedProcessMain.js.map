{"version":3,"sources":["vs/code/node/sharedProcess/sharedProcessMain.ts"],"names":[],"mappings":"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","file":"sharedProcessMain.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { hostname, release } from 'os';\nimport { MessagePortMain, MessageEvent } from 'vs/base/parts/sandbox/node/electronTypes';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { onUnexpectedError, setUnexpectedErrorHandler } from 'vs/base/common/errors';\nimport { combinedDisposable, Disposable, DisposableStore, toDisposable } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { firstOrDefault } from 'vs/base/common/arrays';\nimport { Emitter } from 'vs/base/common/event';\nimport { ProxyChannel, StaticRouter } from 'vs/base/parts/ipc/common/ipc';\nimport { IClientConnectionFilter, Server as UtilityProcessMessagePortServer, once } from 'vs/base/parts/ipc/node/ipc.mp';\nimport { CodeCacheCleaner } from 'vs/code/node/sharedProcess/contrib/codeCacheCleaner';\nimport { LanguagePackCachedDataCleaner } from 'vs/code/node/sharedProcess/contrib/languagePackCachedDataCleaner';\nimport { LocalizationsUpdater } from 'vs/code/node/sharedProcess/contrib/localizationsUpdater';\nimport { LogsDataCleaner } from 'vs/code/node/sharedProcess/contrib/logsDataCleaner';\nimport { UnusedWorkspaceStorageDataCleaner } from 'vs/code/node/sharedProcess/contrib/storageDataCleaner';\nimport { IChecksumService } from 'vs/platform/checksum/common/checksumService';\nimport { ChecksumService } from 'vs/platform/checksum/node/checksumService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ConfigurationService } from 'vs/platform/configuration/common/configurationService';\nimport { IDiagnosticsService } from 'vs/platform/diagnostics/common/diagnostics';\nimport { DiagnosticsService } from 'vs/platform/diagnostics/node/diagnosticsService';\nimport { IDownloadService } from 'vs/platform/download/common/download';\nimport { DownloadService } from 'vs/platform/download/common/downloadService';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { GlobalExtensionEnablementService } from 'vs/platform/extensionManagement/common/extensionEnablementService';\nimport { ExtensionGalleryService } from 'vs/platform/extensionManagement/common/extensionGalleryService';\nimport { IExtensionGalleryService, IExtensionManagementService, IExtensionTipsService, IGlobalExtensionEnablementService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { ExtensionSignatureVerificationService, IExtensionSignatureVerificationService } from 'vs/platform/extensionManagement/node/extensionSignatureVerificationService';\nimport { ExtensionManagementChannel, ExtensionTipsChannel } from 'vs/platform/extensionManagement/common/extensionManagementIpc';\nimport { ExtensionManagementService, INativeServerExtensionManagementService } from 'vs/platform/extensionManagement/node/extensionManagementService';\nimport { IExtensionRecommendationNotificationService } from 'vs/platform/extensionRecommendations/common/extensionRecommendations';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { DiskFileSystemProvider } from 'vs/platform/files/node/diskFileSystemProvider';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { InstantiationService } from 'vs/platform/instantiation/common/instantiationService';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { ILanguagePackService } from 'vs/platform/languagePacks/common/languagePacks';\nimport { NativeLanguagePackService } from 'vs/platform/languagePacks/node/languagePacks';\nimport { ConsoleLogger, ILoggerService, ILogService } from 'vs/platform/log/common/log';\nimport { LoggerChannelClient } from 'vs/platform/log/common/logIpc';\nimport product from 'vs/platform/product/common/product';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IRequestService } from 'vs/platform/request/common/request';\nimport { ISharedProcessConfiguration } from 'vs/platform/sharedProcess/node/sharedProcess';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { resolveCommonProperties } from 'vs/platform/telemetry/common/commonProperties';\nimport { ICustomEndpointTelemetryService, ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { TelemetryAppenderChannel } from 'vs/platform/telemetry/common/telemetryIpc';\nimport { TelemetryLogAppender } from 'vs/platform/telemetry/common/telemetryLogAppender';\nimport { TelemetryService } from 'vs/platform/telemetry/common/telemetryService';\nimport { supportsTelemetry, ITelemetryAppender, NullAppender, NullTelemetryService, getPiiPathsFromEnvironment, isInternalTelemetry } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { CustomEndpointTelemetryService } from 'vs/platform/telemetry/node/customEndpointTelemetryService';\nimport { ExtensionStorageService, IExtensionStorageService } from 'vs/platform/extensionManagement/common/extensionStorage';\nimport { IgnoredExtensionsManagementService, IIgnoredExtensionsManagementService } from 'vs/platform/userDataSync/common/ignoredExtensions';\nimport { IUserDataSyncLocalStoreService, IUserDataSyncLogService, IUserDataSyncEnablementService, IUserDataSyncService, IUserDataSyncStoreManagementService, IUserDataSyncStoreService, IUserDataSyncUtilService, registerConfiguration as registerUserDataSyncConfiguration, IUserDataSyncResourceProviderService } from 'vs/platform/userDataSync/common/userDataSync';\nimport { IUserDataSyncAccountService, UserDataSyncAccountService } from 'vs/platform/userDataSync/common/userDataSyncAccount';\nimport { UserDataSyncLocalStoreService } from 'vs/platform/userDataSync/common/userDataSyncLocalStoreService';\nimport { UserDataAutoSyncChannel, UserDataSyncAccountServiceChannel, UserDataSyncMachinesServiceChannel, UserDataSyncStoreManagementServiceChannel, UserDataSyncUtilServiceClient } from 'vs/platform/userDataSync/common/userDataSyncIpc';\nimport { UserDataSyncLogService } from 'vs/platform/userDataSync/common/userDataSyncLog';\nimport { IUserDataSyncMachinesService, UserDataSyncMachinesService } from 'vs/platform/userDataSync/common/userDataSyncMachines';\nimport { UserDataSyncEnablementService } from 'vs/platform/userDataSync/common/userDataSyncEnablementService';\nimport { UserDataSyncService } from 'vs/platform/userDataSync/common/userDataSyncService';\nimport { UserDataSyncChannel } from 'vs/platform/userDataSync/common/userDataSyncServiceIpc';\nimport { UserDataSyncStoreManagementService, UserDataSyncStoreService } from 'vs/platform/userDataSync/common/userDataSyncStoreService';\nimport { IUserDataProfileStorageService } from 'vs/platform/userDataProfile/common/userDataProfileStorageService';\nimport { NativeUserDataProfileStorageService } from 'vs/platform/userDataProfile/node/userDataProfileStorageService';\nimport { ActiveWindowManager } from 'vs/platform/windows/node/windowTracker';\nimport { ISignService } from 'vs/platform/sign/common/sign';\nimport { SignService } from 'vs/platform/sign/node/signService';\nimport { ISharedTunnelsService } from 'vs/platform/tunnel/common/tunnel';\nimport { SharedTunnelsService } from 'vs/platform/tunnel/node/tunnelService';\nimport { ipcSharedProcessTunnelChannelName, ISharedProcessTunnelService } from 'vs/platform/remote/common/sharedProcessTunnelService';\nimport { SharedProcessTunnelService } from 'vs/platform/tunnel/node/sharedProcessTunnelService';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { UriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentityService';\nimport { isLinux } from 'vs/base/common/platform';\nimport { FileUserDataProvider } from 'vs/platform/userData/common/fileUserDataProvider';\nimport { DiskFileSystemProviderClient, LOCAL_FILE_SYSTEM_CHANNEL_NAME } from 'vs/platform/files/common/diskFileSystemProviderClient';\nimport { InspectProfilingService as V8InspectProfilingService } from 'vs/platform/profiling/node/profilingService';\nimport { IV8InspectProfilingService } from 'vs/platform/profiling/common/profiling';\nimport { IExtensionsScannerService } from 'vs/platform/extensionManagement/common/extensionsScannerService';\nimport { ExtensionsScannerService } from 'vs/platform/extensionManagement/node/extensionsScannerService';\nimport { IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { IExtensionsProfileScannerService } from 'vs/platform/extensionManagement/common/extensionsProfileScannerService';\nimport { PolicyChannelClient } from 'vs/platform/policy/common/policyIpc';\nimport { IPolicyService, NullPolicyService } from 'vs/platform/policy/common/policy';\nimport { UserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfileIpc';\nimport { OneDataSystemAppender } from 'vs/platform/telemetry/node/1dsAppender';\nimport { UserDataProfilesCleaner } from 'vs/code/node/sharedProcess/contrib/userDataProfilesCleaner';\nimport { IRemoteTunnelService } from 'vs/platform/remoteTunnel/common/remoteTunnel';\nimport { UserDataSyncResourceProviderService } from 'vs/platform/userDataSync/common/userDataSyncResourceProvider';\nimport { ExtensionsContributions } from 'vs/code/node/sharedProcess/contrib/extensions';\nimport { localize } from 'vs/nls';\nimport { LogService } from 'vs/platform/log/common/logService';\nimport { ISharedProcessLifecycleService, SharedProcessLifecycleService } from 'vs/platform/lifecycle/node/sharedProcessLifecycleService';\nimport { RemoteTunnelService } from 'vs/platform/remoteTunnel/node/remoteTunnelService';\nimport { ExtensionsProfileScannerService } from 'vs/platform/extensionManagement/node/extensionsProfileScannerService';\nimport { RequestChannelClient } from 'vs/platform/request/common/requestIpc';\nimport { ExtensionRecommendationNotificationServiceChannelClient } from 'vs/platform/extensionRecommendations/common/extensionRecommendationsIpc';\nimport { INativeHostService } from 'vs/platform/native/common/native';\nimport { UserDataAutoSyncService } from 'vs/platform/userDataSync/node/userDataAutoSyncService';\nimport { ExtensionTipsService } from 'vs/platform/extensionManagement/node/extensionTipsService';\nimport { IMainProcessService, MainProcessService } from 'vs/platform/ipc/common/mainProcessService';\nimport { RemoteStorageService } from 'vs/platform/storage/common/storageService';\nimport { IRemoteSocketFactoryService, RemoteSocketFactoryService } from 'vs/platform/remote/common/remoteSocketFactoryService';\nimport { RemoteConnectionType } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { nodeSocketFactory } from 'vs/platform/remote/node/nodeSocketFactory';\nimport { NativeEnvironmentService } from 'vs/platform/environment/node/environmentService';\nimport { IVoiceRecognitionService, VoiceRecognitionService } from 'vs/platform/voiceRecognition/node/voiceRecognitionService';\nimport { VoiceTranscriptionManager } from 'vs/code/node/sharedProcess/contrib/voiceTranscriber';\nimport { SharedProcessRawConnection, SharedProcessLifecycle } from 'vs/platform/sharedProcess/common/sharedProcess';\n\nclass SharedProcessMain extends Disposable implements IClientConnectionFilter {\n\n\tprivate readonly server = this._register(new UtilityProcessMessagePortServer(this));\n\n\tprivate lifecycleService: SharedProcessLifecycleService | undefined = undefined;\n\n\tprivate readonly onDidWindowConnectRaw = this._register(new Emitter<MessagePortMain>());\n\n\tconstructor(private configuration: ISharedProcessConfiguration) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Shared process lifecycle\n\t\tlet didExit = false;\n\t\tconst onExit = () => {\n\t\t\tif (!didExit) {\n\t\t\t\tdidExit = true;\n\n\t\t\t\tthis.lifecycleService?.fireOnWillShutdown();\n\t\t\t\tthis.dispose();\n\t\t\t}\n\t\t};\n\t\tprocess.once('exit', onExit);\n\t\tonce(process.parentPort, SharedProcessLifecycle.exit, onExit);\n\t}\n\n\tasync init(): Promise<void> {\n\n\t\t// Services\n\t\tconst instantiationService = await this.initServices();\n\n\t\t// Config\n\t\tregisterUserDataSyncConfiguration();\n\n\t\tinstantiationService.invokeFunction(accessor => {\n\t\t\tconst logService = accessor.get(ILogService);\n\n\t\t\t// Log info\n\t\t\tlogService.trace('sharedProcess configuration', JSON.stringify(this.configuration));\n\n\t\t\t// Channels\n\t\t\tthis.initChannels(accessor);\n\n\t\t\t// Error handler\n\t\t\tthis.registerErrorHandler(logService);\n\t\t});\n\n\t\t// Instantiate Contributions\n\t\tthis._register(combinedDisposable(\n\t\t\tinstantiationService.createInstance(CodeCacheCleaner, this.configuration.codeCachePath),\n\t\t\tinstantiationService.createInstance(LanguagePackCachedDataCleaner),\n\t\t\tinstantiationService.createInstance(UnusedWorkspaceStorageDataCleaner),\n\t\t\tinstantiationService.createInstance(LogsDataCleaner),\n\t\t\tinstantiationService.createInstance(LocalizationsUpdater),\n\t\t\tinstantiationService.createInstance(ExtensionsContributions),\n\t\t\tinstantiationService.createInstance(UserDataProfilesCleaner),\n\t\t\tinstantiationService.createInstance(VoiceTranscriptionManager, this.onDidWindowConnectRaw.event)\n\t\t));\n\t}\n\n\tprivate async initServices(): Promise<IInstantiationService> {\n\t\tconst services = new ServiceCollection();\n\n\t\t// Product\n\t\tconst productService = { _serviceBrand: undefined, ...product };\n\t\tservices.set(IProductService, productService);\n\n\t\t// Main Process\n\t\tconst mainRouter = new StaticRouter(ctx => ctx === 'main');\n\t\tconst mainProcessService = new MainProcessService(this.server, mainRouter);\n\t\tservices.set(IMainProcessService, mainProcessService);\n\n\t\t// Policies\n\t\tconst policyService = this.configuration.policiesData ? new PolicyChannelClient(this.configuration.policiesData, mainProcessService.getChannel('policy')) : new NullPolicyService();\n\t\tservices.set(IPolicyService, policyService);\n\n\t\t// Environment\n\t\tconst environmentService = new NativeEnvironmentService(this.configuration.args, productService);\n\t\tservices.set(INativeEnvironmentService, environmentService);\n\n\t\t// Logger\n\t\tconst loggerService = new LoggerChannelClient(undefined, this.configuration.logLevel, environmentService.logsHome, this.configuration.loggers.map(loggerResource => ({ ...loggerResource, resource: URI.revive(loggerResource.resource) })), mainProcessService.getChannel('logger'));\n\t\tservices.set(ILoggerService, loggerService);\n\n\t\t// Log\n\t\tconst logger = this._register(loggerService.createLogger('sharedprocess', { name: localize('sharedLog', \"Shared\") }));\n\t\tconst consoleLogger = this._register(new ConsoleLogger(logger.getLevel()));\n\t\tconst logService = this._register(new LogService(logger, [consoleLogger]));\n\t\tservices.set(ILogService, logService);\n\n\t\t// Lifecycle\n\t\tthis.lifecycleService = this._register(new SharedProcessLifecycleService(logService));\n\t\tservices.set(ISharedProcessLifecycleService, this.lifecycleService);\n\n\t\t// Files\n\t\tconst fileService = this._register(new FileService(logService));\n\t\tservices.set(IFileService, fileService);\n\n\t\tconst diskFileSystemProvider = this._register(new DiskFileSystemProvider(logService));\n\t\tfileService.registerProvider(Schemas.file, diskFileSystemProvider);\n\n\t\t// URI Identity\n\t\tconst uriIdentityService = new UriIdentityService(fileService);\n\t\tservices.set(IUriIdentityService, uriIdentityService);\n\n\t\t// User Data Profiles\n\t\tconst userDataProfilesService = this._register(new UserDataProfilesService(this.configuration.profiles.all, URI.revive(this.configuration.profiles.home).with({ scheme: environmentService.userRoamingDataHome.scheme }), mainProcessService.getChannel('userDataProfiles')));\n\t\tservices.set(IUserDataProfilesService, userDataProfilesService);\n\n\t\tconst userDataFileSystemProvider = this._register(new FileUserDataProvider(\n\t\t\tSchemas.file,\n\t\t\t// Specifically for user data, use the disk file system provider\n\t\t\t// from the main process to enable atomic read/write operations.\n\t\t\t// Since user data can change very frequently across multiple\n\t\t\t// processes, we want a single process handling these operations.\n\t\t\tthis._register(new DiskFileSystemProviderClient(mainProcessService.getChannel(LOCAL_FILE_SYSTEM_CHANNEL_NAME), { pathCaseSensitive: isLinux })),\n\t\t\tSchemas.vscodeUserData,\n\t\t\tuserDataProfilesService,\n\t\t\turiIdentityService,\n\t\t\tlogService\n\t\t));\n\t\tfileService.registerProvider(Schemas.vscodeUserData, userDataFileSystemProvider);\n\n\t\t// Configuration\n\t\tconst configurationService = this._register(new ConfigurationService(userDataProfilesService.defaultProfile.settingsResource, fileService, policyService, logService));\n\t\tservices.set(IConfigurationService, configurationService);\n\n\t\t// Storage (global access only)\n\t\tconst storageService = new RemoteStorageService(undefined, { defaultProfile: userDataProfilesService.defaultProfile, currentProfile: userDataProfilesService.defaultProfile }, mainProcessService, environmentService);\n\t\tservices.set(IStorageService, storageService);\n\t\tthis._register(toDisposable(() => storageService.flush()));\n\n\t\t// Initialize config & storage in parallel\n\t\tawait Promise.all([\n\t\t\tconfigurationService.initialize(),\n\t\t\tstorageService.initialize()\n\t\t]);\n\n\t\t// Request\n\t\tconst requestService = new RequestChannelClient(mainProcessService.getChannel('request'));\n\t\tservices.set(IRequestService, requestService);\n\n\t\t// Checksum\n\t\tservices.set(IChecksumService, new SyncDescriptor(ChecksumService, undefined, false /* proxied to other processes */));\n\n\t\t// V8 Inspect profiler\n\t\tservices.set(IV8InspectProfilingService, new SyncDescriptor(V8InspectProfilingService, undefined, false /* proxied to other processes */));\n\n\t\t// Native Host\n\t\tconst nativeHostService = ProxyChannel.toService<INativeHostService>(mainProcessService.getChannel('nativeHost'));\n\t\tservices.set(INativeHostService, nativeHostService);\n\n\t\t// Download\n\t\tservices.set(IDownloadService, new SyncDescriptor(DownloadService, undefined, true));\n\n\t\t// Extension recommendations\n\t\tconst activeWindowManager = this._register(new ActiveWindowManager(nativeHostService));\n\t\tconst activeWindowRouter = new StaticRouter(ctx => activeWindowManager.getActiveClientId().then(id => ctx === id));\n\t\tservices.set(IExtensionRecommendationNotificationService, new ExtensionRecommendationNotificationServiceChannelClient(this.server.getChannel('extensionRecommendationNotification', activeWindowRouter)));\n\n\t\t// Telemetry\n\t\tlet telemetryService: ITelemetryService;\n\t\tconst appenders: ITelemetryAppender[] = [];\n\t\tconst internalTelemetry = isInternalTelemetry(productService, configurationService);\n\t\tif (supportsTelemetry(productService, environmentService)) {\n\t\t\tconst logAppender = new TelemetryLogAppender(logService, loggerService, environmentService, productService);\n\t\t\tappenders.push(logAppender);\n\t\t\tif (productService.aiConfig?.ariaKey) {\n\t\t\t\tconst collectorAppender = new OneDataSystemAppender(requestService, internalTelemetry, 'monacoworkbench', null, productService.aiConfig.ariaKey);\n\t\t\t\tthis._register(toDisposable(() => collectorAppender.flush())); // Ensure the 1DS appender is disposed so that it flushes remaining data\n\t\t\t\tappenders.push(collectorAppender);\n\t\t\t}\n\n\t\t\ttelemetryService = new TelemetryService({\n\t\t\t\tappenders,\n\t\t\t\tcommonProperties: resolveCommonProperties(release(), hostname(), process.arch, productService.commit, productService.version, this.configuration.machineId, internalTelemetry),\n\t\t\t\tsendErrorTelemetry: true,\n\t\t\t\tpiiPaths: getPiiPathsFromEnvironment(environmentService),\n\t\t\t}, configurationService, productService);\n\t\t} else {\n\t\t\ttelemetryService = NullTelemetryService;\n\t\t\tconst nullAppender = NullAppender;\n\t\t\tappenders.push(nullAppender);\n\t\t}\n\n\t\tthis.server.registerChannel('telemetryAppender', new TelemetryAppenderChannel(appenders));\n\t\tservices.set(ITelemetryService, telemetryService);\n\n\t\t// Custom Endpoint Telemetry\n\t\tconst customEndpointTelemetryService = new CustomEndpointTelemetryService(configurationService, telemetryService, logService, loggerService, environmentService, productService);\n\t\tservices.set(ICustomEndpointTelemetryService, customEndpointTelemetryService);\n\n\t\t// Extension Management\n\t\tservices.set(IExtensionsProfileScannerService, new SyncDescriptor(ExtensionsProfileScannerService, undefined, true));\n\t\tservices.set(IExtensionsScannerService, new SyncDescriptor(ExtensionsScannerService, undefined, true));\n\t\tservices.set(IExtensionSignatureVerificationService, new SyncDescriptor(ExtensionSignatureVerificationService, undefined, true));\n\t\tservices.set(INativeServerExtensionManagementService, new SyncDescriptor(ExtensionManagementService, undefined, true));\n\n\t\t// Extension Gallery\n\t\tservices.set(IExtensionGalleryService, new SyncDescriptor(ExtensionGalleryService, undefined, true));\n\n\t\t// Extension Tips\n\t\tservices.set(IExtensionTipsService, new SyncDescriptor(ExtensionTipsService, undefined, false /* Eagerly scans and computes exe based recommendations */));\n\n\t\t// Localizations\n\t\tservices.set(ILanguagePackService, new SyncDescriptor(NativeLanguagePackService, undefined, false /* proxied to other processes */));\n\n\t\t// Diagnostics\n\t\tservices.set(IDiagnosticsService, new SyncDescriptor(DiagnosticsService, undefined, false /* proxied to other processes */));\n\n\t\t// Settings Sync\n\t\tservices.set(IUserDataSyncAccountService, new SyncDescriptor(UserDataSyncAccountService, undefined, true));\n\t\tservices.set(IUserDataSyncLogService, new SyncDescriptor(UserDataSyncLogService, undefined, true));\n\t\tservices.set(IUserDataSyncUtilService, new UserDataSyncUtilServiceClient(this.server.getChannel('userDataSyncUtil', client => client.ctx !== 'main')));\n\t\tservices.set(IGlobalExtensionEnablementService, new SyncDescriptor(GlobalExtensionEnablementService, undefined, false /* Eagerly resets installed extensions */));\n\t\tservices.set(IIgnoredExtensionsManagementService, new SyncDescriptor(IgnoredExtensionsManagementService, undefined, true));\n\t\tservices.set(IExtensionStorageService, new SyncDescriptor(ExtensionStorageService));\n\t\tservices.set(IUserDataSyncStoreManagementService, new SyncDescriptor(UserDataSyncStoreManagementService, undefined, true));\n\t\tservices.set(IUserDataSyncStoreService, new SyncDescriptor(UserDataSyncStoreService, undefined, true));\n\t\tservices.set(IUserDataSyncMachinesService, new SyncDescriptor(UserDataSyncMachinesService, undefined, true));\n\t\tservices.set(IUserDataSyncLocalStoreService, new SyncDescriptor(UserDataSyncLocalStoreService, undefined, false /* Eagerly cleans up old backups */));\n\t\tservices.set(IUserDataSyncEnablementService, new SyncDescriptor(UserDataSyncEnablementService, undefined, true));\n\t\tservices.set(IUserDataSyncService, new SyncDescriptor(UserDataSyncService, undefined, false /* Initializes the Sync State */));\n\t\tservices.set(IUserDataProfileStorageService, new SyncDescriptor(NativeUserDataProfileStorageService, undefined, true));\n\t\tservices.set(IUserDataSyncResourceProviderService, new SyncDescriptor(UserDataSyncResourceProviderService, undefined, true));\n\n\t\t// Signing\n\t\tservices.set(ISignService, new SyncDescriptor(SignService, undefined, false /* proxied to other processes */));\n\n\t\t// Tunnel\n\t\tconst remoteSocketFactoryService = new RemoteSocketFactoryService();\n\t\tservices.set(IRemoteSocketFactoryService, remoteSocketFactoryService);\n\t\tremoteSocketFactoryService.register(RemoteConnectionType.WebSocket, nodeSocketFactory);\n\t\tservices.set(ISharedTunnelsService, new SyncDescriptor(SharedTunnelsService));\n\t\tservices.set(ISharedProcessTunnelService, new SyncDescriptor(SharedProcessTunnelService));\n\n\t\t// Remote Tunnel\n\t\tservices.set(IRemoteTunnelService, new SyncDescriptor(RemoteTunnelService));\n\n\t\t// Voice Recognition\n\t\tservices.set(IVoiceRecognitionService, new SyncDescriptor(VoiceRecognitionService));\n\n\t\treturn new InstantiationService(services);\n\t}\n\n\tprivate initChannels(accessor: ServicesAccessor): void {\n\n\t\tconst disposables = this._register(new DisposableStore());\n\n\t\t// Extensions Management\n\t\tconst channel = new ExtensionManagementChannel(accessor.get(IExtensionManagementService), () => null);\n\t\tthis.server.registerChannel('extensions', channel);\n\n\t\t// Language Packs\n\t\tconst languagePacksChannel = ProxyChannel.fromService(accessor.get(ILanguagePackService), disposables);\n\t\tthis.server.registerChannel('languagePacks', languagePacksChannel);\n\n\t\t// Diagnostics\n\t\tconst diagnosticsChannel = ProxyChannel.fromService(accessor.get(IDiagnosticsService), disposables);\n\t\tthis.server.registerChannel('diagnostics', diagnosticsChannel);\n\n\t\t// Extension Tips\n\t\tconst extensionTipsChannel = new ExtensionTipsChannel(accessor.get(IExtensionTipsService));\n\t\tthis.server.registerChannel('extensionTipsService', extensionTipsChannel);\n\n\t\t// Checksum\n\t\tconst checksumChannel = ProxyChannel.fromService(accessor.get(IChecksumService), disposables);\n\t\tthis.server.registerChannel('checksum', checksumChannel);\n\n\t\t// Profiling\n\t\tconst profilingChannel = ProxyChannel.fromService(accessor.get(IV8InspectProfilingService), disposables);\n\t\tthis.server.registerChannel('v8InspectProfiling', profilingChannel);\n\n\t\t// Settings Sync\n\t\tconst userDataSyncMachineChannel = new UserDataSyncMachinesServiceChannel(accessor.get(IUserDataSyncMachinesService));\n\t\tthis.server.registerChannel('userDataSyncMachines', userDataSyncMachineChannel);\n\n\t\t// Custom Endpoint Telemetry\n\t\tconst customEndpointTelemetryChannel = ProxyChannel.fromService(accessor.get(ICustomEndpointTelemetryService), disposables);\n\t\tthis.server.registerChannel('customEndpointTelemetry', customEndpointTelemetryChannel);\n\n\t\tconst userDataSyncAccountChannel = new UserDataSyncAccountServiceChannel(accessor.get(IUserDataSyncAccountService));\n\t\tthis.server.registerChannel('userDataSyncAccount', userDataSyncAccountChannel);\n\n\t\tconst userDataSyncStoreManagementChannel = new UserDataSyncStoreManagementServiceChannel(accessor.get(IUserDataSyncStoreManagementService));\n\t\tthis.server.registerChannel('userDataSyncStoreManagement', userDataSyncStoreManagementChannel);\n\n\t\tconst userDataSyncChannel = new UserDataSyncChannel(accessor.get(IUserDataSyncService), accessor.get(IUserDataProfilesService), accessor.get(ILogService));\n\t\tthis.server.registerChannel('userDataSync', userDataSyncChannel);\n\n\t\tconst userDataAutoSync = this._register(accessor.get(IInstantiationService).createInstance(UserDataAutoSyncService));\n\t\tconst userDataAutoSyncChannel = new UserDataAutoSyncChannel(userDataAutoSync);\n\t\tthis.server.registerChannel('userDataAutoSync', userDataAutoSyncChannel);\n\n\t\tthis.server.registerChannel('IUserDataSyncResourceProviderService', ProxyChannel.fromService(accessor.get(IUserDataSyncResourceProviderService), disposables));\n\n\t\t// Tunnel\n\t\tconst sharedProcessTunnelChannel = ProxyChannel.fromService(accessor.get(ISharedProcessTunnelService), disposables);\n\t\tthis.server.registerChannel(ipcSharedProcessTunnelChannelName, sharedProcessTunnelChannel);\n\n\t\t// Remote Tunnel\n\t\tconst remoteTunnelChannel = ProxyChannel.fromService(accessor.get(IRemoteTunnelService), disposables);\n\t\tthis.server.registerChannel('remoteTunnel', remoteTunnelChannel);\n\t}\n\n\tprivate registerErrorHandler(logService: ILogService): void {\n\n\t\t// Listen on global error events\n\t\tprocess.on('uncaughtException', error => onUnexpectedError(error));\n\t\tprocess.on('unhandledRejection', (reason: unknown) => onUnexpectedError(reason));\n\n\t\t// Install handler for unexpected errors\n\t\tsetUnexpectedErrorHandler(error => {\n\t\t\tconst message = toErrorMessage(error, true);\n\t\t\tif (!message) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogService.error(`[uncaught exception in sharedProcess]: ${message}`);\n\t\t});\n\t}\n\n\thandledClientConnection(e: MessageEvent): boolean {\n\n\t\t// This filter on message port messages will look for\n\t\t// attempts of a window to connect raw to the shared\n\t\t// process to handle these connections separate from\n\t\t// our IPC based protocol.\n\n\t\tif (e.data !== SharedProcessRawConnection.response) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst port = firstOrDefault(e.ports);\n\t\tif (port) {\n\t\t\tthis.onDidWindowConnectRaw.fire(port);\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\nexport async function main(configuration: ISharedProcessConfiguration): Promise<void> {\n\n\t// create shared process and signal back to main that we are\n\t// ready to accept message ports as client connections\n\n\tconst sharedProcess = new SharedProcessMain(configuration);\n\tprocess.parentPort.postMessage(SharedProcessLifecycle.ipcReady);\n\n\t// await initialization and signal this back to electron-main\n\tawait sharedProcess.init();\n\n\tprocess.parentPort.postMessage(SharedProcessLifecycle.initDone);\n}\n\nprocess.parentPort.once('message', (e: Electron.MessageEvent) => {\n\tmain(e.data as ISharedProcessConfiguration);\n});\n"]}