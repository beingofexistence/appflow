{"version":3,"sources":["file:///workspace/appflow/src/vs/code/node/sharedProcess/contrib/logsDataCleaner.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAYzF,IAAM,IAAI,GAAV,MAAM,IAAgB,SAAQ,eAAG;QAEvC,YACuC,CAAuB,EAC/B,CAAe;YAE7C,KAAK,EAAE,CAAC;YAH8B,MAAC,GAAD,CAAC,CAAsB;YAC/B,MAAC,GAAD,CAAC,CAAc;YAI7C,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,CAAc,GAAG,EAAE;gBAC1D,IAAI,CAAC,CAAC,EAAe,CAAC;YACvB,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;YAC/B,SAAS,CAAC,QAAQ,EAAE,CAAC;QACtB,CAAC;QAEO,KAAK,CAAC,CAAC;YACd,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,gDAAgD,CAAC,CAAC;YAExE,IAAI;gBACH,MAAM,UAAU,GAAG,IAAA,eAAG,EAAM,IAAI,CAAC,CAAC,CAAkB,QAAQ,CAAC,CAAC;gBAC9D,MAAM,QAAQ,GAAG,IAAA,eAAG,EAAK,IAAI,CAAC,CAAC,CAAkB,QAAQ,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,iBAAO,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC;gBACjG,MAAM,QAAQ,GAAG,MAAM,cAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;gBAElD,MAAM,WAAW,GAAG,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;gBAC9E,MAAM,WAAW,GAAG,WAAW,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,KAAK,UAAU,CAAC,CAAC;gBACjF,MAAM,gBAAgB,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;gBAEnF,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;oBAChC,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,yCAAyC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAE/F,MAAM,OAAO,CAAC,GAAG,CAAC,gBAAgB,CAAC,GAAG,CAAC,eAAe,CAAC,EAAE,CAAC,cAAQ,CAAC,EAAE,CAAC,IAAA,UAAG,EAAE,QAAQ,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC;iBACzG;aACD;YAAC,OAAO,KAAK,EAAE;gBACf,IAAA,WAAE,EAAgB,KAAK,CAAC,CAAC;aACzB;QACF,CAAC;KACD,CAAA;IAnCY,oBAAI;mBAAJ,IAAI;QAGd,WAAA,iBAAG,CAAA;QACH,WAAA,SAAG,CAAA;OAJO,IAAI,CAmChB","file":"logsDataCleaner.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport { join } from 'vs/base/common/path';\nimport { basename, dirname } from 'vs/base/common/resources';\nimport { Promises } from 'vs/base/node/pfs';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { ILogService } from 'vs/platform/log/common/log';\n\nexport class LogsDataCleaner extends Disposable {\n\n\tconstructor(\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\n\t\tconst scheduler = this._register(new RunOnceScheduler(() => {\n\t\t\tthis.cleanUpOldLogs();\n\t\t}, 10 * 1000 /* after 10s */));\n\t\tscheduler.schedule();\n\t}\n\n\tprivate async cleanUpOldLogs(): Promise<void> {\n\t\tthis.logService.trace('[logs cleanup]: Starting to clean up old logs.');\n\n\t\ttry {\n\t\t\tconst currentLog = basename(this.environmentService.logsHome);\n\t\t\tconst logsRoot = dirname(this.environmentService.logsHome.with({ scheme: Schemas.file })).fsPath;\n\t\t\tconst logFiles = await Promises.readdir(logsRoot);\n\n\t\t\tconst allSessions = logFiles.filter(logFile => /^\\d{8}T\\d{6}$/.test(logFile));\n\t\t\tconst oldSessions = allSessions.sort().filter(session => session !== currentLog);\n\t\t\tconst sessionsToDelete = oldSessions.slice(0, Math.max(0, oldSessions.length - 9));\n\n\t\t\tif (sessionsToDelete.length > 0) {\n\t\t\t\tthis.logService.trace(`[logs cleanup]: Removing log folders '${sessionsToDelete.join(', ')}'`);\n\n\t\t\t\tawait Promise.all(sessionsToDelete.map(sessionToDelete => Promises.rm(join(logsRoot, sessionToDelete))));\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tonUnexpectedError(error);\n\t\t}\n\t}\n}\n"]}