{"version":3,"sources":["file:///workspace/appflow/src/vs/code/node/sharedProcess/contrib/voiceTranscriber.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;;IAUzF,IAAM,IAAI,GAAV,MAAM,IAA0B,SAAQ,eAAG;;iBAElC,MAAC,GAAoB,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,+BAAlC,AAAiE,CAAC;QAElF,YACkB,CAA6C,EACnB,CAA6B,EAC1C,CAAe;YAE7C,KAAK,EAAE,CAAC;YAJS,MAAC,GAAD,CAAC,CAA4C;YACnB,MAAC,GAAD,CAAC,CAA4B;YAC1C,MAAC,GAAD,CAAC,CAAc;YAI7C,IAAI,CAAC,CAAC,EAAkB,CAAC;QAC1B,CAAC;QAEO,CAAC;YACR,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAqB,IAAI,CAAC,EAAE;gBAChD,IAAI,CAAC,CAAC,CAAU,IAAI,CAAC,wDAAwD,MAAI,CAAsB,CAAC,GAAoB,CAAC,CAAC;gBAE9H,IAAI,MAAI,CAAsB,CAAC,EAAmB;oBACjD,IAAI,CAAC,CAAC,CAAS,IAAI,6BAA6B,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,EAAwB,IAAI,CAAC,CAAC,CAAU,CAAC,CAAC;iBACvG;qBAAM;oBACN,IAAI,CAAC,CAAC,CAAS,IAAI,0BAA0B,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,EAAwB,IAAI,CAAC,CAAC,CAAU,CAAC,CAAC;iBACpG;YACF,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;;IAxBW,oBAAI;mBAAJ,IAAI;QAMd,WAAA,8BAAI,CAAA;QACJ,WAAA,SAAG,CAAA;OAPO,IAAI,CAyBhB;IAED,MAAe,gBAAiB,SAAQ,eAAG;iBAEzB,MAAC,GAAiB,EAAE,CAAC,aAAa,GAAG,KAAK,CAAC,mBAAmB,GAAG,EAAE,CAAC,gBAAgB,GAAG,CAAC,CAAC,cAAc,GAAG,CAAC,CAAC;QAE7H,YACoB,CAAqB,EACrB,CAA6B,EAC7B,CAAe;YAElC,KAAK,EAAE,CAAC;YAJW,MAAC,GAAD,CAAC,CAAoB;YACrB,MAAC,GAAD,CAAC,CAA4B;YAC7B,MAAC,GAAD,CAAC,CAAc;YAIlC,IAAI,CAAC,CAAC,EAAkB,CAAC;QAC1B,CAAC;QAEO,CAAC;YACR,MAAM,GAAG,GAAG,IAAI,kBAAG,EAAsB,CAAC;YAC1C,IAAI,CAAC,CAAC,CAAS,IAAA,eAAG,EAAU,GAAG,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YAEtD,MAAM,cAAc,GAAG,CAAC,CAAe,EAAE,EAAE;gBAC1C,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,YAAY,YAAY,CAAC,EAAE;oBACtC,OAAO;iBACP;gBAED,IAAI,CAAC,CAAC,CAAa,CAAC,CAAC,IAAI,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;YACvC,CAAC,CAAC;YACF,IAAI,CAAC,CAAC,CAAI,EAAE,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC;YACxC,IAAI,CAAC,CAAC,CAAS,IAAA,eAAG,EAAU,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAI,GAAG,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC;YAE7E,IAAI,CAAC,CAAC,CAAI,KAAK,EAAE,CAAC;YAElB,IAAI,MAAM,GAAG,KAAK,CAAC;YACnB,IAAI,CAAC,CAAC,CAAI,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE;gBAC1B,IAAI,CAAC,CAAC,CAAU,IAAI,CAAC,wCAAwC,CAAC,CAAC;gBAE/D,MAAM,GAAG,IAAI,CAAC;gBACd,IAAI,CAAC,OAAO,EAAE,CAAC;YAChB,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,CAAC,CAAS,IAAA,eAAG,EAAU,GAAG,EAAE;gBAChC,IAAI,CAAC,MAAM,EAAE;oBACZ,IAAI,CAAC,CAAC,CAAI,KAAK,EAAE,CAAC;iBAClB;YACF,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAIS,CAAC,CAAiB,aAA6B;YACxD,MAAM,MAAM,GAAG,IAAI,YAAY,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;YAE7F,IAAI,MAAM,GAAG,CAAC,CAAC;YACf,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE;gBACzC,MAAM,CAAC,GAAG,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;gBACjC,MAAM,IAAI,YAAY,CAAC,MAAM,CAAC;aAC9B;YAED,OAAO,MAAM,CAAC;QACf,CAAC;;IAGF,MAAM,6BAA8B,SAAQ,gBAAgB;QAA5D;;YAEkB,MAAC,GAAoB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAI,CAAC,CAAC;YAE1D,MAAC,GAA8B,EAAE,CAAC;YAClC,MAAC,GAAoB,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC;QA8ClD,CAAC;QA5CU,KAAK,CAAC,CAAC,CAAa,IAAkB,EAAE,YAA+B;YAChF,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;gBACpB,IAAI,CAAC,CAAC,CAAU,IAAI,CAAC,wDAAwD,CAAC,CAAC;gBAE/E,IAAI,CAAC,CAAC,GAAM,IAAI,CAAC,CAAC,CAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAiB,CAAC,IAAI,CAAC,CAAC,EAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;aACzE;iBAAM;gBACN,IAAI,CAAC,CAAC,CAAU,IAAI,CAAC,+DAA+D,CAAC,CAAC;gBAEtF,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAI,KAAK,CAAC,CAAC,CAAC,CAAC;gBAChC,IAAI,CAAC,CAAC,GAAM,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC;gBAEhC,IAAI,CAAC,CAAC,CAAkB,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAU,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC;aACzE;QACF,CAAC;QAEO,KAAK,CAAC,CAAC,CAAU,IAAkB,EAAE,YAA+B;YAC3E,IAAI,YAAY,CAAC,uBAAuB,EAAE;gBACzC,OAAO;aACP;YAED,IAAI,IAAI,CAAC,MAAM,GAAG,gBAAgB,CAAC,CAAC,EAAgB;gBACnD,IAAI,CAAC,CAAC,CAAU,IAAI,CAAC,qEAAqE,CAAC,CAAC;gBAC5F,OAAO;aACP;YAED,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;gBACtB,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,CAAC,CAAuB,UAAU,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;gBACjF,IAAI,MAAM,EAAE;oBACX,IAAI,CAAC,CAAC,CAAkB,IAAI,CAAC,MAAM,CAAC,CAAC;iBACrC;aACD;YAED,IAAI,YAAY,CAAC,uBAAuB,EAAE;gBACzC,OAAO;aACP;YAED,IAAI,CAAC,CAAC,CAAI,WAAW,CAAC,IAAI,CAAC,CAAC,CAAkB,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;QAC1D,CAAC;QAEQ,OAAO;YACf,KAAK,CAAC,OAAO,EAAE,CAAC;YAEhB,IAAI,CAAC,CAAC,GAAM,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC;KACD;IAED,MAAM,0BAA2B,SAAQ,gBAAgB;QAAzD;;YAEkB,MAAC,GAAoB,IAAI,WAAG,EAAW,CAAC;YAEjD,MAAC,GAAgC,SAAS,CAAC;YAE3C,MAAC,GAAuB,CAAC,CAAC;YAC1B,MAAC,GAAmB,EAAE,CAAC;QAmDhC,CAAC;QAjDU,KAAK,CAAC,CAAC,CAAa,IAAkB,EAAE,YAA+B;YAChF,MAAM,aAAa,GAAG,IAAI,CAAC,CAAC,CAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAiB,CAAC,IAAI,CAAC,CAAC,EAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YACnF,IAAI,aAAa,CAAC,MAAM,GAAG,gBAAgB,CAAC,CAAC,EAAgB;gBAC5D,IAAI,CAAC,CAAC,CAAU,IAAI,CAAC,qEAAqE,CAAC,CAAC;gBAC5F,OAAO;aACP;YAED,IAAI,CAAC,CAAC,GAAM,aAAa,CAAC;YAE1B,IAAI,CAAC,CAAC,CAAkB,KAAK,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAU,YAAY,CAAC,CAAC,CAAC;QACpE,CAAC;QAEO,KAAK,CAAC,CAAC,CAAU,YAA+B;YACvD,IAAI,YAAY,CAAC,uBAAuB,EAAE;gBACzC,OAAO;aACP;YAED,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,EAAK,KAAK,CAAC,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,IAAI,EAAE;gBACV,OAAO;aACP;YAED,IAAI,MAAc,CAAC;YACnB,IAAI,IAAI,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,EAAsB;gBAC/C,yDAAyD;gBACzD,0DAA0D;gBAC1D,mCAAmC;gBACnC,IAAI,CAAC,CAAC,CAAU,IAAI,CAAC,8EAA8E,CAAC,CAAC;gBACrG,MAAM,GAAG,IAAI,CAAC,CAAC,CAAiB;aAChC;iBAAM;gBACN,IAAI,CAAC,CAAC,CAAU,IAAI,CAAC,iEAAiE,CAAC,CAAC;gBACxF,MAAM,GAAG,MAAM,IAAI,CAAC,CAAC,CAAuB,UAAU,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;aAC3E;YAED,IAAI,CAAC,CAAC,GAAmB,MAAM,CAAC;YAChC,IAAI,CAAC,CAAC,GAAuB,IAAI,CAAC,MAAM,CAAC;YAEzC,IAAI,YAAY,CAAC,uBAAuB,EAAE;gBACzC,OAAO;aACP;YAED,IAAI,CAAC,CAAC,CAAI,WAAW,CAAC,MAAM,CAAC,CAAC;QAC/B,CAAC;QAEQ,OAAO;YACf,KAAK,CAAC,OAAO,EAAE,CAAC;YAEhB,IAAI,CAAC,CAAC,GAAM,SAAS,CAAC;QACvB,CAAC;KACD","file":"voiceTranscriber.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { MessagePortMain, MessageEvent } from 'vs/base/parts/sandbox/node/electronTypes';\nimport { Disposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { IVoiceRecognitionService } from 'vs/platform/voiceRecognition/node/voiceRecognitionService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { LimitedQueue, Queue } from 'vs/base/common/async';\n\nexport class VoiceTranscriptionManager extends Disposable {\n\n\tprivate static USE_SLIDING_WINDOW = !!process.env.VSCODE_VOICE_USE_SLIDING_WINDOW;\n\n\tconstructor(\n\t\tprivate readonly onDidWindowConnectRaw: Event<MessagePortMain>,\n\t\t@IVoiceRecognitionService private readonly voiceRecognitionService: IVoiceRecognitionService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.onDidWindowConnectRaw(port => {\n\t\t\tthis.logService.info(`[voice] transcriber: new connection (sliding window: ${VoiceTranscriptionManager.USE_SLIDING_WINDOW})`);\n\n\t\t\tif (VoiceTranscriptionManager.USE_SLIDING_WINDOW) {\n\t\t\t\tthis._register(new SlidingWindowVoiceTranscriber(port, this.voiceRecognitionService, this.logService));\n\t\t\t} else {\n\t\t\t\tthis._register(new FullWindowVoiceTranscriber(port, this.voiceRecognitionService, this.logService));\n\t\t\t}\n\t\t}));\n\t}\n}\n\nabstract class VoiceTranscriber extends Disposable {\n\n\tprotected static MAX_DATA_LENGTH = 30 /* seconds */ * 16000 /* sampling rate */ * 16 /* bith depth */ * 1 /* channels */ / 8;\n\n\tconstructor(\n\t\tprotected readonly port: MessagePortMain,\n\t\tprotected readonly voiceRecognitionService: IVoiceRecognitionService,\n\t\tprotected readonly logService: ILogService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tconst cts = new CancellationTokenSource();\n\t\tthis._register(toDisposable(() => cts.dispose(true)));\n\n\t\tconst requestHandler = (e: MessageEvent) => {\n\t\t\tif (!(e.data instanceof Float32Array)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.handleRequest(e.data, cts.token);\n\t\t};\n\t\tthis.port.on('message', requestHandler);\n\t\tthis._register(toDisposable(() => this.port.off('message', requestHandler)));\n\n\t\tthis.port.start();\n\n\t\tlet closed = false;\n\t\tthis.port.on('close', () => {\n\t\t\tthis.logService.info(`[voice] transcriber: closed connection`);\n\n\t\t\tclosed = true;\n\t\t\tthis.dispose();\n\t\t});\n\n\t\tthis._register(toDisposable(() => {\n\t\t\tif (!closed) {\n\t\t\t\tthis.port.close();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprotected abstract handleRequest(data: Float32Array, cancellation: CancellationToken): Promise<void>;\n\n\tprotected joinFloat32Arrays(float32Arrays: Float32Array[]): Float32Array {\n\t\tconst result = new Float32Array(float32Arrays.reduce((prev, curr) => prev + curr.length, 0));\n\n\t\tlet offset = 0;\n\t\tfor (const float32Array of float32Arrays) {\n\t\t\tresult.set(float32Array, offset);\n\t\t\toffset += float32Array.length;\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nclass SlidingWindowVoiceTranscriber extends VoiceTranscriber {\n\n\tprivate readonly transcriptionQueue = this._register(new Queue());\n\n\tprivate transcribedResults: string[] = [];\n\tprivate data: Float32Array = new Float32Array(0);\n\n\tprotected async handleRequest(data: Float32Array, cancellation: CancellationToken): Promise<void> {\n\t\tif (data.length > 0) {\n\t\t\tthis.logService.info(`[voice] transcriber: voice detected, storing in buffer`);\n\n\t\t\tthis.data = this.data ? this.joinFloat32Arrays([this.data, data]) : data;\n\t\t} else {\n\t\t\tthis.logService.info(`[voice] transcriber: silence detected, transcribing window...`);\n\n\t\t\tconst data = this.data.slice(0);\n\t\t\tthis.data = new Float32Array(0);\n\n\t\t\tthis.transcriptionQueue.queue(() => this.transcribe(data, cancellation));\n\t\t}\n\t}\n\n\tprivate async transcribe(data: Float32Array, cancellation: CancellationToken): Promise<void> {\n\t\tif (cancellation.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (data.length > VoiceTranscriber.MAX_DATA_LENGTH) {\n\t\t\tthis.logService.warn(`[voice] transcriber: refusing to accept more than 30s of audio data`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (data.length !== 0) {\n\t\t\tconst result = await this.voiceRecognitionService.transcribe(data, cancellation);\n\t\t\tif (result) {\n\t\t\t\tthis.transcribedResults.push(result);\n\t\t\t}\n\t\t}\n\n\t\tif (cancellation.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.port.postMessage(this.transcribedResults.join(' '));\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis.data = new Float32Array(0);\n\t}\n}\n\nclass FullWindowVoiceTranscriber extends VoiceTranscriber {\n\n\tprivate readonly transcriptionQueue = new LimitedQueue();\n\n\tprivate data: Float32Array | undefined = undefined;\n\n\tprivate transcribedDataLength = 0;\n\tprivate transcribedResult = '';\n\n\tprotected async handleRequest(data: Float32Array, cancellation: CancellationToken): Promise<void> {\n\t\tconst dataCandidate = this.data ? this.joinFloat32Arrays([this.data, data]) : data;\n\t\tif (dataCandidate.length > VoiceTranscriber.MAX_DATA_LENGTH) {\n\t\t\tthis.logService.warn(`[voice] transcriber: refusing to accept more than 30s of audio data`);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.data = dataCandidate;\n\n\t\tthis.transcriptionQueue.queue(() => this.transcribe(cancellation));\n\t}\n\n\tprivate async transcribe(cancellation: CancellationToken): Promise<void> {\n\t\tif (cancellation.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst data = this.data?.slice(0);\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet result: string;\n\t\tif (data.length === this.transcribedDataLength) {\n\t\t\t// Optimization: if the data is the same as the last time\n\t\t\t// we transcribed, don't transcribe again, just return the\n\t\t\t// same result as we had last time.\n\t\t\tthis.logService.info(`[voice] transcriber: silence detected, reusing previous transcription result`);\n\t\t\tresult = this.transcribedResult;\n\t\t} else {\n\t\t\tthis.logService.info(`[voice] transcriber: voice detected, transcribing everything...`);\n\t\t\tresult = await this.voiceRecognitionService.transcribe(data, cancellation);\n\t\t}\n\n\t\tthis.transcribedResult = result;\n\t\tthis.transcribedDataLength = data.length;\n\n\t\tif (cancellation.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.port.postMessage(result);\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis.data = undefined;\n\t}\n}\n"]}