{"version":3,"sources":["file:///workspace/appflow/src/vs/code/node/sharedProcess/contrib/languagePackCachedDataCleaner.ts"],"names":[],"mappings":"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","file":"languagePackCachedDataCleaner.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { join } from 'vs/base/common/path';\nimport { Promises } from 'vs/base/node/pfs';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IProductService } from 'vs/platform/product/common/productService';\n\ninterface IExtensionEntry {\n\tversion: string;\n\textensionIdentifier: {\n\t\tid: string;\n\t\tuuid: string;\n\t};\n}\n\ninterface ILanguagePackEntry {\n\thash: string;\n\textensions: IExtensionEntry[];\n}\n\ninterface ILanguagePackFile {\n\t[locale: string]: ILanguagePackEntry;\n}\n\nexport class LanguagePackCachedDataCleaner extends Disposable {\n\n\tprivate readonly _DataMaxAge = this.productService.quality !== 'stable'\n\t\t? 1000 * 60 * 60 * 24 * 7 \t\t// roughly 1 week (insiders)\n\t\t: 1000 * 60 * 60 * 24 * 30 * 3; // roughly 3 months (stable)\n\n\tconstructor(\n\t\t@INativeEnvironmentService private readonly environmentService: INativeEnvironmentService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IProductService private readonly productService: IProductService\n\t) {\n\t\tsuper();\n\n\t\t// We have no Language pack support for dev version (run from source)\n\t\t// So only cleanup when we have a build version.\n\t\tif (this.environmentService.isBuilt) {\n\t\t\tconst scheduler = this._register(new RunOnceScheduler(() => {\n\t\t\t\tthis.cleanUpLanguagePackCache();\n\t\t\t}, 40 * 1000 /* after 40s */));\n\t\t\tscheduler.schedule();\n\t\t}\n\t}\n\n\tprivate async cleanUpLanguagePackCache(): Promise<void> {\n\t\tthis.logService.trace('[language pack cache cleanup]: Starting to clean up unused language packs.');\n\n\t\ttry {\n\t\t\tconst installed: IStringDictionary<boolean> = Object.create(null);\n\t\t\tconst metaData: ILanguagePackFile = JSON.parse(await Promises.readFile(join(this.environmentService.userDataPath, 'languagepacks.json'), 'utf8'));\n\t\t\tfor (const locale of Object.keys(metaData)) {\n\t\t\t\tconst entry = metaData[locale];\n\t\t\t\tinstalled[`${entry.hash}.${locale}`] = true;\n\t\t\t}\n\n\t\t\t// Cleanup entries for language packs that aren't installed anymore\n\t\t\tconst cacheDir = join(this.environmentService.userDataPath, 'clp');\n\t\t\tconst cacheDirExists = await Promises.exists(cacheDir);\n\t\t\tif (!cacheDirExists) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst entries = await Promises.readdir(cacheDir);\n\t\t\tfor (const entry of entries) {\n\t\t\t\tif (installed[entry]) {\n\t\t\t\t\tthis.logService.trace(`[language pack cache cleanup]: Skipping folder ${entry}. Language pack still in use.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tthis.logService.trace(`[language pack cache cleanup]: Removing unused language pack: ${entry}`);\n\n\t\t\t\tawait Promises.rm(join(cacheDir, entry));\n\t\t\t}\n\n\t\t\tconst now = Date.now();\n\t\t\tfor (const packEntry of Object.keys(installed)) {\n\t\t\t\tconst folder = join(cacheDir, packEntry);\n\t\t\t\tconst entries = await Promises.readdir(folder);\n\t\t\t\tfor (const entry of entries) {\n\t\t\t\t\tif (entry === 'tcf.json') {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst candidate = join(folder, entry);\n\t\t\t\t\tconst stat = await Promises.stat(candidate);\n\t\t\t\t\tif (stat.isDirectory() && (now - stat.mtime.getTime()) > this._DataMaxAge) {\n\t\t\t\t\t\tthis.logService.trace(`[language pack cache cleanup]: Removing language pack cache folder: ${join(packEntry, entry)}`);\n\n\t\t\t\t\t\tawait Promises.rm(candidate);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tonUnexpectedError(error);\n\t\t}\n\t}\n}\n"]}