{"version":3,"sources":["file:///workspace/appflow/src/vs/code/node/sharedProcess/contrib/storageDataCleaner.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAgBzF,IAAM,IAAI,GAAV,MAAM,IAAkC,SAAQ,eAAG;QAEzD,YAC6C,CAAuB,EACrC,CAAe,EACR,CAAuB,EACtB,CAAwB;YAE9D,KAAK,EAAE,CAAC;YALoC,MAAC,GAAD,CAAC,CAAsB;YACrC,MAAC,GAAD,CAAC,CAAc;YACR,MAAC,GAAD,CAAC,CAAsB;YACtB,MAAC,GAAD,CAAC,CAAuB;YAI9D,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,CAAc,GAAG,EAAE;gBAC1D,IAAI,CAAC,CAAC,EAAe,CAAC;YACvB,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;YAC/B,SAAS,CAAC,QAAQ,EAAE,CAAC;QACtB,CAAC;QAEO,KAAK,CAAC,CAAC;YACd,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,gGAAgG,CAAC,CAAC;YAExH,IAAI;gBACH,MAAM,oBAAoB,GAAG,IAAI,CAAC,CAAC,CAAkB,oBAAoB,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,iBAAO,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC;gBAChH,MAAM,uBAAuB,GAAG,MAAM,cAAQ,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC;gBAC7E,MAAM,aAAa,GAAG,IAAI,iBAAI,CAAU,IAAI,CAAC,CAAC,CAAkB,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;gBAEvF,MAAM,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,GAAG,CAAC,KAAK,EAAC,sBAAsB,EAAC,EAAE;oBAC5E,MAAM,oBAAoB,GAAG,IAAA,UAAG,EAAE,oBAAoB,EAAE,sBAAsB,CAAC,CAAC;oBAEhF,IAAI,sBAAsB,CAAC,MAAM,KAAK,iBAAI,EAA2B;wBACpE,OAAO,CAAC,2EAA2E;qBACnF;oBAED,IAAI,sBAAsB,KAAK,eAAG,CAA0C,EAAE,EAAE;wBAC/E,OAAO,CAAC,oEAAoE;qBAC5E;oBAED,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,CAAC,CAAiB,UAAU,EAAE,CAAC;oBAC1D,IAAI,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,KAAK,sBAAsB,CAAC,EAAE;wBAC5E,OAAO,CAAC,+DAA+D;qBACvE;oBAED,MAAM,aAAa,GAAG,MAAM,aAAa,CAAC,MAAM,CAAC,oBAAoB,CAAC,CAAC;oBACvE,IAAI,aAAa,EAAE;wBAClB,OAAO,CAAC,8DAA8D;qBACtE;oBAED,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,wDAAwD,sBAAsB,+CAA+C,CAAC,CAAC;oBAErJ,MAAM,cAAQ,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAC;gBACzC,CAAC,CAAC,CAAC,CAAC;aACJ;YAAC,OAAO,KAAK,EAAE;gBACf,IAAA,WAAE,EAAgB,KAAK,CAAC,CAAC;aACzB;QACF,CAAC;KACD,CAAA;IArDY,oBAAI;mBAAJ,IAAI;QAGd,WAAA,iBAAG,CAAA;QACH,WAAA,SAAG,CAAA;QACH,WAAA,aAAI,CAAA;QACJ,WAAA,yBAAI,CAAA;OANM,IAAI,CAqDhB","file":"storageDataCleaner.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { join } from 'vs/base/common/path';\nimport { Promises } from 'vs/base/node/pfs';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { StorageClient } from 'vs/platform/storage/common/storageIpc';\nimport { EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE } from 'vs/platform/workspace/common/workspace';\nimport { NON_EMPTY_WORKSPACE_ID_LENGTH } from 'vs/platform/workspaces/node/workspaces';\nimport { INativeHostService } from 'vs/platform/native/common/native';\nimport { IMainProcessService } from 'vs/platform/ipc/common/mainProcessService';\nimport { Schemas } from 'vs/base/common/network';\n\nexport class UnusedWorkspaceStorageDataCleaner extends Disposable {\n\n\tconstructor(\n\t\t@INativeEnvironmentService private readonly environmentService: INativeEnvironmentService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t\t@IMainProcessService private readonly mainProcessService: IMainProcessService\n\t) {\n\t\tsuper();\n\n\t\tconst scheduler = this._register(new RunOnceScheduler(() => {\n\t\t\tthis.cleanUpStorage();\n\t\t}, 30 * 1000 /* after 30s */));\n\t\tscheduler.schedule();\n\t}\n\n\tprivate async cleanUpStorage(): Promise<void> {\n\t\tthis.logService.trace('[storage cleanup]: Starting to clean up workspace storage folders for unused empty workspaces.');\n\n\t\ttry {\n\t\t\tconst workspaceStorageHome = this.environmentService.workspaceStorageHome.with({ scheme: Schemas.file }).fsPath;\n\t\t\tconst workspaceStorageFolders = await Promises.readdir(workspaceStorageHome);\n\t\t\tconst storageClient = new StorageClient(this.mainProcessService.getChannel('storage'));\n\n\t\t\tawait Promise.all(workspaceStorageFolders.map(async workspaceStorageFolder => {\n\t\t\t\tconst workspaceStoragePath = join(workspaceStorageHome, workspaceStorageFolder);\n\n\t\t\t\tif (workspaceStorageFolder.length === NON_EMPTY_WORKSPACE_ID_LENGTH) {\n\t\t\t\t\treturn; // keep workspace storage for folders/workspaces that can be accessed still\n\t\t\t\t}\n\n\t\t\t\tif (workspaceStorageFolder === EXTENSION_DEVELOPMENT_EMPTY_WINDOW_WORKSPACE.id) {\n\t\t\t\t\treturn; // keep workspace storage for empty extension development workspaces\n\t\t\t\t}\n\n\t\t\t\tconst windows = await this.nativeHostService.getWindows();\n\t\t\t\tif (windows.some(window => window.workspace?.id === workspaceStorageFolder)) {\n\t\t\t\t\treturn; // keep workspace storage for empty workspaces opened as window\n\t\t\t\t}\n\n\t\t\t\tconst isStorageUsed = await storageClient.isUsed(workspaceStoragePath);\n\t\t\t\tif (isStorageUsed) {\n\t\t\t\t\treturn; // keep workspace storage for empty workspaces that are in use\n\t\t\t\t}\n\n\t\t\t\tthis.logService.trace(`[storage cleanup]: Deleting workspace storage folder ${workspaceStorageFolder} as it seems to be an unused empty workspace.`);\n\n\t\t\t\tawait Promises.rm(workspaceStoragePath);\n\t\t\t}));\n\t\t} catch (error) {\n\t\t\tonUnexpectedError(error);\n\t\t}\n\t}\n}\n"]}