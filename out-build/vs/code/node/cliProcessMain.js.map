{"version":3,"sources":["vs/code/node/cliProcessMain.ts"],"names":[],"mappings":"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","file":"cliProcessMain.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { hostname, release } from 'os';\nimport { raceTimeout } from 'vs/base/common/async';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { isSigPipeError, onUnexpectedError, setUnexpectedErrorHandler } from 'vs/base/common/errors';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport { isAbsolute, join } from 'vs/base/common/path';\nimport { isWindows } from 'vs/base/common/platform';\nimport { cwd } from 'vs/base/common/process';\nimport { URI } from 'vs/base/common/uri';\nimport { Promises } from 'vs/base/node/pfs';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ConfigurationService } from 'vs/platform/configuration/common/configurationService';\nimport { IDownloadService } from 'vs/platform/download/common/download';\nimport { DownloadService } from 'vs/platform/download/common/downloadService';\nimport { NativeParsedArgs } from 'vs/platform/environment/common/argv';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { NativeEnvironmentService } from 'vs/platform/environment/node/environmentService';\nimport { ExtensionGalleryServiceWithNoStorageService } from 'vs/platform/extensionManagement/common/extensionGalleryService';\nimport { IExtensionGalleryService, InstallOptions } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { ExtensionSignatureVerificationService, IExtensionSignatureVerificationService } from 'vs/platform/extensionManagement/node/extensionSignatureVerificationService';\nimport { ExtensionManagementCLI } from 'vs/platform/extensionManagement/common/extensionManagementCLI';\nimport { IExtensionsProfileScannerService } from 'vs/platform/extensionManagement/common/extensionsProfileScannerService';\nimport { IExtensionsScannerService } from 'vs/platform/extensionManagement/common/extensionsScannerService';\nimport { ExtensionManagementService, INativeServerExtensionManagementService } from 'vs/platform/extensionManagement/node/extensionManagementService';\nimport { ExtensionsScannerService } from 'vs/platform/extensionManagement/node/extensionsScannerService';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { DiskFileSystemProvider } from 'vs/platform/files/node/diskFileSystemProvider';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { InstantiationService } from 'vs/platform/instantiation/common/instantiationService';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { ILanguagePackService } from 'vs/platform/languagePacks/common/languagePacks';\nimport { NativeLanguagePackService } from 'vs/platform/languagePacks/node/languagePacks';\nimport { ConsoleLogger, getLogLevel, ILogger, ILoggerService, ILogService, LogLevel } from 'vs/platform/log/common/log';\nimport { FilePolicyService } from 'vs/platform/policy/common/filePolicyService';\nimport { IPolicyService, NullPolicyService } from 'vs/platform/policy/common/policy';\nimport { NativePolicyService } from 'vs/platform/policy/node/nativePolicyService';\nimport product from 'vs/platform/product/common/product';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IRequestService } from 'vs/platform/request/common/request';\nimport { RequestService } from 'vs/platform/request/node/requestService';\nimport { SaveStrategy, StateReadonlyService } from 'vs/platform/state/node/stateService';\nimport { resolveCommonProperties } from 'vs/platform/telemetry/common/commonProperties';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { ITelemetryServiceConfig, TelemetryService } from 'vs/platform/telemetry/common/telemetryService';\nimport { supportsTelemetry, NullTelemetryService, getPiiPathsFromEnvironment, isInternalTelemetry, ITelemetryAppender } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { OneDataSystemAppender } from 'vs/platform/telemetry/node/1dsAppender';\nimport { buildTelemetryMessage } from 'vs/platform/telemetry/node/telemetry';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { UriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentityService';\nimport { IUserDataProfile, IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { UserDataProfilesReadonlyService } from 'vs/platform/userDataProfile/node/userDataProfile';\nimport { resolveMachineId } from 'vs/platform/telemetry/node/telemetryUtils';\nimport { ExtensionsProfileScannerService } from 'vs/platform/extensionManagement/node/extensionsProfileScannerService';\nimport { LogService } from 'vs/platform/log/common/logService';\nimport { LoggerService } from 'vs/platform/log/node/loggerService';\nimport { localize } from 'vs/nls';\nimport { FileUserDataProvider } from 'vs/platform/userData/common/fileUserDataProvider';\n\nclass CliMain extends Disposable {\n\n\tconstructor(\n\t\tprivate argv: NativeParsedArgs\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Dispose on exit\n\t\tprocess.once('exit', () => this.dispose());\n\t}\n\n\tasync run(): Promise<void> {\n\n\t\t// Services\n\t\tconst [instantiationService, appenders] = await this.initServices();\n\n\t\treturn instantiationService.invokeFunction(async accessor => {\n\t\t\tconst logService = accessor.get(ILogService);\n\t\t\tconst fileService = accessor.get(IFileService);\n\t\t\tconst environmentService = accessor.get(INativeEnvironmentService);\n\t\t\tconst userDataProfilesService = accessor.get(IUserDataProfilesService);\n\n\t\t\t// Log info\n\t\t\tlogService.info('CLI main', this.argv);\n\n\t\t\t// Error handler\n\t\t\tthis.registerErrorHandler(logService);\n\n\t\t\t// Run based on argv\n\t\t\tawait this.doRun(environmentService, fileService, userDataProfilesService, instantiationService);\n\n\t\t\t// Flush the remaining data in AI adapter (with 1s timeout)\n\t\t\tawait Promise.all(appenders.map(a => {\n\t\t\t\traceTimeout(a.flush(), 1000);\n\t\t\t}));\n\t\t\treturn;\n\t\t});\n\t}\n\n\tprivate async initServices(): Promise<[IInstantiationService, ITelemetryAppender[]]> {\n\t\tconst services = new ServiceCollection();\n\n\t\t// Product\n\t\tconst productService = { _serviceBrand: undefined, ...product };\n\t\tservices.set(IProductService, productService);\n\n\t\t// Environment\n\t\tconst environmentService = new NativeEnvironmentService(this.argv, productService);\n\t\tservices.set(INativeEnvironmentService, environmentService);\n\n\t\t// Init folders\n\t\tawait Promise.all([\n\t\t\tenvironmentService.appSettingsHome.with({ scheme: Schemas.file }).fsPath,\n\t\t\tenvironmentService.extensionsPath\n\t\t].map(path => path ? Promises.mkdir(path, { recursive: true }) : undefined));\n\n\t\t// Logger\n\t\tconst loggerService = new LoggerService(getLogLevel(environmentService), environmentService.logsHome);\n\t\tservices.set(ILoggerService, loggerService);\n\n\t\t// Log\n\t\tconst logger = this._register(loggerService.createLogger('cli', { name: localize('cli', \"CLI\") }));\n\t\tconst otherLoggers: ILogger[] = [];\n\t\tif (loggerService.getLogLevel() === LogLevel.Trace) {\n\t\t\totherLoggers.push(new ConsoleLogger(loggerService.getLogLevel()));\n\t\t}\n\n\t\tconst logService = this._register(new LogService(logger, otherLoggers));\n\t\tservices.set(ILogService, logService);\n\n\t\t// Files\n\t\tconst fileService = this._register(new FileService(logService));\n\t\tservices.set(IFileService, fileService);\n\n\t\tconst diskFileSystemProvider = this._register(new DiskFileSystemProvider(logService));\n\t\tfileService.registerProvider(Schemas.file, diskFileSystemProvider);\n\n\t\t// Uri Identity\n\t\tconst uriIdentityService = new UriIdentityService(fileService);\n\t\tservices.set(IUriIdentityService, uriIdentityService);\n\n\t\t// User Data Profiles\n\t\tconst stateService = new StateReadonlyService(SaveStrategy.DELAYED, environmentService, logService, fileService);\n\t\tconst userDataProfilesService = new UserDataProfilesReadonlyService(stateService, uriIdentityService, environmentService, fileService, logService);\n\t\tservices.set(IUserDataProfilesService, userDataProfilesService);\n\n\t\t// Use FileUserDataProvider for user data to\n\t\t// enable atomic read / write operations.\n\t\tfileService.registerProvider(Schemas.vscodeUserData, new FileUserDataProvider(Schemas.file, diskFileSystemProvider, Schemas.vscodeUserData, userDataProfilesService, uriIdentityService, logService));\n\n\t\t// Policy\n\t\tconst policyService = isWindows && productService.win32RegValueName ? this._register(new NativePolicyService(logService, productService.win32RegValueName))\n\t\t\t: environmentService.policyFile ? this._register(new FilePolicyService(environmentService.policyFile, fileService, logService))\n\t\t\t\t: new NullPolicyService();\n\t\tservices.set(IPolicyService, policyService);\n\n\t\t// Configuration\n\t\tconst configurationService = this._register(new ConfigurationService(userDataProfilesService.defaultProfile.settingsResource, fileService, policyService, logService));\n\t\tservices.set(IConfigurationService, configurationService);\n\n\t\t// Initialize\n\t\tawait Promise.all([\n\t\t\tstateService.init(),\n\t\t\tconfigurationService.initialize()\n\t\t]);\n\n\t\t// Get machine ID\n\t\tlet machineId: string | undefined = undefined;\n\t\ttry {\n\t\t\tmachineId = await resolveMachineId(stateService, logService);\n\t\t} catch (error) {\n\t\t\tif (error.code !== 'ENOENT') {\n\t\t\t\tlogService.error(error);\n\t\t\t}\n\t\t}\n\n\t\t// Initialize user data profiles after initializing the state\n\t\tuserDataProfilesService.init();\n\n\t\t// URI Identity\n\t\tservices.set(IUriIdentityService, new UriIdentityService(fileService));\n\n\t\t// Request\n\t\tconst requestService = new RequestService(configurationService, environmentService, logService, loggerService);\n\t\tservices.set(IRequestService, requestService);\n\n\t\t// Download Service\n\t\tservices.set(IDownloadService, new SyncDescriptor(DownloadService, undefined, true));\n\n\t\t// Extensions\n\t\tservices.set(IExtensionsProfileScannerService, new SyncDescriptor(ExtensionsProfileScannerService, undefined, true));\n\t\tservices.set(IExtensionsScannerService, new SyncDescriptor(ExtensionsScannerService, undefined, true));\n\t\tservices.set(IExtensionSignatureVerificationService, new SyncDescriptor(ExtensionSignatureVerificationService, undefined, true));\n\t\tservices.set(INativeServerExtensionManagementService, new SyncDescriptor(ExtensionManagementService, undefined, true));\n\t\tservices.set(IExtensionGalleryService, new SyncDescriptor(ExtensionGalleryServiceWithNoStorageService, undefined, true));\n\n\t\t// Localizations\n\t\tservices.set(ILanguagePackService, new SyncDescriptor(NativeLanguagePackService, undefined, false));\n\n\t\t// Telemetry\n\t\tconst appenders: ITelemetryAppender[] = [];\n\t\tconst isInternal = isInternalTelemetry(productService, configurationService);\n\t\tif (supportsTelemetry(productService, environmentService)) {\n\t\t\tif (productService.aiConfig && productService.aiConfig.ariaKey) {\n\t\t\t\tappenders.push(new OneDataSystemAppender(requestService, isInternal, 'monacoworkbench', null, productService.aiConfig.ariaKey));\n\t\t\t}\n\n\t\t\tconst config: ITelemetryServiceConfig = {\n\t\t\t\tappenders,\n\t\t\t\tsendErrorTelemetry: false,\n\t\t\t\tcommonProperties: resolveCommonProperties(release(), hostname(), process.arch, productService.commit, productService.version, machineId, isInternal),\n\t\t\t\tpiiPaths: getPiiPathsFromEnvironment(environmentService)\n\t\t\t};\n\n\t\t\tservices.set(ITelemetryService, new SyncDescriptor(TelemetryService, [config], false));\n\n\t\t} else {\n\t\t\tservices.set(ITelemetryService, NullTelemetryService);\n\t\t}\n\n\t\treturn [new InstantiationService(services), appenders];\n\t}\n\n\tprivate registerErrorHandler(logService: ILogService): void {\n\n\t\t// Install handler for unexpected errors\n\t\tsetUnexpectedErrorHandler(error => {\n\t\t\tconst message = toErrorMessage(error, true);\n\t\t\tif (!message) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlogService.error(`[uncaught exception in CLI]: ${message}`);\n\t\t});\n\n\t\t// Handle unhandled errors that can occur\n\t\tprocess.on('uncaughtException', err => {\n\t\t\tif (!isSigPipeError(err)) {\n\t\t\t\tonUnexpectedError(err);\n\t\t\t}\n\t\t});\n\t\tprocess.on('unhandledRejection', (reason: unknown) => onUnexpectedError(reason));\n\t}\n\n\tprivate async doRun(environmentService: INativeEnvironmentService, fileService: IFileService, userDataProfilesService: IUserDataProfilesService, instantiationService: IInstantiationService): Promise<void> {\n\t\tlet profile: IUserDataProfile | undefined = undefined;\n\t\tif (environmentService.args.profile) {\n\t\t\tprofile = userDataProfilesService.profiles.find(p => p.name === environmentService.args.profile);\n\t\t\tif (!profile) {\n\t\t\t\tthrow new Error(`Profile '${environmentService.args.profile}' not found.`);\n\t\t\t}\n\t\t}\n\t\tconst profileLocation = (profile ?? userDataProfilesService.defaultProfile).extensionsResource;\n\n\t\t// List Extensions\n\t\tif (this.argv['list-extensions']) {\n\t\t\treturn instantiationService.createInstance(ExtensionManagementCLI, new ConsoleLogger(LogLevel.Info, false)).listExtensions(!!this.argv['show-versions'], this.argv['category'], profileLocation);\n\t\t}\n\n\t\t// Install Extension\n\t\telse if (this.argv['install-extension'] || this.argv['install-builtin-extension']) {\n\t\t\tconst installOptions: InstallOptions = { isMachineScoped: !!this.argv['do-not-sync'], installPreReleaseVersion: !!this.argv['pre-release'], profileLocation };\n\t\t\treturn instantiationService.createInstance(ExtensionManagementCLI, new ConsoleLogger(LogLevel.Info, false)).installExtensions(this.asExtensionIdOrVSIX(this.argv['install-extension'] || []), this.asExtensionIdOrVSIX(this.argv['install-builtin-extension'] || []), installOptions, !!this.argv['force']);\n\t\t}\n\n\t\t// Uninstall Extension\n\t\telse if (this.argv['uninstall-extension']) {\n\t\t\treturn instantiationService.createInstance(ExtensionManagementCLI, new ConsoleLogger(LogLevel.Info, false)).uninstallExtensions(this.asExtensionIdOrVSIX(this.argv['uninstall-extension']), !!this.argv['force'], profileLocation);\n\t\t}\n\n\t\t// Locate Extension\n\t\telse if (this.argv['locate-extension']) {\n\t\t\treturn instantiationService.createInstance(ExtensionManagementCLI, new ConsoleLogger(LogLevel.Info, false)).locateExtension(this.argv['locate-extension']);\n\t\t}\n\n\t\t// Telemetry\n\t\telse if (this.argv['telemetry']) {\n\t\t\tconsole.log(await buildTelemetryMessage(environmentService.appRoot, environmentService.extensionsPath));\n\t\t}\n\t}\n\n\tprivate asExtensionIdOrVSIX(inputs: string[]): (string | URI)[] {\n\t\treturn inputs.map(input => /\\.vsix$/i.test(input) ? URI.file(isAbsolute(input) ? input : join(cwd(), input)) : input);\n\t}\n}\n\nexport async function main(argv: NativeParsedArgs): Promise<void> {\n\tconst cliMain = new CliMain(argv);\n\n\ttry {\n\t\tawait cliMain.run();\n\t} finally {\n\t\tcliMain.dispose();\n\t}\n}\n"]}