{"version":3,"sources":["file:///workspace/appflow/src/vs/code/node/cli.ts"],"names":[],"mappings":"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","file":"cli.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ChildProcess, spawn, SpawnOptions, StdioOptions } from 'child_process';\nimport { chmodSync, existsSync, readFileSync, statSync, truncateSync, unlinkSync } from 'fs';\nimport { homedir, release, tmpdir } from 'os';\nimport type { ProfilingSession, Target } from 'v8-inspect-profiler';\nimport { Event } from 'vs/base/common/event';\nimport { isAbsolute, resolve, join, dirname } from 'vs/base/common/path';\nimport { IProcessEnvironment, isMacintosh, isWindows } from 'vs/base/common/platform';\nimport { randomPort } from 'vs/base/common/ports';\nimport { whenDeleted, writeFileSync } from 'vs/base/node/pfs';\nimport { findFreePort } from 'vs/base/node/ports';\nimport { watchFileContents } from 'vs/platform/files/node/watcher/nodejs/nodejsWatcherLib';\nimport { NativeParsedArgs } from 'vs/platform/environment/common/argv';\nimport { buildHelpMessage, buildVersionMessage, NATIVE_CLI_COMMANDS, OPTIONS } from 'vs/platform/environment/node/argv';\nimport { addArg, parseCLIProcessArgv } from 'vs/platform/environment/node/argvHelper';\nimport { getStdinFilePath, hasStdinWithoutTty, readFromStdin, stdinDataListener } from 'vs/platform/environment/node/stdin';\nimport { createWaitMarkerFileSync } from 'vs/platform/environment/node/wait';\nimport product from 'vs/platform/product/common/product';\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { isUNC, randomPath } from 'vs/base/common/extpath';\nimport { Utils } from 'vs/platform/profiling/common/profiling';\nimport { FileAccess } from 'vs/base/common/network';\nimport { cwd } from 'vs/base/common/process';\nimport { addUNCHostToAllowlist } from 'vs/base/node/unc';\nimport { URI } from 'vs/base/common/uri';\n\nfunction shouldSpawnCliProcess(argv: NativeParsedArgs): boolean {\n\treturn !!argv['install-source']\n\t\t|| !!argv['list-extensions']\n\t\t|| !!argv['install-extension']\n\t\t|| !!argv['uninstall-extension']\n\t\t|| !!argv['locate-extension']\n\t\t|| !!argv['telemetry'];\n}\n\ninterface IMainCli {\n\tmain: (argv: NativeParsedArgs) => Promise<void>;\n}\n\nexport async function main(argv: string[]): Promise<any> {\n\tlet args: NativeParsedArgs;\n\n\ttry {\n\t\targs = parseCLIProcessArgv(argv);\n\t} catch (err) {\n\t\tconsole.error(err.message);\n\t\treturn;\n\t}\n\n\tfor (const subcommand of NATIVE_CLI_COMMANDS) {\n\t\tif (args[subcommand]) {\n\t\t\tif (!product.tunnelApplicationName) {\n\t\t\t\tconsole.error(`'${subcommand}' command not supported in ${product.applicationName}`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst tunnelArgs = argv.slice(argv.indexOf(subcommand) + 1); // all arguments behind `tunnel`\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tlet tunnelProcess: ChildProcess;\n\t\t\t\tconst stdio: StdioOptions = ['ignore', 'pipe', 'pipe'];\n\t\t\t\tif (process.env['VSCODE_DEV']) {\n\t\t\t\t\ttunnelProcess = spawn('cargo', ['run', '--', subcommand, ...tunnelArgs], { cwd: join(getAppRoot(), 'cli'), stdio });\n\t\t\t\t} else {\n\t\t\t\t\tconst appPath = process.platform === 'darwin'\n\t\t\t\t\t\t// ./Contents/MacOS/Electron => ./Contents/Resources/app/bin/code-tunnel-insiders\n\t\t\t\t\t\t? join(dirname(dirname(process.execPath)), 'Resources', 'app')\n\t\t\t\t\t\t: dirname(process.execPath);\n\t\t\t\t\tconst tunnelCommand = join(appPath, 'bin', `${product.tunnelApplicationName}${isWindows ? '.exe' : ''}`);\n\t\t\t\t\ttunnelProcess = spawn(tunnelCommand, [subcommand, ...tunnelArgs], { cwd: cwd(), stdio });\n\t\t\t\t}\n\n\t\t\t\ttunnelProcess.stdout!.pipe(process.stdout);\n\t\t\t\ttunnelProcess.stderr!.pipe(process.stderr);\n\t\t\t\ttunnelProcess.on('exit', resolve);\n\t\t\t\ttunnelProcess.on('error', reject);\n\t\t\t});\n\t\t}\n\t}\n\n\t// Help\n\tif (args.help) {\n\t\tconst executable = `${product.applicationName}${isWindows ? '.exe' : ''}`;\n\t\tconsole.log(buildHelpMessage(product.nameLong, executable, product.version, OPTIONS));\n\t}\n\n\t// Version Info\n\telse if (args.version) {\n\t\tconsole.log(buildVersionMessage(product.version, product.commit));\n\t}\n\n\t// Shell integration\n\telse if (args['locate-shell-integration-path']) {\n\t\tlet file: string;\n\t\tswitch (args['locate-shell-integration-path']) {\n\t\t\t// Usage: `[[ \"$TERM_PROGRAM\" == \"vscode\" ]] && . \"$(code --locate-shell-integration-path bash)\"`\n\t\t\tcase 'bash': file = 'shellIntegration-bash.sh'; break;\n\t\t\t// Usage: `if ($env:TERM_PROGRAM -eq \"vscode\") { . \"$(code --locate-shell-integration-path pwsh)\" }`\n\t\t\tcase 'pwsh': file = 'shellIntegration.ps1'; break;\n\t\t\t// Usage: `[[ \"$TERM_PROGRAM\" == \"vscode\" ]] && . \"$(code --locate-shell-integration-path zsh)\"`\n\t\t\tcase 'zsh': file = 'shellIntegration-rc.zsh'; break;\n\t\t\t// Usage: `string match -q \"$TERM_PROGRAM\" \"vscode\"; and . (code --locate-shell-integration-path fish)`\n\t\t\tcase 'fish': file = 'fish_xdg_data/fish/vendor_conf.d/shellIntegration.fish'; break;\n\t\t\tdefault: throw new Error('Error using --locate-shell-integration-path: Invalid shell type');\n\t\t}\n\t\tconsole.log(join(getAppRoot(), 'out', 'vs', 'workbench', 'contrib', 'terminal', 'browser', 'media', file));\n\t}\n\n\t// Extensions Management\n\telse if (shouldSpawnCliProcess(args)) {\n\t\tconst cli = await new Promise<IMainCli>((resolve, reject) => require(['vs/code/node/cliProcessMain'], resolve, reject));\n\t\tawait cli.main(args);\n\n\t\treturn;\n\t}\n\n\t// Write File\n\telse if (args['file-write']) {\n\t\tconst source = args._[0];\n\t\tconst target = args._[1];\n\n\t\t// Windows: set the paths as allowed UNC paths given\n\t\t// they are explicitly provided by the user as arguments\n\t\tif (isWindows) {\n\t\t\tfor (const path of [source, target]) {\n\t\t\t\tif (isUNC(path)) {\n\t\t\t\t\taddUNCHostToAllowlist(URI.file(path).authority);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Validate\n\t\tif (\n\t\t\t!source || !target || source === target ||\t\t\t\t// make sure source and target are provided and are not the same\n\t\t\t!isAbsolute(source) || !isAbsolute(target) ||\t\t\t// make sure both source and target are absolute paths\n\t\t\t!existsSync(source) || !statSync(source).isFile() ||\t// make sure source exists as file\n\t\t\t!existsSync(target) || !statSync(target).isFile()\t\t// make sure target exists as file\n\t\t) {\n\t\t\tthrow new Error('Using --file-write with invalid arguments.');\n\t\t}\n\n\t\ttry {\n\n\t\t\t// Check for readonly status and chmod if so if we are told so\n\t\t\tlet targetMode: number = 0;\n\t\t\tlet restoreMode = false;\n\t\t\tif (!!args['file-chmod']) {\n\t\t\t\ttargetMode = statSync(target).mode;\n\t\t\t\tif (!(targetMode & 0o200 /* File mode indicating writable by owner */)) {\n\t\t\t\t\tchmodSync(target, targetMode | 0o200);\n\t\t\t\t\trestoreMode = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Write source to target\n\t\t\tconst data = readFileSync(source);\n\t\t\tif (isWindows) {\n\t\t\t\t// On Windows we use a different strategy of saving the file\n\t\t\t\t// by first truncating the file and then writing with r+ mode.\n\t\t\t\t// This helps to save hidden files on Windows\n\t\t\t\t// (see https://github.com/microsoft/vscode/issues/931) and\n\t\t\t\t// prevent removing alternate data streams\n\t\t\t\t// (see https://github.com/microsoft/vscode/issues/6363)\n\t\t\t\ttruncateSync(target, 0);\n\t\t\t\twriteFileSync(target, data, { flag: 'r+' });\n\t\t\t} else {\n\t\t\t\twriteFileSync(target, data);\n\t\t\t}\n\n\t\t\t// Restore previous mode as needed\n\t\t\tif (restoreMode) {\n\t\t\t\tchmodSync(target, targetMode);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\terror.message = `Error using --file-write: ${error.message}`;\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\t// Just Code\n\telse {\n\t\tconst env: IProcessEnvironment = {\n\t\t\t...process.env,\n\t\t\t'ELECTRON_NO_ATTACH_CONSOLE': '1'\n\t\t};\n\n\t\tdelete env['ELECTRON_RUN_AS_NODE'];\n\n\t\tconst processCallbacks: ((child: ChildProcess) => Promise<void>)[] = [];\n\n\t\tif (args.verbose) {\n\t\t\tenv['ELECTRON_ENABLE_LOGGING'] = '1';\n\t\t}\n\n\t\tif (args.verbose || args.status) {\n\t\t\tprocessCallbacks.push(async child => {\n\t\t\t\tchild.stdout?.on('data', (data: Buffer) => console.log(data.toString('utf8').trim()));\n\t\t\t\tchild.stderr?.on('data', (data: Buffer) => console.log(data.toString('utf8').trim()));\n\n\t\t\t\tawait Event.toPromise(Event.fromNodeEventEmitter(child, 'exit'));\n\t\t\t});\n\t\t}\n\n\t\tconst hasReadStdinArg = args._.some(a => a === '-');\n\t\tif (hasReadStdinArg) {\n\t\t\t// remove the \"-\" argument when we read from stdin\n\t\t\targs._ = args._.filter(a => a !== '-');\n\t\t\targv = argv.filter(a => a !== '-');\n\t\t}\n\n\t\tlet stdinFilePath: string | undefined;\n\t\tif (hasStdinWithoutTty()) {\n\n\t\t\t// Read from stdin: we require a single \"-\" argument to be passed in order to start reading from\n\t\t\t// stdin. We do this because there is no reliable way to find out if data is piped to stdin. Just\n\t\t\t// checking for stdin being connected to a TTY is not enough (https://github.com/microsoft/vscode/issues/40351)\n\n\t\t\tif (hasReadStdinArg) {\n\t\t\t\tstdinFilePath = getStdinFilePath();\n\n\t\t\t\t// returns a file path where stdin input is written into (write in progress).\n\t\t\t\ttry {\n\t\t\t\t\tawait readFromStdin(stdinFilePath, !!args.verbose); // throws error if file can not be written\n\n\t\t\t\t\t// Make sure to open tmp file\n\t\t\t\t\taddArg(argv, stdinFilePath);\n\n\t\t\t\t\t// Enable --wait to get all data and ignore adding this to history\n\t\t\t\t\taddArg(argv, '--wait');\n\t\t\t\t\taddArg(argv, '--skip-add-to-recently-opened');\n\t\t\t\t\targs.wait = true;\n\n\t\t\t\t\tconsole.log(`Reading from stdin via: ${stdinFilePath}`);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.log(`Failed to create file to read via stdin: ${e.toString()}`);\n\t\t\t\t\tstdinFilePath = undefined;\n\t\t\t\t}\n\t\t\t} else {\n\n\t\t\t\t// If the user pipes data via stdin but forgot to add the \"-\" argument, help by printing a message\n\t\t\t\t// if we detect that data flows into via stdin after a certain timeout.\n\t\t\t\tprocessCallbacks.push(_ => stdinDataListener(1000).then(dataReceived => {\n\t\t\t\t\tif (dataReceived) {\n\t\t\t\t\t\tif (isWindows) {\n\t\t\t\t\t\t\tconsole.log(`Run with '${product.applicationName} -' to read output from another program (e.g. 'echo Hello World | ${product.applicationName} -').`);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconsole.log(`Run with '${product.applicationName} -' to read from stdin (e.g. 'ps aux | grep code | ${product.applicationName} -').`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\n\t\tconst isMacOSBigSurOrNewer = isMacintosh && release() > '20.0.0';\n\n\t\t// If we are started with --wait create a random temporary file\n\t\t// and pass it over to the starting instance. We can use this file\n\t\t// to wait for it to be deleted to monitor that the edited file\n\t\t// is closed and then exit the waiting process.\n\t\tlet waitMarkerFilePath: string | undefined;\n\t\tif (args.wait) {\n\t\t\twaitMarkerFilePath = createWaitMarkerFileSync(args.verbose);\n\t\t\tif (waitMarkerFilePath) {\n\t\t\t\taddArg(argv, '--waitMarkerFilePath', waitMarkerFilePath);\n\t\t\t}\n\n\t\t\t// When running with --wait, we want to continue running CLI process\n\t\t\t// until either:\n\t\t\t// - the wait marker file has been deleted (e.g. when closing the editor)\n\t\t\t// - the launched process terminates (e.g. due to a crash)\n\t\t\tprocessCallbacks.push(async child => {\n\t\t\t\tlet childExitPromise;\n\t\t\t\tif (isMacOSBigSurOrNewer) {\n\t\t\t\t\t// On Big Sur, we resolve the following promise only when the child,\n\t\t\t\t\t// i.e. the open command, exited with a signal or error. Otherwise, we\n\t\t\t\t\t// wait for the marker file to be deleted or for the child to error.\n\t\t\t\t\tchildExitPromise = new Promise<void>(resolve => {\n\t\t\t\t\t\t// Only resolve this promise if the child (i.e. open) exited with an error\n\t\t\t\t\t\tchild.on('exit', (code, signal) => {\n\t\t\t\t\t\t\tif (code !== 0 || signal) {\n\t\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// On other platforms, we listen for exit in case the child exits before the\n\t\t\t\t\t// marker file is deleted.\n\t\t\t\t\tchildExitPromise = Event.toPromise(Event.fromNodeEventEmitter(child, 'exit'));\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tawait Promise.race([\n\t\t\t\t\t\twhenDeleted(waitMarkerFilePath!),\n\t\t\t\t\t\tEvent.toPromise(Event.fromNodeEventEmitter(child, 'error')),\n\t\t\t\t\t\tchildExitPromise\n\t\t\t\t\t]);\n\t\t\t\t} finally {\n\t\t\t\t\tif (stdinFilePath) {\n\t\t\t\t\t\tunlinkSync(stdinFilePath); // Make sure to delete the tmp stdin file if we have any\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// If we have been started with `--prof-startup` we need to find free ports to profile\n\t\t// the main process, the renderer, and the extension host. We also disable v8 cached data\n\t\t// to get better profile traces. Last, we listen on stdout for a signal that tells us to\n\t\t// stop profiling.\n\t\tif (args['prof-startup']) {\n\t\t\tconst portMain = await findFreePort(randomPort(), 10, 3000);\n\t\t\tconst portRenderer = await findFreePort(portMain + 1, 10, 3000);\n\t\t\tconst portExthost = await findFreePort(portRenderer + 1, 10, 3000);\n\n\t\t\t// fail the operation when one of the ports couldn't be acquired.\n\t\t\tif (portMain * portRenderer * portExthost === 0) {\n\t\t\t\tthrow new Error('Failed to find free ports for profiler. Make sure to shutdown all instances of the editor first.');\n\t\t\t}\n\n\t\t\tconst filenamePrefix = randomPath(homedir(), 'prof');\n\n\t\t\taddArg(argv, `--inspect-brk=${portMain}`);\n\t\t\taddArg(argv, `--remote-debugging-port=${portRenderer}`);\n\t\t\taddArg(argv, `--inspect-brk-extensions=${portExthost}`);\n\t\t\taddArg(argv, `--prof-startup-prefix`, filenamePrefix);\n\t\t\taddArg(argv, `--no-cached-data`);\n\n\t\t\twriteFileSync(filenamePrefix, argv.slice(-6).join('|'));\n\n\t\t\tprocessCallbacks.push(async _child => {\n\n\t\t\t\tclass Profiler {\n\t\t\t\t\tstatic async start(name: string, filenamePrefix: string, opts: { port: number; tries?: number; target?: (targets: Target[]) => Target }) {\n\t\t\t\t\t\tconst profiler = await import('v8-inspect-profiler');\n\n\t\t\t\t\t\tlet session: ProfilingSession;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tsession = await profiler.startProfiling(opts);\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\tconsole.error(`FAILED to start profiling for '${name}' on port '${opts.port}'`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tasync stop() {\n\t\t\t\t\t\t\t\tif (!session) {\n\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tlet suffix = '';\n\t\t\t\t\t\t\t\tconst result = await session.stop();\n\t\t\t\t\t\t\t\tif (!process.env['VSCODE_DEV']) {\n\t\t\t\t\t\t\t\t\t// when running from a not-development-build we remove\n\t\t\t\t\t\t\t\t\t// absolute filenames because we don't want to reveal anything\n\t\t\t\t\t\t\t\t\t// about users. We also append the `.txt` suffix to make it\n\t\t\t\t\t\t\t\t\t// easier to attach these files to GH issues\n\t\t\t\t\t\t\t\t\tresult.profile = Utils.rewriteAbsolutePaths(result.profile, 'piiRemoved');\n\t\t\t\t\t\t\t\t\tsuffix = '.txt';\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\twriteFileSync(`${filenamePrefix}.${name}.cpuprofile${suffix}`, JSON.stringify(result.profile, undefined, 4));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\t// load and start profiler\n\t\t\t\t\tconst mainProfileRequest = Profiler.start('main', filenamePrefix, { port: portMain });\n\t\t\t\t\tconst extHostProfileRequest = Profiler.start('extHost', filenamePrefix, { port: portExthost, tries: 300 });\n\t\t\t\t\tconst rendererProfileRequest = Profiler.start('renderer', filenamePrefix, {\n\t\t\t\t\t\tport: portRenderer,\n\t\t\t\t\t\ttries: 200,\n\t\t\t\t\t\ttarget: function (targets) {\n\t\t\t\t\t\t\treturn targets.filter(target => {\n\t\t\t\t\t\t\t\tif (!target.webSocketDebuggerUrl) {\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (target.type === 'page') {\n\t\t\t\t\t\t\t\t\treturn target.url.indexOf('workbench/workbench.html') > 0 || target.url.indexOf('workbench/workbench-dev.html') > 0;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})[0];\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tconst main = await mainProfileRequest;\n\t\t\t\t\tconst extHost = await extHostProfileRequest;\n\t\t\t\t\tconst renderer = await rendererProfileRequest;\n\n\t\t\t\t\t// wait for the renderer to delete the\n\t\t\t\t\t// marker file\n\t\t\t\t\tawait whenDeleted(filenamePrefix);\n\n\t\t\t\t\t// stop profiling\n\t\t\t\t\tawait main.stop();\n\t\t\t\t\tawait renderer.stop();\n\t\t\t\t\tawait extHost.stop();\n\n\t\t\t\t\t// re-create the marker file to signal that profiling is done\n\t\t\t\t\twriteFileSync(filenamePrefix, '');\n\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error('Failed to profile startup. Make sure to quit Code first.');\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tconst options: SpawnOptions = {\n\t\t\tdetached: true,\n\t\t\tenv\n\t\t};\n\n\t\tif (!args.verbose) {\n\t\t\toptions['stdio'] = 'ignore';\n\t\t}\n\n\t\tlet child: ChildProcess;\n\t\tif (!isMacOSBigSurOrNewer) {\n\t\t\tif (!args.verbose && args.status) {\n\t\t\t\toptions['stdio'] = ['ignore', 'pipe', 'ignore']; // restore ability to see output when --status is used\n\t\t\t}\n\n\t\t\t// We spawn process.execPath directly\n\t\t\tchild = spawn(process.execPath, argv.slice(2), options);\n\t\t} else {\n\t\t\t// On Big Sur, we spawn using the open command to obtain behavior\n\t\t\t// similar to if the app was launched from the dock\n\t\t\t// https://github.com/microsoft/vscode/issues/102975\n\n\t\t\t// The following args are for the open command itself, rather than for VS Code:\n\t\t\t// -n creates a new instance.\n\t\t\t//    Without -n, the open command re-opens the existing instance as-is.\n\t\t\t// -g starts the new instance in the background.\n\t\t\t//    Later, Electron brings the instance to the foreground.\n\t\t\t//    This way, Mac does not automatically try to foreground the new instance, which causes\n\t\t\t//    focusing issues when the new instance only sends data to a previous instance and then closes.\n\t\t\tconst spawnArgs = ['-n', '-g'];\n\t\t\t// -a opens the given application.\n\t\t\tspawnArgs.push('-a', process.execPath); // -a: opens a specific application\n\n\t\t\tif (args.verbose || args.status) {\n\t\t\t\tspawnArgs.push('--wait-apps'); // `open --wait-apps`: blocks until the launched app is closed (even if they were already running)\n\n\t\t\t\t// The open command only allows for redirecting stderr and stdout to files,\n\t\t\t\t// so we make it redirect those to temp files, and then use a logger to\n\t\t\t\t// redirect the file output to the console\n\t\t\t\tfor (const outputType of args.verbose ? ['stdout', 'stderr'] : ['stdout']) {\n\n\t\t\t\t\t// Tmp file to target output to\n\t\t\t\t\tconst tmpName = randomPath(tmpdir(), `code-${outputType}`);\n\t\t\t\t\twriteFileSync(tmpName, '');\n\t\t\t\t\tspawnArgs.push(`--${outputType}`, tmpName);\n\n\t\t\t\t\t// Listener to redirect content to stdout/stderr\n\t\t\t\t\tprocessCallbacks.push(async child => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst stream = outputType === 'stdout' ? process.stdout : process.stderr;\n\n\t\t\t\t\t\t\tconst cts = new CancellationTokenSource();\n\t\t\t\t\t\t\tchild.on('close', () => {\n\t\t\t\t\t\t\t\t// We must dispose the token to stop watching,\n\t\t\t\t\t\t\t\t// but the watcher might still be reading data.\n\t\t\t\t\t\t\t\tsetTimeout(() => cts.dispose(true), 200);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tawait watchFileContents(tmpName, chunk => stream.write(chunk), () => { /* ignore */ }, cts.token);\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tunlinkSync(tmpName);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const e in env) {\n\t\t\t\t// Ignore the _ env var, because the open command\n\t\t\t\t// ignores it anyway.\n\t\t\t\t// Pass the rest of the env vars in to fix\n\t\t\t\t// https://github.com/microsoft/vscode/issues/134696.\n\t\t\t\tif (e !== '_') {\n\t\t\t\t\tspawnArgs.push('--env');\n\t\t\t\t\tspawnArgs.push(`${e}=${env[e]}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tspawnArgs.push('--args', ...argv.slice(2)); // pass on our arguments\n\n\t\t\tif (env['VSCODE_DEV']) {\n\t\t\t\t// If we're in development mode, replace the . arg with the\n\t\t\t\t// vscode source arg. Because the OSS app isn't bundled,\n\t\t\t\t// it needs the full vscode source arg to launch properly.\n\t\t\t\tconst curdir = '.';\n\t\t\t\tconst launchDirIndex = spawnArgs.indexOf(curdir);\n\t\t\t\tif (launchDirIndex !== -1) {\n\t\t\t\t\tspawnArgs[launchDirIndex] = resolve(curdir);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// We already passed over the env variables\n\t\t\t// using the --env flags, so we can leave them out here.\n\t\t\t// Also, we don't need to pass env._, which is different from argv._\n\t\t\tchild = spawn('open', spawnArgs, { ...options, env: {} });\n\t\t}\n\n\t\treturn Promise.all(processCallbacks.map(callback => callback(child)));\n\t}\n}\n\nfunction getAppRoot() {\n\treturn dirname(FileAccess.asFileUri('').fsPath);\n}\n\nfunction eventuallyExit(code: number): void {\n\tsetTimeout(() => process.exit(code), 0);\n}\n\nmain(process.argv)\n\t.then(() => eventuallyExit(0))\n\t.then(null, err => {\n\t\tconsole.error(err.message || err.stack || err);\n\t\teventuallyExit(1);\n\t});\n"]}