{"version":3,"sources":["vs/code/electron-main/main.ts"],"names":[],"mappings":"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","file":"main.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/platform/update/common/update.config.contribution';\n\nimport { app, dialog } from 'electron';\nimport { unlinkSync } from 'fs';\nimport { URI } from 'vs/base/common/uri';\nimport { coalesce, distinct } from 'vs/base/common/arrays';\nimport { Promises } from 'vs/base/common/async';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { ExpectedError, setUnexpectedErrorHandler } from 'vs/base/common/errors';\nimport { IPathWithLineAndColumn, isValidBasename, parseLineAndColumnAware, sanitizeFilePath } from 'vs/base/common/extpath';\nimport { once } from 'vs/base/common/functional';\nimport { getPathLabel } from 'vs/base/common/labels';\nimport { Schemas } from 'vs/base/common/network';\nimport { basename, resolve } from 'vs/base/common/path';\nimport { mark } from 'vs/base/common/performance';\nimport { IProcessEnvironment, isMacintosh, isWindows, OS } from 'vs/base/common/platform';\nimport { cwd } from 'vs/base/common/process';\nimport { rtrim, trim } from 'vs/base/common/strings';\nimport { Promises as FSPromises } from 'vs/base/node/pfs';\nimport { ProxyChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { Client as NodeIPCClient } from 'vs/base/parts/ipc/common/ipc.net';\nimport { connect as nodeIPCConnect, serve as nodeIPCServe, Server as NodeIPCServer, XDG_RUNTIME_DIR } from 'vs/base/parts/ipc/node/ipc.net';\nimport { CodeApplication } from 'vs/code/electron-main/app';\nimport { localize } from 'vs/nls';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ConfigurationService } from 'vs/platform/configuration/common/configurationService';\nimport { IDiagnosticsMainService } from 'vs/platform/diagnostics/electron-main/diagnosticsMainService';\nimport { DiagnosticsService } from 'vs/platform/diagnostics/node/diagnosticsService';\nimport { NativeParsedArgs } from 'vs/platform/environment/common/argv';\nimport { EnvironmentMainService, IEnvironmentMainService } from 'vs/platform/environment/electron-main/environmentMainService';\nimport { addArg, parseMainProcessArgv } from 'vs/platform/environment/node/argvHelper';\nimport { createWaitMarkerFileSync } from 'vs/platform/environment/node/wait';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { DiskFileSystemProvider } from 'vs/platform/files/node/diskFileSystemProvider';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { InstantiationService } from 'vs/platform/instantiation/common/instantiationService';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { ILaunchMainService } from 'vs/platform/launch/electron-main/launchMainService';\nimport { ILifecycleMainService, LifecycleMainService } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\nimport { BufferLogger } from 'vs/platform/log/common/bufferLog';\nimport { ConsoleMainLogger, getLogLevel, ILoggerService, ILogService } from 'vs/platform/log/common/log';\nimport product from 'vs/platform/product/common/product';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IProtocolMainService } from 'vs/platform/protocol/electron-main/protocol';\nimport { ProtocolMainService } from 'vs/platform/protocol/electron-main/protocolMainService';\nimport { ITunnelService } from 'vs/platform/tunnel/common/tunnel';\nimport { TunnelService } from 'vs/platform/tunnel/node/tunnelService';\nimport { IRequestService } from 'vs/platform/request/common/request';\nimport { RequestMainService } from 'vs/platform/request/electron-main/requestMainService';\nimport { ISignService } from 'vs/platform/sign/common/sign';\nimport { SignService } from 'vs/platform/sign/node/signService';\nimport { IStateReadService, IStateService } from 'vs/platform/state/node/state';\nimport { NullTelemetryService } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { IThemeMainService, ThemeMainService } from 'vs/platform/theme/electron-main/themeMainService';\nimport { IUserDataProfilesMainService, UserDataProfilesMainService } from 'vs/platform/userDataProfile/electron-main/userDataProfile';\nimport { IPolicyService, NullPolicyService } from 'vs/platform/policy/common/policy';\nimport { NativePolicyService } from 'vs/platform/policy/node/nativePolicyService';\nimport { FilePolicyService } from 'vs/platform/policy/common/filePolicyService';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { UriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentityService';\nimport { ILoggerMainService, LoggerMainService } from 'vs/platform/log/electron-main/loggerService';\nimport { LogService } from 'vs/platform/log/common/logService';\nimport { massageMessageBoxOptions } from 'vs/platform/dialogs/common/dialogs';\nimport { SaveStrategy, StateService } from 'vs/platform/state/node/stateService';\nimport { FileUserDataProvider } from 'vs/platform/userData/common/fileUserDataProvider';\n\n/**\n * The main VS Code entry point.\n *\n * Note: This class can exist more than once for example when VS Code is already\n * running and a second instance is started from the command line. It will always\n * try to communicate with an existing instance to prevent that 2 VS Code instances\n * are running at the same time.\n */\nclass CodeMain {\n\n\tmain(): void {\n\t\ttry {\n\t\t\tthis.startup();\n\t\t} catch (error) {\n\t\t\tconsole.error(error.message);\n\t\t\tapp.exit(1);\n\t\t}\n\t}\n\n\tprivate async startup(): Promise<void> {\n\n\t\t// Set the error handler early enough so that we are not getting the\n\t\t// default electron error dialog popping up\n\t\tsetUnexpectedErrorHandler(err => console.error(err));\n\n\t\t// Create services\n\t\tconst [instantiationService, instanceEnvironment, environmentMainService, configurationService, stateMainService, bufferLogService, productService, userDataProfilesMainService] = this.createServices();\n\n\t\ttry {\n\n\t\t\t// Init services\n\t\t\ttry {\n\t\t\t\tawait this.initServices(environmentMainService, userDataProfilesMainService, configurationService, stateMainService, productService);\n\t\t\t} catch (error) {\n\n\t\t\t\t// Show a dialog for errors that can be resolved by the user\n\t\t\t\tthis.handleStartupDataDirError(environmentMainService, productService, error);\n\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\t// Startup\n\t\t\tawait instantiationService.invokeFunction(async accessor => {\n\t\t\t\tconst logService = accessor.get(ILogService);\n\t\t\t\tconst lifecycleMainService = accessor.get(ILifecycleMainService);\n\t\t\t\tconst fileService = accessor.get(IFileService);\n\t\t\t\tconst loggerService = accessor.get(ILoggerService);\n\n\t\t\t\t// Create the main IPC server by trying to be the server\n\t\t\t\t// If this throws an error it means we are not the first\n\t\t\t\t// instance of VS Code running and so we would quit.\n\t\t\t\tconst mainProcessNodeIpcServer = await this.claimInstance(logService, environmentMainService, lifecycleMainService, instantiationService, productService, true);\n\n\t\t\t\t// Write a lockfile to indicate an instance is running\n\t\t\t\t// (https://github.com/microsoft/vscode/issues/127861#issuecomment-877417451)\n\t\t\t\tFSPromises.writeFile(environmentMainService.mainLockfile, String(process.pid)).catch(err => {\n\t\t\t\t\tlogService.warn(`app#startup(): Error writing main lockfile: ${err.stack}`);\n\t\t\t\t});\n\n\t\t\t\t// Delay creation of spdlog for perf reasons (https://github.com/microsoft/vscode/issues/72906)\n\t\t\t\tbufferLogService.logger = loggerService.createLogger('main', { name: localize('mainLog', \"Main\") });\n\n\t\t\t\t// Lifecycle\n\t\t\t\tonce(lifecycleMainService.onWillShutdown)(evt => {\n\t\t\t\t\tfileService.dispose();\n\t\t\t\t\tconfigurationService.dispose();\n\t\t\t\t\tevt.join('instanceLockfile', FSPromises.unlink(environmentMainService.mainLockfile).catch(() => { /* ignored */ }));\n\t\t\t\t});\n\n\t\t\t\treturn instantiationService.createInstance(CodeApplication, mainProcessNodeIpcServer, instanceEnvironment).startup();\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tinstantiationService.invokeFunction(this.quit, error);\n\t\t}\n\t}\n\n\tprivate createServices(): [IInstantiationService, IProcessEnvironment, IEnvironmentMainService, ConfigurationService, StateService, BufferLogger, IProductService, UserDataProfilesMainService] {\n\t\tconst services = new ServiceCollection();\n\t\tconst disposables = new DisposableStore();\n\t\tprocess.once('exit', () => disposables.dispose());\n\n\t\t// Product\n\t\tconst productService = { _serviceBrand: undefined, ...product };\n\t\tservices.set(IProductService, productService);\n\n\t\t// Environment\n\t\tconst environmentMainService = new EnvironmentMainService(this.resolveArgs(), productService);\n\t\tconst instanceEnvironment = this.patchEnvironment(environmentMainService); // Patch `process.env` with the instance's environment\n\t\tservices.set(IEnvironmentMainService, environmentMainService);\n\n\t\t// Logger\n\t\tconst loggerService = new LoggerMainService(getLogLevel(environmentMainService), environmentMainService.logsHome);\n\t\tservices.set(ILoggerMainService, loggerService);\n\n\t\t// Log: We need to buffer the spdlog logs until we are sure\n\t\t// we are the only instance running, otherwise we'll have concurrent\n\t\t// log file access on Windows (https://github.com/microsoft/vscode/issues/41218)\n\t\tconst bufferLogger = new BufferLogger(loggerService.getLogLevel());\n\t\tconst logService = disposables.add(new LogService(bufferLogger, [new ConsoleMainLogger(loggerService.getLogLevel())]));\n\t\tservices.set(ILogService, logService);\n\n\t\t// Files\n\t\tconst fileService = new FileService(logService);\n\t\tservices.set(IFileService, fileService);\n\t\tconst diskFileSystemProvider = new DiskFileSystemProvider(logService);\n\t\tfileService.registerProvider(Schemas.file, diskFileSystemProvider);\n\n\t\t// URI Identity\n\t\tconst uriIdentityService = new UriIdentityService(fileService);\n\t\tservices.set(IUriIdentityService, uriIdentityService);\n\n\t\t// State\n\t\tconst stateService = new StateService(SaveStrategy.DELAYED, environmentMainService, logService, fileService);\n\t\tservices.set(IStateReadService, stateService);\n\t\tservices.set(IStateService, stateService);\n\n\t\t// User Data Profiles\n\t\tconst userDataProfilesMainService = new UserDataProfilesMainService(stateService, uriIdentityService, environmentMainService, fileService, logService);\n\t\tservices.set(IUserDataProfilesMainService, userDataProfilesMainService);\n\n\t\t// Use FileUserDataProvider for user data to\n\t\t// enable atomic read / write operations.\n\t\tfileService.registerProvider(Schemas.vscodeUserData, new FileUserDataProvider(Schemas.file, diskFileSystemProvider, Schemas.vscodeUserData, userDataProfilesMainService, uriIdentityService, logService));\n\n\t\t// Policy\n\t\tconst policyService = isWindows && productService.win32RegValueName ? disposables.add(new NativePolicyService(logService, productService.win32RegValueName))\n\t\t\t: environmentMainService.policyFile ? disposables.add(new FilePolicyService(environmentMainService.policyFile, fileService, logService))\n\t\t\t\t: new NullPolicyService();\n\t\tservices.set(IPolicyService, policyService);\n\n\t\t// Configuration\n\t\tconst configurationService = new ConfigurationService(userDataProfilesMainService.defaultProfile.settingsResource, fileService, policyService, logService);\n\t\tservices.set(IConfigurationService, configurationService);\n\n\t\t// Lifecycle\n\t\tservices.set(ILifecycleMainService, new SyncDescriptor(LifecycleMainService, undefined, false));\n\n\t\t// Request\n\t\tservices.set(IRequestService, new SyncDescriptor(RequestMainService, undefined, true));\n\n\t\t// Themes\n\t\tservices.set(IThemeMainService, new SyncDescriptor(ThemeMainService));\n\n\t\t// Signing\n\t\tservices.set(ISignService, new SyncDescriptor(SignService, undefined, false /* proxied to other processes */));\n\n\t\t// Tunnel\n\t\tservices.set(ITunnelService, new SyncDescriptor(TunnelService));\n\n\t\t// Protocol (instantiated early and not using sync descriptor for security reasons)\n\t\tservices.set(IProtocolMainService, new ProtocolMainService(environmentMainService, userDataProfilesMainService, logService));\n\n\t\treturn [new InstantiationService(services, true), instanceEnvironment, environmentMainService, configurationService, stateService, bufferLogger, productService, userDataProfilesMainService];\n\t}\n\n\tprivate patchEnvironment(environmentMainService: IEnvironmentMainService): IProcessEnvironment {\n\t\tconst instanceEnvironment: IProcessEnvironment = {\n\t\t\tVSCODE_IPC_HOOK: environmentMainService.mainIPCHandle\n\t\t};\n\n\t\t['VSCODE_NLS_CONFIG', 'VSCODE_PORTABLE'].forEach(key => {\n\t\t\tconst value = process.env[key];\n\t\t\tif (typeof value === 'string') {\n\t\t\t\tinstanceEnvironment[key] = value;\n\t\t\t}\n\t\t});\n\n\t\tObject.assign(process.env, instanceEnvironment);\n\n\t\treturn instanceEnvironment;\n\t}\n\n\tprivate async initServices(environmentMainService: IEnvironmentMainService, userDataProfilesMainService: UserDataProfilesMainService, configurationService: ConfigurationService, stateService: StateService, productService: IProductService): Promise<void> {\n\t\tawait Promises.settled<unknown>([\n\n\t\t\t// Environment service (paths)\n\t\t\tPromise.all<string | undefined>([\n\t\t\t\tenvironmentMainService.extensionsPath,\n\t\t\t\tenvironmentMainService.codeCachePath,\n\t\t\t\tenvironmentMainService.logsHome.with({ scheme: Schemas.file }).fsPath,\n\t\t\t\tuserDataProfilesMainService.defaultProfile.globalStorageHome.with({ scheme: Schemas.file }).fsPath,\n\t\t\t\tenvironmentMainService.workspaceStorageHome.with({ scheme: Schemas.file }).fsPath,\n\t\t\t\tenvironmentMainService.localHistoryHome.with({ scheme: Schemas.file }).fsPath,\n\t\t\t\tenvironmentMainService.backupHome\n\t\t\t].map(path => path ? FSPromises.mkdir(path, { recursive: true }) : undefined)),\n\n\t\t\t// State service\n\t\t\tstateService.init(),\n\n\t\t\t// Configuration service\n\t\t\tconfigurationService.initialize()\n\t\t]);\n\n\t\t// Initialize user data profiles after initializing the state\n\t\tuserDataProfilesMainService.init();\n\t}\n\n\tprivate async claimInstance(logService: ILogService, environmentMainService: IEnvironmentMainService, lifecycleMainService: ILifecycleMainService, instantiationService: IInstantiationService, productService: IProductService, retry: boolean): Promise<NodeIPCServer> {\n\n\t\t// Try to setup a server for running. If that succeeds it means\n\t\t// we are the first instance to startup. Otherwise it is likely\n\t\t// that another instance is already running.\n\t\tlet mainProcessNodeIpcServer: NodeIPCServer;\n\t\ttry {\n\t\t\tmark('code/willStartMainServer');\n\t\t\tmainProcessNodeIpcServer = await nodeIPCServe(environmentMainService.mainIPCHandle);\n\t\t\tmark('code/didStartMainServer');\n\t\t\tonce(lifecycleMainService.onWillShutdown)(() => mainProcessNodeIpcServer.dispose());\n\t\t} catch (error) {\n\n\t\t\t// Handle unexpected errors (the only expected error is EADDRINUSE that\n\t\t\t// indicates another instance of VS Code is running)\n\t\t\tif (error.code !== 'EADDRINUSE') {\n\n\t\t\t\t// Show a dialog for errors that can be resolved by the user\n\t\t\t\tthis.handleStartupDataDirError(environmentMainService, productService, error);\n\n\t\t\t\t// Any other runtime error is just printed to the console\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\t// there's a running instance, let's connect to it\n\t\t\tlet client: NodeIPCClient<string>;\n\t\t\ttry {\n\t\t\t\tclient = await nodeIPCConnect(environmentMainService.mainIPCHandle, 'main');\n\t\t\t} catch (error) {\n\n\t\t\t\t// Handle unexpected connection errors by showing a dialog to the user\n\t\t\t\tif (!retry || isWindows || error.code !== 'ECONNREFUSED') {\n\t\t\t\t\tif (error.code === 'EPERM') {\n\t\t\t\t\t\tthis.showStartupWarningDialog(\n\t\t\t\t\t\t\tlocalize('secondInstanceAdmin', \"Another instance of {0} is already running as administrator.\", productService.nameShort),\n\t\t\t\t\t\t\tlocalize('secondInstanceAdminDetail', \"Please close the other instance and try again.\"),\n\t\t\t\t\t\t\tproductService\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\n\t\t\t\t// it happens on Linux and OS X that the pipe is left behind\n\t\t\t\t// let's delete it, since we can't connect to it and then\n\t\t\t\t// retry the whole thing\n\t\t\t\ttry {\n\t\t\t\t\tunlinkSync(environmentMainService.mainIPCHandle);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tlogService.warn('Could not delete obsolete instance handle', error);\n\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\n\t\t\t\treturn this.claimInstance(logService, environmentMainService, lifecycleMainService, instantiationService, productService, false);\n\t\t\t}\n\n\t\t\t// Tests from CLI require to be the only instance currently\n\t\t\tif (environmentMainService.extensionTestsLocationURI && !environmentMainService.debugExtensionHost.break) {\n\t\t\t\tconst msg = `Running extension tests from the command line is currently only supported if no other instance of ${productService.nameShort} is running.`;\n\t\t\t\tlogService.error(msg);\n\t\t\t\tclient.dispose();\n\n\t\t\t\tthrow new Error(msg);\n\t\t\t}\n\n\t\t\t// Show a warning dialog after some timeout if it takes long to talk to the other instance\n\t\t\t// Skip this if we are running with --wait where it is expected that we wait for a while.\n\t\t\t// Also skip when gathering diagnostics (--status) which can take a longer time.\n\t\t\tlet startupWarningDialogHandle: NodeJS.Timeout | undefined = undefined;\n\t\t\tif (!environmentMainService.args.wait && !environmentMainService.args.status) {\n\t\t\t\tstartupWarningDialogHandle = setTimeout(() => {\n\t\t\t\t\tthis.showStartupWarningDialog(\n\t\t\t\t\t\tlocalize('secondInstanceNoResponse', \"Another instance of {0} is running but not responding\", productService.nameShort),\n\t\t\t\t\t\tlocalize('secondInstanceNoResponseDetail', \"Please close all other instances and try again.\"),\n\t\t\t\t\t\tproductService\n\t\t\t\t\t);\n\t\t\t\t}, 10000);\n\t\t\t}\n\n\t\t\tconst otherInstanceLaunchMainService = ProxyChannel.toService<ILaunchMainService>(client.getChannel('launch'), { disableMarshalling: true });\n\t\t\tconst otherInstanceDiagnosticsMainService = ProxyChannel.toService<IDiagnosticsMainService>(client.getChannel('diagnostics'), { disableMarshalling: true });\n\n\t\t\t// Process Info\n\t\t\tif (environmentMainService.args.status) {\n\t\t\t\treturn instantiationService.invokeFunction(async () => {\n\t\t\t\t\tconst diagnosticsService = new DiagnosticsService(NullTelemetryService, productService);\n\t\t\t\t\tconst mainDiagnostics = await otherInstanceDiagnosticsMainService.getMainDiagnostics();\n\t\t\t\t\tconst remoteDiagnostics = await otherInstanceDiagnosticsMainService.getRemoteDiagnostics({ includeProcesses: true, includeWorkspaceMetadata: true });\n\t\t\t\t\tconst diagnostics = await diagnosticsService.getDiagnostics(mainDiagnostics, remoteDiagnostics);\n\t\t\t\t\tconsole.log(diagnostics);\n\n\t\t\t\t\tthrow new ExpectedError();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Windows: allow to set foreground\n\t\t\tif (isWindows) {\n\t\t\t\tawait this.windowsAllowSetForegroundWindow(otherInstanceLaunchMainService, logService);\n\t\t\t}\n\n\t\t\t// Send environment over...\n\t\t\tlogService.trace('Sending env to running instance...');\n\t\t\tawait otherInstanceLaunchMainService.start(environmentMainService.args, process.env as IProcessEnvironment);\n\n\t\t\t// Cleanup\n\t\t\tclient.dispose();\n\n\t\t\t// Now that we started, make sure the warning dialog is prevented\n\t\t\tif (startupWarningDialogHandle) {\n\t\t\t\tclearTimeout(startupWarningDialogHandle);\n\t\t\t}\n\n\t\t\tthrow new ExpectedError('Sent env to running instance. Terminating...');\n\t\t}\n\n\t\t// Print --status usage info\n\t\tif (environmentMainService.args.status) {\n\t\t\tconsole.log(localize('statusWarning', \"Warning: The --status argument can only be used if {0} is already running. Please run it again after {0} has started.\", productService.nameShort));\n\n\t\t\tthrow new ExpectedError('Terminating...');\n\t\t}\n\n\t\t// Set the VSCODE_PID variable here when we are sure we are the first\n\t\t// instance to startup. Otherwise we would wrongly overwrite the PID\n\t\tprocess.env['VSCODE_PID'] = String(process.pid);\n\n\t\treturn mainProcessNodeIpcServer;\n\t}\n\n\tprivate handleStartupDataDirError(environmentMainService: IEnvironmentMainService, productService: IProductService, error: NodeJS.ErrnoException): void {\n\t\tif (error.code === 'EACCES' || error.code === 'EPERM') {\n\t\t\tconst directories = coalesce([environmentMainService.userDataPath, environmentMainService.extensionsPath, XDG_RUNTIME_DIR]).map(folder => getPathLabel(URI.file(folder), { os: OS, tildify: environmentMainService }));\n\n\t\t\tthis.showStartupWarningDialog(\n\t\t\t\tlocalize('startupDataDirError', \"Unable to write program user data.\"),\n\t\t\t\tlocalize('startupUserDataAndExtensionsDirErrorDetail', \"{0}\\n\\nPlease make sure the following directories are writeable:\\n\\n{1}\", toErrorMessage(error), directories.join('\\n')),\n\t\t\t\tproductService\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate showStartupWarningDialog(message: string, detail: string, productService: IProductService): void {\n\n\t\t// use sync variant here because we likely exit after this method\n\t\t// due to startup issues and otherwise the dialog seems to disappear\n\t\t// https://github.com/microsoft/vscode/issues/104493\n\n\t\tdialog.showMessageBoxSync(massageMessageBoxOptions({\n\t\t\ttype: 'warning',\n\t\t\tbuttons: [localize({ key: 'close', comment: ['&& denotes a mnemonic'] }, \"&&Close\")],\n\t\t\tmessage,\n\t\t\tdetail\n\t\t}, productService).options);\n\t}\n\n\tprivate async windowsAllowSetForegroundWindow(launchMainService: ILaunchMainService, logService: ILogService): Promise<void> {\n\t\tif (isWindows) {\n\t\t\tconst processId = await launchMainService.getMainProcessId();\n\n\t\t\tlogService.trace('Sending some foreground love to the running instance:', processId);\n\n\t\t\ttry {\n\t\t\t\t(await import('windows-foreground-love')).allowSetForegroundWindow(processId);\n\t\t\t} catch (error) {\n\t\t\t\tlogService.error(error);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate quit(accessor: ServicesAccessor, reason?: ExpectedError | Error): void {\n\t\tconst logService = accessor.get(ILogService);\n\t\tconst lifecycleMainService = accessor.get(ILifecycleMainService);\n\n\t\tlet exitCode = 0;\n\n\t\tif (reason) {\n\t\t\tif ((reason as ExpectedError).isExpected) {\n\t\t\t\tif (reason.message) {\n\t\t\t\t\tlogService.trace(reason.message);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\texitCode = 1; // signal error to the outside\n\n\t\t\t\tif (reason.stack) {\n\t\t\t\t\tlogService.error(reason.stack);\n\t\t\t\t} else {\n\t\t\t\t\tlogService.error(`Startup error: ${reason.toString()}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlifecycleMainService.kill(exitCode);\n\t}\n\n\t//#region Command line arguments utilities\n\n\tprivate resolveArgs(): NativeParsedArgs {\n\n\t\t// Parse arguments\n\t\tconst args = this.validatePaths(parseMainProcessArgv(process.argv));\n\n\t\t// If we are started with --wait create a random temporary file\n\t\t// and pass it over to the starting instance. We can use this file\n\t\t// to wait for it to be deleted to monitor that the edited file\n\t\t// is closed and then exit the waiting process.\n\t\t//\n\t\t// Note: we are not doing this if the wait marker has been already\n\t\t// added as argument. This can happen if VS Code was started from CLI.\n\n\t\tif (args.wait && !args.waitMarkerFilePath) {\n\t\t\tconst waitMarkerFilePath = createWaitMarkerFileSync(args.verbose);\n\t\t\tif (waitMarkerFilePath) {\n\t\t\t\taddArg(process.argv, '--waitMarkerFilePath', waitMarkerFilePath);\n\t\t\t\targs.waitMarkerFilePath = waitMarkerFilePath;\n\t\t\t}\n\t\t}\n\n\t\treturn args;\n\t}\n\n\tprivate validatePaths(args: NativeParsedArgs): NativeParsedArgs {\n\n\t\t// Track URLs if they're going to be used\n\t\tif (args['open-url']) {\n\t\t\targs._urls = args._;\n\t\t\targs._ = [];\n\t\t}\n\n\t\t// Normalize paths and watch out for goto line mode\n\t\tif (!args['remote']) {\n\t\t\tconst paths = this.doValidatePaths(args._, args.goto);\n\t\t\targs._ = paths;\n\t\t}\n\n\t\treturn args;\n\t}\n\n\tprivate doValidatePaths(args: string[], gotoLineMode?: boolean): string[] {\n\t\tconst currentWorkingDir = cwd();\n\t\tconst result = args.map(arg => {\n\t\t\tlet pathCandidate = String(arg);\n\n\t\t\tlet parsedPath: IPathWithLineAndColumn | undefined = undefined;\n\t\t\tif (gotoLineMode) {\n\t\t\t\tparsedPath = parseLineAndColumnAware(pathCandidate);\n\t\t\t\tpathCandidate = parsedPath.path;\n\t\t\t}\n\n\t\t\tif (pathCandidate) {\n\t\t\t\tpathCandidate = this.preparePath(currentWorkingDir, pathCandidate);\n\t\t\t}\n\n\t\t\tconst sanitizedFilePath = sanitizeFilePath(pathCandidate, currentWorkingDir);\n\n\t\t\tconst filePathBasename = basename(sanitizedFilePath);\n\t\t\tif (filePathBasename /* can be empty if code is opened on root */ && !isValidBasename(filePathBasename)) {\n\t\t\t\treturn null; // do not allow invalid file names\n\t\t\t}\n\n\t\t\tif (gotoLineMode && parsedPath) {\n\t\t\t\tparsedPath.path = sanitizedFilePath;\n\n\t\t\t\treturn this.toPath(parsedPath);\n\t\t\t}\n\n\t\t\treturn sanitizedFilePath;\n\t\t});\n\n\t\tconst caseInsensitive = isWindows || isMacintosh;\n\t\tconst distinctPaths = distinct(result, path => path && caseInsensitive ? path.toLowerCase() : (path || ''));\n\n\t\treturn coalesce(distinctPaths);\n\t}\n\n\tprivate preparePath(cwd: string, path: string): string {\n\n\t\t// Trim trailing quotes\n\t\tif (isWindows) {\n\t\t\tpath = rtrim(path, '\"'); // https://github.com/microsoft/vscode/issues/1498\n\t\t}\n\n\t\t// Trim whitespaces\n\t\tpath = trim(trim(path, ' '), '\\t');\n\n\t\tif (isWindows) {\n\n\t\t\t// Resolve the path against cwd if it is relative\n\t\t\tpath = resolve(cwd, path);\n\n\t\t\t// Trim trailing '.' chars on Windows to prevent invalid file names\n\t\t\tpath = rtrim(path, '.');\n\t\t}\n\n\t\treturn path;\n\t}\n\n\tprivate toPath(pathWithLineAndCol: IPathWithLineAndColumn): string {\n\t\tconst segments = [pathWithLineAndCol.path];\n\n\t\tif (typeof pathWithLineAndCol.line === 'number') {\n\t\t\tsegments.push(String(pathWithLineAndCol.line));\n\t\t}\n\n\t\tif (typeof pathWithLineAndCol.column === 'number') {\n\t\t\tsegments.push(String(pathWithLineAndCol.column));\n\t\t}\n\n\t\treturn segments.join(':');\n\t}\n\n\t//#endregion\n}\n\n// Main Startup\nconst code = new CodeMain();\ncode.main();\n"]}