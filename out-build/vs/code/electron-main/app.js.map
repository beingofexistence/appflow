{"version":3,"sources":["vs/code/electron-main/app.ts"],"names":[],"mappings":"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","file":"app.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { app, BrowserWindow, dialog, protocol, session, Session, systemPreferences, WebFrameMain } from 'electron';\nimport { addUNCHostToAllowlist, disableUNCAccessRestrictions } from 'vs/base/node/unc';\nimport { validatedIpcMain } from 'vs/base/parts/ipc/electron-main/ipcMain';\nimport { hostname, release } from 'os';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { isSigPipeError, onUnexpectedError, setUnexpectedErrorHandler } from 'vs/base/common/errors';\nimport { isEqualOrParent } from 'vs/base/common/extpath';\nimport { once } from 'vs/base/common/functional';\nimport { stripComments } from 'vs/base/common/json';\nimport { getPathLabel } from 'vs/base/common/labels';\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport { isAbsolute, join, posix } from 'vs/base/common/path';\nimport { IProcessEnvironment, isLinux, isLinuxSnap, isMacintosh, isWindows, OS } from 'vs/base/common/platform';\nimport { assertType } from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { registerContextMenuListener } from 'vs/base/parts/contextmenu/electron-main/contextmenu';\nimport { getDelayedChannel, ProxyChannel, StaticRouter } from 'vs/base/parts/ipc/common/ipc';\nimport { Server as ElectronIPCServer } from 'vs/base/parts/ipc/electron-main/ipc.electron';\nimport { Client as MessagePortClient } from 'vs/base/parts/ipc/electron-main/ipc.mp';\nimport { Server as NodeIPCServer } from 'vs/base/parts/ipc/node/ipc.net';\nimport { ProxyAuthHandler } from 'vs/code/electron-main/auth';\nimport { localize } from 'vs/nls';\nimport { IBackupMainService } from 'vs/platform/backup/electron-main/backup';\nimport { BackupMainService } from 'vs/platform/backup/electron-main/backupMainService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ElectronExtensionHostDebugBroadcastChannel } from 'vs/platform/debug/electron-main/extensionHostDebugIpc';\nimport { IDiagnosticsService } from 'vs/platform/diagnostics/common/diagnostics';\nimport { DiagnosticsMainService, IDiagnosticsMainService } from 'vs/platform/diagnostics/electron-main/diagnosticsMainService';\nimport { DialogMainService, IDialogMainService } from 'vs/platform/dialogs/electron-main/dialogMainService';\nimport { IEncryptionMainService } from 'vs/platform/encryption/common/encryptionService';\nimport { EncryptionMainService } from 'vs/platform/encryption/electron-main/encryptionMainService';\nimport { NativeParsedArgs } from 'vs/platform/environment/common/argv';\nimport { IEnvironmentMainService } from 'vs/platform/environment/electron-main/environmentMainService';\nimport { isLaunchedFromCli } from 'vs/platform/environment/node/argvHelper';\nimport { getResolvedShellEnv } from 'vs/platform/shell/node/shellEnv';\nimport { IExtensionUrlTrustService } from 'vs/platform/extensionManagement/common/extensionUrlTrust';\nimport { ExtensionUrlTrustService } from 'vs/platform/extensionManagement/node/extensionUrlTrustService';\nimport { IExtensionHostStarter, ipcExtensionHostStarterChannelName } from 'vs/platform/extensions/common/extensionHostStarter';\nimport { ExtensionHostStarter } from 'vs/platform/extensions/electron-main/extensionHostStarter';\nimport { IExternalTerminalMainService } from 'vs/platform/externalTerminal/electron-main/externalTerminal';\nimport { LinuxExternalTerminalService, MacExternalTerminalService, WindowsExternalTerminalService } from 'vs/platform/externalTerminal/node/externalTerminalService';\nimport { LOCAL_FILE_SYSTEM_CHANNEL_NAME } from 'vs/platform/files/common/diskFileSystemProviderClient';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { DiskFileSystemProviderChannel } from 'vs/platform/files/electron-main/diskFileSystemProviderServer';\nimport { DiskFileSystemProvider } from 'vs/platform/files/node/diskFileSystemProvider';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { IIssueMainService } from 'vs/platform/issue/common/issue';\nimport { IssueMainService } from 'vs/platform/issue/electron-main/issueMainService';\nimport { IKeyboardLayoutMainService, KeyboardLayoutMainService } from 'vs/platform/keyboardLayout/electron-main/keyboardLayoutMainService';\nimport { ILaunchMainService, LaunchMainService } from 'vs/platform/launch/electron-main/launchMainService';\nimport { ILifecycleMainService, LifecycleMainPhase, ShutdownReason } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\nimport { ILoggerService, ILogService } from 'vs/platform/log/common/log';\nimport { IMenubarMainService, MenubarMainService } from 'vs/platform/menubar/electron-main/menubarMainService';\nimport { INativeHostMainService, NativeHostMainService } from 'vs/platform/native/electron-main/nativeHostMainService';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { getRemoteAuthority } from 'vs/platform/remote/common/remoteHosts';\nimport { SharedProcess } from 'vs/platform/sharedProcess/electron-main/sharedProcess';\nimport { ISignService } from 'vs/platform/sign/common/sign';\nimport { IStateService } from 'vs/platform/state/node/state';\nimport { StorageDatabaseChannel } from 'vs/platform/storage/electron-main/storageIpc';\nimport { ApplicationStorageMainService, IApplicationStorageMainService, IStorageMainService, StorageMainService } from 'vs/platform/storage/electron-main/storageMainService';\nimport { resolveCommonProperties } from 'vs/platform/telemetry/common/commonProperties';\nimport { ITelemetryService, TelemetryLevel } from 'vs/platform/telemetry/common/telemetry';\nimport { TelemetryAppenderClient } from 'vs/platform/telemetry/common/telemetryIpc';\nimport { ITelemetryServiceConfig, TelemetryService } from 'vs/platform/telemetry/common/telemetryService';\nimport { getPiiPathsFromEnvironment, getTelemetryLevel, isInternalTelemetry, NullTelemetryService, supportsTelemetry } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { IUpdateService } from 'vs/platform/update/common/update';\nimport { UpdateChannel } from 'vs/platform/update/common/updateIpc';\nimport { DarwinUpdateService } from 'vs/platform/update/electron-main/updateService.darwin';\nimport { LinuxUpdateService } from 'vs/platform/update/electron-main/updateService.linux';\nimport { SnapUpdateService } from 'vs/platform/update/electron-main/updateService.snap';\nimport { Win32UpdateService } from 'vs/platform/update/electron-main/updateService.win32';\nimport { IOpenURLOptions, IURLService } from 'vs/platform/url/common/url';\nimport { URLHandlerChannelClient, URLHandlerRouter } from 'vs/platform/url/common/urlIpc';\nimport { NativeURLService } from 'vs/platform/url/common/urlService';\nimport { ElectronURLListener } from 'vs/platform/url/electron-main/electronUrlListener';\nimport { IWebviewManagerService } from 'vs/platform/webview/common/webviewManagerService';\nimport { WebviewMainService } from 'vs/platform/webview/electron-main/webviewMainService';\nimport { IWindowOpenable } from 'vs/platform/window/common/window';\nimport { IWindowsMainService, OpenContext } from 'vs/platform/windows/electron-main/windows';\nimport { ICodeWindow } from 'vs/platform/window/electron-main/window';\nimport { WindowsMainService } from 'vs/platform/windows/electron-main/windowsMainService';\nimport { ActiveWindowManager } from 'vs/platform/windows/node/windowTracker';\nimport { hasWorkspaceFileExtension } from 'vs/platform/workspace/common/workspace';\nimport { IWorkspacesService } from 'vs/platform/workspaces/common/workspaces';\nimport { IWorkspacesHistoryMainService, WorkspacesHistoryMainService } from 'vs/platform/workspaces/electron-main/workspacesHistoryMainService';\nimport { WorkspacesMainService } from 'vs/platform/workspaces/electron-main/workspacesMainService';\nimport { IWorkspacesManagementMainService, WorkspacesManagementMainService } from 'vs/platform/workspaces/electron-main/workspacesManagementMainService';\nimport { IPolicyService } from 'vs/platform/policy/common/policy';\nimport { PolicyChannel } from 'vs/platform/policy/common/policyIpc';\nimport { IUserDataProfilesMainService } from 'vs/platform/userDataProfile/electron-main/userDataProfile';\nimport { RequestChannel } from 'vs/platform/request/common/requestIpc';\nimport { IRequestService } from 'vs/platform/request/common/request';\nimport { IExtensionsProfileScannerService } from 'vs/platform/extensionManagement/common/extensionsProfileScannerService';\nimport { IExtensionsScannerService } from 'vs/platform/extensionManagement/common/extensionsScannerService';\nimport { ExtensionsScannerService } from 'vs/platform/extensionManagement/node/extensionsScannerService';\nimport { UserDataProfilesHandler } from 'vs/platform/userDataProfile/electron-main/userDataProfilesHandler';\nimport { ProfileStorageChangesListenerChannel } from 'vs/platform/userDataProfile/electron-main/userDataProfileStorageIpc';\nimport { Promises, RunOnceScheduler, runWhenIdle } from 'vs/base/common/async';\nimport { resolveMachineId } from 'vs/platform/telemetry/electron-main/telemetryUtils';\nimport { ExtensionsProfileScannerService } from 'vs/platform/extensionManagement/node/extensionsProfileScannerService';\nimport { LoggerChannel } from 'vs/platform/log/electron-main/logIpc';\nimport { ILoggerMainService } from 'vs/platform/log/electron-main/loggerService';\nimport { IInitialProtocolUrls, IProtocolUrl } from 'vs/platform/url/electron-main/url';\nimport { massageMessageBoxOptions } from 'vs/platform/dialogs/common/dialogs';\nimport { IUtilityProcessWorkerMainService, UtilityProcessWorkerMainService } from 'vs/platform/utilityProcess/electron-main/utilityProcessWorkerMainService';\nimport { ipcUtilityProcessWorkerChannelName } from 'vs/platform/utilityProcess/common/utilityProcessWorkerService';\nimport { firstOrDefault } from 'vs/base/common/arrays';\nimport { ILocalPtyService, LocalReconnectConstants, TerminalIpcChannels, TerminalSettingId } from 'vs/platform/terminal/common/terminal';\nimport { ElectronPtyHostStarter } from 'vs/platform/terminal/electron-main/electronPtyHostStarter';\nimport { PtyHostService } from 'vs/platform/terminal/node/ptyHostService';\nimport { NODE_REMOTE_RESOURCE_CHANNEL_NAME, NODE_REMOTE_RESOURCE_IPC_METHOD_NAME, NodeRemoteResourceResponse, NodeRemoteResourceRouter } from 'vs/platform/remote/common/electronRemoteResources';\nimport { Lazy } from 'vs/base/common/lazy';\n\n/**\n * The main VS Code application. There will only ever be one instance,\n * even if the user starts many instances (e.g. from the command line).\n */\nexport class CodeApplication extends Disposable {\n\n\tprivate windowsMainService: IWindowsMainService | undefined;\n\tprivate nativeHostMainService: INativeHostMainService | undefined;\n\n\tconstructor(\n\t\tprivate readonly mainProcessNodeIpcServer: NodeIPCServer,\n\t\tprivate readonly userEnv: IProcessEnvironment,\n\t\t@IInstantiationService private readonly mainInstantiationService: IInstantiationService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ILoggerService private readonly loggerService: ILoggerService,\n\t\t@IEnvironmentMainService private readonly environmentMainService: IEnvironmentMainService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IStateService private readonly stateService: IStateService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IUserDataProfilesMainService private readonly userDataProfilesMainService: IUserDataProfilesMainService,\n\t) {\n\t\tsuper();\n\n\t\tthis.configureSession();\n\t\tthis.registerListeners();\n\t}\n\n\tprivate configureSession(): void {\n\n\t\t//#region Security related measures (https://electronjs.org/docs/tutorial/security)\n\t\t//\n\t\t// !!! DO NOT CHANGE without consulting the documentation !!!\n\t\t//\n\n\t\tconst isUrlFromWebview = (requestingUrl: string | undefined) => requestingUrl?.startsWith(`${Schemas.vscodeWebview}://`);\n\n\t\tconst allowedPermissionsInMainFrame = new Set(\n\t\t\tthis.productService.quality === 'stable' ? [] : ['media']\n\t\t);\n\n\t\tconst allowedPermissionsInWebview = new Set([\n\t\t\t'clipboard-read',\n\t\t\t'clipboard-sanitized-write',\n\t\t]);\n\n\t\tsession.defaultSession.setPermissionRequestHandler((_webContents, permission, callback, details) => {\n\t\t\tif (isUrlFromWebview(details.requestingUrl)) {\n\t\t\t\treturn callback(allowedPermissionsInWebview.has(permission));\n\t\t\t}\n\n\t\t\tif (details.isMainFrame && details.securityOrigin === 'vscode-file://vscode-app/') {\n\t\t\t\treturn callback(allowedPermissionsInMainFrame.has(permission));\n\t\t\t}\n\n\t\t\treturn callback(false);\n\t\t});\n\n\t\tsession.defaultSession.setPermissionCheckHandler((_webContents, permission, _origin, details) => {\n\t\t\tif (isUrlFromWebview(details.requestingUrl)) {\n\t\t\t\treturn allowedPermissionsInWebview.has(permission);\n\t\t\t}\n\n\t\t\tif (details.isMainFrame && details.securityOrigin === 'vscode-file://vscode-app/') {\n\t\t\t\treturn allowedPermissionsInMainFrame.has(permission);\n\t\t\t}\n\n\t\t\treturn false;\n\t\t});\n\n\t\t//#endregion\n\n\t\t//#region Request filtering\n\n\t\t// Block all SVG requests from unsupported origins\n\t\tconst supportedSvgSchemes = new Set([Schemas.file, Schemas.vscodeFileResource, Schemas.vscodeRemoteResource, Schemas.vscodeManagedRemoteResource, 'devtools']);\n\n\t\t// But allow them if the are made from inside an webview\n\t\tconst isSafeFrame = (requestFrame: WebFrameMain | undefined): boolean => {\n\t\t\tfor (let frame: WebFrameMain | null | undefined = requestFrame; frame; frame = frame.parent) {\n\t\t\t\tif (frame.url.startsWith(`${Schemas.vscodeWebview}://`)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\n\t\tconst isSvgRequestFromSafeContext = (details: Electron.OnBeforeRequestListenerDetails | Electron.OnHeadersReceivedListenerDetails): boolean => {\n\t\t\treturn details.resourceType === 'xhr' || isSafeFrame(details.frame);\n\t\t};\n\n\t\tconst isAllowedVsCodeFileRequest = (details: Electron.OnBeforeRequestListenerDetails) => {\n\t\t\tconst frame = details.frame;\n\t\t\tif (!frame || !this.windowsMainService) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Check to see if the request comes from one of the main windows (or shared process) and not from embedded content\n\t\t\tconst windows = BrowserWindow.getAllWindows();\n\t\t\tfor (const window of windows) {\n\t\t\t\tif (frame.processId === window.webContents.mainFrame.processId) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\tconst isAllowedWebviewRequest = (uri: URI, details: Electron.OnBeforeRequestListenerDetails): boolean => {\n\t\t\tif (uri.path !== '/index.html') {\n\t\t\t\treturn true; // Only restrict top level page of webviews: index.html\n\t\t\t}\n\n\t\t\tconst frame = details.frame;\n\t\t\tif (!frame || !this.windowsMainService) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// Check to see if the request comes from one of the main editor windows.\n\t\t\tfor (const window of this.windowsMainService.getWindows()) {\n\t\t\t\tif (window.win) {\n\t\t\t\t\tif (frame.processId === window.win.webContents.mainFrame.processId) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\tsession.defaultSession.webRequest.onBeforeRequest((details, callback) => {\n\t\t\tconst uri = URI.parse(details.url);\n\t\t\tif (uri.scheme === Schemas.vscodeWebview) {\n\t\t\t\tif (!isAllowedWebviewRequest(uri, details)) {\n\t\t\t\t\tthis.logService.error('Blocked vscode-webview request', details.url);\n\t\t\t\t\treturn callback({ cancel: true });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (uri.scheme === Schemas.vscodeFileResource) {\n\t\t\t\tif (!isAllowedVsCodeFileRequest(details)) {\n\t\t\t\t\tthis.logService.error('Blocked vscode-file request', details.url);\n\t\t\t\t\treturn callback({ cancel: true });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Block most svgs\n\t\t\tif (uri.path.endsWith('.svg')) {\n\t\t\t\tconst isSafeResourceUrl = supportedSvgSchemes.has(uri.scheme);\n\t\t\t\tif (!isSafeResourceUrl) {\n\t\t\t\t\treturn callback({ cancel: !isSvgRequestFromSafeContext(details) });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn callback({ cancel: false });\n\t\t});\n\n\t\t// Configure SVG header content type properly\n\t\t// https://github.com/microsoft/vscode/issues/97564\n\t\tsession.defaultSession.webRequest.onHeadersReceived((details, callback) => {\n\t\t\tconst responseHeaders = details.responseHeaders as Record<string, (string) | (string[])>;\n\t\t\tconst contentTypes = (responseHeaders['content-type'] || responseHeaders['Content-Type']);\n\n\t\t\tif (contentTypes && Array.isArray(contentTypes)) {\n\t\t\t\tconst uri = URI.parse(details.url);\n\t\t\t\tif (uri.path.endsWith('.svg')) {\n\t\t\t\t\tif (supportedSvgSchemes.has(uri.scheme)) {\n\t\t\t\t\t\tresponseHeaders['Content-Type'] = ['image/svg+xml'];\n\n\t\t\t\t\t\treturn callback({ cancel: false, responseHeaders });\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// remote extension schemes have the following format\n\t\t\t\t// http://127.0.0.1:<port>/vscode-remote-resource?path=\n\t\t\t\tif (!uri.path.endsWith(Schemas.vscodeRemoteResource) && contentTypes.some(contentType => contentType.toLowerCase().includes('image/svg'))) {\n\t\t\t\t\treturn callback({ cancel: !isSvgRequestFromSafeContext(details) });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn callback({ cancel: false });\n\t\t});\n\n\t\t//#endregion\n\n\t\t//#region Code Cache\n\n\t\ttype SessionWithCodeCachePathSupport = Session & {\n\t\t\t/**\n\t\t\t * Sets code cache directory. By default, the directory will be `Code Cache` under\n\t\t\t * the respective user data folder.\n\t\t\t */\n\t\t\tsetCodeCachePath?(path: string): void;\n\t\t};\n\n\t\tconst defaultSession = session.defaultSession as unknown as SessionWithCodeCachePathSupport;\n\t\tif (typeof defaultSession.setCodeCachePath === 'function' && this.environmentMainService.codeCachePath) {\n\t\t\t// Make sure to partition Chrome's code cache folder\n\t\t\t// in the same way as our code cache path to help\n\t\t\t// invalidate caches that we know are invalid\n\t\t\t// (https://github.com/microsoft/vscode/issues/120655)\n\t\t\tdefaultSession.setCodeCachePath(join(this.environmentMainService.codeCachePath, 'chrome'));\n\t\t}\n\n\t\t//#endregion\n\n\t\t//#region UNC Host Allowlist (Windows)\n\n\t\tif (isWindows) {\n\t\t\tif (this.configurationService.getValue('security.restrictUNCAccess') === false) {\n\t\t\t\tdisableUNCAccessRestrictions();\n\t\t\t} else {\n\t\t\t\taddUNCHostToAllowlist(this.configurationService.getValue('security.allowedUNCHosts'));\n\t\t\t}\n\t\t}\n\n\t\t//#endregion\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// We handle uncaught exceptions here to prevent electron from opening a dialog to the user\n\t\tsetUnexpectedErrorHandler(error => this.onUnexpectedError(error));\n\t\tprocess.on('uncaughtException', error => {\n\t\t\tif (!isSigPipeError(error)) {\n\t\t\t\tonUnexpectedError(error);\n\t\t\t}\n\t\t});\n\t\tprocess.on('unhandledRejection', (reason: unknown) => onUnexpectedError(reason));\n\n\t\t// Dispose on shutdown\n\t\tthis.lifecycleMainService.onWillShutdown(() => this.dispose());\n\n\t\t// Contextmenu via IPC support\n\t\tregisterContextMenuListener();\n\n\t\t// Accessibility change event\n\t\tapp.on('accessibility-support-changed', (event, accessibilitySupportEnabled) => {\n\t\t\tthis.windowsMainService?.sendToAll('vscode:accessibilitySupportChanged', accessibilitySupportEnabled);\n\t\t});\n\n\t\t// macOS dock activate\n\t\tapp.on('activate', async (event, hasVisibleWindows) => {\n\t\t\tthis.logService.trace('app#activate');\n\n\t\t\t// Mac only event: open new window when we get activated\n\t\t\tif (!hasVisibleWindows) {\n\t\t\t\tawait this.windowsMainService?.openEmptyWindow({ context: OpenContext.DOCK });\n\t\t\t}\n\t\t});\n\n\t\t//#region Security related measures (https://electronjs.org/docs/tutorial/security)\n\t\t//\n\t\t// !!! DO NOT CHANGE without consulting the documentation !!!\n\t\t//\n\t\tapp.on('web-contents-created', (event, contents) => {\n\n\t\t\tcontents.on('will-navigate', event => {\n\t\t\t\tthis.logService.error('webContents#will-navigate: Prevented webcontent navigation');\n\n\t\t\t\tevent.preventDefault();\n\t\t\t});\n\n\t\t\tcontents.setWindowOpenHandler(({ url }) => {\n\t\t\t\tthis.nativeHostMainService?.openExternal(undefined, url);\n\n\t\t\t\treturn { action: 'deny' };\n\t\t\t});\n\t\t});\n\n\t\t//#endregion\n\n\t\tlet macOpenFileURIs: IWindowOpenable[] = [];\n\t\tlet runningTimeout: NodeJS.Timeout | undefined = undefined;\n\t\tapp.on('open-file', (event, path) => {\n\t\t\tthis.logService.trace('app#open-file: ', path);\n\t\t\tevent.preventDefault();\n\n\t\t\t// Keep in array because more might come!\n\t\t\tmacOpenFileURIs.push(hasWorkspaceFileExtension(path) ? { workspaceUri: URI.file(path) } : { fileUri: URI.file(path) });\n\n\t\t\t// Clear previous handler if any\n\t\t\tif (runningTimeout !== undefined) {\n\t\t\t\tclearTimeout(runningTimeout);\n\t\t\t\trunningTimeout = undefined;\n\t\t\t}\n\n\t\t\t// Handle paths delayed in case more are coming!\n\t\t\trunningTimeout = setTimeout(async () => {\n\t\t\t\tawait this.windowsMainService?.open({\n\t\t\t\t\tcontext: OpenContext.DOCK /* can also be opening from finder while app is running */,\n\t\t\t\t\tcli: this.environmentMainService.args,\n\t\t\t\t\turisToOpen: macOpenFileURIs,\n\t\t\t\t\tgotoLineMode: false,\n\t\t\t\t\tpreferNewWindow: true /* dropping on the dock or opening from finder prefers to open in a new window */\n\t\t\t\t});\n\n\t\t\t\tmacOpenFileURIs = [];\n\t\t\t\trunningTimeout = undefined;\n\t\t\t}, 100);\n\t\t});\n\n\t\tapp.on('new-window-for-tab', async () => {\n\t\t\tawait this.windowsMainService?.openEmptyWindow({ context: OpenContext.DESKTOP }); //macOS native tab \"+\" button\n\t\t});\n\n\t\t//#region Bootstrap IPC Handlers\n\n\t\tvalidatedIpcMain.handle('vscode:fetchShellEnv', event => {\n\n\t\t\t// Prefer to use the args and env from the target window\n\t\t\t// when resolving the shell env. It is possible that\n\t\t\t// a first window was opened from the UI but a second\n\t\t\t// from the CLI and that has implications for whether to\n\t\t\t// resolve the shell environment or not.\n\t\t\t//\n\t\t\t// Window can be undefined for e.g. the shared process\n\t\t\t// that is not part of our windows registry!\n\t\t\tconst window = this.windowsMainService?.getWindowByWebContents(event.sender); // Note: this can be `undefined` for the shared process\n\t\t\tlet args: NativeParsedArgs;\n\t\t\tlet env: IProcessEnvironment;\n\t\t\tif (window?.config) {\n\t\t\t\targs = window.config;\n\t\t\t\tenv = { ...process.env, ...window.config.userEnv };\n\t\t\t} else {\n\t\t\t\targs = this.environmentMainService.args;\n\t\t\t\tenv = process.env;\n\t\t\t}\n\n\t\t\t// Resolve shell env\n\t\t\treturn this.resolveShellEnvironment(args, env, false);\n\t\t});\n\n\t\tvalidatedIpcMain.handle('vscode:writeNlsFile', (event, path: unknown, data: unknown) => {\n\t\t\tconst uri = this.validateNlsPath([path]);\n\t\t\tif (!uri || typeof data !== 'string') {\n\t\t\t\tthrow new Error('Invalid operation (vscode:writeNlsFile)');\n\t\t\t}\n\n\t\t\treturn this.fileService.writeFile(uri, VSBuffer.fromString(data));\n\t\t});\n\n\t\tvalidatedIpcMain.handle('vscode:readNlsFile', async (event, ...paths: unknown[]) => {\n\t\t\tconst uri = this.validateNlsPath(paths);\n\t\t\tif (!uri) {\n\t\t\t\tthrow new Error('Invalid operation (vscode:readNlsFile)');\n\t\t\t}\n\n\t\t\treturn (await this.fileService.readFile(uri)).value.toString();\n\t\t});\n\n\t\tvalidatedIpcMain.on('vscode:toggleDevTools', event => event.sender.toggleDevTools());\n\t\tvalidatedIpcMain.on('vscode:openDevTools', event => event.sender.openDevTools());\n\n\t\tvalidatedIpcMain.on('vscode:reloadWindow', event => event.sender.reload());\n\n\t\t//#endregion\n\t}\n\n\tprivate validateNlsPath(pathSegments: unknown[]): URI | undefined {\n\t\tlet path: string | undefined = undefined;\n\n\t\tfor (const pathSegment of pathSegments) {\n\t\t\tif (typeof pathSegment === 'string') {\n\t\t\t\tif (typeof path !== 'string') {\n\t\t\t\t\tpath = pathSegment;\n\t\t\t\t} else {\n\t\t\t\t\tpath = join(path, pathSegment);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (typeof path !== 'string' || !isAbsolute(path) || !isEqualOrParent(path, this.environmentMainService.cachedLanguagesPath, !isLinux)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn URI.file(path);\n\t}\n\n\tprivate onUnexpectedError(error: Error): void {\n\t\tif (error) {\n\n\t\t\t// take only the message and stack property\n\t\t\tconst friendlyError = {\n\t\t\t\tmessage: `[uncaught exception in main]: ${error.message}`,\n\t\t\t\tstack: error.stack\n\t\t\t};\n\n\t\t\t// handle on client side\n\t\t\tthis.windowsMainService?.sendToFocused('vscode:reportError', JSON.stringify(friendlyError));\n\t\t}\n\n\t\tthis.logService.error(`[uncaught exception in main]: ${error}`);\n\t\tif (error.stack) {\n\t\t\tthis.logService.error(error.stack);\n\t\t}\n\t}\n\n\tasync startup(): Promise<void> {\n\t\tthis.logService.debug('Starting VS Code');\n\t\tthis.logService.debug(`from: ${this.environmentMainService.appRoot}`);\n\t\tthis.logService.debug('args:', this.environmentMainService.args);\n\n\t\t// Make sure we associate the program with the app user model id\n\t\t// This will help Windows to associate the running program with\n\t\t// any shortcut that is pinned to the taskbar and prevent showing\n\t\t// two icons in the taskbar for the same app.\n\t\tconst win32AppUserModelId = this.productService.win32AppUserModelId;\n\t\tif (isWindows && win32AppUserModelId) {\n\t\t\tapp.setAppUserModelId(win32AppUserModelId);\n\t\t}\n\n\t\t// Fix native tabs on macOS 10.13\n\t\t// macOS enables a compatibility patch for any bundle ID beginning with\n\t\t// \"com.microsoft.\", which breaks native tabs for VS Code when using this\n\t\t// identifier (from the official build).\n\t\t// Explicitly opt out of the patch here before creating any windows.\n\t\t// See: https://github.com/microsoft/vscode/issues/35361#issuecomment-399794085\n\t\ttry {\n\t\t\tif (isMacintosh && this.configurationService.getValue('window.nativeTabs') === true && !systemPreferences.getUserDefault('NSUseImprovedLayoutPass', 'boolean')) {\n\t\t\t\tsystemPreferences.setUserDefault('NSUseImprovedLayoutPass', 'boolean', true as any);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\n\t\t// Main process server (electron IPC based)\n\t\tconst mainProcessElectronServer = new ElectronIPCServer();\n\t\tthis.lifecycleMainService.onWillShutdown(e => {\n\t\t\tif (e.reason === ShutdownReason.KILL) {\n\t\t\t\t// When we go down abnormally, make sure to free up\n\t\t\t\t// any IPC we accept from other windows to reduce\n\t\t\t\t// the chance of doing work after we go down. Kill\n\t\t\t\t// is special in that it does not orderly shutdown\n\t\t\t\t// windows.\n\t\t\t\tmainProcessElectronServer.dispose();\n\t\t\t}\n\t\t});\n\n\t\t// Resolve unique machine ID\n\t\tthis.logService.trace('Resolving machine identifier...');\n\t\tconst machineId = await resolveMachineId(this.stateService, this.logService);\n\t\tthis.logService.trace(`Resolved machine identifier: ${machineId}`);\n\n\t\t// Shared process\n\t\tconst { sharedProcessReady, sharedProcessClient } = this.setupSharedProcess(machineId);\n\n\t\t// Services\n\t\tconst appInstantiationService = await this.initServices(machineId, sharedProcessReady);\n\n\t\t// Auth Handler\n\t\tthis._register(appInstantiationService.createInstance(ProxyAuthHandler));\n\n\t\t// Transient profiles handler\n\t\tthis._register(appInstantiationService.createInstance(UserDataProfilesHandler));\n\n\t\t// Init Channels\n\t\tappInstantiationService.invokeFunction(accessor => this.initChannels(accessor, mainProcessElectronServer, sharedProcessClient));\n\n\t\t// Setup Protocol URL Handlers\n\t\tconst initialProtocolUrls = appInstantiationService.invokeFunction(accessor => this.setupProtocolUrlHandlers(accessor, mainProcessElectronServer));\n\n\t\t// Setup vscode-remote-resource protocol handler.\n\t\tthis.setupManagedRemoteResourceUrlHandler(mainProcessElectronServer);\n\n\t\t// Signal phase: ready - before opening first window\n\t\tthis.lifecycleMainService.phase = LifecycleMainPhase.Ready;\n\n\t\t// Open Windows\n\t\tawait appInstantiationService.invokeFunction(accessor => this.openFirstWindow(accessor, initialProtocolUrls));\n\n\t\t// Signal phase: after window open\n\t\tthis.lifecycleMainService.phase = LifecycleMainPhase.AfterWindowOpen;\n\n\t\t// Post Open Windows Tasks\n\t\tthis.afterWindowOpen();\n\n\t\t// Set lifecycle phase to `Eventually` after a short delay and when idle (min 2.5sec, max 5sec)\n\t\tconst eventuallyPhaseScheduler = this._register(new RunOnceScheduler(() => {\n\t\t\tthis._register(runWhenIdle(() => this.lifecycleMainService.phase = LifecycleMainPhase.Eventually, 2500));\n\t\t}, 2500));\n\t\teventuallyPhaseScheduler.schedule();\n\t}\n\n\tprivate setupProtocolUrlHandlers(accessor: ServicesAccessor, mainProcessElectronServer: ElectronIPCServer): IInitialProtocolUrls | undefined {\n\t\tconst windowsMainService = this.windowsMainService = accessor.get(IWindowsMainService);\n\t\tconst urlService = accessor.get(IURLService);\n\t\tconst nativeHostMainService = this.nativeHostMainService = accessor.get(INativeHostMainService);\n\n\t\t// Install URL handlers that deal with protocl URLs either\n\t\t// from this process by opening windows and/or by forwarding\n\t\t// the URLs into a window process to be handled there.\n\n\t\tconst app = this;\n\t\turlService.registerHandler({\n\t\t\tasync handleURL(uri: URI, options?: IOpenURLOptions): Promise<boolean> {\n\t\t\t\treturn app.handleProtocolUrl(windowsMainService, urlService, uri, options);\n\t\t\t}\n\t\t});\n\n\t\tconst activeWindowManager = this._register(new ActiveWindowManager({\n\t\t\tonDidOpenWindow: nativeHostMainService.onDidOpenWindow,\n\t\t\tonDidFocusWindow: nativeHostMainService.onDidFocusWindow,\n\t\t\tgetActiveWindowId: () => nativeHostMainService.getActiveWindowId(-1)\n\t\t}));\n\t\tconst activeWindowRouter = new StaticRouter(ctx => activeWindowManager.getActiveClientId().then(id => ctx === id));\n\t\tconst urlHandlerRouter = new URLHandlerRouter(activeWindowRouter, this.logService);\n\t\tconst urlHandlerChannel = mainProcessElectronServer.getChannel('urlHandler', urlHandlerRouter);\n\t\turlService.registerHandler(new URLHandlerChannelClient(urlHandlerChannel));\n\n\t\tconst initialProtocolUrls = this.resolveInitialProtocolUrls();\n\t\tthis._register(new ElectronURLListener(initialProtocolUrls?.urls, urlService, windowsMainService, this.environmentMainService, this.productService, this.logService));\n\n\t\treturn initialProtocolUrls;\n\t}\n\n\tprivate setupManagedRemoteResourceUrlHandler(mainProcessElectronServer: ElectronIPCServer) {\n\t\tconst notFound = (): Electron.ProtocolResponse => ({ statusCode: 404, data: 'Not found' });\n\t\tconst remoteResourceChannel = new Lazy(() => mainProcessElectronServer.getChannel(\n\t\t\tNODE_REMOTE_RESOURCE_CHANNEL_NAME,\n\t\t\tnew NodeRemoteResourceRouter(),\n\t\t));\n\n\t\tprotocol.registerBufferProtocol(Schemas.vscodeManagedRemoteResource, (request, callback) => {\n\t\t\tconst url = URI.parse(request.url);\n\t\t\tif (!url.authority.startsWith('window:')) {\n\t\t\t\treturn callback(notFound());\n\t\t\t}\n\n\t\t\tremoteResourceChannel.value.call<NodeRemoteResourceResponse>(NODE_REMOTE_RESOURCE_IPC_METHOD_NAME, [url]).then(\n\t\t\t\tr => callback({ ...r, data: Buffer.from(r.body, 'base64') }),\n\t\t\t\terr => {\n\t\t\t\t\tthis.logService.warn('error dispatching remote resource call', err);\n\t\t\t\t\tcallback({ statusCode: 500, data: String(err) });\n\t\t\t\t});\n\t\t});\n\t}\n\n\tprivate resolveInitialProtocolUrls(): IInitialProtocolUrls | undefined {\n\n\t\t/**\n\t\t * Protocol URL handling on startup is complex, refer to\n\t\t * {@link IInitialProtocolUrls} for an explainer.\n\t\t */\n\n\t\t// Windows/Linux: protocol handler invokes CLI with --open-url\n\t\tconst protocolUrlsFromCommandLine = this.environmentMainService.args['open-url'] ? this.environmentMainService.args._urls || [] : [];\n\t\tif (protocolUrlsFromCommandLine.length > 0) {\n\t\t\tthis.logService.trace('app#resolveInitialProtocolUrls() protocol urls from command line:', protocolUrlsFromCommandLine);\n\t\t}\n\n\t\t// macOS: open-url events that were received before the app is ready\n\t\tconst protocolUrlsFromEvent = ((<any>global).getOpenUrls() || []) as string[];\n\t\tif (protocolUrlsFromEvent.length > 0) {\n\t\t\tthis.logService.trace(`app#resolveInitialProtocolUrls() protocol urls from macOS 'open-url' event:`, protocolUrlsFromEvent);\n\t\t}\n\n\t\tif (protocolUrlsFromCommandLine.length + protocolUrlsFromEvent.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst openables: IWindowOpenable[] = [];\n\t\tconst urls = [\n\t\t\t...protocolUrlsFromCommandLine,\n\t\t\t...protocolUrlsFromEvent\n\t\t].map(url => {\n\t\t\ttry {\n\t\t\t\treturn { uri: URI.parse(url), originalUrl: url };\n\t\t\t} catch {\n\t\t\t\tthis.logService.trace('app#resolveInitialProtocolUrls() protocol url failed to parse:', url);\n\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}).filter((obj): obj is IProtocolUrl => {\n\t\t\tif (!obj) {\n\t\t\t\treturn false; // invalid\n\t\t\t}\n\n\t\t\tif (this.shouldBlockURI(obj.uri)) {\n\t\t\t\tthis.logService.trace('app#resolveInitialProtocolUrls() protocol url was blocked:', obj.uri.toString(true));\n\n\t\t\t\treturn false; // blocked\n\t\t\t}\n\n\t\t\tconst windowOpenable = this.getWindowOpenableFromProtocolUrl(obj.uri);\n\t\t\tif (windowOpenable) {\n\t\t\t\tthis.logService.trace('app#resolveInitialProtocolUrls() protocol url will be handled as window to open:', obj.uri.toString(true), windowOpenable);\n\n\t\t\t\topenables.push(windowOpenable);\n\n\t\t\t\treturn false; // handled as window to open\n\t\t\t}\n\n\t\t\tthis.logService.trace('app#resolveInitialProtocolUrls() protocol url will be passed to active window for handling:', obj.uri.toString(true));\n\n\t\t\treturn true; // handled within active window\n\t\t});\n\n\t\treturn { urls, openables };\n\t}\n\n\tprivate shouldBlockURI(uri: URI): boolean {\n\t\tif (uri.authority === Schemas.file && isWindows) {\n\t\t\tconst { options, buttonIndeces } = massageMessageBoxOptions({\n\t\t\t\ttype: 'warning',\n\t\t\t\tbuttons: [\n\t\t\t\t\tlocalize({ key: 'open', comment: ['&& denotes a mnemonic'] }, \"&&Yes\"),\n\t\t\t\t\tlocalize({ key: 'cancel', comment: ['&& denotes a mnemonic'] }, \"&&No\")\n\t\t\t\t],\n\t\t\t\tmessage: localize('confirmOpenMessage', \"An external application wants to open '{0}' in {1}. Do you want to open this file or folder?\", getPathLabel(uri, { os: OS, tildify: this.environmentMainService }), this.productService.nameShort),\n\t\t\t\tdetail: localize('confirmOpenDetail', \"If you did not initiate this request, it may represent an attempted attack on your system. Unless you took an explicit action to initiate this request, you should press 'No'\"),\n\t\t\t}, this.productService);\n\n\t\t\tconst res = buttonIndeces[dialog.showMessageBoxSync(options)];\n\t\t\tif (res === 1) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate getWindowOpenableFromProtocolUrl(uri: URI): IWindowOpenable | undefined {\n\t\tif (!uri.path) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// File path\n\t\tif (uri.authority === Schemas.file) {\n\t\t\tconst fileUri = URI.file(uri.fsPath);\n\n\t\t\tif (hasWorkspaceFileExtension(fileUri)) {\n\t\t\t\treturn { workspaceUri: fileUri };\n\t\t\t}\n\n\t\t\treturn { fileUri };\n\t\t}\n\n\t\t// Remote path\n\t\telse if (uri.authority === Schemas.vscodeRemote) {\n\n\t\t\t// Example conversion:\n\t\t\t// From: vscode://vscode-remote/wsl+ubuntu/mnt/c/GitDevelopment/monaco\n\t\t\t//   To: vscode-remote://wsl+ubuntu/mnt/c/GitDevelopment/monaco\n\n\t\t\tconst secondSlash = uri.path.indexOf(posix.sep, 1 /* skip over the leading slash */);\n\t\t\tif (secondSlash !== -1) {\n\t\t\t\tconst authority = uri.path.substring(1, secondSlash);\n\t\t\t\tconst path = uri.path.substring(secondSlash);\n\n\t\t\t\tlet query = uri.query;\n\t\t\t\tconst params = new URLSearchParams(uri.query);\n\t\t\t\tif (params.get('windowId') === '_blank') {\n\t\t\t\t\t// Make sure to unset any `windowId=_blank` here\n\t\t\t\t\t// https://github.com/microsoft/vscode/issues/191902\n\t\t\t\t\tparams.delete('windowId');\n\t\t\t\t\tquery = params.toString();\n\t\t\t\t}\n\n\t\t\t\tconst remoteUri = URI.from({ scheme: Schemas.vscodeRemote, authority, path, query, fragment: uri.fragment });\n\n\t\t\t\tif (hasWorkspaceFileExtension(path)) {\n\t\t\t\t\treturn { workspaceUri: remoteUri };\n\t\t\t\t}\n\n\t\t\t\tif (/:[\\d]+$/.test(path)) {\n\t\t\t\t\t// path with :line:column syntax\n\t\t\t\t\treturn { fileUri: remoteUri };\n\t\t\t\t}\n\n\t\t\t\treturn { folderUri: remoteUri };\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate async handleProtocolUrl(windowsMainService: IWindowsMainService, urlService: IURLService, uri: URI, options?: IOpenURLOptions): Promise<boolean> {\n\t\tthis.logService.trace('app#handleProtocolUrl():', uri.toString(true), options);\n\n\t\t// Support 'workspace' URLs (https://github.com/microsoft/vscode/issues/124263)\n\t\tif (uri.scheme === this.productService.urlProtocol && uri.path === 'workspace') {\n\t\t\turi = uri.with({\n\t\t\t\tauthority: 'file',\n\t\t\t\tpath: URI.parse(uri.query).path,\n\t\t\t\tquery: ''\n\t\t\t});\n\t\t}\n\n\t\t// If URI should be blocked, behave as if it's handled\n\t\tif (this.shouldBlockURI(uri)) {\n\t\t\tthis.logService.trace('app#handleProtocolUrl() protocol url was blocked:', uri.toString(true));\n\n\t\t\treturn true;\n\t\t}\n\n\t\tlet shouldOpenInNewWindow = false;\n\n\t\t// We should handle the URI in a new window if the URL contains `windowId=_blank`\n\t\tconst params = new URLSearchParams(uri.query);\n\t\tif (params.get('windowId') === '_blank') {\n\t\t\tthis.logService.trace(`app#handleProtocolUrl() found 'windowId=_blank' as parameter, setting shouldOpenInNewWindow=true:`, uri.toString(true));\n\n\t\t\tparams.delete('windowId');\n\t\t\turi = uri.with({ query: params.toString() });\n\n\t\t\tshouldOpenInNewWindow = true;\n\t\t}\n\n\t\t// or if no window is open (macOS only)\n\t\telse if (isMacintosh && windowsMainService.getWindowCount() === 0) {\n\t\t\tthis.logService.trace(`app#handleProtocolUrl() running on macOS with no window open, setting shouldOpenInNewWindow=true:`, uri.toString(true));\n\n\t\t\tshouldOpenInNewWindow = true;\n\t\t}\n\n\t\t// Pass along whether the application is being opened via a Continue On flow\n\t\tconst continueOn = params.get('continueOn');\n\t\tif (continueOn !== null) {\n\t\t\tthis.logService.trace(`app#handleProtocolUrl() found 'continueOn' as parameter:`, uri.toString(true));\n\n\t\t\tparams.delete('continueOn');\n\t\t\turi = uri.with({ query: params.toString() });\n\n\t\t\tthis.environmentMainService.continueOn = continueOn ?? undefined;\n\t\t}\n\n\t\t// Check if the protocol URL is a window openable to open...\n\t\tconst windowOpenableFromProtocolUrl = this.getWindowOpenableFromProtocolUrl(uri);\n\t\tif (windowOpenableFromProtocolUrl) {\n\t\t\tthis.logService.trace('app#handleProtocolUrl() opening protocol url as window:', windowOpenableFromProtocolUrl, uri.toString(true));\n\n\t\t\tconst window = firstOrDefault(await windowsMainService.open({\n\t\t\t\tcontext: OpenContext.API,\n\t\t\t\tcli: { ...this.environmentMainService.args },\n\t\t\t\turisToOpen: [windowOpenableFromProtocolUrl],\n\t\t\t\tforceNewWindow: shouldOpenInNewWindow,\n\t\t\t\tgotoLineMode: true\n\t\t\t\t// remoteAuthority: will be determined based on windowOpenableFromProtocolUrl\n\t\t\t}));\n\n\t\t\twindow?.focus(); // this should help ensuring that the right window gets focus when multiple are opened\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// ...or if we should open in a new window and then handle it within that window\n\t\tif (shouldOpenInNewWindow) {\n\t\t\tthis.logService.trace('app#handleProtocolUrl() opening empty window and passing in protocol url:', uri.toString(true));\n\n\t\t\tconst window = firstOrDefault(await windowsMainService.open({\n\t\t\t\tcontext: OpenContext.API,\n\t\t\t\tcli: { ...this.environmentMainService.args },\n\t\t\t\tforceNewWindow: true,\n\t\t\t\tforceEmpty: true,\n\t\t\t\tgotoLineMode: true,\n\t\t\t\tremoteAuthority: getRemoteAuthority(uri)\n\t\t\t}));\n\n\t\t\tawait window?.ready();\n\n\t\t\treturn urlService.open(uri, options);\n\t\t}\n\n\t\tthis.logService.trace('app#handleProtocolUrl(): not handled', uri.toString(true), options);\n\n\t\treturn false;\n\t}\n\n\tprivate setupSharedProcess(machineId: string): { sharedProcessReady: Promise<MessagePortClient>; sharedProcessClient: Promise<MessagePortClient> } {\n\t\tconst sharedProcess = this._register(this.mainInstantiationService.createInstance(SharedProcess, machineId));\n\n\t\tconst sharedProcessClient = (async () => {\n\t\t\tthis.logService.trace('Main->SharedProcess#connect');\n\n\t\t\tconst port = await sharedProcess.connect();\n\n\t\t\tthis.logService.trace('Main->SharedProcess#connect: connection established');\n\n\t\t\treturn new MessagePortClient(port, 'main');\n\t\t})();\n\n\t\tconst sharedProcessReady = (async () => {\n\t\t\tawait sharedProcess.whenReady();\n\n\t\t\treturn sharedProcessClient;\n\t\t})();\n\n\t\treturn { sharedProcessReady, sharedProcessClient };\n\t}\n\n\tprivate async initServices(machineId: string, sharedProcessReady: Promise<MessagePortClient>): Promise<IInstantiationService> {\n\t\tconst services = new ServiceCollection();\n\n\t\t// Update\n\t\tswitch (process.platform) {\n\t\t\tcase 'win32':\n\t\t\t\tservices.set(IUpdateService, new SyncDescriptor(Win32UpdateService));\n\t\t\t\tbreak;\n\n\t\t\tcase 'linux':\n\t\t\t\tif (isLinuxSnap) {\n\t\t\t\t\tservices.set(IUpdateService, new SyncDescriptor(SnapUpdateService, [process.env['SNAP'], process.env['SNAP_REVISION']]));\n\t\t\t\t} else {\n\t\t\t\t\tservices.set(IUpdateService, new SyncDescriptor(LinuxUpdateService));\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 'darwin':\n\t\t\t\tservices.set(IUpdateService, new SyncDescriptor(DarwinUpdateService));\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Windows\n\t\tservices.set(IWindowsMainService, new SyncDescriptor(WindowsMainService, [machineId, this.userEnv], false));\n\n\t\t// Dialogs\n\t\tconst dialogMainService = new DialogMainService(this.logService, this.productService);\n\t\tservices.set(IDialogMainService, dialogMainService);\n\n\t\t// Launch\n\t\tservices.set(ILaunchMainService, new SyncDescriptor(LaunchMainService, undefined, false /* proxied to other processes */));\n\n\t\t// Diagnostics\n\t\tservices.set(IDiagnosticsMainService, new SyncDescriptor(DiagnosticsMainService, undefined, false /* proxied to other processes */));\n\t\tservices.set(IDiagnosticsService, ProxyChannel.toService(getDelayedChannel(sharedProcessReady.then(client => client.getChannel('diagnostics')))));\n\n\t\t// Issues\n\t\tservices.set(IIssueMainService, new SyncDescriptor(IssueMainService, [this.userEnv]));\n\n\t\t// Encryption\n\t\tservices.set(IEncryptionMainService, new SyncDescriptor(EncryptionMainService));\n\n\t\t// Keyboard Layout\n\t\tservices.set(IKeyboardLayoutMainService, new SyncDescriptor(KeyboardLayoutMainService));\n\n\t\t// Native Host\n\t\tservices.set(INativeHostMainService, new SyncDescriptor(NativeHostMainService, undefined, false /* proxied to other processes */));\n\n\t\t// Webview Manager\n\t\tservices.set(IWebviewManagerService, new SyncDescriptor(WebviewMainService));\n\n\t\t// Menubar\n\t\tservices.set(IMenubarMainService, new SyncDescriptor(MenubarMainService));\n\n\t\t// Extension URL Trust\n\t\tservices.set(IExtensionUrlTrustService, new SyncDescriptor(ExtensionUrlTrustService));\n\n\t\t// Extension Host Starter\n\t\tservices.set(IExtensionHostStarter, new SyncDescriptor(ExtensionHostStarter));\n\n\t\t// Storage\n\t\tservices.set(IStorageMainService, new SyncDescriptor(StorageMainService));\n\t\tservices.set(IApplicationStorageMainService, new SyncDescriptor(ApplicationStorageMainService));\n\n\t\t// Terminal\n\t\tconst ptyHostStarter = new ElectronPtyHostStarter({\n\t\t\tgraceTime: LocalReconnectConstants.GraceTime,\n\t\t\tshortGraceTime: LocalReconnectConstants.ShortGraceTime,\n\t\t\tscrollback: this.configurationService.getValue<number>(TerminalSettingId.PersistentSessionScrollback) ?? 100\n\t\t}, this.configurationService, this.environmentMainService, this.lifecycleMainService, this.logService);\n\t\tconst ptyHostService = new PtyHostService(\n\t\t\tptyHostStarter,\n\t\t\tthis.configurationService,\n\t\t\tthis.logService,\n\t\t\tthis.loggerService\n\t\t);\n\t\tservices.set(ILocalPtyService, ptyHostService);\n\n\t\t// External terminal\n\t\tif (isWindows) {\n\t\t\tservices.set(IExternalTerminalMainService, new SyncDescriptor(WindowsExternalTerminalService));\n\t\t} else if (isMacintosh) {\n\t\t\tservices.set(IExternalTerminalMainService, new SyncDescriptor(MacExternalTerminalService));\n\t\t} else if (isLinux) {\n\t\t\tservices.set(IExternalTerminalMainService, new SyncDescriptor(LinuxExternalTerminalService));\n\t\t}\n\n\t\t// Backups\n\t\tconst backupMainService = new BackupMainService(this.environmentMainService, this.configurationService, this.logService, this.stateService);\n\t\tservices.set(IBackupMainService, backupMainService);\n\n\t\t// Workspaces\n\t\tconst workspacesManagementMainService = new WorkspacesManagementMainService(this.environmentMainService, this.logService, this.userDataProfilesMainService, backupMainService, dialogMainService);\n\t\tservices.set(IWorkspacesManagementMainService, workspacesManagementMainService);\n\t\tservices.set(IWorkspacesService, new SyncDescriptor(WorkspacesMainService, undefined, false /* proxied to other processes */));\n\t\tservices.set(IWorkspacesHistoryMainService, new SyncDescriptor(WorkspacesHistoryMainService, undefined, false));\n\n\t\t// URL handling\n\t\tservices.set(IURLService, new SyncDescriptor(NativeURLService, undefined, false /* proxied to other processes */));\n\n\t\t// Telemetry\n\t\tif (supportsTelemetry(this.productService, this.environmentMainService)) {\n\t\t\tconst isInternal = isInternalTelemetry(this.productService, this.configurationService);\n\t\t\tconst channel = getDelayedChannel(sharedProcessReady.then(client => client.getChannel('telemetryAppender')));\n\t\t\tconst appender = new TelemetryAppenderClient(channel);\n\t\t\tconst commonProperties = resolveCommonProperties(release(), hostname(), process.arch, this.productService.commit, this.productService.version, machineId, isInternal);\n\t\t\tconst piiPaths = getPiiPathsFromEnvironment(this.environmentMainService);\n\t\t\tconst config: ITelemetryServiceConfig = { appenders: [appender], commonProperties, piiPaths, sendErrorTelemetry: true };\n\n\t\t\tservices.set(ITelemetryService, new SyncDescriptor(TelemetryService, [config], false));\n\t\t} else {\n\t\t\tservices.set(ITelemetryService, NullTelemetryService);\n\t\t}\n\n\t\t// Default Extensions Profile Init\n\t\tservices.set(IExtensionsProfileScannerService, new SyncDescriptor(ExtensionsProfileScannerService, undefined, true));\n\t\tservices.set(IExtensionsScannerService, new SyncDescriptor(ExtensionsScannerService, undefined, true));\n\n\t\t// Utility Process Worker\n\t\tservices.set(IUtilityProcessWorkerMainService, new SyncDescriptor(UtilityProcessWorkerMainService, undefined, true));\n\n\t\t// Init services that require it\n\t\tawait Promises.settled([\n\t\t\tbackupMainService.initialize(),\n\t\t\tworkspacesManagementMainService.initialize()\n\t\t]);\n\n\t\treturn this.mainInstantiationService.createChild(services);\n\t}\n\n\tprivate initChannels(accessor: ServicesAccessor, mainProcessElectronServer: ElectronIPCServer, sharedProcessClient: Promise<MessagePortClient>): void {\n\n\t\t// Channels registered to node.js are exposed to second instances\n\t\t// launching because that is the only way the second instance\n\t\t// can talk to the first instance. Electron IPC does not work\n\t\t// across apps until `requestSingleInstance` APIs are adopted.\n\n\t\tconst disposables = this._register(new DisposableStore());\n\n\t\tconst launchChannel = ProxyChannel.fromService(accessor.get(ILaunchMainService), disposables, { disableMarshalling: true });\n\t\tthis.mainProcessNodeIpcServer.registerChannel('launch', launchChannel);\n\n\t\tconst diagnosticsChannel = ProxyChannel.fromService(accessor.get(IDiagnosticsMainService), disposables, { disableMarshalling: true });\n\t\tthis.mainProcessNodeIpcServer.registerChannel('diagnostics', diagnosticsChannel);\n\n\t\t// Policies (main & shared process)\n\t\tconst policyChannel = new PolicyChannel(accessor.get(IPolicyService));\n\t\tmainProcessElectronServer.registerChannel('policy', policyChannel);\n\t\tsharedProcessClient.then(client => client.registerChannel('policy', policyChannel));\n\n\t\t// Local Files\n\t\tconst diskFileSystemProvider = this.fileService.getProvider(Schemas.file);\n\t\tassertType(diskFileSystemProvider instanceof DiskFileSystemProvider);\n\t\tconst fileSystemProviderChannel = new DiskFileSystemProviderChannel(diskFileSystemProvider, this.logService, this.environmentMainService);\n\t\tmainProcessElectronServer.registerChannel(LOCAL_FILE_SYSTEM_CHANNEL_NAME, fileSystemProviderChannel);\n\t\tsharedProcessClient.then(client => client.registerChannel(LOCAL_FILE_SYSTEM_CHANNEL_NAME, fileSystemProviderChannel));\n\n\t\t// User Data Profiles\n\t\tconst userDataProfilesService = ProxyChannel.fromService(accessor.get(IUserDataProfilesMainService), disposables);\n\t\tmainProcessElectronServer.registerChannel('userDataProfiles', userDataProfilesService);\n\t\tsharedProcessClient.then(client => client.registerChannel('userDataProfiles', userDataProfilesService));\n\n\t\t// Request\n\t\tconst requestService = new RequestChannel(accessor.get(IRequestService));\n\t\tsharedProcessClient.then(client => client.registerChannel('request', requestService));\n\n\t\t// Update\n\t\tconst updateChannel = new UpdateChannel(accessor.get(IUpdateService));\n\t\tmainProcessElectronServer.registerChannel('update', updateChannel);\n\n\t\t// Issues\n\t\tconst issueChannel = ProxyChannel.fromService(accessor.get(IIssueMainService), disposables);\n\t\tmainProcessElectronServer.registerChannel('issue', issueChannel);\n\n\t\t// Encryption\n\t\tconst encryptionChannel = ProxyChannel.fromService(accessor.get(IEncryptionMainService), disposables);\n\t\tmainProcessElectronServer.registerChannel('encryption', encryptionChannel);\n\n\t\t// Signing\n\t\tconst signChannel = ProxyChannel.fromService(accessor.get(ISignService), disposables);\n\t\tmainProcessElectronServer.registerChannel('sign', signChannel);\n\n\t\t// Keyboard Layout\n\t\tconst keyboardLayoutChannel = ProxyChannel.fromService(accessor.get(IKeyboardLayoutMainService), disposables);\n\t\tmainProcessElectronServer.registerChannel('keyboardLayout', keyboardLayoutChannel);\n\n\t\t// Native host (main & shared process)\n\t\tthis.nativeHostMainService = accessor.get(INativeHostMainService);\n\t\tconst nativeHostChannel = ProxyChannel.fromService(this.nativeHostMainService, disposables);\n\t\tmainProcessElectronServer.registerChannel('nativeHost', nativeHostChannel);\n\t\tsharedProcessClient.then(client => client.registerChannel('nativeHost', nativeHostChannel));\n\n\t\t// Workspaces\n\t\tconst workspacesChannel = ProxyChannel.fromService(accessor.get(IWorkspacesService), disposables);\n\t\tmainProcessElectronServer.registerChannel('workspaces', workspacesChannel);\n\n\t\t// Menubar\n\t\tconst menubarChannel = ProxyChannel.fromService(accessor.get(IMenubarMainService), disposables);\n\t\tmainProcessElectronServer.registerChannel('menubar', menubarChannel);\n\n\t\t// URL handling\n\t\tconst urlChannel = ProxyChannel.fromService(accessor.get(IURLService), disposables);\n\t\tmainProcessElectronServer.registerChannel('url', urlChannel);\n\n\t\t// Extension URL Trust\n\t\tconst extensionUrlTrustChannel = ProxyChannel.fromService(accessor.get(IExtensionUrlTrustService), disposables);\n\t\tmainProcessElectronServer.registerChannel('extensionUrlTrust', extensionUrlTrustChannel);\n\n\t\t// Webview Manager\n\t\tconst webviewChannel = ProxyChannel.fromService(accessor.get(IWebviewManagerService), disposables);\n\t\tmainProcessElectronServer.registerChannel('webview', webviewChannel);\n\n\t\t// Storage (main & shared process)\n\t\tconst storageChannel = this._register(new StorageDatabaseChannel(this.logService, accessor.get(IStorageMainService)));\n\t\tmainProcessElectronServer.registerChannel('storage', storageChannel);\n\t\tsharedProcessClient.then(client => client.registerChannel('storage', storageChannel));\n\n\t\t// Profile Storage Changes Listener (shared process)\n\t\tconst profileStorageListener = this._register(new ProfileStorageChangesListenerChannel(accessor.get(IStorageMainService), accessor.get(IUserDataProfilesMainService), this.logService));\n\t\tsharedProcessClient.then(client => client.registerChannel('profileStorageListener', profileStorageListener));\n\n\t\t// Terminal\n\t\tconst ptyHostChannel = ProxyChannel.fromService(accessor.get(ILocalPtyService), disposables);\n\t\tmainProcessElectronServer.registerChannel(TerminalIpcChannels.LocalPty, ptyHostChannel);\n\n\t\t// External Terminal\n\t\tconst externalTerminalChannel = ProxyChannel.fromService(accessor.get(IExternalTerminalMainService), disposables);\n\t\tmainProcessElectronServer.registerChannel('externalTerminal', externalTerminalChannel);\n\n\t\t// Logger\n\t\tconst loggerChannel = new LoggerChannel(accessor.get(ILoggerMainService),);\n\t\tmainProcessElectronServer.registerChannel('logger', loggerChannel);\n\t\tsharedProcessClient.then(client => client.registerChannel('logger', loggerChannel));\n\n\t\t// Extension Host Debug Broadcasting\n\t\tconst electronExtensionHostDebugBroadcastChannel = new ElectronExtensionHostDebugBroadcastChannel(accessor.get(IWindowsMainService));\n\t\tmainProcessElectronServer.registerChannel('extensionhostdebugservice', electronExtensionHostDebugBroadcastChannel);\n\n\t\t// Extension Host Starter\n\t\tconst extensionHostStarterChannel = ProxyChannel.fromService(accessor.get(IExtensionHostStarter), disposables);\n\t\tmainProcessElectronServer.registerChannel(ipcExtensionHostStarterChannelName, extensionHostStarterChannel);\n\n\t\t// Utility Process Worker\n\t\tconst utilityProcessWorkerChannel = ProxyChannel.fromService(accessor.get(IUtilityProcessWorkerMainService), disposables);\n\t\tmainProcessElectronServer.registerChannel(ipcUtilityProcessWorkerChannelName, utilityProcessWorkerChannel);\n\t}\n\n\tprivate async openFirstWindow(accessor: ServicesAccessor, initialProtocolUrls: IInitialProtocolUrls | undefined): Promise<ICodeWindow[]> {\n\t\tconst windowsMainService = this.windowsMainService = accessor.get(IWindowsMainService);\n\n\t\tconst context = isLaunchedFromCli(process.env) ? OpenContext.CLI : OpenContext.DESKTOP;\n\t\tconst args = this.environmentMainService.args;\n\n\t\t// First check for windows from protocol links to open\n\t\tif (initialProtocolUrls) {\n\n\t\t\t// Openables can open as windows directly\n\t\t\tif (initialProtocolUrls.openables.length > 0) {\n\t\t\t\treturn windowsMainService.open({\n\t\t\t\t\tcontext,\n\t\t\t\t\tcli: args,\n\t\t\t\t\turisToOpen: initialProtocolUrls.openables,\n\t\t\t\t\tgotoLineMode: true,\n\t\t\t\t\tinitialStartup: true\n\t\t\t\t\t// remoteAuthority: will be determined based on openables\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Protocol links with `windowId=_blank` on startup\n\t\t\t// should be handled in a special way:\n\t\t\t// We take the first one of these and open an empty\n\t\t\t// window for it. This ensures we are not restoring\n\t\t\t// all windows of the previous session.\n\t\t\t// If there are any more URLs like these, they will\n\t\t\t// be handled from the URL listeners installed later.\n\n\t\t\tif (initialProtocolUrls.urls.length > 0) {\n\t\t\t\tfor (const protocolUrl of initialProtocolUrls.urls) {\n\t\t\t\t\tconst params = new URLSearchParams(protocolUrl.uri.query);\n\t\t\t\t\tif (params.get('windowId') === '_blank') {\n\n\t\t\t\t\t\t// It is important here that we remove `windowId=_blank` from\n\t\t\t\t\t\t// this URL because here we open an empty window for it.\n\n\t\t\t\t\t\tparams.delete('windowId');\n\t\t\t\t\t\tprotocolUrl.originalUrl = protocolUrl.uri.toString(true);\n\t\t\t\t\t\tprotocolUrl.uri = protocolUrl.uri.with({ query: params.toString() });\n\n\t\t\t\t\t\treturn windowsMainService.open({\n\t\t\t\t\t\t\tcontext,\n\t\t\t\t\t\t\tcli: args,\n\t\t\t\t\t\t\tforceNewWindow: true,\n\t\t\t\t\t\t\tforceEmpty: true,\n\t\t\t\t\t\t\tgotoLineMode: true,\n\t\t\t\t\t\t\tinitialStartup: true\n\t\t\t\t\t\t\t// remoteAuthority: will be determined based on openables\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst macOpenFiles: string[] = (<any>global).macOpenFiles;\n\t\tconst hasCliArgs = args._.length;\n\t\tconst hasFolderURIs = !!args['folder-uri'];\n\t\tconst hasFileURIs = !!args['file-uri'];\n\t\tconst noRecentEntry = args['skip-add-to-recently-opened'] === true;\n\t\tconst waitMarkerFileURI = args.wait && args.waitMarkerFilePath ? URI.file(args.waitMarkerFilePath) : undefined;\n\t\tconst remoteAuthority = args.remote || undefined;\n\t\tconst forceProfile = args.profile;\n\t\tconst forceTempProfile = args['profile-temp'];\n\n\t\t// Started without file/folder arguments\n\t\tif (!hasCliArgs && !hasFolderURIs && !hasFileURIs) {\n\n\t\t\t// Force new window\n\t\t\tif (args['new-window'] || forceProfile || forceTempProfile) {\n\t\t\t\treturn windowsMainService.open({\n\t\t\t\t\tcontext,\n\t\t\t\t\tcli: args,\n\t\t\t\t\tforceNewWindow: true,\n\t\t\t\t\tforceEmpty: true,\n\t\t\t\t\tnoRecentEntry,\n\t\t\t\t\twaitMarkerFileURI,\n\t\t\t\t\tinitialStartup: true,\n\t\t\t\t\tremoteAuthority,\n\t\t\t\t\tforceProfile,\n\t\t\t\t\tforceTempProfile\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// mac: open-file event received on startup\n\t\t\tif (macOpenFiles.length) {\n\t\t\t\treturn windowsMainService.open({\n\t\t\t\t\tcontext: OpenContext.DOCK,\n\t\t\t\t\tcli: args,\n\t\t\t\t\turisToOpen: macOpenFiles.map(path => (hasWorkspaceFileExtension(path) ? { workspaceUri: URI.file(path) } : { fileUri: URI.file(path) })),\n\t\t\t\t\tnoRecentEntry,\n\t\t\t\t\twaitMarkerFileURI,\n\t\t\t\t\tinitialStartup: true,\n\t\t\t\t\t// remoteAuthority: will be determined based on macOpenFiles\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// default: read paths from cli\n\t\treturn windowsMainService.open({\n\t\t\tcontext,\n\t\t\tcli: args,\n\t\t\tforceNewWindow: args['new-window'] || (!hasCliArgs && args['unity-launch']),\n\t\t\tdiffMode: args.diff,\n\t\t\tmergeMode: args.merge,\n\t\t\tnoRecentEntry,\n\t\t\twaitMarkerFileURI,\n\t\t\tgotoLineMode: args.goto,\n\t\t\tinitialStartup: true,\n\t\t\tremoteAuthority,\n\t\t\tforceProfile,\n\t\t\tforceTempProfile\n\t\t});\n\t}\n\n\tprivate afterWindowOpen(): void {\n\n\t\t// Windows: mutex\n\t\tthis.installMutex();\n\n\t\t// Remote Authorities\n\t\tprotocol.registerHttpProtocol(Schemas.vscodeRemoteResource, (request, callback) => {\n\t\t\tcallback({\n\t\t\t\turl: request.url.replace(/^vscode-remote-resource:/, 'http:'),\n\t\t\t\tmethod: request.method\n\t\t\t});\n\t\t});\n\n\t\t// Start to fetch shell environment (if needed) after window has opened\n\t\t// Since this operation can take a long time, we want to warm it up while\n\t\t// the window is opening.\n\t\t// We also show an error to the user in case this fails.\n\t\tthis.resolveShellEnvironment(this.environmentMainService.args, process.env, true);\n\n\t\t// Crash reporter\n\t\tthis.updateCrashReporterEnablement();\n\n\t\tif (isMacintosh && app.runningUnderARM64Translation) {\n\t\t\tthis.windowsMainService?.sendToFocused('vscode:showTranslatedBuildWarning');\n\t\t}\n\n\t}\n\n\tprivate async installMutex(): Promise<void> {\n\t\tconst win32MutexName = this.productService.win32MutexName;\n\t\tif (isWindows && win32MutexName) {\n\t\t\ttry {\n\t\t\t\tconst WindowsMutex = await import('@vscode/windows-mutex');\n\t\t\t\tconst mutex = new WindowsMutex.Mutex(win32MutexName);\n\t\t\t\tonce(this.lifecycleMainService.onWillShutdown)(() => mutex.release());\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async resolveShellEnvironment(args: NativeParsedArgs, env: IProcessEnvironment, notifyOnError: boolean): Promise<typeof process.env> {\n\t\ttry {\n\t\t\treturn await getResolvedShellEnv(this.configurationService, this.logService, args, env);\n\t\t} catch (error) {\n\t\t\tconst errorMessage = toErrorMessage(error);\n\t\t\tif (notifyOnError) {\n\t\t\t\tthis.windowsMainService?.sendToFocused('vscode:showResolveShellEnvError', errorMessage);\n\t\t\t} else {\n\t\t\t\tthis.logService.error(errorMessage);\n\t\t\t}\n\t\t}\n\n\t\treturn {};\n\t}\n\n\tprivate async updateCrashReporterEnablement(): Promise<void> {\n\n\t\t// If enable-crash-reporter argv is undefined then this is a fresh start,\n\t\t// based on `telemetry.enableCrashreporter` settings, generate a UUID which\n\t\t// will be used as crash reporter id and also update the json file.\n\n\t\ttry {\n\t\t\tconst argvContent = await this.fileService.readFile(this.environmentMainService.argvResource);\n\t\t\tconst argvString = argvContent.value.toString();\n\t\t\tconst argvJSON = JSON.parse(stripComments(argvString));\n\t\t\tconst telemetryLevel = getTelemetryLevel(this.configurationService);\n\t\t\tconst enableCrashReporter = telemetryLevel >= TelemetryLevel.CRASH;\n\n\t\t\t// Initial startup\n\t\t\tif (argvJSON['enable-crash-reporter'] === undefined) {\n\t\t\t\tconst additionalArgvContent = [\n\t\t\t\t\t'',\n\t\t\t\t\t'\t// Allows to disable crash reporting.',\n\t\t\t\t\t'\t// Should restart the app if the value is changed.',\n\t\t\t\t\t`\t\"enable-crash-reporter\": ${enableCrashReporter},`,\n\t\t\t\t\t'',\n\t\t\t\t\t'\t// Unique id used for correlating crash reports sent from this instance.',\n\t\t\t\t\t'\t// Do not edit this value.',\n\t\t\t\t\t`\t\"crash-reporter-id\": \"${generateUuid()}\"`,\n\t\t\t\t\t'}'\n\t\t\t\t];\n\t\t\t\tconst newArgvString = argvString.substring(0, argvString.length - 2).concat(',\\n', additionalArgvContent.join('\\n'));\n\n\t\t\t\tawait this.fileService.writeFile(this.environmentMainService.argvResource, VSBuffer.fromString(newArgvString));\n\t\t\t}\n\n\t\t\t// Subsequent startup: update crash reporter value if changed\n\t\t\telse {\n\t\t\t\tconst newArgvString = argvString.replace(/\"enable-crash-reporter\": .*,/, `\"enable-crash-reporter\": ${enableCrashReporter},`);\n\t\t\t\tif (newArgvString !== argvString) {\n\t\t\t\t\tawait this.fileService.writeFile(this.environmentMainService.argvResource, VSBuffer.fromString(newArgvString));\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\t}\n}\n"]}