{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/editor.api.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG,qCAAqC;IACrC,6BAAa,CAAC,cAAc,CAAC,YAAY,8BAAsB,CAAC;IAChE,6BAAa,CAAC,WAAW,CAAC,YAAY,GAAG,KAAK,CAAC;IAC/C,6BAAa,CAAC,UAAU,CAAC,YAAY,4CAAoC,CAAC;IAC1E,6BAAa,CAAC,kBAAkB,CAAC,YAAY,GAAG,CAAC,CAAC;IAElD,6FAA6F;IAC7F,6DAA6D;IAC7D,YAAG,CAAiB,oBAAoB,CAAC,CAAC,SAAS,EAAE,QAAQ,EAAE,IAAI,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAEvG,MAAM,GAAG,GAAG,IAAA,mBAAG,GAAkB,CAAC;IAClC,GAAG,CAAC,MAAM,GAAG,IAAA,wCAAqB,GAAE,CAAC;IACrC,GAAG,CAAC,SAAS,GAAG,IAAA,8CAAwB,GAAE,CAAC;IAC9B,QAAA,IAAI,GAAsB,GAAG,CAAC,uBAAuB,CAAC;IACtD,QAAA,IAAI,GAAM,GAAG,CAAC,OAAO,CAAC;IACtB,QAAA,IAAI,GAAM,GAAG,CAAC,OAAO,CAAC;IACtB,QAAA,IAAI,GAAK,GAAG,CAAC,MAAM,CAAC;IACpB,QAAA,IAAI,GAAO,GAAG,CAAC,QAAQ,CAAC;IACxB,QAAA,IAAI,GAAI,GAAG,CAAC,KAAK,CAAC;IAClB,QAAA,IAAI,GAAQ,GAAG,CAAC,SAAS,CAAC;IAC1B,QAAA,IAAI,GAAiB,GAAG,CAAC,kBAAkB,CAAC;IAC5C,QAAA,IAAI,GAAa,GAAG,CAAC,cAAc,CAAC;IACpC,QAAA,IAAI,GAAQ,GAAG,CAAC,SAAS,CAAC;IAC1B,QAAA,GAAG,GAAG,GAAG,CAAC,GAAG,CAAC;IACd,QAAA,IAAI,GAAI,GAAG,CAAC,KAAK,CAAC;IAClB,QAAA,IAAI,GAAK,GAAG,CAAC,MAAM,CAAC;IACpB,QAAA,IAAI,GAAQ,GAAG,CAAC,SAAS,CAAC;IAKvC,MAAM,iBAAiB,GAAoC,UAAkB,CAAC,iBAAiB,CAAC;IAChG,IAAI,iBAAiB,EAAE,SAAS,IAAI,CAAC,OAAO,MAAM,KAAK,UAAU,IAAU,MAAO,CAAC,GAAG,CAAC,EAAE;QACxF,UAAU,CAAC,MAAM,GAAG,GAAG,CAAC;KACxB;IAED,IAAI,OAAO,UAAU,CAAC,OAAO,KAAK,WAAW,IAAI,OAAO,UAAU,CAAC,OAAO,CAAC,MAAM,KAAK,UAAU,EAAE;QACjG,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC;YACzB,sBAAsB,EAAE;gBACvB,6BAA6B;gBAC7B,kCAAkC;gBAClC,oCAAoC;gBACpC,yCAAyC;gBACzC,YAAY;gBACZ,uBAAuB;gBACvB,cAAc;gBACd,mBAAmB;gBACnB,YAAY;gBACZ,kBAAkB;gBAClB,0CAA0C;aAC1C;SACD,CAAC,CAAC;KACH","file":"editor.api.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { EditorOptions, WrappingIndent, EditorAutoIndentStrategy } from 'vs/editor/common/config/editorOptions';\nimport { createMonacoBaseAPI } from 'vs/editor/common/services/editorBaseApi';\nimport { createMonacoEditorAPI } from 'vs/editor/standalone/browser/standaloneEditor';\nimport { createMonacoLanguagesAPI } from 'vs/editor/standalone/browser/standaloneLanguages';\nimport { FormattingConflicts } from 'vs/editor/contrib/format/browser/format';\n\n// Set defaults for standalone editor\nEditorOptions.wrappingIndent.defaultValue = WrappingIndent.None;\nEditorOptions.glyphMargin.defaultValue = false;\nEditorOptions.autoIndent.defaultValue = EditorAutoIndentStrategy.Advanced;\nEditorOptions.overviewRulerLanes.defaultValue = 2;\n\n// We need to register a formatter selector which simply picks the first available formatter.\n// See https://github.com/microsoft/monaco-editor/issues/2327\nFormattingConflicts.setFormatterSelector((formatter, document, mode) => Promise.resolve(formatter[0]));\n\nconst api = createMonacoBaseAPI();\napi.editor = createMonacoEditorAPI();\napi.languages = createMonacoLanguagesAPI();\nexport const CancellationTokenSource = api.CancellationTokenSource;\nexport const Emitter = api.Emitter;\nexport const KeyCode = api.KeyCode;\nexport const KeyMod = api.KeyMod;\nexport const Position = api.Position;\nexport const Range = api.Range;\nexport const Selection = api.Selection;\nexport const SelectionDirection = api.SelectionDirection;\nexport const MarkerSeverity = api.MarkerSeverity;\nexport const MarkerTag = api.MarkerTag;\nexport const Uri = api.Uri;\nexport const Token = api.Token;\nexport const editor = api.editor;\nexport const languages = api.languages;\n\ninterface IMonacoEnvironment {\n\tglobalAPI?: boolean;\n}\nconst monacoEnvironment: IMonacoEnvironment | undefined = (globalThis as any).MonacoEnvironment;\nif (monacoEnvironment?.globalAPI || (typeof define === 'function' && (<any>define).amd)) {\n\tglobalThis.monaco = api;\n}\n\nif (typeof globalThis.require !== 'undefined' && typeof globalThis.require.config === 'function') {\n\tglobalThis.require.config({\n\t\tignoreDuplicateModules: [\n\t\t\t'vscode-languageserver-types',\n\t\t\t'vscode-languageserver-types/main',\n\t\t\t'vscode-languageserver-textdocument',\n\t\t\t'vscode-languageserver-textdocument/main',\n\t\t\t'vscode-nls',\n\t\t\t'vscode-nls/vscode-nls',\n\t\t\t'jsonc-parser',\n\t\t\t'jsonc-parser/main',\n\t\t\t'vscode-uri',\n\t\t\t'vscode-uri/index',\n\t\t\t'vs/basic-languages/typescript/typescript'\n\t\t]\n\t});\n}\n"]}