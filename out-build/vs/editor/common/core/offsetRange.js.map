{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/core/offsetRange.ts"],"names":[],"mappings":"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","file":"offsetRange.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BugIndicatingError } from 'vs/base/common/errors';\n\n/**\n * A range of offsets (0-based).\n*/\nexport class OffsetRange {\n\tpublic static addRange(range: OffsetRange, sortedRanges: OffsetRange[]): void {\n\t\tlet i = 0;\n\t\twhile (i < sortedRanges.length && sortedRanges[i].endExclusive < range.start) {\n\t\t\ti++;\n\t\t}\n\t\tlet j = i;\n\t\twhile (j < sortedRanges.length && sortedRanges[j].start <= range.endExclusive) {\n\t\t\tj++;\n\t\t}\n\t\tif (i === j) {\n\t\t\tsortedRanges.splice(i, 0, range);\n\t\t} else {\n\t\t\tconst start = Math.min(range.start, sortedRanges[i].start);\n\t\t\tconst end = Math.max(range.endExclusive, sortedRanges[j - 1].endExclusive);\n\t\t\tsortedRanges.splice(i, j - i, new OffsetRange(start, end));\n\t\t}\n\t}\n\n\tpublic static tryCreate(start: number, endExclusive: number): OffsetRange | undefined {\n\t\tif (start > endExclusive) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn new OffsetRange(start, endExclusive);\n\t}\n\n\tpublic static ofLength(length: number): OffsetRange {\n\t\treturn new OffsetRange(0, length);\n\t}\n\n\tconstructor(public readonly start: number, public readonly endExclusive: number) {\n\t\tif (start > endExclusive) {\n\t\t\tthrow new BugIndicatingError(`Invalid range: ${this.toString()}`);\n\t\t}\n\t}\n\n\tget isEmpty(): boolean {\n\t\treturn this.start === this.endExclusive;\n\t}\n\n\tpublic delta(offset: number): OffsetRange {\n\t\treturn new OffsetRange(this.start + offset, this.endExclusive + offset);\n\t}\n\n\tpublic deltaStart(offset: number): OffsetRange {\n\t\treturn new OffsetRange(this.start + offset, this.endExclusive);\n\t}\n\n\tpublic deltaEnd(offset: number): OffsetRange {\n\t\treturn new OffsetRange(this.start, this.endExclusive + offset);\n\t}\n\n\tpublic get length(): number {\n\t\treturn this.endExclusive - this.start;\n\t}\n\n\tpublic toString() {\n\t\treturn `[${this.start}, ${this.endExclusive})`;\n\t}\n\n\tpublic equals(other: OffsetRange): boolean {\n\t\treturn this.start === other.start && this.endExclusive === other.endExclusive;\n\t}\n\n\tpublic containsRange(other: OffsetRange): boolean {\n\t\treturn this.start <= other.start && other.endExclusive <= this.endExclusive;\n\t}\n\n\tpublic contains(offset: number): boolean {\n\t\treturn this.start <= offset && offset < this.endExclusive;\n\t}\n\n\t/**\n\t * for all numbers n: range1.contains(n) or range2.contains(n) => range1.join(range2).contains(n)\n\t * The joined range is the smallest range that contains both ranges.\n\t */\n\tpublic join(other: OffsetRange): OffsetRange {\n\t\treturn new OffsetRange(Math.min(this.start, other.start), Math.max(this.endExclusive, other.endExclusive));\n\t}\n\n\t/**\n\t * for all numbers n: range1.contains(n) and range2.contains(n) <=> range1.intersect(range2).contains(n)\n\t *\n\t * The resulting range is empty if the ranges do not intersect, but touch.\n\t * If the ranges don't even touch, the result is undefined.\n\t */\n\tpublic intersect(other: OffsetRange): OffsetRange | undefined {\n\t\tconst start = Math.max(this.start, other.start);\n\t\tconst end = Math.min(this.endExclusive, other.endExclusive);\n\t\tif (start <= end) {\n\t\t\treturn new OffsetRange(start, end);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic intersectsOrTouches(other: OffsetRange): boolean {\n\t\tconst start = Math.max(this.start, other.start);\n\t\tconst end = Math.min(this.endExclusive, other.endExclusive);\n\t\treturn start <= end;\n\t}\n\n\tpublic slice<T>(arr: T[]): T[] {\n\t\treturn arr.slice(this.start, this.endExclusive);\n\t}\n\n\t/**\n\t * Returns the given value if it is contained in this instance, otherwise the closest value that is contained.\n\t * The range must not be empty.\n\t */\n\tpublic clip(value: number): number {\n\t\tif (this.isEmpty) {\n\t\t\tthrow new BugIndicatingError(`Invalid clipping range: ${this.toString()}`);\n\t\t}\n\t\treturn Math.max(this.start, Math.min(this.endExclusive - 1, value));\n\t}\n\n\t/**\n\t * Returns `r := value + k * length` such that `r` is contained in this range.\n\t * The range must not be empty.\n\t *\n\t * E.g. `[5, 10).clipCyclic(10) === 5`, `[5, 10).clipCyclic(11) === 6` and `[5, 10).clipCyclic(4) === 9`.\n\t */\n\tpublic clipCyclic(value: number): number {\n\t\tif (this.isEmpty) {\n\t\t\tthrow new BugIndicatingError(`Invalid clipping range: ${this.toString()}`);\n\t\t}\n\t\tif (value < this.start) {\n\t\t\treturn this.endExclusive - ((this.start - value) % this.length);\n\t\t}\n\t\tif (value >= this.endExclusive) {\n\t\t\treturn this.start + ((value - this.start) % this.length);\n\t\t}\n\t\treturn value;\n\t}\n\n\tpublic map<T>(f: (offset: number) => T): T[] {\n\t\tconst result: T[] = [];\n\t\tfor (let i = this.start; i < this.endExclusive; i++) {\n\t\t\tresult.push(f(i));\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic forEach(f: (offset: number) => void): void {\n\t\tfor (let i = this.start; i < this.endExclusive; i++) {\n\t\t\tf(i);\n\t\t}\n\t}\n}\n\nexport class OffsetRangeSet {\n\tprivate readonly _sortedRanges: OffsetRange[] = [];\n\n\tpublic addRange(range: OffsetRange): void {\n\t\tlet i = 0;\n\t\twhile (i < this._sortedRanges.length && this._sortedRanges[i].endExclusive < range.start) {\n\t\t\ti++;\n\t\t}\n\t\tlet j = i;\n\t\twhile (j < this._sortedRanges.length && this._sortedRanges[j].start <= range.endExclusive) {\n\t\t\tj++;\n\t\t}\n\t\tif (i === j) {\n\t\t\tthis._sortedRanges.splice(i, 0, range);\n\t\t} else {\n\t\t\tconst start = Math.min(range.start, this._sortedRanges[i].start);\n\t\t\tconst end = Math.max(range.endExclusive, this._sortedRanges[j - 1].endExclusive);\n\t\t\tthis._sortedRanges.splice(i, j - i, new OffsetRange(start, end));\n\t\t}\n\t}\n\n\tpublic toString(): string {\n\t\treturn this._sortedRanges.map(r => r.toString()).join(', ');\n\t}\n\n\t/**\n\t * Returns of there is a value that is contained in this instance and the given range.\n\t */\n\tpublic intersectsStrict(other: OffsetRange): boolean {\n\t\t// TODO use binary search\n\t\tlet i = 0;\n\t\twhile (i < this._sortedRanges.length && this._sortedRanges[i].endExclusive <= other.start) {\n\t\t\ti++;\n\t\t}\n\t\treturn i < this._sortedRanges.length && this._sortedRanges[i].start < other.endExclusive;\n\t}\n\n\tpublic intersectWithRange(other: OffsetRange): OffsetRangeSet {\n\t\t// TODO use binary search + slice\n\t\tconst result = new OffsetRangeSet();\n\t\tfor (const range of this._sortedRanges) {\n\t\t\tconst intersection = range.intersect(other);\n\t\t\tif (intersection) {\n\t\t\t\tresult.addRange(intersection);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic intersectWithRangeLength(other: OffsetRange): number {\n\t\treturn this.intersectWithRange(other).length;\n\t}\n\n\tpublic get length(): number {\n\t\treturn this._sortedRanges.reduce((prev, cur) => prev + cur.length, 0);\n\t}\n}\n"]}