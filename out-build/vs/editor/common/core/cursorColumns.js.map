{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/core/cursorColumns.ts"],"names":[],"mappings":"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","file":"cursorColumns.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport * as strings from 'vs/base/common/strings';\n\n/**\n * A column in a position is the gap between two adjacent characters. The methods here\n * work with a concept called \"visible column\". A visible column is a very rough approximation\n * of the horizontal screen position of a column. For example, using a tab size of 4:\n * ```txt\n * |<TAB>|<TAB>|T|ext\n * |     |     | \\---- column = 4, visible column = 9\n * |     |     \\------ column = 3, visible column = 8\n * |     \\------------ column = 2, visible column = 4\n * \\------------------ column = 1, visible column = 0\n * ```\n *\n * **NOTE**: Visual columns do not work well for RTL text or variable-width fonts or characters.\n *\n * **NOTE**: These methods work and make sense both on the model and on the view model.\n */\nexport class CursorColumns {\n\n\tprivate static _nextVisibleColumn(codePoint: number, visibleColumn: number, tabSize: number): number {\n\t\tif (codePoint === CharCode.Tab) {\n\t\t\treturn CursorColumns.nextRenderTabStop(visibleColumn, tabSize);\n\t\t}\n\t\tif (strings.isFullWidthCharacter(codePoint) || strings.isEmojiImprecise(codePoint)) {\n\t\t\treturn visibleColumn + 2;\n\t\t}\n\t\treturn visibleColumn + 1;\n\t}\n\n\t/**\n\t * Returns a visible column from a column.\n\t * @see {@link CursorColumns}\n\t */\n\tpublic static visibleColumnFromColumn(lineContent: string, column: number, tabSize: number): number {\n\t\tconst textLen = Math.min(column - 1, lineContent.length);\n\t\tconst text = lineContent.substring(0, textLen);\n\t\tconst iterator = new strings.GraphemeIterator(text);\n\n\t\tlet result = 0;\n\t\twhile (!iterator.eol()) {\n\t\t\tconst codePoint = strings.getNextCodePoint(text, textLen, iterator.offset);\n\t\t\titerator.nextGraphemeLength();\n\n\t\t\tresult = this._nextVisibleColumn(codePoint, result, tabSize);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Returns the value to display as \"Col\" in the status bar.\n\t * @see {@link CursorColumns}\n\t */\n\tpublic static toStatusbarColumn(lineContent: string, column: number, tabSize: number): number {\n\t\tconst text = lineContent.substring(0, Math.min(column - 1, lineContent.length));\n\t\tconst iterator = new strings.CodePointIterator(text);\n\n\t\tlet result = 0;\n\t\twhile (!iterator.eol()) {\n\t\t\tconst codePoint = iterator.nextCodePoint();\n\n\t\t\tif (codePoint === CharCode.Tab) {\n\t\t\t\tresult = CursorColumns.nextRenderTabStop(result, tabSize);\n\t\t\t} else {\n\t\t\t\tresult = result + 1;\n\t\t\t}\n\t\t}\n\n\t\treturn result + 1;\n\t}\n\n\t/**\n\t * Returns a column from a visible column.\n\t * @see {@link CursorColumns}\n\t */\n\tpublic static columnFromVisibleColumn(lineContent: string, visibleColumn: number, tabSize: number): number {\n\t\tif (visibleColumn <= 0) {\n\t\t\treturn 1;\n\t\t}\n\n\t\tconst lineContentLength = lineContent.length;\n\t\tconst iterator = new strings.GraphemeIterator(lineContent);\n\n\t\tlet beforeVisibleColumn = 0;\n\t\tlet beforeColumn = 1;\n\t\twhile (!iterator.eol()) {\n\t\t\tconst codePoint = strings.getNextCodePoint(lineContent, lineContentLength, iterator.offset);\n\t\t\titerator.nextGraphemeLength();\n\n\t\t\tconst afterVisibleColumn = this._nextVisibleColumn(codePoint, beforeVisibleColumn, tabSize);\n\t\t\tconst afterColumn = iterator.offset + 1;\n\n\t\t\tif (afterVisibleColumn >= visibleColumn) {\n\t\t\t\tconst beforeDelta = visibleColumn - beforeVisibleColumn;\n\t\t\t\tconst afterDelta = afterVisibleColumn - visibleColumn;\n\t\t\t\tif (afterDelta < beforeDelta) {\n\t\t\t\t\treturn afterColumn;\n\t\t\t\t} else {\n\t\t\t\t\treturn beforeColumn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tbeforeVisibleColumn = afterVisibleColumn;\n\t\t\tbeforeColumn = afterColumn;\n\t\t}\n\n\t\t// walked the entire string\n\t\treturn lineContentLength + 1;\n\t}\n\n\t/**\n\t * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n\t * @see {@link CursorColumns}\n\t */\n\tpublic static nextRenderTabStop(visibleColumn: number, tabSize: number): number {\n\t\treturn visibleColumn + tabSize - visibleColumn % tabSize;\n\t}\n\n\t/**\n\t * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n\t * @see {@link CursorColumns}\n\t */\n\tpublic static nextIndentTabStop(visibleColumn: number, indentSize: number): number {\n\t\treturn visibleColumn + indentSize - visibleColumn % indentSize;\n\t}\n\n\t/**\n\t * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n\t * @see {@link CursorColumns}\n\t */\n\tpublic static prevRenderTabStop(column: number, tabSize: number): number {\n\t\treturn Math.max(0, column - 1 - (column - 1) % tabSize);\n\t}\n\n\t/**\n\t * ATTENTION: This works with 0-based columns (as opposed to the regular 1-based columns)\n\t * @see {@link CursorColumns}\n\t */\n\tpublic static prevIndentTabStop(column: number, indentSize: number): number {\n\t\treturn Math.max(0, column - 1 - (column - 1) % indentSize);\n\t}\n}\n"]}