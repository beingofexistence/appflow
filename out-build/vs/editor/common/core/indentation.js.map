{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/core/indentation.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAKhG,SAAS,mCAAmC,CAAC,GAAW,EAAE,UAAkB,EAAE,YAAqB;QAClG,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpC,IAAI,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;gBAC3B,SAAS,GAAG,mBAAG,CAAW,iBAAiB,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;aACnE;iBAAM;gBACN,SAAS,EAAE,CAAC;aACZ;SACD;QAED,IAAI,MAAM,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,YAAY,EAAE;YAClB,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,GAAG,UAAU,CAAC,CAAC;YACnD,SAAS,GAAG,SAAS,GAAG,UAAU,CAAC;YACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,EAAE,CAAC,EAAE,EAAE;gBACjC,MAAM,IAAI,IAAI,CAAC;aACf;SACD;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;YACnC,MAAM,IAAI,GAAG,CAAC;SACd;QAED,OAAO,MAAM,CAAC;IACf,CAAC;IAED,SAAgB,GAAG,CAAkB,GAAW,EAAE,UAAkB,EAAE,YAAqB;QAC1F,IAAI,uBAAuB,GAAG,OAAO,CAAC,GAAG,CAAqB,GAAG,CAAC,CAAC;QACnE,IAAI,uBAAuB,KAAK,CAAC,CAAC,EAAE;YACnC,uBAAuB,GAAG,GAAG,CAAC,MAAM,CAAC;SACrC;QACD,OAAO,mCAAmC,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,uBAAuB,CAAC,EAAE,UAAU,EAAE,YAAY,CAAC,GAAG,GAAG,CAAC,SAAS,CAAC,uBAAuB,CAAC,CAAC;IAC1J,CAAC;IAND,kBAMC","file":"indentation.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from 'vs/base/common/strings';\nimport { CursorColumns } from 'vs/editor/common/core/cursorColumns';\n\nfunction _normalizeIndentationFromWhitespace(str: string, indentSize: number, insertSpaces: boolean): string {\n\tlet spacesCnt = 0;\n\tfor (let i = 0; i < str.length; i++) {\n\t\tif (str.charAt(i) === '\\t') {\n\t\t\tspacesCnt = CursorColumns.nextIndentTabStop(spacesCnt, indentSize);\n\t\t} else {\n\t\t\tspacesCnt++;\n\t\t}\n\t}\n\n\tlet result = '';\n\tif (!insertSpaces) {\n\t\tconst tabsCnt = Math.floor(spacesCnt / indentSize);\n\t\tspacesCnt = spacesCnt % indentSize;\n\t\tfor (let i = 0; i < tabsCnt; i++) {\n\t\t\tresult += '\\t';\n\t\t}\n\t}\n\n\tfor (let i = 0; i < spacesCnt; i++) {\n\t\tresult += ' ';\n\t}\n\n\treturn result;\n}\n\nexport function normalizeIndentation(str: string, indentSize: number, insertSpaces: boolean): string {\n\tlet firstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(str);\n\tif (firstNonWhitespaceIndex === -1) {\n\t\tfirstNonWhitespaceIndex = str.length;\n\t}\n\treturn _normalizeIndentationFromWhitespace(str.substring(0, firstNonWhitespaceIndex), indentSize, insertSpaces) + str.substring(firstNonWhitespaceIndex);\n}\n"]}