{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/services/unicodeTextModelHighlighter.ts"],"names":[],"mappings":"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","file":"unicodeTextModelHighlighter.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { Searcher } from 'vs/editor/common/model/textModelSearch';\nimport * as strings from 'vs/base/common/strings';\nimport { IUnicodeHighlightsResult } from 'vs/editor/common/services/editorWorker';\nimport { assertNever } from 'vs/base/common/assert';\nimport { DEFAULT_WORD_REGEXP, getWordAtText } from 'vs/editor/common/core/wordHelper';\n\nexport class UnicodeTextModelHighlighter {\n\tpublic static computeUnicodeHighlights(model: IUnicodeCharacterSearcherTarget, options: UnicodeHighlighterOptions, range?: IRange): IUnicodeHighlightsResult {\n\t\tconst startLine = range ? range.startLineNumber : 1;\n\t\tconst endLine = range ? range.endLineNumber : model.getLineCount();\n\n\t\tconst codePointHighlighter = new CodePointHighlighter(options);\n\n\t\tconst candidates = codePointHighlighter.getCandidateCodePoints();\n\t\tlet regex: RegExp;\n\t\tif (candidates === 'allNonBasicAscii') {\n\t\t\tregex = new RegExp('[^\\\\t\\\\n\\\\r\\\\x20-\\\\x7E]', 'g');\n\t\t} else {\n\t\t\tregex = new RegExp(`${buildRegExpCharClassExpr(Array.from(candidates))}`, 'g');\n\t\t}\n\n\t\tconst searcher = new Searcher(null, regex);\n\t\tconst ranges: Range[] = [];\n\t\tlet hasMore = false;\n\t\tlet m: RegExpExecArray | null;\n\n\t\tlet ambiguousCharacterCount = 0;\n\t\tlet invisibleCharacterCount = 0;\n\t\tlet nonBasicAsciiCharacterCount = 0;\n\n\t\tforLoop:\n\t\tfor (let lineNumber = startLine, lineCount = endLine; lineNumber <= lineCount; lineNumber++) {\n\t\t\tconst lineContent = model.getLineContent(lineNumber);\n\t\t\tconst lineLength = lineContent.length;\n\n\t\t\t// Reset regex to search from the beginning\n\t\t\tsearcher.reset(0);\n\t\t\tdo {\n\t\t\t\tm = searcher.next(lineContent);\n\t\t\t\tif (m) {\n\t\t\t\t\tlet startIndex = m.index;\n\t\t\t\t\tlet endIndex = m.index + m[0].length;\n\n\t\t\t\t\t// Extend range to entire code point\n\t\t\t\t\tif (startIndex > 0) {\n\t\t\t\t\t\tconst charCodeBefore = lineContent.charCodeAt(startIndex - 1);\n\t\t\t\t\t\tif (strings.isHighSurrogate(charCodeBefore)) {\n\t\t\t\t\t\t\tstartIndex--;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (endIndex + 1 < lineLength) {\n\t\t\t\t\t\tconst charCodeBefore = lineContent.charCodeAt(endIndex - 1);\n\t\t\t\t\t\tif (strings.isHighSurrogate(charCodeBefore)) {\n\t\t\t\t\t\t\tendIndex++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst str = lineContent.substring(startIndex, endIndex);\n\t\t\t\t\tlet word = getWordAtText(startIndex + 1, DEFAULT_WORD_REGEXP, lineContent, 0);\n\t\t\t\t\tif (word && word.endColumn <= startIndex + 1) {\n\t\t\t\t\t\t// The word does not include the problematic character, ignore the word\n\t\t\t\t\t\tword = null;\n\t\t\t\t\t}\n\t\t\t\t\tconst highlightReason = codePointHighlighter.shouldHighlightNonBasicASCII(str, word ? word.word : null);\n\n\t\t\t\t\tif (highlightReason !== SimpleHighlightReason.None) {\n\t\t\t\t\t\tif (highlightReason === SimpleHighlightReason.Ambiguous) {\n\t\t\t\t\t\t\tambiguousCharacterCount++;\n\t\t\t\t\t\t} else if (highlightReason === SimpleHighlightReason.Invisible) {\n\t\t\t\t\t\t\tinvisibleCharacterCount++;\n\t\t\t\t\t\t} else if (highlightReason === SimpleHighlightReason.NonBasicASCII) {\n\t\t\t\t\t\t\tnonBasicAsciiCharacterCount++;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tassertNever(highlightReason);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst MAX_RESULT_LENGTH = 1000;\n\t\t\t\t\t\tif (ranges.length >= MAX_RESULT_LENGTH) {\n\t\t\t\t\t\t\thasMore = true;\n\t\t\t\t\t\t\tbreak forLoop;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tranges.push(new Range(lineNumber, startIndex + 1, lineNumber, endIndex + 1));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} while (m);\n\t\t}\n\t\treturn {\n\t\t\tranges,\n\t\t\thasMore,\n\t\t\tambiguousCharacterCount,\n\t\t\tinvisibleCharacterCount,\n\t\t\tnonBasicAsciiCharacterCount\n\t\t};\n\t}\n\n\tpublic static computeUnicodeHighlightReason(char: string, options: UnicodeHighlighterOptions): UnicodeHighlighterReason | null {\n\t\tconst codePointHighlighter = new CodePointHighlighter(options);\n\n\t\tconst reason = codePointHighlighter.shouldHighlightNonBasicASCII(char, null);\n\t\tswitch (reason) {\n\t\t\tcase SimpleHighlightReason.None:\n\t\t\t\treturn null;\n\t\t\tcase SimpleHighlightReason.Invisible:\n\t\t\t\treturn { kind: UnicodeHighlighterReasonKind.Invisible };\n\n\t\t\tcase SimpleHighlightReason.Ambiguous: {\n\t\t\t\tconst codePoint = char.codePointAt(0)!;\n\t\t\t\tconst primaryConfusable = codePointHighlighter.ambiguousCharacters.getPrimaryConfusable(codePoint)!;\n\t\t\t\tconst notAmbiguousInLocales =\n\t\t\t\t\tstrings.AmbiguousCharacters.getLocales().filter(\n\t\t\t\t\t\t(l) =>\n\t\t\t\t\t\t\t!strings.AmbiguousCharacters.getInstance(\n\t\t\t\t\t\t\t\tnew Set([...options.allowedLocales, l])\n\t\t\t\t\t\t\t).isAmbiguous(codePoint)\n\t\t\t\t\t);\n\t\t\t\treturn { kind: UnicodeHighlighterReasonKind.Ambiguous, confusableWith: String.fromCodePoint(primaryConfusable), notAmbiguousInLocales };\n\t\t\t}\n\t\t\tcase SimpleHighlightReason.NonBasicASCII:\n\t\t\t\treturn { kind: UnicodeHighlighterReasonKind.NonBasicAscii };\n\t\t}\n\t}\n}\n\nfunction buildRegExpCharClassExpr(codePoints: number[], flags?: string): string {\n\tconst src = `[${strings.escapeRegExpCharacters(\n\t\tcodePoints.map((i) => String.fromCodePoint(i)).join('')\n\t)}]`;\n\treturn src;\n}\n\nexport const enum UnicodeHighlighterReasonKind {\n\tAmbiguous, Invisible, NonBasicAscii\n}\n\nexport type UnicodeHighlighterReason = {\n\tkind: UnicodeHighlighterReasonKind.Ambiguous;\n\tconfusableWith: string;\n\tnotAmbiguousInLocales: string[];\n} | {\n\tkind: UnicodeHighlighterReasonKind.Invisible;\n} | {\n\tkind: UnicodeHighlighterReasonKind.NonBasicAscii;\n};\n\nclass CodePointHighlighter {\n\tprivate readonly allowedCodePoints: Set<number>;\n\tpublic readonly ambiguousCharacters: strings.AmbiguousCharacters;\n\tconstructor(private readonly options: UnicodeHighlighterOptions) {\n\t\tthis.allowedCodePoints = new Set(options.allowedCodePoints);\n\t\tthis.ambiguousCharacters = strings.AmbiguousCharacters.getInstance(new Set(options.allowedLocales));\n\t}\n\n\tpublic getCandidateCodePoints(): Set<number> | 'allNonBasicAscii' {\n\t\tif (this.options.nonBasicASCII) {\n\t\t\treturn 'allNonBasicAscii';\n\t\t}\n\n\t\tconst set = new Set<number>();\n\n\t\tif (this.options.invisibleCharacters) {\n\t\t\tfor (const cp of strings.InvisibleCharacters.codePoints) {\n\t\t\t\tif (!isAllowedInvisibleCharacter(String.fromCodePoint(cp))) {\n\t\t\t\t\tset.add(cp);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.options.ambiguousCharacters) {\n\t\t\tfor (const cp of this.ambiguousCharacters.getConfusableCodePoints()) {\n\t\t\t\tset.add(cp);\n\t\t\t}\n\t\t}\n\n\t\tfor (const cp of this.allowedCodePoints) {\n\t\t\tset.delete(cp);\n\t\t}\n\n\t\treturn set;\n\t}\n\n\tpublic shouldHighlightNonBasicASCII(character: string, wordContext: string | null): SimpleHighlightReason {\n\t\tconst codePoint = character.codePointAt(0)!;\n\n\t\tif (this.allowedCodePoints.has(codePoint)) {\n\t\t\treturn SimpleHighlightReason.None;\n\t\t}\n\n\t\tif (this.options.nonBasicASCII) {\n\t\t\treturn SimpleHighlightReason.NonBasicASCII;\n\t\t}\n\n\t\tlet hasBasicASCIICharacters = false;\n\t\tlet hasNonConfusableNonBasicAsciiCharacter = false;\n\t\tif (wordContext) {\n\t\t\tfor (const char of wordContext) {\n\t\t\t\tconst codePoint = char.codePointAt(0)!;\n\t\t\t\tconst isBasicASCII = strings.isBasicASCII(char);\n\t\t\t\thasBasicASCIICharacters = hasBasicASCIICharacters || isBasicASCII;\n\n\t\t\t\tif (\n\t\t\t\t\t!isBasicASCII &&\n\t\t\t\t\t!this.ambiguousCharacters.isAmbiguous(codePoint) &&\n\t\t\t\t\t!strings.InvisibleCharacters.isInvisibleCharacter(codePoint)\n\t\t\t\t) {\n\t\t\t\t\thasNonConfusableNonBasicAsciiCharacter = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (\n\t\t\t/* Don't allow mixing weird looking characters with ASCII */ !hasBasicASCIICharacters &&\n\t\t\t/* Is there an obviously weird looking character? */ hasNonConfusableNonBasicAsciiCharacter\n\t\t) {\n\t\t\treturn SimpleHighlightReason.None;\n\t\t}\n\n\t\tif (this.options.invisibleCharacters) {\n\t\t\t// TODO check for emojis\n\t\t\tif (!isAllowedInvisibleCharacter(character) && strings.InvisibleCharacters.isInvisibleCharacter(codePoint)) {\n\t\t\t\treturn SimpleHighlightReason.Invisible;\n\t\t\t}\n\t\t}\n\n\t\tif (this.options.ambiguousCharacters) {\n\t\t\tif (this.ambiguousCharacters.isAmbiguous(codePoint)) {\n\t\t\t\treturn SimpleHighlightReason.Ambiguous;\n\t\t\t}\n\t\t}\n\n\t\treturn SimpleHighlightReason.None;\n\t}\n}\n\nfunction isAllowedInvisibleCharacter(character: string): boolean {\n\treturn character === ' ' || character === '\\n' || character === '\\t';\n}\n\nconst enum SimpleHighlightReason {\n\tNone,\n\tNonBasicASCII,\n\tInvisible,\n\tAmbiguous\n}\n\nexport interface IUnicodeCharacterSearcherTarget {\n\tgetLineCount(): number;\n\tgetLineContent(lineNumber: number): string;\n}\n\nexport interface UnicodeHighlighterOptions {\n\tnonBasicASCII: boolean;\n\tambiguousCharacters: boolean;\n\tinvisibleCharacters: boolean;\n\tincludeComments: boolean;\n\tincludeStrings: boolean;\n\tallowedCodePoints: number[];\n\tallowedLocales: string[];\n}\n"]}