{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/services/editorBaseApi.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAYhG,MAAa,GAAG;iBACQ,YAAO,kCAA+B;iBACtC,UAAK,gCAA6B;iBAClC,QAAG,6BAA2B;iBAC9B,YAAO,iCAA+B;QAEtD,MAAM,CAAC,KAAK,CAAC,SAAiB,EAAE,UAAkB;YACxD,OAAO,IAAA,cAAG,EAAM,SAAS,EAAE,UAAU,CAAC,CAAC;QACxC,CAAC;;IARF,kBASC;IAED,SAAgB,GAAG;QAClB,OAAO;YACN,MAAM,EAAE,SAAU;YAClB,SAAS,EAAE,SAAU;YACrB,uBAAuB,EAAE,kBAAG;YAC5B,OAAO,EAAE,WAAG;YACZ,OAAO,EAAE,eAAe,CAAC,OAAO;YAChC,MAAM,EAAE,GAAG;YACX,QAAQ,EAAE,cAAG;YACb,KAAK,EAAE,WAAG;YACV,SAAS,EAAO,eAAG;YACnB,kBAAkB,EAAE,eAAe,CAAC,kBAAkB;YACtD,cAAc,EAAE,eAAe,CAAC,cAAc;YAC9C,SAAS,EAAE,eAAe,CAAC,SAAS;YACpC,GAAG,EAAO,SAAG;YACb,KAAK,EAAE,eAAG;SACV,CAAC;IACH,CAAC;IAjBD,kBAiBC","file":"editorBaseApi.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { Emitter } from 'vs/base/common/event';\nimport { KeyChord, KeyMod as ConstKeyMod } from 'vs/base/common/keyCodes';\nimport { URI } from 'vs/base/common/uri';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { Token } from 'vs/editor/common/languages';\nimport * as standaloneEnums from 'vs/editor/common/standalone/standaloneEnums';\n\nexport class KeyMod {\n\tpublic static readonly CtrlCmd: number = ConstKeyMod.CtrlCmd;\n\tpublic static readonly Shift: number = ConstKeyMod.Shift;\n\tpublic static readonly Alt: number = ConstKeyMod.Alt;\n\tpublic static readonly WinCtrl: number = ConstKeyMod.WinCtrl;\n\n\tpublic static chord(firstPart: number, secondPart: number): number {\n\t\treturn KeyChord(firstPart, secondPart);\n\t}\n}\n\nexport function createMonacoBaseAPI(): typeof monaco {\n\treturn {\n\t\teditor: undefined!, // undefined override expected here\n\t\tlanguages: undefined!, // undefined override expected here\n\t\tCancellationTokenSource: CancellationTokenSource,\n\t\tEmitter: Emitter,\n\t\tKeyCode: standaloneEnums.KeyCode,\n\t\tKeyMod: KeyMod,\n\t\tPosition: Position,\n\t\tRange: Range,\n\t\tSelection: <any>Selection,\n\t\tSelectionDirection: standaloneEnums.SelectionDirection,\n\t\tMarkerSeverity: standaloneEnums.MarkerSeverity,\n\t\tMarkerTag: standaloneEnums.MarkerTag,\n\t\tUri: <any>URI,\n\t\tToken: Token\n\t};\n}\n"]}