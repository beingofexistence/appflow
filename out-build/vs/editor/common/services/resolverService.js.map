{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/services/resolverService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IASnF,QAAA,GAAG,GAAiB,IAAA,mBAAG,EAAgC,kBAAkB,CAAC,CAAC;IA8DxF,SAAgB,GAAG,CAAuB,KAAuB;QAChE,MAAM,SAAS,GAAG,KAAiC,CAAC;QAEpD,OAAO,CAAC,CAAC,SAAS,CAAC,eAAe,CAAC;IACpC,CAAC;IAJD,kBAIC","file":"resolverService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\nimport { IDisposable, IReference } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { ITextModel, ITextSnapshot } from 'vs/editor/common/model';\nimport { IEditorModel } from 'vs/platform/editor/common/editor';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport const ITextModelService = createDecorator<ITextModelService>('textModelService');\n\nexport interface ITextModelService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Provided a resource URI, it will return a model reference\n\t * which should be disposed once not needed anymore.\n\t */\n\tcreateModelReference(resource: URI): Promise<IReference<IResolvedTextEditorModel>>;\n\n\t/**\n\t * Registers a specific `scheme` content provider.\n\t */\n\tregisterTextModelContentProvider(scheme: string, provider: ITextModelContentProvider): IDisposable;\n\n\t/**\n\t * Check if the given resource can be resolved to a text model.\n\t */\n\tcanHandleResource(resource: URI): boolean;\n}\n\nexport interface ITextModelContentProvider {\n\n\t/**\n\t * Given a resource, return the content of the resource as `ITextModel`.\n\t */\n\tprovideTextContent(resource: URI): Promise<ITextModel | null> | null;\n}\n\nexport interface ITextEditorModel extends IEditorModel {\n\n\t/**\n\t * Provides access to the underlying `ITextModel`.\n\t */\n\treadonly textEditorModel: ITextModel | null;\n\n\t/**\n\t * Creates a snapshot of the model's contents.\n\t */\n\tcreateSnapshot(this: IResolvedTextEditorModel): ITextSnapshot;\n\tcreateSnapshot(this: ITextEditorModel): ITextSnapshot | null;\n\n\t/**\n\t * Signals if this model is readonly or not.\n\t */\n\tisReadonly(): boolean | IMarkdownString;\n\n\t/**\n\t * The language id of the text model if known.\n\t */\n\tgetLanguageId(): string | undefined;\n}\n\nexport interface IResolvedTextEditorModel extends ITextEditorModel {\n\n\t/**\n\t * Same as ITextEditorModel#textEditorModel, but never null.\n\t */\n\treadonly textEditorModel: ITextModel;\n}\n\nexport function isResolvedTextEditorModel(model: ITextEditorModel): model is IResolvedTextEditorModel {\n\tconst candidate = model as IResolvedTextEditorModel;\n\n\treturn !!candidate.textEditorModel;\n}\n"]}