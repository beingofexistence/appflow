{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/services/semanticTokensStylingService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAWzF,IAAM,IAAI,GAAV,MAAM,IAA6B,SAAQ,eAAG;QAMpD,YACiC,CAAkB,EACpB,CAAgB,EACX,CAAqB;YAExD,KAAK,EAAE,CAAC;YAJwB,MAAC,GAAD,CAAC,CAAiB;YACpB,MAAC,GAAD,CAAC,CAAe;YACX,MAAC,GAAD,CAAC,CAAoB;YAGxD,IAAI,CAAC,CAAC,GAAS,IAAI,OAAO,EAAyD,CAAC;YACpF,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAa,qBAAqB,CAAC,GAAG,EAAE;gBAC5D,IAAI,CAAC,CAAC,GAAS,IAAI,OAAO,EAAyD,CAAC;YACrF,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAEM,UAAU,CAAC,QAAgC;YACjD,IAAI,CAAC,IAAI,CAAC,CAAC,CAAO,GAAG,CAAC,QAAQ,CAAC,EAAE;gBAChC,IAAI,CAAC,CAAC,CAAO,GAAG,CAAC,QAAQ,EAAE,IAAI,mCAAG,CAA2B,QAAQ,CAAC,SAAS,EAAE,EAAE,IAAI,CAAC,CAAC,EAAc,IAAI,CAAC,CAAC,EAAiB,IAAI,CAAC,CAAC,CAAW,CAAC,CAAC;aACjJ;YACD,OAAO,IAAI,CAAC,CAAC,CAAO,GAAG,CAAC,QAAQ,CAAE,CAAC;QACpC,CAAC;KACD,CAAA;IAxBY,oBAAI;mBAAJ,IAAI;QAOd,WAAA,kBAAG,CAAA;QACH,WAAA,SAAG,CAAA;QACH,WAAA,cAAG,CAAA;OATO,IAAI,CAwBhB;IAED,IAAA,gBAAG,EAAe,2BAAG,EAA4B,IAAI,oCAAoD,CAAC","file":"semanticTokensStylingService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { DocumentTokensProvider } from 'vs/editor/common/services/model';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { SemanticTokensProviderStyling } from 'vs/editor/common/services/semanticTokensProviderStyling';\nimport { ISemanticTokensStylingService } from 'vs/editor/common/services/semanticTokensStyling';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\nexport class SemanticTokensStylingService extends Disposable implements ISemanticTokensStylingService {\n\n\tpublic _serviceBrand: undefined;\n\n\tprivate _caches: WeakMap<DocumentTokensProvider, SemanticTokensProviderStyling>;\n\n\tconstructor(\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t) {\n\t\tsuper();\n\t\tthis._caches = new WeakMap<DocumentTokensProvider, SemanticTokensProviderStyling>();\n\t\tthis._register(this._themeService.onDidColorThemeChange(() => {\n\t\t\tthis._caches = new WeakMap<DocumentTokensProvider, SemanticTokensProviderStyling>();\n\t\t}));\n\t}\n\n\tpublic getStyling(provider: DocumentTokensProvider): SemanticTokensProviderStyling {\n\t\tif (!this._caches.has(provider)) {\n\t\t\tthis._caches.set(provider, new SemanticTokensProviderStyling(provider.getLegend(), this._themeService, this._languageService, this._logService));\n\t\t}\n\t\treturn this._caches.get(provider)!;\n\t}\n}\n\nregisterSingleton(ISemanticTokensStylingService, SemanticTokensStylingService, InstantiationType.Delayed);\n"]}