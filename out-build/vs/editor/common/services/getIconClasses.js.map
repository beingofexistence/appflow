{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/services/getIconClasses.ts"],"names":[],"mappings":"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","file":"getIconClasses.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from 'vs/base/common/network';\nimport { DataUri } from 'vs/base/common/resources';\nimport { URI as uri } from 'vs/base/common/uri';\nimport { PLAINTEXT_LANGUAGE_ID } from 'vs/editor/common/languages/modesRegistry';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { FileKind } from 'vs/platform/files/common/files';\n\nconst fileIconDirectoryRegex = /(?:\\/|^)(?:([^\\/]+)\\/)?([^\\/]+)$/;\n\nexport function getIconClasses(modelService: IModelService, languageService: ILanguageService, resource: uri | undefined, fileKind?: FileKind): string[] {\n\n\t// we always set these base classes even if we do not have a path\n\tconst classes = fileKind === FileKind.ROOT_FOLDER ? ['rootfolder-icon'] : fileKind === FileKind.FOLDER ? ['folder-icon'] : ['file-icon'];\n\tif (resource) {\n\n\t\t// Get the path and name of the resource. For data-URIs, we need to parse specially\n\t\tlet name: string | undefined;\n\t\tif (resource.scheme === Schemas.data) {\n\t\t\tconst metadata = DataUri.parseMetaData(resource);\n\t\t\tname = metadata.get(DataUri.META_DATA_LABEL);\n\t\t} else {\n\t\t\tconst match = resource.path.match(fileIconDirectoryRegex);\n\t\t\tif (match) {\n\t\t\t\tname = cssEscape(match[2].toLowerCase());\n\t\t\t\tif (match[1]) {\n\t\t\t\t\tclasses.push(`${cssEscape(match[1].toLowerCase())}-name-dir-icon`); // parent directory\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tname = cssEscape(resource.authority.toLowerCase());\n\t\t\t}\n\t\t}\n\n\t\t// Folders\n\t\tif (fileKind === FileKind.FOLDER) {\n\t\t\tclasses.push(`${name}-name-folder-icon`);\n\t\t}\n\n\t\t// Files\n\t\telse {\n\n\t\t\t// Name & Extension(s)\n\t\t\tif (name) {\n\t\t\t\tclasses.push(`${name}-name-file-icon`);\n\t\t\t\tclasses.push(`name-file-icon`); // extra segment to increase file-name score\n\t\t\t\t// Avoid doing an explosive combination of extensions for very long filenames\n\t\t\t\t// (most file systems do not allow files > 255 length) with lots of `.` characters\n\t\t\t\t// https://github.com/microsoft/vscode/issues/116199\n\t\t\t\tif (name.length <= 255) {\n\t\t\t\t\tconst dotSegments = name.split('.');\n\t\t\t\t\tfor (let i = 1; i < dotSegments.length; i++) {\n\t\t\t\t\t\tclasses.push(`${dotSegments.slice(i).join('.')}-ext-file-icon`); // add each combination of all found extensions if more than one\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tclasses.push(`ext-file-icon`); // extra segment to increase file-ext score\n\t\t\t}\n\n\t\t\t// Detected Mode\n\t\t\tconst detectedLanguageId = detectLanguageId(modelService, languageService, resource);\n\t\t\tif (detectedLanguageId) {\n\t\t\t\tclasses.push(`${cssEscape(detectedLanguageId)}-lang-file-icon`);\n\t\t\t}\n\t\t}\n\t}\n\treturn classes;\n}\n\nexport function getIconClassesForLanguageId(languageId: string): string[] {\n\treturn ['file-icon', `${cssEscape(languageId)}-lang-file-icon`];\n}\n\nfunction detectLanguageId(modelService: IModelService, languageService: ILanguageService, resource: uri): string | null {\n\tif (!resource) {\n\t\treturn null; // we need a resource at least\n\t}\n\n\tlet languageId: string | null = null;\n\n\t// Data URI: check for encoded metadata\n\tif (resource.scheme === Schemas.data) {\n\t\tconst metadata = DataUri.parseMetaData(resource);\n\t\tconst mime = metadata.get(DataUri.META_DATA_MIME);\n\n\t\tif (mime) {\n\t\t\tlanguageId = languageService.getLanguageIdByMimeType(mime);\n\t\t}\n\t}\n\n\t// Any other URI: check for model if existing\n\telse {\n\t\tconst model = modelService.getModel(resource);\n\t\tif (model) {\n\t\t\tlanguageId = model.getLanguageId();\n\t\t}\n\t}\n\n\t// only take if the language id is specific (aka no just plain text)\n\tif (languageId && languageId !== PLAINTEXT_LANGUAGE_ID) {\n\t\treturn languageId;\n\t}\n\n\t// otherwise fallback to path based detection\n\treturn languageService.guessLanguageIdByFilepathOrFirstLine(resource);\n}\n\nfunction cssEscape(str: string): string {\n\treturn str.replace(/[\\11\\12\\14\\15\\40]/g, '/'); // HTML class names can not contain certain whitespace characters, use / instead, which doesn't exist in file names.\n}\n"]}