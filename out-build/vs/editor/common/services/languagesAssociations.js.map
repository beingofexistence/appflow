{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/services/languagesAssociations.ts"],"names":[],"mappings":"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","file":"languagesAssociations.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ParsedPattern, parse } from 'vs/base/common/glob';\nimport { Mimes } from 'vs/base/common/mime';\nimport { Schemas } from 'vs/base/common/network';\nimport { basename, posix } from 'vs/base/common/path';\nimport { DataUri } from 'vs/base/common/resources';\nimport { startsWithUTF8BOM } from 'vs/base/common/strings';\nimport { URI } from 'vs/base/common/uri';\nimport { PLAINTEXT_LANGUAGE_ID } from 'vs/editor/common/languages/modesRegistry';\n\nexport interface ILanguageAssociation {\n\treadonly id: string;\n\treadonly mime: string;\n\treadonly filename?: string;\n\treadonly extension?: string;\n\treadonly filepattern?: string;\n\treadonly firstline?: RegExp;\n}\n\ninterface ILanguageAssociationItem extends ILanguageAssociation {\n\treadonly userConfigured: boolean;\n\treadonly filenameLowercase?: string;\n\treadonly extensionLowercase?: string;\n\treadonly filepatternLowercase?: ParsedPattern;\n\treadonly filepatternOnPath?: boolean;\n}\n\nlet registeredAssociations: ILanguageAssociationItem[] = [];\nlet nonUserRegisteredAssociations: ILanguageAssociationItem[] = [];\nlet userRegisteredAssociations: ILanguageAssociationItem[] = [];\n\n/**\n * Associate a language to the registry (platform).\n * * **NOTE**: This association will lose over associations registered using `registerConfiguredLanguageAssociation`.\n * * **NOTE**: Use `clearPlatformLanguageAssociations` to remove all associations registered using this function.\n */\nexport function registerPlatformLanguageAssociation(association: ILanguageAssociation, warnOnOverwrite = false): void {\n\t_registerLanguageAssociation(association, false, warnOnOverwrite);\n}\n\n/**\n * Associate a language to the registry (configured).\n * * **NOTE**: This association will win over associations registered using `registerPlatformLanguageAssociation`.\n * * **NOTE**: Use `clearConfiguredLanguageAssociations` to remove all associations registered using this function.\n */\nexport function registerConfiguredLanguageAssociation(association: ILanguageAssociation): void {\n\t_registerLanguageAssociation(association, true, false);\n}\n\nfunction _registerLanguageAssociation(association: ILanguageAssociation, userConfigured: boolean, warnOnOverwrite: boolean): void {\n\n\t// Register\n\tconst associationItem = toLanguageAssociationItem(association, userConfigured);\n\tregisteredAssociations.push(associationItem);\n\tif (!associationItem.userConfigured) {\n\t\tnonUserRegisteredAssociations.push(associationItem);\n\t} else {\n\t\tuserRegisteredAssociations.push(associationItem);\n\t}\n\n\t// Check for conflicts unless this is a user configured association\n\tif (warnOnOverwrite && !associationItem.userConfigured) {\n\t\tregisteredAssociations.forEach(a => {\n\t\t\tif (a.mime === associationItem.mime || a.userConfigured) {\n\t\t\t\treturn; // same mime or userConfigured is ok\n\t\t\t}\n\n\t\t\tif (associationItem.extension && a.extension === associationItem.extension) {\n\t\t\t\tconsole.warn(`Overwriting extension <<${associationItem.extension}>> to now point to mime <<${associationItem.mime}>>`);\n\t\t\t}\n\n\t\t\tif (associationItem.filename && a.filename === associationItem.filename) {\n\t\t\t\tconsole.warn(`Overwriting filename <<${associationItem.filename}>> to now point to mime <<${associationItem.mime}>>`);\n\t\t\t}\n\n\t\t\tif (associationItem.filepattern && a.filepattern === associationItem.filepattern) {\n\t\t\t\tconsole.warn(`Overwriting filepattern <<${associationItem.filepattern}>> to now point to mime <<${associationItem.mime}>>`);\n\t\t\t}\n\n\t\t\tif (associationItem.firstline && a.firstline === associationItem.firstline) {\n\t\t\t\tconsole.warn(`Overwriting firstline <<${associationItem.firstline}>> to now point to mime <<${associationItem.mime}>>`);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction toLanguageAssociationItem(association: ILanguageAssociation, userConfigured: boolean): ILanguageAssociationItem {\n\treturn {\n\t\tid: association.id,\n\t\tmime: association.mime,\n\t\tfilename: association.filename,\n\t\textension: association.extension,\n\t\tfilepattern: association.filepattern,\n\t\tfirstline: association.firstline,\n\t\tuserConfigured: userConfigured,\n\t\tfilenameLowercase: association.filename ? association.filename.toLowerCase() : undefined,\n\t\textensionLowercase: association.extension ? association.extension.toLowerCase() : undefined,\n\t\tfilepatternLowercase: association.filepattern ? parse(association.filepattern.toLowerCase()) : undefined,\n\t\tfilepatternOnPath: association.filepattern ? association.filepattern.indexOf(posix.sep) >= 0 : false\n\t};\n}\n\n/**\n * Clear language associations from the registry (platform).\n */\nexport function clearPlatformLanguageAssociations(): void {\n\tregisteredAssociations = registeredAssociations.filter(a => a.userConfigured);\n\tnonUserRegisteredAssociations = [];\n}\n\n/**\n * Clear language associations from the registry (configured).\n */\nexport function clearConfiguredLanguageAssociations(): void {\n\tregisteredAssociations = registeredAssociations.filter(a => !a.userConfigured);\n\tuserRegisteredAssociations = [];\n}\n\ninterface IdAndMime {\n\tid: string;\n\tmime: string;\n}\n\n/**\n * Given a file, return the best matching mime types for it\n * based on the registered language associations.\n */\nexport function getMimeTypes(resource: URI | null, firstLine?: string): string[] {\n\treturn getAssociations(resource, firstLine).map(item => item.mime);\n}\n\n/**\n * @see `getMimeTypes`\n */\nexport function getLanguageIds(resource: URI | null, firstLine?: string): string[] {\n\treturn getAssociations(resource, firstLine).map(item => item.id);\n}\n\nfunction getAssociations(resource: URI | null, firstLine?: string): IdAndMime[] {\n\tlet path: string | undefined;\n\tif (resource) {\n\t\tswitch (resource.scheme) {\n\t\t\tcase Schemas.file:\n\t\t\t\tpath = resource.fsPath;\n\t\t\t\tbreak;\n\t\t\tcase Schemas.data: {\n\t\t\t\tconst metadata = DataUri.parseMetaData(resource);\n\t\t\t\tpath = metadata.get(DataUri.META_DATA_LABEL);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase Schemas.vscodeNotebookCell:\n\t\t\t\t// File path not relevant for language detection of cell\n\t\t\t\tpath = undefined;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tpath = resource.path;\n\t\t}\n\t}\n\n\tif (!path) {\n\t\treturn [{ id: 'unknown', mime: Mimes.unknown }];\n\t}\n\n\tpath = path.toLowerCase();\n\n\tconst filename = basename(path);\n\n\t// 1.) User configured mappings have highest priority\n\tconst configuredLanguage = getAssociationByPath(path, filename, userRegisteredAssociations);\n\tif (configuredLanguage) {\n\t\treturn [configuredLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n\t}\n\n\t// 2.) Registered mappings have middle priority\n\tconst registeredLanguage = getAssociationByPath(path, filename, nonUserRegisteredAssociations);\n\tif (registeredLanguage) {\n\t\treturn [registeredLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n\t}\n\n\t// 3.) Firstline has lowest priority\n\tif (firstLine) {\n\t\tconst firstlineLanguage = getAssociationByFirstline(firstLine);\n\t\tif (firstlineLanguage) {\n\t\t\treturn [firstlineLanguage, { id: PLAINTEXT_LANGUAGE_ID, mime: Mimes.text }];\n\t\t}\n\t}\n\n\treturn [{ id: 'unknown', mime: Mimes.unknown }];\n}\n\nfunction getAssociationByPath(path: string, filename: string, associations: ILanguageAssociationItem[]): ILanguageAssociationItem | undefined {\n\tlet filenameMatch: ILanguageAssociationItem | undefined = undefined;\n\tlet patternMatch: ILanguageAssociationItem | undefined = undefined;\n\tlet extensionMatch: ILanguageAssociationItem | undefined = undefined;\n\n\t// We want to prioritize associations based on the order they are registered so that the last registered\n\t// association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n\tfor (let i = associations.length - 1; i >= 0; i--) {\n\t\tconst association = associations[i];\n\n\t\t// First exact name match\n\t\tif (filename === association.filenameLowercase) {\n\t\t\tfilenameMatch = association;\n\t\t\tbreak; // take it!\n\t\t}\n\n\t\t// Longest pattern match\n\t\tif (association.filepattern) {\n\t\t\tif (!patternMatch || association.filepattern.length > patternMatch.filepattern!.length) {\n\t\t\t\tconst target = association.filepatternOnPath ? path : filename; // match on full path if pattern contains path separator\n\t\t\t\tif (association.filepatternLowercase?.(target)) {\n\t\t\t\t\tpatternMatch = association;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Longest extension match\n\t\tif (association.extension) {\n\t\t\tif (!extensionMatch || association.extension.length > extensionMatch.extension!.length) {\n\t\t\t\tif (filename.endsWith(association.extensionLowercase!)) {\n\t\t\t\t\textensionMatch = association;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// 1.) Exact name match has second highest priority\n\tif (filenameMatch) {\n\t\treturn filenameMatch;\n\t}\n\n\t// 2.) Match on pattern\n\tif (patternMatch) {\n\t\treturn patternMatch;\n\t}\n\n\t// 3.) Match on extension comes next\n\tif (extensionMatch) {\n\t\treturn extensionMatch;\n\t}\n\n\treturn undefined;\n}\n\nfunction getAssociationByFirstline(firstLine: string): ILanguageAssociationItem | undefined {\n\tif (startsWithUTF8BOM(firstLine)) {\n\t\tfirstLine = firstLine.substr(1);\n\t}\n\n\tif (firstLine.length > 0) {\n\n\t\t// We want to prioritize associations based on the order they are registered so that the last registered\n\t\t// association wins over all other. This is for https://github.com/microsoft/vscode/issues/20074\n\t\tfor (let i = registeredAssociations.length - 1; i >= 0; i--) {\n\t\t\tconst association = registeredAssociations[i];\n\t\t\tif (!association.firstline) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst matches = firstLine.match(association.firstline);\n\t\t\tif (matches && matches.length > 0) {\n\t\t\t\treturn association;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn undefined;\n}\n"]}