{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/languages/autoIndent.ts"],"names":[],"mappings":"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","file":"autoIndent.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from 'vs/base/common/strings';\nimport { Range } from 'vs/editor/common/core/range';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IndentAction } from 'vs/editor/common/languages/languageConfiguration';\nimport { createScopedLineTokens } from 'vs/editor/common/languages/supports';\nimport { IndentConsts, IndentRulesSupport } from 'vs/editor/common/languages/supports/indentRules';\nimport { EditorAutoIndentStrategy } from 'vs/editor/common/config/editorOptions';\nimport { getScopedLineTokens, ILanguageConfigurationService } from 'vs/editor/common/languages/languageConfigurationRegistry';\nimport { LineTokens } from 'vs/editor/common/tokens/lineTokens';\n\nexport interface IVirtualModel {\n\ttokenization: {\n\t\tgetLineTokens(lineNumber: number): LineTokens;\n\t\tgetLanguageId(): string;\n\t\tgetLanguageIdAtPosition(lineNumber: number, column: number): string;\n\t};\n\tgetLineContent(lineNumber: number): string;\n}\n\nexport interface IIndentConverter {\n\tshiftIndent(indentation: string): string;\n\tunshiftIndent(indentation: string): string;\n\tnormalizeIndentation?(indentation: string): string;\n}\n\n/**\n * Get nearest preceding line which doesn't match unIndentPattern or contains all whitespace.\n * Result:\n * -1: run into the boundary of embedded languages\n * 0: every line above are invalid\n * else: nearest preceding line of the same language\n */\nfunction getPrecedingValidLine(model: IVirtualModel, lineNumber: number, indentRulesSupport: IndentRulesSupport) {\n\tconst languageId = model.tokenization.getLanguageIdAtPosition(lineNumber, 0);\n\tif (lineNumber > 1) {\n\t\tlet lastLineNumber: number;\n\t\tlet resultLineNumber = -1;\n\n\t\tfor (lastLineNumber = lineNumber - 1; lastLineNumber >= 1; lastLineNumber--) {\n\t\t\tif (model.tokenization.getLanguageIdAtPosition(lastLineNumber, 0) !== languageId) {\n\t\t\t\treturn resultLineNumber;\n\t\t\t}\n\t\t\tconst text = model.getLineContent(lastLineNumber);\n\t\t\tif (indentRulesSupport.shouldIgnore(text) || /^\\s+$/.test(text) || text === '') {\n\t\t\t\tresultLineNumber = lastLineNumber;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\treturn lastLineNumber;\n\t\t}\n\t}\n\n\treturn -1;\n}\n\n/**\n * Get inherited indentation from above lines.\n * 1. Find the nearest preceding line which doesn't match unIndentedLinePattern.\n * 2. If this line matches indentNextLinePattern or increaseIndentPattern, it means that the indent level of `lineNumber` should be 1 greater than this line.\n * 3. If this line doesn't match any indent rules\n *   a. check whether the line above it matches indentNextLinePattern\n *   b. If not, the indent level of this line is the result\n *   c. If so, it means the indent of this line is *temporary*, go upward utill we find a line whose indent is not temporary (the same workflow a -> b -> c).\n * 4. Otherwise, we fail to get an inherited indent from aboves. Return null and we should not touch the indent of `lineNumber`\n *\n * This function only return the inherited indent based on above lines, it doesn't check whether current line should decrease or not.\n */\nexport function getInheritIndentForLine(\n\tautoIndent: EditorAutoIndentStrategy,\n\tmodel: IVirtualModel,\n\tlineNumber: number,\n\thonorIntentialIndent: boolean = true,\n\tlanguageConfigurationService: ILanguageConfigurationService\n): { indentation: string; action: IndentAction | null; line?: number } | null {\n\tif (autoIndent < EditorAutoIndentStrategy.Full) {\n\t\treturn null;\n\t}\n\n\tconst indentRulesSupport = languageConfigurationService.getLanguageConfiguration(model.tokenization.getLanguageId()).indentRulesSupport;\n\tif (!indentRulesSupport) {\n\t\treturn null;\n\t}\n\n\tif (lineNumber <= 1) {\n\t\treturn {\n\t\t\tindentation: '',\n\t\t\taction: null\n\t\t};\n\t}\n\n\t// Use no indent if this is the first non-blank line\n\tfor (let priorLineNumber = lineNumber - 1; priorLineNumber > 0; priorLineNumber--) {\n\t\tif (model.getLineContent(priorLineNumber) !== '') {\n\t\t\tbreak;\n\t\t}\n\t\tif (priorLineNumber === 1) {\n\t\t\treturn {\n\t\t\t\tindentation: '',\n\t\t\t\taction: null\n\t\t\t};\n\t\t}\n\t}\n\n\tconst precedingUnIgnoredLine = getPrecedingValidLine(model, lineNumber, indentRulesSupport);\n\tif (precedingUnIgnoredLine < 0) {\n\t\treturn null;\n\t} else if (precedingUnIgnoredLine < 1) {\n\t\treturn {\n\t\t\tindentation: '',\n\t\t\taction: null\n\t\t};\n\t}\n\n\tconst precedingUnIgnoredLineContent = model.getLineContent(precedingUnIgnoredLine);\n\tif (indentRulesSupport.shouldIncrease(precedingUnIgnoredLineContent) || indentRulesSupport.shouldIndentNextLine(precedingUnIgnoredLineContent)) {\n\t\treturn {\n\t\t\tindentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\n\t\t\taction: IndentAction.Indent,\n\t\t\tline: precedingUnIgnoredLine\n\t\t};\n\t} else if (indentRulesSupport.shouldDecrease(precedingUnIgnoredLineContent)) {\n\t\treturn {\n\t\t\tindentation: strings.getLeadingWhitespace(precedingUnIgnoredLineContent),\n\t\t\taction: null,\n\t\t\tline: precedingUnIgnoredLine\n\t\t};\n\t} else {\n\t\t// precedingUnIgnoredLine can not be ignored.\n\t\t// it doesn't increase indent of following lines\n\t\t// it doesn't increase just next line\n\t\t// so current line is not affect by precedingUnIgnoredLine\n\t\t// and then we should get a correct inheritted indentation from above lines\n\t\tif (precedingUnIgnoredLine === 1) {\n\t\t\treturn {\n\t\t\t\tindentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\n\t\t\t\taction: null,\n\t\t\t\tline: precedingUnIgnoredLine\n\t\t\t};\n\t\t}\n\n\t\tconst previousLine = precedingUnIgnoredLine - 1;\n\n\t\tconst previousLineIndentMetadata = indentRulesSupport.getIndentMetadata(model.getLineContent(previousLine));\n\t\tif (!(previousLineIndentMetadata & (IndentConsts.INCREASE_MASK | IndentConsts.DECREASE_MASK)) &&\n\t\t\t(previousLineIndentMetadata & IndentConsts.INDENT_NEXTLINE_MASK)) {\n\t\t\tlet stopLine = 0;\n\t\t\tfor (let i = previousLine - 1; i > 0; i--) {\n\t\t\t\tif (indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tstopLine = i;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tindentation: strings.getLeadingWhitespace(model.getLineContent(stopLine + 1)),\n\t\t\t\taction: null,\n\t\t\t\tline: stopLine + 1\n\t\t\t};\n\t\t}\n\n\t\tif (honorIntentialIndent) {\n\t\t\treturn {\n\t\t\t\tindentation: strings.getLeadingWhitespace(model.getLineContent(precedingUnIgnoredLine)),\n\t\t\t\taction: null,\n\t\t\t\tline: precedingUnIgnoredLine\n\t\t\t};\n\t\t} else {\n\t\t\t// search from precedingUnIgnoredLine until we find one whose indent is not temporary\n\t\t\tfor (let i = precedingUnIgnoredLine; i > 0; i--) {\n\t\t\t\tconst lineContent = model.getLineContent(i);\n\t\t\t\tif (indentRulesSupport.shouldIncrease(lineContent)) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tindentation: strings.getLeadingWhitespace(lineContent),\n\t\t\t\t\t\taction: IndentAction.Indent,\n\t\t\t\t\t\tline: i\n\t\t\t\t\t};\n\t\t\t\t} else if (indentRulesSupport.shouldIndentNextLine(lineContent)) {\n\t\t\t\t\tlet stopLine = 0;\n\t\t\t\t\tfor (let j = i - 1; j > 0; j--) {\n\t\t\t\t\t\tif (indentRulesSupport.shouldIndentNextLine(model.getLineContent(i))) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstopLine = j;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tindentation: strings.getLeadingWhitespace(model.getLineContent(stopLine + 1)),\n\t\t\t\t\t\taction: null,\n\t\t\t\t\t\tline: stopLine + 1\n\t\t\t\t\t};\n\t\t\t\t} else if (indentRulesSupport.shouldDecrease(lineContent)) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tindentation: strings.getLeadingWhitespace(lineContent),\n\t\t\t\t\t\taction: null,\n\t\t\t\t\t\tline: i\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tindentation: strings.getLeadingWhitespace(model.getLineContent(1)),\n\t\t\t\taction: null,\n\t\t\t\tline: 1\n\t\t\t};\n\t\t}\n\t}\n}\n\nexport function getGoodIndentForLine(\n\tautoIndent: EditorAutoIndentStrategy,\n\tvirtualModel: IVirtualModel,\n\tlanguageId: string,\n\tlineNumber: number,\n\tindentConverter: IIndentConverter,\n\tlanguageConfigurationService: ILanguageConfigurationService\n): string | null {\n\tif (autoIndent < EditorAutoIndentStrategy.Full) {\n\t\treturn null;\n\t}\n\n\tconst richEditSupport = languageConfigurationService.getLanguageConfiguration(languageId);\n\tif (!richEditSupport) {\n\t\treturn null;\n\t}\n\n\tconst indentRulesSupport = languageConfigurationService.getLanguageConfiguration(languageId).indentRulesSupport;\n\tif (!indentRulesSupport) {\n\t\treturn null;\n\t}\n\n\tconst indent = getInheritIndentForLine(autoIndent, virtualModel, lineNumber, undefined, languageConfigurationService);\n\tconst lineContent = virtualModel.getLineContent(lineNumber);\n\n\tif (indent) {\n\t\tconst inheritLine = indent.line;\n\t\tif (inheritLine !== undefined) {\n\t\t\t// Apply enter action as long as there are only whitespace lines between inherited line and this line.\n\t\t\tlet shouldApplyEnterRules = true;\n\t\t\tfor (let inBetweenLine = inheritLine; inBetweenLine < lineNumber - 1; inBetweenLine++) {\n\t\t\t\tif (!/^\\s*$/.test(virtualModel.getLineContent(inBetweenLine))) {\n\t\t\t\t\tshouldApplyEnterRules = false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (shouldApplyEnterRules) {\n\t\t\t\tconst enterResult = richEditSupport.onEnter(autoIndent, '', virtualModel.getLineContent(inheritLine), '');\n\n\t\t\t\tif (enterResult) {\n\t\t\t\t\tlet indentation = strings.getLeadingWhitespace(virtualModel.getLineContent(inheritLine));\n\n\t\t\t\t\tif (enterResult.removeText) {\n\t\t\t\t\t\tindentation = indentation.substring(0, indentation.length - enterResult.removeText);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (\n\t\t\t\t\t\t(enterResult.indentAction === IndentAction.Indent) ||\n\t\t\t\t\t\t(enterResult.indentAction === IndentAction.IndentOutdent)\n\t\t\t\t\t) {\n\t\t\t\t\t\tindentation = indentConverter.shiftIndent(indentation);\n\t\t\t\t\t} else if (enterResult.indentAction === IndentAction.Outdent) {\n\t\t\t\t\t\tindentation = indentConverter.unshiftIndent(indentation);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (indentRulesSupport.shouldDecrease(lineContent)) {\n\t\t\t\t\t\tindentation = indentConverter.unshiftIndent(indentation);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (enterResult.appendText) {\n\t\t\t\t\t\tindentation += enterResult.appendText;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn strings.getLeadingWhitespace(indentation);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (indentRulesSupport.shouldDecrease(lineContent)) {\n\t\t\tif (indent.action === IndentAction.Indent) {\n\t\t\t\treturn indent.indentation;\n\t\t\t} else {\n\t\t\t\treturn indentConverter.unshiftIndent(indent.indentation);\n\t\t\t}\n\t\t} else {\n\t\t\tif (indent.action === IndentAction.Indent) {\n\t\t\t\treturn indentConverter.shiftIndent(indent.indentation);\n\t\t\t} else {\n\t\t\t\treturn indent.indentation;\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n}\n\nexport function getIndentForEnter(\n\tautoIndent: EditorAutoIndentStrategy,\n\tmodel: ITextModel,\n\trange: Range,\n\tindentConverter: IIndentConverter,\n\tlanguageConfigurationService: ILanguageConfigurationService\n): { beforeEnter: string; afterEnter: string } | null {\n\tif (autoIndent < EditorAutoIndentStrategy.Full) {\n\t\treturn null;\n\t}\n\tmodel.tokenization.forceTokenization(range.startLineNumber);\n\tconst lineTokens = model.tokenization.getLineTokens(range.startLineNumber);\n\tconst scopedLineTokens = createScopedLineTokens(lineTokens, range.startColumn - 1);\n\tconst scopedLineText = scopedLineTokens.getLineContent();\n\n\tlet embeddedLanguage = false;\n\tlet beforeEnterText: string;\n\tif (scopedLineTokens.firstCharOffset > 0 && lineTokens.getLanguageId(0) !== scopedLineTokens.languageId) {\n\t\t// we are in the embeded language content\n\t\tembeddedLanguage = true; // if embeddedLanguage is true, then we don't touch the indentation of current line\n\t\tbeforeEnterText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n\t} else {\n\t\tbeforeEnterText = lineTokens.getLineContent().substring(0, range.startColumn - 1);\n\t}\n\n\tlet afterEnterText: string;\n\tif (range.isEmpty()) {\n\t\tafterEnterText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n\t} else {\n\t\tconst endScopedLineTokens = getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n\t\tafterEnterText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n\t}\n\n\tconst indentRulesSupport = languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).indentRulesSupport;\n\tif (!indentRulesSupport) {\n\t\treturn null;\n\t}\n\n\tconst beforeEnterResult = beforeEnterText;\n\tconst beforeEnterIndent = strings.getLeadingWhitespace(beforeEnterText);\n\n\tconst virtualModel: IVirtualModel = {\n\t\ttokenization: {\n\t\t\tgetLineTokens: (lineNumber: number) => {\n\t\t\t\treturn model.tokenization.getLineTokens(lineNumber);\n\t\t\t},\n\t\t\tgetLanguageId: () => {\n\t\t\t\treturn model.getLanguageId();\n\t\t\t},\n\t\t\tgetLanguageIdAtPosition: (lineNumber: number, column: number) => {\n\t\t\t\treturn model.getLanguageIdAtPosition(lineNumber, column);\n\t\t\t},\n\t\t},\n\t\tgetLineContent: (lineNumber: number) => {\n\t\t\tif (lineNumber === range.startLineNumber) {\n\t\t\t\treturn beforeEnterResult;\n\t\t\t} else {\n\t\t\t\treturn model.getLineContent(lineNumber);\n\t\t\t}\n\t\t}\n\t};\n\n\tconst currentLineIndent = strings.getLeadingWhitespace(lineTokens.getLineContent());\n\tconst afterEnterAction = getInheritIndentForLine(autoIndent, virtualModel, range.startLineNumber + 1, undefined, languageConfigurationService);\n\tif (!afterEnterAction) {\n\t\tconst beforeEnter = embeddedLanguage ? currentLineIndent : beforeEnterIndent;\n\t\treturn {\n\t\t\tbeforeEnter: beforeEnter,\n\t\t\tafterEnter: beforeEnter\n\t\t};\n\t}\n\n\tlet afterEnterIndent = embeddedLanguage ? currentLineIndent : afterEnterAction.indentation;\n\n\tif (afterEnterAction.action === IndentAction.Indent) {\n\t\tafterEnterIndent = indentConverter.shiftIndent(afterEnterIndent);\n\t}\n\n\tif (indentRulesSupport.shouldDecrease(afterEnterText)) {\n\t\tafterEnterIndent = indentConverter.unshiftIndent(afterEnterIndent);\n\t}\n\n\treturn {\n\t\tbeforeEnter: embeddedLanguage ? currentLineIndent : beforeEnterIndent,\n\t\tafterEnter: afterEnterIndent\n\t};\n}\n\n/**\n * We should always allow intentional indentation. It means, if users change the indentation of `lineNumber` and the content of\n * this line doesn't match decreaseIndentPattern, we should not adjust the indentation.\n */\nexport function getIndentActionForType(\n\tautoIndent: EditorAutoIndentStrategy,\n\tmodel: ITextModel,\n\trange: Range,\n\tch: string,\n\tindentConverter: IIndentConverter,\n\tlanguageConfigurationService: ILanguageConfigurationService\n): string | null {\n\tif (autoIndent < EditorAutoIndentStrategy.Full) {\n\t\treturn null;\n\t}\n\tconst scopedLineTokens = getScopedLineTokens(model, range.startLineNumber, range.startColumn);\n\n\tif (scopedLineTokens.firstCharOffset) {\n\t\t// this line has mixed languages and indentation rules will not work\n\t\treturn null;\n\t}\n\n\tconst indentRulesSupport = languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).indentRulesSupport;\n\tif (!indentRulesSupport) {\n\t\treturn null;\n\t}\n\n\tconst scopedLineText = scopedLineTokens.getLineContent();\n\tconst beforeTypeText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n\n\t// selection support\n\tlet afterTypeText: string;\n\tif (range.isEmpty()) {\n\t\tafterTypeText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n\t} else {\n\t\tconst endScopedLineTokens = getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n\t\tafterTypeText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n\t}\n\n\t// If previous content already matches decreaseIndentPattern, it means indentation of this line should already be adjusted\n\t// Users might change the indentation by purpose and we should honor that instead of readjusting.\n\tif (!indentRulesSupport.shouldDecrease(beforeTypeText + afterTypeText) && indentRulesSupport.shouldDecrease(beforeTypeText + ch + afterTypeText)) {\n\t\t// after typing `ch`, the content matches decreaseIndentPattern, we should adjust the indent to a good manner.\n\t\t// 1. Get inherited indent action\n\t\tconst r = getInheritIndentForLine(autoIndent, model, range.startLineNumber, false, languageConfigurationService);\n\t\tif (!r) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet indentation = r.indentation;\n\t\tif (r.action !== IndentAction.Indent) {\n\t\t\tindentation = indentConverter.unshiftIndent(indentation);\n\t\t}\n\n\t\treturn indentation;\n\t}\n\n\treturn null;\n}\n\nexport function getIndentMetadata(\n\tmodel: ITextModel,\n\tlineNumber: number,\n\tlanguageConfigurationService: ILanguageConfigurationService\n): number | null {\n\tconst indentRulesSupport = languageConfigurationService.getLanguageConfiguration(model.getLanguageId()).indentRulesSupport;\n\tif (!indentRulesSupport) {\n\t\treturn null;\n\t}\n\tif (lineNumber < 1 || lineNumber > model.getLineCount()) {\n\t\treturn null;\n\t}\n\treturn indentRulesSupport.getIndentMetadata(model.getLineContent(lineNumber));\n}\n"]}