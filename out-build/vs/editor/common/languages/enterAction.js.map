{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/languages/enterAction.ts"],"names":[],"mappings":"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","file":"enterAction.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from 'vs/editor/common/core/range';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IndentAction, CompleteEnterAction } from 'vs/editor/common/languages/languageConfiguration';\nimport { EditorAutoIndentStrategy } from 'vs/editor/common/config/editorOptions';\nimport { getIndentationAtPosition, getScopedLineTokens, ILanguageConfigurationService } from 'vs/editor/common/languages/languageConfigurationRegistry';\n\nexport function getEnterAction(\n\tautoIndent: EditorAutoIndentStrategy,\n\tmodel: ITextModel,\n\trange: Range,\n\tlanguageConfigurationService: ILanguageConfigurationService\n): CompleteEnterAction | null {\n\tconst scopedLineTokens = getScopedLineTokens(model, range.startLineNumber, range.startColumn);\n\tconst richEditSupport = languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId);\n\tif (!richEditSupport) {\n\t\treturn null;\n\t}\n\n\tconst scopedLineText = scopedLineTokens.getLineContent();\n\tconst beforeEnterText = scopedLineText.substr(0, range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n\n\t// selection support\n\tlet afterEnterText: string;\n\tif (range.isEmpty()) {\n\t\tafterEnterText = scopedLineText.substr(range.startColumn - 1 - scopedLineTokens.firstCharOffset);\n\t} else {\n\t\tconst endScopedLineTokens = getScopedLineTokens(model, range.endLineNumber, range.endColumn);\n\t\tafterEnterText = endScopedLineTokens.getLineContent().substr(range.endColumn - 1 - scopedLineTokens.firstCharOffset);\n\t}\n\n\tlet previousLineText = '';\n\tif (range.startLineNumber > 1 && scopedLineTokens.firstCharOffset === 0) {\n\t\t// This is not the first line and the entire line belongs to this mode\n\t\tconst oneLineAboveScopedLineTokens = getScopedLineTokens(model, range.startLineNumber - 1);\n\t\tif (oneLineAboveScopedLineTokens.languageId === scopedLineTokens.languageId) {\n\t\t\t// The line above ends with text belonging to the same mode\n\t\t\tpreviousLineText = oneLineAboveScopedLineTokens.getLineContent();\n\t\t}\n\t}\n\n\tconst enterResult = richEditSupport.onEnter(autoIndent, previousLineText, beforeEnterText, afterEnterText);\n\tif (!enterResult) {\n\t\treturn null;\n\t}\n\n\tconst indentAction = enterResult.indentAction;\n\tlet appendText = enterResult.appendText;\n\tconst removeText = enterResult.removeText || 0;\n\n\t// Here we add `\\t` to appendText first because enterAction is leveraging appendText and removeText to change indentation.\n\tif (!appendText) {\n\t\tif (\n\t\t\t(indentAction === IndentAction.Indent) ||\n\t\t\t(indentAction === IndentAction.IndentOutdent)\n\t\t) {\n\t\t\tappendText = '\\t';\n\t\t} else {\n\t\t\tappendText = '';\n\t\t}\n\t} else if (indentAction === IndentAction.Indent) {\n\t\tappendText = '\\t' + appendText;\n\t}\n\n\tlet indentation = getIndentationAtPosition(model, range.startLineNumber, range.startColumn);\n\tif (removeText) {\n\t\tindentation = indentation.substring(0, indentation.length - removeText);\n\t}\n\n\treturn {\n\t\tindentAction: indentAction,\n\t\tappendText: appendText,\n\t\tremoveText: removeText,\n\t\tindentation: indentation\n\t};\n}\n"]}