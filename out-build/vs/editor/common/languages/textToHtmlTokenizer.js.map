{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/languages/textToHtmlTokenizer.ts"],"names":[],"mappings":"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","file":"textToHtmlTokenizer.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport * as strings from 'vs/base/common/strings';\nimport { IViewLineTokens, LineTokens } from 'vs/editor/common/tokens/lineTokens';\nimport { ILanguageIdCodec, IState, ITokenizationSupport, TokenizationRegistry } from 'vs/editor/common/languages';\nimport { LanguageId } from 'vs/editor/common/encodedTokenAttributes';\nimport { NullState, nullTokenizeEncoded } from 'vs/editor/common/languages/nullTokenize';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\n\nexport type IReducedTokenizationSupport = Omit<ITokenizationSupport, 'tokenize'>;\n\nconst fallback: IReducedTokenizationSupport = {\n\tgetInitialState: () => NullState,\n\ttokenizeEncoded: (buffer: string, hasEOL: boolean, state: IState) => nullTokenizeEncoded(LanguageId.Null, state)\n};\n\nexport function tokenizeToStringSync(languageService: ILanguageService, text: string, languageId: string): string {\n\treturn _tokenizeToString(text, languageService.languageIdCodec, TokenizationRegistry.get(languageId) || fallback);\n}\n\nexport async function tokenizeToString(languageService: ILanguageService, text: string, languageId: string | null): Promise<string> {\n\tif (!languageId) {\n\t\treturn _tokenizeToString(text, languageService.languageIdCodec, fallback);\n\t}\n\tconst tokenizationSupport = await TokenizationRegistry.getOrCreate(languageId);\n\treturn _tokenizeToString(text, languageService.languageIdCodec, tokenizationSupport || fallback);\n}\n\nexport function tokenizeLineToHTML(text: string, viewLineTokens: IViewLineTokens, colorMap: string[], startOffset: number, endOffset: number, tabSize: number, useNbsp: boolean): string {\n\tlet result = `<div>`;\n\tlet charIndex = startOffset;\n\tlet tabsCharDelta = 0;\n\n\tlet prevIsSpace = true;\n\n\tfor (let tokenIndex = 0, tokenCount = viewLineTokens.getCount(); tokenIndex < tokenCount; tokenIndex++) {\n\t\tconst tokenEndIndex = viewLineTokens.getEndOffset(tokenIndex);\n\n\t\tif (tokenEndIndex <= startOffset) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tlet partContent = '';\n\n\t\tfor (; charIndex < tokenEndIndex && charIndex < endOffset; charIndex++) {\n\t\t\tconst charCode = text.charCodeAt(charIndex);\n\n\t\t\tswitch (charCode) {\n\t\t\t\tcase CharCode.Tab: {\n\t\t\t\t\tlet insertSpacesCount = tabSize - (charIndex + tabsCharDelta) % tabSize;\n\t\t\t\t\ttabsCharDelta += insertSpacesCount - 1;\n\t\t\t\t\twhile (insertSpacesCount > 0) {\n\t\t\t\t\t\tif (useNbsp && prevIsSpace) {\n\t\t\t\t\t\t\tpartContent += '&#160;';\n\t\t\t\t\t\t\tprevIsSpace = false;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpartContent += ' ';\n\t\t\t\t\t\t\tprevIsSpace = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tinsertSpacesCount--;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase CharCode.LessThan:\n\t\t\t\t\tpartContent += '&lt;';\n\t\t\t\t\tprevIsSpace = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CharCode.GreaterThan:\n\t\t\t\t\tpartContent += '&gt;';\n\t\t\t\t\tprevIsSpace = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CharCode.Ampersand:\n\t\t\t\t\tpartContent += '&amp;';\n\t\t\t\t\tprevIsSpace = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CharCode.Null:\n\t\t\t\t\tpartContent += '&#00;';\n\t\t\t\t\tprevIsSpace = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CharCode.UTF8_BOM:\n\t\t\t\tcase CharCode.LINE_SEPARATOR:\n\t\t\t\tcase CharCode.PARAGRAPH_SEPARATOR:\n\t\t\t\tcase CharCode.NEXT_LINE:\n\t\t\t\t\tpartContent += '\\ufffd';\n\t\t\t\t\tprevIsSpace = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CharCode.CarriageReturn:\n\t\t\t\t\t// zero width space, because carriage return would introduce a line break\n\t\t\t\t\tpartContent += '&#8203';\n\t\t\t\t\tprevIsSpace = false;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CharCode.Space:\n\t\t\t\t\tif (useNbsp && prevIsSpace) {\n\t\t\t\t\t\tpartContent += '&#160;';\n\t\t\t\t\t\tprevIsSpace = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpartContent += ' ';\n\t\t\t\t\t\tprevIsSpace = true;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\tpartContent += String.fromCharCode(charCode);\n\t\t\t\t\tprevIsSpace = false;\n\t\t\t}\n\t\t}\n\n\t\tresult += `<span style=\"${viewLineTokens.getInlineStyle(tokenIndex, colorMap)}\">${partContent}</span>`;\n\n\t\tif (tokenEndIndex > endOffset || charIndex >= endOffset) {\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tresult += `</div>`;\n\treturn result;\n}\n\nexport function _tokenizeToString(text: string, languageIdCodec: ILanguageIdCodec, tokenizationSupport: IReducedTokenizationSupport): string {\n\tlet result = `<div class=\"monaco-tokenized-source\">`;\n\tconst lines = strings.splitLines(text);\n\tlet currentState = tokenizationSupport.getInitialState();\n\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\tconst line = lines[i];\n\n\t\tif (i > 0) {\n\t\t\tresult += `<br/>`;\n\t\t}\n\n\t\tconst tokenizationResult = tokenizationSupport.tokenizeEncoded(line, true, currentState);\n\t\tLineTokens.convertToEndOffset(tokenizationResult.tokens, line.length);\n\t\tconst lineTokens = new LineTokens(tokenizationResult.tokens, line, languageIdCodec);\n\t\tconst viewLineTokens = lineTokens.inflate();\n\n\t\tlet startOffset = 0;\n\t\tfor (let j = 0, lenJ = viewLineTokens.getCount(); j < lenJ; j++) {\n\t\t\tconst type = viewLineTokens.getClassName(j);\n\t\t\tconst endIndex = viewLineTokens.getEndOffset(j);\n\t\t\tresult += `<span class=\"${type}\">${strings.escape(line.substring(startOffset, endIndex))}</span>`;\n\t\t\tstartOffset = endIndex;\n\t\t}\n\n\t\tcurrentState = tokenizationResult.endState;\n\t}\n\n\tresult += `</div>`;\n\treturn result;\n}\n"]}