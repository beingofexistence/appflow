{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/languages/supports/languageBracketsConfiguration.ts"],"names":[],"mappings":"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","file":"languageBracketsConfiguration.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CachedFunction } from 'vs/base/common/cache';\nimport { LanguageConfiguration } from 'vs/editor/common/languages/languageConfiguration';\n\n/**\n * Captures all bracket related configurations for a single language.\n * Immutable.\n*/\nexport class LanguageBracketsConfiguration {\n\tprivate readonly _openingBrackets: ReadonlyMap<string, OpeningBracketKind>;\n\tprivate readonly _closingBrackets: ReadonlyMap<string, ClosingBracketKind>;\n\n\tconstructor(\n\t\tpublic readonly languageId: string,\n\t\tconfig: LanguageConfiguration,\n\t) {\n\t\tconst bracketPairs = config.brackets ? filterValidBrackets(config.brackets) : [];\n\t\tconst openingBracketInfos = new CachedFunction((bracket: string) => {\n\t\t\tconst closing = new Set<ClosingBracketKind>();\n\n\t\t\treturn {\n\t\t\t\tinfo: new OpeningBracketKind(this, bracket, closing),\n\t\t\t\tclosing,\n\t\t\t};\n\t\t});\n\t\tconst closingBracketInfos = new CachedFunction((bracket: string) => {\n\t\t\tconst opening = new Set<OpeningBracketKind>();\n\t\t\tconst openingColorized = new Set<OpeningBracketKind>();\n\t\t\treturn {\n\t\t\t\tinfo: new ClosingBracketKind(this, bracket, opening, openingColorized),\n\t\t\t\topening,\n\t\t\t\topeningColorized,\n\t\t\t};\n\t\t});\n\n\t\tfor (const [open, close] of bracketPairs) {\n\t\t\tconst opening = openingBracketInfos.get(open);\n\t\t\tconst closing = closingBracketInfos.get(close);\n\n\t\t\topening.closing.add(closing.info);\n\t\t\tclosing.opening.add(opening.info);\n\t\t}\n\n\t\t// Treat colorized brackets as brackets, and mark them as colorized.\n\t\tconst colorizedBracketPairs = config.colorizedBracketPairs\n\t\t\t? filterValidBrackets(config.colorizedBracketPairs)\n\t\t\t// If not configured: Take all brackets except `<` ... `>`\n\t\t\t// Many languages set < ... > as bracket pair, even though they also use it as comparison operator.\n\t\t\t// This leads to problems when colorizing this bracket, so we exclude it if not explicitly configured otherwise.\n\t\t\t// https://github.com/microsoft/vscode/issues/132476\n\t\t\t: bracketPairs.filter((p) => !(p[0] === '<' && p[1] === '>'));\n\t\tfor (const [open, close] of colorizedBracketPairs) {\n\t\t\tconst opening = openingBracketInfos.get(open);\n\t\t\tconst closing = closingBracketInfos.get(close);\n\n\t\t\topening.closing.add(closing.info);\n\t\t\tclosing.openingColorized.add(opening.info);\n\t\t\tclosing.opening.add(opening.info);\n\t\t}\n\n\t\tthis._openingBrackets = new Map([...openingBracketInfos.cachedValues].map(([k, v]) => [k, v.info]));\n\t\tthis._closingBrackets = new Map([...closingBracketInfos.cachedValues].map(([k, v]) => [k, v.info]));\n\t}\n\n\t/**\n\t * No two brackets have the same bracket text.\n\t*/\n\tpublic get openingBrackets(): readonly OpeningBracketKind[] {\n\t\treturn [...this._openingBrackets.values()];\n\t}\n\n\t/**\n\t * No two brackets have the same bracket text.\n\t*/\n\tpublic get closingBrackets(): readonly ClosingBracketKind[] {\n\t\treturn [...this._closingBrackets.values()];\n\t}\n\n\tpublic getOpeningBracketInfo(bracketText: string): OpeningBracketKind | undefined {\n\t\treturn this._openingBrackets.get(bracketText);\n\t}\n\n\tpublic getClosingBracketInfo(bracketText: string): ClosingBracketKind | undefined {\n\t\treturn this._closingBrackets.get(bracketText);\n\t}\n\n\tpublic getBracketInfo(bracketText: string): BracketKind | undefined {\n\t\treturn this.getOpeningBracketInfo(bracketText) || this.getClosingBracketInfo(bracketText);\n\t}\n}\n\nfunction filterValidBrackets(bracketPairs: [string, string][]): [string, string][] {\n\treturn bracketPairs.filter(([open, close]) => open !== '' && close !== '');\n}\n\nexport type BracketKind = OpeningBracketKind | ClosingBracketKind;\n\nexport class BracketKindBase {\n\tconstructor(\n\t\tprotected readonly config: LanguageBracketsConfiguration,\n\t\tpublic readonly bracketText: string,\n\t) { }\n\n\tpublic get languageId(): string {\n\t\treturn this.config.languageId;\n\t}\n}\n\nexport class OpeningBracketKind extends BracketKindBase {\n\tpublic readonly isOpeningBracket = true;\n\n\tconstructor(\n\t\tconfig: LanguageBracketsConfiguration,\n\t\tbracketText: string,\n\t\tpublic readonly openedBrackets: ReadonlySet<ClosingBracketKind>,\n\t) {\n\t\tsuper(config, bracketText);\n\t}\n}\n\nexport class ClosingBracketKind extends BracketKindBase {\n\tpublic readonly isOpeningBracket = false;\n\n\tconstructor(\n\t\tconfig: LanguageBracketsConfiguration,\n\t\tbracketText: string,\n\t\t/**\n\t\t * Non empty array of all opening brackets this bracket closes.\n\t\t*/\n\t\tpublic readonly openingBrackets: ReadonlySet<OpeningBracketKind>,\n\t\tprivate readonly openingColorizedBrackets: ReadonlySet<OpeningBracketKind>,\n\t) {\n\t\tsuper(config, bracketText);\n\t}\n\n\t/**\n\t * Checks if this bracket closes the given other bracket.\n\t * If the bracket infos come from different configurations, this method will return false.\n\t*/\n\tpublic closes(other: OpeningBracketKind): boolean {\n\t\tif (other['config'] !== this.config) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.openingBrackets.has(other);\n\t}\n\n\tpublic closesColorized(other: OpeningBracketKind): boolean {\n\t\tif (other['config'] !== this.config) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.openingColorizedBrackets.has(other);\n\t}\n\n\tpublic getOpeningBrackets(): readonly OpeningBracketKind[] {\n\t\treturn [...this.openingBrackets];\n\t}\n}\n"]}