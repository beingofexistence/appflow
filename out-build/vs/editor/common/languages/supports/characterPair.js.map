{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/languages/supports/characterPair.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAIhG,MAAa,GAAG;iBAEC,qDAAgD,GAAG,gBAAgB,CAAC;iBACpE,uDAAkD,GAAG,oBAAoB,CAAC;iBAC1E,wCAAmC,GAAG,OAAO,CAAC;QAO9D,YAAY,MAA6B;YACxC,IAAI,MAAM,CAAC,gBAAgB,EAAE;gBAC5B,IAAI,CAAC,CAAC,GAAmB,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,2BAAG,CAAgC,EAAE,CAAC,CAAC,CAAC;aACvG;iBAAM,IAAI,MAAM,CAAC,QAAQ,EAAE;gBAC3B,IAAI,CAAC,CAAC,GAAmB,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,2BAAG,CAAgC,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;aACvH;iBAAM;gBACN,IAAI,CAAC,CAAC,GAAmB,EAAE,CAAC;aAC5B;YAED,IAAI,MAAM,CAAC,0BAA0B,IAAI,MAAM,CAAC,0BAA0B,CAAC,UAAU,EAAE;gBACtF,MAAM,UAAU,GAAG,MAAM,CAAC,0BAA0B,CAAC,UAAU,CAAC;gBAChE,kDAAkD;gBAClD,IAAI,CAAC,CAAC,CAAiB,IAAI,CAAC,IAAI,2BAAG,CAAgC,EAAE,IAAI,EAAE,UAAU,CAAC,IAAI,EAAE,KAAK,EAAE,UAAU,CAAC,KAAK,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;aAC9H;YAED,IAAI,CAAC,CAAC,GAA2B,OAAO,MAAM,CAAC,eAAe,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,GAAG,CAAkB,gDAAgD,CAAC;YAC7K,IAAI,CAAC,CAAC,GAA6B,OAAO,MAAM,CAAC,eAAe,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,GAAG,CAAkB,kDAAkD,CAAC;YAEjL,IAAI,CAAC,CAAC,GAAmB,MAAM,CAAC,gBAAgB,IAAI,IAAI,CAAC,CAAC,CAAiB;QAC5E,CAAC;QAEM,mBAAmB;YACzB,OAAO,IAAI,CAAC,CAAC,CAAiB;QAC/B,CAAC;QAEM,qBAAqB,CAAC,SAAkB;YAC9C,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAyB,CAAC,CAAC,IAAI,CAAC,CAAC,CAA2B,CAAC;QACxF,CAAC;QAEM,mBAAmB;YACzB,OAAO,IAAI,CAAC,CAAC,CAAiB;QAC/B,CAAC;;IA1CF,kBA2CC","file":"characterPair.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IAutoClosingPair, StandardAutoClosingPairConditional, LanguageConfiguration } from 'vs/editor/common/languages/languageConfiguration';\n\nexport class CharacterPairSupport {\n\n\tstatic readonly DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_QUOTES = ';:.,=}])> \\n\\t';\n\tstatic readonly DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_BRACKETS = '\\'\"`;:.,=}])> \\n\\t';\n\tstatic readonly DEFAULT_AUTOCLOSE_BEFORE_WHITESPACE = ' \\n\\t';\n\n\tprivate readonly _autoClosingPairs: StandardAutoClosingPairConditional[];\n\tprivate readonly _surroundingPairs: IAutoClosingPair[];\n\tprivate readonly _autoCloseBeforeForQuotes: string;\n\tprivate readonly _autoCloseBeforeForBrackets: string;\n\n\tconstructor(config: LanguageConfiguration) {\n\t\tif (config.autoClosingPairs) {\n\t\t\tthis._autoClosingPairs = config.autoClosingPairs.map(el => new StandardAutoClosingPairConditional(el));\n\t\t} else if (config.brackets) {\n\t\t\tthis._autoClosingPairs = config.brackets.map(b => new StandardAutoClosingPairConditional({ open: b[0], close: b[1] }));\n\t\t} else {\n\t\t\tthis._autoClosingPairs = [];\n\t\t}\n\n\t\tif (config.__electricCharacterSupport && config.__electricCharacterSupport.docComment) {\n\t\t\tconst docComment = config.__electricCharacterSupport.docComment;\n\t\t\t// IDocComment is legacy, only partially supported\n\t\t\tthis._autoClosingPairs.push(new StandardAutoClosingPairConditional({ open: docComment.open, close: docComment.close || '' }));\n\t\t}\n\n\t\tthis._autoCloseBeforeForQuotes = typeof config.autoCloseBefore === 'string' ? config.autoCloseBefore : CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_QUOTES;\n\t\tthis._autoCloseBeforeForBrackets = typeof config.autoCloseBefore === 'string' ? config.autoCloseBefore : CharacterPairSupport.DEFAULT_AUTOCLOSE_BEFORE_LANGUAGE_DEFINED_BRACKETS;\n\n\t\tthis._surroundingPairs = config.surroundingPairs || this._autoClosingPairs;\n\t}\n\n\tpublic getAutoClosingPairs(): StandardAutoClosingPairConditional[] {\n\t\treturn this._autoClosingPairs;\n\t}\n\n\tpublic getAutoCloseBeforeSet(forQuotes: boolean): string {\n\t\treturn (forQuotes ? this._autoCloseBeforeForQuotes : this._autoCloseBeforeForBrackets);\n\t}\n\n\tpublic getSurroundingPairs(): IAutoClosingPair[] {\n\t\treturn this._surroundingPairs;\n\t}\n}\n"]}