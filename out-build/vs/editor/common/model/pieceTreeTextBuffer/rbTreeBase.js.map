{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/model/pieceTreeTextBuffer/rbTreeBase.ts"],"names":[],"mappings":"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","file":"rbTreeBase.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Piece, PieceTreeBase } from 'vs/editor/common/model/pieceTreeTextBuffer/pieceTreeBase';\n\nexport class TreeNode {\n\tparent: TreeNode;\n\tleft: TreeNode;\n\tright: TreeNode;\n\tcolor: NodeColor;\n\n\t// Piece\n\tpiece: Piece;\n\tsize_left: number; // size of the left subtree (not inorder)\n\tlf_left: number; // line feeds cnt in the left subtree (not in order)\n\n\tconstructor(piece: Piece, color: NodeColor) {\n\t\tthis.piece = piece;\n\t\tthis.color = color;\n\t\tthis.size_left = 0;\n\t\tthis.lf_left = 0;\n\t\tthis.parent = this;\n\t\tthis.left = this;\n\t\tthis.right = this;\n\t}\n\n\tpublic next(): TreeNode {\n\t\tif (this.right !== SENTINEL) {\n\t\t\treturn leftest(this.right);\n\t\t}\n\n\t\tlet node: TreeNode = this;\n\n\t\twhile (node.parent !== SENTINEL) {\n\t\t\tif (node.parent.left === node) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tnode = node.parent;\n\t\t}\n\n\t\tif (node.parent === SENTINEL) {\n\t\t\treturn SENTINEL;\n\t\t} else {\n\t\t\treturn node.parent;\n\t\t}\n\t}\n\n\tpublic prev(): TreeNode {\n\t\tif (this.left !== SENTINEL) {\n\t\t\treturn righttest(this.left);\n\t\t}\n\n\t\tlet node: TreeNode = this;\n\n\t\twhile (node.parent !== SENTINEL) {\n\t\t\tif (node.parent.right === node) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tnode = node.parent;\n\t\t}\n\n\t\tif (node.parent === SENTINEL) {\n\t\t\treturn SENTINEL;\n\t\t} else {\n\t\t\treturn node.parent;\n\t\t}\n\t}\n\n\tpublic detach(): void {\n\t\tthis.parent = null!;\n\t\tthis.left = null!;\n\t\tthis.right = null!;\n\t}\n}\n\nexport const enum NodeColor {\n\tBlack = 0,\n\tRed = 1,\n}\n\nexport const SENTINEL: TreeNode = new TreeNode(null!, NodeColor.Black);\nSENTINEL.parent = SENTINEL;\nSENTINEL.left = SENTINEL;\nSENTINEL.right = SENTINEL;\nSENTINEL.color = NodeColor.Black;\n\nexport function leftest(node: TreeNode): TreeNode {\n\twhile (node.left !== SENTINEL) {\n\t\tnode = node.left;\n\t}\n\treturn node;\n}\n\nexport function righttest(node: TreeNode): TreeNode {\n\twhile (node.right !== SENTINEL) {\n\t\tnode = node.right;\n\t}\n\treturn node;\n}\n\nfunction calculateSize(node: TreeNode): number {\n\tif (node === SENTINEL) {\n\t\treturn 0;\n\t}\n\n\treturn node.size_left + node.piece.length + calculateSize(node.right);\n}\n\nfunction calculateLF(node: TreeNode): number {\n\tif (node === SENTINEL) {\n\t\treturn 0;\n\t}\n\n\treturn node.lf_left + node.piece.lineFeedCnt + calculateLF(node.right);\n}\n\nfunction resetSentinel(): void {\n\tSENTINEL.parent = SENTINEL;\n}\n\nexport function leftRotate(tree: PieceTreeBase, x: TreeNode) {\n\tconst y = x.right;\n\n\t// fix size_left\n\ty.size_left += x.size_left + (x.piece ? x.piece.length : 0);\n\ty.lf_left += x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\n\tx.right = y.left;\n\n\tif (y.left !== SENTINEL) {\n\t\ty.left.parent = x;\n\t}\n\ty.parent = x.parent;\n\tif (x.parent === SENTINEL) {\n\t\ttree.root = y;\n\t} else if (x.parent.left === x) {\n\t\tx.parent.left = y;\n\t} else {\n\t\tx.parent.right = y;\n\t}\n\ty.left = x;\n\tx.parent = y;\n}\n\nexport function rightRotate(tree: PieceTreeBase, y: TreeNode) {\n\tconst x = y.left;\n\ty.left = x.right;\n\tif (x.right !== SENTINEL) {\n\t\tx.right.parent = y;\n\t}\n\tx.parent = y.parent;\n\n\t// fix size_left\n\ty.size_left -= x.size_left + (x.piece ? x.piece.length : 0);\n\ty.lf_left -= x.lf_left + (x.piece ? x.piece.lineFeedCnt : 0);\n\n\tif (y.parent === SENTINEL) {\n\t\ttree.root = x;\n\t} else if (y === y.parent.right) {\n\t\ty.parent.right = x;\n\t} else {\n\t\ty.parent.left = x;\n\t}\n\n\tx.right = y;\n\ty.parent = x;\n}\n\nexport function rbDelete(tree: PieceTreeBase, z: TreeNode) {\n\tlet x: TreeNode;\n\tlet y: TreeNode;\n\n\tif (z.left === SENTINEL) {\n\t\ty = z;\n\t\tx = y.right;\n\t} else if (z.right === SENTINEL) {\n\t\ty = z;\n\t\tx = y.left;\n\t} else {\n\t\ty = leftest(z.right);\n\t\tx = y.right;\n\t}\n\n\tif (y === tree.root) {\n\t\ttree.root = x;\n\n\t\t// if x is null, we are removing the only node\n\t\tx.color = NodeColor.Black;\n\t\tz.detach();\n\t\tresetSentinel();\n\t\ttree.root.parent = SENTINEL;\n\n\t\treturn;\n\t}\n\n\tconst yWasRed = (y.color === NodeColor.Red);\n\n\tif (y === y.parent.left) {\n\t\ty.parent.left = x;\n\t} else {\n\t\ty.parent.right = x;\n\t}\n\n\tif (y === z) {\n\t\tx.parent = y.parent;\n\t\trecomputeTreeMetadata(tree, x);\n\t} else {\n\t\tif (y.parent === z) {\n\t\t\tx.parent = y;\n\t\t} else {\n\t\t\tx.parent = y.parent;\n\t\t}\n\n\t\t// as we make changes to x's hierarchy, update size_left of subtree first\n\t\trecomputeTreeMetadata(tree, x);\n\n\t\ty.left = z.left;\n\t\ty.right = z.right;\n\t\ty.parent = z.parent;\n\t\ty.color = z.color;\n\n\t\tif (z === tree.root) {\n\t\t\ttree.root = y;\n\t\t} else {\n\t\t\tif (z === z.parent.left) {\n\t\t\t\tz.parent.left = y;\n\t\t\t} else {\n\t\t\t\tz.parent.right = y;\n\t\t\t}\n\t\t}\n\n\t\tif (y.left !== SENTINEL) {\n\t\t\ty.left.parent = y;\n\t\t}\n\t\tif (y.right !== SENTINEL) {\n\t\t\ty.right.parent = y;\n\t\t}\n\t\t// update metadata\n\t\t// we replace z with y, so in this sub tree, the length change is z.item.length\n\t\ty.size_left = z.size_left;\n\t\ty.lf_left = z.lf_left;\n\t\trecomputeTreeMetadata(tree, y);\n\t}\n\n\tz.detach();\n\n\tif (x.parent.left === x) {\n\t\tconst newSizeLeft = calculateSize(x);\n\t\tconst newLFLeft = calculateLF(x);\n\t\tif (newSizeLeft !== x.parent.size_left || newLFLeft !== x.parent.lf_left) {\n\t\t\tconst delta = newSizeLeft - x.parent.size_left;\n\t\t\tconst lf_delta = newLFLeft - x.parent.lf_left;\n\t\t\tx.parent.size_left = newSizeLeft;\n\t\t\tx.parent.lf_left = newLFLeft;\n\t\t\tupdateTreeMetadata(tree, x.parent, delta, lf_delta);\n\t\t}\n\t}\n\n\trecomputeTreeMetadata(tree, x.parent);\n\n\tif (yWasRed) {\n\t\tresetSentinel();\n\t\treturn;\n\t}\n\n\t// RB-DELETE-FIXUP\n\tlet w: TreeNode;\n\twhile (x !== tree.root && x.color === NodeColor.Black) {\n\t\tif (x === x.parent.left) {\n\t\t\tw = x.parent.right;\n\n\t\t\tif (w.color === NodeColor.Red) {\n\t\t\t\tw.color = NodeColor.Black;\n\t\t\t\tx.parent.color = NodeColor.Red;\n\t\t\t\tleftRotate(tree, x.parent);\n\t\t\t\tw = x.parent.right;\n\t\t\t}\n\n\t\t\tif (w.left.color === NodeColor.Black && w.right.color === NodeColor.Black) {\n\t\t\t\tw.color = NodeColor.Red;\n\t\t\t\tx = x.parent;\n\t\t\t} else {\n\t\t\t\tif (w.right.color === NodeColor.Black) {\n\t\t\t\t\tw.left.color = NodeColor.Black;\n\t\t\t\t\tw.color = NodeColor.Red;\n\t\t\t\t\trightRotate(tree, w);\n\t\t\t\t\tw = x.parent.right;\n\t\t\t\t}\n\n\t\t\t\tw.color = x.parent.color;\n\t\t\t\tx.parent.color = NodeColor.Black;\n\t\t\t\tw.right.color = NodeColor.Black;\n\t\t\t\tleftRotate(tree, x.parent);\n\t\t\t\tx = tree.root;\n\t\t\t}\n\t\t} else {\n\t\t\tw = x.parent.left;\n\n\t\t\tif (w.color === NodeColor.Red) {\n\t\t\t\tw.color = NodeColor.Black;\n\t\t\t\tx.parent.color = NodeColor.Red;\n\t\t\t\trightRotate(tree, x.parent);\n\t\t\t\tw = x.parent.left;\n\t\t\t}\n\n\t\t\tif (w.left.color === NodeColor.Black && w.right.color === NodeColor.Black) {\n\t\t\t\tw.color = NodeColor.Red;\n\t\t\t\tx = x.parent;\n\n\t\t\t} else {\n\t\t\t\tif (w.left.color === NodeColor.Black) {\n\t\t\t\t\tw.right.color = NodeColor.Black;\n\t\t\t\t\tw.color = NodeColor.Red;\n\t\t\t\t\tleftRotate(tree, w);\n\t\t\t\t\tw = x.parent.left;\n\t\t\t\t}\n\n\t\t\t\tw.color = x.parent.color;\n\t\t\t\tx.parent.color = NodeColor.Black;\n\t\t\t\tw.left.color = NodeColor.Black;\n\t\t\t\trightRotate(tree, x.parent);\n\t\t\t\tx = tree.root;\n\t\t\t}\n\t\t}\n\t}\n\tx.color = NodeColor.Black;\n\tresetSentinel();\n}\n\nexport function fixInsert(tree: PieceTreeBase, x: TreeNode) {\n\trecomputeTreeMetadata(tree, x);\n\n\twhile (x !== tree.root && x.parent.color === NodeColor.Red) {\n\t\tif (x.parent === x.parent.parent.left) {\n\t\t\tconst y = x.parent.parent.right;\n\n\t\t\tif (y.color === NodeColor.Red) {\n\t\t\t\tx.parent.color = NodeColor.Black;\n\t\t\t\ty.color = NodeColor.Black;\n\t\t\t\tx.parent.parent.color = NodeColor.Red;\n\t\t\t\tx = x.parent.parent;\n\t\t\t} else {\n\t\t\t\tif (x === x.parent.right) {\n\t\t\t\t\tx = x.parent;\n\t\t\t\t\tleftRotate(tree, x);\n\t\t\t\t}\n\n\t\t\t\tx.parent.color = NodeColor.Black;\n\t\t\t\tx.parent.parent.color = NodeColor.Red;\n\t\t\t\trightRotate(tree, x.parent.parent);\n\t\t\t}\n\t\t} else {\n\t\t\tconst y = x.parent.parent.left;\n\n\t\t\tif (y.color === NodeColor.Red) {\n\t\t\t\tx.parent.color = NodeColor.Black;\n\t\t\t\ty.color = NodeColor.Black;\n\t\t\t\tx.parent.parent.color = NodeColor.Red;\n\t\t\t\tx = x.parent.parent;\n\t\t\t} else {\n\t\t\t\tif (x === x.parent.left) {\n\t\t\t\t\tx = x.parent;\n\t\t\t\t\trightRotate(tree, x);\n\t\t\t\t}\n\t\t\t\tx.parent.color = NodeColor.Black;\n\t\t\t\tx.parent.parent.color = NodeColor.Red;\n\t\t\t\tleftRotate(tree, x.parent.parent);\n\t\t\t}\n\t\t}\n\t}\n\n\ttree.root.color = NodeColor.Black;\n}\n\nexport function updateTreeMetadata(tree: PieceTreeBase, x: TreeNode, delta: number, lineFeedCntDelta: number): void {\n\t// node length change or line feed count change\n\twhile (x !== tree.root && x !== SENTINEL) {\n\t\tif (x.parent.left === x) {\n\t\t\tx.parent.size_left += delta;\n\t\t\tx.parent.lf_left += lineFeedCntDelta;\n\t\t}\n\n\t\tx = x.parent;\n\t}\n}\n\nexport function recomputeTreeMetadata(tree: PieceTreeBase, x: TreeNode) {\n\tlet delta = 0;\n\tlet lf_delta = 0;\n\tif (x === tree.root) {\n\t\treturn;\n\t}\n\n\t// go upwards till the node whose left subtree is changed.\n\twhile (x !== tree.root && x === x.parent.right) {\n\t\tx = x.parent;\n\t}\n\n\tif (x === tree.root) {\n\t\t// well, it means we add a node to the end (inorder)\n\t\treturn;\n\t}\n\n\t// x is the node whose right subtree is changed.\n\tx = x.parent;\n\n\tdelta = calculateSize(x.left) - x.size_left;\n\tlf_delta = calculateLF(x.left) - x.lf_left;\n\tx.size_left += delta;\n\tx.lf_left += lf_delta;\n\n\n\t// go upwards till root. O(logN)\n\twhile (x !== tree.root && (delta !== 0 || lf_delta !== 0)) {\n\t\tif (x.parent.left === x) {\n\t\t\tx.parent.size_left += delta;\n\t\t\tx.parent.lf_left += lf_delta;\n\t\t}\n\n\t\tx = x.parent;\n\t}\n}\n"]}