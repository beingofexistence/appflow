{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/model/pieceTreeTextBuffer/pieceTreeTextBuffer.ts"],"names":[],"mappings":"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","file":"pieceTreeTextBuffer.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport * as strings from 'vs/base/common/strings';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { ApplyEditsResult, EndOfLinePreference, FindMatch, IInternalModelContentChange, ISingleEditOperationIdentifier, ITextBuffer, ITextSnapshot, ValidAnnotatedEditOperation, IValidEditOperation, SearchData } from 'vs/editor/common/model';\nimport { PieceTreeBase, StringBuffer } from 'vs/editor/common/model/pieceTreeTextBuffer/pieceTreeBase';\nimport { countEOL, StringEOL } from 'vs/editor/common/core/eolCounter';\nimport { TextChange } from 'vs/editor/common/core/textChange';\nimport { Disposable } from 'vs/base/common/lifecycle';\n\nexport interface IValidatedEditOperation {\n\tsortIndex: number;\n\tidentifier: ISingleEditOperationIdentifier | null;\n\trange: Range;\n\trangeOffset: number;\n\trangeLength: number;\n\ttext: string;\n\teolCount: number;\n\tfirstLineLength: number;\n\tlastLineLength: number;\n\tforceMoveMarkers: boolean;\n\tisAutoWhitespaceEdit: boolean;\n}\n\ninterface IReverseSingleEditOperation extends IValidEditOperation {\n\tsortIndex: number;\n}\n\nexport class PieceTreeTextBuffer extends Disposable implements ITextBuffer {\n\tprivate _pieceTree: PieceTreeBase;\n\tprivate readonly _BOM: string;\n\tprivate _mightContainRTL: boolean;\n\tprivate _mightContainUnusualLineTerminators: boolean;\n\tprivate _mightContainNonBasicASCII: boolean;\n\n\tprivate readonly _onDidChangeContent: Emitter<void> = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeContent: Event<void> = this._onDidChangeContent.event;\n\n\tconstructor(chunks: StringBuffer[], BOM: string, eol: '\\r\\n' | '\\n', containsRTL: boolean, containsUnusualLineTerminators: boolean, isBasicASCII: boolean, eolNormalized: boolean) {\n\t\tsuper();\n\t\tthis._BOM = BOM;\n\t\tthis._mightContainNonBasicASCII = !isBasicASCII;\n\t\tthis._mightContainRTL = containsRTL;\n\t\tthis._mightContainUnusualLineTerminators = containsUnusualLineTerminators;\n\t\tthis._pieceTree = new PieceTreeBase(chunks, eol, eolNormalized);\n\t}\n\n\t// #region TextBuffer\n\tpublic equals(other: ITextBuffer): boolean {\n\t\tif (!(other instanceof PieceTreeTextBuffer)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this._BOM !== other._BOM) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.getEOL() !== other.getEOL()) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this._pieceTree.equal(other._pieceTree);\n\t}\n\tpublic mightContainRTL(): boolean {\n\t\treturn this._mightContainRTL;\n\t}\n\tpublic mightContainUnusualLineTerminators(): boolean {\n\t\treturn this._mightContainUnusualLineTerminators;\n\t}\n\tpublic resetMightContainUnusualLineTerminators(): void {\n\t\tthis._mightContainUnusualLineTerminators = false;\n\t}\n\tpublic mightContainNonBasicASCII(): boolean {\n\t\treturn this._mightContainNonBasicASCII;\n\t}\n\tpublic getBOM(): string {\n\t\treturn this._BOM;\n\t}\n\tpublic getEOL(): '\\r\\n' | '\\n' {\n\t\treturn this._pieceTree.getEOL();\n\t}\n\n\tpublic createSnapshot(preserveBOM: boolean): ITextSnapshot {\n\t\treturn this._pieceTree.createSnapshot(preserveBOM ? this._BOM : '');\n\t}\n\n\tpublic getOffsetAt(lineNumber: number, column: number): number {\n\t\treturn this._pieceTree.getOffsetAt(lineNumber, column);\n\t}\n\n\tpublic getPositionAt(offset: number): Position {\n\t\treturn this._pieceTree.getPositionAt(offset);\n\t}\n\n\tpublic getRangeAt(start: number, length: number): Range {\n\t\tconst end = start + length;\n\t\tconst startPosition = this.getPositionAt(start);\n\t\tconst endPosition = this.getPositionAt(end);\n\t\treturn new Range(startPosition.lineNumber, startPosition.column, endPosition.lineNumber, endPosition.column);\n\t}\n\n\tpublic getValueInRange(range: Range, eol: EndOfLinePreference = EndOfLinePreference.TextDefined): string {\n\t\tif (range.isEmpty()) {\n\t\t\treturn '';\n\t\t}\n\n\t\tconst lineEnding = this._getEndOfLine(eol);\n\t\treturn this._pieceTree.getValueInRange(range, lineEnding);\n\t}\n\n\tpublic getValueLengthInRange(range: Range, eol: EndOfLinePreference = EndOfLinePreference.TextDefined): number {\n\t\tif (range.isEmpty()) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tif (range.startLineNumber === range.endLineNumber) {\n\t\t\treturn (range.endColumn - range.startColumn);\n\t\t}\n\n\t\tconst startOffset = this.getOffsetAt(range.startLineNumber, range.startColumn);\n\t\tconst endOffset = this.getOffsetAt(range.endLineNumber, range.endColumn);\n\n\t\t// offsets use the text EOL, so we need to compensate for length differences\n\t\t// if the requested EOL doesn't match the text EOL\n\t\tlet eolOffsetCompensation = 0;\n\t\tconst desiredEOL = this._getEndOfLine(eol);\n\t\tconst actualEOL = this.getEOL();\n\t\tif (desiredEOL.length !== actualEOL.length) {\n\t\t\tconst delta = desiredEOL.length - actualEOL.length;\n\t\t\tconst eolCount = range.endLineNumber - range.startLineNumber;\n\t\t\teolOffsetCompensation = delta * eolCount;\n\t\t}\n\n\t\treturn endOffset - startOffset + eolOffsetCompensation;\n\t}\n\n\tpublic getCharacterCountInRange(range: Range, eol: EndOfLinePreference = EndOfLinePreference.TextDefined): number {\n\t\tif (this._mightContainNonBasicASCII) {\n\t\t\t// we must count by iterating\n\n\t\t\tlet result = 0;\n\n\t\t\tconst fromLineNumber = range.startLineNumber;\n\t\t\tconst toLineNumber = range.endLineNumber;\n\t\t\tfor (let lineNumber = fromLineNumber; lineNumber <= toLineNumber; lineNumber++) {\n\t\t\t\tconst lineContent = this.getLineContent(lineNumber);\n\t\t\t\tconst fromOffset = (lineNumber === fromLineNumber ? range.startColumn - 1 : 0);\n\t\t\t\tconst toOffset = (lineNumber === toLineNumber ? range.endColumn - 1 : lineContent.length);\n\n\t\t\t\tfor (let offset = fromOffset; offset < toOffset; offset++) {\n\t\t\t\t\tif (strings.isHighSurrogate(lineContent.charCodeAt(offset))) {\n\t\t\t\t\t\tresult = result + 1;\n\t\t\t\t\t\toffset = offset + 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = result + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult += this._getEndOfLine(eol).length * (toLineNumber - fromLineNumber);\n\n\t\t\treturn result;\n\t\t}\n\n\t\treturn this.getValueLengthInRange(range, eol);\n\t}\n\n\tpublic getLength(): number {\n\t\treturn this._pieceTree.getLength();\n\t}\n\n\tpublic getLineCount(): number {\n\t\treturn this._pieceTree.getLineCount();\n\t}\n\n\tpublic getLinesContent(): string[] {\n\t\treturn this._pieceTree.getLinesContent();\n\t}\n\n\tpublic getLineContent(lineNumber: number): string {\n\t\treturn this._pieceTree.getLineContent(lineNumber);\n\t}\n\n\tpublic getLineCharCode(lineNumber: number, index: number): number {\n\t\treturn this._pieceTree.getLineCharCode(lineNumber, index);\n\t}\n\n\tpublic getCharCode(offset: number): number {\n\t\treturn this._pieceTree.getCharCode(offset);\n\t}\n\n\tpublic getLineLength(lineNumber: number): number {\n\t\treturn this._pieceTree.getLineLength(lineNumber);\n\t}\n\n\tpublic getLineMinColumn(lineNumber: number): number {\n\t\treturn 1;\n\t}\n\n\tpublic getLineMaxColumn(lineNumber: number): number {\n\t\treturn this.getLineLength(lineNumber) + 1;\n\t}\n\n\tpublic getLineFirstNonWhitespaceColumn(lineNumber: number): number {\n\t\tconst result = strings.firstNonWhitespaceIndex(this.getLineContent(lineNumber));\n\t\tif (result === -1) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn result + 1;\n\t}\n\n\tpublic getLineLastNonWhitespaceColumn(lineNumber: number): number {\n\t\tconst result = strings.lastNonWhitespaceIndex(this.getLineContent(lineNumber));\n\t\tif (result === -1) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn result + 2;\n\t}\n\n\tprivate _getEndOfLine(eol: EndOfLinePreference): string {\n\t\tswitch (eol) {\n\t\t\tcase EndOfLinePreference.LF:\n\t\t\t\treturn '\\n';\n\t\t\tcase EndOfLinePreference.CRLF:\n\t\t\t\treturn '\\r\\n';\n\t\t\tcase EndOfLinePreference.TextDefined:\n\t\t\t\treturn this.getEOL();\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unknown EOL preference');\n\t\t}\n\t}\n\n\tpublic setEOL(newEOL: '\\r\\n' | '\\n'): void {\n\t\tthis._pieceTree.setEOL(newEOL);\n\t}\n\n\tpublic applyEdits(rawOperations: ValidAnnotatedEditOperation[], recordTrimAutoWhitespace: boolean, computeUndoEdits: boolean): ApplyEditsResult {\n\t\tlet mightContainRTL = this._mightContainRTL;\n\t\tlet mightContainUnusualLineTerminators = this._mightContainUnusualLineTerminators;\n\t\tlet mightContainNonBasicASCII = this._mightContainNonBasicASCII;\n\t\tlet canReduceOperations = true;\n\n\t\tlet operations: IValidatedEditOperation[] = [];\n\t\tfor (let i = 0; i < rawOperations.length; i++) {\n\t\t\tconst op = rawOperations[i];\n\t\t\tif (canReduceOperations && op._isTracked) {\n\t\t\t\tcanReduceOperations = false;\n\t\t\t}\n\t\t\tconst validatedRange = op.range;\n\t\t\tif (op.text) {\n\t\t\t\tlet textMightContainNonBasicASCII = true;\n\t\t\t\tif (!mightContainNonBasicASCII) {\n\t\t\t\t\ttextMightContainNonBasicASCII = !strings.isBasicASCII(op.text);\n\t\t\t\t\tmightContainNonBasicASCII = textMightContainNonBasicASCII;\n\t\t\t\t}\n\t\t\t\tif (!mightContainRTL && textMightContainNonBasicASCII) {\n\t\t\t\t\t// check if the new inserted text contains RTL\n\t\t\t\t\tmightContainRTL = strings.containsRTL(op.text);\n\t\t\t\t}\n\t\t\t\tif (!mightContainUnusualLineTerminators && textMightContainNonBasicASCII) {\n\t\t\t\t\t// check if the new inserted text contains unusual line terminators\n\t\t\t\t\tmightContainUnusualLineTerminators = strings.containsUnusualLineTerminators(op.text);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet validText = '';\n\t\t\tlet eolCount = 0;\n\t\t\tlet firstLineLength = 0;\n\t\t\tlet lastLineLength = 0;\n\t\t\tif (op.text) {\n\t\t\t\tlet strEOL: StringEOL;\n\t\t\t\t[eolCount, firstLineLength, lastLineLength, strEOL] = countEOL(op.text);\n\n\t\t\t\tconst bufferEOL = this.getEOL();\n\t\t\t\tconst expectedStrEOL = (bufferEOL === '\\r\\n' ? StringEOL.CRLF : StringEOL.LF);\n\t\t\t\tif (strEOL === StringEOL.Unknown || strEOL === expectedStrEOL) {\n\t\t\t\t\tvalidText = op.text;\n\t\t\t\t} else {\n\t\t\t\t\tvalidText = op.text.replace(/\\r\\n|\\r|\\n/g, bufferEOL);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\toperations[i] = {\n\t\t\t\tsortIndex: i,\n\t\t\t\tidentifier: op.identifier || null,\n\t\t\t\trange: validatedRange,\n\t\t\t\trangeOffset: this.getOffsetAt(validatedRange.startLineNumber, validatedRange.startColumn),\n\t\t\t\trangeLength: this.getValueLengthInRange(validatedRange),\n\t\t\t\ttext: validText,\n\t\t\t\teolCount: eolCount,\n\t\t\t\tfirstLineLength: firstLineLength,\n\t\t\t\tlastLineLength: lastLineLength,\n\t\t\t\tforceMoveMarkers: Boolean(op.forceMoveMarkers),\n\t\t\t\tisAutoWhitespaceEdit: op.isAutoWhitespaceEdit || false\n\t\t\t};\n\t\t}\n\n\t\t// Sort operations ascending\n\t\toperations.sort(PieceTreeTextBuffer._sortOpsAscending);\n\n\t\tlet hasTouchingRanges = false;\n\t\tfor (let i = 0, count = operations.length - 1; i < count; i++) {\n\t\t\tconst rangeEnd = operations[i].range.getEndPosition();\n\t\t\tconst nextRangeStart = operations[i + 1].range.getStartPosition();\n\n\t\t\tif (nextRangeStart.isBeforeOrEqual(rangeEnd)) {\n\t\t\t\tif (nextRangeStart.isBefore(rangeEnd)) {\n\t\t\t\t\t// overlapping ranges\n\t\t\t\t\tthrow new Error('Overlapping ranges are not allowed!');\n\t\t\t\t}\n\t\t\t\thasTouchingRanges = true;\n\t\t\t}\n\t\t}\n\n\t\tif (canReduceOperations) {\n\t\t\toperations = this._reduceOperations(operations);\n\t\t}\n\n\t\t// Delta encode operations\n\t\tconst reverseRanges = (computeUndoEdits || recordTrimAutoWhitespace ? PieceTreeTextBuffer._getInverseEditRanges(operations) : []);\n\t\tconst newTrimAutoWhitespaceCandidates: { lineNumber: number; oldContent: string }[] = [];\n\t\tif (recordTrimAutoWhitespace) {\n\t\t\tfor (let i = 0; i < operations.length; i++) {\n\t\t\t\tconst op = operations[i];\n\t\t\t\tconst reverseRange = reverseRanges[i];\n\n\t\t\t\tif (op.isAutoWhitespaceEdit && op.range.isEmpty()) {\n\t\t\t\t\t// Record already the future line numbers that might be auto whitespace removal candidates on next edit\n\t\t\t\t\tfor (let lineNumber = reverseRange.startLineNumber; lineNumber <= reverseRange.endLineNumber; lineNumber++) {\n\t\t\t\t\t\tlet currentLineContent = '';\n\t\t\t\t\t\tif (lineNumber === reverseRange.startLineNumber) {\n\t\t\t\t\t\t\tcurrentLineContent = this.getLineContent(op.range.startLineNumber);\n\t\t\t\t\t\t\tif (strings.firstNonWhitespaceIndex(currentLineContent) !== -1) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tnewTrimAutoWhitespaceCandidates.push({ lineNumber: lineNumber, oldContent: currentLineContent });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet reverseOperations: IReverseSingleEditOperation[] | null = null;\n\t\tif (computeUndoEdits) {\n\n\t\t\tlet reverseRangeDeltaOffset = 0;\n\t\t\treverseOperations = [];\n\t\t\tfor (let i = 0; i < operations.length; i++) {\n\t\t\t\tconst op = operations[i];\n\t\t\t\tconst reverseRange = reverseRanges[i];\n\t\t\t\tconst bufferText = this.getValueInRange(op.range);\n\t\t\t\tconst reverseRangeOffset = op.rangeOffset + reverseRangeDeltaOffset;\n\t\t\t\treverseRangeDeltaOffset += (op.text.length - bufferText.length);\n\n\t\t\t\treverseOperations[i] = {\n\t\t\t\t\tsortIndex: op.sortIndex,\n\t\t\t\t\tidentifier: op.identifier,\n\t\t\t\t\trange: reverseRange,\n\t\t\t\t\ttext: bufferText,\n\t\t\t\t\ttextChange: new TextChange(op.rangeOffset, bufferText, reverseRangeOffset, op.text)\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Can only sort reverse operations when the order is not significant\n\t\t\tif (!hasTouchingRanges) {\n\t\t\t\treverseOperations.sort((a, b) => a.sortIndex - b.sortIndex);\n\t\t\t}\n\t\t}\n\n\n\t\tthis._mightContainRTL = mightContainRTL;\n\t\tthis._mightContainUnusualLineTerminators = mightContainUnusualLineTerminators;\n\t\tthis._mightContainNonBasicASCII = mightContainNonBasicASCII;\n\n\t\tconst contentChanges = this._doApplyEdits(operations);\n\n\t\tlet trimAutoWhitespaceLineNumbers: number[] | null = null;\n\t\tif (recordTrimAutoWhitespace && newTrimAutoWhitespaceCandidates.length > 0) {\n\t\t\t// sort line numbers auto whitespace removal candidates for next edit descending\n\t\t\tnewTrimAutoWhitespaceCandidates.sort((a, b) => b.lineNumber - a.lineNumber);\n\n\t\t\ttrimAutoWhitespaceLineNumbers = [];\n\t\t\tfor (let i = 0, len = newTrimAutoWhitespaceCandidates.length; i < len; i++) {\n\t\t\t\tconst lineNumber = newTrimAutoWhitespaceCandidates[i].lineNumber;\n\t\t\t\tif (i > 0 && newTrimAutoWhitespaceCandidates[i - 1].lineNumber === lineNumber) {\n\t\t\t\t\t// Do not have the same line number twice\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst prevContent = newTrimAutoWhitespaceCandidates[i].oldContent;\n\t\t\t\tconst lineContent = this.getLineContent(lineNumber);\n\n\t\t\t\tif (lineContent.length === 0 || lineContent === prevContent || strings.firstNonWhitespaceIndex(lineContent) !== -1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\ttrimAutoWhitespaceLineNumbers.push(lineNumber);\n\t\t\t}\n\t\t}\n\n\t\tthis._onDidChangeContent.fire();\n\n\t\treturn new ApplyEditsResult(\n\t\t\treverseOperations,\n\t\t\tcontentChanges,\n\t\t\ttrimAutoWhitespaceLineNumbers\n\t\t);\n\t}\n\n\t/**\n\t * Transform operations such that they represent the same logic edit,\n\t * but that they also do not cause OOM crashes.\n\t */\n\tprivate _reduceOperations(operations: IValidatedEditOperation[]): IValidatedEditOperation[] {\n\t\tif (operations.length < 1000) {\n\t\t\t// We know from empirical testing that a thousand edits work fine regardless of their shape.\n\t\t\treturn operations;\n\t\t}\n\n\t\t// At one point, due to how events are emitted and how each operation is handled,\n\t\t// some operations can trigger a high amount of temporary string allocations,\n\t\t// that will immediately get edited again.\n\t\t// e.g. a formatter inserting ridiculous ammounts of \\n on a model with a single line\n\t\t// Therefore, the strategy is to collapse all the operations into a huge single edit operation\n\t\treturn [this._toSingleEditOperation(operations)];\n\t}\n\n\t_toSingleEditOperation(operations: IValidatedEditOperation[]): IValidatedEditOperation {\n\t\tlet forceMoveMarkers = false;\n\t\tconst firstEditRange = operations[0].range;\n\t\tconst lastEditRange = operations[operations.length - 1].range;\n\t\tconst entireEditRange = new Range(firstEditRange.startLineNumber, firstEditRange.startColumn, lastEditRange.endLineNumber, lastEditRange.endColumn);\n\t\tlet lastEndLineNumber = firstEditRange.startLineNumber;\n\t\tlet lastEndColumn = firstEditRange.startColumn;\n\t\tconst result: string[] = [];\n\n\t\tfor (let i = 0, len = operations.length; i < len; i++) {\n\t\t\tconst operation = operations[i];\n\t\t\tconst range = operation.range;\n\n\t\t\tforceMoveMarkers = forceMoveMarkers || operation.forceMoveMarkers;\n\n\t\t\t// (1) -- Push old text\n\t\t\tresult.push(this.getValueInRange(new Range(lastEndLineNumber, lastEndColumn, range.startLineNumber, range.startColumn)));\n\n\t\t\t// (2) -- Push new text\n\t\t\tif (operation.text.length > 0) {\n\t\t\t\tresult.push(operation.text);\n\t\t\t}\n\n\t\t\tlastEndLineNumber = range.endLineNumber;\n\t\t\tlastEndColumn = range.endColumn;\n\t\t}\n\n\t\tconst text = result.join('');\n\t\tconst [eolCount, firstLineLength, lastLineLength] = countEOL(text);\n\n\t\treturn {\n\t\t\tsortIndex: 0,\n\t\t\tidentifier: operations[0].identifier,\n\t\t\trange: entireEditRange,\n\t\t\trangeOffset: this.getOffsetAt(entireEditRange.startLineNumber, entireEditRange.startColumn),\n\t\t\trangeLength: this.getValueLengthInRange(entireEditRange, EndOfLinePreference.TextDefined),\n\t\t\ttext: text,\n\t\t\teolCount: eolCount,\n\t\t\tfirstLineLength: firstLineLength,\n\t\t\tlastLineLength: lastLineLength,\n\t\t\tforceMoveMarkers: forceMoveMarkers,\n\t\t\tisAutoWhitespaceEdit: false\n\t\t};\n\t}\n\n\tprivate _doApplyEdits(operations: IValidatedEditOperation[]): IInternalModelContentChange[] {\n\t\toperations.sort(PieceTreeTextBuffer._sortOpsDescending);\n\n\t\tconst contentChanges: IInternalModelContentChange[] = [];\n\n\t\t// operations are from bottom to top\n\t\tfor (let i = 0; i < operations.length; i++) {\n\t\t\tconst op = operations[i];\n\n\t\t\tconst startLineNumber = op.range.startLineNumber;\n\t\t\tconst startColumn = op.range.startColumn;\n\t\t\tconst endLineNumber = op.range.endLineNumber;\n\t\t\tconst endColumn = op.range.endColumn;\n\n\t\t\tif (startLineNumber === endLineNumber && startColumn === endColumn && op.text.length === 0) {\n\t\t\t\t// no-op\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (op.text) {\n\t\t\t\t// replacement\n\t\t\t\tthis._pieceTree.delete(op.rangeOffset, op.rangeLength);\n\t\t\t\tthis._pieceTree.insert(op.rangeOffset, op.text, true);\n\n\t\t\t} else {\n\t\t\t\t// deletion\n\t\t\t\tthis._pieceTree.delete(op.rangeOffset, op.rangeLength);\n\t\t\t}\n\n\t\t\tconst contentChangeRange = new Range(startLineNumber, startColumn, endLineNumber, endColumn);\n\t\t\tcontentChanges.push({\n\t\t\t\trange: contentChangeRange,\n\t\t\t\trangeLength: op.rangeLength,\n\t\t\t\ttext: op.text,\n\t\t\t\trangeOffset: op.rangeOffset,\n\t\t\t\tforceMoveMarkers: op.forceMoveMarkers\n\t\t\t});\n\t\t}\n\t\treturn contentChanges;\n\t}\n\n\tfindMatchesLineByLine(searchRange: Range, searchData: SearchData, captureMatches: boolean, limitResultCount: number): FindMatch[] {\n\t\treturn this._pieceTree.findMatchesLineByLine(searchRange, searchData, captureMatches, limitResultCount);\n\t}\n\n\t// #endregion\n\n\t// #region helper\n\t// testing purpose.\n\tpublic getPieceTree(): PieceTreeBase {\n\t\treturn this._pieceTree;\n\t}\n\n\tpublic static _getInverseEditRange(range: Range, text: string) {\n\t\tconst startLineNumber = range.startLineNumber;\n\t\tconst startColumn = range.startColumn;\n\t\tconst [eolCount, firstLineLength, lastLineLength] = countEOL(text);\n\t\tlet resultRange: Range;\n\n\t\tif (text.length > 0) {\n\t\t\t// the operation inserts something\n\t\t\tconst lineCount = eolCount + 1;\n\n\t\t\tif (lineCount === 1) {\n\t\t\t\t// single line insert\n\t\t\t\tresultRange = new Range(startLineNumber, startColumn, startLineNumber, startColumn + firstLineLength);\n\t\t\t} else {\n\t\t\t\t// multi line insert\n\t\t\t\tresultRange = new Range(startLineNumber, startColumn, startLineNumber + lineCount - 1, lastLineLength + 1);\n\t\t\t}\n\t\t} else {\n\t\t\t// There is nothing to insert\n\t\t\tresultRange = new Range(startLineNumber, startColumn, startLineNumber, startColumn);\n\t\t}\n\n\t\treturn resultRange;\n\t}\n\n\t/**\n\t * Assumes `operations` are validated and sorted ascending\n\t */\n\tpublic static _getInverseEditRanges(operations: IValidatedEditOperation[]): Range[] {\n\t\tconst result: Range[] = [];\n\n\t\tlet prevOpEndLineNumber: number = 0;\n\t\tlet prevOpEndColumn: number = 0;\n\t\tlet prevOp: IValidatedEditOperation | null = null;\n\t\tfor (let i = 0, len = operations.length; i < len; i++) {\n\t\t\tconst op = operations[i];\n\n\t\t\tlet startLineNumber: number;\n\t\t\tlet startColumn: number;\n\n\t\t\tif (prevOp) {\n\t\t\t\tif (prevOp.range.endLineNumber === op.range.startLineNumber) {\n\t\t\t\t\tstartLineNumber = prevOpEndLineNumber;\n\t\t\t\t\tstartColumn = prevOpEndColumn + (op.range.startColumn - prevOp.range.endColumn);\n\t\t\t\t} else {\n\t\t\t\t\tstartLineNumber = prevOpEndLineNumber + (op.range.startLineNumber - prevOp.range.endLineNumber);\n\t\t\t\t\tstartColumn = op.range.startColumn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tstartLineNumber = op.range.startLineNumber;\n\t\t\t\tstartColumn = op.range.startColumn;\n\t\t\t}\n\n\t\t\tlet resultRange: Range;\n\n\t\t\tif (op.text.length > 0) {\n\t\t\t\t// the operation inserts something\n\t\t\t\tconst lineCount = op.eolCount + 1;\n\n\t\t\t\tif (lineCount === 1) {\n\t\t\t\t\t// single line insert\n\t\t\t\t\tresultRange = new Range(startLineNumber, startColumn, startLineNumber, startColumn + op.firstLineLength);\n\t\t\t\t} else {\n\t\t\t\t\t// multi line insert\n\t\t\t\t\tresultRange = new Range(startLineNumber, startColumn, startLineNumber + lineCount - 1, op.lastLineLength + 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// There is nothing to insert\n\t\t\t\tresultRange = new Range(startLineNumber, startColumn, startLineNumber, startColumn);\n\t\t\t}\n\n\t\t\tprevOpEndLineNumber = resultRange.endLineNumber;\n\t\t\tprevOpEndColumn = resultRange.endColumn;\n\n\t\t\tresult.push(resultRange);\n\t\t\tprevOp = op;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate static _sortOpsAscending(a: IValidatedEditOperation, b: IValidatedEditOperation): number {\n\t\tconst r = Range.compareRangesUsingEnds(a.range, b.range);\n\t\tif (r === 0) {\n\t\t\treturn a.sortIndex - b.sortIndex;\n\t\t}\n\t\treturn r;\n\t}\n\n\tprivate static _sortOpsDescending(a: IValidatedEditOperation, b: IValidatedEditOperation): number {\n\t\tconst r = Range.compareRangesUsingEnds(a.range, b.range);\n\t\tif (r === 0) {\n\t\t\treturn b.sortIndex - a.sortIndex;\n\t\t}\n\t\treturn -r;\n\t}\n\t// #endregion\n}\n"]}