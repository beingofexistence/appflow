{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/model/fixedArray.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAIhG;;;OAGG;IACH,MAAa,GAAG;QAGf,YACkB,CAAW;YAAX,MAAC,GAAD,CAAC,CAAU;YAHrB,MAAC,GAAa,EAAE,CAAC;QAIrB,CAAC;QAEE,GAAG,CAAC,KAAa;YACvB,IAAI,KAAK,GAAG,IAAI,CAAC,CAAC,CAAM,MAAM,EAAE;gBAC/B,OAAO,IAAI,CAAC,CAAC,CAAM,KAAK,CAAC,CAAC;aAC1B;YACD,OAAO,IAAI,CAAC,CAAC,CAAQ;QACtB,CAAC;QAEM,GAAG,CAAC,KAAa,EAAE,KAAQ;YACjC,OAAO,KAAK,IAAI,IAAI,CAAC,CAAC,CAAM,MAAM,EAAE;gBACnC,IAAI,CAAC,CAAC,CAAM,IAAI,CAAC,CAAC,CAAM,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAQ;aAChD;YACD,IAAI,CAAC,CAAC,CAAM,KAAK,CAAC,GAAG,KAAK,CAAC;QAC5B,CAAC;QAEM,OAAO,CAAC,KAAa,EAAE,SAAiB,EAAE,SAAiB;YACjE,IAAI,KAAK,IAAI,IAAI,CAAC,CAAC,CAAM,MAAM,EAAE;gBAChC,OAAO;aACP;YAED,IAAI,SAAS,KAAK,CAAC,EAAE;gBACpB,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;gBAC9B,OAAO;aACP;iBAAM,IAAI,SAAS,KAAK,CAAC,EAAE;gBAC3B,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;gBAC9B,OAAO;aACP;YAED,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAM,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAC3C,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAM,KAAK,CAAC,KAAK,GAAG,SAAS,CAAC,CAAC;YACnD,MAAM,SAAS,GAAG,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAQ,CAAC;YACtD,IAAI,CAAC,CAAC,GAAQ,MAAM,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC/C,CAAC;QAEM,MAAM,CAAC,WAAmB,EAAE,WAAmB;YACrD,IAAI,WAAW,KAAK,CAAC,IAAI,WAAW,IAAI,IAAI,CAAC,CAAC,CAAM,MAAM,EAAE;gBAC3D,OAAO;aACP;YACD,IAAI,CAAC,CAAC,CAAM,MAAM,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;QAC9C,CAAC;QAEM,MAAM,CAAC,WAAmB,EAAE,WAAmB;YACrD,IAAI,WAAW,KAAK,CAAC,IAAI,WAAW,IAAI,IAAI,CAAC,CAAC,CAAM,MAAM,EAAE;gBAC3D,OAAO;aACP;YACD,MAAM,GAAG,GAAQ,EAAE,CAAC;YACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,EAAE,CAAC,EAAE,EAAE;gBACrC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAQ;aACvB;YACD,IAAI,CAAC,CAAC,GAAQ,IAAA,YAAG,EAAS,IAAI,CAAC,CAAC,EAAO,WAAW,EAAE,GAAG,CAAC,CAAC;QAC1D,CAAC;KACD;IAzDD,kBAyDC;IAED,SAAS,SAAS,CAAI,MAAc,EAAE,KAAQ;QAC7C,MAAM,GAAG,GAAQ,EAAE,CAAC;QACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;YAChC,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;SACf;QACD,OAAO,GAAG,CAAC;IACZ,CAAC","file":"fixedArray.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { arrayInsert } from 'vs/base/common/arrays';\n\n/**\n * An array that avoids being sparse by always\n * filling up unused indices with a default value.\n */\nexport class FixedArray<T> {\n\tprivate _store: T[] = [];\n\n\tconstructor(\n\t\tprivate readonly _default: T\n\t) { }\n\n\tpublic get(index: number): T {\n\t\tif (index < this._store.length) {\n\t\t\treturn this._store[index];\n\t\t}\n\t\treturn this._default;\n\t}\n\n\tpublic set(index: number, value: T): void {\n\t\twhile (index >= this._store.length) {\n\t\t\tthis._store[this._store.length] = this._default;\n\t\t}\n\t\tthis._store[index] = value;\n\t}\n\n\tpublic replace(index: number, oldLength: number, newLength: number): void {\n\t\tif (index >= this._store.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (oldLength === 0) {\n\t\t\tthis.insert(index, newLength);\n\t\t\treturn;\n\t\t} else if (newLength === 0) {\n\t\t\tthis.delete(index, oldLength);\n\t\t\treturn;\n\t\t}\n\n\t\tconst before = this._store.slice(0, index);\n\t\tconst after = this._store.slice(index + oldLength);\n\t\tconst insertArr = arrayFill(newLength, this._default);\n\t\tthis._store = before.concat(insertArr, after);\n\t}\n\n\tpublic delete(deleteIndex: number, deleteCount: number): void {\n\t\tif (deleteCount === 0 || deleteIndex >= this._store.length) {\n\t\t\treturn;\n\t\t}\n\t\tthis._store.splice(deleteIndex, deleteCount);\n\t}\n\n\tpublic insert(insertIndex: number, insertCount: number): void {\n\t\tif (insertCount === 0 || insertIndex >= this._store.length) {\n\t\t\treturn;\n\t\t}\n\t\tconst arr: T[] = [];\n\t\tfor (let i = 0; i < insertCount; i++) {\n\t\t\tarr[i] = this._default;\n\t\t}\n\t\tthis._store = arrayInsert(this._store, insertIndex, arr);\n\t}\n}\n\nfunction arrayFill<T>(length: number, value: T): T[] {\n\tconst arr: T[] = [];\n\tfor (let i = 0; i < length; i++) {\n\t\tarr[i] = value;\n\t}\n\treturn arr;\n}\n"]}