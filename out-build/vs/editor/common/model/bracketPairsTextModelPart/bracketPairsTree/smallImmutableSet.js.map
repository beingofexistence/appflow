{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/smallImmutableSet.ts"],"names":[],"mappings":"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","file":"smallImmutableSet.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nconst emptyArr: number[] = [];\n\n/**\n * Represents an immutable set that works best for a small number of elements (less than 32).\n * It uses bits to encode element membership efficiently.\n*/\nexport class SmallImmutableSet<T> {\n\tprivate static cache = new Array<SmallImmutableSet<any>>(129);\n\n\tprivate static create<T>(items: number, additionalItems: readonly number[]): SmallImmutableSet<T> {\n\t\tif (items <= 128 && additionalItems.length === 0) {\n\t\t\t// We create a cache of 128=2^7 elements to cover all sets with up to 7 (dense) elements.\n\t\t\tlet cached = SmallImmutableSet.cache[items];\n\t\t\tif (!cached) {\n\t\t\t\tcached = new SmallImmutableSet(items, additionalItems);\n\t\t\t\tSmallImmutableSet.cache[items] = cached;\n\t\t\t}\n\t\t\treturn cached;\n\t\t}\n\n\t\treturn new SmallImmutableSet(items, additionalItems);\n\t}\n\n\tprivate static empty = SmallImmutableSet.create<any>(0, emptyArr);\n\tpublic static getEmpty<T>(): SmallImmutableSet<T> {\n\t\treturn this.empty;\n\t}\n\n\tprivate constructor(\n\t\tprivate readonly items: number,\n\t\tprivate readonly additionalItems: readonly number[]\n\t) {\n\t}\n\n\tpublic add(value: T, keyProvider: IDenseKeyProvider<T>): SmallImmutableSet<T> {\n\t\tconst key = keyProvider.getKey(value);\n\t\tlet idx = key >> 5; // divided by 32\n\t\tif (idx === 0) {\n\t\t\t// fast path\n\t\t\tconst newItem = (1 << key) | this.items;\n\t\t\tif (newItem === this.items) {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\treturn SmallImmutableSet.create(newItem, this.additionalItems);\n\t\t}\n\t\tidx--;\n\n\t\tconst newItems = this.additionalItems.slice(0);\n\t\twhile (newItems.length < idx) {\n\t\t\tnewItems.push(0);\n\t\t}\n\t\tnewItems[idx] |= 1 << (key & 31);\n\n\t\treturn SmallImmutableSet.create(this.items, newItems);\n\t}\n\n\tpublic has(value: T, keyProvider: IDenseKeyProvider<T>): boolean {\n\t\tconst key = keyProvider.getKey(value);\n\t\tlet idx = key >> 5; // divided by 32\n\t\tif (idx === 0) {\n\t\t\t// fast path\n\t\t\treturn (this.items & (1 << key)) !== 0;\n\t\t}\n\t\tidx--;\n\n\t\treturn ((this.additionalItems[idx] || 0) & (1 << (key & 31))) !== 0;\n\t}\n\n\tpublic merge(other: SmallImmutableSet<T>): SmallImmutableSet<T> {\n\t\tconst merged = this.items | other.items;\n\n\t\tif (this.additionalItems === emptyArr && other.additionalItems === emptyArr) {\n\t\t\t// fast path\n\t\t\tif (merged === this.items) {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t\tif (merged === other.items) {\n\t\t\t\treturn other;\n\t\t\t}\n\t\t\treturn SmallImmutableSet.create(merged, emptyArr);\n\t\t}\n\n\t\t// This can be optimized, but it's not a common case\n\t\tconst newItems: number[] = [];\n\t\tfor (let i = 0; i < Math.max(this.additionalItems.length, other.additionalItems.length); i++) {\n\t\t\tconst item1 = this.additionalItems[i] || 0;\n\t\t\tconst item2 = other.additionalItems[i] || 0;\n\t\t\tnewItems.push(item1 | item2);\n\t\t}\n\n\t\treturn SmallImmutableSet.create(merged, newItems);\n\t}\n\n\tpublic intersects(other: SmallImmutableSet<T>): boolean {\n\t\tif ((this.items & other.items) !== 0) {\n\t\t\treturn true;\n\t\t}\n\n\t\tfor (let i = 0; i < Math.min(this.additionalItems.length, other.additionalItems.length); i++) {\n\t\t\tif ((this.additionalItems[i] & other.additionalItems[i]) !== 0) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic equals(other: SmallImmutableSet<T>): boolean {\n\t\tif (this.items !== other.items) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.additionalItems.length !== other.additionalItems.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0; i < this.additionalItems.length; i++) {\n\t\t\tif (this.additionalItems[i] !== other.additionalItems[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\nexport interface IDenseKeyProvider<T> {\n\tgetKey(value: T): number;\n}\n\nexport const identityKeyProvider: IDenseKeyProvider<number> = {\n\tgetKey(value: number) {\n\t\treturn value;\n\t}\n};\n\n/**\n * Assigns values a unique incrementing key.\n*/\nexport class DenseKeyProvider<T> {\n\tprivate readonly items = new Map<T, number>();\n\n\tgetKey(value: T): number {\n\t\tlet existing = this.items.get(value);\n\t\tif (existing === undefined) {\n\t\t\texisting = this.items.size;\n\t\t\tthis.items.set(value, existing);\n\t\t}\n\t\treturn existing;\n\t}\n\n\treverseLookup(value: number): T | undefined {\n\t\treturn [...this.items].find(([_key, v]) => v === value)?.[0];\n\t}\n\n\treverseLookupSet(set: SmallImmutableSet<T>): T[] {\n\t\tconst result: T[] = [];\n\t\tfor (const [key] of this.items) {\n\t\t\tif (set.has(key, this)) {\n\t\t\t\tresult.push(key);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tkeys(): IterableIterator<T> {\n\t\treturn this.items.keys();\n\t}\n}\n"]}