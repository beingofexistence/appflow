{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/length.ts"],"names":[],"mappings":"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","file":"length.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { splitLines } from 'vs/base/common/strings';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\n\n/**\n * Represents a non-negative length in terms of line and column count.\n * Prefer using {@link Length} for performance reasons.\n*/\nexport class LengthObj {\n\tpublic static zero = new LengthObj(0, 0);\n\n\tpublic static lengthDiffNonNegative(start: LengthObj, end: LengthObj): LengthObj {\n\t\tif (end.isLessThan(start)) {\n\t\t\treturn LengthObj.zero;\n\t\t}\n\t\tif (start.lineCount === end.lineCount) {\n\t\t\treturn new LengthObj(0, end.columnCount - start.columnCount);\n\t\t} else {\n\t\t\treturn new LengthObj(end.lineCount - start.lineCount, end.columnCount);\n\t\t}\n\t}\n\n\tconstructor(\n\t\tpublic readonly lineCount: number,\n\t\tpublic readonly columnCount: number\n\t) { }\n\n\tpublic isZero() {\n\t\treturn this.lineCount === 0 && this.columnCount === 0;\n\t}\n\n\tpublic toLength(): Length {\n\t\treturn toLength(this.lineCount, this.columnCount);\n\t}\n\n\tpublic isLessThan(other: LengthObj): boolean {\n\t\tif (this.lineCount !== other.lineCount) {\n\t\t\treturn this.lineCount < other.lineCount;\n\t\t}\n\t\treturn this.columnCount < other.columnCount;\n\t}\n\n\tpublic isGreaterThan(other: LengthObj): boolean {\n\t\tif (this.lineCount !== other.lineCount) {\n\t\t\treturn this.lineCount > other.lineCount;\n\t\t}\n\t\treturn this.columnCount > other.columnCount;\n\t}\n\n\tpublic equals(other: LengthObj): boolean {\n\t\treturn this.lineCount === other.lineCount && this.columnCount === other.columnCount;\n\t}\n\n\tpublic compare(other: LengthObj): number {\n\t\tif (this.lineCount !== other.lineCount) {\n\t\t\treturn this.lineCount - other.lineCount;\n\t\t}\n\t\treturn this.columnCount - other.columnCount;\n\t}\n\n\tpublic add(other: LengthObj): LengthObj {\n\t\tif (other.lineCount === 0) {\n\t\t\treturn new LengthObj(this.lineCount, this.columnCount + other.columnCount);\n\t\t} else {\n\t\t\treturn new LengthObj(this.lineCount + other.lineCount, other.columnCount);\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn `${this.lineCount},${this.columnCount}`;\n\t}\n}\n\n/**\n * The end must be greater than or equal to the start.\n*/\nexport function lengthDiff(startLineCount: number, startColumnCount: number, endLineCount: number, endColumnCount: number): Length {\n\treturn (startLineCount !== endLineCount)\n\t\t? toLength(endLineCount - startLineCount, endColumnCount)\n\t\t: toLength(0, endColumnCount - startColumnCount);\n}\n\n/**\n * Represents a non-negative length in terms of line and column count.\n * Does not allocate.\n*/\nexport type Length = { _brand: 'Length' };\n\nexport const lengthZero = 0 as any as Length;\n\nexport function lengthIsZero(length: Length): boolean {\n\treturn length as any as number === 0;\n}\n\n/*\n * We have 52 bits available in a JS number.\n * We use the upper 26 bits to store the line and the lower 26 bits to store the column.\n */\n///*\nconst factor = 2 ** 26;\n/*/\nconst factor = 1000000;\n// */\n\nexport function toLength(lineCount: number, columnCount: number): Length {\n\t// llllllllllllllllllllllllllcccccccccccccccccccccccccc (52 bits)\n\t//       line count (26 bits)    column count (26 bits)\n\n\t// If there is no overflow (all values/sums below 2^26 = 67108864),\n\t// we have `toLength(lns1, cols1) + toLength(lns2, cols2) = toLength(lns1 + lns2, cols1 + cols2)`.\n\n\treturn (lineCount * factor + columnCount) as any as Length;\n}\n\nexport function lengthToObj(length: Length): LengthObj {\n\tconst l = length as any as number;\n\tconst lineCount = Math.floor(l / factor);\n\tconst columnCount = l - lineCount * factor;\n\treturn new LengthObj(lineCount, columnCount);\n}\n\nexport function lengthGetLineCount(length: Length): number {\n\treturn Math.floor(length as any as number / factor);\n}\n\n/**\n * Returns the amount of columns of the given length, assuming that it does not span any line.\n*/\nexport function lengthGetColumnCountIfZeroLineCount(length: Length): number {\n\treturn length as any as number;\n}\n\n\n// [10 lines, 5 cols] + [ 0 lines, 3 cols] = [10 lines, 8 cols]\n// [10 lines, 5 cols] + [20 lines, 3 cols] = [30 lines, 3 cols]\nexport function lengthAdd(length1: Length, length2: Length): Length;\nexport function lengthAdd(l1: any, l2: any): Length {\n\tlet r = l1 + l2;\n\tif (l2 >= factor) { r = r - (l1 % factor); }\n\treturn r;\n}\n\nexport function sumLengths<T>(items: readonly T[], lengthFn: (item: T) => Length): Length {\n\treturn items.reduce((a, b) => lengthAdd(a, lengthFn(b)), lengthZero);\n}\n\nexport function lengthEquals(length1: Length, length2: Length): boolean {\n\treturn length1 === length2;\n}\n\n/**\n * Returns a non negative length `result` such that `lengthAdd(length1, result) = length2`, or zero if such length does not exist.\n */\nexport function lengthDiffNonNegative(length1: Length, length2: Length): Length {\n\tconst l1 = length1 as any as number;\n\tconst l2 = length2 as any as number;\n\n\tconst diff = l2 - l1;\n\tif (diff <= 0) {\n\t\t// line-count of length1 is higher than line-count of length2\n\t\t// or they are equal and column-count of length1 is higher than column-count of length2\n\t\treturn lengthZero;\n\t}\n\n\tconst lineCount1 = Math.floor(l1 / factor);\n\tconst lineCount2 = Math.floor(l2 / factor);\n\n\tconst colCount2 = l2 - lineCount2 * factor;\n\n\tif (lineCount1 === lineCount2) {\n\t\tconst colCount1 = l1 - lineCount1 * factor;\n\t\treturn toLength(0, colCount2 - colCount1);\n\t} else {\n\t\treturn toLength(lineCount2 - lineCount1, colCount2);\n\t}\n}\n\nexport function lengthLessThan(length1: Length, length2: Length): boolean {\n\t// First, compare line counts, then column counts.\n\treturn (length1 as any as number) < (length2 as any as number);\n}\n\nexport function lengthLessThanEqual(length1: Length, length2: Length): boolean {\n\treturn (length1 as any as number) <= (length2 as any as number);\n}\n\nexport function lengthGreaterThanEqual(length1: Length, length2: Length): boolean {\n\treturn (length1 as any as number) >= (length2 as any as number);\n}\n\nexport function lengthToPosition(length: Length): Position {\n\tconst l = length as any as number;\n\tconst lineCount = Math.floor(l / factor);\n\tconst colCount = l - lineCount * factor;\n\treturn new Position(lineCount + 1, colCount + 1);\n}\n\nexport function positionToLength(position: Position): Length {\n\treturn toLength(position.lineNumber - 1, position.column - 1);\n}\n\nexport function lengthsToRange(lengthStart: Length, lengthEnd: Length): Range {\n\tconst l = lengthStart as any as number;\n\tconst lineCount = Math.floor(l / factor);\n\tconst colCount = l - lineCount * factor;\n\n\tconst l2 = lengthEnd as any as number;\n\tconst lineCount2 = Math.floor(l2 / factor);\n\tconst colCount2 = l2 - lineCount2 * factor;\n\n\treturn new Range(lineCount + 1, colCount + 1, lineCount2 + 1, colCount2 + 1);\n}\n\nexport function lengthOfRange(range: Range): LengthObj {\n\tif (range.startLineNumber === range.endLineNumber) {\n\t\treturn new LengthObj(0, range.endColumn - range.startColumn);\n\t} else {\n\t\treturn new LengthObj(range.endLineNumber - range.startLineNumber, range.endColumn - 1);\n\t}\n}\n\nexport function lengthCompare(length1: Length, length2: Length): number {\n\tconst l1 = length1 as any as number;\n\tconst l2 = length2 as any as number;\n\treturn l1 - l2;\n}\n\nexport function lengthOfString(str: string): Length {\n\tconst lines = splitLines(str);\n\treturn toLength(lines.length - 1, lines[lines.length - 1].length);\n}\n\nexport function lengthOfStringObj(str: string): LengthObj {\n\tconst lines = splitLines(str);\n\treturn new LengthObj(lines.length - 1, lines[lines.length - 1].length);\n}\n\n/**\n * Computes a numeric hash of the given length.\n*/\nexport function lengthHash(length: Length): number {\n\treturn length as any;\n}\n\nexport function lengthMax(length1: Length, length2: Length): Length {\n\treturn length1 > length2 ? length1 : length2;\n}\n"]}