{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/brackets.ts"],"names":[],"mappings":"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","file":"brackets.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { escapeRegExpCharacters } from 'vs/base/common/strings';\nimport { ResolvedLanguageConfiguration } from 'vs/editor/common/languages/languageConfigurationRegistry';\nimport { BracketKind } from 'vs/editor/common/languages/supports/languageBracketsConfiguration';\nimport { BracketAstNode } from './ast';\nimport { toLength } from './length';\nimport { DenseKeyProvider, identityKeyProvider, SmallImmutableSet } from './smallImmutableSet';\nimport { OpeningBracketId, Token, TokenKind } from './tokenizer';\n\nexport class BracketTokens {\n\tstatic createFromLanguage(configuration: ResolvedLanguageConfiguration, denseKeyProvider: DenseKeyProvider<string>): BracketTokens {\n\t\tfunction getId(bracketInfo: BracketKind): OpeningBracketId {\n\t\t\treturn denseKeyProvider.getKey(`${bracketInfo.languageId}:::${bracketInfo.bracketText}`);\n\t\t}\n\n\t\tconst map = new Map<string, Token>();\n\t\tfor (const openingBracket of configuration.bracketsNew.openingBrackets) {\n\t\t\tconst length = toLength(0, openingBracket.bracketText.length);\n\t\t\tconst openingTextId = getId(openingBracket);\n\t\t\tconst bracketIds = SmallImmutableSet.getEmpty().add(openingTextId, identityKeyProvider);\n\t\t\tmap.set(openingBracket.bracketText, new Token(\n\t\t\t\tlength,\n\t\t\t\tTokenKind.OpeningBracket,\n\t\t\t\topeningTextId,\n\t\t\t\tbracketIds,\n\t\t\t\tBracketAstNode.create(length, openingBracket, bracketIds)\n\t\t\t));\n\t\t}\n\n\t\tfor (const closingBracket of configuration.bracketsNew.closingBrackets) {\n\t\t\tconst length = toLength(0, closingBracket.bracketText.length);\n\t\t\tlet bracketIds = SmallImmutableSet.getEmpty();\n\t\t\tconst closingBrackets = closingBracket.getOpeningBrackets();\n\t\t\tfor (const bracket of closingBrackets) {\n\t\t\t\tbracketIds = bracketIds.add(getId(bracket), identityKeyProvider);\n\t\t\t}\n\t\t\tmap.set(closingBracket.bracketText, new Token(\n\t\t\t\tlength,\n\t\t\t\tTokenKind.ClosingBracket,\n\t\t\t\tgetId(closingBrackets[0]),\n\t\t\t\tbracketIds,\n\t\t\t\tBracketAstNode.create(length, closingBracket, bracketIds)\n\t\t\t));\n\t\t}\n\n\t\treturn new BracketTokens(map);\n\t}\n\n\tprivate hasRegExp = false;\n\tprivate _regExpGlobal: RegExp | null = null;\n\n\tconstructor(\n\t\tprivate readonly map: Map<string, Token>\n\t) { }\n\n\tgetRegExpStr(): string | null {\n\t\tif (this.isEmpty) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\tconst keys = [...this.map.keys()];\n\t\t\tkeys.sort();\n\t\t\tkeys.reverse();\n\t\t\treturn keys.map(k => prepareBracketForRegExp(k)).join('|');\n\t\t}\n\t}\n\n\t/**\n\t * Returns null if there is no such regexp (because there are no brackets).\n\t*/\n\tget regExpGlobal(): RegExp | null {\n\t\tif (!this.hasRegExp) {\n\t\t\tconst regExpStr = this.getRegExpStr();\n\t\t\tthis._regExpGlobal = regExpStr ? new RegExp(regExpStr, 'gi') : null;\n\t\t\tthis.hasRegExp = true;\n\t\t}\n\t\treturn this._regExpGlobal;\n\t}\n\n\tgetToken(value: string): Token | undefined {\n\t\treturn this.map.get(value.toLowerCase());\n\t}\n\n\tfindClosingTokenText(openingBracketIds: SmallImmutableSet<OpeningBracketId>): string | undefined {\n\t\tfor (const [closingText, info] of this.map) {\n\t\t\tif (info.kind === TokenKind.ClosingBracket && info.bracketIds.intersects(openingBracketIds)) {\n\t\t\t\treturn closingText;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tget isEmpty(): boolean {\n\t\treturn this.map.size === 0;\n\t}\n}\n\nfunction prepareBracketForRegExp(str: string): string {\n\tlet escaped = escapeRegExpCharacters(str);\n\t// These bracket pair delimiters start or end with letters\n\t// see https://github.com/microsoft/vscode/issues/132162 https://github.com/microsoft/vscode/issues/150440\n\tif (/^[\\w ]+/.test(str)) {\n\t\tescaped = `\\\\b${escaped}`;\n\t}\n\tif (/[\\w ]+$/.test(str)) {\n\t\tescaped = `${escaped}\\\\b`;\n\t}\n\treturn escaped;\n}\n\nexport class LanguageAgnosticBracketTokens {\n\tprivate readonly languageIdToBracketTokens = new Map<string, BracketTokens>();\n\n\tconstructor(\n\t\tprivate readonly denseKeyProvider: DenseKeyProvider<string>,\n\t\tprivate readonly getLanguageConfiguration: (languageId: string) => ResolvedLanguageConfiguration,\n\t) {\n\t}\n\n\tpublic didLanguageChange(languageId: string): boolean {\n\t\t// Report a change whenever the language configuration updates.\n\t\treturn this.languageIdToBracketTokens.has(languageId);\n\t}\n\n\tgetSingleLanguageBracketTokens(languageId: string): BracketTokens {\n\t\tlet singleLanguageBracketTokens = this.languageIdToBracketTokens.get(languageId);\n\t\tif (!singleLanguageBracketTokens) {\n\t\t\tsingleLanguageBracketTokens = BracketTokens.createFromLanguage(this.getLanguageConfiguration(languageId), this.denseKeyProvider);\n\t\t\tthis.languageIdToBracketTokens.set(languageId, singleLanguageBracketTokens);\n\t\t}\n\t\treturn singleLanguageBracketTokens;\n\t}\n\n\tgetToken(value: string, languageId: string): Token | undefined {\n\t\tconst singleLanguageBracketTokens = this.getSingleLanguageBracketTokens(languageId);\n\t\treturn singleLanguageBracketTokens.getToken(value);\n\t}\n}\n"]}