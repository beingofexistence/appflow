{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/beforeEditPositionMapper.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,MAAa,GAAG;QACR,MAAM,CAAC,uBAAuB,CAAC,OAA8B;YACnE,oCAAoC;YACpC,MAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;gBAC7B,MAAM,KAAK,GAAG,WAAG,CAAG,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;gBAClC,OAAO,IAAI,GAAG,CACb,IAAA,YAAG,EAAc,KAAK,CAAC,gBAAgB,EAAE,CAAC,EAC1C,IAAA,YAAG,EAAc,KAAK,CAAC,cAAc,EAAE,CAAC,EACxC,IAAA,YAAG,EAAY,CAAC,CAAC,IAAI,CAAC,CACtB,CAAC;YACH,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;YACb,OAAO,KAAK,CAAC;QACd,CAAC;QAED,YACiB,WAAmB,EACnB,SAAiB,EACjB,SAAiB;YAFjB,gBAAW,GAAX,WAAW,CAAQ;YACnB,cAAS,GAAT,SAAS,CAAQ;YACjB,cAAS,GAAT,SAAS,CAAQ;QAElC,CAAC;QAED,QAAQ;YACP,OAAO,IAAI,IAAA,YAAG,EAAS,IAAI,CAAC,WAAW,CAAC,MAAM,IAAA,YAAG,EAAS,IAAI,CAAC,SAAS,CAAC,QAAQ,IAAA,YAAG,EAAS,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;QAChH,CAAC;KACD;IAxBD,kBAwBC;IAED,MAAa,GAAG;QAOf;;UAEE;QACF,YACC,KAA8B;YAVvB,MAAC,GAAa,CAAC,CAAC;YAChB,MAAC,GAAwB,CAAC,CAAC;YAC3B,MAAC,GAA0B,CAAC,CAAC;YAC7B,MAAC,GAAmB,CAAC,CAAC,CAAC;YAS9B,IAAI,CAAC,CAAC,GAAO,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC9D,CAAC;QAED;;UAEE;QACF,qBAAqB,CAAC,MAAc;YACnC,IAAI,CAAC,CAAC,CAAc,MAAM,CAAC,CAAC;YAC5B,OAAO,IAAI,CAAC,CAAC,CAAiB,MAAM,CAAC,CAAC;QACvC,CAAC;QAED;;;UAGE;QACF,uBAAuB,CAAC,MAAc;YACrC,IAAI,CAAC,CAAC,CAAc,MAAM,CAAC,CAAC;YAE5B,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAK,IAAI,CAAC,CAAC,CAAW,CAAC;YAC9C,MAAM,gBAAgB,GAAG,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAiB,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YACtF,IAAI,gBAAgB,KAAK,IAAI,EAAE;gBAC9B,OAAO,IAAI,CAAC;aACZ;YAED,OAAO,IAAA,YAAG,EAAmB,MAAM,EAAE,gBAAgB,CAAC,CAAC;QACxD,CAAC;QAEO,CAAC,CAAiB,YAAiB;YAC1C,IAAI,YAAY,CAAC,SAAS,KAAK,IAAI,CAAC,CAAC,EAAkB;gBACtD,OAAO,IAAA,YAAG,EAAM,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,EAAuB,YAAY,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC,CAAwB,CAAC;aAChI;iBAAM;gBACN,OAAO,IAAA,YAAG,EAAM,YAAY,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,EAAuB,YAAY,CAAC,WAAW,CAAC,CAAC;aAChG;QACF,CAAC;QAEO,CAAC,CAAiB,SAAiB;YAC1C,MAAM,SAAS,GAAG,IAAA,YAAG,EAAS,SAAS,CAAC,CAAC;YACzC,IAAI,SAAS,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,KAA0B,IAAI,CAAC,CAAC,EAAkB;gBACjF,OAAO,IAAA,YAAG,EAAM,SAAS,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,EAAuB,SAAS,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC,CAAwB,CAAC;aAC1H;iBAAM;gBACN,OAAO,IAAA,YAAG,EAAM,SAAS,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,EAAuB,SAAS,CAAC,WAAW,CAAC,CAAC;aAC1F;QACF,CAAC;QAEO,CAAC,CAAc,MAAc;YACpC,OAAO,IAAI,CAAC,CAAC,GAAa,IAAI,CAAC,CAAC,CAAK,MAAM,EAAE;gBAC5C,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAK,IAAI,CAAC,CAAC,CAAW,CAAC;gBAE9C,oFAAoF;gBACpF,MAAM,sBAAsB,GAAG,IAAI,CAAC,CAAC,CAAiB,QAAQ,CAAC,iBAAiB,CAAC,CAAC;gBAElF,IAAI,IAAA,YAAG,EAAiB,sBAAsB,EAAE,MAAM,CAAC,EAAE;oBACxD,iCAAiC;oBACjC,IAAI,CAAC,CAAC,EAAY,CAAC;oBAEnB,MAAM,yBAAyB,GAAG,IAAA,YAAG,EAAS,sBAAsB,CAAC,CAAC;oBAEtE,qFAAqF;oBACrF,MAAM,+BAA+B,GAAG,IAAA,YAAG,EAAS,IAAI,CAAC,CAAC,CAAiB,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAC;oBAEzG,MAAM,SAAS,GAAG,yBAAyB,CAAC,SAAS,GAAG,+BAA+B,CAAC,SAAS,CAAC;oBAClG,IAAI,CAAC,CAAC,IAAyB,SAAS,CAAC;oBAEzC,MAAM,mBAAmB,GAAG,IAAI,CAAC,CAAC,KAAqB,QAAQ,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAwB,CAAC,CAAC,CAAC,CAAC;oBACjI,MAAM,WAAW,GAAG,yBAAyB,CAAC,WAAW,GAAG,+BAA+B,CAAC,WAAW,CAAC;oBACxG,IAAI,CAAC,CAAC,GAA0B,mBAAmB,GAAG,WAAW,CAAC;oBAClE,IAAI,CAAC,CAAC,GAAmB,QAAQ,CAAC,kBAAkB,CAAC,SAAS,CAAC;iBAC/D;qBAAM;oBACN,gCAAgC;oBAChC,MAAM;iBACN;aACD;QACF,CAAC;KACD;IAtFD,kBAsFC;IAED,MAAM,iBAAiB;QACtB,MAAM,CAAC,IAAI,CAAC,IAAS;YACpB,OAAO,IAAI,iBAAiB,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAChF,CAAC;QAMD,YACC,WAAmB,EACnB,SAAiB,EACjB,UAAkB;YAElB,IAAI,CAAC,kBAAkB,GAAG,IAAA,YAAG,EAAS,SAAS,CAAC,CAAC;YACjD,IAAI,CAAC,iBAAiB,GAAG,IAAA,YAAG,EAAS,IAAA,YAAG,EAAO,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC;YACzE,IAAI,CAAC,SAAS,GAAG,IAAA,YAAG,EAAS,WAAW,CAAC,CAAC;QAC3C,CAAC;KACD","file":"beforeEditPositionMapper.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from 'vs/editor/common/core/range';\nimport { Length, lengthAdd, lengthDiffNonNegative, lengthLessThanEqual, LengthObj, lengthOfString, lengthToObj, positionToLength, toLength } from './length';\nimport { IModelContentChange } from 'vs/editor/common/textModelEvents';\n\nexport class TextEditInfo {\n\tpublic static fromModelContentChanges(changes: IModelContentChange[]): TextEditInfo[] {\n\t\t// Must be sorted in ascending order\n\t\tconst edits = changes.map(c => {\n\t\t\tconst range = Range.lift(c.range);\n\t\t\treturn new TextEditInfo(\n\t\t\t\tpositionToLength(range.getStartPosition()),\n\t\t\t\tpositionToLength(range.getEndPosition()),\n\t\t\t\tlengthOfString(c.text)\n\t\t\t);\n\t\t}).reverse();\n\t\treturn edits;\n\t}\n\n\tconstructor(\n\t\tpublic readonly startOffset: Length,\n\t\tpublic readonly endOffset: Length,\n\t\tpublic readonly newLength: Length\n\t) {\n\t}\n\n\ttoString(): string {\n\t\treturn `[${lengthToObj(this.startOffset)}...${lengthToObj(this.endOffset)}) -> ${lengthToObj(this.newLength)}`;\n\t}\n}\n\nexport class BeforeEditPositionMapper {\n\tprivate nextEditIdx = 0;\n\tprivate deltaOldToNewLineCount = 0;\n\tprivate deltaOldToNewColumnCount = 0;\n\tprivate deltaLineIdxInOld = -1;\n\tprivate readonly edits: readonly TextEditInfoCache[];\n\n\t/**\n\t * @param edits Must be sorted by offset in ascending order.\n\t*/\n\tconstructor(\n\t\tedits: readonly TextEditInfo[],\n\t) {\n\t\tthis.edits = edits.map(edit => TextEditInfoCache.from(edit));\n\t}\n\n\t/**\n\t * @param offset Must be equal to or greater than the last offset this method has been called with.\n\t*/\n\tgetOffsetBeforeChange(offset: Length): Length {\n\t\tthis.adjustNextEdit(offset);\n\t\treturn this.translateCurToOld(offset);\n\t}\n\n\t/**\n\t * @param offset Must be equal to or greater than the last offset this method has been called with.\n\t * Returns null if there is no edit anymore.\n\t*/\n\tgetDistanceToNextChange(offset: Length): Length | null {\n\t\tthis.adjustNextEdit(offset);\n\n\t\tconst nextEdit = this.edits[this.nextEditIdx];\n\t\tconst nextChangeOffset = nextEdit ? this.translateOldToCur(nextEdit.offsetObj) : null;\n\t\tif (nextChangeOffset === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn lengthDiffNonNegative(offset, nextChangeOffset);\n\t}\n\n\tprivate translateOldToCur(oldOffsetObj: LengthObj): Length {\n\t\tif (oldOffsetObj.lineCount === this.deltaLineIdxInOld) {\n\t\t\treturn toLength(oldOffsetObj.lineCount + this.deltaOldToNewLineCount, oldOffsetObj.columnCount + this.deltaOldToNewColumnCount);\n\t\t} else {\n\t\t\treturn toLength(oldOffsetObj.lineCount + this.deltaOldToNewLineCount, oldOffsetObj.columnCount);\n\t\t}\n\t}\n\n\tprivate translateCurToOld(newOffset: Length): Length {\n\t\tconst offsetObj = lengthToObj(newOffset);\n\t\tif (offsetObj.lineCount - this.deltaOldToNewLineCount === this.deltaLineIdxInOld) {\n\t\t\treturn toLength(offsetObj.lineCount - this.deltaOldToNewLineCount, offsetObj.columnCount - this.deltaOldToNewColumnCount);\n\t\t} else {\n\t\t\treturn toLength(offsetObj.lineCount - this.deltaOldToNewLineCount, offsetObj.columnCount);\n\t\t}\n\t}\n\n\tprivate adjustNextEdit(offset: Length) {\n\t\twhile (this.nextEditIdx < this.edits.length) {\n\t\t\tconst nextEdit = this.edits[this.nextEditIdx];\n\n\t\t\t// After applying the edit, what is its end offset (considering all previous edits)?\n\t\t\tconst nextEditEndOffsetInCur = this.translateOldToCur(nextEdit.endOffsetAfterObj);\n\n\t\t\tif (lengthLessThanEqual(nextEditEndOffsetInCur, offset)) {\n\t\t\t\t// We are after the edit, skip it\n\t\t\t\tthis.nextEditIdx++;\n\n\t\t\t\tconst nextEditEndOffsetInCurObj = lengthToObj(nextEditEndOffsetInCur);\n\n\t\t\t\t// Before applying the edit, what is its end offset (considering all previous edits)?\n\t\t\t\tconst nextEditEndOffsetBeforeInCurObj = lengthToObj(this.translateOldToCur(nextEdit.endOffsetBeforeObj));\n\n\t\t\t\tconst lineDelta = nextEditEndOffsetInCurObj.lineCount - nextEditEndOffsetBeforeInCurObj.lineCount;\n\t\t\t\tthis.deltaOldToNewLineCount += lineDelta;\n\n\t\t\t\tconst previousColumnDelta = this.deltaLineIdxInOld === nextEdit.endOffsetBeforeObj.lineCount ? this.deltaOldToNewColumnCount : 0;\n\t\t\t\tconst columnDelta = nextEditEndOffsetInCurObj.columnCount - nextEditEndOffsetBeforeInCurObj.columnCount;\n\t\t\t\tthis.deltaOldToNewColumnCount = previousColumnDelta + columnDelta;\n\t\t\t\tthis.deltaLineIdxInOld = nextEdit.endOffsetBeforeObj.lineCount;\n\t\t\t} else {\n\t\t\t\t// We are in or before the edit.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass TextEditInfoCache {\n\tstatic from(edit: TextEditInfo): TextEditInfoCache {\n\t\treturn new TextEditInfoCache(edit.startOffset, edit.endOffset, edit.newLength);\n\t}\n\n\tpublic readonly endOffsetBeforeObj: LengthObj;\n\tpublic readonly endOffsetAfterObj: LengthObj;\n\tpublic readonly offsetObj: LengthObj;\n\n\tconstructor(\n\t\tstartOffset: Length,\n\t\tendOffset: Length,\n\t\ttextLength: Length,\n\t) {\n\t\tthis.endOffsetBeforeObj = lengthToObj(endOffset);\n\t\tthis.endOffsetAfterObj = lengthToObj(lengthAdd(startOffset, textLength));\n\t\tthis.offsetObj = lengthToObj(startOffset);\n\t}\n}\n"]}