{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/ast.ts"],"names":[],"mappings":"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","file":"ast.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BugIndicatingError } from 'vs/base/common/errors';\nimport { CursorColumns } from 'vs/editor/common/core/cursorColumns';\nimport { BracketKind } from 'vs/editor/common/languages/supports/languageBracketsConfiguration';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { Length, lengthAdd, lengthGetLineCount, lengthToObj, lengthZero } from './length';\nimport { SmallImmutableSet } from './smallImmutableSet';\nimport { OpeningBracketId } from './tokenizer';\n\nexport const enum AstNodeKind {\n\tText = 0,\n\tBracket = 1,\n\tPair = 2,\n\tUnexpectedClosingBracket = 3,\n\tList = 4,\n}\n\nexport type AstNode = PairAstNode | ListAstNode | BracketAstNode | InvalidBracketAstNode | TextAstNode;\n\n/**\n * The base implementation for all AST nodes.\n*/\nabstract class BaseAstNode {\n\tpublic abstract readonly kind: AstNodeKind;\n\n\tpublic abstract readonly childrenLength: number;\n\n\t/**\n\t * Might return null even if {@link idx} is smaller than {@link BaseAstNode.childrenLength}.\n\t*/\n\tpublic abstract getChild(idx: number): AstNode | null;\n\n\t/**\n\t * Try to avoid using this property, as implementations might need to allocate the resulting array.\n\t*/\n\tpublic abstract readonly children: readonly AstNode[];\n\n\t/**\n\t * Represents the set of all (potentially) missing opening bracket ids in this node.\n\t * E.g. in `{ ] ) }` that set is {`[`, `(` }.\n\t*/\n\tpublic abstract readonly missingOpeningBracketIds: SmallImmutableSet<OpeningBracketId>;\n\n\t/**\n\t * In case of a list, determines the height of the (2,3) tree.\n\t*/\n\tpublic abstract readonly listHeight: number;\n\n\tprotected _length: Length;\n\n\t/**\n\t * The length of the entire node, which should equal the sum of lengths of all children.\n\t*/\n\tpublic get length(): Length {\n\t\treturn this._length;\n\t}\n\n\tpublic constructor(length: Length) {\n\t\tthis._length = length;\n\t}\n\n\t/**\n\t * @param openBracketIds The set of all opening brackets that have not yet been closed.\n\t */\n\tpublic abstract canBeReused(\n\t\topenBracketIds: SmallImmutableSet<OpeningBracketId>\n\t): boolean;\n\n\t/**\n\t * Flattens all lists in this AST. Only for debugging.\n\t */\n\tpublic abstract flattenLists(): AstNode;\n\n\t/**\n\t * Creates a deep clone.\n\t */\n\tpublic abstract deepClone(): AstNode;\n\n\tpublic abstract computeMinIndentation(offset: Length, textModel: ITextModel): number;\n}\n\n/**\n * Represents a bracket pair including its child (e.g. `{ ... }`).\n * Might be unclosed.\n * Immutable, if all children are immutable.\n*/\nexport class PairAstNode extends BaseAstNode {\n\tpublic static create(\n\t\topeningBracket: BracketAstNode,\n\t\tchild: AstNode | null,\n\t\tclosingBracket: BracketAstNode | null\n\t) {\n\t\tlet length = openingBracket.length;\n\t\tif (child) {\n\t\t\tlength = lengthAdd(length, child.length);\n\t\t}\n\t\tif (closingBracket) {\n\t\t\tlength = lengthAdd(length, closingBracket.length);\n\t\t}\n\t\treturn new PairAstNode(length, openingBracket, child, closingBracket, child ? child.missingOpeningBracketIds : SmallImmutableSet.getEmpty());\n\t}\n\n\tpublic get kind(): AstNodeKind.Pair {\n\t\treturn AstNodeKind.Pair;\n\t}\n\tpublic get listHeight() {\n\t\treturn 0;\n\t}\n\tpublic get childrenLength(): number {\n\t\treturn 3;\n\t}\n\tpublic getChild(idx: number): AstNode | null {\n\t\tswitch (idx) {\n\t\t\tcase 0: return this.openingBracket;\n\t\t\tcase 1: return this.child;\n\t\t\tcase 2: return this.closingBracket;\n\t\t}\n\t\tthrow new Error('Invalid child index');\n\t}\n\n\t/**\n\t * Avoid using this property, it allocates an array!\n\t*/\n\tpublic get children() {\n\t\tconst result: AstNode[] = [];\n\t\tresult.push(this.openingBracket);\n\t\tif (this.child) {\n\t\t\tresult.push(this.child);\n\t\t}\n\t\tif (this.closingBracket) {\n\t\t\tresult.push(this.closingBracket);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate constructor(\n\t\tlength: Length,\n\t\tpublic readonly openingBracket: BracketAstNode,\n\t\tpublic readonly child: AstNode | null,\n\t\tpublic readonly closingBracket: BracketAstNode | null,\n\t\tpublic readonly missingOpeningBracketIds: SmallImmutableSet<OpeningBracketId>\n\t) {\n\t\tsuper(length);\n\t}\n\n\tpublic canBeReused(openBracketIds: SmallImmutableSet<OpeningBracketId>) {\n\t\tif (this.closingBracket === null) {\n\t\t\t// Unclosed pair ast nodes only\n\t\t\t// end at the end of the document\n\t\t\t// or when a parent node is closed.\n\n\t\t\t// This could be improved:\n\t\t\t// Only return false if some next token is neither \"undefined\" nor a bracket that closes a parent.\n\n\t\t\treturn false;\n\t\t}\n\n\t\tif (openBracketIds.intersects(this.missingOpeningBracketIds)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic flattenLists(): PairAstNode {\n\t\treturn PairAstNode.create(\n\t\t\tthis.openingBracket.flattenLists(),\n\t\t\tthis.child && this.child.flattenLists(),\n\t\t\tthis.closingBracket && this.closingBracket.flattenLists()\n\t\t);\n\t}\n\n\tpublic deepClone(): PairAstNode {\n\t\treturn new PairAstNode(\n\t\t\tthis.length,\n\t\t\tthis.openingBracket.deepClone(),\n\t\t\tthis.child && this.child.deepClone(),\n\t\t\tthis.closingBracket && this.closingBracket.deepClone(),\n\t\t\tthis.missingOpeningBracketIds\n\t\t);\n\t}\n\n\tpublic computeMinIndentation(offset: Length, textModel: ITextModel): number {\n\t\treturn this.child ? this.child.computeMinIndentation(lengthAdd(offset, this.openingBracket.length), textModel) : Number.MAX_SAFE_INTEGER;\n\t}\n}\n\nexport abstract class ListAstNode extends BaseAstNode {\n\t/**\n\t * This method uses more memory-efficient list nodes that can only store 2 or 3 children.\n\t*/\n\tpublic static create23(item1: AstNode, item2: AstNode, item3: AstNode | null, immutable: boolean = false): ListAstNode {\n\t\tlet length = item1.length;\n\t\tlet missingBracketIds = item1.missingOpeningBracketIds;\n\n\t\tif (item1.listHeight !== item2.listHeight) {\n\t\t\tthrow new Error('Invalid list heights');\n\t\t}\n\n\t\tlength = lengthAdd(length, item2.length);\n\t\tmissingBracketIds = missingBracketIds.merge(item2.missingOpeningBracketIds);\n\n\t\tif (item3) {\n\t\t\tif (item1.listHeight !== item3.listHeight) {\n\t\t\t\tthrow new Error('Invalid list heights');\n\t\t\t}\n\t\t\tlength = lengthAdd(length, item3.length);\n\t\t\tmissingBracketIds = missingBracketIds.merge(item3.missingOpeningBracketIds);\n\t\t}\n\t\treturn immutable\n\t\t\t? new Immutable23ListAstNode(length, item1.listHeight + 1, item1, item2, item3, missingBracketIds)\n\t\t\t: new TwoThreeListAstNode(length, item1.listHeight + 1, item1, item2, item3, missingBracketIds);\n\t}\n\n\tpublic static create(items: AstNode[], immutable: boolean = false): ListAstNode {\n\t\tif (items.length === 0) {\n\t\t\treturn this.getEmpty();\n\t\t} else {\n\t\t\tlet length = items[0].length;\n\t\t\tlet unopenedBrackets = items[0].missingOpeningBracketIds;\n\t\t\tfor (let i = 1; i < items.length; i++) {\n\t\t\t\tlength = lengthAdd(length, items[i].length);\n\t\t\t\tunopenedBrackets = unopenedBrackets.merge(items[i].missingOpeningBracketIds);\n\t\t\t}\n\t\t\treturn immutable\n\t\t\t\t? new ImmutableArrayListAstNode(length, items[0].listHeight + 1, items, unopenedBrackets)\n\t\t\t\t: new ArrayListAstNode(length, items[0].listHeight + 1, items, unopenedBrackets);\n\t\t}\n\t}\n\n\tpublic static getEmpty() {\n\t\treturn new ImmutableArrayListAstNode(lengthZero, 0, [], SmallImmutableSet.getEmpty());\n\t}\n\n\tpublic get kind(): AstNodeKind.List {\n\t\treturn AstNodeKind.List;\n\t}\n\n\tpublic get missingOpeningBracketIds(): SmallImmutableSet<OpeningBracketId> {\n\t\treturn this._missingOpeningBracketIds;\n\t}\n\n\tprivate cachedMinIndentation: number = -1;\n\n\t/**\n\t * Use ListAstNode.create.\n\t*/\n\tconstructor(\n\t\tlength: Length,\n\t\tpublic readonly listHeight: number,\n\t\tprivate _missingOpeningBracketIds: SmallImmutableSet<OpeningBracketId>\n\t) {\n\t\tsuper(length);\n\t}\n\n\tprotected throwIfImmutable(): void {\n\t\t// NOOP\n\t}\n\n\tprotected abstract setChild(idx: number, child: AstNode): void;\n\n\tpublic makeLastElementMutable(): AstNode | undefined {\n\t\tthis.throwIfImmutable();\n\t\tconst childCount = this.childrenLength;\n\t\tif (childCount === 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst lastChild = this.getChild(childCount - 1)!;\n\t\tconst mutable = lastChild.kind === AstNodeKind.List ? lastChild.toMutable() : lastChild;\n\t\tif (lastChild !== mutable) {\n\t\t\tthis.setChild(childCount - 1, mutable);\n\t\t}\n\t\treturn mutable;\n\t}\n\n\tpublic makeFirstElementMutable(): AstNode | undefined {\n\t\tthis.throwIfImmutable();\n\t\tconst childCount = this.childrenLength;\n\t\tif (childCount === 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst firstChild = this.getChild(0)!;\n\t\tconst mutable = firstChild.kind === AstNodeKind.List ? firstChild.toMutable() : firstChild;\n\t\tif (firstChild !== mutable) {\n\t\t\tthis.setChild(0, mutable);\n\t\t}\n\t\treturn mutable;\n\t}\n\n\tpublic canBeReused(openBracketIds: SmallImmutableSet<OpeningBracketId>): boolean {\n\t\tif (openBracketIds.intersects(this.missingOpeningBracketIds)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.childrenLength === 0) {\n\t\t\t// Don't reuse empty lists.\n\t\t\treturn false;\n\t\t}\n\n\t\tlet lastChild: ListAstNode = this;\n\t\twhile (lastChild.kind === AstNodeKind.List) {\n\t\t\tconst lastLength = lastChild.childrenLength;\n\t\t\tif (lastLength === 0) {\n\t\t\t\t// Empty lists should never be contained in other lists.\n\t\t\t\tthrow new BugIndicatingError();\n\t\t\t}\n\t\t\tlastChild = lastChild.getChild(lastLength - 1) as ListAstNode;\n\t\t}\n\n\t\treturn lastChild.canBeReused(openBracketIds);\n\t}\n\n\tpublic handleChildrenChanged(): void {\n\t\tthis.throwIfImmutable();\n\n\t\tconst count = this.childrenLength;\n\n\t\tlet length = this.getChild(0)!.length;\n\t\tlet unopenedBrackets = this.getChild(0)!.missingOpeningBracketIds;\n\n\t\tfor (let i = 1; i < count; i++) {\n\t\t\tconst child = this.getChild(i)!;\n\t\t\tlength = lengthAdd(length, child.length);\n\t\t\tunopenedBrackets = unopenedBrackets.merge(child.missingOpeningBracketIds);\n\t\t}\n\n\t\tthis._length = length;\n\t\tthis._missingOpeningBracketIds = unopenedBrackets;\n\t\tthis.cachedMinIndentation = -1;\n\t}\n\n\tpublic flattenLists(): ListAstNode {\n\t\tconst items: AstNode[] = [];\n\t\tfor (const c of this.children) {\n\t\t\tconst normalized = c.flattenLists();\n\t\t\tif (normalized.kind === AstNodeKind.List) {\n\t\t\t\titems.push(...normalized.children);\n\t\t\t} else {\n\t\t\t\titems.push(normalized);\n\t\t\t}\n\t\t}\n\t\treturn ListAstNode.create(items);\n\t}\n\n\tpublic computeMinIndentation(offset: Length, textModel: ITextModel): number {\n\t\tif (this.cachedMinIndentation !== -1) {\n\t\t\treturn this.cachedMinIndentation;\n\t\t}\n\n\t\tlet minIndentation = Number.MAX_SAFE_INTEGER;\n\t\tlet childOffset = offset;\n\t\tfor (let i = 0; i < this.childrenLength; i++) {\n\t\t\tconst child = this.getChild(i);\n\t\t\tif (child) {\n\t\t\t\tminIndentation = Math.min(minIndentation, child.computeMinIndentation(childOffset, textModel));\n\t\t\t\tchildOffset = lengthAdd(childOffset, child.length);\n\t\t\t}\n\t\t}\n\n\t\tthis.cachedMinIndentation = minIndentation;\n\t\treturn minIndentation;\n\t}\n\n\t/**\n\t * Creates a shallow clone that is mutable, or itself if it is already mutable.\n\t */\n\tpublic abstract toMutable(): ListAstNode;\n\n\tpublic abstract appendChildOfSameHeight(node: AstNode): void;\n\tpublic abstract unappendChild(): AstNode | undefined;\n\tpublic abstract prependChildOfSameHeight(node: AstNode): void;\n\tpublic abstract unprependChild(): AstNode | undefined;\n}\n\nclass TwoThreeListAstNode extends ListAstNode {\n\tpublic get childrenLength(): number {\n\t\treturn this._item3 !== null ? 3 : 2;\n\t}\n\tpublic getChild(idx: number): AstNode | null {\n\t\tswitch (idx) {\n\t\t\tcase 0: return this._item1;\n\t\t\tcase 1: return this._item2;\n\t\t\tcase 2: return this._item3;\n\t\t}\n\t\tthrow new Error('Invalid child index');\n\t}\n\tprotected setChild(idx: number, node: AstNode): void {\n\t\tswitch (idx) {\n\t\t\tcase 0: this._item1 = node; return;\n\t\t\tcase 1: this._item2 = node; return;\n\t\t\tcase 2: this._item3 = node; return;\n\t\t}\n\t\tthrow new Error('Invalid child index');\n\t}\n\n\tpublic get children(): readonly AstNode[] {\n\t\treturn this._item3 ? [this._item1, this._item2, this._item3] : [this._item1, this._item2];\n\t}\n\n\tpublic get item1(): AstNode {\n\t\treturn this._item1;\n\t}\n\tpublic get item2(): AstNode {\n\t\treturn this._item2;\n\t}\n\tpublic get item3(): AstNode | null {\n\t\treturn this._item3;\n\t}\n\n\tpublic constructor(\n\t\tlength: Length,\n\t\tlistHeight: number,\n\t\tprivate _item1: AstNode,\n\t\tprivate _item2: AstNode,\n\t\tprivate _item3: AstNode | null,\n\t\tmissingOpeningBracketIds: SmallImmutableSet<OpeningBracketId>\n\t) {\n\t\tsuper(length, listHeight, missingOpeningBracketIds);\n\t}\n\n\tpublic deepClone(): ListAstNode {\n\t\treturn new TwoThreeListAstNode(\n\t\t\tthis.length,\n\t\t\tthis.listHeight,\n\t\t\tthis._item1.deepClone(),\n\t\t\tthis._item2.deepClone(),\n\t\t\tthis._item3 ? this._item3.deepClone() : null,\n\t\t\tthis.missingOpeningBracketIds\n\t\t);\n\t}\n\n\tpublic appendChildOfSameHeight(node: AstNode): void {\n\t\tif (this._item3) {\n\t\t\tthrow new Error('Cannot append to a full (2,3) tree node');\n\t\t}\n\t\tthis.throwIfImmutable();\n\t\tthis._item3 = node;\n\t\tthis.handleChildrenChanged();\n\t}\n\n\tpublic unappendChild(): AstNode | undefined {\n\t\tif (!this._item3) {\n\t\t\tthrow new Error('Cannot remove from a non-full (2,3) tree node');\n\t\t}\n\t\tthis.throwIfImmutable();\n\t\tconst result = this._item3;\n\t\tthis._item3 = null;\n\t\tthis.handleChildrenChanged();\n\t\treturn result;\n\t}\n\n\tpublic prependChildOfSameHeight(node: AstNode): void {\n\t\tif (this._item3) {\n\t\t\tthrow new Error('Cannot prepend to a full (2,3) tree node');\n\t\t}\n\t\tthis.throwIfImmutable();\n\t\tthis._item3 = this._item2;\n\t\tthis._item2 = this._item1;\n\t\tthis._item1 = node;\n\t\tthis.handleChildrenChanged();\n\t}\n\n\tpublic unprependChild(): AstNode | undefined {\n\t\tif (!this._item3) {\n\t\t\tthrow new Error('Cannot remove from a non-full (2,3) tree node');\n\t\t}\n\t\tthis.throwIfImmutable();\n\t\tconst result = this._item1;\n\t\tthis._item1 = this._item2;\n\t\tthis._item2 = this._item3;\n\t\tthis._item3 = null;\n\n\t\tthis.handleChildrenChanged();\n\t\treturn result;\n\t}\n\n\toverride toMutable(): ListAstNode {\n\t\treturn this;\n\t}\n}\n\n/**\n * Immutable, if all children are immutable.\n*/\nclass Immutable23ListAstNode extends TwoThreeListAstNode {\n\toverride toMutable(): ListAstNode {\n\t\treturn new TwoThreeListAstNode(this.length, this.listHeight, this.item1, this.item2, this.item3, this.missingOpeningBracketIds);\n\t}\n\n\tprotected override throwIfImmutable(): void {\n\t\tthrow new Error('this instance is immutable');\n\t}\n}\n\n/**\n * For debugging.\n*/\nclass ArrayListAstNode extends ListAstNode {\n\tget childrenLength(): number {\n\t\treturn this._children.length;\n\t}\n\tgetChild(idx: number): AstNode | null {\n\t\treturn this._children[idx];\n\t}\n\tprotected setChild(idx: number, child: AstNode): void {\n\t\tthis._children[idx] = child;\n\t}\n\tget children(): readonly AstNode[] {\n\t\treturn this._children;\n\t}\n\n\tconstructor(\n\t\tlength: Length,\n\t\tlistHeight: number,\n\t\tprivate readonly _children: AstNode[],\n\t\tmissingOpeningBracketIds: SmallImmutableSet<OpeningBracketId>\n\t) {\n\t\tsuper(length, listHeight, missingOpeningBracketIds);\n\t}\n\n\tdeepClone(): ListAstNode {\n\t\tconst children = new Array<AstNode>(this._children.length);\n\t\tfor (let i = 0; i < this._children.length; i++) {\n\t\t\tchildren[i] = this._children[i].deepClone();\n\t\t}\n\t\treturn new ArrayListAstNode(this.length, this.listHeight, children, this.missingOpeningBracketIds);\n\t}\n\n\tpublic appendChildOfSameHeight(node: AstNode): void {\n\t\tthis.throwIfImmutable();\n\t\tthis._children.push(node);\n\t\tthis.handleChildrenChanged();\n\t}\n\n\tpublic unappendChild(): AstNode | undefined {\n\t\tthis.throwIfImmutable();\n\t\tconst item = this._children.pop();\n\t\tthis.handleChildrenChanged();\n\t\treturn item;\n\t}\n\n\tpublic prependChildOfSameHeight(node: AstNode): void {\n\t\tthis.throwIfImmutable();\n\t\tthis._children.unshift(node);\n\t\tthis.handleChildrenChanged();\n\t}\n\n\tpublic unprependChild(): AstNode | undefined {\n\t\tthis.throwIfImmutable();\n\t\tconst item = this._children.shift();\n\t\tthis.handleChildrenChanged();\n\t\treturn item;\n\t}\n\n\tpublic override toMutable(): ListAstNode {\n\t\treturn this;\n\t}\n}\n\n/**\n * Immutable, if all children are immutable.\n*/\nclass ImmutableArrayListAstNode extends ArrayListAstNode {\n\toverride toMutable(): ListAstNode {\n\t\treturn new ArrayListAstNode(this.length, this.listHeight, [...this.children], this.missingOpeningBracketIds);\n\t}\n\n\tprotected override throwIfImmutable(): void {\n\t\tthrow new Error('this instance is immutable');\n\t}\n}\n\nconst emptyArray: readonly AstNode[] = [];\n\nabstract class ImmutableLeafAstNode extends BaseAstNode {\n\tpublic get listHeight() {\n\t\treturn 0;\n\t}\n\tpublic get childrenLength(): number {\n\t\treturn 0;\n\t}\n\tpublic getChild(idx: number): AstNode | null {\n\t\treturn null;\n\t}\n\tpublic get children(): readonly AstNode[] {\n\t\treturn emptyArray;\n\t}\n\n\tpublic flattenLists(): this & AstNode {\n\t\treturn this as this & AstNode;\n\t}\n\tpublic deepClone(): this & AstNode {\n\t\treturn this as this & AstNode;\n\t}\n}\n\nexport class TextAstNode extends ImmutableLeafAstNode {\n\tpublic get kind(): AstNodeKind.Text {\n\t\treturn AstNodeKind.Text;\n\t}\n\tpublic get missingOpeningBracketIds(): SmallImmutableSet<OpeningBracketId> {\n\t\treturn SmallImmutableSet.getEmpty();\n\t}\n\n\tpublic canBeReused(_openedBracketIds: SmallImmutableSet<OpeningBracketId>) {\n\t\treturn true;\n\t}\n\n\tpublic computeMinIndentation(offset: Length, textModel: ITextModel): number {\n\t\tconst start = lengthToObj(offset);\n\t\t// Text ast nodes don't have partial indentation (ensured by the tokenizer).\n\t\t// Thus, if this text node does not start at column 0, the first line cannot have any indentation at all.\n\t\tconst startLineNumber = (start.columnCount === 0 ? start.lineCount : start.lineCount + 1) + 1;\n\t\tconst endLineNumber = lengthGetLineCount(lengthAdd(offset, this.length)) + 1;\n\n\t\tlet result = Number.MAX_SAFE_INTEGER;\n\n\t\tfor (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n\t\t\tconst firstNonWsColumn = textModel.getLineFirstNonWhitespaceColumn(lineNumber);\n\t\t\tconst lineContent = textModel.getLineContent(lineNumber);\n\t\t\tif (firstNonWsColumn === 0) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst visibleColumn = CursorColumns.visibleColumnFromColumn(lineContent, firstNonWsColumn, textModel.getOptions().tabSize)!;\n\t\t\tresult = Math.min(result, visibleColumn);\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nexport class BracketAstNode extends ImmutableLeafAstNode {\n\tpublic static create(\n\t\tlength: Length,\n\t\tbracketInfo: BracketKind,\n\t\tbracketIds: SmallImmutableSet<OpeningBracketId>\n\t): BracketAstNode {\n\t\tconst node = new BracketAstNode(length, bracketInfo, bracketIds);\n\t\treturn node;\n\t}\n\n\tpublic get kind(): AstNodeKind.Bracket {\n\t\treturn AstNodeKind.Bracket;\n\t}\n\n\tpublic get missingOpeningBracketIds(): SmallImmutableSet<OpeningBracketId> {\n\t\treturn SmallImmutableSet.getEmpty();\n\t}\n\n\tprivate constructor(\n\t\tlength: Length,\n\t\tpublic readonly bracketInfo: BracketKind,\n\t\t/**\n\t\t * In case of a opening bracket, this is the id of the opening bracket.\n\t\t * In case of a closing bracket, this contains the ids of all opening brackets it can close.\n\t\t*/\n\t\tpublic readonly bracketIds: SmallImmutableSet<OpeningBracketId>\n\t) {\n\t\tsuper(length);\n\t}\n\n\tpublic get text() {\n\t\treturn this.bracketInfo.bracketText;\n\t}\n\n\tpublic get languageId() {\n\t\treturn this.bracketInfo.languageId;\n\t}\n\n\tpublic canBeReused(_openedBracketIds: SmallImmutableSet<OpeningBracketId>) {\n\t\t// These nodes could be reused,\n\t\t// but not in a general way.\n\t\t// Their parent may be reused.\n\t\treturn false;\n\t}\n\n\tpublic computeMinIndentation(offset: Length, textModel: ITextModel): number {\n\t\treturn Number.MAX_SAFE_INTEGER;\n\t}\n}\n\nexport class InvalidBracketAstNode extends ImmutableLeafAstNode {\n\tpublic get kind(): AstNodeKind.UnexpectedClosingBracket {\n\t\treturn AstNodeKind.UnexpectedClosingBracket;\n\t}\n\n\tpublic readonly missingOpeningBracketIds: SmallImmutableSet<OpeningBracketId>;\n\n\tpublic constructor(closingBrackets: SmallImmutableSet<OpeningBracketId>, length: Length) {\n\t\tsuper(length);\n\t\tthis.missingOpeningBracketIds = closingBrackets;\n\t}\n\n\tpublic canBeReused(openedBracketIds: SmallImmutableSet<OpeningBracketId>) {\n\t\treturn !openedBracketIds.intersects(this.missingOpeningBracketIds);\n\t}\n\n\tpublic computeMinIndentation(offset: Length, textModel: ITextModel): number {\n\t\treturn Number.MAX_SAFE_INTEGER;\n\t}\n}\n"]}