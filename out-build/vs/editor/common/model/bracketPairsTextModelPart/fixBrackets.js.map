{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/model/bracketPairsTextModelPart/fixBrackets.ts"],"names":[],"mappings":"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","file":"fixBrackets.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ILanguageConfigurationService } from 'vs/editor/common/languages/languageConfigurationRegistry';\nimport { AstNode, AstNodeKind } from 'vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/ast';\nimport { LanguageAgnosticBracketTokens } from 'vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/brackets';\nimport { Length, lengthAdd, lengthGetColumnCountIfZeroLineCount, lengthZero } from 'vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/length';\nimport { parseDocument } from 'vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/parser';\nimport { DenseKeyProvider } from 'vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/smallImmutableSet';\nimport { ITokenizerSource, TextBufferTokenizer } from 'vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/tokenizer';\nimport { IViewLineTokens } from 'vs/editor/common/tokens/lineTokens';\n\nexport function fixBracketsInLine(tokens: IViewLineTokens, languageConfigurationService: ILanguageConfigurationService): string {\n\tconst denseKeyProvider = new DenseKeyProvider<string>();\n\tconst bracketTokens = new LanguageAgnosticBracketTokens(denseKeyProvider, (languageId) =>\n\t\tlanguageConfigurationService.getLanguageConfiguration(languageId)\n\t);\n\tconst tokenizer = new TextBufferTokenizer(\n\t\tnew StaticTokenizerSource([tokens]),\n\t\tbracketTokens\n\t);\n\tconst node = parseDocument(tokenizer, [], undefined, true);\n\n\tlet str = '';\n\tconst line = tokens.getLineContent();\n\n\tfunction processNode(node: AstNode, offset: Length) {\n\t\tif (node.kind === AstNodeKind.Pair) {\n\t\t\tprocessNode(node.openingBracket, offset);\n\t\t\toffset = lengthAdd(offset, node.openingBracket.length);\n\n\t\t\tif (node.child) {\n\t\t\t\tprocessNode(node.child, offset);\n\t\t\t\toffset = lengthAdd(offset, node.child.length);\n\t\t\t}\n\t\t\tif (node.closingBracket) {\n\t\t\t\tprocessNode(node.closingBracket, offset);\n\t\t\t\toffset = lengthAdd(offset, node.closingBracket.length);\n\t\t\t} else {\n\t\t\t\tconst singleLangBracketTokens = bracketTokens.getSingleLanguageBracketTokens(node.openingBracket.languageId);\n\n\t\t\t\tconst closingTokenText = singleLangBracketTokens.findClosingTokenText(node.openingBracket.bracketIds);\n\t\t\t\tstr += closingTokenText;\n\t\t\t}\n\t\t} else if (node.kind === AstNodeKind.UnexpectedClosingBracket) {\n\t\t\t// remove the bracket\n\t\t} else if (node.kind === AstNodeKind.Text || node.kind === AstNodeKind.Bracket) {\n\t\t\tstr += line.substring(\n\t\t\t\tlengthGetColumnCountIfZeroLineCount(offset),\n\t\t\t\tlengthGetColumnCountIfZeroLineCount(lengthAdd(offset, node.length))\n\t\t\t);\n\t\t} else if (node.kind === AstNodeKind.List) {\n\t\t\tfor (const child of node.children) {\n\t\t\t\tprocessNode(child, offset);\n\t\t\t\toffset = lengthAdd(offset, child.length);\n\t\t\t}\n\t\t}\n\t}\n\n\tprocessNode(node, lengthZero);\n\n\treturn str;\n}\n\nclass StaticTokenizerSource implements ITokenizerSource {\n\tconstructor(private readonly lines: IViewLineTokens[]) { }\n\n\tgetValue(): string {\n\t\treturn this.lines.map(l => l.getLineContent()).join('\\n');\n\t}\n\tgetLineCount(): number {\n\t\treturn this.lines.length;\n\t}\n\tgetLineLength(lineNumber: number): number {\n\t\treturn this.lines[lineNumber - 1].getLineContent().length;\n\t}\n\n\ttokenization = {\n\t\tgetLineTokens: (lineNumber: number): IViewLineTokens => {\n\t\t\treturn this.lines[lineNumber - 1];\n\t\t}\n\t};\n}\n"]}