{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/model/tokenizationTextModelPart.ts"],"names":[],"mappings":"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","file":"tokenizationTextModelPart.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { equals } from 'vs/base/common/arrays';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { CharCode } from 'vs/base/common/charCode';\nimport { BugIndicatingError, onUnexpectedError } from 'vs/base/common/errors';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, DisposableMap, MutableDisposable } from 'vs/base/common/lifecycle';\nimport { countEOL } from 'vs/editor/common/core/eolCounter';\nimport { LineRange } from 'vs/editor/common/core/lineRange';\nimport { IPosition, Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { IWordAtPosition, getWordAtText } from 'vs/editor/common/core/wordHelper';\nimport { StandardTokenType } from 'vs/editor/common/encodedTokenAttributes';\nimport { IBackgroundTokenizationStore, IBackgroundTokenizer, ILanguageIdCodec, IState, ITokenizationSupport, TokenizationRegistry } from 'vs/editor/common/languages';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { ILanguageConfigurationService, ResolvedLanguageConfiguration } from 'vs/editor/common/languages/languageConfigurationRegistry';\nimport { IAttachedView } from 'vs/editor/common/model';\nimport { BracketPairsTextModelPart } from 'vs/editor/common/model/bracketPairsTextModelPart/bracketPairsImpl';\nimport { AttachedViews, IAttachedViewState, TextModel } from 'vs/editor/common/model/textModel';\nimport { TextModelPart } from 'vs/editor/common/model/textModelPart';\nimport { DefaultBackgroundTokenizer, TokenizerWithStateStoreAndTextModel, TrackingTokenizationStateStore } from 'vs/editor/common/model/textModelTokens';\nimport { IModelContentChangedEvent, IModelLanguageChangedEvent, IModelLanguageConfigurationChangedEvent, IModelTokensChangedEvent } from 'vs/editor/common/textModelEvents';\nimport { BackgroundTokenizationState, ITokenizationTextModelPart } from 'vs/editor/common/tokenizationTextModelPart';\nimport { ContiguousMultilineTokens } from 'vs/editor/common/tokens/contiguousMultilineTokens';\nimport { ContiguousMultilineTokensBuilder } from 'vs/editor/common/tokens/contiguousMultilineTokensBuilder';\nimport { ContiguousTokensStore } from 'vs/editor/common/tokens/contiguousTokensStore';\nimport { LineTokens } from 'vs/editor/common/tokens/lineTokens';\nimport { SparseMultilineTokens } from 'vs/editor/common/tokens/sparseMultilineTokens';\nimport { SparseTokensStore } from 'vs/editor/common/tokens/sparseTokensStore';\n\nexport class TokenizationTextModelPart extends TextModelPart implements ITokenizationTextModelPart {\n\tprivate readonly _semanticTokens: SparseTokensStore = new SparseTokensStore(this._languageService.languageIdCodec);\n\n\tprivate readonly _onDidChangeLanguage: Emitter<IModelLanguageChangedEvent> = this._register(new Emitter<IModelLanguageChangedEvent>());\n\tpublic readonly onDidChangeLanguage: Event<IModelLanguageChangedEvent> = this._onDidChangeLanguage.event;\n\n\tprivate readonly _onDidChangeLanguageConfiguration: Emitter<IModelLanguageConfigurationChangedEvent> = this._register(new Emitter<IModelLanguageConfigurationChangedEvent>());\n\tpublic readonly onDidChangeLanguageConfiguration: Event<IModelLanguageConfigurationChangedEvent> = this._onDidChangeLanguageConfiguration.event;\n\n\tprivate readonly _onDidChangeTokens: Emitter<IModelTokensChangedEvent> = this._register(new Emitter<IModelTokensChangedEvent>());\n\tpublic readonly onDidChangeTokens: Event<IModelTokensChangedEvent> = this._onDidChangeTokens.event;\n\n\tprivate readonly grammarTokens = this._register(new GrammarTokens(this._languageService.languageIdCodec, this._textModel, () => this._languageId, this._attachedViews));\n\n\tconstructor(\n\t\tprivate readonly _languageService: ILanguageService,\n\t\tprivate readonly _languageConfigurationService: ILanguageConfigurationService,\n\t\tprivate readonly _textModel: TextModel,\n\t\tprivate readonly _bracketPairsTextModelPart: BracketPairsTextModelPart,\n\t\tprivate _languageId: string,\n\t\tprivate readonly _attachedViews: AttachedViews,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(this._languageConfigurationService.onDidChange(e => {\n\t\t\tif (e.affects(this._languageId)) {\n\t\t\t\tthis._onDidChangeLanguageConfiguration.fire({});\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.grammarTokens.onDidChangeTokens(e => {\n\t\t\tthis._emitModelTokensChangedEvent(e);\n\t\t}));\n\n\t\tthis._register(this.grammarTokens.onDidChangeBackgroundTokenizationState(e => {\n\t\t\tthis._bracketPairsTextModelPart.handleDidChangeBackgroundTokenizationState();\n\t\t}));\n\t}\n\n\t_hasListeners(): boolean {\n\t\treturn (this._onDidChangeLanguage.hasListeners()\n\t\t\t|| this._onDidChangeLanguageConfiguration.hasListeners()\n\t\t\t|| this._onDidChangeTokens.hasListeners());\n\t}\n\n\tpublic handleDidChangeContent(e: IModelContentChangedEvent): void {\n\t\tif (e.isFlush) {\n\t\t\tthis._semanticTokens.flush();\n\t\t} else if (!e.isEolChange) { // We don't have to do anything on an EOL change\n\t\t\tfor (const c of e.changes) {\n\t\t\t\tconst [eolCount, firstLineLength, lastLineLength] = countEOL(c.text);\n\n\t\t\t\tthis._semanticTokens.acceptEdit(\n\t\t\t\t\tc.range,\n\t\t\t\t\teolCount,\n\t\t\t\t\tfirstLineLength,\n\t\t\t\t\tlastLineLength,\n\t\t\t\t\tc.text.length > 0 ? c.text.charCodeAt(0) : CharCode.Null\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tthis.grammarTokens.handleDidChangeContent(e);\n\t}\n\n\tpublic handleDidChangeAttached(): void {\n\t\tthis.grammarTokens.handleDidChangeAttached();\n\t}\n\n\t/**\n\t * Includes grammar and semantic tokens.\n\t */\n\tpublic getLineTokens(lineNumber: number): LineTokens {\n\t\tthis.validateLineNumber(lineNumber);\n\t\tconst syntacticTokens = this.grammarTokens.getLineTokens(lineNumber);\n\t\treturn this._semanticTokens.addSparseTokens(lineNumber, syntacticTokens);\n\t}\n\n\tprivate _emitModelTokensChangedEvent(e: IModelTokensChangedEvent): void {\n\t\tif (!this._textModel._isDisposing()) {\n\t\t\tthis._bracketPairsTextModelPart.handleDidChangeTokens(e);\n\t\t\tthis._onDidChangeTokens.fire(e);\n\t\t}\n\t}\n\n\t// #region Grammar Tokens\n\n\tprivate validateLineNumber(lineNumber: number): void {\n\t\tif (lineNumber < 1 || lineNumber > this._textModel.getLineCount()) {\n\t\t\tthrow new BugIndicatingError('Illegal value for lineNumber');\n\t\t}\n\t}\n\n\tpublic get hasTokens(): boolean {\n\t\treturn this.grammarTokens.hasTokens;\n\t}\n\n\tpublic resetTokenization() {\n\t\tthis.grammarTokens.resetTokenization();\n\t}\n\n\tpublic get backgroundTokenizationState() {\n\t\treturn this.grammarTokens.backgroundTokenizationState;\n\t}\n\n\tpublic forceTokenization(lineNumber: number): void {\n\t\tthis.validateLineNumber(lineNumber);\n\t\tthis.grammarTokens.forceTokenization(lineNumber);\n\t}\n\n\tpublic isCheapToTokenize(lineNumber: number): boolean {\n\t\tthis.validateLineNumber(lineNumber);\n\t\treturn this.grammarTokens.isCheapToTokenize(lineNumber);\n\t}\n\n\tpublic tokenizeIfCheap(lineNumber: number): void {\n\t\tthis.validateLineNumber(lineNumber);\n\t\tthis.grammarTokens.tokenizeIfCheap(lineNumber);\n\t}\n\n\tpublic getTokenTypeIfInsertingCharacter(lineNumber: number, column: number, character: string): StandardTokenType {\n\t\treturn this.grammarTokens.getTokenTypeIfInsertingCharacter(lineNumber, column, character);\n\t}\n\n\tpublic tokenizeLineWithEdit(position: IPosition, length: number, newText: string): LineTokens | null {\n\t\treturn this.grammarTokens.tokenizeLineWithEdit(position, length, newText);\n\t}\n\n\t// #endregion\n\n\t// #region Semantic Tokens\n\n\tpublic setSemanticTokens(tokens: SparseMultilineTokens[] | null, isComplete: boolean): void {\n\t\tthis._semanticTokens.set(tokens, isComplete);\n\n\t\tthis._emitModelTokensChangedEvent({\n\t\t\tsemanticTokensApplied: tokens !== null,\n\t\t\tranges: [{ fromLineNumber: 1, toLineNumber: this._textModel.getLineCount() }],\n\t\t});\n\t}\n\n\tpublic hasCompleteSemanticTokens(): boolean {\n\t\treturn this._semanticTokens.isComplete();\n\t}\n\n\tpublic hasSomeSemanticTokens(): boolean {\n\t\treturn !this._semanticTokens.isEmpty();\n\t}\n\n\tpublic setPartialSemanticTokens(range: Range, tokens: SparseMultilineTokens[]): void {\n\t\tif (this.hasCompleteSemanticTokens()) {\n\t\t\treturn;\n\t\t}\n\t\tconst changedRange = this._textModel.validateRange(\n\t\t\tthis._semanticTokens.setPartial(range, tokens)\n\t\t);\n\n\t\tthis._emitModelTokensChangedEvent({\n\t\t\tsemanticTokensApplied: true,\n\t\t\tranges: [\n\t\t\t\t{\n\t\t\t\t\tfromLineNumber: changedRange.startLineNumber,\n\t\t\t\t\ttoLineNumber: changedRange.endLineNumber,\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t}\n\n\t// #endregion\n\n\t// #region Utility Methods\n\n\tpublic getWordAtPosition(_position: IPosition): IWordAtPosition | null {\n\t\tthis.assertNotDisposed();\n\n\t\tconst position = this._textModel.validatePosition(_position);\n\t\tconst lineContent = this._textModel.getLineContent(position.lineNumber);\n\t\tconst lineTokens = this.getLineTokens(position.lineNumber);\n\t\tconst tokenIndex = lineTokens.findTokenIndexAtOffset(position.column - 1);\n\n\t\t// (1). First try checking right biased word\n\t\tconst [rbStartOffset, rbEndOffset] = TokenizationTextModelPart._findLanguageBoundaries(lineTokens, tokenIndex);\n\t\tconst rightBiasedWord = getWordAtText(\n\t\t\tposition.column,\n\t\t\tthis.getLanguageConfiguration(lineTokens.getLanguageId(tokenIndex)).getWordDefinition(),\n\t\t\tlineContent.substring(rbStartOffset, rbEndOffset),\n\t\t\trbStartOffset\n\t\t);\n\t\t// Make sure the result touches the original passed in position\n\t\tif (\n\t\t\trightBiasedWord &&\n\t\t\trightBiasedWord.startColumn <= _position.column &&\n\t\t\t_position.column <= rightBiasedWord.endColumn\n\t\t) {\n\t\t\treturn rightBiasedWord;\n\t\t}\n\n\t\t// (2). Else, if we were at a language boundary, check the left biased word\n\t\tif (tokenIndex > 0 && rbStartOffset === position.column - 1) {\n\t\t\t// edge case, where `position` sits between two tokens belonging to two different languages\n\t\t\tconst [lbStartOffset, lbEndOffset] = TokenizationTextModelPart._findLanguageBoundaries(\n\t\t\t\tlineTokens,\n\t\t\t\ttokenIndex - 1\n\t\t\t);\n\t\t\tconst leftBiasedWord = getWordAtText(\n\t\t\t\tposition.column,\n\t\t\t\tthis.getLanguageConfiguration(lineTokens.getLanguageId(tokenIndex - 1)).getWordDefinition(),\n\t\t\t\tlineContent.substring(lbStartOffset, lbEndOffset),\n\t\t\t\tlbStartOffset\n\t\t\t);\n\t\t\t// Make sure the result touches the original passed in position\n\t\t\tif (\n\t\t\t\tleftBiasedWord &&\n\t\t\t\tleftBiasedWord.startColumn <= _position.column &&\n\t\t\t\t_position.column <= leftBiasedWord.endColumn\n\t\t\t) {\n\t\t\t\treturn leftBiasedWord;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate getLanguageConfiguration(languageId: string): ResolvedLanguageConfiguration {\n\t\treturn this._languageConfigurationService.getLanguageConfiguration(languageId);\n\t}\n\n\tprivate static _findLanguageBoundaries(lineTokens: LineTokens, tokenIndex: number): [number, number] {\n\t\tconst languageId = lineTokens.getLanguageId(tokenIndex);\n\n\t\t// go left until a different language is hit\n\t\tlet startOffset = 0;\n\t\tfor (let i = tokenIndex; i >= 0 && lineTokens.getLanguageId(i) === languageId; i--) {\n\t\t\tstartOffset = lineTokens.getStartOffset(i);\n\t\t}\n\n\t\t// go right until a different language is hit\n\t\tlet endOffset = lineTokens.getLineContent().length;\n\t\tfor (\n\t\t\tlet i = tokenIndex, tokenCount = lineTokens.getCount();\n\t\t\ti < tokenCount && lineTokens.getLanguageId(i) === languageId;\n\t\t\ti++\n\t\t) {\n\t\t\tendOffset = lineTokens.getEndOffset(i);\n\t\t}\n\n\t\treturn [startOffset, endOffset];\n\t}\n\n\tpublic getWordUntilPosition(position: IPosition): IWordAtPosition {\n\t\tconst wordAtPosition = this.getWordAtPosition(position);\n\t\tif (!wordAtPosition) {\n\t\t\treturn { word: '', startColumn: position.column, endColumn: position.column, };\n\t\t}\n\t\treturn {\n\t\t\tword: wordAtPosition.word.substr(0, position.column - wordAtPosition.startColumn),\n\t\t\tstartColumn: wordAtPosition.startColumn,\n\t\t\tendColumn: position.column,\n\t\t};\n\t}\n\n\t// #endregion\n\n\t// #region Language Id handling\n\n\tpublic getLanguageId(): string {\n\t\treturn this._languageId;\n\t}\n\n\tpublic getLanguageIdAtPosition(lineNumber: number, column: number): string {\n\t\tconst position = this._textModel.validatePosition(new Position(lineNumber, column));\n\t\tconst lineTokens = this.getLineTokens(position.lineNumber);\n\t\treturn lineTokens.getLanguageId(lineTokens.findTokenIndexAtOffset(position.column - 1));\n\t}\n\n\tpublic setLanguageId(languageId: string, source: string = 'api'): void {\n\t\tif (this._languageId === languageId) {\n\t\t\t// There's nothing to do\n\t\t\treturn;\n\t\t}\n\n\t\tconst e: IModelLanguageChangedEvent = {\n\t\t\toldLanguage: this._languageId,\n\t\t\tnewLanguage: languageId,\n\t\t\tsource\n\t\t};\n\n\t\tthis._languageId = languageId;\n\n\t\tthis._bracketPairsTextModelPart.handleDidChangeLanguage(e);\n\t\tthis.grammarTokens.resetTokenization();\n\t\tthis._onDidChangeLanguage.fire(e);\n\t\tthis._onDidChangeLanguageConfiguration.fire({});\n\t}\n\n\t// #endregion\n}\n\nclass GrammarTokens extends Disposable {\n\tprivate _tokenizer: TokenizerWithStateStoreAndTextModel | null = null;\n\tprivate _defaultBackgroundTokenizer: DefaultBackgroundTokenizer | null = null;\n\tprivate readonly _backgroundTokenizer = this._register(new MutableDisposable<IBackgroundTokenizer>());\n\n\tprivate readonly _tokens = new ContiguousTokensStore(this._languageIdCodec);\n\tprivate _debugBackgroundTokens: ContiguousTokensStore | undefined;\n\tprivate _debugBackgroundStates: TrackingTokenizationStateStore<IState> | undefined;\n\n\tprivate readonly _debugBackgroundTokenizer = this._register(new MutableDisposable<IBackgroundTokenizer>());\n\n\tprivate _backgroundTokenizationState = BackgroundTokenizationState.InProgress;\n\tpublic get backgroundTokenizationState(): BackgroundTokenizationState {\n\t\treturn this._backgroundTokenizationState;\n\t}\n\n\tprivate readonly _onDidChangeBackgroundTokenizationState = this._register(new Emitter<void>());\n\t/** @internal, should not be exposed by the text model! */\n\tpublic readonly onDidChangeBackgroundTokenizationState: Event<void> = this._onDidChangeBackgroundTokenizationState.event;\n\n\tprivate readonly _onDidChangeTokens = this._register(new Emitter<IModelTokensChangedEvent>());\n\t/** @internal, should not be exposed by the text model! */\n\tpublic readonly onDidChangeTokens: Event<IModelTokensChangedEvent> = this._onDidChangeTokens.event;\n\n\tprivate readonly _attachedViewStates = this._register(new DisposableMap<IAttachedView, AttachedViewHandler>());\n\n\tconstructor(\n\t\tprivate readonly _languageIdCodec: ILanguageIdCodec,\n\t\tprivate readonly _textModel: TextModel,\n\t\tprivate getLanguageId: () => string,\n\t\tattachedViews: AttachedViews,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(TokenizationRegistry.onDidChange((e) => {\n\t\t\tconst languageId = this.getLanguageId();\n\t\t\tif (e.changedLanguages.indexOf(languageId) === -1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.resetTokenization();\n\t\t}));\n\n\t\tthis.resetTokenization();\n\n\t\tthis._register(attachedViews.onDidChangeVisibleRanges(({ view, state }) => {\n\t\t\tif (state) {\n\t\t\t\tlet existing = this._attachedViewStates.get(view);\n\t\t\t\tif (!existing) {\n\t\t\t\t\texisting = new AttachedViewHandler(() => this.refreshRanges(existing!.lineRanges));\n\t\t\t\t\tthis._attachedViewStates.set(view, existing);\n\t\t\t\t}\n\t\t\t\texisting.handleStateChange(state);\n\t\t\t} else {\n\t\t\t\tthis._attachedViewStates.deleteAndDispose(view);\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic resetTokenization(fireTokenChangeEvent: boolean = true): void {\n\t\tthis._tokens.flush();\n\t\tthis._debugBackgroundTokens?.flush();\n\t\tif (this._debugBackgroundStates) {\n\t\t\tthis._debugBackgroundStates = new TrackingTokenizationStateStore(this._textModel.getLineCount());\n\t\t}\n\t\tif (fireTokenChangeEvent) {\n\t\t\tthis._onDidChangeTokens.fire({\n\t\t\t\tsemanticTokensApplied: false,\n\t\t\t\tranges: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfromLineNumber: 1,\n\t\t\t\t\t\ttoLineNumber: this._textModel.getLineCount(),\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t});\n\t\t}\n\n\t\tconst initializeTokenization = (): [ITokenizationSupport, IState] | [null, null] => {\n\t\t\tif (this._textModel.isTooLargeForTokenization()) {\n\t\t\t\treturn [null, null];\n\t\t\t}\n\t\t\tconst tokenizationSupport = TokenizationRegistry.get(this.getLanguageId());\n\t\t\tif (!tokenizationSupport) {\n\t\t\t\treturn [null, null];\n\t\t\t}\n\t\t\tlet initialState: IState;\n\t\t\ttry {\n\t\t\t\tinitialState = tokenizationSupport.getInitialState();\n\t\t\t} catch (e) {\n\t\t\t\tonUnexpectedError(e);\n\t\t\t\treturn [null, null];\n\t\t\t}\n\t\t\treturn [tokenizationSupport, initialState];\n\t\t};\n\n\t\tconst [tokenizationSupport, initialState] = initializeTokenization();\n\t\tif (tokenizationSupport && initialState) {\n\t\t\tthis._tokenizer = new TokenizerWithStateStoreAndTextModel(this._textModel.getLineCount(), tokenizationSupport, this._textModel, this._languageIdCodec);\n\t\t} else {\n\t\t\tthis._tokenizer = null;\n\t\t}\n\n\t\tthis._backgroundTokenizer.clear();\n\n\t\tthis._defaultBackgroundTokenizer = null;\n\t\tif (this._tokenizer) {\n\t\t\tconst b: IBackgroundTokenizationStore = {\n\t\t\t\tsetTokens: (tokens) => {\n\t\t\t\t\tthis.setTokens(tokens);\n\t\t\t\t},\n\t\t\t\tbackgroundTokenizationFinished: () => {\n\t\t\t\t\tif (this._backgroundTokenizationState === BackgroundTokenizationState.Completed) {\n\t\t\t\t\t\t// We already did a full tokenization and don't go back to progressing.\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst newState = BackgroundTokenizationState.Completed;\n\t\t\t\t\tthis._backgroundTokenizationState = newState;\n\t\t\t\t\tthis._onDidChangeBackgroundTokenizationState.fire();\n\t\t\t\t},\n\t\t\t\tsetEndState: (lineNumber, state) => {\n\t\t\t\t\tif (!this._tokenizer) { return; }\n\t\t\t\t\tconst firstInvalidEndStateLineNumber = this._tokenizer.store.getFirstInvalidEndStateLineNumber();\n\t\t\t\t\t// Don't accept states for definitely valid states, the renderer is ahead of the worker!\n\t\t\t\t\tif (firstInvalidEndStateLineNumber !== null && lineNumber >= firstInvalidEndStateLineNumber) {\n\t\t\t\t\t\tthis._tokenizer?.store.setEndState(lineNumber, state);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t};\n\n\t\t\tif (tokenizationSupport && tokenizationSupport.createBackgroundTokenizer && !tokenizationSupport.backgroundTokenizerShouldOnlyVerifyTokens) {\n\t\t\t\tthis._backgroundTokenizer.value = tokenizationSupport.createBackgroundTokenizer(this._textModel, b);\n\t\t\t}\n\t\t\tif (!this._backgroundTokenizer.value) {\n\t\t\t\tthis._backgroundTokenizer.value = this._defaultBackgroundTokenizer =\n\t\t\t\t\tnew DefaultBackgroundTokenizer(this._tokenizer, b);\n\t\t\t\tthis._defaultBackgroundTokenizer.handleChanges();\n\t\t\t}\n\n\t\t\tif (tokenizationSupport?.backgroundTokenizerShouldOnlyVerifyTokens && tokenizationSupport.createBackgroundTokenizer) {\n\t\t\t\tthis._debugBackgroundTokens = new ContiguousTokensStore(this._languageIdCodec);\n\t\t\t\tthis._debugBackgroundStates = new TrackingTokenizationStateStore(this._textModel.getLineCount());\n\t\t\t\tthis._debugBackgroundTokenizer.clear();\n\t\t\t\tthis._debugBackgroundTokenizer.value = tokenizationSupport.createBackgroundTokenizer(this._textModel, {\n\t\t\t\t\tsetTokens: (tokens) => {\n\t\t\t\t\t\tthis._debugBackgroundTokens?.setMultilineTokens(tokens, this._textModel);\n\t\t\t\t\t},\n\t\t\t\t\tbackgroundTokenizationFinished() {\n\t\t\t\t\t\t// NO OP\n\t\t\t\t\t},\n\t\t\t\t\tsetEndState: (lineNumber, state) => {\n\t\t\t\t\t\tthis._debugBackgroundStates?.setEndState(lineNumber, state);\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis._debugBackgroundTokens = undefined;\n\t\t\t\tthis._debugBackgroundStates = undefined;\n\t\t\t\tthis._debugBackgroundTokenizer.value = undefined;\n\t\t\t}\n\t\t}\n\n\t\tthis.refreshAllVisibleLineTokens();\n\t}\n\n\tpublic handleDidChangeAttached() {\n\t\tthis._defaultBackgroundTokenizer?.handleChanges();\n\t}\n\n\tpublic handleDidChangeContent(e: IModelContentChangedEvent): void {\n\t\tif (e.isFlush) {\n\t\t\t// Don't fire the event, as the view might not have got the text change event yet\n\t\t\tthis.resetTokenization(false);\n\t\t} else if (!e.isEolChange) { // We don't have to do anything on an EOL change\n\t\t\tfor (const c of e.changes) {\n\t\t\t\tconst [eolCount, firstLineLength] = countEOL(c.text);\n\n\t\t\t\tthis._tokens.acceptEdit(c.range, eolCount, firstLineLength);\n\t\t\t\tthis._debugBackgroundTokens?.acceptEdit(c.range, eolCount, firstLineLength);\n\t\t\t}\n\t\t\tthis._debugBackgroundStates?.acceptChanges(e.changes);\n\n\t\t\tif (this._tokenizer) {\n\t\t\t\tthis._tokenizer.store.acceptChanges(e.changes);\n\t\t\t}\n\t\t\tthis._defaultBackgroundTokenizer?.handleChanges();\n\t\t}\n\t}\n\n\tprivate setTokens(tokens: ContiguousMultilineTokens[]): { changes: { fromLineNumber: number; toLineNumber: number }[] } {\n\t\tconst { changes } = this._tokens.setMultilineTokens(tokens, this._textModel);\n\n\t\tif (changes.length > 0) {\n\t\t\tthis._onDidChangeTokens.fire({ semanticTokensApplied: false, ranges: changes, });\n\t\t}\n\n\t\treturn { changes: changes };\n\t}\n\n\tprivate refreshAllVisibleLineTokens(): void {\n\t\tconst ranges = LineRange.joinMany([...this._attachedViewStates].map(([_, s]) => s.lineRanges));\n\t\tthis.refreshRanges(ranges);\n\t}\n\n\tprivate refreshRanges(ranges: readonly LineRange[]): void {\n\t\tfor (const range of ranges) {\n\t\t\tthis.refreshRange(range.startLineNumber, range.endLineNumberExclusive - 1);\n\t\t}\n\t}\n\n\tprivate refreshRange(startLineNumber: number, endLineNumber: number): void {\n\t\tif (!this._tokenizer) {\n\t\t\treturn;\n\t\t}\n\n\t\tstartLineNumber = Math.max(1, Math.min(this._textModel.getLineCount(), startLineNumber));\n\t\tendLineNumber = Math.min(this._textModel.getLineCount(), endLineNumber);\n\n\t\tconst builder = new ContiguousMultilineTokensBuilder();\n\t\tconst { heuristicTokens } = this._tokenizer.tokenizeHeuristically(builder, startLineNumber, endLineNumber);\n\t\tconst changedTokens = this.setTokens(builder.finalize());\n\n\t\tif (heuristicTokens) {\n\t\t\t// We overrode tokens with heuristically computed ones.\n\t\t\t// Because old states might get reused (thus stopping invalidation),\n\t\t\t// we have to explicitly request the tokens for the changed ranges again.\n\t\t\tfor (const c of changedTokens.changes) {\n\t\t\t\tthis._backgroundTokenizer.value?.requestTokens(c.fromLineNumber, c.toLineNumber + 1);\n\t\t\t}\n\t\t}\n\n\t\tthis._defaultBackgroundTokenizer?.checkFinished();\n\t}\n\n\tpublic forceTokenization(lineNumber: number): void {\n\t\tconst builder = new ContiguousMultilineTokensBuilder();\n\t\tthis._tokenizer?.updateTokensUntilLine(builder, lineNumber);\n\t\tthis.setTokens(builder.finalize());\n\t\tthis._defaultBackgroundTokenizer?.checkFinished();\n\t}\n\n\tpublic isCheapToTokenize(lineNumber: number): boolean {\n\t\tif (!this._tokenizer) {\n\t\t\treturn true;\n\t\t}\n\t\treturn this._tokenizer.isCheapToTokenize(lineNumber);\n\t}\n\n\tpublic tokenizeIfCheap(lineNumber: number): void {\n\t\tif (this.isCheapToTokenize(lineNumber)) {\n\t\t\tthis.forceTokenization(lineNumber);\n\t\t}\n\t}\n\n\tpublic getLineTokens(lineNumber: number): LineTokens {\n\t\tconst lineText = this._textModel.getLineContent(lineNumber);\n\t\tconst result = this._tokens.getTokens(\n\t\t\tthis._textModel.getLanguageId(),\n\t\t\tlineNumber - 1,\n\t\t\tlineText\n\t\t);\n\t\tif (this._debugBackgroundTokens && this._debugBackgroundStates && this._tokenizer) {\n\t\t\tif (this._debugBackgroundStates.getFirstInvalidEndStateLineNumberOrMax() > lineNumber && this._tokenizer.store.getFirstInvalidEndStateLineNumberOrMax() > lineNumber) {\n\t\t\t\tconst backgroundResult = this._debugBackgroundTokens.getTokens(\n\t\t\t\t\tthis._textModel.getLanguageId(),\n\t\t\t\t\tlineNumber - 1,\n\t\t\t\t\tlineText\n\t\t\t\t);\n\t\t\t\tif (!result.equals(backgroundResult) && this._debugBackgroundTokenizer.value?.reportMismatchingTokens) {\n\t\t\t\t\tthis._debugBackgroundTokenizer.value.reportMismatchingTokens(lineNumber);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic getTokenTypeIfInsertingCharacter(lineNumber: number, column: number, character: string): StandardTokenType {\n\t\tif (!this._tokenizer) {\n\t\t\treturn StandardTokenType.Other;\n\t\t}\n\n\t\tconst position = this._textModel.validatePosition(new Position(lineNumber, column));\n\t\tthis.forceTokenization(position.lineNumber);\n\t\treturn this._tokenizer.getTokenTypeIfInsertingCharacter(position, character);\n\t}\n\n\tpublic tokenizeLineWithEdit(position: IPosition, length: number, newText: string): LineTokens | null {\n\t\tif (!this._tokenizer) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst validatedPosition = this._textModel.validatePosition(position);\n\t\tthis.forceTokenization(validatedPosition.lineNumber);\n\t\treturn this._tokenizer.tokenizeLineWithEdit(validatedPosition, length, newText);\n\t}\n\n\tpublic get hasTokens(): boolean {\n\t\treturn this._tokens.hasTokens;\n\t}\n}\n\nclass AttachedViewHandler extends Disposable {\n\tprivate readonly runner = this._register(new RunOnceScheduler(() => this.update(), 50));\n\n\tprivate _computedLineRanges: readonly LineRange[] = [];\n\tprivate _lineRanges: readonly LineRange[] = [];\n\tpublic get lineRanges(): readonly LineRange[] { return this._lineRanges; }\n\n\tconstructor(private readonly _refreshTokens: () => void) {\n\t\tsuper();\n\t}\n\n\tprivate update(): void {\n\t\tif (equals(this._computedLineRanges, this._lineRanges, (a, b) => a.equals(b))) {\n\t\t\treturn;\n\t\t}\n\t\tthis._computedLineRanges = this._lineRanges;\n\t\tthis._refreshTokens();\n\t}\n\n\tpublic handleStateChange(state: IAttachedViewState): void {\n\t\tthis._lineRanges = state.visibleLineRanges;\n\t\tif (state.stabilized) {\n\t\t\tthis.runner.cancel();\n\t\t\tthis.update();\n\t\t} else {\n\t\t\tthis.runner.schedule();\n\t\t}\n\t}\n}\n"]}