{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/viewModel/viewModelLines.ts"],"names":[],"mappings":"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","file":"viewModelLines.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from 'vs/base/common/arrays';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { WrappingIndent } from 'vs/editor/common/config/editorOptions';\nimport { FontInfo } from 'vs/editor/common/config/fontInfo';\nimport { IPosition, Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { IModelDecoration, IModelDeltaDecoration, ITextModel, PositionAffinity } from 'vs/editor/common/model';\nimport { IActiveIndentGuideInfo, BracketGuideOptions, IndentGuide, IndentGuideHorizontalLine } from 'vs/editor/common/textModelGuides';\nimport { ModelDecorationOptions } from 'vs/editor/common/model/textModel';\nimport { LineInjectedText } from 'vs/editor/common/textModelEvents';\nimport * as viewEvents from 'vs/editor/common/viewEvents';\nimport { createModelLineProjection, IModelLineProjection } from 'vs/editor/common/viewModel/modelLineProjection';\nimport { ILineBreaksComputer, ModelLineProjectionData, InjectedText, ILineBreaksComputerFactory } from 'vs/editor/common/modelLineProjectionData';\nimport { ConstantTimePrefixSumComputer } from 'vs/editor/common/model/prefixSumComputer';\nimport { ICoordinatesConverter, ViewLineData } from 'vs/editor/common/viewModel';\n\nexport interface IViewModelLines extends IDisposable {\n\tcreateCoordinatesConverter(): ICoordinatesConverter;\n\n\tsetWrappingSettings(fontInfo: FontInfo, wrappingStrategy: 'simple' | 'advanced', wrappingColumn: number, wrappingIndent: WrappingIndent, wordBreak: 'normal' | 'keepAll'): boolean;\n\tsetTabSize(newTabSize: number): boolean;\n\tgetHiddenAreas(): Range[];\n\tsetHiddenAreas(_ranges: readonly Range[]): boolean;\n\n\tcreateLineBreaksComputer(): ILineBreaksComputer;\n\tonModelFlushed(): void;\n\tonModelLinesDeleted(versionId: number | null, fromLineNumber: number, toLineNumber: number): viewEvents.ViewLinesDeletedEvent | null;\n\tonModelLinesInserted(versionId: number | null, fromLineNumber: number, toLineNumber: number, lineBreaks: (ModelLineProjectionData | null)[]): viewEvents.ViewLinesInsertedEvent | null;\n\tonModelLineChanged(versionId: number | null, lineNumber: number, lineBreakData: ModelLineProjectionData | null): [boolean, viewEvents.ViewLinesChangedEvent | null, viewEvents.ViewLinesInsertedEvent | null, viewEvents.ViewLinesDeletedEvent | null];\n\tacceptVersionId(versionId: number): void;\n\n\tgetViewLineCount(): number;\n\tgetActiveIndentGuide(viewLineNumber: number, minLineNumber: number, maxLineNumber: number): IActiveIndentGuideInfo;\n\tgetViewLinesIndentGuides(viewStartLineNumber: number, viewEndLineNumber: number): number[];\n\tgetViewLinesBracketGuides(startLineNumber: number, endLineNumber: number, activePosition: IPosition | null, options: BracketGuideOptions): IndentGuide[][];\n\tgetViewLineContent(viewLineNumber: number): string;\n\tgetViewLineLength(viewLineNumber: number): number;\n\tgetViewLineMinColumn(viewLineNumber: number): number;\n\tgetViewLineMaxColumn(viewLineNumber: number): number;\n\tgetViewLineData(viewLineNumber: number): ViewLineData;\n\tgetViewLinesData(viewStartLineNumber: number, viewEndLineNumber: number, needed: boolean[]): Array<ViewLineData | null>;\n\n\tgetDecorationsInRange(range: Range, ownerId: number, filterOutValidation: boolean, onlyMinimapDecorations: boolean, onlyMarginDecorations: boolean): IModelDecoration[];\n\n\tgetInjectedTextAt(viewPosition: Position): InjectedText | null;\n\n\tnormalizePosition(position: Position, affinity: PositionAffinity): Position;\n\t/**\n\t * Gets the column at which indentation stops at a given line.\n\t * @internal\n\t*/\n\tgetLineIndentColumn(lineNumber: number): number;\n}\n\nexport class ViewModelLinesFromProjectedModel implements IViewModelLines {\n\tprivate readonly _editorId: number;\n\tprivate readonly model: ITextModel;\n\tprivate _validModelVersionId: number;\n\n\tprivate readonly _domLineBreaksComputerFactory: ILineBreaksComputerFactory;\n\tprivate readonly _monospaceLineBreaksComputerFactory: ILineBreaksComputerFactory;\n\n\tprivate fontInfo: FontInfo;\n\tprivate tabSize: number;\n\tprivate wrappingColumn: number;\n\tprivate wrappingIndent: WrappingIndent;\n\tprivate wordBreak: 'normal' | 'keepAll';\n\tprivate wrappingStrategy: 'simple' | 'advanced';\n\n\tprivate modelLineProjections!: IModelLineProjection[];\n\n\t/**\n\t * Reflects the sum of the line counts of all projected model lines.\n\t*/\n\tprivate projectedModelLineLineCounts!: ConstantTimePrefixSumComputer;\n\n\tprivate hiddenAreasDecorationIds!: string[];\n\n\tconstructor(\n\t\teditorId: number,\n\t\tmodel: ITextModel,\n\t\tdomLineBreaksComputerFactory: ILineBreaksComputerFactory,\n\t\tmonospaceLineBreaksComputerFactory: ILineBreaksComputerFactory,\n\t\tfontInfo: FontInfo,\n\t\ttabSize: number,\n\t\twrappingStrategy: 'simple' | 'advanced',\n\t\twrappingColumn: number,\n\t\twrappingIndent: WrappingIndent,\n\t\twordBreak: 'normal' | 'keepAll'\n\t) {\n\t\tthis._editorId = editorId;\n\t\tthis.model = model;\n\t\tthis._validModelVersionId = -1;\n\t\tthis._domLineBreaksComputerFactory = domLineBreaksComputerFactory;\n\t\tthis._monospaceLineBreaksComputerFactory = monospaceLineBreaksComputerFactory;\n\t\tthis.fontInfo = fontInfo;\n\t\tthis.tabSize = tabSize;\n\t\tthis.wrappingStrategy = wrappingStrategy;\n\t\tthis.wrappingColumn = wrappingColumn;\n\t\tthis.wrappingIndent = wrappingIndent;\n\t\tthis.wordBreak = wordBreak;\n\n\t\tthis._constructLines(/*resetHiddenAreas*/true, null);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, []);\n\t}\n\n\tpublic createCoordinatesConverter(): ICoordinatesConverter {\n\t\treturn new CoordinatesConverter(this);\n\t}\n\n\tprivate _constructLines(resetHiddenAreas: boolean, previousLineBreaks: ((ModelLineProjectionData | null)[]) | null): void {\n\t\tthis.modelLineProjections = [];\n\n\t\tif (resetHiddenAreas) {\n\t\t\tthis.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, []);\n\t\t}\n\n\t\tconst linesContent = this.model.getLinesContent();\n\t\tconst injectedTextDecorations = this.model.getInjectedTextDecorations(this._editorId);\n\t\tconst lineCount = linesContent.length;\n\t\tconst lineBreaksComputer = this.createLineBreaksComputer();\n\n\t\tconst injectedTextQueue = new arrays.ArrayQueue(LineInjectedText.fromDecorations(injectedTextDecorations));\n\t\tfor (let i = 0; i < lineCount; i++) {\n\t\t\tconst lineInjectedText = injectedTextQueue.takeWhile(t => t.lineNumber === i + 1);\n\t\t\tlineBreaksComputer.addRequest(linesContent[i], lineInjectedText, previousLineBreaks ? previousLineBreaks[i] : null);\n\t\t}\n\t\tconst linesBreaks = lineBreaksComputer.finalize();\n\n\t\tconst values: number[] = [];\n\n\t\tconst hiddenAreas = this.hiddenAreasDecorationIds.map((areaId) => this.model.getDecorationRange(areaId)!).sort(Range.compareRangesUsingStarts);\n\t\tlet hiddenAreaStart = 1, hiddenAreaEnd = 0;\n\t\tlet hiddenAreaIdx = -1;\n\t\tlet nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\n\n\t\tfor (let i = 0; i < lineCount; i++) {\n\t\t\tconst lineNumber = i + 1;\n\n\t\t\tif (lineNumber === nextLineNumberToUpdateHiddenArea) {\n\t\t\t\thiddenAreaIdx++;\n\t\t\t\thiddenAreaStart = hiddenAreas[hiddenAreaIdx]!.startLineNumber;\n\t\t\t\thiddenAreaEnd = hiddenAreas[hiddenAreaIdx]!.endLineNumber;\n\t\t\t\tnextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : lineCount + 2;\n\t\t\t}\n\n\t\t\tconst isInHiddenArea = (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd);\n\t\t\tconst line = createModelLineProjection(linesBreaks[i], !isInHiddenArea);\n\t\t\tvalues[i] = line.getViewLineCount();\n\t\t\tthis.modelLineProjections[i] = line;\n\t\t}\n\n\t\tthis._validModelVersionId = this.model.getVersionId();\n\n\t\tthis.projectedModelLineLineCounts = new ConstantTimePrefixSumComputer(values);\n\t}\n\n\tpublic getHiddenAreas(): Range[] {\n\t\treturn this.hiddenAreasDecorationIds.map(\n\t\t\t(decId) => this.model.getDecorationRange(decId)!\n\t\t);\n\t}\n\n\tpublic setHiddenAreas(_ranges: Range[]): boolean {\n\t\tconst validatedRanges = _ranges.map(r => this.model.validateRange(r));\n\t\tconst newRanges = normalizeLineRanges(validatedRanges);\n\n\t\t// TODO@Martin: Please stop calling this method on each model change!\n\n\t\t// This checks if there really was a change\n\t\tconst oldRanges = this.hiddenAreasDecorationIds.map((areaId) => this.model.getDecorationRange(areaId)!).sort(Range.compareRangesUsingStarts);\n\t\tif (newRanges.length === oldRanges.length) {\n\t\t\tlet hasDifference = false;\n\t\t\tfor (let i = 0; i < newRanges.length; i++) {\n\t\t\t\tif (!newRanges[i].equalsRange(oldRanges[i])) {\n\t\t\t\t\thasDifference = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!hasDifference) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tconst newDecorations = newRanges.map<IModelDeltaDecoration>(\n\t\t\t(r) =>\n\t\t\t({\n\t\t\t\trange: r,\n\t\t\t\toptions: ModelDecorationOptions.EMPTY,\n\t\t\t})\n\t\t);\n\n\t\tthis.hiddenAreasDecorationIds = this.model.deltaDecorations(this.hiddenAreasDecorationIds, newDecorations);\n\n\t\tconst hiddenAreas = newRanges;\n\t\tlet hiddenAreaStart = 1, hiddenAreaEnd = 0;\n\t\tlet hiddenAreaIdx = -1;\n\t\tlet nextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.modelLineProjections.length + 2;\n\n\t\tlet hasVisibleLine = false;\n\t\tfor (let i = 0; i < this.modelLineProjections.length; i++) {\n\t\t\tconst lineNumber = i + 1;\n\n\t\t\tif (lineNumber === nextLineNumberToUpdateHiddenArea) {\n\t\t\t\thiddenAreaIdx++;\n\t\t\t\thiddenAreaStart = hiddenAreas[hiddenAreaIdx].startLineNumber;\n\t\t\t\thiddenAreaEnd = hiddenAreas[hiddenAreaIdx].endLineNumber;\n\t\t\t\tnextLineNumberToUpdateHiddenArea = (hiddenAreaIdx + 1 < hiddenAreas.length) ? hiddenAreaEnd + 1 : this.modelLineProjections.length + 2;\n\t\t\t}\n\n\t\t\tlet lineChanged = false;\n\t\t\tif (lineNumber >= hiddenAreaStart && lineNumber <= hiddenAreaEnd) {\n\t\t\t\t// Line should be hidden\n\t\t\t\tif (this.modelLineProjections[i].isVisible()) {\n\t\t\t\t\tthis.modelLineProjections[i] = this.modelLineProjections[i].setVisible(false);\n\t\t\t\t\tlineChanged = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\thasVisibleLine = true;\n\t\t\t\t// Line should be visible\n\t\t\t\tif (!this.modelLineProjections[i].isVisible()) {\n\t\t\t\t\tthis.modelLineProjections[i] = this.modelLineProjections[i].setVisible(true);\n\t\t\t\t\tlineChanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (lineChanged) {\n\t\t\t\tconst newOutputLineCount = this.modelLineProjections[i].getViewLineCount();\n\t\t\t\tthis.projectedModelLineLineCounts.setValue(i, newOutputLineCount);\n\t\t\t}\n\t\t}\n\n\t\tif (!hasVisibleLine) {\n\t\t\t// Cannot have everything be hidden => reveal everything!\n\t\t\tthis.setHiddenAreas([]);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic modelPositionIsVisible(modelLineNumber: number, _modelColumn: number): boolean {\n\t\tif (modelLineNumber < 1 || modelLineNumber > this.modelLineProjections.length) {\n\t\t\t// invalid arguments\n\t\t\treturn false;\n\t\t}\n\t\treturn this.modelLineProjections[modelLineNumber - 1].isVisible();\n\t}\n\n\tpublic getModelLineViewLineCount(modelLineNumber: number): number {\n\t\tif (modelLineNumber < 1 || modelLineNumber > this.modelLineProjections.length) {\n\t\t\t// invalid arguments\n\t\t\treturn 1;\n\t\t}\n\t\treturn this.modelLineProjections[modelLineNumber - 1].getViewLineCount();\n\t}\n\n\tpublic setTabSize(newTabSize: number): boolean {\n\t\tif (this.tabSize === newTabSize) {\n\t\t\treturn false;\n\t\t}\n\t\tthis.tabSize = newTabSize;\n\n\t\tthis._constructLines(/*resetHiddenAreas*/false, null);\n\n\t\treturn true;\n\t}\n\n\tpublic setWrappingSettings(fontInfo: FontInfo, wrappingStrategy: 'simple' | 'advanced', wrappingColumn: number, wrappingIndent: WrappingIndent, wordBreak: 'normal' | 'keepAll'): boolean {\n\t\tconst equalFontInfo = this.fontInfo.equals(fontInfo);\n\t\tconst equalWrappingStrategy = (this.wrappingStrategy === wrappingStrategy);\n\t\tconst equalWrappingColumn = (this.wrappingColumn === wrappingColumn);\n\t\tconst equalWrappingIndent = (this.wrappingIndent === wrappingIndent);\n\t\tconst equalWordBreak = (this.wordBreak === wordBreak);\n\t\tif (equalFontInfo && equalWrappingStrategy && equalWrappingColumn && equalWrappingIndent && equalWordBreak) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst onlyWrappingColumnChanged = (equalFontInfo && equalWrappingStrategy && !equalWrappingColumn && equalWrappingIndent && equalWordBreak);\n\n\t\tthis.fontInfo = fontInfo;\n\t\tthis.wrappingStrategy = wrappingStrategy;\n\t\tthis.wrappingColumn = wrappingColumn;\n\t\tthis.wrappingIndent = wrappingIndent;\n\t\tthis.wordBreak = wordBreak;\n\n\t\tlet previousLineBreaks: ((ModelLineProjectionData | null)[]) | null = null;\n\t\tif (onlyWrappingColumnChanged) {\n\t\t\tpreviousLineBreaks = [];\n\t\t\tfor (let i = 0, len = this.modelLineProjections.length; i < len; i++) {\n\t\t\t\tpreviousLineBreaks[i] = this.modelLineProjections[i].getProjectionData();\n\t\t\t}\n\t\t}\n\n\t\tthis._constructLines(/*resetHiddenAreas*/false, previousLineBreaks);\n\n\t\treturn true;\n\t}\n\n\tpublic createLineBreaksComputer(): ILineBreaksComputer {\n\t\tconst lineBreaksComputerFactory = (\n\t\t\tthis.wrappingStrategy === 'advanced'\n\t\t\t\t? this._domLineBreaksComputerFactory\n\t\t\t\t: this._monospaceLineBreaksComputerFactory\n\t\t);\n\t\treturn lineBreaksComputerFactory.createLineBreaksComputer(this.fontInfo, this.tabSize, this.wrappingColumn, this.wrappingIndent, this.wordBreak);\n\t}\n\n\tpublic onModelFlushed(): void {\n\t\tthis._constructLines(/*resetHiddenAreas*/true, null);\n\t}\n\n\tpublic onModelLinesDeleted(versionId: number | null, fromLineNumber: number, toLineNumber: number): viewEvents.ViewLinesDeletedEvent | null {\n\t\tif (!versionId || versionId <= this._validModelVersionId) {\n\t\t\t// Here we check for versionId in case the lines were reconstructed in the meantime.\n\t\t\t// We don't want to apply stale change events on top of a newer read model state.\n\t\t\treturn null;\n\t\t}\n\n\t\tconst outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.projectedModelLineLineCounts.getPrefixSum(fromLineNumber - 1) + 1);\n\t\tconst outputToLineNumber = this.projectedModelLineLineCounts.getPrefixSum(toLineNumber);\n\n\t\tthis.modelLineProjections.splice(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\n\t\tthis.projectedModelLineLineCounts.removeValues(fromLineNumber - 1, toLineNumber - fromLineNumber + 1);\n\n\t\treturn new viewEvents.ViewLinesDeletedEvent(outputFromLineNumber, outputToLineNumber);\n\t}\n\n\tpublic onModelLinesInserted(versionId: number | null, fromLineNumber: number, _toLineNumber: number, lineBreaks: (ModelLineProjectionData | null)[]): viewEvents.ViewLinesInsertedEvent | null {\n\t\tif (!versionId || versionId <= this._validModelVersionId) {\n\t\t\t// Here we check for versionId in case the lines were reconstructed in the meantime.\n\t\t\t// We don't want to apply stale change events on top of a newer read model state.\n\t\t\treturn null;\n\t\t}\n\n\t\t// cannot use this.getHiddenAreas() because those decorations have already seen the effect of this model change\n\t\tconst isInHiddenArea = (fromLineNumber > 2 && !this.modelLineProjections[fromLineNumber - 2].isVisible());\n\n\t\tconst outputFromLineNumber = (fromLineNumber === 1 ? 1 : this.projectedModelLineLineCounts.getPrefixSum(fromLineNumber - 1) + 1);\n\n\t\tlet totalOutputLineCount = 0;\n\t\tconst insertLines: IModelLineProjection[] = [];\n\t\tconst insertPrefixSumValues: number[] = [];\n\n\t\tfor (let i = 0, len = lineBreaks.length; i < len; i++) {\n\t\t\tconst line = createModelLineProjection(lineBreaks[i], !isInHiddenArea);\n\t\t\tinsertLines.push(line);\n\n\t\t\tconst outputLineCount = line.getViewLineCount();\n\t\t\ttotalOutputLineCount += outputLineCount;\n\t\t\tinsertPrefixSumValues[i] = outputLineCount;\n\t\t}\n\n\t\t// TODO@Alex: use arrays.arrayInsert\n\t\tthis.modelLineProjections =\n\t\t\tthis.modelLineProjections.slice(0, fromLineNumber - 1)\n\t\t\t\t.concat(insertLines)\n\t\t\t\t.concat(this.modelLineProjections.slice(fromLineNumber - 1));\n\n\t\tthis.projectedModelLineLineCounts.insertValues(fromLineNumber - 1, insertPrefixSumValues);\n\n\t\treturn new viewEvents.ViewLinesInsertedEvent(outputFromLineNumber, outputFromLineNumber + totalOutputLineCount - 1);\n\t}\n\n\tpublic onModelLineChanged(versionId: number | null, lineNumber: number, lineBreakData: ModelLineProjectionData | null): [boolean, viewEvents.ViewLinesChangedEvent | null, viewEvents.ViewLinesInsertedEvent | null, viewEvents.ViewLinesDeletedEvent | null] {\n\t\tif (versionId !== null && versionId <= this._validModelVersionId) {\n\t\t\t// Here we check for versionId in case the lines were reconstructed in the meantime.\n\t\t\t// We don't want to apply stale change events on top of a newer read model state.\n\t\t\treturn [false, null, null, null];\n\t\t}\n\n\t\tconst lineIndex = lineNumber - 1;\n\n\t\tconst oldOutputLineCount = this.modelLineProjections[lineIndex].getViewLineCount();\n\t\tconst isVisible = this.modelLineProjections[lineIndex].isVisible();\n\t\tconst line = createModelLineProjection(lineBreakData, isVisible);\n\t\tthis.modelLineProjections[lineIndex] = line;\n\t\tconst newOutputLineCount = this.modelLineProjections[lineIndex].getViewLineCount();\n\n\t\tlet lineMappingChanged = false;\n\t\tlet changeFrom = 0;\n\t\tlet changeTo = -1;\n\t\tlet insertFrom = 0;\n\t\tlet insertTo = -1;\n\t\tlet deleteFrom = 0;\n\t\tlet deleteTo = -1;\n\n\t\tif (oldOutputLineCount > newOutputLineCount) {\n\t\t\tchangeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n\t\t\tchangeTo = changeFrom + newOutputLineCount - 1;\n\t\t\tdeleteFrom = changeTo + 1;\n\t\t\tdeleteTo = deleteFrom + (oldOutputLineCount - newOutputLineCount) - 1;\n\t\t\tlineMappingChanged = true;\n\t\t} else if (oldOutputLineCount < newOutputLineCount) {\n\t\t\tchangeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n\t\t\tchangeTo = changeFrom + oldOutputLineCount - 1;\n\t\t\tinsertFrom = changeTo + 1;\n\t\t\tinsertTo = insertFrom + (newOutputLineCount - oldOutputLineCount) - 1;\n\t\t\tlineMappingChanged = true;\n\t\t} else {\n\t\t\tchangeFrom = this.projectedModelLineLineCounts.getPrefixSum(lineNumber - 1) + 1;\n\t\t\tchangeTo = changeFrom + newOutputLineCount - 1;\n\t\t}\n\n\t\tthis.projectedModelLineLineCounts.setValue(lineIndex, newOutputLineCount);\n\n\t\tconst viewLinesChangedEvent = (changeFrom <= changeTo ? new viewEvents.ViewLinesChangedEvent(changeFrom, changeTo - changeFrom + 1) : null);\n\t\tconst viewLinesInsertedEvent = (insertFrom <= insertTo ? new viewEvents.ViewLinesInsertedEvent(insertFrom, insertTo) : null);\n\t\tconst viewLinesDeletedEvent = (deleteFrom <= deleteTo ? new viewEvents.ViewLinesDeletedEvent(deleteFrom, deleteTo) : null);\n\n\t\treturn [lineMappingChanged, viewLinesChangedEvent, viewLinesInsertedEvent, viewLinesDeletedEvent];\n\t}\n\n\tpublic acceptVersionId(versionId: number): void {\n\t\tthis._validModelVersionId = versionId;\n\t\tif (this.modelLineProjections.length === 1 && !this.modelLineProjections[0].isVisible()) {\n\t\t\t// At least one line must be visible => reset hidden areas\n\t\t\tthis.setHiddenAreas([]);\n\t\t}\n\t}\n\n\tpublic getViewLineCount(): number {\n\t\treturn this.projectedModelLineLineCounts.getTotalSum();\n\t}\n\n\tprivate _toValidViewLineNumber(viewLineNumber: number): number {\n\t\tif (viewLineNumber < 1) {\n\t\t\treturn 1;\n\t\t}\n\t\tconst viewLineCount = this.getViewLineCount();\n\t\tif (viewLineNumber > viewLineCount) {\n\t\t\treturn viewLineCount;\n\t\t}\n\t\treturn viewLineNumber | 0;\n\t}\n\n\tpublic getActiveIndentGuide(viewLineNumber: number, minLineNumber: number, maxLineNumber: number): IActiveIndentGuideInfo {\n\t\tviewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n\t\tminLineNumber = this._toValidViewLineNumber(minLineNumber);\n\t\tmaxLineNumber = this._toValidViewLineNumber(maxLineNumber);\n\n\t\tconst modelPosition = this.convertViewPositionToModelPosition(viewLineNumber, this.getViewLineMinColumn(viewLineNumber));\n\t\tconst modelMinPosition = this.convertViewPositionToModelPosition(minLineNumber, this.getViewLineMinColumn(minLineNumber));\n\t\tconst modelMaxPosition = this.convertViewPositionToModelPosition(maxLineNumber, this.getViewLineMinColumn(maxLineNumber));\n\t\tconst result = this.model.guides.getActiveIndentGuide(modelPosition.lineNumber, modelMinPosition.lineNumber, modelMaxPosition.lineNumber);\n\n\t\tconst viewStartPosition = this.convertModelPositionToViewPosition(result.startLineNumber, 1);\n\t\tconst viewEndPosition = this.convertModelPositionToViewPosition(result.endLineNumber, this.model.getLineMaxColumn(result.endLineNumber));\n\t\treturn {\n\t\t\tstartLineNumber: viewStartPosition.lineNumber,\n\t\t\tendLineNumber: viewEndPosition.lineNumber,\n\t\t\tindent: result.indent\n\t\t};\n\t}\n\n\t// #region ViewLineInfo\n\n\tprivate getViewLineInfo(viewLineNumber: number): ViewLineInfo {\n\t\tviewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n\t\tconst r = this.projectedModelLineLineCounts.getIndexOf(viewLineNumber - 1);\n\t\tconst lineIndex = r.index;\n\t\tconst remainder = r.remainder;\n\t\treturn new ViewLineInfo(lineIndex + 1, remainder);\n\t}\n\n\tprivate getMinColumnOfViewLine(viewLineInfo: ViewLineInfo): number {\n\t\treturn this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewLineMinColumn(\n\t\t\tthis.model,\n\t\t\tviewLineInfo.modelLineNumber,\n\t\t\tviewLineInfo.modelLineWrappedLineIdx\n\t\t);\n\t}\n\n\tprivate getMaxColumnOfViewLine(viewLineInfo: ViewLineInfo): number {\n\t\treturn this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewLineMaxColumn(\n\t\t\tthis.model,\n\t\t\tviewLineInfo.modelLineNumber,\n\t\t\tviewLineInfo.modelLineWrappedLineIdx\n\t\t);\n\t}\n\n\tprivate getModelStartPositionOfViewLine(viewLineInfo: ViewLineInfo): Position {\n\t\tconst line = this.modelLineProjections[viewLineInfo.modelLineNumber - 1];\n\t\tconst minViewColumn = line.getViewLineMinColumn(\n\t\t\tthis.model,\n\t\t\tviewLineInfo.modelLineNumber,\n\t\t\tviewLineInfo.modelLineWrappedLineIdx\n\t\t);\n\t\tconst column = line.getModelColumnOfViewPosition(\n\t\t\tviewLineInfo.modelLineWrappedLineIdx,\n\t\t\tminViewColumn\n\t\t);\n\t\treturn new Position(viewLineInfo.modelLineNumber, column);\n\t}\n\n\tprivate getModelEndPositionOfViewLine(viewLineInfo: ViewLineInfo): Position {\n\t\tconst line = this.modelLineProjections[viewLineInfo.modelLineNumber - 1];\n\t\tconst maxViewColumn = line.getViewLineMaxColumn(\n\t\t\tthis.model,\n\t\t\tviewLineInfo.modelLineNumber,\n\t\t\tviewLineInfo.modelLineWrappedLineIdx\n\t\t);\n\t\tconst column = line.getModelColumnOfViewPosition(\n\t\t\tviewLineInfo.modelLineWrappedLineIdx,\n\t\t\tmaxViewColumn\n\t\t);\n\t\treturn new Position(viewLineInfo.modelLineNumber, column);\n\t}\n\n\tprivate getViewLineInfosGroupedByModelRanges(viewStartLineNumber: number, viewEndLineNumber: number): ViewLineInfoGroupedByModelRange[] {\n\t\tconst startViewLine = this.getViewLineInfo(viewStartLineNumber);\n\t\tconst endViewLine = this.getViewLineInfo(viewEndLineNumber);\n\n\t\tconst result = new Array<ViewLineInfoGroupedByModelRange>();\n\t\tlet lastVisibleModelPos: Position | null = this.getModelStartPositionOfViewLine(startViewLine);\n\t\tlet viewLines = new Array<ViewLineInfo>();\n\n\t\tfor (let curModelLine = startViewLine.modelLineNumber; curModelLine <= endViewLine.modelLineNumber; curModelLine++) {\n\t\t\tconst line = this.modelLineProjections[curModelLine - 1];\n\n\t\t\tif (line.isVisible()) {\n\t\t\t\tconst startOffset =\n\t\t\t\t\tcurModelLine === startViewLine.modelLineNumber\n\t\t\t\t\t\t? startViewLine.modelLineWrappedLineIdx\n\t\t\t\t\t\t: 0;\n\n\t\t\t\tconst endOffset =\n\t\t\t\t\tcurModelLine === endViewLine.modelLineNumber\n\t\t\t\t\t\t? endViewLine.modelLineWrappedLineIdx + 1\n\t\t\t\t\t\t: line.getViewLineCount();\n\n\t\t\t\tfor (let i = startOffset; i < endOffset; i++) {\n\t\t\t\t\tviewLines.push(new ViewLineInfo(curModelLine, i));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!line.isVisible() && lastVisibleModelPos) {\n\t\t\t\tconst lastVisibleModelPos2 = new Position(curModelLine - 1, this.model.getLineMaxColumn(curModelLine - 1) + 1);\n\n\t\t\t\tconst modelRange = Range.fromPositions(lastVisibleModelPos, lastVisibleModelPos2);\n\t\t\t\tresult.push(new ViewLineInfoGroupedByModelRange(modelRange, viewLines));\n\t\t\t\tviewLines = [];\n\n\t\t\t\tlastVisibleModelPos = null;\n\t\t\t} else if (line.isVisible() && !lastVisibleModelPos) {\n\t\t\t\tlastVisibleModelPos = new Position(curModelLine, 1);\n\t\t\t}\n\t\t}\n\n\t\tif (lastVisibleModelPos) {\n\t\t\tconst modelRange = Range.fromPositions(lastVisibleModelPos, this.getModelEndPositionOfViewLine(endViewLine));\n\t\t\tresult.push(new ViewLineInfoGroupedByModelRange(modelRange, viewLines));\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t// #endregion\n\n\tpublic getViewLinesBracketGuides(viewStartLineNumber: number, viewEndLineNumber: number, activeViewPosition: IPosition | null, options: BracketGuideOptions): IndentGuide[][] {\n\t\tconst modelActivePosition = activeViewPosition ? this.convertViewPositionToModelPosition(activeViewPosition.lineNumber, activeViewPosition.column) : null;\n\t\tconst resultPerViewLine: IndentGuide[][] = [];\n\n\t\tfor (const group of this.getViewLineInfosGroupedByModelRanges(viewStartLineNumber, viewEndLineNumber)) {\n\t\t\tconst modelRangeStartLineNumber = group.modelRange.startLineNumber;\n\n\t\t\tconst bracketGuidesPerModelLine = this.model.guides.getLinesBracketGuides(\n\t\t\t\tmodelRangeStartLineNumber,\n\t\t\t\tgroup.modelRange.endLineNumber,\n\t\t\t\tmodelActivePosition,\n\t\t\t\toptions\n\t\t\t);\n\n\t\t\tfor (const viewLineInfo of group.viewLines) {\n\n\t\t\t\tconst bracketGuides = bracketGuidesPerModelLine[viewLineInfo.modelLineNumber - modelRangeStartLineNumber];\n\n\t\t\t\t// visibleColumns stay as they are (this is a bug and needs to be fixed, but it is not a regression)\n\t\t\t\t// model-columns must be converted to view-model columns.\n\t\t\t\tconst result = bracketGuides.map(g => {\n\t\t\t\t\tif (g.forWrappedLinesAfterColumn !== -1) {\n\t\t\t\t\t\tconst p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.forWrappedLinesAfterColumn);\n\t\t\t\t\t\tif (p.lineNumber >= viewLineInfo.modelLineWrappedLineIdx) {\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (g.forWrappedLinesBeforeOrAtColumn !== -1) {\n\t\t\t\t\t\tconst p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.forWrappedLinesBeforeOrAtColumn);\n\t\t\t\t\t\tif (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!g.horizontalLine) {\n\t\t\t\t\t\treturn g;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet column = -1;\n\t\t\t\t\tif (g.column !== -1) {\n\t\t\t\t\t\tconst p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.column);\n\t\t\t\t\t\tif (p.lineNumber === viewLineInfo.modelLineWrappedLineIdx) {\n\t\t\t\t\t\t\tcolumn = p.column;\n\t\t\t\t\t\t} else if (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n\t\t\t\t\t\t\tcolumn = this.getMinColumnOfViewLine(viewLineInfo);\n\t\t\t\t\t\t} else if (p.lineNumber > viewLineInfo.modelLineWrappedLineIdx) {\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tconst viewPosition = this.convertModelPositionToViewPosition(viewLineInfo.modelLineNumber, g.horizontalLine.endColumn);\n\t\t\t\t\tconst p = this.modelLineProjections[viewLineInfo.modelLineNumber - 1].getViewPositionOfModelPosition(0, g.horizontalLine.endColumn);\n\t\t\t\t\tif (p.lineNumber === viewLineInfo.modelLineWrappedLineIdx) {\n\t\t\t\t\t\treturn new IndentGuide(g.visibleColumn, column, g.className,\n\t\t\t\t\t\t\tnew IndentGuideHorizontalLine(g.horizontalLine.top,\n\t\t\t\t\t\t\t\tviewPosition.column),\n\t\t\t\t\t\t\t- 1,\n\t\t\t\t\t\t\t-1,\n\t\t\t\t\t\t);\n\t\t\t\t\t} else if (p.lineNumber < viewLineInfo.modelLineWrappedLineIdx) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (g.visibleColumn !== -1) {\n\t\t\t\t\t\t\t// Don't repeat horizontal lines that use visibleColumn for unrelated lines.\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn new IndentGuide(g.visibleColumn, column, g.className,\n\t\t\t\t\t\t\tnew IndentGuideHorizontalLine(g.horizontalLine.top,\n\t\t\t\t\t\t\t\tthis.getMaxColumnOfViewLine(viewLineInfo)\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t-1,\n\t\t\t\t\t\t\t-1,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tresultPerViewLine.push(result.filter((r): r is IndentGuide => !!r));\n\n\t\t\t}\n\t\t}\n\n\t\treturn resultPerViewLine;\n\t}\n\n\tpublic getViewLinesIndentGuides(viewStartLineNumber: number, viewEndLineNumber: number): number[] {\n\t\t// TODO: Use the same code as in `getViewLinesBracketGuides`.\n\t\t// Future TODO: Merge with `getViewLinesBracketGuides`.\n\t\t// However, this requires more refactoring of indent guides.\n\t\tviewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\n\t\tviewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\n\n\t\tconst modelStart = this.convertViewPositionToModelPosition(viewStartLineNumber, this.getViewLineMinColumn(viewStartLineNumber));\n\t\tconst modelEnd = this.convertViewPositionToModelPosition(viewEndLineNumber, this.getViewLineMaxColumn(viewEndLineNumber));\n\n\t\tlet result: number[] = [];\n\t\tconst resultRepeatCount: number[] = [];\n\t\tconst resultRepeatOption: IndentGuideRepeatOption[] = [];\n\t\tconst modelStartLineIndex = modelStart.lineNumber - 1;\n\t\tconst modelEndLineIndex = modelEnd.lineNumber - 1;\n\n\t\tlet reqStart: Position | null = null;\n\t\tfor (let modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\n\t\t\tconst line = this.modelLineProjections[modelLineIndex];\n\t\t\tif (line.isVisible()) {\n\t\t\t\tconst viewLineStartIndex = line.getViewLineNumberOfModelPosition(0, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\n\t\t\t\tconst viewLineEndIndex = line.getViewLineNumberOfModelPosition(0, this.model.getLineMaxColumn(modelLineIndex + 1));\n\t\t\t\tconst count = viewLineEndIndex - viewLineStartIndex + 1;\n\t\t\t\tlet option = IndentGuideRepeatOption.BlockNone;\n\t\t\t\tif (count > 1 && line.getViewLineMinColumn(this.model, modelLineIndex + 1, viewLineEndIndex) === 1) {\n\t\t\t\t\t// wrapped lines should block indent guides\n\t\t\t\t\toption = (viewLineStartIndex === 0 ? IndentGuideRepeatOption.BlockSubsequent : IndentGuideRepeatOption.BlockAll);\n\t\t\t\t}\n\t\t\t\tresultRepeatCount.push(count);\n\t\t\t\tresultRepeatOption.push(option);\n\t\t\t\t// merge into previous request\n\t\t\t\tif (reqStart === null) {\n\t\t\t\t\treqStart = new Position(modelLineIndex + 1, 0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// hit invisible line => flush request\n\t\t\t\tif (reqStart !== null) {\n\t\t\t\t\tresult = result.concat(this.model.guides.getLinesIndentGuides(reqStart.lineNumber, modelLineIndex));\n\t\t\t\t\treqStart = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (reqStart !== null) {\n\t\t\tresult = result.concat(this.model.guides.getLinesIndentGuides(reqStart.lineNumber, modelEnd.lineNumber));\n\t\t\treqStart = null;\n\t\t}\n\n\t\tconst viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\n\t\tconst viewIndents = new Array<number>(viewLineCount);\n\t\tlet currIndex = 0;\n\t\tfor (let i = 0, len = result.length; i < len; i++) {\n\t\t\tlet value = result[i];\n\t\t\tconst count = Math.min(viewLineCount - currIndex, resultRepeatCount[i]);\n\t\t\tconst option = resultRepeatOption[i];\n\t\t\tlet blockAtIndex: number;\n\t\t\tif (option === IndentGuideRepeatOption.BlockAll) {\n\t\t\t\tblockAtIndex = 0;\n\t\t\t} else if (option === IndentGuideRepeatOption.BlockSubsequent) {\n\t\t\t\tblockAtIndex = 1;\n\t\t\t} else {\n\t\t\t\tblockAtIndex = count;\n\t\t\t}\n\t\t\tfor (let j = 0; j < count; j++) {\n\t\t\t\tif (j === blockAtIndex) {\n\t\t\t\t\tvalue = 0;\n\t\t\t\t}\n\t\t\t\tviewIndents[currIndex++] = value;\n\t\t\t}\n\t\t}\n\t\treturn viewIndents;\n\t}\n\n\tpublic getViewLineContent(viewLineNumber: number): string {\n\t\tconst info = this.getViewLineInfo(viewLineNumber);\n\t\treturn this.modelLineProjections[info.modelLineNumber - 1].getViewLineContent(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n\t}\n\n\tpublic getViewLineLength(viewLineNumber: number): number {\n\t\tconst info = this.getViewLineInfo(viewLineNumber);\n\t\treturn this.modelLineProjections[info.modelLineNumber - 1].getViewLineLength(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n\t}\n\n\tpublic getViewLineMinColumn(viewLineNumber: number): number {\n\t\tconst info = this.getViewLineInfo(viewLineNumber);\n\t\treturn this.modelLineProjections[info.modelLineNumber - 1].getViewLineMinColumn(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n\t}\n\n\tpublic getViewLineMaxColumn(viewLineNumber: number): number {\n\t\tconst info = this.getViewLineInfo(viewLineNumber);\n\t\treturn this.modelLineProjections[info.modelLineNumber - 1].getViewLineMaxColumn(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n\t}\n\n\tpublic getViewLineData(viewLineNumber: number): ViewLineData {\n\t\tconst info = this.getViewLineInfo(viewLineNumber);\n\t\treturn this.modelLineProjections[info.modelLineNumber - 1].getViewLineData(this.model, info.modelLineNumber, info.modelLineWrappedLineIdx);\n\t}\n\n\tpublic getViewLinesData(viewStartLineNumber: number, viewEndLineNumber: number, needed: boolean[]): ViewLineData[] {\n\n\t\tviewStartLineNumber = this._toValidViewLineNumber(viewStartLineNumber);\n\t\tviewEndLineNumber = this._toValidViewLineNumber(viewEndLineNumber);\n\n\t\tconst start = this.projectedModelLineLineCounts.getIndexOf(viewStartLineNumber - 1);\n\t\tlet viewLineNumber = viewStartLineNumber;\n\t\tconst startModelLineIndex = start.index;\n\t\tconst startRemainder = start.remainder;\n\n\t\tconst result: ViewLineData[] = [];\n\t\tfor (let modelLineIndex = startModelLineIndex, len = this.model.getLineCount(); modelLineIndex < len; modelLineIndex++) {\n\t\t\tconst line = this.modelLineProjections[modelLineIndex];\n\t\t\tif (!line.isVisible()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst fromViewLineIndex = (modelLineIndex === startModelLineIndex ? startRemainder : 0);\n\t\t\tlet remainingViewLineCount = line.getViewLineCount() - fromViewLineIndex;\n\n\t\t\tlet lastLine = false;\n\t\t\tif (viewLineNumber + remainingViewLineCount > viewEndLineNumber) {\n\t\t\t\tlastLine = true;\n\t\t\t\tremainingViewLineCount = viewEndLineNumber - viewLineNumber + 1;\n\t\t\t}\n\n\t\t\tline.getViewLinesData(this.model, modelLineIndex + 1, fromViewLineIndex, remainingViewLineCount, viewLineNumber - viewStartLineNumber, needed, result);\n\n\t\t\tviewLineNumber += remainingViewLineCount;\n\n\t\t\tif (lastLine) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic validateViewPosition(viewLineNumber: number, viewColumn: number, expectedModelPosition: Position): Position {\n\t\tviewLineNumber = this._toValidViewLineNumber(viewLineNumber);\n\n\t\tconst r = this.projectedModelLineLineCounts.getIndexOf(viewLineNumber - 1);\n\t\tconst lineIndex = r.index;\n\t\tconst remainder = r.remainder;\n\n\t\tconst line = this.modelLineProjections[lineIndex];\n\n\t\tconst minColumn = line.getViewLineMinColumn(this.model, lineIndex + 1, remainder);\n\t\tconst maxColumn = line.getViewLineMaxColumn(this.model, lineIndex + 1, remainder);\n\t\tif (viewColumn < minColumn) {\n\t\t\tviewColumn = minColumn;\n\t\t}\n\t\tif (viewColumn > maxColumn) {\n\t\t\tviewColumn = maxColumn;\n\t\t}\n\n\t\tconst computedModelColumn = line.getModelColumnOfViewPosition(remainder, viewColumn);\n\t\tconst computedModelPosition = this.model.validatePosition(new Position(lineIndex + 1, computedModelColumn));\n\n\t\tif (computedModelPosition.equals(expectedModelPosition)) {\n\t\t\treturn new Position(viewLineNumber, viewColumn);\n\t\t}\n\n\t\treturn this.convertModelPositionToViewPosition(expectedModelPosition.lineNumber, expectedModelPosition.column);\n\t}\n\n\tpublic validateViewRange(viewRange: Range, expectedModelRange: Range): Range {\n\t\tconst validViewStart = this.validateViewPosition(viewRange.startLineNumber, viewRange.startColumn, expectedModelRange.getStartPosition());\n\t\tconst validViewEnd = this.validateViewPosition(viewRange.endLineNumber, viewRange.endColumn, expectedModelRange.getEndPosition());\n\t\treturn new Range(validViewStart.lineNumber, validViewStart.column, validViewEnd.lineNumber, validViewEnd.column);\n\t}\n\n\tpublic convertViewPositionToModelPosition(viewLineNumber: number, viewColumn: number): Position {\n\t\tconst info = this.getViewLineInfo(viewLineNumber);\n\n\t\tconst inputColumn = this.modelLineProjections[info.modelLineNumber - 1].getModelColumnOfViewPosition(info.modelLineWrappedLineIdx, viewColumn);\n\t\t// console.log('out -> in ' + viewLineNumber + ',' + viewColumn + ' ===> ' + (lineIndex+1) + ',' + inputColumn);\n\t\treturn this.model.validatePosition(new Position(info.modelLineNumber, inputColumn));\n\t}\n\n\tpublic convertViewRangeToModelRange(viewRange: Range): Range {\n\t\tconst start = this.convertViewPositionToModelPosition(viewRange.startLineNumber, viewRange.startColumn);\n\t\tconst end = this.convertViewPositionToModelPosition(viewRange.endLineNumber, viewRange.endColumn);\n\t\treturn new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n\t}\n\n\tpublic convertModelPositionToViewPosition(_modelLineNumber: number, _modelColumn: number, affinity: PositionAffinity = PositionAffinity.None, allowZeroLineNumber: boolean = false, belowHiddenRanges: boolean = false): Position {\n\n\t\tconst validPosition = this.model.validatePosition(new Position(_modelLineNumber, _modelColumn));\n\t\tconst inputLineNumber = validPosition.lineNumber;\n\t\tconst inputColumn = validPosition.column;\n\n\t\tlet lineIndex = inputLineNumber - 1, lineIndexChanged = false;\n\t\tif (belowHiddenRanges) {\n\t\t\twhile (lineIndex < this.modelLineProjections.length && !this.modelLineProjections[lineIndex].isVisible()) {\n\t\t\t\tlineIndex++;\n\t\t\t\tlineIndexChanged = true;\n\t\t\t}\n\t\t} else {\n\t\t\twhile (lineIndex > 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n\t\t\t\tlineIndex--;\n\t\t\t\tlineIndexChanged = true;\n\t\t\t}\n\t\t}\n\t\tif (lineIndex === 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n\t\t\t// Could not reach a real line\n\t\t\t// console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + 1 + ',' + 1);\n\t\t\t// TODO@alexdima@hediet this isn't soo pretty\n\t\t\treturn new Position(allowZeroLineNumber ? 0 : 1, 1);\n\t\t}\n\t\tconst deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n\n\t\tlet r: Position;\n\t\tif (lineIndexChanged) {\n\t\t\tif (belowHiddenRanges) {\n\t\t\t\tr = this.modelLineProjections[lineIndex].getViewPositionOfModelPosition(deltaLineNumber, 1, affinity);\n\t\t\t} else {\n\t\t\t\tr = this.modelLineProjections[lineIndex].getViewPositionOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1), affinity);\n\t\t\t}\n\t\t} else {\n\t\t\tr = this.modelLineProjections[inputLineNumber - 1].getViewPositionOfModelPosition(deltaLineNumber, inputColumn, affinity);\n\t\t}\n\n\t\t// console.log('in -> out ' + inputLineNumber + ',' + inputColumn + ' ===> ' + r.lineNumber + ',' + r);\n\t\treturn r;\n\t}\n\n\t/**\n\t * @param affinity The affinity in case of an empty range. Has no effect for non-empty ranges.\n\t*/\n\tpublic convertModelRangeToViewRange(modelRange: Range, affinity: PositionAffinity = PositionAffinity.Left): Range {\n\t\tif (modelRange.isEmpty()) {\n\t\t\tconst start = this.convertModelPositionToViewPosition(modelRange.startLineNumber, modelRange.startColumn, affinity);\n\t\t\treturn Range.fromPositions(start);\n\t\t} else {\n\t\t\tconst start = this.convertModelPositionToViewPosition(modelRange.startLineNumber, modelRange.startColumn, PositionAffinity.Right);\n\t\t\tconst end = this.convertModelPositionToViewPosition(modelRange.endLineNumber, modelRange.endColumn, PositionAffinity.Left);\n\t\t\treturn new Range(start.lineNumber, start.column, end.lineNumber, end.column);\n\t\t}\n\t}\n\n\tpublic getViewLineNumberOfModelPosition(modelLineNumber: number, modelColumn: number): number {\n\t\tlet lineIndex = modelLineNumber - 1;\n\t\tif (this.modelLineProjections[lineIndex].isVisible()) {\n\t\t\t// this model line is visible\n\t\t\tconst deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n\t\t\treturn this.modelLineProjections[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber, modelColumn);\n\t\t}\n\n\t\t// this model line is not visible\n\t\twhile (lineIndex > 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n\t\t\tlineIndex--;\n\t\t}\n\t\tif (lineIndex === 0 && !this.modelLineProjections[lineIndex].isVisible()) {\n\t\t\t// Could not reach a real line\n\t\t\treturn 1;\n\t\t}\n\t\tconst deltaLineNumber = 1 + this.projectedModelLineLineCounts.getPrefixSum(lineIndex);\n\t\treturn this.modelLineProjections[lineIndex].getViewLineNumberOfModelPosition(deltaLineNumber, this.model.getLineMaxColumn(lineIndex + 1));\n\t}\n\n\tpublic getDecorationsInRange(range: Range, ownerId: number, filterOutValidation: boolean, onlyMinimapDecorations: boolean, onlyMarginDecorations: boolean): IModelDecoration[] {\n\t\tconst modelStart = this.convertViewPositionToModelPosition(range.startLineNumber, range.startColumn);\n\t\tconst modelEnd = this.convertViewPositionToModelPosition(range.endLineNumber, range.endColumn);\n\n\t\tif (modelEnd.lineNumber - modelStart.lineNumber <= range.endLineNumber - range.startLineNumber) {\n\t\t\t// most likely there are no hidden lines => fast path\n\t\t\t// fetch decorations from column 1 to cover the case of wrapped lines that have whole line decorations at column 1\n\t\t\treturn this.model.getDecorationsInRange(new Range(modelStart.lineNumber, 1, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation, onlyMinimapDecorations, onlyMarginDecorations);\n\t\t}\n\n\t\tlet result: IModelDecoration[] = [];\n\t\tconst modelStartLineIndex = modelStart.lineNumber - 1;\n\t\tconst modelEndLineIndex = modelEnd.lineNumber - 1;\n\n\t\tlet reqStart: Position | null = null;\n\t\tfor (let modelLineIndex = modelStartLineIndex; modelLineIndex <= modelEndLineIndex; modelLineIndex++) {\n\t\t\tconst line = this.modelLineProjections[modelLineIndex];\n\t\t\tif (line.isVisible()) {\n\t\t\t\t// merge into previous request\n\t\t\t\tif (reqStart === null) {\n\t\t\t\t\treqStart = new Position(modelLineIndex + 1, modelLineIndex === modelStartLineIndex ? modelStart.column : 1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// hit invisible line => flush request\n\t\t\t\tif (reqStart !== null) {\n\t\t\t\t\tconst maxLineColumn = this.model.getLineMaxColumn(modelLineIndex);\n\t\t\t\t\tresult = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelLineIndex, maxLineColumn), ownerId, filterOutValidation, onlyMinimapDecorations));\n\t\t\t\t\treqStart = null;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (reqStart !== null) {\n\t\t\tresult = result.concat(this.model.getDecorationsInRange(new Range(reqStart.lineNumber, reqStart.column, modelEnd.lineNumber, modelEnd.column), ownerId, filterOutValidation, onlyMinimapDecorations));\n\t\t\treqStart = null;\n\t\t}\n\n\t\tresult.sort((a, b) => {\n\t\t\tconst res = Range.compareRangesUsingStarts(a.range, b.range);\n\t\t\tif (res === 0) {\n\t\t\t\tif (a.id < b.id) {\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (a.id > b.id) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\treturn res;\n\t\t});\n\n\t\t// Eliminate duplicate decorations that might have intersected our visible ranges multiple times\n\t\tconst finalResult: IModelDecoration[] = [];\n\t\tlet finalResultLen = 0;\n\t\tlet prevDecId: string | null = null;\n\t\tfor (const dec of result) {\n\t\t\tconst decId = dec.id;\n\t\t\tif (prevDecId === decId) {\n\t\t\t\t// skip\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tprevDecId = decId;\n\t\t\tfinalResult[finalResultLen++] = dec;\n\t\t}\n\n\t\treturn finalResult;\n\t}\n\n\tpublic getInjectedTextAt(position: Position): InjectedText | null {\n\t\tconst info = this.getViewLineInfo(position.lineNumber);\n\t\treturn this.modelLineProjections[info.modelLineNumber - 1].getInjectedTextAt(info.modelLineWrappedLineIdx, position.column);\n\t}\n\n\tnormalizePosition(position: Position, affinity: PositionAffinity): Position {\n\t\tconst info = this.getViewLineInfo(position.lineNumber);\n\t\treturn this.modelLineProjections[info.modelLineNumber - 1].normalizePosition(info.modelLineWrappedLineIdx, position, affinity);\n\t}\n\n\tpublic getLineIndentColumn(lineNumber: number): number {\n\t\tconst info = this.getViewLineInfo(lineNumber);\n\t\tif (info.modelLineWrappedLineIdx === 0) {\n\t\t\treturn this.model.getLineIndentColumn(info.modelLineNumber);\n\t\t}\n\n\t\t// wrapped lines have no indentation.\n\t\t// We deliberately don't handle the case that indentation is wrapped\n\t\t// to avoid two view lines reporting indentation for the very same model line.\n\t\treturn 0;\n\t}\n}\n\n/**\n * Overlapping unsorted ranges:\n * [   )      [ )       [  )\n *    [    )      [       )\n * ->\n * Non overlapping sorted ranges:\n * [       )  [ ) [        )\n *\n * Note: This function only considers line information! Columns are ignored.\n*/\nfunction normalizeLineRanges(ranges: Range[]): Range[] {\n\tif (ranges.length === 0) {\n\t\treturn [];\n\t}\n\n\tconst sortedRanges = ranges.slice();\n\tsortedRanges.sort(Range.compareRangesUsingStarts);\n\n\tconst result: Range[] = [];\n\tlet currentRangeStart = sortedRanges[0].startLineNumber;\n\tlet currentRangeEnd = sortedRanges[0].endLineNumber;\n\n\tfor (let i = 1, len = sortedRanges.length; i < len; i++) {\n\t\tconst range = sortedRanges[i];\n\n\t\tif (range.startLineNumber > currentRangeEnd + 1) {\n\t\t\tresult.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\n\t\t\tcurrentRangeStart = range.startLineNumber;\n\t\t\tcurrentRangeEnd = range.endLineNumber;\n\t\t} else if (range.endLineNumber > currentRangeEnd) {\n\t\t\tcurrentRangeEnd = range.endLineNumber;\n\t\t}\n\t}\n\tresult.push(new Range(currentRangeStart, 1, currentRangeEnd, 1));\n\treturn result;\n}\n\n/**\n * Represents a view line. Can be used to efficiently query more information about it.\n */\nclass ViewLineInfo {\n\tpublic get isWrappedLineContinuation(): boolean {\n\t\treturn this.modelLineWrappedLineIdx > 0;\n\t}\n\n\tconstructor(\n\t\tpublic readonly modelLineNumber: number,\n\t\tpublic readonly modelLineWrappedLineIdx: number,\n\t) { }\n}\n\n/**\n * A list of view lines that have a contiguous span in the model.\n*/\nclass ViewLineInfoGroupedByModelRange {\n\tconstructor(public readonly modelRange: Range, public readonly viewLines: ViewLineInfo[]) {\n\t}\n}\n\nclass CoordinatesConverter implements ICoordinatesConverter {\n\tprivate readonly _lines: ViewModelLinesFromProjectedModel;\n\n\tconstructor(lines: ViewModelLinesFromProjectedModel) {\n\t\tthis._lines = lines;\n\t}\n\n\t// View -> Model conversion and related methods\n\n\tpublic convertViewPositionToModelPosition(viewPosition: Position): Position {\n\t\treturn this._lines.convertViewPositionToModelPosition(viewPosition.lineNumber, viewPosition.column);\n\t}\n\n\tpublic convertViewRangeToModelRange(viewRange: Range): Range {\n\t\treturn this._lines.convertViewRangeToModelRange(viewRange);\n\t}\n\n\tpublic validateViewPosition(viewPosition: Position, expectedModelPosition: Position): Position {\n\t\treturn this._lines.validateViewPosition(viewPosition.lineNumber, viewPosition.column, expectedModelPosition);\n\t}\n\n\tpublic validateViewRange(viewRange: Range, expectedModelRange: Range): Range {\n\t\treturn this._lines.validateViewRange(viewRange, expectedModelRange);\n\t}\n\n\t// Model -> View conversion and related methods\n\n\tpublic convertModelPositionToViewPosition(modelPosition: Position, affinity?: PositionAffinity, allowZero?: boolean, belowHiddenRanges?: boolean): Position {\n\t\treturn this._lines.convertModelPositionToViewPosition(modelPosition.lineNumber, modelPosition.column, affinity, allowZero, belowHiddenRanges);\n\t}\n\n\tpublic convertModelRangeToViewRange(modelRange: Range, affinity?: PositionAffinity): Range {\n\t\treturn this._lines.convertModelRangeToViewRange(modelRange, affinity);\n\t}\n\n\tpublic modelPositionIsVisible(modelPosition: Position): boolean {\n\t\treturn this._lines.modelPositionIsVisible(modelPosition.lineNumber, modelPosition.column);\n\t}\n\n\tpublic getModelLineViewLineCount(modelLineNumber: number): number {\n\t\treturn this._lines.getModelLineViewLineCount(modelLineNumber);\n\t}\n\n\tpublic getViewLineNumberOfModelPosition(modelLineNumber: number, modelColumn: number): number {\n\t\treturn this._lines.getViewLineNumberOfModelPosition(modelLineNumber, modelColumn);\n\t}\n}\n\nconst enum IndentGuideRepeatOption {\n\tBlockNone = 0,\n\tBlockSubsequent = 1,\n\tBlockAll = 2\n}\n\nexport class ViewModelLinesFromModelAsIs implements IViewModelLines {\n\tpublic readonly model: ITextModel;\n\n\tconstructor(model: ITextModel) {\n\t\tthis.model = model;\n\t}\n\n\tpublic dispose(): void {\n\t}\n\n\tpublic createCoordinatesConverter(): ICoordinatesConverter {\n\t\treturn new IdentityCoordinatesConverter(this);\n\t}\n\n\tpublic getHiddenAreas(): Range[] {\n\t\treturn [];\n\t}\n\n\tpublic setHiddenAreas(_ranges: Range[]): boolean {\n\t\treturn false;\n\t}\n\n\tpublic setTabSize(_newTabSize: number): boolean {\n\t\treturn false;\n\t}\n\n\tpublic setWrappingSettings(_fontInfo: FontInfo, _wrappingStrategy: 'simple' | 'advanced', _wrappingColumn: number, _wrappingIndent: WrappingIndent): boolean {\n\t\treturn false;\n\t}\n\n\tpublic createLineBreaksComputer(): ILineBreaksComputer {\n\t\tconst result: null[] = [];\n\t\treturn {\n\t\t\taddRequest: (lineText: string, injectedText: LineInjectedText[] | null, previousLineBreakData: ModelLineProjectionData | null) => {\n\t\t\t\tresult.push(null);\n\t\t\t},\n\t\t\tfinalize: () => {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic onModelFlushed(): void {\n\t}\n\n\tpublic onModelLinesDeleted(_versionId: number | null, fromLineNumber: number, toLineNumber: number): viewEvents.ViewLinesDeletedEvent | null {\n\t\treturn new viewEvents.ViewLinesDeletedEvent(fromLineNumber, toLineNumber);\n\t}\n\n\tpublic onModelLinesInserted(_versionId: number | null, fromLineNumber: number, toLineNumber: number, lineBreaks: (ModelLineProjectionData | null)[]): viewEvents.ViewLinesInsertedEvent | null {\n\t\treturn new viewEvents.ViewLinesInsertedEvent(fromLineNumber, toLineNumber);\n\t}\n\n\tpublic onModelLineChanged(_versionId: number | null, lineNumber: number, lineBreakData: ModelLineProjectionData | null): [boolean, viewEvents.ViewLinesChangedEvent | null, viewEvents.ViewLinesInsertedEvent | null, viewEvents.ViewLinesDeletedEvent | null] {\n\t\treturn [false, new viewEvents.ViewLinesChangedEvent(lineNumber, 1), null, null];\n\t}\n\n\tpublic acceptVersionId(_versionId: number): void {\n\t}\n\n\tpublic getViewLineCount(): number {\n\t\treturn this.model.getLineCount();\n\t}\n\n\tpublic getActiveIndentGuide(viewLineNumber: number, _minLineNumber: number, _maxLineNumber: number): IActiveIndentGuideInfo {\n\t\treturn {\n\t\t\tstartLineNumber: viewLineNumber,\n\t\t\tendLineNumber: viewLineNumber,\n\t\t\tindent: 0\n\t\t};\n\t}\n\n\tpublic getViewLinesBracketGuides(startLineNumber: number, endLineNumber: number, activePosition: IPosition | null): IndentGuide[][] {\n\t\treturn new Array(endLineNumber - startLineNumber + 1).fill([]);\n\t}\n\n\tpublic getViewLinesIndentGuides(viewStartLineNumber: number, viewEndLineNumber: number): number[] {\n\t\tconst viewLineCount = viewEndLineNumber - viewStartLineNumber + 1;\n\t\tconst result = new Array<number>(viewLineCount);\n\t\tfor (let i = 0; i < viewLineCount; i++) {\n\t\t\tresult[i] = 0;\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic getViewLineContent(viewLineNumber: number): string {\n\t\treturn this.model.getLineContent(viewLineNumber);\n\t}\n\n\tpublic getViewLineLength(viewLineNumber: number): number {\n\t\treturn this.model.getLineLength(viewLineNumber);\n\t}\n\n\tpublic getViewLineMinColumn(viewLineNumber: number): number {\n\t\treturn this.model.getLineMinColumn(viewLineNumber);\n\t}\n\n\tpublic getViewLineMaxColumn(viewLineNumber: number): number {\n\t\treturn this.model.getLineMaxColumn(viewLineNumber);\n\t}\n\n\tpublic getViewLineData(viewLineNumber: number): ViewLineData {\n\t\tconst lineTokens = this.model.tokenization.getLineTokens(viewLineNumber);\n\t\tconst lineContent = lineTokens.getLineContent();\n\t\treturn new ViewLineData(\n\t\t\tlineContent,\n\t\t\tfalse,\n\t\t\t1,\n\t\t\tlineContent.length + 1,\n\t\t\t0,\n\t\t\tlineTokens.inflate(),\n\t\t\tnull\n\t\t);\n\t}\n\n\tpublic getViewLinesData(viewStartLineNumber: number, viewEndLineNumber: number, needed: boolean[]): Array<ViewLineData | null> {\n\t\tconst lineCount = this.model.getLineCount();\n\t\tviewStartLineNumber = Math.min(Math.max(1, viewStartLineNumber), lineCount);\n\t\tviewEndLineNumber = Math.min(Math.max(1, viewEndLineNumber), lineCount);\n\n\t\tconst result: Array<ViewLineData | null> = [];\n\t\tfor (let lineNumber = viewStartLineNumber; lineNumber <= viewEndLineNumber; lineNumber++) {\n\t\t\tconst idx = lineNumber - viewStartLineNumber;\n\t\t\tresult[idx] = needed[idx] ? this.getViewLineData(lineNumber) : null;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic getDecorationsInRange(range: Range, ownerId: number, filterOutValidation: boolean, onlyMinimapDecorations: boolean, onlyMarginDecorations: boolean): IModelDecoration[] {\n\t\treturn this.model.getDecorationsInRange(range, ownerId, filterOutValidation, onlyMinimapDecorations, onlyMarginDecorations);\n\t}\n\n\tnormalizePosition(position: Position, affinity: PositionAffinity): Position {\n\t\treturn this.model.normalizePosition(position, affinity);\n\t}\n\n\tpublic getLineIndentColumn(lineNumber: number): number {\n\t\treturn this.model.getLineIndentColumn(lineNumber);\n\t}\n\n\tpublic getInjectedTextAt(position: Position): InjectedText | null {\n\t\t// Identity lines collection does not support injected text.\n\t\treturn null;\n\t}\n}\n\nclass IdentityCoordinatesConverter implements ICoordinatesConverter {\n\tprivate readonly _lines: ViewModelLinesFromModelAsIs;\n\n\tconstructor(lines: ViewModelLinesFromModelAsIs) {\n\t\tthis._lines = lines;\n\t}\n\n\tprivate _validPosition(pos: Position): Position {\n\t\treturn this._lines.model.validatePosition(pos);\n\t}\n\n\tprivate _validRange(range: Range): Range {\n\t\treturn this._lines.model.validateRange(range);\n\t}\n\n\t// View -> Model conversion and related methods\n\n\tpublic convertViewPositionToModelPosition(viewPosition: Position): Position {\n\t\treturn this._validPosition(viewPosition);\n\t}\n\n\tpublic convertViewRangeToModelRange(viewRange: Range): Range {\n\t\treturn this._validRange(viewRange);\n\t}\n\n\tpublic validateViewPosition(_viewPosition: Position, expectedModelPosition: Position): Position {\n\t\treturn this._validPosition(expectedModelPosition);\n\t}\n\n\tpublic validateViewRange(_viewRange: Range, expectedModelRange: Range): Range {\n\t\treturn this._validRange(expectedModelRange);\n\t}\n\n\t// Model -> View conversion and related methods\n\n\tpublic convertModelPositionToViewPosition(modelPosition: Position): Position {\n\t\treturn this._validPosition(modelPosition);\n\t}\n\n\tpublic convertModelRangeToViewRange(modelRange: Range): Range {\n\t\treturn this._validRange(modelRange);\n\t}\n\n\tpublic modelPositionIsVisible(modelPosition: Position): boolean {\n\t\tconst lineCount = this._lines.model.getLineCount();\n\t\tif (modelPosition.lineNumber < 1 || modelPosition.lineNumber > lineCount) {\n\t\t\t// invalid arguments\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic getModelLineViewLineCount(modelLineNumber: number): number {\n\t\treturn 1;\n\t}\n\n\tpublic getViewLineNumberOfModelPosition(modelLineNumber: number, modelColumn: number): number {\n\t\treturn modelLineNumber;\n\t}\n}\n"]}