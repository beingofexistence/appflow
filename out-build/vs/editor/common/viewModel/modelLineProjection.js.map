{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/viewModel/modelLineProjection.ts"],"names":[],"mappings":"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","file":"modelLineProjection.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { LineTokens } from 'vs/editor/common/tokens/lineTokens';\nimport { Position } from 'vs/editor/common/core/position';\nimport { IRange } from 'vs/editor/common/core/range';\nimport { EndOfLinePreference, ITextModel, PositionAffinity } from 'vs/editor/common/model';\nimport { LineInjectedText } from 'vs/editor/common/textModelEvents';\nimport { InjectedText, ModelLineProjectionData } from 'vs/editor/common/modelLineProjectionData';\nimport { SingleLineInlineDecoration, ViewLineData } from 'vs/editor/common/viewModel';\n\nexport interface IModelLineProjection {\n\tisVisible(): boolean;\n\n\t/**\n\t * This invalidates the current instance (potentially reuses and returns it again).\n\t*/\n\tsetVisible(isVisible: boolean): IModelLineProjection;\n\n\tgetProjectionData(): ModelLineProjectionData | null;\n\tgetViewLineCount(): number;\n\tgetViewLineContent(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): string;\n\tgetViewLineLength(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): number;\n\tgetViewLineMinColumn(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): number;\n\tgetViewLineMaxColumn(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): number;\n\tgetViewLineData(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): ViewLineData;\n\tgetViewLinesData(model: ISimpleModel, modelLineNumber: number, outputLineIdx: number, lineCount: number, globalStartIndex: number, needed: boolean[], result: Array<ViewLineData | null>): void;\n\n\tgetModelColumnOfViewPosition(outputLineIndex: number, outputColumn: number): number;\n\tgetViewPositionOfModelPosition(deltaLineNumber: number, inputColumn: number, affinity?: PositionAffinity): Position;\n\tgetViewLineNumberOfModelPosition(deltaLineNumber: number, inputColumn: number): number;\n\tnormalizePosition(outputLineIndex: number, outputPosition: Position, affinity: PositionAffinity): Position;\n\n\tgetInjectedTextAt(outputLineIndex: number, column: number): InjectedText | null;\n}\n\nexport interface ISimpleModel {\n\ttokenization: {\n\t\tgetLineTokens(lineNumber: number): LineTokens;\n\t};\n\tgetLineContent(lineNumber: number): string;\n\tgetLineLength(lineNumber: number): number;\n\tgetLineMinColumn(lineNumber: number): number;\n\tgetLineMaxColumn(lineNumber: number): number;\n\tgetValueInRange(range: IRange, eol?: EndOfLinePreference): string;\n}\n\nexport function createModelLineProjection(lineBreakData: ModelLineProjectionData | null, isVisible: boolean): IModelLineProjection {\n\tif (lineBreakData === null) {\n\t\t// No mapping needed\n\t\tif (isVisible) {\n\t\t\treturn IdentityModelLineProjection.INSTANCE;\n\t\t}\n\t\treturn HiddenModelLineProjection.INSTANCE;\n\t} else {\n\t\treturn new ModelLineProjection(lineBreakData, isVisible);\n\t}\n}\n\n/**\n * This projection is used to\n * * wrap model lines\n * * inject text\n */\nclass ModelLineProjection implements IModelLineProjection {\n\tprivate readonly _projectionData: ModelLineProjectionData;\n\tprivate _isVisible: boolean;\n\n\tconstructor(lineBreakData: ModelLineProjectionData, isVisible: boolean) {\n\t\tthis._projectionData = lineBreakData;\n\t\tthis._isVisible = isVisible;\n\t}\n\n\tpublic isVisible(): boolean {\n\t\treturn this._isVisible;\n\t}\n\n\tpublic setVisible(isVisible: boolean): IModelLineProjection {\n\t\tthis._isVisible = isVisible;\n\t\treturn this;\n\t}\n\n\tpublic getProjectionData(): ModelLineProjectionData | null {\n\t\treturn this._projectionData;\n\t}\n\n\tpublic getViewLineCount(): number {\n\t\tif (!this._isVisible) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this._projectionData.getOutputLineCount();\n\t}\n\n\tpublic getViewLineContent(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): string {\n\t\tthis._assertVisible();\n\n\t\tconst startOffsetInInputWithInjections = outputLineIndex > 0 ? this._projectionData.breakOffsets[outputLineIndex - 1] : 0;\n\t\tconst endOffsetInInputWithInjections = this._projectionData.breakOffsets[outputLineIndex];\n\n\t\tlet r: string;\n\t\tif (this._projectionData.injectionOffsets !== null) {\n\t\t\tconst injectedTexts = this._projectionData.injectionOffsets.map(\n\t\t\t\t(offset, idx) => new LineInjectedText(\n\t\t\t\t\t0,\n\t\t\t\t\t0,\n\t\t\t\t\toffset + 1,\n\t\t\t\t\tthis._projectionData.injectionOptions![idx],\n\t\t\t\t\t0\n\t\t\t\t)\n\t\t\t);\n\t\t\tconst lineWithInjections = LineInjectedText.applyInjectedText(\n\t\t\t\tmodel.getLineContent(modelLineNumber),\n\t\t\t\tinjectedTexts\n\t\t\t);\n\t\t\tr = lineWithInjections.substring(startOffsetInInputWithInjections, endOffsetInInputWithInjections);\n\t\t} else {\n\t\t\tr = model.getValueInRange({\n\t\t\t\tstartLineNumber: modelLineNumber,\n\t\t\t\tstartColumn: startOffsetInInputWithInjections + 1,\n\t\t\t\tendLineNumber: modelLineNumber,\n\t\t\t\tendColumn: endOffsetInInputWithInjections + 1\n\t\t\t});\n\t\t}\n\n\t\tif (outputLineIndex > 0) {\n\t\t\tr = spaces(this._projectionData.wrappedTextIndentLength) + r;\n\t\t}\n\n\t\treturn r;\n\t}\n\n\tpublic getViewLineLength(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): number {\n\t\tthis._assertVisible();\n\t\treturn this._projectionData.getLineLength(outputLineIndex);\n\t}\n\n\tpublic getViewLineMinColumn(_model: ITextModel, _modelLineNumber: number, outputLineIndex: number): number {\n\t\tthis._assertVisible();\n\t\treturn this._projectionData.getMinOutputOffset(outputLineIndex) + 1;\n\t}\n\n\tpublic getViewLineMaxColumn(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): number {\n\t\tthis._assertVisible();\n\t\treturn this._projectionData.getMaxOutputOffset(outputLineIndex) + 1;\n\t}\n\n\t/**\n\t * Try using {@link getViewLinesData} instead.\n\t*/\n\tpublic getViewLineData(model: ISimpleModel, modelLineNumber: number, outputLineIndex: number): ViewLineData {\n\t\tconst arr = new Array<ViewLineData>();\n\t\tthis.getViewLinesData(model, modelLineNumber, outputLineIndex, 1, 0, [true], arr);\n\t\treturn arr[0];\n\t}\n\n\tpublic getViewLinesData(model: ISimpleModel, modelLineNumber: number, outputLineIdx: number, lineCount: number, globalStartIndex: number, needed: boolean[], result: Array<ViewLineData | null>): void {\n\t\tthis._assertVisible();\n\n\t\tconst lineBreakData = this._projectionData;\n\n\t\tconst injectionOffsets = lineBreakData.injectionOffsets;\n\t\tconst injectionOptions = lineBreakData.injectionOptions;\n\n\t\tlet inlineDecorationsPerOutputLine: SingleLineInlineDecoration[][] | null = null;\n\n\t\tif (injectionOffsets) {\n\t\t\tinlineDecorationsPerOutputLine = [];\n\t\t\tlet totalInjectedTextLengthBefore = 0;\n\t\t\tlet currentInjectedOffset = 0;\n\n\t\t\tfor (let outputLineIndex = 0; outputLineIndex < lineBreakData.getOutputLineCount(); outputLineIndex++) {\n\t\t\t\tconst inlineDecorations = new Array<SingleLineInlineDecoration>();\n\t\t\t\tinlineDecorationsPerOutputLine[outputLineIndex] = inlineDecorations;\n\n\t\t\t\tconst lineStartOffsetInInputWithInjections = outputLineIndex > 0 ? lineBreakData.breakOffsets[outputLineIndex - 1] : 0;\n\t\t\t\tconst lineEndOffsetInInputWithInjections = lineBreakData.breakOffsets[outputLineIndex];\n\n\t\t\t\twhile (currentInjectedOffset < injectionOffsets.length) {\n\t\t\t\t\tconst length = injectionOptions![currentInjectedOffset].content.length;\n\t\t\t\t\tconst injectedTextStartOffsetInInputWithInjections = injectionOffsets[currentInjectedOffset] + totalInjectedTextLengthBefore;\n\t\t\t\t\tconst injectedTextEndOffsetInInputWithInjections = injectedTextStartOffsetInInputWithInjections + length;\n\n\t\t\t\t\tif (injectedTextStartOffsetInInputWithInjections > lineEndOffsetInInputWithInjections) {\n\t\t\t\t\t\t// Injected text only starts in later wrapped lines.\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (lineStartOffsetInInputWithInjections < injectedTextEndOffsetInInputWithInjections) {\n\t\t\t\t\t\t// Injected text ends after or in this line (but also starts in or before this line).\n\t\t\t\t\t\tconst options = injectionOptions![currentInjectedOffset];\n\t\t\t\t\t\tif (options.inlineClassName) {\n\t\t\t\t\t\t\tconst offset = (outputLineIndex > 0 ? lineBreakData.wrappedTextIndentLength : 0);\n\t\t\t\t\t\t\tconst start = offset + Math.max(injectedTextStartOffsetInInputWithInjections - lineStartOffsetInInputWithInjections, 0);\n\t\t\t\t\t\t\tconst end = offset + Math.min(injectedTextEndOffsetInInputWithInjections - lineStartOffsetInInputWithInjections, lineEndOffsetInInputWithInjections - lineStartOffsetInInputWithInjections);\n\t\t\t\t\t\t\tif (start !== end) {\n\t\t\t\t\t\t\t\tinlineDecorations.push(new SingleLineInlineDecoration(start, end, options.inlineClassName, options.inlineClassNameAffectsLetterSpacing!));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (injectedTextEndOffsetInInputWithInjections <= lineEndOffsetInInputWithInjections) {\n\t\t\t\t\t\ttotalInjectedTextLengthBefore += length;\n\t\t\t\t\t\tcurrentInjectedOffset++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// injected text breaks into next line, process it again\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet lineWithInjections: LineTokens;\n\t\tif (injectionOffsets) {\n\t\t\tlineWithInjections = model.tokenization.getLineTokens(modelLineNumber).withInserted(injectionOffsets.map((offset, idx) => ({\n\t\t\t\toffset,\n\t\t\t\ttext: injectionOptions![idx].content,\n\t\t\t\ttokenMetadata: LineTokens.defaultTokenMetadata\n\t\t\t})));\n\t\t} else {\n\t\t\tlineWithInjections = model.tokenization.getLineTokens(modelLineNumber);\n\t\t}\n\n\t\tfor (let outputLineIndex = outputLineIdx; outputLineIndex < outputLineIdx + lineCount; outputLineIndex++) {\n\t\t\tconst globalIndex = globalStartIndex + outputLineIndex - outputLineIdx;\n\t\t\tif (!needed[globalIndex]) {\n\t\t\t\tresult[globalIndex] = null;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tresult[globalIndex] = this._getViewLineData(lineWithInjections, inlineDecorationsPerOutputLine ? inlineDecorationsPerOutputLine[outputLineIndex] : null, outputLineIndex);\n\t\t}\n\t}\n\n\tprivate _getViewLineData(lineWithInjections: LineTokens, inlineDecorations: null | SingleLineInlineDecoration[], outputLineIndex: number): ViewLineData {\n\t\tthis._assertVisible();\n\t\tconst lineBreakData = this._projectionData;\n\t\tconst deltaStartIndex = (outputLineIndex > 0 ? lineBreakData.wrappedTextIndentLength : 0);\n\n\t\tconst lineStartOffsetInInputWithInjections = outputLineIndex > 0 ? lineBreakData.breakOffsets[outputLineIndex - 1] : 0;\n\t\tconst lineEndOffsetInInputWithInjections = lineBreakData.breakOffsets[outputLineIndex];\n\t\tconst tokens = lineWithInjections.sliceAndInflate(lineStartOffsetInInputWithInjections, lineEndOffsetInInputWithInjections, deltaStartIndex);\n\n\t\tlet lineContent = tokens.getLineContent();\n\t\tif (outputLineIndex > 0) {\n\t\t\tlineContent = spaces(lineBreakData.wrappedTextIndentLength) + lineContent;\n\t\t}\n\n\t\tconst minColumn = this._projectionData.getMinOutputOffset(outputLineIndex) + 1;\n\t\tconst maxColumn = lineContent.length + 1;\n\t\tconst continuesWithWrappedLine = (outputLineIndex + 1 < this.getViewLineCount());\n\t\tconst startVisibleColumn = (outputLineIndex === 0 ? 0 : lineBreakData.breakOffsetsVisibleColumn[outputLineIndex - 1]);\n\n\t\treturn new ViewLineData(\n\t\t\tlineContent,\n\t\t\tcontinuesWithWrappedLine,\n\t\t\tminColumn,\n\t\t\tmaxColumn,\n\t\t\tstartVisibleColumn,\n\t\t\ttokens,\n\t\t\tinlineDecorations\n\t\t);\n\t}\n\n\tpublic getModelColumnOfViewPosition(outputLineIndex: number, outputColumn: number): number {\n\t\tthis._assertVisible();\n\t\treturn this._projectionData.translateToInputOffset(outputLineIndex, outputColumn - 1) + 1;\n\t}\n\n\tpublic getViewPositionOfModelPosition(deltaLineNumber: number, inputColumn: number, affinity: PositionAffinity = PositionAffinity.None): Position {\n\t\tthis._assertVisible();\n\t\tconst r = this._projectionData.translateToOutputPosition(inputColumn - 1, affinity);\n\t\treturn r.toPosition(deltaLineNumber);\n\t}\n\n\tpublic getViewLineNumberOfModelPosition(deltaLineNumber: number, inputColumn: number): number {\n\t\tthis._assertVisible();\n\t\tconst r = this._projectionData.translateToOutputPosition(inputColumn - 1);\n\t\treturn deltaLineNumber + r.outputLineIndex;\n\t}\n\n\tpublic normalizePosition(outputLineIndex: number, outputPosition: Position, affinity: PositionAffinity): Position {\n\t\tconst baseViewLineNumber = outputPosition.lineNumber - outputLineIndex;\n\t\tconst normalizedOutputPosition = this._projectionData.normalizeOutputPosition(outputLineIndex, outputPosition.column - 1, affinity);\n\t\tconst result = normalizedOutputPosition.toPosition(baseViewLineNumber);\n\t\treturn result;\n\t}\n\n\tpublic getInjectedTextAt(outputLineIndex: number, outputColumn: number): InjectedText | null {\n\t\treturn this._projectionData.getInjectedText(outputLineIndex, outputColumn - 1);\n\t}\n\n\tprivate _assertVisible() {\n\t\tif (!this._isVisible) {\n\t\t\tthrow new Error('Not supported');\n\t\t}\n\t}\n}\n\n/**\n * This projection does not change the model line.\n*/\nclass IdentityModelLineProjection implements IModelLineProjection {\n\tpublic static readonly INSTANCE = new IdentityModelLineProjection();\n\n\tprivate constructor() { }\n\n\tpublic isVisible(): boolean {\n\t\treturn true;\n\t}\n\n\tpublic setVisible(isVisible: boolean): IModelLineProjection {\n\t\tif (isVisible) {\n\t\t\treturn this;\n\t\t}\n\t\treturn HiddenModelLineProjection.INSTANCE;\n\t}\n\n\tpublic getProjectionData(): ModelLineProjectionData | null {\n\t\treturn null;\n\t}\n\n\tpublic getViewLineCount(): number {\n\t\treturn 1;\n\t}\n\n\tpublic getViewLineContent(model: ISimpleModel, modelLineNumber: number, _outputLineIndex: number): string {\n\t\treturn model.getLineContent(modelLineNumber);\n\t}\n\n\tpublic getViewLineLength(model: ISimpleModel, modelLineNumber: number, _outputLineIndex: number): number {\n\t\treturn model.getLineLength(modelLineNumber);\n\t}\n\n\tpublic getViewLineMinColumn(model: ISimpleModel, modelLineNumber: number, _outputLineIndex: number): number {\n\t\treturn model.getLineMinColumn(modelLineNumber);\n\t}\n\n\tpublic getViewLineMaxColumn(model: ISimpleModel, modelLineNumber: number, _outputLineIndex: number): number {\n\t\treturn model.getLineMaxColumn(modelLineNumber);\n\t}\n\n\tpublic getViewLineData(model: ISimpleModel, modelLineNumber: number, _outputLineIndex: number): ViewLineData {\n\t\tconst lineTokens = model.tokenization.getLineTokens(modelLineNumber);\n\t\tconst lineContent = lineTokens.getLineContent();\n\t\treturn new ViewLineData(\n\t\t\tlineContent,\n\t\t\tfalse,\n\t\t\t1,\n\t\t\tlineContent.length + 1,\n\t\t\t0,\n\t\t\tlineTokens.inflate(),\n\t\t\tnull\n\t\t);\n\t}\n\n\tpublic getViewLinesData(model: ISimpleModel, modelLineNumber: number, _fromOuputLineIndex: number, _toOutputLineIndex: number, globalStartIndex: number, needed: boolean[], result: Array<ViewLineData | null>): void {\n\t\tif (!needed[globalStartIndex]) {\n\t\t\tresult[globalStartIndex] = null;\n\t\t\treturn;\n\t\t}\n\t\tresult[globalStartIndex] = this.getViewLineData(model, modelLineNumber, 0);\n\t}\n\n\tpublic getModelColumnOfViewPosition(_outputLineIndex: number, outputColumn: number): number {\n\t\treturn outputColumn;\n\t}\n\n\tpublic getViewPositionOfModelPosition(deltaLineNumber: number, inputColumn: number): Position {\n\t\treturn new Position(deltaLineNumber, inputColumn);\n\t}\n\n\tpublic getViewLineNumberOfModelPosition(deltaLineNumber: number, _inputColumn: number): number {\n\t\treturn deltaLineNumber;\n\t}\n\n\tpublic normalizePosition(outputLineIndex: number, outputPosition: Position, affinity: PositionAffinity): Position {\n\t\treturn outputPosition;\n\t}\n\n\tpublic getInjectedTextAt(_outputLineIndex: number, _outputColumn: number): InjectedText | null {\n\t\treturn null;\n\t}\n}\n\n/**\n * This projection hides the model line.\n */\nclass HiddenModelLineProjection implements IModelLineProjection {\n\tpublic static readonly INSTANCE = new HiddenModelLineProjection();\n\n\tprivate constructor() { }\n\n\tpublic isVisible(): boolean {\n\t\treturn false;\n\t}\n\n\tpublic setVisible(isVisible: boolean): IModelLineProjection {\n\t\tif (!isVisible) {\n\t\t\treturn this;\n\t\t}\n\t\treturn IdentityModelLineProjection.INSTANCE;\n\t}\n\n\tpublic getProjectionData(): ModelLineProjectionData | null {\n\t\treturn null;\n\t}\n\n\tpublic getViewLineCount(): number {\n\t\treturn 0;\n\t}\n\n\tpublic getViewLineContent(_model: ISimpleModel, _modelLineNumber: number, _outputLineIndex: number): string {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewLineLength(_model: ISimpleModel, _modelLineNumber: number, _outputLineIndex: number): number {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewLineMinColumn(_model: ISimpleModel, _modelLineNumber: number, _outputLineIndex: number): number {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewLineMaxColumn(_model: ISimpleModel, _modelLineNumber: number, _outputLineIndex: number): number {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewLineData(_model: ISimpleModel, _modelLineNumber: number, _outputLineIndex: number): ViewLineData {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewLinesData(_model: ISimpleModel, _modelLineNumber: number, _fromOuputLineIndex: number, _toOutputLineIndex: number, _globalStartIndex: number, _needed: boolean[], _result: ViewLineData[]): void {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getModelColumnOfViewPosition(_outputLineIndex: number, _outputColumn: number): number {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewPositionOfModelPosition(_deltaLineNumber: number, _inputColumn: number): Position {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getViewLineNumberOfModelPosition(_deltaLineNumber: number, _inputColumn: number): number {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic normalizePosition(outputLineIndex: number, outputPosition: Position, affinity: PositionAffinity): Position {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tpublic getInjectedTextAt(_outputLineIndex: number, _outputColumn: number): InjectedText | null {\n\t\tthrow new Error('Not supported');\n\t}\n}\n\nconst _spaces: string[] = [''];\nfunction spaces(count: number): string {\n\tif (count >= _spaces.length) {\n\t\tfor (let i = 1; i <= count; i++) {\n\t\t\t_spaces[i] = _makeSpaces(i);\n\t\t}\n\t}\n\treturn _spaces[count];\n}\n\nfunction _makeSpaces(count: number): string {\n\treturn new Array(count + 1).join(' ');\n}\n"]}