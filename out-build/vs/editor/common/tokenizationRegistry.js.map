{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/tokenizationRegistry.ts"],"names":[],"mappings":"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","file":"tokenizationRegistry.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Color } from 'vs/base/common/color';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { ITokenizationRegistry, ITokenizationSupport, ITokenizationSupportChangedEvent, ILazyTokenizationSupport } from 'vs/editor/common/languages';\nimport { ColorId } from 'vs/editor/common/encodedTokenAttributes';\n\nexport class TokenizationRegistry implements ITokenizationRegistry {\n\n\tprivate readonly _tokenizationSupports = new Map<string, ITokenizationSupport>();\n\tprivate readonly _factories = new Map<string, TokenizationSupportFactoryData>();\n\n\tprivate readonly _onDidChange = new Emitter<ITokenizationSupportChangedEvent>();\n\tpublic readonly onDidChange: Event<ITokenizationSupportChangedEvent> = this._onDidChange.event;\n\n\tprivate _colorMap: Color[] | null;\n\n\tconstructor() {\n\t\tthis._colorMap = null;\n\t}\n\n\tpublic handleChange(languageIds: string[]): void {\n\t\tthis._onDidChange.fire({\n\t\t\tchangedLanguages: languageIds,\n\t\t\tchangedColorMap: false\n\t\t});\n\t}\n\n\tpublic register(languageId: string, support: ITokenizationSupport): IDisposable {\n\t\tthis._tokenizationSupports.set(languageId, support);\n\t\tthis.handleChange([languageId]);\n\t\treturn toDisposable(() => {\n\t\t\tif (this._tokenizationSupports.get(languageId) !== support) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._tokenizationSupports.delete(languageId);\n\t\t\tthis.handleChange([languageId]);\n\t\t});\n\t}\n\n\tpublic get(languageId: string): ITokenizationSupport | null {\n\t\treturn this._tokenizationSupports.get(languageId) || null;\n\t}\n\n\tpublic registerFactory(languageId: string, factory: ILazyTokenizationSupport): IDisposable {\n\t\tthis._factories.get(languageId)?.dispose();\n\t\tconst myData = new TokenizationSupportFactoryData(this, languageId, factory);\n\t\tthis._factories.set(languageId, myData);\n\t\treturn toDisposable(() => {\n\t\t\tconst v = this._factories.get(languageId);\n\t\t\tif (!v || v !== myData) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._factories.delete(languageId);\n\t\t\tv.dispose();\n\t\t});\n\t}\n\n\tpublic async getOrCreate(languageId: string): Promise<ITokenizationSupport | null> {\n\t\t// check first if the support is already set\n\t\tconst tokenizationSupport = this.get(languageId);\n\t\tif (tokenizationSupport) {\n\t\t\treturn tokenizationSupport;\n\t\t}\n\n\t\tconst factory = this._factories.get(languageId);\n\t\tif (!factory || factory.isResolved) {\n\t\t\t// no factory or factory.resolve already finished\n\t\t\treturn null;\n\t\t}\n\n\t\tawait factory.resolve();\n\n\t\treturn this.get(languageId);\n\t}\n\n\tpublic isResolved(languageId: string): boolean {\n\t\tconst tokenizationSupport = this.get(languageId);\n\t\tif (tokenizationSupport) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst factory = this._factories.get(languageId);\n\t\tif (!factory || factory.isResolved) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tpublic setColorMap(colorMap: Color[]): void {\n\t\tthis._colorMap = colorMap;\n\t\tthis._onDidChange.fire({\n\t\t\tchangedLanguages: Array.from(this._tokenizationSupports.keys()),\n\t\t\tchangedColorMap: true\n\t\t});\n\t}\n\n\tpublic getColorMap(): Color[] | null {\n\t\treturn this._colorMap;\n\t}\n\n\tpublic getDefaultBackground(): Color | null {\n\t\tif (this._colorMap && this._colorMap.length > ColorId.DefaultBackground) {\n\t\t\treturn this._colorMap[ColorId.DefaultBackground];\n\t\t}\n\t\treturn null;\n\t}\n}\n\nclass TokenizationSupportFactoryData extends Disposable {\n\n\tprivate _isDisposed: boolean = false;\n\tprivate _resolvePromise: Promise<void> | null = null;\n\tprivate _isResolved: boolean = false;\n\n\tpublic get isResolved(): boolean {\n\t\treturn this._isResolved;\n\t}\n\n\tconstructor(\n\t\tprivate readonly _registry: TokenizationRegistry,\n\t\tprivate readonly _languageId: string,\n\t\tprivate readonly _factory: ILazyTokenizationSupport,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._isDisposed = true;\n\t\tsuper.dispose();\n\t}\n\n\tpublic async resolve(): Promise<void> {\n\t\tif (!this._resolvePromise) {\n\t\t\tthis._resolvePromise = this._create();\n\t\t}\n\t\treturn this._resolvePromise;\n\t}\n\n\tprivate async _create(): Promise<void> {\n\t\tconst value = await this._factory.tokenizationSupport;\n\t\tthis._isResolved = true;\n\t\tif (value && !this._isDisposed) {\n\t\t\tthis._register(this._registry.register(this._languageId, value));\n\t\t}\n\t}\n}\n"]}