{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/tokens/lineTokens.ts"],"names":[],"mappings":"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","file":"lineTokens.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ILanguageIdCodec } from 'vs/editor/common/languages';\nimport { FontStyle, ColorId, StandardTokenType, MetadataConsts, TokenMetadata, ITokenPresentation } from 'vs/editor/common/encodedTokenAttributes';\n\nexport interface IViewLineTokens {\n\tequals(other: IViewLineTokens): boolean;\n\tgetCount(): number;\n\tgetForeground(tokenIndex: number): ColorId;\n\tgetEndOffset(tokenIndex: number): number;\n\tgetClassName(tokenIndex: number): string;\n\tgetInlineStyle(tokenIndex: number, colorMap: string[]): string;\n\tgetPresentation(tokenIndex: number): ITokenPresentation;\n\tfindTokenIndexAtOffset(offset: number): number;\n\tgetLineContent(): string;\n\tgetMetadata(tokenIndex: number): number;\n\tgetLanguageId(tokenIndex: number): string;\n}\n\nexport class LineTokens implements IViewLineTokens {\n\t_lineTokensBrand: void = undefined;\n\n\tprivate readonly _tokens: Uint32Array;\n\tprivate readonly _tokensCount: number;\n\tprivate readonly _text: string;\n\tprivate readonly _languageIdCodec: ILanguageIdCodec;\n\n\tpublic static defaultTokenMetadata = (\n\t\t(FontStyle.None << MetadataConsts.FONT_STYLE_OFFSET)\n\t\t| (ColorId.DefaultForeground << MetadataConsts.FOREGROUND_OFFSET)\n\t\t| (ColorId.DefaultBackground << MetadataConsts.BACKGROUND_OFFSET)\n\t) >>> 0;\n\n\tpublic static createEmpty(lineContent: string, decoder: ILanguageIdCodec): LineTokens {\n\t\tconst defaultMetadata = LineTokens.defaultTokenMetadata;\n\n\t\tconst tokens = new Uint32Array(2);\n\t\ttokens[0] = lineContent.length;\n\t\ttokens[1] = defaultMetadata;\n\n\t\treturn new LineTokens(tokens, lineContent, decoder);\n\t}\n\n\tconstructor(tokens: Uint32Array, text: string, decoder: ILanguageIdCodec) {\n\t\tthis._tokens = tokens;\n\t\tthis._tokensCount = (this._tokens.length >>> 1);\n\t\tthis._text = text;\n\t\tthis._languageIdCodec = decoder;\n\t}\n\n\tpublic equals(other: IViewLineTokens): boolean {\n\t\tif (other instanceof LineTokens) {\n\t\t\treturn this.slicedEquals(other, 0, this._tokensCount);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic slicedEquals(other: LineTokens, sliceFromTokenIndex: number, sliceTokenCount: number): boolean {\n\t\tif (this._text !== other._text) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this._tokensCount !== other._tokensCount) {\n\t\t\treturn false;\n\t\t}\n\t\tconst from = (sliceFromTokenIndex << 1);\n\t\tconst to = from + (sliceTokenCount << 1);\n\t\tfor (let i = from; i < to; i++) {\n\t\t\tif (this._tokens[i] !== other._tokens[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic getLineContent(): string {\n\t\treturn this._text;\n\t}\n\n\tpublic getCount(): number {\n\t\treturn this._tokensCount;\n\t}\n\n\tpublic getStartOffset(tokenIndex: number): number {\n\t\tif (tokenIndex > 0) {\n\t\t\treturn this._tokens[(tokenIndex - 1) << 1];\n\t\t}\n\t\treturn 0;\n\t}\n\n\tpublic getMetadata(tokenIndex: number): number {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn metadata;\n\t}\n\n\tpublic getLanguageId(tokenIndex: number): string {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\tconst languageId = TokenMetadata.getLanguageId(metadata);\n\t\treturn this._languageIdCodec.decodeLanguageId(languageId);\n\t}\n\n\tpublic getStandardTokenType(tokenIndex: number): StandardTokenType {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn TokenMetadata.getTokenType(metadata);\n\t}\n\n\tpublic getForeground(tokenIndex: number): ColorId {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn TokenMetadata.getForeground(metadata);\n\t}\n\n\tpublic getClassName(tokenIndex: number): string {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn TokenMetadata.getClassNameFromMetadata(metadata);\n\t}\n\n\tpublic getInlineStyle(tokenIndex: number, colorMap: string[]): string {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn TokenMetadata.getInlineStyleFromMetadata(metadata, colorMap);\n\t}\n\n\tpublic getPresentation(tokenIndex: number): ITokenPresentation {\n\t\tconst metadata = this._tokens[(tokenIndex << 1) + 1];\n\t\treturn TokenMetadata.getPresentationFromMetadata(metadata);\n\t}\n\n\tpublic getEndOffset(tokenIndex: number): number {\n\t\treturn this._tokens[tokenIndex << 1];\n\t}\n\n\t/**\n\t * Find the token containing offset `offset`.\n\t * @param offset The search offset\n\t * @return The index of the token containing the offset.\n\t */\n\tpublic findTokenIndexAtOffset(offset: number): number {\n\t\treturn LineTokens.findIndexInTokensArray(this._tokens, offset);\n\t}\n\n\tpublic inflate(): IViewLineTokens {\n\t\treturn this;\n\t}\n\n\tpublic sliceAndInflate(startOffset: number, endOffset: number, deltaOffset: number): IViewLineTokens {\n\t\treturn new SliceLineTokens(this, startOffset, endOffset, deltaOffset);\n\t}\n\n\tpublic static convertToEndOffset(tokens: Uint32Array, lineTextLength: number): void {\n\t\tconst tokenCount = (tokens.length >>> 1);\n\t\tconst lastTokenIndex = tokenCount - 1;\n\t\tfor (let tokenIndex = 0; tokenIndex < lastTokenIndex; tokenIndex++) {\n\t\t\ttokens[tokenIndex << 1] = tokens[(tokenIndex + 1) << 1];\n\t\t}\n\t\ttokens[lastTokenIndex << 1] = lineTextLength;\n\t}\n\n\tpublic static findIndexInTokensArray(tokens: Uint32Array, desiredIndex: number): number {\n\t\tif (tokens.length <= 2) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet low = 0;\n\t\tlet high = (tokens.length >>> 1) - 1;\n\n\t\twhile (low < high) {\n\n\t\t\tconst mid = low + Math.floor((high - low) / 2);\n\t\t\tconst endOffset = tokens[(mid << 1)];\n\n\t\t\tif (endOffset === desiredIndex) {\n\t\t\t\treturn mid + 1;\n\t\t\t} else if (endOffset < desiredIndex) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else if (endOffset > desiredIndex) {\n\t\t\t\thigh = mid;\n\t\t\t}\n\t\t}\n\n\t\treturn low;\n\t}\n\n\t/**\n\t * @pure\n\t * @param insertTokens Must be sorted by offset.\n\t*/\n\tpublic withInserted(insertTokens: { offset: number; text: string; tokenMetadata: number }[]): LineTokens {\n\t\tif (insertTokens.length === 0) {\n\t\t\treturn this;\n\t\t}\n\n\t\tlet nextOriginalTokenIdx = 0;\n\t\tlet nextInsertTokenIdx = 0;\n\t\tlet text = '';\n\t\tconst newTokens = new Array<number>();\n\n\t\tlet originalEndOffset = 0;\n\t\twhile (true) {\n\t\t\tconst nextOriginalTokenEndOffset = nextOriginalTokenIdx < this._tokensCount ? this._tokens[nextOriginalTokenIdx << 1] : -1;\n\t\t\tconst nextInsertToken = nextInsertTokenIdx < insertTokens.length ? insertTokens[nextInsertTokenIdx] : null;\n\n\t\t\tif (nextOriginalTokenEndOffset !== -1 && (nextInsertToken === null || nextOriginalTokenEndOffset <= nextInsertToken.offset)) {\n\t\t\t\t// original token ends before next insert token\n\t\t\t\ttext += this._text.substring(originalEndOffset, nextOriginalTokenEndOffset);\n\t\t\t\tconst metadata = this._tokens[(nextOriginalTokenIdx << 1) + 1];\n\t\t\t\tnewTokens.push(text.length, metadata);\n\t\t\t\tnextOriginalTokenIdx++;\n\t\t\t\toriginalEndOffset = nextOriginalTokenEndOffset;\n\n\t\t\t} else if (nextInsertToken) {\n\t\t\t\tif (nextInsertToken.offset > originalEndOffset) {\n\t\t\t\t\t// insert token is in the middle of the next token.\n\t\t\t\t\ttext += this._text.substring(originalEndOffset, nextInsertToken.offset);\n\t\t\t\t\tconst metadata = this._tokens[(nextOriginalTokenIdx << 1) + 1];\n\t\t\t\t\tnewTokens.push(text.length, metadata);\n\t\t\t\t\toriginalEndOffset = nextInsertToken.offset;\n\t\t\t\t}\n\n\t\t\t\ttext += nextInsertToken.text;\n\t\t\t\tnewTokens.push(text.length, nextInsertToken.tokenMetadata);\n\t\t\t\tnextInsertTokenIdx++;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn new LineTokens(new Uint32Array(newTokens), text, this._languageIdCodec);\n\t}\n}\n\nclass SliceLineTokens implements IViewLineTokens {\n\n\tprivate readonly _source: LineTokens;\n\tprivate readonly _startOffset: number;\n\tprivate readonly _endOffset: number;\n\tprivate readonly _deltaOffset: number;\n\n\tprivate readonly _firstTokenIndex: number;\n\tprivate readonly _tokensCount: number;\n\n\tconstructor(source: LineTokens, startOffset: number, endOffset: number, deltaOffset: number) {\n\t\tthis._source = source;\n\t\tthis._startOffset = startOffset;\n\t\tthis._endOffset = endOffset;\n\t\tthis._deltaOffset = deltaOffset;\n\t\tthis._firstTokenIndex = source.findTokenIndexAtOffset(startOffset);\n\n\t\tthis._tokensCount = 0;\n\t\tfor (let i = this._firstTokenIndex, len = source.getCount(); i < len; i++) {\n\t\t\tconst tokenStartOffset = source.getStartOffset(i);\n\t\t\tif (tokenStartOffset >= endOffset) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis._tokensCount++;\n\t\t}\n\t}\n\n\tpublic getMetadata(tokenIndex: number): number {\n\t\treturn this._source.getMetadata(this._firstTokenIndex + tokenIndex);\n\t}\n\n\tpublic getLanguageId(tokenIndex: number): string {\n\t\treturn this._source.getLanguageId(this._firstTokenIndex + tokenIndex);\n\t}\n\n\tpublic getLineContent(): string {\n\t\treturn this._source.getLineContent().substring(this._startOffset, this._endOffset);\n\t}\n\n\tpublic equals(other: IViewLineTokens): boolean {\n\t\tif (other instanceof SliceLineTokens) {\n\t\t\treturn (\n\t\t\t\tthis._startOffset === other._startOffset\n\t\t\t\t&& this._endOffset === other._endOffset\n\t\t\t\t&& this._deltaOffset === other._deltaOffset\n\t\t\t\t&& this._source.slicedEquals(other._source, this._firstTokenIndex, this._tokensCount)\n\t\t\t);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic getCount(): number {\n\t\treturn this._tokensCount;\n\t}\n\n\tpublic getForeground(tokenIndex: number): ColorId {\n\t\treturn this._source.getForeground(this._firstTokenIndex + tokenIndex);\n\t}\n\n\tpublic getEndOffset(tokenIndex: number): number {\n\t\tconst tokenEndOffset = this._source.getEndOffset(this._firstTokenIndex + tokenIndex);\n\t\treturn Math.min(this._endOffset, tokenEndOffset) - this._startOffset + this._deltaOffset;\n\t}\n\n\tpublic getClassName(tokenIndex: number): string {\n\t\treturn this._source.getClassName(this._firstTokenIndex + tokenIndex);\n\t}\n\n\tpublic getInlineStyle(tokenIndex: number, colorMap: string[]): string {\n\t\treturn this._source.getInlineStyle(this._firstTokenIndex + tokenIndex, colorMap);\n\t}\n\n\tpublic getPresentation(tokenIndex: number): ITokenPresentation {\n\t\treturn this._source.getPresentation(this._firstTokenIndex + tokenIndex);\n\t}\n\n\tpublic findTokenIndexAtOffset(offset: number): number {\n\t\treturn this._source.findTokenIndexAtOffset(offset + this._startOffset - this._deltaOffset) - this._firstTokenIndex;\n\t}\n}\n"]}