{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/tokens/sparseMultilineTokens.ts"],"names":[],"mappings":"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","file":"sparseMultilineTokens.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport { Position } from 'vs/editor/common/core/position';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { countEOL } from 'vs/editor/common/core/eolCounter';\n\n/**\n * Represents sparse tokens over a contiguous range of lines.\n */\nexport class SparseMultilineTokens {\n\n\tpublic static create(startLineNumber: number, tokens: Uint32Array): SparseMultilineTokens {\n\t\treturn new SparseMultilineTokens(startLineNumber, new SparseMultilineTokensStorage(tokens));\n\t}\n\n\tprivate _startLineNumber: number;\n\tprivate _endLineNumber: number;\n\tprivate readonly _tokens: SparseMultilineTokensStorage;\n\n\t/**\n\t * (Inclusive) start line number for these tokens.\n\t */\n\tpublic get startLineNumber(): number {\n\t\treturn this._startLineNumber;\n\t}\n\n\t/**\n\t * (Inclusive) end line number for these tokens.\n\t */\n\tpublic get endLineNumber(): number {\n\t\treturn this._endLineNumber;\n\t}\n\n\tprivate constructor(startLineNumber: number, tokens: SparseMultilineTokensStorage) {\n\t\tthis._startLineNumber = startLineNumber;\n\t\tthis._tokens = tokens;\n\t\tthis._endLineNumber = this._startLineNumber + this._tokens.getMaxDeltaLine();\n\t}\n\n\tpublic toString(): string {\n\t\treturn this._tokens.toString(this._startLineNumber);\n\t}\n\n\tprivate _updateEndLineNumber(): void {\n\t\tthis._endLineNumber = this._startLineNumber + this._tokens.getMaxDeltaLine();\n\t}\n\n\tpublic isEmpty(): boolean {\n\t\treturn this._tokens.isEmpty();\n\t}\n\n\tpublic getLineTokens(lineNumber: number): SparseLineTokens | null {\n\t\tif (this._startLineNumber <= lineNumber && lineNumber <= this._endLineNumber) {\n\t\t\treturn this._tokens.getLineTokens(lineNumber - this._startLineNumber);\n\t\t}\n\t\treturn null;\n\t}\n\n\tpublic getRange(): Range | null {\n\t\tconst deltaRange = this._tokens.getRange();\n\t\tif (!deltaRange) {\n\t\t\treturn deltaRange;\n\t\t}\n\t\treturn new Range(this._startLineNumber + deltaRange.startLineNumber, deltaRange.startColumn, this._startLineNumber + deltaRange.endLineNumber, deltaRange.endColumn);\n\t}\n\n\tpublic removeTokens(range: Range): void {\n\t\tconst startLineIndex = range.startLineNumber - this._startLineNumber;\n\t\tconst endLineIndex = range.endLineNumber - this._startLineNumber;\n\n\t\tthis._startLineNumber += this._tokens.removeTokens(startLineIndex, range.startColumn - 1, endLineIndex, range.endColumn - 1);\n\t\tthis._updateEndLineNumber();\n\t}\n\n\tpublic split(range: Range): [SparseMultilineTokens, SparseMultilineTokens] {\n\t\t// split tokens to two:\n\t\t// a) all the tokens before `range`\n\t\t// b) all the tokens after `range`\n\t\tconst startLineIndex = range.startLineNumber - this._startLineNumber;\n\t\tconst endLineIndex = range.endLineNumber - this._startLineNumber;\n\n\t\tconst [a, b, bDeltaLine] = this._tokens.split(startLineIndex, range.startColumn - 1, endLineIndex, range.endColumn - 1);\n\t\treturn [new SparseMultilineTokens(this._startLineNumber, a), new SparseMultilineTokens(this._startLineNumber + bDeltaLine, b)];\n\t}\n\n\tpublic applyEdit(range: IRange, text: string): void {\n\t\tconst [eolCount, firstLineLength, lastLineLength] = countEOL(text);\n\t\tthis.acceptEdit(range, eolCount, firstLineLength, lastLineLength, text.length > 0 ? text.charCodeAt(0) : CharCode.Null);\n\t}\n\n\tpublic acceptEdit(range: IRange, eolCount: number, firstLineLength: number, lastLineLength: number, firstCharCode: number): void {\n\t\tthis._acceptDeleteRange(range);\n\t\tthis._acceptInsertText(new Position(range.startLineNumber, range.startColumn), eolCount, firstLineLength, lastLineLength, firstCharCode);\n\t\tthis._updateEndLineNumber();\n\t}\n\n\tprivate _acceptDeleteRange(range: IRange): void {\n\t\tif (range.startLineNumber === range.endLineNumber && range.startColumn === range.endColumn) {\n\t\t\t// Nothing to delete\n\t\t\treturn;\n\t\t}\n\n\t\tconst firstLineIndex = range.startLineNumber - this._startLineNumber;\n\t\tconst lastLineIndex = range.endLineNumber - this._startLineNumber;\n\n\t\tif (lastLineIndex < 0) {\n\t\t\t// this deletion occurs entirely before this block, so we only need to adjust line numbers\n\t\t\tconst deletedLinesCount = lastLineIndex - firstLineIndex;\n\t\t\tthis._startLineNumber -= deletedLinesCount;\n\t\t\treturn;\n\t\t}\n\n\t\tconst tokenMaxDeltaLine = this._tokens.getMaxDeltaLine();\n\n\t\tif (firstLineIndex >= tokenMaxDeltaLine + 1) {\n\t\t\t// this deletion occurs entirely after this block, so there is nothing to do\n\t\t\treturn;\n\t\t}\n\n\t\tif (firstLineIndex < 0 && lastLineIndex >= tokenMaxDeltaLine + 1) {\n\t\t\t// this deletion completely encompasses this block\n\t\t\tthis._startLineNumber = 0;\n\t\t\tthis._tokens.clear();\n\t\t\treturn;\n\t\t}\n\n\t\tif (firstLineIndex < 0) {\n\t\t\tconst deletedBefore = -firstLineIndex;\n\t\t\tthis._startLineNumber -= deletedBefore;\n\n\t\t\tthis._tokens.acceptDeleteRange(range.startColumn - 1, 0, 0, lastLineIndex, range.endColumn - 1);\n\t\t} else {\n\t\t\tthis._tokens.acceptDeleteRange(0, firstLineIndex, range.startColumn - 1, lastLineIndex, range.endColumn - 1);\n\t\t}\n\t}\n\n\tprivate _acceptInsertText(position: Position, eolCount: number, firstLineLength: number, lastLineLength: number, firstCharCode: number): void {\n\n\t\tif (eolCount === 0 && firstLineLength === 0) {\n\t\t\t// Nothing to insert\n\t\t\treturn;\n\t\t}\n\n\t\tconst lineIndex = position.lineNumber - this._startLineNumber;\n\n\t\tif (lineIndex < 0) {\n\t\t\t// this insertion occurs before this block, so we only need to adjust line numbers\n\t\t\tthis._startLineNumber += eolCount;\n\t\t\treturn;\n\t\t}\n\n\t\tconst tokenMaxDeltaLine = this._tokens.getMaxDeltaLine();\n\n\t\tif (lineIndex >= tokenMaxDeltaLine + 1) {\n\t\t\t// this insertion occurs after this block, so there is nothing to do\n\t\t\treturn;\n\t\t}\n\n\t\tthis._tokens.acceptInsertText(lineIndex, position.column - 1, eolCount, firstLineLength, lastLineLength, firstCharCode);\n\t}\n}\n\nclass SparseMultilineTokensStorage {\n\t/**\n\t * The encoding of tokens is:\n\t *  4*i    deltaLine (from `startLineNumber`)\n\t *  4*i+1  startCharacter (from the line start)\n\t *  4*i+2  endCharacter (from the line start)\n\t *  4*i+3  metadata\n\t */\n\tprivate readonly _tokens: Uint32Array;\n\tprivate _tokenCount: number;\n\n\tconstructor(tokens: Uint32Array) {\n\t\tthis._tokens = tokens;\n\t\tthis._tokenCount = tokens.length / 4;\n\t}\n\n\tpublic toString(startLineNumber: number): string {\n\t\tconst pieces: string[] = [];\n\t\tfor (let i = 0; i < this._tokenCount; i++) {\n\t\t\tpieces.push(`(${this._getDeltaLine(i) + startLineNumber},${this._getStartCharacter(i)}-${this._getEndCharacter(i)})`);\n\t\t}\n\t\treturn `[${pieces.join(',')}]`;\n\t}\n\n\tpublic getMaxDeltaLine(): number {\n\t\tconst tokenCount = this._getTokenCount();\n\t\tif (tokenCount === 0) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn this._getDeltaLine(tokenCount - 1);\n\t}\n\n\tpublic getRange(): Range | null {\n\t\tconst tokenCount = this._getTokenCount();\n\t\tif (tokenCount === 0) {\n\t\t\treturn null;\n\t\t}\n\t\tconst startChar = this._getStartCharacter(0);\n\t\tconst maxDeltaLine = this._getDeltaLine(tokenCount - 1);\n\t\tconst endChar = this._getEndCharacter(tokenCount - 1);\n\t\treturn new Range(0, startChar + 1, maxDeltaLine, endChar + 1);\n\t}\n\n\tprivate _getTokenCount(): number {\n\t\treturn this._tokenCount;\n\t}\n\n\tprivate _getDeltaLine(tokenIndex: number): number {\n\t\treturn this._tokens[4 * tokenIndex];\n\t}\n\n\tprivate _getStartCharacter(tokenIndex: number): number {\n\t\treturn this._tokens[4 * tokenIndex + 1];\n\t}\n\n\tprivate _getEndCharacter(tokenIndex: number): number {\n\t\treturn this._tokens[4 * tokenIndex + 2];\n\t}\n\n\tpublic isEmpty(): boolean {\n\t\treturn (this._getTokenCount() === 0);\n\t}\n\n\tpublic getLineTokens(deltaLine: number): SparseLineTokens | null {\n\t\tlet low = 0;\n\t\tlet high = this._getTokenCount() - 1;\n\n\t\twhile (low < high) {\n\t\t\tconst mid = low + Math.floor((high - low) / 2);\n\t\t\tconst midDeltaLine = this._getDeltaLine(mid);\n\n\t\t\tif (midDeltaLine < deltaLine) {\n\t\t\t\tlow = mid + 1;\n\t\t\t} else if (midDeltaLine > deltaLine) {\n\t\t\t\thigh = mid - 1;\n\t\t\t} else {\n\t\t\t\tlet min = mid;\n\t\t\t\twhile (min > low && this._getDeltaLine(min - 1) === deltaLine) {\n\t\t\t\t\tmin--;\n\t\t\t\t}\n\t\t\t\tlet max = mid;\n\t\t\t\twhile (max < high && this._getDeltaLine(max + 1) === deltaLine) {\n\t\t\t\t\tmax++;\n\t\t\t\t}\n\t\t\t\treturn new SparseLineTokens(this._tokens.subarray(4 * min, 4 * max + 4));\n\t\t\t}\n\t\t}\n\n\t\tif (this._getDeltaLine(low) === deltaLine) {\n\t\t\treturn new SparseLineTokens(this._tokens.subarray(4 * low, 4 * low + 4));\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic clear(): void {\n\t\tthis._tokenCount = 0;\n\t}\n\n\tpublic removeTokens(startDeltaLine: number, startChar: number, endDeltaLine: number, endChar: number): number {\n\t\tconst tokens = this._tokens;\n\t\tconst tokenCount = this._tokenCount;\n\t\tlet newTokenCount = 0;\n\t\tlet hasDeletedTokens = false;\n\t\tlet firstDeltaLine = 0;\n\t\tfor (let i = 0; i < tokenCount; i++) {\n\t\t\tconst srcOffset = 4 * i;\n\t\t\tconst tokenDeltaLine = tokens[srcOffset];\n\t\t\tconst tokenStartCharacter = tokens[srcOffset + 1];\n\t\t\tconst tokenEndCharacter = tokens[srcOffset + 2];\n\t\t\tconst tokenMetadata = tokens[srcOffset + 3];\n\n\t\t\tif (\n\t\t\t\t(tokenDeltaLine > startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter >= startChar))\n\t\t\t\t&& (tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter <= endChar))\n\t\t\t) {\n\t\t\t\thasDeletedTokens = true;\n\t\t\t} else {\n\t\t\t\tif (newTokenCount === 0) {\n\t\t\t\t\tfirstDeltaLine = tokenDeltaLine;\n\t\t\t\t}\n\t\t\t\tif (hasDeletedTokens) {\n\t\t\t\t\t// must move the token to the left\n\t\t\t\t\tconst destOffset = 4 * newTokenCount;\n\t\t\t\t\ttokens[destOffset] = tokenDeltaLine - firstDeltaLine;\n\t\t\t\t\ttokens[destOffset + 1] = tokenStartCharacter;\n\t\t\t\t\ttokens[destOffset + 2] = tokenEndCharacter;\n\t\t\t\t\ttokens[destOffset + 3] = tokenMetadata;\n\t\t\t\t}\n\t\t\t\tnewTokenCount++;\n\t\t\t}\n\t\t}\n\n\t\tthis._tokenCount = newTokenCount;\n\n\t\treturn firstDeltaLine;\n\t}\n\n\tpublic split(startDeltaLine: number, startChar: number, endDeltaLine: number, endChar: number): [SparseMultilineTokensStorage, SparseMultilineTokensStorage, number] {\n\t\tconst tokens = this._tokens;\n\t\tconst tokenCount = this._tokenCount;\n\t\tconst aTokens: number[] = [];\n\t\tconst bTokens: number[] = [];\n\t\tlet destTokens: number[] = aTokens;\n\t\tlet destOffset = 0;\n\t\tlet destFirstDeltaLine: number = 0;\n\t\tfor (let i = 0; i < tokenCount; i++) {\n\t\t\tconst srcOffset = 4 * i;\n\t\t\tconst tokenDeltaLine = tokens[srcOffset];\n\t\t\tconst tokenStartCharacter = tokens[srcOffset + 1];\n\t\t\tconst tokenEndCharacter = tokens[srcOffset + 2];\n\t\t\tconst tokenMetadata = tokens[srcOffset + 3];\n\n\t\t\tif ((tokenDeltaLine > startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter >= startChar))) {\n\t\t\t\tif ((tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter <= endChar))) {\n\t\t\t\t\t// this token is touching the range\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\t// this token is after the range\n\t\t\t\t\tif (destTokens !== bTokens) {\n\t\t\t\t\t\t// this token is the first token after the range\n\t\t\t\t\t\tdestTokens = bTokens;\n\t\t\t\t\t\tdestOffset = 0;\n\t\t\t\t\t\tdestFirstDeltaLine = tokenDeltaLine;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdestTokens[destOffset++] = tokenDeltaLine - destFirstDeltaLine;\n\t\t\tdestTokens[destOffset++] = tokenStartCharacter;\n\t\t\tdestTokens[destOffset++] = tokenEndCharacter;\n\t\t\tdestTokens[destOffset++] = tokenMetadata;\n\t\t}\n\n\t\treturn [new SparseMultilineTokensStorage(new Uint32Array(aTokens)), new SparseMultilineTokensStorage(new Uint32Array(bTokens)), destFirstDeltaLine];\n\t}\n\n\tpublic acceptDeleteRange(horizontalShiftForFirstLineTokens: number, startDeltaLine: number, startCharacter: number, endDeltaLine: number, endCharacter: number): void {\n\t\t// This is a bit complex, here are the cases I used to think about this:\n\t\t//\n\t\t// 1. The token starts before the deletion range\n\t\t// 1a. The token is completely before the deletion range\n\t\t//               -----------\n\t\t//                          xxxxxxxxxxx\n\t\t// 1b. The token starts before, the deletion range ends after the token\n\t\t//               -----------\n\t\t//                      xxxxxxxxxxx\n\t\t// 1c. The token starts before, the deletion range ends precisely with the token\n\t\t//               ---------------\n\t\t//                      xxxxxxxx\n\t\t// 1d. The token starts before, the deletion range is inside the token\n\t\t//               ---------------\n\t\t//                    xxxxx\n\t\t//\n\t\t// 2. The token starts at the same position with the deletion range\n\t\t// 2a. The token starts at the same position, and ends inside the deletion range\n\t\t//               -------\n\t\t//               xxxxxxxxxxx\n\t\t// 2b. The token starts at the same position, and ends at the same position as the deletion range\n\t\t//               ----------\n\t\t//               xxxxxxxxxx\n\t\t// 2c. The token starts at the same position, and ends after the deletion range\n\t\t//               -------------\n\t\t//               xxxxxxx\n\t\t//\n\t\t// 3. The token starts inside the deletion range\n\t\t// 3a. The token is inside the deletion range\n\t\t//                -------\n\t\t//             xxxxxxxxxxxxx\n\t\t// 3b. The token starts inside the deletion range, and ends at the same position as the deletion range\n\t\t//                ----------\n\t\t//             xxxxxxxxxxxxx\n\t\t// 3c. The token starts inside the deletion range, and ends after the deletion range\n\t\t//                ------------\n\t\t//             xxxxxxxxxxx\n\t\t//\n\t\t// 4. The token starts after the deletion range\n\t\t//                  -----------\n\t\t//          xxxxxxxx\n\t\t//\n\t\tconst tokens = this._tokens;\n\t\tconst tokenCount = this._tokenCount;\n\t\tconst deletedLineCount = (endDeltaLine - startDeltaLine);\n\t\tlet newTokenCount = 0;\n\t\tlet hasDeletedTokens = false;\n\t\tfor (let i = 0; i < tokenCount; i++) {\n\t\t\tconst srcOffset = 4 * i;\n\t\t\tlet tokenDeltaLine = tokens[srcOffset];\n\t\t\tlet tokenStartCharacter = tokens[srcOffset + 1];\n\t\t\tlet tokenEndCharacter = tokens[srcOffset + 2];\n\t\t\tconst tokenMetadata = tokens[srcOffset + 3];\n\n\t\t\tif (tokenDeltaLine < startDeltaLine || (tokenDeltaLine === startDeltaLine && tokenEndCharacter <= startCharacter)) {\n\t\t\t\t// 1a. The token is completely before the deletion range\n\t\t\t\t// => nothing to do\n\t\t\t\tnewTokenCount++;\n\t\t\t\tcontinue;\n\t\t\t} else if (tokenDeltaLine === startDeltaLine && tokenStartCharacter < startCharacter) {\n\t\t\t\t// 1b, 1c, 1d\n\t\t\t\t// => the token survives, but it needs to shrink\n\t\t\t\tif (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n\t\t\t\t\t// 1d. The token starts before, the deletion range is inside the token\n\t\t\t\t\t// => the token shrinks by the deletion character count\n\t\t\t\t\ttokenEndCharacter -= (endCharacter - startCharacter);\n\t\t\t\t} else {\n\t\t\t\t\t// 1b. The token starts before, the deletion range ends after the token\n\t\t\t\t\t// 1c. The token starts before, the deletion range ends precisely with the token\n\t\t\t\t\t// => the token shrinks its ending to the deletion start\n\t\t\t\t\ttokenEndCharacter = startCharacter;\n\t\t\t\t}\n\t\t\t} else if (tokenDeltaLine === startDeltaLine && tokenStartCharacter === startCharacter) {\n\t\t\t\t// 2a, 2b, 2c\n\t\t\t\tif (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n\t\t\t\t\t// 2c. The token starts at the same position, and ends after the deletion range\n\t\t\t\t\t// => the token shrinks by the deletion character count\n\t\t\t\t\ttokenEndCharacter -= (endCharacter - startCharacter);\n\t\t\t\t} else {\n\t\t\t\t\t// 2a. The token starts at the same position, and ends inside the deletion range\n\t\t\t\t\t// 2b. The token starts at the same position, and ends at the same position as the deletion range\n\t\t\t\t\t// => the token is deleted\n\t\t\t\t\thasDeletedTokens = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else if (tokenDeltaLine < endDeltaLine || (tokenDeltaLine === endDeltaLine && tokenStartCharacter < endCharacter)) {\n\t\t\t\t// 3a, 3b, 3c\n\t\t\t\tif (tokenDeltaLine === endDeltaLine && tokenEndCharacter > endCharacter) {\n\t\t\t\t\t// 3c. The token starts inside the deletion range, and ends after the deletion range\n\t\t\t\t\t// => the token moves to continue right after the deletion\n\t\t\t\t\ttokenDeltaLine = startDeltaLine;\n\t\t\t\t\ttokenStartCharacter = startCharacter;\n\t\t\t\t\ttokenEndCharacter = tokenStartCharacter + (tokenEndCharacter - endCharacter);\n\t\t\t\t} else {\n\t\t\t\t\t// 3a. The token is inside the deletion range\n\t\t\t\t\t// 3b. The token starts inside the deletion range, and ends at the same position as the deletion range\n\t\t\t\t\t// => the token is deleted\n\t\t\t\t\thasDeletedTokens = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else if (tokenDeltaLine > endDeltaLine) {\n\t\t\t\t// 4. (partial) The token starts after the deletion range, on a line below...\n\t\t\t\tif (deletedLineCount === 0 && !hasDeletedTokens) {\n\t\t\t\t\t// early stop, there is no need to walk all the tokens and do nothing...\n\t\t\t\t\tnewTokenCount = tokenCount;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\ttokenDeltaLine -= deletedLineCount;\n\t\t\t} else if (tokenDeltaLine === endDeltaLine && tokenStartCharacter >= endCharacter) {\n\t\t\t\t// 4. (continued) The token starts after the deletion range, on the last line where a deletion occurs\n\t\t\t\tif (horizontalShiftForFirstLineTokens && tokenDeltaLine === 0) {\n\t\t\t\t\ttokenStartCharacter += horizontalShiftForFirstLineTokens;\n\t\t\t\t\ttokenEndCharacter += horizontalShiftForFirstLineTokens;\n\t\t\t\t}\n\t\t\t\ttokenDeltaLine -= deletedLineCount;\n\t\t\t\ttokenStartCharacter -= (endCharacter - startCharacter);\n\t\t\t\ttokenEndCharacter -= (endCharacter - startCharacter);\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Not possible!`);\n\t\t\t}\n\n\t\t\tconst destOffset = 4 * newTokenCount;\n\t\t\ttokens[destOffset] = tokenDeltaLine;\n\t\t\ttokens[destOffset + 1] = tokenStartCharacter;\n\t\t\ttokens[destOffset + 2] = tokenEndCharacter;\n\t\t\ttokens[destOffset + 3] = tokenMetadata;\n\t\t\tnewTokenCount++;\n\t\t}\n\n\t\tthis._tokenCount = newTokenCount;\n\t}\n\n\tpublic acceptInsertText(deltaLine: number, character: number, eolCount: number, firstLineLength: number, lastLineLength: number, firstCharCode: number): void {\n\t\t// Here are the cases I used to think about this:\n\t\t//\n\t\t// 1. The token is completely before the insertion point\n\t\t//            -----------   |\n\t\t// 2. The token ends precisely at the insertion point\n\t\t//            -----------|\n\t\t// 3. The token contains the insertion point\n\t\t//            -----|------\n\t\t// 4. The token starts precisely at the insertion point\n\t\t//            |-----------\n\t\t// 5. The token is completely after the insertion point\n\t\t//            |   -----------\n\t\t//\n\t\tconst isInsertingPreciselyOneWordCharacter = (\n\t\t\teolCount === 0\n\t\t\t&& firstLineLength === 1\n\t\t\t&& (\n\t\t\t\t(firstCharCode >= CharCode.Digit0 && firstCharCode <= CharCode.Digit9)\n\t\t\t\t|| (firstCharCode >= CharCode.A && firstCharCode <= CharCode.Z)\n\t\t\t\t|| (firstCharCode >= CharCode.a && firstCharCode <= CharCode.z)\n\t\t\t)\n\t\t);\n\t\tconst tokens = this._tokens;\n\t\tconst tokenCount = this._tokenCount;\n\t\tfor (let i = 0; i < tokenCount; i++) {\n\t\t\tconst offset = 4 * i;\n\t\t\tlet tokenDeltaLine = tokens[offset];\n\t\t\tlet tokenStartCharacter = tokens[offset + 1];\n\t\t\tlet tokenEndCharacter = tokens[offset + 2];\n\n\t\t\tif (tokenDeltaLine < deltaLine || (tokenDeltaLine === deltaLine && tokenEndCharacter < character)) {\n\t\t\t\t// 1. The token is completely before the insertion point\n\t\t\t\t// => nothing to do\n\t\t\t\tcontinue;\n\t\t\t} else if (tokenDeltaLine === deltaLine && tokenEndCharacter === character) {\n\t\t\t\t// 2. The token ends precisely at the insertion point\n\t\t\t\t// => expand the end character only if inserting precisely one character that is a word character\n\t\t\t\tif (isInsertingPreciselyOneWordCharacter) {\n\t\t\t\t\ttokenEndCharacter += 1;\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else if (tokenDeltaLine === deltaLine && tokenStartCharacter < character && character < tokenEndCharacter) {\n\t\t\t\t// 3. The token contains the insertion point\n\t\t\t\tif (eolCount === 0) {\n\t\t\t\t\t// => just expand the end character\n\t\t\t\t\ttokenEndCharacter += firstLineLength;\n\t\t\t\t} else {\n\t\t\t\t\t// => cut off the token\n\t\t\t\t\ttokenEndCharacter = character;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// 4. or 5.\n\t\t\t\tif (tokenDeltaLine === deltaLine && tokenStartCharacter === character) {\n\t\t\t\t\t// 4. The token starts precisely at the insertion point\n\t\t\t\t\t// => grow the token (by keeping its start constant) only if inserting precisely one character that is a word character\n\t\t\t\t\t// => otherwise behave as in case 5.\n\t\t\t\t\tif (isInsertingPreciselyOneWordCharacter) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// => the token must move and keep its size constant\n\t\t\t\tif (tokenDeltaLine === deltaLine) {\n\t\t\t\t\ttokenDeltaLine += eolCount;\n\t\t\t\t\t// this token is on the line where the insertion is taking place\n\t\t\t\t\tif (eolCount === 0) {\n\t\t\t\t\t\ttokenStartCharacter += firstLineLength;\n\t\t\t\t\t\ttokenEndCharacter += firstLineLength;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst tokenLength = tokenEndCharacter - tokenStartCharacter;\n\t\t\t\t\t\ttokenStartCharacter = lastLineLength + (tokenStartCharacter - character);\n\t\t\t\t\t\ttokenEndCharacter = tokenStartCharacter + tokenLength;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttokenDeltaLine += eolCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttokens[offset] = tokenDeltaLine;\n\t\t\ttokens[offset + 1] = tokenStartCharacter;\n\t\t\ttokens[offset + 2] = tokenEndCharacter;\n\t\t}\n\t}\n}\n\nexport class SparseLineTokens {\n\n\tprivate readonly _tokens: Uint32Array;\n\n\tconstructor(tokens: Uint32Array) {\n\t\tthis._tokens = tokens;\n\t}\n\n\tpublic getCount(): number {\n\t\treturn this._tokens.length / 4;\n\t}\n\n\tpublic getStartCharacter(tokenIndex: number): number {\n\t\treturn this._tokens[4 * tokenIndex + 1];\n\t}\n\n\tpublic getEndCharacter(tokenIndex: number): number {\n\t\treturn this._tokens[4 * tokenIndex + 2];\n\t}\n\n\tpublic getMetadata(tokenIndex: number): number {\n\t\treturn this._tokens[4 * tokenIndex + 3];\n\t}\n}\n"]}