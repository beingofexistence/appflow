{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/encodedTokenAttributes.ts"],"names":[],"mappings":"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","file":"encodedTokenAttributes.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * Open ended enum at runtime\n */\nexport const enum LanguageId {\n\tNull = 0,\n\tPlainText = 1\n}\n\n/**\n * A font style. Values are 2^x such that a bit mask can be used.\n */\nexport const enum FontStyle {\n\tNotSet = -1,\n\tNone = 0,\n\tItalic = 1,\n\tBold = 2,\n\tUnderline = 4,\n\tStrikethrough = 8,\n}\n\n/**\n * Open ended enum at runtime\n */\nexport const enum ColorId {\n\tNone = 0,\n\tDefaultForeground = 1,\n\tDefaultBackground = 2\n}\n\n/**\n * A standard token type.\n */\nexport const enum StandardTokenType {\n\tOther = 0,\n\tComment = 1,\n\tString = 2,\n\tRegEx = 3\n}\n\n/**\n * Helpers to manage the \"collapsed\" metadata of an entire StackElement stack.\n * The following assumptions have been made:\n *  - languageId < 256 => needs 8 bits\n *  - unique color count < 512 => needs 9 bits\n *\n * The binary format is:\n * - -------------------------------------------\n *     3322 2222 2222 1111 1111 1100 0000 0000\n *     1098 7654 3210 9876 5432 1098 7654 3210\n * - -------------------------------------------\n *     xxxx xxxx xxxx xxxx xxxx xxxx xxxx xxxx\n *     bbbb bbbb ffff ffff fFFF FBTT LLLL LLLL\n * - -------------------------------------------\n *  - L = LanguageId (8 bits)\n *  - T = StandardTokenType (2 bits)\n *  - B = Balanced bracket (1 bit)\n *  - F = FontStyle (4 bits)\n *  - f = foreground color (9 bits)\n *  - b = background color (9 bits)\n *\n */\nexport const enum MetadataConsts {\n\tLANGUAGEID_MASK = 0b00000000000000000000000011111111,\n\tTOKEN_TYPE_MASK = 0b00000000000000000000001100000000,\n\tBALANCED_BRACKETS_MASK = 0b00000000000000000000010000000000,\n\tFONT_STYLE_MASK = 0b00000000000000000111100000000000,\n\tFOREGROUND_MASK = 0b00000000111111111000000000000000,\n\tBACKGROUND_MASK = 0b11111111000000000000000000000000,\n\n\tITALIC_MASK = 0b00000000000000000000100000000000,\n\tBOLD_MASK = 0b00000000000000000001000000000000,\n\tUNDERLINE_MASK = 0b00000000000000000010000000000000,\n\tSTRIKETHROUGH_MASK = 0b00000000000000000100000000000000,\n\n\t// Semantic tokens cannot set the language id, so we can\n\t// use the first 8 bits for control purposes\n\tSEMANTIC_USE_ITALIC = 0b00000000000000000000000000000001,\n\tSEMANTIC_USE_BOLD = 0b00000000000000000000000000000010,\n\tSEMANTIC_USE_UNDERLINE = 0b00000000000000000000000000000100,\n\tSEMANTIC_USE_STRIKETHROUGH = 0b00000000000000000000000000001000,\n\tSEMANTIC_USE_FOREGROUND = 0b00000000000000000000000000010000,\n\tSEMANTIC_USE_BACKGROUND = 0b00000000000000000000000000100000,\n\n\tLANGUAGEID_OFFSET = 0,\n\tTOKEN_TYPE_OFFSET = 8,\n\tBALANCED_BRACKETS_OFFSET = 10,\n\tFONT_STYLE_OFFSET = 11,\n\tFOREGROUND_OFFSET = 15,\n\tBACKGROUND_OFFSET = 24\n}\n\n/**\n */\nexport class TokenMetadata {\n\n\tpublic static getLanguageId(metadata: number): LanguageId {\n\t\treturn (metadata & MetadataConsts.LANGUAGEID_MASK) >>> MetadataConsts.LANGUAGEID_OFFSET;\n\t}\n\n\tpublic static getTokenType(metadata: number): StandardTokenType {\n\t\treturn (metadata & MetadataConsts.TOKEN_TYPE_MASK) >>> MetadataConsts.TOKEN_TYPE_OFFSET;\n\t}\n\n\tpublic static containsBalancedBrackets(metadata: number): boolean {\n\t\treturn (metadata & MetadataConsts.BALANCED_BRACKETS_MASK) !== 0;\n\t}\n\n\tpublic static getFontStyle(metadata: number): FontStyle {\n\t\treturn (metadata & MetadataConsts.FONT_STYLE_MASK) >>> MetadataConsts.FONT_STYLE_OFFSET;\n\t}\n\n\tpublic static getForeground(metadata: number): ColorId {\n\t\treturn (metadata & MetadataConsts.FOREGROUND_MASK) >>> MetadataConsts.FOREGROUND_OFFSET;\n\t}\n\n\tpublic static getBackground(metadata: number): ColorId {\n\t\treturn (metadata & MetadataConsts.BACKGROUND_MASK) >>> MetadataConsts.BACKGROUND_OFFSET;\n\t}\n\n\tpublic static getClassNameFromMetadata(metadata: number): string {\n\t\tconst foreground = this.getForeground(metadata);\n\t\tlet className = 'mtk' + foreground;\n\n\t\tconst fontStyle = this.getFontStyle(metadata);\n\t\tif (fontStyle & FontStyle.Italic) {\n\t\t\tclassName += ' mtki';\n\t\t}\n\t\tif (fontStyle & FontStyle.Bold) {\n\t\t\tclassName += ' mtkb';\n\t\t}\n\t\tif (fontStyle & FontStyle.Underline) {\n\t\t\tclassName += ' mtku';\n\t\t}\n\t\tif (fontStyle & FontStyle.Strikethrough) {\n\t\t\tclassName += ' mtks';\n\t\t}\n\n\t\treturn className;\n\t}\n\n\tpublic static getInlineStyleFromMetadata(metadata: number, colorMap: string[]): string {\n\t\tconst foreground = this.getForeground(metadata);\n\t\tconst fontStyle = this.getFontStyle(metadata);\n\n\t\tlet result = `color: ${colorMap[foreground]};`;\n\t\tif (fontStyle & FontStyle.Italic) {\n\t\t\tresult += 'font-style: italic;';\n\t\t}\n\t\tif (fontStyle & FontStyle.Bold) {\n\t\t\tresult += 'font-weight: bold;';\n\t\t}\n\t\tlet textDecoration = '';\n\t\tif (fontStyle & FontStyle.Underline) {\n\t\t\ttextDecoration += ' underline';\n\t\t}\n\t\tif (fontStyle & FontStyle.Strikethrough) {\n\t\t\ttextDecoration += ' line-through';\n\t\t}\n\t\tif (textDecoration) {\n\t\t\tresult += `text-decoration:${textDecoration};`;\n\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static getPresentationFromMetadata(metadata: number): ITokenPresentation {\n\t\tconst foreground = this.getForeground(metadata);\n\t\tconst fontStyle = this.getFontStyle(metadata);\n\n\t\treturn {\n\t\t\tforeground: foreground,\n\t\t\titalic: Boolean(fontStyle & FontStyle.Italic),\n\t\t\tbold: Boolean(fontStyle & FontStyle.Bold),\n\t\t\tunderline: Boolean(fontStyle & FontStyle.Underline),\n\t\t\tstrikethrough: Boolean(fontStyle & FontStyle.Strikethrough),\n\t\t};\n\t}\n}\n\n/**\n */\nexport interface ITokenPresentation {\n\tforeground: ColorId;\n\titalic: boolean;\n\tbold: boolean;\n\tunderline: boolean;\n\tstrikethrough: boolean;\n}\n"]}