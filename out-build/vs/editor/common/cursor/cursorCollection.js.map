{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/cursor/cursorCollection.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAWhG,MAAa,GAAG;QAcf,YAAY,OAAY;YACvB,IAAI,CAAC,CAAC,GAAS,OAAO,CAAC;YACvB,IAAI,CAAC,CAAC,GAAS,CAAC,IAAI,eAAG,CAAI,OAAO,CAAC,CAAC,CAAC;YACrC,IAAI,CAAC,CAAC,GAAsB,CAAC,CAAC;QAC/B,CAAC;QAEM,OAAO;YACb,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,CAAC,EAAQ;gBAClC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAO,CAAC;aAC7B;QACF,CAAC;QAEM,uBAAuB;YAC7B,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,CAAC,EAAQ;gBAClC,MAAM,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAO,CAAC;aAC5C;QACF,CAAC;QAEM,sBAAsB;YAC5B,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,CAAC,EAAQ;gBAClC,MAAM,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC,CAAO,CAAC;aAC3C;QACF,CAAC;QAEM,aAAa,CAAC,OAAY;YAChC,IAAI,CAAC,CAAC,GAAS,OAAO,CAAC;QACxB,CAAC;QAEM,gBAAgB;YACtB,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,CAAC,EAAQ;gBAClC,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAO,CAAC;aACtC;QACF,CAAC;QAEM,wBAAwB;YAC9B,OAAO,IAAI,CAAC,CAAC,CAAO,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC,CAAO,CAAC,CAAC;QACxE,CAAC;QAEM,MAAM;YACZ,OAAO,IAAI,CAAC,CAAC,CAAO,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC,CAAC;QACjD,CAAC;QAEM,gBAAgB;YACtB,OAAO,IAAI,CAAC,CAAC,CAAO,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;QACpD,CAAC;QAEM,sBAAsB;YAC5B,OAAO,IAAA,gBAAG,EACT,IAAI,CAAC,CAAC,EACN,IAAA,YAAG,EAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,EAAE,cAAG,CAAM,OAAO,CAAC,CACrD,CAAC,SAAS,CAAC,QAAQ,CAAC;QACvB,CAAC;QAEM,yBAAyB;YAC/B,OAAO,IAAA,gBAAG,EACT,IAAI,CAAC,CAAC,EACN,IAAA,YAAG,EAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,QAAQ,EAAE,cAAG,CAAM,OAAO,CAAC,CACrD,CAAC,SAAS,CAAC,QAAQ,CAAC;QACvB,CAAC;QAEM,aAAa;YACnB,OAAO,IAAI,CAAC,CAAC,CAAO,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;QACtD,CAAC;QAEM,iBAAiB;YACvB,OAAO,IAAI,CAAC,CAAC,CAAO,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC;QACrD,CAAC;QAEM,aAAa,CAAC,UAAwB;YAC5C,IAAI,CAAC,SAAS,CAAC,kBAAG,CAAS,mBAAmB,CAAC,UAAU,CAAC,CAAC,CAAC;QAC7D,CAAC;QAEM,gBAAgB;YACtB,OAAO,IAAI,CAAC,CAAC,CAAO,CAAC,CAAC,CAAC,aAAa,EAAE,CAAC;QACxC,CAAC;QAEM,SAAS,CAAC,MAAmC;YACnD,IAAI,MAAM,KAAK,IAAI,EAAE;gBACpB,OAAO;aACP;YACD,IAAI,CAAC,CAAC,CAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAQ,MAAM,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;YAClF,IAAI,CAAC,CAAC,CAAmB,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3C,CAAC;QAED;;WAEG;QACK,CAAC,CAAmB,eAAqC;YAChE,MAAM,sBAAsB,GAAG,IAAI,CAAC,CAAC,CAAO,MAAM,GAAG,CAAC,CAAC;YACvD,MAAM,qBAAqB,GAAG,eAAe,CAAC,MAAM,CAAC;YAErD,IAAI,sBAAsB,GAAG,qBAAqB,EAAE;gBACnD,MAAM,SAAS,GAAG,qBAAqB,GAAG,sBAAsB,CAAC;gBACjE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;oBACnC,IAAI,CAAC,CAAC,EAAoB,CAAC;iBAC3B;aACD;iBAAM,IAAI,sBAAsB,GAAG,qBAAqB,EAAE;gBAC1D,MAAM,SAAS,GAAG,sBAAsB,GAAG,qBAAqB,CAAC;gBACjE,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE,EAAE;oBACnC,IAAI,CAAC,CAAC,CAAsB,IAAI,CAAC,CAAC,CAAO,MAAM,GAAG,CAAC,CAAC,CAAC;iBACrD;aACD;YAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,qBAAqB,EAAE,CAAC,EAAE,EAAE;gBAC/C,IAAI,CAAC,CAAC,CAAO,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAQ,eAAe,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,eAAe,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;aACxG;QACF,CAAC;QAEM,oBAAoB;YAC1B,IAAI,CAAC,CAAC,CAAmB,EAAE,CAAC,CAAC;QAC9B,CAAC;QAEO,CAAC;YACR,IAAI,CAAC,CAAC,CAAO,IAAI,CAAC,IAAI,eAAG,CAAI,IAAI,CAAC,CAAC,CAAO,CAAC,CAAC;YAC5C,IAAI,CAAC,CAAC,GAAsB,IAAI,CAAC,CAAC,CAAO,MAAM,GAAG,CAAC,CAAC;QACrD,CAAC;QAEM,uBAAuB;YAC7B,IAAI,IAAI,CAAC,CAAC,CAAO,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,KAAwB,CAAC,EAAE;gBACjE,OAAO,CAAC,CAAC;aACT;YACD,OAAO,IAAI,CAAC,CAAC,CAAoB;QAClC,CAAC;QAEO,CAAC,CAAsB,WAAmB;YACjD,IAAI,IAAI,CAAC,CAAC,IAAuB,WAAW,GAAG,CAAC,EAAE;gBACjD,IAAI,CAAC,CAAC,EAAqB,CAAC;aAC5B;YACD,IAAI,CAAC,CAAC,CAAO,WAAW,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAO,CAAC;YACpD,IAAI,CAAC,CAAC,CAAO,MAAM,CAAC,WAAW,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;QACzC,CAAC;QAEM,SAAS;YACf,IAAI,IAAI,CAAC,CAAC,CAAO,MAAM,KAAK,CAAC,EAAE;gBAC9B,OAAO;aACP;YACD,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAO,KAAK,CAAC,CAAC,CAAC,CAAC;YAMtC,MAAM,aAAa,GAAmB,EAAE,CAAC;YACzC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBACnD,aAAa,CAAC,IAAI,CAAC;oBAClB,KAAK,EAAE,CAAC;oBACR,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,SAAS;iBAC1C,CAAC,CAAC;aACH;YAED,aAAa,CAAC,IAAI,CAAC,IAAA,YAAG,EAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,EAAE,WAAG,CAAG,wBAAwB,CAAC,CAAC,CAAC;YAEhF,KAAK,IAAI,iBAAiB,GAAG,CAAC,EAAE,iBAAiB,GAAG,aAAa,CAAC,MAAM,GAAG,CAAC,EAAE,iBAAiB,EAAE,EAAE;gBAClG,MAAM,OAAO,GAAG,aAAa,CAAC,iBAAiB,CAAC,CAAC;gBACjD,MAAM,IAAI,GAAG,aAAa,CAAC,iBAAiB,GAAG,CAAC,CAAC,CAAC;gBAElD,MAAM,gBAAgB,GAAG,OAAO,CAAC,SAAS,CAAC;gBAC3C,MAAM,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC;gBAErC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAO,YAAY,CAAC,2BAA2B,EAAE;oBAC3D,SAAS;iBACT;gBAED,IAAI,kBAA2B,CAAC;gBAChC,IAAI,aAAa,CAAC,OAAO,EAAE,IAAI,gBAAgB,CAAC,OAAO,EAAE,EAAE;oBAC1D,qDAAqD;oBACrD,kBAAkB,GAAG,aAAa,CAAC,gBAAgB,EAAE,CAAC,eAAe,CAAC,gBAAgB,CAAC,cAAc,EAAE,CAAC,CAAC;iBACzG;qBAAM;oBACN,8DAA8D;oBAC9D,kBAAkB,GAAG,aAAa,CAAC,gBAAgB,EAAE,CAAC,QAAQ,CAAC,gBAAgB,CAAC,cAAc,EAAE,CAAC,CAAC;iBAClG;gBAED,IAAI,kBAAkB,EAAE;oBACvB,MAAM,uBAAuB,GAAG,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,iBAAiB,GAAG,CAAC,CAAC;oBACvG,MAAM,uBAAuB,GAAG,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,iBAAiB,GAAG,CAAC,CAAC,CAAC,CAAC,iBAAiB,CAAC;oBAEvG,MAAM,WAAW,GAAG,aAAa,CAAC,uBAAuB,CAAC,CAAC,KAAK,CAAC;oBACjE,MAAM,WAAW,GAAG,aAAa,CAAC,uBAAuB,CAAC,CAAC,KAAK,CAAC;oBAEjE,MAAM,eAAe,GAAG,aAAa,CAAC,uBAAuB,CAAC,CAAC,SAAS,CAAC;oBACzE,MAAM,eAAe,GAAG,aAAa,CAAC,uBAAuB,CAAC,CAAC,SAAS,CAAC;oBAEzE,IAAI,CAAC,eAAe,CAAC,eAAe,CAAC,eAAe,CAAC,EAAE;wBACtD,MAAM,cAAc,GAAG,eAAe,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;wBAClE,MAAM,oBAAoB,GAAG,CAAC,eAAe,CAAC,wBAAwB,KAAK,eAAe,CAAC,eAAe,IAAI,eAAe,CAAC,oBAAoB,KAAK,eAAe,CAAC,WAAW,CAAC,CAAC;wBACpL,MAAM,oBAAoB,GAAG,CAAC,eAAe,CAAC,wBAAwB,KAAK,eAAe,CAAC,eAAe,IAAI,eAAe,CAAC,oBAAoB,KAAK,eAAe,CAAC,WAAW,CAAC,CAAC;wBAEpL,+FAA+F;wBAC/F,IAAI,uBAAgC,CAAC;wBACrC,IAAI,WAAW,KAAK,IAAI,CAAC,CAAC,EAAqB;4BAC9C,uBAAuB,GAAG,oBAAoB,CAAC;4BAC/C,IAAI,CAAC,CAAC,GAAsB,WAAW,CAAC;yBACxC;6BAAM;4BACN,sBAAsB;4BACtB,uBAAuB,GAAG,oBAAoB,CAAC;yBAC/C;wBAED,IAAI,kBAAuB,CAAO;wBAClC,IAAI,uBAAuB,EAAE;4BAC5B,kBAAkB,GAAG,IAAI,eAAG,CAAO,cAAc,CAAC,eAAe,EAAE,cAAc,CAAC,WAAW,EAAE,cAAc,CAAC,aAAa,EAAE,cAAc,CAAC,SAAS,CAAC,CAAC;yBACvJ;6BAAM;4BACN,kBAAkB,GAAG,IAAI,eAAG,CAAO,cAAc,CAAC,aAAa,EAAE,cAAc,CAAC,SAAS,EAAE,cAAc,CAAC,eAAe,EAAE,cAAc,CAAC,WAAW,CAAC,CAAC;yBACvJ;wBAED,aAAa,CAAC,uBAAuB,CAAC,CAAC,SAAS,GAAG,kBAAkB,CAAC;wBACtE,MAAM,cAAc,GAAG,kBAAG,CAAS,kBAAkB,CAAC,kBAAkB,CAAC,CAAC;wBAC1E,OAAO,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAQ,cAAc,CAAC,UAAU,EAAE,cAAc,CAAC,SAAS,CAAC,CAAC;qBACjG;oBAED,KAAK,MAAM,YAAY,IAAI,aAAa,EAAE;wBACzC,IAAI,YAAY,CAAC,KAAK,GAAG,WAAW,EAAE;4BACrC,YAAY,CAAC,KAAK,EAAE,CAAC;yBACrB;qBACD;oBAED,OAAO,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;oBAC/B,aAAa,CAAC,MAAM,CAAC,uBAAuB,EAAE,CAAC,CAAC,CAAC;oBACjD,IAAI,CAAC,CAAC,CAAsB,WAAW,GAAG,CAAC,CAAC,CAAC;oBAE7C,iBAAiB,EAAE,CAAC;iBACpB;aACD;QACF,CAAC;KACD;IA7OD,kBA6OC","file":"cursorCollection.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { compareBy } from 'vs/base/common/arrays';\nimport { findLastMaxBy, findFirstMinBy } from 'vs/base/common/arraysFind';\nimport { CursorState, PartialCursorState } from 'vs/editor/common/cursorCommon';\nimport { CursorContext } from 'vs/editor/common/cursor/cursorContext';\nimport { Cursor } from 'vs/editor/common/cursor/oneCursor';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { ISelection, Selection } from 'vs/editor/common/core/selection';\n\nexport class CursorCollection {\n\n\tprivate context: CursorContext;\n\n\t/**\n\t * `cursors[0]` is the primary cursor, thus `cursors.length >= 1` is always true.\n\t * `cursors.slice(1)` are secondary cursors.\n\t*/\n\tprivate cursors: Cursor[];\n\n\t// An index which identifies the last cursor that was added / moved (think Ctrl+drag)\n\t// This index refers to `cursors.slice(1)`, i.e. after removing the primary cursor.\n\tprivate lastAddedCursorIndex: number;\n\n\tconstructor(context: CursorContext) {\n\t\tthis.context = context;\n\t\tthis.cursors = [new Cursor(context)];\n\t\tthis.lastAddedCursorIndex = 0;\n\t}\n\n\tpublic dispose(): void {\n\t\tfor (const cursor of this.cursors) {\n\t\t\tcursor.dispose(this.context);\n\t\t}\n\t}\n\n\tpublic startTrackingSelections(): void {\n\t\tfor (const cursor of this.cursors) {\n\t\t\tcursor.startTrackingSelection(this.context);\n\t\t}\n\t}\n\n\tpublic stopTrackingSelections(): void {\n\t\tfor (const cursor of this.cursors) {\n\t\t\tcursor.stopTrackingSelection(this.context);\n\t\t}\n\t}\n\n\tpublic updateContext(context: CursorContext): void {\n\t\tthis.context = context;\n\t}\n\n\tpublic ensureValidState(): void {\n\t\tfor (const cursor of this.cursors) {\n\t\t\tcursor.ensureValidState(this.context);\n\t\t}\n\t}\n\n\tpublic readSelectionFromMarkers(): Selection[] {\n\t\treturn this.cursors.map(c => c.readSelectionFromMarkers(this.context));\n\t}\n\n\tpublic getAll(): CursorState[] {\n\t\treturn this.cursors.map(c => c.asCursorState());\n\t}\n\n\tpublic getViewPositions(): Position[] {\n\t\treturn this.cursors.map(c => c.viewState.position);\n\t}\n\n\tpublic getTopMostViewPosition(): Position {\n\t\treturn findFirstMinBy(\n\t\t\tthis.cursors,\n\t\t\tcompareBy(c => c.viewState.position, Position.compare)\n\t\t)!.viewState.position;\n\t}\n\n\tpublic getBottomMostViewPosition(): Position {\n\t\treturn findLastMaxBy(\n\t\t\tthis.cursors,\n\t\t\tcompareBy(c => c.viewState.position, Position.compare)\n\t\t)!.viewState.position;\n\t}\n\n\tpublic getSelections(): Selection[] {\n\t\treturn this.cursors.map(c => c.modelState.selection);\n\t}\n\n\tpublic getViewSelections(): Selection[] {\n\t\treturn this.cursors.map(c => c.viewState.selection);\n\t}\n\n\tpublic setSelections(selections: ISelection[]): void {\n\t\tthis.setStates(CursorState.fromModelSelections(selections));\n\t}\n\n\tpublic getPrimaryCursor(): CursorState {\n\t\treturn this.cursors[0].asCursorState();\n\t}\n\n\tpublic setStates(states: PartialCursorState[] | null): void {\n\t\tif (states === null) {\n\t\t\treturn;\n\t\t}\n\t\tthis.cursors[0].setState(this.context, states[0].modelState, states[0].viewState);\n\t\tthis._setSecondaryStates(states.slice(1));\n\t}\n\n\t/**\n\t * Creates or disposes secondary cursors as necessary to match the number of `secondarySelections`.\n\t */\n\tprivate _setSecondaryStates(secondaryStates: PartialCursorState[]): void {\n\t\tconst secondaryCursorsLength = this.cursors.length - 1;\n\t\tconst secondaryStatesLength = secondaryStates.length;\n\n\t\tif (secondaryCursorsLength < secondaryStatesLength) {\n\t\t\tconst createCnt = secondaryStatesLength - secondaryCursorsLength;\n\t\t\tfor (let i = 0; i < createCnt; i++) {\n\t\t\t\tthis._addSecondaryCursor();\n\t\t\t}\n\t\t} else if (secondaryCursorsLength > secondaryStatesLength) {\n\t\t\tconst removeCnt = secondaryCursorsLength - secondaryStatesLength;\n\t\t\tfor (let i = 0; i < removeCnt; i++) {\n\t\t\t\tthis._removeSecondaryCursor(this.cursors.length - 2);\n\t\t\t}\n\t\t}\n\n\t\tfor (let i = 0; i < secondaryStatesLength; i++) {\n\t\t\tthis.cursors[i + 1].setState(this.context, secondaryStates[i].modelState, secondaryStates[i].viewState);\n\t\t}\n\t}\n\n\tpublic killSecondaryCursors(): void {\n\t\tthis._setSecondaryStates([]);\n\t}\n\n\tprivate _addSecondaryCursor(): void {\n\t\tthis.cursors.push(new Cursor(this.context));\n\t\tthis.lastAddedCursorIndex = this.cursors.length - 1;\n\t}\n\n\tpublic getLastAddedCursorIndex(): number {\n\t\tif (this.cursors.length === 1 || this.lastAddedCursorIndex === 0) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn this.lastAddedCursorIndex;\n\t}\n\n\tprivate _removeSecondaryCursor(removeIndex: number): void {\n\t\tif (this.lastAddedCursorIndex >= removeIndex + 1) {\n\t\t\tthis.lastAddedCursorIndex--;\n\t\t}\n\t\tthis.cursors[removeIndex + 1].dispose(this.context);\n\t\tthis.cursors.splice(removeIndex + 1, 1);\n\t}\n\n\tpublic normalize(): void {\n\t\tif (this.cursors.length === 1) {\n\t\t\treturn;\n\t\t}\n\t\tconst cursors = this.cursors.slice(0);\n\n\t\tinterface SortedCursor {\n\t\t\tindex: number;\n\t\t\tselection: Selection;\n\t\t}\n\t\tconst sortedCursors: SortedCursor[] = [];\n\t\tfor (let i = 0, len = cursors.length; i < len; i++) {\n\t\t\tsortedCursors.push({\n\t\t\t\tindex: i,\n\t\t\t\tselection: cursors[i].modelState.selection,\n\t\t\t});\n\t\t}\n\n\t\tsortedCursors.sort(compareBy(s => s.selection, Range.compareRangesUsingStarts));\n\n\t\tfor (let sortedCursorIndex = 0; sortedCursorIndex < sortedCursors.length - 1; sortedCursorIndex++) {\n\t\t\tconst current = sortedCursors[sortedCursorIndex];\n\t\t\tconst next = sortedCursors[sortedCursorIndex + 1];\n\n\t\t\tconst currentSelection = current.selection;\n\t\t\tconst nextSelection = next.selection;\n\n\t\t\tif (!this.context.cursorConfig.multiCursorMergeOverlapping) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet shouldMergeCursors: boolean;\n\t\t\tif (nextSelection.isEmpty() || currentSelection.isEmpty()) {\n\t\t\t\t// Merge touching cursors if one of them is collapsed\n\t\t\t\tshouldMergeCursors = nextSelection.getStartPosition().isBeforeOrEqual(currentSelection.getEndPosition());\n\t\t\t} else {\n\t\t\t\t// Merge only overlapping cursors (i.e. allow touching ranges)\n\t\t\t\tshouldMergeCursors = nextSelection.getStartPosition().isBefore(currentSelection.getEndPosition());\n\t\t\t}\n\n\t\t\tif (shouldMergeCursors) {\n\t\t\t\tconst winnerSortedCursorIndex = current.index < next.index ? sortedCursorIndex : sortedCursorIndex + 1;\n\t\t\t\tconst looserSortedCursorIndex = current.index < next.index ? sortedCursorIndex + 1 : sortedCursorIndex;\n\n\t\t\t\tconst looserIndex = sortedCursors[looserSortedCursorIndex].index;\n\t\t\t\tconst winnerIndex = sortedCursors[winnerSortedCursorIndex].index;\n\n\t\t\t\tconst looserSelection = sortedCursors[looserSortedCursorIndex].selection;\n\t\t\t\tconst winnerSelection = sortedCursors[winnerSortedCursorIndex].selection;\n\n\t\t\t\tif (!looserSelection.equalsSelection(winnerSelection)) {\n\t\t\t\t\tconst resultingRange = looserSelection.plusRange(winnerSelection);\n\t\t\t\t\tconst looserSelectionIsLTR = (looserSelection.selectionStartLineNumber === looserSelection.startLineNumber && looserSelection.selectionStartColumn === looserSelection.startColumn);\n\t\t\t\t\tconst winnerSelectionIsLTR = (winnerSelection.selectionStartLineNumber === winnerSelection.startLineNumber && winnerSelection.selectionStartColumn === winnerSelection.startColumn);\n\n\t\t\t\t\t// Give more importance to the last added cursor (think Ctrl-dragging + hitting another cursor)\n\t\t\t\t\tlet resultingSelectionIsLTR: boolean;\n\t\t\t\t\tif (looserIndex === this.lastAddedCursorIndex) {\n\t\t\t\t\t\tresultingSelectionIsLTR = looserSelectionIsLTR;\n\t\t\t\t\t\tthis.lastAddedCursorIndex = winnerIndex;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Winner takes it all\n\t\t\t\t\t\tresultingSelectionIsLTR = winnerSelectionIsLTR;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet resultingSelection: Selection;\n\t\t\t\t\tif (resultingSelectionIsLTR) {\n\t\t\t\t\t\tresultingSelection = new Selection(resultingRange.startLineNumber, resultingRange.startColumn, resultingRange.endLineNumber, resultingRange.endColumn);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresultingSelection = new Selection(resultingRange.endLineNumber, resultingRange.endColumn, resultingRange.startLineNumber, resultingRange.startColumn);\n\t\t\t\t\t}\n\n\t\t\t\t\tsortedCursors[winnerSortedCursorIndex].selection = resultingSelection;\n\t\t\t\t\tconst resultingState = CursorState.fromModelSelection(resultingSelection);\n\t\t\t\t\tcursors[winnerIndex].setState(this.context, resultingState.modelState, resultingState.viewState);\n\t\t\t\t}\n\n\t\t\t\tfor (const sortedCursor of sortedCursors) {\n\t\t\t\t\tif (sortedCursor.index > looserIndex) {\n\t\t\t\t\t\tsortedCursor.index--;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcursors.splice(looserIndex, 1);\n\t\t\t\tsortedCursors.splice(looserSortedCursorIndex, 1);\n\t\t\t\tthis._removeSecondaryCursor(looserIndex - 1);\n\n\t\t\t\tsortedCursorIndex--;\n\t\t\t}\n\t\t}\n\t}\n}\n"]}