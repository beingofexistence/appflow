{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/cursor/cursorMoveOperations.ts"],"names":[],"mappings":"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","file":"cursorMoveOperations.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from 'vs/base/common/strings';\nimport { Constants } from 'vs/base/common/uint';\nimport { CursorColumns } from 'vs/editor/common/core/cursorColumns';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { AtomicTabMoveOperations, Direction } from 'vs/editor/common/cursor/cursorAtomicMoveOperations';\nimport { CursorConfiguration, ICursorSimpleModel, SelectionStartKind, SingleCursorState } from 'vs/editor/common/cursorCommon';\nimport { PositionAffinity } from 'vs/editor/common/model';\n\nexport class CursorPosition {\n\t_cursorPositionBrand: void = undefined;\n\n\tpublic readonly lineNumber: number;\n\tpublic readonly column: number;\n\tpublic readonly leftoverVisibleColumns: number;\n\n\tconstructor(lineNumber: number, column: number, leftoverVisibleColumns: number) {\n\t\tthis.lineNumber = lineNumber;\n\t\tthis.column = column;\n\t\tthis.leftoverVisibleColumns = leftoverVisibleColumns;\n\t}\n}\n\nexport class MoveOperations {\n\tpublic static leftPosition(model: ICursorSimpleModel, position: Position): Position {\n\t\tif (position.column > model.getLineMinColumn(position.lineNumber)) {\n\t\t\treturn position.delta(undefined, -strings.prevCharLength(model.getLineContent(position.lineNumber), position.column - 1));\n\t\t} else if (position.lineNumber > 1) {\n\t\t\tconst newLineNumber = position.lineNumber - 1;\n\t\t\treturn new Position(newLineNumber, model.getLineMaxColumn(newLineNumber));\n\t\t} else {\n\t\t\treturn position;\n\t\t}\n\t}\n\n\tprivate static leftPositionAtomicSoftTabs(model: ICursorSimpleModel, position: Position, tabSize: number): Position {\n\t\tif (position.column <= model.getLineIndentColumn(position.lineNumber)) {\n\t\t\tconst minColumn = model.getLineMinColumn(position.lineNumber);\n\t\t\tconst lineContent = model.getLineContent(position.lineNumber);\n\t\t\tconst newPosition = AtomicTabMoveOperations.atomicPosition(lineContent, position.column - 1, tabSize, Direction.Left);\n\t\t\tif (newPosition !== -1 && newPosition + 1 >= minColumn) {\n\t\t\t\treturn new Position(position.lineNumber, newPosition + 1);\n\t\t\t}\n\t\t}\n\t\treturn this.leftPosition(model, position);\n\t}\n\n\tprivate static left(config: CursorConfiguration, model: ICursorSimpleModel, position: Position): CursorPosition {\n\t\tconst pos = config.stickyTabStops\n\t\t\t? MoveOperations.leftPositionAtomicSoftTabs(model, position, config.tabSize)\n\t\t\t: MoveOperations.leftPosition(model, position);\n\t\treturn new CursorPosition(pos.lineNumber, pos.column, 0);\n\t}\n\n\t/**\n\t * @param noOfColumns Must be either `1`\n\t * or `Math.round(viewModel.getLineContent(viewLineNumber).length / 2)` (for half lines).\n\t*/\n\tpublic static moveLeft(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean, noOfColumns: number): SingleCursorState {\n\t\tlet lineNumber: number,\n\t\t\tcolumn: number;\n\n\t\tif (cursor.hasSelection() && !inSelectionMode) {\n\t\t\t// If the user has a selection and does not want to extend it,\n\t\t\t// put the cursor at the beginning of the selection.\n\t\t\tlineNumber = cursor.selection.startLineNumber;\n\t\t\tcolumn = cursor.selection.startColumn;\n\t\t} else {\n\t\t\t// This has no effect if noOfColumns === 1.\n\t\t\t// It is ok to do so in the half-line scenario.\n\t\t\tconst pos = cursor.position.delta(undefined, -(noOfColumns - 1));\n\t\t\t// We clip the position before normalization, as normalization is not defined\n\t\t\t// for possibly negative columns.\n\t\t\tconst normalizedPos = model.normalizePosition(MoveOperations.clipPositionColumn(pos, model), PositionAffinity.Left);\n\t\t\tconst p = MoveOperations.left(config, model, normalizedPos);\n\n\t\t\tlineNumber = p.lineNumber;\n\t\t\tcolumn = p.column;\n\t\t}\n\n\t\treturn cursor.move(inSelectionMode, lineNumber, column, 0);\n\t}\n\n\t/**\n\t * Adjusts the column so that it is within min/max of the line.\n\t*/\n\tprivate static clipPositionColumn(position: Position, model: ICursorSimpleModel): Position {\n\t\treturn new Position(\n\t\t\tposition.lineNumber,\n\t\t\tMoveOperations.clipRange(position.column, model.getLineMinColumn(position.lineNumber),\n\t\t\t\tmodel.getLineMaxColumn(position.lineNumber))\n\t\t);\n\t}\n\n\tprivate static clipRange(value: number, min: number, max: number): number {\n\t\tif (value < min) {\n\t\t\treturn min;\n\t\t}\n\t\tif (value > max) {\n\t\t\treturn max;\n\t\t}\n\t\treturn value;\n\t}\n\n\tpublic static rightPosition(model: ICursorSimpleModel, lineNumber: number, column: number): Position {\n\t\tif (column < model.getLineMaxColumn(lineNumber)) {\n\t\t\tcolumn = column + strings.nextCharLength(model.getLineContent(lineNumber), column - 1);\n\t\t} else if (lineNumber < model.getLineCount()) {\n\t\t\tlineNumber = lineNumber + 1;\n\t\t\tcolumn = model.getLineMinColumn(lineNumber);\n\t\t}\n\t\treturn new Position(lineNumber, column);\n\t}\n\n\tpublic static rightPositionAtomicSoftTabs(model: ICursorSimpleModel, lineNumber: number, column: number, tabSize: number, indentSize: number): Position {\n\t\tif (column < model.getLineIndentColumn(lineNumber)) {\n\t\t\tconst lineContent = model.getLineContent(lineNumber);\n\t\t\tconst newPosition = AtomicTabMoveOperations.atomicPosition(lineContent, column - 1, tabSize, Direction.Right);\n\t\t\tif (newPosition !== -1) {\n\t\t\t\treturn new Position(lineNumber, newPosition + 1);\n\t\t\t}\n\t\t}\n\t\treturn this.rightPosition(model, lineNumber, column);\n\t}\n\n\tpublic static right(config: CursorConfiguration, model: ICursorSimpleModel, position: Position): CursorPosition {\n\t\tconst pos = config.stickyTabStops\n\t\t\t? MoveOperations.rightPositionAtomicSoftTabs(model, position.lineNumber, position.column, config.tabSize, config.indentSize)\n\t\t\t: MoveOperations.rightPosition(model, position.lineNumber, position.column);\n\t\treturn new CursorPosition(pos.lineNumber, pos.column, 0);\n\t}\n\n\tpublic static moveRight(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean, noOfColumns: number): SingleCursorState {\n\t\tlet lineNumber: number,\n\t\t\tcolumn: number;\n\n\t\tif (cursor.hasSelection() && !inSelectionMode) {\n\t\t\t// If we are in selection mode, move right without selection cancels selection and puts cursor at the end of the selection\n\t\t\tlineNumber = cursor.selection.endLineNumber;\n\t\t\tcolumn = cursor.selection.endColumn;\n\t\t} else {\n\t\t\tconst pos = cursor.position.delta(undefined, noOfColumns - 1);\n\t\t\tconst normalizedPos = model.normalizePosition(MoveOperations.clipPositionColumn(pos, model), PositionAffinity.Right);\n\t\t\tconst r = MoveOperations.right(config, model, normalizedPos);\n\t\t\tlineNumber = r.lineNumber;\n\t\t\tcolumn = r.column;\n\t\t}\n\n\t\treturn cursor.move(inSelectionMode, lineNumber, column, 0);\n\t}\n\n\tpublic static vertical(config: CursorConfiguration, model: ICursorSimpleModel, lineNumber: number, column: number, leftoverVisibleColumns: number, newLineNumber: number, allowMoveOnEdgeLine: boolean, normalizationAffinity?: PositionAffinity): CursorPosition {\n\t\tconst currentVisibleColumn = CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize) + leftoverVisibleColumns;\n\t\tconst lineCount = model.getLineCount();\n\t\tconst wasOnFirstPosition = (lineNumber === 1 && column === 1);\n\t\tconst wasOnLastPosition = (lineNumber === lineCount && column === model.getLineMaxColumn(lineNumber));\n\t\tconst wasAtEdgePosition = (newLineNumber < lineNumber ? wasOnFirstPosition : wasOnLastPosition);\n\n\t\tlineNumber = newLineNumber;\n\t\tif (lineNumber < 1) {\n\t\t\tlineNumber = 1;\n\t\t\tif (allowMoveOnEdgeLine) {\n\t\t\t\tcolumn = model.getLineMinColumn(lineNumber);\n\t\t\t} else {\n\t\t\t\tcolumn = Math.min(model.getLineMaxColumn(lineNumber), column);\n\t\t\t}\n\t\t} else if (lineNumber > lineCount) {\n\t\t\tlineNumber = lineCount;\n\t\t\tif (allowMoveOnEdgeLine) {\n\t\t\t\tcolumn = model.getLineMaxColumn(lineNumber);\n\t\t\t} else {\n\t\t\t\tcolumn = Math.min(model.getLineMaxColumn(lineNumber), column);\n\t\t\t}\n\t\t} else {\n\t\t\tcolumn = config.columnFromVisibleColumn(model, lineNumber, currentVisibleColumn);\n\t\t}\n\n\t\tif (wasAtEdgePosition) {\n\t\t\tleftoverVisibleColumns = 0;\n\t\t} else {\n\t\t\tleftoverVisibleColumns = currentVisibleColumn - CursorColumns.visibleColumnFromColumn(model.getLineContent(lineNumber), column, config.tabSize);\n\t\t}\n\n\t\tif (normalizationAffinity !== undefined) {\n\t\t\tconst position = new Position(lineNumber, column);\n\t\t\tconst newPosition = model.normalizePosition(position, normalizationAffinity);\n\t\t\tleftoverVisibleColumns = leftoverVisibleColumns + (column - newPosition.column);\n\t\t\tlineNumber = newPosition.lineNumber;\n\t\t\tcolumn = newPosition.column;\n\t\t}\n\t\treturn new CursorPosition(lineNumber, column, leftoverVisibleColumns);\n\t}\n\n\tpublic static down(config: CursorConfiguration, model: ICursorSimpleModel, lineNumber: number, column: number, leftoverVisibleColumns: number, count: number, allowMoveOnLastLine: boolean): CursorPosition {\n\t\treturn this.vertical(config, model, lineNumber, column, leftoverVisibleColumns, lineNumber + count, allowMoveOnLastLine, PositionAffinity.RightOfInjectedText);\n\t}\n\n\tpublic static moveDown(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean, linesCount: number): SingleCursorState {\n\t\tlet lineNumber: number,\n\t\t\tcolumn: number;\n\n\t\tif (cursor.hasSelection() && !inSelectionMode) {\n\t\t\t// If we are in selection mode, move down acts relative to the end of selection\n\t\t\tlineNumber = cursor.selection.endLineNumber;\n\t\t\tcolumn = cursor.selection.endColumn;\n\t\t} else {\n\t\t\tlineNumber = cursor.position.lineNumber;\n\t\t\tcolumn = cursor.position.column;\n\t\t}\n\n\t\tlet i = 0;\n\t\tlet r: CursorPosition;\n\t\tdo {\n\t\t\tr = MoveOperations.down(config, model, lineNumber + i, column, cursor.leftoverVisibleColumns, linesCount, true);\n\t\t\tconst np = model.normalizePosition(new Position(r.lineNumber, r.column), PositionAffinity.None);\n\t\t\tif (np.lineNumber > lineNumber) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} while (i++ < 10 && lineNumber + i < model.getLineCount());\n\n\t\treturn cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\n\t}\n\n\tpublic static translateDown(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState): SingleCursorState {\n\t\tconst selection = cursor.selection;\n\n\t\tconst selectionStart = MoveOperations.down(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\n\t\tconst position = MoveOperations.down(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\n\n\t\treturn new SingleCursorState(\n\t\t\tnew Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column),\n\t\t\tSelectionStartKind.Simple,\n\t\t\tselectionStart.leftoverVisibleColumns,\n\t\t\tnew Position(position.lineNumber, position.column),\n\t\t\tposition.leftoverVisibleColumns\n\t\t);\n\t}\n\n\tpublic static up(config: CursorConfiguration, model: ICursorSimpleModel, lineNumber: number, column: number, leftoverVisibleColumns: number, count: number, allowMoveOnFirstLine: boolean): CursorPosition {\n\t\treturn this.vertical(config, model, lineNumber, column, leftoverVisibleColumns, lineNumber - count, allowMoveOnFirstLine, PositionAffinity.LeftOfInjectedText);\n\t}\n\n\tpublic static moveUp(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean, linesCount: number): SingleCursorState {\n\t\tlet lineNumber: number,\n\t\t\tcolumn: number;\n\n\t\tif (cursor.hasSelection() && !inSelectionMode) {\n\t\t\t// If we are in selection mode, move up acts relative to the beginning of selection\n\t\t\tlineNumber = cursor.selection.startLineNumber;\n\t\t\tcolumn = cursor.selection.startColumn;\n\t\t} else {\n\t\t\tlineNumber = cursor.position.lineNumber;\n\t\t\tcolumn = cursor.position.column;\n\t\t}\n\n\t\tconst r = MoveOperations.up(config, model, lineNumber, column, cursor.leftoverVisibleColumns, linesCount, true);\n\n\t\treturn cursor.move(inSelectionMode, r.lineNumber, r.column, r.leftoverVisibleColumns);\n\t}\n\n\tpublic static translateUp(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState): SingleCursorState {\n\n\t\tconst selection = cursor.selection;\n\n\t\tconst selectionStart = MoveOperations.up(config, model, selection.selectionStartLineNumber, selection.selectionStartColumn, cursor.selectionStartLeftoverVisibleColumns, 1, false);\n\t\tconst position = MoveOperations.up(config, model, selection.positionLineNumber, selection.positionColumn, cursor.leftoverVisibleColumns, 1, false);\n\n\t\treturn new SingleCursorState(\n\t\t\tnew Range(selectionStart.lineNumber, selectionStart.column, selectionStart.lineNumber, selectionStart.column),\n\t\t\tSelectionStartKind.Simple,\n\t\t\tselectionStart.leftoverVisibleColumns,\n\t\t\tnew Position(position.lineNumber, position.column),\n\t\t\tposition.leftoverVisibleColumns\n\t\t);\n\t}\n\n\tprivate static _isBlankLine(model: ICursorSimpleModel, lineNumber: number): boolean {\n\t\tif (model.getLineFirstNonWhitespaceColumn(lineNumber) === 0) {\n\t\t\t// empty or contains only whitespace\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic static moveToPrevBlankLine(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean): SingleCursorState {\n\t\tlet lineNumber = cursor.position.lineNumber;\n\n\t\t// If our current line is blank, move to the previous non-blank line\n\t\twhile (lineNumber > 1 && this._isBlankLine(model, lineNumber)) {\n\t\t\tlineNumber--;\n\t\t}\n\n\t\t// Find the previous blank line\n\t\twhile (lineNumber > 1 && !this._isBlankLine(model, lineNumber)) {\n\t\t\tlineNumber--;\n\t\t}\n\n\t\treturn cursor.move(inSelectionMode, lineNumber, model.getLineMinColumn(lineNumber), 0);\n\t}\n\n\tpublic static moveToNextBlankLine(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean): SingleCursorState {\n\t\tconst lineCount = model.getLineCount();\n\t\tlet lineNumber = cursor.position.lineNumber;\n\n\t\t// If our current line is blank, move to the next non-blank line\n\t\twhile (lineNumber < lineCount && this._isBlankLine(model, lineNumber)) {\n\t\t\tlineNumber++;\n\t\t}\n\n\t\t// Find the next blank line\n\t\twhile (lineNumber < lineCount && !this._isBlankLine(model, lineNumber)) {\n\t\t\tlineNumber++;\n\t\t}\n\n\t\treturn cursor.move(inSelectionMode, lineNumber, model.getLineMinColumn(lineNumber), 0);\n\t}\n\n\tpublic static moveToBeginningOfLine(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean): SingleCursorState {\n\t\tconst lineNumber = cursor.position.lineNumber;\n\t\tconst minColumn = model.getLineMinColumn(lineNumber);\n\t\tconst firstNonBlankColumn = model.getLineFirstNonWhitespaceColumn(lineNumber) || minColumn;\n\n\t\tlet column: number;\n\n\t\tconst relevantColumnNumber = cursor.position.column;\n\t\tif (relevantColumnNumber === firstNonBlankColumn) {\n\t\t\tcolumn = minColumn;\n\t\t} else {\n\t\t\tcolumn = firstNonBlankColumn;\n\t\t}\n\n\t\treturn cursor.move(inSelectionMode, lineNumber, column, 0);\n\t}\n\n\tpublic static moveToEndOfLine(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean, sticky: boolean): SingleCursorState {\n\t\tconst lineNumber = cursor.position.lineNumber;\n\t\tconst maxColumn = model.getLineMaxColumn(lineNumber);\n\t\treturn cursor.move(inSelectionMode, lineNumber, maxColumn, sticky ? Constants.MAX_SAFE_SMALL_INTEGER - maxColumn : 0);\n\t}\n\n\tpublic static moveToBeginningOfBuffer(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean): SingleCursorState {\n\t\treturn cursor.move(inSelectionMode, 1, 1, 0);\n\t}\n\n\tpublic static moveToEndOfBuffer(config: CursorConfiguration, model: ICursorSimpleModel, cursor: SingleCursorState, inSelectionMode: boolean): SingleCursorState {\n\t\tconst lastLineNumber = model.getLineCount();\n\t\tconst lastColumn = model.getLineMaxColumn(lastLineNumber);\n\n\t\treturn cursor.move(inSelectionMode, lastLineNumber, lastColumn, 0);\n\t}\n}\n"]}