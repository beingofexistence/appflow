{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/commands/replaceCommand.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOhG,MAAa,GAAG;QAMf,YAAY,KAAU,EAAI,IAAY,EAAE,wBAAiC,KAAK;YAC7E,IAAI,CAAC,CAAC,GAAQ,KAAK,CAAC;YACpB,IAAI,CAAC,CAAC,GAAO,IAAI,CAAC;YAClB,IAAI,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;QACpD,CAAC;QAEM,iBAAiB,CAAC,KAAiB,EAAE,OAA8B;YACzE,OAAO,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,EAAO,IAAI,CAAC,CAAC,CAAK,CAAC;QAC1D,CAAC;QAEM,kBAAkB,CAAC,KAAiB,EAAE,MAAgC;YAC5E,MAAM,qBAAqB,GAAG,MAAM,CAAC,wBAAwB,EAAE,CAAC;YAChE,MAAM,QAAQ,GAAG,qBAAqB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YAChD,OAAO,eAAG,CAAO,aAAa,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC,CAAC;QAC3D,CAAC;KACD;IArBD,kBAqBC;IAED,MAAa,GAAG;QAKf,YAAY,KAAU,EAAI,IAAY;YACrC,IAAI,CAAC,CAAC,GAAQ,KAAK,CAAC;YACpB,IAAI,CAAC,CAAC,GAAO,IAAI,CAAC;QACnB,CAAC;QAEM,iBAAiB,CAAC,KAAiB,EAAE,OAA8B;YACzE,OAAO,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,EAAO,IAAI,CAAC,CAAC,CAAK,CAAC;QAC1D,CAAC;QAEM,kBAAkB,CAAC,KAAiB,EAAE,MAAgC;YAC5E,MAAM,qBAAqB,GAAG,MAAM,CAAC,wBAAwB,EAAE,CAAC;YAChE,MAAM,QAAQ,GAAG,qBAAqB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YAChD,OAAO,eAAG,CAAO,SAAS,CAAC,QAAQ,iCAAyB,CAAC;QAC9D,CAAC;KACD;IAnBD,kBAmBC;IAED,MAAa,GAAG;QAMf,YAAY,KAAU,EAAI,IAAY,EAAE,wBAAiC,KAAK;YAC7E,IAAI,CAAC,CAAC,GAAQ,KAAK,CAAC;YACpB,IAAI,CAAC,CAAC,GAAO,IAAI,CAAC;YAClB,IAAI,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;QACpD,CAAC;QAEM,iBAAiB,CAAC,KAAiB,EAAE,OAA8B;YACzE,OAAO,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,EAAO,IAAI,CAAC,CAAC,CAAK,CAAC;QAC1D,CAAC;QAEM,kBAAkB,CAAC,KAAiB,EAAE,MAAgC;YAC5E,MAAM,qBAAqB,GAAG,MAAM,CAAC,wBAAwB,EAAE,CAAC;YAChE,MAAM,QAAQ,GAAG,qBAAqB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YAChD,OAAO,eAAG,CAAO,aAAa,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC,CAAC;QAC7D,CAAC;KACD;IArBD,kBAqBC;IAED,MAAa,GAAG;QAQf,YAAY,KAAU,EAAI,IAAY,EAAE,qBAA6B,EAAE,iBAAyB,EAAE,wBAAiC,KAAK;YACvI,IAAI,CAAC,CAAC,GAAQ,KAAK,CAAC;YACpB,IAAI,CAAC,CAAC,GAAO,IAAI,CAAC;YAClB,IAAI,CAAC,CAAC,GAAoB,iBAAiB,CAAC;YAC5C,IAAI,CAAC,CAAC,GAAwB,qBAAqB,CAAC;YACpD,IAAI,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;QACpD,CAAC;QAEM,iBAAiB,CAAC,KAAiB,EAAE,OAA8B;YACzE,OAAO,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,EAAO,IAAI,CAAC,CAAC,CAAK,CAAC;QAC1D,CAAC;QAEM,kBAAkB,CAAC,KAAiB,EAAE,MAAgC;YAC5E,MAAM,qBAAqB,GAAG,MAAM,CAAC,wBAAwB,EAAE,CAAC;YAChE,MAAM,QAAQ,GAAG,qBAAqB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YAChD,OAAO,eAAG,CAAO,aAAa,CAAC,QAAQ,CAAC,cAAc,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAuB,IAAI,CAAC,CAAC,CAAkB,CAAC,CAAC;QACvH,CAAC;KACD;IAzBD,kBAyBC;IAED,MAAa,GAAG;QAQf,YAAY,SAAc,EAAI,IAAY,EAAE,gBAAqB,EAAQ,mBAA4B,KAAK;YACzG,IAAI,CAAC,CAAC,GAAQ,SAAS,CAAC;YACxB,IAAI,CAAC,CAAC,GAAO,IAAI,CAAC;YAClB,IAAI,CAAC,CAAC,GAAmB,gBAAgB,CAAC;YAC1C,IAAI,CAAC,CAAC,GAAmB,gBAAgB,CAAC;YAC1C,IAAI,CAAC,CAAC,GAAc,IAAI,CAAC;QAC1B,CAAC;QAEM,iBAAiB,CAAC,KAAiB,EAAE,OAA8B;YACzE,OAAO,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,EAAO,IAAI,CAAC,CAAC,EAAM,IAAI,CAAC,CAAC,CAAiB,CAAC;YACjF,IAAI,CAAC,CAAC,GAAc,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAiB,CAAC;QACpE,CAAC;QAEM,kBAAkB,CAAC,KAAiB,EAAE,MAAgC;YAC5E,OAAO,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAa,CAAC,CAAC;QACvD,CAAC;KACD;IAxBD,kBAwBC","file":"replaceCommand.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection, SelectionDirection } from 'vs/editor/common/core/selection';\nimport { ICommand, ICursorStateComputerData, IEditOperationBuilder } from 'vs/editor/common/editorCommon';\nimport { ITextModel } from 'vs/editor/common/model';\n\nexport class ReplaceCommand implements ICommand {\n\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\tpublic readonly insertsAutoWhitespace: boolean;\n\n\tconstructor(range: Range, text: string, insertsAutoWhitespace: boolean = false) {\n\t\tthis._range = range;\n\t\tthis._text = text;\n\t\tthis.insertsAutoWhitespace = insertsAutoWhitespace;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(this._range, this._text);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst srcRange = inverseEditOperations[0].range;\n\t\treturn Selection.fromPositions(srcRange.getEndPosition());\n\t}\n}\n\nexport class ReplaceCommandThatSelectsText implements ICommand {\n\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\n\tconstructor(range: Range, text: string) {\n\t\tthis._range = range;\n\t\tthis._text = text;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(this._range, this._text);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst srcRange = inverseEditOperations[0].range;\n\t\treturn Selection.fromRange(srcRange, SelectionDirection.LTR);\n\t}\n}\n\nexport class ReplaceCommandWithoutChangingPosition implements ICommand {\n\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\tpublic readonly insertsAutoWhitespace: boolean;\n\n\tconstructor(range: Range, text: string, insertsAutoWhitespace: boolean = false) {\n\t\tthis._range = range;\n\t\tthis._text = text;\n\t\tthis.insertsAutoWhitespace = insertsAutoWhitespace;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(this._range, this._text);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst srcRange = inverseEditOperations[0].range;\n\t\treturn Selection.fromPositions(srcRange.getStartPosition());\n\t}\n}\n\nexport class ReplaceCommandWithOffsetCursorState implements ICommand {\n\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\tprivate readonly _columnDeltaOffset: number;\n\tprivate readonly _lineNumberDeltaOffset: number;\n\tpublic readonly insertsAutoWhitespace: boolean;\n\n\tconstructor(range: Range, text: string, lineNumberDeltaOffset: number, columnDeltaOffset: number, insertsAutoWhitespace: boolean = false) {\n\t\tthis._range = range;\n\t\tthis._text = text;\n\t\tthis._columnDeltaOffset = columnDeltaOffset;\n\t\tthis._lineNumberDeltaOffset = lineNumberDeltaOffset;\n\t\tthis.insertsAutoWhitespace = insertsAutoWhitespace;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(this._range, this._text);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst srcRange = inverseEditOperations[0].range;\n\t\treturn Selection.fromPositions(srcRange.getEndPosition().delta(this._lineNumberDeltaOffset, this._columnDeltaOffset));\n\t}\n}\n\nexport class ReplaceCommandThatPreservesSelection implements ICommand {\n\n\tprivate readonly _range: Range;\n\tprivate readonly _text: string;\n\tprivate readonly _initialSelection: Selection;\n\tprivate readonly _forceMoveMarkers: boolean;\n\tprivate _selectionId: string | null;\n\n\tconstructor(editRange: Range, text: string, initialSelection: Selection, forceMoveMarkers: boolean = false) {\n\t\tthis._range = editRange;\n\t\tthis._text = text;\n\t\tthis._initialSelection = initialSelection;\n\t\tthis._forceMoveMarkers = forceMoveMarkers;\n\t\tthis._selectionId = null;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(this._range, this._text, this._forceMoveMarkers);\n\t\tthis._selectionId = builder.trackSelection(this._initialSelection);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\treturn helper.getTrackedSelection(this._selectionId!);\n\t}\n}\n"]}