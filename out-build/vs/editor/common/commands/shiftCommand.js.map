{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/commands/shiftCommand.ts"],"names":[],"mappings":"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","file":"shiftCommand.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport * as strings from 'vs/base/common/strings';\nimport { CursorColumns } from 'vs/editor/common/core/cursorColumns';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection, SelectionDirection } from 'vs/editor/common/core/selection';\nimport { ICommand, ICursorStateComputerData, IEditOperationBuilder } from 'vs/editor/common/editorCommon';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { EditorAutoIndentStrategy } from 'vs/editor/common/config/editorOptions';\nimport { getEnterAction } from 'vs/editor/common/languages/enterAction';\nimport { ILanguageConfigurationService } from 'vs/editor/common/languages/languageConfigurationRegistry';\n\nexport interface IShiftCommandOpts {\n\tisUnshift: boolean;\n\ttabSize: number;\n\tindentSize: number;\n\tinsertSpaces: boolean;\n\tuseTabStops: boolean;\n\tautoIndent: EditorAutoIndentStrategy;\n}\n\nconst repeatCache: { [str: string]: string[] } = Object.create(null);\nfunction cachedStringRepeat(str: string, count: number): string {\n\tif (count <= 0) {\n\t\treturn '';\n\t}\n\tif (!repeatCache[str]) {\n\t\trepeatCache[str] = ['', str];\n\t}\n\tconst cache = repeatCache[str];\n\tfor (let i = cache.length; i <= count; i++) {\n\t\tcache[i] = cache[i - 1] + str;\n\t}\n\treturn cache[count];\n}\n\nexport class ShiftCommand implements ICommand {\n\n\tpublic static unshiftIndent(line: string, column: number, tabSize: number, indentSize: number, insertSpaces: boolean): string {\n\t\t// Determine the visible column where the content starts\n\t\tconst contentStartVisibleColumn = CursorColumns.visibleColumnFromColumn(line, column, tabSize);\n\n\t\tif (insertSpaces) {\n\t\t\tconst indent = cachedStringRepeat(' ', indentSize);\n\t\t\tconst desiredTabStop = CursorColumns.prevIndentTabStop(contentStartVisibleColumn, indentSize);\n\t\t\tconst indentCount = desiredTabStop / indentSize; // will be an integer\n\t\t\treturn cachedStringRepeat(indent, indentCount);\n\t\t} else {\n\t\t\tconst indent = '\\t';\n\t\t\tconst desiredTabStop = CursorColumns.prevRenderTabStop(contentStartVisibleColumn, tabSize);\n\t\t\tconst indentCount = desiredTabStop / tabSize; // will be an integer\n\t\t\treturn cachedStringRepeat(indent, indentCount);\n\t\t}\n\t}\n\n\tpublic static shiftIndent(line: string, column: number, tabSize: number, indentSize: number, insertSpaces: boolean): string {\n\t\t// Determine the visible column where the content starts\n\t\tconst contentStartVisibleColumn = CursorColumns.visibleColumnFromColumn(line, column, tabSize);\n\n\t\tif (insertSpaces) {\n\t\t\tconst indent = cachedStringRepeat(' ', indentSize);\n\t\t\tconst desiredTabStop = CursorColumns.nextIndentTabStop(contentStartVisibleColumn, indentSize);\n\t\t\tconst indentCount = desiredTabStop / indentSize; // will be an integer\n\t\t\treturn cachedStringRepeat(indent, indentCount);\n\t\t} else {\n\t\t\tconst indent = '\\t';\n\t\t\tconst desiredTabStop = CursorColumns.nextRenderTabStop(contentStartVisibleColumn, tabSize);\n\t\t\tconst indentCount = desiredTabStop / tabSize; // will be an integer\n\t\t\treturn cachedStringRepeat(indent, indentCount);\n\t\t}\n\t}\n\n\tprivate readonly _opts: IShiftCommandOpts;\n\tprivate readonly _selection: Selection;\n\tprivate _selectionId: string | null;\n\tprivate _useLastEditRangeForCursorEndPosition: boolean;\n\tprivate _selectionStartColumnStaysPut: boolean;\n\n\tconstructor(\n\t\trange: Selection,\n\t\topts: IShiftCommandOpts,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService\n\t) {\n\t\tthis._opts = opts;\n\t\tthis._selection = range;\n\t\tthis._selectionId = null;\n\t\tthis._useLastEditRangeForCursorEndPosition = false;\n\t\tthis._selectionStartColumnStaysPut = false;\n\t}\n\n\tprivate _addEditOperation(builder: IEditOperationBuilder, range: Range, text: string) {\n\t\tif (this._useLastEditRangeForCursorEndPosition) {\n\t\t\tbuilder.addTrackedEditOperation(range, text);\n\t\t} else {\n\t\t\tbuilder.addEditOperation(range, text);\n\t\t}\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tconst startLine = this._selection.startLineNumber;\n\n\t\tlet endLine = this._selection.endLineNumber;\n\t\tif (this._selection.endColumn === 1 && startLine !== endLine) {\n\t\t\tendLine = endLine - 1;\n\t\t}\n\n\t\tconst { tabSize, indentSize, insertSpaces } = this._opts;\n\t\tconst shouldIndentEmptyLines = (startLine === endLine);\n\n\t\tif (this._opts.useTabStops) {\n\t\t\t// if indenting or outdenting on a whitespace only line\n\t\t\tif (this._selection.isEmpty()) {\n\t\t\t\tif (/^\\s*$/.test(model.getLineContent(startLine))) {\n\t\t\t\t\tthis._useLastEditRangeForCursorEndPosition = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// keep track of previous line's \"miss-alignment\"\n\t\t\tlet previousLineExtraSpaces = 0, extraSpaces = 0;\n\t\t\tfor (let lineNumber = startLine; lineNumber <= endLine; lineNumber++, previousLineExtraSpaces = extraSpaces) {\n\t\t\t\textraSpaces = 0;\n\t\t\t\tconst lineText = model.getLineContent(lineNumber);\n\t\t\t\tlet indentationEndIndex = strings.firstNonWhitespaceIndex(lineText);\n\n\t\t\t\tif (this._opts.isUnshift && (lineText.length === 0 || indentationEndIndex === 0)) {\n\t\t\t\t\t// empty line or line with no leading whitespace => nothing to do\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!shouldIndentEmptyLines && !this._opts.isUnshift && lineText.length === 0) {\n\t\t\t\t\t// do not indent empty lines => nothing to do\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (indentationEndIndex === -1) {\n\t\t\t\t\t// the entire line is whitespace\n\t\t\t\t\tindentationEndIndex = lineText.length;\n\t\t\t\t}\n\n\t\t\t\tif (lineNumber > 1) {\n\t\t\t\t\tconst contentStartVisibleColumn = CursorColumns.visibleColumnFromColumn(lineText, indentationEndIndex + 1, tabSize);\n\t\t\t\t\tif (contentStartVisibleColumn % indentSize !== 0) {\n\t\t\t\t\t\t// The current line is \"miss-aligned\", so let's see if this is expected...\n\t\t\t\t\t\t// This can only happen when it has trailing commas in the indent\n\t\t\t\t\t\tif (model.tokenization.isCheapToTokenize(lineNumber - 1)) {\n\t\t\t\t\t\t\tconst enterAction = getEnterAction(this._opts.autoIndent, model, new Range(lineNumber - 1, model.getLineMaxColumn(lineNumber - 1), lineNumber - 1, model.getLineMaxColumn(lineNumber - 1)), this._languageConfigurationService);\n\t\t\t\t\t\t\tif (enterAction) {\n\t\t\t\t\t\t\t\textraSpaces = previousLineExtraSpaces;\n\t\t\t\t\t\t\t\tif (enterAction.appendText) {\n\t\t\t\t\t\t\t\t\tfor (let j = 0, lenJ = enterAction.appendText.length; j < lenJ && extraSpaces < indentSize; j++) {\n\t\t\t\t\t\t\t\t\t\tif (enterAction.appendText.charCodeAt(j) === CharCode.Space) {\n\t\t\t\t\t\t\t\t\t\t\textraSpaces++;\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (enterAction.removeText) {\n\t\t\t\t\t\t\t\t\textraSpaces = Math.max(0, extraSpaces - enterAction.removeText);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Act as if `prefixSpaces` is not part of the indentation\n\t\t\t\t\t\t\t\tfor (let j = 0; j < extraSpaces; j++) {\n\t\t\t\t\t\t\t\t\tif (indentationEndIndex === 0 || lineText.charCodeAt(indentationEndIndex - 1) !== CharCode.Space) {\n\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tindentationEndIndex--;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\n\t\t\t\tif (this._opts.isUnshift && indentationEndIndex === 0) {\n\t\t\t\t\t// line with no leading whitespace => nothing to do\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlet desiredIndent: string;\n\t\t\t\tif (this._opts.isUnshift) {\n\t\t\t\t\tdesiredIndent = ShiftCommand.unshiftIndent(lineText, indentationEndIndex + 1, tabSize, indentSize, insertSpaces);\n\t\t\t\t} else {\n\t\t\t\t\tdesiredIndent = ShiftCommand.shiftIndent(lineText, indentationEndIndex + 1, tabSize, indentSize, insertSpaces);\n\t\t\t\t}\n\n\t\t\t\tthis._addEditOperation(builder, new Range(lineNumber, 1, lineNumber, indentationEndIndex + 1), desiredIndent);\n\t\t\t\tif (lineNumber === startLine && !this._selection.isEmpty()) {\n\t\t\t\t\t// Force the startColumn to stay put because we're inserting after it\n\t\t\t\t\tthis._selectionStartColumnStaysPut = (this._selection.startColumn <= indentationEndIndex + 1);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\n\t\t\t// if indenting or outdenting on a whitespace only line\n\t\t\tif (!this._opts.isUnshift && this._selection.isEmpty() && model.getLineLength(startLine) === 0) {\n\t\t\t\tthis._useLastEditRangeForCursorEndPosition = true;\n\t\t\t}\n\n\t\t\tconst oneIndent = (insertSpaces ? cachedStringRepeat(' ', indentSize) : '\\t');\n\n\t\t\tfor (let lineNumber = startLine; lineNumber <= endLine; lineNumber++) {\n\t\t\t\tconst lineText = model.getLineContent(lineNumber);\n\t\t\t\tlet indentationEndIndex = strings.firstNonWhitespaceIndex(lineText);\n\n\t\t\t\tif (this._opts.isUnshift && (lineText.length === 0 || indentationEndIndex === 0)) {\n\t\t\t\t\t// empty line or line with no leading whitespace => nothing to do\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!shouldIndentEmptyLines && !this._opts.isUnshift && lineText.length === 0) {\n\t\t\t\t\t// do not indent empty lines => nothing to do\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (indentationEndIndex === -1) {\n\t\t\t\t\t// the entire line is whitespace\n\t\t\t\t\tindentationEndIndex = lineText.length;\n\t\t\t\t}\n\n\t\t\t\tif (this._opts.isUnshift && indentationEndIndex === 0) {\n\t\t\t\t\t// line with no leading whitespace => nothing to do\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (this._opts.isUnshift) {\n\n\t\t\t\t\tindentationEndIndex = Math.min(indentationEndIndex, indentSize);\n\t\t\t\t\tfor (let i = 0; i < indentationEndIndex; i++) {\n\t\t\t\t\t\tconst chr = lineText.charCodeAt(i);\n\t\t\t\t\t\tif (chr === CharCode.Tab) {\n\t\t\t\t\t\t\tindentationEndIndex = i + 1;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._addEditOperation(builder, new Range(lineNumber, 1, lineNumber, indentationEndIndex + 1), '');\n\t\t\t\t} else {\n\t\t\t\t\tthis._addEditOperation(builder, new Range(lineNumber, 1, lineNumber, 1), oneIndent);\n\t\t\t\t\tif (lineNumber === startLine && !this._selection.isEmpty()) {\n\t\t\t\t\t\t// Force the startColumn to stay put because we're inserting after it\n\t\t\t\t\t\tthis._selectionStartColumnStaysPut = (this._selection.startColumn === 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._selectionId = builder.trackSelection(this._selection);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tif (this._useLastEditRangeForCursorEndPosition) {\n\t\t\tconst lastOp = helper.getInverseEditOperations()[0];\n\t\t\treturn new Selection(lastOp.range.endLineNumber, lastOp.range.endColumn, lastOp.range.endLineNumber, lastOp.range.endColumn);\n\t\t}\n\t\tconst result = helper.getTrackedSelection(this._selectionId!);\n\n\t\tif (this._selectionStartColumnStaysPut) {\n\t\t\t// The selection start should not move\n\t\t\tconst initialStartColumn = this._selection.startColumn;\n\t\t\tconst resultStartColumn = result.startColumn;\n\t\t\tif (resultStartColumn <= initialStartColumn) {\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tif (result.getDirection() === SelectionDirection.LTR) {\n\t\t\t\treturn new Selection(result.startLineNumber, initialStartColumn, result.endLineNumber, result.endColumn);\n\t\t\t}\n\t\t\treturn new Selection(result.endLineNumber, result.endColumn, result.startLineNumber, initialStartColumn);\n\t\t}\n\n\t\treturn result;\n\t}\n}\n"]}