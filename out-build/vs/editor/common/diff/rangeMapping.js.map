{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/diff/rangeMapping.ts"],"names":[],"mappings":"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","file":"rangeMapping.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { LineRange } from 'vs/editor/common/core/lineRange';\nimport { Range } from 'vs/editor/common/core/range';\n\n/**\n * Maps a line range in the original text model to a line range in the modified text model.\n */\nexport class LineRangeMapping {\n\tpublic static inverse(mapping: readonly DetailedLineRangeMapping[], originalLineCount: number, modifiedLineCount: number): DetailedLineRangeMapping[] {\n\t\tconst result: DetailedLineRangeMapping[] = [];\n\t\tlet lastOriginalEndLineNumber = 1;\n\t\tlet lastModifiedEndLineNumber = 1;\n\n\t\tfor (const m of mapping) {\n\t\t\tconst r = new DetailedLineRangeMapping(\n\t\t\t\tnew LineRange(lastOriginalEndLineNumber, m.original.startLineNumber),\n\t\t\t\tnew LineRange(lastModifiedEndLineNumber, m.modified.startLineNumber),\n\t\t\t\tundefined\n\t\t\t);\n\t\t\tif (!r.modified.isEmpty) {\n\t\t\t\tresult.push(r);\n\t\t\t}\n\t\t\tlastOriginalEndLineNumber = m.original.endLineNumberExclusive;\n\t\t\tlastModifiedEndLineNumber = m.modified.endLineNumberExclusive;\n\t\t}\n\t\tconst r = new DetailedLineRangeMapping(\n\t\t\tnew LineRange(lastOriginalEndLineNumber, originalLineCount + 1),\n\t\t\tnew LineRange(lastModifiedEndLineNumber, modifiedLineCount + 1),\n\t\t\tundefined\n\t\t);\n\t\tif (!r.modified.isEmpty) {\n\t\t\tresult.push(r);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * The line range in the original text model.\n\t */\n\tpublic readonly original: LineRange;\n\n\t/**\n\t * The line range in the modified text model.\n\t */\n\tpublic readonly modified: LineRange;\n\n\tconstructor(\n\t\toriginalRange: LineRange,\n\t\tmodifiedRange: LineRange\n\t) {\n\t\tthis.original = originalRange;\n\t\tthis.modified = modifiedRange;\n\t}\n\n\n\tpublic toString(): string {\n\t\treturn `{${this.original.toString()}->${this.modified.toString()}}`;\n\t}\n\n\tpublic flip(): LineRangeMapping {\n\t\treturn new LineRangeMapping(this.modified, this.original);\n\t}\n\n\tpublic join(other: LineRangeMapping): LineRangeMapping {\n\t\treturn new LineRangeMapping(\n\t\t\tthis.original.join(other.original),\n\t\t\tthis.modified.join(other.modified)\n\t\t);\n\t}\n\n\tpublic get changedLineCount() {\n\t\treturn Math.max(this.original.length, this.modified.length);\n\t}\n}\n\n/**\n * Maps a line range in the original text model to a line range in the modified text model.\n * Also contains inner range mappings.\n */\nexport class DetailedLineRangeMapping extends LineRangeMapping {\n\t/**\n\t * If inner changes have not been computed, this is set to undefined.\n\t * Otherwise, it represents the character-level diff in this line range.\n\t * The original range of each range mapping should be contained in the original line range (same for modified), exceptions are new-lines.\n\t * Must not be an empty array.\n\t */\n\tpublic readonly innerChanges: RangeMapping[] | undefined;\n\n\tconstructor(\n\t\toriginalRange: LineRange,\n\t\tmodifiedRange: LineRange,\n\t\tinnerChanges: RangeMapping[] | undefined\n\t) {\n\t\tsuper(originalRange, modifiedRange);\n\t\tthis.innerChanges = innerChanges;\n\t}\n\n\tpublic override flip(): DetailedLineRangeMapping {\n\t\treturn new DetailedLineRangeMapping(this.modified, this.original, this.innerChanges?.map(c => c.flip()));\n\t}\n}\n\n/**\n * Maps a range in the original text model to a range in the modified text model.\n */\nexport class RangeMapping {\n\t/**\n\t * The original range.\n\t */\n\treadonly originalRange: Range;\n\n\t/**\n\t * The modified range.\n\t */\n\treadonly modifiedRange: Range;\n\n\tconstructor(\n\t\toriginalRange: Range,\n\t\tmodifiedRange: Range\n\t) {\n\t\tthis.originalRange = originalRange;\n\t\tthis.modifiedRange = modifiedRange;\n\t}\n\n\tpublic toString(): string {\n\t\treturn `{${this.originalRange.toString()}->${this.modifiedRange.toString()}}`;\n\t}\n\n\tpublic flip(): RangeMapping {\n\t\treturn new RangeMapping(this.modifiedRange, this.originalRange);\n\t}\n}\n"]}