{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/diff/linesDiffComputer.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAchG,MAAa,GAAG;QACf,YACU,OAA4C;QAErD;;;WAGG;QACM,KAA2B;QAEpC;;;WAGG;QACM,UAAmB;YAZnB,YAAO,GAAP,OAAO,CAAqC;YAM5C,UAAK,GAAL,KAAK,CAAsB;YAM3B,eAAU,GAAV,UAAU,CAAS;QAE7B,CAAC;KACD;IAjBD,kBAiBC;IAED,MAAa,GAAG;QAUf,YACC,gBAAqB,EACrB,OAA4C;YAE5C,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;YACzC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACxB,CAAC;QAEM,IAAI;YACV,OAAO,IAAI,GAAG,CAAO,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QACrF,CAAC;KACD;IArBD,kBAqBC","file":"linesDiffComputer.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DetailedLineRangeMapping, LineRangeMapping } from './rangeMapping';\n\nexport interface ILinesDiffComputer {\n\tcomputeDiff(originalLines: string[], modifiedLines: string[], options: ILinesDiffComputerOptions): LinesDiff;\n}\n\nexport interface ILinesDiffComputerOptions {\n\treadonly ignoreTrimWhitespace: boolean;\n\treadonly maxComputationTimeMs: number;\n\treadonly computeMoves: boolean;\n}\n\nexport class LinesDiff {\n\tconstructor(\n\t\treadonly changes: readonly DetailedLineRangeMapping[],\n\n\t\t/**\n\t\t * Sorted by original line ranges.\n\t\t * The original line ranges and the modified line ranges must be disjoint (but can be touching).\n\t\t */\n\t\treadonly moves: readonly MovedText[],\n\n\t\t/**\n\t\t * Indicates if the time out was reached.\n\t\t * In that case, the diffs might be an approximation and the user should be asked to rerun the diff with more time.\n\t\t */\n\t\treadonly hitTimeout: boolean,\n\t) {\n\t}\n}\n\nexport class MovedText {\n\tpublic readonly lineRangeMapping: LineRangeMapping;\n\n\t/**\n\t * The diff from the original text to the moved text.\n\t * Must be contained in the original/modified line range.\n\t * Can be empty if the text didn't change (only moved).\n\t */\n\tpublic readonly changes: readonly DetailedLineRangeMapping[];\n\n\tconstructor(\n\t\tlineRangeMapping: LineRangeMapping,\n\t\tchanges: readonly DetailedLineRangeMapping[],\n\t) {\n\t\tthis.lineRangeMapping = lineRangeMapping;\n\t\tthis.changes = changes;\n\t}\n\n\tpublic flip(): MovedText {\n\t\treturn new MovedText(this.lineRangeMapping.flip(), this.changes.map(c => c.flip()));\n\t}\n}\n"]}