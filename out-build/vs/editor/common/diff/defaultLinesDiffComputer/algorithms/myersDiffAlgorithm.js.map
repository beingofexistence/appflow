{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/myersDiffAlgorithm.ts"],"names":[],"mappings":"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","file":"myersDiffAlgorithm.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { OffsetRange } from 'vs/editor/common/core/offsetRange';\nimport { DiffAlgorithmResult, IDiffAlgorithm, ISequence, ITimeout, InfiniteTimeout, SequenceDiff } from 'vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm';\n\n/**\n * An O(ND) diff algorithm that has a quadratic space worst-case complexity.\n*/\nexport class MyersDiffAlgorithm implements IDiffAlgorithm {\n\tcompute(seq1: ISequence, seq2: ISequence, timeout: ITimeout = InfiniteTimeout.instance): DiffAlgorithmResult {\n\t\t// These are common special cases.\n\t\t// The early return improves performance dramatically.\n\t\tif (seq1.length === 0 || seq2.length === 0) {\n\t\t\treturn DiffAlgorithmResult.trivial(seq1, seq2);\n\t\t}\n\n\t\tconst seqX = seq1; // Text on the x axis\n\t\tconst seqY = seq2; // Text on the y axis\n\n\t\tfunction getXAfterSnake(x: number, y: number): number {\n\t\t\twhile (x < seqX.length && y < seqY.length && seqX.getElement(x) === seqY.getElement(y)) {\n\t\t\t\tx++;\n\t\t\t\ty++;\n\t\t\t}\n\t\t\treturn x;\n\t\t}\n\n\t\tlet d = 0;\n\t\t// V[k]: X value of longest d-line that ends in diagonal k.\n\t\t// d-line: path from (0,0) to (x,y) that uses exactly d non-diagonals.\n\t\t// diagonal k: Set of points (x,y) with x-y = k.\n\t\t// k=1 -> (1,0),(2,1)\n\t\tconst V = new FastInt32Array();\n\t\tV.set(0, getXAfterSnake(0, 0));\n\n\t\tconst paths = new FastArrayNegativeIndices<SnakePath | null>();\n\t\tpaths.set(0, V.get(0) === 0 ? null : new SnakePath(null, 0, 0, V.get(0)));\n\n\t\tlet k = 0;\n\n\t\tloop: while (true) {\n\t\t\td++;\n\t\t\tif (!timeout.isValid()) {\n\t\t\t\treturn DiffAlgorithmResult.trivialTimedOut(seqX, seqY);\n\t\t\t}\n\t\t\t// The paper has `for (k = -d; k <= d; k += 2)`, but we can ignore diagonals that cannot influence the result.\n\t\t\tconst lowerBound = -Math.min(d, seqY.length + (d % 2));\n\t\t\tconst upperBound = Math.min(d, seqX.length + (d % 2));\n\t\t\tfor (k = lowerBound; k <= upperBound; k += 2) {\n\t\t\t\tlet step = 0;\n\t\t\t\t// We can use the X values of (d-1)-lines to compute X value of the longest d-lines.\n\t\t\t\tconst maxXofDLineTop = k === upperBound ? -1 : V.get(k + 1); // We take a vertical non-diagonal (add a symbol in seqX)\n\t\t\t\tconst maxXofDLineLeft = k === lowerBound ? -1 : V.get(k - 1) + 1; // We take a horizontal non-diagonal (+1 x) (delete a symbol in seqX)\n\t\t\t\tstep++;\n\t\t\t\tconst x = Math.min(Math.max(maxXofDLineTop, maxXofDLineLeft), seqX.length);\n\t\t\t\tconst y = x - k;\n\t\t\t\tstep++;\n\t\t\t\tif (x > seqX.length || y > seqY.length) {\n\t\t\t\t\t// This diagonal is irrelevant for the result.\n\t\t\t\t\t// TODO: Don't pay the cost for this in the next iteration.\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst newMaxX = getXAfterSnake(x, y);\n\t\t\t\tV.set(k, newMaxX);\n\t\t\t\tconst lastPath = x === maxXofDLineTop ? paths.get(k + 1) : paths.get(k - 1);\n\t\t\t\tpaths.set(k, newMaxX !== x ? new SnakePath(lastPath, x, y, newMaxX - x) : lastPath);\n\n\t\t\t\tif (V.get(k) === seqX.length && V.get(k) - k === seqY.length) {\n\t\t\t\t\tbreak loop;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet path = paths.get(k);\n\t\tconst result: SequenceDiff[] = [];\n\t\tlet lastAligningPosS1: number = seqX.length;\n\t\tlet lastAligningPosS2: number = seqY.length;\n\n\t\twhile (true) {\n\t\t\tconst endX = path ? path.x + path.length : 0;\n\t\t\tconst endY = path ? path.y + path.length : 0;\n\n\t\t\tif (endX !== lastAligningPosS1 || endY !== lastAligningPosS2) {\n\t\t\t\tresult.push(new SequenceDiff(\n\t\t\t\t\tnew OffsetRange(endX, lastAligningPosS1),\n\t\t\t\t\tnew OffsetRange(endY, lastAligningPosS2),\n\t\t\t\t));\n\t\t\t}\n\t\t\tif (!path) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlastAligningPosS1 = path.x;\n\t\t\tlastAligningPosS2 = path.y;\n\n\t\t\tpath = path.prev;\n\t\t}\n\n\t\tresult.reverse();\n\t\treturn new DiffAlgorithmResult(result, false);\n\t}\n}\n\nclass SnakePath {\n\tconstructor(\n\t\tpublic readonly prev: SnakePath | null,\n\t\tpublic readonly x: number,\n\t\tpublic readonly y: number,\n\t\tpublic readonly length: number\n\t) {\n\t}\n}\n\n/**\n * An array that supports fast negative indices.\n*/\nclass FastInt32Array {\n\tprivate positiveArr: Int32Array = new Int32Array(10);\n\tprivate negativeArr: Int32Array = new Int32Array(10);\n\n\tget(idx: number): number {\n\t\tif (idx < 0) {\n\t\t\tidx = -idx - 1;\n\t\t\treturn this.negativeArr[idx];\n\t\t} else {\n\t\t\treturn this.positiveArr[idx];\n\t\t}\n\t}\n\n\tset(idx: number, value: number): void {\n\t\tif (idx < 0) {\n\t\t\tidx = -idx - 1;\n\t\t\tif (idx >= this.negativeArr.length) {\n\t\t\t\tconst arr = this.negativeArr;\n\t\t\t\tthis.negativeArr = new Int32Array(arr.length * 2);\n\t\t\t\tthis.negativeArr.set(arr);\n\t\t\t}\n\t\t\tthis.negativeArr[idx] = value;\n\t\t} else {\n\t\t\tif (idx >= this.positiveArr.length) {\n\t\t\t\tconst arr = this.positiveArr;\n\t\t\t\tthis.positiveArr = new Int32Array(arr.length * 2);\n\t\t\t\tthis.positiveArr.set(arr);\n\t\t\t}\n\t\t\tthis.positiveArr[idx] = value;\n\t\t}\n\t}\n}\n\n/**\n * An array that supports fast negative indices.\n*/\nclass FastArrayNegativeIndices<T> {\n\tprivate readonly positiveArr: T[] = [];\n\tprivate readonly negativeArr: T[] = [];\n\n\tget(idx: number): T {\n\t\tif (idx < 0) {\n\t\t\tidx = -idx - 1;\n\t\t\treturn this.negativeArr[idx];\n\t\t} else {\n\t\t\treturn this.positiveArr[idx];\n\t\t}\n\t}\n\n\tset(idx: number, value: T): void {\n\t\tif (idx < 0) {\n\t\t\tidx = -idx - 1;\n\t\t\tthis.negativeArr[idx] = value;\n\t\t} else {\n\t\t\tthis.positiveArr[idx] = value;\n\t\t}\n\t}\n}\n"]}