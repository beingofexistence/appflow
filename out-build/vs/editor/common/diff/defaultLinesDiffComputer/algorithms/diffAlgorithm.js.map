{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm.ts"],"names":[],"mappings":"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","file":"diffAlgorithm.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { forEachAdjacent } from 'vs/base/common/arrays';\nimport { BugIndicatingError } from 'vs/base/common/errors';\nimport { OffsetRange } from 'vs/editor/common/core/offsetRange';\n\n/**\n * Represents a synchronous diff algorithm. Should be executed in a worker.\n*/\nexport interface IDiffAlgorithm {\n\tcompute(sequence1: ISequence, sequence2: ISequence, timeout?: ITimeout): DiffAlgorithmResult;\n}\n\nexport class DiffAlgorithmResult {\n\tstatic trivial(seq1: ISequence, seq2: ISequence): DiffAlgorithmResult {\n\t\treturn new DiffAlgorithmResult([new SequenceDiff(OffsetRange.ofLength(seq1.length), OffsetRange.ofLength(seq2.length))], false);\n\t}\n\n\tstatic trivialTimedOut(seq1: ISequence, seq2: ISequence): DiffAlgorithmResult {\n\t\treturn new DiffAlgorithmResult([new SequenceDiff(OffsetRange.ofLength(seq1.length), OffsetRange.ofLength(seq2.length))], true);\n\t}\n\n\tconstructor(\n\t\tpublic readonly diffs: SequenceDiff[],\n\t\t/**\n\t\t * Indicates if the time out was reached.\n\t\t * In that case, the diffs might be an approximation and the user should be asked to rerun the diff with more time.\n\t\t */\n\t\tpublic readonly hitTimeout: boolean,\n\t) { }\n}\n\nexport class SequenceDiff {\n\tpublic static invert(sequenceDiffs: SequenceDiff[], doc1Length: number): SequenceDiff[] {\n\t\tconst result: SequenceDiff[] = [];\n\t\tforEachAdjacent(sequenceDiffs, (a, b) => {\n\t\t\tresult.push(SequenceDiff.fromOffsetPairs(\n\t\t\t\ta ? a.getEndExclusives() : OffsetPair.zero,\n\t\t\t\tb ? b.getStarts() : new OffsetPair(doc1Length, (a ? a.seq2Range.endExclusive - a.seq1Range.endExclusive : 0) + doc1Length)\n\t\t\t));\n\t\t});\n\t\treturn result;\n\t}\n\n\tpublic static fromOffsetPairs(start: OffsetPair, endExclusive: OffsetPair): SequenceDiff {\n\t\treturn new SequenceDiff(\n\t\t\tnew OffsetRange(start.offset1, endExclusive.offset1),\n\t\t\tnew OffsetRange(start.offset2, endExclusive.offset2),\n\t\t);\n\t}\n\n\tconstructor(\n\t\tpublic readonly seq1Range: OffsetRange,\n\t\tpublic readonly seq2Range: OffsetRange,\n\t) { }\n\n\tpublic swap(): SequenceDiff {\n\t\treturn new SequenceDiff(this.seq2Range, this.seq1Range);\n\t}\n\n\tpublic toString(): string {\n\t\treturn `${this.seq1Range} <-> ${this.seq2Range}`;\n\t}\n\n\tpublic join(other: SequenceDiff): SequenceDiff {\n\t\treturn new SequenceDiff(this.seq1Range.join(other.seq1Range), this.seq2Range.join(other.seq2Range));\n\t}\n\n\tpublic delta(offset: number): SequenceDiff {\n\t\tif (offset === 0) {\n\t\t\treturn this;\n\t\t}\n\t\treturn new SequenceDiff(this.seq1Range.delta(offset), this.seq2Range.delta(offset));\n\t}\n\n\tpublic deltaStart(offset: number): SequenceDiff {\n\t\tif (offset === 0) {\n\t\t\treturn this;\n\t\t}\n\t\treturn new SequenceDiff(this.seq1Range.deltaStart(offset), this.seq2Range.deltaStart(offset));\n\t}\n\n\tpublic deltaEnd(offset: number): SequenceDiff {\n\t\tif (offset === 0) {\n\t\t\treturn this;\n\t\t}\n\t\treturn new SequenceDiff(this.seq1Range.deltaEnd(offset), this.seq2Range.deltaEnd(offset));\n\t}\n\n\tpublic intersectsOrTouches(other: SequenceDiff): boolean {\n\t\treturn this.seq1Range.intersectsOrTouches(other.seq1Range) || this.seq2Range.intersectsOrTouches(other.seq2Range);\n\t}\n\n\tpublic intersect(other: SequenceDiff): SequenceDiff | undefined {\n\t\tconst i1 = this.seq1Range.intersect(other.seq1Range);\n\t\tconst i2 = this.seq2Range.intersect(other.seq2Range);\n\t\tif (!i1 || !i2) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn new SequenceDiff(i1, i2);\n\t}\n\n\tpublic getStarts(): OffsetPair {\n\t\treturn new OffsetPair(this.seq1Range.start, this.seq2Range.start);\n\t}\n\n\tpublic getEndExclusives(): OffsetPair {\n\t\treturn new OffsetPair(this.seq1Range.endExclusive, this.seq2Range.endExclusive);\n\t}\n}\n\nexport class OffsetPair {\n\tpublic static readonly zero = new OffsetPair(0, 0);\n\tpublic static readonly max = new OffsetPair(Number.MAX_SAFE_INTEGER, Number.MAX_SAFE_INTEGER);\n\n\tconstructor(\n\t\tpublic readonly offset1: number,\n\t\tpublic readonly offset2: number,\n\t) {\n\t}\n\n\tpublic toString(): string {\n\t\treturn `${this.offset1} <-> ${this.offset2}`;\n\t}\n}\n\nexport interface ISequence {\n\tgetElement(offset: number): number;\n\tget length(): number;\n\n\t/**\n\t * The higher the score, the better that offset can be used to split the sequence.\n\t * Is used to optimize insertions.\n\t * Must not be negative.\n\t*/\n\tgetBoundaryScore?(length: number): number;\n\n\t/**\n\t * For line sequences, getElement returns a number representing trimmed lines.\n\t * This however checks equality for the original lines.\n\t * It prevents shifting to less matching lines.\n\t */\n\tisStronglyEqual(offset1: number, offset2: number): boolean;\n}\n\nexport interface ITimeout {\n\tisValid(): boolean;\n}\n\nexport class InfiniteTimeout implements ITimeout {\n\tpublic static instance = new InfiniteTimeout();\n\n\tisValid(): boolean {\n\t\treturn true;\n\t}\n}\n\nexport class DateTimeout implements ITimeout {\n\tprivate readonly startTime = Date.now();\n\tprivate valid = true;\n\n\tconstructor(private timeout: number) {\n\t\tif (timeout <= 0) {\n\t\t\tthrow new BugIndicatingError('timeout must be positive');\n\t\t}\n\t}\n\n\t// Recommendation: Set a log-point `{this.disable()}` in the body\n\tpublic isValid(): boolean {\n\t\tconst valid = Date.now() - this.startTime < this.timeout;\n\t\tif (!valid && this.valid) {\n\t\t\tthis.valid = false; // timeout reached\n\t\t\t// eslint-disable-next-line no-debugger\n\t\t\tdebugger; // WARNING: Most likely debugging caused the timeout. Call `this.disable()` to continue without timing out.\n\t\t}\n\t\treturn this.valid;\n\t}\n\n\tpublic disable() {\n\t\tthis.timeout = Number.MAX_SAFE_INTEGER;\n\t\tthis.isValid = () => true;\n\t\tthis.valid = true;\n\t}\n}\n"]}