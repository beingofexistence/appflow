{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/diff/defaultLinesDiffComputer/utils.ts"],"names":[],"mappings":"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","file":"utils.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport { LineRange } from 'vs/editor/common/core/lineRange';\nimport { DetailedLineRangeMapping } from 'vs/editor/common/diff/rangeMapping';\n\nexport class Array2D<T> {\n\tprivate readonly array: T[] = [];\n\n\tconstructor(public readonly width: number, public readonly height: number) {\n\t\tthis.array = new Array<T>(width * height);\n\t}\n\n\tget(x: number, y: number): T {\n\t\treturn this.array[x + y * this.width];\n\t}\n\n\tset(x: number, y: number, value: T): void {\n\t\tthis.array[x + y * this.width] = value;\n\t}\n}\n\nexport function isSpace(charCode: number): boolean {\n\treturn charCode === CharCode.Space || charCode === CharCode.Tab;\n}\n\nexport class LineRangeFragment {\n\tprivate static chrKeys = new Map<string, number>();\n\n\tprivate static getKey(chr: string): number {\n\t\tlet key = this.chrKeys.get(chr);\n\t\tif (key === undefined) {\n\t\t\tkey = this.chrKeys.size;\n\t\t\tthis.chrKeys.set(chr, key);\n\t\t}\n\t\treturn key;\n\t}\n\n\tprivate readonly totalCount: number;\n\tprivate readonly histogram: number[] = [];\n\tconstructor(\n\t\tpublic readonly range: LineRange,\n\t\tpublic readonly lines: string[],\n\t\tpublic readonly source: DetailedLineRangeMapping,\n\t) {\n\t\tlet counter = 0;\n\t\tfor (let i = range.startLineNumber - 1; i < range.endLineNumberExclusive - 1; i++) {\n\t\t\tconst line = lines[i];\n\t\t\tfor (let j = 0; j < line.length; j++) {\n\t\t\t\tcounter++;\n\t\t\t\tconst chr = line[j];\n\t\t\t\tconst key = LineRangeFragment.getKey(chr);\n\t\t\t\tthis.histogram[key] = (this.histogram[key] || 0) + 1;\n\t\t\t}\n\t\t\tcounter++;\n\t\t\tconst key = LineRangeFragment.getKey('\\n');\n\t\t\tthis.histogram[key] = (this.histogram[key] || 0) + 1;\n\t\t}\n\n\t\tthis.totalCount = counter;\n\t}\n\n\tpublic computeSimilarity(other: LineRangeFragment): number {\n\t\tlet sumDifferences = 0;\n\t\tconst maxLength = Math.max(this.histogram.length, other.histogram.length);\n\t\tfor (let i = 0; i < maxLength; i++) {\n\t\t\tsumDifferences += Math.abs((this.histogram[i] ?? 0) - (other.histogram[i] ?? 0));\n\t\t}\n\t\treturn 1 - (sumDifferences / (this.totalCount + other.totalCount));\n\t}\n}\n"]}