{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer.ts"],"names":[],"mappings":"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","file":"defaultLinesDiffComputer.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { equals, groupAdjacentBy } from 'vs/base/common/arrays';\nimport { assertFn, checkAdjacentItems } from 'vs/base/common/assert';\nimport { LineRange } from 'vs/editor/common/core/lineRange';\nimport { OffsetRange } from 'vs/editor/common/core/offsetRange';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { DateTimeout, ITimeout, InfiniteTimeout, SequenceDiff } from 'vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm';\nimport { DynamicProgrammingDiffing } from 'vs/editor/common/diff/defaultLinesDiffComputer/algorithms/dynamicProgrammingDiffing';\nimport { MyersDiffAlgorithm } from 'vs/editor/common/diff/defaultLinesDiffComputer/algorithms/myersDiffAlgorithm';\nimport { computeMovedLines } from 'vs/editor/common/diff/defaultLinesDiffComputer/computeMovedLines';\nimport { extendDiffsToEntireWordIfAppropriate, optimizeSequenceDiffs, removeVeryShortMatchingLinesBetweenDiffs, removeVeryShortMatchingTextBetweenLongDiffs, removeShortMatches } from 'vs/editor/common/diff/defaultLinesDiffComputer/heuristicSequenceOptimizations';\nimport { ILinesDiffComputer, ILinesDiffComputerOptions, LinesDiff, MovedText } from 'vs/editor/common/diff/linesDiffComputer';\nimport { DetailedLineRangeMapping, RangeMapping } from '../rangeMapping';\nimport { LinesSliceCharSequence } from 'vs/editor/common/diff/defaultLinesDiffComputer/linesSliceCharSequence';\nimport { LineSequence } from 'vs/editor/common/diff/defaultLinesDiffComputer/lineSequence';\n\nexport class DefaultLinesDiffComputer implements ILinesDiffComputer {\n\tprivate readonly dynamicProgrammingDiffing = new DynamicProgrammingDiffing();\n\tprivate readonly myersDiffingAlgorithm = new MyersDiffAlgorithm();\n\n\tcomputeDiff(originalLines: string[], modifiedLines: string[], options: ILinesDiffComputerOptions): LinesDiff {\n\t\tif (originalLines.length <= 1 && equals(originalLines, modifiedLines, (a, b) => a === b)) {\n\t\t\treturn new LinesDiff([], [], false);\n\t\t}\n\n\t\tif (originalLines.length === 1 && originalLines[0].length === 0 || modifiedLines.length === 1 && modifiedLines[0].length === 0) {\n\t\t\treturn new LinesDiff([\n\t\t\t\tnew DetailedLineRangeMapping(\n\t\t\t\t\tnew LineRange(1, originalLines.length + 1),\n\t\t\t\t\tnew LineRange(1, modifiedLines.length + 1),\n\t\t\t\t\t[\n\t\t\t\t\t\tnew RangeMapping(\n\t\t\t\t\t\t\tnew Range(1, 1, originalLines.length, originalLines[0].length + 1),\n\t\t\t\t\t\t\tnew Range(1, 1, modifiedLines.length, modifiedLines[0].length + 1)\n\t\t\t\t\t\t)\n\t\t\t\t\t]\n\t\t\t\t)\n\t\t\t], [], false);\n\t\t}\n\n\t\tconst timeout = options.maxComputationTimeMs === 0 ? InfiniteTimeout.instance : new DateTimeout(options.maxComputationTimeMs);\n\t\tconst considerWhitespaceChanges = !options.ignoreTrimWhitespace;\n\n\t\tconst perfectHashes = new Map<string, number>();\n\t\tfunction getOrCreateHash(text: string): number {\n\t\t\tlet hash = perfectHashes.get(text);\n\t\t\tif (hash === undefined) {\n\t\t\t\thash = perfectHashes.size;\n\t\t\t\tperfectHashes.set(text, hash);\n\t\t\t}\n\t\t\treturn hash;\n\t\t}\n\n\t\tconst originalLinesHashes = originalLines.map((l) => getOrCreateHash(l.trim()));\n\t\tconst modifiedLinesHashes = modifiedLines.map((l) => getOrCreateHash(l.trim()));\n\n\t\tconst sequence1 = new LineSequence(originalLinesHashes, originalLines);\n\t\tconst sequence2 = new LineSequence(modifiedLinesHashes, modifiedLines);\n\n\t\tconst lineAlignmentResult = (() => {\n\t\t\tif (sequence1.length + sequence2.length < 1700) {\n\t\t\t\t// Use the improved algorithm for small files\n\t\t\t\treturn this.dynamicProgrammingDiffing.compute(\n\t\t\t\t\tsequence1,\n\t\t\t\t\tsequence2,\n\t\t\t\t\ttimeout,\n\t\t\t\t\t(offset1, offset2) =>\n\t\t\t\t\t\toriginalLines[offset1] === modifiedLines[offset2]\n\t\t\t\t\t\t\t? modifiedLines[offset2].length === 0\n\t\t\t\t\t\t\t\t? 0.1\n\t\t\t\t\t\t\t\t: 1 + Math.log(1 + modifiedLines[offset2].length)\n\t\t\t\t\t\t\t: 0.99\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn this.myersDiffingAlgorithm.compute(\n\t\t\t\tsequence1,\n\t\t\t\tsequence2\n\t\t\t);\n\t\t})();\n\n\t\tlet lineAlignments = lineAlignmentResult.diffs;\n\t\tlet hitTimeout = lineAlignmentResult.hitTimeout;\n\t\tlineAlignments = optimizeSequenceDiffs(sequence1, sequence2, lineAlignments);\n\t\tlineAlignments = removeVeryShortMatchingLinesBetweenDiffs(sequence1, sequence2, lineAlignments);\n\n\t\tconst alignments: RangeMapping[] = [];\n\n\t\tconst scanForWhitespaceChanges = (equalLinesCount: number) => {\n\t\t\tif (!considerWhitespaceChanges) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (let i = 0; i < equalLinesCount; i++) {\n\t\t\t\tconst seq1Offset = seq1LastStart + i;\n\t\t\t\tconst seq2Offset = seq2LastStart + i;\n\t\t\t\tif (originalLines[seq1Offset] !== modifiedLines[seq2Offset]) {\n\t\t\t\t\t// This is because of whitespace changes, diff these lines\n\t\t\t\t\tconst characterDiffs = this.refineDiff(originalLines, modifiedLines, new SequenceDiff(\n\t\t\t\t\t\tnew OffsetRange(seq1Offset, seq1Offset + 1),\n\t\t\t\t\t\tnew OffsetRange(seq2Offset, seq2Offset + 1),\n\t\t\t\t\t), timeout, considerWhitespaceChanges);\n\t\t\t\t\tfor (const a of characterDiffs.mappings) {\n\t\t\t\t\t\talignments.push(a);\n\t\t\t\t\t}\n\t\t\t\t\tif (characterDiffs.hitTimeout) {\n\t\t\t\t\t\thitTimeout = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tlet seq1LastStart = 0;\n\t\tlet seq2LastStart = 0;\n\n\t\tfor (const diff of lineAlignments) {\n\t\t\tassertFn(() => diff.seq1Range.start - seq1LastStart === diff.seq2Range.start - seq2LastStart);\n\n\t\t\tconst equalLinesCount = diff.seq1Range.start - seq1LastStart;\n\n\t\t\tscanForWhitespaceChanges(equalLinesCount);\n\n\t\t\tseq1LastStart = diff.seq1Range.endExclusive;\n\t\t\tseq2LastStart = diff.seq2Range.endExclusive;\n\n\t\t\tconst characterDiffs = this.refineDiff(originalLines, modifiedLines, diff, timeout, considerWhitespaceChanges);\n\t\t\tif (characterDiffs.hitTimeout) {\n\t\t\t\thitTimeout = true;\n\t\t\t}\n\t\t\tfor (const a of characterDiffs.mappings) {\n\t\t\t\talignments.push(a);\n\t\t\t}\n\t\t}\n\n\t\tscanForWhitespaceChanges(originalLines.length - seq1LastStart);\n\n\t\tconst changes = lineRangeMappingFromRangeMappings(alignments, originalLines, modifiedLines);\n\n\t\tlet moves: MovedText[] = [];\n\t\tif (options.computeMoves) {\n\t\t\tmoves = this.computeMoves(changes, originalLines, modifiedLines, originalLinesHashes, modifiedLinesHashes, timeout, considerWhitespaceChanges);\n\t\t}\n\n\t\t// Make sure all ranges are valid\n\t\tassertFn(() => {\n\t\t\tfunction validatePosition(pos: Position, lines: string[]): boolean {\n\t\t\t\tif (pos.lineNumber < 1 || pos.lineNumber > lines.length) { return false; }\n\t\t\t\tconst line = lines[pos.lineNumber - 1];\n\t\t\t\tif (pos.column < 1 || pos.column > line.length + 1) { return false; }\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tfunction validateRange(range: LineRange, lines: string[]): boolean {\n\t\t\t\tif (range.startLineNumber < 1 || range.startLineNumber > lines.length + 1) { return false; }\n\t\t\t\tif (range.endLineNumberExclusive < 1 || range.endLineNumberExclusive > lines.length + 1) { return false; }\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tfor (const c of changes) {\n\t\t\t\tif (!c.innerChanges) { return false; }\n\t\t\t\tfor (const ic of c.innerChanges) {\n\t\t\t\t\tconst valid = validatePosition(ic.modifiedRange.getStartPosition(), modifiedLines) && validatePosition(ic.modifiedRange.getEndPosition(), modifiedLines) &&\n\t\t\t\t\t\tvalidatePosition(ic.originalRange.getStartPosition(), originalLines) && validatePosition(ic.originalRange.getEndPosition(), originalLines);\n\t\t\t\t\tif (!valid) { return false; }\n\t\t\t\t}\n\t\t\t\tif (!validateRange(c.modified, modifiedLines) || !validateRange(c.original, originalLines)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\n\t\treturn new LinesDiff(changes, moves, hitTimeout);\n\t}\n\n\tprivate computeMoves(\n\t\tchanges: DetailedLineRangeMapping[],\n\t\toriginalLines: string[],\n\t\tmodifiedLines: string[],\n\t\thashedOriginalLines: number[],\n\t\thashedModifiedLines: number[],\n\t\ttimeout: ITimeout,\n\t\tconsiderWhitespaceChanges: boolean,\n\t): MovedText[] {\n\t\tconst moves = computeMovedLines(\n\t\t\tchanges,\n\t\t\toriginalLines,\n\t\t\tmodifiedLines,\n\t\t\thashedOriginalLines,\n\t\t\thashedModifiedLines,\n\t\t\ttimeout,\n\t\t);\n\t\tconst movesWithDiffs = moves.map(m => {\n\t\t\tconst moveChanges = this.refineDiff(originalLines, modifiedLines, new SequenceDiff(\n\t\t\t\tm.original.toOffsetRange(),\n\t\t\t\tm.modified.toOffsetRange(),\n\t\t\t), timeout, considerWhitespaceChanges);\n\t\t\tconst mappings = lineRangeMappingFromRangeMappings(moveChanges.mappings, originalLines, modifiedLines, true);\n\t\t\treturn new MovedText(m, mappings);\n\t\t});\n\t\treturn movesWithDiffs;\n\t}\n\n\tprivate refineDiff(originalLines: string[], modifiedLines: string[], diff: SequenceDiff, timeout: ITimeout, considerWhitespaceChanges: boolean): { mappings: RangeMapping[]; hitTimeout: boolean } {\n\t\tconst slice1 = new LinesSliceCharSequence(originalLines, diff.seq1Range, considerWhitespaceChanges);\n\t\tconst slice2 = new LinesSliceCharSequence(modifiedLines, diff.seq2Range, considerWhitespaceChanges);\n\n\t\tconst diffResult = slice1.length + slice2.length < 500\n\t\t\t? this.dynamicProgrammingDiffing.compute(slice1, slice2, timeout)\n\t\t\t: this.myersDiffingAlgorithm.compute(slice1, slice2, timeout);\n\n\t\tlet diffs = diffResult.diffs;\n\t\tdiffs = optimizeSequenceDiffs(slice1, slice2, diffs);\n\t\tdiffs = extendDiffsToEntireWordIfAppropriate(slice1, slice2, diffs);\n\t\tdiffs = removeShortMatches(slice1, slice2, diffs);\n\t\tdiffs = removeVeryShortMatchingTextBetweenLongDiffs(slice1, slice2, diffs);\n\n\t\tconst result = diffs.map(\n\t\t\t(d) =>\n\t\t\t\tnew RangeMapping(\n\t\t\t\t\tslice1.translateRange(d.seq1Range),\n\t\t\t\t\tslice2.translateRange(d.seq2Range)\n\t\t\t\t)\n\t\t);\n\n\t\t// Assert: result applied on original should be the same as diff applied to original\n\n\t\treturn {\n\t\t\tmappings: result,\n\t\t\thitTimeout: diffResult.hitTimeout,\n\t\t};\n\t}\n}\n\nexport function lineRangeMappingFromRangeMappings(alignments: RangeMapping[], originalLines: string[], modifiedLines: string[], dontAssertStartLine: boolean = false): DetailedLineRangeMapping[] {\n\tconst changes: DetailedLineRangeMapping[] = [];\n\tfor (const g of groupAdjacentBy(\n\t\talignments.map(a => getLineRangeMapping(a, originalLines, modifiedLines)),\n\t\t(a1, a2) =>\n\t\t\ta1.original.overlapOrTouch(a2.original)\n\t\t\t|| a1.modified.overlapOrTouch(a2.modified)\n\t)) {\n\t\tconst first = g[0];\n\t\tconst last = g[g.length - 1];\n\n\t\tchanges.push(new DetailedLineRangeMapping(\n\t\t\tfirst.original.join(last.original),\n\t\t\tfirst.modified.join(last.modified),\n\t\t\tg.map(a => a.innerChanges![0]),\n\t\t));\n\t}\n\n\tassertFn(() => {\n\t\tif (!dontAssertStartLine) {\n\t\t\tif (changes.length > 0 && changes[0].original.startLineNumber !== changes[0].modified.startLineNumber) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn checkAdjacentItems(changes,\n\t\t\t(m1, m2) => m2.original.startLineNumber - m1.original.endLineNumberExclusive === m2.modified.startLineNumber - m1.modified.endLineNumberExclusive &&\n\t\t\t\t// There has to be an unchanged line in between (otherwise both diffs should have been joined)\n\t\t\t\tm1.original.endLineNumberExclusive < m2.original.startLineNumber &&\n\t\t\t\tm1.modified.endLineNumberExclusive < m2.modified.startLineNumber,\n\t\t);\n\t});\n\n\treturn changes;\n}\n\nexport function getLineRangeMapping(rangeMapping: RangeMapping, originalLines: string[], modifiedLines: string[]): DetailedLineRangeMapping {\n\tlet lineStartDelta = 0;\n\tlet lineEndDelta = 0;\n\n\t// rangeMapping describes the edit that replaces `rangeMapping.originalRange` with `newText := getText(modifiedLines, rangeMapping.modifiedRange)`.\n\n\t// original: ]xxx \\n <- this line is not modified\n\t// modified: ]xx  \\n\n\tif (rangeMapping.modifiedRange.endColumn === 1 && rangeMapping.originalRange.endColumn === 1\n\t\t&& rangeMapping.originalRange.startLineNumber + lineStartDelta <= rangeMapping.originalRange.endLineNumber\n\t\t&& rangeMapping.modifiedRange.startLineNumber + lineStartDelta <= rangeMapping.modifiedRange.endLineNumber) {\n\t\t// We can only do this if the range is not empty yet\n\t\tlineEndDelta = -1;\n\t}\n\n\t// original: xxx[ \\n <- this line is not modified\n\t// modified: xxx[ \\n\n\tif (rangeMapping.modifiedRange.startColumn - 1 >= modifiedLines[rangeMapping.modifiedRange.startLineNumber - 1].length\n\t\t&& rangeMapping.originalRange.startColumn - 1 >= originalLines[rangeMapping.originalRange.startLineNumber - 1].length\n\t\t&& rangeMapping.originalRange.startLineNumber <= rangeMapping.originalRange.endLineNumber + lineEndDelta\n\t\t&& rangeMapping.modifiedRange.startLineNumber <= rangeMapping.modifiedRange.endLineNumber + lineEndDelta) {\n\t\t// We can only do this if the range is not empty yet\n\t\tlineStartDelta = 1;\n\t}\n\n\tconst originalLineRange = new LineRange(\n\t\trangeMapping.originalRange.startLineNumber + lineStartDelta,\n\t\trangeMapping.originalRange.endLineNumber + 1 + lineEndDelta\n\t);\n\tconst modifiedLineRange = new LineRange(\n\t\trangeMapping.modifiedRange.startLineNumber + lineStartDelta,\n\t\trangeMapping.modifiedRange.endLineNumber + 1 + lineEndDelta\n\t);\n\n\treturn new DetailedLineRangeMapping(originalLineRange, modifiedLineRange, [rangeMapping]);\n}\n"]}