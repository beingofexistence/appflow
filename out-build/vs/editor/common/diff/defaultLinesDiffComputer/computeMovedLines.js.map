{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/diff/defaultLinesDiffComputer/computeMovedLines.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAahG,SAAgB,GAAG,CAClB,OAAmC,EACnC,aAAuB,EACvB,aAAuB,EACvB,mBAA6B,EAC7B,mBAA6B,EAC7B,OAAiB;QAEjB,IAAI,EAAE,KAAK,EAAE,eAAe,EAAE,GAAG,iDAAiD,CAAC,OAAO,EAAE,aAAa,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;QAEnI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE;YAAE,OAAO,EAAE,CAAC;SAAE;QAEtC,MAAM,eAAe,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACrE,MAAM,cAAc,GAAG,qBAAqB,CAAC,eAAe,EAAE,mBAAmB,EAAE,mBAAmB,EAAE,aAAa,EAAE,aAAa,EAAE,OAAO,CAAC,CAAC;QAC/I,IAAA,YAAG,EAAM,KAAK,EAAE,cAAc,CAAC,CAAC;QAEhC,KAAK,GAAG,yBAAyB,CAAC,KAAK,CAAC,CAAC;QACzC,yBAAyB;QACzB,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;YAC9B,MAAM,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACzG,OAAO,YAAY,CAAC,MAAM,IAAI,EAAE,CAAC;QAClC,CAAC,CAAC,CAAC;QACH,KAAK,GAAG,qBAAqB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAE9C,OAAO,KAAK,CAAC;IACd,CAAC;IAzBD,kBAyBC;IAED,SAAS,iDAAiD,CACzD,OAAmC,EACnC,aAAuB,EACvB,aAAuB,EACvB,OAAiB;QAEjB,MAAM,KAAK,GAAuB,EAAE,CAAC;QAErC,MAAM,SAAS,GAAG,OAAO;aACvB,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,IAAI,CAAC,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,CAAC;aACzD,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,WAAG,CAAe,CAAC,CAAC,QAAQ,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC,CAAC;QAChE,MAAM,UAAU,GAAG,IAAI,GAAG,CAAC,OAAO;aAChC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,IAAI,CAAC,CAAC,QAAQ,CAAC,MAAM,IAAI,CAAC,CAAC;aACzD,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,WAAG,CAAe,CAAC,CAAC,QAAQ,EAAE,aAAa,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;QAEjE,MAAM,eAAe,GAAG,IAAI,GAAG,EAA4B,CAAC;QAE5D,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;YACjC,IAAI,iBAAiB,GAAG,CAAC,CAAC,CAAC;YAC3B,IAAI,IAAmC,CAAC;YACxC,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;gBACnC,MAAM,UAAU,GAAG,QAAQ,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;gBACzD,IAAI,UAAU,GAAG,iBAAiB,EAAE;oBACnC,iBAAiB,GAAG,UAAU,CAAC;oBAC/B,IAAI,GAAG,SAAS,CAAC;iBACjB;aACD;YAED,IAAI,iBAAiB,GAAG,IAAI,IAAI,IAAI,EAAE;gBACrC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACxB,KAAK,CAAC,IAAI,CAAC,IAAI,kBAAG,CAAc,QAAQ,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC7D,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;gBACrC,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACjC;YAED,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE;gBACvB,OAAO,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC;aAClC;SACD;QAED,OAAO,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC;IACnC,CAAC;IAED,SAAS,qBAAqB,CAC7B,OAAmC,EACnC,mBAA6B,EAC7B,mBAA6B,EAC7B,aAAuB,EACvB,aAAuB,EACvB,OAAiB;QAEjB,MAAM,KAAK,GAAuB,EAAE,CAAC;QAErC,MAAM,mBAAmB,GAAG,IAAI,gBAAE,EAAoC,CAAC;QAEvE,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;YAC7B,KAAK,IAAI,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,eAAe,EAAE,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,sBAAsB,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAClG,MAAM,GAAG,GAAG,GAAG,mBAAmB,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,mBAAmB,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,mBAAmB,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;gBAChH,mBAAmB,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,eAAG,CAAO,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC;aACjE;SACD;QAOD,MAAM,gBAAgB,GAAsB,EAAE,CAAC;QAE/C,OAAO,CAAC,IAAI,CAAC,IAAA,YAAG,EAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAe,EAAE,YAAG,CAAc,CAAC,CAAC;QAE3E,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;YAC7B,IAAI,YAAY,GAAsB,EAAE,CAAC;YACzC,KAAK,IAAI,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,eAAe,EAAE,CAAC,GAAG,MAAM,CAAC,QAAQ,CAAC,sBAAsB,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAClG,MAAM,GAAG,GAAG,GAAG,mBAAmB,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,mBAAmB,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,IAAI,mBAAmB,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;gBAChH,MAAM,oBAAoB,GAAG,IAAI,eAAG,CAAO,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC;gBAErD,MAAM,YAAY,GAAsB,EAAE,CAAC;gBAC3C,mBAAmB,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE;oBAC9C,KAAK,MAAM,WAAW,IAAI,YAAY,EAAE;wBACvC,0CAA0C;wBAC1C,IAAI,WAAW,CAAC,iBAAiB,CAAC,sBAAsB,GAAG,CAAC,KAAK,KAAK,CAAC,sBAAsB;4BAC5F,WAAW,CAAC,iBAAiB,CAAC,sBAAsB,GAAG,CAAC,KAAK,oBAAoB,CAAC,sBAAsB,EAAE;4BAC1G,WAAW,CAAC,iBAAiB,GAAG,IAAI,eAAG,CAAO,WAAW,CAAC,iBAAiB,CAAC,eAAe,EAAE,KAAK,CAAC,sBAAsB,CAAC,CAAC;4BAC3H,WAAW,CAAC,iBAAiB,GAAG,IAAI,eAAG,CAAO,WAAW,CAAC,iBAAiB,CAAC,eAAe,EAAE,oBAAoB,CAAC,sBAAsB,CAAC,CAAC;4BAC1I,YAAY,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;4BAC/B,OAAO;yBACP;qBACD;oBAED,MAAM,OAAO,GAAoB;wBAChC,iBAAiB,EAAE,oBAAoB;wBACvC,iBAAiB,EAAE,KAAK;qBACxB,CAAC;oBACF,gBAAgB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;oBAC/B,YAAY,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC5B,CAAC,CAAC,CAAC;gBACH,YAAY,GAAG,YAAY,CAAC;aAC5B;YAED,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE;gBACvB,OAAO,EAAE,CAAC;aACV;SACD;QAED,gBAAgB,CAAC,IAAI,CAAC,IAAA,YAAG,EAAU,IAAA,YAAG,EAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,iBAAiB,CAAC,MAAM,EAAE,YAAG,CAAc,CAAC,CAAC,CAAC;QAElG,MAAM,WAAW,GAAG,IAAI,eAAG,EAAW,CAAC;QACvC,MAAM,WAAW,GAAG,IAAI,eAAG,EAAW,CAAC;QAEvC,KAAK,MAAM,OAAO,IAAI,gBAAgB,EAAE;YAEvC,MAAM,aAAa,GAAG,OAAO,CAAC,iBAAiB,CAAC,eAAe,GAAG,OAAO,CAAC,iBAAiB,CAAC,eAAe,CAAC;YAC5G,MAAM,gBAAgB,GAAG,WAAW,CAAC,YAAY,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;YAC7E,MAAM,0BAA0B,GAAG,WAAW,CAAC,YAAY,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC;YAEnH,MAAM,2BAA2B,GAAG,gBAAgB,CAAC,eAAe,CAAC,0BAA0B,CAAC,CAAC;YAEjG,KAAK,MAAM,CAAC,IAAI,2BAA2B,CAAC,MAAM,EAAE;gBACnD,IAAI,CAAC,CAAC,MAAM,GAAG,CAAC,EAAE;oBACjB,SAAS;iBACT;gBACD,MAAM,iBAAiB,GAAG,CAAC,CAAC;gBAC5B,MAAM,iBAAiB,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,aAAa,CAAC,CAAC;gBAElD,KAAK,CAAC,IAAI,CAAC,IAAI,kBAAG,CAAc,iBAAiB,EAAE,iBAAiB,CAAC,CAAC,CAAC;gBAEvE,WAAW,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;gBACxC,WAAW,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAC;aACxC;SACD;QAED,KAAK,CAAC,IAAI,CAAC,IAAA,YAAG,EAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAe,EAAE,YAAG,CAAc,CAAC,CAAC;QAEzE,MAAM,iBAAiB,GAAG,IAAI,gBAAG,CAAa,OAAO,CAAC,CAAC;QACvD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACtC,MAAM,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACtB,MAAM,uBAAuB,GAAG,iBAAiB,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAe,IAAI,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAE,CAAC;YACxI,MAAM,sBAAsB,GAAG,IAAA,gBAAG,EAAgB,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAe,IAAI,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAE,CAAC;YAC9H,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAC1B,IAAI,CAAC,QAAQ,CAAC,eAAe,GAAG,uBAAuB,CAAC,QAAQ,CAAC,eAAe,EAChF,IAAI,CAAC,QAAQ,CAAC,eAAe,GAAG,sBAAsB,CAAC,QAAQ,CAAC,eAAe,CAC/E,CAAC;YAEF,MAAM,sBAAsB,GAAG,iBAAiB,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAE,CAAC;YAC7I,MAAM,qBAAqB,GAAG,IAAA,gBAAG,EAAgB,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAE,CAAC;YACnI,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAC1B,sBAAsB,CAAC,QAAQ,CAAC,sBAAsB,GAAG,IAAI,CAAC,QAAQ,CAAC,sBAAsB,EAC7F,qBAAqB,CAAC,QAAQ,CAAC,sBAAsB,GAAG,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAC5F,CAAC;YAEF,IAAI,WAAmB,CAAC;YACxB,KAAK,WAAW,GAAG,CAAC,EAAE,WAAW,GAAG,UAAU,EAAE,WAAW,EAAE,EAAE;gBAC9D,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,GAAG,WAAW,GAAG,CAAC,CAAC;gBACjE,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,eAAe,GAAG,WAAW,GAAG,CAAC,CAAC;gBAChE,IAAI,QAAQ,GAAG,aAAa,CAAC,MAAM,IAAI,OAAO,GAAG,aAAa,CAAC,MAAM,EAAE;oBACtE,MAAM;iBACN;gBACD,IAAI,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;oBACpE,MAAM;iBACN;gBACD,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,QAAQ,GAAG,CAAC,CAAC,EAAE,aAAa,CAAC,OAAO,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,EAAE;oBACvF,MAAM;iBACN;aACD;YAED,IAAI,WAAW,GAAG,CAAC,EAAE;gBACpB,WAAW,CAAC,QAAQ,CAAC,IAAI,eAAG,CAAO,IAAI,CAAC,QAAQ,CAAC,eAAe,GAAG,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC;gBAChH,WAAW,CAAC,QAAQ,CAAC,IAAI,eAAG,CAAO,IAAI,CAAC,QAAQ,CAAC,eAAe,GAAG,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC;aAChH;YAED,IAAI,cAAsB,CAAC;YAC3B,KAAK,cAAc,GAAG,CAAC,EAAE,cAAc,GAAG,UAAU,EAAE,cAAc,EAAE,EAAE;gBACvE,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,sBAAsB,GAAG,cAAc,CAAC;gBACvE,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,sBAAsB,GAAG,cAAc,CAAC;gBACtE,IAAI,QAAQ,GAAG,aAAa,CAAC,MAAM,IAAI,OAAO,GAAG,aAAa,CAAC,MAAM,EAAE;oBACtE,MAAM;iBACN;gBACD,IAAI,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;oBACpE,MAAM;iBACN;gBACD,IAAI,CAAC,eAAe,CAAC,aAAa,CAAC,QAAQ,GAAG,CAAC,CAAC,EAAE,aAAa,CAAC,OAAO,GAAG,CAAC,CAAC,EAAE,OAAO,CAAC,EAAE;oBACvF,MAAM;iBACN;aACD;YAED,IAAI,cAAc,GAAG,CAAC,EAAE;gBACvB,WAAW,CAAC,QAAQ,CAAC,IAAI,eAAG,CAAO,IAAI,CAAC,QAAQ,CAAC,sBAAsB,EAAE,IAAI,CAAC,QAAQ,CAAC,sBAAsB,GAAG,cAAc,CAAC,CAAC,CAAC;gBACjI,WAAW,CAAC,QAAQ,CAAC,IAAI,eAAG,CAAO,IAAI,CAAC,QAAQ,CAAC,sBAAsB,EAAE,IAAI,CAAC,QAAQ,CAAC,sBAAsB,GAAG,cAAc,CAAC,CAAC,CAAC;aACjI;YAED,IAAI,WAAW,GAAG,CAAC,IAAI,cAAc,GAAG,CAAC,EAAE;gBAC1C,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,kBAAG,CACjB,IAAI,eAAG,CAAO,IAAI,CAAC,QAAQ,CAAC,eAAe,GAAG,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,sBAAsB,GAAG,cAAc,CAAC,EACjH,IAAI,eAAG,CAAO,IAAI,CAAC,QAAQ,CAAC,eAAe,GAAG,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,sBAAsB,GAAG,cAAc,CAAC,CACjH,CAAC;aACF;SACD;QAED,OAAO,KAAK,CAAC;IACd,CAAC;IAED,SAAS,eAAe,CAAC,KAAa,EAAE,KAAa,EAAE,OAAiB;QACvE,IAAI,KAAK,CAAC,IAAI,EAAE,KAAK,KAAK,CAAC,IAAI,EAAE,EAAE;YAAE,OAAO,IAAI,CAAC;SAAE;QACnD,IAAI,KAAK,CAAC,MAAM,GAAG,GAAG,IAAI,KAAK,CAAC,MAAM,GAAG,GAAG,EAAE;YAAE,OAAO,KAAK,CAAC;SAAE;QAE/D,MAAM,qBAAqB,GAAG,IAAI,wBAAG,EAAiB,CAAC;QACvD,MAAM,MAAM,GAAG,qBAAqB,CAAC,OAAO,CAC3C,IAAI,4BAAG,CAAoB,CAAC,KAAK,CAAC,EAAE,IAAI,iBAAG,CAAS,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,EACjE,IAAI,4BAAG,CAAoB,CAAC,KAAK,CAAC,EAAE,IAAI,iBAAG,CAAS,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,CAAC,EACjE,OAAO,CACP,CAAC;QACF,IAAI,uBAAuB,GAAG,CAAC,CAAC;QAChC,MAAM,QAAQ,GAAG,mBAAG,CAAU,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,CAAC;QACjE,KAAK,MAAM,GAAG,IAAI,QAAQ,EAAE;YAC3B,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE;gBAC3B,IAAI,CAAC,IAAA,WAAG,EAAK,KAAK,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,EAAE;oBACpC,uBAAuB,EAAE,CAAC;iBAC1B;YACF,CAAC,CAAC,CAAC;SACH;QAED,SAAS,eAAe,CAAC,GAAW;YACnC,IAAI,KAAK,GAAG,CAAC,CAAC;YACd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACtC,IAAI,CAAC,IAAA,WAAG,EAAK,GAAG,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,EAAE;oBAChC,KAAK,EAAE,CAAC;iBACR;aACD;YACD,OAAO,KAAK,CAAC;QACd,CAAC;QAED,MAAM,gBAAgB,GAAG,eAAe,CAAC,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QACtF,MAAM,CAAC,GAAG,uBAAuB,GAAG,gBAAgB,GAAG,GAAG,IAAI,gBAAgB,GAAG,EAAE,CAAC;QACpF,OAAO,CAAC,CAAC;IACV,CAAC;IAED,SAAS,yBAAyB,CAAC,KAAyB;QAC3D,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;YACvB,OAAO,KAAK,CAAC;SACb;QAED,KAAK,CAAC,IAAI,CAAC,IAAA,YAAG,EAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAe,EAAE,YAAG,CAAc,CAAC,CAAC;QAEzE,MAAM,MAAM,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACtC,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YACvC,MAAM,OAAO,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YAEzB,MAAM,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAC;YAC7F,MAAM,YAAY,GAAG,OAAO,CAAC,QAAQ,CAAC,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,sBAAsB,CAAC;YAC7F,MAAM,oBAAoB,GAAG,YAAY,IAAI,CAAC,IAAI,YAAY,IAAI,CAAC,CAAC;YAEpE,IAAI,oBAAoB,IAAI,YAAY,GAAG,YAAY,IAAI,CAAC,EAAE;gBAC7D,MAAM,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;gBAC/C,SAAS;aACT;YAED,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACrB;QACD,OAAO,MAAM,CAAC;IACf,CAAC;IAED,SAAS,qBAAqB,CAAC,OAAmC,EAAE,KAAyB;QAC5F,MAAM,iBAAiB,GAAG,IAAI,gBAAG,CAAa,OAAO,CAAC,CAAC;QACvD,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE;YACxB,MAAM,sBAAsB,GAAG,iBAAiB,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,sBAAsB,IAAI,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC;mBACrI,IAAI,kBAAG,CAAc,IAAI,eAAG,CAAO,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,eAAG,CAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;YAEnE,MAAM,sBAAsB,GAAG,CAAC,CAAC,QAAQ,CAAC,eAAe,GAAG,sBAAsB,CAAC,QAAQ,CAAC,sBAAsB,CAAC;YACnH,MAAM,sBAAsB,GAAG,CAAC,CAAC,QAAQ,CAAC,eAAe,GAAG,sBAAsB,CAAC,QAAQ,CAAC,sBAAsB,CAAC;YAEnH,MAAM,kBAAkB,GAAG,sBAAsB,KAAK,sBAAsB,CAAC;YAC7E,OAAO,kBAAkB,CAAC;QAC3B,CAAC,CAAC,CAAC;QACH,OAAO,KAAK,CAAC;IACd,CAAC","file":"computeMovedLines.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITimeout, SequenceDiff } from 'vs/editor/common/diff/defaultLinesDiffComputer/algorithms/diffAlgorithm';\nimport { DetailedLineRangeMapping, LineRangeMapping } from '../rangeMapping';\nimport { pushMany, compareBy, numberComparator, reverseOrder } from 'vs/base/common/arrays';\nimport { MonotonousArray, findLastMonotonous } from 'vs/base/common/arraysFind';\nimport { SetMap } from 'vs/base/common/collections';\nimport { LineRange, LineRangeSet } from 'vs/editor/common/core/lineRange';\nimport { OffsetRange } from 'vs/editor/common/core/offsetRange';\nimport { LinesSliceCharSequence } from 'vs/editor/common/diff/defaultLinesDiffComputer/linesSliceCharSequence';\nimport { LineRangeFragment, isSpace } from 'vs/editor/common/diff/defaultLinesDiffComputer/utils';\nimport { MyersDiffAlgorithm } from 'vs/editor/common/diff/defaultLinesDiffComputer/algorithms/myersDiffAlgorithm';\n\nexport function computeMovedLines(\n\tchanges: DetailedLineRangeMapping[],\n\toriginalLines: string[],\n\tmodifiedLines: string[],\n\thashedOriginalLines: number[],\n\thashedModifiedLines: number[],\n\ttimeout: ITimeout\n): LineRangeMapping[] {\n\tlet { moves, excludedChanges } = computeMovesFromSimpleDeletionsToSimpleInsertions(changes, originalLines, modifiedLines, timeout);\n\n\tif (!timeout.isValid()) { return []; }\n\n\tconst filteredChanges = changes.filter(c => !excludedChanges.has(c));\n\tconst unchangedMoves = computeUnchangedMoves(filteredChanges, hashedOriginalLines, hashedModifiedLines, originalLines, modifiedLines, timeout);\n\tpushMany(moves, unchangedMoves);\n\n\tmoves = joinCloseConsecutiveMoves(moves);\n\t// Ignore too short moves\n\tmoves = moves.filter(current => {\n\t\tconst originalText = current.original.toOffsetRange().slice(originalLines).map(l => l.trim()).join('\\n');\n\t\treturn originalText.length >= 10;\n\t});\n\tmoves = removeMovesInSameDiff(changes, moves);\n\n\treturn moves;\n}\n\nfunction computeMovesFromSimpleDeletionsToSimpleInsertions(\n\tchanges: DetailedLineRangeMapping[],\n\toriginalLines: string[],\n\tmodifiedLines: string[],\n\ttimeout: ITimeout,\n) {\n\tconst moves: LineRangeMapping[] = [];\n\n\tconst deletions = changes\n\t\t.filter(c => c.modified.isEmpty && c.original.length >= 3)\n\t\t.map(d => new LineRangeFragment(d.original, originalLines, d));\n\tconst insertions = new Set(changes\n\t\t.filter(c => c.original.isEmpty && c.modified.length >= 3)\n\t\t.map(d => new LineRangeFragment(d.modified, modifiedLines, d)));\n\n\tconst excludedChanges = new Set<DetailedLineRangeMapping>();\n\n\tfor (const deletion of deletions) {\n\t\tlet highestSimilarity = -1;\n\t\tlet best: LineRangeFragment | undefined;\n\t\tfor (const insertion of insertions) {\n\t\t\tconst similarity = deletion.computeSimilarity(insertion);\n\t\t\tif (similarity > highestSimilarity) {\n\t\t\t\thighestSimilarity = similarity;\n\t\t\t\tbest = insertion;\n\t\t\t}\n\t\t}\n\n\t\tif (highestSimilarity > 0.90 && best) {\n\t\t\tinsertions.delete(best);\n\t\t\tmoves.push(new LineRangeMapping(deletion.range, best.range));\n\t\t\texcludedChanges.add(deletion.source);\n\t\t\texcludedChanges.add(best.source);\n\t\t}\n\n\t\tif (!timeout.isValid()) {\n\t\t\treturn { moves, excludedChanges };\n\t\t}\n\t}\n\n\treturn { moves, excludedChanges };\n}\n\nfunction computeUnchangedMoves(\n\tchanges: DetailedLineRangeMapping[],\n\thashedOriginalLines: number[],\n\thashedModifiedLines: number[],\n\toriginalLines: string[],\n\tmodifiedLines: string[],\n\ttimeout: ITimeout,\n) {\n\tconst moves: LineRangeMapping[] = [];\n\n\tconst original3LineHashes = new SetMap<string, { range: LineRange }>();\n\n\tfor (const change of changes) {\n\t\tfor (let i = change.original.startLineNumber; i < change.original.endLineNumberExclusive - 2; i++) {\n\t\t\tconst key = `${hashedOriginalLines[i - 1]}:${hashedOriginalLines[i + 1 - 1]}:${hashedOriginalLines[i + 2 - 1]}`;\n\t\t\toriginal3LineHashes.add(key, { range: new LineRange(i, i + 3) });\n\t\t}\n\t}\n\n\tinterface PossibleMapping {\n\t\tmodifiedLineRange: LineRange;\n\t\toriginalLineRange: LineRange;\n\t}\n\n\tconst possibleMappings: PossibleMapping[] = [];\n\n\tchanges.sort(compareBy(c => c.modified.startLineNumber, numberComparator));\n\n\tfor (const change of changes) {\n\t\tlet lastMappings: PossibleMapping[] = [];\n\t\tfor (let i = change.modified.startLineNumber; i < change.modified.endLineNumberExclusive - 2; i++) {\n\t\t\tconst key = `${hashedModifiedLines[i - 1]}:${hashedModifiedLines[i + 1 - 1]}:${hashedModifiedLines[i + 2 - 1]}`;\n\t\t\tconst currentModifiedRange = new LineRange(i, i + 3);\n\n\t\t\tconst nextMappings: PossibleMapping[] = [];\n\t\t\toriginal3LineHashes.forEach(key, ({ range }) => {\n\t\t\t\tfor (const lastMapping of lastMappings) {\n\t\t\t\t\t// does this match extend some last match?\n\t\t\t\t\tif (lastMapping.originalLineRange.endLineNumberExclusive + 1 === range.endLineNumberExclusive &&\n\t\t\t\t\t\tlastMapping.modifiedLineRange.endLineNumberExclusive + 1 === currentModifiedRange.endLineNumberExclusive) {\n\t\t\t\t\t\tlastMapping.originalLineRange = new LineRange(lastMapping.originalLineRange.startLineNumber, range.endLineNumberExclusive);\n\t\t\t\t\t\tlastMapping.modifiedLineRange = new LineRange(lastMapping.modifiedLineRange.startLineNumber, currentModifiedRange.endLineNumberExclusive);\n\t\t\t\t\t\tnextMappings.push(lastMapping);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst mapping: PossibleMapping = {\n\t\t\t\t\tmodifiedLineRange: currentModifiedRange,\n\t\t\t\t\toriginalLineRange: range,\n\t\t\t\t};\n\t\t\t\tpossibleMappings.push(mapping);\n\t\t\t\tnextMappings.push(mapping);\n\t\t\t});\n\t\t\tlastMappings = nextMappings;\n\t\t}\n\n\t\tif (!timeout.isValid()) {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tpossibleMappings.sort(reverseOrder(compareBy(m => m.modifiedLineRange.length, numberComparator)));\n\n\tconst modifiedSet = new LineRangeSet();\n\tconst originalSet = new LineRangeSet();\n\n\tfor (const mapping of possibleMappings) {\n\n\t\tconst diffOrigToMod = mapping.modifiedLineRange.startLineNumber - mapping.originalLineRange.startLineNumber;\n\t\tconst modifiedSections = modifiedSet.subtractFrom(mapping.modifiedLineRange);\n\t\tconst originalTranslatedSections = originalSet.subtractFrom(mapping.originalLineRange).getWithDelta(diffOrigToMod);\n\n\t\tconst modifiedIntersectedSections = modifiedSections.getIntersection(originalTranslatedSections);\n\n\t\tfor (const s of modifiedIntersectedSections.ranges) {\n\t\t\tif (s.length < 3) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst modifiedLineRange = s;\n\t\t\tconst originalLineRange = s.delta(-diffOrigToMod);\n\n\t\t\tmoves.push(new LineRangeMapping(originalLineRange, modifiedLineRange));\n\n\t\t\tmodifiedSet.addRange(modifiedLineRange);\n\t\t\toriginalSet.addRange(originalLineRange);\n\t\t}\n\t}\n\n\tmoves.sort(compareBy(m => m.original.startLineNumber, numberComparator));\n\n\tconst monotonousChanges = new MonotonousArray(changes);\n\tfor (let i = 0; i < moves.length; i++) {\n\t\tconst move = moves[i];\n\t\tconst firstTouchingChangeOrig = monotonousChanges.findLastMonotonous(c => c.original.startLineNumber <= move.original.startLineNumber)!;\n\t\tconst firstTouchingChangeMod = findLastMonotonous(changes, c => c.modified.startLineNumber <= move.modified.startLineNumber)!;\n\t\tconst linesAbove = Math.max(\n\t\t\tmove.original.startLineNumber - firstTouchingChangeOrig.original.startLineNumber,\n\t\t\tmove.modified.startLineNumber - firstTouchingChangeMod.modified.startLineNumber\n\t\t);\n\n\t\tconst lastTouchingChangeOrig = monotonousChanges.findLastMonotonous(c => c.original.startLineNumber < move.original.endLineNumberExclusive)!;\n\t\tconst lastTouchingChangeMod = findLastMonotonous(changes, c => c.modified.startLineNumber < move.modified.endLineNumberExclusive)!;\n\t\tconst linesBelow = Math.max(\n\t\t\tlastTouchingChangeOrig.original.endLineNumberExclusive - move.original.endLineNumberExclusive,\n\t\t\tlastTouchingChangeMod.modified.endLineNumberExclusive - move.modified.endLineNumberExclusive\n\t\t);\n\n\t\tlet extendToTop: number;\n\t\tfor (extendToTop = 0; extendToTop < linesAbove; extendToTop++) {\n\t\t\tconst origLine = move.original.startLineNumber - extendToTop - 1;\n\t\t\tconst modLine = move.modified.startLineNumber - extendToTop - 1;\n\t\t\tif (origLine > originalLines.length || modLine > modifiedLines.length) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (modifiedSet.contains(modLine) || originalSet.contains(origLine)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!areLinesSimilar(originalLines[origLine - 1], modifiedLines[modLine - 1], timeout)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (extendToTop > 0) {\n\t\t\toriginalSet.addRange(new LineRange(move.original.startLineNumber - extendToTop, move.original.startLineNumber));\n\t\t\tmodifiedSet.addRange(new LineRange(move.modified.startLineNumber - extendToTop, move.modified.startLineNumber));\n\t\t}\n\n\t\tlet extendToBottom: number;\n\t\tfor (extendToBottom = 0; extendToBottom < linesBelow; extendToBottom++) {\n\t\t\tconst origLine = move.original.endLineNumberExclusive + extendToBottom;\n\t\t\tconst modLine = move.modified.endLineNumberExclusive + extendToBottom;\n\t\t\tif (origLine > originalLines.length || modLine > modifiedLines.length) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (modifiedSet.contains(modLine) || originalSet.contains(origLine)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!areLinesSimilar(originalLines[origLine - 1], modifiedLines[modLine - 1], timeout)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (extendToBottom > 0) {\n\t\t\toriginalSet.addRange(new LineRange(move.original.endLineNumberExclusive, move.original.endLineNumberExclusive + extendToBottom));\n\t\t\tmodifiedSet.addRange(new LineRange(move.modified.endLineNumberExclusive, move.modified.endLineNumberExclusive + extendToBottom));\n\t\t}\n\n\t\tif (extendToTop > 0 || extendToBottom > 0) {\n\t\t\tmoves[i] = new LineRangeMapping(\n\t\t\t\tnew LineRange(move.original.startLineNumber - extendToTop, move.original.endLineNumberExclusive + extendToBottom),\n\t\t\t\tnew LineRange(move.modified.startLineNumber - extendToTop, move.modified.endLineNumberExclusive + extendToBottom),\n\t\t\t);\n\t\t}\n\t}\n\n\treturn moves;\n}\n\nfunction areLinesSimilar(line1: string, line2: string, timeout: ITimeout): boolean {\n\tif (line1.trim() === line2.trim()) { return true; }\n\tif (line1.length > 300 && line2.length > 300) { return false; }\n\n\tconst myersDiffingAlgorithm = new MyersDiffAlgorithm();\n\tconst result = myersDiffingAlgorithm.compute(\n\t\tnew LinesSliceCharSequence([line1], new OffsetRange(0, 1), false),\n\t\tnew LinesSliceCharSequence([line2], new OffsetRange(0, 1), false),\n\t\ttimeout\n\t);\n\tlet commonNonSpaceCharCount = 0;\n\tconst inverted = SequenceDiff.invert(result.diffs, line1.length);\n\tfor (const seq of inverted) {\n\t\tseq.seq1Range.forEach(idx => {\n\t\t\tif (!isSpace(line1.charCodeAt(idx))) {\n\t\t\t\tcommonNonSpaceCharCount++;\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction countNonWsChars(str: string): number {\n\t\tlet count = 0;\n\t\tfor (let i = 0; i < line1.length; i++) {\n\t\t\tif (!isSpace(str.charCodeAt(i))) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\tconst longerLineLength = countNonWsChars(line1.length > line2.length ? line1 : line2);\n\tconst r = commonNonSpaceCharCount / longerLineLength > 0.6 && longerLineLength > 10;\n\treturn r;\n}\n\nfunction joinCloseConsecutiveMoves(moves: LineRangeMapping[]): LineRangeMapping[] {\n\tif (moves.length === 0) {\n\t\treturn moves;\n\t}\n\n\tmoves.sort(compareBy(m => m.original.startLineNumber, numberComparator));\n\n\tconst result = [moves[0]];\n\tfor (let i = 1; i < moves.length; i++) {\n\t\tconst last = result[result.length - 1];\n\t\tconst current = moves[i];\n\n\t\tconst originalDist = current.original.startLineNumber - last.original.endLineNumberExclusive;\n\t\tconst modifiedDist = current.modified.startLineNumber - last.modified.endLineNumberExclusive;\n\t\tconst currentMoveAfterLast = originalDist >= 0 && modifiedDist >= 0;\n\n\t\tif (currentMoveAfterLast && originalDist + modifiedDist <= 2) {\n\t\t\tresult[result.length - 1] = last.join(current);\n\t\t\tcontinue;\n\t\t}\n\n\t\tresult.push(current);\n\t}\n\treturn result;\n}\n\nfunction removeMovesInSameDiff(changes: DetailedLineRangeMapping[], moves: LineRangeMapping[]) {\n\tconst changesMonotonous = new MonotonousArray(changes);\n\tmoves = moves.filter(m => {\n\t\tconst diffBeforeOriginalMove = changesMonotonous.findLastMonotonous(c => c.original.endLineNumberExclusive <= m.original.startLineNumber)\n\t\t\t|| new LineRangeMapping(new LineRange(1, 1), new LineRange(1, 1));\n\n\t\tconst modifiedDistToPrevDiff = m.modified.startLineNumber - diffBeforeOriginalMove.modified.endLineNumberExclusive;\n\t\tconst originalDistToPrevDiff = m.original.startLineNumber - diffBeforeOriginalMove.original.endLineNumberExclusive;\n\n\t\tconst differentDistances = modifiedDistToPrevDiff !== originalDistToPrevDiff;\n\t\treturn differentDistances;\n\t});\n\treturn moves;\n}\n"]}