{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/common/cursorCommon.ts"],"names":[],"mappings":"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","file":"cursorCommon.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ConfigurationChangedEvent, EditorAutoClosingEditStrategy, EditorAutoClosingStrategy, EditorAutoIndentStrategy, EditorAutoSurroundStrategy, EditorOption } from 'vs/editor/common/config/editorOptions';\nimport { LineTokens } from 'vs/editor/common/tokens/lineTokens';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { ISelection, Selection } from 'vs/editor/common/core/selection';\nimport { ICommand } from 'vs/editor/common/editorCommon';\nimport { IEditorConfiguration } from 'vs/editor/common/config/editorConfiguration';\nimport { PositionAffinity, TextModelResolvedOptions } from 'vs/editor/common/model';\nimport { AutoClosingPairs } from 'vs/editor/common/languages/languageConfiguration';\nimport { ILanguageConfigurationService } from 'vs/editor/common/languages/languageConfigurationRegistry';\nimport { createScopedLineTokens } from 'vs/editor/common/languages/supports';\nimport { IElectricAction } from 'vs/editor/common/languages/supports/electricCharacter';\nimport { CursorColumns } from 'vs/editor/common/core/cursorColumns';\nimport { normalizeIndentation } from 'vs/editor/common/core/indentation';\n\nexport interface IColumnSelectData {\n\tisReal: boolean;\n\tfromViewLineNumber: number;\n\tfromViewVisualColumn: number;\n\ttoViewLineNumber: number;\n\ttoViewVisualColumn: number;\n}\n\n/**\n * This is an operation type that will be recorded for undo/redo purposes.\n * The goal is to introduce an undo stop when the controller switches between different operation types.\n */\nexport const enum EditOperationType {\n\tOther = 0,\n\tDeletingLeft = 2,\n\tDeletingRight = 3,\n\tTypingOther = 4,\n\tTypingFirstSpace = 5,\n\tTypingConsecutiveSpace = 6,\n}\n\nexport interface CharacterMap {\n\t[char: string]: string;\n}\n\nconst autoCloseAlways = () => true;\nconst autoCloseNever = () => false;\nconst autoCloseBeforeWhitespace = (chr: string) => (chr === ' ' || chr === '\\t');\n\nexport class CursorConfiguration {\n\t_cursorMoveConfigurationBrand: void = undefined;\n\n\tpublic readonly readOnly: boolean;\n\tpublic readonly tabSize: number;\n\tpublic readonly indentSize: number;\n\tpublic readonly insertSpaces: boolean;\n\tpublic readonly stickyTabStops: boolean;\n\tpublic readonly pageSize: number;\n\tpublic readonly lineHeight: number;\n\tpublic readonly typicalHalfwidthCharacterWidth: number;\n\tpublic readonly useTabStops: boolean;\n\tpublic readonly wordSeparators: string;\n\tpublic readonly emptySelectionClipboard: boolean;\n\tpublic readonly copyWithSyntaxHighlighting: boolean;\n\tpublic readonly multiCursorMergeOverlapping: boolean;\n\tpublic readonly multiCursorPaste: 'spread' | 'full';\n\tpublic readonly multiCursorLimit: number;\n\tpublic readonly autoClosingBrackets: EditorAutoClosingStrategy;\n\tpublic readonly autoClosingComments: EditorAutoClosingStrategy;\n\tpublic readonly autoClosingQuotes: EditorAutoClosingStrategy;\n\tpublic readonly autoClosingDelete: EditorAutoClosingEditStrategy;\n\tpublic readonly autoClosingOvertype: EditorAutoClosingEditStrategy;\n\tpublic readonly autoSurround: EditorAutoSurroundStrategy;\n\tpublic readonly autoIndent: EditorAutoIndentStrategy;\n\tpublic readonly autoClosingPairs: AutoClosingPairs;\n\tpublic readonly surroundingPairs: CharacterMap;\n\tpublic readonly blockCommentStartToken: string | null;\n\tpublic readonly shouldAutoCloseBefore: { quote: (ch: string) => boolean; bracket: (ch: string) => boolean; comment: (ch: string) => boolean };\n\n\tprivate readonly _languageId: string;\n\tprivate _electricChars: { [key: string]: boolean } | null;\n\n\tpublic static shouldRecreate(e: ConfigurationChangedEvent): boolean {\n\t\treturn (\n\t\t\te.hasChanged(EditorOption.layoutInfo)\n\t\t\t|| e.hasChanged(EditorOption.wordSeparators)\n\t\t\t|| e.hasChanged(EditorOption.emptySelectionClipboard)\n\t\t\t|| e.hasChanged(EditorOption.multiCursorMergeOverlapping)\n\t\t\t|| e.hasChanged(EditorOption.multiCursorPaste)\n\t\t\t|| e.hasChanged(EditorOption.multiCursorLimit)\n\t\t\t|| e.hasChanged(EditorOption.autoClosingBrackets)\n\t\t\t|| e.hasChanged(EditorOption.autoClosingComments)\n\t\t\t|| e.hasChanged(EditorOption.autoClosingQuotes)\n\t\t\t|| e.hasChanged(EditorOption.autoClosingDelete)\n\t\t\t|| e.hasChanged(EditorOption.autoClosingOvertype)\n\t\t\t|| e.hasChanged(EditorOption.autoSurround)\n\t\t\t|| e.hasChanged(EditorOption.useTabStops)\n\t\t\t|| e.hasChanged(EditorOption.fontInfo)\n\t\t\t|| e.hasChanged(EditorOption.readOnly)\n\t\t);\n\t}\n\n\tconstructor(\n\t\tlanguageId: string,\n\t\tmodelOptions: TextModelResolvedOptions,\n\t\tconfiguration: IEditorConfiguration,\n\t\tpublic readonly languageConfigurationService: ILanguageConfigurationService\n\t) {\n\t\tthis._languageId = languageId;\n\n\t\tconst options = configuration.options;\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\t\tconst fontInfo = options.get(EditorOption.fontInfo);\n\n\t\tthis.readOnly = options.get(EditorOption.readOnly);\n\t\tthis.tabSize = modelOptions.tabSize;\n\t\tthis.indentSize = modelOptions.indentSize;\n\t\tthis.insertSpaces = modelOptions.insertSpaces;\n\t\tthis.stickyTabStops = options.get(EditorOption.stickyTabStops);\n\t\tthis.lineHeight = fontInfo.lineHeight;\n\t\tthis.typicalHalfwidthCharacterWidth = fontInfo.typicalHalfwidthCharacterWidth;\n\t\tthis.pageSize = Math.max(1, Math.floor(layoutInfo.height / this.lineHeight) - 2);\n\t\tthis.useTabStops = options.get(EditorOption.useTabStops);\n\t\tthis.wordSeparators = options.get(EditorOption.wordSeparators);\n\t\tthis.emptySelectionClipboard = options.get(EditorOption.emptySelectionClipboard);\n\t\tthis.copyWithSyntaxHighlighting = options.get(EditorOption.copyWithSyntaxHighlighting);\n\t\tthis.multiCursorMergeOverlapping = options.get(EditorOption.multiCursorMergeOverlapping);\n\t\tthis.multiCursorPaste = options.get(EditorOption.multiCursorPaste);\n\t\tthis.multiCursorLimit = options.get(EditorOption.multiCursorLimit);\n\t\tthis.autoClosingBrackets = options.get(EditorOption.autoClosingBrackets);\n\t\tthis.autoClosingComments = options.get(EditorOption.autoClosingComments);\n\t\tthis.autoClosingQuotes = options.get(EditorOption.autoClosingQuotes);\n\t\tthis.autoClosingDelete = options.get(EditorOption.autoClosingDelete);\n\t\tthis.autoClosingOvertype = options.get(EditorOption.autoClosingOvertype);\n\t\tthis.autoSurround = options.get(EditorOption.autoSurround);\n\t\tthis.autoIndent = options.get(EditorOption.autoIndent);\n\n\t\tthis.surroundingPairs = {};\n\t\tthis._electricChars = null;\n\n\t\tthis.shouldAutoCloseBefore = {\n\t\t\tquote: this._getShouldAutoClose(languageId, this.autoClosingQuotes, true),\n\t\t\tcomment: this._getShouldAutoClose(languageId, this.autoClosingComments, false),\n\t\t\tbracket: this._getShouldAutoClose(languageId, this.autoClosingBrackets, false),\n\t\t};\n\n\t\tthis.autoClosingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoClosingPairs();\n\n\t\tconst surroundingPairs = this.languageConfigurationService.getLanguageConfiguration(languageId).getSurroundingPairs();\n\t\tif (surroundingPairs) {\n\t\t\tfor (const pair of surroundingPairs) {\n\t\t\t\tthis.surroundingPairs[pair.open] = pair.close;\n\t\t\t}\n\t\t}\n\n\t\tconst commentsConfiguration = this.languageConfigurationService.getLanguageConfiguration(languageId).comments;\n\t\tthis.blockCommentStartToken = commentsConfiguration?.blockCommentStartToken ?? null;\n\t}\n\n\tpublic get electricChars() {\n\t\tif (!this._electricChars) {\n\t\t\tthis._electricChars = {};\n\t\t\tconst electricChars = this.languageConfigurationService.getLanguageConfiguration(this._languageId).electricCharacter?.getElectricCharacters();\n\t\t\tif (electricChars) {\n\t\t\t\tfor (const char of electricChars) {\n\t\t\t\t\tthis._electricChars[char] = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this._electricChars;\n\t}\n\n\t/**\n\t * Should return opening bracket type to match indentation with\n\t */\n\tpublic onElectricCharacter(character: string, context: LineTokens, column: number): IElectricAction | null {\n\t\tconst scopedLineTokens = createScopedLineTokens(context, column - 1);\n\t\tconst electricCharacterSupport = this.languageConfigurationService.getLanguageConfiguration(scopedLineTokens.languageId).electricCharacter;\n\t\tif (!electricCharacterSupport) {\n\t\t\treturn null;\n\t\t}\n\t\treturn electricCharacterSupport.onElectricCharacter(character, scopedLineTokens, column - scopedLineTokens.firstCharOffset);\n\t}\n\n\tpublic normalizeIndentation(str: string): string {\n\t\treturn normalizeIndentation(str, this.indentSize, this.insertSpaces);\n\t}\n\n\tprivate _getShouldAutoClose(languageId: string, autoCloseConfig: EditorAutoClosingStrategy, forQuotes: boolean): (ch: string) => boolean {\n\t\tswitch (autoCloseConfig) {\n\t\t\tcase 'beforeWhitespace':\n\t\t\t\treturn autoCloseBeforeWhitespace;\n\t\t\tcase 'languageDefined':\n\t\t\t\treturn this._getLanguageDefinedShouldAutoClose(languageId, forQuotes);\n\t\t\tcase 'always':\n\t\t\t\treturn autoCloseAlways;\n\t\t\tcase 'never':\n\t\t\t\treturn autoCloseNever;\n\t\t}\n\t}\n\n\tprivate _getLanguageDefinedShouldAutoClose(languageId: string, forQuotes: boolean): (ch: string) => boolean {\n\t\tconst autoCloseBeforeSet = this.languageConfigurationService.getLanguageConfiguration(languageId).getAutoCloseBeforeSet(forQuotes);\n\t\treturn c => autoCloseBeforeSet.indexOf(c) !== -1;\n\t}\n\n\t/**\n\t * Returns a visible column from a column.\n\t * @see {@link CursorColumns}\n\t */\n\tpublic visibleColumnFromColumn(model: ICursorSimpleModel, position: Position): number {\n\t\treturn CursorColumns.visibleColumnFromColumn(model.getLineContent(position.lineNumber), position.column, this.tabSize);\n\t}\n\n\t/**\n\t * Returns a visible column from a column.\n\t * @see {@link CursorColumns}\n\t */\n\tpublic columnFromVisibleColumn(model: ICursorSimpleModel, lineNumber: number, visibleColumn: number): number {\n\t\tconst result = CursorColumns.columnFromVisibleColumn(model.getLineContent(lineNumber), visibleColumn, this.tabSize);\n\n\t\tconst minColumn = model.getLineMinColumn(lineNumber);\n\t\tif (result < minColumn) {\n\t\t\treturn minColumn;\n\t\t}\n\n\t\tconst maxColumn = model.getLineMaxColumn(lineNumber);\n\t\tif (result > maxColumn) {\n\t\t\treturn maxColumn;\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\n/**\n * Represents a simple model (either the model or the view model).\n */\nexport interface ICursorSimpleModel {\n\tgetLineCount(): number;\n\tgetLineContent(lineNumber: number): string;\n\tgetLineMinColumn(lineNumber: number): number;\n\tgetLineMaxColumn(lineNumber: number): number;\n\tgetLineFirstNonWhitespaceColumn(lineNumber: number): number;\n\tgetLineLastNonWhitespaceColumn(lineNumber: number): number;\n\tnormalizePosition(position: Position, affinity: PositionAffinity): Position;\n\n\t/**\n\t * Gets the column at which indentation stops at a given line.\n\t * @internal\n\t */\n\tgetLineIndentColumn(lineNumber: number): number;\n}\n\nexport type PartialCursorState = CursorState | PartialModelCursorState | PartialViewCursorState;\n\nexport class CursorState {\n\t_cursorStateBrand: void = undefined;\n\n\tpublic static fromModelState(modelState: SingleCursorState): PartialModelCursorState {\n\t\treturn new PartialModelCursorState(modelState);\n\t}\n\n\tpublic static fromViewState(viewState: SingleCursorState): PartialViewCursorState {\n\t\treturn new PartialViewCursorState(viewState);\n\t}\n\n\tpublic static fromModelSelection(modelSelection: ISelection): PartialModelCursorState {\n\t\tconst selection = Selection.liftSelection(modelSelection);\n\t\tconst modelState = new SingleCursorState(\n\t\t\tRange.fromPositions(selection.getSelectionStart()),\n\t\t\tSelectionStartKind.Simple, 0,\n\t\t\tselection.getPosition(), 0\n\t\t);\n\t\treturn CursorState.fromModelState(modelState);\n\t}\n\n\tpublic static fromModelSelections(modelSelections: readonly ISelection[]): PartialModelCursorState[] {\n\t\tconst states: PartialModelCursorState[] = [];\n\t\tfor (let i = 0, len = modelSelections.length; i < len; i++) {\n\t\t\tstates[i] = this.fromModelSelection(modelSelections[i]);\n\t\t}\n\t\treturn states;\n\t}\n\n\treadonly modelState: SingleCursorState;\n\treadonly viewState: SingleCursorState;\n\n\tconstructor(modelState: SingleCursorState, viewState: SingleCursorState) {\n\t\tthis.modelState = modelState;\n\t\tthis.viewState = viewState;\n\t}\n\n\tpublic equals(other: CursorState): boolean {\n\t\treturn (this.viewState.equals(other.viewState) && this.modelState.equals(other.modelState));\n\t}\n}\n\nexport class PartialModelCursorState {\n\treadonly modelState: SingleCursorState;\n\treadonly viewState: null;\n\n\tconstructor(modelState: SingleCursorState) {\n\t\tthis.modelState = modelState;\n\t\tthis.viewState = null;\n\t}\n}\n\nexport class PartialViewCursorState {\n\treadonly modelState: null;\n\treadonly viewState: SingleCursorState;\n\n\tconstructor(viewState: SingleCursorState) {\n\t\tthis.modelState = null;\n\t\tthis.viewState = viewState;\n\t}\n}\n\nexport const enum SelectionStartKind {\n\tSimple,\n\tWord,\n\tLine\n}\n\n/**\n * Represents the cursor state on either the model or on the view model.\n */\nexport class SingleCursorState {\n\t_singleCursorStateBrand: void = undefined;\n\n\tpublic readonly selection: Selection;\n\n\tconstructor(\n\t\tpublic readonly selectionStart: Range,\n\t\tpublic readonly selectionStartKind: SelectionStartKind,\n\t\tpublic readonly selectionStartLeftoverVisibleColumns: number,\n\t\tpublic readonly position: Position,\n\t\tpublic readonly leftoverVisibleColumns: number,\n\t) {\n\t\tthis.selection = SingleCursorState._computeSelection(this.selectionStart, this.position);\n\t}\n\n\tpublic equals(other: SingleCursorState) {\n\t\treturn (\n\t\t\tthis.selectionStartLeftoverVisibleColumns === other.selectionStartLeftoverVisibleColumns\n\t\t\t&& this.leftoverVisibleColumns === other.leftoverVisibleColumns\n\t\t\t&& this.selectionStartKind === other.selectionStartKind\n\t\t\t&& this.position.equals(other.position)\n\t\t\t&& this.selectionStart.equalsRange(other.selectionStart)\n\t\t);\n\t}\n\n\tpublic hasSelection(): boolean {\n\t\treturn (!this.selection.isEmpty() || !this.selectionStart.isEmpty());\n\t}\n\n\tpublic move(inSelectionMode: boolean, lineNumber: number, column: number, leftoverVisibleColumns: number): SingleCursorState {\n\t\tif (inSelectionMode) {\n\t\t\t// move just position\n\t\t\treturn new SingleCursorState(\n\t\t\t\tthis.selectionStart,\n\t\t\t\tthis.selectionStartKind,\n\t\t\t\tthis.selectionStartLeftoverVisibleColumns,\n\t\t\t\tnew Position(lineNumber, column),\n\t\t\t\tleftoverVisibleColumns\n\t\t\t);\n\t\t} else {\n\t\t\t// move everything\n\t\t\treturn new SingleCursorState(\n\t\t\t\tnew Range(lineNumber, column, lineNumber, column),\n\t\t\t\tSelectionStartKind.Simple,\n\t\t\t\tleftoverVisibleColumns,\n\t\t\t\tnew Position(lineNumber, column),\n\t\t\t\tleftoverVisibleColumns\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate static _computeSelection(selectionStart: Range, position: Position): Selection {\n\t\tif (selectionStart.isEmpty() || !position.isBeforeOrEqual(selectionStart.getStartPosition())) {\n\t\t\treturn Selection.fromPositions(selectionStart.getStartPosition(), position);\n\t\t} else {\n\t\t\treturn Selection.fromPositions(selectionStart.getEndPosition(), position);\n\t\t}\n\t}\n}\n\nexport class EditOperationResult {\n\t_editOperationResultBrand: void = undefined;\n\n\treadonly type: EditOperationType;\n\treadonly commands: Array<ICommand | null>;\n\treadonly shouldPushStackElementBefore: boolean;\n\treadonly shouldPushStackElementAfter: boolean;\n\n\tconstructor(\n\t\ttype: EditOperationType,\n\t\tcommands: Array<ICommand | null>,\n\t\topts: {\n\t\t\tshouldPushStackElementBefore: boolean;\n\t\t\tshouldPushStackElementAfter: boolean;\n\t\t}\n\t) {\n\t\tthis.type = type;\n\t\tthis.commands = commands;\n\t\tthis.shouldPushStackElementBefore = opts.shouldPushStackElementBefore;\n\t\tthis.shouldPushStackElementAfter = opts.shouldPushStackElementAfter;\n\t}\n}\n\nexport function isQuote(ch: string): boolean {\n\treturn (ch === '\\'' || ch === '\"' || ch === '`');\n}\n"]}