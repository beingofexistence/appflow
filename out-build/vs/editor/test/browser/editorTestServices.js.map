{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/test/browser/editorTestServices.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAShG,MAAa,IAAsB,SAAQ,gCAAI;QAA/C;;YAEiB,qBAAgB,GAAG,IAAI,IAAI,EAAkB,CAAC;QAc/D,CAAC;QAZmB,CAAC;YACnB,OAAO,IAAI,CAAC,gBAAgB,CAAC;QAC9B,CAAC;QAED,mBAAmB;YAClB,OAAO,IAAI,CAAC;QACb,CAAC;QAEQ,cAAc,CAAC,KAA2B,EAAE,MAA0B,EAAE,UAAoB;YACpG,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;YACvB,OAAO,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC;KACD;IAhBD,oBAgBC;IAED,MAAa,IAAqB,SAAQ,gCAAI;QAI7C;YACC,KAAK,CAAC,IAAK,CAAC,CAAC;YAHP,UAAK,GAAa,EAAE,CAAC;QAI5B,CAAC;QAEe,UAAU,CAAC,IAAY,EAAE,KAAc;YACtD,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC1B,CAAC;QAEe,6BAA6B,CAAC,QAAgB;YAC7D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC3C,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;oBACzC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBACxB,CAAC,EAAE,CAAC;iBACJ;aACD;QACF,CAAC;QAEM,IAAI;YACV,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC;KACD;IAxBD,oBAwBC;IAED,MAAa,IAAI;QAWhB,YAAY,oBAAyB;YANpB,MAAC,GAAuB,IAAI,WAAG,EAAqB,CAAC;YACtD,yBAAoB,GAAyB,IAAI,CAAC,CAAC,CAAqB,KAAK,CAAC;YAE7E,MAAC,GAAsB,IAAI,WAAG,EAAqB,CAAC;YACrD,wBAAmB,GAAyB,IAAI,CAAC,CAAC,CAAoB,KAAK,CAAC;YAG3F,IAAI,CAAC,CAAC,GAAuB,oBAAoB,CAAC;QACnD,CAAC;QAEM,cAAc,CAAI,EAAU,EAAE,GAAG,IAAW;YAClD,MAAM,OAAO,GAAG,cAAG,CAAc,UAAU,CAAC,EAAE,CAAC,CAAC;YAChD,IAAI,CAAC,OAAO,EAAE;gBACb,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,YAAY,EAAE,aAAa,CAAC,CAAC,CAAC;aAC9D;YAED,IAAI;gBACH,IAAI,CAAC,CAAC,CAAqB,IAAI,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;gBACzD,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAqB,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAsB,CAAC,OAAO,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,CAAM,CAAC;gBAC5H,IAAI,CAAC,CAAC,CAAoB,IAAI,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;gBACxD,OAAO,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;aAC/B;YAAC,OAAO,GAAG,EAAE;gBACb,OAAO,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aAC3B;QACF,CAAC;KACD;IA9BD,oBA8BC","file":"editorTestServices.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { AbstractCodeEditorService, GlobalStyleSheet } from 'vs/editor/browser/services/abstractCodeEditorService';\nimport { CommandsRegistry, ICommandEvent, ICommandService } from 'vs/platform/commands/common/commands';\nimport { IResourceEditorInput } from 'vs/platform/editor/common/editor';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\n\nexport class TestCodeEditorService extends AbstractCodeEditorService {\n\n\tpublic readonly globalStyleSheet = new TestGlobalStyleSheet();\n\n\tprotected override _createGlobalStyleSheet(): GlobalStyleSheet {\n\t\treturn this.globalStyleSheet;\n\t}\n\n\tgetActiveCodeEditor(): ICodeEditor | null {\n\t\treturn null;\n\t}\n\tpublic lastInput?: IResourceEditorInput;\n\toverride openCodeEditor(input: IResourceEditorInput, source: ICodeEditor | null, sideBySide?: boolean): Promise<ICodeEditor | null> {\n\t\tthis.lastInput = input;\n\t\treturn Promise.resolve(null);\n\t}\n}\n\nexport class TestGlobalStyleSheet extends GlobalStyleSheet {\n\n\tpublic rules: string[] = [];\n\n\tconstructor() {\n\t\tsuper(null!);\n\t}\n\n\tpublic override insertRule(rule: string, index?: number): void {\n\t\tthis.rules.unshift(rule);\n\t}\n\n\tpublic override removeRulesContainingSelector(ruleName: string): void {\n\t\tfor (let i = 0; i < this.rules.length; i++) {\n\t\t\tif (this.rules[i].indexOf(ruleName) >= 0) {\n\t\t\t\tthis.rules.splice(i, 1);\n\t\t\t\ti--;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic read(): string {\n\t\treturn this.rules.join('\\n');\n\t}\n}\n\nexport class TestCommandService implements ICommandService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _instantiationService: IInstantiationService;\n\n\tprivate readonly _onWillExecuteCommand = new Emitter<ICommandEvent>();\n\tpublic readonly onWillExecuteCommand: Event<ICommandEvent> = this._onWillExecuteCommand.event;\n\n\tprivate readonly _onDidExecuteCommand = new Emitter<ICommandEvent>();\n\tpublic readonly onDidExecuteCommand: Event<ICommandEvent> = this._onDidExecuteCommand.event;\n\n\tconstructor(instantiationService: IInstantiationService) {\n\t\tthis._instantiationService = instantiationService;\n\t}\n\n\tpublic executeCommand<T>(id: string, ...args: any[]): Promise<T> {\n\t\tconst command = CommandsRegistry.getCommand(id);\n\t\tif (!command) {\n\t\t\treturn Promise.reject(new Error(`command '${id}' not found`));\n\t\t}\n\n\t\ttry {\n\t\t\tthis._onWillExecuteCommand.fire({ commandId: id, args });\n\t\t\tconst result = this._instantiationService.invokeFunction.apply(this._instantiationService, [command.handler, ...args]) as T;\n\t\t\tthis._onDidExecuteCommand.fire({ commandId: id, args });\n\t\t\treturn Promise.resolve(result);\n\t\t} catch (err) {\n\t\t\treturn Promise.reject(err);\n\t\t}\n\t}\n}\n"]}