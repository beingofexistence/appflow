{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/test/browser/testCommand.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAahG,SAAgB,IAAI,CACnB,KAAe,EACf,UAAyB,EACzB,SAAc,EACd,cAA8E,EAC9E,aAAuB,EACvB,iBAAsB,EACtB,iBAA2B,EAC3B,OAA4E;QAE5E,MAAM,WAAW,GAAG,IAAI,eAAG,EAAc,CAAC;QAC1C,MAAM,oBAAoB,GAAG,IAAA,qBAAI,EAAqB,WAAW,CAAC,CAAC;QACnE,IAAI,OAAO,EAAE;YACZ,oBAAoB,CAAC,cAAc,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;SAC1D;QACD,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,IAAA,oBAAI,EAAiB,oBAAoB,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC;QACxG,MAAM,MAAM,GAAG,WAAW,CAAC,GAAG,CAAC,IAAA,qBAAI,EAAsB,oBAAoB,EAAE,KAAK,CAAC,CAAC,CAAC;QACvF,MAAM,SAAS,GAAG,MAAM,CAAC,YAAY,EAAG,CAAC;QAEzC,IAAI,iBAAiB,EAAE;YACtB,KAAK,CAAC,YAAY,CAAC,iBAAiB,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC;SAC3D;QAED,SAAS,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;QAE9C,MAAM,OAAO,GAAG,oBAAoB,CAAC,cAAc,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,cAAc,CAAC,QAAQ,EAAE,SAAS,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QACtH,SAAS,CAAC,cAAc,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;QAE3C,MAAM,CAAC,eAAe,CAAC,KAAK,CAAC,eAAe,EAAE,EAAE,aAAa,CAAC,CAAC;QAE/D,MAAM,eAAe,GAAG,SAAS,CAAC,YAAY,EAAE,CAAC;QACjD,MAAM,CAAC,eAAe,CAAC,eAAe,CAAC,QAAQ,EAAE,EAAE,iBAAiB,CAAC,QAAQ,EAAE,CAAC,CAAC;QAEjF,WAAW,CAAC,OAAO,EAAE,CAAC;IACvB,CAAC;IAlCD,oBAkCC;IAED;;OAEG;IACH,SAAgB,IAAI,CAAa,KAAiB,EAAE,OAAiB;QACpE,MAAM,UAAU,GAA2B,EAAE,CAAC;QAC9C,MAAM,oBAAoB,GAA0B;YACnD,gBAAgB,EAAE,CAAC,KAAa,EAAE,IAAY,EAAE,mBAA4B,KAAK,EAAE,EAAE;gBACpF,UAAU,CAAC,IAAI,CAAC;oBACf,KAAK,EAAE,KAAK;oBACZ,IAAI,EAAE,IAAI;oBACV,gBAAgB,EAAE,gBAAgB;iBAClC,CAAC,CAAC;YACJ,CAAC;YAED,uBAAuB,EAAE,CAAC,KAAa,EAAE,IAAY,EAAE,mBAA4B,KAAK,EAAE,EAAE;gBAC3F,UAAU,CAAC,IAAI,CAAC;oBACf,KAAK,EAAE,KAAK;oBACZ,IAAI,EAAE,IAAI;oBACV,gBAAgB,EAAE,gBAAgB;iBAClC,CAAC,CAAC;YACJ,CAAC;YAGD,cAAc,EAAE,CAAC,SAAqB,EAAE,EAAE;gBACzC,OAAO,EAAE,CAAC;YACX,CAAC;SACD,CAAC;QACF,OAAO,CAAC,iBAAiB,CAAC,KAAK,EAAE,oBAAoB,CAAC,CAAC;QACvD,OAAO,UAAU,CAAC;IACnB,CAAC;IA1BD,oBA0BC","file":"testCommand.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { IRange } from 'vs/editor/common/core/range';\nimport { Selection, ISelection } from 'vs/editor/common/core/selection';\nimport { ICommand, IEditOperationBuilder } from 'vs/editor/common/editorCommon';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { instantiateTestCodeEditor, createCodeEditorServices } from 'vs/editor/test/browser/testCodeEditor';\nimport { instantiateTextModel } from 'vs/editor/test/common/testTextModel';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ISingleEditOperation } from 'vs/editor/common/core/editOperation';\n\nexport function testCommand(\n\tlines: string[],\n\tlanguageId: string | null,\n\tselection: Selection,\n\tcommandFactory: (accessor: ServicesAccessor, selection: Selection) => ICommand,\n\texpectedLines: string[],\n\texpectedSelection: Selection,\n\tforceTokenization?: boolean,\n\tprepare?: (accessor: ServicesAccessor, disposables: DisposableStore) => void\n): void {\n\tconst disposables = new DisposableStore();\n\tconst instantiationService = createCodeEditorServices(disposables);\n\tif (prepare) {\n\t\tinstantiationService.invokeFunction(prepare, disposables);\n\t}\n\tconst model = disposables.add(instantiateTextModel(instantiationService, lines.join('\\n'), languageId));\n\tconst editor = disposables.add(instantiateTestCodeEditor(instantiationService, model));\n\tconst viewModel = editor.getViewModel()!;\n\n\tif (forceTokenization) {\n\t\tmodel.tokenization.forceTokenization(model.getLineCount());\n\t}\n\n\tviewModel.setSelections('tests', [selection]);\n\n\tconst command = instantiationService.invokeFunction((accessor) => commandFactory(accessor, viewModel.getSelection()));\n\tviewModel.executeCommand(command, 'tests');\n\n\tassert.deepStrictEqual(model.getLinesContent(), expectedLines);\n\n\tconst actualSelection = viewModel.getSelection();\n\tassert.deepStrictEqual(actualSelection.toString(), expectedSelection.toString());\n\n\tdisposables.dispose();\n}\n\n/**\n * Extract edit operations if command `command` were to execute on model `model`\n */\nexport function getEditOperation(model: ITextModel, command: ICommand): ISingleEditOperation[] {\n\tconst operations: ISingleEditOperation[] = [];\n\tconst editOperationBuilder: IEditOperationBuilder = {\n\t\taddEditOperation: (range: IRange, text: string, forceMoveMarkers: boolean = false) => {\n\t\t\toperations.push({\n\t\t\t\trange: range,\n\t\t\t\ttext: text,\n\t\t\t\tforceMoveMarkers: forceMoveMarkers\n\t\t\t});\n\t\t},\n\n\t\taddTrackedEditOperation: (range: IRange, text: string, forceMoveMarkers: boolean = false) => {\n\t\t\toperations.push({\n\t\t\t\trange: range,\n\t\t\t\ttext: text,\n\t\t\t\tforceMoveMarkers: forceMoveMarkers\n\t\t\t});\n\t\t},\n\n\n\t\ttrackSelection: (selection: ISelection) => {\n\t\t\treturn '';\n\t\t}\n\t};\n\tcommand.getEditOperations(model, editOperationBuilder);\n\treturn operations;\n}\n"]}