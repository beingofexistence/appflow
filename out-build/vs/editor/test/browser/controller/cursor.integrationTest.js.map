{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/test/browser/controller/cursor.integrationTest.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAMhG,KAAK,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAE/B,IAAI,CAAC,2HAA2H,EAAE;YACjI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACpB,MAAM,QAAQ,GAAG,IAAI,CAAC;YAEtB,MAAM,IAAI,GAAa,EAAE,CAAC;YAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;gBAClC,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;aAChB;YAED,IAAA,qBAAI,EAAe,IAAI,EAAE,EAAE,EAAE,CAAC,MAAM,EAAE,SAAS,EAAE,EAAE;gBAClD,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;gBAEhC,MAAM,UAAU,GAAgB,EAAE,CAAC;gBACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;oBAClC,UAAU,CAAC,CAAC,CAAC,GAAG,IAAI,eAAG,CAAO,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;iBAClD;gBACD,SAAS,CAAC,aAAa,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;gBAE5C,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;gBAChC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;gBAEhC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,EAAE,CAAC,EAAE,EAAE;oBAClC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,OAAO,EAAE,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAC7E;gBAED,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;gBAC/D,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,aAAa,EAAE,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;YACvF,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"cursor.integrationTest.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { withTestCodeEditor } from 'vs/editor/test/browser/testCodeEditor';\n\nsuite('Editor Controller', () => {\n\n\ttest('issue #23913: Greater than 1000+ multi cursor typing replacement text appears inverted, lines begin to drop off selection', function () {\n\t\tthis.timeout(10000);\n\t\tconst LINE_CNT = 2000;\n\n\t\tconst text: string[] = [];\n\t\tfor (let i = 0; i < LINE_CNT; i++) {\n\t\t\ttext[i] = 'asd';\n\t\t}\n\n\t\twithTestCodeEditor(text, {}, (editor, viewModel) => {\n\t\t\tconst model = editor.getModel();\n\n\t\t\tconst selections: Selection[] = [];\n\t\t\tfor (let i = 0; i < LINE_CNT; i++) {\n\t\t\t\tselections[i] = new Selection(i + 1, 1, i + 1, 1);\n\t\t\t}\n\t\t\tviewModel.setSelections('test', selections);\n\n\t\t\tviewModel.type('n', 'keyboard');\n\t\t\tviewModel.type('n', 'keyboard');\n\n\t\t\tfor (let i = 0; i < LINE_CNT; i++) {\n\t\t\t\tassert.strictEqual(model.getLineContent(i + 1), 'nnasd', 'line #' + (i + 1));\n\t\t\t}\n\n\t\t\tassert.strictEqual(viewModel.getSelections().length, LINE_CNT);\n\t\t\tassert.strictEqual(viewModel.getSelections()[LINE_CNT - 1].startLineNumber, LINE_CNT);\n\t\t});\n\t});\n});\n"]}