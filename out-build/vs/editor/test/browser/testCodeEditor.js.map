{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/test/browser/testCodeEditor.ts"],"names":[],"mappings":"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","file":"testCodeEditor.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { mock } from 'vs/base/test/common/mock';\nimport { EditorConfiguration, IEditorConstructionOptions } from 'vs/editor/browser/config/editorConfiguration';\nimport { IActiveCodeEditor, ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { View } from 'vs/editor/browser/view';\nimport { CodeEditorWidget, ICodeEditorWidgetOptions } from 'vs/editor/browser/widget/codeEditorWidget';\nimport * as editorOptions from 'vs/editor/common/config/editorOptions';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { ILanguageConfigurationService } from 'vs/editor/common/languages/languageConfigurationRegistry';\nimport { ITextBufferFactory, ITextModel } from 'vs/editor/common/model';\nimport { IEditorWorkerService } from 'vs/editor/common/services/editorWorker';\nimport { ILanguageFeatureDebounceService, LanguageFeatureDebounceService } from 'vs/editor/common/services/languageFeatureDebounce';\nimport { ILanguageFeaturesService } from 'vs/editor/common/services/languageFeatures';\nimport { LanguageFeaturesService } from 'vs/editor/common/services/languageFeaturesService';\nimport { LanguageService } from 'vs/editor/common/services/languageService';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { ModelService } from 'vs/editor/common/services/modelService';\nimport { ITextResourcePropertiesService } from 'vs/editor/common/services/textResourceConfiguration';\nimport { ViewModel } from 'vs/editor/common/viewModel/viewModelImpl';\nimport { TestConfiguration } from 'vs/editor/test/browser/config/testConfiguration';\nimport { TestCodeEditorService, TestCommandService } from 'vs/editor/test/browser/editorTestServices';\nimport { TestLanguageConfigurationService } from 'vs/editor/test/common/modes/testLanguageConfigurationService';\nimport { TestEditorWorkerService } from 'vs/editor/test/common/services/testEditorWorkerService';\nimport { TestTextResourcePropertiesService } from 'vs/editor/test/common/services/testTextResourcePropertiesService';\nimport { instantiateTextModel } from 'vs/editor/test/common/testTextModel';\nimport { IAccessibilityService } from 'vs/platform/accessibility/common/accessibility';\nimport { TestAccessibilityService } from 'vs/platform/accessibility/test/common/testAccessibilityService';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { TestClipboardService } from 'vs/platform/clipboard/test/common/testClipboardService';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { IContextKeyService, IContextKeyServiceTarget } from 'vs/platform/contextkey/common/contextkey';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { TestDialogService } from 'vs/platform/dialogs/test/common/testDialogService';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { BrandedService, IInstantiationService, ServiceIdentifier } from 'vs/platform/instantiation/common/instantiation';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { MockContextKeyService, MockKeybindingService } from 'vs/platform/keybinding/test/common/mockKeybindingService';\nimport { ILogService, NullLogService } from 'vs/platform/log/common/log';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { TestNotificationService } from 'vs/platform/notification/test/common/testNotificationService';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { NullOpenerService } from 'vs/platform/opener/test/common/nullOpenerService';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { NullTelemetryServiceShape } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { TestThemeService } from 'vs/platform/theme/test/common/testThemeService';\nimport { IUndoRedoService } from 'vs/platform/undoRedo/common/undoRedo';\nimport { UndoRedoService } from 'vs/platform/undoRedo/common/undoRedoService';\n\nexport interface ITestCodeEditor extends IActiveCodeEditor {\n\tgetViewModel(): ViewModel | undefined;\n\tregisterAndInstantiateContribution<T extends IEditorContribution, Services extends BrandedService[]>(id: string, ctor: new (editor: ICodeEditor, ...services: Services) => T): T;\n\tregisterDisposable(disposable: IDisposable): void;\n}\n\nexport class TestCodeEditor extends CodeEditorWidget implements ICodeEditor {\n\n\t//#region testing overrides\n\tprotected override _createConfiguration(isSimpleWidget: boolean, options: Readonly<IEditorConstructionOptions>): EditorConfiguration {\n\t\treturn new TestConfiguration(options);\n\t}\n\tprotected override _createView(viewModel: ViewModel): [View, boolean] {\n\t\t// Never create a view\n\t\treturn [null! as View, false];\n\t}\n\tprivate _hasTextFocus = false;\n\tpublic setHasTextFocus(hasTextFocus: boolean): void {\n\t\tthis._hasTextFocus = hasTextFocus;\n\t}\n\tpublic override hasTextFocus(): boolean {\n\t\treturn this._hasTextFocus;\n\t}\n\t//#endregion\n\n\t//#region Testing utils\n\tpublic getViewModel(): ViewModel | undefined {\n\t\treturn this._modelData ? this._modelData.viewModel : undefined;\n\t}\n\tpublic registerAndInstantiateContribution<T extends IEditorContribution>(id: string, ctor: new (editor: ICodeEditor, ...services: BrandedService[]) => T): T {\n\t\tconst r: T = this._instantiationService.createInstance(ctor, this);\n\t\tthis._contributions.set(id, r);\n\t\treturn r;\n\t}\n\tpublic registerDisposable(disposable: IDisposable): void {\n\t\tthis._register(disposable);\n\t}\n}\n\nclass TestEditorDomElement {\n\tparentElement: IContextKeyServiceTarget | null = null;\n\townerDocument = document;\n\tsetAttribute(attr: string, value: string): void { }\n\tremoveAttribute(attr: string): void { }\n\thasAttribute(attr: string): boolean { return false; }\n\tgetAttribute(attr: string): string | undefined { return undefined; }\n\taddEventListener(event: string): void { }\n\tremoveEventListener(event: string): void { }\n}\n\nexport interface TestCodeEditorCreationOptions extends editorOptions.IEditorOptions {\n\t/**\n\t * If the editor has text focus.\n\t * Defaults to true.\n\t */\n\thasTextFocus?: boolean;\n}\n\nexport interface TestCodeEditorInstantiationOptions extends TestCodeEditorCreationOptions {\n\t/**\n\t * Services to use.\n\t */\n\tserviceCollection?: ServiceCollection;\n}\n\nexport function withTestCodeEditor(text: ITextModel | string | string[] | ITextBufferFactory, options: TestCodeEditorInstantiationOptions, callback: (editor: ITestCodeEditor, viewModel: ViewModel, instantiationService: TestInstantiationService) => void): void {\n\treturn _withTestCodeEditor(text, options, callback);\n}\n\nexport async function withAsyncTestCodeEditor(text: ITextModel | string | string[] | ITextBufferFactory, options: TestCodeEditorInstantiationOptions, callback: (editor: ITestCodeEditor, viewModel: ViewModel, instantiationService: TestInstantiationService) => Promise<void>): Promise<void> {\n\treturn _withTestCodeEditor(text, options, callback);\n}\n\nfunction isTextModel(arg: ITextModel | string | string[] | ITextBufferFactory): arg is ITextModel {\n\treturn Boolean(arg && (arg as ITextModel).uri);\n}\n\nfunction _withTestCodeEditor(arg: ITextModel | string | string[] | ITextBufferFactory, options: TestCodeEditorInstantiationOptions, callback: (editor: ITestCodeEditor, viewModel: ViewModel, instantiationService: TestInstantiationService) => void): void;\nfunction _withTestCodeEditor(arg: ITextModel | string | string[] | ITextBufferFactory, options: TestCodeEditorInstantiationOptions, callback: (editor: ITestCodeEditor, viewModel: ViewModel, instantiationService: TestInstantiationService) => Promise<void>): Promise<void>;\nfunction _withTestCodeEditor(arg: ITextModel | string | string[] | ITextBufferFactory, options: TestCodeEditorInstantiationOptions, callback: (editor: ITestCodeEditor, viewModel: ViewModel, instantiationService: TestInstantiationService) => Promise<void> | void): Promise<void> | void {\n\tconst disposables = new DisposableStore();\n\tconst instantiationService = createCodeEditorServices(disposables, options.serviceCollection);\n\tdelete options.serviceCollection;\n\n\t// create a model if necessary\n\tlet model: ITextModel;\n\tif (isTextModel(arg)) {\n\t\tmodel = arg;\n\t} else {\n\t\tmodel = disposables.add(instantiateTextModel(instantiationService, Array.isArray(arg) ? arg.join('\\n') : arg));\n\t}\n\n\tconst editor = disposables.add(instantiateTestCodeEditor(instantiationService, model, options));\n\tconst viewModel = editor.getViewModel()!;\n\tviewModel.setHasFocus(true);\n\tconst result = callback(<ITestCodeEditor>editor, editor.getViewModel()!, instantiationService);\n\tif (result) {\n\t\treturn result.then(() => disposables.dispose());\n\t}\n\n\tdisposables.dispose();\n}\n\nexport function createCodeEditorServices(disposables: DisposableStore, services: ServiceCollection = new ServiceCollection()): TestInstantiationService {\n\tconst serviceIdentifiers: ServiceIdentifier<any>[] = [];\n\tconst define = <T>(id: ServiceIdentifier<T>, ctor: new (...args: any[]) => T) => {\n\t\tif (!services.has(id)) {\n\t\t\tservices.set(id, new SyncDescriptor(ctor));\n\t\t}\n\t\tserviceIdentifiers.push(id);\n\t};\n\tconst defineInstance = <T>(id: ServiceIdentifier<T>, instance: T) => {\n\t\tif (!services.has(id)) {\n\t\t\tservices.set(id, instance);\n\t\t}\n\t\tserviceIdentifiers.push(id);\n\t};\n\n\tdefine(IAccessibilityService, TestAccessibilityService);\n\tdefine(IKeybindingService, MockKeybindingService);\n\tdefine(IClipboardService, TestClipboardService);\n\tdefine(IEditorWorkerService, TestEditorWorkerService);\n\tdefineInstance(IOpenerService, NullOpenerService);\n\tdefine(INotificationService, TestNotificationService);\n\tdefine(IDialogService, TestDialogService);\n\tdefine(IUndoRedoService, UndoRedoService);\n\tdefine(ILanguageService, LanguageService);\n\tdefine(ILanguageConfigurationService, TestLanguageConfigurationService);\n\tdefine(IConfigurationService, TestConfigurationService);\n\tdefine(ITextResourcePropertiesService, TestTextResourcePropertiesService);\n\tdefine(IThemeService, TestThemeService);\n\tdefine(ILogService, NullLogService);\n\tdefine(IModelService, ModelService);\n\tdefine(ICodeEditorService, TestCodeEditorService);\n\tdefine(IContextKeyService, MockContextKeyService);\n\tdefine(ICommandService, TestCommandService);\n\tdefine(ITelemetryService, NullTelemetryServiceShape);\n\tdefine(IEnvironmentService, class extends mock<IEnvironmentService>() {\n\t\tdeclare readonly _serviceBrand: undefined;\n\t\toverride isBuilt: boolean = true;\n\t\toverride isExtensionDevelopment: boolean = false;\n\t});\n\tdefine(ILanguageFeatureDebounceService, LanguageFeatureDebounceService);\n\tdefine(ILanguageFeaturesService, LanguageFeaturesService);\n\n\tconst instantiationService = disposables.add(new TestInstantiationService(services, true));\n\tdisposables.add(toDisposable(() => {\n\t\tfor (const id of serviceIdentifiers) {\n\t\t\tconst instanceOrDescriptor = services.get(id);\n\t\t\tif (typeof instanceOrDescriptor.dispose === 'function') {\n\t\t\t\tinstanceOrDescriptor.dispose();\n\t\t\t}\n\t\t}\n\t}));\n\treturn instantiationService;\n}\n\nexport function createTestCodeEditor(model: ITextModel | undefined, options: TestCodeEditorInstantiationOptions = {}): ITestCodeEditor {\n\tconst disposables = new DisposableStore();\n\tconst instantiationService = createCodeEditorServices(disposables, options.serviceCollection);\n\tdelete options.serviceCollection;\n\n\tconst editor = instantiateTestCodeEditor(instantiationService, model || null, options);\n\teditor.registerDisposable(disposables);\n\treturn editor;\n}\n\nexport function instantiateTestCodeEditor(instantiationService: IInstantiationService, model: ITextModel | null, options: TestCodeEditorCreationOptions = {}): ITestCodeEditor {\n\tconst codeEditorWidgetOptions: ICodeEditorWidgetOptions = {\n\t\tcontributions: []\n\t};\n\tconst editor = instantiationService.createInstance(\n\t\tTestCodeEditor,\n\t\t<HTMLElement><any>new TestEditorDomElement(),\n\t\toptions,\n\t\tcodeEditorWidgetOptions\n\t);\n\tif (typeof options.hasTextFocus === 'undefined') {\n\t\toptions.hasTextFocus = true;\n\t}\n\teditor.setHasTextFocus(options.hasTextFocus);\n\teditor.setModel(model);\n\tconst viewModel = editor.getViewModel();\n\tviewModel?.setHasFocus(options.hasTextFocus);\n\treturn <ITestCodeEditor>editor;\n}\n"]}