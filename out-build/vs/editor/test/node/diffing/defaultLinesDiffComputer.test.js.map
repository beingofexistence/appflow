{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/test/node/diffing/defaultLinesDiffComputer.test.ts"],"names":[],"mappings":"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","file":"defaultLinesDiffComputer.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Range } from 'vs/editor/common/core/range';\nimport { RangeMapping } from 'vs/editor/common/diff/rangeMapping';\nimport { OffsetRange } from 'vs/editor/common/core/offsetRange';\nimport { getLineRangeMapping } from 'vs/editor/common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer';\nimport { LinesSliceCharSequence } from 'vs/editor/common/diff/defaultLinesDiffComputer/linesSliceCharSequence';\nimport { MyersDiffAlgorithm } from 'vs/editor/common/diff/defaultLinesDiffComputer/algorithms/myersDiffAlgorithm';\nimport { DynamicProgrammingDiffing } from 'vs/editor/common/diff/defaultLinesDiffComputer/algorithms/dynamicProgrammingDiffing';\n\nsuite('myers', () => {\n\ttest('1', () => {\n\t\tconst s1 = new LinesSliceCharSequence(['hello world'], new OffsetRange(0, 1), true);\n\t\tconst s2 = new LinesSliceCharSequence(['hallo welt'], new OffsetRange(0, 1), true);\n\n\t\tconst a = true ? new MyersDiffAlgorithm() : new DynamicProgrammingDiffing();\n\t\ta.compute(s1, s2);\n\t});\n});\n\nsuite('lineRangeMapping', () => {\n\ttest('Simple', () => {\n\t\tassert.deepStrictEqual(\n\t\t\tgetLineRangeMapping(\n\t\t\t\tnew RangeMapping(\n\t\t\t\t\tnew Range(2, 1, 3, 1),\n\t\t\t\t\tnew Range(2, 1, 2, 1)\n\t\t\t\t),\n\t\t\t\t[\n\t\t\t\t\t'const abc = \"helloworld\".split(\"\");',\n\t\t\t\t\t'',\n\t\t\t\t\t''\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'const asciiLower = \"helloworld\".split(\"\");',\n\t\t\t\t\t''\n\t\t\t\t]\n\t\t\t).toString(),\n\t\t\t\"{[2,3)->[2,2)}\"\n\t\t);\n\t});\n\n\ttest('Empty Lines', () => {\n\t\tassert.deepStrictEqual(\n\t\t\tgetLineRangeMapping(\n\t\t\t\tnew RangeMapping(\n\t\t\t\t\tnew Range(2, 1, 2, 1),\n\t\t\t\t\tnew Range(2, 1, 4, 1),\n\t\t\t\t),\n\t\t\t\t[\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t]\n\t\t\t).toString(),\n\t\t\t\"{[2,2)->[2,4)}\"\n\t\t);\n\t});\n});\n\nsuite('LinesSliceCharSequence', () => {\n\tconst sequence = new LinesSliceCharSequence(\n\t\t[\n\t\t\t'line1: foo',\n\t\t\t'line2: fizzbuzz',\n\t\t\t'line3: barr',\n\t\t\t'line4: hello world',\n\t\t\t'line5: bazz',\n\t\t],\n\t\tnew OffsetRange(1, 4), true\n\t);\n\n\ttest('translateOffset', () => {\n\t\tassert.deepStrictEqual(\n\t\t\t{ result: OffsetRange.ofLength(sequence.length).map(offset => sequence.translateOffset(offset).toString()) },\n\t\t\t({\n\t\t\t\tresult: [\n\t\t\t\t\t\"(2,1)\", \"(2,2)\", \"(2,3)\", \"(2,4)\", \"(2,5)\", \"(2,6)\", \"(2,7)\", \"(2,8)\", \"(2,9)\", \"(2,10)\", \"(2,11)\",\n\t\t\t\t\t\"(2,12)\", \"(2,13)\", \"(2,14)\", \"(2,15)\", \"(2,16)\",\n\n\t\t\t\t\t\"(3,1)\", \"(3,2)\", \"(3,3)\", \"(3,4)\", \"(3,5)\", \"(3,6)\", \"(3,7)\", \"(3,8)\", \"(3,9)\", \"(3,10)\", \"(3,11)\", \"(3,12)\",\n\n\t\t\t\t\t\"(4,1)\", \"(4,2)\", \"(4,3)\", \"(4,4)\", \"(4,5)\", \"(4,6)\", \"(4,7)\", \"(4,8)\", \"(4,9)\",\n\t\t\t\t\t\"(4,10)\", \"(4,11)\", \"(4,12)\", \"(4,13)\", \"(4,14)\", \"(4,15)\", \"(4,16)\", \"(4,17)\",\n\t\t\t\t\t\"(4,18)\", \"(4,19)\"\n\t\t\t\t]\n\t\t\t})\n\t\t);\n\t});\n\n\ttest('extendToFullLines', () => {\n\t\tassert.deepStrictEqual(\n\t\t\t{ result: sequence.getText(sequence.extendToFullLines(new OffsetRange(20, 25))) },\n\t\t\t({ result: \"line3: barr\\n\" })\n\t\t);\n\n\t\tassert.deepStrictEqual(\n\t\t\t{ result: sequence.getText(sequence.extendToFullLines(new OffsetRange(20, 45))) },\n\t\t\t({ result: \"line3: barr\\nline4: hello world\\n\" })\n\t\t);\n\t});\n});\n"]}