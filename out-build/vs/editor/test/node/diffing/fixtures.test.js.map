{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/test/node/diffing/fixtures.test.ts"],"names":[],"mappings":"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","file":"fixtures.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { existsSync, readFileSync, readdirSync, rmSync, writeFileSync } from 'fs';\nimport { join, resolve } from 'path';\nimport { setUnexpectedErrorHandler } from 'vs/base/common/errors';\nimport { FileAccess } from 'vs/base/common/network';\nimport { DetailedLineRangeMapping } from 'vs/editor/common/diff/rangeMapping';\nimport { LegacyLinesDiffComputer } from 'vs/editor/common/diff/legacyLinesDiffComputer';\nimport { DefaultLinesDiffComputer } from 'vs/editor/common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer';\n\nsuite('diffing fixtures', () => {\n\tsetup(() => {\n\t\tsetUnexpectedErrorHandler(e => {\n\t\t\tthrow e;\n\t\t});\n\t});\n\n\n\tconst fixturesOutDir = FileAccess.asFileUri('vs/editor/test/node/diffing/fixtures').fsPath;\n\t// We want the dir in src, so we can directly update the source files if they disagree and create invalid files to capture the previous state.\n\t// This makes it very easy to update the fixtures.\n\tconst fixturesSrcDir = resolve(fixturesOutDir).replaceAll('\\\\', '/').replace('/out/vs/editor/', '/src/vs/editor/');\n\tconst folders = readdirSync(fixturesSrcDir);\n\n\tfunction runTest(folder: string, diffingAlgoName: 'legacy' | 'advanced') {\n\t\tconst folderPath = join(fixturesSrcDir, folder);\n\t\tconst files = readdirSync(folderPath);\n\n\t\tconst firstFileName = files.find(f => f.startsWith('1.'))!;\n\t\tconst secondFileName = files.find(f => f.startsWith('2.'))!;\n\n\t\tconst firstContent = readFileSync(join(folderPath, firstFileName), 'utf8').replaceAll('\\r\\n', '\\n').replaceAll('\\r', '\\n');\n\t\tconst firstContentLines = firstContent.split(/\\n/);\n\t\tconst secondContent = readFileSync(join(folderPath, secondFileName), 'utf8').replaceAll('\\r\\n', '\\n').replaceAll('\\r', '\\n');\n\t\tconst secondContentLines = secondContent.split(/\\n/);\n\n\t\tconst diffingAlgo = diffingAlgoName === 'legacy' ? new LegacyLinesDiffComputer() : new DefaultLinesDiffComputer();\n\n\t\tconst ignoreTrimWhitespace = folder.indexOf('trimws') >= 0;\n\t\tconst diff = diffingAlgo.computeDiff(firstContentLines, secondContentLines, { ignoreTrimWhitespace, maxComputationTimeMs: Number.MAX_SAFE_INTEGER, computeMoves: false });\n\n\t\tfunction getDiffs(changes: readonly DetailedLineRangeMapping[]): IDetailedDiff[] {\n\t\t\treturn changes.map<IDetailedDiff>(c => ({\n\t\t\t\toriginalRange: c.original.toString(),\n\t\t\t\tmodifiedRange: c.modified.toString(),\n\t\t\t\tinnerChanges: c.innerChanges?.map<IDiff>(c => ({\n\t\t\t\t\toriginalRange: c.originalRange.toString(),\n\t\t\t\t\tmodifiedRange: c.modifiedRange.toString(),\n\t\t\t\t})) || null\n\t\t\t}));\n\t\t}\n\n\t\tconst actualDiffingResult: DiffingResult = {\n\t\t\toriginal: { content: firstContent, fileName: `./${firstFileName}` },\n\t\t\tmodified: { content: secondContent, fileName: `./${secondFileName}` },\n\t\t\tdiffs: getDiffs(diff.changes),\n\t\t\tmoves: diff.moves.map(v => ({\n\t\t\t\toriginalRange: v.lineRangeMapping.original.toString(),\n\t\t\t\tmodifiedRange: v.lineRangeMapping.modified.toString(),\n\t\t\t\tchanges: getDiffs(v.changes),\n\t\t\t}))\n\t\t};\n\t\tif (actualDiffingResult.moves?.length === 0) {\n\t\t\tdelete actualDiffingResult.moves;\n\t\t}\n\n\t\tconst expectedFilePath = join(folderPath, `${diffingAlgoName}.expected.diff.json`);\n\t\tconst invalidFilePath = join(folderPath, `${diffingAlgoName}.invalid.diff.json`);\n\n\t\tconst actualJsonStr = JSON.stringify(actualDiffingResult, null, '\\t');\n\n\t\tif (!existsSync(expectedFilePath)) {\n\t\t\t// New test, create expected file\n\t\t\twriteFileSync(expectedFilePath, actualJsonStr);\n\t\t\t// Create invalid file so that this test fails on a re-run\n\t\t\twriteFileSync(invalidFilePath, '');\n\t\t\tthrow new Error('No expected file! Expected and invalid files were written. Delete the invalid file to make the test pass.');\n\t\t} if (existsSync(invalidFilePath)) {\n\t\t\tconst invalidJsonStr = readFileSync(invalidFilePath, 'utf8');\n\t\t\tif (invalidJsonStr === '') {\n\t\t\t\t// Update expected file\n\t\t\t\twriteFileSync(expectedFilePath, actualJsonStr);\n\t\t\t\tthrow new Error(`Delete the invalid ${invalidFilePath} file to make the test pass.`);\n\t\t\t} else {\n\t\t\t\tconst expectedFileDiffResult: DiffingResult = JSON.parse(invalidJsonStr);\n\t\t\t\ttry {\n\t\t\t\t\tassert.deepStrictEqual(actualDiffingResult, expectedFileDiffResult);\n\t\t\t\t} catch (e) {\n\t\t\t\t\twriteFileSync(expectedFilePath, actualJsonStr);\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t\t// Test succeeded with the invalid file, restore expected file from invalid\n\t\t\t\twriteFileSync(expectedFilePath, invalidJsonStr);\n\t\t\t\trmSync(invalidFilePath);\n\t\t\t}\n\t\t} else {\n\t\t\tconst expectedJsonStr = readFileSync(expectedFilePath, 'utf8');\n\t\t\tconst expectedFileDiffResult: DiffingResult = JSON.parse(expectedJsonStr);\n\t\t\ttry {\n\t\t\t\tassert.deepStrictEqual(actualDiffingResult, expectedFileDiffResult);\n\t\t\t} catch (e) {\n\t\t\t\t// Backup expected file\n\t\t\t\twriteFileSync(invalidFilePath, expectedJsonStr);\n\t\t\t\t// Update expected file\n\t\t\t\twriteFileSync(expectedFilePath, actualJsonStr);\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\ttest(`test`, () => {\n\t\trunTest('invalid-diff-trimws', 'advanced');\n\t});\n\n\tfor (const folder of folders) {\n\t\tfor (const diffingAlgoName of ['legacy', 'advanced'] as const) {\n\t\t\ttest(`${folder}-${diffingAlgoName}`, () => {\n\t\t\t\trunTest(folder, diffingAlgoName);\n\t\t\t});\n\t\t}\n\t}\n});\n\ninterface DiffingResult {\n\toriginal: { content: string; fileName: string };\n\tmodified: { content: string; fileName: string };\n\n\tdiffs: IDetailedDiff[];\n\tmoves?: IMoveInfo[];\n}\n\ninterface IDetailedDiff {\n\toriginalRange: string; // [startLineNumber, endLineNumberExclusive)\n\tmodifiedRange: string; // [startLineNumber, endLineNumberExclusive)\n\tinnerChanges: IDiff[] | null;\n}\n\ninterface IDiff {\n\toriginalRange: string; // [1,18 -> 1,19]\n\tmodifiedRange: string; // [1,18 -> 1,19]\n}\n\ninterface IMoveInfo {\n\toriginalRange: string; // [startLineNumber, endLineNumberExclusive)\n\tmodifiedRange: string; // [startLineNumber, endLineNumberExclusive)\n\n\tchanges?: IDetailedDiff[];\n}\n"]}