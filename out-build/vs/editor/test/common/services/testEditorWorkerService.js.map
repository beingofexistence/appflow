{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/test/common/services/testEditorWorkerService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAShG,MAAa,IAAI;QAIhB,2BAA2B,CAAC,GAAQ,IAAa,OAAO,KAAK,CAAC,CAAC,CAAC;QAChE,KAAK,CAAC,yBAAyB,CAAC,GAAQ,IAAuC,OAAO,EAAE,MAAM,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,uBAAuB,EAAE,CAAC,EAAE,uBAAuB,EAAE,CAAC,EAAE,2BAA2B,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAC/M,KAAK,CAAC,WAAW,CAAC,QAAa,EAAE,QAAa,EAAE,OAAqC,EAAE,SAA4B,IAAmC,OAAO,IAAI,CAAC,CAAC,CAAC;QACpK,mBAAmB,CAAC,QAAa,EAAE,QAAa,IAAa,OAAO,KAAK,CAAC,CAAC,CAAC;QAC5E,KAAK,CAAC,gBAAgB,CAAC,QAAa,EAAE,QAAa,EAAE,oBAA6B,IAA+B,OAAO,IAAI,CAAC,CAAC,CAAC;QAC/H,KAAK,CAAC,uBAAuB,CAAC,QAAa,EAAE,KAAoC,IAAqC,OAAO,SAAS,CAAC,CAAC,CAAC;QACzI,KAAK,CAAC,wBAAwB,CAAC,QAAa,EAAE,KAAoC,IAAqC,OAAO,SAAS,CAAC,CAAC,CAAC;QAC1I,oBAAoB,CAAC,QAAa,IAAa,OAAO,KAAK,CAAC,CAAC,CAAC;QAC9D,KAAK,CAAC,iBAAiB,CAAC,QAAa,EAAE,KAAa,IAAkD,OAAO,IAAI,CAAC,CAAC,CAAC;QACpH,mBAAmB,CAAC,QAAa,IAAa,OAAO,KAAK,CAAC,CAAC,CAAC;QAC7D,KAAK,CAAC,gBAAgB,CAAC,QAAa,EAAE,KAAa,EAAE,EAAW,IAAkD,OAAO,IAAI,CAAC,CAAC,CAAC;KAChI;IAfD,oBAeC","file":"testEditorWorkerService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { IRange } from 'vs/editor/common/core/range';\nimport { DiffAlgorithmName, IEditorWorkerService, IUnicodeHighlightsResult } from 'vs/editor/common/services/editorWorker';\nimport { TextEdit, IInplaceReplaceSupportResult } from 'vs/editor/common/languages';\nimport { IDocumentDiff, IDocumentDiffProviderOptions } from 'vs/editor/common/diff/documentDiffProvider';\nimport { IChange } from 'vs/editor/common/diff/legacyLinesDiffComputer';\n\nexport class TestEditorWorkerService implements IEditorWorkerService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tcanComputeUnicodeHighlights(uri: URI): boolean { return false; }\n\tasync computedUnicodeHighlights(uri: URI): Promise<IUnicodeHighlightsResult> { return { ranges: [], hasMore: false, ambiguousCharacterCount: 0, invisibleCharacterCount: 0, nonBasicAsciiCharacterCount: 0 }; }\n\tasync computeDiff(original: URI, modified: URI, options: IDocumentDiffProviderOptions, algorithm: DiffAlgorithmName): Promise<IDocumentDiff | null> { return null; }\n\tcanComputeDirtyDiff(original: URI, modified: URI): boolean { return false; }\n\tasync computeDirtyDiff(original: URI, modified: URI, ignoreTrimWhitespace: boolean): Promise<IChange[] | null> { return null; }\n\tasync computeMoreMinimalEdits(resource: URI, edits: TextEdit[] | null | undefined): Promise<TextEdit[] | undefined> { return undefined; }\n\tasync computeHumanReadableDiff(resource: URI, edits: TextEdit[] | null | undefined): Promise<TextEdit[] | undefined> { return undefined; }\n\tcanComputeWordRanges(resource: URI): boolean { return false; }\n\tasync computeWordRanges(resource: URI, range: IRange): Promise<{ [word: string]: IRange[] } | null> { return null; }\n\tcanNavigateValueSet(resource: URI): boolean { return false; }\n\tasync navigateValueSet(resource: URI, range: IRange, up: boolean): Promise<IInplaceReplaceSupportResult | null> { return null; }\n}\n"]}