{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/test/common/services/editorSimpleWorker.test.ts"],"names":[],"mappings":"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","file":"editorSimpleWorker.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { Position } from 'vs/editor/common/core/position';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { TextEdit } from 'vs/editor/common/languages';\nimport { EditorSimpleWorker, ICommonModel } from 'vs/editor/common/services/editorSimpleWorker';\nimport { IEditorWorkerHost } from 'vs/editor/common/services/editorWorkerHost';\n\nsuite('EditorSimpleWorker', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tclass WorkerWithModels extends EditorSimpleWorker {\n\n\t\tgetModel(uri: string) {\n\t\t\treturn this._getModel(uri);\n\t\t}\n\n\t\taddModel(lines: string[], eol: string = '\\n') {\n\t\t\tconst uri = 'test:file#' + Date.now();\n\t\t\tthis.acceptNewModel({\n\t\t\t\turl: uri,\n\t\t\t\tversionId: 1,\n\t\t\t\tlines: lines,\n\t\t\t\tEOL: eol\n\t\t\t});\n\t\t\treturn this._getModel(uri);\n\t\t}\n\t}\n\n\tlet worker: WorkerWithModels;\n\tlet model: ICommonModel;\n\n\tsetup(() => {\n\t\tworker = new WorkerWithModels(<IEditorWorkerHost>null!, null);\n\t\tmodel = worker.addModel([\n\t\t\t'This is line one', //16\n\t\t\t'and this is line number two', //27\n\t\t\t'it is followed by #3', //20\n\t\t\t'and finished with the fourth.', //29\n\t\t]);\n\t});\n\n\tfunction assertPositionAt(offset: number, line: number, column: number) {\n\t\tconst position = model.positionAt(offset);\n\t\tassert.strictEqual(position.lineNumber, line);\n\t\tassert.strictEqual(position.column, column);\n\t}\n\n\tfunction assertOffsetAt(lineNumber: number, column: number, offset: number) {\n\t\tconst actual = model.offsetAt({ lineNumber, column });\n\t\tassert.strictEqual(actual, offset);\n\t}\n\n\ttest('ICommonModel#offsetAt', () => {\n\t\tassertOffsetAt(1, 1, 0);\n\t\tassertOffsetAt(1, 2, 1);\n\t\tassertOffsetAt(1, 17, 16);\n\t\tassertOffsetAt(2, 1, 17);\n\t\tassertOffsetAt(2, 4, 20);\n\t\tassertOffsetAt(3, 1, 45);\n\t\tassertOffsetAt(5, 30, 95);\n\t\tassertOffsetAt(5, 31, 95);\n\t\tassertOffsetAt(5, Number.MAX_VALUE, 95);\n\t\tassertOffsetAt(6, 30, 95);\n\t\tassertOffsetAt(Number.MAX_VALUE, 30, 95);\n\t\tassertOffsetAt(Number.MAX_VALUE, Number.MAX_VALUE, 95);\n\t});\n\n\ttest('ICommonModel#positionAt', () => {\n\t\tassertPositionAt(0, 1, 1);\n\t\tassertPositionAt(Number.MIN_VALUE, 1, 1);\n\t\tassertPositionAt(1, 1, 2);\n\t\tassertPositionAt(16, 1, 17);\n\t\tassertPositionAt(17, 2, 1);\n\t\tassertPositionAt(20, 2, 4);\n\t\tassertPositionAt(45, 3, 1);\n\t\tassertPositionAt(95, 4, 30);\n\t\tassertPositionAt(96, 4, 30);\n\t\tassertPositionAt(99, 4, 30);\n\t\tassertPositionAt(Number.MAX_VALUE, 4, 30);\n\t});\n\n\ttest('ICommonModel#validatePosition, issue #15882', function () {\n\t\tconst model = worker.addModel(['{\"id\": \"0001\",\"type\": \"donut\",\"name\": \"Cake\",\"image\":{\"url\": \"images/0001.jpg\",\"width\": 200,\"height\": 200},\"thumbnail\":{\"url\": \"images/thumbnails/0001.jpg\",\"width\": 32,\"height\": 32}}']);\n\t\tassert.strictEqual(model.offsetAt({ lineNumber: 1, column: 2 }), 1);\n\t});\n\n\ttest('MoreMinimal', () => {\n\n\t\treturn worker.computeMoreMinimalEdits(model.uri.toString(), [{ text: 'This is line One', range: new Range(1, 1, 1, 17) }], false).then(edits => {\n\t\t\tassert.strictEqual(edits.length, 1);\n\t\t\tconst [first] = edits;\n\t\t\tassert.strictEqual(first.text, 'O');\n\t\t\tassert.deepStrictEqual(first.range, { startLineNumber: 1, startColumn: 14, endLineNumber: 1, endColumn: 15 });\n\t\t});\n\t});\n\n\ttest('MoreMinimal, merge adjacent edits', async function () {\n\n\t\tconst model = worker.addModel([\n\t\t\t'one',\n\t\t\t'two',\n\t\t\t'three',\n\t\t\t'four',\n\t\t\t'five'\n\t\t], '\\n');\n\n\n\t\tconst newEdits = await worker.computeMoreMinimalEdits(model.uri.toString(), [\n\t\t\t{\n\t\t\t\trange: new Range(1, 1, 2, 1),\n\t\t\t\ttext: 'one\\ntwo\\nthree\\n',\n\t\t\t}, {\n\t\t\t\trange: new Range(2, 1, 3, 1),\n\t\t\t\ttext: '',\n\t\t\t}, {\n\t\t\t\trange: new Range(3, 1, 4, 1),\n\t\t\t\ttext: '',\n\t\t\t}, {\n\t\t\t\trange: new Range(4, 2, 4, 3),\n\t\t\t\ttext: '4',\n\t\t\t}, {\n\t\t\t\trange: new Range(5, 3, 5, 5),\n\t\t\t\ttext: '5',\n\t\t\t}\n\t\t], false);\n\n\t\tassert.strictEqual(newEdits.length, 2);\n\t\tassert.strictEqual(newEdits[0].text, '4');\n\t\tassert.strictEqual(newEdits[1].text, '5');\n\t});\n\n\ttest('MoreMinimal, issue #15385 newline changes only', function () {\n\n\t\tconst model = worker.addModel([\n\t\t\t'{',\n\t\t\t'\\t\"a\":1',\n\t\t\t'}'\n\t\t], '\\n');\n\n\t\treturn worker.computeMoreMinimalEdits(model.uri.toString(), [{ text: '{\\r\\n\\t\"a\":1\\r\\n}', range: new Range(1, 1, 3, 2) }], false).then(edits => {\n\t\t\tassert.strictEqual(edits.length, 0);\n\t\t});\n\t});\n\n\ttest('MoreMinimal, issue #15385 newline changes and other', function () {\n\n\t\tconst model = worker.addModel([\n\t\t\t'{',\n\t\t\t'\\t\"a\":1',\n\t\t\t'}'\n\t\t], '\\n');\n\n\t\treturn worker.computeMoreMinimalEdits(model.uri.toString(), [{ text: '{\\r\\n\\t\"b\":1\\r\\n}', range: new Range(1, 1, 3, 2) }], false).then(edits => {\n\t\t\tassert.strictEqual(edits.length, 1);\n\t\t\tconst [first] = edits;\n\t\t\tassert.strictEqual(first.text, 'b');\n\t\t\tassert.deepStrictEqual(first.range, { startLineNumber: 2, startColumn: 3, endLineNumber: 2, endColumn: 4 });\n\t\t});\n\t});\n\n\ttest('MoreMinimal, issue #15385 newline changes and other 2/2', function () {\n\n\t\tconst model = worker.addModel([\n\t\t\t'package main',\t// 1\n\t\t\t'func foo() {',\t// 2\n\t\t\t'}'\t\t\t\t// 3\n\t\t]);\n\n\t\treturn worker.computeMoreMinimalEdits(model.uri.toString(), [{ text: '\\n', range: new Range(3, 2, 4, 1000) }], false).then(edits => {\n\t\t\tassert.strictEqual(edits.length, 1);\n\t\t\tconst [first] = edits;\n\t\t\tassert.strictEqual(first.text, '\\n');\n\t\t\tassert.deepStrictEqual(first.range, { startLineNumber: 3, startColumn: 2, endLineNumber: 3, endColumn: 2 });\n\t\t});\n\t});\n\n\tasync function testEdits(lines: string[], edits: TextEdit[]): Promise<unknown> {\n\t\tconst model = worker.addModel(lines);\n\n\t\tconst smallerEdits = await worker.computeHumanReadableDiff(\n\t\t\tmodel.uri.toString(),\n\t\t\tedits,\n\t\t\t{ ignoreTrimWhitespace: false, maxComputationTimeMs: 0, computeMoves: false }\n\t\t);\n\n\t\tconst t1 = applyEdits(model.getValue(), edits);\n\t\tconst t2 = applyEdits(model.getValue(), smallerEdits);\n\t\tassert.deepStrictEqual(t1, t2);\n\n\t\treturn smallerEdits.map(e => ({ range: Range.lift(e.range).toString(), text: e.text }));\n\t}\n\n\n\ttest('computeHumanReadableDiff 1', async () => {\n\t\tassert.deepStrictEqual(\n\t\t\tawait testEdits(\n\t\t\t\t[\n\t\t\t\t\t'function test() {}'\n\t\t\t\t],\n\t\t\t\t[{\n\t\t\t\t\ttext: \"\\n/** Some Comment */\\n\",\n\t\t\t\t\trange: new Range(1, 1, 1, 1)\n\t\t\t\t}]),\n\t\t\t([{ range: \"[1,1 -> 1,1]\", text: \"\\n/** Some Comment */\\n\" }])\n\t\t);\n\t});\n\n\ttest('computeHumanReadableDiff 2', async () => {\n\t\tassert.deepStrictEqual(\n\t\t\tawait testEdits(\n\t\t\t\t[\n\t\t\t\t\t'function test() {}'\n\t\t\t\t],\n\t\t\t\t[{\n\t\t\t\t\ttext: 'function test(myParam: number) { console.log(myParam); }',\n\t\t\t\t\trange: new Range(1, 1, 1, Number.MAX_SAFE_INTEGER)\n\t\t\t\t}]),\n\t\t\t([{ range: '[1,15 -> 1,15]', text: 'myParam: number' }, { range: '[1,18 -> 1,18]', text: ' console.log(myParam); ' }])\n\t\t);\n\t});\n\n\ttest('computeHumanReadableDiff 3', async () => {\n\t\tassert.deepStrictEqual(\n\t\t\tawait testEdits(\n\t\t\t\t[\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t''\n\t\t\t\t],\n\t\t\t\t[{\n\t\t\t\t\ttext: 'function test(myParam: number) { console.log(myParam); }\\n\\n',\n\t\t\t\t\trange: new Range(2, 1, 3, 20)\n\t\t\t\t}]),\n\t\t\t([{ range: '[2,1 -> 2,1]', text: 'function test(myParam: number) { console.log(myParam); }\\n' }])\n\t\t);\n\t});\n\n\ttest('computeHumanReadableDiff 4', async () => {\n\t\tassert.deepStrictEqual(\n\t\t\tawait testEdits(\n\t\t\t\t[\n\t\t\t\t\t'function algorithm() {}',\n\t\t\t\t],\n\t\t\t\t[{\n\t\t\t\t\ttext: 'function alm() {}',\n\t\t\t\t\trange: new Range(1, 1, 1, Number.MAX_SAFE_INTEGER)\n\t\t\t\t}]),\n\t\t\t([{ range: \"[1,10 -> 1,19]\", text: \"alm\" }])\n\t\t);\n\t});\n\n\ttest('[Bug] Getting Message \"Overlapping ranges are not allowed\" and nothing happens with Inline-Chat ', async function () {\n\t\tawait testEdits((\"const API = require('../src/api');\\n\\ndescribe('API', () => {\\n  let api;\\n  let database;\\n\\n  beforeAll(() => {\\n    database = {\\n      getAllBooks: jest.fn(),\\n      getBooksByAuthor: jest.fn(),\\n      getBooksByTitle: jest.fn(),\\n    };\\n    api = new API(database);\\n  });\\n\\n  describe('GET /books', () => {\\n    it('should return all books', async () => {\\n      const mockBooks = [{ title: 'Book 1' }, { title: 'Book 2' }];\\n      database.getAllBooks.mockResolvedValue(mockBooks);\\n\\n      const req = {};\\n      const res = {\\n        json: jest.fn(),\\n      };\\n\\n      await api.register({\\n        get: (path, handler) => {\\n          if (path === '/books') {\\n            handler(req, res);\\n          }\\n        },\\n      });\\n\\n      expect(database.getAllBooks).toHaveBeenCalled();\\n      expect(res.json).toHaveBeenCalledWith(mockBooks);\\n    });\\n  });\\n\\n  describe('GET /books/author/:author', () => {\\n    it('should return books by author', async () => {\\n      const mockAuthor = 'John Doe';\\n      const mockBooks = [{ title: 'Book 1', author: mockAuthor }, { title: 'Book 2', author: mockAuthor }];\\n      database.getBooksByAuthor.mockResolvedValue(mockBooks);\\n\\n      const req = {\\n        params: {\\n          author: mockAuthor,\\n        },\\n      };\\n      const res = {\\n        json: jest.fn(),\\n      };\\n\\n      await api.register({\\n        get: (path, handler) => {\\n          if (path === `/books/author/${mockAuthor}`) {\\n            handler(req, res);\\n          }\\n        },\\n      });\\n\\n      expect(database.getBooksByAuthor).toHaveBeenCalledWith(mockAuthor);\\n      expect(res.json).toHaveBeenCalledWith(mockBooks);\\n    });\\n  });\\n\\n  describe('GET /books/title/:title', () => {\\n    it('should return books by title', async () => {\\n      const mockTitle = 'Book 1';\\n      const mockBooks = [{ title: mockTitle, author: 'John Doe' }];\\n      database.getBooksByTitle.mockResolvedValue(mockBooks);\\n\\n      const req = {\\n        params: {\\n          title: mockTitle,\\n        },\\n      };\\n      const res = {\\n        json: jest.fn(),\\n      };\\n\\n      await api.register({\\n        get: (path, handler) => {\\n          if (path === `/books/title/${mockTitle}`) {\\n            handler(req, res);\\n          }\\n        },\\n      });\\n\\n      expect(database.getBooksByTitle).toHaveBeenCalledWith(mockTitle);\\n      expect(res.json).toHaveBeenCalledWith(mockBooks);\\n    });\\n  });\\n});\\n\").split('\\n'),\n\t\t\t[{\n\t\t\t\trange: { startLineNumber: 1, startColumn: 1, endLineNumber: 96, endColumn: 1 },\n\t\t\t\ttext: `const request = require('supertest');\\nconst API = require('../src/api');\\n\\ndescribe('API', () => {\\n  let api;\\n  let database;\\n\\n  beforeAll(() => {\\n    database = {\\n      getAllBooks: jest.fn(),\\n      getBooksByAuthor: jest.fn(),\\n      getBooksByTitle: jest.fn(),\\n    };\\n    api = new API(database);\\n  });\\n\\n  describe('GET /books', () => {\\n    it('should return all books', async () => {\\n      const mockBooks = [{ title: 'Book 1' }, { title: 'Book 2' }];\\n      database.getAllBooks.mockResolvedValue(mockBooks);\\n\\n      const response = await request(api.app).get('/books');\\n\\n      expect(database.getAllBooks).toHaveBeenCalled();\\n      expect(response.status).toBe(200);\\n      expect(response.body).toEqual(mockBooks);\\n    });\\n  });\\n\\n  describe('GET /books/author/:author', () => {\\n    it('should return books by author', async () => {\\n      const mockAuthor = 'John Doe';\\n      const mockBooks = [{ title: 'Book 1', author: mockAuthor }, { title: 'Book 2', author: mockAuthor }];\\n      database.getBooksByAuthor.mockResolvedValue(mockBooks);\\n\\n      const response = await request(api.app).get(\\`/books/author/\\${mockAuthor}\\`);\\n\\n      expect(database.getBooksByAuthor).toHaveBeenCalledWith(mockAuthor);\\n      expect(response.status).toBe(200);\\n      expect(response.body).toEqual(mockBooks);\\n    });\\n  });\\n\\n  describe('GET /books/title/:title', () => {\\n    it('should return books by title', async () => {\\n      const mockTitle = 'Book 1';\\n      const mockBooks = [{ title: mockTitle, author: 'John Doe' }];\\n      database.getBooksByTitle.mockResolvedValue(mockBooks);\\n\\n      const response = await request(api.app).get(\\`/books/title/\\${mockTitle}\\`);\\n\\n      expect(database.getBooksByTitle).toHaveBeenCalledWith(mockTitle);\\n      expect(response.status).toBe(200);\\n      expect(response.body).toEqual(mockBooks);\\n    });\\n  });\\n});\\n`,\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('ICommonModel#getValueInRange, issue #17424', function () {\n\n\t\tconst model = worker.addModel([\n\t\t\t'package main',\t// 1\n\t\t\t'func foo() {',\t// 2\n\t\t\t'}'\t\t\t\t// 3\n\t\t]);\n\n\t\tconst value = model.getValueInRange({ startLineNumber: 3, startColumn: 1, endLineNumber: 4, endColumn: 1 });\n\t\tassert.strictEqual(value, '}');\n\t});\n\n\n\ttest('textualSuggest, issue #17785', function () {\n\n\t\tconst model = worker.addModel([\n\t\t\t'foobar',\t// 1\n\t\t\t'f f'\t// 2\n\t\t]);\n\n\t\treturn worker.textualSuggest([model.uri.toString()], 'f', '[a-z]+', 'img').then((result) => {\n\t\t\tif (!result) {\n\t\t\t\tassert.ok(false);\n\t\t\t}\n\t\t\tassert.strictEqual(result.words.length, 1);\n\t\t\tassert.strictEqual(typeof result.duration, 'number');\n\t\t\tassert.strictEqual(result.words[0], 'foobar');\n\t\t});\n\t});\n\n\ttest('get words via iterator, issue #46930', function () {\n\n\t\tconst model = worker.addModel([\n\t\t\t'one line',\t// 1\n\t\t\t'two line',\t// 2\n\t\t\t'',\n\t\t\t'past empty',\n\t\t\t'single',\n\t\t\t'',\n\t\t\t'and now we are done'\n\t\t]);\n\n\t\tconst words: string[] = [...model.words(/[a-z]+/img)];\n\n\t\tassert.deepStrictEqual(words, ['one', 'line', 'two', 'line', 'past', 'empty', 'single', 'and', 'now', 'we', 'are', 'done']);\n\t});\n});\n\nfunction applyEdits(text: string, edits: { range: IRange; text: string }[]): string {\n\tconst transformer = new PositionOffsetTransformer(text);\n\tconst offsetEdits = edits.map(e => {\n\t\tconst range = Range.lift(e.range);\n\t\treturn ({\n\t\t\tstartOffset: transformer.getOffset(range.getStartPosition()),\n\t\t\tendOffset: transformer.getOffset(range.getEndPosition()),\n\t\t\ttext: e.text\n\t\t});\n\t});\n\n\toffsetEdits.sort((a, b) => b.startOffset - a.startOffset);\n\n\tfor (const edit of offsetEdits) {\n\t\ttext = text.substring(0, edit.startOffset) + edit.text + text.substring(edit.endOffset);\n\t}\n\n\treturn text;\n}\n\nclass PositionOffsetTransformer {\n\tprivate readonly lineStartOffsetByLineIdx: number[];\n\n\tconstructor(private readonly text: string) {\n\t\tthis.lineStartOffsetByLineIdx = [];\n\t\tthis.lineStartOffsetByLineIdx.push(0);\n\t\tfor (let i = 0; i < text.length; i++) {\n\t\t\tif (text.charAt(i) === '\\n') {\n\t\t\t\tthis.lineStartOffsetByLineIdx.push(i + 1);\n\t\t\t}\n\t\t}\n\t\tthis.lineStartOffsetByLineIdx.push(text.length + 1);\n\t}\n\n\tgetOffset(position: Position): number {\n\t\tconst maxLineOffset = position.lineNumber >= this.lineStartOffsetByLineIdx.length ? this.text.length : (this.lineStartOffsetByLineIdx[position.lineNumber] - 1);\n\t\treturn Math.min(this.lineStartOffsetByLineIdx[position.lineNumber - 1] + position.column - 1, maxLineOffset);\n\t}\n}\n"]}