{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/test/common/modesTestUtils.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAYhG,SAAgB,IAAI,CAAuB,SAAsB;QAChE,MAAM,MAAM,GAAG,IAAI,WAAW,CAAC,SAAS,CAAC,MAAM,IAAI,CAAC,CAAC,CAAC;QACtD,IAAI,IAAI,GAAG,EAAE,CAAC;QAEd,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;YACrD,MAAM,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAE9B,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC;YAChC,MAAM,QAAQ,GAAG,CAChB,CAAC,QAAQ,CAAC,IAAI,4CAAoC,CAAC,CACnD,KAAK,CAAC,CAAC;YAER,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,WAAW,CAAC;YAC/B,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,QAAQ,CAAC;YAChC,IAAI,IAAI,QAAQ,CAAC,IAAI,CAAC;SACtB;QAED,gBAAG,CAAQ,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;QACnD,OAAO,IAAA,cAAG,EAAoB,IAAI,gBAAG,CAAQ,MAAM,EAAE,IAAI,EAAE,IAAI,wBAAI,EAAa,CAAC,EAAE,CAAC,CAAC,CAAC;IACvF,CAAC;IAnBD,oBAmBC","file":"modesTestUtils.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { LineTokens } from 'vs/editor/common/tokens/lineTokens';\nimport { StandardTokenType, MetadataConsts } from 'vs/editor/common/encodedTokenAttributes';\nimport { ScopedLineTokens, createScopedLineTokens } from 'vs/editor/common/languages/supports';\nimport { LanguageIdCodec } from 'vs/editor/common/services/languagesRegistry';\n\nexport interface TokenText {\n\ttext: string;\n\ttype: StandardTokenType;\n}\n\nexport function createFakeScopedLineTokens(rawTokens: TokenText[]): ScopedLineTokens {\n\tconst tokens = new Uint32Array(rawTokens.length << 1);\n\tlet line = '';\n\n\tfor (let i = 0, len = rawTokens.length; i < len; i++) {\n\t\tconst rawToken = rawTokens[i];\n\n\t\tconst startOffset = line.length;\n\t\tconst metadata = (\n\t\t\t(rawToken.type << MetadataConsts.TOKEN_TYPE_OFFSET)\n\t\t) >>> 0;\n\n\t\ttokens[(i << 1)] = startOffset;\n\t\ttokens[(i << 1) + 1] = metadata;\n\t\tline += rawToken.text;\n\t}\n\n\tLineTokens.convertToEndOffset(tokens, line.length);\n\treturn createScopedLineTokens(new LineTokens(tokens, line, new LanguageIdCodec()), 0);\n}\n"]}