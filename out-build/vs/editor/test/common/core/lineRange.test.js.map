{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/test/common/core/lineRange.test.ts"],"names":[],"mappings":"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","file":"lineRange.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { LineRange, LineRangeSet } from 'vs/editor/common/core/lineRange';\n\nsuite('LineRange', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('contains', () => {\n\t\tconst r = new LineRange(2, 3);\n\t\tassert.deepStrictEqual(r.contains(1), false);\n\t\tassert.deepStrictEqual(r.contains(2), true);\n\t\tassert.deepStrictEqual(r.contains(3), false);\n\t\tassert.deepStrictEqual(r.contains(4), false);\n\t});\n});\n\nsuite('LineRangeSet', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('addRange', () => {\n\t\tconst set = new LineRangeSet();\n\t\tset.addRange(new LineRange(2, 3));\n\t\tset.addRange(new LineRange(3, 4));\n\t\tset.addRange(new LineRange(10, 20));\n\t\tassert.deepStrictEqual(set.toString(), '[2,4), [10,20)');\n\n\t\tset.addRange(new LineRange(3, 21));\n\t\tassert.deepStrictEqual(set.toString(), '[2,21)');\n\t});\n\n\ttest('getUnion', () => {\n\t\tconst set1 = new LineRangeSet([\n\t\t\tnew LineRange(2, 3),\n\t\t\tnew LineRange(5, 7),\n\t\t\tnew LineRange(10, 20)\n\t\t]);\n\t\tconst set2 = new LineRangeSet([\n\t\t\tnew LineRange(3, 4),\n\t\t\tnew LineRange(6, 8),\n\t\t\tnew LineRange(9, 11)\n\t\t]);\n\n\t\tconst union = set1.getUnion(set2);\n\t\tassert.deepStrictEqual(union.toString(), '[2,4), [5,8), [9,20)');\n\t});\n\n\ttest('intersects', () => {\n\t\tconst set1 = new LineRangeSet([\n\t\t\tnew LineRange(2, 3),\n\t\t\tnew LineRange(5, 7),\n\t\t\tnew LineRange(10, 20)\n\t\t]);\n\n\t\tassert.deepStrictEqual(set1.intersects(new LineRange(1, 2)), false);\n\t\tassert.deepStrictEqual(set1.intersects(new LineRange(1, 3)), true);\n\t\tassert.deepStrictEqual(set1.intersects(new LineRange(3, 5)), false);\n\t});\n});\n"]}