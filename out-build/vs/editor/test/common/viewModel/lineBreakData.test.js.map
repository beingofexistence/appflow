{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/test/common/viewModel/lineBreakData.test.ts"],"names":[],"mappings":"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","file":"lineBreakData.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { PositionAffinity } from 'vs/editor/common/model';\nimport { ModelDecorationInjectedTextOptions } from 'vs/editor/common/model/textModel';\nimport { ModelLineProjectionData } from 'vs/editor/common/modelLineProjectionData';\n\nsuite('Editor ViewModel - LineBreakData', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('Basic', () => {\n\t\tconst data = new ModelLineProjectionData([], [], [100], [0], 10);\n\n\t\tassert.strictEqual(data.translateToInputOffset(0, 50), 50);\n\t\tassert.strictEqual(data.translateToInputOffset(1, 60), 150);\n\t});\n\n\tfunction sequence(length: number, start = 0): number[] {\n\t\tconst result = new Array<number>();\n\t\tfor (let i = 0; i < length; i++) {\n\t\t\tresult.push(i + start);\n\t\t}\n\t\treturn result;\n\t}\n\n\tfunction testInverse(data: ModelLineProjectionData) {\n\t\tfor (let i = 0; i < 100; i++) {\n\t\t\tconst output = data.translateToOutputPosition(i);\n\t\t\tassert.deepStrictEqual(data.translateToInputOffset(output.outputLineIndex, output.outputOffset), i);\n\t\t}\n\t}\n\n\tfunction getInputOffsets(data: ModelLineProjectionData, outputLineIdx: number): number[] {\n\t\treturn sequence(20).map(i => data.translateToInputOffset(outputLineIdx, i));\n\t}\n\n\tfunction getOutputOffsets(data: ModelLineProjectionData, affinity: PositionAffinity): string[] {\n\t\treturn sequence(25).map(i => data.translateToOutputPosition(i, affinity).toString());\n\t}\n\n\tfunction mapTextToInjectedTextOptions(arr: string[]): ModelDecorationInjectedTextOptions[] {\n\t\treturn arr.map(e => ModelDecorationInjectedTextOptions.from({ content: e }));\n\t}\n\n\tsuite('Injected Text 1', () => {\n\t\tconst data = new ModelLineProjectionData([2, 3, 10], mapTextToInjectedTextOptions(['1', '22', '333']), [10, 100], [], 10);\n\n\t\ttest('getInputOffsetOfOutputPosition', () => {\n\t\t\t// For every view model position, what is the model position?\n\t\t\tassert.deepStrictEqual(getInputOffsets(data, 0), ([0, 1, 2, 2, 3, 3, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11, 12, 13]));\n\t\t\tassert.deepStrictEqual(getInputOffsets(data, 1), ([7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 9, 10, 10, 10, 10, 11, 12, 13]));\n\t\t});\n\n\t\ttest('getOutputPositionOfInputOffset', () => {\n\t\t\tdata.translateToOutputPosition(20);\n\t\t\tassert.deepStrictEqual(getOutputOffsets(data, PositionAffinity.None), [\n\t\t\t\t'0:0',\n\t\t\t\t'0:1',\n\t\t\t\t'0:2',\n\t\t\t\t'0:4',\n\t\t\t\t'0:7',\n\t\t\t\t'0:8',\n\t\t\t\t'0:9',\n\t\t\t\t'1:10',\n\t\t\t\t'1:11',\n\t\t\t\t'1:12',\n\t\t\t\t'1:13',\n\t\t\t\t'1:17',\n\t\t\t\t'1:18',\n\t\t\t\t'1:19',\n\t\t\t\t'1:20',\n\t\t\t\t'1:21',\n\t\t\t\t'1:22',\n\t\t\t\t'1:23',\n\t\t\t\t'1:24',\n\t\t\t\t'1:25',\n\t\t\t\t'1:26',\n\t\t\t\t'1:27',\n\t\t\t\t'1:28',\n\t\t\t\t'1:29',\n\t\t\t\t'1:30',\n\t\t\t]);\n\n\t\t\tassert.deepStrictEqual(getOutputOffsets(data, PositionAffinity.Left), [\n\t\t\t\t'0:0',\n\t\t\t\t'0:1',\n\t\t\t\t'0:2',\n\t\t\t\t'0:4',\n\t\t\t\t'0:7',\n\t\t\t\t'0:8',\n\t\t\t\t'0:9',\n\t\t\t\t'0:10',\n\t\t\t\t'1:11',\n\t\t\t\t'1:12',\n\t\t\t\t'1:13',\n\t\t\t\t'1:17',\n\t\t\t\t'1:18',\n\t\t\t\t'1:19',\n\t\t\t\t'1:20',\n\t\t\t\t'1:21',\n\t\t\t\t'1:22',\n\t\t\t\t'1:23',\n\t\t\t\t'1:24',\n\t\t\t\t'1:25',\n\t\t\t\t'1:26',\n\t\t\t\t'1:27',\n\t\t\t\t'1:28',\n\t\t\t\t'1:29',\n\t\t\t\t'1:30',\n\t\t\t]);\n\n\t\t\tassert.deepStrictEqual(getOutputOffsets(data, PositionAffinity.Right), [\n\t\t\t\t'0:0',\n\t\t\t\t'0:1',\n\t\t\t\t'0:3',\n\t\t\t\t'0:6',\n\t\t\t\t'0:7',\n\t\t\t\t'0:8',\n\t\t\t\t'0:9',\n\t\t\t\t'1:10',\n\t\t\t\t'1:11',\n\t\t\t\t'1:12',\n\t\t\t\t'1:16',\n\t\t\t\t'1:17',\n\t\t\t\t'1:18',\n\t\t\t\t'1:19',\n\t\t\t\t'1:20',\n\t\t\t\t'1:21',\n\t\t\t\t'1:22',\n\t\t\t\t'1:23',\n\t\t\t\t'1:24',\n\t\t\t\t'1:25',\n\t\t\t\t'1:26',\n\t\t\t\t'1:27',\n\t\t\t\t'1:28',\n\t\t\t\t'1:29',\n\t\t\t\t'1:30',\n\t\t\t]);\n\t\t});\n\n\t\ttest('getInputOffsetOfOutputPosition is inverse of getOutputPositionOfInputOffset', () => {\n\t\t\ttestInverse(data);\n\t\t});\n\n\n\t\ttest('normalization', () => {\n\t\t\tassert.deepStrictEqual(\n\t\t\t\tsequence(25)\n\t\t\t\t\t.map((v) =>\n\t\t\t\t\t\tdata.normalizeOutputPosition(1, v, PositionAffinity.Right)\n\t\t\t\t\t)\n\t\t\t\t\t.map((s) => s.toString()),\n\t\t\t\t[\n\t\t\t\t\t'1:0',\n\t\t\t\t\t'1:1',\n\t\t\t\t\t'1:2',\n\t\t\t\t\t'1:3',\n\t\t\t\t\t'1:4',\n\t\t\t\t\t'1:5',\n\t\t\t\t\t'1:6',\n\t\t\t\t\t'1:7',\n\t\t\t\t\t'1:8',\n\t\t\t\t\t'1:9',\n\t\t\t\t\t'1:10',\n\t\t\t\t\t'1:11',\n\t\t\t\t\t'1:12',\n\t\t\t\t\t'1:16',\n\t\t\t\t\t'1:16',\n\t\t\t\t\t'1:16',\n\t\t\t\t\t'1:16',\n\t\t\t\t\t'1:17',\n\t\t\t\t\t'1:18',\n\t\t\t\t\t'1:19',\n\t\t\t\t\t'1:20',\n\t\t\t\t\t'1:21',\n\t\t\t\t\t'1:22',\n\t\t\t\t\t'1:23',\n\t\t\t\t\t'1:24',\n\t\t\t\t]\n\t\t\t);\n\t\t});\n\t});\n\n\tsuite('Injected Text 2', () => {\n\t\tconst data = new ModelLineProjectionData([2, 2, 6], mapTextToInjectedTextOptions(['1', '22', '333']), [10, 100], [], 0);\n\n\t\ttest('getInputOffsetOfOutputPosition', () => {\n\t\t\tassert.deepStrictEqual(\n\t\t\t\tgetInputOffsets(data, 0),\n\t\t\t\t[0, 1, 2, 2, 2, 2, 3, 4, 5, 6, 6, 6, 6, 7, 8, 9, 10, 11, 12, 13]\n\t\t\t);\n\t\t\tassert.deepStrictEqual(\n\t\t\t\tgetInputOffsets(data, 1),\n\t\t\t\t[\n\t\t\t\t\t6, 6, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n\t\t\t\t\t23,\n\t\t\t\t]\n\t\t\t);\n\t\t});\n\n\t\ttest('getInputOffsetOfOutputPosition is inverse of getOutputPositionOfInputOffset', () => {\n\t\t\ttestInverse(data);\n\t\t});\n\t});\n\n\tsuite('Injected Text 3', () => {\n\t\tconst data = new ModelLineProjectionData([2, 2, 7], mapTextToInjectedTextOptions(['1', '22', '333']), [10, 100], [], 0);\n\n\t\ttest('getInputOffsetOfOutputPosition', () => {\n\t\t\tassert.deepStrictEqual(\n\t\t\t\tgetInputOffsets(data, 0),\n\t\t\t\t[0, 1, 2, 2, 2, 2, 3, 4, 5, 6, 7, 7, 7, 7, 8, 9, 10, 11, 12, 13]\n\t\t\t);\n\t\t\tassert.deepStrictEqual(\n\t\t\t\tgetInputOffsets(data, 1),\n\t\t\t\t[\n\t\t\t\t\t7, 7, 7, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n\t\t\t\t\t23,\n\t\t\t\t]\n\t\t\t);\n\t\t});\n\n\t\ttest('getInputOffsetOfOutputPosition is inverse of getOutputPositionOfInputOffset', () => {\n\t\t\ttestInverse(data);\n\t\t});\n\t});\n});\n"]}