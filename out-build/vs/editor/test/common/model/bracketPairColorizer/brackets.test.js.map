{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/test/common/model/bracketPairColorizer/brackets.test.ts"],"names":[],"mappings":"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","file":"brackets.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { LanguageAgnosticBracketTokens } from 'vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/brackets';\nimport { SmallImmutableSet, DenseKeyProvider } from 'vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/smallImmutableSet';\nimport { Token, TokenKind } from 'vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/tokenizer';\nimport { TestLanguageConfigurationService } from 'vs/editor/test/common/modes/testLanguageConfigurationService';\n\nsuite('Bracket Pair Colorizer - Brackets', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('Basic', () => {\n\t\tconst languageId = 'testMode1';\n\t\tconst denseKeyProvider = new DenseKeyProvider<string>();\n\t\tconst getImmutableSet = (elements: string[]) => {\n\t\t\tlet newSet = SmallImmutableSet.getEmpty();\n\t\t\telements.forEach(x => newSet = newSet.add(`${languageId}:::${x}`, denseKeyProvider));\n\t\t\treturn newSet;\n\t\t};\n\t\tconst getKey = (value: string) => {\n\t\t\treturn denseKeyProvider.getKey(`${languageId}:::${value}`);\n\t\t};\n\n\t\tconst disposableStore = new DisposableStore();\n\t\tconst languageConfigService = disposableStore.add(new TestLanguageConfigurationService());\n\t\tdisposableStore.add(languageConfigService.register(languageId, {\n\t\t\tbrackets: [\n\t\t\t\t['{', '}'], ['[', ']'], ['(', ')'],\n\t\t\t\t['begin', 'end'], ['case', 'endcase'], ['casez', 'endcase'],\t\t\t\t\t// Verilog\n\t\t\t\t['\\\\left(', '\\\\right)'], ['\\\\left(', '\\\\right.'], ['\\\\left.', '\\\\right)'],\t\t// LaTeX Parentheses\n\t\t\t\t['\\\\left[', '\\\\right]'], ['\\\\left[', '\\\\right.'], ['\\\\left.', '\\\\right]']\t\t// LaTeX Brackets\n\t\t\t]\n\t\t}));\n\n\t\tconst brackets = new LanguageAgnosticBracketTokens(denseKeyProvider, l => languageConfigService.getLanguageConfiguration(l));\n\t\tconst bracketsExpected = [\n\t\t\t{ text: '{', length: 1, kind: 'OpeningBracket', bracketId: getKey('{'), bracketIds: getImmutableSet(['{']) },\n\t\t\t{ text: '[', length: 1, kind: 'OpeningBracket', bracketId: getKey('['), bracketIds: getImmutableSet(['[']) },\n\t\t\t{ text: '(', length: 1, kind: 'OpeningBracket', bracketId: getKey('('), bracketIds: getImmutableSet(['(']) },\n\t\t\t{ text: 'begin', length: 5, kind: 'OpeningBracket', bracketId: getKey('begin'), bracketIds: getImmutableSet(['begin']) },\n\t\t\t{ text: 'case', length: 4, kind: 'OpeningBracket', bracketId: getKey('case'), bracketIds: getImmutableSet(['case']) },\n\t\t\t{ text: 'casez', length: 5, kind: 'OpeningBracket', bracketId: getKey('casez'), bracketIds: getImmutableSet(['casez']) },\n\t\t\t{ text: '\\\\left(', length: 6, kind: 'OpeningBracket', bracketId: getKey('\\\\left('), bracketIds: getImmutableSet(['\\\\left(']) },\n\t\t\t{ text: '\\\\left.', length: 6, kind: 'OpeningBracket', bracketId: getKey('\\\\left.'), bracketIds: getImmutableSet(['\\\\left.']) },\n\t\t\t{ text: '\\\\left[', length: 6, kind: 'OpeningBracket', bracketId: getKey('\\\\left['), bracketIds: getImmutableSet(['\\\\left[']) },\n\n\t\t\t{ text: '}', length: 1, kind: 'ClosingBracket', bracketId: getKey('{'), bracketIds: getImmutableSet(['{']) },\n\t\t\t{ text: ']', length: 1, kind: 'ClosingBracket', bracketId: getKey('['), bracketIds: getImmutableSet(['[']) },\n\t\t\t{ text: ')', length: 1, kind: 'ClosingBracket', bracketId: getKey('('), bracketIds: getImmutableSet(['(']) },\n\t\t\t{ text: 'end', length: 3, kind: 'ClosingBracket', bracketId: getKey('begin'), bracketIds: getImmutableSet(['begin']) },\n\t\t\t{ text: 'endcase', length: 7, kind: 'ClosingBracket', bracketId: getKey('case'), bracketIds: getImmutableSet(['case', 'casez']) },\n\t\t\t{ text: '\\\\right)', length: 7, kind: 'ClosingBracket', bracketId: getKey('\\\\left('), bracketIds: getImmutableSet(['\\\\left(', '\\\\left.']) },\n\t\t\t{ text: '\\\\right.', length: 7, kind: 'ClosingBracket', bracketId: getKey('\\\\left('), bracketIds: getImmutableSet(['\\\\left(', '\\\\left[']) },\n\t\t\t{ text: '\\\\right]', length: 7, kind: 'ClosingBracket', bracketId: getKey('\\\\left['), bracketIds: getImmutableSet(['\\\\left[', '\\\\left.']) }\n\t\t];\n\t\tconst bracketsActual = bracketsExpected.map(x => tokenToObject(brackets.getToken(x.text, languageId), x.text));\n\n\t\tassert.deepStrictEqual(bracketsActual, bracketsExpected);\n\n\t\tdisposableStore.dispose();\n\t});\n});\n\nfunction tokenToObject(token: Token | undefined, text: string): any {\n\tif (token === undefined) {\n\t\treturn undefined;\n\t}\n\treturn {\n\t\ttext: text,\n\t\tlength: token.length,\n\t\tbracketId: token.bracketId,\n\t\tbracketIds: token.bracketIds,\n\t\tkind: {\n\t\t\t[TokenKind.ClosingBracket]: 'ClosingBracket',\n\t\t\t[TokenKind.OpeningBracket]: 'OpeningBracket',\n\t\t\t[TokenKind.Text]: 'Text',\n\t\t}[token.kind],\n\t};\n}\n"]}