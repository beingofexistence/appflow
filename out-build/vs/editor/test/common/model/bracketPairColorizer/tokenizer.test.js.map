{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/test/common/model/bracketPairColorizer/tokenizer.test.ts"],"names":[],"mappings":"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","file":"tokenizer.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { LanguageId, MetadataConsts, StandardTokenType } from 'vs/editor/common/encodedTokenAttributes';\nimport { EncodedTokenizationResult, IState, ITokenizationSupport, TokenizationRegistry } from 'vs/editor/common/languages';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { ILanguageConfigurationService } from 'vs/editor/common/languages/languageConfigurationRegistry';\nimport { LanguageAgnosticBracketTokens } from 'vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/brackets';\nimport { Length, lengthAdd, lengthsToRange, lengthZero } from 'vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/length';\nimport { DenseKeyProvider } from 'vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/smallImmutableSet';\nimport { TextBufferTokenizer, Token, Tokenizer, TokenKind } from 'vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/tokenizer';\nimport { TextModel } from 'vs/editor/common/model/textModel';\nimport { createModelServices, instantiateTextModel } from 'vs/editor/test/common/testTextModel';\n\nsuite('Bracket Pair Colorizer - Tokenizer', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('Basic', () => {\n\t\tconst mode1 = 'testMode1';\n\t\tconst disposableStore = new DisposableStore();\n\t\tconst instantiationService = createModelServices(disposableStore);\n\t\tconst languageConfigurationService = instantiationService.get(ILanguageConfigurationService);\n\t\tconst languageService = instantiationService.get(ILanguageService);\n\t\tdisposableStore.add(languageService.registerLanguage({ id: mode1 }));\n\t\tconst encodedMode1 = languageService.languageIdCodec.encodeLanguageId(mode1);\n\n\t\tconst denseKeyProvider = new DenseKeyProvider<string>();\n\n\t\tconst tStandard = (text: string) => new TokenInfo(text, encodedMode1, StandardTokenType.Other, true);\n\t\tconst tComment = (text: string) => new TokenInfo(text, encodedMode1, StandardTokenType.Comment, true);\n\t\tconst document = new TokenizedDocument([\n\t\t\ttStandard(' { } '), tStandard('be'), tStandard('gin end'), tStandard('\\n'),\n\t\t\ttStandard('hello'), tComment('{'), tStandard('}'),\n\t\t]);\n\n\t\tdisposableStore.add(TokenizationRegistry.register(mode1, document.getTokenizationSupport()));\n\t\tdisposableStore.add(languageConfigurationService.register(mode1, {\n\t\t\tbrackets: [['{', '}'], ['[', ']'], ['(', ')'], ['begin', 'end']],\n\t\t}));\n\n\t\tconst model = disposableStore.add(instantiateTextModel(instantiationService, document.getText(), mode1));\n\t\tmodel.tokenization.forceTokenization(model.getLineCount());\n\n\t\tconst brackets = new LanguageAgnosticBracketTokens(denseKeyProvider, l => languageConfigurationService.getLanguageConfiguration(l));\n\n\t\tconst tokens = readAllTokens(new TextBufferTokenizer(model, brackets));\n\n\t\tassert.deepStrictEqual(toArr(tokens, model, denseKeyProvider), [\n\t\t\t{ text: ' ', bracketId: null, bracketIds: [], kind: 'Text' },\n\t\t\t{\n\t\t\t\ttext: '{',\n\t\t\t\tbracketId: 'testMode1:::{',\n\t\t\t\tbracketIds: ['testMode1:::{'],\n\t\t\t\tkind: 'OpeningBracket',\n\t\t\t},\n\t\t\t{ text: ' ', bracketId: null, bracketIds: [], kind: 'Text' },\n\t\t\t{\n\t\t\t\ttext: '}',\n\t\t\t\tbracketId: 'testMode1:::{',\n\t\t\t\tbracketIds: ['testMode1:::{'],\n\t\t\t\tkind: 'ClosingBracket',\n\t\t\t},\n\t\t\t{ text: ' ', bracketId: null, bracketIds: [], kind: 'Text' },\n\t\t\t{\n\t\t\t\ttext: 'begin',\n\t\t\t\tbracketId: 'testMode1:::begin',\n\t\t\t\tbracketIds: ['testMode1:::begin'],\n\t\t\t\tkind: 'OpeningBracket',\n\t\t\t},\n\t\t\t{ text: ' ', bracketId: null, bracketIds: [], kind: 'Text' },\n\t\t\t{\n\t\t\t\ttext: 'end',\n\t\t\t\tbracketId: 'testMode1:::begin',\n\t\t\t\tbracketIds: ['testMode1:::begin'],\n\t\t\t\tkind: 'ClosingBracket',\n\t\t\t},\n\t\t\t{ text: '\\nhello{', bracketId: null, bracketIds: [], kind: 'Text' },\n\t\t\t{\n\t\t\t\ttext: '}',\n\t\t\t\tbracketId: 'testMode1:::{',\n\t\t\t\tbracketIds: ['testMode1:::{'],\n\t\t\t\tkind: 'ClosingBracket',\n\t\t\t},\n\t\t]);\n\n\t\tdisposableStore.dispose();\n\t});\n});\n\nfunction readAllTokens(tokenizer: Tokenizer): Token[] {\n\tconst tokens = new Array<Token>();\n\twhile (true) {\n\t\tconst token = tokenizer.read();\n\t\tif (!token) {\n\t\t\tbreak;\n\t\t}\n\t\ttokens.push(token);\n\t}\n\treturn tokens;\n}\n\nfunction toArr(tokens: Token[], model: TextModel, keyProvider: DenseKeyProvider<string>): any[] {\n\tconst result = new Array<any>();\n\tlet offset = lengthZero;\n\tfor (const token of tokens) {\n\t\tresult.push(tokenToObj(token, offset, model, keyProvider));\n\t\toffset = lengthAdd(offset, token.length);\n\t}\n\treturn result;\n}\n\nfunction tokenToObj(token: Token, offset: Length, model: TextModel, keyProvider: DenseKeyProvider<any>): any {\n\treturn {\n\t\ttext: model.getValueInRange(lengthsToRange(offset, lengthAdd(offset, token.length))),\n\t\tbracketId: keyProvider.reverseLookup(token.bracketId) || null,\n\t\tbracketIds: keyProvider.reverseLookupSet(token.bracketIds),\n\t\tkind: {\n\t\t\t[TokenKind.ClosingBracket]: 'ClosingBracket',\n\t\t\t[TokenKind.OpeningBracket]: 'OpeningBracket',\n\t\t\t[TokenKind.Text]: 'Text',\n\t\t}[token.kind]\n\t};\n}\n\nexport class TokenizedDocument {\n\tprivate readonly tokensByLine: readonly TokenInfo[][];\n\tconstructor(tokens: TokenInfo[]) {\n\t\tconst tokensByLine = new Array<TokenInfo[]>();\n\t\tlet curLine = new Array<TokenInfo>();\n\n\t\tfor (const token of tokens) {\n\t\t\tconst lines = token.text.split('\\n');\n\t\t\tlet first = true;\n\t\t\twhile (lines.length > 0) {\n\t\t\t\tif (!first) {\n\t\t\t\t\ttokensByLine.push(curLine);\n\t\t\t\t\tcurLine = new Array<TokenInfo>();\n\t\t\t\t} else {\n\t\t\t\t\tfirst = false;\n\t\t\t\t}\n\n\t\t\t\tif (lines[0].length > 0) {\n\t\t\t\t\tcurLine.push(token.withText(lines[0]));\n\t\t\t\t}\n\t\t\t\tlines.pop();\n\t\t\t}\n\t\t}\n\n\t\ttokensByLine.push(curLine);\n\n\t\tthis.tokensByLine = tokensByLine;\n\t}\n\n\tgetText() {\n\t\treturn this.tokensByLine.map(t => t.map(t => t.text).join('')).join('\\n');\n\t}\n\n\tgetTokenizationSupport(): ITokenizationSupport {\n\t\tclass State implements IState {\n\t\t\tconstructor(public readonly lineNumber: number) { }\n\n\t\t\tclone(): IState {\n\t\t\t\treturn new State(this.lineNumber);\n\t\t\t}\n\n\t\t\tequals(other: IState): boolean {\n\t\t\t\treturn this.lineNumber === (other as State).lineNumber;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tgetInitialState: () => new State(0),\n\t\t\ttokenize: () => { throw new Error('Method not implemented.'); },\n\t\t\ttokenizeEncoded: (line: string, hasEOL: boolean, state: IState): EncodedTokenizationResult => {\n\t\t\t\tconst state2 = state as State;\n\t\t\t\tconst tokens = this.tokensByLine[state2.lineNumber];\n\t\t\t\tconst arr = new Array<number>();\n\t\t\t\tlet offset = 0;\n\t\t\t\tfor (const t of tokens) {\n\t\t\t\t\tarr.push(offset, t.getMetadata());\n\t\t\t\t\toffset += t.text.length;\n\t\t\t\t}\n\n\t\t\t\treturn new EncodedTokenizationResult(new Uint32Array(arr), new State(state2.lineNumber + 1));\n\t\t\t}\n\t\t};\n\t}\n}\n\nexport class TokenInfo {\n\tconstructor(\n\t\tpublic readonly text: string,\n\t\tpublic readonly languageId: LanguageId,\n\t\tpublic readonly tokenType: StandardTokenType,\n\t\tpublic readonly hasBalancedBrackets: boolean,\n\t) { }\n\n\tgetMetadata(): number {\n\t\treturn (\n\t\t\t(((this.languageId << MetadataConsts.LANGUAGEID_OFFSET) |\n\t\t\t\t(this.tokenType << MetadataConsts.TOKEN_TYPE_OFFSET)) >>>\n\t\t\t\t0) |\n\t\t\t(this.hasBalancedBrackets ? MetadataConsts.BALANCED_BRACKETS_MASK : 0)\n\t\t);\n\t}\n\n\twithText(text: string): TokenInfo {\n\t\treturn new TokenInfo(text, this.languageId, this.tokenType, this.hasBalancedBrackets);\n\t}\n}\n"]}