{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/test/common/model/bracketPairColorizer/concat23Trees.test.ts"],"names":[],"mappings":"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","file":"concat23Trees.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { AstNode, AstNodeKind, ListAstNode, TextAstNode } from 'vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/ast';\nimport { concat23Trees } from 'vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/concat23Trees';\nimport { toLength } from 'vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/length';\n\nsuite('Bracket Pair Colorizer - mergeItems', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('Clone', () => {\n\t\tconst tree = ListAstNode.create([\n\t\t\tnew TextAstNode(toLength(1, 1)),\n\t\t\tnew TextAstNode(toLength(1, 1)),\n\t\t]);\n\n\t\tassert.ok(equals(tree, tree.deepClone()));\n\t});\n\n\tfunction equals(node1: AstNode, node2: AstNode): boolean {\n\t\tif (node1.length !== node2.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (node1.children.length !== node2.children.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0; i < node1.children.length; i++) {\n\t\t\tif (!equals(node1.children[i], node2.children[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tif (!node1.missingOpeningBracketIds.equals(node2.missingOpeningBracketIds)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (node1.kind === AstNodeKind.Pair && node2.kind === AstNodeKind.Pair) {\n\t\t\treturn true;\n\t\t} else if (node1.kind === node2.kind) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfunction testMerge(lists: AstNode[]) {\n\t\tconst node = (concat23Trees(lists.map(l => l.deepClone())) || ListAstNode.create([])).flattenLists();\n\t\t// This trivial merge does not maintain the (2,3) tree invariant.\n\t\tconst referenceNode = ListAstNode.create(lists).flattenLists();\n\n\t\tassert.ok(equals(node, referenceNode), 'merge23Trees failed');\n\t}\n\n\ttest('Empty List', () => {\n\t\ttestMerge([]);\n\t});\n\n\ttest('Same Height Lists', () => {\n\t\tconst textNode = new TextAstNode(toLength(1, 1));\n\t\tconst tree = ListAstNode.create([textNode.deepClone(), textNode.deepClone()]);\n\t\ttestMerge([tree.deepClone(), tree.deepClone(), tree.deepClone(), tree.deepClone(), tree.deepClone()]);\n\t});\n\n\ttest('Different Height Lists 1', () => {\n\t\tconst textNode = new TextAstNode(toLength(1, 1));\n\t\tconst tree1 = ListAstNode.create([textNode.deepClone(), textNode.deepClone()]);\n\t\tconst tree2 = ListAstNode.create([tree1.deepClone(), tree1.deepClone()]);\n\n\t\ttestMerge([tree1, tree2]);\n\t});\n\n\ttest('Different Height Lists 2', () => {\n\t\tconst textNode = new TextAstNode(toLength(1, 1));\n\t\tconst tree1 = ListAstNode.create([textNode.deepClone(), textNode.deepClone()]);\n\t\tconst tree2 = ListAstNode.create([tree1.deepClone(), tree1.deepClone()]);\n\n\t\ttestMerge([tree2, tree1]);\n\t});\n\n\ttest('Different Height Lists 3', () => {\n\t\tconst textNode = new TextAstNode(toLength(1, 1));\n\t\tconst tree1 = ListAstNode.create([textNode.deepClone(), textNode.deepClone()]);\n\t\tconst tree2 = ListAstNode.create([tree1.deepClone(), tree1.deepClone()]);\n\n\t\ttestMerge([tree2, tree1, tree1, tree2, tree2]);\n\t});\n});\n"]}