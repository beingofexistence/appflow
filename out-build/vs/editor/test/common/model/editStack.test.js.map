{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/test/common/model/editStack.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAShG,KAAK,CAAC,WAAW,EAAE,GAAG,EAAE;QAEvB,IAAA,WAAG,GAAsC,CAAC;QAE1C,IAAI,CAAC,2CAA2C,EAAE,GAAG,EAAE;YACtD,MAAM,SAAS,GAAG,IAAI,eAAG,CACxB,CAAC,EACD,CAAC,8DAGD,CAAC,IAAI,eAAG,CAAO,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAC7B,CAAC,IAAI,eAAG,CAAO,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,EAC7B,CAAC,IAAI,gBAAG,CAAQ,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,CACnC,CAAC;YAEF,MAAM,IAAI,GAAG,SAAS,CAAC,SAAS,EAAE,CAAC;YACnC,MAAM,MAAM,GAAG,eAAG,CAAsB,WAAW,CAAC,IAAI,CAAC,CAAC;YAE1D,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IAEJ,CAAC,CAAC,CAAC","file":"editStack.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { TextChange } from 'vs/editor/common/core/textChange';\nimport { EndOfLineSequence } from 'vs/editor/common/model';\nimport { SingleModelEditStackData } from 'vs/editor/common/model/editStack';\n\nsuite('EditStack', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('issue #118041: unicode character undo bug', () => {\n\t\tconst stackData = new SingleModelEditStackData(\n\t\t\t1,\n\t\t\t2,\n\t\t\tEndOfLineSequence.LF,\n\t\t\tEndOfLineSequence.LF,\n\t\t\t[new Selection(10, 2, 10, 2)],\n\t\t\t[new Selection(10, 1, 10, 1)],\n\t\t\t[new TextChange(428, 'ï»¿', 428, '')]\n\t\t);\n\n\t\tconst buff = stackData.serialize();\n\t\tconst actual = SingleModelEditStackData.deserialize(buff);\n\n\t\tassert.deepStrictEqual(actual, stackData);\n\t});\n\n});\n"]}