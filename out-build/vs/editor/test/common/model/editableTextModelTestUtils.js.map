{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/test/common/model/editableTextModelTestUtils.ts"],"names":[],"mappings":"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","file":"editableTextModelTestUtils.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { ISingleEditOperation } from 'vs/editor/common/core/editOperation';\nimport { Position } from 'vs/editor/common/core/position';\nimport { EndOfLinePreference, EndOfLineSequence } from 'vs/editor/common/model';\nimport { MirrorTextModel } from 'vs/editor/common/model/mirrorTextModel';\nimport { TextModel } from 'vs/editor/common/model/textModel';\nimport { IModelContentChangedEvent } from 'vs/editor/common/textModelEvents';\nimport { createTextModel } from 'vs/editor/test/common/testTextModel';\n\nexport function testApplyEditsWithSyncedModels(original: string[], edits: ISingleEditOperation[], expected: string[], inputEditsAreInvalid: boolean = false): void {\n\tconst originalStr = original.join('\\n');\n\tconst expectedStr = expected.join('\\n');\n\n\tassertSyncedModels(originalStr, (model, assertMirrorModels) => {\n\t\t// Apply edits & collect inverse edits\n\t\tconst inverseEdits = model.applyEdits(edits, true);\n\n\t\t// Assert edits produced expected result\n\t\tassert.deepStrictEqual(model.getValue(EndOfLinePreference.LF), expectedStr);\n\n\t\tassertMirrorModels();\n\n\t\t// Apply the inverse edits\n\t\tconst inverseInverseEdits = model.applyEdits(inverseEdits, true);\n\n\t\t// Assert the inverse edits brought back model to original state\n\t\tassert.deepStrictEqual(model.getValue(EndOfLinePreference.LF), originalStr);\n\n\t\tif (!inputEditsAreInvalid) {\n\t\t\tconst simplifyEdit = (edit: ISingleEditOperation) => {\n\t\t\t\treturn {\n\t\t\t\t\trange: edit.range,\n\t\t\t\t\ttext: edit.text,\n\t\t\t\t\tforceMoveMarkers: edit.forceMoveMarkers || false\n\t\t\t\t};\n\t\t\t};\n\t\t\t// Assert the inverse of the inverse edits are the original edits\n\t\t\tassert.deepStrictEqual(inverseInverseEdits.map(simplifyEdit), edits.map(simplifyEdit));\n\t\t}\n\n\t\tassertMirrorModels();\n\t});\n}\n\nconst enum AssertDocumentLineMappingDirection {\n\tOffsetToPosition,\n\tPositionToOffset\n}\n\nfunction assertOneDirectionLineMapping(model: TextModel, direction: AssertDocumentLineMappingDirection, msg: string): void {\n\tconst allText = model.getValue();\n\n\tlet line = 1, column = 1, previousIsCarriageReturn = false;\n\tfor (let offset = 0; offset <= allText.length; offset++) {\n\t\t// The position coordinate system cannot express the position between \\r and \\n\n\t\tconst position: Position = new Position(line, column + (previousIsCarriageReturn ? -1 : 0));\n\n\t\tif (direction === AssertDocumentLineMappingDirection.OffsetToPosition) {\n\t\t\tconst actualPosition = model.getPositionAt(offset);\n\t\t\tassert.strictEqual(actualPosition.toString(), position.toString(), msg + ' - getPositionAt mismatch for offset ' + offset);\n\t\t} else {\n\t\t\t// The position coordinate system cannot express the position between \\r and \\n\n\t\t\tconst expectedOffset: number = offset + (previousIsCarriageReturn ? -1 : 0);\n\t\t\tconst actualOffset = model.getOffsetAt(position);\n\t\t\tassert.strictEqual(actualOffset, expectedOffset, msg + ' - getOffsetAt mismatch for position ' + position.toString());\n\t\t}\n\n\t\tif (allText.charAt(offset) === '\\n') {\n\t\t\tline++;\n\t\t\tcolumn = 1;\n\t\t} else {\n\t\t\tcolumn++;\n\t\t}\n\n\t\tpreviousIsCarriageReturn = (allText.charAt(offset) === '\\r');\n\t}\n}\n\nfunction assertLineMapping(model: TextModel, msg: string): void {\n\tassertOneDirectionLineMapping(model, AssertDocumentLineMappingDirection.PositionToOffset, msg);\n\tassertOneDirectionLineMapping(model, AssertDocumentLineMappingDirection.OffsetToPosition, msg);\n}\n\n\nexport function assertSyncedModels(text: string, callback: (model: TextModel, assertMirrorModels: () => void) => void, setup: ((model: TextModel) => void) | null = null): void {\n\tconst model = createTextModel(text);\n\tmodel.setEOL(EndOfLineSequence.LF);\n\tassertLineMapping(model, 'model');\n\n\tif (setup) {\n\t\tsetup(model);\n\t\tassertLineMapping(model, 'model');\n\t}\n\n\tconst mirrorModel2 = new MirrorTextModel(null!, model.getLinesContent(), model.getEOL(), model.getVersionId());\n\tlet mirrorModel2PrevVersionId = model.getVersionId();\n\n\tconst disposable = model.onDidChangeContent((e: IModelContentChangedEvent) => {\n\t\tconst versionId = e.versionId;\n\t\tif (versionId < mirrorModel2PrevVersionId) {\n\t\t\tconsole.warn('Model version id did not advance between edits (2)');\n\t\t}\n\t\tmirrorModel2PrevVersionId = versionId;\n\t\tmirrorModel2.onEvents(e);\n\t});\n\n\tconst assertMirrorModels = () => {\n\t\tassertLineMapping(model, 'model');\n\t\tassert.strictEqual(mirrorModel2.getText(), model.getValue(), 'mirror model 2 text OK');\n\t\tassert.strictEqual(mirrorModel2.version, model.getVersionId(), 'mirror model 2 version OK');\n\t};\n\n\tcallback(model, assertMirrorModels);\n\n\tdisposable.dispose();\n\tmodel.dispose();\n\tmirrorModel2.dispose();\n}\n"]}