{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/test/common/modes/textToHtmlTokenizer.test.ts"],"names":[],"mappings":"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","file":"textToHtmlTokenizer.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { ColorId, FontStyle, MetadataConsts } from 'vs/editor/common/encodedTokenAttributes';\nimport { EncodedTokenizationResult, IState, TokenizationRegistry } from 'vs/editor/common/languages';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { _tokenizeToString, tokenizeLineToHTML } from 'vs/editor/common/languages/textToHtmlTokenizer';\nimport { LanguageIdCodec } from 'vs/editor/common/services/languagesRegistry';\nimport { TestLineToken, TestLineTokens } from 'vs/editor/test/common/core/testLineToken';\nimport { createModelServices } from 'vs/editor/test/common/testTextModel';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\n\nsuite('Editor Modes - textToHtmlTokenizer', () => {\n\n\tlet disposables: DisposableStore;\n\tlet instantiationService: TestInstantiationService;\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\tinstantiationService = createModelServices(disposables);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction toStr(pieces: { className: string; text: string }[]): string {\n\t\tconst resultArr = pieces.map((t) => `<span class=\"${t.className}\">${t.text}</span>`);\n\t\treturn resultArr.join('');\n\t}\n\n\ttest('TextToHtmlTokenizer 1', () => {\n\t\tconst mode = disposables.add(instantiationService.createInstance(Mode));\n\t\tconst support = TokenizationRegistry.get(mode.languageId)!;\n\n\t\tconst actual = _tokenizeToString('.abc..def...gh', new LanguageIdCodec(), support);\n\t\tconst expected = [\n\t\t\t{ className: 'mtk7', text: '.' },\n\t\t\t{ className: 'mtk9', text: 'abc' },\n\t\t\t{ className: 'mtk7', text: '..' },\n\t\t\t{ className: 'mtk9', text: 'def' },\n\t\t\t{ className: 'mtk7', text: '...' },\n\t\t\t{ className: 'mtk9', text: 'gh' },\n\t\t];\n\t\tconst expectedStr = `<div class=\"monaco-tokenized-source\">${toStr(expected)}</div>`;\n\n\t\tassert.strictEqual(actual, expectedStr);\n\t});\n\n\ttest('TextToHtmlTokenizer 2', () => {\n\t\tconst mode = disposables.add(instantiationService.createInstance(Mode));\n\t\tconst support = TokenizationRegistry.get(mode.languageId)!;\n\n\t\tconst actual = _tokenizeToString('.abc..def...gh\\n.abc..def...gh', new LanguageIdCodec(), support);\n\t\tconst expected1 = [\n\t\t\t{ className: 'mtk7', text: '.' },\n\t\t\t{ className: 'mtk9', text: 'abc' },\n\t\t\t{ className: 'mtk7', text: '..' },\n\t\t\t{ className: 'mtk9', text: 'def' },\n\t\t\t{ className: 'mtk7', text: '...' },\n\t\t\t{ className: 'mtk9', text: 'gh' },\n\t\t];\n\t\tconst expected2 = [\n\t\t\t{ className: 'mtk7', text: '.' },\n\t\t\t{ className: 'mtk9', text: 'abc' },\n\t\t\t{ className: 'mtk7', text: '..' },\n\t\t\t{ className: 'mtk9', text: 'def' },\n\t\t\t{ className: 'mtk7', text: '...' },\n\t\t\t{ className: 'mtk9', text: 'gh' },\n\t\t];\n\t\tconst expectedStr1 = toStr(expected1);\n\t\tconst expectedStr2 = toStr(expected2);\n\t\tconst expectedStr = `<div class=\"monaco-tokenized-source\">${expectedStr1}<br/>${expectedStr2}</div>`;\n\n\t\tassert.strictEqual(actual, expectedStr);\n\t});\n\n\ttest('tokenizeLineToHTML', () => {\n\t\tconst text = 'Ciao hello world!';\n\t\tconst lineTokens = new TestLineTokens([\n\t\t\tnew TestLineToken(\n\t\t\t\t4,\n\t\t\t\t(\n\t\t\t\t\t(3 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t\t| ((FontStyle.Bold | FontStyle.Italic) << MetadataConsts.FONT_STYLE_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t),\n\t\t\tnew TestLineToken(\n\t\t\t\t5,\n\t\t\t\t(\n\t\t\t\t\t(1 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t),\n\t\t\tnew TestLineToken(\n\t\t\t\t10,\n\t\t\t\t(\n\t\t\t\t\t(4 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t),\n\t\t\tnew TestLineToken(\n\t\t\t\t11,\n\t\t\t\t(\n\t\t\t\t\t(1 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t),\n\t\t\tnew TestLineToken(\n\t\t\t\t17,\n\t\t\t\t(\n\t\t\t\t\t(5 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t\t| ((FontStyle.Underline) << MetadataConsts.FONT_STYLE_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t)\n\t\t]);\n\t\tconst colorMap = [null!, '#000000', '#ffffff', '#ff0000', '#00ff00', '#0000ff'];\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 0, 17, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #ff0000;font-style: italic;font-weight: bold;\">Ciao</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> </span>',\n\t\t\t\t'<span style=\"color: #00ff00;\">hello</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> </span>',\n\t\t\t\t'<span style=\"color: #0000ff;text-decoration: underline;\">world!</span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 0, 12, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #ff0000;font-style: italic;font-weight: bold;\">Ciao</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> </span>',\n\t\t\t\t'<span style=\"color: #00ff00;\">hello</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> </span>',\n\t\t\t\t'<span style=\"color: #0000ff;text-decoration: underline;\">w</span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 0, 11, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #ff0000;font-style: italic;font-weight: bold;\">Ciao</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> </span>',\n\t\t\t\t'<span style=\"color: #00ff00;\">hello</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> </span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 1, 11, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #ff0000;font-style: italic;font-weight: bold;\">iao</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> </span>',\n\t\t\t\t'<span style=\"color: #00ff00;\">hello</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> </span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 4, 11, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #000000;\">&#160;</span>',\n\t\t\t\t'<span style=\"color: #00ff00;\">hello</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> </span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 5, 11, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #00ff00;\">hello</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> </span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 5, 10, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #00ff00;\">hello</span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 6, 9, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #00ff00;\">ell</span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\t});\n\ttest('tokenizeLineToHTML handle spaces #35954', () => {\n\t\tconst text = '  Ciao   hello world!';\n\t\tconst lineTokens = new TestLineTokens([\n\t\t\tnew TestLineToken(\n\t\t\t\t2,\n\t\t\t\t(\n\t\t\t\t\t(1 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t),\n\t\t\tnew TestLineToken(\n\t\t\t\t6,\n\t\t\t\t(\n\t\t\t\t\t(3 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t\t| ((FontStyle.Bold | FontStyle.Italic) << MetadataConsts.FONT_STYLE_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t),\n\t\t\tnew TestLineToken(\n\t\t\t\t9,\n\t\t\t\t(\n\t\t\t\t\t(1 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t),\n\t\t\tnew TestLineToken(\n\t\t\t\t14,\n\t\t\t\t(\n\t\t\t\t\t(4 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t),\n\t\t\tnew TestLineToken(\n\t\t\t\t15,\n\t\t\t\t(\n\t\t\t\t\t(1 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t),\n\t\t\tnew TestLineToken(\n\t\t\t\t21,\n\t\t\t\t(\n\t\t\t\t\t(5 << MetadataConsts.FOREGROUND_OFFSET)\n\t\t\t\t\t| ((FontStyle.Underline) << MetadataConsts.FONT_STYLE_OFFSET)\n\t\t\t\t) >>> 0\n\t\t\t)\n\t\t]);\n\t\tconst colorMap = [null!, '#000000', '#ffffff', '#ff0000', '#00ff00', '#0000ff'];\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 0, 21, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #000000;\">&#160; </span>',\n\t\t\t\t'<span style=\"color: #ff0000;font-style: italic;font-weight: bold;\">Ciao</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> &#160; </span>',\n\t\t\t\t'<span style=\"color: #00ff00;\">hello</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> </span>',\n\t\t\t\t'<span style=\"color: #0000ff;text-decoration: underline;\">world!</span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 0, 17, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #000000;\">&#160; </span>',\n\t\t\t\t'<span style=\"color: #ff0000;font-style: italic;font-weight: bold;\">Ciao</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> &#160; </span>',\n\t\t\t\t'<span style=\"color: #00ff00;\">hello</span>',\n\t\t\t\t'<span style=\"color: #000000;\"> </span>',\n\t\t\t\t'<span style=\"color: #0000ff;text-decoration: underline;\">wo</span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\ttokenizeLineToHTML(text, lineTokens, colorMap, 0, 3, 4, true),\n\t\t\t[\n\t\t\t\t'<div>',\n\t\t\t\t'<span style=\"color: #000000;\">&#160; </span>',\n\t\t\t\t'<span style=\"color: #ff0000;font-style: italic;font-weight: bold;\">C</span>',\n\t\t\t\t'</div>'\n\t\t\t].join('')\n\t\t);\n\t});\n\n});\n\nclass Mode extends Disposable {\n\n\tpublic readonly languageId = 'textToHtmlTokenizerMode';\n\n\tconstructor(\n\t\t@ILanguageService languageService: ILanguageService\n\t) {\n\t\tsuper();\n\t\tthis._register(languageService.registerLanguage({ id: this.languageId }));\n\t\tthis._register(TokenizationRegistry.register(this.languageId, {\n\t\t\tgetInitialState: (): IState => null!,\n\t\t\ttokenize: undefined!,\n\t\t\ttokenizeEncoded: (line: string, hasEOL: boolean, state: IState): EncodedTokenizationResult => {\n\t\t\t\tconst tokensArr: number[] = [];\n\t\t\t\tlet prevColor = -1 as ColorId;\n\t\t\t\tfor (let i = 0; i < line.length; i++) {\n\t\t\t\t\tconst colorId = (line.charAt(i) === '.' ? 7 : 9) as ColorId;\n\t\t\t\t\tif (prevColor !== colorId) {\n\t\t\t\t\t\ttokensArr.push(i);\n\t\t\t\t\t\ttokensArr.push((\n\t\t\t\t\t\t\tcolorId << MetadataConsts.FOREGROUND_OFFSET\n\t\t\t\t\t\t) >>> 0);\n\t\t\t\t\t}\n\t\t\t\t\tprevColor = colorId;\n\t\t\t\t}\n\n\t\t\t\tconst tokens = new Uint32Array(tokensArr.length);\n\t\t\t\tfor (let i = 0; i < tokens.length; i++) {\n\t\t\t\t\ttokens[i] = tokensArr[i];\n\t\t\t\t}\n\t\t\t\treturn new EncodedTokenizationResult(tokens, null!);\n\t\t\t}\n\t\t}));\n\t}\n}\n"]}