{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/test/common/modes/supports/characterPair.test.ts"],"names":[],"mappings":"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","file":"characterPair.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { StandardTokenType } from 'vs/editor/common/encodedTokenAttributes';\nimport { StandardAutoClosingPairConditional } from 'vs/editor/common/languages/languageConfiguration';\nimport { CharacterPairSupport } from 'vs/editor/common/languages/supports/characterPair';\nimport { TokenText, createFakeScopedLineTokens } from 'vs/editor/test/common/modesTestUtils';\n\nsuite('CharacterPairSupport', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('only autoClosingPairs', () => {\n\t\tconst characaterPairSupport = new CharacterPairSupport({ autoClosingPairs: [{ open: 'a', close: 'b' }] });\n\t\tassert.deepStrictEqual(characaterPairSupport.getAutoClosingPairs(), [new StandardAutoClosingPairConditional({ open: 'a', close: 'b' })]);\n\t\tassert.deepStrictEqual(characaterPairSupport.getSurroundingPairs(), [new StandardAutoClosingPairConditional({ open: 'a', close: 'b' })]);\n\t});\n\n\ttest('only empty autoClosingPairs', () => {\n\t\tconst characaterPairSupport = new CharacterPairSupport({ autoClosingPairs: [] });\n\t\tassert.deepStrictEqual(characaterPairSupport.getAutoClosingPairs(), []);\n\t\tassert.deepStrictEqual(characaterPairSupport.getSurroundingPairs(), []);\n\t});\n\n\ttest('only brackets', () => {\n\t\tconst characaterPairSupport = new CharacterPairSupport({ brackets: [['a', 'b']] });\n\t\tassert.deepStrictEqual(characaterPairSupport.getAutoClosingPairs(), [new StandardAutoClosingPairConditional({ open: 'a', close: 'b' })]);\n\t\tassert.deepStrictEqual(characaterPairSupport.getSurroundingPairs(), [new StandardAutoClosingPairConditional({ open: 'a', close: 'b' })]);\n\t});\n\n\ttest('only empty brackets', () => {\n\t\tconst characaterPairSupport = new CharacterPairSupport({ brackets: [] });\n\t\tassert.deepStrictEqual(characaterPairSupport.getAutoClosingPairs(), []);\n\t\tassert.deepStrictEqual(characaterPairSupport.getSurroundingPairs(), []);\n\t});\n\n\ttest('only surroundingPairs', () => {\n\t\tconst characaterPairSupport = new CharacterPairSupport({ surroundingPairs: [{ open: 'a', close: 'b' }] });\n\t\tassert.deepStrictEqual(characaterPairSupport.getAutoClosingPairs(), []);\n\t\tassert.deepStrictEqual(characaterPairSupport.getSurroundingPairs(), [{ open: 'a', close: 'b' }]);\n\t});\n\n\ttest('only empty surroundingPairs', () => {\n\t\tconst characaterPairSupport = new CharacterPairSupport({ surroundingPairs: [] });\n\t\tassert.deepStrictEqual(characaterPairSupport.getAutoClosingPairs(), []);\n\t\tassert.deepStrictEqual(characaterPairSupport.getSurroundingPairs(), []);\n\t});\n\n\ttest('brackets is ignored when having autoClosingPairs', () => {\n\t\tconst characaterPairSupport = new CharacterPairSupport({ autoClosingPairs: [], brackets: [['a', 'b']] });\n\t\tassert.deepStrictEqual(characaterPairSupport.getAutoClosingPairs(), []);\n\t\tassert.deepStrictEqual(characaterPairSupport.getSurroundingPairs(), []);\n\t});\n\n\tfunction testShouldAutoClose(characterPairSupport: CharacterPairSupport, line: TokenText[], column: number): boolean {\n\t\tconst autoClosingPair = characterPairSupport.getAutoClosingPairs()[0];\n\t\treturn autoClosingPair.shouldAutoClose(createFakeScopedLineTokens(line), column);\n\t}\n\n\ttest('shouldAutoClosePair in empty line', () => {\n\t\tconst sup = new CharacterPairSupport({ autoClosingPairs: [{ open: '{', close: '}', notIn: ['string', 'comment'] }] });\n\t\tconst tokenText: TokenText[] = [];\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 1), true);\n\t});\n\n\ttest('shouldAutoClosePair in not interesting line 1', () => {\n\t\tconst sup = new CharacterPairSupport({ autoClosingPairs: [{ open: '{', close: '}', notIn: ['string', 'comment'] }] });\n\t\tconst tokenText: TokenText[] = [\n\t\t\t{ text: 'do', type: StandardTokenType.Other }\n\t\t];\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 3), true);\n\t});\n\n\ttest('shouldAutoClosePair in not interesting line 2', () => {\n\t\tconst sup = new CharacterPairSupport({ autoClosingPairs: [{ open: '{', close: '}' }] });\n\t\tconst tokenText: TokenText[] = [\n\t\t\t{ text: 'do', type: StandardTokenType.String }\n\t\t];\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 3), true);\n\t});\n\n\ttest('shouldAutoClosePair in interesting line 1', () => {\n\t\tconst sup = new CharacterPairSupport({ autoClosingPairs: [{ open: '{', close: '}', notIn: ['string', 'comment'] }] });\n\t\tconst tokenText: TokenText[] = [\n\t\t\t{ text: '\"a\"', type: StandardTokenType.String }\n\t\t];\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 1), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 2), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 3), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 4), false);\n\t});\n\n\ttest('shouldAutoClosePair in interesting line 2', () => {\n\t\tconst sup = new CharacterPairSupport({ autoClosingPairs: [{ open: '{', close: '}', notIn: ['string', 'comment'] }] });\n\t\tconst tokenText: TokenText[] = [\n\t\t\t{ text: 'x=', type: StandardTokenType.Other },\n\t\t\t{ text: '\"a\"', type: StandardTokenType.String },\n\t\t\t{ text: ';', type: StandardTokenType.Other }\n\t\t];\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 1), true);\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 2), true);\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 3), true);\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 4), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 5), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 6), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 7), true);\n\t});\n\n\ttest('shouldAutoClosePair in interesting line 3', () => {\n\t\tconst sup = new CharacterPairSupport({ autoClosingPairs: [{ open: '{', close: '}', notIn: ['string', 'comment'] }] });\n\t\tconst tokenText: TokenText[] = [\n\t\t\t{ text: ' ', type: StandardTokenType.Other },\n\t\t\t{ text: '//a', type: StandardTokenType.Comment }\n\t\t];\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 1), true);\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 2), true);\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 3), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 4), false);\n\t\tassert.strictEqual(testShouldAutoClose(sup, tokenText, 5), false);\n\t});\n\n});\n"]}