{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/test/common/modes/testLanguageConfigurationService.ts"],"names":[],"mappings":";;;;IASA,MAAa,IAAiC,SAAQ,eAAG;QAQxD;YACC,KAAK,EAAE,CAAC;YANQ,MAAC,GAAW,IAAI,CAAC,CAAC,CAAS,IAAI,mCAAG,EAA4B,CAAC,CAAC;YAEhE,MAAC,GAAc,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAA+C,CAAC,CAAC;YACvF,gBAAW,GAAG,IAAI,CAAC,CAAC,CAAY,KAAK,CAAC;YAIrD,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAS,WAAW,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAY,IAAI,CAAC,IAAI,mCAAG,CAAqC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;QACtI,CAAC;QAED,QAAQ,CAAC,UAAkB,EAAE,aAAoC,EAAE,QAAiB;YACnF,OAAO,IAAI,CAAC,CAAC,CAAS,QAAQ,CAAC,UAAU,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;QACrE,CAAC;QAED,wBAAwB,CAAC,UAAkB;YAC1C,OAAO,IAAI,CAAC,CAAC,CAAS,wBAAwB,CAAC,UAAU,CAAC;gBACzD,IAAI,mCAAG,CAA2B,SAAS,EAAE,EAAE,CAAC,CAAC;QACnD,CAAC;KACD;IArBD,oBAqBC","file":"testLanguageConfigurationService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { LanguageConfiguration } from 'vs/editor/common/languages/languageConfiguration';\nimport { ILanguageConfigurationService, LanguageConfigurationRegistry, LanguageConfigurationServiceChangeEvent, ResolvedLanguageConfiguration } from 'vs/editor/common/languages/languageConfigurationRegistry';\n\nexport class TestLanguageConfigurationService extends Disposable implements ILanguageConfigurationService {\n\t_serviceBrand: undefined;\n\n\tprivate readonly _registry = this._register(new LanguageConfigurationRegistry());\n\n\tprivate readonly _onDidChange = this._register(new Emitter<LanguageConfigurationServiceChangeEvent>());\n\tpublic readonly onDidChange = this._onDidChange.event;\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._register(this._registry.onDidChange((e) => this._onDidChange.fire(new LanguageConfigurationServiceChangeEvent(e.languageId))));\n\t}\n\n\tregister(languageId: string, configuration: LanguageConfiguration, priority?: number): IDisposable {\n\t\treturn this._registry.register(languageId, configuration, priority);\n\t}\n\n\tgetLanguageConfiguration(languageId: string): ResolvedLanguageConfiguration {\n\t\treturn this._registry.getLanguageConfiguration(languageId) ??\n\t\t\tnew ResolvedLanguageConfiguration('unknown', {});\n\t}\n}\n"]}