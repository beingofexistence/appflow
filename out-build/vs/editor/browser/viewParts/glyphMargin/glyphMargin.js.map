{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/browser/viewParts/glyphMargin/glyphMargin.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAchG;;;OAGG;IACH,MAAa,GAAG;QAQf,YAAY,eAAuB,EAAE,aAAqB,EAAE,SAAiB,EAAE,MAA0B;YAPzG,6BAAwB,GAAS,SAAS,CAAC;YAQ1C,IAAI,CAAC,eAAe,GAAG,CAAC,eAAe,CAAC;YACxC,IAAI,CAAC,aAAa,GAAG,CAAC,aAAa,CAAC;YACpC,IAAI,CAAC,SAAS,GAAG,MAAM,CAAC,SAAS,CAAC,CAAC;YACnC,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,CAAC,CAAC;QAC3B,CAAC;KACD;IAdD,kBAcC;IAED;;OAEG;IACH,MAAa,GAAG;QACf,YACiB,SAAiB,EACjB,MAAc;YADd,cAAS,GAAT,SAAS,CAAQ;YACjB,WAAM,GAAN,MAAM,CAAQ;QAC3B,CAAC;KACL;IALD,kBAKC;IAED;;OAEG;IACH,MAAa,GAAG;QAAhB;YAEkB,MAAC,GAAuC,EAAE,CAAC;QAS7D,CAAC;QAPO,GAAG,CAAC,UAAe;YACzB,IAAI,CAAC,CAAC,CAAW,IAAI,CAAC,UAAU,CAAC,CAAC;QACnC,CAAC;QAEM,cAAc;YACpB,OAAO,IAAI,CAAC,CAAC,CAAW;QACzB,CAAC;KACD;IAXD,kBAWC;IAED,MAAsB,GAAa,SAAQ,wBAAG;QAE7C;;WAEG;QACO,CAAC,CAAO,sBAA8B,EAAE,oBAA4B,EAAE,WAAiC;YAEhH,MAAM,MAAM,GAAqC,EAAE,CAAC;YACpD,KAAK,IAAI,UAAU,GAAG,sBAAsB,EAAE,UAAU,IAAI,oBAAoB,EAAE,UAAU,EAAE,EAAE;gBAC/F,MAAM,SAAS,GAAG,UAAU,GAAG,sBAAsB,CAAC;gBACtD,MAAM,CAAC,SAAS,CAAC,GAAG,IAAI,GAAG,EAA6B,CAAC;aACzD;YAED,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC7B,OAAO,MAAM,CAAC;aACd;YAED,mFAAmF;YACnF,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBACzB,IAAI,CAAC,CAAC,SAAS,KAAK,CAAC,CAAC,SAAS,EAAE;oBAChC,IAAI,CAAC,CAAC,eAAe,KAAK,CAAC,CAAC,eAAe,EAAE;wBAC5C,OAAO,CAAC,CAAC,aAAa,GAAG,CAAC,CAAC,aAAa,CAAC;qBACzC;oBACD,OAAO,CAAC,CAAC,eAAe,GAAG,CAAC,CAAC,eAAe,CAAC;iBAC7C;gBACD,OAAO,CAAC,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7C,CAAC,CAAC,CAAC;YAEH,IAAI,aAAa,GAAkB,IAAI,CAAC;YACxC,IAAI,gBAAgB,GAAG,CAAC,CAAC;YACzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBACvD,MAAM,CAAC,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC;gBACzB,MAAM,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC;gBAC9B,MAAM,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;gBACxB,IAAI,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,eAAe,EAAE,sBAAsB,CAAC,GAAG,sBAAsB,CAAC;gBAClG,MAAM,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,aAAa,EAAE,oBAAoB,CAAC,GAAG,sBAAsB,CAAC;gBAE9F,IAAI,aAAa,KAAK,SAAS,EAAE;oBAChC,6EAA6E;oBAC7E,cAAc,GAAG,IAAI,CAAC,GAAG,CAAC,gBAAgB,GAAG,CAAC,EAAE,cAAc,CAAC,CAAC;oBAChE,gBAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,gBAAgB,EAAE,YAAY,CAAC,CAAC;iBAC5D;qBAAM;oBACN,aAAa,GAAG,SAAS,CAAC;oBAC1B,gBAAgB,GAAG,YAAY,CAAC;iBAChC;gBAED,KAAK,IAAI,CAAC,GAAG,cAAc,EAAE,CAAC,IAAI,gBAAgB,EAAE,CAAC,EAAE,EAAE;oBACxD,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,GAAG,CAAoB,SAAS,EAAE,MAAM,CAAC,CAAC,CAAC;iBAC7D;aACD;YAED,OAAO,MAAM,CAAC;QACf,CAAC;KACD;IArDD,kBAqDC;IAED,MAAa,GAAmB,SAAQ,cAAG;QAe1C,YAAY,OAAY;YACvB,KAAK,CAAC,OAAO,CAAC,CAAC;YAHR,MAAC,GAA0C,EAAE,CAAC;YAIrD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;YAExB,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC;YACpD,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,mCAAyB,CAAC;YAExD,IAAI,CAAC,OAAO,GAAG,IAAA,iBAAG,EAAe,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;YAChE,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,sBAAsB,CAAC,CAAC;YAClD,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;YACrC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YAEvB,IAAI,CAAC,CAAC,GAAa,OAAO,CAAC,GAAG,kCAAyB,CAAC;YACxD,IAAI,CAAC,CAAC,GAAc,OAAO,CAAC,GAAG,mCAA0B,CAAC;YAC1D,IAAI,CAAC,CAAC,GAAkB,UAAU,CAAC,eAAe,CAAC;YACnD,IAAI,CAAC,CAAC,GAAmB,UAAU,CAAC,gBAAgB,CAAC;YACrD,IAAI,CAAC,CAAC,GAAiC,UAAU,CAAC,8BAA8B,CAAC;YACjF,IAAI,CAAC,CAAC,GAAkB,EAAE,CAAC;YAC3B,IAAI,CAAC,CAAC,GAA2B,EAAE,CAAC;QACrC,CAAC;QAEe,OAAO;YACtB,IAAI,CAAC,CAAC,GAAkB,EAAE,CAAC;YAC3B,IAAI,CAAC,CAAC,GAA2B,EAAE,CAAC;YACpC,IAAI,CAAC,CAAC,GAAU,EAAE,CAAC;YACnB,KAAK,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC;QAEM,UAAU;YAChB,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAQ,CAAC;QACrC,CAAC;QAED,2BAA2B;QACX,sBAAsB,CAAC,CAAiB;YACvD,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,OAAO,CAAC;YACpD,MAAM,UAAU,GAAG,OAAO,CAAC,GAAG,mCAAyB,CAAC;YAExD,IAAI,CAAC,CAAC,GAAa,OAAO,CAAC,GAAG,kCAAyB,CAAC;YACxD,IAAI,CAAC,CAAC,GAAc,OAAO,CAAC,GAAG,mCAA0B,CAAC;YAC1D,IAAI,CAAC,CAAC,GAAkB,UAAU,CAAC,eAAe,CAAC;YACnD,IAAI,CAAC,CAAC,GAAmB,UAAU,CAAC,gBAAgB,CAAC;YACrD,IAAI,CAAC,CAAC,GAAiC,UAAU,CAAC,8BAA8B,CAAC;YACjF,OAAO,IAAI,CAAC;QACb,CAAC;QACe,oBAAoB,CAAC,CAAiB;YACrD,OAAO,IAAI,CAAC;QACb,CAAC;QACe,SAAS,CAAC,CAAiB;YAC1C,OAAO,IAAI,CAAC;QACb,CAAC;QACe,cAAc,CAAC,CAAiB;YAC/C,OAAO,IAAI,CAAC;QACb,CAAC;QACe,cAAc,CAAC,CAAiB;YAC/C,OAAO,IAAI,CAAC;QACb,CAAC;QACe,eAAe,CAAC,CAAiB;YAChD,OAAO,IAAI,CAAC;QACb,CAAC;QACe,eAAe,CAAC,CAAiB;YAChD,OAAO,CAAC,CAAC,gBAAgB,CAAC;QAC3B,CAAC;QACe,cAAc,CAAC,CAAiB;YAC/C,OAAO,IAAI,CAAC;QACb,CAAC;QAED,yBAAyB;QAEzB,8BAA8B;QAEvB,SAAS,CAAC,MAA0B;YAC1C,MAAM,OAAO,GAAG,IAAA,iBAAG,EAAe,MAAM,CAAC,UAAU,EAAE,CAAC,CAAC;YAEvD,IAAI,CAAC,CAAC,CAAQ,MAAM,CAAC,KAAK,EAAE,CAAC,GAAG;gBAC/B,MAAM,EAAE,MAAM;gBACd,UAAU,EAAE,MAAM,CAAC,WAAW,EAAE;gBAChC,OAAO,EAAE,OAAO;gBAChB,UAAU,EAAE,IAAI;aAChB,CAAC;YAEF,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;YAChC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;YAC3B,OAAO,CAAC,YAAY,CAAC,UAAU,EAAE,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;YACjD,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;YAElC,IAAI,CAAC,CAAC,EAAgB,CAAC;QACxB,CAAC;QAEM,iBAAiB,CAAC,MAA0B,EAAE,UAAsC;YAC1F,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAQ,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC;YAC/C,IAAI,QAAQ,CAAC,UAAU,CAAC,IAAI,KAAK,UAAU,CAAC,IAAI;mBAC5C,QAAQ,CAAC,UAAU,CAAC,MAAM,KAAK,UAAU,CAAC,MAAM;mBAChD,WAAG,CAAG,WAAW,CAAC,QAAQ,CAAC,UAAU,CAAC,KAAK,EAAE,UAAU,CAAC,KAAK,CAAC,EAAE;gBACnE,OAAO,KAAK,CAAC;aACb;YAED,QAAQ,CAAC,UAAU,GAAG,UAAU,CAAC;YACjC,IAAI,CAAC,CAAC,EAAgB,CAAC;YAEvB,OAAO,IAAI,CAAC;QACb,CAAC;QAEM,YAAY,CAAC,MAA0B;YAC7C,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;YAChC,IAAI,IAAI,CAAC,CAAC,CAAQ,QAAQ,CAAC,EAAE;gBAC5B,MAAM,UAAU,GAAG,IAAI,CAAC,CAAC,CAAQ,QAAQ,CAAC,CAAC;gBAC3C,MAAM,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC;gBAC3C,OAAO,IAAI,CAAC,CAAC,CAAQ,QAAQ,CAAC,CAAC;gBAE/B,OAAO,CAAC,UAAU,EAAE,WAAW,CAAC,OAAO,CAAC,CAAC;gBACzC,IAAI,CAAC,CAAC,EAAgB,CAAC;aACvB;QACF,CAAC;QAED,4BAA4B;QAEpB,CAAC,CAAyC,GAAQ,EAAe,QAA8B;YACtG,MAAM,sBAAsB,GAAG,GAAG,CAAC,YAAY,CAAC,eAAe,CAAC;YAChE,MAAM,oBAAoB,GAAG,GAAG,CAAC,YAAY,CAAC,aAAa,CAAC;YAC5D,MAAM,WAAW,GAAG,GAAG,CAAC,wBAAwB,EAAE,CAAC;YAEnD,KAAK,MAAM,CAAC,IAAI,WAAW,EAAE;gBAC5B,MAAM,oBAAoB,GAAG,CAAC,CAAC,OAAO,CAAC,oBAAoB,CAAC;gBAC5D,IAAI,CAAC,oBAAoB,EAAE;oBAC1B,SAAS;iBACT;gBAED,MAAM,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,eAAe,EAAE,sBAAsB,CAAC,CAAC;gBAClF,MAAM,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;gBAC5E,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,EAAE,QAAQ,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC,CAA+B,CAAC;gBAClG,MAAM,MAAM,GAAG,CAAC,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,CAAC;gBAErC,KAAK,IAAI,UAAU,GAAG,eAAe,EAAE,UAAU,IAAI,aAAa,EAAE,UAAU,EAAE,EAAE;oBACjF,QAAQ,CAAC,IAAI,CAAC,IAAI,iCAAiC,CAAC,UAAU,EAAE,IAAI,EAAE,MAAM,EAAE,oBAAoB,CAAC,CAAC,CAAC;iBACrG;aACD;QACF,CAAC;QAEO,CAAC,CAAqC,GAAQ,EAAe,QAA8B;YAClG,MAAM,sBAAsB,GAAG,GAAG,CAAC,YAAY,CAAC,eAAe,CAAC;YAChE,MAAM,oBAAoB,GAAG,GAAG,CAAC,YAAY,CAAC,aAAa,CAAC;YAE5D,KAAK,MAAM,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAQ,EAAE;gBAClD,MAAM,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC;gBACtC,IAAI,KAAK,CAAC,aAAa,GAAG,sBAAsB,IAAI,KAAK,CAAC,eAAe,GAAG,oBAAoB,EAAE;oBACjG,oCAAoC;oBACpC,SAAS;iBACT;gBAED,yDAAyD;gBACzD,MAAM,gBAAgB,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,eAAe,EAAE,sBAAsB,CAAC,CAAC;gBACjF,MAAM,IAAI,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAA+B,CAAC;gBACpF,QAAQ,CAAC,IAAI,CAAC,IAAI,6BAA6B,CAAC,gBAAgB,EAAE,IAAI,EAAE,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;aAC3G;QACF,CAAC;QAEO,CAAC,CAAiC,GAAQ;YAEjD,MAAM,QAAQ,GAAyB,EAAE,CAAC;YAE1C,IAAI,CAAC,CAAC,CAAyC,GAAG,EAAE,QAAQ,CAAC,CAAC;YAC9D,IAAI,CAAC,CAAC,CAAqC,GAAG,EAAE,QAAQ,CAAC,CAAC;YAE1D,oGAAoG;YACpG,sEAAsE;YACtE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBACtB,IAAI,CAAC,CAAC,UAAU,KAAK,CAAC,CAAC,UAAU,EAAE;oBAClC,IAAI,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,EAAE;wBACtB,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,EAAE;4BAC1B,IAAI,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,EAAE;gCACtB,IAAI,CAAC,CAAC,IAAI,8CAAsC,IAAI,CAAC,CAAC,IAAI,8CAAsC,EAAE;oCACjG,OAAO,CAAC,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;iCAC5C;gCACD,OAAO,CAAC,CAAC;6BACT;4BACD,OAAO,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;yBACvB;wBACD,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;qBAC3B;oBACD,OAAO,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC;iBACvB;gBACD,OAAO,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,UAAU,CAAC;YACpC,CAAC,CAAC,CAAC;YAEH,OAAO,QAAQ,CAAC;QACjB,CAAC;QAED;;WAEG;QACI,aAAa,CAAC,GAAQ;YAC5B,IAAI,CAAC,IAAI,CAAC,CAAC,EAAa;gBACvB,IAAI,CAAC,CAAC,GAA2B,EAAE,CAAC;gBACpC,OAAO;aACP;YAED,KAAK,MAAM,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAQ,EAAE;gBAClD,MAAM,CAAC,UAAU,GAAG,IAAI,CAAC;aACzB;YAED,MAAM,QAAQ,GAAG,IAAI,YAAG,CAA4B,IAAI,CAAC,CAAC,CAAiC,GAAG,CAAC,CAAC,CAAC;YACjG,MAAM,wBAAwB,GAA2B,EAAE,CAAC;YAC5D,OAAO,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC3B,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;gBAC9B,IAAI,CAAC,KAAK,EAAE;oBACX,eAAe;oBACf,MAAM;iBACN;gBAED,mGAAmG;gBACnG,MAAM,kBAAkB,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,UAAU,KAAK,KAAK,CAAC,UAAU,IAAI,EAAE,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC,CAAC;gBACpH,IAAI,CAAC,kBAAkB,IAAI,kBAAkB,CAAC,MAAM,KAAK,CAAC,EAAE;oBAC3D,eAAe;oBACf,MAAM;iBACN;gBAED,MAAM,MAAM,GAAG,kBAAkB,CAAC,CAAC,CAAC,CAAC;gBACrC,IAAI,MAAM,CAAC,IAAI,8CAAsC,EAAE;oBACtD,gDAAgD;oBAEhD,MAAM,UAAU,GAAa,EAAE,CAAC;oBAChC,8GAA8G;oBAC9G,KAAK,MAAM,OAAO,IAAI,kBAAkB,EAAE;wBACzC,IAAI,OAAO,CAAC,MAAM,KAAK,MAAM,CAAC,MAAM,IAAI,OAAO,CAAC,IAAI,KAAK,MAAM,CAAC,IAAI,EAAE;4BACrE,MAAM;yBACN;wBACD,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,IAAI,UAAU,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,OAAO,CAAC,SAAS,EAAE;4BACvF,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;yBACnC;qBACD;oBAED,wBAAwB,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,8DAA8D;iBAClI;qBAAM;oBACN,6BAA6B;oBAC7B,MAAM,CAAC,MAAM,CAAC,UAAU,GAAG;wBAC1B,UAAU,EAAE,MAAM,CAAC,UAAU;wBAC7B,IAAI,EAAE,MAAM,CAAC,IAAI;qBACjB,CAAC;iBACF;aACD;YACD,IAAI,CAAC,CAAC,GAA2B,wBAAwB,CAAC;QAC3D,CAAC;QAEM,MAAM,CAAC,GAAQ;YACrB,IAAI,CAAC,IAAI,CAAC,CAAC,EAAa;gBACvB,KAAK,MAAM,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAQ,EAAE;oBAClD,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;iBAClC;gBACD,OAAO,IAAI,CAAC,CAAC,CAAgB,MAAM,GAAG,CAAC,EAAE;oBACxC,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAgB,GAAG,EAAE,CAAC;oBAC5C,OAAO,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC;iBAC1B;gBACD,OAAO;aACP;YAED,MAAM,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,GAAmB,IAAI,CAAC,CAAC,CAA+B,CAAC,CAAC;YAE1F,iBAAiB;YACjB,KAAK,MAAM,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAQ,EAAE;gBAClD,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE;oBACvB,6BAA6B;oBAC7B,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;iBAClC;qBAAM;oBACN,MAAM,GAAG,GAAG,GAAG,CAAC,YAAY,CAAC,sBAAsB,CAAC,MAAM,CAAC,UAAU,CAAC,UAAU,GAAG,GAAG,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;oBACrH,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,GAAkB,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAW;oBAErF,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;oBACnC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;oBAC3B,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;oBAC7B,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;oBAC/B,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAW,CAAC;iBAC3C;aACD;YAED,6DAA6D;YAC7D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAyB,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC/D,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAyB,CAAC,CAAC,CAAC;gBAC9C,MAAM,GAAG,GAAG,GAAG,CAAC,YAAY,CAAC,sBAAsB,CAAC,GAAG,CAAC,UAAU,GAAG,GAAG,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;gBACvG,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,GAAkB,CAAC,GAAG,CAAC,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAW;gBAEvE,IAAI,OAAiC,CAAC;gBACtC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAgB,MAAM,EAAE;oBACrC,OAAO,GAAG,IAAI,CAAC,CAAC,CAAgB,CAAC,CAAC,CAAC;iBACnC;qBAAM;oBACN,OAAO,GAAG,IAAA,iBAAG,EAAe,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC3D,IAAI,CAAC,CAAC,CAAgB,IAAI,CAAC,OAAO,CAAC,CAAC;oBACpC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;iBAClC;gBAED,OAAO,CAAC,YAAY,CAAC,eAAe,GAAG,GAAG,CAAC,iBAAiB,CAAC,CAAC;gBAC9D,OAAO,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;gBAChC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gBACpB,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBACtB,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gBACxB,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAW,CAAC;aACpC;YAED,yBAAyB;YACzB,OAAO,IAAI,CAAC,CAAC,CAAgB,MAAM,GAAG,IAAI,CAAC,CAAC,CAAyB,MAAM,EAAE;gBAC5E,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAgB,GAAG,EAAE,CAAC;gBAC5C,OAAO,EAAE,OAAO,CAAC,MAAM,EAAE,CAAC;aAC1B;QACF,CAAC;KACD;IA9TD,kBA8TC;IAkBD,IAAW,sBAGV;IAHD,WAAW,sBAAsB;QAChC,+EAAc,CAAA;QACd,uEAAU,CAAA;IACX,CAAC,EAHU,sBAAsB,KAAtB,sBAAsB,QAGhC;IAED;;OAEG;IACH,MAAM,iCAAiC;QAGtC,YACiB,UAAkB,EAClB,IAAY,EACZ,MAAc,EACd,SAAiB;YAHjB,eAAU,GAAV,UAAU,CAAQ;YAClB,SAAI,GAAJ,IAAI,CAAQ;YACZ,WAAM,GAAN,MAAM,CAAQ;YACd,cAAS,GAAT,SAAS,CAAQ;YANlB,SAAI,6CAAqC;QAOrD,CAAC;QAEL,MAAM,CAAC,iBAAyB;YAC/B,OAAO,IAAI,oBAAoB,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,EAAE,iBAAiB,CAAC,CAAC;QAChF,CAAC;KACD;IAED;;OAEG;IACH,MAAM,6BAA6B;QAGlC,YACiB,UAAkB,EAClB,IAAY,EACZ,MAAc,EACd,MAAmB;YAHnB,eAAU,GAAV,UAAU,CAAQ;YAClB,SAAI,GAAJ,IAAI,CAAQ;YACZ,WAAM,GAAN,MAAM,CAAQ;YACd,WAAM,GAAN,MAAM,CAAa;YANpB,SAAI,yCAAiC;QAOjD,CAAC;KACL;IAID,MAAM,oBAAoB;QACzB,YACiB,UAAkB,EAClB,IAAY,EACZ,iBAAyB;YAFzB,eAAU,GAAV,UAAU,CAAQ;YAClB,SAAI,GAAJ,IAAI,CAAQ;YACZ,sBAAiB,GAAjB,iBAAiB,CAAQ;QACtC,CAAC;KACL","file":"glyphMargin.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { FastDomNode, createFastDomNode } from 'vs/base/browser/fastDomNode';\nimport { ArrayQueue } from 'vs/base/common/arrays';\nimport 'vs/css!./glyphMargin';\nimport { IGlyphMarginWidget, IGlyphMarginWidgetPosition } from 'vs/editor/browser/editorBrowser';\nimport { DynamicViewOverlay } from 'vs/editor/browser/view/dynamicViewOverlay';\nimport { RenderingContext, RestrictedRenderingContext } from 'vs/editor/browser/view/renderingContext';\nimport { ViewPart } from 'vs/editor/browser/view/viewPart';\nimport { EditorOption } from 'vs/editor/common/config/editorOptions';\nimport { Range } from 'vs/editor/common/core/range';\nimport * as viewEvents from 'vs/editor/common/viewEvents';\nimport { ViewContext } from 'vs/editor/common/viewModel/viewContext';\n\n/**\n * Represents a decoration that should be shown along the lines from `startLineNumber` to `endLineNumber`.\n * This can end up producing multiple `LineDecorationToRender`.\n */\nexport class DecorationToRender {\n\t_decorationToRenderBrand: void = undefined;\n\n\tpublic startLineNumber: number;\n\tpublic endLineNumber: number;\n\tpublic className: string;\n\tpublic readonly zIndex: number;\n\n\tconstructor(startLineNumber: number, endLineNumber: number, className: string, zIndex: number | undefined) {\n\t\tthis.startLineNumber = +startLineNumber;\n\t\tthis.endLineNumber = +endLineNumber;\n\t\tthis.className = String(className);\n\t\tthis.zIndex = zIndex ?? 0;\n\t}\n}\n\n/**\n * A decoration that should be shown along a line.\n */\nexport class LineDecorationToRender {\n\tconstructor(\n\t\tpublic readonly className: string,\n\t\tpublic readonly zIndex: number,\n\t) { }\n}\n\n/**\n * Decorations to render on a visible line.\n */\nexport class VisibleLineDecorationsToRender {\n\n\tprivate readonly decorations: LineDecorationToRender[] = [];\n\n\tpublic add(decoration: LineDecorationToRender) {\n\t\tthis.decorations.push(decoration);\n\t}\n\n\tpublic getDecorations(): LineDecorationToRender[] {\n\t\treturn this.decorations;\n\t}\n}\n\nexport abstract class DedupOverlay extends DynamicViewOverlay {\n\n\t/**\n\t * Returns an array with an element for each visible line number.\n\t */\n\tprotected _render(visibleStartLineNumber: number, visibleEndLineNumber: number, decorations: DecorationToRender[]): VisibleLineDecorationsToRender[] {\n\n\t\tconst output: VisibleLineDecorationsToRender[] = [];\n\t\tfor (let lineNumber = visibleStartLineNumber; lineNumber <= visibleEndLineNumber; lineNumber++) {\n\t\t\tconst lineIndex = lineNumber - visibleStartLineNumber;\n\t\t\toutput[lineIndex] = new VisibleLineDecorationsToRender();\n\t\t}\n\n\t\tif (decorations.length === 0) {\n\t\t\treturn output;\n\t\t}\n\n\t\t// Sort decorations by className, then by startLineNumber and then by endLineNumber\n\t\tdecorations.sort((a, b) => {\n\t\t\tif (a.className === b.className) {\n\t\t\t\tif (a.startLineNumber === b.startLineNumber) {\n\t\t\t\t\treturn a.endLineNumber - b.endLineNumber;\n\t\t\t\t}\n\t\t\t\treturn a.startLineNumber - b.startLineNumber;\n\t\t\t}\n\t\t\treturn (a.className < b.className ? -1 : 1);\n\t\t});\n\n\t\tlet prevClassName: string | null = null;\n\t\tlet prevEndLineIndex = 0;\n\t\tfor (let i = 0, len = decorations.length; i < len; i++) {\n\t\t\tconst d = decorations[i];\n\t\t\tconst className = d.className;\n\t\t\tconst zIndex = d.zIndex;\n\t\t\tlet startLineIndex = Math.max(d.startLineNumber, visibleStartLineNumber) - visibleStartLineNumber;\n\t\t\tconst endLineIndex = Math.min(d.endLineNumber, visibleEndLineNumber) - visibleStartLineNumber;\n\n\t\t\tif (prevClassName === className) {\n\t\t\t\t// Here we avoid rendering the same className multiple times on the same line\n\t\t\t\tstartLineIndex = Math.max(prevEndLineIndex + 1, startLineIndex);\n\t\t\t\tprevEndLineIndex = Math.max(prevEndLineIndex, endLineIndex);\n\t\t\t} else {\n\t\t\t\tprevClassName = className;\n\t\t\t\tprevEndLineIndex = endLineIndex;\n\t\t\t}\n\n\t\t\tfor (let i = startLineIndex; i <= prevEndLineIndex; i++) {\n\t\t\t\toutput[i].add(new LineDecorationToRender(className, zIndex));\n\t\t\t}\n\t\t}\n\n\t\treturn output;\n\t}\n}\n\nexport class GlyphMarginWidgets extends ViewPart {\n\n\tpublic domNode: FastDomNode<HTMLElement>;\n\n\tprivate _lineHeight: number;\n\tprivate _glyphMargin: boolean;\n\tprivate _glyphMarginLeft: number;\n\tprivate _glyphMarginWidth: number;\n\tprivate _glyphMarginDecorationLaneCount: number;\n\n\tprivate _managedDomNodes: FastDomNode<HTMLElement>[];\n\tprivate _decorationGlyphsToRender: DecorationBasedGlyph[];\n\n\tprivate _widgets: { [key: string]: IWidgetData } = {};\n\n\tconstructor(context: ViewContext) {\n\t\tsuper(context);\n\t\tthis._context = context;\n\n\t\tconst options = this._context.configuration.options;\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\n\t\tthis.domNode = createFastDomNode(document.createElement('div'));\n\t\tthis.domNode.setClassName('glyph-margin-widgets');\n\t\tthis.domNode.setPosition('absolute');\n\t\tthis.domNode.setTop(0);\n\n\t\tthis._lineHeight = options.get(EditorOption.lineHeight);\n\t\tthis._glyphMargin = options.get(EditorOption.glyphMargin);\n\t\tthis._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n\t\tthis._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n\t\tthis._glyphMarginDecorationLaneCount = layoutInfo.glyphMarginDecorationLaneCount;\n\t\tthis._managedDomNodes = [];\n\t\tthis._decorationGlyphsToRender = [];\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._managedDomNodes = [];\n\t\tthis._decorationGlyphsToRender = [];\n\t\tthis._widgets = {};\n\t\tsuper.dispose();\n\t}\n\n\tpublic getWidgets(): IWidgetData[] {\n\t\treturn Object.values(this._widgets);\n\t}\n\n\t// --- begin event handlers\n\tpublic override onConfigurationChanged(e: viewEvents.ViewConfigurationChangedEvent): boolean {\n\t\tconst options = this._context.configuration.options;\n\t\tconst layoutInfo = options.get(EditorOption.layoutInfo);\n\n\t\tthis._lineHeight = options.get(EditorOption.lineHeight);\n\t\tthis._glyphMargin = options.get(EditorOption.glyphMargin);\n\t\tthis._glyphMarginLeft = layoutInfo.glyphMarginLeft;\n\t\tthis._glyphMarginWidth = layoutInfo.glyphMarginWidth;\n\t\tthis._glyphMarginDecorationLaneCount = layoutInfo.glyphMarginDecorationLaneCount;\n\t\treturn true;\n\t}\n\tpublic override onDecorationsChanged(e: viewEvents.ViewDecorationsChangedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onFlushed(e: viewEvents.ViewFlushedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onLinesChanged(e: viewEvents.ViewLinesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onLinesDeleted(e: viewEvents.ViewLinesDeletedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onLinesInserted(e: viewEvents.ViewLinesInsertedEvent): boolean {\n\t\treturn true;\n\t}\n\tpublic override onScrollChanged(e: viewEvents.ViewScrollChangedEvent): boolean {\n\t\treturn e.scrollTopChanged;\n\t}\n\tpublic override onZonesChanged(e: viewEvents.ViewZonesChangedEvent): boolean {\n\t\treturn true;\n\t}\n\n\t// --- end event handlers\n\n\t// --- begin widget management\n\n\tpublic addWidget(widget: IGlyphMarginWidget): void {\n\t\tconst domNode = createFastDomNode(widget.getDomNode());\n\n\t\tthis._widgets[widget.getId()] = {\n\t\t\twidget: widget,\n\t\t\tpreference: widget.getPosition(),\n\t\t\tdomNode: domNode,\n\t\t\trenderInfo: null\n\t\t};\n\n\t\tdomNode.setPosition('absolute');\n\t\tdomNode.setDisplay('none');\n\t\tdomNode.setAttribute('widgetId', widget.getId());\n\t\tthis.domNode.appendChild(domNode);\n\n\t\tthis.setShouldRender();\n\t}\n\n\tpublic setWidgetPosition(widget: IGlyphMarginWidget, preference: IGlyphMarginWidgetPosition): boolean {\n\t\tconst myWidget = this._widgets[widget.getId()];\n\t\tif (myWidget.preference.lane === preference.lane\n\t\t\t&& myWidget.preference.zIndex === preference.zIndex\n\t\t\t&& Range.equalsRange(myWidget.preference.range, preference.range)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tmyWidget.preference = preference;\n\t\tthis.setShouldRender();\n\n\t\treturn true;\n\t}\n\n\tpublic removeWidget(widget: IGlyphMarginWidget): void {\n\t\tconst widgetId = widget.getId();\n\t\tif (this._widgets[widgetId]) {\n\t\t\tconst widgetData = this._widgets[widgetId];\n\t\t\tconst domNode = widgetData.domNode.domNode;\n\t\t\tdelete this._widgets[widgetId];\n\n\t\t\tdomNode.parentNode?.removeChild(domNode);\n\t\t\tthis.setShouldRender();\n\t\t}\n\t}\n\n\t// --- end widget management\n\n\tprivate _collectDecorationBasedGlyphRenderRequest(ctx: RenderingContext, requests: GlyphRenderRequest[]): void {\n\t\tconst visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n\t\tconst visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\t\tconst decorations = ctx.getDecorationsInViewport();\n\n\t\tfor (const d of decorations) {\n\t\t\tconst glyphMarginClassName = d.options.glyphMarginClassName;\n\t\t\tif (!glyphMarginClassName) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst startLineNumber = Math.max(d.range.startLineNumber, visibleStartLineNumber);\n\t\t\tconst endLineNumber = Math.min(d.range.endLineNumber, visibleEndLineNumber);\n\t\t\tconst lane = Math.min(d.options.glyphMargin?.position ?? 1, this._glyphMarginDecorationLaneCount);\n\t\t\tconst zIndex = d.options.zIndex ?? 0;\n\n\t\t\tfor (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n\t\t\t\trequests.push(new DecorationBasedGlyphRenderRequest(lineNumber, lane, zIndex, glyphMarginClassName));\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _collectWidgetBasedGlyphRenderRequest(ctx: RenderingContext, requests: GlyphRenderRequest[]): void {\n\t\tconst visibleStartLineNumber = ctx.visibleRange.startLineNumber;\n\t\tconst visibleEndLineNumber = ctx.visibleRange.endLineNumber;\n\n\t\tfor (const widget of Object.values(this._widgets)) {\n\t\t\tconst range = widget.preference.range;\n\t\t\tif (range.endLineNumber < visibleStartLineNumber || range.startLineNumber > visibleEndLineNumber) {\n\t\t\t\t// The widget is not in the viewport\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// The widget is in the viewport, find a good line for it\n\t\t\tconst widgetLineNumber = Math.max(range.startLineNumber, visibleStartLineNumber);\n\t\t\tconst lane = Math.min(widget.preference.lane, this._glyphMarginDecorationLaneCount);\n\t\t\trequests.push(new WidgetBasedGlyphRenderRequest(widgetLineNumber, lane, widget.preference.zIndex, widget));\n\t\t}\n\t}\n\n\tprivate _collectSortedGlyphRenderRequests(ctx: RenderingContext): GlyphRenderRequest[] {\n\n\t\tconst requests: GlyphRenderRequest[] = [];\n\n\t\tthis._collectDecorationBasedGlyphRenderRequest(ctx, requests);\n\t\tthis._collectWidgetBasedGlyphRenderRequest(ctx, requests);\n\n\t\t// sort requests by lineNumber ASC, lane  ASC, zIndex DESC, type DESC (widgets first), className ASC\n\t\t// don't change this sort unless you understand `prepareRender` below.\n\t\trequests.sort((a, b) => {\n\t\t\tif (a.lineNumber === b.lineNumber) {\n\t\t\t\tif (a.lane === b.lane) {\n\t\t\t\t\tif (a.zIndex === b.zIndex) {\n\t\t\t\t\t\tif (b.type === a.type) {\n\t\t\t\t\t\t\tif (a.type === GlyphRenderRequestType.Decoration && b.type === GlyphRenderRequestType.Decoration) {\n\t\t\t\t\t\t\t\treturn (a.className < b.className ? -1 : 1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn b.type - a.type;\n\t\t\t\t\t}\n\t\t\t\t\treturn b.zIndex - a.zIndex;\n\t\t\t\t}\n\t\t\t\treturn a.lane - b.lane;\n\t\t\t}\n\t\t\treturn a.lineNumber - b.lineNumber;\n\t\t});\n\n\t\treturn requests;\n\t}\n\n\t/**\n\t * Will store render information in each widget's renderInfo and in `_decorationGlyphsToRender`.\n\t */\n\tpublic prepareRender(ctx: RenderingContext): void {\n\t\tif (!this._glyphMargin) {\n\t\t\tthis._decorationGlyphsToRender = [];\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const widget of Object.values(this._widgets)) {\n\t\t\twidget.renderInfo = null;\n\t\t}\n\n\t\tconst requests = new ArrayQueue<GlyphRenderRequest>(this._collectSortedGlyphRenderRequests(ctx));\n\t\tconst decorationGlyphsToRender: DecorationBasedGlyph[] = [];\n\t\twhile (requests.length > 0) {\n\t\t\tconst first = requests.peek();\n\t\t\tif (!first) {\n\t\t\t\t// not possible\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Requests are sorted by lineNumber and lane, so we read all requests for this particular location\n\t\t\tconst requestsAtLocation = requests.takeWhile((el) => el.lineNumber === first.lineNumber && el.lane === first.lane);\n\t\t\tif (!requestsAtLocation || requestsAtLocation.length === 0) {\n\t\t\t\t// not possible\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst winner = requestsAtLocation[0];\n\t\t\tif (winner.type === GlyphRenderRequestType.Decoration) {\n\t\t\t\t// combine all decorations with the same z-index\n\n\t\t\t\tconst classNames: string[] = [];\n\t\t\t\t// requests are sorted by zIndex, type, and className so we can dedup className by looking at the previous one\n\t\t\t\tfor (const request of requestsAtLocation) {\n\t\t\t\t\tif (request.zIndex !== winner.zIndex || request.type !== winner.type) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (classNames.length === 0 || classNames[classNames.length - 1] !== request.className) {\n\t\t\t\t\t\tclassNames.push(request.className);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tdecorationGlyphsToRender.push(winner.accept(classNames.join(' '))); // TODO@joyceerhl Implement overflow for remaining decorations\n\t\t\t} else {\n\t\t\t\t// widgets cannot be combined\n\t\t\t\twinner.widget.renderInfo = {\n\t\t\t\t\tlineNumber: winner.lineNumber,\n\t\t\t\t\tlane: winner.lane,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\tthis._decorationGlyphsToRender = decorationGlyphsToRender;\n\t}\n\n\tpublic render(ctx: RestrictedRenderingContext): void {\n\t\tif (!this._glyphMargin) {\n\t\t\tfor (const widget of Object.values(this._widgets)) {\n\t\t\t\twidget.domNode.setDisplay('none');\n\t\t\t}\n\t\t\twhile (this._managedDomNodes.length > 0) {\n\t\t\t\tconst domNode = this._managedDomNodes.pop();\n\t\t\t\tdomNode?.domNode.remove();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tconst width = (Math.round(this._glyphMarginWidth / this._glyphMarginDecorationLaneCount));\n\n\t\t// Render widgets\n\t\tfor (const widget of Object.values(this._widgets)) {\n\t\t\tif (!widget.renderInfo) {\n\t\t\t\t// this widget is not visible\n\t\t\t\twidget.domNode.setDisplay('none');\n\t\t\t} else {\n\t\t\t\tconst top = ctx.viewportData.relativeVerticalOffset[widget.renderInfo.lineNumber - ctx.viewportData.startLineNumber];\n\t\t\t\tconst left = this._glyphMarginLeft + (widget.renderInfo.lane - 1) * this._lineHeight;\n\n\t\t\t\twidget.domNode.setDisplay('block');\n\t\t\t\twidget.domNode.setTop(top);\n\t\t\t\twidget.domNode.setLeft(left);\n\t\t\t\twidget.domNode.setWidth(width);\n\t\t\t\twidget.domNode.setHeight(this._lineHeight);\n\t\t\t}\n\t\t}\n\n\t\t// Render decorations, reusing previous dom nodes as possible\n\t\tfor (let i = 0; i < this._decorationGlyphsToRender.length; i++) {\n\t\t\tconst dec = this._decorationGlyphsToRender[i];\n\t\t\tconst top = ctx.viewportData.relativeVerticalOffset[dec.lineNumber - ctx.viewportData.startLineNumber];\n\t\t\tconst left = this._glyphMarginLeft + (dec.lane - 1) * this._lineHeight;\n\n\t\t\tlet domNode: FastDomNode<HTMLElement>;\n\t\t\tif (i < this._managedDomNodes.length) {\n\t\t\t\tdomNode = this._managedDomNodes[i];\n\t\t\t} else {\n\t\t\t\tdomNode = createFastDomNode(document.createElement('div'));\n\t\t\t\tthis._managedDomNodes.push(domNode);\n\t\t\t\tthis.domNode.appendChild(domNode);\n\t\t\t}\n\n\t\t\tdomNode.setClassName(`cgmr codicon ` + dec.combinedClassName);\n\t\t\tdomNode.setPosition(`absolute`);\n\t\t\tdomNode.setTop(top);\n\t\t\tdomNode.setLeft(left);\n\t\t\tdomNode.setWidth(width);\n\t\t\tdomNode.setHeight(this._lineHeight);\n\t\t}\n\n\t\t// remove extra dom nodes\n\t\twhile (this._managedDomNodes.length > this._decorationGlyphsToRender.length) {\n\t\t\tconst domNode = this._managedDomNodes.pop();\n\t\t\tdomNode?.domNode.remove();\n\t\t}\n\t}\n}\n\nexport interface IWidgetData {\n\twidget: IGlyphMarginWidget;\n\tpreference: IGlyphMarginWidgetPosition;\n\tdomNode: FastDomNode<HTMLElement>;\n\t/**\n\t * it will contain the location where to render the widget\n\t * or null if the widget is not visible\n\t */\n\trenderInfo: IRenderInfo | null;\n}\n\nexport interface IRenderInfo {\n\tlineNumber: number;\n\tlane: number;\n}\n\nconst enum GlyphRenderRequestType {\n\tDecoration = 0,\n\tWidget = 1\n}\n\n/**\n * A request to render a decoration in the glyph margin at a certain location.\n */\nclass DecorationBasedGlyphRenderRequest {\n\tpublic readonly type = GlyphRenderRequestType.Decoration;\n\n\tconstructor(\n\t\tpublic readonly lineNumber: number,\n\t\tpublic readonly lane: number,\n\t\tpublic readonly zIndex: number,\n\t\tpublic readonly className: string,\n\t) { }\n\n\taccept(combinedClassName: string): DecorationBasedGlyph {\n\t\treturn new DecorationBasedGlyph(this.lineNumber, this.lane, combinedClassName);\n\t}\n}\n\n/**\n * A request to render a widget in the glyph margin at a certain location.\n */\nclass WidgetBasedGlyphRenderRequest {\n\tpublic readonly type = GlyphRenderRequestType.Widget;\n\n\tconstructor(\n\t\tpublic readonly lineNumber: number,\n\t\tpublic readonly lane: number,\n\t\tpublic readonly zIndex: number,\n\t\tpublic readonly widget: IWidgetData,\n\t) { }\n}\n\ntype GlyphRenderRequest = DecorationBasedGlyphRenderRequest | WidgetBasedGlyphRenderRequest;\n\nclass DecorationBasedGlyph {\n\tconstructor(\n\t\tpublic readonly lineNumber: number,\n\t\tpublic readonly lane: number,\n\t\tpublic readonly combinedClassName: string\n\t) { }\n}\n"]}