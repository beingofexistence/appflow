{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/browser/viewParts/minimap/minimapCharSheet.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAEhG,IAAkB,SAcjB;IAdD,WAAkB,SAAS;QAC1B,4DAAkB,CAAA;QAClB,yDAAiB,CAAA;QACjB,6DAAoB,CAAA;QACpB,sDAA4C,CAAA;QAE5C,wEAAwB,CAAA;QACxB,sEAAuB,CAAA;QAEvB,iEAAoB,CAAA;QACpB,+DAAmB,CAAA;QAEnB,mEAAqB,CAAA;QACrB,gFAA4E,CAAA;IAC7E,CAAC,EAdiB,SAAS,yBAAT,SAAS,QAc1B;IAEY,QAAA,GAAG,GAAmC,CAAC,GAAG,EAAE;QACxD,MAAM,CAAC,GAAa,EAAE,CAAC;QACvB,KAAK,IAAI,CAAC,mCAA0B,EAAE,CAAC,mCAAyB,EAAE,CAAC,EAAE,EAAE;YACtE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACV;QAED,CAAC,CAAC,IAAI,oCAAwB,CAAC;QAC/B,OAAO,CAAC,CAAC;IACV,CAAC,CAAC,EAAE,CAAC;IAEE,MAAM,GAAG,GAAY,CAAC,MAAc,EAAE,SAAiB,EAAE,EAAE;QACjE,MAAM,oCAA2B,CAAC;QAClC,IAAI,MAAM,GAAG,CAAC,IAAI,MAAM,gCAAuB,EAAE;YAChD,IAAI,SAAS,IAAI,CAAC,EAAE;gBACnB,wEAAwE;gBACxE,OAAO,CAAC,MAAM,gCAAuB,CAAC,gCAAuB,CAAC;aAC9D;YACD,OAAO,gCAAuB,CAAC,CAAC,CAAC,iBAAiB;SAClD;QAED,OAAO,MAAM,CAAC;IACf,CAAC,CAAC;IAXW,QAAA,GAAG,OAWd","file":"minimapCharSheet.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport const enum Constants {\n\tSTART_CH_CODE = 32, // Space\n\tEND_CH_CODE = 126, // Tilde (~)\n\tUNKNOWN_CODE = 65533, // UTF placeholder code\n\tCHAR_COUNT = END_CH_CODE - START_CH_CODE + 2,\n\n\tSAMPLED_CHAR_HEIGHT = 16,\n\tSAMPLED_CHAR_WIDTH = 10,\n\n\tBASE_CHAR_HEIGHT = 2,\n\tBASE_CHAR_WIDTH = 1,\n\n\tRGBA_CHANNELS_CNT = 4,\n\tRGBA_SAMPLED_ROW_WIDTH = RGBA_CHANNELS_CNT * CHAR_COUNT * SAMPLED_CHAR_WIDTH\n}\n\nexport const allCharCodes: ReadonlyArray<number> = (() => {\n\tconst v: number[] = [];\n\tfor (let i = Constants.START_CH_CODE; i <= Constants.END_CH_CODE; i++) {\n\t\tv.push(i);\n\t}\n\n\tv.push(Constants.UNKNOWN_CODE);\n\treturn v;\n})();\n\nexport const getCharIndex = (chCode: number, fontScale: number) => {\n\tchCode -= Constants.START_CH_CODE;\n\tif (chCode < 0 || chCode > Constants.CHAR_COUNT) {\n\t\tif (fontScale <= 2) {\n\t\t\t// for smaller scales, we can get away with using any ASCII character...\n\t\t\treturn (chCode + Constants.CHAR_COUNT) % Constants.CHAR_COUNT;\n\t\t}\n\t\treturn Constants.CHAR_COUNT - 1; // unknown symbol\n\t}\n\n\treturn chCode;\n};\n"]}