{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/browser/controller/textAreaInput.ts"],"names":[],"mappings":"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","file":"textAreaInput.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as browser from 'vs/base/browser/browser';\nimport * as dom from 'vs/base/browser/dom';\nimport { DomEmitter } from 'vs/base/browser/event';\nimport { IKeyboardEvent, StandardKeyboardEvent } from 'vs/base/browser/keyboardEvent';\nimport { inputLatency } from 'vs/base/browser/performance';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { KeyCode } from 'vs/base/common/keyCodes';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { Mimes } from 'vs/base/common/mime';\nimport { OperatingSystem } from 'vs/base/common/platform';\nimport * as strings from 'vs/base/common/strings';\nimport { ITextAreaWrapper, ITypeData, TextAreaState, _debugComposition } from 'vs/editor/browser/controller/textAreaState';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Selection } from 'vs/editor/common/core/selection';\n\nexport namespace TextAreaSyntethicEvents {\n\texport const Tap = '-monaco-textarea-synthetic-tap';\n}\n\nexport interface ICompositionData {\n\tdata: string;\n}\n\nexport const CopyOptions = {\n\tforceCopyWithSyntaxHighlighting: false\n};\n\nexport interface IPasteData {\n\ttext: string;\n\tmetadata: ClipboardStoredMetadata | null;\n}\n\nexport interface ClipboardDataToCopy {\n\tisFromEmptySelection: boolean;\n\tmulticursorText: string[] | null | undefined;\n\ttext: string;\n\thtml: string | null | undefined;\n\tmode: string | null;\n}\n\nexport interface ClipboardStoredMetadata {\n\tversion: 1;\n\tisFromEmptySelection: boolean | undefined;\n\tmulticursorText: string[] | null | undefined;\n\tmode: string | null;\n}\n\nexport interface ITextAreaInputHost {\n\tgetDataToCopy(): ClipboardDataToCopy;\n\tgetScreenReaderContent(): TextAreaState;\n\tdeduceModelPosition(viewAnchorPosition: Position, deltaOffset: number, lineFeedCnt: number): Position;\n}\n\ninterface InMemoryClipboardMetadata {\n\tlastCopiedValue: string;\n\tdata: ClipboardStoredMetadata;\n}\n\n/**\n * Every time we write to the clipboard, we record a bit of extra metadata here.\n * Every time we read from the cipboard, if the text matches our last written text,\n * we can fetch the previous metadata.\n */\nexport class InMemoryClipboardMetadataManager {\n\tpublic static readonly INSTANCE = new InMemoryClipboardMetadataManager();\n\n\tprivate _lastState: InMemoryClipboardMetadata | null;\n\n\tconstructor() {\n\t\tthis._lastState = null;\n\t}\n\n\tpublic set(lastCopiedValue: string, data: ClipboardStoredMetadata): void {\n\t\tthis._lastState = { lastCopiedValue, data };\n\t}\n\n\tpublic get(pastedText: string): ClipboardStoredMetadata | null {\n\t\tif (this._lastState && this._lastState.lastCopiedValue === pastedText) {\n\t\t\t// match!\n\t\t\treturn this._lastState.data;\n\t\t}\n\t\tthis._lastState = null;\n\t\treturn null;\n\t}\n}\n\nexport interface ICompositionStartEvent {\n\tdata: string;\n}\n\nexport interface ICompleteTextAreaWrapper extends ITextAreaWrapper {\n\treadonly onKeyDown: Event<KeyboardEvent>;\n\treadonly onKeyPress: Event<KeyboardEvent>;\n\treadonly onKeyUp: Event<KeyboardEvent>;\n\treadonly onCompositionStart: Event<CompositionEvent>;\n\treadonly onCompositionUpdate: Event<CompositionEvent>;\n\treadonly onCompositionEnd: Event<CompositionEvent>;\n\treadonly onBeforeInput: Event<InputEvent>;\n\treadonly onInput: Event<InputEvent>;\n\treadonly onCut: Event<ClipboardEvent>;\n\treadonly onCopy: Event<ClipboardEvent>;\n\treadonly onPaste: Event<ClipboardEvent>;\n\treadonly onFocus: Event<FocusEvent>;\n\treadonly onBlur: Event<FocusEvent>;\n\treadonly onSyntheticTap: Event<void>;\n\n\treadonly ownerDocument: Document;\n\n\tsetIgnoreSelectionChangeTime(reason: string): void;\n\tgetIgnoreSelectionChangeTime(): number;\n\tresetSelectionChangeTime(): void;\n\n\thasFocus(): boolean;\n}\n\nexport interface IBrowser {\n\tisAndroid: boolean;\n\tisFirefox: boolean;\n\tisChrome: boolean;\n\tisSafari: boolean;\n}\n\nclass CompositionContext {\n\n\tprivate _lastTypeTextLength: number;\n\n\tconstructor() {\n\t\tthis._lastTypeTextLength = 0;\n\t}\n\n\tpublic handleCompositionUpdate(text: string | null | undefined): ITypeData {\n\t\ttext = text || '';\n\t\tconst typeInput: ITypeData = {\n\t\t\ttext: text,\n\t\t\treplacePrevCharCnt: this._lastTypeTextLength,\n\t\t\treplaceNextCharCnt: 0,\n\t\t\tpositionDelta: 0\n\t\t};\n\t\tthis._lastTypeTextLength = text.length;\n\t\treturn typeInput;\n\t}\n}\n\n/**\n * Writes screen reader content to the textarea and is able to analyze its input events to generate:\n *  - onCut\n *  - onPaste\n *  - onType\n *\n * Composition events are generated for presentation purposes (composition input is reflected in onType).\n */\nexport class TextAreaInput extends Disposable {\n\n\tprivate _onFocus = this._register(new Emitter<void>());\n\tpublic readonly onFocus: Event<void> = this._onFocus.event;\n\n\tprivate _onBlur = this._register(new Emitter<void>());\n\tpublic readonly onBlur: Event<void> = this._onBlur.event;\n\n\tprivate _onKeyDown = this._register(new Emitter<IKeyboardEvent>());\n\tpublic readonly onKeyDown: Event<IKeyboardEvent> = this._onKeyDown.event;\n\n\tprivate _onKeyUp = this._register(new Emitter<IKeyboardEvent>());\n\tpublic readonly onKeyUp: Event<IKeyboardEvent> = this._onKeyUp.event;\n\n\tprivate _onCut = this._register(new Emitter<void>());\n\tpublic readonly onCut: Event<void> = this._onCut.event;\n\n\tprivate _onPaste = this._register(new Emitter<IPasteData>());\n\tpublic readonly onPaste: Event<IPasteData> = this._onPaste.event;\n\n\tprivate _onType = this._register(new Emitter<ITypeData>());\n\tpublic readonly onType: Event<ITypeData> = this._onType.event;\n\n\tprivate _onCompositionStart = this._register(new Emitter<ICompositionStartEvent>());\n\tpublic readonly onCompositionStart: Event<ICompositionStartEvent> = this._onCompositionStart.event;\n\n\tprivate _onCompositionUpdate = this._register(new Emitter<ICompositionData>());\n\tpublic readonly onCompositionUpdate: Event<ICompositionData> = this._onCompositionUpdate.event;\n\n\tprivate _onCompositionEnd = this._register(new Emitter<void>());\n\tpublic readonly onCompositionEnd: Event<void> = this._onCompositionEnd.event;\n\n\tprivate _onSelectionChangeRequest = this._register(new Emitter<Selection>());\n\tpublic readonly onSelectionChangeRequest: Event<Selection> = this._onSelectionChangeRequest.event;\n\n\t// ---\n\n\tprivate readonly _asyncTriggerCut: RunOnceScheduler;\n\tprivate readonly _asyncFocusGainWriteScreenReaderContent: RunOnceScheduler;\n\n\tprivate _textAreaState: TextAreaState;\n\n\tpublic get textAreaState(): TextAreaState {\n\t\treturn this._textAreaState;\n\t}\n\n\tprivate _selectionChangeListener: IDisposable | null;\n\n\tprivate _hasFocus: boolean;\n\tprivate _currentComposition: CompositionContext | null;\n\n\tconstructor(\n\t\tprivate readonly _host: ITextAreaInputHost,\n\t\tprivate readonly _textArea: ICompleteTextAreaWrapper,\n\t\tprivate readonly _OS: OperatingSystem,\n\t\tprivate readonly _browser: IBrowser\n\t) {\n\t\tsuper();\n\t\tthis._asyncTriggerCut = this._register(new RunOnceScheduler(() => this._onCut.fire(), 0));\n\t\tthis._asyncFocusGainWriteScreenReaderContent = this._register(new RunOnceScheduler(() => this.writeScreenReaderContent('asyncFocusGain'), 0));\n\n\t\tthis._textAreaState = TextAreaState.EMPTY;\n\t\tthis._selectionChangeListener = null;\n\t\tthis.writeScreenReaderContent('ctor');\n\n\t\tthis._hasFocus = false;\n\t\tthis._currentComposition = null;\n\n\t\tlet lastKeyDown: IKeyboardEvent | null = null;\n\n\t\tthis._register(this._textArea.onKeyDown((_e) => {\n\t\t\tconst e = new StandardKeyboardEvent(_e);\n\t\t\tif (e.keyCode === KeyCode.KEY_IN_COMPOSITION\n\t\t\t\t|| (this._currentComposition && e.keyCode === KeyCode.Backspace)) {\n\t\t\t\t// Stop propagation for keyDown events if the IME is processing key input\n\t\t\t\te.stopPropagation();\n\t\t\t}\n\n\t\t\tif (e.equals(KeyCode.Escape)) {\n\t\t\t\t// Prevent default always for `Esc`, otherwise it will generate a keypress\n\t\t\t\t// See https://msdn.microsoft.com/en-us/library/ie/ms536939(v=vs.85).aspx\n\t\t\t\te.preventDefault();\n\t\t\t}\n\n\t\t\tlastKeyDown = e;\n\t\t\tthis._onKeyDown.fire(e);\n\t\t}));\n\n\t\tthis._register(this._textArea.onKeyUp((_e) => {\n\t\t\tconst e = new StandardKeyboardEvent(_e);\n\t\t\tthis._onKeyUp.fire(e);\n\t\t}));\n\n\t\tthis._register(this._textArea.onCompositionStart((e) => {\n\t\t\tif (_debugComposition) {\n\t\t\t\tconsole.log(`[compositionstart]`, e);\n\t\t\t}\n\n\t\t\tconst currentComposition = new CompositionContext();\n\t\t\tif (this._currentComposition) {\n\t\t\t\t// simply reset the composition context\n\t\t\t\tthis._currentComposition = currentComposition;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._currentComposition = currentComposition;\n\n\t\t\tif (\n\t\t\t\tthis._OS === OperatingSystem.Macintosh\n\t\t\t\t&& lastKeyDown\n\t\t\t\t&& lastKeyDown.equals(KeyCode.KEY_IN_COMPOSITION)\n\t\t\t\t&& this._textAreaState.selectionStart === this._textAreaState.selectionEnd\n\t\t\t\t&& this._textAreaState.selectionStart > 0\n\t\t\t\t&& this._textAreaState.value.substr(this._textAreaState.selectionStart - 1, 1) === e.data\n\t\t\t\t&& (lastKeyDown.code === 'ArrowRight' || lastKeyDown.code === 'ArrowLeft')\n\t\t\t) {\n\t\t\t\t// Handling long press case on Chromium/Safari macOS + arrow key => pretend the character was selected\n\t\t\t\tif (_debugComposition) {\n\t\t\t\t\tconsole.log(`[compositionstart] Handling long press case on macOS + arrow key`, e);\n\t\t\t\t}\n\t\t\t\t// Pretend the previous character was composed (in order to get it removed by subsequent compositionupdate events)\n\t\t\t\tcurrentComposition.handleCompositionUpdate('x');\n\t\t\t\tthis._onCompositionStart.fire({ data: e.data });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this._browser.isAndroid) {\n\t\t\t\t// when tapping on the editor, Android enters composition mode to edit the current word\n\t\t\t\t// so we cannot clear the textarea on Android and we must pretend the current word was selected\n\t\t\t\tthis._onCompositionStart.fire({ data: e.data });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._onCompositionStart.fire({ data: e.data });\n\t\t}));\n\n\t\tthis._register(this._textArea.onCompositionUpdate((e) => {\n\t\t\tif (_debugComposition) {\n\t\t\t\tconsole.log(`[compositionupdate]`, e);\n\t\t\t}\n\t\t\tconst currentComposition = this._currentComposition;\n\t\t\tif (!currentComposition) {\n\t\t\t\t// should not be possible to receive a 'compositionupdate' without a 'compositionstart'\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this._browser.isAndroid) {\n\t\t\t\t// On Android, the data sent with the composition update event is unusable.\n\t\t\t\t// For example, if the cursor is in the middle of a word like Mic|osoft\n\t\t\t\t// and Microsoft is chosen from the keyboard's suggestions, the e.data will contain \"Microsoft\".\n\t\t\t\t// This is not really usable because it doesn't tell us where the edit began and where it ended.\n\t\t\t\tconst newState = TextAreaState.readFromTextArea(this._textArea, this._textAreaState);\n\t\t\t\tconst typeInput = TextAreaState.deduceAndroidCompositionInput(this._textAreaState, newState);\n\t\t\t\tthis._textAreaState = newState;\n\t\t\t\tthis._onType.fire(typeInput);\n\t\t\t\tthis._onCompositionUpdate.fire(e);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst typeInput = currentComposition.handleCompositionUpdate(e.data);\n\t\t\tthis._textAreaState = TextAreaState.readFromTextArea(this._textArea, this._textAreaState);\n\t\t\tthis._onType.fire(typeInput);\n\t\t\tthis._onCompositionUpdate.fire(e);\n\t\t}));\n\n\t\tthis._register(this._textArea.onCompositionEnd((e) => {\n\t\t\tif (_debugComposition) {\n\t\t\t\tconsole.log(`[compositionend]`, e);\n\t\t\t}\n\t\t\tconst currentComposition = this._currentComposition;\n\t\t\tif (!currentComposition) {\n\t\t\t\t// https://github.com/microsoft/monaco-editor/issues/1663\n\t\t\t\t// On iOS 13.2, Chinese system IME randomly trigger an additional compositionend event with empty data\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._currentComposition = null;\n\n\t\t\tif (this._browser.isAndroid) {\n\t\t\t\t// On Android, the data sent with the composition update event is unusable.\n\t\t\t\t// For example, if the cursor is in the middle of a word like Mic|osoft\n\t\t\t\t// and Microsoft is chosen from the keyboard's suggestions, the e.data will contain \"Microsoft\".\n\t\t\t\t// This is not really usable because it doesn't tell us where the edit began and where it ended.\n\t\t\t\tconst newState = TextAreaState.readFromTextArea(this._textArea, this._textAreaState);\n\t\t\t\tconst typeInput = TextAreaState.deduceAndroidCompositionInput(this._textAreaState, newState);\n\t\t\t\tthis._textAreaState = newState;\n\t\t\t\tthis._onType.fire(typeInput);\n\t\t\t\tthis._onCompositionEnd.fire();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst typeInput = currentComposition.handleCompositionUpdate(e.data);\n\t\t\tthis._textAreaState = TextAreaState.readFromTextArea(this._textArea, this._textAreaState);\n\t\t\tthis._onType.fire(typeInput);\n\t\t\tthis._onCompositionEnd.fire();\n\t\t}));\n\n\t\tthis._register(this._textArea.onInput((e) => {\n\t\t\tif (_debugComposition) {\n\t\t\t\tconsole.log(`[input]`, e);\n\t\t\t}\n\n\t\t\t// Pretend here we touched the text area, as the `input` event will most likely\n\t\t\t// result in a `selectionchange` event which we want to ignore\n\t\t\tthis._textArea.setIgnoreSelectionChangeTime('received input event');\n\n\t\t\tif (this._currentComposition) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst newState = TextAreaState.readFromTextArea(this._textArea, this._textAreaState);\n\t\t\tconst typeInput = TextAreaState.deduceInput(this._textAreaState, newState, /*couldBeEmojiInput*/this._OS === OperatingSystem.Macintosh);\n\n\t\t\tif (typeInput.replacePrevCharCnt === 0 && typeInput.text.length === 1) {\n\t\t\t\t// one character was typed\n\t\t\t\tif (\n\t\t\t\t\tstrings.isHighSurrogate(typeInput.text.charCodeAt(0))\n\t\t\t\t\t|| typeInput.text.charCodeAt(0) === 0x7f /* Delete */\n\t\t\t\t) {\n\t\t\t\t\t// Ignore invalid input but keep it around for next time\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._textAreaState = newState;\n\t\t\tif (\n\t\t\t\ttypeInput.text !== ''\n\t\t\t\t|| typeInput.replacePrevCharCnt !== 0\n\t\t\t\t|| typeInput.replaceNextCharCnt !== 0\n\t\t\t\t|| typeInput.positionDelta !== 0\n\t\t\t) {\n\t\t\t\tthis._onType.fire(typeInput);\n\t\t\t}\n\t\t}));\n\n\t\t// --- Clipboard operations\n\n\t\tthis._register(this._textArea.onCut((e) => {\n\t\t\t// Pretend here we touched the text area, as the `cut` event will most likely\n\t\t\t// result in a `selectionchange` event which we want to ignore\n\t\t\tthis._textArea.setIgnoreSelectionChangeTime('received cut event');\n\n\t\t\tthis._ensureClipboardGetsEditorSelection(e);\n\t\t\tthis._asyncTriggerCut.schedule();\n\t\t}));\n\n\t\tthis._register(this._textArea.onCopy((e) => {\n\t\t\tthis._ensureClipboardGetsEditorSelection(e);\n\t\t}));\n\n\t\tthis._register(this._textArea.onPaste((e) => {\n\t\t\t// Pretend here we touched the text area, as the `paste` event will most likely\n\t\t\t// result in a `selectionchange` event which we want to ignore\n\t\t\tthis._textArea.setIgnoreSelectionChangeTime('received paste event');\n\n\t\t\te.preventDefault();\n\n\t\t\tif (!e.clipboardData) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet [text, metadata] = ClipboardEventUtils.getTextData(e.clipboardData);\n\t\t\tif (!text) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// try the in-memory store\n\t\t\tmetadata = metadata || InMemoryClipboardMetadataManager.INSTANCE.get(text);\n\n\t\t\tthis._onPaste.fire({\n\t\t\t\ttext: text,\n\t\t\t\tmetadata: metadata\n\t\t\t});\n\t\t}));\n\n\t\tthis._register(this._textArea.onFocus(() => {\n\t\t\tconst hadFocus = this._hasFocus;\n\n\t\t\tthis._setHasFocus(true);\n\n\t\t\tif (this._browser.isSafari && !hadFocus && this._hasFocus) {\n\t\t\t\t// When \"tabbing into\" the textarea, immediately after dispatching the 'focus' event,\n\t\t\t\t// Safari will always move the selection at offset 0 in the textarea\n\t\t\t\tthis._asyncFocusGainWriteScreenReaderContent.schedule();\n\t\t\t}\n\t\t}));\n\t\tthis._register(this._textArea.onBlur(() => {\n\t\t\tif (this._currentComposition) {\n\t\t\t\t// See https://github.com/microsoft/vscode/issues/112621\n\t\t\t\t// where compositionend is not triggered when the editor\n\t\t\t\t// is taken off-dom during a composition\n\n\t\t\t\t// Clear the flag to be able to write to the textarea\n\t\t\t\tthis._currentComposition = null;\n\n\t\t\t\t// Clear the textarea to avoid an unwanted cursor type\n\t\t\t\tthis.writeScreenReaderContent('blurWithoutCompositionEnd');\n\n\t\t\t\t// Fire artificial composition end\n\t\t\t\tthis._onCompositionEnd.fire();\n\t\t\t}\n\t\t\tthis._setHasFocus(false);\n\t\t}));\n\t\tthis._register(this._textArea.onSyntheticTap(() => {\n\t\t\tif (this._browser.isAndroid && this._currentComposition) {\n\t\t\t\t// on Android, tapping does not cancel the current composition, so the\n\t\t\t\t// textarea is stuck showing the old composition\n\n\t\t\t\t// Clear the flag to be able to write to the textarea\n\t\t\t\tthis._currentComposition = null;\n\n\t\t\t\t// Clear the textarea to avoid an unwanted cursor type\n\t\t\t\tthis.writeScreenReaderContent('tapWithoutCompositionEnd');\n\n\t\t\t\t// Fire artificial composition end\n\t\t\t\tthis._onCompositionEnd.fire();\n\t\t\t}\n\t\t}));\n\t}\n\n\t_initializeFromTest(): void {\n\t\tthis._hasFocus = true;\n\t\tthis._textAreaState = TextAreaState.readFromTextArea(this._textArea, null);\n\t}\n\n\tprivate _installSelectionChangeListener(): IDisposable {\n\t\t// See https://github.com/microsoft/vscode/issues/27216 and https://github.com/microsoft/vscode/issues/98256\n\t\t// When using a Braille display, it is possible for users to reposition the\n\t\t// system caret. This is reflected in Chrome as a `selectionchange` event.\n\t\t//\n\t\t// The `selectionchange` event appears to be emitted under numerous other circumstances,\n\t\t// so it is quite a challenge to distinguish a `selectionchange` coming in from a user\n\t\t// using a Braille display from all the other cases.\n\t\t//\n\t\t// The problems with the `selectionchange` event are:\n\t\t//  * the event is emitted when the textarea is focused programmatically -- textarea.focus()\n\t\t//  * the event is emitted when the selection is changed in the textarea programmatically -- textarea.setSelectionRange(...)\n\t\t//  * the event is emitted when the value of the textarea is changed programmatically -- textarea.value = '...'\n\t\t//  * the event is emitted when tabbing into the textarea\n\t\t//  * the event is emitted asynchronously (sometimes with a delay as high as a few tens of ms)\n\t\t//  * the event sometimes comes in bursts for a single logical textarea operation\n\n\t\t// `selectionchange` events often come multiple times for a single logical change\n\t\t// so throttle multiple `selectionchange` events that burst in a short period of time.\n\t\tlet previousSelectionChangeEventTime = 0;\n\t\treturn dom.addDisposableListener(this._textArea.ownerDocument, 'selectionchange', (e) => {//todo\n\t\t\tinputLatency.onSelectionChange();\n\n\t\t\tif (!this._hasFocus) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this._currentComposition) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!this._browser.isChrome) {\n\t\t\t\t// Support only for Chrome until testing happens on other browsers\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst now = Date.now();\n\n\t\t\tconst delta1 = now - previousSelectionChangeEventTime;\n\t\t\tpreviousSelectionChangeEventTime = now;\n\t\t\tif (delta1 < 5) {\n\t\t\t\t// received another `selectionchange` event within 5ms of the previous `selectionchange` event\n\t\t\t\t// => ignore it\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst delta2 = now - this._textArea.getIgnoreSelectionChangeTime();\n\t\t\tthis._textArea.resetSelectionChangeTime();\n\t\t\tif (delta2 < 100) {\n\t\t\t\t// received a `selectionchange` event within 100ms since we touched the textarea\n\t\t\t\t// => ignore it, since we caused it\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!this._textAreaState.selection) {\n\t\t\t\t// Cannot correlate a position in the textarea with a position in the editor...\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst newValue = this._textArea.getValue();\n\t\t\tif (this._textAreaState.value !== newValue) {\n\t\t\t\t// Cannot correlate a position in the textarea with a position in the editor...\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst newSelectionStart = this._textArea.getSelectionStart();\n\t\t\tconst newSelectionEnd = this._textArea.getSelectionEnd();\n\t\t\tif (this._textAreaState.selectionStart === newSelectionStart && this._textAreaState.selectionEnd === newSelectionEnd) {\n\t\t\t\t// Nothing to do...\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst _newSelectionStartPosition = this._textAreaState.deduceEditorPosition(newSelectionStart);\n\t\t\tconst newSelectionStartPosition = this._host.deduceModelPosition(_newSelectionStartPosition[0]!, _newSelectionStartPosition[1], _newSelectionStartPosition[2]);\n\n\t\t\tconst _newSelectionEndPosition = this._textAreaState.deduceEditorPosition(newSelectionEnd);\n\t\t\tconst newSelectionEndPosition = this._host.deduceModelPosition(_newSelectionEndPosition[0]!, _newSelectionEndPosition[1], _newSelectionEndPosition[2]);\n\n\t\t\tconst newSelection = new Selection(\n\t\t\t\tnewSelectionStartPosition.lineNumber, newSelectionStartPosition.column,\n\t\t\t\tnewSelectionEndPosition.lineNumber, newSelectionEndPosition.column\n\t\t\t);\n\n\t\t\tthis._onSelectionChangeRequest.fire(newSelection);\n\t\t});\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t\tif (this._selectionChangeListener) {\n\t\t\tthis._selectionChangeListener.dispose();\n\t\t\tthis._selectionChangeListener = null;\n\t\t}\n\t}\n\n\tpublic focusTextArea(): void {\n\t\t// Setting this._hasFocus and writing the screen reader content\n\t\t// will result in a focus() and setSelectionRange() in the textarea\n\t\tthis._setHasFocus(true);\n\n\t\t// If the editor is off DOM, focus cannot be really set, so let's double check that we have managed to set the focus\n\t\tthis.refreshFocusState();\n\t}\n\n\tpublic isFocused(): boolean {\n\t\treturn this._hasFocus;\n\t}\n\n\tpublic refreshFocusState(): void {\n\t\tthis._setHasFocus(this._textArea.hasFocus());\n\t}\n\n\tprivate _setHasFocus(newHasFocus: boolean): void {\n\t\tif (this._hasFocus === newHasFocus) {\n\t\t\t// no change\n\t\t\treturn;\n\t\t}\n\t\tthis._hasFocus = newHasFocus;\n\n\t\tif (this._selectionChangeListener) {\n\t\t\tthis._selectionChangeListener.dispose();\n\t\t\tthis._selectionChangeListener = null;\n\t\t}\n\t\tif (this._hasFocus) {\n\t\t\tthis._selectionChangeListener = this._installSelectionChangeListener();\n\t\t}\n\n\t\tif (this._hasFocus) {\n\t\t\tthis.writeScreenReaderContent('focusgain');\n\t\t}\n\n\t\tif (this._hasFocus) {\n\t\t\tthis._onFocus.fire();\n\t\t} else {\n\t\t\tthis._onBlur.fire();\n\t\t}\n\t}\n\n\tprivate _setAndWriteTextAreaState(reason: string, textAreaState: TextAreaState): void {\n\t\tif (!this._hasFocus) {\n\t\t\ttextAreaState = textAreaState.collapseSelection();\n\t\t}\n\n\t\ttextAreaState.writeToTextArea(reason, this._textArea, this._hasFocus);\n\t\tthis._textAreaState = textAreaState;\n\t}\n\n\tpublic writeScreenReaderContent(reason: string): void {\n\t\tif (this._currentComposition) {\n\t\t\t// Do not write to the text area when doing composition\n\t\t\treturn;\n\t\t}\n\n\t\tthis._setAndWriteTextAreaState(reason, this._host.getScreenReaderContent());\n\t}\n\n\tprivate _ensureClipboardGetsEditorSelection(e: ClipboardEvent): void {\n\t\tconst dataToCopy = this._host.getDataToCopy();\n\t\tconst storedMetadata: ClipboardStoredMetadata = {\n\t\t\tversion: 1,\n\t\t\tisFromEmptySelection: dataToCopy.isFromEmptySelection,\n\t\t\tmulticursorText: dataToCopy.multicursorText,\n\t\t\tmode: dataToCopy.mode\n\t\t};\n\t\tInMemoryClipboardMetadataManager.INSTANCE.set(\n\t\t\t// When writing \"LINE\\r\\n\" to the clipboard and then pasting,\n\t\t\t// Firefox pastes \"LINE\\n\", so let's work around this quirk\n\t\t\t(this._browser.isFirefox ? dataToCopy.text.replace(/\\r\\n/g, '\\n') : dataToCopy.text),\n\t\t\tstoredMetadata\n\t\t);\n\n\t\te.preventDefault();\n\t\tif (e.clipboardData) {\n\t\t\tClipboardEventUtils.setTextData(e.clipboardData, dataToCopy.text, dataToCopy.html, storedMetadata);\n\t\t}\n\t}\n}\n\nexport const ClipboardEventUtils = {\n\n\tgetTextData(clipboardData: DataTransfer): [string, ClipboardStoredMetadata | null] {\n\t\tconst text = clipboardData.getData(Mimes.text);\n\t\tlet metadata: ClipboardStoredMetadata | null = null;\n\t\tconst rawmetadata = clipboardData.getData('vscode-editor-data');\n\t\tif (typeof rawmetadata === 'string') {\n\t\t\ttry {\n\t\t\t\tmetadata = <ClipboardStoredMetadata>JSON.parse(rawmetadata);\n\t\t\t\tif (metadata.version !== 1) {\n\t\t\t\t\tmetadata = null;\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\t// no problem!\n\t\t\t}\n\t\t}\n\n\t\tif (text.length === 0 && metadata === null && clipboardData.files.length > 0) {\n\t\t\t// no textual data pasted, generate text from file names\n\t\t\tconst files: File[] = Array.prototype.slice.call(clipboardData.files, 0);\n\t\t\treturn [files.map(file => file.name).join('\\n'), null];\n\t\t}\n\n\t\treturn [text, metadata];\n\t},\n\n\tsetTextData(clipboardData: DataTransfer, text: string, html: string | null | undefined, metadata: ClipboardStoredMetadata): void {\n\t\tclipboardData.setData(Mimes.text, text);\n\t\tif (typeof html === 'string') {\n\t\t\tclipboardData.setData('text/html', html);\n\t\t}\n\t\tclipboardData.setData('vscode-editor-data', JSON.stringify(metadata));\n\t}\n};\n\nexport class TextAreaWrapper extends Disposable implements ICompleteTextAreaWrapper {\n\n\tpublic readonly onKeyDown = this._register(new DomEmitter(this._actual, 'keydown')).event;\n\tpublic readonly onKeyPress = this._register(new DomEmitter(this._actual, 'keypress')).event;\n\tpublic readonly onKeyUp = this._register(new DomEmitter(this._actual, 'keyup')).event;\n\tpublic readonly onCompositionStart = this._register(new DomEmitter(this._actual, 'compositionstart')).event;\n\tpublic readonly onCompositionUpdate = this._register(new DomEmitter(this._actual, 'compositionupdate')).event;\n\tpublic readonly onCompositionEnd = this._register(new DomEmitter(this._actual, 'compositionend')).event;\n\tpublic readonly onBeforeInput = this._register(new DomEmitter(this._actual, 'beforeinput')).event;\n\tpublic readonly onInput = <Event<InputEvent>>this._register(new DomEmitter(this._actual, 'input')).event;\n\tpublic readonly onCut = this._register(new DomEmitter(this._actual, 'cut')).event;\n\tpublic readonly onCopy = this._register(new DomEmitter(this._actual, 'copy')).event;\n\tpublic readonly onPaste = this._register(new DomEmitter(this._actual, 'paste')).event;\n\tpublic readonly onFocus = this._register(new DomEmitter(this._actual, 'focus')).event;\n\tpublic readonly onBlur = this._register(new DomEmitter(this._actual, 'blur')).event;\n\n\tpublic get ownerDocument(): Document {\n\t\treturn this._actual.ownerDocument;\n\t}\n\n\tprivate _onSyntheticTap = this._register(new Emitter<void>());\n\tpublic readonly onSyntheticTap: Event<void> = this._onSyntheticTap.event;\n\n\tprivate _ignoreSelectionChangeTime: number;\n\n\tconstructor(\n\t\tprivate readonly _actual: HTMLTextAreaElement\n\t) {\n\t\tsuper();\n\t\tthis._ignoreSelectionChangeTime = 0;\n\n\t\tthis._register(this.onKeyDown(() => inputLatency.onKeyDown()));\n\t\tthis._register(this.onBeforeInput(() => inputLatency.onBeforeInput()));\n\t\tthis._register(this.onInput(() => inputLatency.onInput()));\n\t\tthis._register(this.onKeyUp(() => inputLatency.onKeyUp()));\n\n\t\tthis._register(dom.addDisposableListener(this._actual, TextAreaSyntethicEvents.Tap, () => this._onSyntheticTap.fire()));\n\t}\n\n\tpublic hasFocus(): boolean {\n\t\tconst shadowRoot = dom.getShadowRoot(this._actual);\n\t\tif (shadowRoot) {\n\t\t\treturn shadowRoot.activeElement === this._actual;\n\t\t} else if (dom.isInDOM(this._actual)) {\n\t\t\treturn this._actual.ownerDocument.activeElement === this._actual;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpublic setIgnoreSelectionChangeTime(reason: string): void {\n\t\tthis._ignoreSelectionChangeTime = Date.now();\n\t}\n\n\tpublic getIgnoreSelectionChangeTime(): number {\n\t\treturn this._ignoreSelectionChangeTime;\n\t}\n\n\tpublic resetSelectionChangeTime(): void {\n\t\tthis._ignoreSelectionChangeTime = 0;\n\t}\n\n\tpublic getValue(): string {\n\t\t// console.log('current value: ' + this._textArea.value);\n\t\treturn this._actual.value;\n\t}\n\n\tpublic setValue(reason: string, value: string): void {\n\t\tconst textArea = this._actual;\n\t\tif (textArea.value === value) {\n\t\t\t// No change\n\t\t\treturn;\n\t\t}\n\t\t// console.log('reason: ' + reason + ', current value: ' + textArea.value + ' => new value: ' + value);\n\t\tthis.setIgnoreSelectionChangeTime('setValue');\n\t\ttextArea.value = value;\n\t}\n\n\tpublic getSelectionStart(): number {\n\t\treturn this._actual.selectionDirection === 'backward' ? this._actual.selectionEnd : this._actual.selectionStart;\n\t}\n\n\tpublic getSelectionEnd(): number {\n\t\treturn this._actual.selectionDirection === 'backward' ? this._actual.selectionStart : this._actual.selectionEnd;\n\t}\n\n\tpublic setSelectionRange(reason: string, selectionStart: number, selectionEnd: number): void {\n\t\tconst textArea = this._actual;\n\n\t\tlet activeElement: Element | null = null;\n\t\tconst shadowRoot = dom.getShadowRoot(textArea);\n\t\tif (shadowRoot) {\n\t\t\tactiveElement = shadowRoot.activeElement;\n\t\t} else {\n\t\t\tactiveElement = textArea.ownerDocument.activeElement;\n\t\t}\n\n\t\tconst currentIsFocused = (activeElement === textArea);\n\t\tconst currentSelectionStart = textArea.selectionStart;\n\t\tconst currentSelectionEnd = textArea.selectionEnd;\n\n\t\tif (currentIsFocused && currentSelectionStart === selectionStart && currentSelectionEnd === selectionEnd) {\n\t\t\t// No change\n\t\t\t// Firefox iframe bug https://github.com/microsoft/monaco-editor/issues/643#issuecomment-367871377\n\t\t\tif (browser.isFirefox && window.parent !== window) {\n\t\t\t\ttextArea.focus();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// console.log('reason: ' + reason + ', setSelectionRange: ' + selectionStart + ' -> ' + selectionEnd);\n\n\t\tif (currentIsFocused) {\n\t\t\t// No need to focus, only need to change the selection range\n\t\t\tthis.setIgnoreSelectionChangeTime('setSelectionRange');\n\t\t\ttextArea.setSelectionRange(selectionStart, selectionEnd);\n\t\t\tif (browser.isFirefox && window.parent !== window) {\n\t\t\t\ttextArea.focus();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// If the focus is outside the textarea, browsers will try really hard to reveal the textarea.\n\t\t// Here, we try to undo the browser's desperate reveal.\n\t\ttry {\n\t\t\tconst scrollState = dom.saveParentsScrollTop(textArea);\n\t\t\tthis.setIgnoreSelectionChangeTime('setSelectionRange');\n\t\t\ttextArea.focus();\n\t\t\ttextArea.setSelectionRange(selectionStart, selectionEnd);\n\t\t\tdom.restoreParentsScrollTop(textArea, scrollState);\n\t\t} catch (e) {\n\t\t\t// Sometimes IE throws when setting selection (e.g. textarea is off-DOM)\n\t\t}\n\t}\n}\n"]}