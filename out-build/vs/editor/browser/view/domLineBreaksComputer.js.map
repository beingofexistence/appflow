{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/browser/view/domLineBreaksComputer.ts"],"names":[],"mappings":"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","file":"domLineBreaksComputer.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createTrustedTypesPolicy } from 'vs/base/browser/trustedTypes';\nimport { CharCode } from 'vs/base/common/charCode';\nimport * as strings from 'vs/base/common/strings';\nimport { applyFontInfo } from 'vs/editor/browser/config/domFontInfo';\nimport { WrappingIndent } from 'vs/editor/common/config/editorOptions';\nimport { FontInfo } from 'vs/editor/common/config/fontInfo';\nimport { StringBuilder } from 'vs/editor/common/core/stringBuilder';\nimport { InjectedTextOptions } from 'vs/editor/common/model';\nimport { ILineBreaksComputer, ILineBreaksComputerFactory, ModelLineProjectionData } from 'vs/editor/common/modelLineProjectionData';\nimport { LineInjectedText } from 'vs/editor/common/textModelEvents';\n\nconst ttPolicy = createTrustedTypesPolicy('domLineBreaksComputer', { createHTML: value => value });\n\nexport class DOMLineBreaksComputerFactory implements ILineBreaksComputerFactory {\n\n\tpublic static create(): DOMLineBreaksComputerFactory {\n\t\treturn new DOMLineBreaksComputerFactory();\n\t}\n\n\tconstructor() {\n\t}\n\n\tpublic createLineBreaksComputer(fontInfo: FontInfo, tabSize: number, wrappingColumn: number, wrappingIndent: WrappingIndent, wordBreak: 'normal' | 'keepAll'): ILineBreaksComputer {\n\t\tconst requests: string[] = [];\n\t\tconst injectedTexts: (LineInjectedText[] | null)[] = [];\n\t\treturn {\n\t\t\taddRequest: (lineText: string, injectedText: LineInjectedText[] | null, previousLineBreakData: ModelLineProjectionData | null) => {\n\t\t\t\trequests.push(lineText);\n\t\t\t\tinjectedTexts.push(injectedText);\n\t\t\t},\n\t\t\tfinalize: () => {\n\t\t\t\treturn createLineBreaks(requests, fontInfo, tabSize, wrappingColumn, wrappingIndent, wordBreak, injectedTexts);\n\t\t\t}\n\t\t};\n\t}\n}\n\nfunction createLineBreaks(requests: string[], fontInfo: FontInfo, tabSize: number, firstLineBreakColumn: number, wrappingIndent: WrappingIndent, wordBreak: 'normal' | 'keepAll', injectedTextsPerLine: (LineInjectedText[] | null)[]): (ModelLineProjectionData | null)[] {\n\tfunction createEmptyLineBreakWithPossiblyInjectedText(requestIdx: number): ModelLineProjectionData | null {\n\t\tconst injectedTexts = injectedTextsPerLine[requestIdx];\n\t\tif (injectedTexts) {\n\t\t\tconst lineText = LineInjectedText.applyInjectedText(requests[requestIdx], injectedTexts);\n\n\t\t\tconst injectionOptions = injectedTexts.map(t => t.options);\n\t\t\tconst injectionOffsets = injectedTexts.map(text => text.column - 1);\n\n\t\t\t// creating a `LineBreakData` with an invalid `breakOffsetsVisibleColumn` is OK\n\t\t\t// because `breakOffsetsVisibleColumn` will never be used because it contains injected text\n\t\t\treturn new ModelLineProjectionData(injectionOffsets, injectionOptions, [lineText.length], [], 0);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tif (firstLineBreakColumn === -1) {\n\t\tconst result: (ModelLineProjectionData | null)[] = [];\n\t\tfor (let i = 0, len = requests.length; i < len; i++) {\n\t\t\tresult[i] = createEmptyLineBreakWithPossiblyInjectedText(i);\n\t\t}\n\t\treturn result;\n\t}\n\n\tconst overallWidth = Math.round(firstLineBreakColumn * fontInfo.typicalHalfwidthCharacterWidth);\n\tconst additionalIndent = (wrappingIndent === WrappingIndent.DeepIndent ? 2 : wrappingIndent === WrappingIndent.Indent ? 1 : 0);\n\tconst additionalIndentSize = Math.round(tabSize * additionalIndent);\n\tconst additionalIndentLength = Math.ceil(fontInfo.spaceWidth * additionalIndentSize);\n\n\tconst containerDomNode = document.createElement('div');\n\tapplyFontInfo(containerDomNode, fontInfo);\n\n\tconst sb = new StringBuilder(10000);\n\tconst firstNonWhitespaceIndices: number[] = [];\n\tconst wrappedTextIndentLengths: number[] = [];\n\tconst renderLineContents: string[] = [];\n\tconst allCharOffsets: number[][] = [];\n\tconst allVisibleColumns: number[][] = [];\n\tfor (let i = 0; i < requests.length; i++) {\n\t\tconst lineContent = LineInjectedText.applyInjectedText(requests[i], injectedTextsPerLine[i]);\n\n\t\tlet firstNonWhitespaceIndex = 0;\n\t\tlet wrappedTextIndentLength = 0;\n\t\tlet width = overallWidth;\n\n\t\tif (wrappingIndent !== WrappingIndent.None) {\n\t\t\tfirstNonWhitespaceIndex = strings.firstNonWhitespaceIndex(lineContent);\n\t\t\tif (firstNonWhitespaceIndex === -1) {\n\t\t\t\t// all whitespace line\n\t\t\t\tfirstNonWhitespaceIndex = 0;\n\n\t\t\t} else {\n\t\t\t\t// Track existing indent\n\n\t\t\t\tfor (let i = 0; i < firstNonWhitespaceIndex; i++) {\n\t\t\t\t\tconst charWidth = (\n\t\t\t\t\t\tlineContent.charCodeAt(i) === CharCode.Tab\n\t\t\t\t\t\t\t? (tabSize - (wrappedTextIndentLength % tabSize))\n\t\t\t\t\t\t\t: 1\n\t\t\t\t\t);\n\t\t\t\t\twrappedTextIndentLength += charWidth;\n\t\t\t\t}\n\n\t\t\t\tconst indentWidth = Math.ceil(fontInfo.spaceWidth * wrappedTextIndentLength);\n\n\t\t\t\t// Force sticking to beginning of line if no character would fit except for the indentation\n\t\t\t\tif (indentWidth + fontInfo.typicalFullwidthCharacterWidth > overallWidth) {\n\t\t\t\t\tfirstNonWhitespaceIndex = 0;\n\t\t\t\t\twrappedTextIndentLength = 0;\n\t\t\t\t} else {\n\t\t\t\t\twidth = overallWidth - indentWidth;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst renderLineContent = lineContent.substr(firstNonWhitespaceIndex);\n\t\tconst tmp = renderLine(renderLineContent, wrappedTextIndentLength, tabSize, width, sb, additionalIndentLength);\n\t\tfirstNonWhitespaceIndices[i] = firstNonWhitespaceIndex;\n\t\twrappedTextIndentLengths[i] = wrappedTextIndentLength;\n\t\trenderLineContents[i] = renderLineContent;\n\t\tallCharOffsets[i] = tmp[0];\n\t\tallVisibleColumns[i] = tmp[1];\n\t}\n\tconst html = sb.build();\n\tconst trustedhtml = ttPolicy?.createHTML(html) ?? html;\n\tcontainerDomNode.innerHTML = trustedhtml as string;\n\n\tcontainerDomNode.style.position = 'absolute';\n\tcontainerDomNode.style.top = '10000';\n\tif (wordBreak === 'keepAll') {\n\t\t// word-break: keep-all; overflow-wrap: anywhere\n\t\tcontainerDomNode.style.wordBreak = 'keep-all';\n\t\tcontainerDomNode.style.overflowWrap = 'anywhere';\n\t} else {\n\t\t// overflow-wrap: break-word\n\t\tcontainerDomNode.style.wordBreak = 'inherit';\n\t\tcontainerDomNode.style.overflowWrap = 'break-word';\n\t}\n\tdocument.body.appendChild(containerDomNode);\n\n\tconst range = document.createRange();\n\tconst lineDomNodes = Array.prototype.slice.call(containerDomNode.children, 0);\n\n\tconst result: (ModelLineProjectionData | null)[] = [];\n\tfor (let i = 0; i < requests.length; i++) {\n\t\tconst lineDomNode = lineDomNodes[i];\n\t\tconst breakOffsets: number[] | null = readLineBreaks(range, lineDomNode, renderLineContents[i], allCharOffsets[i]);\n\t\tif (breakOffsets === null) {\n\t\t\tresult[i] = createEmptyLineBreakWithPossiblyInjectedText(i);\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst firstNonWhitespaceIndex = firstNonWhitespaceIndices[i];\n\t\tconst wrappedTextIndentLength = wrappedTextIndentLengths[i] + additionalIndentSize;\n\t\tconst visibleColumns = allVisibleColumns[i];\n\n\t\tconst breakOffsetsVisibleColumn: number[] = [];\n\t\tfor (let j = 0, len = breakOffsets.length; j < len; j++) {\n\t\t\tbreakOffsetsVisibleColumn[j] = visibleColumns[breakOffsets[j]];\n\t\t}\n\n\t\tif (firstNonWhitespaceIndex !== 0) {\n\t\t\t// All break offsets are relative to the renderLineContent, make them absolute again\n\t\t\tfor (let j = 0, len = breakOffsets.length; j < len; j++) {\n\t\t\t\tbreakOffsets[j] += firstNonWhitespaceIndex;\n\t\t\t}\n\t\t}\n\n\t\tlet injectionOptions: InjectedTextOptions[] | null;\n\t\tlet injectionOffsets: number[] | null;\n\t\tconst curInjectedTexts = injectedTextsPerLine[i];\n\t\tif (curInjectedTexts) {\n\t\t\tinjectionOptions = curInjectedTexts.map(t => t.options);\n\t\t\tinjectionOffsets = curInjectedTexts.map(text => text.column - 1);\n\t\t} else {\n\t\t\tinjectionOptions = null;\n\t\t\tinjectionOffsets = null;\n\t\t}\n\n\t\tresult[i] = new ModelLineProjectionData(injectionOffsets, injectionOptions, breakOffsets, breakOffsetsVisibleColumn, wrappedTextIndentLength);\n\t}\n\n\tdocument.body.removeChild(containerDomNode);\n\treturn result;\n}\n\nconst enum Constants {\n\tSPAN_MODULO_LIMIT = 16384\n}\n\nfunction renderLine(lineContent: string, initialVisibleColumn: number, tabSize: number, width: number, sb: StringBuilder, wrappingIndentLength: number): [number[], number[]] {\n\n\tif (wrappingIndentLength !== 0) {\n\t\tconst hangingOffset = String(wrappingIndentLength);\n\t\tsb.appendString('<div style=\"text-indent: -');\n\t\tsb.appendString(hangingOffset);\n\t\tsb.appendString('px; padding-left: ');\n\t\tsb.appendString(hangingOffset);\n\t\tsb.appendString('px; box-sizing: border-box; width:');\n\t} else {\n\t\tsb.appendString('<div style=\"width:');\n\t}\n\tsb.appendString(String(width));\n\tsb.appendString('px;\">');\n\t// if (containsRTL) {\n\t// \tsb.appendASCIIString('\" dir=\"ltr');\n\t// }\n\n\tconst len = lineContent.length;\n\tlet visibleColumn = initialVisibleColumn;\n\tlet charOffset = 0;\n\tconst charOffsets: number[] = [];\n\tconst visibleColumns: number[] = [];\n\tlet nextCharCode = (0 < len ? lineContent.charCodeAt(0) : CharCode.Null);\n\n\tsb.appendString('<span>');\n\tfor (let charIndex = 0; charIndex < len; charIndex++) {\n\t\tif (charIndex !== 0 && charIndex % Constants.SPAN_MODULO_LIMIT === 0) {\n\t\t\tsb.appendString('</span><span>');\n\t\t}\n\t\tcharOffsets[charIndex] = charOffset;\n\t\tvisibleColumns[charIndex] = visibleColumn;\n\t\tconst charCode = nextCharCode;\n\t\tnextCharCode = (charIndex + 1 < len ? lineContent.charCodeAt(charIndex + 1) : CharCode.Null);\n\t\tlet producedCharacters = 1;\n\t\tlet charWidth = 1;\n\t\tswitch (charCode) {\n\t\t\tcase CharCode.Tab:\n\t\t\t\tproducedCharacters = (tabSize - (visibleColumn % tabSize));\n\t\t\t\tcharWidth = producedCharacters;\n\t\t\t\tfor (let space = 1; space <= producedCharacters; space++) {\n\t\t\t\t\tif (space < producedCharacters) {\n\t\t\t\t\t\tsb.appendCharCode(0xA0); // &nbsp;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsb.appendASCIICharCode(CharCode.Space);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase CharCode.Space:\n\t\t\t\tif (nextCharCode === CharCode.Space) {\n\t\t\t\t\tsb.appendCharCode(0xA0); // &nbsp;\n\t\t\t\t} else {\n\t\t\t\t\tsb.appendASCIICharCode(CharCode.Space);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase CharCode.LessThan:\n\t\t\t\tsb.appendString('&lt;');\n\t\t\t\tbreak;\n\n\t\t\tcase CharCode.GreaterThan:\n\t\t\t\tsb.appendString('&gt;');\n\t\t\t\tbreak;\n\n\t\t\tcase CharCode.Ampersand:\n\t\t\t\tsb.appendString('&amp;');\n\t\t\t\tbreak;\n\n\t\t\tcase CharCode.Null:\n\t\t\t\tsb.appendString('&#00;');\n\t\t\t\tbreak;\n\n\t\t\tcase CharCode.UTF8_BOM:\n\t\t\tcase CharCode.LINE_SEPARATOR:\n\t\t\tcase CharCode.PARAGRAPH_SEPARATOR:\n\t\t\tcase CharCode.NEXT_LINE:\n\t\t\t\tsb.appendCharCode(0xFFFD);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tif (strings.isFullWidthCharacter(charCode)) {\n\t\t\t\t\tcharWidth++;\n\t\t\t\t}\n\t\t\t\tif (charCode < 32) {\n\t\t\t\t\tsb.appendCharCode(9216 + charCode);\n\t\t\t\t} else {\n\t\t\t\t\tsb.appendCharCode(charCode);\n\t\t\t\t}\n\t\t}\n\n\t\tcharOffset += producedCharacters;\n\t\tvisibleColumn += charWidth;\n\t}\n\tsb.appendString('</span>');\n\n\tcharOffsets[lineContent.length] = charOffset;\n\tvisibleColumns[lineContent.length] = visibleColumn;\n\n\tsb.appendString('</div>');\n\n\treturn [charOffsets, visibleColumns];\n}\n\nfunction readLineBreaks(range: Range, lineDomNode: HTMLDivElement, lineContent: string, charOffsets: number[]): number[] | null {\n\tif (lineContent.length <= 1) {\n\t\treturn null;\n\t}\n\tconst spans = <HTMLSpanElement[]>Array.prototype.slice.call(lineDomNode.children, 0);\n\n\tconst breakOffsets: number[] = [];\n\ttry {\n\t\tdiscoverBreaks(range, spans, charOffsets, 0, null, lineContent.length - 1, null, breakOffsets);\n\t} catch (err) {\n\t\tconsole.log(err);\n\t\treturn null;\n\t}\n\n\tif (breakOffsets.length === 0) {\n\t\treturn null;\n\t}\n\n\tbreakOffsets.push(lineContent.length);\n\treturn breakOffsets;\n}\n\nfunction discoverBreaks(range: Range, spans: HTMLSpanElement[], charOffsets: number[], low: number, lowRects: DOMRectList | null, high: number, highRects: DOMRectList | null, result: number[]): void {\n\tif (low === high) {\n\t\treturn;\n\t}\n\n\tlowRects = lowRects || readClientRect(range, spans, charOffsets[low], charOffsets[low + 1]);\n\thighRects = highRects || readClientRect(range, spans, charOffsets[high], charOffsets[high + 1]);\n\n\tif (Math.abs(lowRects[0].top - highRects[0].top) <= 0.1) {\n\t\t// same line\n\t\treturn;\n\t}\n\n\t// there is at least one line break between these two offsets\n\tif (low + 1 === high) {\n\t\t// the two characters are adjacent, so the line break must be exactly between them\n\t\tresult.push(high);\n\t\treturn;\n\t}\n\n\tconst mid = low + ((high - low) / 2) | 0;\n\tconst midRects = readClientRect(range, spans, charOffsets[mid], charOffsets[mid + 1]);\n\tdiscoverBreaks(range, spans, charOffsets, low, lowRects, mid, midRects, result);\n\tdiscoverBreaks(range, spans, charOffsets, mid, midRects, high, highRects, result);\n}\n\nfunction readClientRect(range: Range, spans: HTMLSpanElement[], startOffset: number, endOffset: number): DOMRectList {\n\trange.setStart(spans[(startOffset / Constants.SPAN_MODULO_LIMIT) | 0].firstChild!, startOffset % Constants.SPAN_MODULO_LIMIT);\n\trange.setEnd(spans[(endOffset / Constants.SPAN_MODULO_LIMIT) | 0].firstChild!, endOffset % Constants.SPAN_MODULO_LIMIT);\n\treturn range.getClientRects();\n}\n"]}