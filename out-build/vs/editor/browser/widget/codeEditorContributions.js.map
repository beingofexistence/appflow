{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/browser/widget/codeEditorContributions.ts"],"names":[],"mappings":"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","file":"codeEditorContributions.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { runWhenIdle } from 'vs/base/common/async';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { Disposable, DisposableMap } from 'vs/base/common/lifecycle';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorContributionInstantiation, IEditorContributionDescription } from 'vs/editor/browser/editorExtensions';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\n\nexport class CodeEditorContributions extends Disposable {\n\n\tprivate _editor: ICodeEditor | null = null;\n\tprivate _instantiationService: IInstantiationService | null = null;\n\n\t/**\n\t * Contains all instantiated contributions.\n\t */\n\tprivate readonly _instances = this._register(new DisposableMap<string, IEditorContribution>());\n\t/**\n\t * Contains contributions which are not yet instantiated.\n\t */\n\tprivate readonly _pending = new Map<string, IEditorContributionDescription>();\n\t/**\n\t * Tracks which instantiation kinds are still left in `_pending`.\n\t */\n\tprivate readonly _finishedInstantiation: boolean[] = [];\n\n\tconstructor(\n\n\t) {\n\t\tsuper();\n\n\t\tthis._finishedInstantiation[EditorContributionInstantiation.Eager] = false;\n\t\tthis._finishedInstantiation[EditorContributionInstantiation.AfterFirstRender] = false;\n\t\tthis._finishedInstantiation[EditorContributionInstantiation.BeforeFirstInteraction] = false;\n\t\tthis._finishedInstantiation[EditorContributionInstantiation.Eventually] = false;\n\t}\n\n\tpublic initialize(editor: ICodeEditor, contributions: IEditorContributionDescription[], instantiationService: IInstantiationService) {\n\t\tthis._editor = editor;\n\t\tthis._instantiationService = instantiationService;\n\n\t\tfor (const desc of contributions) {\n\t\t\tif (this._pending.has(desc.id)) {\n\t\t\t\tonUnexpectedError(new Error(`Cannot have two contributions with the same id ${desc.id}`));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis._pending.set(desc.id, desc);\n\t\t}\n\n\t\tthis._instantiateSome(EditorContributionInstantiation.Eager);\n\n\t\t// AfterFirstRender\n\t\t// - these extensions will be instantiated at the latest 50ms after the first render.\n\t\t// - but if there is idle time, we will instantiate them sooner.\n\t\tthis._register(runWhenIdle(() => {\n\t\t\tthis._instantiateSome(EditorContributionInstantiation.AfterFirstRender);\n\t\t}));\n\n\t\t// BeforeFirstInteraction\n\t\t// - these extensions will be instantiated at the latest before a mouse or a keyboard event.\n\t\t// - but if there is idle time, we will instantiate them sooner.\n\t\tthis._register(runWhenIdle(() => {\n\t\t\tthis._instantiateSome(EditorContributionInstantiation.BeforeFirstInteraction);\n\t\t}));\n\n\t\t// Eventually\n\t\t// - these extensions will only be instantiated when there is idle time.\n\t\t// - since there is no guarantee that there will ever be idle time, we set a timeout of 5s here.\n\t\tthis._register(runWhenIdle(() => {\n\t\t\tthis._instantiateSome(EditorContributionInstantiation.Eventually);\n\t\t}, 5000));\n\t}\n\n\tpublic saveViewState(): { [key: string]: any } {\n\t\tconst contributionsState: { [key: string]: any } = {};\n\t\tfor (const [id, contribution] of this._instances) {\n\t\t\tif (typeof contribution.saveViewState === 'function') {\n\t\t\t\tcontributionsState[id] = contribution.saveViewState();\n\t\t\t}\n\t\t}\n\t\treturn contributionsState;\n\t}\n\n\tpublic restoreViewState(contributionsState: { [key: string]: any }): void {\n\t\tfor (const [id, contribution] of this._instances) {\n\t\t\tif (typeof contribution.restoreViewState === 'function') {\n\t\t\t\tcontribution.restoreViewState(contributionsState[id]);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic get(id: string): IEditorContribution | null {\n\t\tthis._instantiateById(id);\n\t\treturn this._instances.get(id) || null;\n\t}\n\n\t/**\n\t * used by tests\n\t */\n\tpublic set(id: string, value: IEditorContribution) {\n\t\tthis._instances.set(id, value);\n\t}\n\n\tpublic onBeforeInteractionEvent(): void {\n\t\t// this method is called very often by the editor!\n\t\tthis._instantiateSome(EditorContributionInstantiation.BeforeFirstInteraction);\n\t}\n\n\tpublic onAfterModelAttached(): void {\n\t\tthis._register(runWhenIdle(() => {\n\t\t\tthis._instantiateSome(EditorContributionInstantiation.AfterFirstRender);\n\t\t}, 50));\n\t}\n\n\tprivate _instantiateSome(instantiation: EditorContributionInstantiation): void {\n\t\tif (this._finishedInstantiation[instantiation]) {\n\t\t\t// already done with this instantiation!\n\t\t\treturn;\n\t\t}\n\t\tthis._finishedInstantiation[instantiation] = true;\n\n\t\tconst contribs = this._findPendingContributionsByInstantiation(instantiation);\n\t\tfor (const contrib of contribs) {\n\t\t\tthis._instantiateById(contrib.id);\n\t\t}\n\t}\n\n\tprivate _findPendingContributionsByInstantiation(instantiation: EditorContributionInstantiation): readonly IEditorContributionDescription[] {\n\t\tconst result: IEditorContributionDescription[] = [];\n\t\tfor (const [, desc] of this._pending) {\n\t\t\tif (desc.instantiation === instantiation) {\n\t\t\t\tresult.push(desc);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _instantiateById(id: string): void {\n\t\tconst desc = this._pending.get(id);\n\t\tif (!desc) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._pending.delete(id);\n\n\t\tif (!this._instantiationService || !this._editor) {\n\t\t\tthrow new Error(`Cannot instantiate contributions before being initialized!`);\n\t\t}\n\n\t\ttry {\n\t\t\tconst instance = this._instantiationService.createInstance(desc.ctor, this._editor);\n\t\t\tthis._instances.set(desc.id, instance);\n\t\t\tif (typeof instance.restoreViewState === 'function' && desc.instantiation !== EditorContributionInstantiation.Eager) {\n\t\t\t\tconsole.warn(`Editor contribution '${desc.id}' should be eager instantiated because it uses saveViewState / restoreViewState.`);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tonUnexpectedError(err);\n\t\t}\n\t}\n}\n"]}