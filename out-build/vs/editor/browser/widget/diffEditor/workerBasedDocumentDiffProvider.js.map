{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/browser/widget/diffEditor/workerBasedDocumentDiffProvider.ts"],"names":[],"mappings":"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","file":"workerBasedDocumentDiffProvider.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { StopWatch } from 'vs/base/common/stopwatch';\nimport { LineRange } from 'vs/editor/common/core/lineRange';\nimport { IDocumentDiff, IDocumentDiffProvider, IDocumentDiffProviderOptions } from 'vs/editor/common/diff/documentDiffProvider';\nimport { DetailedLineRangeMapping, RangeMapping } from 'vs/editor/common/diff/rangeMapping';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { DiffAlgorithmName, IEditorWorkerService } from 'vs/editor/common/services/editorWorker';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\n\nexport class WorkerBasedDocumentDiffProvider implements IDocumentDiffProvider, IDisposable {\n\tprivate onDidChangeEventEmitter = new Emitter<void>();\n\tpublic readonly onDidChange: Event<void> = this.onDidChangeEventEmitter.event;\n\n\tprivate diffAlgorithm: DiffAlgorithmName | IDocumentDiffProvider = 'advanced';\n\tprivate diffAlgorithmOnDidChangeSubscription: IDisposable | undefined = undefined;\n\n\tprivate static readonly diffCache = new Map<string, { result: IDocumentDiff; context: string }>();\n\n\tconstructor(\n\t\toptions: IWorkerBasedDocumentDiffProviderOptions,\n\t\t@IEditorWorkerService private readonly editorWorkerService: IEditorWorkerService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t) {\n\t\tthis.setOptions(options);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.diffAlgorithmOnDidChangeSubscription?.dispose();\n\t}\n\n\tasync computeDiff(original: ITextModel, modified: ITextModel, options: IDocumentDiffProviderOptions, cancellationToken: CancellationToken): Promise<IDocumentDiff> {\n\t\tif (typeof this.diffAlgorithm !== 'string') {\n\t\t\treturn this.diffAlgorithm.computeDiff(original, modified, options, cancellationToken);\n\t\t}\n\n\t\t// This significantly speeds up the case when the original file is empty\n\t\tif (original.getLineCount() === 1 && original.getLineMaxColumn(1) === 1) {\n\t\t\tif (modified.getLineCount() === 1 && modified.getLineMaxColumn(1) === 1) {\n\t\t\t\treturn {\n\t\t\t\t\tchanges: [],\n\t\t\t\t\tidentical: true,\n\t\t\t\t\tquitEarly: false,\n\t\t\t\t\tmoves: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tchanges: [\n\t\t\t\t\tnew DetailedLineRangeMapping(\n\t\t\t\t\t\tnew LineRange(1, 2),\n\t\t\t\t\t\tnew LineRange(1, modified.getLineCount() + 1),\n\t\t\t\t\t\t[\n\t\t\t\t\t\t\tnew RangeMapping(\n\t\t\t\t\t\t\t\toriginal.getFullModelRange(),\n\t\t\t\t\t\t\t\tmodified.getFullModelRange(),\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t]\n\t\t\t\t\t)\n\t\t\t\t],\n\t\t\t\tidentical: false,\n\t\t\t\tquitEarly: false,\n\t\t\t\tmoves: [],\n\t\t\t};\n\t\t}\n\n\t\tconst uriKey = JSON.stringify([original.uri.toString(), modified.uri.toString()]);\n\t\tconst context = JSON.stringify([original.id, modified.id, original.getAlternativeVersionId(), modified.getAlternativeVersionId(), JSON.stringify(options)]);\n\t\tconst c = WorkerBasedDocumentDiffProvider.diffCache.get(uriKey);\n\t\tif (c && c.context === context) {\n\t\t\treturn c.result;\n\t\t}\n\n\t\tconst sw = StopWatch.create();\n\t\tconst result = await this.editorWorkerService.computeDiff(original.uri, modified.uri, options, this.diffAlgorithm);\n\t\tconst timeMs = sw.elapsed();\n\n\t\tthis.telemetryService.publicLog2<{\n\t\t\ttimeMs: number;\n\t\t\ttimedOut: boolean;\n\t\t\tdetectedMoves: number;\n\t\t}, {\n\t\t\towner: 'hediet';\n\n\t\t\ttimeMs: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'To understand if the new diff algorithm is slower/faster than the old one' };\n\t\t\ttimedOut: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'To understand how often the new diff algorithm times out' };\n\t\t\tdetectedMoves: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'To understand how often the new diff algorithm detects moves' };\n\n\t\t\tcomment: 'This event gives insight about the performance of the new diff algorithm.';\n\t\t}>('diffEditor.computeDiff', {\n\t\t\ttimeMs,\n\t\t\ttimedOut: result?.quitEarly ?? true,\n\t\t\tdetectedMoves: options.computeMoves ? (result?.moves.length ?? 0) : -1,\n\t\t});\n\n\t\tif (cancellationToken.isCancellationRequested) {\n\t\t\t// Text models might be disposed!\n\t\t\treturn {\n\t\t\t\tchanges: [],\n\t\t\t\tidentical: false,\n\t\t\t\tquitEarly: true,\n\t\t\t\tmoves: [],\n\t\t\t};\n\t\t}\n\n\t\tif (!result) {\n\t\t\tthrow new Error('no diff result available');\n\t\t}\n\n\t\t// max 10 items in cache\n\t\tif (WorkerBasedDocumentDiffProvider.diffCache.size > 10) {\n\t\t\tWorkerBasedDocumentDiffProvider.diffCache.delete(WorkerBasedDocumentDiffProvider.diffCache.keys().next().value);\n\t\t}\n\n\t\tWorkerBasedDocumentDiffProvider.diffCache.set(uriKey, { result, context });\n\t\treturn result;\n\t}\n\n\tpublic setOptions(newOptions: IWorkerBasedDocumentDiffProviderOptions): void {\n\t\tlet didChange = false;\n\t\tif (newOptions.diffAlgorithm) {\n\t\t\tif (this.diffAlgorithm !== newOptions.diffAlgorithm) {\n\t\t\t\tthis.diffAlgorithmOnDidChangeSubscription?.dispose();\n\t\t\t\tthis.diffAlgorithmOnDidChangeSubscription = undefined;\n\n\t\t\t\tthis.diffAlgorithm = newOptions.diffAlgorithm;\n\t\t\t\tif (typeof newOptions.diffAlgorithm !== 'string') {\n\t\t\t\t\tthis.diffAlgorithmOnDidChangeSubscription = newOptions.diffAlgorithm.onDidChange(() => this.onDidChangeEventEmitter.fire());\n\t\t\t\t}\n\t\t\t\tdidChange = true;\n\t\t\t}\n\t\t}\n\t\tif (didChange) {\n\t\t\tthis.onDidChangeEventEmitter.fire();\n\t\t}\n\t}\n}\n\ninterface IWorkerBasedDocumentDiffProviderOptions {\n\treadonly diffAlgorithm?: 'legacy' | 'advanced' | IDocumentDiffProvider;\n}\n"]}