{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/browser/widget/diffEditor/diffEditorViewModel.ts"],"names":[],"mappings":"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","file":"diffEditorViewModel.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { Disposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { IObservable, IReader, ISettableObservable, ITransaction, autorunWithStore, derived, observableSignal, observableSignalFromEvent, observableValue, transaction, waitForState } from 'vs/base/common/observable';\nimport { IDiffEditor } from 'vs/editor/browser/editorBrowser';\nimport { IDiffProviderFactoryService } from 'vs/editor/browser/widget/diffEditor/diffProviderFactoryService';\nimport { readHotReloadableExport } from 'vs/editor/browser/widget/diffEditor/utils';\nimport { ISerializedLineRange, LineRange } from 'vs/editor/common/core/lineRange';\nimport { DefaultLinesDiffComputer } from 'vs/editor/common/diff/defaultLinesDiffComputer/defaultLinesDiffComputer';\nimport { IDocumentDiff } from 'vs/editor/common/diff/documentDiffProvider';\nimport { MovedText } from 'vs/editor/common/diff/linesDiffComputer';\nimport { DetailedLineRangeMapping } from 'vs/editor/common/diff/rangeMapping';\nimport { IDiffEditorModel, IDiffEditorViewModel } from 'vs/editor/common/editorCommon';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { TextEditInfo } from 'vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/beforeEditPositionMapper';\nimport { combineTextEditInfos } from 'vs/editor/common/model/bracketPairsTextModelPart/bracketPairsTree/combineTextEditInfos';\nimport { DiffEditorOptions } from './diffEditorOptions';\n\nexport class DiffEditorViewModel extends Disposable implements IDiffEditorViewModel {\n\tprivate readonly _isDiffUpToDate = observableValue<boolean>(this, false);\n\tpublic readonly isDiffUpToDate: IObservable<boolean> = this._isDiffUpToDate;\n\n\tprivate _lastDiff: IDocumentDiff | undefined;\n\tprivate readonly _diff = observableValue<DiffState | undefined>(this, undefined);\n\tpublic readonly diff: IObservable<DiffState | undefined> = this._diff;\n\n\tprivate readonly _unchangedRegions = observableValue<{ regions: UnchangedRegion[]; originalDecorationIds: string[]; modifiedDecorationIds: string[] }>(\n\t\tthis,\n\t\t{ regions: [], originalDecorationIds: [], modifiedDecorationIds: [] }\n\t);\n\tpublic readonly unchangedRegions: IObservable<UnchangedRegion[]> = derived(this, r => {\n\t\tif (this._options.hideUnchangedRegions.read(r)) {\n\t\t\treturn this._unchangedRegions.read(r).regions;\n\t\t} else {\n\t\t\t// Reset state\n\t\t\ttransaction(tx => {\n\t\t\t\tfor (const r of this._unchangedRegions.get().regions) {\n\t\t\t\t\tr.collapseAll(tx);\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn [];\n\t\t}\n\t}\n\t);\n\n\tpublic readonly movedTextToCompare = observableValue<MovedText | undefined>(this, undefined);\n\n\tprivate readonly _activeMovedText = observableValue<MovedText | undefined>(this, undefined);\n\tprivate readonly _hoveredMovedText = observableValue<MovedText | undefined>(this, undefined);\n\n\n\tpublic readonly activeMovedText = derived(this, r => this.movedTextToCompare.read(r) ?? this._hoveredMovedText.read(r) ?? this._activeMovedText.read(r));\n\n\tpublic setActiveMovedText(movedText: MovedText | undefined): void {\n\t\tthis._activeMovedText.set(movedText, undefined);\n\t}\n\n\tpublic setHoveredMovedText(movedText: MovedText | undefined): void {\n\t\tthis._hoveredMovedText.set(movedText, undefined);\n\t}\n\n\tprivate readonly _cancellationTokenSource = new CancellationTokenSource();\n\n\tprivate readonly _diffProvider = derived(this, reader => {\n\t\tconst diffProvider = this._diffProviderFactoryService.createDiffProvider(this._editor, {\n\t\t\tdiffAlgorithm: this._options.diffAlgorithm.read(reader)\n\t\t});\n\t\tconst onChangeSignal = observableSignalFromEvent('onDidChange', diffProvider.onDidChange);\n\t\treturn {\n\t\t\tdiffProvider,\n\t\t\tonChangeSignal,\n\t\t};\n\t});\n\n\tconstructor(\n\t\tpublic readonly model: IDiffEditorModel,\n\t\tprivate readonly _options: DiffEditorOptions,\n\t\tprivate readonly _editor: IDiffEditor,\n\t\t@IDiffProviderFactoryService private readonly _diffProviderFactoryService: IDiffProviderFactoryService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(toDisposable(() => this._cancellationTokenSource.cancel()));\n\n\t\tconst contentChangedSignal = observableSignal('contentChangedSignal');\n\t\tconst debouncer = this._register(new RunOnceScheduler(() => contentChangedSignal.trigger(undefined), 200));\n\n\t\tconst updateUnchangedRegions = (result: IDocumentDiff, tx: ITransaction, reader?: IReader) => {\n\t\t\tconst newUnchangedRegions = UnchangedRegion.fromDiffs(\n\t\t\t\tresult.changes,\n\t\t\t\tmodel.original.getLineCount(),\n\t\t\t\tmodel.modified.getLineCount(),\n\t\t\t\tthis._options.hideUnchangedRegionsMinimumLineCount.read(reader),\n\t\t\t\tthis._options.hideUnchangedRegionsContextLineCount.read(reader),\n\t\t\t);\n\n\t\t\t// Transfer state from cur state\n\t\t\tconst lastUnchangedRegions = this._unchangedRegions.get();\n\t\t\tconst lastUnchangedRegionsOrigRanges = lastUnchangedRegions.originalDecorationIds\n\t\t\t\t.map(id => model.original.getDecorationRange(id))\n\t\t\t\t.filter(r => !!r)\n\t\t\t\t.map(r => LineRange.fromRange(r!));\n\t\t\tconst lastUnchangedRegionsModRanges = lastUnchangedRegions.modifiedDecorationIds\n\t\t\t\t.map(id => model.modified.getDecorationRange(id))\n\t\t\t\t.filter(r => !!r)\n\t\t\t\t.map(r => LineRange.fromRange(r!));\n\n\t\t\tconst originalDecorationIds = model.original.deltaDecorations(\n\t\t\t\tlastUnchangedRegions.originalDecorationIds,\n\t\t\t\tnewUnchangedRegions.map(r => ({ range: r.originalUnchangedRange.toInclusiveRange()!, options: { description: 'unchanged' } }))\n\t\t\t);\n\t\t\tconst modifiedDecorationIds = model.modified.deltaDecorations(\n\t\t\t\tlastUnchangedRegions.modifiedDecorationIds,\n\t\t\t\tnewUnchangedRegions.map(r => ({ range: r.modifiedUnchangedRange.toInclusiveRange()!, options: { description: 'unchanged' } }))\n\t\t\t);\n\n\n\t\t\tfor (const r of newUnchangedRegions) {\n\t\t\t\tfor (let i = 0; i < lastUnchangedRegions.regions.length; i++) {\n\t\t\t\t\tif (r.originalUnchangedRange.intersectsStrict(lastUnchangedRegionsOrigRanges[i])\n\t\t\t\t\t\t&& r.modifiedUnchangedRange.intersectsStrict(lastUnchangedRegionsModRanges[i])) {\n\t\t\t\t\t\tr.setHiddenModifiedRange(lastUnchangedRegions.regions[i].getHiddenModifiedRange(undefined), tx);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._unchangedRegions.set(\n\t\t\t\t{\n\t\t\t\t\tregions: newUnchangedRegions,\n\t\t\t\t\toriginalDecorationIds,\n\t\t\t\t\tmodifiedDecorationIds\n\t\t\t\t},\n\t\t\t\ttx\n\t\t\t);\n\t\t};\n\n\t\tthis._register(model.modified.onDidChangeContent((e) => {\n\t\t\tconst diff = this._diff.get();\n\t\t\tif (diff) {\n\t\t\t\tconst textEdits = TextEditInfo.fromModelContentChanges(e.changes);\n\t\t\t\tconst result = applyModifiedEdits(this._lastDiff!, textEdits, model.original, model.modified);\n\t\t\t\tif (result) {\n\t\t\t\t\tthis._lastDiff = result;\n\t\t\t\t\ttransaction(tx => {\n\t\t\t\t\t\tthis._diff.set(DiffState.fromDiffResult(this._lastDiff!), tx);\n\t\t\t\t\t\tupdateUnchangedRegions(result, tx);\n\t\t\t\t\t\tconst currentSyncedMovedText = this.movedTextToCompare.get();\n\t\t\t\t\t\tthis.movedTextToCompare.set(currentSyncedMovedText ? this._lastDiff!.moves.find(m => m.lineRangeMapping.modified.intersect(currentSyncedMovedText.lineRangeMapping.modified)) : undefined, tx);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdebouncer.schedule();\n\t\t}));\n\t\tthis._register(model.original.onDidChangeContent((e) => {\n\t\t\tconst diff = this._diff.get();\n\t\t\tif (diff) {\n\t\t\t\tconst textEdits = TextEditInfo.fromModelContentChanges(e.changes);\n\t\t\t\tconst result = applyOriginalEdits(this._lastDiff!, textEdits, model.original, model.modified);\n\t\t\t\tif (result) {\n\t\t\t\t\tthis._lastDiff = result;\n\t\t\t\t\ttransaction(tx => {\n\t\t\t\t\t\tthis._diff.set(DiffState.fromDiffResult(this._lastDiff!), tx);\n\t\t\t\t\t\tupdateUnchangedRegions(result, tx);\n\t\t\t\t\t\tconst currentSyncedMovedText = this.movedTextToCompare.get();\n\t\t\t\t\t\tthis.movedTextToCompare.set(currentSyncedMovedText ? this._lastDiff!.moves.find(m => m.lineRangeMapping.modified.intersect(currentSyncedMovedText.lineRangeMapping.modified)) : undefined, tx);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdebouncer.schedule();\n\t\t}));\n\n\t\tthis._register(autorunWithStore(async (reader, store) => {\n\t\t\t/** @description compute diff */\n\n\t\t\t// So that they get recomputed when these settings change\n\t\t\tthis._options.hideUnchangedRegionsMinimumLineCount.read(reader);\n\t\t\tthis._options.hideUnchangedRegionsContextLineCount.read(reader);\n\n\t\t\tdebouncer.cancel();\n\t\t\tcontentChangedSignal.read(reader);\n\t\t\tconst documentDiffProvider = this._diffProvider.read(reader);\n\t\t\tdocumentDiffProvider.onChangeSignal.read(reader);\n\n\t\t\treadHotReloadableExport(DefaultLinesDiffComputer, reader);\n\n\t\t\tthis._isDiffUpToDate.set(false, undefined);\n\n\t\t\tlet originalTextEditInfos: TextEditInfo[] = [];\n\t\t\tstore.add(model.original.onDidChangeContent((e) => {\n\t\t\t\tconst edits = TextEditInfo.fromModelContentChanges(e.changes);\n\t\t\t\toriginalTextEditInfos = combineTextEditInfos(originalTextEditInfos, edits);\n\t\t\t}));\n\n\t\t\tlet modifiedTextEditInfos: TextEditInfo[] = [];\n\t\t\tstore.add(model.modified.onDidChangeContent((e) => {\n\t\t\t\tconst edits = TextEditInfo.fromModelContentChanges(e.changes);\n\t\t\t\tmodifiedTextEditInfos = combineTextEditInfos(modifiedTextEditInfos, edits);\n\t\t\t}));\n\n\t\t\tlet result = await documentDiffProvider.diffProvider.computeDiff(model.original, model.modified, {\n\t\t\t\tignoreTrimWhitespace: this._options.ignoreTrimWhitespace.read(reader),\n\t\t\t\tmaxComputationTimeMs: this._options.maxComputationTimeMs.read(reader),\n\t\t\t\tcomputeMoves: this._options.showMoves.read(reader),\n\t\t\t}, this._cancellationTokenSource.token);\n\n\t\t\tif (this._cancellationTokenSource.token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tresult = applyOriginalEdits(result, originalTextEditInfos, model.original, model.modified) ?? result;\n\t\t\tresult = applyModifiedEdits(result, modifiedTextEditInfos, model.original, model.modified) ?? result;\n\n\t\t\ttransaction(tx => {\n\t\t\t\tupdateUnchangedRegions(result, tx);\n\n\t\t\t\tthis._lastDiff = result;\n\t\t\t\tconst state = DiffState.fromDiffResult(result);\n\t\t\t\tthis._diff.set(state, tx);\n\t\t\t\tthis._isDiffUpToDate.set(true, tx);\n\t\t\t\tconst currentSyncedMovedText = this.movedTextToCompare.get();\n\t\t\t\tthis.movedTextToCompare.set(currentSyncedMovedText ? this._lastDiff.moves.find(m => m.lineRangeMapping.modified.intersect(currentSyncedMovedText.lineRangeMapping.modified)) : undefined, tx);\n\t\t\t});\n\t\t}));\n\t}\n\n\tpublic ensureModifiedLineIsVisible(lineNumber: number, tx: ITransaction | undefined): void {\n\t\tif (this.diff.get()?.mappings.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst unchangedRegions = this._unchangedRegions.get().regions;\n\t\tfor (const r of unchangedRegions) {\n\t\t\tif (r.getHiddenModifiedRange(undefined).contains(lineNumber)) {\n\t\t\t\tr.showModifiedLine(lineNumber, tx);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic ensureOriginalLineIsVisible(lineNumber: number, tx: ITransaction | undefined): void {\n\t\tif (this.diff.get()?.mappings.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst unchangedRegions = this._unchangedRegions.get().regions;\n\t\tfor (const r of unchangedRegions) {\n\t\t\tif (r.getHiddenOriginalRange(undefined).contains(lineNumber)) {\n\t\t\t\tr.showOriginalLine(lineNumber, tx);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async waitForDiff(): Promise<void> {\n\t\tawait waitForState(this.isDiffUpToDate, s => s);\n\t}\n\n\tpublic serializeState(): SerializedState {\n\t\tconst regions = this._unchangedRegions.get();\n\t\treturn {\n\t\t\tcollapsedRegions: regions.regions.map(r => ({ range: r.getHiddenModifiedRange(undefined).serialize() }))\n\t\t};\n\t}\n\n\tpublic restoreSerializedState(state: SerializedState): void {\n\t\tconst ranges = state.collapsedRegions.map(r => LineRange.deserialize(r.range));\n\t\tconst regions = this._unchangedRegions.get();\n\t\ttransaction(tx => {\n\t\t\tfor (const r of regions.regions) {\n\t\t\t\tfor (const range of ranges) {\n\t\t\t\t\tif (r.modifiedUnchangedRange.intersect(range)) {\n\t\t\t\t\t\tr.setHiddenModifiedRange(range, tx);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\ninterface SerializedState {\n\tcollapsedRegions: { range: ISerializedLineRange }[];\n}\n\nexport class DiffState {\n\tpublic static fromDiffResult(result: IDocumentDiff): DiffState {\n\t\treturn new DiffState(\n\t\t\tresult.changes.map(c => new DiffMapping(c)),\n\t\t\tresult.moves || [],\n\t\t\tresult.identical,\n\t\t\tresult.quitEarly,\n\t\t);\n\t}\n\n\tconstructor(\n\t\tpublic readonly mappings: readonly DiffMapping[],\n\t\tpublic readonly movedTexts: readonly MovedText[],\n\t\tpublic readonly identical: boolean,\n\t\tpublic readonly quitEarly: boolean,\n\t) { }\n}\n\nexport class DiffMapping {\n\tconstructor(\n\t\treadonly lineRangeMapping: DetailedLineRangeMapping,\n\t) {\n\t\t/*\n\t\treadonly movedTo: MovedText | undefined,\n\t\treadonly movedFrom: MovedText | undefined,\n\n\t\tif (movedTo) {\n\t\t\tassertFn(() =>\n\t\t\t\tmovedTo.lineRangeMapping.modifiedRange.equals(lineRangeMapping.modifiedRange)\n\t\t\t\t&& lineRangeMapping.originalRange.isEmpty\n\t\t\t\t&& !movedFrom\n\t\t\t);\n\t\t} else if (movedFrom) {\n\t\t\tassertFn(() =>\n\t\t\t\tmovedFrom.lineRangeMapping.originalRange.equals(lineRangeMapping.originalRange)\n\t\t\t\t&& lineRangeMapping.modifiedRange.isEmpty\n\t\t\t\t&& !movedTo\n\t\t\t);\n\t\t}\n\t\t*/\n\t}\n}\n\nexport class UnchangedRegion {\n\tpublic static fromDiffs(\n\t\tchanges: readonly DetailedLineRangeMapping[],\n\t\toriginalLineCount: number,\n\t\tmodifiedLineCount: number,\n\t\tminHiddenLineCount: number,\n\t\tminContext: number,\n\t): UnchangedRegion[] {\n\t\tconst inversedMappings = DetailedLineRangeMapping.inverse(changes, originalLineCount, modifiedLineCount);\n\t\tconst result: UnchangedRegion[] = [];\n\n\t\tfor (const mapping of inversedMappings) {\n\t\t\tlet origStart = mapping.original.startLineNumber;\n\t\t\tlet modStart = mapping.modified.startLineNumber;\n\t\t\tlet length = mapping.original.length;\n\n\t\t\tconst atStart = origStart === 1 && modStart === 1;\n\t\t\tconst atEnd = origStart + length === originalLineCount + 1 && modStart + length === modifiedLineCount + 1;\n\n\t\t\tif ((atStart || atEnd) && length >= minContext + minHiddenLineCount) {\n\t\t\t\tif (atStart && !atEnd) {\n\t\t\t\t\tlength -= minContext;\n\t\t\t\t}\n\t\t\t\tif (atEnd && !atStart) {\n\t\t\t\t\torigStart += minContext;\n\t\t\t\t\tmodStart += minContext;\n\t\t\t\t\tlength -= minContext;\n\t\t\t\t}\n\t\t\t\tresult.push(new UnchangedRegion(origStart, modStart, length, 0, 0));\n\t\t\t} else if (length >= minContext * 2 + minHiddenLineCount) {\n\t\t\t\torigStart += minContext;\n\t\t\t\tmodStart += minContext;\n\t\t\t\tlength -= minContext * 2;\n\t\t\t\tresult.push(new UnchangedRegion(origStart, modStart, length, 0, 0));\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic get originalUnchangedRange(): LineRange {\n\t\treturn LineRange.ofLength(this.originalLineNumber, this.lineCount);\n\t}\n\n\tpublic get modifiedUnchangedRange(): LineRange {\n\t\treturn LineRange.ofLength(this.modifiedLineNumber, this.lineCount);\n\t}\n\n\tprivate readonly _visibleLineCountTop = observableValue<number>(this, 0);\n\tpublic readonly visibleLineCountTop: ISettableObservable<number> = this._visibleLineCountTop;\n\n\tprivate readonly _visibleLineCountBottom = observableValue<number>(this, 0);\n\tpublic readonly visibleLineCountBottom: ISettableObservable<number> = this._visibleLineCountBottom;\n\n\tprivate readonly _shouldHideControls = derived(this, reader => /** @description isVisible */\n\t\tthis.visibleLineCountTop.read(reader) + this.visibleLineCountBottom.read(reader) === this.lineCount && !this.isDragged.read(reader));\n\n\tpublic readonly isDragged = observableValue<boolean>(this, false);\n\n\tconstructor(\n\t\tpublic readonly originalLineNumber: number,\n\t\tpublic readonly modifiedLineNumber: number,\n\t\tpublic readonly lineCount: number,\n\t\tvisibleLineCountTop: number,\n\t\tvisibleLineCountBottom: number,\n\t) {\n\t\tthis._visibleLineCountTop.set(visibleLineCountTop, undefined);\n\t\tthis._visibleLineCountBottom.set(visibleLineCountBottom, undefined);\n\t}\n\n\tpublic shouldHideControls(reader: IReader | undefined): boolean {\n\t\treturn this._shouldHideControls.read(reader);\n\t}\n\n\tpublic getHiddenOriginalRange(reader: IReader | undefined): LineRange {\n\t\treturn LineRange.ofLength(\n\t\t\tthis.originalLineNumber + this._visibleLineCountTop.read(reader),\n\t\t\tthis.lineCount - this._visibleLineCountTop.read(reader) - this._visibleLineCountBottom.read(reader),\n\t\t);\n\t}\n\n\tpublic getHiddenModifiedRange(reader: IReader | undefined): LineRange {\n\t\treturn LineRange.ofLength(\n\t\t\tthis.modifiedLineNumber + this._visibleLineCountTop.read(reader),\n\t\t\tthis.lineCount - this._visibleLineCountTop.read(reader) - this._visibleLineCountBottom.read(reader),\n\t\t);\n\t}\n\n\tpublic setHiddenModifiedRange(range: LineRange, tx: ITransaction) {\n\t\tconst visibleLineCountTop = range.startLineNumber - this.modifiedLineNumber;\n\t\tconst visibleLineCountBottom = (this.modifiedLineNumber + this.lineCount) - range.endLineNumberExclusive;\n\t\tthis.setState(visibleLineCountTop, visibleLineCountBottom, tx);\n\t}\n\n\tpublic getMaxVisibleLineCountTop() {\n\t\treturn this.lineCount - this._visibleLineCountBottom.get();\n\t}\n\n\tpublic getMaxVisibleLineCountBottom() {\n\t\treturn this.lineCount - this._visibleLineCountTop.get();\n\t}\n\n\tpublic showMoreAbove(count = 10, tx: ITransaction | undefined): void {\n\t\tconst maxVisibleLineCountTop = this.getMaxVisibleLineCountTop();\n\t\tthis._visibleLineCountTop.set(Math.min(this._visibleLineCountTop.get() + count, maxVisibleLineCountTop), tx);\n\t}\n\n\tpublic showMoreBelow(count = 10, tx: ITransaction | undefined): void {\n\t\tconst maxVisibleLineCountBottom = this.lineCount - this._visibleLineCountTop.get();\n\t\tthis._visibleLineCountBottom.set(Math.min(this._visibleLineCountBottom.get() + count, maxVisibleLineCountBottom), tx);\n\t}\n\n\tpublic showAll(tx: ITransaction | undefined): void {\n\t\tthis._visibleLineCountBottom.set(this.lineCount - this._visibleLineCountTop.get(), tx);\n\t}\n\n\tpublic showModifiedLine(lineNumber: number, tx: ITransaction | undefined): void {\n\t\tconst top = lineNumber + 1 - (this.modifiedLineNumber + this._visibleLineCountTop.get());\n\t\tconst bottom = (this.modifiedLineNumber - this._visibleLineCountBottom.get() + this.lineCount) - lineNumber;\n\t\tif (top < bottom) {\n\t\t\tthis._visibleLineCountTop.set(this._visibleLineCountTop.get() + top, tx);\n\t\t} else {\n\t\t\tthis._visibleLineCountBottom.set(this._visibleLineCountBottom.get() + bottom, tx);\n\t\t}\n\t}\n\n\tpublic showOriginalLine(lineNumber: number, tx: ITransaction | undefined): void {\n\t\tconst top = lineNumber - this.originalLineNumber;\n\t\tconst bottom = (this.originalLineNumber + this.lineCount) - lineNumber;\n\t\tif (top < bottom) {\n\t\t\tthis._visibleLineCountTop.set(Math.min(this._visibleLineCountTop.get() + bottom - top, this.getMaxVisibleLineCountTop()), tx);\n\t\t} else {\n\t\t\tthis._visibleLineCountBottom.set(Math.min(this._visibleLineCountBottom.get() + top - bottom, this.getMaxVisibleLineCountBottom()), tx);\n\t\t}\n\t}\n\n\tpublic collapseAll(tx: ITransaction | undefined): void {\n\t\tthis._visibleLineCountTop.set(0, tx);\n\t\tthis._visibleLineCountBottom.set(0, tx);\n\t}\n\n\tpublic setState(visibleLineCountTop: number, visibleLineCountBottom: number, tx: ITransaction | undefined): void {\n\t\tvisibleLineCountTop = Math.max(Math.min(visibleLineCountTop, this.lineCount), 0);\n\t\tvisibleLineCountBottom = Math.max(Math.min(visibleLineCountBottom, this.lineCount - visibleLineCountTop), 0);\n\n\t\tthis._visibleLineCountTop.set(visibleLineCountTop, tx);\n\t\tthis._visibleLineCountBottom.set(visibleLineCountBottom, tx);\n\t}\n}\n\nfunction applyOriginalEdits(diff: IDocumentDiff, textEdits: TextEditInfo[], originalTextModel: ITextModel, modifiedTextModel: ITextModel): IDocumentDiff | undefined {\n\treturn undefined;\n\t/*\n\tTODO@hediet\n\tif (textEdits.length === 0) {\n\t\treturn diff;\n\t}\n\n\tconst diff2 = flip(diff);\n\tconst diff3 = applyModifiedEdits(diff2, textEdits, modifiedTextModel, originalTextModel);\n\tif (!diff3) {\n\t\treturn undefined;\n\t}\n\treturn flip(diff3);*/\n}\n/*\nfunction flip(diff: IDocumentDiff): IDocumentDiff {\n\treturn {\n\t\tchanges: diff.changes.map(c => c.flip()),\n\t\tmoves: diff.moves.map(m => m.flip()),\n\t\tidentical: diff.identical,\n\t\tquitEarly: diff.quitEarly,\n\t};\n}\n*/\nfunction applyModifiedEdits(diff: IDocumentDiff, textEdits: TextEditInfo[], originalTextModel: ITextModel, modifiedTextModel: ITextModel): IDocumentDiff | undefined {\n\treturn undefined;\n\t/*\n\tTODO@hediet\n\tif (textEdits.length === 0) {\n\t\treturn diff;\n\t}\n\tif (diff.changes.some(c => !c.innerChanges) || diff.moves.length > 0) {\n\t\t// TODO support these cases\n\t\treturn undefined;\n\t}\n\n\tconst changes = applyModifiedEditsToLineRangeMappings(diff.changes, textEdits, originalTextModel, modifiedTextModel);\n\n\tconst moves = diff.moves.map(m => {\n\t\tconst newModifiedRange = applyEditToLineRange(m.lineRangeMapping.modified, textEdits);\n\t\treturn newModifiedRange ? new MovedText(\n\t\t\tnew SimpleLineRangeMapping(m.lineRangeMapping.original, newModifiedRange),\n\t\t\tapplyModifiedEditsToLineRangeMappings(m.changes, textEdits, originalTextModel, modifiedTextModel),\n\t\t) : undefined;\n\t}).filter(isDefined);\n\n\treturn {\n\t\tidentical: false,\n\t\tquitEarly: false,\n\t\tchanges,\n\t\tmoves,\n\t};*/\n}\n/*\nfunction applyEditToLineRange(range: LineRange, textEdits: TextEditInfo[]): LineRange | undefined {\n\tlet rangeStartLineNumber = range.startLineNumber;\n\tlet rangeEndLineNumberEx = range.endLineNumberExclusive;\n\n\tfor (let i = textEdits.length - 1; i >= 0; i--) {\n\t\tconst textEdit = textEdits[i];\n\t\tconst textEditStartLineNumber = lengthGetLineCount(textEdit.startOffset) + 1;\n\t\tconst textEditEndLineNumber = lengthGetLineCount(textEdit.endOffset) + 1;\n\t\tconst newLengthLineCount = lengthGetLineCount(textEdit.newLength);\n\t\tconst delta = newLengthLineCount - (textEditEndLineNumber - textEditStartLineNumber);\n\n\t\tif (textEditEndLineNumber < rangeStartLineNumber) {\n\t\t\t// the text edit is before us\n\t\t\trangeStartLineNumber += delta;\n\t\t\trangeEndLineNumberEx += delta;\n\t\t} else if (textEditStartLineNumber > rangeEndLineNumberEx) {\n\t\t\t// the text edit is after us\n\t\t\t// NOOP\n\t\t} else if (textEditStartLineNumber < rangeStartLineNumber && rangeEndLineNumberEx < textEditEndLineNumber) {\n\t\t\t// the range is fully contained in the text edit\n\t\t\treturn undefined;\n\t\t} else if (textEditStartLineNumber < rangeStartLineNumber && textEditEndLineNumber <= rangeEndLineNumberEx) {\n\t\t\t// the text edit ends inside our range\n\t\t\trangeStartLineNumber = textEditEndLineNumber + 1;\n\t\t\trangeStartLineNumber += delta;\n\t\t\trangeEndLineNumberEx += delta;\n\t\t} else if (rangeStartLineNumber <= textEditStartLineNumber && textEditEndLineNumber < rangeStartLineNumber) {\n\t\t\t// the text edit starts inside our range\n\t\t\trangeEndLineNumberEx = textEditStartLineNumber;\n\t\t} else {\n\t\t\trangeEndLineNumberEx += delta;\n\t\t}\n\t}\n\n\treturn new LineRange(rangeStartLineNumber, rangeEndLineNumberEx);\n}\n\nfunction applyModifiedEditsToLineRangeMappings(changes: readonly LineRangeMapping[], textEdits: TextEditInfo[], originalTextModel: ITextModel, modifiedTextModel: ITextModel): LineRangeMapping[] {\n\tconst diffTextEdits = changes.flatMap(c => c.innerChanges!.map(c => new TextEditInfo(\n\t\tpositionToLength(c.originalRange.getStartPosition()),\n\t\tpositionToLength(c.originalRange.getEndPosition()),\n\t\tlengthOfRange(c.modifiedRange).toLength(),\n\t)));\n\n\tconst combined = combineTextEditInfos(diffTextEdits, textEdits);\n\n\tlet lastOriginalEndOffset = lengthZero;\n\tlet lastModifiedEndOffset = lengthZero;\n\tconst rangeMappings = combined.map(c => {\n\t\tconst modifiedStartOffset = lengthAdd(lastModifiedEndOffset, lengthDiffNonNegative(lastOriginalEndOffset, c.startOffset));\n\t\tlastOriginalEndOffset = c.endOffset;\n\t\tlastModifiedEndOffset = lengthAdd(modifiedStartOffset, c.newLength);\n\n\t\treturn new RangeMapping(\n\t\t\tRange.fromPositions(lengthToPosition(c.startOffset), lengthToPosition(c.endOffset)),\n\t\t\tRange.fromPositions(lengthToPosition(modifiedStartOffset), lengthToPosition(lastModifiedEndOffset)),\n\t\t);\n\t});\n\n\tconst newChanges = lineRangeMappingFromRangeMappings(\n\t\trangeMappings,\n\t\toriginalTextModel.getLinesContent(),\n\t\tmodifiedTextModel.getLinesContent(),\n\t);\n\treturn newChanges;\n}\n*/\n"]}