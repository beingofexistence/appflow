{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/browser/widget/diffEditor/renderLines.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAchG,MAAM,QAAQ,GAAG,IAAA,kBAAG,EAAsB,kBAAkB,EAAE,EAAE,UAAU,EAAE,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;IAE9F,SAAgB,GAAG,CAAS,MAAW,EAAS,OAAY,EAAY,WAA+B,EAAE,OAAoB;QAC5H,IAAA,iBAAG,EAAW,OAAO,EAAE,OAAO,CAAC,QAAQ,CAAC,CAAC;QAEzC,MAAM,cAAc,GAAG,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAEhD,MAAM,EAAE,GAAG,IAAI,mBAAG,CAAW,KAAK,CAAC,CAAC;QACpC,IAAI,eAAe,GAAG,CAAC,CAAC;QACxB,IAAI,iBAAiB,GAAG,CAAC,CAAC;QAC1B,MAAM,cAAc,GAAa,EAAE,CAAC;QACpC,KAAK,IAAI,SAAS,GAAG,CAAC,EAAE,SAAS,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,EAAE,SAAS,EAAE,EAAE;YAC1E,MAAM,UAAU,GAAG,SAAS,GAAG,CAAC,CAAC;YACjC,MAAM,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;YAChD,MAAM,aAAa,GAAG,MAAM,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;YACtD,MAAM,iBAAiB,GAAG,qBAAG,CAAY,MAAM,CAAC,WAAW,EAAE,UAAU,EAAE,CAAC,EAAE,MAAM,CAAC,gBAAgB,CAAC,CAAC;YAErG,IAAI,aAAa,EAAE;gBAClB,IAAI,eAAe,GAAG,CAAC,CAAC;gBACxB,KAAK,MAAM,WAAW,IAAI,aAAa,CAAC,YAAY,EAAE;oBACrD,MAAM,cAAc,GAAG,UAAU,CAAC,eAAe,CAAC,eAAe,EAAE,WAAW,EAAE,CAAC,CAAC,CAAC;oBACnF,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,EAAE,kBAAkB,CAC7D,iBAAiB,EACjB,cAAc,EACd,qBAAG,CAAY,cAAc,CAAC,iBAAiB,EAAE,eAAe,EAAE,WAAW,CAAC,EAC9E,cAAc,EACd,MAAM,CAAC,yBAAyB,EAChC,MAAM,CAAC,eAAe,EACtB,OAAO,EACP,EAAE,CACF,CAAC,CAAC;oBACH,iBAAiB,EAAE,CAAC;oBACpB,eAAe,GAAG,WAAW,CAAC;iBAC9B;gBACD,cAAc,CAAC,IAAI,CAAC,aAAa,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;aACvD;iBAAM;gBACN,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;gBACvB,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,EAAE,kBAAkB,CAC7D,iBAAiB,EACjB,UAAU,EACV,iBAAiB,EACjB,cAAc,EACd,MAAM,CAAC,yBAAyB,EAChC,MAAM,CAAC,eAAe,EACtB,OAAO,EACP,EAAE,CACF,CAAC,CAAC;gBACH,iBAAiB,EAAE,CAAC;aACpB;SACD;QACD,eAAe,IAAI,OAAO,CAAC,sBAAsB,CAAC;QAElD,MAAM,IAAI,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC;QACxB,MAAM,WAAW,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAChE,OAAO,CAAC,SAAS,GAAG,WAAqB,CAAC;QAC1C,MAAM,YAAY,GAAG,CAAC,eAAe,GAAG,OAAO,CAAC,8BAA8B,CAAC,CAAC;QAEhF,OAAO;YACN,aAAa,EAAE,iBAAiB;YAChC,YAAY;YACZ,cAAc;SACd,CAAC;IACH,CAAC;IA5DD,kBA4DC;IAGD,MAAa,GAAG;QACf,YACiB,UAAwB,EACxB,aAAiD,EACjD,yBAAkC,EAClC,eAAwB;YAHxB,eAAU,GAAV,UAAU,CAAc;YACxB,kBAAa,GAAb,aAAa,CAAoC;YACjD,8BAAyB,GAAzB,yBAAyB,CAAS;YAClC,oBAAe,GAAf,eAAe,CAAS;QACrC,CAAC;KACL;IAPD,kBAOC;IAED,MAAa,GAAG;QACR,MAAM,CAAC,UAAU,CAAC,MAAmB;YAE3C,MAAM,qBAAqB,GAAG,MAAM,CAAC,UAAU,EAAE,CAAC;YAClD,MAAM,QAAQ,GAAG,qBAAqB,CAAC,GAAG,gCAAuB,CAAC;YAClE,MAAM,UAAU,GAAG,qBAAqB,CAAC,GAAG,mCAAyB,CAAC;YAEtE,OAAO,IAAI,GAAG,CACb,MAAM,CAAC,QAAQ,EAAE,EAAE,UAAU,EAAE,CAAC,OAAO,IAAI,CAAC,EAC5C,QAAQ,EACR,qBAAqB,CAAC,GAAG,qDAA4C,EACrE,QAAQ,CAAC,8BAA8B,EACvC,qBAAqB,CAAC,GAAG,+CAAqC,EAE9D,qBAAqB,CAAC,GAAG,kCAAyB,EAElD,UAAU,CAAC,gBAAgB,EAC3B,qBAAqB,CAAC,GAAG,+CAAqC,EAC9D,qBAAqB,CAAC,GAAG,wCAA+B,EACxD,qBAAqB,CAAC,GAAG,+CAAsC,EAC/D,qBAAqB,CAAC,GAAG,qCAA4B,CACrD,CAAC;QACH,CAAC;QAED,YACiB,OAAe,EACf,QAAa,EACb,6BAAsC,EACtC,8BAAsC,EACtC,sBAA8B,EAC9B,UAAkB,EAClB,oBAA4B,EAC5B,sBAA8B,EAC9B,gBAAkF,EAClF,uBAAgC,EAChC,aAA4E;YAV5E,YAAO,GAAP,OAAO,CAAQ;YACf,aAAQ,GAAR,QAAQ,CAAK;YACb,kCAA6B,GAA7B,6BAA6B,CAAS;YACtC,mCAA8B,GAA9B,8BAA8B,CAAQ;YACtC,2BAAsB,GAAtB,sBAAsB,CAAQ;YAC9B,eAAU,GAAV,UAAU,CAAQ;YAClB,yBAAoB,GAApB,oBAAoB,CAAQ;YAC5B,2BAAsB,GAAtB,sBAAsB,CAAQ;YAC9B,qBAAgB,GAAhB,gBAAgB,CAAkE;YAClF,4BAAuB,GAAvB,uBAAuB,CAAS;YAChC,kBAAa,GAAb,aAAa,CAA+D;QACzF,CAAC;KACL;IArCD,kBAqCC;IAQD,SAAS,kBAAkB,CAC1B,WAAmB,EACnB,UAA2B,EAC3B,WAA6B,EAC7B,cAAuB,EACvB,yBAAkC,EAClC,eAAwB,EACxB,OAAY,EACZ,EAAO;QAGP,EAAE,CAAC,YAAY,CAAC,uBAAuB,CAAC,CAAC;QACzC,IAAI,CAAC,cAAc,EAAE;YACpB,kBAAkB;YAClB,EAAE,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;SAChC;QACD,EAAE,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;QACjC,EAAE,CAAC,YAAY,CAAC,MAAM,CAAC,WAAW,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;QAC1D,EAAE,CAAC,YAAY,CAAC,uBAAuB,CAAC,CAAC;QAEzC,MAAM,WAAW,GAAG,UAAU,CAAC,cAAc,EAAE,CAAC;QAChD,MAAM,YAAY,GAAG,eAAG,CAAmB,YAAY,CAAC,WAAW,EAAE,yBAAyB,CAAC,CAAC;QAChG,MAAM,WAAW,GAAG,eAAG,CAAmB,WAAW,CAAC,WAAW,EAAE,YAAY,EAAE,eAAe,CAAC,CAAC;QAClG,MAAM,MAAM,GAAG,IAAA,sBAAG,EAAY,IAAI,sBAAG,CACpC,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,IAAI,CAAC,OAAO,CAAC,6BAA6B,CAAC,EACxE,OAAO,CAAC,QAAQ,CAAC,8BAA8B,EAC/C,WAAW,EACX,KAAK,EACL,YAAY,EACZ,WAAW,EACX,CAAC,EACD,UAAU,EACV,WAAW,EACX,OAAO,CAAC,OAAO,EACf,CAAC,EACD,OAAO,CAAC,QAAQ,CAAC,UAAU,EAC3B,OAAO,CAAC,QAAQ,CAAC,WAAW,EAC5B,OAAO,CAAC,QAAQ,CAAC,aAAa,EAC9B,OAAO,CAAC,sBAAsB,EAC9B,OAAO,CAAC,gBAAgB,EACxB,OAAO,CAAC,uBAAuB,EAC/B,OAAO,CAAC,aAAa,KAAK,mCAAmB,CAAC,GAAG,EACjD,IAAI,CAAC,uDAAuD;SAC5D,EAAE,EAAE,CAAC,CAAC;QAEP,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;QAE1B,OAAO,MAAM,CAAC,gBAAgB,CAAC,mBAAmB,CAAC,MAAM,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;IACpF,CAAC","file":"renderLines.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createTrustedTypesPolicy } from 'vs/base/browser/trustedTypes';\nimport { applyFontInfo } from 'vs/editor/browser/config/domFontInfo';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorFontLigatures, EditorOption, FindComputedEditorOptionValueById } from 'vs/editor/common/config/editorOptions';\nimport { FontInfo } from 'vs/editor/common/config/fontInfo';\nimport { StringBuilder } from 'vs/editor/common/core/stringBuilder';\nimport { ModelLineProjectionData } from 'vs/editor/common/modelLineProjectionData';\nimport { IViewLineTokens, LineTokens } from 'vs/editor/common/tokens/lineTokens';\nimport { LineDecoration } from 'vs/editor/common/viewLayout/lineDecorations';\nimport { RenderLineInput, renderViewLine } from 'vs/editor/common/viewLayout/viewLineRenderer';\nimport { InlineDecoration, ViewLineRenderingData } from 'vs/editor/common/viewModel';\n\nconst ttPolicy = createTrustedTypesPolicy('diffEditorWidget', { createHTML: value => value });\n\nexport function renderLines(source: LineSource, options: RenderOptions, decorations: InlineDecoration[], domNode: HTMLElement): RenderLinesResult {\n\tapplyFontInfo(domNode, options.fontInfo);\n\n\tconst hasCharChanges = (decorations.length > 0);\n\n\tconst sb = new StringBuilder(10000);\n\tlet maxCharsPerLine = 0;\n\tlet renderedLineCount = 0;\n\tconst viewLineCounts: number[] = [];\n\tfor (let lineIndex = 0; lineIndex < source.lineTokens.length; lineIndex++) {\n\t\tconst lineNumber = lineIndex + 1;\n\t\tconst lineTokens = source.lineTokens[lineIndex];\n\t\tconst lineBreakData = source.lineBreakData[lineIndex];\n\t\tconst actualDecorations = LineDecoration.filter(decorations, lineNumber, 1, Number.MAX_SAFE_INTEGER);\n\n\t\tif (lineBreakData) {\n\t\t\tlet lastBreakOffset = 0;\n\t\t\tfor (const breakOffset of lineBreakData.breakOffsets) {\n\t\t\t\tconst viewLineTokens = lineTokens.sliceAndInflate(lastBreakOffset, breakOffset, 0);\n\t\t\t\tmaxCharsPerLine = Math.max(maxCharsPerLine, renderOriginalLine(\n\t\t\t\t\trenderedLineCount,\n\t\t\t\t\tviewLineTokens,\n\t\t\t\t\tLineDecoration.extractWrapped(actualDecorations, lastBreakOffset, breakOffset),\n\t\t\t\t\thasCharChanges,\n\t\t\t\t\tsource.mightContainNonBasicASCII,\n\t\t\t\t\tsource.mightContainRTL,\n\t\t\t\t\toptions,\n\t\t\t\t\tsb\n\t\t\t\t));\n\t\t\t\trenderedLineCount++;\n\t\t\t\tlastBreakOffset = breakOffset;\n\t\t\t}\n\t\t\tviewLineCounts.push(lineBreakData.breakOffsets.length);\n\t\t} else {\n\t\t\tviewLineCounts.push(1);\n\t\t\tmaxCharsPerLine = Math.max(maxCharsPerLine, renderOriginalLine(\n\t\t\t\trenderedLineCount,\n\t\t\t\tlineTokens,\n\t\t\t\tactualDecorations,\n\t\t\t\thasCharChanges,\n\t\t\t\tsource.mightContainNonBasicASCII,\n\t\t\t\tsource.mightContainRTL,\n\t\t\t\toptions,\n\t\t\t\tsb,\n\t\t\t));\n\t\t\trenderedLineCount++;\n\t\t}\n\t}\n\tmaxCharsPerLine += options.scrollBeyondLastColumn;\n\n\tconst html = sb.build();\n\tconst trustedhtml = ttPolicy ? ttPolicy.createHTML(html) : html;\n\tdomNode.innerHTML = trustedhtml as string;\n\tconst minWidthInPx = (maxCharsPerLine * options.typicalHalfwidthCharacterWidth);\n\n\treturn {\n\t\theightInLines: renderedLineCount,\n\t\tminWidthInPx,\n\t\tviewLineCounts,\n\t};\n}\n\n\nexport class LineSource {\n\tconstructor(\n\t\tpublic readonly lineTokens: LineTokens[],\n\t\tpublic readonly lineBreakData: (ModelLineProjectionData | null)[],\n\t\tpublic readonly mightContainNonBasicASCII: boolean,\n\t\tpublic readonly mightContainRTL: boolean,\n\t) { }\n}\n\nexport class RenderOptions {\n\tpublic static fromEditor(editor: ICodeEditor): RenderOptions {\n\n\t\tconst modifiedEditorOptions = editor.getOptions();\n\t\tconst fontInfo = modifiedEditorOptions.get(EditorOption.fontInfo);\n\t\tconst layoutInfo = modifiedEditorOptions.get(EditorOption.layoutInfo);\n\n\t\treturn new RenderOptions(\n\t\t\teditor.getModel()?.getOptions().tabSize || 0,\n\t\t\tfontInfo,\n\t\t\tmodifiedEditorOptions.get(EditorOption.disableMonospaceOptimizations),\n\t\t\tfontInfo.typicalHalfwidthCharacterWidth,\n\t\t\tmodifiedEditorOptions.get(EditorOption.scrollBeyondLastColumn),\n\n\t\t\tmodifiedEditorOptions.get(EditorOption.lineHeight),\n\n\t\t\tlayoutInfo.decorationsWidth,\n\t\t\tmodifiedEditorOptions.get(EditorOption.stopRenderingLineAfter),\n\t\t\tmodifiedEditorOptions.get(EditorOption.renderWhitespace),\n\t\t\tmodifiedEditorOptions.get(EditorOption.renderControlCharacters),\n\t\t\tmodifiedEditorOptions.get(EditorOption.fontLigatures),\n\t\t);\n\t}\n\n\tconstructor(\n\t\tpublic readonly tabSize: number,\n\t\tpublic readonly fontInfo: FontInfo,\n\t\tpublic readonly disableMonospaceOptimizations: boolean,\n\t\tpublic readonly typicalHalfwidthCharacterWidth: number,\n\t\tpublic readonly scrollBeyondLastColumn: number,\n\t\tpublic readonly lineHeight: number,\n\t\tpublic readonly lineDecorationsWidth: number,\n\t\tpublic readonly stopRenderingLineAfter: number,\n\t\tpublic readonly renderWhitespace: FindComputedEditorOptionValueById<EditorOption.renderWhitespace>,\n\t\tpublic readonly renderControlCharacters: boolean,\n\t\tpublic readonly fontLigatures: FindComputedEditorOptionValueById<EditorOption.fontLigatures>,\n\t) { }\n}\n\nexport interface RenderLinesResult {\n\tminWidthInPx: number;\n\theightInLines: number;\n\tviewLineCounts: number[];\n}\n\nfunction renderOriginalLine(\n\tviewLineIdx: number,\n\tlineTokens: IViewLineTokens,\n\tdecorations: LineDecoration[],\n\thasCharChanges: boolean,\n\tmightContainNonBasicASCII: boolean,\n\tmightContainRTL: boolean,\n\toptions: RenderOptions,\n\tsb: StringBuilder,\n): number {\n\n\tsb.appendString('<div class=\"view-line');\n\tif (!hasCharChanges) {\n\t\t// No char changes\n\t\tsb.appendString(' char-delete');\n\t}\n\tsb.appendString('\" style=\"top:');\n\tsb.appendString(String(viewLineIdx * options.lineHeight));\n\tsb.appendString('px;width:1000000px;\">');\n\n\tconst lineContent = lineTokens.getLineContent();\n\tconst isBasicASCII = ViewLineRenderingData.isBasicASCII(lineContent, mightContainNonBasicASCII);\n\tconst containsRTL = ViewLineRenderingData.containsRTL(lineContent, isBasicASCII, mightContainRTL);\n\tconst output = renderViewLine(new RenderLineInput(\n\t\t(options.fontInfo.isMonospace && !options.disableMonospaceOptimizations),\n\t\toptions.fontInfo.canUseHalfwidthRightwardsArrow,\n\t\tlineContent,\n\t\tfalse,\n\t\tisBasicASCII,\n\t\tcontainsRTL,\n\t\t0,\n\t\tlineTokens,\n\t\tdecorations,\n\t\toptions.tabSize,\n\t\t0,\n\t\toptions.fontInfo.spaceWidth,\n\t\toptions.fontInfo.middotWidth,\n\t\toptions.fontInfo.wsmiddotWidth,\n\t\toptions.stopRenderingLineAfter,\n\t\toptions.renderWhitespace,\n\t\toptions.renderControlCharacters,\n\t\toptions.fontLigatures !== EditorFontLigatures.OFF,\n\t\tnull // Send no selections, original line cannot be selected\n\t), sb);\n\n\tsb.appendString('</div>');\n\n\treturn output.characterMapping.getHorizontalOffset(output.characterMapping.length);\n}\n"]}