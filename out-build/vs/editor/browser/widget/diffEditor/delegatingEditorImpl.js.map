{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/browser/widget/diffEditor/delegatingEditorImpl.ts"],"names":[],"mappings":"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","file":"delegatingEditorImpl.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';\nimport { IEditorOptions } from 'vs/editor/common/config/editorOptions';\nimport { IDimension } from 'vs/editor/common/core/dimension';\nimport { IPosition, Position } from 'vs/editor/common/core/position';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { ISelection, Selection } from 'vs/editor/common/core/selection';\nimport { IDiffEditorViewModel, IEditor, IEditorAction, IEditorDecorationsCollection, IEditorModel, IEditorViewState, ScrollType } from 'vs/editor/common/editorCommon';\nimport { IModelDecorationsChangeAccessor, IModelDeltaDecoration } from 'vs/editor/common/model';\n\nexport abstract class DelegatingEditor extends Disposable implements IEditor {\n\tprivate static idCounter = 0;\n\tprivate readonly _id = ++DelegatingEditor.idCounter;\n\n\tprivate readonly _onDidDispose = this._register(new Emitter<void>());\n\tpublic readonly onDidDispose = this._onDidDispose.event;\n\n\tprotected abstract get _targetEditor(): CodeEditorWidget;\n\n\tgetId(): string { return this.getEditorType() + ':v2:' + this._id; }\n\n\tabstract getEditorType(): string;\n\tabstract updateOptions(newOptions: IEditorOptions): void;\n\tabstract onVisible(): void;\n\tabstract onHide(): void;\n\tabstract layout(dimension?: IDimension | undefined): void;\n\tabstract hasTextFocus(): boolean;\n\tabstract saveViewState(): IEditorViewState | null;\n\tabstract restoreViewState(state: IEditorViewState | null): void;\n\tabstract getModel(): IEditorModel | null;\n\tabstract setModel(model: IEditorModel | null | IDiffEditorViewModel): void;\n\n\t// #region editorBrowser.IDiffEditor: Delegating to modified Editor\n\n\tpublic getVisibleColumnFromPosition(position: IPosition): number {\n\t\treturn this._targetEditor.getVisibleColumnFromPosition(position);\n\t}\n\n\tpublic getStatusbarColumn(position: IPosition): number {\n\t\treturn this._targetEditor.getStatusbarColumn(position);\n\t}\n\n\tpublic getPosition(): Position | null {\n\t\treturn this._targetEditor.getPosition();\n\t}\n\n\tpublic setPosition(position: IPosition, source: string = 'api'): void {\n\t\tthis._targetEditor.setPosition(position, source);\n\t}\n\n\tpublic revealLine(lineNumber: number, scrollType: ScrollType = ScrollType.Smooth): void {\n\t\tthis._targetEditor.revealLine(lineNumber, scrollType);\n\t}\n\n\tpublic revealLineInCenter(lineNumber: number, scrollType: ScrollType = ScrollType.Smooth): void {\n\t\tthis._targetEditor.revealLineInCenter(lineNumber, scrollType);\n\t}\n\n\tpublic revealLineInCenterIfOutsideViewport(lineNumber: number, scrollType: ScrollType = ScrollType.Smooth): void {\n\t\tthis._targetEditor.revealLineInCenterIfOutsideViewport(lineNumber, scrollType);\n\t}\n\n\tpublic revealLineNearTop(lineNumber: number, scrollType: ScrollType = ScrollType.Smooth): void {\n\t\tthis._targetEditor.revealLineNearTop(lineNumber, scrollType);\n\t}\n\n\tpublic revealPosition(position: IPosition, scrollType: ScrollType = ScrollType.Smooth): void {\n\t\tthis._targetEditor.revealPosition(position, scrollType);\n\t}\n\n\tpublic revealPositionInCenter(position: IPosition, scrollType: ScrollType = ScrollType.Smooth): void {\n\t\tthis._targetEditor.revealPositionInCenter(position, scrollType);\n\t}\n\n\tpublic revealPositionInCenterIfOutsideViewport(position: IPosition, scrollType: ScrollType = ScrollType.Smooth): void {\n\t\tthis._targetEditor.revealPositionInCenterIfOutsideViewport(position, scrollType);\n\t}\n\n\tpublic revealPositionNearTop(position: IPosition, scrollType: ScrollType = ScrollType.Smooth): void {\n\t\tthis._targetEditor.revealPositionNearTop(position, scrollType);\n\t}\n\n\tpublic getSelection(): Selection | null {\n\t\treturn this._targetEditor.getSelection();\n\t}\n\n\tpublic getSelections(): Selection[] | null {\n\t\treturn this._targetEditor.getSelections();\n\t}\n\n\tpublic setSelection(range: IRange, source?: string): void;\n\tpublic setSelection(editorRange: Range, source?: string): void;\n\tpublic setSelection(selection: ISelection, source?: string): void;\n\tpublic setSelection(editorSelection: Selection, source?: string): void;\n\tpublic setSelection(something: any, source: string = 'api'): void {\n\t\tthis._targetEditor.setSelection(something, source);\n\t}\n\n\tpublic setSelections(ranges: readonly ISelection[], source: string = 'api'): void {\n\t\tthis._targetEditor.setSelections(ranges, source);\n\t}\n\n\tpublic revealLines(startLineNumber: number, endLineNumber: number, scrollType: ScrollType = ScrollType.Smooth): void {\n\t\tthis._targetEditor.revealLines(startLineNumber, endLineNumber, scrollType);\n\t}\n\n\tpublic revealLinesInCenter(startLineNumber: number, endLineNumber: number, scrollType: ScrollType = ScrollType.Smooth): void {\n\t\tthis._targetEditor.revealLinesInCenter(startLineNumber, endLineNumber, scrollType);\n\t}\n\n\tpublic revealLinesInCenterIfOutsideViewport(startLineNumber: number, endLineNumber: number, scrollType: ScrollType = ScrollType.Smooth): void {\n\t\tthis._targetEditor.revealLinesInCenterIfOutsideViewport(startLineNumber, endLineNumber, scrollType);\n\t}\n\n\tpublic revealLinesNearTop(startLineNumber: number, endLineNumber: number, scrollType: ScrollType = ScrollType.Smooth): void {\n\t\tthis._targetEditor.revealLinesNearTop(startLineNumber, endLineNumber, scrollType);\n\t}\n\n\tpublic revealRange(range: IRange, scrollType: ScrollType = ScrollType.Smooth, revealVerticalInCenter: boolean = false, revealHorizontal: boolean = true): void {\n\t\tthis._targetEditor.revealRange(range, scrollType, revealVerticalInCenter, revealHorizontal);\n\t}\n\n\tpublic revealRangeInCenter(range: IRange, scrollType: ScrollType = ScrollType.Smooth): void {\n\t\tthis._targetEditor.revealRangeInCenter(range, scrollType);\n\t}\n\n\tpublic revealRangeInCenterIfOutsideViewport(range: IRange, scrollType: ScrollType = ScrollType.Smooth): void {\n\t\tthis._targetEditor.revealRangeInCenterIfOutsideViewport(range, scrollType);\n\t}\n\n\tpublic revealRangeNearTop(range: IRange, scrollType: ScrollType = ScrollType.Smooth): void {\n\t\tthis._targetEditor.revealRangeNearTop(range, scrollType);\n\t}\n\n\tpublic revealRangeNearTopIfOutsideViewport(range: IRange, scrollType: ScrollType = ScrollType.Smooth): void {\n\t\tthis._targetEditor.revealRangeNearTopIfOutsideViewport(range, scrollType);\n\t}\n\n\tpublic revealRangeAtTop(range: IRange, scrollType: ScrollType = ScrollType.Smooth): void {\n\t\tthis._targetEditor.revealRangeAtTop(range, scrollType);\n\t}\n\n\tpublic getSupportedActions(): IEditorAction[] {\n\t\treturn this._targetEditor.getSupportedActions();\n\t}\n\n\tpublic focus(): void {\n\t\tthis._targetEditor.focus();\n\t}\n\n\tpublic trigger(source: string | null | undefined, handlerId: string, payload: any): void {\n\t\tthis._targetEditor.trigger(source, handlerId, payload);\n\t}\n\n\tpublic createDecorationsCollection(decorations?: IModelDeltaDecoration[]): IEditorDecorationsCollection {\n\t\treturn this._targetEditor.createDecorationsCollection(decorations);\n\t}\n\n\tpublic changeDecorations(callback: (changeAccessor: IModelDecorationsChangeAccessor) => any): any {\n\t\treturn this._targetEditor.changeDecorations(callback);\n\t}\n\n\t// #endregion\n}\n"]}