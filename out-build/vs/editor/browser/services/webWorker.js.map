{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/browser/services/webWorker.ts"],"names":[],"mappings":"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","file":"webWorker.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getAllMethodNames } from 'vs/base/common/objects';\nimport { URI } from 'vs/base/common/uri';\nimport { EditorWorkerClient } from 'vs/editor/browser/services/editorWorkerService';\nimport { ILanguageConfigurationService } from 'vs/editor/common/languages/languageConfigurationRegistry';\nimport { IModelService } from 'vs/editor/common/services/model';\n\n/**\n * Create a new web worker that has model syncing capabilities built in.\n * Specify an AMD module to load that will `create` an object that will be proxied.\n */\nexport function createWebWorker<T extends object>(modelService: IModelService, languageConfigurationService: ILanguageConfigurationService, opts: IWebWorkerOptions): MonacoWebWorker<T> {\n\treturn new MonacoWebWorkerImpl<T>(modelService, languageConfigurationService, opts);\n}\n\n/**\n * A web worker that can provide a proxy to an arbitrary file.\n */\nexport interface MonacoWebWorker<T> {\n\t/**\n\t * Terminate the web worker, thus invalidating the returned proxy.\n\t */\n\tdispose(): void;\n\t/**\n\t * Get a proxy to the arbitrary loaded code.\n\t */\n\tgetProxy(): Promise<T>;\n\t/**\n\t * Synchronize (send) the models at `resources` to the web worker,\n\t * making them available in the monaco.worker.getMirrorModels().\n\t */\n\twithSyncedResources(resources: URI[]): Promise<T>;\n}\n\nexport interface IWebWorkerOptions {\n\t/**\n\t * The AMD moduleId to load.\n\t * It should export a function `create` that should return the exported proxy.\n\t */\n\tmoduleId: string;\n\t/**\n\t * The data to send over when calling create on the module.\n\t */\n\tcreateData?: any;\n\t/**\n\t * A label to be used to identify the web worker for debugging purposes.\n\t */\n\tlabel?: string;\n\t/**\n\t * An object that can be used by the web worker to make calls back to the main thread.\n\t */\n\thost?: any;\n\t/**\n\t * Keep idle models.\n\t * Defaults to false, which means that idle models will stop syncing after a while.\n\t */\n\tkeepIdleModels?: boolean;\n}\n\nclass MonacoWebWorkerImpl<T extends object> extends EditorWorkerClient implements MonacoWebWorker<T> {\n\n\tprivate readonly _foreignModuleId: string;\n\tprivate readonly _foreignModuleHost: { [method: string]: Function } | null;\n\tprivate _foreignModuleCreateData: any | null;\n\tprivate _foreignProxy: Promise<T> | null;\n\n\tconstructor(modelService: IModelService, languageConfigurationService: ILanguageConfigurationService, opts: IWebWorkerOptions) {\n\t\tsuper(modelService, opts.keepIdleModels || false, opts.label, languageConfigurationService);\n\t\tthis._foreignModuleId = opts.moduleId;\n\t\tthis._foreignModuleCreateData = opts.createData || null;\n\t\tthis._foreignModuleHost = opts.host || null;\n\t\tthis._foreignProxy = null;\n\t}\n\n\t// foreign host request\n\tpublic override fhr(method: string, args: any[]): Promise<any> {\n\t\tif (!this._foreignModuleHost || typeof this._foreignModuleHost[method] !== 'function') {\n\t\t\treturn Promise.reject(new Error('Missing method ' + method + ' or missing main thread foreign host.'));\n\t\t}\n\n\t\ttry {\n\t\t\treturn Promise.resolve(this._foreignModuleHost[method].apply(this._foreignModuleHost, args));\n\t\t} catch (e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n\n\tprivate _getForeignProxy(): Promise<T> {\n\t\tif (!this._foreignProxy) {\n\t\t\tthis._foreignProxy = this._getProxy().then((proxy) => {\n\t\t\t\tconst foreignHostMethods = this._foreignModuleHost ? getAllMethodNames(this._foreignModuleHost) : [];\n\t\t\t\treturn proxy.loadForeignModule(this._foreignModuleId, this._foreignModuleCreateData, foreignHostMethods).then((foreignMethods) => {\n\t\t\t\t\tthis._foreignModuleCreateData = null;\n\n\t\t\t\t\tconst proxyMethodRequest = (method: string, args: any[]): Promise<any> => {\n\t\t\t\t\t\treturn proxy.fmr(method, args);\n\t\t\t\t\t};\n\n\t\t\t\t\tconst createProxyMethod = (method: string, proxyMethodRequest: (method: string, args: any[]) => Promise<any>): () => Promise<any> => {\n\t\t\t\t\t\treturn function () {\n\t\t\t\t\t\t\tconst args = Array.prototype.slice.call(arguments, 0);\n\t\t\t\t\t\t\treturn proxyMethodRequest(method, args);\n\t\t\t\t\t\t};\n\t\t\t\t\t};\n\n\t\t\t\t\tconst foreignProxy = {} as T;\n\t\t\t\t\tfor (const foreignMethod of foreignMethods) {\n\t\t\t\t\t\t(<any>foreignProxy)[foreignMethod] = createProxyMethod(foreignMethod, proxyMethodRequest);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn foreignProxy;\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\treturn this._foreignProxy;\n\t}\n\n\tpublic getProxy(): Promise<T> {\n\t\treturn this._getForeignProxy();\n\t}\n\n\tpublic withSyncedResources(resources: URI[]): Promise<T> {\n\t\treturn this._withSyncedResources(resources).then(_ => this.getProxy());\n\t}\n}\n"]}