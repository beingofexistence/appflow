{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/browser/services/bulkEditService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAYnF,QAAA,GAAG,GAAgB,IAAA,mBAAG,EAA+B,uBAAuB,CAAC,CAAC;IAE3F,MAAa,GAAG;QAEf,YAA+B,QAAgC;YAAhC,aAAQ,GAAR,QAAQ,CAAwB;QAAI,CAAC;QAEpE,MAAM,CAAC,OAAO,CAAC,IAAmB;YAEjC,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBAC5B,IAAI,GAAG,CAAc,EAAE,CAAC,IAAI,CAAC,EAAE;oBAC9B,OAAO,GAAG,CAAc,IAAI,CAAC,IAAI,CAAC,CAAC;iBACnC;gBAED,IAAI,GAAG,CAAc,EAAE,CAAC,IAAI,CAAC,EAAE;oBAC9B,OAAO,GAAG,CAAc,IAAI,CAAC,IAAI,CAAC,CAAC;iBACnC;gBACD,MAAM,IAAI,KAAK,CAAC,kBAAkB,CAAC,CAAC;YACrC,CAAC,CAAC,CAAC;QACJ,CAAC;KACD;IAjBD,kBAiBC;IAED,MAAa,GAAiB,SAAQ,GAAG;QAExC,MAAM,CAAC,EAAE,CAAC,SAAc;YACvB,IAAI,SAAS,YAAY,GAAG,EAAe;gBAC1C,OAAO,IAAI,CAAC;aACZ;YACD,OAAO,IAAA,WAAG,EAAM,SAAS,CAAC;mBACtB,SAAG,CAAC,KAAK,CAAsB,SAAU,CAAC,QAAQ,CAAC;mBACnD,IAAA,WAAG,EAA2B,SAAU,CAAC,QAAQ,CAAC,CAAC;QACxD,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,IAAwB;YACnC,IAAI,IAAI,YAAY,GAAG,EAAe;gBACrC,OAAO,IAAI,CAAC;aACZ;iBAAM;gBACN,OAAO,IAAI,GAAG,CAAc,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;aACzF;QACF,CAAC;QAED,YACU,QAAa,EACb,QAAkD,EAClD,YAAgC,SAAS,EAClD,QAAgC;YAEhC,KAAK,CAAC,QAAQ,CAAC,CAAC;YALP,aAAQ,GAAR,QAAQ,CAAK;YACb,aAAQ,GAAR,QAAQ,CAA0C;YAClD,cAAS,GAAT,SAAS,CAAgC;QAInD,CAAC;KACD;IA3BD,kBA2BC;IAED,MAAa,GAAiB,SAAQ,GAAG;QAExC,MAAM,CAAC,EAAE,CAAC,SAAc;YACvB,IAAI,SAAS,YAAY,GAAG,EAAe;gBAC1C,OAAO,IAAI,CAAC;aACZ;iBAAM;gBACN,OAAO,IAAA,WAAG,EAAM,SAAS,CAAC;uBACtB,CAAC,OAAO,CAAsB,SAAU,CAAC,WAAW,CAAC,IAAI,OAAO,CAAsB,SAAU,CAAC,WAAW,CAAC,CAAC,CAAC;aACnH;QACF,CAAC;QAED,MAAM,CAAC,IAAI,CAAC,IAAwB;YACnC,IAAI,IAAI,YAAY,GAAG,EAAe;gBACrC,OAAO,IAAI,CAAC;aACZ;iBAAM;gBACN,OAAO,IAAI,GAAG,CAAc,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC7F;QACF,CAAC;QAED,YACU,WAA4B,EAC5B,WAA4B,EAC5B,UAAoC,EAAE,EAC/C,QAAgC;YAEhC,KAAK,CAAC,QAAQ,CAAC,CAAC;YALP,gBAAW,GAAX,WAAW,CAAiB;YAC5B,gBAAW,GAAX,WAAW,CAAiB;YAC5B,YAAO,GAAP,OAAO,CAA+B;QAIhD,CAAC;KACD;IA3BD,kBA2BC","file":"bulkEditService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { TextEdit, WorkspaceEdit, WorkspaceEditMetadata, IWorkspaceFileEdit, WorkspaceFileEditOptions, IWorkspaceTextEdit } from 'vs/editor/common/languages';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IProgress, IProgressStep } from 'vs/platform/progress/common/progress';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { isObject } from 'vs/base/common/types';\nimport { UndoRedoSource } from 'vs/platform/undoRedo/common/undoRedo';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nexport const IBulkEditService = createDecorator<IBulkEditService>('IWorkspaceEditService');\n\nexport class ResourceEdit {\n\n\tprotected constructor(readonly metadata?: WorkspaceEditMetadata) { }\n\n\tstatic convert(edit: WorkspaceEdit): ResourceEdit[] {\n\n\t\treturn edit.edits.map(edit => {\n\t\t\tif (ResourceTextEdit.is(edit)) {\n\t\t\t\treturn ResourceTextEdit.lift(edit);\n\t\t\t}\n\n\t\t\tif (ResourceFileEdit.is(edit)) {\n\t\t\t\treturn ResourceFileEdit.lift(edit);\n\t\t\t}\n\t\t\tthrow new Error('Unsupported edit');\n\t\t});\n\t}\n}\n\nexport class ResourceTextEdit extends ResourceEdit implements IWorkspaceTextEdit {\n\n\tstatic is(candidate: any): candidate is IWorkspaceTextEdit {\n\t\tif (candidate instanceof ResourceTextEdit) {\n\t\t\treturn true;\n\t\t}\n\t\treturn isObject(candidate)\n\t\t\t&& URI.isUri((<IWorkspaceTextEdit>candidate).resource)\n\t\t\t&& isObject((<IWorkspaceTextEdit>candidate).textEdit);\n\t}\n\n\tstatic lift(edit: IWorkspaceTextEdit): ResourceTextEdit {\n\t\tif (edit instanceof ResourceTextEdit) {\n\t\t\treturn edit;\n\t\t} else {\n\t\t\treturn new ResourceTextEdit(edit.resource, edit.textEdit, edit.versionId, edit.metadata);\n\t\t}\n\t}\n\n\tconstructor(\n\t\treadonly resource: URI,\n\t\treadonly textEdit: TextEdit & { insertAsSnippet?: boolean },\n\t\treadonly versionId: number | undefined = undefined,\n\t\tmetadata?: WorkspaceEditMetadata,\n\t) {\n\t\tsuper(metadata);\n\t}\n}\n\nexport class ResourceFileEdit extends ResourceEdit implements IWorkspaceFileEdit {\n\n\tstatic is(candidate: any): candidate is IWorkspaceFileEdit {\n\t\tif (candidate instanceof ResourceFileEdit) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn isObject(candidate)\n\t\t\t\t&& (Boolean((<IWorkspaceFileEdit>candidate).newResource) || Boolean((<IWorkspaceFileEdit>candidate).oldResource));\n\t\t}\n\t}\n\n\tstatic lift(edit: IWorkspaceFileEdit): ResourceFileEdit {\n\t\tif (edit instanceof ResourceFileEdit) {\n\t\t\treturn edit;\n\t\t} else {\n\t\t\treturn new ResourceFileEdit(edit.oldResource, edit.newResource, edit.options, edit.metadata);\n\t\t}\n\t}\n\n\tconstructor(\n\t\treadonly oldResource: URI | undefined,\n\t\treadonly newResource: URI | undefined,\n\t\treadonly options: WorkspaceFileEditOptions = {},\n\t\tmetadata?: WorkspaceEditMetadata\n\t) {\n\t\tsuper(metadata);\n\t}\n}\n\nexport interface IBulkEditOptions {\n\teditor?: ICodeEditor;\n\tprogress?: IProgress<IProgressStep>;\n\ttoken?: CancellationToken;\n\tshowPreview?: boolean;\n\tlabel?: string;\n\tcode?: string;\n\tquotableLabel?: string;\n\tundoRedoSource?: UndoRedoSource;\n\tundoRedoGroupId?: number;\n\tconfirmBeforeUndo?: boolean;\n\trespectAutoSaveConfig?: boolean;\n}\n\nexport interface IBulkEditResult {\n\tariaSummary: string;\n\tisApplied: boolean;\n}\n\nexport type IBulkEditPreviewHandler = (edits: ResourceEdit[], options?: IBulkEditOptions) => Promise<ResourceEdit[]>;\n\nexport interface IBulkEditService {\n\treadonly _serviceBrand: undefined;\n\n\thasPreviewHandler(): boolean;\n\n\tsetPreviewHandler(handler: IBulkEditPreviewHandler): IDisposable;\n\n\tapply(edit: ResourceEdit[] | WorkspaceEdit, options?: IBulkEditOptions): Promise<IBulkEditResult>;\n}\n"]}