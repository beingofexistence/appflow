{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/browser/services/openerService.ts"],"names":[],"mappings":"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","file":"openerService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from 'vs/base/browser/dom';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { LinkedList } from 'vs/base/common/linkedList';\nimport { ResourceMap } from 'vs/base/common/map';\nimport { parse } from 'vs/base/common/marshalling';\nimport { Schemas } from 'vs/base/common/network';\nimport { normalizePath } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { EditorOpenSource } from 'vs/platform/editor/common/editor';\nimport { extractSelection, IExternalOpener, IExternalUriResolver, IOpener, IOpenerService, IResolvedExternalUri, IValidator, matchesScheme, matchesSomeScheme, OpenOptions, ResolveExternalUriOptions } from 'vs/platform/opener/common/opener';\n\nclass CommandOpener implements IOpener {\n\n\tconstructor(@ICommandService private readonly _commandService: ICommandService) { }\n\n\tasync open(target: URI | string, options?: OpenOptions): Promise<boolean> {\n\t\tif (!matchesScheme(target, Schemas.command)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!options?.allowCommands) {\n\t\t\t// silently ignore commands when command-links are disabled, also\n\t\t\t// suppress other openers by returning TRUE\n\t\t\treturn true;\n\t\t}\n\n\t\tif (typeof target === 'string') {\n\t\t\ttarget = URI.parse(target);\n\t\t}\n\n\t\tif (Array.isArray(options.allowCommands)) {\n\t\t\t// Only allow specific commands\n\t\t\tif (!options.allowCommands.includes(target.path)) {\n\t\t\t\t// Suppress other openers by returning TRUE\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// execute as command\n\t\tlet args: any = [];\n\t\ttry {\n\t\t\targs = parse(decodeURIComponent(target.query));\n\t\t} catch {\n\t\t\t// ignore and retry\n\t\t\ttry {\n\t\t\t\targs = parse(target.query);\n\t\t\t} catch {\n\t\t\t\t// ignore error\n\t\t\t}\n\t\t}\n\t\tif (!Array.isArray(args)) {\n\t\t\targs = [args];\n\t\t}\n\t\tawait this._commandService.executeCommand(target.path, ...args);\n\t\treturn true;\n\t}\n}\n\nclass EditorOpener implements IOpener {\n\n\tconstructor(@ICodeEditorService private readonly _editorService: ICodeEditorService) { }\n\n\tasync open(target: URI | string, options: OpenOptions) {\n\t\tif (typeof target === 'string') {\n\t\t\ttarget = URI.parse(target);\n\t\t}\n\t\tconst { selection, uri } = extractSelection(target);\n\t\ttarget = uri;\n\n\t\tif (target.scheme === Schemas.file) {\n\t\t\ttarget = normalizePath(target); // workaround for non-normalized paths (https://github.com/microsoft/vscode/issues/12954)\n\t\t}\n\n\t\tawait this._editorService.openCodeEditor(\n\t\t\t{\n\t\t\t\tresource: target,\n\t\t\t\toptions: {\n\t\t\t\t\tselection,\n\t\t\t\t\tsource: options?.fromUserGesture ? EditorOpenSource.USER : EditorOpenSource.API,\n\t\t\t\t\t...options?.editorOptions\n\t\t\t\t}\n\t\t\t},\n\t\t\tthis._editorService.getFocusedCodeEditor(),\n\t\t\toptions?.openToSide\n\t\t);\n\n\t\treturn true;\n\t}\n}\n\nexport class OpenerService implements IOpenerService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _openers = new LinkedList<IOpener>();\n\tprivate readonly _validators = new LinkedList<IValidator>();\n\tprivate readonly _resolvers = new LinkedList<IExternalUriResolver>();\n\tprivate readonly _resolvedUriTargets = new ResourceMap<URI>(uri => uri.with({ path: null, fragment: null, query: null }).toString());\n\n\tprivate _defaultExternalOpener: IExternalOpener;\n\tprivate readonly _externalOpeners = new LinkedList<IExternalOpener>();\n\n\tconstructor(\n\t\t@ICodeEditorService editorService: ICodeEditorService,\n\t\t@ICommandService commandService: ICommandService\n\t) {\n\t\t// Default external opener is going through window.open()\n\t\tthis._defaultExternalOpener = {\n\t\t\topenExternal: async href => {\n\t\t\t\t// ensure to open HTTP/HTTPS links into new windows\n\t\t\t\t// to not trigger a navigation. Any other link is\n\t\t\t\t// safe to be set as HREF to prevent a blank window\n\t\t\t\t// from opening.\n\t\t\t\tif (matchesSomeScheme(href, Schemas.http, Schemas.https)) {\n\t\t\t\t\tdom.windowOpenNoOpener(href);\n\t\t\t\t} else {\n\t\t\t\t\twindow.location.href = href;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t};\n\n\t\t// Default opener: any external, maito, http(s), command, and catch-all-editors\n\t\tthis._openers.push({\n\t\t\topen: async (target: URI | string, options?: OpenOptions) => {\n\t\t\t\tif (options?.openExternal || matchesSomeScheme(target, Schemas.mailto, Schemas.http, Schemas.https, Schemas.vsls)) {\n\t\t\t\t\t// open externally\n\t\t\t\t\tawait this._doOpenExternal(target, options);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t\tthis._openers.push(new CommandOpener(commandService));\n\t\tthis._openers.push(new EditorOpener(editorService));\n\t}\n\n\tregisterOpener(opener: IOpener): IDisposable {\n\t\tconst remove = this._openers.unshift(opener);\n\t\treturn { dispose: remove };\n\t}\n\n\tregisterValidator(validator: IValidator): IDisposable {\n\t\tconst remove = this._validators.push(validator);\n\t\treturn { dispose: remove };\n\t}\n\n\tregisterExternalUriResolver(resolver: IExternalUriResolver): IDisposable {\n\t\tconst remove = this._resolvers.push(resolver);\n\t\treturn { dispose: remove };\n\t}\n\n\tsetDefaultExternalOpener(externalOpener: IExternalOpener): void {\n\t\tthis._defaultExternalOpener = externalOpener;\n\t}\n\n\tregisterExternalOpener(opener: IExternalOpener): IDisposable {\n\t\tconst remove = this._externalOpeners.push(opener);\n\t\treturn { dispose: remove };\n\t}\n\n\tasync open(target: URI | string, options?: OpenOptions): Promise<boolean> {\n\t\t// check with contributed validators\n\t\tconst targetURI = typeof target === 'string' ? URI.parse(target) : target;\n\t\t// validate against the original URI that this URI resolves to, if one exists\n\t\tconst validationTarget = this._resolvedUriTargets.get(targetURI) ?? target;\n\t\tfor (const validator of this._validators) {\n\t\t\tif (!(await validator.shouldOpen(validationTarget, options))) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\t// check with contributed openers\n\t\tfor (const opener of this._openers) {\n\t\t\tconst handled = await opener.open(target, options);\n\t\t\tif (handled) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tasync resolveExternalUri(resource: URI, options?: ResolveExternalUriOptions): Promise<IResolvedExternalUri> {\n\t\tfor (const resolver of this._resolvers) {\n\t\t\ttry {\n\t\t\t\tconst result = await resolver.resolveExternalUri(resource, options);\n\t\t\t\tif (result) {\n\t\t\t\t\tif (!this._resolvedUriTargets.has(result.resolved)) {\n\t\t\t\t\t\tthis._resolvedUriTargets.set(result.resolved, resource);\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\t\t\t} catch {\n\t\t\t\t// noop\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error('Could not resolve external URI: ' + resource.toString());\n\t}\n\n\tprivate async _doOpenExternal(resource: URI | string, options: OpenOptions | undefined): Promise<boolean> {\n\n\t\t//todo@jrieken IExternalUriResolver should support `uri: URI | string`\n\t\tconst uri = typeof resource === 'string' ? URI.parse(resource) : resource;\n\t\tlet externalUri: URI;\n\n\t\ttry {\n\t\t\texternalUri = (await this.resolveExternalUri(uri, options)).resolved;\n\t\t} catch {\n\t\t\texternalUri = uri;\n\t\t}\n\n\t\tlet href: string;\n\t\tif (typeof resource === 'string' && uri.toString() === externalUri.toString()) {\n\t\t\t// open the url-string AS IS\n\t\t\thref = resource;\n\t\t} else {\n\t\t\t// open URI using the toString(noEncode)+encodeURI-trick\n\t\t\thref = encodeURI(externalUri.toString(true));\n\t\t}\n\n\t\tif (options?.allowContributedOpeners) {\n\t\t\tconst preferredOpenerId = typeof options?.allowContributedOpeners === 'string' ? options?.allowContributedOpeners : undefined;\n\t\t\tfor (const opener of this._externalOpeners) {\n\t\t\t\tconst didOpen = await opener.openExternal(href, {\n\t\t\t\t\tsourceUri: uri,\n\t\t\t\t\tpreferredOpenerId,\n\t\t\t\t}, CancellationToken.None);\n\t\t\t\tif (didOpen) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this._defaultExternalOpener.openExternal(href, { sourceUri: uri }, CancellationToken.None);\n\t}\n\n\tdispose() {\n\t\tthis._validators.clear();\n\t}\n}\n"]}