{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/browser/dnd.ts"],"names":[],"mappings":"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","file":"dnd.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DataTransfers } from 'vs/base/browser/dnd';\nimport { createFileDataTransferItem, createStringDataTransferItem, IDataTransferItem, UriList, VSDataTransfer } from 'vs/base/common/dataTransfer';\nimport { Mimes } from 'vs/base/common/mime';\nimport { URI } from 'vs/base/common/uri';\nimport { CodeDataTransfers, FileAdditionalNativeProperties } from 'vs/platform/dnd/browser/dnd';\n\n\nexport function toVSDataTransfer(dataTransfer: DataTransfer) {\n\tconst vsDataTransfer = new VSDataTransfer();\n\tfor (const item of dataTransfer.items) {\n\t\tconst type = item.type;\n\t\tif (item.kind === 'string') {\n\t\t\tconst asStringValue = new Promise<string>(resolve => item.getAsString(resolve));\n\t\t\tvsDataTransfer.append(type, createStringDataTransferItem(asStringValue));\n\t\t} else if (item.kind === 'file') {\n\t\t\tconst file = item.getAsFile();\n\t\t\tif (file) {\n\t\t\t\tvsDataTransfer.append(type, createFileDataTransferItemFromFile(file));\n\t\t\t}\n\t\t}\n\t}\n\treturn vsDataTransfer;\n}\n\nfunction createFileDataTransferItemFromFile(file: File): IDataTransferItem {\n\tconst uri = (file as FileAdditionalNativeProperties).path ? URI.parse((file as FileAdditionalNativeProperties).path!) : undefined;\n\treturn createFileDataTransferItem(file.name, uri, async () => {\n\t\treturn new Uint8Array(await file.arrayBuffer());\n\t});\n}\n\nconst INTERNAL_DND_MIME_TYPES = Object.freeze([\n\tCodeDataTransfers.EDITORS,\n\tCodeDataTransfers.FILES,\n\tDataTransfers.RESOURCES,\n\tDataTransfers.INTERNAL_URI_LIST,\n]);\n\nexport function toExternalVSDataTransfer(sourceDataTransfer: DataTransfer, overwriteUriList = false): VSDataTransfer {\n\tconst vsDataTransfer = toVSDataTransfer(sourceDataTransfer);\n\n\t// Try to expose the internal uri-list type as the standard type\n\tconst uriList = vsDataTransfer.get(DataTransfers.INTERNAL_URI_LIST);\n\tif (uriList) {\n\t\tvsDataTransfer.replace(Mimes.uriList, uriList);\n\t} else {\n\t\tif (overwriteUriList || !vsDataTransfer.has(Mimes.uriList)) {\n\t\t\t// Otherwise, fallback to adding dragged resources to the uri list\n\t\t\tconst editorData: string[] = [];\n\t\t\tfor (const item of sourceDataTransfer.items) {\n\t\t\t\tconst file = item.getAsFile();\n\t\t\t\tif (file) {\n\t\t\t\t\tconst path = (file as FileAdditionalNativeProperties).path;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (path) {\n\t\t\t\t\t\t\teditorData.push(URI.file(path).toString());\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\teditorData.push(URI.parse(file.name, true).toString());\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch {\n\t\t\t\t\t\t// Parsing failed. Leave out from list\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (editorData.length) {\n\t\t\t\tvsDataTransfer.replace(Mimes.uriList, createStringDataTransferItem(UriList.create(editorData)));\n\t\t\t}\n\t\t}\n\t}\n\n\tfor (const internal of INTERNAL_DND_MIME_TYPES) {\n\t\tvsDataTransfer.delete(internal);\n\t}\n\n\treturn vsDataTransfer;\n}\n"]}