{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/browser/config/elementSizeObserver.ts"],"names":[],"mappings":"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","file":"elementSizeObserver.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IDimension } from 'vs/editor/common/core/dimension';\nimport { Emitter, Event } from 'vs/base/common/event';\n\nexport class ElementSizeObserver extends Disposable {\n\n\tprivate _onDidChange = this._register(new Emitter<void>());\n\tpublic readonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tprivate readonly _referenceDomElement: HTMLElement | null;\n\tprivate _width: number;\n\tprivate _height: number;\n\tprivate _resizeObserver: ResizeObserver | null;\n\n\tconstructor(referenceDomElement: HTMLElement | null, dimension: IDimension | undefined) {\n\t\tsuper();\n\t\tthis._referenceDomElement = referenceDomElement;\n\t\tthis._width = -1;\n\t\tthis._height = -1;\n\t\tthis._resizeObserver = null;\n\t\tthis.measureReferenceDomElement(false, dimension);\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis.stopObserving();\n\t\tsuper.dispose();\n\t}\n\n\tpublic getWidth(): number {\n\t\treturn this._width;\n\t}\n\n\tpublic getHeight(): number {\n\t\treturn this._height;\n\t}\n\n\tpublic startObserving(): void {\n\t\tif (!this._resizeObserver && this._referenceDomElement) {\n\t\t\t// We want to react to the resize observer only once per animation frame\n\t\t\t// The first time the resize observer fires, we will react to it immediately.\n\t\t\t// Otherwise we will postpone to the next animation frame.\n\t\t\t// We'll use `observeContentRect` to store the content rect we received.\n\n\t\t\tlet observeContentRect: DOMRectReadOnly | null = null;\n\t\t\tconst observeNow = () => {\n\t\t\t\tif (observeContentRect) {\n\t\t\t\t\tthis.observe({ width: observeContentRect.width, height: observeContentRect.height });\n\t\t\t\t} else {\n\t\t\t\t\tthis.observe();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tlet shouldObserve = false;\n\t\t\tlet alreadyObservedThisAnimationFrame = false;\n\n\t\t\tconst update = () => {\n\t\t\t\tif (shouldObserve && !alreadyObservedThisAnimationFrame) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tshouldObserve = false;\n\t\t\t\t\t\talreadyObservedThisAnimationFrame = true;\n\t\t\t\t\t\tobserveNow();\n\t\t\t\t\t} finally {\n\t\t\t\t\t\trequestAnimationFrame(() => {\n\t\t\t\t\t\t\talreadyObservedThisAnimationFrame = false;\n\t\t\t\t\t\t\tupdate();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis._resizeObserver = new ResizeObserver((entries) => {\n\t\t\t\tobserveContentRect = (entries && entries[0] && entries[0].contentRect ? entries[0].contentRect : null);\n\t\t\t\tshouldObserve = true;\n\t\t\t\tupdate();\n\t\t\t});\n\t\t\tthis._resizeObserver.observe(this._referenceDomElement);\n\t\t}\n\t}\n\n\tpublic stopObserving(): void {\n\t\tif (this._resizeObserver) {\n\t\t\tthis._resizeObserver.disconnect();\n\t\t\tthis._resizeObserver = null;\n\t\t}\n\t}\n\n\tpublic observe(dimension?: IDimension): void {\n\t\tthis.measureReferenceDomElement(true, dimension);\n\t}\n\n\tprivate measureReferenceDomElement(emitEvent: boolean, dimension?: IDimension): void {\n\t\tlet observedWidth = 0;\n\t\tlet observedHeight = 0;\n\t\tif (dimension) {\n\t\t\tobservedWidth = dimension.width;\n\t\t\tobservedHeight = dimension.height;\n\t\t} else if (this._referenceDomElement) {\n\t\t\tobservedWidth = this._referenceDomElement.clientWidth;\n\t\t\tobservedHeight = this._referenceDomElement.clientHeight;\n\t\t}\n\t\tobservedWidth = Math.max(5, observedWidth);\n\t\tobservedHeight = Math.max(5, observedHeight);\n\t\tif (this._width !== observedWidth || this._height !== observedHeight) {\n\t\t\tthis._width = observedWidth;\n\t\t\tthis._height = observedHeight;\n\t\t\tif (emitEvent) {\n\t\t\t\tthis._onDidChange.fire();\n\t\t\t}\n\t\t}\n\t}\n}\n"]}