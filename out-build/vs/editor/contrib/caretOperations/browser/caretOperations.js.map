{"version":3,"sources":["vs/editor/contrib/caretOperations/browser/caretOperations.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAShG,MAAM,eAAgB,SAAQ,sBAAG;QAIhC,YAAY,IAAa,EAAE,IAAoB;YAC9C,KAAK,CAAC,IAAI,CAAC,CAAC;YAEZ,IAAI,CAAC,CAAC,GAAM,IAAI,CAAC;QAClB,CAAC;QAEM,GAAG,CAAC,QAA0B,EAAE,MAAmB;YACzD,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE;gBACvB,OAAO;aACP;YAED,MAAM,QAAQ,GAAe,EAAE,CAAC;YAChC,MAAM,UAAU,GAAG,MAAM,CAAC,aAAa,EAAE,CAAC;YAE1C,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;gBACnC,QAAQ,CAAC,IAAI,CAAC,IAAI,sBAAG,CAAc,SAAS,EAAE,IAAI,CAAC,CAAC,CAAI,CAAC,CAAC;aAC1D;YAED,MAAM,CAAC,YAAY,EAAE,CAAC;YACtB,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;YAC1C,MAAM,CAAC,YAAY,EAAE,CAAC;QACvB,CAAC;KACD;IAED,MAAM,mBAAoB,SAAQ,eAAe;QAChD;YACC,KAAK,CAAC,IAAI,EAAE;gBACX,EAAE,EAAE,oCAAoC;gBACxC,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAgB,EAAE,IAAyB,CAAC;gBAChE,KAAK,EAAE,yBAAyB;gBAChC,YAAY,EAAE,qCAAiB,CAAC,QAAQ;aACxC,CAAC,CAAC;QACJ,CAAC;KACD;IAED,MAAM,oBAAqB,SAAQ,eAAe;QACjD;YACC,KAAK,CAAC,KAAK,EAAE;gBACZ,EAAE,EAAE,qCAAqC;gBACzC,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAiB,EAAE,IAA0B,CAAC;gBAClE,KAAK,EAAE,0BAA0B;gBACjC,YAAY,EAAE,qCAAiB,CAAC,QAAQ;aACxC,CAAC,CAAC;QACJ,CAAC;KACD;IAED,IAAA,sBAAG,EAAkB,mBAAmB,CAAC,CAAC;IAC1C,IAAA,sBAAG,EAAkB,oBAAoB,CAAC,CAAC","file":"caretOperations.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, IActionOptions, registerEditorAction, ServicesAccessor } from 'vs/editor/browser/editorExtensions';\nimport { ICommand } from 'vs/editor/common/editorCommon';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { MoveCaretCommand } from 'vs/editor/contrib/caretOperations/browser/moveCaretCommand';\nimport * as nls from 'vs/nls';\n\nclass MoveCaretAction extends EditorAction {\n\n\tprivate readonly left: boolean;\n\n\tconstructor(left: boolean, opts: IActionOptions) {\n\t\tsuper(opts);\n\n\t\tthis.left = left;\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst commands: ICommand[] = [];\n\t\tconst selections = editor.getSelections();\n\n\t\tfor (const selection of selections) {\n\t\t\tcommands.push(new MoveCaretCommand(selection, this.left));\n\t\t}\n\n\t\teditor.pushUndoStop();\n\t\teditor.executeCommands(this.id, commands);\n\t\teditor.pushUndoStop();\n\t}\n}\n\nclass MoveCaretLeftAction extends MoveCaretAction {\n\tconstructor() {\n\t\tsuper(true, {\n\t\t\tid: 'editor.action.moveCarretLeftAction',\n\t\t\tlabel: nls.localize('caret.moveLeft', \"Move Selected Text Left\"),\n\t\t\talias: 'Move Selected Text Left',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n}\n\nclass MoveCaretRightAction extends MoveCaretAction {\n\tconstructor() {\n\t\tsuper(false, {\n\t\t\tid: 'editor.action.moveCarretRightAction',\n\t\t\tlabel: nls.localize('caret.moveRight', \"Move Selected Text Right\"),\n\t\t\talias: 'Move Selected Text Right',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n}\n\nregisterEditorAction(MoveCaretLeftAction);\nregisterEditorAction(MoveCaretRightAction);\n"]}