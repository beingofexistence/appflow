{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/inlineCompletions/test/browser/suggestWidgetModel.test.ts"],"names":[],"mappings":"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","file":"suggestWidgetModel.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { timeout } from 'vs/base/common/async';\nimport { Event } from 'vs/base/common/event';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { mock } from 'vs/base/test/common/mock';\nimport { runWithFakedTimers } from 'vs/base/test/common/timeTravelScheduler';\nimport { Range } from 'vs/editor/common/core/range';\nimport { CompletionItemKind, CompletionItemProvider } from 'vs/editor/common/languages';\nimport { IEditorWorkerService } from 'vs/editor/common/services/editorWorker';\nimport { ViewModel } from 'vs/editor/common/viewModel/viewModelImpl';\nimport { GhostTextContext } from 'vs/editor/contrib/inlineCompletions/test/browser/utils';\nimport { SnippetController2 } from 'vs/editor/contrib/snippet/browser/snippetController2';\nimport { SuggestController } from 'vs/editor/contrib/suggest/browser/suggestController';\nimport { ISuggestMemoryService } from 'vs/editor/contrib/suggest/browser/suggestMemory';\nimport { ITestCodeEditor, TestCodeEditorInstantiationOptions, withAsyncTestCodeEditor } from 'vs/editor/test/browser/testCodeEditor';\nimport { IMenu, IMenuService } from 'vs/platform/actions/common/actions';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { MockKeybindingService } from 'vs/platform/keybinding/test/common/mockKeybindingService';\nimport { ILogService, NullLogService } from 'vs/platform/log/common/log';\nimport { InMemoryStorageService, IStorageService } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { NullTelemetryService } from 'vs/platform/telemetry/common/telemetryUtils';\nimport * as assert from 'assert';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { LanguageFeaturesService } from 'vs/editor/common/services/languageFeaturesService';\nimport { ILanguageFeaturesService } from 'vs/editor/common/services/languageFeatures';\nimport { InlineCompletionsModel } from 'vs/editor/contrib/inlineCompletions/browser/inlineCompletionsModel';\nimport { InlineCompletionsController } from 'vs/editor/contrib/inlineCompletions/browser/inlineCompletionsController';\nimport { autorun } from 'vs/base/common/observable';\nimport { setUnexpectedErrorHandler } from 'vs/base/common/errors';\nimport { IAudioCueService } from 'vs/platform/audioCues/browser/audioCueService';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nsuite('Suggest Widget Model', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(() => {\n\t\tsetUnexpectedErrorHandler(function (err) {\n\t\t\tthrow err;\n\t\t});\n\t});\n\n\t// This test is skipped because the fix for this causes https://github.com/microsoft/vscode/issues/166023\n\ttest.skip('Active', async () => {\n\t\tawait withAsyncTestCodeEditorAndInlineCompletionsModel('',\n\t\t\t{ fakeClock: true, provider, },\n\t\t\tasync ({ editor, editorViewModel, context, model }) => {\n\t\t\t\tlet last: boolean | undefined = undefined;\n\t\t\t\tconst history = new Array<boolean>();\n\t\t\t\tconst d = autorun(reader => {\n\t\t\t\t\t/** @description debug */\n\t\t\t\t\tconst selectedSuggestItem = !!model.selectedSuggestItem.read(reader);\n\t\t\t\t\tif (last !== selectedSuggestItem) {\n\t\t\t\t\t\tlast = selectedSuggestItem;\n\t\t\t\t\t\thistory.push(last);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tcontext.keyboardType('h');\n\t\t\t\tconst suggestController = (editor.getContribution(SuggestController.ID) as SuggestController);\n\t\t\t\tsuggestController.triggerSuggest();\n\t\t\t\tawait timeout(1000);\n\t\t\t\tassert.deepStrictEqual(history.splice(0), [false, true]);\n\n\t\t\t\tcontext.keyboardType('.');\n\t\t\t\tawait timeout(1000);\n\n\t\t\t\t// No flicker here\n\t\t\t\tassert.deepStrictEqual(history.splice(0), []);\n\t\t\t\tsuggestController.cancelSuggestWidget();\n\t\t\t\tawait timeout(1000);\n\n\t\t\t\tassert.deepStrictEqual(history.splice(0), [false]);\n\n\t\t\t\td.dispose();\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('Ghost Text', async () => {\n\t\tawait withAsyncTestCodeEditorAndInlineCompletionsModel('',\n\t\t\t{ fakeClock: true, provider, suggest: { preview: true } },\n\t\t\tasync ({ editor, editorViewModel, context, model }) => {\n\t\t\t\tcontext.keyboardType('h');\n\t\t\t\tconst suggestController = (editor.getContribution(SuggestController.ID) as SuggestController);\n\t\t\t\tsuggestController.triggerSuggest();\n\t\t\t\tawait timeout(1000);\n\t\t\t\tassert.deepStrictEqual(context.getAndClearViewStates(), ['', 'h[ello]']);\n\n\t\t\t\tcontext.keyboardType('.');\n\t\t\t\tawait timeout(1000);\n\t\t\t\tassert.deepStrictEqual(context.getAndClearViewStates(), ['h', 'hello.[hello]']);\n\n\t\t\t\tsuggestController.cancelSuggestWidget();\n\n\t\t\t\tawait timeout(1000);\n\t\t\t\tassert.deepStrictEqual(context.getAndClearViewStates(), ['hello.']);\n\t\t\t}\n\t\t);\n\t});\n});\n\nconst provider: CompletionItemProvider = {\n\t_debugDisplayName: 'test',\n\ttriggerCharacters: ['.'],\n\tasync provideCompletionItems(model, pos) {\n\t\tconst word = model.getWordAtPosition(pos);\n\t\tconst range = word\n\t\t\t? { startLineNumber: 1, startColumn: word.startColumn, endLineNumber: 1, endColumn: word.endColumn }\n\t\t\t: Range.fromPositions(pos);\n\n\t\treturn {\n\t\t\tsuggestions: [{\n\t\t\t\tinsertText: 'hello',\n\t\t\t\tkind: CompletionItemKind.Text,\n\t\t\t\tlabel: 'hello',\n\t\t\t\trange,\n\t\t\t\tcommitCharacters: ['.'],\n\t\t\t}]\n\t\t};\n\t},\n};\n\nasync function withAsyncTestCodeEditorAndInlineCompletionsModel(\n\ttext: string,\n\toptions: TestCodeEditorInstantiationOptions & { provider?: CompletionItemProvider; fakeClock?: boolean; serviceCollection?: never },\n\tcallback: (args: { editor: ITestCodeEditor; editorViewModel: ViewModel; model: InlineCompletionsModel; context: GhostTextContext }) => Promise<void>\n): Promise<void> {\n\tawait runWithFakedTimers({ useFakeTimers: options.fakeClock }, async () => {\n\t\tconst disposableStore = new DisposableStore();\n\n\t\ttry {\n\t\t\tconst serviceCollection = new ServiceCollection(\n\t\t\t\t[ITelemetryService, NullTelemetryService],\n\t\t\t\t[ILogService, new NullLogService()],\n\t\t\t\t[IStorageService, disposableStore.add(new InMemoryStorageService())],\n\t\t\t\t[IKeybindingService, new MockKeybindingService()],\n\t\t\t\t[IEditorWorkerService, new class extends mock<IEditorWorkerService>() {\n\t\t\t\t\toverride computeWordRanges() {\n\t\t\t\t\t\treturn Promise.resolve({});\n\t\t\t\t\t}\n\t\t\t\t}],\n\t\t\t\t[ISuggestMemoryService, new class extends mock<ISuggestMemoryService>() {\n\t\t\t\t\toverride memorize(): void { }\n\t\t\t\t\toverride select(): number { return 0; }\n\t\t\t\t}],\n\t\t\t\t[IMenuService, new class extends mock<IMenuService>() {\n\t\t\t\t\toverride createMenu() {\n\t\t\t\t\t\treturn new class extends mock<IMenu>() {\n\t\t\t\t\t\t\toverride onDidChange = Event.None;\n\t\t\t\t\t\t\toverride dispose() { }\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t}],\n\t\t\t\t[ILabelService, new class extends mock<ILabelService>() { }],\n\t\t\t\t[IWorkspaceContextService, new class extends mock<IWorkspaceContextService>() { }],\n\t\t\t\t[IAudioCueService, {\n\t\t\t\t\tplayAudioCue: async () => { },\n\t\t\t\t\tisEnabled(cue: unknown) { return false; },\n\t\t\t\t} as any]\n\t\t\t);\n\n\t\t\tif (options.provider) {\n\t\t\t\tconst languageFeaturesService = new LanguageFeaturesService();\n\t\t\t\tserviceCollection.set(ILanguageFeaturesService, languageFeaturesService);\n\t\t\t\tdisposableStore.add(languageFeaturesService.completionProvider.register({ pattern: '**' }, options.provider));\n\t\t\t}\n\n\t\t\tawait withAsyncTestCodeEditor(text, { ...options, serviceCollection }, async (editor, editorViewModel, instantiationService) => {\n\t\t\t\teditor.registerAndInstantiateContribution(SnippetController2.ID, SnippetController2);\n\t\t\t\teditor.registerAndInstantiateContribution(SuggestController.ID, SuggestController);\n\t\t\t\teditor.registerAndInstantiateContribution(InlineCompletionsController.ID, InlineCompletionsController);\n\t\t\t\tconst model = InlineCompletionsController.get(editor)?.model.get()!;\n\n\t\t\t\tconst context = new GhostTextContext(model, editor);\n\t\t\t\tawait callback({ editor, editorViewModel, model, context });\n\t\t\t\tcontext.dispose();\n\t\t\t});\n\t\t} finally {\n\t\t\tdisposableStore.dispose();\n\t\t}\n\t});\n}\n"]}