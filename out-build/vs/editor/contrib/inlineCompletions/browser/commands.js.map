{"version":3,"sources":["vs/editor/contrib/inlineCompletions/browser/commands.ts"],"names":[],"mappings":"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","file":"commands.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { transaction } from 'vs/base/common/observable';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, ServicesAccessor } from 'vs/editor/browser/editorExtensions';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { showNextInlineSuggestionActionId, showPreviousInlineSuggestionActionId, inlineSuggestCommitId } from 'vs/editor/contrib/inlineCompletions/browser/commandIds';\nimport { InlineCompletionContextKeys } from 'vs/editor/contrib/inlineCompletions/browser/inlineCompletionContextKeys';\nimport { InlineCompletionsController } from 'vs/editor/contrib/inlineCompletions/browser/inlineCompletionsController';\nimport { Context as SuggestContext } from 'vs/editor/contrib/suggest/browser/suggest';\nimport * as nls from 'vs/nls';\nimport { MenuId, Action2 } from 'vs/platform/actions/common/actions';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\n\nexport class ShowNextInlineSuggestionAction extends EditorAction {\n\tpublic static ID = showNextInlineSuggestionActionId;\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ShowNextInlineSuggestionAction.ID,\n\t\t\tlabel: nls.localize('action.inlineSuggest.showNext', \"Show Next Inline Suggestion\"),\n\t\t\talias: 'Show Next Inline Suggestion',\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n\t\t\tkbOpts: {\n\t\t\t\tweight: 100,\n\t\t\t\tprimary: KeyMod.Alt | KeyCode.BracketRight,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor | undefined, editor: ICodeEditor): Promise<void> {\n\t\tconst controller = InlineCompletionsController.get(editor);\n\t\tcontroller?.model.get()?.next();\n\t}\n}\n\nexport class ShowPreviousInlineSuggestionAction extends EditorAction {\n\tpublic static ID = showPreviousInlineSuggestionActionId;\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ShowPreviousInlineSuggestionAction.ID,\n\t\t\tlabel: nls.localize('action.inlineSuggest.showPrevious', \"Show Previous Inline Suggestion\"),\n\t\t\talias: 'Show Previous Inline Suggestion',\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n\t\t\tkbOpts: {\n\t\t\t\tweight: 100,\n\t\t\t\tprimary: KeyMod.Alt | KeyCode.BracketLeft,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor | undefined, editor: ICodeEditor): Promise<void> {\n\t\tconst controller = InlineCompletionsController.get(editor);\n\t\tcontroller?.model.get()?.previous();\n\t}\n}\n\nexport class TriggerInlineSuggestionAction extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.inlineSuggest.trigger',\n\t\t\tlabel: nls.localize('action.inlineSuggest.trigger', \"Trigger Inline Suggestion\"),\n\t\t\talias: 'Trigger Inline Suggestion',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor | undefined, editor: ICodeEditor): Promise<void> {\n\t\tconst controller = InlineCompletionsController.get(editor);\n\t\tcontroller?.model.get()?.triggerExplicitly();\n\t}\n}\n\nexport class AcceptNextWordOfInlineCompletion extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.inlineSuggest.acceptNextWord',\n\t\t\tlabel: nls.localize('action.inlineSuggest.acceptNextWord', \"Accept Next Word Of Inline Suggestion\"),\n\t\t\talias: 'Accept Next Word Of Inline Suggestion',\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n\t\t\tkbOpts: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib + 1,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.RightArrow,\n\t\t\t\tkbExpr: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n\t\t\t},\n\t\t\tmenuOpts: [{\n\t\t\t\tmenuId: MenuId.InlineSuggestionToolbar,\n\t\t\t\ttitle: nls.localize('acceptWord', 'Accept Word'),\n\t\t\t\tgroup: 'primary',\n\t\t\t\torder: 2,\n\t\t\t}],\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor | undefined, editor: ICodeEditor): Promise<void> {\n\t\tconst controller = InlineCompletionsController.get(editor);\n\t\tawait controller?.model.get()?.acceptNextWord(controller.editor);\n\t}\n}\n\nexport class AcceptNextLineOfInlineCompletion extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.inlineSuggest.acceptNextLine',\n\t\t\tlabel: nls.localize('action.inlineSuggest.acceptNextLine', \"Accept Next Line Of Inline Suggestion\"),\n\t\t\talias: 'Accept Next Line Of Inline Suggestion',\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.writable, InlineCompletionContextKeys.inlineSuggestionVisible),\n\t\t\tkbOpts: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib + 1,\n\t\t\t},\n\t\t\tmenuOpts: [{\n\t\t\t\tmenuId: MenuId.InlineSuggestionToolbar,\n\t\t\t\ttitle: nls.localize('acceptLine', 'Accept Line'),\n\t\t\t\tgroup: 'secondary',\n\t\t\t\torder: 2,\n\t\t\t}],\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor | undefined, editor: ICodeEditor): Promise<void> {\n\t\tconst controller = InlineCompletionsController.get(editor);\n\t\tawait controller?.model.get()?.acceptNextLine(controller.editor);\n\t}\n}\n\nexport class AcceptInlineCompletion extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: inlineSuggestCommitId,\n\t\t\tlabel: nls.localize('action.inlineSuggest.accept', \"Accept Inline Suggestion\"),\n\t\t\talias: 'Accept Inline Suggestion',\n\t\t\tprecondition: InlineCompletionContextKeys.inlineSuggestionVisible,\n\t\t\tmenuOpts: [{\n\t\t\t\tmenuId: MenuId.InlineSuggestionToolbar,\n\t\t\t\ttitle: nls.localize('accept', \"Accept\"),\n\t\t\t\tgroup: 'primary',\n\t\t\t\torder: 1,\n\t\t\t}],\n\t\t\tkbOpts: {\n\t\t\t\tprimary: KeyCode.Tab,\n\t\t\t\tweight: 200,\n\t\t\t\tkbExpr: ContextKeyExpr.and(\n\t\t\t\t\tInlineCompletionContextKeys.inlineSuggestionVisible,\n\t\t\t\t\tEditorContextKeys.tabMovesFocus.toNegated(),\n\t\t\t\t\tInlineCompletionContextKeys.inlineSuggestionHasIndentationLessThanTabSize,\n\t\t\t\t\tSuggestContext.Visible.toNegated(),\n\t\t\t\t\tEditorContextKeys.hoverFocused.toNegated(),\n\t\t\t\t),\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor | undefined, editor: ICodeEditor): Promise<void> {\n\t\tconst controller = InlineCompletionsController.get(editor);\n\t\tif (controller) {\n\t\t\tcontroller.model.get()?.accept(controller.editor);\n\t\t\tcontroller.editor.focus();\n\t\t}\n\t}\n}\n\nexport class HideInlineCompletion extends EditorAction {\n\tpublic static ID = 'editor.action.inlineSuggest.hide';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: HideInlineCompletion.ID,\n\t\t\tlabel: nls.localize('action.inlineSuggest.hide', \"Hide Inline Suggestion\"),\n\t\t\talias: 'Hide Inline Suggestion',\n\t\t\tprecondition: InlineCompletionContextKeys.inlineSuggestionVisible,\n\t\t\tkbOpts: {\n\t\t\t\tweight: 100,\n\t\t\t\tprimary: KeyCode.Escape,\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor | undefined, editor: ICodeEditor): Promise<void> {\n\t\tconst controller = InlineCompletionsController.get(editor);\n\t\ttransaction(tx => {\n\t\t\tcontroller?.model.get()?.stop(tx);\n\t\t});\n\t}\n}\n\nexport class ToggleAlwaysShowInlineSuggestionToolbar extends Action2 {\n\tpublic static ID = 'editor.action.inlineSuggest.toggleAlwaysShowToolbar';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ToggleAlwaysShowInlineSuggestionToolbar.ID,\n\t\t\ttitle: nls.localize('action.inlineSuggest.alwaysShowToolbar', \"Always Show Toolbar\"),\n\t\t\tf1: false,\n\t\t\tprecondition: undefined,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.InlineSuggestionToolbar,\n\t\t\t\tgroup: 'secondary',\n\t\t\t\torder: 10,\n\t\t\t}],\n\t\t\ttoggled: ContextKeyExpr.equals('config.editor.inlineSuggest.showToolbar', 'always')\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst configService = accessor.get(IConfigurationService);\n\t\tconst currentValue = configService.getValue<'always' | 'onHover'>('editor.inlineSuggest.showToolbar');\n\t\tconst newValue = currentValue === 'always' ? 'onHover' : 'always';\n\t\tconfigService.updateValue('editor.inlineSuggest.showToolbar', newValue);\n\t}\n}\n"]}