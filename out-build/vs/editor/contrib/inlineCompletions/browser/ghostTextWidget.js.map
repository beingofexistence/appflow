{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/inlineCompletions/browser/ghostTextWidget.ts"],"names":[],"mappings":"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","file":"ghostTextWidget.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createTrustedTypesPolicy } from 'vs/base/browser/trustedTypes';\nimport { Event } from 'vs/base/common/event';\nimport { Disposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { IObservable, autorun, derived, observableFromEvent, observableSignalFromEvent, observableValue } from 'vs/base/common/observable';\nimport * as strings from 'vs/base/common/strings';\nimport 'vs/css!./ghostText';\nimport { applyFontInfo } from 'vs/editor/browser/config/domFontInfo';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorFontLigatures, EditorOption, IComputedEditorOptions } from 'vs/editor/common/config/editorOptions';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { StringBuilder } from 'vs/editor/common/core/stringBuilder';\nimport { ILanguageIdCodec } from 'vs/editor/common/languages';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { IModelDeltaDecoration, ITextModel, InjectedTextCursorStops, PositionAffinity } from 'vs/editor/common/model';\nimport { LineTokens } from 'vs/editor/common/tokens/lineTokens';\nimport { LineDecoration } from 'vs/editor/common/viewLayout/lineDecorations';\nimport { RenderLineInput, renderViewLine } from 'vs/editor/common/viewLayout/viewLineRenderer';\nimport { InlineDecorationType } from 'vs/editor/common/viewModel';\nimport { GhostText, GhostTextReplacement } from 'vs/editor/contrib/inlineCompletions/browser/ghostText';\nimport { ColumnRange, applyObservableDecorations } from 'vs/editor/contrib/inlineCompletions/browser/utils';\n\nexport const GHOST_TEXT_DESCRIPTION = 'ghost-text';\nexport interface IGhostTextWidgetModel {\n\treadonly targetTextModel: IObservable<ITextModel | undefined>;\n\treadonly ghostText: IObservable<GhostText | GhostTextReplacement | undefined>;\n\treadonly minReservedLineCount: IObservable<number>;\n}\n\nexport class GhostTextWidget extends Disposable {\n\tprivate readonly isDisposed = observableValue(this, false);\n\tprivate readonly currentTextModel = observableFromEvent(this.editor.onDidChangeModel, () => this.editor.getModel());\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\tprivate readonly model: IGhostTextWidgetModel,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(toDisposable(() => { this.isDisposed.set(true, undefined); }));\n\t\tthis._register(applyObservableDecorations(this.editor, this.decorations));\n\t}\n\n\tprivate readonly uiState = derived(this, reader => {\n\t\tif (this.isDisposed.read(reader)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst textModel = this.currentTextModel.read(reader);\n\t\tif (textModel !== this.model.targetTextModel.read(reader)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst ghostText = this.model.ghostText.read(reader);\n\t\tif (!ghostText) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst replacedRange = ghostText instanceof GhostTextReplacement ? ghostText.columnRange : undefined;\n\n\t\tconst inlineTexts: { column: number; text: string; preview: boolean }[] = [];\n\t\tconst additionalLines: LineData[] = [];\n\n\t\tfunction addToAdditionalLines(lines: readonly string[], className: string | undefined) {\n\t\t\tif (additionalLines.length > 0) {\n\t\t\t\tconst lastLine = additionalLines[additionalLines.length - 1];\n\t\t\t\tif (className) {\n\t\t\t\t\tlastLine.decorations.push(new LineDecoration(lastLine.content.length + 1, lastLine.content.length + 1 + lines[0].length, className, InlineDecorationType.Regular));\n\t\t\t\t}\n\t\t\t\tlastLine.content += lines[0];\n\n\t\t\t\tlines = lines.slice(1);\n\t\t\t}\n\t\t\tfor (const line of lines) {\n\t\t\t\tadditionalLines.push({\n\t\t\t\t\tcontent: line,\n\t\t\t\t\tdecorations: className ? [new LineDecoration(1, line.length + 1, className, InlineDecorationType.Regular)] : []\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst textBufferLine = textModel.getLineContent(ghostText.lineNumber);\n\n\t\tlet hiddenTextStartColumn: number | undefined = undefined;\n\t\tlet lastIdx = 0;\n\t\tfor (const part of ghostText.parts) {\n\t\t\tlet lines = part.lines;\n\t\t\tif (hiddenTextStartColumn === undefined) {\n\t\t\t\tinlineTexts.push({\n\t\t\t\t\tcolumn: part.column,\n\t\t\t\t\ttext: lines[0],\n\t\t\t\t\tpreview: part.preview,\n\t\t\t\t});\n\t\t\t\tlines = lines.slice(1);\n\t\t\t} else {\n\t\t\t\taddToAdditionalLines([textBufferLine.substring(lastIdx, part.column - 1)], undefined);\n\t\t\t}\n\n\t\t\tif (lines.length > 0) {\n\t\t\t\taddToAdditionalLines(lines, GHOST_TEXT_DESCRIPTION);\n\t\t\t\tif (hiddenTextStartColumn === undefined && part.column <= textBufferLine.length) {\n\t\t\t\t\thiddenTextStartColumn = part.column;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlastIdx = part.column - 1;\n\t\t}\n\t\tif (hiddenTextStartColumn !== undefined) {\n\t\t\taddToAdditionalLines([textBufferLine.substring(lastIdx)], undefined);\n\t\t}\n\n\t\tconst hiddenRange = hiddenTextStartColumn !== undefined ? new ColumnRange(hiddenTextStartColumn, textBufferLine.length + 1) : undefined;\n\n\t\treturn {\n\t\t\treplacedRange,\n\t\t\tinlineTexts,\n\t\t\tadditionalLines,\n\t\t\thiddenRange,\n\t\t\tlineNumber: ghostText.lineNumber,\n\t\t\tadditionalReservedLineCount: this.model.minReservedLineCount.read(reader),\n\t\t\ttargetTextModel: textModel,\n\t\t};\n\t});\n\n\tprivate readonly decorations = derived(this, reader => {\n\t\tconst uiState = this.uiState.read(reader);\n\t\tif (!uiState) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst decorations: IModelDeltaDecoration[] = [];\n\n\t\tif (uiState.replacedRange) {\n\t\t\tdecorations.push({\n\t\t\t\trange: uiState.replacedRange.toRange(uiState.lineNumber),\n\t\t\t\toptions: { inlineClassName: 'inline-completion-text-to-replace', description: 'GhostTextReplacement' }\n\t\t\t});\n\t\t}\n\n\t\tif (uiState.hiddenRange) {\n\t\t\tdecorations.push({\n\t\t\t\trange: uiState.hiddenRange.toRange(uiState.lineNumber),\n\t\t\t\toptions: { inlineClassName: 'ghost-text-hidden', description: 'ghost-text-hidden', }\n\t\t\t});\n\t\t}\n\n\t\tfor (const p of uiState.inlineTexts) {\n\t\t\tdecorations.push({\n\t\t\t\trange: Range.fromPositions(new Position(uiState.lineNumber, p.column)),\n\t\t\t\toptions: {\n\t\t\t\t\tdescription: GHOST_TEXT_DESCRIPTION,\n\t\t\t\t\tafter: { content: p.text, inlineClassName: p.preview ? 'ghost-text-decoration-preview' : 'ghost-text-decoration', cursorStops: InjectedTextCursorStops.Left },\n\t\t\t\t\tshowIfCollapsed: true,\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn decorations;\n\t});\n\n\tprivate readonly additionalLinesWidget = this._register(\n\t\tnew AdditionalLinesWidget(\n\t\t\tthis.editor,\n\t\t\tthis.languageService.languageIdCodec,\n\t\t\tderived(reader => {\n\t\t\t\t/** @description lines */\n\t\t\t\tconst uiState = this.uiState.read(reader);\n\t\t\t\treturn uiState ? {\n\t\t\t\t\tlineNumber: uiState.lineNumber,\n\t\t\t\t\tadditionalLines: uiState.additionalLines,\n\t\t\t\t\tminReservedLineCount: uiState.additionalReservedLineCount,\n\t\t\t\t\ttargetTextModel: uiState.targetTextModel,\n\t\t\t\t} : undefined;\n\t\t\t})\n\t\t)\n\t);\n\n\tpublic ownsViewZone(viewZoneId: string): boolean {\n\t\treturn this.additionalLinesWidget.viewZoneId === viewZoneId;\n\t}\n}\n\nclass AdditionalLinesWidget extends Disposable {\n\tprivate _viewZoneId: string | undefined = undefined;\n\tpublic get viewZoneId(): string | undefined { return this._viewZoneId; }\n\n\tprivate readonly editorOptionsChanged = observableSignalFromEvent('editorOptionChanged', Event.filter(\n\t\tthis.editor.onDidChangeConfiguration,\n\t\te => e.hasChanged(EditorOption.disableMonospaceOptimizations)\n\t\t\t|| e.hasChanged(EditorOption.stopRenderingLineAfter)\n\t\t\t|| e.hasChanged(EditorOption.renderWhitespace)\n\t\t\t|| e.hasChanged(EditorOption.renderControlCharacters)\n\t\t\t|| e.hasChanged(EditorOption.fontLigatures)\n\t\t\t|| e.hasChanged(EditorOption.fontInfo)\n\t\t\t|| e.hasChanged(EditorOption.lineHeight)\n\t));\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\tprivate readonly languageIdCodec: ILanguageIdCodec,\n\t\tprivate readonly lines: IObservable<{ targetTextModel: ITextModel; lineNumber: number; additionalLines: LineData[]; minReservedLineCount: number } | undefined>\n\t) {\n\t\tsuper();\n\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description update view zone */\n\t\t\tconst lines = this.lines.read(reader);\n\t\t\tthis.editorOptionsChanged.read(reader);\n\n\t\t\tif (lines) {\n\t\t\t\tthis.updateLines(lines.lineNumber, lines.additionalLines, lines.minReservedLineCount);\n\t\t\t} else {\n\t\t\t\tthis.clear();\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t\tthis.clear();\n\t}\n\n\tprivate clear(): void {\n\t\tthis.editor.changeViewZones((changeAccessor) => {\n\t\t\tif (this._viewZoneId) {\n\t\t\t\tchangeAccessor.removeZone(this._viewZoneId);\n\t\t\t\tthis._viewZoneId = undefined;\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate updateLines(lineNumber: number, additionalLines: LineData[], minReservedLineCount: number): void {\n\t\tconst textModel = this.editor.getModel();\n\t\tif (!textModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { tabSize } = textModel.getOptions();\n\n\t\tthis.editor.changeViewZones((changeAccessor) => {\n\t\t\tif (this._viewZoneId) {\n\t\t\t\tchangeAccessor.removeZone(this._viewZoneId);\n\t\t\t\tthis._viewZoneId = undefined;\n\t\t\t}\n\n\t\t\tconst heightInLines = Math.max(additionalLines.length, minReservedLineCount);\n\t\t\tif (heightInLines > 0) {\n\t\t\t\tconst domNode = document.createElement('div');\n\t\t\t\trenderLines(domNode, tabSize, additionalLines, this.editor.getOptions(), this.languageIdCodec);\n\n\t\t\t\tthis._viewZoneId = changeAccessor.addZone({\n\t\t\t\t\tafterLineNumber: lineNumber,\n\t\t\t\t\theightInLines: heightInLines,\n\t\t\t\t\tdomNode,\n\t\t\t\t\tafterColumnAffinity: PositionAffinity.Right\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n}\n\ninterface LineData {\n\tcontent: string; // Must not contain a linebreak!\n\tdecorations: LineDecoration[];\n}\n\nfunction renderLines(domNode: HTMLElement, tabSize: number, lines: LineData[], opts: IComputedEditorOptions, languageIdCodec: ILanguageIdCodec): void {\n\tconst disableMonospaceOptimizations = opts.get(EditorOption.disableMonospaceOptimizations);\n\tconst stopRenderingLineAfter = opts.get(EditorOption.stopRenderingLineAfter);\n\t// To avoid visual confusion, we don't want to render visible whitespace\n\tconst renderWhitespace = 'none';\n\tconst renderControlCharacters = opts.get(EditorOption.renderControlCharacters);\n\tconst fontLigatures = opts.get(EditorOption.fontLigatures);\n\tconst fontInfo = opts.get(EditorOption.fontInfo);\n\tconst lineHeight = opts.get(EditorOption.lineHeight);\n\n\tconst sb = new StringBuilder(10000);\n\tsb.appendString('<div class=\"suggest-preview-text\">');\n\n\tfor (let i = 0, len = lines.length; i < len; i++) {\n\t\tconst lineData = lines[i];\n\t\tconst line = lineData.content;\n\t\tsb.appendString('<div class=\"view-line');\n\t\tsb.appendString('\" style=\"top:');\n\t\tsb.appendString(String(i * lineHeight));\n\t\tsb.appendString('px;width:1000000px;\">');\n\n\t\tconst isBasicASCII = strings.isBasicASCII(line);\n\t\tconst containsRTL = strings.containsRTL(line);\n\t\tconst lineTokens = LineTokens.createEmpty(line, languageIdCodec);\n\n\t\trenderViewLine(new RenderLineInput(\n\t\t\t(fontInfo.isMonospace && !disableMonospaceOptimizations),\n\t\t\tfontInfo.canUseHalfwidthRightwardsArrow,\n\t\t\tline,\n\t\t\tfalse,\n\t\t\tisBasicASCII,\n\t\t\tcontainsRTL,\n\t\t\t0,\n\t\t\tlineTokens,\n\t\t\tlineData.decorations,\n\t\t\ttabSize,\n\t\t\t0,\n\t\t\tfontInfo.spaceWidth,\n\t\t\tfontInfo.middotWidth,\n\t\t\tfontInfo.wsmiddotWidth,\n\t\t\tstopRenderingLineAfter,\n\t\t\trenderWhitespace,\n\t\t\trenderControlCharacters,\n\t\t\tfontLigatures !== EditorFontLigatures.OFF,\n\t\t\tnull\n\t\t), sb);\n\n\t\tsb.appendString('</div>');\n\t}\n\tsb.appendString('</div>');\n\n\tapplyFontInfo(domNode, fontInfo);\n\tconst html = sb.build();\n\tconst trustedhtml = ttPolicy ? ttPolicy.createHTML(html) : html;\n\tdomNode.innerHTML = trustedhtml as string;\n}\n\nconst ttPolicy = createTrustedTypesPolicy('editorGhostText', { createHTML: value => value });\n"]}