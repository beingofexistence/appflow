{"version":3,"sources":["vs/editor/contrib/inlineCompletions/browser/inlineCompletionContextKeys.ts"],"names":[],"mappings":"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","file":"inlineCompletionContextKeys.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IObservable, autorun } from 'vs/base/common/observable';\nimport { firstNonWhitespaceIndex } from 'vs/base/common/strings';\nimport { CursorColumns } from 'vs/editor/common/core/cursorColumns';\nimport { InlineCompletionsModel } from 'vs/editor/contrib/inlineCompletions/browser/inlineCompletionsModel';\nimport { RawContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { localize } from 'vs/nls';\n\nexport class InlineCompletionContextKeys extends Disposable {\n\tpublic static readonly inlineSuggestionVisible = new RawContextKey<boolean>('inlineSuggestionVisible', false, localize('inlineSuggestionVisible', \"Whether an inline suggestion is visible\"));\n\tpublic static readonly inlineSuggestionHasIndentation = new RawContextKey<boolean>('inlineSuggestionHasIndentation', false, localize('inlineSuggestionHasIndentation', \"Whether the inline suggestion starts with whitespace\"));\n\tpublic static readonly inlineSuggestionHasIndentationLessThanTabSize = new RawContextKey<boolean>('inlineSuggestionHasIndentationLessThanTabSize', true, localize('inlineSuggestionHasIndentationLessThanTabSize', \"Whether the inline suggestion starts with whitespace that is less than what would be inserted by tab\"));\n\tpublic static readonly suppressSuggestions = new RawContextKey<boolean | undefined>('inlineSuggestionSuppressSuggestions', undefined, localize('suppressSuggestions', \"Whether suggestions should be suppressed for the current suggestion\"));\n\n\tpublic readonly inlineCompletionVisible = InlineCompletionContextKeys.inlineSuggestionVisible.bindTo(this.contextKeyService);\n\tpublic readonly inlineCompletionSuggestsIndentation = InlineCompletionContextKeys.inlineSuggestionHasIndentation.bindTo(this.contextKeyService);\n\tpublic readonly inlineCompletionSuggestsIndentationLessThanTabSize = InlineCompletionContextKeys.inlineSuggestionHasIndentationLessThanTabSize.bindTo(this.contextKeyService);\n\tpublic readonly suppressSuggestions = InlineCompletionContextKeys.suppressSuggestions.bindTo(this.contextKeyService);\n\n\tconstructor(\n\t\tprivate readonly contextKeyService: IContextKeyService,\n\t\tprivate readonly model: IObservable<InlineCompletionsModel | undefined>,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description update context key: inlineCompletionVisible, suppressSuggestions */\n\t\t\tconst model = this.model.read(reader);\n\t\t\tconst state = model?.state.read(reader);\n\n\t\t\tconst isInlineCompletionVisible = !!state?.inlineCompletion && state?.ghostText !== undefined && !state?.ghostText.isEmpty();\n\t\t\tthis.inlineCompletionVisible.set(isInlineCompletionVisible);\n\n\t\t\tif (state?.ghostText && state?.inlineCompletion) {\n\t\t\t\tthis.suppressSuggestions.set(state.inlineCompletion.inlineCompletion.source.inlineCompletions.suppressSuggestions);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description update context key: inlineCompletionSuggestsIndentation, inlineCompletionSuggestsIndentationLessThanTabSize */\n\t\t\tconst model = this.model.read(reader);\n\n\t\t\tlet startsWithIndentation = false;\n\t\t\tlet startsWithIndentationLessThanTabSize = true;\n\n\t\t\tconst ghostText = model?.ghostText.read(reader);\n\t\t\tif (!!model?.selectedSuggestItem && ghostText && ghostText.parts.length > 0) {\n\t\t\t\tconst { column, lines } = ghostText.parts[0];\n\n\t\t\t\tconst firstLine = lines[0];\n\n\t\t\t\tconst indentationEndColumn = model.textModel.getLineIndentColumn(ghostText.lineNumber);\n\t\t\t\tconst inIndentation = column <= indentationEndColumn;\n\n\t\t\t\tif (inIndentation) {\n\t\t\t\t\tlet firstNonWsIdx = firstNonWhitespaceIndex(firstLine);\n\t\t\t\t\tif (firstNonWsIdx === -1) {\n\t\t\t\t\t\tfirstNonWsIdx = firstLine.length - 1;\n\t\t\t\t\t}\n\t\t\t\t\tstartsWithIndentation = firstNonWsIdx > 0;\n\n\t\t\t\t\tconst tabSize = model.textModel.getOptions().tabSize;\n\t\t\t\t\tconst visibleColumnIndentation = CursorColumns.visibleColumnFromColumn(firstLine, firstNonWsIdx + 1, tabSize);\n\t\t\t\t\tstartsWithIndentationLessThanTabSize = visibleColumnIndentation < tabSize;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.inlineCompletionSuggestsIndentation.set(startsWithIndentation);\n\t\t\tthis.inlineCompletionSuggestsIndentationLessThanTabSize.set(startsWithIndentationLessThanTabSize);\n\t\t}));\n\t}\n}\n"]}