{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/linesOperations/browser/sortLinesCommand.ts"],"names":[],"mappings":"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","file":"sortLinesCommand.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { EditOperation, ISingleEditOperation } from 'vs/editor/common/core/editOperation';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ICommand, ICursorStateComputerData, IEditOperationBuilder } from 'vs/editor/common/editorCommon';\nimport { ITextModel } from 'vs/editor/common/model';\n\nexport class SortLinesCommand implements ICommand {\n\n\tprivate static _COLLATOR: Intl.Collator | null = null;\n\tpublic static getCollator(): Intl.Collator {\n\t\tif (!SortLinesCommand._COLLATOR) {\n\t\t\tSortLinesCommand._COLLATOR = new Intl.Collator();\n\t\t}\n\t\treturn SortLinesCommand._COLLATOR;\n\t}\n\n\tprivate readonly selection: Selection;\n\tprivate readonly descending: boolean;\n\tprivate selectionId: string | null;\n\n\tconstructor(selection: Selection, descending: boolean) {\n\t\tthis.selection = selection;\n\t\tthis.descending = descending;\n\t\tthis.selectionId = null;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tconst op = sortLines(model, this.selection, this.descending);\n\t\tif (op) {\n\t\t\tbuilder.addEditOperation(op.range, op.text);\n\t\t}\n\n\t\tthis.selectionId = builder.trackSelection(this.selection);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\treturn helper.getTrackedSelection(this.selectionId!);\n\t}\n\n\tpublic static canRun(model: ITextModel | null, selection: Selection, descending: boolean): boolean {\n\t\tif (model === null) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst data = getSortData(model, selection, descending);\n\n\t\tif (!data) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0, len = data.before.length; i < len; i++) {\n\t\t\tif (data.before[i] !== data.after[i]) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\nfunction getSortData(model: ITextModel, selection: Selection, descending: boolean) {\n\tconst startLineNumber = selection.startLineNumber;\n\tlet endLineNumber = selection.endLineNumber;\n\n\tif (selection.endColumn === 1) {\n\t\tendLineNumber--;\n\t}\n\n\t// Nothing to sort if user didn't select anything.\n\tif (startLineNumber >= endLineNumber) {\n\t\treturn null;\n\t}\n\n\tconst linesToSort: string[] = [];\n\n\t// Get the contents of the selection to be sorted.\n\tfor (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n\t\tlinesToSort.push(model.getLineContent(lineNumber));\n\t}\n\n\tlet sorted = linesToSort.slice(0);\n\tsorted.sort(SortLinesCommand.getCollator().compare);\n\n\t// If descending, reverse the order.\n\tif (descending === true) {\n\t\tsorted = sorted.reverse();\n\t}\n\n\treturn {\n\t\tstartLineNumber: startLineNumber,\n\t\tendLineNumber: endLineNumber,\n\t\tbefore: linesToSort,\n\t\tafter: sorted\n\t};\n}\n\n/**\n * Generate commands for sorting lines on a model.\n */\nfunction sortLines(model: ITextModel, selection: Selection, descending: boolean): ISingleEditOperation | null {\n\tconst data = getSortData(model, selection, descending);\n\n\tif (!data) {\n\t\treturn null;\n\t}\n\n\treturn EditOperation.replace(\n\t\tnew Range(data.startLineNumber, 1, data.endLineNumber, model.getLineMaxColumn(data.endLineNumber)),\n\t\tdata.after.join('\\n')\n\t);\n}\n"]}