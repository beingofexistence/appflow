{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/linesOperations/browser/moveLinesCommand.ts"],"names":[],"mappings":"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","file":"moveLinesCommand.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as strings from 'vs/base/common/strings';\nimport { ShiftCommand } from 'vs/editor/common/commands/shiftCommand';\nimport { EditorAutoIndentStrategy } from 'vs/editor/common/config/editorOptions';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ICommand, ICursorStateComputerData, IEditOperationBuilder } from 'vs/editor/common/editorCommon';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { CompleteEnterAction, IndentAction } from 'vs/editor/common/languages/languageConfiguration';\nimport { ILanguageConfigurationService } from 'vs/editor/common/languages/languageConfigurationRegistry';\nimport { IndentConsts } from 'vs/editor/common/languages/supports/indentRules';\nimport * as indentUtils from 'vs/editor/contrib/indentation/browser/indentUtils';\nimport { getGoodIndentForLine, getIndentMetadata, IIndentConverter, IVirtualModel } from 'vs/editor/common/languages/autoIndent';\nimport { getEnterAction } from 'vs/editor/common/languages/enterAction';\n\nexport class MoveLinesCommand implements ICommand {\n\n\tprivate readonly _selection: Selection;\n\tprivate readonly _isMovingDown: boolean;\n\tprivate readonly _autoIndent: EditorAutoIndentStrategy;\n\n\tprivate _selectionId: string | null;\n\tprivate _moveEndPositionDown?: boolean;\n\tprivate _moveEndLineSelectionShrink: boolean;\n\n\tconstructor(\n\t\tselection: Selection,\n\t\tisMovingDown: boolean,\n\t\tautoIndent: EditorAutoIndentStrategy,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService\n\t) {\n\t\tthis._selection = selection;\n\t\tthis._isMovingDown = isMovingDown;\n\t\tthis._autoIndent = autoIndent;\n\t\tthis._selectionId = null;\n\t\tthis._moveEndLineSelectionShrink = false;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\n\t\tconst modelLineCount = model.getLineCount();\n\n\t\tif (this._isMovingDown && this._selection.endLineNumber === modelLineCount) {\n\t\t\tthis._selectionId = builder.trackSelection(this._selection);\n\t\t\treturn;\n\t\t}\n\t\tif (!this._isMovingDown && this._selection.startLineNumber === 1) {\n\t\t\tthis._selectionId = builder.trackSelection(this._selection);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._moveEndPositionDown = false;\n\t\tlet s = this._selection;\n\n\t\tif (s.startLineNumber < s.endLineNumber && s.endColumn === 1) {\n\t\t\tthis._moveEndPositionDown = true;\n\t\t\ts = s.setEndPosition(s.endLineNumber - 1, model.getLineMaxColumn(s.endLineNumber - 1));\n\t\t}\n\n\t\tconst { tabSize, indentSize, insertSpaces } = model.getOptions();\n\t\tconst indentConverter = this.buildIndentConverter(tabSize, indentSize, insertSpaces);\n\t\tconst virtualModel: IVirtualModel = {\n\t\t\ttokenization: {\n\t\t\t\tgetLineTokens: (lineNumber: number) => {\n\t\t\t\t\treturn model.tokenization.getLineTokens(lineNumber);\n\t\t\t\t},\n\t\t\t\tgetLanguageId: () => {\n\t\t\t\t\treturn model.getLanguageId();\n\t\t\t\t},\n\t\t\t\tgetLanguageIdAtPosition: (lineNumber: number, column: number) => {\n\t\t\t\t\treturn model.getLanguageIdAtPosition(lineNumber, column);\n\t\t\t\t},\n\t\t\t},\n\t\t\tgetLineContent: null as unknown as (lineNumber: number) => string,\n\t\t};\n\n\t\tif (s.startLineNumber === s.endLineNumber && model.getLineMaxColumn(s.startLineNumber) === 1) {\n\t\t\t// Current line is empty\n\t\t\tconst lineNumber = s.startLineNumber;\n\t\t\tconst otherLineNumber = (this._isMovingDown ? lineNumber + 1 : lineNumber - 1);\n\n\t\t\tif (model.getLineMaxColumn(otherLineNumber) === 1) {\n\t\t\t\t// Other line number is empty too, so no editing is needed\n\t\t\t\t// Add a no-op to force running by the model\n\t\t\t\tbuilder.addEditOperation(new Range(1, 1, 1, 1), null);\n\t\t\t} else {\n\t\t\t\t// Type content from other line number on line number\n\t\t\t\tbuilder.addEditOperation(new Range(lineNumber, 1, lineNumber, 1), model.getLineContent(otherLineNumber));\n\n\t\t\t\t// Remove content from other line number\n\t\t\t\tbuilder.addEditOperation(new Range(otherLineNumber, 1, otherLineNumber, model.getLineMaxColumn(otherLineNumber)), null);\n\t\t\t}\n\t\t\t// Track selection at the other line number\n\t\t\ts = new Selection(otherLineNumber, 1, otherLineNumber, 1);\n\n\t\t} else {\n\n\t\t\tlet movingLineNumber: number;\n\t\t\tlet movingLineText: string;\n\n\t\t\tif (this._isMovingDown) {\n\t\t\t\tmovingLineNumber = s.endLineNumber + 1;\n\t\t\t\tmovingLineText = model.getLineContent(movingLineNumber);\n\t\t\t\t// Delete line that needs to be moved\n\t\t\t\tbuilder.addEditOperation(new Range(movingLineNumber - 1, model.getLineMaxColumn(movingLineNumber - 1), movingLineNumber, model.getLineMaxColumn(movingLineNumber)), null);\n\n\t\t\t\tlet insertingText = movingLineText;\n\n\t\t\t\tif (this.shouldAutoIndent(model, s)) {\n\t\t\t\t\tconst movingLineMatchResult = this.matchEnterRule(model, indentConverter, tabSize, movingLineNumber, s.startLineNumber - 1);\n\t\t\t\t\t// if s.startLineNumber - 1 matches onEnter rule, we still honor that.\n\t\t\t\t\tif (movingLineMatchResult !== null) {\n\t\t\t\t\t\tconst oldIndentation = strings.getLeadingWhitespace(model.getLineContent(movingLineNumber));\n\t\t\t\t\t\tconst newSpaceCnt = movingLineMatchResult + indentUtils.getSpaceCnt(oldIndentation, tabSize);\n\t\t\t\t\t\tconst newIndentation = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\n\t\t\t\t\t\tinsertingText = newIndentation + this.trimStart(movingLineText);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// no enter rule matches, let's check indentatin rules then.\n\t\t\t\t\t\tvirtualModel.getLineContent = (lineNumber: number) => {\n\t\t\t\t\t\t\tif (lineNumber === s.startLineNumber) {\n\t\t\t\t\t\t\t\treturn model.getLineContent(movingLineNumber);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn model.getLineContent(lineNumber);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\tconst indentOfMovingLine = getGoodIndentForLine(\n\t\t\t\t\t\t\tthis._autoIndent,\n\t\t\t\t\t\t\tvirtualModel,\n\t\t\t\t\t\t\tmodel.getLanguageIdAtPosition(movingLineNumber, 1),\n\t\t\t\t\t\t\ts.startLineNumber,\n\t\t\t\t\t\t\tindentConverter,\n\t\t\t\t\t\t\tthis._languageConfigurationService\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (indentOfMovingLine !== null) {\n\t\t\t\t\t\t\tconst oldIndentation = strings.getLeadingWhitespace(model.getLineContent(movingLineNumber));\n\t\t\t\t\t\t\tconst newSpaceCnt = indentUtils.getSpaceCnt(indentOfMovingLine, tabSize);\n\t\t\t\t\t\t\tconst oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n\t\t\t\t\t\t\tif (newSpaceCnt !== oldSpaceCnt) {\n\t\t\t\t\t\t\t\tconst newIndentation = indentUtils.generateIndent(newSpaceCnt, tabSize, insertSpaces);\n\t\t\t\t\t\t\t\tinsertingText = newIndentation + this.trimStart(movingLineText);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// add edit operations for moving line first to make sure it's executed after we make indentation change\n\t\t\t\t\t// to s.startLineNumber\n\t\t\t\t\tbuilder.addEditOperation(new Range(s.startLineNumber, 1, s.startLineNumber, 1), insertingText + '\\n');\n\n\t\t\t\t\tconst ret = this.matchEnterRuleMovingDown(model, indentConverter, tabSize, s.startLineNumber, movingLineNumber, insertingText);\n\n\t\t\t\t\t// check if the line being moved before matches onEnter rules, if so let's adjust the indentation by onEnter rules.\n\t\t\t\t\tif (ret !== null) {\n\t\t\t\t\t\tif (ret !== 0) {\n\t\t\t\t\t\t\tthis.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, ret);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// it doesn't match onEnter rules, let's check indentation rules then.\n\t\t\t\t\t\tvirtualModel.getLineContent = (lineNumber: number) => {\n\t\t\t\t\t\t\tif (lineNumber === s.startLineNumber) {\n\t\t\t\t\t\t\t\treturn insertingText;\n\t\t\t\t\t\t\t} else if (lineNumber >= s.startLineNumber + 1 && lineNumber <= s.endLineNumber + 1) {\n\t\t\t\t\t\t\t\treturn model.getLineContent(lineNumber - 1);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn model.getLineContent(lineNumber);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst newIndentatOfMovingBlock = getGoodIndentForLine(\n\t\t\t\t\t\t\tthis._autoIndent,\n\t\t\t\t\t\t\tvirtualModel,\n\t\t\t\t\t\t\tmodel.getLanguageIdAtPosition(movingLineNumber, 1),\n\t\t\t\t\t\t\ts.startLineNumber + 1,\n\t\t\t\t\t\t\tindentConverter,\n\t\t\t\t\t\t\tthis._languageConfigurationService\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (newIndentatOfMovingBlock !== null) {\n\t\t\t\t\t\t\tconst oldIndentation = strings.getLeadingWhitespace(model.getLineContent(s.startLineNumber));\n\t\t\t\t\t\t\tconst newSpaceCnt = indentUtils.getSpaceCnt(newIndentatOfMovingBlock, tabSize);\n\t\t\t\t\t\t\tconst oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n\t\t\t\t\t\t\tif (newSpaceCnt !== oldSpaceCnt) {\n\t\t\t\t\t\t\t\tconst spaceCntOffset = newSpaceCnt - oldSpaceCnt;\n\n\t\t\t\t\t\t\t\tthis.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, spaceCntOffset);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Insert line that needs to be moved before\n\t\t\t\t\tbuilder.addEditOperation(new Range(s.startLineNumber, 1, s.startLineNumber, 1), insertingText + '\\n');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmovingLineNumber = s.startLineNumber - 1;\n\t\t\t\tmovingLineText = model.getLineContent(movingLineNumber);\n\n\t\t\t\t// Delete line that needs to be moved\n\t\t\t\tbuilder.addEditOperation(new Range(movingLineNumber, 1, movingLineNumber + 1, 1), null);\n\n\t\t\t\t// Insert line that needs to be moved after\n\t\t\t\tbuilder.addEditOperation(new Range(s.endLineNumber, model.getLineMaxColumn(s.endLineNumber), s.endLineNumber, model.getLineMaxColumn(s.endLineNumber)), '\\n' + movingLineText);\n\n\t\t\t\tif (this.shouldAutoIndent(model, s)) {\n\t\t\t\t\tvirtualModel.getLineContent = (lineNumber: number) => {\n\t\t\t\t\t\tif (lineNumber === movingLineNumber) {\n\t\t\t\t\t\t\treturn model.getLineContent(s.startLineNumber);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn model.getLineContent(lineNumber);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tconst ret = this.matchEnterRule(model, indentConverter, tabSize, s.startLineNumber, s.startLineNumber - 2);\n\t\t\t\t\t// check if s.startLineNumber - 2 matches onEnter rules, if so adjust the moving block by onEnter rules.\n\t\t\t\t\tif (ret !== null) {\n\t\t\t\t\t\tif (ret !== 0) {\n\t\t\t\t\t\t\tthis.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, ret);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// it doesn't match any onEnter rule, let's check indentation rules then.\n\t\t\t\t\t\tconst indentOfFirstLine = getGoodIndentForLine(\n\t\t\t\t\t\t\tthis._autoIndent,\n\t\t\t\t\t\t\tvirtualModel,\n\t\t\t\t\t\t\tmodel.getLanguageIdAtPosition(s.startLineNumber, 1),\n\t\t\t\t\t\t\tmovingLineNumber,\n\t\t\t\t\t\t\tindentConverter,\n\t\t\t\t\t\t\tthis._languageConfigurationService\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (indentOfFirstLine !== null) {\n\t\t\t\t\t\t\t// adjust the indentation of the moving block\n\t\t\t\t\t\t\tconst oldIndent = strings.getLeadingWhitespace(model.getLineContent(s.startLineNumber));\n\t\t\t\t\t\t\tconst newSpaceCnt = indentUtils.getSpaceCnt(indentOfFirstLine, tabSize);\n\t\t\t\t\t\t\tconst oldSpaceCnt = indentUtils.getSpaceCnt(oldIndent, tabSize);\n\t\t\t\t\t\t\tif (newSpaceCnt !== oldSpaceCnt) {\n\t\t\t\t\t\t\t\tconst spaceCntOffset = newSpaceCnt - oldSpaceCnt;\n\n\t\t\t\t\t\t\t\tthis.getIndentEditsOfMovingBlock(model, builder, s, tabSize, insertSpaces, spaceCntOffset);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._selectionId = builder.trackSelection(s);\n\t}\n\n\tprivate buildIndentConverter(tabSize: number, indentSize: number, insertSpaces: boolean): IIndentConverter {\n\t\treturn {\n\t\t\tshiftIndent: (indentation) => {\n\t\t\t\treturn ShiftCommand.shiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n\t\t\t},\n\t\t\tunshiftIndent: (indentation) => {\n\t\t\t\treturn ShiftCommand.unshiftIndent(indentation, indentation.length + 1, tabSize, indentSize, insertSpaces);\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate parseEnterResult(model: ITextModel, indentConverter: IIndentConverter, tabSize: number, line: number, enter: CompleteEnterAction | null) {\n\t\tif (enter) {\n\t\t\tlet enterPrefix = enter.indentation;\n\n\t\t\tif (enter.indentAction === IndentAction.None) {\n\t\t\t\tenterPrefix = enter.indentation + enter.appendText;\n\t\t\t} else if (enter.indentAction === IndentAction.Indent) {\n\t\t\t\tenterPrefix = enter.indentation + enter.appendText;\n\t\t\t} else if (enter.indentAction === IndentAction.IndentOutdent) {\n\t\t\t\tenterPrefix = enter.indentation;\n\t\t\t} else if (enter.indentAction === IndentAction.Outdent) {\n\t\t\t\tenterPrefix = indentConverter.unshiftIndent(enter.indentation) + enter.appendText;\n\t\t\t}\n\t\t\tconst movingLineText = model.getLineContent(line);\n\t\t\tif (this.trimStart(movingLineText).indexOf(this.trimStart(enterPrefix)) >= 0) {\n\t\t\t\tconst oldIndentation = strings.getLeadingWhitespace(model.getLineContent(line));\n\t\t\t\tlet newIndentation = strings.getLeadingWhitespace(enterPrefix);\n\t\t\t\tconst indentMetadataOfMovelingLine = getIndentMetadata(model, line, this._languageConfigurationService);\n\t\t\t\tif (indentMetadataOfMovelingLine !== null && indentMetadataOfMovelingLine & IndentConsts.DECREASE_MASK) {\n\t\t\t\t\tnewIndentation = indentConverter.unshiftIndent(newIndentation);\n\t\t\t\t}\n\t\t\t\tconst newSpaceCnt = indentUtils.getSpaceCnt(newIndentation, tabSize);\n\t\t\t\tconst oldSpaceCnt = indentUtils.getSpaceCnt(oldIndentation, tabSize);\n\t\t\t\treturn newSpaceCnt - oldSpaceCnt;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t *\n\t * @param model\n\t * @param indentConverter\n\t * @param tabSize\n\t * @param line the line moving down\n\t * @param futureAboveLineNumber the line which will be at the `line` position\n\t * @param futureAboveLineText\n\t */\n\tprivate matchEnterRuleMovingDown(model: ITextModel, indentConverter: IIndentConverter, tabSize: number, line: number, futureAboveLineNumber: number, futureAboveLineText: string) {\n\t\tif (strings.lastNonWhitespaceIndex(futureAboveLineText) >= 0) {\n\t\t\t// break\n\t\t\tconst maxColumn = model.getLineMaxColumn(futureAboveLineNumber);\n\t\t\tconst enter = getEnterAction(this._autoIndent, model, new Range(futureAboveLineNumber, maxColumn, futureAboveLineNumber, maxColumn), this._languageConfigurationService);\n\t\t\treturn this.parseEnterResult(model, indentConverter, tabSize, line, enter);\n\t\t} else {\n\t\t\t// go upwards, starting from `line - 1`\n\t\t\tlet validPrecedingLine = line - 1;\n\t\t\twhile (validPrecedingLine >= 1) {\n\t\t\t\tconst lineContent = model.getLineContent(validPrecedingLine);\n\t\t\t\tconst nonWhitespaceIdx = strings.lastNonWhitespaceIndex(lineContent);\n\n\t\t\t\tif (nonWhitespaceIdx >= 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tvalidPrecedingLine--;\n\t\t\t}\n\n\t\t\tif (validPrecedingLine < 1 || line > model.getLineCount()) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tconst maxColumn = model.getLineMaxColumn(validPrecedingLine);\n\t\t\tconst enter = getEnterAction(this._autoIndent, model, new Range(validPrecedingLine, maxColumn, validPrecedingLine, maxColumn), this._languageConfigurationService);\n\t\t\treturn this.parseEnterResult(model, indentConverter, tabSize, line, enter);\n\t\t}\n\t}\n\n\tprivate matchEnterRule(model: ITextModel, indentConverter: IIndentConverter, tabSize: number, line: number, oneLineAbove: number, previousLineText?: string) {\n\t\tlet validPrecedingLine = oneLineAbove;\n\t\twhile (validPrecedingLine >= 1) {\n\t\t\t// ship empty lines as empty lines just inherit indentation\n\t\t\tlet lineContent;\n\t\t\tif (validPrecedingLine === oneLineAbove && previousLineText !== undefined) {\n\t\t\t\tlineContent = previousLineText;\n\t\t\t} else {\n\t\t\t\tlineContent = model.getLineContent(validPrecedingLine);\n\t\t\t}\n\n\t\t\tconst nonWhitespaceIdx = strings.lastNonWhitespaceIndex(lineContent);\n\t\t\tif (nonWhitespaceIdx >= 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvalidPrecedingLine--;\n\t\t}\n\n\t\tif (validPrecedingLine < 1 || line > model.getLineCount()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst maxColumn = model.getLineMaxColumn(validPrecedingLine);\n\t\tconst enter = getEnterAction(this._autoIndent, model, new Range(validPrecedingLine, maxColumn, validPrecedingLine, maxColumn), this._languageConfigurationService);\n\t\treturn this.parseEnterResult(model, indentConverter, tabSize, line, enter);\n\t}\n\n\tprivate trimStart(str: string) {\n\t\treturn str.replace(/^\\s+/, '');\n\t}\n\n\tprivate shouldAutoIndent(model: ITextModel, selection: Selection) {\n\t\tif (this._autoIndent < EditorAutoIndentStrategy.Full) {\n\t\t\treturn false;\n\t\t}\n\t\t// if it's not easy to tokenize, we stop auto indent.\n\t\tif (!model.tokenization.isCheapToTokenize(selection.startLineNumber)) {\n\t\t\treturn false;\n\t\t}\n\t\tconst languageAtSelectionStart = model.getLanguageIdAtPosition(selection.startLineNumber, 1);\n\t\tconst languageAtSelectionEnd = model.getLanguageIdAtPosition(selection.endLineNumber, 1);\n\n\t\tif (languageAtSelectionStart !== languageAtSelectionEnd) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._languageConfigurationService.getLanguageConfiguration(languageAtSelectionStart).indentRulesSupport === null) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate getIndentEditsOfMovingBlock(model: ITextModel, builder: IEditOperationBuilder, s: Selection, tabSize: number, insertSpaces: boolean, offset: number) {\n\t\tfor (let i = s.startLineNumber; i <= s.endLineNumber; i++) {\n\t\t\tconst lineContent = model.getLineContent(i);\n\t\t\tconst originalIndent = strings.getLeadingWhitespace(lineContent);\n\t\t\tconst originalSpacesCnt = indentUtils.getSpaceCnt(originalIndent, tabSize);\n\t\t\tconst newSpacesCnt = originalSpacesCnt + offset;\n\t\t\tconst newIndent = indentUtils.generateIndent(newSpacesCnt, tabSize, insertSpaces);\n\n\t\t\tif (newIndent !== originalIndent) {\n\t\t\t\tbuilder.addEditOperation(new Range(i, 1, i, originalIndent.length + 1), newIndent);\n\n\t\t\t\tif (i === s.endLineNumber && s.endColumn <= originalIndent.length + 1 && newIndent === '') {\n\t\t\t\t\t// as users select part of the original indent white spaces\n\t\t\t\t\t// when we adjust the indentation of endLine, we should adjust the cursor position as well.\n\t\t\t\t\tthis._moveEndLineSelectionShrink = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tlet result = helper.getTrackedSelection(this._selectionId!);\n\n\t\tif (this._moveEndPositionDown) {\n\t\t\tresult = result.setEndPosition(result.endLineNumber + 1, 1);\n\t\t}\n\n\t\tif (this._moveEndLineSelectionShrink && result.startLineNumber < result.endLineNumber) {\n\t\t\tresult = result.setEndPosition(result.endLineNumber, 2);\n\t\t}\n\n\t\treturn result;\n\t}\n}\n"]}