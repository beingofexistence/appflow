{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/quickAccess/browser/commandsQuickAccess.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAWhG,MAAsB,IAA0C,SAAQ,0BAAI;QAE3E,YACC,OAAoC,EACpC,oBAAyB,EACzB,iBAAsB,EACtB,cAAmB,EACnB,gBAAqB,EACrB,aAAkB;YAElB,KAAK,CAAC,OAAO,EAAE,oBAAoB,EAAE,iBAAiB,EAAE,cAAc,EAAE,gBAAgB,EAAE,aAAa,CAAC,CAAC;QAC1G,CAAC;QAOS,CAAC;YACV,MAAM,uBAAuB,GAAG,IAAI,CAAC,CAAC,CAAuB;YAC7D,IAAI,CAAC,uBAAuB,EAAE;gBAC7B,OAAO,EAAE,CAAC;aACV;YAED,MAAM,kBAAkB,GAAwB,EAAE,CAAC;YACnD,KAAK,MAAM,YAAY,IAAI,uBAAuB,CAAC,mBAAmB,EAAE,EAAE;gBACzE,kBAAkB,CAAC,IAAI,CAAC;oBACvB,SAAS,EAAE,YAAY,CAAC,EAAE;oBAC1B,YAAY,EAAE,YAAY,CAAC,KAAK;oBAChC,KAAK,EAAE,IAAA,gBAAG,EAAQ,YAAY,CAAC,KAAK,CAAC,IAAI,YAAY,CAAC,EAAE;iBACxD,CAAC,CAAC;aACH;YAED,OAAO,kBAAkB,CAAC;QAC3B,CAAC;KACD;IAnCD,oBAmCC","file":"commandsQuickAccess.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { stripIcons } from 'vs/base/common/iconLabels';\nimport { IEditor } from 'vs/editor/common/editorCommon';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { AbstractCommandsQuickAccessProvider, ICommandQuickPick, ICommandsQuickAccessOptions } from 'vs/platform/quickinput/browser/commandsQuickAccess';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\n\nexport abstract class AbstractEditorCommandsQuickAccessProvider extends AbstractCommandsQuickAccessProvider {\n\n\tconstructor(\n\t\toptions: ICommandsQuickAccessOptions,\n\t\tinstantiationService: IInstantiationService,\n\t\tkeybindingService: IKeybindingService,\n\t\tcommandService: ICommandService,\n\t\ttelemetryService: ITelemetryService,\n\t\tdialogService: IDialogService\n\t) {\n\t\tsuper(options, instantiationService, keybindingService, commandService, telemetryService, dialogService);\n\t}\n\n\t/**\n\t * Subclasses to provide the current active editor control.\n\t */\n\tprotected abstract activeTextEditorControl: IEditor | undefined;\n\n\tprotected getCodeEditorCommandPicks(): ICommandQuickPick[] {\n\t\tconst activeTextEditorControl = this.activeTextEditorControl;\n\t\tif (!activeTextEditorControl) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst editorCommandPicks: ICommandQuickPick[] = [];\n\t\tfor (const editorAction of activeTextEditorControl.getSupportedActions()) {\n\t\t\teditorCommandPicks.push({\n\t\t\t\tcommandId: editorAction.id,\n\t\t\t\tcommandAlias: editorAction.alias,\n\t\t\t\tlabel: stripIcons(editorAction.label) || editorAction.id,\n\t\t\t});\n\t\t}\n\n\t\treturn editorCommandPicks;\n\t}\n}\n"]}