{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/find/test/browser/find.test.ts"],"names":[],"mappings":"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","file":"find.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { getSelectionSearchString } from 'vs/editor/contrib/find/browser/findController';\nimport { withTestCodeEditor } from 'vs/editor/test/browser/testCodeEditor';\n\n\nsuite('Find', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('search string at position', () => {\n\t\twithTestCodeEditor([\n\t\t\t'ABC DEF',\n\t\t\t'0123 456'\n\t\t], {}, (editor) => {\n\n\t\t\t// The cursor is at the very top, of the file, at the first ABC\n\t\t\tconst searchStringAtTop = getSelectionSearchString(editor);\n\t\t\tassert.strictEqual(searchStringAtTop, 'ABC');\n\n\t\t\t// Move cursor to the end of ABC\n\t\t\teditor.setPosition(new Position(1, 3));\n\t\t\tconst searchStringAfterABC = getSelectionSearchString(editor);\n\t\t\tassert.strictEqual(searchStringAfterABC, 'ABC');\n\n\t\t\t// Move cursor to DEF\n\t\t\teditor.setPosition(new Position(1, 5));\n\t\t\tconst searchStringInsideDEF = getSelectionSearchString(editor);\n\t\t\tassert.strictEqual(searchStringInsideDEF, 'DEF');\n\n\t\t});\n\t});\n\n\ttest('search string with selection', () => {\n\t\twithTestCodeEditor([\n\t\t\t'ABC DEF',\n\t\t\t'0123 456'\n\t\t], {}, (editor) => {\n\n\t\t\t// Select A of ABC\n\t\t\teditor.setSelection(new Range(1, 1, 1, 2));\n\t\t\tconst searchStringSelectionA = getSelectionSearchString(editor);\n\t\t\tassert.strictEqual(searchStringSelectionA, 'A');\n\n\t\t\t// Select BC of ABC\n\t\t\teditor.setSelection(new Range(1, 2, 1, 4));\n\t\t\tconst searchStringSelectionBC = getSelectionSearchString(editor);\n\t\t\tassert.strictEqual(searchStringSelectionBC, 'BC');\n\n\t\t\t// Select BC DE\n\t\t\teditor.setSelection(new Range(1, 2, 1, 7));\n\t\t\tconst searchStringSelectionBCDE = getSelectionSearchString(editor);\n\t\t\tassert.strictEqual(searchStringSelectionBCDE, 'BC DE');\n\n\t\t});\n\t});\n\n\ttest('search string with multiline selection', () => {\n\t\twithTestCodeEditor([\n\t\t\t'ABC DEF',\n\t\t\t'0123 456'\n\t\t], {}, (editor) => {\n\n\t\t\t// Select first line and newline\n\t\t\teditor.setSelection(new Range(1, 1, 2, 1));\n\t\t\tconst searchStringSelectionWholeLine = getSelectionSearchString(editor);\n\t\t\tassert.strictEqual(searchStringSelectionWholeLine, null);\n\n\t\t\t// Select first line and chunk of second\n\t\t\teditor.setSelection(new Range(1, 1, 2, 4));\n\t\t\tconst searchStringSelectionTwoLines = getSelectionSearchString(editor);\n\t\t\tassert.strictEqual(searchStringSelectionTwoLines, null);\n\n\t\t\t// Select end of first line newline and chunk of second\n\t\t\teditor.setSelection(new Range(1, 7, 2, 4));\n\t\t\tconst searchStringSelectionSpanLines = getSelectionSearchString(editor);\n\t\t\tassert.strictEqual(searchStringSelectionSpanLines, null);\n\n\t\t});\n\t});\n\n});\n"]}