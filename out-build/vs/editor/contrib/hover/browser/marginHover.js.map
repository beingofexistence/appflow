{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/hover/browser/marginHover.ts"],"names":[],"mappings":"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","file":"marginHover.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from 'vs/base/browser/dom';\nimport { asArray } from 'vs/base/common/arrays';\nimport { IMarkdownString, isEmptyMarkdownString } from 'vs/base/common/htmlContent';\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { MarkdownRenderer } from 'vs/editor/contrib/markdownRenderer/browser/markdownRenderer';\nimport { ICodeEditor, IOverlayWidget, IOverlayWidgetPosition } from 'vs/editor/browser/editorBrowser';\nimport { ConfigurationChangedEvent, EditorOption } from 'vs/editor/common/config/editorOptions';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { HoverOperation, HoverStartMode, IHoverComputer } from 'vs/editor/contrib/hover/browser/hoverOperation';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { HoverWidget } from 'vs/base/browser/ui/hover/hoverWidget';\n\nconst $ = dom.$;\n\nexport interface IHoverMessage {\n\tvalue: IMarkdownString;\n}\n\nexport class MarginHoverWidget extends Disposable implements IOverlayWidget {\n\n\tpublic static readonly ID = 'editor.contrib.modesGlyphHoverWidget';\n\n\tprivate readonly _editor: ICodeEditor;\n\tprivate readonly _hover: HoverWidget;\n\n\tprivate _isVisible: boolean;\n\tprivate _messages: IHoverMessage[];\n\n\tprivate readonly _markdownRenderer: MarkdownRenderer;\n\tprivate readonly _computer: MarginHoverComputer;\n\tprivate readonly _hoverOperation: HoverOperation<IHoverMessage>;\n\tprivate readonly _renderDisposeables = this._register(new DisposableStore());\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\tlanguageService: ILanguageService,\n\t\topenerService: IOpenerService,\n\t) {\n\t\tsuper();\n\t\tthis._editor = editor;\n\n\t\tthis._isVisible = false;\n\t\tthis._messages = [];\n\n\t\tthis._hover = this._register(new HoverWidget());\n\t\tthis._hover.containerDomNode.classList.toggle('hidden', !this._isVisible);\n\n\t\tthis._markdownRenderer = this._register(new MarkdownRenderer({ editor: this._editor }, languageService, openerService));\n\t\tthis._computer = new MarginHoverComputer(this._editor);\n\t\tthis._hoverOperation = this._register(new HoverOperation(this._editor, this._computer));\n\t\tthis._register(this._hoverOperation.onResult((result) => {\n\t\t\tthis._withResult(result.value);\n\t\t}));\n\n\t\tthis._register(this._editor.onDidChangeModelDecorations(() => this._onModelDecorationsChanged()));\n\t\tthis._register(this._editor.onDidChangeConfiguration((e: ConfigurationChangedEvent) => {\n\t\t\tif (e.hasChanged(EditorOption.fontInfo)) {\n\t\t\t\tthis._updateFont();\n\t\t\t}\n\t\t}));\n\n\t\tthis._editor.addOverlayWidget(this);\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._editor.removeOverlayWidget(this);\n\t\tsuper.dispose();\n\t}\n\n\tpublic getId(): string {\n\t\treturn MarginHoverWidget.ID;\n\t}\n\n\tpublic getDomNode(): HTMLElement {\n\t\treturn this._hover.containerDomNode;\n\t}\n\n\tpublic getPosition(): IOverlayWidgetPosition | null {\n\t\treturn null;\n\t}\n\n\tprivate _updateFont(): void {\n\t\tconst codeClasses: HTMLElement[] = Array.prototype.slice.call(this._hover.contentsDomNode.getElementsByClassName('code'));\n\t\tcodeClasses.forEach(node => this._editor.applyFontInfo(node));\n\t}\n\n\tprivate _onModelDecorationsChanged(): void {\n\t\tif (this._isVisible) {\n\t\t\t// The decorations have changed and the hover is visible,\n\t\t\t// we need to recompute the displayed text\n\t\t\tthis._hoverOperation.cancel();\n\t\t\tthis._hoverOperation.start(HoverStartMode.Delayed);\n\t\t}\n\t}\n\n\tpublic startShowingAt(lineNumber: number): void {\n\t\tif (this._computer.lineNumber === lineNumber) {\n\t\t\t// We have to show the widget at the exact same line number as before, so no work is needed\n\t\t\treturn;\n\t\t}\n\n\t\tthis._hoverOperation.cancel();\n\n\t\tthis.hide();\n\n\t\tthis._computer.lineNumber = lineNumber;\n\t\tthis._hoverOperation.start(HoverStartMode.Delayed);\n\t}\n\n\tpublic hide(): void {\n\t\tthis._computer.lineNumber = -1;\n\t\tthis._hoverOperation.cancel();\n\t\tif (!this._isVisible) {\n\t\t\treturn;\n\t\t}\n\t\tthis._isVisible = false;\n\t\tthis._hover.containerDomNode.classList.toggle('hidden', !this._isVisible);\n\t}\n\n\tprivate _withResult(result: IHoverMessage[]): void {\n\t\tthis._messages = result;\n\n\t\tif (this._messages.length > 0) {\n\t\t\tthis._renderMessages(this._computer.lineNumber, this._messages);\n\t\t} else {\n\t\t\tthis.hide();\n\t\t}\n\t}\n\n\tprivate _renderMessages(lineNumber: number, messages: IHoverMessage[]): void {\n\t\tthis._renderDisposeables.clear();\n\n\t\tconst fragment = document.createDocumentFragment();\n\n\t\tfor (const msg of messages) {\n\t\t\tconst markdownHoverElement = $('div.hover-row.markdown-hover');\n\t\t\tconst hoverContentsElement = dom.append(markdownHoverElement, $('div.hover-contents'));\n\t\t\tconst renderedContents = this._renderDisposeables.add(this._markdownRenderer.render(msg.value));\n\t\t\thoverContentsElement.appendChild(renderedContents.element);\n\t\t\tfragment.appendChild(markdownHoverElement);\n\t\t}\n\n\t\tthis._updateContents(fragment);\n\t\tthis._showAt(lineNumber);\n\t}\n\n\tprivate _updateContents(node: Node): void {\n\t\tthis._hover.contentsDomNode.textContent = '';\n\t\tthis._hover.contentsDomNode.appendChild(node);\n\t\tthis._updateFont();\n\t}\n\n\tprivate _showAt(lineNumber: number): void {\n\t\tif (!this._isVisible) {\n\t\t\tthis._isVisible = true;\n\t\t\tthis._hover.containerDomNode.classList.toggle('hidden', !this._isVisible);\n\t\t}\n\n\t\tconst editorLayout = this._editor.getLayoutInfo();\n\t\tconst topForLineNumber = this._editor.getTopForLineNumber(lineNumber);\n\t\tconst editorScrollTop = this._editor.getScrollTop();\n\t\tconst lineHeight = this._editor.getOption(EditorOption.lineHeight);\n\t\tconst nodeHeight = this._hover.containerDomNode.clientHeight;\n\t\tconst top = topForLineNumber - editorScrollTop - ((nodeHeight - lineHeight) / 2);\n\n\t\tthis._hover.containerDomNode.style.left = `${editorLayout.glyphMarginLeft + editorLayout.glyphMarginWidth}px`;\n\t\tthis._hover.containerDomNode.style.top = `${Math.max(Math.round(top), 0)}px`;\n\t}\n}\n\nclass MarginHoverComputer implements IHoverComputer<IHoverMessage> {\n\n\tprivate _lineNumber: number = -1;\n\n\tpublic get lineNumber(): number {\n\t\treturn this._lineNumber;\n\t}\n\n\tpublic set lineNumber(value: number) {\n\t\tthis._lineNumber = value;\n\t}\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor\n\t) {\n\t}\n\n\tpublic computeSync(): IHoverMessage[] {\n\n\t\tconst toHoverMessage = (contents: IMarkdownString): IHoverMessage => {\n\t\t\treturn {\n\t\t\t\tvalue: contents\n\t\t\t};\n\t\t};\n\n\t\tconst lineDecorations = this._editor.getLineDecorations(this._lineNumber);\n\n\t\tconst result: IHoverMessage[] = [];\n\t\tif (!lineDecorations) {\n\t\t\treturn result;\n\t\t}\n\n\t\tfor (const d of lineDecorations) {\n\t\t\tif (!d.options.glyphMarginClassName) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst hoverMessage = d.options.glyphMarginHoverMessage;\n\t\t\tif (!hoverMessage || isEmptyMarkdownString(hoverMessage)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tresult.push(...asArray(hoverMessage).map(toHoverMessage));\n\t\t}\n\n\t\treturn result;\n\t}\n}\n"]}