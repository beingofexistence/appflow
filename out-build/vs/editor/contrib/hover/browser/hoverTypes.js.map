{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/hover/browser/hoverTypes.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAqChG,IAAkB,eAGjB;IAHD,WAAkB,eAAe;QAChC,uDAAS,CAAA;QACT,yEAAkB,CAAA;IACnB,CAAC,EAHiB,eAAe,+BAAf,eAAe,QAGhC;IAED,MAAa,GAAG;QAEf,YACiB,QAAgB,EAChB,KAAU,EACV,gBAAoC,EACpC,gBAAoC;YAHpC,aAAQ,GAAR,QAAQ,CAAQ;YAChB,UAAK,GAAL,KAAK,CAAK;YACV,qBAAgB,GAAhB,gBAAgB,CAAoB;YACpC,qBAAgB,GAAhB,gBAAgB,CAAoB;YALrC,SAAI,iCAAyB;QAO7C,CAAC;QACM,MAAM,CAAC,KAAkB;YAC/B,OAAO,CAAC,KAAK,CAAC,IAAI,kCAA0B,IAAI,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;QACtF,CAAC;QACM,oBAAoB,CAAC,UAAuB,EAAE,cAAmB;YACvE,OAAO,CAAC,UAAU,CAAC,IAAI,kCAA0B,IAAI,cAAc,CAAC,UAAU,KAAK,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;QAChH,CAAC;KACD;IAfD,kBAeC;IAED,MAAa,GAAG;QAEf,YACiB,QAAgB,EAChB,KAA8B,EAC9B,KAAU,EACV,gBAAoC,EACpC,gBAAoC,EACpC,mBAAwC;YALxC,aAAQ,GAAR,QAAQ,CAAQ;YAChB,UAAK,GAAL,KAAK,CAAyB;YAC9B,UAAK,GAAL,KAAK,CAAK;YACV,qBAAgB,GAAhB,gBAAgB,CAAoB;YACpC,qBAAgB,GAAhB,gBAAgB,CAAoB;YACpC,wBAAmB,GAAnB,mBAAmB,CAAqB;YAPzC,SAAI,0CAAkC;QAStD,CAAC;QACM,MAAM,CAAC,KAAkB;YAC/B,OAAO,CAAC,KAAK,CAAC,IAAI,2CAAmC,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,KAAK,CAAC,CAAC;QACtF,CAAC;QACM,oBAAoB,CAAC,UAAuB,EAAE,cAAmB;YACvE,OAAO,CAAC,UAAU,CAAC,IAAI,2CAAmC,IAAI,IAAI,CAAC,KAAK,KAAK,UAAU,CAAC,KAAK,CAAC,CAAC;QAChG,CAAC;KACD;IAjBD,kBAiBC;IAuDY,QAAA,GAAG,GAAwB,CAAC,IAAI,MAAM,wBAAwB;QAA9B;YAE5C,kBAAa,GAAkC,EAAE,CAAC;QAUnD,CAAC;QARO,QAAQ,CAAoC,IAAkF;YACpI,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAmC,CAAC,CAAC;QAC9D,CAAC;QAEM,MAAM;YACZ,OAAO,IAAI,CAAC,aAAa,CAAC;QAC3B,CAAC;KAED,EAAE,CAAC,CAAC","file":"hoverTypes.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Dimension } from 'vs/base/browser/dom';\nimport { AsyncIterableObject } from 'vs/base/common/async';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { ICodeEditor, IEditorMouseEvent } from 'vs/editor/browser/editorBrowser';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { IModelDecoration } from 'vs/editor/common/model';\nimport { BrandedService, IConstructorSignature } from 'vs/platform/instantiation/common/instantiation';\n\nexport interface IHoverPart {\n\t/**\n\t * The creator of this hover part.\n\t */\n\treadonly owner: IEditorHoverParticipant;\n\t/**\n\t * The range where this hover part applies.\n\t */\n\treadonly range: Range;\n\t/**\n\t * Force the hover to always be rendered at this specific range,\n\t * even in the case of multiple hover parts.\n\t */\n\treadonly forceShowAtRange?: boolean;\n\n\t/**\n\t * If true, the hover item should appear before content\n\t */\n\treadonly isBeforeContent?: boolean;\n\t/**\n\t * Is this hover part still valid for this new anchor?\n\t */\n\tisValidForHoverAnchor(anchor: HoverAnchor): boolean;\n}\n\nexport const enum HoverAnchorType {\n\tRange = 1,\n\tForeignElement = 2\n}\n\nexport class HoverRangeAnchor {\n\tpublic readonly type = HoverAnchorType.Range;\n\tconstructor(\n\t\tpublic readonly priority: number,\n\t\tpublic readonly range: Range,\n\t\tpublic readonly initialMousePosX: number | undefined,\n\t\tpublic readonly initialMousePosY: number | undefined,\n\t) {\n\t}\n\tpublic equals(other: HoverAnchor) {\n\t\treturn (other.type === HoverAnchorType.Range && this.range.equalsRange(other.range));\n\t}\n\tpublic canAdoptVisibleHover(lastAnchor: HoverAnchor, showAtPosition: Position): boolean {\n\t\treturn (lastAnchor.type === HoverAnchorType.Range && showAtPosition.lineNumber === this.range.startLineNumber);\n\t}\n}\n\nexport class HoverForeignElementAnchor {\n\tpublic readonly type = HoverAnchorType.ForeignElement;\n\tconstructor(\n\t\tpublic readonly priority: number,\n\t\tpublic readonly owner: IEditorHoverParticipant,\n\t\tpublic readonly range: Range,\n\t\tpublic readonly initialMousePosX: number | undefined,\n\t\tpublic readonly initialMousePosY: number | undefined,\n\t\tpublic readonly supportsMarkerHover: boolean | undefined\n\t) {\n\t}\n\tpublic equals(other: HoverAnchor) {\n\t\treturn (other.type === HoverAnchorType.ForeignElement && this.owner === other.owner);\n\t}\n\tpublic canAdoptVisibleHover(lastAnchor: HoverAnchor, showAtPosition: Position): boolean {\n\t\treturn (lastAnchor.type === HoverAnchorType.ForeignElement && this.owner === lastAnchor.owner);\n\t}\n}\n\nexport type HoverAnchor = HoverRangeAnchor | HoverForeignElementAnchor;\n\nexport interface IEditorHoverStatusBar {\n\taddAction(actionOptions: { label: string; iconClass?: string; run: (target: HTMLElement) => void; commandId: string }): IEditorHoverAction;\n\tappend(element: HTMLElement): HTMLElement;\n}\n\nexport interface IEditorHoverAction {\n\tsetEnabled(enabled: boolean): void;\n}\n\nexport interface IEditorHoverColorPickerWidget {\n\tlayout(): void;\n}\n\nexport interface IEditorHoverRenderContext {\n\t/**\n\t * The fragment where dom elements should be attached.\n\t */\n\treadonly fragment: DocumentFragment;\n\t/**\n\t * The status bar for actions for this hover.\n\t */\n\treadonly statusBar: IEditorHoverStatusBar;\n\t/**\n\t * Set if the hover will render a color picker widget.\n\t */\n\tsetColorPicker(widget: IEditorHoverColorPickerWidget): void;\n\t/**\n\t * The contents rendered inside the fragment have been changed, which means that the hover should relayout.\n\t */\n\tonContentsChanged(): void;\n\t/**\n\t * Set the minimum dimensions of the resizable hover\n\t */\n\tsetMinimumDimensions?(dimensions: Dimension): void;\n\t/**\n\t * Hide the hover.\n\t */\n\thide(): void;\n}\n\nexport interface IEditorHoverParticipant<T extends IHoverPart = IHoverPart> {\n\treadonly hoverOrdinal: number;\n\tsuggestHoverAnchor?(mouseEvent: IEditorMouseEvent): HoverAnchor | null;\n\tcomputeSync(anchor: HoverAnchor, lineDecorations: IModelDecoration[]): T[];\n\tcomputeAsync?(anchor: HoverAnchor, lineDecorations: IModelDecoration[], token: CancellationToken): AsyncIterableObject<T>;\n\tcreateLoadingMessage?(anchor: HoverAnchor): T | null;\n\trenderHoverParts(context: IEditorHoverRenderContext, hoverParts: T[]): IDisposable;\n}\n\nexport type IEditorHoverParticipantCtor = IConstructorSignature<IEditorHoverParticipant, [ICodeEditor]>;\n\nexport const HoverParticipantRegistry = (new class HoverParticipantRegistry {\n\n\t_participants: IEditorHoverParticipantCtor[] = [];\n\n\tpublic register<Services extends BrandedService[]>(ctor: { new(editor: ICodeEditor, ...services: Services): IEditorHoverParticipant }): void {\n\t\tthis._participants.push(ctor as IEditorHoverParticipantCtor);\n\t}\n\n\tpublic getAll(): IEditorHoverParticipantCtor[] {\n\t\treturn this._participants;\n\t}\n\n}());\n"]}