{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/hover/browser/getHover.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAYhG,MAAa,GAAG;QACf,YACiB,QAAuB,EACvB,KAAY,EACZ,OAAe;YAFf,aAAQ,GAAR,QAAQ,CAAe;YACvB,UAAK,GAAL,KAAK,CAAO;YACZ,YAAO,GAAP,OAAO,CAAQ;QAC5B,CAAC;KACL;IAND,kBAMC;IAED,KAAK,UAAU,eAAe,CAAC,QAAuB,EAAE,OAAe,EAAE,KAAiB,EAAE,QAAa,EAAO,KAAwB;QACvI,IAAI;YACH,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC;YACpF,IAAI,MAAM,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;gBAC9B,OAAO,IAAI,GAAG,CAAiB,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;aAC1D;SACD;QAAC,OAAO,GAAG,EAAE;YACb,IAAA,WAAE,EAAwB,GAAG,CAAC,CAAC;SAC/B;QACD,OAAO,SAAS,CAAC;IAClB,CAAC;IAED,SAAgB,GAAG,CAAM,QAAgD,EAAE,KAAiB,EAAE,QAAa,EAAO,KAAwB;QACzI,MAAM,SAAS,GAAG,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC1C,MAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,KAAK,EAAE,EAAE,CAAC,eAAe,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC;QAC9G,OAAO,WAAG,CAAiB,YAAY,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC;IAC9D,CAAC;IAJD,kBAIC;IAED,SAAgB,GAAG,CAAa,QAAgD,EAAE,KAAiB,EAAE,QAAa,EAAO,KAAwB;QAChJ,OAAO,GAAG,CAAM,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,SAAS,EAAE,CAAC;IACvF,CAAC;IAFD,kBAEC;IAED,IAAA,sBAAG,EAA6B,uBAAuB,EAAE,CAAC,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE;QACtF,MAAM,uBAAuB,GAAG,QAAQ,CAAC,GAAG,CAAC,sBAAG,CAAsB,CAAC;QACvE,OAAO,GAAG,CAAa,uBAAuB,CAAC,aAAa,EAAE,KAAK,EAAE,QAAQ,EAAE,gCAAiB,CAAC,IAAI,CAAC,CAAC;IACxG,CAAC,CAAC,CAAC;IAEH,SAAS,OAAO,CAAC,MAAa;QAC7B,MAAM,QAAQ,GAAG,CAAC,OAAO,MAAM,CAAC,KAAK,KAAK,WAAW,CAAC,CAAC;QACvD,MAAM,cAAc,GAAG,OAAO,MAAM,CAAC,QAAQ,KAAK,WAAW,IAAI,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;QAC/G,OAAO,QAAQ,IAAI,cAAc,CAAC;IACnC,CAAC","file":"getHover.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { AsyncIterableObject } from 'vs/base/common/async';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { onUnexpectedExternalError } from 'vs/base/common/errors';\nimport { registerModelAndPositionCommand } from 'vs/editor/browser/editorExtensions';\nimport { Position } from 'vs/editor/common/core/position';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { Hover, HoverProvider } from 'vs/editor/common/languages';\nimport { LanguageFeatureRegistry } from 'vs/editor/common/languageFeatureRegistry';\nimport { ILanguageFeaturesService } from 'vs/editor/common/services/languageFeatures';\n\nexport class HoverProviderResult {\n\tconstructor(\n\t\tpublic readonly provider: HoverProvider,\n\t\tpublic readonly hover: Hover,\n\t\tpublic readonly ordinal: number\n\t) { }\n}\n\nasync function executeProvider(provider: HoverProvider, ordinal: number, model: ITextModel, position: Position, token: CancellationToken): Promise<HoverProviderResult | undefined> {\n\ttry {\n\t\tconst result = await Promise.resolve(provider.provideHover(model, position, token));\n\t\tif (result && isValid(result)) {\n\t\t\treturn new HoverProviderResult(provider, result, ordinal);\n\t\t}\n\t} catch (err) {\n\t\tonUnexpectedExternalError(err);\n\t}\n\treturn undefined;\n}\n\nexport function getHover(registry: LanguageFeatureRegistry<HoverProvider>, model: ITextModel, position: Position, token: CancellationToken): AsyncIterableObject<HoverProviderResult> {\n\tconst providers = registry.ordered(model);\n\tconst promises = providers.map((provider, index) => executeProvider(provider, index, model, position, token));\n\treturn AsyncIterableObject.fromPromises(promises).coalesce();\n}\n\nexport function getHoverPromise(registry: LanguageFeatureRegistry<HoverProvider>, model: ITextModel, position: Position, token: CancellationToken): Promise<Hover[]> {\n\treturn getHover(registry, model, position, token).map(item => item.hover).toPromise();\n}\n\nregisterModelAndPositionCommand('_executeHoverProvider', (accessor, model, position) => {\n\tconst languageFeaturesService = accessor.get(ILanguageFeaturesService);\n\treturn getHoverPromise(languageFeaturesService.hoverProvider, model, position, CancellationToken.None);\n});\n\nfunction isValid(result: Hover) {\n\tconst hasRange = (typeof result.range !== 'undefined');\n\tconst hasHtmlContent = typeof result.contents !== 'undefined' && result.contents && result.contents.length > 0;\n\treturn hasRange && hasHtmlContent;\n}\n"]}