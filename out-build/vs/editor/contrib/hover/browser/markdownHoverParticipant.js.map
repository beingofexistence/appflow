{"version":3,"sources":["vs/editor/contrib/hover/browser/markdownHoverParticipant.ts"],"names":[],"mappings":"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","file":"markdownHoverParticipant.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from 'vs/base/browser/dom';\nimport { asArray } from 'vs/base/common/arrays';\nimport { AsyncIterableObject } from 'vs/base/common/async';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IMarkdownString, isEmptyMarkdownString, MarkdownString } from 'vs/base/common/htmlContent';\nimport { DisposableStore, IDisposable } from 'vs/base/common/lifecycle';\nimport { MarkdownRenderer } from 'vs/editor/contrib/markdownRenderer/browser/markdownRenderer';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { IModelDecoration } from 'vs/editor/common/model';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { getHover } from 'vs/editor/contrib/hover/browser/getHover';\nimport { HoverAnchor, HoverAnchorType, IEditorHoverParticipant, IEditorHoverRenderContext, IHoverPart } from 'vs/editor/contrib/hover/browser/hoverTypes';\nimport * as nls from 'vs/nls';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { ILanguageFeaturesService } from 'vs/editor/common/services/languageFeatures';\nimport { EditorOption } from 'vs/editor/common/config/editorOptions';\n\nconst $ = dom.$;\n\nexport class MarkdownHover implements IHoverPart {\n\n\tconstructor(\n\t\tpublic readonly owner: IEditorHoverParticipant<MarkdownHover>,\n\t\tpublic readonly range: Range,\n\t\tpublic readonly contents: IMarkdownString[],\n\t\tpublic readonly isBeforeContent: boolean,\n\t\tpublic readonly ordinal: number\n\t) { }\n\n\tpublic isValidForHoverAnchor(anchor: HoverAnchor): boolean {\n\t\treturn (\n\t\t\tanchor.type === HoverAnchorType.Range\n\t\t\t&& this.range.startColumn <= anchor.range.startColumn\n\t\t\t&& this.range.endColumn >= anchor.range.endColumn\n\t\t);\n\t}\n}\n\nexport class MarkdownHoverParticipant implements IEditorHoverParticipant<MarkdownHover> {\n\n\tpublic readonly hoverOrdinal: number = 3;\n\n\tconstructor(\n\t\tprotected readonly _editor: ICodeEditor,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@IOpenerService private readonly _openerService: IOpenerService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ILanguageFeaturesService protected readonly _languageFeaturesService: ILanguageFeaturesService,\n\t) { }\n\n\tpublic createLoadingMessage(anchor: HoverAnchor): MarkdownHover | null {\n\t\treturn new MarkdownHover(this, anchor.range, [new MarkdownString().appendText(nls.localize('modesContentHover.loading', \"Loading...\"))], false, 2000);\n\t}\n\n\tpublic computeSync(anchor: HoverAnchor, lineDecorations: IModelDecoration[]): MarkdownHover[] {\n\t\tif (!this._editor.hasModel() || anchor.type !== HoverAnchorType.Range) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst model = this._editor.getModel();\n\t\tconst lineNumber = anchor.range.startLineNumber;\n\t\tconst maxColumn = model.getLineMaxColumn(lineNumber);\n\t\tconst result: MarkdownHover[] = [];\n\n\t\tlet index = 1000;\n\n\t\tconst lineLength = model.getLineLength(lineNumber);\n\t\tconst languageId = model.getLanguageIdAtPosition(anchor.range.startLineNumber, anchor.range.startColumn);\n\t\tconst stopRenderingLineAfter = this._editor.getOption(EditorOption.stopRenderingLineAfter);\n\t\tconst maxTokenizationLineLength = this._configurationService.getValue<number>('editor.maxTokenizationLineLength', {\n\t\t\toverrideIdentifier: languageId\n\t\t});\n\t\tlet stopRenderingMessage = false;\n\t\tif (stopRenderingLineAfter >= 0 && lineLength > stopRenderingLineAfter && anchor.range.startColumn >= stopRenderingLineAfter) {\n\t\t\tstopRenderingMessage = true;\n\t\t\tresult.push(new MarkdownHover(this, anchor.range, [{\n\t\t\t\tvalue: nls.localize('stopped rendering', \"Rendering paused for long line for performance reasons. This can be configured via `editor.stopRenderingLineAfter`.\")\n\t\t\t}], false, index++));\n\t\t}\n\t\tif (!stopRenderingMessage && typeof maxTokenizationLineLength === 'number' && lineLength >= maxTokenizationLineLength) {\n\t\t\tresult.push(new MarkdownHover(this, anchor.range, [{\n\t\t\t\tvalue: nls.localize('too many characters', \"Tokenization is skipped for long lines for performance reasons. This can be configured via `editor.maxTokenizationLineLength`.\")\n\t\t\t}], false, index++));\n\t\t}\n\n\t\tlet isBeforeContent = false;\n\n\t\tfor (const d of lineDecorations) {\n\t\t\tconst startColumn = (d.range.startLineNumber === lineNumber) ? d.range.startColumn : 1;\n\t\t\tconst endColumn = (d.range.endLineNumber === lineNumber) ? d.range.endColumn : maxColumn;\n\n\t\t\tconst hoverMessage = d.options.hoverMessage;\n\t\t\tif (!hoverMessage || isEmptyMarkdownString(hoverMessage)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (d.options.beforeContentClassName) {\n\t\t\t\tisBeforeContent = true;\n\t\t\t}\n\n\t\t\tconst range = new Range(anchor.range.startLineNumber, startColumn, anchor.range.startLineNumber, endColumn);\n\t\t\tresult.push(new MarkdownHover(this, range, asArray(hoverMessage), isBeforeContent, index++));\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic computeAsync(anchor: HoverAnchor, lineDecorations: IModelDecoration[], token: CancellationToken): AsyncIterableObject<MarkdownHover> {\n\t\tif (!this._editor.hasModel() || anchor.type !== HoverAnchorType.Range) {\n\t\t\treturn AsyncIterableObject.EMPTY;\n\t\t}\n\n\t\tconst model = this._editor.getModel();\n\n\t\tif (!this._languageFeaturesService.hoverProvider.has(model)) {\n\t\t\treturn AsyncIterableObject.EMPTY;\n\t\t}\n\n\t\tconst position = new Position(anchor.range.startLineNumber, anchor.range.startColumn);\n\t\treturn getHover(this._languageFeaturesService.hoverProvider, model, position, token)\n\t\t\t.filter(item => !isEmptyMarkdownString(item.hover.contents))\n\t\t\t.map(item => {\n\t\t\t\tconst rng = item.hover.range ? Range.lift(item.hover.range) : anchor.range;\n\t\t\t\treturn new MarkdownHover(this, rng, item.hover.contents, false, item.ordinal);\n\t\t\t});\n\t}\n\n\tpublic renderHoverParts(context: IEditorHoverRenderContext, hoverParts: MarkdownHover[]): IDisposable {\n\t\treturn renderMarkdownHovers(context, hoverParts, this._editor, this._languageService, this._openerService);\n\t}\n}\n\nexport function renderMarkdownHovers(\n\tcontext: IEditorHoverRenderContext,\n\thoverParts: MarkdownHover[],\n\teditor: ICodeEditor,\n\tlanguageService: ILanguageService,\n\topenerService: IOpenerService,\n): IDisposable {\n\n\t// Sort hover parts to keep them stable since they might come in async, out-of-order\n\thoverParts.sort((a, b) => a.ordinal - b.ordinal);\n\n\tconst disposables = new DisposableStore();\n\tfor (const hoverPart of hoverParts) {\n\t\tfor (const contents of hoverPart.contents) {\n\t\t\tif (isEmptyMarkdownString(contents)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst markdownHoverElement = $('div.hover-row.markdown-hover');\n\t\t\tconst hoverContentsElement = dom.append(markdownHoverElement, $('div.hover-contents'));\n\t\t\tconst renderer = disposables.add(new MarkdownRenderer({ editor }, languageService, openerService));\n\t\t\tdisposables.add(renderer.onDidRenderAsync(() => {\n\t\t\t\thoverContentsElement.className = 'hover-contents code-hover-contents';\n\t\t\t\tcontext.onContentsChanged();\n\t\t\t}));\n\t\t\tconst renderedContents = disposables.add(renderer.render(contents));\n\t\t\thoverContentsElement.appendChild(renderedContents.element);\n\t\t\tcontext.fragment.appendChild(markdownHoverElement);\n\t\t}\n\t}\n\treturn disposables;\n}\n"]}