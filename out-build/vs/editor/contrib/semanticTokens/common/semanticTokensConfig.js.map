{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/semanticTokens/common/semanticTokensConfig.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMnF,QAAA,GAAG,GAAgC,6BAA6B,CAAC;IAM9E,SAAgB,GAAG,CAAuB,KAAiB,EAAE,YAAiB,EAAY,oBAAyB;QAClH,MAAM,OAAO,GAAG,oBAAoB,CAAC,QAAQ,CAAqC,WAAG,EAA+B,EAAE,kBAAkB,EAAE,KAAK,CAAC,aAAa,EAAE,EAAE,QAAQ,EAAE,KAAK,CAAC,GAAG,EAAE,CAAC,EAAE,OAAO,CAAC;QACjM,IAAI,OAAO,OAAO,KAAK,SAAS,EAAE;YACjC,OAAO,OAAO,CAAC;SACf;QACD,OAAO,YAAY,CAAC,aAAa,EAAE,CAAC,oBAAoB,CAAC;IAC1D,CAAC;IAND,kBAMC","file":"semanticTokensConfig.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\n\nexport const SEMANTIC_HIGHLIGHTING_SETTING_ID = 'editor.semanticHighlighting';\n\nexport interface IEditorSemanticHighlightingOptions {\n\tenabled: true | false | 'configuredByTheme';\n}\n\nexport function isSemanticColoringEnabled(model: ITextModel, themeService: IThemeService, configurationService: IConfigurationService): boolean {\n\tconst setting = configurationService.getValue<IEditorSemanticHighlightingOptions>(SEMANTIC_HIGHLIGHTING_SETTING_ID, { overrideIdentifier: model.getLanguageId(), resource: model.uri })?.enabled;\n\tif (typeof setting === 'boolean') {\n\t\treturn setting;\n\t}\n\treturn themeService.getColorTheme().semanticHighlighting;\n}\n"]}