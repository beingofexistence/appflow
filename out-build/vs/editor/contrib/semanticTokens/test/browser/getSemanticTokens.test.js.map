{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/semanticTokens/test/browser/getSemanticTokens.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAahG,KAAK,CAAC,mBAAmB,EAAE,GAAG,EAAE;QAE/B,IAAA,WAAG,GAAsC,CAAC;QAE1C,IAAI,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAChE,MAAM,WAAW,GAAG,IAAI,eAAG,EAAc,CAAC;YAC1C,MAAM,QAAQ,GAAG,IAAI,6BAAG,EAAsD,CAAC;YAC/E,MAAM,QAAQ,GAAG,IAAI;gBACpB,SAAS;oBACR,OAAO,EAAE,UAAU,EAAE,CAAC,MAAM,CAAC,EAAE,cAAc,EAAE,EAAE,EAAE,CAAC;gBACrD,CAAC;gBACD,6BAA6B,CAAC,KAAiB,EAAE,YAA2B,EAAE,KAAwB;oBACrG,MAAM,IAAA,WAAE,GAAQ,CAAC;gBAClB,CAAC;gBACD,6BAA6B,CAAC,QAA4B;gBAC1D,CAAC;aACD,CAAC;YAEF,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC,CAAC;YAEzD,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,CAAC,IAAA,oBAAI,EAAY,SAAS,EAAE,UAAU,CAAC,CAAC,CAAC;YAE1E,MAAM,IAAA,uBAAG,EAAuB,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE,IAAI,EAAE,gCAAiB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE;gBACrG,MAAM,CAAC,IAAI,EAAE,CAAC;YACf,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE;gBACV,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YAClB,CAAC,CAAC,CAAC;YAEH,WAAW,CAAC,OAAO,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;IAEJ,CAAC,CAAC,CAAC","file":"getSemanticTokens.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { canceled } from 'vs/base/common/errors';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { LanguageFeatureRegistry } from 'vs/editor/common/languageFeatureRegistry';\nimport { DocumentSemanticTokensProvider, ProviderResult, SemanticTokens, SemanticTokensEdits, SemanticTokensLegend } from 'vs/editor/common/languages';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { getDocumentSemanticTokens } from 'vs/editor/contrib/semanticTokens/common/getSemanticTokens';\nimport { createTextModel } from 'vs/editor/test/common/testTextModel';\n\nsuite('getSemanticTokens', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('issue #136540: semantic highlighting flickers', async () => {\n\t\tconst disposables = new DisposableStore();\n\t\tconst registry = new LanguageFeatureRegistry<DocumentSemanticTokensProvider>();\n\t\tconst provider = new class implements DocumentSemanticTokensProvider {\n\t\t\tgetLegend(): SemanticTokensLegend {\n\t\t\t\treturn { tokenTypes: ['test'], tokenModifiers: [] };\n\t\t\t}\n\t\t\tprovideDocumentSemanticTokens(model: ITextModel, lastResultId: string | null, token: CancellationToken): ProviderResult<SemanticTokens | SemanticTokensEdits> {\n\t\t\t\tthrow canceled();\n\t\t\t}\n\t\t\treleaseDocumentSemanticTokens(resultId: string | undefined): void {\n\t\t\t}\n\t\t};\n\n\t\tdisposables.add(registry.register('testLang', provider));\n\n\t\tconst textModel = disposables.add(createTextModel('example', 'testLang'));\n\n\t\tawait getDocumentSemanticTokens(registry, textModel, null, null, CancellationToken.None).then((res) => {\n\t\t\tassert.fail();\n\t\t}, (err) => {\n\t\t\tassert.ok(!!err);\n\t\t});\n\n\t\tdisposables.dispose();\n\t});\n\n});\n"]}