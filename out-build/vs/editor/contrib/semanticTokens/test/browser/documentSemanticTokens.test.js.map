{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/semanticTokens/test/browser/documentSemanticTokens.test.ts"],"names":[],"mappings":"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","file":"documentSemanticTokens.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Barrier, timeout } from 'vs/base/common/async';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { mock } from 'vs/base/test/common/mock';\nimport { runWithFakedTimers } from 'vs/base/test/common/timeTravelScheduler';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { Range } from 'vs/editor/common/core/range';\nimport { DocumentSemanticTokensProvider, SemanticTokens, SemanticTokensEdits, SemanticTokensLegend } from 'vs/editor/common/languages';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { LanguageFeatureDebounceService } from 'vs/editor/common/services/languageFeatureDebounce';\nimport { ILanguageFeaturesService } from 'vs/editor/common/services/languageFeatures';\nimport { LanguageFeaturesService } from 'vs/editor/common/services/languageFeaturesService';\nimport { LanguageService } from 'vs/editor/common/services/languageService';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { ModelService } from 'vs/editor/common/services/modelService';\nimport { SemanticTokensStylingService } from 'vs/editor/common/services/semanticTokensStylingService';\nimport { DocumentSemanticTokensFeature } from 'vs/editor/contrib/semanticTokens/browser/documentSemanticTokens';\nimport { getDocumentSemanticTokens, isSemanticTokens } from 'vs/editor/contrib/semanticTokens/common/getSemanticTokens';\nimport { TestLanguageConfigurationService } from 'vs/editor/test/common/modes/testLanguageConfigurationService';\nimport { TestTextResourcePropertiesService } from 'vs/editor/test/common/services/testTextResourcePropertiesService';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { TestDialogService } from 'vs/platform/dialogs/test/common/testDialogService';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { TestNotificationService } from 'vs/platform/notification/test/common/testNotificationService';\nimport { ColorScheme } from 'vs/platform/theme/common/theme';\nimport { TestColorTheme, TestThemeService } from 'vs/platform/theme/test/common/testThemeService';\nimport { UndoRedoService } from 'vs/platform/undoRedo/common/undoRedoService';\n\nsuite('ModelSemanticColoring', () => {\n\n\tconst disposables = new DisposableStore();\n\tlet modelService: IModelService;\n\tlet languageService: ILanguageService;\n\tlet languageFeaturesService: ILanguageFeaturesService;\n\n\tsetup(() => {\n\t\tconst configService = new TestConfigurationService({ editor: { semanticHighlighting: true } });\n\t\tconst themeService = new TestThemeService();\n\t\tthemeService.setTheme(new TestColorTheme({}, ColorScheme.DARK, true));\n\t\tconst logService = new NullLogService();\n\t\tlanguageFeaturesService = new LanguageFeaturesService();\n\t\tlanguageService = disposables.add(new LanguageService(false));\n\t\tconst semanticTokensStylingService = disposables.add(new SemanticTokensStylingService(themeService, logService, languageService));\n\t\tmodelService = disposables.add(new ModelService(\n\t\t\tconfigService,\n\t\t\tnew TestTextResourcePropertiesService(configService),\n\t\t\tnew UndoRedoService(new TestDialogService(), new TestNotificationService()),\n\t\t\tlanguageService,\n\t\t\tnew TestLanguageConfigurationService(),\n\t\t));\n\t\tconst envService = new class extends mock<IEnvironmentService>() {\n\t\t\toverride isBuilt: boolean = true;\n\t\t\toverride isExtensionDevelopment: boolean = false;\n\t\t};\n\t\tdisposables.add(new DocumentSemanticTokensFeature(semanticTokensStylingService, modelService, themeService, configService, new LanguageFeatureDebounceService(logService, envService), languageFeaturesService));\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('DocumentSemanticTokens should be fetched when the result is empty if there are pending changes', async () => {\n\t\tawait runWithFakedTimers({}, async () => {\n\n\t\t\tdisposables.add(languageService.registerLanguage({ id: 'testMode' }));\n\n\t\t\tconst inFirstCall = new Barrier();\n\t\t\tconst delayFirstResult = new Barrier();\n\t\t\tconst secondResultProvided = new Barrier();\n\t\t\tlet callCount = 0;\n\n\t\t\tdisposables.add(languageFeaturesService.documentSemanticTokensProvider.register('testMode', new class implements DocumentSemanticTokensProvider {\n\t\t\t\tgetLegend(): SemanticTokensLegend {\n\t\t\t\t\treturn { tokenTypes: ['class'], tokenModifiers: [] };\n\t\t\t\t}\n\t\t\t\tasync provideDocumentSemanticTokens(model: ITextModel, lastResultId: string | null, token: CancellationToken): Promise<SemanticTokens | SemanticTokensEdits | null> {\n\t\t\t\t\tcallCount++;\n\t\t\t\t\tif (callCount === 1) {\n\t\t\t\t\t\tassert.ok('called once');\n\t\t\t\t\t\tinFirstCall.open();\n\t\t\t\t\t\tawait delayFirstResult.wait();\n\t\t\t\t\t\tawait timeout(0); // wait for the simple scheduler to fire to check that we do actually get rescheduled\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tif (callCount === 2) {\n\t\t\t\t\t\tassert.ok('called twice');\n\t\t\t\t\t\tsecondResultProvided.open();\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tassert.fail('Unexpected call');\n\t\t\t\t}\n\t\t\t\treleaseDocumentSemanticTokens(resultId: string | undefined): void {\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tconst textModel = disposables.add(modelService.createModel('Hello world', languageService.createById('testMode')));\n\t\t\t// pretend the text model is attached to an editor (so that semantic tokens are computed)\n\t\t\ttextModel.onBeforeAttached();\n\n\t\t\t// wait for the provider to be called\n\t\t\tawait inFirstCall.wait();\n\n\t\t\t// the provider is now in the provide call\n\t\t\t// change the text buffer while the provider is running\n\t\t\ttextModel.applyEdits([{ range: new Range(1, 1, 1, 1), text: 'x' }]);\n\n\t\t\t// let the provider finish its first result\n\t\t\tdelayFirstResult.open();\n\n\t\t\t// we need to check that the provider is called again, even if it returns null\n\t\t\tawait secondResultProvided.wait();\n\n\t\t\t// assert that it got called twice\n\t\t\tassert.strictEqual(callCount, 2);\n\t\t});\n\t});\n\n\ttest('issue #149412: VS Code hangs when bad semantic token data is received', async () => {\n\t\tawait runWithFakedTimers({}, async () => {\n\n\t\t\tdisposables.add(languageService.registerLanguage({ id: 'testMode' }));\n\n\t\t\tlet lastResult: SemanticTokens | SemanticTokensEdits | null = null;\n\n\t\t\tdisposables.add(languageFeaturesService.documentSemanticTokensProvider.register('testMode', new class implements DocumentSemanticTokensProvider {\n\t\t\t\tgetLegend(): SemanticTokensLegend {\n\t\t\t\t\treturn { tokenTypes: ['class'], tokenModifiers: [] };\n\t\t\t\t}\n\t\t\t\tasync provideDocumentSemanticTokens(model: ITextModel, lastResultId: string | null, token: CancellationToken): Promise<SemanticTokens | SemanticTokensEdits | null> {\n\t\t\t\t\tif (!lastResultId) {\n\t\t\t\t\t\t// this is the first call\n\t\t\t\t\t\tlastResult = {\n\t\t\t\t\t\t\tresultId: '1',\n\t\t\t\t\t\t\tdata: new Uint32Array([4294967293, 0, 7, 16, 0, 1, 4, 3, 11, 1])\n\t\t\t\t\t\t};\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// this is the second call\n\t\t\t\t\t\tlastResult = {\n\t\t\t\t\t\t\tresultId: '2',\n\t\t\t\t\t\t\tedits: [{\n\t\t\t\t\t\t\t\tstart: 4294967276,\n\t\t\t\t\t\t\t\tdeleteCount: 0,\n\t\t\t\t\t\t\t\tdata: new Uint32Array([2, 0, 3, 11, 0])\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\treturn lastResult;\n\t\t\t\t}\n\t\t\t\treleaseDocumentSemanticTokens(resultId: string | undefined): void {\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tconst textModel = disposables.add(modelService.createModel('', languageService.createById('testMode')));\n\t\t\t// pretend the text model is attached to an editor (so that semantic tokens are computed)\n\t\t\ttextModel.onBeforeAttached();\n\n\t\t\t// wait for the semantic tokens to be fetched\n\t\t\tawait Event.toPromise(textModel.onDidChangeTokens);\n\t\t\tassert.strictEqual(lastResult!.resultId, '1');\n\n\t\t\t// edit the text\n\t\t\ttextModel.applyEdits([{ range: new Range(1, 1, 1, 1), text: 'foo' }]);\n\n\t\t\t// wait for the semantic tokens to be fetched again\n\t\t\tawait Event.toPromise(textModel.onDidChangeTokens);\n\t\t\tassert.strictEqual(lastResult!.resultId, '2');\n\t\t});\n\t});\n\n\ttest('issue #161573: onDidChangeSemanticTokens doesn\\'t consistently trigger provideDocumentSemanticTokens', async () => {\n\t\tawait runWithFakedTimers({}, async () => {\n\n\t\t\tdisposables.add(languageService.registerLanguage({ id: 'testMode' }));\n\n\t\t\tconst emitter = new Emitter<void>();\n\t\t\tlet requestCount = 0;\n\t\t\tdisposables.add(languageFeaturesService.documentSemanticTokensProvider.register('testMode', new class implements DocumentSemanticTokensProvider {\n\t\t\t\tonDidChange = emitter.event;\n\t\t\t\tgetLegend(): SemanticTokensLegend {\n\t\t\t\t\treturn { tokenTypes: ['class'], tokenModifiers: [] };\n\t\t\t\t}\n\t\t\t\tasync provideDocumentSemanticTokens(model: ITextModel, lastResultId: string | null, token: CancellationToken): Promise<SemanticTokens | SemanticTokensEdits | null> {\n\t\t\t\t\trequestCount++;\n\t\t\t\t\tif (requestCount === 1) {\n\t\t\t\t\t\tawait timeout(1000);\n\t\t\t\t\t\t// send a change event\n\t\t\t\t\t\temitter.fire();\n\t\t\t\t\t\tawait timeout(1000);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\treleaseDocumentSemanticTokens(resultId: string | undefined): void {\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tconst textModel = disposables.add(modelService.createModel('', languageService.createById('testMode')));\n\t\t\t// pretend the text model is attached to an editor (so that semantic tokens are computed)\n\t\t\ttextModel.onBeforeAttached();\n\n\t\t\tawait timeout(5000);\n\t\t\tassert.deepStrictEqual(requestCount, 2);\n\t\t});\n\t});\n\n\ttest('DocumentSemanticTokens should be pick the token provider with actual items', async () => {\n\t\tawait runWithFakedTimers({}, async () => {\n\n\t\t\tlet callCount = 0;\n\t\t\tdisposables.add(languageService.registerLanguage({ id: 'testMode2' }));\n\t\t\tdisposables.add(languageFeaturesService.documentSemanticTokensProvider.register('testMode2', new class implements DocumentSemanticTokensProvider {\n\t\t\t\tgetLegend(): SemanticTokensLegend {\n\t\t\t\t\treturn { tokenTypes: ['class1'], tokenModifiers: [] };\n\t\t\t\t}\n\t\t\t\tasync provideDocumentSemanticTokens(model: ITextModel, lastResultId: string | null, token: CancellationToken): Promise<SemanticTokens | SemanticTokensEdits | null> {\n\t\t\t\t\tcallCount++;\n\t\t\t\t\t// For a secondary request return a different value\n\t\t\t\t\tif (lastResultId) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tdata: new Uint32Array([2, 1, 1, 1, 1, 0, 2, 1, 1, 1])\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\treturn {\n\t\t\t\t\t\tresultId: '1',\n\t\t\t\t\t\tdata: new Uint32Array([0, 1, 1, 1, 1, 0, 2, 1, 1, 1])\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treleaseDocumentSemanticTokens(resultId: string | undefined): void {\n\t\t\t\t}\n\t\t\t}));\n\t\t\tdisposables.add(languageFeaturesService.documentSemanticTokensProvider.register('testMode2', new class implements DocumentSemanticTokensProvider {\n\t\t\t\tgetLegend(): SemanticTokensLegend {\n\t\t\t\t\treturn { tokenTypes: ['class2'], tokenModifiers: [] };\n\t\t\t\t}\n\t\t\t\tasync provideDocumentSemanticTokens(model: ITextModel, lastResultId: string | null, token: CancellationToken): Promise<SemanticTokens | SemanticTokensEdits | null> {\n\t\t\t\t\tcallCount++;\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\treleaseDocumentSemanticTokens(resultId: string | undefined): void {\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tfunction toArr(arr: Uint32Array): number[] {\n\t\t\t\tconst result: number[] = [];\n\t\t\t\tfor (let i = 0; i < arr.length; i++) {\n\t\t\t\t\tresult[i] = arr[i];\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t}\n\n\t\t\tconst textModel = modelService.createModel('Hello world 2', languageService.createById('testMode2'));\n\t\t\ttry {\n\t\t\t\tlet result = await getDocumentSemanticTokens(languageFeaturesService.documentSemanticTokensProvider, textModel, null, null, CancellationToken.None);\n\t\t\t\tassert.ok(result, `We should have tokens (1)`);\n\t\t\t\tassert.ok(result.tokens, `Tokens are found from multiple providers (1)`);\n\t\t\t\tassert.ok(isSemanticTokens(result.tokens), `Tokens are full (1)`);\n\t\t\t\tassert.ok(result.tokens.resultId, `Token result id found from multiple providers (1)`);\n\t\t\t\tassert.deepStrictEqual(toArr(result.tokens.data), [0, 1, 1, 1, 1, 0, 2, 1, 1, 1], `Token data returned for multiple providers (1)`);\n\t\t\t\tassert.deepStrictEqual(callCount, 2, `Called both token providers (1)`);\n\t\t\t\tassert.deepStrictEqual(result.provider.getLegend(), { tokenTypes: ['class1'], tokenModifiers: [] }, `Legend matches the tokens (1)`);\n\n\t\t\t\t// Make a second request. Make sure we get the secondary value\n\t\t\t\tresult = await getDocumentSemanticTokens(languageFeaturesService.documentSemanticTokensProvider, textModel, result.provider, result.tokens.resultId, CancellationToken.None);\n\t\t\t\tassert.ok(result, `We should have tokens (2)`);\n\t\t\t\tassert.ok(result.tokens, `Tokens are found from multiple providers (2)`);\n\t\t\t\tassert.ok(isSemanticTokens(result.tokens), `Tokens are full (2)`);\n\t\t\t\tassert.ok(!result.tokens.resultId, `Token result id found from multiple providers (2)`);\n\t\t\t\tassert.deepStrictEqual(toArr(result.tokens.data), [2, 1, 1, 1, 1, 0, 2, 1, 1, 1], `Token data returned for multiple providers (2)`);\n\t\t\t\tassert.deepStrictEqual(callCount, 4, `Called both token providers (2)`);\n\t\t\t\tassert.deepStrictEqual(result.provider.getLegend(), { tokenTypes: ['class1'], tokenModifiers: [] }, `Legend matches the tokens (2)`);\n\t\t\t} finally {\n\t\t\t\tdisposables.clear();\n\n\t\t\t\t// Wait for scheduler to finish\n\t\t\t\tawait timeout(0);\n\n\t\t\t\t// Now dispose the text model\n\t\t\t\ttextModel.dispose();\n\t\t\t}\n\t\t});\n\t});\n});\n"]}