{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/dropOrPasteInto/browser/edit.ts"],"names":[],"mappings":"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","file":"edit.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { ResourceTextEdit } from 'vs/editor/browser/services/bulkEditService';\nimport { DropYieldTo, WorkspaceEdit } from 'vs/editor/common/languages';\nimport { Range } from 'vs/editor/common/core/range';\n\nexport interface DropOrPasteEdit {\n\treadonly label: string;\n\treadonly insertText: string | { readonly snippet: string };\n\treadonly additionalEdit?: WorkspaceEdit;\n}\n\nexport function createCombinedWorkspaceEdit(uri: URI, ranges: readonly Range[], edit: DropOrPasteEdit): WorkspaceEdit {\n\treturn {\n\t\tedits: [\n\t\t\t...ranges.map(range =>\n\t\t\t\tnew ResourceTextEdit(uri,\n\t\t\t\t\ttypeof edit.insertText === 'string'\n\t\t\t\t\t\t? { range, text: edit.insertText, insertAsSnippet: false }\n\t\t\t\t\t\t: { range, text: edit.insertText.snippet, insertAsSnippet: true }\n\t\t\t\t)),\n\t\t\t...(edit.additionalEdit?.edits ?? [])\n\t\t]\n\t};\n}\n\nexport function sortEditsByYieldTo<T extends {\n\treadonly providerId: string | undefined;\n\treadonly handledMimeType?: string;\n\treadonly yieldTo?: readonly DropYieldTo[];\n}>(edits: readonly T[]): T[] {\n\tfunction yieldsTo(yTo: DropYieldTo, other: T): boolean {\n\t\treturn ('providerId' in yTo && yTo.providerId === other.providerId)\n\t\t\t|| ('mimeType' in yTo && yTo.mimeType === other.handledMimeType);\n\t}\n\n\t// Build list of nodes each node yields to\n\tconst yieldsToMap = new Map<T, T[]>();\n\tfor (const edit of edits) {\n\t\tfor (const yTo of edit.yieldTo ?? []) {\n\t\t\tfor (const other of edits) {\n\t\t\t\tif (other === edit) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (yieldsTo(yTo, other)) {\n\t\t\t\t\tlet arr = yieldsToMap.get(edit);\n\t\t\t\t\tif (!arr) {\n\t\t\t\t\t\tarr = [];\n\t\t\t\t\t\tyieldsToMap.set(edit, arr);\n\t\t\t\t\t}\n\t\t\t\t\tarr.push(other);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tif (!yieldsToMap.size) {\n\t\treturn Array.from(edits);\n\t}\n\n\t// Topological sort\n\tconst visited = new Set<T>();\n\tconst tempStack: T[] = [];\n\n\tfunction visit(nodes: T[]): T[] {\n\t\tif (!nodes.length) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst node = nodes[0];\n\t\tif (tempStack.includes(node)) {\n\t\t\tconsole.warn(`Yield to cycle detected for ${node.providerId}`);\n\t\t\treturn nodes;\n\t\t}\n\n\t\tif (visited.has(node)) {\n\t\t\treturn visit(nodes.slice(1));\n\t\t}\n\n\t\tlet pre: T[] = [];\n\t\tconst yTo = yieldsToMap.get(node);\n\t\tif (yTo) {\n\t\t\ttempStack.push(node);\n\t\t\tpre = visit(yTo);\n\t\t\ttempStack.pop();\n\t\t}\n\n\t\tvisited.add(node);\n\n\t\treturn [...pre, node, ...visit(nodes.slice(1))];\n\t}\n\n\treturn visit(Array.from(edits));\n}\n"]}