{"version":3,"sources":["vs/editor/contrib/dropOrPasteInto/browser/copyPasteController.ts"],"names":[],"mappings":"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","file":"copyPasteController.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { addDisposableListener, getActiveDocument } from 'vs/base/browser/dom';\nimport { coalesce } from 'vs/base/common/arrays';\nimport { CancelablePromise, createCancelablePromise, raceCancellation } from 'vs/base/common/async';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { UriList, VSDataTransfer, createStringDataTransferItem, matchesMimeType } from 'vs/base/common/dataTransfer';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Mimes } from 'vs/base/common/mime';\nimport * as platform from 'vs/base/common/platform';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { ClipboardEventUtils } from 'vs/editor/browser/controller/textAreaInput';\nimport { toExternalVSDataTransfer, toVSDataTransfer } from 'vs/editor/browser/dnd';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { IBulkEditService } from 'vs/editor/browser/services/bulkEditService';\nimport { EditorOption } from 'vs/editor/common/config/editorOptions';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { Handler, IEditorContribution, PastePayload } from 'vs/editor/common/editorCommon';\nimport { DocumentPasteEdit, DocumentPasteEditProvider } from 'vs/editor/common/languages';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { ILanguageFeaturesService } from 'vs/editor/common/services/languageFeatures';\nimport { createCombinedWorkspaceEdit, sortEditsByYieldTo } from 'vs/editor/contrib/dropOrPasteInto/browser/edit';\nimport { CodeEditorStateFlag, EditorStateCancellationTokenSource } from 'vs/editor/contrib/editorState/browser/editorState';\nimport { InlineProgressManager } from 'vs/editor/contrib/inlineProgress/browser/inlineProgress';\nimport { localize } from 'vs/nls';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IProgressService, ProgressLocation } from 'vs/platform/progress/common/progress';\nimport { IQuickInputService, IQuickPickItem } from 'vs/platform/quickinput/common/quickInput';\nimport { PostEditWidgetManager } from './postEditWidget';\n\nexport const changePasteTypeCommandId = 'editor.changePasteType';\n\nexport const pasteWidgetVisibleCtx = new RawContextKey<boolean>('pasteWidgetVisible', false, localize('pasteWidgetVisible', \"Whether the paste widget is showing\"));\n\nconst vscodeClipboardMime = 'application/vnd.code.copyMetadata';\n\ninterface CopyMetadata {\n\treadonly id?: string;\n\treadonly providerCopyMimeTypes?: readonly string[];\n\n\treadonly defaultPastePayload: Omit<PastePayload, 'text'>;\n}\n\nexport class CopyPasteController extends Disposable implements IEditorContribution {\n\n\tpublic static readonly ID = 'editor.contrib.copyPasteActionController';\n\n\tpublic static get(editor: ICodeEditor): CopyPasteController {\n\t\treturn editor.getContribution<CopyPasteController>(CopyPasteController.ID)!;\n\t}\n\n\tprivate readonly _editor: ICodeEditor;\n\n\tprivate _currentCopyOperation?: {\n\t\treadonly handle: string;\n\t\treadonly dataTransferPromise: CancelablePromise<VSDataTransfer>;\n\t};\n\n\tprivate _currentPasteOperation?: CancelablePromise<void>;\n\tprivate _pasteAsActionContext?: { readonly preferredId: string | undefined };\n\n\tprivate readonly _pasteProgressManager: InlineProgressManager;\n\tprivate readonly _postPasteWidgetManager: PostEditWidgetManager;\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IBulkEditService private readonly _bulkEditService: IBulkEditService,\n\t\t@IClipboardService private readonly _clipboardService: IClipboardService,\n\t\t@ILanguageFeaturesService private readonly _languageFeaturesService: ILanguageFeaturesService,\n\t\t@IQuickInputService private readonly _quickInputService: IQuickInputService,\n\t\t@IProgressService private readonly _progressService: IProgressService,\n\t) {\n\t\tsuper();\n\n\t\tthis._editor = editor;\n\n\t\tconst container = editor.getContainerDomNode();\n\t\tthis._register(addDisposableListener(container, 'copy', e => this.handleCopy(e)));\n\t\tthis._register(addDisposableListener(container, 'cut', e => this.handleCopy(e)));\n\t\tthis._register(addDisposableListener(container, 'paste', e => this.handlePaste(e), true));\n\n\t\tthis._pasteProgressManager = this._register(new InlineProgressManager('pasteIntoEditor', editor, instantiationService));\n\n\t\tthis._postPasteWidgetManager = this._register(instantiationService.createInstance(PostEditWidgetManager, 'pasteIntoEditor', editor, pasteWidgetVisibleCtx, { id: changePasteTypeCommandId, label: localize('postPasteWidgetTitle', \"Show paste options...\") }));\n\t}\n\n\tpublic changePasteType() {\n\t\tthis._postPasteWidgetManager.tryShowSelector();\n\t}\n\n\tpublic pasteAs(preferredId?: string) {\n\t\tthis._editor.focus();\n\t\ttry {\n\t\t\tthis._pasteAsActionContext = { preferredId };\n\t\t\tgetActiveDocument().execCommand('paste');\n\t\t} finally {\n\t\t\tthis._pasteAsActionContext = undefined;\n\t\t}\n\t}\n\n\tpublic clearWidgets() {\n\t\tthis._postPasteWidgetManager.clear();\n\t}\n\n\tprivate isPasteAsEnabled(): boolean {\n\t\treturn this._editor.getOption(EditorOption.pasteAs).enabled\n\t\t\t&& !this._editor.getOption(EditorOption.readOnly);\n\t}\n\n\tprivate handleCopy(e: ClipboardEvent) {\n\t\tif (!this._editor.hasTextFocus()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (platform.isWeb) {\n\t\t\t// Explicitly clear the web resources clipboard.\n\t\t\t// This is needed because on web, the browser clipboard is faked out using an in-memory store.\n\t\t\t// This means the resources clipboard is not properly updated when copying from the editor.\n\t\t\tthis._clipboardService.writeResources([]);\n\t\t}\n\n\t\tif (!e.clipboardData || !this.isPasteAsEnabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this._editor.getModel();\n\t\tconst selections = this._editor.getSelections();\n\t\tif (!model || !selections?.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst enableEmptySelectionClipboard = this._editor.getOption(EditorOption.emptySelectionClipboard);\n\n\t\tlet ranges: readonly IRange[] = selections;\n\t\tconst wasFromEmptySelection = selections.length === 1 && selections[0].isEmpty();\n\t\tif (wasFromEmptySelection) {\n\t\t\tif (!enableEmptySelectionClipboard) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tranges = [new Range(ranges[0].startLineNumber, 1, ranges[0].startLineNumber, 1 + model.getLineLength(ranges[0].startLineNumber))];\n\t\t}\n\n\t\tconst toCopy = this._editor._getViewModel()?.getPlainTextToCopy(selections, enableEmptySelectionClipboard, platform.isWindows);\n\t\tconst multicursorText = Array.isArray(toCopy) ? toCopy : null;\n\n\t\tconst defaultPastePayload = {\n\t\t\tmulticursorText,\n\t\t\tpasteOnNewLine: wasFromEmptySelection,\n\t\t\tmode: null\n\t\t};\n\n\t\tconst providers = this._languageFeaturesService.documentPasteEditProvider\n\t\t\t.ordered(model)\n\t\t\t.filter(x => !!x.prepareDocumentPaste);\n\t\tif (!providers.length) {\n\t\t\tthis.setCopyMetadata(e.clipboardData, { defaultPastePayload });\n\t\t\treturn;\n\t\t}\n\n\t\tconst dataTransfer = toVSDataTransfer(e.clipboardData);\n\t\tconst providerCopyMimeTypes = providers.flatMap(x => x.copyMimeTypes ?? []);\n\n\t\t// Save off a handle pointing to data that VS Code maintains.\n\t\tconst handle = generateUuid();\n\t\tthis.setCopyMetadata(e.clipboardData, {\n\t\t\tid: handle,\n\t\t\tproviderCopyMimeTypes,\n\t\t\tdefaultPastePayload\n\t\t});\n\n\t\tconst promise = createCancelablePromise(async token => {\n\t\t\tconst results = coalesce(await Promise.all(providers.map(async provider => {\n\t\t\t\ttry {\n\t\t\t\t\treturn await provider.prepareDocumentPaste!(model, ranges, dataTransfer, token);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t})));\n\n\t\t\t// Values from higher priority providers should overwrite values from lower priority ones.\n\t\t\t// Reverse the array to so that the calls to `replace` below will do this\n\t\t\tresults.reverse();\n\n\t\t\tfor (const result of results) {\n\t\t\t\tfor (const [mime, value] of result) {\n\t\t\t\t\tdataTransfer.replace(mime, value);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn dataTransfer;\n\t\t});\n\n\t\tthis._currentCopyOperation?.dataTransferPromise.cancel();\n\t\tthis._currentCopyOperation = { handle: handle, dataTransferPromise: promise };\n\t}\n\n\tprivate async handlePaste(e: ClipboardEvent) {\n\t\tif (!e.clipboardData || !this._editor.hasTextFocus()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._currentPasteOperation?.cancel();\n\t\tthis._currentPasteOperation = undefined;\n\n\t\tconst model = this._editor.getModel();\n\t\tconst selections = this._editor.getSelections();\n\t\tif (!selections?.length || !model) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.isPasteAsEnabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst metadata = this.fetchCopyMetadata(e);\n\t\tconst dataTransfer = toExternalVSDataTransfer(e.clipboardData);\n\t\tdataTransfer.delete(vscodeClipboardMime);\n\n\t\tconst allPotentialMimeTypes = [\n\t\t\t...e.clipboardData.types,\n\t\t\t...metadata?.providerCopyMimeTypes ?? [],\n\t\t\t// TODO: always adds `uri-list` because this get set if there are resources in the system clipboard.\n\t\t\t// However we can only check the system clipboard async. For this early check, just add it in.\n\t\t\t// We filter providers again once we have the final dataTransfer we will use.\n\t\t\tMimes.uriList,\n\t\t];\n\n\t\tconst allProviders = this._languageFeaturesService.documentPasteEditProvider\n\t\t\t.ordered(model)\n\t\t\t.filter(provider => provider.pasteMimeTypes?.some(type => matchesMimeType(type, allPotentialMimeTypes)));\n\t\tif (!allProviders.length) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Prevent the editor's default paste handler from running.\n\t\t// Note that after this point, we are fully responsible for handling paste.\n\t\t// If we can't provider a paste for any reason, we need to explicitly delegate pasting back to the editor.\n\t\te.preventDefault();\n\t\te.stopImmediatePropagation();\n\n\t\tif (this._pasteAsActionContext) {\n\t\t\tthis.showPasteAsPick(this._pasteAsActionContext.preferredId, allProviders, selections, dataTransfer, metadata);\n\t\t} else {\n\t\t\tthis.doPasteInline(allProviders, selections, dataTransfer, metadata);\n\t\t}\n\t}\n\n\tprivate doPasteInline(allProviders: readonly DocumentPasteEditProvider[], selections: readonly Selection[], dataTransfer: VSDataTransfer, metadata: CopyMetadata | undefined): void {\n\t\tconst p = createCancelablePromise(async (token) => {\n\t\t\tconst editor = this._editor;\n\t\t\tif (!editor.hasModel()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst model = editor.getModel();\n\n\t\t\tconst tokenSource = new EditorStateCancellationTokenSource(editor, CodeEditorStateFlag.Value | CodeEditorStateFlag.Selection, undefined, token);\n\t\t\ttry {\n\t\t\t\tawait this.mergeInDataFromCopy(dataTransfer, metadata, tokenSource.token);\n\t\t\t\tif (tokenSource.token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Filter out any providers the don't match the full data transfer we will send them.\n\t\t\t\tconst supportedProviders = allProviders.filter(provider => isSupportedPasteProvider(provider, dataTransfer));\n\t\t\t\tif (!supportedProviders.length\n\t\t\t\t\t|| (supportedProviders.length === 1 && supportedProviders[0].id === 'text') // Only our default text provider is active\n\t\t\t\t) {\n\t\t\t\t\tawait this.applyDefaultPasteHandler(dataTransfer, metadata, tokenSource.token);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst providerEdits = await this.getPasteEdits(supportedProviders, dataTransfer, model, selections, tokenSource.token);\n\t\t\t\tif (tokenSource.token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// If the only edit returned is a text edit, use the default paste handler\n\t\t\t\tif (providerEdits.length === 1 && providerEdits[0].providerId === 'text') {\n\t\t\t\t\tawait this.applyDefaultPasteHandler(dataTransfer, metadata, tokenSource.token);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (providerEdits.length) {\n\t\t\t\t\tconst canShowWidget = editor.getOption(EditorOption.pasteAs).showPasteSelector === 'afterPaste';\n\t\t\t\t\treturn this._postPasteWidgetManager.applyEditAndShowIfNeeded(selections, { activeEditIndex: 0, allEdits: providerEdits }, canShowWidget, tokenSource.token);\n\t\t\t\t}\n\n\t\t\t\tawait this.applyDefaultPasteHandler(dataTransfer, metadata, tokenSource.token);\n\t\t\t} finally {\n\t\t\t\ttokenSource.dispose();\n\t\t\t\tif (this._currentPasteOperation === p) {\n\t\t\t\t\tthis._currentPasteOperation = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis._pasteProgressManager.showWhile(selections[0].getEndPosition(), localize('pasteIntoEditorProgress', \"Running paste handlers. Click to cancel\"), p);\n\t\tthis._currentPasteOperation = p;\n\t}\n\n\tprivate showPasteAsPick(preferredId: string | undefined, allProviders: readonly DocumentPasteEditProvider[], selections: readonly Selection[], dataTransfer: VSDataTransfer, metadata: CopyMetadata | undefined): void {\n\t\tconst p = createCancelablePromise(async (token) => {\n\t\t\tconst editor = this._editor;\n\t\t\tif (!editor.hasModel()) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst model = editor.getModel();\n\n\t\t\tconst tokenSource = new EditorStateCancellationTokenSource(editor, CodeEditorStateFlag.Value | CodeEditorStateFlag.Selection, undefined, token);\n\t\t\ttry {\n\t\t\t\tawait this.mergeInDataFromCopy(dataTransfer, metadata, tokenSource.token);\n\t\t\t\tif (tokenSource.token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Filter out any providers the don't match the full data transfer we will send them.\n\t\t\t\tlet supportedProviders = allProviders.filter(provider => isSupportedPasteProvider(provider, dataTransfer));\n\t\t\t\tif (preferredId) {\n\t\t\t\t\t// We are looking for a specific edit\n\t\t\t\t\tsupportedProviders = supportedProviders.filter(edit => edit.id === preferredId);\n\t\t\t\t}\n\n\t\t\t\tconst providerEdits = await this.getPasteEdits(supportedProviders, dataTransfer, model, selections, tokenSource.token);\n\t\t\t\tif (tokenSource.token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!providerEdits.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet pickedEdit: DocumentPasteEdit | undefined;\n\t\t\t\tif (preferredId) {\n\t\t\t\t\tpickedEdit = providerEdits.at(0);\n\t\t\t\t} else {\n\t\t\t\t\tconst selected = await this._quickInputService.pick(\n\t\t\t\t\t\tproviderEdits.map((edit): IQuickPickItem & { edit: DocumentPasteEdit } => ({\n\t\t\t\t\t\t\tlabel: edit.label,\n\t\t\t\t\t\t\tdescription: edit.providerId,\n\t\t\t\t\t\t\tdetail: edit.detail,\n\t\t\t\t\t\t\tedit,\n\t\t\t\t\t\t})), {\n\t\t\t\t\t\tplaceHolder: localize('pasteAsPickerPlaceholder', \"Select Paste Action\"),\n\t\t\t\t\t});\n\t\t\t\t\tpickedEdit = selected?.edit;\n\t\t\t\t}\n\n\t\t\t\tif (!pickedEdit) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst combinedWorkspaceEdit = createCombinedWorkspaceEdit(model.uri, selections, pickedEdit);\n\t\t\t\tawait this._bulkEditService.apply(combinedWorkspaceEdit, { editor: this._editor });\n\t\t\t} finally {\n\t\t\t\ttokenSource.dispose();\n\t\t\t\tif (this._currentPasteOperation === p) {\n\t\t\t\t\tthis._currentPasteOperation = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis._progressService.withProgress({\n\t\t\tlocation: ProgressLocation.Window,\n\t\t\ttitle: localize('pasteAsProgress', \"Running paste handlers\"),\n\t\t}, () => p);\n\t}\n\n\n\tprivate setCopyMetadata(dataTransfer: DataTransfer, metadata: CopyMetadata) {\n\t\tdataTransfer.setData(vscodeClipboardMime, JSON.stringify(metadata));\n\t}\n\n\tprivate fetchCopyMetadata(e: ClipboardEvent): CopyMetadata | undefined {\n\t\tif (!e.clipboardData) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Prefer using the clipboard data we saved off\n\t\tconst rawMetadata = e.clipboardData.getData(vscodeClipboardMime);\n\t\tif (rawMetadata) {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(rawMetadata);\n\t\t\t} catch {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\t// Otherwise try to extract the generic text editor metadata\n\t\tconst [_, metadata] = ClipboardEventUtils.getTextData(e.clipboardData);\n\t\tif (metadata) {\n\t\t\treturn {\n\t\t\t\tdefaultPastePayload: {\n\t\t\t\t\tmode: metadata.mode,\n\t\t\t\t\tmulticursorText: metadata.multicursorText ?? null,\n\t\t\t\t\tpasteOnNewLine: !!metadata.isFromEmptySelection,\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate async mergeInDataFromCopy(dataTransfer: VSDataTransfer, metadata: CopyMetadata | undefined, token: CancellationToken): Promise<void> {\n\t\tif (metadata?.id && this._currentCopyOperation?.handle === metadata.id) {\n\t\t\tconst toMergeDataTransfer = await this._currentCopyOperation.dataTransferPromise;\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const [key, value] of toMergeDataTransfer) {\n\t\t\t\tdataTransfer.replace(key, value);\n\t\t\t}\n\t\t}\n\n\t\tif (!dataTransfer.has(Mimes.uriList)) {\n\t\t\tconst resources = await this._clipboardService.readResources();\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (resources.length) {\n\t\t\t\tdataTransfer.append(Mimes.uriList, createStringDataTransferItem(UriList.create(resources)));\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async getPasteEdits(providers: readonly DocumentPasteEditProvider[], dataTransfer: VSDataTransfer, model: ITextModel, selections: readonly Selection[], token: CancellationToken): Promise<Array<DocumentPasteEdit & { providerId: string }>> {\n\t\tconst results = await raceCancellation(\n\t\t\tPromise.all(providers.map(async provider => {\n\t\t\t\ttry {\n\t\t\t\t\tconst edit = await provider.provideDocumentPasteEdits?.(model, selections, dataTransfer, token);\n\t\t\t\t\tif (edit) {\n\t\t\t\t\t\treturn { ...edit, providerId: provider.id };\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t})),\n\t\t\ttoken);\n\t\tconst edits = coalesce(results ?? []);\n\t\tsortEditsByYieldTo(edits);\n\t\treturn edits;\n\t}\n\n\tprivate async applyDefaultPasteHandler(dataTransfer: VSDataTransfer, metadata: CopyMetadata | undefined, token: CancellationToken) {\n\t\tconst textDataTransfer = dataTransfer.get(Mimes.text) ?? dataTransfer.get('text');\n\t\tif (!textDataTransfer) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst text = await textDataTransfer.asString();\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst payload: PastePayload = {\n\t\t\ttext,\n\t\t\tpasteOnNewLine: metadata?.defaultPastePayload.pasteOnNewLine ?? false,\n\t\t\tmulticursorText: metadata?.defaultPastePayload.multicursorText ?? null,\n\t\t\tmode: null,\n\t\t};\n\t\tthis._editor.trigger('keyboard', Handler.Paste, payload);\n\t}\n}\n\nfunction isSupportedPasteProvider(provider: DocumentPasteEditProvider, dataTransfer: VSDataTransfer): boolean {\n\treturn Boolean(provider.pasteMimeTypes?.some(type => dataTransfer.matches(type)));\n}\n"]}