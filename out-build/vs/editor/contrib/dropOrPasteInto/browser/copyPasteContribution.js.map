{"version":3,"sources":["vs/editor/contrib/dropOrPasteInto/browser/copyPasteContribution.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAWhG,IAAA,sBAAG,EAAwB,yBAAG,CAAiB,EAAE,EAAE,yBAAG,gDAAwD,CAAC,CAAC,6EAA6E;IAE7L,IAAA,oBAAG,EAAmB,sBAAG,CAA0B,CAAC;IAEpD,IAAA,sBAAG,EAAmB,IAAI,KAAM,SAAQ,sBAAG;QAC1C;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,yBAAG;gBACP,YAAY,EAAE,yBAAG;gBACjB,MAAM,EAAE;oBACP,MAAM,0CAAgC;oBACtC,OAAO,EAAE,mDAA+B;iBACxC;aACD,CAAC,CAAC;QACJ,CAAC;QAEe,gBAAgB,CAAC,SAAkC,EAAE,MAAmB,EAAE,KAAU;YACnG,OAAO,yBAAG,CAAiB,GAAG,CAAC,MAAM,CAAC,EAAE,eAAe,EAAE,CAAC;QAC3D,CAAC;KACD,CAAC,CAAC;IAEH,IAAA,sBAAG,EAAkB,KAAM,SAAQ,sBAAG;QACrC;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,uBAAuB;gBAC3B,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAS,EAAE,IAAa,CAAC;gBAC7C,KAAK,EAAE,aAAa;gBACpB,YAAY,EAAE,SAAS;gBACvB,WAAW,EAAE;oBACZ,WAAW,EAAE,UAAU;oBACvB,IAAI,EAAE,CAAC;4BACN,IAAI,EAAE,MAAM;4BACZ,MAAM,EAAE;gCACP,IAAI,EAAE,QAAQ;gCACd,UAAU,EAAE;oCACX,IAAI,EAAE;wCACL,IAAI,EAAE,QAAQ;wCACd,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAY,EAAE,IAA2F,CAAC;qCACpI;iCACD;6BACD;yBACD,CAAC;iBACF;aACD,CAAC,CAAC;QACJ,CAAC;QAEe,GAAG,CAAC,SAA2B,EAAE,MAAmB,EAAE,IAAS;YAC9E,MAAM,EAAE,GAAG,OAAO,IAAI,EAAE,EAAE,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;YAC9D,OAAO,yBAAG,CAAiB,GAAG,CAAC,MAAM,CAAC,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;QACrD,CAAC;KACD,CAAC,CAAC","file":"copyPasteContribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, EditorCommand, EditorContributionInstantiation, ServicesAccessor, registerEditorAction, registerEditorCommand, registerEditorContribution } from 'vs/editor/browser/editorExtensions';\nimport { registerEditorFeature } from 'vs/editor/common/editorFeatures';\nimport { CopyPasteController, changePasteTypeCommandId, pasteWidgetVisibleCtx } from 'vs/editor/contrib/dropOrPasteInto/browser/copyPasteController';\nimport { DefaultPasteProvidersFeature } from 'vs/editor/contrib/dropOrPasteInto/browser/defaultProviders';\nimport * as nls from 'vs/nls';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\n\nregisterEditorContribution(CopyPasteController.ID, CopyPasteController, EditorContributionInstantiation.Eager); // eager because it listens to events on the container dom node of the editor\n\nregisterEditorFeature(DefaultPasteProvidersFeature);\n\nregisterEditorCommand(new class extends EditorCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: changePasteTypeCommandId,\n\t\t\tprecondition: pasteWidgetVisibleCtx,\n\t\t\tkbOpts: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Period,\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic override runEditorCommand(_accessor: ServicesAccessor | null, editor: ICodeEditor, _args: any) {\n\t\treturn CopyPasteController.get(editor)?.changePasteType();\n\t}\n});\n\nregisterEditorAction(class extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.pasteAs',\n\t\t\tlabel: nls.localize('pasteAs', \"Paste As...\"),\n\t\t\talias: 'Paste As...',\n\t\t\tprecondition: undefined,\n\t\t\tdescription: {\n\t\t\t\tdescription: 'Paste as',\n\t\t\t\targs: [{\n\t\t\t\t\tname: 'args',\n\t\t\t\t\tschema: {\n\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t'id': {\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdescription: nls.localize('pasteAs.id', \"The id of the paste edit to try applying. If not provided, the editor will show a picker.\"),\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic override run(_accessor: ServicesAccessor, editor: ICodeEditor, args: any) {\n\t\tconst id = typeof args?.id === 'string' ? args.id : undefined;\n\t\treturn CopyPasteController.get(editor)?.pasteAs(id);\n\t}\n});\n"]}