{"version":3,"sources":["vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorContribution.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAchG,IAAA,sBAAG,EAAwB,8BAAG,CAAsB,EAAE,EAAE,8BAAG,iEAA8E,CAAC;IAE1I,IAAA,sBAAG,EAAmB,IAAI,KAAM,SAAQ,sBAAG;QAC1C;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,8BAAG;gBACP,YAAY,EAAE,8BAAG;gBACjB,MAAM,EAAE;oBACP,MAAM,0CAAgC;oBACtC,OAAO,EAAE,mDAA+B;iBACxC;aACD,CAAC,CAAC;QACJ,CAAC;QAEe,gBAAgB,CAAC,SAAkC,EAAE,MAAmB,EAAE,KAAU;YACnG,8BAAG,CAAsB,GAAG,CAAC,MAAM,CAAC,EAAE,cAAc,EAAE,CAAC;QACxD,CAAC;KACD,CAAC,CAAC;IAEH,IAAA,oBAAG,EAAmB,sBAAG,CAAyB,CAAC;IAEnD,cAAG,CAAM,EAAE,CAAyB,2BAAuB,CAAC,aAAa,CAAC,CAAC,qBAAqB,CAAC;QAChG,GAAG,+BAAG;QACN,UAAU,EAAE;YACX,CAAC,8BAAG,CAAmB,EAAE;gBACxB,IAAI,EAAE,QAAQ;gBACd,KAAK,iDAAyC;gBAC9C,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAA4B,EAAE,IAA+E,CAAC;gBACxI,OAAO,EAAE,EAAE;gBACX,oBAAoB,EAAE;oBACrB,IAAI,EAAE,QAAQ;iBACd;aACD;SACD;KACD,CAAC,CAAC","file":"dropIntoEditorContribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorCommand, EditorContributionInstantiation, ServicesAccessor, registerEditorCommand, registerEditorContribution } from 'vs/editor/browser/editorExtensions';\nimport { editorConfigurationBaseNode } from 'vs/editor/common/config/editorConfigurationSchema';\nimport { registerEditorFeature } from 'vs/editor/common/editorFeatures';\nimport { DefaultDropProvidersFeature } from 'vs/editor/contrib/dropOrPasteInto/browser/defaultProviders';\nimport * as nls from 'vs/nls';\nimport { Extensions as ConfigurationExtensions, ConfigurationScope, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { DropIntoEditorController, changeDropTypeCommandId, defaultProviderConfig, dropWidgetVisibleCtx } from './dropIntoEditorController';\n\nregisterEditorContribution(DropIntoEditorController.ID, DropIntoEditorController, EditorContributionInstantiation.BeforeFirstInteraction);\n\nregisterEditorCommand(new class extends EditorCommand {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: changeDropTypeCommandId,\n\t\t\tprecondition: dropWidgetVisibleCtx,\n\t\t\tkbOpts: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Period,\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic override runEditorCommand(_accessor: ServicesAccessor | null, editor: ICodeEditor, _args: any) {\n\t\tDropIntoEditorController.get(editor)?.changeDropType();\n\t}\n});\n\nregisterEditorFeature(DefaultDropProvidersFeature);\n\nRegistry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration).registerConfiguration({\n\t...editorConfigurationBaseNode,\n\tproperties: {\n\t\t[defaultProviderConfig]: {\n\t\t\ttype: 'object',\n\t\t\tscope: ConfigurationScope.LANGUAGE_OVERRIDABLE,\n\t\t\tdescription: nls.localize('defaultProviderDescription', \"Configures the default drop provider to use for content of a given mime type.\"),\n\t\t\tdefault: {},\n\t\t\tadditionalProperties: {\n\t\t\t\ttype: 'string',\n\t\t\t},\n\t\t},\n\t}\n});\n"]}