{"version":3,"sources":["vs/editor/contrib/dropOrPasteInto/browser/dropIntoEditorController.ts"],"names":[],"mappings":"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","file":"dropIntoEditorController.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce } from 'vs/base/common/arrays';\nimport { CancelablePromise, createCancelablePromise, raceCancellation } from 'vs/base/common/async';\nimport { VSDataTransfer, matchesMimeType } from 'vs/base/common/dataTransfer';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { toExternalVSDataTransfer } from 'vs/editor/browser/dnd';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorOption } from 'vs/editor/common/config/editorOptions';\nimport { IPosition } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { DocumentOnDropEdit, DocumentOnDropEditProvider } from 'vs/editor/common/languages';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { ILanguageFeaturesService } from 'vs/editor/common/services/languageFeatures';\nimport { DraggedTreeItemsIdentifier } from 'vs/editor/common/services/treeViewsDnd';\nimport { ITreeViewsDnDService } from 'vs/editor/common/services/treeViewsDndService';\nimport { CodeEditorStateFlag, EditorStateCancellationTokenSource } from 'vs/editor/contrib/editorState/browser/editorState';\nimport { InlineProgressManager } from 'vs/editor/contrib/inlineProgress/browser/inlineProgress';\nimport { localize } from 'vs/nls';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { LocalSelectionTransfer } from 'vs/platform/dnd/browser/dnd';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { sortEditsByYieldTo } from './edit';\nimport { PostEditWidgetManager } from './postEditWidget';\n\nexport const defaultProviderConfig = 'editor.experimental.dropIntoEditor.defaultProvider';\n\nexport const changeDropTypeCommandId = 'editor.changeDropType';\n\nexport const dropWidgetVisibleCtx = new RawContextKey<boolean>('dropWidgetVisible', false, localize('dropWidgetVisible', \"Whether the drop widget is showing\"));\n\nexport class DropIntoEditorController extends Disposable implements IEditorContribution {\n\n\tpublic static readonly ID = 'editor.contrib.dropIntoEditorController';\n\n\tpublic static get(editor: ICodeEditor): DropIntoEditorController | null {\n\t\treturn editor.getContribution<DropIntoEditorController>(DropIntoEditorController.ID);\n\t}\n\n\tprivate _currentOperation?: CancelablePromise<void>;\n\n\tprivate readonly _dropProgressManager: InlineProgressManager;\n\tprivate readonly _postDropWidgetManager: PostEditWidgetManager;\n\n\tprivate readonly treeItemsTransfer = LocalSelectionTransfer.getInstance<DraggedTreeItemsIdentifier>();\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IConfigurationService private readonly _configService: IConfigurationService,\n\t\t@ILanguageFeaturesService private readonly _languageFeaturesService: ILanguageFeaturesService,\n\t\t@ITreeViewsDnDService private readonly _treeViewsDragAndDropService: ITreeViewsDnDService\n\t) {\n\t\tsuper();\n\n\t\tthis._dropProgressManager = this._register(instantiationService.createInstance(InlineProgressManager, 'dropIntoEditor', editor));\n\t\tthis._postDropWidgetManager = this._register(instantiationService.createInstance(PostEditWidgetManager, 'dropIntoEditor', editor, dropWidgetVisibleCtx, { id: changeDropTypeCommandId, label: localize('postDropWidgetTitle', \"Show drop options...\") }));\n\n\t\tthis._register(editor.onDropIntoEditor(e => this.onDropIntoEditor(editor, e.position, e.event)));\n\t}\n\n\tpublic clearWidgets() {\n\t\tthis._postDropWidgetManager.clear();\n\t}\n\n\tpublic changeDropType() {\n\t\tthis._postDropWidgetManager.tryShowSelector();\n\t}\n\n\tprivate async onDropIntoEditor(editor: ICodeEditor, position: IPosition, dragEvent: DragEvent) {\n\t\tif (!dragEvent.dataTransfer || !editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._currentOperation?.cancel();\n\n\t\teditor.focus();\n\t\teditor.setPosition(position);\n\n\t\tconst p = createCancelablePromise(async (token) => {\n\t\t\tconst tokenSource = new EditorStateCancellationTokenSource(editor, CodeEditorStateFlag.Value, undefined, token);\n\n\t\t\ttry {\n\t\t\t\tconst ourDataTransfer = await this.extractDataTransferData(dragEvent);\n\t\t\t\tif (ourDataTransfer.size === 0 || tokenSource.token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst model = editor.getModel();\n\t\t\t\tif (!model) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst providers = this._languageFeaturesService.documentOnDropEditProvider\n\t\t\t\t\t.ordered(model)\n\t\t\t\t\t.filter(provider => {\n\t\t\t\t\t\tif (!provider.dropMimeTypes) {\n\t\t\t\t\t\t\t// Keep all providers that don't specify mime types\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn provider.dropMimeTypes.some(mime => ourDataTransfer.matches(mime));\n\t\t\t\t\t});\n\n\t\t\t\tconst edits = await this.getDropEdits(providers, model, position, ourDataTransfer, tokenSource);\n\t\t\t\tif (tokenSource.token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (edits.length) {\n\t\t\t\t\tconst activeEditIndex = this.getInitialActiveEditIndex(model, edits);\n\t\t\t\t\tconst canShowWidget = editor.getOption(EditorOption.dropIntoEditor).showDropSelector === 'afterDrop';\n\t\t\t\t\t// Pass in the parent token here as it tracks cancelling the entire drop operation\n\t\t\t\t\tawait this._postDropWidgetManager.applyEditAndShowIfNeeded([Range.fromPositions(position)], { activeEditIndex, allEdits: edits }, canShowWidget, token);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\ttokenSource.dispose();\n\t\t\t\tif (this._currentOperation === p) {\n\t\t\t\t\tthis._currentOperation = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis._dropProgressManager.showWhile(position, localize('dropIntoEditorProgress', \"Running drop handlers. Click to cancel\"), p);\n\t\tthis._currentOperation = p;\n\t}\n\n\tprivate async getDropEdits(providers: readonly DocumentOnDropEditProvider[], model: ITextModel, position: IPosition, dataTransfer: VSDataTransfer, tokenSource: EditorStateCancellationTokenSource) {\n\t\tconst results = await raceCancellation(Promise.all(providers.map(async provider => {\n\t\t\ttry {\n\t\t\t\tconst edit = await provider.provideDocumentOnDropEdits(model, position, dataTransfer, tokenSource.token);\n\t\t\t\tif (edit) {\n\t\t\t\t\treturn { ...edit, providerId: provider.id };\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tconsole.error(err);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t})), tokenSource.token);\n\n\t\tconst edits = coalesce(results ?? []);\n\t\treturn sortEditsByYieldTo(edits);\n\t}\n\n\tprivate getInitialActiveEditIndex(model: ITextModel, edits: ReadonlyArray<DocumentOnDropEdit & { readonly providerId?: string }>) {\n\t\tconst preferredProviders = this._configService.getValue<Record<string, string>>(defaultProviderConfig, { resource: model.uri });\n\t\tfor (const [configMime, desiredId] of Object.entries(preferredProviders)) {\n\t\t\tconst editIndex = edits.findIndex(edit =>\n\t\t\t\tdesiredId === edit.providerId\n\t\t\t\t&& edit.handledMimeType && matchesMimeType(configMime, [edit.handledMimeType]));\n\t\t\tif (editIndex >= 0) {\n\t\t\t\treturn editIndex;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\tprivate async extractDataTransferData(dragEvent: DragEvent): Promise<VSDataTransfer> {\n\t\tif (!dragEvent.dataTransfer) {\n\t\t\treturn new VSDataTransfer();\n\t\t}\n\n\t\tconst dataTransfer = toExternalVSDataTransfer(dragEvent.dataTransfer);\n\n\t\tif (this.treeItemsTransfer.hasData(DraggedTreeItemsIdentifier.prototype)) {\n\t\t\tconst data = this.treeItemsTransfer.getData(DraggedTreeItemsIdentifier.prototype);\n\t\t\tif (Array.isArray(data)) {\n\t\t\t\tfor (const id of data) {\n\t\t\t\t\tconst treeDataTransfer = await this._treeViewsDragAndDropService.removeDragOperationTransfer(id.identifier);\n\t\t\t\t\tif (treeDataTransfer) {\n\t\t\t\t\t\tfor (const [type, value] of treeDataTransfer) {\n\t\t\t\t\t\t\tdataTransfer.replace(type, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn dataTransfer;\n\t}\n}\n"]}