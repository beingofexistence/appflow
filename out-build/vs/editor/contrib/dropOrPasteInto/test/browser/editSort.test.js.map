{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/dropOrPasteInto/test/browser/editSort.test.ts"],"names":[],"mappings":";;;IAUA,SAAS,cAAc,CAAC,UAAkB,EAAE,IAAwB;QACnE,OAAO;YACN,KAAK,EAAE,EAAE;YACT,UAAU,EAAE,EAAE;YACd,UAAU;YACV,GAAG,IAAI;SACP,CAAC;IACH,CAAC;IAED,KAAK,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAChC,IAAI,CAAC,6BAA6B,EAAE,GAAG,EAAE;YACxC,MAAM,KAAK,GAAe,EAAE,CAAC;YAE7B,MAAM,CAAC,eAAe,CAAC,IAAA,UAAG,EAAgB,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gDAAgD,EAAE,GAAG,EAAE;YAC3D,MAAM,KAAK,GAAe;gBACzB,cAAc,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC;gBACvD,cAAc,CAAC,GAAG,CAAC;aACnB,CAAC;YACF,MAAM,CAAC,eAAe,CAAC,IAAA,UAAG,EAAgB,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;QACtF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iCAAiC,EAAE,GAAG,EAAE;YAC5C;gBACC,MAAM,KAAK,GAAe;oBACzB,cAAc,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC;oBACvD,cAAc,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC;oBACvD,cAAc,CAAC,GAAG,CAAC;iBACnB,CAAC;gBAEF,MAAM,CAAC,eAAe,CAAC,IAAA,UAAG,EAAgB,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;aAC1F;YACD;gBACC,MAAM,KAAK,GAAe;oBACzB,cAAc,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC;oBACvD,cAAc,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC;oBACvD,cAAc,CAAC,GAAG,CAAC;iBACnB,CAAC;gBAEF,MAAM,CAAC,eAAe,CAAC,IAAA,UAAG,EAAgB,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;aAC1F;QACF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACxD,MAAM,KAAK,GAAe;gBACzB,cAAc,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC;gBACvD,cAAc,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC;gBACvD,cAAc,CAAC,GAAG,CAAC;aACnB,CAAC;YAEF,MAAM,CAAC,eAAe,CAAC,IAAA,UAAG,EAAgB,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;QAC3F,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"editSort.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as assert from 'assert';\nimport { DocumentOnDropEdit } from 'vs/editor/common/languages';\nimport { sortEditsByYieldTo } from 'vs/editor/contrib/dropOrPasteInto/browser/edit';\n\ntype DropEdit = DocumentOnDropEdit & { providerId: string | undefined };\n\nfunction createTestEdit(providerId: string, args?: Partial<DropEdit>): DropEdit {\n\treturn {\n\t\tlabel: '',\n\t\tinsertText: '',\n\t\tproviderId,\n\t\t...args,\n\t};\n}\n\nsuite('sortEditsByYieldTo', () => {\n\ttest('Should noop for empty edits', () => {\n\t\tconst edits: DropEdit[] = [];\n\n\t\tassert.deepStrictEqual(sortEditsByYieldTo(edits), []);\n\t});\n\n\ttest('Yielded to edit should get sorted after target', () => {\n\t\tconst edits: DropEdit[] = [\n\t\t\tcreateTestEdit('a', { yieldTo: [{ providerId: 'b' }] }),\n\t\t\tcreateTestEdit('b'),\n\t\t];\n\t\tassert.deepStrictEqual(sortEditsByYieldTo(edits).map(x => x.providerId), ['b', 'a']);\n\t});\n\n\ttest('Should handle chain of yield to', () => {\n\t\t{\n\t\t\tconst edits: DropEdit[] = [\n\t\t\t\tcreateTestEdit('c', { yieldTo: [{ providerId: 'a' }] }),\n\t\t\t\tcreateTestEdit('a', { yieldTo: [{ providerId: 'b' }] }),\n\t\t\t\tcreateTestEdit('b'),\n\t\t\t];\n\n\t\t\tassert.deepStrictEqual(sortEditsByYieldTo(edits).map(x => x.providerId), ['b', 'a', 'c']);\n\t\t}\n\t\t{\n\t\t\tconst edits: DropEdit[] = [\n\t\t\t\tcreateTestEdit('a', { yieldTo: [{ providerId: 'b' }] }),\n\t\t\t\tcreateTestEdit('c', { yieldTo: [{ providerId: 'a' }] }),\n\t\t\t\tcreateTestEdit('b'),\n\t\t\t];\n\n\t\t\tassert.deepStrictEqual(sortEditsByYieldTo(edits).map(x => x.providerId), ['b', 'a', 'c']);\n\t\t}\n\t});\n\n\ttest(`Should not reorder when yield to isn't used`, () => {\n\t\tconst edits: DropEdit[] = [\n\t\t\tcreateTestEdit('c', { yieldTo: [{ providerId: 'x' }] }),\n\t\t\tcreateTestEdit('a', { yieldTo: [{ providerId: 'y' }] }),\n\t\t\tcreateTestEdit('b'),\n\t\t];\n\n\t\tassert.deepStrictEqual(sortEditsByYieldTo(edits).map(x => x.providerId), ['c', 'a', 'b']);\n\t});\n});\n"]}