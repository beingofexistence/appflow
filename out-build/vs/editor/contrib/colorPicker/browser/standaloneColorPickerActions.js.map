{"version":3,"sources":["vs/editor/contrib/colorPicker/browser/standaloneColorPickerActions.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAYhG,MAAa,GAAiC,SAAQ,sBAAG;QACxD;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,gDAAgD;gBACpD,KAAK,EAAE;oBACN,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAkC,EAAE,IAAuC,CAAC;oBAC5F,aAAa,EAAE,IAAA,cAAQ,EAAC,CAAiF,CAA/E,CAAiF,EAA9E,EAAE,AAAqH,CAAC,mCAAlF,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC;oBACvG,QAAQ,EAAE,uCAAuC;iBACjD;gBACD,YAAY,EAAE,SAAS;gBACvB,IAAI,EAAE;oBACL,EAAE,EAAE,EAAE,aAAG,CAAI,cAAc,EAAE;iBAC7B;aACD,CAAC,CAAC;QACJ,CAAC;QACD,gBAAgB,CAAC,SAA2B,EAAE,MAAmB;YAChE,iCAAG,CAA6B,GAAG,CAAC,MAAM,CAAC,EAAE,WAAW,EAAE,CAAC;QAC5D,CAAC;KACD;IAlBD,kBAkBC;IAED,MAAM,yBAA0B,SAAQ,sBAAG;QAC1C;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,+BAA+B;gBACnC,KAAK,EAAE,IAAA,cAAQ,EAAC;oBACf,GAAG,EAAE,iBAAiB;oBACtB,OAAO,EAAE;wBACR,oCAAoC;qBACpC;4CACD,EAAE,IAAuB,CAAC;gBAC3B,KAAK,EAAE,uBAAuB;gBAC9B,YAAY,EAAE,qCAAiB,CAAC,4BAA4B,CAAC,SAAS,CAAC,IAAI,CAAC;gBAC5E,MAAM,EAAE;oBACP,OAAO,wBAAgB;oBACvB,MAAM,0CAAgC;iBACtC;aACD,CAAC,CAAC;QACJ,CAAC;QACM,GAAG,CAAC,SAA2B,EAAE,MAAmB;YAC1D,iCAAG,CAA6B,GAAG,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,CAAC;QACrD,CAAC;KACD;IAED,MAAM,oCAAqC,SAAQ,sBAAG;QACrD;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,oDAAoD;gBACxD,KAAK,EAAE,IAAA,cAAQ,EAAC;oBACf,GAAG,EAAE,sCAAsC;oBAC3C,OAAO,EAAE;wBACR,wDAAwD;qBACxD;4CACD,EAAE,IAA2C,CAAC;gBAC/C,KAAK,EAAE,2CAA2C;gBAClD,YAAY,EAAE,qCAAiB,CAAC,4BAA4B,CAAC,SAAS,CAAC,IAAI,CAAC;gBAC5E,MAAM,EAAE;oBACP,OAAO,uBAAe;oBACtB,MAAM,0CAAgC;iBACtC;aACD,CAAC,CAAC;QACJ,CAAC;QACM,GAAG,CAAC,SAA2B,EAAE,MAAmB;YAC1D,iCAAG,CAA6B,GAAG,CAAC,MAAM,CAAC,EAAE,WAAW,EAAE,CAAC;QAC5D,CAAC;KACD;IAED,IAAA,sBAAG,EAAkB,yBAAyB,CAAC,CAAC;IAChD,IAAA,sBAAG,EAAkB,oCAAoC,CAAC,CAAC;IAC3D,IAAA,aAAG,EAAa,GAAG,CAA8B,CAAC","file":"standaloneColorPickerActions.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, EditorAction2, ServicesAccessor, registerEditorAction } from 'vs/editor/browser/editorExtensions';\nimport { KeyCode } from 'vs/base/common/keyCodes';\nimport { localize } from 'vs/nls';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { StandaloneColorPickerController } from 'vs/editor/contrib/colorPicker/browser/standaloneColorPickerWidget';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { MenuId, registerAction2 } from 'vs/platform/actions/common/actions';\nimport 'vs/css!./colorPicker';\n\nexport class ShowOrFocusStandaloneColorPicker extends EditorAction2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.showOrFocusStandaloneColorPicker',\n\t\t\ttitle: {\n\t\t\t\tvalue: localize('showOrFocusStandaloneColorPicker', \"Show or Focus Standalone Color Picker\"),\n\t\t\t\tmnemonicTitle: localize({ key: 'mishowOrFocusStandaloneColorPicker', comment: ['&& denotes a mnemonic'] }, \"&&Show or Focus Standalone Color Picker\"),\n\t\t\t\toriginal: 'Show or Focus Standalone Color Picker',\n\t\t\t},\n\t\t\tprecondition: undefined,\n\t\t\tmenu: [\n\t\t\t\t{ id: MenuId.CommandPalette },\n\t\t\t]\n\t\t});\n\t}\n\trunEditorCommand(_accessor: ServicesAccessor, editor: ICodeEditor) {\n\t\tStandaloneColorPickerController.get(editor)?.showOrFocus();\n\t}\n}\n\nclass HideStandaloneColorPicker extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.hideColorPicker',\n\t\t\tlabel: localize({\n\t\t\t\tkey: 'hideColorPicker',\n\t\t\t\tcomment: [\n\t\t\t\t\t'Action that hides the color picker'\n\t\t\t\t]\n\t\t\t}, \"Hide the Color Picker\"),\n\t\t\talias: 'Hide the Color Picker',\n\t\t\tprecondition: EditorContextKeys.standaloneColorPickerVisible.isEqualTo(true),\n\t\t\tkbOpts: {\n\t\t\t\tprimary: KeyCode.Escape,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tStandaloneColorPickerController.get(editor)?.hide();\n\t}\n}\n\nclass InsertColorWithStandaloneColorPicker extends EditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.insertColorWithStandaloneColorPicker',\n\t\t\tlabel: localize({\n\t\t\t\tkey: 'insertColorWithStandaloneColorPicker',\n\t\t\t\tcomment: [\n\t\t\t\t\t'Action that inserts color with standalone color picker'\n\t\t\t\t]\n\t\t\t}, \"Insert Color with Standalone Color Picker\"),\n\t\t\talias: 'Insert Color with Standalone Color Picker',\n\t\t\tprecondition: EditorContextKeys.standaloneColorPickerFocused.isEqualTo(true),\n\t\t\tkbOpts: {\n\t\t\t\tprimary: KeyCode.Enter,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tStandaloneColorPickerController.get(editor)?.insertColor();\n\t}\n}\n\nregisterEditorAction(HideStandaloneColorPicker);\nregisterEditorAction(InsertColorWithStandaloneColorPicker);\nregisterAction2(ShowOrFocusStandaloneColorPicker);\n"]}