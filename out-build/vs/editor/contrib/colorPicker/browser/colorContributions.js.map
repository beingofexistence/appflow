{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/colorPicker/browser/colorContributions.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAchG,MAAa,GAAkB,SAAQ,eAAG;iBAElB,OAAE,GAAW,kCAAkC,CAAC;iBAEvD,mBAAc,GAAG,IAAI,CAAC,GAAC,KAAK;QAE5C,YAA6B,CAAoB;YAEhD,KAAK,EAAE,CAAC;YAFoB,MAAC,GAAD,CAAC,CAAmB;YAGhD,IAAI,CAAC,CAAC,CAAS,CAAC,CAAO,WAAW,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAW,CAAC,CAAC,CAAC,CAAC,CAAC;QACjE,CAAC;QAEQ,OAAO;YACf,KAAK,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC;QAEO,CAAC,CAAW,UAA6B;YAEhD,MAAM,0BAA0B,GAAG,IAAI,CAAC,CAAC,CAAO,SAAS,mDAAyC,CAAC;YACnG,IAAI,0BAA0B,KAAK,OAAO,IAAI,0BAA0B,KAAK,eAAe,EAAE;gBAC7F,OAAO;aACP;YAED,MAAM,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;YAEjC,IAAI,MAAM,CAAC,IAAI,yCAAiC,EAAE;gBACjD,OAAO;aACP;YAED,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE;gBAChC,OAAO;aACP;YAED,IAAI,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,YAAY,KAAK,mBAAG,EAAgC;gBAC1F,OAAO;aACP;YAED,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE;gBAClB,OAAO;aACP;YAED,MAAM,eAAe,GAAG,IAAI,CAAC,CAAC,CAAO,eAAe,CAAuB,WAAG,CAAkB,EAAE,CAAC,CAAC;YACpG,IAAI,CAAC,eAAe,EAAE;gBACrB,OAAO;aACP;YACD,IAAI,CAAC,eAAe,CAAC,oBAAoB,EAAE;gBAC1C,MAAM,KAAK,GAAG,IAAI,WAAG,CAAG,MAAM,CAAC,KAAK,CAAC,eAAe,EAAE,MAAM,CAAC,KAAK,CAAC,WAAW,GAAG,CAAC,EAAE,MAAM,CAAC,KAAK,CAAC,aAAa,EAAE,MAAM,CAAC,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC;gBAC5I,eAAe,CAAC,gBAAgB,CAAC,KAAK,oEAAoD,KAAK,EAAE,IAAI,CAAC,CAAC;aACvG;QACF,CAAC;;IAjDF,kBAkDC;IAED,IAAA,sBAAG,EAAwB,GAAG,CAAe,EAAE,EAAE,GAAG,iEAAuE,CAAC;IAC5H,gBAAG,CAAsB,QAAQ,CAAC,2BAAG,CAAmB,CAAC","file":"colorContributions.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ICodeEditor, IEditorMouseEvent, MouseTargetType } from 'vs/editor/browser/editorBrowser';\nimport { EditorContributionInstantiation, registerEditorContribution } from 'vs/editor/browser/editorExtensions';\nimport { EditorOption } from 'vs/editor/common/config/editorOptions';\nimport { Range } from 'vs/editor/common/core/range';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { ColorDecorationInjectedTextMarker } from 'vs/editor/contrib/colorPicker/browser/colorDetector';\nimport { ColorHoverParticipant } from 'vs/editor/contrib/colorPicker/browser/colorHoverParticipant';\nimport { ModesHoverController } from 'vs/editor/contrib/hover/browser/hover';\nimport { HoverStartMode, HoverStartSource } from 'vs/editor/contrib/hover/browser/hoverOperation';\nimport { HoverParticipantRegistry } from 'vs/editor/contrib/hover/browser/hoverTypes';\n\nexport class ColorContribution extends Disposable implements IEditorContribution {\n\n\tpublic static readonly ID: string = 'editor.contrib.colorContribution';\n\n\tstatic readonly RECOMPUTE_TIME = 1000; // ms\n\n\tconstructor(private readonly _editor: ICodeEditor,\n\t) {\n\t\tsuper();\n\t\tthis._register(_editor.onMouseDown((e) => this.onMouseDown(e)));\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\t}\n\n\tprivate onMouseDown(mouseEvent: IEditorMouseEvent) {\n\n\t\tconst colorDecoratorsActivatedOn = this._editor.getOption(EditorOption.colorDecoratorsActivatedOn);\n\t\tif (colorDecoratorsActivatedOn !== 'click' && colorDecoratorsActivatedOn !== 'clickAndHover') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst target = mouseEvent.target;\n\n\t\tif (target.type !== MouseTargetType.CONTENT_TEXT) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!target.detail.injectedText) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (target.detail.injectedText.options.attachedData !== ColorDecorationInjectedTextMarker) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!target.range) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst hoverController = this._editor.getContribution<ModesHoverController>(ModesHoverController.ID);\n\t\tif (!hoverController) {\n\t\t\treturn;\n\t\t}\n\t\tif (!hoverController.isColorPickerVisible) {\n\t\t\tconst range = new Range(target.range.startLineNumber, target.range.startColumn + 1, target.range.endLineNumber, target.range.endColumn + 1);\n\t\t\thoverController.showContentHover(range, HoverStartMode.Immediate, HoverStartSource.Mouse, false, true);\n\t\t}\n\t}\n}\n\nregisterEditorContribution(ColorContribution.ID, ColorContribution, EditorContributionInstantiation.BeforeFirstInteraction);\nHoverParticipantRegistry.register(ColorHoverParticipant);\n"]}