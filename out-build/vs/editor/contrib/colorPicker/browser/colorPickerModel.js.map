{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/colorPicker/browser/colorPickerModel.ts"],"names":[],"mappings":"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","file":"colorPickerModel.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Color } from 'vs/base/common/color';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IColorPresentation } from 'vs/editor/common/languages';\n\nexport class ColorPickerModel {\n\n\treadonly originalColor: Color;\n\tprivate _color: Color;\n\n\tget color(): Color {\n\t\treturn this._color;\n\t}\n\n\tset color(color: Color) {\n\t\tif (this._color.equals(color)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._color = color;\n\t\tthis._onDidChangeColor.fire(color);\n\t}\n\n\tget presentation(): IColorPresentation { return this.colorPresentations[this.presentationIndex]; }\n\n\tprivate _colorPresentations: IColorPresentation[];\n\n\tget colorPresentations(): IColorPresentation[] {\n\t\treturn this._colorPresentations;\n\t}\n\n\tset colorPresentations(colorPresentations: IColorPresentation[]) {\n\t\tthis._colorPresentations = colorPresentations;\n\t\tif (this.presentationIndex > colorPresentations.length - 1) {\n\t\t\tthis.presentationIndex = 0;\n\t\t}\n\t\tthis._onDidChangePresentation.fire(this.presentation);\n\t}\n\n\tprivate readonly _onColorFlushed = new Emitter<Color>();\n\treadonly onColorFlushed: Event<Color> = this._onColorFlushed.event;\n\n\tprivate readonly _onDidChangeColor = new Emitter<Color>();\n\treadonly onDidChangeColor: Event<Color> = this._onDidChangeColor.event;\n\n\tprivate readonly _onDidChangePresentation = new Emitter<IColorPresentation>();\n\treadonly onDidChangePresentation: Event<IColorPresentation> = this._onDidChangePresentation.event;\n\n\tconstructor(color: Color, availableColorPresentations: IColorPresentation[], private presentationIndex: number) {\n\t\tthis.originalColor = color;\n\t\tthis._color = color;\n\t\tthis._colorPresentations = availableColorPresentations;\n\t}\n\n\tselectNextColorPresentation(): void {\n\t\tthis.presentationIndex = (this.presentationIndex + 1) % this.colorPresentations.length;\n\t\tthis.flushColor();\n\t\tthis._onDidChangePresentation.fire(this.presentation);\n\t}\n\n\tguessColorPresentation(color: Color, originalText: string): void {\n\t\tlet presentationIndex = -1;\n\t\tfor (let i = 0; i < this.colorPresentations.length; i++) {\n\t\t\tif (originalText.toLowerCase() === this.colorPresentations[i].label) {\n\t\t\t\tpresentationIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (presentationIndex === -1) {\n\t\t\t// check which color presentation text has same prefix as original text's prefix\n\t\t\tconst originalTextPrefix = originalText.split('(')[0].toLowerCase();\n\t\t\tfor (let i = 0; i < this.colorPresentations.length; i++) {\n\t\t\t\tif (this.colorPresentations[i].label.toLowerCase().startsWith(originalTextPrefix)) {\n\t\t\t\t\tpresentationIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (presentationIndex !== -1 && presentationIndex !== this.presentationIndex) {\n\t\t\tthis.presentationIndex = presentationIndex;\n\t\t\tthis._onDidChangePresentation.fire(this.presentation);\n\t\t}\n\t}\n\n\tflushColor(): void {\n\t\tthis._onColorFlushed.fire(this._color);\n\t}\n}\n"]}