{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/markdownRenderer/browser/markdownRenderer.ts"],"names":[],"mappings":"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","file":"markdownRenderer.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MarkdownRenderOptions, MarkedOptions, renderMarkdown } from 'vs/base/browser/markdownRenderer';\nimport { createTrustedTypesPolicy } from 'vs/base/browser/trustedTypes';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { Emitter } from 'vs/base/common/event';\nimport { IMarkdownString, MarkdownStringTrustedOptions } from 'vs/base/common/htmlContent';\nimport { DisposableStore, IDisposable } from 'vs/base/common/lifecycle';\nimport 'vs/css!./renderedMarkdown';\nimport { applyFontInfo } from 'vs/editor/browser/config/domFontInfo';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorOption } from 'vs/editor/common/config/editorOptions';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { PLAINTEXT_LANGUAGE_ID } from 'vs/editor/common/languages/modesRegistry';\nimport { tokenizeToString } from 'vs/editor/common/languages/textToHtmlTokenizer';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\n\nexport interface IMarkdownRenderResult extends IDisposable {\n\treadonly element: HTMLElement;\n}\n\nexport interface IMarkdownRendererOptions {\n\treadonly editor?: ICodeEditor;\n\treadonly codeBlockFontFamily?: string;\n\treadonly codeBlockFontSize?: string;\n}\n\n/**\n * Markdown renderer that can render codeblocks with the editor mechanics. This\n * renderer should always be preferred.\n */\nexport class MarkdownRenderer {\n\n\tprivate static _ttpTokenizer = createTrustedTypesPolicy('tokenizeToString', {\n\t\tcreateHTML(html: string) {\n\t\t\treturn html;\n\t\t}\n\t});\n\n\tprivate readonly _onDidRenderAsync = new Emitter<void>();\n\treadonly onDidRenderAsync = this._onDidRenderAsync.event;\n\n\tconstructor(\n\t\tprivate readonly _options: IMarkdownRendererOptions,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@IOpenerService private readonly _openerService: IOpenerService,\n\t) { }\n\n\tdispose(): void {\n\t\tthis._onDidRenderAsync.dispose();\n\t}\n\n\trender(markdown: IMarkdownString | undefined, options?: MarkdownRenderOptions, markedOptions?: MarkedOptions): IMarkdownRenderResult {\n\t\tif (!markdown) {\n\t\t\tconst element = document.createElement('span');\n\t\t\treturn { element, dispose: () => { } };\n\t\t}\n\n\t\tconst disposables = new DisposableStore();\n\t\tconst rendered = disposables.add(renderMarkdown(markdown, { ...this._getRenderOptions(markdown, disposables), ...options }, markedOptions));\n\t\trendered.element.classList.add('rendered-markdown');\n\t\treturn {\n\t\t\telement: rendered.element,\n\t\t\tdispose: () => disposables.dispose()\n\t\t};\n\t}\n\n\tprotected _getRenderOptions(markdown: IMarkdownString, disposables: DisposableStore): MarkdownRenderOptions {\n\t\treturn {\n\t\t\tcodeBlockRenderer: async (languageAlias, value) => {\n\t\t\t\t// In markdown,\n\t\t\t\t// it is possible that we stumble upon language aliases (e.g.js instead of javascript)\n\t\t\t\t// it is possible no alias is given in which case we fall back to the current editor lang\n\t\t\t\tlet languageId: string | undefined | null;\n\t\t\t\tif (languageAlias) {\n\t\t\t\t\tlanguageId = this._languageService.getLanguageIdByLanguageName(languageAlias);\n\t\t\t\t} else if (this._options.editor) {\n\t\t\t\t\tlanguageId = this._options.editor.getModel()?.getLanguageId();\n\t\t\t\t}\n\t\t\t\tif (!languageId) {\n\t\t\t\t\tlanguageId = PLAINTEXT_LANGUAGE_ID;\n\t\t\t\t}\n\t\t\t\tconst html = await tokenizeToString(this._languageService, value, languageId);\n\n\t\t\t\tconst element = document.createElement('span');\n\n\t\t\t\telement.innerHTML = (MarkdownRenderer._ttpTokenizer?.createHTML(html) ?? html) as string;\n\n\t\t\t\t// use \"good\" font\n\t\t\t\tif (this._options.editor) {\n\t\t\t\t\tconst fontInfo = this._options.editor.getOption(EditorOption.fontInfo);\n\t\t\t\t\tapplyFontInfo(element, fontInfo);\n\t\t\t\t} else if (this._options.codeBlockFontFamily) {\n\t\t\t\t\telement.style.fontFamily = this._options.codeBlockFontFamily;\n\t\t\t\t}\n\n\t\t\t\tif (this._options.codeBlockFontSize !== undefined) {\n\t\t\t\t\telement.style.fontSize = this._options.codeBlockFontSize;\n\t\t\t\t}\n\n\t\t\t\treturn element;\n\t\t\t},\n\t\t\tasyncRenderCallback: () => this._onDidRenderAsync.fire(),\n\t\t\tactionHandler: {\n\t\t\t\tcallback: (link) => openLinkFromMarkdown(this._openerService, link, markdown.isTrusted),\n\t\t\t\tdisposables: disposables\n\t\t\t}\n\t\t};\n\t}\n}\n\nexport async function openLinkFromMarkdown(openerService: IOpenerService, link: string, isTrusted: boolean | MarkdownStringTrustedOptions | undefined): Promise<boolean> {\n\ttry {\n\t\treturn await openerService.open(link, {\n\t\t\tfromUserGesture: true,\n\t\t\tallowContributedOpeners: true,\n\t\t\tallowCommands: toAllowCommandsOption(isTrusted),\n\t\t});\n\t} catch (e) {\n\t\tonUnexpectedError(e);\n\t\treturn false;\n\t}\n}\n\nfunction toAllowCommandsOption(isTrusted: boolean | MarkdownStringTrustedOptions | undefined): boolean | readonly string[] {\n\tif (isTrusted === true) {\n\t\treturn true; // Allow all commands\n\t}\n\n\tif (isTrusted && Array.isArray(isTrusted.enabledCommands)) {\n\t\treturn isTrusted.enabledCommands; // Allow subset of commands\n\t}\n\n\treturn false; // Block commands\n}\n"]}