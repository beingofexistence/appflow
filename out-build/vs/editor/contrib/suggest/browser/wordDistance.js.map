{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/suggest/browser/wordDistance.ts"],"names":[],"mappings":"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","file":"wordDistance.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { binarySearch, isFalsyOrEmpty } from 'vs/base/common/arrays';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorOption } from 'vs/editor/common/config/editorOptions';\nimport { IPosition } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { CompletionItem, CompletionItemKind } from 'vs/editor/common/languages';\nimport { IEditorWorkerService } from 'vs/editor/common/services/editorWorker';\nimport { BracketSelectionRangeProvider } from 'vs/editor/contrib/smartSelect/browser/bracketSelections';\n\nexport abstract class WordDistance {\n\n\tstatic readonly None = new class extends WordDistance {\n\t\tdistance() { return 0; }\n\t};\n\n\tstatic async create(service: IEditorWorkerService, editor: ICodeEditor): Promise<WordDistance> {\n\n\t\tif (!editor.getOption(EditorOption.suggest).localityBonus) {\n\t\t\treturn WordDistance.None;\n\t\t}\n\n\t\tif (!editor.hasModel()) {\n\t\t\treturn WordDistance.None;\n\t\t}\n\n\t\tconst model = editor.getModel();\n\t\tconst position = editor.getPosition();\n\n\t\tif (!service.canComputeWordRanges(model.uri)) {\n\t\t\treturn WordDistance.None;\n\t\t}\n\n\t\tconst [ranges] = await new BracketSelectionRangeProvider().provideSelectionRanges(model, [position]);\n\t\tif (ranges.length === 0) {\n\t\t\treturn WordDistance.None;\n\t\t}\n\n\t\tconst wordRanges = await service.computeWordRanges(model.uri, ranges[0].range);\n\t\tif (!wordRanges) {\n\t\t\treturn WordDistance.None;\n\t\t}\n\n\t\t// remove current word\n\t\tconst wordUntilPos = model.getWordUntilPosition(position);\n\t\tdelete wordRanges[wordUntilPos.word];\n\n\t\treturn new class extends WordDistance {\n\t\t\tdistance(anchor: IPosition, item: CompletionItem) {\n\t\t\t\tif (!position.equals(editor.getPosition())) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t\tif (item.kind === CompletionItemKind.Keyword) {\n\t\t\t\t\treturn 2 << 20;\n\t\t\t\t}\n\t\t\t\tconst word = typeof item.label === 'string' ? item.label : item.label.label;\n\t\t\t\tconst wordLines = wordRanges[word];\n\t\t\t\tif (isFalsyOrEmpty(wordLines)) {\n\t\t\t\t\treturn 2 << 20;\n\t\t\t\t}\n\t\t\t\tconst idx = binarySearch(wordLines, Range.fromPositions(anchor), Range.compareRangesUsingStarts);\n\t\t\t\tconst bestWordRange = idx >= 0 ? wordLines[idx] : wordLines[Math.max(0, ~idx - 1)];\n\t\t\t\tlet blockDistance = ranges.length;\n\t\t\t\tfor (const range of ranges) {\n\t\t\t\t\tif (!Range.containsRange(range.range, bestWordRange)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tblockDistance -= 1;\n\t\t\t\t}\n\t\t\t\treturn blockDistance;\n\t\t\t}\n\t\t};\n\t}\n\n\tabstract distance(anchor: IPosition, suggestion: CompletionItem): number;\n}\n"]}