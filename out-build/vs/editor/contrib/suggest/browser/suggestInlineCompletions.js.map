{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/suggest/browser/suggestInlineCompletions.ts"],"names":[],"mappings":"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","file":"suggestInlineCompletions.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { FuzzyScore } from 'vs/base/common/filters';\nimport { Iterable } from 'vs/base/common/iterator';\nimport { IDisposable, RefCountedDisposable } from 'vs/base/common/lifecycle';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorContributionInstantiation, registerEditorContribution } from 'vs/editor/browser/editorExtensions';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { EditorOption, FindComputedEditorOptionValueById } from 'vs/editor/common/config/editorOptions';\nimport { ISingleEditOperation } from 'vs/editor/common/core/editOperation';\nimport { IPosition, Position } from 'vs/editor/common/core/position';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { IWordAtPosition } from 'vs/editor/common/core/wordHelper';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { Command, CompletionItemInsertTextRule, CompletionItemProvider, CompletionTriggerKind, InlineCompletion, InlineCompletionContext, InlineCompletions, InlineCompletionsProvider } from 'vs/editor/common/languages';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { ILanguageFeaturesService } from 'vs/editor/common/services/languageFeatures';\nimport { CompletionModel, LineContext } from 'vs/editor/contrib/suggest/browser/completionModel';\nimport { CompletionItem, CompletionItemModel, CompletionOptions, provideSuggestionItems, QuickSuggestionsOptions } from 'vs/editor/contrib/suggest/browser/suggest';\nimport { ISuggestMemoryService } from 'vs/editor/contrib/suggest/browser/suggestMemory';\nimport { WordDistance } from 'vs/editor/contrib/suggest/browser/wordDistance';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\n\nclass SuggestInlineCompletion implements InlineCompletion {\n\n\tconstructor(\n\t\treadonly range: IRange,\n\t\treadonly insertText: string | { snippet: string },\n\t\treadonly filterText: string,\n\t\treadonly additionalTextEdits: ISingleEditOperation[] | undefined,\n\t\treadonly command: Command | undefined,\n\t\treadonly completion: CompletionItem,\n\t) { }\n}\n\nclass InlineCompletionResults extends RefCountedDisposable implements InlineCompletions<SuggestInlineCompletion> {\n\n\tconstructor(\n\t\treadonly model: ITextModel,\n\t\treadonly line: number,\n\t\treadonly word: IWordAtPosition,\n\t\treadonly completionModel: CompletionModel,\n\t\tcompletions: CompletionItemModel,\n\t\t@ISuggestMemoryService private readonly _suggestMemoryService: ISuggestMemoryService,\n\t) {\n\t\tsuper(completions.disposable);\n\t}\n\n\tcanBeReused(model: ITextModel, line: number, word: IWordAtPosition) {\n\t\treturn this.model === model // same model\n\t\t\t&& this.line === line\n\t\t\t&& this.word.word.length > 0\n\t\t\t&& this.word.startColumn === word.startColumn && this.word.endColumn < word.endColumn // same word\n\t\t\t&& this.completionModel.getIncompleteProvider().size === 0; // no incomplete results\n\t}\n\n\tget items(): SuggestInlineCompletion[] {\n\t\tconst result: SuggestInlineCompletion[] = [];\n\n\t\t// Split items by preselected index. This ensures the memory-selected item shows first and that better/worst\n\t\t// ranked items are before/after\n\t\tconst { items } = this.completionModel;\n\t\tconst selectedIndex = this._suggestMemoryService.select(this.model, { lineNumber: this.line, column: this.word.endColumn + this.completionModel.lineContext.characterCountDelta }, items);\n\t\tconst first = Iterable.slice(items, selectedIndex);\n\t\tconst second = Iterable.slice(items, 0, selectedIndex);\n\n\t\tlet resolveCount = 5;\n\n\t\tfor (const item of Iterable.concat(first, second)) {\n\n\t\t\tif (item.score === FuzzyScore.Default) {\n\t\t\t\t// skip items that have no overlap\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst range = new Range(\n\t\t\t\titem.editStart.lineNumber, item.editStart.column,\n\t\t\t\titem.editInsertEnd.lineNumber, item.editInsertEnd.column + this.completionModel.lineContext.characterCountDelta // end PLUS character delta\n\t\t\t);\n\t\t\tconst insertText = item.completion.insertTextRules && (item.completion.insertTextRules & CompletionItemInsertTextRule.InsertAsSnippet)\n\t\t\t\t? { snippet: item.completion.insertText }\n\t\t\t\t: item.completion.insertText;\n\n\t\t\tresult.push(new SuggestInlineCompletion(\n\t\t\t\trange,\n\t\t\t\tinsertText,\n\t\t\t\titem.filterTextLow ?? item.labelLow,\n\t\t\t\titem.completion.additionalTextEdits,\n\t\t\t\titem.completion.command,\n\t\t\t\titem\n\t\t\t));\n\n\t\t\t// resolve the first N suggestions eagerly\n\t\t\tif (resolveCount-- >= 0) {\n\t\t\t\titem.resolve(CancellationToken.None);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\n\nexport class SuggestInlineCompletions implements InlineCompletionsProvider<InlineCompletionResults> {\n\n\tprivate _lastResult?: InlineCompletionResults;\n\n\tconstructor(\n\t\tprivate readonly _getEditorOption: <T extends EditorOption>(id: T, model: ITextModel) => FindComputedEditorOptionValueById<T>,\n\t\t@ILanguageFeaturesService private readonly _languageFeatureService: ILanguageFeaturesService,\n\t\t@IClipboardService private readonly _clipboardService: IClipboardService,\n\t\t@ISuggestMemoryService private readonly _suggestMemoryService: ISuggestMemoryService,\n\t) { }\n\n\tasync provideInlineCompletions(model: ITextModel, position: Position, context: InlineCompletionContext, token: CancellationToken): Promise<InlineCompletionResults | undefined> {\n\n\t\tif (context.selectedSuggestionInfo) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst config = this._getEditorOption(EditorOption.quickSuggestions, model);\n\t\tif (QuickSuggestionsOptions.isAllOff(config)) {\n\t\t\t// quick suggest is off (for this model/language)\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.tokenization.tokenizeIfCheap(position.lineNumber);\n\t\tconst lineTokens = model.tokenization.getLineTokens(position.lineNumber);\n\t\tconst tokenType = lineTokens.getStandardTokenType(lineTokens.findTokenIndexAtOffset(Math.max(position.column - 1 - 1, 0)));\n\t\tif (QuickSuggestionsOptions.valueFor(config, tokenType) !== 'inline') {\n\t\t\t// quick suggest is off (for this token)\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// We consider non-empty leading words and trigger characters. The latter only\n\t\t// when no word is being typed (word characters superseed trigger characters)\n\t\tlet wordInfo = model.getWordAtPosition(position);\n\t\tlet triggerCharacterInfo: { ch: string; providers: Set<CompletionItemProvider> } | undefined;\n\n\t\tif (!wordInfo?.word) {\n\t\t\ttriggerCharacterInfo = this._getTriggerCharacterInfo(model, position);\n\t\t}\n\n\t\tif (!wordInfo?.word && !triggerCharacterInfo) {\n\t\t\t// not at word, not a trigger character\n\t\t\treturn;\n\t\t}\n\n\t\t// ensure that we have word information and that we are at the end of a word\n\t\t// otherwise we stop because we don't want to do quick suggestions inside words\n\t\tif (!wordInfo) {\n\t\t\twordInfo = model.getWordUntilPosition(position);\n\t\t}\n\t\tif (wordInfo.endColumn !== position.column) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet result: InlineCompletionResults;\n\t\tconst leadingLineContents = model.getValueInRange(new Range(position.lineNumber, 1, position.lineNumber, position.column));\n\t\tif (!triggerCharacterInfo && this._lastResult?.canBeReused(model, position.lineNumber, wordInfo)) {\n\t\t\t// reuse a previous result iff possible, only a refilter is needed\n\t\t\t// TODO@jrieken this can be improved further and only incomplete results can be updated\n\t\t\t// console.log(`REUSE with ${wordInfo.word}`);\n\t\t\tconst newLineContext = new LineContext(leadingLineContents, position.column - this._lastResult.word.endColumn);\n\t\t\tthis._lastResult.completionModel.lineContext = newLineContext;\n\t\t\tthis._lastResult.acquire();\n\t\t\tresult = this._lastResult;\n\n\t\t} else {\n\t\t\t// refesh model is required\n\t\t\tconst completions = await provideSuggestionItems(\n\t\t\t\tthis._languageFeatureService.completionProvider,\n\t\t\t\tmodel, position,\n\t\t\t\tnew CompletionOptions(undefined, undefined, triggerCharacterInfo?.providers),\n\t\t\t\ttriggerCharacterInfo && { triggerKind: CompletionTriggerKind.TriggerCharacter, triggerCharacter: triggerCharacterInfo.ch },\n\t\t\t\ttoken\n\t\t\t);\n\n\t\t\tlet clipboardText: string | undefined;\n\t\t\tif (completions.needsClipboard) {\n\t\t\t\tclipboardText = await this._clipboardService.readText();\n\t\t\t}\n\n\t\t\tconst completionModel = new CompletionModel(\n\t\t\t\tcompletions.items,\n\t\t\t\tposition.column,\n\t\t\t\tnew LineContext(leadingLineContents, 0),\n\t\t\t\tWordDistance.None,\n\t\t\t\tthis._getEditorOption(EditorOption.suggest, model),\n\t\t\t\tthis._getEditorOption(EditorOption.snippetSuggestions, model),\n\t\t\t\t{ boostFullMatch: false, firstMatchCanBeWeak: false },\n\t\t\t\tclipboardText\n\t\t\t);\n\t\t\tresult = new InlineCompletionResults(model, position.lineNumber, wordInfo, completionModel, completions, this._suggestMemoryService);\n\t\t}\n\n\t\tthis._lastResult = result;\n\t\treturn result;\n\t}\n\n\thandleItemDidShow(_completions: InlineCompletionResults, item: SuggestInlineCompletion): void {\n\t\titem.completion.resolve(CancellationToken.None);\n\t}\n\n\tfreeInlineCompletions(result: InlineCompletionResults): void {\n\t\tresult.release();\n\t}\n\n\tprivate _getTriggerCharacterInfo(model: ITextModel, position: IPosition) {\n\t\tconst ch = model.getValueInRange(Range.fromPositions({ lineNumber: position.lineNumber, column: position.column - 1 }, position));\n\t\tconst providers = new Set<CompletionItemProvider>();\n\t\tfor (const provider of this._languageFeatureService.completionProvider.all(model)) {\n\t\t\tif (provider.triggerCharacters?.includes(ch)) {\n\t\t\t\tproviders.add(provider);\n\t\t\t}\n\t\t}\n\t\tif (providers.size === 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn { providers, ch };\n\t}\n}\n\nclass EditorContribution implements IEditorContribution {\n\n\tprivate static _counter = 0;\n\tprivate static _disposable: IDisposable | undefined;\n\n\tconstructor(\n\t\t_editor: ICodeEditor,\n\t\t@ILanguageFeaturesService languageFeatureService: ILanguageFeaturesService,\n\t\t@ICodeEditorService editorService: ICodeEditorService,\n\t\t@IInstantiationService instaService: IInstantiationService,\n\t) {\n\t\t// HACK - way to contribute something only once\n\t\tif (++EditorContribution._counter === 1) {\n\t\t\tconst provider = instaService.createInstance(\n\t\t\t\tSuggestInlineCompletions,\n\t\t\t\t(id, model) => {\n\t\t\t\t\t// HACK - reuse the editor options world outside from a \"normal\" contribution\n\t\t\t\t\tconst editor = editorService.listCodeEditors().find(editor => editor.getModel() === model) ?? _editor;\n\t\t\t\t\treturn editor.getOption(id);\n\t\t\t\t},\n\t\t\t);\n\t\t\tEditorContribution._disposable = languageFeatureService.inlineCompletionsProvider.register('*', provider);\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tif (--EditorContribution._counter === 0) {\n\t\t\tEditorContribution._disposable?.dispose();\n\t\t\tEditorContribution._disposable = undefined;\n\t\t}\n\t}\n}\n\nregisterEditorContribution('suggest.inlineCompletionsProvider', EditorContribution, EditorContributionInstantiation.Eager); // eager because the contribution is used as a way to ONCE access a service to which a provider is registered\n"]}