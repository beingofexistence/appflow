{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/suggest/test/browser/wordDistance.test.ts"],"names":[],"mappings":"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","file":"wordDistance.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Event } from 'vs/base/common/event';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { mock } from 'vs/base/test/common/mock';\nimport { IPosition } from 'vs/editor/common/core/position';\nimport { IRange } from 'vs/editor/common/core/range';\nimport { DEFAULT_WORD_REGEXP } from 'vs/editor/common/core/wordHelper';\nimport * as languages from 'vs/editor/common/languages';\nimport { ILanguageConfigurationService } from 'vs/editor/common/languages/languageConfigurationRegistry';\nimport { EditorSimpleWorker } from 'vs/editor/common/services/editorSimpleWorker';\nimport { EditorWorkerService } from 'vs/editor/browser/services/editorWorkerService';\nimport { IEditorWorkerHost } from 'vs/editor/common/services/editorWorkerHost';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfiguration';\nimport { CompletionItem } from 'vs/editor/contrib/suggest/browser/suggest';\nimport { WordDistance } from 'vs/editor/contrib/suggest/browser/wordDistance';\nimport { createCodeEditorServices, instantiateTestCodeEditor } from 'vs/editor/test/browser/testCodeEditor';\nimport { instantiateTextModel } from 'vs/editor/test/common/testTextModel';\nimport { TestLanguageConfigurationService } from 'vs/editor/test/common/modes/testLanguageConfigurationService';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { LanguageFeaturesService } from 'vs/editor/common/services/languageFeaturesService';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nsuite('suggest, word distance', function () {\n\n\tlet distance: WordDistance;\n\tconst disposables = new DisposableStore();\n\n\tsetup(async function () {\n\t\tconst languageId = 'bracketMode';\n\n\t\tdisposables.clear();\n\t\tconst instantiationService = createCodeEditorServices(disposables);\n\t\tconst languageConfigurationService = instantiationService.get(ILanguageConfigurationService);\n\t\tconst languageService = instantiationService.get(ILanguageService);\n\t\tdisposables.add(languageService.registerLanguage({ id: languageId }));\n\t\tdisposables.add(languageConfigurationService.register(languageId, {\n\t\t\tbrackets: [\n\t\t\t\t['{', '}'],\n\t\t\t\t['[', ']'],\n\t\t\t\t['(', ')'],\n\t\t\t]\n\t\t}));\n\n\t\tconst model = disposables.add(instantiateTextModel(instantiationService, 'function abc(aa, ab){\\na\\n}', languageId, undefined, URI.parse('test:///some.path')));\n\t\tconst editor = disposables.add(instantiateTestCodeEditor(instantiationService, model));\n\t\teditor.updateOptions({ suggest: { localityBonus: true } });\n\t\teditor.setPosition({ lineNumber: 2, column: 2 });\n\n\t\tconst modelService = new class extends mock<IModelService>() {\n\t\t\toverride onModelRemoved = Event.None;\n\t\t\toverride getModel(uri: URI) {\n\t\t\t\treturn uri.toString() === model.uri.toString() ? model : null;\n\t\t\t}\n\t\t};\n\n\t\tconst service = new class extends EditorWorkerService {\n\n\t\t\tprivate _worker = new EditorSimpleWorker(new class extends mock<IEditorWorkerHost>() { }, null);\n\n\t\t\tconstructor() {\n\t\t\t\tsuper(modelService, new class extends mock<ITextResourceConfigurationService>() { }, new NullLogService(), new TestLanguageConfigurationService(), new LanguageFeaturesService());\n\t\t\t\tthis._worker.acceptNewModel({\n\t\t\t\t\turl: model.uri.toString(),\n\t\t\t\t\tlines: model.getLinesContent(),\n\t\t\t\t\tEOL: model.getEOL(),\n\t\t\t\t\tversionId: model.getVersionId()\n\t\t\t\t});\n\t\t\t\tmodel.onDidChangeContent(e => this._worker.acceptModelChanged(model.uri.toString(), e));\n\t\t\t}\n\t\t\toverride computeWordRanges(resource: URI, range: IRange): Promise<{ [word: string]: IRange[] } | null> {\n\t\t\t\treturn this._worker.computeWordRanges(resource.toString(), range, DEFAULT_WORD_REGEXP.source, DEFAULT_WORD_REGEXP.flags);\n\t\t\t}\n\t\t};\n\n\t\tdistance = await WordDistance.create(service, editor);\n\n\t\tdisposables.add(service);\n\t});\n\n\tteardown(function () {\n\t\tdisposables.clear();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction createSuggestItem(label: string, overwriteBefore: number, position: IPosition): CompletionItem {\n\t\tconst suggestion: languages.CompletionItem = {\n\t\t\tlabel,\n\t\t\trange: { startLineNumber: position.lineNumber, startColumn: position.column - overwriteBefore, endLineNumber: position.lineNumber, endColumn: position.column },\n\t\t\tinsertText: label,\n\t\t\tkind: 0\n\t\t};\n\t\tconst container: languages.CompletionList = {\n\t\t\tsuggestions: [suggestion]\n\t\t};\n\t\tconst provider: languages.CompletionItemProvider = {\n\t\t\t_debugDisplayName: 'test',\n\t\t\tprovideCompletionItems(): any {\n\t\t\t\treturn;\n\t\t\t}\n\t\t};\n\t\treturn new CompletionItem(position, suggestion, container, provider);\n\t}\n\n\ttest('Suggest locality bonus can boost current word #90515', function () {\n\t\tconst pos = { lineNumber: 2, column: 2 };\n\t\tconst d1 = distance.distance(pos, createSuggestItem('a', 1, pos).completion);\n\t\tconst d2 = distance.distance(pos, createSuggestItem('aa', 1, pos).completion);\n\t\tconst d3 = distance.distance(pos, createSuggestItem('ab', 1, pos).completion);\n\n\t\tassert.ok(d1 > d2);\n\t\tassert.ok(d2 === d3);\n\t});\n});\n"]}