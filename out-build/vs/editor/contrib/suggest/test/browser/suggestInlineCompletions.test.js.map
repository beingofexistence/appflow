{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/suggest/test/browser/suggestInlineCompletions.test.ts"],"names":[],"mappings":"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","file":"suggestInlineCompletions.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { mock } from 'vs/base/test/common/mock';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { CompletionContext, CompletionItem, CompletionItemKind, CompletionItemProvider, CompletionList, InlineCompletionTriggerKind, ProviderResult } from 'vs/editor/common/languages';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { TextModel } from 'vs/editor/common/model/textModel';\nimport { ILanguageFeaturesService } from 'vs/editor/common/services/languageFeatures';\nimport { SuggestInlineCompletions } from 'vs/editor/contrib/suggest/browser/suggestInlineCompletions';\nimport { ISuggestMemoryService } from 'vs/editor/contrib/suggest/browser/suggestMemory';\nimport { createCodeEditorServices, instantiateTestCodeEditor, ITestCodeEditor } from 'vs/editor/test/browser/testCodeEditor';\nimport { createTextModel } from 'vs/editor/test/common/testTextModel';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\n\n\nsuite('Suggest Inline Completions', function () {\n\n\tconst disposables = new DisposableStore();\n\tconst services = new ServiceCollection([ISuggestMemoryService, new class extends mock<ISuggestMemoryService>() {\n\t\toverride select(): number {\n\t\t\treturn 0;\n\t\t}\n\t}]);\n\n\tlet insta: TestInstantiationService;\n\tlet model: TextModel;\n\tlet editor: ITestCodeEditor;\n\n\tsetup(function () {\n\n\t\tinsta = createCodeEditorServices(disposables, services);\n\t\tmodel = createTextModel('he', undefined, undefined, URI.from({ scheme: 'foo', path: 'foo.bar' }));\n\t\teditor = instantiateTestCodeEditor(insta, model);\n\t\teditor.updateOptions({ quickSuggestions: { comments: 'inline', strings: 'inline', other: 'inline' } });\n\n\t\tinsta.invokeFunction(accessor => {\n\t\t\taccessor.get(ILanguageFeaturesService).completionProvider.register({ pattern: '*.bar', scheme: 'foo' }, new class implements CompletionItemProvider {\n\t\t\t\t_debugDisplayName = 'test';\n\n\t\t\t\ttriggerCharacters?: string[] | undefined;\n\n\t\t\t\tprovideCompletionItems(model: ITextModel, position: Position, context: CompletionContext, token: CancellationToken): ProviderResult<CompletionList> {\n\n\t\t\t\t\tconst word = model.getWordUntilPosition(position);\n\t\t\t\t\tconst range = new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);\n\n\t\t\t\t\tconst suggestions: CompletionItem[] = [];\n\t\t\t\t\tsuggestions.push({ insertText: 'hello', label: 'hello', range, kind: CompletionItemKind.Class });\n\t\t\t\t\tsuggestions.push({ insertText: 'hell', label: 'hell', range, kind: CompletionItemKind.Class });\n\t\t\t\t\tsuggestions.push({ insertText: 'hey', label: 'hey', range, kind: CompletionItemKind.Class });\n\t\t\t\t\treturn { suggestions };\n\t\t\t\t}\n\n\t\t\t});\n\t\t});\n\t});\n\n\tteardown(function () {\n\t\tdisposables.clear();\n\t\tmodel.dispose();\n\t\teditor.dispose();\n\t});\n\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('Aggressive inline completions when typing within line #146948', async function () {\n\n\t\tconst completions: SuggestInlineCompletions = insta.createInstance(SuggestInlineCompletions, (id) => editor.getOption(id));\n\n\t\t{\n\t\t\t// (1,3), end of word -> suggestions\n\t\t\tconst result = await completions.provideInlineCompletions(model, new Position(1, 3), { triggerKind: InlineCompletionTriggerKind.Explicit, selectedSuggestionInfo: undefined }, CancellationToken.None);\n\t\t\tassert.strictEqual(result?.items.length, 3);\n\t\t\tcompletions.freeInlineCompletions(result);\n\t\t}\n\t\t{\n\t\t\t// (1,2), middle of word -> NO suggestions\n\t\t\tconst result = await completions.provideInlineCompletions(model, new Position(1, 2), { triggerKind: InlineCompletionTriggerKind.Explicit, selectedSuggestionInfo: undefined }, CancellationToken.None);\n\t\t\tassert.ok(result === undefined);\n\t\t}\n\t});\n});\n"]}