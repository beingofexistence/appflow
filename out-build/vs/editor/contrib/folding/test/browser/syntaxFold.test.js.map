{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/folding/test/browser/syntaxFold.test.ts"],"names":[],"mappings":"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","file":"syntaxFold.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as assert from 'assert';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { FoldingContext, FoldingRange, FoldingRangeProvider, ProviderResult } from 'vs/editor/common/languages';\nimport { SyntaxRangeProvider } from 'vs/editor/contrib/folding/browser/syntaxRangeProvider';\nimport { createTextModel } from 'vs/editor/test/common/testTextModel';\nimport { FoldingLimitReporter } from 'vs/editor/contrib/folding/browser/folding';\n\ninterface IndentRange {\n\tstart: number;\n\tend: number;\n}\n\nclass TestFoldingRangeProvider implements FoldingRangeProvider {\n\tconstructor(private model: ITextModel, private ranges: IndentRange[]) {\n\t}\n\n\tprovideFoldingRanges(model: ITextModel, context: FoldingContext, token: CancellationToken): ProviderResult<FoldingRange[]> {\n\t\tif (model === this.model) {\n\t\t\treturn this.ranges;\n\t\t}\n\t\treturn null;\n\t}\n}\n\nsuite('Syntax folding', () => {\n\tfunction r(start: number, end: number): IndentRange {\n\t\treturn { start, end };\n\t}\n\n\ttest('Limit by nesting level', async () => {\n\t\tconst lines = [\n\t\t\t/* 1*/\t'{',\n\t\t\t/* 2*/\t'  A',\n\t\t\t/* 3*/\t'  {',\n\t\t\t/* 4*/\t'    {',\n\t\t\t/* 5*/\t'      B',\n\t\t\t/* 6*/\t'    }',\n\t\t\t/* 7*/\t'    {',\n\t\t\t/* 8*/\t'      A',\n\t\t\t/* 9*/\t'      {',\n\t\t\t/* 10*/\t'         A',\n\t\t\t/* 11*/\t'      }',\n\t\t\t/* 12*/\t'      {',\n\t\t\t/* 13*/\t'        {',\n\t\t\t/* 14*/\t'          {',\n\t\t\t/* 15*/\t'             A',\n\t\t\t/* 16*/\t'          }',\n\t\t\t/* 17*/\t'        }',\n\t\t\t/* 18*/\t'      }',\n\t\t\t/* 19*/\t'    }',\n\t\t\t/* 20*/\t'  }',\n\t\t\t/* 21*/\t'}',\n\t\t\t/* 22*/\t'{',\n\t\t\t/* 23*/\t'  A',\n\t\t\t/* 24*/\t'}',\n\t\t];\n\n\t\tconst r1 = r(1, 20);  //0\n\t\tconst r2 = r(3, 19);  //1\n\t\tconst r3 = r(4, 5);   //2\n\t\tconst r4 = r(7, 18);  //2\n\t\tconst r5 = r(9, 10);  //3\n\t\tconst r6 = r(12, 17); //4\n\t\tconst r7 = r(13, 16); //5\n\t\tconst r8 = r(14, 15); //6\n\t\tconst r9 = r(22, 23); //0\n\n\t\tconst model = createTextModel(lines.join('\\n'));\n\t\tconst ranges = [r1, r2, r3, r4, r5, r6, r7, r8, r9];\n\t\tconst providers = [new TestFoldingRangeProvider(model, ranges)];\n\n\t\tasync function assertLimit(maxEntries: number, expectedRanges: IndentRange[], message: string) {\n\t\t\tlet reported: number | false = false;\n\t\t\tconst foldingRangesLimit: FoldingLimitReporter = { limit: maxEntries, update: (computed, limited) => reported = limited };\n\t\t\tconst indentRanges = await new SyntaxRangeProvider(model, providers, () => { }, foldingRangesLimit, undefined).compute(CancellationToken.None);\n\t\t\tconst actual: IndentRange[] = [];\n\t\t\tif (indentRanges) {\n\t\t\t\tfor (let i = 0; i < indentRanges.length; i++) {\n\t\t\t\t\tactual.push({ start: indentRanges.getStartLineNumber(i), end: indentRanges.getEndLineNumber(i) });\n\t\t\t\t}\n\t\t\t\tassert.equal(reported, 9 <= maxEntries ? false : maxEntries, 'limited');\n\t\t\t}\n\t\t\tassert.deepStrictEqual(actual, expectedRanges, message);\n\n\t\t}\n\n\t\tawait assertLimit(1000, [r1, r2, r3, r4, r5, r6, r7, r8, r9], '1000');\n\t\tawait assertLimit(9, [r1, r2, r3, r4, r5, r6, r7, r8, r9], '9');\n\t\tawait assertLimit(8, [r1, r2, r3, r4, r5, r6, r7, r9], '8');\n\t\tawait assertLimit(7, [r1, r2, r3, r4, r5, r6, r9], '7');\n\t\tawait assertLimit(6, [r1, r2, r3, r4, r5, r9], '6');\n\t\tawait assertLimit(5, [r1, r2, r3, r4, r9], '5');\n\t\tawait assertLimit(4, [r1, r2, r3, r9], '4');\n\t\tawait assertLimit(3, [r1, r2, r9], '3');\n\t\tawait assertLimit(2, [r1, r9], '2');\n\t\tawait assertLimit(1, [r1], '1');\n\t\tawait assertLimit(0, [], '0');\n\n\t\tmodel.dispose();\n\t});\n\n});\n"]}