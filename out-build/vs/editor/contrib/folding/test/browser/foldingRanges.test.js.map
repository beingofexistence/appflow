{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/folding/test/browser/foldingRanges.test.ts"],"names":[],"mappings":"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","file":"foldingRanges.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { FoldingMarkers } from 'vs/editor/common/languages/languageConfiguration';\nimport { MAX_FOLDING_REGIONS, FoldRange, FoldingRegions, FoldSource } from 'vs/editor/contrib/folding/browser/foldingRanges';\nimport { RangesCollector, computeRanges } from 'vs/editor/contrib/folding/browser/indentRangeProvider';\nimport { createTextModel } from 'vs/editor/test/common/testTextModel';\n\nconst markers: FoldingMarkers = {\n\tstart: /^#region$/,\n\tend: /^#endregion$/\n};\n\nsuite('FoldingRanges', () => {\n\n\tconst foldRange = (from: number, to: number, collapsed: boolean | undefined = undefined, source: FoldSource = FoldSource.provider, type: string | undefined = undefined) =>\n\t\t<FoldRange>{\n\t\t\tstartLineNumber: from,\n\t\t\tendLineNumber: to,\n\t\t\ttype: type,\n\t\t\tisCollapsed: collapsed || false,\n\t\t\tsource\n\t\t};\n\tconst assertEqualRanges = (range1: FoldRange, range2: FoldRange, msg: string) => {\n\t\tassert.strictEqual(range1.startLineNumber, range2.startLineNumber, msg + ' start');\n\t\tassert.strictEqual(range1.endLineNumber, range2.endLineNumber, msg + ' end');\n\t\tassert.strictEqual(range1.type, range2.type, msg + ' type');\n\t\tassert.strictEqual(range1.isCollapsed, range2.isCollapsed, msg + ' collapsed');\n\t\tassert.strictEqual(range1.source, range2.source, msg + ' source');\n\t};\n\n\ttest('test max folding regions', () => {\n\t\tconst lines: string[] = [];\n\t\tconst nRegions = MAX_FOLDING_REGIONS;\n\t\tconst collector = new RangesCollector({ limit: MAX_FOLDING_REGIONS, update: () => { } });\n\t\tfor (let i = 0; i < nRegions; i++) {\n\t\t\tconst startLineNumber = lines.length;\n\t\t\tlines.push('#region');\n\t\t\tconst endLineNumber = lines.length;\n\t\t\tlines.push('#endregion');\n\t\t\tcollector.insertFirst(startLineNumber, endLineNumber, 0);\n\t\t}\n\t\tconst model = createTextModel(lines.join('\\n'));\n\t\tconst actual = collector.toIndentRanges(model);\n\t\tassert.strictEqual(actual.length, nRegions, 'len');\n\t\tmodel.dispose();\n\n\t});\n\n\ttest('findRange', () => {\n\t\tconst lines = [\n\t\t/* 1*/\t'#region',\n\t\t/* 2*/\t'#endregion',\n\t\t/* 3*/\t'class A {',\n\t\t/* 4*/\t'  void foo() {',\n\t\t/* 5*/\t'    if (true) {',\n\t\t/* 6*/\t'        return;',\n\t\t/* 7*/\t'    }',\n\t\t/* 8*/\t'',\n\t\t/* 9*/\t'    if (true) {',\n\t\t/* 10*/\t'      return;',\n\t\t/* 11*/\t'    }',\n\t\t/* 12*/\t'  }',\n\t\t/* 13*/\t'}'];\n\n\t\tconst textModel = createTextModel(lines.join('\\n'));\n\t\ttry {\n\t\t\tconst actual = computeRanges(textModel, false, markers);\n\t\t\t// let r0 = r(1, 2);\n\t\t\t// let r1 = r(3, 12);\n\t\t\t// let r2 = r(4, 11);\n\t\t\t// let r3 = r(5, 6);\n\t\t\t// let r4 = r(9, 10);\n\n\t\t\tassert.strictEqual(actual.findRange(1), 0, '1');\n\t\t\tassert.strictEqual(actual.findRange(2), 0, '2');\n\t\t\tassert.strictEqual(actual.findRange(3), 1, '3');\n\t\t\tassert.strictEqual(actual.findRange(4), 2, '4');\n\t\t\tassert.strictEqual(actual.findRange(5), 3, '5');\n\t\t\tassert.strictEqual(actual.findRange(6), 3, '6');\n\t\t\tassert.strictEqual(actual.findRange(7), 2, '7');\n\t\t\tassert.strictEqual(actual.findRange(8), 2, '8');\n\t\t\tassert.strictEqual(actual.findRange(9), 4, '9');\n\t\t\tassert.strictEqual(actual.findRange(10), 4, '10');\n\t\t\tassert.strictEqual(actual.findRange(11), 2, '11');\n\t\t\tassert.strictEqual(actual.findRange(12), 1, '12');\n\t\t\tassert.strictEqual(actual.findRange(13), -1, '13');\n\t\t} finally {\n\t\t\ttextModel.dispose();\n\t\t}\n\n\n\t});\n\n\ttest('setCollapsed', () => {\n\t\tconst lines: string[] = [];\n\t\tconst nRegions = 500;\n\t\tfor (let i = 0; i < nRegions; i++) {\n\t\t\tlines.push('#region');\n\t\t}\n\t\tfor (let i = 0; i < nRegions; i++) {\n\t\t\tlines.push('#endregion');\n\t\t}\n\t\tconst model = createTextModel(lines.join('\\n'));\n\t\tconst actual = computeRanges(model, false, markers);\n\t\tassert.strictEqual(actual.length, nRegions, 'len');\n\t\tfor (let i = 0; i < nRegions; i++) {\n\t\t\tactual.setCollapsed(i, i % 3 === 0);\n\t\t}\n\t\tfor (let i = 0; i < nRegions; i++) {\n\t\t\tassert.strictEqual(actual.isCollapsed(i), i % 3 === 0, 'line' + i);\n\t\t}\n\t\tmodel.dispose();\n\t});\n\n\ttest('sanitizeAndMerge1', () => {\n\t\tconst regionSet1: FoldRange[] = [\n\t\t\tfoldRange(0, 100),\t\t\t// invalid, should be removed\n\t\t\tfoldRange(1, 100, false, FoldSource.provider, 'A'),\t\t// valid\n\t\t\tfoldRange(1, 100, false, FoldSource.provider, 'Z'),\t\t// invalid, duplicate start\n\t\t\tfoldRange(10, 10, false),\t\t\t\t\t\t// invalid, should be removed\n\t\t\tfoldRange(20, 80, false, FoldSource.provider, 'C1'),\t\t// valid inside 'B'\n\t\t\tfoldRange(22, 80, true, FoldSource.provider, 'D1'),\t\t// valid inside 'C1'\n\t\t\tfoldRange(90, 101),\t\t\t\t\t\t\t\t// invalid, should be removed\n\t\t];\n\t\tconst regionSet2: FoldRange[] = [\n\t\t\tfoldRange(20, 80, true),\t\t\t    \t\t// should merge with C1\n\t\t\tfoldRange(18, 80, true),\t\t\t\t\t\t// invalid, out of order\n\t\t\tfoldRange(21, 81, true, FoldSource.provider, 'Z'),\t\t// invalid, overlapping\n\t\t\tfoldRange(22, 80, true, FoldSource.provider, 'D2'),\t\t// should merge with D1\n\t\t];\n\t\tconst result = FoldingRegions.sanitizeAndMerge(regionSet1, regionSet2, 100);\n\t\tassert.strictEqual(result.length, 3, 'result length1');\n\t\tassertEqualRanges(result[0], foldRange(1, 100, false, FoldSource.provider, 'A'), 'A1');\n\t\tassertEqualRanges(result[1], foldRange(20, 80, true, FoldSource.provider, 'C1'), 'C1');\n\t\tassertEqualRanges(result[2], foldRange(22, 80, true, FoldSource.provider, 'D1'), 'D1');\n\t});\n\n\ttest('sanitizeAndMerge2', () => {\n\t\tconst regionSet1: FoldRange[] = [\n\t\t\tfoldRange(1, 100, false, FoldSource.provider, 'a1'),\t\t\t// valid\n\t\t\tfoldRange(2, 100, false, FoldSource.provider, 'a2'),\t\t\t// valid\n\t\t\tfoldRange(3, 19, false, FoldSource.provider, 'a3'),\t\t\t// valid\n\t\t\tfoldRange(20, 71, false, FoldSource.provider, 'a4'),\t\t\t// overlaps b3\n\t\t\tfoldRange(21, 29, false, FoldSource.provider, 'a5'),\t\t\t// valid\n\t\t\tfoldRange(81, 91, false, FoldSource.provider, 'a6'),\t\t\t// overlaps b4\n\t\t];\n\t\tconst regionSet2: FoldRange[] = [\n\t\t\tfoldRange(30, 39, true, FoldSource.provider, 'b1'),\t\t\t// valid, will be recovered\n\t\t\tfoldRange(40, 49, true, FoldSource.userDefined, 'b2'),\t// valid\n\t\t\tfoldRange(50, 100, true, FoldSource.userDefined, 'b3'),\t// overlaps a4\n\t\t\tfoldRange(80, 90, true, FoldSource.userDefined, 'b4'),\t// overlaps a6\n\t\t\tfoldRange(92, 100, true, FoldSource.userDefined, 'b5'),\t// valid\n\t\t];\n\t\tconst result = FoldingRegions.sanitizeAndMerge(regionSet1, regionSet2, 100);\n\t\tassert.strictEqual(result.length, 9, 'result length1');\n\t\tassertEqualRanges(result[0], foldRange(1, 100, false, FoldSource.provider, 'a1'), 'P1');\n\t\tassertEqualRanges(result[1], foldRange(2, 100, false, FoldSource.provider, 'a2'), 'P2');\n\t\tassertEqualRanges(result[2], foldRange(3, 19, false, FoldSource.provider, 'a3'), 'P3');\n\t\tassertEqualRanges(result[3], foldRange(21, 29, false, FoldSource.provider, 'a5'), 'P4');\n\t\tassertEqualRanges(result[4], foldRange(30, 39, true, FoldSource.recovered, 'b1'), 'P5');\n\t\tassertEqualRanges(result[5], foldRange(40, 49, true, FoldSource.userDefined, 'b2'), 'P6');\n\t\tassertEqualRanges(result[6], foldRange(50, 100, true, FoldSource.userDefined, 'b3'), 'P7');\n\t\tassertEqualRanges(result[7], foldRange(80, 90, true, FoldSource.userDefined, 'b4'), 'P8');\n\t\tassertEqualRanges(result[8], foldRange(92, 100, true, FoldSource.userDefined, 'b5'), 'P9');\n\t});\n\n\ttest('sanitizeAndMerge3', () => {\n\t\tconst regionSet1: FoldRange[] = [\n\t\t\tfoldRange(1, 100, false, FoldSource.provider, 'a1'),\t\t\t// valid\n\t\t\tfoldRange(10, 29, false, FoldSource.provider, 'a2'),\t\t\t// matches manual hidden\n\t\t\tfoldRange(35, 39, true, FoldSource.recovered, 'a3'),\t\t// valid\n\t\t];\n\t\tconst regionSet2: FoldRange[] = [\n\t\t\tfoldRange(10, 29, true, FoldSource.recovered, 'b1'),\t\t// matches a\n\t\t\tfoldRange(20, 28, true, FoldSource.provider, 'b2'),\t\t\t// should remain\n\t\t\tfoldRange(30, 39, true, FoldSource.recovered, 'b3'),\t\t// should remain\n\t\t];\n\t\tconst result = FoldingRegions.sanitizeAndMerge(regionSet1, regionSet2, 100);\n\t\tassert.strictEqual(result.length, 5, 'result length3');\n\t\tassertEqualRanges(result[0], foldRange(1, 100, false, FoldSource.provider, 'a1'), 'R1');\n\t\tassertEqualRanges(result[1], foldRange(10, 29, true, FoldSource.provider, 'a2'), 'R2');\n\t\tassertEqualRanges(result[2], foldRange(20, 28, true, FoldSource.recovered, 'b2'), 'R3');\n\t\tassertEqualRanges(result[3], foldRange(30, 39, true, FoldSource.recovered, 'b3'), 'R3');\n\t\tassertEqualRanges(result[4], foldRange(35, 39, true, FoldSource.recovered, 'a3'), 'R4');\n\t});\n\n\ttest('sanitizeAndMerge4', () => {\n\t\tconst regionSet1: FoldRange[] = [\n\t\t\tfoldRange(1, 100, false, FoldSource.provider, 'a1'),\t\t\t// valid\n\t\t];\n\t\tconst regionSet2: FoldRange[] = [\n\t\t\tfoldRange(20, 28, true, FoldSource.provider, 'b1'),\t\t\t// hidden\n\t\t\tfoldRange(30, 38, true, FoldSource.provider, 'b2'),\t\t\t// hidden\n\t\t];\n\t\tconst result = FoldingRegions.sanitizeAndMerge(regionSet1, regionSet2, 100);\n\t\tassert.strictEqual(result.length, 3, 'result length4');\n\t\tassertEqualRanges(result[0], foldRange(1, 100, false, FoldSource.provider, 'a1'), 'R1');\n\t\tassertEqualRanges(result[1], foldRange(20, 28, true, FoldSource.recovered, 'b1'), 'R2');\n\t\tassertEqualRanges(result[2], foldRange(30, 38, true, FoldSource.recovered, 'b2'), 'R3');\n\t});\n\n});\n"]}