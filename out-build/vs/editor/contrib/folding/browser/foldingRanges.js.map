{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/folding/browser/foldingRanges.ts"],"names":[],"mappings":"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","file":"foldingRanges.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport interface ILineRange {\n\tstartLineNumber: number;\n\tendLineNumber: number;\n}\n\nexport const enum FoldSource {\n\tprovider = 0,\n\tuserDefined = 1,\n\trecovered = 2\n}\n\nexport const foldSourceAbbr = {\n\t[FoldSource.provider]: ' ',\n\t[FoldSource.userDefined]: 'u',\n\t[FoldSource.recovered]: 'r',\n};\n\nexport interface FoldRange {\n\tstartLineNumber: number;\n\tendLineNumber: number;\n\ttype: string | undefined;\n\tisCollapsed: boolean;\n\tsource: FoldSource;\n}\n\nexport const MAX_FOLDING_REGIONS = 0xFFFF;\nexport const MAX_LINE_NUMBER = 0xFFFFFF;\n\nconst MASK_INDENT = 0xFF000000;\n\nclass BitField {\n\tprivate readonly _states: Uint32Array;\n\tconstructor(size: number) {\n\t\tconst numWords = Math.ceil(size / 32);\n\t\tthis._states = new Uint32Array(numWords);\n\t}\n\n\tpublic get(index: number): boolean {\n\t\tconst arrayIndex = (index / 32) | 0;\n\t\tconst bit = index % 32;\n\t\treturn (this._states[arrayIndex] & (1 << bit)) !== 0;\n\t}\n\n\tpublic set(index: number, newState: boolean) {\n\t\tconst arrayIndex = (index / 32) | 0;\n\t\tconst bit = index % 32;\n\t\tconst value = this._states[arrayIndex];\n\t\tif (newState) {\n\t\t\tthis._states[arrayIndex] = value | (1 << bit);\n\t\t} else {\n\t\t\tthis._states[arrayIndex] = value & ~(1 << bit);\n\t\t}\n\t}\n}\n\nexport class FoldingRegions {\n\tprivate readonly _startIndexes: Uint32Array;\n\tprivate readonly _endIndexes: Uint32Array;\n\tprivate readonly _collapseStates: BitField;\n\tprivate readonly _userDefinedStates: BitField;\n\tprivate readonly _recoveredStates: BitField;\n\n\tprivate _parentsComputed: boolean;\n\tprivate readonly _types: Array<string | undefined> | undefined;\n\n\tconstructor(startIndexes: Uint32Array, endIndexes: Uint32Array, types?: Array<string | undefined>) {\n\t\tif (startIndexes.length !== endIndexes.length || startIndexes.length > MAX_FOLDING_REGIONS) {\n\t\t\tthrow new Error('invalid startIndexes or endIndexes size');\n\t\t}\n\t\tthis._startIndexes = startIndexes;\n\t\tthis._endIndexes = endIndexes;\n\t\tthis._collapseStates = new BitField(startIndexes.length);\n\t\tthis._userDefinedStates = new BitField(startIndexes.length);\n\t\tthis._recoveredStates = new BitField(startIndexes.length);\n\t\tthis._types = types;\n\t\tthis._parentsComputed = false;\n\t}\n\n\tprivate ensureParentIndices() {\n\t\tif (!this._parentsComputed) {\n\t\t\tthis._parentsComputed = true;\n\t\t\tconst parentIndexes: number[] = [];\n\t\t\tconst isInsideLast = (startLineNumber: number, endLineNumber: number) => {\n\t\t\t\tconst index = parentIndexes[parentIndexes.length - 1];\n\t\t\t\treturn this.getStartLineNumber(index) <= startLineNumber && this.getEndLineNumber(index) >= endLineNumber;\n\t\t\t};\n\t\t\tfor (let i = 0, len = this._startIndexes.length; i < len; i++) {\n\t\t\t\tconst startLineNumber = this._startIndexes[i];\n\t\t\t\tconst endLineNumber = this._endIndexes[i];\n\t\t\t\tif (startLineNumber > MAX_LINE_NUMBER || endLineNumber > MAX_LINE_NUMBER) {\n\t\t\t\t\tthrow new Error('startLineNumber or endLineNumber must not exceed ' + MAX_LINE_NUMBER);\n\t\t\t\t}\n\t\t\t\twhile (parentIndexes.length > 0 && !isInsideLast(startLineNumber, endLineNumber)) {\n\t\t\t\t\tparentIndexes.pop();\n\t\t\t\t}\n\t\t\t\tconst parentIndex = parentIndexes.length > 0 ? parentIndexes[parentIndexes.length - 1] : -1;\n\t\t\t\tparentIndexes.push(i);\n\t\t\t\tthis._startIndexes[i] = startLineNumber + ((parentIndex & 0xFF) << 24);\n\t\t\t\tthis._endIndexes[i] = endLineNumber + ((parentIndex & 0xFF00) << 16);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic get length(): number {\n\t\treturn this._startIndexes.length;\n\t}\n\n\tpublic getStartLineNumber(index: number): number {\n\t\treturn this._startIndexes[index] & MAX_LINE_NUMBER;\n\t}\n\n\tpublic getEndLineNumber(index: number): number {\n\t\treturn this._endIndexes[index] & MAX_LINE_NUMBER;\n\t}\n\n\tpublic getType(index: number): string | undefined {\n\t\treturn this._types ? this._types[index] : undefined;\n\t}\n\n\tpublic hasTypes() {\n\t\treturn !!this._types;\n\t}\n\n\tpublic isCollapsed(index: number): boolean {\n\t\treturn this._collapseStates.get(index);\n\t}\n\n\tpublic setCollapsed(index: number, newState: boolean) {\n\t\tthis._collapseStates.set(index, newState);\n\t}\n\n\tprivate isUserDefined(index: number): boolean {\n\t\treturn this._userDefinedStates.get(index);\n\t}\n\n\tprivate setUserDefined(index: number, newState: boolean) {\n\t\treturn this._userDefinedStates.set(index, newState);\n\t}\n\n\tprivate isRecovered(index: number): boolean {\n\t\treturn this._recoveredStates.get(index);\n\t}\n\n\tprivate setRecovered(index: number, newState: boolean) {\n\t\treturn this._recoveredStates.set(index, newState);\n\t}\n\n\tpublic getSource(index: number): FoldSource {\n\t\tif (this.isUserDefined(index)) {\n\t\t\treturn FoldSource.userDefined;\n\t\t} else if (this.isRecovered(index)) {\n\t\t\treturn FoldSource.recovered;\n\t\t}\n\t\treturn FoldSource.provider;\n\t}\n\n\tpublic setSource(index: number, source: FoldSource): void {\n\t\tif (source === FoldSource.userDefined) {\n\t\t\tthis.setUserDefined(index, true);\n\t\t\tthis.setRecovered(index, false);\n\t\t} else if (source === FoldSource.recovered) {\n\t\t\tthis.setUserDefined(index, false);\n\t\t\tthis.setRecovered(index, true);\n\t\t} else {\n\t\t\tthis.setUserDefined(index, false);\n\t\t\tthis.setRecovered(index, false);\n\t\t}\n\t}\n\n\tpublic setCollapsedAllOfType(type: string, newState: boolean) {\n\t\tlet hasChanged = false;\n\t\tif (this._types) {\n\t\t\tfor (let i = 0; i < this._types.length; i++) {\n\t\t\t\tif (this._types[i] === type) {\n\t\t\t\t\tthis.setCollapsed(i, newState);\n\t\t\t\t\thasChanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn hasChanged;\n\t}\n\n\tpublic toRegion(index: number): FoldingRegion {\n\t\treturn new FoldingRegion(this, index);\n\t}\n\n\tpublic getParentIndex(index: number) {\n\t\tthis.ensureParentIndices();\n\t\tconst parent = ((this._startIndexes[index] & MASK_INDENT) >>> 24) + ((this._endIndexes[index] & MASK_INDENT) >>> 16);\n\t\tif (parent === MAX_FOLDING_REGIONS) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn parent;\n\t}\n\n\tpublic contains(index: number, line: number) {\n\t\treturn this.getStartLineNumber(index) <= line && this.getEndLineNumber(index) >= line;\n\t}\n\n\tprivate findIndex(line: number) {\n\t\tlet low = 0, high = this._startIndexes.length;\n\t\tif (high === 0) {\n\t\t\treturn -1; // no children\n\t\t}\n\t\twhile (low < high) {\n\t\t\tconst mid = Math.floor((low + high) / 2);\n\t\t\tif (line < this.getStartLineNumber(mid)) {\n\t\t\t\thigh = mid;\n\t\t\t} else {\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t}\n\t\treturn low - 1;\n\t}\n\n\tpublic findRange(line: number): number {\n\t\tlet index = this.findIndex(line);\n\t\tif (index >= 0) {\n\t\t\tconst endLineNumber = this.getEndLineNumber(index);\n\t\t\tif (endLineNumber >= line) {\n\t\t\t\treturn index;\n\t\t\t}\n\t\t\tindex = this.getParentIndex(index);\n\t\t\twhile (index !== -1) {\n\t\t\t\tif (this.contains(index, line)) {\n\t\t\t\t\treturn index;\n\t\t\t\t}\n\t\t\t\tindex = this.getParentIndex(index);\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\n\tpublic toString() {\n\t\tconst res: string[] = [];\n\t\tfor (let i = 0; i < this.length; i++) {\n\t\t\tres[i] = `[${foldSourceAbbr[this.getSource(i)]}${this.isCollapsed(i) ? '+' : '-'}] ${this.getStartLineNumber(i)}/${this.getEndLineNumber(i)}`;\n\t\t}\n\t\treturn res.join(', ');\n\t}\n\n\tpublic toFoldRange(index: number): FoldRange {\n\t\treturn <FoldRange>{\n\t\t\tstartLineNumber: this._startIndexes[index] & MAX_LINE_NUMBER,\n\t\t\tendLineNumber: this._endIndexes[index] & MAX_LINE_NUMBER,\n\t\t\ttype: this._types ? this._types[index] : undefined,\n\t\t\tisCollapsed: this.isCollapsed(index),\n\t\t\tsource: this.getSource(index)\n\t\t};\n\t}\n\n\tpublic static fromFoldRanges(ranges: FoldRange[]): FoldingRegions {\n\t\tconst rangesLength = ranges.length;\n\t\tconst startIndexes = new Uint32Array(rangesLength);\n\t\tconst endIndexes = new Uint32Array(rangesLength);\n\t\tlet types: Array<string | undefined> | undefined = [];\n\t\tlet gotTypes = false;\n\t\tfor (let i = 0; i < rangesLength; i++) {\n\t\t\tconst range = ranges[i];\n\t\t\tstartIndexes[i] = range.startLineNumber;\n\t\t\tendIndexes[i] = range.endLineNumber;\n\t\t\ttypes.push(range.type);\n\t\t\tif (range.type) {\n\t\t\t\tgotTypes = true;\n\t\t\t}\n\t\t}\n\t\tif (!gotTypes) {\n\t\t\ttypes = undefined;\n\t\t}\n\t\tconst regions = new FoldingRegions(startIndexes, endIndexes, types);\n\t\tfor (let i = 0; i < rangesLength; i++) {\n\t\t\tif (ranges[i].isCollapsed) {\n\t\t\t\tregions.setCollapsed(i, true);\n\t\t\t}\n\t\t\tregions.setSource(i, ranges[i].source);\n\t\t}\n\t\treturn regions;\n\t}\n\n\t/**\n\t * Two inputs, each a FoldingRegions or a FoldRange[], are merged.\n\t * Each input must be pre-sorted on startLineNumber.\n\t * The first list is assumed to always include all regions currently defined by range providers.\n\t * The second list only contains the previously collapsed and all manual ranges.\n\t * If the line position matches, the range of the new range is taken, and the range is no longer manual\n\t * When an entry in one list overlaps an entry in the other, the second list's entry \"wins\" and\n\t * overlapping entries in the first list are discarded.\n\t * Invalid entries are discarded. An entry is invalid if:\n\t * \t\tthe start and end line numbers aren't a valid range of line numbers,\n\t * \t\tit is out of sequence or has the same start line as a preceding entry,\n\t * \t\tit overlaps a preceding entry and is not fully contained by that entry.\n\t */\n\tpublic static sanitizeAndMerge(\n\t\trangesA: FoldingRegions | FoldRange[],\n\t\trangesB: FoldingRegions | FoldRange[],\n\t\tmaxLineNumber: number | undefined): FoldRange[] {\n\t\tmaxLineNumber = maxLineNumber ?? Number.MAX_VALUE;\n\n\t\tconst getIndexedFunction = (r: FoldingRegions | FoldRange[], limit: number) => {\n\t\t\treturn Array.isArray(r)\n\t\t\t\t? ((i: number) => { return (i < limit) ? r[i] : undefined; })\n\t\t\t\t: ((i: number) => { return (i < limit) ? r.toFoldRange(i) : undefined; });\n\t\t};\n\t\tconst getA = getIndexedFunction(rangesA, rangesA.length);\n\t\tconst getB = getIndexedFunction(rangesB, rangesB.length);\n\t\tlet indexA = 0;\n\t\tlet indexB = 0;\n\t\tlet nextA = getA(0);\n\t\tlet nextB = getB(0);\n\n\t\tconst stackedRanges: FoldRange[] = [];\n\t\tlet topStackedRange: FoldRange | undefined;\n\t\tlet prevLineNumber = 0;\n\t\tconst resultRanges: FoldRange[] = [];\n\n\t\twhile (nextA || nextB) {\n\n\t\t\tlet useRange: FoldRange | undefined = undefined;\n\t\t\tif (nextB && (!nextA || nextA.startLineNumber >= nextB.startLineNumber)) {\n\t\t\t\tif (nextA && nextA.startLineNumber === nextB.startLineNumber) {\n\t\t\t\t\tif (nextB.source === FoldSource.userDefined) {\n\t\t\t\t\t\t// a user defined range (possibly unfolded)\n\t\t\t\t\t\tuseRange = nextB;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// a previously folded range or a (possibly unfolded) recovered range\n\t\t\t\t\t\tuseRange = nextA;\n\t\t\t\t\t\tuseRange.isCollapsed = nextB.isCollapsed && nextA.endLineNumber === nextB.endLineNumber;\n\t\t\t\t\t\tuseRange.source = FoldSource.provider;\n\t\t\t\t\t}\n\t\t\t\t\tnextA = getA(++indexA); // not necessary, just for speed\n\t\t\t\t} else {\n\t\t\t\t\tuseRange = nextB;\n\t\t\t\t\tif (nextB.isCollapsed && nextB.source === FoldSource.provider) {\n\t\t\t\t\t\t// a previously collapsed range\n\t\t\t\t\t\tuseRange.source = FoldSource.recovered;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tnextB = getB(++indexB);\n\t\t\t} else {\n\t\t\t\t// nextA is next. The user folded B set takes precedence and we sometimes need to look\n\t\t\t\t// ahead in it to check for an upcoming conflict.\n\t\t\t\tlet scanIndex = indexB;\n\t\t\t\tlet prescanB = nextB;\n\t\t\t\twhile (true) {\n\t\t\t\t\tif (!prescanB || prescanB.startLineNumber > nextA!.endLineNumber) {\n\t\t\t\t\t\tuseRange = nextA;\n\t\t\t\t\t\tbreak; // no conflict, use this nextA\n\t\t\t\t\t}\n\t\t\t\t\tif (prescanB.source === FoldSource.userDefined && prescanB.endLineNumber > nextA!.endLineNumber) {\n\t\t\t\t\t\t// we found a user folded range, it wins\n\t\t\t\t\t\tbreak; // without setting nextResult, so this nextA gets skipped\n\t\t\t\t\t}\n\t\t\t\t\tprescanB = getB(++scanIndex);\n\t\t\t\t}\n\t\t\t\tnextA = getA(++indexA);\n\t\t\t}\n\n\t\t\tif (useRange) {\n\t\t\t\twhile (topStackedRange\n\t\t\t\t\t&& topStackedRange.endLineNumber < useRange.startLineNumber) {\n\t\t\t\t\ttopStackedRange = stackedRanges.pop();\n\t\t\t\t}\n\t\t\t\tif (useRange.endLineNumber > useRange.startLineNumber\n\t\t\t\t\t&& useRange.startLineNumber > prevLineNumber\n\t\t\t\t\t&& useRange.endLineNumber <= maxLineNumber\n\t\t\t\t\t&& (!topStackedRange\n\t\t\t\t\t\t|| topStackedRange.endLineNumber >= useRange.endLineNumber)) {\n\t\t\t\t\tresultRanges.push(useRange);\n\t\t\t\t\tprevLineNumber = useRange.startLineNumber;\n\t\t\t\t\tif (topStackedRange) {\n\t\t\t\t\t\tstackedRanges.push(topStackedRange);\n\t\t\t\t\t}\n\t\t\t\t\ttopStackedRange = useRange;\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t\treturn resultRanges;\n\t}\n\n}\n\nexport class FoldingRegion {\n\n\tconstructor(private readonly ranges: FoldingRegions, private index: number) {\n\t}\n\n\tpublic get startLineNumber() {\n\t\treturn this.ranges.getStartLineNumber(this.index);\n\t}\n\n\tpublic get endLineNumber() {\n\t\treturn this.ranges.getEndLineNumber(this.index);\n\t}\n\n\tpublic get regionIndex() {\n\t\treturn this.index;\n\t}\n\n\tpublic get parentIndex() {\n\t\treturn this.ranges.getParentIndex(this.index);\n\t}\n\n\tpublic get isCollapsed() {\n\t\treturn this.ranges.isCollapsed(this.index);\n\t}\n\n\tcontainedBy(range: ILineRange): boolean {\n\t\treturn range.startLineNumber <= this.startLineNumber && range.endLineNumber >= this.endLineNumber;\n\t}\n\tcontainsLine(lineNumber: number) {\n\t\treturn this.startLineNumber <= lineNumber && lineNumber <= this.endLineNumber;\n\t}\n\thidesLine(lineNumber: number) {\n\t\treturn this.startLineNumber < lineNumber && lineNumber <= this.endLineNumber;\n\t}\n}\n"]}