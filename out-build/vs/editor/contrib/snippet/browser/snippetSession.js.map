{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/snippet/browser/snippetSession.ts"],"names":[],"mappings":"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","file":"snippetSession.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { groupBy } from 'vs/base/common/arrays';\nimport { CharCode } from 'vs/base/common/charCode';\nimport { dispose } from 'vs/base/common/lifecycle';\nimport { getLeadingWhitespace } from 'vs/base/common/strings';\nimport 'vs/css!./snippetSession';\nimport { IActiveCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorOption } from 'vs/editor/common/config/editorOptions';\nimport { EditOperation, ISingleEditOperation } from 'vs/editor/common/core/editOperation';\nimport { IPosition } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { TextChange } from 'vs/editor/common/core/textChange';\nimport { ILanguageConfigurationService } from 'vs/editor/common/languages/languageConfigurationRegistry';\nimport { IIdentifiedSingleEditOperation, ITextModel, TrackedRangeStickiness } from 'vs/editor/common/model';\nimport { ModelDecorationOptions } from 'vs/editor/common/model/textModel';\nimport { OvertypingCapturer } from 'vs/editor/contrib/suggest/browser/suggestOvertypingCapturer';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { Choice, Marker, Placeholder, SnippetParser, Text, TextmateSnippet } from './snippetParser';\nimport { ClipboardBasedVariableResolver, CommentBasedVariableResolver, CompositeSnippetVariableResolver, ModelBasedVariableResolver, RandomBasedVariableResolver, SelectionBasedVariableResolver, TimeBasedVariableResolver, WorkspaceBasedVariableResolver } from './snippetVariables';\n\nexport class OneSnippet {\n\n\tprivate _placeholderDecorations?: Map<Placeholder, string>;\n\tprivate _placeholderGroups: Placeholder[][];\n\tprivate _offset: number = -1;\n\t_placeholderGroupsIdx: number;\n\t_nestingLevel: number = 1;\n\n\tprivate static readonly _decor = {\n\t\tactive: ModelDecorationOptions.register({ description: 'snippet-placeholder-1', stickiness: TrackedRangeStickiness.AlwaysGrowsWhenTypingAtEdges, className: 'snippet-placeholder' }),\n\t\tinactive: ModelDecorationOptions.register({ description: 'snippet-placeholder-2', stickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, className: 'snippet-placeholder' }),\n\t\tactiveFinal: ModelDecorationOptions.register({ description: 'snippet-placeholder-3', stickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, className: 'finish-snippet-placeholder' }),\n\t\tinactiveFinal: ModelDecorationOptions.register({ description: 'snippet-placeholder-4', stickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges, className: 'finish-snippet-placeholder' }),\n\t};\n\n\tconstructor(\n\t\tprivate readonly _editor: IActiveCodeEditor,\n\t\tprivate readonly _snippet: TextmateSnippet,\n\t\tprivate readonly _snippetLineLeadingWhitespace: string\n\t) {\n\t\tthis._placeholderGroups = groupBy(_snippet.placeholders, Placeholder.compareByIndex);\n\t\tthis._placeholderGroupsIdx = -1;\n\t}\n\n\tinitialize(textChange: TextChange): void {\n\t\tthis._offset = textChange.newPosition;\n\t}\n\n\tdispose(): void {\n\t\tif (this._placeholderDecorations) {\n\t\t\tthis._editor.removeDecorations([...this._placeholderDecorations.values()]);\n\t\t}\n\t\tthis._placeholderGroups.length = 0;\n\t}\n\n\tprivate _initDecorations(): void {\n\n\t\tif (this._offset === -1) {\n\t\t\tthrow new Error(`Snippet not initialized!`);\n\t\t}\n\n\t\tif (this._placeholderDecorations) {\n\t\t\t// already initialized\n\t\t\treturn;\n\t\t}\n\n\t\tthis._placeholderDecorations = new Map<Placeholder, string>();\n\t\tconst model = this._editor.getModel();\n\n\t\tthis._editor.changeDecorations(accessor => {\n\t\t\t// create a decoration for each placeholder\n\t\t\tfor (const placeholder of this._snippet.placeholders) {\n\t\t\t\tconst placeholderOffset = this._snippet.offset(placeholder);\n\t\t\t\tconst placeholderLen = this._snippet.fullLen(placeholder);\n\t\t\t\tconst range = Range.fromPositions(\n\t\t\t\t\tmodel.getPositionAt(this._offset + placeholderOffset),\n\t\t\t\t\tmodel.getPositionAt(this._offset + placeholderOffset + placeholderLen)\n\t\t\t\t);\n\t\t\t\tconst options = placeholder.isFinalTabstop ? OneSnippet._decor.inactiveFinal : OneSnippet._decor.inactive;\n\t\t\t\tconst handle = accessor.addDecoration(range, options);\n\t\t\t\tthis._placeholderDecorations!.set(placeholder, handle);\n\t\t\t}\n\t\t});\n\t}\n\n\tmove(fwd: boolean | undefined): Selection[] {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn [];\n\t\t}\n\n\t\tthis._initDecorations();\n\n\t\t// Transform placeholder text if necessary\n\t\tif (this._placeholderGroupsIdx >= 0) {\n\t\t\tconst operations: ISingleEditOperation[] = [];\n\n\t\t\tfor (const placeholder of this._placeholderGroups[this._placeholderGroupsIdx]) {\n\t\t\t\t// Check if the placeholder has a transformation\n\t\t\t\tif (placeholder.transform) {\n\t\t\t\t\tconst id = this._placeholderDecorations!.get(placeholder)!;\n\t\t\t\t\tconst range = this._editor.getModel().getDecorationRange(id)!;\n\t\t\t\t\tconst currentValue = this._editor.getModel().getValueInRange(range);\n\t\t\t\t\tconst transformedValueLines = placeholder.transform.resolve(currentValue).split(/\\r\\n|\\r|\\n/);\n\t\t\t\t\t// fix indentation for transformed lines\n\t\t\t\t\tfor (let i = 1; i < transformedValueLines.length; i++) {\n\t\t\t\t\t\ttransformedValueLines[i] = this._editor.getModel().normalizeIndentation(this._snippetLineLeadingWhitespace + transformedValueLines[i]);\n\t\t\t\t\t}\n\t\t\t\t\toperations.push(EditOperation.replace(range, transformedValueLines.join(this._editor.getModel().getEOL())));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (operations.length > 0) {\n\t\t\t\tthis._editor.executeEdits('snippet.placeholderTransform', operations);\n\t\t\t}\n\t\t}\n\n\t\tlet couldSkipThisPlaceholder = false;\n\t\tif (fwd === true && this._placeholderGroupsIdx < this._placeholderGroups.length - 1) {\n\t\t\tthis._placeholderGroupsIdx += 1;\n\t\t\tcouldSkipThisPlaceholder = true;\n\n\t\t} else if (fwd === false && this._placeholderGroupsIdx > 0) {\n\t\t\tthis._placeholderGroupsIdx -= 1;\n\t\t\tcouldSkipThisPlaceholder = true;\n\n\t\t} else {\n\t\t\t// the selection of the current placeholder might\n\t\t\t// not acurate any more -> simply restore it\n\t\t}\n\n\t\tconst newSelections = this._editor.getModel().changeDecorations(accessor => {\n\n\t\t\tconst activePlaceholders = new Set<Placeholder>();\n\n\t\t\t// change stickiness to always grow when typing at its edges\n\t\t\t// because these decorations represent the currently active\n\t\t\t// tabstop.\n\t\t\t// Special case #1: reaching the final tabstop\n\t\t\t// Special case #2: placeholders enclosing active placeholders\n\t\t\tconst selections: Selection[] = [];\n\t\t\tfor (const placeholder of this._placeholderGroups[this._placeholderGroupsIdx]) {\n\t\t\t\tconst id = this._placeholderDecorations!.get(placeholder)!;\n\t\t\t\tconst range = this._editor.getModel().getDecorationRange(id)!;\n\t\t\t\tselections.push(new Selection(range.startLineNumber, range.startColumn, range.endLineNumber, range.endColumn));\n\n\t\t\t\t// consider to skip this placeholder index when the decoration\n\t\t\t\t// range is empty but when the placeholder wasn't. that's a strong\n\t\t\t\t// hint that the placeholder has been deleted. (all placeholder must match this)\n\t\t\t\tcouldSkipThisPlaceholder = couldSkipThisPlaceholder && this._hasPlaceholderBeenCollapsed(placeholder);\n\n\t\t\t\taccessor.changeDecorationOptions(id, placeholder.isFinalTabstop ? OneSnippet._decor.activeFinal : OneSnippet._decor.active);\n\t\t\t\tactivePlaceholders.add(placeholder);\n\n\t\t\t\tfor (const enclosingPlaceholder of this._snippet.enclosingPlaceholders(placeholder)) {\n\t\t\t\t\tconst id = this._placeholderDecorations!.get(enclosingPlaceholder)!;\n\t\t\t\t\taccessor.changeDecorationOptions(id, enclosingPlaceholder.isFinalTabstop ? OneSnippet._decor.activeFinal : OneSnippet._decor.active);\n\t\t\t\t\tactivePlaceholders.add(enclosingPlaceholder);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// change stickness to never grow when typing at its edges\n\t\t\t// so that in-active tabstops never grow\n\t\t\tfor (const [placeholder, id] of this._placeholderDecorations!) {\n\t\t\t\tif (!activePlaceholders.has(placeholder)) {\n\t\t\t\t\taccessor.changeDecorationOptions(id, placeholder.isFinalTabstop ? OneSnippet._decor.inactiveFinal : OneSnippet._decor.inactive);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn selections;\n\t\t});\n\n\t\treturn !couldSkipThisPlaceholder ? newSelections ?? [] : this.move(fwd);\n\t}\n\n\tprivate _hasPlaceholderBeenCollapsed(placeholder: Placeholder): boolean {\n\t\t// A placeholder is empty when it wasn't empty when authored but\n\t\t// when its tracking decoration is empty. This also applies to all\n\t\t// potential parent placeholders\n\t\tlet marker: Marker | undefined = placeholder;\n\t\twhile (marker) {\n\t\t\tif (marker instanceof Placeholder) {\n\t\t\t\tconst id = this._placeholderDecorations!.get(marker)!;\n\t\t\t\tconst range = this._editor.getModel().getDecorationRange(id)!;\n\t\t\t\tif (range.isEmpty() && marker.toString().length > 0) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmarker = marker.parent;\n\t\t}\n\t\treturn false;\n\t}\n\n\tget isAtFirstPlaceholder() {\n\t\treturn this._placeholderGroupsIdx <= 0 || this._placeholderGroups.length === 0;\n\t}\n\n\tget isAtLastPlaceholder() {\n\t\treturn this._placeholderGroupsIdx === this._placeholderGroups.length - 1;\n\t}\n\n\tget hasPlaceholder() {\n\t\treturn this._snippet.placeholders.length > 0;\n\t}\n\n\t/**\n\t * A snippet is trivial when it has no placeholder or only a final placeholder at\n\t * its very end\n\t */\n\tget isTrivialSnippet(): boolean {\n\t\tif (this._snippet.placeholders.length === 0) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this._snippet.placeholders.length === 1) {\n\t\t\tconst [placeholder] = this._snippet.placeholders;\n\t\t\tif (placeholder.isFinalTabstop) {\n\t\t\t\tif (this._snippet.rightMostDescendant === placeholder) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tcomputePossibleSelections() {\n\t\tconst result = new Map<number, Range[]>();\n\t\tfor (const placeholdersWithEqualIndex of this._placeholderGroups) {\n\t\t\tlet ranges: Range[] | undefined;\n\n\t\t\tfor (const placeholder of placeholdersWithEqualIndex) {\n\t\t\t\tif (placeholder.isFinalTabstop) {\n\t\t\t\t\t// ignore those\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (!ranges) {\n\t\t\t\t\tranges = [];\n\t\t\t\t\tresult.set(placeholder.index, ranges);\n\t\t\t\t}\n\n\t\t\t\tconst id = this._placeholderDecorations!.get(placeholder)!;\n\t\t\t\tconst range = this._editor.getModel().getDecorationRange(id);\n\t\t\t\tif (!range) {\n\t\t\t\t\t// one of the placeholder lost its decoration and\n\t\t\t\t\t// therefore we bail out and pretend the placeholder\n\t\t\t\t\t// (with its mirrors) doesn't exist anymore.\n\t\t\t\t\tresult.delete(placeholder.index);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tranges.push(range);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tget activeChoice(): { choice: Choice; range: Range } | undefined {\n\t\tif (!this._placeholderDecorations) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst placeholder = this._placeholderGroups[this._placeholderGroupsIdx][0];\n\t\tif (!placeholder?.choice) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst id = this._placeholderDecorations.get(placeholder);\n\t\tif (!id) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst range = this._editor.getModel().getDecorationRange(id);\n\t\tif (!range) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn { range, choice: placeholder.choice };\n\t}\n\n\tget hasChoice(): boolean {\n\t\tlet result = false;\n\t\tthis._snippet.walk(marker => {\n\t\t\tresult = marker instanceof Choice;\n\t\t\treturn !result;\n\t\t});\n\t\treturn result;\n\t}\n\n\tmerge(others: OneSnippet[]): void {\n\n\t\tconst model = this._editor.getModel();\n\t\tthis._nestingLevel *= 10;\n\n\t\tthis._editor.changeDecorations(accessor => {\n\n\t\t\t// For each active placeholder take one snippet and merge it\n\t\t\t// in that the placeholder (can be many for `$1foo$1foo`). Because\n\t\t\t// everything is sorted by editor selection we can simply remove\n\t\t\t// elements from the beginning of the array\n\t\t\tfor (const placeholder of this._placeholderGroups[this._placeholderGroupsIdx]) {\n\t\t\t\tconst nested = others.shift()!;\n\t\t\t\tconsole.assert(nested._offset !== -1);\n\t\t\t\tconsole.assert(!nested._placeholderDecorations);\n\n\t\t\t\t// Massage placeholder-indicies of the nested snippet to be\n\t\t\t\t// sorted right after the insertion point. This ensures we move\n\t\t\t\t// through the placeholders in the correct order\n\t\t\t\tconst indexLastPlaceholder = nested._snippet.placeholderInfo.last!.index;\n\n\t\t\t\tfor (const nestedPlaceholder of nested._snippet.placeholderInfo.all) {\n\t\t\t\t\tif (nestedPlaceholder.isFinalTabstop) {\n\t\t\t\t\t\tnestedPlaceholder.index = placeholder.index + ((indexLastPlaceholder + 1) / this._nestingLevel);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnestedPlaceholder.index = placeholder.index + (nestedPlaceholder.index / this._nestingLevel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._snippet.replace(placeholder, nested._snippet.children);\n\n\t\t\t\t// Remove the placeholder at which position are inserting\n\t\t\t\t// the snippet and also remove its decoration.\n\t\t\t\tconst id = this._placeholderDecorations!.get(placeholder)!;\n\t\t\t\taccessor.removeDecoration(id);\n\t\t\t\tthis._placeholderDecorations!.delete(placeholder);\n\n\t\t\t\t// For each *new* placeholder we create decoration to monitor\n\t\t\t\t// how and if it grows/shrinks.\n\t\t\t\tfor (const placeholder of nested._snippet.placeholders) {\n\t\t\t\t\tconst placeholderOffset = nested._snippet.offset(placeholder);\n\t\t\t\t\tconst placeholderLen = nested._snippet.fullLen(placeholder);\n\t\t\t\t\tconst range = Range.fromPositions(\n\t\t\t\t\t\tmodel.getPositionAt(nested._offset + placeholderOffset),\n\t\t\t\t\t\tmodel.getPositionAt(nested._offset + placeholderOffset + placeholderLen)\n\t\t\t\t\t);\n\t\t\t\t\tconst handle = accessor.addDecoration(range, OneSnippet._decor.inactive);\n\t\t\t\t\tthis._placeholderDecorations!.set(placeholder, handle);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Last, re-create the placeholder groups by sorting placeholders by their index.\n\t\t\tthis._placeholderGroups = groupBy(this._snippet.placeholders, Placeholder.compareByIndex);\n\t\t});\n\t}\n\n\tgetEnclosingRange(): Range | undefined {\n\t\tlet result: Range | undefined;\n\t\tconst model = this._editor.getModel();\n\t\tfor (const decorationId of this._placeholderDecorations!.values()) {\n\t\t\tconst placeholderRange = model.getDecorationRange(decorationId) ?? undefined;\n\t\t\tif (!result) {\n\t\t\t\tresult = placeholderRange;\n\t\t\t} else {\n\t\t\t\tresult = result.plusRange(placeholderRange!);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\nexport interface ISnippetSessionInsertOptions {\n\toverwriteBefore: number;\n\toverwriteAfter: number;\n\tadjustWhitespace: boolean;\n\tclipboardText: string | undefined;\n\tovertypingCapturer: OvertypingCapturer | undefined;\n}\n\nconst _defaultOptions: ISnippetSessionInsertOptions = {\n\toverwriteBefore: 0,\n\toverwriteAfter: 0,\n\tadjustWhitespace: true,\n\tclipboardText: undefined,\n\tovertypingCapturer: undefined\n};\n\nexport interface ISnippetEdit {\n\trange: Range;\n\ttemplate: string;\n}\n\nexport class SnippetSession {\n\n\tstatic adjustWhitespace(model: ITextModel, position: IPosition, adjustIndentation: boolean, snippet: TextmateSnippet, filter?: Set<Marker>): string {\n\t\tconst line = model.getLineContent(position.lineNumber);\n\t\tconst lineLeadingWhitespace = getLeadingWhitespace(line, 0, position.column - 1);\n\n\t\t// the snippet as inserted\n\t\tlet snippetTextString: string | undefined;\n\n\t\tsnippet.walk(marker => {\n\t\t\t// all text elements that are not inside choice\n\t\t\tif (!(marker instanceof Text) || marker.parent instanceof Choice) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// check with filter (iff provided)\n\t\t\tif (filter && !filter.has(marker)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst lines = marker.value.split(/\\r\\n|\\r|\\n/);\n\n\t\t\tif (adjustIndentation) {\n\t\t\t\t// adjust indentation of snippet test\n\t\t\t\t// -the snippet-start doesn't get extra-indented (lineLeadingWhitespace), only normalized\n\t\t\t\t// -all N+1 lines get extra-indented and normalized\n\t\t\t\t// -the text start get extra-indented and normalized when following a linebreak\n\t\t\t\tconst offset = snippet.offset(marker);\n\t\t\t\tif (offset === 0) {\n\t\t\t\t\t// snippet start\n\t\t\t\t\tlines[0] = model.normalizeIndentation(lines[0]);\n\n\t\t\t\t} else {\n\t\t\t\t\t// check if text start is after a linebreak\n\t\t\t\t\tsnippetTextString = snippetTextString ?? snippet.toString();\n\t\t\t\t\tconst prevChar = snippetTextString.charCodeAt(offset - 1);\n\t\t\t\t\tif (prevChar === CharCode.LineFeed || prevChar === CharCode.CarriageReturn) {\n\t\t\t\t\t\tlines[0] = model.normalizeIndentation(lineLeadingWhitespace + lines[0]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (let i = 1; i < lines.length; i++) {\n\t\t\t\t\tlines[i] = model.normalizeIndentation(lineLeadingWhitespace + lines[i]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst newValue = lines.join(model.getEOL());\n\t\t\tif (newValue !== marker.value) {\n\t\t\t\tmarker.parent.replace(marker, [new Text(newValue)]);\n\t\t\t\tsnippetTextString = undefined;\n\t\t\t}\n\t\t\treturn true;\n\t\t});\n\n\t\treturn lineLeadingWhitespace;\n\t}\n\n\tstatic adjustSelection(model: ITextModel, selection: Selection, overwriteBefore: number, overwriteAfter: number): Selection {\n\t\tif (overwriteBefore !== 0 || overwriteAfter !== 0) {\n\t\t\t// overwrite[Before|After] is compute using the position, not the whole\n\t\t\t// selection. therefore we adjust the selection around that position\n\t\t\tconst { positionLineNumber, positionColumn } = selection;\n\t\t\tconst positionColumnBefore = positionColumn - overwriteBefore;\n\t\t\tconst positionColumnAfter = positionColumn + overwriteAfter;\n\n\t\t\tconst range = model.validateRange({\n\t\t\t\tstartLineNumber: positionLineNumber,\n\t\t\t\tstartColumn: positionColumnBefore,\n\t\t\t\tendLineNumber: positionLineNumber,\n\t\t\t\tendColumn: positionColumnAfter\n\t\t\t});\n\n\t\t\tselection = Selection.createWithDirection(\n\t\t\t\trange.startLineNumber, range.startColumn,\n\t\t\t\trange.endLineNumber, range.endColumn,\n\t\t\t\tselection.getDirection()\n\t\t\t);\n\t\t}\n\t\treturn selection;\n\t}\n\n\tstatic createEditsAndSnippetsFromSelections(editor: IActiveCodeEditor, template: string, overwriteBefore: number, overwriteAfter: number, enforceFinalTabstop: boolean, adjustWhitespace: boolean, clipboardText: string | undefined, overtypingCapturer: OvertypingCapturer | undefined, languageConfigurationService: ILanguageConfigurationService): { edits: IIdentifiedSingleEditOperation[]; snippets: OneSnippet[] } {\n\t\tconst edits: IIdentifiedSingleEditOperation[] = [];\n\t\tconst snippets: OneSnippet[] = [];\n\n\t\tif (!editor.hasModel()) {\n\t\t\treturn { edits, snippets };\n\t\t}\n\t\tconst model = editor.getModel();\n\n\t\tconst workspaceService = editor.invokeWithinContext(accessor => accessor.get(IWorkspaceContextService));\n\t\tconst modelBasedVariableResolver = editor.invokeWithinContext(accessor => new ModelBasedVariableResolver(accessor.get(ILabelService), model));\n\t\tconst readClipboardText = () => clipboardText;\n\n\t\t// know what text the overwrite[Before|After] extensions\n\t\t// of the primary curser have selected because only when\n\t\t// secondary selections extend to the same text we can grow them\n\t\tconst firstBeforeText = model.getValueInRange(SnippetSession.adjustSelection(model, editor.getSelection(), overwriteBefore, 0));\n\t\tconst firstAfterText = model.getValueInRange(SnippetSession.adjustSelection(model, editor.getSelection(), 0, overwriteAfter));\n\n\t\t// remember the first non-whitespace column to decide if\n\t\t// `keepWhitespace` should be overruled for secondary selections\n\t\tconst firstLineFirstNonWhitespace = model.getLineFirstNonWhitespaceColumn(editor.getSelection().positionLineNumber);\n\n\t\t// sort selections by their start position but remeber\n\t\t// the original index. that allows you to create correct\n\t\t// offset-based selection logic without changing the\n\t\t// primary selection\n\t\tconst indexedSelections = editor.getSelections()\n\t\t\t.map((selection, idx) => ({ selection, idx }))\n\t\t\t.sort((a, b) => Range.compareRangesUsingStarts(a.selection, b.selection));\n\n\t\tfor (const { selection, idx } of indexedSelections) {\n\n\t\t\t// extend selection with the `overwriteBefore` and `overwriteAfter` and then\n\t\t\t// compare if this matches the extensions of the primary selection\n\t\t\tlet extensionBefore = SnippetSession.adjustSelection(model, selection, overwriteBefore, 0);\n\t\t\tlet extensionAfter = SnippetSession.adjustSelection(model, selection, 0, overwriteAfter);\n\t\t\tif (firstBeforeText !== model.getValueInRange(extensionBefore)) {\n\t\t\t\textensionBefore = selection;\n\t\t\t}\n\t\t\tif (firstAfterText !== model.getValueInRange(extensionAfter)) {\n\t\t\t\textensionAfter = selection;\n\t\t\t}\n\n\t\t\t// merge the before and after selection into one\n\t\t\tconst snippetSelection = selection\n\t\t\t\t.setStartPosition(extensionBefore.startLineNumber, extensionBefore.startColumn)\n\t\t\t\t.setEndPosition(extensionAfter.endLineNumber, extensionAfter.endColumn);\n\n\t\t\tconst snippet = new SnippetParser().parse(template, true, enforceFinalTabstop);\n\n\t\t\t// adjust the template string to match the indentation and\n\t\t\t// whitespace rules of this insert location (can be different for each cursor)\n\t\t\t// happens when being asked for (default) or when this is a secondary\n\t\t\t// cursor and the leading whitespace is different\n\t\t\tconst start = snippetSelection.getStartPosition();\n\t\t\tconst snippetLineLeadingWhitespace = SnippetSession.adjustWhitespace(\n\t\t\t\tmodel, start,\n\t\t\t\tadjustWhitespace || (idx > 0 && firstLineFirstNonWhitespace !== model.getLineFirstNonWhitespaceColumn(selection.positionLineNumber)),\n\t\t\t\tsnippet,\n\t\t\t);\n\n\t\t\tsnippet.resolveVariables(new CompositeSnippetVariableResolver([\n\t\t\t\tmodelBasedVariableResolver,\n\t\t\t\tnew ClipboardBasedVariableResolver(readClipboardText, idx, indexedSelections.length, editor.getOption(EditorOption.multiCursorPaste) === 'spread'),\n\t\t\t\tnew SelectionBasedVariableResolver(model, selection, idx, overtypingCapturer),\n\t\t\t\tnew CommentBasedVariableResolver(model, selection, languageConfigurationService),\n\t\t\t\tnew TimeBasedVariableResolver,\n\t\t\t\tnew WorkspaceBasedVariableResolver(workspaceService),\n\t\t\t\tnew RandomBasedVariableResolver,\n\t\t\t]));\n\n\t\t\t// store snippets with the index of their originating selection.\n\t\t\t// that ensures the primiary cursor stays primary despite not being\n\t\t\t// the one with lowest start position\n\t\t\tedits[idx] = EditOperation.replace(snippetSelection, snippet.toString());\n\t\t\tedits[idx].identifier = { major: idx, minor: 0 }; // mark the edit so only our undo edits will be used to generate end cursors\n\t\t\tedits[idx]._isTracked = true;\n\t\t\tsnippets[idx] = new OneSnippet(editor, snippet, snippetLineLeadingWhitespace);\n\t\t}\n\n\t\treturn { edits, snippets };\n\t}\n\n\tstatic createEditsAndSnippetsFromEdits(editor: IActiveCodeEditor, snippetEdits: ISnippetEdit[], enforceFinalTabstop: boolean, adjustWhitespace: boolean, clipboardText: string | undefined, overtypingCapturer: OvertypingCapturer | undefined, languageConfigurationService: ILanguageConfigurationService): { edits: IIdentifiedSingleEditOperation[]; snippets: OneSnippet[] } {\n\n\t\tif (!editor.hasModel() || snippetEdits.length === 0) {\n\t\t\treturn { edits: [], snippets: [] };\n\t\t}\n\n\t\tconst edits: IIdentifiedSingleEditOperation[] = [];\n\t\tconst model = editor.getModel();\n\n\t\tconst parser = new SnippetParser();\n\t\tconst snippet = new TextmateSnippet();\n\n\t\t// snippet variables resolver\n\t\tconst resolver = new CompositeSnippetVariableResolver([\n\t\t\teditor.invokeWithinContext(accessor => new ModelBasedVariableResolver(accessor.get(ILabelService), model)),\n\t\t\tnew ClipboardBasedVariableResolver(() => clipboardText, 0, editor.getSelections().length, editor.getOption(EditorOption.multiCursorPaste) === 'spread'),\n\t\t\tnew SelectionBasedVariableResolver(model, editor.getSelection(), 0, overtypingCapturer),\n\t\t\tnew CommentBasedVariableResolver(model, editor.getSelection(), languageConfigurationService),\n\t\t\tnew TimeBasedVariableResolver,\n\t\t\tnew WorkspaceBasedVariableResolver(editor.invokeWithinContext(accessor => accessor.get(IWorkspaceContextService))),\n\t\t\tnew RandomBasedVariableResolver,\n\t\t]);\n\n\t\t//\n\t\tsnippetEdits = snippetEdits.sort((a, b) => Range.compareRangesUsingStarts(a.range, b.range));\n\t\tlet offset = 0;\n\t\tfor (let i = 0; i < snippetEdits.length; i++) {\n\n\t\t\tconst { range, template } = snippetEdits[i];\n\n\t\t\t// gaps between snippet edits are appended as text nodes. this\n\t\t\t// ensures placeholder-offsets are later correct\n\t\t\tif (i > 0) {\n\t\t\t\tconst lastRange = snippetEdits[i - 1].range;\n\t\t\t\tconst textRange = Range.fromPositions(lastRange.getEndPosition(), range.getStartPosition());\n\t\t\t\tconst textNode = new Text(model.getValueInRange(textRange));\n\t\t\t\tsnippet.appendChild(textNode);\n\t\t\t\toffset += textNode.value.length;\n\t\t\t}\n\n\t\t\tconst newNodes = parser.parseFragment(template, snippet);\n\t\t\tSnippetSession.adjustWhitespace(model, range.getStartPosition(), true, snippet, new Set(newNodes));\n\t\t\tsnippet.resolveVariables(resolver);\n\n\t\t\tconst snippetText = snippet.toString();\n\t\t\tconst snippetFragmentText = snippetText.slice(offset);\n\t\t\toffset = snippetText.length;\n\n\t\t\t// make edit\n\t\t\tconst edit: IIdentifiedSingleEditOperation = EditOperation.replace(range, snippetFragmentText);\n\t\t\tedit.identifier = { major: i, minor: 0 }; // mark the edit so only our undo edits will be used to generate end cursors\n\t\t\tedit._isTracked = true;\n\t\t\tedits.push(edit);\n\t\t}\n\n\t\t//\n\t\tparser.ensureFinalTabstop(snippet, enforceFinalTabstop, true);\n\n\t\treturn {\n\t\t\tedits,\n\t\t\tsnippets: [new OneSnippet(editor, snippet, '')]\n\t\t};\n\t}\n\n\tprivate readonly _templateMerges: [number, number, string | ISnippetEdit[]][] = [];\n\tprivate _snippets: OneSnippet[] = [];\n\n\tconstructor(\n\t\tprivate readonly _editor: IActiveCodeEditor,\n\t\tprivate readonly _template: string | ISnippetEdit[],\n\t\tprivate readonly _options: ISnippetSessionInsertOptions = _defaultOptions,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService\n\t) { }\n\n\tdispose(): void {\n\t\tdispose(this._snippets);\n\t}\n\n\t_logInfo(): string {\n\t\treturn `template=\"${this._template}\", merged_templates=\"${this._templateMerges.join(' -> ')}\"`;\n\t}\n\n\tinsert(): void {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// make insert edit and start with first selections\n\t\tconst { edits, snippets } = typeof this._template === 'string'\n\t\t\t? SnippetSession.createEditsAndSnippetsFromSelections(this._editor, this._template, this._options.overwriteBefore, this._options.overwriteAfter, false, this._options.adjustWhitespace, this._options.clipboardText, this._options.overtypingCapturer, this._languageConfigurationService)\n\t\t\t: SnippetSession.createEditsAndSnippetsFromEdits(this._editor, this._template, false, this._options.adjustWhitespace, this._options.clipboardText, this._options.overtypingCapturer, this._languageConfigurationService);\n\n\t\tthis._snippets = snippets;\n\n\t\tthis._editor.executeEdits('snippet', edits, _undoEdits => {\n\t\t\t// Sometimes, the text buffer will remove automatic whitespace when doing any edits,\n\t\t\t// so we need to look only at the undo edits relevant for us.\n\t\t\t// Our edits have an identifier set so that's how we can distinguish them\n\t\t\tconst undoEdits = _undoEdits.filter(edit => !!edit.identifier);\n\t\t\tfor (let idx = 0; idx < snippets.length; idx++) {\n\t\t\t\tsnippets[idx].initialize(undoEdits[idx].textChange);\n\t\t\t}\n\n\t\t\tif (this._snippets[0].hasPlaceholder) {\n\t\t\t\treturn this._move(true);\n\t\t\t} else {\n\t\t\t\treturn undoEdits\n\t\t\t\t\t.map(edit => Selection.fromPositions(edit.range.getEndPosition()));\n\t\t\t}\n\t\t});\n\t\tthis._editor.revealRange(this._editor.getSelections()[0]);\n\t}\n\n\tmerge(template: string, options: ISnippetSessionInsertOptions = _defaultOptions): void {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tthis._templateMerges.push([this._snippets[0]._nestingLevel, this._snippets[0]._placeholderGroupsIdx, template]);\n\t\tconst { edits, snippets } = SnippetSession.createEditsAndSnippetsFromSelections(this._editor, template, options.overwriteBefore, options.overwriteAfter, true, options.adjustWhitespace, options.clipboardText, options.overtypingCapturer, this._languageConfigurationService);\n\n\t\tthis._editor.executeEdits('snippet', edits, _undoEdits => {\n\t\t\t// Sometimes, the text buffer will remove automatic whitespace when doing any edits,\n\t\t\t// so we need to look only at the undo edits relevant for us.\n\t\t\t// Our edits have an identifier set so that's how we can distinguish them\n\t\t\tconst undoEdits = _undoEdits.filter(edit => !!edit.identifier);\n\t\t\tfor (let idx = 0; idx < snippets.length; idx++) {\n\t\t\t\tsnippets[idx].initialize(undoEdits[idx].textChange);\n\t\t\t}\n\n\t\t\t// Trivial snippets have no placeholder or are just the final placeholder. That means they\n\t\t\t// are just text insertions and we don't need to merge the nested snippet into the existing\n\t\t\t// snippet\n\t\t\tconst isTrivialSnippet = snippets[0].isTrivialSnippet;\n\t\t\tif (!isTrivialSnippet) {\n\t\t\t\tfor (const snippet of this._snippets) {\n\t\t\t\t\tsnippet.merge(snippets);\n\t\t\t\t}\n\t\t\t\tconsole.assert(snippets.length === 0);\n\t\t\t}\n\n\t\t\tif (this._snippets[0].hasPlaceholder && !isTrivialSnippet) {\n\t\t\t\treturn this._move(undefined);\n\t\t\t} else {\n\t\t\t\treturn undoEdits.map(edit => Selection.fromPositions(edit.range.getEndPosition()));\n\t\t\t}\n\t\t});\n\t}\n\n\tnext(): void {\n\t\tconst newSelections = this._move(true);\n\t\tthis._editor.setSelections(newSelections);\n\t\tthis._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition());\n\t}\n\n\tprev(): void {\n\t\tconst newSelections = this._move(false);\n\t\tthis._editor.setSelections(newSelections);\n\t\tthis._editor.revealPositionInCenterIfOutsideViewport(newSelections[0].getPosition());\n\t}\n\n\tprivate _move(fwd: boolean | undefined): Selection[] {\n\t\tconst selections: Selection[] = [];\n\t\tfor (const snippet of this._snippets) {\n\t\t\tconst oneSelection = snippet.move(fwd);\n\t\t\tselections.push(...oneSelection);\n\t\t}\n\t\treturn selections;\n\t}\n\n\tget isAtFirstPlaceholder() {\n\t\treturn this._snippets[0].isAtFirstPlaceholder;\n\t}\n\n\tget isAtLastPlaceholder() {\n\t\treturn this._snippets[0].isAtLastPlaceholder;\n\t}\n\n\tget hasPlaceholder() {\n\t\treturn this._snippets[0].hasPlaceholder;\n\t}\n\n\tget hasChoice(): boolean {\n\t\treturn this._snippets[0].hasChoice;\n\t}\n\n\tget activeChoice(): { choice: Choice; range: Range } | undefined {\n\t\treturn this._snippets[0].activeChoice;\n\t}\n\n\tisSelectionWithinPlaceholders(): boolean {\n\n\t\tif (!this.hasPlaceholder) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst selections = this._editor.getSelections();\n\t\tif (selections.length < this._snippets.length) {\n\t\t\t// this means we started snippet mode with N\n\t\t\t// selections and have M (N > M) selections.\n\t\t\t// So one snippet is without selection -> cancel\n\t\t\treturn false;\n\t\t}\n\n\t\tconst allPossibleSelections = new Map<number, Range[]>();\n\t\tfor (const snippet of this._snippets) {\n\n\t\t\tconst possibleSelections = snippet.computePossibleSelections();\n\n\t\t\t// for the first snippet find the placeholder (and its ranges)\n\t\t\t// that contain at least one selection. for all remaining snippets\n\t\t\t// the same placeholder (and their ranges) must be used.\n\t\t\tif (allPossibleSelections.size === 0) {\n\t\t\t\tfor (const [index, ranges] of possibleSelections) {\n\t\t\t\t\tranges.sort(Range.compareRangesUsingStarts);\n\t\t\t\t\tfor (const selection of selections) {\n\t\t\t\t\t\tif (ranges[0].containsRange(selection)) {\n\t\t\t\t\t\t\tallPossibleSelections.set(index, []);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (allPossibleSelections.size === 0) {\n\t\t\t\t// return false if we couldn't associate a selection to\n\t\t\t\t// this (the first) snippet\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\t// add selections from 'this' snippet so that we know all\n\t\t\t// selections for this placeholder\n\t\t\tallPossibleSelections.forEach((array, index) => {\n\t\t\t\tarray.push(...possibleSelections.get(index)!);\n\t\t\t});\n\t\t}\n\n\t\t// sort selections (and later placeholder-ranges). then walk both\n\t\t// arrays and make sure the placeholder-ranges contain the corresponding\n\t\t// selection\n\t\tselections.sort(Range.compareRangesUsingStarts);\n\n\t\tfor (const [index, ranges] of allPossibleSelections) {\n\t\t\tif (ranges.length !== selections.length) {\n\t\t\t\tallPossibleSelections.delete(index);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tranges.sort(Range.compareRangesUsingStarts);\n\n\t\t\tfor (let i = 0; i < ranges.length; i++) {\n\t\t\t\tif (!ranges[i].containsRange(selections[i])) {\n\t\t\t\t\tallPossibleSelections.delete(index);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// from all possible selections we have deleted those\n\t\t// that don't match with the current selection. if we don't\n\t\t// have any left, we don't have a selection anymore\n\t\treturn allPossibleSelections.size > 0;\n\t}\n\n\tpublic getEnclosingRange(): Range | undefined {\n\t\tlet result: Range | undefined;\n\t\tfor (const snippet of this._snippets) {\n\t\t\tconst snippetRange = snippet.getEnclosingRange();\n\t\t\tif (!result) {\n\t\t\t\tresult = snippetRange;\n\t\t\t} else {\n\t\t\t\tresult = result.plusRange(snippetRange!);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n"]}