{"version":3,"sources":["vs/editor/contrib/readOnlyMessage/browser/contribution.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAWhG,MAAa,GAA0B,SAAQ,eAAG;iBAE1B,OAAE,GAAG,0CAA0C,CAAC;QAEvE,YACkB,CAAmB;YAEpC,KAAK,EAAE,CAAC;YAFS,MAAC,GAAD,CAAC,CAAkB;YAGpC,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAM,wBAAwB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,EAA0B,CAAC,CAAC,CAAC;QAC9F,CAAC;QAEO,CAAC;YACR,MAAM,iBAAiB,GAAG,uBAAG,CAAe,GAAG,CAAC,IAAI,CAAC,CAAC,CAAM,CAAC;YAC7D,IAAI,iBAAiB,IAAI,IAAI,CAAC,CAAC,CAAM,QAAQ,EAAE,EAAE;gBAChD,IAAI,OAAO,GAAG,IAAI,CAAC,CAAC,CAAM,UAAU,EAAE,CAAC,GAAG,uCAA8B,CAAC;gBACzE,IAAI,CAAC,OAAO,EAAE;oBACb,IAAI,IAAI,CAAC,CAAC,CAAM,cAAc,EAAE;wBAC/B,OAAO,GAAG,IAAI,iBAAG,CAAY,GAAG,CAAC,QAAQ,CAAC,CAAwB,EAAE,IAAgC,CAAC,CAAC,CAAC;qBACvG;yBAAM;wBACN,OAAO,GAAG,IAAI,iBAAG,CAAY,GAAG,CAAC,QAAQ,CAAC,CAAiB,EAAE,IAAiC,CAAC,CAAC,CAAC;qBACjG;iBACD;gBAED,iBAAiB,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAM,WAAW,EAAE,CAAC,CAAC;aAClE;QACF,CAAC;;IAzBF,kBA0BC;IAED,IAAA,sBAAG,EAAwB,GAAG,CAAuB,EAAE,EAAE,GAAG,iEAA+E,CAAC","file":"contribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MarkdownString } from 'vs/base/common/htmlContent';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorContributionInstantiation, registerEditorContribution } from 'vs/editor/browser/editorExtensions';\nimport { EditorOption } from 'vs/editor/common/config/editorOptions';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { MessageController } from 'vs/editor/contrib/message/browser/messageController';\nimport * as nls from 'vs/nls';\n\nexport class ReadOnlyMessageController extends Disposable implements IEditorContribution {\n\n\tpublic static readonly ID = 'editor.contrib.readOnlyMessageController';\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor\n\t) {\n\t\tsuper();\n\t\tthis._register(this.editor.onDidAttemptReadOnlyEdit(() => this._onDidAttemptReadOnlyEdit()));\n\t}\n\n\tprivate _onDidAttemptReadOnlyEdit(): void {\n\t\tconst messageController = MessageController.get(this.editor);\n\t\tif (messageController && this.editor.hasModel()) {\n\t\t\tlet message = this.editor.getOptions().get(EditorOption.readOnlyMessage);\n\t\t\tif (!message) {\n\t\t\t\tif (this.editor.isSimpleWidget) {\n\t\t\t\t\tmessage = new MarkdownString(nls.localize('editor.simple.readonly', \"Cannot edit in read-only input\"));\n\t\t\t\t} else {\n\t\t\t\t\tmessage = new MarkdownString(nls.localize('editor.readonly', \"Cannot edit in read-only editor\"));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmessageController.showMessage(message, this.editor.getPosition());\n\t\t}\n\t}\n}\n\nregisterEditorContribution(ReadOnlyMessageController.ID, ReadOnlyMessageController, EditorContributionInstantiation.BeforeFirstInteraction);\n"]}