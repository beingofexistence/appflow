{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/links/browser/getLinks.ts"],"names":[],"mappings":"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","file":"getLinks.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce } from 'vs/base/common/arrays';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { onUnexpectedExternalError } from 'vs/base/common/errors';\nimport { DisposableStore, isDisposable } from 'vs/base/common/lifecycle';\nimport { assertType } from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { ILink, ILinksList, LinkProvider } from 'vs/editor/common/languages';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { LanguageFeatureRegistry } from 'vs/editor/common/languageFeatureRegistry';\nimport { ILanguageFeaturesService } from 'vs/editor/common/services/languageFeatures';\n\nexport class Link implements ILink {\n\n\tprivate _link: ILink;\n\tprivate readonly _provider: LinkProvider;\n\n\tconstructor(link: ILink, provider: LinkProvider) {\n\t\tthis._link = link;\n\t\tthis._provider = provider;\n\t}\n\n\ttoJSON(): ILink {\n\t\treturn {\n\t\t\trange: this.range,\n\t\t\turl: this.url,\n\t\t\ttooltip: this.tooltip\n\t\t};\n\t}\n\n\tget range(): IRange {\n\t\treturn this._link.range;\n\t}\n\n\tget url(): URI | string | undefined {\n\t\treturn this._link.url;\n\t}\n\n\tget tooltip(): string | undefined {\n\t\treturn this._link.tooltip;\n\t}\n\n\tasync resolve(token: CancellationToken): Promise<URI | string> {\n\t\tif (this._link.url) {\n\t\t\treturn this._link.url;\n\t\t}\n\n\t\tif (typeof this._provider.resolveLink === 'function') {\n\t\t\treturn Promise.resolve(this._provider.resolveLink(this._link, token)).then(value => {\n\t\t\t\tthis._link = value || this._link;\n\t\t\t\tif (this._link.url) {\n\t\t\t\t\t// recurse\n\t\t\t\t\treturn this.resolve(token);\n\t\t\t\t}\n\n\t\t\t\treturn Promise.reject(new Error('missing'));\n\t\t\t});\n\t\t}\n\n\t\treturn Promise.reject(new Error('missing'));\n\t}\n}\n\nexport class LinksList {\n\n\treadonly links: Link[];\n\n\tprivate readonly _disposables = new DisposableStore();\n\n\tconstructor(tuples: [ILinksList, LinkProvider][]) {\n\n\t\tlet links: Link[] = [];\n\t\tfor (const [list, provider] of tuples) {\n\t\t\t// merge all links\n\t\t\tconst newLinks = list.links.map(link => new Link(link, provider));\n\t\t\tlinks = LinksList._union(links, newLinks);\n\t\t\t// register disposables\n\t\t\tif (isDisposable(list)) {\n\t\t\t\tthis._disposables.add(list);\n\t\t\t}\n\t\t}\n\t\tthis.links = links;\n\t}\n\n\tdispose(): void {\n\t\tthis._disposables.dispose();\n\t\tthis.links.length = 0;\n\t}\n\n\tprivate static _union(oldLinks: Link[], newLinks: Link[]): Link[] {\n\t\t// reunite oldLinks with newLinks and remove duplicates\n\t\tconst result: Link[] = [];\n\t\tlet oldIndex: number;\n\t\tlet oldLen: number;\n\t\tlet newIndex: number;\n\t\tlet newLen: number;\n\n\t\tfor (oldIndex = 0, newIndex = 0, oldLen = oldLinks.length, newLen = newLinks.length; oldIndex < oldLen && newIndex < newLen;) {\n\t\t\tconst oldLink = oldLinks[oldIndex];\n\t\t\tconst newLink = newLinks[newIndex];\n\n\t\t\tif (Range.areIntersectingOrTouching(oldLink.range, newLink.range)) {\n\t\t\t\t// Remove the oldLink\n\t\t\t\toldIndex++;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst comparisonResult = Range.compareRangesUsingStarts(oldLink.range, newLink.range);\n\n\t\t\tif (comparisonResult < 0) {\n\t\t\t\t// oldLink is before\n\t\t\t\tresult.push(oldLink);\n\t\t\t\toldIndex++;\n\t\t\t} else {\n\t\t\t\t// newLink is before\n\t\t\t\tresult.push(newLink);\n\t\t\t\tnewIndex++;\n\t\t\t}\n\t\t}\n\n\t\tfor (; oldIndex < oldLen; oldIndex++) {\n\t\t\tresult.push(oldLinks[oldIndex]);\n\t\t}\n\t\tfor (; newIndex < newLen; newIndex++) {\n\t\t\tresult.push(newLinks[newIndex]);\n\t\t}\n\n\t\treturn result;\n\t}\n\n}\n\nexport function getLinks(providers: LanguageFeatureRegistry<LinkProvider>, model: ITextModel, token: CancellationToken): Promise<LinksList> {\n\n\tconst lists: [ILinksList, LinkProvider][] = [];\n\n\t// ask all providers for links in parallel\n\tconst promises = providers.ordered(model).reverse().map((provider, i) => {\n\t\treturn Promise.resolve(provider.provideLinks(model, token)).then(result => {\n\t\t\tif (result) {\n\t\t\t\tlists[i] = [result, provider];\n\t\t\t}\n\t\t}, onUnexpectedExternalError);\n\t});\n\n\treturn Promise.all(promises).then(() => {\n\t\tconst result = new LinksList(coalesce(lists));\n\t\tif (!token.isCancellationRequested) {\n\t\t\treturn result;\n\t\t}\n\t\tresult.dispose();\n\t\treturn new LinksList([]);\n\t});\n}\n\n\nCommandsRegistry.registerCommand('_executeLinkProvider', async (accessor, ...args): Promise<ILink[]> => {\n\tlet [uri, resolveCount] = args;\n\tassertType(uri instanceof URI);\n\n\tif (typeof resolveCount !== 'number') {\n\t\tresolveCount = 0;\n\t}\n\n\tconst { linkProvider } = accessor.get(ILanguageFeaturesService);\n\tconst model = accessor.get(IModelService).getModel(uri);\n\tif (!model) {\n\t\treturn [];\n\t}\n\tconst list = await getLinks(linkProvider, model, CancellationToken.None);\n\tif (!list) {\n\t\treturn [];\n\t}\n\n\t// resolve links\n\tfor (let i = 0; i < Math.min(resolveCount, list.links.length); i++) {\n\t\tawait list.links[i].resolve(CancellationToken.None);\n\t}\n\n\tconst result = list.links.slice(0);\n\tlist.dispose();\n\treturn result;\n});\n"]}