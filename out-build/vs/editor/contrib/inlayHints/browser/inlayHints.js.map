{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/inlayHints/browser/inlayHints.ts"],"names":[],"mappings":"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","file":"inlayHints.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { CancellationError, onUnexpectedExternalError } from 'vs/base/common/errors';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { IPosition, Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { LanguageFeatureRegistry } from 'vs/editor/common/languageFeatureRegistry';\nimport { InlayHint, InlayHintList, InlayHintsProvider, Command } from 'vs/editor/common/languages';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\n\nexport class InlayHintAnchor {\n\tconstructor(readonly range: Range, readonly direction: 'before' | 'after') { }\n}\n\nexport class InlayHintItem {\n\n\tprivate _isResolved: boolean = false;\n\tprivate _currentResolve?: Promise<void>;\n\n\tconstructor(readonly hint: InlayHint, readonly anchor: InlayHintAnchor, readonly provider: InlayHintsProvider) { }\n\n\twith(delta: { anchor: InlayHintAnchor }): InlayHintItem {\n\t\tconst result = new InlayHintItem(this.hint, delta.anchor, this.provider);\n\t\tresult._isResolved = this._isResolved;\n\t\tresult._currentResolve = this._currentResolve;\n\t\treturn result;\n\t}\n\n\tasync resolve(token: CancellationToken): Promise<void> {\n\t\tif (typeof this.provider.resolveInlayHint !== 'function') {\n\t\t\treturn;\n\t\t}\n\t\tif (this._currentResolve) {\n\t\t\t// wait for an active resolve operation and try again\n\t\t\t// when that's done.\n\t\t\tawait this._currentResolve;\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn this.resolve(token);\n\t\t}\n\t\tif (!this._isResolved) {\n\t\t\tthis._currentResolve = this._doResolve(token)\n\t\t\t\t.finally(() => this._currentResolve = undefined);\n\t\t}\n\t\tawait this._currentResolve;\n\t}\n\n\tprivate async _doResolve(token: CancellationToken) {\n\t\ttry {\n\t\t\tconst newHint = await Promise.resolve(this.provider.resolveInlayHint!(this.hint, token));\n\t\t\tthis.hint.tooltip = newHint?.tooltip ?? this.hint.tooltip;\n\t\t\tthis.hint.label = newHint?.label ?? this.hint.label;\n\t\t\tthis._isResolved = true;\n\t\t} catch (err) {\n\t\t\tonUnexpectedExternalError(err);\n\t\t\tthis._isResolved = false;\n\t\t}\n\t}\n}\n\nexport class InlayHintsFragments {\n\n\tstatic async create(registry: LanguageFeatureRegistry<InlayHintsProvider>, model: ITextModel, ranges: Range[], token: CancellationToken): Promise<InlayHintsFragments> {\n\n\t\tconst data: [InlayHintList, InlayHintsProvider][] = [];\n\n\t\tconst promises = registry.ordered(model).reverse().map(provider => ranges.map(async range => {\n\t\t\ttry {\n\t\t\t\tconst result = await provider.provideInlayHints(model, range, token);\n\t\t\t\tif (result?.hints.length) {\n\t\t\t\t\tdata.push([result, provider]);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tonUnexpectedExternalError(err);\n\t\t\t}\n\t\t}));\n\n\t\tawait Promise.all(promises.flat());\n\n\t\tif (token.isCancellationRequested || model.isDisposed()) {\n\t\t\tthrow new CancellationError();\n\t\t}\n\n\t\treturn new InlayHintsFragments(ranges, data, model);\n\t}\n\n\tprivate readonly _disposables = new DisposableStore();\n\n\treadonly items: readonly InlayHintItem[];\n\treadonly ranges: readonly Range[];\n\treadonly provider: Set<InlayHintsProvider>;\n\n\tprivate constructor(ranges: Range[], data: [InlayHintList, InlayHintsProvider][], model: ITextModel) {\n\t\tthis.ranges = ranges;\n\t\tthis.provider = new Set();\n\t\tconst items: InlayHintItem[] = [];\n\t\tfor (const [list, provider] of data) {\n\t\t\tthis._disposables.add(list);\n\t\t\tthis.provider.add(provider);\n\n\t\t\tfor (const hint of list.hints) {\n\t\t\t\t// compute the range to which the item should be attached to\n\t\t\t\tconst position = model.validatePosition(hint.position);\n\t\t\t\tlet direction: 'before' | 'after' = 'before';\n\n\t\t\t\tconst wordRange = InlayHintsFragments._getRangeAtPosition(model, position);\n\t\t\t\tlet range: Range;\n\n\t\t\t\tif (wordRange.getStartPosition().isBefore(position)) {\n\t\t\t\t\trange = Range.fromPositions(wordRange.getStartPosition(), position);\n\t\t\t\t\tdirection = 'after';\n\t\t\t\t} else {\n\t\t\t\t\trange = Range.fromPositions(position, wordRange.getEndPosition());\n\t\t\t\t\tdirection = 'before';\n\t\t\t\t}\n\n\t\t\t\titems.push(new InlayHintItem(hint, new InlayHintAnchor(range, direction), provider));\n\t\t\t}\n\t\t}\n\t\tthis.items = items.sort((a, b) => Position.compare(a.hint.position, b.hint.position));\n\t}\n\n\tdispose(): void {\n\t\tthis._disposables.dispose();\n\t}\n\n\tprivate static _getRangeAtPosition(model: ITextModel, position: IPosition): Range {\n\t\tconst line = position.lineNumber;\n\t\tconst word = model.getWordAtPosition(position);\n\t\tif (word) {\n\t\t\t// always prefer the word range\n\t\t\treturn new Range(line, word.startColumn, line, word.endColumn);\n\t\t}\n\n\t\tmodel.tokenization.tokenizeIfCheap(line);\n\t\tconst tokens = model.tokenization.getLineTokens(line);\n\t\tconst offset = position.column - 1;\n\t\tconst idx = tokens.findTokenIndexAtOffset(offset);\n\n\t\tlet start = tokens.getStartOffset(idx);\n\t\tlet end = tokens.getEndOffset(idx);\n\n\t\tif (end - start === 1) {\n\t\t\t// single character token, when at its end try leading/trailing token instead\n\t\t\tif (start === offset && idx > 1) {\n\t\t\t\t// leading token\n\t\t\t\tstart = tokens.getStartOffset(idx - 1);\n\t\t\t\tend = tokens.getEndOffset(idx - 1);\n\t\t\t} else if (end === offset && idx < tokens.getCount() - 1) {\n\t\t\t\t// trailing token\n\t\t\t\tstart = tokens.getStartOffset(idx + 1);\n\t\t\t\tend = tokens.getEndOffset(idx + 1);\n\t\t\t}\n\t\t}\n\n\t\treturn new Range(line, start + 1, line, end + 1);\n\t}\n}\n\nexport function asCommandLink(command: Command): string {\n\treturn URI.from({\n\t\tscheme: Schemas.command,\n\t\tpath: command.id,\n\t\tquery: command.arguments && encodeURIComponent(JSON.stringify(command.arguments))\n\t}).toString();\n}\n"]}