{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/inPlaceReplace/browser/inPlaceReplaceCommand.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOhG,MAAa,GAAG;QAMf,YAAY,SAAc,EAAI,iBAAsB,EAAQ,IAAY;YACvE,IAAI,CAAC,CAAC,GAAY,SAAS,CAAC;YAC5B,IAAI,CAAC,CAAC,GAAoB,iBAAiB,CAAC;YAC5C,IAAI,CAAC,CAAC,GAAO,IAAI,CAAC;QACnB,CAAC;QAEM,iBAAiB,CAAC,KAAiB,EAAE,OAA8B;YACzE,OAAO,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC,EAAW,IAAI,CAAC,CAAC,CAAK,CAAC;QAC9D,CAAC;QAEM,kBAAkB,CAAC,KAAiB,EAAE,MAAgC;YAC5E,MAAM,qBAAqB,GAAG,MAAM,CAAC,wBAAwB,EAAE,CAAC;YAChE,MAAM,QAAQ,GAAG,qBAAqB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;YAEhD,IAAI,CAAC,IAAI,CAAC,CAAC,CAAkB,OAAO,EAAE,EAAE;gBACvC,+CAA+C;gBAC/C,OAAO,IAAI,eAAG,CACb,QAAQ,CAAC,aAAa,EACtB,QAAQ,CAAC,SAAS,GAAG,IAAI,CAAC,CAAC,CAAK,MAAM,EACtC,QAAQ,CAAC,aAAa,EACtB,QAAQ,CAAC,SAAS,CAClB,CAAC;aACF;YAED,OAAO,IAAI,eAAG,CACb,QAAQ,CAAC,aAAa,EACtB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAkB,cAAc,EAAE,QAAQ,CAAC,SAAS,CAAC,EACpE,QAAQ,CAAC,aAAa,EACtB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAkB,cAAc,EAAE,QAAQ,CAAC,SAAS,CAAC,CACpE,CAAC;QACH,CAAC;KACD;IArCD,kBAqCC","file":"inPlaceReplaceCommand.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ICommand, ICursorStateComputerData, IEditOperationBuilder } from 'vs/editor/common/editorCommon';\nimport { ITextModel } from 'vs/editor/common/model';\n\nexport class InPlaceReplaceCommand implements ICommand {\n\n\tprivate readonly _editRange: Range;\n\tprivate readonly _originalSelection: Selection;\n\tprivate readonly _text: string;\n\n\tconstructor(editRange: Range, originalSelection: Selection, text: string) {\n\t\tthis._editRange = editRange;\n\t\tthis._originalSelection = originalSelection;\n\t\tthis._text = text;\n\t}\n\n\tpublic getEditOperations(model: ITextModel, builder: IEditOperationBuilder): void {\n\t\tbuilder.addTrackedEditOperation(this._editRange, this._text);\n\t}\n\n\tpublic computeCursorState(model: ITextModel, helper: ICursorStateComputerData): Selection {\n\t\tconst inverseEditOperations = helper.getInverseEditOperations();\n\t\tconst srcRange = inverseEditOperations[0].range;\n\n\t\tif (!this._originalSelection.isEmpty()) {\n\t\t\t// Preserve selection and extends to typed text\n\t\t\treturn new Selection(\n\t\t\t\tsrcRange.endLineNumber,\n\t\t\t\tsrcRange.endColumn - this._text.length,\n\t\t\t\tsrcRange.endLineNumber,\n\t\t\t\tsrcRange.endColumn\n\t\t\t);\n\t\t}\n\n\t\treturn new Selection(\n\t\t\tsrcRange.endLineNumber,\n\t\t\tMath.min(this._originalSelection.positionColumn, srcRange.endColumn),\n\t\t\tsrcRange.endLineNumber,\n\t\t\tMath.min(this._originalSelection.positionColumn, srcRange.endColumn)\n\t\t);\n\t}\n}\n"]}