{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/wordPartOperations/test/browser/wordPartOperations.test.ts"],"names":[],"mappings":"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","file":"wordPartOperations.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorCommand } from 'vs/editor/browser/editorExtensions';\nimport { Position } from 'vs/editor/common/core/position';\nimport { ILanguageConfigurationService } from 'vs/editor/common/languages/languageConfigurationRegistry';\nimport { deserializePipePositions, serializePipePositions, testRepeatedActionAndExtractPositions } from 'vs/editor/contrib/wordOperations/test/browser/wordTestUtils';\nimport { CursorWordPartLeft, CursorWordPartLeftSelect, CursorWordPartRight, CursorWordPartRightSelect, DeleteWordPartLeft, DeleteWordPartRight } from 'vs/editor/contrib/wordPartOperations/browser/wordPartOperations';\nimport { StaticServiceAccessor } from 'vs/editor/contrib/wordPartOperations/test/browser/utils';\nimport { TestLanguageConfigurationService } from 'vs/editor/test/common/modes/testLanguageConfigurationService';\n\nsuite('WordPartOperations', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tconst _deleteWordPartLeft = new DeleteWordPartLeft();\n\tconst _deleteWordPartRight = new DeleteWordPartRight();\n\tconst _cursorWordPartLeft = new CursorWordPartLeft();\n\tconst _cursorWordPartLeftSelect = new CursorWordPartLeftSelect();\n\tconst _cursorWordPartRight = new CursorWordPartRight();\n\tconst _cursorWordPartRightSelect = new CursorWordPartRightSelect();\n\n\tconst serviceAccessor = new StaticServiceAccessor().withService(\n\t\tILanguageConfigurationService,\n\t\tnew TestLanguageConfigurationService()\n\t);\n\n\tfunction runEditorCommand(editor: ICodeEditor, command: EditorCommand): void {\n\t\tcommand.runEditorCommand(serviceAccessor, editor, null);\n\t}\n\tfunction cursorWordPartLeft(editor: ICodeEditor, inSelectionmode: boolean = false): void {\n\t\trunEditorCommand(editor, inSelectionmode ? _cursorWordPartLeftSelect : _cursorWordPartLeft);\n\t}\n\tfunction cursorWordPartRight(editor: ICodeEditor, inSelectionmode: boolean = false): void {\n\t\trunEditorCommand(editor, inSelectionmode ? _cursorWordPartRightSelect : _cursorWordPartRight);\n\t}\n\tfunction deleteWordPartLeft(editor: ICodeEditor): void {\n\t\trunEditorCommand(editor, _deleteWordPartLeft);\n\t}\n\tfunction deleteWordPartRight(editor: ICodeEditor): void {\n\t\trunEditorCommand(editor, _deleteWordPartRight);\n\t}\n\n\ttest('cursorWordPartLeft - basic', () => {\n\t\tconst EXPECTED = [\n\t\t\t'|start| |line|',\n\t\t\t'|this|Is|A|Camel|Case|Var|  |this_|is_|a_|snake_|case_|var| |THIS_|IS_|CAPS_|SNAKE| |this_|IS|Mixed|Use|',\n\t\t\t'|end| |line'\n\t\t].join('\\n');\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1000, 1000),\n\t\t\ted => cursorWordPartLeft(ed),\n\t\t\ted => ed.getPosition()!,\n\t\t\ted => ed.getPosition()!.equals(new Position(1, 1))\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('cursorWordPartLeft - issue #53899: whitespace', () => {\n\t\tconst EXPECTED = '|myvar| |=| |\\'|demonstration|     |of| |selection| |with| |space|\\'';\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1000, 1000),\n\t\t\ted => cursorWordPartLeft(ed),\n\t\t\ted => ed.getPosition()!,\n\t\t\ted => ed.getPosition()!.equals(new Position(1, 1))\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('cursorWordPartLeft - issue #53899: underscores', () => {\n\t\tconst EXPECTED = '|myvar| |=| |\\'|demonstration_____|of| |selection| |with| |space|\\'';\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1000, 1000),\n\t\t\ted => cursorWordPartLeft(ed),\n\t\t\ted => ed.getPosition()!,\n\t\t\ted => ed.getPosition()!.equals(new Position(1, 1))\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('cursorWordPartRight - basic', () => {\n\t\tconst EXPECTED = [\n\t\t\t'start| |line|',\n\t\t\t'|this|Is|A|Camel|Case|Var|  |this|_is|_a|_snake|_case|_var| |THIS|_IS|_CAPS|_SNAKE| |this|_IS|Mixed|Use|',\n\t\t\t'|end| |line|'\n\t\t].join('\\n');\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1, 1),\n\t\t\ted => cursorWordPartRight(ed),\n\t\t\ted => ed.getPosition()!,\n\t\t\ted => ed.getPosition()!.equals(new Position(3, 9))\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('cursorWordPartRight - issue #53899: whitespace', () => {\n\t\tconst EXPECTED = 'myvar| |=| |\\'|demonstration|     |of| |selection| |with| |space|\\'|';\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1, 1),\n\t\t\ted => cursorWordPartRight(ed),\n\t\t\ted => ed.getPosition()!,\n\t\t\ted => ed.getPosition()!.equals(new Position(1, 52))\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('cursorWordPartRight - issue #53899: underscores', () => {\n\t\tconst EXPECTED = 'myvar| |=| |\\'|demonstration|_____of| |selection| |with| |space|\\'|';\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1, 1),\n\t\t\ted => cursorWordPartRight(ed),\n\t\t\ted => ed.getPosition()!,\n\t\t\ted => ed.getPosition()!.equals(new Position(1, 52))\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('cursorWordPartRight - issue #53899: second case', () => {\n\t\tconst EXPECTED = [\n\t\t\t';| |--| |1|',\n\t\t\t'|;|        |--| |2|',\n\t\t\t'|;|    |#|3|',\n\t\t\t'|;|   |#|4|'\n\t\t].join('\\n');\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1, 1),\n\t\t\ted => cursorWordPartRight(ed),\n\t\t\ted => ed.getPosition()!,\n\t\t\ted => ed.getPosition()!.equals(new Position(4, 7))\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('issue #93239 - cursorWordPartRight', () => {\n\t\tconst EXPECTED = [\n\t\t\t'foo|_bar|',\n\t\t].join('\\n');\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1, 1),\n\t\t\ted => cursorWordPartRight(ed),\n\t\t\ted => ed.getPosition()!,\n\t\t\ted => ed.getPosition()!.equals(new Position(1, 8))\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('issue #93239 - cursorWordPartLeft', () => {\n\t\tconst EXPECTED = [\n\t\t\t'|foo_|bar',\n\t\t].join('\\n');\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1, 8),\n\t\t\ted => cursorWordPartLeft(ed),\n\t\t\ted => ed.getPosition()!,\n\t\t\ted => ed.getPosition()!.equals(new Position(1, 1))\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('deleteWordPartLeft - basic', () => {\n\t\tconst EXPECTED = '|   |/*| |Just| |some| |text| |a|+=| |3| |+|5|-|3| |*/|  |this|Is|A|Camel|Case|Var|  |this_|is_|a_|snake_|case_|var| |THIS_|IS_|CAPS_|SNAKE| |this_|IS|Mixed|Use';\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1, 1000),\n\t\t\ted => deleteWordPartLeft(ed),\n\t\t\ted => ed.getPosition()!,\n\t\t\ted => ed.getValue().length === 0\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('deleteWordPartRight - basic', () => {\n\t\tconst EXPECTED = '   |/*| |Just| |some| |text| |a|+=| |3| |+|5|-|3| |*/|  |this|Is|A|Camel|Case|Var|  |this|_is|_a|_snake|_case|_var| |THIS|_IS|_CAPS|_SNAKE| |this|_IS|Mixed|Use|';\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1, 1),\n\t\t\ted => deleteWordPartRight(ed),\n\t\t\ted => new Position(1, text.length - ed.getValue().length + 1),\n\t\t\ted => ed.getValue().length === 0\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('issue #158667: cursorWordPartLeft stops at \"-\" even when \"-\" is not in word separators', () => {\n\t\tconst EXPECTED = [\n\t\t\t'|this-|is-|a-|kebab-|case-|var| |THIS-|IS-|CAPS-|KEBAB| |this-|IS|Mixed|Use',\n\t\t].join('\\n');\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1000, 1000),\n\t\t\ted => cursorWordPartLeft(ed),\n\t\t\ted => ed.getPosition()!,\n\t\t\ted => ed.getPosition()!.equals(new Position(1, 1)),\n\t\t\t{ wordSeparators: \"!\\\"#&'()*+,./:;<=>?@[\\\\]^`{|}·\" } // default characters sans '$-%~' plus '·'\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('issue #158667: cursorWordPartRight stops at \"-\" even when \"-\" is not in word separators', () => {\n\t\tconst EXPECTED = [\n\t\t\t'this|-is|-a|-kebab|-case|-var| |THIS|-IS|-CAPS|-KEBAB| |this|-IS|Mixed|Use|',\n\t\t].join('\\n');\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1, 1),\n\t\t\ted => cursorWordPartRight(ed),\n\t\t\ted => ed.getPosition()!,\n\t\t\ted => ed.getPosition()!.equals(new Position(1, 60)),\n\t\t\t{ wordSeparators: \"!\\\"#&'()*+,./:;<=>?@[\\\\]^`{|}·\" } // default characters sans '$-%~' plus '·'\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('issue #158667: deleteWordPartLeft stops at \"-\" even when \"-\" is not in word separators', () => {\n\t\tconst EXPECTED = [\n\t\t\t'|this-|is-|a-|kebab-|case-|var| |THIS-|IS-|CAPS-|KEBAB| |this-|IS|Mixed|Use',\n\t\t].join(' ');\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1000, 1000),\n\t\t\ted => deleteWordPartLeft(ed),\n\t\t\ted => ed.getPosition()!,\n\t\t\ted => ed.getValue().length === 0,\n\t\t\t{ wordSeparators: \"!\\\"#&'()*+,./:;<=>?@[\\\\]^`{|}·\" } // default characters sans '$-%~' plus '·'\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n\n\ttest('issue #158667: deleteWordPartRight stops at \"-\" even when \"-\" is not in word separators', () => {\n\t\tconst EXPECTED = [\n\t\t\t'this|-is|-a|-kebab|-case|-var| |THIS|-IS|-CAPS|-KEBAB| |this|-IS|Mixed|Use|',\n\t\t].join(' ');\n\t\tconst [text,] = deserializePipePositions(EXPECTED);\n\t\tconst actualStops = testRepeatedActionAndExtractPositions(\n\t\t\ttext,\n\t\t\tnew Position(1, 1),\n\t\t\ted => deleteWordPartRight(ed),\n\t\t\ted => new Position(1, text.length - ed.getValue().length + 1),\n\t\t\ted => ed.getValue().length === 0,\n\t\t\t{ wordSeparators: \"!\\\"#&'()*+,./:;<=>?@[\\\\]^`{|}·\" } // default characters sans '$-%~' plus '·'\n\t\t);\n\t\tconst actual = serializePipePositions(text, actualStops);\n\t\tassert.deepStrictEqual(actual, EXPECTED);\n\t});\n});\n"]}