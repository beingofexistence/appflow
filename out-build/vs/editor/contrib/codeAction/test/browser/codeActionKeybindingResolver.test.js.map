{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/codeAction/test/browser/codeActionKeybindingResolver.test.ts"],"names":[],"mappings":"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","file":"codeActionKeybindingResolver.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { KeyCodeChord } from 'vs/base/common/keybindings';\nimport { KeyCode } from 'vs/base/common/keyCodes';\nimport { OperatingSystem } from 'vs/base/common/platform';\nimport { organizeImportsCommandId, refactorCommandId } from 'vs/editor/contrib/codeAction/browser/codeAction';\nimport { CodeActionKeybindingResolver } from 'vs/editor/contrib/codeAction/browser/codeActionKeybindingResolver';\nimport { CodeActionKind } from 'vs/editor/contrib/codeAction/common/types';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { ResolvedKeybindingItem } from 'vs/platform/keybinding/common/resolvedKeybindingItem';\nimport { USLayoutResolvedKeybinding } from 'vs/platform/keybinding/common/usLayoutResolvedKeybinding';\n\nsuite('CodeActionKeybindingResolver', () => {\n\tconst refactorKeybinding = createCodeActionKeybinding(\n\t\tKeyCode.KeyA,\n\t\trefactorCommandId,\n\t\t{ kind: CodeActionKind.Refactor.value });\n\n\tconst refactorExtractKeybinding = createCodeActionKeybinding(\n\t\tKeyCode.KeyB,\n\t\trefactorCommandId,\n\t\t{ kind: CodeActionKind.Refactor.append('extract').value });\n\n\tconst organizeImportsKeybinding = createCodeActionKeybinding(\n\t\tKeyCode.KeyC,\n\t\torganizeImportsCommandId,\n\t\tundefined);\n\n\ttest('Should match refactor keybindings', async function () {\n\t\tconst resolver = new CodeActionKeybindingResolver(\n\t\t\tcreateMockKeyBindingService([refactorKeybinding])\n\t\t).getResolver();\n\n\t\tassert.strictEqual(\n\t\t\tresolver({ title: '' }),\n\t\t\tundefined);\n\n\t\tassert.strictEqual(\n\t\t\tresolver({ title: '', kind: CodeActionKind.Refactor.value }),\n\t\t\trefactorKeybinding.resolvedKeybinding);\n\n\t\tassert.strictEqual(\n\t\t\tresolver({ title: '', kind: CodeActionKind.Refactor.append('extract').value }),\n\t\t\trefactorKeybinding.resolvedKeybinding);\n\n\t\tassert.strictEqual(\n\t\t\tresolver({ title: '', kind: CodeActionKind.QuickFix.value }),\n\t\t\tundefined);\n\t});\n\n\ttest('Should prefer most specific keybinding', async function () {\n\t\tconst resolver = new CodeActionKeybindingResolver(\n\t\t\tcreateMockKeyBindingService([refactorKeybinding, refactorExtractKeybinding, organizeImportsKeybinding])\n\t\t).getResolver();\n\n\t\tassert.strictEqual(\n\t\t\tresolver({ title: '', kind: CodeActionKind.Refactor.value }),\n\t\t\trefactorKeybinding.resolvedKeybinding);\n\n\t\tassert.strictEqual(\n\t\t\tresolver({ title: '', kind: CodeActionKind.Refactor.append('extract').value }),\n\t\t\trefactorExtractKeybinding.resolvedKeybinding);\n\t});\n\n\ttest('Organize imports should still return a keybinding even though it does not have args', async function () {\n\t\tconst resolver = new CodeActionKeybindingResolver(\n\t\t\tcreateMockKeyBindingService([refactorKeybinding, refactorExtractKeybinding, organizeImportsKeybinding])\n\t\t).getResolver();\n\n\t\tassert.strictEqual(\n\t\t\tresolver({ title: '', kind: CodeActionKind.SourceOrganizeImports.value }),\n\t\t\torganizeImportsKeybinding.resolvedKeybinding);\n\t});\n});\n\nfunction createMockKeyBindingService(items: ResolvedKeybindingItem[]): IKeybindingService {\n\treturn <IKeybindingService>{\n\t\tgetKeybindings: (): readonly ResolvedKeybindingItem[] => {\n\t\t\treturn items;\n\t\t},\n\t};\n}\n\nfunction createCodeActionKeybinding(keycode: KeyCode, command: string, commandArgs: any) {\n\treturn new ResolvedKeybindingItem(\n\t\tnew USLayoutResolvedKeybinding(\n\t\t\t[new KeyCodeChord(false, true, false, false, keycode)],\n\t\t\tOperatingSystem.Linux),\n\t\tcommand,\n\t\tcommandArgs,\n\t\tundefined,\n\t\tfalse,\n\t\tnull,\n\t\tfalse);\n}\n\n"]}