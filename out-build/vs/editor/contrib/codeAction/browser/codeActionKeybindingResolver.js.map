{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/codeAction/browser/codeActionKeybindingResolver.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;;IAezF,IAAM,GAAG,GAAT,MAAM,GAAG;;iBACS,MAAC,GAAuC;YAC/D,gBAAG;YACH,gBAAG;YACH,gBAAG;YACH,gBAAG;YACH,gBAAG;SALqB,AAMxB,CAAC;QAEF,YACsC,CAAsB;YAAtB,MAAC,GAAD,CAAC,CAAqB;QACxD,CAAC;QAEE,WAAW;YACjB,qDAAqD;YACrD,MAAM,qBAAqB,GAAG,IAAI,SAAE,CAA2C,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAiB,cAAc,EAAE;iBAC1H,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,KAAG,CAA0B,CAAC,CAAkB,OAAO,CAAC,IAAI,CAAC,OAAQ,CAAC,IAAI,CAAC,CAAC;iBAC3F,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC;iBACvC,GAAG,CAAC,CAAC,IAAI,EAA+B,EAAE;gBAC1C,gGAAgG;gBAChG,IAAI,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC;gBACnC,IAAI,IAAI,CAAC,OAAO,KAAK,gBAAG,EAAuB;oBAC9C,WAAW,GAAG,EAAE,IAAI,EAAE,WAAG,CAAY,qBAAqB,CAAC,KAAK,EAAE,CAAC;iBACnE;qBAAM,IAAI,IAAI,CAAC,OAAO,KAAK,gBAAG,EAAc;oBAC5C,WAAW,GAAG,EAAE,IAAI,EAAE,WAAG,CAAY,YAAY,CAAC,KAAK,EAAE,CAAC;iBAC1D;gBAED,OAAO;oBACN,kBAAkB,EAAE,IAAI,CAAC,kBAAmB;oBAC5C,GAAG,WAAG,CAAmB,QAAQ,CAAC,WAAW,EAAE;wBAC9C,IAAI,EAAE,WAAG,CAAY,IAAI;wBACzB,KAAK,yCAA2B;qBAChC,CAAC;iBACF,CAAC;YACH,CAAC,CAAC,CAAC,CAAC;YAEL,OAAO,CAAC,MAAM,EAAE,EAAE;gBACjB,IAAI,MAAM,CAAC,IAAI,EAAE;oBAChB,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAA2B,MAAM,EAAE,qBAAqB,CAAC,KAAK,CAAC,CAAC;oBACtF,OAAO,OAAO,EAAE,kBAAkB,CAAC;iBACnC;gBACD,OAAO,SAAS,CAAC;YAClB,CAAC,CAAC;QACH,CAAC;QAEO,CAAC,CACR,MAAkB,EAClB,UAAkD;YAElD,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;gBACjB,OAAO,SAAS,CAAC;aACjB;YACD,MAAM,IAAI,GAAG,IAAI,WAAG,CAAY,MAAM,CAAC,IAAI,CAAC,CAAC;YAE7C,OAAO,UAAU;iBACf,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;iBAClD,MAAM,CAAC,SAAS,CAAC,EAAE;gBACnB,IAAI,SAAS,CAAC,SAAS,EAAE;oBACxB,wGAAwG;oBACxG,OAAO,MAAM,CAAC,WAAW,CAAC;iBAC1B;gBACD,OAAO,IAAI,CAAC;YACb,CAAC,CAAC;iBACD,WAAW,CAAC,CAAC,WAAW,EAAE,SAAS,EAAE,EAAE;gBACvC,IAAI,CAAC,WAAW,EAAE;oBACjB,OAAO,SAAS,CAAC;iBACjB;gBACD,mCAAmC;gBACnC,OAAO,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,WAAW,CAAC;YAC5E,CAAC,EAAE,SAAoD,CAAC,CAAC;QAC3D,CAAC;;IAtEW,kBAAG;kBAAH,GAAG;QAUb,WAAA,gBAAG,CAAA;OAVO,GAAG,CAuEf","file":"codeActionKeybindingResolver.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ResolvedKeybinding } from 'vs/base/common/keybindings';\nimport { Lazy } from 'vs/base/common/lazy';\nimport { CodeAction } from 'vs/editor/common/languages';\nimport { codeActionCommandId, fixAllCommandId, organizeImportsCommandId, refactorCommandId, sourceActionCommandId } from 'vs/editor/contrib/codeAction/browser/codeAction';\nimport { CodeActionAutoApply, CodeActionCommandArgs, CodeActionKind } from 'vs/editor/contrib/codeAction/common/types';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\n\ninterface ResolveCodeActionKeybinding {\n\treadonly kind: CodeActionKind;\n\treadonly preferred: boolean;\n\treadonly resolvedKeybinding: ResolvedKeybinding;\n}\n\nexport class CodeActionKeybindingResolver {\n\tprivate static readonly codeActionCommands: readonly string[] = [\n\t\trefactorCommandId,\n\t\tcodeActionCommandId,\n\t\tsourceActionCommandId,\n\t\torganizeImportsCommandId,\n\t\tfixAllCommandId\n\t];\n\n\tconstructor(\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService\n\t) { }\n\n\tpublic getResolver(): (action: CodeAction) => ResolvedKeybinding | undefined {\n\t\t// Lazy since we may not actually ever read the value\n\t\tconst allCodeActionBindings = new Lazy<readonly ResolveCodeActionKeybinding[]>(() => this.keybindingService.getKeybindings()\n\t\t\t.filter(item => CodeActionKeybindingResolver.codeActionCommands.indexOf(item.command!) >= 0)\n\t\t\t.filter(item => item.resolvedKeybinding)\n\t\t\t.map((item): ResolveCodeActionKeybinding => {\n\t\t\t\t// Special case these commands since they come built-in with VS Code and don't use 'commandArgs'\n\t\t\t\tlet commandArgs = item.commandArgs;\n\t\t\t\tif (item.command === organizeImportsCommandId) {\n\t\t\t\t\tcommandArgs = { kind: CodeActionKind.SourceOrganizeImports.value };\n\t\t\t\t} else if (item.command === fixAllCommandId) {\n\t\t\t\t\tcommandArgs = { kind: CodeActionKind.SourceFixAll.value };\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tresolvedKeybinding: item.resolvedKeybinding!,\n\t\t\t\t\t...CodeActionCommandArgs.fromUser(commandArgs, {\n\t\t\t\t\t\tkind: CodeActionKind.None,\n\t\t\t\t\t\tapply: CodeActionAutoApply.Never\n\t\t\t\t\t})\n\t\t\t\t};\n\t\t\t}));\n\n\t\treturn (action) => {\n\t\t\tif (action.kind) {\n\t\t\t\tconst binding = this.bestKeybindingForCodeAction(action, allCodeActionBindings.value);\n\t\t\t\treturn binding?.resolvedKeybinding;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t};\n\t}\n\n\tprivate bestKeybindingForCodeAction(\n\t\taction: CodeAction,\n\t\tcandidates: readonly ResolveCodeActionKeybinding[]\n\t): ResolveCodeActionKeybinding | undefined {\n\t\tif (!action.kind) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst kind = new CodeActionKind(action.kind);\n\n\t\treturn candidates\n\t\t\t.filter(candidate => candidate.kind.contains(kind))\n\t\t\t.filter(candidate => {\n\t\t\t\tif (candidate.preferred) {\n\t\t\t\t\t// If the candidate keybinding only applies to preferred actions, the this action must also be preferred\n\t\t\t\t\treturn action.isPreferred;\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t})\n\t\t\t.reduceRight((currentBest, candidate) => {\n\t\t\t\tif (!currentBest) {\n\t\t\t\t\treturn candidate;\n\t\t\t\t}\n\t\t\t\t// Select the more specific binding\n\t\t\t\treturn currentBest.kind.contains(candidate.kind) ? candidate : currentBest;\n\t\t\t}, undefined as ResolveCodeActionKeybinding | undefined);\n\t}\n}\n"]}