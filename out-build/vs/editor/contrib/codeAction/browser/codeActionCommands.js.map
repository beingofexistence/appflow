{"version":3,"sources":["vs/editor/contrib/codeAction/browser/codeActionCommands.ts"],"names":[],"mappings":"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","file":"codeActionCommands.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { escapeRegExpCharacters } from 'vs/base/common/strings';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, EditorCommand, ServicesAccessor } from 'vs/editor/browser/editorExtensions';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { autoFixCommandId, codeActionCommandId, fixAllCommandId, organizeImportsCommandId, quickFixCommandId, refactorCommandId, sourceActionCommandId } from 'vs/editor/contrib/codeAction/browser/codeAction';\nimport * as nls from 'vs/nls';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { CodeActionAutoApply, CodeActionCommandArgs, CodeActionFilter, CodeActionKind, CodeActionTriggerSource } from '../common/types';\nimport { CodeActionController } from './codeActionController';\nimport { SUPPORTED_CODE_ACTIONS } from './codeActionModel';\n\nfunction contextKeyForSupportedActions(kind: CodeActionKind) {\n\treturn ContextKeyExpr.regex(\n\t\tSUPPORTED_CODE_ACTIONS.keys()[0],\n\t\tnew RegExp('(\\\\s|^)' + escapeRegExpCharacters(kind.value) + '\\\\b'));\n}\n\nconst argsSchema: IJSONSchema = {\n\ttype: 'object',\n\tdefaultSnippets: [{ body: { kind: '' } }],\n\tproperties: {\n\t\t'kind': {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('args.schema.kind', \"Kind of the code action to run.\"),\n\t\t},\n\t\t'apply': {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('args.schema.apply', \"Controls when the returned actions are applied.\"),\n\t\t\tdefault: CodeActionAutoApply.IfSingle,\n\t\t\tenum: [CodeActionAutoApply.First, CodeActionAutoApply.IfSingle, CodeActionAutoApply.Never],\n\t\t\tenumDescriptions: [\n\t\t\t\tnls.localize('args.schema.apply.first', \"Always apply the first returned code action.\"),\n\t\t\t\tnls.localize('args.schema.apply.ifSingle', \"Apply the first returned code action if it is the only one.\"),\n\t\t\t\tnls.localize('args.schema.apply.never', \"Do not apply the returned code actions.\"),\n\t\t\t]\n\t\t},\n\t\t'preferred': {\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t\tdescription: nls.localize('args.schema.preferred', \"Controls if only preferred code actions should be returned.\"),\n\t\t}\n\t}\n};\n\nfunction triggerCodeActionsForEditorSelection(\n\teditor: ICodeEditor,\n\tnotAvailableMessage: string,\n\tfilter: CodeActionFilter | undefined,\n\tautoApply: CodeActionAutoApply | undefined,\n\ttriggerAction: CodeActionTriggerSource = CodeActionTriggerSource.Default\n): void {\n\tif (editor.hasModel()) {\n\t\tconst controller = CodeActionController.get(editor);\n\t\tcontroller?.manualTriggerAtCurrentPosition(notAvailableMessage, triggerAction, filter, autoApply);\n\t}\n}\n\nexport class QuickFixAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: quickFixCommandId,\n\t\t\tlabel: nls.localize('quickfix.trigger.label', \"Quick Fix...\"),\n\t\t\talias: 'Quick Fix...',\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCodeActionsProvider),\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Period,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\treturn triggerCodeActionsForEditorSelection(editor, nls.localize('editor.action.quickFix.noneMessage', \"No code actions available\"), undefined, undefined, CodeActionTriggerSource.QuickFix);\n\t}\n}\n\nexport class CodeActionCommand extends EditorCommand {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: codeActionCommandId,\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCodeActionsProvider),\n\t\t\tdescription: {\n\t\t\t\tdescription: 'Trigger a code action',\n\t\t\t\targs: [{ name: 'args', schema: argsSchema, }]\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic runEditorCommand(_accessor: ServicesAccessor, editor: ICodeEditor, userArgs: any) {\n\t\tconst args = CodeActionCommandArgs.fromUser(userArgs, {\n\t\t\tkind: CodeActionKind.Empty,\n\t\t\tapply: CodeActionAutoApply.IfSingle,\n\t\t});\n\t\treturn triggerCodeActionsForEditorSelection(editor,\n\t\t\ttypeof userArgs?.kind === 'string'\n\t\t\t\t? args.preferred\n\t\t\t\t\t? nls.localize('editor.action.codeAction.noneMessage.preferred.kind', \"No preferred code actions for '{0}' available\", userArgs.kind)\n\t\t\t\t\t: nls.localize('editor.action.codeAction.noneMessage.kind', \"No code actions for '{0}' available\", userArgs.kind)\n\t\t\t\t: args.preferred\n\t\t\t\t\t? nls.localize('editor.action.codeAction.noneMessage.preferred', \"No preferred code actions available\")\n\t\t\t\t\t: nls.localize('editor.action.codeAction.noneMessage', \"No code actions available\"),\n\t\t\t{\n\t\t\t\tinclude: args.kind,\n\t\t\t\tincludeSourceActions: true,\n\t\t\t\tonlyIncludePreferredActions: args.preferred,\n\t\t\t},\n\t\t\targs.apply);\n\t}\n}\n\n\nexport class RefactorAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: refactorCommandId,\n\t\t\tlabel: nls.localize('refactor.label', \"Refactor...\"),\n\t\t\talias: 'Refactor...',\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCodeActionsProvider),\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyR,\n\t\t\t\tmac: {\n\t\t\t\t\tprimary: KeyMod.WinCtrl | KeyMod.Shift | KeyCode.KeyR\n\t\t\t\t},\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t\tcontextMenuOpts: {\n\t\t\t\tgroup: '1_modification',\n\t\t\t\torder: 2,\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tEditorContextKeys.writable,\n\t\t\t\t\tcontextKeyForSupportedActions(CodeActionKind.Refactor)),\n\t\t\t},\n\t\t\tdescription: {\n\t\t\t\tdescription: 'Refactor...',\n\t\t\t\targs: [{ name: 'args', schema: argsSchema }]\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor, userArgs: any): void {\n\t\tconst args = CodeActionCommandArgs.fromUser(userArgs, {\n\t\t\tkind: CodeActionKind.Refactor,\n\t\t\tapply: CodeActionAutoApply.Never\n\t\t});\n\t\treturn triggerCodeActionsForEditorSelection(editor,\n\t\t\ttypeof userArgs?.kind === 'string'\n\t\t\t\t? args.preferred\n\t\t\t\t\t? nls.localize('editor.action.refactor.noneMessage.preferred.kind', \"No preferred refactorings for '{0}' available\", userArgs.kind)\n\t\t\t\t\t: nls.localize('editor.action.refactor.noneMessage.kind', \"No refactorings for '{0}' available\", userArgs.kind)\n\t\t\t\t: args.preferred\n\t\t\t\t\t? nls.localize('editor.action.refactor.noneMessage.preferred', \"No preferred refactorings available\")\n\t\t\t\t\t: nls.localize('editor.action.refactor.noneMessage', \"No refactorings available\"),\n\t\t\t{\n\t\t\t\tinclude: CodeActionKind.Refactor.contains(args.kind) ? args.kind : CodeActionKind.None,\n\t\t\t\tonlyIncludePreferredActions: args.preferred\n\t\t\t},\n\t\t\targs.apply, CodeActionTriggerSource.Refactor);\n\t}\n}\n\nexport class SourceAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: sourceActionCommandId,\n\t\t\tlabel: nls.localize('source.label', \"Source Action...\"),\n\t\t\talias: 'Source Action...',\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasCodeActionsProvider),\n\t\t\tcontextMenuOpts: {\n\t\t\t\tgroup: '1_modification',\n\t\t\t\torder: 2.1,\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tEditorContextKeys.writable,\n\t\t\t\t\tcontextKeyForSupportedActions(CodeActionKind.Source)),\n\t\t\t},\n\t\t\tdescription: {\n\t\t\t\tdescription: 'Source Action...',\n\t\t\t\targs: [{ name: 'args', schema: argsSchema }]\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor, userArgs: any): void {\n\t\tconst args = CodeActionCommandArgs.fromUser(userArgs, {\n\t\t\tkind: CodeActionKind.Source,\n\t\t\tapply: CodeActionAutoApply.Never\n\t\t});\n\t\treturn triggerCodeActionsForEditorSelection(editor,\n\t\t\ttypeof userArgs?.kind === 'string'\n\t\t\t\t? args.preferred\n\t\t\t\t\t? nls.localize('editor.action.source.noneMessage.preferred.kind', \"No preferred source actions for '{0}' available\", userArgs.kind)\n\t\t\t\t\t: nls.localize('editor.action.source.noneMessage.kind', \"No source actions for '{0}' available\", userArgs.kind)\n\t\t\t\t: args.preferred\n\t\t\t\t\t? nls.localize('editor.action.source.noneMessage.preferred', \"No preferred source actions available\")\n\t\t\t\t\t: nls.localize('editor.action.source.noneMessage', \"No source actions available\"),\n\t\t\t{\n\t\t\t\tinclude: CodeActionKind.Source.contains(args.kind) ? args.kind : CodeActionKind.None,\n\t\t\t\tincludeSourceActions: true,\n\t\t\t\tonlyIncludePreferredActions: args.preferred,\n\t\t\t},\n\t\t\targs.apply, CodeActionTriggerSource.SourceAction);\n\t}\n}\n\nexport class OrganizeImportsAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: organizeImportsCommandId,\n\t\t\tlabel: nls.localize('organizeImports.label', \"Organize Imports\"),\n\t\t\talias: 'Organize Imports',\n\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\tEditorContextKeys.writable,\n\t\t\t\tcontextKeyForSupportedActions(CodeActionKind.SourceOrganizeImports)),\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: KeyMod.Shift | KeyMod.Alt | KeyCode.KeyO,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\treturn triggerCodeActionsForEditorSelection(editor,\n\t\t\tnls.localize('editor.action.organize.noneMessage', \"No organize imports action available\"),\n\t\t\t{ include: CodeActionKind.SourceOrganizeImports, includeSourceActions: true },\n\t\t\tCodeActionAutoApply.IfSingle, CodeActionTriggerSource.OrganizeImports);\n\t}\n}\n\nexport class FixAllAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: fixAllCommandId,\n\t\t\tlabel: nls.localize('fixAll.label', \"Fix All\"),\n\t\t\talias: 'Fix All',\n\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\tEditorContextKeys.writable,\n\t\t\t\tcontextKeyForSupportedActions(CodeActionKind.SourceFixAll))\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\treturn triggerCodeActionsForEditorSelection(editor,\n\t\t\tnls.localize('fixAll.noneMessage', \"No fix all action available\"),\n\t\t\t{ include: CodeActionKind.SourceFixAll, includeSourceActions: true },\n\t\t\tCodeActionAutoApply.IfSingle, CodeActionTriggerSource.FixAll);\n\t}\n}\n\nexport class AutoFixAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: autoFixCommandId,\n\t\t\tlabel: nls.localize('autoFix.label', \"Auto Fix...\"),\n\t\t\talias: 'Auto Fix...',\n\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\tEditorContextKeys.writable,\n\t\t\t\tcontextKeyForSupportedActions(CodeActionKind.QuickFix)),\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\tprimary: KeyMod.Alt | KeyMod.Shift | KeyCode.Period,\n\t\t\t\tmac: {\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.Period\n\t\t\t\t},\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(_accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\treturn triggerCodeActionsForEditorSelection(editor,\n\t\t\tnls.localize('editor.action.autoFix.noneMessage', \"No auto fixes available\"),\n\t\t\t{\n\t\t\t\tinclude: CodeActionKind.QuickFix,\n\t\t\t\tonlyIncludePreferredActions: true\n\t\t\t},\n\t\t\tCodeActionAutoApply.IfSingle, CodeActionTriggerSource.AutoFix);\n\t}\n}\n"]}