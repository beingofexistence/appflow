{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/codelens/browser/codeLensCache.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAanF,QAAA,GAAG,GAAc,IAAA,mBAAG,EAA6B,gBAAgB,CAAC,CAAC;IAchF,MAAM,SAAS;QAEd,YACU,SAAiB,EACjB,IAAS;YADT,cAAS,GAAT,SAAS,CAAQ;YACjB,SAAI,GAAJ,IAAI,CAAK;QACf,CAAC;KACL;IAEM,IAAM,GAAG,GAAT,MAAM,GAAG;QAYf,YAA6B,cAAmB;YAR/B,MAAC,GAAe,IAAI;gBACpC,iBAAiB;oBAChB,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC;gBAClC,CAAC;aACD,CAAC;YAEe,MAAC,GAAQ,IAAI,SAAG,CAAyB,EAAE,EAAE,IAAI,CAAC,CAAC;YAInE,kBAAkB;YAClB,MAAM,MAAM,GAAG,gBAAgB,CAAC;YAChC,IAAA,WAAG,EAAS,GAAG,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM,iCAAyB,CAAC,CAAC;YAEzE,6BAA6B;YAC7B,MAAM,GAAG,GAAG,iBAAiB,CAAC;YAC9B,MAAM,GAAG,GAAG,cAAc,CAAC,GAAG,CAAC,GAAG,kCAA0B,IAAI,CAAC,CAAC;YAClE,IAAI,CAAC,CAAC,CAAY,GAAG,CAAC,CAAC;YAEvB,8BAA8B;YAC9B,IAAA,gBAAG,EAAE,cAAc,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,EAAE;gBACxC,IAAI,CAAC,CAAC,MAAM,KAAK,6BAAmB,CAAC,QAAQ,EAAE;oBAC9C,cAAc,CAAC,KAAK,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,EAAW,gEAAgD,CAAC;iBAC5F;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,GAAG,CAAC,KAAiB,EAAE,IAAS;YAC/B,yDAAyD;YACzD,yBAAyB;YACzB,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBACxC,OAAiB;oBAChB,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK;oBACxB,OAAO,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,KAAK,EAAE;iBAC7E,CAAC;YACH,CAAC,CAAC,CAAC;YACH,MAAM,SAAS,GAAG,IAAI,cAAG,EAAY,CAAC;YACtC,SAAS,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAa,CAAC;YAE7E,MAAM,IAAI,GAAG,IAAI,SAAS,CAAC,KAAK,CAAC,YAAY,EAAE,EAAE,SAAS,CAAC,CAAC;YAC5D,IAAI,CAAC,CAAC,CAAM,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,CAAC;QAC7C,CAAC;QAED,GAAG,CAAC,KAAiB;YACpB,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAM,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;YACnD,OAAO,IAAI,IAAI,IAAI,CAAC,SAAS,KAAK,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC;QAChF,CAAC;QAED,MAAM,CAAC,KAAiB;YACvB,IAAI,CAAC,CAAC,CAAM,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC1C,CAAC;QAED,kBAAkB;QAEV,CAAC;YACR,MAAM,IAAI,GAAyC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACvE,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,EAAO;gBACvC,MAAM,KAAK,GAAG,IAAI,GAAG,EAAU,CAAC;gBAChC,KAAK,MAAM,CAAC,IAAI,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE;oBAClC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;iBAC1C;gBACD,IAAI,CAAC,GAAG,CAAC,GAAG;oBACX,SAAS,EAAE,KAAK,CAAC,SAAS;oBAC1B,KAAK,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;iBAC1B,CAAC;aACF;YACD,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAC7B,CAAC;QAEO,CAAC,CAAY,GAAW;YAC/B,IAAI;gBACH,MAAM,IAAI,GAAyC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACnE,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;oBACvB,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC;oBAC1B,MAAM,MAAM,GAAe,EAAE,CAAC;oBAC9B,KAAK,MAAM,IAAI,IAAI,OAAO,CAAC,KAAK,EAAE;wBACjC,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,WAAG,CAAG,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;qBACrD;oBAED,MAAM,KAAK,GAAG,IAAI,cAAG,EAAY,CAAC;oBAClC,KAAK,CAAC,GAAG,CAAC,EAAE,MAAM,EAAE,OAAO,KAAK,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAa,CAAC;oBACzD,IAAI,CAAC,CAAC,CAAM,GAAG,CAAC,GAAG,EAAE,IAAI,SAAS,CAAC,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC;iBAC9D;aACD;YAAC,MAAM;gBACP,YAAY;aACZ;QACF,CAAC;KACD,CAAA;IA3FY,kBAAG;kBAAH,GAAG;QAYF,WAAA,aAAG,CAAA;OAZJ,GAAG,CA2Ff;IAED,IAAA,gBAAG,EAAe,WAAG,EAAa,GAAG,oCAAsC,CAAC","file":"codeLensCache.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { runWhenIdle } from 'vs/base/common/async';\nimport { once } from 'vs/base/common/functional';\nimport { LRUCache } from 'vs/base/common/map';\nimport { Range } from 'vs/editor/common/core/range';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { CodeLens, CodeLensList, CodeLensProvider } from 'vs/editor/common/languages';\nimport { CodeLensModel } from 'vs/editor/contrib/codelens/browser/codelens';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IStorageService, StorageScope, StorageTarget, WillSaveStateReason } from 'vs/platform/storage/common/storage';\n\nexport const ICodeLensCache = createDecorator<ICodeLensCache>('ICodeLensCache');\n\nexport interface ICodeLensCache {\n\treadonly _serviceBrand: undefined;\n\tput(model: ITextModel, data: CodeLensModel): void;\n\tget(model: ITextModel): CodeLensModel | undefined;\n\tdelete(model: ITextModel): void;\n}\n\ninterface ISerializedCacheData {\n\tlineCount: number;\n\tlines: number[];\n}\n\nclass CacheItem {\n\n\tconstructor(\n\t\treadonly lineCount: number,\n\t\treadonly data: CodeLensModel\n\t) { }\n}\n\nexport class CodeLensCache implements ICodeLensCache {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _fakeProvider = new class implements CodeLensProvider {\n\t\tprovideCodeLenses(): CodeLensList {\n\t\t\tthrow new Error('not supported');\n\t\t}\n\t};\n\n\tprivate readonly _cache = new LRUCache<string, CacheItem>(20, 0.75);\n\n\tconstructor(@IStorageService storageService: IStorageService) {\n\n\t\t// remove old data\n\t\tconst oldkey = 'codelens/cache';\n\t\trunWhenIdle(() => storageService.remove(oldkey, StorageScope.WORKSPACE));\n\n\t\t// restore lens data on start\n\t\tconst key = 'codelens/cache2';\n\t\tconst raw = storageService.get(key, StorageScope.WORKSPACE, '{}');\n\t\tthis._deserialize(raw);\n\n\t\t// store lens data on shutdown\n\t\tonce(storageService.onWillSaveState)(e => {\n\t\t\tif (e.reason === WillSaveStateReason.SHUTDOWN) {\n\t\t\t\tstorageService.store(key, this._serialize(), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t\t}\n\t\t});\n\t}\n\n\tput(model: ITextModel, data: CodeLensModel): void {\n\t\t// create a copy of the model that is without command-ids\n\t\t// but with comand-labels\n\t\tconst copyItems = data.lenses.map(item => {\n\t\t\treturn <CodeLens>{\n\t\t\t\trange: item.symbol.range,\n\t\t\t\tcommand: item.symbol.command && { id: '', title: item.symbol.command?.title },\n\t\t\t};\n\t\t});\n\t\tconst copyModel = new CodeLensModel();\n\t\tcopyModel.add({ lenses: copyItems, dispose: () => { } }, this._fakeProvider);\n\n\t\tconst item = new CacheItem(model.getLineCount(), copyModel);\n\t\tthis._cache.set(model.uri.toString(), item);\n\t}\n\n\tget(model: ITextModel) {\n\t\tconst item = this._cache.get(model.uri.toString());\n\t\treturn item && item.lineCount === model.getLineCount() ? item.data : undefined;\n\t}\n\n\tdelete(model: ITextModel): void {\n\t\tthis._cache.delete(model.uri.toString());\n\t}\n\n\t// --- persistence\n\n\tprivate _serialize(): string {\n\t\tconst data: Record<string, ISerializedCacheData> = Object.create(null);\n\t\tfor (const [key, value] of this._cache) {\n\t\t\tconst lines = new Set<number>();\n\t\t\tfor (const d of value.data.lenses) {\n\t\t\t\tlines.add(d.symbol.range.startLineNumber);\n\t\t\t}\n\t\t\tdata[key] = {\n\t\t\t\tlineCount: value.lineCount,\n\t\t\t\tlines: [...lines.values()]\n\t\t\t};\n\t\t}\n\t\treturn JSON.stringify(data);\n\t}\n\n\tprivate _deserialize(raw: string): void {\n\t\ttry {\n\t\t\tconst data: Record<string, ISerializedCacheData> = JSON.parse(raw);\n\t\t\tfor (const key in data) {\n\t\t\t\tconst element = data[key];\n\t\t\t\tconst lenses: CodeLens[] = [];\n\t\t\t\tfor (const line of element.lines) {\n\t\t\t\t\tlenses.push({ range: new Range(line, 1, line, 11) });\n\t\t\t\t}\n\n\t\t\t\tconst model = new CodeLensModel();\n\t\t\t\tmodel.add({ lenses, dispose() { } }, this._fakeProvider);\n\t\t\t\tthis._cache.set(key, new CacheItem(element.lineCount, model));\n\t\t\t}\n\t\t} catch {\n\t\t\t// ignore...\n\t\t}\n\t}\n}\n\nregisterSingleton(ICodeLensCache, CodeLensCache, InstantiationType.Delayed);\n"]}