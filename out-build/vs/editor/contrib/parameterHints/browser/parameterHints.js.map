{"version":3,"sources":["vs/editor/contrib/parameterHints/browser/parameterHints.ts"],"names":[],"mappings":"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","file":"parameterHints.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { Lazy } from 'vs/base/common/lazy';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, EditorCommand, EditorContributionInstantiation, registerEditorAction, registerEditorCommand, registerEditorContribution, ServicesAccessor } from 'vs/editor/browser/editorExtensions';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport * as languages from 'vs/editor/common/languages';\nimport { ILanguageFeaturesService } from 'vs/editor/common/services/languageFeatures';\nimport { ParameterHintsModel, TriggerContext } from 'vs/editor/contrib/parameterHints/browser/parameterHintsModel';\nimport { Context } from 'vs/editor/contrib/parameterHints/browser/provideSignatureHelp';\nimport * as nls from 'vs/nls';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { ParameterHintsWidget } from './parameterHintsWidget';\n\nexport class ParameterHintsController extends Disposable implements IEditorContribution {\n\n\tpublic static readonly ID = 'editor.controller.parameterHints';\n\n\tpublic static get(editor: ICodeEditor): ParameterHintsController | null {\n\t\treturn editor.getContribution<ParameterHintsController>(ParameterHintsController.ID);\n\t}\n\n\tprivate readonly editor: ICodeEditor;\n\tprivate readonly model: ParameterHintsModel;\n\tprivate readonly widget: Lazy<ParameterHintsWidget>;\n\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ILanguageFeaturesService languageFeaturesService: ILanguageFeaturesService,\n\t) {\n\t\tsuper();\n\n\t\tthis.editor = editor;\n\n\t\tthis.model = this._register(new ParameterHintsModel(editor, languageFeaturesService.signatureHelpProvider));\n\n\t\tthis._register(this.model.onChangedHints(newParameterHints => {\n\t\t\tif (newParameterHints) {\n\t\t\t\tthis.widget.value.show();\n\t\t\t\tthis.widget.value.render(newParameterHints);\n\t\t\t} else {\n\t\t\t\tthis.widget.rawValue?.hide();\n\t\t\t}\n\t\t}));\n\n\t\tthis.widget = new Lazy(() => this._register(instantiationService.createInstance(ParameterHintsWidget, this.editor, this.model)));\n\t}\n\n\tcancel(): void {\n\t\tthis.model.cancel();\n\t}\n\n\tprevious(): void {\n\t\tthis.widget.rawValue?.previous();\n\t}\n\n\tnext(): void {\n\t\tthis.widget.rawValue?.next();\n\t}\n\n\ttrigger(context: TriggerContext): void {\n\t\tthis.model.trigger(context, 0);\n\t}\n}\n\nexport class TriggerParameterHintsAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.triggerParameterHints',\n\t\t\tlabel: nls.localize('parameterHints.trigger.label', \"Trigger Parameter Hints\"),\n\t\t\talias: 'Trigger Parameter Hints',\n\t\t\tprecondition: EditorContextKeys.hasSignatureHelpProvider,\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Space,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst controller = ParameterHintsController.get(editor);\n\t\tcontroller?.trigger({\n\t\t\ttriggerKind: languages.SignatureHelpTriggerKind.Invoke\n\t\t});\n\t}\n}\n\nregisterEditorContribution(ParameterHintsController.ID, ParameterHintsController, EditorContributionInstantiation.BeforeFirstInteraction);\nregisterEditorAction(TriggerParameterHintsAction);\n\nconst weight = KeybindingWeight.EditorContrib + 75;\n\nconst ParameterHintsCommand = EditorCommand.bindToContribution<ParameterHintsController>(ParameterHintsController.get);\n\nregisterEditorCommand(new ParameterHintsCommand({\n\tid: 'closeParameterHints',\n\tprecondition: Context.Visible,\n\thandler: x => x.cancel(),\n\tkbOpts: {\n\t\tweight: weight,\n\t\tkbExpr: EditorContextKeys.focus,\n\t\tprimary: KeyCode.Escape,\n\t\tsecondary: [KeyMod.Shift | KeyCode.Escape]\n\t}\n}));\n\nregisterEditorCommand(new ParameterHintsCommand({\n\tid: 'showPrevParameterHint',\n\tprecondition: ContextKeyExpr.and(Context.Visible, Context.MultipleSignatures),\n\thandler: x => x.previous(),\n\tkbOpts: {\n\t\tweight: weight,\n\t\tkbExpr: EditorContextKeys.focus,\n\t\tprimary: KeyCode.UpArrow,\n\t\tsecondary: [KeyMod.Alt | KeyCode.UpArrow],\n\t\tmac: { primary: KeyCode.UpArrow, secondary: [KeyMod.Alt | KeyCode.UpArrow, KeyMod.WinCtrl | KeyCode.KeyP] }\n\t}\n}));\n\nregisterEditorCommand(new ParameterHintsCommand({\n\tid: 'showNextParameterHint',\n\tprecondition: ContextKeyExpr.and(Context.Visible, Context.MultipleSignatures),\n\thandler: x => x.next(),\n\tkbOpts: {\n\t\tweight: weight,\n\t\tkbExpr: EditorContextKeys.focus,\n\t\tprimary: KeyCode.DownArrow,\n\t\tsecondary: [KeyMod.Alt | KeyCode.DownArrow],\n\t\tmac: { primary: KeyCode.DownArrow, secondary: [KeyMod.Alt | KeyCode.DownArrow, KeyMod.WinCtrl | KeyCode.KeyN] }\n\t}\n}));\n"]}