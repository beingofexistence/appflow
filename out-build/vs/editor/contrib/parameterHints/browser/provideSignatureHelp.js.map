{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/parameterHints/browser/provideSignatureHelp.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAenF,QAAA,GAAG,GAAO;QACtB,OAAO,EAAE,IAAI,gBAAG,CAAoB,uBAAuB,EAAE,KAAK,CAAC;QACnE,kBAAkB,EAAE,IAAI,gBAAG,CAAoB,kCAAkC,EAAE,KAAK,CAAC;KACzF,CAAC;IAEK,KAAK,UAAU,GAAG,CACxB,QAAkE,EAClE,KAAiB,EACjB,QAAa,EACb,OAAuC,EACvC,KAAwB;QAGxB,MAAM,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAEzC,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;YAC/B,IAAI;gBACH,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,oBAAoB,CAAC,KAAK,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;gBACnF,IAAI,MAAM,EAAE;oBACX,OAAO,MAAM,CAAC;iBACd;aACD;YAAC,OAAO,GAAG,EAAE;gBACb,IAAA,WAAE,EAAwB,GAAG,CAAC,CAAC;aAC/B;SACD;QACD,OAAO,SAAS,CAAC;IAClB,CAAC;IArBD,kBAqBC;IAED,cAAG,CAAc,eAAe,CAAC,+BAA+B,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,IAA+B,EAAE,EAAE;QACxH,MAAM,CAAC,GAAG,EAAE,QAAQ,EAAE,gBAAgB,CAAC,GAAG,IAAI,CAAC;QAC/C,IAAA,WAAG,EAAQ,SAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QAC3B,IAAA,WAAG,EAAQ,cAAG,CAAM,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC3C,IAAA,WAAG,EAAQ,OAAO,gBAAgB,KAAK,QAAQ,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAEtE,MAAM,uBAAuB,GAAG,QAAQ,CAAC,GAAG,CAAC,sBAAG,CAAsB,CAAC;QAEvE,MAAM,GAAG,GAAG,MAAM,QAAQ,CAAC,GAAG,CAAC,qBAAG,CAAe,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;QAC5E,IAAI;YAEH,MAAM,MAAM,GAAG,MAAM,GAAG,CAAkB,uBAAuB,CAAC,qBAAqB,EAAE,GAAG,CAAC,MAAM,CAAC,eAAe,EAAE,cAAG,CAAM,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAC7I,WAAW,EAAE,SAAS,CAAC,wBAAwB,CAAC,MAAM;gBACtD,WAAW,EAAE,KAAK;gBAClB,gBAAgB;aAChB,EAAE,gCAAiB,CAAC,IAAI,CAAC,CAAC;YAE3B,IAAI,CAAC,MAAM,EAAE;gBACZ,OAAO,SAAS,CAAC;aACjB;YAED,UAAU,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;YACtC,OAAO,MAAM,CAAC,KAAK,CAAC;SAEpB;gBAAS;YACT,GAAG,CAAC,OAAO,EAAE,CAAC;SACd;IACF,CAAC,CAAC,CAAC","file":"provideSignatureHelp.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { onUnexpectedExternalError } from 'vs/base/common/errors';\nimport { assertType } from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport { IPosition, Position } from 'vs/editor/common/core/position';\nimport { LanguageFeatureRegistry } from 'vs/editor/common/languageFeatureRegistry';\nimport * as languages from 'vs/editor/common/languages';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { ILanguageFeaturesService } from 'vs/editor/common/services/languageFeatures';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { RawContextKey } from 'vs/platform/contextkey/common/contextkey';\n\nexport const Context = {\n\tVisible: new RawContextKey<boolean>('parameterHintsVisible', false),\n\tMultipleSignatures: new RawContextKey<boolean>('parameterHintsMultipleSignatures', false),\n};\n\nexport async function provideSignatureHelp(\n\tregistry: LanguageFeatureRegistry<languages.SignatureHelpProvider>,\n\tmodel: ITextModel,\n\tposition: Position,\n\tcontext: languages.SignatureHelpContext,\n\ttoken: CancellationToken\n): Promise<languages.SignatureHelpResult | undefined> {\n\n\tconst supports = registry.ordered(model);\n\n\tfor (const support of supports) {\n\t\ttry {\n\t\t\tconst result = await support.provideSignatureHelp(model, position, token, context);\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tonUnexpectedExternalError(err);\n\t\t}\n\t}\n\treturn undefined;\n}\n\nCommandsRegistry.registerCommand('_executeSignatureHelpProvider', async (accessor, ...args: [URI, IPosition, string?]) => {\n\tconst [uri, position, triggerCharacter] = args;\n\tassertType(URI.isUri(uri));\n\tassertType(Position.isIPosition(position));\n\tassertType(typeof triggerCharacter === 'string' || !triggerCharacter);\n\n\tconst languageFeaturesService = accessor.get(ILanguageFeaturesService);\n\n\tconst ref = await accessor.get(ITextModelService).createModelReference(uri);\n\ttry {\n\n\t\tconst result = await provideSignatureHelp(languageFeaturesService.signatureHelpProvider, ref.object.textEditorModel, Position.lift(position), {\n\t\t\ttriggerKind: languages.SignatureHelpTriggerKind.Invoke,\n\t\t\tisRetrigger: false,\n\t\t\ttriggerCharacter,\n\t\t}, CancellationToken.None);\n\n\t\tif (!result) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tsetTimeout(() => result.dispose(), 0);\n\t\treturn result.value;\n\n\t} finally {\n\t\tref.dispose();\n\t}\n});\n"]}