{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/contrib/parameterHints/test/browser/parameterHintsModel.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAqBhG,MAAM,QAAQ,GAAG,SAAG,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;IAChD,MAAM,gBAAgB,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;IAG5C,MAAM,YAAY,GAA4B;QAC7C,UAAU,EAAE,CAAC;gBACZ,KAAK,EAAE,MAAM;gBACb,UAAU,EAAE,EAAE;aACd,CAAC;QACF,eAAe,EAAE,CAAC;QAClB,eAAe,EAAE,CAAC;KAClB,CAAC;IAEF,MAAM,kBAAkB,GAAkC;QACzD,KAAK,EAAE,YAAY;QACnB,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC;KAClB,CAAC;IAEF,KAAK,CAAC,qBAAqB,EAAE,GAAG,EAAE;QACjC,MAAM,WAAW,GAAG,IAAI,eAAG,EAAc,CAAC;QAC1C,IAAI,QAAkE,CAAC;QAEvE,KAAK,CAAC,GAAG,EAAE;YACV,WAAW,CAAC,KAAK,EAAE,CAAC;YACpB,QAAQ,GAAG,IAAI,6BAAG,EAAuD,CAAC;QAC3E,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,GAAG,EAAE;YACb,WAAW,CAAC,KAAK,EAAE,CAAC;QACrB,CAAC,CAAC,CAAC;QAEH,IAAA,WAAG,GAAsC,CAAC;QAE1C,SAAS,gBAAgB,CAAC,YAAoB;YAC7C,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,CAAC,IAAA,oBAAI,EAAY,YAAY,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC;YACjG,MAAM,MAAM,GAAG,WAAW,CAAC,GAAG,CAAC,IAAA,qBAAI,EAAiB,SAAS,EAAE;gBAC9D,iBAAiB,EAAE,IAAI,uBAAG,CACzB,CAAC,eAAG,EAAgB,oBAAG,CAAkB,EACzC,CAAC,aAAG,EAAc,WAAW,CAAC,GAAG,CAAC,IAAI,aAAG,EAAqB,CAAC,CAAC,CAChE;aACD,CAAC,CAAC,CAAC;YACJ,OAAO,MAAM,CAAC;QACf,CAAC;QAED,SAAS,WAAW,CAAC,KAAU;YAC9B,OAAO,IAAI,OAAO,CAA4C,OAAO,CAAC,EAAE;gBACvE,MAAM,GAAG,GAAG,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,EAAE;oBACpD,GAAG,CAAC,OAAO,EAAE,CAAC;oBACd,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;gBAClE,CAAC,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,IAAI,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAChE,IAAI,IAAgB,CAAC;YACrB,MAAM,WAAW,GAAG,IAAI,OAAO,CAAO,OAAO,CAAC,EAAE,GAAG,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YAEtE,MAAM,WAAW,GAAG,GAAG,CAAC;YAExB,MAAM,MAAM,GAAG,gBAAgB,CAAC,EAAE,CAAC,CAAC;YACpC,WAAW,CAAC,GAAG,CAAC,IAAI,yBAAG,CAAiB,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;YAE3D,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,EAAE,IAAI;gBAAA;oBACvD,mCAA8B,GAAG,CAAC,WAAW,CAAC,CAAC;oBAC/C,qCAAgC,GAAG,EAAE,CAAC;gBAQvC,CAAC;gBANA,oBAAoB,CAAC,MAAkB,EAAE,SAAc,EAAO,MAAyB,EAAE,OAAuC;oBAC/H,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC,wBAAwB,CAAC,gBAAgB,CAAC,CAAC;oBAC7F,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,gBAAgB,EAAE,WAAW,CAAC,CAAC;oBAC1D,IAAI,EAAE,CAAC;oBACP,OAAO,SAAS,CAAC;gBAClB,CAAC;aACD,CAAC,CAAC,CAAC;YAEJ,MAAM,IAAA,yBAAG,EAAgB,EAAE,aAAa,EAAE,IAAI,EAAE,EAAE,KAAK,IAAI,EAAE;gBAC5D,MAAM,CAAC,OAAO,CAAC,UAAU,6BAAgB,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;gBAChE,MAAM,WAAW,CAAC;YACnB,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YACnE,IAAI,IAAgB,CAAC;YACrB,MAAM,WAAW,GAAG,IAAI,OAAO,CAAO,OAAO,CAAC,EAAE,GAAG,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YAEtE,MAAM,WAAW,GAAG,GAAG,CAAC;YAExB,MAAM,MAAM,GAAG,gBAAgB,CAAC,EAAE,CAAC,CAAC;YACpC,WAAW,CAAC,GAAG,CAAC,IAAI,yBAAG,CAAiB,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;YAE3D,IAAI,WAAW,GAAG,CAAC,CAAC;YACpB,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,EAAE,IAAI;gBAAA;oBACvD,mCAA8B,GAAG,CAAC,WAAW,CAAC,CAAC;oBAC/C,qCAAgC,GAAG,EAAE,CAAC;gBA4BvC,CAAC;gBA1BA,oBAAoB,CAAC,MAAkB,EAAE,SAAc,EAAO,MAAyB,EAAE,OAAuC;oBAC/H,EAAE,WAAW,CAAC;oBACd,IAAI;wBACH,IAAI,WAAW,KAAK,CAAC,EAAE;4BACtB,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC,wBAAwB,CAAC,gBAAgB,CAAC,CAAC;4BAC7F,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,gBAAgB,EAAE,WAAW,CAAC,CAAC;4BAC1D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;4BAC/C,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,mBAAmB,EAAE,SAAS,CAAC,CAAC;4BAE3D,YAAY;4BACZ,UAAU,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,6BAAgB,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;yBACrF;6BAAM;4BACN,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;4BACnC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC,wBAAwB,CAAC,gBAAgB,CAAC,CAAC;4BAC7F,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;4BAC9C,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,gBAAgB,EAAE,WAAW,CAAC,CAAC;4BAC1D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,mBAAmB,EAAE,YAAY,CAAC,CAAC;4BAE9D,IAAI,EAAE,CAAC;yBACP;wBACD,OAAO,kBAAkB,CAAC;qBAC1B;oBAAC,OAAO,GAAG,EAAE;wBACb,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBACnB,MAAM,GAAG,CAAC;qBACV;gBACF,CAAC;aACD,CAAC,CAAC,CAAC;YAEJ,MAAM,IAAA,yBAAG,EAAgB,EAAE,aAAa,EAAE,IAAI,EAAE,EAAE,KAAK,IAAI,EAAE;gBAC5D,MAAM,CAAC,OAAO,CAAC,UAAU,6BAAgB,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;gBAChE,MAAM,WAAW,CAAC;YACnB,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uEAAuE,EAAE,KAAK,IAAI,EAAE;YACxF,IAAI,IAAgB,CAAC;YACrB,MAAM,WAAW,GAAG,IAAI,OAAO,CAAO,OAAO,CAAC,EAAE,GAAG,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YAEtE,MAAM,WAAW,GAAG,GAAG,CAAC;YAExB,MAAM,MAAM,GAAG,gBAAgB,CAAC,EAAE,CAAC,CAAC;YACpC,MAAM,SAAS,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,yBAAG,CAAiB,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;YAE7E,IAAI,WAAW,GAAG,CAAC,CAAC;YACpB,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,EAAE,IAAI;gBAAA;oBACvD,mCAA8B,GAAG,CAAC,WAAW,CAAC,CAAC;oBAC/C,qCAAgC,GAAG,EAAE,CAAC;gBA4BvC,CAAC;gBA1BA,oBAAoB,CAAC,MAAkB,EAAE,SAAc,EAAO,MAAyB,EAAE,OAAuC;oBAC/H,IAAI;wBACH,EAAE,WAAW,CAAC;wBACd,IAAI,WAAW,KAAK,CAAC,EAAE;4BACtB,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC,wBAAwB,CAAC,gBAAgB,CAAC,CAAC;4BAC7F,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,gBAAgB,EAAE,WAAW,CAAC,CAAC;4BAC1D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;4BAC/C,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,mBAAmB,EAAE,SAAS,CAAC,CAAC;4BAE3D,uBAAuB;4BACvB,SAAS,CAAC,MAAM,EAAE,CAAC;4BACnB,MAAM,CAAC,OAAO,CAAC,UAAU,6BAAgB,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;yBAChE;6BAAM;4BACN,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;4BACnC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC,wBAAwB,CAAC,gBAAgB,CAAC,CAAC;4BAC7F,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,gBAAgB,EAAE,WAAW,CAAC,CAAC;4BAC1D,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;4BAC9C,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,mBAAmB,EAAE,SAAS,CAAC,CAAC;4BAC3D,IAAI,EAAE,CAAC;yBACP;wBACD,OAAO,kBAAkB,CAAC;qBAC1B;oBAAC,OAAO,GAAG,EAAE;wBACb,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBACnB,MAAM,GAAG,CAAC;qBACV;gBACF,CAAC;aACD,CAAC,CAAC,CAAC;YAEJ,MAAM,IAAA,yBAAG,EAAgB,EAAE,aAAa,EAAE,IAAI,EAAE,EAAE,GAAG,EAAE;gBACtD,MAAM,CAAC,OAAO,CAAC,UAAU,6BAAgB,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;gBAChE,OAAO,WAAW,CAAC;YACpB,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mGAAmG,EAAE,KAAK,IAAI,EAAE;YACpH,IAAI,IAAgB,CAAC;YACrB,MAAM,WAAW,GAAG,IAAI,OAAO,CAAO,OAAO,CAAC,EAAE,GAAG,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YAEtE,MAAM,MAAM,GAAG,gBAAgB,CAAC,EAAE,CAAC,CAAC;YACpC,WAAW,CAAC,GAAG,CAAC,IAAI,yBAAG,CAAiB,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;YAE9D,IAAI,WAAW,GAAG,CAAC,CAAC;YACpB,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,EAAE,IAAI;gBAAA;oBACvD,mCAA8B,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;oBACjD,qCAAgC,GAAG,EAAE,CAAC;gBAsBvC,CAAC;gBApBA,oBAAoB,CAAC,MAAkB,EAAE,SAAc,EAAO,MAAyB,EAAE,OAAuC;oBAC/H,IAAI;wBACH,EAAE,WAAW,CAAC;wBAEd,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC,wBAAwB,CAAC,gBAAgB,CAAC,CAAC;wBAC7F,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;wBAC/C,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;wBAElD,6CAA6C;wBAC7C,UAAU,CAAC,GAAG,EAAE;4BACf,MAAM,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;4BAEnC,IAAI,EAAE,CAAC;wBACR,CAAC,EAAE,EAAE,CAAC,CAAC;wBACP,OAAO,SAAS,CAAC;qBACjB;oBAAC,OAAO,GAAG,EAAE;wBACb,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBACnB,MAAM,GAAG,CAAC;qBACV;gBACF,CAAC;aACD,CAAC,CAAC,CAAC;YAEJ,MAAM,IAAA,yBAAG,EAAgB,EAAE,aAAa,EAAE,IAAI,EAAE,EAAE,KAAK,IAAI,EAAE;gBAC5D,MAAM,CAAC,OAAO,CAAC,UAAU,6BAAgB,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;gBACxD,MAAM,CAAC,OAAO,CAAC,UAAU,6BAAgB,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;gBACxD,MAAM,CAAC,OAAO,CAAC,UAAU,6BAAgB,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;gBAExD,MAAM,WAAW,CAAC;YACnB,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YACnE,IAAI,IAAgB,CAAC;YACrB,MAAM,WAAW,GAAG,IAAI,OAAO,CAAO,OAAO,CAAC,EAAE,GAAG,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YAEtE,MAAM,MAAM,GAAG,gBAAgB,CAAC,EAAE,CAAC,CAAC;YACpC,WAAW,CAAC,GAAG,CAAC,IAAI,yBAAG,CAAiB,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;YAE9D,IAAI,WAAW,GAAG,CAAC,CAAC;YAEpB,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,EAAE,IAAI;gBAAA;oBACvD,mCAA8B,GAAG,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;oBAC5C,qCAAgC,GAAG,EAAE,CAAC;gBA0BvC,CAAC;gBAxBA,oBAAoB,CAAC,MAAkB,EAAE,SAAc,EAAO,MAAyB,EAAE,OAAuC;oBAC/H,IAAI;wBACH,EAAE,WAAW,CAAC;wBACd,IAAI,WAAW,KAAK,CAAC,EAAE;4BACtB,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC,wBAAwB,CAAC,gBAAgB,CAAC,CAAC;4BAC7F,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;4BAElD,8CAA8C;4BAC9C,UAAU,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,6BAAgB,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;yBAC9E;6BAAM,IAAI,WAAW,KAAK,CAAC,EAAE;4BAC7B,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC,wBAAwB,CAAC,gBAAgB,CAAC,CAAC;4BAC7F,MAAM,CAAC,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;4BAC/B,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,gBAAgB,EAAE,GAAG,CAAC,CAAC;4BAClD,IAAI,EAAE,CAAC;yBACP;6BAAM;4BACN,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;yBACjC;wBAED,OAAO,kBAAkB,CAAC;qBAC1B;oBAAC,OAAO,GAAG,EAAE;wBACb,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBACnB,MAAM,GAAG,CAAC;qBACV;gBACF,CAAC;aACD,CAAC,CAAC,CAAC;YAEJ,MAAM,IAAA,yBAAG,EAAgB,EAAE,aAAa,EAAE,IAAI,EAAE,EAAE,GAAG,EAAE;gBACtD,MAAM,CAAC,OAAO,CAAC,UAAU,6BAAgB,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;gBACxD,OAAO,WAAW,CAAC;YACpB,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0DAA0D,EAAE,KAAK,IAAI,EAAE;YAE3E,MAAM,MAAM,GAAG,gBAAgB,CAAC,SAAS,CAAC,CAAC;YAC3C,MAAM,UAAU,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,yBAAG,CAAiB,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;YAE9E,IAAI,wBAAwB,GAAG,CAAC,CAAC,CAAC;YAClC,IAAI,WAAW,GAAG,CAAC,CAAC;YACpB,MAAM,mBAAmB,GAAG,IAAI;gBAAA;oBAC/B,mCAA8B,GAAG,EAAE,CAAC;oBACpC,qCAAgC,GAAG,EAAE,CAAC;gBAiCvC,CAAC;gBA9BA,oBAAoB,CAAC,MAAkB,EAAE,SAAc,EAAO,KAAwB;oBACrF,IAAI;wBACH,MAAM,KAAK,GAAG,WAAW,EAAE,CAAC;wBAC5B,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,uBAAuB,CAAC,GAAG,EAAE,GAAG,wBAAwB,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;wBAE5F,6BAA6B;wBAC7B,IAAI,KAAK,KAAK,CAAC,EAAE;4BAChB,UAAU,CAAC,OAAO,CAAC,EAAE,WAAW,EAAE,SAAS,CAAC,wBAAwB,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;yBAClF;wBAED,OAAO,IAAI,OAAO,CAAgC,OAAO,CAAC,EAAE;4BAC3D,UAAU,CAAC,GAAG,EAAE;gCACf,OAAO,CAAC;oCACP,KAAK,EAAE;wCACN,UAAU,EAAE,CAAC;gDACZ,KAAK,EAAE,EAAE,GAAG,KAAK;gDACjB,UAAU,EAAE,EAAE;6CACd,CAAC;wCACF,eAAe,EAAE,CAAC;wCAClB,eAAe,EAAE,CAAC;qCAClB;oCACD,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC;iCAClB,CAAC,CAAC;4BACJ,CAAC,EAAE,GAAG,CAAC,CAAC;wBACT,CAAC,CAAC,CAAC;qBACH;oBAAC,OAAO,GAAG,EAAE;wBACb,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBACnB,MAAM,GAAG,CAAC;qBACV;gBACF,CAAC;aACD,CAAC;YAEF,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,EAAE,mBAAmB,CAAC,CAAC,CAAC;YAE1E,MAAM,IAAA,yBAAG,EAAgB,EAAE,aAAa,EAAE,IAAI,EAAE,EAAE,KAAK,IAAI,EAAE;gBAE5D,UAAU,CAAC,OAAO,CAAC,EAAE,WAAW,EAAE,SAAS,CAAC,wBAAwB,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;gBAClF,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,wBAAwB,CAAC,CAAC;gBAEjD,OAAO,IAAI,OAAO,CAAO,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE,CAC5C,WAAW,CAAC,GAAG,CAAC,UAAU,CAAC,cAAc,CAAC,gBAAgB,CAAC,EAAE;oBAC5D,IAAI;wBACH,MAAM,CAAC,WAAW,CAAC,CAAC,EAAE,wBAAwB,CAAC,CAAC;wBAChD,MAAM,CAAC,WAAW,CAAC,GAAG,EAAE,gBAAiB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;wBAC/D,OAAO,EAAE,CAAC;qBACV;oBAAC,OAAO,CAAC,EAAE;wBACX,MAAM,CAAC,CAAC,CAAC,CAAC;qBACV;gBACF,CAAC,CAAC,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACxE,IAAI,IAAgB,CAAC;YACrB,MAAM,WAAW,GAAG,IAAI,OAAO,CAAO,OAAO,CAAC,EAAE,GAAG,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YAEtE,MAAM,WAAW,GAAG,GAAG,CAAC;YACxB,MAAM,aAAa,GAAG,GAAG,CAAC;YAE1B,MAAM,MAAM,GAAG,gBAAgB,CAAC,EAAE,CAAC,CAAC;YACpC,WAAW,CAAC,GAAG,CAAC,IAAI,yBAAG,CAAiB,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;YAE9D,IAAI,WAAW,GAAG,CAAC,CAAC;YACpB,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,EAAE,IAAI;gBAAA;oBACvD,mCAA8B,GAAG,CAAC,WAAW,CAAC,CAAC;oBAC/C,qCAAgC,GAAG,CAAC,aAAa,CAAC,CAAC;gBA0BpD,CAAC;gBAxBA,oBAAoB,CAAC,MAAkB,EAAE,SAAc,EAAO,MAAyB,EAAE,OAAuC;oBAC/H,IAAI;wBACH,EAAE,WAAW,CAAC;wBACd,IAAI,WAAW,KAAK,CAAC,EAAE;4BACtB,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC,wBAAwB,CAAC,gBAAgB,CAAC,CAAC;4BAC7F,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,gBAAgB,EAAE,WAAW,CAAC,CAAC;4BAE1D,8CAA8C;4BAC9C,UAAU,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,6BAAgB,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;yBACxF;6BAAM,IAAI,WAAW,KAAK,CAAC,EAAE;4BAC7B,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC,wBAAwB,CAAC,gBAAgB,CAAC,CAAC;4BAC7F,MAAM,CAAC,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;4BAC/B,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,gBAAgB,EAAE,aAAa,CAAC,CAAC;4BAC5D,IAAI,EAAE,CAAC;yBACP;6BAAM;4BACN,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;yBACjC;wBAED,OAAO,kBAAkB,CAAC;qBAC1B;oBAAC,OAAO,GAAG,EAAE;wBACb,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBACnB,MAAM,GAAG,CAAC;qBACV;gBACF,CAAC;aACD,CAAC,CAAC,CAAC;YAEJ,MAAM,IAAA,yBAAG,EAAgB,EAAE,aAAa,EAAE,IAAI,EAAE,EAAE,KAAK,IAAI,EAAE;gBAC5D,mCAAmC;gBACnC,MAAM,CAAC,OAAO,CAAC,UAAU,6BAAgB,EAAE,IAAI,EAAE,aAAa,EAAE,CAAC,CAAC;gBAElE,iCAAiC;gBACjC,MAAM,CAAC,OAAO,CAAC,UAAU,6BAAgB,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;gBAEhE,OAAO,WAAW,CAAC;YACpB,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iDAAiD,EAAE,KAAK,IAAI,EAAE;YAClE,MAAM,WAAW,GAAG,GAAG,CAAC;YACxB,MAAM,eAAe,GAAG,eAAe,CAAC;YACxC,MAAM,gBAAgB,GAAG,gBAAgB,CAAC;YAC1C,MAAM,aAAa,GAAG,WAAW,CAAC;YAElC,MAAM,MAAM,GAAG,gBAAgB,CAAC,EAAE,CAAC,CAAC;YACpC,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,yBAAG,CAAiB,MAAM,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC;YAE5E,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,EAAE,IAAI;gBAAA;oBACvD,mCAA8B,GAAG,CAAC,WAAW,CAAC,CAAC;oBAC/C,qCAAgC,GAAG,EAAE,CAAC;gBA6BvC,CAAC;gBA3BA,KAAK,CAAC,oBAAoB,CAAC,MAAkB,EAAE,SAAc,EAAO,MAAyB,EAAE,OAAuC;oBACrI,IAAI;wBACH,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE;4BACzB,8CAA8C;4BAC9C,UAAU,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,6BAAgB,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;4BAEtF,OAAO;gCACN,KAAK,EAAE;oCACN,eAAe,EAAE,CAAC;oCAClB,eAAe,EAAE,CAAC;oCAClB,UAAU,EAAE,CAAC;4CACZ,KAAK,EAAE,eAAe;4CACtB,UAAU,EAAE;gDACX,EAAE,KAAK,EAAE,aAAa,EAAE;6CACxB;yCACD,CAAC;iCACF;gCACD,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC;6BAClB,CAAC;yBACF;wBAED,OAAO,SAAS,CAAC;qBACjB;oBAAC,OAAO,GAAG,EAAE;wBACb,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBACnB,MAAM,GAAG,CAAC;qBACV;gBACF,CAAC;aACD,CAAC,CAAC,CAAC;YAEJ,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,EAAE,IAAI;gBAAA;oBACvD,mCAA8B,GAAG,CAAC,WAAW,CAAC,CAAC;oBAC/C,qCAAgC,GAAG,EAAE,CAAC;gBAmBvC,CAAC;gBAjBA,KAAK,CAAC,oBAAoB,CAAC,MAAkB,EAAE,SAAc,EAAO,MAAyB,EAAE,OAAuC;oBACrI,IAAI,OAAO,CAAC,WAAW,EAAE;wBACxB,OAAO;4BACN,KAAK,EAAE;gCACN,eAAe,EAAE,CAAC;gCAClB,eAAe,EAAE,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC,OAAO,CAAC,mBAAmB,CAAC,eAAe,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gCAClG,UAAU,EAAE,CAAC;wCACZ,KAAK,EAAE,gBAAgB;wCACvB,UAAU,EAAE,OAAO,CAAC,mBAAmB,CAAC,CAAC,CAAC,OAAO,CAAC,mBAAmB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE;qCACnG,CAAC;6BACF;4BACD,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC;yBAClB,CAAC;qBACF;oBAED,OAAO,SAAS,CAAC;gBAClB,CAAC;aACD,CAAC,CAAC,CAAC;YAEJ,MAAM,IAAA,yBAAG,EAAgB,EAAE,aAAa,EAAE,IAAI,EAAE,EAAE,KAAK,IAAI,EAAE;gBAC5D,MAAM,CAAC,OAAO,CAAC,UAAU,6BAAgB,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;gBAEhE,MAAM,SAAS,GAAG,CAAC,MAAM,WAAW,CAAC,KAAK,CAAC,CAAE,CAAC,KAAK,CAAC;gBACpD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC;gBACnE,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;gBACjD,MAAM,CAAC,WAAW,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;gBAE/E,MAAM,UAAU,GAAG,CAAC,MAAM,WAAW,CAAC,KAAK,CAAC,CAAE,CAAC,KAAK,CAAC;gBACrD,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;gBACrE,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;gBAClD,MAAM,CAAC,WAAW,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;YACjF,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;YACtE,MAAM,MAAM,GAAG,gBAAgB,CAAC,EAAE,CAAC,CAAC;YACpC,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,yBAAG,CAAiB,MAAM,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;YAE7E,MAAM,gBAAgB,GAAG,GAAG,CAAC;YAE7B,IAAI,WAAW,GAAG,CAAC,CAAC;YACpB,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,EAAE,IAAI;gBAAA;oBACvD,mCAA8B,GAAG,CAAC,gBAAgB,CAAC,CAAC;oBACpD,qCAAgC,GAAG,EAAE,CAAC;gBAmBvC,CAAC;gBAjBA,oBAAoB,CAAC,MAAkB,EAAE,SAAc,EAAO,MAAyB,EAAE,OAAuC;oBAC/H,IAAI;wBACH,EAAE,WAAW,CAAC;wBAEd,IAAI,WAAW,KAAK,CAAC,EAAE;4BACtB,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC,wBAAwB,CAAC,gBAAgB,CAAC,CAAC;4BAC7F,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,CAAC;yBAC/D;6BAAM;4BACN,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;yBACjC;wBAED,OAAO,kBAAkB,CAAC;qBAC1B;oBAAC,OAAO,GAAG,EAAE;wBACb,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBACnB,MAAM,GAAG,CAAC;qBACV;gBACF,CAAC;aACD,CAAC,CAAC,CAAC;YAEJ,MAAM,IAAA,yBAAG,EAAgB,EAAE,aAAa,EAAE,IAAI,EAAE,EAAE,KAAK,IAAI,EAAE;gBAC5D,MAAM,CAAC,OAAO,CAAC,UAAU,6BAAgB,EAAE,IAAI,EAAE,gBAAgB,EAAE,CAAC,CAAC;gBACrE,MAAM,CAAC,OAAO,CAAC,UAAU,6BAAgB,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC,CAAC;gBAExD,MAAM,WAAW,CAAC,KAAK,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kGAAkG,EAAE,KAAK,IAAI,EAAE;YACnH,IAAI,IAAuB,CAAC;YAC5B,MAAM,WAAW,GAAG,IAAI,OAAO,CAAO,OAAO,CAAC,EAAE,GAAG,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YAEtE,MAAM,MAAM,GAAG,gBAAgB,CAAC,EAAE,CAAC,CAAC;YACpC,MAAM,KAAK,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,yBAAG,CAAiB,MAAM,EAAE,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;YAE7E,MAAM,gBAAgB,GAAG,GAAG,CAAC;YAC7B,MAAM,kBAAkB,GAAG,GAAG,CAAC;YAE/B,IAAI,WAAW,GAAG,CAAC,CAAC;YACpB,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,CAAC,gBAAgB,EAAE,IAAI;gBAAA;oBACvD,mCAA8B,GAAG,CAAC,gBAAgB,CAAC,CAAC;oBACpD,qCAAgC,GAAG,CAAC,kBAAkB,CAAC,CAAC;gBA6BzD,CAAC;gBA3BA,KAAK,CAAC,oBAAoB,CAAC,MAAkB,EAAE,SAAc,EAAO,MAAyB,EAAE,OAAuC;oBACrI,IAAI;wBACH,EAAE,WAAW,CAAC;wBAEd,IAAI,WAAW,KAAK,CAAC,EAAE;4BACtB,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC,wBAAwB,CAAC,gBAAgB,CAAC,CAAC;4BAC7F,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,gBAAgB,EAAE,gBAAgB,CAAC,CAAC;4BAC/D,UAAU,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,6BAAgB,EAAE,IAAI,EAAE,kBAAkB,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;yBAC7F;6BAAM,IAAI,WAAW,KAAK,CAAC,EAAE;4BAC7B,wDAAwD;4BACxD,UAAU,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,6BAAgB,EAAE,IAAI,EAAE,kBAAkB,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;4BAC7F,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;yBACxD;6BAAM,IAAI,WAAW,KAAK,CAAC,EAAE;4BAC7B,kGAAkG;4BAClG,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,mBAAmB,EAAE,YAAY,CAAC,CAAC;4BAC9D,IAAI,EAAE,CAAC;yBACP;6BAAM;4BACN,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;yBACjC;wBAED,OAAO,kBAAkB,CAAC;qBAC1B;oBAAC,OAAO,GAAG,EAAE;wBACb,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;wBACnB,IAAI,CAAC,GAAG,CAAC,CAAC;wBACV,MAAM,GAAG,CAAC;qBACV;gBACF,CAAC;aACD,CAAC,CAAC,CAAC;YAEJ,MAAM,IAAA,yBAAG,EAAgB,EAAE,aAAa,EAAE,IAAI,EAAE,EAAE,KAAK,IAAI,EAAE;gBAE5D,MAAM,CAAC,OAAO,CAAC,UAAU,6BAAgB,EAAE,IAAI,EAAE,gBAAgB,EAAE,CAAC,CAAC;gBAErE,MAAM,WAAW,CAAC,KAAK,CAAC,CAAC;gBACzB,MAAM,WAAW,CAAC,KAAK,CAAC,CAAC;gBAEzB,MAAM,WAAW,CAAC;YACnB,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"parameterHintsModel.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { runWithFakedTimers } from 'vs/base/test/common/timeTravelScheduler';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Handler } from 'vs/editor/common/editorCommon';\nimport { LanguageFeatureRegistry } from 'vs/editor/common/languageFeatureRegistry';\nimport * as languages from 'vs/editor/common/languages';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { ParameterHintsModel } from 'vs/editor/contrib/parameterHints/browser/parameterHintsModel';\nimport { createTestCodeEditor } from 'vs/editor/test/browser/testCodeEditor';\nimport { createTextModel } from 'vs/editor/test/common/testTextModel';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { InMemoryStorageService, IStorageService } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { NullTelemetryService } from 'vs/platform/telemetry/common/telemetryUtils';\n\nconst mockFile = URI.parse('test:somefile.ttt');\nconst mockFileSelector = { scheme: 'test' };\n\n\nconst emptySigHelp: languages.SignatureHelp = {\n\tsignatures: [{\n\t\tlabel: 'none',\n\t\tparameters: []\n\t}],\n\tactiveParameter: 0,\n\tactiveSignature: 0\n};\n\nconst emptySigHelpResult: languages.SignatureHelpResult = {\n\tvalue: emptySigHelp,\n\tdispose: () => { }\n};\n\nsuite('ParameterHintsModel', () => {\n\tconst disposables = new DisposableStore();\n\tlet registry: LanguageFeatureRegistry<languages.SignatureHelpProvider>;\n\n\tsetup(() => {\n\t\tdisposables.clear();\n\t\tregistry = new LanguageFeatureRegistry<languages.SignatureHelpProvider>();\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction createMockEditor(fileContents: string) {\n\t\tconst textModel = disposables.add(createTextModel(fileContents, undefined, undefined, mockFile));\n\t\tconst editor = disposables.add(createTestCodeEditor(textModel, {\n\t\t\tserviceCollection: new ServiceCollection(\n\t\t\t\t[ITelemetryService, NullTelemetryService],\n\t\t\t\t[IStorageService, disposables.add(new InMemoryStorageService())]\n\t\t\t)\n\t\t}));\n\t\treturn editor;\n\t}\n\n\tfunction getNextHint(model: ParameterHintsModel) {\n\t\treturn new Promise<languages.SignatureHelpResult | undefined>(resolve => {\n\t\t\tconst sub = disposables.add(model.onChangedHints(e => {\n\t\t\t\tsub.dispose();\n\t\t\t\treturn resolve(e ? { value: e, dispose: () => { } } : undefined);\n\t\t\t}));\n\t\t});\n\t}\n\n\ttest('Provider should get trigger character on type', async () => {\n\t\tlet done: () => void;\n\t\tconst donePromise = new Promise<void>(resolve => { done = resolve; });\n\n\t\tconst triggerChar = '(';\n\n\t\tconst editor = createMockEditor('');\n\t\tdisposables.add(new ParameterHintsModel(editor, registry));\n\n\t\tdisposables.add(registry.register(mockFileSelector, new class implements languages.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = [triggerChar];\n\t\t\tsignatureHelpRetriggerCharacters = [];\n\n\t\t\tprovideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: languages.SignatureHelpContext) {\n\t\t\t\tassert.strictEqual(context.triggerKind, languages.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\tassert.strictEqual(context.triggerCharacter, triggerChar);\n\t\t\t\tdone();\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}));\n\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\t\teditor.trigger('keyboard', Handler.Type, { text: triggerChar });\n\t\t\tawait donePromise;\n\t\t});\n\t});\n\n\ttest('Provider should be retriggered if already active', async () => {\n\t\tlet done: () => void;\n\t\tconst donePromise = new Promise<void>(resolve => { done = resolve; });\n\n\t\tconst triggerChar = '(';\n\n\t\tconst editor = createMockEditor('');\n\t\tdisposables.add(new ParameterHintsModel(editor, registry));\n\n\t\tlet invokeCount = 0;\n\t\tdisposables.add(registry.register(mockFileSelector, new class implements languages.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = [triggerChar];\n\t\t\tsignatureHelpRetriggerCharacters = [];\n\n\t\t\tprovideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: languages.SignatureHelpContext): languages.SignatureHelpResult | Promise<languages.SignatureHelpResult> {\n\t\t\t\t++invokeCount;\n\t\t\t\ttry {\n\t\t\t\t\tif (invokeCount === 1) {\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, languages.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, triggerChar);\n\t\t\t\t\t\tassert.strictEqual(context.isRetrigger, false);\n\t\t\t\t\t\tassert.strictEqual(context.activeSignatureHelp, undefined);\n\n\t\t\t\t\t\t// Retrigger\n\t\t\t\t\t\tsetTimeout(() => editor.trigger('keyboard', Handler.Type, { text: triggerChar }), 0);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert.strictEqual(invokeCount, 2);\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, languages.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.strictEqual(context.isRetrigger, true);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, triggerChar);\n\t\t\t\t\t\tassert.strictEqual(context.activeSignatureHelp, emptySigHelp);\n\n\t\t\t\t\t\tdone();\n\t\t\t\t\t}\n\t\t\t\t\treturn emptySigHelpResult;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\t\teditor.trigger('keyboard', Handler.Type, { text: triggerChar });\n\t\t\tawait donePromise;\n\t\t});\n\t});\n\n\ttest('Provider should not be retriggered if previous help is canceled first', async () => {\n\t\tlet done: () => void;\n\t\tconst donePromise = new Promise<void>(resolve => { done = resolve; });\n\n\t\tconst triggerChar = '(';\n\n\t\tconst editor = createMockEditor('');\n\t\tconst hintModel = disposables.add(new ParameterHintsModel(editor, registry));\n\n\t\tlet invokeCount = 0;\n\t\tdisposables.add(registry.register(mockFileSelector, new class implements languages.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = [triggerChar];\n\t\t\tsignatureHelpRetriggerCharacters = [];\n\n\t\t\tprovideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: languages.SignatureHelpContext): languages.SignatureHelpResult | Promise<languages.SignatureHelpResult> {\n\t\t\t\ttry {\n\t\t\t\t\t++invokeCount;\n\t\t\t\t\tif (invokeCount === 1) {\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, languages.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, triggerChar);\n\t\t\t\t\t\tassert.strictEqual(context.isRetrigger, false);\n\t\t\t\t\t\tassert.strictEqual(context.activeSignatureHelp, undefined);\n\n\t\t\t\t\t\t// Cancel and retrigger\n\t\t\t\t\t\thintModel.cancel();\n\t\t\t\t\t\teditor.trigger('keyboard', Handler.Type, { text: triggerChar });\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert.strictEqual(invokeCount, 2);\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, languages.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, triggerChar);\n\t\t\t\t\t\tassert.strictEqual(context.isRetrigger, true);\n\t\t\t\t\t\tassert.strictEqual(context.activeSignatureHelp, undefined);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t}\n\t\t\t\t\treturn emptySigHelpResult;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, () => {\n\t\t\teditor.trigger('keyboard', Handler.Type, { text: triggerChar });\n\t\t\treturn donePromise;\n\t\t});\n\t});\n\n\ttest('Provider should get last trigger character when triggered multiple times and only be invoked once', async () => {\n\t\tlet done: () => void;\n\t\tconst donePromise = new Promise<void>(resolve => { done = resolve; });\n\n\t\tconst editor = createMockEditor('');\n\t\tdisposables.add(new ParameterHintsModel(editor, registry, 5));\n\n\t\tlet invokeCount = 0;\n\t\tdisposables.add(registry.register(mockFileSelector, new class implements languages.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = ['a', 'b', 'c'];\n\t\t\tsignatureHelpRetriggerCharacters = [];\n\n\t\t\tprovideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: languages.SignatureHelpContext) {\n\t\t\t\ttry {\n\t\t\t\t\t++invokeCount;\n\n\t\t\t\t\tassert.strictEqual(context.triggerKind, languages.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\tassert.strictEqual(context.isRetrigger, false);\n\t\t\t\t\tassert.strictEqual(context.triggerCharacter, 'c');\n\n\t\t\t\t\t// Give some time to allow for later triggers\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tassert.strictEqual(invokeCount, 1);\n\n\t\t\t\t\t\tdone();\n\t\t\t\t\t}, 50);\n\t\t\t\t\treturn undefined;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\t\teditor.trigger('keyboard', Handler.Type, { text: 'a' });\n\t\t\teditor.trigger('keyboard', Handler.Type, { text: 'b' });\n\t\t\teditor.trigger('keyboard', Handler.Type, { text: 'c' });\n\n\t\t\tawait donePromise;\n\t\t});\n\t});\n\n\ttest('Provider should be retriggered if already active', async () => {\n\t\tlet done: () => void;\n\t\tconst donePromise = new Promise<void>(resolve => { done = resolve; });\n\n\t\tconst editor = createMockEditor('');\n\t\tdisposables.add(new ParameterHintsModel(editor, registry, 5));\n\n\t\tlet invokeCount = 0;\n\n\t\tdisposables.add(registry.register(mockFileSelector, new class implements languages.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = ['a', 'b'];\n\t\t\tsignatureHelpRetriggerCharacters = [];\n\n\t\t\tprovideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: languages.SignatureHelpContext): languages.SignatureHelpResult | Promise<languages.SignatureHelpResult> {\n\t\t\t\ttry {\n\t\t\t\t\t++invokeCount;\n\t\t\t\t\tif (invokeCount === 1) {\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, languages.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, 'a');\n\n\t\t\t\t\t\t// retrigger after delay for widget to show up\n\t\t\t\t\t\tsetTimeout(() => editor.trigger('keyboard', Handler.Type, { text: 'b' }), 50);\n\t\t\t\t\t} else if (invokeCount === 2) {\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, languages.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.ok(context.isRetrigger);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, 'b');\n\t\t\t\t\t\tdone();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert.fail('Unexpected invoke');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn emptySigHelpResult;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, () => {\n\t\t\teditor.trigger('keyboard', Handler.Type, { text: 'a' });\n\t\t\treturn donePromise;\n\t\t});\n\t});\n\n\ttest('Should cancel existing request when new request comes in', async () => {\n\n\t\tconst editor = createMockEditor('abc def');\n\t\tconst hintsModel = disposables.add(new ParameterHintsModel(editor, registry));\n\n\t\tlet didRequestCancellationOf = -1;\n\t\tlet invokeCount = 0;\n\t\tconst longRunningProvider = new class implements languages.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = [];\n\t\t\tsignatureHelpRetriggerCharacters = [];\n\n\n\t\t\tprovideSignatureHelp(_model: ITextModel, _position: Position, token: CancellationToken): languages.SignatureHelpResult | Promise<languages.SignatureHelpResult> {\n\t\t\t\ttry {\n\t\t\t\t\tconst count = invokeCount++;\n\t\t\t\t\tdisposables.add(token.onCancellationRequested(() => { didRequestCancellationOf = count; }));\n\n\t\t\t\t\t// retrigger on first request\n\t\t\t\t\tif (count === 0) {\n\t\t\t\t\t\thintsModel.trigger({ triggerKind: languages.SignatureHelpTriggerKind.Invoke }, 0);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn new Promise<languages.SignatureHelpResult>(resolve => {\n\t\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\t\tresolve({\n\t\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\t\tsignatures: [{\n\t\t\t\t\t\t\t\t\t\tlabel: '' + count,\n\t\t\t\t\t\t\t\t\t\tparameters: []\n\t\t\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\t\tactiveParameter: 0,\n\t\t\t\t\t\t\t\t\tactiveSignature: 0\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tdispose: () => { }\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}, 100);\n\t\t\t\t\t});\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tdisposables.add(registry.register(mockFileSelector, longRunningProvider));\n\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, async () => {\n\n\t\t\thintsModel.trigger({ triggerKind: languages.SignatureHelpTriggerKind.Invoke }, 0);\n\t\t\tassert.strictEqual(-1, didRequestCancellationOf);\n\n\t\t\treturn new Promise<void>((resolve, reject) =>\n\t\t\t\tdisposables.add(hintsModel.onChangedHints(newParamterHints => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tassert.strictEqual(0, didRequestCancellationOf);\n\t\t\t\t\t\tassert.strictEqual('1', newParamterHints!.signatures[0].label);\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\treject(e);\n\t\t\t\t\t}\n\t\t\t\t})));\n\t\t});\n\t});\n\n\ttest('Provider should be retriggered by retrigger character', async () => {\n\t\tlet done: () => void;\n\t\tconst donePromise = new Promise<void>(resolve => { done = resolve; });\n\n\t\tconst triggerChar = 'a';\n\t\tconst retriggerChar = 'b';\n\n\t\tconst editor = createMockEditor('');\n\t\tdisposables.add(new ParameterHintsModel(editor, registry, 5));\n\n\t\tlet invokeCount = 0;\n\t\tdisposables.add(registry.register(mockFileSelector, new class implements languages.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = [triggerChar];\n\t\t\tsignatureHelpRetriggerCharacters = [retriggerChar];\n\n\t\t\tprovideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: languages.SignatureHelpContext): languages.SignatureHelpResult | Promise<languages.SignatureHelpResult> {\n\t\t\t\ttry {\n\t\t\t\t\t++invokeCount;\n\t\t\t\t\tif (invokeCount === 1) {\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, languages.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, triggerChar);\n\n\t\t\t\t\t\t// retrigger after delay for widget to show up\n\t\t\t\t\t\tsetTimeout(() => editor.trigger('keyboard', Handler.Type, { text: retriggerChar }), 50);\n\t\t\t\t\t} else if (invokeCount === 2) {\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, languages.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.ok(context.isRetrigger);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, retriggerChar);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert.fail('Unexpected invoke');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn emptySigHelpResult;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\t\t// This should not trigger anything\n\t\t\teditor.trigger('keyboard', Handler.Type, { text: retriggerChar });\n\n\t\t\t// But a trigger character should\n\t\t\teditor.trigger('keyboard', Handler.Type, { text: triggerChar });\n\n\t\t\treturn donePromise;\n\t\t});\n\t});\n\n\ttest('should use first result from multiple providers', async () => {\n\t\tconst triggerChar = 'a';\n\t\tconst firstProviderId = 'firstProvider';\n\t\tconst secondProviderId = 'secondProvider';\n\t\tconst paramterLabel = 'parameter';\n\n\t\tconst editor = createMockEditor('');\n\t\tconst model = disposables.add(new ParameterHintsModel(editor, registry, 5));\n\n\t\tdisposables.add(registry.register(mockFileSelector, new class implements languages.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = [triggerChar];\n\t\t\tsignatureHelpRetriggerCharacters = [];\n\n\t\t\tasync provideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: languages.SignatureHelpContext): Promise<languages.SignatureHelpResult | undefined> {\n\t\t\t\ttry {\n\t\t\t\t\tif (!context.isRetrigger) {\n\t\t\t\t\t\t// retrigger after delay for widget to show up\n\t\t\t\t\t\tsetTimeout(() => editor.trigger('keyboard', Handler.Type, { text: triggerChar }), 50);\n\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\t\tactiveParameter: 0,\n\t\t\t\t\t\t\t\tactiveSignature: 0,\n\t\t\t\t\t\t\t\tsignatures: [{\n\t\t\t\t\t\t\t\t\tlabel: firstProviderId,\n\t\t\t\t\t\t\t\t\tparameters: [\n\t\t\t\t\t\t\t\t\t\t{ label: paramterLabel }\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tdispose: () => { }\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn undefined;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tdisposables.add(registry.register(mockFileSelector, new class implements languages.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = [triggerChar];\n\t\t\tsignatureHelpRetriggerCharacters = [];\n\n\t\t\tasync provideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: languages.SignatureHelpContext): Promise<languages.SignatureHelpResult | undefined> {\n\t\t\t\tif (context.isRetrigger) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tvalue: {\n\t\t\t\t\t\t\tactiveParameter: 0,\n\t\t\t\t\t\t\tactiveSignature: context.activeSignatureHelp ? context.activeSignatureHelp.activeSignature + 1 : 0,\n\t\t\t\t\t\t\tsignatures: [{\n\t\t\t\t\t\t\t\tlabel: secondProviderId,\n\t\t\t\t\t\t\t\tparameters: context.activeSignatureHelp ? context.activeSignatureHelp.signatures[0].parameters : []\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdispose: () => { }\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}));\n\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\t\teditor.trigger('keyboard', Handler.Type, { text: triggerChar });\n\n\t\t\tconst firstHint = (await getNextHint(model))!.value;\n\t\t\tassert.strictEqual(firstHint.signatures[0].label, firstProviderId);\n\t\t\tassert.strictEqual(firstHint.activeSignature, 0);\n\t\t\tassert.strictEqual(firstHint.signatures[0].parameters[0].label, paramterLabel);\n\n\t\t\tconst secondHint = (await getNextHint(model))!.value;\n\t\t\tassert.strictEqual(secondHint.signatures[0].label, secondProviderId);\n\t\t\tassert.strictEqual(secondHint.activeSignature, 1);\n\t\t\tassert.strictEqual(secondHint.signatures[0].parameters[0].label, paramterLabel);\n\t\t});\n\t});\n\n\ttest('Quick typing should use the first trigger character', async () => {\n\t\tconst editor = createMockEditor('');\n\t\tconst model = disposables.add(new ParameterHintsModel(editor, registry, 50));\n\n\t\tconst triggerCharacter = 'a';\n\n\t\tlet invokeCount = 0;\n\t\tdisposables.add(registry.register(mockFileSelector, new class implements languages.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = [triggerCharacter];\n\t\t\tsignatureHelpRetriggerCharacters = [];\n\n\t\t\tprovideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: languages.SignatureHelpContext): languages.SignatureHelpResult | Promise<languages.SignatureHelpResult> {\n\t\t\t\ttry {\n\t\t\t\t\t++invokeCount;\n\n\t\t\t\t\tif (invokeCount === 1) {\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, languages.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, triggerCharacter);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert.fail('Unexpected invoke');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn emptySigHelpResult;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\t\teditor.trigger('keyboard', Handler.Type, { text: triggerCharacter });\n\t\t\teditor.trigger('keyboard', Handler.Type, { text: 'x' });\n\n\t\t\tawait getNextHint(model);\n\t\t});\n\t});\n\n\ttest('Retrigger while a pending resolve is still going on should preserve last active signature #96702', async () => {\n\t\tlet done: (r?: any) => void;\n\t\tconst donePromise = new Promise<void>(resolve => { done = resolve; });\n\n\t\tconst editor = createMockEditor('');\n\t\tconst model = disposables.add(new ParameterHintsModel(editor, registry, 50));\n\n\t\tconst triggerCharacter = 'a';\n\t\tconst retriggerCharacter = 'b';\n\n\t\tlet invokeCount = 0;\n\t\tdisposables.add(registry.register(mockFileSelector, new class implements languages.SignatureHelpProvider {\n\t\t\tsignatureHelpTriggerCharacters = [triggerCharacter];\n\t\t\tsignatureHelpRetriggerCharacters = [retriggerCharacter];\n\n\t\t\tasync provideSignatureHelp(_model: ITextModel, _position: Position, _token: CancellationToken, context: languages.SignatureHelpContext): Promise<languages.SignatureHelpResult> {\n\t\t\t\ttry {\n\t\t\t\t\t++invokeCount;\n\n\t\t\t\t\tif (invokeCount === 1) {\n\t\t\t\t\t\tassert.strictEqual(context.triggerKind, languages.SignatureHelpTriggerKind.TriggerCharacter);\n\t\t\t\t\t\tassert.strictEqual(context.triggerCharacter, triggerCharacter);\n\t\t\t\t\t\tsetTimeout(() => editor.trigger('keyboard', Handler.Type, { text: retriggerCharacter }), 50);\n\t\t\t\t\t} else if (invokeCount === 2) {\n\t\t\t\t\t\t// Trigger again while we wait for resolve to take place\n\t\t\t\t\t\tsetTimeout(() => editor.trigger('keyboard', Handler.Type, { text: retriggerCharacter }), 50);\n\t\t\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 1000));\n\t\t\t\t\t} else if (invokeCount === 3) {\n\t\t\t\t\t\t// Make sure that in a retrigger during a pending resolve, we still have the old active signature.\n\t\t\t\t\t\tassert.strictEqual(context.activeSignatureHelp, emptySigHelp);\n\t\t\t\t\t\tdone();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert.fail('Unexpected invoke');\n\t\t\t\t\t}\n\n\t\t\t\t\treturn emptySigHelpResult;\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\tdone(err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, async () => {\n\n\t\t\teditor.trigger('keyboard', Handler.Type, { text: triggerCharacter });\n\n\t\t\tawait getNextHint(model);\n\t\t\tawait getNextHint(model);\n\n\t\t\tawait donePromise;\n\t\t});\n\t});\n});\n"]}