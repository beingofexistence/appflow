{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/standalone/test/browser/standaloneServices.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAgBhG,KAAK,CAAC,6BAA6B,EAAE,GAAG,EAAE;QAEzC,IAAA,WAAG,GAAsC,CAAC;QAE1C,MAAM,+BAAgC,SAAQ,yBAAI;YAC1C,YAAY,CAAC,CAAiB;gBACpC,KAAK,CAAC,CAAC,CAAS,CAAC,EAAE,IAAK,CAAC,CAAC;YAC3B,CAAC;SACD;QAED,IAAI,CAAC,mCAAmC,EAAE,GAAG,EAAE;YAE9C,MAAM,WAAW,GAAG,IAAI,eAAG,EAAc,CAAC;YAC1C,MAAM,iBAAiB,GAAG,IAAI,uBAAG,EAAgB,CAAC;YAClD,MAAM,oBAAoB,GAAG,IAAI,0BAAG,CAAkB,iBAAiB,EAAE,IAAI,CAAC,CAAC;YAC/E,MAAM,oBAAoB,GAAG,IAAI,yBAAI,EAA4B,CAAC;YAClE,MAAM,iBAAiB,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,wBAAI,CAAc,oBAAoB,CAAC,CAAC,CAAC;YACvF,MAAM,cAAc,GAAG,IAAI,yBAAI,CAAqB,oBAAoB,CAAC,CAAC;YAC1E,MAAM,mBAAmB,GAAG,IAAI,yBAAI,EAA2B,CAAC;YAChE,MAAM,sBAAsB,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,6BAAI,EAAoB,CAAC,CAAC;YAC7E,MAAM,iBAAiB,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,kCAAI,CAAwB,iBAAiB,EAAE,sBAAsB,CAAC,CAAC,CAAC;YACtH,MAAM,iBAAiB,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,+BAA+B,CAAC,iBAAiB,EAAE,cAAc,EAAE,oBAAG,EAAmB,mBAAmB,EAAE,IAAI,SAAG,EAAa,EAAE,iBAAiB,CAAC,CAAC,CAAC;YAEtM,IAAI,cAAc,GAAG,KAAK,CAAC;YAC3B,WAAW,CAAC,GAAG,CAAC,iBAAiB,CAAC,oBAAoB,CAAC,aAAa,uBAAc,GAAG,EAAE;gBACtF,cAAc,GAAG,IAAI,CAAC;YACvB,CAAC,EAAE,SAAS,CAAC,CAAC,CAAC;YAEf,iBAAiB,CAAC,YAAY,CAAC;gBAC9B,2BAA2B,EAAE,IAAI;gBACjC,OAAO,EAAE,KAAK;gBACd,QAAQ,EAAE,KAAK;gBACf,MAAM,EAAE,KAAK;gBACb,OAAO,EAAE,KAAK;gBACd,WAAW,EAAE,KAAK;gBAClB,OAAO,qBAAY;gBACnB,IAAI,EAAE,IAAK;aACX,CAAC,CAAC;YAEH,MAAM,CAAC,EAAE,CAAC,cAAc,EAAE,iBAAiB,CAAC,CAAC;YAE7C,WAAW,CAAC,OAAO,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"standaloneServices.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { KeyCode } from 'vs/base/common/keyCodes';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { StandaloneCodeEditorService } from 'vs/editor/standalone/browser/standaloneCodeEditorService';\nimport { StandaloneCommandService, StandaloneConfigurationService, StandaloneKeybindingService, StandaloneNotificationService } from 'vs/editor/standalone/browser/standaloneServices';\nimport { StandaloneThemeService } from 'vs/editor/standalone/browser/standaloneThemeService';\nimport { ContextKeyService } from 'vs/platform/contextkey/browser/contextKeyService';\nimport { InstantiationService } from 'vs/platform/instantiation/common/instantiationService';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { IKeyboardEvent } from 'vs/platform/keybinding/common/keybinding';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { NullTelemetryService } from 'vs/platform/telemetry/common/telemetryUtils';\n\nsuite('StandaloneKeybindingService', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tclass TestStandaloneKeybindingService extends StandaloneKeybindingService {\n\t\tpublic testDispatch(e: IKeyboardEvent): void {\n\t\t\tsuper._dispatch(e, null!);\n\t\t}\n\t}\n\n\ttest('issue microsoft/monaco-editor#167', () => {\n\n\t\tconst disposables = new DisposableStore();\n\t\tconst serviceCollection = new ServiceCollection();\n\t\tconst instantiationService = new InstantiationService(serviceCollection, true);\n\t\tconst configurationService = new StandaloneConfigurationService();\n\t\tconst contextKeyService = disposables.add(new ContextKeyService(configurationService));\n\t\tconst commandService = new StandaloneCommandService(instantiationService);\n\t\tconst notificationService = new StandaloneNotificationService();\n\t\tconst standaloneThemeService = disposables.add(new StandaloneThemeService());\n\t\tconst codeEditorService = disposables.add(new StandaloneCodeEditorService(contextKeyService, standaloneThemeService));\n\t\tconst keybindingService = disposables.add(new TestStandaloneKeybindingService(contextKeyService, commandService, NullTelemetryService, notificationService, new NullLogService(), codeEditorService));\n\n\t\tlet commandInvoked = false;\n\t\tdisposables.add(keybindingService.addDynamicKeybinding('testCommand', KeyCode.F9, () => {\n\t\t\tcommandInvoked = true;\n\t\t}, undefined));\n\n\t\tkeybindingService.testDispatch({\n\t\t\t_standardKeyboardEventBrand: true,\n\t\t\tctrlKey: false,\n\t\t\tshiftKey: false,\n\t\t\taltKey: false,\n\t\t\tmetaKey: false,\n\t\t\taltGraphKey: false,\n\t\t\tkeyCode: KeyCode.F9,\n\t\t\tcode: null!\n\t\t});\n\n\t\tassert.ok(commandInvoked, 'command invoked');\n\n\t\tdisposables.dispose();\n\t});\n});\n"]}