{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/standalone/test/browser/monarch.test.ts"],"names":[],"mappings":"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","file":"monarch.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { Token, TokenizationRegistry } from 'vs/editor/common/languages';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { LanguageService } from 'vs/editor/common/services/languageService';\nimport { StandaloneConfigurationService } from 'vs/editor/standalone/browser/standaloneServices';\nimport { compile } from 'vs/editor/standalone/common/monarch/monarchCompile';\nimport { MonarchTokenizer } from 'vs/editor/standalone/common/monarch/monarchLexer';\nimport { IMonarchLanguage } from 'vs/editor/standalone/common/monarch/monarchTypes';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\n\nsuite('Monarch', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction createMonarchTokenizer(languageService: ILanguageService, languageId: string, language: IMonarchLanguage, configurationService: IConfigurationService): MonarchTokenizer {\n\t\treturn new MonarchTokenizer(languageService, null!, languageId, compile(languageId, language), configurationService);\n\t}\n\n\tfunction getTokens(tokenizer: MonarchTokenizer, lines: string[]): Token[][] {\n\t\tconst actualTokens: Token[][] = [];\n\t\tlet state = tokenizer.getInitialState();\n\t\tfor (const line of lines) {\n\t\t\tconst result = tokenizer.tokenize(line, true, state);\n\t\t\tactualTokens.push(result.tokens);\n\t\t\tstate = result.endState;\n\t\t}\n\t\treturn actualTokens;\n\t}\n\n\ttest('Ensure @rematch and nextEmbedded can be used together in Monarch grammar', () => {\n\t\tconst disposables = new DisposableStore();\n\t\tconst languageService = disposables.add(new LanguageService());\n\t\tconst configurationService = new StandaloneConfigurationService();\n\t\tdisposables.add(languageService.registerLanguage({ id: 'sql' }));\n\t\tdisposables.add(TokenizationRegistry.register('sql', disposables.add(createMonarchTokenizer(languageService, 'sql', {\n\t\t\ttokenizer: {\n\t\t\t\troot: [\n\t\t\t\t\t[/./, 'token']\n\t\t\t\t]\n\t\t\t}\n\t\t}, configurationService))));\n\t\tconst SQL_QUERY_START = '(SELECT|INSERT|UPDATE|DELETE|CREATE|REPLACE|ALTER|WITH)';\n\t\tconst tokenizer = disposables.add(createMonarchTokenizer(languageService, 'test1', {\n\t\t\ttokenizer: {\n\t\t\t\troot: [\n\t\t\t\t\t[`(\\\"\\\"\\\")${SQL_QUERY_START}`, [{ 'token': 'string.quote', }, { token: '@rematch', next: '@endStringWithSQL', nextEmbedded: 'sql', },]],\n\t\t\t\t\t[/(\"\"\")$/, [{ token: 'string.quote', next: '@maybeStringIsSQL', },]],\n\t\t\t\t],\n\t\t\t\tmaybeStringIsSQL: [\n\t\t\t\t\t[/(.*)/, {\n\t\t\t\t\t\tcases: {\n\t\t\t\t\t\t\t[`${SQL_QUERY_START}\\\\b.*`]: { token: '@rematch', next: '@endStringWithSQL', nextEmbedded: 'sql', },\n\t\t\t\t\t\t\t'@default': { token: '@rematch', switchTo: '@endDblDocString', },\n\t\t\t\t\t\t}\n\t\t\t\t\t}],\n\t\t\t\t],\n\t\t\t\tendDblDocString: [\n\t\t\t\t\t['[^\\']+', 'string'],\n\t\t\t\t\t['\\\\\\\\\\'', 'string'],\n\t\t\t\t\t['\\'\\'\\'', 'string', '@popall'],\n\t\t\t\t\t['\\'', 'string']\n\t\t\t\t],\n\t\t\t\tendStringWithSQL: [[/\"\"\"/, { token: 'string.quote', next: '@popall', nextEmbedded: '@pop', },]],\n\t\t\t}\n\t\t}, configurationService));\n\n\t\tconst lines = [\n\t\t\t`mysql_query(\"\"\"SELECT * FROM table_name WHERE ds = '<DATEID>'\"\"\")`,\n\t\t\t`mysql_query(\"\"\"`,\n\t\t\t`SELECT *`,\n\t\t\t`FROM table_name`,\n\t\t\t`WHERE ds = '<DATEID>'`,\n\t\t\t`\"\"\")`,\n\t\t];\n\n\t\tconst actualTokens = getTokens(tokenizer, lines);\n\n\t\tassert.deepStrictEqual(actualTokens, [\n\t\t\t[\n\t\t\t\tnew Token(0, 'source.test1', 'test1'),\n\t\t\t\tnew Token(12, 'string.quote.test1', 'test1'),\n\t\t\t\tnew Token(15, 'token.sql', 'sql'),\n\t\t\t\tnew Token(61, 'string.quote.test1', 'test1'),\n\t\t\t\tnew Token(64, 'source.test1', 'test1')\n\t\t\t],\n\t\t\t[\n\t\t\t\tnew Token(0, 'source.test1', 'test1'),\n\t\t\t\tnew Token(12, 'string.quote.test1', 'test1')\n\t\t\t],\n\t\t\t[\n\t\t\t\tnew Token(0, 'token.sql', 'sql')\n\t\t\t],\n\t\t\t[\n\t\t\t\tnew Token(0, 'token.sql', 'sql')\n\t\t\t],\n\t\t\t[\n\t\t\t\tnew Token(0, 'token.sql', 'sql')\n\t\t\t],\n\t\t\t[\n\t\t\t\tnew Token(0, 'string.quote.test1', 'test1'),\n\t\t\t\tnew Token(3, 'source.test1', 'test1')\n\t\t\t]\n\t\t]);\n\t\tdisposables.dispose();\n\t});\n\n\ttest('microsoft/monaco-editor#1235: Empty Line Handling', () => {\n\t\tconst disposables = new DisposableStore();\n\t\tconst configurationService = new StandaloneConfigurationService();\n\t\tconst languageService = disposables.add(new LanguageService());\n\t\tconst tokenizer = disposables.add(createMonarchTokenizer(languageService, 'test', {\n\t\t\ttokenizer: {\n\t\t\t\troot: [\n\t\t\t\t\t{ include: '@comments' },\n\t\t\t\t],\n\n\t\t\t\tcomments: [\n\t\t\t\t\t[/\\/\\/$/, 'comment'], // empty single-line comment\n\t\t\t\t\t[/\\/\\//, 'comment', '@comment_cpp'],\n\t\t\t\t],\n\n\t\t\t\tcomment_cpp: [\n\t\t\t\t\t[/(?:[^\\\\]|(?:\\\\.))+$/, 'comment', '@pop'],\n\t\t\t\t\t[/.+$/, 'comment'],\n\t\t\t\t\t[/$/, 'comment', '@pop']\n\t\t\t\t\t// No possible rule to detect an empty line and @pop?\n\t\t\t\t],\n\t\t\t},\n\t\t}, configurationService));\n\n\t\tconst lines = [\n\t\t\t`// This comment \\\\`,\n\t\t\t`   continues on the following line`,\n\t\t\t``,\n\t\t\t`// This comment does NOT continue \\\\\\\\`,\n\t\t\t`   because the escape char was itself escaped`,\n\t\t\t``,\n\t\t\t`// This comment DOES continue because \\\\\\\\\\\\`,\n\t\t\t`   the 1st '\\\\' escapes the 2nd; the 3rd escapes EOL`,\n\t\t\t``,\n\t\t\t`// This comment continues to the following line \\\\`,\n\t\t\t``,\n\t\t\t`But the line was empty. This line should not be commented.`,\n\t\t];\n\n\t\tconst actualTokens = getTokens(tokenizer, lines);\n\n\t\tassert.deepStrictEqual(actualTokens, [\n\t\t\t[new Token(0, 'comment.test', 'test')],\n\t\t\t[new Token(0, 'comment.test', 'test')],\n\t\t\t[],\n\t\t\t[new Token(0, 'comment.test', 'test')],\n\t\t\t[new Token(0, 'source.test', 'test')],\n\t\t\t[],\n\t\t\t[new Token(0, 'comment.test', 'test')],\n\t\t\t[new Token(0, 'comment.test', 'test')],\n\t\t\t[],\n\t\t\t[new Token(0, 'comment.test', 'test')],\n\t\t\t[],\n\t\t\t[new Token(0, 'source.test', 'test')]\n\t\t]);\n\n\t\tdisposables.dispose();\n\t});\n\n\ttest('microsoft/monaco-editor#2265: Exit a state at end of line', () => {\n\t\tconst disposables = new DisposableStore();\n\t\tconst configurationService = new StandaloneConfigurationService();\n\t\tconst languageService = disposables.add(new LanguageService());\n\t\tconst tokenizer = disposables.add(createMonarchTokenizer(languageService, 'test', {\n\t\t\tincludeLF: true,\n\t\t\ttokenizer: {\n\t\t\t\troot: [\n\t\t\t\t\t[/^\\*/, '', '@inner'],\n\t\t\t\t\t[/\\:\\*/, '', '@inner'],\n\t\t\t\t\t[/[^*:]+/, 'string'],\n\t\t\t\t\t[/[*:]/, 'string']\n\t\t\t\t],\n\t\t\t\tinner: [\n\t\t\t\t\t[/\\n/, '', '@pop'],\n\t\t\t\t\t[/\\d+/, 'number'],\n\t\t\t\t\t[/[^\\d]+/, '']\n\t\t\t\t]\n\t\t\t}\n\t\t}, configurationService));\n\n\t\tconst lines = [\n\t\t\t`PRINT 10 * 20`,\n\t\t\t`*FX200, 3`,\n\t\t\t`PRINT 2*3:*FX200, 3`\n\t\t];\n\n\t\tconst actualTokens = getTokens(tokenizer, lines);\n\n\t\tassert.deepStrictEqual(actualTokens, [\n\t\t\t[\n\t\t\t\tnew Token(0, 'string.test', 'test'),\n\t\t\t],\n\t\t\t[\n\t\t\t\tnew Token(0, '', 'test'),\n\t\t\t\tnew Token(3, 'number.test', 'test'),\n\t\t\t\tnew Token(6, '', 'test'),\n\t\t\t\tnew Token(8, 'number.test', 'test'),\n\t\t\t],\n\t\t\t[\n\t\t\t\tnew Token(0, 'string.test', 'test'),\n\t\t\t\tnew Token(9, '', 'test'),\n\t\t\t\tnew Token(13, 'number.test', 'test'),\n\t\t\t\tnew Token(16, '', 'test'),\n\t\t\t\tnew Token(18, 'number.test', 'test'),\n\t\t\t]\n\t\t]);\n\n\t\tdisposables.dispose();\n\t});\n\n\ttest('issue #115662: monarchCompile function need an extra option which can control replacement', () => {\n\t\tconst disposables = new DisposableStore();\n\t\tconst configurationService = new StandaloneConfigurationService();\n\t\tconst languageService = disposables.add(new LanguageService());\n\n\t\tconst tokenizer1 = disposables.add(createMonarchTokenizer(languageService, 'test', {\n\t\t\tignoreCase: false,\n\t\t\tuselessReplaceKey1: '@uselessReplaceKey2',\n\t\t\tuselessReplaceKey2: '@uselessReplaceKey3',\n\t\t\tuselessReplaceKey3: '@uselessReplaceKey4',\n\t\t\tuselessReplaceKey4: '@uselessReplaceKey5',\n\t\t\tuselessReplaceKey5: '@ham' || '',\n\t\t\ttokenizer: {\n\t\t\t\troot: [\n\t\t\t\t\t{\n\t\t\t\t\t\tregex: /@\\w+/.test('@ham')\n\t\t\t\t\t\t\t? new RegExp(`^${'@uselessReplaceKey1'}$`)\n\t\t\t\t\t\t\t: new RegExp(`^${'@ham'}$`),\n\t\t\t\t\t\taction: { token: 'ham' }\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t}, configurationService));\n\n\t\tconst tokenizer2 = disposables.add(createMonarchTokenizer(languageService, 'test', {\n\t\t\tignoreCase: false,\n\t\t\ttokenizer: {\n\t\t\t\troot: [\n\t\t\t\t\t{\n\t\t\t\t\t\tregex: /@@ham/,\n\t\t\t\t\t\taction: { token: 'ham' }\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t}, configurationService));\n\n\t\tconst lines = [\n\t\t\t`@ham`\n\t\t];\n\n\t\tconst actualTokens1 = getTokens(tokenizer1, lines);\n\t\tassert.deepStrictEqual(actualTokens1, [\n\t\t\t[\n\t\t\t\tnew Token(0, 'ham.test', 'test'),\n\t\t\t]\n\t\t]);\n\n\t\tconst actualTokens2 = getTokens(tokenizer2, lines);\n\t\tassert.deepStrictEqual(actualTokens2, [\n\t\t\t[\n\t\t\t\tnew Token(0, 'ham.test', 'test'),\n\t\t\t]\n\t\t]);\n\n\t\tdisposables.dispose();\n\t});\n\n\ttest('microsoft/monaco-editor#2424: Allow to target @@', () => {\n\t\tconst disposables = new DisposableStore();\n\t\tconst configurationService = new StandaloneConfigurationService();\n\t\tconst languageService = disposables.add(new LanguageService());\n\n\t\tconst tokenizer = disposables.add(createMonarchTokenizer(languageService, 'test', {\n\t\t\tignoreCase: false,\n\t\t\ttokenizer: {\n\t\t\t\troot: [\n\t\t\t\t\t{\n\t\t\t\t\t\tregex: /@@@@/,\n\t\t\t\t\t\taction: { token: 'ham' }\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t}, configurationService));\n\n\t\tconst lines = [\n\t\t\t`@@`\n\t\t];\n\n\t\tconst actualTokens = getTokens(tokenizer, lines);\n\t\tassert.deepStrictEqual(actualTokens, [\n\t\t\t[\n\t\t\t\tnew Token(0, 'ham.test', 'test'),\n\t\t\t]\n\t\t]);\n\n\t\tdisposables.dispose();\n\t});\n\n\ttest('microsoft/monaco-editor#3025: Check maxTokenizationLineLength before tokenizing', async () => {\n\t\tconst disposables = new DisposableStore();\n\n\t\tconst configurationService = new StandaloneConfigurationService();\n\t\tconst languageService = disposables.add(new LanguageService());\n\n\t\t// Set maxTokenizationLineLength to 4 so that \"ham\" works but \"hamham\" would fail\n\t\tawait configurationService.updateValue('editor.maxTokenizationLineLength', 4);\n\n\t\tconst tokenizer = disposables.add(createMonarchTokenizer(languageService, 'test', {\n\t\t\ttokenizer: {\n\t\t\t\troot: [\n\t\t\t\t\t{\n\t\t\t\t\t\tregex: /ham/,\n\t\t\t\t\t\taction: { token: 'ham' }\n\t\t\t\t\t},\n\t\t\t\t],\n\t\t\t},\n\t\t}, configurationService));\n\n\t\tconst lines = [\n\t\t\t'ham', // length 3, should be tokenized\n\t\t\t'hamham' // length 6, should NOT be tokenized\n\t\t];\n\n\t\tconst actualTokens = getTokens(tokenizer, lines);\n\t\tassert.deepStrictEqual(actualTokens, [\n\t\t\t[\n\t\t\t\tnew Token(0, 'ham.test', 'test'),\n\t\t\t], [\n\t\t\t\tnew Token(0, '', 'test')\n\t\t\t]\n\t\t]);\n\n\t\tdisposables.dispose();\n\t});\n\n});\n"]}