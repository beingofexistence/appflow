{"version":3,"sources":["file:///workspace/appflow/src/vs/editor/standalone/browser/standaloneLanguages.ts"],"names":[],"mappings":"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","file":"standaloneLanguages.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Color } from 'vs/base/common/color';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport * as model from 'vs/editor/common/model';\nimport * as languages from 'vs/editor/common/languages';\nimport { LanguageConfiguration } from 'vs/editor/common/languages/languageConfiguration';\nimport { ILanguageConfigurationService } from 'vs/editor/common/languages/languageConfigurationRegistry';\nimport { ModesRegistry } from 'vs/editor/common/languages/modesRegistry';\nimport { ILanguageExtensionPoint, ILanguageService } from 'vs/editor/common/languages/language';\nimport * as standaloneEnums from 'vs/editor/common/standalone/standaloneEnums';\nimport { StandaloneServices } from 'vs/editor/standalone/browser/standaloneServices';\nimport { compile } from 'vs/editor/standalone/common/monarch/monarchCompile';\nimport { MonarchTokenizer } from 'vs/editor/standalone/common/monarch/monarchLexer';\nimport { IMonarchLanguage } from 'vs/editor/standalone/common/monarch/monarchTypes';\nimport { IStandaloneThemeService } from 'vs/editor/standalone/common/standaloneTheme';\nimport { IMarkerData, IMarkerService } from 'vs/platform/markers/common/markers';\nimport { ILanguageFeaturesService } from 'vs/editor/common/services/languageFeatures';\nimport { LanguageSelector } from 'vs/editor/common/languageSelector';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { MetadataConsts } from 'vs/editor/common/encodedTokenAttributes';\n\n/**\n * Register information about a new language.\n */\nexport function register(language: ILanguageExtensionPoint): void {\n\t// Intentionally using the `ModesRegistry` here to avoid\n\t// instantiating services too quickly in the standalone editor.\n\tModesRegistry.registerLanguage(language);\n}\n\n/**\n * Get the information of all the registered languages.\n */\nexport function getLanguages(): ILanguageExtensionPoint[] {\n\tlet result: ILanguageExtensionPoint[] = [];\n\tresult = result.concat(ModesRegistry.getLanguages());\n\treturn result;\n}\n\nexport function getEncodedLanguageId(languageId: string): number {\n\tconst languageService = StandaloneServices.get(ILanguageService);\n\treturn languageService.languageIdCodec.encodeLanguageId(languageId);\n}\n\n/**\n * An event emitted when a language is associated for the first time with a text model.\n * @event\n */\nexport function onLanguage(languageId: string, callback: () => void): IDisposable {\n\treturn StandaloneServices.withServices(() => {\n\t\tconst languageService = StandaloneServices.get(ILanguageService);\n\t\tconst disposable = languageService.onDidRequestRichLanguageFeatures((encounteredLanguageId) => {\n\t\t\tif (encounteredLanguageId === languageId) {\n\t\t\t\t// stop listening\n\t\t\t\tdisposable.dispose();\n\t\t\t\t// invoke actual listener\n\t\t\t\tcallback();\n\t\t\t}\n\t\t});\n\t\treturn disposable;\n\t});\n}\n\n/**\n * An event emitted when a language is associated for the first time with a text model or\n * when a language is encountered during the tokenization of another language.\n * @event\n */\nexport function onLanguageEncountered(languageId: string, callback: () => void): IDisposable {\n\treturn StandaloneServices.withServices(() => {\n\t\tconst languageService = StandaloneServices.get(ILanguageService);\n\t\tconst disposable = languageService.onDidRequestBasicLanguageFeatures((encounteredLanguageId) => {\n\t\t\tif (encounteredLanguageId === languageId) {\n\t\t\t\t// stop listening\n\t\t\t\tdisposable.dispose();\n\t\t\t\t// invoke actual listener\n\t\t\t\tcallback();\n\t\t\t}\n\t\t});\n\t\treturn disposable;\n\t});\n}\n\n/**\n * Set the editing configuration for a language.\n */\nexport function setLanguageConfiguration(languageId: string, configuration: LanguageConfiguration): IDisposable {\n\tconst languageService = StandaloneServices.get(ILanguageService);\n\tif (!languageService.isRegisteredLanguageId(languageId)) {\n\t\tthrow new Error(`Cannot set configuration for unknown language ${languageId}`);\n\t}\n\tconst languageConfigurationService = StandaloneServices.get(ILanguageConfigurationService);\n\treturn languageConfigurationService.register(languageId, configuration, 100);\n}\n\n/**\n * @internal\n */\nexport class EncodedTokenizationSupportAdapter implements languages.ITokenizationSupport, IDisposable {\n\n\tprivate readonly _languageId: string;\n\tprivate readonly _actual: EncodedTokensProvider;\n\n\tconstructor(languageId: string, actual: EncodedTokensProvider) {\n\t\tthis._languageId = languageId;\n\t\tthis._actual = actual;\n\t}\n\n\tdispose(): void {\n\t\t// NOOP\n\t}\n\n\tpublic getInitialState(): languages.IState {\n\t\treturn this._actual.getInitialState();\n\t}\n\n\tpublic tokenize(line: string, hasEOL: boolean, state: languages.IState): languages.TokenizationResult {\n\t\tif (typeof this._actual.tokenize === 'function') {\n\t\t\treturn TokenizationSupportAdapter.adaptTokenize(this._languageId, <{ tokenize(line: string, state: languages.IState): ILineTokens }>this._actual, line, state);\n\t\t}\n\t\tthrow new Error('Not supported!');\n\t}\n\n\tpublic tokenizeEncoded(line: string, hasEOL: boolean, state: languages.IState): languages.EncodedTokenizationResult {\n\t\tconst result = this._actual.tokenizeEncoded(line, state);\n\t\treturn new languages.EncodedTokenizationResult(result.tokens, result.endState);\n\t}\n}\n\n/**\n * @internal\n */\nexport class TokenizationSupportAdapter implements languages.ITokenizationSupport, IDisposable {\n\n\tconstructor(\n\t\tprivate readonly _languageId: string,\n\t\tprivate readonly _actual: TokensProvider,\n\t\tprivate readonly _languageService: ILanguageService,\n\t\tprivate readonly _standaloneThemeService: IStandaloneThemeService,\n\t) {\n\t}\n\n\tdispose(): void {\n\t\t// NOOP\n\t}\n\n\tpublic getInitialState(): languages.IState {\n\t\treturn this._actual.getInitialState();\n\t}\n\n\tprivate static _toClassicTokens(tokens: IToken[], language: string): languages.Token[] {\n\t\tconst result: languages.Token[] = [];\n\t\tlet previousStartIndex: number = 0;\n\t\tfor (let i = 0, len = tokens.length; i < len; i++) {\n\t\t\tconst t = tokens[i];\n\t\t\tlet startIndex = t.startIndex;\n\n\t\t\t// Prevent issues stemming from a buggy external tokenizer.\n\t\t\tif (i === 0) {\n\t\t\t\t// Force first token to start at first index!\n\t\t\t\tstartIndex = 0;\n\t\t\t} else if (startIndex < previousStartIndex) {\n\t\t\t\t// Force tokens to be after one another!\n\t\t\t\tstartIndex = previousStartIndex;\n\t\t\t}\n\n\t\t\tresult[i] = new languages.Token(startIndex, t.scopes, language);\n\n\t\t\tpreviousStartIndex = startIndex;\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic static adaptTokenize(language: string, actual: { tokenize(line: string, state: languages.IState): ILineTokens }, line: string, state: languages.IState): languages.TokenizationResult {\n\t\tconst actualResult = actual.tokenize(line, state);\n\t\tconst tokens = TokenizationSupportAdapter._toClassicTokens(actualResult.tokens, language);\n\n\t\tlet endState: languages.IState;\n\t\t// try to save an object if possible\n\t\tif (actualResult.endState.equals(state)) {\n\t\t\tendState = state;\n\t\t} else {\n\t\t\tendState = actualResult.endState;\n\t\t}\n\n\t\treturn new languages.TokenizationResult(tokens, endState);\n\t}\n\n\tpublic tokenize(line: string, hasEOL: boolean, state: languages.IState): languages.TokenizationResult {\n\t\treturn TokenizationSupportAdapter.adaptTokenize(this._languageId, this._actual, line, state);\n\t}\n\n\tprivate _toBinaryTokens(languageIdCodec: languages.ILanguageIdCodec, tokens: IToken[]): Uint32Array {\n\t\tconst languageId = languageIdCodec.encodeLanguageId(this._languageId);\n\t\tconst tokenTheme = this._standaloneThemeService.getColorTheme().tokenTheme;\n\n\t\tconst result: number[] = [];\n\t\tlet resultLen = 0;\n\t\tlet previousStartIndex: number = 0;\n\t\tfor (let i = 0, len = tokens.length; i < len; i++) {\n\t\t\tconst t = tokens[i];\n\t\t\tconst metadata = tokenTheme.match(languageId, t.scopes) | MetadataConsts.BALANCED_BRACKETS_MASK;\n\t\t\tif (resultLen > 0 && result[resultLen - 1] === metadata) {\n\t\t\t\t// same metadata\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet startIndex = t.startIndex;\n\n\t\t\t// Prevent issues stemming from a buggy external tokenizer.\n\t\t\tif (i === 0) {\n\t\t\t\t// Force first token to start at first index!\n\t\t\t\tstartIndex = 0;\n\t\t\t} else if (startIndex < previousStartIndex) {\n\t\t\t\t// Force tokens to be after one another!\n\t\t\t\tstartIndex = previousStartIndex;\n\t\t\t}\n\n\t\t\tresult[resultLen++] = startIndex;\n\t\t\tresult[resultLen++] = metadata;\n\n\t\t\tpreviousStartIndex = startIndex;\n\t\t}\n\n\t\tconst actualResult = new Uint32Array(resultLen);\n\t\tfor (let i = 0; i < resultLen; i++) {\n\t\t\tactualResult[i] = result[i];\n\t\t}\n\t\treturn actualResult;\n\t}\n\n\tpublic tokenizeEncoded(line: string, hasEOL: boolean, state: languages.IState): languages.EncodedTokenizationResult {\n\t\tconst actualResult = this._actual.tokenize(line, state);\n\t\tconst tokens = this._toBinaryTokens(this._languageService.languageIdCodec, actualResult.tokens);\n\n\t\tlet endState: languages.IState;\n\t\t// try to save an object if possible\n\t\tif (actualResult.endState.equals(state)) {\n\t\t\tendState = state;\n\t\t} else {\n\t\t\tendState = actualResult.endState;\n\t\t}\n\n\t\treturn new languages.EncodedTokenizationResult(tokens, endState);\n\t}\n}\n\n/**\n * A token.\n */\nexport interface IToken {\n\tstartIndex: number;\n\tscopes: string;\n}\n\n/**\n * The result of a line tokenization.\n */\nexport interface ILineTokens {\n\t/**\n\t * The list of tokens on the line.\n\t */\n\ttokens: IToken[];\n\t/**\n\t * The tokenization end state.\n\t * A pointer will be held to this and the object should not be modified by the tokenizer after the pointer is returned.\n\t */\n\tendState: languages.IState;\n}\n\n/**\n * The result of a line tokenization.\n */\nexport interface IEncodedLineTokens {\n\t/**\n\t * The tokens on the line in a binary, encoded format. Each token occupies two array indices. For token i:\n\t *  - at offset 2*i => startIndex\n\t *  - at offset 2*i + 1 => metadata\n\t * Meta data is in binary format:\n\t * - -------------------------------------------\n\t *     3322 2222 2222 1111 1111 1100 0000 0000\n\t *     1098 7654 3210 9876 5432 1098 7654 3210\n\t * - -------------------------------------------\n\t *     bbbb bbbb bfff ffff ffFF FFTT LLLL LLLL\n\t * - -------------------------------------------\n\t *  - L = EncodedLanguageId (8 bits): Use `getEncodedLanguageId` to get the encoded ID of a language.\n\t *  - T = StandardTokenType (2 bits): Other = 0, Comment = 1, String = 2, RegEx = 3.\n\t *  - F = FontStyle (4 bits): None = 0, Italic = 1, Bold = 2, Underline = 4, Strikethrough = 8.\n\t *  - f = foreground ColorId (9 bits)\n\t *  - b = background ColorId (9 bits)\n\t *  - The color value for each colorId is defined in IStandaloneThemeData.customTokenColors:\n\t * e.g. colorId = 1 is stored in IStandaloneThemeData.customTokenColors[1]. Color id = 0 means no color,\n\t * id = 1 is for the default foreground color, id = 2 for the default background.\n\t */\n\ttokens: Uint32Array;\n\t/**\n\t * The tokenization end state.\n\t * A pointer will be held to this and the object should not be modified by the tokenizer after the pointer is returned.\n\t */\n\tendState: languages.IState;\n}\n\n/**\n * A factory for token providers.\n */\nexport interface TokensProviderFactory {\n\tcreate(): languages.ProviderResult<TokensProvider | EncodedTokensProvider | IMonarchLanguage>;\n}\n\n/**\n * A \"manual\" provider of tokens.\n */\nexport interface TokensProvider {\n\t/**\n\t * The initial state of a language. Will be the state passed in to tokenize the first line.\n\t */\n\tgetInitialState(): languages.IState;\n\t/**\n\t * Tokenize a line given the state at the beginning of the line.\n\t */\n\ttokenize(line: string, state: languages.IState): ILineTokens;\n}\n\n/**\n * A \"manual\" provider of tokens, returning tokens in a binary form.\n */\nexport interface EncodedTokensProvider {\n\t/**\n\t * The initial state of a language. Will be the state passed in to tokenize the first line.\n\t */\n\tgetInitialState(): languages.IState;\n\t/**\n\t * Tokenize a line given the state at the beginning of the line.\n\t */\n\ttokenizeEncoded(line: string, state: languages.IState): IEncodedLineTokens;\n\t/**\n\t * Tokenize a line given the state at the beginning of the line.\n\t */\n\ttokenize?(line: string, state: languages.IState): ILineTokens;\n}\n\nfunction isATokensProvider(provider: TokensProvider | EncodedTokensProvider | IMonarchLanguage): provider is TokensProvider | EncodedTokensProvider {\n\treturn (typeof provider.getInitialState === 'function');\n}\n\nfunction isEncodedTokensProvider(provider: TokensProvider | EncodedTokensProvider): provider is EncodedTokensProvider {\n\treturn 'tokenizeEncoded' in provider;\n}\n\nfunction isThenable<T>(obj: any): obj is Thenable<T> {\n\treturn obj && typeof obj.then === 'function';\n}\n\n/**\n * Change the color map that is used for token colors.\n * Supported formats (hex): #RRGGBB, $RRGGBBAA, #RGB, #RGBA\n */\nexport function setColorMap(colorMap: string[] | null): void {\n\tconst standaloneThemeService = StandaloneServices.get(IStandaloneThemeService);\n\tif (colorMap) {\n\t\tconst result: Color[] = [null!];\n\t\tfor (let i = 1, len = colorMap.length; i < len; i++) {\n\t\t\tresult[i] = Color.fromHex(colorMap[i]);\n\t\t}\n\t\tstandaloneThemeService.setColorMapOverride(result);\n\t} else {\n\t\tstandaloneThemeService.setColorMapOverride(null);\n\t}\n}\n\n/**\n * @internal\n */\nfunction createTokenizationSupportAdapter(languageId: string, provider: TokensProvider | EncodedTokensProvider) {\n\tif (isEncodedTokensProvider(provider)) {\n\t\treturn new EncodedTokenizationSupportAdapter(languageId, provider);\n\t} else {\n\t\treturn new TokenizationSupportAdapter(\n\t\t\tlanguageId,\n\t\t\tprovider,\n\t\t\tStandaloneServices.get(ILanguageService),\n\t\t\tStandaloneServices.get(IStandaloneThemeService),\n\t\t);\n\t}\n}\n\n/**\n * Register a tokens provider factory for a language. This tokenizer will be exclusive with a tokenizer\n * set using `setTokensProvider` or one created using `setMonarchTokensProvider`, but will work together\n * with a tokens provider set using `registerDocumentSemanticTokensProvider` or `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function registerTokensProviderFactory(languageId: string, factory: TokensProviderFactory): IDisposable {\n\tconst adaptedFactory = new languages.LazyTokenizationSupport(async () => {\n\t\tconst result = await Promise.resolve(factory.create());\n\t\tif (!result) {\n\t\t\treturn null;\n\t\t}\n\t\tif (isATokensProvider(result)) {\n\t\t\treturn createTokenizationSupportAdapter(languageId, result);\n\t\t}\n\t\treturn new MonarchTokenizer(StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService), languageId, compile(languageId, result), StandaloneServices.get(IConfigurationService));\n\t});\n\treturn languages.TokenizationRegistry.registerFactory(languageId, adaptedFactory);\n}\n\n/**\n * Set the tokens provider for a language (manual implementation). This tokenizer will be exclusive\n * with a tokenizer created using `setMonarchTokensProvider`, or with `registerTokensProviderFactory`,\n * but will work together with a tokens provider set using `registerDocumentSemanticTokensProvider`\n * or `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function setTokensProvider(languageId: string, provider: TokensProvider | EncodedTokensProvider | Thenable<TokensProvider | EncodedTokensProvider>): IDisposable {\n\tconst languageService = StandaloneServices.get(ILanguageService);\n\tif (!languageService.isRegisteredLanguageId(languageId)) {\n\t\tthrow new Error(`Cannot set tokens provider for unknown language ${languageId}`);\n\t}\n\tif (isThenable<TokensProvider | EncodedTokensProvider>(provider)) {\n\t\treturn registerTokensProviderFactory(languageId, { create: () => provider });\n\t}\n\treturn languages.TokenizationRegistry.register(languageId, createTokenizationSupportAdapter(languageId, provider));\n}\n\n/**\n * Set the tokens provider for a language (monarch implementation). This tokenizer will be exclusive\n * with a tokenizer set using `setTokensProvider`, or with `registerTokensProviderFactory`, but will\n * work together with a tokens provider set using `registerDocumentSemanticTokensProvider` or\n * `registerDocumentRangeSemanticTokensProvider`.\n */\nexport function setMonarchTokensProvider(languageId: string, languageDef: IMonarchLanguage | Thenable<IMonarchLanguage>): IDisposable {\n\tconst create = (languageDef: IMonarchLanguage) => {\n\t\treturn new MonarchTokenizer(StandaloneServices.get(ILanguageService), StandaloneServices.get(IStandaloneThemeService), languageId, compile(languageId, languageDef), StandaloneServices.get(IConfigurationService));\n\t};\n\tif (isThenable<IMonarchLanguage>(languageDef)) {\n\t\treturn registerTokensProviderFactory(languageId, { create: () => languageDef });\n\t}\n\treturn languages.TokenizationRegistry.register(languageId, create(languageDef));\n}\n\n/**\n * Register a reference provider (used by e.g. reference search).\n */\nexport function registerReferenceProvider(languageSelector: LanguageSelector, provider: languages.ReferenceProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.referenceProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a rename provider (used by e.g. rename symbol).\n */\nexport function registerRenameProvider(languageSelector: LanguageSelector, provider: languages.RenameProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.renameProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a signature help provider (used by e.g. parameter hints).\n */\nexport function registerSignatureHelpProvider(languageSelector: LanguageSelector, provider: languages.SignatureHelpProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.signatureHelpProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a hover provider (used by e.g. editor hover).\n */\nexport function registerHoverProvider(languageSelector: LanguageSelector, provider: languages.HoverProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.hoverProvider.register(languageSelector, {\n\t\tprovideHover: (model: model.ITextModel, position: Position, token: CancellationToken): Promise<languages.Hover | undefined> => {\n\t\t\tconst word = model.getWordAtPosition(position);\n\n\t\t\treturn Promise.resolve<languages.Hover | null | undefined>(provider.provideHover(model, position, token)).then((value): languages.Hover | undefined => {\n\t\t\t\tif (!value) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tif (!value.range && word) {\n\t\t\t\t\tvalue.range = new Range(position.lineNumber, word.startColumn, position.lineNumber, word.endColumn);\n\t\t\t\t}\n\t\t\t\tif (!value.range) {\n\t\t\t\t\tvalue.range = new Range(position.lineNumber, position.column, position.lineNumber, position.column);\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t});\n\t\t}\n\t});\n}\n\n/**\n * Register a document symbol provider (used by e.g. outline).\n */\nexport function registerDocumentSymbolProvider(languageSelector: LanguageSelector, provider: languages.DocumentSymbolProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.documentSymbolProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a document highlight provider (used by e.g. highlight occurrences).\n */\nexport function registerDocumentHighlightProvider(languageSelector: LanguageSelector, provider: languages.DocumentHighlightProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.documentHighlightProvider.register(languageSelector, provider);\n}\n\n/**\n * Register an linked editing range provider.\n */\nexport function registerLinkedEditingRangeProvider(languageSelector: LanguageSelector, provider: languages.LinkedEditingRangeProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.linkedEditingRangeProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a definition provider (used by e.g. go to definition).\n */\nexport function registerDefinitionProvider(languageSelector: LanguageSelector, provider: languages.DefinitionProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.definitionProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a implementation provider (used by e.g. go to implementation).\n */\nexport function registerImplementationProvider(languageSelector: LanguageSelector, provider: languages.ImplementationProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.implementationProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a type definition provider (used by e.g. go to type definition).\n */\nexport function registerTypeDefinitionProvider(languageSelector: LanguageSelector, provider: languages.TypeDefinitionProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.typeDefinitionProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a code lens provider (used by e.g. inline code lenses).\n */\nexport function registerCodeLensProvider(languageSelector: LanguageSelector, provider: languages.CodeLensProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.codeLensProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a code action provider (used by e.g. quick fix).\n */\nexport function registerCodeActionProvider(languageSelector: LanguageSelector, provider: CodeActionProvider, metadata?: CodeActionProviderMetadata): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.codeActionProvider.register(languageSelector, {\n\t\tprovidedCodeActionKinds: metadata?.providedCodeActionKinds,\n\t\tdocumentation: metadata?.documentation,\n\t\tprovideCodeActions: (model: model.ITextModel, range: Range, context: languages.CodeActionContext, token: CancellationToken): languages.ProviderResult<languages.CodeActionList> => {\n\t\t\tconst markerService = StandaloneServices.get(IMarkerService);\n\t\t\tconst markers = markerService.read({ resource: model.uri }).filter(m => {\n\t\t\t\treturn Range.areIntersectingOrTouching(m, range);\n\t\t\t});\n\t\t\treturn provider.provideCodeActions(model, range, { markers, only: context.only, trigger: context.trigger }, token);\n\t\t},\n\t\tresolveCodeAction: provider.resolveCodeAction\n\t});\n}\n\n/**\n * Register a formatter that can handle only entire models.\n */\nexport function registerDocumentFormattingEditProvider(languageSelector: LanguageSelector, provider: languages.DocumentFormattingEditProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.documentFormattingEditProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a formatter that can handle a range inside a model.\n */\nexport function registerDocumentRangeFormattingEditProvider(languageSelector: LanguageSelector, provider: languages.DocumentRangeFormattingEditProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.documentRangeFormattingEditProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a formatter than can do formatting as the user types.\n */\nexport function registerOnTypeFormattingEditProvider(languageSelector: LanguageSelector, provider: languages.OnTypeFormattingEditProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.onTypeFormattingEditProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a link provider that can find links in text.\n */\nexport function registerLinkProvider(languageSelector: LanguageSelector, provider: languages.LinkProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.linkProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a completion item provider (use by e.g. suggestions).\n */\nexport function registerCompletionItemProvider(languageSelector: LanguageSelector, provider: languages.CompletionItemProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.completionProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a document color provider (used by Color Picker, Color Decorator).\n */\nexport function registerColorProvider(languageSelector: LanguageSelector, provider: languages.DocumentColorProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.colorProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a folding range provider\n */\nexport function registerFoldingRangeProvider(languageSelector: LanguageSelector, provider: languages.FoldingRangeProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.foldingRangeProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a declaration provider\n */\nexport function registerDeclarationProvider(languageSelector: LanguageSelector, provider: languages.DeclarationProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.declarationProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a selection range provider\n */\nexport function registerSelectionRangeProvider(languageSelector: LanguageSelector, provider: languages.SelectionRangeProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.selectionRangeProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a document semantic tokens provider. A semantic tokens provider will complement and enhance a\n * simple top-down tokenizer. Simple top-down tokenizers can be set either via `setMonarchTokensProvider`\n * or `setTokensProvider`.\n *\n * For the best user experience, register both a semantic tokens provider and a top-down tokenizer.\n */\nexport function registerDocumentSemanticTokensProvider(languageSelector: LanguageSelector, provider: languages.DocumentSemanticTokensProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.documentSemanticTokensProvider.register(languageSelector, provider);\n}\n\n/**\n * Register a document range semantic tokens provider. A semantic tokens provider will complement and enhance a\n * simple top-down tokenizer. Simple top-down tokenizers can be set either via `setMonarchTokensProvider`\n * or `setTokensProvider`.\n *\n * For the best user experience, register both a semantic tokens provider and a top-down tokenizer.\n */\nexport function registerDocumentRangeSemanticTokensProvider(languageSelector: LanguageSelector, provider: languages.DocumentRangeSemanticTokensProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.documentRangeSemanticTokensProvider.register(languageSelector, provider);\n}\n\n/**\n * Register an inline completions provider.\n */\nexport function registerInlineCompletionsProvider(languageSelector: LanguageSelector, provider: languages.InlineCompletionsProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.inlineCompletionsProvider.register(languageSelector, provider);\n}\n\n/**\n * Register an inlay hints provider.\n */\nexport function registerInlayHintsProvider(languageSelector: LanguageSelector, provider: languages.InlayHintsProvider): IDisposable {\n\tconst languageFeaturesService = StandaloneServices.get(ILanguageFeaturesService);\n\treturn languageFeaturesService.inlayHintsProvider.register(languageSelector, provider);\n}\n\n/**\n * Contains additional diagnostic information about the context in which\n * a [code action](#CodeActionProvider.provideCodeActions) is run.\n */\nexport interface CodeActionContext {\n\n\t/**\n\t * An array of diagnostics.\n\t */\n\treadonly markers: IMarkerData[];\n\n\t/**\n\t * Requested kind of actions to return.\n\t */\n\treadonly only?: string;\n\n\t/**\n\t * The reason why code actions were requested.\n\t */\n\treadonly trigger: languages.CodeActionTriggerType;\n}\n\n/**\n * The code action interface defines the contract between extensions and\n * the [light bulb](https://code.visualstudio.com/docs/editor/editingevolved#_code-action) feature.\n */\nexport interface CodeActionProvider {\n\t/**\n\t * Provide commands for the given document and range.\n\t */\n\tprovideCodeActions(model: model.ITextModel, range: Range, context: CodeActionContext, token: CancellationToken): languages.ProviderResult<languages.CodeActionList>;\n\n\t/**\n\t * Given a code action fill in the edit. Will only invoked when missing.\n\t */\n\tresolveCodeAction?(codeAction: languages.CodeAction, token: CancellationToken): languages.ProviderResult<languages.CodeAction>;\n}\n\n\n\n/**\n * Metadata about the type of code actions that a {@link CodeActionProvider} provides.\n */\nexport interface CodeActionProviderMetadata {\n\t/**\n\t * List of code action kinds that a {@link CodeActionProvider} may return.\n\t *\n\t * This list is used to determine if a given `CodeActionProvider` should be invoked or not.\n\t * To avoid unnecessary computation, every `CodeActionProvider` should list use `providedCodeActionKinds`. The\n\t * list of kinds may either be generic, such as `[\"quickfix\", \"refactor\", \"source\"]`, or list out every kind provided,\n\t * such as `[\"quickfix.removeLine\", \"source.fixAll\" ...]`.\n\t */\n\treadonly providedCodeActionKinds?: readonly string[];\n\n\treadonly documentation?: ReadonlyArray<{ readonly kind: string; readonly command: languages.Command }>;\n}\n\n/**\n * @internal\n */\nexport function createMonacoLanguagesAPI(): typeof monaco.languages {\n\treturn {\n\t\tregister: <any>register,\n\t\tgetLanguages: <any>getLanguages,\n\t\tonLanguage: <any>onLanguage,\n\t\tonLanguageEncountered: <any>onLanguageEncountered,\n\t\tgetEncodedLanguageId: <any>getEncodedLanguageId,\n\n\t\t// provider methods\n\t\tsetLanguageConfiguration: <any>setLanguageConfiguration,\n\t\tsetColorMap: setColorMap,\n\t\tregisterTokensProviderFactory: <any>registerTokensProviderFactory,\n\t\tsetTokensProvider: <any>setTokensProvider,\n\t\tsetMonarchTokensProvider: <any>setMonarchTokensProvider,\n\t\tregisterReferenceProvider: <any>registerReferenceProvider,\n\t\tregisterRenameProvider: <any>registerRenameProvider,\n\t\tregisterCompletionItemProvider: <any>registerCompletionItemProvider,\n\t\tregisterSignatureHelpProvider: <any>registerSignatureHelpProvider,\n\t\tregisterHoverProvider: <any>registerHoverProvider,\n\t\tregisterDocumentSymbolProvider: <any>registerDocumentSymbolProvider,\n\t\tregisterDocumentHighlightProvider: <any>registerDocumentHighlightProvider,\n\t\tregisterLinkedEditingRangeProvider: <any>registerLinkedEditingRangeProvider,\n\t\tregisterDefinitionProvider: <any>registerDefinitionProvider,\n\t\tregisterImplementationProvider: <any>registerImplementationProvider,\n\t\tregisterTypeDefinitionProvider: <any>registerTypeDefinitionProvider,\n\t\tregisterCodeLensProvider: <any>registerCodeLensProvider,\n\t\tregisterCodeActionProvider: <any>registerCodeActionProvider,\n\t\tregisterDocumentFormattingEditProvider: <any>registerDocumentFormattingEditProvider,\n\t\tregisterDocumentRangeFormattingEditProvider: <any>registerDocumentRangeFormattingEditProvider,\n\t\tregisterOnTypeFormattingEditProvider: <any>registerOnTypeFormattingEditProvider,\n\t\tregisterLinkProvider: <any>registerLinkProvider,\n\t\tregisterColorProvider: <any>registerColorProvider,\n\t\tregisterFoldingRangeProvider: <any>registerFoldingRangeProvider,\n\t\tregisterDeclarationProvider: <any>registerDeclarationProvider,\n\t\tregisterSelectionRangeProvider: <any>registerSelectionRangeProvider,\n\t\tregisterDocumentSemanticTokensProvider: <any>registerDocumentSemanticTokensProvider,\n\t\tregisterDocumentRangeSemanticTokensProvider: <any>registerDocumentRangeSemanticTokensProvider,\n\t\tregisterInlineCompletionsProvider: <any>registerInlineCompletionsProvider,\n\t\tregisterInlayHintsProvider: <any>registerInlayHintsProvider,\n\n\t\t// enums\n\t\tDocumentHighlightKind: standaloneEnums.DocumentHighlightKind,\n\t\tCompletionItemKind: standaloneEnums.CompletionItemKind,\n\t\tCompletionItemTag: standaloneEnums.CompletionItemTag,\n\t\tCompletionItemInsertTextRule: standaloneEnums.CompletionItemInsertTextRule,\n\t\tSymbolKind: standaloneEnums.SymbolKind,\n\t\tSymbolTag: standaloneEnums.SymbolTag,\n\t\tIndentAction: standaloneEnums.IndentAction,\n\t\tCompletionTriggerKind: standaloneEnums.CompletionTriggerKind,\n\t\tSignatureHelpTriggerKind: standaloneEnums.SignatureHelpTriggerKind,\n\t\tInlayHintKind: standaloneEnums.InlayHintKind,\n\t\tInlineCompletionTriggerKind: standaloneEnums.InlineCompletionTriggerKind,\n\t\tCodeActionTriggerType: standaloneEnums.CodeActionTriggerType,\n\n\t\t// classes\n\t\tFoldingRangeKind: languages.FoldingRangeKind,\n\t\tSelectedSuggestionInfo: <any>languages.SelectedSuggestionInfo,\n\t};\n}\n"]}