{"version":3,"sources":["vs/workbench/browser/quickaccess.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQnF,QAAA,IAAI,GAAyB,aAAa,CAAC;IAC3C,QAAA,IAAI,GAAoB,IAAI,gBAAG,CAAoB,YAAI,EAAwB,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAa,EAAE,IAAyD,CAAC,CAAC,CAAC;IAC1K,QAAA,IAAI,GAAiB,gBAAG,CAAY,GAAG,CAAC,YAAI,CAAuB,CAAC;IAEpE,QAAA,IAAI,GAAgC,eAAe,CAAC;IACpD,QAAA,IAAI,GAAwB,gBAAG,CAAY,GAAG,CAAC,YAAI,EAAgB,gBAAG,CAAY,GAAG,CAAC,YAAI,CAA8B,CAAC,CAAC;IAoBvI,SAAgB,IAAI,CAAoB,EAAU,EAAE,IAAc;QACjE,OAAO,QAAQ,CAAC,EAAE;YACjB,MAAM,iBAAiB,GAAG,QAAQ,CAAC,GAAG,CAAC,gBAAG,CAAgB,CAAC;YAC3D,MAAM,iBAAiB,GAAG,QAAQ,CAAC,GAAG,CAAC,gBAAG,CAAgB,CAAC;YAE3D,MAAM,IAAI,GAAG,iBAAiB,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC;YACrD,MAAM,aAAa,GAAG,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;YAE5C,iBAAiB,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;QACnD,CAAC,CAAC;IACH,CAAC;IAVD,oBAUC","file":"quickaccess.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { ContextKeyExpr, RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { ICommandHandler } from 'vs/platform/commands/common/commands';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\n\nexport const inQuickPickContextKeyValue = 'inQuickOpen';\nexport const InQuickPickContextKey = new RawContextKey<boolean>(inQuickPickContextKeyValue, false, localize('inQuickOpen', \"Whether keyboard focus is inside the quick open control\"));\nexport const inQuickPickContext = ContextKeyExpr.has(inQuickPickContextKeyValue);\n\nexport const defaultQuickAccessContextKeyValue = 'inFilesPicker';\nexport const defaultQuickAccessContext = ContextKeyExpr.and(inQuickPickContext, ContextKeyExpr.has(defaultQuickAccessContextKeyValue));\n\nexport interface IWorkbenchQuickAccessConfiguration {\n\treadonly workbench: {\n\t\treadonly commandPalette: {\n\t\t\treadonly history: number;\n\t\t\treadonly preserveInput: boolean;\n\t\t\treadonly experimental: {\n\t\t\t\treadonly suggestCommands: boolean;\n\t\t\t\treadonly enableNaturalLanguageSearch: boolean;\n\t\t\t\treadonly askChatLocation: 'quickChat' | 'chatView';\n\t\t\t};\n\t\t};\n\t\treadonly quickOpen: {\n\t\t\treadonly enableExperimentalNewVersion: boolean;\n\t\t\treadonly preserveInput: boolean;\n\t\t};\n\t};\n}\n\nexport function getQuickNavigateHandler(id: string, next?: boolean): ICommandHandler {\n\treturn accessor => {\n\t\tconst keybindingService = accessor.get(IKeybindingService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\n\t\tconst keys = keybindingService.lookupKeybindings(id);\n\t\tconst quickNavigate = { keybindings: keys };\n\n\t\tquickInputService.navigate(!!next, quickNavigate);\n\t};\n}\n"]}