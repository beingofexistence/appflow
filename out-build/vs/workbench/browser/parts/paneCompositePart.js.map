{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/browser/parts/paneCompositePart.ts"],"names":[],"mappings":"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","file":"paneCompositePart.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { assertIsDefined } from 'vs/base/common/types';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IProgressIndicator } from 'vs/platform/progress/common/progress';\nimport { PaneCompositeDescriptor } from 'vs/workbench/browser/panecomposite';\nimport { ActivitybarPart } from 'vs/workbench/browser/parts/activitybar/activitybarPart';\nimport { AuxiliaryBarPart } from 'vs/workbench/browser/parts/auxiliarybar/auxiliaryBarPart';\nimport { PanelPart } from 'vs/workbench/browser/parts/panel/panelPart';\nimport { SidebarPart } from 'vs/workbench/browser/parts/sidebar/sidebarPart';\nimport { IPaneComposite } from 'vs/workbench/common/panecomposite';\nimport { ViewContainerLocation, ViewContainerLocations } from 'vs/workbench/common/views';\nimport { IBadge } from 'vs/workbench/services/activity/common/activity';\nimport { IPaneCompositePartService } from 'vs/workbench/services/panecomposite/browser/panecomposite';\nimport { Disposable, DisposableStore, IDisposable } from 'vs/base/common/lifecycle';\nimport { IView } from 'vs/base/browser/ui/grid/grid';\n\nexport interface IPaneCompositePart extends IView {\n\n\treadonly onDidPaneCompositeOpen: Event<IPaneComposite>;\n\treadonly onDidPaneCompositeClose: Event<IPaneComposite>;\n\n\t/**\n\t * Opens a viewlet with the given identifier and pass keyboard focus to it if specified.\n\t */\n\topenPaneComposite(id: string | undefined, focus?: boolean): Promise<IPaneComposite | undefined>;\n\n\t/**\n\t * Returns the current active viewlet if any.\n\t */\n\tgetActivePaneComposite(): IPaneComposite | undefined;\n\n\t/**\n\t * Returns the viewlet by id.\n\t */\n\tgetPaneComposite(id: string): PaneCompositeDescriptor | undefined;\n\n\t/**\n\t * Returns all enabled viewlets\n\t */\n\tgetPaneComposites(): PaneCompositeDescriptor[];\n\n\t/**\n\t * Returns the progress indicator for the side bar.\n\t */\n\tgetProgressIndicator(id: string): IProgressIndicator | undefined;\n\n\t/**\n\t * Hide the active viewlet.\n\t */\n\thideActivePaneComposite(): void;\n\n\t/**\n\t * Return the last active viewlet id.\n\t */\n\tgetLastActivePaneCompositeId(): string;\n}\n\nexport interface IPaneCompositeSelectorPart {\n\n\t/**\n\t * Returns id of pinned view containers following the visual order.\n\t */\n\tgetPinnedPaneCompositeIds(): string[];\n\n\t/**\n\t * Returns id of visible view containers following the visual order.\n\t */\n\tgetVisiblePaneCompositeIds(): string[];\n\n\t/**\n\t * Show an activity in a viewlet.\n\t */\n\tshowActivity(id: string, badge: IBadge, clazz?: string, priority?: number): IDisposable;\n}\n\nexport class PaneCompositeParts extends Disposable implements IPaneCompositePartService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\treadonly onDidPaneCompositeOpen: Event<{ composite: IPaneComposite; viewContainerLocation: ViewContainerLocation }>;\n\treadonly onDidPaneCompositeClose: Event<{ composite: IPaneComposite; viewContainerLocation: ViewContainerLocation }>;\n\n\tprivate readonly paneCompositeParts = new Map<ViewContainerLocation, IPaneCompositePart>();\n\tprivate readonly paneCompositeSelectorParts = new Map<ViewContainerLocation, IPaneCompositeSelectorPart>();\n\n\tconstructor(@IInstantiationService instantiationService: IInstantiationService) {\n\t\tsuper();\n\n\t\tconst panelPart = instantiationService.createInstance(PanelPart);\n\t\tconst sideBarPart = instantiationService.createInstance(SidebarPart);\n\t\tconst auxiliaryBarPart = instantiationService.createInstance(AuxiliaryBarPart);\n\t\tconst activityBarPart = instantiationService.createInstance(ActivitybarPart, sideBarPart);\n\n\t\tthis.paneCompositeParts.set(ViewContainerLocation.Panel, panelPart);\n\t\tthis.paneCompositeParts.set(ViewContainerLocation.Sidebar, sideBarPart);\n\t\tthis.paneCompositeParts.set(ViewContainerLocation.AuxiliaryBar, auxiliaryBarPart);\n\n\t\tthis.paneCompositeSelectorParts.set(ViewContainerLocation.Panel, panelPart);\n\t\tthis.paneCompositeSelectorParts.set(ViewContainerLocation.Sidebar, activityBarPart);\n\t\tthis.paneCompositeSelectorParts.set(ViewContainerLocation.AuxiliaryBar, auxiliaryBarPart);\n\n\t\tconst eventDisposables = this._register(new DisposableStore());\n\t\tthis.onDidPaneCompositeOpen = Event.any(...ViewContainerLocations.map(loc => Event.map(this.paneCompositeParts.get(loc)!.onDidPaneCompositeOpen, composite => { return { composite, viewContainerLocation: loc }; }, eventDisposables)));\n\t\tthis.onDidPaneCompositeClose = Event.any(...ViewContainerLocations.map(loc => Event.map(this.paneCompositeParts.get(loc)!.onDidPaneCompositeClose, composite => { return { composite, viewContainerLocation: loc }; }, eventDisposables)));\n\t}\n\n\topenPaneComposite(id: string | undefined, viewContainerLocation: ViewContainerLocation, focus?: boolean): Promise<IPaneComposite | undefined> {\n\t\treturn this.getPartByLocation(viewContainerLocation).openPaneComposite(id, focus);\n\t}\n\n\tgetActivePaneComposite(viewContainerLocation: ViewContainerLocation): IPaneComposite | undefined {\n\t\treturn this.getPartByLocation(viewContainerLocation).getActivePaneComposite();\n\t}\n\n\tgetPaneComposite(id: string, viewContainerLocation: ViewContainerLocation): PaneCompositeDescriptor | undefined {\n\t\treturn this.getPartByLocation(viewContainerLocation).getPaneComposite(id);\n\t}\n\n\tgetPaneComposites(viewContainerLocation: ViewContainerLocation): PaneCompositeDescriptor[] {\n\t\treturn this.getPartByLocation(viewContainerLocation).getPaneComposites();\n\t}\n\n\tgetPinnedPaneCompositeIds(viewContainerLocation: ViewContainerLocation): string[] {\n\t\treturn this.getSelectorPartByLocation(viewContainerLocation).getPinnedPaneCompositeIds();\n\t}\n\n\tgetVisiblePaneCompositeIds(viewContainerLocation: ViewContainerLocation): string[] {\n\t\treturn this.getSelectorPartByLocation(viewContainerLocation).getVisiblePaneCompositeIds();\n\t}\n\n\tgetProgressIndicator(id: string, viewContainerLocation: ViewContainerLocation): IProgressIndicator | undefined {\n\t\treturn this.getPartByLocation(viewContainerLocation).getProgressIndicator(id);\n\t}\n\n\thideActivePaneComposite(viewContainerLocation: ViewContainerLocation): void {\n\t\tthis.getPartByLocation(viewContainerLocation).hideActivePaneComposite();\n\t}\n\n\tgetLastActivePaneCompositeId(viewContainerLocation: ViewContainerLocation): string {\n\t\treturn this.getPartByLocation(viewContainerLocation).getLastActivePaneCompositeId();\n\t}\n\n\tshowActivity(id: string, viewContainerLocation: ViewContainerLocation, badge: IBadge, clazz?: string, priority?: number): IDisposable {\n\t\treturn this.getSelectorPartByLocation(viewContainerLocation).showActivity(id, badge, clazz, priority);\n\t}\n\n\tprivate getPartByLocation(viewContainerLocation: ViewContainerLocation): IPaneCompositePart {\n\t\treturn assertIsDefined(this.paneCompositeParts.get(viewContainerLocation));\n\t}\n\n\tprivate getSelectorPartByLocation(viewContainerLocation: ViewContainerLocation): IPaneCompositeSelectorPart {\n\t\treturn assertIsDefined(this.paneCompositeSelectorParts.get(viewContainerLocation));\n\t}\n}\n\nregisterSingleton(IPaneCompositePartService, PaneCompositeParts, InstantiationType.Delayed);\n"]}