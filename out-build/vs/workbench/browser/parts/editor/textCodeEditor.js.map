{"version":3,"sources":["vs/workbench/browser/parts/editor/textCodeEditor.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAkBhG;;OAEG;IACH,MAAsB,IAAmD,SAAQ,iBAAqB;QAAtG;;YAEW,MAAC,GAAwC,SAAS,CAAC;QAqF9D,CAAC;QAnFA,IAAa,uBAAuB;YACnC,OAAO,IAAI,CAAC,CAAC,EAAc,mBAAmB,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,gBAAG,CAAgB,CAAC,CAAC;QAC9F,CAAC;QAEQ,QAAQ;YAChB,IAAI,IAAI,CAAC,KAAK,EAAE;gBACf,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;aAC5B;YAED,OAAO,IAAA,cAAQ,EAAC,CAAY,EAAE,IAAa,CAAC,CAAC;QAC9C,CAAC;QAES,EAAE,CAAkB,MAAmB,EAAE,cAAkC;YACpF,IAAI,CAAC,CAAC,GAAe,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAoB,cAAc,CAAC,sBAAG,EAAe,MAAM,EAAE,cAAc,EAAE,IAAI,CAAC,EAAE,EAA0B,CAAC,CAAC,CAAC;QAC5J,CAAC;QAES,EAAE;YACX,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC5B,CAAC;QAES,EAAE,CAAyB,OAA2B;YAC/D,IAAI,CAAC,CAAC,EAAc,aAAa,CAAC,OAAO,CAAC,CAAC;QAC5C,CAAC;QAES,EAAE;YACX,OAAO,IAAI,CAAC,CAAC,CAAa;QAC3B,CAAC;QAEQ,UAAU;YAClB,OAAO,IAAI,CAAC,CAAC,CAAa;QAC3B,CAAC;QAEkB,EAAE,CAAqB,QAAa;YACtD,IAAI,CAAC,IAAI,CAAC,CAAC,EAAc;gBACxB,OAAO,SAAS,CAAC;aACjB;YAED,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAa,QAAQ,EAAE,CAAC;YAC5C,IAAI,CAAC,KAAK,EAAE;gBACX,OAAO,SAAS,CAAC,CAAC,kCAAkC;aACpD;YAED,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC;YAC3B,IAAI,CAAC,QAAQ,EAAE;gBACd,OAAO,SAAS,CAAC,CAAC,oEAAoE;aACtF;YAED,IAAI,CAAC,IAAA,eAAG,EAAK,QAAQ,EAAE,QAAQ,CAAC,EAAE;gBACjC,OAAO,SAAS,CAAC,CAAC,qEAAqE;aACvF;YAED,OAAO,IAAI,CAAC,CAAC,CAAa,aAAa,EAAkB,IAAI,SAAS,CAAC;QACxE,CAAC;QAEQ,UAAU,CAAC,OAAuC;YAC1D,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YAE1B,IAAI,OAAO,EAAE;gBACZ,IAAA,sCAAsB,EAAC,OAAO,EAAE,IAAA,WAAG,EAAa,IAAI,CAAC,CAAC,CAAa,4BAAoB,CAAC;aACxF;QACF,CAAC;QAEQ,KAAK;YACb,IAAI,CAAC,CAAC,EAAc,KAAK,EAAE,CAAC;QAC7B,CAAC;QAEQ,QAAQ;YAChB,OAAO,IAAI,CAAC,CAAC,EAAc,YAAY,EAAE,IAAI,KAAK,CAAC,QAAQ,EAAE,CAAC;QAC/D,CAAC;QAEkB,EAAE,CAAe,OAAgB,EAAE,KAA+B;YACpF,KAAK,CAAC,EAAE,CAAe,OAAO,EAAE,KAAK,CAAC,CAAC;YAEvC,IAAI,OAAO,EAAE;gBACZ,IAAI,CAAC,CAAC,EAAc,SAAS,EAAE,CAAC;aAChC;iBAAM;gBACN,IAAI,CAAC,CAAC,EAAc,MAAM,EAAE,CAAC;aAC7B;QACF,CAAC;QAEQ,MAAM,CAAC,SAAc;YAC7B,IAAI,CAAC,CAAC,EAAc,MAAM,CAAC,SAAS,CAAC,CAAC;QACvC,CAAC;KACD;IAvFD,oBAuFC","file":"textCodeEditor.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { URI } from 'vs/base/common/uri';\nimport { assertIsDefined } from 'vs/base/common/types';\nimport { ITextEditorPane } from 'vs/workbench/common/editor';\nimport { applyTextEditorOptions } from 'vs/workbench/common/editor/editorOptions';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { ITextEditorOptions } from 'vs/platform/editor/common/editor';\nimport { isEqual } from 'vs/base/common/resources';\nimport { IEditorOptions as ICodeEditorOptions } from 'vs/editor/common/config/editorOptions';\nimport { CodeEditorWidget, ICodeEditorWidgetOptions } from 'vs/editor/browser/widget/codeEditorWidget';\nimport { IEditorViewState, ScrollType } from 'vs/editor/common/editorCommon';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { AbstractTextEditor } from 'vs/workbench/browser/parts/editor/textEditor';\nimport { Dimension } from 'vs/base/browser/dom';\nimport { IEditorGroup } from 'vs/workbench/services/editor/common/editorGroupsService';\n\n/**\n * A text editor using the code editor widget.\n */\nexport abstract class AbstractTextCodeEditor<T extends IEditorViewState> extends AbstractTextEditor<T> implements ITextEditorPane {\n\n\tprotected editorControl: ICodeEditor | undefined = undefined;\n\n\toverride get scopedContextKeyService(): IContextKeyService | undefined {\n\t\treturn this.editorControl?.invokeWithinContext(accessor => accessor.get(IContextKeyService));\n\t}\n\n\toverride getTitle(): string {\n\t\tif (this.input) {\n\t\t\treturn this.input.getName();\n\t\t}\n\n\t\treturn localize('textEditor', \"Text Editor\");\n\t}\n\n\tprotected createEditorControl(parent: HTMLElement, initialOptions: ICodeEditorOptions): void {\n\t\tthis.editorControl = this._register(this.instantiationService.createInstance(CodeEditorWidget, parent, initialOptions, this.getCodeEditorWidgetOptions()));\n\t}\n\n\tprotected getCodeEditorWidgetOptions(): ICodeEditorWidgetOptions {\n\t\treturn Object.create(null);\n\t}\n\n\tprotected updateEditorControlOptions(options: ICodeEditorOptions): void {\n\t\tthis.editorControl?.updateOptions(options);\n\t}\n\n\tprotected getMainControl(): ICodeEditor | undefined {\n\t\treturn this.editorControl;\n\t}\n\n\toverride getControl(): ICodeEditor | undefined {\n\t\treturn this.editorControl;\n\t}\n\n\tprotected override computeEditorViewState(resource: URI): T | undefined {\n\t\tif (!this.editorControl) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst model = this.editorControl.getModel();\n\t\tif (!model) {\n\t\t\treturn undefined; // view state always needs a model\n\t\t}\n\n\t\tconst modelUri = model.uri;\n\t\tif (!modelUri) {\n\t\t\treturn undefined; // model URI is needed to make sure we save the view state correctly\n\t\t}\n\n\t\tif (!isEqual(modelUri, resource)) {\n\t\t\treturn undefined; // prevent saving view state for a model that is not the expected one\n\t\t}\n\n\t\treturn this.editorControl.saveViewState() as unknown as T ?? undefined;\n\t}\n\n\toverride setOptions(options: ITextEditorOptions | undefined): void {\n\t\tsuper.setOptions(options);\n\n\t\tif (options) {\n\t\t\tapplyTextEditorOptions(options, assertIsDefined(this.editorControl), ScrollType.Smooth);\n\t\t}\n\t}\n\n\toverride focus(): void {\n\t\tthis.editorControl?.focus();\n\t}\n\n\toverride hasFocus(): boolean {\n\t\treturn this.editorControl?.hasTextFocus() || super.hasFocus();\n\t}\n\n\tprotected override setEditorVisible(visible: boolean, group: IEditorGroup | undefined): void {\n\t\tsuper.setEditorVisible(visible, group);\n\n\t\tif (visible) {\n\t\t\tthis.editorControl?.onVisible();\n\t\t} else {\n\t\t\tthis.editorControl?.onHide();\n\t\t}\n\t}\n\n\toverride layout(dimension: Dimension): void {\n\t\tthis.editorControl?.layout(dimension);\n\t}\n}\n"]}