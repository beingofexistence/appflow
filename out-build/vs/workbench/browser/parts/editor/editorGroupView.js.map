{"version":3,"sources":["vs/workbench/browser/parts/editor/editorGroupView.ts"],"names":[],"mappings":"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","file":"editorGroupView.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/editorgroupview';\nimport { EditorGroupModel, IEditorOpenOptions, IGroupModelChangeEvent, ISerializedEditorGroupModel, isGroupEditorCloseEvent, isGroupEditorOpenEvent, isSerializedEditorGroupModel } from 'vs/workbench/common/editor/editorGroupModel';\nimport { GroupIdentifier, CloseDirection, IEditorCloseEvent, IEditorPane, SaveReason, IEditorPartOptionsChangeEvent, EditorsOrder, IVisibleEditorPane, EditorResourceAccessor, EditorInputCapabilities, IUntypedEditorInput, DEFAULT_EDITOR_ASSOCIATION, SideBySideEditor, EditorCloseContext, IEditorWillMoveEvent, IEditorWillOpenEvent, IMatchEditorOptions, GroupModelChangeKind, IActiveEditorChangeEvent, IFindEditorOptions } from 'vs/workbench/common/editor';\nimport { ActiveEditorGroupLockedContext, ActiveEditorDirtyContext, EditorGroupEditorsCountContext, ActiveEditorStickyContext, ActiveEditorPinnedContext, ActiveEditorLastInGroupContext, ActiveEditorFirstInGroupContext } from 'vs/workbench/common/contextkeys';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { SideBySideEditorInput } from 'vs/workbench/common/editor/sideBySideEditorInput';\nimport { Emitter, Relay } from 'vs/base/common/event';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { Dimension, trackFocus, addDisposableListener, EventType, EventHelper, findParentWithClass, isAncestor, IDomNodePagePosition } from 'vs/base/browser/dom';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { ProgressBar } from 'vs/base/browser/ui/progressbar/progressbar';\nimport { IThemeService, Themable } from 'vs/platform/theme/common/themeService';\nimport { editorBackground, contrastBorder } from 'vs/platform/theme/common/colorRegistry';\nimport { EDITOR_GROUP_HEADER_TABS_BACKGROUND, EDITOR_GROUP_HEADER_NO_TABS_BACKGROUND, EDITOR_GROUP_EMPTY_BACKGROUND, EDITOR_GROUP_HEADER_BORDER } from 'vs/workbench/common/theme';\nimport { ICloseEditorsFilter, GroupsOrder, ICloseEditorOptions, ICloseAllEditorsOptions, IEditorReplacement } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { EditorPanes } from 'vs/workbench/browser/parts/editor/editorPanes';\nimport { IEditorProgressService } from 'vs/platform/progress/common/progress';\nimport { EditorProgressIndicator } from 'vs/workbench/services/progress/browser/progressIndicator';\nimport { localize } from 'vs/nls';\nimport { coalesce, firstOrDefault } from 'vs/base/common/arrays';\nimport { MutableDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { DeferredPromise, Promises, RunOnceWorker } from 'vs/base/common/async';\nimport { EventType as TouchEventType, GestureEvent } from 'vs/base/browser/touch';\nimport { IEditorGroupsAccessor, IEditorGroupView, fillActiveEditorViewState, EditorServiceImpl, IEditorGroupTitleHeight, IInternalEditorOpenOptions, IInternalMoveCopyOptions, IInternalEditorCloseOptions, IInternalEditorTitleControlOptions } from 'vs/workbench/browser/parts/editor/editor';\nimport { ActionBar } from 'vs/base/browser/ui/actionbar/actionbar';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { IAction } from 'vs/base/common/actions';\nimport { IMenuService, MenuId } from 'vs/platform/actions/common/actions';\nimport { StandardMouseEvent } from 'vs/base/browser/mouseEvent';\nimport { createAndFillInActionBarActions } from 'vs/platform/actions/browser/menuEntryActionViewItem';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { hash } from 'vs/base/common/hash';\nimport { getMimeTypes } from 'vs/editor/common/services/languagesAssociations';\nimport { extname, isEqual } from 'vs/base/common/resources';\nimport { Schemas } from 'vs/base/common/network';\nimport { EditorActivation, IEditorOptions } from 'vs/platform/editor/common/editor';\nimport { IFileDialogService, ConfirmResult } from 'vs/platform/dialogs/common/dialogs';\nimport { IFilesConfigurationService, AutoSaveMode } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\nimport { URI } from 'vs/base/common/uri';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { isLinux, isMacintosh, isNative, isWindows } from 'vs/base/common/platform';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { TelemetryTrustedValue } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { defaultProgressBarStyles } from 'vs/platform/theme/browser/defaultStyles';\nimport { IBoundarySashes } from 'vs/base/browser/ui/sash/sash';\nimport { EditorGroupWatermark } from 'vs/workbench/browser/parts/editor/editorGroupWatermark';\nimport { EditorTitleControl } from 'vs/workbench/browser/parts/editor/editorTitleControl';\n\nexport class EditorGroupView extends Themable implements IEditorGroupView {\n\n\t//#region factory\n\n\tstatic createNew(accessor: IEditorGroupsAccessor, index: number, instantiationService: IInstantiationService): IEditorGroupView {\n\t\treturn instantiationService.createInstance(EditorGroupView, accessor, null, index);\n\t}\n\n\tstatic createFromSerialized(serialized: ISerializedEditorGroupModel, accessor: IEditorGroupsAccessor, index: number, instantiationService: IInstantiationService): IEditorGroupView {\n\t\treturn instantiationService.createInstance(EditorGroupView, accessor, serialized, index);\n\t}\n\n\tstatic createCopy(copyFrom: IEditorGroupView, accessor: IEditorGroupsAccessor, index: number, instantiationService: IInstantiationService): IEditorGroupView {\n\t\treturn instantiationService.createInstance(EditorGroupView, accessor, copyFrom, index);\n\t}\n\n\t//#endregion\n\n\t/**\n\t * Access to the context key service scoped to this editor group.\n\t */\n\treadonly scopedContextKeyService: IContextKeyService;\n\n\t//#region events\n\n\tprivate readonly _onDidFocus = this._register(new Emitter<void>());\n\treadonly onDidFocus = this._onDidFocus.event;\n\n\tprivate readonly _onWillDispose = this._register(new Emitter<void>());\n\treadonly onWillDispose = this._onWillDispose.event;\n\n\tprivate readonly _onDidModelChange = this._register(new Emitter<IGroupModelChangeEvent>());\n\treadonly onDidModelChange = this._onDidModelChange.event;\n\n\tprivate readonly _onDidActiveEditorChange = this._register(new Emitter<IActiveEditorChangeEvent>());\n\treadonly onDidActiveEditorChange = this._onDidActiveEditorChange.event;\n\n\tprivate readonly _onDidOpenEditorFail = this._register(new Emitter<EditorInput>());\n\treadonly onDidOpenEditorFail = this._onDidOpenEditorFail.event;\n\n\tprivate readonly _onWillCloseEditor = this._register(new Emitter<IEditorCloseEvent>());\n\treadonly onWillCloseEditor = this._onWillCloseEditor.event;\n\n\tprivate readonly _onDidCloseEditor = this._register(new Emitter<IEditorCloseEvent>());\n\treadonly onDidCloseEditor = this._onDidCloseEditor.event;\n\n\tprivate readonly _onWillMoveEditor = this._register(new Emitter<IEditorWillMoveEvent>());\n\treadonly onWillMoveEditor = this._onWillMoveEditor.event;\n\n\tprivate readonly _onWillOpenEditor = this._register(new Emitter<IEditorWillOpenEvent>());\n\treadonly onWillOpenEditor = this._onWillOpenEditor.event;\n\n\t//#endregion\n\n\tprivate readonly model: EditorGroupModel;\n\n\tprivate active: boolean | undefined;\n\tprivate lastLayout: IDomNodePagePosition | undefined;\n\n\tprivate readonly scopedInstantiationService: IInstantiationService;\n\n\tprivate readonly titleContainer: HTMLElement;\n\tprivate readonly titleControl: EditorTitleControl;\n\n\tprivate readonly progressBar: ProgressBar;\n\n\tprivate readonly editorContainer: HTMLElement;\n\tprivate readonly editorPane: EditorPanes;\n\n\tprivate readonly disposedEditorsWorker = this._register(new RunOnceWorker<EditorInput>(editors => this.handleDisposedEditors(editors), 0));\n\n\tprivate readonly mapEditorToPendingConfirmation = new Map<EditorInput, Promise<boolean>>();\n\n\tprivate readonly containerToolBarMenuDisposable = this._register(new MutableDisposable());\n\n\tprivate readonly whenRestoredPromise = new DeferredPromise<void>();\n\treadonly whenRestored = this.whenRestoredPromise.p;\n\n\tconstructor(\n\t\tprivate accessor: IEditorGroupsAccessor,\n\t\tfrom: IEditorGroupView | ISerializedEditorGroupModel | null,\n\t\tprivate _index: number,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t\t@IContextMenuService private readonly contextMenuService: IContextMenuService,\n\t\t@IFileDialogService private readonly fileDialogService: IFileDialogService,\n\t\t@IEditorService private readonly editorService: EditorServiceImpl,\n\t\t@IFilesConfigurationService private readonly filesConfigurationService: IFilesConfigurationService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper(themeService);\n\n\t\tif (from instanceof EditorGroupView) {\n\t\t\tthis.model = this._register(from.model.clone());\n\t\t} else if (isSerializedEditorGroupModel(from)) {\n\t\t\tthis.model = this._register(instantiationService.createInstance(EditorGroupModel, from));\n\t\t} else {\n\t\t\tthis.model = this._register(instantiationService.createInstance(EditorGroupModel, undefined));\n\t\t}\n\n\t\t//#region create()\n\t\t{\n\t\t\t// Scoped context key service\n\t\t\tthis.scopedContextKeyService = this._register(this.contextKeyService.createScoped(this.element));\n\n\t\t\t// Container\n\t\t\tthis.element.classList.add('editor-group-container');\n\n\t\t\t// Container listeners\n\t\t\tthis.registerContainerListeners();\n\n\t\t\t// Container toolbar\n\t\t\tthis.createContainerToolbar();\n\n\t\t\t// Container context menu\n\t\t\tthis.createContainerContextMenu();\n\n\t\t\t// Watermark & shortcuts\n\t\t\tthis._register(this.instantiationService.createInstance(EditorGroupWatermark, this.element));\n\n\t\t\t// Progress bar\n\t\t\tthis.progressBar = this._register(new ProgressBar(this.element, defaultProgressBarStyles));\n\t\t\tthis.progressBar.hide();\n\n\t\t\t// Scoped instantiation service\n\t\t\tthis.scopedInstantiationService = this.instantiationService.createChild(new ServiceCollection(\n\t\t\t\t[IContextKeyService, this.scopedContextKeyService],\n\t\t\t\t[IEditorProgressService, this._register(new EditorProgressIndicator(this.progressBar, this))]\n\t\t\t));\n\n\t\t\t// Context keys\n\t\t\tthis.handleGroupContextKeys();\n\n\t\t\t// Title container\n\t\t\tthis.titleContainer = document.createElement('div');\n\t\t\tthis.titleContainer.classList.add('title');\n\t\t\tthis.element.appendChild(this.titleContainer);\n\n\t\t\t// Title control\n\t\t\tthis.titleControl = this._register(this.scopedInstantiationService.createInstance(EditorTitleControl, this.titleContainer, this.accessor, this));\n\n\t\t\t// Editor container\n\t\t\tthis.editorContainer = document.createElement('div');\n\t\t\tthis.editorContainer.classList.add('editor-container');\n\t\t\tthis.element.appendChild(this.editorContainer);\n\n\t\t\t// Editor pane\n\t\t\tthis.editorPane = this._register(this.scopedInstantiationService.createInstance(EditorPanes, this.element, this.editorContainer, this));\n\t\t\tthis._onDidChange.input = this.editorPane.onDidChangeSizeConstraints;\n\n\t\t\t// Track Focus\n\t\t\tthis.doTrackFocus();\n\n\t\t\t// Update containers\n\t\t\tthis.updateTitleContainer();\n\t\t\tthis.updateContainer();\n\n\t\t\t// Update styles\n\t\t\tthis.updateStyles();\n\t\t}\n\t\t//#endregion\n\n\t\t// Restore editors if provided\n\t\tconst restoreEditorsPromise = this.restoreEditors(from) ?? Promise.resolve();\n\n\t\t// Signal restored once editors have restored\n\t\trestoreEditorsPromise.finally(() => {\n\t\t\tthis.whenRestoredPromise.complete();\n\t\t});\n\n\t\t// Register Listeners\n\t\tthis.registerListeners();\n\t}\n\n\tprivate handleGroupContextKeys(): void {\n\t\tconst groupActiveEditorDirtyContext = ActiveEditorDirtyContext.bindTo(this.scopedContextKeyService);\n\t\tconst groupActiveEditorPinnedContext = ActiveEditorPinnedContext.bindTo(this.scopedContextKeyService);\n\t\tconst groupActiveEditorFirstContext = ActiveEditorFirstInGroupContext.bindTo(this.scopedContextKeyService);\n\t\tconst groupActiveEditorLastContext = ActiveEditorLastInGroupContext.bindTo(this.scopedContextKeyService);\n\t\tconst groupActiveEditorStickyContext = ActiveEditorStickyContext.bindTo(this.scopedContextKeyService);\n\t\tconst groupEditorsCountContext = EditorGroupEditorsCountContext.bindTo(this.scopedContextKeyService);\n\t\tconst groupLockedContext = ActiveEditorGroupLockedContext.bindTo(this.scopedContextKeyService);\n\n\t\tconst activeEditorListener = this._register(new MutableDisposable());\n\n\t\tconst observeActiveEditor = () => {\n\t\t\tactiveEditorListener.clear();\n\n\t\t\tconst activeEditor = this.model.activeEditor;\n\t\t\tif (activeEditor) {\n\t\t\t\tgroupActiveEditorDirtyContext.set(activeEditor.isDirty() && !activeEditor.isSaving());\n\t\t\t\tactiveEditorListener.value = activeEditor.onDidChangeDirty(() => {\n\t\t\t\t\tgroupActiveEditorDirtyContext.set(activeEditor.isDirty() && !activeEditor.isSaving());\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tgroupActiveEditorDirtyContext.set(false);\n\t\t\t}\n\t\t};\n\n\t\t// Update group contexts based on group changes\n\t\tthis._register(this.onDidModelChange(e => {\n\t\t\tswitch (e.kind) {\n\t\t\t\tcase GroupModelChangeKind.GROUP_LOCKED:\n\t\t\t\t\tgroupLockedContext.set(this.isLocked);\n\t\t\t\t\tbreak;\n\t\t\t\tcase GroupModelChangeKind.EDITOR_ACTIVE:\n\t\t\t\tcase GroupModelChangeKind.EDITOR_CLOSE:\n\t\t\t\tcase GroupModelChangeKind.EDITOR_OPEN:\n\t\t\t\tcase GroupModelChangeKind.EDITOR_MOVE:\n\t\t\t\t\tgroupActiveEditorFirstContext.set(this.model.isFirst(this.model.activeEditor));\n\t\t\t\t\tgroupActiveEditorLastContext.set(this.model.isLast(this.model.activeEditor));\n\t\t\t\t\tbreak;\n\t\t\t\tcase GroupModelChangeKind.EDITOR_PIN:\n\t\t\t\t\tif (e.editor && e.editor === this.model.activeEditor) {\n\t\t\t\t\t\tgroupActiveEditorPinnedContext.set(this.model.isPinned(this.model.activeEditor));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase GroupModelChangeKind.EDITOR_STICKY:\n\t\t\t\t\tif (e.editor && e.editor === this.model.activeEditor) {\n\t\t\t\t\t\tgroupActiveEditorStickyContext.set(this.model.isSticky(this.model.activeEditor));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Group editors count context\n\t\t\tgroupEditorsCountContext.set(this.count);\n\t\t}));\n\n\t\t// Track the active editor and update context key that reflects\n\t\t// the dirty state of this editor\n\t\tthis._register(this.onDidActiveEditorChange(() => {\n\t\t\tobserveActiveEditor();\n\t\t}));\n\n\t\tobserveActiveEditor();\n\t}\n\n\tprivate registerContainerListeners(): void {\n\n\t\t// Open new file via doubleclick on empty container\n\t\tthis._register(addDisposableListener(this.element, EventType.DBLCLICK, e => {\n\t\t\tif (this.isEmpty) {\n\t\t\t\tEventHelper.stop(e);\n\n\t\t\t\tthis.editorService.openEditor({\n\t\t\t\t\tresource: undefined,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tpinned: true,\n\t\t\t\t\t\toverride: DEFAULT_EDITOR_ASSOCIATION.id\n\t\t\t\t\t}\n\t\t\t\t}, this.id);\n\t\t\t}\n\t\t}));\n\n\t\t// Close empty editor group via middle mouse click\n\t\tthis._register(addDisposableListener(this.element, EventType.AUXCLICK, e => {\n\t\t\tif (this.isEmpty && e.button === 1 /* Middle Button */) {\n\t\t\t\tEventHelper.stop(e, true);\n\n\t\t\t\tthis.accessor.removeGroup(this);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate createContainerToolbar(): void {\n\n\t\t// Toolbar Container\n\t\tconst toolbarContainer = document.createElement('div');\n\t\ttoolbarContainer.classList.add('editor-group-container-toolbar');\n\t\tthis.element.appendChild(toolbarContainer);\n\n\t\t// Toolbar\n\t\tconst containerToolbar = this._register(new ActionBar(toolbarContainer, {\n\t\t\tariaLabel: localize('ariaLabelGroupActions', \"Empty editor group actions\")\n\t\t}));\n\n\t\t// Toolbar actions\n\t\tconst containerToolbarMenu = this._register(this.menuService.createMenu(MenuId.EmptyEditorGroup, this.scopedContextKeyService));\n\t\tconst updateContainerToolbar = () => {\n\t\t\tconst actions: { primary: IAction[]; secondary: IAction[] } = { primary: [], secondary: [] };\n\n\t\t\t// Clear old actions\n\t\t\tthis.containerToolBarMenuDisposable.value = toDisposable(() => containerToolbar.clear());\n\n\t\t\t// Create new actions\n\t\t\tcreateAndFillInActionBarActions(\n\t\t\t\tcontainerToolbarMenu,\n\t\t\t\t{ arg: { groupId: this.id }, shouldForwardArgs: true },\n\t\t\t\tactions,\n\t\t\t\t'navigation'\n\t\t\t);\n\n\t\t\tfor (const action of [...actions.primary, ...actions.secondary]) {\n\t\t\t\tconst keybinding = this.keybindingService.lookupKeybinding(action.id);\n\t\t\t\tcontainerToolbar.push(action, { icon: true, label: false, keybinding: keybinding?.getLabel() });\n\t\t\t}\n\t\t};\n\t\tupdateContainerToolbar();\n\t\tthis._register(containerToolbarMenu.onDidChange(updateContainerToolbar));\n\t}\n\n\tprivate createContainerContextMenu(): void {\n\t\tthis._register(addDisposableListener(this.element, EventType.CONTEXT_MENU, e => this.onShowContainerContextMenu(e)));\n\t\tthis._register(addDisposableListener(this.element, TouchEventType.Contextmenu, () => this.onShowContainerContextMenu()));\n\t}\n\n\tprivate onShowContainerContextMenu(e?: MouseEvent): void {\n\t\tif (!this.isEmpty) {\n\t\t\treturn; // only for empty editor groups\n\t\t}\n\n\t\t// Find target anchor\n\t\tlet anchor: HTMLElement | StandardMouseEvent = this.element;\n\t\tif (e instanceof MouseEvent) {\n\t\t\tanchor = new StandardMouseEvent(e);\n\t\t}\n\n\t\t// Show it\n\t\tthis.contextMenuService.showContextMenu({\n\t\t\tmenuId: MenuId.EmptyEditorGroupContext,\n\t\t\tcontextKeyService: this.contextKeyService,\n\t\t\tgetAnchor: () => anchor,\n\t\t\tonHide: () => {\n\t\t\t\tthis.focus();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate doTrackFocus(): void {\n\n\t\t// Container\n\t\tconst containerFocusTracker = this._register(trackFocus(this.element));\n\t\tthis._register(containerFocusTracker.onDidFocus(() => {\n\t\t\tif (this.isEmpty) {\n\t\t\t\tthis._onDidFocus.fire(); // only when empty to prevent accident focus\n\t\t\t}\n\t\t}));\n\n\t\t// Title Container\n\t\tconst handleTitleClickOrTouch = (e: MouseEvent | GestureEvent): void => {\n\t\t\tlet target: HTMLElement;\n\t\t\tif (e instanceof MouseEvent) {\n\t\t\t\tif (e.button !== 0 /* middle/right mouse button */ || (isMacintosh && e.ctrlKey /* macOS context menu */)) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\ttarget = e.target as HTMLElement;\n\t\t\t} else {\n\t\t\t\ttarget = (e as GestureEvent).initialTarget as HTMLElement;\n\t\t\t}\n\n\t\t\tif (findParentWithClass(target, 'monaco-action-bar', this.titleContainer) ||\n\t\t\t\tfindParentWithClass(target, 'monaco-breadcrumb-item', this.titleContainer)\n\t\t\t) {\n\t\t\t\treturn; // not when clicking on actions or breadcrumbs\n\t\t\t}\n\n\t\t\t// timeout to keep focus in editor after mouse up\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis.focus();\n\t\t\t});\n\t\t};\n\n\t\tthis._register(addDisposableListener(this.titleContainer, EventType.MOUSE_DOWN, e => handleTitleClickOrTouch(e)));\n\t\tthis._register(addDisposableListener(this.titleContainer, TouchEventType.Tap, e => handleTitleClickOrTouch(e)));\n\n\t\t// Editor pane\n\t\tthis._register(this.editorPane.onDidFocus(() => {\n\t\t\tthis._onDidFocus.fire();\n\t\t}));\n\t}\n\n\tprivate updateContainer(): void {\n\n\t\t// Empty Container: add some empty container attributes\n\t\tif (this.isEmpty) {\n\t\t\tthis.element.classList.add('empty');\n\t\t\tthis.element.tabIndex = 0;\n\t\t\tthis.element.setAttribute('aria-label', localize('emptyEditorGroup', \"{0} (empty)\", this.label));\n\t\t}\n\n\t\t// Non-Empty Container: revert empty container attributes\n\t\telse {\n\t\t\tthis.element.classList.remove('empty');\n\t\t\tthis.element.removeAttribute('tabIndex');\n\t\t\tthis.element.removeAttribute('aria-label');\n\t\t}\n\n\t\t// Update styles\n\t\tthis.updateStyles();\n\t}\n\n\tprivate updateTitleContainer(): void {\n\t\tthis.titleContainer.classList.toggle('tabs', this.accessor.partOptions.showTabs);\n\t\tthis.titleContainer.classList.toggle('show-file-icons', this.accessor.partOptions.showIcons);\n\t}\n\n\tprivate restoreEditors(from: IEditorGroupView | ISerializedEditorGroupModel | null): Promise<void> | undefined {\n\t\tif (this.count === 0) {\n\t\t\treturn; // nothing to show\n\t\t}\n\n\t\t// Determine editor options\n\t\tlet options: IEditorOptions;\n\t\tif (from instanceof EditorGroupView) {\n\t\t\toptions = fillActiveEditorViewState(from); // if we copy from another group, ensure to copy its active editor viewstate\n\t\t} else {\n\t\t\toptions = Object.create(null);\n\t\t}\n\n\t\tconst activeEditor = this.model.activeEditor;\n\t\tif (!activeEditor) {\n\t\t\treturn;\n\t\t}\n\n\t\toptions.pinned = this.model.isPinned(activeEditor);\t// preserve pinned state\n\t\toptions.sticky = this.model.isSticky(activeEditor);\t// preserve sticky state\n\t\toptions.preserveFocus = true;\t\t\t\t\t\t// handle focus after editor is opened\n\n\t\tconst activeElement = document.activeElement;\n\n\t\t// Show active editor (intentionally not using async to keep\n\t\t// `restoreEditors` from executing in same stack)\n\t\treturn this.doShowEditor(activeEditor, { active: true, isNew: false /* restored */ }, options).then(() => {\n\n\t\t\t// Set focused now if this is the active group and focus has\n\t\t\t// not changed meanwhile. This prevents focus from being\n\t\t\t// stolen accidentally on startup when the user already\n\t\t\t// clicked somewhere.\n\n\t\t\tif (this.accessor.activeGroup === this && activeElement === document.activeElement) {\n\t\t\t\tthis.focus();\n\t\t\t}\n\t\t});\n\t}\n\n\t//#region event handling\n\n\tprivate registerListeners(): void {\n\n\t\t// Model Events\n\t\tthis._register(this.model.onDidModelChange(e => this.onDidGroupModelChange(e)));\n\n\t\t// Option Changes\n\t\tthis._register(this.accessor.onDidChangeEditorPartOptions(e => this.onDidChangeEditorPartOptions(e)));\n\n\t\t// Visibility\n\t\tthis._register(this.accessor.onDidVisibilityChange(e => this.onDidVisibilityChange(e)));\n\t}\n\n\tprivate onDidGroupModelChange(e: IGroupModelChangeEvent): void {\n\n\t\t// Re-emit to outside\n\t\tthis._onDidModelChange.fire(e);\n\n\t\t// Handle within\n\n\t\tif (!e.editor) {\n\t\t\treturn;\n\t\t}\n\n\t\tswitch (e.kind) {\n\t\t\tcase GroupModelChangeKind.EDITOR_OPEN:\n\t\t\t\tif (isGroupEditorOpenEvent(e)) {\n\t\t\t\t\tthis.onDidOpenEditor(e.editor, e.editorIndex);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase GroupModelChangeKind.EDITOR_CLOSE:\n\t\t\t\tif (isGroupEditorCloseEvent(e)) {\n\t\t\t\t\tthis.handleOnDidCloseEditor(e.editor, e.editorIndex, e.context, e.sticky);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase GroupModelChangeKind.EDITOR_WILL_DISPOSE:\n\t\t\t\tthis.onWillDisposeEditor(e.editor);\n\t\t\t\tbreak;\n\t\t\tcase GroupModelChangeKind.EDITOR_DIRTY:\n\t\t\t\tthis.onDidChangeEditorDirty(e.editor);\n\t\t\t\tbreak;\n\t\t\tcase GroupModelChangeKind.EDITOR_LABEL:\n\t\t\t\tthis.onDidChangeEditorLabel(e.editor);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate onDidOpenEditor(editor: EditorInput, editorIndex: number): void {\n\n\t\t/* __GDPR__\n\t\t\t\"editorOpened\" : {\n\t\t\t\t\"owner\": \"bpasero\",\n\t\t\t\t\"${include}\": [\n\t\t\t\t\t\"${EditorTelemetryDescriptor}\"\n\t\t\t\t]\n\t\t\t}\n\t\t*/\n\t\tthis.telemetryService.publicLog('editorOpened', this.toEditorTelemetryDescriptor(editor));\n\n\t\t// Update container\n\t\tthis.updateContainer();\n\t}\n\n\tprivate handleOnDidCloseEditor(editor: EditorInput, editorIndex: number, context: EditorCloseContext, sticky: boolean): void {\n\n\t\t// Before close\n\t\tthis._onWillCloseEditor.fire({ groupId: this.id, editor, context, index: editorIndex, sticky });\n\n\t\t// Handle event\n\t\tconst editorsToClose: EditorInput[] = [editor];\n\n\t\t// Include both sides of side by side editors when being closed\n\t\tif (editor instanceof SideBySideEditorInput) {\n\t\t\teditorsToClose.push(editor.primary, editor.secondary);\n\t\t}\n\n\t\t// For each editor to close, we call dispose() to free up any resources.\n\t\t// However, certain editors might be shared across multiple editor groups\n\t\t// (including being visible in side by side / diff editors) and as such we\n\t\t// only dispose when they are not opened elsewhere.\n\t\tfor (const editor of editorsToClose) {\n\t\t\tif (this.canDispose(editor)) {\n\t\t\t\teditor.dispose();\n\t\t\t}\n\t\t}\n\n\t\t/* __GDPR__\n\t\t\t\"editorClosed\" : {\n\t\t\t\t\"owner\": \"bpasero\",\n\t\t\t\t\"${include}\": [\n\t\t\t\t\t\"${EditorTelemetryDescriptor}\"\n\t\t\t\t]\n\t\t\t}\n\t\t*/\n\t\tthis.telemetryService.publicLog('editorClosed', this.toEditorTelemetryDescriptor(editor));\n\n\t\t// Update container\n\t\tthis.updateContainer();\n\n\t\t// Event\n\t\tthis._onDidCloseEditor.fire({ groupId: this.id, editor, context, index: editorIndex, sticky });\n\t}\n\n\tprivate canDispose(editor: EditorInput): boolean {\n\t\tfor (const groupView of this.accessor.groups) {\n\t\t\tif (groupView instanceof EditorGroupView && groupView.model.contains(editor, {\n\t\t\t\tstrictEquals: true,\t\t\t\t\t\t// only if this input is not shared across editor groups\n\t\t\t\tsupportSideBySide: SideBySideEditor.ANY // include any side of an opened side by side editor\n\t\t\t})) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate toEditorTelemetryDescriptor(editor: EditorInput): object {\n\t\tconst descriptor = editor.getTelemetryDescriptor();\n\n\t\tconst resource = EditorResourceAccessor.getOriginalUri(editor);\n\t\tconst path = resource ? resource.scheme === Schemas.file ? resource.fsPath : resource.path : undefined;\n\t\tif (resource && path) {\n\t\t\tlet resourceExt = extname(resource);\n\t\t\t// Remove query parameters from the resource extension\n\t\t\tconst queryStringLocation = resourceExt.indexOf('?');\n\t\t\tresourceExt = queryStringLocation !== -1 ? resourceExt.substr(0, queryStringLocation) : resourceExt;\n\t\t\tdescriptor['resource'] = { mimeType: new TelemetryTrustedValue(getMimeTypes(resource).join(', ')), scheme: resource.scheme, ext: resourceExt, path: hash(path) };\n\n\t\t\t/* __GDPR__FRAGMENT__\n\t\t\t\t\"EditorTelemetryDescriptor\" : {\n\t\t\t\t\t\"resource\": { \"${inline}\": [ \"${URIDescriptor}\" ] }\n\t\t\t\t}\n\t\t\t*/\n\t\t\treturn descriptor;\n\t\t}\n\n\t\treturn descriptor;\n\t}\n\n\tprivate onWillDisposeEditor(editor: EditorInput): void {\n\n\t\t// To prevent race conditions, we handle disposed editors in our worker with a timeout\n\t\t// because it can happen that an input is being disposed with the intent to replace\n\t\t// it with some other input right after.\n\t\tthis.disposedEditorsWorker.work(editor);\n\t}\n\n\tprivate handleDisposedEditors(disposedEditors: EditorInput[]): void {\n\n\t\t// Split between visible and hidden editors\n\t\tlet activeEditor: EditorInput | undefined;\n\t\tconst inactiveEditors: EditorInput[] = [];\n\t\tfor (const disposedEditor of disposedEditors) {\n\t\t\tconst editorFindResult = this.model.findEditor(disposedEditor);\n\t\t\tif (!editorFindResult) {\n\t\t\t\tcontinue; // not part of the model anymore\n\t\t\t}\n\n\t\t\tconst editor = editorFindResult[0];\n\t\t\tif (!editor.isDisposed()) {\n\t\t\t\tcontinue; // editor got reopened meanwhile\n\t\t\t}\n\n\t\t\tif (this.model.isActive(editor)) {\n\t\t\t\tactiveEditor = editor;\n\t\t\t} else {\n\t\t\t\tinactiveEditors.push(editor);\n\t\t\t}\n\t\t}\n\n\t\t// Close all inactive editors first to prevent UI flicker\n\t\tfor (const inactiveEditor of inactiveEditors) {\n\t\t\tthis.doCloseEditor(inactiveEditor, false);\n\t\t}\n\n\t\t// Close active one last\n\t\tif (activeEditor) {\n\t\t\tthis.doCloseEditor(activeEditor, false);\n\t\t}\n\t}\n\n\tprivate onDidChangeEditorPartOptions(event: IEditorPartOptionsChangeEvent): void {\n\n\t\t// Title container\n\t\tthis.updateTitleContainer();\n\n\t\t// Title control\n\t\tthis.titleControl.updateOptions(event.oldPartOptions, event.newPartOptions);\n\n\t\t// Title control Switch between showing tabs <=> not showing tabs\n\t\tif (event.oldPartOptions.showTabs !== event.newPartOptions.showTabs) {\n\n\t\t\t// Re-layout\n\t\t\tthis.relayout();\n\n\t\t\t// Ensure to show active editor if any\n\t\t\tif (this.model.activeEditor) {\n\t\t\t\tthis.titleControl.openEditor(this.model.activeEditor);\n\t\t\t}\n\t\t}\n\n\t\t// Styles\n\t\tthis.updateStyles();\n\n\t\t// Pin preview editor once user disables preview\n\t\tif (event.oldPartOptions.enablePreview && !event.newPartOptions.enablePreview) {\n\t\t\tif (this.model.previewEditor) {\n\t\t\t\tthis.pinEditor(this.model.previewEditor);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onDidChangeEditorDirty(editor: EditorInput): void {\n\n\t\t// Always show dirty editors pinned\n\t\tthis.pinEditor(editor);\n\n\t\t// Forward to title control\n\t\tthis.titleControl.updateEditorDirty(editor);\n\t}\n\n\tprivate onDidChangeEditorLabel(editor: EditorInput): void {\n\n\t\t// Forward to title control\n\t\tthis.titleControl.updateEditorLabel(editor);\n\t}\n\n\tprivate onDidVisibilityChange(visible: boolean): void {\n\n\t\t// Forward to active editor pane\n\t\tthis.editorPane.setVisible(visible);\n\t}\n\n\t//#endregion\n\n\t//#region IEditorGroupView\n\n\tget index(): number {\n\t\treturn this._index;\n\t}\n\n\tget label(): string {\n\t\treturn localize('groupLabel', \"Group {0}\", this._index + 1);\n\t}\n\n\tget ariaLabel(): string {\n\t\treturn localize('groupAriaLabel', \"Editor Group {0}\", this._index + 1);\n\t}\n\n\tprivate _disposed = false;\n\tget disposed(): boolean {\n\t\treturn this._disposed;\n\t}\n\n\tget isEmpty(): boolean {\n\t\treturn this.count === 0;\n\t}\n\n\tget titleHeight(): IEditorGroupTitleHeight {\n\t\treturn this.titleControl.getHeight();\n\t}\n\n\tnotifyIndexChanged(newIndex: number): void {\n\t\tif (this._index !== newIndex) {\n\t\t\tthis._index = newIndex;\n\t\t\tthis.model.setIndex(newIndex);\n\t\t}\n\t}\n\n\tsetActive(isActive: boolean): void {\n\t\tthis.active = isActive;\n\n\t\t// Update container\n\t\tthis.element.classList.toggle('active', isActive);\n\t\tthis.element.classList.toggle('inactive', !isActive);\n\n\t\t// Update title control\n\t\tthis.titleControl.setActive(isActive);\n\n\t\t// Update styles\n\t\tthis.updateStyles();\n\n\t\t// Update model\n\t\tthis.model.setActive(undefined /* entire group got active */);\n\t}\n\n\t//#endregion\n\n\t//#region IEditorGroup\n\n\t//#region basics()\n\n\tget id(): GroupIdentifier {\n\t\treturn this.model.id;\n\t}\n\n\tget editors(): EditorInput[] {\n\t\treturn this.model.getEditors(EditorsOrder.SEQUENTIAL);\n\t}\n\n\tget count(): number {\n\t\treturn this.model.count;\n\t}\n\n\tget stickyCount(): number {\n\t\treturn this.model.stickyCount;\n\t}\n\n\tget activeEditorPane(): IVisibleEditorPane | undefined {\n\t\treturn this.editorPane ? this.editorPane.activeEditorPane ?? undefined : undefined;\n\t}\n\n\tget activeEditor(): EditorInput | null {\n\t\treturn this.model.activeEditor;\n\t}\n\n\tget previewEditor(): EditorInput | null {\n\t\treturn this.model.previewEditor;\n\t}\n\n\tisPinned(editorOrIndex: EditorInput | number): boolean {\n\t\treturn this.model.isPinned(editorOrIndex);\n\t}\n\n\tisSticky(editorOrIndex: EditorInput | number): boolean {\n\t\treturn this.model.isSticky(editorOrIndex);\n\t}\n\n\tisActive(editor: EditorInput | IUntypedEditorInput): boolean {\n\t\treturn this.model.isActive(editor);\n\t}\n\n\tcontains(candidate: EditorInput | IUntypedEditorInput, options?: IMatchEditorOptions): boolean {\n\t\treturn this.model.contains(candidate, options);\n\t}\n\n\tgetEditors(order: EditorsOrder, options?: { excludeSticky?: boolean }): EditorInput[] {\n\t\treturn this.model.getEditors(order, options);\n\t}\n\n\tfindEditors(resource: URI, options?: IFindEditorOptions): EditorInput[] {\n\t\tconst canonicalResource = this.uriIdentityService.asCanonicalUri(resource);\n\t\treturn this.getEditors(EditorsOrder.SEQUENTIAL).filter(editor => {\n\t\t\tif (editor.resource && isEqual(editor.resource, canonicalResource)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Support side by side editor primary side if specified\n\t\t\tif (options?.supportSideBySide === SideBySideEditor.PRIMARY || options?.supportSideBySide === SideBySideEditor.ANY) {\n\t\t\t\tconst primaryResource = EditorResourceAccessor.getCanonicalUri(editor, { supportSideBySide: SideBySideEditor.PRIMARY });\n\t\t\t\tif (primaryResource && isEqual(primaryResource, canonicalResource)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Support side by side editor secondary side if specified\n\t\t\tif (options?.supportSideBySide === SideBySideEditor.SECONDARY || options?.supportSideBySide === SideBySideEditor.ANY) {\n\t\t\t\tconst secondaryResource = EditorResourceAccessor.getCanonicalUri(editor, { supportSideBySide: SideBySideEditor.SECONDARY });\n\t\t\t\tif (secondaryResource && isEqual(secondaryResource, canonicalResource)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn false;\n\t\t});\n\t}\n\n\tgetEditorByIndex(index: number): EditorInput | undefined {\n\t\treturn this.model.getEditorByIndex(index);\n\t}\n\n\tgetIndexOfEditor(editor: EditorInput): number {\n\t\treturn this.model.indexOf(editor);\n\t}\n\n\tisFirst(editor: EditorInput): boolean {\n\t\treturn this.model.isFirst(editor);\n\t}\n\n\tisLast(editor: EditorInput): boolean {\n\t\treturn this.model.isLast(editor);\n\t}\n\n\tfocus(): void {\n\n\t\t// Pass focus to editor panes\n\t\tif (this.activeEditorPane) {\n\t\t\tthis.activeEditorPane.focus();\n\t\t} else {\n\t\t\tthis.element.focus();\n\t\t}\n\n\t\t// Event\n\t\tthis._onDidFocus.fire();\n\t}\n\n\tpinEditor(candidate: EditorInput | undefined = this.activeEditor || undefined): void {\n\t\tif (candidate && !this.model.isPinned(candidate)) {\n\n\t\t\t// Update model\n\t\t\tconst editor = this.model.pin(candidate);\n\n\t\t\t// Forward to title control\n\t\t\tif (editor) {\n\t\t\t\tthis.titleControl.pinEditor(editor);\n\t\t\t}\n\t\t}\n\t}\n\n\tstickEditor(candidate: EditorInput | undefined = this.activeEditor || undefined): void {\n\t\tthis.doStickEditor(candidate, true);\n\t}\n\n\tunstickEditor(candidate: EditorInput | undefined = this.activeEditor || undefined): void {\n\t\tthis.doStickEditor(candidate, false);\n\t}\n\n\tprivate doStickEditor(candidate: EditorInput | undefined, sticky: boolean): void {\n\t\tif (candidate && this.model.isSticky(candidate) !== sticky) {\n\t\t\tconst oldIndexOfEditor = this.getIndexOfEditor(candidate);\n\n\t\t\t// Update model\n\t\t\tconst editor = sticky ? this.model.stick(candidate) : this.model.unstick(candidate);\n\t\t\tif (!editor) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If the index of the editor changed, we need to forward this to\n\t\t\t// title control and also make sure to emit this as an event\n\t\t\tconst newIndexOfEditor = this.getIndexOfEditor(editor);\n\t\t\tif (newIndexOfEditor !== oldIndexOfEditor) {\n\t\t\t\tthis.titleControl.moveEditor(editor, oldIndexOfEditor, newIndexOfEditor);\n\t\t\t}\n\n\t\t\t// Forward sticky state to title control\n\t\t\tif (sticky) {\n\t\t\t\tthis.titleControl.stickEditor(editor);\n\t\t\t} else {\n\t\t\t\tthis.titleControl.unstickEditor(editor);\n\t\t\t}\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region openEditor()\n\n\tasync openEditor(editor: EditorInput, options?: IEditorOptions): Promise<IEditorPane | undefined> {\n\t\treturn this.doOpenEditor(editor, options, {\n\t\t\t// Allow to match on a side-by-side editor when same\n\t\t\t// editor is opened on both sides. In that case we\n\t\t\t// do not want to open a new editor but reuse that one.\n\t\t\tsupportSideBySide: SideBySideEditor.BOTH\n\t\t});\n\t}\n\n\tprivate async doOpenEditor(editor: EditorInput, options?: IEditorOptions, internalOptions?: IInternalEditorOpenOptions): Promise<IEditorPane | undefined> {\n\n\t\t// Guard against invalid editors. Disposed editors\n\t\t// should never open because they emit no events\n\t\t// e.g. to indicate dirty changes.\n\t\tif (!editor || editor.isDisposed()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Fire the event letting everyone know we are about to open an editor\n\t\tthis._onWillOpenEditor.fire({ editor, groupId: this.id });\n\n\t\t// Determine options\n\t\tconst pinned = options?.sticky\n\t\t\t|| !this.accessor.partOptions.enablePreview\n\t\t\t|| editor.isDirty()\n\t\t\t|| (options?.pinned ?? typeof options?.index === 'number' /* unless specified, prefer to pin when opening with index */)\n\t\t\t|| (typeof options?.index === 'number' && this.model.isSticky(options.index))\n\t\t\t|| editor.hasCapability(EditorInputCapabilities.Scratchpad);\n\t\tconst openEditorOptions: IEditorOpenOptions = {\n\t\t\tindex: options ? options.index : undefined,\n\t\t\tpinned,\n\t\t\tsticky: options?.sticky || (typeof options?.index === 'number' && this.model.isSticky(options.index)),\n\t\t\tactive: this.count === 0 || !options || !options.inactive,\n\t\t\tsupportSideBySide: internalOptions?.supportSideBySide\n\t\t};\n\n\t\tif (options?.sticky && typeof options?.index === 'number' && !this.model.isSticky(options.index)) {\n\t\t\t// Special case: we are to open an editor sticky but at an index that is not sticky\n\t\t\t// In that case we prefer to open the editor at the index but not sticky. This enables\n\t\t\t// to drag a sticky editor to an index that is not sticky to unstick it.\n\t\t\topenEditorOptions.sticky = false;\n\t\t}\n\n\t\tif (!openEditorOptions.active && !openEditorOptions.pinned && this.model.activeEditor && !this.model.isPinned(this.model.activeEditor)) {\n\t\t\t// Special case: we are to open an editor inactive and not pinned, but the current active\n\t\t\t// editor is also not pinned, which means it will get replaced with this one. As such,\n\t\t\t// the editor can only be active.\n\t\t\topenEditorOptions.active = true;\n\t\t}\n\n\t\tlet activateGroup = false;\n\t\tlet restoreGroup = false;\n\n\t\tif (options?.activation === EditorActivation.ACTIVATE) {\n\t\t\t// Respect option to force activate an editor group.\n\t\t\tactivateGroup = true;\n\t\t} else if (options?.activation === EditorActivation.RESTORE) {\n\t\t\t// Respect option to force restore an editor group.\n\t\t\trestoreGroup = true;\n\t\t} else if (options?.activation === EditorActivation.PRESERVE) {\n\t\t\t// Respect option to preserve active editor group.\n\t\t\tactivateGroup = false;\n\t\t\trestoreGroup = false;\n\t\t} else if (openEditorOptions.active) {\n\t\t\t// Finally, we only activate/restore an editor which is\n\t\t\t// opening as active editor.\n\t\t\t// If preserveFocus is enabled, we only restore but never\n\t\t\t// activate the group.\n\t\t\tactivateGroup = !options || !options.preserveFocus;\n\t\t\trestoreGroup = !activateGroup;\n\t\t}\n\n\t\t// Actually move the editor if a specific index is provided and we figure\n\t\t// out that the editor is already opened at a different index. This\n\t\t// ensures the right set of events are fired to the outside.\n\t\tif (typeof openEditorOptions.index === 'number') {\n\t\t\tconst indexOfEditor = this.model.indexOf(editor);\n\t\t\tif (indexOfEditor !== -1 && indexOfEditor !== openEditorOptions.index) {\n\t\t\t\tthis.doMoveEditorInsideGroup(editor, openEditorOptions);\n\t\t\t}\n\t\t}\n\n\t\t// Update model and make sure to continue to use the editor we get from\n\t\t// the model. It is possible that the editor was already opened and we\n\t\t// want to ensure that we use the existing instance in that case.\n\t\tconst { editor: openedEditor, isNew } = this.model.openEditor(editor, openEditorOptions);\n\n\t\t// Conditionally lock the group\n\t\tif (\n\t\t\tisNew &&\t\t\t\t\t\t// only if this editor was new for the group\n\t\t\tthis.count === 1 &&\t\t\t\t// only when this editor was the first editor in the group\n\t\t\tthis.accessor.groups.length > 1\t// only when there are more than one groups open\n\t\t) {\n\t\t\t// only when the editor identifier is configured as such\n\t\t\tif (openedEditor.editorId && this.accessor.partOptions.autoLockGroups?.has(openedEditor.editorId)) {\n\t\t\t\tthis.lock(true);\n\t\t\t}\n\t\t}\n\n\t\t// Show editor\n\t\tconst showEditorResult = this.doShowEditor(openedEditor, { active: !!openEditorOptions.active, isNew }, options, internalOptions);\n\n\t\t// Finally make sure the group is active or restored as instructed\n\t\tif (activateGroup) {\n\t\t\tthis.accessor.activateGroup(this);\n\t\t} else if (restoreGroup) {\n\t\t\tthis.accessor.restoreGroup(this);\n\t\t}\n\n\t\treturn showEditorResult;\n\t}\n\n\tprivate doShowEditor(editor: EditorInput, context: { active: boolean; isNew: boolean }, options?: IEditorOptions, internalOptions?: IInternalEditorOpenOptions): Promise<IEditorPane | undefined> {\n\n\t\t// Show in editor control if the active editor changed\n\t\tlet openEditorPromise: Promise<IEditorPane | undefined>;\n\t\tif (context.active) {\n\t\t\topenEditorPromise = (async () => {\n\t\t\t\tconst { pane, changed, cancelled, error } = await this.editorPane.openEditor(editor, options, { newInGroup: context.isNew });\n\n\t\t\t\t// Return early if the operation was cancelled by another operation\n\t\t\t\tif (cancelled) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\t// Editor change event\n\t\t\t\tif (changed) {\n\t\t\t\t\tthis._onDidActiveEditorChange.fire({ editor });\n\t\t\t\t}\n\n\t\t\t\t// Indicate error as an event but do not bubble them up\n\t\t\t\tif (error) {\n\t\t\t\t\tthis._onDidOpenEditorFail.fire(editor);\n\t\t\t\t}\n\n\t\t\t\t// Without an editor pane, recover by closing the active editor\n\t\t\t\t// (if the input is still the active one)\n\t\t\t\tif (!pane && this.activeEditor === editor) {\n\t\t\t\t\tconst focusNext = !options || !options.preserveFocus;\n\t\t\t\t\tthis.doCloseEditor(editor, focusNext, { fromError: true });\n\t\t\t\t}\n\n\t\t\t\treturn pane;\n\t\t\t})();\n\t\t} else {\n\t\t\topenEditorPromise = Promise.resolve(undefined); // inactive: return undefined as result to signal this\n\t\t}\n\n\t\t// Show in title control after editor control because some actions depend on it\n\t\t// but respect the internal options in case title control updates should skip.\n\t\tif (!internalOptions?.skipTitleUpdate) {\n\t\t\tthis.titleControl.openEditor(editor);\n\t\t}\n\n\t\treturn openEditorPromise;\n\t}\n\n\t//#endregion\n\n\t//#region openEditors()\n\n\tasync openEditors(editors: { editor: EditorInput; options?: IEditorOptions }[]): Promise<IEditorPane | undefined> {\n\n\t\t// Guard against invalid editors. Disposed editors\n\t\t// should never open because they emit no events\n\t\t// e.g. to indicate dirty changes.\n\t\tconst editorsToOpen = coalesce(editors).filter(({ editor }) => !editor.isDisposed());\n\n\t\t// Use the first editor as active editor\n\t\tconst firstEditor = firstOrDefault(editorsToOpen);\n\t\tif (!firstEditor) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst openEditorsOptions: IInternalEditorOpenOptions = {\n\t\t\t// Allow to match on a side-by-side editor when same\n\t\t\t// editor is opened on both sides. In that case we\n\t\t\t// do not want to open a new editor but reuse that one.\n\t\t\tsupportSideBySide: SideBySideEditor.BOTH\n\t\t};\n\n\t\tawait this.doOpenEditor(firstEditor.editor, firstEditor.options, openEditorsOptions);\n\n\t\t// Open the other ones inactive\n\t\tconst inactiveEditors = editorsToOpen.slice(1);\n\t\tconst startingIndex = this.getIndexOfEditor(firstEditor.editor) + 1;\n\t\tawait Promises.settled(inactiveEditors.map(({ editor, options }, index) => {\n\t\t\treturn this.doOpenEditor(editor, {\n\t\t\t\t...options,\n\t\t\t\tinactive: true,\n\t\t\t\tpinned: true,\n\t\t\t\tindex: startingIndex + index\n\t\t\t}, {\n\t\t\t\t...openEditorsOptions,\n\t\t\t\t// optimization: update the title control later\n\t\t\t\t// https://github.com/microsoft/vscode/issues/130634\n\t\t\t\tskipTitleUpdate: true\n\t\t\t});\n\t\t}));\n\n\t\t// Update the title control all at once with all editors\n\t\tthis.titleControl.openEditors(inactiveEditors.map(({ editor }) => editor));\n\n\t\t// Opening many editors at once can put any editor to be\n\t\t// the active one depending on options. As such, we simply\n\t\t// return the active editor pane after this operation.\n\t\treturn this.editorPane.activeEditorPane ?? undefined;\n\t}\n\n\t//#endregion\n\n\t//#region moveEditor()\n\n\tmoveEditors(editors: { editor: EditorInput; options?: IEditorOptions }[], target: EditorGroupView): void {\n\n\t\t// Optimization: knowing that we move many editors, we\n\t\t// delay the title update to a later point for this group\n\t\t// through a method that allows for bulk updates but only\n\t\t// when moving to a different group where many editors\n\t\t// are more likely to occur.\n\t\tconst internalOptions: IInternalMoveCopyOptions = {\n\t\t\tskipTitleUpdate: this !== target\n\t\t};\n\n\t\tfor (const { editor, options } of editors) {\n\t\t\tthis.moveEditor(editor, target, options, internalOptions);\n\t\t}\n\n\t\t// Update the title control all at once with all editors\n\t\t// in source and target if the title update was skipped\n\t\tif (internalOptions.skipTitleUpdate) {\n\t\t\tconst movedEditors = editors.map(({ editor }) => editor);\n\t\t\ttarget.titleControl.openEditors(movedEditors);\n\t\t\tthis.titleControl.closeEditors(movedEditors);\n\t\t}\n\t}\n\n\tmoveEditor(editor: EditorInput, target: EditorGroupView, options?: IEditorOptions, internalOptions?: IInternalEditorTitleControlOptions): void {\n\n\t\t// Move within same group\n\t\tif (this === target) {\n\t\t\tthis.doMoveEditorInsideGroup(editor, options);\n\t\t}\n\n\t\t// Move across groups\n\t\telse {\n\t\t\tthis.doMoveOrCopyEditorAcrossGroups(editor, target, options, { ...internalOptions, keepCopy: false });\n\t\t}\n\t}\n\n\tprivate doMoveEditorInsideGroup(candidate: EditorInput, options?: IEditorOpenOptions): void {\n\t\tconst moveToIndex = options ? options.index : undefined;\n\t\tif (typeof moveToIndex !== 'number') {\n\t\t\treturn; // do nothing if we move into same group without index\n\t\t}\n\n\t\tconst currentIndex = this.model.indexOf(candidate);\n\t\tif (currentIndex === -1 || currentIndex === moveToIndex) {\n\t\t\treturn; // do nothing if editor unknown in model or is already at the given index\n\t\t}\n\n\t\t// Update model and make sure to continue to use the editor we get from\n\t\t// the model. It is possible that the editor was already opened and we\n\t\t// want to ensure that we use the existing instance in that case.\n\t\tconst editor = this.model.getEditorByIndex(currentIndex);\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Update model\n\t\tthis.model.moveEditor(editor, moveToIndex);\n\t\tthis.model.pin(editor);\n\n\t\t// Forward to title control\n\t\tthis.titleControl.moveEditor(editor, currentIndex, moveToIndex);\n\t\tthis.titleControl.pinEditor(editor);\n\t}\n\n\tprivate doMoveOrCopyEditorAcrossGroups(editor: EditorInput, target: EditorGroupView, openOptions?: IEditorOpenOptions, internalOptions?: IInternalMoveCopyOptions): void {\n\t\tconst keepCopy = internalOptions?.keepCopy;\n\n\t\t// When moving/copying an editor, try to preserve as much view state as possible\n\t\t// by checking for the editor to be a text editor and creating the options accordingly\n\t\t// if so\n\t\tconst options = fillActiveEditorViewState(this, editor, {\n\t\t\t...openOptions,\n\t\t\tpinned: true, \t\t\t\t\t\t\t\t\t\t// always pin moved editor\n\t\t\tsticky: !keepCopy && this.model.isSticky(editor)\t// preserve sticky state only if editor is moved (https://github.com/microsoft/vscode/issues/99035)\n\t\t});\n\n\t\t// Indicate will move event\n\t\tif (!keepCopy) {\n\t\t\tthis._onWillMoveEditor.fire({\n\t\t\t\tgroupId: this.id,\n\t\t\t\teditor,\n\t\t\t\ttarget: target.id\n\t\t\t});\n\t\t}\n\n\t\t// A move to another group is an open first...\n\t\ttarget.doOpenEditor(keepCopy ? editor.copy() : editor, options, internalOptions);\n\n\t\t// ...and a close afterwards (unless we copy)\n\t\tif (!keepCopy) {\n\t\t\tthis.doCloseEditor(editor, false /* do not focus next one behind if any */, { ...internalOptions, context: EditorCloseContext.MOVE });\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region copyEditor()\n\n\tcopyEditors(editors: { editor: EditorInput; options?: IEditorOptions }[], target: EditorGroupView): void {\n\n\t\t// Optimization: knowing that we move many editors, we\n\t\t// delay the title update to a later point for this group\n\t\t// through a method that allows for bulk updates but only\n\t\t// when moving to a different group where many editors\n\t\t// are more likely to occur.\n\t\tconst internalOptions: IInternalMoveCopyOptions = {\n\t\t\tskipTitleUpdate: this !== target\n\t\t};\n\n\t\tfor (const { editor, options } of editors) {\n\t\t\tthis.copyEditor(editor, target, options, internalOptions);\n\t\t}\n\n\t\t// Update the title control all at once with all editors\n\t\t// in target if the title update was skipped\n\t\tif (internalOptions.skipTitleUpdate) {\n\t\t\tconst copiedEditors = editors.map(({ editor }) => editor);\n\t\t\ttarget.titleControl.openEditors(copiedEditors);\n\t\t}\n\t}\n\n\tcopyEditor(editor: EditorInput, target: EditorGroupView, options?: IEditorOptions, internalOptions?: IInternalEditorTitleControlOptions): void {\n\n\t\t// Move within same group because we do not support to show the same editor\n\t\t// multiple times in the same group\n\t\tif (this === target) {\n\t\t\tthis.doMoveEditorInsideGroup(editor, options);\n\t\t}\n\n\t\t// Copy across groups\n\t\telse {\n\t\t\tthis.doMoveOrCopyEditorAcrossGroups(editor, target, options, { ...internalOptions, keepCopy: true });\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region closeEditor()\n\n\tasync closeEditor(editor: EditorInput | undefined = this.activeEditor || undefined, options?: ICloseEditorOptions): Promise<boolean> {\n\t\treturn this.doCloseEditorWithConfirmationHandling(editor, options);\n\t}\n\n\tprivate async doCloseEditorWithConfirmationHandling(editor: EditorInput | undefined = this.activeEditor || undefined, options?: ICloseEditorOptions, internalOptions?: IInternalEditorCloseOptions): Promise<boolean> {\n\t\tif (!editor) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check for confirmation and veto\n\t\tconst veto = await this.handleCloseConfirmation([editor]);\n\t\tif (veto) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Do close\n\t\tthis.doCloseEditor(editor, options?.preserveFocus ? false : undefined, internalOptions);\n\n\t\treturn true;\n\t}\n\n\tprivate doCloseEditor(editor: EditorInput, focusNext = (this.accessor.activeGroup === this), internalOptions?: IInternalEditorCloseOptions): void {\n\n\t\t// Forward to title control unless skipped via internal options\n\t\tif (!internalOptions?.skipTitleUpdate) {\n\t\t\tthis.titleControl.beforeCloseEditor(editor);\n\t\t}\n\n\t\t// Closing the active editor of the group is a bit more work\n\t\tif (this.model.isActive(editor)) {\n\t\t\tthis.doCloseActiveEditor(focusNext, internalOptions);\n\t\t}\n\n\t\t// Closing inactive editor is just a model update\n\t\telse {\n\t\t\tthis.doCloseInactiveEditor(editor, internalOptions);\n\t\t}\n\n\t\t// Forward to title control unless skipped via internal options\n\t\tif (!internalOptions?.skipTitleUpdate) {\n\t\t\tthis.titleControl.closeEditor(editor);\n\t\t}\n\t}\n\n\tprivate doCloseActiveEditor(focusNext = (this.accessor.activeGroup === this), internalOptions?: IInternalEditorCloseOptions): void {\n\t\tconst editorToClose = this.activeEditor;\n\t\tconst restoreFocus = this.shouldRestoreFocus(this.element);\n\n\t\t// Optimization: if we are about to close the last editor in this group and settings\n\t\t// are configured to close the group since it will be empty, we first set the last\n\t\t// active group as empty before closing the editor. This reduces the amount of editor\n\t\t// change events that this operation emits and will reduce flicker. Without this\n\t\t// optimization, this group (if active) would first trigger a active editor change\n\t\t// event because it became empty, only to then trigger another one when the next\n\t\t// group gets active.\n\t\tconst closeEmptyGroup = this.accessor.partOptions.closeEmptyGroups;\n\t\tif (closeEmptyGroup && this.active && this.count === 1) {\n\t\t\tconst mostRecentlyActiveGroups = this.accessor.getGroups(GroupsOrder.MOST_RECENTLY_ACTIVE);\n\t\t\tconst nextActiveGroup = mostRecentlyActiveGroups[1]; // [0] will be the current one, so take [1]\n\t\t\tif (nextActiveGroup) {\n\t\t\t\tif (restoreFocus) {\n\t\t\t\t\tnextActiveGroup.focus();\n\t\t\t\t} else {\n\t\t\t\t\tthis.accessor.activateGroup(nextActiveGroup);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Update model\n\t\tif (editorToClose) {\n\t\t\tthis.model.closeEditor(editorToClose, internalOptions?.context);\n\t\t}\n\n\t\t// Open next active if there are more to show\n\t\tconst nextActiveEditor = this.model.activeEditor;\n\t\tif (nextActiveEditor) {\n\t\t\tconst preserveFocus = !focusNext;\n\n\t\t\tlet activation: EditorActivation | undefined = undefined;\n\t\t\tif (preserveFocus && this.accessor.activeGroup !== this) {\n\t\t\t\t// If we are opening the next editor in an inactive group\n\t\t\t\t// without focussing it, ensure we preserve the editor\n\t\t\t\t// group sizes in case that group is minimized.\n\t\t\t\t// https://github.com/microsoft/vscode/issues/117686\n\t\t\t\tactivation = EditorActivation.PRESERVE;\n\t\t\t}\n\n\t\t\tconst options: IEditorOptions = {\n\t\t\t\tpreserveFocus,\n\t\t\t\tactivation,\n\t\t\t\t// When closing an editor due to an error we can end up in a loop where we continue closing\n\t\t\t\t// editors that fail to open (e.g. when the file no longer exists). We do not want to show\n\t\t\t\t// repeated errors in this case to the user. As such, if we open the next editor and we are\n\t\t\t\t// in a scope of a previous editor failing, we silence the input errors until the editor is\n\t\t\t\t// opened by setting ignoreError: true.\n\t\t\t\tignoreError: internalOptions?.fromError\n\t\t\t};\n\n\t\t\tthis.doOpenEditor(nextActiveEditor, options);\n\t\t}\n\n\t\t// Otherwise we are empty, so clear from editor control and send event\n\t\telse {\n\n\t\t\t// Forward to editor pane\n\t\t\tif (editorToClose) {\n\t\t\t\tthis.editorPane.closeEditor(editorToClose);\n\t\t\t}\n\n\t\t\t// Restore focus to group container as needed unless group gets closed\n\t\t\tif (restoreFocus && !closeEmptyGroup) {\n\t\t\t\tthis.focus();\n\t\t\t}\n\n\t\t\t// Events\n\t\t\tthis._onDidActiveEditorChange.fire({ editor: undefined });\n\n\t\t\t// Remove empty group if we should\n\t\t\tif (closeEmptyGroup) {\n\t\t\t\tthis.accessor.removeGroup(this);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate shouldRestoreFocus(target: Element): boolean {\n\t\tconst activeElement = document.activeElement;\n\n\t\tif (activeElement === document.body) {\n\t\t\treturn true; // always restore focus if nothing is focused currently\n\t\t}\n\n\t\t// otherwise check for the active element being an ancestor of the target\n\t\treturn isAncestor(activeElement, target);\n\t}\n\n\tprivate doCloseInactiveEditor(editor: EditorInput, internalOptions?: IInternalEditorCloseOptions): void {\n\n\t\t// Update model\n\t\tthis.model.closeEditor(editor, internalOptions?.context);\n\t}\n\n\tprivate async handleCloseConfirmation(editors: EditorInput[]): Promise<boolean /* veto */> {\n\t\tif (!editors.length) {\n\t\t\treturn false; // no veto\n\t\t}\n\n\t\tconst editor = editors.shift()!;\n\n\t\t// To prevent multiple confirmation dialogs from showing up one after the other\n\t\t// we check if a pending confirmation is currently showing and if so, join that\n\t\tlet handleCloseConfirmationPromise = this.mapEditorToPendingConfirmation.get(editor);\n\t\tif (!handleCloseConfirmationPromise) {\n\t\t\thandleCloseConfirmationPromise = this.doHandleCloseConfirmation(editor);\n\t\t\tthis.mapEditorToPendingConfirmation.set(editor, handleCloseConfirmationPromise);\n\t\t}\n\n\t\tlet veto: boolean;\n\t\ttry {\n\t\t\tveto = await handleCloseConfirmationPromise;\n\t\t} finally {\n\t\t\tthis.mapEditorToPendingConfirmation.delete(editor);\n\t\t}\n\n\t\t// Return for the first veto we got\n\t\tif (veto) {\n\t\t\treturn veto;\n\t\t}\n\n\t\t// Otherwise continue with the remainders\n\t\treturn this.handleCloseConfirmation(editors);\n\t}\n\n\tprivate async doHandleCloseConfirmation(editor: EditorInput, options?: { skipAutoSave: boolean }): Promise<boolean /* veto */> {\n\t\tif (!this.shouldConfirmClose(editor)) {\n\t\t\treturn false; // no veto\n\t\t}\n\n\t\tif (editor instanceof SideBySideEditorInput && this.model.contains(editor.primary)) {\n\t\t\treturn false; // primary-side of editor is still opened somewhere else\n\t\t}\n\n\t\t// Note: we explicitly decide to ask for confirm if closing a normal editor even\n\t\t// if it is opened in a side-by-side editor in the group. This decision is made\n\t\t// because it may be less obvious that one side of a side by side editor is dirty\n\t\t// and can still be changed.\n\t\t// The only exception is when the same editor is opened on both sides of a side\n\t\t// by side editor (https://github.com/microsoft/vscode/issues/138442)\n\n\t\tif (this.accessor.groups.some(groupView => {\n\t\t\tif (groupView === this) {\n\t\t\t\treturn false; // skip (we already handled our group above)\n\t\t\t}\n\n\t\t\tconst otherGroup = groupView;\n\t\t\tif (otherGroup.contains(editor, { supportSideBySide: SideBySideEditor.BOTH })) {\n\t\t\t\treturn true; // exact editor still opened (either single, or split-in-group)\n\t\t\t}\n\n\t\t\tif (editor instanceof SideBySideEditorInput && otherGroup.contains(editor.primary)) {\n\t\t\t\treturn true; // primary side of side by side editor still opened\n\t\t\t}\n\n\t\t\treturn false;\n\t\t})) {\n\t\t\treturn false; // editor is still editable somewhere else\n\t\t}\n\n\t\t// In some cases trigger save before opening the dialog depending\n\t\t// on auto-save configuration.\n\t\t// However, make sure to respect `skipAutoSave` option in case the automated\n\t\t// save fails which would result in the editor never closing.\n\t\t// Also, we only do this if no custom confirmation handling is implemented.\n\t\tlet confirmation = ConfirmResult.CANCEL;\n\t\tlet saveReason = SaveReason.EXPLICIT;\n\t\tlet autoSave = false;\n\t\tif (!editor.hasCapability(EditorInputCapabilities.Untitled) && !options?.skipAutoSave && !editor.closeHandler) {\n\n\t\t\t// Auto-save on focus change: save, because a dialog would steal focus\n\t\t\t// (see https://github.com/microsoft/vscode/issues/108752)\n\t\t\tif (this.filesConfigurationService.getAutoSaveMode() === AutoSaveMode.ON_FOCUS_CHANGE) {\n\t\t\t\tautoSave = true;\n\t\t\t\tconfirmation = ConfirmResult.SAVE;\n\t\t\t\tsaveReason = SaveReason.FOCUS_CHANGE;\n\t\t\t}\n\n\t\t\t// Auto-save on window change: save, because on Windows and Linux, a\n\t\t\t// native dialog triggers the window focus change\n\t\t\t// (see https://github.com/microsoft/vscode/issues/134250)\n\t\t\telse if ((isNative && (isWindows || isLinux)) && this.filesConfigurationService.getAutoSaveMode() === AutoSaveMode.ON_WINDOW_CHANGE) {\n\t\t\t\tautoSave = true;\n\t\t\t\tconfirmation = ConfirmResult.SAVE;\n\t\t\t\tsaveReason = SaveReason.WINDOW_CHANGE;\n\t\t\t}\n\t\t}\n\n\t\t// No auto-save on focus change or custom confirmation handler: ask user\n\t\tif (!autoSave) {\n\n\t\t\t// Switch to editor that we want to handle for confirmation unless showing already\n\t\t\tif (!this.activeEditor || !this.activeEditor.matches(editor)) {\n\t\t\t\tawait this.doOpenEditor(editor);\n\t\t\t}\n\n\t\t\t// Let editor handle confirmation if implemented\n\t\t\tif (typeof editor.closeHandler?.confirm === 'function') {\n\t\t\t\tconfirmation = await editor.closeHandler.confirm([{ editor, groupId: this.id }]);\n\t\t\t}\n\n\t\t\t// Show a file specific confirmation\n\t\t\telse {\n\t\t\t\tlet name: string;\n\t\t\t\tif (editor instanceof SideBySideEditorInput) {\n\t\t\t\t\tname = editor.primary.getName(); // prefer shorter names by using primary's name in this case\n\t\t\t\t} else {\n\t\t\t\t\tname = editor.getName();\n\t\t\t\t}\n\n\t\t\t\tconfirmation = await this.fileDialogService.showSaveConfirm([name]);\n\t\t\t}\n\t\t}\n\n\t\t// It could be that the editor's choice of confirmation has changed\n\t\t// given the check for confirmation is long running, so we check\n\t\t// again to see if anything needs to happen before closing for good.\n\t\t// This can happen for example if `autoSave: onFocusChange` is configured\n\t\t// so that the save happens when the dialog opens.\n\t\t// However, we only do this unless a custom confirm handler is installed\n\t\t// that may not be fit to be asked a second time right after.\n\t\tif (!editor.closeHandler && !this.shouldConfirmClose(editor)) {\n\t\t\treturn confirmation === ConfirmResult.CANCEL ? true : false;\n\t\t}\n\n\t\t// Otherwise, handle accordingly\n\t\tswitch (confirmation) {\n\t\t\tcase ConfirmResult.SAVE: {\n\t\t\t\tconst result = await editor.save(this.id, { reason: saveReason });\n\t\t\t\tif (!result && autoSave) {\n\t\t\t\t\t// Save failed and we need to signal this back to the user, so\n\t\t\t\t\t// we handle the dirty editor again but this time ensuring to\n\t\t\t\t\t// show the confirm dialog\n\t\t\t\t\t// (see https://github.com/microsoft/vscode/issues/108752)\n\t\t\t\t\treturn this.doHandleCloseConfirmation(editor, { skipAutoSave: true });\n\t\t\t\t}\n\n\t\t\t\treturn editor.isDirty(); // veto if still dirty\n\t\t\t}\n\t\t\tcase ConfirmResult.DONT_SAVE:\n\t\t\t\ttry {\n\n\t\t\t\t\t// first try a normal revert where the contents of the editor are restored\n\t\t\t\t\tawait editor.revert(this.id);\n\n\t\t\t\t\treturn editor.isDirty(); // veto if still dirty\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.error(error);\n\n\t\t\t\t\t// if that fails, since we are about to close the editor, we accept that\n\t\t\t\t\t// the editor cannot be reverted and instead do a soft revert that just\n\t\t\t\t\t// enables us to close the editor. With this, a user can always close a\n\t\t\t\t\t// dirty editor even when reverting fails.\n\n\t\t\t\t\tawait editor.revert(this.id, { soft: true });\n\n\t\t\t\t\treturn editor.isDirty(); // veto if still dirty\n\t\t\t\t}\n\t\t\tcase ConfirmResult.CANCEL:\n\t\t\t\treturn true; // veto\n\t\t}\n\t}\n\n\tprivate shouldConfirmClose(editor: EditorInput): boolean {\n\t\tif (editor.closeHandler) {\n\t\t\treturn editor.closeHandler.showConfirm(); // custom handling of confirmation on close\n\t\t}\n\n\t\treturn editor.isDirty() && !editor.isSaving(); // editor must be dirty and not saving\n\t}\n\n\t//#endregion\n\n\t//#region closeEditors()\n\n\tasync closeEditors(args: EditorInput[] | ICloseEditorsFilter, options?: ICloseEditorOptions): Promise<boolean> {\n\t\tif (this.isEmpty) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst editors = this.doGetEditorsToClose(args);\n\n\t\t// Check for confirmation and veto\n\t\tconst veto = await this.handleCloseConfirmation(editors.slice(0));\n\t\tif (veto) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Do close\n\t\tthis.doCloseEditors(editors, options);\n\n\t\treturn true;\n\t}\n\n\tprivate doGetEditorsToClose(args: EditorInput[] | ICloseEditorsFilter): EditorInput[] {\n\t\tif (Array.isArray(args)) {\n\t\t\treturn args;\n\t\t}\n\n\t\tconst filter = args;\n\t\tconst hasDirection = typeof filter.direction === 'number';\n\n\t\tlet editorsToClose = this.model.getEditors(hasDirection ? EditorsOrder.SEQUENTIAL : EditorsOrder.MOST_RECENTLY_ACTIVE, filter); // in MRU order only if direction is not specified\n\n\t\t// Filter: saved or saving only\n\t\tif (filter.savedOnly) {\n\t\t\teditorsToClose = editorsToClose.filter(editor => !editor.isDirty() || editor.isSaving());\n\t\t}\n\n\t\t// Filter: direction (left / right)\n\t\telse if (hasDirection && filter.except) {\n\t\t\teditorsToClose = (filter.direction === CloseDirection.LEFT) ?\n\t\t\t\teditorsToClose.slice(0, this.model.indexOf(filter.except, editorsToClose)) :\n\t\t\t\teditorsToClose.slice(this.model.indexOf(filter.except, editorsToClose) + 1);\n\t\t}\n\n\t\t// Filter: except\n\t\telse if (filter.except) {\n\t\t\teditorsToClose = editorsToClose.filter(editor => filter.except && !editor.matches(filter.except));\n\t\t}\n\n\t\treturn editorsToClose;\n\t}\n\n\tprivate doCloseEditors(editors: EditorInput[], options?: ICloseEditorOptions): void {\n\n\t\t// Close all inactive editors first\n\t\tlet closeActiveEditor = false;\n\t\tfor (const editor of editors) {\n\t\t\tif (!this.isActive(editor)) {\n\t\t\t\tthis.doCloseInactiveEditor(editor);\n\t\t\t} else {\n\t\t\t\tcloseActiveEditor = true;\n\t\t\t}\n\t\t}\n\n\t\t// Close active editor last if contained in editors list to close\n\t\tif (closeActiveEditor) {\n\t\t\tthis.doCloseActiveEditor(options?.preserveFocus ? false : undefined);\n\t\t}\n\n\t\t// Forward to title control\n\t\tif (editors.length) {\n\t\t\tthis.titleControl.closeEditors(editors);\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region closeAllEditors()\n\n\tasync closeAllEditors(options?: ICloseAllEditorsOptions): Promise<boolean> {\n\t\tif (this.isEmpty) {\n\n\t\t\t// If the group is empty and the request is to close all editors, we still close\n\t\t\t// the editor group is the related setting to close empty groups is enabled for\n\t\t\t// a convenient way of removing empty editor groups for the user.\n\t\t\tif (this.accessor.partOptions.closeEmptyGroups) {\n\t\t\t\tthis.accessor.removeGroup(this);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Check for confirmation and veto\n\t\tconst veto = await this.handleCloseConfirmation(this.model.getEditors(EditorsOrder.MOST_RECENTLY_ACTIVE, options));\n\t\tif (veto) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Do close\n\t\tthis.doCloseAllEditors(options);\n\n\t\treturn true;\n\t}\n\n\tprivate doCloseAllEditors(options?: ICloseAllEditorsOptions): void {\n\n\t\t// Close all inactive editors first\n\t\tconst editorsToClose: EditorInput[] = [];\n\t\tfor (const editor of this.model.getEditors(EditorsOrder.SEQUENTIAL, options)) {\n\t\t\tif (!this.isActive(editor)) {\n\t\t\t\tthis.doCloseInactiveEditor(editor);\n\t\t\t}\n\n\t\t\teditorsToClose.push(editor);\n\t\t}\n\n\t\t// Close active editor last (unless we skip it, e.g. because it is sticky)\n\t\tif (this.activeEditor && editorsToClose.includes(this.activeEditor)) {\n\t\t\tthis.doCloseActiveEditor();\n\t\t}\n\n\t\t// Forward to title control\n\t\tif (editorsToClose.length) {\n\t\t\tthis.titleControl.closeEditors(editorsToClose);\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region replaceEditors()\n\n\tasync replaceEditors(editors: EditorReplacement[]): Promise<void> {\n\n\t\t// Extract active vs. inactive replacements\n\t\tlet activeReplacement: EditorReplacement | undefined;\n\t\tconst inactiveReplacements: EditorReplacement[] = [];\n\t\tfor (let { editor, replacement, forceReplaceDirty, options } of editors) {\n\t\t\tconst index = this.getIndexOfEditor(editor);\n\t\t\tif (index >= 0) {\n\t\t\t\tconst isActiveEditor = this.isActive(editor);\n\n\t\t\t\t// make sure we respect the index of the editor to replace\n\t\t\t\tif (options) {\n\t\t\t\t\toptions.index = index;\n\t\t\t\t} else {\n\t\t\t\t\toptions = { index };\n\t\t\t\t}\n\n\t\t\t\toptions.inactive = !isActiveEditor;\n\t\t\t\toptions.pinned = options.pinned ?? true; // unless specified, prefer to pin upon replace\n\n\t\t\t\tconst editorToReplace = { editor, replacement, forceReplaceDirty, options };\n\t\t\t\tif (isActiveEditor) {\n\t\t\t\t\tactiveReplacement = editorToReplace;\n\t\t\t\t} else {\n\t\t\t\t\tinactiveReplacements.push(editorToReplace);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Handle inactive first\n\t\tfor (const { editor, replacement, forceReplaceDirty, options } of inactiveReplacements) {\n\n\t\t\t// Open inactive editor\n\t\t\tawait this.doOpenEditor(replacement, options);\n\n\t\t\t// Close replaced inactive editor unless they match\n\t\t\tif (!editor.matches(replacement)) {\n\t\t\t\tlet closed = false;\n\t\t\t\tif (forceReplaceDirty) {\n\t\t\t\t\tthis.doCloseEditor(editor, false, { context: EditorCloseContext.REPLACE });\n\t\t\t\t\tclosed = true;\n\t\t\t\t} else {\n\t\t\t\t\tclosed = await this.doCloseEditorWithConfirmationHandling(editor, { preserveFocus: true }, { context: EditorCloseContext.REPLACE });\n\t\t\t\t}\n\n\t\t\t\tif (!closed) {\n\t\t\t\t\treturn; // canceled\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Handle active last\n\t\tif (activeReplacement) {\n\n\t\t\t// Open replacement as active editor\n\t\t\tconst openEditorResult = this.doOpenEditor(activeReplacement.replacement, activeReplacement.options);\n\n\t\t\t// Close replaced active editor unless they match\n\t\t\tif (!activeReplacement.editor.matches(activeReplacement.replacement)) {\n\t\t\t\tif (activeReplacement.forceReplaceDirty) {\n\t\t\t\t\tthis.doCloseEditor(activeReplacement.editor, false, { context: EditorCloseContext.REPLACE });\n\t\t\t\t} else {\n\t\t\t\t\tawait this.doCloseEditorWithConfirmationHandling(activeReplacement.editor, { preserveFocus: true }, { context: EditorCloseContext.REPLACE });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait openEditorResult;\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region Locking\n\n\tget isLocked(): boolean {\n\t\tif (this.accessor.groups.length === 1) {\n\t\t\t// Special case: if only 1 group is opened, never report it as locked\n\t\t\t// to ensure editors can always open in the \"default\" editor group\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.model.isLocked;\n\t}\n\n\tlock(locked: boolean): void {\n\t\tif (this.accessor.groups.length === 1) {\n\t\t\t// Special case: if only 1 group is opened, never allow to lock\n\t\t\t// to ensure editors can always open in the \"default\" editor group\n\t\t\tlocked = false;\n\t\t}\n\n\t\tthis.model.lock(locked);\n\t}\n\n\t//#endregion\n\n\t//#region Themable\n\n\toverride updateStyles(): void {\n\t\tconst isEmpty = this.isEmpty;\n\n\t\t// Container\n\t\tif (isEmpty) {\n\t\t\tthis.element.style.backgroundColor = this.getColor(EDITOR_GROUP_EMPTY_BACKGROUND) || '';\n\t\t} else {\n\t\t\tthis.element.style.backgroundColor = '';\n\t\t}\n\n\t\t// Title control\n\t\tconst borderColor = this.getColor(EDITOR_GROUP_HEADER_BORDER) || this.getColor(contrastBorder);\n\t\tif (!isEmpty && borderColor) {\n\t\t\tthis.titleContainer.classList.add('title-border-bottom');\n\t\t\tthis.titleContainer.style.setProperty('--title-border-bottom-color', borderColor);\n\t\t} else {\n\t\t\tthis.titleContainer.classList.remove('title-border-bottom');\n\t\t\tthis.titleContainer.style.removeProperty('--title-border-bottom-color');\n\t\t}\n\n\t\tconst { showTabs } = this.accessor.partOptions;\n\t\tthis.titleContainer.style.backgroundColor = this.getColor(showTabs ? EDITOR_GROUP_HEADER_TABS_BACKGROUND : EDITOR_GROUP_HEADER_NO_TABS_BACKGROUND) || '';\n\n\t\t// Editor container\n\t\tthis.editorContainer.style.backgroundColor = this.getColor(editorBackground) || '';\n\t}\n\n\t//#endregion\n\n\t//#region ISerializableView\n\n\treadonly element: HTMLElement = document.createElement('div');\n\n\tget minimumWidth(): number { return this.editorPane.minimumWidth; }\n\tget minimumHeight(): number { return this.editorPane.minimumHeight; }\n\tget maximumWidth(): number { return this.editorPane.maximumWidth; }\n\tget maximumHeight(): number { return this.editorPane.maximumHeight; }\n\n\tget proportionalLayout(): boolean {\n\t\tif (!this.lastLayout) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn !(this.lastLayout.width === this.minimumWidth || this.lastLayout.height === this.minimumHeight);\n\t}\n\n\tprivate _onDidChange = this._register(new Relay<{ width: number; height: number } | undefined>());\n\treadonly onDidChange = this._onDidChange.event;\n\n\tlayout(width: number, height: number, top: number, left: number): void {\n\t\tthis.lastLayout = { width, height, top, left };\n\t\tthis.element.classList.toggle('max-height-478px', height <= 478);\n\n\t\t// Layout the title control first to receive the size it occupies\n\t\tconst titleControlSize = this.titleControl.layout({\n\t\t\tcontainer: new Dimension(width, height),\n\t\t\tavailable: new Dimension(width, height - this.editorPane.minimumHeight)\n\t\t});\n\n\t\t// Pass the container width and remaining height to the editor layout\n\t\tconst editorHeight = Math.max(0, height - titleControlSize.height);\n\t\tthis.editorContainer.style.height = `${editorHeight}px`;\n\t\tthis.editorPane.layout({ width, height: editorHeight, top: top + titleControlSize.height, left });\n\t}\n\n\trelayout(): void {\n\t\tif (this.lastLayout) {\n\t\t\tconst { width, height, top, left } = this.lastLayout;\n\t\t\tthis.layout(width, height, top, left);\n\t\t}\n\t}\n\n\tsetBoundarySashes(sashes: IBoundarySashes): void {\n\t\tthis.editorPane.setBoundarySashes(sashes);\n\t}\n\n\ttoJSON(): ISerializedEditorGroupModel {\n\t\treturn this.model.serialize();\n\t}\n\n\t//#endregion\n\n\toverride dispose(): void {\n\t\tthis._disposed = true;\n\n\t\tthis._onWillDispose.fire();\n\n\t\tsuper.dispose();\n\t}\n}\n\nexport interface EditorReplacement extends IEditorReplacement {\n\treadonly editor: EditorInput;\n\treadonly replacement: EditorInput;\n\treadonly options?: IEditorOptions;\n}\n"]}