{"version":3,"sources":["vs/workbench/browser/parts/editor/binaryEditor.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAiBhG;;OAEG;IACI,IAAe,IAAI,GAAnB,MAAe,IAAyB,SAAQ,wBAAI;QAU1D,YACC,EAAU,EACO,CAAyB,EAC1C,gBAAqB,EACrB,YAAiB,EACA,cAAmB;YAEpC,KAAK,CAAC,EAAE,EAAE,gBAAgB,EAAE,YAAY,EAAE,cAAc,CAAC,CAAC;YALzC,MAAC,GAAD,CAAC,CAAwB;YAV1B,MAAC,GAAsB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAY,CAAC,CAAC;YACnE,wBAAmB,GAAG,IAAI,CAAC,CAAC,CAAoB,KAAK,CAAC;YAE9C,MAAC,GAAmB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAY,CAAC,CAAC;YAChE,qBAAgB,GAAG,IAAI,CAAC,CAAC,CAAiB,KAAK,CAAC;QAYzD,CAAC;QAEQ,QAAQ;YAChB,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,IAAA,cAAQ,EAAC,CAAc,EAAE,IAAe,CAAC,CAAC;QACtF,CAAC;QAES,KAAK,CAAC,CAAC,CAAW,KAAU,EAAU,OAAuB;YACtE,MAAM,KAAK,GAAG,MAAM,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YAE3C,wBAAwB;YACxB,IAAI,CAAC,CAAC,KAAK,YAAY,wBAAI,CAAc,EAAE;gBAC1C,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;aACjD;YAED,kBAAkB;YAClB,MAAM,IAAI,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC;YAC7B,IAAI,CAAC,EAAE,CAAoB,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,WAAG,CAAM,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YAEtF,OAAO;gBACN,IAAI,EAAE,YAAY;gBAClB,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAa,EAAE,IAAgH,CAAC;gBAChJ,OAAO,EAAE;oBACR;wBACC,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAY,EAAE,IAAa,CAAC;wBAC5C,GAAG,EAAE,KAAK,IAAI,EAAE;4BAEf,gBAAgB;4BAChB,MAAM,IAAI,CAAC,CAAC,CAAS,YAAY,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;4BAElD,sEAAsE;4BACtE,IAAI,CAAC,CAAC,CAAiB,IAAI,EAAE,CAAC;wBAC/B,CAAC;qBACD;iBACD;aACD,CAAC;QACH,CAAC;QAEO,EAAE,CAAoB,IAAwB;YACrD,IAAI,CAAC,CAAC,GAAU,IAAI,CAAC;YAErB,IAAI,CAAC,CAAC,CAAoB,IAAI,EAAE,CAAC;QAClC,CAAC;QAED,WAAW;YACV,OAAO,IAAI,CAAC,CAAC,CAAQ;QACtB,CAAC;KACD,CAAA;IAhEqB,oBAAI;mBAAJ,IAAI;QAevB,WAAA,aAAG,CAAA;OAfgB,IAAI,CAgEzB","file":"binaryEditor.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { Emitter } from 'vs/base/common/event';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { BinaryEditorModel } from 'vs/workbench/common/editor/binaryEditorModel';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { ByteSize } from 'vs/platform/files/common/files';\nimport { IEditorOptions } from 'vs/platform/editor/common/editor';\nimport { EditorPlaceholder, IEditorPlaceholderContents } from 'vs/workbench/browser/parts/editor/editorPlaceholder';\n\nexport interface IOpenCallbacks {\n\topenInternal: (input: EditorInput, options: IEditorOptions | undefined) => Promise<void>;\n}\n\n/*\n * This class is only intended to be subclassed and not instantiated.\n */\nexport abstract class BaseBinaryResourceEditor extends EditorPlaceholder {\n\n\tprivate readonly _onDidChangeMetadata = this._register(new Emitter<void>());\n\treadonly onDidChangeMetadata = this._onDidChangeMetadata.event;\n\n\tprivate readonly _onDidOpenInPlace = this._register(new Emitter<void>());\n\treadonly onDidOpenInPlace = this._onDidOpenInPlace.event;\n\n\tprivate metadata: string | undefined;\n\n\tconstructor(\n\t\tid: string,\n\t\tprivate readonly callbacks: IOpenCallbacks,\n\t\ttelemetryService: ITelemetryService,\n\t\tthemeService: IThemeService,\n\t\t@IStorageService storageService: IStorageService\n\t) {\n\t\tsuper(id, telemetryService, themeService, storageService);\n\t}\n\n\toverride getTitle(): string {\n\t\treturn this.input ? this.input.getName() : localize('binaryEditor', \"Binary Viewer\");\n\t}\n\n\tprotected async getContents(input: EditorInput, options: IEditorOptions): Promise<IEditorPlaceholderContents> {\n\t\tconst model = await input.resolve(options);\n\n\t\t// Assert Model instance\n\t\tif (!(model instanceof BinaryEditorModel)) {\n\t\t\tthrow new Error('Unable to open file as binary');\n\t\t}\n\n\t\t// Update metadata\n\t\tconst size = model.getSize();\n\t\tthis.handleMetadataChanged(typeof size === 'number' ? ByteSize.formatSize(size) : '');\n\n\t\treturn {\n\t\t\ticon: '$(warning)',\n\t\t\tlabel: localize('binaryError', \"The file is not displayed in the text editor because it is either binary or uses an unsupported text encoding.\"),\n\t\t\tactions: [\n\t\t\t\t{\n\t\t\t\t\tlabel: localize('openAnyway', \"Open Anyway\"),\n\t\t\t\t\trun: async () => {\n\n\t\t\t\t\t\t// Open in place\n\t\t\t\t\t\tawait this.callbacks.openInternal(input, options);\n\n\t\t\t\t\t\t// Signal to listeners that the binary editor has been opened in-place\n\t\t\t\t\t\tthis._onDidOpenInPlace.fire();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\t}\n\n\tprivate handleMetadataChanged(meta: string | undefined): void {\n\t\tthis.metadata = meta;\n\n\t\tthis._onDidChangeMetadata.fire();\n\t}\n\n\tgetMetadata(): string | undefined {\n\t\treturn this.metadata;\n\t}\n}\n"]}