{"version":3,"sources":["vs/workbench/browser/parts/editor/textEditor.ts"],"names":[],"mappings":"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","file":"textEditor.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { URI } from 'vs/base/common/uri';\nimport { distinct, deepClone } from 'vs/base/common/objects';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { isObject, assertIsDefined } from 'vs/base/common/types';\nimport { MutableDisposable } from 'vs/base/common/lifecycle';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { IEditorOpenContext, IEditorPaneSelection, EditorPaneSelectionCompareResult, EditorPaneSelectionChangeReason, IEditorPaneWithSelection, IEditorPaneSelectionChangeEvent } from 'vs/workbench/common/editor';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { computeEditorAriaLabel } from 'vs/workbench/browser/editor';\nimport { AbstractEditorWithViewState } from 'vs/workbench/browser/parts/editor/editorWithViewState';\nimport { IEditorViewState } from 'vs/editor/common/editorCommon';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { ITextResourceConfigurationChangeEvent, ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfiguration';\nimport { IEditorOptions as ICodeEditorOptions } from 'vs/editor/common/config/editorOptions';\nimport { IEditorGroupsService, IEditorGroup } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IEditorOptions, ITextEditorOptions, TextEditorSelectionRevealType, TextEditorSelectionSource } from 'vs/platform/editor/common/editor';\nimport { ICursorPositionChangedEvent } from 'vs/editor/common/cursorEvents';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\n\nexport interface IEditorConfiguration {\n\teditor: object;\n\tdiffEditor: object;\n\taccessibility?: {\n\t\tverbosity?: {\n\t\t\tdiffEditor?: boolean;\n\t\t};\n\t};\n}\n\n/**\n * The base class of editors that leverage any kind of text editor for the editing experience.\n */\nexport abstract class AbstractTextEditor<T extends IEditorViewState> extends AbstractEditorWithViewState<T> implements IEditorPaneWithSelection {\n\n\tprivate static readonly VIEW_STATE_PREFERENCE_KEY = 'textEditorViewState';\n\n\tprotected readonly _onDidChangeSelection = this._register(new Emitter<IEditorPaneSelectionChangeEvent>());\n\treadonly onDidChangeSelection = this._onDidChangeSelection.event;\n\n\tprivate editorContainer: HTMLElement | undefined;\n\n\tprivate hasPendingConfigurationChange: boolean | undefined;\n\tprivate lastAppliedEditorOptions?: ICodeEditorOptions;\n\n\tprivate readonly inputListener = this._register(new MutableDisposable());\n\n\tconstructor(\n\t\tid: string,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@IFileService protected readonly fileService: IFileService\n\t) {\n\t\tsuper(id, AbstractTextEditor.VIEW_STATE_PREFERENCE_KEY, telemetryService, instantiationService, storageService, textResourceConfigurationService, themeService, editorService, editorGroupService);\n\n\t\t// Listen to configuration changes\n\t\tthis._register(this.textResourceConfigurationService.onDidChangeConfiguration(e => this.handleConfigurationChangeEvent(e)));\n\n\t\t// ARIA: if a group is added or removed, update the editor's ARIA\n\t\t// label so that it appears in the label for when there are > 1 groups\n\n\t\tthis._register(Event.any(this.editorGroupService.onDidAddGroup, this.editorGroupService.onDidRemoveGroup)(() => {\n\t\t\tconst ariaLabel = this.computeAriaLabel();\n\n\t\t\tthis.editorContainer?.setAttribute('aria-label', ariaLabel);\n\t\t\tthis.updateEditorControlOptions({ ariaLabel });\n\t\t}));\n\n\t\t// Listen to file system provider changes\n\t\tthis._register(this.fileService.onDidChangeFileSystemProviderCapabilities(e => this.onDidChangeFileSystemProvider(e.scheme)));\n\t\tthis._register(this.fileService.onDidChangeFileSystemProviderRegistrations(e => this.onDidChangeFileSystemProvider(e.scheme)));\n\t}\n\n\tprivate handleConfigurationChangeEvent(e: ITextResourceConfigurationChangeEvent): void {\n\t\tconst resource = this.getActiveResource();\n\t\tif (!this.shouldHandleConfigurationChangeEvent(e, resource)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.isVisible()) {\n\t\t\tthis.updateEditorConfiguration(resource);\n\t\t} else {\n\t\t\tthis.hasPendingConfigurationChange = true;\n\t\t}\n\t}\n\n\tprotected shouldHandleConfigurationChangeEvent(e: ITextResourceConfigurationChangeEvent, resource: URI | undefined): boolean {\n\t\treturn e.affectsConfiguration(resource, 'editor');\n\t}\n\n\tprivate consumePendingConfigurationChangeEvent(): void {\n\t\tif (this.hasPendingConfigurationChange) {\n\t\t\tthis.updateEditorConfiguration();\n\t\t\tthis.hasPendingConfigurationChange = false;\n\t\t}\n\t}\n\n\tprotected computeConfiguration(configuration: IEditorConfiguration): ICodeEditorOptions {\n\n\t\t// Specific editor options always overwrite user configuration\n\t\tconst editorConfiguration: ICodeEditorOptions = isObject(configuration.editor) ? deepClone(configuration.editor) : Object.create(null);\n\t\tObject.assign(editorConfiguration, this.getConfigurationOverrides());\n\n\t\t// ARIA label\n\t\teditorConfiguration.ariaLabel = this.computeAriaLabel();\n\n\t\treturn editorConfiguration;\n\t}\n\n\tprivate computeAriaLabel(): string {\n\t\treturn this._input ? computeEditorAriaLabel(this._input, undefined, this.group, this.editorGroupService.count) : localize('editor', \"Editor\");\n\t}\n\n\tprivate onDidChangeFileSystemProvider(scheme: string): void {\n\t\tif (!this.input) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.getActiveResource()?.scheme === scheme) {\n\t\t\tthis.updateReadonly(this.input);\n\t\t}\n\t}\n\n\tprivate onDidChangeInputCapabilities(input: EditorInput): void {\n\t\tif (this.input === input) {\n\t\t\tthis.updateReadonly(input);\n\t\t}\n\t}\n\n\tprotected updateReadonly(input: EditorInput): void {\n\t\tthis.updateEditorControlOptions({ ...this.getReadonlyConfiguration(input.isReadonly()) });\n\t}\n\n\tprotected getReadonlyConfiguration(isReadonly: boolean | IMarkdownString | undefined): { readOnly: boolean; readOnlyMessage: IMarkdownString | undefined } {\n\t\treturn {\n\t\t\treadOnly: !!isReadonly,\n\t\t\treadOnlyMessage: typeof isReadonly !== 'boolean' ? isReadonly : undefined\n\t\t};\n\t}\n\n\tprotected getConfigurationOverrides(): ICodeEditorOptions {\n\t\treturn {\n\t\t\toverviewRulerLanes: 3,\n\t\t\tlineNumbersMinChars: 3,\n\t\t\tfixedOverflowWidgets: true,\n\t\t\t...this.getReadonlyConfiguration(this.input?.isReadonly()),\n\t\t\trenderValidationDecorations: 'on' // render problems even in readonly editors (https://github.com/microsoft/vscode/issues/89057)\n\t\t};\n\t}\n\n\tprotected createEditor(parent: HTMLElement): void {\n\n\t\t// Create editor control\n\t\tthis.editorContainer = parent;\n\t\tthis.createEditorControl(parent, this.computeConfiguration(this.textResourceConfigurationService.getValue<IEditorConfiguration>(this.getActiveResource())));\n\n\t\t// Listeners\n\t\tthis.registerCodeEditorListeners();\n\t}\n\n\tprivate registerCodeEditorListeners(): void {\n\t\tconst mainControl = this.getMainControl();\n\t\tif (mainControl) {\n\t\t\tthis._register(mainControl.onDidChangeModelLanguage(() => this.updateEditorConfiguration()));\n\t\t\tthis._register(mainControl.onDidChangeModel(() => this.updateEditorConfiguration()));\n\t\t\tthis._register(mainControl.onDidChangeCursorPosition(e => this._onDidChangeSelection.fire({ reason: this.toEditorPaneSelectionChangeReason(e) })));\n\t\t\tthis._register(mainControl.onDidChangeModelContent(() => this._onDidChangeSelection.fire({ reason: EditorPaneSelectionChangeReason.EDIT })));\n\t\t}\n\t}\n\n\tprivate toEditorPaneSelectionChangeReason(e: ICursorPositionChangedEvent): EditorPaneSelectionChangeReason {\n\t\tswitch (e.source) {\n\t\t\tcase TextEditorSelectionSource.PROGRAMMATIC: return EditorPaneSelectionChangeReason.PROGRAMMATIC;\n\t\t\tcase TextEditorSelectionSource.NAVIGATION: return EditorPaneSelectionChangeReason.NAVIGATION;\n\t\t\tcase TextEditorSelectionSource.JUMP: return EditorPaneSelectionChangeReason.JUMP;\n\t\t\tdefault: return EditorPaneSelectionChangeReason.USER;\n\t\t}\n\t}\n\n\tgetSelection(): IEditorPaneSelection | undefined {\n\t\tconst mainControl = this.getMainControl();\n\t\tif (mainControl) {\n\t\t\tconst selection = mainControl.getSelection();\n\t\t\tif (selection) {\n\t\t\t\treturn new TextEditorPaneSelection(selection);\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * This method creates and returns the text editor control to be used.\n\t * Subclasses must override to provide their own editor control that\n\t * should be used (e.g. a text diff editor).\n\t *\n\t * The passed in configuration object should be passed to the editor\n\t * control when creating it.\n\t */\n\tprotected abstract createEditorControl(parent: HTMLElement, initialOptions: ICodeEditorOptions): void;\n\n\t/**\n\t * The method asks to update the editor control options and is called\n\t * whenever there is change to the options.\n\t */\n\tprotected abstract updateEditorControlOptions(options: ICodeEditorOptions): void;\n\n\t/**\n\t * This method returns the main, dominant instance of `ICodeEditor`\n\t * for the editor pane. E.g. for a diff editor, this is the right\n\t * hand (modified) side.\n\t */\n\tprotected abstract getMainControl(): ICodeEditor | undefined;\n\n\toverride async setInput(input: EditorInput, options: ITextEditorOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<void> {\n\t\tawait super.setInput(input, options, context, token);\n\n\t\t// Update our listener for input capabilities\n\t\tthis.inputListener.value = input.onDidChangeCapabilities(() => this.onDidChangeInputCapabilities(input));\n\n\t\t// Update editor options after having set the input. We do this because there can be\n\t\t// editor input specific options (e.g. an ARIA label depending on the input showing)\n\t\tthis.updateEditorConfiguration();\n\n\t\t// Update aria label on editor\n\t\tconst editorContainer = assertIsDefined(this.editorContainer);\n\t\teditorContainer.setAttribute('aria-label', this.computeAriaLabel());\n\t}\n\n\toverride clearInput(): void {\n\n\t\t// Clear input listener\n\t\tthis.inputListener.clear();\n\n\t\tsuper.clearInput();\n\t}\n\n\tprotected override setEditorVisible(visible: boolean, group: IEditorGroup | undefined): void {\n\t\tif (visible) {\n\t\t\tthis.consumePendingConfigurationChangeEvent();\n\t\t}\n\n\t\tsuper.setEditorVisible(visible, group);\n\t}\n\n\tprotected override toEditorViewStateResource(input: EditorInput): URI | undefined {\n\t\treturn input.resource;\n\t}\n\n\tprivate updateEditorConfiguration(resource = this.getActiveResource()): void {\n\t\tlet configuration: IEditorConfiguration | undefined = undefined;\n\t\tif (resource) {\n\t\t\tconfiguration = this.textResourceConfigurationService.getValue<IEditorConfiguration>(resource);\n\t\t}\n\n\t\tif (!configuration) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editorConfiguration = this.computeConfiguration(configuration);\n\n\t\t// Try to figure out the actual editor options that changed from the last time we updated the editor.\n\t\t// We do this so that we are not overwriting some dynamic editor settings (e.g. word wrap) that might\n\t\t// have been applied to the editor directly.\n\t\tlet editorSettingsToApply = editorConfiguration;\n\t\tif (this.lastAppliedEditorOptions) {\n\t\t\teditorSettingsToApply = distinct(this.lastAppliedEditorOptions, editorSettingsToApply);\n\t\t}\n\n\t\tif (Object.keys(editorSettingsToApply).length > 0) {\n\t\t\tthis.lastAppliedEditorOptions = editorConfiguration;\n\n\t\t\tthis.updateEditorControlOptions(editorSettingsToApply);\n\t\t}\n\t}\n\n\tprivate getActiveResource(): URI | undefined {\n\t\tconst mainControl = this.getMainControl();\n\t\tif (mainControl) {\n\t\t\tconst model = mainControl.getModel();\n\t\t\tif (model) {\n\t\t\t\treturn model.uri;\n\t\t\t}\n\t\t}\n\n\t\tif (this.input) {\n\t\t\treturn this.input.resource;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\toverride dispose(): void {\n\t\tthis.lastAppliedEditorOptions = undefined;\n\n\t\tsuper.dispose();\n\t}\n}\n\nexport class TextEditorPaneSelection implements IEditorPaneSelection {\n\n\tprivate static readonly TEXT_EDITOR_SELECTION_THRESHOLD = 10; // number of lines to move in editor to justify for significant change\n\n\tconstructor(\n\t\tprivate readonly textSelection: Selection\n\t) { }\n\n\tcompare(other: IEditorPaneSelection): EditorPaneSelectionCompareResult {\n\t\tif (!(other instanceof TextEditorPaneSelection)) {\n\t\t\treturn EditorPaneSelectionCompareResult.DIFFERENT;\n\t\t}\n\n\t\tconst thisLineNumber = Math.min(this.textSelection.selectionStartLineNumber, this.textSelection.positionLineNumber);\n\t\tconst otherLineNumber = Math.min(other.textSelection.selectionStartLineNumber, other.textSelection.positionLineNumber);\n\n\t\tif (thisLineNumber === otherLineNumber) {\n\t\t\treturn EditorPaneSelectionCompareResult.IDENTICAL;\n\t\t}\n\n\t\tif (Math.abs(thisLineNumber - otherLineNumber) < TextEditorPaneSelection.TEXT_EDITOR_SELECTION_THRESHOLD) {\n\t\t\treturn EditorPaneSelectionCompareResult.SIMILAR; // when in close proximity, treat selection as being similar\n\t\t}\n\n\t\treturn EditorPaneSelectionCompareResult.DIFFERENT;\n\t}\n\n\trestore(options: IEditorOptions): ITextEditorOptions {\n\t\tconst textEditorOptions: ITextEditorOptions = {\n\t\t\t...options,\n\t\t\tselection: this.textSelection,\n\t\t\tselectionRevealType: TextEditorSelectionRevealType.CenterIfOutsideViewport\n\t\t};\n\n\t\treturn textEditorOptions;\n\t}\n\n\tlog(): string {\n\t\treturn `line: ${this.textSelection.startLineNumber}-${this.textSelection.endLineNumber}, col:  ${this.textSelection.startColumn}-${this.textSelection.endColumn}`;\n\t}\n}\n"]}