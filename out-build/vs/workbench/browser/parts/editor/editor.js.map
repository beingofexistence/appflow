{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/browser/parts/editor/editor.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAmBnF,QAAA,GAAG,GAA6B,IAAI,SAAG,CAAO,GAAG,EAAE,EAAE,CAAC,CAAC;IACvD,QAAA,GAAG,GAA6B,IAAI,SAAG,CAAO,MAAM,CAAC,iBAAiB,EAAE,MAAM,CAAC,iBAAiB,CAAC,CAAC;IAElG,QAAA,GAAG,GAA+C;QAC9D,QAAQ,EAAE,IAAI;QACd,qBAAqB,EAAE,KAAK;QAC5B,cAAc,EAAE,OAAO;QACvB,SAAS,EAAE,KAAK;QAChB,sBAAsB,EAAE,EAAE;QAC1B,sBAAsB,EAAE,GAAG;QAC3B,eAAe,EAAE,QAAQ;QACzB,SAAS,EAAE,QAAQ;QACnB,wBAAwB,EAAE,kBAAkB;QAC5C,oBAAoB,EAAE,SAAS;QAC/B,2BAA2B,EAAE,IAAI;QACjC,SAAS,EAAE,IAAI;QACf,QAAQ,EAAE,IAAI;QACd,aAAa,EAAE,IAAI;QACnB,eAAe,EAAE,OAAO;QACxB,uBAAuB,EAAE,OAAO;QAChC,gBAAgB,EAAE,IAAI;QACtB,WAAW,EAAE,SAAS;QACtB,WAAW,EAAE,MAAM;QACnB,kBAAkB,EAAE,IAAI;QACxB,wBAAwB,EAAE,KAAK;QAC/B,sCAAsC,EAAE,IAAI;KAC5C,CAAC;IAEF,SAAgB,GAAG,CAAsB,KAAgC;QACxE,OAAO,KAAK,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,IAAI,KAAK,CAAC,oBAAoB,CAAC,qBAAqB,CAAC,CAAC;IAC5G,CAAC;IAFD,kBAEC;IAED,SAAgB,GAAG,CAAkB,oBAAyB,EAAoB,YAAiB;QAClG,MAAM,OAAO,GAAG;YACf,GAAG,WAAG;YACN,QAAQ,EAAE,YAAY,CAAC,gBAAgB,EAAE,CAAC,YAAY;SACtD,CAAC;QAEF,MAAM,MAAM,GAAG,oBAAoB,CAAC,QAAQ,EAAiC,CAAC;QAC9E,IAAI,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE;YAE9B,0CAA0C;YAC1C,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAEhD,gDAAgD;YAChD,IAAI,IAAA,WAAG,EAAM,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE;gBACrD,OAAO,CAAC,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;gBAEnC,KAAK,MAAM,CAAC,QAAQ,EAAE,UAAU,CAAC,IAAI,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC,cAAc,CAAC,EAAE;oBAC5F,IAAI,UAAU,KAAK,IAAI,EAAE;wBACxB,OAAO,CAAC,cAAc,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;qBACrC;iBACD;aACD;iBAAM;gBACN,OAAO,CAAC,cAAc,GAAG,SAAS,CAAC;aACnC;SACD;QAED,OAAO,OAAO,CAAC;IAChB,CAAC;IA3BD,kBA2BC;IAuED,SAAgB,GAAG,CAAuB,KAAmB,EAAE,oBAA0B,EAAU,aAA8B;QAChI,IAAI,CAAC,oBAAoB,IAAI,CAAC,KAAK,CAAC,YAAY,IAAI,oBAAoB,CAAC,OAAO,CAAC,KAAK,CAAC,YAAY,CAAC,EAAE;YACrG,MAAM,OAAO,GAAmB;gBAC/B,GAAG,aAAa;gBAChB,SAAS,EAAE,KAAK,CAAC,gBAAgB,EAAE,YAAY,EAAE;aACjD,CAAC;YAEF,OAAO,OAAO,CAAC;SACf;QAED,OAAO,aAAa,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAC7C,CAAC;IAXD,kBAWC","file":"editor.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { GroupIdentifier, IWorkbenchEditorConfiguration, IEditorIdentifier, IEditorCloseEvent, IEditorPartOptions, IEditorPartOptionsChangeEvent, SideBySideEditor, EditorCloseContext } from 'vs/workbench/common/editor';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { IEditorGroup, GroupDirection, IMergeGroupOptions, GroupsOrder, GroupsArrangement } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { Dimension } from 'vs/base/browser/dom';\nimport { Event } from 'vs/base/common/event';\nimport { IConfigurationChangeEvent, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { ISerializableView } from 'vs/base/browser/ui/grid/grid';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { isObject } from 'vs/base/common/types';\nimport { IEditorOptions } from 'vs/platform/editor/common/editor';\n\nexport interface IEditorPartCreationOptions {\n\trestorePreviousState: boolean;\n}\n\nexport const DEFAULT_EDITOR_MIN_DIMENSIONS = new Dimension(220, 70);\nexport const DEFAULT_EDITOR_MAX_DIMENSIONS = new Dimension(Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY);\n\nexport const DEFAULT_EDITOR_PART_OPTIONS: IEditorPartOptions = {\n\tshowTabs: true,\n\thighlightModifiedTabs: false,\n\ttabCloseButton: 'right',\n\ttabSizing: 'fit',\n\ttabSizingFixedMinWidth: 50,\n\ttabSizingFixedMaxWidth: 160,\n\tpinnedTabSizing: 'normal',\n\ttabHeight: 'normal',\n\tpreventPinnedEditorClose: 'keyboardAndMouse',\n\ttitleScrollbarSizing: 'default',\n\tfocusRecentEditorAfterClose: true,\n\tshowIcons: true,\n\thasIcons: true, // 'vs-seti' is our default icon theme\n\tenablePreview: true,\n\topenPositioning: 'right',\n\topenSideBySideDirection: 'right',\n\tcloseEmptyGroups: true,\n\tlabelFormat: 'default',\n\tsplitSizing: 'auto',\n\tsplitOnDragAndDrop: true,\n\tcenteredLayoutFixedWidth: false,\n\tdoubleClickTabToToggleEditorGroupSizes: true,\n};\n\nexport function impactsEditorPartOptions(event: IConfigurationChangeEvent): boolean {\n\treturn event.affectsConfiguration('workbench.editor') || event.affectsConfiguration('workbench.iconTheme');\n}\n\nexport function getEditorPartOptions(configurationService: IConfigurationService, themeService: IThemeService): IEditorPartOptions {\n\tconst options = {\n\t\t...DEFAULT_EDITOR_PART_OPTIONS,\n\t\thasIcons: themeService.getFileIconTheme().hasFileIcons\n\t};\n\n\tconst config = configurationService.getValue<IWorkbenchEditorConfiguration>();\n\tif (config?.workbench?.editor) {\n\n\t\t// Assign all primitive configuration over\n\t\tObject.assign(options, config.workbench.editor);\n\n\t\t// Special handle array types and convert to Set\n\t\tif (isObject(config.workbench.editor.autoLockGroups)) {\n\t\t\toptions.autoLockGroups = new Set();\n\n\t\t\tfor (const [editorId, enablement] of Object.entries(config.workbench.editor.autoLockGroups)) {\n\t\t\t\tif (enablement === true) {\n\t\t\t\t\toptions.autoLockGroups.add(editorId);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\toptions.autoLockGroups = undefined;\n\t\t}\n\t}\n\n\treturn options;\n}\n\nexport interface IEditorGroupsAccessor {\n\n\treadonly groups: IEditorGroupView[];\n\treadonly activeGroup: IEditorGroupView;\n\n\treadonly partOptions: IEditorPartOptions;\n\treadonly onDidChangeEditorPartOptions: Event<IEditorPartOptionsChangeEvent>;\n\n\treadonly onDidVisibilityChange: Event<boolean>;\n\n\tgetGroup(identifier: GroupIdentifier): IEditorGroupView | undefined;\n\tgetGroups(order: GroupsOrder): IEditorGroupView[];\n\n\tactivateGroup(identifier: IEditorGroupView | GroupIdentifier): IEditorGroupView;\n\trestoreGroup(identifier: IEditorGroupView | GroupIdentifier): IEditorGroupView;\n\n\taddGroup(location: IEditorGroupView | GroupIdentifier, direction: GroupDirection): IEditorGroupView;\n\tmergeGroup(group: IEditorGroupView | GroupIdentifier, target: IEditorGroupView | GroupIdentifier, options?: IMergeGroupOptions): IEditorGroupView;\n\n\tmoveGroup(group: IEditorGroupView | GroupIdentifier, location: IEditorGroupView | GroupIdentifier, direction: GroupDirection): IEditorGroupView;\n\tcopyGroup(group: IEditorGroupView | GroupIdentifier, location: IEditorGroupView | GroupIdentifier, direction: GroupDirection): IEditorGroupView;\n\n\tremoveGroup(group: IEditorGroupView | GroupIdentifier): void;\n\n\tarrangeGroups(arrangement: GroupsArrangement, target?: IEditorGroupView | GroupIdentifier): void;\n}\n\nexport interface IEditorGroupTitleHeight {\n\n\t/**\n\t * The overall height of the editor group title control.\n\t */\n\ttotal: number;\n\n\t/**\n\t * The height offset to e.g. use when drawing drop overlays.\n\t * This number may be smaller than `height` if the title control\n\t * decides to have an `offset` that is within the title control\n\t * (e.g. when breadcrumbs are enabled).\n\t */\n\toffset: number;\n}\n\nexport interface IEditorGroupView extends IDisposable, ISerializableView, IEditorGroup {\n\n\treadonly onDidFocus: Event<void>;\n\n\treadonly onDidOpenEditorFail: Event<EditorInput>;\n\treadonly onDidCloseEditor: Event<IEditorCloseEvent>;\n\n\t/**\n\t * A promise that resolves when the group has been restored.\n\t *\n\t * For a group with active editor, the promise will resolve\n\t * when the active editor has finished to resolve.\n\t */\n\treadonly whenRestored: Promise<void>;\n\n\treadonly titleHeight: IEditorGroupTitleHeight;\n\n\treadonly disposed: boolean;\n\n\tsetActive(isActive: boolean): void;\n\n\tnotifyIndexChanged(newIndex: number): void;\n\n\trelayout(): void;\n}\n\nexport function fillActiveEditorViewState(group: IEditorGroup, expectedActiveEditor?: EditorInput, presetOptions?: IEditorOptions): IEditorOptions {\n\tif (!expectedActiveEditor || !group.activeEditor || expectedActiveEditor.matches(group.activeEditor)) {\n\t\tconst options: IEditorOptions = {\n\t\t\t...presetOptions,\n\t\t\tviewState: group.activeEditorPane?.getViewState()\n\t\t};\n\n\t\treturn options;\n\t}\n\n\treturn presetOptions || Object.create(null);\n}\n\n/**\n * A sub-interface of IEditorService to hide some workbench-core specific\n * events from clients.\n */\nexport interface EditorServiceImpl extends IEditorService {\n\n\t/**\n\t * Emitted when an editor failed to open.\n\t */\n\treadonly onDidOpenEditorFail: Event<IEditorIdentifier>;\n\n\t/**\n\t * Emitted when the list of most recently active editors change.\n\t */\n\treadonly onDidMostRecentlyActiveEditorsChange: Event<void>;\n}\n\nexport interface IInternalEditorTitleControlOptions {\n\n\t/**\n\t * A hint to defer updating the title control for perf reasons.\n\t * The caller must ensure to update the title control then.\n\t */\n\tskipTitleUpdate?: boolean;\n}\n\nexport interface IInternalEditorOpenOptions extends IInternalEditorTitleControlOptions {\n\n\t/**\n\t * Whether to consider a side by side editor as matching\n\t * when figuring out if the editor to open is already\n\t * opened or not. By default, side by side editors will\n\t * not be considered as matching, even if the editor is\n\t * opened in one of the sides.\n\t */\n\tsupportSideBySide?: SideBySideEditor.ANY | SideBySideEditor.BOTH;\n}\n\nexport interface IInternalEditorCloseOptions extends IInternalEditorTitleControlOptions {\n\n\t/**\n\t * A hint that the editor is closed due to an error opening. This can be\n\t * used to optimize how error toasts are appearing if any.\n\t */\n\tfromError?: boolean;\n\n\t/**\n\t * Additional context as to why an editor is closed.\n\t */\n\tcontext?: EditorCloseContext;\n}\n\nexport interface IInternalMoveCopyOptions extends IInternalEditorTitleControlOptions {\n\n\t/**\n\t * Whether to close the editor at the source or keep it.\n\t */\n\tkeepCopy?: boolean;\n}\n"]}