{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/browser/parts/editor/editorWithViewState.ts"],"names":[],"mappings":"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","file":"editorWithViewState.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { Event } from 'vs/base/common/event';\nimport { IEditorMemento, IEditorCloseEvent, IEditorOpenContext, EditorResourceAccessor, SideBySideEditor } from 'vs/workbench/common/editor';\nimport { EditorPane } from 'vs/workbench/browser/parts/editor/editorPane';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfiguration';\nimport { IEditorGroupsService, IEditorGroup } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IExtUri } from 'vs/base/common/resources';\nimport { IDisposable, MutableDisposable } from 'vs/base/common/lifecycle';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\n\n/**\n * Base class of editors that want to store and restore view state.\n */\nexport abstract class AbstractEditorWithViewState<T extends object> extends EditorPane {\n\n\tprivate viewState: IEditorMemento<T>;\n\n\tprivate readonly groupListener = this._register(new MutableDisposable());\n\n\tprivate editorViewStateDisposables: Map<EditorInput, IDisposable> | undefined;\n\n\tconstructor(\n\t\tid: string,\n\t\tviewStateStorageKey: string,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService protected readonly instantiationService: IInstantiationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService protected readonly textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorService protected readonly editorService: IEditorService,\n\t\t@IEditorGroupsService protected readonly editorGroupService: IEditorGroupsService\n\t) {\n\t\tsuper(id, telemetryService, themeService, storageService);\n\n\t\tthis.viewState = this.getEditorMemento<T>(editorGroupService, textResourceConfigurationService, viewStateStorageKey, 100);\n\t}\n\n\tprotected override setEditorVisible(visible: boolean, group: IEditorGroup | undefined): void {\n\n\t\t// Listen to close events to trigger `onWillCloseEditorInGroup`\n\t\tthis.groupListener.value = group?.onWillCloseEditor(e => this.onWillCloseEditor(e));\n\n\t\tsuper.setEditorVisible(visible, group);\n\t}\n\n\tprivate onWillCloseEditor(e: IEditorCloseEvent): void {\n\t\tconst editor = e.editor;\n\t\tif (editor === this.input) {\n\t\t\t// React to editors closing to preserve or clear view state. This needs to happen\n\t\t\t// in the `onWillCloseEditor` because at that time the editor has not yet\n\t\t\t// been disposed and we can safely persist the view state.\n\t\t\tthis.updateEditorViewState(editor);\n\t\t}\n\t}\n\n\toverride clearInput(): void {\n\n\t\t// Preserve current input view state before clearing\n\t\tthis.updateEditorViewState(this.input);\n\n\t\tsuper.clearInput();\n\t}\n\n\tprotected override saveState(): void {\n\n\t\t// Preserve current input view state before shutting down\n\t\tthis.updateEditorViewState(this.input);\n\n\t\tsuper.saveState();\n\t}\n\n\tprivate updateEditorViewState(input: EditorInput | undefined): void {\n\t\tif (!input || !this.tracksEditorViewState(input)) {\n\t\t\treturn; // ensure we have an input to handle view state for\n\t\t}\n\n\t\tconst resource = this.toEditorViewStateResource(input);\n\t\tif (!resource) {\n\t\t\treturn; // we need a resource\n\t\t}\n\n\t\t// If we are not tracking disposed editor view state\n\t\t// make sure to clear the view state once the editor\n\t\t// is disposed.\n\t\tif (!this.tracksDisposedEditorViewState()) {\n\t\t\tif (!this.editorViewStateDisposables) {\n\t\t\t\tthis.editorViewStateDisposables = new Map<EditorInput, IDisposable>();\n\t\t\t}\n\n\t\t\tif (!this.editorViewStateDisposables.has(input)) {\n\t\t\t\tthis.editorViewStateDisposables.set(input, Event.once(input.onWillDispose)(() => {\n\t\t\t\t\tthis.clearEditorViewState(resource, this.group);\n\t\t\t\t\tthis.editorViewStateDisposables?.delete(input);\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\n\t\t// Clear the editor view state if:\n\t\t// - the editor view state should not be tracked for disposed editors\n\t\t// - the user configured to not restore view state unless the editor is still opened in the group\n\t\tif (\n\t\t\t(input.isDisposed() && !this.tracksDisposedEditorViewState()) ||\n\t\t\t(!this.shouldRestoreEditorViewState(input) && (!this.group || !this.group.contains(input)))\n\t\t) {\n\t\t\tthis.clearEditorViewState(resource, this.group);\n\t\t}\n\n\t\t// Otherwise we save the view state\n\t\telse if (!input.isDisposed()) {\n\t\t\tthis.saveEditorViewState(resource);\n\t\t}\n\t}\n\n\tprivate shouldRestoreEditorViewState(input: EditorInput, context?: IEditorOpenContext): boolean {\n\n\t\t// new editor: check with workbench.editor.restoreViewState setting\n\t\tif (context?.newInGroup) {\n\t\t\treturn this.textResourceConfigurationService.getValue<boolean>(EditorResourceAccessor.getOriginalUri(input, { supportSideBySide: SideBySideEditor.PRIMARY }), 'workbench.editor.restoreViewState') === false ? false : true /* restore by default */;\n\t\t}\n\n\t\t// existing editor: always restore viewstate\n\t\treturn true;\n\t}\n\n\toverride getViewState(): T | undefined {\n\t\tconst input = this.input;\n\t\tif (!input || !this.tracksEditorViewState(input)) {\n\t\t\treturn; // need valid input for view state\n\t\t}\n\n\t\tconst resource = this.toEditorViewStateResource(input);\n\t\tif (!resource) {\n\t\t\treturn; // need a resource for finding view state\n\t\t}\n\n\t\treturn this.computeEditorViewState(resource);\n\t}\n\n\tprivate saveEditorViewState(resource: URI): void {\n\t\tif (!this.group) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editorViewState = this.computeEditorViewState(resource);\n\t\tif (!editorViewState) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.viewState.saveEditorState(this.group, resource, editorViewState);\n\t}\n\n\tprotected loadEditorViewState(input: EditorInput | undefined, context?: IEditorOpenContext): T | undefined {\n\t\tif (!input || !this.group) {\n\t\t\treturn undefined; // we need valid input\n\t\t}\n\n\t\tif (!this.tracksEditorViewState(input)) {\n\t\t\treturn undefined; // not tracking for input\n\t\t}\n\n\t\tif (!this.shouldRestoreEditorViewState(input, context)) {\n\t\t\treturn undefined; // not enabled for input\n\t\t}\n\n\t\tconst resource = this.toEditorViewStateResource(input);\n\t\tif (!resource) {\n\t\t\treturn; // need a resource for finding view state\n\t\t}\n\n\t\treturn this.viewState.loadEditorState(this.group, resource);\n\t}\n\n\tprotected moveEditorViewState(source: URI, target: URI, comparer: IExtUri): void {\n\t\treturn this.viewState.moveEditorState(source, target, comparer);\n\t}\n\n\tprotected clearEditorViewState(resource: URI, group?: IEditorGroup): void {\n\t\tthis.viewState.clearEditorState(resource, group);\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tif (this.editorViewStateDisposables) {\n\t\t\tfor (const [, disposables] of this.editorViewStateDisposables) {\n\t\t\t\tdisposables.dispose();\n\t\t\t}\n\n\t\t\tthis.editorViewStateDisposables = undefined;\n\t\t}\n\t}\n\n\t//#region Subclasses should/could override based on needs\n\n\t/**\n\t * The actual method to provide for gathering the view state\n\t * object for the control.\n\t *\n\t * @param resource the expected `URI` for the view state. This\n\t * should be used as a way to ensure the view state in the\n\t * editor control is matching the resource expected, for example\n\t * by comparing with the underlying model (this was a fix for\n\t * https://github.com/microsoft/vscode/issues/40114).\n\t */\n\tprotected abstract computeEditorViewState(resource: URI): T | undefined;\n\n\t/**\n\t * Whether view state should be associated with the given input.\n\t * Subclasses need to ensure that the editor input is expected\n\t * for the editor.\n\t */\n\tprotected abstract tracksEditorViewState(input: EditorInput): boolean;\n\n\t/**\n\t * Whether view state should be tracked even when the editor is\n\t * disposed.\n\t *\n\t * Subclasses should override this if the input can be restored\n\t * from the resource at a later point, e.g. if backed by files.\n\t */\n\tprotected tracksDisposedEditorViewState(): boolean {\n\t\treturn false;\n\t}\n\n\t/**\n\t * Asks to return the `URI` to associate with the view state.\n\t */\n\tprotected abstract toEditorViewStateResource(input: EditorInput): URI | undefined;\n\n\t//#endregion\n}\n"]}