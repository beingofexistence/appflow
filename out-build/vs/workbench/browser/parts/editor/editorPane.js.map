{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/browser/parts/editor/editorPane.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAwBhG;;;;;;;;;;;;;;;;;;;;OAoBG;IACH,MAAsB,GAAW,SAAQ,eAAG;QAS3C,YAAY;iBAEY,MAAC,GAAiB,IAAI,GAAG,EAAxB,AAAsD,CAAC;QAEhF,IAAI,YAAY,KAAK,OAAO,YAAG,CAA2B,KAAK,CAAC,CAAC,CAAC;QAClE,IAAI,YAAY,KAAK,OAAO,YAAG,CAA2B,KAAK,CAAC,CAAC,CAAC;QAClE,IAAI,aAAa,KAAK,OAAO,YAAG,CAA2B,MAAM,CAAC,CAAC,CAAC;QACpE,IAAI,aAAa,KAAK,OAAO,YAAG,CAA2B,MAAM,CAAC,CAAC,CAAC;QAGpE,IAAI,KAAK,KAA8B,OAAO,IAAI,CAAC,CAAC,CAAM,CAAC,CAAC;QAG5D,IAAI,OAAO,KAAiC,OAAO,IAAI,CAAC,CAAC,CAAQ,CAAC,CAAC;QAGnE,IAAI,KAAK,KAA+B,OAAO,IAAI,CAAC,CAAC,CAAM,CAAC,CAAC;QAE7D;;WAEG;QACH,IAAI,uBAAuB,KAAqC,OAAO,SAAS,CAAC,CAAC,CAAC;QAEnF,YACC,EAAU,EACV,gBAAqB,EACrB,YAAiB,EACjB,cAAmB;YAEnB,KAAK,CAAC,EAAE,EAAE,gBAAgB,EAAE,YAAY,EAAE,cAAc,CAAC,CAAC;YApC3D,gBAAgB;YAEP,+BAA0B,GAAG,aAAK,CAAC,IAAI,CAAC;YAE9B,MAAC,GAAqB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAY,CAAC,CAAC;YACpE,uBAAkB,GAAG,IAAI,CAAC,CAAC,CAAmB,KAAK,CAAC;QAgC7D,CAAC;QAEQ,MAAM,CAAC,MAAmB;YAClC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAErB,gBAAgB;YAChB,IAAI,CAAC,EAAE,CAAW,MAAM,CAAC,CAAC;QAC3B,CAAC;QAQD;;;;;;;;;;;;WAYG;QACH,KAAK,CAAC,QAAQ,CAAC,KAAU,EAAU,OAAmC,EAAE,OAA2B,EAAE,KAAwB;YAC5H,IAAI,CAAC,CAAC,GAAQ,KAAK,CAAC;YACpB,IAAI,CAAC,CAAC,GAAU,OAAO,CAAC;QACzB,CAAC;QAED;;;;;;;;;;WAUG;QACH,UAAU;YACT,IAAI,CAAC,CAAC,GAAQ,SAAS,CAAC;YACxB,IAAI,CAAC,CAAC,GAAU,SAAS,CAAC;QAC3B,CAAC;QAED;;;;;;WAMG;QACH,UAAU,CAAC,OAAmC;YAC7C,IAAI,CAAC,CAAC,GAAU,OAAO,CAAC;QACzB,CAAC;QAEQ,UAAU,CAAC,OAAgB,EAAE,KAAoB;YACzD,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YAE1B,sBAAsB;YACtB,IAAI,CAAC,EAAE,CAAe,OAAO,EAAE,KAAK,CAAC,CAAC;QACvC,CAAC;QAED;;;;;;WAMG;QACO,EAAE,CAAe,OAAgB,EAAE,KAA+B;YAC3E,IAAI,CAAC,CAAC,GAAQ,KAAK,CAAC;QACrB,CAAC;QAED,iBAAiB,CAAC,OAAwB;YACzC,2BAA2B;QAC5B,CAAC;QAES,EAAE,CAAkB,kBAAuB,EAAmB,oBAAyB,EAAgC,GAAW,EAAE,QAAgB,EAAE;YAC/J,MAAM,UAAU,GAAG,GAAG,IAAI,CAAC,KAAK,EAAE,GAAG,GAAG,EAAE,CAAC;YAE3C,IAAI,aAAa,GAAG,GAAG,CAAQ,CAAC,CAAe,GAAG,CAAC,UAAU,CAAC,CAAC;YAC/D,IAAI,CAAC,aAAa,EAAE;gBACnB,aAAa,GAAG,IAAI,CAAC,CAAC,CAAS,IAAI,GAAG,CAAW,IAAI,CAAC,KAAK,EAAE,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,+DAAwD,EAAE,KAAK,EAAE,kBAAkB,EAAE,oBAAoB,CAAC,CAAC,CAAC;gBACtL,GAAG,CAAQ,CAAC,CAAe,GAAG,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;aAC1D;YAED,OAAO,aAAa,CAAC;QACtB,CAAC;QAED,YAAY;YAEX,yBAAyB;YACzB,OAAO,SAAS,CAAC;QAClB,CAAC;QAEkB,CAAC;YAEnB,+CAA+C;YAC/C,KAAK,MAAM,CAAC,EAAE,aAAa,CAAC,IAAI,GAAG,CAAQ,CAAC,EAAgB;gBAC3D,IAAI,aAAa,CAAC,EAAE,KAAK,IAAI,CAAC,KAAK,EAAE,EAAE;oBACtC,aAAa,CAAC,SAAS,EAAE,CAAC;iBAC1B;aACD;YAED,KAAK,CAAC,CAAC,EAAU,CAAC;QACnB,CAAC;QAEQ,OAAO;YACf,IAAI,CAAC,CAAC,GAAQ,SAAS,CAAC;YACxB,IAAI,CAAC,CAAC,GAAU,SAAS,CAAC;YAE1B,KAAK,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC;;IA5JF,kBA6JC;IAMD,MAAa,GAAiB,SAAQ,eAAG;iBAEhB,MAAC,GAAqB,CAAC,CAAtB,AAAuB,CAAC,GAAC,iDAAiD;QAOnG,YACU,EAAU,EACX,CAAW,EACX,CAAsB,EACtB,CAAa,EACb,CAAuB,EACvB,CAAyB;YAEjC,KAAK,EAAE,CAAC;YAPC,OAAE,GAAF,EAAE,CAAQ;YACX,MAAC,GAAD,CAAC,CAAU;YACX,MAAC,GAAD,CAAC,CAAqB;YACtB,MAAC,GAAD,CAAC,CAAY;YACb,MAAC,GAAD,CAAC,CAAsB;YACvB,MAAC,GAAD,CAAC,CAAwB;YAV1B,MAAC,GAAW,KAAK,CAAC;YAElB,MAAC,GAAkB,KAAK,CAAC;YAYhC,IAAI,CAAC,CAAC,CAAmB,SAAS,CAAC,CAAC;YACpC,IAAI,CAAC,CAAC,EAAkB,CAAC;QAC1B,CAAC;QAEO,CAAC;YACR,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAoB,wBAAwB,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAmB,CAAC,CAAC,CAAC,CAAC,CAAC;QACtG,CAAC;QAEO,CAAC,CAAmB,CAAoD;YAC/E,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,oBAAoB,CAAC,SAAS,EAAE,kCAAkC,CAAC,EAAE;gBAChF,IAAI,CAAC,CAAC,GAAkB,IAAI,CAAC,CAAC,CAAoB,QAAQ,CAAC,SAAS,EAAE,kCAAkC,CAAC,KAAK,IAAI,CAAC;aACnH;QACF,CAAC;QAID,eAAe,CAAC,KAAmB,EAAE,gBAA2B,EAAU,KAAQ;YACjF,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAa,gBAAgB,CAAC,CAAC;YACtD,IAAI,CAAC,QAAQ,IAAI,CAAC,KAAK,EAAE;gBACxB,OAAO,CAAC,8DAA8D;aACtE;YAED,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,EAAO,CAAC;YAE5B,mCAAmC;YACnC,IAAI,mBAAmB,GAAG,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;YACzD,IAAI,CAAC,mBAAmB,EAAE;gBACzB,mBAAmB,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAyB,CAAC;gBAClE,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,mBAAmB,CAAC,CAAC;aACpD;YAED,wBAAwB;YACxB,mBAAmB,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC;YAEtC,mDAAmD;YACnD,IAAI,IAAI,CAAC,CAAC,EAAiB;gBAC1B,mBAAmB,CAAC,GAAG,CAAW,CAAC,CAAmB,GAAG,KAAK,CAAC;aAC/D;YAED,6DAA6D;YAC7D,IAAI,IAAA,YAAG,EAAW,gBAAgB,CAAC,EAAE;gBACpC,IAAI,CAAC,yBAAyB,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAAC;aAC3D;QACF,CAAC;QAID,eAAe,CAAC,KAAmB,EAAE,gBAA2B;YAC/D,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAa,gBAAgB,CAAC,CAAC;YACtD,IAAI,CAAC,QAAQ,IAAI,CAAC,KAAK,EAAE;gBACxB,OAAO,CAAC,8DAA8D;aACtE;YAED,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,EAAO,CAAC;YAE5B,MAAM,mBAAmB,GAAG,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC3D,IAAI,mBAAmB,EAAE;gBACxB,MAAM,0BAA0B,GAAG,mBAAmB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;gBAEjE,oCAAoC;gBACpC,IAAI,0BAA0B,EAAE;oBAC/B,OAAO,0BAA0B,CAAC;iBAClC;gBAED,uDAAuD;gBACvD,IAAI,IAAI,CAAC,CAAC,EAAiB;oBAC1B,OAAO,mBAAmB,CAAC,GAAG,CAAW,CAAC,CAAmB,CAAC;iBAC9D;aACD;YAED,OAAO,SAAS,CAAC;QAClB,CAAC;QAID,gBAAgB,CAAC,gBAA2B,EAAU,KAAoB;YACzE,IAAI,IAAA,YAAG,EAAW,gBAAgB,CAAC,EAAE;gBACpC,IAAI,CAAC,CAAC,EAAkB,MAAM,CAAC,gBAAgB,CAAC,CAAC;aACjD;YAED,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAa,gBAAgB,CAAC,CAAC;YACtD,IAAI,QAAQ,EAAE;gBACb,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,EAAO,CAAC;gBAE5B,wBAAwB;gBACxB,IAAI,KAAK,EAAE;oBACV,MAAM,mBAAmB,GAAG,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;oBAC3D,IAAI,mBAAmB,EAAE;wBACxB,OAAO,mBAAmB,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;wBAErC,IAAI,IAAA,WAAG,EAAW,mBAAmB,CAAC,EAAE;4BACvC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;yBAClC;qBACD;iBACD;gBAED,6CAA6C;qBACxC;oBACJ,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;iBAClC;aACD;QACF,CAAC;QAED,yBAAyB,CAAC,QAAa,EAAE,MAAW;YACnD,IAAI,CAAC,IAAI,CAAC,CAAC,EAAkB;gBAC5B,IAAI,CAAC,CAAC,GAAmB,IAAI,GAAG,EAA4B,CAAC;aAC7D;YAED,IAAI,CAAC,IAAI,CAAC,CAAC,CAAiB,GAAG,CAAC,MAAM,CAAC,EAAE;gBACxC,IAAI,CAAC,CAAC,CAAiB,GAAG,CAAC,MAAM,EAAE,aAAK,CAAC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,GAAG,EAAE;oBACxE,IAAI,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;oBAChC,IAAI,CAAC,CAAC,EAAkB,MAAM,CAAC,MAAM,CAAC,CAAC;gBACxC,CAAC,CAAC,CAAC,CAAC;aACJ;QACF,CAAC;QAED,eAAe,CAAC,MAAW,EAAE,MAAW,EAAE,QAAiB;YAC1D,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,EAAO,CAAC;YAE5B,iDAAiD;YACjD,2BAA2B;YAC3B,MAAM,SAAS,GAAG,CAAC,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;YACpC,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;gBACjC,MAAM,QAAQ,GAAG,SAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBAErC,IAAI,CAAC,QAAQ,CAAC,eAAe,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE;oBAChD,SAAS,CAAC,4BAA4B;iBACtC;gBAED,0CAA0C;gBAC1C,IAAI,cAAmB,CAAC;gBACxB,IAAI,IAAA,eAAG,EAAK,MAAM,EAAE,QAAQ,CAAC,EAAE;oBAC9B,cAAc,GAAG,MAAM,CAAC,CAAC,iBAAiB;iBAC1C;qBAAM;oBACN,MAAM,KAAK,GAAG,IAAA,aAAG,EAAS,QAAQ,CAAC,IAAI,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC;oBACtD,cAAc,GAAG,IAAA,eAAG,EAAM,MAAM,EAAE,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,0BAA0B;iBACnH;gBAED,yBAAyB;gBACzB,MAAM,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,QAAQ,qBAAa,CAAC;gBAC9C,IAAI,KAAK,EAAE;oBACV,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;oBACvB,KAAK,CAAC,GAAG,CAAC,cAAc,CAAC,QAAQ,EAAE,EAAE,KAAK,CAAC,CAAC;iBAC5C;aACD;QACF,CAAC;QAEO,CAAC,CAAa,gBAA2B;YAChD,IAAI,IAAA,YAAG,EAAW,gBAAgB,CAAC,EAAE;gBACpC,OAAO,gBAAgB,CAAC,QAAQ,CAAC;aACjC;YAED,OAAO,gBAAgB,CAAC;QACzB,CAAC;QAEO,CAAC;YACR,IAAI,CAAC,IAAI,CAAC,CAAC,EAAM;gBAChB,IAAI,CAAC,CAAC,GAAO,IAAI,SAAG,CAAoC,IAAI,CAAC,CAAC,CAAK,CAAC;gBAEpE,oCAAoC;gBACpC,MAAM,gBAAgB,GAAG,IAAI,CAAC,CAAC,CAAO,IAAI,CAAC,CAAC,CAAG,CAAC;gBAChD,IAAI,KAAK,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE;oBACpC,IAAI,CAAC,CAAC,CAAK,QAAQ,CAAC,gBAAgB,CAAC,CAAC;iBACtC;aACD;YAED,OAAO,IAAI,CAAC,CAAC,CAAK;QACnB,CAAC;QAED,SAAS;YACR,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,EAAO,CAAC;YAE5B,8BAA8B;YAC9B,IAAI,CAAC,IAAI,CAAC,CAAC,EAAU;gBACpB,IAAI,CAAC,CAAC,EAAQ,CAAC;gBACf,IAAI,CAAC,CAAC,GAAW,IAAI,CAAC;aACtB;YAED,IAAI,CAAC,CAAC,CAAO,IAAI,CAAC,CAAC,CAAG,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC;QACzC,CAAC;QAEO,CAAC;YACR,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,EAAO,CAAC;YAE5B,sEAAsE;YACtE,wEAAwE;YACxE,MAAM,OAAO,GAAG,CAAC,GAAG,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YACrC,KAAK,MAAM,CAAC,QAAQ,EAAE,kBAAkB,CAAC,IAAI,OAAO,EAAE;gBACrD,KAAK,MAAM,KAAK,IAAI,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAAE;oBACpD,MAAM,OAAO,GAAoB,MAAM,CAAC,KAAK,CAAC,CAAC;oBAC/C,IAAI,OAAO,KAAK,GAAG,CAAW,CAAC,IAAsB,IAAI,CAAC,CAAC,EAAiB;wBAC3E,SAAS,CAAC,iDAAiD;qBAC3D;oBAED,IAAI,CAAC,IAAI,CAAC,CAAC,CAAkB,QAAQ,CAAC,OAAO,CAAC,EAAE;wBAC/C,OAAO,kBAAkB,CAAC,OAAO,CAAC,CAAC;wBACnC,IAAI,IAAA,WAAG,EAAW,kBAAkB,CAAC,EAAE;4BACtC,KAAK,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;yBACvB;qBACD;iBACD;aACD;QACF,CAAC;;IA7NF,kBA8NC","file":"editorPane.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Composite } from 'vs/workbench/browser/composite';\nimport { IEditorPane, GroupIdentifier, IEditorMemento, IEditorOpenContext, isEditorInput } from 'vs/workbench/common/editor';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IEditorGroup, IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { LRUCache, Touch } from 'vs/base/common/map';\nimport { URI } from 'vs/base/common/uri';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { isEmptyObject } from 'vs/base/common/types';\nimport { DEFAULT_EDITOR_MIN_DIMENSIONS, DEFAULT_EDITOR_MAX_DIMENSIONS } from 'vs/workbench/browser/parts/editor/editor';\nimport { MementoObject } from 'vs/workbench/common/memento';\nimport { joinPath, IExtUri, isEqual } from 'vs/base/common/resources';\nimport { indexOfPath } from 'vs/base/common/extpath';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IEditorOptions } from 'vs/platform/editor/common/editor';\nimport { ITextResourceConfigurationChangeEvent, ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfiguration';\nimport { IBoundarySashes } from 'vs/base/browser/ui/sash/sash';\n\n/**\n * The base class of editors in the workbench. Editors register themselves for specific editor inputs.\n * Editors are layed out in the editor part of the workbench in editor groups. Multiple editors can be\n * open at the same time. Each editor has a minimized representation that is good enough to provide some\n * information about the state of the editor data.\n *\n * The workbench will keep an editor alive after it has been created and show/hide it based on\n * user interaction. The lifecycle of a editor goes in the order:\n *\n * - `createEditor()`\n * - `setEditorVisible()`\n * - `layout()`\n * - `setInput()`\n * - `focus()`\n * - `dispose()`: when the editor group the editor is in closes\n *\n * During use of the workbench, a editor will often receive a `clearInput()`, `setEditorVisible()`, `layout()` and\n * `focus()` calls, but only one `create()` and `dispose()` call.\n *\n * This class is only intended to be subclassed and not instantiated.\n */\nexport abstract class EditorPane extends Composite implements IEditorPane {\n\n\t//#region Events\n\n\treadonly onDidChangeSizeConstraints = Event.None;\n\n\tprotected readonly _onDidChangeControl = this._register(new Emitter<void>());\n\treadonly onDidChangeControl = this._onDidChangeControl.event;\n\n\t//#endregion\n\n\tprivate static readonly EDITOR_MEMENTOS = new Map<string, EditorMemento<any>>();\n\n\tget minimumWidth() { return DEFAULT_EDITOR_MIN_DIMENSIONS.width; }\n\tget maximumWidth() { return DEFAULT_EDITOR_MAX_DIMENSIONS.width; }\n\tget minimumHeight() { return DEFAULT_EDITOR_MIN_DIMENSIONS.height; }\n\tget maximumHeight() { return DEFAULT_EDITOR_MAX_DIMENSIONS.height; }\n\n\tprotected _input: EditorInput | undefined;\n\tget input(): EditorInput | undefined { return this._input; }\n\n\tprotected _options: IEditorOptions | undefined;\n\tget options(): IEditorOptions | undefined { return this._options; }\n\n\tprivate _group: IEditorGroup | undefined;\n\tget group(): IEditorGroup | undefined { return this._group; }\n\n\t/**\n\t * Should be overridden by editors that have their own ScopedContextKeyService\n\t */\n\tget scopedContextKeyService(): IContextKeyService | undefined { return undefined; }\n\n\tconstructor(\n\t\tid: string,\n\t\ttelemetryService: ITelemetryService,\n\t\tthemeService: IThemeService,\n\t\tstorageService: IStorageService\n\t) {\n\t\tsuper(id, telemetryService, themeService, storageService);\n\t}\n\n\toverride create(parent: HTMLElement): void {\n\t\tsuper.create(parent);\n\n\t\t// Create Editor\n\t\tthis.createEditor(parent);\n\t}\n\n\t/**\n\t * Called to create the editor in the parent HTMLElement. Subclasses implement\n\t * this method to construct the editor widget.\n\t */\n\tprotected abstract createEditor(parent: HTMLElement): void;\n\n\t/**\n\t * Note: Clients should not call this method, the workbench calls this\n\t * method. Calling it otherwise may result in unexpected behavior.\n\t *\n\t * Sets the given input with the options to the editor. The input is guaranteed\n\t * to be different from the previous input that was set using the `input.matches()`\n\t * method.\n\t *\n\t * The provided context gives more information around how the editor was opened.\n\t *\n\t * The provided cancellation token should be used to test if the operation\n\t * was cancelled.\n\t */\n\tasync setInput(input: EditorInput, options: IEditorOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<void> {\n\t\tthis._input = input;\n\t\tthis._options = options;\n\t}\n\n\t/**\n\t * Called to indicate to the editor that the input should be cleared and\n\t * resources associated with the input should be freed.\n\t *\n\t * This method can be called based on different contexts, e.g. when opening\n\t * a different input or different editor control or when closing all editors\n\t * in a group.\n\t *\n\t * To monitor the lifecycle of editor inputs, you should not rely on this\n\t * method, rather refer to the listeners on `IEditorGroup` via `IEditorGroupsService`.\n\t */\n\tclearInput(): void {\n\t\tthis._input = undefined;\n\t\tthis._options = undefined;\n\t}\n\n\t/**\n\t * Note: Clients should not call this method, the workbench calls this\n\t * method. Calling it otherwise may result in unexpected behavior.\n\t *\n\t * Sets the given options to the editor. Clients should apply the options\n\t * to the current input.\n\t */\n\tsetOptions(options: IEditorOptions | undefined): void {\n\t\tthis._options = options;\n\t}\n\n\toverride setVisible(visible: boolean, group?: IEditorGroup): void {\n\t\tsuper.setVisible(visible);\n\n\t\t// Propagate to Editor\n\t\tthis.setEditorVisible(visible, group);\n\t}\n\n\t/**\n\t * Indicates that the editor control got visible or hidden in a specific group. A\n\t * editor instance will only ever be visible in one editor group.\n\t *\n\t * @param visible the state of visibility of this editor\n\t * @param group the editor group this editor is in.\n\t */\n\tprotected setEditorVisible(visible: boolean, group: IEditorGroup | undefined): void {\n\t\tthis._group = group;\n\t}\n\n\tsetBoundarySashes(_sashes: IBoundarySashes) {\n\t\t// Subclasses can implement\n\t}\n\n\tprotected getEditorMemento<T>(editorGroupService: IEditorGroupsService, configurationService: ITextResourceConfigurationService, key: string, limit: number = 10): IEditorMemento<T> {\n\t\tconst mementoKey = `${this.getId()}${key}`;\n\n\t\tlet editorMemento = EditorPane.EDITOR_MEMENTOS.get(mementoKey);\n\t\tif (!editorMemento) {\n\t\t\teditorMemento = this._register(new EditorMemento(this.getId(), key, this.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE), limit, editorGroupService, configurationService));\n\t\t\tEditorPane.EDITOR_MEMENTOS.set(mementoKey, editorMemento);\n\t\t}\n\n\t\treturn editorMemento;\n\t}\n\n\tgetViewState(): object | undefined {\n\n\t\t// Subclasses to override\n\t\treturn undefined;\n\t}\n\n\tprotected override saveState(): void {\n\n\t\t// Save all editor memento for this editor type\n\t\tfor (const [, editorMemento] of EditorPane.EDITOR_MEMENTOS) {\n\t\t\tif (editorMemento.id === this.getId()) {\n\t\t\t\teditorMemento.saveState();\n\t\t\t}\n\t\t}\n\n\t\tsuper.saveState();\n\t}\n\n\toverride dispose(): void {\n\t\tthis._input = undefined;\n\t\tthis._options = undefined;\n\n\t\tsuper.dispose();\n\t}\n}\n\ninterface MapGroupToMemento<T> {\n\t[group: GroupIdentifier]: T;\n}\n\nexport class EditorMemento<T> extends Disposable implements IEditorMemento<T> {\n\n\tprivate static readonly SHARED_EDITOR_STATE = -1; // pick a number < 0 to be outside group id range\n\n\tprivate cache: LRUCache<string, MapGroupToMemento<T>> | undefined;\n\tprivate cleanedUp = false;\n\tprivate editorDisposables: Map<EditorInput, IDisposable> | undefined;\n\tprivate shareEditorState = false;\n\n\tconstructor(\n\t\treadonly id: string,\n\t\tprivate key: string,\n\t\tprivate memento: MementoObject,\n\t\tprivate limit: number,\n\t\tprivate editorGroupService: IEditorGroupsService,\n\t\tprivate configurationService: ITextResourceConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tthis.updateConfiguration(undefined);\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => this.updateConfiguration(e)));\n\t}\n\n\tprivate updateConfiguration(e: ITextResourceConfigurationChangeEvent | undefined): void {\n\t\tif (!e || e.affectsConfiguration(undefined, 'workbench.editor.sharedViewState')) {\n\t\t\tthis.shareEditorState = this.configurationService.getValue(undefined, 'workbench.editor.sharedViewState') === true;\n\t\t}\n\t}\n\n\tsaveEditorState(group: IEditorGroup, resource: URI, state: T): void;\n\tsaveEditorState(group: IEditorGroup, editor: EditorInput, state: T): void;\n\tsaveEditorState(group: IEditorGroup, resourceOrEditor: URI | EditorInput, state: T): void {\n\t\tconst resource = this.doGetResource(resourceOrEditor);\n\t\tif (!resource || !group) {\n\t\t\treturn; // we are not in a good state to save any state for a resource\n\t\t}\n\n\t\tconst cache = this.doLoad();\n\n\t\t// Ensure mementos for resource map\n\t\tlet mementosForResource = cache.get(resource.toString());\n\t\tif (!mementosForResource) {\n\t\t\tmementosForResource = Object.create(null) as MapGroupToMemento<T>;\n\t\t\tcache.set(resource.toString(), mementosForResource);\n\t\t}\n\n\t\t// Store state for group\n\t\tmementosForResource[group.id] = state;\n\n\t\t// Store state as most recent one based on settings\n\t\tif (this.shareEditorState) {\n\t\t\tmementosForResource[EditorMemento.SHARED_EDITOR_STATE] = state;\n\t\t}\n\n\t\t// Automatically clear when editor input gets disposed if any\n\t\tif (isEditorInput(resourceOrEditor)) {\n\t\t\tthis.clearEditorStateOnDispose(resource, resourceOrEditor);\n\t\t}\n\t}\n\n\tloadEditorState(group: IEditorGroup, resource: URI): T | undefined;\n\tloadEditorState(group: IEditorGroup, editor: EditorInput): T | undefined;\n\tloadEditorState(group: IEditorGroup, resourceOrEditor: URI | EditorInput): T | undefined {\n\t\tconst resource = this.doGetResource(resourceOrEditor);\n\t\tif (!resource || !group) {\n\t\t\treturn; // we are not in a good state to load any state for a resource\n\t\t}\n\n\t\tconst cache = this.doLoad();\n\n\t\tconst mementosForResource = cache.get(resource.toString());\n\t\tif (mementosForResource) {\n\t\t\tconst mementoForResourceAndGroup = mementosForResource[group.id];\n\n\t\t\t// Return state for group if present\n\t\t\tif (mementoForResourceAndGroup) {\n\t\t\t\treturn mementoForResourceAndGroup;\n\t\t\t}\n\n\t\t\t// Return most recent state based on settings otherwise\n\t\t\tif (this.shareEditorState) {\n\t\t\t\treturn mementosForResource[EditorMemento.SHARED_EDITOR_STATE];\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tclearEditorState(resource: URI, group?: IEditorGroup): void;\n\tclearEditorState(editor: EditorInput, group?: IEditorGroup): void;\n\tclearEditorState(resourceOrEditor: URI | EditorInput, group?: IEditorGroup): void {\n\t\tif (isEditorInput(resourceOrEditor)) {\n\t\t\tthis.editorDisposables?.delete(resourceOrEditor);\n\t\t}\n\n\t\tconst resource = this.doGetResource(resourceOrEditor);\n\t\tif (resource) {\n\t\t\tconst cache = this.doLoad();\n\n\t\t\t// Clear state for group\n\t\t\tif (group) {\n\t\t\t\tconst mementosForResource = cache.get(resource.toString());\n\t\t\t\tif (mementosForResource) {\n\t\t\t\t\tdelete mementosForResource[group.id];\n\n\t\t\t\t\tif (isEmptyObject(mementosForResource)) {\n\t\t\t\t\t\tcache.delete(resource.toString());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Clear state across all groups for resource\n\t\t\telse {\n\t\t\t\tcache.delete(resource.toString());\n\t\t\t}\n\t\t}\n\t}\n\n\tclearEditorStateOnDispose(resource: URI, editor: EditorInput): void {\n\t\tif (!this.editorDisposables) {\n\t\t\tthis.editorDisposables = new Map<EditorInput, IDisposable>();\n\t\t}\n\n\t\tif (!this.editorDisposables.has(editor)) {\n\t\t\tthis.editorDisposables.set(editor, Event.once(editor.onWillDispose)(() => {\n\t\t\t\tthis.clearEditorState(resource);\n\t\t\t\tthis.editorDisposables?.delete(editor);\n\t\t\t}));\n\t\t}\n\t}\n\n\tmoveEditorState(source: URI, target: URI, comparer: IExtUri): void {\n\t\tconst cache = this.doLoad();\n\n\t\t// We need a copy of the keys to not iterate over\n\t\t// newly inserted elements.\n\t\tconst cacheKeys = [...cache.keys()];\n\t\tfor (const cacheKey of cacheKeys) {\n\t\t\tconst resource = URI.parse(cacheKey);\n\n\t\t\tif (!comparer.isEqualOrParent(resource, source)) {\n\t\t\t\tcontinue; // not matching our resource\n\t\t\t}\n\n\t\t\t// Determine new resulting target resource\n\t\t\tlet targetResource: URI;\n\t\t\tif (isEqual(source, resource)) {\n\t\t\t\ttargetResource = target; // file got moved\n\t\t\t} else {\n\t\t\t\tconst index = indexOfPath(resource.path, source.path);\n\t\t\t\ttargetResource = joinPath(target, resource.path.substr(index + source.path.length + 1)); // parent folder got moved\n\t\t\t}\n\n\t\t\t// Don't modify LRU state\n\t\t\tconst value = cache.get(cacheKey, Touch.None);\n\t\t\tif (value) {\n\t\t\t\tcache.delete(cacheKey);\n\t\t\t\tcache.set(targetResource.toString(), value);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate doGetResource(resourceOrEditor: URI | EditorInput): URI | undefined {\n\t\tif (isEditorInput(resourceOrEditor)) {\n\t\t\treturn resourceOrEditor.resource;\n\t\t}\n\n\t\treturn resourceOrEditor;\n\t}\n\n\tprivate doLoad(): LRUCache<string, MapGroupToMemento<T>> {\n\t\tif (!this.cache) {\n\t\t\tthis.cache = new LRUCache<string, MapGroupToMemento<T>>(this.limit);\n\n\t\t\t// Restore from serialized map state\n\t\t\tconst rawEditorMemento = this.memento[this.key];\n\t\t\tif (Array.isArray(rawEditorMemento)) {\n\t\t\t\tthis.cache.fromJSON(rawEditorMemento);\n\t\t\t}\n\t\t}\n\n\t\treturn this.cache;\n\t}\n\n\tsaveState(): void {\n\t\tconst cache = this.doLoad();\n\n\t\t// Cleanup once during session\n\t\tif (!this.cleanedUp) {\n\t\t\tthis.cleanUp();\n\t\t\tthis.cleanedUp = true;\n\t\t}\n\n\t\tthis.memento[this.key] = cache.toJSON();\n\t}\n\n\tprivate cleanUp(): void {\n\t\tconst cache = this.doLoad();\n\n\t\t// Remove groups from states that no longer exist. Since we modify the\n\t\t// cache and its is a LRU cache make a copy to ensure iteration succeeds\n\t\tconst entries = [...cache.entries()];\n\t\tfor (const [resource, mapGroupToMementos] of entries) {\n\t\t\tfor (const group of Object.keys(mapGroupToMementos)) {\n\t\t\t\tconst groupId: GroupIdentifier = Number(group);\n\t\t\t\tif (groupId === EditorMemento.SHARED_EDITOR_STATE && this.shareEditorState) {\n\t\t\t\t\tcontinue; // skip over shared entries if sharing is enabled\n\t\t\t\t}\n\n\t\t\t\tif (!this.editorGroupService.getGroup(groupId)) {\n\t\t\t\t\tdelete mapGroupToMementos[groupId];\n\t\t\t\t\tif (isEmptyObject(mapGroupToMementos)) {\n\t\t\t\t\t\tcache.delete(resource);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"]}