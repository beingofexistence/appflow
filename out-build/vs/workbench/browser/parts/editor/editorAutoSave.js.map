{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/browser/parts/editor/editorAutoSave.ts"],"names":[],"mappings":"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","file":"editorAutoSave.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { Disposable, DisposableStore, IDisposable, dispose, toDisposable } from 'vs/base/common/lifecycle';\nimport { IFilesConfigurationService, AutoSaveMode, IAutoSaveConfiguration } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { SaveReason, IEditorIdentifier, GroupIdentifier, ISaveOptions, EditorInputCapabilities } from 'vs/workbench/common/editor';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IWorkingCopyService } from 'vs/workbench/services/workingCopy/common/workingCopyService';\nimport { IWorkingCopy, WorkingCopyCapabilities } from 'vs/workbench/services/workingCopy/common/workingCopy';\nimport { ILogService } from 'vs/platform/log/common/log';\n\nexport class EditorAutoSave extends Disposable implements IWorkbenchContribution {\n\n\t// Auto save: after delay\n\tprivate autoSaveAfterDelay: number | undefined;\n\tprivate readonly pendingAutoSavesAfterDelay = new Map<IWorkingCopy, IDisposable>();\n\n\t// Auto save: focus change & window change\n\tprivate lastActiveEditor: EditorInput | undefined = undefined;\n\tprivate lastActiveGroupId: GroupIdentifier | undefined = undefined;\n\tprivate lastActiveEditorControlDisposable = this._register(new DisposableStore());\n\n\tconstructor(\n\t\t@IFilesConfigurationService private readonly filesConfigurationService: IFilesConfigurationService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@IWorkingCopyService private readonly workingCopyService: IWorkingCopyService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\n\t\t// Figure out initial auto save config\n\t\tthis.onAutoSaveConfigurationChange(filesConfigurationService.getAutoSaveConfiguration(), false);\n\n\t\t// Fill in initial dirty working copies\n\t\tfor (const dirtyWorkingCopy of this.workingCopyService.dirtyWorkingCopies) {\n\t\t\tthis.onDidRegister(dirtyWorkingCopy);\n\t\t}\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.hostService.onDidChangeFocus(focused => this.onWindowFocusChange(focused)));\n\t\tthis._register(this.editorService.onDidActiveEditorChange(() => this.onDidActiveEditorChange()));\n\t\tthis._register(this.filesConfigurationService.onAutoSaveConfigurationChange(config => this.onAutoSaveConfigurationChange(config, true)));\n\n\t\t// Working Copy events\n\t\tthis._register(this.workingCopyService.onDidRegister(workingCopy => this.onDidRegister(workingCopy)));\n\t\tthis._register(this.workingCopyService.onDidUnregister(workingCopy => this.onDidUnregister(workingCopy)));\n\t\tthis._register(this.workingCopyService.onDidChangeDirty(workingCopy => this.onDidChangeDirty(workingCopy)));\n\t\tthis._register(this.workingCopyService.onDidChangeContent(workingCopy => this.onDidChangeContent(workingCopy)));\n\t}\n\n\tprivate onWindowFocusChange(focused: boolean): void {\n\t\tif (!focused) {\n\t\t\tthis.maybeTriggerAutoSave(SaveReason.WINDOW_CHANGE);\n\t\t}\n\t}\n\n\tprivate onDidActiveEditorChange(): void {\n\n\t\t// Treat editor change like a focus change for our last active editor if any\n\t\tif (this.lastActiveEditor && typeof this.lastActiveGroupId === 'number') {\n\t\t\tthis.maybeTriggerAutoSave(SaveReason.FOCUS_CHANGE, { groupId: this.lastActiveGroupId, editor: this.lastActiveEditor });\n\t\t}\n\n\t\t// Remember as last active\n\t\tconst activeGroup = this.editorGroupService.activeGroup;\n\t\tconst activeEditor = this.lastActiveEditor = activeGroup.activeEditor ?? undefined;\n\t\tthis.lastActiveGroupId = activeGroup.id;\n\n\t\t// Dispose previous active control listeners\n\t\tthis.lastActiveEditorControlDisposable.clear();\n\n\t\t// Listen to focus changes on control for auto save\n\t\tconst activeEditorPane = this.editorService.activeEditorPane;\n\t\tif (activeEditor && activeEditorPane) {\n\t\t\tthis.lastActiveEditorControlDisposable.add(activeEditorPane.onDidBlur(() => {\n\t\t\t\tthis.maybeTriggerAutoSave(SaveReason.FOCUS_CHANGE, { groupId: activeGroup.id, editor: activeEditor });\n\t\t\t}));\n\t\t}\n\t}\n\n\tprivate maybeTriggerAutoSave(reason: SaveReason, editorIdentifier?: IEditorIdentifier): void {\n\t\tif (editorIdentifier?.editor.isReadonly() || editorIdentifier?.editor.hasCapability(EditorInputCapabilities.Untitled)) {\n\t\t\treturn; // no auto save for readonly or untitled editors\n\t\t}\n\n\t\t// Determine if we need to save all. In case of a window focus change we also save if\n\t\t// auto save mode is configured to be ON_FOCUS_CHANGE (editor focus change)\n\t\tconst mode = this.filesConfigurationService.getAutoSaveMode();\n\t\tif (\n\t\t\t(reason === SaveReason.WINDOW_CHANGE && (mode === AutoSaveMode.ON_FOCUS_CHANGE || mode === AutoSaveMode.ON_WINDOW_CHANGE)) ||\n\t\t\t(reason === SaveReason.FOCUS_CHANGE && mode === AutoSaveMode.ON_FOCUS_CHANGE)\n\t\t) {\n\t\t\tthis.logService.trace(`[editor auto save] triggering auto save with reason ${reason}`);\n\n\t\t\tif (editorIdentifier) {\n\t\t\t\tthis.editorService.save(editorIdentifier, { reason });\n\t\t\t} else {\n\t\t\t\tthis.saveAllDirty({ reason });\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onAutoSaveConfigurationChange(config: IAutoSaveConfiguration, fromEvent: boolean): void {\n\n\t\t// Update auto save after delay config\n\t\tthis.autoSaveAfterDelay = (typeof config.autoSaveDelay === 'number') && config.autoSaveDelay >= 0 ? config.autoSaveDelay : undefined;\n\n\t\t// Trigger a save-all when auto save is enabled\n\t\tif (fromEvent) {\n\t\t\tlet reason: SaveReason | undefined = undefined;\n\t\t\tswitch (this.filesConfigurationService.getAutoSaveMode()) {\n\t\t\t\tcase AutoSaveMode.ON_FOCUS_CHANGE:\n\t\t\t\t\treason = SaveReason.FOCUS_CHANGE;\n\t\t\t\t\tbreak;\n\t\t\t\tcase AutoSaveMode.ON_WINDOW_CHANGE:\n\t\t\t\t\treason = SaveReason.WINDOW_CHANGE;\n\t\t\t\t\tbreak;\n\t\t\t\tcase AutoSaveMode.AFTER_SHORT_DELAY:\n\t\t\t\tcase AutoSaveMode.AFTER_LONG_DELAY:\n\t\t\t\t\treason = SaveReason.AUTO;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (reason) {\n\t\t\t\tthis.saveAllDirty({ reason });\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate saveAllDirty(options?: ISaveOptions): void {\n\t\tfor (const workingCopy of this.workingCopyService.dirtyWorkingCopies) {\n\t\t\tif (!(workingCopy.capabilities & WorkingCopyCapabilities.Untitled)) {\n\t\t\t\tworkingCopy.save(options);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onDidRegister(workingCopy: IWorkingCopy): void {\n\t\tif (workingCopy.isDirty()) {\n\t\t\tthis.scheduleAutoSave(workingCopy);\n\t\t}\n\t}\n\n\tprivate onDidUnregister(workingCopy: IWorkingCopy): void {\n\t\tthis.discardAutoSave(workingCopy);\n\t}\n\n\tprivate onDidChangeDirty(workingCopy: IWorkingCopy): void {\n\t\tif (workingCopy.isDirty()) {\n\t\t\tthis.scheduleAutoSave(workingCopy);\n\t\t} else {\n\t\t\tthis.discardAutoSave(workingCopy);\n\t\t}\n\t}\n\n\tprivate onDidChangeContent(workingCopy: IWorkingCopy): void {\n\t\tif (workingCopy.isDirty()) {\n\t\t\t// this listener will make sure that the auto save is\n\t\t\t// pushed out for as long as the user is still changing\n\t\t\t// the content of the working copy.\n\t\t\tthis.scheduleAutoSave(workingCopy);\n\t\t}\n\t}\n\n\tprivate scheduleAutoSave(workingCopy: IWorkingCopy): void {\n\t\tif (typeof this.autoSaveAfterDelay !== 'number') {\n\t\t\treturn; // auto save after delay must be enabled\n\t\t}\n\n\t\tif (workingCopy.capabilities & WorkingCopyCapabilities.Untitled) {\n\t\t\treturn; // we never auto save untitled working copies\n\t\t}\n\n\t\t// Clear any running auto save operation\n\t\tthis.discardAutoSave(workingCopy);\n\n\t\tthis.logService.trace(`[editor auto save] scheduling auto save after ${this.autoSaveAfterDelay}ms`, workingCopy.resource.toString(), workingCopy.typeId);\n\n\t\t// Schedule new auto save\n\t\tconst handle = setTimeout(() => {\n\n\t\t\t// Clear disposable\n\t\t\tthis.discardAutoSave(workingCopy);\n\n\t\t\t// Save if dirty\n\t\t\tif (workingCopy.isDirty()) {\n\t\t\t\tthis.logService.trace(`[editor auto save] running auto save`, workingCopy.resource.toString(), workingCopy.typeId);\n\n\t\t\t\tworkingCopy.save({ reason: SaveReason.AUTO });\n\t\t\t}\n\t\t}, this.autoSaveAfterDelay);\n\n\t\t// Keep in map for disposal as needed\n\t\tthis.pendingAutoSavesAfterDelay.set(workingCopy, toDisposable(() => {\n\t\t\tthis.logService.trace(`[editor auto save] clearing pending auto save`, workingCopy.resource.toString(), workingCopy.typeId);\n\n\t\t\tclearTimeout(handle);\n\t\t}));\n\t}\n\n\tprivate discardAutoSave(workingCopy: IWorkingCopy): void {\n\t\tdispose(this.pendingAutoSavesAfterDelay.get(workingCopy));\n\t\tthis.pendingAutoSavesAfterDelay.delete(workingCopy);\n\t}\n}\n"]}