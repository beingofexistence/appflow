{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/browser/parts/editor/textResourceEditor.ts"],"names":[],"mappings":"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","file":"textResourceEditor.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { assertIsDefined } from 'vs/base/common/types';\nimport { ICodeEditor, IPasteEvent } from 'vs/editor/browser/editorBrowser';\nimport { IEditorOpenContext, isTextEditorViewState } from 'vs/workbench/common/editor';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { applyTextEditorOptions } from 'vs/workbench/common/editor/editorOptions';\nimport { AbstractTextResourceEditorInput, TextResourceEditorInput } from 'vs/workbench/common/editor/textResourceEditorInput';\nimport { BaseTextEditorModel } from 'vs/workbench/common/editor/textEditorModel';\nimport { UntitledTextEditorInput } from 'vs/workbench/services/untitled/common/untitledTextEditorInput';\nimport { AbstractTextCodeEditor } from 'vs/workbench/browser/parts/editor/textCodeEditor';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfiguration';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { ScrollType, ICodeEditorViewState } from 'vs/editor/common/editorCommon';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { PLAINTEXT_LANGUAGE_ID } from 'vs/editor/common/languages/modesRegistry';\nimport { EditorOption, IEditorOptions as ICodeEditorOptions } from 'vs/editor/common/config/editorOptions';\nimport { ModelConstants } from 'vs/editor/common/model';\nimport { ITextEditorOptions } from 'vs/platform/editor/common/editor';\nimport { IFileService } from 'vs/platform/files/common/files';\n\n/**\n * An editor implementation that is capable of showing the contents of resource inputs. Uses\n * the TextEditor widget to show the contents.\n */\nexport abstract class AbstractTextResourceEditor extends AbstractTextCodeEditor<ICodeEditorViewState> {\n\n\tconstructor(\n\t\tid: string,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IFileService fileService: IFileService\n\t) {\n\t\tsuper(id, telemetryService, instantiationService, storageService, textResourceConfigurationService, themeService, editorService, editorGroupService, fileService);\n\t}\n\n\toverride async setInput(input: AbstractTextResourceEditorInput, options: ITextEditorOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<void> {\n\n\t\t// Set input and resolve\n\t\tawait super.setInput(input, options, context, token);\n\t\tconst resolvedModel = await input.resolve(options);\n\n\t\t// Check for cancellation\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Assert Model instance\n\t\tif (!(resolvedModel instanceof BaseTextEditorModel)) {\n\t\t\tthrow new Error('Unable to open file as text');\n\t\t}\n\n\t\t// Set Editor Model\n\t\tconst control = assertIsDefined(this.editorControl);\n\t\tconst textEditorModel = resolvedModel.textEditorModel;\n\t\tcontrol.setModel(textEditorModel);\n\n\t\t// Restore view state (unless provided by options)\n\t\tif (!isTextEditorViewState(options?.viewState)) {\n\t\t\tconst editorViewState = this.loadEditorViewState(input, context);\n\t\t\tif (editorViewState) {\n\t\t\t\tif (options?.selection) {\n\t\t\t\t\teditorViewState.cursorState = []; // prevent duplicate selections via options\n\t\t\t\t}\n\n\t\t\t\tcontrol.restoreViewState(editorViewState);\n\t\t\t}\n\t\t}\n\n\t\t// Apply options to editor if any\n\t\tif (options) {\n\t\t\tapplyTextEditorOptions(options, control, ScrollType.Immediate);\n\t\t}\n\n\t\t// Since the resolved model provides information about being readonly\n\t\t// or not, we apply it here to the editor even though the editor input\n\t\t// was already asked for being readonly or not. The rationale is that\n\t\t// a resolved model might have more specific information about being\n\t\t// readonly or not that the input did not have.\n\t\tcontrol.updateOptions(this.getReadonlyConfiguration(resolvedModel.isReadonly()));\n\t}\n\n\t/**\n\t * Reveals the last line of this editor if it has a model set.\n\t */\n\trevealLastLine(): void {\n\t\tconst control = this.editorControl;\n\t\tif (!control) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = control.getModel();\n\n\t\tif (model) {\n\t\t\tconst lastLine = model.getLineCount();\n\t\t\tcontrol.revealPosition({ lineNumber: lastLine, column: model.getLineMaxColumn(lastLine) }, ScrollType.Smooth);\n\t\t}\n\t}\n\n\toverride clearInput(): void {\n\t\tsuper.clearInput();\n\n\t\t// Clear Model\n\t\tthis.editorControl?.setModel(null);\n\t}\n\n\tprotected override tracksEditorViewState(input: EditorInput): boolean {\n\t\t// editor view state persistence is only enabled for untitled and resource inputs\n\t\treturn input instanceof UntitledTextEditorInput || input instanceof TextResourceEditorInput;\n\t}\n}\n\nexport class TextResourceEditor extends AbstractTextResourceEditor {\n\n\tstatic readonly ID = 'workbench.editors.textResourceEditor';\n\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IFileService fileService: IFileService\n\t) {\n\t\tsuper(TextResourceEditor.ID, telemetryService, instantiationService, storageService, textResourceConfigurationService, themeService, editorGroupService, editorService, fileService);\n\t}\n\n\tprotected override createEditorControl(parent: HTMLElement, configuration: ICodeEditorOptions): void {\n\t\tsuper.createEditorControl(parent, configuration);\n\n\t\t// Install a listener for paste to update this editors\n\t\t// language if the paste includes a specific language\n\t\tconst control = this.editorControl;\n\t\tif (control) {\n\t\t\tthis._register(control.onDidPaste(e => this.onDidEditorPaste(e, control)));\n\t\t}\n\t}\n\n\tprivate onDidEditorPaste(e: IPasteEvent, codeEditor: ICodeEditor): void {\n\t\tif (this.input instanceof UntitledTextEditorInput && this.input.model.hasLanguageSetExplicitly) {\n\t\t\treturn; // do not override language if it was set explicitly\n\t\t}\n\n\t\tif (e.range.startLineNumber !== 1 || e.range.startColumn !== 1) {\n\t\t\treturn; // document had existing content before the pasted text, don't override.\n\t\t}\n\n\t\tif (codeEditor.getOption(EditorOption.readOnly)) {\n\t\t\treturn; // not for readonly editors\n\t\t}\n\n\t\tconst textModel = codeEditor.getModel();\n\t\tif (!textModel) {\n\t\t\treturn; // require a live model\n\t\t}\n\n\t\tconst pasteIsWholeContents = textModel.getLineCount() === e.range.endLineNumber && textModel.getLineMaxColumn(e.range.endLineNumber) === e.range.endColumn;\n\t\tif (!pasteIsWholeContents) {\n\t\t\treturn; // document had existing content after the pasted text, don't override.\n\t\t}\n\n\t\tconst currentLanguageId = textModel.getLanguageId();\n\t\tif (currentLanguageId !== PLAINTEXT_LANGUAGE_ID) {\n\t\t\treturn; // require current languageId to be unspecific\n\t\t}\n\n\t\tlet candidateLanguage: { id: string; source: 'event' | 'guess' } | undefined = undefined;\n\n\t\t// A languageId is provided via the paste event so text was copied using\n\t\t// VSCode. As such we trust this languageId and use it if specific\n\t\tif (e.languageId) {\n\t\t\tcandidateLanguage = { id: e.languageId, source: 'event' };\n\t\t}\n\n\t\t// A languageId was not provided, so the data comes from outside VSCode\n\t\t// We can still try to guess a good languageId from the first line if\n\t\t// the paste changed the first line\n\t\telse {\n\t\t\tconst guess = this.languageService.guessLanguageIdByFilepathOrFirstLine(textModel.uri, textModel.getLineContent(1).substr(0, ModelConstants.FIRST_LINE_DETECTION_LENGTH_LIMIT)) ?? undefined;\n\t\t\tif (guess) {\n\t\t\t\tcandidateLanguage = { id: guess, source: 'guess' };\n\t\t\t}\n\t\t}\n\n\t\t// Finally apply languageId to model if specified\n\t\tif (candidateLanguage && candidateLanguage.id !== PLAINTEXT_LANGUAGE_ID) {\n\t\t\tif (this.input instanceof UntitledTextEditorInput && candidateLanguage.source === 'event') {\n\t\t\t\t// High confidence, set language id at TextEditorModel level to block future auto-detection\n\t\t\t\tthis.input.model.setLanguageId(candidateLanguage.id);\n\t\t\t} else {\n\t\t\t\ttextModel.setLanguage(this.languageService.createById(candidateLanguage.id));\n\t\t\t}\n\n\t\t\tconst opts = this.modelService.getCreationOptions(textModel.getLanguageId(), textModel.uri, textModel.isForSimpleWidget);\n\t\t\ttextModel.detectIndentation(opts.insertSpaces, opts.tabSize);\n\t\t}\n\t}\n}\n"]}