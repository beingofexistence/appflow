{"version":3,"sources":["vs/workbench/browser/parts/editor/textDiffEditor.ts"],"names":[],"mappings":"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","file":"textDiffEditor.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { deepClone } from 'vs/base/common/objects';\nimport { isObject, assertIsDefined } from 'vs/base/common/types';\nimport { ICodeEditor, IDiffEditor } from 'vs/editor/browser/editorBrowser';\nimport { IDiffEditorOptions, IEditorOptions as ICodeEditorOptions } from 'vs/editor/common/config/editorOptions';\nimport { AbstractTextEditor, IEditorConfiguration } from 'vs/workbench/browser/parts/editor/textEditor';\nimport { TEXT_DIFF_EDITOR_ID, IEditorFactoryRegistry, EditorExtensions, ITextDiffEditorPane, IEditorOpenContext, isEditorInput, isTextEditorViewState, createTooLargeFileError } from 'vs/workbench/common/editor';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { applyTextEditorOptions } from 'vs/workbench/common/editor/editorOptions';\nimport { DiffEditorInput } from 'vs/workbench/common/editor/diffEditorInput';\nimport { TextDiffEditorModel } from 'vs/workbench/common/editor/textDiffEditorModel';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { ITextResourceConfigurationChangeEvent, ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfiguration';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { TextFileOperationError, TextFileOperationResult } from 'vs/workbench/services/textfile/common/textfiles';\nimport { ScrollType, IDiffEditorViewState, IDiffEditorModel } from 'vs/editor/common/editorCommon';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { IEditorGroup, IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { EditorActivation, ITextEditorOptions } from 'vs/platform/editor/common/editor';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { isEqual } from 'vs/base/common/resources';\nimport { Dimension, multibyteAwareBtoa } from 'vs/base/browser/dom';\nimport { ByteSize, FileOperationError, FileOperationResult, IFileService, TooLargeFileOperationError } from 'vs/platform/files/common/files';\nimport { IBoundarySashes } from 'vs/base/browser/ui/sash/sash';\nimport { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';\nimport { StopWatch } from 'vs/base/common/stopwatch';\nimport { DiffEditorWidget } from 'vs/editor/browser/widget/diffEditor/diffEditorWidget';\n\n/**\n * The text editor that leverages the diff text editor for the editing experience.\n */\nexport class TextDiffEditor extends AbstractTextEditor<IDiffEditorViewState> implements ITextDiffEditorPane {\n\tstatic readonly ID = TEXT_DIFF_EDITOR_ID;\n\n\tprivate diffEditorControl: IDiffEditor | undefined = undefined;\n\n\tprivate inputLifecycleStopWatch: StopWatch | undefined = undefined;\n\n\toverride get scopedContextKeyService(): IContextKeyService | undefined {\n\t\tif (!this.diffEditorControl) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst originalEditor = this.diffEditorControl.getOriginalEditor();\n\t\tconst modifiedEditor = this.diffEditorControl.getModifiedEditor();\n\n\t\treturn (originalEditor.hasTextFocus() ? originalEditor : modifiedEditor).invokeWithinContext(accessor => accessor.get(IContextKeyService));\n\t}\n\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService configurationService: ITextResourceConfigurationService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService\n\t) {\n\t\tsuper(TextDiffEditor.ID, telemetryService, instantiationService, storageService, configurationService, themeService, editorService, editorGroupService, fileService);\n\t}\n\n\toverride getTitle(): string {\n\t\tif (this.input) {\n\t\t\treturn this.input.getName();\n\t\t}\n\n\t\treturn localize('textDiffEditor', \"Text Diff Editor\");\n\t}\n\n\tprotected override createEditorControl(parent: HTMLElement, configuration: ICodeEditorOptions): void {\n\t\tthis.diffEditorControl = this._register(this.instantiationService.createInstance(DiffEditorWidget, parent, configuration, {}));\n\t}\n\n\tprotected updateEditorControlOptions(options: ICodeEditorOptions): void {\n\t\tthis.diffEditorControl?.updateOptions(options);\n\t}\n\n\tprotected getMainControl(): ICodeEditor | undefined {\n\t\treturn this.diffEditorControl?.getModifiedEditor();\n\t}\n\n\toverride async setInput(input: DiffEditorInput, options: ITextEditorOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<void> {\n\n\t\t// Cleanup previous things associated with the input\n\t\tthis.inputLifecycleStopWatch = undefined;\n\n\t\t// Set input and resolve\n\t\tawait super.setInput(input, options, context, token);\n\n\t\ttry {\n\t\t\tconst resolvedModel = await input.resolve(options);\n\n\t\t\t// Check for cancellation\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t// Fallback to open as binary if not text\n\t\t\tif (!(resolvedModel instanceof TextDiffEditorModel)) {\n\t\t\t\tthis.openAsBinary(input, options);\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t// Set Editor Model\n\t\t\tconst control = assertIsDefined(this.diffEditorControl);\n\t\t\tconst resolvedDiffEditorModel = resolvedModel as TextDiffEditorModel;\n\n\t\t\tconst vm = resolvedDiffEditorModel.textDiffEditorModel ? control.createViewModel(resolvedDiffEditorModel.textDiffEditorModel) : null;\n\t\t\tawait vm?.waitForDiff();\n\t\t\tcontrol.setModel(vm);\n\n\t\t\t// Restore view state (unless provided by options)\n\t\t\tlet hasPreviousViewState = false;\n\t\t\tif (!isTextEditorViewState(options?.viewState)) {\n\t\t\t\thasPreviousViewState = this.restoreTextDiffEditorViewState(input, options, context, control);\n\t\t\t}\n\n\t\t\t// Apply options to editor if any\n\t\t\tlet optionsGotApplied = false;\n\t\t\tif (options) {\n\t\t\t\toptionsGotApplied = applyTextEditorOptions(options, control, ScrollType.Immediate);\n\t\t\t}\n\n\t\t\tif (!optionsGotApplied && !hasPreviousViewState) {\n\t\t\t\tcontrol.revealFirstDiff();\n\t\t\t}\n\n\t\t\t// Since the resolved model provides information about being readonly\n\t\t\t// or not, we apply it here to the editor even though the editor input\n\t\t\t// was already asked for being readonly or not. The rationale is that\n\t\t\t// a resolved model might have more specific information about being\n\t\t\t// readonly or not that the input did not have.\n\t\t\tcontrol.updateOptions({\n\t\t\t\t...this.getReadonlyConfiguration(resolvedDiffEditorModel.modifiedModel?.isReadonly()),\n\t\t\t\toriginalEditable: !resolvedDiffEditorModel.originalModel?.isReadonly()\n\t\t\t});\n\n\t\t\t// Start to measure input lifecycle\n\t\t\tthis.inputLifecycleStopWatch = new StopWatch(false);\n\t\t} catch (error) {\n\t\t\tawait this.handleSetInputError(error, input, options);\n\t\t}\n\t}\n\n\tprivate async handleSetInputError(error: Error, input: DiffEditorInput, options: ITextEditorOptions | undefined): Promise<void> {\n\n\t\t// Handle case where content appears to be binary\n\t\tif (this.isFileBinaryError(error)) {\n\t\t\treturn this.openAsBinary(input, options);\n\t\t}\n\n\t\t// Handle case where a file is too large to open without confirmation\n\t\tif ((<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_TOO_LARGE && this.group) {\n\t\t\tlet message: string;\n\t\t\tif (error instanceof TooLargeFileOperationError) {\n\t\t\t\tmessage = localize('fileTooLargeForHeapErrorWithSize', \"At least one file is not displayed in the text compare editor because it is very large ({0}).\", ByteSize.formatSize(error.size));\n\t\t\t} else {\n\t\t\t\tmessage = localize('fileTooLargeForHeapErrorWithoutSize', \"At least one file is not displayed in the text compare editor because it is very large.\");\n\t\t\t}\n\n\t\t\tthrow createTooLargeFileError(this.group, input, options, message, this.preferencesService);\n\t\t}\n\n\t\t// Otherwise make sure the error bubbles up\n\t\tthrow error;\n\t}\n\n\tprivate restoreTextDiffEditorViewState(editor: DiffEditorInput, options: ITextEditorOptions | undefined, context: IEditorOpenContext, control: IDiffEditor): boolean {\n\t\tconst editorViewState = this.loadEditorViewState(editor, context);\n\t\tif (editorViewState) {\n\t\t\tif (options?.selection && editorViewState.modified) {\n\t\t\t\teditorViewState.modified.cursorState = []; // prevent duplicate selections via options\n\t\t\t}\n\n\t\t\tcontrol.restoreViewState(editorViewState);\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate openAsBinary(input: DiffEditorInput, options: ITextEditorOptions | undefined): void {\n\t\tconst original = input.original;\n\t\tconst modified = input.modified;\n\n\t\tconst binaryDiffInput = this.instantiationService.createInstance(DiffEditorInput, input.getName(), input.getDescription(), original, modified, true);\n\n\t\t// Forward binary flag to input if supported\n\t\tconst fileEditorFactory = Registry.as<IEditorFactoryRegistry>(EditorExtensions.EditorFactory).getFileEditorFactory();\n\t\tif (fileEditorFactory.isFileEditor(original)) {\n\t\t\toriginal.setForceOpenAsBinary();\n\t\t}\n\n\t\tif (fileEditorFactory.isFileEditor(modified)) {\n\t\t\tmodified.setForceOpenAsBinary();\n\t\t}\n\n\t\t// Replace this editor with the binary one\n\t\t(this.group ?? this.editorGroupService.activeGroup).replaceEditors([{\n\t\t\teditor: input,\n\t\t\treplacement: binaryDiffInput,\n\t\t\toptions: {\n\t\t\t\t...options,\n\t\t\t\t// Make sure to not steal away the currently active group\n\t\t\t\t// because we are triggering another openEditor() call\n\t\t\t\t// and do not control the initial intent that resulted\n\t\t\t\t// in us now opening as binary.\n\t\t\t\tactivation: EditorActivation.PRESERVE,\n\t\t\t\tpinned: this.group?.isPinned(input),\n\t\t\t\tsticky: this.group?.isSticky(input)\n\t\t\t}\n\t\t}]);\n\t}\n\n\toverride setOptions(options: ITextEditorOptions | undefined): void {\n\t\tsuper.setOptions(options);\n\n\t\tif (options) {\n\t\t\tapplyTextEditorOptions(options, assertIsDefined(this.diffEditorControl), ScrollType.Smooth);\n\t\t}\n\t}\n\n\tprotected override shouldHandleConfigurationChangeEvent(e: ITextResourceConfigurationChangeEvent, resource: URI): boolean {\n\t\tif (super.shouldHandleConfigurationChangeEvent(e, resource)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn e.affectsConfiguration(resource, 'diffEditor') || e.affectsConfiguration(resource, 'accessibility.verbosity.diffEditor');\n\t}\n\n\tprotected override computeConfiguration(configuration: IEditorConfiguration): ICodeEditorOptions {\n\t\tconst editorConfiguration = super.computeConfiguration(configuration);\n\n\t\t// Handle diff editor specially by merging in diffEditor configuration\n\t\tif (isObject(configuration.diffEditor)) {\n\t\t\tconst diffEditorConfiguration: IDiffEditorOptions = deepClone(configuration.diffEditor);\n\n\t\t\t// User settings defines `diffEditor.codeLens`, but here we rename that to `diffEditor.diffCodeLens` to avoid collisions with `editor.codeLens`.\n\t\t\tdiffEditorConfiguration.diffCodeLens = diffEditorConfiguration.codeLens;\n\t\t\tdelete diffEditorConfiguration.codeLens;\n\n\t\t\t// User settings defines `diffEditor.wordWrap`, but here we rename that to `diffEditor.diffWordWrap` to avoid collisions with `editor.wordWrap`.\n\t\t\tdiffEditorConfiguration.diffWordWrap = <'off' | 'on' | 'inherit' | undefined>diffEditorConfiguration.wordWrap;\n\t\t\tdelete diffEditorConfiguration.wordWrap;\n\n\t\t\tObject.assign(editorConfiguration, diffEditorConfiguration);\n\t\t}\n\n\t\tconst verbose = configuration.accessibility?.verbosity?.diffEditor ?? false;\n\t\t(editorConfiguration as IDiffEditorOptions).accessibilityVerbose = verbose;\n\n\t\treturn editorConfiguration;\n\t}\n\n\tprotected override getConfigurationOverrides(): IDiffEditorOptions {\n\t\treturn {\n\t\t\t...super.getConfigurationOverrides(),\n\t\t\t...this.getReadonlyConfiguration(this.input?.isReadonly()),\n\t\t\toriginalEditable: this.input instanceof DiffEditorInput && !this.input.original.isReadonly(),\n\t\t\tlineDecorationsWidth: '2ch'\n\t\t};\n\t}\n\n\tprotected override updateReadonly(input: EditorInput): void {\n\t\tif (input instanceof DiffEditorInput) {\n\t\t\tthis.diffEditorControl?.updateOptions({\n\t\t\t\t...this.getReadonlyConfiguration(input.isReadonly()),\n\t\t\t\toriginalEditable: !input.original.isReadonly(),\n\t\t\t});\n\t\t} else {\n\t\t\tsuper.updateReadonly(input);\n\t\t}\n\t}\n\n\tprivate isFileBinaryError(error: Error[]): boolean;\n\tprivate isFileBinaryError(error: Error): boolean;\n\tprivate isFileBinaryError(error: Error | Error[]): boolean {\n\t\tif (Array.isArray(error)) {\n\t\t\tconst errors = <Error[]>error;\n\n\t\t\treturn errors.some(error => this.isFileBinaryError(error));\n\t\t}\n\n\t\treturn (<TextFileOperationError>error).textFileOperationResult === TextFileOperationResult.FILE_IS_BINARY;\n\t}\n\n\toverride clearInput(): void {\n\t\tsuper.clearInput();\n\n\t\t// Log input lifecycle telemetry\n\t\tconst inputLifecycleElapsed = this.inputLifecycleStopWatch?.elapsed();\n\t\tthis.inputLifecycleStopWatch = undefined;\n\t\tif (typeof inputLifecycleElapsed === 'number') {\n\t\t\tthis.logInputLifecycleTelemetry(inputLifecycleElapsed, this.getControl()?.getModel()?.modified?.getLanguageId());\n\t\t}\n\n\t\t// Clear Model\n\t\tthis.diffEditorControl?.setModel(null);\n\t}\n\n\tprivate logInputLifecycleTelemetry(duration: number, languageId: string | undefined): void {\n\t\tlet collapseUnchangedRegions = false;\n\t\tif (this.diffEditorControl instanceof DiffEditorWidget) {\n\t\t\tcollapseUnchangedRegions = this.diffEditorControl.collapseUnchangedRegions;\n\t\t}\n\t\tthis.telemetryService.publicLog2<{\n\t\t\teditorVisibleTimeMs: number;\n\t\t\tlanguageId: string;\n\t\t\tcollapseUnchangedRegions: boolean;\n\t\t}, {\n\t\t\towner: 'hediet';\n\t\t\teditorVisibleTimeMs: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'Indicates the time the diff editor was visible to the user' };\n\t\t\tlanguageId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Indicates for which language the diff editor was shown' };\n\t\t\tcollapseUnchangedRegions: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Indicates whether unchanged regions were collapsed' };\n\t\t\tcomment: 'This event gives insight about how long the diff editor was visible to the user.';\n\t\t}>('diffEditor.editorVisibleTime', {\n\t\t\teditorVisibleTimeMs: duration,\n\t\t\tlanguageId: languageId ?? '',\n\t\t\tcollapseUnchangedRegions,\n\t\t});\n\t}\n\n\toverride getControl(): IDiffEditor | undefined {\n\t\treturn this.diffEditorControl;\n\t}\n\n\toverride focus(): void {\n\t\tthis.diffEditorControl?.focus();\n\t}\n\n\toverride hasFocus(): boolean {\n\t\treturn this.diffEditorControl?.hasTextFocus() || super.hasFocus();\n\t}\n\n\tprotected override setEditorVisible(visible: boolean, group: IEditorGroup | undefined): void {\n\t\tsuper.setEditorVisible(visible, group);\n\n\t\tif (visible) {\n\t\t\tthis.diffEditorControl?.onVisible();\n\t\t} else {\n\t\t\tthis.diffEditorControl?.onHide();\n\t\t}\n\t}\n\n\toverride layout(dimension: Dimension): void {\n\t\tthis.diffEditorControl?.layout(dimension);\n\t}\n\n\toverride setBoundarySashes(sashes: IBoundarySashes) {\n\t\tthis.diffEditorControl?.setBoundarySashes(sashes);\n\t}\n\n\tprotected override tracksEditorViewState(input: EditorInput): boolean {\n\t\treturn input instanceof DiffEditorInput;\n\t}\n\n\tprotected override computeEditorViewState(resource: URI): IDiffEditorViewState | undefined {\n\t\tif (!this.diffEditorControl) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst model = this.diffEditorControl.getModel();\n\t\tif (!model || !model.modified || !model.original) {\n\t\t\treturn undefined; // view state always needs a model\n\t\t}\n\n\t\tconst modelUri = this.toEditorViewStateResource(model);\n\t\tif (!modelUri) {\n\t\t\treturn undefined; // model URI is needed to make sure we save the view state correctly\n\t\t}\n\n\t\tif (!isEqual(modelUri, resource)) {\n\t\t\treturn undefined; // prevent saving view state for a model that is not the expected one\n\t\t}\n\n\t\treturn this.diffEditorControl.saveViewState() ?? undefined;\n\t}\n\n\tprotected override toEditorViewStateResource(modelOrInput: IDiffEditorModel | EditorInput): URI | undefined {\n\t\tlet original: URI | undefined;\n\t\tlet modified: URI | undefined;\n\n\t\tif (modelOrInput instanceof DiffEditorInput) {\n\t\t\toriginal = modelOrInput.original.resource;\n\t\t\tmodified = modelOrInput.modified.resource;\n\t\t} else if (!isEditorInput(modelOrInput)) {\n\t\t\toriginal = modelOrInput.original.uri;\n\t\t\tmodified = modelOrInput.modified.uri;\n\t\t}\n\n\t\tif (!original || !modified) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// create a URI that is the Base64 concatenation of original + modified resource\n\t\treturn URI.from({ scheme: 'diff', path: `${multibyteAwareBtoa(original.toString())}${multibyteAwareBtoa(modified.toString())}` });\n\t}\n}\n"]}