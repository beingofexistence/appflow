{"version":3,"sources":["vs/workbench/browser/parts/statusbar/statusbarActions.ts"],"names":[],"mappings":"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","file":"statusbarActions.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { IStatusbarService } from 'vs/workbench/services/statusbar/browser/statusbar';\nimport { Action } from 'vs/base/common/actions';\nimport { Parts, IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { KeyCode } from 'vs/base/common/keyCodes';\nimport { KeybindingsRegistry, KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { ServicesAccessor } from 'vs/editor/browser/editorExtensions';\nimport { Action2, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { Categories } from 'vs/platform/action/common/actionCommonCategories';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { StatusbarViewModel } from 'vs/workbench/browser/parts/statusbar/statusbarModel';\nimport { StatusBarFocused } from 'vs/workbench/common/contextkeys';\n\nexport class ToggleStatusbarEntryVisibilityAction extends Action {\n\n\tconstructor(id: string, label: string, private model: StatusbarViewModel) {\n\t\tsuper(id, label, undefined, true);\n\n\t\tthis.checked = !model.isHidden(id);\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tif (this.model.isHidden(this.id)) {\n\t\t\tthis.model.show(this.id);\n\t\t} else {\n\t\t\tthis.model.hide(this.id);\n\t\t}\n\t}\n}\n\nexport class HideStatusbarEntryAction extends Action {\n\n\tconstructor(id: string, name: string, private model: StatusbarViewModel) {\n\t\tsuper(id, localize('hide', \"Hide '{0}'\", name), undefined, true);\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tthis.model.hide(this.id);\n\t}\n}\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'workbench.statusBar.focusPrevious',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\tprimary: KeyCode.LeftArrow,\n\tsecondary: [KeyCode.UpArrow],\n\twhen: StatusBarFocused,\n\thandler: (accessor: ServicesAccessor) => {\n\t\tconst statusBarService = accessor.get(IStatusbarService);\n\t\tstatusBarService.focusPreviousEntry();\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'workbench.statusBar.focusNext',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\tprimary: KeyCode.RightArrow,\n\tsecondary: [KeyCode.DownArrow],\n\twhen: StatusBarFocused,\n\thandler: (accessor: ServicesAccessor) => {\n\t\tconst statusBarService = accessor.get(IStatusbarService);\n\t\tstatusBarService.focusNextEntry();\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'workbench.statusBar.focusFirst',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\tprimary: KeyCode.Home,\n\twhen: StatusBarFocused,\n\thandler: (accessor: ServicesAccessor) => {\n\t\tconst statusBarService = accessor.get(IStatusbarService);\n\t\tstatusBarService.focus(false);\n\t\tstatusBarService.focusNextEntry();\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'workbench.statusBar.focusLast',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\tprimary: KeyCode.End,\n\twhen: StatusBarFocused,\n\thandler: (accessor: ServicesAccessor) => {\n\t\tconst statusBarService = accessor.get(IStatusbarService);\n\t\tstatusBarService.focus(false);\n\t\tstatusBarService.focusPreviousEntry();\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'workbench.statusBar.clearFocus',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\tprimary: KeyCode.Escape,\n\twhen: StatusBarFocused,\n\thandler: (accessor: ServicesAccessor) => {\n\t\tconst statusBarService = accessor.get(IStatusbarService);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tif (statusBarService.isEntryFocused()) {\n\t\t\tstatusBarService.focus(false);\n\t\t} else if (editorService.activeEditorPane) {\n\t\t\teditorService.activeEditorPane.focus();\n\t\t}\n\t}\n});\n\nclass FocusStatusBarAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.focusStatusBar',\n\t\t\ttitle: { value: localize('focusStatusBar', \"Focus Status Bar\"), original: 'Focus Status Bar' },\n\t\t\tcategory: Categories.View,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst layoutService = accessor.get(IWorkbenchLayoutService);\n\t\tlayoutService.focusPart(Parts.STATUSBAR_PART);\n\t}\n}\n\nregisterAction2(FocusStatusBarAction);\n"]}