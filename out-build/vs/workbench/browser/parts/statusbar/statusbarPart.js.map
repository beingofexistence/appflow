{"version":3,"sources":["vs/workbench/browser/parts/statusbar/statusbarPart.ts"],"names":[],"mappings":"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","file":"statusbarPart.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/statusbarpart';\nimport { localize } from 'vs/nls';\nimport { DisposableStore, dispose, disposeIfDisposable, IDisposable, MutableDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { Part } from 'vs/workbench/browser/part';\nimport { EventType as TouchEventType, Gesture, GestureEvent } from 'vs/base/browser/touch';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { StatusbarAlignment, IStatusbarService, IStatusbarEntry, IStatusbarEntryAccessor, IStatusbarStyleOverride, isStatusbarEntryLocation, IStatusbarEntryLocation, isStatusbarEntryPriority, IStatusbarEntryPriority } from 'vs/workbench/services/statusbar/browser/statusbar';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { IAction, Separator, toAction } from 'vs/base/common/actions';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { STATUS_BAR_BACKGROUND, STATUS_BAR_FOREGROUND, STATUS_BAR_NO_FOLDER_BACKGROUND, STATUS_BAR_ITEM_HOVER_BACKGROUND, STATUS_BAR_BORDER, STATUS_BAR_NO_FOLDER_FOREGROUND, STATUS_BAR_NO_FOLDER_BORDER, STATUS_BAR_ITEM_COMPACT_HOVER_BACKGROUND, STATUS_BAR_ITEM_FOCUS_BORDER, STATUS_BAR_FOCUS_BORDER } from 'vs/workbench/common/theme';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { contrastBorder, activeContrastBorder } from 'vs/platform/theme/common/colorRegistry';\nimport { EventHelper, createStyleSheet, addDisposableListener, EventType, clearNode } from 'vs/base/browser/dom';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { Parts, IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { equals } from 'vs/base/common/arrays';\nimport { StandardMouseEvent } from 'vs/base/browser/mouseEvent';\nimport { ToggleStatusbarVisibilityAction } from 'vs/workbench/browser/actions/layoutActions';\nimport { assertIsDefined } from 'vs/base/common/types';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { isHighContrast } from 'vs/platform/theme/common/theme';\nimport { hash } from 'vs/base/common/hash';\nimport { IHoverService } from 'vs/workbench/services/hover/browser/hover';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IHoverDelegate, IHoverDelegateOptions, IHoverWidget } from 'vs/base/browser/ui/iconLabel/iconHoverDelegate';\nimport { HideStatusbarEntryAction, ToggleStatusbarEntryVisibilityAction } from 'vs/workbench/browser/parts/statusbar/statusbarActions';\nimport { IStatusbarViewModelEntry, StatusbarViewModel } from 'vs/workbench/browser/parts/statusbar/statusbarModel';\nimport { StatusbarEntryItem } from 'vs/workbench/browser/parts/statusbar/statusbarItem';\nimport { StatusBarFocused } from 'vs/workbench/common/contextkeys';\n\ninterface IPendingStatusbarEntry {\n\treadonly id: string;\n\treadonly alignment: StatusbarAlignment;\n\treadonly priority: IStatusbarEntryPriority;\n\n\tentry: IStatusbarEntry;\n\taccessor?: IStatusbarEntryAccessor;\n}\n\nexport class StatusbarPart extends Part implements IStatusbarService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\t//#region IView\n\n\treadonly minimumWidth: number = 0;\n\treadonly maximumWidth: number = Number.POSITIVE_INFINITY;\n\treadonly minimumHeight: number = 22;\n\treadonly maximumHeight: number = 22;\n\n\t//#endregion\n\n\tprivate styleElement: HTMLStyleElement | undefined;\n\n\tprivate pendingEntries: IPendingStatusbarEntry[] = [];\n\n\tprivate readonly viewModel = this._register(new StatusbarViewModel(this.storageService));\n\n\treadonly onDidChangeEntryVisibility = this.viewModel.onDidChangeEntryVisibility;\n\n\tprivate leftItemsContainer: HTMLElement | undefined;\n\tprivate rightItemsContainer: HTMLElement | undefined;\n\n\tprivate readonly hoverDelegate = new class implements IHoverDelegate {\n\n\t\tprivate lastHoverHideTime = 0;\n\n\t\treadonly placement = 'element';\n\n\t\tget delay() {\n\t\t\tif (Date.now() - this.lastHoverHideTime < 200) {\n\t\t\t\treturn 0; // show instantly when a hover was recently shown\n\t\t\t}\n\n\t\t\treturn this.configurationService.getValue<number>('workbench.hover.delay');\n\t\t}\n\n\t\tconstructor(\n\t\t\tprivate readonly configurationService: IConfigurationService,\n\t\t\tprivate readonly hoverService: IHoverService\n\t\t) { }\n\n\t\tshowHover(options: IHoverDelegateOptions, focus?: boolean): IHoverWidget | undefined {\n\t\t\treturn this.hoverService.showHover({\n\t\t\t\t...options,\n\t\t\t\thideOnKeyDown: true\n\t\t\t}, focus);\n\t\t}\n\n\t\tonDidHideHover(): void {\n\t\t\tthis.lastHoverHideTime = Date.now();\n\t\t}\n\t}(this.configurationService, this.hoverService);\n\n\tprivate readonly compactEntriesDisposable = this._register(new MutableDisposable<DisposableStore>());\n\tprivate readonly styleOverrides = new Set<IStatusbarStyleOverride>();\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@IContextMenuService private contextMenuService: IContextMenuService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IHoverService private readonly hoverService: IHoverService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper(Parts.STATUSBAR_PART, { hasTitle: false }, themeService, storageService, layoutService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Entry visibility changes\n\t\tthis._register(this.onDidChangeEntryVisibility(() => this.updateCompactEntries()));\n\n\t\t// Workbench state changes\n\t\tthis._register(this.contextService.onDidChangeWorkbenchState(() => this.updateStyles()));\n\t}\n\n\taddEntry(entry: IStatusbarEntry, id: string, alignment: StatusbarAlignment, priorityOrLocation: number | IStatusbarEntryLocation | IStatusbarEntryPriority = 0): IStatusbarEntryAccessor {\n\t\tlet priority: IStatusbarEntryPriority;\n\t\tif (isStatusbarEntryPriority(priorityOrLocation)) {\n\t\t\tpriority = priorityOrLocation;\n\t\t} else {\n\t\t\tpriority = {\n\t\t\t\tprimary: priorityOrLocation,\n\t\t\t\tsecondary: hash(id) // derive from identifier to accomplish uniqueness\n\t\t\t};\n\t\t}\n\n\t\t// As long as we have not been created into a container yet, record all entries\n\t\t// that are pending so that they can get created at a later point\n\t\tif (!this.element) {\n\t\t\treturn this.doAddPendingEntry(entry, id, alignment, priority);\n\t\t}\n\n\t\t// Otherwise add to view\n\t\treturn this.doAddEntry(entry, id, alignment, priority);\n\t}\n\n\tprivate doAddPendingEntry(entry: IStatusbarEntry, id: string, alignment: StatusbarAlignment, priority: IStatusbarEntryPriority): IStatusbarEntryAccessor {\n\t\tconst pendingEntry: IPendingStatusbarEntry = { entry, id, alignment, priority };\n\t\tthis.pendingEntries.push(pendingEntry);\n\n\t\tconst accessor: IStatusbarEntryAccessor = {\n\t\t\tupdate: (entry: IStatusbarEntry) => {\n\t\t\t\tif (pendingEntry.accessor) {\n\t\t\t\t\tpendingEntry.accessor.update(entry);\n\t\t\t\t} else {\n\t\t\t\t\tpendingEntry.entry = entry;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tdispose: () => {\n\t\t\t\tif (pendingEntry.accessor) {\n\t\t\t\t\tpendingEntry.accessor.dispose();\n\t\t\t\t} else {\n\t\t\t\t\tthis.pendingEntries = this.pendingEntries.filter(entry => entry !== pendingEntry);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\treturn accessor;\n\t}\n\n\tprivate doAddEntry(entry: IStatusbarEntry, id: string, alignment: StatusbarAlignment, priority: IStatusbarEntryPriority): IStatusbarEntryAccessor {\n\n\t\t// View model item\n\t\tconst itemContainer = this.doCreateStatusItem(id, alignment);\n\t\tconst item = this.instantiationService.createInstance(StatusbarEntryItem, itemContainer, entry, this.hoverDelegate);\n\n\t\t// View model entry\n\t\tconst viewModelEntry: IStatusbarViewModelEntry = new class implements IStatusbarViewModelEntry {\n\t\t\treadonly id = id;\n\t\t\treadonly alignment = alignment;\n\t\t\treadonly priority = priority;\n\t\t\treadonly container = itemContainer;\n\t\t\treadonly labelContainer = item.labelContainer;\n\n\t\t\tget name() { return item.name; }\n\t\t\tget hasCommand() { return item.hasCommand; }\n\t\t};\n\n\t\t// Add to view model\n\t\tconst { needsFullRefresh } = this.doAddOrRemoveModelEntry(viewModelEntry, true);\n\t\tif (needsFullRefresh) {\n\t\t\tthis.appendStatusbarEntries();\n\t\t} else {\n\t\t\tthis.appendStatusbarEntry(viewModelEntry);\n\t\t}\n\n\t\treturn {\n\t\t\tupdate: entry => {\n\t\t\t\titem.update(entry);\n\t\t\t},\n\t\t\tdispose: () => {\n\t\t\t\tconst { needsFullRefresh } = this.doAddOrRemoveModelEntry(viewModelEntry, false);\n\t\t\t\tif (needsFullRefresh) {\n\t\t\t\t\tthis.appendStatusbarEntries();\n\t\t\t\t} else {\n\t\t\t\t\titemContainer.remove();\n\t\t\t\t}\n\t\t\t\tdispose(item);\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate doCreateStatusItem(id: string, alignment: StatusbarAlignment, ...extraClasses: string[]): HTMLElement {\n\t\tconst itemContainer = document.createElement('div');\n\t\titemContainer.id = id;\n\n\t\titemContainer.classList.add('statusbar-item');\n\t\tif (extraClasses) {\n\t\t\titemContainer.classList.add(...extraClasses);\n\t\t}\n\n\t\tif (alignment === StatusbarAlignment.RIGHT) {\n\t\t\titemContainer.classList.add('right');\n\t\t} else {\n\t\t\titemContainer.classList.add('left');\n\t\t}\n\n\t\treturn itemContainer;\n\t}\n\n\tprivate doAddOrRemoveModelEntry(entry: IStatusbarViewModelEntry, add: boolean) {\n\n\t\t// Update model but remember previous entries\n\t\tconst entriesBefore = this.viewModel.entries;\n\t\tif (add) {\n\t\t\tthis.viewModel.add(entry);\n\t\t} else {\n\t\t\tthis.viewModel.remove(entry);\n\t\t}\n\t\tconst entriesAfter = this.viewModel.entries;\n\n\t\t// Apply operation onto the entries from before\n\t\tif (add) {\n\t\t\tentriesBefore.splice(entriesAfter.indexOf(entry), 0, entry);\n\t\t} else {\n\t\t\tentriesBefore.splice(entriesBefore.indexOf(entry), 1);\n\t\t}\n\n\t\t// Figure out if a full refresh is needed by comparing arrays\n\t\tconst needsFullRefresh = !equals(entriesBefore, entriesAfter);\n\n\t\treturn { needsFullRefresh };\n\t}\n\n\tisEntryVisible(id: string): boolean {\n\t\treturn !this.viewModel.isHidden(id);\n\t}\n\n\tupdateEntryVisibility(id: string, visible: boolean): void {\n\t\tif (visible) {\n\t\t\tthis.viewModel.show(id);\n\t\t} else {\n\t\t\tthis.viewModel.hide(id);\n\t\t}\n\t}\n\n\tfocusNextEntry(): void {\n\t\tthis.viewModel.focusNextEntry();\n\t}\n\n\tfocusPreviousEntry(): void {\n\t\tthis.viewModel.focusPreviousEntry();\n\t}\n\n\tisEntryFocused(): boolean {\n\t\treturn this.viewModel.isEntryFocused();\n\t}\n\n\tfocus(preserveEntryFocus = true): void {\n\t\tthis.getContainer()?.focus();\n\t\tconst lastFocusedEntry = this.viewModel.lastFocusedEntry;\n\t\tif (preserveEntryFocus && lastFocusedEntry) {\n\t\t\tsetTimeout(() => lastFocusedEntry.labelContainer.focus(), 0); // Need a timeout, for some reason without it the inner label container will not get focused\n\t\t}\n\t}\n\n\tprotected override createContentArea(parent: HTMLElement): HTMLElement {\n\t\tthis.element = parent;\n\n\t\t// Track focus within container\n\t\tconst scopedContextKeyService = this.contextKeyService.createScoped(this.element);\n\t\tStatusBarFocused.bindTo(scopedContextKeyService).set(true);\n\n\t\t// Left items container\n\t\tthis.leftItemsContainer = document.createElement('div');\n\t\tthis.leftItemsContainer.classList.add('left-items', 'items-container');\n\t\tthis.element.appendChild(this.leftItemsContainer);\n\t\tthis.element.tabIndex = 0;\n\n\t\t// Right items container\n\t\tthis.rightItemsContainer = document.createElement('div');\n\t\tthis.rightItemsContainer.classList.add('right-items', 'items-container');\n\t\tthis.element.appendChild(this.rightItemsContainer);\n\n\t\t// Context menu support\n\t\tthis._register(addDisposableListener(parent, EventType.CONTEXT_MENU, e => this.showContextMenu(e)));\n\t\tthis._register(Gesture.addTarget(parent));\n\t\tthis._register(addDisposableListener(parent, TouchEventType.Contextmenu, e => this.showContextMenu(e)));\n\n\t\t// Initial status bar entries\n\t\tthis.createInitialStatusbarEntries();\n\n\t\treturn this.element;\n\t}\n\n\tprivate createInitialStatusbarEntries(): void {\n\n\t\t// Add items in order according to alignment\n\t\tthis.appendStatusbarEntries();\n\n\t\t// Fill in pending entries if any\n\t\twhile (this.pendingEntries.length) {\n\t\t\tconst pending = this.pendingEntries.shift();\n\t\t\tif (pending) {\n\t\t\t\tpending.accessor = this.addEntry(pending.entry, pending.id, pending.alignment, pending.priority.primary);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate appendStatusbarEntries(): void {\n\t\tconst leftItemsContainer = assertIsDefined(this.leftItemsContainer);\n\t\tconst rightItemsContainer = assertIsDefined(this.rightItemsContainer);\n\n\t\t// Clear containers\n\t\tclearNode(leftItemsContainer);\n\t\tclearNode(rightItemsContainer);\n\n\t\t// Append all\n\t\tfor (const entry of [\n\t\t\t...this.viewModel.getEntries(StatusbarAlignment.LEFT),\n\t\t\t...this.viewModel.getEntries(StatusbarAlignment.RIGHT).reverse() // reversing due to flex: row-reverse\n\t\t]) {\n\t\t\tconst target = entry.alignment === StatusbarAlignment.LEFT ? leftItemsContainer : rightItemsContainer;\n\n\t\t\ttarget.appendChild(entry.container);\n\t\t}\n\n\t\t// Update compact entries\n\t\tthis.updateCompactEntries();\n\t}\n\n\tprivate appendStatusbarEntry(entry: IStatusbarViewModelEntry): void {\n\t\tconst entries = this.viewModel.getEntries(entry.alignment);\n\n\t\tif (entry.alignment === StatusbarAlignment.RIGHT) {\n\t\t\tentries.reverse(); // reversing due to flex: row-reverse\n\t\t}\n\n\t\tconst target = assertIsDefined(entry.alignment === StatusbarAlignment.LEFT ? this.leftItemsContainer : this.rightItemsContainer);\n\n\t\tconst index = entries.indexOf(entry);\n\t\tif (index + 1 === entries.length) {\n\t\t\ttarget.appendChild(entry.container); // append at the end if last\n\t\t} else {\n\t\t\ttarget.insertBefore(entry.container, entries[index + 1].container); // insert before next element otherwise\n\t\t}\n\n\t\t// Update compact entries\n\t\tthis.updateCompactEntries();\n\t}\n\n\tprivate updateCompactEntries(): void {\n\t\tconst entries = this.viewModel.entries;\n\n\t\t// Find visible entries and clear compact related CSS classes if any\n\t\tconst mapIdToVisibleEntry = new Map<string, IStatusbarViewModelEntry>();\n\t\tfor (const entry of entries) {\n\t\t\tif (!this.viewModel.isHidden(entry.id)) {\n\t\t\t\tmapIdToVisibleEntry.set(entry.id, entry);\n\t\t\t}\n\n\t\t\tentry.container.classList.remove('compact-left', 'compact-right');\n\t\t}\n\n\t\t// Figure out groups of entries with `compact` alignment\n\t\tconst compactEntryGroups = new Map<string, Set<IStatusbarViewModelEntry>>();\n\t\tfor (const entry of mapIdToVisibleEntry.values()) {\n\t\t\tif (\n\t\t\t\tisStatusbarEntryLocation(entry.priority.primary) && // entry references another entry as location\n\t\t\t\tentry.priority.primary.compact\t\t\t\t\t\t// entry wants to be compact\n\t\t\t) {\n\t\t\t\tconst locationId = entry.priority.primary.id;\n\t\t\t\tconst location = mapIdToVisibleEntry.get(locationId);\n\t\t\t\tif (!location) {\n\t\t\t\t\tcontinue; // skip if location does not exist\n\t\t\t\t}\n\n\t\t\t\t// Build a map of entries that are compact among each other\n\t\t\t\tlet compactEntryGroup = compactEntryGroups.get(locationId);\n\t\t\t\tif (!compactEntryGroup) {\n\t\t\t\t\tcompactEntryGroup = new Set<IStatusbarViewModelEntry>([entry, location]);\n\t\t\t\t\tcompactEntryGroups.set(locationId, compactEntryGroup);\n\t\t\t\t} else {\n\t\t\t\t\tcompactEntryGroup.add(entry);\n\t\t\t\t}\n\n\t\t\t\t// Adjust CSS classes to move compact items closer together\n\t\t\t\tif (entry.priority.primary.alignment === StatusbarAlignment.LEFT) {\n\t\t\t\t\tlocation.container.classList.add('compact-left');\n\t\t\t\t\tentry.container.classList.add('compact-right');\n\t\t\t\t} else {\n\t\t\t\t\tlocation.container.classList.add('compact-right');\n\t\t\t\t\tentry.container.classList.add('compact-left');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\t// Install mouse listeners to update hover feedback for\n\t\t// all compact entries that belong to each other\n\t\tconst statusBarItemHoverBackground = this.getColor(STATUS_BAR_ITEM_HOVER_BACKGROUND);\n\t\tconst statusBarItemCompactHoverBackground = this.getColor(STATUS_BAR_ITEM_COMPACT_HOVER_BACKGROUND);\n\t\tthis.compactEntriesDisposable.value = new DisposableStore();\n\t\tif (statusBarItemHoverBackground && statusBarItemCompactHoverBackground && !isHighContrast(this.theme.type)) {\n\t\t\tfor (const [, compactEntryGroup] of compactEntryGroups) {\n\t\t\t\tfor (const compactEntry of compactEntryGroup) {\n\t\t\t\t\tif (!compactEntry.hasCommand) {\n\t\t\t\t\t\tcontinue; // only show hover feedback when we have a command\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.compactEntriesDisposable.value.add(addDisposableListener(compactEntry.labelContainer, EventType.MOUSE_OVER, () => {\n\t\t\t\t\t\tcompactEntryGroup.forEach(compactEntry => compactEntry.labelContainer.style.backgroundColor = statusBarItemHoverBackground);\n\t\t\t\t\t\tcompactEntry.labelContainer.style.backgroundColor = statusBarItemCompactHoverBackground;\n\t\t\t\t\t}));\n\n\t\t\t\t\tthis.compactEntriesDisposable.value.add(addDisposableListener(compactEntry.labelContainer, EventType.MOUSE_OUT, () => {\n\t\t\t\t\t\tcompactEntryGroup.forEach(compactEntry => compactEntry.labelContainer.style.backgroundColor = '');\n\t\t\t\t\t}));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate showContextMenu(e: MouseEvent | GestureEvent): void {\n\t\tEventHelper.stop(e, true);\n\n\t\tconst event = new StandardMouseEvent(e);\n\n\t\tlet actions: IAction[] | undefined = undefined;\n\t\tthis.contextMenuService.showContextMenu({\n\t\t\tgetAnchor: () => event,\n\t\t\tgetActions: () => {\n\t\t\t\tactions = this.getContextMenuActions(event);\n\n\t\t\t\treturn actions;\n\t\t\t},\n\t\t\tonHide: () => {\n\t\t\t\tif (actions) {\n\t\t\t\t\tdisposeIfDisposable(actions);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate getContextMenuActions(event: StandardMouseEvent): IAction[] {\n\t\tconst actions: IAction[] = [];\n\n\t\t// Provide an action to hide the status bar at last\n\t\tactions.push(toAction({ id: ToggleStatusbarVisibilityAction.ID, label: localize('hideStatusBar', \"Hide Status Bar\"), run: () => this.instantiationService.invokeFunction(accessor => new ToggleStatusbarVisibilityAction().run(accessor)) }));\n\t\tactions.push(new Separator());\n\n\t\t// Show an entry per known status entry\n\t\t// Note: even though entries have an identifier, there can be multiple entries\n\t\t// having the same identifier (e.g. from extensions). So we make sure to only\n\t\t// show a single entry per identifier we handled.\n\t\tconst handledEntries = new Set<string>();\n\t\tfor (const entry of this.viewModel.entries) {\n\t\t\tif (!handledEntries.has(entry.id)) {\n\t\t\t\tactions.push(new ToggleStatusbarEntryVisibilityAction(entry.id, entry.name, this.viewModel));\n\t\t\t\thandledEntries.add(entry.id);\n\t\t\t}\n\t\t}\n\n\t\t// Figure out if mouse is over an entry\n\t\tlet statusEntryUnderMouse: IStatusbarViewModelEntry | undefined = undefined;\n\t\tfor (let element: HTMLElement | null = event.target; element; element = element.parentElement) {\n\t\t\tconst entry = this.viewModel.findEntry(element);\n\t\t\tif (entry) {\n\t\t\t\tstatusEntryUnderMouse = entry;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (statusEntryUnderMouse) {\n\t\t\tactions.push(new Separator());\n\t\t\tactions.push(new HideStatusbarEntryAction(statusEntryUnderMouse.id, statusEntryUnderMouse.name, this.viewModel));\n\t\t}\n\n\t\treturn actions;\n\t}\n\n\toverride updateStyles(): void {\n\t\tsuper.updateStyles();\n\n\t\tconst container = assertIsDefined(this.getContainer());\n\t\tconst styleOverride: IStatusbarStyleOverride | undefined = [...this.styleOverrides].sort((a, b) => a.priority - b.priority)[0];\n\n\t\t// Background / foreground colors\n\t\tconst backgroundColor = this.getColor(styleOverride?.background ?? (this.contextService.getWorkbenchState() !== WorkbenchState.EMPTY ? STATUS_BAR_BACKGROUND : STATUS_BAR_NO_FOLDER_BACKGROUND)) || '';\n\t\tcontainer.style.backgroundColor = backgroundColor;\n\t\tconst foregroundColor = this.getColor(styleOverride?.foreground ?? (this.contextService.getWorkbenchState() !== WorkbenchState.EMPTY ? STATUS_BAR_FOREGROUND : STATUS_BAR_NO_FOLDER_FOREGROUND)) || '';\n\t\tcontainer.style.color = foregroundColor;\n\t\tconst itemBorderColor = this.getColor(STATUS_BAR_ITEM_FOCUS_BORDER);\n\n\t\t// Border color\n\t\tconst borderColor = this.getColor(styleOverride?.border ?? (this.contextService.getWorkbenchState() !== WorkbenchState.EMPTY ? STATUS_BAR_BORDER : STATUS_BAR_NO_FOLDER_BORDER)) || this.getColor(contrastBorder);\n\t\tif (borderColor) {\n\t\t\tcontainer.classList.add('status-border-top');\n\t\t\tcontainer.style.setProperty('--status-border-top-color', borderColor);\n\t\t} else {\n\t\t\tcontainer.classList.remove('status-border-top');\n\t\t\tcontainer.style.removeProperty('--status-border-top-color');\n\t\t}\n\n\t\t// Colors and focus outlines via dynamic stylesheet\n\n\t\tconst statusBarFocusColor = this.getColor(STATUS_BAR_FOCUS_BORDER);\n\n\t\tif (!this.styleElement) {\n\t\t\tthis.styleElement = createStyleSheet(container);\n\t\t}\n\n\t\tthis.styleElement.textContent = `\n\n\t\t\t\t/* Status bar focus outline */\n\t\t\t\t.monaco-workbench .part.statusbar:focus {\n\t\t\t\t\toutline-color: ${statusBarFocusColor};\n\t\t\t\t}\n\n\t\t\t\t/* Status bar item focus outline */\n\t\t\t\t.monaco-workbench .part.statusbar > .items-container > .statusbar-item a:focus-visible:not(.disabled) {\n\t\t\t\t\toutline: 1px solid ${this.getColor(activeContrastBorder) ?? itemBorderColor};\n\t\t\t\t\toutline-offset: ${borderColor ? '-2px' : '-1px'};\n\t\t\t\t}\n\n\t\t\t\t/* Notification Beak */\n\t\t\t\t.monaco-workbench .part.statusbar > .items-container > .statusbar-item.has-beak > .status-bar-item-beak-container:before {\n\t\t\t\t\tborder-bottom-color: ${backgroundColor};\n\t\t\t\t}\n\t\t\t`;\n\t}\n\n\toverride layout(width: number, height: number, top: number, left: number): void {\n\t\tsuper.layout(width, height, top, left);\n\t\tsuper.layoutContents(width, height);\n\t}\n\n\toverrideStyle(style: IStatusbarStyleOverride): IDisposable {\n\t\tthis.styleOverrides.add(style);\n\t\tthis.updateStyles();\n\n\t\treturn toDisposable(() => {\n\t\t\tthis.styleOverrides.delete(style);\n\t\t\tthis.updateStyles();\n\t\t});\n\t}\n\n\ttoJSON(): object {\n\t\treturn {\n\t\t\ttype: Parts.STATUSBAR_PART\n\t\t};\n\t}\n}\n\nregisterSingleton(IStatusbarService, StatusbarPart, InstantiationType.Eager);\n"]}