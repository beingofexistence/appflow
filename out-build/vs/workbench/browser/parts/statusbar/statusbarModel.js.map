{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/browser/parts/statusbar/statusbarModel.ts"],"names":[],"mappings":"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","file":"statusbarModel.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { isStatusbarEntryLocation, IStatusbarEntryPriority, StatusbarAlignment } from 'vs/workbench/services/statusbar/browser/statusbar';\nimport { hide, show, isAncestor } from 'vs/base/browser/dom';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { Emitter } from 'vs/base/common/event';\n\nexport interface IStatusbarViewModelEntry {\n\treadonly id: string;\n\treadonly name: string;\n\treadonly hasCommand: boolean;\n\treadonly alignment: StatusbarAlignment;\n\treadonly priority: IStatusbarEntryPriority;\n\treadonly container: HTMLElement;\n\treadonly labelContainer: HTMLElement;\n}\n\nexport class StatusbarViewModel extends Disposable {\n\n\tprivate static readonly HIDDEN_ENTRIES_KEY = 'workbench.statusbar.hidden';\n\n\tprivate readonly _onDidChangeEntryVisibility = this._register(new Emitter<{ id: string; visible: boolean }>());\n\treadonly onDidChangeEntryVisibility = this._onDidChangeEntryVisibility.event;\n\n\tprivate _entries: IStatusbarViewModelEntry[] = []; // Intentionally not using a map here since multiple entries can have the same ID\n\tget entries(): IStatusbarViewModelEntry[] { return this._entries.slice(0); }\n\n\tprivate _lastFocusedEntry: IStatusbarViewModelEntry | undefined;\n\tget lastFocusedEntry(): IStatusbarViewModelEntry | undefined {\n\t\treturn this._lastFocusedEntry && !this.isHidden(this._lastFocusedEntry.id) ? this._lastFocusedEntry : undefined;\n\t}\n\n\tprivate hidden = new Set<string>();\n\n\tconstructor(private readonly storageService: IStorageService) {\n\t\tsuper();\n\n\t\tthis.restoreState();\n\t\tthis.registerListeners();\n\t}\n\n\tprivate restoreState(): void {\n\t\tconst hiddenRaw = this.storageService.get(StatusbarViewModel.HIDDEN_ENTRIES_KEY, StorageScope.PROFILE);\n\t\tif (hiddenRaw) {\n\t\t\ttry {\n\t\t\t\tconst hiddenArray: string[] = JSON.parse(hiddenRaw);\n\t\t\t\tthis.hidden = new Set(hiddenArray);\n\t\t\t} catch (error) {\n\t\t\t\t// ignore parsing errors\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.storageService.onDidChangeValue(StorageScope.PROFILE, StatusbarViewModel.HIDDEN_ENTRIES_KEY, this._register(new DisposableStore()))(() => this.onDidStorageValueChange()));\n\t}\n\n\tprivate onDidStorageValueChange(): void {\n\n\t\t// Keep current hidden entries\n\t\tconst currentlyHidden = new Set(this.hidden);\n\n\t\t// Load latest state of hidden entries\n\t\tthis.hidden.clear();\n\t\tthis.restoreState();\n\n\t\tconst changed = new Set<string>();\n\n\t\t// Check for each entry that is now visible\n\t\tfor (const id of currentlyHidden) {\n\t\t\tif (!this.hidden.has(id)) {\n\t\t\t\tchanged.add(id);\n\t\t\t}\n\t\t}\n\n\t\t// Check for each entry that is now hidden\n\t\tfor (const id of this.hidden) {\n\t\t\tif (!currentlyHidden.has(id)) {\n\t\t\t\tchanged.add(id);\n\t\t\t}\n\t\t}\n\n\t\t// Update visibility for entries have changed\n\t\tif (changed.size > 0) {\n\t\t\tfor (const entry of this._entries) {\n\t\t\t\tif (changed.has(entry.id)) {\n\t\t\t\t\tthis.updateVisibility(entry.id, true);\n\n\t\t\t\t\tchanged.delete(entry.id);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tadd(entry: IStatusbarViewModelEntry): void {\n\n\t\t// Add to set of entries\n\t\tthis._entries.push(entry);\n\n\t\t// Update visibility directly\n\t\tthis.updateVisibility(entry, false);\n\n\t\t// Sort according to priority\n\t\tthis.sort();\n\n\t\t// Mark first/last visible entry\n\t\tthis.markFirstLastVisibleEntry();\n\t}\n\n\tremove(entry: IStatusbarViewModelEntry): void {\n\t\tconst index = this._entries.indexOf(entry);\n\t\tif (index >= 0) {\n\n\t\t\t// Remove from entries\n\t\t\tthis._entries.splice(index, 1);\n\n\t\t\t// Re-sort entries if this one was used\n\t\t\t// as reference from other entries\n\t\t\tif (this._entries.some(otherEntry => isStatusbarEntryLocation(otherEntry.priority.primary) && otherEntry.priority.primary.id === entry.id)) {\n\t\t\t\tthis.sort();\n\t\t\t}\n\n\t\t\t// Mark first/last visible entry\n\t\t\tthis.markFirstLastVisibleEntry();\n\t\t}\n\t}\n\n\tisHidden(id: string): boolean {\n\t\treturn this.hidden.has(id);\n\t}\n\n\thide(id: string): void {\n\t\tif (!this.hidden.has(id)) {\n\t\t\tthis.hidden.add(id);\n\n\t\t\tthis.updateVisibility(id, true);\n\n\t\t\tthis.saveState();\n\t\t}\n\t}\n\n\tshow(id: string): void {\n\t\tif (this.hidden.has(id)) {\n\t\t\tthis.hidden.delete(id);\n\n\t\t\tthis.updateVisibility(id, true);\n\n\t\t\tthis.saveState();\n\t\t}\n\t}\n\n\tfindEntry(container: HTMLElement): IStatusbarViewModelEntry | undefined {\n\t\treturn this._entries.find(entry => entry.container === container);\n\t}\n\n\tgetEntries(alignment: StatusbarAlignment): IStatusbarViewModelEntry[] {\n\t\treturn this._entries.filter(entry => entry.alignment === alignment);\n\t}\n\n\tfocusNextEntry(): void {\n\t\tthis.focusEntry(+1, 0);\n\t}\n\n\tfocusPreviousEntry(): void {\n\t\tthis.focusEntry(-1, this.entries.length - 1);\n\t}\n\n\tisEntryFocused(): boolean {\n\t\treturn !!this.getFocusedEntry();\n\t}\n\n\tprivate getFocusedEntry(): IStatusbarViewModelEntry | undefined {\n\t\treturn this._entries.find(entry => isAncestor(document.activeElement, entry.container));\n\t}\n\n\tprivate focusEntry(delta: number, restartPosition: number): void {\n\n\t\tconst getVisibleEntry = (start: number) => {\n\t\t\tlet indexToFocus = start;\n\t\t\tlet entry = (indexToFocus >= 0 && indexToFocus < this._entries.length) ? this._entries[indexToFocus] : undefined;\n\t\t\twhile (entry && this.isHidden(entry.id)) {\n\t\t\t\tindexToFocus += delta;\n\t\t\t\tentry = (indexToFocus >= 0 && indexToFocus < this._entries.length) ? this._entries[indexToFocus] : undefined;\n\t\t\t}\n\n\t\t\treturn entry;\n\t\t};\n\n\t\tconst focused = this.getFocusedEntry();\n\t\tif (focused) {\n\t\t\tconst entry = getVisibleEntry(this._entries.indexOf(focused) + delta);\n\t\t\tif (entry) {\n\t\t\t\tthis._lastFocusedEntry = entry;\n\n\t\t\t\tentry.labelContainer.focus();\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst entry = getVisibleEntry(restartPosition);\n\t\tif (entry) {\n\t\t\tthis._lastFocusedEntry = entry;\n\t\t\tentry.labelContainer.focus();\n\t\t}\n\t}\n\n\tprivate updateVisibility(id: string, trigger: boolean): void;\n\tprivate updateVisibility(entry: IStatusbarViewModelEntry, trigger: boolean): void;\n\tprivate updateVisibility(arg1: string | IStatusbarViewModelEntry, trigger: boolean): void {\n\n\t\t// By identifier\n\t\tif (typeof arg1 === 'string') {\n\t\t\tconst id = arg1;\n\n\t\t\tfor (const entry of this._entries) {\n\t\t\t\tif (entry.id === id) {\n\t\t\t\t\tthis.updateVisibility(entry, trigger);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// By entry\n\t\telse {\n\t\t\tconst entry = arg1;\n\t\t\tconst isHidden = this.isHidden(entry.id);\n\n\t\t\t// Use CSS to show/hide item container\n\t\t\tif (isHidden) {\n\t\t\t\thide(entry.container);\n\t\t\t} else {\n\t\t\t\tshow(entry.container);\n\t\t\t}\n\n\t\t\tif (trigger) {\n\t\t\t\tthis._onDidChangeEntryVisibility.fire({ id: entry.id, visible: !isHidden });\n\t\t\t}\n\n\t\t\t// Mark first/last visible entry\n\t\t\tthis.markFirstLastVisibleEntry();\n\t\t}\n\t}\n\n\tprivate saveState(): void {\n\t\tif (this.hidden.size > 0) {\n\t\t\tthis.storageService.store(StatusbarViewModel.HIDDEN_ENTRIES_KEY, JSON.stringify(Array.from(this.hidden.values())), StorageScope.PROFILE, StorageTarget.USER);\n\t\t} else {\n\t\t\tthis.storageService.remove(StatusbarViewModel.HIDDEN_ENTRIES_KEY, StorageScope.PROFILE);\n\t\t}\n\t}\n\n\tprivate sort(): void {\n\n\t\t// Split up entries into 2 buckets:\n\t\t// - those with `priority: number` that can be compared\n\t\t// - those with `priority: string` that must be sorted\n\t\t//   relative to another entry if possible\n\t\tconst mapEntryWithNumberedPriorityToIndex = new Map<IStatusbarViewModelEntry, number /* index of entry */>();\n\t\tconst mapEntryWithRelativePriority = new Map<string /* priority of entry */, IStatusbarViewModelEntry[]>();\n\t\tfor (let i = 0; i < this._entries.length; i++) {\n\t\t\tconst entry = this._entries[i];\n\t\t\tif (typeof entry.priority.primary === 'number') {\n\t\t\t\tmapEntryWithNumberedPriorityToIndex.set(entry, i);\n\t\t\t} else {\n\t\t\t\tlet entries = mapEntryWithRelativePriority.get(entry.priority.primary.id);\n\t\t\t\tif (!entries) {\n\t\t\t\t\tentries = [];\n\t\t\t\t\tmapEntryWithRelativePriority.set(entry.priority.primary.id, entries);\n\t\t\t\t}\n\t\t\t\tentries.push(entry);\n\t\t\t}\n\t\t}\n\n\t\t// Sort the entries with `priority: number` according to that\n\t\tconst sortedEntriesWithNumberedPriority = Array.from(mapEntryWithNumberedPriorityToIndex.keys());\n\t\tsortedEntriesWithNumberedPriority.sort((entryA, entryB) => {\n\t\t\tif (entryA.alignment === entryB.alignment) {\n\n\t\t\t\t// Sort by primary/secondary priority: higher values move towards the left\n\n\t\t\t\tif (entryA.priority.primary !== entryB.priority.primary) {\n\t\t\t\t\treturn Number(entryB.priority.primary) - Number(entryA.priority.primary);\n\t\t\t\t}\n\n\t\t\t\tif (entryA.priority.secondary !== entryB.priority.secondary) {\n\t\t\t\t\treturn entryB.priority.secondary - entryA.priority.secondary;\n\t\t\t\t}\n\n\t\t\t\t// otherwise maintain stable order (both values known to be in map)\n\t\t\t\treturn mapEntryWithNumberedPriorityToIndex.get(entryA)! - mapEntryWithNumberedPriorityToIndex.get(entryB)!;\n\t\t\t}\n\n\t\t\tif (entryA.alignment === StatusbarAlignment.LEFT) {\n\t\t\t\treturn -1;\n\t\t\t}\n\n\t\t\tif (entryB.alignment === StatusbarAlignment.LEFT) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn 0;\n\t\t});\n\n\t\tlet sortedEntries: IStatusbarViewModelEntry[];\n\n\t\t// Entries with location: sort in accordingly\n\t\tif (mapEntryWithRelativePriority.size > 0) {\n\t\t\tsortedEntries = [];\n\n\t\t\tfor (const entry of sortedEntriesWithNumberedPriority) {\n\t\t\t\tconst relativeEntries = mapEntryWithRelativePriority.get(entry.id);\n\n\t\t\t\t// Fill relative entries to LEFT\n\t\t\t\tif (relativeEntries) {\n\t\t\t\t\tsortedEntries.push(...relativeEntries.filter(entry => isStatusbarEntryLocation(entry.priority.primary) && entry.priority.primary.alignment === StatusbarAlignment.LEFT));\n\t\t\t\t}\n\n\t\t\t\t// Fill referenced entry\n\t\t\t\tsortedEntries.push(entry);\n\n\t\t\t\t// Fill relative entries to RIGHT\n\t\t\t\tif (relativeEntries) {\n\t\t\t\t\tsortedEntries.push(...relativeEntries.filter(entry => isStatusbarEntryLocation(entry.priority.primary) && entry.priority.primary.alignment === StatusbarAlignment.RIGHT));\n\t\t\t\t}\n\n\t\t\t\t// Delete from map to mark as handled\n\t\t\t\tmapEntryWithRelativePriority.delete(entry.id);\n\t\t\t}\n\n\t\t\t// Finally, just append all entries that reference another entry\n\t\t\t// that does not exist to the end of the list\n\t\t\tfor (const [, entries] of mapEntryWithRelativePriority) {\n\t\t\t\tsortedEntries.push(...entries);\n\t\t\t}\n\t\t}\n\n\t\t// No entries with relative priority: take sorted entries as is\n\t\telse {\n\t\t\tsortedEntries = sortedEntriesWithNumberedPriority;\n\t\t}\n\n\t\t// Take over as new truth of entries\n\t\tthis._entries = sortedEntries;\n\t}\n\n\tprivate markFirstLastVisibleEntry(): void {\n\t\tthis.doMarkFirstLastVisibleStatusbarItem(this.getEntries(StatusbarAlignment.LEFT));\n\t\tthis.doMarkFirstLastVisibleStatusbarItem(this.getEntries(StatusbarAlignment.RIGHT));\n\t}\n\n\tprivate doMarkFirstLastVisibleStatusbarItem(entries: IStatusbarViewModelEntry[]): void {\n\t\tlet firstVisibleItem: IStatusbarViewModelEntry | undefined;\n\t\tlet lastVisibleItem: IStatusbarViewModelEntry | undefined;\n\n\t\tfor (const entry of entries) {\n\n\t\t\t// Clear previous first\n\t\t\tentry.container.classList.remove('first-visible-item', 'last-visible-item');\n\n\t\t\tconst isVisible = !this.isHidden(entry.id);\n\t\t\tif (isVisible) {\n\t\t\t\tif (!firstVisibleItem) {\n\t\t\t\t\tfirstVisibleItem = entry;\n\t\t\t\t}\n\n\t\t\t\tlastVisibleItem = entry;\n\t\t\t}\n\t\t}\n\n\t\t// Mark: first visible item\n\t\tfirstVisibleItem?.container.classList.add('first-visible-item');\n\n\t\t// Mark: last visible item\n\t\tlastVisibleItem?.container.classList.add('last-visible-item');\n\t}\n}\n"]}