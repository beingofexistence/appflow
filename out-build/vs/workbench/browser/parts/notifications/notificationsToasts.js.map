{"version":3,"sources":["vs/workbench/browser/parts/notifications/notificationsToasts.ts"],"names":[],"mappings":"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","file":"notificationsToasts.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/notificationsToasts';\nimport { localize } from 'vs/nls';\nimport { INotificationsModel, NotificationChangeType, INotificationChangeEvent, INotificationViewItem, NotificationViewItemContentChangeKind } from 'vs/workbench/common/notifications';\nimport { IDisposable, dispose, toDisposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { isAncestor, addDisposableListener, EventType, Dimension, scheduleAtNextAnimationFrame } from 'vs/base/browser/dom';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { NotificationsList } from 'vs/workbench/browser/parts/notifications/notificationsList';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IWorkbenchLayoutService, Parts } from 'vs/workbench/services/layout/browser/layoutService';\nimport { NOTIFICATIONS_TOAST_BORDER, NOTIFICATIONS_BACKGROUND } from 'vs/workbench/common/theme';\nimport { IThemeService, Themable } from 'vs/platform/theme/common/themeService';\nimport { widgetShadow } from 'vs/platform/theme/common/colorRegistry';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { INotificationsToastController } from 'vs/workbench/browser/parts/notifications/notificationsCommands';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { Severity, NotificationsFilter, NotificationPriority } from 'vs/platform/notification/common/notification';\nimport { ScrollbarVisibility } from 'vs/base/common/scrollable';\nimport { ILifecycleService, LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { IntervalCounter } from 'vs/base/common/async';\nimport { assertIsDefined } from 'vs/base/common/types';\nimport { NotificationsToastsVisibleContext } from 'vs/workbench/common/contextkeys';\n\ninterface INotificationToast {\n\treadonly item: INotificationViewItem;\n\treadonly list: NotificationsList;\n\treadonly container: HTMLElement;\n\treadonly toast: HTMLElement;\n}\n\nenum ToastVisibility {\n\tHIDDEN_OR_VISIBLE,\n\tHIDDEN,\n\tVISIBLE\n}\n\nexport class NotificationsToasts extends Themable implements INotificationsToastController {\n\n\tprivate static readonly MAX_WIDTH = 450;\n\tprivate static readonly MAX_NOTIFICATIONS = 3;\n\n\tprivate static readonly PURGE_TIMEOUT: { [severity: number]: number } = {\n\t\t[Severity.Info]: 15000,\n\t\t[Severity.Warning]: 18000,\n\t\t[Severity.Error]: 20000\n\t};\n\n\tprivate static readonly SPAM_PROTECTION = {\n\t\t// Count for the number of notifications over 800ms...\n\t\tinterval: 800,\n\t\t// ...and ensure we are not showing more than MAX_NOTIFICATIONS\n\t\tlimit: NotificationsToasts.MAX_NOTIFICATIONS\n\t};\n\n\tprivate readonly _onDidChangeVisibility = this._register(new Emitter<void>());\n\treadonly onDidChangeVisibility = this._onDidChangeVisibility.event;\n\n\tprivate _isVisible = false;\n\tget isVisible(): boolean { return !!this._isVisible; }\n\n\tprivate notificationsToastsContainer: HTMLElement | undefined;\n\tprivate workbenchDimensions: Dimension | undefined;\n\tprivate isNotificationsCenterVisible: boolean | undefined;\n\n\tprivate readonly mapNotificationToToast = new Map<INotificationViewItem, INotificationToast>();\n\tprivate readonly mapNotificationToDisposable = new Map<INotificationViewItem, IDisposable>();\n\n\tprivate readonly notificationsToastsVisibleContextKey = NotificationsToastsVisibleContext.bindTo(this.contextKeyService);\n\n\tprivate readonly addedToastsIntervalCounter = new IntervalCounter(NotificationsToasts.SPAM_PROTECTION.interval);\n\n\tconstructor(\n\t\tprivate readonly container: HTMLElement,\n\t\tprivate readonly model: INotificationsModel,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@IHostService private readonly hostService: IHostService\n\t) {\n\t\tsuper(themeService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Layout\n\t\tthis._register(this.layoutService.onDidLayout(dimension => this.layout(Dimension.lift(dimension))));\n\n\t\t// Delay some tasks until after we have restored\n\t\t// to reduce UI pressure from the startup phase\n\t\tthis.lifecycleService.when(LifecyclePhase.Restored).then(() => {\n\n\t\t\t// Show toast for initial notifications if any\n\t\t\tthis.model.notifications.forEach(notification => this.addToast(notification));\n\n\t\t\t// Update toasts on notification changes\n\t\t\tthis._register(this.model.onDidChangeNotification(e => this.onDidChangeNotification(e)));\n\t\t});\n\n\t\t// Filter\n\t\tthis._register(this.model.onDidChangeFilter(filter => {\n\t\t\tif (filter === NotificationsFilter.SILENT || filter === NotificationsFilter.ERROR) {\n\t\t\t\tthis.hide();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate onDidChangeNotification(e: INotificationChangeEvent): void {\n\t\tswitch (e.kind) {\n\t\t\tcase NotificationChangeType.ADD:\n\t\t\t\treturn this.addToast(e.item);\n\t\t\tcase NotificationChangeType.REMOVE:\n\t\t\t\treturn this.removeToast(e.item);\n\t\t}\n\t}\n\n\tprivate addToast(item: INotificationViewItem): void {\n\t\tif (this.isNotificationsCenterVisible) {\n\t\t\treturn; // do not show toasts while notification center is visible\n\t\t}\n\n\t\tif (item.priority === NotificationPriority.SILENT) {\n\t\t\treturn; // do not show toasts for silenced notifications\n\t\t}\n\n\t\t// Optimization: it is possible that a lot of notifications are being\n\t\t// added in a very short time. To prevent this kind of spam, we protect\n\t\t// against showing too many notifications at once. Since they can always\n\t\t// be accessed from the notification center, a user can always get to\n\t\t// them later on.\n\t\t// (see also https://github.com/microsoft/vscode/issues/107935)\n\t\tif (this.addedToastsIntervalCounter.increment() > NotificationsToasts.SPAM_PROTECTION.limit) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Optimization: showing a notification toast can be expensive\n\t\t// because of the associated animation. If the renderer is busy\n\t\t// doing actual work, the animation can cause a lot of slowdown\n\t\t// As such we use `scheduleAtNextAnimationFrame` to push out\n\t\t// the toast until the renderer has time to process it.\n\t\t// (see also https://github.com/microsoft/vscode/issues/107935)\n\t\tconst itemDisposables = new DisposableStore();\n\t\tthis.mapNotificationToDisposable.set(item, itemDisposables);\n\t\titemDisposables.add(scheduleAtNextAnimationFrame(() => this.doAddToast(item, itemDisposables)));\n\t}\n\n\tprivate doAddToast(item: INotificationViewItem, itemDisposables: DisposableStore): void {\n\n\t\t// Lazily create toasts containers\n\t\tlet notificationsToastsContainer = this.notificationsToastsContainer;\n\t\tif (!notificationsToastsContainer) {\n\t\t\tnotificationsToastsContainer = this.notificationsToastsContainer = document.createElement('div');\n\t\t\tnotificationsToastsContainer.classList.add('notifications-toasts');\n\n\t\t\tthis.container.appendChild(notificationsToastsContainer);\n\t\t}\n\n\t\t// Make Visible\n\t\tnotificationsToastsContainer.classList.add('visible');\n\n\t\t// Container\n\t\tconst notificationToastContainer = document.createElement('div');\n\t\tnotificationToastContainer.classList.add('notification-toast-container');\n\n\t\tconst firstToast = notificationsToastsContainer.firstChild;\n\t\tif (firstToast) {\n\t\t\tnotificationsToastsContainer.insertBefore(notificationToastContainer, firstToast); // always first\n\t\t} else {\n\t\t\tnotificationsToastsContainer.appendChild(notificationToastContainer);\n\t\t}\n\n\t\t// Toast\n\t\tconst notificationToast = document.createElement('div');\n\t\tnotificationToast.classList.add('notification-toast');\n\t\tnotificationToastContainer.appendChild(notificationToast);\n\n\t\t// Create toast with item and show\n\t\tconst notificationList = this.instantiationService.createInstance(NotificationsList, notificationToast, {\n\t\t\tverticalScrollMode: ScrollbarVisibility.Hidden,\n\t\t\twidgetAriaLabel: (() => {\n\n\t\t\t\tif (!item.source) {\n\t\t\t\t\treturn localize('notificationAriaLabel', \"{0}, notification\", item.message.raw);\n\t\t\t\t}\n\t\t\t\treturn localize('notificationWithSourceAriaLabel', \"{0}, source: {1}, notification\", item.message.raw, item.source);\n\t\t\t})()\n\t\t});\n\t\titemDisposables.add(notificationList);\n\n\t\tconst toast: INotificationToast = { item, list: notificationList, container: notificationToastContainer, toast: notificationToast };\n\t\tthis.mapNotificationToToast.set(item, toast);\n\n\t\t// When disposed, remove as visible\n\t\titemDisposables.add(toDisposable(() => this.updateToastVisibility(toast, false)));\n\n\t\t// Make visible\n\t\tnotificationList.show();\n\n\t\t// Layout lists\n\t\tconst maxDimensions = this.computeMaxDimensions();\n\t\tthis.layoutLists(maxDimensions.width);\n\n\t\t// Show notification\n\t\tnotificationList.updateNotificationsList(0, 0, [item]);\n\n\t\t// Layout container: only after we show the notification to ensure that\n\t\t// the height computation takes the content of it into account!\n\t\tthis.layoutContainer(maxDimensions.height);\n\n\t\t// Re-draw entire item when expansion changes to reveal or hide details\n\t\titemDisposables.add(item.onDidChangeExpansion(() => {\n\t\t\tnotificationList.updateNotificationsList(0, 1, [item]);\n\t\t}));\n\n\t\t// Handle content changes\n\t\t// - actions: re-draw to properly show them\n\t\t// - message: update notification height unless collapsed\n\t\titemDisposables.add(item.onDidChangeContent(e => {\n\t\t\tswitch (e.kind) {\n\t\t\t\tcase NotificationViewItemContentChangeKind.ACTIONS:\n\t\t\t\t\tnotificationList.updateNotificationsList(0, 1, [item]);\n\t\t\t\t\tbreak;\n\t\t\t\tcase NotificationViewItemContentChangeKind.MESSAGE:\n\t\t\t\t\tif (item.expanded) {\n\t\t\t\t\t\tnotificationList.updateNotificationHeight(item);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}));\n\n\t\t// Remove when item gets closed\n\t\tEvent.once(item.onDidClose)(() => {\n\t\t\tthis.removeToast(item);\n\t\t});\n\n\t\t// Automatically purge non-sticky notifications\n\t\tthis.purgeNotification(item, notificationToastContainer, notificationList, itemDisposables);\n\n\t\t// Theming\n\t\tthis.updateStyles();\n\n\t\t// Context Key\n\t\tthis.notificationsToastsVisibleContextKey.set(true);\n\n\t\t// Animate in\n\t\tnotificationToast.classList.add('notification-fade-in');\n\t\titemDisposables.add(addDisposableListener(notificationToast, 'transitionend', () => {\n\t\t\tnotificationToast.classList.remove('notification-fade-in');\n\t\t\tnotificationToast.classList.add('notification-fade-in-done');\n\t\t}));\n\n\t\t// Mark as visible\n\t\titem.updateVisibility(true);\n\n\t\t// Events\n\t\tif (!this._isVisible) {\n\t\t\tthis._isVisible = true;\n\t\t\tthis._onDidChangeVisibility.fire();\n\t\t}\n\t}\n\n\tprivate purgeNotification(item: INotificationViewItem, notificationToastContainer: HTMLElement, notificationList: NotificationsList, disposables: DisposableStore): void {\n\n\t\t// Track mouse over item\n\t\tlet isMouseOverToast = false;\n\t\tdisposables.add(addDisposableListener(notificationToastContainer, EventType.MOUSE_OVER, () => isMouseOverToast = true));\n\t\tdisposables.add(addDisposableListener(notificationToastContainer, EventType.MOUSE_OUT, () => isMouseOverToast = false));\n\n\t\t// Install Timers to Purge Notification\n\t\tlet purgeTimeoutHandle: any;\n\t\tlet listener: IDisposable;\n\n\t\tconst hideAfterTimeout = () => {\n\n\t\t\tpurgeTimeoutHandle = setTimeout(() => {\n\n\t\t\t\t// If the window does not have focus, we wait for the window to gain focus\n\t\t\t\t// again before triggering the timeout again. This prevents an issue where\n\t\t\t\t// focussing the window could immediately hide the notification because the\n\t\t\t\t// timeout was triggered again.\n\t\t\t\tif (!this.hostService.hasFocus) {\n\t\t\t\t\tif (!listener) {\n\t\t\t\t\t\tlistener = this.hostService.onDidChangeFocus(focus => {\n\t\t\t\t\t\t\tif (focus) {\n\t\t\t\t\t\t\t\thideAfterTimeout();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tdisposables.add(listener);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Otherwise...\n\t\t\t\telse if (\n\t\t\t\t\titem.sticky ||\t\t\t\t\t\t\t\t// never hide sticky notifications\n\t\t\t\t\tnotificationList.hasFocus() ||\t\t\t\t// never hide notifications with focus\n\t\t\t\t\tisMouseOverToast\t\t\t\t\t\t\t// never hide notifications under mouse\n\t\t\t\t) {\n\t\t\t\t\thideAfterTimeout();\n\t\t\t\t} else {\n\t\t\t\t\tthis.removeToast(item);\n\t\t\t\t}\n\t\t\t}, NotificationsToasts.PURGE_TIMEOUT[item.severity]);\n\t\t};\n\n\t\thideAfterTimeout();\n\n\t\tdisposables.add(toDisposable(() => clearTimeout(purgeTimeoutHandle)));\n\t}\n\n\tprivate removeToast(item: INotificationViewItem): void {\n\t\tlet focusEditor = false;\n\n\t\t// UI\n\t\tconst notificationToast = this.mapNotificationToToast.get(item);\n\t\tif (notificationToast) {\n\t\t\tconst toastHasDOMFocus = isAncestor(document.activeElement, notificationToast.container);\n\t\t\tif (toastHasDOMFocus) {\n\t\t\t\tfocusEditor = !(this.focusNext() || this.focusPrevious()); // focus next if any, otherwise focus editor\n\t\t\t}\n\n\t\t\tthis.mapNotificationToToast.delete(item);\n\t\t}\n\n\t\t// Disposables\n\t\tconst notificationDisposables = this.mapNotificationToDisposable.get(item);\n\t\tif (notificationDisposables) {\n\t\t\tdispose(notificationDisposables);\n\n\t\t\tthis.mapNotificationToDisposable.delete(item);\n\t\t}\n\n\t\t// Layout if we still have toasts\n\t\tif (this.mapNotificationToToast.size > 0) {\n\t\t\tthis.layout(this.workbenchDimensions);\n\t\t}\n\n\t\t// Otherwise hide if no more toasts to show\n\t\telse {\n\t\t\tthis.doHide();\n\n\t\t\t// Move focus back to editor group as needed\n\t\t\tif (focusEditor) {\n\t\t\t\tthis.editorGroupService.activeGroup.focus();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate removeToasts(): void {\n\n\t\t// Toast\n\t\tthis.mapNotificationToToast.clear();\n\n\t\t// Disposables\n\t\tthis.mapNotificationToDisposable.forEach(disposable => dispose(disposable));\n\t\tthis.mapNotificationToDisposable.clear();\n\n\t\tthis.doHide();\n\t}\n\n\tprivate doHide(): void {\n\t\tthis.notificationsToastsContainer?.classList.remove('visible');\n\n\t\t// Context Key\n\t\tthis.notificationsToastsVisibleContextKey.set(false);\n\n\t\t// Events\n\t\tif (this._isVisible) {\n\t\t\tthis._isVisible = false;\n\t\t\tthis._onDidChangeVisibility.fire();\n\t\t}\n\t}\n\n\thide(): void {\n\t\tconst focusEditor = this.notificationsToastsContainer ? isAncestor(document.activeElement, this.notificationsToastsContainer) : false;\n\n\t\tthis.removeToasts();\n\n\t\tif (focusEditor) {\n\t\t\tthis.editorGroupService.activeGroup.focus();\n\t\t}\n\t}\n\n\tfocus(): boolean {\n\t\tconst toasts = this.getToasts(ToastVisibility.VISIBLE);\n\t\tif (toasts.length > 0) {\n\t\t\ttoasts[0].list.focusFirst();\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfocusNext(): boolean {\n\t\tconst toasts = this.getToasts(ToastVisibility.VISIBLE);\n\t\tfor (let i = 0; i < toasts.length; i++) {\n\t\t\tconst toast = toasts[i];\n\t\t\tif (toast.list.hasFocus()) {\n\t\t\t\tconst nextToast = toasts[i + 1];\n\t\t\t\tif (nextToast) {\n\t\t\t\t\tnextToast.list.focusFirst();\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfocusPrevious(): boolean {\n\t\tconst toasts = this.getToasts(ToastVisibility.VISIBLE);\n\t\tfor (let i = 0; i < toasts.length; i++) {\n\t\t\tconst toast = toasts[i];\n\t\t\tif (toast.list.hasFocus()) {\n\t\t\t\tconst previousToast = toasts[i - 1];\n\t\t\t\tif (previousToast) {\n\t\t\t\t\tpreviousToast.list.focusFirst();\n\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfocusFirst(): boolean {\n\t\tconst toast = this.getToasts(ToastVisibility.VISIBLE)[0];\n\t\tif (toast) {\n\t\t\ttoast.list.focusFirst();\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfocusLast(): boolean {\n\t\tconst toasts = this.getToasts(ToastVisibility.VISIBLE);\n\t\tif (toasts.length > 0) {\n\t\t\ttoasts[toasts.length - 1].list.focusFirst();\n\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tupdate(isCenterVisible: boolean): void {\n\t\tif (this.isNotificationsCenterVisible !== isCenterVisible) {\n\t\t\tthis.isNotificationsCenterVisible = isCenterVisible;\n\n\t\t\t// Hide all toasts when the notificationcenter gets visible\n\t\t\tif (this.isNotificationsCenterVisible) {\n\t\t\t\tthis.removeToasts();\n\t\t\t}\n\t\t}\n\t}\n\n\toverride updateStyles(): void {\n\t\tthis.mapNotificationToToast.forEach(({ toast }) => {\n\t\t\tconst backgroundColor = this.getColor(NOTIFICATIONS_BACKGROUND);\n\t\t\ttoast.style.background = backgroundColor ? backgroundColor : '';\n\n\t\t\tconst widgetShadowColor = this.getColor(widgetShadow);\n\t\t\ttoast.style.boxShadow = widgetShadowColor ? `0 0 8px 2px ${widgetShadowColor}` : '';\n\n\t\t\tconst borderColor = this.getColor(NOTIFICATIONS_TOAST_BORDER);\n\t\t\ttoast.style.border = borderColor ? `1px solid ${borderColor}` : '';\n\t\t});\n\t}\n\n\tprivate getToasts(state: ToastVisibility): INotificationToast[] {\n\t\tconst notificationToasts: INotificationToast[] = [];\n\n\t\tthis.mapNotificationToToast.forEach(toast => {\n\t\t\tswitch (state) {\n\t\t\t\tcase ToastVisibility.HIDDEN_OR_VISIBLE:\n\t\t\t\t\tnotificationToasts.push(toast);\n\t\t\t\t\tbreak;\n\t\t\t\tcase ToastVisibility.HIDDEN:\n\t\t\t\t\tif (!this.isToastInDOM(toast)) {\n\t\t\t\t\t\tnotificationToasts.push(toast);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase ToastVisibility.VISIBLE:\n\t\t\t\t\tif (this.isToastInDOM(toast)) {\n\t\t\t\t\t\tnotificationToasts.push(toast);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\n\t\treturn notificationToasts.reverse(); // from newest to oldest\n\t}\n\n\tlayout(dimension: Dimension | undefined): void {\n\t\tthis.workbenchDimensions = dimension;\n\n\t\tconst maxDimensions = this.computeMaxDimensions();\n\n\t\t// Hide toasts that exceed height\n\t\tif (maxDimensions.height) {\n\t\t\tthis.layoutContainer(maxDimensions.height);\n\t\t}\n\n\t\t// Layout all lists of toasts\n\t\tthis.layoutLists(maxDimensions.width);\n\t}\n\n\tprivate computeMaxDimensions(): Dimension {\n\t\tconst maxWidth = NotificationsToasts.MAX_WIDTH;\n\n\t\tlet availableWidth = maxWidth;\n\t\tlet availableHeight: number | undefined;\n\n\t\tif (this.workbenchDimensions) {\n\n\t\t\t// Make sure notifications are not exceding available width\n\t\t\tavailableWidth = this.workbenchDimensions.width;\n\t\t\tavailableWidth -= (2 * 8); // adjust for paddings left and right\n\n\t\t\t// Make sure notifications are not exceeding available height\n\t\t\tavailableHeight = this.workbenchDimensions.height;\n\t\t\tif (this.layoutService.isVisible(Parts.STATUSBAR_PART)) {\n\t\t\t\tavailableHeight -= 22; // adjust for status bar\n\t\t\t}\n\n\t\t\tif (this.layoutService.isVisible(Parts.TITLEBAR_PART)) {\n\t\t\t\tavailableHeight -= 22; // adjust for title bar\n\t\t\t}\n\n\t\t\tavailableHeight -= (2 * 12); // adjust for paddings top and bottom\n\t\t}\n\n\t\tavailableHeight = typeof availableHeight === 'number'\n\t\t\t? Math.round(availableHeight * 0.618) // try to not cover the full height for stacked toasts\n\t\t\t: 0;\n\n\t\treturn new Dimension(Math.min(maxWidth, availableWidth), availableHeight);\n\t}\n\n\tprivate layoutLists(width: number): void {\n\t\tthis.mapNotificationToToast.forEach(({ list }) => list.layout(width));\n\t}\n\n\tprivate layoutContainer(heightToGive: number): void {\n\t\tlet visibleToasts = 0;\n\t\tfor (const toast of this.getToasts(ToastVisibility.HIDDEN_OR_VISIBLE)) {\n\n\t\t\t// In order to measure the client height, the element cannot have display: none\n\t\t\ttoast.container.style.opacity = '0';\n\t\t\tthis.updateToastVisibility(toast, true);\n\n\t\t\theightToGive -= toast.container.offsetHeight;\n\n\t\t\tlet makeVisible = false;\n\t\t\tif (visibleToasts === NotificationsToasts.MAX_NOTIFICATIONS) {\n\t\t\t\tmakeVisible = false; // never show more than MAX_NOTIFICATIONS\n\t\t\t} else if (heightToGive >= 0) {\n\t\t\t\tmakeVisible = true; // hide toast if available height is too little\n\t\t\t}\n\n\t\t\t// Hide or show toast based on context\n\t\t\tthis.updateToastVisibility(toast, makeVisible);\n\t\t\ttoast.container.style.opacity = '';\n\n\t\t\tif (makeVisible) {\n\t\t\t\tvisibleToasts++;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate updateToastVisibility(toast: INotificationToast, visible: boolean): void {\n\t\tif (this.isToastInDOM(toast) === visible) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Update visibility in DOM\n\t\tconst notificationsToastsContainer = assertIsDefined(this.notificationsToastsContainer);\n\t\tif (visible) {\n\t\t\tnotificationsToastsContainer.appendChild(toast.container);\n\t\t} else {\n\t\t\tnotificationsToastsContainer.removeChild(toast.container);\n\t\t}\n\n\t\t// Update visibility in model\n\t\ttoast.item.updateVisibility(visible);\n\t}\n\n\tprivate isToastInDOM(toast: INotificationToast): boolean {\n\t\treturn !!toast.container.parentElement;\n\t}\n}\n"]}