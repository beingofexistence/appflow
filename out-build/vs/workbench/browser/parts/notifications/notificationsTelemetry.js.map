{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/browser/parts/notifications/notificationsTelemetry.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAsBhG,SAAgB,IAAI,CAAkB,OAA4B,EAAE,MAA0B,EAAE,MAAe;QAC9G,OAAO;YACN,EAAE,EAAE,IAAA,UAAG,EAAE,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC,QAAQ,EAAE;YACvC,MAAM;YACN,MAAM,EAAE,MAAM,IAAI,MAAM;SACxB,CAAC;IACH,CAAC;IAND,oBAMC;IAEM,IAAM,IAAI,GAAV,MAAM,IAAuB,SAAQ,eAAG;QAE9C,YACqC,CAAqB,EAClB,CAAwB;YAE/D,KAAK,EAAE,CAAC;YAH4B,MAAC,GAAD,CAAC,CAAoB;YAClB,MAAC,GAAD,CAAC,CAAuB;YAG/D,IAAI,CAAC,CAAC,EAAkB,CAAC;QAC1B,CAAC;QAEO,CAAC;YACR,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAmB,oBAAoB,CAAC,YAAY,CAAC,EAAE;gBAC3E,MAAM,MAAM,GAAG,YAAY,CAAC,MAAM,IAAI,OAAO,YAAY,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC;gBAC7H,IAAI,CAAC,CAAC,CAAgB,UAAU,CAAyD,mBAAmB,EAAE,IAAI,CAAkB,YAAY,CAAC,OAAO,EAAE,MAAM,EAAE,YAAY,CAAC,QAAQ,KAAK,mCAAoB,CAAC,MAAM,CAAC,CAAC,CAAC;YAC3N,CAAC,CAAC,CAAC,CAAC;YAEJ,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAmB,uBAAuB,CAAC,YAAY,CAAC,EAAE;gBAC9E,MAAM,MAAM,GAAG,YAAY,CAAC,MAAM,IAAI,OAAO,YAAY,CAAC,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC;gBAC7H,IAAI,CAAC,CAAC,CAAgB,UAAU,CAAyD,oBAAoB,EAAE,IAAI,CAAkB,YAAY,CAAC,OAAO,EAAE,MAAM,EAAE,YAAY,CAAC,QAAQ,KAAK,mCAAoB,CAAC,MAAM,CAAC,CAAC,CAAC;YAC5N,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;KACD,CAAA;IArBY,oBAAI;mBAAJ,IAAI;QAGd,WAAA,eAAG,CAAA;QACH,WAAA,kBAAG,CAAA;OAJO,IAAI,CAqBhB","file":"notificationsTelemetry.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { INotificationService, NotificationMessage, NotificationPriority } from 'vs/platform/notification/common/notification';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { hash } from 'vs/base/common/hash';\n\nexport interface NotificationMetrics {\n\treadonly id: string;\n\treadonly silent: boolean;\n\treadonly source?: string;\n}\n\nexport type NotificationMetricsClassification = {\n\tid: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The identifier of the source of the notification.' };\n\tsilent: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Whether the notification is silent or not.' };\n\tsource?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The source of the notification.' };\n\towner: 'bpasero';\n\tcomment: 'Helps us gain insights to what notifications are being shown, how many, and if they are silent or not.';\n};\n\nexport function notificationToMetrics(message: NotificationMessage, source: string | undefined, silent: boolean): NotificationMetrics {\n\treturn {\n\t\tid: hash(message.toString()).toString(),\n\t\tsilent,\n\t\tsource: source || 'core'\n\t};\n}\n\nexport class NotificationsTelemetry extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@INotificationService private readonly notificationService: INotificationService\n\t) {\n\t\tsuper();\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.notificationService.onDidAddNotification(notification => {\n\t\t\tconst source = notification.source && typeof notification.source !== 'string' ? notification.source.id : notification.source;\n\t\t\tthis.telemetryService.publicLog2<NotificationMetrics, NotificationMetricsClassification>('notification:show', notificationToMetrics(notification.message, source, notification.priority === NotificationPriority.SILENT));\n\t\t}));\n\n\t\tthis._register(this.notificationService.onDidRemoveNotification(notification => {\n\t\t\tconst source = notification.source && typeof notification.source !== 'string' ? notification.source.id : notification.source;\n\t\t\tthis.telemetryService.publicLog2<NotificationMetrics, NotificationMetricsClassification>('notification:close', notificationToMetrics(notification.message, source, notification.priority === NotificationPriority.SILENT));\n\t\t}));\n\t}\n}\n"]}