{"version":3,"sources":["vs/workbench/browser/parts/notifications/notificationsCenter.ts"],"names":[],"mappings":"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","file":"notificationsCenter.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/notificationsCenter';\nimport 'vs/css!./media/notificationsActions';\nimport { NOTIFICATIONS_CENTER_HEADER_FOREGROUND, NOTIFICATIONS_CENTER_HEADER_BACKGROUND, NOTIFICATIONS_CENTER_BORDER } from 'vs/workbench/common/theme';\nimport { IThemeService, Themable } from 'vs/platform/theme/common/themeService';\nimport { INotificationsModel, INotificationChangeEvent, NotificationChangeType, NotificationViewItemContentChangeKind } from 'vs/workbench/common/notifications';\nimport { IWorkbenchLayoutService, Parts } from 'vs/workbench/services/layout/browser/layoutService';\nimport { Emitter } from 'vs/base/common/event';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { INotificationsCenterController, NotificationActionRunner } from 'vs/workbench/browser/parts/notifications/notificationsCommands';\nimport { NotificationsList } from 'vs/workbench/browser/parts/notifications/notificationsList';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { isAncestor, Dimension } from 'vs/base/browser/dom';\nimport { widgetShadow } from 'vs/platform/theme/common/colorRegistry';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { localize } from 'vs/nls';\nimport { ActionBar } from 'vs/base/browser/ui/actionbar/actionbar';\nimport { ClearAllNotificationsAction, HideNotificationsCenterAction, ToggleDoNotDisturbAction } from 'vs/workbench/browser/parts/notifications/notificationsActions';\nimport { IAction } from 'vs/base/common/actions';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { assertAllDefined, assertIsDefined } from 'vs/base/common/types';\nimport { NotificationsCenterVisibleContext } from 'vs/workbench/common/contextkeys';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\n\nexport class NotificationsCenter extends Themable implements INotificationsCenterController {\n\n\tprivate static readonly MAX_DIMENSIONS = new Dimension(450, 400);\n\n\tprivate readonly _onDidChangeVisibility = this._register(new Emitter<void>());\n\treadonly onDidChangeVisibility = this._onDidChangeVisibility.event;\n\n\tprivate notificationsCenterContainer: HTMLElement | undefined;\n\tprivate notificationsCenterHeader: HTMLElement | undefined;\n\tprivate notificationsCenterTitle: HTMLSpanElement | undefined;\n\tprivate notificationsList: NotificationsList | undefined;\n\tprivate _isVisible: boolean | undefined;\n\tprivate workbenchDimensions: Dimension | undefined;\n\tprivate readonly notificationsCenterVisibleContextKey = NotificationsCenterVisibleContext.bindTo(this.contextKeyService);\n\tprivate clearAllAction: ClearAllNotificationsAction | undefined;\n\tprivate toggleDoNotDisturbAction: ToggleDoNotDisturbAction | undefined;\n\n\tconstructor(\n\t\tprivate readonly container: HTMLElement,\n\t\tprivate readonly model: INotificationsModel,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t) {\n\t\tsuper(themeService);\n\n\t\tthis.notificationsCenterVisibleContextKey = NotificationsCenterVisibleContext.bindTo(contextKeyService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.model.onDidChangeNotification(e => this.onDidChangeNotification(e)));\n\t\tthis._register(this.layoutService.onDidLayout(dimension => this.layout(Dimension.lift(dimension))));\n\t\tthis._register(this.notificationService.onDidChangeDoNotDisturbMode(() => this.onDidChangeDoNotDisturbMode()));\n\t}\n\n\tprivate onDidChangeDoNotDisturbMode(): void {\n\t\tthis.hide(); // hide the notification center when do not disturb is toggled\n\t}\n\n\tget isVisible(): boolean {\n\t\treturn !!this._isVisible;\n\t}\n\n\tshow(): void {\n\t\tif (this._isVisible) {\n\t\t\tconst notificationsList = assertIsDefined(this.notificationsList);\n\n\t\t\t// Make visible\n\t\t\tnotificationsList.show();\n\n\t\t\t// Focus first\n\t\t\tnotificationsList.focusFirst();\n\n\t\t\treturn; // already visible\n\t\t}\n\n\t\t// Lazily create if showing for the first time\n\t\tif (!this.notificationsCenterContainer) {\n\t\t\tthis.create();\n\t\t}\n\n\t\t// Title\n\t\tthis.updateTitle();\n\n\t\t// Make visible\n\t\tconst [notificationsList, notificationsCenterContainer] = assertAllDefined(this.notificationsList, this.notificationsCenterContainer);\n\t\tthis._isVisible = true;\n\t\tnotificationsCenterContainer.classList.add('visible');\n\t\tnotificationsList.show();\n\n\t\t// Layout\n\t\tthis.layout(this.workbenchDimensions);\n\n\t\t// Show all notifications that are present now\n\t\tnotificationsList.updateNotificationsList(0, 0, this.model.notifications);\n\n\t\t// Focus first\n\t\tnotificationsList.focusFirst();\n\n\t\t// Theming\n\t\tthis.updateStyles();\n\n\t\t// Mark as visible\n\t\tthis.model.notifications.forEach(notification => notification.updateVisibility(true));\n\n\t\t// Context Key\n\t\tthis.notificationsCenterVisibleContextKey.set(true);\n\n\t\t// Event\n\t\tthis._onDidChangeVisibility.fire();\n\t}\n\n\tprivate updateTitle(): void {\n\t\tconst [notificationsCenterTitle, clearAllAction] = assertAllDefined(this.notificationsCenterTitle, this.clearAllAction);\n\n\t\tif (this.model.notifications.length === 0) {\n\t\t\tnotificationsCenterTitle.textContent = localize('notificationsEmpty', \"No new notifications\");\n\t\t\tclearAllAction.enabled = false;\n\t\t} else {\n\t\t\tnotificationsCenterTitle.textContent = localize('notifications', \"Notifications\");\n\t\t\tclearAllAction.enabled = this.model.notifications.some(notification => !notification.hasProgress);\n\t\t}\n\t}\n\n\tprivate create(): void {\n\n\t\t// Container\n\t\tthis.notificationsCenterContainer = document.createElement('div');\n\t\tthis.notificationsCenterContainer.classList.add('notifications-center');\n\n\t\t// Header\n\t\tthis.notificationsCenterHeader = document.createElement('div');\n\t\tthis.notificationsCenterHeader.classList.add('notifications-center-header');\n\t\tthis.notificationsCenterContainer.appendChild(this.notificationsCenterHeader);\n\n\t\t// Header Title\n\t\tthis.notificationsCenterTitle = document.createElement('span');\n\t\tthis.notificationsCenterTitle.classList.add('notifications-center-header-title');\n\t\tthis.notificationsCenterHeader.appendChild(this.notificationsCenterTitle);\n\n\t\t// Header Toolbar\n\t\tconst toolbarContainer = document.createElement('div');\n\t\ttoolbarContainer.classList.add('notifications-center-header-toolbar');\n\t\tthis.notificationsCenterHeader.appendChild(toolbarContainer);\n\n\t\tconst actionRunner = this._register(this.instantiationService.createInstance(NotificationActionRunner));\n\n\t\tconst notificationsToolBar = this._register(new ActionBar(toolbarContainer, {\n\t\t\tariaLabel: localize('notificationsToolbar', \"Notification Center Actions\"),\n\t\t\tactionRunner\n\t\t}));\n\n\t\tthis.clearAllAction = this._register(this.instantiationService.createInstance(ClearAllNotificationsAction, ClearAllNotificationsAction.ID, ClearAllNotificationsAction.LABEL));\n\t\tnotificationsToolBar.push(this.clearAllAction, { icon: true, label: false, keybinding: this.getKeybindingLabel(this.clearAllAction) });\n\n\t\tthis.toggleDoNotDisturbAction = this._register(this.instantiationService.createInstance(ToggleDoNotDisturbAction, ToggleDoNotDisturbAction.ID, ToggleDoNotDisturbAction.LABEL));\n\t\tnotificationsToolBar.push(this.toggleDoNotDisturbAction, { icon: true, label: false, keybinding: this.getKeybindingLabel(this.toggleDoNotDisturbAction) });\n\n\t\tconst hideAllAction = this._register(this.instantiationService.createInstance(HideNotificationsCenterAction, HideNotificationsCenterAction.ID, HideNotificationsCenterAction.LABEL));\n\t\tnotificationsToolBar.push(hideAllAction, { icon: true, label: false, keybinding: this.getKeybindingLabel(hideAllAction) });\n\n\t\t// Notifications List\n\t\tthis.notificationsList = this.instantiationService.createInstance(NotificationsList, this.notificationsCenterContainer, {\n\t\t\twidgetAriaLabel: localize('notificationsCenterWidgetAriaLabel', \"Notifications Center\")\n\t\t});\n\t\tthis.container.appendChild(this.notificationsCenterContainer);\n\t}\n\n\tprivate getKeybindingLabel(action: IAction): string | null {\n\t\tconst keybinding = this.keybindingService.lookupKeybinding(action.id);\n\n\t\treturn keybinding ? keybinding.getLabel() : null;\n\t}\n\n\tprivate onDidChangeNotification(e: INotificationChangeEvent): void {\n\t\tif (!this._isVisible) {\n\t\t\treturn; // only if visible\n\t\t}\n\n\t\tlet focusEditor = false;\n\n\t\t// Update notifications list based on event kind\n\t\tconst [notificationsList, notificationsCenterContainer] = assertAllDefined(this.notificationsList, this.notificationsCenterContainer);\n\t\tswitch (e.kind) {\n\t\t\tcase NotificationChangeType.ADD:\n\t\t\t\tnotificationsList.updateNotificationsList(e.index, 0, [e.item]);\n\t\t\t\te.item.updateVisibility(true);\n\t\t\t\tbreak;\n\t\t\tcase NotificationChangeType.CHANGE:\n\t\t\t\t// Handle content changes\n\t\t\t\t// - actions: re-draw to properly show them\n\t\t\t\t// - message: update notification height unless collapsed\n\t\t\t\tswitch (e.detail) {\n\t\t\t\t\tcase NotificationViewItemContentChangeKind.ACTIONS:\n\t\t\t\t\t\tnotificationsList.updateNotificationsList(e.index, 1, [e.item]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase NotificationViewItemContentChangeKind.MESSAGE:\n\t\t\t\t\t\tif (e.item.expanded) {\n\t\t\t\t\t\t\tnotificationsList.updateNotificationHeight(e.item);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase NotificationChangeType.EXPAND_COLLAPSE:\n\t\t\t\t// Re-draw entire item when expansion changes to reveal or hide details\n\t\t\t\tnotificationsList.updateNotificationsList(e.index, 1, [e.item]);\n\t\t\t\tbreak;\n\t\t\tcase NotificationChangeType.REMOVE:\n\t\t\t\tfocusEditor = isAncestor(document.activeElement, notificationsCenterContainer);\n\t\t\t\tnotificationsList.updateNotificationsList(e.index, 1);\n\t\t\t\te.item.updateVisibility(false);\n\t\t\t\tbreak;\n\t\t}\n\n\t\t// Update title\n\t\tthis.updateTitle();\n\n\t\t// Hide if no more notifications to show\n\t\tif (this.model.notifications.length === 0) {\n\t\t\tthis.hide();\n\n\t\t\t// Restore focus to editor group if we had focus\n\t\t\tif (focusEditor) {\n\t\t\t\tthis.editorGroupService.activeGroup.focus();\n\t\t\t}\n\t\t}\n\t}\n\n\thide(): void {\n\t\tif (!this._isVisible || !this.notificationsCenterContainer || !this.notificationsList) {\n\t\t\treturn; // already hidden\n\t\t}\n\n\t\tconst focusEditor = isAncestor(document.activeElement, this.notificationsCenterContainer);\n\n\t\t// Hide\n\t\tthis._isVisible = false;\n\t\tthis.notificationsCenterContainer.classList.remove('visible');\n\t\tthis.notificationsList.hide();\n\n\t\t// Mark as hidden\n\t\tthis.model.notifications.forEach(notification => notification.updateVisibility(false));\n\n\t\t// Context Key\n\t\tthis.notificationsCenterVisibleContextKey.set(false);\n\n\t\t// Event\n\t\tthis._onDidChangeVisibility.fire();\n\n\t\t// Restore focus to editor group if we had focus\n\t\tif (focusEditor) {\n\t\t\tthis.editorGroupService.activeGroup.focus();\n\t\t}\n\t}\n\n\toverride updateStyles(): void {\n\t\tif (this.notificationsCenterContainer && this.notificationsCenterHeader) {\n\t\t\tconst widgetShadowColor = this.getColor(widgetShadow);\n\t\t\tthis.notificationsCenterContainer.style.boxShadow = widgetShadowColor ? `0 0 8px 2px ${widgetShadowColor}` : '';\n\n\t\t\tconst borderColor = this.getColor(NOTIFICATIONS_CENTER_BORDER);\n\t\t\tthis.notificationsCenterContainer.style.border = borderColor ? `1px solid ${borderColor}` : '';\n\n\t\t\tconst headerForeground = this.getColor(NOTIFICATIONS_CENTER_HEADER_FOREGROUND);\n\t\t\tthis.notificationsCenterHeader.style.color = headerForeground ?? '';\n\n\t\t\tconst headerBackground = this.getColor(NOTIFICATIONS_CENTER_HEADER_BACKGROUND);\n\t\t\tthis.notificationsCenterHeader.style.background = headerBackground ?? '';\n\n\t\t}\n\t}\n\n\tlayout(dimension: Dimension | undefined): void {\n\t\tthis.workbenchDimensions = dimension;\n\n\t\tif (this._isVisible && this.notificationsCenterContainer) {\n\t\t\tconst maxWidth = NotificationsCenter.MAX_DIMENSIONS.width;\n\t\t\tconst maxHeight = NotificationsCenter.MAX_DIMENSIONS.height;\n\n\t\t\tlet availableWidth = maxWidth;\n\t\t\tlet availableHeight = maxHeight;\n\n\t\t\tif (this.workbenchDimensions) {\n\n\t\t\t\t// Make sure notifications are not exceding available width\n\t\t\t\tavailableWidth = this.workbenchDimensions.width;\n\t\t\t\tavailableWidth -= (2 * 8); // adjust for paddings left and right\n\n\t\t\t\t// Make sure notifications are not exceeding available height\n\t\t\t\tavailableHeight = this.workbenchDimensions.height - 35 /* header */;\n\t\t\t\tif (this.layoutService.isVisible(Parts.STATUSBAR_PART)) {\n\t\t\t\t\tavailableHeight -= 22; // adjust for status bar\n\t\t\t\t}\n\n\t\t\t\tif (this.layoutService.isVisible(Parts.TITLEBAR_PART)) {\n\t\t\t\t\tavailableHeight -= 22; // adjust for title bar\n\t\t\t\t}\n\n\t\t\t\tavailableHeight -= (2 * 12); // adjust for paddings top and bottom\n\t\t\t}\n\n\t\t\t// Apply to list\n\t\t\tconst notificationsList = assertIsDefined(this.notificationsList);\n\t\t\tnotificationsList.layout(Math.min(maxWidth, availableWidth), Math.min(maxHeight, availableHeight));\n\t\t}\n\t}\n\n\tclearAll(): void {\n\n\t\t// Hide notifications center first\n\t\tthis.hide();\n\n\t\t// Close all\n\t\tfor (const notification of [...this.model.notifications] /* copy array since we modify it from closing */) {\n\t\t\tif (!notification.hasProgress) {\n\t\t\t\tnotification.close();\n\t\t\t}\n\t\t}\n\t}\n}\n\n"]}