{"version":3,"sources":["vs/workbench/browser/parts/notifications/notificationsCommands.ts"],"names":[],"mappings":"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","file":"notificationsCommands.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { KeybindingsRegistry, KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { KeyChord, KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { INotificationViewItem, isNotificationViewItem, NotificationsModel } from 'vs/workbench/common/notifications';\nimport { MenuRegistry, MenuId } from 'vs/platform/actions/common/actions';\nimport { localize } from 'vs/nls';\nimport { IListService, WorkbenchList } from 'vs/platform/list/browser/listService';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { NotificationMetrics, NotificationMetricsClassification, notificationToMetrics } from 'vs/workbench/browser/parts/notifications/notificationsTelemetry';\nimport { NotificationFocusedContext, NotificationsCenterVisibleContext, NotificationsToastsVisibleContext } from 'vs/workbench/common/contextkeys';\nimport { INotificationService, NotificationPriority } from 'vs/platform/notification/common/notification';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ActionRunner, IAction, WorkbenchActionExecutedEvent, WorkbenchActionExecutedClassification } from 'vs/base/common/actions';\nimport { hash } from 'vs/base/common/hash';\nimport { firstOrDefault } from 'vs/base/common/arrays';\n\n// Center\nexport const SHOW_NOTIFICATIONS_CENTER = 'notifications.showList';\nexport const HIDE_NOTIFICATIONS_CENTER = 'notifications.hideList';\nconst TOGGLE_NOTIFICATIONS_CENTER = 'notifications.toggleList';\n\n// Toasts\nexport const HIDE_NOTIFICATION_TOAST = 'notifications.hideToasts';\nconst FOCUS_NOTIFICATION_TOAST = 'notifications.focusToasts';\nconst FOCUS_NEXT_NOTIFICATION_TOAST = 'notifications.focusNextToast';\nconst FOCUS_PREVIOUS_NOTIFICATION_TOAST = 'notifications.focusPreviousToast';\nconst FOCUS_FIRST_NOTIFICATION_TOAST = 'notifications.focusFirstToast';\nconst FOCUS_LAST_NOTIFICATION_TOAST = 'notifications.focusLastToast';\n\n// Notification\nexport const COLLAPSE_NOTIFICATION = 'notification.collapse';\nexport const EXPAND_NOTIFICATION = 'notification.expand';\nexport const ACCEPT_PRIMARY_ACTION_NOTIFICATION = 'notification.acceptPrimaryAction';\nconst TOGGLE_NOTIFICATION = 'notification.toggle';\nexport const CLEAR_NOTIFICATION = 'notification.clear';\nexport const CLEAR_ALL_NOTIFICATIONS = 'notifications.clearAll';\nexport const TOGGLE_DO_NOT_DISTURB_MODE = 'notifications.toggleDoNotDisturbMode';\n\nexport interface INotificationsCenterController {\n\treadonly isVisible: boolean;\n\n\tshow(): void;\n\thide(): void;\n\n\tclearAll(): void;\n}\n\nexport interface INotificationsToastController {\n\tfocus(): void;\n\tfocusNext(): void;\n\tfocusPrevious(): void;\n\tfocusFirst(): void;\n\tfocusLast(): void;\n\n\thide(): void;\n}\n\nexport function getNotificationFromContext(listService: IListService, context?: unknown): INotificationViewItem | undefined {\n\tif (isNotificationViewItem(context)) {\n\t\treturn context;\n\t}\n\n\tconst list = listService.lastFocusedList;\n\tif (list instanceof WorkbenchList) {\n\t\tlet element = list.getFocusedElements()[0];\n\t\tif (!isNotificationViewItem(element)) {\n\t\t\tif (list.isDOMFocused()) {\n\t\t\t\t// the notification list might have received focus\n\t\t\t\t// via keyboard and might not have a focussed element.\n\t\t\t\t// in that case just return the first element\n\t\t\t\t// https://github.com/microsoft/vscode/issues/191705\n\t\t\t\telement = list.element(0);\n\t\t\t}\n\t\t}\n\n\t\tif (isNotificationViewItem(element)) {\n\t\t\treturn element;\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\nexport function registerNotificationCommands(center: INotificationsCenterController, toasts: INotificationsToastController, model: NotificationsModel): void {\n\n\t// Show Notifications Cneter\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: SHOW_NOTIFICATIONS_CENTER,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: NotificationsCenterVisibleContext.negate(),\n\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyN),\n\t\thandler: () => {\n\t\t\ttoasts.hide();\n\t\t\tcenter.show();\n\t\t}\n\t});\n\n\t// Hide Notifications Center\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: HIDE_NOTIFICATIONS_CENTER,\n\t\tweight: KeybindingWeight.WorkbenchContrib + 50,\n\t\twhen: NotificationsCenterVisibleContext,\n\t\tprimary: KeyCode.Escape,\n\t\thandler: accessor => {\n\t\t\tconst telemetryService = accessor.get(ITelemetryService);\n\t\t\tfor (const notification of model.notifications) {\n\t\t\t\tif (notification.visible) {\n\t\t\t\t\ttelemetryService.publicLog2<NotificationMetrics, NotificationMetricsClassification>('notification:hide', notificationToMetrics(notification.message.original, notification.sourceId, notification.priority === NotificationPriority.SILENT));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcenter.hide();\n\t\t}\n\t});\n\n\t// Toggle Notifications Center\n\tCommandsRegistry.registerCommand(TOGGLE_NOTIFICATIONS_CENTER, () => {\n\t\tif (center.isVisible) {\n\t\t\tcenter.hide();\n\t\t} else {\n\t\t\ttoasts.hide();\n\t\t\tcenter.show();\n\t\t}\n\t});\n\n\t// Clear Notification\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: CLEAR_NOTIFICATION,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: NotificationFocusedContext,\n\t\tprimary: KeyCode.Delete,\n\t\tmac: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Backspace\n\t\t},\n\t\thandler: (accessor, args?) => {\n\t\t\tconst notification = getNotificationFromContext(accessor.get(IListService), args);\n\t\t\tif (notification && !notification.hasProgress) {\n\t\t\t\tnotification.close();\n\t\t\t}\n\t\t}\n\t});\n\n\t// Expand Notification\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: EXPAND_NOTIFICATION,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: NotificationFocusedContext,\n\t\tprimary: KeyCode.RightArrow,\n\t\thandler: (accessor, args?) => {\n\t\t\tconst notification = getNotificationFromContext(accessor.get(IListService), args);\n\t\t\tnotification?.expand();\n\t\t}\n\t});\n\n\t// Accept Primary Action\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: ACCEPT_PRIMARY_ACTION_NOTIFICATION,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: ContextKeyExpr.and(NotificationsToastsVisibleContext),\n\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyA,\n\t\thandler: (accessor) => {\n\t\t\tconst actionRunner = accessor.get(IInstantiationService).createInstance(NotificationActionRunner);\n\t\t\tconst notification = firstOrDefault(model.notifications);\n\t\t\tif (!notification) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst primaryAction = notification.actions?.primary ? firstOrDefault(notification.actions.primary) : undefined;\n\t\t\tif (!primaryAction) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tactionRunner.run(primaryAction, notification);\n\t\t\tnotification.close();\n\t\t}\n\t});\n\n\t// Collapse Notification\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: COLLAPSE_NOTIFICATION,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: NotificationFocusedContext,\n\t\tprimary: KeyCode.LeftArrow,\n\t\thandler: (accessor, args?) => {\n\t\t\tconst notification = getNotificationFromContext(accessor.get(IListService), args);\n\t\t\tnotification?.collapse();\n\t\t}\n\t});\n\n\t// Toggle Notification\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: TOGGLE_NOTIFICATION,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: NotificationFocusedContext,\n\t\tprimary: KeyCode.Space,\n\t\tsecondary: [KeyCode.Enter],\n\t\thandler: accessor => {\n\t\t\tconst notification = getNotificationFromContext(accessor.get(IListService));\n\t\t\tnotification?.toggle();\n\t\t}\n\t});\n\n\t// Hide Toasts\n\tCommandsRegistry.registerCommand(HIDE_NOTIFICATION_TOAST, accessor => {\n\t\tconst telemetryService = accessor.get(ITelemetryService);\n\t\tfor (const notification of model.notifications) {\n\t\t\tif (notification.visible) {\n\t\t\t\ttelemetryService.publicLog2<NotificationMetrics, NotificationMetricsClassification>('notification:hide', notificationToMetrics(notification.message.original, notification.sourceId, notification.priority === NotificationPriority.SILENT));\n\t\t\t}\n\t\t}\n\t\ttoasts.hide();\n\t});\n\n\tKeybindingsRegistry.registerKeybindingRule({\n\t\tid: HIDE_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib - 50, // lower when not focused (e.g. let editor suggest win over this command)\n\t\twhen: NotificationsToastsVisibleContext,\n\t\tprimary: KeyCode.Escape\n\t});\n\n\tKeybindingsRegistry.registerKeybindingRule({\n\t\tid: HIDE_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib + 100, // higher when focused\n\t\twhen: ContextKeyExpr.and(NotificationsToastsVisibleContext, NotificationFocusedContext),\n\t\tprimary: KeyCode.Escape\n\t});\n\n\t// Focus Toasts\n\tCommandsRegistry.registerCommand(FOCUS_NOTIFICATION_TOAST, () => toasts.focus());\n\n\t// Focus Next Toast\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: FOCUS_NEXT_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: ContextKeyExpr.and(NotificationFocusedContext, NotificationsToastsVisibleContext),\n\t\tprimary: KeyCode.DownArrow,\n\t\thandler: () => {\n\t\t\ttoasts.focusNext();\n\t\t}\n\t});\n\n\t// Focus Previous Toast\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: FOCUS_PREVIOUS_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: ContextKeyExpr.and(NotificationFocusedContext, NotificationsToastsVisibleContext),\n\t\tprimary: KeyCode.UpArrow,\n\t\thandler: () => {\n\t\t\ttoasts.focusPrevious();\n\t\t}\n\t});\n\n\t// Focus First Toast\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: FOCUS_FIRST_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: ContextKeyExpr.and(NotificationFocusedContext, NotificationsToastsVisibleContext),\n\t\tprimary: KeyCode.PageUp,\n\t\tsecondary: [KeyCode.Home],\n\t\thandler: () => {\n\t\t\ttoasts.focusFirst();\n\t\t}\n\t});\n\n\t// Focus Last Toast\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: FOCUS_LAST_NOTIFICATION_TOAST,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: ContextKeyExpr.and(NotificationFocusedContext, NotificationsToastsVisibleContext),\n\t\tprimary: KeyCode.PageDown,\n\t\tsecondary: [KeyCode.End],\n\t\thandler: () => {\n\t\t\ttoasts.focusLast();\n\t\t}\n\t});\n\n\t// Clear All Notifications\n\tCommandsRegistry.registerCommand(CLEAR_ALL_NOTIFICATIONS, () => center.clearAll());\n\n\t// Toggle Do Not Disturb Mode\n\tCommandsRegistry.registerCommand(TOGGLE_DO_NOT_DISTURB_MODE, accessor => {\n\t\tconst notificationService = accessor.get(INotificationService);\n\n\t\tnotificationService.doNotDisturbMode = !notificationService.doNotDisturbMode;\n\t});\n\n\t// Commands for Command Palette\n\tconst category = { value: localize('notifications', \"Notifications\"), original: 'Notifications' };\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: SHOW_NOTIFICATIONS_CENTER, title: { value: localize('showNotifications', \"Show Notifications\"), original: 'Show Notifications' }, category } });\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: HIDE_NOTIFICATIONS_CENTER, title: { value: localize('hideNotifications', \"Hide Notifications\"), original: 'Hide Notifications' }, category }, when: NotificationsCenterVisibleContext });\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: CLEAR_ALL_NOTIFICATIONS, title: { value: localize('clearAllNotifications', \"Clear All Notifications\"), original: 'Clear All Notifications' }, category } });\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: ACCEPT_PRIMARY_ACTION_NOTIFICATION, title: { value: localize('acceptNotificationPrimaryAction', \"Accept Notification Primary Action\"), original: 'Accept Notification Primary Action' }, category } });\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: TOGGLE_DO_NOT_DISTURB_MODE, title: { value: localize('toggleDoNotDisturbMode', \"Toggle Do Not Disturb Mode\"), original: 'Toggle Do Not Disturb Mode' }, category } });\n\tMenuRegistry.appendMenuItem(MenuId.CommandPalette, { command: { id: FOCUS_NOTIFICATION_TOAST, title: { value: localize('focusNotificationToasts', \"Focus Notification Toast\"), original: 'Focus Notification Toast' }, category }, when: NotificationsToastsVisibleContext });\n}\n\n\ninterface NotificationActionMetrics {\n\treadonly id: string;\n\treadonly actionLabel: string;\n\treadonly source: string;\n\treadonly silent: boolean;\n}\n\ntype NotificationActionMetricsClassification = {\n\tid: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The identifier of the action that was run from a notification.' };\n\tactionLabel: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The label of the action that was run from a notification.' };\n\tsource: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The source of the notification where an action was run.' };\n\tsilent: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Whether the notification where an action was run is silent or not.' };\n\towner: 'bpasero';\n\tcomment: 'Tracks when actions are fired from notifcations and how they were fired.';\n};\n\nexport class NotificationActionRunner extends ActionRunner {\n\n\tconstructor(\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@INotificationService private readonly notificationService: INotificationService\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected override async runAction(action: IAction, context: unknown): Promise<void> {\n\t\tthis.telemetryService.publicLog2<WorkbenchActionExecutedEvent, WorkbenchActionExecutedClassification>('workbenchActionExecuted', { id: action.id, from: 'message' });\n\n\t\tif (isNotificationViewItem(context)) {\n\t\t\t// Log some additional telemetry specifically for actions\n\t\t\t// that are triggered from within notifications.\n\t\t\tthis.telemetryService.publicLog2<NotificationActionMetrics, NotificationActionMetricsClassification>('notification:actionExecuted', {\n\t\t\t\tid: hash(context.message.original.toString()).toString(),\n\t\t\t\tactionLabel: action.label,\n\t\t\t\tsource: context.sourceId || 'core',\n\t\t\t\tsilent: context.priority === NotificationPriority.SILENT\n\t\t\t});\n\t\t}\n\n\t\t// Run and make sure to notify on any error again\n\t\ttry {\n\t\t\tawait super.runAction(action, context);\n\t\t} catch (error) {\n\t\t\tthis.notificationService.error(error);\n\t\t}\n\t}\n}\n"]}