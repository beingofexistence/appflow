{"version":3,"sources":["vs/workbench/browser/parts/views/checkbox.ts"],"names":[],"mappings":"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","file":"checkbox.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as DOM from 'vs/base/browser/dom';\nimport { IHoverDelegate } from 'vs/base/browser/ui/iconLabel/iconHoverDelegate';\nimport { ICustomHover, setupCustomHover } from 'vs/base/browser/ui/iconLabel/iconLabelHover';\nimport { Toggle } from 'vs/base/browser/ui/toggle/toggle';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { localize } from 'vs/nls';\nimport { defaultToggleStyles } from 'vs/platform/theme/browser/defaultStyles';\nimport { ITreeItem, ITreeItemCheckboxState } from 'vs/workbench/common/views';\n\nexport class CheckboxStateHandler extends Disposable {\n\tprivate readonly _onDidChangeCheckboxState = this._register(new Emitter<ITreeItem[]>());\n\treadonly onDidChangeCheckboxState: Event<ITreeItem[]> = this._onDidChangeCheckboxState.event;\n\n\tpublic setCheckboxState(node: ITreeItem) {\n\t\tthis._onDidChangeCheckboxState.fire([node]);\n\t}\n}\n\nexport class TreeItemCheckbox extends Disposable {\n\tpublic toggle: Toggle | undefined;\n\tprivate checkboxContainer: HTMLDivElement;\n\tpublic isDisposed = false;\n\tprivate hover: ICustomHover | undefined;\n\n\tpublic static readonly checkboxClass = 'custom-view-tree-node-item-checkbox';\n\n\tprivate readonly _onDidChangeState = new Emitter<boolean>();\n\treadonly onDidChangeState: Event<boolean> = this._onDidChangeState.event;\n\n\tconstructor(container: HTMLElement, private checkboxStateHandler: CheckboxStateHandler, private readonly hoverDelegate: IHoverDelegate) {\n\t\tsuper();\n\t\tthis.checkboxContainer = <HTMLDivElement>container;\n\t}\n\n\tpublic render(node: ITreeItem) {\n\t\tif (node.checkbox) {\n\t\t\tif (!this.toggle) {\n\t\t\t\tthis.createCheckbox(node);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.toggle.checked = node.checkbox.isChecked;\n\t\t\t\tthis.toggle.setIcon(this.toggle.checked ? Codicon.check : undefined);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate createCheckbox(node: ITreeItem) {\n\t\tif (node.checkbox) {\n\t\t\tthis.toggle = new Toggle({\n\t\t\t\tisChecked: node.checkbox.isChecked,\n\t\t\t\ttitle: '',\n\t\t\t\ticon: node.checkbox.isChecked ? Codicon.check : undefined,\n\t\t\t\t...defaultToggleStyles\n\t\t\t});\n\t\t\tthis.setHover(node.checkbox);\n\t\t\tthis.setAccessibilityInformation(node.checkbox);\n\t\t\tthis.toggle.domNode.classList.add(TreeItemCheckbox.checkboxClass);\n\t\t\tthis.toggle.domNode.tabIndex = 1;\n\t\t\tDOM.append(this.checkboxContainer, this.toggle.domNode);\n\t\t\tthis.registerListener(node);\n\t\t}\n\t}\n\n\tprivate registerListener(node: ITreeItem) {\n\t\tif (this.toggle) {\n\t\t\tthis._register({ dispose: () => this.removeCheckbox() });\n\t\t\tthis._register(this.toggle);\n\t\t\tthis._register(this.toggle.onChange(() => {\n\t\t\t\tthis.setCheckbox(node);\n\t\t\t}));\n\t\t}\n\t}\n\n\tprivate setHover(checkbox: ITreeItemCheckboxState) {\n\t\tif (this.toggle) {\n\t\t\tif (!this.hover) {\n\t\t\t\tthis.hover = setupCustomHover(this.hoverDelegate, this.toggle.domNode, this.checkboxHoverContent(checkbox));\n\t\t\t\tthis._register(this.hover);\n\t\t\t} else {\n\t\t\t\tthis.hover.update(checkbox.tooltip);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate setCheckbox(node: ITreeItem) {\n\t\tif (this.toggle && node.checkbox) {\n\t\t\tnode.checkbox.isChecked = this.toggle.checked;\n\t\t\tthis.toggle.setIcon(this.toggle.checked ? Codicon.check : undefined);\n\t\t\tthis.setHover(node.checkbox);\n\n\t\t\tthis.setAccessibilityInformation(node.checkbox);\n\t\t\tthis.checkboxStateHandler.setCheckboxState(node);\n\t\t}\n\t}\n\n\tprivate checkboxHoverContent(checkbox: ITreeItemCheckboxState): string {\n\t\treturn checkbox.tooltip ? checkbox.tooltip :\n\t\t\tcheckbox.isChecked ? localize('checked', 'Checked') : localize('unchecked', 'Unchecked');\n\t}\n\n\tprivate setAccessibilityInformation(checkbox: ITreeItemCheckboxState) {\n\t\tif (this.toggle && checkbox.accessibilityInformation) {\n\t\t\tthis.toggle.domNode.ariaLabel = checkbox.accessibilityInformation.label;\n\t\t\tif (checkbox.accessibilityInformation.role) {\n\t\t\t\tthis.toggle.domNode.role = checkbox.accessibilityInformation.role;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate removeCheckbox() {\n\t\tconst children = this.checkboxContainer.children;\n\t\tfor (const child of children) {\n\t\t\tthis.checkboxContainer.removeChild(child);\n\t\t}\n\t}\n}\n"]}