{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/browser/parts/views/viewsViewlet.ts"],"names":[],"mappings":"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","file":"viewsViewlet.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { IViewDescriptor, IViewDescriptorService, IAddedViewDescriptorRef } from 'vs/workbench/common/views';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { ViewPaneContainer } from 'vs/workbench/browser/parts/views/viewPaneContainer';\nimport { ViewPane, IViewPaneOptions } from 'vs/workbench/browser/parts/views/viewPane';\nimport { Event } from 'vs/base/common/event';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\n\nexport interface IViewletViewOptions extends IViewPaneOptions {\n\treadonly fromExtensionId?: ExtensionIdentifier;\n}\n\nexport abstract class FilterViewPaneContainer extends ViewPaneContainer {\n\tprivate constantViewDescriptors: Map<string, IViewDescriptor> = new Map();\n\tprivate allViews: Map<string, Map<string, IViewDescriptor>> = new Map();\n\tprivate filterValue: string[] | undefined;\n\n\tconstructor(\n\t\tviewletId: string,\n\t\tonDidChangeFilterValue: Event<string[]>,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService\n\t) {\n\n\t\tsuper(viewletId, { mergeViewWithContainerWhenSingleView: false }, instantiationService, configurationService, layoutService, contextMenuService, telemetryService, extensionService, themeService, storageService, contextService, viewDescriptorService);\n\t\tthis._register(onDidChangeFilterValue(newFilterValue => {\n\t\t\tthis.filterValue = newFilterValue;\n\t\t\tthis.onFilterChanged(newFilterValue);\n\t\t}));\n\n\t\tthis._register(this.onDidChangeViewVisibility(view => {\n\t\t\tconst descriptorMap = Array.from(this.allViews.entries()).find(entry => entry[1].has(view.id));\n\t\t\tif (descriptorMap && !this.filterValue?.includes(descriptorMap[0])) {\n\t\t\t\tthis.setFilter(descriptorMap[1].get(view.id)!);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.viewContainerModel.onDidChangeActiveViewDescriptors(() => {\n\t\t\tthis.updateAllViews(this.viewContainerModel.activeViewDescriptors);\n\t\t}));\n\t}\n\n\tprivate updateAllViews(viewDescriptors: ReadonlyArray<IViewDescriptor>) {\n\t\tviewDescriptors.forEach(descriptor => {\n\t\t\tconst filterOnValue = this.getFilterOn(descriptor);\n\t\t\tif (!filterOnValue) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (!this.allViews.has(filterOnValue)) {\n\t\t\t\tthis.allViews.set(filterOnValue, new Map());\n\t\t\t}\n\t\t\tthis.allViews.get(filterOnValue)!.set(descriptor.id, descriptor);\n\t\t\tif (this.filterValue && !this.filterValue.includes(filterOnValue) && this.panes.find(pane => pane.id === descriptor.id)) {\n\t\t\t\tthis.viewContainerModel.setVisible(descriptor.id, false);\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected addConstantViewDescriptors(constantViewDescriptors: IViewDescriptor[]) {\n\t\tconstantViewDescriptors.forEach(viewDescriptor => this.constantViewDescriptors.set(viewDescriptor.id, viewDescriptor));\n\t}\n\n\tprotected abstract getFilterOn(viewDescriptor: IViewDescriptor): string | undefined;\n\n\tprotected abstract setFilter(viewDescriptor: IViewDescriptor): void;\n\n\tprivate onFilterChanged(newFilterValue: string[]) {\n\t\tif (this.allViews.size === 0) {\n\t\t\tthis.updateAllViews(this.viewContainerModel.activeViewDescriptors);\n\t\t}\n\t\tthis.getViewsNotForTarget(newFilterValue).forEach(item => this.viewContainerModel.setVisible(item.id, false));\n\t\tthis.getViewsForTarget(newFilterValue).forEach(item => this.viewContainerModel.setVisible(item.id, true));\n\t}\n\n\tprivate getViewsForTarget(target: string[]): IViewDescriptor[] {\n\t\tconst views: IViewDescriptor[] = [];\n\t\tfor (let i = 0; i < target.length; i++) {\n\t\t\tif (this.allViews.has(target[i])) {\n\t\t\t\tviews.push(...Array.from(this.allViews.get(target[i])!.values()));\n\t\t\t}\n\t\t}\n\n\t\treturn views;\n\t}\n\n\tprivate getViewsNotForTarget(target: string[]): IViewDescriptor[] {\n\t\tconst iterable = this.allViews.keys();\n\t\tlet key = iterable.next();\n\t\tlet views: IViewDescriptor[] = [];\n\t\twhile (!key.done) {\n\t\t\tlet isForTarget: boolean = false;\n\t\t\ttarget.forEach(value => {\n\t\t\t\tif (key.value === value) {\n\t\t\t\t\tisForTarget = true;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (!isForTarget) {\n\t\t\t\tviews = views.concat(this.getViewsForTarget([key.value]));\n\t\t\t}\n\n\t\t\tkey = iterable.next();\n\t\t}\n\t\treturn views;\n\t}\n\n\tprotected override onDidAddViewDescriptors(added: IAddedViewDescriptorRef[]): ViewPane[] {\n\t\tconst panes: ViewPane[] = super.onDidAddViewDescriptors(added);\n\t\tfor (let i = 0; i < added.length; i++) {\n\t\t\tif (this.constantViewDescriptors.has(added[i].viewDescriptor.id)) {\n\t\t\t\tpanes[i].setExpanded(false);\n\t\t\t}\n\t\t}\n\t\t// Check that allViews is ready\n\t\tif (this.allViews.size === 0) {\n\t\t\tthis.updateAllViews(this.viewContainerModel.activeViewDescriptors);\n\t\t}\n\t\treturn panes;\n\t}\n\n\tabstract override getTitle(): string;\n\n}\n"]}