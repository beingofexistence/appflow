{"version":3,"sources":["vs/workbench/browser/web.main.ts"],"names":[],"mappings":"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","file":"web.main.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { mark } from 'vs/base/common/performance';\nimport { domContentLoaded, detectFullscreen, getCookieValue } from 'vs/base/browser/dom';\nimport { assertIsDefined } from 'vs/base/common/types';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { ILogService, ConsoleLogger, getLogLevel, ILoggerService, ILogger } from 'vs/platform/log/common/log';\nimport { ConsoleLogInAutomationLogger } from 'vs/platform/log/browser/log';\nimport { Disposable, DisposableStore, toDisposable } from 'vs/base/common/lifecycle';\nimport { BrowserWorkbenchEnvironmentService, IBrowserWorkbenchEnvironmentService } from 'vs/workbench/services/environment/browser/environmentService';\nimport { Workbench } from 'vs/workbench/browser/workbench';\nimport { RemoteFileSystemProviderClient } from 'vs/workbench/services/remote/common/remoteFileSystemProviderClient';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport product from 'vs/platform/product/common/product';\nimport { RemoteAgentService } from 'vs/workbench/services/remote/browser/remoteAgentService';\nimport { RemoteAuthorityResolverService } from 'vs/platform/remote/browser/remoteAuthorityResolverService';\nimport { IRemoteAuthorityResolverService, RemoteConnectionType } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { IWorkbenchFileService } from 'vs/workbench/services/files/common/files';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { Schemas, connectionTokenCookieName } from 'vs/base/common/network';\nimport { IAnyWorkspaceIdentifier, IWorkspaceContextService, UNKNOWN_EMPTY_WINDOW_WORKSPACE, isTemporaryWorkspace, isWorkspaceIdentifier } from 'vs/platform/workspace/common/workspace';\nimport { IWorkbenchConfigurationService } from 'vs/workbench/services/configuration/common/configuration';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { setFullscreen } from 'vs/base/browser/browser';\nimport { URI } from 'vs/base/common/uri';\nimport { WorkspaceService } from 'vs/workbench/services/configuration/browser/configurationService';\nimport { ConfigurationCache } from 'vs/workbench/services/configuration/common/configurationCache';\nimport { ISignService } from 'vs/platform/sign/common/sign';\nimport { SignService } from 'vs/platform/sign/browser/signService';\nimport { IWorkbenchConstructionOptions, IWorkbench, ITunnel } from 'vs/workbench/browser/web.api';\nimport { BrowserStorageService } from 'vs/workbench/services/storage/browser/storageService';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { toLocalISOString } from 'vs/base/common/date';\nimport { isWorkspaceToOpen, isFolderToOpen } from 'vs/platform/window/common/window';\nimport { getSingleFolderWorkspaceIdentifier, getWorkspaceIdentifier } from 'vs/workbench/services/workspaces/browser/workspaces';\nimport { InMemoryFileSystemProvider } from 'vs/platform/files/common/inMemoryFilesystemProvider';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IndexedDBFileSystemProviderErrorDataClassification, IndexedDBFileSystemProvider, IndexedDBFileSystemProviderErrorData } from 'vs/platform/files/browser/indexedDBFileSystemProvider';\nimport { BrowserRequestService } from 'vs/workbench/services/request/browser/requestService';\nimport { IRequestService } from 'vs/platform/request/common/request';\nimport { IUserDataInitializationService, IUserDataInitializer, UserDataInitializationService } from 'vs/workbench/services/userData/browser/userDataInit';\nimport { UserDataSyncStoreManagementService } from 'vs/platform/userDataSync/common/userDataSyncStoreService';\nimport { IUserDataSyncStoreManagementService } from 'vs/platform/userDataSync/common/userDataSync';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { Action2, MenuId, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { localize } from 'vs/nls';\nimport { Categories } from 'vs/platform/action/common/actionCommonCategories';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { UriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentityService';\nimport { BrowserWindow } from 'vs/workbench/browser/window';\nimport { ITimerService } from 'vs/workbench/services/timer/browser/timerService';\nimport { WorkspaceTrustEnablementService, WorkspaceTrustManagementService } from 'vs/workbench/services/workspaces/common/workspaceTrust';\nimport { IWorkspaceTrustEnablementService, IWorkspaceTrustManagementService } from 'vs/platform/workspace/common/workspaceTrust';\nimport { HTMLFileSystemProvider } from 'vs/platform/files/browser/htmlFileSystemProvider';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { mixin, safeStringify } from 'vs/base/common/objects';\nimport { IndexedDB } from 'vs/base/browser/indexedDB';\nimport { IWorkspace } from 'vs/workbench/services/host/browser/browserHostService';\nimport { WebFileSystemAccess } from 'vs/platform/files/browser/webFileSystemAccess';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IProgressService } from 'vs/platform/progress/common/progress';\nimport { DelayedLogChannel } from 'vs/workbench/services/output/common/delayedLogChannel';\nimport { dirname, joinPath } from 'vs/base/common/resources';\nimport { IUserDataProfile, IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { NullPolicyService } from 'vs/platform/policy/common/policy';\nimport { IRemoteExplorerService } from 'vs/workbench/services/remote/common/remoteExplorerService';\nimport { DisposableTunnel, TunnelProtocol } from 'vs/platform/tunnel/common/tunnel';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { UserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfileService';\nimport { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\nimport { BrowserUserDataProfilesService } from 'vs/platform/userDataProfile/browser/userDataProfile';\nimport { timeout } from 'vs/base/common/async';\nimport { windowLogId } from 'vs/workbench/services/log/common/logConstants';\nimport { LogService } from 'vs/platform/log/common/logService';\nimport { IRemoteSocketFactoryService, RemoteSocketFactoryService } from 'vs/platform/remote/common/remoteSocketFactoryService';\nimport { BrowserSocketFactory } from 'vs/platform/remote/browser/browserSocketFactory';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { IStoredWorkspace } from 'vs/platform/workspaces/common/workspaces';\nimport { UserDataProfileInitializer } from 'vs/workbench/services/userDataProfile/browser/userDataProfileInit';\nimport { UserDataSyncInitializer } from 'vs/workbench/services/userDataSync/browser/userDataSyncInit';\nimport { BrowserRemoteResourceLoader } from 'vs/workbench/services/remote/browser/browserRemoteResourceHandler';\nimport { BufferLogger } from 'vs/platform/log/common/bufferLog';\nimport { FileLoggerService } from 'vs/platform/log/common/fileLog';\nimport { IEmbedderTerminalService } from 'vs/workbench/services/terminal/common/embedderTerminalService';\nimport { BrowserSecretStorageService } from 'vs/workbench/services/secrets/browser/secretStorageService';\nimport { EncryptionService } from 'vs/workbench/services/encryption/browser/encryptionService';\nimport { IEncryptionService } from 'vs/platform/encryption/common/encryptionService';\nimport { ISecretStorageService } from 'vs/platform/secrets/common/secrets';\nimport { TunnelSource } from 'vs/workbench/services/remote/common/tunnelModel';\n\nexport class BrowserMain extends Disposable {\n\n\tprivate readonly onWillShutdownDisposables = this._register(new DisposableStore());\n\tprivate readonly indexedDBFileSystemProviders: IndexedDBFileSystemProvider[] = [];\n\n\tconstructor(\n\t\tprivate readonly domElement: HTMLElement,\n\t\tprivate readonly configuration: IWorkbenchConstructionOptions\n\t) {\n\t\tsuper();\n\n\t\tthis.init();\n\t}\n\n\tprivate init(): void {\n\n\t\t// Browser config\n\t\tsetFullscreen(!!detectFullscreen());\n\t}\n\n\tasync open(): Promise<IWorkbench> {\n\n\t\t// Init services and wait for DOM to be ready in parallel\n\t\tconst [services] = await Promise.all([this.initServices(), domContentLoaded()]);\n\n\t\t// Create Workbench\n\t\tconst workbench = new Workbench(this.domElement, undefined, services.serviceCollection, services.logService);\n\n\t\t// Listeners\n\t\tthis.registerListeners(workbench);\n\n\t\t// Startup\n\t\tconst instantiationService = workbench.startup();\n\n\t\t// Window\n\t\tthis._register(instantiationService.createInstance(BrowserWindow));\n\n\t\t// Logging\n\t\tservices.logService.trace('workbench#open with configuration', safeStringify(this.configuration));\n\n\t\tinstantiationService.invokeFunction(accessor => {\n\t\t\tconst telemetryService = accessor.get(ITelemetryService);\n\t\t\tfor (const indexedDbFileSystemProvider of this.indexedDBFileSystemProviders) {\n\t\t\t\tthis._register(indexedDbFileSystemProvider.onReportError(e => telemetryService.publicLog2<IndexedDBFileSystemProviderErrorData, IndexedDBFileSystemProviderErrorDataClassification>('indexedDBFileSystemProviderError', e)));\n\t\t\t}\n\t\t});\n\n\t\t// Return API Facade\n\t\treturn instantiationService.invokeFunction(accessor => {\n\t\t\tconst commandService = accessor.get(ICommandService);\n\t\t\tconst lifecycleService = accessor.get(ILifecycleService);\n\t\t\tconst timerService = accessor.get(ITimerService);\n\t\t\tconst openerService = accessor.get(IOpenerService);\n\t\t\tconst productService = accessor.get(IProductService);\n\t\t\tconst progressService = accessor.get(IProgressService);\n\t\t\tconst environmentService = accessor.get(IBrowserWorkbenchEnvironmentService);\n\t\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\t\tconst remoteExplorerService = accessor.get(IRemoteExplorerService);\n\t\t\tconst labelService = accessor.get(ILabelService);\n\t\t\tconst embedderTerminalService = accessor.get(IEmbedderTerminalService);\n\n\t\t\tlet logger: DelayedLogChannel | undefined = undefined;\n\n\t\t\treturn {\n\t\t\t\tcommands: {\n\t\t\t\t\texecuteCommand: (command, ...args) => commandService.executeCommand(command, ...args)\n\t\t\t\t},\n\t\t\t\tenv: {\n\t\t\t\t\tasync getUriScheme(): Promise<string> {\n\t\t\t\t\t\treturn productService.urlProtocol;\n\t\t\t\t\t},\n\t\t\t\t\tasync retrievePerformanceMarks() {\n\t\t\t\t\t\tawait timerService.whenReady();\n\n\t\t\t\t\t\treturn timerService.getPerformanceMarks();\n\t\t\t\t\t},\n\t\t\t\t\tasync openUri(uri: URI): Promise<boolean> {\n\t\t\t\t\t\treturn openerService.open(uri, {});\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tlogger: {\n\t\t\t\t\tlog: (level, message) => {\n\t\t\t\t\t\tif (!logger) {\n\t\t\t\t\t\t\tlogger = instantiationService.createInstance(DelayedLogChannel, 'webEmbedder', productService.embedderIdentifier || productService.nameShort, joinPath(dirname(environmentService.logFile), 'webEmbedder.log'));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tlogger.log(level, message);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\twindow: {\n\t\t\t\t\twithProgress: (options, task) => progressService.withProgress(options, task),\n\t\t\t\t\tcreateTerminal: async (options) => embedderTerminalService.createTerminal(options),\n\t\t\t\t},\n\t\t\t\tworkspace: {\n\t\t\t\t\topenTunnel: async tunnelOptions => {\n\t\t\t\t\t\tconst tunnel = assertIsDefined(await remoteExplorerService.forward({\n\t\t\t\t\t\t\tremote: tunnelOptions.remoteAddress,\n\t\t\t\t\t\t\tlocal: tunnelOptions.localAddressPort,\n\t\t\t\t\t\t\tname: tunnelOptions.label,\n\t\t\t\t\t\t\tsource: {\n\t\t\t\t\t\t\t\tsource: TunnelSource.Extension,\n\t\t\t\t\t\t\t\tdescription: labelService.getHostLabel(Schemas.vscodeRemote, this.configuration.remoteAuthority)\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\televateIfNeeded: false,\n\t\t\t\t\t\t\tprivacy: tunnelOptions.privacy\n\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\tlabel: tunnelOptions.label,\n\t\t\t\t\t\t\televateIfNeeded: undefined,\n\t\t\t\t\t\t\tonAutoForward: undefined,\n\t\t\t\t\t\t\trequireLocalPort: undefined,\n\t\t\t\t\t\t\tprotocol: tunnelOptions.protocol === TunnelProtocol.Https ? tunnelOptions.protocol : TunnelProtocol.Http\n\t\t\t\t\t\t}));\n\n\t\t\t\t\t\tif (typeof tunnel === 'string') {\n\t\t\t\t\t\t\tthrow new Error(tunnel);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn new class extends DisposableTunnel implements ITunnel {\n\t\t\t\t\t\t\tdeclare localAddress: string;\n\t\t\t\t\t\t}({\n\t\t\t\t\t\t\tport: tunnel.tunnelRemotePort,\n\t\t\t\t\t\t\thost: tunnel.tunnelRemoteHost\n\t\t\t\t\t\t}, tunnel.localAddress, () => tunnel.dispose());\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tshutdown: () => lifecycleService.shutdown()\n\t\t\t};\n\t\t});\n\t}\n\n\tprivate registerListeners(workbench: Workbench): void {\n\n\t\t// Workbench Lifecycle\n\t\tthis._register(workbench.onWillShutdown(() => this.onWillShutdownDisposables.clear()));\n\t\tthis._register(workbench.onDidShutdown(() => this.dispose()));\n\t}\n\n\tprivate async initServices(): Promise<{ serviceCollection: ServiceCollection; configurationService: IWorkbenchConfigurationService; logService: ILogService }> {\n\t\tconst serviceCollection = new ServiceCollection();\n\n\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t//\n\t\t// NOTE: Please do NOT register services here. Use `registerSingleton()`\n\t\t//       from `workbench.common.main.ts` if the service is shared between\n\t\t//       desktop and web or `workbench.web.main.ts` if the service\n\t\t//       is web only.\n\t\t//\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n\t\tconst workspace = this.resolveWorkspace();\n\n\t\t// Product\n\t\tconst productService: IProductService = mixin({ _serviceBrand: undefined, ...product }, this.configuration.productConfiguration);\n\t\tserviceCollection.set(IProductService, productService);\n\n\t\t// Environment\n\t\tconst logsPath = URI.file(toLocalISOString(new Date()).replace(/-|:|\\.\\d+Z$/g, '')).with({ scheme: 'vscode-log' });\n\t\tconst environmentService = new BrowserWorkbenchEnvironmentService(workspace.id, logsPath, this.configuration, productService);\n\t\tserviceCollection.set(IBrowserWorkbenchEnvironmentService, environmentService);\n\n\t\t// Files\n\t\tconst fileLogger = new BufferLogger();\n\t\tconst fileService = this._register(new FileService(fileLogger));\n\t\tserviceCollection.set(IWorkbenchFileService, fileService);\n\n\t\t// Logger\n\t\tconst loggerService = new FileLoggerService(getLogLevel(environmentService), logsPath, fileService);\n\t\tserviceCollection.set(ILoggerService, loggerService);\n\n\t\t// Log Service\n\t\tconst otherLoggers: ILogger[] = [new ConsoleLogger(loggerService.getLogLevel())];\n\t\tif (environmentService.isExtensionDevelopment && !!environmentService.extensionTestsLocationURI) {\n\t\t\totherLoggers.push(new ConsoleLogInAutomationLogger(loggerService.getLogLevel()));\n\t\t}\n\t\tconst logger = loggerService.createLogger(environmentService.logFile, { id: windowLogId, name: localize('rendererLog', \"Window\") });\n\t\tconst logService = new LogService(logger, otherLoggers);\n\t\tserviceCollection.set(ILogService, logService);\n\n\t\t// Set the logger of the fileLogger after the log service is ready.\n\t\t// This is to avoid cyclic dependency\n\t\tfileLogger.logger = logService;\n\n\t\t// Register File System Providers depending on IndexedDB support\n\t\t// Register them early because they are needed for the profiles initialization\n\t\tawait this.registerIndexedDBFileSystemProviders(environmentService, fileService, logService, loggerService, logsPath);\n\n\t\t// Remote\n\t\tconst connectionToken = environmentService.options.connectionToken || getCookieValue(connectionTokenCookieName);\n\t\tconst remoteResourceLoader = this.configuration.remoteResourceProvider ? new BrowserRemoteResourceLoader(fileService, this.configuration.remoteResourceProvider) : undefined;\n\t\tconst resourceUriProvider = this.configuration.resourceUriProvider ?? remoteResourceLoader?.getResourceUriProvider();\n\t\tconst remoteAuthorityResolverService = new RemoteAuthorityResolverService(!environmentService.expectsResolverExtension, connectionToken, resourceUriProvider, productService, logService);\n\t\tserviceCollection.set(IRemoteAuthorityResolverService, remoteAuthorityResolverService);\n\n\t\t// Signing\n\t\tconst signService = new SignService(productService);\n\t\tserviceCollection.set(ISignService, signService);\n\n\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t//\n\t\t// NOTE: Please do NOT register services here. Use `registerSingleton()`\n\t\t//       from `workbench.common.main.ts` if the service is shared between\n\t\t//       desktop and web or `workbench.web.main.ts` if the service\n\t\t//       is web only.\n\t\t//\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n\t\t// URI Identity\n\t\tconst uriIdentityService = new UriIdentityService(fileService);\n\t\tserviceCollection.set(IUriIdentityService, uriIdentityService);\n\n\t\t// User Data Profiles\n\t\tconst userDataProfilesService = new BrowserUserDataProfilesService(environmentService, fileService, uriIdentityService, logService);\n\t\tserviceCollection.set(IUserDataProfilesService, userDataProfilesService);\n\n\t\tconst currentProfile = await this.getCurrentProfile(workspace, userDataProfilesService, environmentService);\n\t\tconst userDataProfileService = new UserDataProfileService(currentProfile);\n\t\tserviceCollection.set(IUserDataProfileService, userDataProfileService);\n\n\t\t// Remote Agent\n\t\tconst remoteSocketFactoryService = new RemoteSocketFactoryService();\n\t\tremoteSocketFactoryService.register(RemoteConnectionType.WebSocket, new BrowserSocketFactory(this.configuration.webSocketFactory));\n\t\tserviceCollection.set(IRemoteSocketFactoryService, remoteSocketFactoryService);\n\t\tconst remoteAgentService = this._register(new RemoteAgentService(remoteSocketFactoryService, userDataProfileService, environmentService, productService, remoteAuthorityResolverService, signService, logService));\n\t\tserviceCollection.set(IRemoteAgentService, remoteAgentService);\n\t\tthis._register(RemoteFileSystemProviderClient.register(remoteAgentService, fileService, logService));\n\n\t\t// Long running services (workspace, config, storage)\n\t\tconst [configurationService, storageService] = await Promise.all([\n\t\t\tthis.createWorkspaceService(workspace, environmentService, userDataProfileService, userDataProfilesService, fileService, remoteAgentService, uriIdentityService, logService).then(service => {\n\n\t\t\t\t// Workspace\n\t\t\t\tserviceCollection.set(IWorkspaceContextService, service);\n\n\t\t\t\t// Configuration\n\t\t\t\tserviceCollection.set(IWorkbenchConfigurationService, service);\n\n\t\t\t\treturn service;\n\t\t\t}),\n\n\t\t\tthis.createStorageService(workspace, logService, userDataProfileService).then(service => {\n\n\t\t\t\t// Storage\n\t\t\t\tserviceCollection.set(IStorageService, service);\n\n\t\t\t\treturn service;\n\t\t\t})\n\t\t]);\n\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t//\n\t\t// NOTE: Please do NOT register services here. Use `registerSingleton()`\n\t\t//       from `workbench.common.main.ts` if the service is shared between\n\t\t//       desktop and web or `workbench.web.main.ts` if the service\n\t\t//       is web only.\n\t\t//\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n\t\t// Workspace Trust Service\n\t\tconst workspaceTrustEnablementService = new WorkspaceTrustEnablementService(configurationService, environmentService);\n\t\tserviceCollection.set(IWorkspaceTrustEnablementService, workspaceTrustEnablementService);\n\n\t\tconst workspaceTrustManagementService = new WorkspaceTrustManagementService(configurationService, remoteAuthorityResolverService, storageService, uriIdentityService, environmentService, configurationService, workspaceTrustEnablementService, fileService);\n\t\tserviceCollection.set(IWorkspaceTrustManagementService, workspaceTrustManagementService);\n\n\t\t// Update workspace trust so that configuration is updated accordingly\n\t\tconfigurationService.updateWorkspaceTrust(workspaceTrustManagementService.isWorkspaceTrusted());\n\t\tthis._register(workspaceTrustManagementService.onDidChangeTrust(() => configurationService.updateWorkspaceTrust(workspaceTrustManagementService.isWorkspaceTrusted())));\n\n\t\t// Request Service\n\t\tconst requestService = new BrowserRequestService(remoteAgentService, configurationService, loggerService);\n\t\tserviceCollection.set(IRequestService, requestService);\n\n\t\t// Userdata Sync Store Management Service\n\t\tconst userDataSyncStoreManagementService = new UserDataSyncStoreManagementService(productService, configurationService, storageService);\n\t\tserviceCollection.set(IUserDataSyncStoreManagementService, userDataSyncStoreManagementService);\n\n\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t//\n\t\t// NOTE: Please do NOT register services here. Use `registerSingleton()`\n\t\t//       from `workbench.common.main.ts` if the service is shared between\n\t\t//       desktop and web or `workbench.web.main.ts` if the service\n\t\t//       is web only.\n\t\t//\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\tconst encryptionService = new EncryptionService();\n\t\tserviceCollection.set(IEncryptionService, encryptionService);\n\t\tconst secretStorageService = new BrowserSecretStorageService(storageService, encryptionService, environmentService, logService);\n\t\tserviceCollection.set(ISecretStorageService, secretStorageService);\n\n\t\t// Userdata Initialize Service\n\t\tconst userDataInitializers: IUserDataInitializer[] = [];\n\t\tuserDataInitializers.push(new UserDataSyncInitializer(environmentService, secretStorageService, userDataSyncStoreManagementService, fileService, userDataProfilesService, storageService, productService, requestService, logService, uriIdentityService));\n\t\tif (environmentService.options.profile) {\n\t\t\tuserDataInitializers.push(new UserDataProfileInitializer(environmentService, fileService, userDataProfileService, storageService, logService, uriIdentityService, requestService));\n\t\t}\n\t\tconst userDataInitializationService = new UserDataInitializationService(userDataInitializers);\n\t\tserviceCollection.set(IUserDataInitializationService, userDataInitializationService);\n\n\t\ttry {\n\t\t\tawait Promise.race([\n\t\t\t\t// Do not block more than 5s\n\t\t\t\ttimeout(5000),\n\t\t\t\tthis.initializeUserData(userDataInitializationService, configurationService)]\n\t\t\t);\n\t\t} catch (error) {\n\t\t\tlogService.error(error);\n\t\t}\n\n\t\treturn { serviceCollection, configurationService, logService };\n\t}\n\n\tprivate async initializeUserData(userDataInitializationService: UserDataInitializationService, configurationService: WorkspaceService) {\n\t\tif (await userDataInitializationService.requiresInitialization()) {\n\t\t\tmark('code/willInitRequiredUserData');\n\n\t\t\t// Initialize required resources - settings & global state\n\t\t\tawait userDataInitializationService.initializeRequiredResources();\n\n\t\t\t// Important: Reload only local user configuration after initializing\n\t\t\t// Reloading complete configuration blocks workbench until remote configuration is loaded.\n\t\t\tawait configurationService.reloadLocalUserConfiguration();\n\n\t\t\tmark('code/didInitRequiredUserData');\n\t\t}\n\t}\n\n\tprivate async registerIndexedDBFileSystemProviders(environmentService: IWorkbenchEnvironmentService, fileService: IWorkbenchFileService, logService: ILogService, loggerService: ILoggerService, logsPath: URI): Promise<void> {\n\t\t// IndexedDB is used for logging and user data\n\t\tlet indexedDB: IndexedDB | undefined;\n\t\tconst userDataStore = 'vscode-userdata-store';\n\t\tconst logsStore = 'vscode-logs-store';\n\t\tconst handlesStore = 'vscode-filehandles-store';\n\t\ttry {\n\t\t\tindexedDB = await IndexedDB.create('vscode-web-db', 3, [userDataStore, logsStore, handlesStore]);\n\n\t\t\t// Close onWillShutdown\n\t\t\tthis.onWillShutdownDisposables.add(toDisposable(() => indexedDB?.close()));\n\t\t} catch (error) {\n\t\t\tlogService.error('Error while creating IndexedDB', error);\n\t\t}\n\n\t\t// Logger\n\t\tif (indexedDB) {\n\t\t\tconst logFileSystemProvider = new IndexedDBFileSystemProvider(logsPath.scheme, indexedDB, logsStore, false);\n\t\t\tthis.indexedDBFileSystemProviders.push(logFileSystemProvider);\n\t\t\tfileService.registerProvider(logsPath.scheme, logFileSystemProvider);\n\t\t} else {\n\t\t\tfileService.registerProvider(logsPath.scheme, new InMemoryFileSystemProvider());\n\t\t}\n\n\t\t// User data\n\t\tlet userDataProvider;\n\t\tif (indexedDB) {\n\t\t\tuserDataProvider = new IndexedDBFileSystemProvider(Schemas.vscodeUserData, indexedDB, userDataStore, true);\n\t\t\tthis.indexedDBFileSystemProviders.push(userDataProvider);\n\t\t\tthis.registerDeveloperActions(<IndexedDBFileSystemProvider>userDataProvider);\n\t\t} else {\n\t\t\tlogService.info('Using in-memory user data provider');\n\t\t\tuserDataProvider = new InMemoryFileSystemProvider();\n\t\t}\n\t\tfileService.registerProvider(Schemas.vscodeUserData, userDataProvider);\n\n\t\t// Local file access (if supported by browser)\n\t\tif (WebFileSystemAccess.supported(window)) {\n\t\t\tfileService.registerProvider(Schemas.file, new HTMLFileSystemProvider(indexedDB, handlesStore, logService));\n\t\t}\n\n\t\t// In-memory\n\t\tfileService.registerProvider(Schemas.tmp, new InMemoryFileSystemProvider());\n\t}\n\n\tprivate registerDeveloperActions(provider: IndexedDBFileSystemProvider): void {\n\t\tregisterAction2(class ResetUserDataAction extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: 'workbench.action.resetUserData',\n\t\t\t\t\ttitle: { original: 'Reset User Data', value: localize('reset', \"Reset User Data\") },\n\t\t\t\t\tcategory: Categories.Developer,\n\t\t\t\t\tmenu: {\n\t\t\t\t\t\tid: MenuId.CommandPalette\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\t\t\tconst dialogService = accessor.get(IDialogService);\n\t\t\t\tconst hostService = accessor.get(IHostService);\n\t\t\t\tconst storageService = accessor.get(IStorageService);\n\t\t\t\tconst logService = accessor.get(ILogService);\n\t\t\t\tconst result = await dialogService.confirm({\n\t\t\t\t\tmessage: localize('reset user data message', \"Would you like to reset your data (settings, keybindings, extensions, snippets and UI State) and reload?\")\n\t\t\t\t});\n\n\t\t\t\tif (result.confirmed) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait provider?.reset();\n\t\t\t\t\t\tif (storageService instanceof BrowserStorageService) {\n\t\t\t\t\t\t\tawait storageService.clear();\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tlogService.error(error);\n\t\t\t\t\t\tthrow error;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\thostService.reload();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async createStorageService(workspace: IAnyWorkspaceIdentifier, logService: ILogService, userDataProfileService: IUserDataProfileService): Promise<IStorageService> {\n\t\tconst storageService = new BrowserStorageService(workspace, userDataProfileService, logService);\n\n\t\ttry {\n\t\t\tawait storageService.initialize();\n\n\t\t\t// Register to close on shutdown\n\t\t\tthis.onWillShutdownDisposables.add(toDisposable(() => storageService.close()));\n\n\t\t\treturn storageService;\n\t\t} catch (error) {\n\t\t\tonUnexpectedError(error);\n\t\t\tlogService.error(error);\n\n\t\t\treturn storageService;\n\t\t}\n\t}\n\n\tprivate async createWorkspaceService(workspace: IAnyWorkspaceIdentifier, environmentService: IBrowserWorkbenchEnvironmentService, userDataProfileService: IUserDataProfileService, userDataProfilesService: IUserDataProfilesService, fileService: FileService, remoteAgentService: IRemoteAgentService, uriIdentityService: IUriIdentityService, logService: ILogService): Promise<WorkspaceService> {\n\n\t\t// Temporary workspaces do not exist on startup because they are\n\t\t// just in memory. As such, detect this case and eagerly create\n\t\t// the workspace file empty so that it is a valid workspace.\n\n\t\tif (isWorkspaceIdentifier(workspace) && isTemporaryWorkspace(workspace.configPath)) {\n\t\t\ttry {\n\t\t\t\tconst emptyWorkspace: IStoredWorkspace = { folders: [] };\n\t\t\t\tawait fileService.createFile(workspace.configPath, VSBuffer.fromString(JSON.stringify(emptyWorkspace, null, '\\t')), { overwrite: false });\n\t\t\t} catch (error) {\n\t\t\t\t// ignore if workspace file already exists\n\t\t\t}\n\t\t}\n\n\t\tconst configurationCache = new ConfigurationCache([Schemas.file, Schemas.vscodeUserData, Schemas.tmp] /* Cache all non native resources */, environmentService, fileService);\n\t\tconst workspaceService = new WorkspaceService({ remoteAuthority: this.configuration.remoteAuthority, configurationCache }, environmentService, userDataProfileService, userDataProfilesService, fileService, remoteAgentService, uriIdentityService, logService, new NullPolicyService());\n\n\t\ttry {\n\t\t\tawait workspaceService.initialize(workspace);\n\n\t\t\treturn workspaceService;\n\t\t} catch (error) {\n\t\t\tonUnexpectedError(error);\n\t\t\tlogService.error(error);\n\n\t\t\treturn workspaceService;\n\t\t}\n\t}\n\n\tprivate async getCurrentProfile(workspace: IAnyWorkspaceIdentifier, userDataProfilesService: BrowserUserDataProfilesService, environmentService: IBrowserWorkbenchEnvironmentService): Promise<IUserDataProfile> {\n\t\tif (environmentService.options?.profile) {\n\t\t\tconst profile = userDataProfilesService.profiles.find(p => p.name === environmentService.options?.profile?.name);\n\t\t\tif (profile) {\n\t\t\t\treturn profile;\n\t\t\t}\n\t\t\treturn userDataProfilesService.createNamedProfile(environmentService.options?.profile?.name, undefined, workspace);\n\t\t}\n\t\treturn userDataProfilesService.getProfileForWorkspace(workspace) ?? userDataProfilesService.defaultProfile;\n\t}\n\n\tprivate resolveWorkspace(): IAnyWorkspaceIdentifier {\n\t\tlet workspace: IWorkspace | undefined = undefined;\n\t\tif (this.configuration.workspaceProvider) {\n\t\t\tworkspace = this.configuration.workspaceProvider.workspace;\n\t\t}\n\n\t\t// Multi-root workspace\n\t\tif (workspace && isWorkspaceToOpen(workspace)) {\n\t\t\treturn getWorkspaceIdentifier(workspace.workspaceUri);\n\t\t}\n\n\t\t// Single-folder workspace\n\t\tif (workspace && isFolderToOpen(workspace)) {\n\t\t\treturn getSingleFolderWorkspaceIdentifier(workspace.folderUri);\n\t\t}\n\n\t\t// Empty window workspace\n\t\treturn UNKNOWN_EMPTY_WINDOW_WORKSPACE;\n\t}\n}\n"]}