{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/browser/actions/widgetNavigationCommands.ts"],"names":[],"mappings":"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","file":"widgetNavigationCommands.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyMod, KeyCode } from 'vs/base/common/keyCodes';\nimport { ContextKeyExpr, IContextKey, IContextKeyService, RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { KeybindingWeight, KeybindingsRegistry } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { WorkbenchListFocusContextKey, WorkbenchListScrollAtBottomContextKey, WorkbenchListScrollAtTopContextKey } from 'vs/platform/list/browser/listService';\nimport { Event } from 'vs/base/common/event';\nimport { combinedDisposable, toDisposable, IDisposable, Disposable } from 'vs/base/common/lifecycle';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\n\n/** INavigableContainer represents a logical container composed of widgets that can\n\tbe navigated back and forth with key shortcuts */\ninterface INavigableContainer {\n\t/**\n\t * The container may coomposed of multiple parts that share no DOM ancestor\n\t * (e.g., the main body and filter box of MarkersView may be separated).\n\t * To track the focus of container we must pass in focus/blur events of all parts\n\t * as `focusNotifiers`.\n\t *\n\t * Each element of `focusNotifiers` notifies the focus/blur event for a part of\n\t * the container. The container is considered focused if at least one part being\n\t * focused, and blurred if all parts being blurred.\n\t */\n\treadonly focusNotifiers: readonly IFocusNotifier[];\n\tfocusPreviousWidget(): void;\n\tfocusNextWidget(): void;\n}\n\ninterface IFocusNotifier {\n\treadonly onDidFocus: Event<any>;\n\treadonly onDidBlur: Event<any>;\n}\n\nfunction handleFocusEventsGroup(group: readonly IFocusNotifier[], handler: (isFocus: boolean) => void): IDisposable {\n\tconst focusedIndices = new Set<number>();\n\treturn combinedDisposable(...group.map((events, index) => combinedDisposable(\n\t\tevents.onDidFocus(() => {\n\t\t\tif (!focusedIndices.size) {\n\t\t\t\thandler(true);\n\t\t\t}\n\t\t\tfocusedIndices.add(index);\n\t\t}),\n\t\tevents.onDidBlur(() => {\n\t\t\tfocusedIndices.delete(index);\n\t\t\tif (!focusedIndices.size) {\n\t\t\t\thandler(false);\n\t\t\t}\n\t\t}),\n\t)));\n}\n\nconst NavigableContainerFocusedContextKey = new RawContextKey<boolean>('navigableContainerFocused', false);\n\nclass NavigableContainerManager implements IDisposable {\n\tprivate static INSTANCE: NavigableContainerManager | undefined;\n\n\tprivate readonly containers = new Set<INavigableContainer>();\n\tprivate lastContainer: INavigableContainer | undefined;\n\tprivate focused: IContextKey<boolean>;\n\n\n\tconstructor(@IContextKeyService contextKeyService: IContextKeyService) {\n\t\tthis.focused = NavigableContainerFocusedContextKey.bindTo(contextKeyService);\n\t\tNavigableContainerManager.INSTANCE = this;\n\t}\n\n\tdispose(): void {\n\t\tthis.containers.clear();\n\t\tthis.focused.reset();\n\t\tNavigableContainerManager.INSTANCE = undefined;\n\t}\n\n\tstatic register(container: INavigableContainer): IDisposable {\n\t\tconst instance = this.INSTANCE;\n\t\tif (!instance) {\n\t\t\treturn Disposable.None;\n\t\t}\n\t\tinstance.containers.add(container);\n\n\t\treturn combinedDisposable(\n\t\t\thandleFocusEventsGroup(container.focusNotifiers, (isFocus) => {\n\t\t\t\tif (isFocus) {\n\t\t\t\t\tinstance.focused.set(true);\n\t\t\t\t\tinstance.lastContainer = container;\n\t\t\t\t} else if (instance.lastContainer === container) {\n\t\t\t\t\tinstance.focused.set(false);\n\t\t\t\t\tinstance.lastContainer = undefined;\n\t\t\t\t}\n\t\t\t}),\n\t\t\ttoDisposable(() => {\n\t\t\t\tinstance.containers.delete(container);\n\t\t\t\tif (instance.lastContainer === container) {\n\t\t\t\t\tinstance.focused.set(false);\n\t\t\t\t\tinstance.lastContainer = undefined;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\tstatic getActive(): INavigableContainer | undefined {\n\t\treturn this.INSTANCE?.lastContainer;\n\t}\n}\n\nexport function registerNavigableContainer(container: INavigableContainer): IDisposable {\n\treturn NavigableContainerManager.register(container);\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench)\n\t.registerWorkbenchContribution(NavigableContainerManager, LifecyclePhase.Starting);\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'widgetNavigation.focusPrevious',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(\n\t\tNavigableContainerFocusedContextKey,\n\t\tContextKeyExpr.or(\n\t\t\tWorkbenchListFocusContextKey?.negate(),\n\t\t\tWorkbenchListScrollAtTopContextKey,\n\t\t)\n\t),\n\tprimary: KeyMod.CtrlCmd | KeyCode.UpArrow,\n\thandler: () => {\n\t\tconst activeContainer = NavigableContainerManager.getActive();\n\t\tactiveContainer?.focusPreviousWidget();\n\t}\n});\n\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: 'widgetNavigation.focusNext',\n\tweight: KeybindingWeight.WorkbenchContrib,\n\twhen: ContextKeyExpr.and(\n\t\tNavigableContainerFocusedContextKey,\n\t\tContextKeyExpr.or(\n\t\t\tWorkbenchListFocusContextKey?.negate(),\n\t\t\tWorkbenchListScrollAtBottomContextKey,\n\t\t)\n\t),\n\tprimary: KeyMod.CtrlCmd | KeyCode.DownArrow,\n\thandler: () => {\n\t\tconst activeContainer = NavigableContainerManager.getActive();\n\t\tactiveContainer?.focusNextWidget();\n\t}\n});\n"]}