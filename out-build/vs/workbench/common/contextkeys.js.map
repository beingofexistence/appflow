{"version":3,"sources":["vs/workbench/common/contextkeys.ts"],"names":[],"mappings":"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","file":"contextkeys.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { IContextKeyService, IContextKey, RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { basename, dirname, extname, isEqual } from 'vs/base/common/resources';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { Schemas } from 'vs/base/common/network';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { IEditorResolverService } from 'vs/workbench/services/editor/common/editorResolverService';\nimport { DEFAULT_EDITOR_ASSOCIATION } from 'vs/workbench/common/editor';\n\n//#region < --- Workbench --- >\n\nexport const WorkbenchStateContext = new RawContextKey<string>('workbenchState', undefined, { type: 'string', description: localize('workbenchState', \"The kind of workspace opened in the window, either 'empty' (no workspace), 'folder' (single folder) or 'workspace' (multi-root workspace)\") });\nexport const WorkspaceFolderCountContext = new RawContextKey<number>('workspaceFolderCount', 0, localize('workspaceFolderCount', \"The number of root folders in the workspace\"));\n\nexport const OpenFolderWorkspaceSupportContext = new RawContextKey<boolean>('openFolderWorkspaceSupport', true, true);\nexport const EnterMultiRootWorkspaceSupportContext = new RawContextKey<boolean>('enterMultiRootWorkspaceSupport', true, true);\nexport const EmptyWorkspaceSupportContext = new RawContextKey<boolean>('emptyWorkspaceSupport', true, true);\n\nexport const DirtyWorkingCopiesContext = new RawContextKey<boolean>('dirtyWorkingCopies', false, localize('dirtyWorkingCopies', \"Whether there are any working copies with unsaved changes\"));\n\nexport const RemoteNameContext = new RawContextKey<string>('remoteName', '', localize('remoteName', \"The name of the remote the window is connected to or an empty string if not connected to any remote\"));\n\nexport const VirtualWorkspaceContext = new RawContextKey<string>('virtualWorkspace', '', localize('virtualWorkspace', \"The scheme of the current workspace is from a virtual file system or an empty string.\"));\nexport const TemporaryWorkspaceContext = new RawContextKey<boolean>('temporaryWorkspace', false, localize('temporaryWorkspace', \"The scheme of the current workspace is from a temporary file system.\"));\n\nexport const IsFullscreenContext = new RawContextKey<boolean>('isFullscreen', false, localize('isFullscreen', \"Whether the window is in fullscreen mode\"));\n\nexport const HasWebFileSystemAccess = new RawContextKey<boolean>('hasWebFileSystemAccess', false, true); // Support for FileSystemAccess web APIs (https://wicg.github.io/file-system-access)\n\nexport const EmbedderIdentifierContext = new RawContextKey<string | undefined>('embedderIdentifier', undefined, localize('embedderIdentifier', 'The identifier of the embedder according to the product service, if one is defined'));\n\n//#endregion\n\n\n//#region < --- Editor --- >\n\n// Editor State Context Keys\nexport const ActiveEditorDirtyContext = new RawContextKey<boolean>('activeEditorIsDirty', false, localize('activeEditorIsDirty', \"Whether the active editor has unsaved changes\"));\nexport const ActiveEditorPinnedContext = new RawContextKey<boolean>('activeEditorIsNotPreview', false, localize('activeEditorIsNotPreview', \"Whether the active editor is not in preview mode\"));\nexport const ActiveEditorFirstInGroupContext = new RawContextKey<boolean>('activeEditorIsFirstInGroup', false, localize('activeEditorIsFirstInGroup', \"Whether the active editor is the first one in its group\"));\nexport const ActiveEditorLastInGroupContext = new RawContextKey<boolean>('activeEditorIsLastInGroup', false, localize('activeEditorIsLastInGroup', \"Whether the active editor is the last one in its group\"));\nexport const ActiveEditorStickyContext = new RawContextKey<boolean>('activeEditorIsPinned', false, localize('activeEditorIsPinned', \"Whether the active editor is pinned\"));\nexport const ActiveEditorReadonlyContext = new RawContextKey<boolean>('activeEditorIsReadonly', false, localize('activeEditorIsReadonly', \"Whether the active editor is read-only\"));\nexport const ActiveEditorCanToggleReadonlyContext = new RawContextKey<boolean>('activeEditorCanToggleReadonly', true, localize('activeEditorCanToggleReadonly', \"Whether the active editor can toggle between being read-only or writeable\"));\nexport const ActiveEditorCanRevertContext = new RawContextKey<boolean>('activeEditorCanRevert', false, localize('activeEditorCanRevert', \"Whether the active editor can revert\"));\nexport const ActiveEditorCanSplitInGroupContext = new RawContextKey<boolean>('activeEditorCanSplitInGroup', true);\n\n// Editor Kind Context Keys\nexport const ActiveEditorContext = new RawContextKey<string | null>('activeEditor', null, { type: 'string', description: localize('activeEditor', \"The identifier of the active editor\") });\nexport const ActiveEditorAvailableEditorIdsContext = new RawContextKey<string>('activeEditorAvailableEditorIds', '', localize('activeEditorAvailableEditorIds', \"The available editor identifiers that are usable for the active editor\"));\nexport const TextCompareEditorVisibleContext = new RawContextKey<boolean>('textCompareEditorVisible', false, localize('textCompareEditorVisible', \"Whether a text compare editor is visible\"));\nexport const TextCompareEditorActiveContext = new RawContextKey<boolean>('textCompareEditorActive', false, localize('textCompareEditorActive', \"Whether a text compare editor is active\"));\nexport const SideBySideEditorActiveContext = new RawContextKey<boolean>('sideBySideEditorActive', false, localize('sideBySideEditorActive', \"Whether a side by side editor is active\"));\n\n// Editor Group Context Keys\nexport const EditorGroupEditorsCountContext = new RawContextKey<number>('groupEditorsCount', 0, localize('groupEditorsCount', \"The number of opened editor groups\"));\nexport const ActiveEditorGroupEmptyContext = new RawContextKey<boolean>('activeEditorGroupEmpty', false, localize('activeEditorGroupEmpty', \"Whether the active editor group is empty\"));\nexport const ActiveEditorGroupIndexContext = new RawContextKey<number>('activeEditorGroupIndex', 0, localize('activeEditorGroupIndex', \"The index of the active editor group\"));\nexport const ActiveEditorGroupLastContext = new RawContextKey<boolean>('activeEditorGroupLast', false, localize('activeEditorGroupLast', \"Whether the active editor group is the last group\"));\nexport const ActiveEditorGroupLockedContext = new RawContextKey<boolean>('activeEditorGroupLocked', false, localize('activeEditorGroupLocked', \"Whether the active editor group is locked\"));\nexport const MultipleEditorGroupsContext = new RawContextKey<boolean>('multipleEditorGroups', false, localize('multipleEditorGroups', \"Whether there are multiple editor groups opened\"));\nexport const SingleEditorGroupsContext = MultipleEditorGroupsContext.toNegated();\n\n// Editor Layout Context Keys\nexport const EditorsVisibleContext = new RawContextKey<boolean>('editorIsOpen', false, localize('editorIsOpen', \"Whether an editor is open\"));\nexport const InEditorZenModeContext = new RawContextKey<boolean>('inZenMode', false, localize('inZenMode', \"Whether Zen mode is enabled\"));\nexport const IsCenteredLayoutContext = new RawContextKey<boolean>('isCenteredLayout', false, localize('isCenteredLayout', \"Whether centered layout is enabled\"));\nexport const SplitEditorsVertically = new RawContextKey<boolean>('splitEditorsVertically', false, localize('splitEditorsVertically', \"Whether editors split vertically\"));\nexport const EditorAreaVisibleContext = new RawContextKey<boolean>('editorAreaVisible', true, localize('editorAreaVisible', \"Whether the editor area is visible\"));\nexport const EditorTabsVisibleContext = new RawContextKey<boolean>('editorTabsVisible', true, localize('editorTabsVisible', \"Whether editor tabs are visible\"));\n\n//#endregion\n\n\n//#region < --- Side Bar --- >\n\nexport const SideBarVisibleContext = new RawContextKey<boolean>('sideBarVisible', false, localize('sideBarVisible', \"Whether the sidebar is visible\"));\nexport const SidebarFocusContext = new RawContextKey<boolean>('sideBarFocus', false, localize('sideBarFocus', \"Whether the sidebar has keyboard focus\"));\nexport const ActiveViewletContext = new RawContextKey<string>('activeViewlet', '', localize('activeViewlet', \"The identifier of the active viewlet\"));\n\n//#endregion\n\n\n//#region < --- Status Bar --- >\n\nexport const StatusBarFocused = new RawContextKey<boolean>('statusBarFocused', false, localize('statusBarFocused', \"Whether the status bar has keyboard focus\"));\n\n//#endregion\n\n\n//#region < --- Banner --- >\n\nexport const BannerFocused = new RawContextKey<boolean>('bannerFocused', false, localize('bannerFocused', \"Whether the banner has keyboard focus\"));\n\n//#endregion\n\n\n//#region < --- Notifications --- >\n\nexport const NotificationFocusedContext = new RawContextKey<boolean>('notificationFocus', true, localize('notificationFocus', \"Whether a notification has keyboard focus\"));\nexport const NotificationsCenterVisibleContext = new RawContextKey<boolean>('notificationCenterVisible', false, localize('notificationCenterVisible', \"Whether the notifications center is visible\"));\nexport const NotificationsToastsVisibleContext = new RawContextKey<boolean>('notificationToastsVisible', false, localize('notificationToastsVisible', \"Whether a notification toast is visible\"));\n\n//#endregion\n\n\n//#region < --- Auxiliary Bar --- >\n\nexport const ActiveAuxiliaryContext = new RawContextKey<string>('activeAuxiliary', '', localize('activeAuxiliary', \"The identifier of the active auxiliary panel\"));\nexport const AuxiliaryBarFocusContext = new RawContextKey<boolean>('auxiliaryBarFocus', false, localize('auxiliaryBarFocus', \"Whether the auxiliary bar has keyboard focus\"));\nexport const AuxiliaryBarVisibleContext = new RawContextKey<boolean>('auxiliaryBarVisible', false, localize('auxiliaryBarVisible', \"Whether the auxiliary bar is visible\"));\n\n//#endregion\n\n\n//#region < --- Panel --- >\n\nexport const ActivePanelContext = new RawContextKey<string>('activePanel', '', localize('activePanel', \"The identifier of the active panel\"));\nexport const PanelFocusContext = new RawContextKey<boolean>('panelFocus', false, localize('panelFocus', \"Whether the panel has keyboard focus\"));\nexport const PanelPositionContext = new RawContextKey<string>('panelPosition', 'bottom', localize('panelPosition', \"The position of the panel, always 'bottom'\"));\nexport const PanelAlignmentContext = new RawContextKey<string>('panelAlignment', 'center', localize('panelAlignment', \"The alignment of the panel, either 'center', 'left', 'right' or 'justify'\"));\nexport const PanelVisibleContext = new RawContextKey<boolean>('panelVisible', false, localize('panelVisible', \"Whether the panel is visible\"));\nexport const PanelMaximizedContext = new RawContextKey<boolean>('panelMaximized', false, localize('panelMaximized', \"Whether the panel is maximized\"));\n\n//#endregion\n\n\n//#region < --- Views --- >\n\nexport const FocusedViewContext = new RawContextKey<string>('focusedView', '', localize('focusedView', \"The identifier of the view that has keyboard focus\"));\nexport function getVisbileViewContextKey(viewId: string): string { return `view.${viewId}.visible`; }\nexport function getEnabledViewContainerContextKey(viewContainerId: string): string { return `viewContainer.${viewContainerId}.enabled`; }\n\n//#endregion\n\n\n//#region < --- Resources --- >\n\nexport class ResourceContextKey {\n\n\t// NOTE: DO NOT CHANGE THE DEFAULT VALUE TO ANYTHING BUT\n\t// UNDEFINED! IT IS IMPORTANT THAT DEFAULTS ARE INHERITED\n\t// FROM THE PARENT CONTEXT AND ONLY UNDEFINED DOES THIS\n\n\tstatic readonly Scheme = new RawContextKey<string>('resourceScheme', undefined, { type: 'string', description: localize('resourceScheme', \"The scheme of the resource\") });\n\tstatic readonly Filename = new RawContextKey<string>('resourceFilename', undefined, { type: 'string', description: localize('resourceFilename', \"The file name of the resource\") });\n\tstatic readonly Dirname = new RawContextKey<string>('resourceDirname', undefined, { type: 'string', description: localize('resourceDirname', \"The folder name the resource is contained in\") });\n\tstatic readonly Path = new RawContextKey<string>('resourcePath', undefined, { type: 'string', description: localize('resourcePath', \"The full path of the resource\") });\n\tstatic readonly LangId = new RawContextKey<string>('resourceLangId', undefined, { type: 'string', description: localize('resourceLangId', \"The language identifier of the resource\") });\n\tstatic readonly Resource = new RawContextKey<string>('resource', undefined, { type: 'URI', description: localize('resource', \"The full value of the resource including scheme and path\") });\n\tstatic readonly Extension = new RawContextKey<string>('resourceExtname', undefined, { type: 'string', description: localize('resourceExtname', \"The extension name of the resource\") });\n\tstatic readonly HasResource = new RawContextKey<boolean>('resourceSet', undefined, { type: 'boolean', description: localize('resourceSet', \"Whether a resource is present or not\") });\n\tstatic readonly IsFileSystemResource = new RawContextKey<boolean>('isFileSystemResource', undefined, { type: 'boolean', description: localize('isFileSystemResource', \"Whether the resource is backed by a file system provider\") });\n\n\tprivate readonly _disposables = new DisposableStore();\n\n\tprivate _value: URI | undefined;\n\tprivate readonly _resourceKey: IContextKey<string | null>;\n\tprivate readonly _schemeKey: IContextKey<string | null>;\n\tprivate readonly _filenameKey: IContextKey<string | null>;\n\tprivate readonly _dirnameKey: IContextKey<string | null>;\n\tprivate readonly _pathKey: IContextKey<string | null>;\n\tprivate readonly _langIdKey: IContextKey<string | null>;\n\tprivate readonly _extensionKey: IContextKey<string | null>;\n\tprivate readonly _hasResource: IContextKey<boolean>;\n\tprivate readonly _isFileSystemResource: IContextKey<boolean>;\n\n\tconstructor(\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService,\n\t\t@IFileService private readonly _fileService: IFileService,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@IModelService private readonly _modelService: IModelService\n\t) {\n\t\tthis._schemeKey = ResourceContextKey.Scheme.bindTo(this._contextKeyService);\n\t\tthis._filenameKey = ResourceContextKey.Filename.bindTo(this._contextKeyService);\n\t\tthis._dirnameKey = ResourceContextKey.Dirname.bindTo(this._contextKeyService);\n\t\tthis._pathKey = ResourceContextKey.Path.bindTo(this._contextKeyService);\n\t\tthis._langIdKey = ResourceContextKey.LangId.bindTo(this._contextKeyService);\n\t\tthis._resourceKey = ResourceContextKey.Resource.bindTo(this._contextKeyService);\n\t\tthis._extensionKey = ResourceContextKey.Extension.bindTo(this._contextKeyService);\n\t\tthis._hasResource = ResourceContextKey.HasResource.bindTo(this._contextKeyService);\n\t\tthis._isFileSystemResource = ResourceContextKey.IsFileSystemResource.bindTo(this._contextKeyService);\n\n\t\tthis._disposables.add(_fileService.onDidChangeFileSystemProviderRegistrations(() => {\n\t\t\tconst resource = this.get();\n\t\t\tthis._isFileSystemResource.set(Boolean(resource && _fileService.hasProvider(resource)));\n\t\t}));\n\n\t\tthis._disposables.add(_modelService.onModelAdded(model => {\n\t\t\tif (isEqual(model.uri, this.get())) {\n\t\t\t\tthis._setLangId();\n\t\t\t}\n\t\t}));\n\t\tthis._disposables.add(_modelService.onModelLanguageChanged(e => {\n\t\t\tif (isEqual(e.model.uri, this.get())) {\n\t\t\t\tthis._setLangId();\n\t\t\t}\n\t\t}));\n\t}\n\n\tdispose(): void {\n\t\tthis._disposables.dispose();\n\t}\n\n\tprivate _setLangId(): void {\n\t\tconst value = this.get();\n\t\tif (!value) {\n\t\t\tthis._langIdKey.set(null);\n\t\t\treturn;\n\t\t}\n\t\tconst langId = this._modelService.getModel(value)?.getLanguageId() ?? this._languageService.guessLanguageIdByFilepathOrFirstLine(value);\n\t\tthis._langIdKey.set(langId);\n\t}\n\n\tset(value: URI | null | undefined) {\n\t\tvalue = value ?? undefined;\n\t\tif (isEqual(this._value, value)) {\n\t\t\treturn;\n\t\t}\n\t\tthis._value = value;\n\t\tthis._contextKeyService.bufferChangeEvents(() => {\n\t\t\tthis._resourceKey.set(value ? value.toString() : null);\n\t\t\tthis._schemeKey.set(value ? value.scheme : null);\n\t\t\tthis._filenameKey.set(value ? basename(value) : null);\n\t\t\tthis._dirnameKey.set(value ? this.uriToPath(dirname(value)) : null);\n\t\t\tthis._pathKey.set(value ? this.uriToPath(value) : null);\n\t\t\tthis._setLangId();\n\t\t\tthis._extensionKey.set(value ? extname(value) : null);\n\t\t\tthis._hasResource.set(Boolean(value));\n\t\t\tthis._isFileSystemResource.set(value ? this._fileService.hasProvider(value) : false);\n\t\t});\n\t}\n\n\tprivate uriToPath(uri: URI): string {\n\t\tif (uri.scheme === Schemas.file) {\n\t\t\treturn uri.fsPath;\n\t\t}\n\n\t\treturn uri.path;\n\t}\n\n\treset(): void {\n\t\tthis._value = undefined;\n\t\tthis._contextKeyService.bufferChangeEvents(() => {\n\t\t\tthis._resourceKey.reset();\n\t\t\tthis._schemeKey.reset();\n\t\t\tthis._filenameKey.reset();\n\t\t\tthis._dirnameKey.reset();\n\t\t\tthis._pathKey.reset();\n\t\t\tthis._langIdKey.reset();\n\t\t\tthis._extensionKey.reset();\n\t\t\tthis._hasResource.reset();\n\t\t\tthis._isFileSystemResource.reset();\n\t\t});\n\t}\n\n\tget(): URI | undefined {\n\t\treturn this._value;\n\t}\n}\n\n//#endregion\n\nexport function applyAvailableEditorIds(contextKey: IContextKey<string>, editor: EditorInput | undefined | null, editorResolverService: IEditorResolverService): void {\n\tif (!editor) {\n\t\tcontextKey.set('');\n\t\treturn;\n\t}\n\n\tconst editorResource = editor.resource;\n\tconst editors = editorResource ? editorResolverService.getEditors(editorResource).map(editor => editor.id) : [];\n\n\tif (editorResource?.scheme === Schemas.untitled && editor.editorId !== DEFAULT_EDITOR_ASSOCIATION.id) {\n\t\t// Non text editor untitled files cannot be easily serialized between extensions\n\t\t// so instead we disable this context key to prevent common commands that act on the active editor\n\t\tcontextKey.set('');\n\t} else {\n\t\tcontextKey.set(editors.join(','));\n\t}\n}\n"]}