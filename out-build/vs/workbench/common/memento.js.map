{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/common/memento.ts"],"names":[],"mappings":"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","file":"memento.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { isEmptyObject } from 'vs/base/common/types';\nimport { onUnexpectedError } from 'vs/base/common/errors';\n\nexport type MementoObject = { [key: string]: any };\n\nexport class Memento {\n\n\tprivate static readonly applicationMementos = new Map<string, ScopedMemento>();\n\tprivate static readonly profileMementos = new Map<string, ScopedMemento>();\n\tprivate static readonly workspaceMementos = new Map<string, ScopedMemento>();\n\n\tprivate static readonly COMMON_PREFIX = 'memento/';\n\n\tprivate readonly id: string;\n\n\tconstructor(id: string, private storageService: IStorageService) {\n\t\tthis.id = Memento.COMMON_PREFIX + id;\n\t}\n\n\tgetMemento(scope: StorageScope, target: StorageTarget): MementoObject {\n\t\tswitch (scope) {\n\n\t\t\t// Scope by Workspace\n\t\t\tcase StorageScope.WORKSPACE: {\n\t\t\t\tlet workspaceMemento = Memento.workspaceMementos.get(this.id);\n\t\t\t\tif (!workspaceMemento) {\n\t\t\t\t\tworkspaceMemento = new ScopedMemento(this.id, scope, target, this.storageService);\n\t\t\t\t\tMemento.workspaceMementos.set(this.id, workspaceMemento);\n\t\t\t\t}\n\n\t\t\t\treturn workspaceMemento.getMemento();\n\t\t\t}\n\n\t\t\t// Scope Profile\n\t\t\tcase StorageScope.PROFILE: {\n\t\t\t\tlet profileMemento = Memento.profileMementos.get(this.id);\n\t\t\t\tif (!profileMemento) {\n\t\t\t\t\tprofileMemento = new ScopedMemento(this.id, scope, target, this.storageService);\n\t\t\t\t\tMemento.profileMementos.set(this.id, profileMemento);\n\t\t\t\t}\n\n\t\t\t\treturn profileMemento.getMemento();\n\t\t\t}\n\n\t\t\t// Scope Application\n\t\t\tcase StorageScope.APPLICATION: {\n\t\t\t\tlet applicationMemento = Memento.applicationMementos.get(this.id);\n\t\t\t\tif (!applicationMemento) {\n\t\t\t\t\tapplicationMemento = new ScopedMemento(this.id, scope, target, this.storageService);\n\t\t\t\t\tMemento.applicationMementos.set(this.id, applicationMemento);\n\t\t\t\t}\n\n\t\t\t\treturn applicationMemento.getMemento();\n\t\t\t}\n\t\t}\n\t}\n\n\tsaveMemento(): void {\n\t\tMemento.workspaceMementos.get(this.id)?.save();\n\t\tMemento.profileMementos.get(this.id)?.save();\n\t\tMemento.applicationMementos.get(this.id)?.save();\n\t}\n\n\tstatic clear(scope: StorageScope): void {\n\t\tswitch (scope) {\n\t\t\tcase StorageScope.WORKSPACE:\n\t\t\t\tMemento.workspaceMementos.clear();\n\t\t\t\tbreak;\n\t\t\tcase StorageScope.PROFILE:\n\t\t\t\tMemento.profileMementos.clear();\n\t\t\t\tbreak;\n\t\t\tcase StorageScope.APPLICATION:\n\t\t\t\tMemento.applicationMementos.clear();\n\t\t\t\tbreak;\n\t\t}\n\t}\n}\n\nclass ScopedMemento {\n\n\tprivate readonly mementoObj: MementoObject;\n\n\tconstructor(private id: string, private scope: StorageScope, private target: StorageTarget, private storageService: IStorageService) {\n\t\tthis.mementoObj = this.load();\n\t}\n\n\tgetMemento(): MementoObject {\n\t\treturn this.mementoObj;\n\t}\n\n\tprivate load(): MementoObject {\n\t\tconst memento = this.storageService.get(this.id, this.scope);\n\t\tif (memento) {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(memento);\n\t\t\t} catch (error) {\n\t\t\t\t// Seeing reports from users unable to open editors\n\t\t\t\t// from memento parsing exceptions. Log the contents\n\t\t\t\t// to diagnose further\n\t\t\t\t// https://github.com/microsoft/vscode/issues/102251\n\t\t\t\tonUnexpectedError(`[memento]: failed to parse contents: ${error} (id: ${this.id}, scope: ${this.scope}, contents: ${memento})`);\n\t\t\t}\n\t\t}\n\n\t\treturn {};\n\t}\n\n\tsave(): void {\n\t\tif (!isEmptyObject(this.mementoObj)) {\n\t\t\tthis.storageService.store(this.id, JSON.stringify(this.mementoObj), this.scope, this.target);\n\t\t} else {\n\t\t\tthis.storageService.remove(this.id, this.scope);\n\t\t}\n\t}\n}\n"]}