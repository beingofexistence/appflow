{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/common/component.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,MAAa,GAAU,SAAQ,kBAAG;QAIjC,YACkB,CAAU,EAC3B,YAAiB,EACjB,cAAmB;YAEnB,KAAK,CAAC,YAAY,CAAC,CAAC;YAJH,MAAC,GAAD,CAAC,CAAS;YAM3B,IAAI,CAAC,CAAC,GAAI,CAAC,CAAE;YACb,IAAI,CAAC,CAAC,GAAS,IAAI,aAAG,CAAK,IAAI,CAAC,CAAC,EAAG,cAAc,CAAC,CAAC;YAEpD,IAAI,CAAC,CAAC,CAAS,cAAc,CAAC,eAAe,CAAC,GAAG,EAAE;gBAElD,sDAAsD;gBACtD,IAAI,CAAC,CAAC,EAAU,CAAC;gBAEjB,qCAAqC;gBACrC,IAAI,CAAC,CAAC,CAAO,WAAW,EAAE,CAAC;YAC5B,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAED,KAAK;YACJ,OAAO,IAAI,CAAC,CAAC,CAAE;QAChB,CAAC;QAES,CAAC,CAAU,KAAmB,EAAE,MAAqB;YAC9D,OAAO,IAAI,CAAC,CAAC,CAAO,UAAU,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QAC/C,CAAC;QAES,CAAC;YACV,4CAA4C;QAC7C,CAAC;KACD;IAnCD,kBAmCC","file":"component.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Memento, MementoObject } from 'vs/workbench/common/memento';\nimport { IThemeService, Themable } from 'vs/platform/theme/common/themeService';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\n\nexport class Component extends Themable {\n\n\tprivate readonly memento: Memento;\n\n\tconstructor(\n\t\tprivate readonly id: string,\n\t\tthemeService: IThemeService,\n\t\tstorageService: IStorageService\n\t) {\n\t\tsuper(themeService);\n\n\t\tthis.id = id;\n\t\tthis.memento = new Memento(this.id, storageService);\n\n\t\tthis._register(storageService.onWillSaveState(() => {\n\n\t\t\t// Ask the component to persist state into the memento\n\t\t\tthis.saveState();\n\n\t\t\t// Then save the memento into storage\n\t\t\tthis.memento.saveMemento();\n\t\t}));\n\t}\n\n\tgetId(): string {\n\t\treturn this.id;\n\t}\n\n\tprotected getMemento(scope: StorageScope, target: StorageTarget): MementoObject {\n\t\treturn this.memento.getMemento(scope, target);\n\t}\n\n\tprotected saveState(): void {\n\t\t// Subclasses to implement for storing state\n\t}\n}\n"]}