{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/common/notifications.ts"],"names":[],"mappings":"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","file":"notifications.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { INotification, INotificationHandle, INotificationActions, INotificationProgress, NoOpNotification, Severity, NotificationMessage, IPromptChoice, IStatusMessageOptions, NotificationsFilter, INotificationProgressProperties, IPromptChoiceWithMenu, NotificationPriority } from 'vs/platform/notification/common/notification';\nimport { toErrorMessage, isErrorWithActions } from 'vs/base/common/errorMessage';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { isCancellationError } from 'vs/base/common/errors';\nimport { Action } from 'vs/base/common/actions';\nimport { equals } from 'vs/base/common/arrays';\nimport { parseLinkedText, LinkedText } from 'vs/base/common/linkedText';\n\nexport interface INotificationsModel {\n\n\t//#region Notifications as Toasts/Center\n\n\treadonly notifications: INotificationViewItem[];\n\n\treadonly onDidChangeNotification: Event<INotificationChangeEvent>;\n\treadonly onDidChangeFilter: Event<NotificationsFilter>;\n\n\taddNotification(notification: INotification): INotificationHandle;\n\n\tsetFilter(filter: NotificationsFilter): void;\n\n\t//#endregion\n\n\n\t//#region  Notifications as Status\n\n\treadonly statusMessage: IStatusMessageViewItem | undefined;\n\n\treadonly onDidChangeStatusMessage: Event<IStatusMessageChangeEvent>;\n\n\tshowStatusMessage(message: NotificationMessage, options?: IStatusMessageOptions): IDisposable;\n\n\t//#endregion\n}\n\nexport const enum NotificationChangeType {\n\n\t/**\n\t * A notification was added.\n\t */\n\tADD,\n\n\t/**\n\t * A notification changed. Check `detail` property\n\t * on the event for additional information.\n\t */\n\tCHANGE,\n\n\t/**\n\t * A notification expanded or collapsed.\n\t */\n\tEXPAND_COLLAPSE,\n\n\t/**\n\t * A notification was removed.\n\t */\n\tREMOVE\n}\n\nexport interface INotificationChangeEvent {\n\n\t/**\n\t * The index this notification has in the list of notifications.\n\t */\n\tindex: number;\n\n\t/**\n\t * The notification this change is about.\n\t */\n\titem: INotificationViewItem;\n\n\t/**\n\t * The kind of notification change.\n\t */\n\tkind: NotificationChangeType;\n\n\t/**\n\t * Additional detail about the item change. Only applies to\n\t * `NotificationChangeType.CHANGE`.\n\t */\n\tdetail?: NotificationViewItemContentChangeKind;\n}\n\nexport const enum StatusMessageChangeType {\n\tADD,\n\tREMOVE\n}\n\nexport interface IStatusMessageViewItem {\n\tmessage: string;\n\toptions?: IStatusMessageOptions;\n}\n\nexport interface IStatusMessageChangeEvent {\n\n\t/**\n\t * The status message item this change is about.\n\t */\n\titem: IStatusMessageViewItem;\n\n\t/**\n\t * The kind of status message change.\n\t */\n\tkind: StatusMessageChangeType;\n}\n\nexport class NotificationHandle extends Disposable implements INotificationHandle {\n\n\tprivate readonly _onDidClose = this._register(new Emitter<void>());\n\treadonly onDidClose = this._onDidClose.event;\n\n\tprivate readonly _onDidChangeVisibility = this._register(new Emitter<boolean>());\n\treadonly onDidChangeVisibility = this._onDidChangeVisibility.event;\n\n\tconstructor(private readonly item: INotificationViewItem, private readonly onClose: (item: INotificationViewItem) => void) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Visibility\n\t\tthis._register(this.item.onDidChangeVisibility(visible => this._onDidChangeVisibility.fire(visible)));\n\n\t\t// Closing\n\t\tEvent.once(this.item.onDidClose)(() => {\n\t\t\tthis._onDidClose.fire();\n\n\t\t\tthis.dispose();\n\t\t});\n\t}\n\n\tget progress(): INotificationProgress {\n\t\treturn this.item.progress;\n\t}\n\n\tupdateSeverity(severity: Severity): void {\n\t\tthis.item.updateSeverity(severity);\n\t}\n\n\tupdateMessage(message: NotificationMessage): void {\n\t\tthis.item.updateMessage(message);\n\t}\n\n\tupdateActions(actions?: INotificationActions): void {\n\t\tthis.item.updateActions(actions);\n\t}\n\n\tclose(): void {\n\t\tthis.onClose(this.item);\n\n\t\tthis.dispose();\n\t}\n}\n\nexport class NotificationsModel extends Disposable implements INotificationsModel {\n\n\tprivate static readonly NO_OP_NOTIFICATION = new NoOpNotification();\n\n\tprivate readonly _onDidChangeNotification = this._register(new Emitter<INotificationChangeEvent>());\n\treadonly onDidChangeNotification = this._onDidChangeNotification.event;\n\n\tprivate readonly _onDidChangeStatusMessage = this._register(new Emitter<IStatusMessageChangeEvent>());\n\treadonly onDidChangeStatusMessage = this._onDidChangeStatusMessage.event;\n\n\tprivate readonly _onDidChangeFilter = this._register(new Emitter<NotificationsFilter>());\n\treadonly onDidChangeFilter = this._onDidChangeFilter.event;\n\n\tprivate readonly _notifications: INotificationViewItem[] = [];\n\tget notifications(): INotificationViewItem[] { return this._notifications; }\n\n\tprivate _statusMessage: IStatusMessageViewItem | undefined;\n\tget statusMessage(): IStatusMessageViewItem | undefined { return this._statusMessage; }\n\n\tprivate filter = NotificationsFilter.OFF;\n\n\tsetFilter(filter: NotificationsFilter): void {\n\t\tthis.filter = filter;\n\n\t\tthis._onDidChangeFilter.fire(filter);\n\t}\n\n\taddNotification(notification: INotification): INotificationHandle {\n\t\tconst item = this.createViewItem(notification);\n\t\tif (!item) {\n\t\t\treturn NotificationsModel.NO_OP_NOTIFICATION; // return early if this is a no-op\n\t\t}\n\n\t\t// Deduplicate\n\t\tconst duplicate = this.findNotification(item);\n\t\tduplicate?.close();\n\n\t\t// Add to list as first entry\n\t\tthis._notifications.splice(0, 0, item);\n\n\t\t// Events\n\t\tthis._onDidChangeNotification.fire({ item, index: 0, kind: NotificationChangeType.ADD });\n\n\t\t// Wrap into handle\n\t\treturn new NotificationHandle(item, item => this.onClose(item));\n\t}\n\n\tprivate onClose(item: INotificationViewItem): void {\n\t\tconst liveItem = this.findNotification(item);\n\t\tif (liveItem && liveItem !== item) {\n\t\t\tliveItem.close(); // item could have been replaced with another one, make sure to close the live item\n\t\t} else {\n\t\t\titem.close(); // otherwise just close the item that was passed in\n\t\t}\n\t}\n\n\tprivate findNotification(item: INotificationViewItem): INotificationViewItem | undefined {\n\t\treturn this._notifications.find(notification => notification.equals(item));\n\t}\n\n\tprivate createViewItem(notification: INotification): INotificationViewItem | undefined {\n\t\tconst item = NotificationViewItem.create(notification, this.filter);\n\t\tif (!item) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Item Events\n\t\tconst fireNotificationChangeEvent = (kind: NotificationChangeType, detail?: NotificationViewItemContentChangeKind) => {\n\t\t\tconst index = this._notifications.indexOf(item);\n\t\t\tif (index >= 0) {\n\t\t\t\tthis._onDidChangeNotification.fire({ item, index, kind, detail });\n\t\t\t}\n\t\t};\n\n\t\tconst itemExpansionChangeListener = item.onDidChangeExpansion(() => fireNotificationChangeEvent(NotificationChangeType.EXPAND_COLLAPSE));\n\t\tconst itemContentChangeListener = item.onDidChangeContent(e => fireNotificationChangeEvent(NotificationChangeType.CHANGE, e.kind));\n\n\t\tEvent.once(item.onDidClose)(() => {\n\t\t\titemExpansionChangeListener.dispose();\n\t\t\titemContentChangeListener.dispose();\n\n\t\t\tconst index = this._notifications.indexOf(item);\n\t\t\tif (index >= 0) {\n\t\t\t\tthis._notifications.splice(index, 1);\n\t\t\t\tthis._onDidChangeNotification.fire({ item, index, kind: NotificationChangeType.REMOVE });\n\t\t\t}\n\t\t});\n\n\t\treturn item;\n\t}\n\n\tshowStatusMessage(message: NotificationMessage, options?: IStatusMessageOptions): IDisposable {\n\t\tconst item = StatusMessageViewItem.create(message, options);\n\t\tif (!item) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\t// Remember as current status message and fire events\n\t\tthis._statusMessage = item;\n\t\tthis._onDidChangeStatusMessage.fire({ kind: StatusMessageChangeType.ADD, item });\n\n\t\treturn toDisposable(() => {\n\n\t\t\t// Only reset status message if the item is still the one we had remembered\n\t\t\tif (this._statusMessage === item) {\n\t\t\t\tthis._statusMessage = undefined;\n\t\t\t\tthis._onDidChangeStatusMessage.fire({ kind: StatusMessageChangeType.REMOVE, item });\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport interface INotificationViewItem {\n\treadonly id: string | undefined;\n\treadonly severity: Severity;\n\treadonly sticky: boolean;\n\treadonly priority: NotificationPriority;\n\treadonly message: INotificationMessage;\n\treadonly source: string | undefined;\n\treadonly sourceId: string | undefined;\n\treadonly actions: INotificationActions | undefined;\n\treadonly progress: INotificationViewItemProgress;\n\n\treadonly expanded: boolean;\n\treadonly visible: boolean;\n\treadonly canCollapse: boolean;\n\treadonly hasProgress: boolean;\n\n\treadonly onDidChangeExpansion: Event<void>;\n\treadonly onDidChangeVisibility: Event<boolean>;\n\treadonly onDidChangeContent: Event<INotificationViewItemContentChangeEvent>;\n\treadonly onDidClose: Event<void>;\n\n\texpand(): void;\n\tcollapse(skipEvents?: boolean): void;\n\ttoggle(): void;\n\n\tupdateSeverity(severity: Severity): void;\n\tupdateMessage(message: NotificationMessage): void;\n\tupdateActions(actions?: INotificationActions): void;\n\n\tupdateVisibility(visible: boolean): void;\n\n\tclose(): void;\n\n\tequals(item: INotificationViewItem): boolean;\n}\n\nexport function isNotificationViewItem(obj: unknown): obj is INotificationViewItem {\n\treturn obj instanceof NotificationViewItem;\n}\n\nexport const enum NotificationViewItemContentChangeKind {\n\tSEVERITY,\n\tMESSAGE,\n\tACTIONS,\n\tPROGRESS\n}\n\nexport interface INotificationViewItemContentChangeEvent {\n\tkind: NotificationViewItemContentChangeKind;\n}\n\nexport interface INotificationViewItemProgressState {\n\tinfinite?: boolean;\n\ttotal?: number;\n\tworked?: number;\n\tdone?: boolean;\n}\n\nexport interface INotificationViewItemProgress extends INotificationProgress {\n\treadonly state: INotificationViewItemProgressState;\n\n\tdispose(): void;\n}\n\nexport class NotificationViewItemProgress extends Disposable implements INotificationViewItemProgress {\n\tprivate readonly _state: INotificationViewItemProgressState;\n\n\tprivate readonly _onDidChange = this._register(new Emitter<void>());\n\treadonly onDidChange = this._onDidChange.event;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis._state = Object.create(null);\n\t}\n\n\tget state(): INotificationViewItemProgressState {\n\t\treturn this._state;\n\t}\n\n\tinfinite(): void {\n\t\tif (this._state.infinite) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._state.infinite = true;\n\n\t\tthis._state.total = undefined;\n\t\tthis._state.worked = undefined;\n\t\tthis._state.done = undefined;\n\n\t\tthis._onDidChange.fire();\n\t}\n\n\tdone(): void {\n\t\tif (this._state.done) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._state.done = true;\n\n\t\tthis._state.infinite = undefined;\n\t\tthis._state.total = undefined;\n\t\tthis._state.worked = undefined;\n\n\t\tthis._onDidChange.fire();\n\t}\n\n\ttotal(value: number): void {\n\t\tif (this._state.total === value) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._state.total = value;\n\n\t\tthis._state.infinite = undefined;\n\t\tthis._state.done = undefined;\n\n\t\tthis._onDidChange.fire();\n\t}\n\n\tworked(value: number): void {\n\t\tif (typeof this._state.worked === 'number') {\n\t\t\tthis._state.worked += value;\n\t\t} else {\n\t\t\tthis._state.worked = value;\n\t\t}\n\n\t\tthis._state.infinite = undefined;\n\t\tthis._state.done = undefined;\n\n\t\tthis._onDidChange.fire();\n\t}\n}\n\nexport interface IMessageLink {\n\thref: string;\n\tname: string;\n\ttitle: string;\n\toffset: number;\n\tlength: number;\n}\n\nexport interface INotificationMessage {\n\traw: string;\n\toriginal: NotificationMessage;\n\tlinkedText: LinkedText;\n}\n\nexport class NotificationViewItem extends Disposable implements INotificationViewItem {\n\n\tprivate static readonly MAX_MESSAGE_LENGTH = 1000;\n\n\tprivate _expanded: boolean | undefined;\n\tprivate _visible: boolean = false;\n\n\tprivate _actions: INotificationActions | undefined;\n\tprivate _progress: NotificationViewItemProgress | undefined;\n\n\tprivate readonly _onDidChangeExpansion = this._register(new Emitter<void>());\n\treadonly onDidChangeExpansion = this._onDidChangeExpansion.event;\n\n\tprivate readonly _onDidClose = this._register(new Emitter<void>());\n\treadonly onDidClose = this._onDidClose.event;\n\n\tprivate readonly _onDidChangeContent = this._register(new Emitter<INotificationViewItemContentChangeEvent>());\n\treadonly onDidChangeContent = this._onDidChangeContent.event;\n\n\tprivate readonly _onDidChangeVisibility = this._register(new Emitter<boolean>());\n\treadonly onDidChangeVisibility = this._onDidChangeVisibility.event;\n\n\tstatic create(notification: INotification, filter: NotificationsFilter = NotificationsFilter.OFF): INotificationViewItem | undefined {\n\t\tif (!notification || !notification.message || isCancellationError(notification.message)) {\n\t\t\treturn undefined; // we need a message to show\n\t\t}\n\n\t\tlet severity: Severity;\n\t\tif (typeof notification.severity === 'number') {\n\t\t\tseverity = notification.severity;\n\t\t} else {\n\t\t\tseverity = Severity.Info;\n\t\t}\n\n\t\tconst message = NotificationViewItem.parseNotificationMessage(notification.message);\n\t\tif (!message) {\n\t\t\treturn undefined; // we need a message to show\n\t\t}\n\n\t\tlet actions: INotificationActions | undefined;\n\t\tif (notification.actions) {\n\t\t\tactions = notification.actions;\n\t\t} else if (isErrorWithActions(notification.message)) {\n\t\t\tactions = { primary: notification.message.actions };\n\t\t}\n\n\t\tlet priority = notification.priority ?? NotificationPriority.DEFAULT;\n\t\tif (priority === NotificationPriority.DEFAULT && (filter === NotificationsFilter.SILENT || (filter === NotificationsFilter.ERROR && notification.severity !== Severity.Error))) {\n\t\t\tpriority = NotificationPriority.SILENT;\n\t\t}\n\n\t\treturn new NotificationViewItem(notification.id, severity, notification.sticky, priority, message, notification.source, notification.progress, actions);\n\t}\n\n\tprivate static parseNotificationMessage(input: NotificationMessage): INotificationMessage | undefined {\n\t\tlet message: string | undefined;\n\t\tif (input instanceof Error) {\n\t\t\tmessage = toErrorMessage(input, false);\n\t\t} else if (typeof input === 'string') {\n\t\t\tmessage = input;\n\t\t}\n\n\t\tif (!message) {\n\t\t\treturn undefined; // we need a message to show\n\t\t}\n\n\t\tconst raw = message;\n\n\t\t// Make sure message is in the limits\n\t\tif (message.length > NotificationViewItem.MAX_MESSAGE_LENGTH) {\n\t\t\tmessage = `${message.substr(0, NotificationViewItem.MAX_MESSAGE_LENGTH)}...`;\n\t\t}\n\n\t\t// Remove newlines from messages as we do not support that and it makes link parsing hard\n\t\tmessage = message.replace(/(\\r\\n|\\n|\\r)/gm, ' ').trim();\n\n\t\t// Parse Links\n\t\tconst linkedText = parseLinkedText(message);\n\n\t\treturn { raw, linkedText, original: input };\n\t}\n\n\tprivate constructor(\n\t\treadonly id: string | undefined,\n\t\tprivate _severity: Severity,\n\t\tprivate _sticky: boolean | undefined,\n\t\tprivate _priority: NotificationPriority,\n\t\tprivate _message: INotificationMessage,\n\t\tprivate _source: string | { label: string; id: string } | undefined,\n\t\tprogress: INotificationProgressProperties | undefined,\n\t\tactions?: INotificationActions\n\t) {\n\t\tsuper();\n\n\t\tif (progress) {\n\t\t\tthis.setProgress(progress);\n\t\t}\n\n\t\tthis.setActions(actions);\n\t}\n\n\tprivate setProgress(progress: INotificationProgressProperties): void {\n\t\tif (progress.infinite) {\n\t\t\tthis.progress.infinite();\n\t\t} else if (progress.total) {\n\t\t\tthis.progress.total(progress.total);\n\n\t\t\tif (progress.worked) {\n\t\t\t\tthis.progress.worked(progress.worked);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate setActions(actions: INotificationActions = { primary: [], secondary: [] }): void {\n\t\tthis._actions = {\n\t\t\tprimary: Array.isArray(actions.primary) ? actions.primary : [],\n\t\t\tsecondary: Array.isArray(actions.secondary) ? actions.secondary : []\n\t\t};\n\n\t\tthis._expanded = actions.primary && actions.primary.length > 0;\n\t}\n\n\tget canCollapse(): boolean {\n\t\treturn !this.hasActions;\n\t}\n\n\tget expanded(): boolean {\n\t\treturn !!this._expanded;\n\t}\n\n\tget severity(): Severity {\n\t\treturn this._severity;\n\t}\n\n\tget sticky(): boolean {\n\t\tif (this._sticky) {\n\t\t\treturn true; // explicitly sticky\n\t\t}\n\n\t\tconst hasActions = this.hasActions;\n\t\tif (\n\t\t\t(hasActions && this._severity === Severity.Error) || // notification errors with actions are sticky\n\t\t\t(!hasActions && this._expanded) ||\t\t\t\t\t // notifications that got expanded are sticky\n\t\t\t(this._progress && !this._progress.state.done)\t\t // notifications with running progress are sticky\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false; // not sticky\n\t}\n\n\tget priority(): NotificationPriority {\n\t\treturn this._priority;\n\t}\n\n\tprivate get hasActions(): boolean {\n\t\tif (!this._actions) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!this._actions.primary) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this._actions.primary.length > 0;\n\t}\n\n\tget hasProgress(): boolean {\n\t\treturn !!this._progress;\n\t}\n\n\tget progress(): INotificationViewItemProgress {\n\t\tif (!this._progress) {\n\t\t\tthis._progress = this._register(new NotificationViewItemProgress());\n\t\t\tthis._register(this._progress.onDidChange(() => this._onDidChangeContent.fire({ kind: NotificationViewItemContentChangeKind.PROGRESS })));\n\t\t}\n\n\t\treturn this._progress;\n\t}\n\n\tget message(): INotificationMessage {\n\t\treturn this._message;\n\t}\n\n\tget source(): string | undefined {\n\t\treturn typeof this._source === 'string' ? this._source : (this._source ? this._source.label : undefined);\n\t}\n\n\tget sourceId(): string | undefined {\n\t\treturn (this._source && typeof this._source !== 'string' && 'id' in this._source) ? this._source.id : undefined;\n\t}\n\n\tget actions(): INotificationActions | undefined {\n\t\treturn this._actions;\n\t}\n\n\tget visible(): boolean {\n\t\treturn this._visible;\n\t}\n\n\tupdateSeverity(severity: Severity): void {\n\t\tif (severity === this._severity) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._severity = severity;\n\t\tthis._onDidChangeContent.fire({ kind: NotificationViewItemContentChangeKind.SEVERITY });\n\t}\n\n\tupdateMessage(input: NotificationMessage): void {\n\t\tconst message = NotificationViewItem.parseNotificationMessage(input);\n\t\tif (!message || message.raw === this._message.raw) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._message = message;\n\t\tthis._onDidChangeContent.fire({ kind: NotificationViewItemContentChangeKind.MESSAGE });\n\t}\n\n\tupdateActions(actions?: INotificationActions): void {\n\t\tthis.setActions(actions);\n\t\tthis._onDidChangeContent.fire({ kind: NotificationViewItemContentChangeKind.ACTIONS });\n\t}\n\n\tupdateVisibility(visible: boolean): void {\n\t\tif (this._visible !== visible) {\n\t\t\tthis._visible = visible;\n\n\t\t\tthis._onDidChangeVisibility.fire(visible);\n\t\t}\n\t}\n\n\texpand(): void {\n\t\tif (this._expanded || !this.canCollapse) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._expanded = true;\n\t\tthis._onDidChangeExpansion.fire();\n\t}\n\n\tcollapse(skipEvents?: boolean): void {\n\t\tif (!this._expanded || !this.canCollapse) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._expanded = false;\n\n\t\tif (!skipEvents) {\n\t\t\tthis._onDidChangeExpansion.fire();\n\t\t}\n\t}\n\n\ttoggle(): void {\n\t\tif (this._expanded) {\n\t\t\tthis.collapse();\n\t\t} else {\n\t\t\tthis.expand();\n\t\t}\n\t}\n\n\tclose(): void {\n\t\tthis._onDidClose.fire();\n\n\t\tthis.dispose();\n\t}\n\n\tequals(other: INotificationViewItem): boolean {\n\t\tif (this.hasProgress || other.hasProgress) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (typeof this.id === 'string' || typeof other.id === 'string') {\n\t\t\treturn this.id === other.id;\n\t\t}\n\n\t\tif (typeof this._source === 'object') {\n\t\t\tif (this._source.label !== other.source || this._source.id !== other.sourceId) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t} else if (this._source !== other.source) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._message.raw !== other.message.raw) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst primaryActions = (this._actions && this._actions.primary) || [];\n\t\tconst otherPrimaryActions = (other.actions && other.actions.primary) || [];\n\t\treturn equals(primaryActions, otherPrimaryActions, (action, otherAction) => (action.id + action.label) === (otherAction.id + otherAction.label));\n\t}\n}\n\nexport class ChoiceAction extends Action {\n\n\tprivate readonly _onDidRun = this._register(new Emitter<void>());\n\treadonly onDidRun = this._onDidRun.event;\n\n\tprivate readonly _keepOpen: boolean;\n\tprivate readonly _menu: ChoiceAction[] | undefined;\n\n\tconstructor(id: string, choice: IPromptChoice) {\n\t\tsuper(id, choice.label, undefined, true, async () => {\n\n\t\t\t// Pass to runner\n\t\t\tchoice.run();\n\n\t\t\t// Emit Event\n\t\t\tthis._onDidRun.fire();\n\t\t});\n\n\t\tthis._keepOpen = !!choice.keepOpen;\n\t\tthis._menu = !choice.isSecondary && (<IPromptChoiceWithMenu>choice).menu ? (<IPromptChoiceWithMenu>choice).menu.map((c, index) => new ChoiceAction(`${id}.${index}`, c)) : undefined;\n\t}\n\n\tget menu(): ChoiceAction[] | undefined {\n\t\treturn this._menu;\n\t}\n\n\tget keepOpen(): boolean {\n\t\treturn this._keepOpen;\n\t}\n}\n\nclass StatusMessageViewItem {\n\n\tstatic create(notification: NotificationMessage, options?: IStatusMessageOptions): IStatusMessageViewItem | undefined {\n\t\tif (!notification || isCancellationError(notification)) {\n\t\t\treturn undefined; // we need a message to show\n\t\t}\n\n\t\tlet message: string | undefined;\n\t\tif (notification instanceof Error) {\n\t\t\tmessage = toErrorMessage(notification, false);\n\t\t} else if (typeof notification === 'string') {\n\t\t\tmessage = notification;\n\t\t}\n\n\t\tif (!message) {\n\t\t\treturn undefined; // we need a message to show\n\t\t}\n\n\t\treturn { message, options };\n\t}\n}\n"]}