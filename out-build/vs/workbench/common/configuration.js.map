{"version":3,"sources":["vs/workbench/common/configuration.ts"],"names":[],"mappings":"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","file":"configuration.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { ConfigurationScope, IConfigurationNode, IConfigurationRegistry, Extensions as ConfigurationExtensions } from 'vs/platform/configuration/common/configurationRegistry';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IWorkspaceContextService, IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { ConfigurationTarget, IConfigurationOverrides, IConfigurationService, IConfigurationValue } from 'vs/platform/configuration/common/configuration';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Emitter } from 'vs/base/common/event';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { OperatingSystem, isWindows } from 'vs/base/common/platform';\n\nexport const applicationConfigurationNodeBase = Object.freeze<IConfigurationNode>({\n\t'id': 'application',\n\t'order': 100,\n\t'title': localize('applicationConfigurationTitle', \"Application\"),\n\t'type': 'object'\n});\n\nexport const workbenchConfigurationNodeBase = Object.freeze<IConfigurationNode>({\n\t'id': 'workbench',\n\t'order': 7,\n\t'title': localize('workbenchConfigurationTitle', \"Workbench\"),\n\t'type': 'object',\n});\n\nexport const securityConfigurationNodeBase = Object.freeze<IConfigurationNode>({\n\t'id': 'security',\n\t'scope': ConfigurationScope.APPLICATION,\n\t'title': localize('securityConfigurationTitle', \"Security\"),\n\t'type': 'object',\n\t'order': 7\n});\n\nexport const Extensions = {\n\tConfigurationMigration: 'base.contributions.configuration.migration'\n};\n\nexport type ConfigurationValue = { value: any | undefined /* Remove */ };\nexport type ConfigurationKeyValuePairs = [string, ConfigurationValue][];\nexport type ConfigurationMigrationFn = (value: any, valueAccessor: (key: string) => any) => ConfigurationValue | ConfigurationKeyValuePairs | Promise<ConfigurationValue | ConfigurationKeyValuePairs>;\nexport type ConfigurationMigration = { key: string; migrateFn: ConfigurationMigrationFn };\n\nexport interface IConfigurationMigrationRegistry {\n\tregisterConfigurationMigrations(configurationMigrations: ConfigurationMigration[]): void;\n}\n\nclass ConfigurationMigrationRegistry implements IConfigurationMigrationRegistry {\n\n\treadonly migrations: ConfigurationMigration[] = [];\n\n\tprivate readonly _onDidRegisterConfigurationMigrations = new Emitter<ConfigurationMigration[]>();\n\treadonly onDidRegisterConfigurationMigration = this._onDidRegisterConfigurationMigrations.event;\n\n\tregisterConfigurationMigrations(configurationMigrations: ConfigurationMigration[]): void {\n\t\tthis.migrations.push(...configurationMigrations);\n\t}\n\n}\n\nconst configurationMigrationRegistry = new ConfigurationMigrationRegistry();\nRegistry.add(Extensions.ConfigurationMigration, configurationMigrationRegistry);\n\nexport class ConfigurationMigrationWorkbenchContribution extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IWorkspaceContextService private readonly workspaceService: IWorkspaceContextService,\n\t) {\n\t\tsuper();\n\t\tthis._register(this.workspaceService.onDidChangeWorkspaceFolders(async (e) => {\n\t\t\tfor (const folder of e.added) {\n\t\t\t\tawait this.migrateConfigurationsForFolder(folder, configurationMigrationRegistry.migrations);\n\t\t\t}\n\t\t}));\n\t\tthis.migrateConfigurations(configurationMigrationRegistry.migrations);\n\t\tthis._register(configurationMigrationRegistry.onDidRegisterConfigurationMigration(migration => this.migrateConfigurations(migration)));\n\t}\n\n\tprivate async migrateConfigurations(migrations: ConfigurationMigration[]): Promise<void> {\n\t\tawait this.migrateConfigurationsForFolder(undefined, migrations);\n\t\tfor (const folder of this.workspaceService.getWorkspace().folders) {\n\t\t\tawait this.migrateConfigurationsForFolder(folder, migrations);\n\t\t}\n\t}\n\n\tprivate async migrateConfigurationsForFolder(folder: IWorkspaceFolder | undefined, migrations: ConfigurationMigration[]): Promise<void> {\n\t\tawait Promise.all(migrations.map(migration => this.migrateConfigurationsForFolderAndOverride(migration, { resource: folder?.uri })));\n\t}\n\n\tprivate async migrateConfigurationsForFolderAndOverride(migration: ConfigurationMigration, overrides: IConfigurationOverrides): Promise<void> {\n\t\tconst data = this.configurationService.inspect(migration.key, overrides);\n\n\t\tawait this.migrateConfigurationForFolderOverrideAndTarget(migration, overrides, data, 'userValue', ConfigurationTarget.USER);\n\t\tawait this.migrateConfigurationForFolderOverrideAndTarget(migration, overrides, data, 'userLocalValue', ConfigurationTarget.USER_LOCAL);\n\t\tawait this.migrateConfigurationForFolderOverrideAndTarget(migration, overrides, data, 'userRemoteValue', ConfigurationTarget.USER_REMOTE);\n\t\tawait this.migrateConfigurationForFolderOverrideAndTarget(migration, overrides, data, 'workspaceFolderValue', ConfigurationTarget.WORKSPACE_FOLDER);\n\t\tawait this.migrateConfigurationForFolderOverrideAndTarget(migration, overrides, data, 'workspaceValue', ConfigurationTarget.WORKSPACE);\n\n\t\tif (typeof overrides.overrideIdentifier === 'undefined' && typeof data.overrideIdentifiers !== 'undefined') {\n\t\t\tfor (const overrideIdentifier of data.overrideIdentifiers) {\n\t\t\t\tawait this.migrateConfigurationsForFolderAndOverride(migration, { resource: overrides.resource, overrideIdentifier });\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async migrateConfigurationForFolderOverrideAndTarget(migration: ConfigurationMigration, overrides: IConfigurationOverrides, data: IConfigurationValue<any>, dataKey: keyof IConfigurationValue<any>, target: ConfigurationTarget): Promise<void> {\n\t\tconst value = data[dataKey];\n\t\tif (typeof value === 'undefined') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst valueAccessor = (key: string) => this.configurationService.inspect(key, overrides)[dataKey];\n\t\tconst result = await migration.migrateFn(value, valueAccessor);\n\t\tconst keyValuePairs: ConfigurationKeyValuePairs = Array.isArray(result) ? result : [[migration.key, result]];\n\t\tawait Promise.allSettled(keyValuePairs.map(async ([key, value]) => this.configurationService.updateValue(key, value.value, overrides, target)));\n\t}\n}\n\nexport class DynamicWorkbenchConfigurationWorkbenchContribution extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService\n\t) {\n\t\tsuper();\n\n\t\t(async () => {\n\t\t\tif (!isWindows) {\n\t\t\t\tconst remoteEnvironment = await remoteAgentService.getEnvironment();\n\t\t\t\tif (remoteEnvironment?.os !== OperatingSystem.Windows) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Windows: UNC allow list security configuration\n\t\t\tconst registry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\t\t\tregistry.registerConfiguration({\n\t\t\t\t...securityConfigurationNodeBase,\n\t\t\t\t'properties': {\n\t\t\t\t\t'security.allowedUNCHosts': {\n\t\t\t\t\t\t'type': 'array',\n\t\t\t\t\t\t'items': {\n\t\t\t\t\t\t\t'type': 'string',\n\t\t\t\t\t\t\t'pattern': '^[^\\\\\\\\]+$',\n\t\t\t\t\t\t\t'patternErrorMessage': localize('security.allowedUNCHosts.patternErrorMessage', 'UNC host names must not contain backslashes.')\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'default': [],\n\t\t\t\t\t\t'markdownDescription': localize('security.allowedUNCHosts', 'A set of UNC host names (without leading or trailing backslash, for example `192.168.0.1` or `my-server`) to allow without user confirmation. If a UNC host is being accessed that is not allowed via this setting or has not been acknowledged via user confirmation, an error will occur and the operation stopped. A restart is required when changing this setting. Find out more about this setting at https://aka.ms/vscode-windows-unc.'),\n\t\t\t\t\t\t'scope': ConfigurationScope.MACHINE\n\t\t\t\t\t},\n\t\t\t\t\t'security.restrictUNCAccess': {\n\t\t\t\t\t\t'type': 'boolean',\n\t\t\t\t\t\t'default': true,\n\t\t\t\t\t\t'markdownDescription': localize('security.restrictUNCAccess', 'If enabled, only allows access to UNC host names that are allowed by the `#security.allowedUNCHosts#` setting or after user confirmation. Find out more about this setting at https://aka.ms/vscode-windows-unc.'),\n\t\t\t\t\t\t'scope': ConfigurationScope.MACHINE\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t})();\n\t}\n}\n"]}