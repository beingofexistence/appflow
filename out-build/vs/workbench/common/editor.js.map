{"version":3,"sources":["vs/workbench/common/editor.ts"],"names":[],"mappings":"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","file":"editor.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { Event } from 'vs/base/common/event';\nimport { assertIsDefined } from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { ICodeEditorViewState, IDiffEditor, IDiffEditorViewState, IEditor, IEditorViewState } from 'vs/editor/common/editorCommon';\nimport { IEditorOptions, IResourceEditorInput, ITextResourceEditorInput, IBaseTextResourceEditorInput, IBaseUntypedEditorInput, ITextEditorOptions } from 'vs/platform/editor/common/editor';\nimport type { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { IInstantiationService, IConstructorSignature, ServicesAccessor, BrandedService } from 'vs/platform/instantiation/common/instantiation';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IEncodingSupport, ILanguageSupport } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IEditorGroup } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { ICompositeControl, IComposite } from 'vs/workbench/common/composite';\nimport { FileType, IFileReadLimits, IFileService } from 'vs/platform/files/common/files';\nimport { IPathData } from 'vs/platform/window/common/window';\nimport { IExtUri } from 'vs/base/common/resources';\nimport { Schemas } from 'vs/base/common/network';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IErrorWithActions, createErrorWithActions, isErrorWithActions } from 'vs/base/common/errorMessage';\nimport { IAction, toAction } from 'vs/base/common/actions';\nimport Severity from 'vs/base/common/severity';\nimport { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';\n\n// Static values for editor contributions\nexport const EditorExtensions = {\n\tEditorPane: 'workbench.contributions.editors',\n\tEditorFactory: 'workbench.contributions.editor.inputFactories'\n};\n\n// Static information regarding the text editor\nexport const DEFAULT_EDITOR_ASSOCIATION = {\n\tid: 'default',\n\tdisplayName: localize('promptOpenWith.defaultEditor.displayName', \"Text Editor\"),\n\tproviderDisplayName: localize('builtinProviderDisplayName', \"Built-in\")\n};\n\n/**\n * Side by side editor id.\n */\nexport const SIDE_BY_SIDE_EDITOR_ID = 'workbench.editor.sidebysideEditor';\n\n/**\n * Text diff editor id.\n */\nexport const TEXT_DIFF_EDITOR_ID = 'workbench.editors.textDiffEditor';\n\n/**\n * Binary diff editor id.\n */\nexport const BINARY_DIFF_EDITOR_ID = 'workbench.editors.binaryResourceDiffEditor';\n\nexport interface IEditorDescriptor<T extends IEditorPane> {\n\n\t/**\n\t * The unique type identifier of the editor. All instances\n\t * of the same `IEditorPane` should have the same type\n\t * identifier.\n\t */\n\treadonly typeId: string;\n\n\t/**\n\t * The display name of the editor.\n\t */\n\treadonly name: string;\n\n\t/**\n\t * Instantiates the editor pane using the provided services.\n\t */\n\tinstantiate(instantiationService: IInstantiationService): T;\n\n\t/**\n\t * Whether the descriptor is for the provided editor pane.\n\t */\n\tdescribes(editorPane: T): boolean;\n}\n\n/**\n * The editor pane is the container for workbench editors.\n */\nexport interface IEditorPane extends IComposite {\n\n\t/**\n\t * An event to notify when the `IEditorControl` in this\n\t * editor pane changes.\n\t *\n\t * This can be used for editor panes that are a compound\n\t * of multiple editor controls to signal that the active\n\t * editor control has changed when the user clicks around.\n\t */\n\treadonly onDidChangeControl: Event<void>;\n\n\t/**\n\t * An optional event to notify when the selection inside the editor\n\t * pane changed in case the editor has a selection concept.\n\t *\n\t * For example, in a text editor pane, the selection changes whenever\n\t * the cursor is set to a new location.\n\t */\n\treadonly onDidChangeSelection?: Event<IEditorPaneSelectionChangeEvent>;\n\n\t/**\n\t * The assigned input of this editor.\n\t */\n\treadonly input: EditorInput | undefined;\n\n\t/**\n\t * The assigned options of the editor.\n\t */\n\treadonly options: IEditorOptions | undefined;\n\n\t/**\n\t * The assigned group this editor is showing in.\n\t */\n\treadonly group: IEditorGroup | undefined;\n\n\t/**\n\t * The minimum width of this editor.\n\t */\n\treadonly minimumWidth: number;\n\n\t/**\n\t * The maximum width of this editor.\n\t */\n\treadonly maximumWidth: number;\n\n\t/**\n\t * The minimum height of this editor.\n\t */\n\treadonly minimumHeight: number;\n\n\t/**\n\t * The maximum height of this editor.\n\t */\n\treadonly maximumHeight: number;\n\n\t/**\n\t * An event to notify whenever minimum/maximum width/height changes.\n\t */\n\treadonly onDidChangeSizeConstraints: Event<{ width: number; height: number } | undefined>;\n\n\t/**\n\t * The context key service for this editor. Should be overridden by\n\t * editors that have their own ScopedContextKeyService\n\t */\n\treadonly scopedContextKeyService: IContextKeyService | undefined;\n\n\t/**\n\t * Returns the underlying control of this editor. Callers need to cast\n\t * the control to a specific instance as needed, e.g. by using the\n\t * `isCodeEditor` helper method to access the text code editor.\n\t *\n\t * Use the `onDidChangeControl` event to track whenever the control\n\t * changes.\n\t */\n\tgetControl(): IEditorControl | undefined;\n\n\t/**\n\t * Returns the current view state of the editor if any.\n\t *\n\t * This method is optional to override for the editor pane\n\t * and should only be overridden when the pane can deal with\n\t * `IEditorOptions.viewState` to be applied when opening.\n\t */\n\tgetViewState(): object | undefined;\n\n\t/**\n\t * An optional method to return the current selection in\n\t * the editor pane in case the editor pane has a selection\n\t * concept.\n\t *\n\t * Clients of this method will typically react to the\n\t * `onDidChangeSelection` event to receive the current\n\t * selection as needed.\n\t */\n\tgetSelection?(): IEditorPaneSelection | undefined;\n\n\t/**\n\t * Finds out if this editor is visible or not.\n\t */\n\tisVisible(): boolean;\n}\n\nexport interface IEditorPaneSelectionChangeEvent {\n\n\t/**\n\t * More details for how the selection was made.\n\t */\n\treason: EditorPaneSelectionChangeReason;\n}\n\nexport const enum EditorPaneSelectionChangeReason {\n\n\t/**\n\t * The selection was changed as a result of a programmatic\n\t * method invocation.\n\t *\n\t * For a text editor pane, this for example can be a selection\n\t * being restored from previous view state automatically.\n\t */\n\tPROGRAMMATIC = 1,\n\n\t/**\n\t * The selection was changed by the user.\n\t *\n\t * This typically means the user changed the selection\n\t * with mouse or keyboard.\n\t */\n\tUSER,\n\n\t/**\n\t * The selection was changed as a result of editing in\n\t * the editor pane.\n\t *\n\t * For a text editor pane, this for example can be typing\n\t * in the text of the editor pane.\n\t */\n\tEDIT,\n\n\t/**\n\t * The selection was changed as a result of a navigation\n\t * action.\n\t *\n\t * For a text editor pane, this for example can be a result\n\t * of selecting an entry from a text outline view.\n\t */\n\tNAVIGATION,\n\n\t/**\n\t * The selection was changed as a result of a jump action\n\t * from within the editor pane.\n\t *\n\t * For a text editor pane, this for example can be a result\n\t * of invoking \"Go to definition\" from a symbol.\n\t */\n\tJUMP\n}\n\nexport interface IEditorPaneSelection {\n\n\t/**\n\t * Asks to compare this selection to another selection.\n\t */\n\tcompare(otherSelection: IEditorPaneSelection): EditorPaneSelectionCompareResult;\n\n\t/**\n\t * Asks to massage the provided `options` in a way\n\t * that the selection can be restored when the editor\n\t * is opened again.\n\t *\n\t * For a text editor this means to apply the selected\n\t * line and column as text editor options.\n\t */\n\trestore(options: IEditorOptions): IEditorOptions;\n\n\t/**\n\t * Only used for logging to print more info about the selection.\n\t */\n\tlog?(): string;\n}\n\nexport const enum EditorPaneSelectionCompareResult {\n\n\t/**\n\t * The selections are identical.\n\t */\n\tIDENTICAL = 1,\n\n\t/**\n\t * The selections are similar.\n\t *\n\t * For a text editor this can mean that the one\n\t * selection is in close proximity to the other\n\t * selection.\n\t *\n\t * Upstream clients may decide in this case to\n\t * not treat the selection different from the\n\t * previous one because it is not distinct enough.\n\t */\n\tSIMILAR = 2,\n\n\t/**\n\t * The selections are entirely different.\n\t */\n\tDIFFERENT = 3\n}\n\nexport interface IEditorPaneWithSelection extends IEditorPane {\n\n\treadonly onDidChangeSelection: Event<IEditorPaneSelectionChangeEvent>;\n\n\tgetSelection(): IEditorPaneSelection | undefined;\n}\n\nexport function isEditorPaneWithSelection(editorPane: IEditorPane | undefined): editorPane is IEditorPaneWithSelection {\n\tconst candidate = editorPane as IEditorPaneWithSelection | undefined;\n\n\treturn !!candidate && typeof candidate.getSelection === 'function' && !!candidate.onDidChangeSelection;\n}\n\n/**\n * Try to retrieve the view state for the editor pane that\n * has the provided editor input opened, if at all.\n *\n * This method will return `undefined` if the editor input\n * is not visible in any of the opened editor panes.\n */\nexport function findViewStateForEditor(input: EditorInput, group: GroupIdentifier, editorService: IEditorService): object | undefined {\n\tfor (const editorPane of editorService.visibleEditorPanes) {\n\t\tif (editorPane.group.id === group && input.matches(editorPane.input)) {\n\t\t\treturn editorPane.getViewState();\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\n/**\n * Overrides `IEditorPane` where `input` and `group` are known to be set.\n */\nexport interface IVisibleEditorPane extends IEditorPane {\n\treadonly input: EditorInput;\n\treadonly group: IEditorGroup;\n}\n\n/**\n * The text editor pane is the container for workbench text editors.\n */\nexport interface ITextEditorPane extends IEditorPane {\n\n\t/**\n\t * Returns the underlying text editor widget of this editor.\n\t */\n\tgetControl(): IEditor | undefined;\n}\n\n/**\n * The text editor pane is the container for workbench text diff editors.\n */\nexport interface ITextDiffEditorPane extends IEditorPane {\n\n\t/**\n\t * Returns the underlying text diff editor widget of this editor.\n\t */\n\tgetControl(): IDiffEditor | undefined;\n}\n\n/**\n * Marker interface for the control inside an editor pane. Callers\n * have to cast the control to work with it, e.g. via methods\n * such as `isCodeEditor(control)`.\n */\nexport interface IEditorControl extends ICompositeControl { }\n\nexport interface IFileEditorFactory {\n\n\t/**\n\t * The type identifier of the file editor.\n\t */\n\ttypeId: string;\n\n\t/**\n\t * Creates new new editor capable of showing files.\n\t */\n\tcreateFileEditor(resource: URI, preferredResource: URI | undefined, preferredName: string | undefined, preferredDescription: string | undefined, preferredEncoding: string | undefined, preferredLanguageId: string | undefined, preferredContents: string | undefined, instantiationService: IInstantiationService): IFileEditorInput;\n\n\t/**\n\t * Check if the provided object is a file editor.\n\t */\n\tisFileEditor(obj: unknown): obj is IFileEditorInput;\n}\n\nexport interface IEditorFactoryRegistry {\n\n\t/**\n\t * Registers the file editor factory to use for file editors.\n\t */\n\tregisterFileEditorFactory(factory: IFileEditorFactory): void;\n\n\t/**\n\t * Returns the file editor factory to use for file editors.\n\t */\n\tgetFileEditorFactory(): IFileEditorFactory;\n\n\t/**\n\t * Registers a editor serializer for the given editor to the registry.\n\t * An editor serializer is capable of serializing and deserializing editor\n\t * from string data.\n\t *\n\t * @param editorTypeId the type identifier of the editor\n\t * @param serializer the editor serializer for serialization/deserialization\n\t */\n\tregisterEditorSerializer<Services extends BrandedService[]>(editorTypeId: string, ctor: { new(...Services: Services): IEditorSerializer }): IDisposable;\n\n\t/**\n\t * Returns the editor serializer for the given editor.\n\t */\n\tgetEditorSerializer(editor: EditorInput): IEditorSerializer | undefined;\n\tgetEditorSerializer(editorTypeId: string): IEditorSerializer | undefined;\n\n\t/**\n\t * Starts the registry by providing the required services.\n\t */\n\tstart(accessor: ServicesAccessor): void;\n}\n\nexport interface IEditorSerializer {\n\n\t/**\n\t * Determines whether the given editor can be serialized by the serializer.\n\t */\n\tcanSerialize(editor: EditorInput): boolean;\n\n\t/**\n\t * Returns a string representation of the provided editor that contains enough information\n\t * to deserialize back to the original editor from the deserialize() method.\n\t */\n\tserialize(editor: EditorInput): string | undefined;\n\n\t/**\n\t * Returns an editor from the provided serialized form of the editor. This form matches\n\t * the value returned from the serialize() method.\n\t */\n\tdeserialize(instantiationService: IInstantiationService, serializedEditor: string): EditorInput | undefined;\n}\n\nexport interface IUntitledTextResourceEditorInput extends IBaseTextResourceEditorInput {\n\n\t/**\n\t * Optional resource for the untitled editor. Depending on the value, the editor:\n\t * - should get a unique name if `undefined` (for example `Untitled-1`)\n\t * - should use the resource directly if the scheme is `untitled:`\n\t * - should change the scheme to `untitled:` otherwise and assume an associated path\n\t *\n\t * Untitled editors with associated path behave slightly different from other untitled\n\t * editors:\n\t * - they are dirty right when opening\n\t * - they will not ask for a file path when saving but use the associated path\n\t */\n\treadonly resource: URI | undefined;\n}\n\n/**\n * A resource side by side editor input shows 2 editors side by side but\n * without highlighting any differences.\n *\n * Note: both sides will be resolved as editor individually. As such, it is\n * possible to show 2 different editors side by side.\n *\n * @see {@link IResourceDiffEditorInput} for a variant that compares 2 editors.\n */\nexport interface IResourceSideBySideEditorInput extends IBaseUntypedEditorInput {\n\n\t/**\n\t * The right hand side editor to open inside a side-by-side editor.\n\t */\n\treadonly primary: IResourceEditorInput | ITextResourceEditorInput | IUntitledTextResourceEditorInput;\n\n\t/**\n\t * The left hand side editor to open inside a side-by-side editor.\n\t */\n\treadonly secondary: IResourceEditorInput | ITextResourceEditorInput | IUntitledTextResourceEditorInput;\n}\n\n/**\n * A resource diff editor input compares 2 editors side by side\n * highlighting the differences.\n *\n * Note: both sides must be resolvable to the same editor, or\n * a text based presentation will be used as fallback.\n */\nexport interface IResourceDiffEditorInput extends IBaseUntypedEditorInput {\n\n\t/**\n\t * The left hand side editor to open inside a diff editor.\n\t */\n\treadonly original: IResourceEditorInput | ITextResourceEditorInput | IUntitledTextResourceEditorInput;\n\n\t/**\n\t * The right hand side editor to open inside a diff editor.\n\t */\n\treadonly modified: IResourceEditorInput | ITextResourceEditorInput | IUntitledTextResourceEditorInput;\n}\n\nexport type IResourceMergeEditorInputSide = (IResourceEditorInput | ITextResourceEditorInput) & { detail?: string };\n\n/**\n * A resource merge editor input compares multiple editors\n * highlighting the differences for merging.\n *\n * Note: all sides must be resolvable to the same editor, or\n * a text based presentation will be used as fallback.\n */\nexport interface IResourceMergeEditorInput extends IBaseUntypedEditorInput {\n\n\t/**\n\t * The one changed version of the file.\n\t */\n\treadonly input1: IResourceMergeEditorInputSide;\n\n\t/**\n\t * The second changed version of the file.\n\t */\n\treadonly input2: IResourceMergeEditorInputSide;\n\n\t/**\n\t * The base common ancestor of the file to merge.\n\t */\n\treadonly base: IResourceEditorInput | ITextResourceEditorInput;\n\n\t/**\n\t * The resulting output of the merge.\n\t */\n\treadonly result: IResourceEditorInput | ITextResourceEditorInput;\n}\n\nexport function isResourceEditorInput(editor: unknown): editor is IResourceEditorInput {\n\tif (isEditorInput(editor)) {\n\t\treturn false; // make sure to not accidentally match on typed editor inputs\n\t}\n\n\tconst candidate = editor as IResourceEditorInput | undefined;\n\n\treturn URI.isUri(candidate?.resource);\n}\n\nexport function isResourceDiffEditorInput(editor: unknown): editor is IResourceDiffEditorInput {\n\tif (isEditorInput(editor)) {\n\t\treturn false; // make sure to not accidentally match on typed editor inputs\n\t}\n\n\tconst candidate = editor as IResourceDiffEditorInput | undefined;\n\n\treturn candidate?.original !== undefined && candidate.modified !== undefined;\n}\n\nexport function isResourceSideBySideEditorInput(editor: unknown): editor is IResourceSideBySideEditorInput {\n\tif (isEditorInput(editor)) {\n\t\treturn false; // make sure to not accidentally match on typed editor inputs\n\t}\n\n\tif (isResourceDiffEditorInput(editor)) {\n\t\treturn false; // make sure to not accidentally match on diff editors\n\t}\n\n\tconst candidate = editor as IResourceSideBySideEditorInput | undefined;\n\n\treturn candidate?.primary !== undefined && candidate.secondary !== undefined;\n}\n\nexport function isUntitledResourceEditorInput(editor: unknown): editor is IUntitledTextResourceEditorInput {\n\tif (isEditorInput(editor)) {\n\t\treturn false; // make sure to not accidentally match on typed editor inputs\n\t}\n\n\tconst candidate = editor as IUntitledTextResourceEditorInput | undefined;\n\tif (!candidate) {\n\t\treturn false;\n\t}\n\n\treturn candidate.resource === undefined || candidate.resource.scheme === Schemas.untitled || candidate.forceUntitled === true;\n}\n\nexport function isResourceMergeEditorInput(editor: unknown): editor is IResourceMergeEditorInput {\n\tif (isEditorInput(editor)) {\n\t\treturn false; // make sure to not accidentally match on typed editor inputs\n\t}\n\n\tconst candidate = editor as IResourceMergeEditorInput | undefined;\n\n\treturn URI.isUri(candidate?.base?.resource) && URI.isUri(candidate?.input1?.resource) && URI.isUri(candidate?.input2?.resource) && URI.isUri(candidate?.result?.resource);\n}\n\nexport const enum Verbosity {\n\tSHORT,\n\tMEDIUM,\n\tLONG\n}\n\nexport const enum SaveReason {\n\n\t/**\n\t * Explicit user gesture.\n\t */\n\tEXPLICIT = 1,\n\n\t/**\n\t * Auto save after a timeout.\n\t */\n\tAUTO = 2,\n\n\t/**\n\t * Auto save after editor focus change.\n\t */\n\tFOCUS_CHANGE = 3,\n\n\t/**\n\t * Auto save after window change.\n\t */\n\tWINDOW_CHANGE = 4\n}\n\nexport type SaveSource = string;\n\ninterface ISaveSourceDescriptor {\n\tsource: SaveSource;\n\tlabel: string;\n}\n\nclass SaveSourceFactory {\n\n\tprivate readonly mapIdToSaveSource = new Map<SaveSource, ISaveSourceDescriptor>();\n\n\t/**\n\t * Registers a `SaveSource` with an identifier and label\n\t * to the registry so that it can be used in save operations.\n\t */\n\tregisterSource(id: string, label: string): SaveSource {\n\t\tlet sourceDescriptor = this.mapIdToSaveSource.get(id);\n\t\tif (!sourceDescriptor) {\n\t\t\tsourceDescriptor = { source: id, label };\n\t\t\tthis.mapIdToSaveSource.set(id, sourceDescriptor);\n\t\t}\n\n\t\treturn sourceDescriptor.source;\n\t}\n\n\tgetSourceLabel(source: SaveSource): string {\n\t\treturn this.mapIdToSaveSource.get(source)?.label ?? source;\n\t}\n}\n\nexport const SaveSourceRegistry = new SaveSourceFactory();\n\nexport interface ISaveOptions {\n\n\t/**\n\t * An indicator how the save operation was triggered.\n\t */\n\treason?: SaveReason;\n\n\t/**\n\t * An indicator about the source of the save operation.\n\t *\n\t * Must use `SaveSourceRegistry.registerSource()` to obtain.\n\t */\n\treadonly source?: SaveSource;\n\n\t/**\n\t * Forces to save the contents of the working copy\n\t * again even if the working copy is not dirty.\n\t */\n\treadonly force?: boolean;\n\n\t/**\n\t * Instructs the save operation to skip any save participants.\n\t */\n\treadonly skipSaveParticipants?: boolean;\n\n\t/**\n\t * A hint as to which file systems should be available for saving.\n\t */\n\treadonly availableFileSystems?: string[];\n}\n\nexport interface IRevertOptions {\n\n\t/**\n\t * Forces to load the contents of the working copy\n\t * again even if the working copy is not dirty.\n\t */\n\treadonly force?: boolean;\n\n\t/**\n\t * A soft revert will clear dirty state of a working copy\n\t * but will not attempt to load it from its persisted state.\n\t *\n\t * This option may be used in scenarios where an editor is\n\t * closed and where we do not require to load the contents.\n\t */\n\treadonly soft?: boolean;\n}\n\nexport interface IMoveResult {\n\teditor: EditorInput | IUntypedEditorInput;\n\toptions?: IEditorOptions;\n}\n\nexport const enum EditorInputCapabilities {\n\n\t/**\n\t * Signals no specific capability for the input.\n\t */\n\tNone = 0,\n\n\t/**\n\t * Signals that the input is readonly.\n\t */\n\tReadonly = 1 << 1,\n\n\t/**\n\t * Signals that the input is untitled.\n\t */\n\tUntitled = 1 << 2,\n\n\t/**\n\t * Signals that the input can only be shown in one group\n\t * and not be split into multiple groups.\n\t */\n\tSingleton = 1 << 3,\n\n\t/**\n\t * Signals that the input requires workspace trust.\n\t */\n\tRequiresTrust = 1 << 4,\n\n\t/**\n\t * Signals that the editor can split into 2 in the same\n\t * editor group.\n\t */\n\tCanSplitInGroup = 1 << 5,\n\n\t/**\n\t * Signals that the editor wants its description to be\n\t * visible when presented to the user. By default, a UI\n\t * component may decide to hide the description portion\n\t * for brevity.\n\t */\n\tForceDescription = 1 << 6,\n\n\t/**\n\t * Signals that the editor supports dropping into the\n\t * editor by holding shift.\n\t */\n\tCanDropIntoEditor = 1 << 7,\n\n\t/**\n\t * Signals that the editor is composed of multiple editors\n\t * within.\n\t */\n\tMultipleEditors = 1 << 8,\n\n\t/**\n\t * Signals that the editor cannot be in a dirty state\n\t * and may still have unsaved changes\n\t */\n\tScratchpad = 1 << 9\n}\n\nexport type IUntypedEditorInput = IResourceEditorInput | ITextResourceEditorInput | IUntitledTextResourceEditorInput | IResourceDiffEditorInput | IResourceSideBySideEditorInput | IResourceMergeEditorInput;\n\nexport abstract class AbstractEditorInput extends Disposable {\n\t// Marker class for implementing `isEditorInput`\n}\n\nexport function isEditorInput(editor: unknown): editor is EditorInput {\n\treturn editor instanceof AbstractEditorInput;\n}\n\nexport interface EditorInputWithPreferredResource {\n\n\t/**\n\t * An editor may provide an additional preferred resource alongside\n\t * the `resource` property. While the `resource` property serves as\n\t * unique identifier of the editor that should be used whenever we\n\t * compare to other editors, the `preferredResource` should be used\n\t * in places where e.g. the resource is shown to the user.\n\t *\n\t * For example: on Windows and macOS, the same URI with different\n\t * casing may point to the same file. The editor may chose to\n\t * \"normalize\" the URIs so that only one editor opens for different\n\t * URIs. But when displaying the editor label to the user, the\n\t * preferred URI should be used.\n\t *\n\t * Not all editors have a `preferredResource`. The `EditorResourceAccessor`\n\t * utility can be used to always get the right resource without having\n\t * to do instanceof checks.\n\t */\n\treadonly preferredResource: URI;\n}\n\nfunction isEditorInputWithPreferredResource(editor: unknown): editor is EditorInputWithPreferredResource {\n\tconst candidate = editor as EditorInputWithPreferredResource | undefined;\n\n\treturn URI.isUri(candidate?.preferredResource);\n}\n\nexport interface ISideBySideEditorInput extends EditorInput {\n\n\t/**\n\t * The primary editor input is shown on the right hand side.\n\t */\n\tprimary: EditorInput;\n\n\t/**\n\t * The secondary editor input is shown on the left hand side.\n\t */\n\tsecondary: EditorInput;\n}\n\nexport function isSideBySideEditorInput(editor: unknown): editor is ISideBySideEditorInput {\n\tconst candidate = editor as ISideBySideEditorInput | undefined;\n\n\treturn isEditorInput(candidate?.primary) && isEditorInput(candidate?.secondary);\n}\n\nexport interface IDiffEditorInput extends EditorInput {\n\n\t/**\n\t * The modified (primary) editor input is shown on the right hand side.\n\t */\n\tmodified: EditorInput;\n\n\t/**\n\t * The original (secondary) editor input is shown on the left hand side.\n\t */\n\toriginal: EditorInput;\n}\n\nexport function isDiffEditorInput(editor: unknown): editor is IDiffEditorInput {\n\tconst candidate = editor as IDiffEditorInput | undefined;\n\n\treturn isEditorInput(candidate?.modified) && isEditorInput(candidate?.original);\n}\n\nexport interface IUntypedFileEditorInput extends ITextResourceEditorInput {\n\n\t/**\n\t * A marker to create a `IFileEditorInput` from this untyped input.\n\t */\n\tforceFile: true;\n}\n\n/**\n * This is a tagging interface to declare an editor input being capable of dealing with files. It is only used in the editor registry\n * to register this kind of input to the platform.\n */\nexport interface IFileEditorInput extends EditorInput, IEncodingSupport, ILanguageSupport, EditorInputWithPreferredResource {\n\n\t/**\n\t * Gets the resource this file input is about. This will always be the\n\t * canonical form of the resource, so it may differ from the original\n\t * resource that was provided to create the input. Use `preferredResource`\n\t * for the form as it was created.\n\t */\n\treadonly resource: URI;\n\n\t/**\n\t * Sets the preferred resource to use for this file input.\n\t */\n\tsetPreferredResource(preferredResource: URI): void;\n\n\t/**\n\t * Sets the preferred name to use for this file input.\n\t *\n\t * Note: for certain file schemes the input may decide to ignore this\n\t * name and use our standard naming. Specifically for schemes we own,\n\t * we do not let others override the name.\n\t */\n\tsetPreferredName(name: string): void;\n\n\t/**\n\t * Sets the preferred description to use for this file input.\n\t *\n\t * Note: for certain file schemes the input may decide to ignore this\n\t * description and use our standard naming. Specifically for schemes we own,\n\t * we do not let others override the description.\n\t */\n\tsetPreferredDescription(description: string): void;\n\n\t/**\n\t * Sets the preferred encoding to use for this file input.\n\t */\n\tsetPreferredEncoding(encoding: string): void;\n\n\t/**\n\t * Sets the preferred language id to use for this file input.\n\t */\n\tsetPreferredLanguageId(languageId: string): void;\n\n\t/**\n\t * Sets the preferred contents to use for this file input.\n\t */\n\tsetPreferredContents(contents: string): void;\n\n\t/**\n\t * Forces this file input to open as binary instead of text.\n\t */\n\tsetForceOpenAsBinary(): void;\n\n\t/**\n\t * Figure out if the file input has been resolved or not.\n\t */\n\tisResolved(): boolean;\n}\n\nexport interface IFileEditorInputOptions extends ITextEditorOptions {\n\n\t/**\n\t * If provided, the size of the file will be checked against the limits\n\t * and an error will be thrown if any limit is exceeded.\n\t */\n\treadonly limits?: IFileReadLimits;\n}\n\nexport function createTooLargeFileError(group: IEditorGroup, input: EditorInput, options: IEditorOptions | undefined, message: string, preferencesService: IPreferencesService): Error {\n\treturn createEditorOpenError(message, [\n\t\ttoAction({\n\t\t\tid: 'workbench.action.openLargeFile', label: localize('openLargeFile', \"Open Anyway\"), run: () => {\n\t\t\t\tconst fileEditorOptions: IFileEditorInputOptions = {\n\t\t\t\t\t...options,\n\t\t\t\t\tlimits: {\n\t\t\t\t\t\tsize: Number.MAX_VALUE\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tgroup.openEditor(input, fileEditorOptions);\n\t\t\t}\n\t\t}),\n\t\ttoAction({\n\t\t\tid: 'workbench.action.configureEditorLargeFileConfirmation', label: localize('configureEditorLargeFileConfirmation', \"Configure Limit\"), run: () => {\n\t\t\t\treturn preferencesService.openUserSettings({ query: 'workbench.editorLargeFileConfirmation' });\n\t\t\t}\n\t\t}),\n\t], {\n\t\tforceMessage: true,\n\t\tforceSeverity: Severity.Warning\n\t});\n}\n\nexport interface EditorInputWithOptions {\n\teditor: EditorInput;\n\toptions?: IEditorOptions;\n}\n\nexport interface EditorInputWithOptionsAndGroup extends EditorInputWithOptions {\n\tgroup: IEditorGroup;\n}\n\nexport function isEditorInputWithOptions(editor: unknown): editor is EditorInputWithOptions {\n\tconst candidate = editor as EditorInputWithOptions | undefined;\n\n\treturn isEditorInput(candidate?.editor);\n}\n\nexport function isEditorInputWithOptionsAndGroup(editor: unknown): editor is EditorInputWithOptionsAndGroup {\n\tconst candidate = editor as EditorInputWithOptionsAndGroup | undefined;\n\n\treturn isEditorInputWithOptions(editor) && candidate?.group !== undefined;\n}\n\n/**\n * Context passed into `EditorPane#setInput` to give additional\n * context information around why the editor was opened.\n */\nexport interface IEditorOpenContext {\n\n\t/**\n\t * An indicator if the editor input is new for the group the editor is in.\n\t * An editor is new for a group if it was not part of the group before and\n\t * otherwise was already opened in the group and just became the active editor.\n\t *\n\t * This hint can e.g. be used to decide whether to restore view state or not.\n\t */\n\tnewInGroup?: boolean;\n}\n\nexport interface IEditorIdentifier {\n\tgroupId: GroupIdentifier;\n\teditor: EditorInput;\n}\n\nexport function isEditorIdentifier(identifier: unknown): identifier is IEditorIdentifier {\n\tconst candidate = identifier as IEditorIdentifier | undefined;\n\n\treturn typeof candidate?.groupId === 'number' && isEditorInput(candidate.editor);\n}\n\n/**\n * The editor commands context is used for editor commands (e.g. in the editor title)\n * and we must ensure that the context is serializable because it potentially travels\n * to the extension host!\n */\nexport interface IEditorCommandsContext {\n\tgroupId: GroupIdentifier;\n\teditorIndex?: number;\n\n\tpreserveFocus?: boolean;\n}\n\n/**\n * More information around why an editor was closed in the model.\n */\nexport enum EditorCloseContext {\n\n\t/**\n\t * No specific context for closing (e.g. explicit user gesture).\n\t */\n\tUNKNOWN,\n\n\t/**\n\t * The editor closed because it was replaced with another editor.\n\t * This can either happen via explicit replace call or when an\n\t * editor is in preview mode and another editor opens.\n\t */\n\tREPLACE,\n\n\t/**\n\t * The editor closed as a result of moving it to another group.\n\t */\n\tMOVE,\n\n\t/**\n\t * The editor closed because another editor turned into preview\n\t * and this used to be the preview editor before.\n\t */\n\tUNPIN\n}\n\nexport interface IEditorCloseEvent extends IEditorIdentifier {\n\n\t/**\n\t * More information around why the editor was closed.\n\t */\n\treadonly context: EditorCloseContext;\n\n\t/**\n\t * The index of the editor before closing.\n\t */\n\treadonly index: number;\n\n\t/**\n\t * Whether the editor was sticky or not.\n\t */\n\treadonly sticky: boolean;\n}\n\nexport interface IActiveEditorChangeEvent {\n\n\t/**\n\t * The new active editor or `undefined` if the group is empty.\n\t */\n\teditor: EditorInput | undefined;\n}\n\nexport interface IEditorWillMoveEvent extends IEditorIdentifier {\n\n\t/**\n\t * The target group of the move operation.\n\t */\n\treadonly target: GroupIdentifier;\n}\n\nexport interface IEditorWillOpenEvent extends IEditorIdentifier { }\n\nexport type GroupIdentifier = number;\n\nexport const enum GroupModelChangeKind {\n\n\t/* Group Changes */\n\tGROUP_ACTIVE,\n\tGROUP_INDEX,\n\tGROUP_LOCKED,\n\n\t/* Editor Changes */\n\tEDITOR_OPEN,\n\tEDITOR_CLOSE,\n\tEDITOR_MOVE,\n\tEDITOR_ACTIVE,\n\tEDITOR_LABEL,\n\tEDITOR_CAPABILITIES,\n\tEDITOR_PIN,\n\tEDITOR_STICKY,\n\tEDITOR_DIRTY,\n\tEDITOR_WILL_DISPOSE\n}\n\nexport interface IWorkbenchEditorConfiguration {\n\tworkbench?: {\n\t\teditor?: IEditorPartConfiguration;\n\t\ticonTheme?: string;\n\t};\n}\n\ninterface IEditorPartConfiguration {\n\tshowTabs?: boolean;\n\twrapTabs?: boolean;\n\tscrollToSwitchTabs?: boolean;\n\thighlightModifiedTabs?: boolean;\n\ttabCloseButton?: 'left' | 'right' | 'off';\n\ttabSizing?: 'fit' | 'shrink' | 'fixed';\n\ttabSizingFixedMinWidth?: number;\n\ttabSizingFixedMaxWidth?: number;\n\tpinnedTabSizing?: 'normal' | 'compact' | 'shrink';\n\ttabHeight?: 'normal' | 'compact';\n\tpreventPinnedEditorClose?: PreventPinnedEditorClose;\n\ttitleScrollbarSizing?: 'default' | 'large';\n\tfocusRecentEditorAfterClose?: boolean;\n\tshowIcons?: boolean;\n\tenablePreview?: boolean;\n\tenablePreviewFromQuickOpen?: boolean;\n\tenablePreviewFromCodeNavigation?: boolean;\n\tcloseOnFileDelete?: boolean;\n\topenPositioning?: 'left' | 'right' | 'first' | 'last';\n\topenSideBySideDirection?: 'right' | 'down';\n\tcloseEmptyGroups?: boolean;\n\tautoLockGroups?: Set<string>;\n\trevealIfOpen?: boolean;\n\tmouseBackForwardToNavigate?: boolean;\n\tlabelFormat?: 'default' | 'short' | 'medium' | 'long';\n\trestoreViewState?: boolean;\n\tsplitInGroupLayout?: 'vertical' | 'horizontal';\n\tsplitSizing?: 'auto' | 'split' | 'distribute';\n\tsplitOnDragAndDrop?: boolean;\n\tcenteredLayoutFixedWidth?: boolean;\n\tdoubleClickTabToToggleEditorGroupSizes?: boolean;\n\tlimit?: {\n\t\tenabled?: boolean;\n\t\texcludeDirty?: boolean;\n\t\tvalue?: number;\n\t\tperEditorGroup?: boolean;\n\t};\n\tdecorations?: {\n\t\tbadges?: boolean;\n\t\tcolors?: boolean;\n\t};\n}\n\nexport interface IEditorPartOptions extends IEditorPartConfiguration {\n\thasIcons?: boolean;\n}\n\nexport interface IEditorPartOptionsChangeEvent {\n\toldPartOptions: IEditorPartOptions;\n\tnewPartOptions: IEditorPartOptions;\n}\n\nexport enum SideBySideEditor {\n\tPRIMARY = 1,\n\tSECONDARY = 2,\n\tBOTH = 3,\n\tANY = 4\n}\n\nexport interface IFindEditorOptions {\n\n\t/**\n\t * Whether to consider any or both side by side editor as matching.\n\t * By default, side by side editors will not be considered\n\t * as matching, even if the editor is opened in one of the sides.\n\t */\n\tsupportSideBySide?: SideBySideEditor.PRIMARY | SideBySideEditor.SECONDARY | SideBySideEditor.ANY;\n}\n\nexport interface IMatchEditorOptions {\n\n\t/**\n\t * Whether to consider a side by side editor as matching.\n\t * By default, side by side editors will not be considered\n\t * as matching, even if the editor is opened in one of the sides.\n\t */\n\tsupportSideBySide?: SideBySideEditor.ANY | SideBySideEditor.BOTH;\n\n\t/**\n\t * Only consider an editor to match when the\n\t * `candidate === editor` but not when\n\t * `candidate.matches(editor)`.\n\t */\n\tstrictEquals?: boolean;\n}\n\nexport interface IEditorResourceAccessorOptions {\n\n\t/**\n\t * Allows to access the `resource(s)` of side by side editors. If not\n\t * specified, a `resource` for a side by side editor will always be\n\t * `undefined`.\n\t */\n\tsupportSideBySide?: SideBySideEditor;\n\n\t/**\n\t * Allows to filter the scheme to consider. A resource scheme that does\n\t * not match a filter will not be considered.\n\t */\n\tfilterByScheme?: string | string[];\n}\n\nclass EditorResourceAccessorImpl {\n\n\t/**\n\t * The original URI of an editor is the URI that was used originally to open\n\t * the editor and should be used whenever the URI is presented to the user,\n\t * e.g. as a label together with utility methods such as `ResourceLabel` or\n\t * `ILabelService` that can turn this original URI into the best form for\n\t * presenting.\n\t *\n\t * In contrast, the canonical URI (#getCanonicalUri) may be different and should\n\t * be used whenever the URI is used to e.g. compare with other editors or when\n\t * caching certain data based on the URI.\n\t *\n\t * For example: on Windows and macOS, the same file URI with different casing may\n\t * point to the same file. The editor may chose to \"normalize\" the URI into a canonical\n\t * form so that only one editor opens for same file URIs with different casing. As\n\t * such, the original URI and the canonical URI can be different.\n\t */\n\tgetOriginalUri(editor: EditorInput | IUntypedEditorInput | undefined | null): URI | undefined;\n\tgetOriginalUri(editor: EditorInput | IUntypedEditorInput | undefined | null, options: IEditorResourceAccessorOptions & { supportSideBySide?: SideBySideEditor.PRIMARY | SideBySideEditor.SECONDARY | SideBySideEditor.ANY }): URI | undefined;\n\tgetOriginalUri(editor: EditorInput | IUntypedEditorInput | undefined | null, options: IEditorResourceAccessorOptions & { supportSideBySide: SideBySideEditor.BOTH }): URI | { primary?: URI; secondary?: URI } | undefined;\n\tgetOriginalUri(editor: EditorInput | IUntypedEditorInput | undefined | null, options?: IEditorResourceAccessorOptions): URI | { primary?: URI; secondary?: URI } | undefined;\n\tgetOriginalUri(editor: EditorInput | IUntypedEditorInput | undefined | null, options?: IEditorResourceAccessorOptions): URI | { primary?: URI; secondary?: URI } | undefined {\n\t\tif (!editor) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Merge editors are handled with `merged` result editor\n\t\tif (isResourceMergeEditorInput(editor)) {\n\t\t\treturn EditorResourceAccessor.getOriginalUri(editor.result, options);\n\t\t}\n\n\t\t// Optionally support side-by-side editors\n\t\tif (options?.supportSideBySide) {\n\t\t\tconst { primary, secondary } = this.getSideEditors(editor);\n\t\t\tif (primary && secondary) {\n\t\t\t\tif (options?.supportSideBySide === SideBySideEditor.BOTH) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tprimary: this.getOriginalUri(primary, { filterByScheme: options.filterByScheme }),\n\t\t\t\t\t\tsecondary: this.getOriginalUri(secondary, { filterByScheme: options.filterByScheme })\n\t\t\t\t\t};\n\t\t\t\t} else if (options?.supportSideBySide === SideBySideEditor.ANY) {\n\t\t\t\t\treturn this.getOriginalUri(primary, { filterByScheme: options.filterByScheme }) ?? this.getOriginalUri(secondary, { filterByScheme: options.filterByScheme });\n\t\t\t\t}\n\n\t\t\t\teditor = options.supportSideBySide === SideBySideEditor.PRIMARY ? primary : secondary;\n\t\t\t}\n\t\t}\n\n\t\tif (isResourceDiffEditorInput(editor) || isResourceSideBySideEditorInput(editor) || isResourceMergeEditorInput(editor)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Original URI is the `preferredResource` of an editor if any\n\t\tconst originalResource = isEditorInputWithPreferredResource(editor) ? editor.preferredResource : editor.resource;\n\t\tif (!originalResource || !options || !options.filterByScheme) {\n\t\t\treturn originalResource;\n\t\t}\n\n\t\treturn this.filterUri(originalResource, options.filterByScheme);\n\t}\n\n\tprivate getSideEditors(editor: EditorInput | IUntypedEditorInput): { primary: EditorInput | IUntypedEditorInput | undefined; secondary: EditorInput | IUntypedEditorInput | undefined } {\n\t\tif (isSideBySideEditorInput(editor) || isResourceSideBySideEditorInput(editor)) {\n\t\t\treturn { primary: editor.primary, secondary: editor.secondary };\n\t\t}\n\n\t\tif (isDiffEditorInput(editor) || isResourceDiffEditorInput(editor)) {\n\t\t\treturn { primary: editor.modified, secondary: editor.original };\n\t\t}\n\n\t\treturn { primary: undefined, secondary: undefined };\n\t}\n\n\t/**\n\t * The canonical URI of an editor is the true unique identifier of the editor\n\t * and should be used whenever the URI is used e.g. to compare with other\n\t * editors or when caching certain data based on the URI.\n\t *\n\t * In contrast, the original URI (#getOriginalUri) may be different and should\n\t * be used whenever the URI is presented to the user, e.g. as a label.\n\t *\n\t * For example: on Windows and macOS, the same file URI with different casing may\n\t * point to the same file. The editor may chose to \"normalize\" the URI into a canonical\n\t * form so that only one editor opens for same file URIs with different casing. As\n\t * such, the original URI and the canonical URI can be different.\n\t */\n\tgetCanonicalUri(editor: EditorInput | IUntypedEditorInput | undefined | null): URI | undefined;\n\tgetCanonicalUri(editor: EditorInput | IUntypedEditorInput | undefined | null, options: IEditorResourceAccessorOptions & { supportSideBySide?: SideBySideEditor.PRIMARY | SideBySideEditor.SECONDARY | SideBySideEditor.ANY }): URI | undefined;\n\tgetCanonicalUri(editor: EditorInput | IUntypedEditorInput | undefined | null, options: IEditorResourceAccessorOptions & { supportSideBySide: SideBySideEditor.BOTH }): URI | { primary?: URI; secondary?: URI } | undefined;\n\tgetCanonicalUri(editor: EditorInput | IUntypedEditorInput | undefined | null, options?: IEditorResourceAccessorOptions): URI | { primary?: URI; secondary?: URI } | undefined;\n\tgetCanonicalUri(editor: EditorInput | IUntypedEditorInput | undefined | null, options?: IEditorResourceAccessorOptions): URI | { primary?: URI; secondary?: URI } | undefined {\n\t\tif (!editor) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Merge editors are handled with `merged` result editor\n\t\tif (isResourceMergeEditorInput(editor)) {\n\t\t\treturn EditorResourceAccessor.getCanonicalUri(editor.result, options);\n\t\t}\n\n\t\t// Optionally support side-by-side editors\n\t\tif (options?.supportSideBySide) {\n\t\t\tconst { primary, secondary } = this.getSideEditors(editor);\n\t\t\tif (primary && secondary) {\n\t\t\t\tif (options?.supportSideBySide === SideBySideEditor.BOTH) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tprimary: this.getCanonicalUri(primary, { filterByScheme: options.filterByScheme }),\n\t\t\t\t\t\tsecondary: this.getCanonicalUri(secondary, { filterByScheme: options.filterByScheme })\n\t\t\t\t\t};\n\t\t\t\t} else if (options?.supportSideBySide === SideBySideEditor.ANY) {\n\t\t\t\t\treturn this.getCanonicalUri(primary, { filterByScheme: options.filterByScheme }) ?? this.getCanonicalUri(secondary, { filterByScheme: options.filterByScheme });\n\t\t\t\t}\n\n\t\t\t\teditor = options.supportSideBySide === SideBySideEditor.PRIMARY ? primary : secondary;\n\t\t\t}\n\t\t}\n\n\t\tif (isResourceDiffEditorInput(editor) || isResourceSideBySideEditorInput(editor) || isResourceMergeEditorInput(editor)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Canonical URI is the `resource` of an editor\n\t\tconst canonicalResource = editor.resource;\n\t\tif (!canonicalResource || !options || !options.filterByScheme) {\n\t\t\treturn canonicalResource;\n\t\t}\n\n\t\treturn this.filterUri(canonicalResource, options.filterByScheme);\n\t}\n\n\tprivate filterUri(resource: URI, filter: string | string[]): URI | undefined {\n\n\t\t// Multiple scheme filter\n\t\tif (Array.isArray(filter)) {\n\t\t\tif (filter.some(scheme => resource.scheme === scheme)) {\n\t\t\t\treturn resource;\n\t\t\t}\n\t\t}\n\n\t\t// Single scheme filter\n\t\telse {\n\t\t\tif (filter === resource.scheme) {\n\t\t\t\treturn resource;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n\nexport type PreventPinnedEditorClose = 'keyboardAndMouse' | 'keyboard' | 'mouse' | 'never' | undefined;\n\nexport enum EditorCloseMethod {\n\tUNKNOWN,\n\tKEYBOARD,\n\tMOUSE\n}\n\nexport function preventEditorClose(group: IEditorGroup, editor: EditorInput, method: EditorCloseMethod, configuration: IEditorPartConfiguration): boolean {\n\tif (!group.isSticky(editor)) {\n\t\treturn false; // only interested in sticky editors\n\t}\n\n\tswitch (configuration.preventPinnedEditorClose) {\n\t\tcase 'keyboardAndMouse': return method === EditorCloseMethod.MOUSE || method === EditorCloseMethod.KEYBOARD;\n\t\tcase 'mouse': return method === EditorCloseMethod.MOUSE;\n\t\tcase 'keyboard': return method === EditorCloseMethod.KEYBOARD;\n\t}\n\n\treturn false;\n}\n\nexport const EditorResourceAccessor = new EditorResourceAccessorImpl();\n\nexport const enum CloseDirection {\n\tLEFT,\n\tRIGHT\n}\n\nexport interface IEditorMemento<T> {\n\n\tsaveEditorState(group: IEditorGroup, resource: URI, state: T): void;\n\tsaveEditorState(group: IEditorGroup, editor: EditorInput, state: T): void;\n\n\tloadEditorState(group: IEditorGroup, resource: URI): T | undefined;\n\tloadEditorState(group: IEditorGroup, editor: EditorInput): T | undefined;\n\n\tclearEditorState(resource: URI, group?: IEditorGroup): void;\n\tclearEditorState(editor: EditorInput, group?: IEditorGroup): void;\n\n\tclearEditorStateOnDispose(resource: URI, editor: EditorInput): void;\n\n\tmoveEditorState(source: URI, target: URI, comparer: IExtUri): void;\n}\n\nclass EditorFactoryRegistry implements IEditorFactoryRegistry {\n\tprivate instantiationService: IInstantiationService | undefined;\n\n\tprivate fileEditorFactory: IFileEditorFactory | undefined;\n\n\tprivate readonly editorSerializerConstructors = new Map<string /* Type ID */, IConstructorSignature<IEditorSerializer>>();\n\tprivate readonly editorSerializerInstances = new Map<string /* Type ID */, IEditorSerializer>();\n\n\tstart(accessor: ServicesAccessor): void {\n\t\tconst instantiationService = this.instantiationService = accessor.get(IInstantiationService);\n\n\t\tfor (const [key, ctor] of this.editorSerializerConstructors) {\n\t\t\tthis.createEditorSerializer(key, ctor, instantiationService);\n\t\t}\n\n\t\tthis.editorSerializerConstructors.clear();\n\t}\n\n\tprivate createEditorSerializer(editorTypeId: string, ctor: IConstructorSignature<IEditorSerializer>, instantiationService: IInstantiationService): void {\n\t\tconst instance = instantiationService.createInstance(ctor);\n\t\tthis.editorSerializerInstances.set(editorTypeId, instance);\n\t}\n\n\tregisterFileEditorFactory(factory: IFileEditorFactory): void {\n\t\tif (this.fileEditorFactory) {\n\t\t\tthrow new Error('Can only register one file editor factory.');\n\t\t}\n\n\t\tthis.fileEditorFactory = factory;\n\t}\n\n\tgetFileEditorFactory(): IFileEditorFactory {\n\t\treturn assertIsDefined(this.fileEditorFactory);\n\t}\n\n\tregisterEditorSerializer(editorTypeId: string, ctor: IConstructorSignature<IEditorSerializer>): IDisposable {\n\t\tif (this.editorSerializerConstructors.has(editorTypeId) || this.editorSerializerInstances.has(editorTypeId)) {\n\t\t\tthrow new Error(`A editor serializer with type ID '${editorTypeId}' was already registered.`);\n\t\t}\n\n\t\tif (!this.instantiationService) {\n\t\t\tthis.editorSerializerConstructors.set(editorTypeId, ctor);\n\t\t} else {\n\t\t\tthis.createEditorSerializer(editorTypeId, ctor, this.instantiationService);\n\t\t}\n\n\t\treturn toDisposable(() => {\n\t\t\tthis.editorSerializerConstructors.delete(editorTypeId);\n\t\t\tthis.editorSerializerInstances.delete(editorTypeId);\n\t\t});\n\t}\n\n\tgetEditorSerializer(editor: EditorInput): IEditorSerializer | undefined;\n\tgetEditorSerializer(editorTypeId: string): IEditorSerializer | undefined;\n\tgetEditorSerializer(arg1: string | EditorInput): IEditorSerializer | undefined {\n\t\treturn this.editorSerializerInstances.get(typeof arg1 === 'string' ? arg1 : arg1.typeId);\n\t}\n}\n\nRegistry.add(EditorExtensions.EditorFactory, new EditorFactoryRegistry());\n\nexport async function pathsToEditors(paths: IPathData[] | undefined, fileService: IFileService, logService: ILogService): Promise<ReadonlyArray<IResourceEditorInput | IUntitledTextResourceEditorInput | undefined>> {\n\tif (!paths || !paths.length) {\n\t\treturn [];\n\t}\n\n\treturn await Promise.all(paths.map(async path => {\n\t\tconst resource = URI.revive(path.fileUri);\n\t\tif (!resource) {\n\t\t\tlogService.info('Cannot resolve the path because it is not valid.', path);\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst canHandleResource = await fileService.canHandleResource(resource);\n\t\tif (!canHandleResource) {\n\t\t\tlogService.info('Cannot resolve the path because it cannot be handled', path);\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet exists = path.exists;\n\t\tlet type = path.type;\n\t\tif (typeof exists !== 'boolean' || typeof type !== 'number') {\n\t\t\ttry {\n\t\t\t\ttype = (await fileService.stat(resource)).isDirectory ? FileType.Directory : FileType.Unknown;\n\t\t\t\texists = true;\n\t\t\t} catch (error) {\n\t\t\t\tlogService.error(error);\n\t\t\t\texists = false;\n\t\t\t}\n\t\t}\n\n\t\tif (!exists && path.openOnlyIfExists) {\n\t\t\tlogService.info('Cannot resolve the path because it does not exist', path);\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (type === FileType.Directory) {\n\t\t\tlogService.info('Cannot resolve the path because it is a directory', path);\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst options: IEditorOptions = {\n\t\t\t...path.options,\n\t\t\tpinned: true\n\t\t};\n\n\t\tif (!exists) {\n\t\t\treturn { resource, options, forceUntitled: true };\n\t\t}\n\n\t\treturn { resource, options };\n\t}));\n}\n\nexport const enum EditorsOrder {\n\n\t/**\n\t * Editors sorted by most recent activity (most recent active first)\n\t */\n\tMOST_RECENTLY_ACTIVE,\n\n\t/**\n\t * Editors sorted by sequential order\n\t */\n\tSEQUENTIAL\n}\n\nexport function isTextEditorViewState(candidate: unknown): candidate is IEditorViewState {\n\tconst viewState = candidate as IEditorViewState | undefined;\n\tif (!viewState) {\n\t\treturn false;\n\t}\n\n\tconst diffEditorViewState = viewState as IDiffEditorViewState;\n\tif (diffEditorViewState.modified) {\n\t\treturn isTextEditorViewState(diffEditorViewState.modified);\n\t}\n\n\tconst codeEditorViewState = viewState as ICodeEditorViewState;\n\n\treturn !!(codeEditorViewState.contributionsState && codeEditorViewState.viewState && Array.isArray(codeEditorViewState.cursorState));\n}\n\nexport interface IEditorOpenErrorOptions {\n\n\t/**\n\t * If set to true, the message will be taken\n\t * from the error message entirely and not be\n\t * composed with more text.\n\t */\n\tforceMessage?: boolean;\n\n\t/**\n\t * If set, will override the severity of the error.\n\t */\n\tforceSeverity?: Severity;\n\n\t/**\n\t * If set to true, the error may be shown in a dialog\n\t * to the user if the editor opening was triggered by\n\t * user action. Otherwise and by default, the error will\n\t * be shown as place holder in the editor area.\n\t */\n\tallowDialog?: boolean;\n}\n\nexport interface IEditorOpenError extends IErrorWithActions, IEditorOpenErrorOptions { }\n\nexport function isEditorOpenError(obj: unknown): obj is IEditorOpenError {\n\treturn isErrorWithActions(obj);\n}\n\nexport function createEditorOpenError(messageOrError: string | Error, actions: IAction[], options?: IEditorOpenErrorOptions): IEditorOpenError {\n\tconst error: IEditorOpenError = createErrorWithActions(messageOrError, actions);\n\n\terror.forceMessage = options?.forceMessage;\n\terror.forceSeverity = options?.forceSeverity;\n\terror.allowDialog = options?.allowDialog;\n\n\treturn error;\n}\n"]}