{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/common/editor/editorModel.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG;;;;OAIG;IACH,MAAa,GAAY,SAAQ,eAAG;QAApC;;YAEkB,MAAC,GAAgB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAY,CAAC,CAAC;YAC7D,kBAAa,GAAG,IAAI,CAAC,CAAC,CAAc,KAAK,CAAC;YAE3C,MAAC,GAAU,KAAK,CAAC;YACjB,MAAC,GAAU,KAAK,CAAC;QAgC1B,CAAC;QA9BA;;WAEG;QACH,KAAK,CAAC,OAAO;YACZ,IAAI,CAAC,CAAC,GAAU,IAAI,CAAC;QACtB,CAAC;QAED;;WAEG;QACH,UAAU;YACT,OAAO,IAAI,CAAC,CAAC,CAAQ;QACtB,CAAC;QAED;;WAEG;QACH,UAAU;YACT,OAAO,IAAI,CAAC,CAAC,CAAQ;QACtB,CAAC;QAED;;WAEG;QACM,OAAO;YACf,IAAI,CAAC,CAAC,GAAU,IAAI,CAAC;YACrB,IAAI,CAAC,CAAC,CAAc,IAAI,EAAE,CAAC;YAE3B,KAAK,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC;KACD;IAtCD,kBAsCC","file":"editorModel.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IEditorModel } from 'vs/platform/editor/common/editor';\n\n/**\n * The editor model is the heavyweight counterpart of editor input. Depending on the editor input, it\n * resolves from a file system retrieve content and may allow for saving it back or reverting it.\n * Editor models are typically cached for some while because they are expensive to construct.\n */\nexport class EditorModel extends Disposable implements IEditorModel {\n\n\tprivate readonly _onWillDispose = this._register(new Emitter<void>());\n\treadonly onWillDispose = this._onWillDispose.event;\n\n\tprivate disposed = false;\n\tprivate resolved = false;\n\n\t/**\n\t * Causes this model to resolve returning a promise when loading is completed.\n\t */\n\tasync resolve(): Promise<void> {\n\t\tthis.resolved = true;\n\t}\n\n\t/**\n\t * Returns whether this model was loaded or not.\n\t */\n\tisResolved(): boolean {\n\t\treturn this.resolved;\n\t}\n\n\t/**\n\t * Find out if this model has been disposed.\n\t */\n\tisDisposed(): boolean {\n\t\treturn this.disposed;\n\t}\n\n\t/**\n\t * Subclasses should implement to free resources that have been claimed through loading.\n\t */\n\toverride dispose(): void {\n\t\tthis.disposed = true;\n\t\tthis._onWillDispose.fire();\n\n\t\tsuper.dispose();\n\t}\n}\n"]}