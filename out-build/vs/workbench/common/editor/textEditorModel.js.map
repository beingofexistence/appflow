{"version":3,"sources":["vs/workbench/common/editor/textEditorModel.ts"],"names":[],"mappings":"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","file":"textEditorModel.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITextModel, ITextBufferFactory, ITextSnapshot, ModelConstants } from 'vs/editor/common/model';\nimport { EditorModel } from 'vs/workbench/common/editor/editorModel';\nimport { ILanguageSupport } from 'vs/workbench/services/textfile/common/textfiles';\nimport { URI } from 'vs/base/common/uri';\nimport { ITextEditorModel, IResolvedTextEditorModel } from 'vs/editor/common/services/resolverService';\nimport { ILanguageService, ILanguageSelection } from 'vs/editor/common/languages/language';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { MutableDisposable } from 'vs/base/common/lifecycle';\nimport { PLAINTEXT_LANGUAGE_ID } from 'vs/editor/common/languages/modesRegistry';\nimport { ILanguageDetectionService, LanguageDetectionLanguageEventSource } from 'vs/workbench/services/languageDetection/common/languageDetectionWorkerService';\nimport { ThrottledDelayer } from 'vs/base/common/async';\nimport { IAccessibilityService } from 'vs/platform/accessibility/common/accessibility';\nimport { localize } from 'vs/nls';\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\n\n/**\n * The base text editor model leverages the code editor model. This class is only intended to be subclassed and not instantiated.\n */\nexport class BaseTextEditorModel extends EditorModel implements ITextEditorModel, ILanguageSupport {\n\n\tprivate static readonly AUTO_DETECT_LANGUAGE_THROTTLE_DELAY = 600;\n\n\tprotected textEditorModelHandle: URI | undefined = undefined;\n\n\tprivate createdEditorModel: boolean | undefined;\n\n\tprivate readonly modelDisposeListener = this._register(new MutableDisposable());\n\tprivate readonly autoDetectLanguageThrottler = this._register(new ThrottledDelayer<void>(BaseTextEditorModel.AUTO_DETECT_LANGUAGE_THROTTLE_DELAY));\n\n\tconstructor(\n\t\t@IModelService protected modelService: IModelService,\n\t\t@ILanguageService protected languageService: ILanguageService,\n\t\t@ILanguageDetectionService private readonly languageDetectionService: ILanguageDetectionService,\n\t\t@IAccessibilityService private readonly accessibilityService: IAccessibilityService,\n\t\ttextEditorModelHandle?: URI\n\t) {\n\t\tsuper();\n\n\t\tif (textEditorModelHandle) {\n\t\t\tthis.handleExistingModel(textEditorModelHandle);\n\t\t}\n\t}\n\n\tprivate handleExistingModel(textEditorModelHandle: URI): void {\n\n\t\t// We need the resource to point to an existing model\n\t\tconst model = this.modelService.getModel(textEditorModelHandle);\n\t\tif (!model) {\n\t\t\tthrow new Error(`Document with resource ${textEditorModelHandle.toString(true)} does not exist`);\n\t\t}\n\n\t\tthis.textEditorModelHandle = textEditorModelHandle;\n\n\t\t// Make sure we clean up when this model gets disposed\n\t\tthis.registerModelDisposeListener(model);\n\t}\n\n\tprivate registerModelDisposeListener(model: ITextModel): void {\n\t\tthis.modelDisposeListener.value = model.onWillDispose(() => {\n\t\t\tthis.textEditorModelHandle = undefined; // make sure we do not dispose code editor model again\n\t\t\tthis.dispose();\n\t\t});\n\t}\n\n\tget textEditorModel(): ITextModel | null {\n\t\treturn this.textEditorModelHandle ? this.modelService.getModel(this.textEditorModelHandle) : null;\n\t}\n\n\tisReadonly(): boolean | IMarkdownString {\n\t\treturn true;\n\t}\n\n\tprivate _hasLanguageSetExplicitly: boolean = false;\n\tget hasLanguageSetExplicitly(): boolean { return this._hasLanguageSetExplicitly; }\n\n\tsetLanguageId(languageId: string, source?: string): void {\n\n\t\t// Remember that an explicit language was set\n\t\tthis._hasLanguageSetExplicitly = true;\n\n\t\tthis.setLanguageIdInternal(languageId, source);\n\t}\n\n\tprivate setLanguageIdInternal(languageId: string, source?: string): void {\n\t\tif (!this.isResolved()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!languageId || languageId === this.textEditorModel.getLanguageId()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.textEditorModel.setLanguage(this.languageService.createById(languageId), source);\n\t}\n\n\tprotected installModelListeners(model: ITextModel): void {\n\n\t\t// Setup listener for lower level language changes\n\t\tconst disposable = this._register(model.onDidChangeLanguage((e) => {\n\t\t\tif (e.source === LanguageDetectionLanguageEventSource) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._hasLanguageSetExplicitly = true;\n\t\t\tdisposable.dispose();\n\t\t}));\n\t}\n\n\tgetLanguageId(): string | undefined {\n\t\treturn this.textEditorModel?.getLanguageId();\n\t}\n\n\tprotected autoDetectLanguage(): Promise<void> {\n\t\treturn this.autoDetectLanguageThrottler.trigger(() => this.doAutoDetectLanguage());\n\t}\n\n\tprivate async doAutoDetectLanguage(): Promise<void> {\n\t\tif (\n\t\t\tthis.hasLanguageSetExplicitly || \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// skip detection when the user has made an explicit choice on the language\n\t\t\t!this.textEditorModelHandle ||\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// require a URI to run the detection for\n\t\t\t!this.languageDetectionService.isEnabledForLanguage(this.getLanguageId() ?? PLAINTEXT_LANGUAGE_ID)\t// require a valid language that is enlisted for detection\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst lang = await this.languageDetectionService.detectLanguage(this.textEditorModelHandle);\n\t\tconst prevLang = this.getLanguageId();\n\t\tif (lang && lang !== prevLang && !this.isDisposed()) {\n\t\t\tthis.setLanguageIdInternal(lang, LanguageDetectionLanguageEventSource);\n\t\t\tconst languageName = this.languageService.getLanguageName(lang);\n\t\t\tthis.accessibilityService.alert(localize('languageAutoDetected', \"Language {0} was automatically detected and set as the language mode.\", languageName ?? lang));\n\t\t}\n\t}\n\n\t/**\n\t * Creates the text editor model with the provided value, optional preferred language\n\t * (can be comma separated for multiple values) and optional resource URL.\n\t */\n\tprotected createTextEditorModel(value: ITextBufferFactory, resource: URI | undefined, preferredLanguageId?: string): ITextModel {\n\t\tconst firstLineText = this.getFirstLineText(value);\n\t\tconst languageSelection = this.getOrCreateLanguage(resource, this.languageService, preferredLanguageId, firstLineText);\n\n\t\treturn this.doCreateTextEditorModel(value, languageSelection, resource);\n\t}\n\n\tprivate doCreateTextEditorModel(value: ITextBufferFactory, languageSelection: ILanguageSelection, resource: URI | undefined): ITextModel {\n\t\tlet model = resource && this.modelService.getModel(resource);\n\t\tif (!model) {\n\t\t\tmodel = this.modelService.createModel(value, languageSelection, resource);\n\t\t\tthis.createdEditorModel = true;\n\n\t\t\t// Make sure we clean up when this model gets disposed\n\t\t\tthis.registerModelDisposeListener(model);\n\t\t} else {\n\t\t\tthis.updateTextEditorModel(value, languageSelection.languageId);\n\t\t}\n\n\t\tthis.textEditorModelHandle = model.uri;\n\n\t\treturn model;\n\t}\n\n\tprotected getFirstLineText(value: ITextBufferFactory | ITextModel): string {\n\n\t\t// text buffer factory\n\t\tconst textBufferFactory = value as ITextBufferFactory;\n\t\tif (typeof textBufferFactory.getFirstLineText === 'function') {\n\t\t\treturn textBufferFactory.getFirstLineText(ModelConstants.FIRST_LINE_DETECTION_LENGTH_LIMIT);\n\t\t}\n\n\t\t// text model\n\t\tconst textSnapshot = value as ITextModel;\n\t\treturn textSnapshot.getLineContent(1).substr(0, ModelConstants.FIRST_LINE_DETECTION_LENGTH_LIMIT);\n\t}\n\n\t/**\n\t * Gets the language for the given identifier. Subclasses can override to provide their own implementation of this lookup.\n\t *\n\t * @param firstLineText optional first line of the text buffer to set the language on. This can be used to guess a language from content.\n\t */\n\tprotected getOrCreateLanguage(resource: URI | undefined, languageService: ILanguageService, preferredLanguage: string | undefined, firstLineText?: string): ILanguageSelection {\n\n\t\t// lookup language via resource path if the provided language is unspecific\n\t\tif (!preferredLanguage || preferredLanguage === PLAINTEXT_LANGUAGE_ID) {\n\t\t\treturn languageService.createByFilepathOrFirstLine(resource ?? null, firstLineText);\n\t\t}\n\n\t\t// otherwise take the preferred language for granted\n\t\treturn languageService.createById(preferredLanguage);\n\t}\n\n\t/**\n\t * Updates the text editor model with the provided value. If the value is the same as the model has, this is a no-op.\n\t */\n\tupdateTextEditorModel(newValue?: ITextBufferFactory, preferredLanguageId?: string): void {\n\t\tif (!this.isResolved()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// contents\n\t\tif (newValue) {\n\t\t\tthis.modelService.updateModel(this.textEditorModel, newValue);\n\t\t}\n\n\t\t// language (only if specific and changed)\n\t\tif (preferredLanguageId && preferredLanguageId !== PLAINTEXT_LANGUAGE_ID && this.textEditorModel.getLanguageId() !== preferredLanguageId) {\n\t\t\tthis.textEditorModel.setLanguage(this.languageService.createById(preferredLanguageId));\n\t\t}\n\t}\n\n\tcreateSnapshot(this: IResolvedTextEditorModel): ITextSnapshot;\n\tcreateSnapshot(this: ITextEditorModel): ITextSnapshot | null;\n\tcreateSnapshot(): ITextSnapshot | null {\n\t\tif (!this.textEditorModel) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.textEditorModel.createSnapshot(true /* preserve BOM */);\n\t}\n\n\toverride isResolved(): this is IResolvedTextEditorModel {\n\t\treturn !!this.textEditorModelHandle;\n\t}\n\n\toverride dispose(): void {\n\t\tthis.modelDisposeListener.dispose(); // dispose this first because it will trigger another dispose() otherwise\n\n\t\tif (this.textEditorModelHandle && this.createdEditorModel) {\n\t\t\tthis.modelService.destroyModel(this.textEditorModelHandle);\n\t\t}\n\n\t\tthis.textEditorModelHandle = undefined;\n\t\tthis.createdEditorModel = false;\n\n\t\tsuper.dispose();\n\t}\n}\n"]}