{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/common/editor/binaryEditorModel.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAOhG;;OAEG;IACI,IAAM,IAAI,GAAV,MAAM,IAAkB,SAAQ,iBAAG;QAOzC,YACU,QAAa,EACL,CAAY,EACf,CAAiC;YAE/C,KAAK,EAAE,CAAC;YAJC,aAAQ,GAAR,QAAQ,CAAK;YACL,MAAC,GAAD,CAAC,CAAW;YACE,MAAC,GAAD,CAAC,CAAe;YAR/B,MAAC,GAAM,UAAG,CAAG,MAAM,CAAC;QAWrC,CAAC;QAED;;WAEG;QACH,OAAO;YACN,OAAO,IAAI,CAAC,CAAC,CAAI;QAClB,CAAC;QAED;;WAEG;QACH,OAAO;YACN,OAAO,IAAI,CAAC,CAAC,CAAI;QAClB,CAAC;QAED;;WAEG;QACH,OAAO;YACN,OAAO,IAAI,CAAC,CAAC,CAAI;QAClB,CAAC;QAED;;WAEG;QACH,OAAO;YACN,OAAO,IAAI,CAAC,CAAC,CAAI;QAClB,CAAC;QAEQ,KAAK,CAAC,OAAO;YAErB,0DAA0D;YAC1D,IAAI,IAAI,CAAC,CAAC,CAAW,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;gBAChD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,CAAC,CAAW,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACxD,IAAI,CAAC,CAAC,GAAM,IAAI,CAAC,IAAI,CAAC;gBACtB,IAAI,OAAO,IAAI,CAAC,IAAI,KAAK,QAAQ,EAAE;oBAClC,IAAI,CAAC,CAAC,GAAM,IAAI,CAAC,IAAI,CAAC;iBACtB;aACD;YAED,OAAO,KAAK,CAAC,OAAO,EAAE,CAAC;QACxB,CAAC;KACD,CAAA;IAxDY,oBAAI;mBAAJ,IAAI;QAUd,WAAA,WAAG,CAAA;OAVO,IAAI,CAwDhB","file":"binaryEditorModel.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { EditorModel } from 'vs/workbench/common/editor/editorModel';\nimport { URI } from 'vs/base/common/uri';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { Mimes } from 'vs/base/common/mime';\n\n/**\n * An editor model that just represents a resource that can be loaded.\n */\nexport class BinaryEditorModel extends EditorModel {\n\n\tprivate readonly mime = Mimes.binary;\n\n\tprivate size: number | undefined;\n\tprivate etag: string | undefined;\n\n\tconstructor(\n\t\treadonly resource: URI,\n\t\tprivate readonly name: string,\n\t\t@IFileService private readonly fileService: IFileService\n\t) {\n\t\tsuper();\n\t}\n\n\t/**\n\t * The name of the binary resource.\n\t */\n\tgetName(): string {\n\t\treturn this.name;\n\t}\n\n\t/**\n\t * The size of the binary resource if known.\n\t */\n\tgetSize(): number | undefined {\n\t\treturn this.size;\n\t}\n\n\t/**\n\t * The mime of the binary resource if known.\n\t */\n\tgetMime(): string {\n\t\treturn this.mime;\n\t}\n\n\t/**\n\t * The etag of the binary resource if known.\n\t */\n\tgetETag(): string | undefined {\n\t\treturn this.etag;\n\t}\n\n\toverride async resolve(): Promise<void> {\n\n\t\t// Make sure to resolve up to date stat for file resources\n\t\tif (this.fileService.hasProvider(this.resource)) {\n\t\t\tconst stat = await this.fileService.stat(this.resource);\n\t\t\tthis.etag = stat.etag;\n\t\t\tif (typeof stat.size === 'number') {\n\t\t\t\tthis.size = stat.size;\n\t\t\t}\n\t\t}\n\n\t\treturn super.resolve();\n\t}\n}\n"]}