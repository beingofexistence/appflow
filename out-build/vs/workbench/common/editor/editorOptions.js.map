{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/common/editor/editorOptions.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOhG,SAAgB,sBAAsB,CAAC,OAA2B,EAAE,MAAe,EAAE,UAAsB;QAC1G,IAAI,OAAO,GAAG,KAAK,CAAC;QAEpB,4BAA4B;QAC5B,MAAM,SAAS,GAAG,sBAAsB,CAAC,OAAO,CAAC,CAAC;QAClD,IAAI,IAAA,YAAG,EAAmB,SAAS,CAAC,EAAE;YACrC,MAAM,CAAC,gBAAgB,CAAC,SAAS,CAAC,CAAC;YAEnC,OAAO,GAAG,IAAI,CAAC;SACf;QAED,2BAA2B;QAC3B,IAAI,OAAO,CAAC,SAAS,EAAE;YACtB,MAAM,KAAK,GAAW;gBACrB,eAAe,EAAE,OAAO,CAAC,SAAS,CAAC,eAAe;gBAClD,WAAW,EAAE,OAAO,CAAC,SAAS,CAAC,WAAW;gBAC1C,aAAa,EAAE,OAAO,CAAC,SAAS,CAAC,aAAa,IAAI,OAAO,CAAC,SAAS,CAAC,eAAe;gBACnF,SAAS,EAAE,OAAO,CAAC,SAAS,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS,CAAC,WAAW;aACvE,CAAC;YAEF,sDAAsD;YACtD,iDAAiD;YACjD,oDAAoD;YACpD,0BAA0B;YAC1B,MAAM,CAAC,YAAY,CAAC,KAAK,EAAE,OAAO,CAAC,eAAe,gEAAwC,CAAC,CAAC;YAE5F,mBAAmB;YACnB,IAAI,OAAO,CAAC,mBAAmB,kDAA0C,EAAE;gBAC1E,MAAM,CAAC,kBAAkB,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;aAC7C;iBAAM,IAAI,OAAO,CAAC,mBAAmB,mEAA2D,EAAE;gBAClG,MAAM,CAAC,mCAAmC,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;aAC9D;iBAAM,IAAI,OAAO,CAAC,mBAAmB,kEAA0D,EAAE;gBACjG,MAAM,CAAC,oCAAoC,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;aAC/D;iBAAM;gBACN,MAAM,CAAC,mBAAmB,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;aAC9C;YAED,OAAO,GAAG,IAAI,CAAC;SACf;QAED,OAAO,OAAO,CAAC;IAChB,CAAC;IAzCD,wDAyCC;IAED,SAAS,sBAAsB,CAAC,OAA2B;QAE1D,6DAA6D;QAC7D,IAAI,CAAC,OAAO,CAAC,SAAS,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;YAC7C,OAAO,OAAO,CAAC,SAAS,CAAC;SACzB;QAED,8DAA8D;QAC9D,0DAA0D;QAC1D,2DAA2D;QAC3D,MAAM,sBAAsB,GAAG,OAAO,CAAC,SAAiC,CAAC;QACzE,IAAI,sBAAsB,CAAC,QAAQ,EAAE;YACpC,sBAAsB,CAAC,QAAQ,CAAC,WAAW,GAAG,EAAE,CAAC;YAEjD,OAAO,sBAAsB,CAAC;SAC9B;QAED,8DAA8D;QAC9D,gEAAgE;QAChE,MAAM,wBAAwB,GAAG,OAAO,CAAC,SAAiC,CAAC;QAC3E,IAAI,wBAAwB,CAAC,WAAW,EAAE;YACzC,wBAAwB,CAAC,WAAW,GAAG,EAAE,CAAC;SAC1C;QAED,OAAO,wBAAwB,CAAC;IACjC,CAAC","file":"editorOptions.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IRange } from 'vs/editor/common/core/range';\nimport { ICodeEditorViewState, IDiffEditorViewState, IEditor, ScrollType } from 'vs/editor/common/editorCommon';\nimport { ITextEditorOptions, TextEditorSelectionRevealType, TextEditorSelectionSource } from 'vs/platform/editor/common/editor';\nimport { isTextEditorViewState } from 'vs/workbench/common/editor';\n\nexport function applyTextEditorOptions(options: ITextEditorOptions, editor: IEditor, scrollType: ScrollType): boolean {\n\tlet applied = false;\n\n\t// Restore view state if any\n\tconst viewState = massageEditorViewState(options);\n\tif (isTextEditorViewState(viewState)) {\n\t\teditor.restoreViewState(viewState);\n\n\t\tapplied = true;\n\t}\n\n\t// Restore selection if any\n\tif (options.selection) {\n\t\tconst range: IRange = {\n\t\t\tstartLineNumber: options.selection.startLineNumber,\n\t\t\tstartColumn: options.selection.startColumn,\n\t\t\tendLineNumber: options.selection.endLineNumber ?? options.selection.startLineNumber,\n\t\t\tendColumn: options.selection.endColumn ?? options.selection.startColumn\n\t\t};\n\n\t\t// Apply selection with a source so that listeners can\n\t\t// distinguish this selection change from others.\n\t\t// If no source is provided, set a default source to\n\t\t// signal this navigation.\n\t\teditor.setSelection(range, options.selectionSource ?? TextEditorSelectionSource.NAVIGATION);\n\n\t\t// Reveal selection\n\t\tif (options.selectionRevealType === TextEditorSelectionRevealType.NearTop) {\n\t\t\teditor.revealRangeNearTop(range, scrollType);\n\t\t} else if (options.selectionRevealType === TextEditorSelectionRevealType.NearTopIfOutsideViewport) {\n\t\t\teditor.revealRangeNearTopIfOutsideViewport(range, scrollType);\n\t\t} else if (options.selectionRevealType === TextEditorSelectionRevealType.CenterIfOutsideViewport) {\n\t\t\teditor.revealRangeInCenterIfOutsideViewport(range, scrollType);\n\t\t} else {\n\t\t\teditor.revealRangeInCenter(range, scrollType);\n\t\t}\n\n\t\tapplied = true;\n\t}\n\n\treturn applied;\n}\n\nfunction massageEditorViewState(options: ITextEditorOptions): object | undefined {\n\n\t// Without a selection or view state, just return immediately\n\tif (!options.selection || !options.viewState) {\n\t\treturn options.viewState;\n\t}\n\n\t// Diff editor: since we have an explicit selection, clear the\n\t// cursor state from the modified side where the selection\n\t// applies. This avoids a redundant selection change event.\n\tconst candidateDiffViewState = options.viewState as IDiffEditorViewState;\n\tif (candidateDiffViewState.modified) {\n\t\tcandidateDiffViewState.modified.cursorState = [];\n\n\t\treturn candidateDiffViewState;\n\t}\n\n\t// Code editor: since we have an explicit selection, clear the\n\t// cursor state. This avoids a redundant selection change event.\n\tconst candidateEditorViewState = options.viewState as ICodeEditorViewState;\n\tif (candidateEditorViewState.cursorState) {\n\t\tcandidateEditorViewState.cursorState = [];\n\t}\n\n\treturn candidateEditorViewState;\n}\n"]}