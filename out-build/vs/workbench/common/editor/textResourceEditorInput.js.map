{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/common/editor/textResourceEditorInput.ts"],"names":[],"mappings":"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","file":"textResourceEditorInput.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DEFAULT_EDITOR_ASSOCIATION, GroupIdentifier, IRevertOptions, isResourceEditorInput, IUntypedEditorInput } from 'vs/workbench/common/editor';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { AbstractResourceEditorInput } from 'vs/workbench/common/editor/resourceEditorInput';\nimport { URI } from 'vs/base/common/uri';\nimport { ITextFileService, ITextFileSaveOptions, ILanguageSupport } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { Schemas } from 'vs/base/common/network';\nimport { isEqual } from 'vs/base/common/resources';\nimport { ITextEditorModel, ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { TextResourceEditorModel } from 'vs/workbench/common/editor/textResourceEditorModel';\nimport { IReference } from 'vs/base/common/lifecycle';\nimport { createTextBufferFactory } from 'vs/editor/common/model/textModel';\nimport { IFilesConfigurationService } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\n\n/**\n * The base class for all editor inputs that open in text editors.\n */\nexport abstract class AbstractTextResourceEditorInput extends AbstractResourceEditorInput {\n\n\tconstructor(\n\t\tresource: URI,\n\t\tpreferredResource: URI | undefined,\n\t\t@IEditorService protected readonly editorService: IEditorService,\n\t\t@ITextFileService protected readonly textFileService: ITextFileService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IFilesConfigurationService filesConfigurationService: IFilesConfigurationService\n\t) {\n\t\tsuper(resource, preferredResource, labelService, fileService, filesConfigurationService);\n\t}\n\n\toverride save(group: GroupIdentifier, options?: ITextFileSaveOptions): Promise<IUntypedEditorInput | undefined> {\n\n\t\t// If this is neither an `untitled` resource, nor a resource\n\t\t// we can handle with the file service, we can only \"Save As...\"\n\t\tif (this.resource.scheme !== Schemas.untitled && !this.fileService.hasProvider(this.resource)) {\n\t\t\treturn this.saveAs(group, options);\n\t\t}\n\n\t\t// Normal save\n\t\treturn this.doSave(options, false, group);\n\t}\n\n\toverride saveAs(group: GroupIdentifier, options?: ITextFileSaveOptions): Promise<IUntypedEditorInput | undefined> {\n\t\treturn this.doSave(options, true, group);\n\t}\n\n\tprivate async doSave(options: ITextFileSaveOptions | undefined, saveAs: boolean, group: GroupIdentifier | undefined): Promise<IUntypedEditorInput | undefined> {\n\n\t\t// Save / Save As\n\t\tlet target: URI | undefined;\n\t\tif (saveAs) {\n\t\t\ttarget = await this.textFileService.saveAs(this.resource, undefined, { ...options, suggestedTarget: this.preferredResource });\n\t\t} else {\n\t\t\ttarget = await this.textFileService.save(this.resource, options);\n\t\t}\n\n\t\tif (!target) {\n\t\t\treturn undefined; // save cancelled\n\t\t}\n\n\t\treturn { resource: target };\n\t}\n\n\toverride async revert(group: GroupIdentifier, options?: IRevertOptions): Promise<void> {\n\t\tawait this.textFileService.revert(this.resource, options);\n\t}\n}\n\n/**\n * A read-only text editor input whos contents are made of the provided resource that points to an existing\n * code editor model.\n */\nexport class TextResourceEditorInput extends AbstractTextResourceEditorInput implements ILanguageSupport {\n\n\tstatic readonly ID: string = 'workbench.editors.resourceEditorInput';\n\n\toverride get typeId(): string {\n\t\treturn TextResourceEditorInput.ID;\n\t}\n\n\toverride get editorId(): string | undefined {\n\t\treturn DEFAULT_EDITOR_ASSOCIATION.id;\n\t}\n\n\tprivate cachedModel: TextResourceEditorModel | undefined = undefined;\n\tprivate modelReference: Promise<IReference<ITextEditorModel>> | undefined = undefined;\n\n\tconstructor(\n\t\tresource: URI,\n\t\tprivate name: string | undefined,\n\t\tprivate description: string | undefined,\n\t\tprivate preferredLanguageId: string | undefined,\n\t\tprivate preferredContents: string | undefined,\n\t\t@ITextModelService private readonly textModelResolverService: ITextModelService,\n\t\t@ITextFileService textFileService: ITextFileService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IFileService fileService: IFileService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@IFilesConfigurationService filesConfigurationService: IFilesConfigurationService\n\t) {\n\t\tsuper(resource, undefined, editorService, textFileService, labelService, fileService, filesConfigurationService);\n\t}\n\n\toverride getName(): string {\n\t\treturn this.name || super.getName();\n\t}\n\n\tsetName(name: string): void {\n\t\tif (this.name !== name) {\n\t\t\tthis.name = name;\n\n\t\t\tthis._onDidChangeLabel.fire();\n\t\t}\n\t}\n\n\toverride getDescription(): string | undefined {\n\t\treturn this.description;\n\t}\n\n\tsetDescription(description: string): void {\n\t\tif (this.description !== description) {\n\t\t\tthis.description = description;\n\n\t\t\tthis._onDidChangeLabel.fire();\n\t\t}\n\t}\n\n\tsetLanguageId(languageId: string, source?: string): void {\n\t\tthis.setPreferredLanguageId(languageId);\n\n\t\tthis.cachedModel?.setLanguageId(languageId, source);\n\t}\n\n\tsetPreferredLanguageId(languageId: string): void {\n\t\tthis.preferredLanguageId = languageId;\n\t}\n\n\tsetPreferredContents(contents: string): void {\n\t\tthis.preferredContents = contents;\n\t}\n\n\toverride async resolve(): Promise<ITextEditorModel> {\n\n\t\t// Unset preferred contents and language after resolving\n\t\t// once to prevent these properties to stick. We still\n\t\t// want the user to change the language in the editor\n\t\t// and want to show updated contents (if any) in future\n\t\t// `resolve` calls.\n\t\tconst preferredContents = this.preferredContents;\n\t\tconst preferredLanguageId = this.preferredLanguageId;\n\t\tthis.preferredContents = undefined;\n\t\tthis.preferredLanguageId = undefined;\n\n\t\tif (!this.modelReference) {\n\t\t\tthis.modelReference = this.textModelResolverService.createModelReference(this.resource);\n\t\t}\n\n\t\tconst ref = await this.modelReference;\n\n\t\t// Ensure the resolved model is of expected type\n\t\tconst model = ref.object;\n\t\tif (!(model instanceof TextResourceEditorModel)) {\n\t\t\tref.dispose();\n\t\t\tthis.modelReference = undefined;\n\n\t\t\tthrow new Error(`Unexpected model for TextResourceEditorInput: ${this.resource}`);\n\t\t}\n\n\t\tthis.cachedModel = model;\n\n\t\t// Set contents and language if preferred\n\t\tif (typeof preferredContents === 'string' || typeof preferredLanguageId === 'string') {\n\t\t\tmodel.updateTextEditorModel(typeof preferredContents === 'string' ? createTextBufferFactory(preferredContents) : undefined, preferredLanguageId);\n\t\t}\n\n\t\treturn model;\n\t}\n\n\toverride matches(otherInput: EditorInput | IUntypedEditorInput): boolean {\n\t\tif (this === otherInput) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (otherInput instanceof TextResourceEditorInput) {\n\t\t\treturn isEqual(otherInput.resource, this.resource);\n\t\t}\n\n\t\tif (isResourceEditorInput(otherInput)) {\n\t\t\treturn super.matches(otherInput);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\toverride dispose(): void {\n\t\tif (this.modelReference) {\n\t\t\tthis.modelReference.then(ref => ref.dispose());\n\t\t\tthis.modelReference = undefined;\n\t\t}\n\n\t\tthis.cachedModel = undefined;\n\n\t\tsuper.dispose();\n\t}\n}\n"]}