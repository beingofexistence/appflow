{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/common/dialogs.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IA4BhG,MAAa,IAAa,SAAQ,eAAG;QAArC;;YAEU,YAAO,GAAsB,EAAE,CAAC;YAExB,MAAC,GAAmB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAY,CAAC,CAAC;YAChE,qBAAgB,GAAG,IAAI,CAAC,CAAC,CAAiB,KAAK,CAAC;YAExC,MAAC,GAAkB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAY,CAAC,CAAC;YAC/D,oBAAe,GAAG,IAAI,CAAC,CAAC,CAAgB,KAAK,CAAC;QAsBxD,CAAC;QApBA,IAAI,CAAC,MAAmB;YACvB,MAAM,OAAO,GAAG,IAAI,WAAG,EAAyC,CAAC;YAEjE,MAAM,IAAI,GAAoB;gBAC7B,IAAI,EAAE,MAAM;gBACZ,KAAK,EAAE,MAAM,CAAC,EAAE;oBACf,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;oBAC1B,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;oBACzB,IAAI,CAAC,CAAC,CAAgB,IAAI,EAAE,CAAC;gBAC9B,CAAC;aACD,CAAC;YAEF,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACxB,IAAI,CAAC,CAAC,CAAiB,IAAI,EAAE,CAAC;YAE9B,OAAO;gBACN,IAAI;gBACJ,MAAM,EAAE,OAAO,CAAC,CAAC;aACjB,CAAC;QACH,CAAC;KACD;IA9BD,oBA8BC","file":"dialogs.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DeferredPromise } from 'vs/base/common/async';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IDialogArgs, IDialogResult } from 'vs/platform/dialogs/common/dialogs';\n\nexport interface IDialogViewItem {\n\treadonly args: IDialogArgs;\n\n\tclose(result?: IDialogResult): void;\n}\n\nexport interface IDialogHandle {\n\treadonly item: IDialogViewItem;\n\treadonly result: Promise<IDialogResult | undefined>;\n}\n\nexport interface IDialogsModel {\n\n\treadonly onWillShowDialog: Event<void>;\n\treadonly onDidShowDialog: Event<void>;\n\n\treadonly dialogs: IDialogViewItem[];\n\n\tshow(dialog: IDialogArgs): IDialogHandle;\n}\n\nexport class DialogsModel extends Disposable implements IDialogsModel {\n\n\treadonly dialogs: IDialogViewItem[] = [];\n\n\tprivate readonly _onWillShowDialog = this._register(new Emitter<void>());\n\treadonly onWillShowDialog = this._onWillShowDialog.event;\n\n\tprivate readonly _onDidShowDialog = this._register(new Emitter<void>());\n\treadonly onDidShowDialog = this._onDidShowDialog.event;\n\n\tshow(dialog: IDialogArgs): IDialogHandle {\n\t\tconst promise = new DeferredPromise<IDialogResult | undefined>();\n\n\t\tconst item: IDialogViewItem = {\n\t\t\targs: dialog,\n\t\t\tclose: result => {\n\t\t\t\tthis.dialogs.splice(0, 1);\n\t\t\t\tpromise.complete(result);\n\t\t\t\tthis._onDidShowDialog.fire();\n\t\t\t}\n\t\t};\n\n\t\tthis.dialogs.push(item);\n\t\tthis._onWillShowDialog.fire();\n\n\t\treturn {\n\t\t\titem,\n\t\t\tresult: promise.p\n\t\t};\n\t}\n}\n"]}