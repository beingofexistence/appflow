{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/common/resources.ts"],"names":[],"mappings":"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","file":"resources.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { equals } from 'vs/base/common/objects';\nimport { isAbsolute } from 'vs/base/common/path';\nimport { Emitter } from 'vs/base/common/event';\nimport { relativePath } from 'vs/base/common/resources';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ParsedExpression, IExpression, parse } from 'vs/base/common/glob';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IConfigurationService, IConfigurationChangeEvent } from 'vs/platform/configuration/common/configuration';\nimport { Schemas } from 'vs/base/common/network';\nimport { ResourceSet } from 'vs/base/common/map';\nimport { getDriveLetter } from 'vs/base/common/extpath';\n\ninterface IConfiguredExpression {\n\treadonly expression: IExpression;\n\treadonly hasAbsolutePath: boolean;\n}\n\nexport class ResourceGlobMatcher extends Disposable {\n\n\tprivate static readonly NO_FOLDER = null;\n\n\tprivate readonly _onExpressionChange = this._register(new Emitter<void>());\n\treadonly onExpressionChange = this._onExpressionChange.event;\n\n\tprivate readonly mapFolderToParsedExpression = new Map<string | null, ParsedExpression>();\n\tprivate readonly mapFolderToConfiguredExpression = new Map<string | null, IConfiguredExpression>();\n\n\tconstructor(\n\t\tprivate getExpression: (folder?: URI) => IExpression | undefined,\n\t\tprivate shouldUpdate: (event: IConfigurationChangeEvent) => boolean,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tthis.updateExpressions(false);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (this.shouldUpdate(e)) {\n\t\t\t\tthis.updateExpressions(true);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.contextService.onDidChangeWorkspaceFolders(() => this.updateExpressions(true)));\n\t}\n\n\tprivate updateExpressions(fromEvent: boolean): void {\n\t\tlet changed = false;\n\n\t\t// Add expressions per workspaces that got added\n\t\tfor (const folder of this.contextService.getWorkspace().folders) {\n\t\t\tconst folderUriStr = folder.uri.toString();\n\n\t\t\tconst newExpression = this.doGetExpression(folder.uri);\n\t\t\tconst currentExpression = this.mapFolderToConfiguredExpression.get(folderUriStr);\n\n\t\t\tif (newExpression) {\n\t\t\t\tif (!currentExpression || !equals(currentExpression.expression, newExpression.expression)) {\n\t\t\t\t\tchanged = true;\n\n\t\t\t\t\tthis.mapFolderToParsedExpression.set(folderUriStr, parse(newExpression.expression));\n\t\t\t\t\tthis.mapFolderToConfiguredExpression.set(folderUriStr, newExpression);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (currentExpression) {\n\t\t\t\t\tchanged = true;\n\n\t\t\t\t\tthis.mapFolderToParsedExpression.delete(folderUriStr);\n\t\t\t\t\tthis.mapFolderToConfiguredExpression.delete(folderUriStr);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Remove expressions per workspace no longer present\n\t\tconst foldersMap = new ResourceSet(this.contextService.getWorkspace().folders.map(folder => folder.uri));\n\t\tfor (const [folder] of this.mapFolderToConfiguredExpression) {\n\t\t\tif (folder === ResourceGlobMatcher.NO_FOLDER) {\n\t\t\t\tcontinue; // always keep this one\n\t\t\t}\n\n\t\t\tif (!foldersMap.has(URI.parse(folder))) {\n\t\t\t\tthis.mapFolderToParsedExpression.delete(folder);\n\t\t\t\tthis.mapFolderToConfiguredExpression.delete(folder);\n\n\t\t\t\tchanged = true;\n\t\t\t}\n\t\t}\n\n\t\t// Always set for resources outside workspace as well\n\t\tconst globalNewExpression = this.doGetExpression(undefined);\n\t\tconst globalCurrentExpression = this.mapFolderToConfiguredExpression.get(ResourceGlobMatcher.NO_FOLDER);\n\t\tif (globalNewExpression) {\n\t\t\tif (!globalCurrentExpression || !equals(globalCurrentExpression.expression, globalNewExpression.expression)) {\n\t\t\t\tchanged = true;\n\n\t\t\t\tthis.mapFolderToParsedExpression.set(ResourceGlobMatcher.NO_FOLDER, parse(globalNewExpression.expression));\n\t\t\t\tthis.mapFolderToConfiguredExpression.set(ResourceGlobMatcher.NO_FOLDER, globalNewExpression);\n\t\t\t}\n\t\t} else {\n\t\t\tif (globalCurrentExpression) {\n\t\t\t\tchanged = true;\n\n\t\t\t\tthis.mapFolderToParsedExpression.delete(ResourceGlobMatcher.NO_FOLDER);\n\t\t\t\tthis.mapFolderToConfiguredExpression.delete(ResourceGlobMatcher.NO_FOLDER);\n\t\t\t}\n\t\t}\n\n\t\tif (fromEvent && changed) {\n\t\t\tthis._onExpressionChange.fire();\n\t\t}\n\t}\n\n\tprivate doGetExpression(resource: URI | undefined): IConfiguredExpression | undefined {\n\t\tconst expression = this.getExpression(resource);\n\t\tif (!expression) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst keys = Object.keys(expression);\n\t\tif (keys.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet hasAbsolutePath = false;\n\n\t\t// Check the expression for absolute paths/globs\n\t\t// and specifically for Windows, make sure the\n\t\t// drive letter is lowercased, because we later\n\t\t// check with `URI.fsPath` which is always putting\n\t\t// the drive letter lowercased.\n\n\t\tconst massagedExpression: IExpression = Object.create(null);\n\t\tfor (const key of keys) {\n\t\t\tif (!hasAbsolutePath) {\n\t\t\t\thasAbsolutePath = isAbsolute(key);\n\t\t\t}\n\n\t\t\tlet massagedKey = key;\n\n\t\t\tconst driveLetter = getDriveLetter(massagedKey, true /* probe for windows */);\n\t\t\tif (driveLetter) {\n\t\t\t\tconst driveLetterLower = driveLetter.toLowerCase();\n\t\t\t\tif (driveLetter !== driveLetter.toLowerCase()) {\n\t\t\t\t\tmassagedKey = `${driveLetterLower}${massagedKey.substring(1)}`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmassagedExpression[massagedKey] = expression[key];\n\t\t}\n\n\t\treturn {\n\t\t\texpression: massagedExpression,\n\t\t\thasAbsolutePath\n\t\t};\n\t}\n\n\tmatches(\n\t\tresource: URI,\n\t\thasSibling?: (name: string) => boolean\n\t): boolean {\n\t\tif (this.mapFolderToParsedExpression.size === 0) {\n\t\t\treturn false; // return early: no expression for this matcher\n\t\t}\n\n\t\tconst folder = this.contextService.getWorkspaceFolder(resource);\n\t\tlet expressionForFolder: ParsedExpression | undefined;\n\t\tlet expressionConfigForFolder: IConfiguredExpression | undefined;\n\t\tif (folder && this.mapFolderToParsedExpression.has(folder.uri.toString())) {\n\t\t\texpressionForFolder = this.mapFolderToParsedExpression.get(folder.uri.toString());\n\t\t\texpressionConfigForFolder = this.mapFolderToConfiguredExpression.get(folder.uri.toString());\n\t\t} else {\n\t\t\texpressionForFolder = this.mapFolderToParsedExpression.get(ResourceGlobMatcher.NO_FOLDER);\n\t\t\texpressionConfigForFolder = this.mapFolderToConfiguredExpression.get(ResourceGlobMatcher.NO_FOLDER);\n\t\t}\n\n\t\tif (!expressionForFolder) {\n\t\t\treturn false; // return early: no expression for this resource\n\t\t}\n\n\t\t// If the resource if from a workspace, convert its absolute path to a relative\n\t\t// path so that glob patterns have a higher probability to match. For example\n\t\t// a glob pattern of \"src/**\" will not match on an absolute path \"/folder/src/file.txt\"\n\t\t// but can match on \"src/file.txt\"\n\n\t\tlet resourcePathToMatch: string | undefined;\n\t\tif (folder) {\n\t\t\tresourcePathToMatch = relativePath(folder.uri, resource);\n\t\t} else {\n\t\t\tresourcePathToMatch = this.uriToPath(resource);\n\t\t}\n\n\t\tif (typeof resourcePathToMatch === 'string' && !!expressionForFolder(resourcePathToMatch, undefined, hasSibling)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// If the configured expression has an absolute path, we also check for absolute paths\n\t\t// to match, otherwise we potentially miss out on matches. We only do that if we previously\n\t\t// matched on the relative path.\n\n\t\tif (resourcePathToMatch !== this.uriToPath(resource) && expressionConfigForFolder?.hasAbsolutePath) {\n\t\t\treturn !!expressionForFolder(this.uriToPath(resource), undefined, hasSibling);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate uriToPath(uri: URI): string {\n\t\tif (uri.scheme === Schemas.file) {\n\t\t\treturn uri.fsPath;\n\t\t}\n\n\t\treturn uri.path;\n\t}\n}\n"]}