{"version":3,"sources":["vs/workbench/electron-sandbox/desktop.main.ts"],"names":[],"mappings":"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","file":"desktop.main.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport product from 'vs/platform/product/common/product';\nimport { INativeWindowConfiguration, IWindowsConfiguration } from 'vs/platform/window/common/window';\nimport { Workbench } from 'vs/workbench/browser/workbench';\nimport { NativeWindow } from 'vs/workbench/electron-sandbox/window';\nimport { setFullscreen } from 'vs/base/browser/browser';\nimport { domContentLoaded } from 'vs/base/browser/dom';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { URI } from 'vs/base/common/uri';\nimport { WorkspaceService } from 'vs/workbench/services/configuration/browser/configurationService';\nimport { INativeWorkbenchEnvironmentService, NativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { ILoggerService, ILogService, LogLevel } from 'vs/platform/log/common/log';\nimport { NativeWorkbenchStorageService } from 'vs/workbench/services/storage/electron-sandbox/storageService';\nimport { IWorkspaceContextService, isSingleFolderWorkspaceIdentifier, isWorkspaceIdentifier, IAnyWorkspaceIdentifier, reviveIdentifier, toWorkspaceIdentifier } from 'vs/platform/workspace/common/workspace';\nimport { IWorkbenchConfigurationService } from 'vs/workbench/services/configuration/common/configuration';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ISharedProcessService } from 'vs/platform/ipc/electron-sandbox/services';\nimport { IMainProcessService } from 'vs/platform/ipc/common/mainProcessService';\nimport { SharedProcessService } from 'vs/workbench/services/sharedProcess/electron-sandbox/sharedProcessService';\nimport { RemoteAuthorityResolverService } from 'vs/platform/remote/electron-sandbox/remoteAuthorityResolverService';\nimport { IRemoteAuthorityResolverService, RemoteConnectionType } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { RemoteAgentService } from 'vs/workbench/services/remote/electron-sandbox/remoteAgentService';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { IWorkbenchFileService } from 'vs/workbench/services/files/common/files';\nimport { RemoteFileSystemProviderClient } from 'vs/workbench/services/remote/common/remoteFileSystemProviderClient';\nimport { ConfigurationCache } from 'vs/workbench/services/configuration/common/configurationCache';\nimport { ISignService } from 'vs/platform/sign/common/sign';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { UriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentityService';\nimport { INativeKeyboardLayoutService, NativeKeyboardLayoutService } from 'vs/workbench/services/keybinding/electron-sandbox/nativeKeyboardLayoutService';\nimport { ElectronIPCMainProcessService } from 'vs/platform/ipc/electron-sandbox/mainProcessService';\nimport { LoggerChannelClient } from 'vs/platform/log/common/logIpc';\nimport { ProxyChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { NativeLogService } from 'vs/workbench/services/log/electron-sandbox/logService';\nimport { WorkspaceTrustEnablementService, WorkspaceTrustManagementService } from 'vs/workbench/services/workspaces/common/workspaceTrust';\nimport { IWorkspaceTrustEnablementService, IWorkspaceTrustManagementService } from 'vs/platform/workspace/common/workspaceTrust';\nimport { safeStringify } from 'vs/base/common/objects';\nimport { IUtilityProcessWorkerWorkbenchService, UtilityProcessWorkerWorkbenchService } from 'vs/workbench/services/utilityProcess/electron-sandbox/utilityProcessWorkerWorkbenchService';\nimport { isCI, isMacintosh } from 'vs/base/common/platform';\nimport { Schemas } from 'vs/base/common/network';\nimport { DiskFileSystemProvider } from 'vs/workbench/services/files/electron-sandbox/diskFileSystemProvider';\nimport { FileUserDataProvider } from 'vs/platform/userData/common/fileUserDataProvider';\nimport { IUserDataProfilesService, reviveProfile } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { UserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfileIpc';\nimport { PolicyChannelClient } from 'vs/platform/policy/common/policyIpc';\nimport { IPolicyService, NullPolicyService } from 'vs/platform/policy/common/policy';\nimport { UserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfileService';\nimport { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\nimport { BrowserSocketFactory } from 'vs/platform/remote/browser/browserSocketFactory';\nimport { RemoteSocketFactoryService, IRemoteSocketFactoryService } from 'vs/platform/remote/common/remoteSocketFactoryService';\nimport { ElectronRemoteResourceLoader } from 'vs/platform/remote/electron-sandbox/electronRemoteResourceLoader';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { applyZoom } from 'vs/platform/window/electron-sandbox/window';\n\nexport class DesktopMain extends Disposable {\n\n\tconstructor(\n\t\tprivate readonly configuration: INativeWindowConfiguration\n\t) {\n\t\tsuper();\n\n\t\tthis.init();\n\t}\n\n\tprivate init(): void {\n\n\t\t// Massage configuration file URIs\n\t\tthis.reviveUris();\n\n\t\t// Apply fullscreen early if configured\n\t\tsetFullscreen(!!this.configuration.fullscreen);\n\t}\n\n\tprivate reviveUris() {\n\n\t\t// Workspace\n\t\tconst workspace = reviveIdentifier(this.configuration.workspace);\n\t\tif (isWorkspaceIdentifier(workspace) || isSingleFolderWorkspaceIdentifier(workspace)) {\n\t\t\tthis.configuration.workspace = workspace;\n\t\t}\n\n\t\t// Files\n\t\tconst filesToWait = this.configuration.filesToWait;\n\t\tconst filesToWaitPaths = filesToWait?.paths;\n\t\tfor (const paths of [filesToWaitPaths, this.configuration.filesToOpenOrCreate, this.configuration.filesToDiff, this.configuration.filesToMerge]) {\n\t\t\tif (Array.isArray(paths)) {\n\t\t\t\tfor (const path of paths) {\n\t\t\t\t\tif (path.fileUri) {\n\t\t\t\t\t\tpath.fileUri = URI.revive(path.fileUri);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (filesToWait) {\n\t\t\tfilesToWait.waitMarkerFileUri = URI.revive(filesToWait.waitMarkerFileUri);\n\t\t}\n\t}\n\n\tasync open(): Promise<void> {\n\n\t\t// Init services and wait for DOM to be ready in parallel\n\t\tconst [services] = await Promise.all([this.initServices(), domContentLoaded()]);\n\n\t\t// Apply zoom level early once we have a configuration service\n\t\t// and before the workbench is created to prevent flickering.\n\t\t// We also need to respect that zoom level can be configured per\n\t\t// workspace, so we need the resolved configuration service.\n\t\t// (fixes https://github.com/microsoft/vscode/issues/187982)\n\t\tthis.applyConfiguredWindowZoomLevel(services.configurationService);\n\n\t\t// Create Workbench\n\t\tconst workbench = new Workbench(document.body, { extraClasses: this.getExtraClasses() }, services.serviceCollection, services.logService);\n\n\t\t// Listeners\n\t\tthis.registerListeners(workbench, services.storageService);\n\n\t\t// Startup\n\t\tconst instantiationService = workbench.startup();\n\n\t\t// Window\n\t\tthis._register(instantiationService.createInstance(NativeWindow));\n\t}\n\n\tprivate applyConfiguredWindowZoomLevel(configurationService: IConfigurationService) {\n\t\tconst windowConfig = configurationService.getValue<IWindowsConfiguration>();\n\t\tconst windowZoomLevel = typeof windowConfig.window?.zoomLevel === 'number' ? windowConfig.window.zoomLevel : 0;\n\n\t\tapplyZoom(windowZoomLevel);\n\t}\n\n\tprivate getExtraClasses(): string[] {\n\t\tif (isMacintosh) {\n\t\t\tif (this.configuration.os.release > '20.0.0') {\n\t\t\t\treturn ['macos-bigsur-or-newer'];\n\t\t\t}\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tprivate registerListeners(workbench: Workbench, storageService: NativeWorkbenchStorageService): void {\n\n\t\t// Workbench Lifecycle\n\t\tthis._register(workbench.onWillShutdown(event => event.join(storageService.close(), { id: 'join.closeStorage', label: localize('join.closeStorage', \"Saving UI state\") })));\n\t\tthis._register(workbench.onDidShutdown(() => this.dispose()));\n\t}\n\n\tprivate async initServices(): Promise<{ serviceCollection: ServiceCollection; logService: ILogService; storageService: NativeWorkbenchStorageService; configurationService: IConfigurationService }> {\n\t\tconst serviceCollection = new ServiceCollection();\n\n\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t//\n\t\t// NOTE: Please do NOT register services here. Use `registerSingleton()`\n\t\t//       from `workbench.common.main.ts` if the service is shared between\n\t\t//       desktop and web or `workbench.desktop.main.ts` if the service\n\t\t//       is desktop only.\n\t\t//\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n\t\t// Main Process\n\t\tconst mainProcessService = this._register(new ElectronIPCMainProcessService(this.configuration.windowId));\n\t\tserviceCollection.set(IMainProcessService, mainProcessService);\n\n\t\t// Policies\n\t\tconst policyService = this.configuration.policiesData ? new PolicyChannelClient(this.configuration.policiesData, mainProcessService.getChannel('policy')) : new NullPolicyService();\n\t\tserviceCollection.set(IPolicyService, policyService);\n\n\t\t// Product\n\t\tconst productService: IProductService = { _serviceBrand: undefined, ...product };\n\t\tserviceCollection.set(IProductService, productService);\n\n\t\t// Environment\n\t\tconst environmentService = new NativeWorkbenchEnvironmentService(this.configuration, productService);\n\t\tserviceCollection.set(INativeWorkbenchEnvironmentService, environmentService);\n\n\t\t// Logger\n\t\tconst loggers = [\n\t\t\t...this.configuration.loggers.global.map(loggerResource => ({ ...loggerResource, resource: URI.revive(loggerResource.resource) })),\n\t\t\t...this.configuration.loggers.window.map(loggerResource => ({ ...loggerResource, resource: URI.revive(loggerResource.resource), hidden: true })),\n\t\t];\n\t\tconst loggerService = new LoggerChannelClient(this.configuration.windowId, this.configuration.logLevel, environmentService.windowLogsPath, loggers, mainProcessService.getChannel('logger'));\n\t\tserviceCollection.set(ILoggerService, loggerService);\n\n\t\t// Log\n\t\tconst logService = this._register(new NativeLogService(loggerService, environmentService));\n\t\tserviceCollection.set(ILogService, logService);\n\t\tif (isCI) {\n\t\t\tlogService.info('workbench#open()'); // marking workbench open helps to diagnose flaky integration/smoke tests\n\t\t}\n\t\tif (logService.getLevel() === LogLevel.Trace) {\n\t\t\tlogService.trace('workbench#open(): with configuration', safeStringify(this.configuration));\n\t\t}\n\n\t\t// Shared Process\n\t\tconst sharedProcessService = new SharedProcessService(this.configuration.windowId, logService);\n\t\tserviceCollection.set(ISharedProcessService, sharedProcessService);\n\n\t\t// Utility Process Worker\n\t\tconst utilityProcessWorkerWorkbenchService = new UtilityProcessWorkerWorkbenchService(this.configuration.windowId, logService, mainProcessService);\n\t\tserviceCollection.set(IUtilityProcessWorkerWorkbenchService, utilityProcessWorkerWorkbenchService);\n\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t//\n\t\t// NOTE: Please do NOT register services here. Use `registerSingleton()`\n\t\t//       from `workbench.common.main.ts` if the service is shared between\n\t\t//       desktop and web or `workbench.desktop.main.ts` if the service\n\t\t//       is desktop only.\n\t\t//\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n\t\t// Sign\n\t\tconst signService = ProxyChannel.toService<ISignService>(mainProcessService.getChannel('sign'));\n\t\tserviceCollection.set(ISignService, signService);\n\n\t\t// Files\n\t\tconst fileService = this._register(new FileService(logService));\n\t\tserviceCollection.set(IWorkbenchFileService, fileService);\n\n\t\t// Remote\n\t\tconst remoteAuthorityResolverService = new RemoteAuthorityResolverService(productService, new ElectronRemoteResourceLoader(environmentService.window.id, mainProcessService, fileService));\n\t\tserviceCollection.set(IRemoteAuthorityResolverService, remoteAuthorityResolverService);\n\n\t\t// Local Files\n\t\tconst diskFileSystemProvider = this._register(new DiskFileSystemProvider(mainProcessService, utilityProcessWorkerWorkbenchService, logService));\n\t\tfileService.registerProvider(Schemas.file, diskFileSystemProvider);\n\n\t\t// URI Identity\n\t\tconst uriIdentityService = new UriIdentityService(fileService);\n\t\tserviceCollection.set(IUriIdentityService, uriIdentityService);\n\n\t\t// User Data Profiles\n\t\tconst userDataProfilesService = new UserDataProfilesService(this.configuration.profiles.all, URI.revive(this.configuration.profiles.home).with({ scheme: environmentService.userRoamingDataHome.scheme }), mainProcessService.getChannel('userDataProfiles'));\n\t\tserviceCollection.set(IUserDataProfilesService, userDataProfilesService);\n\t\tconst userDataProfileService = new UserDataProfileService(reviveProfile(this.configuration.profiles.profile, userDataProfilesService.profilesHome.scheme));\n\t\tserviceCollection.set(IUserDataProfileService, userDataProfileService);\n\n\t\t// Use FileUserDataProvider for user data to\n\t\t// enable atomic read / write operations.\n\t\tfileService.registerProvider(Schemas.vscodeUserData, this._register(new FileUserDataProvider(Schemas.file, diskFileSystemProvider, Schemas.vscodeUserData, userDataProfilesService, uriIdentityService, logService)));\n\n\t\t// Remote Agent\n\t\tconst remoteSocketFactoryService = new RemoteSocketFactoryService();\n\t\tremoteSocketFactoryService.register(RemoteConnectionType.WebSocket, new BrowserSocketFactory(null));\n\t\tserviceCollection.set(IRemoteSocketFactoryService, remoteSocketFactoryService);\n\t\tconst remoteAgentService = this._register(new RemoteAgentService(remoteSocketFactoryService, userDataProfileService, environmentService, productService, remoteAuthorityResolverService, signService, logService));\n\t\tserviceCollection.set(IRemoteAgentService, remoteAgentService);\n\n\t\t// Remote Files\n\t\tthis._register(RemoteFileSystemProviderClient.register(remoteAgentService, fileService, logService));\n\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t//\n\t\t// NOTE: Please do NOT register services here. Use `registerSingleton()`\n\t\t//       from `workbench.common.main.ts` if the service is shared between\n\t\t//       desktop and web or `workbench.desktop.main.ts` if the service\n\t\t//       is desktop only.\n\t\t//\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t// Create services that require resolving in parallel\n\t\tconst workspace = this.resolveWorkspaceIdentifier(environmentService);\n\t\tconst [configurationService, storageService] = await Promise.all([\n\t\t\tthis.createWorkspaceService(workspace, environmentService, userDataProfileService, userDataProfilesService, fileService, remoteAgentService, uriIdentityService, logService, policyService).then(service => {\n\n\t\t\t\t// Workspace\n\t\t\t\tserviceCollection.set(IWorkspaceContextService, service);\n\n\t\t\t\t// Configuration\n\t\t\t\tserviceCollection.set(IWorkbenchConfigurationService, service);\n\n\t\t\t\treturn service;\n\t\t\t}),\n\n\t\t\tthis.createStorageService(workspace, environmentService, userDataProfileService, userDataProfilesService, mainProcessService).then(service => {\n\n\t\t\t\t// Storage\n\t\t\t\tserviceCollection.set(IStorageService, service);\n\n\t\t\t\treturn service;\n\t\t\t}),\n\n\t\t\tthis.createKeyboardLayoutService(mainProcessService).then(service => {\n\n\t\t\t\t// KeyboardLayout\n\t\t\t\tserviceCollection.set(INativeKeyboardLayoutService, service);\n\n\t\t\t\treturn service;\n\t\t\t})\n\t\t]);\n\n\t\t// Workspace Trust Service\n\t\tconst workspaceTrustEnablementService = new WorkspaceTrustEnablementService(configurationService, environmentService);\n\t\tserviceCollection.set(IWorkspaceTrustEnablementService, workspaceTrustEnablementService);\n\n\t\tconst workspaceTrustManagementService = new WorkspaceTrustManagementService(configurationService, remoteAuthorityResolverService, storageService, uriIdentityService, environmentService, configurationService, workspaceTrustEnablementService, fileService);\n\t\tserviceCollection.set(IWorkspaceTrustManagementService, workspaceTrustManagementService);\n\n\t\t// Update workspace trust so that configuration is updated accordingly\n\t\tconfigurationService.updateWorkspaceTrust(workspaceTrustManagementService.isWorkspaceTrusted());\n\t\tthis._register(workspaceTrustManagementService.onDidChangeTrust(() => configurationService.updateWorkspaceTrust(workspaceTrustManagementService.isWorkspaceTrusted())));\n\n\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t//\n\t\t// NOTE: Please do NOT register services here. Use `registerSingleton()`\n\t\t//       from `workbench.common.main.ts` if the service is shared between\n\t\t//       desktop and web or `workbench.desktop.main.ts` if the service\n\t\t//       is desktop only.\n\t\t//\n\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\n\t\treturn { serviceCollection, logService, storageService, configurationService };\n\t}\n\n\tprivate resolveWorkspaceIdentifier(environmentService: INativeWorkbenchEnvironmentService): IAnyWorkspaceIdentifier {\n\n\t\t// Return early for when a folder or multi-root is opened\n\t\tif (this.configuration.workspace) {\n\t\t\treturn this.configuration.workspace;\n\t\t}\n\n\t\t// Otherwise, workspace is empty, so we derive an identifier\n\t\treturn toWorkspaceIdentifier(this.configuration.backupPath, environmentService.isExtensionDevelopment);\n\t}\n\n\tprivate async createWorkspaceService(\n\t\tworkspace: IAnyWorkspaceIdentifier,\n\t\tenvironmentService: INativeWorkbenchEnvironmentService,\n\t\tuserDataProfileService: IUserDataProfileService,\n\t\tuserDataProfilesService: IUserDataProfilesService,\n\t\tfileService: FileService,\n\t\tremoteAgentService: IRemoteAgentService,\n\t\turiIdentityService: IUriIdentityService,\n\t\tlogService: ILogService,\n\t\tpolicyService: IPolicyService\n\t): Promise<WorkspaceService> {\n\t\tconst configurationCache = new ConfigurationCache([Schemas.file, Schemas.vscodeUserData] /* Cache all non native resources */, environmentService, fileService);\n\t\tconst workspaceService = new WorkspaceService({ remoteAuthority: environmentService.remoteAuthority, configurationCache }, environmentService, userDataProfileService, userDataProfilesService, fileService, remoteAgentService, uriIdentityService, logService, policyService);\n\n\t\ttry {\n\t\t\tawait workspaceService.initialize(workspace);\n\n\t\t\treturn workspaceService;\n\t\t} catch (error) {\n\t\t\tonUnexpectedError(error);\n\n\t\t\treturn workspaceService;\n\t\t}\n\t}\n\n\tprivate async createStorageService(workspace: IAnyWorkspaceIdentifier, environmentService: INativeWorkbenchEnvironmentService, userDataProfileService: IUserDataProfileService, userDataProfilesService: IUserDataProfilesService, mainProcessService: IMainProcessService): Promise<NativeWorkbenchStorageService> {\n\t\tconst storageService = new NativeWorkbenchStorageService(workspace, userDataProfileService, userDataProfilesService, mainProcessService, environmentService);\n\n\t\ttry {\n\t\t\tawait storageService.initialize();\n\n\t\t\treturn storageService;\n\t\t} catch (error) {\n\t\t\tonUnexpectedError(error);\n\n\t\t\treturn storageService;\n\t\t}\n\t}\n\n\tprivate async createKeyboardLayoutService(mainProcessService: IMainProcessService): Promise<NativeKeyboardLayoutService> {\n\t\tconst keyboardLayoutService = new NativeKeyboardLayoutService(mainProcessService);\n\n\t\ttry {\n\t\t\tawait keyboardLayoutService.initialize();\n\n\t\t\treturn keyboardLayoutService;\n\t\t} catch (error) {\n\t\t\tonUnexpectedError(error);\n\n\t\t\treturn keyboardLayoutService;\n\t\t}\n\t}\n}\n\nexport function main(configuration: INativeWindowConfiguration): Promise<void> {\n\tconst workbench = new DesktopMain(configuration);\n\n\treturn workbench.open();\n}\n"]}