{"version":3,"sources":["vs/workbench/electron-sandbox/actions/installActions.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAYhG,MAAM,oBAAoB,GAAqB,EAAE,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAc,EAAE,IAAe,CAAC,EAAE,QAAQ,EAAE,eAAe,EAAE,CAAC;IAE/H,MAAa,IAAyB,SAAQ,aAAG;QAEhD;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,qCAAqC;gBACzC,KAAK,EAAE;oBACN,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAS,EAAE,IAA+B,EAAE,iBAAO,CAAC,eAAe,CAAC;oBACpF,QAAQ,EAAE,aAAa,iBAAO,CAAC,eAAe,oBAAoB;iBAClE;gBACD,QAAQ,EAAE,oBAAoB;gBAC9B,EAAE,EAAE,IAAI;aACR,CAAC,CAAC;QACJ,CAAC;QAED,KAAK,CAAC,GAAG,CAAC,QAA0B;YACnC,MAAM,iBAAiB,GAAG,QAAQ,CAAC,GAAG,CAAC,aAAI,CAAe,CAAC;YAC3D,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,aAAG,CAAY,CAAC;YACnD,MAAM,cAAc,GAAG,QAAQ,CAAC,GAAG,CAAC,oBAAG,CAAa,CAAC;YAErD,IAAI;gBACH,MAAM,iBAAiB,CAAC,mBAAmB,EAAE,CAAC;gBAE9C,aAAa,CAAC,IAAI,CAAC,IAAA,cAAQ,EAAC,CAAW,EAAE,IAAqD,EAAE,cAAc,CAAC,eAAe,CAAC,CAAC,CAAC;aACjI;YAAC,OAAO,KAAK,EAAE;gBACf,aAAa,CAAC,KAAK,CAAC,IAAA,kBAAG,EAAY,KAAK,CAAC,CAAC,CAAC;aAC3C;QACF,CAAC;KACD;IA3BD,oBA2BC;IAED,MAAa,IAA2B,SAAQ,aAAG;QAElD;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,uCAAuC;gBAC3C,KAAK,EAAE;oBACN,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAW,EAAE,IAAmC,EAAE,iBAAO,CAAC,eAAe,CAAC;oBAC1F,QAAQ,EAAE,eAAe,iBAAO,CAAC,eAAe,sBAAsB;iBACtE;gBACD,QAAQ,EAAE,oBAAoB;gBAC9B,EAAE,EAAE,IAAI;aACR,CAAC,CAAC;QACJ,CAAC;QAED,KAAK,CAAC,GAAG,CAAC,QAA0B;YACnC,MAAM,iBAAiB,GAAG,QAAQ,CAAC,GAAG,CAAC,aAAI,CAAe,CAAC;YAC3D,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,aAAG,CAAY,CAAC;YACnD,MAAM,cAAc,GAAG,QAAQ,CAAC,GAAG,CAAC,oBAAG,CAAa,CAAC;YAErD,IAAI;gBACH,MAAM,iBAAiB,CAAC,qBAAqB,EAAE,CAAC;gBAEhD,aAAa,CAAC,IAAI,CAAC,IAAA,cAAQ,EAAC,CAAa,EAAE,IAAyD,EAAE,cAAc,CAAC,eAAe,CAAC,CAAC,CAAC;aACvI;YAAC,OAAO,KAAK,EAAE;gBACf,aAAa,CAAC,KAAK,CAAC,IAAA,kBAAG,EAAY,KAAK,CAAC,CAAC,CAAC;aAC3C;QACF,CAAC;KACD;IA3BD,oBA2BC","file":"installActions.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { Action2 } from 'vs/platform/actions/common/actions';\nimport { ILocalizedString } from 'vs/platform/action/common/action';\nimport product from 'vs/platform/product/common/product';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { INativeHostService } from 'vs/platform/native/common/native';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { IProductService } from 'vs/platform/product/common/productService';\n\nconst shellCommandCategory: ILocalizedString = { value: localize('shellCommand', \"Shell Command\"), original: 'Shell Command' };\n\nexport class InstallShellScriptAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.installCommandLine',\n\t\t\ttitle: {\n\t\t\t\tvalue: localize('install', \"Install '{0}' command in PATH\", product.applicationName),\n\t\t\t\toriginal: `Install \\'${product.applicationName}\\' command in PATH`\n\t\t\t},\n\t\t\tcategory: shellCommandCategory,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst nativeHostService = accessor.get(INativeHostService);\n\t\tconst dialogService = accessor.get(IDialogService);\n\t\tconst productService = accessor.get(IProductService);\n\n\t\ttry {\n\t\t\tawait nativeHostService.installShellCommand();\n\n\t\t\tdialogService.info(localize('successIn', \"Shell command '{0}' successfully installed in PATH.\", productService.applicationName));\n\t\t} catch (error) {\n\t\t\tdialogService.error(toErrorMessage(error));\n\t\t}\n\t}\n}\n\nexport class UninstallShellScriptAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.uninstallCommandLine',\n\t\t\ttitle: {\n\t\t\t\tvalue: localize('uninstall', \"Uninstall '{0}' command from PATH\", product.applicationName),\n\t\t\t\toriginal: `Uninstall \\'${product.applicationName}\\' command from PATH`\n\t\t\t},\n\t\t\tcategory: shellCommandCategory,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst nativeHostService = accessor.get(INativeHostService);\n\t\tconst dialogService = accessor.get(IDialogService);\n\t\tconst productService = accessor.get(IProductService);\n\n\t\ttry {\n\t\t\tawait nativeHostService.uninstallShellCommand();\n\n\t\t\tdialogService.info(localize('successFrom', \"Shell command '{0}' successfully uninstalled from PATH.\", productService.applicationName));\n\t\t} catch (error) {\n\t\t\tdialogService.error(toErrorMessage(error));\n\t\t}\n\t}\n}\n"]}