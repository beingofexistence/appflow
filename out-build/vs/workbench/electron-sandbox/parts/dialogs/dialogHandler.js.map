{"version":3,"sources":["vs/workbench/electron-sandbox/parts/dialogs/dialogHandler.ts"],"names":[],"mappings":"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","file":"dialogHandler.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { fromNow } from 'vs/base/common/date';\nimport { isLinuxSnap } from 'vs/base/common/platform';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { AbstractDialogHandler, IConfirmation, IConfirmationResult, IPrompt, IPromptResult } from 'vs/platform/dialogs/common/dialogs';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { INativeHostService } from 'vs/platform/native/common/native';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { process } from 'vs/base/parts/sandbox/electron-sandbox/globals';\n\nexport class NativeDialogHandler extends AbstractDialogHandler {\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IClipboardService private readonly clipboardService: IClipboardService\n\t) {\n\t\tsuper();\n\t}\n\n\tasync prompt<T>(prompt: IPrompt<T>): Promise<IPromptResult<T>> {\n\t\tthis.logService.trace('DialogService#prompt', prompt.message);\n\n\t\tconst buttons = this.getPromptButtons(prompt);\n\n\t\tconst { response, checkboxChecked } = await this.nativeHostService.showMessageBox({\n\t\t\ttype: this.getDialogType(prompt.type),\n\t\t\ttitle: prompt.title,\n\t\t\tmessage: prompt.message,\n\t\t\tdetail: prompt.detail,\n\t\t\tbuttons,\n\t\t\tcancelId: prompt.cancelButton ? buttons.length - 1 : -1 /* Disabled */,\n\t\t\tcheckboxLabel: prompt.checkbox?.label,\n\t\t\tcheckboxChecked: prompt.checkbox?.checked\n\t\t});\n\n\t\treturn this.getPromptResult(prompt, response, checkboxChecked);\n\t}\n\n\tasync confirm(confirmation: IConfirmation): Promise<IConfirmationResult> {\n\t\tthis.logService.trace('DialogService#confirm', confirmation.message);\n\n\t\tconst buttons = this.getConfirmationButtons(confirmation);\n\n\t\tconst { response, checkboxChecked } = await this.nativeHostService.showMessageBox({\n\t\t\ttype: this.getDialogType(confirmation.type) ?? 'question',\n\t\t\ttitle: confirmation.title,\n\t\t\tmessage: confirmation.message,\n\t\t\tdetail: confirmation.detail,\n\t\t\tbuttons,\n\t\t\tcancelId: buttons.length - 1,\n\t\t\tcheckboxLabel: confirmation.checkbox?.label,\n\t\t\tcheckboxChecked: confirmation.checkbox?.checked\n\t\t});\n\n\t\treturn { confirmed: response === 0, checkboxChecked };\n\t}\n\n\tinput(): never {\n\t\tthrow new Error('Unsupported'); // we have no native API for password dialogs in Electron\n\t}\n\n\tasync about(): Promise<void> {\n\t\tlet version = this.productService.version;\n\t\tif (this.productService.target) {\n\t\t\tversion = `${version} (${this.productService.target} setup)`;\n\t\t} else if (this.productService.darwinUniversalAssetId) {\n\t\t\tversion = `${version} (Universal)`;\n\t\t}\n\n\t\tconst osProps = await this.nativeHostService.getOSProperties();\n\n\t\tconst detailString = (useAgo: boolean): string => {\n\t\t\treturn localize({ key: 'aboutDetail', comment: ['Electron, Chromium, Node.js and V8 are product names that need no translation'] },\n\t\t\t\t\"Version: {0}\\nCommit: {1}\\nDate: {2}\\nElectron: {3}\\nElectronBuildId: {4}\\nChromium: {5}\\nNode.js: {6}\\nV8: {7}\\nOS: {8}\",\n\t\t\t\tversion,\n\t\t\t\tthis.productService.commit || 'Unknown',\n\t\t\t\tthis.productService.date ? `${this.productService.date}${useAgo ? ' (' + fromNow(new Date(this.productService.date), true) + ')' : ''}` : 'Unknown',\n\t\t\t\tprocess.versions['electron'],\n\t\t\t\tprocess.versions['microsoft-build'],\n\t\t\t\tprocess.versions['chrome'],\n\t\t\t\tprocess.versions['node'],\n\t\t\t\tprocess.versions['v8'],\n\t\t\t\t`${osProps.type} ${osProps.arch} ${osProps.release}${isLinuxSnap ? ' snap' : ''}`\n\t\t\t);\n\t\t};\n\n\t\tconst detail = detailString(true);\n\t\tconst detailToCopy = detailString(false);\n\n\t\tconst { response } = await this.nativeHostService.showMessageBox({\n\t\t\ttype: 'info',\n\t\t\tmessage: this.productService.nameLong,\n\t\t\tdetail: `\\n${detail}`,\n\t\t\tbuttons: [\n\t\t\t\tlocalize({ key: 'copy', comment: ['&& denotes a mnemonic'] }, \"&&Copy\"),\n\t\t\t\tlocalize('okButton', \"OK\")\n\t\t\t]\n\t\t});\n\n\t\tif (response === 0) {\n\t\t\tthis.clipboardService.writeText(detailToCopy);\n\t\t}\n\t}\n}\n"]}