{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/electron-sandbox/parts/dialogs/dialog.contribution.ts"],"names":[],"mappings":"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","file":"dialog.contribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IDialogHandler, IDialogResult, IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { ILayoutService } from 'vs/platform/layout/browser/layoutService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { INativeHostService } from 'vs/platform/native/common/native';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { IDialogsModel, IDialogViewItem } from 'vs/workbench/common/dialogs';\nimport { BrowserDialogHandler } from 'vs/workbench/browser/parts/dialogs/dialogHandler';\nimport { NativeDialogHandler } from 'vs/workbench/electron-sandbox/parts/dialogs/dialogHandler';\nimport { DialogService } from 'vs/workbench/services/dialogs/common/dialogService';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\n\nexport class DialogHandlerContribution extends Disposable implements IWorkbenchContribution {\n\tprivate nativeImpl: IDialogHandler;\n\tprivate browserImpl: IDialogHandler;\n\n\tprivate model: IDialogsModel;\n\tprivate currentDialog: IDialogViewItem | undefined;\n\n\tconstructor(\n\t\t@IConfigurationService private configurationService: IConfigurationService,\n\t\t@IDialogService private dialogService: IDialogService,\n\t\t@ILogService logService: ILogService,\n\t\t@ILayoutService layoutService: ILayoutService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IProductService productService: IProductService,\n\t\t@IClipboardService clipboardService: IClipboardService,\n\t\t@INativeHostService nativeHostService: INativeHostService\n\t) {\n\t\tsuper();\n\n\t\tthis.browserImpl = new BrowserDialogHandler(logService, layoutService, keybindingService, instantiationService, productService, clipboardService);\n\t\tthis.nativeImpl = new NativeDialogHandler(logService, nativeHostService, productService, clipboardService);\n\n\t\tthis.model = (this.dialogService as DialogService).model;\n\n\t\tthis._register(this.model.onWillShowDialog(() => {\n\t\t\tif (!this.currentDialog) {\n\t\t\t\tthis.processDialogs();\n\t\t\t}\n\t\t}));\n\n\t\tthis.processDialogs();\n\t}\n\n\tprivate async processDialogs(): Promise<void> {\n\t\twhile (this.model.dialogs.length) {\n\t\t\tthis.currentDialog = this.model.dialogs[0];\n\n\t\t\tlet result: IDialogResult | undefined = undefined;\n\n\t\t\t// Confirm\n\t\t\tif (this.currentDialog.args.confirmArgs) {\n\t\t\t\tconst args = this.currentDialog.args.confirmArgs;\n\t\t\t\tresult = (this.useCustomDialog || args?.confirmation.custom) ?\n\t\t\t\t\tawait this.browserImpl.confirm(args.confirmation) :\n\t\t\t\t\tawait this.nativeImpl.confirm(args.confirmation);\n\t\t\t}\n\n\t\t\t// Input (custom only)\n\t\t\telse if (this.currentDialog.args.inputArgs) {\n\t\t\t\tconst args = this.currentDialog.args.inputArgs;\n\t\t\t\tresult = await this.browserImpl.input(args.input);\n\t\t\t}\n\n\t\t\t// Prompt\n\t\t\telse if (this.currentDialog.args.promptArgs) {\n\t\t\t\tconst args = this.currentDialog.args.promptArgs;\n\t\t\t\tresult = (this.useCustomDialog || args?.prompt.custom) ?\n\t\t\t\t\tawait this.browserImpl.prompt(args.prompt) :\n\t\t\t\t\tawait this.nativeImpl.prompt(args.prompt);\n\t\t\t}\n\n\t\t\t// About\n\t\t\telse {\n\t\t\t\tif (this.useCustomDialog) {\n\t\t\t\t\tawait this.browserImpl.about();\n\t\t\t\t} else {\n\t\t\t\t\tawait this.nativeImpl.about();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.currentDialog.close(result);\n\t\t\tthis.currentDialog = undefined;\n\t\t}\n\t}\n\n\tprivate get useCustomDialog(): boolean {\n\t\treturn this.configurationService.getValue('window.dialogStyle') === 'custom';\n\t}\n}\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(DialogHandlerContribution, LifecyclePhase.Starting);\n"]}