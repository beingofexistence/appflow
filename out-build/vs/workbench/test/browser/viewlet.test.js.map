{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/test/browser/viewlet.test.ts"],"names":[],"mappings":"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","file":"viewlet.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { PaneCompositeDescriptor, Extensions, PaneCompositeRegistry, PaneComposite } from 'vs/workbench/browser/panecomposite';\nimport { isFunction } from 'vs/base/common/types';\nimport { IBoundarySashes } from 'vs/base/browser/ui/sash/sash';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nsuite('Viewlets', () => {\n\n\tclass TestViewlet extends PaneComposite {\n\n\t\tconstructor() {\n\t\t\tsuper('id', null!, null!, null!, null!, null!, null!, null!);\n\t\t}\n\n\t\toverride layout(dimension: any): void {\n\t\t\tthrow new Error('Method not implemented.');\n\t\t}\n\n\t\toverride setBoundarySashes(sashes: IBoundarySashes): void {\n\t\t\tthrow new Error('Method not implemented.');\n\t\t}\n\n\t\tprotected override createViewPaneContainer() { return null!; }\n\t}\n\n\ttest('ViewletDescriptor API', function () {\n\t\tconst d = PaneCompositeDescriptor.create(TestViewlet, 'id', 'name', 'class', 5);\n\t\tassert.strictEqual(d.id, 'id');\n\t\tassert.strictEqual(d.name, 'name');\n\t\tassert.strictEqual(d.cssClass, 'class');\n\t\tassert.strictEqual(d.order, 5);\n\t});\n\n\ttest('Editor Aware ViewletDescriptor API', function () {\n\t\tlet d = PaneCompositeDescriptor.create(TestViewlet, 'id', 'name', 'class', 5);\n\t\tassert.strictEqual(d.id, 'id');\n\t\tassert.strictEqual(d.name, 'name');\n\n\t\td = PaneCompositeDescriptor.create(TestViewlet, 'id', 'name', 'class', 5);\n\t\tassert.strictEqual(d.id, 'id');\n\t\tassert.strictEqual(d.name, 'name');\n\t});\n\n\ttest('Viewlet extension point and registration', function () {\n\t\tassert(isFunction(Registry.as<PaneCompositeRegistry>(Extensions.Viewlets).registerPaneComposite));\n\t\tassert(isFunction(Registry.as<PaneCompositeRegistry>(Extensions.Viewlets).getPaneComposite));\n\t\tassert(isFunction(Registry.as<PaneCompositeRegistry>(Extensions.Viewlets).getPaneComposites));\n\n\t\tconst oldCount = Registry.as<PaneCompositeRegistry>(Extensions.Viewlets).getPaneComposites().length;\n\t\tconst d = PaneCompositeDescriptor.create(TestViewlet, 'reg-test-id', 'name');\n\t\tRegistry.as<PaneCompositeRegistry>(Extensions.Viewlets).registerPaneComposite(d);\n\n\t\tassert(d === Registry.as<PaneCompositeRegistry>(Extensions.Viewlets).getPaneComposite('reg-test-id'));\n\t\tassert.strictEqual(oldCount + 1, Registry.as<PaneCompositeRegistry>(Extensions.Viewlets).getPaneComposites().length);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"]}