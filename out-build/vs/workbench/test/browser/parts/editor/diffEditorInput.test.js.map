{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/test/browser/parts/editor/diffEditorInput.test.ts"],"names":[],"mappings":"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","file":"diffEditorInput.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { DiffEditorInput } from 'vs/workbench/common/editor/diffEditorInput';\nimport { workbenchInstantiationService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { EditorResourceAccessor, isDiffEditorInput, isResourceDiffEditorInput, isResourceSideBySideEditorInput, IUntypedEditorInput } from 'vs/workbench/common/editor';\nimport { URI } from 'vs/base/common/uri';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nsuite('Diff editor input', () => {\n\n\tclass MyEditorInput extends EditorInput {\n\n\t\tconstructor(public resource: URI | undefined = undefined) {\n\t\t\tsuper();\n\t\t}\n\n\t\toverride get typeId(): string { return 'myEditorInput'; }\n\t\toverride resolve(): any { return null; }\n\n\t\toverride toUntyped() {\n\t\t\treturn { resource: this.resource, options: { override: this.typeId } };\n\t\t}\n\n\t\toverride matches(otherInput: EditorInput | IUntypedEditorInput): boolean {\n\t\t\tif (super.matches(otherInput)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tconst resource = EditorResourceAccessor.getCanonicalUri(otherInput);\n\t\t\treturn resource?.toString() === this.resource?.toString();\n\t\t}\n\t}\n\n\tconst disposables = new DisposableStore();\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('basics', () => {\n\t\tconst instantiationService = workbenchInstantiationService(undefined, disposables);\n\n\t\tlet counter = 0;\n\t\tconst input = disposables.add(new MyEditorInput());\n\t\tdisposables.add(input.onWillDispose(() => {\n\t\t\tassert(true);\n\t\t\tcounter++;\n\t\t}));\n\n\t\tconst otherInput = disposables.add(new MyEditorInput());\n\t\tdisposables.add(otherInput.onWillDispose(() => {\n\t\t\tassert(true);\n\t\t\tcounter++;\n\t\t}));\n\n\t\tconst diffInput = instantiationService.createInstance(DiffEditorInput, 'name', 'description', input, otherInput, undefined);\n\n\t\tassert.ok(isDiffEditorInput(diffInput));\n\t\tassert.ok(!isDiffEditorInput(input));\n\n\t\tassert.strictEqual(diffInput.original, input);\n\t\tassert.strictEqual(diffInput.modified, otherInput);\n\t\tassert(diffInput.matches(diffInput));\n\t\tassert(!diffInput.matches(otherInput));\n\n\t\tdiffInput.dispose();\n\t\tassert.strictEqual(counter, 0);\n\t});\n\n\ttest('toUntyped', () => {\n\t\tconst instantiationService = workbenchInstantiationService(undefined, disposables);\n\n\t\tconst input = disposables.add(new MyEditorInput(URI.file('foo/bar1')));\n\t\tconst otherInput = disposables.add(new MyEditorInput(URI.file('foo/bar2')));\n\n\t\tconst diffInput = instantiationService.createInstance(DiffEditorInput, 'name', 'description', input, otherInput, undefined);\n\n\t\tconst untypedDiffInput = diffInput.toUntyped();\n\t\tassert.ok(isResourceDiffEditorInput(untypedDiffInput));\n\t\tassert.ok(!isResourceSideBySideEditorInput(untypedDiffInput));\n\t\tassert.ok(diffInput.matches(untypedDiffInput));\n\t});\n\n\ttest('disposes when input inside disposes', function () {\n\t\tconst instantiationService = workbenchInstantiationService(undefined, disposables);\n\n\t\tlet counter = 0;\n\t\tlet input = disposables.add(new MyEditorInput());\n\t\tlet otherInput = disposables.add(new MyEditorInput());\n\n\t\tconst diffInput = disposables.add(instantiationService.createInstance(DiffEditorInput, 'name', 'description', input, otherInput, undefined));\n\t\tdisposables.add(diffInput.onWillDispose(() => {\n\t\t\tcounter++;\n\t\t\tassert(true);\n\t\t}));\n\n\t\tinput.dispose();\n\n\t\tinput = disposables.add(new MyEditorInput());\n\t\totherInput = disposables.add(new MyEditorInput());\n\n\t\tconst diffInput2 = disposables.add(instantiationService.createInstance(DiffEditorInput, 'name', 'description', input, otherInput, undefined));\n\t\tdisposables.add(diffInput2.onWillDispose(() => {\n\t\t\tcounter++;\n\t\t\tassert(true);\n\t\t}));\n\n\t\totherInput.dispose();\n\t\tassert.strictEqual(counter, 2);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"]}