{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/test/browser/parts/editor/editorModel.test.ts"],"names":[],"mappings":"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","file":"editorModel.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { BaseTextEditorModel } from 'vs/workbench/common/editor/textEditorModel';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { LanguageService } from 'vs/editor/common/services/languageService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { ModelService } from 'vs/editor/common/services/modelService';\nimport { ITextBufferFactory } from 'vs/editor/common/model';\nimport { URI } from 'vs/base/common/uri';\nimport { createTextBufferFactory } from 'vs/editor/common/model/textModel';\nimport { ITextResourcePropertiesService } from 'vs/editor/common/services/textResourceConfiguration';\nimport { IUndoRedoService } from 'vs/platform/undoRedo/common/undoRedo';\nimport { UndoRedoService } from 'vs/platform/undoRedo/common/undoRedoService';\nimport { TestDialogService } from 'vs/platform/dialogs/test/common/testDialogService';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { TestNotificationService } from 'vs/platform/notification/test/common/testNotificationService';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { TestStorageService, TestTextResourcePropertiesService } from 'vs/workbench/test/common/workbenchTestServices';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { TestThemeService } from 'vs/platform/theme/test/common/testThemeService';\nimport { EditorModel } from 'vs/workbench/common/editor/editorModel';\nimport { Mimes } from 'vs/base/common/mime';\nimport { LanguageDetectionService } from 'vs/workbench/services/languageDetection/browser/languageDetectionWorkerServiceImpl';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { TestEditorService, TestEnvironmentService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { TestLanguageConfigurationService } from 'vs/editor/test/common/modes/testLanguageConfigurationService';\nimport { ILanguageConfigurationService } from 'vs/editor/common/languages/languageConfigurationRegistry';\nimport { TestAccessibilityService } from 'vs/platform/accessibility/test/common/testAccessibilityService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nsuite('EditorModel', () => {\n\n\tclass MyEditorModel extends EditorModel { }\n\tclass MyTextEditorModel extends BaseTextEditorModel {\n\t\ttestCreateTextEditorModel(value: ITextBufferFactory, resource?: URI, preferredLanguageId?: string) {\n\t\t\treturn super.createTextEditorModel(value, resource, preferredLanguageId);\n\t\t}\n\n\t\toverride isReadonly(): boolean {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tfunction stubModelService(instantiationService: TestInstantiationService): IModelService {\n\t\tconst dialogService = new TestDialogService();\n\t\tconst notificationService = new TestNotificationService();\n\t\tconst undoRedoService = new UndoRedoService(dialogService, notificationService);\n\t\tinstantiationService.stub(IWorkbenchEnvironmentService, TestEnvironmentService);\n\t\tinstantiationService.stub(IConfigurationService, new TestConfigurationService());\n\t\tinstantiationService.stub(ITextResourcePropertiesService, new TestTextResourcePropertiesService(instantiationService.get(IConfigurationService)));\n\t\tinstantiationService.stub(IDialogService, dialogService);\n\t\tinstantiationService.stub(INotificationService, notificationService);\n\t\tinstantiationService.stub(IUndoRedoService, undoRedoService);\n\t\tinstantiationService.stub(IEditorService, new TestEditorService());\n\t\tinstantiationService.stub(IThemeService, new TestThemeService());\n\t\tinstantiationService.stub(ILanguageConfigurationService, disposables.add(new TestLanguageConfigurationService()));\n\t\tinstantiationService.stub(IStorageService, disposables.add(new TestStorageService()));\n\n\t\treturn disposables.add(instantiationService.createInstance(ModelService));\n\t}\n\n\tlet instantiationService: TestInstantiationService;\n\tlet languageService: ILanguageService;\n\n\tconst disposables = new DisposableStore();\n\n\tsetup(() => {\n\t\tinstantiationService = disposables.add(new TestInstantiationService());\n\t\tlanguageService = instantiationService.stub(ILanguageService, LanguageService);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('basics', async () => {\n\t\tlet counter = 0;\n\n\t\tconst model = disposables.add(new MyEditorModel());\n\n\t\tdisposables.add(model.onWillDispose(() => {\n\t\t\tassert(true);\n\t\t\tcounter++;\n\t\t}));\n\n\t\tawait model.resolve();\n\t\tassert.strictEqual(model.isDisposed(), false);\n\t\tassert.strictEqual(model.isResolved(), true);\n\t\tmodel.dispose();\n\t\tassert.strictEqual(counter, 1);\n\t\tassert.strictEqual(model.isDisposed(), true);\n\t});\n\n\ttest('BaseTextEditorModel', async () => {\n\t\tconst modelService = stubModelService(instantiationService);\n\n\t\tconst model = disposables.add(new MyTextEditorModel(modelService, languageService, disposables.add(instantiationService.createInstance(LanguageDetectionService)), instantiationService.createInstance(TestAccessibilityService)));\n\t\tawait model.resolve();\n\n\t\tdisposables.add(model.testCreateTextEditorModel(createTextBufferFactory('foo'), null!, Mimes.text));\n\t\tassert.strictEqual(model.isResolved(), true);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"]}