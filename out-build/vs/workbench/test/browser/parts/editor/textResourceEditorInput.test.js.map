{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/test/browser/parts/editor/textResourceEditorInput.test.ts"],"names":[],"mappings":"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","file":"textResourceEditorInput.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { URI } from 'vs/base/common/uri';\nimport { TextResourceEditorInput } from 'vs/workbench/common/editor/textResourceEditorInput';\nimport { TextResourceEditorModel } from 'vs/workbench/common/editor/textResourceEditorModel';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { workbenchInstantiationService, TestServiceAccessor } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { snapshotToString } from 'vs/workbench/services/textfile/common/textfiles';\nimport { PLAINTEXT_LANGUAGE_ID } from 'vs/editor/common/languages/modesRegistry';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nsuite('TextResourceEditorInput', () => {\n\n\tconst disposables = new DisposableStore();\n\n\tlet instantiationService: IInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('basics', async () => {\n\t\tconst resource = URI.from({ scheme: 'inmemory', authority: null!, path: 'thePath' });\n\t\taccessor.modelService.createModel('function test() {}', accessor.languageService.createById(PLAINTEXT_LANGUAGE_ID), resource);\n\n\t\tconst input = disposables.add(instantiationService.createInstance(TextResourceEditorInput, resource, 'The Name', 'The Description', undefined, undefined));\n\n\t\tconst model = disposables.add(await input.resolve());\n\n\t\tassert.ok(model);\n\t\tassert.strictEqual(snapshotToString(((model as TextResourceEditorModel).createSnapshot()!)), 'function test() {}');\n\t});\n\n\ttest('preferred language (via ctor)', async () => {\n\t\tconst registration = accessor.languageService.registerLanguage({\n\t\t\tid: 'resource-input-test',\n\t\t});\n\n\t\tconst resource = URI.from({ scheme: 'inmemory', authority: null!, path: 'thePath' });\n\t\taccessor.modelService.createModel('function test() {}', accessor.languageService.createById(PLAINTEXT_LANGUAGE_ID), resource);\n\n\t\tconst input = disposables.add(instantiationService.createInstance(TextResourceEditorInput, resource, 'The Name', 'The Description', 'resource-input-test', undefined));\n\n\t\tconst model = disposables.add(await input.resolve());\n\t\tassert.ok(model);\n\t\tassert.strictEqual(model.textEditorModel?.getLanguageId(), 'resource-input-test');\n\n\t\tinput.setLanguageId('text');\n\t\tassert.strictEqual(model.textEditorModel?.getLanguageId(), PLAINTEXT_LANGUAGE_ID);\n\n\t\tdisposables.add(await input.resolve());\n\t\tassert.strictEqual(model.textEditorModel?.getLanguageId(), PLAINTEXT_LANGUAGE_ID);\n\t\tregistration.dispose();\n\t});\n\n\ttest('preferred language (via setPreferredLanguageId)', async () => {\n\t\tconst registration = accessor.languageService.registerLanguage({\n\t\t\tid: 'resource-input-test',\n\t\t});\n\n\t\tconst resource = URI.from({ scheme: 'inmemory', authority: null!, path: 'thePath' });\n\t\taccessor.modelService.createModel('function test() {}', accessor.languageService.createById(PLAINTEXT_LANGUAGE_ID), resource);\n\n\t\tconst input = disposables.add(instantiationService.createInstance(TextResourceEditorInput, resource, 'The Name', 'The Description', undefined, undefined));\n\t\tinput.setPreferredLanguageId('resource-input-test');\n\n\t\tconst model = disposables.add(await input.resolve());\n\t\tassert.ok(model);\n\t\tassert.strictEqual(model.textEditorModel?.getLanguageId(), 'resource-input-test');\n\t\tregistration.dispose();\n\t});\n\n\ttest('preferred contents (via ctor)', async () => {\n\t\tconst resource = URI.from({ scheme: 'inmemory', authority: null!, path: 'thePath' });\n\t\taccessor.modelService.createModel('function test() {}', accessor.languageService.createById(PLAINTEXT_LANGUAGE_ID), resource);\n\n\t\tconst input = disposables.add(instantiationService.createInstance(TextResourceEditorInput, resource, 'The Name', 'The Description', undefined, 'My Resource Input Contents'));\n\n\t\tconst model = disposables.add(await input.resolve());\n\t\tassert.ok(model);\n\t\tassert.strictEqual(model.textEditorModel?.getValue(), 'My Resource Input Contents');\n\n\t\tmodel.textEditorModel.setValue('Some other contents');\n\t\tassert.strictEqual(model.textEditorModel?.getValue(), 'Some other contents');\n\n\t\tdisposables.add(await input.resolve());\n\t\tassert.strictEqual(model.textEditorModel?.getValue(), 'Some other contents'); // preferred contents only used once\n\t});\n\n\ttest('preferred contents (via setPreferredContents)', async () => {\n\t\tconst resource = URI.from({ scheme: 'inmemory', authority: null!, path: 'thePath' });\n\t\taccessor.modelService.createModel('function test() {}', accessor.languageService.createById(PLAINTEXT_LANGUAGE_ID), resource);\n\n\t\tconst input = disposables.add(instantiationService.createInstance(TextResourceEditorInput, resource, 'The Name', 'The Description', undefined, undefined));\n\t\tinput.setPreferredContents('My Resource Input Contents');\n\n\t\tconst model = disposables.add(await input.resolve());\n\t\tassert.ok(model);\n\t\tassert.strictEqual(model.textEditorModel?.getValue(), 'My Resource Input Contents');\n\n\t\tmodel.textEditorModel.setValue('Some other contents');\n\t\tassert.strictEqual(model.textEditorModel?.getValue(), 'Some other contents');\n\n\t\tdisposables.add(await input.resolve());\n\t\tassert.strictEqual(model.textEditorModel?.getValue(), 'Some other contents'); // preferred contents only used once\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"]}