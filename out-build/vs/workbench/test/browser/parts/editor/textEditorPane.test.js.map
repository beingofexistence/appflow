{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/test/browser/parts/editor/textEditorPane.test.ts"],"names":[],"mappings":"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","file":"textEditorPane.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite, toResource } from 'vs/base/test/common/utils';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { workbenchInstantiationService, TestServiceAccessor, registerTestFileEditor, createEditorPart, TestTextFileEditor } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { IResolvedTextFileEditorModel } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { EditorService } from 'vs/workbench/services/editor/browser/editorService';\nimport { EditorPaneSelectionChangeReason, EditorPaneSelectionCompareResult, IEditorPaneSelectionChangeEvent, isEditorPaneWithSelection } from 'vs/workbench/common/editor';\nimport { DeferredPromise } from 'vs/base/common/async';\nimport { TextEditorPaneSelection } from 'vs/workbench/browser/parts/editor/textEditor';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { IEditorOptions } from 'vs/platform/editor/common/editor';\n\nsuite('TextEditorPane', () => {\n\n\tconst disposables = new DisposableStore();\n\n\tsetup(() => {\n\t\tdisposables.add(registerTestFileEditor());\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\tasync function createServices(): Promise<TestServiceAccessor> {\n\t\tconst instantiationService = workbenchInstantiationService(undefined, disposables);\n\n\t\tconst part = await createEditorPart(instantiationService, disposables);\n\t\tinstantiationService.stub(IEditorGroupsService, part);\n\n\t\tconst editorService = disposables.add(instantiationService.createInstance(EditorService));\n\t\tinstantiationService.stub(IEditorService, editorService);\n\n\t\treturn instantiationService.createInstance(TestServiceAccessor);\n\t}\n\n\ttest('editor pane selection', async function () {\n\t\tconst accessor = await createServices();\n\n\t\tconst resource = toResource.call(this, '/path/index.txt');\n\t\tlet pane = (await accessor.editorService.openEditor({ resource }) as TestTextFileEditor);\n\n\t\tassert.ok(pane && isEditorPaneWithSelection(pane));\n\n\t\tconst onDidFireSelectionEventOfEditType = new DeferredPromise<IEditorPaneSelectionChangeEvent>();\n\t\tdisposables.add(pane.onDidChangeSelection(e => {\n\t\t\tif (e.reason === EditorPaneSelectionChangeReason.EDIT) {\n\t\t\t\tonDidFireSelectionEventOfEditType.complete(e);\n\t\t\t}\n\t\t}));\n\n\t\t// Changing model reports selection change\n\t\t// of EDIT kind\n\n\t\tconst model = disposables.add(await accessor.textFileService.files.resolve(resource) as IResolvedTextFileEditorModel);\n\t\tmodel.textEditorModel.setValue('Hello World');\n\n\t\tconst event = await onDidFireSelectionEventOfEditType.p;\n\t\tassert.strictEqual(event.reason, EditorPaneSelectionChangeReason.EDIT);\n\n\t\t// getSelection() works and can be restored\n\t\t//\n\t\t// Note: this is a bit bogus because in tests our code editors have\n\t\t//       no view and no cursor can be set as such. So the selection\n\t\t//       will always report for the first line and column.\n\n\t\tpane.setSelection(new Selection(1, 1, 1, 1), EditorPaneSelectionChangeReason.USER);\n\t\tconst selection = pane.getSelection();\n\t\tassert.ok(selection);\n\t\tawait pane.group?.closeAllEditors();\n\t\tconst options = selection.restore({});\n\t\tpane = (await accessor.editorService.openEditor({ resource, options }) as TestTextFileEditor);\n\n\t\tassert.ok(pane && isEditorPaneWithSelection(pane));\n\n\t\tconst newSelection = pane.getSelection();\n\t\tassert.ok(newSelection);\n\t\tassert.strictEqual(newSelection.compare(selection), EditorPaneSelectionCompareResult.IDENTICAL);\n\n\t\tawait model.revert();\n\t\tawait pane.group?.closeAllEditors();\n\t});\n\n\ttest('TextEditorPaneSelection', function () {\n\t\tconst sel1 = new TextEditorPaneSelection(new Selection(1, 1, 2, 2));\n\t\tconst sel2 = new TextEditorPaneSelection(new Selection(5, 5, 6, 6));\n\t\tconst sel3 = new TextEditorPaneSelection(new Selection(50, 50, 60, 60));\n\t\tconst sel4 = { compare: () => { throw new Error(); }, restore: (options: IEditorOptions) => options };\n\n\t\tassert.strictEqual(sel1.compare(sel1), EditorPaneSelectionCompareResult.IDENTICAL);\n\t\tassert.strictEqual(sel1.compare(sel2), EditorPaneSelectionCompareResult.SIMILAR);\n\t\tassert.strictEqual(sel1.compare(sel3), EditorPaneSelectionCompareResult.DIFFERENT);\n\t\tassert.strictEqual(sel1.compare(sel4), EditorPaneSelectionCompareResult.DIFFERENT);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"]}