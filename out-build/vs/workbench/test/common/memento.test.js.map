{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/test/common/memento.test.ts"],"names":[],"mappings":"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","file":"memento.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { StorageScope, IStorageService, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { Memento } from 'vs/workbench/common/memento';\nimport { TestStorageService } from 'vs/workbench/test/common/workbenchTestServices';\n\nsuite('Memento', () => {\n\tconst disposables = new DisposableStore();\n\tlet storage: IStorageService;\n\n\tsetup(() => {\n\t\tstorage = disposables.add(new TestStorageService());\n\t\tMemento.clear(StorageScope.APPLICATION);\n\t\tMemento.clear(StorageScope.PROFILE);\n\t\tMemento.clear(StorageScope.WORKSPACE);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('Loading and Saving Memento with Scopes', () => {\n\t\tconst myMemento = new Memento('memento.test', storage);\n\n\t\t// Application\n\t\tlet memento = myMemento.getMemento(StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\tmemento.foo = [1, 2, 3];\n\t\tlet applicationMemento = myMemento.getMemento(StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(applicationMemento, memento);\n\n\t\t// Profile\n\t\tmemento = myMemento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tmemento.foo = [4, 5, 6];\n\t\tlet profileMemento = myMemento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(profileMemento, memento);\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tassert(memento);\n\t\tmemento.foo = 'Hello World';\n\n\t\tmyMemento.saveMemento();\n\n\t\t// Application\n\t\tmemento = myMemento.getMemento(StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, { foo: [1, 2, 3] });\n\t\tapplicationMemento = myMemento.getMemento(StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(applicationMemento, memento);\n\n\t\t// Profile\n\t\tmemento = myMemento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, { foo: [4, 5, 6] });\n\t\tprofileMemento = myMemento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(profileMemento, memento);\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, { foo: 'Hello World' });\n\n\t\t// Assert the Mementos are stored properly in storage\n\t\tassert.deepStrictEqual(JSON.parse(storage.get('memento/memento.test', StorageScope.APPLICATION)!), { foo: [1, 2, 3] });\n\t\tassert.deepStrictEqual(JSON.parse(storage.get('memento/memento.test', StorageScope.PROFILE)!), { foo: [4, 5, 6] });\n\t\tassert.deepStrictEqual(JSON.parse(storage.get('memento/memento.test', StorageScope.WORKSPACE)!), { foo: 'Hello World' });\n\n\t\t// Delete Application\n\t\tmemento = myMemento.getMemento(StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\tdelete memento.foo;\n\n\t\t// Delete Profile\n\t\tmemento = myMemento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tdelete memento.foo;\n\n\t\t// Delete Workspace\n\t\tmemento = myMemento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tdelete memento.foo;\n\n\t\tmyMemento.saveMemento();\n\n\t\t// Application\n\t\tmemento = myMemento.getMemento(StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, {});\n\n\t\t// Profile\n\t\tmemento = myMemento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, {});\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, {});\n\n\t\t// Assert the Mementos are also removed from storage\n\t\tassert.strictEqual(storage.get('memento/memento.test', StorageScope.APPLICATION, null!), null);\n\t\tassert.strictEqual(storage.get('memento/memento.test', StorageScope.PROFILE, null!), null);\n\t\tassert.strictEqual(storage.get('memento/memento.test', StorageScope.WORKSPACE, null!), null);\n\t});\n\n\ttest('Save and Load', () => {\n\t\tconst myMemento = new Memento('memento.test', storage);\n\n\t\t// Profile\n\t\tlet memento = myMemento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tmemento.foo = [1, 2, 3];\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tassert(memento);\n\t\tmemento.foo = 'Hello World';\n\n\t\tmyMemento.saveMemento();\n\n\t\t// Profile\n\t\tmemento = myMemento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, { foo: [1, 2, 3] });\n\t\tlet profileMemento = myMemento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(profileMemento, memento);\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, { foo: 'Hello World' });\n\n\t\t// Profile\n\t\tmemento = myMemento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tmemento.foo = [4, 5, 6];\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tassert(memento);\n\t\tmemento.foo = 'World Hello';\n\n\t\tmyMemento.saveMemento();\n\n\t\t// Profile\n\t\tmemento = myMemento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, { foo: [4, 5, 6] });\n\t\tprofileMemento = myMemento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(profileMemento, memento);\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, { foo: 'World Hello' });\n\n\t\t// Delete Profile\n\t\tmemento = myMemento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tdelete memento.foo;\n\n\t\t// Delete Workspace\n\t\tmemento = myMemento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tdelete memento.foo;\n\n\t\tmyMemento.saveMemento();\n\n\t\t// Profile\n\t\tmemento = myMemento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, {});\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, {});\n\t});\n\n\ttest('Save and Load - 2 Components with same id', () => {\n\t\tconst myMemento = new Memento('memento.test', storage);\n\t\tconst myMemento2 = new Memento('memento.test', storage);\n\n\t\t// Profile\n\t\tlet memento = myMemento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tmemento.foo = [1, 2, 3];\n\n\t\tmemento = myMemento2.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tmemento.bar = [1, 2, 3];\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tassert(memento);\n\t\tmemento.foo = 'Hello World';\n\n\t\tmemento = myMemento2.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tassert(memento);\n\t\tmemento.bar = 'Hello World';\n\n\t\tmyMemento.saveMemento();\n\t\tmyMemento2.saveMemento();\n\n\t\t// Profile\n\t\tmemento = myMemento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, { foo: [1, 2, 3], bar: [1, 2, 3] });\n\t\tlet profileMemento = myMemento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(profileMemento, memento);\n\n\t\tmemento = myMemento2.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, { foo: [1, 2, 3], bar: [1, 2, 3] });\n\t\tprofileMemento = myMemento2.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(profileMemento, memento);\n\n\t\t// Workspace\n\t\tmemento = myMemento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, { foo: 'Hello World', bar: 'Hello World' });\n\n\t\tmemento = myMemento2.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tassert.deepStrictEqual(memento, { foo: 'Hello World', bar: 'Hello World' });\n\t});\n\n\ttest('Clear Memento', () => {\n\t\tlet myMemento = new Memento('memento.test', storage);\n\n\t\t// Profile\n\t\tlet profileMemento = myMemento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tprofileMemento.foo = 'Hello World';\n\n\t\t// Workspace\n\t\tlet workspaceMemento = myMemento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tworkspaceMemento.bar = 'Hello World';\n\n\t\tmyMemento.saveMemento();\n\n\t\t// Clear\n\t\tstorage = disposables.add(new TestStorageService());\n\t\tMemento.clear(StorageScope.PROFILE);\n\t\tMemento.clear(StorageScope.WORKSPACE);\n\n\t\tmyMemento = new Memento('memento.test', storage);\n\t\tprofileMemento = myMemento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tworkspaceMemento = myMemento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\n\t\tassert.deepStrictEqual(profileMemento, {});\n\t\tassert.deepStrictEqual(workspaceMemento, {});\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"]}