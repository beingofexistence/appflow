{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/test/electron-sandbox/workbenchTestServices.ts"],"names":[],"mappings":"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","file":"workbenchTestServices.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { workbenchInstantiationService as browserWorkbenchInstantiationService, ITestInstantiationService, TestEncodingOracle, TestEnvironmentService, TestFileDialogService, TestFilesConfigurationService, TestFileService, TestLifecycleService, TestTextFileService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { ISharedProcessService } from 'vs/platform/ipc/electron-sandbox/services';\nimport { INativeHostService, IOSProperties, IOSStatistics } from 'vs/platform/native/common/native';\nimport { VSBuffer, VSBufferReadable, VSBufferReadableStream } from 'vs/base/common/buffer';\nimport { DisposableStore, IDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { IFileDialogService, INativeOpenDialogOptions } from 'vs/platform/dialogs/common/dialogs';\nimport { IPartsSplash } from 'vs/platform/theme/common/themeService';\nimport { IOpenedWindow, IOpenEmptyWindowOptions, IWindowOpenable, IOpenWindowOptions, IColorScheme } from 'vs/platform/window/common/window';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IEnvironmentService, INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IPathService } from 'vs/workbench/services/path/common/pathService';\nimport { ITextEditorService } from 'vs/workbench/services/textfile/common/textEditorService';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { AbstractNativeExtensionTipsService } from 'vs/platform/extensionManagement/common/extensionTipsService';\nimport { IExtensionManagementService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { IExtensionRecommendationNotificationService } from 'vs/platform/extensionRecommendations/common/extensionRecommendations';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { ModelService } from 'vs/editor/common/services/modelService';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IFilesConfigurationService } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IWorkingCopyBackupService } from 'vs/workbench/services/workingCopy/common/workingCopyBackup';\nimport { IWorkingCopyService } from 'vs/workbench/services/workingCopy/common/workingCopyService';\nimport { TestContextService } from 'vs/workbench/test/common/workbenchTestServices';\nimport { NativeTextFileService } from 'vs/workbench/services/textfile/electron-sandbox/nativeTextFileService';\nimport { insert } from 'vs/base/common/arrays';\nimport { Schemas } from 'vs/base/common/network';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { InMemoryFileSystemProvider } from 'vs/platform/files/common/inMemoryFilesystemProvider';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { FileUserDataProvider } from 'vs/platform/userData/common/fileUserDataProvider';\nimport { IWorkingCopyIdentifier } from 'vs/workbench/services/workingCopy/common/workingCopy';\nimport { NativeWorkingCopyBackupService } from 'vs/workbench/services/workingCopy/electron-sandbox/workingCopyBackupService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { UriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentityService';\nimport { UserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\n\nexport class TestSharedProcessService implements ISharedProcessService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tcreateRawConnection(): never { throw new Error('Not Implemented'); }\n\tgetChannel(channelName: string): any { return undefined; }\n\tregisterChannel(channelName: string, channel: any): void { }\n\tnotifyRestored(): void { }\n}\n\nexport class TestNativeHostService implements INativeHostService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\treadonly windowId = -1;\n\n\tonDidOpenWindow: Event<number> = Event.None;\n\tonDidMaximizeWindow: Event<number> = Event.None;\n\tonDidUnmaximizeWindow: Event<number> = Event.None;\n\tonDidFocusWindow: Event<number> = Event.None;\n\tonDidBlurWindow: Event<number> = Event.None;\n\tonDidResumeOS: Event<unknown> = Event.None;\n\tonDidChangeColorScheme = Event.None;\n\tonDidChangePassword = Event.None;\n\tonDidTriggerSystemContextMenu: Event<{ windowId: number; x: number; y: number }> = Event.None;\n\tonDidChangeDisplay = Event.None;\n\n\twindowCount = Promise.resolve(1);\n\tgetWindowCount(): Promise<number> { return this.windowCount; }\n\n\tasync getWindows(): Promise<IOpenedWindow[]> { return []; }\n\tasync getActiveWindowId(): Promise<number | undefined> { return undefined; }\n\n\topenWindow(options?: IOpenEmptyWindowOptions): Promise<void>;\n\topenWindow(toOpen: IWindowOpenable[], options?: IOpenWindowOptions): Promise<void>;\n\topenWindow(arg1?: IOpenEmptyWindowOptions | IWindowOpenable[], arg2?: IOpenWindowOptions): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tasync toggleFullScreen(): Promise<void> { }\n\tasync handleTitleDoubleClick(): Promise<void> { }\n\tasync isMaximized(): Promise<boolean> { return true; }\n\tasync maximizeWindow(): Promise<void> { }\n\tasync unmaximizeWindow(): Promise<void> { }\n\tasync minimizeWindow(): Promise<void> { }\n\tasync updateWindowControls(options: { height?: number; backgroundColor?: string; foregroundColor?: string }): Promise<void> { }\n\tasync setMinimumSize(width: number | undefined, height: number | undefined): Promise<void> { }\n\tasync saveWindowSplash(value: IPartsSplash): Promise<void> { }\n\tasync focusWindow(options?: { windowId?: number | undefined } | undefined): Promise<void> { }\n\tasync showMessageBox(options: Electron.MessageBoxOptions): Promise<Electron.MessageBoxReturnValue> { throw new Error('Method not implemented.'); }\n\tasync showSaveDialog(options: Electron.SaveDialogOptions): Promise<Electron.SaveDialogReturnValue> { throw new Error('Method not implemented.'); }\n\tasync showOpenDialog(options: Electron.OpenDialogOptions): Promise<Electron.OpenDialogReturnValue> { throw new Error('Method not implemented.'); }\n\tasync pickFileFolderAndOpen(options: INativeOpenDialogOptions): Promise<void> { }\n\tasync pickFileAndOpen(options: INativeOpenDialogOptions): Promise<void> { }\n\tasync pickFolderAndOpen(options: INativeOpenDialogOptions): Promise<void> { }\n\tasync pickWorkspaceAndOpen(options: INativeOpenDialogOptions): Promise<void> { }\n\tasync showItemInFolder(path: string): Promise<void> { }\n\tasync setRepresentedFilename(path: string): Promise<void> { }\n\tasync isAdmin(): Promise<boolean> { return false; }\n\tasync writeElevated(source: URI, target: URI): Promise<void> { }\n\tasync isRunningUnderARM64Translation(): Promise<boolean> { return false; }\n\tasync getOSProperties(): Promise<IOSProperties> { return Object.create(null); }\n\tasync getOSStatistics(): Promise<IOSStatistics> { return Object.create(null); }\n\tasync getOSVirtualMachineHint(): Promise<number> { return 0; }\n\tasync getOSColorScheme(): Promise<IColorScheme> { return { dark: true, highContrast: false }; }\n\tasync hasWSLFeatureInstalled(): Promise<boolean> { return false; }\n\tasync killProcess(): Promise<void> { }\n\tasync setDocumentEdited(edited: boolean): Promise<void> { }\n\tasync openExternal(url: string): Promise<boolean> { return false; }\n\tasync updateTouchBar(): Promise<void> { }\n\tasync moveItemToTrash(): Promise<void> { }\n\tasync newWindowTab(): Promise<void> { }\n\tasync showPreviousWindowTab(): Promise<void> { }\n\tasync showNextWindowTab(): Promise<void> { }\n\tasync moveWindowTabToNewWindow(): Promise<void> { }\n\tasync mergeAllWindowTabs(): Promise<void> { }\n\tasync toggleWindowTabsBar(): Promise<void> { }\n\tasync installShellCommand(): Promise<void> { }\n\tasync uninstallShellCommand(): Promise<void> { }\n\tasync notifyReady(): Promise<void> { }\n\tasync relaunch(options?: { addArgs?: string[] | undefined; removeArgs?: string[] | undefined } | undefined): Promise<void> { }\n\tasync reload(): Promise<void> { }\n\tasync closeWindow(): Promise<void> { }\n\tasync closeWindowById(): Promise<void> { }\n\tasync quit(): Promise<void> { }\n\tasync exit(code: number): Promise<void> { }\n\tasync openDevTools(options?: Electron.OpenDevToolsOptions | undefined): Promise<void> { }\n\tasync toggleDevTools(): Promise<void> { }\n\tasync resolveProxy(url: string): Promise<string | undefined> { return undefined; }\n\tasync findFreePort(startPort: number, giveUpAfter: number, timeout: number, stride?: number): Promise<number> { return -1; }\n\tasync readClipboardText(type?: 'selection' | 'clipboard' | undefined): Promise<string> { return ''; }\n\tasync writeClipboardText(text: string, type?: 'selection' | 'clipboard' | undefined): Promise<void> { }\n\tasync readClipboardFindText(): Promise<string> { return ''; }\n\tasync writeClipboardFindText(text: string): Promise<void> { }\n\tasync writeClipboardBuffer(format: string, buffer: VSBuffer, type?: 'selection' | 'clipboard' | undefined): Promise<void> { }\n\tasync readClipboardBuffer(format: string): Promise<VSBuffer> { return VSBuffer.wrap(Uint8Array.from([])); }\n\tasync hasClipboard(format: string, type?: 'selection' | 'clipboard' | undefined): Promise<boolean> { return false; }\n\tasync sendInputEvent(event: any): Promise<void> { }\n\tasync windowsGetStringRegKey(hive: 'HKEY_CURRENT_USER' | 'HKEY_LOCAL_MACHINE' | 'HKEY_CLASSES_ROOT' | 'HKEY_USERS' | 'HKEY_CURRENT_CONFIG', path: string, name: string): Promise<string | undefined> { return undefined; }\n\tasync profileRenderer(): Promise<any> { throw new Error(); }\n}\n\nexport class TestExtensionTipsService extends AbstractNativeExtensionTipsService {\n\n\tconstructor(\n\t\t@INativeEnvironmentService environmentService: INativeEnvironmentService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IExtensionManagementService extensionManagementService: IExtensionManagementService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@INativeHostService nativeHostService: INativeHostService,\n\t\t@IExtensionRecommendationNotificationService extensionRecommendationNotificationService: IExtensionRecommendationNotificationService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IProductService productService: IProductService,\n\t) {\n\t\tsuper(environmentService.userHome, nativeHostService, telemetryService, extensionManagementService, storageService, extensionRecommendationNotificationService, fileService, productService);\n\t}\n}\n\nexport function workbenchInstantiationService(overrides?: {\n\tenvironmentService?: (instantiationService: IInstantiationService) => IEnvironmentService;\n\tfileService?: (instantiationService: IInstantiationService) => IFileService;\n\tconfigurationService?: (instantiationService: IInstantiationService) => TestConfigurationService;\n\ttextFileService?: (instantiationService: IInstantiationService) => ITextFileService;\n\tpathService?: (instantiationService: IInstantiationService) => IPathService;\n\teditorService?: (instantiationService: IInstantiationService) => IEditorService;\n\tcontextKeyService?: (instantiationService: IInstantiationService) => IContextKeyService;\n\ttextEditorService?: (instantiationService: IInstantiationService) => ITextEditorService;\n}, disposables = new DisposableStore()): ITestInstantiationService {\n\tconst instantiationService = browserWorkbenchInstantiationService({\n\t\tworkingCopyBackupService: () => disposables.add(new TestNativeWorkingCopyBackupService()),\n\t\t...overrides\n\t}, disposables);\n\n\tinstantiationService.stub(INativeHostService, new TestNativeHostService());\n\n\treturn instantiationService;\n}\n\nexport class TestServiceAccessor {\n\tconstructor(\n\t\t@ILifecycleService public lifecycleService: TestLifecycleService,\n\t\t@ITextFileService public textFileService: TestTextFileService,\n\t\t@IFilesConfigurationService public filesConfigurationService: TestFilesConfigurationService,\n\t\t@IWorkspaceContextService public contextService: TestContextService,\n\t\t@IModelService public modelService: ModelService,\n\t\t@IFileService public fileService: TestFileService,\n\t\t@INativeHostService public nativeHostService: TestNativeHostService,\n\t\t@IFileDialogService public fileDialogService: TestFileDialogService,\n\t\t@IWorkingCopyBackupService public workingCopyBackupService: TestNativeWorkingCopyBackupService,\n\t\t@IWorkingCopyService public workingCopyService: IWorkingCopyService,\n\t\t@IEditorService public editorService: IEditorService\n\t) {\n\t}\n}\n\nexport class TestNativeTextFileServiceWithEncodingOverrides extends NativeTextFileService {\n\n\tprivate _testEncoding: TestEncodingOracle | undefined;\n\toverride get encoding(): TestEncodingOracle {\n\t\tif (!this._testEncoding) {\n\t\t\tthis._testEncoding = this._register(this.instantiationService.createInstance(TestEncodingOracle));\n\t\t}\n\n\t\treturn this._testEncoding;\n\t}\n}\n\nexport class TestNativeWorkingCopyBackupService extends NativeWorkingCopyBackupService implements IDisposable {\n\n\tprivate backupResourceJoiners: Function[];\n\tprivate discardBackupJoiners: Function[];\n\tdiscardedBackups: IWorkingCopyIdentifier[];\n\tdiscardedAllBackups: boolean;\n\tprivate pendingBackupsArr: Promise<void>[];\n\n\tconstructor() {\n\t\tconst environmentService = TestEnvironmentService;\n\t\tconst logService = new NullLogService();\n\t\tconst fileService = new FileService(logService);\n\t\tconst lifecycleService = new TestLifecycleService();\n\t\tsuper(environmentService as any, fileService, logService, lifecycleService);\n\n\t\tconst inMemoryFileSystemProvider = this._register(new InMemoryFileSystemProvider());\n\t\tthis._register(fileService.registerProvider(Schemas.inMemory, inMemoryFileSystemProvider));\n\t\tconst uriIdentityService = this._register(new UriIdentityService(fileService));\n\t\tconst userDataProfilesService = this._register(new UserDataProfilesService(environmentService, fileService, uriIdentityService, logService));\n\t\tthis._register(fileService.registerProvider(Schemas.vscodeUserData, this._register(new FileUserDataProvider(Schemas.file, inMemoryFileSystemProvider, Schemas.vscodeUserData, userDataProfilesService, uriIdentityService, logService))));\n\n\t\tthis.backupResourceJoiners = [];\n\t\tthis.discardBackupJoiners = [];\n\t\tthis.discardedBackups = [];\n\t\tthis.pendingBackupsArr = [];\n\t\tthis.discardedAllBackups = false;\n\n\t\tthis._register(fileService);\n\t\tthis._register(lifecycleService);\n\t}\n\n\ttestGetFileService(): IFileService {\n\t\treturn this.fileService;\n\t}\n\n\tasync waitForAllBackups(): Promise<void> {\n\t\tawait Promise.all(this.pendingBackupsArr);\n\t}\n\n\tjoinBackupResource(): Promise<void> {\n\t\treturn new Promise(resolve => this.backupResourceJoiners.push(resolve));\n\t}\n\n\toverride async backup(identifier: IWorkingCopyIdentifier, content?: VSBufferReadableStream | VSBufferReadable, versionId?: number, meta?: any, token?: CancellationToken): Promise<void> {\n\t\tconst p = super.backup(identifier, content, versionId, meta, token);\n\t\tconst removeFromPendingBackups = insert(this.pendingBackupsArr, p.then(undefined, undefined));\n\n\t\ttry {\n\t\t\tawait p;\n\t\t} finally {\n\t\t\tremoveFromPendingBackups();\n\t\t}\n\n\t\twhile (this.backupResourceJoiners.length) {\n\t\t\tthis.backupResourceJoiners.pop()!();\n\t\t}\n\t}\n\n\tjoinDiscardBackup(): Promise<void> {\n\t\treturn new Promise(resolve => this.discardBackupJoiners.push(resolve));\n\t}\n\n\toverride async discardBackup(identifier: IWorkingCopyIdentifier): Promise<void> {\n\t\tawait super.discardBackup(identifier);\n\t\tthis.discardedBackups.push(identifier);\n\n\t\twhile (this.discardBackupJoiners.length) {\n\t\t\tthis.discardBackupJoiners.pop()!();\n\t\t}\n\t}\n\n\toverride async discardBackups(filter?: { except: IWorkingCopyIdentifier[] }): Promise<void> {\n\t\tthis.discardedAllBackups = true;\n\n\t\treturn super.discardBackups(filter);\n\t}\n\n\tasync getBackupContents(identifier: IWorkingCopyIdentifier): Promise<string> {\n\t\tconst backupResource = this.toBackupResource(identifier);\n\n\t\tconst fileContents = await this.fileService.readFile(backupResource);\n\n\t\treturn fileContents.value.toString();\n\t}\n}\n"]}