{"version":3,"sources":["vs/workbench/contrib/codeEditor/electron-sandbox/selectionClipboard.ts"],"names":[],"mappings":"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","file":"selectionClipboard.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport * as platform from 'vs/base/common/platform';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { registerEditorContribution, EditorAction, ServicesAccessor, registerEditorAction, EditorContributionInstantiation } from 'vs/editor/browser/editorExtensions';\nimport { ConfigurationChangedEvent, EditorOption } from 'vs/editor/common/config/editorOptions';\nimport { ICursorSelectionChangedEvent } from 'vs/editor/common/cursorEvents';\nimport { Range } from 'vs/editor/common/core/range';\nimport { IEditorContribution, Handler } from 'vs/editor/common/editorCommon';\nimport { EndOfLinePreference } from 'vs/editor/common/model';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { SelectionClipboardContributionID } from 'vs/workbench/contrib/codeEditor/browser/selectionClipboard';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContribution, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\n\nexport class SelectionClipboard extends Disposable implements IEditorContribution {\n\tprivate static readonly SELECTION_LENGTH_LIMIT = 65536;\n\n\tconstructor(editor: ICodeEditor, @IClipboardService clipboardService: IClipboardService) {\n\t\tsuper();\n\n\t\tif (platform.isLinux) {\n\t\t\tlet isEnabled = editor.getOption(EditorOption.selectionClipboard);\n\n\t\t\tthis._register(editor.onDidChangeConfiguration((e: ConfigurationChangedEvent) => {\n\t\t\t\tif (e.hasChanged(EditorOption.selectionClipboard)) {\n\t\t\t\t\tisEnabled = editor.getOption(EditorOption.selectionClipboard);\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tconst setSelectionToClipboard = this._register(new RunOnceScheduler(() => {\n\t\t\t\tif (!editor.hasModel()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst model = editor.getModel();\n\t\t\t\tlet selections = editor.getSelections();\n\t\t\t\tselections = selections.slice(0);\n\t\t\t\tselections.sort(Range.compareRangesUsingStarts);\n\n\t\t\t\tlet resultLength = 0;\n\t\t\t\tfor (const sel of selections) {\n\t\t\t\t\tif (sel.isEmpty()) {\n\t\t\t\t\t\t// Only write if all cursors have selection\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tresultLength += model.getValueLengthInRange(sel);\n\t\t\t\t}\n\n\t\t\t\tif (resultLength > SelectionClipboard.SELECTION_LENGTH_LIMIT) {\n\t\t\t\t\t// This is a large selection!\n\t\t\t\t\t// => do not write it to the selection clipboard\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst result: string[] = [];\n\t\t\t\tfor (const sel of selections) {\n\t\t\t\t\tresult.push(model.getValueInRange(sel, EndOfLinePreference.TextDefined));\n\t\t\t\t}\n\n\t\t\t\tconst textToCopy = result.join(model.getEOL());\n\t\t\t\tclipboardService.writeText(textToCopy, 'selection');\n\t\t\t}, 100));\n\n\t\t\tthis._register(editor.onDidChangeCursorSelection((e: ICursorSelectionChangedEvent) => {\n\t\t\t\tif (!isEnabled) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (e.source === 'restoreState') {\n\t\t\t\t\t// do not set selection to clipboard if this selection change\n\t\t\t\t\t// was caused by restoring editors...\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tsetSelectionToClipboard.schedule();\n\t\t\t}));\n\t\t}\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t}\n}\n\nclass SelectionClipboardPastePreventer implements IWorkbenchContribution {\n\tconstructor(\n\t\t@IConfigurationService configurationService: IConfigurationService\n\t) {\n\t\tif (platform.isLinux) {\n\t\t\tdocument.addEventListener('mouseup', (e) => {\n\t\t\t\tif (e.button === 1) {\n\t\t\t\t\t// middle button\n\t\t\t\t\tconst config = configurationService.getValue<{ selectionClipboard: boolean }>('editor');\n\t\t\t\t\tif (!config.selectionClipboard) {\n\t\t\t\t\t\t// selection clipboard is disabled\n\t\t\t\t\t\t// try to stop the upcoming paste\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n}\n\nclass PasteSelectionClipboardAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.selectionClipboardPaste',\n\t\t\tlabel: nls.localize('actions.pasteSelectionClipboard', \"Paste Selection Clipboard\"),\n\t\t\talias: 'Paste Selection Clipboard',\n\t\t\tprecondition: EditorContextKeys.writable\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor, editor: ICodeEditor, args: any): Promise<void> {\n\t\tconst clipboardService = accessor.get(IClipboardService);\n\n\t\t// read selection clipboard\n\t\tconst text = await clipboardService.readText('selection');\n\n\t\teditor.trigger('keyboard', Handler.Paste, {\n\t\t\ttext: text,\n\t\t\tpasteOnNewLine: false,\n\t\t\tmulticursorText: null\n\t\t});\n\t}\n}\n\nregisterEditorContribution(SelectionClipboardContributionID, SelectionClipboard, EditorContributionInstantiation.Eager); // eager because it needs to listen to selection change events\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(SelectionClipboardPastePreventer, LifecyclePhase.Ready);\nif (platform.isLinux) {\n\tregisterEditorAction(PasteSelectionClipboardAction);\n}\n"]}