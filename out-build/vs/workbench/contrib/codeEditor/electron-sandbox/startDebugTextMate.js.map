{"version":3,"sources":["vs/workbench/contrib/codeEditor/electron-sandbox/startDebugTextMate.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAqBhG,MAAM,kBAAmB,SAAQ,aAAG;iBAEpB,MAAC,GAAU,SAAG,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;QAE9D;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,kCAAkC;gBACtC,KAAK,EAAE,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAoB,EAAE,IAAwC,CAAC,EAAE,QAAQ,EAAE,wCAAwC,EAAE;gBAClJ,QAAQ,EAAE,4BAAG,CAAQ,SAAS;gBAC9B,EAAE,EAAE,IAAI;aACR,CAAC,CAAC;QACJ,CAAC;QAEO,CAAC,CAAiB,YAAiB;YAC1C,MAAM,KAAK,GAAG,YAAY,CAAC,QAAQ,CAAC,kBAAkB,CAAC,CAAC,CAAQ,CAAC;YACjE,IAAI,KAAK,EAAE;gBACV,OAAO,KAAK,CAAC;aACb;YACD,OAAO,YAAY,CAAC,WAAW,CAAC,EAAE,EAAE,IAAI,EAAE,kBAAkB,CAAC,CAAC,CAAQ,CAAC;QACxE,CAAC;QAEO,CAAC,CAAO,KAAiB,EAAE,GAAW;YAC7C,MAAM,SAAS,GAAG,KAAK,CAAC,YAAY,EAAE,CAAC;YACvC,KAAK,CAAC,UAAU,CAAC,CAAC;oBACjB,KAAK,EAAE,IAAI,WAAG,CAAG,SAAS,qDAAoC,SAAS,oDAAmC;oBAC1G,IAAI,EAAE,GAAG;iBACT,CAAC,CAAC,CAAC;QACL,CAAC;QAED,KAAK,CAAC,GAAG,CAAC,QAA0B;YACnC,MAAM,eAAe,GAAG,QAAQ,CAAC,GAAG,CAAC,kCAAI,CAAyB,CAAC;YACnE,MAAM,YAAY,GAAG,QAAQ,CAAC,GAAG,CAAC,WAAG,CAAW,CAAC;YACjD,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,mBAAG,CAAY,CAAC;YACnD,MAAM,iBAAiB,GAAG,QAAQ,CAAC,GAAG,CAAC,uBAAG,CAAgB,CAAC;YAC3D,MAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,UAAG,CAAU,CAAC;YAC/C,MAAM,kBAAkB,GAAG,QAAQ,CAAC,GAAG,CAAC,yBAAI,CAA+B,CAAC;YAC5E,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAG,CAAY,CAAC;YACnD,MAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,WAAG,CAAU,CAAC;YAE/C,MAAM,UAAU,GAAG,IAAA,eAAG,EAAM,kBAAkB,CAAC,MAAM,EAAE,gBAAgB,IAAA,UAAG,GAAW,MAAM,CAAC,CAAC;YAC7F,MAAM,WAAW,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;YACzC,MAAM,MAAM,GAAG,aAAa,CAAC,YAAY,CAAC,UAAU,EAAE,EAAE,IAAI,EAAE,gBAAgB,EAAE,CAAC,CAAC;YAClF,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAiB,YAAY,CAAC,CAAC;YACnD,MAAM,MAAM,GAAG,CAAC,GAAW,EAAE,EAAE;gBAC9B,IAAI,CAAC,CAAC,CAAO,KAAK,EAAE,GAAG,GAAG,IAAI,CAAC,CAAC;gBAChC,YAAY,EAAE,CAAC;gBACf,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACjB,MAAM,CAAC,KAAK,EAAE,CAAC;YAChB,CAAC,CAAC;YACF,MAAM,WAAW,CAAC,UAAU,CAAC,CAAC,EAAE,OAAO,EAAE,UAAU,EAAE,CAAC,EAAE,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAAC;YAClF,MAAM,cAAc,GAAG,MAAM,aAAa,CAAC,UAAU,CAAC;gBACrD,QAAQ,EAAE,KAAK,CAAC,GAAG;gBACnB,OAAO,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE;aACzB,CAAC,CAAC;YACH,IAAI,CAAC,cAAc,EAAE;gBACpB,OAAO;aACP;YACD,MAAM,YAAY,GAAG,GAAG,EAAE;gBACzB,MAAM,OAAO,GAAG,iBAAiB,CAAC,eAAe,EAAE,CAAC;gBACpD,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;oBAC7B,IAAI,MAAM,CAAC,QAAQ,EAAE,EAAE;wBACtB,IAAI,MAAM,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,kBAAkB,CAAC,CAAC,CAAQ,QAAQ,EAAE,EAAE;4BAChF,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,YAAY,EAAE,CAAC,CAAC;yBACpD;qBACD;iBACD;YACF,CAAC,CAAC;YAEF,MAAM,CAAC,8DAA8D,CAAC,CAAC;YACvE,MAAM,CAAC,yBAAyB,UAAU,EAAE,CAAC,CAAC;YAE9C,eAAe,CAAC,cAAc,CAC7B,CAAC,GAAG,EAAE,EAAE;gBACP,IAAI,CAAC,CAAC,CAAO,KAAK,EAAE,GAAG,GAAG,IAAI,CAAC,CAAC;gBAChC,YAAY,EAAE,CAAC;gBACf,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;gBACjB,MAAM,CAAC,KAAK,EAAE,CAAC;YAChB,CAAC,EACD,GAAG,EAAE;YAEL,CAAC,CACD,CAAC;QACH,CAAC;;IAGF,IAAA,aAAG,EAAa,kBAAkB,CAAC,CAAC","file":"startDebugTextMate.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Action2, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { Categories } from 'vs/platform/action/common/actionCommonCategories';\nimport { ITextMateTokenizationService } from 'vs/workbench/services/textMate/browser/textMateTokenizationFeature';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { URI } from 'vs/base/common/uri';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { Constants } from 'vs/base/common/uint';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { ILoggerService } from 'vs/platform/log/common/log';\nimport { joinPath } from 'vs/base/common/resources';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\n\nclass StartDebugTextMate extends Action2 {\n\n\tprivate static resource = URI.parse(`inmemory:///tm-log.txt`);\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.startDebugTextMate',\n\t\t\ttitle: { value: nls.localize('startDebugTextMate', \"Start Text Mate Syntax Grammar Logging\"), original: 'Start Text Mate Syntax Grammar Logging' },\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\tprivate _getOrCreateModel(modelService: IModelService): ITextModel {\n\t\tconst model = modelService.getModel(StartDebugTextMate.resource);\n\t\tif (model) {\n\t\t\treturn model;\n\t\t}\n\t\treturn modelService.createModel('', null, StartDebugTextMate.resource);\n\t}\n\n\tprivate _append(model: ITextModel, str: string) {\n\t\tconst lineCount = model.getLineCount();\n\t\tmodel.applyEdits([{\n\t\t\trange: new Range(lineCount, Constants.MAX_SAFE_SMALL_INTEGER, lineCount, Constants.MAX_SAFE_SMALL_INTEGER),\n\t\t\ttext: str\n\t\t}]);\n\t}\n\n\tasync run(accessor: ServicesAccessor) {\n\t\tconst textMateService = accessor.get(ITextMateTokenizationService);\n\t\tconst modelService = accessor.get(IModelService);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\t\tconst hostService = accessor.get(IHostService);\n\t\tconst environmentService = accessor.get(INativeWorkbenchEnvironmentService);\n\t\tconst loggerService = accessor.get(ILoggerService);\n\t\tconst fileService = accessor.get(IFileService);\n\n\t\tconst pathInTemp = joinPath(environmentService.tmpDir, `vcode-tm-log-${generateUuid()}.txt`);\n\t\tawait fileService.createFile(pathInTemp);\n\t\tconst logger = loggerService.createLogger(pathInTemp, { name: 'debug textmate' });\n\t\tconst model = this._getOrCreateModel(modelService);\n\t\tconst append = (str: string) => {\n\t\t\tthis._append(model, str + '\\n');\n\t\t\tscrollEditor();\n\t\t\tlogger.info(str);\n\t\t\tlogger.flush();\n\t\t};\n\t\tawait hostService.openWindow([{ fileUri: pathInTemp }], { forceNewWindow: true });\n\t\tconst textEditorPane = await editorService.openEditor({\n\t\t\tresource: model.uri,\n\t\t\toptions: { pinned: true }\n\t\t});\n\t\tif (!textEditorPane) {\n\t\t\treturn;\n\t\t}\n\t\tconst scrollEditor = () => {\n\t\t\tconst editors = codeEditorService.listCodeEditors();\n\t\t\tfor (const editor of editors) {\n\t\t\t\tif (editor.hasModel()) {\n\t\t\t\t\tif (editor.getModel().uri.toString() === StartDebugTextMate.resource.toString()) {\n\t\t\t\t\t\teditor.revealLine(editor.getModel().getLineCount());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tappend(`// Open the file you want to test to the side and watch here`);\n\t\tappend(`// Output mirrored at ${pathInTemp}`);\n\n\t\ttextMateService.startDebugMode(\n\t\t\t(str) => {\n\t\t\t\tthis._append(model, str + '\\n');\n\t\t\t\tscrollEditor();\n\t\t\t\tlogger.info(str);\n\t\t\t\tlogger.flush();\n\t\t\t},\n\t\t\t() => {\n\n\t\t\t}\n\t\t);\n\t}\n}\n\nregisterAction2(StartDebugTextMate);\n"]}