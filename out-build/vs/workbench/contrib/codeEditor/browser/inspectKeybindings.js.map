{"version":3,"sources":["vs/workbench/contrib/codeEditor/browser/inspectKeybindings.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAUhG,MAAM,aAAc,SAAQ,aAAG;QAE9B;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,qCAAqC;gBACzC,KAAK,EAAE,EAAE,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAgC,EAAE,IAAsB,CAAC,EAAE,QAAQ,EAAE,sBAAsB,EAAE;gBACtH,QAAQ,EAAE,4BAAG,CAAQ,SAAS;gBAC9B,EAAE,EAAE,IAAI;aACR,CAAC,CAAC;QACJ,CAAC;QAED,GAAG,CAAC,QAA0B,EAAE,MAAmB;YAClD,MAAM,iBAAiB,GAAG,QAAQ,CAAC,GAAG,CAAC,gBAAG,CAAgB,CAAC;YAC3D,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,mBAAG,CAAY,CAAC;YAEnD,aAAa,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,iBAAiB,CAAC,cAAc,EAAE,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;QAC5H,CAAC;KACD;IAED,IAAA,aAAG,EAAa,aAAa,CAAC,CAAC;IAE/B,MAAM,iBAAkB,SAAQ,aAAG;QAElC;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,yCAAyC;gBAC7C,KAAK,EAAE,EAAE,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAoC,EAAE,IAA6B,CAAC,EAAE,QAAQ,EAAE,6BAA6B,EAAE;gBACxI,QAAQ,EAAE,4BAAG,CAAQ,SAAS;gBAC9B,EAAE,EAAE,IAAI;aACR,CAAC,CAAC;QACJ,CAAC;QAEQ,KAAK,CAAC,GAAG,CAAC,QAA0B;YAC5C,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,mBAAG,CAAY,CAAC;YACnD,MAAM,iBAAiB,GAAG,QAAQ,CAAC,GAAG,CAAC,gBAAG,CAAgB,CAAC;YAE3D,MAAM,aAAa,CAAC,UAAU,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,iBAAiB,CAAC,kBAAkB,EAAE,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;QACtI,CAAC;KACD;IAED,IAAA,aAAG,EAAa,iBAAiB,CAAC,CAAC","file":"inspectKeybindings.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { ServicesAccessor } from 'vs/editor/browser/editorExtensions';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { Categories } from 'vs/platform/action/common/actionCommonCategories';\nimport { Action2, registerAction2 } from 'vs/platform/actions/common/actions';\n\nclass InspectKeyMap extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.inspectKeyMappings',\n\t\t\ttitle: { value: localize('workbench.action.inspectKeyMap', \"Inspect Key Mappings\"), original: 'Inspect Key Mappings' },\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor, editor: ICodeEditor): void {\n\t\tconst keybindingService = accessor.get(IKeybindingService);\n\t\tconst editorService = accessor.get(IEditorService);\n\n\t\teditorService.openEditor({ resource: undefined, contents: keybindingService._dumpDebugInfo(), options: { pinned: true } });\n\t}\n}\n\nregisterAction2(InspectKeyMap);\n\nclass InspectKeyMapJSON extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.inspectKeyMappingsJSON',\n\t\t\ttitle: { value: localize('workbench.action.inspectKeyMapJSON', \"Inspect Key Mappings (JSON)\"), original: 'Inspect Key Mappings (JSON)' },\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst keybindingService = accessor.get(IKeybindingService);\n\n\t\tawait editorService.openEditor({ resource: undefined, contents: keybindingService._dumpDebugInfoJSON(), options: { pinned: true } });\n\t}\n}\n\nregisterAction2(InspectKeyMapJSON);\n"]}