{"version":3,"sources":["vs/workbench/contrib/codeEditor/browser/quickaccess/gotoLineQuickAccess.ts"],"names":[],"mappings":"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","file":"gotoLineQuickAccess.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { IKeyMods, IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IRange } from 'vs/editor/common/core/range';\nimport { AbstractGotoLineQuickAccessProvider } from 'vs/editor/contrib/quickAccess/browser/gotoLineQuickAccess';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IQuickAccessRegistry, Extensions as QuickaccesExtensions } from 'vs/platform/quickinput/common/quickAccess';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IWorkbenchEditorConfiguration } from 'vs/workbench/common/editor';\nimport { Action2, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { KeyMod, KeyCode } from 'vs/base/common/keyCodes';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { IQuickAccessTextEditorContext } from 'vs/editor/contrib/quickAccess/browser/editorNavigationQuickAccess';\nimport { ITextEditorOptions } from 'vs/platform/editor/common/editor';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\n\nexport class GotoLineQuickAccessProvider extends AbstractGotoLineQuickAccessProvider {\n\n\tprotected readonly onDidActiveTextEditorControlChange = this.editorService.onDidActiveEditorChange;\n\n\tconstructor(\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\t}\n\n\tprivate get configuration() {\n\t\tconst editorConfig = this.configurationService.getValue<IWorkbenchEditorConfiguration>().workbench?.editor;\n\n\t\treturn {\n\t\t\topenEditorPinned: !editorConfig?.enablePreviewFromQuickOpen || !editorConfig?.enablePreview\n\t\t};\n\t}\n\n\tprotected get activeTextEditorControl() {\n\t\treturn this.editorService.activeTextEditorControl;\n\t}\n\n\tprotected override gotoLocation(context: IQuickAccessTextEditorContext, options: { range: IRange; keyMods: IKeyMods; forceSideBySide?: boolean; preserveFocus?: boolean }): void {\n\n\t\t// Check for sideBySide use\n\t\tif ((options.keyMods.alt || (this.configuration.openEditorPinned && options.keyMods.ctrlCmd) || options.forceSideBySide) && this.editorService.activeEditor) {\n\t\t\tcontext.restoreViewState?.(); // since we open to the side, restore view state in this editor\n\n\t\t\tconst editorOptions: ITextEditorOptions = {\n\t\t\t\tselection: options.range,\n\t\t\t\tpinned: options.keyMods.ctrlCmd || this.configuration.openEditorPinned,\n\t\t\t\tpreserveFocus: options.preserveFocus\n\t\t\t};\n\n\t\t\tthis.editorGroupService.sideGroup.openEditor(this.editorService.activeEditor, editorOptions);\n\t\t}\n\n\t\t// Otherwise let parent handle it\n\t\telse {\n\t\t\tsuper.gotoLocation(context, options);\n\t\t}\n\t}\n}\n\nclass GotoLineAction extends Action2 {\n\n\tstatic readonly ID = 'workbench.action.gotoLine';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: GotoLineAction.ID,\n\t\t\ttitle: { value: localize('gotoLine', \"Go to Line/Column...\"), original: 'Go to Line/Column...' },\n\t\t\tf1: true,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: null,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyG,\n\t\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.KeyG }\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\taccessor.get(IQuickInputService).quickAccess.show(GotoLineQuickAccessProvider.PREFIX);\n\t}\n}\n\nregisterAction2(GotoLineAction);\n\nRegistry.as<IQuickAccessRegistry>(QuickaccesExtensions.Quickaccess).registerQuickAccessProvider({\n\tctor: GotoLineQuickAccessProvider,\n\tprefix: AbstractGotoLineQuickAccessProvider.PREFIX,\n\tplaceholder: localize('gotoLineQuickAccessPlaceholder', \"Type the line number and optional column to go to (e.g. 42:5 for line 42 and column 5).\"),\n\thelpEntries: [{ description: localize('gotoLineQuickAccess', \"Go to Line/Column\"), commandId: GotoLineAction.ID }]\n});\n"]}