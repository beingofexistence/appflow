{"version":3,"sources":["vs/workbench/contrib/codeEditor/browser/saveParticipants.ts"],"names":[],"mappings":"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","file":"saveParticipants.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport * as strings from 'vs/base/common/strings';\nimport { IActiveCodeEditor, isCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { trimTrailingWhitespace } from 'vs/editor/common/commands/trimTrailingWhitespaceCommand';\nimport { EditOperation } from 'vs/editor/common/core/editOperation';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { CodeActionProvider, CodeActionTriggerType } from 'vs/editor/common/languages';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { ILanguageFeaturesService } from 'vs/editor/common/services/languageFeatures';\nimport { ApplyCodeActionReason, applyCodeAction, getCodeActions } from 'vs/editor/contrib/codeAction/browser/codeAction';\nimport { CodeActionKind, CodeActionTriggerSource } from 'vs/editor/contrib/codeAction/common/types';\nimport { FormattingMode, formatDocumentRangesWithSelectedProvider, formatDocumentWithSelectedProvider } from 'vs/editor/contrib/format/browser/format';\nimport { SnippetController2 } from 'vs/editor/contrib/snippet/browser/snippetController2';\nimport { localize } from 'vs/nls';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IProgress, IProgressStep, Progress } from 'vs/platform/progress/common/progress';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions as WorkbenchContributionsExtensions } from 'vs/workbench/common/contributions';\nimport { SaveReason } from 'vs/workbench/common/editor';\nimport { getModifiedRanges } from 'vs/workbench/contrib/format/browser/formatModified';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { ITextFileEditorModel, ITextFileSaveParticipant, ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\n\nexport class TrimWhitespaceParticipant implements ITextFileSaveParticipant {\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService\n\t) {\n\t\t// Nothing\n\t}\n\n\tasync participate(model: ITextFileEditorModel, env: { reason: SaveReason }): Promise<void> {\n\t\tif (!model.textEditorModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.configurationService.getValue('files.trimTrailingWhitespace', { overrideIdentifier: model.textEditorModel.getLanguageId(), resource: model.resource })) {\n\t\t\tthis.doTrimTrailingWhitespace(model.textEditorModel, env.reason === SaveReason.AUTO);\n\t\t}\n\t}\n\n\tprivate doTrimTrailingWhitespace(model: ITextModel, isAutoSaved: boolean): void {\n\t\tlet prevSelection: Selection[] = [];\n\t\tlet cursors: Position[] = [];\n\n\t\tconst editor = findEditor(model, this.codeEditorService);\n\t\tif (editor) {\n\t\t\t// Find `prevSelection` in any case do ensure a good undo stack when pushing the edit\n\t\t\t// Collect active cursors in `cursors` only if `isAutoSaved` to avoid having the cursors jump\n\t\t\tprevSelection = editor.getSelections();\n\t\t\tif (isAutoSaved) {\n\t\t\t\tcursors = prevSelection.map(s => s.getPosition());\n\t\t\t\tconst snippetsRange = SnippetController2.get(editor)?.getSessionEnclosingRange();\n\t\t\t\tif (snippetsRange) {\n\t\t\t\t\tfor (let lineNumber = snippetsRange.startLineNumber; lineNumber <= snippetsRange.endLineNumber; lineNumber++) {\n\t\t\t\t\t\tcursors.push(new Position(lineNumber, model.getLineMaxColumn(lineNumber)));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst ops = trimTrailingWhitespace(model, cursors);\n\t\tif (!ops.length) {\n\t\t\treturn; // Nothing to do\n\t\t}\n\n\t\tmodel.pushEditOperations(prevSelection, ops, (_edits) => prevSelection);\n\t}\n}\n\nfunction findEditor(model: ITextModel, codeEditorService: ICodeEditorService): IActiveCodeEditor | null {\n\tlet candidate: IActiveCodeEditor | null = null;\n\n\tif (model.isAttachedToEditor()) {\n\t\tfor (const editor of codeEditorService.listCodeEditors()) {\n\t\t\tif (editor.hasModel() && editor.getModel() === model) {\n\t\t\t\tif (editor.hasTextFocus()) {\n\t\t\t\t\treturn editor; // favour focused editor if there are multiple\n\t\t\t\t}\n\n\t\t\t\tcandidate = editor;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn candidate;\n}\n\nexport class FinalNewLineParticipant implements ITextFileSaveParticipant {\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService\n\t) {\n\t\t// Nothing\n\t}\n\n\tasync participate(model: ITextFileEditorModel, _env: { reason: SaveReason }): Promise<void> {\n\t\tif (!model.textEditorModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.configurationService.getValue('files.insertFinalNewline', { overrideIdentifier: model.textEditorModel.getLanguageId(), resource: model.resource })) {\n\t\t\tthis.doInsertFinalNewLine(model.textEditorModel);\n\t\t}\n\t}\n\n\tprivate doInsertFinalNewLine(model: ITextModel): void {\n\t\tconst lineCount = model.getLineCount();\n\t\tconst lastLine = model.getLineContent(lineCount);\n\t\tconst lastLineIsEmptyOrWhitespace = strings.lastNonWhitespaceIndex(lastLine) === -1;\n\n\t\tif (!lineCount || lastLineIsEmptyOrWhitespace) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst edits = [EditOperation.insert(new Position(lineCount, model.getLineMaxColumn(lineCount)), model.getEOL())];\n\t\tconst editor = findEditor(model, this.codeEditorService);\n\t\tif (editor) {\n\t\t\teditor.executeEdits('insertFinalNewLine', edits, editor.getSelections());\n\t\t} else {\n\t\t\tmodel.pushEditOperations([], edits, () => null);\n\t\t}\n\t}\n}\n\nexport class TrimFinalNewLinesParticipant implements ITextFileSaveParticipant {\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService\n\t) {\n\t\t// Nothing\n\t}\n\n\tasync participate(model: ITextFileEditorModel, env: { reason: SaveReason }): Promise<void> {\n\t\tif (!model.textEditorModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.configurationService.getValue('files.trimFinalNewlines', { overrideIdentifier: model.textEditorModel.getLanguageId(), resource: model.resource })) {\n\t\t\tthis.doTrimFinalNewLines(model.textEditorModel, env.reason === SaveReason.AUTO);\n\t\t}\n\t}\n\n\t/**\n\t * returns 0 if the entire file is empty\n\t */\n\tprivate findLastNonEmptyLine(model: ITextModel): number {\n\t\tfor (let lineNumber = model.getLineCount(); lineNumber >= 1; lineNumber--) {\n\t\t\tconst lineContent = model.getLineContent(lineNumber);\n\t\t\tif (lineContent.length > 0) {\n\t\t\t\t// this line has content\n\t\t\t\treturn lineNumber;\n\t\t\t}\n\t\t}\n\t\t// no line has content\n\t\treturn 0;\n\t}\n\n\tprivate doTrimFinalNewLines(model: ITextModel, isAutoSaved: boolean): void {\n\t\tconst lineCount = model.getLineCount();\n\n\t\t// Do not insert new line if file does not end with new line\n\t\tif (lineCount === 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet prevSelection: Selection[] = [];\n\t\tlet cannotTouchLineNumber = 0;\n\t\tconst editor = findEditor(model, this.codeEditorService);\n\t\tif (editor) {\n\t\t\tprevSelection = editor.getSelections();\n\t\t\tif (isAutoSaved) {\n\t\t\t\tfor (let i = 0, len = prevSelection.length; i < len; i++) {\n\t\t\t\t\tconst positionLineNumber = prevSelection[i].positionLineNumber;\n\t\t\t\t\tif (positionLineNumber > cannotTouchLineNumber) {\n\t\t\t\t\t\tcannotTouchLineNumber = positionLineNumber;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst lastNonEmptyLine = this.findLastNonEmptyLine(model);\n\t\tconst deleteFromLineNumber = Math.max(lastNonEmptyLine + 1, cannotTouchLineNumber + 1);\n\t\tconst deletionRange = model.validateRange(new Range(deleteFromLineNumber, 1, lineCount, model.getLineMaxColumn(lineCount)));\n\n\t\tif (deletionRange.isEmpty()) {\n\t\t\treturn;\n\t\t}\n\n\t\tmodel.pushEditOperations(prevSelection, [EditOperation.delete(deletionRange)], _edits => prevSelection);\n\n\t\teditor?.setSelections(prevSelection);\n\t}\n}\n\nclass FormatOnSaveParticipant implements ITextFileSaveParticipant {\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t) {\n\t\t// Nothing\n\t}\n\n\tasync participate(model: ITextFileEditorModel, env: { reason: SaveReason }, progress: IProgress<IProgressStep>, token: CancellationToken): Promise<void> {\n\t\tif (!model.textEditorModel) {\n\t\t\treturn;\n\t\t}\n\t\tif (env.reason === SaveReason.AUTO) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst textEditorModel = model.textEditorModel;\n\t\tconst overrides = { overrideIdentifier: textEditorModel.getLanguageId(), resource: textEditorModel.uri };\n\n\t\tconst nestedProgress = new Progress<{ displayName?: string; extensionId?: ExtensionIdentifier }>(provider => {\n\t\t\tprogress.report({\n\t\t\t\tmessage: localize(\n\t\t\t\t\t{ key: 'formatting2', comment: ['[configure]({1}) is a link. Only translate `configure`. Do not change brackets and parentheses or {1}'] },\n\t\t\t\t\t\"Running '{0}' Formatter ([configure]({1})).\",\n\t\t\t\t\tprovider.displayName || provider.extensionId && provider.extensionId.value || '???',\n\t\t\t\t\t'command:workbench.action.openSettings?%5B%22editor.formatOnSave%22%5D'\n\t\t\t\t)\n\t\t\t});\n\t\t});\n\n\t\tconst enabled = this.configurationService.getValue<boolean>('editor.formatOnSave', overrides);\n\t\tif (!enabled) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst editorOrModel = findEditor(textEditorModel, this.codeEditorService) || textEditorModel;\n\t\tconst mode = this.configurationService.getValue<'file' | 'modifications' | 'modificationsIfAvailable'>('editor.formatOnSaveMode', overrides);\n\n\t\tif (mode === 'file') {\n\t\t\tawait this.instantiationService.invokeFunction(formatDocumentWithSelectedProvider, editorOrModel, FormattingMode.Silent, nestedProgress, token);\n\n\t\t} else {\n\t\t\tconst ranges = await this.instantiationService.invokeFunction(getModifiedRanges, isCodeEditor(editorOrModel) ? editorOrModel.getModel() : editorOrModel);\n\t\t\tif (ranges === null && mode === 'modificationsIfAvailable') {\n\t\t\t\t// no SCM, fallback to formatting the whole file iff wanted\n\t\t\t\tawait this.instantiationService.invokeFunction(formatDocumentWithSelectedProvider, editorOrModel, FormattingMode.Silent, nestedProgress, token);\n\n\t\t\t} else if (ranges) {\n\t\t\t\t// formatted modified ranges\n\t\t\t\tawait this.instantiationService.invokeFunction(formatDocumentRangesWithSelectedProvider, editorOrModel, ranges, FormattingMode.Silent, nestedProgress, token);\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass CodeActionOnSaveParticipant implements ITextFileSaveParticipant {\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ILanguageFeaturesService private readonly languageFeaturesService: ILanguageFeaturesService,\n\t) { }\n\n\tasync participate(model: ITextFileEditorModel, env: { reason: SaveReason }, progress: IProgress<IProgressStep>, token: CancellationToken): Promise<void> {\n\t\tif (!model.textEditorModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst textEditorModel = model.textEditorModel;\n\t\tconst settingsOverrides = { overrideIdentifier: textEditorModel.getLanguageId(), resource: textEditorModel.uri };\n\n\t\t// Convert boolean values to strings\n\t\tconst setting = this.configurationService.getValue<{ [kind: string]: string | boolean }>('editor.codeActionsOnSave', settingsOverrides);\n\t\tif (!setting) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (env.reason === SaveReason.AUTO) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst convertedSetting: { [kind: string]: string } = {};\n\t\tfor (const key in setting) {\n\t\t\tif (typeof setting[key] === 'boolean') {\n\t\t\t\tconvertedSetting[key] = setting[key] ? 'explicit' : 'never';\n\t\t\t} else if (typeof setting[key] === 'string') {\n\t\t\t\tconvertedSetting[key] = setting[key] as string;\n\t\t\t}\n\t\t}\n\n\t\tconst codeActionsOnSave = this.createCodeActionsOnSave(Object.keys(convertedSetting));\n\n\t\tif (!Array.isArray(setting)) {\n\t\t\tcodeActionsOnSave.sort((a, b) => {\n\t\t\t\tif (CodeActionKind.SourceFixAll.contains(a)) {\n\t\t\t\t\tif (CodeActionKind.SourceFixAll.contains(b)) {\n\t\t\t\t\t\treturn 0;\n\t\t\t\t\t}\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t\tif (CodeActionKind.SourceFixAll.contains(b)) {\n\t\t\t\t\treturn 1;\n\t\t\t\t}\n\t\t\t\treturn 0;\n\t\t\t});\n\t\t}\n\n\t\tif (!codeActionsOnSave.length) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst excludedActions = Object.keys(setting)\n\t\t\t.filter(x => convertedSetting[x] === 'never' || false)\n\t\t\t.map(x => new CodeActionKind(x));\n\n\t\tprogress.report({ message: localize('codeaction', \"Quick Fixes\") });\n\n\t\tconst filteredSaveList = codeActionsOnSave.filter(x => convertedSetting[x.value] === 'always' || (convertedSetting[x.value] === 'explicit') && env.reason === SaveReason.EXPLICIT);\n\n\t\tawait this.applyOnSaveActions(textEditorModel, filteredSaveList, excludedActions, progress, token);\n\t}\n\n\tprivate createCodeActionsOnSave(settingItems: readonly string[]): CodeActionKind[] {\n\t\tconst kinds = settingItems.map(x => new CodeActionKind(x));\n\n\t\t// Remove subsets\n\t\treturn kinds.filter(kind => {\n\t\t\treturn kinds.every(otherKind => otherKind.equals(kind) || !otherKind.contains(kind));\n\t\t});\n\t}\n\n\tprivate async applyOnSaveActions(model: ITextModel, codeActionsOnSave: readonly CodeActionKind[], excludes: readonly CodeActionKind[], progress: IProgress<IProgressStep>, token: CancellationToken): Promise<void> {\n\n\t\tconst getActionProgress = new class implements IProgress<CodeActionProvider> {\n\t\t\tprivate _names = new Set<string>();\n\t\t\tprivate _report(): void {\n\t\t\t\tprogress.report({\n\t\t\t\t\tmessage: localize(\n\t\t\t\t\t\t{ key: 'codeaction.get2', comment: ['[configure]({1}) is a link. Only translate `configure`. Do not change brackets and parentheses or {1}'] },\n\t\t\t\t\t\t\"Getting code actions from '{0}' ([configure]({1})).\",\n\t\t\t\t\t\t[...this._names].map(name => `'${name}'`).join(', '),\n\t\t\t\t\t\t'command:workbench.action.openSettings?%5B%22editor.codeActionsOnSave%22%5D'\n\t\t\t\t\t)\n\t\t\t\t});\n\t\t\t}\n\t\t\treport(provider: CodeActionProvider) {\n\t\t\t\tif (provider.displayName && !this._names.has(provider.displayName)) {\n\t\t\t\t\tthis._names.add(provider.displayName);\n\t\t\t\t\tthis._report();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tfor (const codeActionKind of codeActionsOnSave) {\n\t\t\tconst actionsToRun = await this.getActionsToRun(model, codeActionKind, excludes, getActionProgress, token);\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\tactionsToRun.dispose();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tfor (const action of actionsToRun.validActions) {\n\t\t\t\t\tprogress.report({ message: localize('codeAction.apply', \"Applying code action '{0}'.\", action.action.title) });\n\t\t\t\t\tawait this.instantiationService.invokeFunction(applyCodeAction, action, ApplyCodeActionReason.OnSave, {}, token);\n\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch {\n\t\t\t\t// Failure to apply a code action should not block other on save actions\n\t\t\t} finally {\n\t\t\t\tactionsToRun.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getActionsToRun(model: ITextModel, codeActionKind: CodeActionKind, excludes: readonly CodeActionKind[], progress: IProgress<CodeActionProvider>, token: CancellationToken) {\n\t\treturn getCodeActions(this.languageFeaturesService.codeActionProvider, model, model.getFullModelRange(), {\n\t\t\ttype: CodeActionTriggerType.Auto,\n\t\t\ttriggerAction: CodeActionTriggerSource.OnSave,\n\t\t\tfilter: { include: codeActionKind, excludes: excludes, includeSourceActions: true },\n\t\t}, progress, token);\n\t}\n}\n\nexport class SaveParticipantsContribution extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerSaveParticipants();\n\t}\n\n\tprivate registerSaveParticipants(): void {\n\t\tthis._register(this.textFileService.files.addSaveParticipant(this.instantiationService.createInstance(TrimWhitespaceParticipant)));\n\t\tthis._register(this.textFileService.files.addSaveParticipant(this.instantiationService.createInstance(CodeActionOnSaveParticipant)));\n\t\tthis._register(this.textFileService.files.addSaveParticipant(this.instantiationService.createInstance(FormatOnSaveParticipant)));\n\t\tthis._register(this.textFileService.files.addSaveParticipant(this.instantiationService.createInstance(FinalNewLineParticipant)));\n\t\tthis._register(this.textFileService.files.addSaveParticipant(this.instantiationService.createInstance(TrimFinalNewLinesParticipant)));\n\t}\n}\n\nconst workbenchContributionsRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchContributionsExtensions.Workbench);\nworkbenchContributionsRegistry.registerWorkbenchContribution(SaveParticipantsContribution, LifecyclePhase.Restored);\n"]}