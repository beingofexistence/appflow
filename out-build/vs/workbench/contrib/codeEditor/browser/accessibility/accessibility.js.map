{"version":3,"sources":["vs/workbench/contrib/codeEditor/browser/accessibility/accessibility.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAchG,MAAM,sBAAuB,SAAQ,aAAG;QAEvC;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,mDAAmD;gBACvD,KAAK,EAAE,EAAE,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAwB,EAAE,IAAyC,CAAC,EAAE,QAAQ,EAAE,yCAAyC,EAAE;gBACxJ,EAAE,EAAE,IAAI;gBACR,UAAU,EAAE,CAAC;wBACZ,OAAO,EAAE,iDAA6B;wBACtC,MAAM,EAAE,8CAAoC,EAAE;wBAC9C,IAAI,EAAE,iCAAI;qBACV;oBACD;wBACC,OAAO,EAAE,0CAAuB,0BAAe;wBAC/C,KAAK,EAAE,EAAE,OAAO,EAAE,0CAAuB,0BAAe,EAAE;wBAC1D,MAAM,EAAE,8CAAoC,EAAE;qBAC9C,CAAC;aACF,CAAC,CAAC;QACJ,CAAC;QAED,KAAK,CAAC,GAAG,CAAC,QAA0B;YACnC,MAAM,oBAAoB,GAAG,QAAQ,CAAC,GAAG,CAAC,mBAAG,CAAmB,CAAC;YACjE,MAAM,oBAAoB,GAAG,QAAQ,CAAC,GAAG,CAAC,mBAAG,CAAmB,CAAC;YACjE,MAAM,uBAAuB,GAAG,oBAAoB,CAAC,uBAAuB,EAAE,CAAC;YAC/E,oBAAoB,CAAC,WAAW,CAAC,6BAA6B,EAAE,uBAAuB,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,mCAA2B,CAAC;YAClI,IAAA,UAAG,EAAG,uBAAuB,CAAC,CAAC,CAAC,wCAAoB,CAAC,wBAAwB,CAAC,CAAC,CAAC,wCAAoB,CAAC,uBAAuB,CAAC,CAAC;QAC/H,CAAC;KACD;IAED,IAAA,aAAG,EAAa,sBAAsB,CAAC,CAAC","file":"accessibility.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./accessibility';\nimport * as nls from 'vs/nls';\nimport { ConfigurationTarget, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { IAccessibilityService } from 'vs/platform/accessibility/common/accessibility';\nimport { Action2, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { accessibilityHelpIsShown } from 'vs/workbench/contrib/accessibility/browser/accessibilityConfiguration';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { alert } from 'vs/base/browser/ui/aria/aria';\nimport { AccessibilityHelpNLS } from 'vs/editor/common/standaloneStrings';\n\nclass ToggleScreenReaderMode extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.toggleScreenReaderAccessibilityMode',\n\t\t\ttitle: { value: nls.localize('toggleScreenReaderMode', \"Toggle Screen Reader Accessibility Mode\"), original: 'Toggle Screen Reader Accessibility Mode' },\n\t\t\tf1: true,\n\t\t\tkeybinding: [{\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyE,\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib + 10,\n\t\t\t\twhen: accessibilityHelpIsShown\n\t\t\t},\n\t\t\t{\n\t\t\t\tprimary: KeyMod.Alt | KeyCode.F1 | KeyMod.Shift,\n\t\t\t\tlinux: { primary: KeyMod.Alt | KeyCode.F4 | KeyMod.Shift },\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib + 10,\n\t\t\t}]\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst accessibiiltyService = accessor.get(IAccessibilityService);\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\tconst isScreenReaderOptimized = accessibiiltyService.isScreenReaderOptimized();\n\t\tconfigurationService.updateValue('editor.accessibilitySupport', isScreenReaderOptimized ? 'off' : 'on', ConfigurationTarget.USER);\n\t\talert(isScreenReaderOptimized ? AccessibilityHelpNLS.screenReaderModeDisabled : AccessibilityHelpNLS.screenReaderModeEnabled);\n\t}\n}\n\nregisterAction2(ToggleScreenReaderMode);\n"]}