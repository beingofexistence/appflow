{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/codeEditor/browser/editorFeatures.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;IAWhG,IAAM,0BAA0B,GAAhC,MAAM,0BAA2B,SAAQ,eAAG;QAI3C,YACqB,iBAAsB,EACnB,CAA2C;YAElE,KAAK,EAAE,CAAC;YAFgC,MAAC,GAAD,CAAC,CAAyB;YAJ3D,MAAC,GAAe,KAAK,CAAC;YAQ7B,IAAI,CAAC,CAAC,CAAS,iBAAiB,CAAC,sBAAsB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,EAAa,CAAC,CAAC,CAAC;YACpF,IAAI,CAAC,CAAC,CAAS,iBAAiB,CAAC,sBAAsB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,EAAa,CAAC,CAAC,CAAC;YACpF,IAAI,iBAAiB,CAAC,eAAe,EAAE,CAAC,MAAM,GAAG,CAAC,IAAI,iBAAiB,CAAC,eAAe,EAAE,CAAC,MAAM,GAAG,CAAC,EAAE;gBACrG,IAAI,CAAC,CAAC,EAAa,CAAC;aACpB;QACF,CAAC;QAEO,CAAC;YACR,IAAI,IAAI,CAAC,CAAC,EAAc;gBACvB,OAAO;aACP;YACD,IAAI,CAAC,CAAC,GAAe,IAAI,CAAC;YAE1B,kCAAkC;YAClC,MAAM,cAAc,GAAG,IAAA,oBAAG,GAAgB,CAAC;YAC3C,KAAK,MAAM,OAAO,IAAI,cAAc,EAAE;gBACrC,IAAI;oBACH,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAqB,cAAc,CAAC,OAAO,CAAC,CAAC;oBACpE,IAAI,OAAqB,QAAS,CAAC,OAAO,KAAK,UAAU,EAAE;wBAC1D,IAAI,CAAC,CAAC,CAAuB,QAAS,CAAC,CAAC;qBACxC;iBACD;gBAAC,OAAO,GAAG,EAAE;oBACb,IAAA,WAAE,EAAgB,GAAG,CAAC,CAAC;iBACvB;aACD;QACF,CAAC;KACD,CAAA;IApCK,0BAA0B;QAK7B,WAAA,uBAAG,CAAA;QACH,WAAA,mBAAG,CAAA;OANA,0BAA0B,CAoC/B;IAED,MAAM,iBAAiB,GAAG,cAAG,CAAM,EAAE,CAAkC,0BAAU,CAAC,SAAS,CAAC,CAAC;IAC7F,iBAAiB,CAAC,6BAA6B,CAAC,0BAA0B,+BAAuB,CAAC","file":"editorFeatures.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { getEditorFeatures } from 'vs/editor/common/editorFeatures';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions } from 'vs/workbench/common/contributions';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\n\nclass EditorFeaturesInstantiator extends Disposable implements IWorkbenchContribution {\n\n\tprivate _instantiated = false;\n\n\tconstructor(\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(codeEditorService.onWillCreateCodeEditor(() => this._instantiate()));\n\t\tthis._register(codeEditorService.onWillCreateDiffEditor(() => this._instantiate()));\n\t\tif (codeEditorService.listCodeEditors().length > 0 || codeEditorService.listDiffEditors().length > 0) {\n\t\t\tthis._instantiate();\n\t\t}\n\t}\n\n\tprivate _instantiate(): void {\n\t\tif (this._instantiated) {\n\t\t\treturn;\n\t\t}\n\t\tthis._instantiated = true;\n\n\t\t// Instantiate all editor features\n\t\tconst editorFeatures = getEditorFeatures();\n\t\tfor (const feature of editorFeatures) {\n\t\t\ttry {\n\t\t\t\tconst instance = this._instantiationService.createInstance(feature);\n\t\t\t\tif (typeof (<IDisposable>instance).dispose === 'function') {\n\t\t\t\t\tthis._register((<IDisposable>instance));\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tonUnexpectedError(err);\n\t\t\t}\n\t\t}\n\t}\n}\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(Extensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(EditorFeaturesInstantiator, LifecyclePhase.Ready);\n"]}