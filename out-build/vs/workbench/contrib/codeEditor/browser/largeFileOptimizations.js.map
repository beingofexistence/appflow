{"version":3,"sources":["vs/workbench/contrib/codeEditor/browser/largeFileOptimizations.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAWhG;;OAEG;IACI,IAAM,IAAI,GAAV,MAAM,IAA6B,SAAQ,eAAG;iBAE7B,OAAE,GAAG,6CAAH,AAAgD,CAAC;QAE1E,YACkB,CAAoB,EACE,CAAyB,EACxB,CAA0B;YAElE,KAAK,EAAE,CAAC;YAJS,MAAC,GAAD,CAAC,CAAmB;YACE,MAAC,GAAD,CAAC,CAAwB;YACxB,MAAC,GAAD,CAAC,CAAyB;YAIlE,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAO,gBAAgB,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,EAAQ,CAAC,CAAC,CAAC;YACrE,IAAI,CAAC,CAAC,EAAQ,CAAC;QAChB,CAAC;QAEO,CAAC;YACR,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAO,QAAQ,EAAE,CAAC;YACtC,IAAI,CAAC,KAAK,EAAE;gBACX,OAAO;aACP;YAED,IAAI,KAAK,CAAC,yBAAyB,EAAE,EAAE;gBACtC,MAAM,OAAO,GAAG,GAAG,CAAC,QAAQ,CAC3B;oBACC,GAAG,EAAE,WAAW;oBAChB,OAAO,EAAE;wBACR,iCAAiC;qBACjC;8CACD,EACD,IAA8L,EAC9L,IAAI,CAAC,GAAG,CAAM,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAC7B,CAAC;gBAEF,IAAI,CAAC,CAAC,CAAoB,MAAM,CAAC,uBAAQ,CAAC,IAAI,EAAE,OAAO,EAAE;oBACxD;wBACC,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAqB,EAAE,IAA4B,CAAC;wBACxE,GAAG,EAAE,GAAG,EAAE;4BACT,IAAI,CAAC,CAAC,CAAqB,WAAW,CAAC,+BAA+B,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;gCACxF,IAAI,CAAC,CAAC,CAAoB,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAkB,EAAE,IAA8D,CAAC,CAAC,CAAC;4BAClI,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE;gCACV,IAAI,CAAC,CAAC,CAAoB,KAAK,CAAC,GAAG,CAAC,CAAC;4BACtC,CAAC,CAAC,CAAC;wBACJ,CAAC;qBACD;iBACD,EAAE,EAAE,cAAc,EAAE,EAAE,EAAE,EAAE,6CAA6C,EAAE,EAAE,CAAC,CAAC;aAC9E;QACF,CAAC;;IA9CW,oBAAI;mBAAJ,IAAI;QAMd,WAAA,kBAAG,CAAA;QACH,WAAA,mBAAG,CAAA;OAPO,IAAI,CA+ChB;IAED,IAAA,sBAAG,EAAwB,IAAI,CAAyB,EAAE,EAAE,IAAI,2DAA2E,CAAC","file":"largeFileOptimizations.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as path from 'vs/base/common/path';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorContributionInstantiation, registerEditorContribution } from 'vs/editor/browser/editorExtensions';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\n\n/**\n * Shows a message when opening a large file which has been memory optimized (and features disabled).\n */\nexport class LargeFileOptimizationsWarner extends Disposable implements IEditorContribution {\n\n\tpublic static readonly ID = 'editor.contrib.largeFileOptimizationsWarner';\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(this._editor.onDidChangeModel((e) => this._update()));\n\t\tthis._update();\n\t}\n\n\tprivate _update(): void {\n\t\tconst model = this._editor.getModel();\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (model.isTooLargeForTokenization()) {\n\t\t\tconst message = nls.localize(\n\t\t\t\t{\n\t\t\t\t\tkey: 'largeFile',\n\t\t\t\t\tcomment: [\n\t\t\t\t\t\t'Variable 0 will be a file name.'\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t\"{0}: tokenization, wrapping, folding, codelens, word highlighting and sticky scroll have been turned off for this large file in order to reduce memory usage and avoid freezing or crashing.\",\n\t\t\t\tpath.basename(model.uri.path)\n\t\t\t);\n\n\t\t\tthis._notificationService.prompt(Severity.Info, message, [\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize('removeOptimizations', \"Forcefully Enable Features\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tthis._configurationService.updateValue(`editor.largeFileOptimizations`, false).then(() => {\n\t\t\t\t\t\t\tthis._notificationService.info(nls.localize('reopenFilePrompt', \"Please reopen file in order for this setting to take effect.\"));\n\t\t\t\t\t\t}, (err) => {\n\t\t\t\t\t\t\tthis._notificationService.error(err);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t], { neverShowAgain: { id: 'editor.contrib.largeFileOptimizationsWarner' } });\n\t\t}\n\t}\n}\n\nregisterEditorContribution(LargeFileOptimizationsWarner.ID, LargeFileOptimizationsWarner, EditorContributionInstantiation.AfterFirstRender);\n"]}