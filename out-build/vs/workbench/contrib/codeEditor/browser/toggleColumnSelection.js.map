{"version":3,"sources":["vs/workbench/contrib/codeEditor/browser/toggleColumnSelection.ts"],"names":[],"mappings":"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","file":"toggleColumnSelection.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { Action2, MenuId, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { EditorOption } from 'vs/editor/common/config/editorOptions';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { CoreNavigationCommands } from 'vs/editor/browser/coreCommands';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\n\nexport class ToggleColumnSelectionAction extends Action2 {\n\n\tstatic readonly ID = 'editor.action.toggleColumnSelection';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ToggleColumnSelectionAction.ID,\n\t\t\ttitle: {\n\t\t\t\tvalue: localize('toggleColumnSelection', \"Toggle Column Selection Mode\"),\n\t\t\t\tmnemonicTitle: localize({ key: 'miColumnSelection', comment: ['&& denotes a mnemonic'] }, \"Column &&Selection Mode\"),\n\t\t\t\toriginal: 'Toggle Column Selection Mode'\n\t\t\t},\n\t\t\tf1: true,\n\t\t\ttoggled: ContextKeyExpr.equals('config.editor.columnSelection', true),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.MenubarSelectionMenu,\n\t\t\t\tgroup: '4_config',\n\t\t\t\torder: 2\n\t\t\t}\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\n\t\tconst oldValue = configurationService.getValue('editor.columnSelection');\n\t\tconst codeEditor = this._getCodeEditor(codeEditorService);\n\t\tawait configurationService.updateValue('editor.columnSelection', !oldValue);\n\t\tconst newValue = configurationService.getValue('editor.columnSelection');\n\t\tif (!codeEditor || codeEditor !== this._getCodeEditor(codeEditorService) || oldValue === newValue || !codeEditor.hasModel() || typeof oldValue !== 'boolean' || typeof newValue !== 'boolean') {\n\t\t\treturn;\n\t\t}\n\t\tconst viewModel = codeEditor._getViewModel();\n\t\tif (codeEditor.getOption(EditorOption.columnSelection)) {\n\t\t\tconst selection = codeEditor.getSelection();\n\t\t\tconst modelSelectionStart = new Position(selection.selectionStartLineNumber, selection.selectionStartColumn);\n\t\t\tconst viewSelectionStart = viewModel.coordinatesConverter.convertModelPositionToViewPosition(modelSelectionStart);\n\t\t\tconst modelPosition = new Position(selection.positionLineNumber, selection.positionColumn);\n\t\t\tconst viewPosition = viewModel.coordinatesConverter.convertModelPositionToViewPosition(modelPosition);\n\n\t\t\tCoreNavigationCommands.MoveTo.runCoreEditorCommand(viewModel, {\n\t\t\t\tposition: modelSelectionStart,\n\t\t\t\tviewPosition: viewSelectionStart\n\t\t\t});\n\t\t\tconst visibleColumn = viewModel.cursorConfig.visibleColumnFromColumn(viewModel, viewPosition);\n\t\t\tCoreNavigationCommands.ColumnSelect.runCoreEditorCommand(viewModel, {\n\t\t\t\tposition: modelPosition,\n\t\t\t\tviewPosition: viewPosition,\n\t\t\t\tdoColumnSelect: true,\n\t\t\t\tmouseColumn: visibleColumn + 1\n\t\t\t});\n\t\t} else {\n\t\t\tconst columnSelectData = viewModel.getCursorColumnSelectData();\n\t\t\tconst fromViewColumn = viewModel.cursorConfig.columnFromVisibleColumn(viewModel, columnSelectData.fromViewLineNumber, columnSelectData.fromViewVisualColumn);\n\t\t\tconst fromPosition = viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(columnSelectData.fromViewLineNumber, fromViewColumn));\n\t\t\tconst toViewColumn = viewModel.cursorConfig.columnFromVisibleColumn(viewModel, columnSelectData.toViewLineNumber, columnSelectData.toViewVisualColumn);\n\t\t\tconst toPosition = viewModel.coordinatesConverter.convertViewPositionToModelPosition(new Position(columnSelectData.toViewLineNumber, toViewColumn));\n\n\t\t\tcodeEditor.setSelection(new Selection(fromPosition.lineNumber, fromPosition.column, toPosition.lineNumber, toPosition.column));\n\t\t}\n\t}\n\n\tprivate _getCodeEditor(codeEditorService: ICodeEditorService): ICodeEditor | null {\n\t\tconst codeEditor = codeEditorService.getFocusedCodeEditor();\n\t\tif (codeEditor) {\n\t\t\treturn codeEditor;\n\t\t}\n\t\treturn codeEditorService.getActiveCodeEditor();\n\t}\n}\n\nregisterAction2(ToggleColumnSelectionAction);\n"]}