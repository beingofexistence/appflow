{"version":3,"sources":["vs/workbench/contrib/codeEditor/browser/languageConfigurationExtensionPoint.ts"],"names":[],"mappings":"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","file":"languageConfigurationExtensionPoint.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { ParseError, parse, getNodeType } from 'vs/base/common/json';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport * as types from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport { CharacterPair, CommentRule, EnterAction, ExplicitLanguageConfiguration, FoldingMarkers, FoldingRules, IAutoClosingPair, IAutoClosingPairConditional, IndentAction, IndentationRule, OnEnterRule } from 'vs/editor/common/languages/languageConfiguration';\nimport { ILanguageConfigurationService } from 'vs/editor/common/languages/languageConfigurationRegistry';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { Extensions, IJSONContributionRegistry } from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { getParseErrorMessage } from 'vs/base/common/jsonErrorMessages';\nimport { IExtensionResourceLoaderService } from 'vs/platform/extensionResourceLoader/common/extensionResourceLoader';\nimport { hash } from 'vs/base/common/hash';\nimport { Disposable } from 'vs/base/common/lifecycle';\n\ninterface IRegExp {\n\tpattern: string;\n\tflags?: string;\n}\n\ninterface IIndentationRules {\n\tdecreaseIndentPattern: string | IRegExp;\n\tincreaseIndentPattern: string | IRegExp;\n\tindentNextLinePattern?: string | IRegExp;\n\tunIndentedLinePattern?: string | IRegExp;\n}\n\ninterface IEnterAction {\n\tindent: 'none' | 'indent' | 'indentOutdent' | 'outdent';\n\tappendText?: string;\n\tremoveText?: number;\n}\n\ninterface IOnEnterRule {\n\tbeforeText: string | IRegExp;\n\tafterText?: string | IRegExp;\n\tpreviousLineText?: string | IRegExp;\n\taction: IEnterAction;\n}\n\n/**\n * Serialized form of a language configuration\n */\ninterface ILanguageConfiguration {\n\tcomments?: CommentRule;\n\tbrackets?: CharacterPair[];\n\tautoClosingPairs?: Array<CharacterPair | IAutoClosingPairConditional>;\n\tsurroundingPairs?: Array<CharacterPair | IAutoClosingPair>;\n\tcolorizedBracketPairs?: Array<CharacterPair>;\n\twordPattern?: string | IRegExp;\n\tindentationRules?: IIndentationRules;\n\tfolding?: {\n\t\toffSide?: boolean;\n\t\tmarkers?: {\n\t\t\tstart?: string | IRegExp;\n\t\t\tend?: string | IRegExp;\n\t\t};\n\t};\n\tautoCloseBefore?: string;\n\tonEnterRules?: IOnEnterRule[];\n}\n\nfunction isStringArr(something: string[] | null): something is string[] {\n\tif (!Array.isArray(something)) {\n\t\treturn false;\n\t}\n\tfor (let i = 0, len = something.length; i < len; i++) {\n\t\tif (typeof something[i] !== 'string') {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n\n}\n\nfunction isCharacterPair(something: CharacterPair | null): boolean {\n\treturn (\n\t\tisStringArr(something)\n\t\t&& something.length === 2\n\t);\n}\n\nexport class LanguageConfigurationFileHandler extends Disposable {\n\n\t/**\n\t * A map from language id to a hash computed from the config files locations.\n\t */\n\tprivate readonly _done = new Map<string, number>();\n\n\tconstructor(\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@IExtensionResourceLoaderService private readonly _extensionResourceLoaderService: IExtensionResourceLoaderService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(this._languageService.onDidRequestBasicLanguageFeatures(async (languageIdentifier) => {\n\t\t\t// Modes can be instantiated before the extension points have finished registering\n\t\t\tthis._extensionService.whenInstalledExtensionsRegistered().then(() => {\n\t\t\t\tthis._loadConfigurationsForMode(languageIdentifier);\n\t\t\t});\n\t\t}));\n\t\tthis._register(this._languageService.onDidChange(() => {\n\t\t\t// reload language configurations as necessary\n\t\t\tfor (const [languageId] of this._done) {\n\t\t\t\tthis._loadConfigurationsForMode(languageId);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate async _loadConfigurationsForMode(languageId: string): Promise<void> {\n\t\tconst configurationFiles = this._languageService.getConfigurationFiles(languageId);\n\t\tconst configurationHash = hash(configurationFiles.map(uri => uri.toString()));\n\n\t\tif (this._done.get(languageId) === configurationHash) {\n\t\t\treturn;\n\t\t}\n\t\tthis._done.set(languageId, configurationHash);\n\n\t\tconst configs = await Promise.all(configurationFiles.map(configFile => this._readConfigFile(configFile)));\n\t\tfor (const config of configs) {\n\t\t\tthis._handleConfig(languageId, config);\n\t\t}\n\t}\n\n\tprivate async _readConfigFile(configFileLocation: URI): Promise<ILanguageConfiguration> {\n\t\ttry {\n\t\t\tconst contents = await this._extensionResourceLoaderService.readExtensionResource(configFileLocation);\n\t\t\tconst errors: ParseError[] = [];\n\t\t\tlet configuration = <ILanguageConfiguration>parse(contents, errors);\n\t\t\tif (errors.length) {\n\t\t\t\tconsole.error(nls.localize('parseErrors', \"Errors parsing {0}: {1}\", configFileLocation.toString(), errors.map(e => (`[${e.offset}, ${e.length}] ${getParseErrorMessage(e.error)}`)).join('\\n')));\n\t\t\t}\n\t\t\tif (getNodeType(configuration) !== 'object') {\n\t\t\t\tconsole.error(nls.localize('formatError', \"{0}: Invalid format, JSON object expected.\", configFileLocation.toString()));\n\t\t\t\tconfiguration = {};\n\t\t\t}\n\t\t\treturn configuration;\n\t\t} catch (err) {\n\t\t\tconsole.error(err);\n\t\t\treturn {};\n\t\t}\n\t}\n\n\tprivate _extractValidCommentRule(languageId: string, configuration: ILanguageConfiguration): CommentRule | undefined {\n\t\tconst source = configuration.comments;\n\t\tif (typeof source === 'undefined') {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (!types.isObject(source)) {\n\t\t\tconsole.warn(`[${languageId}]: language configuration: expected \\`comments\\` to be an object.`);\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet result: CommentRule | undefined = undefined;\n\t\tif (typeof source.lineComment !== 'undefined') {\n\t\t\tif (typeof source.lineComment !== 'string') {\n\t\t\t\tconsole.warn(`[${languageId}]: language configuration: expected \\`comments.lineComment\\` to be a string.`);\n\t\t\t} else {\n\t\t\t\tresult = result || {};\n\t\t\t\tresult.lineComment = source.lineComment;\n\t\t\t}\n\t\t}\n\t\tif (typeof source.blockComment !== 'undefined') {\n\t\t\tif (!isCharacterPair(source.blockComment)) {\n\t\t\t\tconsole.warn(`[${languageId}]: language configuration: expected \\`comments.blockComment\\` to be an array of two strings.`);\n\t\t\t} else {\n\t\t\t\tresult = result || {};\n\t\t\t\tresult.blockComment = source.blockComment;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _extractValidBrackets(languageId: string, configuration: ILanguageConfiguration): CharacterPair[] | undefined {\n\t\tconst source = configuration.brackets;\n\t\tif (typeof source === 'undefined') {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (!Array.isArray(source)) {\n\t\t\tconsole.warn(`[${languageId}]: language configuration: expected \\`brackets\\` to be an array.`);\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet result: CharacterPair[] | undefined = undefined;\n\t\tfor (let i = 0, len = source.length; i < len; i++) {\n\t\t\tconst pair = source[i];\n\t\t\tif (!isCharacterPair(pair)) {\n\t\t\t\tconsole.warn(`[${languageId}]: language configuration: expected \\`brackets[${i}]\\` to be an array of two strings.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tresult = result || [];\n\t\t\tresult.push(pair);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _extractValidAutoClosingPairs(languageId: string, configuration: ILanguageConfiguration): IAutoClosingPairConditional[] | undefined {\n\t\tconst source = configuration.autoClosingPairs;\n\t\tif (typeof source === 'undefined') {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (!Array.isArray(source)) {\n\t\t\tconsole.warn(`[${languageId}]: language configuration: expected \\`autoClosingPairs\\` to be an array.`);\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet result: IAutoClosingPairConditional[] | undefined = undefined;\n\t\tfor (let i = 0, len = source.length; i < len; i++) {\n\t\t\tconst pair = source[i];\n\t\t\tif (Array.isArray(pair)) {\n\t\t\t\tif (!isCharacterPair(pair)) {\n\t\t\t\t\tconsole.warn(`[${languageId}]: language configuration: expected \\`autoClosingPairs[${i}]\\` to be an array of two strings or an object.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tresult = result || [];\n\t\t\t\tresult.push({ open: pair[0], close: pair[1] });\n\t\t\t} else {\n\t\t\t\tif (!types.isObject(pair)) {\n\t\t\t\t\tconsole.warn(`[${languageId}]: language configuration: expected \\`autoClosingPairs[${i}]\\` to be an array of two strings or an object.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (typeof pair.open !== 'string') {\n\t\t\t\t\tconsole.warn(`[${languageId}]: language configuration: expected \\`autoClosingPairs[${i}].open\\` to be a string.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (typeof pair.close !== 'string') {\n\t\t\t\t\tconsole.warn(`[${languageId}]: language configuration: expected \\`autoClosingPairs[${i}].close\\` to be a string.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (typeof pair.notIn !== 'undefined') {\n\t\t\t\t\tif (!isStringArr(pair.notIn)) {\n\t\t\t\t\t\tconsole.warn(`[${languageId}]: language configuration: expected \\`autoClosingPairs[${i}].notIn\\` to be a string array.`);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult = result || [];\n\t\t\t\tresult.push({ open: pair.open, close: pair.close, notIn: pair.notIn });\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _extractValidSurroundingPairs(languageId: string, configuration: ILanguageConfiguration): IAutoClosingPair[] | undefined {\n\t\tconst source = configuration.surroundingPairs;\n\t\tif (typeof source === 'undefined') {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (!Array.isArray(source)) {\n\t\t\tconsole.warn(`[${languageId}]: language configuration: expected \\`surroundingPairs\\` to be an array.`);\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet result: IAutoClosingPair[] | undefined = undefined;\n\t\tfor (let i = 0, len = source.length; i < len; i++) {\n\t\t\tconst pair = source[i];\n\t\t\tif (Array.isArray(pair)) {\n\t\t\t\tif (!isCharacterPair(pair)) {\n\t\t\t\t\tconsole.warn(`[${languageId}]: language configuration: expected \\`surroundingPairs[${i}]\\` to be an array of two strings or an object.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tresult = result || [];\n\t\t\t\tresult.push({ open: pair[0], close: pair[1] });\n\t\t\t} else {\n\t\t\t\tif (!types.isObject(pair)) {\n\t\t\t\t\tconsole.warn(`[${languageId}]: language configuration: expected \\`surroundingPairs[${i}]\\` to be an array of two strings or an object.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (typeof pair.open !== 'string') {\n\t\t\t\t\tconsole.warn(`[${languageId}]: language configuration: expected \\`surroundingPairs[${i}].open\\` to be a string.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (typeof pair.close !== 'string') {\n\t\t\t\t\tconsole.warn(`[${languageId}]: language configuration: expected \\`surroundingPairs[${i}].close\\` to be a string.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tresult = result || [];\n\t\t\t\tresult.push({ open: pair.open, close: pair.close });\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _extractValidColorizedBracketPairs(languageId: string, configuration: ILanguageConfiguration): CharacterPair[] | undefined {\n\t\tconst source = configuration.colorizedBracketPairs;\n\t\tif (typeof source === 'undefined') {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (!Array.isArray(source)) {\n\t\t\tconsole.warn(`[${languageId}]: language configuration: expected \\`colorizedBracketPairs\\` to be an array.`);\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst result: CharacterPair[] = [];\n\t\tfor (let i = 0, len = source.length; i < len; i++) {\n\t\t\tconst pair = source[i];\n\t\t\tif (!isCharacterPair(pair)) {\n\t\t\t\tconsole.warn(`[${languageId}]: language configuration: expected \\`colorizedBracketPairs[${i}]\\` to be an array of two strings.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tresult.push([pair[0], pair[1]]);\n\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _extractValidOnEnterRules(languageId: string, configuration: ILanguageConfiguration): OnEnterRule[] | undefined {\n\t\tconst source = configuration.onEnterRules;\n\t\tif (typeof source === 'undefined') {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (!Array.isArray(source)) {\n\t\t\tconsole.warn(`[${languageId}]: language configuration: expected \\`onEnterRules\\` to be an array.`);\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet result: OnEnterRule[] | undefined = undefined;\n\t\tfor (let i = 0, len = source.length; i < len; i++) {\n\t\t\tconst onEnterRule = source[i];\n\t\t\tif (!types.isObject(onEnterRule)) {\n\t\t\t\tconsole.warn(`[${languageId}]: language configuration: expected \\`onEnterRules[${i}]\\` to be an object.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!types.isObject(onEnterRule.action)) {\n\t\t\t\tconsole.warn(`[${languageId}]: language configuration: expected \\`onEnterRules[${i}].action\\` to be an object.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet indentAction: IndentAction;\n\t\t\tif (onEnterRule.action.indent === 'none') {\n\t\t\t\tindentAction = IndentAction.None;\n\t\t\t} else if (onEnterRule.action.indent === 'indent') {\n\t\t\t\tindentAction = IndentAction.Indent;\n\t\t\t} else if (onEnterRule.action.indent === 'indentOutdent') {\n\t\t\t\tindentAction = IndentAction.IndentOutdent;\n\t\t\t} else if (onEnterRule.action.indent === 'outdent') {\n\t\t\t\tindentAction = IndentAction.Outdent;\n\t\t\t} else {\n\t\t\t\tconsole.warn(`[${languageId}]: language configuration: expected \\`onEnterRules[${i}].action.indent\\` to be 'none', 'indent', 'indentOutdent' or 'outdent'.`);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst action: EnterAction = { indentAction };\n\t\t\tif (onEnterRule.action.appendText) {\n\t\t\t\tif (typeof onEnterRule.action.appendText === 'string') {\n\t\t\t\t\taction.appendText = onEnterRule.action.appendText;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(`[${languageId}]: language configuration: expected \\`onEnterRules[${i}].action.appendText\\` to be undefined or a string.`);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (onEnterRule.action.removeText) {\n\t\t\t\tif (typeof onEnterRule.action.removeText === 'number') {\n\t\t\t\t\taction.removeText = onEnterRule.action.removeText;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(`[${languageId}]: language configuration: expected \\`onEnterRules[${i}].action.removeText\\` to be undefined or a number.`);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst beforeText = this._parseRegex(languageId, `onEnterRules[${i}].beforeText`, onEnterRule.beforeText);\n\t\t\tif (!beforeText) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst resultingOnEnterRule: OnEnterRule = { beforeText, action };\n\t\t\tif (onEnterRule.afterText) {\n\t\t\t\tconst afterText = this._parseRegex(languageId, `onEnterRules[${i}].afterText`, onEnterRule.afterText);\n\t\t\t\tif (afterText) {\n\t\t\t\t\tresultingOnEnterRule.afterText = afterText;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (onEnterRule.previousLineText) {\n\t\t\t\tconst previousLineText = this._parseRegex(languageId, `onEnterRules[${i}].previousLineText`, onEnterRule.previousLineText);\n\t\t\t\tif (previousLineText) {\n\t\t\t\t\tresultingOnEnterRule.previousLineText = previousLineText;\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult = result || [];\n\t\t\tresult.push(resultingOnEnterRule);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate _handleConfig(languageId: string, configuration: ILanguageConfiguration): void {\n\n\t\tconst comments = this._extractValidCommentRule(languageId, configuration);\n\t\tconst brackets = this._extractValidBrackets(languageId, configuration);\n\t\tconst autoClosingPairs = this._extractValidAutoClosingPairs(languageId, configuration);\n\t\tconst surroundingPairs = this._extractValidSurroundingPairs(languageId, configuration);\n\t\tconst colorizedBracketPairs = this._extractValidColorizedBracketPairs(languageId, configuration);\n\t\tconst autoCloseBefore = (typeof configuration.autoCloseBefore === 'string' ? configuration.autoCloseBefore : undefined);\n\t\tconst wordPattern = (configuration.wordPattern ? this._parseRegex(languageId, `wordPattern`, configuration.wordPattern) : undefined);\n\t\tconst indentationRules = (configuration.indentationRules ? this._mapIndentationRules(languageId, configuration.indentationRules) : undefined);\n\t\tlet folding: FoldingRules | undefined = undefined;\n\t\tif (configuration.folding) {\n\t\t\tconst rawMarkers = configuration.folding.markers;\n\t\t\tconst startMarker = (rawMarkers && rawMarkers.start ? this._parseRegex(languageId, `folding.markers.start`, rawMarkers.start) : undefined);\n\t\t\tconst endMarker = (rawMarkers && rawMarkers.end ? this._parseRegex(languageId, `folding.markers.end`, rawMarkers.end) : undefined);\n\t\t\tconst markers: FoldingMarkers | undefined = (startMarker && endMarker ? { start: startMarker, end: endMarker } : undefined);\n\t\t\tfolding = {\n\t\t\t\toffSide: configuration.folding.offSide,\n\t\t\t\tmarkers\n\t\t\t};\n\t\t}\n\t\tconst onEnterRules = this._extractValidOnEnterRules(languageId, configuration);\n\n\t\tconst richEditConfig: ExplicitLanguageConfiguration = {\n\t\t\tcomments,\n\t\t\tbrackets,\n\t\t\twordPattern,\n\t\t\tindentationRules,\n\t\t\tonEnterRules,\n\t\t\tautoClosingPairs,\n\t\t\tsurroundingPairs,\n\t\t\tcolorizedBracketPairs,\n\t\t\tautoCloseBefore,\n\t\t\tfolding,\n\t\t\t__electricCharacterSupport: undefined,\n\t\t};\n\n\t\tthis._languageConfigurationService.register(languageId, richEditConfig, 50);\n\t}\n\n\tprivate _parseRegex(languageId: string, confPath: string, value: string | IRegExp): RegExp | undefined {\n\t\tif (typeof value === 'string') {\n\t\t\ttry {\n\t\t\t\treturn new RegExp(value, '');\n\t\t\t} catch (err) {\n\t\t\t\tconsole.warn(`[${languageId}]: Invalid regular expression in \\`${confPath}\\`: `, err);\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\t\tif (types.isObject(value)) {\n\t\t\tif (typeof value.pattern !== 'string') {\n\t\t\t\tconsole.warn(`[${languageId}]: language configuration: expected \\`${confPath}.pattern\\` to be a string.`);\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tif (typeof value.flags !== 'undefined' && typeof value.flags !== 'string') {\n\t\t\t\tconsole.warn(`[${languageId}]: language configuration: expected \\`${confPath}.flags\\` to be a string.`);\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\ttry {\n\t\t\t\treturn new RegExp(value.pattern, value.flags);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.warn(`[${languageId}]: Invalid regular expression in \\`${confPath}\\`: `, err);\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\t\tconsole.warn(`[${languageId}]: language configuration: expected \\`${confPath}\\` to be a string or an object.`);\n\t\treturn undefined;\n\t}\n\n\tprivate _mapIndentationRules(languageId: string, indentationRules: IIndentationRules): IndentationRule | undefined {\n\t\tconst increaseIndentPattern = this._parseRegex(languageId, `indentationRules.increaseIndentPattern`, indentationRules.increaseIndentPattern);\n\t\tif (!increaseIndentPattern) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst decreaseIndentPattern = this._parseRegex(languageId, `indentationRules.decreaseIndentPattern`, indentationRules.decreaseIndentPattern);\n\t\tif (!decreaseIndentPattern) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst result: IndentationRule = {\n\t\t\tincreaseIndentPattern: increaseIndentPattern,\n\t\t\tdecreaseIndentPattern: decreaseIndentPattern\n\t\t};\n\n\t\tif (indentationRules.indentNextLinePattern) {\n\t\t\tresult.indentNextLinePattern = this._parseRegex(languageId, `indentationRules.indentNextLinePattern`, indentationRules.indentNextLinePattern);\n\t\t}\n\t\tif (indentationRules.unIndentedLinePattern) {\n\t\t\tresult.unIndentedLinePattern = this._parseRegex(languageId, `indentationRules.unIndentedLinePattern`, indentationRules.unIndentedLinePattern);\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nconst schemaId = 'vscode://schemas/language-configuration';\nconst schema: IJSONSchema = {\n\tallowComments: true,\n\tallowTrailingCommas: true,\n\tdefault: {\n\t\tcomments: {\n\t\t\tblockComment: ['/*', '*/'],\n\t\t\tlineComment: '//'\n\t\t},\n\t\tbrackets: [['(', ')'], ['[', ']'], ['{', '}']],\n\t\tautoClosingPairs: [['(', ')'], ['[', ']'], ['{', '}']],\n\t\tsurroundingPairs: [['(', ')'], ['[', ']'], ['{', '}']]\n\t},\n\tdefinitions: {\n\t\topenBracket: {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('schema.openBracket', 'The opening bracket character or string sequence.')\n\t\t},\n\t\tcloseBracket: {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('schema.closeBracket', 'The closing bracket character or string sequence.')\n\t\t},\n\t\tbracketPair: {\n\t\t\ttype: 'array',\n\t\t\titems: [{\n\t\t\t\t$ref: '#/definitions/openBracket'\n\t\t\t}, {\n\t\t\t\t$ref: '#/definitions/closeBracket'\n\t\t\t}]\n\t\t}\n\t},\n\tproperties: {\n\t\tcomments: {\n\t\t\tdefault: {\n\t\t\t\tblockComment: ['/*', '*/'],\n\t\t\t\tlineComment: '//'\n\t\t\t},\n\t\t\tdescription: nls.localize('schema.comments', 'Defines the comment symbols'),\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tblockComment: {\n\t\t\t\t\ttype: 'array',\n\t\t\t\t\tdescription: nls.localize('schema.blockComments', 'Defines how block comments are marked.'),\n\t\t\t\t\titems: [{\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdescription: nls.localize('schema.blockComment.begin', 'The character sequence that starts a block comment.')\n\t\t\t\t\t}, {\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdescription: nls.localize('schema.blockComment.end', 'The character sequence that ends a block comment.')\n\t\t\t\t\t}]\n\t\t\t\t},\n\t\t\t\tlineComment: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('schema.lineComment', 'The character sequence that starts a line comment.')\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tbrackets: {\n\t\t\tdefault: [['(', ')'], ['[', ']'], ['{', '}']],\n\t\t\tmarkdownDescription: nls.localize('schema.brackets', 'Defines the bracket symbols that increase or decrease the indentation. When bracket pair colorization is enabled and {0} is not defined, this also defines the bracket pairs that are colorized by their nesting level.', '\\`colorizedBracketPairs\\`'),\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\t$ref: '#/definitions/bracketPair'\n\t\t\t}\n\t\t},\n\t\tcolorizedBracketPairs: {\n\t\t\tdefault: [['(', ')'], ['[', ']'], ['{', '}']],\n\t\t\tmarkdownDescription: nls.localize('schema.colorizedBracketPairs', 'Defines the bracket pairs that are colorized by their nesting level if bracket pair colorization is enabled. Any brackets included here that are not included in {0} will be automatically included in {0}.', '\\`brackets\\`'),\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\t$ref: '#/definitions/bracketPair'\n\t\t\t}\n\t\t},\n\t\tautoClosingPairs: {\n\t\t\tdefault: [['(', ')'], ['[', ']'], ['{', '}']],\n\t\t\tdescription: nls.localize('schema.autoClosingPairs', 'Defines the bracket pairs. When a opening bracket is entered, the closing bracket is inserted automatically.'),\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\toneOf: [{\n\t\t\t\t\t$ref: '#/definitions/bracketPair'\n\t\t\t\t}, {\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\topen: {\n\t\t\t\t\t\t\t$ref: '#/definitions/openBracket'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tclose: {\n\t\t\t\t\t\t\t$ref: '#/definitions/closeBracket'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tnotIn: {\n\t\t\t\t\t\t\ttype: 'array',\n\t\t\t\t\t\t\tdescription: nls.localize('schema.autoClosingPairs.notIn', 'Defines a list of scopes where the auto pairs are disabled.'),\n\t\t\t\t\t\t\titems: {\n\t\t\t\t\t\t\t\tenum: ['string', 'comment']\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t}\n\t\t},\n\t\tautoCloseBefore: {\n\t\t\tdefault: ';:.,=}])> \\n\\t',\n\t\t\tdescription: nls.localize('schema.autoCloseBefore', 'Defines what characters must be after the cursor in order for bracket or quote autoclosing to occur when using the \\'languageDefined\\' autoclosing setting. This is typically the set of characters which can not start an expression.'),\n\t\t\ttype: 'string',\n\t\t},\n\t\tsurroundingPairs: {\n\t\t\tdefault: [['(', ')'], ['[', ']'], ['{', '}']],\n\t\t\tdescription: nls.localize('schema.surroundingPairs', 'Defines the bracket pairs that can be used to surround a selected string.'),\n\t\t\ttype: 'array',\n\t\t\titems: {\n\t\t\t\toneOf: [{\n\t\t\t\t\t$ref: '#/definitions/bracketPair'\n\t\t\t\t}, {\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\topen: {\n\t\t\t\t\t\t\t$ref: '#/definitions/openBracket'\n\t\t\t\t\t\t},\n\t\t\t\t\t\tclose: {\n\t\t\t\t\t\t\t$ref: '#/definitions/closeBracket'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t}\n\t\t},\n\t\twordPattern: {\n\t\t\tdefault: '',\n\t\t\tdescription: nls.localize('schema.wordPattern', 'Defines what is considered to be a word in the programming language.'),\n\t\t\ttype: ['string', 'object'],\n\t\t\tproperties: {\n\t\t\t\tpattern: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('schema.wordPattern.pattern', 'The RegExp pattern used to match words.'),\n\t\t\t\t\tdefault: '',\n\t\t\t\t},\n\t\t\t\tflags: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('schema.wordPattern.flags', 'The RegExp flags used to match words.'),\n\t\t\t\t\tdefault: 'g',\n\t\t\t\t\tpattern: '^([gimuy]+)$',\n\t\t\t\t\tpatternErrorMessage: nls.localize('schema.wordPattern.flags.errorMessage', 'Must match the pattern `/^([gimuy]+)$/`.')\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tindentationRules: {\n\t\t\tdefault: {\n\t\t\t\tincreaseIndentPattern: '',\n\t\t\t\tdecreaseIndentPattern: ''\n\t\t\t},\n\t\t\tdescription: nls.localize('schema.indentationRules', 'The language\\'s indentation settings.'),\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tincreaseIndentPattern: {\n\t\t\t\t\ttype: ['string', 'object'],\n\t\t\t\t\tdescription: nls.localize('schema.indentationRules.increaseIndentPattern', 'If a line matches this pattern, then all the lines after it should be indented once (until another rule matches).'),\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdescription: nls.localize('schema.indentationRules.increaseIndentPattern.pattern', 'The RegExp pattern for increaseIndentPattern.'),\n\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tflags: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdescription: nls.localize('schema.indentationRules.increaseIndentPattern.flags', 'The RegExp flags for increaseIndentPattern.'),\n\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\tpattern: '^([gimuy]+)$',\n\t\t\t\t\t\t\tpatternErrorMessage: nls.localize('schema.indentationRules.increaseIndentPattern.errorMessage', 'Must match the pattern `/^([gimuy]+)$/`.')\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tdecreaseIndentPattern: {\n\t\t\t\t\ttype: ['string', 'object'],\n\t\t\t\t\tdescription: nls.localize('schema.indentationRules.decreaseIndentPattern', 'If a line matches this pattern, then all the lines after it should be unindented once (until another rule matches).'),\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdescription: nls.localize('schema.indentationRules.decreaseIndentPattern.pattern', 'The RegExp pattern for decreaseIndentPattern.'),\n\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tflags: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdescription: nls.localize('schema.indentationRules.decreaseIndentPattern.flags', 'The RegExp flags for decreaseIndentPattern.'),\n\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\tpattern: '^([gimuy]+)$',\n\t\t\t\t\t\t\tpatternErrorMessage: nls.localize('schema.indentationRules.decreaseIndentPattern.errorMessage', 'Must match the pattern `/^([gimuy]+)$/`.')\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tindentNextLinePattern: {\n\t\t\t\t\ttype: ['string', 'object'],\n\t\t\t\t\tdescription: nls.localize('schema.indentationRules.indentNextLinePattern', 'If a line matches this pattern, then **only the next line** after it should be indented once.'),\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdescription: nls.localize('schema.indentationRules.indentNextLinePattern.pattern', 'The RegExp pattern for indentNextLinePattern.'),\n\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tflags: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdescription: nls.localize('schema.indentationRules.indentNextLinePattern.flags', 'The RegExp flags for indentNextLinePattern.'),\n\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\tpattern: '^([gimuy]+)$',\n\t\t\t\t\t\t\tpatternErrorMessage: nls.localize('schema.indentationRules.indentNextLinePattern.errorMessage', 'Must match the pattern `/^([gimuy]+)$/`.')\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tunIndentedLinePattern: {\n\t\t\t\t\ttype: ['string', 'object'],\n\t\t\t\t\tdescription: nls.localize('schema.indentationRules.unIndentedLinePattern', 'If a line matches this pattern, then its indentation should not be changed and it should not be evaluated against the other rules.'),\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdescription: nls.localize('schema.indentationRules.unIndentedLinePattern.pattern', 'The RegExp pattern for unIndentedLinePattern.'),\n\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t},\n\t\t\t\t\t\tflags: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdescription: nls.localize('schema.indentationRules.unIndentedLinePattern.flags', 'The RegExp flags for unIndentedLinePattern.'),\n\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\tpattern: '^([gimuy]+)$',\n\t\t\t\t\t\t\tpatternErrorMessage: nls.localize('schema.indentationRules.unIndentedLinePattern.errorMessage', 'Must match the pattern `/^([gimuy]+)$/`.')\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tfolding: {\n\t\t\ttype: 'object',\n\t\t\tdescription: nls.localize('schema.folding', 'The language\\'s folding settings.'),\n\t\t\tproperties: {\n\t\t\t\toffSide: {\n\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\tdescription: nls.localize('schema.folding.offSide', 'A language adheres to the off-side rule if blocks in that language are expressed by their indentation. If set, empty lines belong to the subsequent block.'),\n\t\t\t\t},\n\t\t\t\tmarkers: {\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tdescription: nls.localize('schema.folding.markers', 'Language specific folding markers such as \\'#region\\' and \\'#endregion\\'. The start and end regexes will be tested against the contents of all lines and must be designed efficiently'),\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tstart: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdescription: nls.localize('schema.folding.markers.start', 'The RegExp pattern for the start marker. The regexp must start with \\'^\\'.')\n\t\t\t\t\t\t},\n\t\t\t\t\t\tend: {\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tdescription: nls.localize('schema.folding.markers.end', 'The RegExp pattern for the end marker. The regexp must start with \\'^\\'.')\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tonEnterRules: {\n\t\t\ttype: 'array',\n\t\t\tdescription: nls.localize('schema.onEnterRules', 'The language\\'s rules to be evaluated when pressing Enter.'),\n\t\t\titems: {\n\t\t\t\ttype: 'object',\n\t\t\t\tdescription: nls.localize('schema.onEnterRules', 'The language\\'s rules to be evaluated when pressing Enter.'),\n\t\t\t\trequired: ['beforeText', 'action'],\n\t\t\t\tproperties: {\n\t\t\t\t\tbeforeText: {\n\t\t\t\t\t\ttype: ['string', 'object'],\n\t\t\t\t\t\tdescription: nls.localize('schema.onEnterRules.beforeText', 'This rule will only execute if the text before the cursor matches this regular expression.'),\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdescription: nls.localize('schema.onEnterRules.beforeText.pattern', 'The RegExp pattern for beforeText.'),\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tflags: {\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdescription: nls.localize('schema.onEnterRules.beforeText.flags', 'The RegExp flags for beforeText.'),\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\tpattern: '^([gimuy]+)$',\n\t\t\t\t\t\t\t\tpatternErrorMessage: nls.localize('schema.onEnterRules.beforeText.errorMessage', 'Must match the pattern `/^([gimuy]+)$/`.')\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tafterText: {\n\t\t\t\t\t\ttype: ['string', 'object'],\n\t\t\t\t\t\tdescription: nls.localize('schema.onEnterRules.afterText', 'This rule will only execute if the text after the cursor matches this regular expression.'),\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdescription: nls.localize('schema.onEnterRules.afterText.pattern', 'The RegExp pattern for afterText.'),\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tflags: {\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdescription: nls.localize('schema.onEnterRules.afterText.flags', 'The RegExp flags for afterText.'),\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\tpattern: '^([gimuy]+)$',\n\t\t\t\t\t\t\t\tpatternErrorMessage: nls.localize('schema.onEnterRules.afterText.errorMessage', 'Must match the pattern `/^([gimuy]+)$/`.')\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tpreviousLineText: {\n\t\t\t\t\t\ttype: ['string', 'object'],\n\t\t\t\t\t\tdescription: nls.localize('schema.onEnterRules.previousLineText', 'This rule will only execute if the text above the line matches this regular expression.'),\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\tpattern: {\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdescription: nls.localize('schema.onEnterRules.previousLineText.pattern', 'The RegExp pattern for previousLineText.'),\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tflags: {\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdescription: nls.localize('schema.onEnterRules.previousLineText.flags', 'The RegExp flags for previousLineText.'),\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t\tpattern: '^([gimuy]+)$',\n\t\t\t\t\t\t\t\tpatternErrorMessage: nls.localize('schema.onEnterRules.previousLineText.errorMessage', 'Must match the pattern `/^([gimuy]+)$/`.')\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\taction: {\n\t\t\t\t\t\ttype: ['string', 'object'],\n\t\t\t\t\t\tdescription: nls.localize('schema.onEnterRules.action', 'The action to execute.'),\n\t\t\t\t\t\trequired: ['indent'],\n\t\t\t\t\t\tdefault: { 'indent': 'indent' },\n\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\tindent: {\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdescription: nls.localize('schema.onEnterRules.action.indent', \"Describe what to do with the indentation\"),\n\t\t\t\t\t\t\t\tdefault: 'indent',\n\t\t\t\t\t\t\t\tenum: ['none', 'indent', 'indentOutdent', 'outdent'],\n\t\t\t\t\t\t\t\tmarkdownEnumDescriptions: [\n\t\t\t\t\t\t\t\t\tnls.localize('schema.onEnterRules.action.indent.none', \"Insert new line and copy the previous line's indentation.\"),\n\t\t\t\t\t\t\t\t\tnls.localize('schema.onEnterRules.action.indent.indent', \"Insert new line and indent once (relative to the previous line's indentation).\"),\n\t\t\t\t\t\t\t\t\tnls.localize('schema.onEnterRules.action.indent.indentOutdent', \"Insert two new lines:\\n - the first one indented which will hold the cursor\\n - the second one at the same indentation level\"),\n\t\t\t\t\t\t\t\t\tnls.localize('schema.onEnterRules.action.indent.outdent', \"Insert new line and outdent once (relative to the previous line's indentation).\")\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tappendText: {\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdescription: nls.localize('schema.onEnterRules.action.appendText', 'Describes text to be appended after the new line and after the indentation.'),\n\t\t\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tremoveText: {\n\t\t\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\t\t\tdescription: nls.localize('schema.onEnterRules.action.removeText', 'Describes the number of characters to remove from the new line\\'s indentation.'),\n\t\t\t\t\t\t\t\tdefault: 0,\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t}\n};\nconst schemaRegistry = Registry.as<IJSONContributionRegistry>(Extensions.JSONContribution);\nschemaRegistry.registerSchema(schemaId, schema);\n"]}