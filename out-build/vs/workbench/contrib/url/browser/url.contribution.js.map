{"version":3,"sources":["vs/workbench/contrib/url/browser/url.contribution.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAoBhG,MAAM,aAAc,SAAQ,aAAG;QAE9B;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,8BAA8B;gBAClC,KAAK,EAAE,EAAE,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAS,EAAE,IAAU,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE;gBACvE,QAAQ,EAAE,4BAAG,CAAQ,SAAS;gBAC9B,EAAE,EAAE,IAAI;aACR,CAAC,CAAC;QACJ,CAAC;QAED,KAAK,CAAC,GAAG,CAAC,QAA0B;YACnC,MAAM,iBAAiB,GAAG,QAAQ,CAAC,GAAG,CAAC,gBAAG,CAAgB,CAAC;YAC3D,MAAM,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAG,CAAS,CAAC;YAE7C,OAAO,iBAAiB,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,IAAA,cAAQ,EAAC,CAAW,EAAE,IAAa,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBAC7F,IAAI,KAAK,EAAE;oBACV,MAAM,GAAG,GAAG,SAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;oBAC7B,UAAU,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC,CAAC;iBAC7C;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;KACD;IAED,IAAA,aAAG,EAAa,aAAa,CAAC,CAAC;IAE/B;;OAEG;IAEH,cAAG,CAAc,eAAe,CAAC,qBAAI,CAA+B,CAAC;IACrE,aAAG,CAAU,cAAc,CAAC,aAAG,CAAI,cAAc,EAAE;QAClD,OAAO,EAAE;YACR,EAAE,EAAE,qBAAI,CAA+B,EAAE;YACzC,KAAK,EAAE;gBACN,KAAK,EAAE,qBAAI,CAA+B,WAAW,CAAC,WAAW;gBACjE,QAAQ,EAAE,wBAAwB;aAClC;SACD;KACD,CAAC,CAAC;IAEH,cAAG,CAAM,EAAE,CAAkC,0BAAmB,CAAC,SAAS,CAAC,CAAC,6BAA6B,CACxG,8BAAI,kCAEJ,CAAC;IACF,cAAG,CAAM,EAAE,CAAkC,0BAAmB,CAAC,SAAS,CAAC,CAAC,6BAA6B,CACxG,uCAAI,+BAEJ,CAAC;IACF,cAAG,CAAM,EAAE,CAAkC,0BAAmB,CAAC,SAAS,CAAC,CAAC,6BAA6B,CACxG,0BAAI,+BAEJ,CAAC;IAGF,MAAM,qBAAqB,GAAG,cAAG,CAAM,EAAE,CAAyB,2BAAuB,CAAC,aAAa,CAAC,CAAC;IACzG,qBAAqB,CAAC,qBAAqB,CAAC;QAC3C,GAAG,mBAAG;QACN,UAAU,EAAE;YACX,mDAAmD,EAAE;gBACpD,KAAK,wCAAgC;gBACrC,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,KAAK;gBACd,WAAW,EAAE,IAAA,cAAQ,EAAC,CAAmD,EAAE,IAA4F,CAAC;aACxK;SACD;KACD,CAAC,CAAC","file":"url.contribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { MenuId, MenuRegistry, Action2, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IURLService } from 'vs/platform/url/common/url';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';\nimport { ExternalUriResolverContribution } from 'vs/workbench/contrib/url/browser/externalUriResolver';\nimport { manageTrustedDomainSettingsCommand } from 'vs/workbench/contrib/url/browser/trustedDomains';\nimport { TrustedDomainsFileSystemProvider } from 'vs/workbench/contrib/url/browser/trustedDomainsFileSystemProvider';\nimport { OpenerValidatorContributions } from 'vs/workbench/contrib/url/browser/trustedDomainsValidator';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { Categories } from 'vs/platform/action/common/actionCommonCategories';\nimport { ConfigurationScope, Extensions as ConfigurationExtensions, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport { workbenchConfigurationNodeBase } from 'vs/workbench/common/configuration';\n\nclass OpenUrlAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.url.openUrl',\n\t\t\ttitle: { value: localize('openUrl', \"Open URL\"), original: 'Open URL' },\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst urlService = accessor.get(IURLService);\n\n\t\treturn quickInputService.input({ prompt: localize('urlToOpen', \"URL to open\") }).then(input => {\n\t\t\tif (input) {\n\t\t\t\tconst uri = URI.parse(input);\n\t\t\t\turlService.open(uri, { originalUrl: input });\n\t\t\t}\n\t\t});\n\t}\n}\n\nregisterAction2(OpenUrlAction);\n\n/**\n * Trusted Domains Contribution\n */\n\nCommandsRegistry.registerCommand(manageTrustedDomainSettingsCommand);\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: manageTrustedDomainSettingsCommand.id,\n\t\ttitle: {\n\t\t\tvalue: manageTrustedDomainSettingsCommand.description.description,\n\t\t\toriginal: 'Manage Trusted Domains'\n\t\t}\n\t}\n});\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(\n\tOpenerValidatorContributions,\n\tLifecyclePhase.Restored\n);\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(\n\tTrustedDomainsFileSystemProvider,\n\tLifecyclePhase.Ready\n);\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(\n\tExternalUriResolverContribution,\n\tLifecyclePhase.Ready\n);\n\n\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\nconfigurationRegistry.registerConfiguration({\n\t...workbenchConfigurationNodeBase,\n\tproperties: {\n\t\t'workbench.trustedDomains.promptInTrustedWorkspace': {\n\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t\tdescription: localize('workbench.trustedDomains.promptInTrustedWorkspace', \"When enabled, trusted domain prompts will appear when opening links in trusted workspaces.\")\n\t\t}\n\t}\n});\n"]}