{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/themes/test/node/colorRegistry.releaseTest.ts"],"names":[],"mappings":"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","file":"colorRegistry.releaseTest.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IColorRegistry, Extensions, ColorContribution, asCssVariableName } from 'vs/platform/theme/common/colorRegistry';\nimport { asTextOrError } from 'vs/platform/request/common/request';\nimport * as pfs from 'vs/base/node/pfs';\nimport * as path from 'vs/base/common/path';\nimport * as assert from 'assert';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { RequestService } from 'vs/platform/request/node/requestService';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\n// eslint-disable-next-line local/code-import-patterns\nimport 'vs/workbench/workbench.desktop.main';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { mock } from 'vs/base/test/common/mock';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { FileAccess } from 'vs/base/common/network';\nimport { TestLoggerService } from 'vs/workbench/test/common/workbenchTestServices';\n\ninterface ColorInfo {\n\tdescription: string;\n\toffset: number;\n\tlength: number;\n}\n\ninterface DescriptionDiff {\n\tdocDescription: string;\n\tspecDescription: string;\n}\n\nexport const experimental: string[] = []; // 'settings.modifiedItemForeground', 'editorUnnecessary.foreground' ];\n\n\nconst knwonVariablesFileName = 'vscode-known-variables.json';\n\nsuite('Color Registry', function () {\n\n\ttest(`update colors in ${knwonVariablesFileName}`, async function () {\n\t\tconst varFilePath = FileAccess.asFileUri(`vs/../../build/lib/stylelint/${knwonVariablesFileName}`).fsPath;\n\t\tconst content = (await pfs.Promises.readFile(varFilePath)).toString();\n\n\t\tconst variablesInfo = JSON.parse(content);\n\n\t\tconst colorsArray = variablesInfo.colors as string[];\n\n\t\tassert.ok(colorsArray && colorsArray.length > 0, '${knwonVariablesFileName} contains no color descriptions');\n\n\t\tconst colors = new Set(colorsArray);\n\n\t\tconst updatedColors = [];\n\t\tconst missing = [];\n\t\tconst themingRegistry = Registry.as<IColorRegistry>(Extensions.ColorContribution);\n\t\tfor (const color of themingRegistry.getColors()) {\n\t\t\tconst id = asCssVariableName(color.id);\n\n\t\t\tif (!colors.has(id)) {\n\t\t\t\tif (!color.deprecationMessage) {\n\t\t\t\t\tmissing.push(id);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcolors.delete(id);\n\t\t\t}\n\t\t\tupdatedColors.push(id);\n\t\t}\n\n\t\tconst superfluousKeys = [...colors.keys()];\n\n\t\tlet errorText = '';\n\t\tif (missing.length > 0) {\n\t\t\terrorText += `\\n\\Adding the following colors:\\n\\n${JSON.stringify(missing, undefined, '\\t')}\\n`;\n\t\t}\n\t\tif (superfluousKeys.length > 0) {\n\t\t\terrorText += `\\n\\Removing the following colors:\\n\\n${superfluousKeys.join('\\n')}\\n`;\n\t\t}\n\n\t\tif (errorText.length > 0) {\n\t\t\tupdatedColors.sort();\n\t\t\tvariablesInfo.colors = updatedColors;\n\t\t\tawait pfs.Promises.writeFile(varFilePath, JSON.stringify(variablesInfo, undefined, '\\t'));\n\n\t\t\tassert.fail(`\\n\\Updating ${path.normalize(varFilePath)}.\\nPlease verify and commit.\\n\\n${errorText}\\n`);\n\t\t}\n\t});\n\n\ttest('all colors listed in theme-color.md', async function () {\n\t\t// avoid importing the TestEnvironmentService as it brings in a duplicate registration of the file editor input factory.\n\t\tconst environmentService = new class extends mock<INativeEnvironmentService>() { override args = { _: [] }; };\n\n\t\tconst docUrl = 'https://raw.githubusercontent.com/microsoft/vscode-docs/main/api/references/theme-color.md';\n\n\t\tconst reqContext = await new RequestService(new TestConfigurationService(), environmentService, new NullLogService(), new TestLoggerService()).request({ url: docUrl }, CancellationToken.None);\n\t\tconst content = (await asTextOrError(reqContext))!;\n\n\t\tconst expression = /-\\s*\\`([\\w\\.]+)\\`: (.*)/g;\n\n\t\tlet m: RegExpExecArray | null;\n\t\tconst colorsInDoc: { [id: string]: ColorInfo } = Object.create(null);\n\t\tlet nColorsInDoc = 0;\n\t\twhile (m = expression.exec(content)) {\n\t\t\tcolorsInDoc[m[1]] = { description: m[2], offset: m.index, length: m.length };\n\t\t\tnColorsInDoc++;\n\t\t}\n\t\tassert.ok(nColorsInDoc > 0, 'theme-color.md contains to color descriptions');\n\n\t\tconst missing = Object.create(null);\n\t\tconst descriptionDiffs: { [id: string]: DescriptionDiff } = Object.create(null);\n\n\t\tconst themingRegistry = Registry.as<IColorRegistry>(Extensions.ColorContribution);\n\t\tfor (const color of themingRegistry.getColors()) {\n\t\t\tif (!colorsInDoc[color.id]) {\n\t\t\t\tif (!color.deprecationMessage) {\n\t\t\t\t\tmissing[color.id] = getDescription(color);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst docDescription = colorsInDoc[color.id].description;\n\t\t\t\tconst specDescription = getDescription(color);\n\t\t\t\tif (docDescription !== specDescription) {\n\t\t\t\t\tdescriptionDiffs[color.id] = { docDescription, specDescription };\n\t\t\t\t}\n\t\t\t\tdelete colorsInDoc[color.id];\n\t\t\t}\n\t\t}\n\t\tconst colorsInExtensions = await getColorsFromExtension();\n\t\tfor (const colorId in colorsInExtensions) {\n\t\t\tif (!colorsInDoc[colorId]) {\n\t\t\t\tmissing[colorId] = colorsInExtensions[colorId];\n\t\t\t} else {\n\t\t\t\tdelete colorsInDoc[colorId];\n\t\t\t}\n\t\t}\n\t\tfor (const colorId of experimental) {\n\t\t\tif (missing[colorId]) {\n\t\t\t\tdelete missing[colorId];\n\t\t\t}\n\t\t\tif (colorsInDoc[colorId]) {\n\t\t\t\tassert.fail(`Color ${colorId} found in doc but marked experimental. Please remove from experimental list.`);\n\t\t\t}\n\t\t}\n\t\tconst superfluousKeys = Object.keys(colorsInDoc);\n\t\tconst undocumentedKeys = Object.keys(missing).map(k => `\\`${k}\\`: ${missing[k]}`);\n\n\n\t\tlet errorText = '';\n\t\tif (undocumentedKeys.length > 0) {\n\t\t\terrorText += `\\n\\nAdd the following colors:\\n\\n${undocumentedKeys.join('\\n')}\\n`;\n\t\t}\n\t\tif (superfluousKeys.length > 0) {\n\t\t\terrorText += `\\n\\Remove the following colors:\\n\\n${superfluousKeys.join('\\n')}\\n`;\n\t\t}\n\n\t\tif (errorText.length > 0) {\n\t\t\tassert.fail(`\\n\\nOpen https://github.dev/microsoft/vscode-docs/blob/vnext/api/references/theme-color.md#50${errorText}`);\n\t\t}\n\t});\n});\n\nfunction getDescription(color: ColorContribution) {\n\tlet specDescription = color.description;\n\tif (color.deprecationMessage) {\n\t\tspecDescription = specDescription + ' ' + color.deprecationMessage;\n\t}\n\treturn specDescription;\n}\n\nasync function getColorsFromExtension(): Promise<{ [id: string]: string }> {\n\tconst extPath = FileAccess.asFileUri('vs/../../extensions').fsPath;\n\tconst extFolders = await pfs.Promises.readDirsInDir(extPath);\n\tconst result: { [id: string]: string } = Object.create(null);\n\tfor (const folder of extFolders) {\n\t\ttry {\n\t\t\tconst packageJSON = JSON.parse((await pfs.Promises.readFile(path.join(extPath, folder, 'package.json'))).toString());\n\t\t\tconst contributes = packageJSON['contributes'];\n\t\t\tif (contributes) {\n\t\t\t\tconst colors = contributes['colors'];\n\t\t\t\tif (colors) {\n\t\t\t\t\tfor (const color of colors) {\n\t\t\t\t\t\tconst colorId = color['id'];\n\t\t\t\t\t\tif (colorId) {\n\t\t\t\t\t\t\tresult[colorId] = colorId['description'];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// ignore\n\t\t}\n\n\t}\n\treturn result;\n}\n"]}