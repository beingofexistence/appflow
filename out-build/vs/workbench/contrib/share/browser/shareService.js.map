{"version":3,"sources":["vs/workbench/contrib/share/browser/shareService.ts"],"names":[],"mappings":"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","file":"shareService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { score } from 'vs/editor/common/languageSelector';\nimport { localize } from 'vs/nls';\nimport { ISubmenuItem } from 'vs/platform/actions/common/actions';\nimport { IContextKey, IContextKeyService, RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { IQuickInputService, IQuickPickItem } from 'vs/platform/quickinput/common/quickInput';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IShareProvider, IShareService, IShareableItem } from 'vs/workbench/contrib/share/common/share';\n\nexport const ShareProviderCountContext = new RawContextKey<number>('shareProviderCount', 0, localize('shareProviderCount', \"The number of available share providers\"));\n\ntype ShareEvent = {\n\tproviderId: string;\n};\ntype ShareClassification = {\n\towner: 'joyceerhl'; comment: 'Reporting which share provider is invoked.';\n\tproviderId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The id of the selected share provider.' };\n};\n\nexport class ShareService implements IShareService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly providerCount: IContextKey<number>;\n\tprivate readonly _providers = new Set<IShareProvider>();\n\n\tconstructor(\n\t\t@IContextKeyService private contextKeyService: IContextKeyService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IQuickInputService private quickInputService: IQuickInputService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t) {\n\t\tthis.providerCount = ShareProviderCountContext.bindTo(this.contextKeyService);\n\t}\n\n\tregisterShareProvider(provider: IShareProvider): IDisposable {\n\t\tthis._providers.add(provider);\n\t\tthis.providerCount.set(this._providers.size);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis._providers.delete(provider);\n\t\t\t\tthis.providerCount.set(this._providers.size);\n\t\t\t}\n\t\t};\n\t}\n\n\tgetShareActions(): ISubmenuItem[] {\n\t\t// todo@joyceerhl return share actions\n\t\treturn [];\n\t}\n\n\tasync provideShare(item: IShareableItem, token: CancellationToken): Promise<URI | string | undefined> {\n\t\tconst language = this.codeEditorService.getActiveCodeEditor()?.getModel()?.getLanguageId() ?? '';\n\t\tconst providers = [...this._providers.values()]\n\t\t\t.filter((p) => score(p.selector, item.resourceUri, language, true, undefined, undefined) > 0)\n\t\t\t.sort((a, b) => a.priority - b.priority);\n\n\t\tif (providers.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (providers.length === 1) {\n\t\t\tthis.telemetryService.publicLog2<ShareEvent, ShareClassification>('shareService.share', { providerId: providers[0].id });\n\t\t\treturn providers[0].provideShare(item, token);\n\t\t}\n\n\t\tconst items: (IQuickPickItem & { provider: IShareProvider })[] = providers.map((p) => ({ label: p.label, provider: p }));\n\t\tconst selected = await this.quickInputService.pick(items, { canPickMany: false, placeHolder: localize('type to filter', 'Choose how to share {0}', this.labelService.getUriLabel(item.resourceUri)) }, token);\n\n\t\tif (selected !== undefined) {\n\t\t\tthis.telemetryService.publicLog2<ShareEvent, ShareClassification>('shareService.share', { providerId: selected.provider.id });\n\t\t\treturn selected.provider.provideShare(item, token);\n\t\t}\n\n\t\treturn;\n\t}\n}\n"]}