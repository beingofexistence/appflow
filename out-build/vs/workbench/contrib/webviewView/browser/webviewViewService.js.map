{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/webviewView/browser/webviewViewService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAmEnF,QAAA,IAAI,GAAkB,IAAA,mBAAG,EAAkC,oBAAoB,CAAC,CAAC;IAuB9F,MAAa,IAAmB,SAAQ,eAAG;QAA3C;;YAIkB,MAAC,GAAY,IAAI,GAAG,EAAgC,CAAC;YAErD,MAAC,GAAkB,IAAI,GAAG,EAA2E,CAAC;YAEtG,MAAC,GAA0B,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAqC,CAAC,CAAC;YACzF,4BAAuB,GAAG,IAAI,CAAC,CAAC,CAAwB,KAAK,CAAC;QAsC/E,CAAC;QApCA,QAAQ,CAAC,QAAgB,EAAE,QAA8B;YACxD,IAAI,IAAI,CAAC,CAAC,CAAU,GAAG,CAAC,QAAQ,CAAC,EAAE;gBAClC,MAAM,IAAI,KAAK,CAAC,wCAAwC,QAAQ,EAAE,CAAC,CAAC;aACpE;YAED,IAAI,CAAC,CAAC,CAAU,GAAG,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YACxC,IAAI,CAAC,CAAC,CAAwB,IAAI,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC;YAE3D,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAgB,GAAG,CAAC,QAAQ,CAAC,CAAC;YACpD,IAAI,OAAO,EAAE;gBACZ,QAAQ,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,EAAE,gCAAiB,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;oBACnE,IAAI,CAAC,CAAC,CAAgB,MAAM,CAAC,QAAQ,CAAC,CAAC;oBACvC,OAAO,CAAC,OAAO,EAAE,CAAC;gBACnB,CAAC,CAAC,CAAC;aACH;YAED,OAAO,IAAA,eAAG,EAAU,GAAG,EAAE;gBACxB,IAAI,CAAC,CAAC,CAAU,MAAM,CAAC,QAAQ,CAAC,CAAC;YAClC,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,OAAO,CAAC,QAAgB,EAAE,OAAoB,EAAE,YAA+B;YAC9E,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAU,GAAG,CAAC,QAAQ,CAAC,CAAC;YAC/C,IAAI,CAAC,QAAQ,EAAE;gBACd,IAAI,IAAI,CAAC,CAAC,CAAgB,GAAG,CAAC,QAAQ,CAAC,EAAE;oBACxC,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAC;iBACjD;gBAED,IAAI,OAAmB,CAAC;gBACxB,MAAM,CAAC,GAAG,IAAI,OAAO,CAAO,CAAC,CAAC,EAAE,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;gBAC9C,IAAI,CAAC,CAAC,CAAgB,GAAG,CAAC,QAAQ,EAAE,EAAE,OAAO,EAAE,OAAO,EAAE,OAAQ,EAAE,CAAC,CAAC;gBACpE,OAAO,CAAC,CAAC;aACT;YAED,OAAO,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;QAChD,CAAC;KACD;IA/CD,oBA+CC","file":"webviewViewService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IViewBadge } from 'vs/workbench/common/views';\nimport { IOverlayWebview } from 'vs/workbench/contrib/webview/browser/webview';\n\n/**\n * A webview shown in a view pane.\n */\nexport interface WebviewView {\n\t/**\n\t * The text displayed in the view's title.\n\t */\n\ttitle?: string;\n\n\t/**\n\t * Additional text shown for this view.\n\t */\n\tdescription?: string;\n\n\t/**\n\t * The badge shown for this view.\n\t */\n\tbadge?: IViewBadge;\n\n\t/**\n\t * The webview associated with this webview view.\n\t */\n\treadonly webview: IOverlayWebview;\n\n\t/**\n\t * Fired when the visibility of the webview view changes.\n\t *\n\t * This can happen when the view itself is hidden, when the view is collapsed, or when the user switches away from\n\t * the view.\n\t */\n\treadonly onDidChangeVisibility: Event<boolean>;\n\n\t/**\n\t * Fired when the webview view has been disposed of.\n\t */\n\treadonly onDispose: Event<void>;\n\n\t/**\n\t * Dispose of the webview view and clean up any associated resources.\n\t */\n\tdispose(): void;\n\n\t/**\n\t * Force the webview view to show.\n\t */\n\tshow(preserveFocus: boolean): void;\n}\n\n/**\n * Fill in the contents of a newly created webview view.\n */\ninterface IWebviewViewResolver {\n\t/**\n\t * Fill in the contents of a webview view.\n\t */\n\tresolve(webviewView: WebviewView, cancellation: CancellationToken): Promise<void>;\n}\n\nexport const IWebviewViewService = createDecorator<IWebviewViewService>('webviewViewService');\n\nexport interface IWebviewViewService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Fired when a resolver has been registered\n\t */\n\treadonly onNewResolverRegistered: Event<{ readonly viewType: string }>;\n\n\t/**\n\t * Register a new {@link IWebviewViewResolver webview view resolver}.\n\t */\n\tregister(viewType: string, resolver: IWebviewViewResolver): IDisposable;\n\n\t/**\n\t * Try to resolve a webview view. The promise will not resolve until a resolver for the webview has been registered\n\t * and run\n\t */\n\tresolve(viewType: string, webview: WebviewView, cancellation: CancellationToken): Promise<void>;\n}\n\nexport class WebviewViewService extends Disposable implements IWebviewViewService {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly _resolvers = new Map<string, IWebviewViewResolver>();\n\n\tprivate readonly _awaitingRevival = new Map<string, { readonly webview: WebviewView; readonly resolve: () => void }>();\n\n\tprivate readonly _onNewResolverRegistered = this._register(new Emitter<{ readonly viewType: string }>());\n\tpublic readonly onNewResolverRegistered = this._onNewResolverRegistered.event;\n\n\tregister(viewType: string, resolver: IWebviewViewResolver): IDisposable {\n\t\tif (this._resolvers.has(viewType)) {\n\t\t\tthrow new Error(`View resolver already registered for ${viewType}`);\n\t\t}\n\n\t\tthis._resolvers.set(viewType, resolver);\n\t\tthis._onNewResolverRegistered.fire({ viewType: viewType });\n\n\t\tconst pending = this._awaitingRevival.get(viewType);\n\t\tif (pending) {\n\t\t\tresolver.resolve(pending.webview, CancellationToken.None).then(() => {\n\t\t\t\tthis._awaitingRevival.delete(viewType);\n\t\t\t\tpending.resolve();\n\t\t\t});\n\t\t}\n\n\t\treturn toDisposable(() => {\n\t\t\tthis._resolvers.delete(viewType);\n\t\t});\n\t}\n\n\tresolve(viewType: string, webview: WebviewView, cancellation: CancellationToken): Promise<void> {\n\t\tconst resolver = this._resolvers.get(viewType);\n\t\tif (!resolver) {\n\t\t\tif (this._awaitingRevival.has(viewType)) {\n\t\t\t\tthrow new Error('View already awaiting revival');\n\t\t\t}\n\n\t\t\tlet resolve: () => void;\n\t\t\tconst p = new Promise<void>(r => resolve = r);\n\t\t\tthis._awaitingRevival.set(viewType, { webview, resolve: resolve! });\n\t\t\treturn p;\n\t\t}\n\n\t\treturn resolver.resolve(webview, cancellation);\n\t}\n}\n"]}