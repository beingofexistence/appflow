{"version":3,"sources":["vs/workbench/contrib/extensions/electron-sandbox/extensionsActions.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAahG,MAAa,IAA2B,SAAQ,aAAG;QAElD;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,kDAAkD;gBACtD,KAAK,EAAE,EAAE,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAsB,EAAE,IAAwB,CAAC,EAAE,QAAQ,EAAE,wBAAwB,EAAE;gBAChH,QAAQ,EAAE,yBAAG;gBACb,EAAE,EAAE,IAAI;aACR,CAAC,CAAC;QACJ,CAAC;QAED,KAAK,CAAC,GAAG,CAAC,QAA0B;YACnC,MAAM,iBAAiB,GAAG,QAAQ,CAAC,GAAG,CAAC,aAAI,CAAe,CAAC;YAC3D,MAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,WAAG,CAAU,CAAC;YAC/C,MAAM,kBAAkB,GAAG,QAAQ,CAAC,GAAG,CAAC,yBAAI,CAA+B,CAAC;YAE5E,MAAM,cAAc,GAAG,SAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,CAAC;YACnE,MAAM,IAAI,GAAG,MAAM,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;YAEvD,IAAI,UAAe,CAAC;YACpB,IAAI,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC9C,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;aACvC;iBAAM;gBACN,UAAU,GAAG,cAAc,CAAC;aAC5B;YAED,IAAI,UAAU,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,EAAE;gBACvC,OAAO,iBAAiB,CAAC,gBAAgB,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;aAC7D;QACF,CAAC;KACD;IA9BD,oBA8BC;IAED,MAAa,IAA8B,SAAQ,aAAG;QAErD;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,sDAAsD;gBAC1D,KAAK,EAAE,EAAE,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAyB,EAAE,IAA2B,CAAC,EAAE,QAAQ,EAAE,2BAA2B,EAAE;gBACzH,QAAQ,EAAE,4BAAG,CAAQ,SAAS;gBAC9B,EAAE,EAAE,IAAI;aACR,CAAC,CAAC;QACJ,CAAC;QAED,KAAK,CAAC,GAAG,CAAC,QAA0B;YACnC,MAAM,0BAA0B,GAAG,QAAQ,CAAC,GAAG,CAAC,yBAAG,CAAyB,CAAC;YAC7E,OAAO,0BAA0B,CAAC,OAAO,EAAE,CAAC;QAC7C,CAAC;KACD;IAfD,oBAeC","file":"extensionsActions.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { URI } from 'vs/base/common/uri';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { INativeHostService } from 'vs/platform/native/common/native';\nimport { Schemas } from 'vs/base/common/network';\nimport { Action2 } from 'vs/platform/actions/common/actions';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { ExtensionsLocalizedLabel, IExtensionManagementService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { Categories } from 'vs/platform/action/common/actionCommonCategories';\n\nexport class OpenExtensionsFolderAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.extensions.action.openExtensionsFolder',\n\t\t\ttitle: { value: localize('openExtensionsFolder', \"Open Extensions Folder\"), original: 'Open Extensions Folder' },\n\t\t\tcategory: ExtensionsLocalizedLabel,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst nativeHostService = accessor.get(INativeHostService);\n\t\tconst fileService = accessor.get(IFileService);\n\t\tconst environmentService = accessor.get(INativeWorkbenchEnvironmentService);\n\n\t\tconst extensionsHome = URI.file(environmentService.extensionsPath);\n\t\tconst file = await fileService.resolve(extensionsHome);\n\n\t\tlet itemToShow: URI;\n\t\tif (file.children && file.children.length > 0) {\n\t\t\titemToShow = file.children[0].resource;\n\t\t} else {\n\t\t\titemToShow = extensionsHome;\n\t\t}\n\n\t\tif (itemToShow.scheme === Schemas.file) {\n\t\t\treturn nativeHostService.showItemInFolder(itemToShow.fsPath);\n\t\t}\n\t}\n}\n\nexport class CleanUpExtensionsFolderAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: '_workbench.extensions.action.cleanUpExtensionsFolder',\n\t\t\ttitle: { value: localize('cleanUpExtensionsFolder', \"Cleanup Extensions Folder\"), original: 'Cleanup Extensions Folder' },\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst extensionManagementService = accessor.get(IExtensionManagementService);\n\t\treturn extensionManagementService.cleanUp();\n\t}\n}\n\n"]}