{"version":3,"sources":["vs/workbench/contrib/extensions/electron-sandbox/extensionProfileService.ts"],"names":[],"mappings":"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","file":"extensionProfileService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, MutableDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { randomPort } from 'vs/base/common/ports';\nimport * as nls from 'vs/nls';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { ExtensionIdentifier, ExtensionIdentifierMap } from 'vs/platform/extensions/common/extensions';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { INativeHostService } from 'vs/platform/native/common/native';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { RuntimeExtensionsInput } from 'vs/workbench/contrib/extensions/common/runtimeExtensionsInput';\nimport { IExtensionHostProfileService, ProfileSessionState } from 'vs/workbench/contrib/extensions/electron-sandbox/runtimeExtensionsEditor';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { ExtensionHostKind } from 'vs/workbench/services/extensions/common/extensionHostKind';\nimport { IExtensionHostProfile, IExtensionService, ProfileSession } from 'vs/workbench/services/extensions/common/extensions';\nimport { ExtensionHostProfiler } from 'vs/workbench/services/extensions/electron-sandbox/extensionHostProfiler';\nimport { IStatusbarEntry, IStatusbarEntryAccessor, IStatusbarService, StatusbarAlignment } from 'vs/workbench/services/statusbar/browser/statusbar';\n\nexport class ExtensionHostProfileService extends Disposable implements IExtensionHostProfileService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeState: Emitter<void> = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeState: Event<void> = this._onDidChangeState.event;\n\n\tprivate readonly _onDidChangeLastProfile: Emitter<void> = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeLastProfile: Event<void> = this._onDidChangeLastProfile.event;\n\n\tprivate readonly _unresponsiveProfiles = new ExtensionIdentifierMap<IExtensionHostProfile>();\n\tprivate _profile: IExtensionHostProfile | null;\n\tprivate _profileSession: ProfileSession | null;\n\tprivate _state: ProfileSessionState = ProfileSessionState.None;\n\n\tprivate profilingStatusBarIndicator: IStatusbarEntryAccessor | undefined;\n\tprivate readonly profilingStatusBarIndicatorLabelUpdater = this._register(new MutableDisposable());\n\n\tpublic get state() { return this._state; }\n\tpublic get lastProfile() { return this._profile; }\n\n\tconstructor(\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@INativeHostService private readonly _nativeHostService: INativeHostService,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@IStatusbarService private readonly _statusbarService: IStatusbarService,\n\t\t@IProductService private readonly _productService: IProductService\n\t) {\n\t\tsuper();\n\t\tthis._profile = null;\n\t\tthis._profileSession = null;\n\t\tthis._setState(ProfileSessionState.None);\n\n\t\tCommandsRegistry.registerCommand('workbench.action.extensionHostProfiler.stop', () => {\n\t\t\tthis.stopProfiling();\n\t\t\tthis._editorService.openEditor(RuntimeExtensionsInput.instance, { pinned: true });\n\t\t});\n\t}\n\n\tprivate _setState(state: ProfileSessionState): void {\n\t\tif (this._state === state) {\n\t\t\treturn;\n\t\t}\n\t\tthis._state = state;\n\n\t\tif (this._state === ProfileSessionState.Running) {\n\t\t\tthis.updateProfilingStatusBarIndicator(true);\n\t\t} else if (this._state === ProfileSessionState.Stopping) {\n\t\t\tthis.updateProfilingStatusBarIndicator(false);\n\t\t}\n\n\t\tthis._onDidChangeState.fire(undefined);\n\t}\n\n\tprivate updateProfilingStatusBarIndicator(visible: boolean): void {\n\t\tthis.profilingStatusBarIndicatorLabelUpdater.clear();\n\n\t\tif (visible) {\n\t\t\tconst indicator: IStatusbarEntry = {\n\t\t\t\tname: nls.localize('status.profiler', \"Extension Profiler\"),\n\t\t\t\ttext: nls.localize('profilingExtensionHost', \"Profiling Extension Host\"),\n\t\t\t\tshowProgress: true,\n\t\t\t\tariaLabel: nls.localize('profilingExtensionHost', \"Profiling Extension Host\"),\n\t\t\t\ttooltip: nls.localize('selectAndStartDebug', \"Click to stop profiling.\"),\n\t\t\t\tcommand: 'workbench.action.extensionHostProfiler.stop'\n\t\t\t};\n\n\t\t\tconst timeStarted = Date.now();\n\t\t\tconst handle = setInterval(() => {\n\t\t\t\tthis.profilingStatusBarIndicator?.update({ ...indicator, text: nls.localize('profilingExtensionHostTime', \"Profiling Extension Host ({0} sec)\", Math.round((new Date().getTime() - timeStarted) / 1000)), });\n\t\t\t}, 1000);\n\t\t\tthis.profilingStatusBarIndicatorLabelUpdater.value = toDisposable(() => clearInterval(handle));\n\n\t\t\tif (!this.profilingStatusBarIndicator) {\n\t\t\t\tthis.profilingStatusBarIndicator = this._statusbarService.addEntry(indicator, 'status.profiler', StatusbarAlignment.RIGHT);\n\t\t\t} else {\n\t\t\t\tthis.profilingStatusBarIndicator.update(indicator);\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.profilingStatusBarIndicator) {\n\t\t\t\tthis.profilingStatusBarIndicator.dispose();\n\t\t\t\tthis.profilingStatusBarIndicator = undefined;\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async startProfiling(): Promise<any> {\n\t\tif (this._state !== ProfileSessionState.None) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst inspectPorts = await this._extensionService.getInspectPorts(ExtensionHostKind.LocalProcess, true);\n\n\t\tif (inspectPorts.length === 0) {\n\t\t\treturn this._dialogService.confirm({\n\t\t\t\ttype: 'info',\n\t\t\t\tmessage: nls.localize('restart1', \"Profile Extensions\"),\n\t\t\t\tdetail: nls.localize('restart2', \"In order to profile extensions a restart is required. Do you want to restart '{0}' now?\", this._productService.nameLong),\n\t\t\t\tprimaryButton: nls.localize({ key: 'restart3', comment: ['&& denotes a mnemonic'] }, \"&&Restart\")\n\t\t\t}).then(res => {\n\t\t\t\tif (res.confirmed) {\n\t\t\t\t\tthis._nativeHostService.relaunch({ addArgs: [`--inspect-extensions=${randomPort()}`] });\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tif (inspectPorts.length > 1) {\n\t\t\t// TODO\n\t\t\tconsole.warn(`There are multiple extension hosts available for profiling. Picking the first one...`);\n\t\t}\n\n\t\tthis._setState(ProfileSessionState.Starting);\n\n\t\treturn this._instantiationService.createInstance(ExtensionHostProfiler, inspectPorts[0]).start().then((value) => {\n\t\t\tthis._profileSession = value;\n\t\t\tthis._setState(ProfileSessionState.Running);\n\t\t}, (err) => {\n\t\t\tonUnexpectedError(err);\n\t\t\tthis._setState(ProfileSessionState.None);\n\t\t});\n\t}\n\n\tpublic stopProfiling(): void {\n\t\tif (this._state !== ProfileSessionState.Running || !this._profileSession) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._setState(ProfileSessionState.Stopping);\n\t\tthis._profileSession.stop().then((result) => {\n\t\t\tthis._setLastProfile(result);\n\t\t\tthis._setState(ProfileSessionState.None);\n\t\t}, (err) => {\n\t\t\tonUnexpectedError(err);\n\t\t\tthis._setState(ProfileSessionState.None);\n\t\t});\n\t\tthis._profileSession = null;\n\t}\n\n\tprivate _setLastProfile(profile: IExtensionHostProfile) {\n\t\tthis._profile = profile;\n\t\tthis._onDidChangeLastProfile.fire(undefined);\n\t}\n\n\tgetUnresponsiveProfile(extensionId: ExtensionIdentifier): IExtensionHostProfile | undefined {\n\t\treturn this._unresponsiveProfiles.get(extensionId);\n\t}\n\n\tsetUnresponsiveProfile(extensionId: ExtensionIdentifier, profile: IExtensionHostProfile): void {\n\t\tthis._unresponsiveProfiles.set(extensionId, profile);\n\t\tthis._setLastProfile(profile);\n\t}\n\n}\n"]}