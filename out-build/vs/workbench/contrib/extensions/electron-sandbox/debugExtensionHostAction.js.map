{"version":3,"sources":["vs/workbench/contrib/extensions/electron-sandbox/debugExtensionHostAction.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;;IAYzF,IAAM,IAAI,GAAV,MAAM,IAAyB,SAAQ,aAAG;;iBAChC,OAAE,GAAG,gDAAH,AAAmD,CAAC;iBACtD,UAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAoB,EAAE,IAAgC,CAAtE,AAAuE,CAAC;iBAC7E,cAAS,GAAG,sBAAH,AAAyB,CAAC;QAEnD,YACiC,CAAkB,EACb,CAAwB,EAC5B,CAAmB,EAChB,CAAsB,EACxB,CAAmB;YAErD,KAAK,CAAC,MAAI,CAAqB,EAAE,EAAE,MAAI,CAAqB,KAAK,EAAE,MAAI,CAAqB,SAAS,CAAC,CAAC;YANvE,MAAC,GAAD,CAAC,CAAiB;YACb,MAAC,GAAD,CAAC,CAAuB;YAC5B,MAAC,GAAD,CAAC,CAAkB;YAChB,MAAC,GAAD,CAAC,CAAqB;YACxB,MAAC,GAAD,CAAC,CAAkB;QAGtD,CAAC;QAEQ,KAAK,CAAC,GAAG;YAEjB,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,CAAC,CAAiB,eAAe,yCAAiC,KAAK,CAAC,CAAC;YACzG,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC9B,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,CAAC,CAAc,OAAO,CAAC;oBAC7C,OAAO,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAU,EAAE,IAAoB,CAAC;oBACvD,MAAM,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAU,EAAE,IAAyF,EAAE,IAAI,CAAC,CAAC,CAAc,QAAQ,CAAC;oBACzJ,aAAa,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAuD,CAArD,CAAuD,EAApD,EAAE,AAA6D,CAAC,SAApD,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC;iBACjF,CAAC,CAAC;gBACH,IAAI,GAAG,CAAC,SAAS,EAAE;oBAClB,MAAM,IAAI,CAAC,CAAC,CAAkB,QAAQ,CAAC,EAAE,OAAO,EAAE,CAAC,wBAAwB,IAAA,WAAG,GAAS,EAAE,CAAC,EAAE,CAAC,CAAC;iBAC9F;gBAED,OAAO;aACP;YAED,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC5B,OAAO;gBACP,OAAO,CAAC,IAAI,CAAC,sFAAsF,CAAC,CAAC;aACrG;YAED,OAAO,IAAI,CAAC,CAAC,CAAa,cAAc,CAAC,SAAS,EAAE;gBACnD,IAAI,EAAE,MAAM;gBACZ,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAgC,EAAE,IAAuB,CAAC;gBAC7E,OAAO,EAAE,QAAQ;gBACjB,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC;aACrB,CAAC,CAAC;QACJ,CAAC;;IA1CW,oBAAI;mBAAJ,IAAI;QAMd,WAAA,WAAG,CAAA;QACH,WAAA,aAAI,CAAA;QACJ,WAAA,aAAG,CAAA;QACH,WAAA,gBAAG,CAAA;QACH,WAAA,oBAAG,CAAA;OAVO,IAAI,CA2ChB","file":"debugExtensionHostAction.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from 'vs/base/common/actions';\nimport { randomPort } from 'vs/base/common/ports';\nimport * as nls from 'vs/nls';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { INativeHostService } from 'vs/platform/native/common/native';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IDebugService } from 'vs/workbench/contrib/debug/common/debug';\nimport { ExtensionHostKind } from 'vs/workbench/services/extensions/common/extensionHostKind';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\n\nexport class DebugExtensionHostAction extends Action {\n\tstatic readonly ID = 'workbench.extensions.action.debugExtensionHost';\n\tstatic readonly LABEL = nls.localize('debugExtensionHost', \"Start Debugging Extension Host\");\n\tstatic readonly CSS_CLASS = 'debug-extension-host';\n\n\tconstructor(\n\t\t@IDebugService private readonly _debugService: IDebugService,\n\t\t@INativeHostService private readonly _nativeHostService: INativeHostService,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@IProductService private readonly productService: IProductService\n\t) {\n\t\tsuper(DebugExtensionHostAction.ID, DebugExtensionHostAction.LABEL, DebugExtensionHostAction.CSS_CLASS);\n\t}\n\n\toverride async run(): Promise<any> {\n\n\t\tconst inspectPorts = await this._extensionService.getInspectPorts(ExtensionHostKind.LocalProcess, false);\n\t\tif (inspectPorts.length === 0) {\n\t\t\tconst res = await this._dialogService.confirm({\n\t\t\t\tmessage: nls.localize('restart1', \"Profile Extensions\"),\n\t\t\t\tdetail: nls.localize('restart2', \"In order to profile extensions a restart is required. Do you want to restart '{0}' now?\", this.productService.nameLong),\n\t\t\t\tprimaryButton: nls.localize({ key: 'restart3', comment: ['&& denotes a mnemonic'] }, \"&&Restart\")\n\t\t\t});\n\t\t\tif (res.confirmed) {\n\t\t\t\tawait this._nativeHostService.relaunch({ addArgs: [`--inspect-extensions=${randomPort()}`] });\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (inspectPorts.length > 1) {\n\t\t\t// TODO\n\t\t\tconsole.warn(`There are multiple extension hosts available for debugging. Picking the first one...`);\n\t\t}\n\n\t\treturn this._debugService.startDebugging(undefined, {\n\t\t\ttype: 'node',\n\t\t\tname: nls.localize('debugExtensionHost.launch.name', \"Attach Extension Host\"),\n\t\t\trequest: 'attach',\n\t\t\tport: inspectPorts[0]\n\t\t});\n\t}\n}\n"]}