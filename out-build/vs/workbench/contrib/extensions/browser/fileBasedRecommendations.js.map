{"version":3,"sources":["vs/workbench/contrib/extensions/browser/fileBasedRecommendations.ts"],"names":[],"mappings":"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","file":"fileBasedRecommendations.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ExtensionRecommendations, ExtensionRecommendation } from 'vs/workbench/contrib/extensions/browser/extensionRecommendations';\nimport { EnablementState } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { ExtensionRecommendationReason, IExtensionIgnoredRecommendationsService } from 'vs/workbench/services/extensionRecommendations/common/extensionRecommendations';\nimport { IExtensionsWorkbenchService, IExtension } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { localize } from 'vs/nls';\nimport { StorageScope, IStorageService, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IFileContentCondition, IFilePathCondition, IFileLanguageCondition, IFileOpenCondition } from 'vs/base/common/product';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { Schemas } from 'vs/base/common/network';\nimport { basename, extname } from 'vs/base/common/resources';\nimport { match } from 'vs/base/common/glob';\nimport { URI } from 'vs/base/common/uri';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { IExtensionRecommendationNotificationService, RecommendationsNotificationResult, RecommendationSource } from 'vs/platform/extensionRecommendations/common/extensionRecommendations';\nimport { distinct } from 'vs/base/common/arrays';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { CellUri } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { disposableTimeout } from 'vs/base/common/async';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { areSameExtensions } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { isEmptyObject } from 'vs/base/common/types';\nimport { PLAINTEXT_LANGUAGE_ID } from 'vs/editor/common/languages/modesRegistry';\n\nconst promptedRecommendationsStorageKey = 'fileBasedRecommendations/promptedRecommendations';\nconst recommendationsStorageKey = 'extensionsAssistant/recommendations';\nconst milliSecondsInADay = 1000 * 60 * 60 * 24;\n\nexport class FileBasedRecommendations extends ExtensionRecommendations {\n\n\tprivate readonly fileOpenRecommendations: IStringDictionary<IFileOpenCondition[]>;\n\tprivate readonly recommendationsByPattern = new Map<string, IStringDictionary<IFileOpenCondition[]>>();\n\tprivate readonly fileBasedRecommendations = new Map<string, { recommendedTime: number }>();\n\tprivate readonly fileBasedImportantRecommendations = new Set<string>();\n\n\tget recommendations(): ReadonlyArray<ExtensionRecommendation> {\n\t\tconst recommendations: ExtensionRecommendation[] = [];\n\t\t[...this.fileBasedRecommendations.keys()]\n\t\t\t.sort((a, b) => {\n\t\t\t\tif (this.fileBasedRecommendations.get(a)!.recommendedTime === this.fileBasedRecommendations.get(b)!.recommendedTime) {\n\t\t\t\t\tif (this.fileBasedImportantRecommendations.has(a)) {\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.fileBasedImportantRecommendations.has(b)) {\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn this.fileBasedRecommendations.get(a)!.recommendedTime > this.fileBasedRecommendations.get(b)!.recommendedTime ? -1 : 1;\n\t\t\t})\n\t\t\t.forEach(extensionId => {\n\t\t\t\trecommendations.push({\n\t\t\t\t\textensionId,\n\t\t\t\t\treason: {\n\t\t\t\t\t\treasonId: ExtensionRecommendationReason.File,\n\t\t\t\t\t\treasonText: localize('fileBasedRecommendation', \"This extension is recommended based on the files you recently opened.\")\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\treturn recommendations;\n\t}\n\n\tget importantRecommendations(): ReadonlyArray<ExtensionRecommendation> {\n\t\treturn this.recommendations.filter(e => this.fileBasedImportantRecommendations.has(e.extensionId));\n\t}\n\n\tget otherRecommendations(): ReadonlyArray<ExtensionRecommendation> {\n\t\treturn this.recommendations.filter(e => !this.fileBasedImportantRecommendations.has(e.extensionId));\n\t}\n\n\tconstructor(\n\t\t@IExtensionsWorkbenchService private readonly extensionsWorkbenchService: IExtensionsWorkbenchService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IProductService productService: IProductService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IExtensionRecommendationNotificationService private readonly extensionRecommendationNotificationService: IExtensionRecommendationNotificationService,\n\t\t@IExtensionIgnoredRecommendationsService private readonly extensionIgnoredRecommendationsService: IExtensionIgnoredRecommendationsService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t) {\n\t\tsuper();\n\t\tthis.fileOpenRecommendations = {};\n\t\tif (productService.extensionRecommendations) {\n\t\t\tfor (const [extensionId, recommendation] of Object.entries(productService.extensionRecommendations)) {\n\t\t\t\tif (recommendation.onFileOpen) {\n\t\t\t\t\tthis.fileOpenRecommendations[extensionId.toLowerCase()] = recommendation.onFileOpen;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected async doActivate(): Promise<void> {\n\t\tif (isEmptyObject(this.fileOpenRecommendations)) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.extensionsWorkbenchService.whenInitialized;\n\n\t\tconst cachedRecommendations = this.getCachedRecommendations();\n\t\tconst now = Date.now();\n\t\t// Retire existing recommendations if they are older than a week or are not part of this.productService.extensionTips anymore\n\t\tObject.entries(cachedRecommendations).forEach(([key, value]) => {\n\t\t\tconst diff = (now - value) / milliSecondsInADay;\n\t\t\tif (diff <= 7 && this.fileOpenRecommendations[key]) {\n\t\t\t\tthis.fileBasedRecommendations.set(key.toLowerCase(), { recommendedTime: value });\n\t\t\t}\n\t\t});\n\n\t\tthis._register(this.modelService.onModelAdded(model => this.onModelAdded(model)));\n\t\tthis.modelService.getModels().forEach(model => this.onModelAdded(model));\n\t}\n\n\tprivate onModelAdded(model: ITextModel): void {\n\t\tconst uri = model.uri.scheme === Schemas.vscodeNotebookCell ? CellUri.parse(model.uri)?.notebook : model.uri;\n\t\tif (!uri) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst supportedSchemes = distinct([Schemas.untitled, Schemas.file, Schemas.vscodeRemote, ...this.workspaceContextService.getWorkspace().folders.map(folder => folder.uri.scheme)]);\n\t\tif (!uri || !supportedSchemes.includes(uri.scheme)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// re-schedule this bit of the operation to be off the critical path - in case glob-match is slow\n\t\tthis._register(disposableTimeout(() => this.promptImportantRecommendations(uri, model), 0));\n\t}\n\n\t/**\n\t * Prompt the user to either install the recommended extension for the file type in the current editor model\n\t * or prompt to search the marketplace if it has extensions that can support the file type\n\t */\n\tprivate promptImportantRecommendations(uri: URI, model: ITextModel, extensionRecommendations?: IStringDictionary<IFileOpenCondition[]>): void {\n\t\tconst pattern = extname(uri).toLowerCase();\n\t\textensionRecommendations = extensionRecommendations ?? this.recommendationsByPattern.get(pattern) ?? this.fileOpenRecommendations;\n\t\tconst extensionRecommendationEntries = Object.entries(extensionRecommendations);\n\t\tif (extensionRecommendationEntries.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst processedPathGlobs = new Map<string, boolean>();\n\t\tconst installed = this.extensionsWorkbenchService.local;\n\t\tconst recommendationsByPattern: IStringDictionary<IFileOpenCondition[]> = {};\n\t\tconst matchedRecommendations: IStringDictionary<IFileOpenCondition[]> = {};\n\t\tconst unmatchedRecommendations: IStringDictionary<IFileOpenCondition[]> = {};\n\t\tlet listenOnLanguageChange = false;\n\n\t\tfor (const [extensionId, conditions] of extensionRecommendationEntries) {\n\t\t\tconst conditionsByPattern: IFileOpenCondition[] = [];\n\t\t\tconst matchedConditions: IFileOpenCondition[] = [];\n\t\t\tconst unmatchedConditions: IFileOpenCondition[] = [];\n\t\t\tfor (const condition of conditions) {\n\t\t\t\tlet languageMatched = false;\n\t\t\t\tlet pathGlobMatched = false;\n\n\t\t\t\tconst isLanguageCondition = !!(<IFileLanguageCondition>condition).languages;\n\t\t\t\tconst isFileContentCondition = !!(<IFileContentCondition>condition).contentPattern;\n\t\t\t\tif (isLanguageCondition || isFileContentCondition) {\n\t\t\t\t\tconditionsByPattern.push(condition);\n\t\t\t\t}\n\n\t\t\t\tif (isLanguageCondition) {\n\t\t\t\t\tif ((<IFileLanguageCondition>condition).languages.includes(model.getLanguageId())) {\n\t\t\t\t\t\tlanguageMatched = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ((<IFilePathCondition>condition).pathGlob) {\n\t\t\t\t\tconst pathGlob = (<IFilePathCondition>condition).pathGlob;\n\t\t\t\t\tif (processedPathGlobs.get(pathGlob) ?? match((<IFilePathCondition>condition).pathGlob, uri.with({ fragment: '' }).toString())) {\n\t\t\t\t\t\tpathGlobMatched = true;\n\t\t\t\t\t}\n\t\t\t\t\tprocessedPathGlobs.set(pathGlob, pathGlobMatched);\n\t\t\t\t}\n\n\t\t\t\tif (!languageMatched && !pathGlobMatched) {\n\t\t\t\t\t// If the language is not matched and the path glob is not matched, then we don't need to check the other conditions\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlet matched = true;\n\t\t\t\tif (matched && condition.whenInstalled) {\n\t\t\t\t\tif (!condition.whenInstalled.every(id => installed.some(local => areSameExtensions({ id }, local.identifier)))) {\n\t\t\t\t\t\tmatched = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (matched && condition.whenNotInstalled) {\n\t\t\t\t\tif (installed.some(local => condition.whenNotInstalled?.some(id => areSameExtensions({ id }, local.identifier)))) {\n\t\t\t\t\t\tmatched = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (matched && isFileContentCondition) {\n\t\t\t\t\tif (!model.findMatches((<IFileContentCondition>condition).contentPattern, false, true, false, null, false).length) {\n\t\t\t\t\t\tmatched = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (matched) {\n\t\t\t\t\tmatchedConditions.push(condition);\n\t\t\t\t\tconditionsByPattern.pop();\n\t\t\t\t} else {\n\t\t\t\t\tif (isLanguageCondition || isFileContentCondition) {\n\t\t\t\t\t\tunmatchedConditions.push(condition);\n\t\t\t\t\t\tif (isLanguageCondition) {\n\t\t\t\t\t\t\tlistenOnLanguageChange = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tif (matchedConditions.length) {\n\t\t\t\tmatchedRecommendations[extensionId] = matchedConditions;\n\t\t\t}\n\t\t\tif (unmatchedConditions.length) {\n\t\t\t\tunmatchedRecommendations[extensionId] = unmatchedConditions;\n\t\t\t}\n\t\t\tif (conditionsByPattern.length) {\n\t\t\t\trecommendationsByPattern[extensionId] = conditionsByPattern;\n\t\t\t}\n\t\t}\n\n\t\tthis.recommendationsByPattern.set(pattern, recommendationsByPattern);\n\t\tif (Object.keys(unmatchedRecommendations).length) {\n\t\t\tif (listenOnLanguageChange) {\n\t\t\t\tconst disposables = new DisposableStore();\n\t\t\t\tdisposables.add(model.onDidChangeLanguage(() => {\n\t\t\t\t\t// re-schedule this bit of the operation to be off the critical path - in case glob-match is slow\n\t\t\t\t\tdisposables.add(disposableTimeout(() => {\n\t\t\t\t\t\tif (!disposables.isDisposed) {\n\t\t\t\t\t\t\tthis.promptImportantRecommendations(uri, model, unmatchedRecommendations);\n\t\t\t\t\t\t\tdisposables.dispose();\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 0));\n\t\t\t\t}));\n\t\t\t\tdisposables.add(model.onWillDispose(() => disposables.dispose()));\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(matchedRecommendations).length) {\n\t\t\tthis.promptFromRecommendations(uri, model, matchedRecommendations);\n\t\t}\n\t}\n\n\tprivate promptFromRecommendations(uri: URI, model: ITextModel, extensionRecommendations: IStringDictionary<IFileOpenCondition[]>): void {\n\t\tlet isImportantRecommendationForLanguage = false;\n\t\tconst importantRecommendations = new Set<string>();\n\t\tconst fileBasedRecommendations = new Set<string>();\n\t\tfor (const [extensionId, conditions] of Object.entries(extensionRecommendations)) {\n\t\t\tfor (const condition of conditions) {\n\t\t\t\tfileBasedRecommendations.add(extensionId);\n\t\t\t\tif (condition.important) {\n\t\t\t\t\timportantRecommendations.add(extensionId);\n\t\t\t\t\tthis.fileBasedImportantRecommendations.add(extensionId);\n\t\t\t\t}\n\t\t\t\tif ((<IFileLanguageCondition>condition).languages) {\n\t\t\t\t\tisImportantRecommendationForLanguage = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Update file based recommendations\n\t\tfor (const recommendation of fileBasedRecommendations) {\n\t\t\tconst filedBasedRecommendation = this.fileBasedRecommendations.get(recommendation) || { recommendedTime: Date.now(), sources: [] };\n\t\t\tfiledBasedRecommendation.recommendedTime = Date.now();\n\t\t\tthis.fileBasedRecommendations.set(recommendation, filedBasedRecommendation);\n\t\t}\n\n\t\tthis.storeCachedRecommendations();\n\n\t\tif (this.extensionRecommendationNotificationService.hasToIgnoreRecommendationNotifications()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst language = model.getLanguageId();\n\t\tconst languageName = this.languageService.getLanguageName(language);\n\t\tif (importantRecommendations.size &&\n\t\t\tthis.promptRecommendedExtensionForFileType(languageName && isImportantRecommendationForLanguage && language !== PLAINTEXT_LANGUAGE_ID ? localize('languageName', \"the {0} language\", languageName) : basename(uri), language, [...importantRecommendations])) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate promptRecommendedExtensionForFileType(name: string, language: string, recommendations: string[]): boolean {\n\t\trecommendations = this.filterIgnoredOrNotAllowed(recommendations);\n\t\tif (recommendations.length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\trecommendations = this.filterInstalled(recommendations, this.extensionsWorkbenchService.local)\n\t\t\t.filter(extensionId => this.fileBasedImportantRecommendations.has(extensionId));\n\n\t\tconst promptedRecommendations = language !== PLAINTEXT_LANGUAGE_ID ? this.getPromptedRecommendations()[language] : undefined;\n\t\tif (promptedRecommendations) {\n\t\t\trecommendations = recommendations.filter(extensionId => promptedRecommendations.includes(extensionId));\n\t\t}\n\n\t\tif (recommendations.length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.promptImportantExtensionsInstallNotification(recommendations, name, language);\n\t\treturn true;\n\t}\n\n\tprivate async promptImportantExtensionsInstallNotification(extensions: string[], name: string, language: string): Promise<void> {\n\t\ttry {\n\t\t\tconst result = await this.extensionRecommendationNotificationService.promptImportantExtensionsInstallNotification({ extensions, name, source: RecommendationSource.FILE });\n\t\t\tif (result === RecommendationsNotificationResult.Accepted) {\n\t\t\t\tthis.addToPromptedRecommendations(language, extensions);\n\t\t\t}\n\t\t} catch (error) { /* Ignore */ }\n\t}\n\n\tprivate getPromptedRecommendations(): IStringDictionary<string[]> {\n\t\treturn JSON.parse(this.storageService.get(promptedRecommendationsStorageKey, StorageScope.PROFILE, '{}'));\n\t}\n\n\tprivate addToPromptedRecommendations(language: string, extensions: string[]) {\n\t\tconst promptedRecommendations = this.getPromptedRecommendations();\n\t\tpromptedRecommendations[language] = distinct([...(promptedRecommendations[language] ?? []), ...extensions]);\n\t\tthis.storageService.store(promptedRecommendationsStorageKey, JSON.stringify(promptedRecommendations), StorageScope.PROFILE, StorageTarget.USER);\n\t}\n\n\tprivate filterIgnoredOrNotAllowed(recommendationsToSuggest: string[]): string[] {\n\t\tconst ignoredRecommendations = [...this.extensionIgnoredRecommendationsService.ignoredRecommendations, ...this.extensionRecommendationNotificationService.ignoredRecommendations];\n\t\treturn recommendationsToSuggest.filter(id => !ignoredRecommendations.includes(id));\n\t}\n\n\tprivate filterInstalled(recommendationsToSuggest: string[], installed: IExtension[]): string[] {\n\t\tconst installedExtensionsIds = installed.reduce((result, i) => {\n\t\t\tif (i.enablementState !== EnablementState.DisabledByExtensionKind) {\n\t\t\t\tresult.add(i.identifier.id.toLowerCase());\n\t\t\t}\n\t\t\treturn result;\n\t\t}, new Set<string>());\n\t\treturn recommendationsToSuggest.filter(id => !installedExtensionsIds.has(id.toLowerCase()));\n\t}\n\n\tprivate getCachedRecommendations(): IStringDictionary<number> {\n\t\tlet storedRecommendations = JSON.parse(this.storageService.get(recommendationsStorageKey, StorageScope.PROFILE, '[]'));\n\t\tif (Array.isArray(storedRecommendations)) {\n\t\t\tstoredRecommendations = storedRecommendations.reduce((result, id) => { result[id] = Date.now(); return result; }, <IStringDictionary<number>>{});\n\t\t}\n\t\tconst result: IStringDictionary<number> = {};\n\t\tObject.entries(storedRecommendations).forEach(([key, value]) => {\n\t\t\tif (typeof value === 'number') {\n\t\t\t\tresult[key.toLowerCase()] = value;\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\tprivate storeCachedRecommendations(): void {\n\t\tconst storedRecommendations: IStringDictionary<number> = {};\n\t\tthis.fileBasedRecommendations.forEach((value, key) => storedRecommendations[key] = value.recommendedTime);\n\t\tthis.storageService.store(recommendationsStorageKey, JSON.stringify(storedRecommendations), StorageScope.PROFILE, StorageTarget.MACHINE);\n\t}\n}\n"]}