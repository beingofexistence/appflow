{"version":3,"sources":["vs/workbench/contrib/extensions/browser/deprecatedExtensionsChecker.ts"],"names":[],"mappings":"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","file":"deprecatedExtensionsChecker.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IExtensionsWorkbenchService } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { localize } from 'vs/nls';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { SearchExtensionsAction } from 'vs/workbench/contrib/extensions/browser/extensionsActions';\nimport { distinct } from 'vs/base/common/arrays';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IExtensionManagementService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { areSameExtensions } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\n\nexport class DeprecatedExtensionsChecker extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IExtensionsWorkbenchService private readonly extensionsWorkbenchService: IExtensionsWorkbenchService,\n\t\t@IExtensionManagementService extensionManagementService: IExtensionManagementService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t\tthis.checkForDeprecatedExtensions();\n\t\tthis._register(extensionManagementService.onDidInstallExtensions(e => {\n\t\t\tconst ids: string[] = [];\n\t\t\tfor (const { local } of e) {\n\t\t\t\tif (local && extensionsWorkbenchService.local.find(extension => areSameExtensions(extension.identifier, local.identifier))?.deprecationInfo) {\n\t\t\t\t\tids.push(local.identifier.id.toLowerCase());\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (ids.length) {\n\t\t\t\tthis.setNotifiedDeprecatedExtensions(ids);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate async checkForDeprecatedExtensions(): Promise<void> {\n\t\tif (this.storageService.getBoolean('extensionsAssistant/doNotCheckDeprecated', StorageScope.PROFILE, false)) {\n\t\t\treturn;\n\t\t}\n\t\tconst local = await this.extensionsWorkbenchService.queryLocal();\n\t\tconst previouslyNotified = this.getNotifiedDeprecatedExtensions();\n\t\tconst toNotify = local.filter(e => !!e.deprecationInfo).filter(e => !previouslyNotified.includes(e.identifier.id.toLowerCase()));\n\t\tif (toNotify.length) {\n\t\t\tthis.notificationService.prompt(\n\t\t\t\tSeverity.Warning,\n\t\t\t\tlocalize('deprecated extensions', \"You have deprecated extensions installed. We recommend to review them and migrate to alternatives.\"),\n\t\t\t\t[{\n\t\t\t\t\tlabel: localize('showDeprecated', \"Show Deprecated Extensions\"),\n\t\t\t\t\trun: async () => {\n\t\t\t\t\t\tthis.setNotifiedDeprecatedExtensions(toNotify.map(e => e.identifier.id.toLowerCase()));\n\t\t\t\t\t\tconst action = this.instantiationService.createInstance(SearchExtensionsAction, toNotify.map(extension => `@id:${extension.identifier.id}`).join(' '));\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait action.run();\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\taction.dispose();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, {\n\t\t\t\t\tlabel: localize('neverShowAgain', \"Don't Show Again\"),\n\t\t\t\t\tisSecondary: true,\n\t\t\t\t\trun: () => this.storageService.store('extensionsAssistant/doNotCheckDeprecated', true, StorageScope.PROFILE, StorageTarget.USER)\n\t\t\t\t}]\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate getNotifiedDeprecatedExtensions(): string[] {\n\t\treturn JSON.parse(this.storageService.get('extensionsAssistant/deprecated', StorageScope.PROFILE, '[]'));\n\t}\n\n\tprivate setNotifiedDeprecatedExtensions(notified: string[]): void {\n\t\tthis.storageService.store('extensionsAssistant/deprecated', JSON.stringify(distinct([...this.getNotifiedDeprecatedExtensions(), ...notified])), StorageScope.PROFILE, StorageTarget.USER);\n\t}\n}\n"]}