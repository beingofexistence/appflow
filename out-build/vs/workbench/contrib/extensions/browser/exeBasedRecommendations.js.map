{"version":3,"sources":["vs/workbench/contrib/extensions/browser/exeBasedRecommendations.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAOzF,IAAM,IAAI,GAAV,MAAM,IAAwB,SAAQ,+BAAI;QAKhD,IAAI,oBAAoB,KAA6C,OAAO,IAAI,CAAC,CAAC,CAAU,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAyB,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9I,IAAI,wBAAwB,KAA6C,OAAO,IAAI,CAAC,CAAC,CAAc,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAyB,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAEtJ,IAAI,eAAe,KAA6C,OAAO,CAAC,GAAG,IAAI,CAAC,wBAAwB,EAAE,GAAG,IAAI,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;QAE1I,YACwB,CAA0C;YAEjE,KAAK,EAAE,CAAC;YAFgC,MAAC,GAAD,CAAC,CAAwB;YAT1D,MAAC,GAA4C,EAAE,CAAC;YAChD,MAAC,GAAgD,EAAE,CAAC;QAW5D,CAAC;QAED,kBAAkB,CAAC,GAAW;YAC7B,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC;iBACtB,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,GAAG,CAAC,WAAW,EAAE,CAAC;iBAC9D,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAyB,GAAG,CAAC,CAAC,CAAC;YAElD,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC;iBACnB,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,EAAE,KAAK,GAAG,CAAC,WAAW,EAAE,CAAC;iBAC9D,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAyB,GAAG,CAAC,CAAC,CAAC;YAElD,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC;QAC9B,CAAC;QAES,KAAK,CAAC,CAAC;YAChB,IAAI,CAAC,CAAC,GAAY,MAAM,IAAI,CAAC,CAAC,CAAoB,2BAA2B,EAAE,CAAC;YAChF,MAAM,IAAI,CAAC,CAAC,EAAsC,CAAC;QACpD,CAAC;QAGO,KAAK,CAAC,CAAC;YACd,IAAI,CAAC,IAAI,CAAC,CAAC,EAAkC;gBAC5C,IAAI,CAAC,CAAC,GAAmC,IAAI,CAAC,CAAC,EAAwC,CAAC;aACxF;YACD,OAAO,IAAI,CAAC,CAAC,CAAiC;QAC/C,CAAC;QAEO,KAAK,CAAC,CAAC;YACd,MAAM,gCAAgC,GAAG,IAAI,GAAG,EAAwC,CAAC;YACzF,IAAI,CAAC,CAAC,GAAgB,MAAM,IAAI,CAAC,CAAC,CAAoB,+BAA+B,EAAE,CAAC;YACxF,IAAI,CAAC,CAAC,CAAc,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,gCAAgC,CAAC,GAAG,CAAC,GAAG,CAAC,WAAW,CAAC,WAAW,EAAE,EAAE,GAAG,CAAC,CAAC,CAAC;YAC7G,OAAO,gCAAgC,CAAC;QACzC,CAAC;QAEO,CAAC,CAAyB,GAAiC;YAClE,OAAO;gBACN,WAAW,EAAE,GAAG,CAAC,WAAW,CAAC,WAAW,EAAE;gBAC1C,MAAM,EAAE;oBACP,QAAQ,kDAA0C;oBAClD,UAAU,EAAE,IAAA,cAAQ,EAAC,CAAwB,EAAE,IAA+D,EAAE,GAAG,CAAC,eAAe,CAAC;iBACpI;aACD,CAAC;QACH,CAAC;KAED,CAAA;IA1DY,oBAAI;mBAAJ,IAAI;QAWd,WAAA,yBAAG,CAAA;OAXO,IAAI,CA0DhB","file":"exeBasedRecommendations.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IExtensionTipsService, IExecutableBasedExtensionTip } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { ExtensionRecommendations, ExtensionRecommendation } from 'vs/workbench/contrib/extensions/browser/extensionRecommendations';\nimport { localize } from 'vs/nls';\nimport { ExtensionRecommendationReason } from 'vs/workbench/services/extensionRecommendations/common/extensionRecommendations';\n\nexport class ExeBasedRecommendations extends ExtensionRecommendations {\n\n\tprivate _otherTips: IExecutableBasedExtensionTip[] = [];\n\tprivate _importantTips: IExecutableBasedExtensionTip[] = [];\n\n\tget otherRecommendations(): ReadonlyArray<ExtensionRecommendation> { return this._otherTips.map(tip => this.toExtensionRecommendation(tip)); }\n\tget importantRecommendations(): ReadonlyArray<ExtensionRecommendation> { return this._importantTips.map(tip => this.toExtensionRecommendation(tip)); }\n\n\tget recommendations(): ReadonlyArray<ExtensionRecommendation> { return [...this.importantRecommendations, ...this.otherRecommendations]; }\n\n\tconstructor(\n\t\t@IExtensionTipsService private readonly extensionTipsService: IExtensionTipsService,\n\t) {\n\t\tsuper();\n\t}\n\n\tgetRecommendations(exe: string): { important: ExtensionRecommendation[]; others: ExtensionRecommendation[] } {\n\t\tconst important = this._importantTips\n\t\t\t.filter(tip => tip.exeName.toLowerCase() === exe.toLowerCase())\n\t\t\t.map(tip => this.toExtensionRecommendation(tip));\n\n\t\tconst others = this._otherTips\n\t\t\t.filter(tip => tip.exeName.toLowerCase() === exe.toLowerCase())\n\t\t\t.map(tip => this.toExtensionRecommendation(tip));\n\n\t\treturn { important, others };\n\t}\n\n\tprotected async doActivate(): Promise<void> {\n\t\tthis._otherTips = await this.extensionTipsService.getOtherExecutableBasedTips();\n\t\tawait this.fetchImportantExeBasedRecommendations();\n\t}\n\n\tprivate _importantExeBasedRecommendations: Promise<Map<string, IExecutableBasedExtensionTip>> | undefined;\n\tprivate async fetchImportantExeBasedRecommendations(): Promise<Map<string, IExecutableBasedExtensionTip>> {\n\t\tif (!this._importantExeBasedRecommendations) {\n\t\t\tthis._importantExeBasedRecommendations = this.doFetchImportantExeBasedRecommendations();\n\t\t}\n\t\treturn this._importantExeBasedRecommendations;\n\t}\n\n\tprivate async doFetchImportantExeBasedRecommendations(): Promise<Map<string, IExecutableBasedExtensionTip>> {\n\t\tconst importantExeBasedRecommendations = new Map<string, IExecutableBasedExtensionTip>();\n\t\tthis._importantTips = await this.extensionTipsService.getImportantExecutableBasedTips();\n\t\tthis._importantTips.forEach(tip => importantExeBasedRecommendations.set(tip.extensionId.toLowerCase(), tip));\n\t\treturn importantExeBasedRecommendations;\n\t}\n\n\tprivate toExtensionRecommendation(tip: IExecutableBasedExtensionTip): ExtensionRecommendation {\n\t\treturn {\n\t\t\textensionId: tip.extensionId.toLowerCase(),\n\t\t\treason: {\n\t\t\t\treasonId: ExtensionRecommendationReason.Executable,\n\t\t\t\treasonText: localize('exeBasedRecommendation', \"This extension is recommended because you have {0} installed.\", tip.exeFriendlyName)\n\t\t\t}\n\t\t};\n\t}\n\n}\n\n"]}