{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/extensions/browser/extensionRecommendations.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAUhG,MAAsB,IAAyB,SAAQ,eAAG;QAA1D;;YAKS,MAAC,GAA0C,IAAI,CAAC;QASzD,CAAC;QARA,IAAI,SAAS,KAAc,OAAO,IAAI,CAAC,CAAC,KAAsB,IAAI,CAAC,CAAC,CAAC;QACrE,QAAQ;YACP,IAAI,CAAC,IAAI,CAAC,CAAC,EAAmB;gBAC7B,IAAI,CAAC,CAAC,GAAoB,IAAI,CAAC,CAAC,EAAW,CAAC;aAC5C;YACD,OAAO,IAAI,CAAC,CAAC,CAAkB;QAChC,CAAC;KAED;IAdD,oBAcC","file":"extensionRecommendations.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IExtensionRecommendationReason } from 'vs/workbench/services/extensionRecommendations/common/extensionRecommendations';\n\nexport type ExtensionRecommendation = {\n\treadonly extensionId: string;\n\treadonly reason: IExtensionRecommendationReason;\n};\n\nexport abstract class ExtensionRecommendations extends Disposable {\n\n\treadonly abstract recommendations: ReadonlyArray<ExtensionRecommendation>;\n\tprotected abstract doActivate(): Promise<void>;\n\n\tprivate _activationPromise: Promise<void> | null = null;\n\tget activated(): boolean { return this._activationPromise !== null; }\n\tactivate(): Promise<void> {\n\t\tif (!this._activationPromise) {\n\t\t\tthis._activationPromise = this.doActivate();\n\t\t}\n\t\treturn this._activationPromise;\n\t}\n\n}\n"]}