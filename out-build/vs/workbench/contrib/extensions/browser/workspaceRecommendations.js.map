{"version":3,"sources":["vs/workbench/contrib/extensions/browser/workspaceRecommendations.ts"],"names":[],"mappings":"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","file":"workspaceRecommendations.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { EXTENSION_IDENTIFIER_PATTERN } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { distinct, flatten } from 'vs/base/common/arrays';\nimport { ExtensionRecommendations, ExtensionRecommendation } from 'vs/workbench/contrib/extensions/browser/extensionRecommendations';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { ExtensionRecommendationReason } from 'vs/workbench/services/extensionRecommendations/common/extensionRecommendations';\nimport { localize } from 'vs/nls';\nimport { Emitter } from 'vs/base/common/event';\nimport { IExtensionsConfigContent, IWorkspaceExtensionsConfigService } from 'vs/workbench/services/extensionRecommendations/common/workspaceExtensionsConfig';\n\nexport class WorkspaceRecommendations extends ExtensionRecommendations {\n\n\tprivate _recommendations: ExtensionRecommendation[] = [];\n\tget recommendations(): ReadonlyArray<ExtensionRecommendation> { return this._recommendations; }\n\n\tprivate _onDidChangeRecommendations = this._register(new Emitter<void>());\n\treadonly onDidChangeRecommendations = this._onDidChangeRecommendations.event;\n\n\tprivate _ignoredRecommendations: string[] = [];\n\tget ignoredRecommendations(): ReadonlyArray<string> { return this._ignoredRecommendations; }\n\n\tconstructor(\n\t\t@IWorkspaceExtensionsConfigService private readonly workspaceExtensionsConfigService: IWorkspaceExtensionsConfigService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected async doActivate(): Promise<void> {\n\t\tawait this.fetch();\n\t\tthis._register(this.workspaceExtensionsConfigService.onDidChangeExtensionsConfigs(() => this.onDidChangeExtensionsConfigs()));\n\t}\n\n\t/**\n\t * Parse all extensions.json files, fetch workspace recommendations, filter out invalid and unwanted ones\n\t */\n\tprivate async fetch(): Promise<void> {\n\n\t\tconst extensionsConfigs = await this.workspaceExtensionsConfigService.getExtensionsConfigs();\n\n\t\tconst { invalidRecommendations, message } = await this.validateExtensions(extensionsConfigs);\n\t\tif (invalidRecommendations.length) {\n\t\t\tthis.notificationService.warn(`The ${invalidRecommendations.length} extension(s) below, in workspace recommendations have issues:\\n${message}`);\n\t\t}\n\n\t\tthis._recommendations = [];\n\t\tthis._ignoredRecommendations = [];\n\n\t\tfor (const extensionsConfig of extensionsConfigs) {\n\t\t\tif (extensionsConfig.unwantedRecommendations) {\n\t\t\t\tfor (const unwantedRecommendation of extensionsConfig.unwantedRecommendations) {\n\t\t\t\t\tif (invalidRecommendations.indexOf(unwantedRecommendation) === -1) {\n\t\t\t\t\t\tthis._ignoredRecommendations.push(unwantedRecommendation);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (extensionsConfig.recommendations) {\n\t\t\t\tfor (const extensionId of extensionsConfig.recommendations) {\n\t\t\t\t\tif (invalidRecommendations.indexOf(extensionId) === -1) {\n\t\t\t\t\t\tthis._recommendations.push({\n\t\t\t\t\t\t\textensionId,\n\t\t\t\t\t\t\treason: {\n\t\t\t\t\t\t\t\treasonId: ExtensionRecommendationReason.Workspace,\n\t\t\t\t\t\t\t\treasonText: localize('workspaceRecommendation', \"This extension is recommended by users of the current workspace.\")\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async validateExtensions(contents: IExtensionsConfigContent[]): Promise<{ validRecommendations: string[]; invalidRecommendations: string[]; message: string }> {\n\n\t\tconst validExtensions: string[] = [];\n\t\tconst invalidExtensions: string[] = [];\n\t\tlet message = '';\n\n\t\tconst allRecommendations = distinct(flatten(contents.map(({ recommendations }) => recommendations || [])));\n\t\tconst regEx = new RegExp(EXTENSION_IDENTIFIER_PATTERN);\n\t\tfor (const extensionId of allRecommendations) {\n\t\t\tif (regEx.test(extensionId)) {\n\t\t\t\tvalidExtensions.push(extensionId);\n\t\t\t} else {\n\t\t\t\tinvalidExtensions.push(extensionId);\n\t\t\t\tmessage += `${extensionId} (bad format) Expected: <provider>.<name>\\n`;\n\t\t\t}\n\t\t}\n\n\t\treturn { validRecommendations: validExtensions, invalidRecommendations: invalidExtensions, message };\n\t}\n\n\tprivate async onDidChangeExtensionsConfigs(): Promise<void> {\n\t\tawait this.fetch();\n\t\tthis._onDidChangeRecommendations.fire();\n\t}\n\n}\n\n"]}