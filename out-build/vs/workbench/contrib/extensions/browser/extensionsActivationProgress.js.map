{"version":3,"sources":["vs/workbench/contrib/extensions/browser/extensionsActivationProgress.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAWzF,IAAM,IAAI,GAAV,MAAM,IAAI;QAIhB,YACoB,gBAAqB,EACtB,eAAoB,EACzB,UAAe;YAG5B,MAAM,OAAO,GAAG;gBACf,QAAQ,kCAAyB;gBACjC,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAY,EAAE,IAA0B,CAAC;aACzD,CAAC;YAEF,IAAI,QAA0C,CAAC;YAC/C,IAAI,KAAK,GAAG,CAAC,CAAC;YAEd,IAAI,CAAC,CAAC,GAAW,gBAAgB,CAAC,qBAAqB,CAAC,CAAC,CAAC,EAAE;gBAC3D,UAAU,CAAC,KAAK,CAAC,yBAAyB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;gBAErD,IAAI,CAAC,QAAQ,EAAE;oBACd,QAAQ,GAAG,IAAI,WAAG,EAAc,CAAC;oBACjC,eAAe,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,QAAS,CAAC,CAAC,CAAC,CAAC;iBACxD;gBAED,KAAK,EAAE,CAAC;gBAER,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,UAAU,EAAE,IAAA,WAAG,EAAK,IAAI,EAAE,gCAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE;oBAChF,IAAI,EAAE,KAAK,KAAK,CAAC,EAAE;wBAClB,QAAS,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;wBAC9B,QAAQ,GAAG,SAAS,CAAC;qBACrB;gBACF,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,OAAO;YACN,IAAI,CAAC,CAAC,CAAS,OAAO,EAAE,CAAC;QAC1B,CAAC;KACD,CAAA;IAxCY,oBAAI;mBAAJ,IAAI;QAKd,WAAA,gBAAG,CAAA;QACH,WAAA,cAAG,CAAA;QACH,WAAA,SAAG,CAAA;OAPO,IAAI,CAwChB","file":"extensionsActivationProgress.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IProgressService, ProgressLocation } from 'vs/platform/progress/common/progress';\nimport { localize } from 'vs/nls';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { DeferredPromise, timeout } from 'vs/base/common/async';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nexport class ExtensionActivationProgress implements IWorkbenchContribution {\n\n\tprivate readonly _listener: IDisposable;\n\n\tconstructor(\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IProgressService progressService: IProgressService,\n\t\t@ILogService logService: ILogService,\n\t) {\n\n\t\tconst options = {\n\t\t\tlocation: ProgressLocation.Window,\n\t\t\ttitle: localize('activation', \"Activating Extensions...\")\n\t\t};\n\n\t\tlet deferred: DeferredPromise<any> | undefined;\n\t\tlet count = 0;\n\n\t\tthis._listener = extensionService.onWillActivateByEvent(e => {\n\t\t\tlogService.trace('onWillActivateByEvent: ', e.event);\n\n\t\t\tif (!deferred) {\n\t\t\t\tdeferred = new DeferredPromise();\n\t\t\t\tprogressService.withProgress(options, _ => deferred!.p);\n\t\t\t}\n\n\t\t\tcount++;\n\n\t\t\tPromise.race([e.activation, timeout(5000, CancellationToken.None)]).finally(() => {\n\t\t\t\tif (--count === 0) {\n\t\t\t\t\tdeferred!.complete(undefined);\n\t\t\t\t\tdeferred = undefined;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tdispose(): void {\n\t\tthis._listener.dispose();\n\t}\n}\n"]}