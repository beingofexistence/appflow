{"version":3,"sources":["vs/workbench/contrib/extensions/browser/webRecommendations.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAQzF,IAAM,IAAI,GAAV,MAAM,IAAmB,SAAQ,+BAAI;QAG3C,IAAI,eAAe,KAA6C,OAAO,IAAI,CAAC,CAAC,CAAgB,CAAC,CAAC;QAE/F,YACkB,CAAoC,EAClB,CAAuD;YAE1F,KAAK,EAAE,CAAC;YAH0B,MAAC,GAAD,CAAC,CAAkB;YACD,MAAC,GAAD,CAAC,CAAqC;YALnF,MAAC,GAA6C,EAAE,CAAC;QAQzD,CAAC;QAES,KAAK,CAAC,CAAC;YAChB,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAgC,4BAA4B,IAAI,CAAC,IAAI,CAAC,CAAC,CAAgC,8BAA8B,IAAI,CAAC,IAAI,CAAC,CAAC,CAAgC,+BAA+B,CAAC;YACxO,IAAI,SAAS,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAc,gBAAgB,CAAC,EAAE;gBACrE,IAAI,CAAC,CAAC,GAAkB,IAAI,CAAC,CAAC,CAAc,gBAAgB,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,CAA0B;oBACzG,WAAW,EAAE,WAAW,CAAC,WAAW,EAAE;oBACtC,MAAM,EAAE;wBACP,QAAQ,mDAA2C;wBACnD,UAAU,EAAE,IAAA,cAAQ,EAAC,CAAQ,EAAE,IAAmD,EAAE,IAAI,CAAC,CAAC,CAAc,QAAQ,CAAC;qBACjH;iBACA,CAAA,CAAC,CAAC;aACJ;QACF,CAAC;KAED,CAAA;IAzBY,oBAAI;mBAAJ,IAAI;QAMd,WAAA,oBAAG,CAAA;QACH,WAAA,0BAAI,CAAA;OAPM,IAAI,CAyBhB","file":"webRecommendations.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ExtensionRecommendations, ExtensionRecommendation } from 'vs/workbench/contrib/extensions/browser/extensionRecommendations';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { ExtensionRecommendationReason } from 'vs/workbench/services/extensionRecommendations/common/extensionRecommendations';\nimport { localize } from 'vs/nls';\nimport { IExtensionManagementServerService } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\n\nexport class WebRecommendations extends ExtensionRecommendations {\n\n\tprivate _recommendations: ExtensionRecommendation[] = [];\n\tget recommendations(): ReadonlyArray<ExtensionRecommendation> { return this._recommendations; }\n\n\tconstructor(\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IExtensionManagementServerService private readonly extensionManagementServerService: IExtensionManagementServerService,\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected async doActivate(): Promise<void> {\n\t\tconst isOnlyWeb = this.extensionManagementServerService.webExtensionManagementServer && !this.extensionManagementServerService.localExtensionManagementServer && !this.extensionManagementServerService.remoteExtensionManagementServer;\n\t\tif (isOnlyWeb && Array.isArray(this.productService.webExtensionTips)) {\n\t\t\tthis._recommendations = this.productService.webExtensionTips.map(extensionId => (<ExtensionRecommendation>{\n\t\t\t\textensionId: extensionId.toLowerCase(),\n\t\t\t\treason: {\n\t\t\t\t\treasonId: ExtensionRecommendationReason.Application,\n\t\t\t\t\treasonText: localize('reason', \"This extension is recommended for {0} for the Web\", this.productService.nameLong)\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t}\n\n}\n\n"]}