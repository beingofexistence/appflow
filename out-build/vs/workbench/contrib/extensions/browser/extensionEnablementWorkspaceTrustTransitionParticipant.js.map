{"version":3,"sources":["vs/workbench/contrib/extensions/browser/extensionEnablementWorkspaceTrustTransitionParticipant.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAWzF,IAAM,IAAI,GAAV,MAAM,IAAuD,SAAQ,eAAG;QAC9E,YACoB,gBAAqB,EAC1B,WAAgB,EACA,kBAAuB,EACf,0BAAgC,EACpC,+BAAoC,EACpC,+BAAoC;YAEtE,KAAK,EAAE,CAAC;YAER,IAAI,+BAA+B,CAAC,uBAAuB,EAAE,EAAE;gBAC9D,yEAAyE;gBACzE,0EAA0E;gBAC1E,0EAA0E;gBAC1E,iEAAiE;gBACjE,+BAA+B,CAAC,yBAAyB,CAAC,IAAI,CAAC,GAAG,EAAE;oBACnE,MAAM,mCAAmC,GAAG,IAAI;wBAC/C,KAAK,CAAC,WAAW,CAAC,OAAgB;4BACjC,IAAI,OAAO,EAAE;gCACZ,uBAAuB;gCACvB,MAAM,0BAA0B,CAAC,oDAAoD,EAAE,CAAC;6BACxF;iCAAM;gCACN,uBAAuB;gCACvB,IAAI,kBAAkB,CAAC,eAAe,EAAE;oCACvC,WAAW,CAAC,MAAM,EAAE,CAAC;iCACrB;qCAAM;oCACN,MAAM,OAAO,GAAG,MAAM,gBAAgB,CAAC,kBAAkB,CAAC,IAAA,cAAQ,EAAC,CAA6B,EAAE,IAA0D,CAAC,CAAC,CAAC;oCAC/J,MAAM,0BAA0B,CAAC,oDAAoD,EAAE,CAAC;oCACxF,IAAI,OAAO,EAAE;wCACZ,gBAAgB,CAAC,mBAAmB,EAAE,CAAC;qCACvC;iCACD;6BACD;wBACF,CAAC;qBACD,CAAC;oBAEF,0DAA0D;oBAC1D,IAAI,CAAC,CAAC,CAAS,+BAA+B,CAAC,sCAAsC,CAAC,mCAAmC,CAAC,CAAC,CAAC;gBAC7H,CAAC,CAAC,CAAC;aACH;QACF,CAAC;KACD,CAAA;IA1CY,oBAAI;mBAAJ,IAAI;QAEd,WAAA,gBAAG,CAAA;QACH,WAAA,UAAG,CAAA;QACH,WAAA,wBAAG,CAAA;QACH,WAAA,0BAAI,CAAA;QACJ,WAAA,oBAAG,CAAA;QACH,WAAA,oBAAG,CAAA;OAPO,IAAI,CA0ChB","file":"extensionEnablementWorkspaceTrustTransitionParticipant.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IWorkspaceTrustEnablementService, IWorkspaceTrustManagementService, IWorkspaceTrustTransitionParticipant } from 'vs/platform/workspace/common/workspaceTrust';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IWorkbenchExtensionEnablementService } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\n\nexport class ExtensionEnablementWorkspaceTrustTransitionParticipant extends Disposable implements IWorkbenchContribution {\n\tconstructor(\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IHostService hostService: IHostService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IWorkbenchExtensionEnablementService extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@IWorkspaceTrustEnablementService workspaceTrustEnablementService: IWorkspaceTrustEnablementService,\n\t\t@IWorkspaceTrustManagementService workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t) {\n\t\tsuper();\n\n\t\tif (workspaceTrustEnablementService.isWorkspaceTrustEnabled()) {\n\t\t\t// The extension enablement participant will be registered only after the\n\t\t\t// workspace trust state has been initialized. There is no need to execute\n\t\t\t// the participant as part of the initialization process, as the workspace\n\t\t\t// trust state is initialized before starting the extension host.\n\t\t\tworkspaceTrustManagementService.workspaceTrustInitialized.then(() => {\n\t\t\t\tconst workspaceTrustTransitionParticipant = new class implements IWorkspaceTrustTransitionParticipant {\n\t\t\t\t\tasync participate(trusted: boolean): Promise<void> {\n\t\t\t\t\t\tif (trusted) {\n\t\t\t\t\t\t\t// Untrusted -> Trusted\n\t\t\t\t\t\t\tawait extensionEnablementService.updateExtensionsEnablementsWhenWorkspaceTrustChanges();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Trusted -> Untrusted\n\t\t\t\t\t\t\tif (environmentService.remoteAuthority) {\n\t\t\t\t\t\t\t\thostService.reload();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tconst stopped = await extensionService.stopExtensionHosts(localize('restartExtensionHost.reason', \"Restarting extension host due to workspace trust change.\"));\n\t\t\t\t\t\t\t\tawait extensionEnablementService.updateExtensionsEnablementsWhenWorkspaceTrustChanges();\n\t\t\t\t\t\t\t\tif (stopped) {\n\t\t\t\t\t\t\t\t\textensionService.startExtensionHosts();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Execute BEFORE the workspace trust transition completes\n\t\t\t\tthis._register(workspaceTrustManagementService.addWorkspaceTrustTransitionParticipant(workspaceTrustTransitionParticipant));\n\t\t\t});\n\t\t}\n\t}\n}\n"]}