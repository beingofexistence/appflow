{"version":3,"sources":["vs/workbench/contrib/extensions/browser/extensionRecommendationNotificationService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAsChG,MAAM,gDAAgD,GAAG,oDAAoD,CAAC;IAC9G,MAAM,2CAA2C,GAAG,oDAAoD,CAAC;IACzG,MAAM,WAAW,GAAG,IAAA,cAAQ,EAAC,CAAgB,EAAE,IAAkB,CAAC,CAAC;IASnE,MAAM,2BAA4B,SAAQ,eAAG;QAW5C,YACkB,CAAkB,EAClB,CAAe,EACf,CAAwB,EACxB,CAAwB;YAEzC,KAAK,EAAE,CAAC;YALS,MAAC,GAAD,CAAC,CAAiB;YAClB,MAAC,GAAD,CAAC,CAAc;YACf,MAAC,GAAD,CAAC,CAAuB;YACxB,MAAC,GAAD,CAAC,CAAuB;YAblC,MAAC,GAAa,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAY,CAAC,CAAC;YACjD,eAAU,GAAG,IAAI,CAAC,CAAC,CAAW,KAAK,CAAC;YAErC,MAAC,GAAwB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAe,CAAC,CAAC;YAC/D,0BAAqB,GAAG,IAAI,CAAC,CAAC,CAAsB,KAAK,CAAC;YAG3D,MAAC,GAAoB,KAAK,CAAC;YA8B3B,MAAC,GAAsB,IAAI,CAAC,CAAC,CAAS,IAAI,eAAG,EAAgB,CAAC,CAAC;YAC/D,MAAC,GAAiC,IAAI,CAAC,CAAC,CAAS,IAAI,eAAG,EAAgB,CAAC,CAAC;QAtBlF,CAAC;QAED,IAAI;YACH,IAAI,CAAC,IAAI,CAAC,CAAC,EAAmB;gBAC7B,IAAI,CAAC,CAAC,CAAwB,IAAI,CAAC,CAAC,CAAmB,MAAM,CAAC,IAAI,CAAC,CAAC,EAAS,IAAI,CAAC,CAAC,EAAQ,IAAI,CAAC,CAAC,EAAQ,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,GAAW,IAAI,EAAE,CAAC,CAAC,CAAC;aACnK;QACF,CAAC;QAED,IAAI;YACH,IAAI,IAAI,CAAC,CAAC,EAAmB;gBAC5B,IAAI,CAAC,CAAC,CAAoB,KAAK,EAAE,CAAC;gBAClC,IAAI,CAAC,CAAC,CAAkB,KAAK,EAAE,CAAC;gBAChC,IAAI,CAAC,CAAC,GAAW,KAAK,CAAC;gBACvB,IAAI,CAAC,CAAC,CAAwB,IAAI,CAAC,CAAC,CAAmB,MAAM,CAAC,IAAI,CAAC,CAAC,EAAS,IAAI,CAAC,CAAC,EAAQ,IAAI,CAAC,CAAC,EAAQ,EAAE,QAAQ,EAAE,mCAAoB,CAAC,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,GAAW,IAAI,EAAE,CAAC,CAAC,CAAC;aAC5L;QACF,CAAC;QAED,WAAW;YACV,OAAO,IAAI,CAAC,CAAC,CAAS;QACvB,CAAC;QAIO,CAAC,CAAwB,kBAAuC;YACvE,IAAI,CAAC,CAAC,CAAoB,KAAK,EAAE,CAAC;YAClC,IAAI,CAAC,CAAC,CAA+B,KAAK,EAAE,CAAC;YAC7C,IAAI,CAAC,CAAC,GAAoB,kBAAkB,CAAC;YAE7C,IAAI,CAAC,CAAC,CAAoB,KAAK,GAAG,IAAI,CAAC,CAAC,CAAkB,UAAU,CAAC,GAAG,EAAE;gBACzE,IAAI,CAAC,CAAC,CAAoB,OAAO,EAAE,CAAC;gBACpC,IAAI,CAAC,CAAC,CAA+B,OAAO,EAAE,CAAC;gBAE/C,IAAI,CAAC,CAAC,CAAW,IAAI,EAAE,CAAC;gBAExB,IAAI,CAAC,CAAC,CAAW,OAAO,EAAE,CAAC;gBAC3B,IAAI,CAAC,CAAC,CAAsB,OAAO,EAAE,CAAC;YACvC,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,CAAC,CAA+B,KAAK,GAAG,IAAI,CAAC,CAAC,CAAkB,qBAAqB,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAsB,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QACxI,CAAC;KACD;IAKM,IAAM,IAAI,GAAV,MAAM,IAA2C,SAAQ,eAAG;QAIlE,oCAAoC;QACpC,IAAI,sBAAsB;YACzB,OAAO,IAAA,YAAG,EAAM,CAAC,GAAc,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAc,GAAG,CAAC,gDAAgD,gCAAwB,IAAI,CAAC,CAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;QAC/K,CAAC;QASD,YACwB,CAA0C,EAChD,CAAoC,EAC/B,CAAyC,EAC5C,CAAsC,EAClC,CAA0C,EACpC,CAAiD,EACxC,CAAiD,EACjD,CAAiD,EAC9C,CAA6D,EACtE,CAAoD,EACtD,CAAiD;YAE/E,KAAK,EAAE,CAAC;YAZgC,MAAC,GAAD,CAAC,CAAwB;YAC/B,MAAC,GAAD,CAAC,CAAkB;YACd,MAAC,GAAD,CAAC,CAAuB;YAC3B,MAAC,GAAD,CAAC,CAAoB;YACjB,MAAC,GAAD,CAAC,CAAwB;YACnB,MAAC,GAAD,CAAC,CAA+B;YACvB,MAAC,GAAD,CAAC,CAA+B;YAChC,MAAC,GAAD,CAAC,CAA+B;YAC7B,MAAC,GAAD,CAAC,CAA2C;YACrD,MAAC,GAAD,CAAC,CAAkC;YACrC,MAAC,GAAD,CAAC,CAA+B;YAlBxE,MAAC,GAAiC,EAAE,CAAC;YACrC,MAAC,GAA+C,EAAE,CAAC;YAInD,MAAC,GAA4D,EAAE,CAAC;QAgBxE,CAAC;QAED,sCAAsC;YACrC,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAoB,QAAQ,CAAgF,YAAY,CAAC,CAAC;YAC/I,OAAO,MAAM,CAAC,qBAAqB,IAAI,CAAC,CAAC,MAAM,CAAC,+BAA+B,CAAC;QACjF,CAAC;QAED,KAAK,CAAC,4CAA4C,CAAC,wBAAmD;YACrG,MAAM,sBAAsB,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAsC,sBAAsB,EAAE,GAAG,IAAI,CAAC,sBAAsB,CAAC,CAAC;YACvI,MAAM,UAAU,GAAG,wBAAwB,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,sBAAsB,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;YAC1G,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;gBACvB,iEAAiD;aACjD;YAED,OAAO,IAAI,CAAC,CAAC,CAAiC,EAAE,GAAG,wBAAwB,EAAE,UAAU,EAAE,EAAE;gBAC1F,iCAAiC,EAAE,CAAC,UAAwB,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAgB,UAAU,CAAoH,gCAAgC,EAAE,EAAE,YAAY,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,CAAC,UAAU,CAAC,EAAE,EAAE,MAAM,EAAE,IAAA,+BAAI,EAAyB,wBAAwB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBACja,8BAA8B,EAAE,CAAC,UAAwB,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAgB,UAAU,CAAoH,gCAAgC,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE,WAAW,EAAE,SAAS,CAAC,UAAU,CAAC,EAAE,EAAE,MAAM,EAAE,IAAA,+BAAI,EAAyB,wBAAwB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBAC3Z,gCAAgC,EAAE,CAAC,UAAwB,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAgB,UAAU,CAAoH,gCAAgC,EAAE,EAAE,YAAY,EAAE,WAAW,EAAE,WAAW,EAAE,SAAS,CAAC,UAAU,CAAC,EAAE,EAAE,MAAM,EAAE,IAAA,+BAAI,EAAyB,wBAAwB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBACla,wCAAwC,EAAE,CAAC,UAAwB,EAAE,EAAE;oBACtE,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;wBACnC,IAAI,CAAC,CAAC,CAAmC,SAAS,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;wBAClE,IAAI,CAAC,CAAC,CAAgB,UAAU,CAAoH,gCAAgC,EAAE,EAAE,YAAY,EAAE,gBAAgB,EAAE,WAAW,EAAE,SAAS,CAAC,UAAU,CAAC,EAAE,EAAE,MAAM,EAAE,IAAA,+BAAI,EAAyB,wBAAwB,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;qBACvU;oBACD,IAAI,CAAC,CAAC,CAAmB,MAAM,CAC9B,uBAAQ,CAAC,IAAI,EACb,IAAA,cAAQ,EAAC,CAAgC,EAAE,IAAsD,CAAC,EAClG,CAAC;4BACA,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAW,EAAE,IAAiB,CAAC;4BAC/C,GAAG,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAA8B,IAAI,CAAC;yBACpD,EAAE;4BACF,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAI,EAAE,IAAI,CAAC;4BAC3B,GAAG,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAA8B,KAAK,CAAC;yBACrD,CAAC,CACF,CAAC;gBACH,CAAC;aACD,CAAC,CAAC;QACJ,CAAC;QAED,KAAK,CAAC,8BAA8B,CAAC,eAAyB;YAC7D,IAAI,IAAI,CAAC,CAAC,CAAc,UAAU,CAAC,2CAA2C,kCAA0B,KAAK,CAAC,EAAE;gBAC/G,OAAO;aACP;YAED,IAAI,SAAS,GAAG,MAAM,IAAI,CAAC,CAAC,CAA0B,YAAY,EAAE,CAAC;YACrE,SAAS,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAA0B,kBAAkB,CAAC,CAAC,CAAC,oDAA4C,CAAC,CAAC,CAAC,qCAAqC;YAC3K,eAAe,GAAG,eAAe,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,IAAA,6BAAG,EAAe,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAC7I,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE;gBAC5B,OAAO;aACP;YAED,MAAM,IAAI,CAAC,CAAC,CAAiC,EAAE,UAAU,EAAE,eAAe,EAAE,MAAM,wCAAgC,EAAE,IAAI,EAAE,IAAA,cAAQ,EAAC,CAAoG,CAAlG,CAAoG,EAAjG,EAAE,AAAgH,CAAC,EAAE,EAAE,YAApG,EAAE,OAAO,EAAE,CAAC,6DAA6D,CAAC;gBACpO,iCAAiC,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAgB,UAAU,CAAwF,yCAAyC,EAAE,EAAE,YAAY,EAAE,SAAS,EAAE,CAAC;gBACxO,8BAA8B,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAgB,UAAU,CAAwF,yCAAyC,EAAE,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC;gBAClO,gCAAgC,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAgB,UAAU,CAAwF,yCAAyC,EAAE,EAAE,YAAY,EAAE,WAAW,EAAE,CAAC;gBACzO,wCAAwC,EAAE,GAAG,EAAE;oBAC9C,IAAI,CAAC,CAAC,CAAgB,UAAU,CAAwF,yCAAyC,EAAE,EAAE,YAAY,EAAE,gBAAgB,EAAE,CAAC,CAAC;oBACvM,IAAI,CAAC,CAAC,CAAc,KAAK,CAAC,2CAA2C,EAAE,IAAI,gEAAgD,CAAC;gBAC7H,CAAC;aACD,CAAC,CAAC;QAEJ,CAAC;QAEO,KAAK,CAAC,CAAC,CAAiC,EAAE,UAAU,EAAE,YAAY,EAAE,MAAM,EAAE,IAAI,EAAE,WAAW,EAA6B,EAAE,kCAAsE;YAEzM,IAAI,IAAI,CAAC,sCAAsC,EAAE,EAAE;gBAClD,iEAAiD;aACjD;YAED,yDAAyD;YACzD,IAAI,MAAM,qCAA6B,IAAI,IAAI,CAAC,CAAC,CAA2B,eAAe,EAAE;gBAC5F,uFAA4D;aAC5D;YAED,0CAA0C;YAC1C,qDAAqD;YACrD,oDAAoD;YACpD,IAAI,MAAM,qCAA6B,IAAI,CAAC,IAAI,CAAC,CAAC,CAAqB,QAAQ,kCAA0B,IAAI,IAAI,CAAC,CAAC,CAAqB,MAAM,IAAI,CAAC,CAAC,EAAE;gBACrJ,iEAAiD;aACjD;YAED,IAAI,CAAC,CAAC,CAAqB,IAAI,CAAC,MAAM,CAAC,CAAC;YAExC,iEAAiE;YACjE,IAAI,MAAM,qCAA6B,IAAI,YAAY,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAqB,QAAQ,CAAC,EAAE,CAAC,CAAC,EAAE;gBAC7G,iEAAiD;aACjD;YAED,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,CAAC,CAAwB,YAAY,CAAC,CAAC;YACrE,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE;gBACvB,iEAAiD;aACjD;YAED,IAAI,CAAC,CAAC,GAAuB,IAAA,YAAG,EAAM,CAAC,GAAG,IAAI,CAAC,CAAC,EAAsB,GAAG,YAAY,CAAC,CAAC,CAAC;YAExF,IAAI,iBAAiB,GAAG,EAAE,CAAC;YAC3B,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC5B,iBAAiB,GAAG,IAAA,cAAQ,EAAC,CAAwB,EAAE,IAA0B,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC;aAClJ;iBAAM;gBACN,MAAM,UAAU,GAAG,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,SAAS,EAAE,EAAE,CAAC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,oBAAoB,CAAC,EAAE,IAAI,GAAG,EAAU,CAAC,CAAC,CAAC;gBAChI,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC1B,iBAAiB,GAAG,IAAA,cAAQ,EAAC,CAAkC,EAAE,IAAqC,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;iBACtI;qBAAM,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;oBACnC,iBAAiB,GAAG,IAAA,cAAQ,EAAC,CAA0B,EAAE,IAA6B,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;iBACtH;qBAAM;oBACN,iBAAiB,GAAG,IAAA,cAAQ,EAAC,CAAyB,EAAE,IAAqB,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC9F;aACD;YAED,IAAI,OAAO,GAAG,IAAA,cAAQ,EAAC,CAAa,EAAE,IAAqD,EAAE,iBAAiB,EAAE,IAAI,CAAC,CAAC;YACtH,IAAI,MAAM,qCAA6B,EAAE;gBACxC,OAAO,GAAG,IAAA,cAAQ,EAAC,EAAE,AAAuG,EAAE,CAAtG,EAAE,CAA+L,EAAE,IAAI,EAAE,OAAvL,EAAE,OAAO,CAA+L,CAA7L,AAA8L,CAA7L,AAA8L,mEAA3H,CAAC;aAC1H;YACD,IAAI,CAAC,WAAW,EAAE;gBACjB,WAAW,GAAG,MAAM,2CAAmC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,OAAO,WAAW,CAAC,UAAU,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACvJ;YAED,OAAO,IAAA,WAAG,EAAqB;gBAC9B,IAAI,CAAC,CAAC,CAAU,IAAI,CAAC,CAAC,CAA+B,UAAU,EAAE,OAAO,EAAE,WAAW,EAAE,MAAM,EAAE,kCAAkC,CAAC,CAAC;gBACnI,IAAI,CAAC,CAAC,CAAU,IAAI,CAAC,CAAC,CAAoC,UAAU,CAAC,CAAC;aACtE,CAAC,CAAC;QAEJ,CAAC;QAEO,CAAC,CAA+B,UAAwB,EAAE,OAAe,EAAE,WAAmB,EAAE,MAA4B,EACnI,EAAE,iCAAiC,EAAE,8BAA8B,EAAE,gCAAgC,EAAE,wCAAwC,EAAsC;YACrL,OAAO,IAAA,WAAG,EAAwD,KAAK,EAAC,KAAK,EAAC,EAAE;gBAC/E,IAAI,QAAQ,GAAG,KAAK,CAAC;gBACrB,MAAM,OAAO,GAA8C,EAAE,CAAC;gBAC9D,MAAM,iBAAiB,GAAG,KAAK,EAAE,eAAwB,EAAE,EAAE;oBAC5D,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAoB,cAAc,CAAC,wBAAI,EAAoB,WAAW,CAAC,CAAC,CAAC;oBAC9F,iCAAiC,CAAC,UAAU,CAAC,CAAC;oBAC9C,MAAM,gBAAQ,CAAC,OAAO,CAAM;wBAC3B,gBAAQ,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAA0B,IAAI,CAAC,SAAS,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;wBAChH,IAAI,CAAC,CAAC,CAA0B,wBAAwB,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,SAAS,EAAE,CAAC,CAAC,OAAQ,EAAE,OAAO,EAAE,EAAE,eAAe,EAAE,EAAE,CAAC,CAAC,CAAC;qBACxI,CAAC,CAAC;gBACJ,CAAC,CAAC;gBACF,OAAO,CAAC,IAAI,CAAC;oBACZ,KAAK,EAAE,IAAA,cAAQ,EAAC,EAAS,EAAE,IAAS,CAAC;oBACrC,GAAG,EAAE,GAAG,EAAE,CAAC,iBAAiB,CAAC,KAAK,CAAC;oBACnC,IAAI,EAAE,IAAI,CAAC,CAAC,CAA6B,SAAS,EAAE,IAAI,IAAI,CAAC,CAAC,CAA6B,iBAAiB,4CAAyB,CAAC,CAAC,CAAC,CAAC;4BACxI,KAAK,EAAE,IAAA,cAAQ,EAAC,EAAwB,EAAE,IAAuB,CAAC;4BAClE,GAAG,EAAE,GAAG,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC;yBAClC,CAAC,CAAC,CAAC,CAAC,SAAS;iBACd,CAAC,CAAC;gBACH,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC;wBAChB,KAAK,EAAE,IAAA,cAAQ,EAAC,EAAsB,EAAE,IAAsB,CAAC;wBAC/D,GAAG,EAAE,KAAK,IAAI,EAAE;4BACf,8BAA8B,CAAC,UAAU,CAAC,CAAC;4BAC3C,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;gCACnC,IAAI,CAAC,CAAC,CAA0B,IAAI,CAAC,SAAS,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC;6BAClE;4BACD,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAoB,cAAc,CAAC,wBAAI,EAAoB,WAAW,CAAC,CAAC,CAAC;wBAC/F,CAAC;qBACD,EAAE;wBACF,KAAK,EAAE,WAAW;wBAClB,WAAW,EAAE,IAAI;wBACjB,GAAG,EAAE,GAAG,EAAE;4BACT,wCAAwC,CAAC,UAAU,CAAC,CAAC;wBACtD,CAAC;qBACD,CAAC,CAAC,CAAC;gBACJ,IAAI;oBACH,QAAQ,GAAG,MAAM,IAAI,CAAC,CAAC,CAAiC,uBAAQ,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;iBACxG;gBAAC,OAAO,KAAK,EAAE;oBACf,IAAI,CAAC,IAAA,WAAE,EAAkB,KAAK,CAAC,EAAE;wBAChC,MAAM,KAAK,CAAC;qBACZ;iBACD;gBAED,IAAI,QAAQ,EAAE;oBACb,kEAAkD;iBAClD;qBAAM;oBACN,gCAAgC,CAAC,UAAU,CAAC,CAAC;oBAC7C,qEAAmD;iBACnD;YAEF,CAAC,CAAC,CAAC;QACJ,CAAC;QAEO,CAAC,CAAoC,UAAwB;YACpE,MAAM,mBAAmB,GAAa,EAAE,CAAC;YACzC,MAAM,WAAW,GAAG,IAAI,eAAG,EAAc,CAAC;YAC1C,OAAO,IAAA,WAAG,EAAqB,KAAK,EAAC,KAAK,EAAC,EAAE;gBAC5C,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC,CAAC,EAAE,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;gBAC3E,OAAO,IAAI,OAAO,CAA6C,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;oBACvE,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAA0B,kBAAkB,CAAC,CAAC,CAAC,EAAE;wBACtE,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC;wBACxD,IAAI,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC,EAAE;4BACvF,CAAC,4DAA4C,CAAC;yBAC9C;oBACF,CAAC,CAAC,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QACJ,CAAC;QAED;;;;;;;;WAQG;QACK,KAAK,CAAC,CAAC,CAAiC,QAAkB,EAAE,OAAe,EAAE,OAAwB,EAAE,MAA4B,EAAE,KAAwB;YACpK,MAAM,WAAW,GAAG,IAAI,eAAG,EAAc,CAAC;YAC1C,IAAI;gBACH,MAAM,2BAA2B,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,2BAA2B,CAAC,QAAQ,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC,CAAmB,CAAC,CAAC;gBAC3I,WAAW,CAAC,GAAG,CAAC,aAAK,CAAC,IAAI,CAAC,aAAK,CAAC,MAAM,CAAC,2BAA2B,CAAC,qBAAqB,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,EAAqB,CAAC,CAAC,CAAC;gBACzI,IAAI,IAAI,CAAC,CAAC,EAAoB;oBAC7B,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAoB,MAAM,CAAC;oBAC/C,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,uBAAuB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAoB,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;oBACjG,IAAI,CAAC,CAAC,CAAoB,IAAI,CAAC,EAAE,2BAA2B,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;oBAC/E,IAAI,MAAM,qCAA6B,IAAI,MAAM,IAAI,IAAI,CAAC,CAAoB,CAAC,MAAM,EAAE;wBACtF,IAAI,CAAC,CAAC,CAAuB,IAAI,CAAC,CAAC;qBACnC;iBACD;qBAAM;oBACN,IAAI,CAAC,CAAC,GAAqB,EAAE,2BAA2B,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;oBACrF,2BAA2B,CAAC,IAAI,EAAE,CAAC;iBACnC;gBACD,MAAM,IAAA,WAAG,EAAc,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,aAAK,CAAC,IAAI,CAAC,2BAA2B,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;gBACxH,OAAO,CAAC,2BAA2B,CAAC,WAAW,EAAE,CAAC;aAClD;oBAAS;gBACT,WAAW,CAAC,OAAO,EAAE,CAAC;aACtB;QACF,CAAC;QAEO,CAAC;YACR,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,EAAgC,CAAC;YACrD,MAAM,CAAC,gBAAgB,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAoB,MAAM,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;YAExF,kGAAkG;YAClG,IAAA,WAAG,EAAK,gBAAgB,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;iBACjC,IAAI,CAAC,GAAG,EAAE;gBACV,IAAI,CAAC,CAAC,EAA0B,CAAC;gBACjC,IAAI,gBAAgB,EAAE;oBACrB,IAAI,CAAC,CAAC,GAAqB,EAAE,2BAA2B,EAAE,gBAAgB,CAAC,2BAA2B,EAAE,MAAM,EAAE,gBAAgB,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;oBAC5J,gBAAgB,CAAC,2BAA2B,CAAC,IAAI,EAAE,CAAC;iBACpD;YACF,CAAC,CAAC,CAAC;QACL,CAAC;QAED;;WAEG;QACK,CAAC;YACR,IAAI,KAAK,GAAG,IAAI,CAAC,CAAC,CAAoB,MAAM,GAAG,CAAC,CAAC;YACjD,IAAI,IAAI,CAAC,CAAC,CAAoB,MAAM,EAAE;gBACrC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAoB,MAAM,EAAE,CAAC,EAAE,EAAE;oBAC1D,IAAI,IAAI,CAAC,CAAC,CAAoB,CAAC,CAAC,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAAoB,KAAK,CAAC,CAAC,MAAM,EAAE;wBACnF,KAAK,GAAG,CAAC,CAAC;qBACV;iBACD;aACD;YACD,OAAO,KAAK,CAAC;QACd,CAAC;QAEO,CAAC,CAAuB,YAAoB;YACnD,IAAI,IAAI,CAAC,CAAC,IAAsB,CAAC,IAAI,CAAC,CAAC,EAA+B;gBACrE,MAAM,mBAAmB,GAAG,IAAI,CAAC,CAAC,CAAmB;gBACrD,IAAI,CAAC,CAAC,GAAgC,IAAA,WAAG,EAAK,IAAI,CAAC,GAAG,CAAC,YAAY,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,mBAAmB,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;gBACnH,IAAI,CAAC,CAAC,CAA8B,IAAI,CAAC,GAAG,EAAE,CAAC,mBAAoB,CAAC,2BAA2B,CAAC,IAAI,EAAE,CAAC,CAAC;aACxG;QACF,CAAC;QAEO,CAAC;YACR,IAAI,CAAC,CAAC,EAA+B,MAAM,EAAE,CAAC;YAC9C,IAAI,CAAC,CAAC,GAAgC,SAAS,CAAC;YAChD,IAAI,CAAC,CAAC,GAAqB,SAAS,CAAC;QACtC,CAAC;QAEO,KAAK,CAAC,CAAC,CAAwB,YAAsB;YAC5D,MAAM,MAAM,GAAiB,EAAE,CAAC;YAChC,IAAI,YAAY,CAAC,MAAM,EAAE;gBACxB,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,CAAC,CAA0B,aAAa,CAAC,YAAY,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,MAAM,EAAE,yBAAyB,EAAE,EAAE,gCAAiB,CAAC,IAAI,CAAC,CAAC;gBACxK,KAAK,MAAM,SAAS,IAAI,UAAU,EAAE;oBACnC,IAAI,SAAS,CAAC,OAAO,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC,CAA0B,UAAU,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,EAAE;wBAC/F,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;qBACvB;iBACD;aACD;YACD,OAAO,MAAM,CAAC;QACf,CAAC;QAEO,KAAK,CAAC,CAAC,CAAS,MAAe;YACtC,IAAI;gBACH,MAAM,MAAM,CAAC,GAAG,EAAE,CAAC;aACnB;oBAAS;gBACT,IAAI,IAAA,eAAG,EAAU,MAAM,CAAC,EAAE;oBACzB,MAAM,CAAC,OAAO,EAAE,CAAC;iBACjB;aACD;QACF,CAAC;QAEO,CAAC,CAAmC,EAAU;YACrD,MAAM,kCAAkC,GAAG,CAAC,GAAG,IAAI,CAAC,sBAAsB,CAAC,CAAC;YAC5E,IAAI,CAAC,kCAAkC,CAAC,QAAQ,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,EAAE;gBACnE,kCAAkC,CAAC,IAAI,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC;gBAC1D,IAAI,CAAC,CAAC,CAAc,KAAK,CAAC,gDAAgD,EAAE,IAAI,CAAC,SAAS,CAAC,kCAAkC,CAAC,2DAA2C,CAAC;aAC1K;QACF,CAAC;QAEO,CAAC,CAA8B,SAAkB;YACxD,IAAI,CAAC,CAAC,CAAoB,WAAW,CAAC,kCAAkC,EAAE,SAAS,CAAC,CAAC;QACtF,CAAC;QAEO,CAAC,CAAa,CAAuB;YAC5C,IAAI,CAAC,CAAC,CAAS,IAAA,eAAG,EAAU,GAAG,EAAE,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC/C,OAAO,CAAC,CAAC;QACV,CAAC;KACD,CAAA;IAnVY,oBAAI;mBAAJ,IAAI;QAiBd,WAAA,mBAAG,CAAA;QACH,WAAA,aAAG,CAAA;QACH,WAAA,kBAAG,CAAA;QACH,WAAA,eAAG,CAAA;QACH,WAAA,mBAAG,CAAA;QACH,WAAA,iBAAI,CAAA;QACJ,WAAA,0BAAI,CAAA;QACJ,WAAA,0BAAI,CAAA;QACJ,WAAA,+BAAI,CAAA;QACJ,WAAA,mBAAI,CAAA;QACJ,YAAA,wBAAG,CAAA;OA3BO,IAAI,CAmVhB","file":"extensionRecommendationNotificationService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IAction } from 'vs/base/common/actions';\nimport { distinct } from 'vs/base/common/arrays';\nimport { CancelablePromise, createCancelablePromise, Promises, raceCancellablePromises, raceCancellation, timeout } from 'vs/base/common/async';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { isCancellationError } from 'vs/base/common/errors';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, DisposableStore, isDisposable, MutableDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { localize } from 'vs/nls';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { areSameExtensions } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { IExtensionRecommendationNotificationService, IExtensionRecommendations, RecommendationsNotificationResult, RecommendationSource, RecommendationSourceToString } from 'vs/platform/extensionRecommendations/common/extensionRecommendations';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { INotificationHandle, INotificationService, IPromptChoice, IPromptChoiceWithMenu, NotificationPriority, Severity } from 'vs/platform/notification/common/notification';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IUserDataSyncEnablementService, SyncResource } from 'vs/platform/userDataSync/common/userDataSync';\nimport { SearchExtensionsAction } from 'vs/workbench/contrib/extensions/browser/extensionsActions';\nimport { IExtension, IExtensionsWorkbenchService } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { EnablementState, IWorkbenchExtensionManagementService, IWorkbenchExtensionEnablementService } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { IExtensionIgnoredRecommendationsService } from 'vs/workbench/services/extensionRecommendations/common/extensionRecommendations';\n\ntype ExtensionRecommendationsNotificationClassification = {\n\towner: 'sandy081';\n\tcomment: 'Response information when an extension is recommended';\n\tuserReaction: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'User reaction after showing the recommendation prompt. Eg., install, cancel, show, neverShowAgain' };\n\textensionId?: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'Id of the extension that is recommended' };\n\tsource: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The source from which this recommendation is coming from. Eg., file, exe.,' };\n};\n\ntype ExtensionWorkspaceRecommendationsNotificationClassification = {\n\towner: 'sandy081';\n\tcomment: 'Response information when a recommendation from workspace is recommended';\n\tuserReaction: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'User reaction after showing the recommendation prompt. Eg., install, cancel, show, neverShowAgain' };\n};\n\nconst ignoreImportantExtensionRecommendationStorageKey = 'extensionsAssistant/importantRecommendationsIgnore';\nconst donotShowWorkspaceRecommendationsStorageKey = 'extensionsAssistant/workspaceRecommendationsIgnore';\nconst choiceNever = localize('neverShowAgain', \"Don't Show Again\");\n\ntype RecommendationsNotificationActions = {\n\tonDidInstallRecommendedExtensions(extensions: IExtension[]): void;\n\tonDidShowRecommendedExtensions(extensions: IExtension[]): void;\n\tonDidCancelRecommendedExtensions(extensions: IExtension[]): void;\n\tonDidNeverShowRecommendedExtensionsAgain(extensions: IExtension[]): void;\n};\n\nclass RecommendationsNotification extends Disposable {\n\n\tprivate _onDidClose = this._register(new Emitter<void>());\n\treadonly onDidClose = this._onDidClose.event;\n\n\tprivate _onDidChangeVisibility = this._register(new Emitter<boolean>());\n\treadonly onDidChangeVisibility = this._onDidChangeVisibility.event;\n\n\tprivate notificationHandle: INotificationHandle | undefined;\n\tprivate cancelled: boolean = false;\n\n\tconstructor(\n\t\tprivate readonly severity: Severity,\n\t\tprivate readonly message: string,\n\t\tprivate readonly choices: IPromptChoice[],\n\t\tprivate readonly notificationService: INotificationService\n\t) {\n\t\tsuper();\n\t}\n\n\tshow(): void {\n\t\tif (!this.notificationHandle) {\n\t\t\tthis.updateNotificationHandle(this.notificationService.prompt(this.severity, this.message, this.choices, { sticky: true, onCancel: () => this.cancelled = true }));\n\t\t}\n\t}\n\n\thide(): void {\n\t\tif (this.notificationHandle) {\n\t\t\tthis.onDidCloseDisposable.clear();\n\t\t\tthis.notificationHandle.close();\n\t\t\tthis.cancelled = false;\n\t\t\tthis.updateNotificationHandle(this.notificationService.prompt(this.severity, this.message, this.choices, { priority: NotificationPriority.SILENT, onCancel: () => this.cancelled = true }));\n\t\t}\n\t}\n\n\tisCancelled(): boolean {\n\t\treturn this.cancelled;\n\t}\n\n\tprivate onDidCloseDisposable = this._register(new MutableDisposable());\n\tprivate onDidChangeVisibilityDisposable = this._register(new MutableDisposable());\n\tprivate updateNotificationHandle(notificationHandle: INotificationHandle) {\n\t\tthis.onDidCloseDisposable.clear();\n\t\tthis.onDidChangeVisibilityDisposable.clear();\n\t\tthis.notificationHandle = notificationHandle;\n\n\t\tthis.onDidCloseDisposable.value = this.notificationHandle.onDidClose(() => {\n\t\t\tthis.onDidCloseDisposable.dispose();\n\t\t\tthis.onDidChangeVisibilityDisposable.dispose();\n\n\t\t\tthis._onDidClose.fire();\n\n\t\t\tthis._onDidClose.dispose();\n\t\t\tthis._onDidChangeVisibility.dispose();\n\t\t});\n\t\tthis.onDidChangeVisibilityDisposable.value = this.notificationHandle.onDidChangeVisibility((e) => this._onDidChangeVisibility.fire(e));\n\t}\n}\n\ntype PendingRecommendationsNotification = { recommendationsNotification: RecommendationsNotification; source: RecommendationSource; token: CancellationToken };\ntype VisibleRecommendationsNotification = { recommendationsNotification: RecommendationsNotification; source: RecommendationSource; from: number };\n\nexport class ExtensionRecommendationNotificationService extends Disposable implements IExtensionRecommendationNotificationService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\t// Ignored Important Recommendations\n\tget ignoredRecommendations(): string[] {\n\t\treturn distinct([...(<string[]>JSON.parse(this.storageService.get(ignoreImportantExtensionRecommendationStorageKey, StorageScope.PROFILE, '[]')))].map(i => i.toLowerCase()));\n\t}\n\n\tprivate recommendedExtensions: string[] = [];\n\tprivate recommendationSources: RecommendationSource[] = [];\n\n\tprivate hideVisibleNotificationPromise: CancelablePromise<void> | undefined;\n\tprivate visibleNotification: VisibleRecommendationsNotification | undefined;\n\tprivate pendingNotificaitons: PendingRecommendationsNotification[] = [];\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IExtensionsWorkbenchService private readonly extensionsWorkbenchService: IExtensionsWorkbenchService,\n\t\t@IWorkbenchExtensionManagementService private readonly extensionManagementService: IWorkbenchExtensionManagementService,\n\t\t@IWorkbenchExtensionEnablementService private readonly extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@IExtensionIgnoredRecommendationsService private readonly extensionIgnoredRecommendationsService: IExtensionIgnoredRecommendationsService,\n\t\t@IUserDataSyncEnablementService private readonly userDataSyncEnablementService: IUserDataSyncEnablementService,\n\t\t@IWorkbenchEnvironmentService private readonly workbenchEnvironmentService: IWorkbenchEnvironmentService,\n\t) {\n\t\tsuper();\n\t}\n\n\thasToIgnoreRecommendationNotifications(): boolean {\n\t\tconst config = this.configurationService.getValue<{ ignoreRecommendations: boolean; showRecommendationsOnlyOnDemand?: boolean }>('extensions');\n\t\treturn config.ignoreRecommendations || !!config.showRecommendationsOnlyOnDemand;\n\t}\n\n\tasync promptImportantExtensionsInstallNotification(extensionRecommendations: IExtensionRecommendations): Promise<RecommendationsNotificationResult> {\n\t\tconst ignoredRecommendations = [...this.extensionIgnoredRecommendationsService.ignoredRecommendations, ...this.ignoredRecommendations];\n\t\tconst extensions = extensionRecommendations.extensions.filter(id => !ignoredRecommendations.includes(id));\n\t\tif (!extensions.length) {\n\t\t\treturn RecommendationsNotificationResult.Ignored;\n\t\t}\n\n\t\treturn this.promptRecommendationsNotification({ ...extensionRecommendations, extensions }, {\n\t\t\tonDidInstallRecommendedExtensions: (extensions: IExtension[]) => extensions.forEach(extension => this.telemetryService.publicLog2<{ userReaction: string; extensionId: string; source: string }, ExtensionRecommendationsNotificationClassification>('extensionRecommendations:popup', { userReaction: 'install', extensionId: extension.identifier.id, source: RecommendationSourceToString(extensionRecommendations.source) })),\n\t\t\tonDidShowRecommendedExtensions: (extensions: IExtension[]) => extensions.forEach(extension => this.telemetryService.publicLog2<{ userReaction: string; extensionId: string; source: string }, ExtensionRecommendationsNotificationClassification>('extensionRecommendations:popup', { userReaction: 'show', extensionId: extension.identifier.id, source: RecommendationSourceToString(extensionRecommendations.source) })),\n\t\t\tonDidCancelRecommendedExtensions: (extensions: IExtension[]) => extensions.forEach(extension => this.telemetryService.publicLog2<{ userReaction: string; extensionId: string; source: string }, ExtensionRecommendationsNotificationClassification>('extensionRecommendations:popup', { userReaction: 'cancelled', extensionId: extension.identifier.id, source: RecommendationSourceToString(extensionRecommendations.source) })),\n\t\t\tonDidNeverShowRecommendedExtensionsAgain: (extensions: IExtension[]) => {\n\t\t\t\tfor (const extension of extensions) {\n\t\t\t\t\tthis.addToImportantRecommendationsIgnore(extension.identifier.id);\n\t\t\t\t\tthis.telemetryService.publicLog2<{ userReaction: string; extensionId: string; source: string }, ExtensionRecommendationsNotificationClassification>('extensionRecommendations:popup', { userReaction: 'neverShowAgain', extensionId: extension.identifier.id, source: RecommendationSourceToString(extensionRecommendations.source) });\n\t\t\t\t}\n\t\t\t\tthis.notificationService.prompt(\n\t\t\t\t\tSeverity.Info,\n\t\t\t\t\tlocalize('ignoreExtensionRecommendations', \"Do you want to ignore all extension recommendations?\"),\n\t\t\t\t\t[{\n\t\t\t\t\t\tlabel: localize('ignoreAll', \"Yes, Ignore All\"),\n\t\t\t\t\t\trun: () => this.setIgnoreRecommendationsConfig(true)\n\t\t\t\t\t}, {\n\t\t\t\t\t\tlabel: localize('no', \"No\"),\n\t\t\t\t\t\trun: () => this.setIgnoreRecommendationsConfig(false)\n\t\t\t\t\t}]\n\t\t\t\t);\n\t\t\t},\n\t\t});\n\t}\n\n\tasync promptWorkspaceRecommendations(recommendations: string[]): Promise<void> {\n\t\tif (this.storageService.getBoolean(donotShowWorkspaceRecommendationsStorageKey, StorageScope.WORKSPACE, false)) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet installed = await this.extensionManagementService.getInstalled();\n\t\tinstalled = installed.filter(l => this.extensionEnablementService.getEnablementState(l) !== EnablementState.DisabledByExtensionKind); // Filter extensions disabled by kind\n\t\trecommendations = recommendations.filter(extensionId => installed.every(local => !areSameExtensions({ id: extensionId }, local.identifier)));\n\t\tif (!recommendations.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.promptRecommendationsNotification({ extensions: recommendations, source: RecommendationSource.WORKSPACE, name: localize({ key: 'this repository', comment: ['this repository means the current repository that is opened'] }, \"this repository\") }, {\n\t\t\tonDidInstallRecommendedExtensions: () => this.telemetryService.publicLog2<{ userReaction: string }, ExtensionWorkspaceRecommendationsNotificationClassification>('extensionWorkspaceRecommendations:popup', { userReaction: 'install' }),\n\t\t\tonDidShowRecommendedExtensions: () => this.telemetryService.publicLog2<{ userReaction: string }, ExtensionWorkspaceRecommendationsNotificationClassification>('extensionWorkspaceRecommendations:popup', { userReaction: 'show' }),\n\t\t\tonDidCancelRecommendedExtensions: () => this.telemetryService.publicLog2<{ userReaction: string }, ExtensionWorkspaceRecommendationsNotificationClassification>('extensionWorkspaceRecommendations:popup', { userReaction: 'cancelled' }),\n\t\t\tonDidNeverShowRecommendedExtensionsAgain: () => {\n\t\t\t\tthis.telemetryService.publicLog2<{ userReaction: string }, ExtensionWorkspaceRecommendationsNotificationClassification>('extensionWorkspaceRecommendations:popup', { userReaction: 'neverShowAgain' });\n\t\t\t\tthis.storageService.store(donotShowWorkspaceRecommendationsStorageKey, true, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t\t},\n\t\t});\n\n\t}\n\n\tprivate async promptRecommendationsNotification({ extensions: extensionIds, source, name, searchValue }: IExtensionRecommendations, recommendationsNotificationActions: RecommendationsNotificationActions): Promise<RecommendationsNotificationResult> {\n\n\t\tif (this.hasToIgnoreRecommendationNotifications()) {\n\t\t\treturn RecommendationsNotificationResult.Ignored;\n\t\t}\n\n\t\t// Do not show exe based recommendations in remote window\n\t\tif (source === RecommendationSource.EXE && this.workbenchEnvironmentService.remoteAuthority) {\n\t\t\treturn RecommendationsNotificationResult.IncompatibleWindow;\n\t\t}\n\n\t\t// Ignore exe recommendation if the window\n\t\t// \t\t=> has shown an exe based recommendation already\n\t\t// \t\t=> or has shown any two recommendations already\n\t\tif (source === RecommendationSource.EXE && (this.recommendationSources.includes(RecommendationSource.EXE) || this.recommendationSources.length >= 2)) {\n\t\t\treturn RecommendationsNotificationResult.TooMany;\n\t\t}\n\n\t\tthis.recommendationSources.push(source);\n\n\t\t// Ignore exe recommendation if recommendations are already shown\n\t\tif (source === RecommendationSource.EXE && extensionIds.every(id => this.recommendedExtensions.includes(id))) {\n\t\t\treturn RecommendationsNotificationResult.Ignored;\n\t\t}\n\n\t\tconst extensions = await this.getInstallableExtensions(extensionIds);\n\t\tif (!extensions.length) {\n\t\t\treturn RecommendationsNotificationResult.Ignored;\n\t\t}\n\n\t\tthis.recommendedExtensions = distinct([...this.recommendedExtensions, ...extensionIds]);\n\n\t\tlet extensionsMessage = '';\n\t\tif (extensions.length === 1) {\n\t\t\textensionsMessage = localize('extensionFromPublisher', \"'{0}' extension from {1}\", extensions[0].displayName, extensions[0].publisherDisplayName);\n\t\t} else {\n\t\t\tconst publishers = [...extensions.reduce((result, extension) => result.add(extension.publisherDisplayName), new Set<string>())];\n\t\t\tif (publishers.length > 2) {\n\t\t\t\textensionsMessage = localize('extensionsFromMultiplePublishers', \"extensions from {0}, {1} and others\", publishers[0], publishers[1]);\n\t\t\t} else if (publishers.length === 2) {\n\t\t\t\textensionsMessage = localize('extensionsFromPublishers', \"extensions from {0} and {1}\", publishers[0], publishers[1]);\n\t\t\t} else {\n\t\t\t\textensionsMessage = localize('extensionsFromPublisher', \"extensions from {0}\", publishers[0]);\n\t\t\t}\n\t\t}\n\n\t\tlet message = localize('recommended', \"Do you want to install the recommended {0} for {1}?\", extensionsMessage, name);\n\t\tif (source === RecommendationSource.EXE) {\n\t\t\tmessage = localize({ key: 'exeRecommended', comment: ['Placeholder string is the name of the software that is installed.'] }, \"You have {0} installed on your system. Do you want to install the recommended {1} for it?\", name, extensionsMessage);\n\t\t}\n\t\tif (!searchValue) {\n\t\t\tsearchValue = source === RecommendationSource.WORKSPACE ? '@recommended' : extensions.map(extensionId => `@id:${extensionId.identifier.id}`).join(' ');\n\t\t}\n\n\t\treturn raceCancellablePromises([\n\t\t\tthis._registerP(this.showRecommendationsNotification(extensions, message, searchValue, source, recommendationsNotificationActions)),\n\t\t\tthis._registerP(this.waitUntilRecommendationsAreInstalled(extensions))\n\t\t]);\n\n\t}\n\n\tprivate showRecommendationsNotification(extensions: IExtension[], message: string, searchValue: string, source: RecommendationSource,\n\t\t{ onDidInstallRecommendedExtensions, onDidShowRecommendedExtensions, onDidCancelRecommendedExtensions, onDidNeverShowRecommendedExtensionsAgain }: RecommendationsNotificationActions): CancelablePromise<RecommendationsNotificationResult> {\n\t\treturn createCancelablePromise<RecommendationsNotificationResult>(async token => {\n\t\t\tlet accepted = false;\n\t\t\tconst choices: (IPromptChoice | IPromptChoiceWithMenu)[] = [];\n\t\t\tconst installExtensions = async (isMachineScoped: boolean) => {\n\t\t\t\tthis.runAction(this.instantiationService.createInstance(SearchExtensionsAction, searchValue));\n\t\t\t\tonDidInstallRecommendedExtensions(extensions);\n\t\t\t\tawait Promises.settled<any>([\n\t\t\t\t\tPromises.settled(extensions.map(extension => this.extensionsWorkbenchService.open(extension, { pinned: true }))),\n\t\t\t\t\tthis.extensionManagementService.installGalleryExtensions(extensions.map(e => ({ extension: e.gallery!, options: { isMachineScoped } })))\n\t\t\t\t]);\n\t\t\t};\n\t\t\tchoices.push({\n\t\t\t\tlabel: localize('install', \"Install\"),\n\t\t\t\trun: () => installExtensions(false),\n\t\t\t\tmenu: this.userDataSyncEnablementService.isEnabled() && this.userDataSyncEnablementService.isResourceEnabled(SyncResource.Extensions) ? [{\n\t\t\t\t\tlabel: localize('install and do no sync', \"Install (Do not sync)\"),\n\t\t\t\t\trun: () => installExtensions(true)\n\t\t\t\t}] : undefined,\n\t\t\t});\n\t\t\tchoices.push(...[{\n\t\t\t\tlabel: localize('show recommendations', \"Show Recommendations\"),\n\t\t\t\trun: async () => {\n\t\t\t\t\tonDidShowRecommendedExtensions(extensions);\n\t\t\t\t\tfor (const extension of extensions) {\n\t\t\t\t\t\tthis.extensionsWorkbenchService.open(extension, { pinned: true });\n\t\t\t\t\t}\n\t\t\t\t\tthis.runAction(this.instantiationService.createInstance(SearchExtensionsAction, searchValue));\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tlabel: choiceNever,\n\t\t\t\tisSecondary: true,\n\t\t\t\trun: () => {\n\t\t\t\t\tonDidNeverShowRecommendedExtensionsAgain(extensions);\n\t\t\t\t}\n\t\t\t}]);\n\t\t\ttry {\n\t\t\t\taccepted = await this.doShowRecommendationsNotification(Severity.Info, message, choices, source, token);\n\t\t\t} catch (error) {\n\t\t\t\tif (!isCancellationError(error)) {\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (accepted) {\n\t\t\t\treturn RecommendationsNotificationResult.Accepted;\n\t\t\t} else {\n\t\t\t\tonDidCancelRecommendedExtensions(extensions);\n\t\t\t\treturn RecommendationsNotificationResult.Cancelled;\n\t\t\t}\n\n\t\t});\n\t}\n\n\tprivate waitUntilRecommendationsAreInstalled(extensions: IExtension[]): CancelablePromise<RecommendationsNotificationResult.Accepted> {\n\t\tconst installedExtensions: string[] = [];\n\t\tconst disposables = new DisposableStore();\n\t\treturn createCancelablePromise(async token => {\n\t\t\tdisposables.add(token.onCancellationRequested(e => disposables.dispose()));\n\t\t\treturn new Promise<RecommendationsNotificationResult.Accepted>((c, e) => {\n\t\t\t\tdisposables.add(this.extensionManagementService.onInstallExtension(e => {\n\t\t\t\t\tinstalledExtensions.push(e.identifier.id.toLowerCase());\n\t\t\t\t\tif (extensions.every(e => installedExtensions.includes(e.identifier.id.toLowerCase()))) {\n\t\t\t\t\t\tc(RecommendationsNotificationResult.Accepted);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * Show recommendations in Queue\n\t * At any time only one recommendation is shown\n\t * If a new recommendation comes in\n\t * \t\t=> If no recommendation is visible, show it immediately\n\t *\t\t=> Otherwise, add to the pending queue\n\t * \t\t\t=> If it is not exe based and has higher or same priority as current, hide the current notification after showing it for 3s.\n\t * \t\t\t=> Otherwise wait until the current notification is hidden.\n\t */\n\tprivate async doShowRecommendationsNotification(severity: Severity, message: string, choices: IPromptChoice[], source: RecommendationSource, token: CancellationToken): Promise<boolean> {\n\t\tconst disposables = new DisposableStore();\n\t\ttry {\n\t\t\tconst recommendationsNotification = disposables.add(new RecommendationsNotification(severity, message, choices, this.notificationService));\n\t\t\tdisposables.add(Event.once(Event.filter(recommendationsNotification.onDidChangeVisibility, e => !e))(() => this.showNextNotification()));\n\t\t\tif (this.visibleNotification) {\n\t\t\t\tconst index = this.pendingNotificaitons.length;\n\t\t\t\tdisposables.add(token.onCancellationRequested(() => this.pendingNotificaitons.splice(index, 1)));\n\t\t\t\tthis.pendingNotificaitons.push({ recommendationsNotification, source, token });\n\t\t\t\tif (source !== RecommendationSource.EXE && source <= this.visibleNotification!.source) {\n\t\t\t\t\tthis.hideVisibleNotification(3000);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.visibleNotification = { recommendationsNotification, source, from: Date.now() };\n\t\t\t\trecommendationsNotification.show();\n\t\t\t}\n\t\t\tawait raceCancellation(new Promise(c => disposables.add(Event.once(recommendationsNotification.onDidClose)(c))), token);\n\t\t\treturn !recommendationsNotification.isCancelled();\n\t\t} finally {\n\t\t\tdisposables.dispose();\n\t\t}\n\t}\n\n\tprivate showNextNotification(): void {\n\t\tconst index = this.getNextPendingNotificationIndex();\n\t\tconst [nextNotificaiton] = index > -1 ? this.pendingNotificaitons.splice(index, 1) : [];\n\n\t\t// Show the next notification after a delay of 500ms (after the current notification is dismissed)\n\t\ttimeout(nextNotificaiton ? 500 : 0)\n\t\t\t.then(() => {\n\t\t\t\tthis.unsetVisibileNotification();\n\t\t\t\tif (nextNotificaiton) {\n\t\t\t\t\tthis.visibleNotification = { recommendationsNotification: nextNotificaiton.recommendationsNotification, source: nextNotificaiton.source, from: Date.now() };\n\t\t\t\t\tnextNotificaiton.recommendationsNotification.show();\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\t/**\n\t * Return the recent high priroity pending notification\n\t */\n\tprivate getNextPendingNotificationIndex(): number {\n\t\tlet index = this.pendingNotificaitons.length - 1;\n\t\tif (this.pendingNotificaitons.length) {\n\t\t\tfor (let i = 0; i < this.pendingNotificaitons.length; i++) {\n\t\t\t\tif (this.pendingNotificaitons[i].source <= this.pendingNotificaitons[index].source) {\n\t\t\t\t\tindex = i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn index;\n\t}\n\n\tprivate hideVisibleNotification(timeInMillis: number): void {\n\t\tif (this.visibleNotification && !this.hideVisibleNotificationPromise) {\n\t\t\tconst visibleNotification = this.visibleNotification;\n\t\t\tthis.hideVisibleNotificationPromise = timeout(Math.max(timeInMillis - (Date.now() - visibleNotification.from), 0));\n\t\t\tthis.hideVisibleNotificationPromise.then(() => visibleNotification!.recommendationsNotification.hide());\n\t\t}\n\t}\n\n\tprivate unsetVisibileNotification(): void {\n\t\tthis.hideVisibleNotificationPromise?.cancel();\n\t\tthis.hideVisibleNotificationPromise = undefined;\n\t\tthis.visibleNotification = undefined;\n\t}\n\n\tprivate async getInstallableExtensions(extensionIds: string[]): Promise<IExtension[]> {\n\t\tconst result: IExtension[] = [];\n\t\tif (extensionIds.length) {\n\t\t\tconst extensions = await this.extensionsWorkbenchService.getExtensions(extensionIds.map(id => ({ id })), { source: 'install-recommendations' }, CancellationToken.None);\n\t\t\tfor (const extension of extensions) {\n\t\t\t\tif (extension.gallery && (await this.extensionManagementService.canInstall(extension.gallery))) {\n\t\t\t\t\tresult.push(extension);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async runAction(action: IAction): Promise<void> {\n\t\ttry {\n\t\t\tawait action.run();\n\t\t} finally {\n\t\t\tif (isDisposable(action)) {\n\t\t\t\taction.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate addToImportantRecommendationsIgnore(id: string) {\n\t\tconst importantRecommendationsIgnoreList = [...this.ignoredRecommendations];\n\t\tif (!importantRecommendationsIgnoreList.includes(id.toLowerCase())) {\n\t\t\timportantRecommendationsIgnoreList.push(id.toLowerCase());\n\t\t\tthis.storageService.store(ignoreImportantExtensionRecommendationStorageKey, JSON.stringify(importantRecommendationsIgnoreList), StorageScope.PROFILE, StorageTarget.USER);\n\t\t}\n\t}\n\n\tprivate setIgnoreRecommendationsConfig(configVal: boolean) {\n\t\tthis.configurationService.updateValue('extensions.ignoreRecommendations', configVal);\n\t}\n\n\tprivate _registerP<T>(o: CancelablePromise<T>): CancelablePromise<T> {\n\t\tthis._register(toDisposable(() => o.cancel()));\n\t\treturn o;\n\t}\n}\n"]}