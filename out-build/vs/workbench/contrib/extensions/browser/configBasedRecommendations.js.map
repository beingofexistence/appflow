{"version":3,"sources":["vs/workbench/contrib/extensions/browser/configBasedRecommendations.ts"],"names":[],"mappings":"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","file":"configBasedRecommendations.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IExtensionTipsService, IConfigBasedExtensionTip } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { ExtensionRecommendations, ExtensionRecommendation } from 'vs/workbench/contrib/extensions/browser/extensionRecommendations';\nimport { localize } from 'vs/nls';\nimport { ExtensionRecommendationReason } from 'vs/workbench/services/extensionRecommendations/common/extensionRecommendations';\nimport { IWorkspaceContextService, IWorkspaceFoldersChangeEvent } from 'vs/platform/workspace/common/workspace';\nimport { Emitter } from 'vs/base/common/event';\n\ntype ConfigBasedExtensionRecommendation = ExtensionRecommendation & { whenNotInstalled: string[] | undefined };\n\nexport class ConfigBasedRecommendations extends ExtensionRecommendations {\n\n\tprivate importantTips: IConfigBasedExtensionTip[] = [];\n\tprivate otherTips: IConfigBasedExtensionTip[] = [];\n\n\tprivate _onDidChangeRecommendations = this._register(new Emitter<void>());\n\treadonly onDidChangeRecommendations = this._onDidChangeRecommendations.event;\n\n\tprivate _otherRecommendations: ConfigBasedExtensionRecommendation[] = [];\n\tget otherRecommendations(): ReadonlyArray<ConfigBasedExtensionRecommendation> { return this._otherRecommendations; }\n\n\tprivate _importantRecommendations: ConfigBasedExtensionRecommendation[] = [];\n\tget importantRecommendations(): ReadonlyArray<ConfigBasedExtensionRecommendation> { return this._importantRecommendations; }\n\n\tget recommendations(): ReadonlyArray<ConfigBasedExtensionRecommendation> { return [...this.importantRecommendations, ...this.otherRecommendations]; }\n\n\tconstructor(\n\t\t@IExtensionTipsService private readonly extensionTipsService: IExtensionTipsService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected async doActivate(): Promise<void> {\n\t\tawait this.fetch();\n\t\tthis._register(this.workspaceContextService.onDidChangeWorkspaceFolders(e => this.onWorkspaceFoldersChanged(e)));\n\t}\n\n\tprivate async fetch(): Promise<void> {\n\t\tconst workspace = this.workspaceContextService.getWorkspace();\n\t\tconst importantTips: Map<string, IConfigBasedExtensionTip> = new Map<string, IConfigBasedExtensionTip>();\n\t\tconst otherTips: Map<string, IConfigBasedExtensionTip> = new Map<string, IConfigBasedExtensionTip>();\n\t\tfor (const folder of workspace.folders) {\n\t\t\tconst configBasedTips = await this.extensionTipsService.getConfigBasedTips(folder.uri);\n\t\t\tfor (const tip of configBasedTips) {\n\t\t\t\tif (tip.important) {\n\t\t\t\t\timportantTips.set(tip.extensionId, tip);\n\t\t\t\t} else {\n\t\t\t\t\totherTips.set(tip.extensionId, tip);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.importantTips = [...importantTips.values()];\n\t\tthis.otherTips = [...otherTips.values()].filter(tip => !importantTips.has(tip.extensionId));\n\t\tthis._otherRecommendations = this.otherTips.map(tip => this.toExtensionRecommendation(tip));\n\t\tthis._importantRecommendations = this.importantTips.map(tip => this.toExtensionRecommendation(tip));\n\t}\n\n\tprivate async onWorkspaceFoldersChanged(event: IWorkspaceFoldersChangeEvent): Promise<void> {\n\t\tif (event.added.length) {\n\t\t\tconst oldImportantRecommended = this.importantTips;\n\t\t\tawait this.fetch();\n\t\t\t// Suggest only if at least one of the newly added recommendations was not suggested before\n\t\t\tif (this.importantTips.some(current => oldImportantRecommended.every(old => current.extensionId !== old.extensionId))) {\n\t\t\t\tthis._onDidChangeRecommendations.fire();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate toExtensionRecommendation(tip: IConfigBasedExtensionTip): ConfigBasedExtensionRecommendation {\n\t\treturn {\n\t\t\textensionId: tip.extensionId,\n\t\t\treason: {\n\t\t\t\treasonId: ExtensionRecommendationReason.WorkspaceConfig,\n\t\t\t\treasonText: localize('exeBasedRecommendation', \"This extension is recommended because of the current workspace configuration\")\n\t\t\t},\n\t\t\twhenNotInstalled: tip.whenNotInstalled\n\t\t};\n\t}\n\n}\n"]}