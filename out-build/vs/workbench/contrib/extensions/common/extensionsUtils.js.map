{"version":3,"sources":["vs/workbench/contrib/extensions/common/extensionsUtils.ts"],"names":[],"mappings":"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","file":"extensionsUtils.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { Event } from 'vs/base/common/event';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IExtensionManagementService, ILocalExtension, IExtensionIdentifier, InstallOperation } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { IWorkbenchExtensionEnablementService, EnablementState } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { IExtensionRecommendationsService } from 'vs/workbench/services/extensionRecommendations/common/extensionRecommendations';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { ServicesAccessor, IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { areSameExtensions } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { Severity, INotificationService } from 'vs/platform/notification/common/notification';\n\nexport interface IExtensionStatus {\n\tidentifier: IExtensionIdentifier;\n\tlocal: ILocalExtension;\n\tgloballyEnabled: boolean;\n}\n\nexport class KeymapExtensions extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IWorkbenchExtensionEnablementService private readonly extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@IExtensionRecommendationsService private readonly tipsService: IExtensionRecommendationsService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t) {\n\t\tsuper();\n\t\tthis._register(lifecycleService.onDidShutdown(() => this.dispose()));\n\t\tthis._register(instantiationService.invokeFunction(onExtensionChanged)((identifiers => {\n\t\t\tPromise.all(identifiers.map(identifier => this.checkForOtherKeymaps(identifier)))\n\t\t\t\t.then(undefined, onUnexpectedError);\n\t\t})));\n\t}\n\n\tprivate checkForOtherKeymaps(extensionIdentifier: IExtensionIdentifier): Promise<void> {\n\t\treturn this.instantiationService.invokeFunction(getInstalledExtensions).then(extensions => {\n\t\t\tconst keymaps = extensions.filter(extension => isKeymapExtension(this.tipsService, extension));\n\t\t\tconst extension = keymaps.find(extension => areSameExtensions(extension.identifier, extensionIdentifier));\n\t\t\tif (extension && extension.globallyEnabled) {\n\t\t\t\tconst otherKeymaps = keymaps.filter(extension => !areSameExtensions(extension.identifier, extensionIdentifier) && extension.globallyEnabled);\n\t\t\t\tif (otherKeymaps.length) {\n\t\t\t\t\treturn this.promptForDisablingOtherKeymaps(extension, otherKeymaps);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\tprivate promptForDisablingOtherKeymaps(newKeymap: IExtensionStatus, oldKeymaps: IExtensionStatus[]): void {\n\t\tconst onPrompt = (confirmed: boolean) => {\n\t\t\tif (confirmed) {\n\t\t\t\tthis.extensionEnablementService.setEnablement(oldKeymaps.map(keymap => keymap.local), EnablementState.DisabledGlobally);\n\t\t\t}\n\t\t};\n\n\t\tthis.notificationService.prompt(Severity.Info, localize('disableOtherKeymapsConfirmation', \"Disable other keymaps ({0}) to avoid conflicts between keybindings?\", oldKeymaps.map(k => `'${k.local.manifest.displayName}'`).join(', ')),\n\t\t\t[{\n\t\t\t\tlabel: localize('yes', \"Yes\"),\n\t\t\t\trun: () => onPrompt(true)\n\t\t\t}, {\n\t\t\t\tlabel: localize('no', \"No\"),\n\t\t\t\trun: () => onPrompt(false)\n\t\t\t}]\n\t\t);\n\t}\n}\n\nfunction onExtensionChanged(accessor: ServicesAccessor): Event<IExtensionIdentifier[]> {\n\tconst extensionService = accessor.get(IExtensionManagementService);\n\tconst extensionEnablementService = accessor.get(IWorkbenchExtensionEnablementService);\n\tconst onDidInstallExtensions = Event.chain(extensionService.onDidInstallExtensions, $ =>\n\t\t$.filter(e => e.some(({ operation }) => operation === InstallOperation.Install))\n\t\t\t.map(e => e.map(({ identifier }) => identifier))\n\t);\n\treturn Event.debounce<IExtensionIdentifier[], IExtensionIdentifier[]>(Event.any(\n\t\tEvent.any(onDidInstallExtensions, Event.map(extensionService.onDidUninstallExtension, e => [e.identifier])),\n\t\tEvent.map(extensionEnablementService.onEnablementChanged, extensions => extensions.map(e => e.identifier))\n\t), (result: IExtensionIdentifier[] | undefined, identifiers: IExtensionIdentifier[]) => {\n\t\tresult = result || [];\n\t\tfor (const identifier of identifiers) {\n\t\t\tif (result.some(l => !areSameExtensions(l, identifier))) {\n\t\t\t\tresult.push(identifier);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t});\n}\n\nexport async function getInstalledExtensions(accessor: ServicesAccessor): Promise<IExtensionStatus[]> {\n\tconst extensionService = accessor.get(IExtensionManagementService);\n\tconst extensionEnablementService = accessor.get(IWorkbenchExtensionEnablementService);\n\tconst extensions = await extensionService.getInstalled();\n\treturn extensions.map(extension => {\n\t\treturn {\n\t\t\tidentifier: extension.identifier,\n\t\t\tlocal: extension,\n\t\t\tgloballyEnabled: extensionEnablementService.isEnabled(extension)\n\t\t};\n\t});\n}\n\nfunction isKeymapExtension(tipsService: IExtensionRecommendationsService, extension: IExtensionStatus): boolean {\n\tconst cats = extension.local.manifest.categories;\n\treturn cats && cats.indexOf('Keymaps') !== -1 || tipsService.getKeymapRecommendations().some(extensionId => areSameExtensions({ id: extensionId }, extension.local.identifier));\n}\n"]}