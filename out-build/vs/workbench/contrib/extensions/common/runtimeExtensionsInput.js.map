{"version":3,"sources":["vs/workbench/contrib/extensions/common/runtimeExtensionsInput.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOhG,MAAa,IAAuB,SAAQ,iBAAG;QAA/C;;YAqBU,aAAQ,GAAG,SAAG,CAAC,IAAI,CAAC;gBAC5B,MAAM,EAAE,oBAAoB;gBAC5B,IAAI,EAAE,SAAS;aACf,CAAC,CAAC;QAYJ,CAAC;iBAlCgB,OAAE,GAAG,mCAAH,AAAsC,CAAC;QAEzD,IAAa,MAAM;YAClB,OAAO,IAAI,CAAmB,EAAE,CAAC;QAClC,CAAC;QAED,IAAa,YAAY;YACxB,OAAO,oFAAoE,CAAC;QAC7E,CAAC;QAGD,MAAM,KAAK,QAAQ;YAClB,IAAI,CAAC,IAAI,CAAmB,SAAS,IAAI,IAAI,CAAmB,SAAS,CAAC,UAAU,EAAE,EAAE;gBACvF,IAAI,CAAmB,SAAS,GAAG,IAAI,IAAI,EAAoB,CAAC;aAChE;YAED,OAAO,IAAI,CAAmB,SAAS,CAAC;QACzC,CAAC;QAOQ,OAAO;YACf,OAAO,GAAG,CAAC,QAAQ,CAAC,CAAqB,EAAE,IAAoB,CAAC,CAAC;QAClE,CAAC;QAEQ,OAAO,CAAC,KAAwC;YACxD,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACzB,OAAO,IAAI,CAAC;aACZ;YACD,OAAO,KAAK,YAAY,IAAI,CAAmB;QAChD,CAAC;;IAnCF,oBAoCC","file":"runtimeExtensionsInput.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { URI } from 'vs/base/common/uri';\nimport { EditorInputCapabilities, IUntypedEditorInput } from 'vs/workbench/common/editor';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\n\nexport class RuntimeExtensionsInput extends EditorInput {\n\n\tstatic readonly ID = 'workbench.runtimeExtensions.input';\n\n\toverride get typeId(): string {\n\t\treturn RuntimeExtensionsInput.ID;\n\t}\n\n\toverride get capabilities(): EditorInputCapabilities {\n\t\treturn EditorInputCapabilities.Readonly | EditorInputCapabilities.Singleton;\n\t}\n\n\tstatic _instance: RuntimeExtensionsInput;\n\tstatic get instance() {\n\t\tif (!RuntimeExtensionsInput._instance || RuntimeExtensionsInput._instance.isDisposed()) {\n\t\t\tRuntimeExtensionsInput._instance = new RuntimeExtensionsInput();\n\t\t}\n\n\t\treturn RuntimeExtensionsInput._instance;\n\t}\n\n\treadonly resource = URI.from({\n\t\tscheme: 'runtime-extensions',\n\t\tpath: 'default'\n\t});\n\n\toverride getName(): string {\n\t\treturn nls.localize('extensionsInputName', \"Running Extensions\");\n\t}\n\n\toverride matches(other: EditorInput | IUntypedEditorInput): boolean {\n\t\tif (super.matches(other)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn other instanceof RuntimeExtensionsInput;\n\t}\n}\n"]}