{"version":3,"sources":["vs/workbench/contrib/extensions/common/extensionsInput.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAkBhG,MAAa,IAAgB,SAAQ,iBAAG;iBAEvB,OAAE,GAAG,6BAA6B,CAAC;QAEnD,IAAa,MAAM;YAClB,OAAO,IAAI,CAAY,EAAE,CAAC;QAC3B,CAAC;QAED,IAAa,YAAY;YACxB,OAAO,oFAAoE,CAAC;QAC7E,CAAC;QAED,IAAa,QAAQ;YACpB,OAAO,SAAG,CAAC,IAAI,CAAC;gBACf,MAAM,EAAE,iBAAO,CAAC,SAAS;gBACzB,IAAI,EAAE,IAAA,UAAG,EAAE,IAAI,CAAC,CAAC,CAAU,UAAU,CAAC,EAAE,EAAE,WAAW,CAAC;aACtD,CAAC,CAAC;QACJ,CAAC;QAED,YAAoB,CAAsB;YACzC,KAAK,EAAE,CAAC;YADW,MAAC,GAAD,CAAC,CAAqB;QAE1C,CAAC;QAED,IAAI,SAAS,KAAiB,OAAO,IAAI,CAAC,CAAC,CAAU,CAAC,CAAC;QAE9C,OAAO;YACf,OAAO,IAAA,cAAQ,EAAC,CAAqB,EAAE,IAAgB,EAAE,IAAI,CAAC,CAAC,CAAU,WAAW,CAAC,CAAC;QACvF,CAAC;QAEQ,OAAO,CAAC,KAAwC;YACxD,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACzB,OAAO,IAAI,CAAC;aACZ;YAED,OAAO,KAAK,YAAY,IAAI,IAAe,IAAA,6BAAG,EAAe,IAAI,CAAC,CAAC,CAAU,UAAU,EAAE,KAAK,CAAC,CAAC,CAAU,UAAU,CAAC,CAAC;QACvH,CAAC;;IAnCF,oBAoCC","file":"extensionsInput.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { EditorInputCapabilities, IUntypedEditorInput } from 'vs/workbench/common/editor';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { ExtensionEditorTab, IExtension } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { areSameExtensions } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { join } from 'vs/base/common/path';\nimport { IEditorOptions } from 'vs/platform/editor/common/editor';\n\nexport interface IExtensionEditorOptions extends IEditorOptions {\n\tshowPreReleaseVersion?: boolean;\n\ttab?: ExtensionEditorTab;\n\tsideByside?: boolean;\n}\n\nexport class ExtensionsInput extends EditorInput {\n\n\tstatic readonly ID = 'workbench.extensions.input2';\n\n\toverride get typeId(): string {\n\t\treturn ExtensionsInput.ID;\n\t}\n\n\toverride get capabilities(): EditorInputCapabilities {\n\t\treturn EditorInputCapabilities.Readonly | EditorInputCapabilities.Singleton;\n\t}\n\n\toverride get resource() {\n\t\treturn URI.from({\n\t\t\tscheme: Schemas.extension,\n\t\t\tpath: join(this._extension.identifier.id, 'extension')\n\t\t});\n\t}\n\n\tconstructor(private _extension: IExtension) {\n\t\tsuper();\n\t}\n\n\tget extension(): IExtension { return this._extension; }\n\n\toverride getName(): string {\n\t\treturn localize('extensionsInputName', \"Extension: {0}\", this._extension.displayName);\n\t}\n\n\toverride matches(other: EditorInput | IUntypedEditorInput): boolean {\n\t\tif (super.matches(other)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn other instanceof ExtensionsInput && areSameExtensions(this._extension.identifier, other._extension.identifier);\n\t}\n}\n"]}