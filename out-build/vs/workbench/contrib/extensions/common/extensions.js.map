{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/extensions/common/extensions.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAkBnF,QAAA,IAAI,GAAS,2BAA2B,CAAC;IAYtD,IAAkB,cAKjB;IALD,WAAkB,cAAc;QAC/B,+DAAU,CAAA;QACV,6DAAS,CAAA;QACT,mEAAY,CAAA;QACZ,iEAAW,CAAA;IACZ,CAAC,EALiB,cAAc,8BAAd,cAAc,QAK/B;IAkDY,QAAA,IAAI,GAA0B,IAAA,mBAAG,EAA0C,4BAA4B,CAAC,CAAC;IAqCtH,IAAkB,kBAOjB;IAPD,WAAkB,kBAAkB;QACnC,uCAAiB,CAAA;QACjB,qDAA+B,CAAA;QAC/B,6CAAuB,CAAA;QACvB,mDAA6B,CAAA;QAC7B,qDAA+B,CAAA;QAC/B,qDAA+B,CAAA;IAChC,CAAC,EAPiB,kBAAkB,kCAAlB,kBAAkB,QAOnC;IAEY,QAAA,IAAI,GAAe,YAAY,CAAC;IAChC,QAAA,IAAI,GAAyB,uBAAuB,CAAC;IACrD,QAAA,IAAI,GAA+B,6BAA6B,CAAC;IACjE,QAAA,IAAI,GAAmC,8CAA8C,CAAC;IAe5F,IAAM,IAAI,GAAV,MAAM,IAAoB,SAAQ,eAAG;QAE3C,YACkB,CAAiC,EACrB,0BAAgC;YAE7D,KAAK,EAAE,CAAC;YAHS,MAAC,GAAD,CAAC,CAAgC;YAIlD,IAAI,CAAC,CAAC,CAAS,0BAA0B,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAO,IAAI,CAAC,CAAC,CAAC;QACxE,CAAC;QAED,IAAI,SAAS,CAAC,SAAqB;YAClC,IAAI,CAAC,CAAC,CAAU,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,GAAG,SAAS,CAAC,CAAC;QACvD,CAAC;QAEO,CAAC,CAAM,SAAiC;YAC/C,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,CAAC,EAAW;gBACxC,IAAI,SAAS,IAAI,SAAS,CAAC,SAAS,EAAE;oBACrC,IAAI,IAAA,6BAAG,EAAe,SAAS,CAAC,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,UAAU,CAAC,EAAE;wBAC5E,IAAI,SAAS,CAAC,SAAS,CAAC,MAAM,IAAI,SAAS,CAAC,MAAM,IAAI,SAAS,CAAC,SAAS,CAAC,MAAM,KAAK,SAAS,CAAC,MAAM,EAAE;4BACtG,IAAI,SAAS,CAAC,iCAAiC,EAAE;gCAChD,SAAS,CAAC,MAAM,EAAE,CAAC;6BACnB;yBACD;6BAAM;4BACN,SAAS,CAAC,SAAS,GAAG,SAAS,CAAC;yBAChC;qBACD;iBACD;qBAAM;oBACN,SAAS,CAAC,MAAM,EAAE,CAAC;iBACnB;aACD;QACF,CAAC;KACD,CAAA;IA/BY,oBAAI;mBAAJ,IAAI;QAId,WAAA,YAAI,CAAA;OAJM,IAAI,CA+BhB;IAEY,QAAA,IAAI,GAAgC,qDAAqD,CAAC;IAC1F,QAAA,IAAI,GAA0B,2CAA2C,CAAC;IAC1E,QAAA,IAAI,GAAgC,mDAAmD,CAAC;IACxF,QAAA,IAAI,GAAuC,yCAAyC,CAAC;IACrF,QAAA,IAAI,GAAqC,8CAA8C,CAAC;IAExF,QAAA,IAAI,GAA+C,gEAAgE,CAAC;IAEjI,eAAe;IACF,QAAA,IAAI,GAA2B,IAAI,gBAAG,CAAoB,uBAAuB,EAAE,KAAK,CAAC,CAAC;IAC1F,QAAA,IAAI,GAAkB,IAAI,gBAAG,CAAoB,YAAY,EAAE,KAAK,CAAC,CAAC;IAEnF,sBAAsB;IACT,QAAA,IAAI,GAAkB,SAAS,CAAC;IAChC,QAAA,IAAI,GAAoB,WAAW,CAAC","file":"extensions.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Event } from 'vs/base/common/event';\nimport { IPager } from 'vs/base/common/paging';\nimport { IQueryOptions, ILocalExtension, IGalleryExtension, IExtensionIdentifier, InstallOptions, InstallVSIXOptions, IExtensionInfo, IExtensionQueryOptions, IDeprecationInfo } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { EnablementState, IExtensionManagementServer } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { areSameExtensions } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { IExtensionManifest, ExtensionType } from 'vs/platform/extensions/common/extensions';\nimport { URI } from 'vs/base/common/uri';\nimport { IView, IViewPaneContainer } from 'vs/workbench/common/views';\nimport { RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { IExtensionsStatus } from 'vs/workbench/services/extensions/common/extensions';\nimport { IExtensionEditorOptions } from 'vs/workbench/contrib/extensions/common/extensionsInput';\nimport { ProgressLocation } from 'vs/platform/progress/common/progress';\n\nexport const VIEWLET_ID = 'workbench.view.extensions';\n\nexport interface IExtensionsViewPaneContainer extends IViewPaneContainer {\n\treadonly searchValue: string | undefined;\n\tsearch(text: string): void;\n\trefresh(): Promise<void>;\n}\n\nexport interface IWorkspaceRecommendedExtensionsView extends IView {\n\tinstallWorkspaceRecommendations(): Promise<void>;\n}\n\nexport const enum ExtensionState {\n\tInstalling,\n\tInstalled,\n\tUninstalling,\n\tUninstalled\n}\n\nexport interface IExtension {\n\treadonly type: ExtensionType;\n\treadonly isBuiltin: boolean;\n\treadonly state: ExtensionState;\n\treadonly name: string;\n\treadonly displayName: string;\n\treadonly identifier: IExtensionIdentifier;\n\treadonly publisher: string;\n\treadonly publisherDisplayName: string;\n\treadonly publisherUrl?: URI;\n\treadonly publisherDomain?: { link: string; verified: boolean };\n\treadonly publisherSponsorLink?: URI;\n\treadonly version: string;\n\treadonly latestVersion: string;\n\treadonly hasPreReleaseVersion: boolean;\n\treadonly hasReleaseVersion: boolean;\n\treadonly description: string;\n\treadonly url?: string;\n\treadonly repository?: string;\n\treadonly iconUrl: string;\n\treadonly iconUrlFallback: string;\n\treadonly licenseUrl?: string;\n\treadonly installCount?: number;\n\treadonly rating?: number;\n\treadonly ratingCount?: number;\n\treadonly outdated: boolean;\n\treadonly pinned: boolean;\n\treadonly outdatedTargetPlatform: boolean;\n\treadonly reloadRequiredStatus?: string;\n\treadonly enablementState: EnablementState;\n\treadonly tags: readonly string[];\n\treadonly categories: readonly string[];\n\treadonly dependencies: string[];\n\treadonly extensionPack: string[];\n\treadonly telemetryData: any;\n\treadonly preview: boolean;\n\tgetManifest(token: CancellationToken): Promise<IExtensionManifest | null>;\n\thasReadme(): boolean;\n\tgetReadme(token: CancellationToken): Promise<string>;\n\thasChangelog(): boolean;\n\tgetChangelog(token: CancellationToken): Promise<string>;\n\treadonly server?: IExtensionManagementServer;\n\treadonly local?: ILocalExtension;\n\tgallery?: IGalleryExtension;\n\treadonly isMalicious: boolean;\n\treadonly deprecationInfo?: IDeprecationInfo;\n}\n\nexport const IExtensionsWorkbenchService = createDecorator<IExtensionsWorkbenchService>('extensionsWorkbenchService');\n\nexport interface IExtensionsWorkbenchService {\n\treadonly _serviceBrand: undefined;\n\treadonly onChange: Event<IExtension | undefined>;\n\treadonly onReset: Event<void>;\n\treadonly preferPreReleases: boolean;\n\treadonly local: IExtension[];\n\treadonly installed: IExtension[];\n\treadonly outdated: IExtension[];\n\treadonly whenInitialized: Promise<void>;\n\tqueryLocal(server?: IExtensionManagementServer): Promise<IExtension[]>;\n\tqueryGallery(token: CancellationToken): Promise<IPager<IExtension>>;\n\tqueryGallery(options: IQueryOptions, token: CancellationToken): Promise<IPager<IExtension>>;\n\tgetExtensions(extensionInfos: IExtensionInfo[], token: CancellationToken): Promise<IExtension[]>;\n\tgetExtensions(extensionInfos: IExtensionInfo[], options: IExtensionQueryOptions, token: CancellationToken): Promise<IExtension[]>;\n\tcanInstall(extension: IExtension): Promise<boolean>;\n\tinstall(vsix: URI, installOptions?: InstallVSIXOptions): Promise<IExtension>;\n\tinstall(extension: IExtension, installOptions?: InstallOptions, progressLocation?: ProgressLocation): Promise<IExtension>;\n\tinstallInServer(extension: IExtension, server: IExtensionManagementServer): Promise<void>;\n\tuninstall(extension: IExtension): Promise<void>;\n\tinstallVersion(extension: IExtension, version: string, installOptions?: InstallOptions): Promise<IExtension>;\n\treinstall(extension: IExtension): Promise<IExtension>;\n\tcanSetLanguage(extension: IExtension): boolean;\n\tsetLanguage(extension: IExtension): Promise<void>;\n\tsetEnablement(extensions: IExtension | IExtension[], enablementState: EnablementState): Promise<void>;\n\tpinExtension(extension: IExtension, pin: boolean): Promise<void>;\n\topen(extension: IExtension | string, options?: IExtensionEditorOptions): Promise<void>;\n\tcheckForUpdates(): Promise<void>;\n\tgetExtensionStatus(extension: IExtension): IExtensionsStatus | undefined;\n\n\t// Sync APIs\n\tisExtensionIgnoredToSync(extension: IExtension): boolean;\n\ttoggleExtensionIgnoredToSync(extension: IExtension): Promise<void>;\n\ttoggleApplyExtensionToAllProfiles(extension: IExtension): Promise<void>;\n}\n\nexport const enum ExtensionEditorTab {\n\tReadme = 'readme',\n\tContributions = 'contributions',\n\tChangelog = 'changelog',\n\tDependencies = 'dependencies',\n\tExtensionPack = 'extensionPack',\n\tRuntimeStatus = 'runtimeStatus',\n}\n\nexport const ConfigurationKey = 'extensions';\nexport const AutoUpdateConfigurationKey = 'extensions.autoUpdate';\nexport const AutoCheckUpdatesConfigurationKey = 'extensions.autoCheckUpdates';\nexport const CloseExtensionDetailsOnViewChangeKey = 'extensions.closeExtensionDetailsOnViewChange';\n\nexport interface IExtensionsConfiguration {\n\tautoUpdate: boolean;\n\tautoCheckUpdates: boolean;\n\tignoreRecommendations: boolean;\n\tcloseExtensionDetailsOnViewChange: boolean;\n}\n\nexport interface IExtensionContainer extends IDisposable {\n\textension: IExtension | null;\n\tupdateWhenCounterExtensionChanges?: boolean;\n\tupdate(): void;\n}\n\nexport class ExtensionContainers extends Disposable {\n\n\tconstructor(\n\t\tprivate readonly containers: IExtensionContainer[],\n\t\t@IExtensionsWorkbenchService extensionsWorkbenchService: IExtensionsWorkbenchService\n\t) {\n\t\tsuper();\n\t\tthis._register(extensionsWorkbenchService.onChange(this.update, this));\n\t}\n\n\tset extension(extension: IExtension) {\n\t\tthis.containers.forEach(c => c.extension = extension);\n\t}\n\n\tprivate update(extension: IExtension | undefined): void {\n\t\tfor (const container of this.containers) {\n\t\t\tif (extension && container.extension) {\n\t\t\t\tif (areSameExtensions(container.extension.identifier, extension.identifier)) {\n\t\t\t\t\tif (container.extension.server && extension.server && container.extension.server !== extension.server) {\n\t\t\t\t\t\tif (container.updateWhenCounterExtensionChanges) {\n\t\t\t\t\t\t\tcontainer.update();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontainer.extension = extension;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcontainer.update();\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport const WORKSPACE_RECOMMENDATIONS_VIEW_ID = 'workbench.views.extensions.workspaceRecommendations';\nexport const OUTDATED_EXTENSIONS_VIEW_ID = 'workbench.views.extensions.searchOutdated';\nexport const TOGGLE_IGNORE_EXTENSION_ACTION_ID = 'workbench.extensions.action.toggleIgnoreExtension';\nexport const SELECT_INSTALL_VSIX_EXTENSION_COMMAND_ID = 'workbench.extensions.action.installVSIX';\nexport const INSTALL_EXTENSION_FROM_VSIX_COMMAND_ID = 'workbench.extensions.command.installFromVSIX';\n\nexport const LIST_WORKSPACE_UNSUPPORTED_EXTENSIONS_COMMAND_ID = 'workbench.extensions.action.listWorkspaceUnsupportedExtensions';\n\n// Context Keys\nexport const HasOutdatedExtensionsContext = new RawContextKey<boolean>('hasOutdatedExtensions', false);\nexport const CONTEXT_HAS_GALLERY = new RawContextKey<boolean>('hasGallery', false);\n\n// Context Menu Groups\nexport const THEME_ACTIONS_GROUP = '_theme_';\nexport const INSTALL_ACTIONS_GROUP = '0_install';\n"]}