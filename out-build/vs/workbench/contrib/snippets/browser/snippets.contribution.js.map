{"version":3,"sources":["vs/workbench/contrib/snippets/browser/snippets.contribution.ts"],"names":[],"mappings":"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","file":"snippets.contribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IJSONSchema, IJSONSchemaMap } from 'vs/base/common/jsonSchema';\nimport * as nls from 'vs/nls';\nimport { registerAction2 } from 'vs/platform/actions/common/actions';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport * as JSONContributionRegistry from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';\nimport { ConfigureSnippetsAction } from 'vs/workbench/contrib/snippets/browser/commands/configureSnippets';\nimport { ApplyFileSnippetAction } from 'vs/workbench/contrib/snippets/browser/commands/fileTemplateSnippets';\nimport { InsertSnippetAction } from 'vs/workbench/contrib/snippets/browser/commands/insertSnippet';\nimport { SurroundWithSnippetEditorAction } from 'vs/workbench/contrib/snippets/browser/commands/surroundWithSnippet';\nimport { SnippetCodeActions } from 'vs/workbench/contrib/snippets/browser/snippetCodeActionProvider';\nimport { ISnippetsService } from 'vs/workbench/contrib/snippets/browser/snippets';\nimport { SnippetsService } from 'vs/workbench/contrib/snippets/browser/snippetsService';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { Extensions, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\n\nimport 'vs/workbench/contrib/snippets/browser/tabCompletion';\nimport { editorConfigurationBaseNode } from 'vs/editor/common/config/editorConfigurationSchema';\n\n// service\nregisterSingleton(ISnippetsService, SnippetsService, InstantiationType.Delayed);\n\n// actions\nregisterAction2(InsertSnippetAction);\nCommandsRegistry.registerCommandAlias('editor.action.showSnippets', 'editor.action.insertSnippet');\nregisterAction2(SurroundWithSnippetEditorAction);\nregisterAction2(ApplyFileSnippetAction);\nregisterAction2(ConfigureSnippetsAction);\n\n// workbench contribs\nconst workbenchContribRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchContribRegistry.registerWorkbenchContribution(SnippetCodeActions, LifecyclePhase.Restored);\n\n// config\nRegistry\n\t.as<IConfigurationRegistry>(Extensions.Configuration)\n\t.registerConfiguration({\n\t\t...editorConfigurationBaseNode,\n\t\t'properties': {\n\t\t\t'editor.snippets.codeActions.enabled': {\n\t\t\t\t'description': nls.localize('editor.snippets.codeActions.enabled', 'Controls if surround-with-snippets or file template snippets show as Code Actions.'),\n\t\t\t\t'type': 'boolean',\n\t\t\t\t'default': true\n\t\t\t}\n\t\t}\n\t});\n\n\n// schema\nconst languageScopeSchemaId = 'vscode://schemas/snippets';\n\nconst snippetSchemaProperties: IJSONSchemaMap = {\n\tprefix: {\n\t\tdescription: nls.localize('snippetSchema.json.prefix', 'The prefix to use when selecting the snippet in intellisense'),\n\t\ttype: ['string', 'array']\n\t},\n\tisFileTemplate: {\n\t\tdescription: nls.localize('snippetSchema.json.isFileTemplate', 'The snippet is meant to populate or replace a whole file'),\n\t\ttype: 'boolean'\n\t},\n\tbody: {\n\t\tmarkdownDescription: nls.localize('snippetSchema.json.body', 'The snippet content. Use `$1`, `${1:defaultText}` to define cursor positions, use `$0` for the final cursor position. Insert variable values with `${varName}` and `${varName:defaultText}`, e.g. `This is file: $TM_FILENAME`.'),\n\t\ttype: ['string', 'array'],\n\t\titems: {\n\t\t\ttype: 'string'\n\t\t}\n\t},\n\tdescription: {\n\t\tdescription: nls.localize('snippetSchema.json.description', 'The snippet description.'),\n\t\ttype: ['string', 'array']\n\t}\n};\n\nconst languageScopeSchema: IJSONSchema = {\n\tid: languageScopeSchemaId,\n\tallowComments: true,\n\tallowTrailingCommas: true,\n\tdefaultSnippets: [{\n\t\tlabel: nls.localize('snippetSchema.json.default', \"Empty snippet\"),\n\t\tbody: { '${1:snippetName}': { 'prefix': '${2:prefix}', 'body': '${3:snippet}', 'description': '${4:description}' } }\n\t}],\n\ttype: 'object',\n\tdescription: nls.localize('snippetSchema.json', 'User snippet configuration'),\n\tadditionalProperties: {\n\t\ttype: 'object',\n\t\trequired: ['body'],\n\t\tproperties: snippetSchemaProperties,\n\t\tadditionalProperties: false\n\t}\n};\n\n\nconst globalSchemaId = 'vscode://schemas/global-snippets';\nconst globalSchema: IJSONSchema = {\n\tid: globalSchemaId,\n\tallowComments: true,\n\tallowTrailingCommas: true,\n\tdefaultSnippets: [{\n\t\tlabel: nls.localize('snippetSchema.json.default', \"Empty snippet\"),\n\t\tbody: { '${1:snippetName}': { 'scope': '${2:scope}', 'prefix': '${3:prefix}', 'body': '${4:snippet}', 'description': '${5:description}' } }\n\t}],\n\ttype: 'object',\n\tdescription: nls.localize('snippetSchema.json', 'User snippet configuration'),\n\tadditionalProperties: {\n\t\ttype: 'object',\n\t\trequired: ['body'],\n\t\tproperties: {\n\t\t\t...snippetSchemaProperties,\n\t\t\tscope: {\n\t\t\t\tdescription: nls.localize('snippetSchema.json.scope', \"A list of language names to which this snippet applies, e.g. 'typescript,javascript'.\"),\n\t\t\t\ttype: 'string'\n\t\t\t}\n\t\t},\n\t\tadditionalProperties: false\n\t}\n};\n\nconst reg = Registry.as<JSONContributionRegistry.IJSONContributionRegistry>(JSONContributionRegistry.Extensions.JSONContribution);\nreg.registerSchema(languageScopeSchemaId, languageScopeSchema);\nreg.registerSchema(globalSchemaId, globalSchema);\n"]}