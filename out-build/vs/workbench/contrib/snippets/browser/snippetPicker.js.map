{"version":3,"sources":["vs/workbench/contrib/snippets/browser/snippetPicker.ts"],"names":[],"mappings":"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","file":"snippetPicker.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { ISnippetsService } from 'vs/workbench/contrib/snippets/browser/snippets';\nimport { Snippet, SnippetSource } from 'vs/workbench/contrib/snippets/browser/snippetsFile';\nimport { IQuickPickItem, IQuickInputService, QuickPickInput } from 'vs/platform/quickinput/common/quickInput';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { ThemeIcon } from 'vs/base/common/themables';\nimport { Event } from 'vs/base/common/event';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\n\nexport async function pickSnippet(accessor: ServicesAccessor, languageIdOrSnippets: string | Snippet[]): Promise<Snippet | undefined> {\n\n\tconst snippetService = accessor.get(ISnippetsService);\n\tconst quickInputService = accessor.get(IQuickInputService);\n\n\tinterface ISnippetPick extends IQuickPickItem {\n\t\tsnippet: Snippet;\n\t}\n\n\tlet snippets: Snippet[];\n\tif (Array.isArray(languageIdOrSnippets)) {\n\t\tsnippets = languageIdOrSnippets;\n\t} else {\n\t\tsnippets = (await snippetService.getSnippets(languageIdOrSnippets, { includeDisabledSnippets: true, includeNoPrefixSnippets: true }));\n\t}\n\n\tsnippets.sort((a, b) => a.snippetSource - b.snippetSource);\n\n\tconst makeSnippetPicks = () => {\n\t\tconst result: QuickPickInput<ISnippetPick>[] = [];\n\t\tlet prevSnippet: Snippet | undefined;\n\t\tfor (const snippet of snippets) {\n\t\t\tconst pick: ISnippetPick = {\n\t\t\t\tlabel: snippet.prefix || snippet.name,\n\t\t\t\tdetail: snippet.description || snippet.body,\n\t\t\t\tsnippet\n\t\t\t};\n\t\t\tif (!prevSnippet || prevSnippet.snippetSource !== snippet.snippetSource || prevSnippet.source !== snippet.source) {\n\t\t\t\tlet label = '';\n\t\t\t\tswitch (snippet.snippetSource) {\n\t\t\t\t\tcase SnippetSource.User:\n\t\t\t\t\t\tlabel = nls.localize('sep.userSnippet', \"User Snippets\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase SnippetSource.Extension:\n\t\t\t\t\t\tlabel = snippet.source;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase SnippetSource.Workspace:\n\t\t\t\t\t\tlabel = nls.localize('sep.workspaceSnippet', \"Workspace Snippets\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tresult.push({ type: 'separator', label });\n\t\t\t}\n\n\t\t\tif (snippet.snippetSource === SnippetSource.Extension) {\n\t\t\t\tconst isEnabled = snippetService.isEnabled(snippet);\n\t\t\t\tif (isEnabled) {\n\t\t\t\t\tpick.buttons = [{\n\t\t\t\t\t\ticonClass: ThemeIcon.asClassName(Codicon.eyeClosed),\n\t\t\t\t\t\ttooltip: nls.localize('disableSnippet', 'Hide from IntelliSense')\n\t\t\t\t\t}];\n\t\t\t\t} else {\n\t\t\t\t\tpick.description = nls.localize('isDisabled', \"(hidden from IntelliSense)\");\n\t\t\t\t\tpick.buttons = [{\n\t\t\t\t\t\ticonClass: ThemeIcon.asClassName(Codicon.eye),\n\t\t\t\t\t\ttooltip: nls.localize('enable.snippet', 'Show in IntelliSense')\n\t\t\t\t\t}];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tresult.push(pick);\n\t\t\tprevSnippet = snippet;\n\t\t}\n\t\treturn result;\n\t};\n\n\tconst picker = quickInputService.createQuickPick<ISnippetPick>();\n\tpicker.placeholder = nls.localize('pick.placeholder', \"Select a snippet\");\n\tpicker.matchOnDetail = true;\n\tpicker.ignoreFocusOut = false;\n\tpicker.keepScrollPosition = true;\n\tpicker.onDidTriggerItemButton(ctx => {\n\t\tconst isEnabled = snippetService.isEnabled(ctx.item.snippet);\n\t\tsnippetService.updateEnablement(ctx.item.snippet, !isEnabled);\n\t\tpicker.items = makeSnippetPicks();\n\t});\n\tpicker.items = makeSnippetPicks();\n\tif (!picker.items.length) {\n\t\tpicker.validationMessage = nls.localize('pick.noSnippetAvailable', \"No snippet available\");\n\t}\n\tpicker.show();\n\n\t// wait for an item to be picked or the picker to become hidden\n\tawait Promise.race([Event.toPromise(picker.onDidAccept), Event.toPromise(picker.onDidHide)]);\n\tconst result = picker.selectedItems[0]?.snippet;\n\tpicker.dispose();\n\treturn result;\n}\n"]}