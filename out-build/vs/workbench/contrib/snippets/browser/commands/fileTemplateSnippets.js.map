{"version":3,"sources":["vs/workbench/contrib/snippets/browser/commands/fileTemplateSnippets.ts"],"names":[],"mappings":"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","file":"fileTemplateSnippets.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { groupBy, isFalsyOrEmpty } from 'vs/base/common/arrays';\nimport { compare } from 'vs/base/common/strings';\nimport { getCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { SnippetController2 } from 'vs/editor/contrib/snippet/browser/snippetController2';\nimport { localize } from 'vs/nls';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { IQuickInputService, IQuickPickItem, IQuickPickSeparator } from 'vs/platform/quickinput/common/quickInput';\nimport { SnippetsAction } from 'vs/workbench/contrib/snippets/browser/commands/abstractSnippetsActions';\nimport { ISnippetsService } from 'vs/workbench/contrib/snippets/browser/snippets';\nimport { Snippet } from 'vs/workbench/contrib/snippets/browser/snippetsFile';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\n\nexport class ApplyFileSnippetAction extends SnippetsAction {\n\n\tstatic readonly Id = 'workbench.action.populateFileFromSnippet';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ApplyFileSnippetAction.Id,\n\t\t\ttitle: {\n\t\t\t\tvalue: localize('label', 'Fill File with Snippet'),\n\t\t\t\toriginal: 'Fill File with Snippet'\n\t\t\t},\n\t\t\tf1: true,\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst snippetService = accessor.get(ISnippetsService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst langService = accessor.get(ILanguageService);\n\n\t\tconst editor = getCodeEditor(editorService.activeTextEditorControl);\n\t\tif (!editor || !editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst snippets = await snippetService.getSnippets(undefined, { fileTemplateSnippets: true, noRecencySort: true, includeNoPrefixSnippets: true });\n\t\tif (snippets.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst selection = await this._pick(quickInputService, langService, snippets);\n\t\tif (!selection) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (editor.hasModel()) {\n\t\t\t// apply snippet edit -> replaces everything\n\t\t\tSnippetController2.get(editor)?.apply([{\n\t\t\t\trange: editor.getModel().getFullModelRange(),\n\t\t\t\ttemplate: selection.snippet.body\n\t\t\t}]);\n\n\t\t\t// set language if possible\n\t\t\teditor.getModel().setLanguage(langService.createById(selection.langId), ApplyFileSnippetAction.Id);\n\n\t\t\teditor.focus();\n\t\t}\n\t}\n\n\tprivate async _pick(quickInputService: IQuickInputService, langService: ILanguageService, snippets: Snippet[]) {\n\n\t\t// spread snippet onto each language it supports\n\t\ttype SnippetAndLanguage = { langId: string; snippet: Snippet };\n\t\tconst all: SnippetAndLanguage[] = [];\n\t\tfor (const snippet of snippets) {\n\t\t\tif (isFalsyOrEmpty(snippet.scopes)) {\n\t\t\t\tall.push({ langId: '', snippet });\n\t\t\t} else {\n\t\t\t\tfor (const langId of snippet.scopes) {\n\t\t\t\t\tall.push({ langId, snippet });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttype SnippetAndLanguagePick = IQuickPickItem & { snippet: SnippetAndLanguage };\n\t\tconst picks: (SnippetAndLanguagePick | IQuickPickSeparator)[] = [];\n\n\t\tconst groups = groupBy(all, (a, b) => compare(a.langId, b.langId));\n\n\t\tfor (const group of groups) {\n\t\t\tlet first = true;\n\t\t\tfor (const item of group) {\n\n\t\t\t\tif (first) {\n\t\t\t\t\tpicks.push({\n\t\t\t\t\t\ttype: 'separator',\n\t\t\t\t\t\tlabel: langService.getLanguageName(item.langId) ?? item.langId\n\t\t\t\t\t});\n\t\t\t\t\tfirst = false;\n\t\t\t\t}\n\n\t\t\t\tpicks.push({\n\t\t\t\t\tsnippet: item,\n\t\t\t\t\tlabel: item.snippet.prefix || item.snippet.name,\n\t\t\t\t\tdetail: item.snippet.description\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tconst pick = await quickInputService.pick(picks, {\n\t\t\tplaceHolder: localize('placeholder', 'Select a snippet'),\n\t\t\tmatchOnDetail: true,\n\t\t});\n\n\t\treturn pick?.snippet;\n\t}\n}\n"]}