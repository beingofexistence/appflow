{"version":3,"sources":["vs/workbench/contrib/snippets/browser/commands/surroundWithSnippet.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAgBzF,KAAK,UAAU,IAAI,CAAoB,eAAqB,EAAc,KAAiB,EAAE,QAAa,EAAO,uBAAgC;QAEvJ,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,GAAG,QAAQ,CAAC;QACxC,KAAK,CAAC,YAAY,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;QAC/C,MAAM,UAAU,GAAG,KAAK,CAAC,uBAAuB,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QAErE,MAAM,WAAW,GAAG,MAAM,eAAe,CAAC,WAAW,CAAC,UAAU,EAAE,EAAE,uBAAuB,EAAE,IAAI,EAAE,uBAAuB,EAAE,CAAC,CAAC;QAC9H,OAAO,WAAW,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IAC7D,CAAC;IARD,oBAQC;IAED,MAAa,IAAgC,SAAQ,8BAAI;iBAExC,YAAO,GAAG;YACzB,EAAE,EAAE,mCAAmC;YACvC,KAAK,EAAE;gBACN,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAO,EAAE,IAA0B,CAAC;gBACpD,QAAQ,EAAE,0BAA0B;aACpC;SACD,CAAC;QAEF;YACC,KAAK,CAAC;gBACL,GAAG,IAAI,CAA4B,OAAO;gBAC1C,YAAY,EAAE,gBAAG,CAAY,GAAG,CAC/B,qCAAiB,CAAC,QAAQ,EAC1B,qCAAiB,CAAC,oBAAoB,CACtC;gBACD,EAAE,EAAE,IAAI;aACR,CAAC,CAAC;QACJ,CAAC;QAED,KAAK,CAAC,gBAAgB,CAAC,QAA0B,EAAE,MAAmB;YACrE,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE;gBACvB,OAAO;aACP;YAED,MAAM,YAAY,GAAG,QAAQ,CAAC,GAAG,CAAC,mBAAG,CAAmB,CAAC;YACzD,MAAM,eAAe,GAAG,QAAQ,CAAC,GAAG,CAAC,eAAI,CAAa,CAAC;YACvD,MAAM,gBAAgB,GAAG,QAAQ,CAAC,GAAG,CAAC,sBAAG,CAAe,CAAC;YAEzD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAoB,eAAe,EAAE,MAAM,CAAC,QAAQ,EAAE,EAAE,MAAM,CAAC,WAAW,EAAE,EAAE,IAAI,CAAC,CAAC;YAC/G,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;gBACrB,OAAO;aACP;YAED,MAAM,OAAO,GAAG,MAAM,YAAY,CAAC,cAAc,CAAC,oBAAI,EAAS,QAAQ,CAAC,CAAC;YACzE,IAAI,CAAC,OAAO,EAAE;gBACb,OAAO;aACP;YAED,IAAI,aAAiC,CAAC;YACtC,IAAI,OAAO,CAAC,cAAc,EAAE;gBAC3B,aAAa,GAAG,MAAM,gBAAgB,CAAC,QAAQ,EAAE,CAAC;aAClD;YAED,MAAM,CAAC,KAAK,EAAE,CAAC;YACf,wBAAG,CAAgB,GAAG,CAAC,MAAM,CAAC,EAAE,MAAM,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,aAAa,EAAE,CAAC,CAAC;YAC/E,eAAe,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;QAC/C,CAAC;;IAhDF,oBAiDC","file":"surroundWithSnippet.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { Position } from 'vs/editor/common/core/position';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { SnippetController2 } from 'vs/editor/contrib/snippet/browser/snippetController2';\nimport { localize } from 'vs/nls';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { SnippetEditorAction } from 'vs/workbench/contrib/snippets/browser/commands/abstractSnippetsActions';\nimport { pickSnippet } from 'vs/workbench/contrib/snippets/browser/snippetPicker';\nimport { Snippet } from 'vs/workbench/contrib/snippets/browser/snippetsFile';\nimport { ISnippetsService } from '../snippets';\n\nexport async function getSurroundableSnippets(snippetsService: ISnippetsService, model: ITextModel, position: Position, includeDisabledSnippets: boolean): Promise<Snippet[]> {\n\n\tconst { lineNumber, column } = position;\n\tmodel.tokenization.tokenizeIfCheap(lineNumber);\n\tconst languageId = model.getLanguageIdAtPosition(lineNumber, column);\n\n\tconst allSnippets = await snippetsService.getSnippets(languageId, { includeNoPrefixSnippets: true, includeDisabledSnippets });\n\treturn allSnippets.filter(snippet => snippet.usesSelection);\n}\n\nexport class SurroundWithSnippetEditorAction extends SnippetEditorAction {\n\n\tstatic readonly options = {\n\t\tid: 'editor.action.surroundWithSnippet',\n\t\ttitle: {\n\t\t\tvalue: localize('label', 'Surround With Snippet...'),\n\t\t\toriginal: 'Surround With Snippet...'\n\t\t}\n\t};\n\n\tconstructor() {\n\t\tsuper({\n\t\t\t...SurroundWithSnippetEditorAction.options,\n\t\t\tprecondition: ContextKeyExpr.and(\n\t\t\t\tEditorContextKeys.writable,\n\t\t\t\tEditorContextKeys.hasNonEmptySelection\n\t\t\t),\n\t\t\tf1: true,\n\t\t});\n\t}\n\n\tasync runEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor) {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst instaService = accessor.get(IInstantiationService);\n\t\tconst snippetsService = accessor.get(ISnippetsService);\n\t\tconst clipboardService = accessor.get(IClipboardService);\n\n\t\tconst snippets = await getSurroundableSnippets(snippetsService, editor.getModel(), editor.getPosition(), true);\n\t\tif (!snippets.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst snippet = await instaService.invokeFunction(pickSnippet, snippets);\n\t\tif (!snippet) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet clipboardText: string | undefined;\n\t\tif (snippet.needsClipboard) {\n\t\t\tclipboardText = await clipboardService.readText();\n\t\t}\n\n\t\teditor.focus();\n\t\tSnippetController2.get(editor)?.insert(snippet.codeSnippet, { clipboardText });\n\t\tsnippetsService.updateUsageTimestamp(snippet);\n\t}\n}\n"]}