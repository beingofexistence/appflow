{"version":3,"sources":["vs/workbench/contrib/snippets/browser/commands/insertSnippet.ts"],"names":[],"mappings":"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","file":"insertSnippet.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { ServicesAccessor } from 'vs/editor/browser/editorExtensions';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { SnippetController2 } from 'vs/editor/contrib/snippet/browser/snippetController2';\nimport * as nls from 'vs/nls';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { SnippetEditorAction } from 'vs/workbench/contrib/snippets/browser/commands/abstractSnippetsActions';\nimport { pickSnippet } from 'vs/workbench/contrib/snippets/browser/snippetPicker';\nimport { ISnippetsService } from 'vs/workbench/contrib/snippets/browser/snippets';\nimport { Snippet, SnippetSource } from 'vs/workbench/contrib/snippets/browser/snippetsFile';\n\nclass Args {\n\n\tstatic fromUser(arg: any): Args {\n\t\tif (!arg || typeof arg !== 'object') {\n\t\t\treturn Args._empty;\n\t\t}\n\t\tlet { snippet, name, langId } = arg;\n\t\tif (typeof snippet !== 'string') {\n\t\t\tsnippet = undefined;\n\t\t}\n\t\tif (typeof name !== 'string') {\n\t\t\tname = undefined;\n\t\t}\n\t\tif (typeof langId !== 'string') {\n\t\t\tlangId = undefined;\n\t\t}\n\t\treturn new Args(snippet, name, langId);\n\t}\n\n\tprivate static readonly _empty = new Args(undefined, undefined, undefined);\n\n\tprivate constructor(\n\t\tpublic readonly snippet: string | undefined,\n\t\tpublic readonly name: string | undefined,\n\t\tpublic readonly langId: string | undefined\n\t) { }\n}\n\nexport class InsertSnippetAction extends SnippetEditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.insertSnippet',\n\t\t\ttitle: {\n\t\t\t\tvalue: nls.localize('snippet.suggestions.label', \"Insert Snippet\"),\n\t\t\t\toriginal: 'Insert Snippet'\n\t\t\t},\n\t\t\tf1: true,\n\t\t\tprecondition: EditorContextKeys.writable,\n\t\t\tdescription: {\n\t\t\t\tdescription: `Insert Snippet`,\n\t\t\t\targs: [{\n\t\t\t\t\tname: 'args',\n\t\t\t\t\tschema: {\n\t\t\t\t\t\t'type': 'object',\n\t\t\t\t\t\t'properties': {\n\t\t\t\t\t\t\t'snippet': {\n\t\t\t\t\t\t\t\t'type': 'string'\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t'langId': {\n\t\t\t\t\t\t\t\t'type': 'string',\n\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t'name': {\n\t\t\t\t\t\t\t\t'type': 'string'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t}\n\t\t});\n\t}\n\n\tasync runEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor, arg: any) {\n\n\t\tconst languageService = accessor.get(ILanguageService);\n\t\tconst snippetService = accessor.get(ISnippetsService);\n\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\tconst instaService = accessor.get(IInstantiationService);\n\n\t\tconst snippet = await new Promise<Snippet | undefined>((resolve, reject) => {\n\n\t\t\tconst { lineNumber, column } = editor.getPosition();\n\t\t\tconst { snippet, name, langId } = Args.fromUser(arg);\n\n\t\t\tif (snippet) {\n\t\t\t\treturn resolve(new Snippet(\n\t\t\t\t\tfalse,\n\t\t\t\t\t[],\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\t'',\n\t\t\t\t\tsnippet,\n\t\t\t\t\t'',\n\t\t\t\t\tSnippetSource.User,\n\t\t\t\t\t`random/${Math.random()}`\n\t\t\t\t));\n\t\t\t}\n\n\t\t\tlet languageId: string;\n\t\t\tif (langId) {\n\t\t\t\tif (!languageService.isRegisteredLanguageId(langId)) {\n\t\t\t\t\treturn resolve(undefined);\n\t\t\t\t}\n\t\t\t\tlanguageId = langId;\n\t\t\t} else {\n\t\t\t\teditor.getModel().tokenization.tokenizeIfCheap(lineNumber);\n\t\t\t\tlanguageId = editor.getModel().getLanguageIdAtPosition(lineNumber, column);\n\n\t\t\t\t// validate the `languageId` to ensure this is a user\n\t\t\t\t// facing language with a name and the chance to have\n\t\t\t\t// snippets, else fall back to the outer language\n\t\t\t\tif (!languageService.getLanguageName(languageId)) {\n\t\t\t\t\tlanguageId = editor.getModel().getLanguageId();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (name) {\n\t\t\t\t// take selected snippet\n\t\t\t\tsnippetService.getSnippets(languageId, { includeNoPrefixSnippets: true })\n\t\t\t\t\t.then(snippets => snippets.find(snippet => snippet.name === name))\n\t\t\t\t\t.then(resolve, reject);\n\n\t\t\t} else {\n\t\t\t\t// let user pick a snippet\n\t\t\t\tresolve(instaService.invokeFunction(pickSnippet, languageId));\n\t\t\t}\n\t\t});\n\n\t\tif (!snippet) {\n\t\t\treturn;\n\t\t}\n\t\tlet clipboardText: string | undefined;\n\t\tif (snippet.needsClipboard) {\n\t\t\tclipboardText = await clipboardService.readText();\n\t\t}\n\t\teditor.focus();\n\t\tSnippetController2.get(editor)?.insert(snippet.codeSnippet, { clipboardText });\n\t\tsnippetService.updateUsageTimestamp(snippet);\n\t}\n}\n"]}