{"version":3,"sources":["vs/workbench/contrib/snippets/browser/snippetCompletionProvider.ts"],"names":[],"mappings":"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","file":"snippetCompletionProvider.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MarkdownString } from 'vs/base/common/htmlContent';\nimport { compare, compareSubstring, firstNonWhitespaceIndex } from 'vs/base/common/strings';\nimport { Position } from 'vs/editor/common/core/position';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { CompletionItem, CompletionItemKind, CompletionItemProvider, CompletionList, CompletionItemInsertTextRule, CompletionContext, CompletionTriggerKind, CompletionItemLabel, Command } from 'vs/editor/common/languages';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { SnippetParser } from 'vs/editor/contrib/snippet/browser/snippetParser';\nimport { localize } from 'vs/nls';\nimport { ISnippetsService } from 'vs/workbench/contrib/snippets/browser/snippets';\nimport { Snippet, SnippetSource } from 'vs/workbench/contrib/snippets/browser/snippetsFile';\nimport { isPatternInWord } from 'vs/base/common/filters';\nimport { StopWatch } from 'vs/base/common/stopwatch';\nimport { ILanguageConfigurationService } from 'vs/editor/common/languages/languageConfigurationRegistry';\nimport { getWordAtText } from 'vs/editor/common/core/wordHelper';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\n\n\nconst markSnippetAsUsed = '_snippet.markAsUsed';\n\nCommandsRegistry.registerCommand(markSnippetAsUsed, (accessor, ...args) => {\n\tconst snippetsService = accessor.get(ISnippetsService);\n\tconst [first] = args;\n\tif (first instanceof Snippet) {\n\t\tsnippetsService.updateUsageTimestamp(first);\n\t}\n});\n\nexport class SnippetCompletion implements CompletionItem {\n\n\tlabel: CompletionItemLabel;\n\tdetail: string;\n\tinsertText: string;\n\tdocumentation?: MarkdownString;\n\trange: IRange | { insert: IRange; replace: IRange };\n\tsortText: string;\n\tkind: CompletionItemKind;\n\tinsertTextRules: CompletionItemInsertTextRule;\n\textensionId?: ExtensionIdentifier;\n\tcommand?: Command;\n\n\tconstructor(\n\t\treadonly snippet: Snippet,\n\t\trange: IRange | { insert: IRange; replace: IRange },\n\t) {\n\t\tthis.label = { label: snippet.prefix, description: snippet.name };\n\t\tthis.detail = localize('detail.snippet', \"{0} ({1})\", snippet.description || snippet.name, snippet.source);\n\t\tthis.insertText = snippet.codeSnippet;\n\t\tthis.extensionId = snippet.extensionId;\n\t\tthis.range = range;\n\t\tthis.sortText = `${snippet.snippetSource === SnippetSource.Extension ? 'z' : 'a'}-${snippet.prefix}`;\n\t\tthis.kind = CompletionItemKind.Snippet;\n\t\tthis.insertTextRules = CompletionItemInsertTextRule.InsertAsSnippet;\n\t\tthis.command = { id: markSnippetAsUsed, title: '', arguments: [snippet] };\n\t}\n\n\tresolve(): this {\n\t\tthis.documentation = new MarkdownString().appendCodeblock('', SnippetParser.asInsertText(this.snippet.codeSnippet));\n\t\treturn this;\n\t}\n\n\tstatic compareByLabel(a: SnippetCompletion, b: SnippetCompletion): number {\n\t\treturn compare(a.label.label, b.label.label);\n\t}\n}\n\nexport class SnippetCompletionProvider implements CompletionItemProvider {\n\n\treadonly _debugDisplayName = 'snippetCompletions';\n\n\tconstructor(\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@ISnippetsService private readonly _snippets: ISnippetsService,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService\n\t) {\n\t\t//\n\t}\n\n\tasync provideCompletionItems(model: ITextModel, position: Position, context: CompletionContext): Promise<CompletionList> {\n\n\t\tconst sw = new StopWatch();\n\t\tconst languageId = this._getLanguageIdAtPosition(model, position);\n\t\tconst languageConfig = this._languageConfigurationService.getLanguageConfiguration(languageId);\n\t\tconst snippets = new Set(await this._snippets.getSnippets(languageId));\n\n\t\tconst lineContentLow = model.getLineContent(position.lineNumber).toLowerCase();\n\t\tconst wordUntil = model.getWordUntilPosition(position).word.toLowerCase();\n\n\t\tconst suggestions: SnippetCompletion[] = [];\n\t\tconst columnOffset = position.column - 1;\n\n\t\tconst triggerCharacterLow = context.triggerCharacter?.toLowerCase() ?? '';\n\n\n\t\tsnippet: for (const snippet of snippets) {\n\n\t\t\tif (context.triggerKind === CompletionTriggerKind.TriggerCharacter && !snippet.prefixLow.startsWith(triggerCharacterLow)) {\n\t\t\t\t// strict -> when having trigger characters they must prefix-match\n\t\t\t\tcontinue snippet;\n\t\t\t}\n\n\t\t\tconst word = getWordAtText(1, languageConfig.getWordDefinition(), snippet.prefixLow, 0);\n\n\t\t\tif (wordUntil && word && !isPatternInWord(wordUntil, 0, wordUntil.length, snippet.prefixLow, 0, snippet.prefixLow.length)) {\n\t\t\t\t// when at a word the snippet prefix must match\n\t\t\t\tcontinue snippet;\n\t\t\t}\n\n\t\t\t// don't eat into leading whitespace unless the snippet prefix starts with whitespace\n\t\t\tconst minPos = firstNonWhitespaceIndex(snippet.prefixLow) === 0\n\t\t\t\t? Math.max(0, model.getLineFirstNonWhitespaceColumn(position.lineNumber) - 1)\n\t\t\t\t: 0;\n\n\t\t\tcolumn: for (let pos = Math.max(minPos, columnOffset - snippet.prefixLow.length); pos < lineContentLow.length; pos++) {\n\n\t\t\t\tif (!isPatternInWord(lineContentLow, pos, columnOffset, snippet.prefixLow, 0, snippet.prefixLow.length)) {\n\t\t\t\t\tcontinue column;\n\t\t\t\t}\n\n\t\t\t\tconst prefixRestLen = snippet.prefixLow.length - (columnOffset - pos);\n\t\t\t\tconst endsWithPrefixRest = compareSubstring(lineContentLow, snippet.prefixLow, columnOffset, columnOffset + prefixRestLen, columnOffset - pos);\n\t\t\t\tconst startPosition = position.with(undefined, pos + 1);\n\n\t\t\t\tif (wordUntil && position.equals(startPosition)) {\n\t\t\t\t\t// at word-end but no overlap\n\t\t\t\t\tcontinue snippet;\n\t\t\t\t}\n\n\t\t\t\tlet endColumn = endsWithPrefixRest === 0 ? position.column + prefixRestLen : position.column;\n\n\t\t\t\t// First check if there is anything to the right of the cursor\n\t\t\t\tif (columnOffset < lineContentLow.length) {\n\t\t\t\t\tconst autoClosingPairs = languageConfig.getAutoClosingPairs();\n\t\t\t\t\tconst standardAutoClosingPairConditionals = autoClosingPairs.autoClosingPairsCloseSingleChar.get(lineContentLow[columnOffset]);\n\t\t\t\t\t// If the character to the right of the cursor is a closing character of an autoclosing pair\n\t\t\t\t\tif (standardAutoClosingPairConditionals?.some(p =>\n\t\t\t\t\t\t// and the start position is the opening character of an autoclosing pair\n\t\t\t\t\t\tp.open === lineContentLow[startPosition.column - 1] &&\n\t\t\t\t\t\t// and the snippet prefix contains the opening and closing pair at its edges\n\t\t\t\t\t\tsnippet.prefix.startsWith(p.open) &&\n\t\t\t\t\t\tsnippet.prefix[snippet.prefix.length - 1] === p.close)\n\t\t\t\t\t) {\n\t\t\t\t\t\t// Eat the character that was likely inserted because of auto-closing pairs\n\t\t\t\t\t\tendColumn++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst replace = Range.fromPositions(startPosition, { lineNumber: position.lineNumber, column: endColumn });\n\t\t\t\tconst insert = replace.setEndPosition(position.lineNumber, position.column);\n\n\t\t\t\tsuggestions.push(new SnippetCompletion(snippet, { replace, insert }));\n\t\t\t\tsnippets.delete(snippet);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\n\t\t// add remaing snippets when the current prefix ends in whitespace or when line is empty\n\t\t// and when not having a trigger character\n\t\tif (!triggerCharacterLow) {\n\t\t\tconst endsInWhitespace = /\\s/.test(lineContentLow[position.column - 2]);\n\t\t\tif (endsInWhitespace || !lineContentLow /*empty line*/) {\n\t\t\t\tfor (const snippet of snippets) {\n\t\t\t\t\tconst insert = Range.fromPositions(position);\n\t\t\t\t\tconst replace = lineContentLow.indexOf(snippet.prefixLow, columnOffset) === columnOffset ? insert.setEndPosition(position.lineNumber, position.column + snippet.prefixLow.length) : insert;\n\t\t\t\t\tsuggestions.push(new SnippetCompletion(snippet, { replace, insert }));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\t// dismbiguate suggestions with same labels\n\t\tsuggestions.sort(SnippetCompletion.compareByLabel);\n\t\tfor (let i = 0; i < suggestions.length; i++) {\n\t\t\tconst item = suggestions[i];\n\t\t\tlet to = i + 1;\n\t\t\tfor (; to < suggestions.length && item.label === suggestions[to].label; to++) {\n\t\t\t\tsuggestions[to].label.label = localize('snippetSuggest.longLabel', \"{0}, {1}\", suggestions[to].label.label, suggestions[to].snippet.name);\n\t\t\t}\n\t\t\tif (to > i + 1) {\n\t\t\t\tsuggestions[i].label.label = localize('snippetSuggest.longLabel', \"{0}, {1}\", suggestions[i].label.label, suggestions[i].snippet.name);\n\t\t\t\ti = to;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tsuggestions,\n\t\t\tduration: sw.elapsed()\n\t\t};\n\t}\n\n\tresolveCompletionItem(item: CompletionItem): CompletionItem {\n\t\treturn (item instanceof SnippetCompletion) ? item.resolve() : item;\n\t}\n\n\tprivate _getLanguageIdAtPosition(model: ITextModel, position: Position): string {\n\t\t// validate the `languageId` to ensure this is a user\n\t\t// facing language with a name and the chance to have\n\t\t// snippets, else fall back to the outer language\n\t\tmodel.tokenization.tokenizeIfCheap(position.lineNumber);\n\t\tlet languageId = model.getLanguageIdAtPosition(position.lineNumber, position.column);\n\t\tif (!this._languageService.getLanguageName(languageId)) {\n\t\t\tlanguageId = model.getLanguageId();\n\t\t}\n\t\treturn languageId;\n\t}\n}\n"]}