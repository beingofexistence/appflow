{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/snippets/test/browser/snippetFile.test.ts"],"names":[],"mappings":"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","file":"snippetFile.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { SnippetFile, Snippet, SnippetSource } from 'vs/workbench/contrib/snippets/browser/snippetsFile';\nimport { URI } from 'vs/base/common/uri';\nimport { SnippetParser } from 'vs/editor/contrib/snippet/browser/snippetParser';\nimport { generateUuid } from 'vs/base/common/uuid';\n\nsuite('Snippets', function () {\n\n\tclass TestSnippetFile extends SnippetFile {\n\t\tconstructor(filepath: URI, snippets: Snippet[]) {\n\t\t\tsuper(SnippetSource.Extension, filepath, undefined, undefined, undefined!, undefined!);\n\t\t\tthis.data.push(...snippets);\n\t\t}\n\t}\n\n\ttest('SnippetFile#select', () => {\n\t\tlet file = new TestSnippetFile(URI.file('somepath/foo.code-snippets'), []);\n\t\tlet bucket: Snippet[] = [];\n\t\tfile.select('', bucket);\n\t\tassert.strictEqual(bucket.length, 0);\n\n\t\tfile = new TestSnippetFile(URI.file('somepath/foo.code-snippets'), [\n\t\t\tnew Snippet(false, ['foo'], 'FooSnippet1', 'foo', '', 'snippet', 'test', SnippetSource.User, generateUuid()),\n\t\t\tnew Snippet(false, ['foo'], 'FooSnippet2', 'foo', '', 'snippet', 'test', SnippetSource.User, generateUuid()),\n\t\t\tnew Snippet(false, ['bar'], 'BarSnippet1', 'foo', '', 'snippet', 'test', SnippetSource.User, generateUuid()),\n\t\t\tnew Snippet(false, ['bar.comment'], 'BarSnippet2', 'foo', '', 'snippet', 'test', SnippetSource.User, generateUuid()),\n\t\t\tnew Snippet(false, ['bar.strings'], 'BarSnippet2', 'foo', '', 'snippet', 'test', SnippetSource.User, generateUuid()),\n\t\t\tnew Snippet(false, ['bazz', 'bazz'], 'BazzSnippet1', 'foo', '', 'snippet', 'test', SnippetSource.User, generateUuid()),\n\t\t]);\n\n\t\tbucket = [];\n\t\tfile.select('foo', bucket);\n\t\tassert.strictEqual(bucket.length, 2);\n\n\t\tbucket = [];\n\t\tfile.select('fo', bucket);\n\t\tassert.strictEqual(bucket.length, 0);\n\n\t\tbucket = [];\n\t\tfile.select('bar', bucket);\n\t\tassert.strictEqual(bucket.length, 1);\n\n\t\tbucket = [];\n\t\tfile.select('bar.comment', bucket);\n\t\tassert.strictEqual(bucket.length, 2);\n\n\t\tbucket = [];\n\t\tfile.select('bazz', bucket);\n\t\tassert.strictEqual(bucket.length, 1);\n\t});\n\n\ttest('SnippetFile#select - any scope', function () {\n\n\t\tconst file = new TestSnippetFile(URI.file('somepath/foo.code-snippets'), [\n\t\t\tnew Snippet(false, [], 'AnySnippet1', 'foo', '', 'snippet', 'test', SnippetSource.User, generateUuid()),\n\t\t\tnew Snippet(false, ['foo'], 'FooSnippet1', 'foo', '', 'snippet', 'test', SnippetSource.User, generateUuid()),\n\t\t]);\n\n\t\tconst bucket: Snippet[] = [];\n\t\tfile.select('foo', bucket);\n\t\tassert.strictEqual(bucket.length, 2);\n\n\t});\n\n\ttest('Snippet#needsClipboard', function () {\n\n\t\tfunction assertNeedsClipboard(body: string, expected: boolean): void {\n\t\t\tconst snippet = new Snippet(false, ['foo'], 'FooSnippet1', 'foo', '', body, 'test', SnippetSource.User, generateUuid());\n\t\t\tassert.strictEqual(snippet.needsClipboard, expected);\n\n\t\t\tassert.strictEqual(SnippetParser.guessNeedsClipboard(body), expected);\n\t\t}\n\n\t\tassertNeedsClipboard('foo$CLIPBOARD', true);\n\t\tassertNeedsClipboard('${CLIPBOARD}', true);\n\t\tassertNeedsClipboard('foo${CLIPBOARD}bar', true);\n\t\tassertNeedsClipboard('foo$clipboard', false);\n\t\tassertNeedsClipboard('foo${clipboard}', false);\n\t\tassertNeedsClipboard('baba', false);\n\t});\n\n\ttest('Snippet#isTrivial', function () {\n\n\t\tfunction assertIsTrivial(body: string, expected: boolean): void {\n\t\t\tconst snippet = new Snippet(false, ['foo'], 'FooSnippet1', 'foo', '', body, 'test', SnippetSource.User, generateUuid());\n\t\t\tassert.strictEqual(snippet.isTrivial, expected);\n\t\t}\n\n\t\tassertIsTrivial('foo', true);\n\t\tassertIsTrivial('foo$0', true);\n\t\tassertIsTrivial('foo$0bar', false);\n\t\tassertIsTrivial('foo$1', false);\n\t\tassertIsTrivial('foo$1$0', false);\n\t\tassertIsTrivial('${1:foo}', false);\n\t});\n\n});\n"]}