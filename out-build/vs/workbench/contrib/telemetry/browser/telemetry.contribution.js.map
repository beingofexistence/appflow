{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/telemetry/browser/telemetry.contribution.ts"],"names":[],"mappings":"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","file":"telemetry.contribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContributionsRegistry, IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { LifecyclePhase, ILifecycleService, StartupKind } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { IWorkbenchThemeService } from 'vs/workbench/services/themes/common/workbenchThemeService';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { language } from 'vs/base/common/platform';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport ErrorTelemetry from 'vs/platform/telemetry/browser/errorTelemetry';\nimport { configurationTelemetry, TelemetryTrustedValue } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ITextFileService, ITextFileSaveEvent, ITextFileResolveEvent } from 'vs/workbench/services/textfile/common/textfiles';\nimport { extname, basename, isEqual, isEqualOrParent } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { Schemas } from 'vs/base/common/network';\nimport { getMimeTypes } from 'vs/editor/common/services/languagesAssociations';\nimport { hash } from 'vs/base/common/hash';\nimport { IPaneCompositePartService } from 'vs/workbench/services/panecomposite/browser/panecomposite';\nimport { ViewContainerLocation } from 'vs/workbench/common/views';\nimport { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\n\ntype TelemetryData = {\n\tmimeType: TelemetryTrustedValue<string>;\n\text: string;\n\tpath: number;\n\treason?: number;\n\tallowlistedjson?: string;\n};\n\ntype FileTelemetryDataFragment = {\n\tmimeType: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The language type of the file (for example XML).' };\n\text: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The file extension of the file (for example xml).' };\n\tpath: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The path of the file as a hash.' };\n\treason?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'The reason why a file is read or written. Allows to e.g. distinguish auto save from normal save.' };\n\tallowlistedjson?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The name of the file but only if it matches some well known file names such as package.json or tsconfig.json.' };\n};\n\nexport class TelemetryContribution extends Disposable implements IWorkbenchContribution {\n\n\tprivate static ALLOWLIST_JSON = ['package.json', 'package-lock.json', 'tsconfig.json', 'jsconfig.json', 'bower.json', '.eslintrc.json', 'tslint.json', 'composer.json'];\n\tprivate static ALLOWLIST_WORKSPACE_JSON = ['settings.json', 'extensions.json', 'tasks.json', 'launch.json'];\n\n\tconstructor(\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IKeybindingService keybindingsService: IKeybindingService,\n\t\t@IWorkbenchThemeService themeService: IWorkbenchThemeService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IPaneCompositePartService paneCompositeService: IPaneCompositePartService,\n\t\t@ITextFileService textFileService: ITextFileService\n\t) {\n\t\tsuper();\n\n\t\tconst { filesToOpenOrCreate, filesToDiff, filesToMerge } = environmentService;\n\t\tconst activeViewlet = paneCompositeService.getActivePaneComposite(ViewContainerLocation.Sidebar);\n\n\t\ttype WindowSizeFragment = {\n\t\t\tinnerHeight: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'The height of the current window.' };\n\t\t\tinnerWidth: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'The width of the current window.' };\n\t\t\touterHeight: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'The height of the current window with all decoration removed.' };\n\t\t\touterWidth: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'The width of the current window with all decoration removed.' };\n\t\t\towner: 'bpasero';\n\t\t\tcomment: 'The size of the window.';\n\t\t};\n\n\t\ttype WorkspaceLoadClassification = {\n\t\t\towner: 'bpasero';\n\t\t\temptyWorkbench: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'Whether a folder or workspace is opened or not.' };\n\t\t\twindowSize: WindowSizeFragment;\n\t\t\t'workbench.filesToOpenOrCreate': { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'Number of files that should open or be created.' };\n\t\t\t'workbench.filesToDiff': { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'Number of files that should be compared.' };\n\t\t\t'workbench.filesToMerge': { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'Number of files that should be merged.' };\n\t\t\tcustomKeybindingsCount: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'Number of custom keybindings' };\n\t\t\ttheme: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The current theme of the window.' };\n\t\t\tlanguage: { classification: 'SystemMetaData'; purpose: 'BusinessInsight'; comment: 'The display language of the window.' };\n\t\t\tpinnedViewlets: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The identifiers of views that are pinned.' };\n\t\t\trestoredViewlet?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The identifier of the view that is restored.' };\n\t\t\trestoredEditors: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'The number of editors that restored.' };\n\t\t\tstartupKind: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'How the window was opened, e.g via reload or not.' };\n\t\t\tcomment: 'Metadata around the workspace that is being loaded into a window.';\n\t\t};\n\n\t\ttype WorkspaceLoadEvent = {\n\t\t\twindowSize: { innerHeight: number; innerWidth: number; outerHeight: number; outerWidth: number };\n\t\t\temptyWorkbench: boolean;\n\t\t\t'workbench.filesToOpenOrCreate': number;\n\t\t\t'workbench.filesToDiff': number;\n\t\t\t'workbench.filesToMerge': number;\n\t\t\tcustomKeybindingsCount: number;\n\t\t\ttheme: string;\n\t\t\tlanguage: string;\n\t\t\tpinnedViewlets: string[];\n\t\t\trestoredViewlet?: string;\n\t\t\trestoredEditors: number;\n\t\t\tstartupKind: StartupKind;\n\t\t};\n\n\t\ttelemetryService.publicLog2<WorkspaceLoadEvent, WorkspaceLoadClassification>('workspaceLoad', {\n\t\t\twindowSize: { innerHeight: window.innerHeight, innerWidth: window.innerWidth, outerHeight: window.outerHeight, outerWidth: window.outerWidth },\n\t\t\temptyWorkbench: contextService.getWorkbenchState() === WorkbenchState.EMPTY,\n\t\t\t'workbench.filesToOpenOrCreate': filesToOpenOrCreate && filesToOpenOrCreate.length || 0,\n\t\t\t'workbench.filesToDiff': filesToDiff && filesToDiff.length || 0,\n\t\t\t'workbench.filesToMerge': filesToMerge && filesToMerge.length || 0,\n\t\t\tcustomKeybindingsCount: keybindingsService.customKeybindingsCount(),\n\t\t\ttheme: themeService.getColorTheme().id,\n\t\t\tlanguage,\n\t\t\tpinnedViewlets: paneCompositeService.getPinnedPaneCompositeIds(ViewContainerLocation.Sidebar),\n\t\t\trestoredViewlet: activeViewlet ? activeViewlet.getId() : undefined,\n\t\t\trestoredEditors: editorService.visibleEditors.length,\n\t\t\tstartupKind: lifecycleService.startupKind\n\t\t});\n\n\t\t// Error Telemetry\n\t\tthis._register(new ErrorTelemetry(telemetryService));\n\n\t\t// Configuration Telemetry\n\t\tthis._register(configurationTelemetry(telemetryService, configurationService));\n\n\t\t//  Files Telemetry\n\t\tthis._register(textFileService.files.onDidResolve(e => this.onTextFileModelResolved(e)));\n\t\tthis._register(textFileService.files.onDidSave(e => this.onTextFileModelSaved(e)));\n\n\t\t// Lifecycle\n\t\tthis._register(lifecycleService.onDidShutdown(() => this.dispose()));\n\t}\n\n\tprivate onTextFileModelResolved(e: ITextFileResolveEvent): void {\n\t\tconst settingsType = this.getTypeIfSettings(e.model.resource);\n\t\tif (settingsType) {\n\t\t\ttype SettingsReadClassification = {\n\t\t\t\towner: 'bpasero';\n\t\t\t\tsettingsType: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The type of the settings file that was read.' };\n\t\t\t\tcomment: 'Track when a settings file was read, for example from an editor.';\n\t\t\t};\n\n\t\t\tthis.telemetryService.publicLog2<{ settingsType: string }, SettingsReadClassification>('settingsRead', { settingsType }); // Do not log read to user settings.json and .vscode folder as a fileGet event as it ruins our JSON usage data\n\t\t} else {\n\t\t\ttype FileGetClassification = {\n\t\t\t\towner: 'bpasero';\n\t\t\t\tcomment: 'Track when a file was read, for example from an editor.';\n\t\t\t} & FileTelemetryDataFragment;\n\n\t\t\tthis.telemetryService.publicLog2<TelemetryData, FileGetClassification>('fileGet', this.getTelemetryData(e.model.resource, e.reason));\n\t\t}\n\t}\n\n\tprivate onTextFileModelSaved(e: ITextFileSaveEvent): void {\n\t\tconst settingsType = this.getTypeIfSettings(e.model.resource);\n\t\tif (settingsType) {\n\t\t\ttype SettingsWrittenClassification = {\n\t\t\t\towner: 'bpasero';\n\t\t\t\tsettingsType: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The type of the settings file that was written to.' };\n\t\t\t\tcomment: 'Track when a settings file was written to, for example from an editor.';\n\t\t\t};\n\t\t\tthis.telemetryService.publicLog2<{ settingsType: string }, SettingsWrittenClassification>('settingsWritten', { settingsType }); // Do not log write to user settings.json and .vscode folder as a filePUT event as it ruins our JSON usage data\n\t\t} else {\n\t\t\ttype FilePutClassfication = {\n\t\t\t\towner: 'bpasero';\n\t\t\t\tcomment: 'Track when a file was written to, for example from an editor.';\n\t\t\t} & FileTelemetryDataFragment;\n\t\t\tthis.telemetryService.publicLog2<TelemetryData, FilePutClassfication>('filePUT', this.getTelemetryData(e.model.resource, e.reason));\n\t\t}\n\t}\n\n\tprivate getTypeIfSettings(resource: URI): string {\n\t\tif (extname(resource) !== '.json') {\n\t\t\treturn '';\n\t\t}\n\n\t\t// Check for global settings file\n\t\tif (isEqual(resource, this.userDataProfileService.currentProfile.settingsResource)) {\n\t\t\treturn 'global-settings';\n\t\t}\n\n\t\t// Check for keybindings file\n\t\tif (isEqual(resource, this.userDataProfileService.currentProfile.keybindingsResource)) {\n\t\t\treturn 'keybindings';\n\t\t}\n\n\t\t// Check for snippets\n\t\tif (isEqualOrParent(resource, this.userDataProfileService.currentProfile.snippetsHome)) {\n\t\t\treturn 'snippets';\n\t\t}\n\n\t\t// Check for workspace settings file\n\t\tconst folders = this.contextService.getWorkspace().folders;\n\t\tfor (const folder of folders) {\n\t\t\tif (isEqualOrParent(resource, folder.toResource('.vscode'))) {\n\t\t\t\tconst filename = basename(resource);\n\t\t\t\tif (TelemetryContribution.ALLOWLIST_WORKSPACE_JSON.indexOf(filename) > -1) {\n\t\t\t\t\treturn `.vscode/${filename}`;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn '';\n\t}\n\n\tprivate getTelemetryData(resource: URI, reason?: number): TelemetryData {\n\t\tlet ext = extname(resource);\n\t\t// Remove query parameters from the resource extension\n\t\tconst queryStringLocation = ext.indexOf('?');\n\t\text = queryStringLocation !== -1 ? ext.substr(0, queryStringLocation) : ext;\n\t\tconst fileName = basename(resource);\n\t\tconst path = resource.scheme === Schemas.file ? resource.fsPath : resource.path;\n\t\tconst telemetryData = {\n\t\t\tmimeType: new TelemetryTrustedValue(getMimeTypes(resource).join(', ')),\n\t\t\text,\n\t\t\tpath: hash(path),\n\t\t\treason,\n\t\t\tallowlistedjson: undefined as string | undefined\n\t\t};\n\n\t\tif (ext === '.json' && TelemetryContribution.ALLOWLIST_JSON.indexOf(fileName) > -1) {\n\t\t\ttelemetryData['allowlistedjson'] = fileName;\n\t\t}\n\n\t\treturn telemetryData;\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(TelemetryContribution, LifecyclePhase.Restored);\n"]}