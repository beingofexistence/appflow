{"version":3,"sources":["vs/workbench/contrib/userDataSync/electron-sandbox/userDataSync.contribution.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;IAkBhG,IAAM,gCAAgC,GAAtC,MAAM,gCAAgC;QAErC,YAC2B,uBAA6B,EAChC,oBAA0B;YAEjD,oBAAoB,CAAC,eAAe,CAAC,kBAAkB,EAAE,IAAI,sBAAI,CAA2B,uBAAuB,CAAC,CAAC,CAAC;QACvH,CAAC;KACD,CAAA;IARK,gCAAgC;QAGnC,WAAA,mBAAI,CAAA;QACJ,WAAA,eAAI,CAAA;OAJD,gCAAgC,CAQrC;IAED,MAAM,iBAAiB,GAAG,cAAG,CAAM,EAAE,CAAkC,0BAAmB,CAAC,SAAS,CAAC,CAAC;IACtG,iBAAiB,CAAC,6BAA6B,CAAC,gCAAgC,kCAA0B,CAAC;IAE3G,IAAA,aAAG,EAAa,MAAM,qBAAsB,SAAQ,aAAG;QACtD;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,kDAAkD;gBACtD,KAAK,EAAE,EAAE,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAoB,EAAE,IAA2B,CAAC,EAAE,QAAQ,EAAE,2BAA2B,EAAE;gBACpH,QAAQ,EAAE,EAAE,KAAK,EAAE,mBAAI,EAAQ,QAAQ,EAAE,eAAe,EAAE;gBAC1D,IAAI,EAAE;oBACL,EAAE,EAAE,aAAG,CAAI,cAAc;oBACzB,IAAI,EAAE,mBAAI,CAAe,WAAW,gDAA0B;iBAC9D;aACD,CAAC,CAAC;QACJ,CAAC;QACD,KAAK,CAAC,GAAG,CAAC,QAA0B;YACnC,MAAM,QAAQ,GAAG,QAAQ,CAAC,GAAG,CAAC,iBAAG,CAAiB,CAAC,gBAAgB,CAAC;YACpE,MAAM,iBAAiB,GAAG,QAAQ,CAAC,GAAG,CAAC,aAAI,CAAe,CAAC;YAC3D,MAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,WAAG,CAAU,CAAC;YAC/C,MAAM,mBAAmB,GAAG,QAAQ,CAAC,GAAG,CAAC,kBAAG,CAAkB,CAAC;YAC/D,IAAI,MAAM,WAAW,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE;gBACvC,MAAM,UAAU,GAAG,MAAM,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;gBACvD,MAAM,IAAI,GAAG,UAAU,CAAC,QAAQ,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC;gBACxG,OAAO,iBAAiB,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,iBAAO,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;aACtF;iBAAM;gBACN,mBAAmB,CAAC,IAAI,CAAC,IAAA,cAAQ,EAAC,CAAY,EAAE,IAAqC,CAAC,CAAC,CAAC;aACxF;QACF,CAAC;KACD,CAAC,CAAC","file":"userDataSync.contribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions, IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IUserDataSyncUtilService, SyncStatus } from 'vs/platform/userDataSync/common/userDataSync';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { ISharedProcessService } from 'vs/platform/ipc/electron-sandbox/services';\nimport { UserDataSycnUtilServiceChannel } from 'vs/platform/userDataSync/common/userDataSyncIpc';\nimport { registerAction2, Action2, MenuId } from 'vs/platform/actions/common/actions';\nimport { localize } from 'vs/nls';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { INativeHostService } from 'vs/platform/native/common/native';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { CONTEXT_SYNC_STATE, SYNC_TITLE } from 'vs/workbench/services/userDataSync/common/userDataSync';\nimport { Schemas } from 'vs/base/common/network';\n\nclass UserDataSyncServicesContribution implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IUserDataSyncUtilService userDataSyncUtilService: IUserDataSyncUtilService,\n\t\t@ISharedProcessService sharedProcessService: ISharedProcessService,\n\t) {\n\t\tsharedProcessService.registerChannel('userDataSyncUtil', new UserDataSycnUtilServiceChannel(userDataSyncUtilService));\n\t}\n}\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(UserDataSyncServicesContribution, LifecyclePhase.Starting);\n\nregisterAction2(class OpenSyncBackupsFolder extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.userData.actions.openSyncBackupsFolder',\n\t\t\ttitle: { value: localize('Open Backup folder', \"Open Local Backups Folder\"), original: 'Open Local Backups Folder' },\n\t\t\tcategory: { value: SYNC_TITLE, original: `Settings Sync` },\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: CONTEXT_SYNC_STATE.notEqualsTo(SyncStatus.Uninitialized),\n\t\t\t}\n\t\t});\n\t}\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst syncHome = accessor.get(IEnvironmentService).userDataSyncHome;\n\t\tconst nativeHostService = accessor.get(INativeHostService);\n\t\tconst fileService = accessor.get(IFileService);\n\t\tconst notificationService = accessor.get(INotificationService);\n\t\tif (await fileService.exists(syncHome)) {\n\t\t\tconst folderStat = await fileService.resolve(syncHome);\n\t\t\tconst item = folderStat.children && folderStat.children[0] ? folderStat.children[0].resource : syncHome;\n\t\t\treturn nativeHostService.showItemInFolder(item.with({ scheme: Schemas.file }).fsPath);\n\t\t} else {\n\t\t\tnotificationService.info(localize('no backups', \"Local backups folder does not exist\"));\n\t\t}\n\t}\n});\n"]}