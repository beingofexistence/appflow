{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/userDataSync/browser/userDataSyncTrigger.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAiBzF,IAAM,IAAI,GAAV,MAAM,IAAoB,SAAQ,eAAG;QAE3C,YACiB,aAAkB,EACS,CAA4B,EACxD,YAAiB,EACN,uBAA6B,EACzC,WAAgB;YAE9B,KAAK,EAAE,CAAC;YALmC,MAAC,GAAD,CAAC,CAA2B;YAMvE,MAAM,KAAK,GAAG,aAAK,CAAC,MAAM,CACzB,aAAK,CAAC,GAAG,CACR,aAAK,CAAC,GAAG,CAAC,aAAa,CAAC,uBAAuB,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAA4B,aAAa,CAAC,YAAY,CAAC,CAAC,EACrH,aAAK,CAAC,GAAG,CAAC,aAAK,CAAC,MAAM,CAAC,YAAY,CAAC,kCAAkC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,iBAAI,IAAU,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAC1H,EAAE,MAAM,CAAC,EAAE,CAAC,MAAM,KAAK,SAAS,CAAC,CAAC;YACpC,IAAI,aAAE,EAAK;gBACV,IAAI,CAAC,CAAC,CAAS,aAAK,CAAC,QAAQ,CAC5B,aAAK,CAAC,GAAG,CACR,aAAK,CAAC,GAAG,CAAC,WAAW,CAAC,gBAAgB,EAAE,GAAG,EAAE,CAAC,aAAa,CAAC,EAC5D,aAAK,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,EAAE,CAAC,MAAO,CAAC,CACnC,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAC9D,OAAO,CAAC,EAAE,CAAC,uBAAuB,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;aACzE;iBAAM;gBACN,IAAI,CAAC,CAAC,CAAS,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC,uBAAuB,CAAC,WAAW,CAAC,CAAC,MAAO,CAAC,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;aAC7F;QACF,CAAC;QAEO,CAAC,CAA4B,WAAoC;YACxE,IAAI,CAAC,WAAW,EAAE;gBACjB,OAAO,SAAS,CAAC;aACjB;YACD,IAAI,WAAW,YAAY,6BAAI,EAAkB;gBAChD,OAAO,gBAAgB,CAAC;aACxB;YACD,IAAI,WAAW,YAAY,6BAAI,EAAoB;gBAClD,OAAO,mBAAmB,CAAC;aAC3B;YACD,MAAM,QAAQ,GAAG,WAAW,CAAC,QAAQ,CAAC;YACtC,IAAI,IAAA,eAAG,EAAK,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAuB,cAAc,CAAC,gBAAgB,CAAC,EAAE;gBACpF,OAAO,gBAAgB,CAAC;aACxB;YACD,IAAI,IAAA,eAAG,EAAK,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAuB,cAAc,CAAC,mBAAmB,CAAC,EAAE;gBACvF,OAAO,mBAAmB,CAAC;aAC3B;YACD,OAAO,SAAS,CAAC;QAClB,CAAC;KACD,CAAA;IA9CY,oBAAI;mBAAJ,IAAI;QAGd,WAAA,mBAAG,CAAA;QACH,WAAA,qBAAG,CAAA;QACH,WAAA,WAAG,CAAA;QACH,WAAA,mBAAI,CAAA;QACJ,WAAA,UAAG,CAAA;OAPO,IAAI,CA8ChB","file":"userDataSyncTrigger.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { isWeb } from 'vs/base/common/platform';\nimport { isEqual } from 'vs/base/common/resources';\nimport { IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { IUserDataAutoSyncService } from 'vs/platform/userDataSync/common/userDataSync';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { IViewsService } from 'vs/workbench/common/views';\nimport { VIEWLET_ID } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { KeybindingsEditorInput } from 'vs/workbench/services/preferences/browser/keybindingsEditorInput';\nimport { SettingsEditor2Input } from 'vs/workbench/services/preferences/common/preferencesEditorInput';\n\nexport class UserDataSyncTrigger extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IViewsService viewsService: IViewsService,\n\t\t@IUserDataAutoSyncService userDataAutoSyncService: IUserDataAutoSyncService,\n\t\t@IHostService hostService: IHostService,\n\t) {\n\t\tsuper();\n\t\tconst event = Event.filter(\n\t\t\tEvent.any<string | undefined>(\n\t\t\t\tEvent.map(editorService.onDidActiveEditorChange, () => this.getUserDataEditorInputSource(editorService.activeEditor)),\n\t\t\t\tEvent.map(Event.filter(viewsService.onDidChangeViewContainerVisibility, e => e.id === VIEWLET_ID && e.visible), e => e.id)\n\t\t\t), source => source !== undefined);\n\t\tif (isWeb) {\n\t\t\tthis._register(Event.debounce<string, string[]>(\n\t\t\t\tEvent.any<string>(\n\t\t\t\t\tEvent.map(hostService.onDidChangeFocus, () => 'windowFocus'),\n\t\t\t\t\tEvent.map(event, source => source!),\n\t\t\t\t), (last, source) => last ? [...last, source] : [source], 1000)\n\t\t\t\t(sources => userDataAutoSyncService.triggerSync(sources, true, false)));\n\t\t} else {\n\t\t\tthis._register(event(source => userDataAutoSyncService.triggerSync([source!], true, false)));\n\t\t}\n\t}\n\n\tprivate getUserDataEditorInputSource(editorInput: EditorInput | undefined): string | undefined {\n\t\tif (!editorInput) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (editorInput instanceof SettingsEditor2Input) {\n\t\t\treturn 'settingsEditor';\n\t\t}\n\t\tif (editorInput instanceof KeybindingsEditorInput) {\n\t\t\treturn 'keybindingsEditor';\n\t\t}\n\t\tconst resource = editorInput.resource;\n\t\tif (isEqual(resource, this.userDataProfilesService.defaultProfile.settingsResource)) {\n\t\t\treturn 'settingsEditor';\n\t\t}\n\t\tif (isEqual(resource, this.userDataProfilesService.defaultProfile.keybindingsResource)) {\n\t\t\treturn 'keybindingsEditor';\n\t\t}\n\t\treturn undefined;\n\t}\n}\n"]}