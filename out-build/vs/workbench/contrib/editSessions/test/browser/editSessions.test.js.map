{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/editSessions/test/browser/editSessions.test.ts"],"names":[],"mappings":"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","file":"editSessions.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { Schemas } from 'vs/base/common/network';\nimport { InMemoryFileSystemProvider } from 'vs/platform/files/common/inMemoryFilesystemProvider';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { EditSessionsContribution } from 'vs/workbench/contrib/editSessions/browser/editSessions.contribution';\nimport { ProgressService } from 'vs/workbench/services/progress/browser/progressService';\nimport { IProgressService } from 'vs/platform/progress/common/progress';\nimport { ISCMService } from 'vs/workbench/contrib/scm/common/scm';\nimport { SCMService } from 'vs/workbench/contrib/scm/common/scmService';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { mock } from 'vs/base/test/common/mock';\nimport * as sinon from 'sinon';\nimport * as assert from 'assert';\nimport { ChangeType, FileType, IEditSessionsLogService, IEditSessionsStorageService } from 'vs/workbench/contrib/editSessions/common/editSessions';\nimport { URI } from 'vs/base/common/uri';\nimport { joinPath } from 'vs/base/common/resources';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { TestNotificationService } from 'vs/platform/notification/test/common/testNotificationService';\nimport { TestEnvironmentService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { MockContextKeyService } from 'vs/platform/keybinding/test/common/mockKeybindingService';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { Event } from 'vs/base/common/event';\nimport { IViewDescriptorService } from 'vs/workbench/common/views';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IDialogService, IPrompt } from 'vs/platform/dialogs/common/dialogs';\nimport { IEditorService, ISaveAllEditorsOptions } from 'vs/workbench/services/editor/common/editorService';\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { NullTelemetryService } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IEditSessionIdentityService } from 'vs/platform/workspace/common/editSessions';\nimport { IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { TestStorageService } from 'vs/workbench/test/common/workbenchTestServices';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { UriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentityService';\nimport { IWorkspaceIdentityService, WorkspaceIdentityService } from 'vs/workbench/services/workspaces/common/workspaceIdentityService';\n\nconst folderName = 'test-folder';\nconst folderUri = URI.file(`/${folderName}`);\n\nsuite('Edit session sync', () => {\n\tlet instantiationService: TestInstantiationService;\n\tlet editSessionsContribution: EditSessionsContribution;\n\tlet fileService: FileService;\n\tlet sandbox: sinon.SinonSandbox;\n\n\tconst disposables = new DisposableStore();\n\n\tsuiteSetup(() => {\n\t\tsandbox = sinon.createSandbox();\n\n\t\tinstantiationService = new TestInstantiationService();\n\n\t\t// Set up filesystem\n\t\tconst logService = new NullLogService();\n\t\tfileService = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tfileService.registerProvider(Schemas.file, fileSystemProvider);\n\n\t\t// Stub out all services\n\t\tinstantiationService.stub(IEditSessionsLogService, logService);\n\t\tinstantiationService.stub(IFileService, fileService);\n\t\tinstantiationService.stub(ILifecycleService, new class extends mock<ILifecycleService>() {\n\t\t\toverride onWillShutdown = Event.None;\n\t\t});\n\t\tinstantiationService.stub(INotificationService, new TestNotificationService());\n\t\tinstantiationService.stub(IProductService, <Partial<IProductService>>{ 'editSessions.store': { url: 'https://test.com', canSwitch: true, authenticationProviders: {} } });\n\t\tinstantiationService.stub(IStorageService, new TestStorageService());\n\t\tinstantiationService.stub(IUriIdentityService, new UriIdentityService(fileService));\n\t\tinstantiationService.stub(IEditSessionsStorageService, new class extends mock<IEditSessionsStorageService>() {\n\t\t\toverride onDidSignIn = Event.None;\n\t\t\toverride onDidSignOut = Event.None;\n\t\t});\n\t\tinstantiationService.stub(IExtensionService, new class extends mock<IExtensionService>() {\n\t\t\toverride onDidChangeExtensions = Event.None;\n\t\t});\n\t\tinstantiationService.stub(IProgressService, ProgressService);\n\t\tinstantiationService.stub(ISCMService, SCMService);\n\t\tinstantiationService.stub(IEnvironmentService, TestEnvironmentService);\n\t\tinstantiationService.stub(ITelemetryService, NullTelemetryService);\n\t\tinstantiationService.stub(IDialogService, new class extends mock<IDialogService>() {\n\t\t\toverride async prompt(prompt: IPrompt<any>) {\n\t\t\t\tconst result = prompt.buttons?.[0].run({ checkboxChecked: false });\n\t\t\t\treturn { result };\n\t\t\t}\n\t\t\toverride async confirm() {\n\t\t\t\treturn { confirmed: false };\n\t\t\t}\n\t\t});\n\t\tinstantiationService.stub(IRemoteAgentService, new class extends mock<IRemoteAgentService>() {\n\t\t\toverride async getEnvironment() {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t});\n\t\tinstantiationService.stub(IConfigurationService, new TestConfigurationService({ workbench: { experimental: { editSessions: { enabled: true } } } }));\n\t\tinstantiationService.stub(IWorkspaceContextService, new class extends mock<IWorkspaceContextService>() {\n\t\t\toverride getWorkspace() {\n\t\t\t\treturn {\n\t\t\t\t\tid: 'workspace-id',\n\t\t\t\t\tfolders: [{\n\t\t\t\t\t\turi: folderUri,\n\t\t\t\t\t\tname: folderName,\n\t\t\t\t\t\tindex: 0,\n\t\t\t\t\t\ttoResource: (relativePath: string) => joinPath(folderUri, relativePath)\n\t\t\t\t\t}]\n\t\t\t\t};\n\t\t\t}\n\t\t\toverride getWorkbenchState() {\n\t\t\t\treturn WorkbenchState.FOLDER;\n\t\t\t}\n\t\t});\n\n\t\t// Stub repositories\n\t\tinstantiationService.stub(ISCMService, '_repositories', new Map());\n\t\tinstantiationService.stub(IContextKeyService, new MockContextKeyService());\n\t\tinstantiationService.stub(IThemeService, new class extends mock<IThemeService>() {\n\t\t\toverride onDidColorThemeChange = Event.None;\n\t\t\toverride onDidFileIconThemeChange = Event.None;\n\t\t});\n\t\tinstantiationService.stub(IViewDescriptorService, {\n\t\t\tonDidChangeLocation: Event.None\n\t\t});\n\t\tinstantiationService.stub(ITextModelService, new class extends mock<ITextModelService>() {\n\t\t\toverride registerTextModelContentProvider = () => ({ dispose: () => { } });\n\t\t});\n\t\tinstantiationService.stub(IEditorService, new class extends mock<IEditorService>() {\n\t\t\toverride saveAll = async (_options: ISaveAllEditorsOptions) => { return { success: true, editors: [] }; };\n\t\t});\n\t\tinstantiationService.stub(IEditSessionIdentityService, new class extends mock<IEditSessionIdentityService>() {\n\t\t\toverride async getEditSessionIdentifier() {\n\t\t\t\treturn 'test-identity';\n\t\t\t}\n\t\t});\n\t\tinstantiationService.set(IWorkspaceIdentityService, instantiationService.createInstance(WorkspaceIdentityService));\n\t\tinstantiationService.stub(IUserDataProfilesService, new class extends mock<IUserDataProfilesService>() {\n\t\t\toverride defaultProfile = {\n\t\t\t\tid: 'default',\n\t\t\t\tname: 'Default',\n\t\t\t\tisDefault: true,\n\t\t\t\tlocation: URI.file('location'),\n\t\t\t\tglobalStorageHome: URI.file('globalStorageHome'),\n\t\t\t\tsettingsResource: URI.file('settingsResource'),\n\t\t\t\tkeybindingsResource: URI.file('keybindingsResource'),\n\t\t\t\ttasksResource: URI.file('tasksResource'),\n\t\t\t\tsnippetsHome: URI.file('snippetsHome'),\n\t\t\t\textensionsResource: URI.file('extensionsResource'),\n\t\t\t\tcacheHome: URI.file('cacheHome'),\n\t\t\t};\n\t\t});\n\n\t\teditSessionsContribution = instantiationService.createInstance(EditSessionsContribution);\n\t});\n\n\tteardown(() => {\n\t\tsinon.restore();\n\t\tdisposables.clear();\n\t});\n\n\ttest('Can apply edit session', async function () {\n\t\tconst fileUri = joinPath(folderUri, 'dir1', 'README.md');\n\t\tconst fileContents = '# readme';\n\t\tconst editSession = {\n\t\t\tversion: 1,\n\t\t\tfolders: [\n\t\t\t\t{\n\t\t\t\t\tname: folderName,\n\t\t\t\t\tworkingChanges: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\trelativeFilePath: 'dir1/README.md',\n\t\t\t\t\t\t\tfileType: FileType.File,\n\t\t\t\t\t\t\tcontents: fileContents,\n\t\t\t\t\t\t\ttype: ChangeType.Addition\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\n\t\t// Stub sync service to return edit session data\n\t\tconst readStub = sandbox.stub().returns({ content: JSON.stringify(editSession), ref: '0' });\n\t\tinstantiationService.stub(IEditSessionsStorageService, 'read', readStub);\n\n\t\t// Create root folder\n\t\tawait fileService.createFolder(folderUri);\n\n\t\t// Resume edit session\n\t\tawait editSessionsContribution.resumeEditSession();\n\n\t\t// Verify edit session was correctly applied\n\t\tassert.equal((await fileService.readFile(fileUri)).value.toString(), fileContents);\n\t});\n\n\ttest('Edit session not stored if there are no edits', async function () {\n\t\tconst writeStub = sandbox.stub();\n\t\tinstantiationService.stub(IEditSessionsStorageService, 'write', writeStub);\n\n\t\t// Create root folder\n\t\tawait fileService.createFolder(folderUri);\n\n\t\tawait editSessionsContribution.storeEditSession(true, new CancellationTokenSource().token);\n\n\t\t// Verify that we did not attempt to write the edit session\n\t\tassert.equal(writeStub.called, false);\n\t});\n});\n"]}