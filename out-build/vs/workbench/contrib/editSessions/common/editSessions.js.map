{"version":3,"sources":["vs/workbench/contrib/editSessions/common/editSessions.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAenF,QAAA,IAAI,GAA2C;QAC3D,QAAQ,EAAE,eAAe;QACzB,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAe,EAAE,IAAe,CAAC;KACjD,CAAC;IAIW,QAAA,IAAI,GAA0B,IAAA,mBAAG,EAA0C,6BAA6B,CAAC,CAAC;IAuB1G,QAAA,IAAI,GAAsB,IAAA,mBAAG,EAAsC,yBAAyB,CAAC,CAAC;IAG3G,IAAY,UAGX;IAHD,WAAY,UAAU;QACrB,mDAAY,CAAA;QACZ,mDAAY,CAAA;IACb,CAAC,EAHW,UAAU,0BAAV,UAAU,QAGrB;IAED,IAAY,QAEX;IAFD,WAAY,QAAQ;QACnB,uCAAQ,CAAA;IACT,CAAC,EAFW,QAAQ,wBAAR,QAAQ,QAEnB;IAyBY,QAAA,IAAI,GAAuB,CAAC,CAAC;IAS7B,QAAA,IAAI,GAA0B,sBAAsB,CAAC;IACrD,QAAA,IAAI,GAAsB,IAAI,gBAAG,CAAoB,YAAI,EAAyB,KAAK,CAAC,CAAC;IAEzF,QAAA,IAAI,GAAwB,qBAAqB,CAAC;IAClD,QAAA,IAAI,GAAoB,IAAI,gBAAG,CAAoB,YAAI,EAAuB,KAAK,CAAC,CAAC;IAErF,QAAA,IAAI,GAAyB,6BAA6B,CAAC;IAC3D,QAAA,IAAI,GAAyB,mCAAmC,CAAC;IACjE,QAAA,IAAI,GAA2B,eAAe,CAAC;IAC/C,QAAA,IAAI,GAAkB,IAAA,cAAQ,EAAC,CAAe,EAAE,IAAe,CAAC,CAAC;IAEjE,QAAA,IAAI,GAAsB,IAAA,kBAAG,EAAU,yBAAyB,EAAE,cAAG,CAAK,aAAa,EAAE,IAAA,cAAQ,EAAC,CAAqB,EAAE,IAAsC,CAAC,CAAC,CAAC;IAElK,QAAA,IAAI,GAAsB,IAAI,gBAAG,CAAoB,sBAAsB,EAAE,KAAK,CAAC,CAAC;IAEpF,QAAA,IAAI,GAAmB,sBAAsB,CAAC;IAE3D,SAAgB,IAAI,CAAyB,OAAe,EAAE,OAAe;QAC5E,QAAQ,OAAO,EAAE;YAChB,KAAK,CAAC;gBACL,OAAO,YAAG,CAAM,UAAU,CAAC,OAAO,CAAC,CAAC;YACrC,KAAK,CAAC;gBACL,OAAO,IAAA,YAAG,EAAU,OAAO,CAAC,CAAC;YAC9B;gBACC,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;SACvE;IACF,CAAC;IATD,oBASC;IAED,SAAgB,IAAI,CAAgB,aAAqB;QACxD,MAAM,IAAI,GAAG,IAAI,UAAG,EAAS,CAAC;QAC9B,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QAC3B,OAAO,IAAI,CAAC,MAAM,EAAE,CAAC;IACtB,CAAC;IAJD,oBAIC;IAEY,QAAA,IAAI,GAAgB,cAAc,CAAC","file":"editSessions.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { decodeBase64, VSBuffer } from 'vs/base/common/buffer';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { localize } from 'vs/nls';\nimport { ILocalizedString } from 'vs/platform/action/common/action';\nimport { RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { registerIcon } from 'vs/platform/theme/common/iconRegistry';\nimport { IResourceRefHandle } from 'vs/platform/userDataSync/common/userDataSync';\nimport { Event } from 'vs/base/common/event';\nimport { StringSHA1 } from 'vs/base/common/hash';\nimport { EditSessionsStoreClient } from 'vs/workbench/contrib/editSessions/common/editSessionsStorageClient';\n\nexport const EDIT_SESSION_SYNC_CATEGORY: ILocalizedString = {\n\toriginal: 'Cloud Changes',\n\tvalue: localize('cloud changes', 'Cloud Changes')\n};\n\nexport type SyncResource = 'editSessions' | 'workspaceState';\n\nexport const IEditSessionsStorageService = createDecorator<IEditSessionsStorageService>('IEditSessionsStorageService');\nexport interface IEditSessionsStorageService {\n\t_serviceBrand: undefined;\n\n\treadonly SIZE_LIMIT: number;\n\n\treadonly isSignedIn: boolean;\n\treadonly onDidSignIn: Event<void>;\n\treadonly onDidSignOut: Event<void>;\n\n\tstoreClient: EditSessionsStoreClient | undefined;\n\n\tlastReadResources: Map<SyncResource, { ref: string; content: string }>;\n\tlastWrittenResources: Map<SyncResource, { ref: string; content: string }>;\n\n\tinitialize(reason: 'read' | 'write', silent?: boolean): Promise<boolean>;\n\tread(resource: SyncResource, ref: string | undefined): Promise<{ ref: string; content: string } | undefined>;\n\twrite(resource: SyncResource, content: string | EditSession): Promise<string>;\n\tdelete(resource: SyncResource, ref: string | null): Promise<void>;\n\tlist(resource: SyncResource): Promise<IResourceRefHandle[]>;\n\tgetMachineById(machineId: string): Promise<string | undefined>;\n}\n\nexport const IEditSessionsLogService = createDecorator<IEditSessionsLogService>('IEditSessionsLogService');\nexport interface IEditSessionsLogService extends ILogService { }\n\nexport enum ChangeType {\n\tAddition = 1,\n\tDeletion = 2,\n}\n\nexport enum FileType {\n\tFile = 1,\n}\n\ninterface Addition {\n\trelativeFilePath: string;\n\tfileType: FileType.File;\n\tcontents: string;\n\ttype: ChangeType.Addition;\n}\n\ninterface Deletion {\n\trelativeFilePath: string;\n\tfileType: FileType.File;\n\tcontents: undefined;\n\ttype: ChangeType.Deletion;\n}\n\nexport type Change = Addition | Deletion;\n\nexport interface Folder {\n\tname: string;\n\tcanonicalIdentity: string | undefined;\n\tworkingChanges: Change[];\n\tabsoluteUri: string | undefined;\n}\n\nexport const EditSessionSchemaVersion = 3;\n\nexport interface EditSession {\n\tversion: number;\n\tworkspaceStateId?: string;\n\tmachine?: string;\n\tfolders: Folder[];\n}\n\nexport const EDIT_SESSIONS_SIGNED_IN_KEY = 'editSessionsSignedIn';\nexport const EDIT_SESSIONS_SIGNED_IN = new RawContextKey<boolean>(EDIT_SESSIONS_SIGNED_IN_KEY, false);\n\nexport const EDIT_SESSIONS_PENDING_KEY = 'editSessionsPending';\nexport const EDIT_SESSIONS_PENDING = new RawContextKey<boolean>(EDIT_SESSIONS_PENDING_KEY, false);\n\nexport const EDIT_SESSIONS_CONTAINER_ID = 'workbench.view.editSessions';\nexport const EDIT_SESSIONS_DATA_VIEW_ID = 'workbench.views.editSessions.data';\nexport const EDIT_SESSIONS_ORIGINAL_TITLE = 'Cloud Changes';\nexport const EDIT_SESSIONS_TITLE = localize('cloud changes', 'Cloud Changes');\n\nexport const EDIT_SESSIONS_VIEW_ICON = registerIcon('edit-sessions-view-icon', Codicon.cloudDownload, localize('editSessionViewIcon', 'View icon of the cloud changes view.'));\n\nexport const EDIT_SESSIONS_SHOW_VIEW = new RawContextKey<boolean>('editSessionsShowView', false);\n\nexport const EDIT_SESSIONS_SCHEME = 'vscode-edit-sessions';\n\nexport function decodeEditSessionFileContent(version: number, content: string): VSBuffer {\n\tswitch (version) {\n\t\tcase 1:\n\t\t\treturn VSBuffer.fromString(content);\n\t\tcase 2:\n\t\t\treturn decodeBase64(content);\n\t\tdefault:\n\t\t\tthrow new Error('Upgrade to a newer version to decode this content.');\n\t}\n}\n\nexport function hashedEditSessionId(editSessionId: string) {\n\tconst sha1 = new StringSHA1();\n\tsha1.update(editSessionId);\n\treturn sha1.digest();\n}\n\nexport const editSessionsLogId = 'editSessions';\n"]}