{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/editSessions/common/workspaceStateSync.ts"],"names":[],"mappings":"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","file":"workspaceStateSync.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { parse, stringify } from 'vs/base/common/marshalling';\nimport { URI } from 'vs/base/common/uri';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IStorageEntry, IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { IUserDataProfile } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { AbstractSynchroniser, IAcceptResult, IMergeResult, IResourcePreview, ISyncResourcePreview } from 'vs/platform/userDataSync/common/abstractSynchronizer';\nimport { IRemoteUserData, IResourceRefHandle, IUserDataSyncLocalStoreService, IUserDataSyncConfiguration, IUserDataSyncEnablementService, IUserDataSyncLogService, IUserDataSyncStoreService, IUserDataSynchroniser, IWorkspaceState, SyncResource } from 'vs/platform/userDataSync/common/userDataSync';\nimport { EditSession, IEditSessionsStorageService } from 'vs/workbench/contrib/editSessions/common/editSessions';\nimport { IWorkspaceIdentityService } from 'vs/workbench/services/workspaces/common/workspaceIdentityService';\n\n\nclass NullBackupStoreService implements IUserDataSyncLocalStoreService {\n\t_serviceBrand: undefined;\n\tasync writeResource(): Promise<void> {\n\t\treturn;\n\t}\n\tasync getAllResourceRefs(): Promise<IResourceRefHandle[]> {\n\t\treturn [];\n\t}\n\tasync resolveResourceContent(): Promise<string | null> {\n\t\treturn null;\n\t}\n\n}\n\nclass NullEnablementService implements IUserDataSyncEnablementService {\n\t_serviceBrand: any;\n\n\tprivate _onDidChangeEnablement = new Emitter<boolean>();\n\treadonly onDidChangeEnablement: Event<boolean> = this._onDidChangeEnablement.event;\n\n\tprivate _onDidChangeResourceEnablement = new Emitter<[SyncResource, boolean]>();\n\treadonly onDidChangeResourceEnablement: Event<[SyncResource, boolean]> = this._onDidChangeResourceEnablement.event;\n\n\tisEnabled(): boolean { return true; }\n\tcanToggleEnablement(): boolean { return true; }\n\tsetEnablement(_enabled: boolean): void { }\n\tisResourceEnabled(_resource: SyncResource): boolean { return true; }\n\tsetResourceEnablement(_resource: SyncResource, _enabled: boolean): void { }\n\tgetResourceSyncStateVersion(_resource: SyncResource): string | undefined { return undefined; }\n\n}\n\nexport class WorkspaceStateSynchroniser extends AbstractSynchroniser implements IUserDataSynchroniser {\n\tprotected override version: number = 1;\n\n\tconstructor(\n\t\tprofile: IUserDataProfile,\n\t\tcollection: string | undefined,\n\t\tuserDataSyncStoreService: IUserDataSyncStoreService,\n\t\tlogService: IUserDataSyncLogService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@IWorkspaceIdentityService private readonly workspaceIdentityService: IWorkspaceIdentityService,\n\t\t@IEditSessionsStorageService private readonly editSessionsStorageService: IEditSessionsStorageService,\n\t) {\n\t\tconst userDataSyncLocalStoreService = new NullBackupStoreService();\n\t\tconst userDataSyncEnablementService = new NullEnablementService();\n\t\tsuper({ syncResource: SyncResource.WorkspaceState, profile }, collection, fileService, environmentService, storageService, userDataSyncStoreService, userDataSyncLocalStoreService, userDataSyncEnablementService, telemetryService, logService, configurationService, uriIdentityService);\n\t}\n\n\toverride async sync(): Promise<void> {\n\t\tconst cancellationTokenSource = new CancellationTokenSource();\n\t\tconst folders = await this.workspaceIdentityService.getWorkspaceStateFolders(cancellationTokenSource.token);\n\t\tif (!folders.length) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ensure we have latest state by sending out onWillSaveState event\n\t\tawait this.storageService.flush();\n\n\t\tconst keys = this.storageService.keys(StorageScope.WORKSPACE, StorageTarget.USER);\n\t\tif (!keys.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst contributedData: IStringDictionary<string> = {};\n\t\tkeys.forEach((key) => {\n\t\t\tconst data = this.storageService.get(key, StorageScope.WORKSPACE);\n\t\t\tif (data) {\n\t\t\t\tcontributedData[key] = data;\n\t\t\t}\n\t\t});\n\n\t\tconst content: IWorkspaceState = { folders, storage: contributedData, version: this.version };\n\t\tawait this.editSessionsStorageService.write('workspaceState', stringify(content));\n\t}\n\n\toverride async apply(): Promise<ISyncResourcePreview | null> {\n\t\tconst payload = this.editSessionsStorageService.lastReadResources.get('editSessions')?.content;\n\t\tconst workspaceStateId = payload ? (JSON.parse(payload) as EditSession).workspaceStateId : undefined;\n\n\t\tconst resource = await this.editSessionsStorageService.read('workspaceState', workspaceStateId);\n\t\tif (!resource) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst remoteWorkspaceState: IWorkspaceState = parse(resource.content);\n\t\tif (!remoteWorkspaceState) {\n\t\t\tthis.logService.info('Skipping initializing workspace state because remote workspace state does not exist.');\n\t\t\treturn null;\n\t\t}\n\n\t\t// Evaluate whether storage is applicable for current workspace\n\t\tconst cancellationTokenSource = new CancellationTokenSource();\n\t\tconst replaceUris = await this.workspaceIdentityService.matches(remoteWorkspaceState.folders, cancellationTokenSource.token);\n\t\tif (!replaceUris) {\n\t\t\tthis.logService.info('Skipping initializing workspace state because remote workspace state does not match current workspace.');\n\t\t\treturn null;\n\t\t}\n\n\t\tconst storage: IStringDictionary<any> = {};\n\t\tfor (const key of Object.keys(remoteWorkspaceState.storage)) {\n\t\t\tstorage[key] = remoteWorkspaceState.storage[key];\n\t\t}\n\n\t\tif (Object.keys(storage).length) {\n\t\t\t// Initialize storage with remote storage\n\t\t\tconst storageEntries: Array<IStorageEntry> = [];\n\t\t\tfor (const key of Object.keys(storage)) {\n\t\t\t\t// Deserialize the stored state\n\t\t\t\ttry {\n\t\t\t\t\tconst value = parse(storage[key]);\n\t\t\t\t\t// Run URI conversion on the stored state\n\t\t\t\t\treplaceUris(value);\n\t\t\t\t\tstorageEntries.push({ key, value, scope: StorageScope.WORKSPACE, target: StorageTarget.USER });\n\t\t\t\t} catch {\n\t\t\t\t\tstorageEntries.push({ key, value: storage[key], scope: StorageScope.WORKSPACE, target: StorageTarget.USER });\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.storageService.storeAll(storageEntries, true);\n\t\t}\n\n\t\tthis.editSessionsStorageService.delete('workspaceState', resource.ref);\n\t\treturn null;\n\t}\n\n\t// TODO@joyceerhl implement AbstractSynchronizer in full\n\tprotected override applyResult(remoteUserData: IRemoteUserData, lastSyncUserData: IRemoteUserData | null, result: [IResourcePreview, IAcceptResult][], force: boolean): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tprotected override async generateSyncPreview(remoteUserData: IRemoteUserData, lastSyncUserData: IRemoteUserData | null, isRemoteDataFromCurrentMachine: boolean, userDataSyncConfiguration: IUserDataSyncConfiguration, token: CancellationToken): Promise<IResourcePreview[]> {\n\t\treturn [];\n\t}\n\tprotected override getMergeResult(resourcePreview: IResourcePreview, token: CancellationToken): Promise<IMergeResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tprotected override getAcceptResult(resourcePreview: IResourcePreview, resource: URI, content: string | null | undefined, token: CancellationToken): Promise<IAcceptResult> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tprotected override async hasRemoteChanged(lastSyncUserData: IRemoteUserData): Promise<boolean> {\n\t\treturn true;\n\t}\n\toverride async hasLocalData(): Promise<boolean> {\n\t\treturn false;\n\t}\n\toverride async resolveContent(uri: URI): Promise<string | null> {\n\t\treturn null;\n\t}\n}\n"]}