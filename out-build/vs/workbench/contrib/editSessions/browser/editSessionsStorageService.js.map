{"version":3,"sources":["vs/workbench/contrib/editSessions/browser/editSessionsStorageService.ts"],"names":[],"mappings":"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","file":"editSessionsStorageService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { localize } from 'vs/nls';\nimport { Action2, MenuId, MenuRegistry, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { ContextKeyExpr, IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IQuickInputService, IQuickPickItem, IQuickPickSeparator } from 'vs/platform/quickinput/common/quickInput';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { createSyncHeaders, IAuthenticationProvider, IResourceRefHandle } from 'vs/platform/userDataSync/common/userDataSync';\nimport { AuthenticationSession, AuthenticationSessionsChangeEvent, IAuthenticationService } from 'vs/workbench/services/authentication/common/authentication';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { EDIT_SESSIONS_SIGNED_IN, EditSession, EDIT_SESSION_SYNC_CATEGORY, IEditSessionsStorageService, EDIT_SESSIONS_SIGNED_IN_KEY, IEditSessionsLogService, SyncResource, EDIT_SESSIONS_PENDING_KEY } from 'vs/workbench/contrib/editSessions/common/editSessions';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { getCurrentAuthenticationSessionInfo } from 'vs/workbench/services/authentication/browser/authenticationService';\nimport { isWeb } from 'vs/base/common/platform';\nimport { IUserDataSyncMachinesService, UserDataSyncMachinesService } from 'vs/platform/userDataSync/common/userDataSyncMachines';\nimport { Emitter } from 'vs/base/common/event';\nimport { CancellationError } from 'vs/base/common/errors';\nimport { EditSessionsStoreClient } from 'vs/workbench/contrib/editSessions/common/editSessionsStorageClient';\nimport { ISecretStorageService } from 'vs/platform/secrets/common/secrets';\n\ntype ExistingSession = IQuickPickItem & { session: AuthenticationSession & { providerId: string } };\ntype AuthenticationProviderOption = IQuickPickItem & { provider: IAuthenticationProvider };\n\nexport class EditSessionsWorkbenchService extends Disposable implements IEditSessionsStorageService {\n\n\tdeclare _serviceBrand: undefined;\n\n\tpublic readonly SIZE_LIMIT = Math.floor(1024 * 1024 * 1.9); // 2 MB\n\n\tprivate serverConfiguration = this.productService['editSessions.store'];\n\tprivate machineClient: IUserDataSyncMachinesService | undefined;\n\n\tprivate authenticationInfo: { sessionId: string; token: string; providerId: string } | undefined;\n\tprivate static CACHED_SESSION_STORAGE_KEY = 'editSessionAccountPreference';\n\n\tprivate initialized = false;\n\tprivate readonly signedInContext: IContextKey<boolean>;\n\n\tget isSignedIn() {\n\t\treturn this.existingSessionId !== undefined;\n\t}\n\n\tprivate _didSignIn = new Emitter<void>();\n\tget onDidSignIn() {\n\t\treturn this._didSignIn.event;\n\t}\n\n\tprivate _didSignOut = new Emitter<void>();\n\tget onDidSignOut() {\n\t\treturn this._didSignOut.event;\n\t}\n\n\tprivate _lastWrittenResources = new Map<SyncResource, { ref: string; content: string }>();\n\tget lastWrittenResources() {\n\t\treturn this._lastWrittenResources;\n\t}\n\n\tprivate _lastReadResources = new Map<SyncResource, { ref: string; content: string }>();\n\tget lastReadResources() {\n\t\treturn this._lastReadResources;\n\t}\n\n\tstoreClient: EditSessionsStoreClient | undefined; // TODO@joyceerhl lifecycle hack\n\n\tconstructor(\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IAuthenticationService private readonly authenticationService: IAuthenticationService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IEditSessionsLogService private readonly logService: IEditSessionsLogService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@ISecretStorageService private readonly secretStorageService: ISecretStorageService\n\t) {\n\t\tsuper();\n\n\t\t// If the user signs out of the current session, reset our cached auth state in memory and on disk\n\t\tthis._register(this.authenticationService.onDidChangeSessions((e) => this.onDidChangeSessions(e.event)));\n\n\t\t// If another window changes the preferred session storage, reset our cached auth state in memory\n\t\tthis._register(this.storageService.onDidChangeValue(StorageScope.APPLICATION, EditSessionsWorkbenchService.CACHED_SESSION_STORAGE_KEY, this._register(new DisposableStore()))(() => this.onDidChangeStorage()));\n\n\t\tthis.registerSignInAction();\n\t\tthis.registerResetAuthenticationAction();\n\n\t\tthis.signedInContext = EDIT_SESSIONS_SIGNED_IN.bindTo(this.contextKeyService);\n\t\tthis.signedInContext.set(this.existingSessionId !== undefined);\n\t}\n\n\t/**\n\t * @param resource: The resource to retrieve content for.\n\t * @param content An object representing resource state to be restored.\n\t * @returns The ref of the stored state.\n\t */\n\tasync write(resource: SyncResource, content: string | EditSession): Promise<string> {\n\t\tawait this.initialize('write', false);\n\t\tif (!this.initialized) {\n\t\t\tthrow new Error('Please sign in to store your edit session.');\n\t\t}\n\n\t\tif (typeof content !== 'string' && content.machine === undefined) {\n\t\t\tcontent.machine = await this.getOrCreateCurrentMachineId();\n\t\t}\n\n\t\tcontent = typeof content === 'string' ? content : JSON.stringify(content);\n\t\tconst ref = await this.storeClient!.writeResource(resource, content, null, undefined, createSyncHeaders(generateUuid()));\n\n\t\tthis._lastWrittenResources.set(resource, { ref, content });\n\n\t\treturn ref;\n\t}\n\n\t/**\n\t * @param resource: The resource to retrieve content for.\n\t * @param ref: A specific content ref to retrieve content for, if it exists.\n\t * If undefined, this method will return the latest saved edit session, if any.\n\t *\n\t * @returns An object representing the requested or latest state, if any.\n\t */\n\tasync read(resource: SyncResource, ref: string | undefined): Promise<{ ref: string; content: string } | undefined> {\n\t\tawait this.initialize('read', false);\n\t\tif (!this.initialized) {\n\t\t\tthrow new Error('Please sign in to apply your latest edit session.');\n\t\t}\n\n\t\tlet content: string | undefined | null;\n\t\tconst headers = createSyncHeaders(generateUuid());\n\t\ttry {\n\t\t\tif (ref !== undefined) {\n\t\t\t\tcontent = await this.storeClient?.resolveResourceContent(resource, ref, undefined, headers);\n\t\t\t} else {\n\t\t\t\tconst result = await this.storeClient?.readResource(resource, null, undefined, headers);\n\t\t\t\tcontent = result?.content;\n\t\t\t\tref = result?.ref;\n\t\t\t}\n\t\t} catch (ex) {\n\t\t\tthis.logService.error(ex);\n\t\t}\n\n\t\t// TODO@joyceerhl Validate session data, check schema version\n\t\tif (content !== undefined && content !== null && ref !== undefined) {\n\t\t\tthis._lastReadResources.set(resource, { ref, content });\n\t\t\treturn { ref, content };\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync delete(resource: SyncResource, ref: string | null) {\n\t\tawait this.initialize('write', false);\n\t\tif (!this.initialized) {\n\t\t\tthrow new Error(`Unable to delete edit session with ref ${ref}.`);\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.storeClient?.deleteResource(resource, ref);\n\t\t} catch (ex) {\n\t\t\tthis.logService.error(ex);\n\t\t}\n\t}\n\n\tasync list(resource: SyncResource): Promise<IResourceRefHandle[]> {\n\t\tawait this.initialize('read', false);\n\t\tif (!this.initialized) {\n\t\t\tthrow new Error(`Unable to list edit sessions.`);\n\t\t}\n\n\t\ttry {\n\t\t\treturn this.storeClient?.getAllResourceRefs(resource) ?? [];\n\t\t} catch (ex) {\n\t\t\tthis.logService.error(ex);\n\t\t}\n\n\t\treturn [];\n\t}\n\n\tpublic async initialize(reason: 'read' | 'write', silent: boolean = false) {\n\t\tif (this.initialized) {\n\t\t\treturn true;\n\t\t}\n\t\tthis.initialized = await this.doInitialize(reason, silent);\n\t\tthis.signedInContext.set(this.initialized);\n\t\tif (this.initialized) {\n\t\t\tthis._didSignIn.fire();\n\t\t}\n\t\treturn this.initialized;\n\n\t}\n\n\t/**\n\t *\n\t * Ensures that the store client is initialized,\n\t * meaning that authentication is configured and it\n\t * can be used to communicate with the remote storage service\n\t */\n\tprivate async doInitialize(reason: 'read' | 'write', silent: boolean): Promise<boolean> {\n\t\t// Wait for authentication extensions to be registered\n\t\tawait this.extensionService.whenInstalledExtensionsRegistered();\n\n\t\tif (!this.serverConfiguration?.url) {\n\t\t\tthrow new Error('Unable to initialize sessions sync as session sync preference is not configured in product.json.');\n\t\t}\n\n\t\tif (this.storeClient === undefined) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis._register(this.storeClient.onTokenFailed(() => {\n\t\t\tthis.logService.info('Clearing edit sessions authentication preference because of successive token failures.');\n\t\t\tthis.clearAuthenticationPreference();\n\t\t}));\n\n\t\tif (this.machineClient === undefined) {\n\t\t\tthis.machineClient = new UserDataSyncMachinesService(this.environmentService, this.fileService, this.storageService, this.storeClient!, this.logService, this.productService);\n\t\t}\n\n\t\t// If we already have an existing auth session in memory, use that\n\t\tif (this.authenticationInfo !== undefined) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst authenticationSession = await this.getAuthenticationSession(reason, silent);\n\t\tif (authenticationSession !== undefined) {\n\t\t\tthis.authenticationInfo = authenticationSession;\n\t\t\tthis.storeClient.setAuthToken(authenticationSession.token, authenticationSession.providerId);\n\t\t}\n\n\t\treturn authenticationSession !== undefined;\n\t}\n\n\tprivate cachedMachines: Map<string, string> | undefined;\n\n\tasync getMachineById(machineId: string) {\n\t\tawait this.initialize('read', false);\n\n\t\tif (!this.cachedMachines) {\n\t\t\tconst machines = await this.machineClient!.getMachines();\n\t\t\tthis.cachedMachines = machines.reduce((map, machine) => map.set(machine.id, machine.name), new Map<string, string>());\n\t\t}\n\n\t\treturn this.cachedMachines.get(machineId);\n\t}\n\n\tprivate async getOrCreateCurrentMachineId(): Promise<string> {\n\t\tconst currentMachineId = await this.machineClient!.getMachines().then((machines) => machines.find((m) => m.isCurrent)?.id);\n\n\t\tif (currentMachineId === undefined) {\n\t\t\tawait this.machineClient!.addCurrentMachine();\n\t\t\treturn await this.machineClient!.getMachines().then((machines) => machines.find((m) => m.isCurrent)!.id);\n\t\t}\n\n\t\treturn currentMachineId;\n\t}\n\n\tprivate async getAuthenticationSession(reason: 'read' | 'write', silent: boolean) {\n\t\t// If the user signed in previously and the session is still available, reuse that without prompting the user again\n\t\tif (this.existingSessionId) {\n\t\t\tthis.logService.info(`Searching for existing authentication session with ID ${this.existingSessionId}`);\n\t\t\tconst existingSession = await this.getExistingSession();\n\t\t\tif (existingSession) {\n\t\t\t\tthis.logService.info(`Found existing authentication session with ID ${existingSession.session.id}`);\n\t\t\t\treturn { sessionId: existingSession.session.id, token: existingSession.session.idToken ?? existingSession.session.accessToken, providerId: existingSession.session.providerId };\n\t\t\t} else {\n\t\t\t\tthis._didSignOut.fire();\n\t\t\t}\n\t\t}\n\n\t\t// If settings sync is already enabled, avoid asking again to authenticate\n\t\tif (this.shouldAttemptEditSessionInit()) {\n\t\t\tthis.logService.info(`Reusing user data sync enablement`);\n\t\t\tconst authenticationSessionInfo = await getCurrentAuthenticationSessionInfo(this.secretStorageService, this.productService);\n\t\t\tif (authenticationSessionInfo !== undefined) {\n\t\t\t\tthis.logService.info(`Using current authentication session with ID ${authenticationSessionInfo.id}`);\n\t\t\t\tthis.existingSessionId = authenticationSessionInfo.id;\n\t\t\t\treturn { sessionId: authenticationSessionInfo.id, token: authenticationSessionInfo.accessToken, providerId: authenticationSessionInfo.providerId };\n\t\t\t}\n\t\t}\n\n\t\t// If we aren't supposed to prompt the user because\n\t\t// we're in a silent flow, just return here\n\t\tif (silent) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Ask the user to pick a preferred account\n\t\tconst authenticationSession = await this.getAccountPreference(reason);\n\t\tif (authenticationSession !== undefined) {\n\t\t\tthis.existingSessionId = authenticationSession.id;\n\t\t\treturn { sessionId: authenticationSession.id, token: authenticationSession.idToken ?? authenticationSession.accessToken, providerId: authenticationSession.providerId };\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate shouldAttemptEditSessionInit(): boolean {\n\t\treturn isWeb && this.storageService.isNew(StorageScope.APPLICATION) && this.storageService.isNew(StorageScope.WORKSPACE);\n\t}\n\n\t/**\n\t *\n\t * Prompts the user to pick an authentication option for storing and getting edit sessions.\n\t */\n\tprivate async getAccountPreference(reason: 'read' | 'write'): Promise<AuthenticationSession & { providerId: string } | undefined> {\n\t\tconst quickpick = this.quickInputService.createQuickPick<ExistingSession | AuthenticationProviderOption | IQuickPickItem>();\n\t\tquickpick.ok = false;\n\t\tquickpick.placeholder = reason === 'read' ? localize('choose account read placeholder', \"Select an account to restore your working changes from the cloud\") : localize('choose account placeholder', \"Select an account to store your working changes in the cloud\");\n\t\tquickpick.ignoreFocusOut = true;\n\t\tquickpick.items = await this.createQuickpickItems();\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tquickpick.onDidHide((e) => {\n\t\t\t\treject(new CancellationError());\n\t\t\t\tquickpick.dispose();\n\t\t\t});\n\n\t\t\tquickpick.onDidAccept(async (e) => {\n\t\t\t\tconst selection = quickpick.selectedItems[0];\n\t\t\t\tconst session = 'provider' in selection ? { ...await this.authenticationService.createSession(selection.provider.id, selection.provider.scopes), providerId: selection.provider.id } : ('session' in selection ? selection.session : undefined);\n\t\t\t\tresolve(session);\n\t\t\t\tquickpick.hide();\n\t\t\t});\n\n\t\t\tquickpick.show();\n\t\t});\n\t}\n\n\tprivate async createQuickpickItems(): Promise<(ExistingSession | AuthenticationProviderOption | IQuickPickSeparator | IQuickPickItem & { canceledAuthentication: boolean })[]> {\n\t\tconst options: (ExistingSession | AuthenticationProviderOption | IQuickPickSeparator | IQuickPickItem & { canceledAuthentication: boolean })[] = [];\n\n\t\toptions.push({ type: 'separator', label: localize('signed in', \"Signed In\") });\n\n\t\tconst sessions = await this.getAllSessions();\n\t\toptions.push(...sessions);\n\n\t\toptions.push({ type: 'separator', label: localize('others', \"Others\") });\n\n\t\tfor (const authenticationProvider of (await this.getAuthenticationProviders())) {\n\t\t\tconst signedInForProvider = sessions.some(account => account.session.providerId === authenticationProvider.id);\n\t\t\tif (!signedInForProvider || this.authenticationService.supportsMultipleAccounts(authenticationProvider.id)) {\n\t\t\t\tconst providerName = this.authenticationService.getLabel(authenticationProvider.id);\n\t\t\t\toptions.push({ label: localize('sign in using account', \"Sign in with {0}\", providerName), provider: authenticationProvider });\n\t\t\t}\n\t\t}\n\n\t\treturn options;\n\t}\n\n\t/**\n\t *\n\t * Returns all authentication sessions available from {@link getAuthenticationProviders}.\n\t */\n\tprivate async getAllSessions() {\n\t\tconst authenticationProviders = await this.getAuthenticationProviders();\n\t\tconst accounts = new Map<string, ExistingSession>();\n\t\tlet currentSession: ExistingSession | undefined;\n\n\t\tfor (const provider of authenticationProviders) {\n\t\t\tconst sessions = await this.authenticationService.getSessions(provider.id, provider.scopes);\n\n\t\t\tfor (const session of sessions) {\n\t\t\t\tconst item = {\n\t\t\t\t\tlabel: session.account.label,\n\t\t\t\t\tdescription: this.authenticationService.getLabel(provider.id),\n\t\t\t\t\tsession: { ...session, providerId: provider.id }\n\t\t\t\t};\n\t\t\t\taccounts.set(item.session.account.id, item);\n\t\t\t\tif (this.existingSessionId === session.id) {\n\t\t\t\t\tcurrentSession = item;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (currentSession !== undefined) {\n\t\t\taccounts.set(currentSession.session.account.id, currentSession);\n\t\t}\n\n\t\treturn [...accounts.values()].sort((a, b) => a.label.localeCompare(b.label));\n\t}\n\n\t/**\n\t *\n\t * Returns all authentication providers which can be used to authenticate\n\t * to the remote storage service, based on product.json configuration\n\t * and registered authentication providers.\n\t */\n\tprivate async getAuthenticationProviders() {\n\t\tif (!this.serverConfiguration) {\n\t\t\tthrow new Error('Unable to get configured authentication providers as session sync preference is not configured in product.json.');\n\t\t}\n\n\t\t// Get the list of authentication providers configured in product.json\n\t\tconst authenticationProviders = this.serverConfiguration.authenticationProviders;\n\t\tconst configuredAuthenticationProviders = Object.keys(authenticationProviders).reduce<IAuthenticationProvider[]>((result, id) => {\n\t\t\tresult.push({ id, scopes: authenticationProviders[id].scopes });\n\t\t\treturn result;\n\t\t}, []);\n\n\t\t// Filter out anything that isn't currently available through the authenticationService\n\t\tconst availableAuthenticationProviders = this.authenticationService.declaredProviders;\n\n\t\treturn configuredAuthenticationProviders.filter(({ id }) => availableAuthenticationProviders.some(provider => provider.id === id));\n\t}\n\n\tprivate get existingSessionId() {\n\t\treturn this.storageService.get(EditSessionsWorkbenchService.CACHED_SESSION_STORAGE_KEY, StorageScope.APPLICATION);\n\t}\n\n\tprivate set existingSessionId(sessionId: string | undefined) {\n\t\tthis.logService.trace(`Saving authentication session preference for ID ${sessionId}.`);\n\t\tif (sessionId === undefined) {\n\t\t\tthis.storageService.remove(EditSessionsWorkbenchService.CACHED_SESSION_STORAGE_KEY, StorageScope.APPLICATION);\n\t\t} else {\n\t\t\tthis.storageService.store(EditSessionsWorkbenchService.CACHED_SESSION_STORAGE_KEY, sessionId, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t}\n\t}\n\n\tprivate async getExistingSession() {\n\t\tconst accounts = await this.getAllSessions();\n\t\treturn accounts.find((account) => account.session.id === this.existingSessionId);\n\t}\n\n\tprivate async onDidChangeStorage(): Promise<void> {\n\t\tconst newSessionId = this.existingSessionId;\n\t\tconst previousSessionId = this.authenticationInfo?.sessionId;\n\n\t\tif (previousSessionId !== newSessionId) {\n\t\t\tthis.logService.trace(`Resetting authentication state because authentication session ID preference changed from ${previousSessionId} to ${newSessionId}.`);\n\t\t\tthis.authenticationInfo = undefined;\n\t\t\tthis.initialized = false;\n\t\t}\n\t}\n\n\tprivate clearAuthenticationPreference(): void {\n\t\tthis.authenticationInfo = undefined;\n\t\tthis.initialized = false;\n\t\tthis.existingSessionId = undefined;\n\t\tthis.signedInContext.set(false);\n\t}\n\n\tprivate onDidChangeSessions(e: AuthenticationSessionsChangeEvent): void {\n\t\tif (this.authenticationInfo?.sessionId && e.removed.find(session => session.id === this.authenticationInfo?.sessionId)) {\n\t\t\tthis.clearAuthenticationPreference();\n\t\t}\n\t}\n\n\tprivate registerSignInAction() {\n\t\tconst that = this;\n\t\tconst id = 'workbench.editSessions.actions.signIn';\n\t\tconst when = ContextKeyExpr.and(ContextKeyExpr.equals(EDIT_SESSIONS_PENDING_KEY, false), ContextKeyExpr.equals(EDIT_SESSIONS_SIGNED_IN_KEY, false));\n\t\tthis._register(registerAction2(class ResetEditSessionAuthenticationAction extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid,\n\t\t\t\t\ttitle: localize('sign in', 'Turn on Cloud Changes...'),\n\t\t\t\t\tcategory: EDIT_SESSION_SYNC_CATEGORY,\n\t\t\t\t\tprecondition: when,\n\t\t\t\t\tmenu: [{\n\t\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: MenuId.AccountsContext,\n\t\t\t\t\t\tgroup: '2_editSessions',\n\t\t\t\t\t\twhen,\n\t\t\t\t\t}]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync run() {\n\t\t\t\treturn await that.initialize('write', false);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(MenuRegistry.appendMenuItem(MenuId.AccountsContext, {\n\t\t\tgroup: '2_editSessions',\n\t\t\tcommand: {\n\t\t\t\tid,\n\t\t\t\ttitle: localize('sign in badge', 'Turn on Cloud Changes... (1)'),\n\t\t\t},\n\t\t\twhen: ContextKeyExpr.and(ContextKeyExpr.equals(EDIT_SESSIONS_PENDING_KEY, true), ContextKeyExpr.equals(EDIT_SESSIONS_SIGNED_IN_KEY, false))\n\t\t}));\n\t}\n\n\tprivate registerResetAuthenticationAction() {\n\t\tconst that = this;\n\t\tthis._register(registerAction2(class ResetEditSessionAuthenticationAction extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: 'workbench.editSessions.actions.resetAuth',\n\t\t\t\t\ttitle: localize('reset auth.v3', 'Turn off Cloud Changes...'),\n\t\t\t\t\tcategory: EDIT_SESSION_SYNC_CATEGORY,\n\t\t\t\t\tprecondition: ContextKeyExpr.equals(EDIT_SESSIONS_SIGNED_IN_KEY, true),\n\t\t\t\t\tmenu: [{\n\t\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: MenuId.AccountsContext,\n\t\t\t\t\t\tgroup: '2_editSessions',\n\t\t\t\t\t\twhen: ContextKeyExpr.equals(EDIT_SESSIONS_SIGNED_IN_KEY, true),\n\t\t\t\t\t}]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync run() {\n\t\t\t\tconst result = await that.dialogService.confirm({\n\t\t\t\t\tmessage: localize('sign out of cloud changes clear data prompt', 'Do you want to disable storing working changes in the cloud?'),\n\t\t\t\t\tcheckbox: { label: localize('delete all cloud changes', 'Delete all stored data from the cloud.') }\n\t\t\t\t});\n\t\t\t\tif (result.confirmed) {\n\t\t\t\t\tif (result.checkboxChecked) {\n\t\t\t\t\t\tthat.storeClient?.deleteResource('editSessions', null);\n\t\t\t\t\t}\n\t\t\t\t\tthat.clearAuthenticationPreference();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n}\n"]}