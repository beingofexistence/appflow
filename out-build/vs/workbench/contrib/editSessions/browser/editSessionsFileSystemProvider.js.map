{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/editSessions/browser/editSessionsFileSystemProvider.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IASzF,IAAM,IAAI,GAAV,MAAM,IAAI;iBAEA,WAAM,GAAG,mBAAH,AAAO,CAAiB;QAE9C,YAC8B,CAAwC;YAAhC,MAAC,GAAD,CAAC,CAA+B;YAG7D,iBAAY,GAAmC,yGAAsF,CAAC;YAgC/I,qCAAqC;YAC5B,4BAAuB,GAAG,aAAK,CAAC,IAAI,CAAC;YACrC,oBAAe,GAAG,aAAK,CAAC,IAAI,CAAC;QApClC,CAAC;QAIL,KAAK,CAAC,QAAQ,CAAC,QAAa;YAC3B,MAAM,KAAK,GAAG,sDAAsD,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YACtG,IAAI,CAAC,KAAK,EAAE,MAAM,EAAE;gBACnB,MAAM,mCAA2B,CAAC,YAAY,CAAC;aAC/C;YACD,MAAM,EAAE,GAAG,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC;YACnD,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,CAAC,CAA0B,IAAI,CAAC,cAAc,EAAE,GAAG,CAAC,CAAC;YAC7E,IAAI,CAAC,IAAI,EAAE;gBACV,MAAM,mCAA2B,CAAC,YAAY,CAAC;aAC/C;YACD,MAAM,OAAO,GAAgB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YACtD,MAAM,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,UAAU,CAAC,EAAE,cAAc,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,gBAAgB,KAAK,QAAQ,CAAC,CAAC;YACzI,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,KAAK,yBAAU,CAAC,QAAQ,EAAE;gBACnD,MAAM,mCAA2B,CAAC,YAAY,CAAC;aAC/C;YACD,OAAO,IAAA,mBAAI,EAAyB,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC,MAAM,CAAC;QAC9E,CAAC;QAED,KAAK,CAAC,IAAI,CAAC,QAAa;YACvB,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YAC9C,MAAM,WAAW,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YAC/B,OAAO;gBACN,IAAI,EAAE,gBAAQ,CAAC,IAAI;gBACnB,WAAW,EAAE,sBAAc,CAAC,QAAQ;gBACpC,KAAK,EAAE,WAAW;gBAClB,KAAK,EAAE,WAAW;gBAClB,IAAI,EAAE,OAAO,CAAC,UAAU;aACxB,CAAC;QACH,CAAC;QAMD,KAAK,CAAC,QAAa,EAAE,IAAmB,IAAiB,OAAO,eAAG,CAAQ,IAAI,CAAC,CAAC,CAAC;QAElF,KAAK,CAAC,KAAK,CAAC,QAAa,IAAmB,CAAC;QAC7C,KAAK,CAAC,OAAO,CAAC,QAAa,IAAmC,OAAO,EAAE,CAAC,CAAC,CAAC;QAE1E,KAAK,CAAC,MAAM,CAAC,IAAS,EAAE,EAAO,EAAE,IAA2B,IAAmB,CAAC;QAChF,KAAK,CAAC,MAAM,CAAC,QAAa,EAAE,IAAwB,IAAmB,CAAC;QAExE,KAAK,CAAC,SAAS;YACd,MAAM,IAAI,WAAE,EAAiB,CAAC;QAC/B,CAAC;;IAtDW,oBAAI;mBAAJ,IAAI;QAKd,WAAA,mBAAI,CAAA;OALM,IAAI,CAwDhB","file":"editSessionsFileSystemProvider.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { Event } from 'vs/base/common/event';\nimport { URI } from 'vs/base/common/uri';\nimport { FilePermission, FileSystemProviderCapabilities, FileSystemProviderErrorCode, FileType, IFileDeleteOptions, IFileOverwriteOptions, IFileSystemProviderWithFileReadWriteCapability, IStat, IWatchOptions } from 'vs/platform/files/common/files';\nimport { ChangeType, decodeEditSessionFileContent, EDIT_SESSIONS_SCHEME, EditSession, IEditSessionsStorageService } from 'vs/workbench/contrib/editSessions/common/editSessions';\nimport { NotSupportedError } from 'vs/base/common/errors';\n\nexport class EditSessionsFileSystemProvider implements IFileSystemProviderWithFileReadWriteCapability {\n\n\tstatic readonly SCHEMA = EDIT_SESSIONS_SCHEME;\n\n\tconstructor(\n\t\t@IEditSessionsStorageService private editSessionsStorageService: IEditSessionsStorageService,\n\t) { }\n\n\treadonly capabilities: FileSystemProviderCapabilities = FileSystemProviderCapabilities.Readonly + FileSystemProviderCapabilities.FileReadWrite;\n\n\tasync readFile(resource: URI): Promise<Uint8Array> {\n\t\tconst match = /(?<ref>[^/]+)\\/(?<folderName>[^/]+)\\/(?<filePath>.*)/.exec(resource.path.substring(1));\n\t\tif (!match?.groups) {\n\t\t\tthrow FileSystemProviderErrorCode.FileNotFound;\n\t\t}\n\t\tconst { ref, folderName, filePath } = match.groups;\n\t\tconst data = await this.editSessionsStorageService.read('editSessions', ref);\n\t\tif (!data) {\n\t\t\tthrow FileSystemProviderErrorCode.FileNotFound;\n\t\t}\n\t\tconst content: EditSession = JSON.parse(data.content);\n\t\tconst change = content.folders.find((f) => f.name === folderName)?.workingChanges.find((change) => change.relativeFilePath === filePath);\n\t\tif (!change || change.type === ChangeType.Deletion) {\n\t\t\tthrow FileSystemProviderErrorCode.FileNotFound;\n\t\t}\n\t\treturn decodeEditSessionFileContent(content.version, change.contents).buffer;\n\t}\n\n\tasync stat(resource: URI): Promise<IStat> {\n\t\tconst content = await this.readFile(resource);\n\t\tconst currentTime = Date.now();\n\t\treturn {\n\t\t\ttype: FileType.File,\n\t\t\tpermissions: FilePermission.Readonly,\n\t\t\tmtime: currentTime,\n\t\t\tctime: currentTime,\n\t\t\tsize: content.byteLength\n\t\t};\n\t}\n\n\t//#region Unsupported file operations\n\treadonly onDidChangeCapabilities = Event.None;\n\treadonly onDidChangeFile = Event.None;\n\n\twatch(resource: URI, opts: IWatchOptions): IDisposable { return Disposable.None; }\n\n\tasync mkdir(resource: URI): Promise<void> { }\n\tasync readdir(resource: URI): Promise<[string, FileType][]> { return []; }\n\n\tasync rename(from: URI, to: URI, opts: IFileOverwriteOptions): Promise<void> { }\n\tasync delete(resource: URI, opts: IFileDeleteOptions): Promise<void> { }\n\n\tasync writeFile() {\n\t\tthrow new NotSupportedError();\n\t}\n\t//#endregion\n}\n"]}