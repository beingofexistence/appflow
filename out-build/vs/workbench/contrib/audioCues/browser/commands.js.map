{"version":3,"sources":["vs/workbench/contrib/audioCues/browser/commands.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAYhG,MAAa,IAAiB,SAAQ,aAAG;iBACxB,OAAE,GAAG,gBAAgB,CAAC;QAEtC;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,IAAI,CAAa,EAAE;gBACvB,KAAK,EAAE;oBACN,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAgB,EAAE,IAAuB,CAAC;oBAC1D,QAAQ,EAAE,uBAAuB;iBACjC;gBACD,EAAE,EAAE,IAAI;aACR,CAAC,CAAC;QACJ,CAAC;QAEQ,KAAK,CAAC,GAAG,CAAC,QAA0B;YAC5C,MAAM,eAAe,GAAG,QAAQ,CAAC,GAAG,CAAC,qBAAG,CAAc,CAAC;YACvD,MAAM,gBAAgB,GAAG,QAAQ,CAAC,GAAG,CAAC,gBAAG,CAAgB,CAAC;YAC1D,MAAM,kBAAkB,GAAG,QAAQ,CAAC,GAAG,CAAC,iBAAG,CAAiB,CAAC;YAC7D,MAAM,oBAAoB,GAAG,QAAQ,CAAC,GAAG,CAAC,mBAAG,CAAmB,CAAC;YAEjE,MAAM,KAAK,GAAgD,qBAAG,CAAM,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC;gBACnG,KAAK,EAAE,oBAAoB,CAAC,uBAAuB,EAAE,CAAC,CAAC;oBACtD,GAAG,GAAG,CAAC,IAAI,GAAG,eAAe,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,GAAG,IAAA,cAAQ,EAAC,CAAU,EAAE,IAAU,CAAC,GAAG,GAAG,EAAE;oBACnG,CAAC,CAAC,GAAG,eAAe,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,IAAI,GAAG,CAAC,IAAI,EAAE;gBACzE,QAAQ,EAAE,GAAG;gBACb,OAAO,EAAE,CAAC;wBACT,SAAS,EAAE,qBAAS,CAAC,WAAW,CAAC,cAAG,CAAK,YAAY,CAAC;wBACtD,OAAO,EAAE,IAAA,cAAQ,EAAC,CAAyB,EAAE,IAA0B,CAAC;qBACxE,CAAC;aACF,CAAC,CAAC,CAAC;YAEJ,MAAM,SAAS,GAAG,gBAAgB,CAAC,IAAI,CACtC,KAAK,EACL;gBACC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC;gBACpB,UAAU,EAAE,CAAC,IAAI,EAAE,EAAE;oBACpB,eAAe,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,CAAC;gBACrE,CAAC;gBACD,sBAAsB,EAAE,CAAC,OAAO,EAAE,EAAE;oBACnC,kBAAkB,CAAC,YAAY,CAAC,EAAE,KAAK,EAAE,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;gBAC/E,CAAC;gBACD,WAAW,EAAE,IAAA,cAAQ,EAAC,CAA4B,EAAE,IAA6B,CAAC;aAClF,CACD,CAAC;YAEF,MAAM,SAAS,CAAC;QACjB,CAAC;;IA9CF,oBA+CC","file":"commands.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from 'vs/base/common/codicons';\nimport { ThemeIcon } from 'vs/base/common/themables';\nimport { localize } from 'vs/nls';\nimport { IAccessibilityService } from 'vs/platform/accessibility/common/accessibility';\nimport { Action2 } from 'vs/platform/actions/common/actions';\nimport { AudioCue, IAudioCueService } from 'vs/platform/audioCues/browser/audioCueService';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { IQuickInputService, IQuickPickItem } from 'vs/platform/quickinput/common/quickInput';\nimport { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';\n\nexport class ShowAudioCueHelp extends Action2 {\n\tstatic readonly ID = 'audioCues.help';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ShowAudioCueHelp.ID,\n\t\t\ttitle: {\n\t\t\t\tvalue: localize('audioCues.help', \"Help: List Audio Cues\"),\n\t\t\t\toriginal: 'Help: List Audio Cues'\n\t\t\t},\n\t\t\tf1: true,\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst audioCueService = accessor.get(IAudioCueService);\n\t\tconst quickPickService = accessor.get(IQuickInputService);\n\t\tconst preferencesService = accessor.get(IPreferencesService);\n\t\tconst accessibilityService = accessor.get(IAccessibilityService);\n\n\t\tconst items: (IQuickPickItem & { audioCue: AudioCue })[] = AudioCue.allAudioCues.map((cue, idx) => ({\n\t\t\tlabel: accessibilityService.isScreenReaderOptimized() ?\n\t\t\t\t`${cue.name}${audioCueService.isEnabled(cue) ? '' : ' (' + localize('disabled', \"Disabled\") + ')'}`\n\t\t\t\t: `${audioCueService.isEnabled(cue) ? '$(check)' : '     '} ${cue.name}`,\n\t\t\taudioCue: cue,\n\t\t\tbuttons: [{\n\t\t\t\ticonClass: ThemeIcon.asClassName(Codicon.settingsGear),\n\t\t\t\ttooltip: localize('audioCues.help.settings', 'Enable/Disable Audio Cue'),\n\t\t\t}],\n\t\t}));\n\n\t\tconst quickPick = quickPickService.pick<IQuickPickItem & { audioCue: AudioCue }>(\n\t\t\titems,\n\t\t\t{\n\t\t\t\tactiveItem: items[0],\n\t\t\t\tonDidFocus: (item) => {\n\t\t\t\t\taudioCueService.playSound(item.audioCue.sound.getSound(true), true);\n\t\t\t\t},\n\t\t\t\tonDidTriggerItemButton: (context) => {\n\t\t\t\t\tpreferencesService.openSettings({ query: context.item.audioCue.settingsKey });\n\t\t\t\t},\n\t\t\t\tplaceHolder: localize('audioCues.help.placeholder', 'Select an audio cue to play'),\n\t\t\t}\n\t\t);\n\n\t\tawait quickPick;\n\t}\n}\n"]}