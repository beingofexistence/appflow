{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/audioCues/browser/audioCueDebuggerContribution.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAQzF,IAAM,IAAI,GAAV,MAAM,IACZ,SAAQ,eAAG;QAGX,YACgB,YAAiB,EACG,CAAoB;YAEvD,KAAK,EAAE,CAAC;YAF2B,MAAC,GAAD,CAAC,CAAmB;YAIvD,MAAM,SAAS,GAAG,IAAA,gCAAmB,EACpC,CAAC,CAAe,gBAAgB,CAAC,qBAAG,CAAM,YAAY,CAAC,EACvD,GAAG,EAAE,CAAC,CAAC,CAAe,SAAS,CAAC,qBAAG,CAAM,YAAY,CAAC,CACtD,CAAC;YACF,IAAI,CAAC,CAAC,CAAS,IAAA,6BAAgB,EAAC,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;gBACjD,+CAA+C;gBAC/C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;oBAC5B,OAAO;iBACP;gBAED,MAAM,kBAAkB,GAAG,IAAI,GAAG,EAA8B,CAAC;gBACjE,KAAK,CAAC,GAAG,CAAC,IAAA,eAAG,EAAU,GAAG,EAAE;oBAC3B,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;oBAC7C,kBAAkB,CAAC,KAAK,EAAE,CAAC;gBAC5B,CAAC,CAAC,CAAC,CAAC;gBAEJ,KAAK,CAAC,GAAG,CACR,YAAY,CAAC,eAAe,CAAC,CAAC,OAAO,EAAE,EAAE,CACxC,kBAAkB,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAa,OAAO,CAAC,CAAC,CAC5D,CACD,CAAC;gBAEF,KAAK,CAAC,GAAG,CAAC,YAAY,CAAC,eAAe,CAAC,OAAO,CAAC,EAAE;oBAChD,kBAAkB,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,OAAO,EAAE,CAAC;oBAC3C,kBAAkB,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;gBACpC,CAAC,CAAC,CAAC,CAAC;gBAEJ,YAAY;qBACV,QAAQ,EAAE;qBACV,WAAW,EAAE;qBACb,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CACpB,kBAAkB,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAa,OAAO,CAAC,CAAC,CAC5D,CAAC;YACJ,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAEO,CAAC,CAAa,OAAsB;YAC3C,OAAO,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE;gBACnC,MAAM,cAAc,GAAG,OAAO,CAAC,iBAAiB,EAAE,CAAC;gBACnD,MAAM,sBAAsB,GAAG,YAAY,CAAC;gBAC5C,IAAI,cAAc,IAAI,cAAc,CAAC,MAAM,KAAK,sBAAsB,EAAE;oBACvE,IAAI,CAAC,CAAC,CAAe,YAAY,CAAC,qBAAG,CAAM,YAAY,CAAC,CAAC;iBACzD;YACF,CAAC,CAAC,CAAC;QAEJ,CAAC;KACD,CAAA;IAxDY,oBAAI;mBAAJ,IAAI;QAKd,WAAA,WAAG,CAAA;QACH,WAAA,qBAAG,CAAA;OANO,IAAI,CAwDhB","file":"audioCueDebuggerContribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { autorunWithStore, observableFromEvent } from 'vs/base/common/observable';\nimport { IAudioCueService, AudioCue, AudioCueService } from 'vs/platform/audioCues/browser/audioCueService';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IDebugService, IDebugSession } from 'vs/workbench/contrib/debug/common/debug';\n\nexport class AudioCueLineDebuggerContribution\n\textends Disposable\n\timplements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IDebugService debugService: IDebugService,\n\t\t@IAudioCueService private readonly audioCueService: AudioCueService,\n\t) {\n\t\tsuper();\n\n\t\tconst isEnabled = observableFromEvent(\n\t\t\taudioCueService.onEnabledChanged(AudioCue.onDebugBreak),\n\t\t\t() => audioCueService.isEnabled(AudioCue.onDebugBreak)\n\t\t);\n\t\tthis._register(autorunWithStore((reader, store) => {\n\t\t\t/** @description subscribe to debug sessions */\n\t\t\tif (!isEnabled.read(reader)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst sessionDisposables = new Map<IDebugSession, IDisposable>();\n\t\t\tstore.add(toDisposable(() => {\n\t\t\t\tsessionDisposables.forEach(d => d.dispose());\n\t\t\t\tsessionDisposables.clear();\n\t\t\t}));\n\n\t\t\tstore.add(\n\t\t\t\tdebugService.onDidNewSession((session) =>\n\t\t\t\t\tsessionDisposables.set(session, this.handleSession(session))\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tstore.add(debugService.onDidEndSession(session => {\n\t\t\t\tsessionDisposables.get(session)?.dispose();\n\t\t\t\tsessionDisposables.delete(session);\n\t\t\t}));\n\n\t\t\tdebugService\n\t\t\t\t.getModel()\n\t\t\t\t.getSessions()\n\t\t\t\t.forEach((session) =>\n\t\t\t\t\tsessionDisposables.set(session, this.handleSession(session))\n\t\t\t\t);\n\t\t}));\n\t}\n\n\tprivate handleSession(session: IDebugSession): IDisposable {\n\t\treturn session.onDidChangeState(e => {\n\t\t\tconst stoppedDetails = session.getStoppedDetails();\n\t\t\tconst BREAKPOINT_STOP_REASON = 'breakpoint';\n\t\t\tif (stoppedDetails && stoppedDetails.reason === BREAKPOINT_STOP_REASON) {\n\t\t\t\tthis.audioCueService.playAudioCue(AudioCue.onDebugBreak);\n\t\t\t}\n\t\t});\n\n\t}\n}\n"]}