{"version":3,"sources":["vs/workbench/contrib/search/browser/searchActionsCopy.ts"],"names":[],"mappings":"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","file":"searchActionsCopy.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from 'vs/nls';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { IViewsService } from 'vs/workbench/common/views';\nimport * as Constants from 'vs/workbench/contrib/search/common/constants';\nimport { FileMatch, FolderMatch, FolderMatchWithResource, Match, RenderableMatch, searchMatchComparer } from 'vs/workbench/contrib/search/browser/searchModel';\nimport { Action2, MenuId, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { category, getSearchView } from 'vs/workbench/contrib/search/browser/searchActionsBase';\nimport { isWindows } from 'vs/base/common/platform';\n\n//#region Actions\nregisterAction2(class CopyMatchCommandAction extends Action2 {\n\n\tconstructor(\n\t) {\n\t\tsuper({\n\t\t\tid: Constants.CopyMatchCommandId,\n\t\t\ttitle: {\n\t\t\t\tvalue: nls.localize('copyMatchLabel', \"Copy\"),\n\t\t\t\toriginal: 'Copy'\n\t\t\t},\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: Constants.FileMatchOrMatchFocusKey,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyC,\n\t\t\t},\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.SearchContext,\n\t\t\t\twhen: Constants.FileMatchOrMatchFocusKey,\n\t\t\t\tgroup: 'search_2',\n\t\t\t\torder: 1\n\t\t\t}]\n\t\t});\n\n\t}\n\n\toverride async run(accessor: ServicesAccessor, match: RenderableMatch | undefined): Promise<any> {\n\t\tawait copyMatchCommand(accessor, match);\n\t}\n});\n\nregisterAction2(class CopyPathCommandAction extends Action2 {\n\n\tconstructor(\n\t) {\n\t\tsuper({\n\t\t\tid: Constants.CopyPathCommandId,\n\t\t\ttitle: {\n\t\t\t\tvalue: nls.localize('copyPathLabel', \"Copy Path\"),\n\t\t\t\toriginal: 'Copy Path'\n\t\t\t},\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: Constants.FileMatchOrFolderMatchWithResourceFocusKey,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyC,\n\t\t\t\twin: {\n\t\t\t\t\tprimary: KeyMod.Shift | KeyMod.Alt | KeyCode.KeyC\n\t\t\t\t},\n\t\t\t},\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.SearchContext,\n\t\t\t\twhen: Constants.FileMatchOrFolderMatchWithResourceFocusKey,\n\t\t\t\tgroup: 'search_2',\n\t\t\t\torder: 2\n\t\t\t}]\n\t\t});\n\n\t}\n\n\toverride async run(accessor: ServicesAccessor, fileMatch: FileMatch | FolderMatchWithResource | undefined): Promise<any> {\n\t\tawait copyPathCommand(accessor, fileMatch);\n\t}\n});\n\nregisterAction2(class CopyAllCommandAction extends Action2 {\n\n\tconstructor(\n\t) {\n\t\tsuper({\n\t\t\tid: Constants.CopyAllCommandId,\n\t\t\ttitle: {\n\t\t\t\tvalue: nls.localize('copyAllLabel', \"Copy All\"),\n\t\t\t\toriginal: 'Copy All'\n\t\t\t},\n\t\t\tcategory,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.SearchContext,\n\t\t\t\twhen: Constants.HasSearchResults,\n\t\t\t\tgroup: 'search_2',\n\t\t\t\torder: 3\n\t\t\t}]\n\t\t});\n\n\t}\n\n\toverride async run(accessor: ServicesAccessor): Promise<any> {\n\t\tawait copyAllCommand(accessor);\n\t}\n});\n\n//#endregion\n\n//#region Helpers\nexport const lineDelimiter = isWindows ? '\\r\\n' : '\\n';\n\nasync function copyPathCommand(accessor: ServicesAccessor, fileMatch: FileMatch | FolderMatchWithResource | undefined) {\n\tif (!fileMatch) {\n\t\tconst selection = getSelectedRow(accessor);\n\t\tif (!(selection instanceof FileMatch || selection instanceof FolderMatchWithResource)) {\n\t\t\treturn;\n\t\t}\n\n\t\tfileMatch = selection;\n\t}\n\n\tconst clipboardService = accessor.get(IClipboardService);\n\tconst labelService = accessor.get(ILabelService);\n\n\tconst text = labelService.getUriLabel(fileMatch.resource, { noPrefix: true });\n\tawait clipboardService.writeText(text);\n}\n\nasync function copyMatchCommand(accessor: ServicesAccessor, match: RenderableMatch | undefined) {\n\tif (!match) {\n\t\tconst selection = getSelectedRow(accessor);\n\t\tif (!selection) {\n\t\t\treturn;\n\t\t}\n\n\t\tmatch = selection;\n\t}\n\n\tconst clipboardService = accessor.get(IClipboardService);\n\tconst labelService = accessor.get(ILabelService);\n\n\tlet text: string | undefined;\n\tif (match instanceof Match) {\n\t\ttext = matchToString(match);\n\t} else if (match instanceof FileMatch) {\n\t\ttext = fileMatchToString(match, labelService).text;\n\t} else if (match instanceof FolderMatch) {\n\t\ttext = folderMatchToString(match, labelService).text;\n\t}\n\n\tif (text) {\n\t\tawait clipboardService.writeText(text);\n\t}\n}\n\nasync function copyAllCommand(accessor: ServicesAccessor) {\n\tconst viewsService = accessor.get(IViewsService);\n\tconst clipboardService = accessor.get(IClipboardService);\n\tconst labelService = accessor.get(ILabelService);\n\n\tconst searchView = getSearchView(viewsService);\n\tif (searchView) {\n\t\tconst root = searchView.searchResult;\n\n\t\tconst text = allFolderMatchesToString(root.folderMatches(), labelService);\n\t\tawait clipboardService.writeText(text);\n\t}\n}\n\nfunction matchToString(match: Match, indent = 0): string {\n\tconst getFirstLinePrefix = () => `${match.range().startLineNumber},${match.range().startColumn}`;\n\tconst getOtherLinePrefix = (i: number) => match.range().startLineNumber + i + '';\n\n\tconst fullMatchLines = match.fullPreviewLines();\n\tconst largestPrefixSize = fullMatchLines.reduce((largest, _, i) => {\n\t\tconst thisSize = i === 0 ?\n\t\t\tgetFirstLinePrefix().length :\n\t\t\tgetOtherLinePrefix(i).length;\n\n\t\treturn Math.max(thisSize, largest);\n\t}, 0);\n\n\tconst formattedLines = fullMatchLines\n\t\t.map((line, i) => {\n\t\t\tconst prefix = i === 0 ?\n\t\t\t\tgetFirstLinePrefix() :\n\t\t\t\tgetOtherLinePrefix(i);\n\n\t\t\tconst paddingStr = ' '.repeat(largestPrefixSize - prefix.length);\n\t\t\tconst indentStr = ' '.repeat(indent);\n\t\t\treturn `${indentStr}${prefix}: ${paddingStr}${line}`;\n\t\t});\n\n\treturn formattedLines.join('\\n');\n}\n\nfunction fileFolderMatchToString(match: FileMatch | FolderMatch | FolderMatchWithResource, labelService: ILabelService): { text: string; count: number } {\n\tif (match instanceof FileMatch) {\n\t\treturn fileMatchToString(match, labelService);\n\t} else {\n\t\treturn folderMatchToString(match, labelService);\n\t}\n}\n\nfunction fileMatchToString(fileMatch: FileMatch, labelService: ILabelService): { text: string; count: number } {\n\tconst matchTextRows = fileMatch.matches()\n\t\t.sort(searchMatchComparer)\n\t\t.map(match => matchToString(match, 2));\n\tconst uriString = labelService.getUriLabel(fileMatch.resource, { noPrefix: true });\n\treturn {\n\t\ttext: `${uriString}${lineDelimiter}${matchTextRows.join(lineDelimiter)}`,\n\t\tcount: matchTextRows.length\n\t};\n}\n\nfunction folderMatchToString(folderMatch: FolderMatchWithResource | FolderMatch, labelService: ILabelService): { text: string; count: number } {\n\tconst results: string[] = [];\n\tlet numMatches = 0;\n\n\tconst matches = folderMatch.matches().sort(searchMatchComparer);\n\n\tmatches.forEach(match => {\n\t\tconst result = fileFolderMatchToString(match, labelService);\n\t\tnumMatches += result.count;\n\t\tresults.push(result.text);\n\t});\n\n\treturn {\n\t\ttext: results.join(lineDelimiter + lineDelimiter),\n\t\tcount: numMatches\n\t};\n}\n\nfunction allFolderMatchesToString(folderMatches: Array<FolderMatchWithResource | FolderMatch>, labelService: ILabelService): string {\n\tconst folderResults: string[] = [];\n\tfolderMatches = folderMatches.sort(searchMatchComparer);\n\tfor (let i = 0; i < folderMatches.length; i++) {\n\t\tconst folderResult = folderMatchToString(folderMatches[i], labelService);\n\t\tif (folderResult.count) {\n\t\t\tfolderResults.push(folderResult.text);\n\t\t}\n\t}\n\n\treturn folderResults.join(lineDelimiter + lineDelimiter);\n}\n\nfunction getSelectedRow(accessor: ServicesAccessor): RenderableMatch | undefined | null {\n\tconst viewsService = accessor.get(IViewsService);\n\tconst searchView = getSearchView(viewsService);\n\treturn searchView?.getControl().getSelection()[0];\n}\n\n//#endregion\n"]}