{"version":3,"sources":["vs/workbench/contrib/search/browser/searchMessage.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAiBzF,MAAM,IAAI,GAAkB,CAClC,OAAkC,EAClC,oBAAyB,EACzB,mBAAwB,EACxB,aAAkB,EAClB,cAAmB,EACnB,eAAoB,EACpB,aAAyB,EACX,EAAE;QAChB,MAAM,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC;QACzC,MAAM,UAAU,GAAG,IAAA,gBAAG,EAAa,OAAO,CAAC,IAAI,CAAC,CAAC;QACjD,GAAG,CAAC,GAAG,CAAI,GAAG,EACb,GAAG,CAAC,CAAC,CAAC,GAAG;YACR,2BAAY,CAAC,SAAS,CACrB,OAAO,CAAC,IAAI,KAAK,8CAA6B,CAAC,WAAW;gBACzD,CAAC,CAAC,kBAAQ,CAAC,IAAI;gBACf,CAAC,CAAC,kBAAQ,CAAC,OAAO,CAAC;iBACnB,KAAK,CAAC,GAAG,CAAC;iBACV,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QAEhB,KAAK,MAAM,IAAI,IAAI,UAAU,CAAC,KAAK,EAAE;YACpC,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;gBAC7B,GAAG,CAAC,GAAG,CAAI,GAAG,EAAE,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;aAC/C;iBAAM;gBACN,MAAM,IAAI,GAAG,oBAAoB,CAAC,cAAc,CAAC,UAAG,EAAG,GAAG,EAAE,IAAI,EAAE;oBACjE,MAAM,EAAE,KAAK,EAAC,IAAI,EAAC,EAAE;wBACpB,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;4BAAE,OAAO;yBAAE;wBACjC,MAAM,MAAM,GAAG,SAAG,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;wBACrC,IAAI,MAAM,CAAC,MAAM,KAAK,iBAAO,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,EAAE;4BACzD,MAAM,MAAM,GAAG,MAAM,cAAc,CAAC,cAAc,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;4BAChE,IAAK,MAAc,EAAE,aAAa,EAAE;gCACnC,aAAa,EAAE,CAAC;6BAChB;yBACD;6BAAM,IAAI,MAAM,CAAC,MAAM,KAAK,iBAAO,CAAC,KAAK,EAAE;4BAC3C,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;yBAC3B;6BAAM;4BACN,IAAI,MAAM,CAAC,MAAM,KAAK,iBAAO,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;gCAC1D,mBAAmB,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAsB,EAAE,IAAwD,EAAE,IAAI,CAAC,CAAC,CAAC;6BAChI;iCAAM;gCACN,mBAAmB,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAgB,EAAE,IAAkC,EAAE,IAAI,CAAC,CAAC,CAAC;6BACpG;yBACD;oBACF,CAAC;iBACD,CAAC,CAAC;gBACH,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;aAC1B;SACD;QACD,OAAO,GAAG,CAAC;IACZ,CAAC,CAAC;IAhDW,QAAA,IAAI,QAgDf","file":"searchMessage.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as dom from 'vs/base/browser/dom';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { parseLinkedText } from 'vs/base/common/linkedText';\nimport Severity from 'vs/base/common/severity';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { SeverityIcon } from 'vs/platform/severityIcon/browser/severityIcon';\nimport { TextSearchCompleteMessage, TextSearchCompleteMessageType } from 'vs/workbench/services/search/common/searchExtTypes';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { Schemas } from 'vs/base/common/network';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { Link } from 'vs/platform/opener/browser/link';\nimport { URI } from 'vs/base/common/uri';\n\nexport const renderSearchMessage = (\n\tmessage: TextSearchCompleteMessage,\n\tinstantiationService: IInstantiationService,\n\tnotificationService: INotificationService,\n\topenerService: IOpenerService,\n\tcommandService: ICommandService,\n\tdisposableStore: DisposableStore,\n\ttriggerSearch: () => void,\n): HTMLElement => {\n\tconst div = dom.$('div.providerMessage');\n\tconst linkedText = parseLinkedText(message.text);\n\tdom.append(div,\n\t\tdom.$('.' +\n\t\t\tSeverityIcon.className(\n\t\t\t\tmessage.type === TextSearchCompleteMessageType.Information\n\t\t\t\t\t? Severity.Info\n\t\t\t\t\t: Severity.Warning)\n\t\t\t\t.split(' ')\n\t\t\t\t.join('.')));\n\n\tfor (const node of linkedText.nodes) {\n\t\tif (typeof node === 'string') {\n\t\t\tdom.append(div, document.createTextNode(node));\n\t\t} else {\n\t\t\tconst link = instantiationService.createInstance(Link, div, node, {\n\t\t\t\topener: async href => {\n\t\t\t\t\tif (!message.trusted) { return; }\n\t\t\t\t\tconst parsed = URI.parse(href, true);\n\t\t\t\t\tif (parsed.scheme === Schemas.command && message.trusted) {\n\t\t\t\t\t\tconst result = await commandService.executeCommand(parsed.path);\n\t\t\t\t\t\tif ((result as any)?.triggerSearch) {\n\t\t\t\t\t\t\ttriggerSearch();\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (parsed.scheme === Schemas.https) {\n\t\t\t\t\t\topenerService.open(parsed);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (parsed.scheme === Schemas.command && !message.trusted) {\n\t\t\t\t\t\t\tnotificationService.error(nls.localize('unable to open trust', \"Unable to open command link from untrusted source: {0}\", href));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tnotificationService.error(nls.localize('unable to open', \"Unable to open unknown link: {0}\", href));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tdisposableStore.add(link);\n\t\t}\n\t}\n\treturn div;\n};\n"]}