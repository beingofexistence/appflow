{"version":3,"sources":["vs/workbench/contrib/search/browser/searchActionsSymbol.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAUhG,iBAAiB;IACjB,IAAA,aAAG,EAAa,MAAM,oBAAqB,SAAQ,aAAG;iBAErC,OAAE,GAAG,iCAAiC,CAAC;iBACvC,UAAK,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAoB,EAAE,IAA8B,CAAC,CAAC;iBAC3E,uBAAkB,GAAG,GAAG,CAAC;QAEzC;YAEC,KAAK,CAAC;gBACL,EAAE,EAAE,SAAS,CAAC,IAAI;gBAClB,KAAK,EAAE;oBACN,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAoB,EAAE,IAA8B,CAAC;oBACzE,QAAQ,EAAE,8BAA8B;oBACxC,aAAa,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAsE,CAApE,CAAsE,EAAnE,EAAE,AAAiG,CAAC,wBAAzE,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC;iBAChG;gBACD,EAAE,EAAE,IAAI;gBACR,UAAU,EAAE;oBACX,MAAM,6CAAmC;oBACzC,OAAO,EAAE,iDAA6B;iBACtC;gBACD,IAAI,EAAE;oBACL,EAAE,EAAE,aAAG,CAAI,aAAa;oBACxB,KAAK,EAAE,cAAc;oBACrB,KAAK,EAAE,CAAC;iBACR;aACD,CAAC,CAAC;QACJ,CAAC;QAEQ,KAAK,CAAC,GAAG,CAAC,QAA0B;YAC5C,QAAQ,CAAC,GAAG,CAAC,gBAAG,CAAgB,CAAC,WAAW,CAAC,IAAI,CAAC,oBAAoB,CAAC,kBAAkB,CAAC,CAAC;QAC5F,CAAC;KACD,CAAC,CAAC;;AAEH,YAAY","file":"searchActionsSymbol.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport * as Constants from 'vs/workbench/contrib/search/common/constants';\nimport { Action2, MenuId, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\n\n//#region Actions\nregisterAction2(class ShowAllSymbolsAction extends Action2 {\n\n\tstatic readonly ID = 'workbench.action.showAllSymbols';\n\tstatic readonly LABEL = nls.localize('showTriggerActions', \"Go to Symbol in Workspace...\");\n\tstatic readonly ALL_SYMBOLS_PREFIX = '#';\n\n\tconstructor(\n\t) {\n\t\tsuper({\n\t\t\tid: Constants.ShowAllSymbolsActionId,\n\t\t\ttitle: {\n\t\t\t\tvalue: nls.localize('showTriggerActions', \"Go to Symbol in Workspace...\"),\n\t\t\t\toriginal: 'Go to Symbol in Workspace...',\n\t\t\t\tmnemonicTitle: nls.localize({ key: 'miGotoSymbolInWorkspace', comment: ['&& denotes a mnemonic'] }, \"Go to Symbol in &&Workspace...\")\n\t\t\t},\n\t\t\tf1: true,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyT\n\t\t\t},\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.MenubarGoMenu,\n\t\t\t\tgroup: '3_global_nav',\n\t\t\t\torder: 2\n\t\t\t}\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor): Promise<void> {\n\t\taccessor.get(IQuickInputService).quickAccess.show(ShowAllSymbolsAction.ALL_SYMBOLS_PREFIX);\n\t}\n});\n\n//#endregion\n"]}