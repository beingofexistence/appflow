{"version":3,"sources":["vs/workbench/contrib/search/browser/searchActionsTextQuickAccess.ts"],"names":[],"mappings":";;;IAiBA,IAAA,aAAG,EAAa,MAAM,2BAA4B,SAAQ,aAAG;QAE5D;YAEC,KAAK,CAAC;gBACL,EAAE,EAAE,SAAS,CAAC,IAAI;gBAClB,KAAK,EAAE;oBACN,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAiB,EAAE,IAAkC,CAAC;oBAC1E,QAAQ,EAAE,kCAAkC;iBAC5C;gBACD,QAAQ,EAAE,wBAAI;gBACd,EAAE,EAAE,IAAI;aACR,CAAC,CAAC;QAEJ,CAAC;QAEQ,KAAK,CAAC,GAAG,CAAC,QAA0B,EAAE,KAAkC;YAChF,MAAM,iBAAiB,GAAG,QAAQ,CAAC,GAAG,CAAC,gBAAG,CAAgB,CAAC;YAC3D,MAAM,UAAU,GAAG,aAAa,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;YACjD,iBAAiB,CAAC,WAAW,CAAC,IAAI,CAAC,4BAAI,GAA8B,UAAU,CAAC,CAAC;QAClF,CAAC;KACD,CAAC,CAAC;IAEH,SAAS,aAAa,CAAC,QAA0B;QAChD,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,mBAAG,CAAY,CAAC;QACnD,MAAM,oBAAoB,GAAG,QAAQ,CAAC,GAAG,CAAC,mBAAG,CAAmB,CAAC;QAEjE,MAAM,YAAY,GAAY,aAAa,CAAC,uBAAkC,CAAC;QAC/E,IAAI,CAAC,YAAY,EAAE;YAClB,OAAO,IAAI,CAAC;SACZ;QACD,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,EAAE;YACjC,OAAO,IAAI,CAAC;SACZ;QAED,0DAA0D;QAC1D,MAAM,6BAA6B,GAAG,oBAAoB,CAAC,QAAQ,CAAU,2CAA2C,CAAC,CAAC;QAC1H,IAAI,CAAC,6BAA6B,EAAE;YACnC,OAAO,IAAI,CAAC;SACZ;QAED,OAAO,IAAA,iBAAI,EAAuB,KAAK,EAAE,YAAY,CAAC,CAAC;IACxD,CAAC","file":"searchActionsTextQuickAccess.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from 'vs/nls';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport * as Constants from 'vs/workbench/contrib/search/common/constants';\nimport { RenderableMatch } from 'vs/workbench/contrib/search/browser/searchModel';\nimport { Action2, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { category } from 'vs/workbench/contrib/search/browser/searchActionsBase';\nimport { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\nimport { TEXT_SEARCH_QUICK_ACCESS_PREFIX } from 'vs/workbench/contrib/search/browser/quickTextSearch/textSearchQuickAccess';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IEditor } from 'vs/editor/common/editorCommon';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { getSelectionTextFromEditor } from 'vs/workbench/contrib/search/browser/searchView';\n\nregisterAction2(class TextSearchQuickAccessAction extends Action2 {\n\n\tconstructor(\n\t) {\n\t\tsuper({\n\t\t\tid: Constants.QuickTextSearchActionId,\n\t\t\ttitle: {\n\t\t\t\tvalue: nls.localize('quickTextSearch', \"Quick Text Search (Experimental)\"),\n\t\t\t\toriginal: 'Quick Text Search (Experimental)'\n\t\t\t},\n\t\t\tcategory,\n\t\t\tf1: true\n\t\t});\n\n\t}\n\n\toverride async run(accessor: ServicesAccessor, match: RenderableMatch | undefined): Promise<any> {\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst searchText = getSearchText(accessor) ?? '';\n\t\tquickInputService.quickAccess.show(TEXT_SEARCH_QUICK_ACCESS_PREFIX + searchText);\n\t}\n});\n\nfunction getSearchText(accessor: ServicesAccessor): string | null {\n\tconst editorService = accessor.get(IEditorService);\n\tconst configurationService = accessor.get(IConfigurationService);\n\n\tconst activeEditor: IEditor = editorService.activeTextEditorControl as IEditor;\n\tif (!activeEditor) {\n\t\treturn null;\n\t}\n\tif (!activeEditor.hasTextFocus()) {\n\t\treturn null;\n\t}\n\n\t// only happen if it would also happen for the search view\n\tconst seedSearchStringFromSelection = configurationService.getValue<boolean>('editor.find.seedSearchStringFromSelection');\n\tif (!seedSearchStringFromSelection) {\n\t\treturn null;\n\t}\n\n\treturn getSelectionTextFromEditor(false, activeEditor);\n}\n"]}