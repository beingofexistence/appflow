{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/search/test/browser/searchTestCommon.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAqBhG,SAAgB,IAAI,CAA0B,IAAa;QAC1D,MAAM,QAAQ,GAAG,IAAI,EAAS,CAAC;QAC/B,IAAI,IAAI,EAAE;YACT,OAAO,SAAG,CAAC,IAAI,CAAC,GAAG,QAAQ,GAAG,IAAI,EAAE,CAAC,CAAC;SACtC;aAAM;YACN,IAAI,aAAE,EAAS;gBACd,OAAO,SAAG,CAAC,IAAI,CAAC,GAAG,QAAQ,GAAG,CAAC,CAAC;aAChC;iBAAM;gBACN,OAAO,SAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC1B;SACD;IACF,CAAC;IAXD,oBAWC;IAED,SAAgB,IAAI;QACnB,IAAI,aAAE,EAAS;YACd,OAAO,IAAI,CAAC;SACZ;aAAM;YACN,OAAO,EAAE,CAAC;SACV;IACF,CAAC;IAND,oBAMC;IAED,SAAgB,IAAI,CAAa,oBAA0B;QAC1D,oBAAoB,CAAC,IAAI,CAAC,kBAAG,EAAY,IAAI,uBAAI,EAAc,CAAC,CAAC;QACjE,MAAM,MAAM,GAAG,IAAI,+BAAI,EAAsB,CAAC;QAC9C,MAAM,CAAC,oBAAoB,CAAC,QAAQ,EAAE,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC;QAC9D,oBAAoB,CAAC,IAAI,CAAC,mBAAG,EAAoB,MAAM,CAAC,CAAC;QACzD,OAAO,oBAAoB,CAAC,cAAc,CAAC,mBAAI,CAAS,CAAC;IAC1D,CAAC;IAND,oBAMC;IAED,SAAgB,IAAI,CAAsB,oBAA0B;QACnE,oBAAoB,CAAC,IAAI,CAAC,yBAAG,EAAmB,IAAI,4BAAI,EAAqB,CAAC,CAAC;QAC/E,oBAAoB,CAAC,IAAI,CAAC,gBAAG,EAAiB,IAAI,4BAAI,EAAmB,CAAC,CAAC;QAC3E,oBAAoB,CAAC,IAAI,CAAC,mBAAG,EAAa,IAAI,4BAAI,EAAe,CAAC,CAAC;QACnE,OAAO,oBAAoB,CAAC,cAAc,CAAC,gCAAI,CAAwB,CAAC;IACzE,CAAC;IALD,oBAKC;IAED,SAAgB,IAAI,CAAc,YAAkB,EAAU,MAAoB,EAAE,gBAAgB,GAAG,EAAE;QACxG,YAAY,CAAC,GAAG,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC;IAC5C,CAAC;IAFD,oBAEC","file":"searchTestCommon.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isWindows } from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { ModelService } from 'vs/editor/common/services/modelService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { MockContextKeyService } from 'vs/platform/keybinding/test/common/mockKeybindingService';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { TestThemeService } from 'vs/platform/theme/test/common/testThemeService';\nimport { INotebookEditorService } from 'vs/workbench/contrib/notebook/browser/services/notebookEditorService';\nimport { NotebookEditorWidgetService } from 'vs/workbench/contrib/notebook/browser/services/notebookEditorServiceImpl';\nimport { SearchResult } from 'vs/workbench/contrib/search/browser/searchModel';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IFileMatch } from 'vs/workbench/services/search/common/search';\nimport { TestEditorGroupsService, TestEditorService } from 'vs/workbench/test/browser/workbenchTestServices';\n\nexport function createFileUriFromPathFromRoot(path?: string): URI {\n\tconst rootName = getRootName();\n\tif (path) {\n\t\treturn URI.file(`${rootName}${path}`);\n\t} else {\n\t\tif (isWindows) {\n\t\t\treturn URI.file(`${rootName}/`);\n\t\t} else {\n\t\t\treturn URI.file(rootName);\n\t\t}\n\t}\n}\n\nexport function getRootName(): string {\n\tif (isWindows) {\n\t\treturn 'c:';\n\t} else {\n\t\treturn '';\n\t}\n}\n\nexport function stubModelService(instantiationService: TestInstantiationService): IModelService {\n\tinstantiationService.stub(IThemeService, new TestThemeService());\n\tconst config = new TestConfigurationService();\n\tconfig.setUserConfiguration('search', { searchOnType: true });\n\tinstantiationService.stub(IConfigurationService, config);\n\treturn instantiationService.createInstance(ModelService);\n}\n\nexport function stubNotebookEditorService(instantiationService: TestInstantiationService): INotebookEditorService {\n\tinstantiationService.stub(IEditorGroupsService, new TestEditorGroupsService());\n\tinstantiationService.stub(IContextKeyService, new MockContextKeyService());\n\tinstantiationService.stub(IEditorService, new TestEditorService());\n\treturn instantiationService.createInstance(NotebookEditorWidgetService);\n}\n\nexport function addToSearchResult(searchResult: SearchResult, allRaw: IFileMatch[], searchInstanceID = '') {\n\tsearchResult.add(allRaw, searchInstanceID);\n}\n"]}