{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/search/test/common/extractRange.test.ts"],"names":[],"mappings":"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","file":"extractRange.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { extractRangeFromFilter } from 'vs/workbench/contrib/search/common/search';\n\nsuite('extractRangeFromFilter', () => {\n\n\ttest('basics', async function () {\n\t\tassert.ok(!extractRangeFromFilter(''));\n\t\tassert.ok(!extractRangeFromFilter('/some/path'));\n\t\tassert.ok(!extractRangeFromFilter('/some/path/file.txt'));\n\n\t\tfor (const lineSep of [':', '#', '(', ':line ']) {\n\t\t\tfor (const colSep of [':', '#', ',']) {\n\t\t\t\tconst base = '/some/path/file.txt';\n\n\t\t\t\tlet res = extractRangeFromFilter(`${base}${lineSep}20`);\n\t\t\t\tassert.strictEqual(res?.filter, base);\n\t\t\t\tassert.strictEqual(res?.range.startLineNumber, 20);\n\t\t\t\tassert.strictEqual(res?.range.startColumn, 1);\n\n\t\t\t\tres = extractRangeFromFilter(`${base}${lineSep}20${colSep}`);\n\t\t\t\tassert.strictEqual(res?.filter, base);\n\t\t\t\tassert.strictEqual(res?.range.startLineNumber, 20);\n\t\t\t\tassert.strictEqual(res?.range.startColumn, 1);\n\n\t\t\t\tres = extractRangeFromFilter(`${base}${lineSep}20${colSep}3`);\n\t\t\t\tassert.strictEqual(res?.filter, base);\n\t\t\t\tassert.strictEqual(res?.range.startLineNumber, 20);\n\t\t\t\tassert.strictEqual(res?.range.startColumn, 3);\n\t\t\t}\n\t\t}\n\t});\n\n\ttest('allow space after path', async function () {\n\t\tconst res = extractRangeFromFilter('/some/path/file.txt (19,20)');\n\n\t\tassert.strictEqual(res?.filter, '/some/path/file.txt');\n\t\tassert.strictEqual(res?.range.startLineNumber, 19);\n\t\tassert.strictEqual(res?.range.startColumn, 20);\n\t});\n\n\tsuite('unless', function () {\n\t\tconst testSpecs = [\n\t\t\t// alpha-only symbol after unless\n\t\t\t{ filter: '/some/path/file.txt@alphasymbol', unless: ['@'], result: undefined },\n\t\t\t// unless as first char\n\t\t\t{ filter: '@/some/path/file.txt (19,20)', unless: ['@'], result: undefined },\n\t\t\t// unless as last char\n\t\t\t{ filter: '/some/path/file.txt (19,20)@', unless: ['@'], result: undefined },\n\t\t\t// unless before ,\n\t\t\t{\n\t\t\t\tfilter: '/some/@path/file.txt (19,20)', unless: ['@'], result: {\n\t\t\t\t\tfilter: '/some/@path/file.txt',\n\t\t\t\t\trange: {\n\t\t\t\t\t\tendColumn: 20,\n\t\t\t\t\t\tendLineNumber: 19,\n\t\t\t\t\t\tstartColumn: 20,\n\t\t\t\t\t\tstartLineNumber: 19\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t// unless before :\n\t\t\t{\n\t\t\t\tfilter: '/some/@path/file.txt:19:20', unless: ['@'], result: {\n\t\t\t\t\tfilter: '/some/@path/file.txt',\n\t\t\t\t\trange: {\n\t\t\t\t\t\tendColumn: 20,\n\t\t\t\t\t\tendLineNumber: 19,\n\t\t\t\t\t\tstartColumn: 20,\n\t\t\t\t\t\tstartLineNumber: 19\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\t// unless before #\n\t\t\t{\n\t\t\t\tfilter: '/some/@path/file.txt#19', unless: ['@'], result: {\n\t\t\t\t\tfilter: '/some/@path/file.txt',\n\t\t\t\t\trange: {\n\t\t\t\t\t\tendColumn: 1,\n\t\t\t\t\t\tendLineNumber: 19,\n\t\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\t\tstartLineNumber: 19\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t];\n\t\tfor (const { filter, unless, result } of testSpecs) {\n\t\t\ttest(`${filter} - ${JSON.stringify(unless)}`, () => {\n\t\t\t\tassert.deepStrictEqual(extractRangeFromFilter(filter, unless), result);\n\t\t\t});\n\t\t}\n\t});\n});\n\n"]}