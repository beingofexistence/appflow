{"version":3,"sources":["vs/workbench/contrib/limitIndicator/browser/limitIndicator.contribution.ts"],"names":[],"mappings":"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","file":"limitIndicator.contribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport Severity from 'vs/base/common/severity';\nimport { ICodeEditor, getCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { ILanguageStatus, ILanguageStatusService } from 'vs/workbench/services/languageStatus/common/languageStatusService';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContributionsRegistry, IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { Event } from 'vs/base/common/event';\nimport * as nls from 'vs/nls';\n\nimport { FoldingController } from 'vs/editor/contrib/folding/browser/folding';\nimport { ColorDetector } from 'vs/editor/contrib/colorPicker/browser/colorDetector';\n\nconst openSettingsCommand = 'workbench.action.openSettings';\nconst configureSettingsLabel = nls.localize('status.button.configure', \"Configure\");\n\n/**\n * Uses that language status indicator to show information which language features have been limited for performance reasons.\n * Currently this is used for folding ranges and for color decorators.\n */\nexport class LimitIndicatorContribution extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IEditorService editorService: IEditorService,\n\t\t@ILanguageStatusService languageStatusService: ILanguageStatusService\n\t) {\n\t\tsuper();\n\n\t\tconst accessors = [new ColorDecorationAccessor(), new FoldingRangeAccessor()];\n\t\tconst statusEntries = accessors.map(indicator => new LanguageStatusEntry(languageStatusService, indicator));\n\t\tstatusEntries.forEach(entry => this._register(entry));\n\n\t\tlet control: any;\n\n\t\tconst onActiveEditorChanged = () => {\n\t\t\tconst activeControl = editorService.activeTextEditorControl;\n\t\t\tif (activeControl === control) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcontrol = activeControl;\n\t\t\tconst editor = getCodeEditor(activeControl);\n\n\t\t\tstatusEntries.forEach(statusEntry => statusEntry.onActiveEditorChanged(editor));\n\t\t};\n\t\tthis._register(editorService.onDidActiveEditorChange(onActiveEditorChanged));\n\n\t\tonActiveEditorChanged();\n\t}\n\n}\n\n\nexport interface LimitInfo {\n\treadonly onDidChange: Event<void>;\n\n\treadonly computed: number;\n\treadonly limited: number | false;\n}\n\ninterface LanguageFeatureAccessor {\n\treadonly id: string;\n\treadonly name: string;\n\treadonly label: string;\n\treadonly source: string;\n\treadonly settingsId: string;\n\tgetLimitReporter(editor: ICodeEditor): LimitInfo | undefined;\n}\n\nclass ColorDecorationAccessor implements LanguageFeatureAccessor {\n\treadonly id = 'decoratorsLimitInfo';\n\treadonly name = nls.localize('colorDecoratorsStatusItem.name', 'Color Decorator Status');\n\treadonly label = nls.localize('status.limitedColorDecorators.short', 'Color Decorators');\n\treadonly source = nls.localize('colorDecoratorsStatusItem.source', 'Color Decorators');\n\treadonly settingsId = 'editor.colorDecoratorsLimit';\n\n\tgetLimitReporter(editor: ICodeEditor): LimitInfo | undefined {\n\t\treturn ColorDetector.get(editor)?.limitReporter;\n\t}\n}\n\nclass FoldingRangeAccessor implements LanguageFeatureAccessor {\n\treadonly id = 'foldingLimitInfo';\n\treadonly name = nls.localize('foldingRangesStatusItem.name', 'Folding Status');\n\treadonly label = nls.localize('status.limitedFoldingRanges.short', 'Folding Ranges');\n\treadonly source = nls.localize('foldingRangesStatusItem.source', 'Folding');\n\treadonly settingsId = 'editor.foldingMaximumRegions';\n\n\tgetLimitReporter(editor: ICodeEditor): LimitInfo | undefined {\n\t\treturn FoldingController.get(editor)?.limitReporter;\n\t}\n}\n\nclass LanguageStatusEntry {\n\n\tprivate _limitStatusItem: IDisposable | undefined;\n\tprivate _indicatorChangeListener: IDisposable | undefined;\n\n\tconstructor(private languageStatusService: ILanguageStatusService, private accessor: LanguageFeatureAccessor) {\n\t}\n\n\tonActiveEditorChanged(editor: ICodeEditor | null): boolean {\n\t\tif (this._indicatorChangeListener) {\n\t\t\tthis._indicatorChangeListener.dispose();\n\t\t\tthis._indicatorChangeListener = undefined;\n\t\t}\n\n\t\tlet info: LimitInfo | undefined;\n\t\tif (editor) {\n\t\t\tinfo = this.accessor.getLimitReporter(editor);\n\t\t}\n\t\tthis.updateStatusItem(info);\n\t\tif (info) {\n\t\t\tthis._indicatorChangeListener = info.onDidChange(_ => {\n\t\t\t\tthis.updateStatusItem(info);\n\t\t\t});\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\n\tprivate updateStatusItem(info: LimitInfo | undefined) {\n\t\tif (this._limitStatusItem) {\n\t\t\tthis._limitStatusItem.dispose();\n\t\t\tthis._limitStatusItem = undefined;\n\t\t}\n\t\tif (info && info.limited !== false) {\n\t\t\tconst status: ILanguageStatus = {\n\t\t\t\tid: this.accessor.id,\n\t\t\t\tselector: '*',\n\t\t\t\tname: this.accessor.name,\n\t\t\t\tseverity: Severity.Warning,\n\t\t\t\tlabel: this.accessor.label,\n\t\t\t\tdetail: nls.localize('status.limited.details', 'only {0} shown for performance reasons', info.limited),\n\t\t\t\tcommand: { id: openSettingsCommand, arguments: [this.accessor.settingsId], title: configureSettingsLabel },\n\t\t\t\taccessibilityInfo: undefined,\n\t\t\t\tsource: this.accessor.source,\n\t\t\t\tbusy: false\n\t\t\t};\n\t\t\tthis._limitStatusItem = this.languageStatusService.addStatus(status);\n\t\t}\n\t}\n\n\tpublic dispose() {\n\t\tthis._limitStatusItem?.dispose;\n\t\tthis._limitStatusItem = undefined;\n\t\tthis._indicatorChangeListener?.dispose;\n\t\tthis._indicatorChangeListener = undefined;\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(\n\tLimitIndicatorContribution,\n\tLifecyclePhase.Restored\n);\n"]}