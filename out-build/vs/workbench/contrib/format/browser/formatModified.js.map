{"version":3,"sources":["vs/workbench/contrib/format/browser/formatModified.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAmBhG,IAAA,sBAAG,EAAkB,MAAM,oBAAqB,SAAQ,sBAAG;QAE1D;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,6BAA6B;gBACjC,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAe,EAAE,IAAuB,CAAC;gBAC7D,KAAK,EAAE,uBAAuB;gBAC9B,YAAY,EAAE,gBAAG,CAAY,GAAG,CAAC,qCAAiB,CAAC,QAAQ,EAAE,qCAAiB,CAAC,sCAAsC,CAAC;aACtH,CAAC,CAAC;QACJ,CAAC;QAED,KAAK,CAAC,GAAG,CAAC,QAA0B,EAAE,MAAmB;YACxD,MAAM,YAAY,GAAG,QAAQ,CAAC,GAAG,CAAC,mBAAG,CAAmB,CAAC;YAEzD,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE;gBACvB,OAAO;aACP;YAED,MAAM,MAAM,GAAG,MAAM,YAAY,CAAC,cAAc,CAAC,IAAI,EAAe,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC;YACvF,IAAI,IAAA,YAAG,EAAa,MAAM,CAAC,EAAE;gBAC5B,OAAO,YAAY,CAAC,cAAc,CACjC,YAAG,EAAuC,MAAM,EAAE,MAAM,mCAC/B,cAAG,CAAM,IAAI,EAAE,gCAAiB,CAAC,IAAI,CAC9D,CAAC;aACF;QACF,CAAC;KACD,CAAC,CAAC;IAGI,KAAK,UAAU,IAAI,CAAc,QAA0B,EAAE,QAAoB;QACvF,MAAM,gBAAgB,GAAG,QAAQ,CAAC,GAAG,CAAC,gBAAI,CAAc,CAAC;QACzD,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,kBAAG,CAAkB,CAAC;QACzD,MAAM,YAAY,GAAG,QAAQ,CAAC,GAAG,CAAC,qBAAG,CAAe,CAAC;QAErD,MAAM,QAAQ,GAAG,MAAM,IAAA,yBAAI,EAAgB,gBAAgB,EAAE,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,aAAa,EAAE,EAAE,IAAA,WAAG,EAAoB,QAAQ,CAAC,CAAC,CAAC;QACvI,IAAI,CAAC,QAAQ,EAAE;YACd,OAAO,IAAI,CAAC,CAAC,mIAAmI;SAChJ;QAED,MAAM,MAAM,GAAY,EAAE,CAAC;QAC3B,MAAM,GAAG,GAAG,MAAM,YAAY,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;QAC9D,IAAI;YACH,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,EAAE;gBAC/D,OAAO,SAAS,CAAC;aACjB;YACD,MAAM,OAAO,GAAG,MAAM,aAAa,CAAC,gBAAgB,CAAC,QAAQ,EAAE,QAAQ,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;YACpF,IAAI,CAAC,IAAA,YAAG,EAAa,OAAO,CAAC,EAAE;gBAC9B,OAAO,SAAS,CAAC;aACjB;YACD,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;gBAC7B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,IAAI,WAAG,CACzC,MAAM,CAAC,uBAAuB,EAAE,CAAC,EACjC,MAAM,CAAC,qBAAqB,IAAI,MAAM,CAAC,uBAAuB,CAAC,8CAA8C,EAAE,MAAM,CAAC,gBAAgB,CAAC,CACvI,CAAC,CAAC;aACH;SACD;gBAAS;YACT,GAAG,CAAC,OAAO,EAAE,CAAC;SACd;QAED,OAAO,MAAM,CAAC;IACf,CAAC;IA/BD,oBA+BC","file":"formatModified.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isNonEmptyArray } from 'vs/base/common/arrays';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, registerEditorAction, ServicesAccessor } from 'vs/editor/browser/editorExtensions';\nimport { Range } from 'vs/editor/common/core/range';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { ITextModel, shouldSynchronizeModel } from 'vs/editor/common/model';\nimport { IEditorWorkerService } from 'vs/editor/common/services/editorWorker';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { formatDocumentRangesWithSelectedProvider, FormattingMode } from 'vs/editor/contrib/format/browser/format';\nimport * as nls from 'vs/nls';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { Progress } from 'vs/platform/progress/common/progress';\nimport { getOriginalResource } from 'vs/workbench/contrib/scm/browser/dirtydiffDecorator';\nimport { IQuickDiffService } from 'vs/workbench/contrib/scm/common/quickDiff';\n\nregisterEditorAction(class FormatModifiedAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.formatChanges',\n\t\t\tlabel: nls.localize('formatChanges', \"Format Modified Lines\"),\n\t\t\talias: 'Format Modified Lines',\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasDocumentSelectionFormattingProvider),\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst instaService = accessor.get(IInstantiationService);\n\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ranges = await instaService.invokeFunction(getModifiedRanges, editor.getModel());\n\t\tif (isNonEmptyArray(ranges)) {\n\t\t\treturn instaService.invokeFunction(\n\t\t\t\tformatDocumentRangesWithSelectedProvider, editor, ranges,\n\t\t\t\tFormattingMode.Explicit, Progress.None, CancellationToken.None\n\t\t\t);\n\t\t}\n\t}\n});\n\n\nexport async function getModifiedRanges(accessor: ServicesAccessor, modified: ITextModel): Promise<Range[] | undefined | null> {\n\tconst quickDiffService = accessor.get(IQuickDiffService);\n\tconst workerService = accessor.get(IEditorWorkerService);\n\tconst modelService = accessor.get(ITextModelService);\n\n\tconst original = await getOriginalResource(quickDiffService, modified.uri, modified.getLanguageId(), shouldSynchronizeModel(modified));\n\tif (!original) {\n\t\treturn null; // let undefined signify no changes, null represents no source control (there's probably a better way, but I can't think of one rn)\n\t}\n\n\tconst ranges: Range[] = [];\n\tconst ref = await modelService.createModelReference(original);\n\ttry {\n\t\tif (!workerService.canComputeDirtyDiff(original, modified.uri)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst changes = await workerService.computeDirtyDiff(original, modified.uri, false);\n\t\tif (!isNonEmptyArray(changes)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tfor (const change of changes) {\n\t\t\tranges.push(modified.validateRange(new Range(\n\t\t\t\tchange.modifiedStartLineNumber, 1,\n\t\t\t\tchange.modifiedEndLineNumber || change.modifiedStartLineNumber /*endLineNumber is 0 when things got deleted*/, Number.MAX_SAFE_INTEGER)\n\t\t\t));\n\t\t}\n\t} finally {\n\t\tref.dispose();\n\t}\n\n\treturn ranges;\n}\n"]}