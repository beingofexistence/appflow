{"version":3,"sources":["vs/workbench/contrib/format/browser/formatActionsNone.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAiBhG,KAAK,UAAU,kBAAkB,CAAC,oBAA0B,EAAuB,KAAa;QAC/F,MAAM,OAAO,GAAG,MAAM,oBAAoB,CAAC,iBAAiB,CAAC,iBAAI,yCAAuC,IAAI,CAAC,CAAC;QAC9G,IAAI,OAAO,EAAE;YACZ,CAAC,OAAO,EAAE,oBAAoB,EAAmC,CAAA,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SAChF;IACF,CAAC;IAED,IAAA,sBAAG,EAAkB,MAAM,4BAA6B,SAAQ,sBAAG;QAElE;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,mCAAmC;gBACvC,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,CAA+B,EAAE,IAAiB,CAAC;gBACvE,KAAK,EAAE,iBAAiB;gBACxB,YAAY,EAAE,gBAAG,CAAY,GAAG,CAAC,qCAAiB,CAAC,QAAQ,EAAE,qCAAiB,CAAC,6BAA6B,CAAC,SAAS,EAAE,CAAC;gBACzH,MAAM,EAAE;oBACP,MAAM,EAAE,qCAAiB,CAAC,eAAe;oBACzC,OAAO,EAAE,8CAAyB,wBAAe;oBACjD,KAAK,EAAE,EAAE,OAAO,EAAE,mDAA6B,wBAAe,EAAE;oBAChE,MAAM,0CAAgC;iBACtC;aACD,CAAC,CAAC;QACJ,CAAC;QAED,KAAK,CAAC,GAAG,CAAC,QAA0B,EAAE,MAAmB;YACxD,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,EAAE;gBACvB,OAAO;aACP;YAED,MAAM,cAAc,GAAG,QAAQ,CAAC,GAAG,CAAC,cAAG,CAAa,CAAC;YACrD,MAAM,oBAAoB,GAAG,QAAQ,CAAC,GAAG,CAAC,oBAAI,CAAsB,CAAC;YACrE,MAAM,mBAAmB,GAAG,QAAQ,CAAC,GAAG,CAAC,kBAAG,CAAkB,CAAC;YAC/D,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,aAAG,CAAY,CAAC;YACnD,MAAM,uBAAuB,GAAG,QAAQ,CAAC,GAAG,CAAC,sBAAG,CAAsB,CAAC;YAEvE,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC;YAChC,MAAM,cAAc,GAAG,uBAAuB,CAAC,8BAA8B,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC;YAEhG,IAAI,cAAc,GAAG,CAAC,EAAE;gBACvB,OAAO,cAAc,CAAC,cAAc,CAAC,uCAAuC,CAAC,CAAC;aAC9E;iBAAM,IAAI,cAAc,KAAK,CAAC,EAAE;gBAChC,OAAO,cAAc,CAAC,cAAc,CAAC,8BAA8B,CAAC,CAAC;aACrE;iBAAM,IAAI,KAAK,CAAC,oBAAoB,EAAE,EAAE;gBACxC,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAW,EAAE,IAAuD,CAAC,CAAC,CAAC;aAC7G;iBAAM;gBACN,MAAM,QAAQ,GAAG,KAAK,CAAC,aAAa,EAAE,CAAC;gBACvC,MAAM,OAAO,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAa,EAAE,IAAkD,EAAE,QAAQ,CAAC,CAAC;gBAC1G,MAAM,EAAE,SAAS,EAAE,GAAG,MAAM,aAAa,CAAC,OAAO,CAAC;oBACjD,OAAO;oBACP,aAAa,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAgE,CAA9D,CAAgE,EAA7D,EAAE,AAAmF,CAAC,kBAAjE,EAAE,OAAO,EAAE,CAAC,uBAAuB,CAAC;iBAC1F,CAAC,CAAC;gBACH,IAAI,SAAS,EAAE;oBACd,kBAAkB,CAAC,oBAAoB,EAAE,uBAAuB,QAAQ,EAAE,CAAC,CAAC;iBAC5E;aACD;QACF,CAAC;KACD,CAAC,CAAC","file":"formatActionsNone.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, registerEditorAction, ServicesAccessor } from 'vs/editor/browser/editorExtensions';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport * as nls from 'vs/nls';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { VIEWLET_ID, IExtensionsViewPaneContainer } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IPaneCompositePartService } from 'vs/workbench/services/panecomposite/browser/panecomposite';\nimport { ViewContainerLocation } from 'vs/workbench/common/views';\nimport { ILanguageFeaturesService } from 'vs/editor/common/services/languageFeatures';\n\nasync function showExtensionQuery(paneCompositeService: IPaneCompositePartService, query: string) {\n\tconst viewlet = await paneCompositeService.openPaneComposite(VIEWLET_ID, ViewContainerLocation.Sidebar, true);\n\tif (viewlet) {\n\t\t(viewlet?.getViewPaneContainer() as IExtensionsViewPaneContainer).search(query);\n\t}\n}\n\nregisterEditorAction(class FormatDocumentMultipleAction extends EditorAction {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.formatDocument.none',\n\t\t\tlabel: nls.localize('formatDocument.label.multiple', \"Format Document\"),\n\t\t\talias: 'Format Document',\n\t\t\tprecondition: ContextKeyExpr.and(EditorContextKeys.writable, EditorContextKeys.hasDocumentFormattingProvider.toNegated()),\n\t\t\tkbOpts: {\n\t\t\t\tkbExpr: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyMod.Shift | KeyMod.Alt | KeyCode.KeyF,\n\t\t\t\tlinux: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyI },\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tif (!editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst commandService = accessor.get(ICommandService);\n\t\tconst paneCompositeService = accessor.get(IPaneCompositePartService);\n\t\tconst notificationService = accessor.get(INotificationService);\n\t\tconst dialogService = accessor.get(IDialogService);\n\t\tconst languageFeaturesService = accessor.get(ILanguageFeaturesService);\n\n\t\tconst model = editor.getModel();\n\t\tconst formatterCount = languageFeaturesService.documentFormattingEditProvider.all(model).length;\n\n\t\tif (formatterCount > 1) {\n\t\t\treturn commandService.executeCommand('editor.action.formatDocument.multiple');\n\t\t} else if (formatterCount === 1) {\n\t\t\treturn commandService.executeCommand('editor.action.formatDocument');\n\t\t} else if (model.isTooLargeForSyncing()) {\n\t\t\tnotificationService.warn(nls.localize('too.large', \"This file cannot be formatted because it is too large\"));\n\t\t} else {\n\t\t\tconst langName = model.getLanguageId();\n\t\t\tconst message = nls.localize('no.provider', \"There is no formatter for '{0}' files installed.\", langName);\n\t\t\tconst { confirmed } = await dialogService.confirm({\n\t\t\t\tmessage,\n\t\t\t\tprimaryButton: nls.localize({ key: 'install.formatter', comment: ['&& denotes a mnemonic'] }, \"&&Install Formatter...\")\n\t\t\t});\n\t\t\tif (confirmed) {\n\t\t\t\tshowExtensionQuery(paneCompositeService, `category:formatters ${langName}`);\n\t\t\t}\n\t\t}\n\t}\n});\n"]}