{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/test/common/environmentVariableShared.test.ts"],"names":[],"mappings":"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","file":"environmentVariableShared.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepStrictEqual } from 'assert';\nimport { deserializeEnvironmentVariableCollection, serializeEnvironmentVariableCollection } from 'vs/platform/terminal/common/environmentVariableShared';\nimport { EnvironmentVariableMutatorType, IEnvironmentVariableMutator } from 'vs/platform/terminal/common/environmentVariable';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nsuite('EnvironmentVariable - deserializeEnvironmentVariableCollection', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('should construct correctly with 3 arguments', () => {\n\t\tconst c = deserializeEnvironmentVariableCollection([\n\t\t\t['A', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }],\n\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Append, variable: 'B' }],\n\t\t\t['C', { value: 'c', type: EnvironmentVariableMutatorType.Prepend, variable: 'C' }]\n\t\t]);\n\t\tconst keys = [...c.keys()];\n\t\tdeepStrictEqual(keys, ['A', 'B', 'C']);\n\t\tdeepStrictEqual(c.get('A'), { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' });\n\t\tdeepStrictEqual(c.get('B'), { value: 'b', type: EnvironmentVariableMutatorType.Append, variable: 'B' });\n\t\tdeepStrictEqual(c.get('C'), { value: 'c', type: EnvironmentVariableMutatorType.Prepend, variable: 'C' });\n\t});\n});\n\nsuite('EnvironmentVariable - serializeEnvironmentVariableCollection', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('should correctly serialize the object', () => {\n\t\tconst collection = new Map<string, IEnvironmentVariableMutator>();\n\t\tdeepStrictEqual(serializeEnvironmentVariableCollection(collection), []);\n\t\tcollection.set('A', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' });\n\t\tcollection.set('B', { value: 'b', type: EnvironmentVariableMutatorType.Append, variable: 'B' });\n\t\tcollection.set('C', { value: 'c', type: EnvironmentVariableMutatorType.Prepend, variable: 'C' });\n\t\tdeepStrictEqual(serializeEnvironmentVariableCollection(collection), [\n\t\t\t['A', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }],\n\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Append, variable: 'B' }],\n\t\t\t['C', { value: 'c', type: EnvironmentVariableMutatorType.Prepend, variable: 'C' }]\n\t\t]);\n\t});\n});\n"]}