{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/test/common/environmentVariableCollection.test.ts"],"names":[],"mappings":"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","file":"environmentVariableCollection.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepStrictEqual, strictEqual } from 'assert';\nimport { EnvironmentVariableMutatorType } from 'vs/platform/terminal/common/environmentVariable';\nimport { IProcessEnvironment, isWindows } from 'vs/base/common/platform';\nimport { MergedEnvironmentVariableCollection } from 'vs/platform/terminal/common/environmentVariableCollection';\nimport { deserializeEnvironmentDescriptionMap, deserializeEnvironmentVariableCollection } from 'vs/platform/terminal/common/environmentVariableShared';\nimport { URI } from 'vs/base/common/uri';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nsuite('EnvironmentVariable - MergedEnvironmentVariableCollection', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('ctor', () => {\n\t\ttest('Should keep entries that come after a Prepend or Append type mutators', () => {\n\t\t\tconst merged = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Prepend, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext2', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a2', type: EnvironmentVariableMutatorType.Append, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext3', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a3', type: EnvironmentVariableMutatorType.Prepend, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext4', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a4', type: EnvironmentVariableMutatorType.Append, variable: 'A', options: { applyAtProcessCreation: true, applyAtShellIntegration: true } }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tdeepStrictEqual([...merged.getVariableMap(undefined).entries()], [\n\t\t\t\t['A', [\n\t\t\t\t\t{ extensionIdentifier: 'ext4', type: EnvironmentVariableMutatorType.Append, value: 'a4', variable: 'A', options: { applyAtProcessCreation: true, applyAtShellIntegration: true } },\n\t\t\t\t\t{ extensionIdentifier: 'ext3', type: EnvironmentVariableMutatorType.Prepend, value: 'a3', variable: 'A', options: undefined },\n\t\t\t\t\t{ extensionIdentifier: 'ext2', type: EnvironmentVariableMutatorType.Append, value: 'a2', variable: 'A', options: undefined },\n\t\t\t\t\t{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Prepend, value: 'a1', variable: 'A', options: undefined }\n\t\t\t\t]]\n\t\t\t]);\n\t\t});\n\n\t\ttest('Should remove entries that come after a Replace type mutator', () => {\n\t\t\tconst merged = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Prepend, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext2', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a2', type: EnvironmentVariableMutatorType.Append, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext3', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a3', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext4', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a4', type: EnvironmentVariableMutatorType.Append, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tdeepStrictEqual([...merged.getVariableMap(undefined).entries()], [\n\t\t\t\t['A', [\n\t\t\t\t\t{ extensionIdentifier: 'ext3', type: EnvironmentVariableMutatorType.Replace, value: 'a3', variable: 'A', options: undefined },\n\t\t\t\t\t{ extensionIdentifier: 'ext2', type: EnvironmentVariableMutatorType.Append, value: 'a2', variable: 'A', options: undefined },\n\t\t\t\t\t{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Prepend, value: 'a1', variable: 'A', options: undefined }\n\t\t\t\t]]\n\t\t\t], 'The ext4 entry should be removed as it comes after a Replace');\n\t\t});\n\n\t\ttest('Appropriate workspace scoped entries are returned when querying for a particular workspace folder', () => {\n\t\t\tconst scope1 = { workspaceFolder: { uri: URI.file('workspace1'), name: 'workspace1', index: 0 } };\n\t\t\tconst scope2 = { workspaceFolder: { uri: URI.file('workspace2'), name: 'workspace2', index: 3 } };\n\t\t\tconst merged = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Prepend, scope: scope1, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext2', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a2', type: EnvironmentVariableMutatorType.Append, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext3', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a3', type: EnvironmentVariableMutatorType.Prepend, scope: scope2, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext4', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a4', type: EnvironmentVariableMutatorType.Append, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tdeepStrictEqual([...merged.getVariableMap(scope2).entries()], [\n\t\t\t\t['A', [\n\t\t\t\t\t{ extensionIdentifier: 'ext4', type: EnvironmentVariableMutatorType.Append, value: 'a4', variable: 'A', options: undefined },\n\t\t\t\t\t{ extensionIdentifier: 'ext3', type: EnvironmentVariableMutatorType.Prepend, value: 'a3', scope: scope2, variable: 'A', options: undefined },\n\t\t\t\t\t{ extensionIdentifier: 'ext2', type: EnvironmentVariableMutatorType.Append, value: 'a2', variable: 'A', options: undefined },\n\t\t\t\t]]\n\t\t\t]);\n\t\t});\n\n\t\ttest('Workspace scoped entries are not included when looking for global entries', () => {\n\t\t\tconst scope1 = { workspaceFolder: { uri: URI.file('workspace1'), name: 'workspace1', index: 0 } };\n\t\t\tconst scope2 = { workspaceFolder: { uri: URI.file('workspace2'), name: 'workspace2', index: 3 } };\n\t\t\tconst merged = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Prepend, scope: scope1, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext2', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a2', type: EnvironmentVariableMutatorType.Append, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext3', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a3', type: EnvironmentVariableMutatorType.Prepend, scope: scope2, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext4', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a4', type: EnvironmentVariableMutatorType.Append, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tdeepStrictEqual([...merged.getVariableMap(undefined).entries()], [\n\t\t\t\t['A', [\n\t\t\t\t\t{ extensionIdentifier: 'ext4', type: EnvironmentVariableMutatorType.Append, value: 'a4', variable: 'A', options: undefined },\n\t\t\t\t\t{ extensionIdentifier: 'ext2', type: EnvironmentVariableMutatorType.Append, value: 'a2', variable: 'A', options: undefined },\n\t\t\t\t]]\n\t\t\t]);\n\t\t});\n\n\t\ttest('Workspace scoped description entries are properly filtered for each extension', () => {\n\t\t\tconst scope1 = { workspaceFolder: { uri: URI.file('workspace1'), name: 'workspace1', index: 0 } };\n\t\t\tconst scope2 = { workspaceFolder: { uri: URI.file('workspace2'), name: 'workspace2', index: 3 } };\n\t\t\tconst merged = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Prepend, scope: scope1, variable: 'A' }]\n\t\t\t\t\t]),\n\t\t\t\t\tdescriptionMap: deserializeEnvironmentDescriptionMap([\n\t\t\t\t\t\t['A-key-scope1', { description: 'ext1 scope1 description', scope: scope1 }],\n\t\t\t\t\t\t['A-key-scope2', { description: 'ext1 scope2 description', scope: scope2 }],\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext2', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a2', type: EnvironmentVariableMutatorType.Append, variable: 'A' }]\n\t\t\t\t\t]),\n\t\t\t\t\tdescriptionMap: deserializeEnvironmentDescriptionMap([\n\t\t\t\t\t\t['A-key', { description: 'ext2 global description' }],\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext3', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a3', type: EnvironmentVariableMutatorType.Prepend, scope: scope2, variable: 'A' }]\n\t\t\t\t\t]),\n\t\t\t\t\tdescriptionMap: deserializeEnvironmentDescriptionMap([\n\t\t\t\t\t\t['A-key', { description: 'ext3 scope2 description', scope: scope2 }],\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext4', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a4', type: EnvironmentVariableMutatorType.Append, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tdeepStrictEqual([...merged.getDescriptionMap(scope1).entries()], [\n\t\t\t\t['ext1', 'ext1 scope1 description'],\n\t\t\t]);\n\t\t\tdeepStrictEqual([...merged.getDescriptionMap(undefined).entries()], [\n\t\t\t\t['ext2', 'ext2 global description'],\n\t\t\t]);\n\t\t});\n\t});\n\n\tsuite('applyToProcessEnvironment', () => {\n\t\ttest('should apply the collection to an environment', async () => {\n\t\t\tconst merged = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }],\n\t\t\t\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Append, variable: 'B' }],\n\t\t\t\t\t\t['C', { value: 'c', type: EnvironmentVariableMutatorType.Prepend, variable: 'C' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst env: IProcessEnvironment = {\n\t\t\t\tA: 'foo',\n\t\t\t\tB: 'bar',\n\t\t\t\tC: 'baz'\n\t\t\t};\n\t\t\tawait merged.applyToProcessEnvironment(env, undefined);\n\t\t\tdeepStrictEqual(env, {\n\t\t\t\tA: 'a',\n\t\t\t\tB: 'barb',\n\t\t\t\tC: 'cbaz'\n\t\t\t});\n\t\t});\n\n\t\ttest('should apply the appropriate workspace scoped entries to an environment', async () => {\n\t\t\tconst scope1 = { workspaceFolder: { uri: URI.file('workspace1'), name: 'workspace1', index: 0 } };\n\t\t\tconst scope2 = { workspaceFolder: { uri: URI.file('workspace2'), name: 'workspace2', index: 3 } };\n\t\t\tconst merged = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a', type: EnvironmentVariableMutatorType.Replace, scope: scope1, variable: 'A' }],\n\t\t\t\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Append, scope: scope2, variable: 'B' }],\n\t\t\t\t\t\t['C', { value: 'c', type: EnvironmentVariableMutatorType.Prepend, variable: 'C' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst env: IProcessEnvironment = {\n\t\t\t\tA: 'foo',\n\t\t\t\tB: 'bar',\n\t\t\t\tC: 'baz'\n\t\t\t};\n\t\t\tawait merged.applyToProcessEnvironment(env, scope1);\n\t\t\tdeepStrictEqual(env, {\n\t\t\t\tA: 'a',\n\t\t\t\tB: 'bar', // This is not changed because the scope does not match\n\t\t\t\tC: 'cbaz'\n\t\t\t});\n\t\t});\n\n\t\ttest('should apply the collection to environment entries with no values', async () => {\n\t\t\tconst merged = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }],\n\t\t\t\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Append, variable: 'B' }],\n\t\t\t\t\t\t['C', { value: 'c', type: EnvironmentVariableMutatorType.Prepend, variable: 'C' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst env: IProcessEnvironment = {};\n\t\t\tawait merged.applyToProcessEnvironment(env, undefined);\n\t\t\tdeepStrictEqual(env, {\n\t\t\t\tA: 'a',\n\t\t\t\tB: 'b',\n\t\t\t\tC: 'c'\n\t\t\t});\n\t\t});\n\n\t\ttest('should apply to variable case insensitively on Windows only', async () => {\n\t\t\tconst merged = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'a' }],\n\t\t\t\t\t\t['b', { value: 'b', type: EnvironmentVariableMutatorType.Append, variable: 'b' }],\n\t\t\t\t\t\t['c', { value: 'c', type: EnvironmentVariableMutatorType.Prepend, variable: 'c' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst env: IProcessEnvironment = {\n\t\t\t\tA: 'A',\n\t\t\t\tB: 'B',\n\t\t\t\tC: 'C'\n\t\t\t};\n\t\t\tawait merged.applyToProcessEnvironment(env, undefined);\n\t\t\tif (isWindows) {\n\t\t\t\tdeepStrictEqual(env, {\n\t\t\t\t\tA: 'a',\n\t\t\t\t\tB: 'Bb',\n\t\t\t\t\tC: 'cC'\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tdeepStrictEqual(env, {\n\t\t\t\t\ta: 'a',\n\t\t\t\t\tA: 'A',\n\t\t\t\t\tb: 'b',\n\t\t\t\t\tB: 'B',\n\t\t\t\t\tc: 'c',\n\t\t\t\t\tC: 'C'\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t});\n\n\tsuite('diff', () => {\n\t\ttest('should return undefined when collectinos are the same', () => {\n\t\t\tconst merged1 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst merged2 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff = merged1.diff(merged2, undefined);\n\t\t\tstrictEqual(diff, undefined);\n\t\t});\n\t\ttest('should generate added diffs from when the first entry is added', () => {\n\t\t\tconst merged1 = new MergedEnvironmentVariableCollection(new Map([]));\n\t\t\tconst merged2 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff = merged1.diff(merged2, undefined)!;\n\t\t\tstrictEqual(diff.changed.size, 0);\n\t\t\tstrictEqual(diff.removed.size, 0);\n\t\t\tconst entries = [...diff.added.entries()];\n\t\t\tdeepStrictEqual(entries, [\n\t\t\t\t['A', [{ extensionIdentifier: 'ext1', value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A', options: undefined }]]\n\t\t\t]);\n\t\t});\n\n\t\ttest('should generate added diffs from the same extension', () => {\n\t\t\tconst merged1 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst merged2 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }],\n\t\t\t\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Append, variable: 'B' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff = merged1.diff(merged2, undefined)!;\n\t\t\tstrictEqual(diff.changed.size, 0);\n\t\t\tstrictEqual(diff.removed.size, 0);\n\t\t\tconst entries = [...diff.added.entries()];\n\t\t\tdeepStrictEqual(entries, [\n\t\t\t\t['B', [{ extensionIdentifier: 'ext1', value: 'b', type: EnvironmentVariableMutatorType.Append, variable: 'B', options: undefined }]]\n\t\t\t]);\n\t\t});\n\n\t\ttest('should generate added diffs from a different extension', () => {\n\t\t\tconst merged1 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Prepend, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\n\t\t\tconst merged2 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext2', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a2', type: EnvironmentVariableMutatorType.Append, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Prepend, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff = merged1.diff(merged2, undefined)!;\n\t\t\tstrictEqual(diff.changed.size, 0);\n\t\t\tstrictEqual(diff.removed.size, 0);\n\t\t\tdeepStrictEqual([...diff.added.entries()], [\n\t\t\t\t['A', [{ extensionIdentifier: 'ext2', value: 'a2', type: EnvironmentVariableMutatorType.Append, variable: 'A', options: undefined }]]\n\t\t\t]);\n\n\t\t\tconst merged3 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Prepend, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t// This entry should get removed\n\t\t\t\t['ext2', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a2', type: EnvironmentVariableMutatorType.Append, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff2 = merged1.diff(merged3, undefined)!;\n\t\t\tstrictEqual(diff2.changed.size, 0);\n\t\t\tstrictEqual(diff2.removed.size, 0);\n\t\t\tdeepStrictEqual([...diff.added.entries()], [...diff2.added.entries()], 'Swapping the order of the entries in the other collection should yield the same result');\n\t\t});\n\n\t\ttest('should remove entries in the diff that come after a Replace', () => {\n\t\t\tconst merged1 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst merged4 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}],\n\t\t\t\t// This entry should get removed as it comes after a replace\n\t\t\t\t['ext2', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a2', type: EnvironmentVariableMutatorType.Append, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff = merged1.diff(merged4, undefined);\n\t\t\tstrictEqual(diff, undefined, 'Replace should ignore any entries after it');\n\t\t});\n\n\t\ttest('should generate removed diffs', () => {\n\t\t\tconst merged1 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }],\n\t\t\t\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Replace, variable: 'B' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst merged2 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff = merged1.diff(merged2, undefined)!;\n\t\t\tstrictEqual(diff.changed.size, 0);\n\t\t\tstrictEqual(diff.added.size, 0);\n\t\t\tdeepStrictEqual([...diff.removed.entries()], [\n\t\t\t\t['B', [{ extensionIdentifier: 'ext1', value: 'b', type: EnvironmentVariableMutatorType.Replace, variable: 'B', options: undefined }]]\n\t\t\t]);\n\t\t});\n\n\t\ttest('should generate changed diffs', () => {\n\t\t\tconst merged1 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }],\n\t\t\t\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Replace, variable: 'B' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst merged2 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a2', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }],\n\t\t\t\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Append, variable: 'B' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff = merged1.diff(merged2, undefined)!;\n\t\t\tstrictEqual(diff.added.size, 0);\n\t\t\tstrictEqual(diff.removed.size, 0);\n\t\t\tdeepStrictEqual([...diff.changed.entries()], [\n\t\t\t\t['A', [{ extensionIdentifier: 'ext1', value: 'a2', type: EnvironmentVariableMutatorType.Replace, variable: 'A', options: undefined }]],\n\t\t\t\t['B', [{ extensionIdentifier: 'ext1', value: 'b', type: EnvironmentVariableMutatorType.Append, variable: 'B', options: undefined }]]\n\t\t\t]);\n\t\t});\n\n\t\ttest('should generate diffs with added, changed and removed', () => {\n\t\t\tconst merged1 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }],\n\t\t\t\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Prepend, variable: 'B' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst merged2 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a2', type: EnvironmentVariableMutatorType.Replace, variable: 'A' }],\n\t\t\t\t\t\t['C', { value: 'c', type: EnvironmentVariableMutatorType.Append, variable: 'C' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff = merged1.diff(merged2, undefined)!;\n\t\t\tdeepStrictEqual([...diff.added.entries()], [\n\t\t\t\t['C', [{ extensionIdentifier: 'ext1', value: 'c', type: EnvironmentVariableMutatorType.Append, variable: 'C', options: undefined }]],\n\t\t\t]);\n\t\t\tdeepStrictEqual([...diff.removed.entries()], [\n\t\t\t\t['B', [{ extensionIdentifier: 'ext1', value: 'b', type: EnvironmentVariableMutatorType.Prepend, variable: 'B', options: undefined }]]\n\t\t\t]);\n\t\t\tdeepStrictEqual([...diff.changed.entries()], [\n\t\t\t\t['A', [{ extensionIdentifier: 'ext1', value: 'a2', type: EnvironmentVariableMutatorType.Replace, variable: 'A', options: undefined }]]\n\t\t\t]);\n\t\t});\n\n\t\ttest('should only generate workspace specific diffs', () => {\n\t\t\tconst scope1 = { workspaceFolder: { uri: URI.file('workspace1'), name: 'workspace1', index: 0 } };\n\t\t\tconst scope2 = { workspaceFolder: { uri: URI.file('workspace2'), name: 'workspace2', index: 3 } };\n\t\t\tconst merged1 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Replace, scope: scope1, variable: 'A' }],\n\t\t\t\t\t\t['B', { value: 'b', type: EnvironmentVariableMutatorType.Prepend, variable: 'B' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst merged2 = new MergedEnvironmentVariableCollection(new Map([\n\t\t\t\t['ext1', {\n\t\t\t\t\tmap: deserializeEnvironmentVariableCollection([\n\t\t\t\t\t\t['A-key', { value: 'a2', type: EnvironmentVariableMutatorType.Replace, scope: scope1, variable: 'A' }],\n\t\t\t\t\t\t['C', { value: 'c', type: EnvironmentVariableMutatorType.Append, scope: scope2, variable: 'C' }]\n\t\t\t\t\t])\n\t\t\t\t}]\n\t\t\t]));\n\t\t\tconst diff = merged1.diff(merged2, scope1)!;\n\t\t\tstrictEqual(diff.added.size, 0);\n\t\t\tdeepStrictEqual([...diff.removed.entries()], [\n\t\t\t\t['B', [{ extensionIdentifier: 'ext1', value: 'b', type: EnvironmentVariableMutatorType.Prepend, variable: 'B', options: undefined }]]\n\t\t\t]);\n\t\t\tdeepStrictEqual([...diff.changed.entries()], [\n\t\t\t\t['A', [{ extensionIdentifier: 'ext1', value: 'a2', type: EnvironmentVariableMutatorType.Replace, scope: scope1, variable: 'A', options: undefined }]]\n\t\t\t]);\n\t\t});\n\t});\n});\n"]}