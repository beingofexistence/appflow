{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/test/common/environmentVariableService.test.ts"],"names":[],"mappings":"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","file":"environmentVariableService.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepStrictEqual } from 'assert';\nimport { TestExtensionService, TestHistoryService, TestStorageService } from 'vs/workbench/test/common/workbenchTestServices';\nimport { EnvironmentVariableService } from 'vs/workbench/contrib/terminal/common/environmentVariableService';\nimport { EnvironmentVariableMutatorType, IEnvironmentVariableMutator } from 'vs/platform/terminal/common/environmentVariable';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { Emitter } from 'vs/base/common/event';\nimport { IProcessEnvironment } from 'vs/base/common/platform';\nimport { IHistoryService } from 'vs/workbench/services/history/common/history';\nimport { URI } from 'vs/base/common/uri';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nclass TestEnvironmentVariableService extends EnvironmentVariableService {\n\tpersistCollections(): void { this._persistCollections(); }\n\tnotifyCollectionUpdates(): void { this._notifyCollectionUpdates(); }\n}\n\nsuite('EnvironmentVariable - EnvironmentVariableService', () => {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet instantiationService: TestInstantiationService;\n\tlet environmentVariableService: TestEnvironmentVariableService;\n\tlet storageService: TestStorageService;\n\tlet historyService: TestHistoryService;\n\tlet changeExtensionsEvent: Emitter<void>;\n\n\tsetup(() => {\n\t\tchangeExtensionsEvent = store.add(new Emitter<void>());\n\n\t\tinstantiationService = store.add(new TestInstantiationService());\n\t\tinstantiationService.stub(IExtensionService, TestExtensionService);\n\t\tstorageService = store.add(new TestStorageService());\n\t\thistoryService = new TestHistoryService();\n\t\tinstantiationService.stub(IStorageService, storageService);\n\t\tinstantiationService.stub(IExtensionService, TestExtensionService);\n\t\tinstantiationService.stub(IExtensionService, 'onDidChangeExtensions', changeExtensionsEvent.event);\n\t\tinstantiationService.stub(IExtensionService, 'extensions', [\n\t\t\t{ identifier: { value: 'ext1' } },\n\t\t\t{ identifier: { value: 'ext2' } },\n\t\t\t{ identifier: { value: 'ext3' } }\n\t\t]);\n\t\tinstantiationService.stub(IHistoryService, historyService);\n\n\t\tenvironmentVariableService = store.add(instantiationService.createInstance(TestEnvironmentVariableService));\n\t});\n\n\ttest('should persist collections to the storage service and be able to restore from them', () => {\n\t\tconst collection = new Map<string, IEnvironmentVariableMutator>();\n\t\tcollection.set('A-key', { value: 'a', type: EnvironmentVariableMutatorType.Replace, variable: 'A' });\n\t\tcollection.set('B-key', { value: 'b', type: EnvironmentVariableMutatorType.Append, variable: 'B' });\n\t\tcollection.set('C-key', { value: 'c', type: EnvironmentVariableMutatorType.Prepend, variable: 'C', options: { applyAtProcessCreation: true, applyAtShellIntegration: true } });\n\t\tenvironmentVariableService.set('ext1', { map: collection, persistent: true });\n\t\tdeepStrictEqual([...environmentVariableService.mergedCollection.getVariableMap(undefined).entries()], [\n\t\t\t['A', [{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Replace, value: 'a', variable: 'A', options: undefined }]],\n\t\t\t['B', [{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Append, value: 'b', variable: 'B', options: undefined }]],\n\t\t\t['C', [{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Prepend, value: 'c', variable: 'C', options: { applyAtProcessCreation: true, applyAtShellIntegration: true } }]]\n\t\t]);\n\n\t\t// Persist with old service, create a new service with the same storage service to verify restore\n\t\tenvironmentVariableService.persistCollections();\n\t\tconst service2: TestEnvironmentVariableService = store.add(instantiationService.createInstance(TestEnvironmentVariableService));\n\t\tdeepStrictEqual([...service2.mergedCollection.getVariableMap(undefined).entries()], [\n\t\t\t['A', [{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Replace, value: 'a', variable: 'A', options: undefined }]],\n\t\t\t['B', [{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Append, value: 'b', variable: 'B', options: undefined }]],\n\t\t\t['C', [{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Prepend, value: 'c', variable: 'C', options: { applyAtProcessCreation: true, applyAtShellIntegration: true } }]]\n\t\t]);\n\t});\n\n\tsuite('mergedCollection', () => {\n\t\ttest('should overwrite any other variable with the first extension that replaces', () => {\n\t\t\tconst collection1 = new Map<string, IEnvironmentVariableMutator>();\n\t\t\tconst collection2 = new Map<string, IEnvironmentVariableMutator>();\n\t\t\tconst collection3 = new Map<string, IEnvironmentVariableMutator>();\n\t\t\tcollection1.set('A-key', { value: 'a1', type: EnvironmentVariableMutatorType.Append, variable: 'A' });\n\t\t\tcollection1.set('B-key', { value: 'b1', type: EnvironmentVariableMutatorType.Replace, variable: 'B' });\n\t\t\tcollection2.set('A-key', { value: 'a2', type: EnvironmentVariableMutatorType.Replace, variable: 'A' });\n\t\t\tcollection2.set('B-key', { value: 'b2', type: EnvironmentVariableMutatorType.Append, variable: 'B' });\n\t\t\tcollection3.set('A-key', { value: 'a3', type: EnvironmentVariableMutatorType.Prepend, variable: 'A' });\n\t\t\tcollection3.set('B-key', { value: 'b3', type: EnvironmentVariableMutatorType.Replace, variable: 'B' });\n\t\t\tenvironmentVariableService.set('ext1', { map: collection1, persistent: true });\n\t\t\tenvironmentVariableService.set('ext2', { map: collection2, persistent: true });\n\t\t\tenvironmentVariableService.set('ext3', { map: collection3, persistent: true });\n\t\t\tdeepStrictEqual([...environmentVariableService.mergedCollection.getVariableMap(undefined).entries()], [\n\t\t\t\t['A', [\n\t\t\t\t\t{ extensionIdentifier: 'ext2', type: EnvironmentVariableMutatorType.Replace, value: 'a2', variable: 'A', options: undefined },\n\t\t\t\t\t{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Append, value: 'a1', variable: 'A', options: undefined }\n\t\t\t\t]],\n\t\t\t\t['B', [{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Replace, value: 'b1', variable: 'B', options: undefined }]]\n\t\t\t]);\n\t\t});\n\n\t\ttest('should correctly apply the environment values from multiple extension contributions in the correct order', async () => {\n\t\t\tconst collection1 = new Map<string, IEnvironmentVariableMutator>();\n\t\t\tconst collection2 = new Map<string, IEnvironmentVariableMutator>();\n\t\t\tconst collection3 = new Map<string, IEnvironmentVariableMutator>();\n\t\t\tcollection1.set('A-key', { value: ':a1', type: EnvironmentVariableMutatorType.Append, variable: 'A' });\n\t\t\tcollection2.set('A-key', { value: 'a2:', type: EnvironmentVariableMutatorType.Prepend, variable: 'A' });\n\t\t\tcollection3.set('A-key', { value: 'a3', type: EnvironmentVariableMutatorType.Replace, variable: 'A' });\n\t\t\tenvironmentVariableService.set('ext1', { map: collection1, persistent: true });\n\t\t\tenvironmentVariableService.set('ext2', { map: collection2, persistent: true });\n\t\t\tenvironmentVariableService.set('ext3', { map: collection3, persistent: true });\n\n\t\t\t// The entries should be ordered in the order they are applied\n\t\t\tdeepStrictEqual([...environmentVariableService.mergedCollection.getVariableMap(undefined).entries()], [\n\t\t\t\t['A', [\n\t\t\t\t\t{ extensionIdentifier: 'ext3', type: EnvironmentVariableMutatorType.Replace, value: 'a3', variable: 'A', options: undefined },\n\t\t\t\t\t{ extensionIdentifier: 'ext2', type: EnvironmentVariableMutatorType.Prepend, value: 'a2:', variable: 'A', options: undefined },\n\t\t\t\t\t{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Append, value: ':a1', variable: 'A', options: undefined }\n\t\t\t\t]]\n\t\t\t]);\n\n\t\t\t// Verify the entries get applied to the environment as expected\n\t\t\tconst env: IProcessEnvironment = { A: 'foo' };\n\t\t\tawait environmentVariableService.mergedCollection.applyToProcessEnvironment(env, undefined);\n\t\t\tdeepStrictEqual(env, { A: 'a2:a3:a1' });\n\t\t});\n\n\t\ttest('should correctly apply the workspace specific environment values from multiple extension contributions in the correct order', async () => {\n\t\t\tconst scope1 = { workspaceFolder: { uri: URI.file('workspace1'), name: 'workspace1', index: 0 } };\n\t\t\tconst scope2 = { workspaceFolder: { uri: URI.file('workspace2'), name: 'workspace2', index: 3 } };\n\t\t\tconst collection1 = new Map<string, IEnvironmentVariableMutator>();\n\t\t\tconst collection2 = new Map<string, IEnvironmentVariableMutator>();\n\t\t\tconst collection3 = new Map<string, IEnvironmentVariableMutator>();\n\t\t\tcollection1.set('A-key', { value: ':a1', type: EnvironmentVariableMutatorType.Append, scope: scope1, variable: 'A' });\n\t\t\tcollection2.set('A-key', { value: 'a2:', type: EnvironmentVariableMutatorType.Prepend, variable: 'A' });\n\t\t\tcollection3.set('A-key', { value: 'a3', type: EnvironmentVariableMutatorType.Replace, scope: scope2, variable: 'A' });\n\t\t\tenvironmentVariableService.set('ext1', { map: collection1, persistent: true });\n\t\t\tenvironmentVariableService.set('ext2', { map: collection2, persistent: true });\n\t\t\tenvironmentVariableService.set('ext3', { map: collection3, persistent: true });\n\n\t\t\t// The entries should be ordered in the order they are applied\n\t\t\tdeepStrictEqual([...environmentVariableService.mergedCollection.getVariableMap(scope1).entries()], [\n\t\t\t\t['A', [\n\t\t\t\t\t{ extensionIdentifier: 'ext2', type: EnvironmentVariableMutatorType.Prepend, value: 'a2:', variable: 'A', options: undefined },\n\t\t\t\t\t{ extensionIdentifier: 'ext1', type: EnvironmentVariableMutatorType.Append, value: ':a1', scope: scope1, variable: 'A', options: undefined }\n\t\t\t\t]]\n\t\t\t]);\n\n\t\t\t// Verify the entries get applied to the environment as expected\n\t\t\tconst env: IProcessEnvironment = { A: 'foo' };\n\t\t\tawait environmentVariableService.mergedCollection.applyToProcessEnvironment(env, scope1);\n\t\t\tdeepStrictEqual(env, { A: 'a2:foo:a1' });\n\t\t});\n\t});\n});\n"]}