{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/test/node/terminalProfiles.test.ts"],"names":[],"mappings":"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","file":"terminalProfiles.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepStrictEqual, fail, ok, strictEqual } from 'assert';\nimport { isWindows } from 'vs/base/common/platform';\nimport { ITerminalProfile, ProfileSource } from 'vs/platform/terminal/common/terminal';\nimport { ITerminalConfiguration, ITerminalProfiles } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { detectAvailableProfiles, IFsProvider } from 'vs/platform/terminal/node/terminalProfiles';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\n/**\n * Assets that two profiles objects are equal, this will treat explicit undefined and unset\n * properties the same. Order of the profiles is ignored.\n */\nfunction profilesEqual(actualProfiles: ITerminalProfile[], expectedProfiles: ITerminalProfile[]) {\n\tstrictEqual(actualProfiles.length, expectedProfiles.length, `Actual: ${actualProfiles.map(e => e.profileName).join(',')}\\nExpected: ${expectedProfiles.map(e => e.profileName).join(',')}`);\n\tfor (const expected of expectedProfiles) {\n\t\tconst actual = actualProfiles.find(e => e.profileName === expected.profileName);\n\t\tok(actual, `Expected profile ${expected.profileName} not found`);\n\t\tstrictEqual(actual.profileName, expected.profileName);\n\t\tstrictEqual(actual.path, expected.path);\n\t\tdeepStrictEqual(actual.args, expected.args);\n\t\tstrictEqual(actual.isAutoDetected, expected.isAutoDetected);\n\t\tstrictEqual(actual.overrideName, expected.overrideName);\n\t}\n}\n\nsuite('Workbench - TerminalProfiles', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('detectAvailableProfiles', () => {\n\t\tif (isWindows) {\n\t\t\ttest('should detect Git Bash and provide login args', async () => {\n\t\t\t\tconst fsProvider = createFsProvider([\n\t\t\t\t\t'C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe'\n\t\t\t\t]);\n\t\t\t\tconst config: ITestTerminalConfig = {\n\t\t\t\t\tprofiles: {\n\t\t\t\t\t\twindows: {\n\t\t\t\t\t\t\t'Git Bash': { source: ProfileSource.GitBash }\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlinux: {},\n\t\t\t\t\t\tosx: {}\n\t\t\t\t\t},\n\t\t\t\t\tuseWslProfiles: false\n\t\t\t\t};\n\t\t\t\tconst configurationService = new TestConfigurationService({ terminal: { integrated: config } });\n\t\t\t\tconst profiles = await detectAvailableProfiles(undefined, undefined, false, configurationService, process.env, fsProvider, undefined, undefined, undefined);\n\t\t\t\tconst expected = [\n\t\t\t\t\t{ profileName: 'Git Bash', path: 'C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe', args: ['--login', '-i'], isDefault: true }\n\t\t\t\t];\n\t\t\t\tprofilesEqual(profiles, expected);\n\t\t\t});\n\t\t\ttest('should allow source to have args', async () => {\n\t\t\t\tconst pwshSourcePaths = [\n\t\t\t\t\t'C:\\\\Program Files\\\\PowerShell\\\\7\\\\pwsh.exe'\n\t\t\t\t];\n\t\t\t\tconst fsProvider = createFsProvider(pwshSourcePaths);\n\t\t\t\tconst config: ITestTerminalConfig = {\n\t\t\t\t\tprofiles: {\n\t\t\t\t\t\twindows: {\n\t\t\t\t\t\t\t'PowerShell': { source: ProfileSource.Pwsh, args: ['-NoProfile'], overrideName: true }\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlinux: {},\n\t\t\t\t\t\tosx: {},\n\t\t\t\t\t},\n\t\t\t\t\tuseWslProfiles: false\n\t\t\t\t};\n\t\t\t\tconst configurationService = new TestConfigurationService({ terminal: { integrated: config } });\n\t\t\t\tconst profiles = await detectAvailableProfiles(undefined, undefined, false, configurationService, process.env, fsProvider, undefined, undefined, pwshSourcePaths);\n\t\t\t\tconst expected = [\n\t\t\t\t\t{ profileName: 'PowerShell', path: 'C:\\\\Program Files\\\\PowerShell\\\\7\\\\pwsh.exe', overrideName: true, args: ['-NoProfile'], isDefault: true }\n\t\t\t\t];\n\t\t\t\tprofilesEqual(profiles, expected);\n\t\t\t});\n\t\t\ttest('configured args should override default source ones', async () => {\n\t\t\t\tconst fsProvider = createFsProvider([\n\t\t\t\t\t'C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe'\n\t\t\t\t]);\n\t\t\t\tconst config: ITestTerminalConfig = {\n\t\t\t\t\tprofiles: {\n\t\t\t\t\t\twindows: {\n\t\t\t\t\t\t\t'Git Bash': { source: ProfileSource.GitBash, args: [] }\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlinux: {},\n\t\t\t\t\t\tosx: {}\n\t\t\t\t\t},\n\t\t\t\t\tuseWslProfiles: false\n\t\t\t\t};\n\t\t\t\tconst configurationService = new TestConfigurationService({ terminal: { integrated: config } });\n\t\t\t\tconst profiles = await detectAvailableProfiles(undefined, undefined, false, configurationService, process.env, fsProvider, undefined, undefined, undefined);\n\t\t\t\tconst expected = [{ profileName: 'Git Bash', path: 'C:\\\\Program Files\\\\Git\\\\bin\\\\bash.exe', args: [], isAutoDetected: undefined, overrideName: undefined, isDefault: true }];\n\t\t\t\tprofilesEqual(profiles, expected);\n\t\t\t});\n\t\t\tsuite('pwsh source detection/fallback', () => {\n\t\t\t\tconst pwshSourceConfig = ({\n\t\t\t\t\tprofiles: {\n\t\t\t\t\t\twindows: {\n\t\t\t\t\t\t\t'PowerShell': { source: ProfileSource.Pwsh }\n\t\t\t\t\t\t},\n\t\t\t\t\t\tlinux: {},\n\t\t\t\t\t\tosx: {},\n\t\t\t\t\t},\n\t\t\t\t\tuseWslProfiles: false\n\t\t\t\t} as ITestTerminalConfig) as ITerminalConfiguration;\n\n\t\t\t\ttest('should prefer pwsh 7 to Windows PowerShell', async () => {\n\t\t\t\t\tconst pwshSourcePaths = [\n\t\t\t\t\t\t'C:\\\\Program Files\\\\PowerShell\\\\7\\\\pwsh.exe',\n\t\t\t\t\t\t'C:\\\\Sysnative\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe',\n\t\t\t\t\t\t'C:\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe'\n\t\t\t\t\t];\n\t\t\t\t\tconst fsProvider = createFsProvider(pwshSourcePaths);\n\t\t\t\t\tconst configurationService = new TestConfigurationService({ terminal: { integrated: pwshSourceConfig } });\n\t\t\t\t\tconst profiles = await detectAvailableProfiles(undefined, undefined, false, configurationService, process.env, fsProvider, undefined, undefined, pwshSourcePaths);\n\t\t\t\t\tconst expected = [\n\t\t\t\t\t\t{ profileName: 'PowerShell', path: 'C:\\\\Program Files\\\\PowerShell\\\\7\\\\pwsh.exe', isDefault: true }\n\t\t\t\t\t];\n\t\t\t\t\tprofilesEqual(profiles, expected);\n\t\t\t\t});\n\t\t\t\ttest('should prefer pwsh 7 to pwsh 6', async () => {\n\t\t\t\t\tconst pwshSourcePaths = [\n\t\t\t\t\t\t'C:\\\\Program Files\\\\PowerShell\\\\7\\\\pwsh.exe',\n\t\t\t\t\t\t'C:\\\\Program Files\\\\PowerShell\\\\6\\\\pwsh.exe',\n\t\t\t\t\t\t'C:\\\\Sysnative\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe',\n\t\t\t\t\t\t'C:\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe'\n\t\t\t\t\t];\n\t\t\t\t\tconst fsProvider = createFsProvider(pwshSourcePaths);\n\t\t\t\t\tconst configurationService = new TestConfigurationService({ terminal: { integrated: pwshSourceConfig } });\n\t\t\t\t\tconst profiles = await detectAvailableProfiles(undefined, undefined, false, configurationService, process.env, fsProvider, undefined, undefined, pwshSourcePaths);\n\t\t\t\t\tconst expected = [\n\t\t\t\t\t\t{ profileName: 'PowerShell', path: 'C:\\\\Program Files\\\\PowerShell\\\\7\\\\pwsh.exe', isDefault: true }\n\t\t\t\t\t];\n\t\t\t\t\tprofilesEqual(profiles, expected);\n\t\t\t\t});\n\t\t\t\ttest('should fallback to Windows PowerShell', async () => {\n\t\t\t\t\tconst pwshSourcePaths = [\n\t\t\t\t\t\t'C:\\\\Windows\\\\Sysnative\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe',\n\t\t\t\t\t\t'C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe'\n\t\t\t\t\t];\n\t\t\t\t\tconst fsProvider = createFsProvider(pwshSourcePaths);\n\t\t\t\t\tconst configurationService = new TestConfigurationService({ terminal: { integrated: pwshSourceConfig } });\n\t\t\t\t\tconst profiles = await detectAvailableProfiles(undefined, undefined, false, configurationService, process.env, fsProvider, undefined, undefined, pwshSourcePaths);\n\t\t\t\t\tstrictEqual(profiles.length, 1);\n\t\t\t\t\tstrictEqual(profiles[0].profileName, 'PowerShell');\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\tconst absoluteConfig = ({\n\t\t\t\tprofiles: {\n\t\t\t\t\twindows: {},\n\t\t\t\t\tosx: {\n\t\t\t\t\t\t'fakeshell1': { path: '/bin/fakeshell1' },\n\t\t\t\t\t\t'fakeshell2': { path: '/bin/fakeshell2' },\n\t\t\t\t\t\t'fakeshell3': { path: '/bin/fakeshell3' }\n\t\t\t\t\t},\n\t\t\t\t\tlinux: {\n\t\t\t\t\t\t'fakeshell1': { path: '/bin/fakeshell1' },\n\t\t\t\t\t\t'fakeshell2': { path: '/bin/fakeshell2' },\n\t\t\t\t\t\t'fakeshell3': { path: '/bin/fakeshell3' }\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tuseWslProfiles: false\n\t\t\t} as ITestTerminalConfig) as ITerminalConfiguration;\n\t\t\tconst onPathConfig = ({\n\t\t\t\tprofiles: {\n\t\t\t\t\twindows: {},\n\t\t\t\t\tosx: {\n\t\t\t\t\t\t'fakeshell1': { path: 'fakeshell1' },\n\t\t\t\t\t\t'fakeshell2': { path: 'fakeshell2' },\n\t\t\t\t\t\t'fakeshell3': { path: 'fakeshell3' }\n\t\t\t\t\t},\n\t\t\t\t\tlinux: {\n\t\t\t\t\t\t'fakeshell1': { path: 'fakeshell1' },\n\t\t\t\t\t\t'fakeshell2': { path: 'fakeshell2' },\n\t\t\t\t\t\t'fakeshell3': { path: 'fakeshell3' }\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tuseWslProfiles: false\n\t\t\t} as ITestTerminalConfig) as ITerminalConfiguration;\n\n\t\t\ttest('should detect shells via absolute paths', async () => {\n\t\t\t\tconst fsProvider = createFsProvider([\n\t\t\t\t\t'/bin/fakeshell1',\n\t\t\t\t\t'/bin/fakeshell3'\n\t\t\t\t]);\n\t\t\t\tconst configurationService = new TestConfigurationService({ terminal: { integrated: absoluteConfig } });\n\t\t\t\tconst profiles = await detectAvailableProfiles(undefined, undefined, false, configurationService, process.env, fsProvider, undefined, undefined, undefined);\n\t\t\t\tconst expected: ITerminalProfile[] = [\n\t\t\t\t\t{ profileName: 'fakeshell1', path: '/bin/fakeshell1', isDefault: true },\n\t\t\t\t\t{ profileName: 'fakeshell3', path: '/bin/fakeshell3', isDefault: true }\n\t\t\t\t];\n\t\t\t\tprofilesEqual(profiles, expected);\n\t\t\t});\n\t\t\ttest('should auto detect shells via /etc/shells', async () => {\n\t\t\t\tconst fsProvider = createFsProvider([\n\t\t\t\t\t'/bin/fakeshell1',\n\t\t\t\t\t'/bin/fakeshell3'\n\t\t\t\t], '/bin/fakeshell1\\n/bin/fakeshell3');\n\t\t\t\tconst configurationService = new TestConfigurationService({ terminal: { integrated: onPathConfig } });\n\t\t\t\tconst profiles = await detectAvailableProfiles(undefined, undefined, true, configurationService, process.env, fsProvider, undefined, undefined, undefined);\n\t\t\t\tconst expected: ITerminalProfile[] = [\n\t\t\t\t\t{ profileName: 'fakeshell1', path: '/bin/fakeshell1', isFromPath: true, isDefault: true },\n\t\t\t\t\t{ profileName: 'fakeshell3', path: '/bin/fakeshell3', isFromPath: true, isDefault: true }\n\t\t\t\t];\n\t\t\t\tprofilesEqual(profiles, expected);\n\t\t\t});\n\t\t\ttest('should validate auto detected shells from /etc/shells exist', async () => {\n\t\t\t\t// fakeshell3 exists in /etc/shells but not on FS\n\t\t\t\tconst fsProvider = createFsProvider([\n\t\t\t\t\t'/bin/fakeshell1'\n\t\t\t\t], '/bin/fakeshell1\\n/bin/fakeshell3');\n\t\t\t\tconst configurationService = new TestConfigurationService({ terminal: { integrated: onPathConfig } });\n\t\t\t\tconst profiles = await detectAvailableProfiles(undefined, undefined, true, configurationService, process.env, fsProvider, undefined, undefined, undefined);\n\t\t\t\tconst expected: ITerminalProfile[] = [\n\t\t\t\t\t{ profileName: 'fakeshell1', path: '/bin/fakeshell1', isFromPath: true, isDefault: true }\n\t\t\t\t];\n\t\t\t\tprofilesEqual(profiles, expected);\n\t\t\t});\n\t\t}\n\t});\n\n\tfunction createFsProvider(expectedPaths: string[], etcShellsContent: string = ''): IFsProvider {\n\t\tconst provider = {\n\t\t\tasync existsFile(path: string): Promise<boolean> {\n\t\t\t\treturn expectedPaths.includes(path);\n\t\t\t},\n\t\t\tasync readFile(path: string): Promise<Buffer> {\n\t\t\t\tif (path !== '/etc/shells') {\n\t\t\t\t\tfail('Unexepected path');\n\t\t\t\t}\n\t\t\t\treturn Buffer.from(etcShellsContent);\n\t\t\t}\n\t\t};\n\t\treturn provider;\n\t}\n});\n\nexport interface ITestTerminalConfig {\n\tprofiles: ITerminalProfiles;\n\tuseWslProfiles: boolean;\n}\n"]}