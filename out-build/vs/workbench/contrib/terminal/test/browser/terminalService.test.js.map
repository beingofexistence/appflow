{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/test/browser/terminalService.test.ts"],"names":[],"mappings":"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","file":"terminalService.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { fail } from 'assert';\nimport { Emitter } from 'vs/base/common/event';\nimport { ITerminalLogService, TerminalLocation } from 'vs/platform/terminal/common/terminal';\nimport { TerminalService } from 'vs/workbench/contrib/terminal/browser/terminalService';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { ContextKeyService } from 'vs/platform/contextkey/browser/contextKeyService';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TestEditorService, TestEnvironmentService, TestLifecycleService, TestRemoteAgentService, TestTerminalEditorService, TestTerminalGroupService, TestTerminalInstanceService, TestTerminalProfileService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { ITerminalEditorService, ITerminalGroupService, ITerminalInstance, ITerminalInstanceService, ITerminalService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { TestThemeService } from 'vs/platform/theme/test/common/testThemeService';\nimport { ITerminalProfileService } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { TestDialogService } from 'vs/platform/dialogs/test/common/testDialogService';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { NullLogService } from 'vs/platform/log/common/log';\n\nsuite('Workbench - TerminalService', () => {\n\tlet store: DisposableStore;\n\tlet instantiationService: TestInstantiationService;\n\tlet terminalService: TerminalService;\n\tlet configurationService: TestConfigurationService;\n\tlet dialogService: TestDialogService;\n\n\tsetup(async () => {\n\t\tstore = new DisposableStore();\n\t\tdialogService = new TestDialogService();\n\t\tconfigurationService = new TestConfigurationService({\n\t\t\tterminal: {\n\t\t\t\tintegrated: {\n\t\t\t\t\tfontWeight: 'normal'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tinstantiationService = store.add(new TestInstantiationService());\n\t\tinstantiationService.stub(IConfigurationService, configurationService);\n\t\tinstantiationService.stub(IContextKeyService, instantiationService.createInstance(ContextKeyService));\n\t\tinstantiationService.stub(ILifecycleService, new TestLifecycleService());\n\t\tinstantiationService.stub(IThemeService, new TestThemeService());\n\t\tinstantiationService.stub(ITerminalLogService, new NullLogService());\n\t\tinstantiationService.stub(IEditorService, new TestEditorService());\n\t\tinstantiationService.stub(IEnvironmentService, TestEnvironmentService);\n\t\tinstantiationService.stub(ITerminalEditorService, new TestTerminalEditorService());\n\t\tinstantiationService.stub(ITerminalGroupService, new TestTerminalGroupService());\n\t\tinstantiationService.stub(ITerminalInstanceService, new TestTerminalInstanceService());\n\t\tinstantiationService.stub(ITerminalInstanceService, 'getBackend', undefined);\n\t\tinstantiationService.stub(ITerminalInstanceService, 'getRegisteredBackends', []);\n\t\tinstantiationService.stub(ITerminalProfileService, new TestTerminalProfileService());\n\t\tinstantiationService.stub(IRemoteAgentService, new TestRemoteAgentService());\n\t\tinstantiationService.stub(IRemoteAgentService, 'getConnection', null);\n\t\tinstantiationService.stub(IDialogService, dialogService);\n\n\t\tterminalService = store.add(instantiationService.createInstance(TerminalService));\n\t\tinstantiationService.stub(ITerminalService, terminalService);\n\t});\n\n\tteardown(() => store.dispose());\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('safeDisposeTerminal', () => {\n\t\tlet onExitEmitter: Emitter<number | undefined>;\n\n\t\tsetup(() => {\n\t\t\tonExitEmitter = store.add(new Emitter<number | undefined>());\n\t\t});\n\n\t\ttest('should not show prompt when confirmOnKill is never', async () => {\n\t\t\tawait setConfirmOnKill(configurationService, 'never');\n\t\t\tawait terminalService.safeDisposeTerminal({\n\t\t\t\ttarget: TerminalLocation.Editor,\n\t\t\t\thasChildProcesses: true,\n\t\t\t\tonExit: onExitEmitter.event,\n\t\t\t\tdispose: () => onExitEmitter.fire(undefined)\n\t\t\t} as Partial<ITerminalInstance> as any);\n\t\t\tawait terminalService.safeDisposeTerminal({\n\t\t\t\ttarget: TerminalLocation.Panel,\n\t\t\t\thasChildProcesses: true,\n\t\t\t\tonExit: onExitEmitter.event,\n\t\t\t\tdispose: () => onExitEmitter.fire(undefined)\n\t\t\t} as Partial<ITerminalInstance> as any);\n\t\t});\n\t\ttest('should not show prompt when any terminal editor is closed (handled by editor itself)', async () => {\n\t\t\tawait setConfirmOnKill(configurationService, 'editor');\n\t\t\tterminalService.safeDisposeTerminal({\n\t\t\t\ttarget: TerminalLocation.Editor,\n\t\t\t\thasChildProcesses: true,\n\t\t\t\tonExit: onExitEmitter.event,\n\t\t\t\tdispose: () => onExitEmitter.fire(undefined)\n\t\t\t} as Partial<ITerminalInstance> as any);\n\t\t\tawait setConfirmOnKill(configurationService, 'always');\n\t\t\tterminalService.safeDisposeTerminal({\n\t\t\t\ttarget: TerminalLocation.Editor,\n\t\t\t\thasChildProcesses: true,\n\t\t\t\tonExit: onExitEmitter.event,\n\t\t\t\tdispose: () => onExitEmitter.fire(undefined)\n\t\t\t} as Partial<ITerminalInstance> as any);\n\t\t});\n\t\ttest('should not show prompt when confirmOnKill is editor and panel terminal is closed', async () => {\n\t\t\tawait setConfirmOnKill(configurationService, 'editor');\n\t\t\tterminalService.safeDisposeTerminal({\n\t\t\t\ttarget: TerminalLocation.Panel,\n\t\t\t\thasChildProcesses: true,\n\t\t\t\tonExit: onExitEmitter.event,\n\t\t\t\tdispose: () => onExitEmitter.fire(undefined)\n\t\t\t} as Partial<ITerminalInstance> as any);\n\t\t});\n\t\ttest('should show prompt when confirmOnKill is panel and panel terminal is closed', async () => {\n\t\t\tawait setConfirmOnKill(configurationService, 'panel');\n\t\t\t// No child process cases\n\t\t\tdialogService.setConfirmResult({ confirmed: false });\n\t\t\tterminalService.safeDisposeTerminal({\n\t\t\t\ttarget: TerminalLocation.Panel,\n\t\t\t\thasChildProcesses: false,\n\t\t\t\tonExit: onExitEmitter.event,\n\t\t\t\tdispose: () => onExitEmitter.fire(undefined)\n\t\t\t} as Partial<ITerminalInstance> as any);\n\t\t\tdialogService.setConfirmResult({ confirmed: true });\n\t\t\tterminalService.safeDisposeTerminal({\n\t\t\t\ttarget: TerminalLocation.Panel,\n\t\t\t\thasChildProcesses: false,\n\t\t\t\tonExit: onExitEmitter.event,\n\t\t\t\tdispose: () => onExitEmitter.fire(undefined)\n\t\t\t} as Partial<ITerminalInstance> as any);\n\t\t\t// Child process cases\n\t\t\tdialogService.setConfirmResult({ confirmed: false });\n\t\t\tawait terminalService.safeDisposeTerminal({\n\t\t\t\ttarget: TerminalLocation.Panel,\n\t\t\t\thasChildProcesses: true,\n\t\t\t\tdispose: () => fail()\n\t\t\t} as Partial<ITerminalInstance> as any);\n\t\t\tdialogService.setConfirmResult({ confirmed: true });\n\t\t\tterminalService.safeDisposeTerminal({\n\t\t\t\ttarget: TerminalLocation.Panel,\n\t\t\t\thasChildProcesses: true,\n\t\t\t\tonExit: onExitEmitter.event,\n\t\t\t\tdispose: () => onExitEmitter.fire(undefined)\n\t\t\t} as Partial<ITerminalInstance> as any);\n\t\t});\n\t\ttest('should show prompt when confirmOnKill is always and panel terminal is closed', async () => {\n\t\t\tawait setConfirmOnKill(configurationService, 'always');\n\t\t\t// No child process cases\n\t\t\tdialogService.setConfirmResult({ confirmed: false });\n\t\t\tterminalService.safeDisposeTerminal({\n\t\t\t\ttarget: TerminalLocation.Panel,\n\t\t\t\thasChildProcesses: false,\n\t\t\t\tonExit: onExitEmitter.event,\n\t\t\t\tdispose: () => onExitEmitter.fire(undefined)\n\t\t\t} as Partial<ITerminalInstance> as any);\n\t\t\tdialogService.setConfirmResult({ confirmed: true });\n\t\t\tterminalService.safeDisposeTerminal({\n\t\t\t\ttarget: TerminalLocation.Panel,\n\t\t\t\thasChildProcesses: false,\n\t\t\t\tonExit: onExitEmitter.event,\n\t\t\t\tdispose: () => onExitEmitter.fire(undefined)\n\t\t\t} as Partial<ITerminalInstance> as any);\n\t\t\t// Child process cases\n\t\t\tdialogService.setConfirmResult({ confirmed: false });\n\t\t\tawait terminalService.safeDisposeTerminal({\n\t\t\t\ttarget: TerminalLocation.Panel,\n\t\t\t\thasChildProcesses: true,\n\t\t\t\tdispose: () => fail()\n\t\t\t} as Partial<ITerminalInstance> as any);\n\t\t\tdialogService.setConfirmResult({ confirmed: true });\n\t\t\tterminalService.safeDisposeTerminal({\n\t\t\t\ttarget: TerminalLocation.Panel,\n\t\t\t\thasChildProcesses: true,\n\t\t\t\tonExit: onExitEmitter.event,\n\t\t\t\tdispose: () => onExitEmitter.fire(undefined)\n\t\t\t} as Partial<ITerminalInstance> as any);\n\t\t});\n\t});\n});\n\nasync function setConfirmOnKill(configurationService: TestConfigurationService, value: 'never' | 'always' | 'panel' | 'editor') {\n\tawait configurationService.setUserConfiguration('terminal', { integrated: { confirmOnKill: value } });\n\tconfigurationService.onDidChangeConfigurationEmitter.fire({\n\t\taffectsConfiguration: () => true,\n\t\taffectedKeys: ['terminal.integrated.confirmOnKill']\n\t} as any);\n}\n"]}