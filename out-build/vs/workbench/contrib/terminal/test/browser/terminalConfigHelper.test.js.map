{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/test/browser/terminalConfigHelper.test.ts"],"names":[],"mappings":"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","file":"terminalConfigHelper.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { TerminalConfigHelper } from 'vs/workbench/contrib/terminal/browser/terminalConfigHelper';\nimport { EDITOR_FONT_DEFAULTS } from 'vs/editor/common/config/editorOptions';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { LinuxDistro } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\n\nclass TestTerminalConfigHelper extends TerminalConfigHelper {\n\tset linuxDistro(distro: LinuxDistro) {\n\t\tthis._linuxDistro = distro;\n\t}\n}\n\nsuite('Workbench - TerminalConfigHelper', function () {\n\tlet store: DisposableStore;\n\tlet fixture: HTMLElement;\n\n\t// This suite has retries setup because the font-related tests flake only on GitHub actions, not\n\t// ADO. It seems Electron hangs for some reason only on GH actions, so the two options are to\n\t// retry or remove the test outright (which would drop coverage).\n\tthis.retries(3);\n\n\tsetup(() => {\n\t\tstore = new DisposableStore();\n\t\tfixture = document.body;\n\t});\n\tteardown(() => store.dispose());\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('TerminalConfigHelper - getFont fontFamily', () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\teditor: { fontFamily: 'foo' },\n\t\t\tterminal: { integrated: { fontFamily: 'bar' } }\n\t\t});\n\t\tconst configHelper = store.add(new TestTerminalConfigHelper(configurationService, null!, null!, null!, null!));\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.getFont().fontFamily, 'bar, monospace', 'terminal.integrated.fontFamily should be selected over editor.fontFamily');\n\t});\n\n\ttest('TerminalConfigHelper - getFont fontFamily (Linux Fedora)', () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\teditor: { fontFamily: 'foo' },\n\t\t\tterminal: { integrated: { fontFamily: null } }\n\t\t});\n\t\tconst configHelper = store.add(new TestTerminalConfigHelper(configurationService, null!, null!, null!, null!));\n\t\tconfigHelper.linuxDistro = LinuxDistro.Fedora;\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.getFont().fontFamily, '\\'DejaVu Sans Mono\\', monospace', 'Fedora should have its font overridden when terminal.integrated.fontFamily not set');\n\t});\n\n\ttest('TerminalConfigHelper - getFont fontFamily (Linux Ubuntu)', () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\teditor: { fontFamily: 'foo' },\n\t\t\tterminal: { integrated: { fontFamily: null } }\n\t\t});\n\t\tconst configHelper = store.add(new TestTerminalConfigHelper(configurationService, null!, null!, null!, null!));\n\t\tconfigHelper.linuxDistro = LinuxDistro.Ubuntu;\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.getFont().fontFamily, '\\'Ubuntu Mono\\', monospace', 'Ubuntu should have its font overridden when terminal.integrated.fontFamily not set');\n\t});\n\n\ttest('TerminalConfigHelper - getFont fontFamily (Linux Unknown)', () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\teditor: { fontFamily: 'foo' },\n\t\t\tterminal: { integrated: { fontFamily: null } }\n\t\t});\n\t\tconst configHelper = store.add(new TestTerminalConfigHelper(configurationService, null!, null!, null!, null!));\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.getFont().fontFamily, 'foo, monospace', 'editor.fontFamily should be the fallback when terminal.integrated.fontFamily not set');\n\t});\n\n\ttest('TerminalConfigHelper - getFont fontSize 10', () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\teditor: {\n\t\t\t\tfontFamily: 'foo',\n\t\t\t\tfontSize: 9\n\t\t\t},\n\t\t\tterminal: {\n\t\t\t\tintegrated: {\n\t\t\t\t\tfontFamily: 'bar',\n\t\t\t\t\tfontSize: 10\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconst configHelper = store.add(new TestTerminalConfigHelper(configurationService, null!, null!, null!, null!));\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.getFont().fontSize, 10, 'terminal.integrated.fontSize should be selected over editor.fontSize');\n\t});\n\n\ttest('TerminalConfigHelper - getFont fontSize 0', () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\teditor: {\n\t\t\t\tfontFamily: 'foo'\n\t\t\t},\n\t\t\tterminal: {\n\t\t\t\tintegrated: {\n\t\t\t\t\tfontFamily: null,\n\t\t\t\t\tfontSize: 0\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tlet configHelper = store.add(new TestTerminalConfigHelper(configurationService, null!, null!, null!, null!));\n\t\tconfigHelper.linuxDistro = LinuxDistro.Ubuntu;\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.getFont().fontSize, 8, 'The minimum terminal font size (with adjustment) should be used when terminal.integrated.fontSize less than it');\n\n\t\tconfigHelper = store.add(new TestTerminalConfigHelper(configurationService, null!, null!, null!, null!));\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.getFont().fontSize, 6, 'The minimum terminal font size should be used when terminal.integrated.fontSize less than it');\n\t});\n\n\ttest('TerminalConfigHelper - getFont fontSize 1500', () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\teditor: {\n\t\t\t\tfontFamily: 'foo'\n\t\t\t},\n\t\t\tterminal: {\n\t\t\t\tintegrated: {\n\t\t\t\t\tfontFamily: 0,\n\t\t\t\t\tfontSize: 1500\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconst configHelper = store.add(new TestTerminalConfigHelper(configurationService, null!, null!, null!, null!));\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.getFont().fontSize, 100, 'The maximum terminal font size should be used when terminal.integrated.fontSize more than it');\n\t});\n\n\ttest('TerminalConfigHelper - getFont fontSize null', () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\teditor: {\n\t\t\t\tfontFamily: 'foo'\n\t\t\t},\n\t\t\tterminal: {\n\t\t\t\tintegrated: {\n\t\t\t\t\tfontFamily: 0,\n\t\t\t\t\tfontSize: null\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tlet configHelper = store.add(new TestTerminalConfigHelper(configurationService, null!, null!, null!, null!));\n\t\tconfigHelper.linuxDistro = LinuxDistro.Ubuntu;\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.getFont().fontSize, EDITOR_FONT_DEFAULTS.fontSize + 2, 'The default editor font size (with adjustment) should be used when terminal.integrated.fontSize is not set');\n\n\t\tconfigHelper = store.add(new TestTerminalConfigHelper(configurationService, null!, null!, null!, null!));\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.getFont().fontSize, EDITOR_FONT_DEFAULTS.fontSize, 'The default editor font size should be used when terminal.integrated.fontSize is not set');\n\t});\n\n\ttest('TerminalConfigHelper - getFont lineHeight 2', () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\teditor: {\n\t\t\t\tfontFamily: 'foo',\n\t\t\t\tlineHeight: 1\n\t\t\t},\n\t\t\tterminal: {\n\t\t\t\tintegrated: {\n\t\t\t\t\tfontFamily: 0,\n\t\t\t\t\tlineHeight: 2\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconst configHelper = store.add(new TestTerminalConfigHelper(configurationService, null!, null!, null!, null!));\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.getFont().lineHeight, 2, 'terminal.integrated.lineHeight should be selected over editor.lineHeight');\n\t});\n\n\ttest('TerminalConfigHelper - getFont lineHeight 0', () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\teditor: {\n\t\t\t\tfontFamily: 'foo',\n\t\t\t\tlineHeight: 1\n\t\t\t},\n\t\t\tterminal: {\n\t\t\t\tintegrated: {\n\t\t\t\t\tfontFamily: 0,\n\t\t\t\t\tlineHeight: 0\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconst configHelper = store.add(new TestTerminalConfigHelper(configurationService, null!, null!, null!, null!));\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.getFont().lineHeight, 1, 'editor.lineHeight should be 1 when terminal.integrated.lineHeight not set');\n\t});\n\n\ttest('TerminalConfigHelper - isMonospace monospace', () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\tterminal: {\n\t\t\t\tintegrated: {\n\t\t\t\t\tfontFamily: 'monospace'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst configHelper = store.add(new TestTerminalConfigHelper(configurationService, null!, null!, null!, null!));\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.configFontIsMonospace(), true, 'monospace is monospaced');\n\t});\n\n\ttest('TerminalConfigHelper - isMonospace sans-serif', () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\tterminal: {\n\t\t\t\tintegrated: {\n\t\t\t\t\tfontFamily: 'sans-serif'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconst configHelper = store.add(new TestTerminalConfigHelper(configurationService, null!, null!, null!, null!));\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.configFontIsMonospace(), false, 'sans-serif is not monospaced');\n\t});\n\n\ttest('TerminalConfigHelper - isMonospace serif', () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\tterminal: {\n\t\t\t\tintegrated: {\n\t\t\t\t\tfontFamily: 'serif'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconst configHelper = store.add(new TestTerminalConfigHelper(configurationService, null!, null!, null!, null!));\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.configFontIsMonospace(), false, 'serif is not monospaced');\n\t});\n\n\ttest('TerminalConfigHelper - isMonospace monospace falls back to editor.fontFamily', () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\teditor: {\n\t\t\t\tfontFamily: 'monospace'\n\t\t\t},\n\t\t\tterminal: {\n\t\t\t\tintegrated: {\n\t\t\t\t\tfontFamily: null\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst configHelper = store.add(new TestTerminalConfigHelper(configurationService, null!, null!, null!, null!));\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.configFontIsMonospace(), true, 'monospace is monospaced');\n\t});\n\n\ttest('TerminalConfigHelper - isMonospace sans-serif falls back to editor.fontFamily', () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\teditor: {\n\t\t\t\tfontFamily: 'sans-serif'\n\t\t\t},\n\t\t\tterminal: {\n\t\t\t\tintegrated: {\n\t\t\t\t\tfontFamily: null\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst configHelper = store.add(new TestTerminalConfigHelper(configurationService, null!, null!, null!, null!));\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.configFontIsMonospace(), false, 'sans-serif is not monospaced');\n\t});\n\n\ttest('TerminalConfigHelper - isMonospace serif falls back to editor.fontFamily', () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\teditor: {\n\t\t\t\tfontFamily: 'serif'\n\t\t\t},\n\t\t\tterminal: {\n\t\t\t\tintegrated: {\n\t\t\t\t\tfontFamily: null\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst configHelper = store.add(new TestTerminalConfigHelper(configurationService, null!, null!, null!, null!));\n\t\tconfigHelper.panelContainer = fixture;\n\t\tassert.strictEqual(configHelper.configFontIsMonospace(), false, 'serif is not monospaced');\n\t});\n});\n"]}