{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/test/browser/terminalProcessManager.test.ts"],"names":[],"mappings":"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","file":"terminalProcessManager.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { strictEqual } from 'assert';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TerminalConfigHelper } from 'vs/workbench/contrib/terminal/browser/terminalConfigHelper';\nimport { TerminalProcessManager } from 'vs/workbench/contrib/terminal/browser/terminalProcessManager';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { ITestInstantiationService, TestTerminalProfileResolverService, workbenchInstantiationService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IEnvironmentVariableService } from 'vs/workbench/contrib/terminal/common/environmentVariable';\nimport { EnvironmentVariableService } from 'vs/workbench/contrib/terminal/common/environmentVariableService';\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { ITerminalChildProcess, ITerminalLogService } from 'vs/platform/terminal/common/terminal';\nimport { ITerminalProfileResolverService } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { ITerminalInstanceService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { Event } from 'vs/base/common/event';\nimport { TestProductService } from 'vs/workbench/test/common/workbenchTestServices';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { NullLogService } from 'vs/platform/log/common/log';\n\nclass TestTerminalChildProcess implements ITerminalChildProcess {\n\tid: number = 0;\n\tget capabilities() { return []; }\n\tconstructor(\n\t\treadonly shouldPersist: boolean\n\t) {\n\t}\n\tupdateProperty(property: any, value: any): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tonProcessOverrideDimensions?: Event<any> | undefined;\n\tonProcessResolvedShellLaunchConfig?: Event<any> | undefined;\n\tonDidChangeHasChildProcesses?: Event<any> | undefined;\n\n\tonDidChangeProperty = Event.None;\n\tonProcessData = Event.None;\n\tonProcessExit = Event.None;\n\tonProcessReady = Event.None;\n\tonProcessTitleChanged = Event.None;\n\tonProcessShellTypeChanged = Event.None;\n\tasync start(): Promise<undefined> { return undefined; }\n\tshutdown(immediate: boolean): void { }\n\tinput(data: string): void { }\n\tresize(cols: number, rows: number): void { }\n\tclearBuffer(): void { }\n\tacknowledgeDataEvent(charCount: number): void { }\n\tasync setUnicodeVersion(version: '6' | '11'): Promise<void> { }\n\tasync getInitialCwd(): Promise<string> { return ''; }\n\tasync getCwd(): Promise<string> { return ''; }\n\tasync processBinary(data: string): Promise<void> { }\n\trefreshProperty(property: any): Promise<any> { return Promise.resolve(''); }\n}\n\nclass TestTerminalInstanceService implements Partial<ITerminalInstanceService> {\n\tgetBackend() {\n\t\treturn {\n\t\t\tonPtyHostExit: Event.None,\n\t\t\tonPtyHostUnresponsive: Event.None,\n\t\t\tonPtyHostResponsive: Event.None,\n\t\t\tonPtyHostRestart: Event.None,\n\t\t\tonDidMoveWindowInstance: Event.None,\n\t\t\tonDidRequestDetach: Event.None,\n\t\t\tcreateProcess: (\n\t\t\t\tshellLaunchConfig: any,\n\t\t\t\tcwd: string,\n\t\t\t\tcols: number,\n\t\t\t\trows: number,\n\t\t\t\tunicodeVersion: '6' | '11',\n\t\t\t\tenv: any,\n\t\t\t\twindowsEnableConpty: boolean,\n\t\t\t\tshouldPersist: boolean\n\t\t\t) => new TestTerminalChildProcess(shouldPersist),\n\t\t\tgetLatency: () => Promise.resolve([])\n\t\t} as any;\n\t}\n}\n\nsuite('Workbench - TerminalProcessManager', () => {\n\tlet store: DisposableStore;\n\tlet instantiationService: ITestInstantiationService;\n\tlet manager: TerminalProcessManager;\n\n\tsetup(async () => {\n\t\tstore = new DisposableStore();\n\t\tinstantiationService = workbenchInstantiationService(undefined, store);\n\t\tconst configurationService = new TestConfigurationService();\n\t\tawait configurationService.setUserConfiguration('editor', { fontFamily: 'foo' });\n\t\tawait configurationService.setUserConfiguration('terminal', {\n\t\t\tintegrated: {\n\t\t\t\tfontFamily: 'bar',\n\t\t\t\tenablePersistentSessions: true,\n\t\t\t\tshellIntegration: {\n\t\t\t\t\tenabled: false\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tinstantiationService.stub(IConfigurationService, configurationService);\n\t\tinstantiationService.stub(IProductService, TestProductService);\n\t\tinstantiationService.stub(ITerminalLogService, new NullLogService());\n\t\tinstantiationService.stub(IEnvironmentVariableService, instantiationService.createInstance(EnvironmentVariableService));\n\t\tinstantiationService.stub(ITerminalProfileResolverService, TestTerminalProfileResolverService);\n\t\tinstantiationService.stub(ITerminalInstanceService, new TestTerminalInstanceService());\n\n\t\tconst configHelper = store.add(instantiationService.createInstance(TerminalConfigHelper));\n\t\tmanager = store.add(instantiationService.createInstance(TerminalProcessManager, 1, configHelper, undefined, undefined, undefined));\n\t});\n\n\tteardown(() => store.dispose());\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('process persistence', () => {\n\t\tsuite('local', () => {\n\t\t\ttest('regular terminal should persist', async () => {\n\t\t\t\tconst p = await manager.createProcess({\n\t\t\t\t}, 1, 1, false);\n\t\t\t\tstrictEqual(p, undefined);\n\t\t\t\tstrictEqual(manager.shouldPersist, true);\n\t\t\t});\n\t\t\ttest('task terminal should not persist', async () => {\n\t\t\t\tconst p = await manager.createProcess({\n\t\t\t\t\tisFeatureTerminal: true\n\t\t\t\t}, 1, 1, false);\n\t\t\t\tstrictEqual(p, undefined);\n\t\t\t\tstrictEqual(manager.shouldPersist, false);\n\t\t\t});\n\t\t});\n\t\tsuite('remote', () => {\n\t\t\tconst remoteCwd = URI.from({\n\t\t\t\tscheme: Schemas.vscodeRemote,\n\t\t\t\tpath: 'test/cwd'\n\t\t\t});\n\n\t\t\ttest('regular terminal should persist', async () => {\n\t\t\t\tconst p = await manager.createProcess({\n\t\t\t\t\tcwd: remoteCwd\n\t\t\t\t}, 1, 1, false);\n\t\t\t\tstrictEqual(p, undefined);\n\t\t\t\tstrictEqual(manager.shouldPersist, true);\n\t\t\t});\n\t\t\ttest('task terminal should not persist', async () => {\n\t\t\t\tconst p = await manager.createProcess({\n\t\t\t\t\tisFeatureTerminal: true,\n\t\t\t\t\tcwd: remoteCwd\n\t\t\t\t}, 1, 1, false);\n\t\t\t\tstrictEqual(p, undefined);\n\t\t\t\tstrictEqual(manager.shouldPersist, false);\n\t\t\t});\n\t\t});\n\t});\n});\n"]}