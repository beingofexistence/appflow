{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/test/browser/terminalActions.test.ts"],"names":[],"mappings":"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","file":"terminalActions.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepStrictEqual } from 'assert';\nimport { URI } from 'vs/base/common/uri';\nimport { IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { WorkspaceFolderCwdPair, shrinkWorkspaceFolderCwdPairs } from 'vs/workbench/contrib/terminal/browser/terminalActions';\n\nfunction makeFakeFolder(name: string, uri: URI): IWorkspaceFolder {\n\treturn {\n\t\tname,\n\t\turi,\n\t\tindex: 0,\n\t\ttoResource: () => uri,\n\t};\n}\n\nfunction makePair(folder: IWorkspaceFolder, cwd?: URI | IWorkspaceFolder, isAbsolute?: boolean): WorkspaceFolderCwdPair {\n\treturn {\n\t\tfolder,\n\t\tcwd: !cwd ? folder.uri : (cwd instanceof URI ? cwd : cwd.uri),\n\t\tisAbsolute: !!isAbsolute,\n\t\tisOverridden: !!cwd && cwd.toString() !== folder.uri.toString(),\n\t};\n}\n\nsuite('terminalActions', () => {\n\tconst root: URI = URI.file('/some-root');\n\tconst a = makeFakeFolder('a', URI.joinPath(root, 'a'));\n\tconst b = makeFakeFolder('b', URI.joinPath(root, 'b'));\n\tconst c = makeFakeFolder('c', URI.joinPath(root, 'c'));\n\tconst d = makeFakeFolder('d', URI.joinPath(root, 'd'));\n\n\tsuite('shrinkWorkspaceFolderCwdPairs', () => {\n\t\ttest('should return empty when given array is empty', () => {\n\t\t\tdeepStrictEqual(shrinkWorkspaceFolderCwdPairs([]), []);\n\t\t});\n\n\t\ttest('should return the only single pair when given argument is a single element array', () => {\n\t\t\tconst pairs = [makePair(a)];\n\t\t\tdeepStrictEqual(shrinkWorkspaceFolderCwdPairs(pairs), pairs);\n\t\t});\n\n\t\ttest('should return all pairs when no repeated cwds', () => {\n\t\t\tconst pairs = [makePair(a), makePair(b), makePair(c)];\n\t\t\tdeepStrictEqual(shrinkWorkspaceFolderCwdPairs(pairs), pairs);\n\t\t});\n\n\t\tsuite('should select the pair that has the same URI when repeated cwds exist', () => {\n\t\t\ttest('all repeated', () => {\n\t\t\t\tconst pairA = makePair(a);\n\t\t\t\tconst pairB = makePair(b, a); // CWD points to A\n\t\t\t\tconst pairC = makePair(c, a); // CWD points to A\n\t\t\t\tdeepStrictEqual(shrinkWorkspaceFolderCwdPairs([pairA, pairB, pairC]), [pairA]);\n\t\t\t});\n\n\t\t\ttest('two repeated + one different', () => {\n\t\t\t\tconst pairA = makePair(a);\n\t\t\t\tconst pairB = makePair(b, a); // CWD points to A\n\t\t\t\tconst pairC = makePair(c);\n\t\t\t\tdeepStrictEqual(shrinkWorkspaceFolderCwdPairs([pairA, pairB, pairC]), [pairA, pairC]);\n\t\t\t});\n\n\t\t\ttest('two repeated + two repeated', () => {\n\t\t\t\tconst pairA = makePair(a);\n\t\t\t\tconst pairB = makePair(b, a); // CWD points to A\n\t\t\t\tconst pairC = makePair(c);\n\t\t\t\tconst pairD = makePair(d, c);\n\t\t\t\tdeepStrictEqual(shrinkWorkspaceFolderCwdPairs([pairA, pairB, pairC, pairD]), [pairA, pairC]);\n\t\t\t});\n\n\t\t\ttest('two repeated + two repeated (reverse order)', () => {\n\t\t\t\tconst pairB = makePair(b, a); // CWD points to A\n\t\t\t\tconst pairA = makePair(a);\n\t\t\t\tconst pairD = makePair(d, c);\n\t\t\t\tconst pairC = makePair(c);\n\t\t\t\tdeepStrictEqual(shrinkWorkspaceFolderCwdPairs([pairA, pairB, pairC, pairD]), [pairA, pairC]);\n\t\t\t});\n\t\t});\n\t});\n});\n"]}