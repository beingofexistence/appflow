{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/test/browser/xterm/decorationAddon.test.ts"],"names":[],"mappings":"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","file":"decorationAddon.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { notEqual, strictEqual, throws } from 'assert';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { ILogService, NullLogService } from 'vs/platform/log/common/log';\nimport { DecorationAddon } from 'vs/workbench/contrib/terminal/browser/xterm/decorationAddon';\nimport { TerminalCapabilityStore } from 'vs/platform/terminal/common/capabilities/terminalCapabilityStore';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport type { IDecoration, IDecorationOptions, Terminal as RawXtermTerminal } from 'xterm';\nimport { ITerminalCommand, TerminalCapability } from 'vs/platform/terminal/common/capabilities/capabilities';\nimport { CommandDetectionCapability } from 'vs/platform/terminal/common/capabilities/commandDetectionCapability';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { ContextMenuService } from 'vs/platform/contextview/browser/contextMenuService';\nimport { TestThemeService } from 'vs/platform/theme/test/common/testThemeService';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { TestLifecycleService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { importAMDNodeModule } from 'vs/amdX';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nsuite('DecorationAddon', () => {\n\tlet decorationAddon: DecorationAddon;\n\tlet xterm: RawXtermTerminal;\n\tlet instantiationService: TestInstantiationService;\n\n\tsetup(async () => {\n\t\tconst TerminalCtor = (await importAMDNodeModule<typeof import('xterm')>('xterm', 'lib/xterm.js')).Terminal;\n\t\tclass TestTerminal extends TerminalCtor {\n\t\t\toverride registerDecoration(decorationOptions: IDecorationOptions): IDecoration | undefined {\n\t\t\t\tif (decorationOptions.marker.isDisposed) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tconst element = document.createElement('div');\n\t\t\t\treturn { marker: decorationOptions.marker, element, onDispose: () => { }, isDisposed: false, dispose: () => { }, onRender: (element: HTMLElement) => { return element; } } as unknown as IDecoration;\n\t\t\t}\n\t\t}\n\n\t\tinstantiationService = new TestInstantiationService();\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\tworkbench: {\n\t\t\t\thover: { delay: 5 },\n\t\t\t},\n\t\t\tterminal: {\n\t\t\t\tintegrated: {\n\t\t\t\t\tshellIntegration: {\n\t\t\t\t\t\tdecorationsEnabled: 'both'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tinstantiationService.stub(IThemeService, new TestThemeService());\n\t\txterm = new TestTerminal({\n\t\t\tallowProposedApi: true,\n\t\t\tcols: 80,\n\t\t\trows: 30\n\t\t});\n\t\tinstantiationService.stub(IConfigurationService, configurationService);\n\t\tinstantiationService.stub(IContextMenuService, instantiationService.createInstance(ContextMenuService));\n\t\tinstantiationService.stub(ILogService, NullLogService);\n\t\tconst capabilities = new TerminalCapabilityStore();\n\t\tcapabilities.add(TerminalCapability.CommandDetection, instantiationService.createInstance(CommandDetectionCapability, xterm));\n\t\tinstantiationService.stub(ILifecycleService, new TestLifecycleService());\n\t\tdecorationAddon = instantiationService.createInstance(DecorationAddon, capabilities);\n\t\txterm.loadAddon(decorationAddon);\n\t});\n\n\tteardown(() => {\n\t\tinstantiationService.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('registerDecoration', () => {\n\t\ttest('should throw when command has no marker', async () => {\n\t\t\tthrows(() => decorationAddon.registerCommandDecoration({ command: 'cd src', timestamp: Date.now(), hasOutput: () => false } as ITerminalCommand));\n\t\t});\n\t\ttest('should return undefined when marker has been disposed of', async () => {\n\t\t\tconst marker = xterm.registerMarker(1);\n\t\t\tmarker?.dispose();\n\t\t\tstrictEqual(decorationAddon.registerCommandDecoration({ command: 'cd src', marker, timestamp: Date.now(), hasOutput: () => false } as ITerminalCommand), undefined);\n\t\t});\n\t\ttest('should return decoration when marker has not been disposed of', async () => {\n\t\t\tconst marker = xterm.registerMarker(2);\n\t\t\tnotEqual(decorationAddon.registerCommandDecoration({ command: 'cd src', marker, timestamp: Date.now(), hasOutput: () => false } as ITerminalCommand), undefined);\n\t\t});\n\t\ttest('should return decoration with mark properties', async () => {\n\t\t\tconst marker = xterm.registerMarker(2);\n\t\t\tnotEqual(decorationAddon.registerCommandDecoration(undefined, undefined, { marker }), undefined);\n\t\t});\n\t});\n});\n"]}