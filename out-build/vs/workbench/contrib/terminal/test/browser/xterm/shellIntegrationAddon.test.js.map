{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/test/browser/xterm/shellIntegrationAddon.test.ts"],"names":[],"mappings":"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","file":"shellIntegrationAddon.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Terminal } from 'xterm';\nimport { strictEqual, deepStrictEqual, deepEqual } from 'assert';\nimport * as sinon from 'sinon';\nimport { parseKeyValueAssignment, parseMarkSequence, deserializeMessage, ShellIntegrationAddon } from 'vs/platform/terminal/common/xterm/shellIntegrationAddon';\nimport { ITerminalCapabilityStore, TerminalCapability } from 'vs/platform/terminal/common/capabilities/capabilities';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { importAMDNodeModule } from 'vs/amdX';\nimport { writeP } from 'vs/workbench/contrib/terminal/browser/terminalTestHelpers';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nclass TestShellIntegrationAddon extends ShellIntegrationAddon {\n\tgetCommandDetectionMock(terminal: Terminal): sinon.SinonMock {\n\t\tconst capability = super._createOrGetCommandDetection(terminal);\n\t\tthis.capabilities.add(TerminalCapability.CommandDetection, capability);\n\t\treturn sinon.mock(capability);\n\t}\n\tgetCwdDectionMock(): sinon.SinonMock {\n\t\tconst capability = super._createOrGetCwdDetection();\n\t\tthis.capabilities.add(TerminalCapability.CwdDetection, capability);\n\t\treturn sinon.mock(capability);\n\t}\n}\n\nsuite('ShellIntegrationAddon', () => {\n\tlet store: DisposableStore;\n\tsetup(() => store = new DisposableStore());\n\tteardown(() => store.dispose());\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet xterm: Terminal;\n\tlet shellIntegrationAddon: TestShellIntegrationAddon;\n\tlet capabilities: ITerminalCapabilityStore;\n\n\tsetup(async () => {\n\t\tconst TerminalCtor = (await importAMDNodeModule<typeof import('xterm')>('xterm', 'lib/xterm.js')).Terminal;\n\t\txterm = store.add(new TerminalCtor({ allowProposedApi: true, cols: 80, rows: 30 }));\n\t\tshellIntegrationAddon = store.add(new TestShellIntegrationAddon('', true, undefined, new NullLogService()));\n\t\txterm.loadAddon(shellIntegrationAddon);\n\t\tcapabilities = shellIntegrationAddon.capabilities;\n\t});\n\n\tsuite('cwd detection', () => {\n\t\ttest('should activate capability on the cwd sequence (OSC 633 ; P ; Cwd=<cwd> ST)', async () => {\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CwdDetection), false);\n\t\t\tawait writeP(xterm, 'foo');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CwdDetection), false);\n\t\t\tawait writeP(xterm, '\\x1b]633;P;Cwd=/foo\\x07');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CwdDetection), true);\n\t\t});\n\n\t\ttest('should pass cwd sequence to the capability', async () => {\n\t\t\tconst mock = shellIntegrationAddon.getCwdDectionMock();\n\t\t\tmock.expects('updateCwd').once().withExactArgs('/foo');\n\t\t\tawait writeP(xterm, '\\x1b]633;P;Cwd=/foo\\x07');\n\t\t\tmock.verify();\n\t\t});\n\n\t\ttest('detect ITerm sequence: `OSC 1337 ; CurrentDir=<Cwd> ST`', async () => {\n\t\t\ttype TestCase = [title: string, input: string, expected: string];\n\t\t\tconst cases: TestCase[] = [\n\t\t\t\t['root', '/', '/'],\n\t\t\t\t['non-root', '/some/path', '/some/path'],\n\t\t\t];\n\t\t\tfor (const x of cases) {\n\t\t\t\tconst [title, input, expected] = x;\n\t\t\t\tconst mock = shellIntegrationAddon.getCwdDectionMock();\n\t\t\t\tmock.expects('updateCwd').once().withExactArgs(expected).named(title);\n\t\t\t\tawait writeP(xterm, `\\x1b]1337;CurrentDir=${input}\\x07`);\n\t\t\t\tmock.verify();\n\t\t\t}\n\t\t});\n\n\t\tsuite('detect `SetCwd` sequence: `OSC 7; scheme://cwd ST`', () => {\n\t\t\ttest('should accept well-formatted URLs', async () => {\n\t\t\t\ttype TestCase = [title: string, input: string, expected: string];\n\t\t\t\tconst cases: TestCase[] = [\n\t\t\t\t\t// Different hostname values:\n\t\t\t\t\t['empty hostname, pointing root', 'file:///', '/'],\n\t\t\t\t\t['empty hostname', 'file:///test-root/local', '/test-root/local'],\n\t\t\t\t\t['non-empty hostname', 'file://some-hostname/test-root/local', '/test-root/local'],\n\t\t\t\t\t// URL-encoded chars:\n\t\t\t\t\t['URL-encoded value (1)', 'file:///test-root/%6c%6f%63%61%6c', '/test-root/local'],\n\t\t\t\t\t['URL-encoded value (2)', 'file:///test-root/local%22', '/test-root/local\"'],\n\t\t\t\t\t['URL-encoded value (3)', 'file:///test-root/local\"', '/test-root/local\"'],\n\t\t\t\t];\n\t\t\t\tfor (const x of cases) {\n\t\t\t\t\tconst [title, input, expected] = x;\n\t\t\t\t\tconst mock = shellIntegrationAddon.getCwdDectionMock();\n\t\t\t\t\tmock.expects('updateCwd').once().withExactArgs(expected).named(title);\n\t\t\t\t\tawait writeP(xterm, `\\x1b]7;${input}\\x07`);\n\t\t\t\t\tmock.verify();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\ttest('should ignore ill-formatted URLs', async () => {\n\t\t\t\ttype TestCase = [title: string, input: string];\n\t\t\t\tconst cases: TestCase[] = [\n\t\t\t\t\t// Different hostname values:\n\t\t\t\t\t['no hostname, pointing root', 'file://'],\n\t\t\t\t\t// Non-`file` scheme values:\n\t\t\t\t\t['no scheme (1)', '/test-root'],\n\t\t\t\t\t['no scheme (2)', '//test-root'],\n\t\t\t\t\t['no scheme (3)', '///test-root'],\n\t\t\t\t\t['no scheme (4)', ':///test-root'],\n\t\t\t\t\t['http', 'http:///test-root'],\n\t\t\t\t\t['ftp', 'ftp:///test-root'],\n\t\t\t\t\t['ssh', 'ssh:///test-root'],\n\t\t\t\t];\n\n\t\t\t\tfor (const x of cases) {\n\t\t\t\t\tconst [title, input] = x;\n\t\t\t\t\tconst mock = shellIntegrationAddon.getCwdDectionMock();\n\t\t\t\t\tmock.expects('updateCwd').never().named(title);\n\t\t\t\t\tawait writeP(xterm, `\\x1b]7;${input}\\x07`);\n\t\t\t\t\tmock.verify();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\ttest('detect `SetWindowsFrindlyCwd` sequence: `OSC 9 ; 9 ; <cwd> ST`', async () => {\n\t\t\ttype TestCase = [title: string, input: string, expected: string];\n\t\t\tconst cases: TestCase[] = [\n\t\t\t\t['root', '/', '/'],\n\t\t\t\t['non-root', '/some/path', '/some/path'],\n\t\t\t];\n\t\t\tfor (const x of cases) {\n\t\t\t\tconst [title, input, expected] = x;\n\t\t\t\tconst mock = shellIntegrationAddon.getCwdDectionMock();\n\t\t\t\tmock.expects('updateCwd').once().withExactArgs(expected).named(title);\n\t\t\t\tawait writeP(xterm, `\\x1b]9;9;${input}\\x07`);\n\t\t\t\tmock.verify();\n\t\t\t}\n\t\t});\n\t});\n\n\tsuite('command tracking', () => {\n\t\ttest('should activate capability on the prompt start sequence (OSC 633 ; A ST)', async () => {\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), false);\n\t\t\tawait writeP(xterm, 'foo');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), false);\n\t\t\tawait writeP(xterm, '\\x1b]633;A\\x07');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), true);\n\t\t});\n\t\ttest('should pass prompt start sequence to the capability', async () => {\n\t\t\tconst mock = shellIntegrationAddon.getCommandDetectionMock(xterm);\n\t\t\tmock.expects('handlePromptStart').once().withExactArgs();\n\t\t\tawait writeP(xterm, '\\x1b]633;A\\x07');\n\t\t\tmock.verify();\n\t\t});\n\t\ttest('should activate capability on the command start sequence (OSC 633 ; B ST)', async () => {\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), false);\n\t\t\tawait writeP(xterm, 'foo');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), false);\n\t\t\tawait writeP(xterm, '\\x1b]633;B\\x07');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), true);\n\t\t});\n\t\ttest('should pass command start sequence to the capability', async () => {\n\t\t\tconst mock = shellIntegrationAddon.getCommandDetectionMock(xterm);\n\t\t\tmock.expects('handleCommandStart').once().withExactArgs();\n\t\t\tawait writeP(xterm, '\\x1b]633;B\\x07');\n\t\t\tmock.verify();\n\t\t});\n\t\ttest('should activate capability on the command executed sequence (OSC 633 ; C ST)', async () => {\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), false);\n\t\t\tawait writeP(xterm, 'foo');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), false);\n\t\t\tawait writeP(xterm, '\\x1b]633;C\\x07');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), true);\n\t\t});\n\t\ttest('should pass command executed sequence to the capability', async () => {\n\t\t\tconst mock = shellIntegrationAddon.getCommandDetectionMock(xterm);\n\t\t\tmock.expects('handleCommandExecuted').once().withExactArgs();\n\t\t\tawait writeP(xterm, '\\x1b]633;C\\x07');\n\t\t\tmock.verify();\n\t\t});\n\t\ttest('should activate capability on the command finished sequence (OSC 633 ; D ; <ExitCode> ST)', async () => {\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), false);\n\t\t\tawait writeP(xterm, 'foo');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), false);\n\t\t\tawait writeP(xterm, '\\x1b]633;D;7\\x07');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), true);\n\t\t});\n\t\ttest('should pass command finished sequence to the capability', async () => {\n\t\t\tconst mock = shellIntegrationAddon.getCommandDetectionMock(xterm);\n\t\t\tmock.expects('handleCommandFinished').once().withExactArgs(7);\n\t\t\tawait writeP(xterm, '\\x1b]633;D;7\\x07');\n\t\t\tmock.verify();\n\t\t});\n\t\ttest('should pass command line sequence to the capability', async () => {\n\t\t\tconst mock = shellIntegrationAddon.getCommandDetectionMock(xterm);\n\t\t\tmock.expects('setCommandLine').once().withExactArgs('', false);\n\t\t\tawait writeP(xterm, '\\x1b]633;E\\x07');\n\t\t\tmock.verify();\n\n\t\t\tconst mock2 = shellIntegrationAddon.getCommandDetectionMock(xterm);\n\t\t\tmock2.expects('setCommandLine').twice().withExactArgs('cmd', false);\n\t\t\tawait writeP(xterm, '\\x1b]633;E;cmd\\x07');\n\t\t\tawait writeP(xterm, '\\x1b]633;E;cmd;invalid-nonce\\x07');\n\t\t\tmock2.verify();\n\t\t});\n\t\ttest('should not activate capability on the cwd sequence (OSC 633 ; P=Cwd=<cwd> ST)', async () => {\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), false);\n\t\t\tawait writeP(xterm, 'foo');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), false);\n\t\t\tawait writeP(xterm, '\\x1b]633;P;Cwd=/foo\\x07');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.CommandDetection), false);\n\t\t});\n\t\ttest('should pass cwd sequence to the capability if it\\'s initialized', async () => {\n\t\t\tconst mock = shellIntegrationAddon.getCommandDetectionMock(xterm);\n\t\t\tmock.expects('setCwd').once().withExactArgs('/foo');\n\t\t\tawait writeP(xterm, '\\x1b]633;P;Cwd=/foo\\x07');\n\t\t\tmock.verify();\n\t\t});\n\t});\n\tsuite('BufferMarkCapability', () => {\n\t\ttest('SetMark', async () => {\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.BufferMarkDetection), false);\n\t\t\tawait writeP(xterm, 'foo');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.BufferMarkDetection), false);\n\t\t\tawait writeP(xterm, '\\x1b]633;SetMark;\\x07');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.BufferMarkDetection), true);\n\t\t});\n\t\ttest('SetMark - ID', async () => {\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.BufferMarkDetection), false);\n\t\t\tawait writeP(xterm, 'foo');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.BufferMarkDetection), false);\n\t\t\tawait writeP(xterm, '\\x1b]633;SetMark;1;\\x07');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.BufferMarkDetection), true);\n\t\t});\n\t\ttest('SetMark - hidden', async () => {\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.BufferMarkDetection), false);\n\t\t\tawait writeP(xterm, 'foo');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.BufferMarkDetection), false);\n\t\t\tawait writeP(xterm, '\\x1b]633;SetMark;;Hidden\\x07');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.BufferMarkDetection), true);\n\t\t});\n\t\ttest('SetMark - hidden & ID', async () => {\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.BufferMarkDetection), false);\n\t\t\tawait writeP(xterm, 'foo');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.BufferMarkDetection), false);\n\t\t\tawait writeP(xterm, '\\x1b]633;SetMark;1;Hidden\\x07');\n\t\t\tstrictEqual(capabilities.has(TerminalCapability.BufferMarkDetection), true);\n\t\t});\n\t\tsuite('parseMarkSequence', () => {\n\t\t\ttest('basic', async () => {\n\t\t\t\tdeepEqual(parseMarkSequence(['', '']), { id: undefined, hidden: false });\n\t\t\t});\n\t\t\ttest('ID', async () => {\n\t\t\t\tdeepEqual(parseMarkSequence(['Id=3', '']), { id: \"3\", hidden: false });\n\t\t\t});\n\t\t\ttest('hidden', async () => {\n\t\t\t\tdeepEqual(parseMarkSequence(['', 'Hidden']), { id: undefined, hidden: true });\n\t\t\t});\n\t\t\ttest('ID + hidden', async () => {\n\t\t\t\tdeepEqual(parseMarkSequence(['Id=4555', 'Hidden']), { id: \"4555\", hidden: true });\n\t\t\t});\n\t\t});\n\t});\n\n\tsuite('deserializeMessage', () => {\n\t\t// A single literal backslash, in order to avoid confusion about whether we are escaping test data or testing escapes.\n\t\tconst Backslash = '\\\\' as const;\n\t\tconst Newline = '\\n' as const;\n\t\tconst Semicolon = ';' as const;\n\n\t\ttype TestCase = [title: string, input: string, expected: string];\n\t\tconst cases: TestCase[] = [\n\t\t\t['empty', '', ''],\n\t\t\t['basic', 'value', 'value'],\n\t\t\t['space', 'some thing', 'some thing'],\n\t\t\t['escaped backslash', `${Backslash}${Backslash}`, Backslash],\n\t\t\t['non-initial escaped backslash', `foo${Backslash}${Backslash}`, `foo${Backslash}`],\n\t\t\t['two escaped backslashes', `${Backslash}${Backslash}${Backslash}${Backslash}`, `${Backslash}${Backslash}`],\n\t\t\t['escaped backslash amidst text', `Hello${Backslash}${Backslash}there`, `Hello${Backslash}there`],\n\t\t\t['backslash escaped literally and as hex', `${Backslash}${Backslash} is same as ${Backslash}x5c`, `${Backslash} is same as ${Backslash}`],\n\t\t\t['escaped semicolon', `${Backslash}x3b`, Semicolon],\n\t\t\t['non-initial escaped semicolon', `foo${Backslash}x3b`, `foo${Semicolon}`],\n\t\t\t['escaped semicolon (upper hex)', `${Backslash}x3B`, Semicolon],\n\t\t\t['escaped backslash followed by literal \"x3b\" is not a semicolon', `${Backslash}${Backslash}x3b`, `${Backslash}x3b`],\n\t\t\t['non-initial escaped backslash followed by literal \"x3b\" is not a semicolon', `foo${Backslash}${Backslash}x3b`, `foo${Backslash}x3b`],\n\t\t\t['escaped backslash followed by escaped semicolon', `${Backslash}${Backslash}${Backslash}x3b`, `${Backslash}${Semicolon}`],\n\t\t\t['escaped semicolon amidst text', `some${Backslash}x3bthing`, `some${Semicolon}thing`],\n\t\t\t['escaped newline', `${Backslash}x0a`, Newline],\n\t\t\t['non-initial escaped newline', `foo${Backslash}x0a`, `foo${Newline}`],\n\t\t\t['escaped newline (upper hex)', `${Backslash}x0A`, Newline],\n\t\t\t['escaped backslash followed by literal \"x0a\" is not a newline', `${Backslash}${Backslash}x0a`, `${Backslash}x0a`],\n\t\t\t['non-initial escaped backslash followed by literal \"x0a\" is not a newline', `foo${Backslash}${Backslash}x0a`, `foo${Backslash}x0a`],\n\t\t];\n\n\t\tcases.forEach(([title, input, expected]) => {\n\t\t\ttest(title, () => strictEqual(deserializeMessage(input), expected));\n\t\t});\n\t});\n\n\ttest('parseKeyValueAssignment', () => {\n\t\ttype TestCase = [title: string, input: string, expected: [key: string, value: string | undefined]];\n\t\tconst cases: TestCase[] = [\n\t\t\t['empty', '', ['', undefined]],\n\t\t\t['no \"=\" sign', 'some-text', ['some-text', undefined]],\n\t\t\t['empty value', 'key=', ['key', '']],\n\t\t\t['empty key', '=value', ['', 'value']],\n\t\t\t['normal', 'key=value', ['key', 'value']],\n\t\t\t['multiple \"=\" signs (1)', 'key==value', ['key', '=value']],\n\t\t\t['multiple \"=\" signs (2)', 'key=value===true', ['key', 'value===true']],\n\t\t\t['just a \"=\"', '=', ['', '']],\n\t\t\t['just a \"==\"', '==', ['', '=']],\n\t\t];\n\n\t\tcases.forEach(x => {\n\t\t\tconst [title, input, [key, value]] = x;\n\t\t\tdeepStrictEqual(parseKeyValueAssignment(input), { key, value }, title);\n\t\t});\n\t});\n});\n"]}