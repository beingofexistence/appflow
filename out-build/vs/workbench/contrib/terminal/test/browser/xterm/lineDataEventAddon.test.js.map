{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/test/browser/xterm/lineDataEventAddon.test.ts"],"names":[],"mappings":"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","file":"lineDataEventAddon.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { Terminal } from 'xterm';\nimport { LineDataEventAddon } from 'vs/workbench/contrib/terminal/browser/xterm/lineDataEventAddon';\nimport { OperatingSystem } from 'vs/base/common/platform';\nimport { deepStrictEqual } from 'assert';\nimport { importAMDNodeModule } from 'vs/amdX';\nimport { writeP } from 'vs/workbench/contrib/terminal/browser/terminalTestHelpers';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\n\nsuite('LineDataEventAddon', () => {\n\tlet xterm: Terminal;\n\tlet lineDataEventAddon: LineDataEventAddon;\n\n\tlet store: DisposableStore;\n\tsetup(() => store = new DisposableStore());\n\tteardown(() => store.dispose());\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('onLineData', () => {\n\t\tlet events: string[];\n\n\t\tsetup(async () => {\n\t\t\tconst TerminalCtor = (await importAMDNodeModule<typeof import('xterm')>('xterm', 'lib/xterm.js')).Terminal;\n\t\t\txterm = store.add(new TerminalCtor({ allowProposedApi: true, cols: 4 }));\n\t\t\tlineDataEventAddon = store.add(new LineDataEventAddon());\n\t\t\txterm.loadAddon(lineDataEventAddon);\n\n\t\t\tevents = [];\n\t\t\tstore.add(lineDataEventAddon.onLineData(e => events.push(e)));\n\t\t});\n\n\t\ttest('should fire when a non-wrapped line ends with a line feed', async () => {\n\t\t\tawait writeP(xterm, 'foo');\n\t\t\tdeepStrictEqual(events, []);\n\t\t\tawait writeP(xterm, '\\n\\r');\n\t\t\tdeepStrictEqual(events, ['foo']);\n\t\t\tawait writeP(xterm, 'bar');\n\t\t\tdeepStrictEqual(events, ['foo']);\n\t\t\tawait writeP(xterm, '\\n');\n\t\t\tdeepStrictEqual(events, ['foo', 'bar']);\n\t\t});\n\n\t\ttest('should not fire soft wrapped lines', async () => {\n\t\t\tawait writeP(xterm, 'foo.');\n\t\t\tdeepStrictEqual(events, []);\n\t\t\tawait writeP(xterm, 'bar.');\n\t\t\tdeepStrictEqual(events, []);\n\t\t\tawait writeP(xterm, 'baz.');\n\t\t\tdeepStrictEqual(events, []);\n\t\t});\n\n\t\ttest('should fire when a wrapped line ends with a line feed', async () => {\n\t\t\tawait writeP(xterm, 'foo.bar.baz.');\n\t\t\tdeepStrictEqual(events, []);\n\t\t\tawait writeP(xterm, '\\n\\r');\n\t\t\tdeepStrictEqual(events, ['foo.bar.baz.']);\n\t\t});\n\n\t\ttest('should not fire on cursor move when the backing process is not on Windows', async () => {\n\t\t\tawait writeP(xterm, 'foo.\\x1b[H');\n\t\t\tdeepStrictEqual(events, []);\n\t\t});\n\n\t\ttest('should fire on cursor move when the backing process is on Windows', async () => {\n\t\t\tlineDataEventAddon.setOperatingSystem(OperatingSystem.Windows);\n\t\t\tawait writeP(xterm, 'foo\\x1b[H');\n\t\t\tdeepStrictEqual(events, ['foo']);\n\t\t});\n\t});\n});\n"]}