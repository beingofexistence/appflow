{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/test/browser/capabilities/commandDetectionCapability.test.ts"],"names":[],"mappings":"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","file":"commandDetectionCapability.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepStrictEqual, ok } from 'assert';\nimport type { Terminal } from 'xterm';\nimport { CommandDetectionCapability } from 'vs/platform/terminal/common/capabilities/commandDetectionCapability';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { ITerminalCommand } from 'vs/platform/terminal/common/capabilities/capabilities';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { IContextMenuDelegate } from 'vs/base/browser/contextmenu';\nimport { importAMDNodeModule } from 'vs/amdX';\nimport { writeP } from 'vs/workbench/contrib/terminal/browser/terminalTestHelpers';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\n\ntype TestTerminalCommandMatch = Pick<ITerminalCommand, 'command' | 'cwd' | 'exitCode'> & { marker: { line: number } };\n\nclass TestCommandDetectionCapability extends CommandDetectionCapability {\n\tclearCommands() {\n\t\tthis._commands.length = 0;\n\t}\n}\n\nsuite('CommandDetectionCapability', () => {\n\tlet disposables: DisposableStore;\n\n\tlet xterm: Terminal;\n\tlet capability: TestCommandDetectionCapability;\n\tlet addEvents: ITerminalCommand[];\n\tlet instantiationService: TestInstantiationService;\n\n\tfunction assertCommands(expectedCommands: TestTerminalCommandMatch[]) {\n\t\tdeepStrictEqual(capability.commands.map(e => e.command), expectedCommands.map(e => e.command));\n\t\tdeepStrictEqual(capability.commands.map(e => e.cwd), expectedCommands.map(e => e.cwd));\n\t\tdeepStrictEqual(capability.commands.map(e => e.exitCode), expectedCommands.map(e => e.exitCode));\n\t\tdeepStrictEqual(capability.commands.map(e => e.marker?.line), expectedCommands.map(e => e.marker?.line));\n\t\t// Ensure timestamps are set and were captured recently\n\t\tfor (const command of capability.commands) {\n\t\t\tok(Math.abs(Date.now() - command.timestamp) < 2000);\n\t\t}\n\t\tdeepStrictEqual(addEvents, capability.commands);\n\t\t// Clear the commands to avoid re-asserting past commands\n\t\taddEvents.length = 0;\n\t\tcapability.clearCommands();\n\t}\n\n\tasync function printStandardCommand(prompt: string, command: string, output: string, cwd: string | undefined, exitCode: number) {\n\t\tif (cwd !== undefined) {\n\t\t\tcapability.setCwd(cwd);\n\t\t}\n\t\tcapability.handlePromptStart();\n\t\tawait writeP(xterm, `\\r${prompt}`);\n\t\tcapability.handleCommandStart();\n\t\tawait writeP(xterm, command);\n\t\tcapability.handleCommandExecuted();\n\t\tawait writeP(xterm, `\\r\\n${output}\\r\\n`);\n\t\tcapability.handleCommandFinished(exitCode);\n\t}\n\n\tsetup(async () => {\n\t\tdisposables = new DisposableStore();\n\t\tconst TerminalCtor = (await importAMDNodeModule<typeof import('xterm')>('xterm', 'lib/xterm.js')).Terminal;\n\n\t\txterm = new TerminalCtor({ allowProposedApi: true, cols: 80 });\n\t\tinstantiationService = disposables.add(new TestInstantiationService());\n\t\tinstantiationService.stub(IContextMenuService, { showContextMenu(delegate: IContextMenuDelegate): void { } } as Partial<IContextMenuService>);\n\t\tcapability = disposables.add(new TestCommandDetectionCapability(xterm, new NullLogService()));\n\t\taddEvents = [];\n\t\tcapability.onCommandFinished(e => addEvents.push(e));\n\t\tassertCommands([]);\n\t});\n\n\tteardown(() => disposables.dispose());\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('should not add commands when no capability methods are triggered', async () => {\n\t\tawait writeP(xterm, 'foo\\r\\nbar\\r\\n');\n\t\tassertCommands([]);\n\t\tawait writeP(xterm, 'baz\\r\\n');\n\t\tassertCommands([]);\n\t});\n\n\ttest('should add commands for expected capability method calls', async () => {\n\t\tawait printStandardCommand('$ ', 'echo foo', 'foo', undefined, 0);\n\t\tassertCommands([{\n\t\t\tcommand: 'echo foo',\n\t\t\texitCode: 0,\n\t\t\tcwd: undefined,\n\t\t\tmarker: { line: 0 }\n\t\t}]);\n\t});\n\n\ttest('should trim the command when command executed appears on the following line', async () => {\n\t\tawait printStandardCommand('$ ', 'echo foo\\r\\n', 'foo', undefined, 0);\n\t\tassertCommands([{\n\t\t\tcommand: 'echo foo',\n\t\t\texitCode: 0,\n\t\t\tcwd: undefined,\n\t\t\tmarker: { line: 0 }\n\t\t}]);\n\t});\n\n\tsuite('cwd', () => {\n\t\ttest('should add cwd to commands when it\\'s set', async () => {\n\t\t\tawait printStandardCommand('$ ', 'echo foo', 'foo', '/home', 0);\n\t\t\tawait printStandardCommand('$ ', 'echo bar', 'bar', '/home/second', 0);\n\t\t\tassertCommands([\n\t\t\t\t{ command: 'echo foo', exitCode: 0, cwd: '/home', marker: { line: 0 } },\n\t\t\t\t{ command: 'echo bar', exitCode: 0, cwd: '/home/second', marker: { line: 2 } }\n\t\t\t]);\n\t\t});\n\t\ttest('should add old cwd to commands if no cwd sequence is output', async () => {\n\t\t\tawait printStandardCommand('$ ', 'echo foo', 'foo', '/home', 0);\n\t\t\tawait printStandardCommand('$ ', 'echo bar', 'bar', undefined, 0);\n\t\t\tassertCommands([\n\t\t\t\t{ command: 'echo foo', exitCode: 0, cwd: '/home', marker: { line: 0 } },\n\t\t\t\t{ command: 'echo bar', exitCode: 0, cwd: '/home', marker: { line: 2 } }\n\t\t\t]);\n\t\t});\n\t\ttest('should use an undefined cwd if it\\'s not set initially', async () => {\n\t\t\tawait printStandardCommand('$ ', 'echo foo', 'foo', undefined, 0);\n\t\t\tawait printStandardCommand('$ ', 'echo bar', 'bar', '/home', 0);\n\t\t\tassertCommands([\n\t\t\t\t{ command: 'echo foo', exitCode: 0, cwd: undefined, marker: { line: 0 } },\n\t\t\t\t{ command: 'echo bar', exitCode: 0, cwd: '/home', marker: { line: 2 } }\n\t\t\t]);\n\t\t});\n\t});\n});\n"]}