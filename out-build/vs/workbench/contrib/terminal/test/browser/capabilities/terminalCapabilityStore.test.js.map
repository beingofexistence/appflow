{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/test/browser/capabilities/terminalCapabilityStore.test.ts"],"names":[],"mappings":"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","file":"terminalCapabilityStore.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepStrictEqual } from 'assert';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { TerminalCapability } from 'vs/platform/terminal/common/capabilities/capabilities';\nimport { TerminalCapabilityStore, TerminalCapabilityStoreMultiplexer } from 'vs/platform/terminal/common/capabilities/terminalCapabilityStore';\n\nsuite('TerminalCapabilityStore', () => {\n\tlet store: TerminalCapabilityStore;\n\tlet addEvents: TerminalCapability[];\n\tlet removeEvents: TerminalCapability[];\n\n\tsetup(() => {\n\t\tstore = new TerminalCapabilityStore();\n\t\tstore.onDidAddCapabilityType(e => addEvents.push(e));\n\t\tstore.onDidRemoveCapabilityType(e => removeEvents.push(e));\n\t\taddEvents = [];\n\t\tremoveEvents = [];\n\t});\n\n\tteardown(() => store.dispose());\n\n\ttest('should fire events when capabilities are added', () => {\n\t\tassertEvents(addEvents, []);\n\t\tstore.add(TerminalCapability.CwdDetection, {} as any);\n\t\tassertEvents(addEvents, [TerminalCapability.CwdDetection]);\n\t});\n\ttest('should fire events when capabilities are removed', async () => {\n\t\tassertEvents(removeEvents, []);\n\t\tstore.add(TerminalCapability.CwdDetection, {} as any);\n\t\tassertEvents(removeEvents, []);\n\t\tstore.remove(TerminalCapability.CwdDetection);\n\t\tassertEvents(removeEvents, [TerminalCapability.CwdDetection]);\n\t});\n\ttest('has should return whether a capability is present', () => {\n\t\tdeepStrictEqual(store.has(TerminalCapability.CwdDetection), false);\n\t\tstore.add(TerminalCapability.CwdDetection, {} as any);\n\t\tdeepStrictEqual(store.has(TerminalCapability.CwdDetection), true);\n\t\tstore.remove(TerminalCapability.CwdDetection);\n\t\tdeepStrictEqual(store.has(TerminalCapability.CwdDetection), false);\n\t});\n\ttest('items should reflect current state', () => {\n\t\tdeepStrictEqual(Array.from(store.items), []);\n\t\tstore.add(TerminalCapability.CwdDetection, {} as any);\n\t\tdeepStrictEqual(Array.from(store.items), [TerminalCapability.CwdDetection]);\n\t\tstore.add(TerminalCapability.NaiveCwdDetection, {} as any);\n\t\tdeepStrictEqual(Array.from(store.items), [TerminalCapability.CwdDetection, TerminalCapability.NaiveCwdDetection]);\n\t\tstore.remove(TerminalCapability.CwdDetection);\n\t\tdeepStrictEqual(Array.from(store.items), [TerminalCapability.NaiveCwdDetection]);\n\t});\n});\n\nsuite('TerminalCapabilityStoreMultiplexer', () => {\n\tlet store: DisposableStore;\n\tlet multiplexer: TerminalCapabilityStoreMultiplexer;\n\tlet store1: TerminalCapabilityStore;\n\tlet store2: TerminalCapabilityStore;\n\tlet addEvents: TerminalCapability[];\n\tlet removeEvents: TerminalCapability[];\n\n\tsetup(() => {\n\t\tstore = new DisposableStore();\n\t\tmultiplexer = store.add(new TerminalCapabilityStoreMultiplexer());\n\t\tmultiplexer.onDidAddCapabilityType(e => addEvents.push(e));\n\t\tmultiplexer.onDidRemoveCapabilityType(e => removeEvents.push(e));\n\t\tstore1 = store.add(new TerminalCapabilityStore());\n\t\tstore2 = store.add(new TerminalCapabilityStore());\n\t\taddEvents = [];\n\t\tremoveEvents = [];\n\t});\n\n\tteardown(() => store.dispose());\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('should fire events when capabilities are enabled', async () => {\n\t\tassertEvents(addEvents, []);\n\t\tmultiplexer.add(store1);\n\t\tmultiplexer.add(store2);\n\t\tstore1.add(TerminalCapability.CwdDetection, {} as any);\n\t\tassertEvents(addEvents, [TerminalCapability.CwdDetection]);\n\t\tstore2.add(TerminalCapability.NaiveCwdDetection, {} as any);\n\t\tassertEvents(addEvents, [TerminalCapability.NaiveCwdDetection]);\n\t});\n\ttest('should fire events when capabilities are disabled', async () => {\n\t\tassertEvents(removeEvents, []);\n\t\tmultiplexer.add(store1);\n\t\tmultiplexer.add(store2);\n\t\tstore1.add(TerminalCapability.CwdDetection, {} as any);\n\t\tstore2.add(TerminalCapability.NaiveCwdDetection, {} as any);\n\t\tassertEvents(removeEvents, []);\n\t\tstore1.remove(TerminalCapability.CwdDetection);\n\t\tassertEvents(removeEvents, [TerminalCapability.CwdDetection]);\n\t\tstore2.remove(TerminalCapability.NaiveCwdDetection);\n\t\tassertEvents(removeEvents, [TerminalCapability.NaiveCwdDetection]);\n\t});\n\ttest('should fire events when stores are added', async () => {\n\t\tassertEvents(addEvents, []);\n\t\tstore1.add(TerminalCapability.CwdDetection, {} as any);\n\t\tassertEvents(addEvents, []);\n\t\tstore2.add(TerminalCapability.NaiveCwdDetection, {} as any);\n\t\tmultiplexer.add(store1);\n\t\tmultiplexer.add(store2);\n\t\tassertEvents(addEvents, [TerminalCapability.CwdDetection, TerminalCapability.NaiveCwdDetection]);\n\t});\n\ttest('items should return items from all stores', () => {\n\t\tdeepStrictEqual(Array.from(multiplexer.items).sort(), [].sort());\n\t\tmultiplexer.add(store1);\n\t\tmultiplexer.add(store2);\n\t\tstore1.add(TerminalCapability.CwdDetection, {} as any);\n\t\tdeepStrictEqual(Array.from(multiplexer.items).sort(), [TerminalCapability.CwdDetection].sort());\n\t\tstore1.add(TerminalCapability.CommandDetection, {} as any);\n\t\tstore2.add(TerminalCapability.NaiveCwdDetection, {} as any);\n\t\tdeepStrictEqual(Array.from(multiplexer.items).sort(), [TerminalCapability.CwdDetection, TerminalCapability.CommandDetection, TerminalCapability.NaiveCwdDetection].sort());\n\t\tstore2.remove(TerminalCapability.NaiveCwdDetection);\n\t\tdeepStrictEqual(Array.from(multiplexer.items).sort(), [TerminalCapability.CwdDetection, TerminalCapability.CommandDetection].sort());\n\t});\n\ttest('has should return whether a capability is present', () => {\n\t\tdeepStrictEqual(multiplexer.has(TerminalCapability.CwdDetection), false);\n\t\tmultiplexer.add(store1);\n\t\tstore1.add(TerminalCapability.CwdDetection, {} as any);\n\t\tdeepStrictEqual(multiplexer.has(TerminalCapability.CwdDetection), true);\n\t\tstore1.remove(TerminalCapability.CwdDetection);\n\t\tdeepStrictEqual(multiplexer.has(TerminalCapability.CwdDetection), false);\n\t});\n});\n\nfunction assertEvents(actual: TerminalCapability[], expected: TerminalCapability[]) {\n\tdeepStrictEqual(actual, expected);\n\tactual.length = 0;\n}\n"]}