{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/test/browser/capabilities/partialCommandDetectionCapability.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAchG,KAAK,CAAC,mCAAmC,EAAE,GAAG,EAAE;QAC/C,IAAI,KAAmB,CAAC;QACxB,IAAI,UAAgB,CAA8B;QAClD,IAAI,SAAoB,CAAC;QAEzB,SAAS,cAAc,CAAC,aAAuB;YAC9C,IAAA,wBAAe,EAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,aAAa,CAAC,CAAC;YACrE,IAAA,wBAAe,EAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,aAAa,CAAC,CAAC;QAC5D,CAAC;QAED,KAAK,CAAC,KAAK,IAAI,EAAE;YAChB,MAAM,YAAY,GAAG,CAAC,MAAM,IAAA,UAAG,EAAyC,OAAO,EAAE,cAAc,CAAC,CAAC,CAAC,QAAQ,CAAC;YAE3G,KAAK,GAAG,IAAI,YAAY,CAAC,EAAE,gBAAgB,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,CAAiB,CAAC;YAC/E,UAAU,GAAG,IAAI,wCAAI,CAA8B,KAAK,CAAC,CAAC;YAC1D,SAAS,GAAG,EAAE,CAAC;YACf,UAAU,CAAC,iBAAiB,CAAC,CAAC,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,IAAA,WAAG,GAAsC,CAAC;QAE1C,IAAI,CAAC,gFAAgF,EAAE,KAAK,IAAI,EAAE;YACjG,cAAc,CAAC,EAAE,CAAC,CAAC;YACnB,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACjC,MAAM,IAAA,0BAAI,EAAG,KAAK,EAAE,MAAM,CAAC,CAAC;YAC5B,cAAc,CAAC,EAAE,CAAC,CAAC;YACnB,MAAM,IAAA,0BAAI,EAAG,KAAK,EAAE,GAAG,CAAC,CAAC;YACzB,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACjC,MAAM,IAAA,0BAAI,EAAG,KAAK,EAAE,MAAM,CAAC,CAAC;YAC5B,cAAc,CAAC,EAAE,CAAC,CAAC;QACpB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gFAAgF,EAAE,KAAK,IAAI,EAAE;YACjG,cAAc,CAAC,EAAE,CAAC,CAAC;YACnB,MAAM,IAAA,0BAAI,EAAG,KAAK,EAAE,IAAI,CAAC,CAAC;YAC1B,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACjC,MAAM,IAAA,0BAAI,EAAG,KAAK,EAAE,UAAU,CAAC,CAAC;YAChC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACpB,MAAM,IAAA,0BAAI,EAAG,KAAK,EAAE,IAAI,CAAC,CAAC;YAC1B,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACjC,MAAM,IAAA,0BAAI,EAAG,KAAK,EAAE,MAAM,CAAC,CAAC;YAC5B,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"partialCommandDetectionCapability.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepStrictEqual } from 'assert';\nimport { PartialCommandDetectionCapability } from 'vs/platform/terminal/common/capabilities/partialCommandDetectionCapability';\nimport type { IMarker, Terminal } from 'xterm';\nimport { IXtermCore } from 'vs/workbench/contrib/terminal/browser/xterm-private';\nimport { importAMDNodeModule } from 'vs/amdX';\nimport { writeP } from 'vs/workbench/contrib/terminal/browser/terminalTestHelpers';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\ninterface TestTerminal extends Terminal {\n\t_core: IXtermCore;\n}\n\nsuite('PartialCommandDetectionCapability', () => {\n\tlet xterm: TestTerminal;\n\tlet capability: PartialCommandDetectionCapability;\n\tlet addEvents: IMarker[];\n\n\tfunction assertCommands(expectedLines: number[]) {\n\t\tdeepStrictEqual(capability.commands.map(e => e.line), expectedLines);\n\t\tdeepStrictEqual(addEvents.map(e => e.line), expectedLines);\n\t}\n\n\tsetup(async () => {\n\t\tconst TerminalCtor = (await importAMDNodeModule<typeof import('xterm')>('xterm', 'lib/xterm.js')).Terminal;\n\n\t\txterm = new TerminalCtor({ allowProposedApi: true, cols: 80 }) as TestTerminal;\n\t\tcapability = new PartialCommandDetectionCapability(xterm);\n\t\taddEvents = [];\n\t\tcapability.onCommandFinished(e => addEvents.push(e));\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('should not add commands when the cursor position is too close to the left side', async () => {\n\t\tassertCommands([]);\n\t\txterm._core._onData.fire('\\x0d');\n\t\tawait writeP(xterm, '\\r\\n');\n\t\tassertCommands([]);\n\t\tawait writeP(xterm, 'a');\n\t\txterm._core._onData.fire('\\x0d');\n\t\tawait writeP(xterm, '\\r\\n');\n\t\tassertCommands([]);\n\t});\n\n\ttest('should add commands when the cursor position is not too close to the left side', async () => {\n\t\tassertCommands([]);\n\t\tawait writeP(xterm, 'ab');\n\t\txterm._core._onData.fire('\\x0d');\n\t\tawait writeP(xterm, '\\r\\n\\r\\n');\n\t\tassertCommands([0]);\n\t\tawait writeP(xterm, 'cd');\n\t\txterm._core._onData.fire('\\x0d');\n\t\tawait writeP(xterm, '\\r\\n');\n\t\tassertCommands([0, 2]);\n\t});\n});\n"]}