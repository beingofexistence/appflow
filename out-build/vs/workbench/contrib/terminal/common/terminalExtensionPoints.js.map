{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/common/terminalExtensionPoints.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG,2BAA2B;IAC3B,MAAM,iBAAiB,GAAG,kBAAkB,CAAC,GAAG,CAAgB,sBAAsB,CAAyB,cAAG,CAA6B,CAAC;IAQnI,QAAA,IAAI,GAA2B,IAAA,mBAAG,EAA2C,8BAA8B,CAAC,CAAC;IAE1H,MAAa,IAAI;QAIhB,IAAI,gBAAgB,KAAK,OAAO,IAAI,CAAC,CAAC,CAAiB,CAAC,CAAC;QAEzD;YAHQ,MAAC,GAA6D,EAAE,CAAC;YAIxE,iBAAiB,CAAC,UAAU,CAAC,aAAa,CAAC,EAAE;gBAC5C,IAAI,CAAC,CAAC,GAAmB,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;oBAC9C,OAAO,CAAC,CAAC,KAAK,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;wBACtE,OAAO,EAAE,GAAG,CAAC,EAAE,mBAAmB,EAAE,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;oBACtE,CAAC,CAAC,IAAI,EAAE,CAAC;gBACV,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YACX,CAAC,CAAC,CAAC;QACJ,CAAC;KACD;IAfD,oBAeC;IAED,SAAS,oBAAoB,CAAC,OAAqC;QAClE,OAAO,CAAC,OAAO,CAAC,IAAI;YACnB,CACC,OAAO,OAAO,CAAC,IAAI,KAAK,QAAQ;gBAChC,SAAG,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC;gBACvB,CACC,OAAO,IAAI,OAAO,CAAC,IAAI,IAAI,MAAM,IAAI,OAAO,CAAC,IAAI;oBACjD,SAAG,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,SAAG,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAC7D,CACD,CAAC;IACJ,CAAC","file":"terminalExtensionPoints.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as extensionsRegistry from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { terminalContributionsDescriptor } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IExtensionTerminalProfile, ITerminalContributions, ITerminalProfileContribution } from 'vs/platform/terminal/common/terminal';\nimport { URI } from 'vs/base/common/uri';\n\n// terminal extension point\nconst terminalsExtPoint = extensionsRegistry.ExtensionsRegistry.registerExtensionPoint<ITerminalContributions>(terminalContributionsDescriptor);\n\nexport interface ITerminalContributionService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly terminalProfiles: ReadonlyArray<IExtensionTerminalProfile>;\n}\n\nexport const ITerminalContributionService = createDecorator<ITerminalContributionService>('terminalContributionsService');\n\nexport class TerminalContributionService implements ITerminalContributionService {\n\tdeclare _serviceBrand: undefined;\n\n\tprivate _terminalProfiles: ReadonlyArray<IExtensionTerminalProfile> = [];\n\tget terminalProfiles() { return this._terminalProfiles; }\n\n\tconstructor() {\n\t\tterminalsExtPoint.setHandler(contributions => {\n\t\t\tthis._terminalProfiles = contributions.map(c => {\n\t\t\t\treturn c.value?.profiles?.filter(p => hasValidTerminalIcon(p)).map(e => {\n\t\t\t\t\treturn { ...e, extensionIdentifier: c.description.identifier.value };\n\t\t\t\t}) || [];\n\t\t\t}).flat();\n\t\t});\n\t}\n}\n\nfunction hasValidTerminalIcon(profile: ITerminalProfileContribution): boolean {\n\treturn !profile.icon ||\n\t\t(\n\t\t\ttypeof profile.icon === 'string' ||\n\t\t\tURI.isUri(profile.icon) ||\n\t\t\t(\n\t\t\t\t'light' in profile.icon && 'dark' in profile.icon &&\n\t\t\t\tURI.isUri(profile.icon.light) && URI.isUri(profile.icon.dark)\n\t\t\t)\n\t\t);\n}\n"]}