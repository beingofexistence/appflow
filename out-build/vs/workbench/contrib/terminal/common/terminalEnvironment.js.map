{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/common/terminalEnvironment.ts"],"names":[],"mappings":"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","file":"terminalEnvironment.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * This module contains utility functions related to the environment, cwd and paths.\n */\n\nimport * as path from 'vs/base/common/path';\nimport { URI } from 'vs/base/common/uri';\nimport { IWorkspaceContextService, IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\nimport { sanitizeProcessEnvironment } from 'vs/base/common/processes';\nimport { IShellLaunchConfig, ITerminalBackend, ITerminalEnvironment, TerminalShellType, WindowsShellType } from 'vs/platform/terminal/common/terminal';\nimport { IProcessEnvironment, isWindows, language, OperatingSystem } from 'vs/base/common/platform';\nimport { escapeNonWindowsPath, sanitizeCwd } from 'vs/platform/terminal/common/terminalEnvironment';\nimport { isString } from 'vs/base/common/types';\nimport { IHistoryService } from 'vs/workbench/services/history/common/history';\nimport { ILogService } from 'vs/platform/log/common/log';\n\nexport function mergeEnvironments(parent: IProcessEnvironment, other: ITerminalEnvironment | undefined): void {\n\tif (!other) {\n\t\treturn;\n\t}\n\n\t// On Windows apply the new values ignoring case, while still retaining\n\t// the case of the original key.\n\tif (isWindows) {\n\t\tfor (const configKey in other) {\n\t\t\tlet actualKey = configKey;\n\t\t\tfor (const envKey in parent) {\n\t\t\t\tif (configKey.toLowerCase() === envKey.toLowerCase()) {\n\t\t\t\t\tactualKey = envKey;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst value = other[configKey];\n\t\t\tif (value !== undefined) {\n\t\t\t\t_mergeEnvironmentValue(parent, actualKey, value);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tObject.keys(other).forEach((key) => {\n\t\t\tconst value = other[key];\n\t\t\tif (value !== undefined) {\n\t\t\t\t_mergeEnvironmentValue(parent, key, value);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction _mergeEnvironmentValue(env: ITerminalEnvironment, key: string, value: string | null): void {\n\tif (typeof value === 'string') {\n\t\tenv[key] = value;\n\t} else {\n\t\tdelete env[key];\n\t}\n}\n\nexport function addTerminalEnvironmentKeys(env: IProcessEnvironment, version: string | undefined, locale: string | undefined, detectLocale: 'auto' | 'off' | 'on'): void {\n\tenv['TERM_PROGRAM'] = 'vscode';\n\tif (version) {\n\t\tenv['TERM_PROGRAM_VERSION'] = version;\n\t}\n\tif (shouldSetLangEnvVariable(env, detectLocale)) {\n\t\tenv['LANG'] = getLangEnvVariable(locale);\n\t}\n\tenv['COLORTERM'] = 'truecolor';\n}\n\nfunction mergeNonNullKeys(env: IProcessEnvironment, other: ITerminalEnvironment | undefined) {\n\tif (!other) {\n\t\treturn;\n\t}\n\tfor (const key of Object.keys(other)) {\n\t\tconst value = other[key];\n\t\tif (value !== undefined && value !== null) {\n\t\t\tenv[key] = value;\n\t\t}\n\t}\n}\n\nasync function resolveConfigurationVariables(variableResolver: VariableResolver, env: ITerminalEnvironment): Promise<ITerminalEnvironment> {\n\tawait Promise.all(Object.entries(env).map(async ([key, value]) => {\n\t\tif (typeof value === 'string') {\n\t\t\ttry {\n\t\t\t\tenv[key] = await variableResolver(value);\n\t\t\t} catch (e) {\n\t\t\t\tenv[key] = value;\n\t\t\t}\n\t\t}\n\t}));\n\n\treturn env;\n}\n\nexport function shouldSetLangEnvVariable(env: IProcessEnvironment, detectLocale: 'auto' | 'off' | 'on'): boolean {\n\tif (detectLocale === 'on') {\n\t\treturn true;\n\t}\n\tif (detectLocale === 'auto') {\n\t\tconst lang = env['LANG'];\n\t\treturn !lang || (lang.search(/\\.UTF\\-8$/) === -1 && lang.search(/\\.utf8$/) === -1 && lang.search(/\\.euc.+/) === -1);\n\t}\n\treturn false; // 'off'\n}\n\nexport function getLangEnvVariable(locale?: string): string {\n\tconst parts = locale ? locale.split('-') : [];\n\tconst n = parts.length;\n\tif (n === 0) {\n\t\t// Fallback to en_US if the locale is unknown\n\t\treturn 'en_US.UTF-8';\n\t}\n\tif (n === 1) {\n\t\t// The local may only contain the language, not the variant, if this is the case guess the\n\t\t// variant such that it can be used as a valid $LANG variable. The language variant chosen\n\t\t// is the original and/or most prominent with help from\n\t\t// https://stackoverflow.com/a/2502675/1156119\n\t\t// The list of locales was generated by running `locale -a` on macOS\n\t\tconst languageVariants: { [key: string]: string } = {\n\t\t\taf: 'ZA',\n\t\t\tam: 'ET',\n\t\t\tbe: 'BY',\n\t\t\tbg: 'BG',\n\t\t\tca: 'ES',\n\t\t\tcs: 'CZ',\n\t\t\tda: 'DK',\n\t\t\t// de: 'AT',\n\t\t\t// de: 'CH',\n\t\t\tde: 'DE',\n\t\t\tel: 'GR',\n\t\t\t// en: 'AU',\n\t\t\t// en: 'CA',\n\t\t\t// en: 'GB',\n\t\t\t// en: 'IE',\n\t\t\t// en: 'NZ',\n\t\t\ten: 'US',\n\t\t\tes: 'ES',\n\t\t\tet: 'EE',\n\t\t\teu: 'ES',\n\t\t\tfi: 'FI',\n\t\t\t// fr: 'BE',\n\t\t\t// fr: 'CA',\n\t\t\t// fr: 'CH',\n\t\t\tfr: 'FR',\n\t\t\the: 'IL',\n\t\t\thr: 'HR',\n\t\t\thu: 'HU',\n\t\t\thy: 'AM',\n\t\t\tis: 'IS',\n\t\t\t// it: 'CH',\n\t\t\tit: 'IT',\n\t\t\tja: 'JP',\n\t\t\tkk: 'KZ',\n\t\t\tko: 'KR',\n\t\t\tlt: 'LT',\n\t\t\t// nl: 'BE',\n\t\t\tnl: 'NL',\n\t\t\tno: 'NO',\n\t\t\tpl: 'PL',\n\t\t\tpt: 'BR',\n\t\t\t// pt: 'PT',\n\t\t\tro: 'RO',\n\t\t\tru: 'RU',\n\t\t\tsk: 'SK',\n\t\t\tsl: 'SI',\n\t\t\tsr: 'YU',\n\t\t\tsv: 'SE',\n\t\t\ttr: 'TR',\n\t\t\tuk: 'UA',\n\t\t\tzh: 'CN',\n\t\t};\n\t\tif (parts[0] in languageVariants) {\n\t\t\tparts.push(languageVariants[parts[0]]);\n\t\t}\n\t} else {\n\t\t// Ensure the variant is uppercase to be a valid $LANG\n\t\tparts[1] = parts[1].toUpperCase();\n\t}\n\treturn parts.join('_') + '.UTF-8';\n}\n\nexport async function getCwd(\n\tshell: IShellLaunchConfig,\n\tuserHome: string | undefined,\n\tvariableResolver: VariableResolver | undefined,\n\troot: URI | undefined,\n\tcustomCwd: string | undefined,\n\tlogService?: ILogService\n): Promise<string> {\n\tif (shell.cwd) {\n\t\tconst unresolved = (typeof shell.cwd === 'object') ? shell.cwd.fsPath : shell.cwd;\n\t\tconst resolved = await _resolveCwd(unresolved, variableResolver);\n\t\treturn sanitizeCwd(resolved || unresolved);\n\t}\n\n\tlet cwd: string | undefined;\n\n\tif (!shell.ignoreConfigurationCwd && customCwd) {\n\t\tif (variableResolver) {\n\t\t\tcustomCwd = await _resolveCwd(customCwd, variableResolver, logService);\n\t\t}\n\t\tif (customCwd) {\n\t\t\tif (path.isAbsolute(customCwd)) {\n\t\t\t\tcwd = customCwd;\n\t\t\t} else if (root) {\n\t\t\t\tcwd = path.join(root.fsPath, customCwd);\n\t\t\t}\n\t\t}\n\t}\n\n\t// If there was no custom cwd or it was relative with no workspace\n\tif (!cwd) {\n\t\tcwd = root ? root.fsPath : userHome || '';\n\t}\n\n\treturn sanitizeCwd(cwd);\n}\n\nasync function _resolveCwd(cwd: string, variableResolver: VariableResolver | undefined, logService?: ILogService): Promise<string | undefined> {\n\tif (variableResolver) {\n\t\ttry {\n\t\t\treturn await variableResolver(cwd);\n\t\t} catch (e) {\n\t\t\tlogService?.error('Could not resolve terminal cwd', e);\n\t\t\treturn undefined;\n\t\t}\n\t}\n\treturn cwd;\n}\n\nexport type VariableResolver = (str: string) => Promise<string>;\n\nexport function createVariableResolver(lastActiveWorkspace: IWorkspaceFolder | undefined, env: IProcessEnvironment, configurationResolverService: IConfigurationResolverService | undefined): VariableResolver | undefined {\n\tif (!configurationResolverService) {\n\t\treturn undefined;\n\t}\n\treturn (str) => configurationResolverService.resolveWithEnvironment(env, lastActiveWorkspace, str);\n}\n\nexport async function createTerminalEnvironment(\n\tshellLaunchConfig: IShellLaunchConfig,\n\tenvFromConfig: ITerminalEnvironment | undefined,\n\tvariableResolver: VariableResolver | undefined,\n\tversion: string | undefined,\n\tdetectLocale: 'auto' | 'off' | 'on',\n\tbaseEnv: IProcessEnvironment\n): Promise<IProcessEnvironment> {\n\t// Create a terminal environment based on settings, launch config and permissions\n\tconst env: IProcessEnvironment = {};\n\tif (shellLaunchConfig.strictEnv) {\n\t\t// strictEnv is true, only use the requested env (ignoring null entries)\n\t\tmergeNonNullKeys(env, shellLaunchConfig.env);\n\t} else {\n\t\t// Merge process env with the env from config and from shellLaunchConfig\n\t\tmergeNonNullKeys(env, baseEnv);\n\n\t\tconst allowedEnvFromConfig = { ...envFromConfig };\n\n\t\t// Resolve env vars from config and shell\n\t\tif (variableResolver) {\n\t\t\tif (allowedEnvFromConfig) {\n\t\t\t\tawait resolveConfigurationVariables(variableResolver, allowedEnvFromConfig);\n\t\t\t}\n\t\t\tif (shellLaunchConfig.env) {\n\t\t\t\tawait resolveConfigurationVariables(variableResolver, shellLaunchConfig.env);\n\t\t\t}\n\t\t}\n\n\t\t// Sanitize the environment, removing any undesirable VS Code and Electron environment\n\t\t// variables\n\t\tsanitizeProcessEnvironment(env, 'VSCODE_IPC_HOOK_CLI');\n\n\t\t// Merge config (settings) and ShellLaunchConfig environments\n\t\tmergeEnvironments(env, allowedEnvFromConfig);\n\t\tmergeEnvironments(env, shellLaunchConfig.env);\n\n\t\t// Adding other env keys necessary to create the process\n\t\taddTerminalEnvironmentKeys(env, version, language, detectLocale);\n\t}\n\treturn env;\n}\n\n/**\n * Takes a path and returns the properly escaped path to send to a given shell. On Windows, this\n * included trying to prepare the path for WSL if needed.\n *\n * @param originalPath The path to be escaped and formatted.\n * @param executable The executable off the shellLaunchConfig.\n * @param title The terminal's title.\n * @param shellType The type of shell the path is being sent to.\n * @param backend The backend for the terminal.\n * @param isWindowsFrontend Whether the frontend is Windows, this is only exposed for injection via\n * tests.\n * @returns An escaped version of the path to be execuded in the terminal.\n */\nexport async function preparePathForShell(resource: string | URI, executable: string | undefined, title: string, shellType: TerminalShellType | undefined, backend: Pick<ITerminalBackend, 'getWslPath'> | undefined, os: OperatingSystem | undefined, isWindowsFrontend: boolean = isWindows): Promise<string> {\n\tlet originalPath: string;\n\tif (isString(resource)) {\n\t\toriginalPath = resource;\n\t} else {\n\t\toriginalPath = resource.fsPath;\n\t\t// Apply backend OS-specific formatting to the path since URI.fsPath uses the frontend's OS\n\t\tif (isWindowsFrontend && os !== OperatingSystem.Windows) {\n\t\t\toriginalPath = originalPath.replace(/\\\\/g, '\\/');\n\t\t} else if (!isWindowsFrontend && os === OperatingSystem.Windows) {\n\t\t\toriginalPath = originalPath.replace(/\\//g, '\\\\');\n\t\t}\n\t}\n\n\tif (!executable) {\n\t\treturn originalPath;\n\t}\n\n\tconst hasSpace = originalPath.includes(' ');\n\tconst hasParens = originalPath.includes('(') || originalPath.includes(')');\n\n\tconst pathBasename = path.basename(executable, '.exe');\n\tconst isPowerShell = pathBasename === 'pwsh' ||\n\t\ttitle === 'pwsh' ||\n\t\tpathBasename === 'powershell' ||\n\t\ttitle === 'powershell';\n\n\n\tif (isPowerShell && (hasSpace || originalPath.includes('\\''))) {\n\t\treturn `& '${originalPath.replace(/'/g, '\\'\\'')}'`;\n\t}\n\n\tif (hasParens && isPowerShell) {\n\t\treturn `& '${originalPath}'`;\n\t}\n\n\tif (os === OperatingSystem.Windows) {\n\t\t// 17063 is the build number where wsl path was introduced.\n\t\t// Update Windows uriPath to be executed in WSL.\n\t\tif (shellType !== undefined) {\n\t\t\tif (shellType === WindowsShellType.GitBash) {\n\t\t\t\treturn escapeNonWindowsPath(originalPath.replace(/\\\\/g, '/'));\n\t\t\t}\n\t\t\telse if (shellType === WindowsShellType.Wsl) {\n\t\t\t\treturn backend?.getWslPath(originalPath, 'win-to-unix') || originalPath;\n\t\t\t}\n\t\t\telse if (hasSpace) {\n\t\t\t\treturn `\"${originalPath}\"`;\n\t\t\t}\n\t\t\treturn originalPath;\n\t\t}\n\t\tconst lowerExecutable = executable.toLowerCase();\n\t\tif (lowerExecutable.includes('wsl') || (lowerExecutable.includes('bash.exe') && !lowerExecutable.toLowerCase().includes('git'))) {\n\t\t\treturn backend?.getWslPath(originalPath, 'win-to-unix') || originalPath;\n\t\t} else if (hasSpace) {\n\t\t\treturn `\"${originalPath}\"`;\n\t\t}\n\t\treturn originalPath;\n\t}\n\n\treturn escapeNonWindowsPath(originalPath);\n}\n\nexport function getWorkspaceForTerminal(cwd: URI | string | undefined, workspaceContextService: IWorkspaceContextService, historyService: IHistoryService): IWorkspaceFolder | undefined {\n\tconst cwdUri = typeof cwd === 'string' ? URI.parse(cwd) : cwd;\n\tlet workspaceFolder = cwdUri ? workspaceContextService.getWorkspaceFolder(cwdUri) ?? undefined : undefined;\n\tif (!workspaceFolder) {\n\t\t// fallback to last active workspace if cwd is not available or it is not in workspace\n\t\t// TOOD: last active workspace is known to be unreliable, we should remove this fallback eventually\n\t\tconst activeWorkspaceRootUri = historyService.getLastActiveWorkspaceRoot();\n\t\tworkspaceFolder = activeWorkspaceRootUri ? workspaceContextService.getWorkspaceFolder(activeWorkspaceRootUri) ?? undefined : undefined;\n\t}\n\treturn workspaceFolder;\n}\n"]}