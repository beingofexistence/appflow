{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/common/history.ts"],"names":[],"mappings":"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","file":"history.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { env } from 'vs/base/common/process';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { LRUCache } from 'vs/base/common/map';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { FileOperationError, FileOperationResult, IFileContent, IFileService } from 'vs/platform/files/common/files';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { PosixShellType, TerminalSettingId, TerminalShellType } from 'vs/platform/terminal/common/terminal';\nimport { URI } from 'vs/base/common/uri';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { Schemas } from 'vs/base/common/network';\nimport { isWindows, OperatingSystem } from 'vs/base/common/platform';\nimport { posix, win32 } from 'vs/base/common/path';\n\n/**\n * Tracks a list of generic entries.\n */\nexport interface ITerminalPersistedHistory<T> {\n\t/**\n\t * The persisted entries.\n\t */\n\treadonly entries: IterableIterator<[string, T]>;\n\t/**\n\t * Adds an entry.\n\t */\n\tadd(key: string, value: T): void;\n\t/**\n\t * Removes an entry.\n\t */\n\tremove(key: string): void;\n\t/**\n\t * Clears all entries.\n\t */\n\tclear(): void;\n}\n\ninterface ISerializedCache<T> {\n\tentries: { key: string; value: T }[];\n}\n\nconst enum Constants {\n\tDefaultHistoryLimit = 100\n}\n\nconst enum StorageKeys {\n\tEntries = 'terminal.history.entries',\n\tTimestamp = 'terminal.history.timestamp'\n}\n\nlet commandHistory: ITerminalPersistedHistory<{ shellType: TerminalShellType }> | undefined = undefined;\nexport function getCommandHistory(accessor: ServicesAccessor): ITerminalPersistedHistory<{ shellType: TerminalShellType | undefined }> {\n\tif (!commandHistory) {\n\t\tcommandHistory = accessor.get(IInstantiationService).createInstance(TerminalPersistedHistory, 'commands') as TerminalPersistedHistory<{ shellType: TerminalShellType }>;\n\t}\n\treturn commandHistory;\n}\n\nlet directoryHistory: ITerminalPersistedHistory<{ remoteAuthority?: string }> | undefined = undefined;\nexport function getDirectoryHistory(accessor: ServicesAccessor): ITerminalPersistedHistory<{ remoteAuthority?: string }> {\n\tif (!directoryHistory) {\n\t\tdirectoryHistory = accessor.get(IInstantiationService).createInstance(TerminalPersistedHistory, 'dirs') as TerminalPersistedHistory<{ remoteAuthority?: string }>;\n\t}\n\treturn directoryHistory;\n}\n\n// Shell file history loads once per shell per window\nconst shellFileHistory: Map<TerminalShellType | undefined, string[] | null> = new Map();\nexport async function getShellFileHistory(accessor: ServicesAccessor, shellType: TerminalShellType | undefined): Promise<string[]> {\n\tconst cached = shellFileHistory.get(shellType);\n\tif (cached === null) {\n\t\treturn [];\n\t}\n\tif (cached !== undefined) {\n\t\treturn cached;\n\t}\n\tlet result: IterableIterator<string> | undefined;\n\tswitch (shellType) {\n\t\tcase PosixShellType.Bash:\n\t\t\tresult = await fetchBashHistory(accessor);\n\t\t\tbreak;\n\t\tcase PosixShellType.PowerShell: // WindowsShellType.PowerShell has the same value\n\t\t\tresult = await fetchPwshHistory(accessor);\n\t\t\tbreak;\n\t\tcase PosixShellType.Zsh:\n\t\t\tresult = await fetchZshHistory(accessor);\n\t\t\tbreak;\n\t\tcase PosixShellType.Fish:\n\t\t\tresult = await fetchFishHistory(accessor);\n\t\t\tbreak;\n\t\tdefault: return [];\n\t}\n\tif (result === undefined) {\n\t\tshellFileHistory.set(shellType, null);\n\t\treturn [];\n\t}\n\tconst array = Array.from(result);\n\tshellFileHistory.set(shellType, array);\n\treturn array;\n}\nexport function clearShellFileHistory() {\n\tshellFileHistory.clear();\n}\n\nexport class TerminalPersistedHistory<T> extends Disposable implements ITerminalPersistedHistory<T> {\n\tprivate readonly _entries: LRUCache<string, T>;\n\tprivate _timestamp: number = 0;\n\tprivate _isReady = false;\n\tprivate _isStale = true;\n\n\tget entries(): IterableIterator<[string, T]> {\n\t\tthis._ensureUpToDate();\n\t\treturn this._entries.entries();\n\t}\n\n\tconstructor(\n\t\tprivate readonly _storageDataKey: string,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IStorageService private readonly _storageService: IStorageService\n\t) {\n\t\tsuper();\n\n\t\t// Init cache\n\t\tthis._entries = new LRUCache<string, T>(this._getHistoryLimit());\n\n\t\t// Listen for config changes to set history limit\n\t\tthis._register(this._configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(TerminalSettingId.ShellIntegrationCommandHistory)) {\n\t\t\t\tthis._entries.limit = this._getHistoryLimit();\n\t\t\t}\n\t\t}));\n\n\t\t// Listen to cache changes from other windows\n\t\tthis._register(this._storageService.onDidChangeValue(StorageScope.APPLICATION, this._getTimestampStorageKey(), this._store)(() => {\n\t\t\tif (!this._isStale) {\n\t\t\t\tthis._isStale = this._storageService.getNumber(this._getTimestampStorageKey(), StorageScope.APPLICATION, 0) !== this._timestamp;\n\t\t\t}\n\t\t}));\n\t}\n\n\tadd(key: string, value: T) {\n\t\tthis._ensureUpToDate();\n\t\tthis._entries.set(key, value);\n\t\tthis._saveState();\n\t}\n\n\tremove(key: string) {\n\t\tthis._ensureUpToDate();\n\t\tthis._entries.delete(key);\n\t\tthis._saveState();\n\t}\n\n\tclear() {\n\t\tthis._ensureUpToDate();\n\t\tthis._entries.clear();\n\t\tthis._saveState();\n\t}\n\n\tprivate _ensureUpToDate() {\n\t\t// Initial load\n\t\tif (!this._isReady) {\n\t\t\tthis._loadState();\n\t\t\tthis._isReady = true;\n\t\t}\n\n\t\t// React to stale cache caused by another window\n\t\tif (this._isStale) {\n\t\t\t// Since state is saved whenever the entries change, it's a safe assumption that no\n\t\t\t// merging of entries needs to happen, just loading the new state.\n\t\t\tthis._entries.clear();\n\t\t\tthis._loadState();\n\t\t\tthis._isStale = false;\n\t\t}\n\t}\n\n\tprivate _loadState() {\n\t\tthis._timestamp = this._storageService.getNumber(this._getTimestampStorageKey(), StorageScope.APPLICATION, 0);\n\n\t\t// Load global entries plus\n\t\tconst serialized = this._loadPersistedState();\n\t\tif (serialized) {\n\t\t\tfor (const entry of serialized.entries) {\n\t\t\t\tthis._entries.set(entry.key, entry.value);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _loadPersistedState(): ISerializedCache<T> | undefined {\n\t\tconst raw = this._storageService.get(this._getEntriesStorageKey(), StorageScope.APPLICATION);\n\t\tif (raw === undefined || raw.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet serialized: ISerializedCache<T> | undefined = undefined;\n\t\ttry {\n\t\t\tserialized = JSON.parse(raw);\n\t\t} catch {\n\t\t\t// Invalid data\n\t\t\treturn undefined;\n\t\t}\n\t\treturn serialized;\n\t}\n\n\tprivate _saveState() {\n\t\tconst serialized: ISerializedCache<T> = { entries: [] };\n\t\tthis._entries.forEach((value, key) => serialized.entries.push({ key, value }));\n\t\tthis._storageService.store(this._getEntriesStorageKey(), JSON.stringify(serialized), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\tthis._timestamp = Date.now();\n\t\tthis._storageService.store(this._getTimestampStorageKey(), this._timestamp, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t}\n\n\tprivate _getHistoryLimit() {\n\t\tconst historyLimit = this._configurationService.getValue(TerminalSettingId.ShellIntegrationCommandHistory);\n\t\treturn typeof historyLimit === 'number' ? historyLimit : Constants.DefaultHistoryLimit;\n\t}\n\n\tprivate _getTimestampStorageKey() {\n\t\treturn `${StorageKeys.Timestamp}.${this._storageDataKey}`;\n\t}\n\n\tprivate _getEntriesStorageKey() {\n\t\treturn `${StorageKeys.Entries}.${this._storageDataKey}`;\n\t}\n}\n\nexport async function fetchBashHistory(accessor: ServicesAccessor): Promise<IterableIterator<string> | undefined> {\n\tconst fileService = accessor.get(IFileService);\n\tconst remoteAgentService = accessor.get(IRemoteAgentService);\n\tconst remoteEnvironment = await remoteAgentService.getEnvironment();\n\tif (remoteEnvironment?.os === OperatingSystem.Windows || !remoteEnvironment && isWindows) {\n\t\treturn undefined;\n\t}\n\tconst content = await fetchFileContents(env['HOME'], '.bash_history', false, fileService, remoteAgentService);\n\tif (content === undefined) {\n\t\treturn undefined;\n\t}\n\t// .bash_history does not differentiate wrapped commands from multiple commands. Parse\n\t// the output to get the\n\tconst fileLines = content.split('\\n');\n\tconst result: Set<string> = new Set();\n\tlet currentLine: string;\n\tlet currentCommand: string | undefined = undefined;\n\tlet wrapChar: string | undefined = undefined;\n\tfor (let i = 0; i < fileLines.length; i++) {\n\t\tcurrentLine = fileLines[i];\n\t\tif (currentCommand === undefined) {\n\t\t\tcurrentCommand = currentLine;\n\t\t} else {\n\t\t\tcurrentCommand += `\\n${currentLine}`;\n\t\t}\n\t\tfor (let c = 0; c < currentLine.length; c++) {\n\t\t\tif (wrapChar) {\n\t\t\t\tif (currentLine[c] === wrapChar) {\n\t\t\t\t\twrapChar = undefined;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (currentLine[c].match(/['\"]/)) {\n\t\t\t\t\twrapChar = currentLine[c];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (wrapChar === undefined) {\n\t\t\tif (currentCommand.length > 0) {\n\t\t\t\tresult.add(currentCommand.trim());\n\t\t\t}\n\t\t\tcurrentCommand = undefined;\n\t\t}\n\t}\n\n\treturn result.values();\n}\n\nexport async function fetchZshHistory(accessor: ServicesAccessor) {\n\tconst fileService = accessor.get(IFileService);\n\tconst remoteAgentService = accessor.get(IRemoteAgentService);\n\tconst remoteEnvironment = await remoteAgentService.getEnvironment();\n\tif (remoteEnvironment?.os === OperatingSystem.Windows || !remoteEnvironment && isWindows) {\n\t\treturn undefined;\n\t}\n\tconst content = await fetchFileContents(env['HOME'], '.zsh_history', false, fileService, remoteAgentService);\n\tif (content === undefined) {\n\t\treturn undefined;\n\t}\n\tconst fileLines = content.split(/\\:\\s\\d+\\:\\d+;/);\n\tconst result: Set<string> = new Set();\n\tfor (let i = 0; i < fileLines.length; i++) {\n\t\tconst sanitized = fileLines[i].replace(/\\\\\\n/g, '\\n').trim();\n\t\tif (sanitized.length > 0) {\n\t\t\tresult.add(sanitized);\n\t\t}\n\t}\n\treturn result.values();\n}\n\nexport async function fetchPwshHistory(accessor: ServicesAccessor) {\n\tconst fileService: Pick<IFileService, 'readFile'> = accessor.get(IFileService);\n\tconst remoteAgentService: Pick<IRemoteAgentService, 'getConnection' | 'getEnvironment'> = accessor.get(IRemoteAgentService);\n\tlet folderPrefix: string | undefined;\n\tlet filePath: string;\n\tconst remoteEnvironment = await remoteAgentService.getEnvironment();\n\tconst isFileWindows = remoteEnvironment?.os === OperatingSystem.Windows || !remoteEnvironment && isWindows;\n\tif (isFileWindows) {\n\t\tfolderPrefix = env['APPDATA'];\n\t\tfilePath = '\\\\Microsoft\\\\Windows\\\\PowerShell\\\\PSReadLine\\\\ConsoleHost_history.txt';\n\t} else {\n\t\tfolderPrefix = env['HOME'];\n\t\tfilePath = '.local/share/powershell/PSReadline/ConsoleHost_history.txt';\n\t}\n\tconst content = await fetchFileContents(folderPrefix, filePath, isFileWindows, fileService, remoteAgentService);\n\tif (content === undefined) {\n\t\treturn undefined;\n\t}\n\tconst fileLines = content.split('\\n');\n\tconst result: Set<string> = new Set();\n\tlet currentLine: string;\n\tlet currentCommand: string | undefined = undefined;\n\tlet wrapChar: string | undefined = undefined;\n\tfor (let i = 0; i < fileLines.length; i++) {\n\t\tcurrentLine = fileLines[i];\n\t\tif (currentCommand === undefined) {\n\t\t\tcurrentCommand = currentLine;\n\t\t} else {\n\t\t\tcurrentCommand += `\\n${currentLine}`;\n\t\t}\n\t\tif (!currentLine.endsWith('`')) {\n\t\t\tconst sanitized = currentCommand.trim();\n\t\t\tif (sanitized.length > 0) {\n\t\t\t\tresult.add(sanitized);\n\t\t\t}\n\t\t\tcurrentCommand = undefined;\n\t\t\tcontinue;\n\t\t}\n\t\t// If the line ends with `, the line may be wrapped. Need to also test the case where ` is\n\t\t// the last character in the line\n\t\tfor (let c = 0; c < currentLine.length; c++) {\n\t\t\tif (wrapChar) {\n\t\t\t\tif (currentLine[c] === wrapChar) {\n\t\t\t\t\twrapChar = undefined;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (currentLine[c].match(/`/)) {\n\t\t\t\t\twrapChar = currentLine[c];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Having an even number of backticks means the line is terminated\n\t\t// TODO: This doesn't cover more complicated cases where ` is within quotes\n\t\tif (!wrapChar) {\n\t\t\tconst sanitized = currentCommand.trim();\n\t\t\tif (sanitized.length > 0) {\n\t\t\t\tresult.add(sanitized);\n\t\t\t}\n\t\t\tcurrentCommand = undefined;\n\t\t} else {\n\t\t\t// Remove trailing backtick\n\t\t\tcurrentCommand = currentCommand.replace(/`$/, '');\n\t\t\twrapChar = undefined;\n\t\t}\n\t}\n\n\treturn result.values();\n}\n\nexport async function fetchFishHistory(accessor: ServicesAccessor) {\n\tconst fileService = accessor.get(IFileService);\n\tconst remoteAgentService = accessor.get(IRemoteAgentService);\n\tconst remoteEnvironment = await remoteAgentService.getEnvironment();\n\tif (remoteEnvironment?.os === OperatingSystem.Windows || !remoteEnvironment && isWindows) {\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * From `fish` docs:\n\t * > The command history is stored in the file ~/.local/share/fish/fish_history\n\t *   (or $XDG_DATA_HOME/fish/fish_history if that variable is set) by default.\n\t *\n\t * (https://fishshell.com/docs/current/interactive.html#history-search)\n\t */\n\tconst overridenDataHome = env['XDG_DATA_HOME'];\n\n\t// TODO: Unchecked fish behavior:\n\t// What if XDG_DATA_HOME was defined but somehow $XDG_DATA_HOME/fish/fish_history\n\t// was not exist. Does fish fall back to ~/.local/share/fish/fish_history?\n\n\tconst content = await (overridenDataHome\n\t\t? fetchFileContents(env['XDG_DATA_HOME'], 'fish/fish_history', false, fileService, remoteAgentService)\n\t\t: fetchFileContents(env['HOME'], '.local/share/fish/fish_history', false, fileService, remoteAgentService));\n\tif (content === undefined) {\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * These apply to `fish` v3.5.1:\n\t * - It looks like YAML but it's not. It's, quoting, *\"a broken psuedo-YAML\"*.\n\t *   See these discussions for more details:\n\t *   - https://github.com/fish-shell/fish-shell/pull/6493\n\t *   - https://github.com/fish-shell/fish-shell/issues/3341\n\t * - Every record should exactly start with `- cmd:` (the whitespace between `-` and `cmd` cannot be replaced with tab)\n\t * - Both `- cmd: echo 1` and `- cmd:echo 1` are valid entries.\n\t * - Backslashes are esacped as `\\\\`.\n\t * - Multiline commands are joined with a `\\n` sequence, hence they're read as single line commands.\n\t * - Property `when` is optional.\n\t * - History navigation respects the records order and ignore the actual `when` property values (chronological order).\n\t * - If `cmd` value is multiline , it just takes the first line. Also YAML operators like `>-` or `|-` are not supported.\n\t */\n\tconst result: Set<string> = new Set();\n\tconst cmds = content.split('\\n')\n\t\t.filter(x => x.startsWith('- cmd:'))\n\t\t.map(x => x.substring(6).trimStart());\n\tfor (let i = 0; i < cmds.length; i++) {\n\t\tconst sanitized = sanitizeFishHistoryCmd(cmds[i]).trim();\n\t\tif (sanitized.length > 0) {\n\t\t\tresult.add(sanitized);\n\t\t}\n\t}\n\treturn result.values();\n}\n\nexport function sanitizeFishHistoryCmd(cmd: string): string {\n\t/**\n\t * NOTE\n\t * This repeatedReplace() call can be eliminated by using look-ahead\n\t * caluses in the original RegExp pattern:\n\t *\n\t * >>> ```ts\n\t * >>> cmds[i].replace(/(?<=^|[^\\\\])((?:\\\\\\\\)*)(\\\\n)/g, '$1\\n')\n\t * >>> ```\n\t *\n\t * But since not all browsers support look aheads we opted to a simple\n\t * pattern and repeatedly calling replace method.\n\t */\n\treturn repeatedReplace(/(^|[^\\\\])((?:\\\\\\\\)*)(\\\\n)/g, cmd, '$1$2\\n');\n}\n\nfunction repeatedReplace(pattern: RegExp, value: string, replaceValue: string): string {\n\tlet last;\n\tlet current = value;\n\twhile (true) {\n\t\tlast = current;\n\t\tcurrent = current.replace(pattern, replaceValue);\n\t\tif (current === last) {\n\t\t\treturn current;\n\t\t}\n\t}\n}\n\nasync function fetchFileContents(\n\tfolderPrefix: string | undefined,\n\tfilePath: string,\n\tisFileWindows: boolean,\n\tfileService: Pick<IFileService, 'readFile'>,\n\tremoteAgentService: Pick<IRemoteAgentService, 'getConnection'>,\n): Promise<string | undefined> {\n\tif (!folderPrefix) {\n\t\treturn undefined;\n\t}\n\tconst isRemote = !!remoteAgentService.getConnection()?.remoteAuthority;\n\tconst historyFileUri = URI.from({\n\t\tscheme: isRemote ? Schemas.vscodeRemote : Schemas.file,\n\t\tpath: (isFileWindows ? win32.join : posix.join)(folderPrefix, filePath)\n\t});\n\tlet content: IFileContent;\n\ttry {\n\t\tcontent = await fileService.readFile(historyFileUri);\n\t} catch (e: unknown) {\n\t\t// Handle file not found only\n\t\tif (e instanceof FileOperationError && e.fileOperationResult === FileOperationResult.FILE_NOT_FOUND) {\n\t\t\treturn undefined;\n\t\t}\n\t\tthrow e;\n\t}\n\tif (content === undefined) {\n\t\treturn undefined;\n\t}\n\treturn content.value.toString();\n}\n"]}