{"version":3,"sources":["vs/workbench/contrib/terminal/common/terminalContextKey.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAKhG,IAAkB,yBA+BjB;IA/BD,WAAkB,yBAAyB;QAC1C,sDAAyB,CAAA;QACzB,oDAAuB,CAAA;QACvB,8DAAiC,CAAA;QACjC,gEAAmC,CAAA;QACnC,oEAAuC,CAAA;QACvC,0EAA6C,CAAA;QAC7C,oDAAuB,CAAA;QACvB,8DAAiC,CAAA;QACjC,oFAAuD,CAAA;QACvD,8FAAiE,CAAA;QACjE,gEAAmC,CAAA;QACnC,4DAA+B,CAAA;QAC/B,sGAAyE,CAAA;QACzE,8EAAiD,CAAA;QACjD,0EAA6C,CAAA;QAC7C,4DAA+B,CAAA;QAC/B,wEAA2C,CAAA;QAC3C,kFAAqD,CAAA;QACrD,oEAAuC,CAAA;QACvC,gEAAmC,CAAA;QACnC,kEAAqC,CAAA;QACrC,oFAAuD,CAAA;QACvD,gEAAmC,CAAA;QACnC,0EAA6C,CAAA;QAC7C,gEAAmC,CAAA;QACnC,oFAAuD,CAAA;QACvD,oEAAuC,CAAA;QACvC,4DAA+B,CAAA;QAC/B,sFAAyD,CAAA;QACzD,gGAAmE,CAAA;IACpE,CAAC,EA/BiB,yBAAyB,yCAAzB,yBAAyB,QA+B1C;IAED,IAAiB,mBAAmB,CA6FnC;IA7FD,WAAiB,mBAAmB;QACnC,qDAAqD;QACxC,0BAAM,GAAG,IAAI,gBAAG,0DAAsD,KAAK,EAAE,IAAI,CAAC,CAAC;QAEhG,uCAAuC;QAC1B,yBAAK,GAAG,IAAI,gBAAG,wDAAqD,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAyB,EAAE,IAAkC,CAAC,CAAC,CAAC;QAEjK,sFAAsF;QACzE,8BAAU,GAAG,IAAI,gBAAG,kEAA0D,KAAK,EAAE,IAAA,cAAQ,EAAC,CAA8B,EAAE,IAAiF,CAAC,CAAC,CAAC;QAE/N,wDAAwD;QAC3C,+BAAW,GAAG,IAAI,gBAAG,oEAA2D,KAAK,EAAE,IAAA,cAAQ,EAAC,CAA+B,EAAE,IAAmD,CAAC,CAAC,CAAC;QAEpM,uCAAuC;QAC1B,yBAAK,GAAG,IAAI,gBAAG,wDAAoD,CAAC,EAAE,IAAA,cAAQ,EAAC,CAAyB,EAAE,IAAkC,CAAC,CAAC,CAAC;QAE5J,6CAA6C;QAChC,8BAAU,GAAG,IAAI,gBAAG,kEAAyD,CAAC,EAAE,IAAI,CAAC,CAAC;QAEnG,gDAAgD;QACnC,8BAAU,GAAG,IAAI,gBAAG,oEAA0D,KAAK,EAAE,IAAI,CAAC,CAAC;QAExG,gDAAgD;QACnC,yCAAqB,GAAG,IAAI,gBAAG,wEAA6D,KAAK,EAAE,IAAI,CAAC,CAAC;QAEtH,mDAAmD;QACtC,6BAAS,GAAG,IAAI,gBAAG,gEAAyD,KAAK,EAAE,IAAA,cAAQ,EAAC,CAA6B,EAAE,IAA8C,CAAC,CAAC,CAAC;QAEzL,wDAAwD;QAC3C,kDAA8B,GAAG,IAAI,gBAAG,0GAA8E,KAAK,EAAE,IAAI,CAAC,CAAC;QAEhJ,qDAAqD;QACxC,0CAAsB,GAAG,IAAI,gBAAG,kFAAsE,KAAK,EAAE,IAAI,CAAC,CAAC;QAEhI,qDAAqD;QACxC,wCAAoB,GAAG,IAAI,gBAAG,8EAAoE,KAAK,EAAE,IAAI,CAAC,CAAC;QAE5H,0DAA0D;QAC7C,6BAAS,GAAG,IAAI,gBAAG,gEAAyD,KAAK,EAAE,IAAI,CAAC,CAAC;QAEtG,0GAA0G;QAC7F,6BAAS,GAAG,IAAI,gBAAG,gEAAwD,SAAS,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,IAAA,cAAQ,EAAC,CAA6B,EAAE,IAAqG,CAAC,EAAE,CAAC,CAAC;QAEpR,mDAAmD;QACtC,mCAAe,GAAG,IAAI,gBAAG,4EAA+D,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAyB,EAAE,IAA8C,CAAC,CAAC,CAAC;QAEjM,wDAAwD;QAC3C,wCAAoB,GAAG,IAAI,gBAAG,sFAAoE,KAAK,EAAE,IAAA,cAAQ,EAAC,CAA8B,EAAE,IAAmD,CAAC,CAAC,CAAC;QAErN,2CAA2C;QAC9B,4BAAQ,GAAG,oBAAA,KAAK,CAAC,SAAS,EAAE,CAAC;QAE1C,4CAA4C;QAC/B,+BAAW,GAAG,IAAI,gBAAG,oEAA2D,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAqB,EAAE,IAAsC,CAAC,CAAC,CAAC;QAE7K,uDAAuD;QAC1C,gCAAY,GAAG,IAAI,gBAAG,sEAA4D,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAgC,EAAE,IAAkD,CAAC,CAAC,CAAC;QAEtM,uNAAuN;QAC1M,yCAAqB,GAAG,IAAI,gBAAG,wFAAqE,KAAK,EAAE,IAAA,cAAQ,EAAC,EAAyC,EAAE,IAAiD,CAAC,CAAC,CAAC;QAEhO,2DAA2D;QAC9C,mCAAe,GAAG,oBAAA,YAAY,CAAC,SAAS,EAAE,CAAC;QAExD,4DAA4D;QAC/C,+BAAW,GAAG,IAAI,gBAAG,oEAA2D,KAAK,EAAE,IAAI,CAAC,CAAC;QAE1G,gEAAgE;QACnD,kCAAc,GAAG,oBAAA,WAAW,CAAC,SAAS,EAAE,CAAC;QAEtD,uEAAuE;QAC1D,kCAAc,GAAG,IAAI,gBAAG,8EAAgE,KAAK,EAAE,IAAI,CAAC,CAAC;QAElH,8EAA8E;QACjE,6BAAS,GAAG,IAAI,gBAAG,oEAA2D,KAAK,EAAE,IAAI,CAAC,CAAC;QAExG,+EAA+E;QAClE,gCAAY,GAAG,oBAAA,cAAc,CAAC,SAAS,EAAE,CAAC;QAEvD,2EAA2E;QAC9D,oCAAgB,GAAG,IAAI,gBAAG,8EAAgE,KAAK,EAAE,IAAA,cAAQ,EAAC,EAAoC,EAAE,IAAsE,CAAC,CAAC,CAAC;QAEtO,kEAAkE;QACrD,yCAAqB,GAAG,IAAI,gBAAG,wFAAqE,KAAK,EAAE,IAAA,cAAQ,EAAC,EAAwC,EAAE,IAA6D,CAAC,CAAC,CAAC;QAE3O,8DAA8D;QACjD,iCAAa,GAAG,IAAI,gBAAG,wEAA6D,KAAK,EAAE,IAAA,cAAQ,EAAC,EAA2B,EAAE,IAAyD,CAAC,CAAC,CAAC;QAE1M,iEAAiE;QACpD,8CAA0B,GAAG,IAAI,gBAAG,0FAA0E,KAAK,EAAE,IAAA,cAAQ,EAAC,EAAsC,EAAE,IAA4D,CAAC,CAAC,CAAC;QAElP,uHAAuH;QAC1G,mDAA+B,GAAG,IAAI,gBAAG,oGAA+E,KAAK,EAAE,IAAA,cAAQ,EAAC,EAAiC,EAAE,IAA6D,CAAC,CAAC,CAAC;IACzP,CAAC,EA7FgB,mBAAmB,mCAAnB,mBAAmB,QA6FnC","file":"terminalContextKey.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { RawContextKey } from 'vs/platform/contextkey/common/contextkey';\n\nexport const enum TerminalContextKeyStrings {\n\tIsOpen = 'terminalIsOpen',\n\tCount = 'terminalCount',\n\tGroupCount = 'terminalGroupCount',\n\tTabsNarrow = 'isTerminalTabsNarrow',\n\tHasFixedWidth = 'terminalHasFixedWidth',\n\tProcessSupported = 'terminalProcessSupported',\n\tFocus = 'terminalFocus',\n\tFocusInAny = 'terminalFocusInAny',\n\tAccessibleBufferFocus = 'terminalAccessibleBufferFocus',\n\tAccessibleBufferOnLastLine = 'terminalAccessibleBufferOnLastLine',\n\tEditorFocus = 'terminalEditorFocus',\n\tTabsFocus = 'terminalTabsFocus',\n\tWebExtensionContributedProfile = 'terminalWebExtensionContributedProfile',\n\tTerminalHasBeenCreated = 'terminalHasBeenCreated',\n\tTerminalEditorActive = 'terminalEditorActive',\n\tTabsMouse = 'terminalTabsMouse',\n\tAltBufferActive = 'terminalAltBufferActive',\n\tSuggestWidgetVisible = 'terminalSuggestWidgetVisible',\n\tA11yTreeFocus = 'terminalA11yTreeFocus',\n\tViewShowing = 'terminalViewShowing',\n\tTextSelected = 'terminalTextSelected',\n\tTextSelectedInFocused = 'terminalTextSelectedInFocused',\n\tFindVisible = 'terminalFindVisible',\n\tFindInputFocused = 'terminalFindInputFocused',\n\tFindFocused = 'terminalFindFocused',\n\tTabsSingularSelection = 'terminalTabsSingularSelection',\n\tSplitTerminal = 'terminalSplitTerminal',\n\tShellType = 'terminalShellType',\n\tInTerminalRunCommandPicker = 'inTerminalRunCommandPicker',\n\tTerminalShellIntegrationEnabled = 'terminalShellIntegrationEnabled',\n}\n\nexport namespace TerminalContextKeys {\n\t/** Whether there is at least one opened terminal. */\n\texport const isOpen = new RawContextKey<boolean>(TerminalContextKeyStrings.IsOpen, false, true);\n\n\t/** Whether the terminal is focused. */\n\texport const focus = new RawContextKey<boolean>(TerminalContextKeyStrings.Focus, false, localize('terminalFocusContextKey', \"Whether the terminal is focused.\"));\n\n\t/** Whether any terminal is focused, including detached terminals used in other UI. */\n\texport const focusInAny = new RawContextKey<boolean>(TerminalContextKeyStrings.FocusInAny, false, localize('terminalFocusInAnyContextKey', \"Whether any terminal is focused, including detached terminals used in other UI.\"));\n\n\t/** Whether a terminal in the editor area is focused. */\n\texport const editorFocus = new RawContextKey<boolean>(TerminalContextKeyStrings.EditorFocus, false, localize('terminalEditorFocusContextKey', \"Whether a terminal in the editor area is focused.\"));\n\n\t/** The current number of terminals. */\n\texport const count = new RawContextKey<number>(TerminalContextKeyStrings.Count, 0, localize('terminalCountContextKey', \"The current number of terminals.\"));\n\n\t/** The current number of terminal groups. */\n\texport const groupCount = new RawContextKey<number>(TerminalContextKeyStrings.GroupCount, 0, true);\n\n\t/** Whether the terminal tabs view is narrow. */\n\texport const tabsNarrow = new RawContextKey<boolean>(TerminalContextKeyStrings.TabsNarrow, false, true);\n\n\t/** Whether the terminal tabs view is narrow. */\n\texport const terminalHasFixedWidth = new RawContextKey<boolean>(TerminalContextKeyStrings.HasFixedWidth, false, true);\n\n\t/** Whether the terminal tabs widget is focused. */\n\texport const tabsFocus = new RawContextKey<boolean>(TerminalContextKeyStrings.TabsFocus, false, localize('terminalTabsFocusContextKey', \"Whether the terminal tabs widget is focused.\"));\n\n\t/** Whether a web extension has contributed a profile */\n\texport const webExtensionContributedProfile = new RawContextKey<boolean>(TerminalContextKeyStrings.WebExtensionContributedProfile, false, true);\n\n\t/** Whether at least one terminal has been created */\n\texport const terminalHasBeenCreated = new RawContextKey<boolean>(TerminalContextKeyStrings.TerminalHasBeenCreated, false, true);\n\n\t/** Whether at least one terminal has been created */\n\texport const terminalEditorActive = new RawContextKey<boolean>(TerminalContextKeyStrings.TerminalEditorActive, false, true);\n\n\t/** Whether the mouse is within the terminal tabs list. */\n\texport const tabsMouse = new RawContextKey<boolean>(TerminalContextKeyStrings.TabsMouse, false, true);\n\n\t/** The shell type of the active terminal, this is set to the last known value when no terminals exist. */\n\texport const shellType = new RawContextKey<string>(TerminalContextKeyStrings.ShellType, undefined, { type: 'string', description: localize('terminalShellTypeContextKey', \"The shell type of the active terminal, this is set to the last known value when no terminals exist.\") });\n\n\t/** Whether the terminal's alt buffer is active. */\n\texport const altBufferActive = new RawContextKey<boolean>(TerminalContextKeyStrings.AltBufferActive, false, localize('terminalAltBufferActive', \"Whether the terminal's alt buffer is active.\"));\n\n\t/** Whether the terminal's suggest widget is visible. */\n\texport const suggestWidgetVisible = new RawContextKey<boolean>(TerminalContextKeyStrings.SuggestWidgetVisible, false, localize('terminalSuggestWidgetVisible', \"Whether the terminal's suggest widget is visible.\"));\n\n\t/** Whether the terminal is NOT focused. */\n\texport const notFocus = focus.toNegated();\n\n\t/** Whether the terminal view is showing. */\n\texport const viewShowing = new RawContextKey<boolean>(TerminalContextKeyStrings.ViewShowing, false, localize('terminalViewShowing', \"Whether the terminal view is showing\"));\n\n\t/** Whether text is selected in the active terminal. */\n\texport const textSelected = new RawContextKey<boolean>(TerminalContextKeyStrings.TextSelected, false, localize('terminalTextSelectedContextKey', \"Whether text is selected in the active terminal.\"));\n\n\t/** Whether text is selected in a focused terminal. `textSelected` counts text selected in an active in a terminal view or an editor, where `textSelectedInFocused` simply counts text in an element with DOM focus. */\n\texport const textSelectedInFocused = new RawContextKey<boolean>(TerminalContextKeyStrings.TextSelectedInFocused, false, localize('terminalTextSelectedInFocusedContextKey', \"Whether text is selected in a focused terminal.\"));\n\n\t/** Whether text is NOT selected in the active terminal. */\n\texport const notTextSelected = textSelected.toNegated();\n\n\t/** Whether the active terminal's find widget is visible. */\n\texport const findVisible = new RawContextKey<boolean>(TerminalContextKeyStrings.FindVisible, false, true);\n\n\t/** Whether the active terminal's find widget is NOT visible. */\n\texport const notFindVisible = findVisible.toNegated();\n\n\t/** Whether the active terminal's find widget text input is focused. */\n\texport const findInputFocus = new RawContextKey<boolean>(TerminalContextKeyStrings.FindInputFocused, false, true);\n\n\t/** Whether an element within the active terminal's find widget is focused. */\n\texport const findFocus = new RawContextKey<boolean>(TerminalContextKeyStrings.FindFocused, false, true);\n\n\t/** Whether NO elements within the active terminal's find widget is focused. */\n\texport const notFindFocus = findInputFocus.toNegated();\n\n\t/** Whether terminal processes can be launched in the current workspace. */\n\texport const processSupported = new RawContextKey<boolean>(TerminalContextKeyStrings.ProcessSupported, false, localize('terminalProcessSupportedContextKey', \"Whether terminal processes can be launched in the current workspace.\"));\n\n\t/** Whether one terminal is selected in the terminal tabs list. */\n\texport const tabsSingularSelection = new RawContextKey<boolean>(TerminalContextKeyStrings.TabsSingularSelection, false, localize('terminalTabsSingularSelectedContextKey', \"Whether one terminal is selected in the terminal tabs list.\"));\n\n\t/** Whether the focused tab's terminal is a split terminal. */\n\texport const splitTerminal = new RawContextKey<boolean>(TerminalContextKeyStrings.SplitTerminal, false, localize('isSplitTerminalContextKey', \"Whether the focused tab's terminal is a split terminal.\"));\n\n\t/** Whether the terminal run command picker is currently open. */\n\texport const inTerminalRunCommandPicker = new RawContextKey<boolean>(TerminalContextKeyStrings.InTerminalRunCommandPicker, false, localize('inTerminalRunCommandPickerContextKey', \"Whether the terminal run command picker is currently open.\"));\n\n\t/** Whether shell integration is enabled in the active terminal. This only considers full VS Code shell integration. */\n\texport const terminalShellIntegrationEnabled = new RawContextKey<boolean>(TerminalContextKeyStrings.TerminalShellIntegrationEnabled, false, localize('terminalShellIntegrationEnabled', \"Whether shell integration is enabled in the active terminal\"));\n}\n"]}