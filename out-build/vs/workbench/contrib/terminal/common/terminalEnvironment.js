/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
define(["require", "exports", "vs/base/common/path", "vs/base/common/uri", "vs/base/common/processes", "vs/base/common/platform", "vs/platform/terminal/common/terminalEnvironment", "vs/base/common/types"], function (require, exports, path, uri_1, processes_1, platform_1, terminalEnvironment_1, types_1) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.$2M = exports.$1M = exports.$ZM = exports.$YM = exports.$XM = exports.$WM = exports.$VM = exports.$UM = exports.$TM = void 0;
    function $TM(parent, other) {
        if (!other) {
            return;
        }
        // On Windows apply the new values ignoring case, while still retaining
        // the case of the original key.
        if (platform_1.$i) {
            for (const configKey in other) {
                let actualKey = configKey;
                for (const envKey in parent) {
                    if (configKey.toLowerCase() === envKey.toLowerCase()) {
                        actualKey = envKey;
                        break;
                    }
                }
                const value = other[configKey];
                if (value !== undefined) {
                    _mergeEnvironmentValue(parent, actualKey, value);
                }
            }
        }
        else {
            Object.keys(other).forEach((key) => {
                const value = other[key];
                if (value !== undefined) {
                    _mergeEnvironmentValue(parent, key, value);
                }
            });
        }
    }
    exports.$TM = $TM;
    function _mergeEnvironmentValue(env, key, value) {
        if (typeof value === 'string') {
            env[key] = value;
        }
        else {
            delete env[key];
        }
    }
    function $UM(env, version, locale, detectLocale) {
        env['TERM_PROGRAM'] = 'vscode';
        if (version) {
            env['TERM_PROGRAM_VERSION'] = version;
        }
        if ($VM(env, detectLocale)) {
            env['LANG'] = $WM(locale);
        }
        env['COLORTERM'] = 'truecolor';
    }
    exports.$UM = $UM;
    function mergeNonNullKeys(env, other) {
        if (!other) {
            return;
        }
        for (const key of Object.keys(other)) {
            const value = other[key];
            if (value !== undefined && value !== null) {
                env[key] = value;
            }
        }
    }
    async function resolveConfigurationVariables(variableResolver, env) {
        await Promise.all(Object.entries(env).map(async ([key, value]) => {
            if (typeof value === 'string') {
                try {
                    env[key] = await variableResolver(value);
                }
                catch (e) {
                    env[key] = value;
                }
            }
        }));
        return env;
    }
    function $VM(env, detectLocale) {
        if (detectLocale === 'on') {
            return true;
        }
        if (detectLocale === 'auto') {
            const lang = env['LANG'];
            return !lang || (lang.search(/\.UTF\-8$/) === -1 && lang.search(/\.utf8$/) === -1 && lang.search(/\.euc.+/) === -1);
        }
        return false; // 'off'
    }
    exports.$VM = $VM;
    function $WM(locale) {
        const parts = locale ? locale.split('-') : [];
        const n = parts.length;
        if (n === 0) {
            // Fallback to en_US if the locale is unknown
            return 'en_US.UTF-8';
        }
        if (n === 1) {
            // The local may only contain the language, not the variant, if this is the case guess the
            // variant such that it can be used as a valid $LANG variable. The language variant chosen
            // is the original and/or most prominent with help from
            // https://stackoverflow.com/a/2502675/1156119
            // The list of locales was generated by running `locale -a` on macOS
            const languageVariants = {
                af: 'ZA',
                am: 'ET',
                be: 'BY',
                bg: 'BG',
                ca: 'ES',
                cs: 'CZ',
                da: 'DK',
                // de: 'AT',
                // de: 'CH',
                de: 'DE',
                el: 'GR',
                // en: 'AU',
                // en: 'CA',
                // en: 'GB',
                // en: 'IE',
                // en: 'NZ',
                en: 'US',
                es: 'ES',
                et: 'EE',
                eu: 'ES',
                fi: 'FI',
                // fr: 'BE',
                // fr: 'CA',
                // fr: 'CH',
                fr: 'FR',
                he: 'IL',
                hr: 'HR',
                hu: 'HU',
                hy: 'AM',
                is: 'IS',
                // it: 'CH',
                it: 'IT',
                ja: 'JP',
                kk: 'KZ',
                ko: 'KR',
                lt: 'LT',
                // nl: 'BE',
                nl: 'NL',
                no: 'NO',
                pl: 'PL',
                pt: 'BR',
                // pt: 'PT',
                ro: 'RO',
                ru: 'RU',
                sk: 'SK',
                sl: 'SI',
                sr: 'YU',
                sv: 'SE',
                tr: 'TR',
                uk: 'UA',
                zh: 'CN',
            };
            if (parts[0] in languageVariants) {
                parts.push(languageVariants[parts[0]]);
            }
        }
        else {
            // Ensure the variant is uppercase to be a valid $LANG
            parts[1] = parts[1].toUpperCase();
        }
        return parts.join('_') + '.UTF-8';
    }
    exports.$WM = $WM;
    async function $XM(shell, userHome, variableResolver, root, customCwd, logService) {
        if (shell.cwd) {
            const unresolved = (typeof shell.cwd === 'object') ? shell.cwd.fsPath : shell.cwd;
            const resolved = await _resolveCwd(unresolved, variableResolver);
            return (0, terminalEnvironment_1.$RM)(resolved || unresolved);
        }
        let cwd;
        if (!shell.ignoreConfigurationCwd && customCwd) {
            if (variableResolver) {
                customCwd = await _resolveCwd(customCwd, variableResolver, logService);
            }
            if (customCwd) {
                if (path.$8d(customCwd)) {
                    cwd = customCwd;
                }
                else if (root) {
                    cwd = path.$9d(root.fsPath, customCwd);
                }
            }
        }
        // If there was no custom cwd or it was relative with no workspace
        if (!cwd) {
            cwd = root ? root.fsPath : userHome || '';
        }
        return (0, terminalEnvironment_1.$RM)(cwd);
    }
    exports.$XM = $XM;
    async function _resolveCwd(cwd, variableResolver, logService) {
        if (variableResolver) {
            try {
                return await variableResolver(cwd);
            }
            catch (e) {
                logService?.error('Could not resolve terminal cwd', e);
                return undefined;
            }
        }
        return cwd;
    }
    function $YM(lastActiveWorkspace, env, configurationResolverService) {
        if (!configurationResolverService) {
            return undefined;
        }
        return (str) => configurationResolverService.resolveWithEnvironment(env, lastActiveWorkspace, str);
    }
    exports.$YM = $YM;
    async function $ZM(shellLaunchConfig, envFromConfig, variableResolver, version, detectLocale, baseEnv) {
        // Create a terminal environment based on settings, launch config and permissions
        const env = {};
        if (shellLaunchConfig.strictEnv) {
            // strictEnv is true, only use the requested env (ignoring null entries)
            mergeNonNullKeys(env, shellLaunchConfig.env);
        }
        else {
            // Merge process env with the env from config and from shellLaunchConfig
            mergeNonNullKeys(env, baseEnv);
            const allowedEnvFromConfig = { ...envFromConfig };
            // Resolve env vars from config and shell
            if (variableResolver) {
                if (allowedEnvFromConfig) {
                    await resolveConfigurationVariables(variableResolver, allowedEnvFromConfig);
                }
                if (shellLaunchConfig.env) {
                    await resolveConfigurationVariables(variableResolver, shellLaunchConfig.env);
                }
            }
            // Sanitize the environment, removing any undesirable VS Code and Electron environment
            // variables
            (0, processes_1.$sl)(env, 'VSCODE_IPC_HOOK_CLI');
            // Merge config (settings) and ShellLaunchConfig environments
            $TM(env, allowedEnvFromConfig);
            $TM(env, shellLaunchConfig.env);
            // Adding other env keys necessary to create the process
            $UM(env, version, platform_1.$v, detectLocale);
        }
        return env;
    }
    exports.$ZM = $ZM;
    /**
     * Takes a path and returns the properly escaped path to send to a given shell. On Windows, this
     * included trying to prepare the path for WSL if needed.
     *
     * @param originalPath The path to be escaped and formatted.
     * @param executable The executable off the shellLaunchConfig.
     * @param title The terminal's title.
     * @param shellType The type of shell the path is being sent to.
     * @param backend The backend for the terminal.
     * @param isWindowsFrontend Whether the frontend is Windows, this is only exposed for injection via
     * tests.
     * @returns An escaped version of the path to be execuded in the terminal.
     */
    async function $1M(resource, executable, title, shellType, backend, os, isWindowsFrontend = platform_1.$i) {
        let originalPath;
        if ((0, types_1.$jf)(resource)) {
            originalPath = resource;
        }
        else {
            originalPath = resource.fsPath;
            // Apply backend OS-specific formatting to the path since URI.fsPath uses the frontend's OS
            if (isWindowsFrontend && os !== 1 /* OperatingSystem.Windows */) {
                originalPath = originalPath.replace(/\\/g, '\/');
            }
            else if (!isWindowsFrontend && os === 1 /* OperatingSystem.Windows */) {
                originalPath = originalPath.replace(/\//g, '\\');
            }
        }
        if (!executable) {
            return originalPath;
        }
        const hasSpace = originalPath.includes(' ');
        const hasParens = originalPath.includes('(') || originalPath.includes(')');
        const pathBasename = path.$ae(executable, '.exe');
        const isPowerShell = pathBasename === 'pwsh' ||
            title === 'pwsh' ||
            pathBasename === 'powershell' ||
            title === 'powershell';
        if (isPowerShell && (hasSpace || originalPath.includes('\''))) {
            return `& '${originalPath.replace(/'/g, '\'\'')}'`;
        }
        if (hasParens && isPowerShell) {
            return `& '${originalPath}'`;
        }
        if (os === 1 /* OperatingSystem.Windows */) {
            // 17063 is the build number where wsl path was introduced.
            // Update Windows uriPath to be executed in WSL.
            if (shellType !== undefined) {
                if (shellType === "gitbash" /* WindowsShellType.GitBash */) {
                    return (0, terminalEnvironment_1.$PM)(originalPath.replace(/\\/g, '/'));
                }
                else if (shellType === "wsl" /* WindowsShellType.Wsl */) {
                    return backend?.getWslPath(originalPath, 'win-to-unix') || originalPath;
                }
                else if (hasSpace) {
                    return `"${originalPath}"`;
                }
                return originalPath;
            }
            const lowerExecutable = executable.toLowerCase();
            if (lowerExecutable.includes('wsl') || (lowerExecutable.includes('bash.exe') && !lowerExecutable.toLowerCase().includes('git'))) {
                return backend?.getWslPath(originalPath, 'win-to-unix') || originalPath;
            }
            else if (hasSpace) {
                return `"${originalPath}"`;
            }
            return originalPath;
        }
        return (0, terminalEnvironment_1.$PM)(originalPath);
    }
    exports.$1M = $1M;
    function $2M(cwd, workspaceContextService, historyService) {
        const cwdUri = typeof cwd === 'string' ? uri_1.URI.parse(cwd) : cwd;
        let workspaceFolder = cwdUri ? workspaceContextService.getWorkspaceFolder(cwdUri) ?? undefined : undefined;
        if (!workspaceFolder) {
            // fallback to last active workspace if cwd is not available or it is not in workspace
            // TOOD: last active workspace is known to be unreliable, we should remove this fallback eventually
            const activeWorkspaceRootUri = historyService.getLastActiveWorkspaceRoot();
            workspaceFolder = activeWorkspaceRootUri ? workspaceContextService.getWorkspaceFolder(activeWorkspaceRootUri) ?? undefined : undefined;
        }
        return workspaceFolder;
    }
    exports.$2M = $2M;
});
//# sourceMappingURL=terminalEnvironment.js.map