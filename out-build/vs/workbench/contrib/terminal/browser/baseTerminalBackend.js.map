{"version":3,"sources":["vs/workbench/contrib/terminal/browser/baseTerminalBackend.ts"],"names":[],"mappings":"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","file":"baseTerminalBackend.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport { localize } from 'vs/nls';\nimport { ICrossVersionSerializedTerminalState, IPtyHostController, ISerializedTerminalState, ITerminalLogService } from 'vs/platform/terminal/common/terminal';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { TerminalCommandId } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\nimport { IHistoryService } from 'vs/workbench/services/history/common/history';\nimport { IStatusbarEntry, IStatusbarEntryAccessor, IStatusbarService, StatusbarAlignment } from 'vs/workbench/services/statusbar/browser/statusbar';\n\nexport abstract class BaseTerminalBackend extends Disposable {\n\tprivate _isPtyHostUnresponsive: boolean = false;\n\n\tget isResponsive(): boolean { return !this._isPtyHostUnresponsive; }\n\n\tprotected readonly _onPtyHostConnected = this._register(new Emitter<void>());\n\treadonly onPtyHostConnected = this._onPtyHostConnected.event;\n\tprotected readonly _onPtyHostRestart = this._register(new Emitter<void>());\n\treadonly onPtyHostRestart = this._onPtyHostRestart.event;\n\tprotected readonly _onPtyHostUnresponsive = this._register(new Emitter<void>());\n\treadonly onPtyHostUnresponsive = this._onPtyHostUnresponsive.event;\n\tprotected readonly _onPtyHostResponsive = this._register(new Emitter<void>());\n\treadonly onPtyHostResponsive = this._onPtyHostResponsive.event;\n\n\tconstructor(\n\t\tprivate readonly _ptyHostController: IPtyHostController,\n\t\tprotected readonly _logService: ITerminalLogService,\n\t\thistoryService: IHistoryService,\n\t\tconfigurationResolverService: IConfigurationResolverService,\n\t\tstatusBarService: IStatusbarService,\n\t\tprotected readonly _workspaceContextService: IWorkspaceContextService\n\t) {\n\t\tsuper();\n\n\t\tlet unresponsiveStatusBarEntry: IStatusbarEntry;\n\t\tlet statusBarAccessor: IStatusbarEntryAccessor;\n\t\tlet hasStarted = false;\n\n\t\t// Attach pty host listeners\n\t\tthis._register(this._ptyHostController.onPtyHostExit(() => {\n\t\t\tthis._logService.error(`The terminal's pty host process exited, the connection to all terminal processes was lost`);\n\t\t}));\n\t\tthis.onPtyHostConnected(() => hasStarted = true);\n\t\tthis._register(this._ptyHostController.onPtyHostStart(() => {\n\t\t\tthis._logService.debug(`The terminal's pty host process is starting`);\n\t\t\t// Only fire the _restart_ event after it has started\n\t\t\tif (hasStarted) {\n\t\t\t\tthis._logService.trace('IPtyHostController#onPtyHostRestart');\n\t\t\t\tthis._onPtyHostRestart.fire();\n\t\t\t}\n\t\t\tstatusBarAccessor?.dispose();\n\t\t\tthis._isPtyHostUnresponsive = false;\n\t\t}));\n\t\tthis._register(this._ptyHostController.onPtyHostUnresponsive(() => {\n\t\t\tstatusBarAccessor?.dispose();\n\t\t\tif (!unresponsiveStatusBarEntry) {\n\t\t\t\tunresponsiveStatusBarEntry = {\n\t\t\t\t\tname: localize('ptyHostStatus', 'Pty Host Status'),\n\t\t\t\t\ttext: `$(debug-disconnect) ${localize('ptyHostStatus.short', 'Pty Host')}`,\n\t\t\t\t\ttooltip: localize('nonResponsivePtyHost', \"The connection to the terminal's pty host process is unresponsive, terminals may stop working. Click to manually restart the pty host.\"),\n\t\t\t\t\tariaLabel: localize('ptyHostStatus.ariaLabel', 'Pty Host is unresponsive'),\n\t\t\t\t\tcommand: TerminalCommandId.RestartPtyHost,\n\t\t\t\t\tkind: 'warning'\n\t\t\t\t};\n\t\t\t}\n\t\t\tstatusBarAccessor = statusBarService.addEntry(unresponsiveStatusBarEntry, 'ptyHostStatus', StatusbarAlignment.LEFT);\n\t\t\tthis._isPtyHostUnresponsive = true;\n\t\t\tthis._onPtyHostUnresponsive.fire();\n\t\t}));\n\t\tthis._register(this._ptyHostController.onPtyHostResponsive(() => {\n\t\t\tif (!this._isPtyHostUnresponsive) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._logService.info('The pty host became responsive again');\n\t\t\tstatusBarAccessor?.dispose();\n\t\t\tthis._isPtyHostUnresponsive = false;\n\t\t\tthis._onPtyHostResponsive.fire();\n\t\t}));\n\t\tthis._register(this._ptyHostController.onPtyHostRequestResolveVariables(async e => {\n\t\t\t// Only answer requests for this workspace\n\t\t\tif (e.workspaceId !== this._workspaceContextService.getWorkspace().id) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst activeWorkspaceRootUri = historyService.getLastActiveWorkspaceRoot(Schemas.file);\n\t\t\tconst lastActiveWorkspaceRoot = activeWorkspaceRootUri ? this._workspaceContextService.getWorkspaceFolder(activeWorkspaceRootUri) ?? undefined : undefined;\n\t\t\tconst resolveCalls: Promise<string>[] = e.originalText.map(t => {\n\t\t\t\treturn configurationResolverService.resolveAsync(lastActiveWorkspaceRoot, t);\n\t\t\t});\n\t\t\tconst result = await Promise.all(resolveCalls);\n\t\t\tthis._ptyHostController.acceptPtyHostResolvedVariables(e.requestId, result);\n\t\t}));\n\t}\n\n\trestartPtyHost(): void {\n\t\tthis._ptyHostController.restartPtyHost();\n\t}\n\n\tprotected _deserializeTerminalState(serializedState: string | undefined): ISerializedTerminalState[] | undefined {\n\t\tif (serializedState === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst parsedUnknown = JSON.parse(serializedState);\n\t\tif (!('version' in parsedUnknown) || !('state' in parsedUnknown) || !Array.isArray(parsedUnknown.state)) {\n\t\t\tthis._logService.warn('Could not revive serialized processes, wrong format', parsedUnknown);\n\t\t\treturn undefined;\n\t\t}\n\t\tconst parsedCrossVersion = parsedUnknown as ICrossVersionSerializedTerminalState;\n\t\tif (parsedCrossVersion.version !== 1) {\n\t\t\tthis._logService.warn(`Could not revive serialized processes, wrong version \"${parsedCrossVersion.version}\"`, parsedCrossVersion);\n\t\t\treturn undefined;\n\t\t}\n\t\treturn parsedCrossVersion.state as ISerializedTerminalState[];\n\t}\n\n\tprotected _getWorkspaceId(): string {\n\t\treturn this._workspaceContextService.getWorkspace().id;\n\t}\n}\n"]}