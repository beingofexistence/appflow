{"version":3,"sources":["vs/workbench/contrib/terminal/browser/terminalEditorInput.ts"],"names":[],"mappings":"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","file":"terminalEditorInput.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport Severity from 'vs/base/common/severity';\nimport { dispose, toDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { EditorInputCapabilities, IEditorIdentifier, IUntypedEditorInput } from 'vs/workbench/common/editor';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { ThemeIcon } from 'vs/base/common/themables';\nimport { EditorInput, IEditorCloseHandler } from 'vs/workbench/common/editor/editorInput';\nimport { ITerminalInstance, ITerminalInstanceService, terminalEditorId } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { getColorClass, getUriClasses } from 'vs/workbench/contrib/terminal/browser/terminalIcon';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IShellLaunchConfig, TerminalExitReason, TerminalLocation, TerminalSettingId } from 'vs/platform/terminal/common/terminal';\nimport { IEditorGroup } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { ILifecycleService, ShutdownReason, WillShutdownEvent } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { ConfirmOnKill } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TerminalContextKeys } from 'vs/workbench/contrib/terminal/common/terminalContextKey';\nimport { ConfirmResult, IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { Emitter } from 'vs/base/common/event';\n\nexport class TerminalEditorInput extends EditorInput implements IEditorCloseHandler {\n\n\tstatic readonly ID = 'workbench.editors.terminal';\n\n\toverride readonly closeHandler = this;\n\n\tprivate _isDetached = false;\n\tprivate _isShuttingDown = false;\n\tprivate _isReverted = false;\n\tprivate _copyLaunchConfig?: IShellLaunchConfig;\n\tprivate _terminalEditorFocusContextKey: IContextKey<boolean>;\n\tprivate _group: IEditorGroup | undefined;\n\n\tprotected readonly _onDidRequestAttach = this._register(new Emitter<ITerminalInstance>());\n\treadonly onDidRequestAttach = this._onDidRequestAttach.event;\n\n\tsetGroup(group: IEditorGroup | undefined) {\n\t\tthis._group = group;\n\t}\n\n\tget group(): IEditorGroup | undefined {\n\t\treturn this._group;\n\t}\n\n\toverride get typeId(): string {\n\t\treturn TerminalEditorInput.ID;\n\t}\n\n\toverride get editorId(): string | undefined {\n\t\treturn terminalEditorId;\n\t}\n\n\toverride get capabilities(): EditorInputCapabilities {\n\t\treturn EditorInputCapabilities.Readonly | EditorInputCapabilities.Singleton | EditorInputCapabilities.CanDropIntoEditor;\n\t}\n\n\tsetTerminalInstance(instance: ITerminalInstance): void {\n\t\tif (this._terminalInstance) {\n\t\t\tthrow new Error('cannot set instance that has already been set');\n\t\t}\n\t\tthis._terminalInstance = instance;\n\t\tthis._setupInstanceListeners();\n\t}\n\n\toverride copy(): EditorInput {\n\t\tconst instance = this._terminalInstanceService.createInstance(this._copyLaunchConfig || {}, TerminalLocation.Editor);\n\t\tinstance.focusWhenReady();\n\t\tthis._copyLaunchConfig = undefined;\n\t\treturn this._instantiationService.createInstance(TerminalEditorInput, instance.resource, instance);\n\t}\n\n\t/**\n\t * Sets the launch config to use for the next call to EditorInput.copy, which will be used when\n\t * the editor's split command is run.\n\t */\n\tsetCopyLaunchConfig(launchConfig: IShellLaunchConfig) {\n\t\tthis._copyLaunchConfig = launchConfig;\n\t}\n\n\t/**\n\t * Returns the terminal instance for this input if it has not yet been detached from the input.\n\t */\n\tget terminalInstance(): ITerminalInstance | undefined {\n\t\treturn this._isDetached ? undefined : this._terminalInstance;\n\t}\n\n\tshowConfirm(): boolean {\n\t\tif (this._isReverted) {\n\t\t\treturn false;\n\t\t}\n\t\tconst confirmOnKill = this._configurationService.getValue<ConfirmOnKill>(TerminalSettingId.ConfirmOnKill);\n\t\tif (confirmOnKill === 'editor' || confirmOnKill === 'always') {\n\t\t\treturn this._terminalInstance?.hasChildProcesses || false;\n\t\t}\n\t\treturn false;\n\t}\n\n\tasync confirm(terminals: ReadonlyArray<IEditorIdentifier>): Promise<ConfirmResult> {\n\t\tconst { confirmed } = await this._dialogService.confirm({\n\t\t\ttype: Severity.Warning,\n\t\t\tmessage: localize('confirmDirtyTerminal.message', \"Do you want to terminate running processes?\"),\n\t\t\tprimaryButton: localize({ key: 'confirmDirtyTerminal.button', comment: ['&& denotes a mnemonic'] }, \"&&Terminate\"),\n\t\t\tdetail: terminals.length > 1 ?\n\t\t\t\tterminals.map(terminal => terminal.editor.getName()).join('\\n') + '\\n\\n' + localize('confirmDirtyTerminals.detail', \"Closing will terminate the running processes in the terminals.\") :\n\t\t\t\tlocalize('confirmDirtyTerminal.detail', \"Closing will terminate the running processes in this terminal.\")\n\t\t});\n\n\t\treturn confirmed ? ConfirmResult.DONT_SAVE : ConfirmResult.CANCEL;\n\t}\n\n\toverride async revert(): Promise<void> {\n\t\t// On revert just treat the terminal as permanently non-dirty\n\t\tthis._isReverted = true;\n\t}\n\n\tconstructor(\n\t\tpublic readonly resource: URI,\n\t\tprivate _terminalInstance: ITerminalInstance | undefined,\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t\t@ITerminalInstanceService private readonly _terminalInstanceService: ITerminalInstanceService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ILifecycleService private readonly _lifecycleService: ILifecycleService,\n\t\t@IContextKeyService _contextKeyService: IContextKeyService,\n\t\t@IDialogService private readonly _dialogService: IDialogService\n\t) {\n\t\tsuper();\n\n\t\tthis._terminalEditorFocusContextKey = TerminalContextKeys.editorFocus.bindTo(_contextKeyService);\n\n\t\tif (_terminalInstance) {\n\t\t\tthis._setupInstanceListeners();\n\t\t}\n\t}\n\n\tprivate _setupInstanceListeners(): void {\n\t\tconst instance = this._terminalInstance;\n\t\tif (!instance) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst instanceOnDidFocusListener = instance.onDidFocus(() => this._terminalEditorFocusContextKey.set(true));\n\t\tconst instanceOnDidBlurListener = instance.onDidBlur(() => this._terminalEditorFocusContextKey.reset());\n\n\t\tthis._register(toDisposable(() => {\n\t\t\tif (!this._isDetached && !this._isShuttingDown) {\n\t\t\t\t// Will be ignored if triggered by onExit or onDisposed terminal events\n\t\t\t\t// as disposed was already called\n\t\t\t\tinstance.dispose(TerminalExitReason.User);\n\t\t\t}\n\t\t\tdispose([instanceOnDidFocusListener, instanceOnDidBlurListener]);\n\t\t}));\n\n\t\tconst disposeListeners = [\n\t\t\tinstance.onExit((e) => {\n\t\t\t\tif (!instance.waitOnExit) {\n\t\t\t\t\tthis.dispose();\n\t\t\t\t}\n\t\t\t}),\n\t\t\tinstance.onDisposed(() => this.dispose()),\n\t\t\tinstance.onTitleChanged(() => this._onDidChangeLabel.fire()),\n\t\t\tinstance.onIconChanged(() => this._onDidChangeLabel.fire()),\n\t\t\tinstanceOnDidFocusListener,\n\t\t\tinstanceOnDidBlurListener,\n\t\t\tinstance.statusList.onDidChangePrimaryStatus(() => this._onDidChangeLabel.fire())\n\t\t];\n\n\t\t// Don't dispose editor when instance is torn down on shutdown to avoid extra work and so\n\t\t// the editor/tabs don't disappear\n\t\tthis._lifecycleService.onWillShutdown((e: WillShutdownEvent) => {\n\t\t\tthis._isShuttingDown = true;\n\t\t\tdispose(disposeListeners);\n\n\t\t\t// Don't touch processes if the shutdown was a result of reload as they will be reattached\n\t\t\tconst shouldPersistTerminals = this._configurationService.getValue<boolean>(TerminalSettingId.EnablePersistentSessions) && e.reason === ShutdownReason.RELOAD;\n\t\t\tif (shouldPersistTerminals) {\n\t\t\t\tinstance.detachProcessAndDispose(TerminalExitReason.Shutdown);\n\t\t\t} else {\n\t\t\t\tinstance.dispose(TerminalExitReason.Shutdown);\n\t\t\t}\n\t\t});\n\t}\n\n\toverride getName() {\n\t\treturn this._terminalInstance?.title || this.resource.fragment;\n\t}\n\n\toverride getLabelExtraClasses(): string[] {\n\t\tif (!this._terminalInstance) {\n\t\t\treturn [];\n\t\t}\n\t\tconst extraClasses: string[] = ['terminal-tab'];\n\t\tconst colorClass = getColorClass(this._terminalInstance);\n\t\tif (colorClass) {\n\t\t\textraClasses.push(colorClass);\n\t\t}\n\t\tconst uriClasses = getUriClasses(this._terminalInstance, this._themeService.getColorTheme().type);\n\t\tif (uriClasses) {\n\t\t\textraClasses.push(...uriClasses);\n\t\t}\n\t\tif (ThemeIcon.isThemeIcon(this._terminalInstance.icon)) {\n\t\t\textraClasses.push(`codicon-${this._terminalInstance.icon.id}`);\n\t\t}\n\t\treturn extraClasses;\n\t}\n\n\t/**\n\t * Detach the instance from the input such that when the input is disposed it will not dispose\n\t * of the terminal instance/process.\n\t */\n\tdetachInstance() {\n\t\tif (!this._isShuttingDown) {\n\t\t\tthis._terminalInstance?.detachFromElement();\n\t\t\tthis._isDetached = true;\n\t\t}\n\t}\n\n\tpublic override getDescription(): string | undefined {\n\t\treturn this._terminalInstance?.description;\n\t}\n\n\tpublic override toUntyped(): IUntypedEditorInput {\n\t\treturn {\n\t\t\tresource: this.resource,\n\t\t\toptions: {\n\t\t\t\toverride: terminalEditorId,\n\t\t\t\tpinned: true,\n\t\t\t\tforceReload: true\n\t\t\t}\n\t\t};\n\t}\n}\n"]}