{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/browser/terminalEscapeSequences.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAEhG;;OAEG;IACH,IAAW,qBAcV;IAdD,WAAW,qBAAqB;QAC/B;;WAEG;QACH,6EAAe,CAAA;QACf;;;WAGG;QACH,uEAAY,CAAA;QACZ;;WAEG;QACH,sEAAY,CAAA;IACb,CAAC,EAdU,qBAAqB,KAArB,qBAAqB,QAc/B;IAED;;;;OAIG;IACH,IAAkB,WA2DjB;IA3DD,WAAkB,WAAW;QAC5B;;;WAGG;QACH,gCAAiB,CAAA;QAEjB;;;WAGG;QACH,iCAAkB,CAAA;QAElB;;;WAGG;QACH,oCAAqB,CAAA;QAErB;;;;WAIG;QACH,oCAAqB,CAAA;QAErB;;;;;WAKG;QACH,gCAAiB,CAAA;QAEjB;;WAEG;QACH,sCAAuB,CAAA;QAEvB;;WAEG;QACH,oCAAqB,CAAA;QAErB;;WAEG;QACH,qCAAsB,CAAA;QAEtB;;WAEG;QACH,mCAAoB,CAAA;QAEpB;;;WAGG;QACH,6BAAc,CAAA;IACf,CAAC,EA3DiB,WAAW,2BAAX,WAAW,QA2D5B;IAED,IAAkB,iBAGjB;IAHD,WAAkB,iBAAiB;QAClC,kCAAa,CAAA;QACb,gCAAW,CAAA;IACZ,CAAC,EAHiB,iBAAiB,iCAAjB,iBAAiB,QAGlC;IAED;;OAEG;IACH,IAAkB,UAKjB;IALD,WAAkB,UAAU;QAC3B;;WAEG;QACH,iCAAmB,CAAA;IACpB,CAAC,EALiB,UAAU,0BAAV,UAAU,QAK3B;IAED,SAAgB,IAAI,CAAW,GAAgB,EAAE,IAAiC;QACjF,OAAO,WAAW,yCAA+B,GAAG,EAAE,IAAI,CAAC,CAAC;IAC7D,CAAC;IAFD,oBAEC;IAED,SAAgB,IAAI,CAAU,GAAe,EAAE,IAAa;QAC3D,OAAO,WAAW,yCAA8B,GAAG,EAAE,IAAI,CAAC,CAAC;IAC5D,CAAC;IAFD,oBAEC;IAED,SAAS,WAAW,CAAC,EAAU,EAAE,EAAU,EAAE,IAAa;QACzD,IAAI,MAAM,GAAG,QAAQ,EAAE,IAAI,EAAE,EAAE,CAAC;QAChC,IAAI,IAAI,EAAE;YACT,MAAM,IAAI,IAAI,IAAI,EAAE,CAAC;SACrB;QACD,MAAM,IAAI,MAAM,CAAC;QACjB,OAAO,MAAM,CAAC;IAEf,CAAC","file":"terminalEscapeSequences.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * The identifier for the first numeric parameter (`Ps`) for OSC commands used by shell integration.\n */\nconst enum ShellIntegrationOscPs {\n\t/**\n\t * Sequences pioneered by FinalTerm.\n\t */\n\tFinalTerm = 133,\n\t/**\n\t * Sequences pioneered by VS Code. The number is derived from the least significant digit of\n\t * \"VSC\" when encoded in hex (\"VSC\" = 0x56, 0x53, 0x43).\n\t */\n\tVSCode = 633,\n\t/**\n\t * Sequences pioneered by iTerm.\n\t */\n\tITerm = 1337\n}\n\n/**\n * VS Code-specific shell integration sequences. Some of these are based on common alternatives like\n * those pioneered in FinalTerm. The decision to move to entirely custom sequences was to try to\n * improve reliability and prevent the possibility of applications confusing the terminal.\n */\nexport const enum VSCodeOscPt {\n\t/**\n\t * The start of the prompt, this is expected to always appear at the start of a line.\n\t * Based on FinalTerm's `OSC 133 ; A ST`.\n\t */\n\tPromptStart = 'A',\n\n\t/**\n\t * The start of a command, ie. where the user inputs their command.\n\t * Based on FinalTerm's `OSC 133 ; B ST`.\n\t */\n\tCommandStart = 'B',\n\n\t/**\n\t * Sent just before the command output begins.\n\t * Based on FinalTerm's `OSC 133 ; C ST`.\n\t */\n\tCommandExecuted = 'C',\n\n\t/**\n\t * Sent just after a command has finished. The exit code is optional, when not specified it\n\t * means no command was run (ie. enter on empty prompt or ctrl+c).\n\t * Based on FinalTerm's `OSC 133 ; D [; <ExitCode>] ST`.\n\t */\n\tCommandFinished = 'D',\n\n\t/**\n\t * Explicitly set the command line. This helps workaround problems with conpty not having a\n\t * passthrough mode by providing an option on Windows to send the command that was run. With\n\t * this sequence there's no need for the guessing based on the unreliable cursor positions that\n\t * would otherwise be required.\n\t */\n\tCommandLine = 'E',\n\n\t/**\n\t * Similar to prompt start but for line continuations.\n\t */\n\tContinuationStart = 'F',\n\n\t/**\n\t * Similar to command start but for line continuations.\n\t */\n\tContinuationEnd = 'G',\n\n\t/**\n\t * The start of the right prompt.\n\t */\n\tRightPromptStart = 'H',\n\n\t/**\n\t * The end of the right prompt.\n\t */\n\tRightPromptEnd = 'I',\n\n\t/**\n\t * Set an arbitrary property: `OSC 633 ; P ; <Property>=<Value> ST`, only known properties will\n\t * be handled.\n\t */\n\tProperty = 'P'\n}\n\nexport const enum VSCodeOscProperty {\n\tTask = 'Task',\n\tCwd = 'Cwd'\n}\n\n/**\n * ITerm sequences\n */\nexport const enum ITermOscPt {\n\t/**\n\t * Based on ITerm's `OSC 1337 ; SetMark` sets a mark on the scrollbar\n\t */\n\tSetMark = 'SetMark'\n}\n\nexport function VSCodeSequence(osc: VSCodeOscPt, data?: string | VSCodeOscProperty): string {\n\treturn oscSequence(ShellIntegrationOscPs.VSCode, osc, data);\n}\n\nexport function ITermSequence(osc: ITermOscPt, data?: string): string {\n\treturn oscSequence(ShellIntegrationOscPs.ITerm, osc, data);\n}\n\nfunction oscSequence(ps: number, pt: string, data?: string): string {\n\tlet result = `\\x1b]${ps};${pt}`;\n\tif (data) {\n\t\tresult += `;${data}`;\n\t}\n\tresult += `\\x07`;\n\treturn result;\n\n}\n"]}