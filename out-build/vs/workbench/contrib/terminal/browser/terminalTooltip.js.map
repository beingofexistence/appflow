{"version":3,"sources":["vs/workbench/contrib/terminal/browser/terminalTooltip.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAShG,SAAgB,IAAI,CAAiB,QAA2B;QAC/D,IAAI,YAAY,GAAG,EAAE,CAAC;QACtB,MAAM,QAAQ,GAAG,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC;QAC9C,MAAM,OAAO,GAAG,EAAE,CAAC;QACnB,KAAK,MAAM,MAAM,IAAI,QAAQ,EAAE;YAC9B,YAAY,IAAI,cAAc,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC,IAAI,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,EAAE,EAAE,CAAC;YAC1G,IAAI,MAAM,CAAC,YAAY,EAAE;gBACxB,OAAO,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;aACrC;SACD;QAED,MAAM,kBAAkB,GAAG,IAAI,CAAmB,QAAQ,EAAE,IAAI,CAAC,CAAC;QAClE,MAAM,sBAAsB,GAAG,IAAI,CAAuB,QAAQ,EAAE,IAAI,CAAC,CAAC;QAC1E,MAAM,OAAO,GAAG,IAAI,iBAAG,CAAY,QAAQ,CAAC,KAAK,GAAG,kBAAkB,GAAG,sBAAsB,GAAG,YAAY,EAAE,EAAE,iBAAiB,EAAE,IAAI,EAAE,CAAC,CAAC;QAE7I,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,CAAC;IAC7B,CAAC;IAhBD,oBAgBC;IAED,SAAgB,IAAI,CAAuB,QAA2B,EAAE,QAAiB;QACxF,MAAM,4BAA4B,GAAyB,EAAE,CAAC;QAC9D,IAAI,QAAQ,CAAC,YAAY,CAAC,GAAG,6CAAqC,EAAE;YACnE,4BAA4B,CAAC,IAAI,6CAAqC,CAAC;SACvE;QACD,IAAI,QAAQ,CAAC,YAAY,CAAC,GAAG,yCAAiC,EAAE;YAC/D,4BAA4B,CAAC,IAAI,yCAAiC,CAAC;SACnE;QACD,IAAI,sBAAsB,GAAG,EAAE,CAAC;QAChC,IAAI,4BAA4B,CAAC,MAAM,GAAG,CAAC,EAAE;YAC5C,sBAAsB,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,GAAG,IAAA,cAAQ,EAAC,CAA0B,EAAE,IAA6B,CAAC,EAAE,CAAC;SACvI;aAAM;YACN,IAAI,QAAQ,CAAC,iBAAiB,CAAC,sBAAsB,EAAE;gBACtD,sBAAsB,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,GAAG,IAAA,cAAQ,EAAC,CAA2C,EAAE,IAAkI,CAAC,EAAE,CAAC;aAC7P;iBAAM;gBACN,IAAI,QAAQ,CAAC,6BAA6B,EAAE;oBAC3C,sBAAsB,IAAI,GAAG,QAAQ,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,GAAG,IAAA,cAAQ,EAAC,CAAmC,EAAE,IAAsC,CAAC,EAAE,CAAC;iBACzJ;aACD;SACD;QACD,OAAO,sBAAsB,CAAC;IAC/B,CAAC;IArBD,oBAqBC;IAED,SAAgB,IAAI,CAAmB,QAA2B,EAAE,QAAiB;QACpF,MAAM,KAAK,GAAa,EAAE,CAAC;QAE3B,IAAI,QAAQ,CAAC,SAAS,EAAE;YACvB,KAAK,CAAC,IAAI,CAAC,IAAA,cAAQ,EAAC,CAA4G,CAA1G,CAA4G,EAAzG,EAAE,AAA8H,EAAE,KAAK,EAAE,QAAQ,CAAC,SAAS,CAAC,GAA3H,AAA8H,EAA5H,EAAgI,CAAC,CAAC,GAA3H,EAAE,CAAC,uDAAuD,CAAC;SAC9H;QAED,IAAI,QAAQ,CAAC,iBAAiB,CAAC,UAAU,EAAE;YAC1C,IAAI,WAAW,GAAG,QAAQ,CAAC,iBAAiB,CAAC,UAAU,CAAC;YACxD,MAAM,IAAI,GAAG,IAAA,YAAG,EAAK,QAAQ,CAAC,YAAY,IAAI,QAAQ,CAAC,iBAAiB,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YAClH,IAAI,IAAI,EAAE;gBACT,WAAW,IAAI,IAAI,IAAI,EAAE,CAAC;aAC1B;YAED,KAAK,CAAC,IAAI,CAAC,IAAA,cAAQ,EAAC,CAAiC,EAAE,IAAmB,EAAE,WAAW,CAAC,CAAC,CAAC;SAC1F;QAED,OAAO,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;IACtF,CAAC;IAlBD,oBAkBC","file":"terminalTooltip.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { ITerminalInstance } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { TerminalCapability } from 'vs/platform/terminal/common/capabilities/capabilities';\nimport { asArray } from 'vs/base/common/arrays';\nimport { IHoverAction } from 'vs/workbench/services/hover/browser/hover';\nimport { MarkdownString } from 'vs/base/common/htmlContent';\n\nexport function getInstanceHoverInfo(instance: ITerminalInstance): { content: MarkdownString; actions: IHoverAction[] } {\n\tlet statusString = '';\n\tconst statuses = instance.statusList.statuses;\n\tconst actions = [];\n\tfor (const status of statuses) {\n\t\tstatusString += `\\n\\n---\\n\\n${status.icon ? `$(${status.icon?.id}) ` : ''}${status.tooltip || status.id}`;\n\t\tif (status.hoverActions) {\n\t\t\tactions.push(...status.hoverActions);\n\t\t}\n\t}\n\n\tconst shellProcessString = getShellProcessTooltip(instance, true);\n\tconst shellIntegrationString = getShellIntegrationTooltip(instance, true);\n\tconst content = new MarkdownString(instance.title + shellProcessString + shellIntegrationString + statusString, { supportThemeIcons: true });\n\n\treturn { content, actions };\n}\n\nexport function getShellIntegrationTooltip(instance: ITerminalInstance, markdown: boolean): string {\n\tconst shellIntegrationCapabilities: TerminalCapability[] = [];\n\tif (instance.capabilities.has(TerminalCapability.CommandDetection)) {\n\t\tshellIntegrationCapabilities.push(TerminalCapability.CommandDetection);\n\t}\n\tif (instance.capabilities.has(TerminalCapability.CwdDetection)) {\n\t\tshellIntegrationCapabilities.push(TerminalCapability.CwdDetection);\n\t}\n\tlet shellIntegrationString = '';\n\tif (shellIntegrationCapabilities.length > 0) {\n\t\tshellIntegrationString += `${markdown ? '\\n\\n---\\n\\n' : '\\n\\n'}${localize('shellIntegration.enabled', \"Shell integration activated\")}`;\n\t} else {\n\t\tif (instance.shellLaunchConfig.ignoreShellIntegration) {\n\t\t\tshellIntegrationString += `${markdown ? '\\n\\n---\\n\\n' : '\\n\\n'}${localize('launchFailed.exitCodeOnlyShellIntegration', \"The terminal process failed to launch. Disabling shell integration with terminal.integrated.shellIntegration.enabled might help.\")}`;\n\t\t} else {\n\t\t\tif (instance.usedShellIntegrationInjection) {\n\t\t\t\tshellIntegrationString += `${markdown ? '\\n\\n---\\n\\n' : '\\n\\n'}${localize('shellIntegration.activationFailed', \"Shell integration failed to activate\")}`;\n\t\t\t}\n\t\t}\n\t}\n\treturn shellIntegrationString;\n}\n\nexport function getShellProcessTooltip(instance: ITerminalInstance, markdown: boolean): string {\n\tconst lines: string[] = [];\n\n\tif (instance.processId) {\n\t\tlines.push(localize({ key: 'shellProcessTooltip.processId', comment: ['The first arg is \"PID\" which shouldn\\'t be translated'] }, \"Process ID ({0}): {1}\", 'PID', instance.processId) + '\\n');\n\t}\n\n\tif (instance.shellLaunchConfig.executable) {\n\t\tlet commandLine = instance.shellLaunchConfig.executable;\n\t\tconst args = asArray(instance.injectedArgs || instance.shellLaunchConfig.args || []).map(x => `'${x}'`).join(' ');\n\t\tif (args) {\n\t\t\tcommandLine += ` ${args}`;\n\t\t}\n\n\t\tlines.push(localize('shellProcessTooltip.commandLine', 'Command line: {0}', commandLine));\n\t}\n\n\treturn lines.length ? `${markdown ? '\\n\\n---\\n\\n' : '\\n\\n'}${lines.join('\\n')}` : '';\n}\n"]}