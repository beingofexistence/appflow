{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/browser/remotePty.ts"],"names":[],"mappings":"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","file":"remotePty.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Barrier } from 'vs/base/common/async';\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { mark } from 'vs/base/common/performance';\nimport { URI } from 'vs/base/common/uri';\nimport { IPtyHostProcessReplayEvent, ISerializedCommandDetectionCapability } from 'vs/platform/terminal/common/capabilities/capabilities';\nimport { IProcessDataEvent, ITerminalChildProcess, ITerminalLaunchError, IProcessProperty, IProcessPropertyMap, ProcessPropertyType, IProcessReadyEvent, ITerminalLogService } from 'vs/platform/terminal/common/terminal';\nimport { RemoteTerminalChannelClient } from 'vs/workbench/contrib/terminal/common/remote/remoteTerminalChannel';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\n\nexport class RemotePty extends Disposable implements ITerminalChildProcess {\n\tprivate readonly _startBarrier: Barrier;\n\tprivate readonly _properties: IProcessPropertyMap = {\n\t\tcwd: '',\n\t\tinitialCwd: '',\n\t\tfixedDimensions: { cols: undefined, rows: undefined },\n\t\ttitle: '',\n\t\tshellType: undefined,\n\t\thasChildProcesses: true,\n\t\tresolvedShellLaunchConfig: {},\n\t\toverrideDimensions: undefined,\n\t\tfailedShellIntegrationActivation: false,\n\t\tusedShellIntegrationInjection: undefined\n\t};\n\tprivate readonly _lastDimensions: { cols: number; rows: number } = { cols: -1, rows: -1 };\n\n\tprivate _inReplay = false;\n\n\tprivate readonly _onProcessData = this._register(new Emitter<string | IProcessDataEvent>());\n\treadonly onProcessData = this._onProcessData.event;\n\tprivate readonly _onProcessReplayComplete = this._register(new Emitter<void>());\n\treadonly onProcessReplayComplete = this._onProcessReplayComplete.event;\n\tprivate readonly _onProcessReady = this._register(new Emitter<IProcessReadyEvent>());\n\treadonly onProcessReady = this._onProcessReady.event;\n\tprivate readonly _onDidChangeProperty = this._register(new Emitter<IProcessProperty<any>>());\n\treadonly onDidChangeProperty = this._onDidChangeProperty.event;\n\tprivate readonly _onProcessExit = this._register(new Emitter<number | undefined>());\n\treadonly onProcessExit = this._onProcessExit.event;\n\tprivate readonly _onRestoreCommands = this._register(new Emitter<ISerializedCommandDetectionCapability>());\n\treadonly onRestoreCommands = this._onRestoreCommands.event;\n\n\tconstructor(\n\t\treadonly id: number,\n\t\treadonly shouldPersist: boolean,\n\t\tprivate readonly _remoteTerminalChannel: RemoteTerminalChannelClient,\n\t\t@IRemoteAgentService private readonly _remoteAgentService: IRemoteAgentService,\n\t\t@ITerminalLogService private readonly _logService: ITerminalLogService\n\t) {\n\t\tsuper();\n\t\tthis._startBarrier = new Barrier();\n\t}\n\n\tasync start(): Promise<ITerminalLaunchError | { injectedArgs: string[] } | undefined> {\n\t\t// Fetch the environment to check shell permissions\n\t\tconst env = await this._remoteAgentService.getEnvironment();\n\t\tif (!env) {\n\t\t\t// Extension host processes are only allowed in remote extension hosts currently\n\t\t\tthrow new Error('Could not fetch remote environment');\n\t\t}\n\n\t\tthis._logService.trace('Spawning remote agent process', { terminalId: this.id });\n\n\t\tconst startResult = await this._remoteTerminalChannel.start(this.id);\n\n\t\tif (startResult && 'message' in startResult) {\n\t\t\t// An error occurred\n\t\t\treturn startResult;\n\t\t}\n\n\t\tthis._startBarrier.open();\n\t\treturn startResult;\n\t}\n\n\tasync detach(forcePersist?: boolean): Promise<void> {\n\t\tawait this._startBarrier.wait();\n\t\treturn this._remoteTerminalChannel.detachFromProcess(this.id, forcePersist);\n\t}\n\n\tshutdown(immediate: boolean): void {\n\t\tthis._startBarrier.wait().then(_ => {\n\t\t\tthis._remoteTerminalChannel.shutdown(this.id, immediate);\n\t\t});\n\t}\n\n\tinput(data: string): void {\n\t\tif (this._inReplay) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._startBarrier.wait().then(_ => {\n\t\t\tthis._remoteTerminalChannel.input(this.id, data);\n\t\t});\n\t}\n\n\tresize(cols: number, rows: number): void {\n\t\tif (this._inReplay || this._lastDimensions.cols === cols && this._lastDimensions.rows === rows) {\n\t\t\treturn;\n\t\t}\n\t\tthis._startBarrier.wait().then(_ => {\n\t\t\tthis._lastDimensions.cols = cols;\n\t\t\tthis._lastDimensions.rows = rows;\n\t\t\tthis._remoteTerminalChannel.resize(this.id, cols, rows);\n\t\t});\n\t}\n\n\tasync clearBuffer(): Promise<void> {\n\t\tawait this._remoteTerminalChannel.clearBuffer(this.id);\n\t}\n\n\tfreePortKillProcess(port: string): Promise<{ port: string; processId: string }> {\n\t\tif (!this._remoteTerminalChannel.freePortKillProcess) {\n\t\t\tthrow new Error('freePortKillProcess does not exist on the local pty service');\n\t\t}\n\t\treturn this._remoteTerminalChannel.freePortKillProcess(port);\n\t}\n\n\tacknowledgeDataEvent(charCount: number): void {\n\t\t// Support flow control for server spawned processes\n\t\tif (this._inReplay) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._startBarrier.wait().then(_ => {\n\t\t\tthis._remoteTerminalChannel.acknowledgeDataEvent(this.id, charCount);\n\t\t});\n\t}\n\n\tasync setUnicodeVersion(version: '6' | '11'): Promise<void> {\n\t\treturn this._remoteTerminalChannel.setUnicodeVersion(this.id, version);\n\t}\n\n\tasync getInitialCwd(): Promise<string> {\n\t\treturn this._properties.initialCwd;\n\t}\n\n\tasync getCwd(): Promise<string> {\n\t\treturn this._properties.cwd || this._properties.initialCwd;\n\t}\n\n\tasync refreshProperty<T extends ProcessPropertyType>(type: T): Promise<IProcessPropertyMap[T]> {\n\t\treturn this._remoteTerminalChannel.refreshProperty(this.id, type);\n\t}\n\n\tasync updateProperty<T extends ProcessPropertyType>(type: T, value: IProcessPropertyMap[T]): Promise<void> {\n\t\treturn this._remoteTerminalChannel.updateProperty(this.id, type, value);\n\t}\n\n\thandleData(e: string | IProcessDataEvent) {\n\t\tthis._onProcessData.fire(e);\n\t}\n\thandleExit(e: number | undefined) {\n\t\tthis._onProcessExit.fire(e);\n\t}\n\tprocessBinary(e: string): Promise<void> {\n\t\treturn this._remoteTerminalChannel.processBinary(this.id, e);\n\t}\n\thandleReady(e: IProcessReadyEvent) {\n\t\tthis._onProcessReady.fire(e);\n\t}\n\thandleDidChangeProperty({ type, value }: IProcessProperty<any>) {\n\t\tswitch (type) {\n\t\t\tcase ProcessPropertyType.Cwd:\n\t\t\t\tthis._properties.cwd = value;\n\t\t\t\tbreak;\n\t\t\tcase ProcessPropertyType.InitialCwd:\n\t\t\t\tthis._properties.initialCwd = value;\n\t\t\t\tbreak;\n\t\t\tcase ProcessPropertyType.ResolvedShellLaunchConfig:\n\t\t\t\tif (value.cwd && typeof value.cwd !== 'string') {\n\t\t\t\t\tvalue.cwd = URI.revive(value.cwd);\n\t\t\t\t}\n\t\t}\n\t\tthis._onDidChangeProperty.fire({ type, value });\n\t}\n\n\tasync handleReplay(e: IPtyHostProcessReplayEvent) {\n\t\tmark(`code/terminal/willHandleReplay/${this.id}`);\n\t\ttry {\n\t\t\tthis._inReplay = true;\n\t\t\tfor (const innerEvent of e.events) {\n\t\t\t\tif (innerEvent.cols !== 0 || innerEvent.rows !== 0) {\n\t\t\t\t\t// never override with 0x0 as that is a marker for an unknown initial size\n\t\t\t\t\tthis._onDidChangeProperty.fire({ type: ProcessPropertyType.OverrideDimensions, value: { cols: innerEvent.cols, rows: innerEvent.rows, forceExactSize: true } });\n\t\t\t\t}\n\t\t\t\tconst e: IProcessDataEvent = { data: innerEvent.data, trackCommit: true };\n\t\t\t\tthis._onProcessData.fire(e);\n\t\t\t\tawait e.writePromise;\n\t\t\t}\n\t\t} finally {\n\t\t\tthis._inReplay = false;\n\t\t}\n\n\t\tif (e.commands) {\n\t\t\tthis._onRestoreCommands.fire(e.commands);\n\t\t}\n\n\t\t// remove size override\n\t\tthis._onDidChangeProperty.fire({ type: ProcessPropertyType.OverrideDimensions, value: undefined });\n\n\t\tmark(`code/terminal/didHandleReplay/${this.id}`);\n\t\tthis._onProcessReplayComplete.fire();\n\t}\n\n\thandleOrphanQuestion() {\n\t\tthis._remoteTerminalChannel.orphanQuestionReply(this.id);\n\t}\n}\n"]}