{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/browser/detachedTerminal.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAkBzF,IAAM,IAAI,GAAV,MAAM,IAAkB,SAAQ,eAAG;QAKzC,IAAW,KAAK;YACf,OAAO,IAAI,CAAC,CAAC,CAAM;QACpB,CAAC;QAED,YACkB,CAAY,EAC7B,OAA8B,EACP,oBAAyB;YAEhD,KAAK,EAAE,CAAC;YAJS,MAAC,GAAD,CAAC,CAAW;YATb,MAAC,GAAU,IAAI,CAAC,CAAC,CAAS,IAAI,oBAAI,EAAmB,CAAC,CAAC;YACxD,iBAAY,GAAG,IAAI,8BAAI,EAAqB,CAAC;YAC5C,MAAC,GAAoD,IAAI,GAAG,EAAE,CAAC;YAY/E,IAAI,CAAC,CAAC,CAAS,CAAC,CAAM,CAAC;YAEvB,2BAA2B;YAC3B,MAAM,iBAAiB,GAAG,+CAA0B,CAAC,wBAAwB,EAAE,CAAC;YAChF,KAAK,MAAM,IAAI,IAAI,iBAAiB,EAAE;gBACrC,IAAI,IAAI,CAAC,CAAC,CAAc,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE;oBACrC,IAAA,WAAE,EAAgB,IAAI,KAAK,CAAC,2DAA2D,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;oBACnG,SAAS;iBACT;gBACD,IAAI,IAAI,CAAC,yBAAyB,KAAK,KAAK,EAAE;oBAC7C,SAAS;iBACT;gBAED,IAAI,YAAmC,CAAC;gBACxC,IAAI;oBACH,YAAY,GAAG,oBAAoB,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,CAAQ,CAAC;oBACxG,IAAI,CAAC,CAAC,CAAc,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC;oBAC/C,IAAI,CAAC,CAAC,CAAS,YAAY,CAAC,CAAC;iBAC7B;gBAAC,OAAO,GAAG,EAAE;oBACb,IAAA,WAAE,EAAgB,GAAG,CAAC,CAAC;iBACvB;aACD;YAED,kFAAkF;YAClF,4EAA4E;YAC5E,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,CAAK,aAAG,CAAY,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE;gBACxD,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,CAAC,CAAc,MAAM,EAAE,EAAE;oBACjD,KAAK,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,CAAC,CAAM,CAAC;iBAChC;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,eAAe,CAAC,SAAsB,EAAE,OAA2D;YAClG,MAAM,aAAa,GAAG,IAAI,CAAC,CAAC,CAAM,eAAe,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YACtE,IAAI,CAAC,CAAC,CAAQ,eAAe,CAAC,aAAa,CAAC,CAAC;QAC9C,CAAC;KACD,CAAA;IAnDY,oBAAI;mBAAJ,IAAI;QAYd,WAAA,mBAAG,CAAA;OAZO,IAAI,CAmDhB;IAED;;;;OAIG;IACH,MAAa,IAAI;QAkBhB,YAAY,aAA4C;YAjBxD,iBAAY,gCAAwB;YACpC,oBAAe,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;YAKpC,eAAU,GAAG,EAAE,CAAC;YAGhB,kBAAa,GAAG,KAAK,CAAC;YACtB,mBAAc,GAAG,KAAK,CAAC;YACvB,sBAAiB,GAAG,KAAK,CAAC;YAE1B,iBAAY,GAAG,IAAI,8BAAI,EAAqB,CAAC;YAC7C,0BAAqB,GAAG,EAAE,CAAC;YAI1B,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC;QACpC,CAAC;KACD;IArBD,oBAqBC","file":"detachedTerminal.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Delayer } from 'vs/base/common/async';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { OperatingSystem } from 'vs/base/common/platform';\nimport { MicrotaskDelay } from 'vs/base/common/symbols';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { TerminalCapabilityStore } from 'vs/platform/terminal/common/capabilities/terminalCapabilityStore';\nimport { IMergedEnvironmentVariableCollection } from 'vs/platform/terminal/common/environmentVariable';\nimport { ITerminalBackend } from 'vs/platform/terminal/common/terminal';\nimport { IDetachedTerminalInstance, IDetachedXTermOptions, IDetachedXtermTerminal, ITerminalContribution, IXtermAttachToElementOptions } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { TerminalExtensionsRegistry } from 'vs/workbench/contrib/terminal/browser/terminalExtensions';\nimport { TerminalWidgetManager } from 'vs/workbench/contrib/terminal/browser/widgets/widgetManager';\nimport { XtermTerminal } from 'vs/workbench/contrib/terminal/browser/xterm/xtermTerminal';\nimport { IEnvironmentVariableInfo } from 'vs/workbench/contrib/terminal/common/environmentVariable';\nimport { ITerminalProcessInfo, ProcessState } from 'vs/workbench/contrib/terminal/common/terminal';\n\nexport class DeatachedTerminal extends Disposable implements IDetachedTerminalInstance {\n\tprivate readonly _widgets = this._register(new TerminalWidgetManager());\n\tpublic readonly capabilities = new TerminalCapabilityStore();\n\tprivate readonly _contributions: Map<string, ITerminalContribution> = new Map();\n\n\tpublic get xterm(): IDetachedXtermTerminal {\n\t\treturn this._xterm;\n\t}\n\n\tconstructor(\n\t\tprivate readonly _xterm: XtermTerminal,\n\t\toptions: IDetachedXTermOptions,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t\tthis._register(_xterm);\n\n\t\t// Initialize contributions\n\t\tconst contributionDescs = TerminalExtensionsRegistry.getTerminalContributions();\n\t\tfor (const desc of contributionDescs) {\n\t\t\tif (this._contributions.has(desc.id)) {\n\t\t\t\tonUnexpectedError(new Error(`Cannot have two terminal contributions with the same id ${desc.id}`));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (desc.canRunInDetachedTerminals === false) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet contribution: ITerminalContribution;\n\t\t\ttry {\n\t\t\t\tcontribution = instantiationService.createInstance(desc.ctor, this, options.processInfo, this._widgets);\n\t\t\t\tthis._contributions.set(desc.id, contribution);\n\t\t\t\tthis._register(contribution);\n\t\t\t} catch (err) {\n\t\t\t\tonUnexpectedError(err);\n\t\t\t}\n\t\t}\n\n\t\t// xterm is already by the time DetachedTerminal is created, so trigger everything\n\t\t// on the next microtask, allowing the caller to do any extra initialization\n\t\tthis._register(new Delayer(MicrotaskDelay)).trigger(() => {\n\t\t\tfor (const contr of this._contributions.values()) {\n\t\t\t\tcontr.xtermReady?.(this._xterm);\n\t\t\t}\n\t\t});\n\t}\n\n\tattachToElement(container: HTMLElement, options?: Partial<IXtermAttachToElementOptions> | undefined): void {\n\t\tconst screenElement = this._xterm.attachToElement(container, options);\n\t\tthis._widgets.attachToElement(screenElement);\n\t}\n}\n\n/**\n * Implements {@link ITerminalProcessInfo} for a detached terminal where most\n * properties are stubbed. Properties are mutable and can be updated by\n * the instantiator.\n */\nexport class DetachedProcessInfo implements ITerminalProcessInfo {\n\tprocessState = ProcessState.Running;\n\tptyProcessReady = Promise.resolve();\n\tshellProcessId: number | undefined;\n\tremoteAuthority: string | undefined;\n\tos: OperatingSystem | undefined;\n\tuserHome: string | undefined;\n\tinitialCwd = '';\n\tenvironmentVariableInfo: IEnvironmentVariableInfo | undefined;\n\tpersistentProcessId: number | undefined;\n\tshouldPersist = false;\n\thasWrittenData = false;\n\thasChildProcesses = false;\n\tbackend: ITerminalBackend | undefined;\n\tcapabilities = new TerminalCapabilityStore();\n\tshellIntegrationNonce = '';\n\textEnvironmentVariableCollection: IMergedEnvironmentVariableCollection | undefined;\n\n\tconstructor(initialValues: Partial<ITerminalProcessInfo>) {\n\t\tObject.assign(this, initialValues);\n\t}\n}\n"]}