{"version":3,"sources":["vs/workbench/contrib/terminal/browser/terminal.contribution.ts"],"names":[],"mappings":"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","file":"terminal.contribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport 'vs/css!./media/scrollbar';\nimport 'vs/css!./media/widgets';\nimport 'vs/css!./media/xterm';\nimport 'vs/css!./media/terminal';\nimport * as nls from 'vs/nls';\nimport { URI } from 'vs/base/common/uri';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { ContextKeyExpr, ContextKeyExpression } from 'vs/platform/contextkey/common/contextkey';\nimport { KeybindingWeight, KeybindingsRegistry, IKeybindings } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { getQuickNavigateHandler } from 'vs/workbench/browser/quickaccess';\nimport { Extensions as ViewContainerExtensions, IViewContainersRegistry, ViewContainerLocation, IViewsRegistry } from 'vs/workbench/common/views';\nimport { Extensions as DragAndDropExtensions, IDragAndDropContributionRegistry, IDraggedResourceEditorInput } from 'vs/platform/dnd/browser/dnd';\nimport { registerTerminalActions, terminalSendSequenceCommand } from 'vs/workbench/contrib/terminal/browser/terminalActions';\nimport { TerminalViewPane } from 'vs/workbench/contrib/terminal/browser/terminalView';\nimport { TERMINAL_VIEW_ID, TerminalCommandId, ITerminalProfileService } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { registerColors } from 'vs/workbench/contrib/terminal/common/terminalColorRegistry';\nimport { setupTerminalCommands } from 'vs/workbench/contrib/terminal/browser/terminalCommands';\nimport { TerminalService } from 'vs/workbench/contrib/terminal/browser/terminalService';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ITerminalEditorService, ITerminalGroupService, ITerminalInstanceService, ITerminalService, TerminalDataTransfers, terminalEditorId } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { ViewPaneContainer } from 'vs/workbench/browser/parts/views/viewPaneContainer';\nimport { IQuickAccessRegistry, Extensions as QuickAccessExtensions } from 'vs/platform/quickinput/common/quickAccess';\nimport { TerminalQuickAccessProvider } from 'vs/workbench/contrib/terminal/browser/terminalQuickAccess';\nimport { registerTerminalConfiguration } from 'vs/workbench/contrib/terminal/common/terminalConfiguration';\nimport { CONTEXT_ACCESSIBILITY_MODE_ENABLED } from 'vs/platform/accessibility/common/accessibility';\nimport { terminalViewIcon } from 'vs/workbench/contrib/terminal/browser/terminalIcons';\nimport { ITerminalLogService, TerminalSettingId, WindowsShellType } from 'vs/platform/terminal/common/terminal';\nimport { isIOS, isWindows } from 'vs/base/common/platform';\nimport { setupTerminalMenus } from 'vs/workbench/contrib/terminal/browser/terminalMenus';\nimport { TerminalInstanceService } from 'vs/workbench/contrib/terminal/browser/terminalInstanceService';\nimport { registerTerminalPlatformConfiguration } from 'vs/platform/terminal/common/terminalPlatformConfiguration';\nimport { EditorExtensions, IEditorFactoryRegistry } from 'vs/workbench/common/editor';\nimport { EditorPaneDescriptor, IEditorPaneRegistry } from 'vs/workbench/browser/editor';\nimport { TerminalEditor } from 'vs/workbench/contrib/terminal/browser/terminalEditor';\nimport { TerminalEditorInput } from 'vs/workbench/contrib/terminal/browser/terminalEditorInput';\nimport { terminalStrings } from 'vs/workbench/contrib/terminal/common/terminalStrings';\nimport { TerminalEditorService } from 'vs/workbench/contrib/terminal/browser/terminalEditorService';\nimport { TerminalInputSerializer } from 'vs/workbench/contrib/terminal/browser/terminalEditorSerializer';\nimport { TerminalGroupService } from 'vs/workbench/contrib/terminal/browser/terminalGroupService';\nimport { TerminalContextKeys, TerminalContextKeyStrings } from 'vs/workbench/contrib/terminal/common/terminalContextKey';\nimport { TerminalProfileService } from 'vs/workbench/contrib/terminal/browser/terminalProfileService';\nimport { IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { RemoteTerminalBackendContribution } from 'vs/workbench/contrib/terminal/browser/remoteTerminalBackend';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { TerminalMainContribution } from 'vs/workbench/contrib/terminal/browser/terminalMainContribution';\nimport { Schemas } from 'vs/base/common/network';\nimport { TerminalLogService } from 'vs/platform/terminal/common/terminalLogService';\n\n// Register services\nregisterSingleton(ITerminalLogService, TerminalLogService, InstantiationType.Delayed);\nregisterSingleton(ITerminalService, TerminalService, InstantiationType.Delayed);\nregisterSingleton(ITerminalEditorService, TerminalEditorService, InstantiationType.Delayed);\nregisterSingleton(ITerminalGroupService, TerminalGroupService, InstantiationType.Delayed);\nregisterSingleton(ITerminalInstanceService, TerminalInstanceService, InstantiationType.Delayed);\nregisterSingleton(ITerminalProfileService, TerminalProfileService, InstantiationType.Delayed);\n\n// Register quick accesses\nconst quickAccessRegistry = (Registry.as<IQuickAccessRegistry>(QuickAccessExtensions.Quickaccess));\nconst inTerminalsPicker = 'inTerminalPicker';\nquickAccessRegistry.registerQuickAccessProvider({\n\tctor: TerminalQuickAccessProvider,\n\tprefix: TerminalQuickAccessProvider.PREFIX,\n\tcontextKey: inTerminalsPicker,\n\tplaceholder: nls.localize('tasksQuickAccessPlaceholder', \"Type the name of a terminal to open.\"),\n\thelpEntries: [{ description: nls.localize('tasksQuickAccessHelp', \"Show All Opened Terminals\"), commandId: TerminalCommandId.QuickOpenTerm }]\n});\nconst quickAccessNavigateNextInTerminalPickerId = 'workbench.action.quickOpenNavigateNextInTerminalPicker';\nCommandsRegistry.registerCommand({ id: quickAccessNavigateNextInTerminalPickerId, handler: getQuickNavigateHandler(quickAccessNavigateNextInTerminalPickerId, true) });\nconst quickAccessNavigatePreviousInTerminalPickerId = 'workbench.action.quickOpenNavigatePreviousInTerminalPicker';\nCommandsRegistry.registerCommand({ id: quickAccessNavigatePreviousInTerminalPickerId, handler: getQuickNavigateHandler(quickAccessNavigatePreviousInTerminalPickerId, false) });\n\n// Register workbench contributions\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(TerminalMainContribution, LifecyclePhase.Restored);\nworkbenchRegistry.registerWorkbenchContribution(RemoteTerminalBackendContribution, LifecyclePhase.Restored);\n\n// Register configurations\nregisterTerminalPlatformConfiguration();\nregisterTerminalConfiguration();\n\n// Register editor/dnd contributions\nRegistry.as<IEditorFactoryRegistry>(EditorExtensions.EditorFactory).registerEditorSerializer(TerminalEditorInput.ID, TerminalInputSerializer);\nRegistry.as<IEditorPaneRegistry>(EditorExtensions.EditorPane).registerEditorPane(\n\tEditorPaneDescriptor.create(\n\t\tTerminalEditor,\n\t\tterminalEditorId,\n\t\tterminalStrings.terminal\n\t),\n\t[\n\t\tnew SyncDescriptor(TerminalEditorInput)\n\t]\n);\nRegistry.as<IDragAndDropContributionRegistry>(DragAndDropExtensions.DragAndDropContribution).register({\n\tdataFormatKey: TerminalDataTransfers.Terminals,\n\tgetEditorInputs(data) {\n\t\tconst editors: IDraggedResourceEditorInput[] = [];\n\t\ttry {\n\t\t\tconst terminalEditors: string[] = JSON.parse(data);\n\t\t\tfor (const terminalEditor of terminalEditors) {\n\t\t\t\teditors.push({ resource: URI.parse(terminalEditor) });\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Invalid transfer\n\t\t}\n\t\treturn editors;\n\t},\n\tsetData(resources, event) {\n\t\tconst terminalResources = resources.filter(({ resource }) => resource.scheme === Schemas.vscodeTerminal);\n\t\tif (terminalResources.length) {\n\t\t\tevent.dataTransfer?.setData(TerminalDataTransfers.Terminals, JSON.stringify(terminalResources.map(({ resource }) => resource.toString())));\n\t\t}\n\t}\n});\n\n// Register views\nconst VIEW_CONTAINER = Registry.as<IViewContainersRegistry>(ViewContainerExtensions.ViewContainersRegistry).registerViewContainer({\n\tid: TERMINAL_VIEW_ID,\n\ttitle: { value: nls.localize('terminal', \"Terminal\"), original: 'Terminal' },\n\ticon: terminalViewIcon,\n\tctorDescriptor: new SyncDescriptor(ViewPaneContainer, [TERMINAL_VIEW_ID, { mergeViewWithContainerWhenSingleView: true }]),\n\tstorageId: TERMINAL_VIEW_ID,\n\thideIfEmpty: true,\n\torder: 3,\n}, ViewContainerLocation.Panel, { doNotRegisterOpenCommand: true, isDefault: true });\nRegistry.as<IViewsRegistry>(ViewContainerExtensions.ViewsRegistry).registerViews([{\n\tid: TERMINAL_VIEW_ID,\n\tname: nls.localize('terminal', \"Terminal\"),\n\tcontainerIcon: terminalViewIcon,\n\tcanToggleVisibility: false,\n\tcanMoveView: true,\n\tctorDescriptor: new SyncDescriptor(TerminalViewPane),\n\topenCommandActionDescriptor: {\n\t\tid: TerminalCommandId.Toggle,\n\t\tmnemonicTitle: nls.localize({ key: 'miToggleIntegratedTerminal', comment: ['&& denotes a mnemonic'] }, \"&&Terminal\"),\n\t\tkeybindings: {\n\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.Backquote,\n\t\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.Backquote }\n\t\t},\n\t\torder: 3\n\t}\n}], VIEW_CONTAINER);\n\n// Register actions\nregisterTerminalActions();\n\nfunction registerSendSequenceKeybinding(text: string, rule: { when?: ContextKeyExpression } & IKeybindings): void {\n\tKeybindingsRegistry.registerCommandAndKeybindingRule({\n\t\tid: TerminalCommandId.SendSequence,\n\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\twhen: rule.when || TerminalContextKeys.focus,\n\t\tprimary: rule.primary,\n\t\tmac: rule.mac,\n\t\tlinux: rule.linux,\n\t\twin: rule.win,\n\t\thandler: terminalSendSequenceCommand,\n\t\targs: { text }\n\t});\n}\n\nconst enum Constants {\n\t/** The text representation of `^<letter>` is `'A'.charCodeAt(0) + 1`. */\n\tCtrlLetterOffset = 64\n}\n\n// An extra Windows-only ctrl+v keybinding is used for pwsh that sends ctrl+v directly to the\n// shell, this gets handled by PSReadLine which properly handles multi-line pastes. This is\n// disabled in accessibility mode as PowerShell does not run PSReadLine when it detects a screen\n// reader. This works even when clipboard.readText is not supported.\nif (isWindows) {\n\tregisterSendSequenceKeybinding(String.fromCharCode('V'.charCodeAt(0) - Constants.CtrlLetterOffset), { // ctrl+v\n\t\twhen: ContextKeyExpr.and(TerminalContextKeys.focus, ContextKeyExpr.equals(TerminalContextKeyStrings.ShellType, WindowsShellType.PowerShell), CONTEXT_ACCESSIBILITY_MODE_ENABLED.negate()),\n\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyV\n\t});\n}\n\n// Map certain keybindings in pwsh to unused keys which get handled by PSReadLine handlers in the\n// shell integration script. This allows keystrokes that cannot be sent via VT sequences to work.\n// See https://github.com/microsoft/terminal/issues/879#issuecomment-497775007\nregisterSendSequenceKeybinding('\\x1b[24~a', { // F12,a -> ctrl+space (MenuComplete)\n\twhen: ContextKeyExpr.and(TerminalContextKeys.focus, ContextKeyExpr.equals(TerminalContextKeyStrings.ShellType, WindowsShellType.PowerShell), TerminalContextKeys.terminalShellIntegrationEnabled, CONTEXT_ACCESSIBILITY_MODE_ENABLED.negate()),\n\tprimary: KeyMod.CtrlCmd | KeyCode.Space,\n\tmac: { primary: KeyMod.WinCtrl | KeyCode.Space }\n});\nregisterSendSequenceKeybinding('\\x1b[24~b', { // F12,b -> alt+space (SetMark)\n\twhen: ContextKeyExpr.and(TerminalContextKeys.focus, ContextKeyExpr.equals(TerminalContextKeyStrings.ShellType, WindowsShellType.PowerShell), TerminalContextKeys.terminalShellIntegrationEnabled, CONTEXT_ACCESSIBILITY_MODE_ENABLED.negate()),\n\tprimary: KeyMod.Alt | KeyCode.Space\n});\nregisterSendSequenceKeybinding('\\x1b[24~c', { // F12,c -> shift+enter (AddLine)\n\twhen: ContextKeyExpr.and(TerminalContextKeys.focus, ContextKeyExpr.equals(TerminalContextKeyStrings.ShellType, WindowsShellType.PowerShell), TerminalContextKeys.terminalShellIntegrationEnabled, CONTEXT_ACCESSIBILITY_MODE_ENABLED.negate()),\n\tprimary: KeyMod.Shift | KeyCode.Enter\n});\nregisterSendSequenceKeybinding('\\x1b[24~d', { // F12,d -> shift+end (SelectLine) - HACK: \\x1b[1;2F is supposed to work but it doesn't\n\twhen: ContextKeyExpr.and(TerminalContextKeys.focus, ContextKeyExpr.equals(TerminalContextKeyStrings.ShellType, WindowsShellType.PowerShell), TerminalContextKeys.terminalShellIntegrationEnabled, CONTEXT_ACCESSIBILITY_MODE_ENABLED.negate()),\n\tmac: { primary: KeyMod.Shift | KeyMod.CtrlCmd | KeyCode.RightArrow }\n});\nregisterSendSequenceKeybinding('\\x1b[24~e', { // F12,e -> ctrl+space (Native suggest)\n\twhen: ContextKeyExpr.and(TerminalContextKeys.focus, ContextKeyExpr.equals(TerminalContextKeyStrings.ShellType, WindowsShellType.PowerShell), TerminalContextKeys.terminalShellIntegrationEnabled, CONTEXT_ACCESSIBILITY_MODE_ENABLED.negate(), ContextKeyExpr.equals(`config.${TerminalSettingId.ShellIntegrationSuggestEnabled}`, true)),\n\tprimary: KeyMod.CtrlCmd | KeyCode.Space,\n\tmac: { primary: KeyMod.WinCtrl | KeyCode.Space }\n});\n\n// Always on pwsh keybindings\nregisterSendSequenceKeybinding('\\x1b[1;2H', { // Shift+home\n\twhen: ContextKeyExpr.and(TerminalContextKeys.focus, ContextKeyExpr.equals(TerminalContextKeyStrings.ShellType, WindowsShellType.PowerShell)),\n\tmac: { primary: KeyMod.Shift | KeyMod.CtrlCmd | KeyCode.LeftArrow }\n});\n\n// Map ctrl+alt+r -> ctrl+r when in accessibility mode due to default run recent command keybinding\nregisterSendSequenceKeybinding('\\x12', {\n\twhen: ContextKeyExpr.and(TerminalContextKeys.focus, CONTEXT_ACCESSIBILITY_MODE_ENABLED),\n\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyR,\n\tmac: { primary: KeyMod.WinCtrl | KeyMod.Alt | KeyCode.KeyR }\n});\n\n// Map ctrl+alt+g -> ctrl+g due to default go to recent directory keybinding\nregisterSendSequenceKeybinding('\\x07', {\n\twhen: TerminalContextKeys.focus,\n\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyG,\n\tmac: { primary: KeyMod.WinCtrl | KeyMod.Alt | KeyCode.KeyG }\n});\n\n// send ctrl+c to the iPad when the terminal is focused and ctrl+c is pressed to kill the process (work around for #114009)\nif (isIOS) {\n\tregisterSendSequenceKeybinding(String.fromCharCode('C'.charCodeAt(0) - Constants.CtrlLetterOffset), { // ctrl+c\n\t\twhen: ContextKeyExpr.and(TerminalContextKeys.focus),\n\t\tprimary: KeyMod.WinCtrl | KeyCode.KeyC\n\t});\n}\n\n// Delete word left: ctrl+w\nregisterSendSequenceKeybinding(String.fromCharCode('W'.charCodeAt(0) - Constants.CtrlLetterOffset), {\n\tprimary: KeyMod.CtrlCmd | KeyCode.Backspace,\n\tmac: { primary: KeyMod.Alt | KeyCode.Backspace }\n});\nif (isWindows) {\n\t// Delete word left: ctrl+h\n\t// Windows cmd.exe requires ^H to delete full word left\n\tregisterSendSequenceKeybinding(String.fromCharCode('H'.charCodeAt(0) - Constants.CtrlLetterOffset), {\n\t\twhen: ContextKeyExpr.and(TerminalContextKeys.focus, ContextKeyExpr.equals(TerminalContextKeyStrings.ShellType, WindowsShellType.CommandPrompt)),\n\t\tprimary: KeyMod.CtrlCmd | KeyCode.Backspace,\n\t});\n}\n// Delete word right: alt+d [27, 100]\nregisterSendSequenceKeybinding('\\u001bd', {\n\tprimary: KeyMod.CtrlCmd | KeyCode.Delete,\n\tmac: { primary: KeyMod.Alt | KeyCode.Delete }\n});\n// Delete to line start: ctrl+u\nregisterSendSequenceKeybinding('\\u0015', {\n\tmac: { primary: KeyMod.CtrlCmd | KeyCode.Backspace }\n});\n// Move to line start: ctrl+A\nregisterSendSequenceKeybinding(String.fromCharCode('A'.charCodeAt(0) - 64), {\n\tmac: { primary: KeyMod.CtrlCmd | KeyCode.LeftArrow }\n});\n// Move to line end: ctrl+E\nregisterSendSequenceKeybinding(String.fromCharCode('E'.charCodeAt(0) - 64), {\n\tmac: { primary: KeyMod.CtrlCmd | KeyCode.RightArrow }\n});\n// NUL: ctrl+shift+2\nregisterSendSequenceKeybinding('\\u0000', {\n\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Digit2,\n\tmac: { primary: KeyMod.WinCtrl | KeyMod.Shift | KeyCode.Digit2 }\n});\n// RS: ctrl+shift+6\nregisterSendSequenceKeybinding('\\u001e', {\n\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.Digit6,\n\tmac: { primary: KeyMod.WinCtrl | KeyMod.Shift | KeyCode.Digit6 }\n});\n// US (Undo): ctrl+/\nregisterSendSequenceKeybinding('\\u001f', {\n\tprimary: KeyMod.CtrlCmd | KeyCode.Slash,\n\tmac: { primary: KeyMod.WinCtrl | KeyCode.Slash }\n});\n\nsetupTerminalCommands();\n\nsetupTerminalMenus();\n\nregisterColors();\n"]}