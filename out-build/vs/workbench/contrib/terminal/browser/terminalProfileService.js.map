{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/browser/terminalProfileService.ts"],"names":[],"mappings":"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","file":"terminalProfileService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { equals } from 'vs/base/common/arrays';\nimport { AutoOpenBarrier } from 'vs/base/common/async';\nimport { throttle } from 'vs/base/common/decorators';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { isMacintosh, isWeb, isWindows, OperatingSystem, OS } from 'vs/base/common/platform';\nimport { ConfigurationTarget, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { ITerminalProfile, IExtensionTerminalProfile, TerminalSettingPrefix, TerminalSettingId, ITerminalProfileObject, IShellLaunchConfig } from 'vs/platform/terminal/common/terminal';\nimport { registerTerminalDefaultProfileConfiguration } from 'vs/platform/terminal/common/terminalPlatformConfiguration';\nimport { terminalIconsEqual, terminalProfileArgsMatch } from 'vs/platform/terminal/common/terminalProfiles';\nimport { ITerminalInstanceService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { refreshTerminalActions } from 'vs/workbench/contrib/terminal/browser/terminalActions';\nimport { IRegisterContributedProfileArgs, ITerminalProfileProvider, ITerminalProfileService } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { TerminalContextKeys } from 'vs/workbench/contrib/terminal/common/terminalContextKey';\nimport { ITerminalContributionService } from 'vs/workbench/contrib/terminal/common/terminalExtensionPoints';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\n\n/*\n * Links TerminalService with TerminalProfileResolverService\n * and keeps the available terminal profiles updated\n */\nexport class TerminalProfileService extends Disposable implements ITerminalProfileService {\n\tdeclare _serviceBrand: undefined;\n\n\tprivate _webExtensionContributedProfileContextKey: IContextKey<boolean>;\n\tprivate _profilesReadyBarrier: AutoOpenBarrier | undefined;\n\tprivate _profilesReadyPromise: Promise<void>;\n\tprivate _availableProfiles: ITerminalProfile[] | undefined;\n\tprivate _contributedProfiles: IExtensionTerminalProfile[] = [];\n\tprivate _defaultProfileName?: string;\n\tprivate _platformConfigJustRefreshed = false;\n\tprivate readonly _profileProviders: Map</*ext id*/string, Map</*provider id*/string, ITerminalProfileProvider>> = new Map();\n\n\tprivate readonly _onDidChangeAvailableProfiles = this._register(new Emitter<ITerminalProfile[]>());\n\tget onDidChangeAvailableProfiles(): Event<ITerminalProfile[]> { return this._onDidChangeAvailableProfiles.event; }\n\n\tget profilesReady(): Promise<void> { return this._profilesReadyPromise; }\n\tget availableProfiles(): ITerminalProfile[] {\n\t\tif (!this._platformConfigJustRefreshed) {\n\t\t\tthis.refreshAvailableProfiles();\n\t\t}\n\t\treturn this._availableProfiles || [];\n\t}\n\tget contributedProfiles(): IExtensionTerminalProfile[] {\n\t\treturn this._contributedProfiles || [];\n\t}\n\n\tconstructor(\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ITerminalContributionService private readonly _terminalContributionService: ITerminalContributionService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@IRemoteAgentService private _remoteAgentService: IRemoteAgentService,\n\t\t@IWorkbenchEnvironmentService private readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ITerminalInstanceService private readonly _terminalInstanceService: ITerminalInstanceService\n\t) {\n\t\tsuper();\n\n\t\t// in web, we don't want to show the dropdown unless there's a web extension\n\t\t// that contributes a profile\n\t\tthis._extensionService.onDidChangeExtensions(() => this.refreshAvailableProfiles());\n\n\t\tthis._webExtensionContributedProfileContextKey = TerminalContextKeys.webExtensionContributedProfile.bindTo(this._contextKeyService);\n\t\tthis._updateWebContextKey();\n\t\tthis._profilesReadyPromise = this._remoteAgentService.getEnvironment()\n\t\t\t.then(() => {\n\t\t\t\t// Wait up to 20 seconds for profiles to be ready so it's assured that we know the actual\n\t\t\t\t// default terminal before launching the first terminal. This isn't expected to ever take\n\t\t\t\t// this long.\n\t\t\t\tthis._profilesReadyBarrier = new AutoOpenBarrier(20000);\n\t\t\t\treturn this._profilesReadyBarrier.wait().then(() => { });\n\t\t\t});\n\t\tthis.refreshAvailableProfiles();\n\t\tthis._setupConfigListener();\n\t}\n\n\tprivate async _setupConfigListener(): Promise<void> {\n\t\tconst platformKey = await this.getPlatformKey();\n\n\t\tthis._configurationService.onDidChangeConfiguration(async e => {\n\t\t\tif (e.affectsConfiguration(TerminalSettingPrefix.DefaultProfile + platformKey) ||\n\t\t\t\te.affectsConfiguration(TerminalSettingPrefix.Profiles + platformKey) ||\n\t\t\t\te.affectsConfiguration(TerminalSettingId.UseWslProfiles)) {\n\t\t\t\tif (e.source !== ConfigurationTarget.DEFAULT) {\n\t\t\t\t\t// when _refreshPlatformConfig is called within refreshAvailableProfiles\n\t\t\t\t\t// on did change configuration is fired. this can lead to an infinite recursion\n\t\t\t\t\tthis.refreshAvailableProfiles();\n\t\t\t\t\tthis._platformConfigJustRefreshed = false;\n\t\t\t\t} else {\n\t\t\t\t\tthis._platformConfigJustRefreshed = true;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tgetDefaultProfileName(): string | undefined {\n\t\treturn this._defaultProfileName;\n\t}\n\n\tgetDefaultProfile(os?: OperatingSystem): ITerminalProfile | undefined {\n\t\tlet defaultProfileName: string | undefined;\n\t\tif (os) {\n\t\t\tdefaultProfileName = this._configurationService.getValue(`${TerminalSettingPrefix.DefaultProfile}${this._getOsKey(os)}`);\n\t\t\tif (!defaultProfileName || typeof defaultProfileName !== 'string') {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t} else {\n\t\t\tdefaultProfileName = this._defaultProfileName;\n\t\t}\n\t\tif (!defaultProfileName) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// IMPORTANT: Only allow the default profile name to find non-auto detected profiles as\n\t\t// to avoid unsafe path profiles being picked up.\n\t\treturn this.availableProfiles.find(e => e.profileName === defaultProfileName && !e.isAutoDetected);\n\t}\n\n\tprivate _getOsKey(os: OperatingSystem): string {\n\t\tswitch (os) {\n\t\t\tcase OperatingSystem.Linux: return 'linux';\n\t\t\tcase OperatingSystem.Macintosh: return 'osx';\n\t\t\tcase OperatingSystem.Windows: return 'windows';\n\t\t}\n\t}\n\n\n\t@throttle(2000)\n\trefreshAvailableProfiles(): void {\n\t\tthis._refreshAvailableProfilesNow();\n\t}\n\n\tprotected async _refreshAvailableProfilesNow(): Promise<void> {\n\t\tconst profiles = await this._detectProfiles(true);\n\t\tconst profilesChanged = !(equals(profiles, this._availableProfiles, profilesEqual));\n\t\tconst contributedProfilesChanged = await this._updateContributedProfiles();\n\t\tif (profilesChanged || contributedProfilesChanged) {\n\t\t\tthis._availableProfiles = profiles;\n\t\t\tthis._onDidChangeAvailableProfiles.fire(this._availableProfiles);\n\t\t\tthis._profilesReadyBarrier!.open();\n\t\t\tthis._updateWebContextKey();\n\t\t\tawait this._refreshPlatformConfig(this._availableProfiles);\n\t\t}\n\t}\n\n\tprivate async _updateContributedProfiles(): Promise<boolean> {\n\t\tconst platformKey = await this.getPlatformKey();\n\t\tconst excludedContributedProfiles: string[] = [];\n\t\tconst configProfiles: { [key: string]: any } = this._configurationService.getValue(TerminalSettingPrefix.Profiles + platformKey);\n\t\tfor (const [profileName, value] of Object.entries(configProfiles)) {\n\t\t\tif (value === null) {\n\t\t\t\texcludedContributedProfiles.push(profileName);\n\t\t\t}\n\t\t}\n\t\tconst filteredContributedProfiles = Array.from(this._terminalContributionService.terminalProfiles.filter(p => !excludedContributedProfiles.includes(p.title)));\n\t\tconst contributedProfilesChanged = !equals(filteredContributedProfiles, this._contributedProfiles, contributedProfilesEqual);\n\t\tthis._contributedProfiles = filteredContributedProfiles;\n\t\treturn contributedProfilesChanged;\n\t}\n\n\tgetContributedProfileProvider(extensionIdentifier: string, id: string): ITerminalProfileProvider | undefined {\n\t\tconst extMap = this._profileProviders.get(extensionIdentifier);\n\t\treturn extMap?.get(id);\n\t}\n\n\tprivate async _detectProfiles(includeDetectedProfiles?: boolean): Promise<ITerminalProfile[]> {\n\t\tconst primaryBackend = await this._terminalInstanceService.getBackend(this._environmentService.remoteAuthority);\n\t\tif (!primaryBackend) {\n\t\t\treturn this._availableProfiles || [];\n\t\t}\n\t\tconst platform = await this.getPlatformKey();\n\t\tthis._defaultProfileName = this._configurationService.getValue(`${TerminalSettingPrefix.DefaultProfile}${platform}`) ?? undefined;\n\t\treturn primaryBackend.getProfiles(this._configurationService.getValue(`${TerminalSettingPrefix.Profiles}${platform}`), this._defaultProfileName, includeDetectedProfiles);\n\t}\n\n\tprivate _updateWebContextKey(): void {\n\t\tthis._webExtensionContributedProfileContextKey.set(isWeb && this._contributedProfiles.length > 0);\n\t}\n\n\tprivate async _refreshPlatformConfig(profiles: ITerminalProfile[]) {\n\t\tconst env = await this._remoteAgentService.getEnvironment();\n\t\tregisterTerminalDefaultProfileConfiguration({ os: env?.os || OS, profiles }, this._contributedProfiles);\n\t\trefreshTerminalActions(profiles);\n\t}\n\n\tasync getPlatformKey(): Promise<string> {\n\t\tconst env = await this._remoteAgentService.getEnvironment();\n\t\tif (env) {\n\t\t\treturn env.os === OperatingSystem.Windows ? 'windows' : (env.os === OperatingSystem.Macintosh ? 'osx' : 'linux');\n\t\t}\n\t\treturn isWindows ? 'windows' : (isMacintosh ? 'osx' : 'linux');\n\t}\n\n\tregisterTerminalProfileProvider(extensionIdentifier: string, id: string, profileProvider: ITerminalProfileProvider): IDisposable {\n\t\tlet extMap = this._profileProviders.get(extensionIdentifier);\n\t\tif (!extMap) {\n\t\t\textMap = new Map();\n\t\t\tthis._profileProviders.set(extensionIdentifier, extMap);\n\t\t}\n\t\textMap.set(id, profileProvider);\n\t\treturn toDisposable(() => this._profileProviders.delete(id));\n\t}\n\n\tasync registerContributedProfile(args: IRegisterContributedProfileArgs): Promise<void> {\n\t\tconst platformKey = await this.getPlatformKey();\n\t\tconst profilesConfig = await this._configurationService.getValue(`${TerminalSettingPrefix.Profiles}${platformKey}`);\n\t\tif (typeof profilesConfig === 'object') {\n\t\t\tconst newProfile: IExtensionTerminalProfile = {\n\t\t\t\textensionIdentifier: args.extensionIdentifier,\n\t\t\t\ticon: args.options.icon,\n\t\t\t\tid: args.id,\n\t\t\t\ttitle: args.title,\n\t\t\t\tcolor: args.options.color\n\t\t\t};\n\n\t\t\t(profilesConfig as { [key: string]: ITerminalProfileObject })[args.title] = newProfile;\n\t\t}\n\t\tawait this._configurationService.updateValue(`${TerminalSettingPrefix.Profiles}${platformKey}`, profilesConfig, ConfigurationTarget.USER);\n\t\treturn;\n\t}\n\n\tasync getContributedDefaultProfile(shellLaunchConfig: IShellLaunchConfig): Promise<IExtensionTerminalProfile | undefined> {\n\t\t// prevents recursion with the MainThreadTerminalService call to create terminal\n\t\t// and defers to the provided launch config when an executable is provided\n\t\tif (shellLaunchConfig && !shellLaunchConfig.extHostTerminalId && !('executable' in shellLaunchConfig)) {\n\t\t\tconst key = await this.getPlatformKey();\n\t\t\tconst defaultProfileName = this._configurationService.getValue(`${TerminalSettingPrefix.DefaultProfile}${key}`);\n\t\t\tconst contributedDefaultProfile = this.contributedProfiles.find(p => p.title === defaultProfileName);\n\t\t\treturn contributedDefaultProfile;\n\t\t}\n\t\treturn undefined;\n\t}\n}\n\nfunction profilesEqual(one: ITerminalProfile, other: ITerminalProfile) {\n\treturn one.profileName === other.profileName &&\n\t\tterminalProfileArgsMatch(one.args, other.args) &&\n\t\tone.color === other.color &&\n\t\tterminalIconsEqual(one.icon, other.icon) &&\n\t\tone.isAutoDetected === other.isAutoDetected &&\n\t\tone.isDefault === other.isDefault &&\n\t\tone.overrideName === other.overrideName &&\n\t\tone.path === other.path;\n}\n\nfunction contributedProfilesEqual(one: IExtensionTerminalProfile, other: IExtensionTerminalProfile) {\n\treturn one.extensionIdentifier === other.extensionIdentifier &&\n\t\tone.color === other.color &&\n\t\tone.icon === other.icon &&\n\t\tone.id === other.id &&\n\t\tone.title === other.title;\n}\n"]}