{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/browser/terminalContextMenu.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAahG,MAAM,eAAe;QAGpB,YAAY,QAA2B;YACtC,IAAI,CAAC,CAAC,GAAa,QAAQ,CAAC,UAAU,CAAC;QACxC,CAAC;QAED,MAAM;YACL,OAAO;gBACN,IAAI,uCAA8B;gBAClC,UAAU,EAAE,IAAI,CAAC,CAAC;aAClB,CAAC;QACH,CAAC;KACD;IAED,MAAM,2BAA4B,SAAQ,aAAG;QAE5C,gEAAgE;QAC7C,KAAK,CAAC,CAAC,CAAS,MAAe,EAAE,OAAyB;YAC5E,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,YAAY,eAAe,CAAC,EAAE;gBAC/E,qCAAqC;gBACrC,+BAA+B;gBAC/B,MAAM,MAAM,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;gBACxC,OAAO;aACP;YACD,OAAO,KAAK,CAAC,CAAC,CAAS,MAAM,EAAE,OAAO,CAAC,CAAC;QACzC,CAAC;KACD;IAED,SAAgB,IAAI,CAAY,KAAiB,EAAE,gBAA6D,EAAE,IAAW,EAAE,kBAAuB,EAAkB,YAAwB;QAC/L,MAAM,aAAa,GAAG,IAAI,gBAAG,CAAgB,KAAK,CAAC,CAAC;QAEpD,MAAM,OAAO,GAAc,EAAE,CAAC;QAE9B,IAAA,6BAAG,EAA+B,IAAI,EAAE,EAAE,iBAAiB,EAAE,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC;QAE9E,IAAI,YAAY,EAAE;YACjB,OAAO,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC,CAAC;SAC9B;QAED,MAAM,OAAO,GAAsB,gBAAgB,CAAC,CAAC,CAAC,IAAA,YAAG,EAAK,gBAAgB,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,eAAe,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAEtH,kBAAkB,CAAC,eAAe,CAAC;YAClC,YAAY,EAAE,IAAI,2BAA2B,EAAE;YAC/C,SAAS,EAAE,GAAG,EAAE,CAAC,aAAa;YAC9B,UAAU,EAAE,GAAG,EAAE,CAAC,OAAO;YACzB,iBAAiB,EAAE,GAAG,EAAE,CAAC,OAAO;SAChC,CAAC,CAAC;IACJ,CAAC;IAnBD,oBAmBC","file":"terminalContextMenu.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { StandardMouseEvent } from 'vs/base/browser/mouseEvent';\nimport { ActionRunner, IAction } from 'vs/base/common/actions';\nimport { asArray } from 'vs/base/common/arrays';\nimport { MarshalledId } from 'vs/base/common/marshallingIds';\nimport { SingleOrMany } from 'vs/base/common/types';\nimport { createAndFillInContextMenuActions } from 'vs/platform/actions/browser/menuEntryActionViewItem';\nimport { IMenu } from 'vs/platform/actions/common/actions';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { ITerminalInstance } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { ISerializedTerminalInstanceContext } from 'vs/workbench/contrib/terminal/common/terminal';\n\nclass InstanceContext {\n\tprivate _instanceId: number;\n\n\tconstructor(instance: ITerminalInstance) {\n\t\tthis._instanceId = instance.instanceId;\n\t}\n\n\ttoJSON(): ISerializedTerminalInstanceContext {\n\t\treturn {\n\t\t\t$mid: MarshalledId.TerminalContext,\n\t\t\tinstanceId: this._instanceId\n\t\t};\n\t}\n}\n\nclass TerminalContextActionRunner extends ActionRunner {\n\n\t// eslint-disable-next-line @typescript-eslint/naming-convention\n\tprotected override async runAction(action: IAction, context?: InstanceContext): Promise<void> {\n\t\tif (Array.isArray(context) && context.every(e => e instanceof InstanceContext)) {\n\t\t\t// arg1: The (first) focused instance\n\t\t\t// arg2: All selected instances\n\t\t\tawait action.run(context?.[0], context);\n\t\t\treturn;\n\t\t}\n\t\treturn super.runAction(action, context);\n\t}\n}\n\nexport function openContextMenu(event: MouseEvent, contextInstances: SingleOrMany<ITerminalInstance> | undefined, menu: IMenu, contextMenuService: IContextMenuService, extraActions?: IAction[]): void {\n\tconst standardEvent = new StandardMouseEvent(event);\n\n\tconst actions: IAction[] = [];\n\n\tcreateAndFillInContextMenuActions(menu, { shouldForwardArgs: true }, actions);\n\n\tif (extraActions) {\n\t\tactions.push(...extraActions);\n\t}\n\n\tconst context: InstanceContext[] = contextInstances ? asArray(contextInstances).map(e => new InstanceContext(e)) : [];\n\n\tcontextMenuService.showContextMenu({\n\t\tactionRunner: new TerminalContextActionRunner(),\n\t\tgetAnchor: () => standardEvent,\n\t\tgetActions: () => actions,\n\t\tgetActionsContext: () => context,\n\t});\n}\n"]}