{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/browser/terminalExtensions.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAoBhG,SAAgB,IAAI,CAA4D,EAAU,EAAE,IAAuK,EAAE,yBAAyB,GAAG,KAAK;QACrS,4BAA4B,CAAC,QAAQ,CAAC,4BAA4B,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,yBAAyB,EAAsC,CAAC,CAAC;IACjJ,CAAC;IAFD,oBAEC;IAED,IAAiB,0BAA0B,CAI1C;IAJD,WAAiB,0BAA0B;QAC1C,SAAgB,wBAAwB;YACvC,OAAO,4BAA4B,CAAC,QAAQ,CAAC,wBAAwB,EAAE,CAAC;QACzE,CAAC;QAFe,mDAAwB,2BAEvC,CAAA;IACF,CAAC,EAJgB,0BAA0B,0CAA1B,0BAA0B,QAI1C;IAED,MAAM,4BAA4B;iBAEV,aAAQ,GAAG,IAAI,4BAA4B,EAAnC,AAAqC,CAAC;QAIrE;YAFiB,MAAC,GAA4D,EAAE,CAAC;QAGjF,CAAC;QAEM,4BAA4B,CAAC,WAA6C;YAChF,IAAI,CAAC,CAAC,CAAsB,IAAI,CAAC,WAAW,CAAC,CAAC;QAC/C,CAAC;QAEM,wBAAwB;YAC9B,OAAO,IAAI,CAAC,CAAC,CAAsB,KAAK,CAAC,CAAC,CAAC,CAAC;QAC7C,CAAC;;IAGF,IAAW,UAEV;IAFD,WAAW,UAAU;QACpB,8DAAgD,CAAA;IACjD,CAAC,EAFU,UAAU,KAAV,UAAU,QAEpB;IAED,cAAG,CAAM,GAAG,kEAAmC,4BAA4B,CAAC,QAAQ,CAAC,CAAC","file":"terminalExtensions.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BrandedService, IConstructorSignature } from 'vs/platform/instantiation/common/instantiation';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IDetachedTerminalInstance, ITerminalContribution, ITerminalInstance } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { TerminalWidgetManager } from 'vs/workbench/contrib/terminal/browser/widgets/widgetManager';\nimport { ITerminalProcessInfo, ITerminalProcessManager } from 'vs/workbench/contrib/terminal/common/terminal';\n\n/** Constructor compatible with full terminal instances, is assignable to {@link DetachedCompatibleTerminalContributionCtor} */\nexport type TerminalContributionCtor = IConstructorSignature<ITerminalContribution, [ITerminalInstance, ITerminalProcessManager, TerminalWidgetManager]>;\n/** Constructor compatible with detached terminals */\nexport type DetachedCompatibleTerminalContributionCtor = IConstructorSignature<ITerminalContribution, [IDetachedTerminalInstance, ITerminalProcessInfo, TerminalWidgetManager]>;\n\nexport type ITerminalContributionDescription = { readonly id: string } & (\n\t| { readonly canRunInDetachedTerminals: false; readonly ctor: TerminalContributionCtor }\n\t| { readonly canRunInDetachedTerminals: true; readonly ctor: DetachedCompatibleTerminalContributionCtor }\n);\n\nexport function registerTerminalContribution<Services extends BrandedService[]>(id: string, ctor: { new(instance: ITerminalInstance, processManager: ITerminalProcessManager, widgetManager: TerminalWidgetManager, ...services: Services): ITerminalContribution }, canRunInDetachedTerminals?: false): void;\nexport function registerTerminalContribution<Services extends BrandedService[]>(id: string, ctor: { new(instance: ITerminalInstance, processManager: ITerminalProcessInfo, widgetManager: TerminalWidgetManager, ...services: Services): ITerminalContribution }, canRunInDetachedTerminals: true): void;\nexport function registerTerminalContribution<Services extends BrandedService[]>(id: string, ctor: { new(instance: ITerminalInstance, processManager: ITerminalProcessManager, widgetManager: TerminalWidgetManager, ...services: Services): ITerminalContribution }, canRunInDetachedTerminals = false): void {\n\tTerminalContributionRegistry.INSTANCE.registerTerminalContribution({ id, ctor, canRunInDetachedTerminals } as ITerminalContributionDescription);\n}\n\nexport namespace TerminalExtensionsRegistry {\n\texport function getTerminalContributions(): ITerminalContributionDescription[] {\n\t\treturn TerminalContributionRegistry.INSTANCE.getTerminalContributions();\n\t}\n}\n\nclass TerminalContributionRegistry {\n\n\tpublic static readonly INSTANCE = new TerminalContributionRegistry();\n\n\tprivate readonly _terminalContributions: ITerminalContributionDescription[] = [];\n\n\tconstructor() {\n\t}\n\n\tpublic registerTerminalContribution(description: ITerminalContributionDescription): void {\n\t\tthis._terminalContributions.push(description);\n\t}\n\n\tpublic getTerminalContributions(): ITerminalContributionDescription[] {\n\t\treturn this._terminalContributions.slice(0);\n\t}\n}\n\nconst enum Extensions {\n\tTerminalContributions = 'terminal.contributions'\n}\n\nRegistry.add(Extensions.TerminalContributions, TerminalContributionRegistry.INSTANCE);\n"]}