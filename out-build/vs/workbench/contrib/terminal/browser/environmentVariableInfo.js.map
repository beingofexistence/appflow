{"version":3,"sources":["vs/workbench/contrib/terminal/browser/environmentVariableInfo.ts"],"names":[],"mappings":"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","file":"environmentVariableInfo.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IEnvironmentVariableInfo } from 'vs/workbench/contrib/terminal/common/environmentVariable';\nimport { ITerminalStatus, ITerminalStatusHoverAction, TerminalCommandId } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { ITerminalService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { localize } from 'vs/nls';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { EnvironmentVariableScope, IExtensionOwnedEnvironmentVariableMutator, IMergedEnvironmentVariableCollection, IMergedEnvironmentVariableCollectionDiff } from 'vs/platform/terminal/common/environmentVariable';\nimport { TerminalStatus } from 'vs/workbench/contrib/terminal/browser/terminalStatusList';\nimport Severity from 'vs/base/common/severity';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\n\nexport class EnvironmentVariableInfoStale implements IEnvironmentVariableInfo {\n\treadonly requiresAction = true;\n\n\tconstructor(\n\t\tprivate readonly _diff: IMergedEnvironmentVariableCollectionDiff,\n\t\tprivate readonly _terminalId: number,\n\t\tprivate readonly _collection: IMergedEnvironmentVariableCollection,\n\t\t@ITerminalService private readonly _terminalService: ITerminalService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService\n\t) {\n\t}\n\n\tprivate _getInfo(scope: EnvironmentVariableScope | undefined): string {\n\t\tconst extSet: Set<string> = new Set();\n\t\taddExtensionIdentifiers(extSet, this._diff.added.values());\n\t\taddExtensionIdentifiers(extSet, this._diff.removed.values());\n\t\taddExtensionIdentifiers(extSet, this._diff.changed.values());\n\n\t\tlet message = localize('extensionEnvironmentContributionInfoStale', \"The following extensions want to relaunch the terminal to contribute to its environment:\");\n\t\tmessage += getMergedDescription(this._collection, scope, this._extensionService, extSet);\n\t\treturn message;\n\t}\n\n\tprivate _getActions(): ITerminalStatusHoverAction[] {\n\t\treturn [{\n\t\t\tlabel: localize('relaunchTerminalLabel', \"Relaunch terminal\"),\n\t\t\trun: () => this._terminalService.getInstanceFromId(this._terminalId)?.relaunch(),\n\t\t\tcommandId: TerminalCommandId.Relaunch\n\t\t}];\n\t}\n\n\tgetStatus(scope: EnvironmentVariableScope | undefined): ITerminalStatus {\n\t\treturn {\n\t\t\tid: TerminalStatus.RelaunchNeeded,\n\t\t\tseverity: Severity.Warning,\n\t\t\ticon: Codicon.warning,\n\t\t\ttooltip: this._getInfo(scope),\n\t\t\thoverActions: this._getActions()\n\t\t};\n\t}\n}\n\nexport class EnvironmentVariableInfoChangesActive implements IEnvironmentVariableInfo {\n\treadonly requiresAction = false;\n\n\tconstructor(\n\t\tprivate readonly _collection: IMergedEnvironmentVariableCollection,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService\n\t) {\n\t}\n\n\tprivate _getInfo(scope: EnvironmentVariableScope | undefined): string {\n\t\tconst extSet: Set<string> = new Set();\n\t\taddExtensionIdentifiers(extSet, this._collection.getVariableMap(scope).values());\n\n\t\tlet message = localize('extensionEnvironmentContributionInfoActive', \"The following extensions have contributed to this terminal's environment:\");\n\t\tmessage += getMergedDescription(this._collection, scope, this._extensionService, extSet);\n\t\treturn message;\n\t}\n\n\tprivate _getActions(scope: EnvironmentVariableScope | undefined): ITerminalStatusHoverAction[] {\n\t\treturn [{\n\t\t\tlabel: localize('showEnvironmentContributions', \"Show environment contributions\"),\n\t\t\trun: () => this._commandService.executeCommand(TerminalCommandId.ShowEnvironmentContributions, scope),\n\t\t\tcommandId: TerminalCommandId.ShowEnvironmentContributions\n\t\t}];\n\t}\n\n\tgetStatus(scope: EnvironmentVariableScope | undefined): ITerminalStatus {\n\t\treturn {\n\t\t\tid: TerminalStatus.EnvironmentVariableInfoChangesActive,\n\t\t\tseverity: Severity.Info,\n\t\t\ttooltip: this._getInfo(scope),\n\t\t\thoverActions: this._getActions(scope)\n\t\t};\n\t}\n}\n\nfunction getMergedDescription(collection: IMergedEnvironmentVariableCollection, scope: EnvironmentVariableScope | undefined, extensionService: IExtensionService, extSet: Set<string>): string {\n\tconst message = ['\\n'];\n\tconst globalDescriptions = collection.getDescriptionMap(undefined);\n\tconst workspaceDescriptions = collection.getDescriptionMap(scope);\n\tfor (const ext of extSet) {\n\t\tconst globalDescription = globalDescriptions.get(ext);\n\t\tif (globalDescription) {\n\t\t\tmessage.push(`\\n- \\`${getExtensionName(ext, extensionService)}\\``);\n\t\t\tmessage.push(`: ${globalDescription}`);\n\t\t}\n\t\tconst workspaceDescription = workspaceDescriptions.get(ext);\n\t\tif (workspaceDescription) {\n\t\t\t// Only show '(workspace)' suffix if there is already a description for the extension.\n\t\t\tconst workspaceSuffix = globalDescription ? ` (${localize('ScopedEnvironmentContributionInfo', 'workspace')})` : '';\n\t\t\tmessage.push(`\\n- \\`${getExtensionName(ext, extensionService)}${workspaceSuffix}\\``);\n\t\t\tmessage.push(`: ${workspaceDescription}`);\n\t\t}\n\t\tif (!globalDescription && !workspaceDescription) {\n\t\t\tmessage.push(`\\n- \\`${getExtensionName(ext, extensionService)}\\``);\n\t\t}\n\t}\n\treturn message.join('');\n}\n\nfunction addExtensionIdentifiers(extSet: Set<string>, diff: IterableIterator<IExtensionOwnedEnvironmentVariableMutator[]>): void {\n\tfor (const mutators of diff) {\n\t\tfor (const mutator of mutators) {\n\t\t\textSet.add(mutator.extensionIdentifier);\n\t\t}\n\t}\n}\n\nfunction getExtensionName(id: string, extensionService: IExtensionService): string {\n\treturn extensionService.extensions.find(e => e.id === id)?.displayName || id;\n}\n"]}