{"version":3,"sources":["vs/workbench/contrib/terminal/browser/terminalProcessManager.ts"],"names":[],"mappings":"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","file":"terminalProcessManager.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, dispose, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport { IProcessEnvironment, isMacintosh, isWindows, OperatingSystem, OS } from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { formatMessageForTerminal } from 'vs/platform/terminal/common/terminalStrings';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { getRemoteAuthority } from 'vs/platform/remote/common/remoteHosts';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { ISerializedCommandDetectionCapability, TerminalCapability } from 'vs/platform/terminal/common/capabilities/capabilities';\nimport { NaiveCwdDetectionCapability } from 'vs/platform/terminal/common/capabilities/naiveCwdDetectionCapability';\nimport { TerminalCapabilityStore } from 'vs/platform/terminal/common/capabilities/terminalCapabilityStore';\nimport { FlowControlConstants, IProcessDataEvent, IProcessProperty, IProcessPropertyMap, IProcessReadyEvent, IReconnectionProperties, IShellLaunchConfig, ITerminalBackend, ITerminalChildProcess, ITerminalDimensions, ITerminalEnvironment, ITerminalLaunchError, ITerminalLogService, ITerminalProcessOptions, ProcessPropertyType, TerminalSettingId } from 'vs/platform/terminal/common/terminal';\nimport { TerminalRecorder } from 'vs/platform/terminal/common/terminalRecorder';\nimport { IWorkspaceContextService, IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { EnvironmentVariableInfoChangesActive, EnvironmentVariableInfoStale } from 'vs/workbench/contrib/terminal/browser/environmentVariableInfo';\nimport { ITerminalInstanceService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { IEnvironmentVariableInfo, IEnvironmentVariableService } from 'vs/workbench/contrib/terminal/common/environmentVariable';\nimport { MergedEnvironmentVariableCollection } from 'vs/platform/terminal/common/environmentVariableCollection';\nimport { serializeEnvironmentVariableCollections } from 'vs/platform/terminal/common/environmentVariableShared';\nimport { IBeforeProcessDataEvent, ITerminalConfigHelper, ITerminalProcessManager, ITerminalProfileResolverService, ProcessState } from 'vs/workbench/contrib/terminal/common/terminal';\nimport * as terminalEnvironment from 'vs/workbench/contrib/terminal/common/terminalEnvironment';\nimport { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IHistoryService } from 'vs/workbench/services/history/common/history';\nimport { IPathService } from 'vs/workbench/services/path/common/pathService';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { TaskSettingId } from 'vs/workbench/contrib/tasks/common/tasks';\nimport Severity from 'vs/base/common/severity';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IEnvironmentVariableCollection, IMergedEnvironmentVariableCollection } from 'vs/platform/terminal/common/environmentVariable';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { runWhenIdle } from 'vs/base/common/async';\n\nconst enum ProcessConstants {\n\t/**\n\t * The amount of time to consider terminal errors to be related to the launch.\n\t */\n\tErrorLaunchThresholdDuration = 500,\n\t/**\n\t * The minimum amount of time between latency requests.\n\t */\n\tLatencyMeasuringInterval = 1000,\n}\n\nconst enum ProcessType {\n\tProcess,\n\tPsuedoTerminal\n}\n\n/**\n * Holds all state related to the creation and management of terminal processes.\n *\n * Internal definitions:\n * - Process: The process launched with the terminalProcess.ts file, or the pty as a whole\n * - Pty Process: The pseudoterminal parent process (or the conpty/winpty agent process)\n * - Shell Process: The pseudoterminal child process (ie. the shell)\n */\nexport class TerminalProcessManager extends Disposable implements ITerminalProcessManager {\n\tprocessState: ProcessState = ProcessState.Uninitialized;\n\tptyProcessReady: Promise<void>;\n\tshellProcessId: number | undefined;\n\treadonly remoteAuthority: string | undefined;\n\tos: OperatingSystem | undefined;\n\tuserHome: string | undefined;\n\tenvironmentVariableInfo: IEnvironmentVariableInfo | undefined;\n\tbackend: ITerminalBackend | undefined;\n\treadonly capabilities = new TerminalCapabilityStore();\n\treadonly shellIntegrationNonce: string;\n\n\tprivate _isDisposed: boolean = false;\n\tprivate _process: ITerminalChildProcess | null = null;\n\tprivate _processType: ProcessType = ProcessType.Process;\n\tprivate _preLaunchInputQueue: string[] = [];\n\tprivate _initialCwd: string | undefined;\n\tprivate _extEnvironmentVariableCollection: IMergedEnvironmentVariableCollection | undefined;\n\tprivate _ackDataBufferer: AckDataBufferer;\n\tprivate _hasWrittenData: boolean = false;\n\tprivate _hasChildProcesses: boolean = false;\n\tprivate _ptyResponsiveListener: IDisposable | undefined;\n\tprivate _ptyListenersAttached: boolean = false;\n\tprivate _dataFilter: SeamlessRelaunchDataFilter;\n\tprivate _processListeners?: IDisposable[];\n\tprivate _isDisconnected: boolean = false;\n\n\tprivate _shellLaunchConfig?: IShellLaunchConfig;\n\tprivate _dimensions: ITerminalDimensions = { cols: 0, rows: 0 };\n\n\tprivate readonly _onPtyDisconnect = this._register(new Emitter<void>());\n\treadonly onPtyDisconnect = this._onPtyDisconnect.event;\n\tprivate readonly _onPtyReconnect = this._register(new Emitter<void>());\n\treadonly onPtyReconnect = this._onPtyReconnect.event;\n\n\tprivate readonly _onProcessReady = this._register(new Emitter<IProcessReadyEvent>());\n\treadonly onProcessReady = this._onProcessReady.event;\n\tprivate readonly _onProcessStateChange = this._register(new Emitter<void>());\n\treadonly onProcessStateChange = this._onProcessStateChange.event;\n\tprivate readonly _onBeforeProcessData = this._register(new Emitter<IBeforeProcessDataEvent>());\n\treadonly onBeforeProcessData = this._onBeforeProcessData.event;\n\tprivate readonly _onProcessData = this._register(new Emitter<IProcessDataEvent>());\n\treadonly onProcessData = this._onProcessData.event;\n\tprivate readonly _onProcessReplayComplete = this._register(new Emitter<void>());\n\treadonly onProcessReplayComplete = this._onProcessReplayComplete.event;\n\tprivate readonly _onDidChangeProperty = this._register(new Emitter<IProcessProperty<any>>());\n\treadonly onDidChangeProperty = this._onDidChangeProperty.event;\n\tprivate readonly _onEnvironmentVariableInfoChange = this._register(new Emitter<IEnvironmentVariableInfo>());\n\treadonly onEnvironmentVariableInfoChanged = this._onEnvironmentVariableInfoChange.event;\n\tprivate readonly _onProcessExit = this._register(new Emitter<number | undefined>());\n\treadonly onProcessExit = this._onProcessExit.event;\n\tprivate readonly _onRestoreCommands = this._register(new Emitter<ISerializedCommandDetectionCapability>());\n\treadonly onRestoreCommands = this._onRestoreCommands.event;\n\tprivate _cwdWorkspaceFolder: IWorkspaceFolder | undefined;\n\n\tget persistentProcessId(): number | undefined { return this._process?.id; }\n\tget shouldPersist(): boolean { return !!this.reconnectionProperties || (this._process ? this._process.shouldPersist : false); }\n\tget hasWrittenData(): boolean { return this._hasWrittenData; }\n\tget hasChildProcesses(): boolean { return this._hasChildProcesses; }\n\tget reconnectionProperties(): IReconnectionProperties | undefined { return this._shellLaunchConfig?.attachPersistentProcess?.reconnectionProperties || this._shellLaunchConfig?.reconnectionProperties || undefined; }\n\tget extEnvironmentVariableCollection(): IMergedEnvironmentVariableCollection | undefined { return this._extEnvironmentVariableCollection; }\n\n\tconstructor(\n\t\tprivate readonly _instanceId: number,\n\t\tprivate readonly _configHelper: ITerminalConfigHelper,\n\t\tcwd: string | URI | undefined,\n\t\tenvironmentVariableCollections: ReadonlyMap<string, IEnvironmentVariableCollection> | undefined,\n\t\tshellIntegrationNonce: string | undefined,\n\t\t@IHistoryService private readonly _historyService: IHistoryService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ITerminalLogService private readonly _logService: ITerminalLogService,\n\t\t@IWorkspaceContextService private readonly _workspaceContextService: IWorkspaceContextService,\n\t\t@IConfigurationResolverService private readonly _configurationResolverService: IConfigurationResolverService,\n\t\t@IWorkbenchEnvironmentService private readonly _workbenchEnvironmentService: IWorkbenchEnvironmentService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t\t@IRemoteAgentService private readonly _remoteAgentService: IRemoteAgentService,\n\t\t@IPathService private readonly _pathService: IPathService,\n\t\t@IEnvironmentVariableService private readonly _environmentVariableService: IEnvironmentVariableService,\n\t\t@ITerminalProfileResolverService private readonly _terminalProfileResolverService: ITerminalProfileResolverService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ITerminalInstanceService private readonly _terminalInstanceService: ITerminalInstanceService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@INotificationService private readonly _notificationService: INotificationService\n\t) {\n\t\tsuper();\n\t\tthis._cwdWorkspaceFolder = terminalEnvironment.getWorkspaceForTerminal(cwd, this._workspaceContextService, this._historyService);\n\t\tthis.ptyProcessReady = this._createPtyProcessReadyPromise();\n\t\tthis._ackDataBufferer = new AckDataBufferer(e => this._process?.acknowledgeDataEvent(e));\n\t\tthis._dataFilter = this._instantiationService.createInstance(SeamlessRelaunchDataFilter);\n\t\tthis._dataFilter.onProcessData(ev => {\n\t\t\tconst data = (typeof ev === 'string' ? ev : ev.data);\n\t\t\tconst beforeProcessDataEvent: IBeforeProcessDataEvent = { data };\n\t\t\tthis._onBeforeProcessData.fire(beforeProcessDataEvent);\n\t\t\tif (beforeProcessDataEvent.data && beforeProcessDataEvent.data.length > 0) {\n\t\t\t\t// This event is used by the caller so the object must be reused\n\t\t\t\tif (typeof ev !== 'string') {\n\t\t\t\t\tev.data = beforeProcessDataEvent.data;\n\t\t\t\t}\n\t\t\t\tthis._onProcessData.fire(typeof ev !== 'string' ? ev : { data: beforeProcessDataEvent.data, trackCommit: false });\n\t\t\t}\n\t\t});\n\n\t\tif (cwd && typeof cwd === 'object') {\n\t\t\tthis.remoteAuthority = getRemoteAuthority(cwd);\n\t\t} else {\n\t\t\tthis.remoteAuthority = this._workbenchEnvironmentService.remoteAuthority;\n\t\t}\n\n\t\tif (environmentVariableCollections) {\n\t\t\tthis._extEnvironmentVariableCollection = new MergedEnvironmentVariableCollection(environmentVariableCollections);\n\t\t\tthis._register(this._environmentVariableService.onDidChangeCollections(newCollection => this._onEnvironmentVariableCollectionChange(newCollection)));\n\t\t\tthis.environmentVariableInfo = this._instantiationService.createInstance(EnvironmentVariableInfoChangesActive, this._extEnvironmentVariableCollection);\n\t\t\tthis._onEnvironmentVariableInfoChange.fire(this.environmentVariableInfo);\n\t\t}\n\n\t\tthis.shellIntegrationNonce = shellIntegrationNonce ?? generateUuid();\n\t}\n\n\tasync freePortKillProcess(port: string): Promise<void> {\n\t\ttry {\n\t\t\tif (this._process?.freePortKillProcess) {\n\t\t\t\tawait this._process?.freePortKillProcess(port);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis._notificationService.notify({ message: localize('killportfailure', 'Could not kill process listening on port {0}, command exited with error {1}', port, e), severity: Severity.Warning });\n\t\t}\n\t}\n\n\toverride dispose(immediate: boolean = false): void {\n\t\tthis._isDisposed = true;\n\t\tif (this._process) {\n\t\t\t// If the process was still connected this dispose came from\n\t\t\t// within VS Code, not the process, so mark the process as\n\t\t\t// killed by the user.\n\t\t\tthis._setProcessState(ProcessState.KilledByUser);\n\t\t\tthis._process.shutdown(immediate);\n\t\t\tthis._process = null;\n\t\t}\n\t\tsuper.dispose();\n\t}\n\n\tprivate _createPtyProcessReadyPromise(): Promise<void> {\n\t\treturn new Promise<void>(c => {\n\t\t\tconst listener = this.onProcessReady(() => {\n\t\t\t\tthis._logService.debug(`Terminal process ready (shellProcessId: ${this.shellProcessId})`);\n\t\t\t\tlistener.dispose();\n\t\t\t\tc(undefined);\n\t\t\t});\n\t\t});\n\t}\n\n\tasync detachFromProcess(forcePersist?: boolean): Promise<void> {\n\t\tawait this._process?.detach?.(forcePersist);\n\t\tthis._process = null;\n\t}\n\n\tasync createProcess(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tcols: number,\n\t\trows: number,\n\t\treset: boolean = true\n\t): Promise<ITerminalLaunchError | { injectedArgs: string[] } | undefined> {\n\t\tthis._shellLaunchConfig = shellLaunchConfig;\n\t\tthis._dimensions.cols = cols;\n\t\tthis._dimensions.rows = rows;\n\n\t\tlet newProcess: ITerminalChildProcess | undefined;\n\n\t\tif (shellLaunchConfig.customPtyImplementation) {\n\t\t\tthis._processType = ProcessType.PsuedoTerminal;\n\t\t\tnewProcess = shellLaunchConfig.customPtyImplementation(this._instanceId, cols, rows);\n\t\t} else {\n\t\t\tconst backend = await this._terminalInstanceService.getBackend(this.remoteAuthority);\n\t\t\tif (!backend) {\n\t\t\t\tthrow new Error(`No terminal backend registered for remote authority '${this.remoteAuthority}'`);\n\t\t\t}\n\t\t\tthis.backend = backend;\n\n\t\t\t// Create variable resolver\n\t\t\tconst variableResolver = terminalEnvironment.createVariableResolver(this._cwdWorkspaceFolder, await this._terminalProfileResolverService.getEnvironment(this.remoteAuthority), this._configurationResolverService);\n\n\t\t\t// resolvedUserHome is needed here as remote resolvers can launch local terminals before\n\t\t\t// they're connected to the remote.\n\t\t\tthis.userHome = this._pathService.resolvedUserHome?.fsPath;\n\t\t\tthis.os = OS;\n\t\t\tif (!!this.remoteAuthority) {\n\n\t\t\t\tconst userHomeUri = await this._pathService.userHome();\n\t\t\t\tthis.userHome = userHomeUri.path;\n\t\t\t\tconst remoteEnv = await this._remoteAgentService.getEnvironment();\n\t\t\t\tif (!remoteEnv) {\n\t\t\t\t\tthrow new Error(`Failed to get remote environment for remote authority \"${this.remoteAuthority}\"`);\n\t\t\t\t}\n\t\t\t\tthis.userHome = remoteEnv.userHome.path;\n\t\t\t\tthis.os = remoteEnv.os;\n\n\t\t\t\t// this is a copy of what the merged environment collection is on the remote side\n\t\t\t\tconst env = await this._resolveEnvironment(backend, variableResolver, shellLaunchConfig);\n\t\t\t\tconst shouldPersist = ((this._configurationService.getValue(TaskSettingId.Reconnection) && shellLaunchConfig.reconnectionProperties) || !shellLaunchConfig.isFeatureTerminal) && this._configHelper.config.enablePersistentSessions && !shellLaunchConfig.isTransient;\n\t\t\t\tif (shellLaunchConfig.attachPersistentProcess) {\n\t\t\t\t\tconst result = await backend.attachToProcess(shellLaunchConfig.attachPersistentProcess.id);\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\tnewProcess = result;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Warn and just create a new terminal if attach failed for some reason\n\t\t\t\t\t\tthis._logService.warn(`Attach to process failed for terminal`, shellLaunchConfig.attachPersistentProcess);\n\t\t\t\t\t\tshellLaunchConfig.attachPersistentProcess = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!newProcess) {\n\t\t\t\t\tawait this._terminalProfileResolverService.resolveShellLaunchConfig(shellLaunchConfig, {\n\t\t\t\t\t\tremoteAuthority: this.remoteAuthority,\n\t\t\t\t\t\tos: this.os\n\t\t\t\t\t});\n\t\t\t\t\tconst options: ITerminalProcessOptions = {\n\t\t\t\t\t\tshellIntegration: {\n\t\t\t\t\t\t\tenabled: this._configurationService.getValue(TerminalSettingId.ShellIntegrationEnabled),\n\t\t\t\t\t\t\tsuggestEnabled: this._configurationService.getValue(TerminalSettingId.ShellIntegrationSuggestEnabled),\n\t\t\t\t\t\t\tnonce: this.shellIntegrationNonce\n\t\t\t\t\t\t},\n\t\t\t\t\t\twindowsEnableConpty: this._configHelper.config.windowsEnableConpty,\n\t\t\t\t\t\tenvironmentVariableCollections: this._extEnvironmentVariableCollection?.collections ? serializeEnvironmentVariableCollections(this._extEnvironmentVariableCollection.collections) : undefined,\n\t\t\t\t\t\tworkspaceFolder: this._cwdWorkspaceFolder,\n\t\t\t\t\t};\n\t\t\t\t\ttry {\n\t\t\t\t\t\tnewProcess = await backend.createProcess(\n\t\t\t\t\t\t\tshellLaunchConfig,\n\t\t\t\t\t\t\t'', // TODO: Fix cwd\n\t\t\t\t\t\t\tcols,\n\t\t\t\t\t\t\trows,\n\t\t\t\t\t\t\tthis._configHelper.config.unicodeVersion,\n\t\t\t\t\t\t\tenv, // TODO:\n\t\t\t\t\t\t\toptions,\n\t\t\t\t\t\t\tshouldPersist\n\t\t\t\t\t\t);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tif (e?.message === 'Could not fetch remote environment') {\n\t\t\t\t\t\t\tthis._logService.trace(`Could not fetch remote environment, silently failing`);\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!this._isDisposed) {\n\t\t\t\t\tthis._setupPtyHostListeners(backend);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (shellLaunchConfig.attachPersistentProcess) {\n\t\t\t\t\tconst result = shellLaunchConfig.attachPersistentProcess.findRevivedId ? await backend.attachToRevivedProcess(shellLaunchConfig.attachPersistentProcess.id) : await backend.attachToProcess(shellLaunchConfig.attachPersistentProcess.id);\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\tnewProcess = result;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Warn and just create a new terminal if attach failed for some reason\n\t\t\t\t\t\tthis._logService.warn(`Attach to process failed for terminal`, shellLaunchConfig.attachPersistentProcess);\n\t\t\t\t\t\tshellLaunchConfig.attachPersistentProcess = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!newProcess) {\n\t\t\t\t\tnewProcess = await this._launchLocalProcess(backend, shellLaunchConfig, cols, rows, this.userHome, variableResolver);\n\t\t\t\t}\n\t\t\t\tif (!this._isDisposed) {\n\t\t\t\t\tthis._setupPtyHostListeners(backend);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If the process was disposed during its creation, shut it down and return failure\n\t\tif (this._isDisposed) {\n\t\t\tnewProcess.shutdown(false);\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis._process = newProcess;\n\t\tthis._setProcessState(ProcessState.Launching);\n\n\t\t// Add any capabilities inherent to the backend\n\t\tif (this.os === OperatingSystem.Linux || this.os === OperatingSystem.Macintosh) {\n\t\t\tthis.capabilities.add(TerminalCapability.NaiveCwdDetection, new NaiveCwdDetectionCapability(this._process));\n\t\t}\n\n\t\tthis._dataFilter.newProcess(this._process, reset);\n\n\t\tif (this._processListeners) {\n\t\t\tdispose(this._processListeners);\n\t\t}\n\t\tthis._processListeners = [\n\t\t\tnewProcess.onProcessReady((e: IProcessReadyEvent) => {\n\t\t\t\tthis.shellProcessId = e.pid;\n\t\t\t\tthis._initialCwd = e.cwd;\n\t\t\t\tthis._onDidChangeProperty.fire({ type: ProcessPropertyType.InitialCwd, value: this._initialCwd });\n\t\t\t\tthis._onProcessReady.fire(e);\n\n\t\t\t\tif (this._preLaunchInputQueue.length > 0 && this._process) {\n\t\t\t\t\t// Send any queued data that's waiting\n\t\t\t\t\tnewProcess!.input(this._preLaunchInputQueue.join(''));\n\t\t\t\t\tthis._preLaunchInputQueue.length = 0;\n\t\t\t\t}\n\t\t\t}),\n\t\t\tnewProcess.onProcessExit(exitCode => this._onExit(exitCode)),\n\t\t\tnewProcess.onDidChangeProperty(({ type, value }) => {\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase ProcessPropertyType.HasChildProcesses:\n\t\t\t\t\t\tthis._hasChildProcesses = value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase ProcessPropertyType.FailedShellIntegrationActivation:\n\t\t\t\t\t\tthis._telemetryService?.publicLog2<{}, { owner: 'meganrogge'; comment: 'Indicates shell integration was not activated because of custom args' }>('terminal/shellIntegrationActivationFailureCustomArgs');\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tthis._onDidChangeProperty.fire({ type, value });\n\t\t\t})\n\t\t];\n\t\tif (newProcess.onProcessReplayComplete) {\n\t\t\tthis._processListeners.push(newProcess.onProcessReplayComplete(() => this._onProcessReplayComplete.fire()));\n\t\t}\n\t\tif (newProcess.onRestoreCommands) {\n\t\t\tthis._processListeners.push(newProcess.onRestoreCommands(e => this._onRestoreCommands.fire(e)));\n\t\t}\n\t\tsetTimeout(() => {\n\t\t\tif (this.processState === ProcessState.Launching) {\n\t\t\t\tthis._setProcessState(ProcessState.Running);\n\t\t\t}\n\t\t}, ProcessConstants.ErrorLaunchThresholdDuration);\n\n\t\tconst result = await newProcess.start();\n\t\tif (result) {\n\t\t\t// Error\n\t\t\treturn result;\n\t\t}\n\n\t\t// Report the latency to the pty host when idle\n\t\trunWhenIdle(() => {\n\t\t\tthis.backend?.getLatency().then(measurements => {\n\t\t\t\tthis._logService.info(`Latency measurements for ${this.remoteAuthority ?? 'local'} backend\\n${measurements.map(e => `${e.label}: ${e.latency.toFixed(2)}ms`).join('\\n')}`);\n\t\t\t});\n\t\t});\n\n\t\treturn undefined;\n\t}\n\n\tasync relaunch(shellLaunchConfig: IShellLaunchConfig, cols: number, rows: number, reset: boolean): Promise<ITerminalLaunchError | { injectedArgs: string[] } | undefined> {\n\t\tthis.ptyProcessReady = this._createPtyProcessReadyPromise();\n\t\tthis._logService.trace(`Relaunching terminal instance ${this._instanceId}`);\n\n\t\t// Fire reconnect if needed to ensure the terminal is usable again\n\t\tif (this._isDisconnected) {\n\t\t\tthis._isDisconnected = false;\n\t\t\tthis._onPtyReconnect.fire();\n\t\t}\n\n\t\t// Clear data written flag to re-enable seamless relaunch if this relaunch was manually\n\t\t// triggered\n\t\tthis._hasWrittenData = false;\n\n\t\treturn this.createProcess(shellLaunchConfig, cols, rows, reset);\n\t}\n\n\t// Fetch any extension environment additions and apply them\n\tprivate async _resolveEnvironment(backend: ITerminalBackend, variableResolver: terminalEnvironment.VariableResolver | undefined, shellLaunchConfig: IShellLaunchConfig): Promise<IProcessEnvironment> {\n\t\tconst workspaceFolder = terminalEnvironment.getWorkspaceForTerminal(shellLaunchConfig.cwd, this._workspaceContextService, this._historyService);\n\t\tconst platformKey = isWindows ? 'windows' : (isMacintosh ? 'osx' : 'linux');\n\t\tconst envFromConfigValue = this._configurationService.getValue<ITerminalEnvironment | undefined>(`terminal.integrated.env.${platformKey}`);\n\t\tthis._configHelper.showRecommendations(shellLaunchConfig);\n\n\t\tlet baseEnv: IProcessEnvironment;\n\t\tif (shellLaunchConfig.useShellEnvironment) {\n\t\t\t// TODO: Avoid as any?\n\t\t\tbaseEnv = await backend.getShellEnvironment() as any;\n\t\t} else {\n\t\t\tbaseEnv = await this._terminalProfileResolverService.getEnvironment(this.remoteAuthority);\n\t\t}\n\t\tconst env = await terminalEnvironment.createTerminalEnvironment(shellLaunchConfig, envFromConfigValue, variableResolver, this._productService.version, this._configHelper.config.detectLocale, baseEnv);\n\t\tif (!this._isDisposed && !shellLaunchConfig.strictEnv && !shellLaunchConfig.hideFromUser) {\n\t\t\tthis._extEnvironmentVariableCollection = this._environmentVariableService.mergedCollection;\n\n\t\t\tthis._register(this._environmentVariableService.onDidChangeCollections(newCollection => this._onEnvironmentVariableCollectionChange(newCollection)));\n\t\t\t// For remote terminals, this is a copy of the mergedEnvironmentCollection created on\n\t\t\t// the remote side. Since the environment collection is synced between the remote and\n\t\t\t// local sides immediately this is a fairly safe way of enabling the env var diffing and\n\t\t\t// info widget. While technically these could differ due to the slight change of a race\n\t\t\t// condition, the chance is minimal plus the impact on the user is also not that great\n\t\t\t// if it happens - it's not worth adding plumbing to sync back the resolved collection.\n\t\t\tawait this._extEnvironmentVariableCollection.applyToProcessEnvironment(env, { workspaceFolder }, variableResolver);\n\t\t\tif (this._extEnvironmentVariableCollection.getVariableMap({ workspaceFolder }).size) {\n\t\t\t\tthis.environmentVariableInfo = this._instantiationService.createInstance(EnvironmentVariableInfoChangesActive, this._extEnvironmentVariableCollection);\n\t\t\t\tthis._onEnvironmentVariableInfoChange.fire(this.environmentVariableInfo);\n\t\t\t}\n\t\t}\n\t\treturn env;\n\t}\n\n\tprivate async _launchLocalProcess(\n\t\tbackend: ITerminalBackend,\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tcols: number,\n\t\trows: number,\n\t\tuserHome: string | undefined,\n\t\tvariableResolver: terminalEnvironment.VariableResolver | undefined\n\t): Promise<ITerminalChildProcess> {\n\t\tawait this._terminalProfileResolverService.resolveShellLaunchConfig(shellLaunchConfig, {\n\t\t\tremoteAuthority: undefined,\n\t\t\tos: OS\n\t\t});\n\t\tconst activeWorkspaceRootUri = this._historyService.getLastActiveWorkspaceRoot(Schemas.file);\n\n\t\tconst initialCwd = await terminalEnvironment.getCwd(\n\t\t\tshellLaunchConfig,\n\t\t\tuserHome,\n\t\t\tvariableResolver,\n\t\t\tactiveWorkspaceRootUri,\n\t\t\tthis._configHelper.config.cwd,\n\t\t\tthis._logService\n\t\t);\n\n\t\tconst env = await this._resolveEnvironment(backend, variableResolver, shellLaunchConfig);\n\n\t\tconst options: ITerminalProcessOptions = {\n\t\t\tshellIntegration: {\n\t\t\t\tenabled: this._configurationService.getValue(TerminalSettingId.ShellIntegrationEnabled),\n\t\t\t\tsuggestEnabled: this._configurationService.getValue(TerminalSettingId.ShellIntegrationSuggestEnabled),\n\t\t\t\tnonce: this.shellIntegrationNonce\n\t\t\t},\n\t\t\twindowsEnableConpty: this._configHelper.config.windowsEnableConpty,\n\t\t\tenvironmentVariableCollections: this._extEnvironmentVariableCollection ? serializeEnvironmentVariableCollections(this._extEnvironmentVariableCollection.collections) : undefined,\n\t\t\tworkspaceFolder: this._cwdWorkspaceFolder,\n\t\t};\n\t\tconst shouldPersist = ((this._configurationService.getValue(TaskSettingId.Reconnection) && shellLaunchConfig.reconnectionProperties) || !shellLaunchConfig.isFeatureTerminal) && this._configHelper.config.enablePersistentSessions && !shellLaunchConfig.isTransient;\n\t\treturn await backend.createProcess(shellLaunchConfig, initialCwd, cols, rows, this._configHelper.config.unicodeVersion, env, options, shouldPersist);\n\t}\n\n\tprivate _setupPtyHostListeners(backend: ITerminalBackend) {\n\t\tif (this._ptyListenersAttached) {\n\t\t\treturn;\n\t\t}\n\t\tthis._ptyListenersAttached = true;\n\n\t\t// Mark the process as disconnected is the pty host is unresponsive, the responsive event\n\t\t// will fire only when the pty host was already unresponsive\n\t\tthis._register(backend.onPtyHostUnresponsive(() => {\n\t\t\tthis._isDisconnected = true;\n\t\t\tthis._onPtyDisconnect.fire();\n\t\t}));\n\t\tthis._ptyResponsiveListener = backend.onPtyHostResponsive(() => {\n\t\t\tthis._isDisconnected = false;\n\t\t\tthis._onPtyReconnect.fire();\n\t\t});\n\t\tthis._register(toDisposable(() => this._ptyResponsiveListener?.dispose()));\n\n\t\t// When the pty host restarts, reconnect is no longer possible so dispose the responsive\n\t\t// listener\n\t\tthis._register(backend.onPtyHostRestart(async () => {\n\t\t\t// When the pty host restarts, reconnect is no longer possible\n\t\t\tif (!this._isDisconnected) {\n\t\t\t\tthis._isDisconnected = true;\n\t\t\t\tthis._onPtyDisconnect.fire();\n\t\t\t}\n\t\t\tthis._ptyResponsiveListener?.dispose();\n\t\t\tthis._ptyResponsiveListener = undefined;\n\t\t\tif (this._shellLaunchConfig) {\n\t\t\t\tif (this._shellLaunchConfig.isFeatureTerminal && !this.reconnectionProperties) {\n\t\t\t\t\t// Indicate the process is exited (and gone forever) only for feature terminals\n\t\t\t\t\t// so they can react to the exit, this is particularly important for tasks so\n\t\t\t\t\t// that it knows that the process is not still active. Note that this is not\n\t\t\t\t\t// done for regular terminals because otherwise the terminal instance would be\n\t\t\t\t\t// disposed.\n\t\t\t\t\tthis._onExit(-1);\n\t\t\t\t} else {\n\t\t\t\t\t// For normal terminals write a message indicating what happened and relaunch\n\t\t\t\t\t// using the previous shellLaunchConfig\n\t\t\t\t\tconst message = localize('ptyHostRelaunch', \"Restarting the terminal because the connection to the shell process was lost...\");\n\t\t\t\t\tthis._onProcessData.fire({ data: formatMessageForTerminal(message, { loudFormatting: true }), trackCommit: false });\n\t\t\t\t\tawait this.relaunch(this._shellLaunchConfig, this._dimensions.cols, this._dimensions.rows, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tasync getBackendOS(): Promise<OperatingSystem> {\n\t\tlet os = OS;\n\t\tif (!!this.remoteAuthority) {\n\t\t\tconst remoteEnv = await this._remoteAgentService.getEnvironment();\n\t\t\tif (!remoteEnv) {\n\t\t\t\tthrow new Error(`Failed to get remote environment for remote authority \"${this.remoteAuthority}\"`);\n\t\t\t}\n\t\t\tos = remoteEnv.os;\n\t\t}\n\t\treturn os;\n\t}\n\n\tsetDimensions(cols: number, rows: number): Promise<void>;\n\tsetDimensions(cols: number, rows: number, sync: false): Promise<void>;\n\tsetDimensions(cols: number, rows: number, sync: true): void;\n\tsetDimensions(cols: number, rows: number, sync?: boolean): Promise<void> | void {\n\t\tif (sync) {\n\t\t\tthis._resize(cols, rows);\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.ptyProcessReady.then(() => this._resize(cols, rows));\n\t}\n\n\tasync setUnicodeVersion(version: '6' | '11'): Promise<void> {\n\t\treturn this._process?.setUnicodeVersion(version);\n\t}\n\n\tprivate _resize(cols: number, rows: number) {\n\t\tif (!this._process) {\n\t\t\treturn;\n\t\t}\n\t\t// The child process could already be terminated\n\t\ttry {\n\t\t\tthis._process!.resize(cols, rows);\n\t\t} catch (error) {\n\t\t\t// We tried to write to a closed pipe / channel.\n\t\t\tif (error.code !== 'EPIPE' && error.code !== 'ERR_IPC_CHANNEL_CLOSED') {\n\t\t\t\tthrow (error);\n\t\t\t}\n\t\t}\n\t\tthis._dimensions.cols = cols;\n\t\tthis._dimensions.rows = rows;\n\t}\n\n\tasync write(data: string): Promise<void> {\n\t\tawait this.ptyProcessReady;\n\t\tthis._dataFilter.disableSeamlessRelaunch();\n\t\tthis._hasWrittenData = true;\n\t\tif (this.shellProcessId || this._processType === ProcessType.PsuedoTerminal) {\n\t\t\tif (this._process) {\n\t\t\t\t// Send data if the pty is ready\n\t\t\t\tthis._process.input(data);\n\t\t\t}\n\t\t} else {\n\t\t\t// If the pty is not ready, queue the data received to send later\n\t\t\tthis._preLaunchInputQueue.push(data);\n\t\t}\n\t}\n\n\tasync processBinary(data: string): Promise<void> {\n\t\tawait this.ptyProcessReady;\n\t\tthis._dataFilter.disableSeamlessRelaunch();\n\t\tthis._hasWrittenData = true;\n\t\tthis._process?.processBinary(data);\n\t}\n\n\tget initialCwd(): string {\n\t\treturn this._initialCwd ?? '';\n\t}\n\n\tasync refreshProperty<T extends ProcessPropertyType>(type: T): Promise<IProcessPropertyMap[T]> {\n\t\tif (!this._process) {\n\t\t\tthrow new Error('Cannot refresh property when process is not set');\n\t\t}\n\t\treturn this._process.refreshProperty(type);\n\t}\n\n\tasync updateProperty<T extends ProcessPropertyType>(type: T, value: IProcessPropertyMap[T]): Promise<void> {\n\t\treturn this._process?.updateProperty(type, value);\n\t}\n\n\tacknowledgeDataEvent(charCount: number): void {\n\t\tthis._ackDataBufferer.ack(charCount);\n\t}\n\n\tprivate _onExit(exitCode: number | undefined): void {\n\t\tthis._process = null;\n\t\t// If the process is marked as launching then mark the process as killed\n\t\t// during launch. This typically means that there is a problem with the\n\t\t// shell and args.\n\t\tif (this.processState === ProcessState.Launching) {\n\t\t\tthis._setProcessState(ProcessState.KilledDuringLaunch);\n\t\t}\n\n\t\t// If TerminalInstance did not know about the process exit then it was\n\t\t// triggered by the process, not on VS Code's side.\n\t\tif (this.processState === ProcessState.Running) {\n\t\t\tthis._setProcessState(ProcessState.KilledByProcess);\n\t\t}\n\n\t\tthis._onProcessExit.fire(exitCode);\n\t}\n\n\tprivate _setProcessState(state: ProcessState) {\n\t\tthis.processState = state;\n\t\tthis._onProcessStateChange.fire();\n\t}\n\n\tprivate _onEnvironmentVariableCollectionChange(newCollection: IMergedEnvironmentVariableCollection): void {\n\t\tconst diff = this._extEnvironmentVariableCollection!.diff(newCollection, { workspaceFolder: this._cwdWorkspaceFolder });\n\t\tif (diff === undefined) {\n\t\t\t// If there are no longer differences, remove the stale info indicator\n\t\t\tif (this.environmentVariableInfo instanceof EnvironmentVariableInfoStale) {\n\t\t\t\tthis.environmentVariableInfo = this._instantiationService.createInstance(EnvironmentVariableInfoChangesActive, this._extEnvironmentVariableCollection!);\n\t\t\t\tthis._onEnvironmentVariableInfoChange.fire(this.environmentVariableInfo);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tthis.environmentVariableInfo = this._instantiationService.createInstance(EnvironmentVariableInfoStale, diff, this._instanceId, newCollection);\n\t\tthis._onEnvironmentVariableInfoChange.fire(this.environmentVariableInfo);\n\t}\n\n\tasync clearBuffer(): Promise<void> {\n\t\tthis._process?.clearBuffer?.();\n\t}\n}\n\nclass AckDataBufferer {\n\tprivate _unsentCharCount: number = 0;\n\n\tconstructor(\n\t\tprivate readonly _callback: (charCount: number) => void\n\t) {\n\t}\n\n\tack(charCount: number) {\n\t\tthis._unsentCharCount += charCount;\n\t\twhile (this._unsentCharCount > FlowControlConstants.CharCountAckSize) {\n\t\t\tthis._unsentCharCount -= FlowControlConstants.CharCountAckSize;\n\t\t\tthis._callback(FlowControlConstants.CharCountAckSize);\n\t\t}\n\t}\n}\n\nconst enum SeamlessRelaunchConstants {\n\t/**\n\t * How long to record data events for new terminals.\n\t */\n\tRecordTerminalDuration = 10000,\n\t/**\n\t * The maximum duration after a relaunch occurs to trigger a swap.\n\t */\n\tSwapWaitMaximumDuration = 3000\n}\n\n/**\n * Filters data events from the process and supports seamlessly restarting swapping out the process\n * with another, delaying the swap in output in order to minimize flickering/clearing of the\n * terminal.\n */\nclass SeamlessRelaunchDataFilter extends Disposable {\n\tprivate _firstRecorder?: TerminalRecorder;\n\tprivate _secondRecorder?: TerminalRecorder;\n\tprivate _firstDisposable?: IDisposable;\n\tprivate _secondDisposable?: IDisposable;\n\tprivate _dataListener?: IDisposable;\n\tprivate _activeProcess?: ITerminalChildProcess;\n\tprivate _disableSeamlessRelaunch: boolean = false;\n\n\tprivate _swapTimeout?: number;\n\n\tprivate readonly _onProcessData = this._register(new Emitter<string | IProcessDataEvent>());\n\tget onProcessData(): Event<string | IProcessDataEvent> { return this._onProcessData.event; }\n\n\tconstructor(\n\t\t@ITerminalLogService private readonly _logService: ITerminalLogService\n\t) {\n\t\tsuper();\n\t}\n\n\tnewProcess(process: ITerminalChildProcess, reset: boolean) {\n\t\t// Stop listening to the old process and trigger delayed shutdown (for hang issue #71966)\n\t\tthis._dataListener?.dispose();\n\t\tthis._activeProcess?.shutdown(false);\n\n\t\tthis._activeProcess = process;\n\n\t\t// Start firing events immediately if:\n\t\t// - there's no recorder, which means it's a new terminal\n\t\t// - this is not a reset, so seamless relaunch isn't necessary\n\t\t// - seamless relaunch is disabled because the terminal has accepted input\n\t\tif (!this._firstRecorder || !reset || this._disableSeamlessRelaunch) {\n\t\t\tthis._firstDisposable?.dispose();\n\t\t\t[this._firstRecorder, this._firstDisposable] = this._createRecorder(process);\n\t\t\tif (this._disableSeamlessRelaunch && reset) {\n\t\t\t\tthis._onProcessData.fire('\\x1bc');\n\t\t\t}\n\t\t\tthis._dataListener = process.onProcessData(e => this._onProcessData.fire(e));\n\t\t\tthis._disableSeamlessRelaunch = false;\n\t\t\treturn;\n\t\t}\n\n\t\t// Trigger a swap if there was a recent relaunch\n\t\tif (this._secondRecorder) {\n\t\t\tthis.triggerSwap();\n\t\t}\n\n\t\tthis._swapTimeout = window.setTimeout(() => this.triggerSwap(), SeamlessRelaunchConstants.SwapWaitMaximumDuration);\n\n\t\t// Pause all outgoing data events\n\t\tthis._dataListener?.dispose();\n\n\t\tthis._firstDisposable?.dispose();\n\t\tconst recorder = this._createRecorder(process);\n\t\t[this._secondRecorder, this._secondDisposable] = recorder;\n\t}\n\n\t/**\n\t * Disables seamless relaunch for the active process\n\t */\n\tdisableSeamlessRelaunch() {\n\t\tthis._disableSeamlessRelaunch = true;\n\t\tthis._stopRecording();\n\t\tthis.triggerSwap();\n\t}\n\n\t/**\n\t * Trigger the swap of the processes if needed (eg. timeout, input)\n\t */\n\ttriggerSwap() {\n\t\t// Clear the swap timeout if it exists\n\t\tif (this._swapTimeout) {\n\t\t\twindow.clearTimeout(this._swapTimeout);\n\t\t\tthis._swapTimeout = undefined;\n\t\t}\n\n\t\t// Do nothing if there's nothing being recorder\n\t\tif (!this._firstRecorder) {\n\t\t\treturn;\n\t\t}\n\t\t// Clear the first recorder if no second process was attached before the swap trigger\n\t\tif (!this._secondRecorder) {\n\t\t\tthis._firstRecorder = undefined;\n\t\t\tthis._firstDisposable?.dispose();\n\t\t\treturn;\n\t\t}\n\n\t\t// Generate data for each recorder\n\t\tconst firstData = this._getDataFromRecorder(this._firstRecorder);\n\t\tconst secondData = this._getDataFromRecorder(this._secondRecorder);\n\n\t\t// Re-write the terminal if the data differs\n\t\tif (firstData === secondData) {\n\t\t\tthis._logService.trace(`Seamless terminal relaunch - identical content`);\n\t\t} else {\n\t\t\tthis._logService.trace(`Seamless terminal relaunch - resetting content`);\n\t\t\t// Fire full reset (RIS) followed by the new data so the update happens in the same frame\n\t\t\tthis._onProcessData.fire({ data: `\\x1bc${secondData}`, trackCommit: false });\n\t\t}\n\n\t\t// Set up the new data listener\n\t\tthis._dataListener?.dispose();\n\t\tthis._dataListener = this._activeProcess!.onProcessData(e => this._onProcessData.fire(e));\n\n\t\t// Replace first recorder with second\n\t\tthis._firstRecorder = this._secondRecorder;\n\t\tthis._firstDisposable?.dispose();\n\t\tthis._firstDisposable = this._secondDisposable;\n\t\tthis._secondRecorder = undefined;\n\t}\n\n\tprivate _stopRecording() {\n\t\t// Continue recording if a swap is coming\n\t\tif (this._swapTimeout) {\n\t\t\treturn;\n\t\t}\n\t\t// Stop recording\n\t\tthis._firstRecorder = undefined;\n\t\tthis._firstDisposable?.dispose();\n\t\tthis._secondRecorder = undefined;\n\t\tthis._secondDisposable?.dispose();\n\t}\n\n\tprivate _createRecorder(process: ITerminalChildProcess): [TerminalRecorder, IDisposable] {\n\t\tconst recorder = new TerminalRecorder(0, 0);\n\t\tconst disposable = process.onProcessData(e => recorder.handleData(typeof e === 'string' ? e : e.data));\n\t\treturn [recorder, disposable];\n\t}\n\n\tprivate _getDataFromRecorder(recorder: TerminalRecorder): string {\n\t\treturn recorder.generateReplayEventSync().events.filter(e => !!e.data).map(e => e.data).join('');\n\t}\n}\n"]}