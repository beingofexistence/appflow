{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/browser/remoteTerminalBackend.ts"],"names":[],"mappings":"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","file":"remoteTerminalBackend.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DeferredPromise } from 'vs/base/common/async';\nimport { Emitter } from 'vs/base/common/event';\nimport { revive } from 'vs/base/common/marshalling';\nimport { PerformanceMark, mark } from 'vs/base/common/performance';\nimport { IProcessEnvironment, OperatingSystem } from 'vs/base/common/platform';\nimport { StopWatch } from 'vs/base/common/stopwatch';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IRemoteAuthorityResolverService } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { ISerializedTerminalCommand } from 'vs/platform/terminal/common/capabilities/capabilities';\nimport { IPtyHostLatencyMeasurement, IShellLaunchConfig, IShellLaunchConfigDto, ITerminalBackend, ITerminalBackendRegistry, ITerminalChildProcess, ITerminalEnvironment, ITerminalLogService, ITerminalProcessOptions, ITerminalProfile, ITerminalsLayoutInfo, ITerminalsLayoutInfoById, ProcessPropertyType, TerminalExtensions, TerminalIcon, TerminalSettingId, TitleEventSource } from 'vs/platform/terminal/common/terminal';\nimport { IProcessDetails } from 'vs/platform/terminal/common/terminalProcess';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { BaseTerminalBackend } from 'vs/workbench/contrib/terminal/browser/baseTerminalBackend';\nimport { RemotePty } from 'vs/workbench/contrib/terminal/browser/remotePty';\nimport { ITerminalInstanceService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { RemoteTerminalChannelClient, REMOTE_TERMINAL_CHANNEL_NAME } from 'vs/workbench/contrib/terminal/common/remote/remoteTerminalChannel';\nimport { ICompleteTerminalConfiguration, ITerminalConfiguration, TERMINAL_CONFIG_SECTION } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { TerminalStorageKeys } from 'vs/workbench/contrib/terminal/common/terminalStorageKeys';\nimport { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\nimport { IHistoryService } from 'vs/workbench/services/history/common/history';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { IStatusbarService } from 'vs/workbench/services/statusbar/browser/statusbar';\n\nexport class RemoteTerminalBackendContribution implements IWorkbenchContribution {\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@ITerminalInstanceService terminalInstanceService: ITerminalInstanceService\n\t) {\n\t\tconst connection = remoteAgentService.getConnection();\n\t\tif (connection?.remoteAuthority) {\n\t\t\tconst channel = instantiationService.createInstance(RemoteTerminalChannelClient, connection.remoteAuthority, connection.getChannel(REMOTE_TERMINAL_CHANNEL_NAME));\n\t\t\tconst backend = instantiationService.createInstance(RemoteTerminalBackend, connection.remoteAuthority, channel);\n\t\t\tRegistry.as<ITerminalBackendRegistry>(TerminalExtensions.Backend).registerTerminalBackend(backend);\n\t\t\tterminalInstanceService.didRegisterBackend(backend.remoteAuthority);\n\t\t}\n\t}\n}\n\nclass RemoteTerminalBackend extends BaseTerminalBackend implements ITerminalBackend {\n\tprivate readonly _ptys: Map<number, RemotePty> = new Map();\n\n\tprivate readonly _whenConnected = new DeferredPromise<void>();\n\tget whenReady(): Promise<void> { return this._whenConnected.p; }\n\tsetReady(): void { this._whenConnected.complete(); }\n\n\tprivate readonly _onDidRequestDetach = this._register(new Emitter<{ requestId: number; workspaceId: string; instanceId: number }>());\n\treadonly onDidRequestDetach = this._onDidRequestDetach.event;\n\tprivate readonly _onRestoreCommands = this._register(new Emitter<{ id: number; commands: ISerializedTerminalCommand[] }>());\n\treadonly onRestoreCommands = this._onRestoreCommands.event;\n\n\tconstructor(\n\t\treadonly remoteAuthority: string | undefined,\n\t\tprivate readonly _remoteTerminalChannel: RemoteTerminalChannelClient,\n\t\t@IRemoteAgentService private readonly _remoteAgentService: IRemoteAgentService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ITerminalLogService logService: ITerminalLogService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@IRemoteAuthorityResolverService private readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@IWorkspaceContextService workspaceContextService: IWorkspaceContextService,\n\t\t@IConfigurationResolverService configurationResolverService: IConfigurationResolverService,\n\t\t@IHistoryService private readonly _historyService: IHistoryService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IStatusbarService statusBarService: IStatusbarService\n\t) {\n\t\tsuper(_remoteTerminalChannel, logService, _historyService, configurationResolverService, statusBarService, workspaceContextService);\n\n\t\tthis._remoteTerminalChannel.onProcessData(e => this._ptys.get(e.id)?.handleData(e.event));\n\t\tthis._remoteTerminalChannel.onProcessReplay(e => {\n\t\t\tthis._ptys.get(e.id)?.handleReplay(e.event);\n\t\t\tif (e.event.commands.commands.length > 0) {\n\t\t\t\tthis._onRestoreCommands.fire({ id: e.id, commands: e.event.commands.commands });\n\t\t\t}\n\t\t});\n\t\tthis._remoteTerminalChannel.onProcessOrphanQuestion(e => this._ptys.get(e.id)?.handleOrphanQuestion());\n\t\tthis._remoteTerminalChannel.onDidRequestDetach(e => this._onDidRequestDetach.fire(e));\n\t\tthis._remoteTerminalChannel.onProcessReady(e => this._ptys.get(e.id)?.handleReady(e.event));\n\t\tthis._remoteTerminalChannel.onDidChangeProperty(e => this._ptys.get(e.id)?.handleDidChangeProperty(e.property));\n\t\tthis._remoteTerminalChannel.onProcessExit(e => {\n\t\t\tconst pty = this._ptys.get(e.id);\n\t\t\tif (pty) {\n\t\t\t\tpty.handleExit(e.event);\n\t\t\t\tthis._ptys.delete(e.id);\n\t\t\t}\n\t\t});\n\n\t\tconst allowedCommands = ['_remoteCLI.openExternal', '_remoteCLI.windowOpen', '_remoteCLI.getSystemStatus', '_remoteCLI.manageExtensions'];\n\t\tthis._remoteTerminalChannel.onExecuteCommand(async e => {\n\t\t\t// Ensure this request for for this window\n\t\t\tconst pty = this._ptys.get(e.persistentProcessId);\n\t\t\tif (!pty) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst reqId = e.reqId;\n\t\t\tconst commandId = e.commandId;\n\t\t\tif (!allowedCommands.includes(commandId)) {\n\t\t\t\tthis._remoteTerminalChannel.sendCommandResult(reqId, true, 'Invalid remote cli command: ' + commandId);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst commandArgs = e.commandArgs.map(arg => revive(arg));\n\t\t\ttry {\n\t\t\t\tconst result = await this._commandService.executeCommand(e.commandId, ...commandArgs);\n\t\t\t\tthis._remoteTerminalChannel.sendCommandResult(reqId, false, result);\n\t\t\t} catch (err) {\n\t\t\t\tthis._remoteTerminalChannel.sendCommandResult(reqId, true, err);\n\t\t\t}\n\t\t});\n\n\t\t// Listen for config changes\n\t\tconst initialConfig = this._configurationService.getValue<ITerminalConfiguration>(TERMINAL_CONFIG_SECTION);\n\t\tfor (const match of Object.keys(initialConfig.autoReplies)) {\n\t\t\t// Ensure the value is truthy\n\t\t\tconst reply = initialConfig.autoReplies[match];\n\t\t\tif (reply) {\n\t\t\t\tthis._remoteTerminalChannel.installAutoReply(match, reply);\n\t\t\t}\n\t\t}\n\t\t// TODO: Could simplify update to a single call\n\t\tthis._register(this._configurationService.onDidChangeConfiguration(async e => {\n\t\t\tif (e.affectsConfiguration(TerminalSettingId.AutoReplies)) {\n\t\t\t\tthis._remoteTerminalChannel.uninstallAllAutoReplies();\n\t\t\t\tconst config = this._configurationService.getValue<ITerminalConfiguration>(TERMINAL_CONFIG_SECTION);\n\t\t\t\tfor (const match of Object.keys(config.autoReplies)) {\n\t\t\t\t\t// Ensure the value is truthy\n\t\t\t\t\tconst reply = config.autoReplies[match];\n\t\t\t\t\tif (reply) {\n\t\t\t\t\t\tawait this._remoteTerminalChannel.installAutoReply(match, reply);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis._onPtyHostConnected.fire();\n\t}\n\n\tasync requestDetachInstance(workspaceId: string, instanceId: number): Promise<IProcessDetails | undefined> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(`Cannot request detach instance when there is no remote!`);\n\t\t}\n\t\treturn this._remoteTerminalChannel.requestDetachInstance(workspaceId, instanceId);\n\t}\n\n\tasync acceptDetachInstanceReply(requestId: number, persistentProcessId?: number): Promise<void> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(`Cannot accept detached instance when there is no remote!`);\n\t\t} else if (!persistentProcessId) {\n\t\t\tthis._logService.warn('Cannot attach to feature terminals, custom pty terminals, or those without a persistentProcessId');\n\t\t\treturn;\n\t\t}\n\n\t\treturn this._remoteTerminalChannel.acceptDetachInstanceReply(requestId, persistentProcessId);\n\t}\n\n\tasync persistTerminalState(): Promise<void> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(`Cannot persist terminal state when there is no remote!`);\n\t\t}\n\t\tconst ids = Array.from(this._ptys.keys());\n\t\tconst serialized = await this._remoteTerminalChannel.serializeTerminalState(ids);\n\t\tthis._storageService.store(TerminalStorageKeys.TerminalBufferState, serialized, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n\n\tasync createProcess(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tcwd: string, // TODO: This is ignored\n\t\tcols: number,\n\t\trows: number,\n\t\tunicodeVersion: '6' | '11',\n\t\tenv: IProcessEnvironment, // TODO: This is ignored\n\t\toptions: ITerminalProcessOptions,\n\t\tshouldPersist: boolean\n\t): Promise<ITerminalChildProcess> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(`Cannot create remote terminal when there is no remote!`);\n\t\t}\n\n\t\t// Fetch the environment to check shell permissions\n\t\tconst remoteEnv = await this._remoteAgentService.getEnvironment();\n\t\tif (!remoteEnv) {\n\t\t\t// Extension host processes are only allowed in remote extension hosts currently\n\t\t\tthrow new Error('Could not fetch remote environment');\n\t\t}\n\n\t\tconst terminalConfig = this._configurationService.getValue<ITerminalConfiguration>(TERMINAL_CONFIG_SECTION);\n\t\tconst configuration: ICompleteTerminalConfiguration = {\n\t\t\t'terminal.integrated.env.windows': this._configurationService.getValue(TerminalSettingId.EnvWindows) as ITerminalEnvironment,\n\t\t\t'terminal.integrated.env.osx': this._configurationService.getValue(TerminalSettingId.EnvMacOs) as ITerminalEnvironment,\n\t\t\t'terminal.integrated.env.linux': this._configurationService.getValue(TerminalSettingId.EnvLinux) as ITerminalEnvironment,\n\t\t\t'terminal.integrated.cwd': this._configurationService.getValue(TerminalSettingId.Cwd) as string,\n\t\t\t'terminal.integrated.detectLocale': terminalConfig.detectLocale\n\t\t};\n\n\t\tconst shellLaunchConfigDto: IShellLaunchConfigDto = {\n\t\t\tname: shellLaunchConfig.name,\n\t\t\texecutable: shellLaunchConfig.executable,\n\t\t\targs: shellLaunchConfig.args,\n\t\t\tcwd: shellLaunchConfig.cwd,\n\t\t\tenv: shellLaunchConfig.env,\n\t\t\tuseShellEnvironment: shellLaunchConfig.useShellEnvironment,\n\t\t\treconnectionProperties: shellLaunchConfig.reconnectionProperties,\n\t\t\ttype: shellLaunchConfig.type,\n\t\t\tisFeatureTerminal: shellLaunchConfig.isFeatureTerminal\n\t\t};\n\t\tconst activeWorkspaceRootUri = this._historyService.getLastActiveWorkspaceRoot();\n\n\t\tconst result = await this._remoteTerminalChannel.createProcess(\n\t\t\tshellLaunchConfigDto,\n\t\t\tconfiguration,\n\t\t\tactiveWorkspaceRootUri,\n\t\t\toptions,\n\t\t\tshouldPersist,\n\t\t\tcols,\n\t\t\trows,\n\t\t\tunicodeVersion\n\t\t);\n\t\tconst pty = this._instantiationService.createInstance(RemotePty, result.persistentTerminalId, shouldPersist, this._remoteTerminalChannel);\n\t\tthis._ptys.set(result.persistentTerminalId, pty);\n\t\treturn pty;\n\t}\n\n\tasync attachToProcess(id: number): Promise<ITerminalChildProcess | undefined> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(`Cannot create remote terminal when there is no remote!`);\n\t\t}\n\n\t\ttry {\n\t\t\tawait this._remoteTerminalChannel.attachToProcess(id);\n\t\t\tconst pty = this._instantiationService.createInstance(RemotePty, id, true, this._remoteTerminalChannel);\n\t\t\tthis._ptys.set(id, pty);\n\t\t\treturn pty;\n\t\t} catch (e) {\n\t\t\tthis._logService.trace(`Couldn't attach to process ${e.message}`);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync attachToRevivedProcess(id: number): Promise<ITerminalChildProcess | undefined> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(`Cannot create remote terminal when there is no remote!`);\n\t\t}\n\n\t\ttry {\n\t\t\tconst newId = await this._remoteTerminalChannel.getRevivedPtyNewId(id) ?? id;\n\t\t\treturn await this.attachToProcess(newId);\n\t\t} catch (e) {\n\t\t\tthis._logService.trace(`Couldn't attach to process ${e.message}`);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync listProcesses(): Promise<IProcessDetails[]> {\n\t\treturn this._remoteTerminalChannel.listProcesses();\n\t}\n\n\tasync getLatency(): Promise<IPtyHostLatencyMeasurement[]> {\n\t\tconst sw = new StopWatch();\n\t\tconst results = await this._remoteTerminalChannel.getLatency();\n\t\tsw.stop();\n\t\treturn [\n\t\t\t{\n\t\t\t\tlabel: 'window<->ptyhostservice<->ptyhost',\n\t\t\t\tlatency: sw.elapsed()\n\t\t\t},\n\t\t\t...results\n\t\t];\n\t}\n\n\tasync updateProperty<T extends ProcessPropertyType>(id: number, property: T, value: any): Promise<void> {\n\t\tawait this._remoteTerminalChannel.updateProperty(id, property, value);\n\t}\n\n\tasync updateTitle(id: number, title: string, titleSource: TitleEventSource): Promise<void> {\n\t\tawait this._remoteTerminalChannel.updateTitle(id, title, titleSource);\n\t}\n\n\tasync updateIcon(id: number, userInitiated: boolean, icon: TerminalIcon, color?: string): Promise<void> {\n\t\tawait this._remoteTerminalChannel.updateIcon(id, userInitiated, icon, color);\n\t}\n\n\tasync getDefaultSystemShell(osOverride?: OperatingSystem): Promise<string> {\n\t\treturn this._remoteTerminalChannel.getDefaultSystemShell(osOverride) || '';\n\t}\n\n\tasync getProfiles(profiles: unknown, defaultProfile: unknown, includeDetectedProfiles?: boolean): Promise<ITerminalProfile[]> {\n\t\treturn this._remoteTerminalChannel.getProfiles(profiles, defaultProfile, includeDetectedProfiles) || [];\n\t}\n\n\tasync getEnvironment(): Promise<IProcessEnvironment> {\n\t\treturn this._remoteTerminalChannel.getEnvironment() || {};\n\t}\n\n\tasync getShellEnvironment(): Promise<IProcessEnvironment | undefined> {\n\t\tconst connection = this._remoteAgentService.getConnection();\n\t\tif (!connection) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst resolverResult = await this._remoteAuthorityResolverService.resolveAuthority(connection.remoteAuthority);\n\t\treturn resolverResult.options?.extensionHostEnv as any;\n\t}\n\n\tasync getWslPath(original: string, direction: 'unix-to-win' | 'win-to-unix'): Promise<string> {\n\t\tconst env = await this._remoteAgentService.getEnvironment();\n\t\tif (env?.os !== OperatingSystem.Windows) {\n\t\t\treturn original;\n\t\t}\n\t\treturn this._remoteTerminalChannel.getWslPath(original, direction) || original;\n\t}\n\n\tasync setTerminalLayoutInfo(layout?: ITerminalsLayoutInfoById): Promise<void> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(`Cannot call setActiveInstanceId when there is no remote`);\n\t\t}\n\n\t\treturn this._remoteTerminalChannel.setTerminalLayoutInfo(layout);\n\t}\n\n\tasync reduceConnectionGraceTime(): Promise<void> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error('Cannot reduce grace time when there is no remote');\n\t\t}\n\t\treturn this._remoteTerminalChannel.reduceConnectionGraceTime();\n\t}\n\n\tasync getTerminalLayoutInfo(): Promise<ITerminalsLayoutInfo | undefined> {\n\t\tif (!this._remoteTerminalChannel) {\n\t\t\tthrow new Error(`Cannot call getActiveInstanceId when there is no remote`);\n\t\t}\n\n\t\tconst workspaceId = this._getWorkspaceId();\n\n\t\t// Revive processes if needed\n\t\tconst serializedState = this._storageService.get(TerminalStorageKeys.TerminalBufferState, StorageScope.WORKSPACE);\n\t\tconst reviveBufferState = this._deserializeTerminalState(serializedState);\n\t\tif (reviveBufferState && reviveBufferState.length > 0) {\n\t\t\ttry {\n\t\t\t\t// Note that remote terminals do not get their environment re-resolved unlike in local terminals\n\n\t\t\t\tmark('code/terminal/willReviveTerminalProcessesRemote');\n\t\t\t\tawait this._remoteTerminalChannel.reviveTerminalProcesses(workspaceId, reviveBufferState, Intl.DateTimeFormat().resolvedOptions().locale);\n\t\t\t\tmark('code/terminal/didReviveTerminalProcessesRemote');\n\t\t\t\tthis._storageService.remove(TerminalStorageKeys.TerminalBufferState, StorageScope.WORKSPACE);\n\t\t\t\t// If reviving processes, send the terminal layout info back to the pty host as it\n\t\t\t\t// will not have been persisted on application exit\n\t\t\t\tconst layoutInfo = this._storageService.get(TerminalStorageKeys.TerminalLayoutInfo, StorageScope.WORKSPACE);\n\t\t\t\tif (layoutInfo) {\n\t\t\t\t\tmark('code/terminal/willSetTerminalLayoutInfoRemote');\n\t\t\t\t\tawait this._remoteTerminalChannel.setTerminalLayoutInfo(JSON.parse(layoutInfo));\n\t\t\t\t\tmark('code/terminal/didSetTerminalLayoutInfoRemote');\n\t\t\t\t\tthis._storageService.remove(TerminalStorageKeys.TerminalLayoutInfo, StorageScope.WORKSPACE);\n\t\t\t\t}\n\t\t\t} catch (e: unknown) {\n\t\t\t\tthis._logService.warn('RemoteTerminalBackend#getTerminalLayoutInfo Error', e && typeof e === 'object' && 'message' in e ? e.message : e);\n\t\t\t}\n\t\t}\n\n\t\treturn this._remoteTerminalChannel.getTerminalLayoutInfo();\n\t}\n\n\tasync getPerformanceMarks(): Promise<PerformanceMark[]> {\n\t\treturn this._remoteTerminalChannel.getPerformanceMarks();\n\t}\n}\n"]}