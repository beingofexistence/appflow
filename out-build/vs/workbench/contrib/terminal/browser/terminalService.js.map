{"version":3,"sources":["vs/workbench/contrib/terminal/browser/terminalService.ts"],"names":[],"mappings":"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","file":"terminalService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from 'vs/base/browser/dom';\nimport { DeferredPromise, timeout } from 'vs/base/common/async';\nimport { debounce } from 'vs/base/common/decorators';\nimport { DynamicListEventMultiplexer, Emitter, Event, IDynamicListEventMultiplexer } from 'vs/base/common/event';\nimport { Disposable, dispose, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport { isMacintosh, isWeb } from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { IKeyMods } from 'vs/platform/quickinput/common/quickInput';\nimport * as nls from 'vs/nls';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { ICreateContributedTerminalProfileOptions, IPtyHostAttachTarget, IRawTerminalInstanceLayoutInfo, IRawTerminalTabLayoutInfo, IShellLaunchConfig, ITerminalBackend, ITerminalLaunchError, ITerminalLogService, ITerminalsLayoutInfo, ITerminalsLayoutInfoById, TerminalExitReason, TerminalLocation, TerminalLocationString, TitleEventSource } from 'vs/platform/terminal/common/terminal';\nimport { formatMessageForTerminal } from 'vs/platform/terminal/common/terminalStrings';\nimport { iconForeground } from 'vs/platform/theme/common/colorRegistry';\nimport { getIconRegistry } from 'vs/platform/theme/common/iconRegistry';\nimport { ColorScheme } from 'vs/platform/theme/common/theme';\nimport { IThemeService, Themable } from 'vs/platform/theme/common/themeService';\nimport { ThemeIcon } from 'vs/base/common/themables';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { VirtualWorkspaceContext } from 'vs/workbench/common/contextkeys';\nimport { IEditableData, IViewsService } from 'vs/workbench/common/views';\nimport { ICreateTerminalOptions, IDetachedTerminalInstance, IDetachedXTermOptions, IRequestAddInstanceToGroupEvent, ITerminalEditorService, ITerminalGroup, ITerminalGroupService, ITerminalInstance, ITerminalInstanceHost, ITerminalInstanceService, ITerminalLocationOptions, ITerminalService, ITerminalServiceNativeDelegate, IXtermTerminal, TerminalConnectionState, TerminalEditorLocation } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { getCwdForSplit } from 'vs/workbench/contrib/terminal/browser/terminalActions';\nimport { TerminalConfigHelper } from 'vs/workbench/contrib/terminal/browser/terminalConfigHelper';\nimport { TerminalEditorInput } from 'vs/workbench/contrib/terminal/browser/terminalEditorInput';\nimport { getColorStyleContent, getUriClasses } from 'vs/workbench/contrib/terminal/browser/terminalIcon';\nimport { TerminalProfileQuickpick } from 'vs/workbench/contrib/terminal/browser/terminalProfileQuickpick';\nimport { getInstanceFromResource, getTerminalUri, parseTerminalUri } from 'vs/workbench/contrib/terminal/browser/terminalUri';\nimport { TerminalViewPane } from 'vs/workbench/contrib/terminal/browser/terminalView';\nimport { IRemoteTerminalAttachTarget, IStartExtensionTerminalRequest, ITerminalConfigHelper, ITerminalProcessExtHostProxy, ITerminalProfileService, TERMINAL_VIEW_ID } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { TerminalContextKeys } from 'vs/workbench/contrib/terminal/common/terminalContextKey';\nimport { columnToEditorGroup } from 'vs/workbench/services/editor/common/editorGroupColumn';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IEditorService, SIDE_GROUP } from 'vs/workbench/services/editor/common/editorService';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { ILifecycleService, ShutdownReason, StartupKind, WillShutdownEvent } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { XtermTerminal } from 'vs/workbench/contrib/terminal/browser/xterm/xtermTerminal';\nimport { TerminalInstance } from 'vs/workbench/contrib/terminal/browser/terminalInstance';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { TerminalCapabilityStore } from 'vs/platform/terminal/common/capabilities/terminalCapabilityStore';\nimport { ITimerService } from 'vs/workbench/services/timer/browser/timerService';\nimport { mark } from 'vs/base/common/performance';\nimport { DeatachedTerminal } from 'vs/workbench/contrib/terminal/browser/detachedTerminal';\nimport { ITerminalCapabilityImplMap, TerminalCapability } from 'vs/platform/terminal/common/capabilities/capabilities';\nimport { createInstanceCapabilityEventMultiplexer } from 'vs/workbench/contrib/terminal/browser/terminalEvents';\n\nexport class TerminalService extends Disposable implements ITerminalService {\n\tdeclare _serviceBrand: undefined;\n\n\tprivate _hostActiveTerminals: Map<ITerminalInstanceHost, ITerminalInstance | undefined> = new Map();\n\n\tprivate _detachedXterms = new Set<IXtermTerminal>();\n\tprivate _terminalEditorActive: IContextKey<boolean>;\n\tprivate readonly _terminalShellTypeContextKey: IContextKey<string>;\n\n\tprivate _isShuttingDown: boolean = false;\n\tprivate _backgroundedTerminalInstances: ITerminalInstance[] = [];\n\tprivate _backgroundedTerminalDisposables: Map<number, IDisposable[]> = new Map();\n\tprivate _processSupportContextKey: IContextKey<boolean>;\n\n\tprivate _primaryBackend?: ITerminalBackend;\n\tprivate _terminalHasBeenCreated: IContextKey<boolean>;\n\tprivate _terminalCountContextKey: IContextKey<number>;\n\tprivate _configHelper: TerminalConfigHelper;\n\tprivate _nativeDelegate?: ITerminalServiceNativeDelegate;\n\tprivate _shutdownWindowCount?: number;\n\n\tprivate _editable: { instance: ITerminalInstance; data: IEditableData } | undefined;\n\n\tget isProcessSupportRegistered(): boolean { return !!this._processSupportContextKey.get(); }\n\n\tprivate _connectionState: TerminalConnectionState = TerminalConnectionState.Connecting;\n\tget connectionState(): TerminalConnectionState { return this._connectionState; }\n\n\tprivate readonly _whenConnected = new DeferredPromise<void>();\n\tget whenConnected(): Promise<void> { return this._whenConnected.p; }\n\n\tprivate _restoredGroupCount: number = 0;\n\tget restoredGroupCount(): number { return this._restoredGroupCount; }\n\n\tget configHelper(): ITerminalConfigHelper { return this._configHelper; }\n\tget instances(): ITerminalInstance[] {\n\t\treturn this._terminalGroupService.instances.concat(this._terminalEditorService.instances);\n\t}\n\tget detachedXterms(): Iterable<IXtermTerminal> {\n\t\treturn this._detachedXterms;\n\t}\n\n\tprivate _reconnectedTerminalGroups: Promise<ITerminalGroup[]> | undefined;\n\n\tprivate _reconnectedTerminals: Map<string, ITerminalInstance[]> = new Map();\n\tgetReconnectedTerminals(reconnectionOwner: string): ITerminalInstance[] | undefined {\n\t\treturn this._reconnectedTerminals.get(reconnectionOwner);\n\t}\n\n\tget defaultLocation(): TerminalLocation { return this.configHelper.config.defaultLocation === TerminalLocationString.Editor ? TerminalLocation.Editor : TerminalLocation.Panel; }\n\n\tprivate _activeInstance: ITerminalInstance | undefined;\n\tget activeInstance(): ITerminalInstance | undefined {\n\t\t// Check if either an editor or panel terminal has focus and return that, regardless of the\n\t\t// value of _activeInstance. This avoids terminals created in the panel for example stealing\n\t\t// the active status even when it's not focused.\n\t\tfor (const activeHostTerminal of this._hostActiveTerminals.values()) {\n\t\t\tif (activeHostTerminal?.hasFocus) {\n\t\t\t\treturn activeHostTerminal;\n\t\t\t}\n\t\t}\n\t\t// Fallback to the last recorded active terminal if neither have focus\n\t\treturn this._activeInstance;\n\t}\n\n\tprivate _editingTerminal: ITerminalInstance | undefined;\n\n\tprivate readonly _onDidChangeActiveGroup = this._register(new Emitter<ITerminalGroup | undefined>());\n\tget onDidChangeActiveGroup(): Event<ITerminalGroup | undefined> { return this._onDidChangeActiveGroup.event; }\n\tprivate readonly _onDidCreateInstance = this._register(new Emitter<ITerminalInstance>());\n\tget onDidCreateInstance(): Event<ITerminalInstance> { return this._onDidCreateInstance.event; }\n\tprivate readonly _onDidDisposeInstance = this._register(new Emitter<ITerminalInstance>());\n\tget onDidDisposeInstance(): Event<ITerminalInstance> { return this._onDidDisposeInstance.event; }\n\tprivate readonly _onDidFocusInstance = this._register(new Emitter<ITerminalInstance>());\n\tget onDidFocusInstance(): Event<ITerminalInstance> { return this._onDidFocusInstance.event; }\n\tprivate readonly _onDidReceiveProcessId = this._register(new Emitter<ITerminalInstance>());\n\tget onDidReceiveProcessId(): Event<ITerminalInstance> { return this._onDidReceiveProcessId.event; }\n\tprivate readonly _onDidRequestStartExtensionTerminal = this._register(new Emitter<IStartExtensionTerminalRequest>());\n\tget onDidRequestStartExtensionTerminal(): Event<IStartExtensionTerminalRequest> { return this._onDidRequestStartExtensionTerminal.event; }\n\tprivate readonly _onDidChangeInstanceDimensions = this._register(new Emitter<ITerminalInstance>());\n\tget onDidChangeInstanceDimensions(): Event<ITerminalInstance> { return this._onDidChangeInstanceDimensions.event; }\n\tprivate readonly _onDidMaxiumumDimensionsChange = this._register(new Emitter<ITerminalInstance>());\n\tget onDidMaximumDimensionsChange(): Event<ITerminalInstance> { return this._onDidMaxiumumDimensionsChange.event; }\n\tprivate readonly _onDidChangeInstanceCapability = this._register(new Emitter<ITerminalInstance>());\n\tget onDidChangeInstanceCapability(): Event<ITerminalInstance> { return this._onDidChangeInstanceCapability.event; }\n\tprivate readonly _onDidChangeInstances = this._register(new Emitter<void>());\n\tget onDidChangeInstances(): Event<void> { return this._onDidChangeInstances.event; }\n\tprivate readonly _onDidChangeInstanceTitle = this._register(new Emitter<ITerminalInstance | undefined>());\n\tget onDidChangeInstanceTitle(): Event<ITerminalInstance | undefined> { return this._onDidChangeInstanceTitle.event; }\n\tprivate readonly _onDidChangeInstanceIcon = this._register(new Emitter<{ instance: ITerminalInstance; userInitiated: boolean }>());\n\tget onDidChangeInstanceIcon(): Event<{ instance: ITerminalInstance; userInitiated: boolean }> { return this._onDidChangeInstanceIcon.event; }\n\tprivate readonly _onDidChangeInstanceColor = this._register(new Emitter<{ instance: ITerminalInstance; userInitiated: boolean }>());\n\tget onDidChangeInstanceColor(): Event<{ instance: ITerminalInstance; userInitiated: boolean }> { return this._onDidChangeInstanceColor.event; }\n\tprivate readonly _onDidChangeActiveInstance = this._register(new Emitter<ITerminalInstance | undefined>());\n\tget onDidChangeActiveInstance(): Event<ITerminalInstance | undefined> { return this._onDidChangeActiveInstance.event; }\n\tprivate readonly _onDidChangeInstancePrimaryStatus = this._register(new Emitter<ITerminalInstance>());\n\tget onDidChangeInstancePrimaryStatus(): Event<ITerminalInstance> { return this._onDidChangeInstancePrimaryStatus.event; }\n\tprivate readonly _onDidInputInstanceData = this._register(new Emitter<ITerminalInstance>());\n\tget onDidInputInstanceData(): Event<ITerminalInstance> { return this._onDidInputInstanceData.event; }\n\tprivate readonly _onDidChangeSelection = this._register(new Emitter<ITerminalInstance>());\n\tget onDidChangeSelection(): Event<ITerminalInstance> { return this._onDidChangeSelection.event; }\n\tprivate readonly _onDidDisposeGroup = this._register(new Emitter<ITerminalGroup>());\n\tget onDidDisposeGroup(): Event<ITerminalGroup> { return this._onDidDisposeGroup.event; }\n\tprivate readonly _onDidChangeGroups = this._register(new Emitter<void>());\n\tget onDidChangeGroups(): Event<void> { return this._onDidChangeGroups.event; }\n\tprivate readonly _onDidRegisterProcessSupport = this._register(new Emitter<void>());\n\tget onDidRegisterProcessSupport(): Event<void> { return this._onDidRegisterProcessSupport.event; }\n\tprivate readonly _onDidChangeConnectionState = this._register(new Emitter<void>());\n\tget onDidChangeConnectionState(): Event<void> { return this._onDidChangeConnectionState.event; }\n\n\tconstructor(\n\t\t@IContextKeyService private _contextKeyService: IContextKeyService,\n\t\t@ILifecycleService private readonly _lifecycleService: ILifecycleService,\n\t\t@ITerminalLogService private readonly _logService: ITerminalLogService,\n\t\t@IDialogService private _dialogService: IDialogService,\n\t\t@IInstantiationService private _instantiationService: IInstantiationService,\n\t\t@IRemoteAgentService private _remoteAgentService: IRemoteAgentService,\n\t\t@IViewsService private _viewsService: IViewsService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IWorkbenchEnvironmentService private readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ITerminalEditorService private readonly _terminalEditorService: ITerminalEditorService,\n\t\t@ITerminalGroupService private readonly _terminalGroupService: ITerminalGroupService,\n\t\t@ITerminalInstanceService private readonly _terminalInstanceService: ITerminalInstanceService,\n\t\t@IEditorGroupsService private readonly _editorGroupsService: IEditorGroupsService,\n\t\t@ITerminalProfileService private readonly _terminalProfileService: ITerminalProfileService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@IWorkspaceContextService private readonly _workspaceContextService: IWorkspaceContextService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IKeybindingService private readonly _keybindingService: IKeybindingService,\n\t\t@ITimerService private readonly _timerService: ITimerService\n\t) {\n\t\tsuper();\n\n\t\tthis._configHelper = this._register(this._instantiationService.createInstance(TerminalConfigHelper));\n\t\t// the below avoids having to poll routinely.\n\t\t// we update detected profiles when an instance is created so that,\n\t\t// for example, we detect if you've installed a pwsh\n\t\tthis.onDidCreateInstance(() => this._terminalProfileService.refreshAvailableProfiles());\n\t\tthis._forwardInstanceHostEvents(this._terminalGroupService);\n\t\tthis._forwardInstanceHostEvents(this._terminalEditorService);\n\t\tthis._terminalGroupService.onDidChangeActiveGroup(this._onDidChangeActiveGroup.fire, this._onDidChangeActiveGroup);\n\t\tthis._terminalInstanceService.onDidCreateInstance(instance => {\n\t\t\tthis._initInstanceListeners(instance);\n\t\t\tthis._onDidCreateInstance.fire(instance);\n\t\t});\n\n\t\t// Hide the panel if there are no more instances, provided that VS Code is not shutting\n\t\t// down. When shutting down the panel is locked in place so that it is restored upon next\n\t\t// launch.\n\t\tthis._terminalGroupService.onDidChangeActiveInstance(instance => {\n\t\t\tif (!instance && !this._isShuttingDown) {\n\t\t\t\tthis._terminalGroupService.hidePanel();\n\t\t\t}\n\t\t\tif (instance?.shellType) {\n\t\t\t\tthis._terminalShellTypeContextKey.set(instance.shellType.toString());\n\t\t\t} else if (!instance) {\n\t\t\t\tthis._terminalShellTypeContextKey.reset();\n\t\t\t}\n\t\t});\n\n\t\tthis._handleInstanceContextKeys();\n\t\tthis._terminalShellTypeContextKey = TerminalContextKeys.shellType.bindTo(this._contextKeyService);\n\t\tthis._processSupportContextKey = TerminalContextKeys.processSupported.bindTo(this._contextKeyService);\n\t\tthis._processSupportContextKey.set(!isWeb || this._remoteAgentService.getConnection() !== null);\n\t\tthis._terminalHasBeenCreated = TerminalContextKeys.terminalHasBeenCreated.bindTo(this._contextKeyService);\n\t\tthis._terminalCountContextKey = TerminalContextKeys.count.bindTo(this._contextKeyService);\n\t\tthis._terminalEditorActive = TerminalContextKeys.terminalEditorActive.bindTo(this._contextKeyService);\n\n\t\tthis.onDidChangeActiveInstance(instance => {\n\t\t\tthis._terminalEditorActive.set(!!instance?.target && instance.target === TerminalLocation.Editor);\n\t\t});\n\n\t\t_lifecycleService.onBeforeShutdown(async e => e.veto(this._onBeforeShutdown(e.reason), 'veto.terminal'));\n\t\t_lifecycleService.onWillShutdown(e => this._onWillShutdown(e));\n\n\t\tthis.initializePrimaryBackend();\n\n\t\t// Create async as the class depends on `this`\n\t\ttimeout(0).then(() => this._register(this._instantiationService.createInstance(TerminalEditorStyle, document.head)));\n\t}\n\n\tasync showProfileQuickPick(type: 'setDefault' | 'createInstance', cwd?: string | URI): Promise<ITerminalInstance | undefined> {\n\t\tconst quickPick = this._instantiationService.createInstance(TerminalProfileQuickpick);\n\t\tconst result = await quickPick.showAndGetResult(type);\n\t\tif (!result) {\n\t\t\treturn;\n\t\t}\n\t\tif (typeof result === 'string') {\n\t\t\treturn;\n\t\t}\n\t\tconst keyMods: IKeyMods | undefined = result.keyMods;\n\t\tif (type === 'createInstance') {\n\t\t\tconst activeInstance = this.getDefaultInstanceHost().activeInstance;\n\t\t\tlet instance;\n\n\t\t\tif (result.config && 'id' in result?.config) {\n\t\t\t\tawait this.createContributedTerminalProfile(result.config.extensionIdentifier, result.config.id, {\n\t\t\t\t\ticon: result.config.options?.icon,\n\t\t\t\t\tcolor: result.config.options?.color,\n\t\t\t\t\tlocation: !!(keyMods?.alt && activeInstance) ? { splitActiveTerminal: true } : this.defaultLocation\n\t\t\t\t});\n\t\t\t\treturn;\n\t\t\t} else if (result.config && 'profileName' in result.config) {\n\t\t\t\tif (keyMods?.alt && activeInstance) {\n\t\t\t\t\t// create split, only valid if there's an active instance\n\t\t\t\t\tinstance = await this.createTerminal({ location: { parentTerminal: activeInstance }, config: result.config, cwd });\n\t\t\t\t} else {\n\t\t\t\t\tinstance = await this.createTerminal({ location: this.defaultLocation, config: result.config, cwd });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (instance && this.defaultLocation !== TerminalLocation.Editor) {\n\t\t\t\tthis._terminalGroupService.showPanel(true);\n\t\t\t\tthis.setActiveInstance(instance);\n\t\t\t\treturn instance;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync initializePrimaryBackend() {\n\t\tmark('code/terminal/willGetTerminalBackend');\n\t\tthis._primaryBackend = await this._terminalInstanceService.getBackend(this._environmentService.remoteAuthority);\n\t\tmark('code/terminal/didGetTerminalBackend');\n\t\tconst enableTerminalReconnection = this.configHelper.config.enablePersistentSessions;\n\n\t\t// Connect to the extension host if it's there, set the connection state to connected when\n\t\t// it's done. This should happen even when there is no extension host.\n\t\tthis._connectionState = TerminalConnectionState.Connecting;\n\n\t\tconst isPersistentRemote = !!this._environmentService.remoteAuthority && enableTerminalReconnection;\n\n\t\tthis._primaryBackend?.onDidRequestDetach(async (e) => {\n\t\t\tconst instanceToDetach = this.getInstanceFromResource(getTerminalUri(e.workspaceId, e.instanceId));\n\t\t\tif (instanceToDetach) {\n\t\t\t\tconst persistentProcessId = instanceToDetach?.persistentProcessId;\n\t\t\t\tif (persistentProcessId && !instanceToDetach.shellLaunchConfig.isFeatureTerminal && !instanceToDetach.shellLaunchConfig.customPtyImplementation) {\n\t\t\t\t\tif (instanceToDetach.target === TerminalLocation.Editor) {\n\t\t\t\t\t\tthis._terminalEditorService.detachInstance(instanceToDetach);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._terminalGroupService.getGroupForInstance(instanceToDetach)?.removeInstance(instanceToDetach);\n\t\t\t\t\t}\n\t\t\t\t\tawait instanceToDetach.detachProcessAndDispose(TerminalExitReason.User);\n\t\t\t\t\tawait this._primaryBackend?.acceptDetachInstanceReply(e.requestId, persistentProcessId);\n\t\t\t\t} else {\n\t\t\t\t\t// will get rejected without a persistentProcessId to attach to\n\t\t\t\t\tawait this._primaryBackend?.acceptDetachInstanceReply(e.requestId, undefined);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tmark('code/terminal/willReconnect');\n\t\tlet reconnectedPromise: Promise<any>;\n\t\tif (isPersistentRemote) {\n\t\t\treconnectedPromise = this._reconnectToRemoteTerminals();\n\t\t} else if (enableTerminalReconnection) {\n\t\t\treconnectedPromise = this._reconnectToLocalTerminals();\n\t\t} else {\n\t\t\treconnectedPromise = Promise.resolve();\n\t\t}\n\t\treconnectedPromise.then(async () => {\n\t\t\tthis._setConnected();\n\t\t\tmark('code/terminal/didReconnect');\n\t\t\tmark('code/terminal/willReplay');\n\t\t\tconst instances = await this._reconnectedTerminalGroups?.then(groups => groups.map(e => e.terminalInstances).flat()) ?? [];\n\t\t\tawait Promise.all(instances.map(e => new Promise<void>(r => Event.once(e.onProcessReplayComplete)(r))));\n\t\t\tmark('code/terminal/didReplay');\n\t\t\tmark('code/terminal/willGetPerformanceMarks');\n\t\t\tawait Promise.all(Array.from(this._terminalInstanceService.getRegisteredBackends()).map(async backend => {\n\t\t\t\tthis._timerService.setPerformanceMarks(backend.remoteAuthority === undefined ? 'localPtyHost' : 'remotePtyHost', await backend.getPerformanceMarks());\n\t\t\t\tbackend.setReady();\n\t\t\t}));\n\t\t\tmark('code/terminal/didGetPerformanceMarks');\n\t\t\tthis._whenConnected.complete();\n\t\t});\n\t}\n\n\tgetPrimaryBackend(): ITerminalBackend | undefined {\n\t\treturn this._primaryBackend;\n\t}\n\n\tprivate _forwardInstanceHostEvents(host: ITerminalInstanceHost) {\n\t\thost.onDidChangeInstances(this._onDidChangeInstances.fire, this._onDidChangeInstances);\n\t\thost.onDidDisposeInstance(this._onDidDisposeInstance.fire, this._onDidDisposeInstance);\n\t\thost.onDidChangeActiveInstance(instance => this._evaluateActiveInstance(host, instance));\n\t\thost.onDidFocusInstance(instance => {\n\t\t\tthis._onDidFocusInstance.fire(instance);\n\t\t\tthis._evaluateActiveInstance(host, instance);\n\t\t});\n\t\thost.onDidChangeInstanceCapability((instance) => {\n\t\t\tthis._onDidChangeInstanceCapability.fire(instance);\n\t\t});\n\t\tthis._hostActiveTerminals.set(host, undefined);\n\t}\n\n\tprivate _evaluateActiveInstance(host: ITerminalInstanceHost, instance: ITerminalInstance | undefined) {\n\t\t// Track the latest active terminal for each host so that when one becomes undefined, the\n\t\t// TerminalService's active terminal is set to the last active terminal from the other host.\n\t\t// This means if the last terminal editor is closed such that it becomes undefined, the last\n\t\t// active group's terminal will be used as the active terminal if available.\n\t\tthis._hostActiveTerminals.set(host, instance);\n\t\tif (instance === undefined) {\n\t\t\tfor (const active of this._hostActiveTerminals.values()) {\n\t\t\t\tif (active) {\n\t\t\t\t\tinstance = active;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._activeInstance = instance;\n\t\tthis._onDidChangeActiveInstance.fire(instance);\n\t}\n\n\tsetActiveInstance(value: ITerminalInstance) {\n\t\t// If this was a hideFromUser terminal created by the API this was triggered by show,\n\t\t// in which case we need to create the terminal group\n\t\tif (value.shellLaunchConfig.hideFromUser) {\n\t\t\tthis._showBackgroundTerminal(value);\n\t\t}\n\t\tif (value.target === TerminalLocation.Editor) {\n\t\t\tthis._terminalEditorService.setActiveInstance(value);\n\t\t} else {\n\t\t\tthis._terminalGroupService.setActiveInstance(value);\n\t\t}\n\t}\n\n\tasync focusActiveInstance(): Promise<void> {\n\t\tif (!this._activeInstance) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._activeInstance.target === TerminalLocation.Editor) {\n\t\t\treturn this._terminalEditorService.focusActiveInstance();\n\t\t}\n\t\treturn this._terminalGroupService.focusActiveInstance();\n\t}\n\n\tasync createContributedTerminalProfile(extensionIdentifier: string, id: string, options: ICreateContributedTerminalProfileOptions): Promise<void> {\n\t\tawait this._extensionService.activateByEvent(`onTerminalProfile:${id}`);\n\n\t\tconst profileProvider = this._terminalProfileService.getContributedProfileProvider(extensionIdentifier, id);\n\t\tif (!profileProvider) {\n\t\t\tthis._notificationService.error(`No terminal profile provider registered for id \"${id}\"`);\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tawait profileProvider.createContributedTerminalProfile(options);\n\t\t\tthis._terminalGroupService.setActiveInstanceByIndex(this._terminalGroupService.instances.length - 1);\n\t\t\tawait this._terminalGroupService.activeInstance?.focusWhenReady();\n\t\t} catch (e) {\n\t\t\tthis._notificationService.error(e.message);\n\t\t}\n\t}\n\n\tasync safeDisposeTerminal(instance: ITerminalInstance): Promise<void> {\n\t\t// Confirm on kill in the editor is handled by the editor input\n\t\tif (instance.target !== TerminalLocation.Editor &&\n\t\t\tinstance.hasChildProcesses &&\n\t\t\t(this.configHelper.config.confirmOnKill === 'panel' || this.configHelper.config.confirmOnKill === 'always')) {\n\n\t\t\tconst veto = await this._showTerminalCloseConfirmation(true);\n\t\t\tif (veto) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\treturn new Promise<void>(r => {\n\t\t\tEvent.once(instance.onExit)(() => r());\n\t\t\tinstance.dispose(TerminalExitReason.User);\n\t\t});\n\t}\n\n\tprivate _setConnected() {\n\t\tthis._connectionState = TerminalConnectionState.Connected;\n\t\tthis._onDidChangeConnectionState.fire();\n\t\tthis._logService.trace('Pty host ready');\n\t}\n\n\tprivate async _reconnectToRemoteTerminals(): Promise<void> {\n\t\tconst remoteAuthority = this._environmentService.remoteAuthority;\n\t\tif (!remoteAuthority) {\n\t\t\treturn;\n\t\t}\n\t\tconst backend = await this._terminalInstanceService.getBackend(remoteAuthority);\n\t\tif (!backend) {\n\t\t\treturn;\n\t\t}\n\t\tmark('code/terminal/willGetTerminalLayoutInfo');\n\t\tconst layoutInfo = await backend.getTerminalLayoutInfo();\n\t\tmark('code/terminal/didGetTerminalLayoutInfo');\n\t\tbackend.reduceConnectionGraceTime();\n\t\tmark('code/terminal/willRecreateTerminalGroups');\n\t\tawait this._recreateTerminalGroups(layoutInfo);\n\t\tmark('code/terminal/didRecreateTerminalGroups');\n\t\t// now that terminals have been restored,\n\t\t// attach listeners to update remote when terminals are changed\n\t\tthis._attachProcessLayoutListeners();\n\n\t\tthis._logService.trace('Reconnected to remote terminals');\n\t}\n\n\tprivate async _reconnectToLocalTerminals(): Promise<void> {\n\t\tconst localBackend = await this._terminalInstanceService.getBackend();\n\t\tif (!localBackend) {\n\t\t\treturn;\n\t\t}\n\t\tmark('code/terminal/willGetTerminalLayoutInfo');\n\t\tconst layoutInfo = await localBackend.getTerminalLayoutInfo();\n\t\tmark('code/terminal/didGetTerminalLayoutInfo');\n\t\tif (layoutInfo && layoutInfo.tabs.length > 0) {\n\t\t\tmark('code/terminal/willRecreateTerminalGroups');\n\t\t\tthis._reconnectedTerminalGroups = this._recreateTerminalGroups(layoutInfo);\n\t\t\tmark('code/terminal/didRecreateTerminalGroups');\n\t\t}\n\t\t// now that terminals have been restored,\n\t\t// attach listeners to update local state when terminals are changed\n\t\tthis._attachProcessLayoutListeners();\n\n\t\tthis._logService.trace('Reconnected to local terminals');\n\t}\n\n\tprivate _recreateTerminalGroups(layoutInfo?: ITerminalsLayoutInfo): Promise<ITerminalGroup[]> {\n\t\tconst groupPromises: Promise<ITerminalGroup | undefined>[] = [];\n\t\tlet activeGroup: Promise<ITerminalGroup | undefined> | undefined;\n\t\tif (layoutInfo) {\n\t\t\tfor (const tabLayout of layoutInfo.tabs) {\n\t\t\t\tconst terminalLayouts = tabLayout.terminals.filter(t => t.terminal && t.terminal.isOrphan);\n\t\t\t\tif (terminalLayouts.length) {\n\t\t\t\t\tthis._restoredGroupCount += terminalLayouts.length;\n\t\t\t\t\tconst promise = this._recreateTerminalGroup(tabLayout, terminalLayouts);\n\t\t\t\t\tgroupPromises.push(promise);\n\t\t\t\t\tif (tabLayout.isActive) {\n\t\t\t\t\t\tactiveGroup = promise;\n\t\t\t\t\t}\n\t\t\t\t\tconst activeInstance = this.instances.find(t => t.shellLaunchConfig.attachPersistentProcess?.id === tabLayout.activePersistentProcessId);\n\t\t\t\t\tif (activeInstance) {\n\t\t\t\t\t\tthis.setActiveInstance(activeInstance);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (layoutInfo.tabs.length) {\n\t\t\t\tactiveGroup?.then(group => this._terminalGroupService.activeGroup = group);\n\t\t\t}\n\t\t}\n\t\treturn Promise.all(groupPromises).then(result => result.filter(e => !!e) as ITerminalGroup[]);\n\t}\n\n\tprivate async _recreateTerminalGroup(tabLayout: IRawTerminalTabLayoutInfo<IPtyHostAttachTarget | null>, terminalLayouts: IRawTerminalInstanceLayoutInfo<IPtyHostAttachTarget | null>[]): Promise<ITerminalGroup | undefined> {\n\t\tlet lastInstance: Promise<ITerminalInstance> | undefined;\n\t\tfor (const terminalLayout of terminalLayouts) {\n\t\t\tconst attachPersistentProcess = terminalLayout.terminal!;\n\t\t\tif (this._lifecycleService.startupKind !== StartupKind.ReloadedWindow && attachPersistentProcess.type === 'Task') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tmark(`code/terminal/willRecreateTerminal/${attachPersistentProcess.id}-${attachPersistentProcess.pid}`);\n\t\t\tlastInstance = this.createTerminal({\n\t\t\t\tconfig: { attachPersistentProcess },\n\t\t\t\tlocation: lastInstance ? { parentTerminal: lastInstance } : TerminalLocation.Panel\n\t\t\t});\n\t\t\tlastInstance.then(() => mark(`code/terminal/didRecreateTerminal/${attachPersistentProcess.id}-${attachPersistentProcess.pid}`));\n\t\t}\n\t\tconst group = lastInstance?.then(instance => {\n\t\t\tconst g = this._terminalGroupService.getGroupForInstance(instance);\n\t\t\tg?.resizePanes(tabLayout.terminals.map(terminal => terminal.relativeSize));\n\t\t\treturn g;\n\t\t});\n\t\treturn group;\n\t}\n\n\tprivate _attachProcessLayoutListeners(): void {\n\t\tthis.onDidChangeActiveGroup(() => this._saveState());\n\t\tthis.onDidChangeActiveInstance(() => this._saveState());\n\t\tthis.onDidChangeInstances(() => this._saveState());\n\t\t// The state must be updated when the terminal is relaunched, otherwise the persistent\n\t\t// terminal ID will be stale and the process will be leaked.\n\t\tthis.onDidReceiveProcessId(() => this._saveState());\n\t\tthis.onDidChangeInstanceTitle(instance => this._updateTitle(instance));\n\t\tthis.onDidChangeInstanceIcon(e => this._updateIcon(e.instance, e.userInitiated));\n\t}\n\n\tprivate _handleInstanceContextKeys(): void {\n\t\tconst terminalIsOpenContext = TerminalContextKeys.isOpen.bindTo(this._contextKeyService);\n\t\tconst updateTerminalContextKeys = () => {\n\t\t\tterminalIsOpenContext.set(this.instances.length > 0);\n\t\t\tthis._terminalCountContextKey.set(this.instances.length);\n\t\t};\n\t\tthis.onDidChangeInstances(() => updateTerminalContextKeys());\n\t}\n\n\tasync getActiveOrCreateInstance(options?: { acceptsInput?: boolean }): Promise<ITerminalInstance> {\n\t\tconst activeInstance = this.activeInstance;\n\t\t// No instance, create\n\t\tif (!activeInstance) {\n\t\t\treturn this.createTerminal();\n\t\t}\n\t\t// Active instance, ensure accepts input\n\t\tif (!options?.acceptsInput || activeInstance.xterm?.isStdinDisabled !== true) {\n\t\t\treturn activeInstance;\n\t\t}\n\t\t// Active instance doesn't accept input, create and focus\n\t\tconst instance = await this.createTerminal();\n\t\tthis.setActiveInstance(instance);\n\t\tawait this.revealActiveTerminal();\n\t\treturn instance;\n\t}\n\n\tasync revealActiveTerminal(): Promise<void> {\n\t\tconst instance = this.activeInstance;\n\t\tif (!instance) {\n\t\t\treturn;\n\t\t}\n\t\tif (instance.target === TerminalLocation.Editor) {\n\t\t\tawait this._terminalEditorService.revealActiveEditor();\n\t\t} else {\n\t\t\tawait this._terminalGroupService.showPanel();\n\t\t}\n\t}\n\n\tsetEditable(instance: ITerminalInstance, data?: IEditableData | null): void {\n\t\tif (!data) {\n\t\t\tthis._editable = undefined;\n\t\t} else {\n\t\t\tthis._editable = { instance: instance, data };\n\t\t}\n\t\tconst pane = this._viewsService.getActiveViewWithId<TerminalViewPane>(TERMINAL_VIEW_ID);\n\t\tconst isEditing = this.isEditable(instance);\n\t\tpane?.terminalTabbedView?.setEditable(isEditing);\n\t}\n\n\tisEditable(instance: ITerminalInstance | undefined): boolean {\n\t\treturn !!this._editable && (this._editable.instance === instance || !instance);\n\t}\n\n\tgetEditableData(instance: ITerminalInstance): IEditableData | undefined {\n\t\treturn this._editable && this._editable.instance === instance ? this._editable.data : undefined;\n\t}\n\n\trequestStartExtensionTerminal(proxy: ITerminalProcessExtHostProxy, cols: number, rows: number): Promise<ITerminalLaunchError | undefined> {\n\t\t// The initial request came from the extension host, no need to wait for it\n\t\treturn new Promise<ITerminalLaunchError | undefined>(callback => {\n\t\t\tthis._onDidRequestStartExtensionTerminal.fire({ proxy, cols, rows, callback });\n\t\t});\n\t}\n\n\tprivate _onBeforeShutdown(reason: ShutdownReason): boolean | Promise<boolean> {\n\t\t// Never veto on web as this would block all windows from being closed. This disables\n\t\t// process revive as we can't handle it on shutdown.\n\t\tif (isWeb) {\n\t\t\tthis._isShuttingDown = true;\n\t\t\treturn false;\n\t\t}\n\t\treturn this._onBeforeShutdownAsync(reason);\n\t}\n\n\tprivate async _onBeforeShutdownAsync(reason: ShutdownReason): Promise<boolean> {\n\t\tif (this.instances.length === 0) {\n\t\t\t// No terminal instances, don't veto\n\t\t\treturn false;\n\t\t}\n\n\t\t// Persist terminal _buffer state_, note that even if this happens the dirty terminal prompt\n\t\t// still shows as that cannot be revived\n\t\ttry {\n\t\t\tthis._shutdownWindowCount = await this._nativeDelegate?.getWindowCount();\n\t\t\tconst shouldReviveProcesses = this._shouldReviveProcesses(reason);\n\t\t\tif (shouldReviveProcesses) {\n\t\t\t\t// Attempt to persist the terminal state but only allow 2000ms as we can't block\n\t\t\t\t// shutdown. This can happen when in a remote workspace but the other side has been\n\t\t\t\t// suspended and is in the process of reconnecting, the message will be put in a\n\t\t\t\t// queue in this case for when the connection is back up and running. Aborting the\n\t\t\t\t// process is preferable in this case.\n\t\t\t\tawait Promise.race([\n\t\t\t\t\tthis._primaryBackend?.persistTerminalState(),\n\t\t\t\t\ttimeout(2000)\n\t\t\t\t]);\n\t\t\t}\n\n\t\t\t// Persist terminal _processes_\n\t\t\tconst shouldPersistProcesses = this._configHelper.config.enablePersistentSessions && reason === ShutdownReason.RELOAD;\n\t\t\tif (!shouldPersistProcesses) {\n\t\t\t\tconst hasDirtyInstances = (\n\t\t\t\t\t(this.configHelper.config.confirmOnExit === 'always' && this.instances.length > 0) ||\n\t\t\t\t\t(this.configHelper.config.confirmOnExit === 'hasChildProcesses' && this.instances.some(e => e.hasChildProcesses))\n\t\t\t\t);\n\t\t\t\tif (hasDirtyInstances) {\n\t\t\t\t\treturn this._onBeforeShutdownConfirmation(reason);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (err: unknown) {\n\t\t\t// Swallow as exceptions should not cause a veto to prevent shutdown\n\t\t\tthis._logService.warn('Exception occurred during terminal shutdown', err);\n\t\t}\n\n\t\tthis._isShuttingDown = true;\n\n\t\treturn false;\n\t}\n\n\tsetNativeDelegate(nativeDelegate: ITerminalServiceNativeDelegate): void {\n\t\tthis._nativeDelegate = nativeDelegate;\n\t}\n\n\tprivate _shouldReviveProcesses(reason: ShutdownReason): boolean {\n\t\tif (!this._configHelper.config.enablePersistentSessions) {\n\t\t\treturn false;\n\t\t}\n\t\tswitch (this.configHelper.config.persistentSessionReviveProcess) {\n\t\t\tcase 'onExit': {\n\t\t\t\t// Allow on close if it's the last window on Windows or Linux\n\t\t\t\tif (reason === ShutdownReason.CLOSE && (this._shutdownWindowCount === 1 && !isMacintosh)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\treturn reason === ShutdownReason.LOAD || reason === ShutdownReason.QUIT;\n\t\t\t}\n\t\t\tcase 'onExitAndWindowClose': return reason !== ShutdownReason.RELOAD;\n\t\t\tdefault: return false;\n\t\t}\n\t}\n\n\tprivate async _onBeforeShutdownConfirmation(reason: ShutdownReason): Promise<boolean> {\n\t\t// veto if configured to show confirmation and the user chose not to exit\n\t\tconst veto = await this._showTerminalCloseConfirmation();\n\t\tif (!veto) {\n\t\t\tthis._isShuttingDown = true;\n\t\t}\n\n\t\treturn veto;\n\t}\n\n\tprivate _onWillShutdown(e: WillShutdownEvent): void {\n\t\t// Don't touch processes if the shutdown was a result of reload as they will be reattached\n\t\tconst shouldPersistTerminals = this._configHelper.config.enablePersistentSessions && e.reason === ShutdownReason.RELOAD;\n\n\t\tfor (const instance of [...this._terminalGroupService.instances, ...this._backgroundedTerminalInstances]) {\n\t\t\tif (shouldPersistTerminals && instance.shouldPersist) {\n\t\t\t\tinstance.detachProcessAndDispose(TerminalExitReason.Shutdown);\n\t\t\t} else {\n\t\t\t\tinstance.dispose(TerminalExitReason.Shutdown);\n\t\t\t}\n\t\t}\n\n\t\t// Clear terminal layout info only when not persisting\n\t\tif (!shouldPersistTerminals && !this._shouldReviveProcesses(e.reason)) {\n\t\t\tthis._primaryBackend?.setTerminalLayoutInfo(undefined);\n\t\t}\n\t}\n\n\t@debounce(500)\n\tprivate _saveState(): void {\n\t\t// Avoid saving state when shutting down as that would override process state to be revived\n\t\tif (this._isShuttingDown) {\n\t\t\treturn;\n\t\t}\n\t\tif (!this.configHelper.config.enablePersistentSessions) {\n\t\t\treturn;\n\t\t}\n\t\tconst tabs = this._terminalGroupService.groups.map(g => g.getLayoutInfo(g === this._terminalGroupService.activeGroup));\n\t\tconst state: ITerminalsLayoutInfoById = { tabs };\n\t\tthis._primaryBackend?.setTerminalLayoutInfo(state);\n\t}\n\n\t@debounce(500)\n\tprivate _updateTitle(instance: ITerminalInstance | undefined): void {\n\t\tif (!this.configHelper.config.enablePersistentSessions || !instance || !instance.persistentProcessId || !instance.title || instance.isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tif (instance.staticTitle) {\n\t\t\tthis._primaryBackend?.updateTitle(instance.persistentProcessId, instance.staticTitle, TitleEventSource.Api);\n\t\t} else {\n\t\t\tthis._primaryBackend?.updateTitle(instance.persistentProcessId, instance.title, instance.titleSource);\n\t\t}\n\t}\n\n\t@debounce(500)\n\tprivate _updateIcon(instance: ITerminalInstance, userInitiated: boolean): void {\n\t\tif (!this.configHelper.config.enablePersistentSessions || !instance || !instance.persistentProcessId || !instance.icon || instance.isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tthis._primaryBackend?.updateIcon(instance.persistentProcessId, userInitiated, instance.icon, instance.color);\n\t}\n\n\trefreshActiveGroup(): void {\n\t\tthis._onDidChangeActiveGroup.fire(this._terminalGroupService.activeGroup);\n\t}\n\n\tgetInstanceFromId(terminalId: number): ITerminalInstance | undefined {\n\t\tlet bgIndex = -1;\n\t\tthis._backgroundedTerminalInstances.forEach((terminalInstance, i) => {\n\t\t\tif (terminalInstance.instanceId === terminalId) {\n\t\t\t\tbgIndex = i;\n\t\t\t}\n\t\t});\n\t\tif (bgIndex !== -1) {\n\t\t\treturn this._backgroundedTerminalInstances[bgIndex];\n\t\t}\n\t\ttry {\n\t\t\treturn this.instances[this._getIndexFromId(terminalId)];\n\t\t} catch {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tgetInstanceFromIndex(terminalIndex: number): ITerminalInstance {\n\t\treturn this.instances[terminalIndex];\n\t}\n\n\tgetInstanceFromResource(resource: URI | undefined): ITerminalInstance | undefined {\n\t\treturn getInstanceFromResource(this.instances, resource);\n\t}\n\n\tisAttachedToTerminal(remoteTerm: IRemoteTerminalAttachTarget): boolean {\n\t\treturn this.instances.some(term => term.processId === remoteTerm.pid);\n\t}\n\n\tmoveToEditor(source: ITerminalInstance): void {\n\t\tif (source.target === TerminalLocation.Editor) {\n\t\t\treturn;\n\t\t}\n\t\tconst sourceGroup = this._terminalGroupService.getGroupForInstance(source);\n\t\tif (!sourceGroup) {\n\t\t\treturn;\n\t\t}\n\t\tsourceGroup.removeInstance(source);\n\t\tthis._terminalEditorService.openEditor(source);\n\t}\n\n\tasync moveToTerminalView(source?: ITerminalInstance | URI, target?: ITerminalInstance, side?: 'before' | 'after'): Promise<void> {\n\t\tif (URI.isUri(source)) {\n\t\t\tsource = this.getInstanceFromResource(source);\n\t\t}\n\n\t\tif (!source) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._terminalEditorService.detachInstance(source);\n\n\t\tif (source.target !== TerminalLocation.Editor) {\n\t\t\tawait this._terminalGroupService.showPanel(true);\n\t\t\treturn;\n\t\t}\n\t\tsource.target = TerminalLocation.Panel;\n\n\t\tlet group: ITerminalGroup | undefined;\n\t\tif (target) {\n\t\t\tgroup = this._terminalGroupService.getGroupForInstance(target);\n\t\t}\n\n\t\tif (!group) {\n\t\t\tgroup = this._terminalGroupService.createGroup();\n\t\t}\n\n\t\tgroup.addInstance(source);\n\t\tthis.setActiveInstance(source);\n\t\tawait this._terminalGroupService.showPanel(true);\n\n\t\tif (target && side) {\n\t\t\tconst index = group.terminalInstances.indexOf(target) + (side === 'after' ? 1 : 0);\n\t\t\tgroup.moveInstance(source, index);\n\t\t}\n\n\t\t// Fire events\n\t\tthis._onDidChangeInstances.fire();\n\t\tthis._onDidChangeActiveGroup.fire(this._terminalGroupService.activeGroup);\n\t}\n\n\tprotected _initInstanceListeners(instance: ITerminalInstance): void {\n\t\tconst instanceDisposables: IDisposable[] = [\n\t\t\tinstance.onTitleChanged(this._onDidChangeInstanceTitle.fire, this._onDidChangeInstanceTitle),\n\t\t\tinstance.onIconChanged(this._onDidChangeInstanceIcon.fire, this._onDidChangeInstanceIcon),\n\t\t\tinstance.onIconChanged(this._onDidChangeInstanceColor.fire, this._onDidChangeInstanceColor),\n\t\t\tinstance.onProcessIdReady(this._onDidReceiveProcessId.fire, this._onDidReceiveProcessId),\n\t\t\tinstance.statusList.onDidChangePrimaryStatus(() => this._onDidChangeInstancePrimaryStatus.fire(instance)),\n\t\t\tinstance.onDimensionsChanged(() => {\n\t\t\t\tthis._onDidChangeInstanceDimensions.fire(instance);\n\t\t\t\tif (this.configHelper.config.enablePersistentSessions && this.isProcessSupportRegistered) {\n\t\t\t\t\tthis._saveState();\n\t\t\t\t}\n\t\t\t}),\n\t\t\tinstance.onMaximumDimensionsChanged(() => this._onDidMaxiumumDimensionsChange.fire(instance)),\n\t\t\tinstance.onDidInputData(this._onDidInputInstanceData.fire, this._onDidInputInstanceData),\n\t\t\tinstance.onDidFocus(this._onDidChangeActiveInstance.fire, this._onDidChangeActiveInstance),\n\t\t\tinstance.onRequestAddInstanceToGroup(async e => await this._addInstanceToGroup(instance, e)),\n\t\t\tinstance.onDidChangeSelection(this._onDidChangeSelection.fire, this._onDidChangeSelection)\n\t\t];\n\t\tinstance.onDisposed(() => dispose(instanceDisposables));\n\t}\n\n\tprivate async _addInstanceToGroup(instance: ITerminalInstance, e: IRequestAddInstanceToGroupEvent): Promise<void> {\n\t\tconst terminalIdentifier = parseTerminalUri(e.uri);\n\t\tif (terminalIdentifier.instanceId === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet sourceInstance: ITerminalInstance | undefined = this.getInstanceFromResource(e.uri);\n\n\t\t// Terminal from a different window\n\t\tif (!sourceInstance) {\n\t\t\tconst attachPersistentProcess = await this._primaryBackend?.requestDetachInstance(terminalIdentifier.workspaceId, terminalIdentifier.instanceId);\n\t\t\tif (attachPersistentProcess) {\n\t\t\t\tsourceInstance = await this.createTerminal({ config: { attachPersistentProcess }, resource: e.uri });\n\t\t\t\tthis._terminalGroupService.moveInstance(sourceInstance, instance, e.side);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// View terminals\n\t\tsourceInstance = this._terminalGroupService.getInstanceFromResource(e.uri);\n\t\tif (sourceInstance) {\n\t\t\tthis._terminalGroupService.moveInstance(sourceInstance, instance, e.side);\n\t\t\treturn;\n\t\t}\n\n\t\t// Terminal editors\n\t\tsourceInstance = this._terminalEditorService.getInstanceFromResource(e.uri);\n\t\tif (sourceInstance) {\n\t\t\tthis.moveToTerminalView(sourceInstance, instance, e.side);\n\t\t\treturn;\n\t\t}\n\t\treturn;\n\t}\n\n\tregisterProcessSupport(isSupported: boolean): void {\n\t\tif (!isSupported) {\n\t\t\treturn;\n\t\t}\n\t\tthis._processSupportContextKey.set(isSupported);\n\t\tthis._onDidRegisterProcessSupport.fire();\n\t}\n\n\t// TODO: Remove this, it should live in group/editor servioce\n\tprivate _getIndexFromId(terminalId: number): number {\n\t\tlet terminalIndex = -1;\n\t\tthis.instances.forEach((terminalInstance, i) => {\n\t\t\tif (terminalInstance.instanceId === terminalId) {\n\t\t\t\tterminalIndex = i;\n\t\t\t}\n\t\t});\n\t\tif (terminalIndex === -1) {\n\t\t\tthrow new Error(`Terminal with ID ${terminalId} does not exist (has it already been disposed?)`);\n\t\t}\n\t\treturn terminalIndex;\n\t}\n\n\tprotected async _showTerminalCloseConfirmation(singleTerminal?: boolean): Promise<boolean> {\n\t\tlet message: string;\n\t\tif (this.instances.length === 1 || singleTerminal) {\n\t\t\tmessage = nls.localize('terminalService.terminalCloseConfirmationSingular', \"Do you want to terminate the active terminal session?\");\n\t\t} else {\n\t\t\tmessage = nls.localize('terminalService.terminalCloseConfirmationPlural', \"Do you want to terminate the {0} active terminal sessions?\", this.instances.length);\n\t\t}\n\t\tconst { confirmed } = await this._dialogService.confirm({\n\t\t\ttype: 'warning',\n\t\t\tmessage,\n\t\t\tprimaryButton: nls.localize({ key: 'terminate', comment: ['&& denotes a mnemonic'] }, \"&&Terminate\")\n\t\t});\n\t\treturn !confirmed;\n\t}\n\n\tgetDefaultInstanceHost(): ITerminalInstanceHost {\n\t\tif (this.defaultLocation === TerminalLocation.Editor) {\n\t\t\treturn this._terminalEditorService;\n\t\t}\n\t\treturn this._terminalGroupService;\n\t}\n\n\tasync getInstanceHost(location: ITerminalLocationOptions | undefined): Promise<ITerminalInstanceHost> {\n\t\tif (location) {\n\t\t\tif (location === TerminalLocation.Editor) {\n\t\t\t\treturn this._terminalEditorService;\n\t\t\t} else if (typeof location === 'object') {\n\t\t\t\tif ('viewColumn' in location) {\n\t\t\t\t\treturn this._terminalEditorService;\n\t\t\t\t} else if ('parentTerminal' in location) {\n\t\t\t\t\treturn (await location.parentTerminal).target === TerminalLocation.Editor ? this._terminalEditorService : this._terminalGroupService;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn this._terminalGroupService;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tasync createTerminal(options?: ICreateTerminalOptions): Promise<ITerminalInstance> {\n\t\t// Await the initialization of available profiles as long as this is not a pty terminal or a\n\t\t// local terminal in a remote workspace as profile won't be used in those cases and these\n\t\t// terminals need to be launched before remote connections are established.\n\t\tif (this._terminalProfileService.availableProfiles.length === 0) {\n\t\t\tconst isPtyTerminal = options?.config && 'customPtyImplementation' in options.config;\n\t\t\tconst isLocalInRemoteTerminal = this._remoteAgentService.getConnection() && URI.isUri(options?.cwd) && options?.cwd.scheme === Schemas.vscodeFileResource;\n\t\t\tif (!isPtyTerminal && !isLocalInRemoteTerminal) {\n\t\t\t\tif (this._connectionState === TerminalConnectionState.Connecting) {\n\t\t\t\t\tmark(`code/terminal/willGetProfiles`);\n\t\t\t\t}\n\t\t\t\tawait this._terminalProfileService.profilesReady;\n\t\t\t\tif (this._connectionState === TerminalConnectionState.Connecting) {\n\t\t\t\t\tmark(`code/terminal/didGetProfiles`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst config = options?.config || this._terminalProfileService.getDefaultProfile();\n\t\tconst shellLaunchConfig = config && 'extensionIdentifier' in config ? {} : this._terminalInstanceService.convertProfileToShellLaunchConfig(config || {});\n\n\t\t// Get the contributed profile if it was provided\n\t\tlet contributedProfile = config && 'extensionIdentifier' in config ? config : undefined;\n\n\t\t// Get the default profile as a contributed profile if it exists\n\t\tif (!contributedProfile && (!options || !options.config)) {\n\t\t\tcontributedProfile = await this._terminalProfileService.getContributedDefaultProfile(shellLaunchConfig);\n\t\t}\n\n\t\tconst splitActiveTerminal = typeof options?.location === 'object' && 'splitActiveTerminal' in options.location ? options.location.splitActiveTerminal : typeof options?.location === 'object' ? 'parentTerminal' in options.location : false;\n\n\t\tawait this._resolveCwd(shellLaunchConfig, splitActiveTerminal, options);\n\n\t\t// Launch the contributed profile\n\t\tif (contributedProfile) {\n\t\t\tconst resolvedLocation = await this.resolveLocation(options?.location);\n\t\t\tlet location: TerminalLocation | { viewColumn: number; preserveState?: boolean } | { splitActiveTerminal: boolean } | undefined;\n\t\t\tif (splitActiveTerminal) {\n\t\t\t\tlocation = resolvedLocation === TerminalLocation.Editor ? { viewColumn: SIDE_GROUP } : { splitActiveTerminal: true };\n\t\t\t} else {\n\t\t\t\tlocation = typeof options?.location === 'object' && 'viewColumn' in options.location ? options.location : resolvedLocation;\n\t\t\t}\n\t\t\tawait this.createContributedTerminalProfile(contributedProfile.extensionIdentifier, contributedProfile.id, {\n\t\t\t\ticon: contributedProfile.icon,\n\t\t\t\tcolor: contributedProfile.color,\n\t\t\t\tlocation\n\t\t\t});\n\t\t\tconst instanceHost = resolvedLocation === TerminalLocation.Editor ? this._terminalEditorService : this._terminalGroupService;\n\t\t\tconst instance = instanceHost.instances[instanceHost.instances.length - 1];\n\t\t\tawait instance.focusWhenReady();\n\t\t\tthis._terminalHasBeenCreated.set(true);\n\t\t\treturn instance;\n\t\t}\n\n\t\tif (!shellLaunchConfig.customPtyImplementation && !this.isProcessSupportRegistered) {\n\t\t\tthrow new Error('Could not create terminal when process support is not registered');\n\t\t}\n\t\tif (shellLaunchConfig.hideFromUser) {\n\t\t\tconst instance = this._terminalInstanceService.createInstance(shellLaunchConfig, TerminalLocation.Panel);\n\t\t\tthis._backgroundedTerminalInstances.push(instance);\n\t\t\tthis._backgroundedTerminalDisposables.set(instance.instanceId, [\n\t\t\t\tinstance.onDisposed(this._onDidDisposeInstance.fire, this._onDidDisposeInstance)\n\t\t\t]);\n\t\t\tthis._terminalHasBeenCreated.set(true);\n\t\t\treturn instance;\n\t\t}\n\n\t\tthis._evaluateLocalCwd(shellLaunchConfig);\n\t\tconst location = await this.resolveLocation(options?.location) || this.defaultLocation;\n\t\tconst parent = await this._getSplitParent(options?.location);\n\t\tthis._terminalHasBeenCreated.set(true);\n\t\tif (parent) {\n\t\t\treturn this._splitTerminal(shellLaunchConfig, location, parent);\n\t\t}\n\t\treturn this._createTerminal(shellLaunchConfig, location, options);\n\t}\n\n\tasync createDetachedTerminal(options: IDetachedXTermOptions): Promise<IDetachedTerminalInstance> {\n\t\tconst ctor = await TerminalInstance.getXtermConstructor(this._keybindingService, this._contextKeyService);\n\t\tconst xterm = this._instantiationService.createInstance(\n\t\t\tXtermTerminal,\n\t\t\tctor,\n\t\t\tthis._configHelper,\n\t\t\toptions.cols,\n\t\t\toptions.rows,\n\t\t\toptions.colorProvider,\n\t\t\toptions.capabilities || new TerminalCapabilityStore(),\n\t\t\t'',\n\t\t\tundefined,\n\t\t\tfalse,\n\t\t);\n\n\t\tif (options.readonly) {\n\t\t\txterm.raw.attachCustomKeyEventHandler(() => false);\n\t\t}\n\n\t\tthis._detachedXterms.add(xterm);\n\t\tconst l = xterm.onDidDispose(() => {\n\t\t\tthis._detachedXterms.delete(xterm);\n\t\t\tl.dispose();\n\t\t});\n\n\t\treturn new DeatachedTerminal(xterm, options, this._instantiationService);\n\t}\n\n\tprivate async _resolveCwd(shellLaunchConfig: IShellLaunchConfig, splitActiveTerminal: boolean, options?: ICreateTerminalOptions): Promise<void> {\n\t\tconst cwd = shellLaunchConfig.cwd;\n\t\tif (!cwd) {\n\t\t\tif (options?.cwd) {\n\t\t\t\tshellLaunchConfig.cwd = options.cwd;\n\t\t\t} else if (splitActiveTerminal && options?.location) {\n\t\t\t\tlet parent = this.activeInstance;\n\t\t\t\tif (typeof options.location === 'object' && 'parentTerminal' in options.location) {\n\t\t\t\t\tparent = await options.location.parentTerminal;\n\t\t\t\t}\n\t\t\t\tif (!parent) {\n\t\t\t\t\tthrow new Error('Cannot split without an active instance');\n\t\t\t\t}\n\t\t\t\tshellLaunchConfig.cwd = await getCwdForSplit(this.configHelper, parent, this._workspaceContextService.getWorkspace().folders, this._commandService);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _splitTerminal(shellLaunchConfig: IShellLaunchConfig, location: TerminalLocation, parent: ITerminalInstance): ITerminalInstance {\n\t\tlet instance;\n\t\t// Use the URI from the base instance if it exists, this will correctly split local terminals\n\t\tif (typeof shellLaunchConfig.cwd !== 'object' && typeof parent.shellLaunchConfig.cwd === 'object') {\n\t\t\tshellLaunchConfig.cwd = URI.from({\n\t\t\t\tscheme: parent.shellLaunchConfig.cwd.scheme,\n\t\t\t\tauthority: parent.shellLaunchConfig.cwd.authority,\n\t\t\t\tpath: shellLaunchConfig.cwd || parent.shellLaunchConfig.cwd.path\n\t\t\t});\n\t\t}\n\t\tif (location === TerminalLocation.Editor || parent.target === TerminalLocation.Editor) {\n\t\t\tinstance = this._terminalEditorService.splitInstance(parent, shellLaunchConfig);\n\t\t} else {\n\t\t\tconst group = this._terminalGroupService.getGroupForInstance(parent);\n\t\t\tif (!group) {\n\t\t\t\tthrow new Error(`Cannot split a terminal without a group ${parent}`);\n\t\t\t}\n\t\t\tshellLaunchConfig.parentTerminalId = parent.instanceId;\n\t\t\tinstance = group.split(shellLaunchConfig);\n\t\t}\n\t\tthis._addToReconnected(instance);\n\t\treturn instance;\n\t}\n\n\tprivate _addToReconnected(instance: ITerminalInstance): void {\n\t\tif (!instance.reconnectionProperties?.ownerId) {\n\t\t\treturn;\n\t\t}\n\t\tconst reconnectedTerminals = this._reconnectedTerminals.get(instance.reconnectionProperties.ownerId);\n\t\tif (reconnectedTerminals) {\n\t\t\treconnectedTerminals.push(instance);\n\t\t} else {\n\t\t\tthis._reconnectedTerminals.set(instance.reconnectionProperties.ownerId, [instance]);\n\t\t}\n\t}\n\n\tprivate _createTerminal(shellLaunchConfig: IShellLaunchConfig, location: TerminalLocation, options?: ICreateTerminalOptions): ITerminalInstance {\n\t\tlet instance;\n\t\tconst editorOptions = this._getEditorOptions(options?.location);\n\t\tif (location === TerminalLocation.Editor) {\n\t\t\tinstance = this._terminalInstanceService.createInstance(shellLaunchConfig, TerminalLocation.Editor);\n\t\t\tthis._terminalEditorService.openEditor(instance, editorOptions);\n\t\t} else {\n\t\t\t// TODO: pass resource?\n\t\t\tconst group = this._terminalGroupService.createGroup(shellLaunchConfig);\n\t\t\tinstance = group.terminalInstances[0];\n\t\t}\n\t\tthis._addToReconnected(instance);\n\t\treturn instance;\n\t}\n\n\tasync resolveLocation(location?: ITerminalLocationOptions): Promise<TerminalLocation | undefined> {\n\t\tif (location && typeof location === 'object') {\n\t\t\tif ('parentTerminal' in location) {\n\t\t\t\t// since we don't set the target unless it's an editor terminal, this is necessary\n\t\t\t\tconst parentTerminal = await location.parentTerminal;\n\t\t\t\treturn !parentTerminal.target ? TerminalLocation.Panel : parentTerminal.target;\n\t\t\t} else if ('viewColumn' in location) {\n\t\t\t\treturn TerminalLocation.Editor;\n\t\t\t} else if ('splitActiveTerminal' in location) {\n\t\t\t\t// since we don't set the target unless it's an editor terminal, this is necessary\n\t\t\t\treturn !this._activeInstance?.target ? TerminalLocation.Panel : this._activeInstance?.target;\n\t\t\t}\n\t\t}\n\t\treturn location;\n\t}\n\n\tprivate async _getSplitParent(location?: ITerminalLocationOptions): Promise<ITerminalInstance | undefined> {\n\t\tif (location && typeof location === 'object' && 'parentTerminal' in location) {\n\t\t\treturn location.parentTerminal;\n\t\t} else if (location && typeof location === 'object' && 'splitActiveTerminal' in location) {\n\t\t\treturn this.activeInstance;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate _getEditorOptions(location?: ITerminalLocationOptions): TerminalEditorLocation | undefined {\n\t\tif (location && typeof location === 'object' && 'viewColumn' in location) {\n\t\t\tlocation.viewColumn = columnToEditorGroup(this._editorGroupsService, this._configurationService, location.viewColumn);\n\t\t\treturn location;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate _evaluateLocalCwd(shellLaunchConfig: IShellLaunchConfig) {\n\t\t// Add welcome message and title annotation for local terminals launched within remote or\n\t\t// virtual workspaces\n\t\tif (typeof shellLaunchConfig.cwd !== 'string' && shellLaunchConfig.cwd?.scheme === Schemas.file) {\n\t\t\tif (VirtualWorkspaceContext.getValue(this._contextKeyService)) {\n\t\t\t\tshellLaunchConfig.initialText = formatMessageForTerminal(nls.localize('localTerminalVirtualWorkspace', \"This shell is open to a {0}local{1} folder, NOT to the virtual folder\", '\\x1b[3m', '\\x1b[23m'), { excludeLeadingNewLine: true, loudFormatting: true });\n\t\t\t\tshellLaunchConfig.type = 'Local';\n\t\t\t} else if (this._remoteAgentService.getConnection()) {\n\t\t\t\tshellLaunchConfig.initialText = formatMessageForTerminal(nls.localize('localTerminalRemote', \"This shell is running on your {0}local{1} machine, NOT on the connected remote machine\", '\\x1b[3m', '\\x1b[23m'), { excludeLeadingNewLine: true, loudFormatting: true });\n\t\t\t\tshellLaunchConfig.type = 'Local';\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected _showBackgroundTerminal(instance: ITerminalInstance): void {\n\t\tthis._backgroundedTerminalInstances.splice(this._backgroundedTerminalInstances.indexOf(instance), 1);\n\t\tconst disposables = this._backgroundedTerminalDisposables.get(instance.instanceId);\n\t\tif (disposables) {\n\t\t\tdispose(disposables);\n\t\t}\n\t\tthis._backgroundedTerminalDisposables.delete(instance.instanceId);\n\t\tinstance.shellLaunchConfig.hideFromUser = false;\n\t\tthis._terminalGroupService.createGroup(instance);\n\n\t\t// Make active automatically if it's the first instance\n\t\tif (this.instances.length === 1) {\n\t\t\tthis._terminalGroupService.setActiveInstanceByIndex(0);\n\t\t}\n\n\t\tthis._onDidChangeInstances.fire();\n\t\tthis._onDidChangeGroups.fire();\n\t}\n\n\tasync setContainers(panelContainer: HTMLElement, terminalContainer: HTMLElement): Promise<void> {\n\t\tthis._configHelper.panelContainer = panelContainer;\n\t\tthis._terminalGroupService.setContainer(terminalContainer);\n\t}\n\n\tgetEditingTerminal(): ITerminalInstance | undefined {\n\t\treturn this._editingTerminal;\n\t}\n\n\tsetEditingTerminal(instance: ITerminalInstance | undefined) {\n\t\tthis._editingTerminal = instance;\n\t}\n\n\tonInstanceEvent<T>(getEvent: (instance: ITerminalInstance) => Event<T>): IDynamicListEventMultiplexer<T> {\n\t\treturn new DynamicListEventMultiplexer(this.instances, this.onDidCreateInstance, this.onDidDisposeInstance, getEvent);\n\t}\n\n\tonInstanceCapabilityEvent<T extends TerminalCapability, K>(capabilityId: T, getEvent: (capability: ITerminalCapabilityImplMap[T]) => Event<K>): IDynamicListEventMultiplexer<{ instance: ITerminalInstance; data: K }> {\n\t\treturn createInstanceCapabilityEventMultiplexer(this.instances, this.onDidCreateInstance, this.onDidDisposeInstance, capabilityId, getEvent);\n\t}\n}\n\nclass TerminalEditorStyle extends Themable {\n\tprivate _styleElement: HTMLElement;\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\t@ITerminalService private readonly _terminalService: ITerminalService,\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t\t@ITerminalProfileService private readonly _terminalProfileService: ITerminalProfileService,\n\t\t@IEditorService private readonly _editorService: IEditorService\n\t) {\n\t\tsuper(_themeService);\n\t\tthis._registerListeners();\n\t\tthis._styleElement = document.createElement('style');\n\t\tcontainer.appendChild(this._styleElement);\n\t\tthis._register(toDisposable(() => container.removeChild(this._styleElement)));\n\t\tthis.updateStyles();\n\t}\n\n\tprivate _registerListeners(): void {\n\t\tthis._register(this._terminalService.onDidChangeInstanceIcon(() => this.updateStyles()));\n\t\tthis._register(this._terminalService.onDidChangeInstanceColor(() => this.updateStyles()));\n\t\tthis._register(this._terminalService.onDidCreateInstance(() => this.updateStyles()));\n\t\tthis._register(this._editorService.onDidActiveEditorChange(() => {\n\t\t\tif (this._editorService.activeEditor instanceof TerminalEditorInput) {\n\t\t\t\tthis.updateStyles();\n\t\t\t}\n\t\t}));\n\t\tthis._register(this._editorService.onDidCloseEditor(() => {\n\t\t\tif (this._editorService.activeEditor instanceof TerminalEditorInput) {\n\t\t\t\tthis.updateStyles();\n\t\t\t}\n\t\t}));\n\t\tthis._register(this._terminalProfileService.onDidChangeAvailableProfiles(() => this.updateStyles()));\n\t}\n\n\toverride updateStyles(): void {\n\t\tsuper.updateStyles();\n\t\tconst colorTheme = this._themeService.getColorTheme();\n\n\t\t// TODO: add a rule collector to avoid duplication\n\t\tlet css = '';\n\n\t\tconst productIconTheme = this._themeService.getProductIconTheme();\n\n\t\t// Add icons\n\t\tfor (const instance of this._terminalService.instances) {\n\t\t\tconst icon = instance.icon;\n\t\t\tif (!icon) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlet uri = undefined;\n\t\t\tif (icon instanceof URI) {\n\t\t\t\turi = icon;\n\t\t\t} else if (icon instanceof Object && 'light' in icon && 'dark' in icon) {\n\t\t\t\turi = colorTheme.type === ColorScheme.LIGHT ? icon.light : icon.dark;\n\t\t\t}\n\t\t\tconst iconClasses = getUriClasses(instance, colorTheme.type);\n\t\t\tif (uri instanceof URI && iconClasses && iconClasses.length > 1) {\n\t\t\t\tcss += (\n\t\t\t\t\t`.monaco-workbench .terminal-tab.${iconClasses[0]}::before` +\n\t\t\t\t\t`{background-image: ${dom.asCSSUrl(uri)};}`\n\t\t\t\t);\n\t\t\t}\n\t\t\tif (ThemeIcon.isThemeIcon(icon)) {\n\t\t\t\tconst iconRegistry = getIconRegistry();\n\t\t\t\tconst iconContribution = iconRegistry.getIcon(icon.id);\n\t\t\t\tif (iconContribution) {\n\t\t\t\t\tconst def = productIconTheme.getIcon(iconContribution);\n\t\t\t\t\tif (def) {\n\t\t\t\t\t\tcss += (\n\t\t\t\t\t\t\t`.monaco-workbench .terminal-tab.codicon-${icon.id}::before` +\n\t\t\t\t\t\t\t`{content: '${def.fontCharacter}' !important; font-family: ${dom.asCSSPropertyValue(def.font?.id ?? 'codicon')} !important;}`\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add colors\n\t\tconst iconForegroundColor = colorTheme.getColor(iconForeground);\n\t\tif (iconForegroundColor) {\n\t\t\tcss += `.monaco-workbench .show-file-icons .file-icon.terminal-tab::before { color: ${iconForegroundColor}; }`;\n\t\t}\n\n\t\tcss += getColorStyleContent(colorTheme, true);\n\t\tthis._styleElement.textContent = css;\n\t}\n}\n"]}