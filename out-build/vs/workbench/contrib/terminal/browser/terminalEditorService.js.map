{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/browser/terminalEditorService.ts"],"names":[],"mappings":"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","file":"terminalEditorService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable, dispose, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { EditorActivation } from 'vs/platform/editor/common/editor';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IShellLaunchConfig, TerminalLocation } from 'vs/platform/terminal/common/terminal';\nimport { IEditorPane } from 'vs/workbench/common/editor';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { IDeserializedTerminalEditorInput, ITerminalEditorService, ITerminalInstance, ITerminalInstanceService, TerminalEditorLocation } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { TerminalEditorInput } from 'vs/workbench/contrib/terminal/browser/terminalEditorInput';\nimport { getInstanceFromResource } from 'vs/workbench/contrib/terminal/browser/terminalUri';\nimport { TerminalContextKeys } from 'vs/workbench/contrib/terminal/common/terminalContextKey';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IEditorService, ACTIVE_GROUP, SIDE_GROUP } from 'vs/workbench/services/editor/common/editorService';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\n\nexport class TerminalEditorService extends Disposable implements ITerminalEditorService {\n\tdeclare _serviceBrand: undefined;\n\n\tinstances: ITerminalInstance[] = [];\n\tprivate _activeInstanceIndex: number = -1;\n\tprivate _isShuttingDown = false;\n\tprivate _activeOpenEditorRequest?: { instanceId: number; promise: Promise<IEditorPane | undefined> };\n\n\tprivate _terminalEditorActive: IContextKey<boolean>;\n\n\tprivate _editorInputs: Map</*resource*/string, TerminalEditorInput> = new Map();\n\tprivate _instanceDisposables: Map</*resource*/string, IDisposable[]> = new Map();\n\n\tprivate readonly _onDidDisposeInstance = this._register(new Emitter<ITerminalInstance>());\n\treadonly onDidDisposeInstance = this._onDidDisposeInstance.event;\n\tprivate readonly _onDidFocusInstance = this._register(new Emitter<ITerminalInstance>());\n\treadonly onDidFocusInstance = this._onDidFocusInstance.event;\n\tprivate readonly _onDidChangeInstanceCapability = this._register(new Emitter<ITerminalInstance>());\n\treadonly onDidChangeInstanceCapability = this._onDidChangeInstanceCapability.event;\n\tprivate readonly _onDidChangeActiveInstance = this._register(new Emitter<ITerminalInstance | undefined>());\n\treadonly onDidChangeActiveInstance = this._onDidChangeActiveInstance.event;\n\tprivate readonly _onDidChangeInstances = this._register(new Emitter<void>());\n\treadonly onDidChangeInstances = this._onDidChangeInstances.event;\n\n\tconstructor(\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IEditorGroupsService private readonly _editorGroupsService: IEditorGroupsService,\n\t\t@ITerminalInstanceService private readonly _terminalInstanceService: ITerminalInstanceService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService\n\t) {\n\t\tsuper();\n\t\tthis._terminalEditorActive = TerminalContextKeys.terminalEditorActive.bindTo(contextKeyService);\n\t\tthis._register(toDisposable(() => {\n\t\t\tfor (const d of this._instanceDisposables.values()) {\n\t\t\t\tdispose(d);\n\t\t\t}\n\t\t}));\n\t\tthis._register(lifecycleService.onWillShutdown(() => this._isShuttingDown = true));\n\t\tthis._register(this._editorService.onDidActiveEditorChange(() => {\n\t\t\tconst activeEditor = this._editorService.activeEditor;\n\t\t\tconst instance = activeEditor instanceof TerminalEditorInput ? activeEditor?.terminalInstance : undefined;\n\t\t\tconst terminalEditorActive = !!instance && activeEditor instanceof TerminalEditorInput;\n\t\t\tthis._terminalEditorActive.set(terminalEditorActive);\n\t\t\tif (terminalEditorActive) {\n\t\t\t\tactiveEditor?.setGroup(this._editorService.activeEditorPane?.group);\n\t\t\t\tthis.setActiveInstance(instance);\n\t\t\t} else {\n\t\t\t\tfor (const instance of this.instances) {\n\t\t\t\t\tinstance.resetFocusContextKey();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t\tthis._register(this._editorService.onDidVisibleEditorsChange(() => {\n\t\t\t// add any terminal editors created via the editor service split command\n\t\t\tconst knownIds = this.instances.map(i => i.instanceId);\n\t\t\tconst terminalEditors = this._getActiveTerminalEditors();\n\t\t\tconst unknownEditor = terminalEditors.find(input => {\n\t\t\t\tconst inputId = input instanceof TerminalEditorInput ? input.terminalInstance?.instanceId : undefined;\n\t\t\t\tif (inputId === undefined) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\treturn !knownIds.includes(inputId);\n\t\t\t});\n\t\t\tif (unknownEditor instanceof TerminalEditorInput && unknownEditor.terminalInstance) {\n\t\t\t\tthis._editorInputs.set(unknownEditor.terminalInstance.resource.path, unknownEditor);\n\t\t\t\tthis.instances.push(unknownEditor.terminalInstance);\n\t\t\t}\n\t\t}));\n\n\t\t// Remove the terminal from the managed instances when the editor closes. This fires when\n\t\t// dragging and dropping to another editor or closing the editor via cmd/ctrl+w.\n\t\tthis._register(this._editorService.onDidCloseEditor(e => {\n\t\t\tconst instance = e.editor instanceof TerminalEditorInput ? e.editor.terminalInstance : undefined;\n\t\t\tif (instance) {\n\t\t\t\tconst instanceIndex = this.instances.findIndex(e => e === instance);\n\t\t\t\tif (instanceIndex !== -1) {\n\t\t\t\t\tconst wasActiveInstance = this.instances[instanceIndex] === this.activeInstance;\n\t\t\t\t\tthis._removeInstance(instance);\n\t\t\t\t\tif (wasActiveInstance) {\n\t\t\t\t\t\tthis.setActiveInstance(undefined);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate _getActiveTerminalEditors(): EditorInput[] {\n\t\treturn this._editorService.visibleEditors.filter(e => e instanceof TerminalEditorInput && e.terminalInstance?.instanceId);\n\t}\n\n\tget activeInstance(): ITerminalInstance | undefined {\n\t\tif (this.instances.length === 0 || this._activeInstanceIndex === -1) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this.instances[this._activeInstanceIndex];\n\t}\n\n\tsetActiveInstance(instance: ITerminalInstance | undefined): void {\n\t\tthis._activeInstanceIndex = instance ? this.instances.findIndex(e => e === instance) : -1;\n\t\tthis._onDidChangeActiveInstance.fire(this.activeInstance);\n\t}\n\n\tasync focusActiveInstance(): Promise<void> {\n\t\treturn this.activeInstance?.focusWhenReady(true);\n\t}\n\n\tasync openEditor(instance: ITerminalInstance, editorOptions?: TerminalEditorLocation): Promise<void> {\n\t\tconst resource = this.resolveResource(instance);\n\t\tif (resource) {\n\t\t\tawait this._activeOpenEditorRequest?.promise;\n\t\t\tthis._activeOpenEditorRequest = {\n\t\t\t\tinstanceId: instance.instanceId,\n\t\t\t\tpromise: this._editorService.openEditor({\n\t\t\t\t\tresource,\n\t\t\t\t\tdescription: instance.description || instance.shellLaunchConfig.type,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tpinned: true,\n\t\t\t\t\t\tforceReload: true,\n\t\t\t\t\t\tpreserveFocus: editorOptions?.preserveFocus\n\t\t\t\t\t}\n\t\t\t\t}, editorOptions?.viewColumn ?? ACTIVE_GROUP)\n\t\t\t};\n\t\t\tawait this._activeOpenEditorRequest?.promise;\n\t\t\tthis._activeOpenEditorRequest = undefined;\n\t\t}\n\t}\n\n\tresolveResource(instance: ITerminalInstance): URI {\n\t\tconst resource = instance.resource;\n\t\tconst inputKey = resource.path;\n\t\tconst cachedEditor = this._editorInputs.get(inputKey);\n\n\t\tif (cachedEditor) {\n\t\t\treturn cachedEditor.resource;\n\t\t}\n\n\t\tinstance.target = TerminalLocation.Editor;\n\t\tconst input = this._instantiationService.createInstance(TerminalEditorInput, resource, instance);\n\t\tthis._registerInstance(inputKey, input, instance);\n\t\treturn input.resource;\n\t}\n\n\tgetInputFromResource(resource: URI): TerminalEditorInput {\n\t\tconst input = this._editorInputs.get(resource.path);\n\t\tif (!input) {\n\t\t\tthrow new Error(`Could not get input from resource: ${resource.path}`);\n\t\t}\n\t\treturn input;\n\t}\n\n\tprivate _registerInstance(inputKey: string, input: TerminalEditorInput, instance: ITerminalInstance): void {\n\t\tthis._editorInputs.set(inputKey, input);\n\t\tthis._instanceDisposables.set(inputKey, [\n\t\t\tinstance.onDidFocus(this._onDidFocusInstance.fire, this._onDidFocusInstance),\n\t\t\tinstance.onDisposed(this._onDidDisposeInstance.fire, this._onDidDisposeInstance),\n\t\t\tinstance.capabilities.onDidAddCapabilityType(() => this._onDidChangeInstanceCapability.fire(instance)),\n\t\t\tinstance.capabilities.onDidRemoveCapabilityType(() => this._onDidChangeInstanceCapability.fire(instance)),\n\t\t]);\n\t\tthis.instances.push(instance);\n\t\tthis._onDidChangeInstances.fire();\n\t}\n\n\tprivate _removeInstance(instance: ITerminalInstance) {\n\t\tconst inputKey = instance.resource.path;\n\t\tthis._editorInputs.delete(inputKey);\n\t\tconst instanceIndex = this.instances.findIndex(e => e === instance);\n\t\tif (instanceIndex !== -1) {\n\t\t\tthis.instances.splice(instanceIndex, 1);\n\t\t}\n\t\tconst disposables = this._instanceDisposables.get(inputKey);\n\t\tthis._instanceDisposables.delete(inputKey);\n\t\tif (disposables) {\n\t\t\tdispose(disposables);\n\t\t}\n\t\tthis._onDidChangeInstances.fire();\n\t}\n\n\tgetInstanceFromResource(resource?: URI): ITerminalInstance | undefined {\n\t\treturn getInstanceFromResource(this.instances, resource);\n\t}\n\n\tsplitInstance(instanceToSplit: ITerminalInstance, shellLaunchConfig: IShellLaunchConfig = {}): ITerminalInstance {\n\t\tif (instanceToSplit.target === TerminalLocation.Editor) {\n\t\t\t// Make sure the instance to split's group is active\n\t\t\tconst group = this._editorInputs.get(instanceToSplit.resource.path)?.group;\n\t\t\tif (group) {\n\t\t\t\tthis._editorGroupsService.activateGroup(group);\n\t\t\t}\n\t\t}\n\t\tconst instance = this._terminalInstanceService.createInstance(shellLaunchConfig, TerminalLocation.Editor);\n\t\tconst resource = this.resolveResource(instance);\n\t\tif (resource) {\n\t\t\tthis._editorService.openEditor({\n\t\t\t\tresource: URI.revive(resource),\n\t\t\t\tdescription: instance.description,\n\t\t\t\toptions: {\n\t\t\t\t\tpinned: true,\n\t\t\t\t\tforceReload: true\n\t\t\t\t}\n\t\t\t}, SIDE_GROUP);\n\t\t}\n\t\treturn instance;\n\t}\n\n\treviveInput(deserializedInput: IDeserializedTerminalEditorInput): EditorInput {\n\t\tif ('pid' in deserializedInput) {\n\t\t\tconst newDeserializedInput = { ...deserializedInput, findRevivedId: true };\n\t\t\tconst instance = this._terminalInstanceService.createInstance({ attachPersistentProcess: newDeserializedInput }, TerminalLocation.Editor);\n\t\t\tconst input = this._instantiationService.createInstance(TerminalEditorInput, instance.resource, instance);\n\t\t\tthis._registerInstance(instance.resource.path, input, instance);\n\t\t\treturn input;\n\t\t} else {\n\t\t\tthrow new Error(`Could not revive terminal editor input, ${deserializedInput}`);\n\t\t}\n\t}\n\n\tdetachInstance(instance: ITerminalInstance) {\n\t\tconst inputKey = instance.resource.path;\n\t\tconst editorInput = this._editorInputs.get(inputKey);\n\t\teditorInput?.detachInstance();\n\t\tthis._removeInstance(instance);\n\t\t// Don't dispose the input when shutting down to avoid layouts in the editor area\n\t\tif (!this._isShuttingDown) {\n\t\t\teditorInput?.dispose();\n\t\t}\n\t}\n\n\tasync revealActiveEditor(preserveFocus?: boolean): Promise<void> {\n\t\tconst instance = this.activeInstance;\n\t\tif (!instance) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If there is an active openEditor call for this instance it will be revealed by that\n\t\tif (this._activeOpenEditorRequest?.instanceId === instance.instanceId) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editorInput = this._editorInputs.get(instance.resource.path)!;\n\t\tthis._editorService.openEditor(\n\t\t\teditorInput,\n\t\t\t{\n\t\t\t\tpinned: true,\n\t\t\t\tforceReload: true,\n\t\t\t\tpreserveFocus,\n\t\t\t\tactivation: EditorActivation.PRESERVE\n\t\t\t}\n\t\t);\n\t}\n}\n"]}