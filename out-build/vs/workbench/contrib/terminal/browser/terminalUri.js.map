{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/browser/terminalUri.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,SAAgB,IAAI,CAAa,QAAa;QAC7C,MAAM,CAAC,EAAE,WAAW,EAAE,UAAU,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC7D,IAAI,CAAC,WAAW,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;YACjD,MAAM,IAAI,KAAK,CAAC,6CAA6C,QAAQ,EAAE,CAAC,CAAC;SACzE;QACD,OAAO,EAAE,WAAW,EAAE,UAAU,EAAE,MAAM,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;IACjE,CAAC;IAND,oBAMC;IAED,SAAgB,IAAI,CAAW,WAAmB,EAAE,UAAkB,EAAE,KAAc;QACrF,OAAO,SAAG,CAAC,IAAI,CAAC;YACf,MAAM,EAAE,iBAAO,CAAC,cAAc;YAC9B,IAAI,EAAE,IAAI,WAAW,IAAI,UAAU,EAAE;YACrC,QAAQ,EAAE,KAAK,IAAI,SAAS;SAC5B,CAAC,CAAC;IACJ,CAAC;IAND,oBAMC;IAWD,SAAgB,IAAI,CAA8B,KAAwB;QACzE,MAAM,SAAS,GAAG,KAAK,CAAC,YAAY,EAAE,OAAO,mDAAiC,CAAC;QAC/E,IAAI,SAAS,EAAE;YACd,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YACnC,MAAM,MAAM,GAAG,EAAE,CAAC;YAClB,KAAK,MAAM,KAAK,IAAI,IAAI,EAAE;gBACzB,MAAM,CAAC,IAAI,CAAC,SAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;aAC9B;YACD,OAAO,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC;SAChD;QACD,OAAO,SAAS,CAAC;IAClB,CAAC;IAXD,oBAWC;IAED,SAAgB,IAAI,CAAmE,SAAc,EAAE,QAAyB;QAC/H,IAAI,QAAQ,EAAE;YACb,KAAK,MAAM,QAAQ,IAAI,SAAS,EAAE;gBACjC,yFAAyF;gBACzF,gFAAgF;gBAChF,IAAI,QAAQ,CAAC,QAAQ,CAAC,IAAI,KAAK,QAAQ,CAAC,IAAI,EAAE;oBAC7C,OAAO,QAAQ,CAAC;iBAChB;aACD;SACD;QACD,OAAO,SAAS,CAAC;IAClB,CAAC;IAXD,oBAWC","file":"terminalUri.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { ITerminalInstance, TerminalDataTransfers } from 'vs/workbench/contrib/terminal/browser/terminal';\n\nexport function parseTerminalUri(resource: URI): ITerminalIdentifier {\n\tconst [, workspaceId, instanceId] = resource.path.split('/');\n\tif (!workspaceId || !Number.parseInt(instanceId)) {\n\t\tthrow new Error(`Could not parse terminal uri for resource ${resource}`);\n\t}\n\treturn { workspaceId, instanceId: Number.parseInt(instanceId) };\n}\n\nexport function getTerminalUri(workspaceId: string, instanceId: number, title?: string): URI {\n\treturn URI.from({\n\t\tscheme: Schemas.vscodeTerminal,\n\t\tpath: `/${workspaceId}/${instanceId}`,\n\t\tfragment: title || undefined,\n\t});\n}\n\nexport interface ITerminalIdentifier {\n\tworkspaceId: string;\n\tinstanceId: number | undefined;\n}\n\nexport interface IPartialDragEvent {\n\tdataTransfer: Pick<DataTransfer, 'getData'> | null;\n}\n\nexport function getTerminalResourcesFromDragEvent(event: IPartialDragEvent): URI[] | undefined {\n\tconst resources = event.dataTransfer?.getData(TerminalDataTransfers.Terminals);\n\tif (resources) {\n\t\tconst json = JSON.parse(resources);\n\t\tconst result = [];\n\t\tfor (const entry of json) {\n\t\t\tresult.push(URI.parse(entry));\n\t\t}\n\t\treturn result.length === 0 ? undefined : result;\n\t}\n\treturn undefined;\n}\n\nexport function getInstanceFromResource<T extends Pick<ITerminalInstance, 'resource'>>(instances: T[], resource: URI | undefined): T | undefined {\n\tif (resource) {\n\t\tfor (const instance of instances) {\n\t\t\t// Note that the URI's workspace and instance id might not originally be from this window\n\t\t\t// Don't bother checking the scheme and assume instances only contains terminals\n\t\t\tif (instance.resource.path === resource.path) {\n\t\t\t\treturn instance;\n\t\t\t}\n\t\t}\n\t}\n\treturn undefined;\n}\n"]}