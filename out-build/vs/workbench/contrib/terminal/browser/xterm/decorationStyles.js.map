{"version":3,"sources":["vs/workbench/contrib/terminal/browser/xterm/decorationStyles.ts"],"names":[],"mappings":"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","file":"decorationStyles.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from 'vs/base/browser/dom';\nimport { Delayer } from 'vs/base/common/async';\nimport { fromNow } from 'vs/base/common/date';\nimport { MarkdownString } from 'vs/base/common/htmlContent';\nimport { combinedDisposable, Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { localize } from 'vs/nls';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { ITerminalCommand } from 'vs/platform/terminal/common/capabilities/capabilities';\nimport { TerminalSettingId } from 'vs/platform/terminal/common/terminal';\nimport { IHoverService } from 'vs/workbench/services/hover/browser/hover';\n\nconst enum DecorationStyles {\n\tDefaultDimension = 16,\n\tMarginLeft = -17,\n}\n\nexport const enum DecorationSelector {\n\tCommandDecoration = 'terminal-command-decoration',\n\tHide = 'hide',\n\tErrorColor = 'error',\n\tDefaultColor = 'default-color',\n\tDefault = 'default',\n\tCodicon = 'codicon',\n\tXtermDecoration = 'xterm-decoration',\n\tOverviewRuler = '.xterm-decoration-overview-ruler',\n\tQuickFix = 'quick-fix'\n}\n\nexport class TerminalDecorationHoverManager extends Disposable {\n\tprivate _hoverDelayer: Delayer<void>;\n\tprivate _contextMenuVisible: boolean = false;\n\n\tconstructor(@IHoverService private readonly _hoverService: IHoverService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService) {\n\t\tsuper();\n\t\tthis._register(contextMenuService.onDidShowContextMenu(() => this._contextMenuVisible = true));\n\t\tthis._register(contextMenuService.onDidHideContextMenu(() => this._contextMenuVisible = false));\n\t\tthis._hoverDelayer = this._register(new Delayer(configurationService.getValue('workbench.hover.delay')));\n\t}\n\n\tpublic hideHover() {\n\t\tthis._hoverDelayer.cancel();\n\t\tthis._hoverService.hideHover();\n\t}\n\n\tcreateHover(element: HTMLElement, command: ITerminalCommand | undefined, hoverMessage?: string): IDisposable {\n\t\treturn combinedDisposable(\n\t\t\tdom.addDisposableListener(element, dom.EventType.MOUSE_ENTER, () => {\n\t\t\t\tif (this._contextMenuVisible) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._hoverDelayer.trigger(() => {\n\t\t\t\t\tlet hoverContent = `${localize('terminalPromptContextMenu', \"Show Command Actions\")}`;\n\t\t\t\t\thoverContent += '\\n\\n---\\n\\n';\n\t\t\t\t\tif (!command) {\n\t\t\t\t\t\tif (hoverMessage) {\n\t\t\t\t\t\t\thoverContent = hoverMessage;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (command.markProperties || hoverMessage) {\n\t\t\t\t\t\tif (command.markProperties?.hoverMessage || hoverMessage) {\n\t\t\t\t\t\t\thoverContent = command.markProperties?.hoverMessage || hoverMessage || '';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (command.exitCode) {\n\t\t\t\t\t\tif (command.exitCode === -1) {\n\t\t\t\t\t\t\thoverContent += localize('terminalPromptCommandFailed', 'Command executed {0} and failed', fromNow(command.timestamp, true));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\thoverContent += localize('terminalPromptCommandFailedWithExitCode', 'Command executed {0} and failed (Exit Code {1})', fromNow(command.timestamp, true), command.exitCode);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\thoverContent += localize('terminalPromptCommandSuccess', 'Command executed {0}', fromNow(command.timestamp, true));\n\t\t\t\t\t}\n\t\t\t\t\tthis._hoverService.showHover({ content: new MarkdownString(hoverContent), target: element });\n\t\t\t\t});\n\t\t\t}),\n\t\t\tdom.addDisposableListener(element, dom.EventType.MOUSE_LEAVE, () => this.hideHover()),\n\t\t\tdom.addDisposableListener(element, dom.EventType.MOUSE_OUT, () => this.hideHover())\n\t\t);\n\t}\n\n}\n\nexport function updateLayout(configurationService: IConfigurationService, element?: HTMLElement): void {\n\tif (!element) {\n\t\treturn;\n\t}\n\tconst fontSize = configurationService.inspect(TerminalSettingId.FontSize).value;\n\tconst defaultFontSize = configurationService.inspect(TerminalSettingId.FontSize).defaultValue;\n\tconst lineHeight = configurationService.inspect(TerminalSettingId.LineHeight).value;\n\tif (typeof fontSize === 'number' && typeof defaultFontSize === 'number' && typeof lineHeight === 'number') {\n\t\tconst scalar = (fontSize / defaultFontSize) <= 1 ? (fontSize / defaultFontSize) : 1;\n\t\t// must be inlined to override the inlined styles from xterm\n\t\telement.style.width = `${scalar * DecorationStyles.DefaultDimension}px`;\n\t\telement.style.height = `${scalar * DecorationStyles.DefaultDimension * lineHeight}px`;\n\t\telement.style.fontSize = `${scalar * DecorationStyles.DefaultDimension}px`;\n\t\telement.style.marginLeft = `${scalar * DecorationStyles.MarginLeft}px`;\n\t}\n}\n"]}