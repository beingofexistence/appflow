{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/browser/xterm/lineDataEventAddon.ts"],"names":[],"mappings":"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","file":"lineDataEventAddon.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { OperatingSystem } from 'vs/base/common/platform';\nimport type { Terminal as XTermTerminal, IBuffer, ITerminalAddon } from 'xterm';\n\n/**\n * Provides extensions to the xterm object in a modular, testable way.\n */\nexport class LineDataEventAddon extends Disposable implements ITerminalAddon {\n\n\tprivate _xterm?: XTermTerminal;\n\tprivate _isOsSet = false;\n\n\tprivate readonly _onLineData = this._register(new Emitter<string>());\n\treadonly onLineData = this._onLineData.event;\n\n\tconstructor(private readonly _initializationPromise?: Promise<void>) {\n\t\tsuper();\n\t}\n\n\tasync activate(xterm: XTermTerminal) {\n\t\tthis._xterm = xterm;\n\n\t\t// If there is an initialization promise, wait for it before registering the event\n\t\tawait this._initializationPromise;\n\n\t\t// Fire onLineData when a line feed occurs, taking into account wrapped lines\n\t\tthis._register(xterm.onLineFeed(() => {\n\t\t\tconst buffer = xterm.buffer;\n\t\t\tconst newLine = buffer.active.getLine(buffer.active.baseY + buffer.active.cursorY);\n\t\t\tif (newLine && !newLine.isWrapped) {\n\t\t\t\tthis._sendLineData(buffer.active, buffer.active.baseY + buffer.active.cursorY - 1);\n\t\t\t}\n\t\t}));\n\n\t\t// Fire onLineData when disposing object to flush last line\n\t\tthis._register(toDisposable(() => {\n\t\t\tconst buffer = xterm.buffer;\n\t\t\tthis._sendLineData(buffer.active, buffer.active.baseY + buffer.active.cursorY);\n\t\t}));\n\t}\n\n\tsetOperatingSystem(os: OperatingSystem) {\n\t\tif (this._isOsSet || !this._xterm) {\n\t\t\treturn;\n\t\t}\n\t\tthis._isOsSet = true;\n\n\t\t// Force line data to be sent when the cursor is moved, the main purpose for\n\t\t// this is because ConPTY will often not do a line feed but instead move the\n\t\t// cursor, in which case we still want to send the current line's data to tasks.\n\t\tif (os === OperatingSystem.Windows) {\n\t\t\tconst xterm = this._xterm;\n\t\t\tthis._register(xterm.parser.registerCsiHandler({ final: 'H' }, () => {\n\t\t\t\tconst buffer = xterm.buffer;\n\t\t\t\tthis._sendLineData(buffer.active, buffer.active.baseY + buffer.active.cursorY);\n\t\t\t\treturn false;\n\t\t\t}));\n\t\t}\n\t}\n\n\tprivate _sendLineData(buffer: IBuffer, lineIndex: number): void {\n\t\tlet line = buffer.getLine(lineIndex);\n\t\tif (!line) {\n\t\t\treturn;\n\t\t}\n\t\tlet lineData = line.translateToString(true);\n\t\twhile (lineIndex > 0 && line.isWrapped) {\n\t\t\tline = buffer.getLine(--lineIndex);\n\t\t\tif (!line) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlineData = line.translateToString(false) + lineData;\n\t\t}\n\t\tthis._onLineData.fire(lineData);\n\t}\n}\n"]}