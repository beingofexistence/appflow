{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/browser/terminalEditorSerializer.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAQzF,IAAM,IAAI,GAAV,MAAM,IAAI;QAChB,YAC0C,CAA4B;YAA5B,MAAC,GAAD,CAAC,CAA2B;QAClE,CAAC;QAEE,YAAY,CAAC,WAAiB;YACpC,OAAO,CAAC,CAAC,WAAW,CAAC,gBAAgB,EAAE,mBAAmB,CAAC;QAC5D,CAAC;QAEM,SAAS,CAAC,WAAiB;YACjC,IAAI,CAAC,WAAW,CAAC,gBAAgB,EAAE,mBAAmB,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,aAAa,EAAE;gBACtG,OAAO;aACP;YACD,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAO,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACxE,OAAO,IAAI,CAAC;QACb,CAAC;QAEM,WAAW,CAAC,oBAAyB,EAAoB,qBAA6B;YAC5F,MAAM,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;YAC3D,OAAO,IAAI,CAAC,CAAC,CAAsB,WAAW,CAAC,gBAAgB,CAAC,CAAC;QAClE,CAAC;QAEO,CAAC,CAAO,QAA2B;YAC1C,OAAO;gBACN,EAAE,EAAE,QAAQ,CAAC,mBAAoB;gBACjC,GAAG,EAAE,QAAQ,CAAC,SAAS,IAAI,CAAC;gBAC5B,KAAK,EAAE,QAAQ,CAAC,KAAK;gBACrB,WAAW,EAAE,QAAQ,CAAC,WAAW;gBACjC,GAAG,EAAE,EAAE;gBACP,IAAI,EAAE,QAAQ,CAAC,IAAI;gBACnB,KAAK,EAAE,QAAQ,CAAC,KAAK;gBACrB,iBAAiB,EAAE,QAAQ,CAAC,iBAAiB;gBAC7C,iBAAiB,EAAE,QAAQ,CAAC,iBAAiB,CAAC,iBAAiB;gBAC/D,YAAY,EAAE,QAAQ,CAAC,iBAAiB,CAAC,YAAY;gBACrD,sBAAsB,EAAE,QAAQ,CAAC,iBAAiB,CAAC,sBAAsB;gBACzE,qBAAqB,EAAE,QAAQ,CAAC,qBAAqB;aACrD,CAAC;QACH,CAAC;KACD,CAAA;IAtCY,oBAAI;mBAAJ,IAAI;QAEd,WAAA,eAAI,CAAA;OAFM,IAAI,CAsChB","file":"terminalEditorSerializer.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IEditorSerializer } from 'vs/workbench/common/editor';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { ISerializedTerminalEditorInput, ITerminalEditorService, ITerminalInstance } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { TerminalEditorInput } from 'vs/workbench/contrib/terminal/browser/terminalEditorInput';\n\nexport class TerminalInputSerializer implements IEditorSerializer {\n\tconstructor(\n\t\t@ITerminalEditorService private readonly _terminalEditorService: ITerminalEditorService\n\t) { }\n\n\tpublic canSerialize(editorInput: TerminalEditorInput): boolean {\n\t\treturn !!editorInput.terminalInstance?.persistentProcessId;\n\t}\n\n\tpublic serialize(editorInput: TerminalEditorInput): string | undefined {\n\t\tif (!editorInput.terminalInstance?.persistentProcessId || !editorInput.terminalInstance.shouldPersist) {\n\t\t\treturn;\n\t\t}\n\t\tconst term = JSON.stringify(this._toJson(editorInput.terminalInstance));\n\t\treturn term;\n\t}\n\n\tpublic deserialize(instantiationService: IInstantiationService, serializedEditorInput: string): EditorInput | undefined {\n\t\tconst terminalInstance = JSON.parse(serializedEditorInput);\n\t\treturn this._terminalEditorService.reviveInput(terminalInstance);\n\t}\n\n\tprivate _toJson(instance: ITerminalInstance): ISerializedTerminalEditorInput {\n\t\treturn {\n\t\t\tid: instance.persistentProcessId!,\n\t\t\tpid: instance.processId || 0,\n\t\t\ttitle: instance.title,\n\t\t\ttitleSource: instance.titleSource,\n\t\t\tcwd: '',\n\t\t\ticon: instance.icon,\n\t\t\tcolor: instance.color,\n\t\t\thasChildProcesses: instance.hasChildProcesses,\n\t\t\tisFeatureTerminal: instance.shellLaunchConfig.isFeatureTerminal,\n\t\t\thideFromUser: instance.shellLaunchConfig.hideFromUser,\n\t\t\treconnectionProperties: instance.shellLaunchConfig.reconnectionProperties,\n\t\t\tshellIntegrationNonce: instance.shellIntegrationNonce\n\t\t};\n\t}\n}\n"]}