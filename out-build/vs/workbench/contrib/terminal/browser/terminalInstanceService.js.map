{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/browser/terminalInstanceService.ts"],"names":[],"mappings":"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","file":"terminalInstanceService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITerminalInstance, ITerminalInstanceService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IShellLaunchConfig, ITerminalBackend, ITerminalBackendRegistry, ITerminalProfile, TerminalExtensions, TerminalLocation } from 'vs/platform/terminal/common/terminal';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { TerminalInstance } from 'vs/workbench/contrib/terminal/browser/terminalInstance';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { TerminalConfigHelper } from 'vs/workbench/contrib/terminal/browser/terminalConfigHelper';\nimport { URI } from 'vs/base/common/uri';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { TerminalContextKeys } from 'vs/workbench/contrib/terminal/common/terminalContextKey';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\n\nexport class TerminalInstanceService extends Disposable implements ITerminalInstanceService {\n\tdeclare _serviceBrand: undefined;\n\tprivate _terminalShellTypeContextKey: IContextKey<string>;\n\tprivate _terminalInRunCommandPicker: IContextKey<boolean>;\n\tprivate _terminalSuggestWidgetVisibleContextKey: IContextKey<boolean>;\n\tprivate _configHelper: TerminalConfigHelper;\n\tprivate _backendRegistration = new Map<string | undefined, { promise: Promise<void>; resolve: () => void }>();\n\n\tprivate readonly _onDidCreateInstance = this._register(new Emitter<ITerminalInstance>());\n\tget onDidCreateInstance(): Event<ITerminalInstance> { return this._onDidCreateInstance.event; }\n\n\tconstructor(\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService,\n\t\t@IWorkbenchEnvironmentService readonly _environmentService: IWorkbenchEnvironmentService,\n\t) {\n\t\tsuper();\n\t\tthis._terminalShellTypeContextKey = TerminalContextKeys.shellType.bindTo(this._contextKeyService);\n\t\tthis._terminalInRunCommandPicker = TerminalContextKeys.inTerminalRunCommandPicker.bindTo(this._contextKeyService);\n\t\tthis._terminalSuggestWidgetVisibleContextKey = TerminalContextKeys.suggestWidgetVisible.bindTo(this._contextKeyService);\n\t\tthis._configHelper = _instantiationService.createInstance(TerminalConfigHelper);\n\n\n\t\tfor (const remoteAuthority of [undefined, _environmentService.remoteAuthority]) {\n\t\t\tlet resolve: () => void;\n\t\t\tconst p = new Promise<void>(r => resolve = r);\n\t\t\tthis._backendRegistration.set(remoteAuthority, { promise: p, resolve: resolve! });\n\t\t}\n\t}\n\n\tcreateInstance(profile: ITerminalProfile, target: TerminalLocation): ITerminalInstance;\n\tcreateInstance(shellLaunchConfig: IShellLaunchConfig, target: TerminalLocation): ITerminalInstance;\n\tcreateInstance(config: IShellLaunchConfig | ITerminalProfile, target: TerminalLocation): ITerminalInstance {\n\t\tconst shellLaunchConfig = this.convertProfileToShellLaunchConfig(config);\n\t\tconst instance = this._instantiationService.createInstance(TerminalInstance,\n\t\t\tthis._terminalShellTypeContextKey,\n\t\t\tthis._terminalInRunCommandPicker,\n\t\t\tthis._terminalSuggestWidgetVisibleContextKey,\n\t\t\tthis._configHelper,\n\t\t\tshellLaunchConfig\n\t\t);\n\t\tinstance.target = target;\n\t\tthis._onDidCreateInstance.fire(instance);\n\t\treturn instance;\n\t}\n\n\tconvertProfileToShellLaunchConfig(shellLaunchConfigOrProfile?: IShellLaunchConfig | ITerminalProfile, cwd?: string | URI): IShellLaunchConfig {\n\t\t// Profile was provided\n\t\tif (shellLaunchConfigOrProfile && 'profileName' in shellLaunchConfigOrProfile) {\n\t\t\tconst profile = shellLaunchConfigOrProfile;\n\t\t\tif (!profile.path) {\n\t\t\t\treturn shellLaunchConfigOrProfile;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\texecutable: profile.path,\n\t\t\t\targs: profile.args,\n\t\t\t\tenv: profile.env,\n\t\t\t\ticon: profile.icon,\n\t\t\t\tcolor: profile.color,\n\t\t\t\tname: profile.overrideName ? profile.profileName : undefined,\n\t\t\t\tcwd\n\t\t\t};\n\t\t}\n\n\t\t// A shell launch config was provided\n\t\tif (shellLaunchConfigOrProfile) {\n\t\t\tif (cwd) {\n\t\t\t\tshellLaunchConfigOrProfile.cwd = cwd;\n\t\t\t}\n\t\t\treturn shellLaunchConfigOrProfile;\n\t\t}\n\n\t\t// Return empty shell launch config\n\t\treturn {};\n\t}\n\n\tasync getBackend(remoteAuthority?: string): Promise<ITerminalBackend | undefined> {\n\t\tlet backend = Registry.as<ITerminalBackendRegistry>(TerminalExtensions.Backend).getTerminalBackend(remoteAuthority);\n\t\tif (!backend) {\n\t\t\t// Ensure backend is initialized and try again\n\t\t\tawait this._backendRegistration.get(remoteAuthority)?.promise;\n\t\t\tbackend = Registry.as<ITerminalBackendRegistry>(TerminalExtensions.Backend).getTerminalBackend(remoteAuthority);\n\t\t}\n\t\treturn backend;\n\t}\n\n\tgetRegisteredBackends(): IterableIterator<ITerminalBackend> {\n\t\treturn Registry.as<ITerminalBackendRegistry>(TerminalExtensions.Backend).backends.values();\n\t}\n\n\tdidRegisterBackend(remoteAuthority?: string) {\n\t\tthis._backendRegistration.get(remoteAuthority)?.resolve();\n\t}\n}\n\nregisterSingleton(ITerminalInstanceService, TerminalInstanceService, InstantiationType.Delayed);\n"]}