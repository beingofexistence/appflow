{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/browser/terminalEvents.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOhG,SAAgB,IAAI,CACnB,gBAAqC,EACrC,aAAuC,EACvC,gBAA0C,EAC1C,YAAe,EACf,QAAiE;QAEjE,MAAM,KAAK,GAAG,IAAI,eAAG,EAAc,CAAC;QACpC,MAAM,WAAW,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,WAAG,EAAyD,CAAC,CAAC;QAChG,MAAM,mBAAmB,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,eAAG,EAAwD,CAAC,CAAC;QAEvG,SAAS,aAAa,CAAC,QAA2B,EAAE,UAAyC;YAC5F,MAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC,aAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;YAChG,mBAAmB,CAAC,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;QAC/C,CAAC;QAED,wBAAwB;QACxB,KAAK,MAAM,QAAQ,IAAI,gBAAgB,EAAE;YACxC,MAAM,UAAU,GAAG,QAAQ,CAAC,YAAY,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAC3D,IAAI,UAAU,EAAE;gBACf,aAAa,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;aACpC;SACD;QAED,qBAAqB;QACrB,MAAM,wBAAwB,GAAG,IAAI,WAAG,CACvC,gBAAgB,EAChB,aAAa,EACb,gBAAgB,EAChB,QAAQ,CAAC,EAAE,CAAC,aAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,YAAY,CAAC,kBAAkB,EAAE,WAAW,CAAC,EAAE,CAAC,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC,CAAC,CAC3G,CAAC;QACF,wBAAwB,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;YAClC,IAAI,CAAC,CAAC,WAAW,CAAC,EAAE,KAAK,YAAY,EAAE;gBACtC,aAAa,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;aACpD;QACF,CAAC,CAAC,CAAC;QAEH,uBAAuB;QACvB,MAAM,2BAA2B,GAAG,IAAI,WAAG,CAC1C,gBAAgB,EAChB,aAAa,EACb,gBAAgB,EAChB,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAC,qBAAqB,CACvD,CAAC;QACF,2BAA2B,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE;YACrC,IAAI,CAAC,CAAC,EAAE,KAAK,YAAY,EAAE;gBAC1B,mBAAmB,CAAC,gBAAgB,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC;aACnD;QACF,CAAC,CAAC,CAAC;QAEH,OAAO;YACN,OAAO,EAAE,GAAG,EAAE,CAAC,KAAK,CAAC,OAAO,EAAE;YAC9B,KAAK,EAAE,WAAW,CAAC,KAAK;SACxB,CAAC;IACH,CAAC;IAtDD,oBAsDC","file":"terminalEvents.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITerminalInstance } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { DynamicListEventMultiplexer, Event, EventMultiplexer, IDynamicListEventMultiplexer } from 'vs/base/common/event';\nimport { DisposableMap, DisposableStore, IDisposable } from 'vs/base/common/lifecycle';\nimport { ITerminalCapabilityImplMap, TerminalCapability } from 'vs/platform/terminal/common/capabilities/capabilities';\n\nexport function createInstanceCapabilityEventMultiplexer<T extends TerminalCapability, K>(\n\tcurrentInstances: ITerminalInstance[],\n\tonAddInstance: Event<ITerminalInstance>,\n\tonRemoveInstance: Event<ITerminalInstance>,\n\tcapabilityId: T,\n\tgetEvent: (capability: ITerminalCapabilityImplMap[T]) => Event<K>\n): IDynamicListEventMultiplexer<{ instance: ITerminalInstance; data: K }> {\n\tconst store = new DisposableStore();\n\tconst multiplexer = store.add(new EventMultiplexer<{ instance: ITerminalInstance; data: K }>());\n\tconst capabilityListeners = store.add(new DisposableMap<ITerminalCapabilityImplMap[T], IDisposable>());\n\n\tfunction addCapability(instance: ITerminalInstance, capability: ITerminalCapabilityImplMap[T]) {\n\t\tconst listener = multiplexer.add(Event.map(getEvent(capability), data => ({ instance, data })));\n\t\tcapabilityListeners.set(capability, listener);\n\t}\n\n\t// Existing capabilities\n\tfor (const instance of currentInstances) {\n\t\tconst capability = instance.capabilities.get(capabilityId);\n\t\tif (capability) {\n\t\t\taddCapability(instance, capability);\n\t\t}\n\t}\n\n\t// Added capabilities\n\tconst addCapabilityMultiplexer = new DynamicListEventMultiplexer(\n\t\tcurrentInstances,\n\t\tonAddInstance,\n\t\tonRemoveInstance,\n\t\tinstance => Event.map(instance.capabilities.onDidAddCapability, changeEvent => ({ instance, changeEvent }))\n\t);\n\taddCapabilityMultiplexer.event(e => {\n\t\tif (e.changeEvent.id === capabilityId) {\n\t\t\taddCapability(e.instance, e.changeEvent.capability);\n\t\t}\n\t});\n\n\t// Removed capabilities\n\tconst removeCapabilityMultiplexer = new DynamicListEventMultiplexer(\n\t\tcurrentInstances,\n\t\tonAddInstance,\n\t\tonRemoveInstance,\n\t\tinstance => instance.capabilities.onDidRemoveCapability\n\t);\n\tremoveCapabilityMultiplexer.event(e => {\n\t\tif (e.id === capabilityId) {\n\t\t\tcapabilityListeners.deleteAndDispose(e.capability);\n\t\t}\n\t});\n\n\treturn {\n\t\tdispose: () => store.dispose(),\n\t\tevent: multiplexer.event\n\t};\n}\n"]}