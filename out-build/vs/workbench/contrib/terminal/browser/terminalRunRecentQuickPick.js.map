{"version":3,"sources":["vs/workbench/contrib/terminal/browser/terminalRunRecentQuickPick.ts"],"names":[],"mappings":"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","file":"terminalRunRecentQuickPick.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Toggle } from 'vs/base/browser/ui/toggle/toggle';\nimport { isMacintosh, OperatingSystem } from 'vs/base/common/platform';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { ITextModelContentProvider, ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { localize } from 'vs/nls';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { IQuickInputButton, IQuickInputService, IQuickPickItem, IQuickPickSeparator } from 'vs/platform/quickinput/common/quickInput';\nimport { ITerminalCommand, TerminalCapability } from 'vs/platform/terminal/common/capabilities/capabilities';\nimport { collapseTildePath } from 'vs/platform/terminal/common/terminalEnvironment';\nimport { asCssVariable, inputActiveOptionBackground, inputActiveOptionBorder, inputActiveOptionForeground } from 'vs/platform/theme/common/colorRegistry';\nimport { ThemeIcon } from 'vs/base/common/themables';\nimport { ITerminalInstance } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { commandHistoryFuzzySearchIcon, commandHistoryOutputIcon, commandHistoryRemoveIcon } from 'vs/workbench/contrib/terminal/browser/terminalIcons';\nimport { getCommandHistory, getDirectoryHistory, getShellFileHistory } from 'vs/workbench/contrib/terminal/common/history';\nimport { TerminalStorageKeys } from 'vs/workbench/contrib/terminal/common/terminalStorageKeys';\nimport { terminalStrings } from 'vs/workbench/contrib/terminal/common/terminalStrings';\nimport { URI } from 'vs/base/common/uri';\nimport { fromNow } from 'vs/base/common/date';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { showWithPinnedItems } from 'vs/platform/quickinput/browser/quickPickPin';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { IContextKey } from 'vs/platform/contextkey/common/contextkey';\n\nexport async function showRunRecentQuickPick(\n\taccessor: ServicesAccessor,\n\tinstance: ITerminalInstance,\n\tterminalInRunCommandPicker: IContextKey<boolean>,\n\ttype: 'command' | 'cwd',\n\tfilterMode?: 'fuzzy' | 'contiguous',\n\tvalue?: string\n): Promise<void> {\n\tif (!instance.xterm) {\n\t\treturn;\n\t}\n\n\tconst editorService = accessor.get(IEditorService);\n\tconst instantiationService = accessor.get(IInstantiationService);\n\tconst quickInputService = accessor.get(IQuickInputService);\n\tconst storageService = accessor.get(IStorageService);\n\n\tconst runRecentStorageKey = `${TerminalStorageKeys.PinnedRecentCommandsPrefix}.${instance.shellType}`;\n\tlet placeholder: string;\n\ttype Item = IQuickPickItem & { command?: ITerminalCommand; rawLabel: string };\n\tlet items: (Item | IQuickPickItem & { rawLabel: string } | IQuickPickSeparator)[] = [];\n\tconst commandMap: Set<string> = new Set();\n\n\tconst removeFromCommandHistoryButton: IQuickInputButton = {\n\t\ticonClass: ThemeIcon.asClassName(commandHistoryRemoveIcon),\n\t\ttooltip: localize('removeCommand', \"Remove from Command History\")\n\t};\n\n\tconst commandOutputButton: IQuickInputButton = {\n\t\ticonClass: ThemeIcon.asClassName(commandHistoryOutputIcon),\n\t\ttooltip: localize('viewCommandOutput', \"View Command Output\"),\n\t\talwaysVisible: false\n\t};\n\n\tif (type === 'command') {\n\t\tplaceholder = isMacintosh ? localize('selectRecentCommandMac', 'Select a command to run (hold Option-key to edit the command)') : localize('selectRecentCommand', 'Select a command to run (hold Alt-key to edit the command)');\n\t\tconst cmdDetection = instance.capabilities.get(TerminalCapability.CommandDetection);\n\t\tconst commands = cmdDetection?.commands;\n\t\t// Current session history\n\t\tconst executingCommand = cmdDetection?.executingCommand;\n\t\tif (executingCommand) {\n\t\t\tcommandMap.add(executingCommand);\n\t\t}\n\t\tfunction formatLabel(label: string) {\n\t\t\treturn label\n\t\t\t\t// Replace new lines with \"enter\" symbol\n\t\t\t\t.replace(/\\r?\\n/g, '\\u23CE')\n\t\t\t\t// Replace 3 or more spaces with midline horizontal ellipsis which looks similar\n\t\t\t\t// to whitespace in the editor\n\t\t\t\t.replace(/\\s\\s\\s+/g, '\\u22EF');\n\t\t}\n\t\tif (commands && commands.length > 0) {\n\t\t\tfor (const entry of commands) {\n\t\t\t\t// Trim off any whitespace and/or line endings, replace new lines with the\n\t\t\t\t// Downwards Arrow with Corner Leftwards symbol\n\t\t\t\tconst label = entry.command.trim();\n\t\t\t\tif (label.length === 0 || commandMap.has(label)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tlet description = collapseTildePath(entry.cwd, instance.userHome, instance.os === OperatingSystem.Windows ? '\\\\' : '/');\n\t\t\t\tif (entry.exitCode) {\n\t\t\t\t\t// Since you cannot get the last command's exit code on pwsh, just whether it failed\n\t\t\t\t\t// or not, -1 is treated specially as simply failed\n\t\t\t\t\tif (entry.exitCode === -1) {\n\t\t\t\t\t\tdescription += ' failed';\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdescription += ` exitCode: ${entry.exitCode}`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tdescription = description.trim();\n\t\t\t\tconst buttons: IQuickInputButton[] = [commandOutputButton];\n\t\t\t\t// Merge consecutive commands\n\t\t\t\tconst lastItem = items.length > 0 ? items[items.length - 1] : undefined;\n\t\t\t\tif (lastItem?.type !== 'separator' && lastItem?.label === label) {\n\t\t\t\t\tlastItem.id = entry.timestamp.toString();\n\t\t\t\t\tlastItem.description = description;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\titems.push({\n\t\t\t\t\tlabel: formatLabel(label),\n\t\t\t\t\trawLabel: label,\n\t\t\t\t\tdescription,\n\t\t\t\t\tid: entry.timestamp.toString(),\n\t\t\t\t\tcommand: entry,\n\t\t\t\t\tbuttons: entry.hasOutput() ? buttons : undefined\n\t\t\t\t});\n\t\t\t\tcommandMap.add(label);\n\t\t\t}\n\t\t\titems = items.reverse();\n\t\t}\n\t\tif (executingCommand) {\n\t\t\titems.unshift({\n\t\t\t\tlabel: formatLabel(executingCommand),\n\t\t\t\trawLabel: executingCommand,\n\t\t\t\tdescription: cmdDetection.cwd\n\t\t\t});\n\t\t}\n\t\tif (items.length > 0) {\n\t\t\titems.unshift({ type: 'separator', label: terminalStrings.currentSessionCategory });\n\t\t}\n\n\t\t// Gather previous session history\n\t\tconst history = instantiationService.invokeFunction(getCommandHistory);\n\t\tconst previousSessionItems: (IQuickPickItem & { rawLabel: string })[] = [];\n\t\tfor (const [label, info] of history.entries) {\n\t\t\t// Only add previous session item if it's not in this session\n\t\t\tif (!commandMap.has(label) && info.shellType === instance.shellType) {\n\t\t\t\tpreviousSessionItems.unshift({\n\t\t\t\t\tlabel: formatLabel(label),\n\t\t\t\t\trawLabel: label,\n\t\t\t\t\tbuttons: [removeFromCommandHistoryButton]\n\t\t\t\t});\n\t\t\t\tcommandMap.add(label);\n\t\t\t}\n\t\t}\n\n\t\tif (previousSessionItems.length > 0) {\n\t\t\titems.push(\n\t\t\t\t{ type: 'separator', label: terminalStrings.previousSessionCategory },\n\t\t\t\t...previousSessionItems\n\t\t\t);\n\t\t}\n\n\t\t// Gather shell file history\n\t\tconst shellFileHistory = await instantiationService.invokeFunction(getShellFileHistory, instance.shellType);\n\t\tconst dedupedShellFileItems: (IQuickPickItem & { rawLabel: string })[] = [];\n\t\tfor (const label of shellFileHistory) {\n\t\t\tif (!commandMap.has(label)) {\n\t\t\t\tdedupedShellFileItems.unshift({\n\t\t\t\t\tlabel: formatLabel(label),\n\t\t\t\t\trawLabel: label\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (dedupedShellFileItems.length > 0) {\n\t\t\titems.push(\n\t\t\t\t{ type: 'separator', label: localize('shellFileHistoryCategory', '{0} history', instance.shellType) },\n\t\t\t\t...dedupedShellFileItems\n\t\t\t);\n\t\t}\n\t} else {\n\t\tplaceholder = isMacintosh\n\t\t\t? localize('selectRecentDirectoryMac', 'Select a directory to go to (hold Option-key to edit the command)')\n\t\t\t: localize('selectRecentDirectory', 'Select a directory to go to (hold Alt-key to edit the command)');\n\t\tconst cwds = instance.capabilities.get(TerminalCapability.CwdDetection)?.cwds || [];\n\t\tif (cwds && cwds.length > 0) {\n\t\t\tfor (const label of cwds) {\n\t\t\t\titems.push({ label, rawLabel: label });\n\t\t\t}\n\t\t\titems = items.reverse();\n\t\t\titems.unshift({ type: 'separator', label: terminalStrings.currentSessionCategory });\n\t\t}\n\n\t\t// Gather previous session history\n\t\tconst history = instantiationService.invokeFunction(getDirectoryHistory);\n\t\tconst previousSessionItems: (IQuickPickItem & { rawLabel: string })[] = [];\n\t\t// Only add previous session item if it's not in this session and it matches the remote authority\n\t\tfor (const [label, info] of history.entries) {\n\t\t\tif ((info === null || info.remoteAuthority === instance.remoteAuthority) && !cwds.includes(label)) {\n\t\t\t\tpreviousSessionItems.unshift({\n\t\t\t\t\tlabel,\n\t\t\t\t\trawLabel: label,\n\t\t\t\t\tbuttons: [removeFromCommandHistoryButton]\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (previousSessionItems.length > 0) {\n\t\t\titems.push(\n\t\t\t\t{ type: 'separator', label: terminalStrings.previousSessionCategory },\n\t\t\t\t...previousSessionItems\n\t\t\t);\n\t\t}\n\t}\n\tif (items.length === 0) {\n\t\treturn;\n\t}\n\tconst fuzzySearchToggle = new Toggle({\n\t\ttitle: 'Fuzzy search',\n\t\ticon: commandHistoryFuzzySearchIcon,\n\t\tisChecked: filterMode === 'fuzzy',\n\t\tinputActiveOptionBorder: asCssVariable(inputActiveOptionBorder),\n\t\tinputActiveOptionForeground: asCssVariable(inputActiveOptionForeground),\n\t\tinputActiveOptionBackground: asCssVariable(inputActiveOptionBackground)\n\t});\n\tfuzzySearchToggle.onChange(() => {\n\t\tinstantiationService.invokeFunction(showRunRecentQuickPick, instance, terminalInRunCommandPicker, type, fuzzySearchToggle.checked ? 'fuzzy' : 'contiguous', quickPick.value);\n\t});\n\tconst outputProvider = instantiationService.createInstance(TerminalOutputProvider);\n\tconst quickPick = quickInputService.createQuickPick<IQuickPickItem & { rawLabel: string }>();\n\tconst originalItems = items;\n\tquickPick.items = [...originalItems];\n\tquickPick.sortByLabel = false;\n\tquickPick.placeholder = placeholder;\n\tquickPick.matchOnLabelMode = filterMode || 'contiguous';\n\tquickPick.toggles = [fuzzySearchToggle];\n\tquickPick.onDidTriggerItemButton(async e => {\n\t\tif (e.button === removeFromCommandHistoryButton) {\n\t\t\tif (type === 'command') {\n\t\t\t\tinstantiationService.invokeFunction(getCommandHistory)?.remove(e.item.label);\n\t\t\t} else {\n\t\t\t\tinstantiationService.invokeFunction(getDirectoryHistory)?.remove(e.item.label);\n\t\t\t}\n\t\t} else if (e.button === commandOutputButton) {\n\t\t\tconst selectedCommand = (e.item as Item).command;\n\t\t\tconst output = selectedCommand?.getOutput();\n\t\t\tif (output && selectedCommand?.command) {\n\t\t\t\tconst textContent = await outputProvider.provideTextContent(URI.from(\n\t\t\t\t\t{\n\t\t\t\t\t\tscheme: TerminalOutputProvider.scheme,\n\t\t\t\t\t\tpath: `${selectedCommand.command}... ${fromNow(selectedCommand.timestamp, true)}`,\n\t\t\t\t\t\tfragment: output,\n\t\t\t\t\t\tquery: `terminal-output-${selectedCommand.timestamp}-${instance.instanceId}`\n\t\t\t\t\t}));\n\t\t\t\tif (textContent) {\n\t\t\t\t\tawait editorService.openEditor({\n\t\t\t\t\t\tresource: textContent.uri\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tawait instantiationService.invokeFunction(showRunRecentQuickPick, instance, terminalInRunCommandPicker, type, filterMode, value);\n\t}\n\t);\n\tquickPick.onDidChangeValue(async value => {\n\t\tif (!value) {\n\t\t\tawait instantiationService.invokeFunction(showRunRecentQuickPick, instance, terminalInRunCommandPicker, type, filterMode, value);\n\t\t}\n\t});\n\tquickPick.onDidAccept(async () => {\n\t\tconst result = quickPick.activeItems[0];\n\t\tlet text: string;\n\t\tif (type === 'cwd') {\n\t\t\ttext = `cd ${await instance.preparePathForShell(result.rawLabel)}`;\n\t\t} else { // command\n\t\t\ttext = result.rawLabel;\n\t\t}\n\t\tquickPick.hide();\n\t\tinstance.runCommand(text, !quickPick.keyMods.alt);\n\t\tif (quickPick.keyMods.alt) {\n\t\t\tinstance.focus();\n\t\t}\n\t});\n\tif (value) {\n\t\tquickPick.value = value;\n\t}\n\treturn new Promise<void>(r => {\n\t\tterminalInRunCommandPicker.set(true);\n\t\tshowWithPinnedItems(storageService, runRecentStorageKey, quickPick, true);\n\t\tquickPick.onDidHide(() => {\n\t\t\tterminalInRunCommandPicker.set(false);\n\t\t\tr();\n\t\t});\n\t});\n}\n\nclass TerminalOutputProvider implements ITextModelContentProvider {\n\tstatic scheme = 'TERMINAL_OUTPUT';\n\n\tconstructor(\n\t\t@ITextModelService textModelResolverService: ITextModelService,\n\t\t@IModelService private readonly _modelService: IModelService\n\t) {\n\t\ttextModelResolverService.registerTextModelContentProvider(TerminalOutputProvider.scheme, this);\n\t}\n\n\tasync provideTextContent(resource: URI): Promise<ITextModel | null> {\n\t\tconst existing = this._modelService.getModel(resource);\n\t\tif (existing && !existing.isDisposed()) {\n\t\t\treturn existing;\n\t\t}\n\n\t\treturn this._modelService.createModel(resource.fragment, null, resource, false);\n\t}\n}\n"]}