{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/browser/terminalProfileResolverService.ts"],"names":[],"mappings":"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","file":"terminalProfileResolverService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from 'vs/base/common/network';\nimport { env } from 'vs/base/common/process';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IWorkspaceContextService, IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\nimport { IHistoryService } from 'vs/workbench/services/history/common/history';\nimport { IProcessEnvironment, OperatingSystem, OS } from 'vs/base/common/platform';\nimport { IShellLaunchConfig, ITerminalLogService, ITerminalProfile, TerminalIcon, TerminalSettingId } from 'vs/platform/terminal/common/terminal';\nimport { IShellLaunchConfigResolveOptions, ITerminalProfileResolverService, ITerminalProfileService } from 'vs/workbench/contrib/terminal/common/terminal';\nimport * as path from 'vs/base/common/path';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { getIconRegistry, IIconRegistry } from 'vs/platform/theme/common/iconRegistry';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { debounce } from 'vs/base/common/decorators';\nimport { ThemeIcon } from 'vs/base/common/themables';\nimport { URI } from 'vs/base/common/uri';\nimport { equals } from 'vs/base/common/arrays';\nimport { deepClone } from 'vs/base/common/objects';\nimport { terminalProfileArgsMatch, isUriComponents } from 'vs/platform/terminal/common/terminalProfiles';\nimport { ITerminalInstanceService } from 'vs/workbench/contrib/terminal/browser/terminal';\n\nexport interface IProfileContextProvider {\n\tgetDefaultSystemShell(remoteAuthority: string | undefined, os: OperatingSystem): Promise<string>;\n\tgetEnvironment(remoteAuthority: string | undefined): Promise<IProcessEnvironment>;\n}\n\nconst generatedProfileName = 'Generated';\n\n/*\n * Resolves terminal shell launch config and terminal profiles for the given operating system,\n * environment, and user configuration.\n */\nexport abstract class BaseTerminalProfileResolverService implements ITerminalProfileResolverService {\n\tdeclare _serviceBrand: undefined;\n\n\tprivate _primaryBackendOs: OperatingSystem | undefined;\n\n\tprivate readonly _iconRegistry: IIconRegistry = getIconRegistry();\n\n\tprivate _defaultProfileName: string | undefined;\n\tget defaultProfileName(): string | undefined { return this._defaultProfileName; }\n\n\tconstructor(\n\t\tprivate readonly _context: IProfileContextProvider,\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\tprivate readonly _configurationResolverService: IConfigurationResolverService,\n\t\tprivate readonly _historyService: IHistoryService,\n\t\tprivate readonly _logService: ITerminalLogService,\n\t\tprivate readonly _terminalProfileService: ITerminalProfileService,\n\t\tprivate readonly _workspaceContextService: IWorkspaceContextService,\n\t\tprivate readonly _remoteAgentService: IRemoteAgentService\n\t) {\n\t\tif (this._remoteAgentService.getConnection()) {\n\t\t\tthis._remoteAgentService.getEnvironment().then(env => this._primaryBackendOs = env?.os || OS);\n\t\t} else {\n\t\t\tthis._primaryBackendOs = OS;\n\t\t}\n\t\tthis._configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(TerminalSettingId.DefaultProfileWindows) ||\n\t\t\t\te.affectsConfiguration(TerminalSettingId.DefaultProfileMacOs) ||\n\t\t\t\te.affectsConfiguration(TerminalSettingId.DefaultProfileLinux)) {\n\t\t\t\tthis._refreshDefaultProfileName();\n\t\t\t}\n\t\t});\n\t\tthis._terminalProfileService.onDidChangeAvailableProfiles(() => this._refreshDefaultProfileName());\n\t}\n\n\t@debounce(200)\n\tprivate async _refreshDefaultProfileName() {\n\t\tif (this._primaryBackendOs) {\n\t\t\tthis._defaultProfileName = (await this.getDefaultProfile({\n\t\t\t\tremoteAuthority: this._remoteAgentService.getConnection()?.remoteAuthority,\n\t\t\t\tos: this._primaryBackendOs\n\t\t\t}))?.profileName;\n\t\t}\n\t}\n\n\tresolveIcon(shellLaunchConfig: IShellLaunchConfig, os: OperatingSystem): void {\n\t\tif (shellLaunchConfig.icon) {\n\t\t\tshellLaunchConfig.icon = this._getCustomIcon(shellLaunchConfig.icon) || this.getDefaultIcon();\n\t\t\treturn;\n\t\t}\n\t\tif (shellLaunchConfig.customPtyImplementation) {\n\t\t\tshellLaunchConfig.icon = this.getDefaultIcon();\n\t\t\treturn;\n\t\t}\n\t\tif (shellLaunchConfig.executable) {\n\t\t\treturn;\n\t\t}\n\t\tconst defaultProfile = this._getUnresolvedRealDefaultProfile(os);\n\t\tif (defaultProfile) {\n\t\t\tshellLaunchConfig.icon = defaultProfile.icon;\n\t\t}\n\t\tif (!shellLaunchConfig.icon) {\n\t\t\tshellLaunchConfig.icon = this.getDefaultIcon();\n\t\t}\n\t}\n\n\tgetDefaultIcon(resource?: URI): TerminalIcon & ThemeIcon {\n\t\treturn this._iconRegistry.getIcon(this._configurationService.getValue(TerminalSettingId.TabsDefaultIcon, { resource })) || Codicon.terminal;\n\t}\n\n\tasync resolveShellLaunchConfig(shellLaunchConfig: IShellLaunchConfig, options: IShellLaunchConfigResolveOptions): Promise<void> {\n\t\t// Resolve the shell and shell args\n\t\tlet resolvedProfile: ITerminalProfile;\n\t\tif (shellLaunchConfig.executable) {\n\t\t\tresolvedProfile = await this._resolveProfile({\n\t\t\t\tpath: shellLaunchConfig.executable,\n\t\t\t\targs: shellLaunchConfig.args,\n\t\t\t\tprofileName: generatedProfileName,\n\t\t\t\tisDefault: false\n\t\t\t}, options);\n\t\t} else {\n\t\t\tresolvedProfile = await this.getDefaultProfile(options);\n\t\t}\n\t\tshellLaunchConfig.executable = resolvedProfile.path;\n\t\tshellLaunchConfig.args = resolvedProfile.args;\n\t\tif (resolvedProfile.env) {\n\t\t\tif (shellLaunchConfig.env) {\n\t\t\t\tshellLaunchConfig.env = { ...shellLaunchConfig.env, ...resolvedProfile.env };\n\t\t\t} else {\n\t\t\t\tshellLaunchConfig.env = resolvedProfile.env;\n\t\t\t}\n\t\t}\n\n\t\t// Verify the icon is valid, and fallback correctly to the generic terminal id if there is\n\t\t// an issue\n\t\tconst resource = shellLaunchConfig === undefined || typeof shellLaunchConfig.cwd === 'string' ? undefined : shellLaunchConfig.cwd;\n\t\tshellLaunchConfig.icon = this._getCustomIcon(shellLaunchConfig.icon)\n\t\t\t|| this._getCustomIcon(resolvedProfile.icon)\n\t\t\t|| this.getDefaultIcon(resource);\n\n\t\t// Override the name if specified\n\t\tif (resolvedProfile.overrideName) {\n\t\t\tshellLaunchConfig.name = resolvedProfile.profileName;\n\t\t}\n\n\t\t// Apply the color\n\t\tshellLaunchConfig.color = shellLaunchConfig.color\n\t\t\t|| resolvedProfile.color\n\t\t\t|| this._configurationService.getValue(TerminalSettingId.TabsDefaultColor, { resource });\n\n\t\t// Resolve useShellEnvironment based on the setting if it's not set\n\t\tif (shellLaunchConfig.useShellEnvironment === undefined) {\n\t\t\tshellLaunchConfig.useShellEnvironment = this._configurationService.getValue(TerminalSettingId.InheritEnv);\n\t\t}\n\t}\n\n\tasync getDefaultShell(options: IShellLaunchConfigResolveOptions): Promise<string> {\n\t\treturn (await this.getDefaultProfile(options)).path;\n\t}\n\n\tasync getDefaultShellArgs(options: IShellLaunchConfigResolveOptions): Promise<string | string[]> {\n\t\treturn (await this.getDefaultProfile(options)).args || [];\n\t}\n\n\tasync getDefaultProfile(options: IShellLaunchConfigResolveOptions): Promise<ITerminalProfile> {\n\t\treturn this._resolveProfile(await this._getUnresolvedDefaultProfile(options), options);\n\t}\n\n\tgetEnvironment(remoteAuthority: string | undefined): Promise<IProcessEnvironment> {\n\t\treturn this._context.getEnvironment(remoteAuthority);\n\t}\n\n\tprivate _getCustomIcon(icon?: unknown): TerminalIcon | undefined {\n\t\tif (!icon) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (typeof icon === 'string') {\n\t\t\treturn ThemeIcon.fromId(icon);\n\t\t}\n\t\tif (ThemeIcon.isThemeIcon(icon)) {\n\t\t\treturn icon;\n\t\t}\n\t\tif (URI.isUri(icon) || isUriComponents(icon)) {\n\t\t\treturn URI.revive(icon);\n\t\t}\n\t\tif (typeof icon === 'object' && 'light' in icon && 'dark' in icon) {\n\t\t\tconst castedIcon = (icon as { light: unknown; dark: unknown });\n\t\t\tif ((URI.isUri(castedIcon.light) || isUriComponents(castedIcon.light)) && (URI.isUri(castedIcon.dark) || isUriComponents(castedIcon.dark))) {\n\t\t\t\treturn { light: URI.revive(castedIcon.light), dark: URI.revive(castedIcon.dark) };\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async _getUnresolvedDefaultProfile(options: IShellLaunchConfigResolveOptions): Promise<ITerminalProfile> {\n\t\t// If automation shell is allowed, prefer that\n\t\tif (options.allowAutomationShell) {\n\t\t\tconst automationShellProfile = this._getUnresolvedAutomationShellProfile(options);\n\t\t\tif (automationShellProfile) {\n\t\t\t\treturn automationShellProfile;\n\t\t\t}\n\t\t}\n\n\t\t// Return the real default profile if it exists and is valid, wait for profiles to be ready\n\t\t// if the window just opened\n\t\tawait this._terminalProfileService.profilesReady;\n\t\tconst defaultProfile = this._getUnresolvedRealDefaultProfile(options.os);\n\t\tif (defaultProfile) {\n\t\t\treturn this._setIconForAutomation(options, defaultProfile);\n\t\t}\n\n\t\t// If there is no real default profile, create a fallback default profile based on the shell\n\t\t// and shellArgs settings in addition to the current environment.\n\t\treturn this._setIconForAutomation(options, await this._getUnresolvedFallbackDefaultProfile(options));\n\t}\n\n\tprivate _setIconForAutomation(options: IShellLaunchConfigResolveOptions, profile: ITerminalProfile): ITerminalProfile {\n\t\tif (options.allowAutomationShell) {\n\t\t\tconst profileClone = deepClone(profile);\n\t\t\tprofileClone.icon = Codicon.tools;\n\t\t\treturn profileClone;\n\t\t}\n\t\treturn profile;\n\t}\n\n\tprivate _getUnresolvedRealDefaultProfile(os: OperatingSystem): ITerminalProfile | undefined {\n\t\treturn this._terminalProfileService.getDefaultProfile(os);\n\t}\n\n\tprivate async _getUnresolvedFallbackDefaultProfile(options: IShellLaunchConfigResolveOptions): Promise<ITerminalProfile> {\n\t\tconst executable = await this._context.getDefaultSystemShell(options.remoteAuthority, options.os);\n\n\t\t// Try select an existing profile to fallback to, based on the default system shell, only do\n\t\t// this when it is NOT a local terminal in a remote window where the front and back end OS\n\t\t// differs (eg. Windows -> WSL, Mac -> Linux)\n\t\tif (options.os === OS) {\n\t\t\tlet existingProfile = this._terminalProfileService.availableProfiles.find(e => path.parse(e.path).name === path.parse(executable).name);\n\t\t\tif (existingProfile) {\n\t\t\t\tif (options.allowAutomationShell) {\n\t\t\t\t\texistingProfile = deepClone(existingProfile);\n\t\t\t\t\texistingProfile.icon = Codicon.tools;\n\t\t\t\t}\n\t\t\t\treturn existingProfile;\n\t\t\t}\n\t\t}\n\n\t\t// Finally fallback to a generated profile\n\t\tlet args: string | string[] | undefined;\n\t\tif (options.os === OperatingSystem.Macintosh && path.parse(executable).name.match(/(zsh|bash)/)) {\n\t\t\t// macOS should launch a login shell by default\n\t\t\targs = ['--login'];\n\t\t} else {\n\t\t\t// Resolve undefined to []\n\t\t\targs = [];\n\t\t}\n\n\t\tconst icon = this._guessProfileIcon(executable);\n\n\t\treturn {\n\t\t\tprofileName: generatedProfileName,\n\t\t\tpath: executable,\n\t\t\targs,\n\t\t\ticon,\n\t\t\tisDefault: false\n\t\t};\n\t}\n\n\tprivate _getUnresolvedAutomationShellProfile(options: IShellLaunchConfigResolveOptions): ITerminalProfile | undefined {\n\t\tconst automationProfile = this._configurationService.getValue(`terminal.integrated.automationProfile.${this._getOsKey(options.os)}`);\n\t\tif (this._isValidAutomationProfile(automationProfile, options.os)) {\n\t\t\tautomationProfile.icon = this._getCustomIcon(automationProfile.icon) || Codicon.tools;\n\t\t\treturn automationProfile;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate async _resolveProfile(profile: ITerminalProfile, options: IShellLaunchConfigResolveOptions): Promise<ITerminalProfile> {\n\t\tconst env = await this._context.getEnvironment(options.remoteAuthority);\n\n\t\tif (options.os === OperatingSystem.Windows) {\n\t\t\t// Change Sysnative to System32 if the OS is Windows but NOT WoW64. It's\n\t\t\t// safe to assume that this was used by accident as Sysnative does not\n\t\t\t// exist and will break the terminal in non-WoW64 environments.\n\t\t\tconst isWoW64 = !!env.hasOwnProperty('PROCESSOR_ARCHITEW6432');\n\t\t\tconst windir = env.windir;\n\t\t\tif (!isWoW64 && windir) {\n\t\t\t\tconst sysnativePath = path.join(windir, 'Sysnative').replace(/\\//g, '\\\\').toLowerCase();\n\t\t\t\tif (profile.path && profile.path.toLowerCase().indexOf(sysnativePath) === 0) {\n\t\t\t\t\tprofile.path = path.join(windir, 'System32', profile.path.substr(sysnativePath.length + 1));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Convert / to \\ on Windows for convenience\n\t\t\tif (profile.path) {\n\t\t\t\tprofile.path = profile.path.replace(/\\//g, '\\\\');\n\t\t\t}\n\t\t}\n\n\t\t// Resolve path variables\n\t\tconst activeWorkspaceRootUri = this._historyService.getLastActiveWorkspaceRoot(options.remoteAuthority ? Schemas.vscodeRemote : Schemas.file);\n\t\tconst lastActiveWorkspace = activeWorkspaceRootUri ? this._workspaceContextService.getWorkspaceFolder(activeWorkspaceRootUri) ?? undefined : undefined;\n\t\tprofile.path = await this._resolveVariables(profile.path, env, lastActiveWorkspace);\n\n\t\t// Resolve args variables\n\t\tif (profile.args) {\n\t\t\tif (typeof profile.args === 'string') {\n\t\t\t\tprofile.args = await this._resolveVariables(profile.args, env, lastActiveWorkspace);\n\t\t\t} else {\n\t\t\t\tprofile.args = await Promise.all(profile.args.map(arg => this._resolveVariables(arg, env, lastActiveWorkspace)));\n\t\t\t}\n\t\t}\n\n\t\treturn profile;\n\t}\n\n\tprivate async _resolveVariables(value: string, env: IProcessEnvironment, lastActiveWorkspace: IWorkspaceFolder | undefined) {\n\t\ttry {\n\t\t\tvalue = await this._configurationResolverService.resolveWithEnvironment(env, lastActiveWorkspace, value);\n\t\t} catch (e) {\n\t\t\tthis._logService.error(`Could not resolve shell`, e);\n\t\t}\n\t\treturn value;\n\t}\n\n\tprivate _getOsKey(os: OperatingSystem): string {\n\t\tswitch (os) {\n\t\t\tcase OperatingSystem.Linux: return 'linux';\n\t\t\tcase OperatingSystem.Macintosh: return 'osx';\n\t\t\tcase OperatingSystem.Windows: return 'windows';\n\t\t}\n\t}\n\n\tprivate _guessProfileIcon(shell: string): ThemeIcon | undefined {\n\t\tconst file = path.parse(shell).name;\n\t\tswitch (file) {\n\t\t\tcase 'bash':\n\t\t\t\treturn Codicon.terminalBash;\n\t\t\tcase 'pwsh':\n\t\t\tcase 'powershell':\n\t\t\t\treturn Codicon.terminalPowershell;\n\t\t\tcase 'tmux':\n\t\t\t\treturn Codicon.terminalTmux;\n\t\t\tcase 'cmd':\n\t\t\t\treturn Codicon.terminalCmd;\n\t\t\tdefault:\n\t\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tprivate _isValidShellArgs(shellArgs: unknown, os: OperatingSystem): shellArgs is string | string[] | undefined {\n\t\tif (shellArgs === undefined) {\n\t\t\treturn true;\n\t\t}\n\t\tif (os === OperatingSystem.Windows && typeof shellArgs === 'string') {\n\t\t\treturn true;\n\t\t}\n\t\tif (Array.isArray(shellArgs) && shellArgs.every(e => typeof e === 'string')) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tasync createProfileFromShellAndShellArgs(shell?: unknown, shellArgs?: unknown): Promise<ITerminalProfile | string> {\n\t\tconst detectedProfile = this._terminalProfileService.availableProfiles?.find(p => {\n\t\t\tif (p.path !== shell) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (p.args === undefined || typeof p.args === 'string') {\n\t\t\t\treturn p.args === shellArgs;\n\t\t\t}\n\t\t\treturn p.path === shell && equals(p.args, (shellArgs || []) as string[]);\n\t\t});\n\t\tconst fallbackProfile = (await this.getDefaultProfile({\n\t\t\tremoteAuthority: this._remoteAgentService.getConnection()?.remoteAuthority,\n\t\t\tos: this._primaryBackendOs!\n\t\t}));\n\t\tfallbackProfile.profileName = `${fallbackProfile.path} (migrated)`;\n\t\tconst profile = detectedProfile || fallbackProfile;\n\t\tconst args = this._isValidShellArgs(shellArgs, this._primaryBackendOs!) ? shellArgs : profile.args;\n\t\tconst createdProfile = {\n\t\t\tprofileName: profile.profileName,\n\t\t\tpath: profile.path,\n\t\t\targs,\n\t\t\tisDefault: true\n\t\t};\n\t\tif (detectedProfile && detectedProfile.profileName === createdProfile.profileName && detectedProfile.path === createdProfile.path && terminalProfileArgsMatch(detectedProfile.args, createdProfile.args)) {\n\t\t\treturn detectedProfile.profileName;\n\t\t}\n\t\treturn createdProfile;\n\t}\n\n\tprivate _isValidAutomationProfile(profile: unknown, os: OperatingSystem): profile is ITerminalProfile {\n\t\tif (profile === null || profile === undefined || typeof profile !== 'object') {\n\t\t\treturn false;\n\t\t}\n\t\tif ('path' in profile && typeof (profile as { path: unknown }).path === 'string') {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\nexport class BrowserTerminalProfileResolverService extends BaseTerminalProfileResolverService {\n\n\tconstructor(\n\t\t@IConfigurationResolverService configurationResolverService: IConfigurationResolverService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IHistoryService historyService: IHistoryService,\n\t\t@ITerminalLogService logService: ITerminalLogService,\n\t\t@ITerminalInstanceService terminalInstanceService: ITerminalInstanceService,\n\t\t@ITerminalProfileService terminalProfileService: ITerminalProfileService,\n\t\t@IWorkspaceContextService workspaceContextService: IWorkspaceContextService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService\n\t) {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tgetDefaultSystemShell: async (remoteAuthority, os) => {\n\t\t\t\t\tconst backend = await terminalInstanceService.getBackend(remoteAuthority);\n\t\t\t\t\tif (!remoteAuthority || !backend) {\n\t\t\t\t\t\t// Just return basic values, this is only for serverless web and wouldn't be used\n\t\t\t\t\t\treturn os === OperatingSystem.Windows ? 'pwsh' : 'bash';\n\t\t\t\t\t}\n\t\t\t\t\treturn backend.getDefaultSystemShell(os);\n\t\t\t\t},\n\t\t\t\tgetEnvironment: async (remoteAuthority) => {\n\t\t\t\t\tconst backend = await terminalInstanceService.getBackend(remoteAuthority);\n\t\t\t\t\tif (!remoteAuthority || !backend) {\n\t\t\t\t\t\treturn env;\n\t\t\t\t\t}\n\t\t\t\t\treturn backend.getEnvironment();\n\t\t\t\t}\n\t\t\t},\n\t\t\tconfigurationService,\n\t\t\tconfigurationResolverService,\n\t\t\thistoryService,\n\t\t\tlogService,\n\t\t\tterminalProfileService,\n\t\t\tworkspaceContextService,\n\t\t\tremoteAgentService\n\t\t);\n\t}\n}\n"]}