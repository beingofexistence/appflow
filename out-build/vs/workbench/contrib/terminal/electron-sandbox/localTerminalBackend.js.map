{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/electron-sandbox/localTerminalBackend.ts"],"names":[],"mappings":"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","file":"localTerminalBackend.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { IProcessEnvironment, isMacintosh, isWindows, OperatingSystem } from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { ILocalPtyService, IProcessPropertyMap, IPtyHostLatencyMeasurement, IPtyService, IShellLaunchConfig, ITerminalBackend, ITerminalBackendRegistry, ITerminalChildProcess, ITerminalEnvironment, ITerminalLogService, ITerminalProcessOptions, ITerminalsLayoutInfo, ITerminalsLayoutInfoById, ProcessPropertyType, TerminalExtensions, TerminalIpcChannels, TerminalSettingId, TitleEventSource } from 'vs/platform/terminal/common/terminal';\nimport { IGetTerminalLayoutInfoArgs, IProcessDetails, ISetTerminalLayoutInfoArgs } from 'vs/platform/terminal/common/terminalProcess';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { ITerminalInstanceService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { ITerminalConfiguration, ITerminalProfileResolverService, TERMINAL_CONFIG_SECTION } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { TerminalStorageKeys } from 'vs/workbench/contrib/terminal/common/terminalStorageKeys';\nimport { LocalPty } from 'vs/workbench/contrib/terminal/electron-sandbox/localPty';\nimport { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\nimport { IShellEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/shellEnvironmentService';\nimport { IHistoryService } from 'vs/workbench/services/history/common/history';\nimport * as terminalEnvironment from 'vs/workbench/contrib/terminal/common/terminalEnvironment';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IEnvironmentVariableService } from 'vs/workbench/contrib/terminal/common/environmentVariable';\nimport { BaseTerminalBackend } from 'vs/workbench/contrib/terminal/browser/baseTerminalBackend';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { Client as MessagePortClient } from 'vs/base/parts/ipc/common/ipc.mp';\nimport { acquirePort } from 'vs/base/parts/ipc/electron-sandbox/ipc.mp';\nimport { getDelayedChannel, ProxyChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { mark, PerformanceMark } from 'vs/base/common/performance';\nimport { ILifecycleService, LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { DeferredPromise } from 'vs/base/common/async';\nimport { IStatusbarService } from 'vs/workbench/services/statusbar/browser/statusbar';\nimport { memoize } from 'vs/base/common/decorators';\nimport { StopWatch } from 'vs/base/common/stopwatch';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\n\nexport class LocalTerminalBackendContribution implements IWorkbenchContribution {\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ITerminalInstanceService terminalInstanceService: ITerminalInstanceService\n\t) {\n\t\tconst backend = instantiationService.createInstance(LocalTerminalBackend);\n\t\tRegistry.as<ITerminalBackendRegistry>(TerminalExtensions.Backend).registerTerminalBackend(backend);\n\t\tterminalInstanceService.didRegisterBackend(backend.remoteAuthority);\n\t}\n}\n\nclass LocalTerminalBackend extends BaseTerminalBackend implements ITerminalBackend {\n\treadonly remoteAuthority = undefined;\n\n\tprivate readonly _ptys: Map<number, LocalPty> = new Map();\n\n\tprivate _directProxyClientEventually: DeferredPromise<MessagePortClient> | undefined;\n\tprivate _directProxy: IPtyService | undefined;\n\t/**\n\t * Communicate to the direct proxy (renderer<->ptyhost) if it's available, otherwise use the\n\t * indirect proxy (renderer<->main<->ptyhost). The latter may not need to actually launch the\n\t * pty host, for example when detecting profiles.\n\t */\n\tprivate get _proxy(): IPtyService { return this._directProxy || this._localPtyService; }\n\n\tprivate readonly _whenReady = new DeferredPromise<void>();\n\tget whenReady(): Promise<void> { return this._whenReady.p; }\n\tsetReady(): void { this._whenReady.complete(); }\n\n\tprivate readonly _onDidRequestDetach = this._register(new Emitter<{ requestId: number; workspaceId: string; instanceId: number }>());\n\treadonly onDidRequestDetach = this._onDidRequestDetach.event;\n\n\tconstructor(\n\t\t@IWorkspaceContextService workspaceContextService: IWorkspaceContextService,\n\t\t@ILifecycleService private readonly _lifecycleService: ILifecycleService,\n\t\t@ITerminalLogService logService: ITerminalLogService,\n\t\t@ILocalPtyService private readonly _localPtyService: ILocalPtyService,\n\t\t@ILabelService private readonly _labelService: ILabelService,\n\t\t@IShellEnvironmentService private readonly _shellEnvironmentService: IShellEnvironmentService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@IConfigurationResolverService private readonly _configurationResolverService: IConfigurationResolverService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t\t@IHistoryService private readonly _historyService: IHistoryService,\n\t\t@ITerminalProfileResolverService private readonly _terminalProfileResolverService: ITerminalProfileResolverService,\n\t\t@IEnvironmentVariableService private readonly _environmentVariableService: IEnvironmentVariableService,\n\t\t@IHistoryService historyService: IHistoryService,\n\t\t@INativeWorkbenchEnvironmentService private readonly _environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IStatusbarService statusBarService: IStatusbarService,\n\t\t@IRemoteAgentService private readonly _remoteAgentService: IRemoteAgentService,\n\t) {\n\t\tsuper(_localPtyService, logService, historyService, _configurationResolverService, statusBarService, workspaceContextService);\n\n\t\tthis.onPtyHostRestart(() => {\n\t\t\tthis._directProxy = undefined;\n\t\t\tthis._directProxyClientEventually = undefined;\n\t\t\tthis._connectToDirectProxy();\n\t\t});\n\t}\n\n\t/**\n\t * Request a direct connection to the pty host, this will launch the pty host process if necessary.\n\t */\n\tprivate async _connectToDirectProxy(): Promise<void> {\n\t\t// Check if connecting is in progress\n\t\tif (this._directProxyClientEventually) {\n\t\t\tawait this._directProxyClientEventually.p;\n\t\t\treturn;\n\t\t}\n\n\t\tthis._logService.debug('Starting pty host');\n\t\tconst directProxyClientEventually = new DeferredPromise<MessagePortClient>();\n\t\tthis._directProxyClientEventually = directProxyClientEventually;\n\t\tconst directProxy = ProxyChannel.toService<IPtyService>(getDelayedChannel(this._directProxyClientEventually.p.then(client => client.getChannel(TerminalIpcChannels.PtyHostWindow))));\n\t\tthis._directProxy = directProxy;\n\n\t\t// The pty host should not get launched until at least the window restored phase\n\t\t// if remote auth exists, don't await\n\t\tif (!this._remoteAgentService.getConnection()?.remoteAuthority) {\n\t\t\tawait this._lifecycleService.when(LifecyclePhase.Restored);\n\t\t}\n\n\t\tmark('code/terminal/willConnectPtyHost');\n\t\tthis._logService.trace('Renderer->PtyHost#connect: before acquirePort');\n\t\tacquirePort('vscode:createPtyHostMessageChannel', 'vscode:createPtyHostMessageChannelResult').then(port => {\n\t\t\tmark('code/terminal/didConnectPtyHost');\n\t\t\tthis._logService.trace('Renderer->PtyHost#connect: connection established');\n\t\t\t// There are two connections to the pty host; one to the regular shared process\n\t\t\t// _localPtyService, and one directly via message port _ptyHostDirectProxy. The former is\n\t\t\t// used for pty host management messages, it would make sense in the future to use a\n\t\t\t// separate interface/service for this one.\n\t\t\tconst client = new MessagePortClient(port, `window:${this._environmentService.window.id}`);\n\t\t\tdirectProxyClientEventually.complete(client);\n\t\t\tthis._onPtyHostConnected.fire();\n\n\t\t\t// Attach process listeners\n\t\t\tdirectProxy.onProcessData(e => this._ptys.get(e.id)?.handleData(e.event));\n\t\t\tdirectProxy.onDidChangeProperty(e => this._ptys.get(e.id)?.handleDidChangeProperty(e.property));\n\t\t\tdirectProxy.onProcessExit(e => {\n\t\t\t\tconst pty = this._ptys.get(e.id);\n\t\t\t\tif (pty) {\n\t\t\t\t\tpty.handleExit(e.event);\n\t\t\t\t\tthis._ptys.delete(e.id);\n\t\t\t\t}\n\t\t\t});\n\t\t\tdirectProxy.onProcessReady(e => this._ptys.get(e.id)?.handleReady(e.event));\n\t\t\tdirectProxy.onProcessReplay(e => this._ptys.get(e.id)?.handleReplay(e.event));\n\t\t\tdirectProxy.onProcessOrphanQuestion(e => this._ptys.get(e.id)?.handleOrphanQuestion());\n\t\t\tdirectProxy.onDidRequestDetach(e => this._onDidRequestDetach.fire(e));\n\n\t\t\t// Listen for config changes\n\t\t\tconst initialConfig = this._configurationService.getValue<ITerminalConfiguration>(TERMINAL_CONFIG_SECTION);\n\t\t\tfor (const match of Object.keys(initialConfig.autoReplies)) {\n\t\t\t\t// Ensure the reply is value\n\t\t\t\tconst reply = initialConfig.autoReplies[match] as string | null;\n\t\t\t\tif (reply) {\n\t\t\t\t\tdirectProxy.installAutoReply(match, reply);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// TODO: Could simplify update to a single call\n\t\t\tthis._register(this._configurationService.onDidChangeConfiguration(async e => {\n\t\t\t\tif (e.affectsConfiguration(TerminalSettingId.AutoReplies)) {\n\t\t\t\t\tdirectProxy.uninstallAllAutoReplies();\n\t\t\t\t\tconst config = this._configurationService.getValue<ITerminalConfiguration>(TERMINAL_CONFIG_SECTION);\n\t\t\t\t\tfor (const match of Object.keys(config.autoReplies)) {\n\t\t\t\t\t\t// Ensure the reply is value\n\t\t\t\t\t\tconst reply = config.autoReplies[match] as string | null;\n\t\t\t\t\t\tif (reply) {\n\t\t\t\t\t\t\tthis._proxy.installAutoReply(match, reply);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\t// Eagerly fetch the backend's environment for memoization\n\t\t\tthis.getEnvironment();\n\t\t});\n\t}\n\n\tasync requestDetachInstance(workspaceId: string, instanceId: number): Promise<IProcessDetails | undefined> {\n\t\treturn this._proxy.requestDetachInstance(workspaceId, instanceId);\n\t}\n\n\tasync acceptDetachInstanceReply(requestId: number, persistentProcessId?: number): Promise<void> {\n\t\tif (!persistentProcessId) {\n\t\t\tthis._logService.warn('Cannot attach to feature terminals, custom pty terminals, or those without a persistentProcessId');\n\t\t\treturn;\n\t\t}\n\t\treturn this._proxy.acceptDetachInstanceReply(requestId, persistentProcessId);\n\t}\n\n\tasync persistTerminalState(): Promise<void> {\n\t\tconst ids = Array.from(this._ptys.keys());\n\t\tconst serialized = await this._proxy.serializeTerminalState(ids);\n\t\tthis._storageService.store(TerminalStorageKeys.TerminalBufferState, serialized, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n\n\tasync updateTitle(id: number, title: string, titleSource: TitleEventSource): Promise<void> {\n\t\tawait this._proxy.updateTitle(id, title, titleSource);\n\t}\n\n\tasync updateIcon(id: number, userInitiated: boolean, icon: URI | { light: URI; dark: URI } | { id: string; color?: { id: string } }, color?: string): Promise<void> {\n\t\tawait this._proxy.updateIcon(id, userInitiated, icon, color);\n\t}\n\n\tasync updateProperty<T extends ProcessPropertyType>(id: number, property: ProcessPropertyType, value: IProcessPropertyMap[T]): Promise<void> {\n\t\treturn this._proxy.updateProperty(id, property, value);\n\t}\n\n\tasync createProcess(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tcwd: string,\n\t\tcols: number,\n\t\trows: number,\n\t\tunicodeVersion: '6' | '11',\n\t\tenv: IProcessEnvironment,\n\t\toptions: ITerminalProcessOptions,\n\t\tshouldPersist: boolean\n\t): Promise<ITerminalChildProcess> {\n\t\tawait this._connectToDirectProxy();\n\t\tconst executableEnv = await this._shellEnvironmentService.getShellEnv();\n\t\tconst id = await this._proxy.createProcess(shellLaunchConfig, cwd, cols, rows, unicodeVersion, env, executableEnv, options, shouldPersist, this._getWorkspaceId(), this._getWorkspaceName());\n\t\tconst pty = new LocalPty(id, shouldPersist, this._proxy);\n\t\tthis._ptys.set(id, pty);\n\t\treturn pty;\n\t}\n\n\tasync attachToProcess(id: number): Promise<ITerminalChildProcess | undefined> {\n\t\tawait this._connectToDirectProxy();\n\t\ttry {\n\t\t\tawait this._proxy.attachToProcess(id);\n\t\t\tconst pty = new LocalPty(id, true, this._proxy);\n\t\t\tthis._ptys.set(id, pty);\n\t\t\treturn pty;\n\t\t} catch (e) {\n\t\t\tthis._logService.warn(`Couldn't attach to process ${e.message}`);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync attachToRevivedProcess(id: number): Promise<ITerminalChildProcess | undefined> {\n\t\tawait this._connectToDirectProxy();\n\t\ttry {\n\t\t\tconst newId = await this._proxy.getRevivedPtyNewId(this._getWorkspaceId(), id) ?? id;\n\t\t\treturn await this.attachToProcess(newId);\n\t\t} catch (e) {\n\t\t\tthis._logService.warn(`Couldn't attach to process ${e.message}`);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync listProcesses(): Promise<IProcessDetails[]> {\n\t\tawait this._connectToDirectProxy();\n\t\treturn this._proxy.listProcesses();\n\t}\n\n\tasync getLatency(): Promise<IPtyHostLatencyMeasurement[]> {\n\t\tconst measurements: IPtyHostLatencyMeasurement[] = [];\n\t\tconst sw = new StopWatch();\n\t\tif (this._directProxy) {\n\t\t\tawait this._directProxy.getLatency();\n\t\t\tsw.stop();\n\t\t\tmeasurements.push({\n\t\t\t\tlabel: 'window<->ptyhost (message port)',\n\t\t\t\tlatency: sw.elapsed()\n\t\t\t});\n\t\t\tsw.reset();\n\t\t}\n\t\tconst results = await this._localPtyService.getLatency();\n\t\tsw.stop();\n\t\tmeasurements.push({\n\t\t\tlabel: 'window<->ptyhostservice<->ptyhost',\n\t\t\tlatency: sw.elapsed()\n\t\t});\n\t\treturn [\n\t\t\t...measurements,\n\t\t\t...results\n\t\t];\n\t}\n\n\tasync getPerformanceMarks(): Promise<PerformanceMark[]> {\n\t\treturn this._proxy.getPerformanceMarks();\n\t}\n\n\tasync reduceConnectionGraceTime(): Promise<void> {\n\t\tthis._proxy.reduceConnectionGraceTime();\n\t}\n\n\tasync getDefaultSystemShell(osOverride?: OperatingSystem): Promise<string> {\n\t\treturn this._proxy.getDefaultSystemShell(osOverride);\n\t}\n\n\tasync getProfiles(profiles: unknown, defaultProfile: unknown, includeDetectedProfiles?: boolean) {\n\t\treturn this._localPtyService.getProfiles(this._workspaceContextService.getWorkspace().id, profiles, defaultProfile, includeDetectedProfiles) || [];\n\t}\n\n\t@memoize\n\tasync getEnvironment(): Promise<IProcessEnvironment> {\n\t\treturn this._proxy.getEnvironment();\n\t}\n\n\t@memoize\n\tasync getShellEnvironment(): Promise<IProcessEnvironment> {\n\t\treturn this._shellEnvironmentService.getShellEnv();\n\t}\n\n\tasync getWslPath(original: string, direction: 'unix-to-win' | 'win-to-unix'): Promise<string> {\n\t\treturn this._proxy.getWslPath(original, direction);\n\t}\n\n\tasync setTerminalLayoutInfo(layoutInfo?: ITerminalsLayoutInfoById): Promise<void> {\n\t\tconst args: ISetTerminalLayoutInfoArgs = {\n\t\t\tworkspaceId: this._getWorkspaceId(),\n\t\t\ttabs: layoutInfo ? layoutInfo.tabs : []\n\t\t};\n\t\tawait this._proxy.setTerminalLayoutInfo(args);\n\t\t// Store in the storage service as well to be used when reviving processes as normally this\n\t\t// is stored in memory on the pty host\n\t\tthis._storageService.store(TerminalStorageKeys.TerminalLayoutInfo, JSON.stringify(args), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n\n\tasync getTerminalLayoutInfo(): Promise<ITerminalsLayoutInfo | undefined> {\n\t\tconst workspaceId = this._getWorkspaceId();\n\t\tconst layoutArgs: IGetTerminalLayoutInfoArgs = { workspaceId };\n\n\t\t// Revive processes if needed\n\t\tconst serializedState = this._storageService.get(TerminalStorageKeys.TerminalBufferState, StorageScope.WORKSPACE);\n\t\tconst reviveBufferState = this._deserializeTerminalState(serializedState);\n\t\tif (reviveBufferState && reviveBufferState.length > 0) {\n\t\t\ttry {\n\t\t\t\t// Create variable resolver\n\t\t\t\tconst activeWorkspaceRootUri = this._historyService.getLastActiveWorkspaceRoot();\n\t\t\t\tconst lastActiveWorkspace = activeWorkspaceRootUri ? this._workspaceContextService.getWorkspaceFolder(activeWorkspaceRootUri) ?? undefined : undefined;\n\t\t\t\tconst variableResolver = terminalEnvironment.createVariableResolver(lastActiveWorkspace, await this._terminalProfileResolverService.getEnvironment(this.remoteAuthority), this._configurationResolverService);\n\n\t\t\t\t// Re-resolve the environments and replace it on the state so local terminals use a fresh\n\t\t\t\t// environment\n\t\t\t\tmark('code/terminal/willGetReviveEnvironments');\n\t\t\t\tawait Promise.all(reviveBufferState.map(state => new Promise<void>(r => {\n\t\t\t\t\tthis._resolveEnvironmentForRevive(variableResolver, state.shellLaunchConfig).then(freshEnv => {\n\t\t\t\t\t\tstate.processLaunchConfig.env = freshEnv;\n\t\t\t\t\t\tr();\n\t\t\t\t\t});\n\t\t\t\t})));\n\t\t\t\tmark('code/terminal/didGetReviveEnvironments');\n\n\t\t\t\tmark('code/terminal/willReviveTerminalProcesses');\n\t\t\t\tawait this._proxy.reviveTerminalProcesses(workspaceId, reviveBufferState, Intl.DateTimeFormat().resolvedOptions().locale);\n\t\t\t\tmark('code/terminal/didReviveTerminalProcesses');\n\t\t\t\tthis._storageService.remove(TerminalStorageKeys.TerminalBufferState, StorageScope.WORKSPACE);\n\t\t\t\t// If reviving processes, send the terminal layout info back to the pty host as it\n\t\t\t\t// will not have been persisted on application exit\n\t\t\t\tconst layoutInfo = this._storageService.get(TerminalStorageKeys.TerminalLayoutInfo, StorageScope.WORKSPACE);\n\t\t\t\tif (layoutInfo) {\n\t\t\t\t\tmark('code/terminal/willSetTerminalLayoutInfo');\n\t\t\t\t\tawait this._proxy.setTerminalLayoutInfo(JSON.parse(layoutInfo));\n\t\t\t\t\tmark('code/terminal/didSetTerminalLayoutInfo');\n\t\t\t\t\tthis._storageService.remove(TerminalStorageKeys.TerminalLayoutInfo, StorageScope.WORKSPACE);\n\t\t\t\t}\n\t\t\t} catch (e: unknown) {\n\t\t\t\tthis._logService.warn('LocalTerminalBackend#getTerminalLayoutInfo Error', e && typeof e === 'object' && 'message' in e ? e.message : e);\n\t\t\t}\n\t\t}\n\n\t\treturn this._proxy.getTerminalLayoutInfo(layoutArgs);\n\t}\n\n\tprivate async _resolveEnvironmentForRevive(variableResolver: terminalEnvironment.VariableResolver | undefined, shellLaunchConfig: IShellLaunchConfig): Promise<IProcessEnvironment> {\n\t\tconst platformKey = isWindows ? 'windows' : (isMacintosh ? 'osx' : 'linux');\n\t\tconst envFromConfigValue = this._configurationService.getValue<ITerminalEnvironment | undefined>(`terminal.integrated.env.${platformKey}`);\n\t\tconst baseEnv = await (shellLaunchConfig.useShellEnvironment ? this.getShellEnvironment() : this.getEnvironment());\n\t\tconst env = await terminalEnvironment.createTerminalEnvironment(shellLaunchConfig, envFromConfigValue, variableResolver, this._productService.version, this._configurationService.getValue(TerminalSettingId.DetectLocale), baseEnv);\n\t\tif (!shellLaunchConfig.strictEnv && !shellLaunchConfig.hideFromUser) {\n\t\t\tconst workspaceFolder = terminalEnvironment.getWorkspaceForTerminal(shellLaunchConfig.cwd, this._workspaceContextService, this._historyService);\n\t\t\tawait this._environmentVariableService.mergedCollection.applyToProcessEnvironment(env, { workspaceFolder }, variableResolver);\n\t\t}\n\t\treturn env;\n\t}\n\n\tprivate _getWorkspaceName(): string {\n\t\treturn this._labelService.getWorkspaceLabel(this._workspaceContextService.getWorkspace());\n\t}\n}\n"]}