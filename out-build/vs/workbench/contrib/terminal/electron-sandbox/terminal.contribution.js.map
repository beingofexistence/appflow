{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/electron-sandbox/terminal.contribution.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAahG,oBAAoB;IACpB,IAAA,eAAI,EAA6B,cAAG,EAAe,8BAAmB,CAAC,QAAQ,CAAC,CAAC;IACjF,IAAA,gBAAG,EAAe,cAAG,EAA8B,qCAAI,oCAA8D,CAAC;IAEtH,mCAAmC;IACnC,MAAM,iBAAiB,GAAG,cAAG,CAAM,EAAE,CAAkC,0BAAmB,CAAC,SAAS,CAAC,CAAC;IAEtG,6HAA6H;IAC7H,2CAA2C;IAC3C,iBAAiB,CAAC,6BAA6B,CAAC,2BAAI,kCAAsD,CAAC;IAC3G,iBAAiB,CAAC,6BAA6B,CAAC,iCAAI,kCAAgD,CAAC","file":"terminal.contribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { registerMainProcessRemoteService } from 'vs/platform/ipc/electron-sandbox/services';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { ILocalPtyService, TerminalIpcChannels } from 'vs/platform/terminal/common/terminal';\nimport { IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { ITerminalProfileResolverService } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { TerminalNativeContribution } from 'vs/workbench/contrib/terminal/electron-sandbox/terminalNativeContribution';\nimport { ElectronTerminalProfileResolverService } from 'vs/workbench/contrib/terminal/electron-sandbox/terminalProfileResolverService';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { LocalTerminalBackendContribution } from 'vs/workbench/contrib/terminal/electron-sandbox/localTerminalBackend';\n\n// Register services\nregisterMainProcessRemoteService(ILocalPtyService, TerminalIpcChannels.LocalPty);\nregisterSingleton(ITerminalProfileResolverService, ElectronTerminalProfileResolverService, InstantiationType.Delayed);\n\n// Register workbench contributions\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\n\n// This contribution needs to be active during the Startup phase to be available when a remote resolver tries to open a local\n// terminal while connecting to the remote.\nworkbenchRegistry.registerWorkbenchContribution(LocalTerminalBackendContribution, LifecyclePhase.Starting);\nworkbenchRegistry.registerWorkbenchContribution(TerminalNativeContribution, LifecyclePhase.Restored);\n"]}