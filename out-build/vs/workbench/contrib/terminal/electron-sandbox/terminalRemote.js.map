{"version":3,"sources":["vs/workbench/contrib/terminal/electron-sandbox/terminalRemote.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAWhG,SAAgB,IAAI;QACnB,IAAA,sBAAI,EAAmB;YACtB,EAAE,uEAA4B;YAC9B,KAAK,EAAE,EAAE,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAoC,EAAE,IAAwC,CAAC,EAAE,QAAQ,EAAE,wCAAwC,EAAE;YAC9J,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,QAAQ,EAAE,EAAE;gBAC1B,MAAM,cAAc,GAAG,QAAQ,CAAC,GAAG,CAAC,aAAG,CAAa,CAAC;gBACrD,MAAM,8BAA8B,GAAG,QAAQ,CAAC,GAAG,CAAC,6BAAG,CAA6B,CAAC;gBACrF,MAAM,wBAAwB,GAAG,QAAQ,CAAC,GAAG,CAAC,iBAAG,CAAuB,CAAC;gBACzE,IAAI,GAAoB,CAAC;gBACzB,IAAI;oBACH,MAAM,sBAAsB,GAAG,cAAc,CAAC,0BAA0B,CAAC,iBAAO,CAAC,YAAY,CAAC,CAAC;oBAC/F,IAAI,sBAAsB,EAAE;wBAC3B,MAAM,YAAY,GAAG,MAAM,8BAA8B,CAAC,eAAe,CAAC,sBAAsB,CAAC,CAAC;wBAClG,IAAI,YAAY,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,EAAE;4BACzC,GAAG,GAAG,YAAY,CAAC;yBACnB;qBACD;iBACD;gBAAC,MAAM,GAAG;gBACX,IAAI,CAAC,GAAG,EAAE;oBACT,GAAG,GAAG,wBAAwB,CAAC,QAAQ,CAAC;iBACxC;gBACD,MAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC;gBACzD,IAAI,CAAC,QAAQ,EAAE;oBACd,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;iBAClC;gBAED,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;gBACtC,OAAO,CAAC,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;YACvC,CAAC;SACD,CAAC,CAAC;IACJ,CAAC;IA9BD,oBA8BC","file":"terminalRemote.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IRemoteAuthorityResolverService } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { registerTerminalAction } from 'vs/workbench/contrib/terminal/browser/terminalActions';\nimport { TerminalCommandId } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { IHistoryService } from 'vs/workbench/services/history/common/history';\n\nexport function registerRemoteContributions() {\n\tregisterTerminalAction({\n\t\tid: TerminalCommandId.NewLocal,\n\t\ttitle: { value: localize('workbench.action.terminal.newLocal', \"Create New Integrated Terminal (Local)\"), original: 'Create New Integrated Terminal (Local)' },\n\t\trun: async (c, accessor) => {\n\t\t\tconst historyService = accessor.get(IHistoryService);\n\t\t\tconst remoteAuthorityResolverService = accessor.get(IRemoteAuthorityResolverService);\n\t\t\tconst nativeEnvironmentService = accessor.get(INativeEnvironmentService);\n\t\t\tlet cwd: URI | undefined;\n\t\t\ttry {\n\t\t\t\tconst activeWorkspaceRootUri = historyService.getLastActiveWorkspaceRoot(Schemas.vscodeRemote);\n\t\t\t\tif (activeWorkspaceRootUri) {\n\t\t\t\t\tconst canonicalUri = await remoteAuthorityResolverService.getCanonicalURI(activeWorkspaceRootUri);\n\t\t\t\t\tif (canonicalUri.scheme === Schemas.file) {\n\t\t\t\t\t\tcwd = canonicalUri;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch { }\n\t\t\tif (!cwd) {\n\t\t\t\tcwd = nativeEnvironmentService.userHome;\n\t\t\t}\n\t\t\tconst instance = await c.service.createTerminal({ cwd });\n\t\t\tif (!instance) {\n\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t}\n\n\t\t\tc.service.setActiveInstance(instance);\n\t\t\treturn c.groupService.showPanel(true);\n\t\t}\n\t});\n}\n"]}