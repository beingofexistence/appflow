{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminal/electron-sandbox/terminalNativeContribution.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAazF,IAAM,IAAI,GAAV,MAAM,IAA2B,SAAQ,eAAG;QAGlD,YACgC,CAAiB,EACb,CAAsB,EACpC,kBAAuB,EACxB,iBAAuB;YAE3C,KAAK,EAAE,CAAC;YALuB,MAAC,GAAD,CAAC,CAAgB;YACb,MAAC,GAAD,CAAC,CAAqB;YAMzD,YAAE,CAAU,EAAE,CAAC,kBAAkB,EAAE,CAAC,CAAU,EAAE,OAA+B,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC,CAAkB,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3H,IAAI,CAAC,CAAC,CAAS,iBAAiB,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,EAAY,CAAC,CAAC,CAAC;YAE1E,IAAI,CAAC,CAAC,CAAgB,iBAAiB,CAAC;gBACvC,cAAc,EAAE,GAAG,EAAE,CAAC,iBAAiB,CAAC,cAAc,EAAE;aACxD,CAAC,CAAC;YAEH,MAAM,UAAU,GAAG,kBAAkB,CAAC,aAAa,EAAE,CAAC;YACtD,IAAI,UAAU,IAAI,UAAU,CAAC,eAAe,EAAE;gBAC7C,IAAA,qBAAI,GAAyB,CAAC;aAC9B;QACF,CAAC;QAEO,CAAC;YACR,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAgB,SAAS,EAAE;gBACvD,QAAQ,CAAC,KAAK,EAAE,WAAW,EAAE,CAAC;aAC9B;QACF,CAAC;QAEO,KAAK,CAAC,CAAC,CAAkB,OAA+B;YAC/D,4FAA4F;YAC5F,0FAA0F;YAC1F,6EAA6E;YAC7E,IAAI,OAAO,CAAC,WAAW,KAAK,QAAQ,IAAI,OAAO,CAAC,WAAW,EAAE;gBAC5D,MAAM,iBAAiB,GAAG,SAAG,CAAC,MAAM,CAAC,OAAO,CAAC,WAAW,CAAC,iBAAiB,CAAC,CAAC;gBAC5E,MAAM,IAAI,CAAC,CAAC,CAAgB,iBAAiB,CAAC,CAAC;gBAE/C,wBAAwB;gBACxB,IAAI,CAAC,CAAC,CAAgB,cAAc,EAAE,KAAK,EAAE,CAAC;aAC9C;QACF,CAAC;QAEO,CAAC,CAAgB,IAAS;YACjC,4CAA4C;YAC5C,OAAO,IAAI,OAAO,CAAO,OAAO,CAAC,EAAE;gBAClC,IAAI,OAAO,GAAG,KAAK,CAAC;gBACpB,MAAM,QAAQ,GAAG,WAAW,CAAC,KAAK,IAAI,EAAE;oBACvC,IAAI,CAAC,OAAO,EAAE;wBACb,OAAO,GAAG,IAAI,CAAC;wBACf,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,CAAC,CAAY,MAAM,CAAC,IAAI,CAAC,CAAC;wBACpD,OAAO,GAAG,KAAK,CAAC;wBAEhB,IAAI,CAAC,MAAM,EAAE;4BACZ,aAAa,CAAC,QAAQ,CAAC,CAAC;4BACxB,OAAO,CAAC,SAAS,CAAC,CAAC;yBACnB;qBACD;gBACF,CAAC,EAAE,IAAI,CAAC,CAAC;YACV,CAAC,CAAC,CAAC;QACJ,CAAC;KACD,CAAA;IA7DY,oBAAI;mBAAJ,IAAI;QAId,WAAA,WAAG,CAAA;QACH,WAAA,eAAI,CAAA;QACJ,WAAA,wBAAG,CAAA;QACH,WAAA,aAAI,CAAA;OAPM,IAAI,CA6DhB","file":"terminalNativeContribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ipcRenderer } from 'vs/base/parts/sandbox/electron-sandbox/globals';\nimport { INativeOpenFileRequest } from 'vs/platform/window/common/window';\nimport { URI } from 'vs/base/common/uri';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { registerRemoteContributions } from 'vs/workbench/contrib/terminal/electron-sandbox/terminalRemote';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { INativeHostService } from 'vs/platform/native/common/native';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ITerminalService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\n\nexport class TerminalNativeContribution extends Disposable implements IWorkbenchContribution {\n\tdeclare _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IFileService private readonly _fileService: IFileService,\n\t\t@ITerminalService private readonly _terminalService: ITerminalService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@INativeHostService nativeHostService: INativeHostService\n\t) {\n\t\tsuper();\n\n\t\tipcRenderer.on('vscode:openFiles', (_: unknown, request: INativeOpenFileRequest) => { this._onOpenFileRequest(request); });\n\t\tthis._register(nativeHostService.onDidResumeOS(() => this._onOsResume()));\n\n\t\tthis._terminalService.setNativeDelegate({\n\t\t\tgetWindowCount: () => nativeHostService.getWindowCount()\n\t\t});\n\n\t\tconst connection = remoteAgentService.getConnection();\n\t\tif (connection && connection.remoteAuthority) {\n\t\t\tregisterRemoteContributions();\n\t\t}\n\t}\n\n\tprivate _onOsResume(): void {\n\t\tfor (const instance of this._terminalService.instances) {\n\t\t\tinstance.xterm?.forceRedraw();\n\t\t}\n\t}\n\n\tprivate async _onOpenFileRequest(request: INativeOpenFileRequest): Promise<void> {\n\t\t// if the request to open files is coming in from the integrated terminal (identified though\n\t\t// the termProgram variable) and we are instructed to wait for editors close, wait for the\n\t\t// marker file to get deleted and then focus back to the integrated terminal.\n\t\tif (request.termProgram === 'vscode' && request.filesToWait) {\n\t\t\tconst waitMarkerFileUri = URI.revive(request.filesToWait.waitMarkerFileUri);\n\t\t\tawait this._whenFileDeleted(waitMarkerFileUri);\n\n\t\t\t// Focus active terminal\n\t\t\tthis._terminalService.activeInstance?.focus();\n\t\t}\n\t}\n\n\tprivate _whenFileDeleted(path: URI): Promise<void> {\n\t\t// Complete when wait marker file is deleted\n\t\treturn new Promise<void>(resolve => {\n\t\t\tlet running = false;\n\t\t\tconst interval = setInterval(async () => {\n\t\t\t\tif (!running) {\n\t\t\t\t\trunning = true;\n\t\t\t\t\tconst exists = await this._fileService.exists(path);\n\t\t\t\t\trunning = false;\n\n\t\t\t\t\tif (!exists) {\n\t\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, 1000);\n\t\t});\n\t}\n}\n"]}