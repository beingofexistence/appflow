{"version":3,"sources":["vs/workbench/contrib/quickaccess/browser/viewQuickAccess.ts"],"names":[],"mappings":"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","file":"viewQuickAccess.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { IQuickPickSeparator, IQuickInputService, ItemActivation } from 'vs/platform/quickinput/common/quickInput';\nimport { IPickerQuickAccessItem, PickerQuickAccessProvider } from 'vs/platform/quickinput/browser/pickerQuickAccess';\nimport { IViewDescriptorService, IViewsService, ViewContainer, ViewContainerLocation } from 'vs/workbench/common/views';\nimport { IOutputService } from 'vs/workbench/services/output/common/output';\nimport { ITerminalGroupService, ITerminalService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { PaneCompositeDescriptor } from 'vs/workbench/browser/panecomposite';\nimport { matchesFuzzy } from 'vs/base/common/filters';\nimport { fuzzyContains } from 'vs/base/common/strings';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { Action2 } from 'vs/platform/actions/common/actions';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { KeyMod, KeyCode } from 'vs/base/common/keyCodes';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { Categories } from 'vs/platform/action/common/actionCommonCategories';\nimport { IPaneCompositePartService } from 'vs/workbench/services/panecomposite/browser/panecomposite';\nimport { IDebugService, REPL_VIEW_ID } from 'vs/workbench/contrib/debug/common/debug';\n\ninterface IViewQuickPickItem extends IPickerQuickAccessItem {\n\tcontainerLabel: string;\n}\n\nexport class ViewQuickAccessProvider extends PickerQuickAccessProvider<IViewQuickPickItem> {\n\n\tstatic PREFIX = 'view ';\n\n\tconstructor(\n\t\t@IViewDescriptorService private readonly viewDescriptorService: IViewDescriptorService,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t\t@IOutputService private readonly outputService: IOutputService,\n\t\t@ITerminalService private readonly terminalService: ITerminalService,\n\t\t@ITerminalGroupService private readonly terminalGroupService: ITerminalGroupService,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IPaneCompositePartService private readonly paneCompositeService: IPaneCompositePartService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService\n\t) {\n\t\tsuper(ViewQuickAccessProvider.PREFIX, {\n\t\t\tnoResultsPick: {\n\t\t\t\tlabel: localize('noViewResults', \"No matching views\"),\n\t\t\t\tcontainerLabel: ''\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected _getPicks(filter: string): Array<IViewQuickPickItem | IQuickPickSeparator> {\n\t\tconst filteredViewEntries = this.doGetViewPickItems().filter(entry => {\n\t\t\tif (!filter) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\t// Match fuzzy on label\n\t\t\tentry.highlights = { label: matchesFuzzy(filter, entry.label, true) ?? undefined };\n\n\t\t\t// Return if we have a match on label or container\n\t\t\treturn entry.highlights.label || fuzzyContains(entry.containerLabel, filter);\n\t\t});\n\n\t\t// Map entries to container labels\n\t\tconst mapEntryToContainer = new Map<string, string>();\n\t\tfor (const entry of filteredViewEntries) {\n\t\t\tif (!mapEntryToContainer.has(entry.label)) {\n\t\t\t\tmapEntryToContainer.set(entry.label, entry.containerLabel);\n\t\t\t}\n\t\t}\n\n\t\t// Add separators for containers\n\t\tconst filteredViewEntriesWithSeparators: Array<IViewQuickPickItem | IQuickPickSeparator> = [];\n\t\tlet lastContainer: string | undefined = undefined;\n\t\tfor (const entry of filteredViewEntries) {\n\t\t\tif (lastContainer !== entry.containerLabel) {\n\t\t\t\tlastContainer = entry.containerLabel;\n\n\t\t\t\t// When the entry container has a parent container, set container\n\t\t\t\t// label as Parent / Child. For example, `Views / Explorer`.\n\t\t\t\tlet separatorLabel: string;\n\t\t\t\tif (mapEntryToContainer.has(lastContainer)) {\n\t\t\t\t\tseparatorLabel = `${mapEntryToContainer.get(lastContainer)} / ${lastContainer}`;\n\t\t\t\t} else {\n\t\t\t\t\tseparatorLabel = lastContainer;\n\t\t\t\t}\n\n\t\t\t\tfilteredViewEntriesWithSeparators.push({ type: 'separator', label: separatorLabel });\n\n\t\t\t}\n\n\t\t\tfilteredViewEntriesWithSeparators.push(entry);\n\t\t}\n\n\t\treturn filteredViewEntriesWithSeparators;\n\t}\n\n\tprivate doGetViewPickItems(): Array<IViewQuickPickItem> {\n\t\tconst viewEntries: Array<IViewQuickPickItem> = [];\n\n\t\tconst getViewEntriesForPaneComposite = (paneComposite: PaneCompositeDescriptor, viewContainer: ViewContainer): IViewQuickPickItem[] => {\n\t\t\tconst viewContainerModel = this.viewDescriptorService.getViewContainerModel(viewContainer);\n\t\t\tconst result: IViewQuickPickItem[] = [];\n\t\t\tfor (const view of viewContainerModel.allViewDescriptors) {\n\t\t\t\tif (this.contextKeyService.contextMatchesRules(view.when)) {\n\t\t\t\t\tresult.push({\n\t\t\t\t\t\tlabel: view.name,\n\t\t\t\t\t\tcontainerLabel: viewContainerModel.title,\n\t\t\t\t\t\taccept: () => this.viewsService.openView(view.id, true)\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t};\n\n\t\tconst addPaneComposites = (location: ViewContainerLocation, containerLabel: string) => {\n\t\t\tconst paneComposites = this.paneCompositeService.getPaneComposites(location);\n\t\t\tconst visiblePaneCompositeIds = this.paneCompositeService.getVisiblePaneCompositeIds(location);\n\n\t\t\tpaneComposites.sort((a, b) => {\n\t\t\t\tlet aIndex = visiblePaneCompositeIds.findIndex(id => a.id === id);\n\t\t\t\tlet bIndex = visiblePaneCompositeIds.findIndex(id => b.id === id);\n\n\t\t\t\tif (aIndex < 0) {\n\t\t\t\t\taIndex = paneComposites.indexOf(a) + visiblePaneCompositeIds.length;\n\t\t\t\t}\n\n\t\t\t\tif (bIndex < 0) {\n\t\t\t\t\tbIndex = paneComposites.indexOf(b) + visiblePaneCompositeIds.length;\n\t\t\t\t}\n\n\t\t\t\treturn aIndex - bIndex;\n\t\t\t});\n\n\t\t\tfor (const paneComposite of paneComposites) {\n\t\t\t\tif (this.includeViewContainer(paneComposite)) {\n\t\t\t\t\tconst viewContainer = this.viewDescriptorService.getViewContainerById(paneComposite.id);\n\t\t\t\t\tif (viewContainer) {\n\t\t\t\t\t\tviewEntries.push({\n\t\t\t\t\t\t\tlabel: this.viewDescriptorService.getViewContainerModel(viewContainer).title,\n\t\t\t\t\t\t\tcontainerLabel,\n\t\t\t\t\t\t\taccept: () => this.paneCompositeService.openPaneComposite(paneComposite.id, location, true)\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Viewlets / Panels\n\t\taddPaneComposites(ViewContainerLocation.Sidebar, localize('views', \"Side Bar\"));\n\t\taddPaneComposites(ViewContainerLocation.Panel, localize('panels', \"Panel\"));\n\t\taddPaneComposites(ViewContainerLocation.AuxiliaryBar, localize('secondary side bar', \"Secondary Side Bar\"));\n\n\t\tconst addPaneCompositeViews = (location: ViewContainerLocation) => {\n\t\t\tconst paneComposites = this.paneCompositeService.getPaneComposites(location);\n\t\t\tfor (const paneComposite of paneComposites) {\n\t\t\t\tconst viewContainer = this.viewDescriptorService.getViewContainerById(paneComposite.id);\n\t\t\t\tif (viewContainer) {\n\t\t\t\t\tviewEntries.push(...getViewEntriesForPaneComposite(paneComposite, viewContainer));\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Side Bar / Panel Views\n\t\taddPaneCompositeViews(ViewContainerLocation.Sidebar);\n\t\taddPaneCompositeViews(ViewContainerLocation.Panel);\n\t\taddPaneCompositeViews(ViewContainerLocation.AuxiliaryBar);\n\n\t\t// Terminals\n\t\tthis.terminalGroupService.groups.forEach((group, groupIndex) => {\n\t\t\tgroup.terminalInstances.forEach((terminal, terminalIndex) => {\n\t\t\t\tconst label = localize('terminalTitle', \"{0}: {1}\", `${groupIndex + 1}.${terminalIndex + 1}`, terminal.title);\n\t\t\t\tviewEntries.push({\n\t\t\t\t\tlabel,\n\t\t\t\t\tcontainerLabel: localize('terminals', \"Terminal\"),\n\t\t\t\t\taccept: async () => {\n\t\t\t\t\t\tawait this.terminalGroupService.showPanel(true);\n\t\t\t\t\t\tthis.terminalService.setActiveInstance(terminal);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\t// Debug Consoles\n\t\tthis.debugService.getModel().getSessions(true).filter(s => s.hasSeparateRepl()).forEach((session, _) => {\n\t\t\tconst label = session.name;\n\t\t\tviewEntries.push({\n\t\t\t\tlabel,\n\t\t\t\tcontainerLabel: localize('debugConsoles', \"Debug Console\"),\n\t\t\t\taccept: async () => {\n\t\t\t\t\tawait this.debugService.focusStackFrame(undefined, undefined, session, { explicit: true });\n\n\t\t\t\t\tif (!this.viewsService.isViewVisible(REPL_VIEW_ID)) {\n\t\t\t\t\t\tawait this.viewsService.openView(REPL_VIEW_ID, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t});\n\n\t\t// Output Channels\n\t\tconst channels = this.outputService.getChannelDescriptors();\n\t\tfor (const channel of channels) {\n\t\t\tviewEntries.push({\n\t\t\t\tlabel: channel.label,\n\t\t\t\tcontainerLabel: localize('channels', \"Output\"),\n\t\t\t\taccept: () => this.outputService.showChannel(channel.id)\n\t\t\t});\n\t\t}\n\n\t\treturn viewEntries;\n\t}\n\n\tprivate includeViewContainer(container: PaneCompositeDescriptor): boolean {\n\t\tconst viewContainer = this.viewDescriptorService.getViewContainerById(container.id);\n\t\tif (viewContainer?.hideIfEmpty) {\n\t\t\treturn this.viewDescriptorService.getViewContainerModel(viewContainer).activeViewDescriptors.length > 0;\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\n\n//#region Actions\n\nexport class OpenViewPickerAction extends Action2 {\n\n\tstatic readonly ID = 'workbench.action.openView';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: OpenViewPickerAction.ID,\n\t\t\ttitle: { value: localize('openView', \"Open View\"), original: 'Open View' },\n\t\t\tcategory: Categories.View,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\taccessor.get(IQuickInputService).quickAccess.show(ViewQuickAccessProvider.PREFIX);\n\t}\n}\n\nexport class QuickAccessViewPickerAction extends Action2 {\n\n\tstatic readonly ID = 'workbench.action.quickOpenView';\n\tstatic readonly KEYBINDING = {\n\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyQ,\n\t\tmac: { primary: KeyMod.WinCtrl | KeyCode.KeyQ },\n\t\tlinux: { primary: 0 }\n\t};\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: QuickAccessViewPickerAction.ID,\n\t\t\ttitle: { value: localize('quickOpenView', \"Quick Open View\"), original: 'Quick Open View' },\n\t\t\tcategory: Categories.View,\n\t\t\tf1: false, // hide quick pickers from command palette to not confuse with the other entry that shows a input field\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: undefined,\n\t\t\t\t...QuickAccessViewPickerAction.KEYBINDING\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst keybindingService = accessor.get(IKeybindingService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\n\t\tconst keys = keybindingService.lookupKeybindings(QuickAccessViewPickerAction.ID);\n\n\t\tquickInputService.quickAccess.show(ViewQuickAccessProvider.PREFIX, { quickNavigateConfiguration: { keybindings: keys }, itemActivation: ItemActivation.FIRST });\n\t}\n}\n\n//#endregion\n"]}