{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/logs/common/logsDataCleaner.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IASzF,IAAM,IAAI,GAAV,MAAM,IAAgB,SAAQ,eAAG;QAEvC,YACgD,CAAuB,EACvC,CAAgB,EACX,CAAqB;YAEzD,KAAK,EAAE,CAAC;YAJuC,MAAC,GAAD,CAAC,CAAsB;YACvC,MAAC,GAAD,CAAC,CAAe;YACX,MAAC,GAAD,CAAC,CAAoB;YAGzD,IAAI,CAAC,CAAC,EAAmB,CAAC;QAC3B,CAAC;QAEO,CAAC;YACR,IAAI,MAAM,GAAQ,UAAU,CAAC,KAAK,IAAI,EAAE;gBACvC,MAAM,GAAG,SAAS,CAAC;gBACnB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,CAAC,CAAW,OAAO,CAAC,IAAA,eAAG,EAAK,IAAI,CAAC,CAAC,CAAkB,QAAQ,CAAC,CAAC,CAAC;gBACvF,IAAI,IAAI,CAAC,QAAQ,EAAE;oBAClB,MAAM,UAAU,GAAG,IAAA,eAAG,EAAM,IAAI,CAAC,CAAC,CAAkB,QAAQ,CAAC,CAAC;oBAC9D,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,IAAI,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;oBACtG,MAAM,WAAW,GAAG,WAAW,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,UAAU,CAAC,CAAC;oBAC/E,MAAM,QAAQ,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,WAAW,CAAC,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC;oBAC5E,gBAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAW,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;iBACjG;YACF,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC;YACd,IAAI,CAAC,CAAC,CAAgB,cAAc,CAAC,GAAG,EAAE;gBACzC,IAAI,MAAM,EAAE;oBACX,YAAY,CAAC,MAAM,CAAC,CAAC;oBACrB,MAAM,GAAG,SAAS,CAAC;iBACnB;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;KACD,CAAA;IA9BY,oBAAI;mBAAJ,IAAI;QAGd,WAAA,wBAAG,CAAA;QACH,WAAA,WAAG,CAAA;QACH,WAAA,eAAG,CAAA;OALO,IAAI,CA8BhB","file":"logsDataCleaner.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { basename, dirname } from 'vs/base/common/resources';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { Promises } from 'vs/base/common/async';\n\nexport class LogsDataCleaner extends Disposable {\n\n\tconstructor(\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t) {\n\t\tsuper();\n\t\tthis.cleanUpOldLogsSoon();\n\t}\n\n\tprivate cleanUpOldLogsSoon(): void {\n\t\tlet handle: any = setTimeout(async () => {\n\t\t\thandle = undefined;\n\t\t\tconst stat = await this.fileService.resolve(dirname(this.environmentService.logsHome));\n\t\t\tif (stat.children) {\n\t\t\t\tconst currentLog = basename(this.environmentService.logsHome);\n\t\t\t\tconst allSessions = stat.children.filter(stat => stat.isDirectory && /^\\d{8}T\\d{6}$/.test(stat.name));\n\t\t\t\tconst oldSessions = allSessions.sort().filter((d, i) => d.name !== currentLog);\n\t\t\t\tconst toDelete = oldSessions.slice(0, Math.max(0, oldSessions.length - 49));\n\t\t\t\tPromises.settled(toDelete.map(stat => this.fileService.del(stat.resource, { recursive: true })));\n\t\t\t}\n\t\t}, 10 * 1000);\n\t\tthis.lifecycleService.onWillShutdown(() => {\n\t\t\tif (handle) {\n\t\t\t\tclearTimeout(handle);\n\t\t\t\thandle = undefined;\n\t\t\t}\n\t\t});\n\t}\n}\n"]}