{"version":3,"sources":["vs/workbench/contrib/logs/common/logs.contribution.ts"],"names":[],"mappings":"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","file":"logs.contribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Categories } from 'vs/platform/action/common/actionCommonCategories';\nimport { Action2, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { SetLogLevelAction } from 'vs/workbench/contrib/logs/common/logsActions';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { IFileService, whenProviderRegistered } from 'vs/platform/files/common/files';\nimport { IOutputChannelRegistry, IOutputService, Extensions } from 'vs/workbench/services/output/common/output';\nimport { Disposable, DisposableMap, DisposableStore, toDisposable } from 'vs/base/common/lifecycle';\nimport { CONTEXT_LOG_LEVEL, ILogService, ILoggerResource, ILoggerService, LogLevel, LogLevelToString, isLogLevel } from 'vs/platform/log/common/log';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { URI } from 'vs/base/common/uri';\nimport { Event } from 'vs/base/common/event';\nimport { windowLogId, showWindowLogActionId } from 'vs/workbench/services/log/common/logConstants';\nimport { createCancelablePromise, timeout } from 'vs/base/common/async';\nimport { CancellationError, getErrorMessage, isCancellationError } from 'vs/base/common/errors';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IDefaultLogLevelsService } from 'vs/workbench/contrib/logs/common/defaultLogLevels';\nimport { ContextKeyExpr, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { CounterSet } from 'vs/base/common/map';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { Schemas } from 'vs/base/common/network';\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: SetLogLevelAction.ID,\n\t\t\ttitle: SetLogLevelAction.TITLE,\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\trun(servicesAccessor: ServicesAccessor): Promise<void> {\n\t\treturn servicesAccessor.get(IInstantiationService).createInstance(SetLogLevelAction, SetLogLevelAction.ID, SetLogLevelAction.TITLE.value).run();\n\t}\n});\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.setDefaultLogLevel',\n\t\t\ttitle: { value: nls.localize('setDefaultLogLevel', \"Set Default Log Level\"), original: 'Set Default Log Level' },\n\t\t\tcategory: Categories.Developer,\n\t\t});\n\t}\n\trun(servicesAccessor: ServicesAccessor, logLevel: LogLevel, extensionId?: string): Promise<void> {\n\t\treturn servicesAccessor.get(IDefaultLogLevelsService).setDefaultLogLevel(logLevel, extensionId);\n\t}\n});\n\nclass LogOutputChannels extends Disposable implements IWorkbenchContribution {\n\n\tprivate readonly contextKeys = new CounterSet<string>();\n\tprivate readonly outputChannelRegistry = Registry.as<IOutputChannelRegistry>(Extensions.OutputChannels);\n\tprivate readonly loggerDisposables = this._register(new DisposableMap());\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ILoggerService private readonly loggerService: ILoggerService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper();\n\t\tconst contextKey = CONTEXT_LOG_LEVEL.bindTo(contextKeyService);\n\t\tcontextKey.set(LogLevelToString(loggerService.getLogLevel()));\n\t\tloggerService.onDidChangeLogLevel(e => {\n\t\t\tif (isLogLevel(e)) {\n\t\t\t\tcontextKey.set(LogLevelToString(loggerService.getLogLevel()));\n\t\t\t}\n\t\t});\n\n\t\tthis.onDidAddLoggers(loggerService.getRegisteredLoggers());\n\t\tthis._register(loggerService.onDidChangeLoggers(({ added, removed }) => {\n\t\t\tthis.onDidAddLoggers(added);\n\t\t\tthis.onDidRemoveLoggers(removed);\n\t\t}));\n\t\tthis._register(loggerService.onDidChangeVisibility(([resource, visibility]) => {\n\t\t\tconst logger = loggerService.getRegisteredLogger(resource);\n\t\t\tif (logger) {\n\t\t\t\tif (visibility) {\n\t\t\t\t\tthis.registerLogChannel(logger);\n\t\t\t\t} else {\n\t\t\t\t\tthis.deregisterLogChannel(logger);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t\tthis.registerShowWindowLogAction();\n\t\tthis._register(Event.filter(contextKeyService.onDidChangeContext, e => e.affectsSome(this.contextKeys))(() => this.onDidChangeContext()));\n\t}\n\n\tprivate onDidAddLoggers(loggers: Iterable<ILoggerResource>): void {\n\t\tfor (const logger of loggers) {\n\t\t\tif (logger.when) {\n\t\t\t\tconst contextKeyExpr = ContextKeyExpr.deserialize(logger.when);\n\t\t\t\tif (contextKeyExpr) {\n\t\t\t\t\tfor (const key of contextKeyExpr.keys()) {\n\t\t\t\t\t\tthis.contextKeys.add(key);\n\t\t\t\t\t}\n\t\t\t\t\tif (!this.contextKeyService.contextMatchesRules(contextKeyExpr)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (logger.hidden) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis.registerLogChannel(logger);\n\t\t}\n\t}\n\n\tprivate onDidChangeContext(): void {\n\t\tfor (const logger of this.loggerService.getRegisteredLoggers()) {\n\t\t\tif (logger.when) {\n\t\t\t\tif (this.contextKeyService.contextMatchesRules(ContextKeyExpr.deserialize(logger.when))) {\n\t\t\t\t\tthis.registerLogChannel(logger);\n\t\t\t\t} else {\n\t\t\t\t\tthis.deregisterLogChannel(logger);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onDidRemoveLoggers(loggers: Iterable<ILoggerResource>): void {\n\t\tfor (const logger of loggers) {\n\t\t\tif (logger.when) {\n\t\t\t\tconst contextKeyExpr = ContextKeyExpr.deserialize(logger.when);\n\t\t\t\tif (contextKeyExpr) {\n\t\t\t\t\tfor (const key of contextKeyExpr.keys()) {\n\t\t\t\t\t\tthis.contextKeys.delete(key);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.deregisterLogChannel(logger);\n\t\t}\n\t}\n\n\tprivate registerLogChannel(logger: ILoggerResource): void {\n\t\tconst channel = this.outputChannelRegistry.getChannel(logger.id);\n\t\tif (channel && this.uriIdentityService.extUri.isEqual(channel.file, logger.resource)) {\n\t\t\treturn;\n\t\t}\n\t\tconst disposables = new DisposableStore();\n\t\tconst promise = createCancelablePromise(async token => {\n\t\t\tawait whenProviderRegistered(logger.resource, this.fileService);\n\t\t\ttry {\n\t\t\t\tawait this.whenFileExists(logger.resource, 1, token);\n\t\t\t\tconst existingChannel = this.outputChannelRegistry.getChannel(logger.id);\n\t\t\t\tconst remoteLogger = existingChannel?.file?.scheme === Schemas.vscodeRemote ? this.loggerService.getRegisteredLogger(existingChannel.file) : undefined;\n\t\t\t\tif (remoteLogger) {\n\t\t\t\t\tthis.deregisterLogChannel(remoteLogger);\n\t\t\t\t}\n\t\t\t\tconst hasToAppendRemote = existingChannel && logger.resource.scheme === Schemas.vscodeRemote;\n\t\t\t\tconst id = hasToAppendRemote ? `${logger.id}.remote` : logger.id;\n\t\t\t\tconst label = hasToAppendRemote ? nls.localize('remote name', \"{0} (Remote)\", logger.name ?? logger.id) : logger.name ?? logger.id;\n\t\t\t\tthis.outputChannelRegistry.registerChannel({ id, label, file: logger.resource, log: true, extensionId: logger.extensionId });\n\t\t\t\tdisposables.add(toDisposable(() => this.outputChannelRegistry.removeChannel(id)));\n\t\t\t\tif (remoteLogger) {\n\t\t\t\t\tthis.registerLogChannel(remoteLogger);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tif (!isCancellationError(error)) {\n\t\t\t\t\tthis.logService.error('Error while registering log channel', logger.resource.toString(), getErrorMessage(error));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tdisposables.add(toDisposable(() => promise.cancel()));\n\t\tthis.loggerDisposables.set(logger.resource.toString(), disposables);\n\t}\n\n\tprivate deregisterLogChannel(logger: ILoggerResource): void {\n\t\tthis.loggerDisposables.deleteAndDispose(logger.resource.toString());\n\t}\n\n\tprivate async whenFileExists(file: URI, trial: number, token: CancellationToken): Promise<void> {\n\t\tconst exists = await this.fileService.exists(file);\n\t\tif (exists) {\n\t\t\treturn;\n\t\t}\n\t\tif (token.isCancellationRequested) {\n\t\t\tthrow new CancellationError();\n\t\t}\n\t\tif (trial > 10) {\n\t\t\tthrow new Error(`Timed out while waiting for file to be created`);\n\t\t}\n\t\tthis.logService.debug(`[Registering Log Channel] File does not exist. Waiting for 1s to retry.`, file.toString());\n\t\tawait timeout(1000, token);\n\t\tawait this.whenFileExists(file, trial + 1, token);\n\t}\n\n\tprivate registerShowWindowLogAction(): void {\n\t\tregisterAction2(class ShowWindowLogAction extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: showWindowLogActionId,\n\t\t\t\t\ttitle: { value: nls.localize('show window log', \"Show Window Log\"), original: 'Show Window Log' },\n\t\t\t\t\tcategory: Categories.Developer,\n\t\t\t\t\tf1: true\n\t\t\t\t});\n\t\t\t}\n\t\t\tasync run(servicesAccessor: ServicesAccessor): Promise<void> {\n\t\t\t\tconst outputService = servicesAccessor.get(IOutputService);\n\t\t\t\toutputService.showChannel(windowLogId);\n\t\t\t}\n\t\t});\n\t}\n\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(LogOutputChannels, LifecyclePhase.Restored);\n"]}