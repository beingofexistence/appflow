{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/logs/common/defaultLogLevels.ts"],"names":[],"mappings":"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","file":"defaultLogLevels.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ILogService, ILoggerService, LogLevel, LogLevelToString, getLogLevel, parseLogLevel } from 'vs/platform/log/common/log';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { FileOperationResult, IFileService, toFileOperationResult } from 'vs/platform/files/common/files';\nimport { IJSONEditingService } from 'vs/workbench/services/configuration/common/jsonEditing';\nimport { isString, isUndefined } from 'vs/base/common/types';\nimport { EXTENSION_IDENTIFIER_WITH_LOG_REGEX } from 'vs/platform/environment/common/environmentService';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { parse } from 'vs/base/common/json';\n\ninterface ParsedArgvLogLevels {\n\tdefault?: LogLevel;\n\textensions?: [string, LogLevel][];\n}\n\nexport type DefaultLogLevels = Required<Readonly<ParsedArgvLogLevels>>;\n\nexport const IDefaultLogLevelsService = createDecorator<IDefaultLogLevelsService>('IDefaultLogLevelsService');\n\nexport interface IDefaultLogLevelsService {\n\n\treadonly _serviceBrand: undefined;\n\n\tgetDefaultLogLevels(): Promise<DefaultLogLevels>;\n\n\tsetDefaultLogLevel(logLevel: LogLevel, extensionId?: string): Promise<void>;\n}\n\nclass DefaultLogLevelsService implements IDefaultLogLevelsService {\n\n\t_serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IJSONEditingService private readonly jsonEditingService: IJSONEditingService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ILoggerService private readonly loggerService: ILoggerService,\n\t) {\n\t}\n\n\tasync getDefaultLogLevels(): Promise<DefaultLogLevels> {\n\t\tconst argvLogLevel = await this._parseLogLevelsFromArgv();\n\t\treturn {\n\t\t\tdefault: argvLogLevel?.default ?? this._getDefaultLogLevelFromEnv(),\n\t\t\textensions: argvLogLevel?.extensions ?? this._getExtensionsDefaultLogLevelsFromEnv()\n\t\t};\n\t}\n\n\tasync setDefaultLogLevel(defaultLogLevel: LogLevel, extensionId?: string): Promise<void> {\n\t\tconst argvLogLevel = await this._parseLogLevelsFromArgv() ?? {};\n\t\tif (extensionId) {\n\t\t\textensionId = extensionId.toLowerCase();\n\t\t\tconst argvLogLevel = await this._parseLogLevelsFromArgv() ?? {};\n\t\t\tconst currentDefaultLogLevel = this._getDefaultLogLevel(argvLogLevel, extensionId);\n\t\t\targvLogLevel.extensions = argvLogLevel.extensions ?? [];\n\t\t\tconst extension = argvLogLevel.extensions.find(([extension]) => extension === extensionId);\n\t\t\tif (extension) {\n\t\t\t\textension[1] = defaultLogLevel;\n\t\t\t} else {\n\t\t\t\targvLogLevel.extensions.push([extensionId, defaultLogLevel]);\n\t\t\t}\n\t\t\tawait this._writeLogLevelsToArgv(argvLogLevel);\n\t\t\tconst extensionLoggers = [...this.loggerService.getRegisteredLoggers()].filter(logger => logger.extensionId && logger.extensionId.toLowerCase() === extensionId);\n\t\t\tfor (const { resource } of extensionLoggers) {\n\t\t\t\tif (this.loggerService.getLogLevel(resource) === currentDefaultLogLevel) {\n\t\t\t\t\tthis.loggerService.setLogLevel(resource, defaultLogLevel);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst currentLogLevel = this._getDefaultLogLevel(argvLogLevel);\n\t\t\targvLogLevel.default = defaultLogLevel;\n\t\t\tawait this._writeLogLevelsToArgv(argvLogLevel);\n\t\t\tif (this.loggerService.getLogLevel() === currentLogLevel) {\n\t\t\t\tthis.loggerService.setLogLevel(defaultLogLevel);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _getDefaultLogLevel(argvLogLevels: ParsedArgvLogLevels, extension?: string): LogLevel {\n\t\tif (extension) {\n\t\t\tconst extensionLogLevel = argvLogLevels.extensions?.find(([extensionId]) => extensionId === extension);\n\t\t\tif (extensionLogLevel) {\n\t\t\t\treturn extensionLogLevel[1];\n\t\t\t}\n\t\t}\n\t\treturn argvLogLevels.default ?? getLogLevel(this.environmentService);\n\t}\n\n\tprivate async _writeLogLevelsToArgv(logLevels: ParsedArgvLogLevels): Promise<void> {\n\t\tconst logLevelsValue: string[] = [];\n\t\tif (!isUndefined(logLevels.default)) {\n\t\t\tlogLevelsValue.push(LogLevelToString(logLevels.default));\n\t\t}\n\t\tfor (const [extension, logLevel] of logLevels.extensions ?? []) {\n\t\t\tlogLevelsValue.push(`${extension}:${LogLevelToString(logLevel)}`);\n\t\t}\n\t\tawait this.jsonEditingService.write(this.environmentService.argvResource, [{ path: ['log-level'], value: logLevelsValue.length ? logLevelsValue : undefined }], true);\n\t}\n\n\tprivate async _parseLogLevelsFromArgv(): Promise<ParsedArgvLogLevels | undefined> {\n\t\tconst result: ParsedArgvLogLevels = { extensions: [] };\n\t\ttry {\n\t\t\tconst content = await this.fileService.readFile(this.environmentService.argvResource);\n\t\t\tconst argv: { 'log-level'?: string | string[] } = parse(content.value.toString());\n\t\t\tconst logLevels = isString(argv['log-level']) ? [argv['log-level']] : Array.isArray(argv['log-level']) ? argv['log-level'] : [];\n\t\t\tfor (const extensionLogLevel of logLevels) {\n\t\t\t\tconst matches = EXTENSION_IDENTIFIER_WITH_LOG_REGEX.exec(extensionLogLevel);\n\t\t\t\tif (matches && matches[1] && matches[2]) {\n\t\t\t\t\tconst logLevel = parseLogLevel(matches[2]);\n\t\t\t\t\tif (!isUndefined(logLevel)) {\n\t\t\t\t\t\tresult.extensions?.push([matches[1].toLowerCase(), logLevel]);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst logLevel = parseLogLevel(extensionLogLevel);\n\t\t\t\t\tif (!isUndefined(logLevel)) {\n\t\t\t\t\t\tresult.default = logLevel;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tif (toFileOperationResult(error) !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\t\treturn !isUndefined(result.default) || result.extensions?.length ? result : undefined;\n\t}\n\n\tprivate _getDefaultLogLevelFromEnv(): LogLevel {\n\t\treturn getLogLevel(this.environmentService);\n\t}\n\n\tprivate _getExtensionsDefaultLogLevelsFromEnv(): [string, LogLevel][] {\n\t\tconst result: [string, LogLevel][] = [];\n\t\tfor (const [extension, logLevelValue] of this.environmentService.extensionLogLevel ?? []) {\n\t\t\tconst logLevel = parseLogLevel(logLevelValue);\n\t\t\tif (!isUndefined(logLevel)) {\n\t\t\t\tresult.push([extension, logLevel]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\nregisterSingleton(IDefaultLogLevelsService, DefaultLogLevelsService, InstantiationType.Delayed);\n"]}