{"version":3,"sources":["vs/workbench/contrib/relauncher/browser/relauncher.contribution.ts"],"names":[],"mappings":"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","file":"relauncher.contribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable, dispose, Disposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { IWorkbenchContributionsRegistry, IWorkbenchContribution, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWindowsConfiguration, IWindowSettings } from 'vs/platform/window/common/window';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { ConfigurationTarget, IConfigurationChangeEvent, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { localize } from 'vs/nls';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { URI } from 'vs/base/common/uri';\nimport { isEqual } from 'vs/base/common/resources';\nimport { isMacintosh, isNative, isLinux } from 'vs/base/common/platform';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IProductService } from 'vs/platform/product/common/productService';\n\ninterface IConfiguration extends IWindowsConfiguration {\n\tupdate?: { mode?: string };\n\tdebug?: { console?: { wordWrap?: boolean } };\n\teditor?: { accessibilitySupport?: 'on' | 'off' | 'auto' };\n\tsecurity?: { workspace?: { trust?: { enabled?: boolean } }; restrictUNCAccess?: boolean };\n\twindow: IWindowSettings;\n\tworkbench?: { enableExperiments?: boolean };\n\t_extensionsGallery?: { enablePPE?: boolean };\n}\n\nexport class SettingsChangeRelauncher extends Disposable implements IWorkbenchContribution {\n\n\tprivate static SETTINGS = [\n\t\t'window.titleBarStyle',\n\t\t'window.nativeTabs',\n\t\t'window.nativeFullScreen',\n\t\t'window.clickThroughInactive',\n\t\t'update.mode',\n\t\t'editor.accessibilitySupport',\n\t\t'security.workspace.trust.enabled',\n\t\t'workbench.enableExperiments',\n\t\t'_extensionsGallery.enablePPE',\n\t\t'security.restrictUNCAccess'\n\t];\n\n\tprivate readonly titleBarStyle = new ChangeObserver<'native' | 'custom'>('string');\n\tprivate readonly nativeTabs = new ChangeObserver('boolean');\n\tprivate readonly nativeFullScreen = new ChangeObserver('boolean');\n\tprivate readonly clickThroughInactive = new ChangeObserver('boolean');\n\tprivate readonly updateMode = new ChangeObserver('string');\n\tprivate accessibilitySupport: 'on' | 'off' | 'auto' | undefined;\n\tprivate readonly workspaceTrustEnabled = new ChangeObserver('boolean');\n\tprivate readonly experimentsEnabled = new ChangeObserver('boolean');\n\tprivate readonly enablePPEExtensionsGallery = new ChangeObserver('boolean');\n\tprivate readonly restrictUNCAccess = new ChangeObserver('boolean');\n\n\tconstructor(\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IDialogService private readonly dialogService: IDialogService\n\t) {\n\t\tsuper();\n\n\t\tthis.onConfigurationChange(undefined);\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => this.onConfigurationChange(e)));\n\t}\n\n\tprivate onConfigurationChange(e: IConfigurationChangeEvent | undefined): void {\n\t\tif (e && !SettingsChangeRelauncher.SETTINGS.some(key => e.affectsConfiguration(key))) {\n\t\t\treturn;\n\t\t}\n\n\n\t\tlet changed = false;\n\n\t\tfunction processChanged(didChange: boolean) {\n\t\t\tchanged = changed || didChange;\n\t\t}\n\n\t\tconst config = this.configurationService.getValue<IConfiguration>();\n\t\tif (isNative) {\n\n\t\t\t// Titlebar style\n\t\t\tprocessChanged((config.window.titleBarStyle === 'native' || config.window.titleBarStyle === 'custom') && this.titleBarStyle.handleChange(config.window?.titleBarStyle));\n\n\t\t\t// macOS: Native tabs\n\t\t\tprocessChanged(isMacintosh && this.nativeTabs.handleChange(config.window?.nativeTabs));\n\n\t\t\t// macOS: Native fullscreen\n\t\t\tprocessChanged(isMacintosh && this.nativeFullScreen.handleChange(config.window?.nativeFullScreen));\n\n\t\t\t// macOS: Click through (accept first mouse)\n\t\t\tprocessChanged(isMacintosh && this.clickThroughInactive.handleChange(config.window?.clickThroughInactive));\n\n\t\t\t// Update mode\n\t\t\tprocessChanged(this.updateMode.handleChange(config.update?.mode));\n\n\t\t\t// On linux turning on accessibility support will also pass this flag to the chrome renderer, thus a restart is required\n\t\t\tif (isLinux && typeof config.editor?.accessibilitySupport === 'string' && config.editor.accessibilitySupport !== this.accessibilitySupport) {\n\t\t\t\tthis.accessibilitySupport = config.editor.accessibilitySupport;\n\t\t\t\tif (this.accessibilitySupport === 'on') {\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Workspace trust\n\t\t\tprocessChanged(this.workspaceTrustEnabled.handleChange(config?.security?.workspace?.trust?.enabled));\n\n\t\t\t// UNC host access restrictions\n\t\t\tprocessChanged(this.restrictUNCAccess.handleChange(config?.security?.restrictUNCAccess));\n\t\t}\n\n\t\t// Experiments\n\t\tprocessChanged(this.experimentsEnabled.handleChange(config.workbench?.enableExperiments));\n\n\t\t// Profiles\n\t\tprocessChanged(this.productService.quality !== 'stable' && this.enablePPEExtensionsGallery.handleChange(config._extensionsGallery?.enablePPE));\n\n\t\t// Notify only when changed from an event and the change\n\t\t// was not triggerd programmatically (e.g. from experiments)\n\t\tif (changed && e && e.source !== ConfigurationTarget.DEFAULT) {\n\t\t\tthis.doConfirm(\n\t\t\t\tisNative ?\n\t\t\t\t\tlocalize('relaunchSettingMessage', \"A setting has changed that requires a restart to take effect.\") :\n\t\t\t\t\tlocalize('relaunchSettingMessageWeb', \"A setting has changed that requires a reload to take effect.\"),\n\t\t\t\tisNative ?\n\t\t\t\t\tlocalize('relaunchSettingDetail', \"Press the restart button to restart {0} and enable the setting.\", this.productService.nameLong) :\n\t\t\t\t\tlocalize('relaunchSettingDetailWeb', \"Press the reload button to reload {0} and enable the setting.\", this.productService.nameLong),\n\t\t\t\tisNative ?\n\t\t\t\t\tlocalize({ key: 'restart', comment: ['&& denotes a mnemonic'] }, \"&&Restart\") :\n\t\t\t\t\tlocalize({ key: 'restartWeb', comment: ['&& denotes a mnemonic'] }, \"&&Reload\"),\n\t\t\t\t() => this.hostService.restart()\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate async doConfirm(message: string, detail: string, primaryButton: string, confirmedFn: () => void): Promise<void> {\n\t\tif (this.hostService.hasFocus) {\n\t\t\tconst { confirmed } = await this.dialogService.confirm({ message, detail, primaryButton });\n\t\t\tif (confirmed) {\n\t\t\t\tconfirmedFn();\n\t\t\t}\n\t\t}\n\t}\n}\n\ninterface TypeNameToType {\n\treadonly boolean: boolean;\n\treadonly string: string;\n}\n\nclass ChangeObserver<T> {\n\n\tstatic create<TTypeName extends 'boolean' | 'string'>(typeName: TTypeName): ChangeObserver<TypeNameToType[TTypeName]> {\n\t\treturn new ChangeObserver(typeName);\n\t}\n\n\tconstructor(private readonly typeName: string) { }\n\n\tprivate lastValue: T | undefined = undefined;\n\n\t/**\n\t * Returns if there was a change compared to the last value\n\t */\n\thandleChange(value: T | undefined): boolean {\n\t\tif (typeof value === this.typeName && value !== this.lastValue) {\n\t\t\tthis.lastValue = value;\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\nexport class WorkspaceChangeExtHostRelauncher extends Disposable implements IWorkbenchContribution {\n\n\tprivate firstFolderResource?: URI;\n\tprivate extensionHostRestarter: RunOnceScheduler;\n\n\tprivate onDidChangeWorkspaceFoldersUnbind: IDisposable | undefined;\n\n\tconstructor(\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IHostService hostService: IHostService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService\n\t) {\n\t\tsuper();\n\n\t\tthis.extensionHostRestarter = this._register(new RunOnceScheduler(async () => {\n\t\t\tif (!!environmentService.extensionTestsLocationURI) {\n\t\t\t\treturn; // no restart when in tests: see https://github.com/microsoft/vscode/issues/66936\n\t\t\t}\n\n\t\t\tif (environmentService.remoteAuthority) {\n\t\t\t\thostService.reload(); // TODO@aeschli, workaround\n\t\t\t} else if (isNative) {\n\t\t\t\tconst stopped = await extensionService.stopExtensionHosts(localize('restartExtensionHost.reason', \"Restarting extension host due to a workspace folder change.\"));\n\t\t\t\tif (stopped) {\n\t\t\t\t\textensionService.startExtensionHosts();\n\t\t\t\t}\n\t\t\t}\n\t\t}, 10));\n\n\t\tthis.contextService.getCompleteWorkspace()\n\t\t\t.then(workspace => {\n\t\t\t\tthis.firstFolderResource = workspace.folders.length > 0 ? workspace.folders[0].uri : undefined;\n\t\t\t\tthis.handleWorkbenchState();\n\t\t\t\tthis._register(this.contextService.onDidChangeWorkbenchState(() => setTimeout(() => this.handleWorkbenchState())));\n\t\t\t});\n\n\t\tthis._register(toDisposable(() => {\n\t\t\tthis.onDidChangeWorkspaceFoldersUnbind?.dispose();\n\t\t}));\n\t}\n\n\tprivate handleWorkbenchState(): void {\n\n\t\t// React to folder changes when we are in workspace state\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE) {\n\n\t\t\t// Update our known first folder path if we entered workspace\n\t\t\tconst workspace = this.contextService.getWorkspace();\n\t\t\tthis.firstFolderResource = workspace.folders.length > 0 ? workspace.folders[0].uri : undefined;\n\n\t\t\t// Install workspace folder listener\n\t\t\tif (!this.onDidChangeWorkspaceFoldersUnbind) {\n\t\t\t\tthis.onDidChangeWorkspaceFoldersUnbind = this.contextService.onDidChangeWorkspaceFolders(() => this.onDidChangeWorkspaceFolders());\n\t\t\t}\n\t\t}\n\n\t\t// Ignore the workspace folder changes in EMPTY or FOLDER state\n\t\telse {\n\t\t\tdispose(this.onDidChangeWorkspaceFoldersUnbind);\n\t\t\tthis.onDidChangeWorkspaceFoldersUnbind = undefined;\n\t\t}\n\t}\n\n\tprivate onDidChangeWorkspaceFolders(): void {\n\t\tconst workspace = this.contextService.getWorkspace();\n\n\t\t// Restart extension host if first root folder changed (impact on deprecated workspace.rootPath API)\n\t\tconst newFirstFolderResource = workspace.folders.length > 0 ? workspace.folders[0].uri : undefined;\n\t\tif (!isEqual(this.firstFolderResource, newFirstFolderResource)) {\n\t\t\tthis.firstFolderResource = newFirstFolderResource;\n\n\t\t\tthis.extensionHostRestarter.schedule(); // buffer calls to extension host restart\n\t\t}\n\t}\n}\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(SettingsChangeRelauncher, LifecyclePhase.Restored);\nworkbenchRegistry.registerWorkbenchContribution(WorkspaceChangeExtHostRelauncher, LifecyclePhase.Restored);\n"]}