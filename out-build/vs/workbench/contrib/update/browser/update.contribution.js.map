{"version":3,"sources":["vs/workbench/contrib/update/browser/update.contribution.ts"],"names":[],"mappings":"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","file":"update.contribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/platform/update/common/update.config.contribution';\nimport { localize } from 'vs/nls';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { Categories } from 'vs/platform/action/common/actionCommonCategories';\nimport { MenuId, registerAction2, Action2 } from 'vs/platform/actions/common/actions';\nimport { ProductContribution, UpdateContribution, CONTEXT_UPDATE_STATE, SwitchProductQualityContribution, RELEASE_NOTES_URL, showReleaseNotesInEditor, DOWNLOAD_URL } from 'vs/workbench/contrib/update/browser/update';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport product from 'vs/platform/product/common/product';\nimport { IUpdateService, StateType } from 'vs/platform/update/common/update';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { isWindows } from 'vs/base/common/platform';\nimport { IFileDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { mnemonicButtonLabel } from 'vs/base/common/labels';\nimport { ShowCurrentReleaseNotesActionId } from 'vs/workbench/contrib/update/common/update';\nimport { IsWebContext } from 'vs/platform/contextkey/common/contextkeys';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { URI } from 'vs/base/common/uri';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\n\nconst workbench = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\n\nworkbench.registerWorkbenchContribution(ProductContribution, LifecyclePhase.Restored);\nworkbench.registerWorkbenchContribution(UpdateContribution, LifecyclePhase.Restored);\nworkbench.registerWorkbenchContribution(SwitchProductQualityContribution, LifecyclePhase.Restored);\n\n// Release notes\n\nexport class ShowCurrentReleaseNotesAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ShowCurrentReleaseNotesActionId,\n\t\t\ttitle: {\n\t\t\t\tvalue: localize('showReleaseNotes', \"Show Release Notes\"),\n\t\t\t\tmnemonicTitle: localize({ key: 'mshowReleaseNotes', comment: ['&& denotes a mnemonic'] }, \"Show &&Release Notes\"),\n\t\t\t\toriginal: 'Show Release Notes'\n\t\t\t},\n\t\t\tcategory: { value: product.nameShort, original: product.nameShort },\n\t\t\tf1: true,\n\t\t\tprecondition: RELEASE_NOTES_URL,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.MenubarHelpMenu,\n\t\t\t\tgroup: '1_welcome',\n\t\t\t\torder: 5,\n\t\t\t\twhen: RELEASE_NOTES_URL,\n\t\t\t}]\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst productService = accessor.get(IProductService);\n\t\tconst openerService = accessor.get(IOpenerService);\n\n\t\ttry {\n\t\t\tawait showReleaseNotesInEditor(instantiationService, productService.version);\n\t\t} catch (err) {\n\t\t\tif (productService.releaseNotesUrl) {\n\t\t\t\tawait openerService.open(URI.parse(productService.releaseNotesUrl));\n\t\t\t} else {\n\t\t\t\tthrow new Error(localize('update.noReleaseNotesOnline', \"This version of {0} does not have release notes online\", productService.nameLong));\n\t\t\t}\n\t\t}\n\t}\n}\n\nregisterAction2(ShowCurrentReleaseNotesAction);\n\n// Update\n\nexport class CheckForUpdateAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'update.checkForUpdate',\n\t\t\ttitle: { value: localize('checkForUpdates', \"Check for Updates...\"), original: 'Check for Updates...' },\n\t\t\tcategory: { value: product.nameShort, original: product.nameShort },\n\t\t\tf1: true,\n\t\t\tprecondition: CONTEXT_UPDATE_STATE.isEqualTo(StateType.Idle),\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst updateService = accessor.get(IUpdateService);\n\t\treturn updateService.checkForUpdates(true);\n\t}\n}\n\nclass DownloadUpdateAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'update.downloadUpdate',\n\t\t\ttitle: { value: localize('downloadUpdate', \"Download Update\"), original: 'Download Update' },\n\t\t\tcategory: { value: product.nameShort, original: product.nameShort },\n\t\t\tf1: true,\n\t\t\tprecondition: CONTEXT_UPDATE_STATE.isEqualTo(StateType.AvailableForDownload)\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tawait accessor.get(IUpdateService).downloadUpdate();\n\t}\n}\n\nclass InstallUpdateAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'update.installUpdate',\n\t\t\ttitle: { value: localize('installUpdate', \"Install Update\"), original: 'Install Update' },\n\t\t\tcategory: { value: product.nameShort, original: product.nameShort },\n\t\t\tf1: true,\n\t\t\tprecondition: CONTEXT_UPDATE_STATE.isEqualTo(StateType.Downloaded)\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tawait accessor.get(IUpdateService).applyUpdate();\n\t}\n}\n\nclass RestartToUpdateAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'update.restartToUpdate',\n\t\t\ttitle: { value: localize('restartToUpdate', \"Restart to Update\"), original: 'Restart to Update' },\n\t\t\tcategory: { value: product.nameShort, original: product.nameShort },\n\t\t\tf1: true,\n\t\t\tprecondition: CONTEXT_UPDATE_STATE.isEqualTo(StateType.Ready)\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tawait accessor.get(IUpdateService).quitAndInstall();\n\t}\n}\n\nclass DownloadAction extends Action2 {\n\n\tstatic readonly ID = 'workbench.action.download';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: DownloadAction.ID,\n\t\t\ttitle: {\n\t\t\t\tvalue: localize('openDownloadPage', \"Download {0}\", product.nameLong),\n\t\t\t\toriginal: `Download ${product.downloadUrl}`\n\t\t\t},\n\t\t\tprecondition: ContextKeyExpr.and(IsWebContext, DOWNLOAD_URL), // Only show when running in a web browser and a download url is available\n\t\t\tf1: true,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.StatusBarWindowIndicatorMenu,\n\t\t\t\twhen: ContextKeyExpr.and(IsWebContext, DOWNLOAD_URL)\n\t\t\t}]\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor): void {\n\t\tconst productService = accessor.get(IProductService);\n\t\tconst openerService = accessor.get(IOpenerService);\n\n\t\tif (productService.downloadUrl) {\n\t\t\topenerService.open(URI.parse(productService.downloadUrl));\n\t\t}\n\t}\n}\n\nregisterAction2(DownloadAction);\nregisterAction2(CheckForUpdateAction);\nregisterAction2(DownloadUpdateAction);\nregisterAction2(InstallUpdateAction);\nregisterAction2(RestartToUpdateAction);\n\nif (isWindows) {\n\tclass DeveloperApplyUpdateAction extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: '_update.applyupdate',\n\t\t\t\ttitle: { value: localize('applyUpdate', \"Apply Update...\"), original: 'Apply Update...' },\n\t\t\t\tcategory: Categories.Developer,\n\t\t\t\tf1: true,\n\t\t\t\tprecondition: CONTEXT_UPDATE_STATE.isEqualTo(StateType.Idle)\n\t\t\t});\n\t\t}\n\n\t\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\t\tconst updateService = accessor.get(IUpdateService);\n\t\t\tconst fileDialogService = accessor.get(IFileDialogService);\n\n\t\t\tconst updatePath = await fileDialogService.showOpenDialog({\n\t\t\t\ttitle: localize('pickUpdate', \"Apply Update\"),\n\t\t\t\tfilters: [{ name: 'Setup', extensions: ['exe'] }],\n\t\t\t\tcanSelectFiles: true,\n\t\t\t\topenLabel: mnemonicButtonLabel(localize({ key: 'updateButton', comment: ['&& denotes a mnemonic'] }, \"&&Update\"))\n\t\t\t});\n\n\t\t\tif (!updatePath || !updatePath[0]) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait updateService._applySpecificUpdate(updatePath[0].fsPath);\n\t\t}\n\t}\n\n\tregisterAction2(DeveloperApplyUpdateAction);\n}\n"]}