{"version":3,"sources":["vs/workbench/contrib/codeActions/browser/codeActionsContribution.ts"],"names":[],"mappings":"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","file":"codeActionsContribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { IJSONSchema, IJSONSchemaMap } from 'vs/base/common/jsonSchema';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { editorConfigurationBaseNode } from 'vs/editor/common/config/editorConfigurationSchema';\nimport { codeActionCommandId, refactorCommandId, sourceActionCommandId } from 'vs/editor/contrib/codeAction/browser/codeAction';\nimport { CodeActionKind } from 'vs/editor/contrib/codeAction/common/types';\nimport * as nls from 'vs/nls';\nimport { ConfigurationScope, Extensions, IConfigurationNode, IConfigurationPropertySchema, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { CodeActionsExtensionPoint, ContributedCodeAction } from 'vs/workbench/contrib/codeActions/common/codeActionsExtensionPoint';\nimport { IExtensionPoint } from 'vs/workbench/services/extensions/common/extensionsRegistry';\n\nconst createCodeActionsAutoSave = (description: string): IJSONSchema => {\n\treturn {\n\t\ttype: 'string',\n\t\tenum: ['always', 'never', 'explicit'],\n\t\tenumDescriptions: [nls.localize('alwaysSave', 'Always triggers Code Actions on save'), nls.localize('neverSave', 'Never triggers Code Actions on save'), nls.localize('explicitSave', 'Triggers Code Actions only when explicitly saved')],\n\t\tdefault: 'explicit',\n\t\tdescription: description\n\t};\n};\n\nconst codeActionsOnSaveDefaultProperties = Object.freeze<IJSONSchemaMap>({\n\t'source.fixAll': createCodeActionsAutoSave(nls.localize('codeActionsOnSave.fixAll', \"Controls whether auto fix action should be run on file save.\")),\n});\n\nconst codeActionsOnSaveSchema: IConfigurationPropertySchema = {\n\toneOf: [\n\t\t{\n\t\t\ttype: 'object',\n\t\t\tproperties: codeActionsOnSaveDefaultProperties,\n\t\t\tadditionalProperties: {\n\t\t\t\ttype: 'string'\n\t\t\t},\n\t\t},\n\t\t{\n\t\t\ttype: 'array',\n\t\t\titems: { type: 'string' }\n\t\t}\n\t],\n\tmarkdownDescription: nls.localize('editor.codeActionsOnSave', 'Run CodeActions for the editor on save. CodeActions must be specified and the editor must not be shutting down. Example: `\"source.organizeImports\": \"explicit\" `'),\n\ttype: 'object',\n\tadditionalProperties: {\n\t\ttype: 'string'\n\t},\n\tdefault: {},\n\tscope: ConfigurationScope.LANGUAGE_OVERRIDABLE,\n};\n\nexport const editorConfiguration = Object.freeze<IConfigurationNode>({\n\t...editorConfigurationBaseNode,\n\tproperties: {\n\t\t'editor.codeActionsOnSave': codeActionsOnSaveSchema\n\t}\n});\n\nexport class CodeActionsContribution extends Disposable implements IWorkbenchContribution {\n\n\tprivate _contributedCodeActions: CodeActionsExtensionPoint[] = [];\n\n\tprivate readonly _onDidChangeContributions = this._register(new Emitter<void>());\n\n\tconstructor(\n\t\tcodeActionsExtensionPoint: IExtensionPoint<CodeActionsExtensionPoint[]>,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t) {\n\t\tsuper();\n\n\t\tcodeActionsExtensionPoint.setHandler(extensionPoints => {\n\t\t\tthis._contributedCodeActions = extensionPoints.map(x => x.value).flat();\n\t\t\tthis.updateConfigurationSchema(this._contributedCodeActions);\n\t\t\tthis._onDidChangeContributions.fire();\n\t\t});\n\n\t\tkeybindingService.registerSchemaContribution({\n\t\t\tgetSchemaAdditions: () => this.getSchemaAdditions(),\n\t\t\tonDidChange: this._onDidChangeContributions.event,\n\t\t});\n\t}\n\n\tprivate updateConfigurationSchema(codeActionContributions: readonly CodeActionsExtensionPoint[]) {\n\t\tconst newProperties: IJSONSchemaMap = { ...codeActionsOnSaveDefaultProperties };\n\t\tfor (const [sourceAction, props] of this.getSourceActions(codeActionContributions)) {\n\t\t\tnewProperties[sourceAction] = createCodeActionsAutoSave(nls.localize('codeActionsOnSave.generic', \"Controls whether '{0}' actions should be run on file save.\", props.title));\n\t\t}\n\t\tcodeActionsOnSaveSchema.properties = newProperties;\n\t\tRegistry.as<IConfigurationRegistry>(Extensions.Configuration)\n\t\t\t.notifyConfigurationSchemaUpdated(editorConfiguration);\n\t}\n\n\tprivate getSourceActions(contributions: readonly CodeActionsExtensionPoint[]) {\n\t\tconst defaultKinds = Object.keys(codeActionsOnSaveDefaultProperties).map(value => new CodeActionKind(value));\n\t\tconst sourceActions = new Map<string, { readonly title: string }>();\n\t\tfor (const contribution of contributions) {\n\t\t\tfor (const action of contribution.actions) {\n\t\t\t\tconst kind = new CodeActionKind(action.kind);\n\t\t\t\tif (CodeActionKind.Source.contains(kind)\n\t\t\t\t\t// Exclude any we already included by default\n\t\t\t\t\t&& !defaultKinds.some(defaultKind => defaultKind.contains(kind))\n\t\t\t\t) {\n\t\t\t\t\tsourceActions.set(kind.value, action);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn sourceActions;\n\t}\n\n\tprivate getSchemaAdditions(): IJSONSchema[] {\n\t\tconst conditionalSchema = (command: string, actions: readonly ContributedCodeAction[]): IJSONSchema => {\n\t\t\treturn {\n\t\t\t\tif: {\n\t\t\t\t\trequired: ['command'],\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\t'command': { const: command }\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tthen: {\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\t'args': {\n\t\t\t\t\t\t\trequired: ['kind'],\n\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t'kind': {\n\t\t\t\t\t\t\t\t\tanyOf: [\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tenum: actions.map(action => action.kind),\n\t\t\t\t\t\t\t\t\t\t\tenumDescriptions: actions.map(action => action.description ?? action.title),\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{ type: 'string' },\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t};\n\n\t\tconst getActions = (ofKind: CodeActionKind): ContributedCodeAction[] => {\n\t\t\tconst allActions = this._contributedCodeActions.map(desc => desc.actions).flat();\n\n\t\t\tconst out = new Map<string, ContributedCodeAction>();\n\t\t\tfor (const action of allActions) {\n\t\t\t\tif (!out.has(action.kind) && ofKind.contains(new CodeActionKind(action.kind))) {\n\t\t\t\t\tout.set(action.kind, action);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn Array.from(out.values());\n\t\t};\n\n\t\treturn [\n\t\t\tconditionalSchema(codeActionCommandId, getActions(CodeActionKind.Empty)),\n\t\t\tconditionalSchema(refactorCommandId, getActions(CodeActionKind.Refactor)),\n\t\t\tconditionalSchema(sourceActionCommandId, getActions(CodeActionKind.Source)),\n\t\t];\n\t}\n}\n"]}