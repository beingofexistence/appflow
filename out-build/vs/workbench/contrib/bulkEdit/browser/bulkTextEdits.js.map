{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/bulkEdit/browser/bulkTextEdits.ts"],"names":[],"mappings":"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","file":"bulkTextEdits.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { dispose, IDisposable, IReference } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditOperation, ISingleEditOperation } from 'vs/editor/common/core/editOperation';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { EndOfLineSequence, ITextModel } from 'vs/editor/common/model';\nimport { ITextModelService, IResolvedTextEditorModel } from 'vs/editor/common/services/resolverService';\nimport { IProgress } from 'vs/platform/progress/common/progress';\nimport { IEditorWorkerService } from 'vs/editor/common/services/editorWorker';\nimport { IUndoRedoService, UndoRedoGroup, UndoRedoSource } from 'vs/platform/undoRedo/common/undoRedo';\nimport { SingleModelEditStackElement, MultiModelEditStackElement } from 'vs/editor/common/model/editStack';\nimport { ResourceMap } from 'vs/base/common/map';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { ResourceTextEdit } from 'vs/editor/browser/services/bulkEditService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { SnippetController2 } from 'vs/editor/contrib/snippet/browser/snippetController2';\nimport { SnippetParser } from 'vs/editor/contrib/snippet/browser/snippetParser';\nimport { ISnippetEdit } from 'vs/editor/contrib/snippet/browser/snippetSession';\n\ntype ValidationResult = { canApply: true } | { canApply: false; reason: URI };\n\ntype ISingleSnippetEditOperation = ISingleEditOperation & { insertAsSnippet?: boolean };\n\nclass ModelEditTask implements IDisposable {\n\n\treadonly model: ITextModel;\n\n\tprivate _expectedModelVersionId: number | undefined;\n\tprotected _edits: ISingleSnippetEditOperation[];\n\tprotected _newEol: EndOfLineSequence | undefined;\n\n\tconstructor(private readonly _modelReference: IReference<IResolvedTextEditorModel>) {\n\t\tthis.model = this._modelReference.object.textEditorModel;\n\t\tthis._edits = [];\n\t}\n\n\tdispose() {\n\t\tthis._modelReference.dispose();\n\t}\n\n\tisNoOp() {\n\t\tif (this._edits.length > 0) {\n\t\t\t// contains textual edits\n\t\t\treturn false;\n\t\t}\n\t\tif (this._newEol !== undefined && this._newEol !== this.model.getEndOfLineSequence()) {\n\t\t\t// contains an eol change that is a real change\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\taddEdit(resourceEdit: ResourceTextEdit): void {\n\t\tthis._expectedModelVersionId = resourceEdit.versionId;\n\t\tconst { textEdit } = resourceEdit;\n\n\t\tif (typeof textEdit.eol === 'number') {\n\t\t\t// honor eol-change\n\t\t\tthis._newEol = textEdit.eol;\n\t\t}\n\t\tif (!textEdit.range && !textEdit.text) {\n\t\t\t// lacks both a range and the text\n\t\t\treturn;\n\t\t}\n\t\tif (Range.isEmpty(textEdit.range) && !textEdit.text) {\n\t\t\t// no-op edit (replace empty range with empty text)\n\t\t\treturn;\n\t\t}\n\n\t\t// create edit operation\n\t\tlet range: Range;\n\t\tif (!textEdit.range) {\n\t\t\trange = this.model.getFullModelRange();\n\t\t} else {\n\t\t\trange = Range.lift(textEdit.range);\n\t\t}\n\t\tthis._edits.push({ ...EditOperation.replaceMove(range, textEdit.text), insertAsSnippet: textEdit.insertAsSnippet });\n\t}\n\n\tvalidate(): ValidationResult {\n\t\tif (typeof this._expectedModelVersionId === 'undefined' || this.model.getVersionId() === this._expectedModelVersionId) {\n\t\t\treturn { canApply: true };\n\t\t}\n\t\treturn { canApply: false, reason: this.model.uri };\n\t}\n\n\tgetBeforeCursorState(): Selection[] | null {\n\t\treturn null;\n\t}\n\n\tapply(): void {\n\t\tif (this._edits.length > 0) {\n\t\t\tthis._edits = this._edits\n\t\t\t\t.map(this._transformSnippetStringToInsertText, this) // no editor -> no snippet mode\n\t\t\t\t.sort((a, b) => Range.compareRangesUsingStarts(a.range, b.range));\n\t\t\tthis.model.pushEditOperations(null, this._edits, () => null);\n\t\t}\n\t\tif (this._newEol !== undefined) {\n\t\t\tthis.model.pushEOL(this._newEol);\n\t\t}\n\t}\n\n\tprotected _transformSnippetStringToInsertText(edit: ISingleSnippetEditOperation): ISingleSnippetEditOperation {\n\t\t// transform a snippet edit (and only those) into a normal text edit\n\t\t// for that we need to parse the snippet and get its actual text, e.g without placeholder\n\t\t// or variable syntaxes\n\t\tif (!edit.insertAsSnippet) {\n\t\t\treturn edit;\n\t\t}\n\t\tif (!edit.text) {\n\t\t\treturn edit;\n\t\t}\n\t\tconst text = SnippetParser.asInsertText(edit.text);\n\t\treturn { ...edit, insertAsSnippet: false, text };\n\t}\n}\n\nclass EditorEditTask extends ModelEditTask {\n\n\tprivate readonly _editor: ICodeEditor;\n\n\tconstructor(modelReference: IReference<IResolvedTextEditorModel>, editor: ICodeEditor) {\n\t\tsuper(modelReference);\n\t\tthis._editor = editor;\n\t}\n\n\toverride getBeforeCursorState(): Selection[] | null {\n\t\treturn this._canUseEditor() ? this._editor.getSelections() : null;\n\t}\n\n\toverride apply(): void {\n\n\t\t// Check that the editor is still for the wanted model. It might have changed in the\n\t\t// meantime and that means we cannot use the editor anymore (instead we perform the edit through the model)\n\t\tif (!this._canUseEditor()) {\n\t\t\tsuper.apply();\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._edits.length > 0) {\n\t\t\tconst snippetCtrl = SnippetController2.get(this._editor);\n\t\t\tif (snippetCtrl && this._edits.some(edit => edit.insertAsSnippet)) {\n\t\t\t\t// some edit is a snippet edit -> use snippet controller and ISnippetEdits\n\t\t\t\tconst snippetEdits: ISnippetEdit[] = [];\n\t\t\t\tfor (const edit of this._edits) {\n\t\t\t\t\tif (edit.range && edit.text !== null) {\n\t\t\t\t\t\tsnippetEdits.push({\n\t\t\t\t\t\t\trange: Range.lift(edit.range),\n\t\t\t\t\t\t\ttemplate: edit.insertAsSnippet ? edit.text : SnippetParser.escape(edit.text)\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tsnippetCtrl.apply(snippetEdits, { undoStopBefore: false, undoStopAfter: false });\n\n\t\t\t} else {\n\t\t\t\t// normal edit\n\t\t\t\tthis._edits = this._edits\n\t\t\t\t\t.map(this._transformSnippetStringToInsertText, this) // mixed edits (snippet and normal) -> no snippet mode\n\t\t\t\t\t.sort((a, b) => Range.compareRangesUsingStarts(a.range, b.range));\n\t\t\t\tthis._editor.executeEdits('', this._edits);\n\t\t\t}\n\t\t}\n\t\tif (this._newEol !== undefined) {\n\t\t\tif (this._editor.hasModel()) {\n\t\t\t\tthis._editor.getModel().pushEOL(this._newEol);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _canUseEditor(): boolean {\n\t\treturn this._editor?.getModel()?.uri.toString() === this.model.uri.toString();\n\t}\n}\n\nexport class BulkTextEdits {\n\n\tprivate readonly _edits = new ResourceMap<ResourceTextEdit[]>();\n\n\tconstructor(\n\t\tprivate readonly _label: string,\n\t\tprivate readonly _code: string,\n\t\tprivate readonly _editor: ICodeEditor | undefined,\n\t\tprivate readonly _undoRedoGroup: UndoRedoGroup,\n\t\tprivate readonly _undoRedoSource: UndoRedoSource | undefined,\n\t\tprivate readonly _progress: IProgress<void>,\n\t\tprivate readonly _token: CancellationToken,\n\t\tedits: ResourceTextEdit[],\n\t\t@IEditorWorkerService private readonly _editorWorker: IEditorWorkerService,\n\t\t@IModelService private readonly _modelService: IModelService,\n\t\t@ITextModelService private readonly _textModelResolverService: ITextModelService,\n\t\t@IUndoRedoService private readonly _undoRedoService: IUndoRedoService\n\t) {\n\n\t\tfor (const edit of edits) {\n\t\t\tlet array = this._edits.get(edit.resource);\n\t\t\tif (!array) {\n\t\t\t\tarray = [];\n\t\t\t\tthis._edits.set(edit.resource, array);\n\t\t\t}\n\t\t\tarray.push(edit);\n\t\t}\n\t}\n\n\tprivate _validateBeforePrepare(): void {\n\t\t// First check if loaded models were not changed in the meantime\n\t\tfor (const array of this._edits.values()) {\n\t\t\tfor (const edit of array) {\n\t\t\t\tif (typeof edit.versionId === 'number') {\n\t\t\t\t\tconst model = this._modelService.getModel(edit.resource);\n\t\t\t\t\tif (model && model.getVersionId() !== edit.versionId) {\n\t\t\t\t\t\t// model changed in the meantime\n\t\t\t\t\t\tthrow new Error(`${model.uri.toString()} has changed in the meantime`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _createEditsTasks(): Promise<ModelEditTask[]> {\n\n\t\tconst tasks: ModelEditTask[] = [];\n\t\tconst promises: Promise<any>[] = [];\n\n\t\tfor (const [key, edits] of this._edits) {\n\t\t\tconst promise = this._textModelResolverService.createModelReference(key).then(async ref => {\n\t\t\t\tlet task: ModelEditTask;\n\t\t\t\tlet makeMinimal = false;\n\t\t\t\tif (this._editor?.getModel()?.uri.toString() === ref.object.textEditorModel.uri.toString()) {\n\t\t\t\t\ttask = new EditorEditTask(ref, this._editor);\n\t\t\t\t\tmakeMinimal = true;\n\t\t\t\t} else {\n\t\t\t\t\ttask = new ModelEditTask(ref);\n\t\t\t\t}\n\t\t\t\ttasks.push(task);\n\n\n\t\t\t\tif (!makeMinimal) {\n\t\t\t\t\tedits.forEach(task.addEdit, task);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// group edits by type (snippet, metadata, or simple) and make simple groups more minimal\n\n\t\t\t\tconst makeGroupMoreMinimal = async (start: number, end: number) => {\n\t\t\t\t\tconst oldEdits = edits.slice(start, end);\n\t\t\t\t\tconst newEdits = await this._editorWorker.computeMoreMinimalEdits(ref.object.textEditorModel.uri, oldEdits.map(e => e.textEdit), false);\n\t\t\t\t\tif (!newEdits) {\n\t\t\t\t\t\toldEdits.forEach(task.addEdit, task);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnewEdits.forEach(edit => task.addEdit(new ResourceTextEdit(ref.object.textEditorModel.uri, edit, undefined, undefined)));\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\tlet start = 0;\n\t\t\t\tlet i = 0;\n\t\t\t\tfor (; i < edits.length; i++) {\n\t\t\t\t\tif (edits[i].textEdit.insertAsSnippet || edits[i].metadata) {\n\t\t\t\t\t\tawait makeGroupMoreMinimal(start, i); // grouped edits until now\n\t\t\t\t\t\ttask.addEdit(edits[i]); // this edit\n\t\t\t\t\t\tstart = i + 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tawait makeGroupMoreMinimal(start, i);\n\n\t\t\t});\n\t\t\tpromises.push(promise);\n\t\t}\n\n\t\tawait Promise.all(promises);\n\t\treturn tasks;\n\t}\n\n\tprivate _validateTasks(tasks: ModelEditTask[]): ValidationResult {\n\t\tfor (const task of tasks) {\n\t\t\tconst result = task.validate();\n\t\t\tif (!result.canApply) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn { canApply: true };\n\t}\n\n\tasync apply(): Promise<readonly URI[]> {\n\n\t\tthis._validateBeforePrepare();\n\t\tconst tasks = await this._createEditsTasks();\n\n\t\ttry {\n\t\t\tif (this._token.isCancellationRequested) {\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\tconst resources: URI[] = [];\n\t\t\tconst validation = this._validateTasks(tasks);\n\t\t\tif (!validation.canApply) {\n\t\t\t\tthrow new Error(`${validation.reason.toString()} has changed in the meantime`);\n\t\t\t}\n\t\t\tif (tasks.length === 1) {\n\t\t\t\t// This edit touches a single model => keep things simple\n\t\t\t\tconst task = tasks[0];\n\t\t\t\tif (!task.isNoOp()) {\n\t\t\t\t\tconst singleModelEditStackElement = new SingleModelEditStackElement(this._label, this._code, task.model, task.getBeforeCursorState());\n\t\t\t\t\tthis._undoRedoService.pushElement(singleModelEditStackElement, this._undoRedoGroup, this._undoRedoSource);\n\t\t\t\t\ttask.apply();\n\t\t\t\t\tsingleModelEditStackElement.close();\n\t\t\t\t\tresources.push(task.model.uri);\n\t\t\t\t}\n\t\t\t\tthis._progress.report(undefined);\n\t\t\t} else {\n\t\t\t\t// prepare multi model undo element\n\t\t\t\tconst multiModelEditStackElement = new MultiModelEditStackElement(\n\t\t\t\t\tthis._label,\n\t\t\t\t\tthis._code,\n\t\t\t\t\ttasks.map(t => new SingleModelEditStackElement(this._label, this._code, t.model, t.getBeforeCursorState()))\n\t\t\t\t);\n\t\t\t\tthis._undoRedoService.pushElement(multiModelEditStackElement, this._undoRedoGroup, this._undoRedoSource);\n\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\ttask.apply();\n\t\t\t\t\tthis._progress.report(undefined);\n\t\t\t\t\tresources.push(task.model.uri);\n\t\t\t\t}\n\t\t\t\tmultiModelEditStackElement.close();\n\t\t\t}\n\n\t\t\treturn resources;\n\n\t\t} finally {\n\t\t\tdispose(tasks);\n\t\t}\n\t}\n}\n"]}