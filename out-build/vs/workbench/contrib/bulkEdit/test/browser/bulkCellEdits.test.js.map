{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/bulkEdit/test/browser/bulkCellEdits.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAchG,KAAK,CAAC,eAAe,EAAE;QACtB,KAAK,UAAU,OAAO,CAAC,QAAa,EAAE,UAAe;YACpD,MAAM,QAAQ,GAAoB,EAAE,MAAM,EAAE,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,CAAC;YACvD,MAAM,aAAa,GAAG,IAAI,4BAAI,EAAe,CAAC;YAE9C,MAAM,QAAQ,GAAG,IAAA,UAAG,GAA4B,EAAE,CAAC;YACnD,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,SAAG,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC,CAAC;YAE1D,MAAM,mBAAmB,GAAG,IAAA,UAAG,GAAuC,CAAC,EAAE,QAAQ,EAAE,QAAe,EAAE,CAAC,CAAC;YACtG,mBAAmB,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAE9C,MAAM,eAAe,GAAG,IAAA,UAAG,GAA8C,EAAE,CAAC;YAC5E,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,mBAAmB,EAAE,OAAO,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC;YAErF,MAAM,KAAK,GAAG;gBACb,IAAI,oBAAI,CAAqB,QAAQ,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,QAAQ,8BAAsB,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;aACzG,CAAC;YACF,MAAM,GAAG,GAAG,IAAI,oBAAI,CAAU,IAAI,cAAG,EAAY,EAAE,IAAI,cAAG,EAAa,EAAE,QAAQ,EAAE,IAAI,kBAAG,EAAsB,CAAC,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE,eAAsB,CAAC,CAAC;YACtK,MAAM,GAAG,CAAC,KAAK,EAAE,CAAC;YAElB,MAAM,WAAW,GAAG,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;YACpD,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,EAAE,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;QACtE,CAAC;QAED,MAAM,WAAW,GAAG,SAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;QAC/C,IAAI,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;YAC1C,MAAM,OAAO,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+BAA+B,EAAE,KAAK,IAAI,EAAE;YAChD,MAAM,OAAO,CAAC,wBAAO,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;QAC9D,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6BAA6B,EAAE,KAAK,IAAI,EAAE;YAC9C,MAAM,UAAU,GAAG,wBAAO,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;YAC3E,MAAM,MAAM,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,MAAM,OAAO,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"bulkCellEdits.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { URI } from 'vs/base/common/uri';\nimport { mockObject } from 'vs/base/test/common/mock';\nimport { IProgress } from 'vs/platform/progress/common/progress';\nimport { UndoRedoGroup, UndoRedoSource } from 'vs/platform/undoRedo/common/undoRedo';\nimport { BulkCellEdits, ResourceNotebookCellEdit } from 'vs/workbench/contrib/bulkEdit/browser/bulkCellEdits';\nimport { NotebookTextModel } from 'vs/workbench/contrib/notebook/common/model/notebookTextModel';\nimport { CellEditType, CellUri, IResolvedNotebookEditorModel } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { INotebookEditorModelResolverService } from 'vs/workbench/contrib/notebook/common/notebookEditorModelResolverService';\nimport { TestEditorService } from 'vs/workbench/test/browser/workbenchTestServices';\n\nsuite('BulkCellEdits', function () {\n\tasync function runTest(inputUri: URI, resolveUri: URI) {\n\t\tconst progress: IProgress<void> = { report: _ => { } };\n\t\tconst editorService = new TestEditorService();\n\n\t\tconst notebook = mockObject<NotebookTextModel>()();\n\t\tnotebook.uri.returns(URI.file('/project/notebook.ipynb'));\n\n\t\tconst notebookEditorModel = mockObject<IResolvedNotebookEditorModel>()({ notebook: notebook as any });\n\t\tnotebookEditorModel.isReadonly.returns(false);\n\n\t\tconst notebookService = mockObject<INotebookEditorModelResolverService>()();\n\t\tnotebookService.resolve.returns({ object: notebookEditorModel, dispose: () => { } });\n\n\t\tconst edits = [\n\t\t\tnew ResourceNotebookCellEdit(inputUri, { index: 0, count: 1, editType: CellEditType.Replace, cells: [] })\n\t\t];\n\t\tconst bce = new BulkCellEdits(new UndoRedoGroup(), new UndoRedoSource(), progress, new CancellationTokenSource().token, edits, editorService, notebookService as any);\n\t\tawait bce.apply();\n\n\t\tconst resolveArgs = notebookService.resolve.args[0];\n\t\tassert.strictEqual(resolveArgs[0].toString(), resolveUri.toString());\n\t}\n\n\tconst notebookUri = URI.file('/foo/bar.ipynb');\n\ttest('works with notebook URI', async () => {\n\t\tawait runTest(notebookUri, notebookUri);\n\t});\n\n\ttest('maps cell URI to notebook URI', async () => {\n\t\tawait runTest(CellUri.generate(notebookUri, 5), notebookUri);\n\t});\n\n\ttest('throws for invalid cell URI', async () => {\n\t\tconst badCellUri = CellUri.generate(notebookUri, 5).with({ fragment: '' });\n\t\tawait assert.rejects(async () => await runTest(badCellUri, notebookUri));\n\t});\n});\n"]}