{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/emmet/browser/emmetActions.ts"],"names":[],"mappings":"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","file":"emmetActions.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { EditorAction, ServicesAccessor, IActionOptions } from 'vs/editor/browser/editorExtensions';\nimport { grammarsExtPoint, ITMSyntaxExtensionPoint } from 'vs/workbench/services/textMate/common/TMGrammars';\nimport { IExtensionService, ExtensionPointContribution } from 'vs/workbench/services/extensions/common/extensions';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\n\ninterface ModeScopeMap {\n\t[key: string]: string;\n}\n\nexport interface IGrammarContributions {\n\tgetGrammar(mode: string): string;\n}\n\nclass GrammarContributions implements IGrammarContributions {\n\n\tprivate static _grammars: ModeScopeMap = {};\n\n\tconstructor(contributions: ExtensionPointContribution<ITMSyntaxExtensionPoint[]>[]) {\n\t\tif (!Object.keys(GrammarContributions._grammars).length) {\n\t\t\tthis.fillModeScopeMap(contributions);\n\t\t}\n\t}\n\n\tprivate fillModeScopeMap(contributions: ExtensionPointContribution<ITMSyntaxExtensionPoint[]>[]) {\n\t\tcontributions.forEach((contribution) => {\n\t\t\tcontribution.value.forEach((grammar) => {\n\t\t\t\tif (grammar.language && grammar.scopeName) {\n\t\t\t\t\tGrammarContributions._grammars[grammar.language] = grammar.scopeName;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic getGrammar(mode: string): string {\n\t\treturn GrammarContributions._grammars[mode];\n\t}\n}\n\ninterface IEmmetActionOptions extends IActionOptions {\n\tactionName: string;\n}\n\nexport abstract class EmmetEditorAction extends EditorAction {\n\n\tprotected emmetActionName: string;\n\n\tconstructor(opts: IEmmetActionOptions) {\n\t\tsuper(opts);\n\t\tthis.emmetActionName = opts.actionName;\n\t}\n\n\tprivate static readonly emmetSupportedModes = ['html', 'css', 'xml', 'xsl', 'haml', 'jade', 'jsx', 'slim', 'scss', 'sass', 'less', 'stylus', 'styl', 'svg'];\n\n\tprivate _lastGrammarContributions: Promise<GrammarContributions> | null = null;\n\tprivate _lastExtensionService: IExtensionService | null = null;\n\tprivate _withGrammarContributions(extensionService: IExtensionService): Promise<GrammarContributions | null> {\n\t\tif (this._lastExtensionService !== extensionService) {\n\t\t\tthis._lastExtensionService = extensionService;\n\t\t\tthis._lastGrammarContributions = extensionService.readExtensionPointContributions(grammarsExtPoint).then((contributions) => {\n\t\t\t\treturn new GrammarContributions(contributions);\n\t\t\t});\n\t\t}\n\t\treturn this._lastGrammarContributions || Promise.resolve(null);\n\t}\n\n\tpublic run(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\t\tconst extensionService = accessor.get(IExtensionService);\n\t\tconst commandService = accessor.get(ICommandService);\n\n\t\treturn this._withGrammarContributions(extensionService).then((grammarContributions) => {\n\n\t\t\tif (this.id === 'editor.emmet.action.expandAbbreviation' && grammarContributions) {\n\t\t\t\treturn commandService.executeCommand<void>('emmet.expandAbbreviation', EmmetEditorAction.getLanguage(editor, grammarContributions));\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t});\n\n\t}\n\n\tpublic static getLanguage(editor: ICodeEditor, grammars: IGrammarContributions) {\n\t\tconst model = editor.getModel();\n\t\tconst selection = editor.getSelection();\n\n\t\tif (!model || !selection) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst position = selection.getStartPosition();\n\t\tmodel.tokenization.tokenizeIfCheap(position.lineNumber);\n\t\tconst languageId = model.getLanguageIdAtPosition(position.lineNumber, position.column);\n\t\tconst syntax = languageId.split('.').pop();\n\n\t\tif (!syntax) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst checkParentMode = (): string => {\n\t\t\tconst languageGrammar = grammars.getGrammar(syntax);\n\t\t\tif (!languageGrammar) {\n\t\t\t\treturn syntax;\n\t\t\t}\n\t\t\tconst languages = languageGrammar.split('.');\n\t\t\tif (languages.length < 2) {\n\t\t\t\treturn syntax;\n\t\t\t}\n\t\t\tfor (let i = 1; i < languages.length; i++) {\n\t\t\t\tconst language = languages[languages.length - i];\n\t\t\t\tif (this.emmetSupportedModes.indexOf(language) !== -1) {\n\t\t\t\t\treturn language;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn syntax;\n\t\t};\n\n\t\treturn {\n\t\t\tlanguage: syntax,\n\t\t\tparentMode: checkParentMode()\n\t\t};\n\t}\n\n\n}\n"]}