{"version":3,"sources":["vs/workbench/contrib/customEditor/common/customEditor.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAanF,QAAA,IAAI,GAAmB,IAAA,mBAAG,EAAmC,qBAAqB,CAAC,CAAC;IAEpF,QAAA,IAAI,GAA8B,IAAI,gBAAG,CAAmB,sBAAsB,EAAE,EAAE,EAAE;QACpG,IAAI,EAAE,QAAQ;QACd,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAsB,EAAE,IAAqD,CAAC;KACxG,CAAC,CAAC;IAEU,QAAA,IAAI,GAAwC,IAAI,gBAAG,CAAoB,+BAA+B,EAAE,KAAK,CAAC,CAAC;IAoD5H,IAAkB,oBAIjB;IAJD,WAAkB,oBAAoB;QACrC,2CAAmB,CAAA;QACnB,2CAAmB,CAAA;QACnB,yCAAiB,CAAA;IAClB,CAAC,EAJiB,oBAAoB,oCAApB,oBAAoB,QAIrC;IAcD,MAAa,IAAI;QAQhB,YAAY,UAAkC;YAC7C,IAAI,CAAC,EAAE,GAAG,UAAU,CAAC,EAAE,CAAC;YACxB,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC,WAAW,CAAC;YAC1C,IAAI,CAAC,mBAAmB,GAAG,UAAU,CAAC,mBAAmB,CAAC;YAC1D,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;YACpC,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC,QAAQ,CAAC;QACrC,CAAC;QAED,OAAO,CAAC,QAAa;YACpB,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,eAAe,IAAI,IAAA,4BAAI,EAAgB,QAAQ,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC,CAAC;QAC5H,CAAC;KACD;IAnBD,oBAmBC;IAED,MAAa,IAAI;QAIhB,YACC,OAAoC;YAEpC,IAAI,CAAC,UAAU,GAAG,IAAA,YAAG,EAAM,OAAO,EAAE,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QAC1D,CAAC;QAED,IAAW,MAAM,KAAa,OAAO,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;QAE9D;;;WAGG;QACH,IAAW,aAAa;YACvB,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;gBACpC,QAAQ,MAAM,CAAC,QAAQ,EAAE;oBACxB,KAAK,gDAAwB,CAAC,OAAO,CAAC;oBACtC,KAAK,gDAAwB,CAAC,OAAO;wBACpC,iFAAiF;wBACjF,OAAO,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE,CAC1C,WAAW,KAAK,MAAM,IAAI,eAAe,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,CAAC;oBAElE;wBACC,OAAO,KAAK,CAAC;iBACd;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;QAED;;;;;WAKG;QACH,IAAW,mBAAmB;YAC7B,MAAM,OAAO,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBACzD,OAAO,IAAA,4BAAI,EAAW,CAAC,CAAC,QAAQ,CAAC,GAAG,IAAA,4BAAI,EAAW,CAAC,CAAC,QAAQ,CAAC,CAAC;YAChE,CAAC,CAAC,CAAC;YACH,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC;QACnB,CAAC;KACD;IA3CD,oBA2CC;IAED,SAAS,eAAe,CAAC,WAAiB,EAAc,MAAY;QACnE,OAAO,IAAA,4BAAI,EAAW,WAAW,CAAC,QAAQ,CAAC,GAAG,IAAA,4BAAI,EAAW,MAAM,CAAC,QAAQ,CAAC,CAAC;IAC/E,CAAC","file":"customEditor.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from 'vs/base/common/arrays';\nimport { Event } from 'vs/base/common/event';\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\nimport { IDisposable, IReference } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport * as nls from 'vs/nls';\nimport { RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IRevertOptions, ISaveOptions } from 'vs/workbench/common/editor';\nimport { globMatchesResource, priorityToRank, RegisteredEditorPriority } from 'vs/workbench/services/editor/common/editorResolverService';\n\nexport const ICustomEditorService = createDecorator<ICustomEditorService>('customEditorService');\n\nexport const CONTEXT_ACTIVE_CUSTOM_EDITOR_ID = new RawContextKey<string>('activeCustomEditorId', '', {\n\ttype: 'string',\n\tdescription: nls.localize('context.customEditor', \"The viewType of the currently active custom editor.\"),\n});\n\nexport const CONTEXT_FOCUSED_CUSTOM_EDITOR_IS_EDITABLE = new RawContextKey<boolean>('focusedCustomEditorIsEditable', false);\n\nexport interface CustomEditorCapabilities {\n\treadonly supportsMultipleEditorsPerDocument?: boolean;\n}\n\nexport interface ICustomEditorService {\n\t_serviceBrand: any;\n\n\treadonly models: ICustomEditorModelManager;\n\n\tgetCustomEditor(viewType: string): CustomEditorInfo | undefined;\n\tgetAllCustomEditors(resource: URI): CustomEditorInfoCollection;\n\tgetContributedCustomEditors(resource: URI): CustomEditorInfoCollection;\n\tgetUserConfiguredCustomEditors(resource: URI): CustomEditorInfoCollection;\n\n\tregisterCustomEditorCapabilities(viewType: string, options: CustomEditorCapabilities): IDisposable;\n\tgetCustomEditorCapabilities(viewType: string): CustomEditorCapabilities | undefined;\n}\n\nexport interface ICustomEditorModelManager {\n\tgetAllModels(resource: URI): Promise<ICustomEditorModel[]>;\n\n\tget(resource: URI, viewType: string): Promise<ICustomEditorModel | undefined>;\n\n\ttryRetain(resource: URI, viewType: string): Promise<IReference<ICustomEditorModel>> | undefined;\n\n\tadd(resource: URI, viewType: string, model: Promise<ICustomEditorModel>): Promise<IReference<ICustomEditorModel>>;\n\n\tdisposeAllModelsForView(viewType: string): void;\n}\n\nexport interface ICustomEditorModel extends IDisposable {\n\treadonly viewType: string;\n\treadonly resource: URI;\n\treadonly backupId: string | undefined;\n\n\tisReadonly(): boolean | IMarkdownString;\n\treadonly onDidChangeReadonly: Event<void>;\n\n\tisOrphaned(): boolean;\n\treadonly onDidChangeOrphaned: Event<void>;\n\n\tisDirty(): boolean;\n\treadonly onDidChangeDirty: Event<void>;\n\n\trevert(options?: IRevertOptions): Promise<void>;\n\n\tsaveCustomEditor(options?: ISaveOptions): Promise<URI | undefined>;\n\tsaveCustomEditorAs(resource: URI, targetResource: URI, currentOptions?: ISaveOptions): Promise<boolean>;\n}\n\nexport const enum CustomEditorPriority {\n\tdefault = 'default',\n\tbuiltin = 'builtin',\n\toption = 'option',\n}\n\nexport interface CustomEditorSelector {\n\treadonly filenamePattern?: string;\n}\n\nexport interface CustomEditorDescriptor {\n\treadonly id: string;\n\treadonly displayName: string;\n\treadonly providerDisplayName: string;\n\treadonly priority: RegisteredEditorPriority;\n\treadonly selector: readonly CustomEditorSelector[];\n}\n\nexport class CustomEditorInfo implements CustomEditorDescriptor {\n\n\tpublic readonly id: string;\n\tpublic readonly displayName: string;\n\tpublic readonly providerDisplayName: string;\n\tpublic readonly priority: RegisteredEditorPriority;\n\tpublic readonly selector: readonly CustomEditorSelector[];\n\n\tconstructor(descriptor: CustomEditorDescriptor) {\n\t\tthis.id = descriptor.id;\n\t\tthis.displayName = descriptor.displayName;\n\t\tthis.providerDisplayName = descriptor.providerDisplayName;\n\t\tthis.priority = descriptor.priority;\n\t\tthis.selector = descriptor.selector;\n\t}\n\n\tmatches(resource: URI): boolean {\n\t\treturn this.selector.some(selector => selector.filenamePattern && globMatchesResource(selector.filenamePattern, resource));\n\t}\n}\n\nexport class CustomEditorInfoCollection {\n\n\tpublic readonly allEditors: readonly CustomEditorInfo[];\n\n\tconstructor(\n\t\teditors: readonly CustomEditorInfo[],\n\t) {\n\t\tthis.allEditors = distinct(editors, editor => editor.id);\n\t}\n\n\tpublic get length(): number { return this.allEditors.length; }\n\n\t/**\n\t * Find the single default editor to use (if any) by looking at the editor's priority and the\n\t * other contributed editors.\n\t */\n\tpublic get defaultEditor(): CustomEditorInfo | undefined {\n\t\treturn this.allEditors.find(editor => {\n\t\t\tswitch (editor.priority) {\n\t\t\t\tcase RegisteredEditorPriority.default:\n\t\t\t\tcase RegisteredEditorPriority.builtin:\n\t\t\t\t\t// A default editor must have higher priority than all other contributed editors.\n\t\t\t\t\treturn this.allEditors.every(otherEditor =>\n\t\t\t\t\t\totherEditor === editor || isLowerPriority(otherEditor, editor));\n\n\t\t\t\tdefault:\n\t\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Find the best available editor to use.\n\t *\n\t * Unlike the `defaultEditor`, a bestAvailableEditor can exist even if there are other editors with\n\t * the same priority.\n\t */\n\tpublic get bestAvailableEditor(): CustomEditorInfo | undefined {\n\t\tconst editors = Array.from(this.allEditors).sort((a, b) => {\n\t\t\treturn priorityToRank(a.priority) - priorityToRank(b.priority);\n\t\t});\n\t\treturn editors[0];\n\t}\n}\n\nfunction isLowerPriority(otherEditor: CustomEditorInfo, editor: CustomEditorInfo): unknown {\n\treturn priorityToRank(otherEditor.priority) < priorityToRank(editor.priority);\n}\n"]}