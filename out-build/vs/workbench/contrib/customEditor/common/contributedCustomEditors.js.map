{"version":3,"sources":["vs/workbench/contrib/customEditor/common/contributedCustomEditors.ts"],"names":[],"mappings":"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","file":"contributedCustomEditors.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport * as nls from 'vs/nls';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { Memento } from 'vs/workbench/common/memento';\nimport { CustomEditorDescriptor, CustomEditorInfo } from 'vs/workbench/contrib/customEditor/common/customEditor';\nimport { customEditorsExtensionPoint, ICustomEditorsExtensionPoint } from 'vs/workbench/contrib/customEditor/common/extensionPoint';\nimport { RegisteredEditorPriority } from 'vs/workbench/services/editor/common/editorResolverService';\nimport { IExtensionPointUser } from 'vs/workbench/services/extensions/common/extensionsRegistry';\n\nexport class ContributedCustomEditors extends Disposable {\n\n\tprivate static readonly CUSTOM_EDITORS_STORAGE_ID = 'customEditors';\n\tprivate static readonly CUSTOM_EDITORS_ENTRY_ID = 'editors';\n\n\tprivate readonly _editors = new Map<string, CustomEditorInfo>();\n\tprivate readonly _memento: Memento;\n\n\tconstructor(storageService: IStorageService) {\n\t\tsuper();\n\n\t\tthis._memento = new Memento(ContributedCustomEditors.CUSTOM_EDITORS_STORAGE_ID, storageService);\n\n\t\tconst mementoObject = this._memento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tfor (const info of (mementoObject[ContributedCustomEditors.CUSTOM_EDITORS_ENTRY_ID] || []) as CustomEditorDescriptor[]) {\n\t\t\tthis.add(new CustomEditorInfo(info));\n\t\t}\n\n\t\tcustomEditorsExtensionPoint.setHandler(extensions => {\n\t\t\tthis.update(extensions);\n\t\t});\n\t}\n\n\tprivate readonly _onChange = this._register(new Emitter<void>());\n\tpublic readonly onChange = this._onChange.event;\n\n\tprivate update(extensions: readonly IExtensionPointUser<ICustomEditorsExtensionPoint[]>[]) {\n\t\tthis._editors.clear();\n\n\t\tfor (const extension of extensions) {\n\t\t\tfor (const webviewEditorContribution of extension.value) {\n\t\t\t\tthis.add(new CustomEditorInfo({\n\t\t\t\t\tid: webviewEditorContribution.viewType,\n\t\t\t\t\tdisplayName: webviewEditorContribution.displayName,\n\t\t\t\t\tproviderDisplayName: extension.description.isBuiltin ? nls.localize('builtinProviderDisplayName', \"Built-in\") : extension.description.displayName || extension.description.identifier.value,\n\t\t\t\t\tselector: webviewEditorContribution.selector || [],\n\t\t\t\t\tpriority: getPriorityFromContribution(webviewEditorContribution, extension.description),\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\n\t\tconst mementoObject = this._memento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tmementoObject[ContributedCustomEditors.CUSTOM_EDITORS_ENTRY_ID] = Array.from(this._editors.values());\n\t\tthis._memento.saveMemento();\n\n\t\tthis._onChange.fire();\n\t}\n\n\tpublic [Symbol.iterator](): Iterator<CustomEditorInfo> {\n\t\treturn this._editors.values();\n\t}\n\n\tpublic get(viewType: string): CustomEditorInfo | undefined {\n\t\treturn this._editors.get(viewType);\n\t}\n\n\tpublic getContributedEditors(resource: URI): readonly CustomEditorInfo[] {\n\t\treturn Array.from(this._editors.values())\n\t\t\t.filter(customEditor => customEditor.matches(resource));\n\t}\n\n\tprivate add(info: CustomEditorInfo): void {\n\t\tif (this._editors.has(info.id)) {\n\t\t\tconsole.error(`Custom editor with id '${info.id}' already registered`);\n\t\t\treturn;\n\t\t}\n\t\tthis._editors.set(info.id, info);\n\t}\n}\n\nfunction getPriorityFromContribution(\n\tcontribution: ICustomEditorsExtensionPoint,\n\textension: IExtensionDescription,\n): RegisteredEditorPriority {\n\tswitch (contribution.priority) {\n\t\tcase RegisteredEditorPriority.default:\n\t\tcase RegisteredEditorPriority.option:\n\t\t\treturn contribution.priority;\n\n\t\tcase RegisteredEditorPriority.builtin:\n\t\t\t// Builtin is only valid for builtin extensions\n\t\t\treturn extension.isBuiltin ? RegisteredEditorPriority.builtin : RegisteredEditorPriority.default;\n\n\t\tdefault:\n\t\t\treturn RegisteredEditorPriority.default;\n\t}\n}\n"]}