{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/webviewPanel/browser/webviewEditorInputSerializer.ts"],"names":[],"mappings":"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","file":"webviewEditorInputSerializer.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IEditorSerializer } from 'vs/workbench/common/editor';\nimport { WebviewContentOptions, WebviewExtensionDescription, WebviewOptions } from 'vs/workbench/contrib/webview/browser/webview';\nimport { WebviewIcons } from 'vs/workbench/contrib/webviewPanel/browser/webviewIconManager';\nimport { WebviewInput } from './webviewEditorInput';\nimport { IWebviewWorkbenchService } from './webviewWorkbenchService';\n\nexport type SerializedWebviewOptions = WebviewOptions & WebviewContentOptions;\n\ninterface SerializedIconPath {\n\tlight: string | UriComponents;\n\tdark: string | UriComponents;\n}\n\nexport interface SerializedWebview {\n\treadonly origin: string | undefined;\n\treadonly viewType: string;\n\treadonly providedId: string | undefined;\n\treadonly title: string;\n\treadonly options: SerializedWebviewOptions;\n\treadonly extensionLocation: UriComponents | undefined;\n\treadonly extensionId: string | undefined;\n\treadonly state: any;\n\treadonly iconPath: SerializedIconPath | undefined;\n\treadonly group?: number;\n}\n\nexport interface DeserializedWebview {\n\treadonly origin: string | undefined;\n\treadonly viewType: string;\n\treadonly providedId: string | undefined;\n\treadonly title: string;\n\treadonly webviewOptions: WebviewOptions;\n\treadonly contentOptions: WebviewContentOptions;\n\treadonly extension: WebviewExtensionDescription | undefined;\n\treadonly state: any;\n\treadonly iconPath: WebviewIcons | undefined;\n\treadonly group?: number;\n}\n\nexport class WebviewEditorInputSerializer implements IEditorSerializer {\n\n\tpublic static readonly ID = WebviewInput.typeId;\n\n\tpublic constructor(\n\t\t@IWebviewWorkbenchService private readonly _webviewWorkbenchService: IWebviewWorkbenchService\n\t) { }\n\n\tpublic canSerialize(input: WebviewInput): boolean {\n\t\treturn this._webviewWorkbenchService.shouldPersist(input);\n\t}\n\n\tpublic serialize(input: WebviewInput): string | undefined {\n\t\tif (!this._webviewWorkbenchService.shouldPersist(input)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst data = this.toJson(input);\n\t\ttry {\n\t\t\treturn JSON.stringify(data);\n\t\t} catch {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tpublic deserialize(\n\t\t_instantiationService: IInstantiationService,\n\t\tserializedEditorInput: string\n\t): WebviewInput {\n\t\tconst data = this.fromJson(JSON.parse(serializedEditorInput));\n\t\treturn this._webviewWorkbenchService.openRevivedWebview({\n\t\t\twebviewInitInfo: {\n\t\t\t\tprovidedViewType: data.providedId,\n\t\t\t\torigin: data.origin,\n\t\t\t\ttitle: data.title,\n\t\t\t\toptions: data.webviewOptions,\n\t\t\t\tcontentOptions: data.contentOptions,\n\t\t\t\textension: data.extension,\n\t\t\t},\n\t\t\tviewType: data.viewType,\n\t\t\ttitle: data.title,\n\t\t\ticonPath: data.iconPath,\n\t\t\tstate: data.state,\n\t\t\tgroup: data.group\n\t\t});\n\t}\n\n\tprotected fromJson(data: SerializedWebview): DeserializedWebview {\n\t\treturn {\n\t\t\t...data,\n\t\t\textension: reviveWebviewExtensionDescription(data.extensionId, data.extensionLocation),\n\t\t\ticonPath: reviveIconPath(data.iconPath),\n\t\t\tstate: reviveState(data.state),\n\t\t\twebviewOptions: restoreWebviewOptions(data.options),\n\t\t\tcontentOptions: restoreWebviewContentOptions(data.options),\n\t\t};\n\t}\n\n\tprotected toJson(input: WebviewInput): SerializedWebview {\n\t\treturn {\n\t\t\torigin: input.webview.origin,\n\t\t\tviewType: input.viewType,\n\t\t\tprovidedId: input.providedId,\n\t\t\ttitle: input.getName(),\n\t\t\toptions: { ...input.webview.options, ...input.webview.contentOptions },\n\t\t\textensionLocation: input.extension?.location,\n\t\t\textensionId: input.extension?.id.value,\n\t\t\tstate: input.webview.state,\n\t\t\ticonPath: input.iconPath ? { light: input.iconPath.light, dark: input.iconPath.dark, } : undefined,\n\t\t\tgroup: input.group\n\t\t};\n\t}\n}\n\nexport function reviveWebviewExtensionDescription(\n\textensionId: string | undefined,\n\textensionLocation: UriComponents | undefined,\n): WebviewExtensionDescription | undefined {\n\tif (!extensionId) {\n\t\treturn undefined;\n\t}\n\n\tconst location = reviveUri(extensionLocation);\n\tif (!location) {\n\t\treturn undefined;\n\t}\n\n\treturn {\n\t\tid: new ExtensionIdentifier(extensionId),\n\t\tlocation,\n\t};\n}\n\nfunction reviveIconPath(data: SerializedIconPath | undefined) {\n\tif (!data) {\n\t\treturn undefined;\n\t}\n\n\tconst light = reviveUri(data.light);\n\tconst dark = reviveUri(data.dark);\n\treturn light && dark ? { light, dark } : undefined;\n}\n\nfunction reviveUri(data: string | UriComponents): URI;\nfunction reviveUri(data: string | UriComponents | undefined): URI | undefined;\nfunction reviveUri(data: string | UriComponents | undefined): URI | undefined {\n\tif (!data) {\n\t\treturn undefined;\n\t}\n\n\ttry {\n\t\tif (typeof data === 'string') {\n\t\t\treturn URI.parse(data);\n\t\t}\n\t\treturn URI.from(data);\n\t} catch {\n\t\treturn undefined;\n\t}\n}\n\nfunction reviveState(state: unknown | undefined): undefined | string {\n\treturn typeof state === 'string' ? state : undefined;\n}\n\nexport function restoreWebviewOptions(options: SerializedWebviewOptions): WebviewOptions {\n\treturn options;\n}\n\nexport function restoreWebviewContentOptions(options: SerializedWebviewOptions): WebviewContentOptions {\n\treturn {\n\t\t...options,\n\t\tlocalResourceRoots: options.localResourceRoots?.map(uri => reviveUri(uri)),\n\t};\n}\n"]}