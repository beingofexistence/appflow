{"version":3,"sources":["vs/workbench/contrib/webviewPanel/browser/webviewPanel.contribution.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;IAqBhG,CAAC,cAAG,CAAM,EAAE,CAAsB,YAAG,CAAc,UAAU,CAAC,CAAC,CAAC,kBAAkB,CAAC,YAAG,CAAkB,MAAM,CAC7G,oBAAI,EACJ,oBAAI,CAAU,EAAE,EAChB,IAAA,cAAQ,EAAC,CAAsB,EAAE,IAAgB,CAAC,CAAC,EACnD,CAAC,IAAI,iBAAG,CAAY,yBAAI,CAAS,CAAC,CAAC,CAAC;IAErC,IAAM,wBAAwB,GAA9B,MAAM,wBAAyB,SAAQ,eAAG;QAEzC,YACwC,CAAuB;YAE9D,KAAK,EAAE,CAAC;YAF+B,MAAC,GAAD,CAAC,CAAsB;YAI9D,+CAA+C;YAC/C,IAAI,CAAC,CAAC,CAAkB,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAkB,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBAC3F,IAAI,CAAC,CAAC,CAAqB,KAAK,CAAC,CAAC;YACnC,CAAC,CAAC,CAAC,CAAC;YAEJ,qDAAqD;YACrD,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAkB,aAAa,CAAC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAqB,KAAK,CAAC,CAAC,CAAC,CAAC;QACnG,CAAC;QAEO,CAAC,CAAqB,KAAmB;YAChD,MAAM,QAAQ,GAAG,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAe,CAAC,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;YAEpF,aAAK,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,GAAG,EAAE;gBACpC,QAAQ,CAAC,OAAO,EAAE,CAAC;YACpB,CAAC,CAAC,CAAC;QACJ,CAAC;QAEO,CAAC,CACR,MAAW,EACX,KAAmB;YAEnB,IAAI,CAAC,CAAC,MAAM,YAAY,yBAAI,CAAS,IAAI,MAAM,CAAC,MAAM,KAAK,yBAAI,CAAS,MAAM,EAAE;gBAC/E,OAAO,SAAS,CAAC;aACjB;YAED,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;gBAC3B,OAAO,SAAS,CAAC;aACjB;YAED,IAAI,aAAuC,CAAC;YAC5C,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAkB,MAAM,CAAC;YAC9C,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;gBAC3B,IAAI,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;oBAC3B,aAAa,GAAG,KAAK,CAAC;oBACtB,MAAM;iBACN;aACD;YAED,IAAI,CAAC,aAAa,EAAE;gBACnB,OAAO,SAAS,CAAC;aACjB;YAED,aAAa,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC;QACnC,CAAC;KACD,CAAA;IAnDK,wBAAwB;QAG3B,WAAA,yBAAG,CAAA;OAHA,wBAAwB,CAmD7B;IAED,MAAM,8BAA8B,GAAG,cAAG,CAAM,EAAE,CAAkC,0BAAmB,CAAC,SAAS,CAAC,CAAC;IACnH,8BAA8B,CAAC,6BAA6B,CAAC,wBAAwB,kCAA0B,CAAC;IAEhH,cAAG,CAAM,EAAE,CAAyB,YAAG,CAAc,aAAa,CAAC,CAAC,wBAAwB,CAC3F,mCAAI,CAAyB,EAAE,EAC/B,mCAAI,CAAyB,CAAC;IAE/B,IAAA,gBAAG,EAAe,8BAAI,EAAsB,8BAAI,oCAA4C,CAAC;IAE7F,IAAA,aAAG,EAAa,sBAAI,CAA8B,CAAC;IACnD,IAAA,aAAG,EAAa,sBAAI,CAAyB,CAAC;IAC9C,IAAA,aAAG,EAAa,sBAAI,CAAyB,CAAC;IAC9C,IAAA,aAAG,EAAa,sBAAI,CAA6B,CAAC;IAClD,IAAA,aAAG,EAAa,sBAAI,CAAgB,CAAC","file":"webviewPanel.contribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { localize } from 'vs/nls';\nimport { registerAction2 } from 'vs/platform/actions/common/actions';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { EditorPaneDescriptor, IEditorPaneRegistry } from 'vs/workbench/browser/editor';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContribution, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';\nimport { EditorExtensions, IEditorFactoryRegistry } from 'vs/workbench/common/editor';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { IEditorGroup, IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { HideWebViewEditorFindCommand, ReloadWebviewAction, ShowWebViewEditorFindWidgetAction, WebViewEditorFindNextCommand, WebViewEditorFindPreviousCommand } from './webviewCommands';\nimport { WebviewEditor } from './webviewEditor';\nimport { WebviewInput } from './webviewEditorInput';\nimport { WebviewEditorInputSerializer } from './webviewEditorInputSerializer';\nimport { IWebviewWorkbenchService, WebviewEditorService } from './webviewWorkbenchService';\n\n(Registry.as<IEditorPaneRegistry>(EditorExtensions.EditorPane)).registerEditorPane(EditorPaneDescriptor.create(\n\tWebviewEditor,\n\tWebviewEditor.ID,\n\tlocalize('webview.editor.label', \"webview editor\")),\n\t[new SyncDescriptor(WebviewInput)]);\n\nclass WebviewPanelContribution extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t) {\n\t\tsuper();\n\n\t\t// Add all the initial groups to be listened to\n\t\tthis.editorGroupService.whenReady.then(() => this.editorGroupService.groups.forEach(group => {\n\t\t\tthis.registerGroupListener(group);\n\t\t}));\n\n\t\t// Additional groups added should also be listened to\n\t\tthis._register(this.editorGroupService.onDidAddGroup(group => this.registerGroupListener(group)));\n\t}\n\n\tprivate registerGroupListener(group: IEditorGroup): void {\n\t\tconst listener = group.onWillOpenEditor(e => this.onEditorOpening(e.editor, group));\n\n\t\tEvent.once(group.onWillDispose)(() => {\n\t\t\tlistener.dispose();\n\t\t});\n\t}\n\n\tprivate onEditorOpening(\n\t\teditor: EditorInput,\n\t\tgroup: IEditorGroup\n\t): void {\n\t\tif (!(editor instanceof WebviewInput) || editor.typeId !== WebviewInput.typeId) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (group.contains(editor)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet previousGroup: IEditorGroup | undefined;\n\t\tconst groups = this.editorGroupService.groups;\n\t\tfor (const group of groups) {\n\t\t\tif (group.contains(editor)) {\n\t\t\t\tpreviousGroup = group;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!previousGroup) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tpreviousGroup.closeEditor(editor);\n\t}\n}\n\nconst workbenchContributionsRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchContributionsRegistry.registerWorkbenchContribution(WebviewPanelContribution, LifecyclePhase.Starting);\n\nRegistry.as<IEditorFactoryRegistry>(EditorExtensions.EditorFactory).registerEditorSerializer(\n\tWebviewEditorInputSerializer.ID,\n\tWebviewEditorInputSerializer);\n\nregisterSingleton(IWebviewWorkbenchService, WebviewEditorService, InstantiationType.Delayed);\n\nregisterAction2(ShowWebViewEditorFindWidgetAction);\nregisterAction2(HideWebViewEditorFindCommand);\nregisterAction2(WebViewEditorFindNextCommand);\nregisterAction2(WebViewEditorFindPreviousCommand);\nregisterAction2(ReloadWebviewAction);\n"]}