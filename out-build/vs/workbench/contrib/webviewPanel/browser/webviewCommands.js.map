{"version":3,"sources":["vs/workbench/contrib/webviewPanel/browser/webviewCommands.ts"],"names":[],"mappings":"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","file":"webviewCommands.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport * as nls from 'vs/nls';\nimport { Action2, MenuId } from 'vs/platform/actions/common/actions';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { Categories } from 'vs/platform/action/common/actionCommonCategories';\nimport { IWebviewService, KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_ENABLED, KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_FOCUSED, KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_VISIBLE, IWebview } from 'vs/workbench/contrib/webview/browser/webview';\nimport { WebviewEditor } from 'vs/workbench/contrib/webviewPanel/browser/webviewEditor';\nimport { WebviewInput } from 'vs/workbench/contrib/webviewPanel/browser/webviewEditorInput';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\n\nconst webviewActiveContextKeyExpr = ContextKeyExpr.and(ContextKeyExpr.equals('activeEditor', WebviewEditor.ID), EditorContextKeys.focus.toNegated() /* https://github.com/microsoft/vscode/issues/58668 */)!;\n\nexport class ShowWebViewEditorFindWidgetAction extends Action2 {\n\tpublic static readonly ID = 'editor.action.webvieweditor.showFind';\n\tpublic static readonly LABEL = nls.localize('editor.action.webvieweditor.showFind', \"Show find\");\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ShowWebViewEditorFindWidgetAction.ID,\n\t\t\ttitle: ShowWebViewEditorFindWidgetAction.LABEL,\n\t\t\tkeybinding: {\n\t\t\t\twhen: ContextKeyExpr.and(webviewActiveContextKeyExpr, KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_ENABLED),\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.KeyF,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor): void {\n\t\tgetActiveWebviewEditor(accessor)?.showFind();\n\t}\n}\n\nexport class HideWebViewEditorFindCommand extends Action2 {\n\tpublic static readonly ID = 'editor.action.webvieweditor.hideFind';\n\tpublic static readonly LABEL = nls.localize('editor.action.webvieweditor.hideFind', \"Stop find\");\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: HideWebViewEditorFindCommand.ID,\n\t\t\ttitle: HideWebViewEditorFindCommand.LABEL,\n\t\t\tkeybinding: {\n\t\t\t\twhen: ContextKeyExpr.and(webviewActiveContextKeyExpr, KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_VISIBLE),\n\t\t\t\tprimary: KeyCode.Escape,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor): void {\n\t\tgetActiveWebviewEditor(accessor)?.hideFind();\n\t}\n}\n\nexport class WebViewEditorFindNextCommand extends Action2 {\n\tpublic static readonly ID = 'editor.action.webvieweditor.findNext';\n\tpublic static readonly LABEL = nls.localize('editor.action.webvieweditor.findNext', 'Find next');\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: WebViewEditorFindNextCommand.ID,\n\t\t\ttitle: WebViewEditorFindNextCommand.LABEL,\n\t\t\tkeybinding: {\n\t\t\t\twhen: ContextKeyExpr.and(webviewActiveContextKeyExpr, KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_FOCUSED),\n\t\t\t\tprimary: KeyCode.Enter,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor): void {\n\t\tgetActiveWebviewEditor(accessor)?.runFindAction(false);\n\t}\n}\n\nexport class WebViewEditorFindPreviousCommand extends Action2 {\n\tpublic static readonly ID = 'editor.action.webvieweditor.findPrevious';\n\tpublic static readonly LABEL = nls.localize('editor.action.webvieweditor.findPrevious', 'Find previous');\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: WebViewEditorFindPreviousCommand.ID,\n\t\t\ttitle: WebViewEditorFindPreviousCommand.LABEL,\n\t\t\tkeybinding: {\n\t\t\t\twhen: ContextKeyExpr.and(webviewActiveContextKeyExpr, KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_FOCUSED),\n\t\t\t\tprimary: KeyMod.Shift | KeyCode.Enter,\n\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(accessor: ServicesAccessor): void {\n\t\tgetActiveWebviewEditor(accessor)?.runFindAction(true);\n\t}\n}\n\nexport class ReloadWebviewAction extends Action2 {\n\tstatic readonly ID = 'workbench.action.webview.reloadWebviewAction';\n\tstatic readonly LABEL = nls.localize('refreshWebviewLabel', \"Reload Webviews\");\n\n\tpublic constructor() {\n\t\tsuper({\n\t\t\tid: ReloadWebviewAction.ID,\n\t\t\ttitle: { value: ReloadWebviewAction.LABEL, original: 'Reload Webviews' },\n\t\t\tcategory: Categories.Developer,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.CommandPalette\n\t\t\t}]\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst webviewService = accessor.get(IWebviewService);\n\t\tfor (const webview of webviewService.webviews) {\n\t\t\twebview.reload();\n\t\t}\n\t}\n}\n\nfunction getActiveWebviewEditor(accessor: ServicesAccessor): IWebview | undefined {\n\tconst editorService = accessor.get(IEditorService);\n\tconst activeEditor = editorService.activeEditor;\n\treturn activeEditor instanceof WebviewInput ? activeEditor.webview : undefined;\n}\n"]}