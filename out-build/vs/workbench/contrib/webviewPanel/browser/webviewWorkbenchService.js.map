{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/webviewPanel/browser/webviewWorkbenchService.ts"],"names":[],"mappings":"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","file":"webviewWorkbenchService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancelablePromise, createCancelablePromise, DeferredPromise } from 'vs/base/common/async';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { memoize } from 'vs/base/common/decorators';\nimport { isCancellationError } from 'vs/base/common/errors';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Iterable } from 'vs/base/common/iterator';\nimport { combinedDisposable, Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { EditorActivation } from 'vs/platform/editor/common/editor';\nimport { createDecorator, IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { GroupIdentifier } from 'vs/workbench/common/editor';\nimport { DiffEditorInput } from 'vs/workbench/common/editor/diffEditorInput';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { IOverlayWebview, IWebviewService, WebviewInitInfo } from 'vs/workbench/contrib/webview/browser/webview';\nimport { CONTEXT_ACTIVE_WEBVIEW_PANEL_ID } from 'vs/workbench/contrib/webviewPanel/browser/webviewEditor';\nimport { WebviewIconManager, WebviewIcons } from 'vs/workbench/contrib/webviewPanel/browser/webviewIconManager';\nimport { IEditorGroup } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { ACTIVE_GROUP_TYPE, IEditorService, SIDE_GROUP_TYPE } from 'vs/workbench/services/editor/common/editorService';\nimport { WebviewInput, WebviewInputInitInfo } from './webviewEditorInput';\n\nexport interface IWebViewShowOptions {\n\treadonly group?: IEditorGroup | GroupIdentifier | ACTIVE_GROUP_TYPE | SIDE_GROUP_TYPE;\n\treadonly preserveFocus?: boolean;\n}\n\nexport const IWebviewWorkbenchService = createDecorator<IWebviewWorkbenchService>('webviewEditorService');\n\n/**\n * Service responsible for showing and managing webview editors in the workbench.\n */\nexport interface IWebviewWorkbenchService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Manages setting the icons show for a given webview.\n\t */\n\treadonly iconManager: WebviewIconManager;\n\n\t/**\n\t * Event fired when focus switches to a different webview editor.\n\t *\n\t * Fires `undefined` if focus switches to a non-webview editor.\n\t */\n\treadonly onDidChangeActiveWebviewEditor: Event<WebviewInput | undefined>;\n\n\t/**\n\t * Create a new webview editor and open it in the workbench.\n\t */\n\topenWebview(\n\t\twebviewInitInfo: WebviewInitInfo,\n\t\tviewType: string,\n\t\ttitle: string,\n\t\tshowOptions: IWebViewShowOptions,\n\t): WebviewInput;\n\n\t/**\n\t * Open a webview that is being restored from serialization.\n\t */\n\topenRevivedWebview(options: {\n\t\twebviewInitInfo: WebviewInitInfo;\n\t\tviewType: string;\n\t\ttitle: string;\n\t\ticonPath: WebviewIcons | undefined;\n\t\tstate: any;\n\t\tgroup: number | undefined;\n\t}): WebviewInput;\n\n\t/**\n\t * Reveal an already opened webview editor in the workbench.\n\t */\n\trevealWebview(\n\t\twebview: WebviewInput,\n\t\tgroup: IEditorGroup | GroupIdentifier | ACTIVE_GROUP_TYPE | SIDE_GROUP_TYPE,\n\t\tpreserveFocus: boolean\n\t): void;\n\n\t/**\n\t * Register a new {@link WebviewResolver}.\n\t *\n\t * If there are any webviews awaiting revival that this resolver can handle, they will be resolved by it.\n\t */\n\tregisterResolver(resolver: WebviewResolver): IDisposable;\n\n\t/**\n\t * Check if a webview should be serialized across window reloads.\n\t */\n\tshouldPersist(input: WebviewInput): boolean;\n\n\t/**\n\t * Try to resolve a webview. This will block until a resolver is registered for the webview.\n\t */\n\tresolveWebview(webview: WebviewInput, token: CancellationToken): Promise<void>;\n}\n\n/**\n * Handles filling in the content of webview before it can be shown to the user.\n */\ninterface WebviewResolver {\n\t/**\n\t * Returns true if the resolver can resolve the given webview.\n\t */\n\tcanResolve(webview: WebviewInput): boolean;\n\n\t/**\n\t * Resolves the webview.\n\t */\n\tresolveWebview(webview: WebviewInput, token: CancellationToken): Promise<void>;\n}\n\nfunction canRevive(reviver: WebviewResolver, webview: WebviewInput): boolean {\n\treturn reviver.canResolve(webview);\n}\n\nexport class LazilyResolvedWebviewEditorInput extends WebviewInput {\n\n\tprivate _resolved = false;\n\tprivate _resolvePromise?: CancelablePromise<void>;\n\n\tconstructor(\n\t\tinit: WebviewInputInitInfo,\n\t\twebview: IOverlayWebview,\n\t\t@IWebviewWorkbenchService private readonly _webviewWorkbenchService: IWebviewWorkbenchService,\n\t) {\n\t\tsuper(init, webview, _webviewWorkbenchService.iconManager);\n\t}\n\n\toverride dispose() {\n\t\tsuper.dispose();\n\t\tthis._resolvePromise?.cancel();\n\t\tthis._resolvePromise = undefined;\n\t}\n\n\t@memoize\n\tpublic override async resolve() {\n\t\tif (!this._resolved) {\n\t\t\tthis._resolved = true;\n\t\t\tthis._resolvePromise = createCancelablePromise(token => this._webviewWorkbenchService.resolveWebview(this, token));\n\t\t\ttry {\n\t\t\t\tawait this._resolvePromise;\n\t\t\t} catch (e) {\n\t\t\t\tif (!isCancellationError(e)) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn super.resolve();\n\t}\n\n\tprotected override transfer(other: LazilyResolvedWebviewEditorInput): WebviewInput | undefined {\n\t\tif (!super.transfer(other)) {\n\t\t\treturn;\n\t\t}\n\n\t\tother._resolved = this._resolved;\n\t\treturn other;\n\t}\n}\n\n\nclass RevivalPool {\n\tprivate _awaitingRevival: Array<{\n\t\treadonly input: WebviewInput;\n\t\treadonly promise: DeferredPromise<void>;\n\t\treadonly disposable: IDisposable;\n\t}> = [];\n\n\tpublic enqueueForRestoration(input: WebviewInput, token: CancellationToken): Promise<void> {\n\t\tconst promise = new DeferredPromise<void>();\n\n\t\tconst remove = () => {\n\t\t\tconst index = this._awaitingRevival.findIndex(entry => input === entry.input);\n\t\t\tif (index >= 0) {\n\t\t\t\tthis._awaitingRevival.splice(index, 1);\n\t\t\t}\n\t\t};\n\n\t\tconst disposable = combinedDisposable(\n\t\t\tinput.webview.onDidDispose(remove),\n\t\t\ttoken.onCancellationRequested(() => {\n\t\t\t\tremove();\n\t\t\t\tpromise.cancel();\n\t\t\t}),\n\t\t);\n\n\t\tthis._awaitingRevival.push({ input, promise, disposable });\n\n\t\treturn promise.p;\n\t}\n\n\tpublic reviveFor(reviver: WebviewResolver, token: CancellationToken) {\n\t\tconst toRevive = this._awaitingRevival.filter(({ input }) => canRevive(reviver, input));\n\t\tthis._awaitingRevival = this._awaitingRevival.filter(({ input }) => !canRevive(reviver, input));\n\n\t\tfor (const { input, promise: resolve, disposable } of toRevive) {\n\t\t\treviver.resolveWebview(input, token).then(x => resolve.complete(x), err => resolve.error(err)).finally(() => {\n\t\t\t\tdisposable.dispose();\n\t\t\t});\n\t\t}\n\t}\n}\n\n\nexport class WebviewEditorService extends Disposable implements IWebviewWorkbenchService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _revivers = new Set<WebviewResolver>();\n\tprivate readonly _revivalPool = new RevivalPool();\n\n\tprivate readonly _iconManager: WebviewIconManager;\n\n\tprivate readonly _activeWebviewPanelIdContext: IContextKey<string>;\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IWebviewService private readonly _webviewService: IWebviewService,\n\t) {\n\t\tsuper();\n\n\t\tthis._activeWebviewPanelIdContext = CONTEXT_ACTIVE_WEBVIEW_PANEL_ID.bindTo(contextKeyService);\n\n\t\tthis._iconManager = this._register(this._instantiationService.createInstance(WebviewIconManager));\n\n\t\tthis._register(_editorService.onDidActiveEditorChange(() => {\n\t\t\tthis.updateActiveWebview();\n\t\t}));\n\n\t\t// The user may have switched focus between two sides of a diff editor\n\t\tthis._register(_webviewService.onDidChangeActiveWebview(() => {\n\t\t\tthis.updateActiveWebview();\n\t\t}));\n\n\t\tthis.updateActiveWebview();\n\t}\n\n\tget iconManager() {\n\t\treturn this._iconManager;\n\t}\n\n\tprivate _activeWebview: WebviewInput | undefined;\n\n\tprivate readonly _onDidChangeActiveWebviewEditor = this._register(new Emitter<WebviewInput | undefined>());\n\tpublic readonly onDidChangeActiveWebviewEditor = this._onDidChangeActiveWebviewEditor.event;\n\n\tprivate updateActiveWebview() {\n\t\tconst activeInput = this._editorService.activeEditor;\n\n\t\tlet newActiveWebview: WebviewInput | undefined;\n\t\tif (activeInput instanceof WebviewInput) {\n\t\t\tnewActiveWebview = activeInput;\n\t\t} else if (activeInput instanceof DiffEditorInput) {\n\t\t\tif (activeInput.primary instanceof WebviewInput && activeInput.primary.webview === this._webviewService.activeWebview) {\n\t\t\t\tnewActiveWebview = activeInput.primary;\n\t\t\t} else if (activeInput.secondary instanceof WebviewInput && activeInput.secondary.webview === this._webviewService.activeWebview) {\n\t\t\t\tnewActiveWebview = activeInput.secondary;\n\t\t\t}\n\t\t}\n\n\t\tif (newActiveWebview) {\n\t\t\tthis._activeWebviewPanelIdContext.set(newActiveWebview.webview.providedViewType ?? '');\n\t\t} else {\n\t\t\tthis._activeWebviewPanelIdContext.reset();\n\t\t}\n\n\t\tif (newActiveWebview !== this._activeWebview) {\n\t\t\tthis._activeWebview = newActiveWebview;\n\t\t\tthis._onDidChangeActiveWebviewEditor.fire(newActiveWebview);\n\t\t}\n\t}\n\n\tpublic openWebview(\n\t\twebviewInitInfo: WebviewInitInfo,\n\t\tviewType: string,\n\t\ttitle: string,\n\t\tshowOptions: IWebViewShowOptions,\n\t): WebviewInput {\n\t\tconst webview = this._webviewService.createWebviewOverlay(webviewInitInfo);\n\t\tconst webviewInput = this._instantiationService.createInstance(WebviewInput, { viewType, name: title, providedId: webviewInitInfo.providedViewType }, webview, this.iconManager);\n\t\tthis._editorService.openEditor(webviewInput, {\n\t\t\tpinned: true,\n\t\t\tpreserveFocus: showOptions.preserveFocus,\n\t\t\t// preserve pre 1.38 behaviour to not make group active when preserveFocus: true\n\t\t\t// but make sure to restore the editor to fix https://github.com/microsoft/vscode/issues/79633\n\t\t\tactivation: showOptions.preserveFocus ? EditorActivation.RESTORE : undefined\n\t\t}, showOptions.group);\n\t\treturn webviewInput;\n\t}\n\n\tpublic revealWebview(\n\t\twebview: WebviewInput,\n\t\tgroup: IEditorGroup | GroupIdentifier | ACTIVE_GROUP_TYPE | SIDE_GROUP_TYPE,\n\t\tpreserveFocus: boolean\n\t): void {\n\t\tconst topLevelEditor = this.findTopLevelEditorForWebview(webview);\n\n\t\tthis._editorService.openEditor(topLevelEditor, {\n\t\t\tpreserveFocus,\n\t\t\t// preserve pre 1.38 behaviour to not make group active when preserveFocus: true\n\t\t\t// but make sure to restore the editor to fix https://github.com/microsoft/vscode/issues/79633\n\t\t\tactivation: preserveFocus ? EditorActivation.RESTORE : undefined\n\t\t}, group);\n\t}\n\n\tprivate findTopLevelEditorForWebview(webview: WebviewInput): EditorInput {\n\t\tfor (const editor of this._editorService.editors) {\n\t\t\tif (editor === webview) {\n\t\t\t\treturn editor;\n\t\t\t}\n\t\t\tif (editor instanceof DiffEditorInput) {\n\t\t\t\tif (webview === editor.primary || webview === editor.secondary) {\n\t\t\t\t\treturn editor;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn webview;\n\t}\n\n\tpublic openRevivedWebview(options: {\n\t\twebviewInitInfo: WebviewInitInfo;\n\t\tviewType: string;\n\t\ttitle: string;\n\t\ticonPath: WebviewIcons | undefined;\n\t\tstate: any;\n\t\tgroup: number | undefined;\n\t}): WebviewInput {\n\t\tconst webview = this._webviewService.createWebviewOverlay(options.webviewInitInfo);\n\t\twebview.state = options.state;\n\n\t\tconst webviewInput = this._instantiationService.createInstance(LazilyResolvedWebviewEditorInput, { viewType: options.viewType, providedId: options.webviewInitInfo.providedViewType, name: options.title }, webview);\n\t\twebviewInput.iconPath = options.iconPath;\n\n\t\tif (typeof options.group === 'number') {\n\t\t\twebviewInput.updateGroup(options.group);\n\t\t}\n\t\treturn webviewInput;\n\t}\n\n\tpublic registerResolver(reviver: WebviewResolver): IDisposable {\n\t\tthis._revivers.add(reviver);\n\n\t\tconst cts = new CancellationTokenSource();\n\t\tthis._revivalPool.reviveFor(reviver, cts.token);\n\n\t\treturn toDisposable(() => {\n\t\t\tthis._revivers.delete(reviver);\n\t\t\tcts.dispose(true);\n\t\t});\n\t}\n\n\tpublic shouldPersist(webview: WebviewInput): boolean {\n\t\t// Revived webviews may not have an actively registered reviver but we still want to persist them\n\t\t// since a reviver should exist when it is actually needed.\n\t\tif (webview instanceof LazilyResolvedWebviewEditorInput) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn Iterable.some(this._revivers.values(), reviver => canRevive(reviver, webview));\n\t}\n\n\tprivate async tryRevive(webview: WebviewInput, token: CancellationToken): Promise<boolean> {\n\t\tfor (const reviver of this._revivers.values()) {\n\t\t\tif (canRevive(reviver, webview)) {\n\t\t\t\tawait reviver.resolveWebview(webview, token);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic async resolveWebview(webview: WebviewInput, token: CancellationToken): Promise<void> {\n\t\tconst didRevive = await this.tryRevive(webview, token);\n\t\tif (!didRevive && !token.isCancellationRequested) {\n\t\t\t// A reviver may not be registered yet. Put into pool and resolve promise when we can revive\n\t\t\treturn this._revivalPool.enqueueForRestoration(webview, token);\n\t\t}\n\t}\n\n\tpublic setIcons(id: string, iconPath: WebviewIcons | undefined): void {\n\t\tthis._iconManager.setIcons(id, iconPath);\n\t}\n}\n"]}