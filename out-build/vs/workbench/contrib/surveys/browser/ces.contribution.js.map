{"version":3,"sources":["vs/workbench/contrib/surveys/browser/ces.contribution.ts"],"names":[],"mappings":"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","file":"ces.contribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { language } from 'vs/base/common/platform';\nimport { IWorkbenchContributionsRegistry, IWorkbenchContribution, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { Severity, INotificationService } from 'vs/platform/notification/common/notification';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { IWorkbenchAssignmentService } from 'vs/workbench/services/assignment/common/assignmentService';\nimport { URI } from 'vs/base/common/uri';\nimport { platform } from 'vs/base/common/process';\nimport { ThrottledDelayer } from 'vs/base/common/async';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Event } from 'vs/base/common/event';\n\nconst WAIT_TIME_TO_SHOW_SURVEY = 1000 * 60 * 60; // 1 hour\nconst MIN_WAIT_TIME_TO_SHOW_SURVEY = 1000 * 60 * 2; // 2 minutes\nconst MAX_INSTALL_AGE = 1000 * 60 * 60 * 24; // 24 hours\nconst REMIND_LATER_DELAY = 1000 * 60 * 60 * 4; // 4 hours\nconst SKIP_SURVEY_KEY = 'ces/skipSurvey';\nconst REMIND_LATER_DATE_KEY = 'ces/remindLaterDate';\n\nclass CESContribution extends Disposable implements IWorkbenchContribution {\n\n\tprivate promptDelayer = this._register(new ThrottledDelayer<void>(0));\n\tprivate readonly tasExperimentService: IWorkbenchAssignmentService | undefined;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IWorkbenchAssignmentService tasExperimentService: IWorkbenchAssignmentService,\n\t) {\n\t\tsuper();\n\n\t\tthis.tasExperimentService = tasExperimentService;\n\n\t\tif (!productService.cesSurveyUrl) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst skipSurvey = storageService.get(SKIP_SURVEY_KEY, StorageScope.APPLICATION, '');\n\t\tif (skipSurvey) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.schedulePrompt();\n\t}\n\n\tprivate async promptUser() {\n\t\tconst isCandidate = await this.tasExperimentService?.getTreatment<boolean>('CESSurvey');\n\t\tif (!isCandidate) {\n\t\t\tthis.skipSurvey();\n\t\t\treturn;\n\t\t}\n\n\t\tconst sendTelemetry = (userReaction: 'accept' | 'remindLater' | 'neverShowAgain' | 'cancelled') => {\n\t\t\t/* __GDPR__\n\t\t\t\"cesSurvey:popup\" : {\n\t\t\t\t\"owner\": \"digitarald\",\n\t\t\t\t\"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t}\n\t\t\t*/\n\t\t\tthis.telemetryService.publicLog('cesSurvey:popup', { userReaction });\n\t\t};\n\n\t\tconst message = await this.tasExperimentService?.getTreatment<string>('CESSurveyMessage') ?? nls.localize('cesSurveyQuestion', 'Got a moment to help the VS Code team? Please tell us about your experience with VS Code so far.');\n\t\tconst button = await this.tasExperimentService?.getTreatment<string>('CESSurveyButton') ?? nls.localize('giveFeedback', \"Give Feedback\");\n\n\t\tconst notification = this.notificationService.prompt(\n\t\t\tSeverity.Info,\n\t\t\tmessage,\n\t\t\t[{\n\t\t\t\tlabel: button,\n\t\t\t\trun: () => {\n\t\t\t\t\tsendTelemetry('accept');\n\t\t\t\t\tlet surveyUrl = `${this.productService.cesSurveyUrl}?o=${encodeURIComponent(platform)}&v=${encodeURIComponent(this.productService.version)}&m=${encodeURIComponent(this.telemetryService.machineId)}`;\n\n\t\t\t\t\tconst usedParams = this.productService.surveys\n\t\t\t\t\t\t?.filter(surveyData => surveyData.surveyId && surveyData.languageId)\n\t\t\t\t\t\t// Counts provided by contrib/surveys/browser/languageSurveys\n\t\t\t\t\t\t.filter(surveyData => this.storageService.getNumber(`${surveyData.surveyId}.editedCount`, StorageScope.APPLICATION, 0) > 0)\n\t\t\t\t\t\t.map(surveyData => `${encodeURIComponent(surveyData.languageId)}Lang=1`)\n\t\t\t\t\t\t.join('&');\n\t\t\t\t\tif (usedParams) {\n\t\t\t\t\t\tsurveyUrl += `&${usedParams}`;\n\t\t\t\t\t}\n\t\t\t\t\tthis.openerService.open(URI.parse(surveyUrl));\n\t\t\t\t\tthis.skipSurvey();\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tlabel: nls.localize('remindLater', \"Remind Me Later\"),\n\t\t\t\trun: () => {\n\t\t\t\t\tsendTelemetry('remindLater');\n\t\t\t\t\tthis.storageService.store(REMIND_LATER_DATE_KEY, new Date().toUTCString(), StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\t\tthis.schedulePrompt();\n\t\t\t\t}\n\t\t\t}],\n\t\t\t{\n\t\t\t\tsticky: true,\n\t\t\t\tonCancel: () => {\n\t\t\t\t\tsendTelemetry('cancelled');\n\t\t\t\t\tthis.skipSurvey();\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\tawait Event.toPromise(notification.onDidClose);\n\t}\n\n\tprivate async schedulePrompt(): Promise<void> {\n\t\tlet waitTimeToShowSurvey = 0;\n\t\tconst remindLaterDate = this.storageService.get(REMIND_LATER_DATE_KEY, StorageScope.APPLICATION, '');\n\t\tif (remindLaterDate) {\n\t\t\tconst timeToRemind = new Date(remindLaterDate).getTime() + REMIND_LATER_DELAY - Date.now();\n\t\t\tif (timeToRemind > 0) {\n\t\t\t\twaitTimeToShowSurvey = timeToRemind;\n\t\t\t}\n\t\t} else {\n\t\t\tconst timeFromInstall = Date.now() - new Date(this.telemetryService.firstSessionDate).getTime();\n\t\t\tconst isNewInstall = !isNaN(timeFromInstall) && timeFromInstall < MAX_INSTALL_AGE;\n\n\t\t\t// Installation is older than MAX_INSTALL_AGE\n\t\t\tif (!isNewInstall) {\n\t\t\t\tthis.skipSurvey();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (timeFromInstall < WAIT_TIME_TO_SHOW_SURVEY) {\n\t\t\t\twaitTimeToShowSurvey = WAIT_TIME_TO_SHOW_SURVEY - timeFromInstall;\n\t\t\t}\n\t\t}\n\t\t/* __GDPR__\n\t\t\"cesSurvey:schedule\" : {\n\t\t\t\"owner\": \"digitarald\"\n\t\t}\n\t\t*/\n\t\tthis.telemetryService.publicLog('cesSurvey:schedule');\n\n\t\tthis.promptDelayer.trigger(async () => {\n\t\t\tawait this.promptUser();\n\t\t}, Math.max(waitTimeToShowSurvey, MIN_WAIT_TIME_TO_SHOW_SURVEY));\n\t}\n\n\tprivate skipSurvey(): void {\n\t\tthis.storageService.store(SKIP_SURVEY_KEY, this.productService.version, StorageScope.APPLICATION, StorageTarget.USER);\n\t}\n}\n\nif (language === 'en') {\n\tconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\n\tworkbenchRegistry.registerWorkbenchContribution(CESContribution, LifecyclePhase.Restored);\n}\n"]}