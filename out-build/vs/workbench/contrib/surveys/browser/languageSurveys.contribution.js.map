{"version":3,"sources":["vs/workbench/contrib/surveys/browser/languageSurveys.contribution.ts"],"names":[],"mappings":"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","file":"languageSurveys.contribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { language } from 'vs/base/common/platform';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { IWorkbenchContributionsRegistry, IWorkbenchContribution, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { ISurveyData } from 'vs/base/common/product';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { Severity, INotificationService } from 'vs/platform/notification/common/notification';\nimport { ITextFileService, ITextFileEditorModel } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { URI } from 'vs/base/common/uri';\nimport { platform } from 'vs/base/common/process';\nimport { RunOnceWorker } from 'vs/base/common/async';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\n\nclass LanguageSurvey extends Disposable {\n\n\tconstructor(\n\t\tdata: ISurveyData,\n\t\tstorageService: IStorageService,\n\t\tnotificationService: INotificationService,\n\t\ttelemetryService: ITelemetryService,\n\t\tlanguageService: ILanguageService,\n\t\ttextFileService: ITextFileService,\n\t\topenerService: IOpenerService,\n\t\tproductService: IProductService\n\t) {\n\t\tsuper();\n\n\t\tconst SESSION_COUNT_KEY = `${data.surveyId}.sessionCount`;\n\t\tconst LAST_SESSION_DATE_KEY = `${data.surveyId}.lastSessionDate`;\n\t\tconst SKIP_VERSION_KEY = `${data.surveyId}.skipVersion`;\n\t\tconst IS_CANDIDATE_KEY = `${data.surveyId}.isCandidate`;\n\t\tconst EDITED_LANGUAGE_COUNT_KEY = `${data.surveyId}.editedCount`;\n\t\tconst EDITED_LANGUAGE_DATE_KEY = `${data.surveyId}.editedDate`;\n\n\t\tconst skipVersion = storageService.get(SKIP_VERSION_KEY, StorageScope.APPLICATION, '');\n\t\tif (skipVersion) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst date = new Date().toDateString();\n\n\t\tif (storageService.getNumber(EDITED_LANGUAGE_COUNT_KEY, StorageScope.APPLICATION, 0) < data.editCount) {\n\n\t\t\t// Process model-save event every 250ms to reduce load\n\t\t\tconst onModelsSavedWorker = this._register(new RunOnceWorker<ITextFileEditorModel>(models => {\n\t\t\t\tmodels.forEach(m => {\n\t\t\t\t\tif (m.getLanguageId() === data.languageId && date !== storageService.get(EDITED_LANGUAGE_DATE_KEY, StorageScope.APPLICATION)) {\n\t\t\t\t\t\tconst editedCount = storageService.getNumber(EDITED_LANGUAGE_COUNT_KEY, StorageScope.APPLICATION, 0) + 1;\n\t\t\t\t\t\tstorageService.store(EDITED_LANGUAGE_COUNT_KEY, editedCount, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\t\t\tstorageService.store(EDITED_LANGUAGE_DATE_KEY, date, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}, 250));\n\n\t\t\tthis._register(textFileService.files.onDidSave(e => onModelsSavedWorker.work(e.model)));\n\t\t}\n\n\t\tconst lastSessionDate = storageService.get(LAST_SESSION_DATE_KEY, StorageScope.APPLICATION, new Date(0).toDateString());\n\t\tif (date === lastSessionDate) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst sessionCount = storageService.getNumber(SESSION_COUNT_KEY, StorageScope.APPLICATION, 0) + 1;\n\t\tstorageService.store(LAST_SESSION_DATE_KEY, date, StorageScope.APPLICATION, StorageTarget.USER);\n\t\tstorageService.store(SESSION_COUNT_KEY, sessionCount, StorageScope.APPLICATION, StorageTarget.USER);\n\n\t\tif (sessionCount < 9) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (storageService.getNumber(EDITED_LANGUAGE_COUNT_KEY, StorageScope.APPLICATION, 0) < data.editCount) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isCandidate = storageService.getBoolean(IS_CANDIDATE_KEY, StorageScope.APPLICATION, false)\n\t\t\t|| Math.random() < data.userProbability;\n\n\t\tstorageService.store(IS_CANDIDATE_KEY, isCandidate, StorageScope.APPLICATION, StorageTarget.USER);\n\n\t\tif (!isCandidate) {\n\t\t\tstorageService.store(SKIP_VERSION_KEY, productService.version, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\treturn;\n\t\t}\n\n\t\tnotificationService.prompt(\n\t\t\tSeverity.Info,\n\t\t\tlocalize('helpUs', \"Help us improve our support for {0}\", languageService.getLanguageName(data.languageId) ?? data.languageId),\n\t\t\t[{\n\t\t\t\tlabel: localize('takeShortSurvey', \"Take Short Survey\"),\n\t\t\t\trun: () => {\n\t\t\t\t\ttelemetryService.publicLog(`${data.surveyId}.survey/takeShortSurvey`);\n\t\t\t\t\topenerService.open(URI.parse(`${data.surveyUrl}?o=${encodeURIComponent(platform)}&v=${encodeURIComponent(productService.version)}&m=${encodeURIComponent(telemetryService.machineId)}`));\n\t\t\t\t\tstorageService.store(IS_CANDIDATE_KEY, false, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\t\tstorageService.store(SKIP_VERSION_KEY, productService.version, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tlabel: localize('remindLater', \"Remind Me Later\"),\n\t\t\t\trun: () => {\n\t\t\t\t\ttelemetryService.publicLog(`${data.surveyId}.survey/remindMeLater`);\n\t\t\t\t\tstorageService.store(SESSION_COUNT_KEY, sessionCount - 3, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tlabel: localize('neverAgain', \"Don't Show Again\"),\n\t\t\t\tisSecondary: true,\n\t\t\t\trun: () => {\n\t\t\t\t\ttelemetryService.publicLog(`${data.surveyId}.survey/dontShowAgain`);\n\t\t\t\t\tstorageService.store(IS_CANDIDATE_KEY, false, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\t\tstorageService.store(SKIP_VERSION_KEY, productService.version, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\t}\n\t\t\t}],\n\t\t\t{ sticky: true }\n\t\t);\n\t}\n}\n\nclass LanguageSurveysContribution implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService\n\t) {\n\t\tthis.handleSurveys();\n\t}\n\n\tprivate async handleSurveys() {\n\t\tif (!this.productService.surveys) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Make sure to wait for installed extensions\n\t\t// being registered to show notifications\n\t\t// properly (https://github.com/microsoft/vscode/issues/121216)\n\t\tawait this.extensionService.whenInstalledExtensionsRegistered();\n\n\t\t// Handle surveys\n\t\tthis.productService.surveys\n\t\t\t.filter(surveyData => surveyData.surveyId && surveyData.editCount && surveyData.languageId && surveyData.surveyUrl && surveyData.userProbability)\n\t\t\t.map(surveyData => new LanguageSurvey(surveyData, this.storageService, this.notificationService, this.telemetryService, this.languageService, this.textFileService, this.openerService, this.productService));\n\t}\n}\n\nif (language === 'en') {\n\tconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\n\tworkbenchRegistry.registerWorkbenchContribution(LanguageSurveysContribution, LifecyclePhase.Restored);\n}\n"]}