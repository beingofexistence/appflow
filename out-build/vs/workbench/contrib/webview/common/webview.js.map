{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/webview/common/webview.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAWhG;;;;;OAKG;IACU,QAAA,IAAI,GAAsB,gBAAgB,CAAC;IAE3C,QAAA,IAAI,GAA2B,mBAAmB,YAAI,EAAqB,CAAC;IAE5E,QAAA,IAAI,GAAsB,oBAAoB,YAAI,EAAqB,CAAC;IAErF;;;;;;;;;;;;OAYG;IACH,SAAgB,IAAI,CAAS,QAAa,EAAE,UAA8B;QACzE,IAAI,QAAQ,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,IAAI,QAAQ,CAAC,MAAM,KAAK,iBAAO,CAAC,KAAK,EAAE;YAC1E,OAAO,QAAQ,CAAC;SAChB;QAED,IAAI,UAAU,IAAI,UAAU,CAAC,SAAS,IAAI,UAAU,CAAC,QAAQ,IAAI,QAAQ,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,EAAE;YAClG,QAAQ,GAAG,SAAG,CAAC,IAAI,CAAC;gBACnB,MAAM,EAAE,iBAAO,CAAC,YAAY;gBAC5B,SAAS,EAAE,UAAU,CAAC,SAAS;gBAC/B,IAAI,EAAE,QAAQ,CAAC,IAAI;aACnB,CAAC,CAAC;SACH;QAED,OAAO,SAAG,CAAC,IAAI,CAAC;YACf,MAAM,EAAE,iBAAO,CAAC,KAAK;YACrB,SAAS,EAAE,GAAG,QAAQ,CAAC,MAAM,IAAI,eAAe,CAAC,QAAQ,CAAC,SAAS,CAAC,IAAI,YAAI,EAA0B;YACtG,IAAI,EAAE,QAAQ,CAAC,IAAI;YACnB,QAAQ,EAAE,QAAQ,CAAC,QAAQ;YAC3B,KAAK,EAAE,QAAQ,CAAC,KAAK;SACrB,CAAC,CAAC;IACJ,CAAC;IApBD,oBAoBC;IAED,SAAS,eAAe,CAAC,SAAiB;QACzC,OAAO,SAAS,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE;YACrC,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAChC,IACC,CAAC,IAAI,uBAAc,IAAI,IAAI,wBAAc,CAAC;mBACvC,CAAC,IAAI,uBAAc,IAAI,IAAI,uBAAc,CAAC;mBAC1C,CAAC,IAAI,4BAAmB,IAAI,IAAI,4BAAmB,CAAC,EACtD;gBACD,OAAO,IAAI,CAAC;aACZ;YACD,OAAO,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,SAAgB,IAAI,CAAY,SAAiB;QAChD,OAAO,SAAS,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;IACnG,CAAC;IAFD,oBAEC","file":"webview.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\n\nexport interface WebviewRemoteInfo {\n\treadonly isRemote: boolean;\n\treadonly authority: string | undefined;\n}\n\n/**\n * Root from which resources in webviews are loaded.\n *\n * This is hardcoded because we never expect to actually hit it. Instead these requests\n * should always go to a service worker.\n */\nexport const webviewResourceBaseHost = 'vscode-cdn.net';\n\nexport const webviewRootResourceAuthority = `vscode-resource.${webviewResourceBaseHost}`;\n\nexport const webviewGenericCspSource = `'self' https://*.${webviewResourceBaseHost}`;\n\n/**\n * Construct a uri that can load resources inside a webview\n *\n * We encode the resource component of the uri so that on the main thread\n * we know where to load the resource from (remote or truly local):\n *\n * ```txt\n * ${scheme}+${resource-authority}.vscode-resource.vscode-cdn.net/${path}\n * ```\n *\n * @param resource Uri of the resource to load.\n * @param remoteInfo Optional information about the remote that specifies where `resource` should be resolved from.\n */\nexport function asWebviewUri(resource: URI, remoteInfo?: WebviewRemoteInfo): URI {\n\tif (resource.scheme === Schemas.http || resource.scheme === Schemas.https) {\n\t\treturn resource;\n\t}\n\n\tif (remoteInfo && remoteInfo.authority && remoteInfo.isRemote && resource.scheme === Schemas.file) {\n\t\tresource = URI.from({\n\t\t\tscheme: Schemas.vscodeRemote,\n\t\t\tauthority: remoteInfo.authority,\n\t\t\tpath: resource.path,\n\t\t});\n\t}\n\n\treturn URI.from({\n\t\tscheme: Schemas.https,\n\t\tauthority: `${resource.scheme}+${encodeAuthority(resource.authority)}.${webviewRootResourceAuthority}`,\n\t\tpath: resource.path,\n\t\tfragment: resource.fragment,\n\t\tquery: resource.query,\n\t});\n}\n\nfunction encodeAuthority(authority: string): string {\n\treturn authority.replace(/./g, char => {\n\t\tconst code = char.charCodeAt(0);\n\t\tif (\n\t\t\t(code >= CharCode.a && code <= CharCode.z)\n\t\t\t|| (code >= CharCode.A && code <= CharCode.Z)\n\t\t\t|| (code >= CharCode.Digit0 && code <= CharCode.Digit9)\n\t\t) {\n\t\t\treturn char;\n\t\t}\n\t\treturn '-' + code.toString(16).padStart(4, '0');\n\t});\n}\n\nexport function decodeAuthority(authority: string) {\n\treturn authority.replace(/-([0-9a-f]{4})/g, (_, code) => String.fromCharCode(parseInt(code, 16)));\n}\n"]}