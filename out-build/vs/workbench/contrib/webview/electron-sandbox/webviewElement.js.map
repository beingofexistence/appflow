{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/webview/electron-sandbox/webviewElement.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IA0BhG;;OAEG;IACI,IAAM,IAAI,GAAV,MAAM,IAAuB,SAAQ,qBAAI;QAU/C,IAAuB,CAAC,KAAY,OAAO,UAAU,CAAC,CAAC,CAAC;QAExD,YACC,QAAyB,EACzB,wBAA8B,EACT,kBAAuB,EAC5B,aAAkB,EACpB,WAAgB,EACX,gBAAqB,EACV,kBAAuB,EACpB,8BAAmC,EACvD,UAAe,EACL,oBAAyB,EAC3B,kBAAwB,EACvB,mBAAwB,EAC1B,EAAyC,EACtC,oBAAyB,EACzB,oBAAyB;YAEhD,KAAK,CAAC,QAAQ,EAAE,wBAAwB,EACvC,oBAAoB,EAAE,kBAAkB,EAAE,mBAAmB,EAAE,kBAAkB,EACjF,WAAW,EAAE,UAAU,EAAE,8BAA8B,EAAE,gBAAgB,EAAE,aAAa,EAAE,oBAAoB,EAAE,oBAAoB,CAAC,CAAC;YANlG,OAAE,GAAF,EAAE,CAAsB;YArBtD,OAAE,GAAsB,KAAK,CAAC;YAIrB,OAAE,GAAe,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,CAAW,GAAG,CAAC,CAAC,CAAC;YAyBxE,IAAI,CAAC,EAAE,GAAwB,IAAI,uCAAI,CAA6B,oBAAoB,EAAE,kBAAkB,EAAE,EAAE,CAAiB,CAAC;YAElI,IAAI,CAAC,EAAE,GAAoB,kBAAY,CAAC,SAAS,CAAyB,kBAAkB,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;YAEpH,IAAI,QAAQ,CAAC,OAAO,CAAC,gBAAgB,EAAE;gBACtC,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAe,CAAC,UAAU,EAAE,EAAE;oBAClD,IAAI,IAAI,CAAC,EAAE,IAAc,IAAI,CAAC,EAAE,KAAqB,UAAU,EAAE;wBAChE,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;wBACrB,IAAI,CAAC,EAAE,GAAmB,UAAU,CAAC;qBACrC;gBACF,CAAC,CAAC,CAAC,CAAC;gBAEJ,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,EAAE,CAAkB,cAAc,CAAC,CAAC,MAAM,EAAE,EAAE;oBACjE,IAAI,CAAC,EAAE,CAAa,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;gBAC9C,CAAC,CAAC,CAAC,CAAC;aACJ;QACF,CAAC;QAEQ,OAAO;YACf,sDAAsD;YACtD,IAAI,CAAC,EAAE,CAAsB,OAAO,EAAE,CAAC;YAEvC,KAAK,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC;QAEkB,EAAE,CAAqB,QAAgB;YACzD,OAAO,GAAG,iBAAO,CAAC,aAAa,MAAM,QAAQ,EAAE,CAAC;QACjD,CAAC;QAEkB,EAAE,CAAa,MAA8B;YAC/D,mEAAmE;YACnE,6DAA6D;YAC7D,OAAO,IAAA,YAAG,EAAsC,MAAM,EAAE,CAAC,OAA4B,EAAE,EAAE;gBACxF,MAAM,WAAW,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC;gBAC9E,MAAM,GAAG,GAAG,IAAI,WAAW,CAAC,WAAW,CAAC,CAAC;gBACzC,MAAM,IAAI,GAAG,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC;gBACjC,IAAI,MAAM,GAAG,CAAC,CAAC;gBACf,KAAK,MAAM,OAAO,IAAI,OAAO,EAAE;oBAC9B,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;oBACjC,MAAM,IAAI,OAAO,CAAC,UAAU,CAAC;iBAC7B;gBACD,OAAO,GAAG,CAAC;YACZ,CAAC,CAAC,CAAC;QACJ,CAAC;QAED;;;;;;WAMG;QACa,IAAI,CAAC,KAAa,EAAE,QAAiB;YACpD,IAAI,CAAC,IAAI,CAAC,CAAC,EAAQ;gBAClB,OAAO;aACP;YAED,IAAI,CAAC,IAAI,CAAC,EAAE,EAAY;gBACvB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;aACvB;iBAAM;gBACN,gDAAgD;gBAChD,MAAM,OAAO,GAAuB,EAAE,OAAO,EAAE,CAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;gBAC9F,IAAI,CAAC,EAAE,CAAkB,WAAW,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,EAAE,CAAiB,QAAQ,EAAE,EAAE,IAAI,CAAC,CAAC,EAAG,KAAK,EAAE,OAAO,CAAC,CAAC;aAC9G;QACF,CAAC;QAEe,UAAU,CAAC,KAAa;YACvC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,CAAC,EAAQ;gBAC5B,OAAO;aACP;YAED,4CAA4C;YAC5C,MAAM,OAAO,GAAuB;gBACnC,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,IAAI;gBACd,SAAS,EAAE,KAAK;aAChB,CAAC;YAEF,IAAI,CAAC,EAAE,CAAa,OAAO,CAAC,GAAG,EAAE;gBAChC,IAAI,CAAC,EAAE,GAAa,IAAI,CAAC;gBACzB,IAAI,CAAC,EAAE,CAAkB,WAAW,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,EAAE,CAAiB,QAAQ,EAAE,EAAE,IAAI,CAAC,CAAC,EAAG,KAAK,EAAE,OAAO,CAAC,CAAC;YAC/G,CAAC,CAAC,CAAC;QACJ,CAAC;QAEe,QAAQ,CAAC,aAAuB;YAC/C,IAAI,CAAC,IAAI,CAAC,CAAC,EAAQ;gBAClB,OAAO;aACP;YACD,IAAI,CAAC,EAAE,CAAa,MAAM,EAAE,CAAC;YAC7B,IAAI,CAAC,EAAE,GAAa,KAAK,CAAC;YAC1B,IAAI,CAAC,EAAE,CAAkB,eAAe,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,EAAE,CAAiB,QAAQ,EAAE,EAAE,IAAI,CAAC,CAAC,EAAG;gBACjG,aAAa;aACb,CAAC,CAAC;YACH,IAAI,CAAC,EAAE,CAAa,IAAI,EAAE,CAAC;QAC5B,CAAC;QAEkB,EAAE,CAAgB,SAAkB;YACtD,KAAK,CAAC,EAAE,CAAgB,SAAS,CAAC,CAAC;YACnC,IAAI,SAAS,EAAE;gBACd,IAAI,CAAC,EAAE,CAAsB,QAAQ,EAAE,CAAC;aACxC;iBAAM;gBACN,IAAI,CAAC,EAAE,CAAsB,OAAO,EAAE,CAAC;aACvC;QACF,CAAC;KACD,CAAA;IAzIY,oBAAI;mBAAJ,IAAI;QAed,WAAA,iBAAG,CAAA;QACH,WAAA,YAAG,CAAA;QACH,WAAA,WAAG,CAAA;QACH,WAAA,eAAG,CAAA;QACH,WAAA,wBAAG,CAAA;QACH,WAAA,6BAAG,CAAA;QACH,WAAA,SAAG,CAAA;QACH,WAAA,mBAAG,CAAA;QACH,YAAA,yBAAI,CAAA;QACJ,YAAA,kBAAG,CAAA;QACH,YAAA,aAAI,CAAA;QACJ,YAAA,mBAAG,CAAA;QACH,YAAA,mBAAG,CAAA;OA3BO,IAAI,CAyIhB","file":"webviewElement.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Delayer } from 'vs/base/common/async';\nimport { VSBuffer, VSBufferReadableStream } from 'vs/base/common/buffer';\nimport { Schemas } from 'vs/base/common/network';\nimport { consumeStream } from 'vs/base/common/stream';\nimport { ProxyChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { IAccessibilityService } from 'vs/platform/accessibility/common/accessibility';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IMainProcessService } from 'vs/platform/ipc/common/mainProcessService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { INativeHostService } from 'vs/platform/native/common/native';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IRemoteAuthorityResolverService } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { ITunnelService } from 'vs/platform/tunnel/common/tunnel';\nimport { FindInFrameOptions, IWebviewManagerService } from 'vs/platform/webview/common/webviewManagerService';\nimport { WebviewThemeDataProvider } from 'vs/workbench/contrib/webview/browser/themeing';\nimport { WebviewInitInfo } from 'vs/workbench/contrib/webview/browser/webview';\nimport { WebviewElement } from 'vs/workbench/contrib/webview/browser/webviewElement';\nimport { WindowIgnoreMenuShortcutsManager } from 'vs/workbench/contrib/webview/electron-sandbox/windowIgnoreMenuShortcutsManager';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\n\n/**\n * Webview backed by an iframe but that uses Electron APIs to power the webview.\n */\nexport class ElectronWebviewElement extends WebviewElement {\n\n\tprivate readonly _webviewKeyboardHandler: WindowIgnoreMenuShortcutsManager;\n\n\tprivate _findStarted: boolean = false;\n\tprivate _cachedHtmlContent: string | undefined;\n\n\tprivate readonly _webviewMainService: IWebviewManagerService;\n\tprivate readonly _iframeDelayer = this._register(new Delayer<void>(200));\n\n\tprotected override get platform() { return 'electron'; }\n\n\tconstructor(\n\t\tinitInfo: WebviewInitInfo,\n\t\twebviewThemeDataProvider: WebviewThemeDataProvider,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@ITunnelService tunnelService: ITunnelService,\n\t\t@IFileService fileService: IFileService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IRemoteAuthorityResolverService remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@ILogService logService: ILogService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IMainProcessService mainProcessService: IMainProcessService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@INativeHostService private readonly _nativeHostService: INativeHostService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IAccessibilityService accessibilityService: IAccessibilityService,\n\t) {\n\t\tsuper(initInfo, webviewThemeDataProvider,\n\t\t\tconfigurationService, contextMenuService, notificationService, environmentService,\n\t\t\tfileService, logService, remoteAuthorityResolverService, telemetryService, tunnelService, instantiationService, accessibilityService);\n\n\t\tthis._webviewKeyboardHandler = new WindowIgnoreMenuShortcutsManager(configurationService, mainProcessService, _nativeHostService);\n\n\t\tthis._webviewMainService = ProxyChannel.toService<IWebviewManagerService>(mainProcessService.getChannel('webview'));\n\n\t\tif (initInfo.options.enableFindWidget) {\n\t\t\tthis._register(this.onDidHtmlChange((newContent) => {\n\t\t\t\tif (this._findStarted && this._cachedHtmlContent !== newContent) {\n\t\t\t\t\tthis.stopFind(false);\n\t\t\t\t\tthis._cachedHtmlContent = newContent;\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tthis._register(this._webviewMainService.onFoundInFrame((result) => {\n\t\t\t\tthis._hasFindResult.fire(result.matches > 0);\n\t\t\t}));\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\t// Make sure keyboard handler knows it closed (#71800)\n\t\tthis._webviewKeyboardHandler.didBlur();\n\n\t\tsuper.dispose();\n\t}\n\n\tprotected override webviewContentEndpoint(iframeId: string): string {\n\t\treturn `${Schemas.vscodeWebview}://${iframeId}`;\n\t}\n\n\tprotected override streamToBuffer(stream: VSBufferReadableStream): Promise<ArrayBufferLike> {\n\t\t// Join buffers from stream without using the Node.js backing pool.\n\t\t// This lets us transfer the resulting buffer to the webview.\n\t\treturn consumeStream<VSBuffer, ArrayBufferLike>(stream, (buffers: readonly VSBuffer[]) => {\n\t\t\tconst totalLength = buffers.reduce((prev, curr) => prev + curr.byteLength, 0);\n\t\t\tconst ret = new ArrayBuffer(totalLength);\n\t\t\tconst view = new Uint8Array(ret);\n\t\t\tlet offset = 0;\n\t\t\tfor (const element of buffers) {\n\t\t\t\tview.set(element.buffer, offset);\n\t\t\t\toffset += element.byteLength;\n\t\t\t}\n\t\t\treturn ret;\n\t\t});\n\t}\n\n\t/**\n\t * Webviews expose a stateful find API.\n\t * Successive calls to find will move forward or backward through onFindResults\n\t * depending on the supplied options.\n\t *\n\t * @param value The string to search for. Empty strings are ignored.\n\t */\n\tpublic override find(value: string, previous: boolean): void {\n\t\tif (!this.element) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._findStarted) {\n\t\t\tthis.updateFind(value);\n\t\t} else {\n\t\t\t// continuing the find, so set findNext to false\n\t\t\tconst options: FindInFrameOptions = { forward: !previous, findNext: false, matchCase: false };\n\t\t\tthis._webviewMainService.findInFrame({ windowId: this._nativeHostService.windowId }, this.id, value, options);\n\t\t}\n\t}\n\n\tpublic override updateFind(value: string) {\n\t\tif (!value || !this.element) {\n\t\t\treturn;\n\t\t}\n\n\t\t// FindNext must be true for a first request\n\t\tconst options: FindInFrameOptions = {\n\t\t\tforward: true,\n\t\t\tfindNext: true,\n\t\t\tmatchCase: false\n\t\t};\n\n\t\tthis._iframeDelayer.trigger(() => {\n\t\t\tthis._findStarted = true;\n\t\t\tthis._webviewMainService.findInFrame({ windowId: this._nativeHostService.windowId }, this.id, value, options);\n\t\t});\n\t}\n\n\tpublic override stopFind(keepSelection?: boolean): void {\n\t\tif (!this.element) {\n\t\t\treturn;\n\t\t}\n\t\tthis._iframeDelayer.cancel();\n\t\tthis._findStarted = false;\n\t\tthis._webviewMainService.stopFindInFrame({ windowId: this._nativeHostService.windowId }, this.id, {\n\t\t\tkeepSelection\n\t\t});\n\t\tthis._onDidStopFind.fire();\n\t}\n\n\tprotected override handleFocusChange(isFocused: boolean): void {\n\t\tsuper.handleFocusChange(isFocused);\n\t\tif (isFocused) {\n\t\t\tthis._webviewKeyboardHandler.didFocus();\n\t\t} else {\n\t\t\tthis._webviewKeyboardHandler.didBlur();\n\t\t}\n\t}\n}\n"]}