{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/webview/browser/webviewService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUzF,IAAM,IAAI,GAAV,MAAM,IAAe,SAAQ,eAAG;QAKtC,YACwB,CAA6C;YAEpE,KAAK,EAAE,CAAC;YAFkC,MAAC,GAAD,CAAC,CAAyB;YAiB7D,MAAC,GAAW,IAAI,GAAG,EAAY,CAAC;YAMvB,MAAC,GAA2B,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAA4B,CAAC,CAAC;YACjF,6BAAwB,GAAG,IAAI,CAAC,CAAC,CAAyB,KAAK,CAAC;YArB/E,IAAI,CAAC,CAAC,GAA2B,IAAI,CAAC,CAAC,CAAqB,cAAc,CAAC,eAAI,CAAqB,CAAC;QACtG,CAAC;QAID,IAAW,aAAa,KAAK,OAAO,IAAI,CAAC,CAAC,CAAc,CAAC,CAAC;QAElD,CAAC,CAAoB,KAA2B;YACvD,IAAI,KAAK,KAAK,IAAI,CAAC,CAAC,EAAe;gBAClC,IAAI,CAAC,CAAC,GAAgB,KAAK,CAAC;gBAC5B,IAAI,CAAC,CAAC,CAAyB,IAAI,CAAC,KAAK,CAAC,CAAC;aAC3C;QACF,CAAC;QAID,IAAW,QAAQ;YAClB,OAAO,IAAI,CAAC,CAAC,CAAS,MAAM,EAAE,CAAC;QAChC,CAAC;QAKD,oBAAoB,CAAC,QAAyB;YAC7C,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAqB,cAAc,CAAC,qBAAI,EAAY,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAyB,CAAC;YACpH,IAAI,CAAC,CAAC,CAAkB,OAAO,CAAC,CAAC;YACjC,OAAO,OAAO,CAAC;QAChB,CAAC;QAED,oBAAoB,CAAC,QAAyB;YAC7C,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAqB,cAAc,CAAC,qBAAI,EAAY,QAAQ,CAAC,CAAC;YACpF,IAAI,CAAC,CAAC,CAAkB,OAAO,CAAC,CAAC;YACjC,OAAO,OAAO,CAAC;QAChB,CAAC;QAES,CAAC,CAAkB,OAAiB;YAC7C,IAAI,CAAC,CAAC,CAAS,GAAG,CAAC,OAAO,CAAC,CAAC;YAE5B,OAAO,CAAC,UAAU,CAAC,GAAG,EAAE;gBACvB,IAAI,CAAC,CAAC,CAAoB,OAAO,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC;YAEH,MAAM,MAAM,GAAG,GAAG,EAAE;gBACnB,IAAI,IAAI,CAAC,CAAC,KAAkB,OAAO,EAAE;oBACpC,IAAI,CAAC,CAAC,CAAoB,SAAS,CAAC,CAAC;iBACrC;YACF,CAAC,CAAC;YAEF,OAAO,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;YAC1B,OAAO,CAAC,YAAY,CAAC,GAAG,EAAE;gBACzB,MAAM,EAAE,CAAC;gBACT,IAAI,CAAC,CAAC,CAAS,MAAM,CAAC,OAAO,CAAC,CAAC;YAChC,CAAC,CAAC,CAAC;QACJ,CAAC;KACD,CAAA;IA/DY,oBAAI;mBAAJ,IAAI;QAMd,WAAA,mBAAG,CAAA;OANO,IAAI,CA+DhB","file":"webviewService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { WebviewThemeDataProvider } from 'vs/workbench/contrib/webview/browser/themeing';\nimport { IOverlayWebview, IWebview, IWebviewElement, IWebviewService, WebviewInitInfo } from 'vs/workbench/contrib/webview/browser/webview';\nimport { WebviewElement } from 'vs/workbench/contrib/webview/browser/webviewElement';\nimport { OverlayWebview } from './overlayWebview';\n\nexport class WebviewService extends Disposable implements IWebviewService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprotected readonly _webviewThemeDataProvider: WebviewThemeDataProvider;\n\n\tconstructor(\n\t\t@IInstantiationService protected readonly _instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t\tthis._webviewThemeDataProvider = this._instantiationService.createInstance(WebviewThemeDataProvider);\n\t}\n\n\tprivate _activeWebview?: IWebview;\n\n\tpublic get activeWebview() { return this._activeWebview; }\n\n\tprivate _updateActiveWebview(value: IWebview | undefined) {\n\t\tif (value !== this._activeWebview) {\n\t\t\tthis._activeWebview = value;\n\t\t\tthis._onDidChangeActiveWebview.fire(value);\n\t\t}\n\t}\n\n\tprivate _webviews = new Set<IWebview>();\n\n\tpublic get webviews(): Iterable<IWebview> {\n\t\treturn this._webviews.values();\n\t}\n\n\tprivate readonly _onDidChangeActiveWebview = this._register(new Emitter<IWebview | undefined>());\n\tpublic readonly onDidChangeActiveWebview = this._onDidChangeActiveWebview.event;\n\n\tcreateWebviewElement(initInfo: WebviewInitInfo): IWebviewElement {\n\t\tconst webview = this._instantiationService.createInstance(WebviewElement, initInfo, this._webviewThemeDataProvider);\n\t\tthis.registerNewWebview(webview);\n\t\treturn webview;\n\t}\n\n\tcreateWebviewOverlay(initInfo: WebviewInitInfo): IOverlayWebview {\n\t\tconst webview = this._instantiationService.createInstance(OverlayWebview, initInfo);\n\t\tthis.registerNewWebview(webview);\n\t\treturn webview;\n\t}\n\n\tprotected registerNewWebview(webview: IWebview) {\n\t\tthis._webviews.add(webview);\n\n\t\twebview.onDidFocus(() => {\n\t\t\tthis._updateActiveWebview(webview);\n\t\t});\n\n\t\tconst onBlur = () => {\n\t\t\tif (this._activeWebview === webview) {\n\t\t\t\tthis._updateActiveWebview(undefined);\n\t\t\t}\n\t\t};\n\n\t\twebview.onDidBlur(onBlur);\n\t\twebview.onDidDispose(() => {\n\t\t\tonBlur();\n\t\t\tthis._webviews.delete(webview);\n\t\t});\n\t}\n}\n"]}