{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/webview/browser/webviewFindWidget.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAmBzF,IAAM,IAAI,GAAV,MAAM,IAAkB,SAAQ,uBAAI;QAChC,KAAK,CAAC,CAAC,CAAe,WAAqB;YACpD,OAAO,SAAS,CAAC;QAClB,CAAC;QAID,YACkB,EAA8B,EAC1B,kBAAuB,EACxB,iBAAsB,EACtB,iBAAsB;YAE1C,KAAK,CAAC;gBACL,qBAAqB,EAAE,KAAK;gBAC5B,uBAAuB,EAAE,EAAE,CAAQ,uBAAuB;gBAC1D,UAAU,EAAE,IAAI;aAChB,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,iBAAiB,CAAC,CAAC;YAT5C,OAAE,GAAF,EAAE,CAA4B;YAU/C,IAAI,CAAC,EAAE,GAAmB,cAAI,CAA2C,MAAM,CAAC,iBAAiB,CAAC,CAAC;YAEnG,IAAI,CAAC,CAAC,CAAS,EAAE,CAAQ,aAAa,CAAC,SAAS,CAAC,EAAE;gBAClD,IAAI,CAAC,EAAE,CAAY,SAAS,CAAC,CAAC;gBAC9B,IAAI,CAAC,EAAE,EAAY,CAAC;YACrB,CAAC,CAAC,CAAC,CAAC;YAEJ,IAAI,CAAC,CAAC,CAAS,EAAE,CAAQ,aAAa,CAAC,GAAG,EAAE;gBAC3C,IAAI,CAAC,EAAE,CAAY,KAAK,CAAC,CAAC;YAC3B,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAEM,IAAI,CAAC,QAAiB;YAC5B,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAU;YAC5B,IAAI,GAAG,EAAE;gBACR,IAAI,CAAC,EAAE,CAAQ,IAAI,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;aACnC;QACF,CAAC;QAEe,IAAI,CAAC,QAAQ,GAAG,IAAI;YACnC,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACrB,IAAI,CAAC,EAAE,CAAQ,QAAQ,CAAC,IAAI,CAAC,CAAC;YAC9B,IAAI,CAAC,EAAE,CAAQ,KAAK,EAAE,CAAC;QACxB,CAAC;QAES,CAAC;YACV,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAU;YAC5B,IAAI,GAAG,EAAE;gBACR,IAAI,CAAC,EAAE,CAAQ,UAAU,CAAC,GAAG,CAAC,CAAC;aAC/B;iBAAM;gBACN,IAAI,CAAC,EAAE,CAAQ,QAAQ,CAAC,KAAK,CAAC,CAAC;aAC/B;YACD,OAAO,KAAK,CAAC;QACd,CAAC;QAES,CAAC;YACV,IAAI,CAAC,EAAE,CAAiB,GAAG,CAAC,IAAI,CAAC,CAAC;QACnC,CAAC;QAES,CAAC;YACV,IAAI,CAAC,EAAE,CAAiB,KAAK,EAAE,CAAC;QACjC,CAAC;QAES,CAAC,KAAiC,CAAC;QAEnC,CAAC,KAAgC,CAAC;QAE5C,SAAS,KAAK,CAAC;KACf,CAAA;IAlEY,oBAAI;mBAAJ,IAAI;QASd,WAAA,iBAAG,CAAA;QACH,WAAA,gBAAG,CAAA;QACH,WAAA,gBAAG,CAAA;OAXO,IAAI,CAkEhB","file":"webviewFindWidget.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IContextViewService } from 'vs/platform/contextview/browser/contextView';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { SimpleFindWidget } from 'vs/workbench/contrib/codeEditor/browser/find/simpleFindWidget';\nimport { KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_FOCUSED } from 'vs/workbench/contrib/webview/browser/webview';\n\nexport interface WebviewFindDelegate {\n\treadonly hasFindResult: Event<boolean>;\n\treadonly onDidStopFind: Event<void>;\n\treadonly checkImeCompletionState: boolean;\n\tfind(value: string, previous: boolean): void;\n\tupdateFind(value: string): void;\n\tstopFind(keepSelection?: boolean): void;\n\tfocus(): void;\n}\n\nexport class WebviewFindWidget extends SimpleFindWidget {\n\tprotected async _getResultCount(dataChanged?: boolean): Promise<{ resultIndex: number; resultCount: number } | undefined> {\n\t\treturn undefined;\n\t}\n\n\tprotected readonly _findWidgetFocused: IContextKey<boolean>;\n\n\tconstructor(\n\t\tprivate readonly _delegate: WebviewFindDelegate,\n\t\t@IContextViewService contextViewService: IContextViewService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IKeybindingService keybindingService: IKeybindingService\n\t) {\n\t\tsuper({\n\t\t\tshowCommonFindToggles: false,\n\t\t\tcheckImeCompletionState: _delegate.checkImeCompletionState,\n\t\t\tenableSash: true,\n\t\t}, contextViewService, contextKeyService, keybindingService);\n\t\tthis._findWidgetFocused = KEYBINDING_CONTEXT_WEBVIEW_FIND_WIDGET_FOCUSED.bindTo(contextKeyService);\n\n\t\tthis._register(_delegate.hasFindResult(hasResult => {\n\t\t\tthis.updateButtons(hasResult);\n\t\t\tthis.focusFindBox();\n\t\t}));\n\n\t\tthis._register(_delegate.onDidStopFind(() => {\n\t\t\tthis.updateButtons(false);\n\t\t}));\n\t}\n\n\tpublic find(previous: boolean) {\n\t\tconst val = this.inputValue;\n\t\tif (val) {\n\t\t\tthis._delegate.find(val, previous);\n\t\t}\n\t}\n\n\tpublic override hide(animated = true) {\n\t\tsuper.hide(animated);\n\t\tthis._delegate.stopFind(true);\n\t\tthis._delegate.focus();\n\t}\n\n\tprotected _onInputChanged(): boolean {\n\t\tconst val = this.inputValue;\n\t\tif (val) {\n\t\t\tthis._delegate.updateFind(val);\n\t\t} else {\n\t\t\tthis._delegate.stopFind(false);\n\t\t}\n\t\treturn false;\n\t}\n\n\tprotected _onFocusTrackerFocus() {\n\t\tthis._findWidgetFocused.set(true);\n\t}\n\n\tprotected _onFocusTrackerBlur() {\n\t\tthis._findWidgetFocused.reset();\n\t}\n\n\tprotected _onFindInputFocusTrackerFocus() { }\n\n\tprotected _onFindInputFocusTrackerBlur() { }\n\n\tfindFirst() { }\n}\n"]}