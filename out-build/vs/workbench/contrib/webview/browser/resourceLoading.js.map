{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/webview/browser/resourceLoading.ts"],"names":[],"mappings":"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","file":"resourceLoading.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBufferReadableStream } from 'vs/base/common/buffer';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { isUNC } from 'vs/base/common/extpath';\nimport { Schemas } from 'vs/base/common/network';\nimport { normalize, sep } from 'vs/base/common/path';\nimport { URI } from 'vs/base/common/uri';\nimport { FileOperationError, FileOperationResult, IFileService, IWriteFileOptions } from 'vs/platform/files/common/files';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { getWebviewContentMimeType } from 'vs/platform/webview/common/mimeTypes';\n\nexport namespace WebviewResourceResponse {\n\texport enum Type { Success, Failed, AccessDenied, NotModified }\n\n\texport class StreamSuccess {\n\t\treadonly type = Type.Success;\n\n\t\tconstructor(\n\t\t\tpublic readonly stream: VSBufferReadableStream,\n\t\t\tpublic readonly etag: string | undefined,\n\t\t\tpublic readonly mtime: number | undefined,\n\t\t\tpublic readonly mimeType: string,\n\t\t) { }\n\t}\n\n\texport const Failed = { type: Type.Failed } as const;\n\texport const AccessDenied = { type: Type.AccessDenied } as const;\n\n\texport class NotModified {\n\t\treadonly type = Type.NotModified;\n\n\t\tconstructor(\n\t\t\tpublic readonly mimeType: string,\n\t\t\tpublic readonly mtime: number | undefined,\n\t\t) { }\n\t}\n\n\texport type StreamResponse = StreamSuccess | typeof Failed | typeof AccessDenied | NotModified;\n}\n\nexport async function loadLocalResource(\n\trequestUri: URI,\n\toptions: {\n\t\tifNoneMatch: string | undefined;\n\t\troots: ReadonlyArray<URI>;\n\t},\n\tfileService: IFileService,\n\tlogService: ILogService,\n\ttoken: CancellationToken,\n): Promise<WebviewResourceResponse.StreamResponse> {\n\tlogService.debug(`loadLocalResource - begin. requestUri=${requestUri}`);\n\n\tconst resourceToLoad = getResourceToLoad(requestUri, options.roots);\n\n\tlogService.debug(`loadLocalResource - found resource to load. requestUri=${requestUri}, resourceToLoad=${resourceToLoad}`);\n\n\tif (!resourceToLoad) {\n\t\treturn WebviewResourceResponse.AccessDenied;\n\t}\n\n\tconst mime = getWebviewContentMimeType(requestUri); // Use the original path for the mime\n\n\ttry {\n\t\tconst result = await fileService.readFileStream(resourceToLoad, { etag: options.ifNoneMatch }, token);\n\t\treturn new WebviewResourceResponse.StreamSuccess(result.value, result.etag, result.mtime, mime);\n\t} catch (err) {\n\t\tif (err instanceof FileOperationError) {\n\t\t\tconst result = err.fileOperationResult;\n\n\t\t\t// NotModified status is expected and can be handled gracefully\n\t\t\tif (result === FileOperationResult.FILE_NOT_MODIFIED_SINCE) {\n\t\t\t\treturn new WebviewResourceResponse.NotModified(mime, (err.options as IWriteFileOptions | undefined)?.mtime);\n\t\t\t}\n\t\t}\n\n\t\t// Otherwise the error is unexpected.\n\t\tlogService.debug(`loadLocalResource - Error using fileReader. requestUri=${requestUri}`);\n\t\tconsole.log(err);\n\n\t\treturn WebviewResourceResponse.Failed;\n\t}\n}\n\nfunction getResourceToLoad(\n\trequestUri: URI,\n\troots: ReadonlyArray<URI>,\n): URI | undefined {\n\tfor (const root of roots) {\n\t\tif (containsResource(root, requestUri)) {\n\t\t\treturn normalizeResourcePath(requestUri);\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\nfunction containsResource(root: URI, resource: URI): boolean {\n\tif (root.scheme !== resource.scheme) {\n\t\treturn false;\n\t}\n\n\tlet resourceFsPath = normalize(resource.fsPath);\n\tlet rootPath = normalize(root.fsPath + (root.fsPath.endsWith(sep) ? '' : sep));\n\n\tif (isUNC(root.fsPath) && isUNC(resource.fsPath)) {\n\t\trootPath = rootPath.toLowerCase();\n\t\tresourceFsPath = resourceFsPath.toLowerCase();\n\t}\n\n\treturn resourceFsPath.startsWith(rootPath);\n}\n\nfunction normalizeResourcePath(resource: URI): URI {\n\t// Rewrite remote uris to a path that the remote file system can understand\n\tif (resource.scheme === Schemas.vscodeRemote) {\n\t\treturn URI.from({\n\t\t\tscheme: Schemas.vscodeRemote,\n\t\t\tauthority: resource.authority,\n\t\t\tpath: '/vscode-resource',\n\t\t\tquery: JSON.stringify({\n\t\t\t\trequestResourcePath: resource.path\n\t\t\t})\n\t\t});\n\t}\n\treturn resource;\n}\n"]}