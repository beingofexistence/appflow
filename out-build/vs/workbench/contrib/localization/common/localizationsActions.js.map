{"version":3,"sources":["vs/workbench/contrib/localization/common/localizationsActions.ts"],"names":[],"mappings":"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","file":"localizationsActions.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { IQuickInputService, IQuickPickSeparator } from 'vs/platform/quickinput/common/quickInput';\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { Action2, MenuId } from 'vs/platform/actions/common/actions';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { ILanguagePackItem, ILanguagePackService } from 'vs/platform/languagePacks/common/languagePacks';\nimport { ILocaleService } from 'vs/workbench/services/localization/common/locale';\nimport { IExtensionsWorkbenchService } from 'vs/workbench/contrib/extensions/common/extensions';\n\nexport class ConfigureDisplayLanguageAction extends Action2 {\n\tpublic static readonly ID = 'workbench.action.configureLocale';\n\tpublic static readonly LABEL = localize('configureLocale', \"Configure Display Language\");\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ConfigureDisplayLanguageAction.ID,\n\t\t\ttitle: { original: 'Configure Display Language', value: ConfigureDisplayLanguageAction.LABEL },\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.CommandPalette\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst languagePackService: ILanguagePackService = accessor.get(ILanguagePackService);\n\t\tconst quickInputService: IQuickInputService = accessor.get(IQuickInputService);\n\t\tconst localeService: ILocaleService = accessor.get(ILocaleService);\n\t\tconst extensionWorkbenchService: IExtensionsWorkbenchService = accessor.get(IExtensionsWorkbenchService);\n\n\t\tconst installedLanguages = await languagePackService.getInstalledLanguages();\n\n\t\tconst qp = quickInputService.createQuickPick<ILanguagePackItem>();\n\t\tqp.matchOnDescription = true;\n\t\tqp.placeholder = localize('chooseLocale', \"Select Display Language\");\n\n\t\tif (installedLanguages?.length) {\n\t\t\tconst items: Array<ILanguagePackItem | IQuickPickSeparator> = [{ type: 'separator', label: localize('installed', \"Installed\") }];\n\t\t\tqp.items = items.concat(this.withMoreInfoButton(installedLanguages));\n\t\t}\n\n\t\tconst disposables = new DisposableStore();\n\t\tconst source = new CancellationTokenSource();\n\t\tdisposables.add(qp.onDispose(() => {\n\t\t\tsource.cancel();\n\t\t\tdisposables.dispose();\n\t\t}));\n\n\t\tconst installedSet = new Set<string>(installedLanguages?.map(language => language.id!) ?? []);\n\t\tlanguagePackService.getAvailableLanguages().then(availableLanguages => {\n\t\t\tconst newLanguages = availableLanguages.filter(l => l.id && !installedSet.has(l.id));\n\t\t\tif (newLanguages.length) {\n\t\t\t\tqp.items = [\n\t\t\t\t\t...qp.items,\n\t\t\t\t\t{ type: 'separator', label: localize('available', \"Available\") },\n\t\t\t\t\t...this.withMoreInfoButton(newLanguages)\n\t\t\t\t];\n\t\t\t}\n\t\t\tqp.busy = false;\n\t\t});\n\n\t\tdisposables.add(qp.onDidAccept(async () => {\n\t\t\tconst selectedLanguage = qp.activeItems[0];\n\t\t\tqp.hide();\n\t\t\tawait localeService.setLocale(selectedLanguage);\n\t\t}));\n\n\t\tdisposables.add(qp.onDidTriggerItemButton(async e => {\n\t\t\tqp.hide();\n\t\t\tif (e.item.extensionId) {\n\t\t\t\tawait extensionWorkbenchService.open(e.item.extensionId);\n\t\t\t}\n\t\t}));\n\n\t\tqp.show();\n\t\tqp.busy = true;\n\t}\n\n\tprivate withMoreInfoButton(items: ILanguagePackItem[]): ILanguagePackItem[] {\n\t\tfor (const item of items) {\n\t\t\tif (item.extensionId) {\n\t\t\t\titem.buttons = [{\n\t\t\t\t\ttooltip: localize('moreInfo', \"More Info\"),\n\t\t\t\t\ticonClass: 'codicon-info'\n\t\t\t\t}];\n\t\t\t}\n\t\t}\n\t\treturn items;\n\t}\n}\n\nexport class ClearDisplayLanguageAction extends Action2 {\n\tpublic static readonly ID = 'workbench.action.clearLocalePreference';\n\tpublic static readonly LABEL = localize('clearDisplayLanguage', \"Clear Display Language Preference\");\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ClearDisplayLanguageAction.ID,\n\t\t\ttitle: { original: 'Clear Display Language Preference', value: ClearDisplayLanguageAction.LABEL },\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.CommandPalette\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst localeService: ILocaleService = accessor.get(ILocaleService);\n\t\tawait localeService.clearLocalePreference();\n\t}\n}\n"]}