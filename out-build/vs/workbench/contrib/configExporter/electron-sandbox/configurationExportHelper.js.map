{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/configExporter/electron-sandbox/configurationExportHelper.ts"],"names":[],"mappings":"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","file":"configurationExportHelper.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IConfigurationNode, IConfigurationRegistry, Extensions, IConfigurationPropertySchema } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { URI } from 'vs/base/common/uri';\nimport { IProductService } from 'vs/platform/product/common/productService';\n\ninterface IExportedConfigurationNode {\n\tname: string;\n\tdescription: string;\n\tdefault: any;\n\ttype?: string | string[];\n\tenum?: any[];\n\tenumDescriptions?: string[];\n}\n\ninterface IConfigurationExport {\n\tsettings: IExportedConfigurationNode[];\n\tbuildTime: number;\n\tcommit?: string;\n\tbuildNumber?: number;\n}\n\nexport class DefaultConfigurationExportHelper {\n\n\tconstructor(\n\t\t@INativeWorkbenchEnvironmentService environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IProductService private readonly productService: IProductService\n\t) {\n\t\tconst exportDefaultConfigurationPath = environmentService.args['export-default-configuration'];\n\t\tif (exportDefaultConfigurationPath) {\n\t\t\tthis.writeConfigModelAndQuit(URI.file(exportDefaultConfigurationPath));\n\t\t}\n\t}\n\n\tprivate async writeConfigModelAndQuit(target: URI): Promise<void> {\n\t\ttry {\n\t\t\tawait this.extensionService.whenInstalledExtensionsRegistered();\n\t\t\tawait this.writeConfigModel(target);\n\t\t} finally {\n\t\t\tthis.commandService.executeCommand('workbench.action.quit');\n\t\t}\n\t}\n\n\tprivate async writeConfigModel(target: URI): Promise<void> {\n\t\tconst config = this.getConfigModel();\n\n\t\tconst resultString = JSON.stringify(config, undefined, '  ');\n\t\tawait this.fileService.writeFile(target, VSBuffer.fromString(resultString));\n\t}\n\n\tprivate getConfigModel(): IConfigurationExport {\n\t\tconst configRegistry = Registry.as<IConfigurationRegistry>(Extensions.Configuration);\n\t\tconst configurations = configRegistry.getConfigurations().slice();\n\t\tconst settings: IExportedConfigurationNode[] = [];\n\t\tconst processedNames = new Set<string>();\n\n\t\tconst processProperty = (name: string, prop: IConfigurationPropertySchema) => {\n\t\t\tif (processedNames.has(name)) {\n\t\t\t\tconsole.warn('Setting is registered twice: ' + name);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tprocessedNames.add(name);\n\t\t\tconst propDetails: IExportedConfigurationNode = {\n\t\t\t\tname,\n\t\t\t\tdescription: prop.description || prop.markdownDescription || '',\n\t\t\t\tdefault: prop.default,\n\t\t\t\ttype: prop.type\n\t\t\t};\n\n\t\t\tif (prop.enum) {\n\t\t\t\tpropDetails.enum = prop.enum;\n\t\t\t}\n\n\t\t\tif (prop.enumDescriptions || prop.markdownEnumDescriptions) {\n\t\t\t\tpropDetails.enumDescriptions = prop.enumDescriptions || prop.markdownEnumDescriptions;\n\t\t\t}\n\n\t\t\tsettings.push(propDetails);\n\t\t};\n\n\t\tconst processConfig = (config: IConfigurationNode) => {\n\t\t\tif (config.properties) {\n\t\t\t\tfor (const name in config.properties) {\n\t\t\t\t\tprocessProperty(name, config.properties[name]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconfig.allOf?.forEach(processConfig);\n\t\t};\n\n\t\tconfigurations.forEach(processConfig);\n\n\t\tconst excludedProps = configRegistry.getExcludedConfigurationProperties();\n\t\tfor (const name in excludedProps) {\n\t\t\tprocessProperty(name, excludedProps[name]);\n\t\t}\n\n\t\tconst result: IConfigurationExport = {\n\t\t\tsettings: settings.sort((a, b) => a.name.localeCompare(b.name)),\n\t\t\tbuildTime: Date.now(),\n\t\t\tcommit: this.productService.commit,\n\t\t\tbuildNumber: this.productService.settingsSearchBuildId\n\t\t};\n\n\t\treturn result;\n\t}\n}\n"]}