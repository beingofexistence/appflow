{"version":3,"sources":["vs/workbench/contrib/issue/electron-sandbox/issue.contribution.ts"],"names":[],"mappings":"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","file":"issue.contribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { MenuRegistry, MenuId, registerAction2, Action2 } from 'vs/platform/actions/common/actions';\nimport { IWorkbenchIssueService } from 'vs/workbench/services/issue/common/issue';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { BaseIssueContribution } from 'vs/workbench/contrib/issue/common/issue.contribution';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Extensions, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { Categories } from 'vs/platform/action/common/actionCommonCategories';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { INativeHostService } from 'vs/platform/native/common/native';\nimport { IProgressService, ProgressLocation } from 'vs/platform/progress/common/progress';\nimport { IIssueMainService, IssueType } from 'vs/platform/issue/common/issue';\n\n//#region Issue Contribution\n\nclass NativeIssueContribution extends BaseIssueContribution {\n\n\tconstructor(\n\t\t@IProductService productService: IProductService\n\t) {\n\t\tsuper(productService);\n\n\t\tif (productService.reportIssueUrl) {\n\t\t\tregisterAction2(ReportPerformanceIssueUsingReporterAction);\n\t\t}\n\t}\n}\nRegistry.as<IWorkbenchContributionsRegistry>(Extensions.Workbench).registerWorkbenchContribution(NativeIssueContribution, LifecyclePhase.Restored);\n\nclass ReportPerformanceIssueUsingReporterAction extends Action2 {\n\n\tstatic readonly ID = 'workbench.action.reportPerformanceIssueUsingReporter';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ReportPerformanceIssueUsingReporterAction.ID,\n\t\t\ttitle: { value: localize({ key: 'reportPerformanceIssue', comment: [`Here, 'issue' means problem or bug`] }, \"Report Performance Issue...\"), original: 'Report Performance Issue' },\n\t\t\tcategory: Categories.Help,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst issueService = accessor.get(IWorkbenchIssueService);\n\n\t\treturn issueService.openReporter({ issueType: IssueType.PerformanceIssue });\n\t}\n}\n\n//#endregion\n\n//#region Commands\n\nclass OpenProcessExplorer extends Action2 {\n\n\tstatic readonly ID = 'workbench.action.openProcessExplorer';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: OpenProcessExplorer.ID,\n\t\t\ttitle: { value: localize('openProcessExplorer', \"Open Process Explorer\"), original: 'Open Process Explorer' },\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst issueService = accessor.get(IWorkbenchIssueService);\n\n\t\treturn issueService.openProcessExplorer();\n\t}\n}\nregisterAction2(OpenProcessExplorer);\nMenuRegistry.appendMenuItem(MenuId.MenubarHelpMenu, {\n\tgroup: '5_tools',\n\tcommand: {\n\t\tid: OpenProcessExplorer.ID,\n\t\ttitle: localize({ key: 'miOpenProcessExplorerer', comment: ['&& denotes a mnemonic'] }, \"Open &&Process Explorer\")\n\t},\n\torder: 2\n});\n\nclass StopTracing extends Action2 {\n\n\tstatic readonly ID = 'workbench.action.stopTracing';\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: StopTracing.ID,\n\t\t\ttitle: { value: localize('stopTracing', \"Stop Tracing\"), original: 'Stop Tracing' },\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst issueService = accessor.get(IIssueMainService);\n\t\tconst environmentService = accessor.get(INativeEnvironmentService);\n\t\tconst dialogService = accessor.get(IDialogService);\n\t\tconst nativeHostService = accessor.get(INativeHostService);\n\t\tconst progressService = accessor.get(IProgressService);\n\n\t\tif (!environmentService.args.trace) {\n\t\t\tconst { confirmed } = await dialogService.confirm({\n\t\t\t\tmessage: localize('stopTracing.message', \"Tracing requires to launch with a '--trace' argument\"),\n\t\t\t\tprimaryButton: localize({ key: 'stopTracing.button', comment: ['&& denotes a mnemonic'] }, \"&&Relaunch and Enable Tracing\"),\n\t\t\t});\n\n\t\t\tif (confirmed) {\n\t\t\t\treturn nativeHostService.relaunch({ addArgs: ['--trace'] });\n\t\t\t}\n\t\t}\n\n\t\tawait progressService.withProgress({\n\t\t\tlocation: ProgressLocation.Dialog,\n\t\t\ttitle: localize('stopTracing.title', \"Creating trace file...\"),\n\t\t\tcancellable: false,\n\t\t\tdetail: localize('stopTracing.detail', \"This can take up to one minute to complete.\")\n\t\t}, () => issueService.stopTracing());\n\t}\n}\nregisterAction2(StopTracing);\n\nCommandsRegistry.registerCommand('_issues.getSystemStatus', (accessor) => {\n\treturn accessor.get(IIssueMainService).getSystemStatus();\n});\n\n//#endregion\n"]}