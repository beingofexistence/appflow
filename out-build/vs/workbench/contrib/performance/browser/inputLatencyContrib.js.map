{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/performance/browser/inputLatencyContrib.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUzF,IAAM,IAAI,GAAV,MAAM,IAAoB,SAAQ,eAAG;QAI3C,YACiB,CAAoC,EACjC,CAAuC;YAE1D,KAAK,EAAE,CAAC;YAHyB,MAAC,GAAD,CAAC,CAAkB;YAChB,MAAC,GAAD,CAAC,CAAqB;YAL1C,MAAC,GAAW,IAAI,CAAC,CAAC,CAAS,IAAI,eAAG,EAAgB,CAAC,CAAC;YASpE,sFAAsF;YACtF,qFAAqF;YACrF,uFAAuF;YACvF,2BAA2B;YAC3B,IAAI,CAAC,CAAC,GAAY,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,CAAc,GAAG,EAAE;gBAC1D,IAAI,CAAC,CAAC,EAAY,CAAC;gBACnB,IAAI,CAAC,CAAC,EAAe,CAAC;YACvB,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;YAEX,IAAI,CAAC,CAAC,EAAe,CAAC;QACvB,CAAC;QAEO,CAAC;YACR,IAAI,CAAC,CAAC,CAAS,KAAK,GAAG,aAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAc,uBAAuB,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAU,QAAQ,EAAE,CAAC,CAAC;QAClH,CAAC;QAEO,CAAC;YACR,MAAM,YAAY,GAAG,0BAAY,CAAC,uBAAuB,EAAE,CAAC;YAC5D,IAAI,CAAC,YAAY,EAAE;gBAClB,OAAO;aACP;YAsBD,IAAI,CAAC,CAAC,CAAiB,UAAU,CAAsE,0BAA0B,EAAE;gBAClI,OAAO,EAAE,YAAY,CAAC,OAAO;gBAC7B,KAAK,EAAE,YAAY,CAAC,KAAK;gBACzB,MAAM,EAAE,YAAY,CAAC,MAAM;gBAC3B,KAAK,EAAE,YAAY,CAAC,KAAK;gBACzB,WAAW,EAAE,YAAY,CAAC,WAAW;aACrC,CAAC,CAAC;QACJ,CAAC;KACD,CAAA;IA5DY,oBAAI;mBAAJ,IAAI;QAKd,WAAA,mBAAG,CAAA;QACH,WAAA,eAAG,CAAA;OANO,IAAI,CA4DhB","file":"inputLatencyContrib.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { inputLatency } from 'vs/base/browser/performance';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { Event } from 'vs/base/common/event';\nimport { Disposable, MutableDisposable } from 'vs/base/common/lifecycle';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\n\nexport class InputLatencyContrib extends Disposable implements IWorkbenchContribution {\n\tprivate readonly _listener = this._register(new MutableDisposable());\n\tprivate readonly _scheduler: RunOnceScheduler;\n\n\tconstructor(\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService\n\t) {\n\t\tsuper();\n\n\t\t// The current sampling strategy is when the active editor changes, start sampling and\n\t\t// report the results after 60 seconds. It's done this way as we don't want to sample\n\t\t// everything, just somewhat randomly, and using an interval would utilize CPU when the\n\t\t// application is inactive.\n\t\tthis._scheduler = this._register(new RunOnceScheduler(() => {\n\t\t\tthis._logSamples();\n\t\t\tthis._setupListener();\n\t\t}, 60000));\n\n\t\tthis._setupListener();\n\t}\n\n\tprivate _setupListener(): void {\n\t\tthis._listener.value = Event.once(this._editorService.onDidActiveEditorChange)(() => this._scheduler.schedule());\n\t}\n\n\tprivate _logSamples(): void {\n\t\tconst measurements = inputLatency.getAndClearMeasurements();\n\t\tif (!measurements) {\n\t\t\treturn;\n\t\t}\n\n\t\ttype InputLatencyStatisticFragment = {\n\t\t\towner: 'tyriar';\n\t\t\tcomment: 'Represents a set of statistics collected about input latencies';\n\t\t\taverage: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The average time it took to execute.'; isMeasurement: true };\n\t\t\tmax: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The maximum time it took to execute.'; isMeasurement: true };\n\t\t\tmin: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The minimum time it took to execute.'; isMeasurement: true };\n\t\t};\n\n\t\ttype PerformanceInputLatencyClassification = {\n\t\t\towner: 'tyriar';\n\t\t\tcomment: 'This is a set of samples of the time (in milliseconds) that various events took when typing in the editor';\n\t\t\tkeydown: InputLatencyStatisticFragment;\n\t\t\tinput: InputLatencyStatisticFragment;\n\t\t\trender: InputLatencyStatisticFragment;\n\t\t\ttotal: InputLatencyStatisticFragment;\n\t\t\tsampleCount: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; isMeasurement: true; comment: 'The number of samples measured.' };\n\t\t};\n\n\t\ttype PerformanceInputLatencyEvent = inputLatency.IInputLatencyMeasurements;\n\n\t\tthis._telemetryService.publicLog2<PerformanceInputLatencyEvent, PerformanceInputLatencyClassification>('performance.inputLatency', {\n\t\t\tkeydown: measurements.keydown,\n\t\t\tinput: measurements.input,\n\t\t\trender: measurements.render,\n\t\t\ttotal: measurements.total,\n\t\t\tsampleCount: measurements.sampleCount\n\t\t});\n\t}\n}\n"]}