{"version":3,"sources":["vs/workbench/contrib/performance/browser/performance.contribution.ts"],"names":[],"mappings":"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","file":"performance.contribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { registerAction2, Action2 } from 'vs/platform/actions/common/actions';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Categories } from 'vs/platform/action/common/actionCommonCategories';\nimport { Extensions, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';\nimport { EditorExtensions, IEditorSerializer, IEditorFactoryRegistry } from 'vs/workbench/common/editor';\nimport { PerfviewContrib, PerfviewInput } from 'vs/workbench/contrib/performance/browser/perfviewEditor';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { InstantiationService, Trace } from 'vs/platform/instantiation/common/instantiationService';\nimport { EventProfiling } from 'vs/base/common/event';\nimport { InputLatencyContrib } from 'vs/workbench/contrib/performance/browser/inputLatencyContrib';\n\n// -- startup performance view\n\nRegistry.as<IWorkbenchContributionsRegistry>(Extensions.Workbench).registerWorkbenchContribution(\n\tPerfviewContrib,\n\tLifecyclePhase.Ready\n);\n\nRegistry.as<IEditorFactoryRegistry>(EditorExtensions.EditorFactory).registerEditorSerializer(\n\tPerfviewInput.Id,\n\tclass implements IEditorSerializer {\n\t\tcanSerialize(): boolean {\n\t\t\treturn true;\n\t\t}\n\t\tserialize(): string {\n\t\t\treturn '';\n\t\t}\n\t\tdeserialize(instantiationService: IInstantiationService): PerfviewInput {\n\t\t\treturn instantiationService.createInstance(PerfviewInput);\n\t\t}\n\t}\n);\n\n\nregisterAction2(class extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'perfview.show',\n\t\t\ttitle: { value: localize('show.label', \"Startup Performance\"), original: 'Startup Performance' },\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor) {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst instaService = accessor.get(IInstantiationService);\n\t\treturn editorService.openEditor(instaService.createInstance(PerfviewInput), { pinned: true });\n\t}\n});\n\n\nregisterAction2(class PrintServiceCycles extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'perf.insta.printAsyncCycles',\n\t\t\ttitle: { value: localize('cycles', \"Print Service Cycles\"), original: 'Print Service Cycles' },\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor) {\n\t\tconst instaService = accessor.get(IInstantiationService);\n\t\tif (instaService instanceof InstantiationService) {\n\t\t\tconst cycle = instaService._globalGraph?.findCycleSlow();\n\t\t\tif (cycle) {\n\t\t\t\tconsole.warn(`CYCLE`, cycle);\n\t\t\t} else {\n\t\t\t\tconsole.warn(`YEAH, no more cycles`);\n\t\t\t}\n\t\t}\n\t}\n});\n\nregisterAction2(class PrintServiceTraces extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'perf.insta.printTraces',\n\t\t\ttitle: { value: localize('insta.trace', \"Print Service Traces\"), original: 'Print Service Traces' },\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\trun() {\n\t\tif (Trace.all.size === 0) {\n\t\t\tconsole.log('Enable via `instantiationService.ts#_enableAllTracing`');\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const item of Trace.all) {\n\t\t\tconsole.log(item);\n\t\t}\n\t}\n});\n\n\nregisterAction2(class PrintEventProfiling extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'perf.event.profiling',\n\t\t\ttitle: { value: localize('emitter', \"Print Emitter Profiles\"), original: 'Print Emitter Profiles' },\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\trun(): void {\n\t\tif (EventProfiling.all.size === 0) {\n\t\t\tconsole.log('USE `EmitterOptions._profName` to enable profiling');\n\t\t\treturn;\n\t\t}\n\t\tfor (const item of EventProfiling.all) {\n\t\t\tconsole.log(`${item.name}: ${item.invocationCount} invocations COST ${item.elapsedOverall}ms, ${item.listenerCount} listeners, avg cost is ${item.durations.reduce((a, b) => a + b, 0) / item.durations.length}ms`);\n\t\t}\n\t}\n});\n\n// -- input latency\n\nRegistry.as<IWorkbenchContributionsRegistry>(Extensions.Workbench).registerWorkbenchContribution(\n\tInputLatencyContrib,\n\tLifecyclePhase.Eventually\n);\n"]}