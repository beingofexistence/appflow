{"version":3,"sources":["vs/workbench/contrib/performance/electron-sandbox/startupProfiler.ts"],"names":[],"mappings":"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","file":"startupProfiler.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { localize } from 'vs/nls';\nimport { dirname, basename } from 'vs/base/common/resources';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { ILifecycleService, LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { PerfviewInput } from 'vs/workbench/contrib/performance/browser/perfviewEditor';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { URI } from 'vs/base/common/uri';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { INativeHostService } from 'vs/platform/native/common/native';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { ILabelService } from 'vs/platform/label/common/label';\n\nexport class StartupProfiler implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@INativeWorkbenchEnvironmentService private readonly _environmentService: INativeWorkbenchEnvironmentService,\n\t\t@ITextModelService private readonly _textModelResolverService: ITextModelService,\n\t\t@IClipboardService private readonly _clipboardService: IClipboardService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IOpenerService private readonly _openerService: IOpenerService,\n\t\t@INativeHostService private readonly _nativeHostService: INativeHostService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t\t@IFileService private readonly _fileService: IFileService,\n\t\t@ILabelService private readonly _labelService: ILabelService,\n\t) {\n\t\t// wait for everything to be ready\n\t\tPromise.all([\n\t\t\tlifecycleService.when(LifecyclePhase.Eventually),\n\t\t\textensionService.whenInstalledExtensionsRegistered()\n\t\t]).then(() => {\n\t\t\tthis._stopProfiling();\n\t\t});\n\t}\n\n\tprivate _stopProfiling(): void {\n\n\t\tif (!this._environmentService.args['prof-startup-prefix']) {\n\t\t\treturn;\n\t\t}\n\t\tconst profileFilenamePrefix = URI.file(this._environmentService.args['prof-startup-prefix']);\n\n\t\tconst dir = dirname(profileFilenamePrefix);\n\t\tconst prefix = basename(profileFilenamePrefix);\n\n\t\tconst removeArgs: string[] = ['--prof-startup'];\n\t\tconst markerFile = this._fileService.readFile(profileFilenamePrefix).then(value => removeArgs.push(...value.toString().split('|')))\n\t\t\t.then(() => this._fileService.del(profileFilenamePrefix, { recursive: true })) // (1) delete the file to tell the main process to stop profiling\n\t\t\t.then(() => new Promise<void>(resolve => { // (2) wait for main that recreates the fail to signal profiling has stopped\n\t\t\t\tconst check = () => {\n\t\t\t\t\tthis._fileService.exists(profileFilenamePrefix).then(exists => {\n\t\t\t\t\t\tif (exists) {\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsetTimeout(check, 500);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t};\n\t\t\t\tcheck();\n\t\t\t}))\n\t\t\t.then(() => this._fileService.del(profileFilenamePrefix, { recursive: true })); // (3) finally delete the file again\n\n\t\tmarkerFile.then(() => {\n\t\t\treturn this._fileService.resolve(dir).then(stat => {\n\t\t\t\treturn (stat.children ? stat.children.filter(value => value.resource.path.includes(prefix)) : []).map(stat => stat.resource);\n\t\t\t});\n\t\t}).then(files => {\n\t\t\tconst profileFiles = files.reduce((prev, cur) => `${prev}${this._labelService.getUriLabel(cur)}\\n`, '\\n');\n\n\t\t\treturn this._dialogService.confirm({\n\t\t\t\ttype: 'info',\n\t\t\t\tmessage: localize('prof.message', \"Successfully created profiles.\"),\n\t\t\t\tdetail: localize('prof.detail', \"Please create an issue and manually attach the following files:\\n{0}\", profileFiles),\n\t\t\t\tprimaryButton: localize({ key: 'prof.restartAndFileIssue', comment: ['&& denotes a mnemonic'] }, \"&&Create Issue and Restart\"),\n\t\t\t\tcancelButton: localize('prof.restart', \"Restart\")\n\t\t\t}).then(res => {\n\t\t\t\tif (res.confirmed) {\n\t\t\t\t\tPromise.all<any>([\n\t\t\t\t\t\tthis._nativeHostService.showItemInFolder(files[0].fsPath),\n\t\t\t\t\t\tthis._createPerfIssue(files.map(file => basename(file)))\n\t\t\t\t\t]).then(() => {\n\t\t\t\t\t\t// keep window stable until restart is selected\n\t\t\t\t\t\treturn this._dialogService.confirm({\n\t\t\t\t\t\t\ttype: 'info',\n\t\t\t\t\t\t\tmessage: localize('prof.thanks', \"Thanks for helping us.\"),\n\t\t\t\t\t\t\tdetail: localize('prof.detail.restart', \"A final restart is required to continue to use '{0}'. Again, thank you for your contribution.\", this._productService.nameLong),\n\t\t\t\t\t\t\tprimaryButton: localize({ key: 'prof.restart.button', comment: ['&& denotes a mnemonic'] }, \"&&Restart\")\n\t\t\t\t\t\t}).then(res => {\n\t\t\t\t\t\t\t// now we are ready to restart\n\t\t\t\t\t\t\tif (res.confirmed) {\n\t\t\t\t\t\t\t\tthis._nativeHostService.relaunch({ removeArgs });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\n\t\t\t\t} else {\n\t\t\t\t\t// simply restart\n\t\t\t\t\tthis._nativeHostService.relaunch({ removeArgs });\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate async _createPerfIssue(files: string[]): Promise<void> {\n\t\tconst reportIssueUrl = this._productService.reportIssueUrl;\n\t\tif (!reportIssueUrl) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst ref = await this._textModelResolverService.createModelReference(PerfviewInput.Uri);\n\t\ttry {\n\t\t\tawait this._clipboardService.writeText(ref.object.textEditorModel.getValue());\n\t\t} finally {\n\t\t\tref.dispose();\n\t\t}\n\n\t\tconst body = `\n1. :warning: We have copied additional data to your clipboard. Make sure to **paste** here. :warning:\n1. :warning: Make sure to **attach** these files from your *home*-directory: :warning:\\n${files.map(file => `-\\`${file}\\``).join('\\n')}\n`;\n\n\t\tconst baseUrl = reportIssueUrl;\n\t\tconst queryStringPrefix = baseUrl.indexOf('?') === -1 ? '?' : '&';\n\n\t\tthis._openerService.open(URI.parse(`${baseUrl}${queryStringPrefix}body=${encodeURIComponent(body)}`));\n\t}\n}\n"]}