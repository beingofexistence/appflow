{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/performance/electron-sandbox/rendererAutoProfiler.ts"],"names":[],"mappings":"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","file":"rendererAutoProfiler.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { timeout } from 'vs/base/common/async';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { joinPath } from 'vs/base/common/resources';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { INativeHostService } from 'vs/platform/native/common/native';\nimport { IV8Profile } from 'vs/platform/profiling/common/profiling';\nimport { IProfileAnalysisWorkerService, ProfilingOutput } from 'vs/platform/profiling/electron-sandbox/profileAnalysisWorkerService';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { parseExtensionDevOptions } from 'vs/workbench/services/extensions/common/extensionDevOptions';\nimport { ITimerService } from 'vs/workbench/services/timer/browser/timerService';\n\nexport class RendererProfiling {\n\n\tprivate _observer?: PerformanceObserver;\n\n\tconstructor(\n\t\t@INativeWorkbenchEnvironmentService private readonly _environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IFileService private readonly _fileService: IFileService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@INativeHostService nativeHostService: INativeHostService,\n\t\t@ITimerService timerService: ITimerService,\n\t\t@IConfigurationService configService: IConfigurationService,\n\t\t@IProfileAnalysisWorkerService profileAnalysisService: IProfileAnalysisWorkerService\n\t) {\n\n\t\tconst devOpts = parseExtensionDevOptions(_environmentService);\n\t\tif (devOpts.isExtensionDevTestFromCli) {\n\t\t\t// disabled when running extension tests\n\t\t\treturn;\n\t\t}\n\n\t\ttimerService.perfBaseline.then(perfBaseline => {\n\t\t\t_logService.info(`[perf] Render performance baseline is ${perfBaseline}ms`);\n\n\t\t\tif (perfBaseline < 0) {\n\t\t\t\t// too slow\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// SLOW threshold\n\t\t\tconst slowThreshold = perfBaseline * 10; // ~10 frames at 64fps on MY machine\n\n\t\t\tconst obs = new PerformanceObserver(async list => {\n\n\t\t\t\tobs.takeRecords();\n\t\t\t\tconst maxDuration = list.getEntries()\n\t\t\t\t\t.map(e => e.duration)\n\t\t\t\t\t.reduce((p, c) => Math.max(p, c), 0);\n\n\t\t\t\tif (maxDuration < slowThreshold) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!configService.getValue('application.experimental.rendererProfiling')) {\n\t\t\t\t\t_logService.debug(`[perf] SLOW task detected (${maxDuration}ms) but renderer profiling is disabled via 'application.experimental.rendererProfiling'`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst sessionId = generateUuid();\n\n\t\t\t\t_logService.warn(`[perf] Renderer reported VERY LONG TASK (${maxDuration}ms), starting profiling session '${sessionId}'`);\n\n\t\t\t\t// pause observation, we'll take a detailed look\n\t\t\t\tobs.disconnect();\n\n\t\t\t\t// profile renderer for 5secs, analyse, and take action depending on the result\n\t\t\t\tfor (let i = 0; i < 3; i++) {\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst profile = await nativeHostService.profileRenderer(sessionId, 5000);\n\t\t\t\t\t\tconst output = await profileAnalysisService.analyseBottomUp(profile, _url => '<<renderer>>', perfBaseline, true);\n\t\t\t\t\t\tif (output === ProfilingOutput.Interesting) {\n\t\t\t\t\t\t\tthis._store(profile, sessionId);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttimeout(15000); // wait 15s\n\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t_logService.error(err);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// reconnect the observer\n\t\t\t\tobs.observe({ entryTypes: ['longtask'] });\n\t\t\t});\n\n\t\t\tobs.observe({ entryTypes: ['longtask'] });\n\t\t\tthis._observer = obs;\n\n\t\t});\n\t}\n\n\tdispose(): void {\n\t\tthis._observer?.disconnect();\n\t}\n\n\n\tprivate async _store(profile: IV8Profile, sessionId: string): Promise<void> {\n\t\tconst path = joinPath(this._environmentService.tmpDir, `renderer-${Math.random().toString(16).slice(2, 8)}.cpuprofile`);\n\t\tawait this._fileService.writeFile(path, VSBuffer.fromString(JSON.stringify(profile)));\n\t\tthis._logService.info(`[perf] stored profile to DISK '${path}'`, sessionId);\n\t}\n}\n"]}