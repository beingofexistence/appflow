{"version":3,"sources":["vs/workbench/contrib/accessibility/browser/accessibilityStatus.ts"],"names":[],"mappings":"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","file":"accessibilityStatus.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, MutableDisposable } from 'vs/base/common/lifecycle';\nimport { Event } from 'vs/base/common/event';\nimport Severity from 'vs/base/common/severity';\nimport { localize } from 'vs/nls';\nimport { IAccessibilityService } from 'vs/platform/accessibility/common/accessibility';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { ConfigurationTarget, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { INotificationHandle, INotificationService, NotificationPriority } from 'vs/platform/notification/common/notification';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IStatusbarEntryAccessor, IStatusbarService, StatusbarAlignment } from 'vs/workbench/services/statusbar/browser/statusbar';\n\nexport class AccessibilityStatus extends Disposable implements IWorkbenchContribution {\n\tprivate screenReaderNotification: INotificationHandle | null = null;\n\tprivate promptedScreenReader: boolean = false;\n\tprivate readonly screenReaderModeElement = this._register(new MutableDisposable<IStatusbarEntryAccessor>());\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IAccessibilityService private readonly _accessibilityService: IAccessibilityService,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(this._accessibilityService.onDidChangeScreenReaderOptimized(() => this.onScreenReaderModeChange()));\n\t\tthis._register(configurationService.onDidChangeConfiguration(c => {\n\t\t\tif (c.affectsConfiguration('editor.accessibilitySupport')) {\n\t\t\t\tthis.onScreenReaderModeChange();\n\t\t\t}\n\t\t}));\n\t\tCommandsRegistry.registerCommand({ id: 'showEditorScreenReaderNotification', handler: () => this.showScreenReaderNotification() });\n\t\tthis.updateScreenReaderModeElement(this._accessibilityService.isScreenReaderOptimized());\n\t}\n\n\tprivate showScreenReaderNotification(): void {\n\t\tthis.screenReaderNotification = this.notificationService.prompt(\n\t\t\tSeverity.Info,\n\t\t\tlocalize('screenReaderDetectedExplanation.question', \"Are you using a screen reader to operate VS Code?\"),\n\t\t\t[{\n\t\t\t\tlabel: localize('screenReaderDetectedExplanation.answerYes', \"Yes\"),\n\t\t\t\trun: () => {\n\t\t\t\t\tthis.configurationService.updateValue('editor.accessibilitySupport', 'on', ConfigurationTarget.USER);\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\tlabel: localize('screenReaderDetectedExplanation.answerNo', \"No\"),\n\t\t\t\trun: () => {\n\t\t\t\t\tthis.configurationService.updateValue('editor.accessibilitySupport', 'off', ConfigurationTarget.USER);\n\t\t\t\t}\n\t\t\t}],\n\t\t\t{\n\t\t\t\tsticky: true,\n\t\t\t\tpriority: NotificationPriority.URGENT\n\t\t\t}\n\t\t);\n\n\t\tEvent.once(this.screenReaderNotification.onDidClose)(() => this.screenReaderNotification = null);\n\t}\n\tprivate updateScreenReaderModeElement(visible: boolean): void {\n\t\tif (visible) {\n\t\t\tif (!this.screenReaderModeElement.value) {\n\t\t\t\tconst text = localize('screenReaderDetected', \"Screen Reader Optimized\");\n\t\t\t\tthis.screenReaderModeElement.value = this.statusbarService.addEntry({\n\t\t\t\t\tname: localize('status.editor.screenReaderMode', \"Screen Reader Mode\"),\n\t\t\t\t\ttext,\n\t\t\t\t\tariaLabel: text,\n\t\t\t\t\tcommand: 'showEditorScreenReaderNotification',\n\t\t\t\t\tkind: 'prominent'\n\t\t\t\t}, 'status.editor.screenReaderMode', StatusbarAlignment.RIGHT, 100.6);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.screenReaderModeElement.clear();\n\t\t}\n\t}\n\n\tprivate onScreenReaderModeChange(): void {\n\n\t\t// We only support text based editors\n\t\tconst screenReaderDetected = this._accessibilityService.isScreenReaderOptimized();\n\t\tif (screenReaderDetected) {\n\t\t\tconst screenReaderConfiguration = this.configurationService.getValue('editor.accessibilitySupport');\n\t\t\tif (screenReaderConfiguration === 'auto') {\n\t\t\t\tif (!this.promptedScreenReader) {\n\t\t\t\t\tthis.promptedScreenReader = true;\n\t\t\t\t\tsetTimeout(() => this.showScreenReaderNotification(), 100);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this.screenReaderNotification) {\n\t\t\tthis.screenReaderNotification.close();\n\t\t}\n\t\tthis.updateScreenReaderModeElement(this._accessibilityService.isScreenReaderOptimized());\n\t}\n}\n"]}