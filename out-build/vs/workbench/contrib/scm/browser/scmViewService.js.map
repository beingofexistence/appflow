{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/scm/browser/scmViewService.ts"],"names":[],"mappings":"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","file":"scmViewService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { ISCMViewService, ISCMRepository, ISCMService, ISCMViewVisibleRepositoryChangeEvent, ISCMMenus, ISCMProvider, ISCMRepositorySortKey } from 'vs/workbench/contrib/scm/common/scm';\nimport { Iterable } from 'vs/base/common/iterator';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { SCMMenus } from 'vs/workbench/contrib/scm/browser/menus';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { debounce } from 'vs/base/common/decorators';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { compareFileNames, comparePaths } from 'vs/base/common/comparers';\nimport { basename } from 'vs/base/common/resources';\nimport { binarySearch } from 'vs/base/common/arrays';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IContextKey, IContextKeyService, RawContextKey } from 'vs/platform/contextkey/common/contextkey';\n\nfunction getProviderStorageKey(provider: ISCMProvider): string {\n\treturn `${provider.contextValue}:${provider.label}${provider.rootUri ? `:${provider.rootUri.toString()}` : ''}`;\n}\n\nfunction getRepositoryName(workspaceContextService: IWorkspaceContextService, repository: ISCMRepository): string {\n\tif (!repository.provider.rootUri) {\n\t\treturn repository.provider.label;\n\t}\n\n\tconst folder = workspaceContextService.getWorkspaceFolder(repository.provider.rootUri);\n\treturn folder?.uri.toString() === repository.provider.rootUri.toString() ? folder.name : basename(repository.provider.rootUri);\n}\n\nexport const RepositoryContextKeys = {\n\tRepositorySortKey: new RawContextKey<ISCMRepositorySortKey>('scmRepositorySortKey', ISCMRepositorySortKey.DiscoveryTime),\n};\n\ninterface ISCMRepositoryView {\n\treadonly repository: ISCMRepository;\n\treadonly discoveryTime: number;\n\tfocused: boolean;\n\tselectionIndex: number;\n}\n\nexport interface ISCMViewServiceState {\n\treadonly all: string[];\n\treadonly sortKey: ISCMRepositorySortKey;\n\treadonly visible: number[];\n}\n\nexport class SCMViewService implements ISCMViewService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\treadonly menus: ISCMMenus;\n\n\tprivate didFinishLoading: boolean = false;\n\tprivate didSelectRepository: boolean = false;\n\tprivate previousState: ISCMViewServiceState | undefined;\n\tprivate readonly disposables = new DisposableStore();\n\n\tprivate _repositories: ISCMRepositoryView[] = [];\n\n\tget repositories(): ISCMRepository[] {\n\t\treturn this._repositories.map(r => r.repository);\n\t}\n\n\tget visibleRepositories(): ISCMRepository[] {\n\t\t// In order to match the legacy behaviour, when the repositories are sorted by discovery time,\n\t\t// the visible repositories are sorted by the selection index instead of the discovery time.\n\t\tif (this._repositoriesSortKey === ISCMRepositorySortKey.DiscoveryTime) {\n\t\t\treturn this._repositories.filter(r => r.selectionIndex !== -1)\n\t\t\t\t.sort((r1, r2) => r1.selectionIndex - r2.selectionIndex)\n\t\t\t\t.map(r => r.repository);\n\t\t}\n\n\t\treturn this._repositories\n\t\t\t.filter(r => r.selectionIndex !== -1)\n\t\t\t.map(r => r.repository);\n\t}\n\n\tset visibleRepositories(visibleRepositories: ISCMRepository[]) {\n\t\tconst set = new Set(visibleRepositories);\n\t\tconst added = new Set<ISCMRepository>();\n\t\tconst removed = new Set<ISCMRepository>();\n\n\t\tfor (const repositoryView of this._repositories) {\n\t\t\t// Selected -> !Selected\n\t\t\tif (!set.has(repositoryView.repository) && repositoryView.selectionIndex !== -1) {\n\t\t\t\trepositoryView.selectionIndex = -1;\n\t\t\t\tremoved.add(repositoryView.repository);\n\t\t\t}\n\t\t\t// Selected | !Selected -> Selected\n\t\t\tif (set.has(repositoryView.repository)) {\n\t\t\t\tif (repositoryView.selectionIndex === -1) {\n\t\t\t\t\tadded.add(repositoryView.repository);\n\t\t\t\t}\n\t\t\t\trepositoryView.selectionIndex = visibleRepositories.indexOf(repositoryView.repository);\n\t\t\t}\n\t\t}\n\n\t\tif (added.size === 0 && removed.size === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._onDidSetVisibleRepositories.fire({ added, removed });\n\n\t\t// Update focus if the focused repository is not visible anymore\n\t\tif (this._repositories.find(r => r.focused && r.selectionIndex === -1)) {\n\t\t\tthis.focus(this._repositories.find(r => r.selectionIndex !== -1)?.repository);\n\t\t}\n\t}\n\n\tprivate _onDidChangeRepositories = new Emitter<ISCMViewVisibleRepositoryChangeEvent>();\n\treadonly onDidChangeRepositories = this._onDidChangeRepositories.event;\n\n\tprivate _onDidSetVisibleRepositories = new Emitter<ISCMViewVisibleRepositoryChangeEvent>();\n\treadonly onDidChangeVisibleRepositories = Event.any(\n\t\tthis._onDidSetVisibleRepositories.event,\n\t\tEvent.debounce(\n\t\t\tthis._onDidChangeRepositories.event,\n\t\t\t(last, e) => {\n\t\t\t\tif (!last) {\n\t\t\t\t\treturn e;\n\t\t\t\t}\n\n\t\t\t\tconst added = new Set(last.added);\n\t\t\t\tconst removed = new Set(last.removed);\n\n\t\t\t\tfor (const repository of e.added) {\n\t\t\t\t\tif (removed.has(repository)) {\n\t\t\t\t\t\tremoved.delete(repository);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tadded.add(repository);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (const repository of e.removed) {\n\t\t\t\t\tif (added.has(repository)) {\n\t\t\t\t\t\tadded.delete(repository);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tremoved.add(repository);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn { added, removed };\n\t\t\t}, 0, undefined, undefined, undefined, this.disposables)\n\t);\n\n\tget focusedRepository(): ISCMRepository | undefined {\n\t\treturn this._repositories.find(r => r.focused)?.repository;\n\t}\n\n\tprivate _onDidFocusRepository = new Emitter<ISCMRepository | undefined>();\n\treadonly onDidFocusRepository = this._onDidFocusRepository.event;\n\n\tprivate _repositoriesSortKey: ISCMRepositorySortKey;\n\tprivate _sortKeyContextKey: IContextKey<ISCMRepositorySortKey>;\n\n\tconstructor(\n\t\t@ISCMService scmService: ISCMService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService\n\t) {\n\t\tthis.menus = instantiationService.createInstance(SCMMenus);\n\n\t\ttry {\n\t\t\tthis.previousState = JSON.parse(storageService.get('scm:view:visibleRepositories', StorageScope.WORKSPACE, ''));\n\t\t} catch {\n\t\t\t// noop\n\t\t}\n\n\t\tthis._repositoriesSortKey = this.previousState?.sortKey ?? this.getViewSortOrder();\n\t\tthis._sortKeyContextKey = RepositoryContextKeys.RepositorySortKey.bindTo(contextKeyService);\n\t\tthis._sortKeyContextKey.set(this._repositoriesSortKey);\n\n\t\tscmService.onDidAddRepository(this.onDidAddRepository, this, this.disposables);\n\t\tscmService.onDidRemoveRepository(this.onDidRemoveRepository, this, this.disposables);\n\n\t\tfor (const repository of scmService.repositories) {\n\t\t\tthis.onDidAddRepository(repository);\n\t\t}\n\n\t\tstorageService.onWillSaveState(this.onWillSaveState, this, this.disposables);\n\t}\n\n\tprivate onDidAddRepository(repository: ISCMRepository): void {\n\t\tif (!this.didFinishLoading) {\n\t\t\tthis.eventuallyFinishLoading();\n\t\t}\n\n\t\tconst repositoryView: ISCMRepositoryView = {\n\t\t\trepository, discoveryTime: Date.now(), focused: false, selectionIndex: -1\n\t\t};\n\n\t\tlet removed: Iterable<ISCMRepository> = Iterable.empty();\n\n\t\tif (this.previousState) {\n\t\t\tconst index = this.previousState.all.indexOf(getProviderStorageKey(repository.provider));\n\n\t\t\tif (index === -1) {\n\t\t\t\t// This repository is not part of the previous state which means that it\n\t\t\t\t// was either manually closed in the previous session, or the repository\n\t\t\t\t// was added after the previous session.In this case, we should select all\n\t\t\t\t// of the repositories.\n\t\t\t\tconst added: ISCMRepository[] = [];\n\n\t\t\t\tthis.insertRepositoryView(this._repositories, repositoryView);\n\t\t\t\tthis._repositories.forEach((repositoryView, index) => {\n\t\t\t\t\tif (repositoryView.selectionIndex === -1) {\n\t\t\t\t\t\tadded.push(repositoryView.repository);\n\t\t\t\t\t}\n\t\t\t\t\trepositoryView.selectionIndex = index;\n\t\t\t\t});\n\n\t\t\t\tthis._onDidChangeRepositories.fire({ added, removed: Iterable.empty() });\n\t\t\t\tthis.didSelectRepository = false;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.previousState.visible.indexOf(index) === -1) {\n\t\t\t\t// Explicit selection started\n\t\t\t\tif (this.didSelectRepository) {\n\t\t\t\t\tthis.insertRepositoryView(this._repositories, repositoryView);\n\t\t\t\t\tthis._onDidChangeRepositories.fire({ added: Iterable.empty(), removed: Iterable.empty() });\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// First visible repository\n\t\t\t\tif (!this.didSelectRepository) {\n\t\t\t\t\tremoved = [...this.visibleRepositories];\n\t\t\t\t\tthis._repositories.forEach(r => {\n\t\t\t\t\t\tr.focused = false;\n\t\t\t\t\t\tr.selectionIndex = -1;\n\t\t\t\t\t});\n\n\t\t\t\t\tthis.didSelectRepository = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst maxSelectionIndex = this.getMaxSelectionIndex();\n\t\tthis.insertRepositoryView(this._repositories, { ...repositoryView, selectionIndex: maxSelectionIndex + 1 });\n\t\tthis._onDidChangeRepositories.fire({ added: [repositoryView.repository], removed });\n\n\t\tif (!this._repositories.find(r => r.focused)) {\n\t\t\tthis.focus(repository);\n\t\t}\n\t}\n\n\tprivate onDidRemoveRepository(repository: ISCMRepository): void {\n\t\tif (!this.didFinishLoading) {\n\t\t\tthis.eventuallyFinishLoading();\n\t\t}\n\n\t\tconst repositoriesIndex = this._repositories.findIndex(r => r.repository === repository);\n\n\t\tif (repositoriesIndex === -1) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet added: Iterable<ISCMRepository> = Iterable.empty();\n\t\tconst repositoryView = this._repositories.splice(repositoriesIndex, 1);\n\n\t\tif (this._repositories.length > 0 && this.visibleRepositories.length === 0) {\n\t\t\tthis._repositories[0].selectionIndex = 0;\n\t\t\tadded = [this._repositories[0].repository];\n\t\t}\n\n\t\tthis._onDidChangeRepositories.fire({ added, removed: repositoryView.map(r => r.repository) });\n\n\t\tif (repositoryView.length === 1 && repositoryView[0].focused && this.visibleRepositories.length > 0) {\n\t\t\tthis.focus(this.visibleRepositories[0]);\n\t\t}\n\t}\n\n\tisVisible(repository: ISCMRepository): boolean {\n\t\treturn this._repositories.find(r => r.repository === repository)?.selectionIndex !== -1;\n\t}\n\n\ttoggleVisibility(repository: ISCMRepository, visible?: boolean): void {\n\t\tif (typeof visible === 'undefined') {\n\t\t\tvisible = !this.isVisible(repository);\n\t\t} else if (this.isVisible(repository) === visible) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (visible) {\n\t\t\tthis.visibleRepositories = [...this.visibleRepositories, repository];\n\t\t} else {\n\t\t\tconst index = this.visibleRepositories.indexOf(repository);\n\n\t\t\tif (index > -1) {\n\t\t\t\tthis.visibleRepositories = [\n\t\t\t\t\t...this.visibleRepositories.slice(0, index),\n\t\t\t\t\t...this.visibleRepositories.slice(index + 1)\n\t\t\t\t];\n\t\t\t}\n\t\t}\n\t}\n\n\ttoggleSortKey(sortKey: ISCMRepositorySortKey): void {\n\t\tthis._repositoriesSortKey = sortKey;\n\t\tthis._sortKeyContextKey.set(this._repositoriesSortKey);\n\t\tthis._repositories.sort(this.compareRepositories.bind(this));\n\n\t\tthis._onDidChangeRepositories.fire({ added: Iterable.empty(), removed: Iterable.empty() });\n\t}\n\n\tfocus(repository: ISCMRepository | undefined): void {\n\t\tif (repository && !this.isVisible(repository)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._repositories.forEach(r => r.focused = r.repository === repository);\n\n\t\tif (this._repositories.find(r => r.focused)) {\n\t\t\tthis._onDidFocusRepository.fire(repository);\n\t\t}\n\t}\n\n\tprivate compareRepositories(op1: ISCMRepositoryView, op2: ISCMRepositoryView): number {\n\t\t// Sort by discovery time\n\t\tif (this._repositoriesSortKey === ISCMRepositorySortKey.DiscoveryTime) {\n\t\t\treturn op1.discoveryTime - op2.discoveryTime;\n\t\t}\n\n\t\t// Sort by path\n\t\tif (this._repositoriesSortKey === 'path' && op1.repository.provider.rootUri && op2.repository.provider.rootUri) {\n\t\t\treturn comparePaths(op1.repository.provider.rootUri.fsPath, op2.repository.provider.rootUri.fsPath);\n\t\t}\n\n\t\t// Sort by name, path\n\t\tconst name1 = getRepositoryName(this.workspaceContextService, op1.repository);\n\t\tconst name2 = getRepositoryName(this.workspaceContextService, op2.repository);\n\n\t\tconst nameComparison = compareFileNames(name1, name2);\n\t\tif (nameComparison === 0 && op1.repository.provider.rootUri && op2.repository.provider.rootUri) {\n\t\t\treturn comparePaths(op1.repository.provider.rootUri.fsPath, op2.repository.provider.rootUri.fsPath);\n\t\t}\n\n\t\treturn nameComparison;\n\t}\n\n\tprivate getMaxSelectionIndex(): number {\n\t\treturn this._repositories.length === 0 ? -1 :\n\t\t\tMath.max(...this._repositories.map(r => r.selectionIndex));\n\t}\n\n\tprivate getViewSortOrder(): ISCMRepositorySortKey {\n\t\tconst sortOder = this.configurationService.getValue<'discovery time' | 'name' | 'path'>('scm.repositories.sortOrder');\n\t\tswitch (sortOder) {\n\t\t\tcase 'discovery time':\n\t\t\t\treturn ISCMRepositorySortKey.DiscoveryTime;\n\t\t\tcase 'name':\n\t\t\t\treturn ISCMRepositorySortKey.Name;\n\t\t\tcase 'path':\n\t\t\t\treturn ISCMRepositorySortKey.Path;\n\t\t\tdefault:\n\t\t\t\treturn ISCMRepositorySortKey.DiscoveryTime;\n\t\t}\n\t}\n\n\tprivate insertRepositoryView(repositories: ISCMRepositoryView[], repositoryView: ISCMRepositoryView): void {\n\t\tconst index = binarySearch(repositories, repositoryView, this.compareRepositories.bind(this));\n\t\trepositories.splice(index < 0 ? ~index : index, 0, repositoryView);\n\t}\n\n\tprivate onWillSaveState(): void {\n\t\tif (!this.didFinishLoading) { // don't remember state, if the workbench didn't really finish loading\n\t\t\treturn;\n\t\t}\n\n\t\tconst all = this.repositories.map(r => getProviderStorageKey(r.provider));\n\t\tconst visible = this.visibleRepositories.map(r => all.indexOf(getProviderStorageKey(r.provider)));\n\t\tconst raw = JSON.stringify({ all, sortKey: this._repositoriesSortKey, visible });\n\n\t\tthis.storageService.store('scm:view:visibleRepositories', raw, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n\n\t@debounce(5000)\n\tprivate eventuallyFinishLoading(): void {\n\t\tthis.finishLoading();\n\t}\n\n\tprivate finishLoading(): void {\n\t\tif (this.didFinishLoading) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.didFinishLoading = true;\n\t\tthis.previousState = undefined;\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables.dispose();\n\t\tthis._onDidChangeRepositories.dispose();\n\t\tthis._onDidSetVisibleRepositories.dispose();\n\t}\n}\n"]}