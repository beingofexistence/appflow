{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/scm/common/scm.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAcnF,QAAA,GAAG,GAAU,oBAAoB,CAAC;IAClC,QAAA,GAAG,GAAY,eAAe,CAAC;IAC/B,QAAA,GAAG,GAAyB,4BAA4B,CAAC;IACzD,QAAA,GAAG,GAAiB,oBAAoB,CAAC;IAMzC,QAAA,GAAG,GAAW,IAAA,mBAAG,EAA0B,KAAK,CAAC,CAAC;IAqD/D,IAAkB,mBAIjB;IAJD,WAAkB,mBAAmB;QACpC,+DAAS,CAAA;QACT,mEAAW,CAAA;QACX,2EAAe,CAAA;IAChB,CAAC,EAJiB,mBAAmB,mCAAnB,mBAAmB,QAIpC;IAWD,IAAY,oBAGX;IAHD,WAAY,oBAAoB;QAC/B,qFAAe,CAAA;QACf,6EAAW,CAAA;IACZ,CAAC,EAHW,oBAAoB,oCAApB,oBAAoB,QAG/B;IAsFD,IAAkB,qBAIjB;IAJD,WAAkB,qBAAqB;QACtC,wDAA+B,CAAA;QAC/B,sCAAa,CAAA;QACb,sCAAa,CAAA;IACd,CAAC,EAJiB,qBAAqB,qCAArB,qBAAqB,QAItC;IAEY,QAAA,GAAG,GAAe,IAAA,mBAAG,EAA8B,SAAS,CAAC,CAAC","file":"scm.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Event } from 'vs/base/common/event';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { Command } from 'vs/editor/common/languages';\nimport { ISequence } from 'vs/base/common/sequence';\nimport { IAction } from 'vs/base/common/actions';\nimport { IMenu } from 'vs/platform/actions/common/actions';\nimport { ThemeIcon } from 'vs/base/common/themables';\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\nimport { ISCMHistoryProvider } from 'vs/workbench/contrib/scm/common/history';\n\nexport const VIEWLET_ID = 'workbench.view.scm';\nexport const VIEW_PANE_ID = 'workbench.scm';\nexport const REPOSITORIES_VIEW_PANE_ID = 'workbench.scm.repositories';\nexport const SYNC_VIEW_PANE_ID = 'workbench.scm.sync';\n\nexport interface IBaselineResourceProvider {\n\tgetBaselineResource(resource: URI): Promise<URI>;\n}\n\nexport const ISCMService = createDecorator<ISCMService>('scm');\n\nexport interface ISCMResourceDecorations {\n\ticon?: URI | ThemeIcon;\n\ticonDark?: URI | ThemeIcon;\n\ttooltip?: string;\n\tstrikeThrough?: boolean;\n\tfaded?: boolean;\n}\n\nexport interface ISCMResource {\n\treadonly resourceGroup: ISCMResourceGroup;\n\treadonly sourceUri: URI;\n\treadonly decorations: ISCMResourceDecorations;\n\treadonly contextValue: string | undefined;\n\treadonly command: Command | undefined;\n\topen(preserveFocus: boolean): Promise<void>;\n}\n\nexport interface ISCMResourceGroup extends ISequence<ISCMResource> {\n\treadonly provider: ISCMProvider;\n\treadonly label: string;\n\treadonly id: string;\n\treadonly hideWhenEmpty: boolean;\n\treadonly onDidChange: Event<void>;\n}\n\nexport interface ISCMProvider extends IDisposable {\n\treadonly label: string;\n\treadonly id: string;\n\treadonly contextValue: string;\n\n\treadonly groups: ISequence<ISCMResourceGroup>;\n\n\t// TODO@Joao: remove\n\treadonly onDidChangeResources: Event<void>;\n\n\treadonly rootUri?: URI;\n\treadonly inputBoxDocumentUri: URI;\n\treadonly count?: number;\n\treadonly commitTemplate: string;\n\treadonly historyProvider?: ISCMHistoryProvider;\n\treadonly onDidChangeCommitTemplate: Event<string>;\n\treadonly onDidChangeHistoryProvider: Event<void>;\n\treadonly onDidChangeStatusBarCommands?: Event<readonly Command[]>;\n\treadonly acceptInputCommand?: Command;\n\treadonly actionButton?: ISCMActionButtonDescriptor;\n\treadonly statusBarCommands?: readonly Command[];\n\treadonly onDidChange: Event<void>;\n\n\tgetOriginalResource(uri: URI): Promise<URI | null>;\n}\n\nexport const enum InputValidationType {\n\tError = 0,\n\tWarning = 1,\n\tInformation = 2\n}\n\nexport interface IInputValidation {\n\tmessage: string | IMarkdownString;\n\ttype: InputValidationType;\n}\n\nexport interface IInputValidator {\n\t(value: string, cursorPosition: number): Promise<IInputValidation | undefined>;\n}\n\nexport enum SCMInputChangeReason {\n\tHistoryPrevious,\n\tHistoryNext\n}\n\nexport interface ISCMInputChangeEvent {\n\treadonly value: string;\n\treadonly reason?: SCMInputChangeReason;\n}\n\nexport interface ISCMActionButtonDescriptor {\n\tcommand: Command;\n\tsecondaryCommands?: Command[][];\n\tdescription?: string;\n\tenabled: boolean;\n}\n\nexport interface ISCMActionButton {\n\treadonly type: 'actionButton';\n\treadonly repository: ISCMRepository;\n\treadonly button?: ISCMActionButtonDescriptor;\n}\n\nexport interface ISCMInput {\n\treadonly repository: ISCMRepository;\n\n\treadonly value: string;\n\tsetValue(value: string, fromKeyboard: boolean): void;\n\treadonly onDidChange: Event<ISCMInputChangeEvent>;\n\n\tplaceholder: string;\n\treadonly onDidChangePlaceholder: Event<string>;\n\n\tvalidateInput: IInputValidator;\n\treadonly onDidChangeValidateInput: Event<void>;\n\n\tenabled: boolean;\n\treadonly onDidChangeEnablement: Event<boolean>;\n\n\tvisible: boolean;\n\treadonly onDidChangeVisibility: Event<boolean>;\n\n\tsetFocus(): void;\n\treadonly onDidChangeFocus: Event<void>;\n\n\tshowValidationMessage(message: string | IMarkdownString, type: InputValidationType): void;\n\treadonly onDidChangeValidationMessage: Event<IInputValidation>;\n\n\tshowNextHistoryValue(): void;\n\tshowPreviousHistoryValue(): void;\n}\n\nexport interface ISCMRepository extends IDisposable {\n\treadonly id: string;\n\treadonly provider: ISCMProvider;\n\treadonly input: ISCMInput;\n}\n\nexport interface ISCMService {\n\n\treadonly _serviceBrand: undefined;\n\treadonly onDidAddRepository: Event<ISCMRepository>;\n\treadonly onDidRemoveRepository: Event<ISCMRepository>;\n\treadonly repositories: Iterable<ISCMRepository>;\n\treadonly repositoryCount: number;\n\n\tregisterSCMProvider(provider: ISCMProvider): ISCMRepository;\n\tgetRepository(id: string): ISCMRepository | undefined;\n}\n\nexport interface ISCMTitleMenu {\n\treadonly actions: IAction[];\n\treadonly secondaryActions: IAction[];\n\treadonly onDidChangeTitle: Event<void>;\n\treadonly menu: IMenu;\n}\n\nexport interface ISCMRepositoryMenus {\n\treadonly titleMenu: ISCMTitleMenu;\n\treadonly repositoryMenu: IMenu;\n\tgetResourceGroupMenu(group: ISCMResourceGroup): IMenu;\n\tgetResourceMenu(resource: ISCMResource): IMenu;\n\tgetResourceFolderMenu(group: ISCMResourceGroup): IMenu;\n}\n\nexport interface ISCMMenus {\n\tgetRepositoryMenus(provider: ISCMProvider): ISCMRepositoryMenus;\n}\n\nexport const enum ISCMRepositorySortKey {\n\tDiscoveryTime = 'discoveryTime',\n\tName = 'name',\n\tPath = 'path'\n}\n\nexport const ISCMViewService = createDecorator<ISCMViewService>('scmView');\n\nexport interface ISCMViewVisibleRepositoryChangeEvent {\n\treadonly added: Iterable<ISCMRepository>;\n\treadonly removed: Iterable<ISCMRepository>;\n}\n\nexport interface ISCMViewService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly menus: ISCMMenus;\n\n\trepositories: ISCMRepository[];\n\treadonly onDidChangeRepositories: Event<ISCMViewVisibleRepositoryChangeEvent>;\n\n\tvisibleRepositories: readonly ISCMRepository[];\n\treadonly onDidChangeVisibleRepositories: Event<ISCMViewVisibleRepositoryChangeEvent>;\n\n\tisVisible(repository: ISCMRepository): boolean;\n\ttoggleVisibility(repository: ISCMRepository, visible?: boolean): void;\n\n\ttoggleSortKey(sortKey: ISCMRepositorySortKey): void;\n\n\treadonly focusedRepository: ISCMRepository | undefined;\n\treadonly onDidFocusRepository: Event<ISCMRepository | undefined>;\n\tfocus(repository: ISCMRepository): void;\n}\n"]}