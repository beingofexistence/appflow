{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/scm/common/quickDiffService.ts"],"names":[],"mappings":"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","file":"quickDiffService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { IQuickDiffService, QuickDiff, QuickDiffProvider } from 'vs/workbench/contrib/scm/common/quickDiff';\nimport { isEqualOrParent } from 'vs/base/common/resources';\nimport { score } from 'vs/editor/common/languageSelector';\nimport { Emitter } from 'vs/base/common/event';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\n\nfunction createProviderComparer(uri: URI): (a: QuickDiffProvider, b: QuickDiffProvider) => number {\n\treturn (a, b) => {\n\t\tif (a.rootUri && !b.rootUri) {\n\t\t\treturn -1;\n\t\t} else if (!a.rootUri && b.rootUri) {\n\t\t\treturn 1;\n\t\t} else if (!a.rootUri && !b.rootUri) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tconst aIsParent = isEqualOrParent(uri, a.rootUri!);\n\t\tconst bIsParent = isEqualOrParent(uri, b.rootUri!);\n\n\t\tif (aIsParent && bIsParent) {\n\t\t\treturn a.rootUri!.fsPath.length - b.rootUri!.fsPath.length;\n\t\t} else if (aIsParent) {\n\t\t\treturn -1;\n\t\t} else if (bIsParent) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t};\n}\n\nexport class QuickDiffService extends Disposable implements IQuickDiffService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate quickDiffProviders: Set<QuickDiffProvider> = new Set();\n\tprivate readonly _onDidChangeQuickDiffProviders = this._register(new Emitter<void>());\n\treadonly onDidChangeQuickDiffProviders = this._onDidChangeQuickDiffProviders.event;\n\n\t// It is common to get many requests for the same resource back to back (ex. when editing a file)\n\t// Cache the last resource so to avoid unneeded extension host round trips.\n\tprivate cachedOriginalResource: { uri: URI; resources: Map<string, URI> } | undefined;\n\n\tconstructor(@IUriIdentityService private readonly uriIdentityService: IUriIdentityService) {\n\t\tsuper();\n\t}\n\n\taddQuickDiffProvider(quickDiff: QuickDiffProvider): IDisposable {\n\t\tthis.quickDiffProviders.add(quickDiff);\n\t\tthis._onDidChangeQuickDiffProviders.fire();\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis.quickDiffProviders.delete(quickDiff);\n\t\t\t\tthis._onDidChangeQuickDiffProviders.fire();\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate isQuickDiff(diff: { originalResource?: URI; label?: string; isSCM?: boolean }): diff is QuickDiff {\n\t\treturn !!diff.originalResource && (typeof diff.label === 'string') && (typeof diff.isSCM === 'boolean');\n\t}\n\n\tprivate getOriginalResourceFromCache(provider: string, uri: URI): URI | undefined {\n\t\tif (this.cachedOriginalResource?.uri.toString() === uri.toString()) {\n\t\t\treturn this.cachedOriginalResource.resources.get(provider);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate updateOriginalResourceCache(uri: URI, quickDiffs: QuickDiff[]) {\n\t\tif (this.cachedOriginalResource?.uri.toString() !== uri.toString()) {\n\t\t\tthis.cachedOriginalResource = { uri, resources: new Map(quickDiffs.map(diff => ([diff.label, diff.originalResource]))) };\n\t\t}\n\t}\n\n\tasync getQuickDiffs(uri: URI, language: string = '', isSynchronized: boolean = false): Promise<QuickDiff[]> {\n\t\tconst providers = Array.from(this.quickDiffProviders)\n\t\t\t.filter(provider => !provider.rootUri || this.uriIdentityService.extUri.isEqualOrParent(uri, provider.rootUri))\n\t\t\t.sort(createProviderComparer(uri));\n\n\t\tconst diffs = await Promise.all(providers.map(async provider => {\n\t\t\tconst scoreValue = provider.selector ? score(provider.selector, uri, language, isSynchronized, undefined, undefined) : 10;\n\t\t\tconst diff: Partial<QuickDiff> = {\n\t\t\t\toriginalResource: scoreValue > 0 ? (this.getOriginalResourceFromCache(provider.label, uri) ?? await provider.getOriginalResource(uri) ?? undefined) : undefined,\n\t\t\t\tlabel: provider.label,\n\t\t\t\tisSCM: provider.isSCM\n\t\t\t};\n\t\t\treturn diff;\n\t\t}));\n\t\tconst quickDiffs = diffs.filter<QuickDiff>(this.isQuickDiff);\n\t\tthis.updateOriginalResourceCache(uri, quickDiffs);\n\t\treturn quickDiffs;\n\t}\n}\n"]}