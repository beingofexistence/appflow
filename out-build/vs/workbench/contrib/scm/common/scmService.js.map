{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/scm/common/scmService.ts"],"names":[],"mappings":"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","file":"scmService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { ISCMService, ISCMProvider, ISCMInput, ISCMRepository, IInputValidator, ISCMInputChangeEvent, SCMInputChangeReason, InputValidationType, IInputValidation } from './scm';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { HistoryNavigator2 } from 'vs/base/common/history';\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\nimport { ResourceMap } from 'vs/base/common/map';\nimport { URI } from 'vs/base/common/uri';\nimport { Iterable } from 'vs/base/common/iterator';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\n\nclass SCMInput implements ISCMInput {\n\n\tprivate _value = '';\n\n\tget value(): string {\n\t\treturn this._value;\n\t}\n\n\tprivate readonly _onDidChange = new Emitter<ISCMInputChangeEvent>();\n\treadonly onDidChange: Event<ISCMInputChangeEvent> = this._onDidChange.event;\n\n\tprivate _placeholder = '';\n\n\tget placeholder(): string {\n\t\treturn this._placeholder;\n\t}\n\n\tset placeholder(placeholder: string) {\n\t\tthis._placeholder = placeholder;\n\t\tthis._onDidChangePlaceholder.fire(placeholder);\n\t}\n\n\tprivate readonly _onDidChangePlaceholder = new Emitter<string>();\n\treadonly onDidChangePlaceholder: Event<string> = this._onDidChangePlaceholder.event;\n\n\tprivate _enabled = true;\n\n\tget enabled(): boolean {\n\t\treturn this._enabled;\n\t}\n\n\tset enabled(enabled: boolean) {\n\t\tthis._enabled = enabled;\n\t\tthis._onDidChangeEnablement.fire(enabled);\n\t}\n\n\tprivate readonly _onDidChangeEnablement = new Emitter<boolean>();\n\treadonly onDidChangeEnablement: Event<boolean> = this._onDidChangeEnablement.event;\n\n\tprivate _visible = true;\n\n\tget visible(): boolean {\n\t\treturn this._visible;\n\t}\n\n\tset visible(visible: boolean) {\n\t\tthis._visible = visible;\n\t\tthis._onDidChangeVisibility.fire(visible);\n\t}\n\n\tprivate readonly _onDidChangeVisibility = new Emitter<boolean>();\n\treadonly onDidChangeVisibility: Event<boolean> = this._onDidChangeVisibility.event;\n\n\tsetFocus(): void {\n\t\tthis._onDidChangeFocus.fire();\n\t}\n\n\tprivate readonly _onDidChangeFocus = new Emitter<void>();\n\treadonly onDidChangeFocus: Event<void> = this._onDidChangeFocus.event;\n\n\tshowValidationMessage(message: string | IMarkdownString, type: InputValidationType): void {\n\t\tthis._onDidChangeValidationMessage.fire({ message: message, type: type });\n\t}\n\n\tprivate readonly _onDidChangeValidationMessage = new Emitter<IInputValidation>();\n\treadonly onDidChangeValidationMessage: Event<IInputValidation> = this._onDidChangeValidationMessage.event;\n\n\tprivate _validateInput: IInputValidator = () => Promise.resolve(undefined);\n\n\tget validateInput(): IInputValidator {\n\t\treturn this._validateInput;\n\t}\n\n\tset validateInput(validateInput: IInputValidator) {\n\t\tthis._validateInput = validateInput;\n\t\tthis._onDidChangeValidateInput.fire();\n\t}\n\n\tprivate readonly _onDidChangeValidateInput = new Emitter<void>();\n\treadonly onDidChangeValidateInput: Event<void> = this._onDidChangeValidateInput.event;\n\n\tprivate readonly historyNavigator: HistoryNavigator2<string>;\n\tprivate didChangeHistory: boolean = false;\n\n\tconstructor(\n\t\treadonly repository: ISCMRepository,\n\t\tprivate readonly history: SCMInputHistory\n\t) {\n\t\tif (this.repository.provider.rootUri) {\n\t\t\tthis.historyNavigator = history.getHistory(this.repository.provider.label, this.repository.provider.rootUri);\n\t\t\tthis.history.onWillSaveHistory(event => {\n\t\t\t\tif (this.historyNavigator.isAtEnd()) {\n\t\t\t\t\tthis.saveValue();\n\t\t\t\t}\n\n\t\t\t\tif (this.didChangeHistory) {\n\t\t\t\t\tevent.historyDidIndeedChange();\n\t\t\t\t}\n\n\t\t\t\tthis.didChangeHistory = false;\n\t\t\t});\n\t\t} else { // in memory only\n\t\t\tthis.historyNavigator = new HistoryNavigator2([''], 100);\n\t\t}\n\n\t\tthis._value = this.historyNavigator.current();\n\t}\n\n\tsetValue(value: string, transient: boolean, reason?: SCMInputChangeReason) {\n\t\tif (value === this._value) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!transient) {\n\t\t\tthis.saveValue();\n\t\t\tthis.historyNavigator.add(value);\n\t\t\tthis.didChangeHistory = true;\n\t\t}\n\n\t\tthis._value = value;\n\t\tthis._onDidChange.fire({ value, reason });\n\t}\n\n\tshowNextHistoryValue(): void {\n\t\tif (this.historyNavigator.isAtEnd()) {\n\t\t\treturn;\n\t\t} else if (!this.historyNavigator.has(this.value)) {\n\t\t\tthis.saveValue();\n\t\t\tthis.historyNavigator.resetCursor();\n\t\t}\n\n\t\tconst value = this.historyNavigator.next();\n\t\tthis.setValue(value, true, SCMInputChangeReason.HistoryNext);\n\t}\n\n\tshowPreviousHistoryValue(): void {\n\t\tif (this.historyNavigator.isAtEnd()) {\n\t\t\tthis.saveValue();\n\t\t} else if (!this.historyNavigator.has(this._value)) {\n\t\t\tthis.saveValue();\n\t\t\tthis.historyNavigator.resetCursor();\n\t\t}\n\n\t\tconst value = this.historyNavigator.previous();\n\t\tthis.setValue(value, true, SCMInputChangeReason.HistoryPrevious);\n\t}\n\n\tprivate saveValue(): void {\n\t\tconst oldValue = this.historyNavigator.replaceLast(this._value);\n\t\tthis.didChangeHistory = this.didChangeHistory || (oldValue !== this._value);\n\t}\n}\n\nclass SCMRepository implements ISCMRepository {\n\n\tprivate _selected = false;\n\tget selected(): boolean {\n\t\treturn this._selected;\n\t}\n\n\tprivate readonly _onDidChangeSelection = new Emitter<boolean>();\n\treadonly onDidChangeSelection: Event<boolean> = this._onDidChangeSelection.event;\n\n\treadonly input: ISCMInput;\n\n\tconstructor(\n\t\tpublic readonly id: string,\n\t\tpublic readonly provider: ISCMProvider,\n\t\tprivate disposable: IDisposable,\n\t\tinputHistory: SCMInputHistory\n\t) {\n\t\tthis.input = new SCMInput(this, inputHistory);\n\t}\n\n\tsetSelected(selected: boolean): void {\n\t\tif (this._selected === selected) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._selected = selected;\n\t\tthis._onDidChangeSelection.fire(selected);\n\t}\n\n\tdispose(): void {\n\t\tthis.disposable.dispose();\n\t\tthis.provider.dispose();\n\t}\n}\n\nclass WillSaveHistoryEvent {\n\tprivate _didChangeHistory = false;\n\tget didChangeHistory() { return this._didChangeHistory; }\n\thistoryDidIndeedChange() { this._didChangeHistory = true; }\n}\n\nclass SCMInputHistory {\n\n\tprivate readonly disposables = new DisposableStore();\n\tprivate readonly histories = new Map<string, ResourceMap<HistoryNavigator2<string>>>();\n\n\tprivate readonly _onWillSaveHistory = this.disposables.add(new Emitter<WillSaveHistoryEvent>());\n\treadonly onWillSaveHistory = this._onWillSaveHistory.event;\n\n\tconstructor(\n\t\t@IStorageService private storageService: IStorageService,\n\t\t@IWorkspaceContextService private workspaceContextService: IWorkspaceContextService,\n\t) {\n\t\tthis.histories = new Map();\n\n\t\tconst entries = this.storageService.getObject<[string, URI, string[]][]>('scm.history', StorageScope.WORKSPACE, []);\n\n\t\tfor (const [providerLabel, rootUri, history] of entries) {\n\t\t\tlet providerHistories = this.histories.get(providerLabel);\n\n\t\t\tif (!providerHistories) {\n\t\t\t\tproviderHistories = new ResourceMap();\n\t\t\t\tthis.histories.set(providerLabel, providerHistories);\n\t\t\t}\n\n\t\t\tproviderHistories.set(rootUri, new HistoryNavigator2(history, 100));\n\t\t}\n\n\t\tif (this.migrateStorage()) {\n\t\t\tthis.saveToStorage();\n\t\t}\n\n\t\tthis.disposables.add(this.storageService.onDidChangeValue(StorageScope.WORKSPACE, 'scm.history', this.disposables)(e => {\n\t\t\tif (e.external && e.key === 'scm.history') {\n\t\t\t\tconst raw = this.storageService.getObject<[string, URI, string[]][]>('scm.history', StorageScope.WORKSPACE, []);\n\n\t\t\t\tfor (const [providerLabel, uri, rawHistory] of raw) {\n\t\t\t\t\tconst history = this.getHistory(providerLabel, uri);\n\n\t\t\t\t\tfor (const value of Iterable.reverse(rawHistory)) {\n\t\t\t\t\t\thistory.prepend(value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis.disposables.add(this.storageService.onWillSaveState(_ => {\n\t\t\tconst event = new WillSaveHistoryEvent();\n\t\t\tthis._onWillSaveHistory.fire(event);\n\n\t\t\tif (event.didChangeHistory) {\n\t\t\t\tthis.saveToStorage();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate saveToStorage(): void {\n\t\tconst raw: [string, URI, string[]][] = [];\n\n\t\tfor (const [providerLabel, providerHistories] of this.histories) {\n\t\t\tfor (const [rootUri, history] of providerHistories) {\n\t\t\t\tif (!(history.size === 1 && history.current() === '')) {\n\t\t\t\t\traw.push([providerLabel, rootUri, [...history]]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.storageService.store('scm.history', raw, StorageScope.WORKSPACE, StorageTarget.USER);\n\t}\n\n\tgetHistory(providerLabel: string, rootUri: URI): HistoryNavigator2<string> {\n\t\tlet providerHistories = this.histories.get(providerLabel);\n\n\t\tif (!providerHistories) {\n\t\t\tproviderHistories = new ResourceMap();\n\t\t\tthis.histories.set(providerLabel, providerHistories);\n\t\t}\n\n\t\tlet history = providerHistories.get(rootUri);\n\n\t\tif (!history) {\n\t\t\thistory = new HistoryNavigator2([''], 100);\n\t\t\tproviderHistories.set(rootUri, history);\n\t\t}\n\n\t\treturn history;\n\t}\n\n\t// Migrates from Application scope storage to Workspace scope.\n\t// TODO@joaomoreno: Change from January 2024 onwards such that the only code is to remove all `scm/input:` storage keys\n\tprivate migrateStorage(): boolean {\n\t\tlet didSomethingChange = false;\n\t\tconst machineKeys = Iterable.filter(this.storageService.keys(StorageScope.APPLICATION, StorageTarget.MACHINE), key => key.startsWith('scm/input:'));\n\n\t\tfor (const key of machineKeys) {\n\t\t\ttry {\n\t\t\t\tconst legacyHistory = JSON.parse(this.storageService.get(key, StorageScope.APPLICATION, ''));\n\t\t\t\tconst match = /^scm\\/input:([^:]+):(.+)$/.exec(key);\n\n\t\t\t\tif (!match || !Array.isArray(legacyHistory?.history) || !Number.isInteger(legacyHistory?.timestamp)) {\n\t\t\t\t\tthis.storageService.remove(key, StorageScope.APPLICATION);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst [, providerLabel, rootPath] = match;\n\t\t\t\tconst rootUri = URI.file(rootPath);\n\n\t\t\t\tif (this.workspaceContextService.getWorkspaceFolder(rootUri)) {\n\t\t\t\t\tconst history = this.getHistory(providerLabel, rootUri);\n\n\t\t\t\t\tfor (const entry of Iterable.reverse(legacyHistory.history as string[])) {\n\t\t\t\t\t\thistory.prepend(entry);\n\t\t\t\t\t}\n\n\t\t\t\t\tdidSomethingChange = true;\n\t\t\t\t\tthis.storageService.remove(key, StorageScope.APPLICATION);\n\t\t\t\t}\n\t\t\t} catch {\n\t\t\t\tthis.storageService.remove(key, StorageScope.APPLICATION);\n\t\t\t}\n\t\t}\n\n\t\treturn didSomethingChange;\n\t}\n\n\tdispose() {\n\t\tthis.disposables.dispose();\n\t}\n}\n\n\nexport class SCMService implements ISCMService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\t_repositories = new Map<string, ISCMRepository>();  // used in tests\n\tget repositories(): Iterable<ISCMRepository> { return this._repositories.values(); }\n\tget repositoryCount(): number { return this._repositories.size; }\n\n\tprivate inputHistory: SCMInputHistory;\n\tprivate providerCount: IContextKey<number>;\n\n\tprivate readonly _onDidAddProvider = new Emitter<ISCMRepository>();\n\treadonly onDidAddRepository: Event<ISCMRepository> = this._onDidAddProvider.event;\n\n\tprivate readonly _onDidRemoveProvider = new Emitter<ISCMRepository>();\n\treadonly onDidRemoveRepository: Event<ISCMRepository> = this._onDidRemoveProvider.event;\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IWorkspaceContextService workspaceContextService: IWorkspaceContextService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IStorageService storageService: IStorageService\n\t) {\n\t\tthis.inputHistory = new SCMInputHistory(storageService, workspaceContextService);\n\t\tthis.providerCount = contextKeyService.createKey('scm.providerCount', 0);\n\t}\n\n\tregisterSCMProvider(provider: ISCMProvider): ISCMRepository {\n\t\tthis.logService.trace('SCMService#registerSCMProvider');\n\n\t\tif (this._repositories.has(provider.id)) {\n\t\t\tthrow new Error(`SCM Provider ${provider.id} already exists.`);\n\t\t}\n\n\t\tconst disposable = toDisposable(() => {\n\t\t\tthis._repositories.delete(provider.id);\n\t\t\tthis._onDidRemoveProvider.fire(repository);\n\t\t\tthis.providerCount.set(this._repositories.size);\n\t\t});\n\n\t\tconst repository = new SCMRepository(provider.id, provider, disposable, this.inputHistory);\n\t\tthis._repositories.set(provider.id, repository);\n\t\tthis._onDidAddProvider.fire(repository);\n\n\t\tthis.providerCount.set(this._repositories.size);\n\t\treturn repository;\n\t}\n\n\tgetRepository(id: string): ISCMRepository | undefined {\n\t\treturn this._repositories.get(id);\n\t}\n}\n"]}