{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/testing/test/browser/testObjectTree.ts"],"names":[],"mappings":"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","file":"testObjectTree.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ObjectTree } from 'vs/base/browser/ui/tree/objectTree';\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IWorkspaceFoldersChangeEvent } from 'vs/platform/workspace/common/workspace';\nimport { ITestTreeProjection, TestExplorerTreeElement, TestItemTreeElement, TestTreeErrorMessage } from 'vs/workbench/contrib/testing/browser/explorerProjections/index';\nimport { MainThreadTestCollection } from 'vs/workbench/contrib/testing/common/mainThreadTestCollection';\nimport { TestsDiff, TestsDiffOp } from 'vs/workbench/contrib/testing/common/testTypes';\nimport { ITestService } from 'vs/workbench/contrib/testing/common/testService';\nimport { testStubs } from 'vs/workbench/contrib/testing/test/common/testStubs';\nimport { ITreeSorter } from 'vs/base/browser/ui/tree/tree';\n\ntype SerializedTree = { e: string; children?: SerializedTree[]; data?: string };\n\nconst element = document.createElement('div');\nelement.style.height = '1000px';\nelement.style.width = '200px';\n\nclass TestObjectTree<T> extends ObjectTree<T, any> {\n\tconstructor(serializer: (node: T) => string, sorter?: ITreeSorter<T>) {\n\t\tsuper(\n\t\t\t'test',\n\t\t\telement,\n\t\t\t{\n\t\t\t\tgetHeight: () => 20,\n\t\t\t\tgetTemplateId: () => 'default'\n\t\t\t},\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tdisposeTemplate: () => undefined,\n\t\t\t\t\trenderElement: (node, _index, container: HTMLElement) => {\n\t\t\t\t\t\tObject.assign(container.dataset, node.element);\n\t\t\t\t\t\tcontainer.textContent = `${node.depth}:${serializer(node.element)}`;\n\t\t\t\t\t},\n\t\t\t\t\trenderTemplate: c => c,\n\t\t\t\t\ttemplateId: 'default'\n\t\t\t\t}\n\t\t\t],\n\t\t\t{\n\t\t\t\tsorter: sorter ?? {\n\t\t\t\t\tcompare: (a, b) => serializer(a).localeCompare(serializer(b))\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\tthis.layout(1000, 200);\n\t}\n\n\tpublic getModel() {\n\t\treturn this.model;\n\t}\n\n\tpublic getRendered(getProperty?: string) {\n\t\tconst elements = element.querySelectorAll<HTMLElement>('.monaco-tl-contents');\n\t\tconst sorted = [...elements].sort((a, b) => pos(a) - pos(b));\n\t\tconst chain: SerializedTree[] = [{ e: '', children: [] }];\n\t\tfor (const element of sorted) {\n\t\t\tconst [depthStr, label] = element.textContent!.split(':');\n\t\t\tconst depth = Number(depthStr);\n\t\t\tconst parent = chain[depth - 1];\n\t\t\tconst child: SerializedTree = { e: label };\n\t\t\tif (getProperty) {\n\t\t\t\tchild.data = element.dataset[getProperty];\n\t\t\t}\n\t\t\tparent.children = parent.children?.concat(child) ?? [child];\n\t\t\tchain[depth] = child;\n\t\t}\n\n\t\treturn chain[0].children;\n\t}\n}\n\nconst pos = (element: Element) => Number(element.parentElement!.parentElement!.getAttribute('aria-posinset'));\n\n\nclass ByLabelTreeSorter implements ITreeSorter<TestExplorerTreeElement> {\n\tpublic compare(a: TestExplorerTreeElement, b: TestExplorerTreeElement): number {\n\t\tif (a instanceof TestTreeErrorMessage || b instanceof TestTreeErrorMessage) {\n\t\t\treturn (a instanceof TestTreeErrorMessage ? -1 : 0) + (b instanceof TestTreeErrorMessage ? 1 : 0);\n\t\t}\n\n\t\tif (a instanceof TestItemTreeElement && b instanceof TestItemTreeElement && a.test.item.uri && b.test.item.uri && a.test.item.uri.toString() === b.test.item.uri.toString() && a.test.item.range && b.test.item.range) {\n\t\t\tconst delta = a.test.item.range.startLineNumber - b.test.item.range.startLineNumber;\n\t\t\tif (delta !== 0) {\n\t\t\t\treturn delta;\n\t\t\t}\n\t\t}\n\n\t\treturn (a.test.item.sortText || a.test.item.label).localeCompare(b.test.item.sortText || b.test.item.label);\n\t}\n}\n\n// names are hard\nexport class TestTreeTestHarness<T extends ITestTreeProjection = ITestTreeProjection> extends Disposable {\n\tprivate readonly onDiff = this._register(new Emitter<TestsDiff>());\n\tpublic readonly onFolderChange = this._register(new Emitter<IWorkspaceFoldersChangeEvent>());\n\tprivate isProcessingDiff = false;\n\tpublic readonly projection: T;\n\tpublic readonly tree: TestObjectTree<TestExplorerTreeElement>;\n\n\tconstructor(makeTree: (listener: ITestService) => T, public readonly c = testStubs.nested()) {\n\t\tsuper();\n\t\tthis._register(c);\n\t\tthis._register(this.c.onDidGenerateDiff(d => this.c.setDiff(d /* don't clear during testing */)));\n\n\t\tconst collection = new MainThreadTestCollection((testId, levels) => {\n\t\t\tthis.c.expand(testId, levels);\n\t\t\tif (!this.isProcessingDiff) {\n\t\t\t\tthis.onDiff.fire(this.c.collectDiff());\n\t\t\t}\n\t\t\treturn Promise.resolve();\n\t\t});\n\t\tthis._register(this.onDiff.event(diff => collection.apply(diff)));\n\n\t\tthis.projection = this._register(makeTree({\n\t\t\tcollection,\n\t\t\tonDidProcessDiff: this.onDiff.event,\n\t\t} as any));\n\t\tconst sorter = new ByLabelTreeSorter();\n\t\tthis.tree = this._register(new TestObjectTree(t => 'test' in t ? t.test.item.label : t.message.toString(), sorter));\n\t\tthis._register(this.tree.onDidChangeCollapseState(evt => {\n\t\t\tif (evt.node.element instanceof TestItemTreeElement) {\n\t\t\t\tthis.projection.expandElement(evt.node.element, evt.deep ? Infinity : 0);\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic pushDiff(...diff: TestsDiffOp[]) {\n\t\tthis.onDiff.fire(diff);\n\t}\n\n\tpublic flush() {\n\t\tthis.isProcessingDiff = true;\n\t\twhile (this.c.currentDiff.length) {\n\t\t\tthis.onDiff.fire(this.c.collectDiff());\n\t\t}\n\t\tthis.isProcessingDiff = false;\n\n\t\tthis.projection.applyTo(this.tree);\n\t\treturn this.tree.getRendered();\n\t}\n}\n"]}