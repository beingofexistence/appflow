{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/testing/test/browser/explorerProjections/hierarchalByName.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAYhG,KAAK,CAAC,4DAA4D,EAAE,GAAG,EAAE;QACxE,IAAI,OAA4C,CAAC;QACjD,IAAI,aAA4C,CAAC;QACjD,IAAI,cAAmB,CAAC;QAExB,QAAQ,CAAC,GAAG,EAAE;YACb,OAAO,CAAC,OAAO,EAAE,CAAC;QACnB,CAAC,CAAC,CAAC;QAEH,IAAA,WAAG,GAAsC,CAAC;QAE1C,KAAK,CAAC,GAAG,EAAE;YACV,aAAa,GAAG,IAAI,WAAG,EAAM,CAAC;YAC9B,cAAc,GAAG;gBAChB,gBAAgB,EAAE,GAAG,EAAE,CAAC,SAAS;gBACjC,aAAa,EAAE,aAAa,CAAC,KAAK;gBAClC,YAAY,EAAE,GAAG,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,EAAE,aAAa,EAAE,CAAC,EAAE,CAAC;aAC/D,CAAC;YAEF,OAAO,GAAG,IAAI,qBAAI,CAAgB,CAAC,CAAC,EAAE,CAAC,IAAI,qBAAI,CAAW,EAAE,EAAE,CAAC,EAAE,cAAqB,CAAC,CAAC,CAAC;QAC1F,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,sBAAsB,EAAE,GAAG,EAAE;YACjC,OAAO,CAAC,KAAK,EAAE,CAAC;YAChB,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE;gBAClD,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE;aACpC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gDAAgD,EAAE,KAAK,IAAI,EAAE;YACjE,OAAO,CAAC,KAAK,EAAE,CAAC;YAChB,OAAO,CAAC,QAAQ,CAAC;gBAChB,EAAE,4BAAoB;gBACtB,IAAI,EAAE,EAAE,YAAY,EAAE,OAAO,EAAE,MAAM,sCAA8B,EAAE,IAAI,EAAE,IAAI,gBAAI,CAAS,IAAI,YAAG,CAAI,CAAC,OAAO,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,UAAU,EAAE,EAAE;aAC1I,EAAE;gBACF,EAAE,4BAAoB;gBACtB,IAAI,EAAE,EAAE,YAAY,EAAE,OAAO,EAAE,MAAM,2CAAmC,EAAE,IAAI,EAAE,IAAI,gBAAI,CAAS,IAAI,YAAG,CAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC,UAAU,EAAE,EAAE;aAC9J,CAAC,CAAC;YAEH,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE;gBACvC,EAAE,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE;gBAC/D,EAAE,CAAC,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE;aACtC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oCAAoC,EAAE,KAAK,IAAI,EAAE;YACrD,OAAO,CAAC,KAAK,EAAE,CAAC;YAEhB,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,gBAAI,CAAS,IAAI,YAAG,CAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;YAEnH,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE;gBACvC,EAAE,CAAC,EAAE,IAAI,EAAE;gBACX,EAAE,CAAC,EAAE,IAAI,EAAE;gBACX,EAAE,CAAC,EAAE,IAAI,EAAE;gBACX,EAAE,CAAC,EAAE,GAAG,EAAE;aACV,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;YACxD,OAAO,CAAC,KAAK,EAAE,CAAC;YAChB,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAE9D,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE;gBACvC,EAAE,CAAC,EAAE,IAAI,EAAE;gBACX,EAAE,CAAC,EAAE,GAAG,EAAE;aACV,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACpD,OAAO,CAAC,KAAK,EAAE,CAAC;YAChB,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,gBAAI,CAAS,IAAI,YAAG,CAAI,CAAC,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;YAEnH,MAAM,CAAC,eAAe,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE;gBACvC,EAAE,CAAC,EAAE,IAAI,EAAE;gBACX,EAAE,CAAC,EAAE,IAAI,EAAE;gBACX,EAAE,CAAC,EAAE,IAAI,EAAE;aACX,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"hierarchalByName.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Emitter } from 'vs/base/common/event';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { ListProjection } from 'vs/workbench/contrib/testing/browser/explorerProjections/listProjection';\nimport { TestId } from 'vs/workbench/contrib/testing/common/testId';\nimport { TestResultItemChange } from 'vs/workbench/contrib/testing/common/testResult';\nimport { TestDiffOpType, TestItemExpandState } from 'vs/workbench/contrib/testing/common/testTypes';\nimport { TestTreeTestHarness } from 'vs/workbench/contrib/testing/test/browser/testObjectTree';\nimport { TestTestItem } from 'vs/workbench/contrib/testing/test/common/testStubs';\n\nsuite('Workbench - Testing Explorer Hierarchal by Name Projection', () => {\n\tlet harness: TestTreeTestHarness<ListProjection>;\n\tlet onTestChanged: Emitter<TestResultItemChange>;\n\tlet resultsService: any;\n\n\tteardown(() => {\n\t\tharness.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(() => {\n\t\tonTestChanged = new Emitter();\n\t\tresultsService = {\n\t\t\tonResultsChanged: () => undefined,\n\t\t\tonTestChanged: onTestChanged.event,\n\t\t\tgetStateById: () => ({ state: { state: 0 }, computedState: 0 }),\n\t\t};\n\n\t\tharness = new TestTreeTestHarness(l => new ListProjection({}, l, resultsService as any));\n\t});\n\n\ttest('renders initial tree', () => {\n\t\tharness.flush();\n\t\tassert.deepStrictEqual(harness.tree.getRendered(), [\n\t\t\t{ e: 'aa' }, { e: 'ab' }, { e: 'b' }\n\t\t]);\n\t});\n\n\ttest('updates render if second test provider appears', async () => {\n\t\tharness.flush();\n\t\tharness.pushDiff({\n\t\t\top: TestDiffOpType.Add,\n\t\t\titem: { controllerId: 'ctrl2', expand: TestItemExpandState.Expanded, item: new TestTestItem(new TestId(['ctrl2']), 'root2').toTestItem() },\n\t\t}, {\n\t\t\top: TestDiffOpType.Add,\n\t\t\titem: { controllerId: 'ctrl2', expand: TestItemExpandState.NotExpandable, item: new TestTestItem(new TestId(['ctrl2', 'id-c']), 'c', undefined).toTestItem() },\n\t\t});\n\n\t\tassert.deepStrictEqual(harness.flush(), [\n\t\t\t{ e: 'root', children: [{ e: 'aa' }, { e: 'ab' }, { e: 'b' }] },\n\t\t\t{ e: 'root2', children: [{ e: 'c' }] },\n\t\t]);\n\t});\n\n\ttest('updates nodes if they add children', async () => {\n\t\tharness.flush();\n\n\t\tharness.c.root.children.get('id-a')!.children.add(new TestTestItem(new TestId(['ctrlId', 'id-a', 'id-ac']), 'ac'));\n\n\t\tassert.deepStrictEqual(harness.flush(), [\n\t\t\t{ e: 'aa' },\n\t\t\t{ e: 'ab' },\n\t\t\t{ e: 'ac' },\n\t\t\t{ e: 'b' }\n\t\t]);\n\t});\n\n\ttest('updates nodes if they remove children', async () => {\n\t\tharness.flush();\n\t\tharness.c.root.children.get('id-a')!.children.delete('id-ab');\n\n\t\tassert.deepStrictEqual(harness.flush(), [\n\t\t\t{ e: 'aa' },\n\t\t\t{ e: 'b' }\n\t\t]);\n\t});\n\n\ttest('swaps when node is no longer leaf', async () => {\n\t\tharness.flush();\n\t\tharness.c.root.children.get('id-b')!.children.add(new TestTestItem(new TestId(['ctrlId', 'id-b', 'id-ba']), 'ba'));\n\n\t\tassert.deepStrictEqual(harness.flush(), [\n\t\t\t{ e: 'aa' },\n\t\t\t{ e: 'ab' },\n\t\t\t{ e: 'ba' },\n\t\t]);\n\t});\n});\n\n"]}