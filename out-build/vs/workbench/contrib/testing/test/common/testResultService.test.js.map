{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/testing/test/common/testResultService.test.ts"],"names":[],"mappings":"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","file":"testResultService.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { timeout } from 'vs/base/common/async';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { MockContextKeyService } from 'vs/platform/keybinding/test/common/mockKeybindingService';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { TestId } from 'vs/workbench/contrib/testing/common/testId';\nimport { TestProfileService } from 'vs/workbench/contrib/testing/common/testProfileService';\nimport { HydratedTestResult, LiveTestResult, TaskRawOutput, TestResultItemChange, TestResultItemChangeReason, resultItemParents } from 'vs/workbench/contrib/testing/common/testResult';\nimport { TestResultService } from 'vs/workbench/contrib/testing/common/testResultService';\nimport { ITestResultStorage, InMemoryResultStorage } from 'vs/workbench/contrib/testing/common/testResultStorage';\nimport { ITestTaskState, ResolvedTestRunRequest, TestResultItem, TestResultState, TestRunProfileBitset } from 'vs/workbench/contrib/testing/common/testTypes';\nimport { makeEmptyCounts } from 'vs/workbench/contrib/testing/common/testingStates';\nimport { TestTestCollection, getInitializedMainTestCollection, testStubs } from 'vs/workbench/contrib/testing/test/common/testStubs';\nimport { TestStorageService } from 'vs/workbench/test/common/workbenchTestServices';\n\nsuite('Workbench - Test Results Service', () => {\n\tconst getLabelsIn = (it: Iterable<TestResultItem>) => [...it].map(t => t.item.label).sort();\n\tconst getChangeSummary = () => [...changed]\n\t\t.map(c => ({ reason: c.reason, label: c.item.item.label }));\n\n\tlet r: TestLiveTestResult;\n\tlet changed = new Set<TestResultItemChange>();\n\tlet tests: TestTestCollection;\n\n\tconst defaultOpts = (testIds: string[]): ResolvedTestRunRequest => ({\n\t\ttargets: [{\n\t\t\tprofileGroup: TestRunProfileBitset.Run,\n\t\t\tprofileId: 0,\n\t\t\tcontrollerId: 'ctrlId',\n\t\t\ttestIds,\n\t\t}]\n\t});\n\n\tclass TestLiveTestResult extends LiveTestResult {\n\t\tconstructor(\n\t\t\tid: string,\n\t\t\tpersist: boolean,\n\t\t\trequest: ResolvedTestRunRequest,\n\t\t) {\n\t\t\tsuper(id, persist, request);\n\t\t\tds.add(this);\n\t\t}\n\n\t\tpublic setAllToStatePublic(state: TestResultState, taskId: string, when: (task: ITestTaskState, item: TestResultItem) => boolean) {\n\t\t\tthis.setAllToState(state, taskId, when);\n\t\t}\n\t}\n\n\tconst ds = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(async () => {\n\t\tchanged = new Set();\n\t\tr = ds.add(new TestLiveTestResult(\n\t\t\t'foo',\n\t\t\ttrue,\n\t\t\tdefaultOpts(['id-a']),\n\t\t));\n\n\t\tds.add(r.onChange(e => changed.add(e)));\n\t\tr.addTask({ id: 't', name: undefined, running: true });\n\n\t\ttests = ds.add(testStubs.nested());\n\t\tconst cts = ds.add(new CancellationTokenSource());\n\t\tconst ok = await Promise.race([\n\t\t\tPromise.resolve(tests.expand(tests.root.id, Infinity)).then(() => true),\n\t\t\ttimeout(1000, cts.token).then(() => false),\n\t\t]);\n\t\tcts.cancel();\n\n\t\t// todo@connor4312: debug for tests #137853:\n\t\tif (!ok) {\n\t\t\tthrow new Error('timed out while expanding, diff: ' + JSON.stringify(tests.collectDiff()));\n\t\t}\n\n\t\tr.addTestChainToRun('ctrlId', [\n\t\t\ttests.root.toTestItem(),\n\t\t\ttests.root.children.get('id-a')!.toTestItem(),\n\t\t\ttests.root.children.get('id-a')!.children.get('id-aa')!.toTestItem(),\n\t\t]);\n\n\t\tr.addTestChainToRun('ctrlId', [\n\t\t\ttests.root.children.get('id-a')!.toTestItem(),\n\t\t\ttests.root.children.get('id-a')!.children.get('id-ab')!.toTestItem(),\n\t\t]);\n\t});\n\n\t// ensureNoDisposablesAreLeakedInTestSuite(); todo@connor4312\n\n\tsuite('LiveTestResult', () => {\n\t\ttest('is empty if no tests are yet present', async () => {\n\t\t\tassert.deepStrictEqual(getLabelsIn(new TestLiveTestResult(\n\t\t\t\t'foo',\n\t\t\t\tfalse,\n\t\t\t\tdefaultOpts(['id-a']),\n\t\t\t).tests), []);\n\t\t});\n\n\t\ttest('initially queues nothing', () => {\n\t\t\tassert.deepStrictEqual(getChangeSummary(), []);\n\t\t});\n\n\t\ttest('initializes with the subtree of requested tests', () => {\n\t\t\tassert.deepStrictEqual(getLabelsIn(r.tests), ['a', 'aa', 'ab', 'root']);\n\t\t});\n\n\t\ttest('initializes with valid counts', () => {\n\t\t\tconst c = makeEmptyCounts();\n\t\t\tc[TestResultState.Unset] = 4;\n\t\t\tassert.deepStrictEqual(r.counts, c);\n\t\t});\n\n\t\ttest('setAllToState', () => {\n\t\t\tchanged.clear();\n\t\t\tr.setAllToStatePublic(TestResultState.Queued, 't', (_, t) => t.item.label !== 'root');\n\t\t\tconst c = makeEmptyCounts();\n\t\t\tc[TestResultState.Unset] = 1;\n\t\t\tc[TestResultState.Queued] = 3;\n\t\t\tassert.deepStrictEqual(r.counts, c);\n\n\t\t\tr.setAllToStatePublic(TestResultState.Failed, 't', (_, t) => t.item.label !== 'root');\n\t\t\tconst c2 = makeEmptyCounts();\n\t\t\tc2[TestResultState.Unset] = 1;\n\t\t\tc2[TestResultState.Failed] = 3;\n\t\t\tassert.deepStrictEqual(r.counts, c2);\n\n\t\t\tassert.deepStrictEqual(r.getStateById(new TestId(['ctrlId', 'id-a']).toString())?.ownComputedState, TestResultState.Failed);\n\t\t\tassert.deepStrictEqual(r.getStateById(new TestId(['ctrlId', 'id-a']).toString())?.tasks[0].state, TestResultState.Failed);\n\t\t\tassert.deepStrictEqual(getChangeSummary(), [\n\t\t\t\t{ label: 'a', reason: TestResultItemChangeReason.OwnStateChange },\n\t\t\t\t{ label: 'root', reason: TestResultItemChangeReason.ComputedStateChange },\n\t\t\t\t{ label: 'aa', reason: TestResultItemChangeReason.OwnStateChange },\n\t\t\t\t{ label: 'ab', reason: TestResultItemChangeReason.OwnStateChange },\n\n\t\t\t\t{ label: 'a', reason: TestResultItemChangeReason.OwnStateChange },\n\t\t\t\t{ label: 'root', reason: TestResultItemChangeReason.ComputedStateChange },\n\t\t\t\t{ label: 'aa', reason: TestResultItemChangeReason.OwnStateChange },\n\t\t\t\t{ label: 'ab', reason: TestResultItemChangeReason.OwnStateChange },\n\t\t\t]);\n\t\t});\n\n\t\ttest('updateState', () => {\n\t\t\tchanged.clear();\n\t\t\tconst testId = new TestId(['ctrlId', 'id-a', 'id-aa']).toString();\n\t\t\tr.updateState(testId, 't', TestResultState.Running);\n\t\t\tconst c = makeEmptyCounts();\n\t\t\tc[TestResultState.Running] = 1;\n\t\t\tc[TestResultState.Unset] = 3;\n\t\t\tassert.deepStrictEqual(r.counts, c);\n\t\t\tassert.deepStrictEqual(r.getStateById(testId)?.ownComputedState, TestResultState.Running);\n\t\t\t// update computed state:\n\t\t\tassert.deepStrictEqual(r.getStateById(tests.root.id)?.computedState, TestResultState.Running);\n\t\t\tassert.deepStrictEqual(getChangeSummary(), [\n\t\t\t\t{ label: 'aa', reason: TestResultItemChangeReason.OwnStateChange },\n\t\t\t\t{ label: 'a', reason: TestResultItemChangeReason.ComputedStateChange },\n\t\t\t\t{ label: 'root', reason: TestResultItemChangeReason.ComputedStateChange },\n\t\t\t]);\n\n\t\t\tr.updateState(testId, 't', TestResultState.Passed);\n\t\t\tassert.deepStrictEqual(r.getStateById(testId)?.ownComputedState, TestResultState.Passed);\n\n\t\t\tr.updateState(testId, 't', TestResultState.Errored);\n\t\t\tassert.deepStrictEqual(r.getStateById(testId)?.ownComputedState, TestResultState.Errored);\n\n\t\t\tr.updateState(testId, 't', TestResultState.Passed);\n\t\t\tassert.deepStrictEqual(r.getStateById(testId)?.ownComputedState, TestResultState.Errored);\n\t\t});\n\n\t\ttest('ignores outside run', () => {\n\t\t\tchanged.clear();\n\t\t\tr.updateState(new TestId(['ctrlId', 'id-b']).toString(), 't', TestResultState.Running);\n\t\t\tconst c = makeEmptyCounts();\n\t\t\tc[TestResultState.Unset] = 4;\n\t\t\tassert.deepStrictEqual(r.counts, c);\n\t\t\tassert.deepStrictEqual(r.getStateById(new TestId(['ctrlId', 'id-b']).toString()), undefined);\n\t\t});\n\n\t\ttest('markComplete', () => {\n\t\t\tr.setAllToStatePublic(TestResultState.Queued, 't', () => true);\n\t\t\tr.updateState(new TestId(['ctrlId', 'id-a', 'id-aa']).toString(), 't', TestResultState.Passed);\n\t\t\tchanged.clear();\n\n\t\t\tr.markComplete();\n\n\t\t\tconst c = makeEmptyCounts();\n\t\t\tc[TestResultState.Unset] = 3;\n\t\t\tc[TestResultState.Passed] = 1;\n\t\t\tassert.deepStrictEqual(r.counts, c);\n\n\t\t\tassert.deepStrictEqual(r.getStateById(tests.root.id)?.ownComputedState, TestResultState.Unset);\n\t\t\tassert.deepStrictEqual(r.getStateById(new TestId(['ctrlId', 'id-a', 'id-aa']).toString())?.ownComputedState, TestResultState.Passed);\n\t\t});\n\t});\n\n\tsuite('service', () => {\n\t\tlet storage: ITestResultStorage;\n\t\tlet results: TestResultService;\n\n\t\tclass TestTestResultService extends TestResultService {\n\t\t\tprotected override persistScheduler = { schedule: () => this.persistImmediately() } as any;\n\t\t}\n\n\t\tsetup(() => {\n\t\t\tstorage = ds.add(new InMemoryResultStorage(ds.add(new TestStorageService()), new NullLogService()));\n\t\t\tresults = ds.add(new TestTestResultService(new MockContextKeyService(), storage, ds.add(new TestProfileService(new MockContextKeyService(), ds.add(new TestStorageService())))));\n\t\t});\n\n\t\ttest('pushes new result', () => {\n\t\t\tresults.push(r);\n\t\t\tassert.deepStrictEqual(results.results, [r]);\n\t\t});\n\n\t\ttest('serializes and re-hydrates', async () => {\n\t\t\tresults.push(r);\n\t\t\tr.updateState(new TestId(['ctrlId', 'id-a', 'id-aa']).toString(), 't', TestResultState.Passed, 42);\n\t\t\tr.markComplete();\n\t\t\tawait timeout(10); // allow persistImmediately async to happen\n\n\t\t\tresults = ds.add(new TestResultService(\n\t\t\t\tnew MockContextKeyService(),\n\t\t\t\tstorage,\n\t\t\t\tds.add(new TestProfileService(new MockContextKeyService(), ds.add(new TestStorageService()))),\n\t\t\t));\n\n\t\t\tassert.strictEqual(0, results.results.length);\n\t\t\tawait timeout(10); // allow load promise to resolve\n\t\t\tassert.strictEqual(1, results.results.length);\n\n\t\t\tconst [rehydrated, actual] = results.getStateById(tests.root.id)!;\n\t\t\tconst expected: any = { ...r.getStateById(tests.root.id)! };\n\t\t\texpected.item.uri = actual.item.uri;\n\t\t\texpected.item.children = undefined;\n\t\t\texpected.retired = true;\n\t\t\tdelete expected.children;\n\t\t\tassert.deepStrictEqual(actual, { ...expected });\n\t\t\tassert.deepStrictEqual(rehydrated.counts, r.counts);\n\t\t\tassert.strictEqual(typeof rehydrated.completedAt, 'number');\n\t\t});\n\n\t\ttest('clears results but keeps ongoing tests', async () => {\n\t\t\tresults.push(r);\n\t\t\tr.markComplete();\n\n\t\t\tconst r2 = results.push(new LiveTestResult(\n\t\t\t\t'',\n\t\t\t\tfalse,\n\t\t\t\tdefaultOpts([]),\n\t\t\t));\n\t\t\tresults.clear();\n\n\t\t\tassert.deepStrictEqual(results.results, [r2]);\n\t\t});\n\n\t\ttest('keeps ongoing tests on top', async () => {\n\t\t\tresults.push(r);\n\t\t\tconst r2 = results.push(new LiveTestResult(\n\t\t\t\t'',\n\t\t\t\tfalse,\n\t\t\t\tdefaultOpts([]),\n\t\t\t));\n\n\t\t\tassert.deepStrictEqual(results.results, [r2, r]);\n\t\t\tr2.markComplete();\n\t\t\tassert.deepStrictEqual(results.results, [r, r2]);\n\t\t\tr.markComplete();\n\t\t\tassert.deepStrictEqual(results.results, [r, r2]);\n\t\t});\n\n\t\tconst makeHydrated = async (completedAt = 42, state = TestResultState.Passed) => new HydratedTestResult({\n\t\t\tcompletedAt,\n\t\t\tid: 'some-id',\n\t\t\ttasks: [{ id: 't', name: undefined }],\n\t\t\tname: 'hello world',\n\t\t\trequest: defaultOpts([]),\n\t\t\titems: [{\n\t\t\t\t...(await getInitializedMainTestCollection()).getNodeById(new TestId(['ctrlId', 'id-a']).toString())!,\n\t\t\t\ttasks: [{ state, duration: 0, messages: [] }],\n\t\t\t\tcomputedState: state,\n\t\t\t\townComputedState: state,\n\t\t\t}]\n\t\t});\n\n\t\ttest('pushes hydrated results', async () => {\n\t\t\tresults.push(r);\n\t\t\tconst hydrated = await makeHydrated();\n\t\t\tresults.push(hydrated);\n\t\t\tassert.deepStrictEqual(results.results, [r, hydrated]);\n\t\t});\n\n\t\ttest('inserts in correct order', async () => {\n\t\t\tresults.push(r);\n\t\t\tconst hydrated1 = await makeHydrated();\n\t\t\tresults.push(hydrated1);\n\t\t\tassert.deepStrictEqual(results.results, [r, hydrated1]);\n\t\t});\n\n\t\ttest('inserts in correct order 2', async () => {\n\t\t\tresults.push(r);\n\t\t\tconst hydrated1 = await makeHydrated();\n\t\t\tresults.push(hydrated1);\n\t\t\tconst hydrated2 = await makeHydrated(30);\n\t\t\tresults.push(hydrated2);\n\t\t\tassert.deepStrictEqual(results.results, [r, hydrated1, hydrated2]);\n\t\t});\n\t});\n\n\ttest('resultItemParents', function () {\n\t\tassert.deepStrictEqual([...resultItemParents(r, r.getStateById(new TestId(['ctrlId', 'id-a', 'id-aa']).toString())!)], [\n\t\t\tr.getStateById(new TestId(['ctrlId', 'id-a', 'id-aa']).toString()),\n\t\t\tr.getStateById(new TestId(['ctrlId', 'id-a']).toString()),\n\t\t\tr.getStateById(new TestId(['ctrlId']).toString()),\n\t\t]);\n\n\t\tassert.deepStrictEqual([...resultItemParents(r, r.getStateById(tests.root.id)!)], [\n\t\t\tr.getStateById(tests.root.id),\n\t\t]);\n\t});\n\n\tsuite('output controller', () => {\n\t\ttest('reads live output ranges', async () => {\n\t\t\tconst ctrl = new TaskRawOutput();\n\n\t\t\tctrl.append(VSBuffer.fromString('12345'));\n\t\t\tctrl.append(VSBuffer.fromString('67890'));\n\t\t\tctrl.append(VSBuffer.fromString('12345'));\n\t\t\tctrl.append(VSBuffer.fromString('67890'));\n\n\t\t\tassert.deepStrictEqual(ctrl.getRange(0, 5), VSBuffer.fromString('12345'));\n\t\t\tassert.deepStrictEqual(ctrl.getRange(5, 5), VSBuffer.fromString('67890'));\n\t\t\tassert.deepStrictEqual(ctrl.getRange(7, 6), VSBuffer.fromString('890123'));\n\t\t\tassert.deepStrictEqual(ctrl.getRange(15, 5), VSBuffer.fromString('67890'));\n\t\t\tassert.deepStrictEqual(ctrl.getRange(15, 10), VSBuffer.fromString('67890'));\n\t\t});\n\n\t\ttest('corrects offsets for marked ranges', async () => {\n\t\t\tconst ctrl = new TaskRawOutput();\n\n\t\t\tconst a1 = ctrl.append(VSBuffer.fromString('12345'), 1);\n\t\t\tconst a2 = ctrl.append(VSBuffer.fromString('67890'), 1234);\n\t\t\tconst a3 = ctrl.append(VSBuffer.fromString('with new line\\r\\n'), 4);\n\n\t\t\tassert.deepStrictEqual(ctrl.getRange(a1.offset, a1.length), VSBuffer.fromString('\\x1b]633;SetMark;Id=s1;Hidden\\x0712345\\x1b]633;SetMark;Id=e1;Hidden\\x07'));\n\t\t\tassert.deepStrictEqual(ctrl.getRange(a2.offset, a2.length), VSBuffer.fromString('\\x1b]633;SetMark;Id=s1234;Hidden\\x0767890\\x1b]633;SetMark;Id=e1234;Hidden\\x07'));\n\t\t\tassert.deepStrictEqual(ctrl.getRange(a3.offset, a3.length), VSBuffer.fromString('\\x1b]633;SetMark;Id=s4;Hidden\\x07with new line\\x1b]633;SetMark;Id=e4;Hidden\\x07\\r\\n'));\n\t\t});\n\t});\n});\n"]}