{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/testing/test/common/testResultStorage.test.ts"],"names":[],"mappings":"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","file":"testResultStorage.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { range } from 'vs/base/common/arrays';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { ITestResult, LiveTestResult } from 'vs/workbench/contrib/testing/common/testResult';\nimport { InMemoryResultStorage, RETAIN_MAX_RESULTS } from 'vs/workbench/contrib/testing/common/testResultStorage';\nimport { testStubs } from 'vs/workbench/contrib/testing/test/common/testStubs';\nimport { TestStorageService } from 'vs/workbench/test/common/workbenchTestServices';\n\nsuite('Workbench - Test Result Storage', () => {\n\tlet storage: InMemoryResultStorage;\n\tlet ds: DisposableStore;\n\n\tconst makeResult = (taskName = 't') => {\n\t\tconst t = ds.add(new LiveTestResult(\n\t\t\t'',\n\t\t\ttrue,\n\t\t\t{ targets: [] }\n\t\t));\n\n\t\tt.addTask({ id: taskName, name: undefined, running: true });\n\t\tconst tests = ds.add(testStubs.nested());\n\t\ttests.expand(tests.root.id, Infinity);\n\t\tt.addTestChainToRun('ctrlId', [\n\t\t\ttests.root.toTestItem(),\n\t\t\ttests.root.children.get('id-a')!.toTestItem(),\n\t\t\ttests.root.children.get('id-a')!.children.get('id-aa')!.toTestItem(),\n\t\t]);\n\n\t\tt.markComplete();\n\t\treturn t;\n\t};\n\n\tconst assertStored = async (stored: ITestResult[]) =>\n\t\tassert.deepStrictEqual((await storage.read()).map(r => r.id), stored.map(s => s.id));\n\n\tsetup(async () => {\n\t\tds = new DisposableStore();\n\t\tstorage = ds.add(new InMemoryResultStorage(ds.add(new TestStorageService()), new NullLogService()));\n\t});\n\n\tteardown(() => ds.dispose());\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('stores a single result', async () => {\n\t\tconst r = range(5).map(() => makeResult());\n\t\tawait storage.persist(r);\n\t\tawait assertStored(r);\n\t});\n\n\ttest('deletes old results', async () => {\n\t\tconst r = range(5).map(() => makeResult());\n\t\tawait storage.persist(r);\n\t\tconst r2 = [makeResult(), ...r.slice(0, 3)];\n\t\tawait storage.persist(r2);\n\t\tawait assertStored(r2);\n\t});\n\n\ttest('limits stored results', async () => {\n\t\tconst r = range(100).map(() => makeResult());\n\t\tawait storage.persist(r);\n\t\tawait assertStored(r.slice(0, RETAIN_MAX_RESULTS));\n\t});\n\n\ttest('limits stored result by budget', async () => {\n\t\tconst r = range(100).map(() => makeResult('a'.repeat(2048)));\n\t\tawait storage.persist(r);\n\t\tconst length = (await storage.read()).length;\n\t\tassert.strictEqual(true, length < 50);\n\t});\n\n\ttest('always stores the min number of results', async () => {\n\t\tconst r = range(20).map(() => makeResult('a'.repeat(1024 * 10)));\n\t\tawait storage.persist(r);\n\t\tawait assertStored(r.slice(0, 16));\n\t});\n\n\ttest('takes into account existing stored bytes', async () => {\n\t\tconst r = range(10).map(() => makeResult('a'.repeat(1024 * 10)));\n\t\tawait storage.persist(r);\n\t\tawait assertStored(r);\n\n\t\tconst r2 = [...r, ...range(10).map(() => makeResult('a'.repeat(1024 * 10)))];\n\t\tawait storage.persist(r2);\n\t\tawait assertStored(r2.slice(0, 16));\n\t});\n});\n"]}