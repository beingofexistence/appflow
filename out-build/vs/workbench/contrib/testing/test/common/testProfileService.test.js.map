{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/testing/test/common/testProfileService.test.ts"],"names":[],"mappings":"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","file":"testProfileService.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n\nimport * as assert from 'assert';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { MockContextKeyService } from 'vs/platform/keybinding/test/common/mockKeybindingService';\nimport { TestProfileService } from 'vs/workbench/contrib/testing/common/testProfileService';\nimport { ITestRunProfile, TestRunProfileBitset } from 'vs/workbench/contrib/testing/common/testTypes';\nimport { TestStorageService } from 'vs/workbench/test/common/workbenchTestServices';\n\nsuite('Workbench - TestProfileService', () => {\n\tlet t: TestProfileService;\n\tlet ds: DisposableStore;\n\tlet idCounter = 0;\n\n\tteardown(() => {\n\t\tds.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(() => {\n\t\tidCounter = 0;\n\t\tds = new DisposableStore();\n\t\tt = ds.add(new TestProfileService(\n\t\t\tnew MockContextKeyService(),\n\t\t\tds.add(new TestStorageService()),\n\t\t));\n\t});\n\n\tconst addProfile = (profile: Partial<ITestRunProfile>) => {\n\t\tconst p: ITestRunProfile = {\n\t\t\tcontrollerId: 'ctrlId',\n\t\t\tgroup: TestRunProfileBitset.Run,\n\t\t\tisDefault: true,\n\t\t\tlabel: 'profile',\n\t\t\tprofileId: idCounter++,\n\t\t\thasConfigurationHandler: false,\n\t\t\ttag: null,\n\t\t\tsupportsContinuousRun: false,\n\t\t\t...profile,\n\t\t};\n\n\t\tt.addProfile(null as any, p);\n\t\treturn p;\n\t};\n\n\tconst expectProfiles = (expected: ITestRunProfile[], actual: string[]) => {\n\t\tconst e = expected.map(e => e.label).sort();\n\t\tconst a = actual.sort();\n\t\tassert.deepStrictEqual(e, a);\n\t};\n\n\ttest('getGroupDefaultProfiles', () => {\n\t\taddProfile({ isDefault: true, group: TestRunProfileBitset.Debug, label: 'a' });\n\t\taddProfile({ isDefault: false, group: TestRunProfileBitset.Debug, label: 'b' });\n\t\taddProfile({ isDefault: true, group: TestRunProfileBitset.Run, label: 'c' });\n\t\taddProfile({ isDefault: true, group: TestRunProfileBitset.Run, label: 'd', controllerId: '2' });\n\t\taddProfile({ isDefault: false, group: TestRunProfileBitset.Run, label: 'e', controllerId: '2' });\n\t\texpectProfiles(t.getGroupDefaultProfiles(TestRunProfileBitset.Run), ['c', 'd']);\n\t\texpectProfiles(t.getGroupDefaultProfiles(TestRunProfileBitset.Debug), ['a']);\n\t});\n\n\tsuite('setGroupDefaultProfiles', () => {\n\t\ttest('applies simple changes', () => {\n\t\t\tconst p1 = addProfile({ isDefault: false, group: TestRunProfileBitset.Debug, label: 'a' });\n\t\t\taddProfile({ isDefault: false, group: TestRunProfileBitset.Debug, label: 'b' });\n\t\t\tconst p3 = addProfile({ isDefault: false, group: TestRunProfileBitset.Run, label: 'c' });\n\t\t\taddProfile({ isDefault: false, group: TestRunProfileBitset.Run, label: 'd' });\n\n\t\t\tt.setGroupDefaultProfiles(TestRunProfileBitset.Run, [p3]);\n\t\t\tassert.deepStrictEqual(t.getGroupDefaultProfiles(TestRunProfileBitset.Run), [p3]);\n\t\t\tassert.deepStrictEqual(t.getGroupDefaultProfiles(TestRunProfileBitset.Debug), [p1]);\n\t\t});\n\n\t\ttest('syncs labels if same', () => {\n\t\t\tconst p1 = addProfile({ isDefault: false, group: TestRunProfileBitset.Debug, label: 'a' });\n\t\t\tconst p2 = addProfile({ isDefault: false, group: TestRunProfileBitset.Debug, label: 'b' });\n\t\t\tconst p3 = addProfile({ isDefault: false, group: TestRunProfileBitset.Run, label: 'a' });\n\t\t\tconst p4 = addProfile({ isDefault: false, group: TestRunProfileBitset.Run, label: 'b' });\n\n\t\t\tt.setGroupDefaultProfiles(TestRunProfileBitset.Run, [p3]);\n\t\t\tassert.deepStrictEqual(t.getGroupDefaultProfiles(TestRunProfileBitset.Run), [p3]);\n\t\t\tassert.deepStrictEqual(t.getGroupDefaultProfiles(TestRunProfileBitset.Debug), [p1]);\n\n\t\t\tt.setGroupDefaultProfiles(TestRunProfileBitset.Debug, [p2]);\n\t\t\tassert.deepStrictEqual(t.getGroupDefaultProfiles(TestRunProfileBitset.Run), [p4]);\n\t\t\tassert.deepStrictEqual(t.getGroupDefaultProfiles(TestRunProfileBitset.Debug), [p2]);\n\t\t});\n\n\t\ttest('does not mess up sync for multiple controllers', () => {\n\t\t\t// ctrl a and b both of have their own labels. ctrl c does not and should be unaffected\n\t\t\tconst p1 = addProfile({ isDefault: false, controllerId: 'a', group: TestRunProfileBitset.Debug, label: 'a' });\n\t\t\tconst p2 = addProfile({ isDefault: false, controllerId: 'b', group: TestRunProfileBitset.Debug, label: 'b1' });\n\t\t\tconst p3 = addProfile({ isDefault: false, controllerId: 'b', group: TestRunProfileBitset.Debug, label: 'b2' });\n\t\t\tconst p4 = addProfile({ isDefault: false, controllerId: 'c', group: TestRunProfileBitset.Debug, label: 'c1' });\n\n\t\t\tconst p5 = addProfile({ isDefault: false, controllerId: 'a', group: TestRunProfileBitset.Run, label: 'a' });\n\t\t\tconst p6 = addProfile({ isDefault: false, controllerId: 'b', group: TestRunProfileBitset.Run, label: 'b1' });\n\t\t\tconst p7 = addProfile({ isDefault: false, controllerId: 'b', group: TestRunProfileBitset.Run, label: 'b2' });\n\t\t\tconst p8 = addProfile({ isDefault: false, controllerId: 'b', group: TestRunProfileBitset.Run, label: 'b3' });\n\n\t\t\t// same profile on both\n\t\t\tt.setGroupDefaultProfiles(TestRunProfileBitset.Debug, [p3]);\n\t\t\tassert.deepStrictEqual(t.getGroupDefaultProfiles(TestRunProfileBitset.Run), [p7]);\n\t\t\tassert.deepStrictEqual(t.getGroupDefaultProfiles(TestRunProfileBitset.Debug), [p3]);\n\n\t\t\t// different profile, other should be unaffected\n\t\t\tt.setGroupDefaultProfiles(TestRunProfileBitset.Run, [p8]);\n\t\t\tassert.deepStrictEqual(t.getGroupDefaultProfiles(TestRunProfileBitset.Run), [p8]);\n\t\t\tassert.deepStrictEqual(t.getGroupDefaultProfiles(TestRunProfileBitset.Debug), [p3]);\n\n\t\t\t// multiple changes in one go, with unmatched c\n\t\t\tt.setGroupDefaultProfiles(TestRunProfileBitset.Debug, [p1, p2, p4]);\n\t\t\tassert.deepStrictEqual(t.getGroupDefaultProfiles(TestRunProfileBitset.Run), [p5, p6]);\n\t\t\tassert.deepStrictEqual(t.getGroupDefaultProfiles(TestRunProfileBitset.Debug), [p1, p2, p4]);\n\n\t\t\t// identity\n\t\t\tt.setGroupDefaultProfiles(TestRunProfileBitset.Run, [p5, p8]);\n\t\t\tassert.deepStrictEqual(t.getGroupDefaultProfiles(TestRunProfileBitset.Run), [p5, p8]);\n\t\t\tassert.deepStrictEqual(t.getGroupDefaultProfiles(TestRunProfileBitset.Debug), [p2, p4, p1]);\n\t\t});\n\t});\n});\n"]}