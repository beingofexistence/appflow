{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/testing/test/common/testExplorerFilterState.test.ts"],"names":[],"mappings":"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","file":"testExplorerFilterState.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { InMemoryStorageService } from 'vs/platform/storage/common/storage';\nimport { TestExplorerFilterState, TestFilterTerm } from 'vs/workbench/contrib/testing/common/testExplorerFilterState';\n\nsuite('TestExplorerFilterState', () => {\n\tlet t: TestExplorerFilterState;\n\tlet ds: DisposableStore;\n\n\tteardown(() => {\n\t\tds.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(() => {\n\t\tds = new DisposableStore();\n\t\tt = ds.add(new TestExplorerFilterState(ds.add(new InMemoryStorageService())));\n\t});\n\n\tconst assertFilteringFor = (expected: { [T in TestFilterTerm]?: boolean }) => {\n\t\tfor (const [term, expectation] of Object.entries(expected)) {\n\t\t\tassert.strictEqual(t.isFilteringFor(term as TestFilterTerm), expectation, `expected filtering for ${term} === ${expectation}`);\n\t\t}\n\t};\n\n\tconst termFiltersOff = {\n\t\t[TestFilterTerm.Failed]: false,\n\t\t[TestFilterTerm.Executed]: false,\n\t\t[TestFilterTerm.CurrentDoc]: false,\n\t\t[TestFilterTerm.Hidden]: false,\n\t};\n\n\ttest('filters simple globs', () => {\n\t\tt.setText('hello, !world');\n\t\tassert.deepStrictEqual(t.globList, [{ text: 'hello', include: true }, { text: 'world', include: false }]);\n\t\tassert.deepStrictEqual(t.includeTags, new Set());\n\t\tassert.deepStrictEqual(t.excludeTags, new Set());\n\t\tassertFilteringFor(termFiltersOff);\n\t});\n\n\ttest('filters to patterns', () => {\n\t\tt.setText('@doc');\n\t\tassert.deepStrictEqual(t.globList, []);\n\t\tassert.deepStrictEqual(t.includeTags, new Set());\n\t\tassert.deepStrictEqual(t.excludeTags, new Set());\n\t\tassertFilteringFor({\n\t\t\t...termFiltersOff,\n\t\t\t[TestFilterTerm.CurrentDoc]: true,\n\t\t});\n\t});\n\n\ttest('filters to tags', () => {\n\t\tt.setText('@hello:world !@foo:bar');\n\t\tassert.deepStrictEqual(t.globList, []);\n\t\tassert.deepStrictEqual(t.includeTags, new Set(['hello\\0world']));\n\t\tassert.deepStrictEqual(t.excludeTags, new Set(['foo\\0bar']));\n\t\tassertFilteringFor(termFiltersOff);\n\t});\n\n\ttest('filters to mixed terms and tags', () => {\n\t\tt.setText('@hello:world foo, !bar @doc !@foo:bar');\n\t\tassert.deepStrictEqual(t.globList, [{ text: 'foo', include: true }, { text: 'bar', include: false }]);\n\t\tassert.deepStrictEqual(t.includeTags, new Set(['hello\\0world']));\n\t\tassert.deepStrictEqual(t.excludeTags, new Set(['foo\\0bar']));\n\t\tassertFilteringFor({\n\t\t\t...termFiltersOff,\n\t\t\t[TestFilterTerm.CurrentDoc]: true,\n\t\t});\n\t});\n\n\ttest('parses quotes', () => {\n\t\tt.setText('@hello:\"world\" @foo:\\'bar\\' baz');\n\t\tassert.deepStrictEqual(t.globList, [{ text: 'baz', include: true }]);\n\t\tassert.deepStrictEqual([...t.includeTags], ['hello\\0world', 'foo\\0bar']);\n\t\tassert.deepStrictEqual(t.excludeTags, new Set());\n\t});\n\n\ttest('parses quotes with escapes', () => {\n\t\tt.setText('@hello:\"world\\\\\"1\" foo');\n\t\tassert.deepStrictEqual(t.globList, [{ text: 'foo', include: true }]);\n\t\tassert.deepStrictEqual([...t.includeTags], ['hello\\0world\"1']);\n\t\tassert.deepStrictEqual(t.excludeTags, new Set());\n\t});\n});\n"]}