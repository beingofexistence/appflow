{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/testing/common/testExplorerFilterState.ts"],"names":[],"mappings":"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","file":"testExplorerFilterState.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { splitGlobAware } from 'vs/base/common/glob';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IObservableValue, MutableObservableValue } from 'vs/workbench/contrib/testing/common/observableValue';\nimport { StoredValue } from 'vs/workbench/contrib/testing/common/storedValue';\nimport { namespaceTestTag } from 'vs/workbench/contrib/testing/common/testTypes';\n\nexport interface ITestExplorerFilterState {\n\t_serviceBrand: undefined;\n\n\t/** Current filter text */\n\treadonly text: IObservableValue<string>;\n\n\t/** Test ID the user wants to reveal in the explorer */\n\treadonly reveal: MutableObservableValue<string | undefined>;\n\n\t/** Event that fires when {@link focusInput} is invoked. */\n\treadonly onDidRequestInputFocus: Event<void>;\n\n\t/**\n\t * Glob list to filter for based on the {@link text}\n\t */\n\treadonly globList: readonly { include: boolean; text: string }[];\n\n\t/**\n\t * The user requested to filter including tags.\n\t */\n\treadonly includeTags: ReadonlySet<string>;\n\n\t/**\n\t * The user requested to filter excluding tags.\n\t */\n\treadonly excludeTags: ReadonlySet<string>;\n\n\t/**\n\t * Whether fuzzy searching is enabled.\n\t */\n\treadonly fuzzy: MutableObservableValue<boolean>;\n\n\t/**\n\t * Focuses the filter input in the test explorer view.\n\t */\n\tfocusInput(): void;\n\n\t/**\n\t * Replaces the filter {@link text}.\n\t */\n\tsetText(text: string): void;\n\n\t/**\n\t * Sets whether the {@link text} is filtering for a special term.\n\t */\n\tisFilteringFor(term: TestFilterTerm): boolean;\n\n\t/**\n\t * Sets whether the {@link text} includes a special filter term.\n\t */\n\ttoggleFilteringFor(term: TestFilterTerm, shouldFilter?: boolean): void;\n}\n\nexport const ITestExplorerFilterState = createDecorator<ITestExplorerFilterState>('testingFilterState');\n\nconst tagRe = /!?@([^ ,:]+)/g;\nconst trimExtraWhitespace = (str: string) => str.replace(/\\s\\s+/g, ' ').trim();\n\nexport class TestExplorerFilterState extends Disposable implements ITestExplorerFilterState {\n\tdeclare _serviceBrand: undefined;\n\tprivate readonly focusEmitter = new Emitter<void>();\n\t/**\n\t * Mapping of terms to whether they're included in the text.\n\t */\n\tprivate termFilterState: { [K in TestFilterTerm]?: true } = {};\n\n\t/** @inheritdoc */\n\tpublic globList: { include: boolean; text: string }[] = [];\n\n\t/** @inheritdoc */\n\tpublic includeTags = new Set<string>();\n\n\t/** @inheritdoc */\n\tpublic excludeTags = new Set<string>();\n\n\t/** @inheritdoc */\n\tpublic readonly text = this._register(new MutableObservableValue(''));\n\n\t/** @inheritdoc */\n\tpublic readonly fuzzy = this._register(MutableObservableValue.stored(new StoredValue<boolean>({\n\t\tkey: 'testHistoryFuzzy',\n\t\tscope: StorageScope.PROFILE,\n\t\ttarget: StorageTarget.USER,\n\t}, this.storageService), false));\n\n\tpublic readonly reveal = this._register(new MutableObservableValue</* test ID */string | undefined>(undefined));\n\n\tpublic readonly onDidRequestInputFocus = this.focusEmitter.event;\n\n\tconstructor(@IStorageService private readonly storageService: IStorageService) {\n\t\tsuper();\n\t}\n\n\t/** @inheritdoc */\n\tpublic focusInput() {\n\t\tthis.focusEmitter.fire();\n\t}\n\n\t/** @inheritdoc */\n\tpublic setText(text: string) {\n\t\tif (text === this.text.value) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.termFilterState = {};\n\t\tthis.globList = [];\n\t\tthis.includeTags.clear();\n\t\tthis.excludeTags.clear();\n\n\t\tlet globText = '';\n\t\tlet lastIndex = 0;\n\t\tfor (const match of text.matchAll(tagRe)) {\n\t\t\tlet nextIndex = match.index! + match[0].length;\n\n\t\t\tconst tag = match[0];\n\t\t\tif (allTestFilterTerms.includes(tag as TestFilterTerm)) {\n\t\t\t\tthis.termFilterState[tag as TestFilterTerm] = true;\n\t\t\t}\n\n\t\t\t// recognize and parse @ctrlId:tagId or quoted like @ctrlId:\"tag \\\\\"id\"\n\t\t\tif (text[nextIndex] === ':') {\n\t\t\t\tnextIndex++;\n\n\t\t\t\tlet delimiter = text[nextIndex];\n\t\t\t\tif (delimiter !== `\"` && delimiter !== `'`) {\n\t\t\t\t\tdelimiter = ' ';\n\t\t\t\t} else {\n\t\t\t\t\tnextIndex++;\n\t\t\t\t}\n\n\t\t\t\tlet tagId = '';\n\t\t\t\twhile (nextIndex < text.length && text[nextIndex] !== delimiter) {\n\t\t\t\t\tif (text[nextIndex] === '\\\\') {\n\t\t\t\t\t\ttagId += text[nextIndex + 1];\n\t\t\t\t\t\tnextIndex += 2;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttagId += text[nextIndex];\n\t\t\t\t\t\tnextIndex++;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (match[0].startsWith('!')) {\n\t\t\t\t\tthis.excludeTags.add(namespaceTestTag(match[1], tagId));\n\t\t\t\t} else {\n\t\t\t\t\tthis.includeTags.add(namespaceTestTag(match[1], tagId));\n\t\t\t\t}\n\t\t\t\tnextIndex++;\n\t\t\t}\n\n\t\t\tglobText += text.slice(lastIndex, match.index);\n\t\t\tlastIndex = nextIndex;\n\t\t}\n\n\t\tglobText += text.slice(lastIndex).trim();\n\n\t\tif (globText.length) {\n\t\t\tfor (const filter of splitGlobAware(globText, ',').map(s => s.trim()).filter(s => !!s.length)) {\n\t\t\t\tif (filter.startsWith('!')) {\n\t\t\t\t\tthis.globList.push({ include: false, text: filter.slice(1).toLowerCase() });\n\t\t\t\t} else {\n\t\t\t\t\tthis.globList.push({ include: true, text: filter.toLowerCase() });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.text.value = text; // purposely afterwards so everything is updated when the change event happen\n\t}\n\n\t/** @inheritdoc */\n\tpublic isFilteringFor(term: TestFilterTerm) {\n\t\treturn !!this.termFilterState[term];\n\t}\n\n\t/** @inheritdoc */\n\tpublic toggleFilteringFor(term: TestFilterTerm, shouldFilter?: boolean) {\n\t\tconst text = this.text.value.trim();\n\t\tif (shouldFilter !== false && !this.termFilterState[term]) {\n\t\t\tthis.setText(text ? `${text} ${term}` : term);\n\t\t} else if (shouldFilter !== true && this.termFilterState[term]) {\n\t\t\tthis.setText(trimExtraWhitespace(text.replace(term, '')));\n\t\t}\n\t}\n}\n\nexport const enum TestFilterTerm {\n\tFailed = '@failed',\n\tExecuted = '@executed',\n\tCurrentDoc = '@doc',\n\tHidden = '@hidden',\n}\n\nconst allTestFilterTerms: readonly TestFilterTerm[] = [\n\tTestFilterTerm.Failed,\n\tTestFilterTerm.Executed,\n\tTestFilterTerm.CurrentDoc,\n\tTestFilterTerm.Hidden,\n];\n"]}