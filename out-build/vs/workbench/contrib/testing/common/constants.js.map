{"version":3,"sources":["vs/workbench/contrib/testing/common/constants.ts"],"names":[],"mappings":"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","file":"constants.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { stripIcons } from 'vs/base/common/iconLabels';\nimport { localize } from 'vs/nls';\nimport { TestResultState, TestRunProfileBitset } from 'vs/workbench/contrib/testing/common/testTypes';\n\nexport const enum Testing {\n\t// marked as \"extension\" so that any existing test extensions are assigned to it.\n\tViewletId = 'workbench.view.extension.test',\n\tExplorerViewId = 'workbench.view.testing',\n\tOutputPeekContributionId = 'editor.contrib.testingOutputPeek',\n\tDecorationsContributionId = 'editor.contrib.testingDecorations',\n\n\tResultsPanelId = 'workbench.panel.testResults',\n\tResultsViewId = 'workbench.panel.testResults.view',\n}\n\nexport const enum TestExplorerViewMode {\n\tList = 'list',\n\tTree = 'true'\n}\n\nexport const enum TestExplorerViewSorting {\n\tByLocation = 'location',\n\tByStatus = 'status',\n\tByDuration = 'duration',\n}\n\nconst testStateNames: { [K in TestResultState]: string } = {\n\t[TestResultState.Errored]: localize('testState.errored', 'Errored'),\n\t[TestResultState.Failed]: localize('testState.failed', 'Failed'),\n\t[TestResultState.Passed]: localize('testState.passed', 'Passed'),\n\t[TestResultState.Queued]: localize('testState.queued', 'Queued'),\n\t[TestResultState.Running]: localize('testState.running', 'Running'),\n\t[TestResultState.Skipped]: localize('testState.skipped', 'Skipped'),\n\t[TestResultState.Unset]: localize('testState.unset', 'Not yet run'),\n};\n\nexport const labelForTestInState = (label: string, state: TestResultState) => localize({\n\tkey: 'testing.treeElementLabel',\n\tcomment: ['label then the unit tests state, for example \"Addition Tests (Running)\"'],\n}, '{0} ({1})', stripIcons(label), testStateNames[state]);\n\nexport const testConfigurationGroupNames: Partial<Record<TestRunProfileBitset, string | undefined>> = {\n\t[TestRunProfileBitset.Debug]: localize('testGroup.debug', 'Debug'),\n\t[TestRunProfileBitset.Run]: localize('testGroup.run', 'Run'),\n\t[TestRunProfileBitset.Coverage]: localize('testGroup.coverage', 'Coverage'),\n};\n\nexport const enum TestCommandId {\n\tCancelTestRefreshAction = 'testing.cancelTestRefresh',\n\tCancelTestRunAction = 'testing.cancelRun',\n\tClearTestResultsAction = 'testing.clearTestResults',\n\tCollapseAllAction = 'testing.collapseAll',\n\tConfigureTestProfilesAction = 'testing.configureProfile',\n\tContinousRunUsingForTest = 'testing.continuousRunUsingForTest',\n\tDebugAction = 'testing.debug',\n\tDebugAllAction = 'testing.debugAll',\n\tDebugAtCursor = 'testing.debugAtCursor',\n\tDebugCurrentFile = 'testing.debugCurrentFile',\n\tDebugFailedTests = 'testing.debugFailTests',\n\tDebugLastRun = 'testing.debugLastRun',\n\tDebugSelectedAction = 'testing.debugSelected',\n\tFilterAction = 'workbench.actions.treeView.testExplorer.filter',\n\tGetExplorerSelection = '_testing.getExplorerSelection',\n\tGetSelectedProfiles = 'testing.getSelectedProfiles',\n\tGoToTest = 'testing.editFocusedTest',\n\tHideTestAction = 'testing.hideTest',\n\tOpenOutputPeek = 'testing.openOutputPeek',\n\tRefreshTestsAction = 'testing.refreshTests',\n\tReRunFailedTests = 'testing.reRunFailTests',\n\tReRunLastRun = 'testing.reRunLastRun',\n\tRunAction = 'testing.run',\n\tRunAllAction = 'testing.runAll',\n\tRunAtCursor = 'testing.runAtCursor',\n\tRunCurrentFile = 'testing.runCurrentFile',\n\tRunSelectedAction = 'testing.runSelected',\n\tRunUsingProfileAction = 'testing.runUsing',\n\tSearchForTestExtension = 'testing.searchForTestExtension',\n\tSelectDefaultTestProfiles = 'testing.selectDefaultTestProfiles',\n\tShowMostRecentOutputAction = 'testing.showMostRecentOutput',\n\tStartContinousRun = 'testing.startContinuousRun',\n\tStopContinousRun = 'testing.stopContinuousRun',\n\tTestingSortByDurationAction = 'testing.sortByDuration',\n\tTestingSortByLocationAction = 'testing.sortByLocation',\n\tTestingSortByStatusAction = 'testing.sortByStatus',\n\tTestingViewAsListAction = 'testing.viewAsList',\n\tTestingViewAsTreeAction = 'testing.viewAsTree',\n\tToggleContinousRunForTest = 'testing.toggleContinuousRunForTest',\n\tToggleInlineTestOutput = 'testing.toggleInlineTestOutput',\n\tUnhideAllTestsAction = 'testing.unhideAllTests',\n\tUnhideTestAction = 'testing.unhideTest',\n}\n"]}