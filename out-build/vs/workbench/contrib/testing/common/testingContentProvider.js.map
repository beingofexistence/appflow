{"version":3,"sources":["vs/workbench/contrib/testing/common/testingContentProvider.ts"],"names":[],"mappings":"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","file":"testingContentProvider.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { removeAnsiEscapeCodes } from 'vs/base/common/strings';\nimport { URI } from 'vs/base/common/uri';\nimport { ILanguageSelection, ILanguageService } from 'vs/editor/common/languages/language';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { ITextModelContentProvider, ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { localize } from 'vs/nls';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { ITestResultService } from 'vs/workbench/contrib/testing/common/testResultService';\nimport { TestMessageType } from 'vs/workbench/contrib/testing/common/testTypes';\nimport { TEST_DATA_SCHEME, TestUriType, parseTestUri } from 'vs/workbench/contrib/testing/common/testingUri';\n\n/**\n * A content provider that returns various outputs for tests. This is used\n * in the inline peek view.\n */\nexport class TestingContentProvider implements IWorkbenchContribution, ITextModelContentProvider {\n\tconstructor(\n\t\t@ITextModelService textModelResolverService: ITextModelService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@ITestResultService private readonly resultService: ITestResultService,\n\t) {\n\t\ttextModelResolverService.registerTextModelContentProvider(TEST_DATA_SCHEME, this);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async provideTextContent(resource: URI): Promise<ITextModel | null> {\n\t\tconst existing = this.modelService.getModel(resource);\n\t\tif (existing && !existing.isDisposed()) {\n\t\t\treturn existing;\n\t\t}\n\n\t\tconst parsed = parseTestUri(resource);\n\t\tif (!parsed) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst result = this.resultService.getResult(parsed.resultId);\n\t\tif (!result) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (parsed.type === TestUriType.TaskOutput) {\n\t\t\tconst task = result.tasks[parsed.taskIndex];\n\t\t\tconst model = this.modelService.createModel('', null, resource, false);\n\t\t\tconst append = (text: string) => model.applyEdits([{\n\t\t\t\trange: { startColumn: 1, endColumn: 1, startLineNumber: Infinity, endLineNumber: Infinity },\n\t\t\t\ttext,\n\t\t\t}]);\n\n\t\t\tconst init = VSBuffer.concat(task.output.buffers, task.output.length).toString();\n\t\t\tappend(removeAnsiEscapeCodes(init));\n\n\t\t\tlet hadContent = init.length > 0;\n\t\t\tconst dispose = new DisposableStore();\n\t\t\tdispose.add(task.output.onDidWriteData(d => {\n\t\t\t\thadContent ||= d.byteLength > 0;\n\t\t\t\tappend(removeAnsiEscapeCodes(d.toString()));\n\t\t\t}));\n\t\t\ttask.output.endPromise.then(() => {\n\t\t\t\tif (dispose.isDisposed) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (!hadContent) {\n\t\t\t\t\tappend(localize('runNoOutout', 'The test run did not record any output.'));\n\t\t\t\t\tdispose.dispose();\n\t\t\t\t}\n\t\t\t});\n\t\t\tmodel.onWillDispose(() => dispose.dispose());\n\n\t\t\treturn model;\n\t\t}\n\n\t\tconst test = result?.getStateById(parsed.testExtId);\n\t\tif (!test) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet text: string | undefined;\n\t\tlet language: ILanguageSelection | null = null;\n\t\tswitch (parsed.type) {\n\t\t\tcase TestUriType.ResultActualOutput: {\n\t\t\t\tconst message = test.tasks[parsed.taskIndex].messages[parsed.messageIndex];\n\t\t\t\tif (message?.type === TestMessageType.Error) { text = message.actual; }\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase TestUriType.TestOutput: {\n\t\t\t\ttext = '';\n\t\t\t\tconst output = result.tasks[parsed.taskIndex].output;\n\t\t\t\tfor (const message of test.tasks[parsed.taskIndex].messages) {\n\t\t\t\t\tif (message.type === TestMessageType.Output) {\n\t\t\t\t\t\ttext += removeAnsiEscapeCodes(output.getRange(message.offset, message.length).toString());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase TestUriType.ResultExpectedOutput: {\n\t\t\t\tconst message = test.tasks[parsed.taskIndex].messages[parsed.messageIndex];\n\t\t\t\tif (message?.type === TestMessageType.Error) { text = message.expected; }\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase TestUriType.ResultMessage: {\n\t\t\t\tconst message = test.tasks[parsed.taskIndex].messages[parsed.messageIndex];\n\t\t\t\tif (!message) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (message.type === TestMessageType.Output) {\n\t\t\t\t\tconst content = result.tasks[parsed.taskIndex].output.getRange(message.offset, message.length);\n\t\t\t\t\ttext = removeAnsiEscapeCodes(content.toString());\n\t\t\t\t} else if (typeof message.message === 'string') {\n\t\t\t\t\ttext = message.message;\n\t\t\t\t} else {\n\t\t\t\t\ttext = message.message.value;\n\t\t\t\t\tlanguage = this.languageService.createById('markdown');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (text === undefined) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.modelService.createModel(text, language, resource, false);\n\t}\n}\n"]}