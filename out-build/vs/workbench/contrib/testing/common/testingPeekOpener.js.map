{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/testing/common/testingPeekOpener.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAmDnF,QAAA,IAAI,GAAiB,IAAA,mBAAG,EAAiC,mBAAmB,CAAC,CAAC","file":"testingPeekOpener.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { ITextEditorOptions } from 'vs/platform/editor/common/editor';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { TestResultItem } from 'vs/workbench/contrib/testing/common/testTypes';\nimport { ITestResult } from 'vs/workbench/contrib/testing/common/testResult';\nimport { IEditor } from 'vs/editor/common/editorCommon';\nimport { MutableObservableValue } from 'vs/workbench/contrib/testing/common/observableValue';\n\nexport interface IShowResultOptions {\n\t/** Reveal the peek, if configured, in the given editor */\n\tinEditor?: IEditor;\n\t/** Editor options, if a new editor is opened */\n\toptions?: Partial<ITextEditorOptions>;\n}\n\nexport interface ITestingPeekOpener {\n\t_serviceBrand: undefined;\n\n\t/** Whether test history should be shown in the results output. */\n\thistoryVisible: MutableObservableValue<boolean>;\n\n\t/**\n\t * Tries to peek the first test error, if the item is in a failed state.\n\t * @returns a boolean indicating whether a peek was opened\n\t */\n\ttryPeekFirstError(result: ITestResult, test: TestResultItem, options?: Partial<ITextEditorOptions>): boolean;\n\n\t/**\n\t * Peeks at the given test message uri.\n\t * @returns a boolean indicating whether a peek was opened\n\t */\n\tpeekUri(uri: URI, options?: IShowResultOptions): boolean;\n\n\t/**\n\t * Opens the currently selected message in an editor.\n\t */\n\topenCurrentInEditor(): void;\n\n\t/**\n\t * Opens the peek. Shows any available message.\n\t */\n\topen(): void;\n\n\t/**\n\t * Closes peeks for all visible editors.\n\t */\n\tcloseAllPeeks(): void;\n}\n\nexport const ITestingPeekOpener = createDecorator<ITestingPeekOpener>('testingPeekOpener');\n\n"]}