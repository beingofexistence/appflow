{"version":3,"sources":["vs/workbench/contrib/testing/common/testServiceImpl.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IA6BzF,IAAM,IAAI,GAAV,MAAM,IAAY,SAAQ,eAAG;QAqDnC,YACqB,iBAAsB,EACnB,oBAAyB,EAC/B,CAA6B,EAC9B,CAAmC,EAC9B,CAAmC,EAClC,CAAyC,EACxC,CAA0C,EAC7C,CAAkC,EACvB,CAAkD;YAEjF,KAAK,EAAE,CAAC;YAR0B,MAAC,GAAD,CAAC,CAAW;YACb,MAAC,GAAD,CAAC,CAAiB;YACb,MAAC,GAAD,CAAC,CAAiB;YACjB,MAAC,GAAD,CAAC,CAAuB;YACvB,MAAC,GAAD,CAAC,CAAwB;YAC5B,MAAC,GAAD,CAAC,CAAgB;YACN,MAAC,GAAD,CAAC,CAAgC;YA5D1E,MAAC,GAAiB,IAAI,GAAG,EAAqC,CAAC;YAEtD,MAAC,GAA+B,IAAI,WAAG,EAAqC,CAAC;YAC7E,MAAC,GAAwB,IAAI,WAAG,EAAiB,CAAC;YAClD,MAAC,GAAuB,IAAI,WAAG,EAAiB,CAAC;YACjD,MAAC,GAA0B,IAAI,GAAG,EAA2B,CAAC;YAM/E;;;eAGG;YACc,MAAC,GAAgB,IAAI,GAAG,EAAgD,CAAC;YAE1F;;eAEG;YACa,sBAAiB,GAAG,IAAI,CAAC,CAAC,CAAsB,KAAK,CAAC;YAEtE;;eAEG;YACa,qBAAgB,GAAG,IAAI,CAAC,CAAC,CAAqB,KAAK,CAAC;YAEpE;;eAEG;YACa,uBAAkB,GAAG,IAAI,CAAC,CAAC,CAA6B,KAAK,CAAC;YAE9E;;eAEG;YACa,eAAU,GAAG,IAAI,+BAAI,CAAqB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YAOtF;;eAEG;YACa,qBAAgB,GAAG,sBAAI,CAAmB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAS,IAAI,kBAAI,CAAiB;gBACxG,GAAG,EAAE,yBAAyB;gBAC9B,KAAK,gCAAwB;gBAC7B,MAAM,4BAAoB;aAC1B,EAAE,IAAI,CAAC,CAAC,CAAO,CAAC,EAAE,IAAI,CAAC,CAAC;YAcxB,IAAI,CAAC,QAAQ,GAAG,oBAAoB,CAAC,cAAc,CAAC,qBAAI,CAAW,CAAC;YACpE,IAAI,CAAC,CAAC,GAAe,uCAAkB,CAAC,aAAa,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;YAChF,IAAI,CAAC,CAAC,GAAiB,uCAAkB,CAAC,eAAe,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;YACpF,IAAI,CAAC,CAAC,GAAmB,uCAAkB,CAAC,iBAAiB,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;YACxF,IAAI,CAAC,CAAC,GAAsB,uCAAkB,CAAC,oBAAoB,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;YAE9F,IAAI,CAAC,CAAC,CAAS,CAAC,CAAa,uBAAuB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,EAAwB,CAAC,CAAC,CAAC;QAC7F,CAAC;QAED;;WAEG;QACI,KAAK,CAAC,UAAU,CAAC,EAAU,EAAE,MAAc;YACjD,MAAM,IAAI,CAAC,CAAC,CAAe,GAAG,CAAC,YAAG,CAAI,UAAU,CAAC,EAAE,CAAC,CAAC,YAAY,CAAC,EAAE,UAAU,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;QAC5F,CAAC;QAED;;WAEG;QACI,aAAa,CAAC,KAAc;YAClC,IAAI,CAAC,CAAC,CAA6B,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;YAEnD,IAAI,KAAK,KAAK,SAAS,EAAE;gBACxB,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,CAAC,CAAc,MAAM,EAAE,EAAE;oBAClD,MAAM,CAAC,MAAM,EAAE,CAAC;iBAChB;aACD;iBAAM;gBACN,IAAI,CAAC,CAAC,CAAc,GAAG,CAAC,KAAK,CAAC,EAAE,MAAM,EAAE,CAAC;aACzC;QACF,CAAC;QAED;;WAEG;QACI,KAAK,CAAC,QAAQ,CAAC,GAA6B,EAAE,KAAK,GAAG,gCAAiB,CAAC,IAAI;YAClF,MAAM,QAAQ,GAA2B;gBACxC,OAAO,EAAE,EAAE;gBACX,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;gBAC5C,UAAU,EAAE,GAAG,CAAC,UAAU;aAC1B,CAAC;YAEF,gEAAgE;YAChE,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,CAAC,CAAY,uBAAuB,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;gBAC3E,MAAM,OAAO,GAAG,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,IAAA,yBAAI,EAAkB,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAChG,IAAI,OAAO,CAAC,MAAM,EAAE;oBACnB,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;wBACrB,OAAO,EAAE,OAAO;wBAChB,YAAY,EAAE,OAAO,CAAC,KAAK;wBAC3B,SAAS,EAAE,OAAO,CAAC,SAAS;wBAC5B,YAAY,EAAE,OAAO,CAAC,YAAY;qBAClC,CAAC,CAAC;iBACH;aACD;YAED,0EAA0E;YAC1E,uEAAuE;YACvE,4EAA4E;YAC5E,8CAA8C;YAC9C,IAAI,QAAQ,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;gBAClC,KAAK,MAAM,YAAY,IAAI,IAAA,YAAG,EAAK,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,YAAY,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;oBACnG,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAY,qBAAqB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC;oBACvF,MAAM,eAAe,GAAG,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;wBACjD,OAAO,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,GAAG,CAAC,KAAK,IAAI,IAAA,yBAAI,EAAkB,CAAC,EAAE,IAAI,CAAC,CAAC;wBACpF,IAAI;qBACJ,CAAC,CAAC,CAAC;oBAEJ,KAAK,MAAM,SAAS,IAAI,IAAA,YAAG,EAAK,eAAe,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;wBAC5F,MAAM,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;wBACrC,IAAI,OAAO,EAAE;4BACZ,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;gCACrB,OAAO,EAAE,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;gCAC9C,YAAY,EAAE,GAAG,CAAC,KAAK;gCACvB,SAAS,EAAE,OAAO,CAAC,SAAS;gCAC5B,YAAY,EAAE,OAAO,CAAC,YAAY;6BAClC,CAAC,CAAC;yBACH;qBACD;iBACD;aACD;YAED,OAAO,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;QAC/C,CAAC;QAED,kBAAkB;QACX,KAAK,CAAC,kBAAkB,CAAC,GAA2B,EAAE,KAAwB;YACpF,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE;gBACjB,GAAG,CAAC,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;aACrC;YAED,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,CAAC,CAA4B,qBAAqB,CAAC;gBAC3E,OAAO,EAAE,IAAA,cAAQ,EAAC,CAAW,EAAE,IAAmD,CAAC;aACnF,CAAC,CAAC;YAEH,IAAI,CAAC,KAAK,EAAE;gBACX,OAAO;aACP;YAED,MAAM,YAAY,GAAG,IAAA,YAAG,EAAK,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;YAClG,MAAM,QAAQ,GAAG,YAAY,CAAC,GAAG,CAChC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAe,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,kBAAkB,CAC3E,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;gBACxB,aAAa,EAAE,GAAG,CAAC,OAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACxE,SAAS,EAAE,UAAU,CAAC,SAAS;gBAC/B,YAAY,EAAE,UAAU,CAAC,YAAY;gBACrC,OAAO,EAAE,UAAU,CAAC,OAAO;aAC3B,CAAC,CAAC,EACH,KAAK,CACL,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;gBACf,MAAM,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,WAAG,CAAO,CAAC;gBACxD,IAAI,IAAI,CAAC,MAAM,EAAE;oBAChB,IAAI,CAAC,CAAC,CAAmB,KAAK,CAAC,IAAA,cAAQ,EAAC,CAAW,EAAE,IAAgD,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBACxH;YACF,CAAC,CAAC,CACF,CAAC;YAEF,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC7B,CAAC;QAED;;WAEG;QACI,KAAK,CAAC,gBAAgB,CAAC,GAA2B,EAAE,KAAK,GAAG,gCAAiB,CAAC,IAAI;YACxF,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE;gBACjB,GAAG,CAAC,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;aACrC;YAED,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAW,gBAAgB,CAAC,GAAG,CAAC,CAAC;YACtD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,CAAC,CAA4B,qBAAqB,CAAC;gBAC3E,OAAO,EAAE,IAAA,cAAQ,EAAC,CAAW,EAAE,IAAmD,CAAC;aACnF,CAAC,CAAC;YAEH,IAAI,CAAC,KAAK,EAAE;gBACX,MAAM,CAAC,YAAY,EAAE,CAAC;gBACtB,OAAO,MAAM,CAAC;aACd;YAED,IAAI;gBACH,MAAM,YAAY,GAAG,IAAI,kBAAG,CAAqB,KAAK,CAAC,CAAC;gBACxD,IAAI,CAAC,CAAC,CAAc,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,YAAY,CAAC,CAAC;gBAEjD,MAAM,YAAY,GAAG,IAAA,YAAG,EAAK,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,aAAa,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;gBAClG,MAAM,QAAQ,GAAG,YAAY,CAAC,GAAG,CAChC,KAAK,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAe,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,EAAE,QAAQ,CACjE,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;oBACxB,KAAK,EAAE,MAAM,CAAC,EAAE;oBAChB,aAAa,EAAE,GAAG,CAAC,OAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;oBACxE,SAAS,EAAE,UAAU,CAAC,SAAS;oBAC/B,YAAY,EAAE,UAAU,CAAC,YAAY;oBACrC,OAAO,EAAE,UAAU,CAAC,OAAO;iBAC3B,CAAC,CAAC,EACH,YAAY,CAAC,KAAK,CAClB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;oBACf,MAAM,IAAI,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,WAAG,CAAO,CAAC;oBACxD,IAAI,IAAI,CAAC,MAAM,EAAE;wBAChB,IAAI,CAAC,CAAC,CAAmB,KAAK,CAAC,IAAA,cAAQ,EAAC,CAAW,EAAE,IAAgD,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBACxH;gBACF,CAAC,CAAC,CACF,CAAC;gBACF,MAAM,IAAI,CAAC,CAAC,CAAiB,GAAG,CAAC,CAAC;gBAClC,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;gBAC5B,OAAO,MAAM,CAAC;aACd;oBAAS;gBACT,IAAI,CAAC,CAAC,CAAc,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBACtC,MAAM,CAAC,YAAY,EAAE,CAAC;aACtB;QACF,CAAC;QAED;;WAEG;QACI,WAAW,CAAC,aAAqB,EAAE,IAAe;YACxD,IAAI,CAAC,CAAC,CAAsB,IAAI,CAAC,IAAI,CAAC,CAAC;YACvC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAC5B,IAAI,CAAC,CAAC,EAAwB,CAAC;YAC/B,IAAI,CAAC,CAAC,CAAqB,IAAI,CAAC,IAAI,CAAC,CAAC;QACvC,CAAC;QAED;;WAEG;QACI,iBAAiB,CAAC,EAAU;YAClC,OAAO,IAAI,CAAC,CAAC,CAAe,GAAG,CAAC,EAAE,CAAC,CAAC;QACrC,CAAC;QAED;;WAEG;QACI,KAAK,CAAC,SAAS;YACrB,MAAM,GAAG,GAAG,IAAI,kBAAG,EAAsB,CAAC;YAC1C,IAAI;gBACH,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAe,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;aACvF;oBAAS;gBACT,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aAClB;QACF,CAAC;QAED;;WAEG;QACI,KAAK,CAAC,YAAY,CAAC,YAAqB;YAC9C,MAAM,GAAG,GAAG,IAAI,kBAAG,EAAsB,CAAC;YAC1C,IAAI,CAAC,CAAC,CAAwB,GAAG,CAAC,GAAG,CAAC,CAAC;YACvC,IAAI,CAAC,CAAC,CAAiB,GAAG,CAAC,IAAI,CAAC,CAAC;YAEjC,IAAI;gBACH,IAAI,YAAY,EAAE;oBACjB,MAAM,IAAI,CAAC,CAAC,CAAe,GAAG,CAAC,YAAY,CAAC,EAAE,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;iBACtE;qBAAM;oBACN,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAe,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;iBAC1F;aACD;oBAAS;gBACT,IAAI,CAAC,CAAC,CAAwB,MAAM,CAAC,GAAG,CAAC,CAAC;gBAC1C,IAAI,CAAC,CAAC,CAAiB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAwB,IAAI,GAAG,CAAC,CAAC,CAAC;gBACnE,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;aAClB;QACF,CAAC;QAED;;WAEG;QACI,kBAAkB;YACxB,KAAK,MAAM,GAAG,IAAI,IAAI,CAAC,CAAC,EAAyB;gBAChD,GAAG,CAAC,MAAM,EAAE,CAAC;aACb;YACD,IAAI,CAAC,CAAC,CAAwB,KAAK,EAAE,CAAC;YACtC,IAAI,CAAC,CAAC,CAAiB,GAAG,CAAC,KAAK,CAAC,CAAC;QACnC,CAAC;QAED;;WAEG;QACI,sBAAsB,CAAC,EAAU,EAAE,UAAqC;YAC9E,IAAI,CAAC,CAAC,CAAe,GAAG,CAAC,EAAE,EAAE,UAAU,CAAC,CAAC;YACzC,IAAI,CAAC,CAAC,CAAa,GAAG,CAAC,IAAI,CAAC,CAAC,CAAe,IAAI,CAAC,CAAC;YAClD,IAAI,CAAC,CAAC,EAAiB,CAAC;YAExB,MAAM,UAAU,GAAG,IAAI,eAAG,EAAc,CAAC;YAEzC,UAAU,CAAC,GAAG,CAAC,IAAA,eAAG,EAAU,GAAG,EAAE;gBAChC,MAAM,IAAI,GAAc,EAAE,CAAC;gBAC3B,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE;oBAC7C,IAAI,IAAI,CAAC,YAAY,KAAK,EAAE,EAAE;wBAC7B,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,+BAAuB,EAAE,MAAM,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;qBAClE;iBACD;gBAED,IAAI,CAAC,WAAW,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;gBAE3B,IAAI,IAAI,CAAC,CAAC,CAAe,MAAM,CAAC,EAAE,CAAC,EAAE;oBACpC,IAAI,CAAC,CAAC,CAAa,GAAG,CAAC,IAAI,CAAC,CAAC,CAAe,IAAI,CAAC,CAAC;oBAClD,IAAI,CAAC,CAAC,EAAiB,CAAC;iBACxB;YACF,CAAC,CAAC,CAAC,CAAC;YAEJ,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,EAAiB,IAAI,CAAC,CAAC,CAAC;YAE/E,OAAO,UAAU,CAAC;QACnB,CAAC;QAEO,CAAC;YACR,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAa,YAAY,EAAE,QAAQ,CAAC;YACtD,IAAI,GAAG,EAAE;gBACR,IAAI,CAAC,CAAC,CAAoB,GAAG,CAAC,CAAC,mBAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;aACpF;iBAAM;gBACN,IAAI,CAAC,CAAC,CAAoB,GAAG,CAAC,KAAK,CAAC,CAAC;aACrC;QACF,CAAC;QAEO,KAAK,CAAC,CAAC,CAAiB,GAA2B,EAAE,uBAA8C,IAAI,CAAC,CAAC,EAAqB,gBAAgC,IAAI,CAAC,CAAC;YAC3K,IAAI,GAAG,CAAC,aAAa,KAAK,KAAK,EAAE;gBAChC,OAAO;aACP;YACD,MAAM,cAAc,GAAG,IAAA,oBAAI,EAAoB,IAAI,CAAC,CAAC,kEAAsD,CAAC;YAC5G,IAAI,cAAc,EAAE;gBACnB,MAAM,aAAa,CAAC,OAAO,EAAE,CAAC;aAC9B;YACD,OAAO;QACR,CAAC;QAEO,CAAC;YACR,IAAI,CAAC,CAAC,CAAe,GAAG,CAAC,mBAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAe,MAAM,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC;QACjG,CAAC;KACD,CAAA;IA3VY,oBAAI;mBAAJ,IAAI;QAsDd,WAAA,gBAAG,CAAA;QACH,WAAA,mBAAG,CAAA;QACH,WAAA,aAAG,CAAA;QACH,WAAA,mBAAG,CAAA;QACH,WAAA,yBAAI,CAAA;QACJ,WAAA,kBAAG,CAAA;QACH,WAAA,mBAAG,CAAA;QACH,WAAA,wBAAI,CAAA;QACJ,WAAA,oBAAG,CAAA;OA9DO,IAAI,CA2VhB","file":"testServiceImpl.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { groupBy } from 'vs/base/common/arrays';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { Emitter } from 'vs/base/common/event';\nimport { Iterable } from 'vs/base/common/iterator';\nimport { Disposable, DisposableStore, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { localize } from 'vs/nls';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IWorkspaceTrustRequestService } from 'vs/platform/workspace/common/workspaceTrust';\nimport { MainThreadTestCollection } from 'vs/workbench/contrib/testing/common/mainThreadTestCollection';\nimport { MutableObservableValue } from 'vs/workbench/contrib/testing/common/observableValue';\nimport { StoredValue } from 'vs/workbench/contrib/testing/common/storedValue';\nimport { ResolvedTestRunRequest, TestDiffOpType, TestsDiff } from 'vs/workbench/contrib/testing/common/testTypes';\nimport { TestExclusions } from 'vs/workbench/contrib/testing/common/testExclusions';\nimport { TestId } from 'vs/workbench/contrib/testing/common/testId';\nimport { TestingContextKeys } from 'vs/workbench/contrib/testing/common/testingContextKeys';\nimport { canUseProfileWithTest, ITestProfileService } from 'vs/workbench/contrib/testing/common/testProfileService';\nimport { ITestResult } from 'vs/workbench/contrib/testing/common/testResult';\nimport { ITestResultService } from 'vs/workbench/contrib/testing/common/testResultService';\nimport { AmbiguousRunTestsRequest, IMainThreadTestController, ITestService } from 'vs/workbench/contrib/testing/common/testService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { getTestingConfiguration, TestingConfigKeys } from 'vs/workbench/contrib/testing/common/configuration';\nimport { isDefined } from 'vs/base/common/types';\n\nexport class TestService extends Disposable implements ITestService {\n\tdeclare readonly _serviceBrand: undefined;\n\tprivate testControllers = new Map<string, IMainThreadTestController>();\n\n\tprivate readonly cancelExtensionTestRunEmitter = new Emitter<{ runId: string | undefined }>();\n\tprivate readonly willProcessDiffEmitter = new Emitter<TestsDiff>();\n\tprivate readonly didProcessDiffEmitter = new Emitter<TestsDiff>();\n\tprivate readonly testRefreshCancellations = new Set<CancellationTokenSource>();\n\tprivate readonly providerCount: IContextKey<number>;\n\tprivate readonly canRefreshTests: IContextKey<boolean>;\n\tprivate readonly isRefreshingTests: IContextKey<boolean>;\n\tprivate readonly activeEditorHasTests: IContextKey<boolean>;\n\n\t/**\n\t * Cancellation for runs requested by the user being managed by the UI.\n\t * Test runs initiated by extensions are not included here.\n\t */\n\tprivate readonly uiRunningTests = new Map<string /* run ID */, CancellationTokenSource>();\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly onWillProcessDiff = this.willProcessDiffEmitter.event;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly onDidProcessDiff = this.didProcessDiffEmitter.event;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly onDidCancelTestRun = this.cancelExtensionTestRunEmitter.event;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly collection = new MainThreadTestCollection(this.expandTest.bind(this));\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly excluded: TestExclusions;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly showInlineOutput = MutableObservableValue.stored(this._register(new StoredValue<boolean>({\n\t\tkey: 'inlineTestOutputVisible',\n\t\tscope: StorageScope.WORKSPACE,\n\t\ttarget: StorageTarget.USER\n\t}, this.storage)), true);\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IStorageService private readonly storage: IStorageService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@ITestProfileService private readonly testProfiles: ITestProfileService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ITestResultService private readonly testResults: ITestResultService,\n\t\t@IWorkspaceTrustRequestService private readonly workspaceTrustRequestService: IWorkspaceTrustRequestService,\n\t) {\n\t\tsuper();\n\t\tthis.excluded = instantiationService.createInstance(TestExclusions);\n\t\tthis.providerCount = TestingContextKeys.providerCount.bindTo(contextKeyService);\n\t\tthis.canRefreshTests = TestingContextKeys.canRefreshTests.bindTo(contextKeyService);\n\t\tthis.isRefreshingTests = TestingContextKeys.isRefreshingTests.bindTo(contextKeyService);\n\t\tthis.activeEditorHasTests = TestingContextKeys.activeEditorHasTests.bindTo(contextKeyService);\n\n\t\tthis._register(editorService.onDidActiveEditorChange(() => this.updateEditorContextKeys()));\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async expandTest(id: string, levels: number) {\n\t\tawait this.testControllers.get(TestId.fromString(id).controllerId)?.expandTest(id, levels);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic cancelTestRun(runId?: string) {\n\t\tthis.cancelExtensionTestRunEmitter.fire({ runId });\n\n\t\tif (runId === undefined) {\n\t\t\tfor (const runCts of this.uiRunningTests.values()) {\n\t\t\t\trunCts.cancel();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.uiRunningTests.get(runId)?.cancel();\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async runTests(req: AmbiguousRunTestsRequest, token = CancellationToken.None): Promise<ITestResult> {\n\t\tconst resolved: ResolvedTestRunRequest = {\n\t\t\ttargets: [],\n\t\t\texclude: req.exclude?.map(t => t.item.extId),\n\t\t\tcontinuous: req.continuous,\n\t\t};\n\n\t\t// First, try to run the tests using the default run profiles...\n\t\tfor (const profile of this.testProfiles.getGroupDefaultProfiles(req.group)) {\n\t\t\tconst testIds = req.tests.filter(t => canUseProfileWithTest(profile, t)).map(t => t.item.extId);\n\t\t\tif (testIds.length) {\n\t\t\t\tresolved.targets.push({\n\t\t\t\t\ttestIds: testIds,\n\t\t\t\t\tprofileGroup: profile.group,\n\t\t\t\t\tprofileId: profile.profileId,\n\t\t\t\t\tcontrollerId: profile.controllerId,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// If no tests are covered by the defaults, just use whatever the defaults\n\t\t// for their controller are. This can happen if the user chose specific\n\t\t// profiles for the run button, but then asked to run a single test from the\n\t\t// explorer or decoration. We shouldn't no-op.\n\t\tif (resolved.targets.length === 0) {\n\t\t\tfor (const byController of groupBy(req.tests, (a, b) => a.controllerId === b.controllerId ? 0 : 1)) {\n\t\t\t\tconst profiles = this.testProfiles.getControllerProfiles(byController[0].controllerId);\n\t\t\t\tconst withControllers = byController.map(test => ({\n\t\t\t\t\tprofile: profiles.find(p => p.group === req.group && canUseProfileWithTest(p, test)),\n\t\t\t\t\ttest,\n\t\t\t\t}));\n\n\t\t\t\tfor (const byProfile of groupBy(withControllers, (a, b) => a.profile === b.profile ? 0 : 1)) {\n\t\t\t\t\tconst profile = byProfile[0].profile;\n\t\t\t\t\tif (profile) {\n\t\t\t\t\t\tresolved.targets.push({\n\t\t\t\t\t\t\ttestIds: byProfile.map(t => t.test.item.extId),\n\t\t\t\t\t\t\tprofileGroup: req.group,\n\t\t\t\t\t\t\tprofileId: profile.profileId,\n\t\t\t\t\t\t\tcontrollerId: profile.controllerId,\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn this.runResolvedTests(resolved, token);\n\t}\n\n\t/** @inheritdoc */\n\tpublic async startContinuousRun(req: ResolvedTestRunRequest, token: CancellationToken) {\n\t\tif (!req.exclude) {\n\t\t\treq.exclude = [...this.excluded.all];\n\t\t}\n\n\t\tconst trust = await this.workspaceTrustRequestService.requestWorkspaceTrust({\n\t\t\tmessage: localize('testTrust', \"Running tests may execute code in your workspace.\"),\n\t\t});\n\n\t\tif (!trust) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst byController = groupBy(req.targets, (a, b) => a.controllerId.localeCompare(b.controllerId));\n\t\tconst requests = byController.map(\n\t\t\tgroup => this.testControllers.get(group[0].controllerId)?.startContinuousRun(\n\t\t\t\tgroup.map(controlReq => ({\n\t\t\t\t\texcludeExtIds: req.exclude!.filter(t => !controlReq.testIds.includes(t)),\n\t\t\t\t\tprofileId: controlReq.profileId,\n\t\t\t\t\tcontrollerId: controlReq.controllerId,\n\t\t\t\t\ttestIds: controlReq.testIds,\n\t\t\t\t})),\n\t\t\t\ttoken,\n\t\t\t).then(result => {\n\t\t\t\tconst errs = result.map(r => r.error).filter(isDefined);\n\t\t\t\tif (errs.length) {\n\t\t\t\t\tthis.notificationService.error(localize('testError', 'An error occurred attempting to run tests: {0}', errs.join(' ')));\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\n\t\tawait Promise.all(requests);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async runResolvedTests(req: ResolvedTestRunRequest, token = CancellationToken.None) {\n\t\tif (!req.exclude) {\n\t\t\treq.exclude = [...this.excluded.all];\n\t\t}\n\n\t\tconst result = this.testResults.createLiveResult(req);\n\t\tconst trust = await this.workspaceTrustRequestService.requestWorkspaceTrust({\n\t\t\tmessage: localize('testTrust', \"Running tests may execute code in your workspace.\"),\n\t\t});\n\n\t\tif (!trust) {\n\t\t\tresult.markComplete();\n\t\t\treturn result;\n\t\t}\n\n\t\ttry {\n\t\t\tconst cancelSource = new CancellationTokenSource(token);\n\t\t\tthis.uiRunningTests.set(result.id, cancelSource);\n\n\t\t\tconst byController = groupBy(req.targets, (a, b) => a.controllerId.localeCompare(b.controllerId));\n\t\t\tconst requests = byController.map(\n\t\t\t\tgroup => this.testControllers.get(group[0].controllerId)?.runTests(\n\t\t\t\t\tgroup.map(controlReq => ({\n\t\t\t\t\t\trunId: result.id,\n\t\t\t\t\t\texcludeExtIds: req.exclude!.filter(t => !controlReq.testIds.includes(t)),\n\t\t\t\t\t\tprofileId: controlReq.profileId,\n\t\t\t\t\t\tcontrollerId: controlReq.controllerId,\n\t\t\t\t\t\ttestIds: controlReq.testIds,\n\t\t\t\t\t})),\n\t\t\t\t\tcancelSource.token,\n\t\t\t\t).then(result => {\n\t\t\t\t\tconst errs = result.map(r => r.error).filter(isDefined);\n\t\t\t\t\tif (errs.length) {\n\t\t\t\t\t\tthis.notificationService.error(localize('testError', 'An error occurred attempting to run tests: {0}', errs.join(' ')));\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t\tawait this.saveAllBeforeTest(req);\n\t\t\tawait Promise.all(requests);\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tthis.uiRunningTests.delete(result.id);\n\t\t\tresult.markComplete();\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic publishDiff(_controllerId: string, diff: TestsDiff) {\n\t\tthis.willProcessDiffEmitter.fire(diff);\n\t\tthis.collection.apply(diff);\n\t\tthis.updateEditorContextKeys();\n\t\tthis.didProcessDiffEmitter.fire(diff);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic getTestController(id: string) {\n\t\treturn this.testControllers.get(id);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async syncTests(): Promise<void> {\n\t\tconst cts = new CancellationTokenSource();\n\t\ttry {\n\t\t\tawait Promise.all([...this.testControllers.values()].map(c => c.syncTests(cts.token)));\n\t\t} finally {\n\t\t\tcts.dispose(true);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic async refreshTests(controllerId?: string): Promise<void> {\n\t\tconst cts = new CancellationTokenSource();\n\t\tthis.testRefreshCancellations.add(cts);\n\t\tthis.isRefreshingTests.set(true);\n\n\t\ttry {\n\t\t\tif (controllerId) {\n\t\t\t\tawait this.testControllers.get(controllerId)?.refreshTests(cts.token);\n\t\t\t} else {\n\t\t\t\tawait Promise.all([...this.testControllers.values()].map(c => c.refreshTests(cts.token)));\n\t\t\t}\n\t\t} finally {\n\t\t\tthis.testRefreshCancellations.delete(cts);\n\t\t\tthis.isRefreshingTests.set(this.testRefreshCancellations.size > 0);\n\t\t\tcts.dispose(true);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic cancelRefreshTests(): void {\n\t\tfor (const cts of this.testRefreshCancellations) {\n\t\t\tcts.cancel();\n\t\t}\n\t\tthis.testRefreshCancellations.clear();\n\t\tthis.isRefreshingTests.set(false);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic registerTestController(id: string, controller: IMainThreadTestController): IDisposable {\n\t\tthis.testControllers.set(id, controller);\n\t\tthis.providerCount.set(this.testControllers.size);\n\t\tthis.updateCanRefresh();\n\n\t\tconst disposable = new DisposableStore();\n\n\t\tdisposable.add(toDisposable(() => {\n\t\t\tconst diff: TestsDiff = [];\n\t\t\tfor (const root of this.collection.rootItems) {\n\t\t\t\tif (root.controllerId === id) {\n\t\t\t\t\tdiff.push({ op: TestDiffOpType.Remove, itemId: root.item.extId });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.publishDiff(id, diff);\n\n\t\t\tif (this.testControllers.delete(id)) {\n\t\t\t\tthis.providerCount.set(this.testControllers.size);\n\t\t\t\tthis.updateCanRefresh();\n\t\t\t}\n\t\t}));\n\n\t\tdisposable.add(controller.canRefresh.onDidChange(this.updateCanRefresh, this));\n\n\t\treturn disposable;\n\t}\n\n\tprivate updateEditorContextKeys() {\n\t\tconst uri = this.editorService.activeEditor?.resource;\n\t\tif (uri) {\n\t\t\tthis.activeEditorHasTests.set(!Iterable.isEmpty(this.collection.getNodeByUrl(uri)));\n\t\t} else {\n\t\t\tthis.activeEditorHasTests.set(false);\n\t\t}\n\t}\n\n\tprivate async saveAllBeforeTest(req: ResolvedTestRunRequest, configurationService: IConfigurationService = this.configurationService, editorService: IEditorService = this.editorService): Promise<void> {\n\t\tif (req.isUiTriggered === false) {\n\t\t\treturn;\n\t\t}\n\t\tconst saveBeforeTest = getTestingConfiguration(this.configurationService, TestingConfigKeys.SaveBeforeTest);\n\t\tif (saveBeforeTest) {\n\t\t\tawait editorService.saveAll();\n\t\t}\n\t\treturn;\n\t}\n\n\tprivate updateCanRefresh() {\n\t\tthis.canRefreshTests.set(Iterable.some(this.testControllers.values(), t => t.canRefresh.value));\n\t}\n}\n\n\n"]}