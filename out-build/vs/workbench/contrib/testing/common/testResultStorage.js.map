{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/testing/common/testResultStorage.ts"],"names":[],"mappings":"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","file":"testResultStorage.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { bufferToStream, newWriteableBufferStream, VSBuffer, VSBufferReadableStream, VSBufferWriteableStream } from 'vs/base/common/buffer';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { isDefined } from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { StoredValue } from 'vs/workbench/contrib/testing/common/storedValue';\nimport { HydratedTestResult, ITestResult } from 'vs/workbench/contrib/testing/common/testResult';\nimport { ISerializedTestResults } from 'vs/workbench/contrib/testing/common/testTypes';\n\nexport const RETAIN_MAX_RESULTS = 128;\nconst RETAIN_MIN_RESULTS = 16;\nconst RETAIN_MAX_BYTES = 1024 * 128;\nconst CLEANUP_PROBABILITY = 0.2;\n\nexport interface ITestResultStorage {\n\t_serviceBrand: undefined;\n\n\t/**\n\t * Retrieves the list of stored test results.\n\t */\n\tread(): Promise<HydratedTestResult[]>;\n\n\t/**\n\t * Persists the list of test results.\n\t */\n\tpersist(results: ReadonlyArray<ITestResult>): Promise<void>;\n}\n\nexport const ITestResultStorage = createDecorator('ITestResultStorage');\n\n/**\n * Data revision this version of VS Code deals with. Should be bumped whenever\n * a breaking change is made to the stored results, which will cause previous\n * revisions to be discarded.\n */\nconst currentRevision = 1;\n\nexport abstract class BaseTestResultStorage extends Disposable implements ITestResultStorage {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprotected readonly stored = this._register(new StoredValue<ReadonlyArray<{ rev: number; id: string; bytes: number }>>({\n\t\tkey: 'storedTestResults',\n\t\tscope: StorageScope.WORKSPACE,\n\t\ttarget: StorageTarget.MACHINE\n\t}, this.storageService));\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic async read(): Promise<HydratedTestResult[]> {\n\t\tconst results = await Promise.all(this.stored.get([]).map(async ({ id, rev }) => {\n\t\t\tif (rev !== currentRevision) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst contents = await this.readForResultId(id);\n\t\t\t\tif (!contents) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\treturn new HydratedTestResult(contents);\n\t\t\t} catch (e) {\n\t\t\t\tthis.logService.warn(`Error deserializing stored test result ${id}`, e);\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}));\n\n\t\treturn results.filter(isDefined);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic getResultOutputWriter(resultId: string) {\n\t\tconst stream = newWriteableBufferStream();\n\t\tthis.storeOutputForResultId(resultId, stream);\n\t\treturn stream;\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic async persist(results: ReadonlyArray<ITestResult>): Promise<void> {\n\t\tconst toDelete = new Map(this.stored.get([]).map(({ id, bytes }) => [id, bytes]));\n\t\tconst toStore: { rev: number; id: string; bytes: number }[] = [];\n\t\tconst todo: Promise<unknown>[] = [];\n\t\tlet budget = RETAIN_MAX_BYTES;\n\n\t\t// Run until either:\n\t\t// 1. We store all results\n\t\t// 2. We store the max results\n\t\t// 3. We store the min results, and have no more byte budget\n\t\tfor (\n\t\t\tlet i = 0;\n\t\t\ti < results.length && i < RETAIN_MAX_RESULTS && (budget > 0 || toStore.length < RETAIN_MIN_RESULTS);\n\t\t\ti++\n\t\t) {\n\t\t\tconst result = results[i];\n\t\t\tconst existingBytes = toDelete.get(result.id);\n\t\t\tif (existingBytes !== undefined) {\n\t\t\t\ttoDelete.delete(result.id);\n\t\t\t\ttoStore.push({ id: result.id, rev: currentRevision, bytes: existingBytes });\n\t\t\t\tbudget -= existingBytes;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst obj = result.toJSON();\n\t\t\tif (!obj) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst contents = VSBuffer.fromString(JSON.stringify(obj));\n\t\t\ttodo.push(this.storeForResultId(result.id, obj));\n\t\t\ttoStore.push({ id: result.id, rev: currentRevision, bytes: contents.byteLength });\n\t\t\tbudget -= contents.byteLength;\n\t\t}\n\n\t\tfor (const id of toDelete.keys()) {\n\t\t\ttodo.push(this.deleteForResultId(id).catch(() => undefined));\n\t\t}\n\n\t\tthis.stored.store(toStore);\n\t\tawait Promise.all(todo);\n\t}\n\n\t/**\n\t * Reads serialized results for the test. Is allowed to throw.\n\t */\n\tprotected abstract readForResultId(id: string): Promise<ISerializedTestResults | undefined>;\n\n\t/**\n\t * Reads output as a stream for the test.\n\t */\n\tprotected abstract readOutputForResultId(id: string): Promise<VSBufferReadableStream>;\n\n\t/**\n\t * Reads an output range for the test.\n\t */\n\tprotected abstract readOutputRangeForResultId(id: string, offset: number, length: number): Promise<VSBuffer>;\n\n\t/**\n\t * Deletes serialized results for the test.\n\t */\n\tprotected abstract deleteForResultId(id: string): Promise<unknown>;\n\n\t/**\n\t * Stores test results by ID.\n\t */\n\tprotected abstract storeForResultId(id: string, data: ISerializedTestResults): Promise<unknown>;\n\n\t/**\n\t * Reads serialized results for the test. Is allowed to throw.\n\t */\n\tprotected abstract storeOutputForResultId(id: string, input: VSBufferWriteableStream): Promise<void>;\n}\n\nexport class InMemoryResultStorage extends BaseTestResultStorage {\n\tpublic readonly cache = new Map<string, ISerializedTestResults>();\n\n\tprotected async readForResultId(id: string) {\n\t\treturn Promise.resolve(this.cache.get(id));\n\t}\n\n\tprotected storeForResultId(id: string, contents: ISerializedTestResults) {\n\t\tthis.cache.set(id, contents);\n\t\treturn Promise.resolve();\n\t}\n\n\tprotected deleteForResultId(id: string) {\n\t\tthis.cache.delete(id);\n\t\treturn Promise.resolve();\n\t}\n\n\tprotected readOutputForResultId(id: string): Promise<VSBufferReadableStream> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tprotected storeOutputForResultId(id: string, input: VSBufferWriteableStream): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tprotected readOutputRangeForResultId(id: string, offset: number, length: number): Promise<VSBuffer> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n}\n\nexport class TestResultStorage extends BaseTestResultStorage {\n\tprivate readonly directory: URI;\n\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ILogService logService: ILogService,\n\t\t@IWorkspaceContextService workspaceContext: IWorkspaceContextService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t) {\n\t\tsuper(storageService, logService);\n\t\tthis.directory = URI.joinPath(environmentService.workspaceStorageHome, workspaceContext.getWorkspace().id, 'testResults');\n\t}\n\n\tprotected async readForResultId(id: string) {\n\t\tconst contents = await this.fileService.readFile(this.getResultJsonPath(id));\n\t\treturn JSON.parse(contents.value.toString());\n\t}\n\n\tprotected storeForResultId(id: string, contents: ISerializedTestResults) {\n\t\treturn this.fileService.writeFile(this.getResultJsonPath(id), VSBuffer.fromString(JSON.stringify(contents)));\n\t}\n\n\tprotected deleteForResultId(id: string) {\n\t\treturn this.fileService.del(this.getResultJsonPath(id)).catch(() => undefined);\n\t}\n\n\tprotected async readOutputRangeForResultId(id: string, offset: number, length: number): Promise<VSBuffer> {\n\t\ttry {\n\t\t\tconst { value } = await this.fileService.readFile(this.getResultOutputPath(id), { position: offset, length });\n\t\t\treturn value;\n\t\t} catch {\n\t\t\treturn VSBuffer.alloc(0);\n\t\t}\n\t}\n\n\n\tprotected async readOutputForResultId(id: string): Promise<VSBufferReadableStream> {\n\t\ttry {\n\t\t\tconst { value } = await this.fileService.readFileStream(this.getResultOutputPath(id));\n\t\t\treturn value;\n\t\t} catch {\n\t\t\treturn bufferToStream(VSBuffer.alloc(0));\n\t\t}\n\t}\n\n\tprotected async storeOutputForResultId(id: string, input: VSBufferWriteableStream) {\n\t\tawait this.fileService.createFile(this.getResultOutputPath(id), input);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic override async persist(results: ReadonlyArray<ITestResult>) {\n\t\tawait super.persist(results);\n\t\tif (Math.random() < CLEANUP_PROBABILITY) {\n\t\t\tawait this.cleanupDereferenced();\n\t\t}\n\t}\n\n\t/**\n\t * Cleans up orphaned files. For instance, output can get orphaned if it's\n\t * written but the editor is closed before the test run is complete.\n\t */\n\tprivate async cleanupDereferenced() {\n\t\tconst { children } = await this.fileService.resolve(this.directory);\n\t\tif (!children) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst stored = new Set(this.stored.get([]).filter(s => s.rev === currentRevision).map(s => s.id));\n\n\t\tawait Promise.all(\n\t\t\tchildren\n\t\t\t\t.filter(child => !stored.has(child.name.replace(/\\.[a-z]+$/, '')))\n\t\t\t\t.map(child => this.fileService.del(child.resource).catch(() => undefined))\n\t\t);\n\t}\n\n\tprivate getResultJsonPath(id: string) {\n\t\treturn URI.joinPath(this.directory, `${id}.json`);\n\t}\n\n\tprivate getResultOutputPath(id: string) {\n\t\treturn URI.joinPath(this.directory, `${id}.output`);\n\t}\n}\n"]}