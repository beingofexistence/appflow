{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/testing/common/testingDecorations.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IA8DhG,MAAa,IAAI;QAAjB;YACQ,UAAK,GAAQ,EAAE,CAAC;QA8BxB,CAAC;QA7BA;;WAEG;QACI,IAAI,CAAC,KAAQ;YACnB,MAAM,WAAW,GAAG,IAAA,YAAG,EAAU,IAAI,CAAC,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC;YAC/E,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,EAAE,KAAK,CAAC,CAAC;QAC3E,CAAC;QAED;;WAEG;QACI,CAAC,KAAK;YACZ,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;gBACvB,OAAO;aACP;YAED,IAAI,UAAU,GAAG,CAAC,CAAC;YACnB,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YACnC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAC3C,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACxB,IAAI,CAAC,CAAC,IAAI,KAAK,SAAS,EAAE;oBACzB,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,CAAC;oBACnD,SAAS,GAAG,CAAC,CAAC,IAAI,CAAC;oBACnB,UAAU,GAAG,CAAC,CAAC;iBACf;aACD;YAED,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC;QACjD,CAAC;KACD;IA/BD,oBA+BC;IAEY,QAAA,IAAI,GAAyB,IAAA,mBAAG,EAAyC,0BAA0B,CAAC,CAAC","file":"testingDecorations.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IAction } from 'vs/base/common/actions';\nimport { binarySearch } from 'vs/base/common/arrays';\nimport { Event } from 'vs/base/common/event';\nimport { URI } from 'vs/base/common/uri';\nimport { Position } from 'vs/editor/common/core/position';\nimport { IModelDeltaDecoration } from 'vs/editor/common/model';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { ITestMessage } from 'vs/workbench/contrib/testing/common/testTypes';\n\nexport interface ITestingDecorationsService {\n\t_serviceBrand: undefined;\n\n\t/**\n\t * Fires when something happened to change decorations in an editor.\n\t * Interested consumers should call {@link syncDecorations} to update them.\n\t */\n\tonDidChange: Event<void>;\n\n\t/**\n\t * Signals the code underlying a test message has changed, and it should\n\t * no longer be decorated in the source.\n\t */\n\tinvalidateResultMessage(message: ITestMessage): void;\n\n\t/**\n\t * Ensures decorations in the given document URI are up to date,\n\t * and returns them.\n\t */\n\tsyncDecorations(resource: URI): Iterable<ITestDecoration> & {\n\t\treadonly size: number;\n\t\tgetById(decorationId: string): ITestDecoration | undefined;\n\t};\n\n\t/**\n\t * Gets the range where a test ID is displayed, in the given URI.\n\t * Returns undefined if there's no such decoration.\n\t */\n\tgetDecoratedTestPosition(resource: URI, testId: string): Position | undefined;\n}\n\nexport interface ITestDecoration {\n\t/**\n\t * ID of the decoration after being added to the editor, set after the\n\t * decoration is applied.\n\t */\n\treadonly id: string;\n\n\t/**\n\t * Original decoration line number.\n\t */\n\treadonly line: number;\n\n\t/**\n\t * Editor decoration instance.\n\t */\n\treadonly editorDecoration: IModelDeltaDecoration;\n\n\tgetContextMenuActions(): { object: IAction[]; dispose(): void };\n}\n\nexport class TestDecorations<T extends { id: string; line: number } = ITestDecoration> {\n\tpublic value: T[] = [];\n\t/**\n\t * Adds a new value to the decorations.\n\t */\n\tpublic push(value: T) {\n\t\tconst searchIndex = binarySearch(this.value, value, (a, b) => a.line - b.line);\n\t\tthis.value.splice(searchIndex < 0 ? ~searchIndex : searchIndex, 0, value);\n\t}\n\n\t/**\n\t * Gets decorations on each line.\n\t */\n\tpublic *lines(): Iterable<[number, T[]]> {\n\t\tif (!this.value.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet startIndex = 0;\n\t\tlet startLine = this.value[0].line;\n\t\tfor (let i = 1; i < this.value.length; i++) {\n\t\t\tconst v = this.value[i];\n\t\t\tif (v.line !== startLine) {\n\t\t\t\tyield [startLine, this.value.slice(startIndex, i)];\n\t\t\t\tstartLine = v.line;\n\t\t\t\tstartIndex = i;\n\t\t\t}\n\t\t}\n\n\t\tyield [startLine, this.value.slice(startIndex)];\n\t}\n}\n\nexport const ITestingDecorationsService = createDecorator<ITestingDecorationsService>('testingDecorationService');\n\n"]}