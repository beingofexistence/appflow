{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/testing/common/testExclusions.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUzF,IAAM,IAAI,GAAV,MAAM,IAAe,SAAQ,eAAG;QAatC,YAA6B,CAAoC;YAChE,KAAK,EAAE,CAAC;YADqC,MAAC,GAAD,CAAC,CAAkB;YAZhD,MAAC,GAAU,IAAI,CAAC,CAAC,CACjC,sBAAI,CAAmB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAS,IAAI,kBAAI,CAA6B;gBACjF,GAAG,EAAE,mBAAmB;gBACxB,KAAK,gCAAwB;gBAC7B,MAAM,+BAAuB;gBAC7B,aAAa,EAAE;oBACd,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;oBACxC,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;iBACtC;aACD,EAAE,IAAI,CAAC,CAAC,CAAc,CAAC,EAAE,IAAI,GAAG,EAAE,CAAC,CACpC,CAAC;YAMF;;eAEG;YACa,4BAAuB,GAAmB,IAAI,CAAC,CAAC,CAAQ,WAAW,CAAC;QALpF,CAAC;QAOD;;WAEG;QACH,IAAW,MAAM;YAChB,OAAO,IAAI,CAAC,CAAC,CAAQ,KAAK,CAAC,IAAI,GAAG,CAAC,CAAC;QACrC,CAAC;QAED;;WAEG;QACH,IAAW,GAAG;YACb,OAAO,IAAI,CAAC,CAAC,CAAQ,KAAK,CAAC;QAC5B,CAAC;QAED;;WAEG;QACI,MAAM,CAAC,IAAsB,EAAE,OAAiB;YACtD,IAAI,OAAO,KAAK,IAAI,IAAI,IAAI,CAAC,CAAC,CAAQ,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBACjE,IAAI,CAAC,CAAC,CAAQ,KAAK,GAAG,IAAI,GAAG,CAAC,mBAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAQ,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;aAChG;iBAAM,IAAI,OAAO,KAAK,KAAK,IAAI,CAAC,IAAI,CAAC,CAAC,CAAQ,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;gBAC1E,IAAI,CAAC,CAAC,CAAQ,KAAK,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAQ,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;aACzE;QACF,CAAC;QAED;;WAEG;QACI,QAAQ,CAAC,IAAsB;YACrC,OAAO,IAAI,CAAC,CAAC,CAAQ,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACjD,CAAC;QAED;;WAEG;QACI,KAAK;YACX,IAAI,CAAC,CAAC,CAAQ,KAAK,GAAG,IAAI,GAAG,EAAE,CAAC;QACjC,CAAC;KACD,CAAA;IA5DY,oBAAI;mBAAJ,IAAI;QAaH,WAAA,aAAG,CAAA;OAbJ,IAAI,CA4DhB","file":"testExclusions.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { Iterable } from 'vs/base/common/iterator';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { MutableObservableValue } from 'vs/workbench/contrib/testing/common/observableValue';\nimport { StoredValue } from 'vs/workbench/contrib/testing/common/storedValue';\nimport { InternalTestItem } from 'vs/workbench/contrib/testing/common/testTypes';\n\nexport class TestExclusions extends Disposable {\n\tprivate readonly excluded = this._register(\n\t\tMutableObservableValue.stored(this._register(new StoredValue<ReadonlySet<string>>({\n\t\t\tkey: 'excludedTestItems',\n\t\t\tscope: StorageScope.WORKSPACE,\n\t\t\ttarget: StorageTarget.MACHINE,\n\t\t\tserialization: {\n\t\t\t\tdeserialize: v => new Set(JSON.parse(v)),\n\t\t\t\tserialize: v => JSON.stringify([...v])\n\t\t\t},\n\t\t}, this.storageService)), new Set())\n\t);\n\n\tconstructor(@IStorageService private readonly storageService: IStorageService) {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Event that fires when the excluded tests change.\n\t */\n\tpublic readonly onTestExclusionsChanged: Event<unknown> = this.excluded.onDidChange;\n\n\t/**\n\t * Gets whether there's any excluded tests.\n\t */\n\tpublic get hasAny() {\n\t\treturn this.excluded.value.size > 0;\n\t}\n\n\t/**\n\t * Gets all excluded tests.\n\t */\n\tpublic get all(): Iterable<string> {\n\t\treturn this.excluded.value;\n\t}\n\n\t/**\n\t * Sets whether a test is excluded.\n\t */\n\tpublic toggle(test: InternalTestItem, exclude?: boolean): void {\n\t\tif (exclude !== true && this.excluded.value.has(test.item.extId)) {\n\t\t\tthis.excluded.value = new Set(Iterable.filter(this.excluded.value, e => e !== test.item.extId));\n\t\t} else if (exclude !== false && !this.excluded.value.has(test.item.extId)) {\n\t\t\tthis.excluded.value = new Set([...this.excluded.value, test.item.extId]);\n\t\t}\n\t}\n\n\t/**\n\t * Gets whether a test is excluded.\n\t */\n\tpublic contains(test: InternalTestItem): boolean {\n\t\treturn this.excluded.value.has(test.item.extId);\n\t}\n\n\t/**\n\t * Removes all test exclusions.\n\t */\n\tpublic clear(): void {\n\t\tthis.excluded.value = new Set();\n\t}\n}\n"]}