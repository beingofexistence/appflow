{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/testing/common/testResultService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAiEhG,MAAM,cAAc,GAAG,CAAC,OAAa,EAAgB,EAAE,CACtD,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,WAAW,KAAK,SAAS,CAAC;IAE/D,QAAA,IAAI,GAAiB,IAAA,mBAAG,EAAiC,mBAAmB,CAAC,CAAC;IAEpF,IAAM,IAAI,GAAV,MAAM,IAAkB,SAAQ,eAAG;QAOzC;;WAEG;QACH,IAAW,OAAO;YACjB,IAAI,CAAC,CAAC,EAAY,CAAC;YACnB,OAAO,IAAI,CAAC,CAAC,CAAQ;QACtB,CAAC;QAsBD,YACqB,iBAAsB,EACtB,CAA8B,EAC7B,CAAmC;YAExD,KAAK,EAAE,CAAC;YAH6B,MAAC,GAAD,CAAC,CAAY;YACZ,MAAC,GAAD,CAAC,CAAiB;YApCjD,MAAC,GAAqB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAyB,CAAC,CAAC;YACvE,MAAC,GAAyB,EAAE,CAAC;YACpB,MAAC,GAAwC,EAAE,CAAC;YACrD,MAAC,GAAmB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAA4B,CAAC,CAAC;YAUhF;;eAEG;YACa,qBAAgB,GAAG,IAAI,CAAC,CAAC,CAAmB,KAAK,CAAC;YAElE;;eAEG;YACa,kBAAa,GAAG,IAAI,CAAC,CAAC,CAAiB,KAAK,CAAC;YAI5C,MAAC,GAAa,IAAA,gBAAG,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAO,IAAI,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;gBAC3E,KAAK,IAAI,CAAC,GAAG,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;oBAC5C,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;iBACrB;YACF,CAAC,CAAC,CAAC,CAAC;YAEe,MAAC,GAAkB,IAAI,WAAG,CAAc,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,EAAmB,EAAE,GAAG,CAAC,CAAC;YAQhG,IAAI,CAAC,CAAC,CAAS,IAAA,eAAG,EAAU,GAAG,EAAE,CAAC,IAAA,eAAG,EAAK,IAAI,CAAC,CAAC,CAAmB,CAAC,CAAC,CAAC;YACtE,IAAI,CAAC,CAAC,GAAW,uCAAkB,CAAC,SAAS,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;YACxE,IAAI,CAAC,CAAC,GAAe,uCAAkB,CAAC,aAAa,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC;QACjF,CAAC;QAED;;WAEG;QACI,YAAY,CAAC,KAAa;YAChC,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;gBAClC,MAAM,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;gBAC1C,IAAI,MAAM,IAAI,MAAM,CAAC,aAAa,kCAA0B,EAAE;oBAC7D,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;iBACxB;aACD;YAED,OAAO,SAAS,CAAC;QAClB,CAAC;QAED;;WAEG;QACI,gBAAgB,CAAC,GAAsD;YAC7E,IAAI,SAAS,IAAI,GAAG,EAAE;gBACrB,MAAM,EAAE,GAAG,IAAA,UAAG,GAAW,CAAC;gBAC1B,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,iBAAI,CAAW,EAAE,EAAE,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;aACpD;YAED,IAAI,OAAoC,CAAC;YACzC,IAAI,GAAG,CAAC,OAAO,EAAE;gBAChB,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAY,qBAAqB,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;gBAC3E,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,SAAS,KAAK,GAAG,CAAC,OAAQ,CAAC,EAAE,CAAC,CAAC;aAC9D;YAED,MAAM,QAAQ,GAA2B;gBACxC,aAAa,EAAE,KAAK;gBACpB,OAAO,EAAE,EAAE;gBACX,OAAO,EAAE,GAAG,CAAC,OAAO;gBACpB,UAAU,EAAE,GAAG,CAAC,UAAU;aAC1B,CAAC;YAEF,IAAI,OAAO,EAAE;gBACZ,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC;oBACrB,YAAY,EAAE,OAAO,CAAC,KAAK;oBAC3B,SAAS,EAAE,OAAO,CAAC,SAAS;oBAC5B,YAAY,EAAE,GAAG,CAAC,YAAY;oBAC9B,OAAO,EAAE,GAAG,CAAC,OAAO;iBACpB,CAAC,CAAC;aACH;YAED,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,iBAAI,CAAW,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC,CAAC;QACrE,CAAC;QAED;;WAEG;QACI,IAAI,CAAwB,MAAS;YAC3C,IAAI,MAAM,CAAC,WAAW,KAAK,SAAS,EAAE;gBACrC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;aAC7B;iBAAM;gBACN,MAAM,KAAK,GAAG,IAAA,gBAAG,EAA4B,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW,KAAK,SAAS,IAAI,CAAC,CAAC,WAAW,IAAI,MAAM,CAAC,WAAY,CAAC,CAAC;gBACrI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAAE,MAAM,CAAC,CAAC;gBACtC,IAAI,CAAC,CAAC,CAAgB,QAAQ,EAAE,CAAC;aACjC;YAED,IAAI,CAAC,CAAC,CAAa,GAAG,CAAC,IAAI,CAAC,CAAC;YAC7B,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,wBAAI,EAAgB;gBAC7C,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;gBACnB,IAAI,CAAC,CAAC,CAAmB,GAAG,EAAE,EAAE,OAAO,EAAE,CAAC;aAC1C;YAED,MAAM,EAAE,GAAG,IAAI,eAAG,EAAc,CAAC;YACjC,IAAI,CAAC,CAAC,CAAmB,IAAI,CAAC,EAAE,CAAC,CAAC;YAElC,IAAI,MAAM,YAAY,iBAAI,EAAY;gBACrC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;gBACf,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAU,MAAM,CAAC,CAAC,CAAC,CAAC;gBACzD,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAiB,IAAI,EAAE,IAAI,CAAC,CAAC,CAAiB,CAAC,CAAC;gBAC7E,IAAI,CAAC,CAAC,CAAS,GAAG,CAAC,IAAI,CAAC,CAAC;gBACzB,IAAI,CAAC,CAAC,CAAmB,IAAI,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;aACnD;iBAAM;gBACN,IAAI,CAAC,CAAC,CAAmB,IAAI,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,CAAC,CAAC;gBACpD,sEAAsE;gBACtE,mEAAmE;gBACnE,qCAAqC;gBACrC,KAAK,MAAM,IAAI,IAAI,MAAM,CAAC,KAAK,EAAE;oBAChC,KAAK,MAAM,WAAW,IAAI,IAAI,CAAC,OAAO,EAAE;wBACvC,IAAI,WAAW,KAAK,MAAM,EAAE;4BAC3B,IAAI,CAAC,CAAC,CAAiB,IAAI,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,wDAAgD,EAAE,CAAC,CAAC;4BACtG,MAAM;yBACN;6BAAM,IAAI,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,SAAS,EAAE;4BACnE,MAAM;yBACN;qBACD;iBACD;aACD;YAED,OAAO,MAAM,CAAC;QACf,CAAC;QAED;;WAEG;QACI,SAAS,CAAC,EAAU;YAC1B,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;QAC5C,CAAC;QAED;;WAEG;QACI,KAAK;YACX,MAAM,IAAI,GAAkB,EAAE,CAAC;YAC/B,MAAM,OAAO,GAAkB,EAAE,CAAC;YAClC,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,OAAO,EAAE;gBAClC,IAAI,MAAM,CAAC,WAAW,KAAK,SAAS,EAAE;oBACrC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBACrB;qBAAM;oBACN,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBAClB;aACD;YAED,IAAI,CAAC,CAAC,GAAU,IAAI,CAAC;YACrB,IAAI,CAAC,CAAC,CAAgB,QAAQ,EAAE,CAAC;YACjC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;gBACtB,IAAI,CAAC,CAAC,CAAa,GAAG,CAAC,KAAK,CAAC,CAAC;aAC9B;YACD,IAAI,CAAC,CAAC,CAAmB,IAAI,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;QAC5C,CAAC;QAEO,CAAC,CAAU,MAAY;YAC9B,IAAI,CAAC,CAAC,EAAO,CAAC;YACd,IAAI,CAAC,CAAC,EAAgB,CAAC;YACvB,IAAI,CAAC,CAAC,CAAgB,QAAQ,EAAE,CAAC;YACjC,IAAI,CAAC,CAAC,CAAmB,IAAI,CAAC,EAAE,SAAS,EAAE,MAAM,EAAE,CAAC,CAAC;QACtD,CAAC;QAEO,CAAC;YACR,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,WAAW,IAAI,MAAM,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,WAAW,IAAI,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC;QACtH,CAAC;QAEO,CAAC;YACR,IAAI,CAAC,CAAC,CAAS,GAAG,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;QAC1C,CAAC;QAES,KAAK,CAAC,CAAC;YAChB,qEAAqE;YACrE,0BAA0B;YAC1B,MAAM,IAAI,CAAC,CAAC,EAAY,CAAC;YACzB,IAAI,CAAC,CAAC,CAAO,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QACpC,CAAC;KACD,CAAA;IA/LY,oBAAI;mBAAJ,IAAI;QAoCd,WAAA,gBAAG,CAAA;QACH,WAAA,wBAAI,CAAA;QACJ,WAAA,yBAAI,CAAA;OAtCM,IAAI,CA+LhB","file":"testResultService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { findFirstIdxMonotonousOrArrLen } from 'vs/base/common/arraysFind';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { once } from 'vs/base/common/functional';\nimport { Disposable, DisposableStore, dispose, toDisposable } from 'vs/base/common/lifecycle';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { TestingContextKeys } from 'vs/workbench/contrib/testing/common/testingContextKeys';\nimport { ITestProfileService } from 'vs/workbench/contrib/testing/common/testProfileService';\nimport { ITestResult, LiveTestResult, TestResultItemChange, TestResultItemChangeReason } from 'vs/workbench/contrib/testing/common/testResult';\nimport { ITestResultStorage, RETAIN_MAX_RESULTS } from 'vs/workbench/contrib/testing/common/testResultStorage';\nimport { ExtensionRunTestsRequest, ITestRunProfile, ResolvedTestRunRequest, TestResultItem, TestResultState } from 'vs/workbench/contrib/testing/common/testTypes';\n\nexport type ResultChangeEvent =\n\t| { completed: LiveTestResult }\n\t| { started: LiveTestResult }\n\t| { inserted: ITestResult }\n\t| { removed: ITestResult[] };\n\nexport interface ITestResultService {\n\treadonly _serviceBrand: undefined;\n\t/**\n\t * Fired after any results are added, removed, or completed.\n\t */\n\treadonly onResultsChanged: Event<ResultChangeEvent>;\n\n\t/**\n\t * Fired when a test changed it state, or its computed state is updated.\n\t */\n\treadonly onTestChanged: Event<TestResultItemChange>;\n\n\t/**\n\t * List of known test results.\n\t */\n\treadonly results: ReadonlyArray<ITestResult>;\n\n\t/**\n\t * Discards all completed test results.\n\t */\n\tclear(): void;\n\n\t/**\n\t * Creates a new, live test result.\n\t */\n\tcreateLiveResult(req: ResolvedTestRunRequest | ExtensionRunTestsRequest): LiveTestResult;\n\n\t/**\n\t * Adds a new test result to the collection.\n\t */\n\tpush<T extends ITestResult>(result: T): T;\n\n\t/**\n\t * Looks up a set of test results by ID.\n\t */\n\tgetResult(resultId: string): ITestResult | undefined;\n\n\t/**\n\t * Looks up a test's most recent state, by its extension-assigned ID.\n\t */\n\tgetStateById(extId: string): [results: ITestResult, item: TestResultItem] | undefined;\n}\n\nconst isRunningTests = (service: ITestResultService) =>\n\tservice.results.length > 0 && service.results[0].completedAt === undefined;\n\nexport const ITestResultService = createDecorator<ITestResultService>('testResultService');\n\nexport class TestResultService extends Disposable implements ITestResultService {\n\tdeclare _serviceBrand: undefined;\n\tprivate changeResultEmitter = this._register(new Emitter<ResultChangeEvent>());\n\tprivate _results: ITestResult[] = [];\n\tprivate readonly _resultsDisposables: DisposableStore[] = [];\n\tprivate testChangeEmitter = this._register(new Emitter<TestResultItemChange>());\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic get results() {\n\t\tthis.loadResults();\n\t\treturn this._results;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly onResultsChanged = this.changeResultEmitter.event;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly onTestChanged = this.testChangeEmitter.event;\n\n\tprivate readonly isRunning: IContextKey<boolean>;\n\tprivate readonly hasAnyResults: IContextKey<boolean>;\n\tprivate readonly loadResults = once(() => this.storage.read().then(loaded => {\n\t\tfor (let i = loaded.length - 1; i >= 0; i--) {\n\t\t\tthis.push(loaded[i]);\n\t\t}\n\t}));\n\n\tprotected readonly persistScheduler = new RunOnceScheduler(() => this.persistImmediately(), 500);\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@ITestResultStorage private readonly storage: ITestResultStorage,\n\t\t@ITestProfileService private readonly testProfiles: ITestProfileService,\n\t) {\n\t\tsuper();\n\t\tthis._register(toDisposable(() => dispose(this._resultsDisposables)));\n\t\tthis.isRunning = TestingContextKeys.isRunning.bindTo(contextKeyService);\n\t\tthis.hasAnyResults = TestingContextKeys.hasAnyResults.bindTo(contextKeyService);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic getStateById(extId: string): [results: ITestResult, item: TestResultItem] | undefined {\n\t\tfor (const result of this.results) {\n\t\t\tconst lookup = result.getStateById(extId);\n\t\t\tif (lookup && lookup.computedState !== TestResultState.Unset) {\n\t\t\t\treturn [result, lookup];\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic createLiveResult(req: ResolvedTestRunRequest | ExtensionRunTestsRequest) {\n\t\tif ('targets' in req) {\n\t\t\tconst id = generateUuid();\n\t\t\treturn this.push(new LiveTestResult(id, true, req));\n\t\t}\n\n\t\tlet profile: ITestRunProfile | undefined;\n\t\tif (req.profile) {\n\t\t\tconst profiles = this.testProfiles.getControllerProfiles(req.controllerId);\n\t\t\tprofile = profiles.find(c => c.profileId === req.profile!.id);\n\t\t}\n\n\t\tconst resolved: ResolvedTestRunRequest = {\n\t\t\tisUiTriggered: false,\n\t\t\ttargets: [],\n\t\t\texclude: req.exclude,\n\t\t\tcontinuous: req.continuous,\n\t\t};\n\n\t\tif (profile) {\n\t\t\tresolved.targets.push({\n\t\t\t\tprofileGroup: profile.group,\n\t\t\t\tprofileId: profile.profileId,\n\t\t\t\tcontrollerId: req.controllerId,\n\t\t\t\ttestIds: req.include,\n\t\t\t});\n\t\t}\n\n\t\treturn this.push(new LiveTestResult(req.id, req.persist, resolved));\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic push<T extends ITestResult>(result: T): T {\n\t\tif (result.completedAt === undefined) {\n\t\t\tthis.results.unshift(result);\n\t\t} else {\n\t\t\tconst index = findFirstIdxMonotonousOrArrLen(this.results, r => r.completedAt !== undefined && r.completedAt <= result.completedAt!);\n\t\t\tthis.results.splice(index, 0, result);\n\t\t\tthis.persistScheduler.schedule();\n\t\t}\n\n\t\tthis.hasAnyResults.set(true);\n\t\tif (this.results.length > RETAIN_MAX_RESULTS) {\n\t\t\tthis.results.pop();\n\t\t\tthis._resultsDisposables.pop()?.dispose();\n\t\t}\n\n\t\tconst ds = new DisposableStore();\n\t\tthis._resultsDisposables.push(ds);\n\n\t\tif (result instanceof LiveTestResult) {\n\t\t\tds.add(result);\n\t\t\tds.add(result.onComplete(() => this.onComplete(result)));\n\t\t\tds.add(result.onChange(this.testChangeEmitter.fire, this.testChangeEmitter));\n\t\t\tthis.isRunning.set(true);\n\t\t\tthis.changeResultEmitter.fire({ started: result });\n\t\t} else {\n\t\t\tthis.changeResultEmitter.fire({ inserted: result });\n\t\t\t// If this is not a new result, go through each of its tests. For each\n\t\t\t// test for which the new result is the most recently inserted, fir\n\t\t\t// a change event so that UI updates.\n\t\t\tfor (const item of result.tests) {\n\t\t\t\tfor (const otherResult of this.results) {\n\t\t\t\t\tif (otherResult === result) {\n\t\t\t\t\t\tthis.testChangeEmitter.fire({ item, result, reason: TestResultItemChangeReason.ComputedStateChange });\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t} else if (otherResult.getStateById(item.item.extId) !== undefined) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic getResult(id: string) {\n\t\treturn this.results.find(r => r.id === id);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic clear() {\n\t\tconst keep: ITestResult[] = [];\n\t\tconst removed: ITestResult[] = [];\n\t\tfor (const result of this.results) {\n\t\t\tif (result.completedAt !== undefined) {\n\t\t\t\tremoved.push(result);\n\t\t\t} else {\n\t\t\t\tkeep.push(result);\n\t\t\t}\n\t\t}\n\n\t\tthis._results = keep;\n\t\tthis.persistScheduler.schedule();\n\t\tif (keep.length === 0) {\n\t\t\tthis.hasAnyResults.set(false);\n\t\t}\n\t\tthis.changeResultEmitter.fire({ removed });\n\t}\n\n\tprivate onComplete(result: LiveTestResult) {\n\t\tthis.resort();\n\t\tthis.updateIsRunning();\n\t\tthis.persistScheduler.schedule();\n\t\tthis.changeResultEmitter.fire({ completed: result });\n\t}\n\n\tprivate resort() {\n\t\tthis.results.sort((a, b) => (b.completedAt ?? Number.MAX_SAFE_INTEGER) - (a.completedAt ?? Number.MAX_SAFE_INTEGER));\n\t}\n\n\tprivate updateIsRunning() {\n\t\tthis.isRunning.set(isRunningTests(this));\n\t}\n\n\tprotected async persistImmediately() {\n\t\t// ensure results are loaded before persisting to avoid deleting once\n\t\t// that we don't have yet.\n\t\tawait this.loadResults();\n\t\tthis.storage.persist(this.results);\n\t}\n}\n"]}