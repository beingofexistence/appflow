{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/testing/common/mainThreadTestCollection.ts"],"names":[],"mappings":"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","file":"mainThreadTestCollection.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { Iterable } from 'vs/base/common/iterator';\nimport { AbstractIncrementalTestCollection, IncrementalChangeCollector, IncrementalTestCollectionItem, InternalTestItem, TestDiffOpType, TestsDiff } from 'vs/workbench/contrib/testing/common/testTypes';\nimport { IMainThreadTestCollection } from 'vs/workbench/contrib/testing/common/testService';\nimport { ResourceMap } from 'vs/base/common/map';\nimport { URI } from 'vs/base/common/uri';\n\nexport class MainThreadTestCollection extends AbstractIncrementalTestCollection<IncrementalTestCollectionItem> implements IMainThreadTestCollection {\n\tprivate testsByUrl = new ResourceMap<Set<IncrementalTestCollectionItem>>();\n\n\tprivate busyProvidersChangeEmitter = new Emitter<number>();\n\tprivate expandPromises = new WeakMap<IncrementalTestCollectionItem, {\n\t\tpendingLvl: number;\n\t\tdoneLvl: number;\n\t\tprom: Promise<void>;\n\t}>();\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic get busyProviders() {\n\t\treturn this.busyControllerCount;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic get rootItems() {\n\t\treturn this.roots;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic get all() {\n\t\treturn this.getIterator();\n\t}\n\n\tpublic get rootIds() {\n\t\treturn Iterable.map(this.roots.values(), r => r.item.extId);\n\t}\n\n\tpublic readonly onBusyProvidersChange = this.busyProvidersChangeEmitter.event;\n\n\tconstructor(private readonly expandActual: (id: string, levels: number) => Promise<void>) {\n\t\tsuper();\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic expand(testId: string, levels: number): Promise<void> {\n\t\tconst test = this.items.get(testId);\n\t\tif (!test) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\t// simple cache to avoid duplicate/unnecessary expansion calls\n\t\tconst existing = this.expandPromises.get(test);\n\t\tif (existing && existing.pendingLvl >= levels) {\n\t\t\treturn existing.prom;\n\t\t}\n\n\t\tconst prom = this.expandActual(test.item.extId, levels);\n\t\tconst record = { doneLvl: existing ? existing.doneLvl : -1, pendingLvl: levels, prom };\n\t\tthis.expandPromises.set(test, record);\n\n\t\treturn prom.then(() => {\n\t\t\trecord.doneLvl = levels;\n\t\t});\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic getNodeById(id: string) {\n\t\treturn this.items.get(id);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic getNodeByUrl(uri: URI): Iterable<IncrementalTestCollectionItem> {\n\t\treturn this.testsByUrl.get(uri) || Iterable.empty();\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic getReviverDiff() {\n\t\tconst ops: TestsDiff = [{ op: TestDiffOpType.IncrementPendingExtHosts, amount: this.pendingRootCount }];\n\n\t\tconst queue = [this.rootIds];\n\t\twhile (queue.length) {\n\t\t\tfor (const child of queue.pop()!) {\n\t\t\t\tconst item = this.items.get(child)!;\n\t\t\t\tops.push({\n\t\t\t\t\top: TestDiffOpType.Add,\n\t\t\t\t\titem: {\n\t\t\t\t\t\tcontrollerId: item.controllerId,\n\t\t\t\t\t\texpand: item.expand,\n\t\t\t\t\t\titem: item.item,\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tqueue.push(item.children);\n\t\t\t}\n\t\t}\n\n\t\treturn ops;\n\t}\n\n\t/**\n\t * Applies the diff to the collection.\n\t */\n\tpublic override apply(diff: TestsDiff) {\n\t\tconst prevBusy = this.busyControllerCount;\n\t\tsuper.apply(diff);\n\n\t\tif (prevBusy !== this.busyControllerCount) {\n\t\t\tthis.busyProvidersChangeEmitter.fire(this.busyControllerCount);\n\t\t}\n\t}\n\n\t/**\n\t * Clears everything from the collection, and returns a diff that applies\n\t * that action.\n\t */\n\tpublic clear() {\n\t\tconst ops: TestsDiff = [];\n\t\tfor (const root of this.roots) {\n\t\t\tops.push({ op: TestDiffOpType.Remove, itemId: root.item.extId });\n\t\t}\n\n\t\tthis.roots.clear();\n\t\tthis.items.clear();\n\n\t\treturn ops;\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected createItem(internal: InternalTestItem): IncrementalTestCollectionItem {\n\t\treturn { ...internal, children: new Set() };\n\t}\n\n\tprivate readonly changeCollector: IncrementalChangeCollector<IncrementalTestCollectionItem> = {\n\t\tadd: node => {\n\t\t\tif (!node.item.uri) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst s = this.testsByUrl.get(node.item.uri);\n\t\t\tif (!s) {\n\t\t\t\tthis.testsByUrl.set(node.item.uri, new Set([node]));\n\t\t\t} else {\n\t\t\t\ts.add(node);\n\t\t\t}\n\t\t},\n\t\tremove: node => {\n\t\t\tif (!node.item.uri) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst s = this.testsByUrl.get(node.item.uri);\n\t\t\tif (!s) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ts.delete(node);\n\t\t\tif (s.size === 0) {\n\t\t\t\tthis.testsByUrl.delete(node.item.uri);\n\t\t\t}\n\t\t},\n\t};\n\n\tprotected override createChangeCollector(): IncrementalChangeCollector<IncrementalTestCollectionItem> {\n\t\treturn this.changeCollector;\n\t}\n\n\tprivate *getIterator() {\n\t\tconst queue = [this.rootIds];\n\t\twhile (queue.length) {\n\t\t\tfor (const id of queue.pop()!) {\n\t\t\t\tconst node = this.getNodeById(id)!;\n\t\t\t\tyield node;\n\t\t\t\tqueue.push(node.children);\n\t\t\t}\n\t\t}\n\t}\n}\n"]}