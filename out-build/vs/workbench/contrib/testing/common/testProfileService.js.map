{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/testing/common/testProfileService.ts"],"names":[],"mappings":"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","file":"testProfileService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { isDefined } from 'vs/base/common/types';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { StoredValue } from 'vs/workbench/contrib/testing/common/storedValue';\nimport { InternalTestItem, ITestRunProfile, TestRunProfileBitset, testRunProfileBitsetList } from 'vs/workbench/contrib/testing/common/testTypes';\nimport { TestId } from 'vs/workbench/contrib/testing/common/testId';\nimport { TestingContextKeys } from 'vs/workbench/contrib/testing/common/testingContextKeys';\nimport { IMainThreadTestController } from 'vs/workbench/contrib/testing/common/testService';\nimport { Disposable } from 'vs/base/common/lifecycle';\n\nexport const ITestProfileService = createDecorator<ITestProfileService>('testProfileService');\n\nexport interface ITestProfileService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Fired when any profile changes.\n\t */\n\treadonly onDidChange: Event<void>;\n\n\t/**\n\t * Publishes a new test profile.\n\t */\n\taddProfile(controller: IMainThreadTestController, profile: ITestRunProfile): void;\n\n\t/**\n\t * Updates an existing test run profile\n\t */\n\tupdateProfile(controllerId: string, profileId: number, update: Partial<ITestRunProfile>): void;\n\n\t/**\n\t * Removes a profile. If profileId is not given, all profiles\n\t * for the given controller will be removed.\n\t */\n\tremoveProfile(controllerId: string, profileId?: number): void;\n\n\t/**\n\t * Gets capabilities for the given test, indicating whether\n\t * there's any usable profiles available for those groups.\n\t * @returns a bitset to use with {@link TestRunProfileBitset}\n\t */\n\tcapabilitiesForTest(test: InternalTestItem): number;\n\n\t/**\n\t * Configures a test profile.\n\t */\n\tconfigure(controllerId: string, profileId: number): void;\n\n\t/**\n\t * Gets all registered controllers, grouping by controller.\n\t */\n\tall(): Iterable<Readonly<{\n\t\tcontroller: IMainThreadTestController;\n\t\tprofiles: ITestRunProfile[];\n\t}>>;\n\n\t/**\n\t * Gets the default profiles to be run for a given run group.\n\t */\n\tgetGroupDefaultProfiles(group: TestRunProfileBitset): ITestRunProfile[];\n\n\t/**\n\t * Sets the default profiles to be run for a given run group.\n\t */\n\tsetGroupDefaultProfiles(group: TestRunProfileBitset, profiles: ITestRunProfile[]): void;\n\n\t/**\n\t * Gets the profiles for a controller, in priority order.\n\t */\n\tgetControllerProfiles(controllerId: string): ITestRunProfile[];\n}\n\n/**\n * Gets whether the given profile can be used to run the test.\n */\nexport const canUseProfileWithTest = (profile: ITestRunProfile, test: InternalTestItem) =>\n\tprofile.controllerId === test.controllerId && (TestId.isRoot(test.item.extId) || !profile.tag || test.item.tags.includes(profile.tag));\n\nconst sorter = (a: ITestRunProfile, b: ITestRunProfile) => {\n\tif (a.isDefault !== b.isDefault) {\n\t\treturn a.isDefault ? -1 : 1;\n\t}\n\n\treturn a.label.localeCompare(b.label);\n};\n\n/**\n * Given a capabilities bitset, returns a map of context keys representing\n * them.\n */\nexport const capabilityContextKeys = (capabilities: number): [key: string, value: boolean][] => [\n\t[TestingContextKeys.hasRunnableTests.key, (capabilities & TestRunProfileBitset.Run) !== 0],\n\t[TestingContextKeys.hasDebuggableTests.key, (capabilities & TestRunProfileBitset.Debug) !== 0],\n\t[TestingContextKeys.hasCoverableTests.key, (capabilities & TestRunProfileBitset.Coverage) !== 0],\n];\n\nexport class TestProfileService extends Disposable implements ITestProfileService {\n\tdeclare readonly _serviceBrand: undefined;\n\tprivate readonly preferredDefaults: StoredValue<{ [K in TestRunProfileBitset]?: { controllerId: string; profileId: number }[] }>;\n\tprivate readonly capabilitiesContexts: { [K in TestRunProfileBitset]: IContextKey<boolean> };\n\tprivate readonly changeEmitter = this._register(new Emitter<void>());\n\tprivate readonly controllerProfiles = new Map</* controller ID */string, {\n\t\tprofiles: ITestRunProfile[];\n\t\tcontroller: IMainThreadTestController;\n\t}>();\n\n\t/** @inheritdoc */\n\tpublic readonly onDidChange = this.changeEmitter.event;\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IStorageService storageService: IStorageService,\n\t) {\n\t\tsuper();\n\n\t\tthis.preferredDefaults = this._register(new StoredValue({\n\t\t\tkey: 'testingPreferredProfiles',\n\t\t\tscope: StorageScope.WORKSPACE,\n\t\t\ttarget: StorageTarget.MACHINE,\n\t\t}, storageService));\n\n\t\tthis.capabilitiesContexts = {\n\t\t\t[TestRunProfileBitset.Run]: TestingContextKeys.hasRunnableTests.bindTo(contextKeyService),\n\t\t\t[TestRunProfileBitset.Debug]: TestingContextKeys.hasDebuggableTests.bindTo(contextKeyService),\n\t\t\t[TestRunProfileBitset.Coverage]: TestingContextKeys.hasCoverableTests.bindTo(contextKeyService),\n\t\t\t[TestRunProfileBitset.HasNonDefaultProfile]: TestingContextKeys.hasNonDefaultProfile.bindTo(contextKeyService),\n\t\t\t[TestRunProfileBitset.HasConfigurable]: TestingContextKeys.hasConfigurableProfile.bindTo(contextKeyService),\n\t\t\t[TestRunProfileBitset.SupportsContinuousRun]: TestingContextKeys.supportsContinuousRun.bindTo(contextKeyService),\n\t\t};\n\n\t\tthis.refreshContextKeys();\n\t}\n\n\t/** @inheritdoc */\n\tpublic addProfile(controller: IMainThreadTestController, profile: ITestRunProfile): void {\n\t\tlet record = this.controllerProfiles.get(profile.controllerId);\n\t\tif (record) {\n\t\t\trecord.profiles.push(profile);\n\t\t\trecord.profiles.sort(sorter);\n\t\t} else {\n\t\t\trecord = {\n\t\t\t\tprofiles: [profile],\n\t\t\t\tcontroller,\n\t\t\t};\n\t\t\tthis.controllerProfiles.set(profile.controllerId, record);\n\t\t}\n\n\t\tthis.refreshContextKeys();\n\t\tthis.changeEmitter.fire();\n\t}\n\n\t/** @inheritdoc */\n\tpublic updateProfile(controllerId: string, profileId: number, update: Partial<ITestRunProfile>): void {\n\t\tconst ctrl = this.controllerProfiles.get(controllerId);\n\t\tif (!ctrl) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst profile = ctrl.profiles.find(c => c.controllerId === controllerId && c.profileId === profileId);\n\t\tif (!profile) {\n\t\t\treturn;\n\t\t}\n\n\t\tObject.assign(profile, update);\n\t\tctrl.profiles.sort(sorter);\n\t\tthis.changeEmitter.fire();\n\t}\n\n\t/** @inheritdoc */\n\tpublic configure(controllerId: string, profileId: number) {\n\t\tthis.controllerProfiles.get(controllerId)?.controller.configureRunProfile(profileId);\n\t}\n\n\t/** @inheritdoc */\n\tpublic removeProfile(controllerId: string, profileId?: number): void {\n\t\tconst ctrl = this.controllerProfiles.get(controllerId);\n\t\tif (!ctrl) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!profileId) {\n\t\t\tthis.controllerProfiles.delete(controllerId);\n\t\t\tthis.changeEmitter.fire();\n\t\t\treturn;\n\t\t}\n\n\t\tconst index = ctrl.profiles.findIndex(c => c.profileId === profileId);\n\t\tif (index === -1) {\n\t\t\treturn;\n\t\t}\n\n\t\tctrl.profiles.splice(index, 1);\n\t\tthis.refreshContextKeys();\n\t\tthis.changeEmitter.fire();\n\t}\n\n\t/** @inheritdoc */\n\tpublic capabilitiesForTest(test: InternalTestItem) {\n\t\tconst ctrl = this.controllerProfiles.get(test.controllerId);\n\t\tif (!ctrl) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tlet capabilities = 0;\n\t\tfor (const profile of ctrl.profiles) {\n\t\t\tif (!profile.tag || test.item.tags.includes(profile.tag)) {\n\t\t\t\tcapabilities |= capabilities & profile.group ? TestRunProfileBitset.HasNonDefaultProfile : profile.group;\n\t\t\t}\n\t\t}\n\n\t\treturn capabilities;\n\t}\n\n\t/** @inheritdoc */\n\tpublic all() {\n\t\treturn this.controllerProfiles.values();\n\t}\n\n\t/** @inheritdoc */\n\tpublic getControllerProfiles(profileId: string) {\n\t\treturn this.controllerProfiles.get(profileId)?.profiles ?? [];\n\t}\n\n\t/** @inheritdoc */\n\tpublic getGroupDefaultProfiles(group: TestRunProfileBitset) {\n\t\tconst preferred = this.preferredDefaults.get();\n\t\tif (!preferred) {\n\t\t\treturn this.getBaseDefaults(group);\n\t\t}\n\n\t\tconst profiles = preferred[group]\n\t\t\t?.map(p => this.controllerProfiles.get(p.controllerId)?.profiles.find(\n\t\t\t\tc => c.profileId === p.profileId && c.group === group))\n\t\t\t.filter(isDefined);\n\n\t\treturn profiles?.length ? profiles : this.getBaseDefaults(group);\n\t}\n\n\t/** @inheritdoc */\n\tpublic setGroupDefaultProfiles(group: TestRunProfileBitset, profiles: ITestRunProfile[]) {\n\t\tconst next = {\n\t\t\t...this.preferredDefaults.get(),\n\t\t\t[group]: profiles.map(c => ({ profileId: c.profileId, controllerId: c.controllerId })),\n\t\t};\n\n\t\t// When switching a run/debug profile, if the controller has a same-named\n\t\t// profile in the other group, use that instead of anything else that was selected.\n\t\tif (group === TestRunProfileBitset.Run || group === TestRunProfileBitset.Debug) {\n\t\t\tconst otherGroup = group === TestRunProfileBitset.Run ? TestRunProfileBitset.Debug : TestRunProfileBitset.Run;\n\n\t\t\tconst previousDefaults = next[otherGroup] || [];\n\t\t\tlet newDefaults = previousDefaults.slice();\n\t\t\tfor (const [ctrlId, { profiles: ctrlProfiles }] of this.controllerProfiles) {\n\t\t\t\tconst labels = new Set(profiles.filter(p => p.controllerId === ctrlId).map(p => p.label));\n\t\t\t\tconst nextByLabels = ctrlProfiles.filter(p => labels.has(p.label) && p.group === otherGroup);\n\t\t\t\tif (nextByLabels.length) {\n\t\t\t\t\tnewDefaults = newDefaults.filter(p => p.controllerId !== ctrlId);\n\t\t\t\t\tnewDefaults.push(...nextByLabels.map(p => ({ profileId: p.profileId, controllerId: p.controllerId })));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tnext[otherGroup] = newDefaults;\n\t\t}\n\n\t\tthis.preferredDefaults.store(next);\n\t\tthis.changeEmitter.fire();\n\t}\n\n\tprivate getBaseDefaults(group: TestRunProfileBitset) {\n\t\tconst defaults: ITestRunProfile[] = [];\n\t\tfor (const { profiles } of this.controllerProfiles.values()) {\n\t\t\tconst profile = profiles.find(c => c.group === group);\n\t\t\tif (profile) {\n\t\t\t\tdefaults.push(profile);\n\t\t\t}\n\t\t}\n\n\t\treturn defaults;\n\t}\n\n\tprivate refreshContextKeys() {\n\t\tlet allCapabilities = 0;\n\t\tfor (const { profiles } of this.controllerProfiles.values()) {\n\t\t\tfor (const profile of profiles) {\n\t\t\t\tallCapabilities |= allCapabilities & profile.group ? TestRunProfileBitset.HasNonDefaultProfile : profile.group;\n\t\t\t\tallCapabilities |= profile.supportsContinuousRun ? TestRunProfileBitset.SupportsContinuousRun : 0;\n\t\t\t}\n\t\t}\n\n\t\tfor (const group of testRunProfileBitsetList) {\n\t\t\tthis.capabilitiesContexts[group].set((allCapabilities & group) !== 0);\n\t\t}\n\t}\n}\n"]}