{"version":3,"sources":["vs/workbench/contrib/testing/common/testingContextKeys.ts"],"names":[],"mappings":"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","file":"testingContextKeys.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { TestExplorerViewMode, TestExplorerViewSorting } from 'vs/workbench/contrib/testing/common/constants';\nimport { TestRunProfileBitset } from 'vs/workbench/contrib/testing/common/testTypes';\n\nexport namespace TestingContextKeys {\n\texport const providerCount = new RawContextKey('testing.providerCount', 0);\n\texport const canRefreshTests = new RawContextKey('testing.canRefresh', false, { type: 'boolean', description: localize('testing.canRefresh', 'Indicates whether any test controller has an attached refresh handler.') });\n\texport const isRefreshingTests = new RawContextKey('testing.isRefreshing', false, { type: 'boolean', description: localize('testing.isRefreshing', 'Indicates whether any test controller is currently refreshing tests.') });\n\texport const isContinuousModeOn = new RawContextKey('testing.isContinuousModeOn', false, { type: 'boolean', description: localize('testing.isContinuousModeOn', 'Indicates whether continuous test mode is on.') });\n\texport const hasDebuggableTests = new RawContextKey('testing.hasDebuggableTests', false, { type: 'boolean', description: localize('testing.hasDebuggableTests', 'Indicates whether any test controller has registered a debug configuration') });\n\texport const hasRunnableTests = new RawContextKey('testing.hasRunnableTests', false, { type: 'boolean', description: localize('testing.hasRunnableTests', 'Indicates whether any test controller has registered a run configuration') });\n\texport const hasCoverableTests = new RawContextKey('testing.hasCoverableTests', false, { type: 'boolean', description: localize('testing.hasCoverableTests', 'Indicates whether any test controller has registered a coverage configuration') });\n\texport const hasNonDefaultProfile = new RawContextKey('testing.hasNonDefaultProfile', false, { type: 'boolean', description: localize('testing.hasNonDefaultConfig', 'Indicates whether any test controller has registered a non-default configuration') });\n\texport const hasConfigurableProfile = new RawContextKey('testing.hasConfigurableProfile', false, { type: 'boolean', description: localize('testing.hasConfigurableConfig', 'Indicates whether any test configuration can be configured') });\n\texport const supportsContinuousRun = new RawContextKey('testing.supportsContinuousRun', false, { type: 'boolean', description: localize('testing.supportsContinuousRun', 'Indicates whether continous test running is supported') });\n\texport const isParentRunningContinuously = new RawContextKey('testing.isParentRunningContinuously', false, { type: 'boolean', description: localize('testing.isParentRunningContinuously', 'Indicates whether the parent of a test is continuously running, set in the menu context of test items') });\n\texport const activeEditorHasTests = new RawContextKey('testing.activeEditorHasTests', false, { type: 'boolean', description: localize('testing.activeEditorHasTests', 'Indicates whether any tests are present in the current editor') });\n\n\texport const capabilityToContextKey: { [K in TestRunProfileBitset]: RawContextKey<boolean> } = {\n\t\t[TestRunProfileBitset.Run]: hasRunnableTests,\n\t\t[TestRunProfileBitset.Coverage]: hasCoverableTests,\n\t\t[TestRunProfileBitset.Debug]: hasDebuggableTests,\n\t\t[TestRunProfileBitset.HasNonDefaultProfile]: hasNonDefaultProfile,\n\t\t[TestRunProfileBitset.HasConfigurable]: hasConfigurableProfile,\n\t\t[TestRunProfileBitset.SupportsContinuousRun]: supportsContinuousRun,\n\t};\n\n\texport const hasAnyResults = new RawContextKey<boolean>('testing.hasAnyResults', false);\n\texport const viewMode = new RawContextKey<TestExplorerViewMode>('testing.explorerViewMode', TestExplorerViewMode.List);\n\texport const viewSorting = new RawContextKey<TestExplorerViewSorting>('testing.explorerViewSorting', TestExplorerViewSorting.ByLocation);\n\texport const isRunning = new RawContextKey<boolean>('testing.isRunning', false);\n\texport const isInPeek = new RawContextKey<boolean>('testing.isInPeek', false);\n\texport const isPeekVisible = new RawContextKey<boolean>('testing.isPeekVisible', false);\n\n\texport const peekItemType = new RawContextKey<string | undefined>('peekItemType', undefined, {\n\t\ttype: 'string',\n\t\tdescription: localize('testing.peekItemType', 'Type of the item in the output peek view. Either a \"test\", \"message\", \"task\", or \"result\".'),\n\t});\n\texport const controllerId = new RawContextKey<string | undefined>('controllerId', undefined, {\n\t\ttype: 'string',\n\t\tdescription: localize('testing.controllerId', 'Controller ID of the current test item')\n\t});\n\texport const testItemExtId = new RawContextKey<string | undefined>('testId', undefined, {\n\t\ttype: 'string',\n\t\tdescription: localize('testing.testId', 'ID of the current test item, set when creating or opening menus on test items')\n\t});\n\texport const testItemHasUri = new RawContextKey<boolean>('testing.testItemHasUri', false, {\n\t\ttype: 'boolean',\n\t\tdescription: localize('testing.testItemHasUri', 'Boolean indicating whether the test item has a URI defined')\n\t});\n\texport const testItemIsHidden = new RawContextKey<boolean>('testing.testItemIsHidden', false, {\n\t\ttype: 'boolean',\n\t\tdescription: localize('testing.testItemIsHidden', 'Boolean indicating whether the test item is hidden')\n\t});\n\texport const testMessageContext = new RawContextKey<string>('testMessage', undefined, {\n\t\ttype: 'string',\n\t\tdescription: localize('testing.testMessage', 'Value set in `testMessage.contextValue`, available in editor/content and testing/message/context')\n\t});\n\texport const testResultOutdated = new RawContextKey<boolean>('testResultOutdated', undefined, {\n\t\ttype: 'boolean',\n\t\tdescription: localize('testing.testResultOutdated', 'Value available in editor/content and testing/message/context when the result is outdated')\n\t});\n}\n"]}