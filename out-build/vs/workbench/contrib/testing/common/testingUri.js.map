{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/testing/common/testingUri.ts"],"names":[],"mappings":"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","file":"testingUri.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { assertNever } from 'vs/base/common/assert';\nimport { URI } from 'vs/base/common/uri';\n\nexport const TEST_DATA_SCHEME = 'vscode-test-data';\n\nexport const enum TestUriType {\n\t/** All console output for a task */\n\tTaskOutput,\n\t/** All console output for a test in a task */\n\tTestOutput,\n\t/** Specific message in a test */\n\tResultMessage,\n\t/** Specific actual output message in a test */\n\tResultActualOutput,\n\t/** Specific expected output message in a test */\n\tResultExpectedOutput,\n}\n\ninterface IAllOutputReference {\n\ttype: TestUriType.TaskOutput;\n\tresultId: string;\n\ttaskIndex: number;\n}\n\ninterface IResultTestUri {\n\tresultId: string;\n\ttaskIndex: number;\n\ttestExtId: string;\n}\n\ninterface ITestOutputReference extends IResultTestUri {\n\ttype: TestUriType.TestOutput;\n}\n\ninterface IResultTestMessageReference extends IResultTestUri {\n\ttype: TestUriType.ResultMessage;\n\tmessageIndex: number;\n}\n\ninterface ITestDiffOutputReference extends IResultTestUri {\n\ttype: TestUriType.ResultActualOutput | TestUriType.ResultExpectedOutput;\n\tmessageIndex: number;\n}\n\nexport type ParsedTestUri =\n\t| IAllOutputReference\n\t| IResultTestMessageReference\n\t| ITestDiffOutputReference\n\t| ITestOutputReference;\n\nconst enum TestUriParts {\n\tResults = 'results',\n\n\tAllOutput = 'output',\n\tMessages = 'message',\n\tText = 'TestFailureMessage',\n\tActualOutput = 'ActualOutput',\n\tExpectedOutput = 'ExpectedOutput',\n}\n\nexport const parseTestUri = (uri: URI): ParsedTestUri | undefined => {\n\tconst type = uri.authority;\n\tconst [resultId, ...request] = uri.path.slice(1).split('/');\n\n\tif (request[0] === TestUriParts.Messages) {\n\t\tconst taskIndex = Number(request[1]);\n\t\tconst testExtId = uri.query;\n\t\tconst index = Number(request[2]);\n\t\tconst part = request[3];\n\t\tif (type === TestUriParts.Results) {\n\t\t\tswitch (part) {\n\t\t\t\tcase TestUriParts.Text:\n\t\t\t\t\treturn { resultId, taskIndex, testExtId, messageIndex: index, type: TestUriType.ResultMessage };\n\t\t\t\tcase TestUriParts.ActualOutput:\n\t\t\t\t\treturn { resultId, taskIndex, testExtId, messageIndex: index, type: TestUriType.ResultActualOutput };\n\t\t\t\tcase TestUriParts.ExpectedOutput:\n\t\t\t\t\treturn { resultId, taskIndex, testExtId, messageIndex: index, type: TestUriType.ResultExpectedOutput };\n\t\t\t\tcase TestUriParts.Messages:\n\t\t\t}\n\t\t}\n\t}\n\n\tif (request[0] === TestUriParts.AllOutput) {\n\t\tconst testExtId = uri.query;\n\t\tconst taskIndex = Number(request[1]);\n\t\treturn testExtId\n\t\t\t? { resultId, taskIndex, testExtId, type: TestUriType.TestOutput }\n\t\t\t: { resultId, taskIndex, type: TestUriType.TaskOutput };\n\t}\n\n\treturn undefined;\n};\n\nexport const buildTestUri = (parsed: ParsedTestUri): URI => {\n\tconst uriParts = {\n\t\tscheme: TEST_DATA_SCHEME,\n\t\tauthority: TestUriParts.Results\n\t};\n\n\tif (parsed.type === TestUriType.TaskOutput) {\n\t\treturn URI.from({\n\t\t\t...uriParts,\n\t\t\tpath: ['', parsed.resultId, TestUriParts.AllOutput, parsed.taskIndex].join('/'),\n\t\t});\n\t}\n\n\tconst msgRef = (resultId: string, ...remaining: (string | number)[]) =>\n\t\tURI.from({\n\t\t\t...uriParts,\n\t\t\tquery: parsed.testExtId,\n\t\t\tpath: ['', resultId, TestUriParts.Messages, ...remaining].join('/'),\n\t\t});\n\n\tswitch (parsed.type) {\n\t\tcase TestUriType.ResultActualOutput:\n\t\t\treturn msgRef(parsed.resultId, parsed.taskIndex, parsed.messageIndex, TestUriParts.ActualOutput);\n\t\tcase TestUriType.ResultExpectedOutput:\n\t\t\treturn msgRef(parsed.resultId, parsed.taskIndex, parsed.messageIndex, TestUriParts.ExpectedOutput);\n\t\tcase TestUriType.ResultMessage:\n\t\t\treturn msgRef(parsed.resultId, parsed.taskIndex, parsed.messageIndex, TestUriParts.Text);\n\t\tcase TestUriType.TestOutput:\n\t\t\treturn URI.from({\n\t\t\t\t...uriParts,\n\t\t\t\tquery: parsed.testExtId,\n\t\t\t\tpath: ['', parsed.resultId, TestUriParts.AllOutput, parsed.taskIndex].join('/'),\n\t\t\t});\n\t\tdefault:\n\t\t\tassertNever(parsed, 'Invalid test uri');\n\t}\n};\n"]}