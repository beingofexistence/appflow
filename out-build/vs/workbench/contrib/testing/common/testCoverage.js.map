{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/testing/common/testCoverage.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAWhG;;OAEG;IACH,MAAa,IAAI;QAGhB,YAA6B,CAA2B;YAA3B,MAAC,GAAD,CAAC,CAA0B;QAAI,CAAC;QAE7D;;WAEG;QACI,KAAK,CAAC,WAAW,CAAC,KAAK,GAAG,gCAAiB,CAAC,IAAI;YACtD,IAAI,CAAC,IAAI,CAAC,CAAC,EAAa;gBACvB,IAAI,CAAC,CAAC,GAAc,IAAI,CAAC,CAAC,CAAQ,mBAAmB,CAAC,KAAK,CAAC,CAAC;aAC7D;YAED,IAAI;gBACH,OAAO,MAAM,IAAI,CAAC,CAAC,CAAY;aAC/B;YAAC,OAAO,CAAC,EAAE;gBACX,IAAI,CAAC,CAAC,GAAc,SAAS,CAAC;gBAC9B,MAAM,CAAC,CAAC;aACR;QACF,CAAC;QAED;;WAEG;QACI,KAAK,CAAC,MAAM,CAAC,GAAQ,EAAE,KAAK,GAAG,gCAAiB,CAAC,IAAI;YAC3D,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YAC5C,OAAO,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,KAAK,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC7D,CAAC;KACD;IA5BD,oBA4BC;IAED,MAAa,IAAI;QAOhB,qEAAqE;QACrE,IAAW,GAAG;YACb,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;YACvC,IAAI,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;YAEvC,IAAI,IAAI,CAAC,MAAM,EAAE;gBAChB,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;gBACjC,WAAW,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;aACjC;YAED,IAAI,IAAI,CAAC,QAAQ,EAAE;gBAClB,SAAS,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC;gBACnC,WAAW,IAAI,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;aACnC;YAED,OAAO,WAAW,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,GAAG,WAAW,CAAC;QACxD,CAAC;QAED,YAAY,QAAuB,EAAmB,CAAa,EAAmB,CAA2B;YAA3D,MAAC,GAAD,CAAC,CAAY;YAAmB,MAAC,GAAD,CAAC,CAA0B;YAChH,IAAI,CAAC,GAAG,GAAG,SAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACpC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC;YACpC,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;YAC9B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC;YAChC,IAAI,CAAC,CAAC,GAAU,QAAQ,CAAC,OAAO,CAAC;QAClC,CAAC;QAED;;WAEG;QACI,KAAK,CAAC,OAAO,CAAC,KAAK,GAAG,gCAAiB,CAAC,IAAI;YAClD,IAAI,CAAC,IAAI,CAAC,CAAC,EAAS;gBACnB,IAAI,CAAC,CAAC,GAAU,IAAI,CAAC,CAAC,CAAQ,mBAAmB,CAAC,IAAI,CAAC,CAAC,EAAM,KAAK,CAAC,CAAC;aACrE;YAED,IAAI;gBACH,OAAO,MAAM,IAAI,CAAC,CAAC,CAAQ;aAC3B;YAAC,OAAO,CAAC,EAAE;gBACX,IAAI,CAAC,CAAC,GAAU,SAAS,CAAC;gBAC1B,MAAM,CAAC,CAAC;aACR;QACF,CAAC;KACD;IAhDD,oBAgDC","file":"testCoverage.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { URI } from 'vs/base/common/uri';\nimport { IFileCoverage, CoverageDetails, ICoveredCount } from 'vs/workbench/contrib/testing/common/testTypes';\n\nexport interface ICoverageAccessor {\n\tprovideFileCoverage: (token: CancellationToken) => Promise<IFileCoverage[]>;\n\tresolveFileCoverage: (fileIndex: number, token: CancellationToken) => Promise<CoverageDetails[]>;\n}\n\n/**\n * Class that exposese coverage information for a run.\n */\nexport class TestCoverage {\n\tprivate fileCoverage?: Promise<IFileCoverage[]>;\n\n\tconstructor(private readonly accessor: ICoverageAccessor) { }\n\n\t/**\n\t * Gets coverage information for all files.\n\t */\n\tpublic async getAllFiles(token = CancellationToken.None) {\n\t\tif (!this.fileCoverage) {\n\t\t\tthis.fileCoverage = this.accessor.provideFileCoverage(token);\n\t\t}\n\n\t\ttry {\n\t\t\treturn await this.fileCoverage;\n\t\t} catch (e) {\n\t\t\tthis.fileCoverage = undefined;\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * Gets coverage information for a specific file.\n\t */\n\tpublic async getUri(uri: URI, token = CancellationToken.None) {\n\t\tconst files = await this.getAllFiles(token);\n\t\treturn files.find(f => f.uri.toString() === uri.toString());\n\t}\n}\n\nexport class FileCoverage {\n\tprivate _details?: CoverageDetails[] | Promise<CoverageDetails[]>;\n\tpublic readonly uri: URI;\n\tpublic readonly statement: ICoveredCount;\n\tpublic readonly branch?: ICoveredCount;\n\tpublic readonly function?: ICoveredCount;\n\n\t/** Gets the total coverage percent based on information provided. */\n\tpublic get tpc() {\n\t\tlet numerator = this.statement.covered;\n\t\tlet denominator = this.statement.total;\n\n\t\tif (this.branch) {\n\t\t\tnumerator += this.branch.covered;\n\t\t\tdenominator += this.branch.total;\n\t\t}\n\n\t\tif (this.function) {\n\t\t\tnumerator += this.function.covered;\n\t\t\tdenominator += this.function.total;\n\t\t}\n\n\t\treturn denominator === 0 ? 1 : numerator / denominator;\n\t}\n\n\tconstructor(coverage: IFileCoverage, private readonly index: number, private readonly accessor: ICoverageAccessor) {\n\t\tthis.uri = URI.revive(coverage.uri);\n\t\tthis.statement = coverage.statement;\n\t\tthis.branch = coverage.branch;\n\t\tthis.function = coverage.branch;\n\t\tthis._details = coverage.details;\n\t}\n\n\t/**\n\t * Gets per-line coverage details.\n\t */\n\tpublic async details(token = CancellationToken.None) {\n\t\tif (!this._details) {\n\t\t\tthis._details = this.accessor.resolveFileCoverage(this.index, token);\n\t\t}\n\n\t\ttry {\n\t\t\treturn await this._details;\n\t\t} catch (e) {\n\t\t\tthis._details = undefined;\n\t\t\tthrow e;\n\t\t}\n\t}\n}\n"]}