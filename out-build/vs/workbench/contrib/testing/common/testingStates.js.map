{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/testing/common/testingStates.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG;;;;OAIG;IACU,QAAA,IAAI,GAAgD;QAChE,iCAAyB,EAAE,CAAC;QAC5B,iCAAyB,EAAE,CAAC;QAC5B,gCAAwB,EAAE,CAAC;QAC3B,gCAAwB,EAAE,CAAC;QAC3B,gCAAwB,EAAE,CAAC;QAC3B,+BAAuB,EAAE,CAAC;QAC1B,iCAAyB,EAAE,CAAC;KAC5B,CAAC;IAEK,MAAM,IAAI,GAAY,CAAC,CAAkB,EAAE,EAAE,CAAC,CAAC,oCAA4B,IAAI,CAAC,mCAA2B,CAAC;IAAtG,QAAA,IAAI,QAAkG;IAC5G,MAAM,IAAI,GAAgB,CAAC,CAAkB,EAAE,EAAE,CAAC,CAAC,oCAA4B,IAAI,CAAC,mCAA2B,IAAI,CAAC,mCAA2B,CAAC;IAA1I,QAAA,IAAI,QAAsI;IAE1I,QAAA,IAAI,GAAS,MAAM,CAAC,OAAO,CAAC,YAAI,CAAU,CAAC,MAAM,CAC7D,CAAC,GAAG,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,EAAE;QAC7B,MAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAoB,CAAC;QAClD,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,UAAU,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC;QACnD,OAAO,GAAG,CAAC;IACZ,CAAC,EAAE,EAA+C,CAClD,CAAC;IAEK,MAAM,IAAI,GAAU,CAAC,CAAkB,EAAE,CAAkB,EAAE,EAAE,CAAC,YAAI,CAAU,CAAC,CAAC,GAAG,YAAI,CAAU,CAAC,CAAC,CAAC;IAA9F,QAAA,IAAI,QAA0F;IAEpG,MAAM,IAAI,GAAU,CAAC,GAAG,MAAyB,EAAE,EAAE;QAC3D,QAAQ,MAAM,CAAC,MAAM,EAAE;YACtB,KAAK,CAAC;gBACL,qCAA6B;YAC9B,KAAK,CAAC;gBACL,OAAO,MAAM,CAAC,CAAC,CAAC,CAAC;YAClB,KAAK,CAAC;gBACL,OAAO,YAAI,CAAU,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,YAAI,CAAU,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACpF,OAAO,CAAC,CAAC;gBACR,IAAI,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;gBACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACvC,IAAI,YAAI,CAAU,GAAG,CAAC,GAAG,YAAI,CAAU,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE;wBAClD,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;qBAChB;iBACD;gBAED,OAAO,GAAG,CAAC;aACX;SACD;IACF,CAAC,CAAC;IAnBW,QAAA,IAAI,QAmBf;IAEW,QAAA,IAAI,GAAY,MAAM,CAAC,IAAI,CAAC,YAAI,CAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAoB,CAAC,CAAC,IAAI,CAAC,YAAI,CAAQ,CAAC;IAEjH;;;;OAIG;IACU,QAAA,IAAI,GAA6D;QAC7E,gCAAwB,EAAE,CAAC;QAC3B,iCAAyB,EAAE,CAAC;QAC5B,gCAAwB,EAAE,CAAC;QAC3B,iCAAyB,EAAE,CAAC;KAC5B,CAAC;IAOK,MAAM,IAAI,GAAc,GAAmB,EAAE;QACnD,oDAAoD;QACpD,OAAO,IAAI,WAAW,CAAC,YAAI,CAAU,MAAM,CAA8C,CAAC;IAC3F,CAAC,CAAC;IAHW,QAAA,IAAI,QAGf","file":"testingStates.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { TestResultState } from 'vs/workbench/contrib/testing/common/testTypes';\n\nexport type TreeStateNode = { statusNode: true; state: TestResultState; priority: number };\n\n/**\n * List of display priorities for different run states. When tests update,\n * the highest-priority state from any of their children will be the state\n * reflected in the parent node.\n */\nexport const statePriority: { [K in TestResultState]: number } = {\n\t[TestResultState.Running]: 6,\n\t[TestResultState.Errored]: 5,\n\t[TestResultState.Failed]: 4,\n\t[TestResultState.Queued]: 3,\n\t[TestResultState.Passed]: 2,\n\t[TestResultState.Unset]: 0,\n\t[TestResultState.Skipped]: 1,\n};\n\nexport const isFailedState = (s: TestResultState) => s === TestResultState.Errored || s === TestResultState.Failed;\nexport const isStateWithResult = (s: TestResultState) => s === TestResultState.Errored || s === TestResultState.Failed || s === TestResultState.Passed;\n\nexport const stateNodes = Object.entries(statePriority).reduce(\n\t(acc, [stateStr, priority]) => {\n\t\tconst state = Number(stateStr) as TestResultState;\n\t\tacc[state] = { statusNode: true, state, priority };\n\t\treturn acc;\n\t}, {} as { [K in TestResultState]: TreeStateNode }\n);\n\nexport const cmpPriority = (a: TestResultState, b: TestResultState) => statePriority[b] - statePriority[a];\n\nexport const maxPriority = (...states: TestResultState[]) => {\n\tswitch (states.length) {\n\t\tcase 0:\n\t\t\treturn TestResultState.Unset;\n\t\tcase 1:\n\t\t\treturn states[0];\n\t\tcase 2:\n\t\t\treturn statePriority[states[0]] > statePriority[states[1]] ? states[0] : states[1];\n\t\tdefault: {\n\t\t\tlet max = states[0];\n\t\t\tfor (let i = 1; i < states.length; i++) {\n\t\t\t\tif (statePriority[max] < statePriority[states[i]]) {\n\t\t\t\t\tmax = states[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn max;\n\t\t}\n\t}\n};\n\nexport const statesInOrder = Object.keys(statePriority).map(s => Number(s) as TestResultState).sort(cmpPriority);\n\n/**\n * Some states are considered terminal; once these are set for a given test run, they\n * are not reset back to a non-terminal state, or to a terminal state with lower\n * priority.\n */\nexport const terminalStatePriorities: { [key in TestResultState]?: number } = {\n\t[TestResultState.Passed]: 0,\n\t[TestResultState.Skipped]: 1,\n\t[TestResultState.Failed]: 2,\n\t[TestResultState.Errored]: 3,\n};\n\n/**\n * Count of the number of tests in each run state.\n */\nexport type TestStateCount = { [K in TestResultState]: number };\n\nexport const makeEmptyCounts = (): TestStateCount => {\n\t// shh! don't tell anyone this is actually an array!\n\treturn new Uint32Array(statesInOrder.length) as any as { [K in TestResultState]: number };\n};\n"]}