{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/testing/common/observableValue.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAWzF,MAAM,IAAI,GAAoB,CAAI,KAAQ,EAAuB,EAAE,CAAC,CAAC;QAC3E,WAAW,EAAE,aAAK,CAAC,IAAI;QACvB,KAAK;KACL,CAAC,CAAC;IAHU,QAAA,IAAI,QAGd;IAEH,MAAa,IAA0B,SAAQ,eAAG;QAKjD,IAAW,KAAK;YACf,OAAO,IAAI,CAAC,CAAC,CAAM;QACpB,CAAC;QAED,IAAW,KAAK,CAAC,CAAI;YACpB,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,EAAO;gBACtB,IAAI,CAAC,CAAC,GAAQ,CAAC,CAAC;gBAChB,IAAI,CAAC,CAAC,CAAa,IAAI,CAAC,CAAC,CAAC,CAAC;aAC3B;QACF,CAAC;QAEM,MAAM,CAAC,MAAM,CAAI,MAAsB,EAAE,YAAe;YAC9D,MAAM,CAAC,GAAG,IAAI,IAAI,CAAmB,MAAM,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC,CAAC;YAC/D,CAAC,CAAC,CAAC,CAAS,MAAM,CAAC,CAAC;YACpB,CAAC,CAAC,CAAC,CAAS,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YACzD,OAAO,CAAC,CAAC;QACV,CAAC;QAED,YAAoB,CAAS;YAC5B,KAAK,EAAE,CAAC;YADW,MAAC,GAAD,CAAC,CAAQ;YAtBZ,MAAC,GAAe,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAS,CAAC,CAAC;YAElD,gBAAW,GAAG,IAAI,CAAC,CAAC,CAAa,KAAK,CAAC;QAsBvD,CAAC;KACD;IA1BD,oBA0BC","file":"observableValue.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { StoredValue } from 'vs/workbench/contrib/testing/common/storedValue';\n\nexport interface IObservableValue<T> {\n\tonDidChange: Event<T>;\n\treadonly value: T;\n}\n\nexport const staticObservableValue = <T>(value: T): IObservableValue<T> => ({\n\tonDidChange: Event.None,\n\tvalue,\n});\n\nexport class MutableObservableValue<T> extends Disposable implements IObservableValue<T> {\n\tprivate readonly changeEmitter = this._register(new Emitter<T>());\n\n\tpublic readonly onDidChange = this.changeEmitter.event;\n\n\tpublic get value() {\n\t\treturn this._value;\n\t}\n\n\tpublic set value(v: T) {\n\t\tif (v !== this._value) {\n\t\t\tthis._value = v;\n\t\t\tthis.changeEmitter.fire(v);\n\t\t}\n\t}\n\n\tpublic static stored<T>(stored: StoredValue<T>, defaultValue: T) {\n\t\tconst o = new MutableObservableValue(stored.get(defaultValue));\n\t\to._register(stored);\n\t\to._register(o.onDidChange(value => stored.store(value)));\n\t\treturn o;\n\t}\n\n\tconstructor(private _value: T) {\n\t\tsuper();\n\t}\n}\n"]}