{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/testing/common/storedValue.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAWhG,MAAM,oBAAoB,GAAmC;QAC5D,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;QAC/B,SAAS,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;KACjC,CAAC;IASF;;OAEG;IACI,IAAM,IAAI,GAAV,MAAM,IAAe,SAAQ,eAAG;QAYtC,YACC,OAA+B,EACG,CAAY;YAE9C,KAAK,EAAE,CAAC;YAF0B,MAAC,GAAD,CAAC,CAAW;YAI9C,IAAI,CAAC,CAAC,GAAK,OAAO,CAAC,GAAG,CAAC;YACvB,IAAI,CAAC,CAAC,GAAO,OAAO,CAAC,KAAK,CAAC;YAC3B,IAAI,CAAC,CAAC,GAAQ,OAAO,CAAC,MAAM,CAAC;YAC7B,IAAI,CAAC,CAAC,GAAe,OAAO,CAAC,aAAa,IAAI,oBAAoB,CAAC;YACnE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC,CAAO,gBAAgB,CAAC,IAAI,CAAC,CAAC,EAAM,IAAI,CAAC,CAAC,EAAI,IAAI,CAAC,CAAC,CAAS,IAAI,eAAG,EAAc,CAAC,CAAC,CAAC;QAC/G,CAAC;QAYM,GAAG,CAAC,YAAgB;YAC1B,IAAI,IAAI,CAAC,CAAC,KAAS,SAAS,EAAE;gBAC7B,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAO,GAAG,CAAC,IAAI,CAAC,CAAC,EAAI,IAAI,CAAC,CAAC,CAAK,CAAC;gBACrD,IAAI,CAAC,CAAC,GAAO,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAa,WAAW,CAAC,KAAK,CAAC,CAAC;aACxF;YAED,OAAO,IAAI,CAAC,CAAC,CAAK;QACnB,CAAC;QAED;;;WAGG;QACI,KAAK,CAAC,KAAQ;YACpB,IAAI,CAAC,CAAC,GAAO,KAAK,CAAC;YACnB,IAAI,CAAC,CAAC,CAAO,KAAK,CAAC,IAAI,CAAC,CAAC,EAAI,IAAI,CAAC,CAAC,CAAa,SAAS,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC,EAAM,IAAI,CAAC,CAAC,CAAM,CAAC;QAC5F,CAAC;QAED;;WAEG;QACI,MAAM;YACZ,IAAI,CAAC,CAAC,CAAO,MAAM,CAAC,IAAI,CAAC,CAAC,EAAI,IAAI,CAAC,CAAC,CAAK,CAAC;QAC3C,CAAC;KACD,CAAA;IA3DY,oBAAI;mBAAJ,IAAI;QAcd,WAAA,aAAG,CAAA;OAdO,IAAI,CA2DhB","file":"storedValue.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { IStorageService, IStorageValueChangeEvent, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\n\nexport interface IStoredValueSerialization<T> {\n\tdeserialize(data: string): T;\n\tserialize(data: T): string;\n}\n\nconst defaultSerialization: IStoredValueSerialization<any> = {\n\tdeserialize: d => JSON.parse(d),\n\tserialize: d => JSON.stringify(d),\n};\n\ninterface IStoredValueOptions<T> {\n\tkey: string;\n\tscope: StorageScope;\n\ttarget: StorageTarget;\n\tserialization?: IStoredValueSerialization<T>;\n}\n\n/**\n * todo@connor4312: is this worthy to be in common?\n */\nexport class StoredValue<T> extends Disposable {\n\tprivate readonly serialization: IStoredValueSerialization<T>;\n\tprivate readonly key: string;\n\tprivate readonly scope: StorageScope;\n\tprivate readonly target: StorageTarget;\n\tprivate value?: T;\n\n\t/**\n\t * Emitted whenever the value is updated or deleted.\n\t */\n\tpublic readonly onDidChange: Event<IStorageValueChangeEvent>;\n\n\tconstructor(\n\t\toptions: IStoredValueOptions<T>,\n\t\t@IStorageService private readonly storage: IStorageService,\n\t) {\n\t\tsuper();\n\n\t\tthis.key = options.key;\n\t\tthis.scope = options.scope;\n\t\tthis.target = options.target;\n\t\tthis.serialization = options.serialization ?? defaultSerialization;\n\t\tthis.onDidChange = this.storage.onDidChangeValue(this.scope, this.key, this._register(new DisposableStore()));\n\t}\n\n\t/**\n\t * Reads the value, returning the undefined if it's not set.\n\t */\n\tpublic get(): T | undefined;\n\n\t/**\n\t * Reads the value, returning the default value if it's not set.\n\t */\n\tpublic get(defaultValue: T): T;\n\n\tpublic get(defaultValue?: T): T | undefined {\n\t\tif (this.value === undefined) {\n\t\t\tconst value = this.storage.get(this.key, this.scope);\n\t\t\tthis.value = value === undefined ? defaultValue : this.serialization.deserialize(value);\n\t\t}\n\n\t\treturn this.value;\n\t}\n\n\t/**\n\t * Persists changes to the value.\n\t * @param value\n\t */\n\tpublic store(value: T) {\n\t\tthis.value = value;\n\t\tthis.storage.store(this.key, this.serialization.serialize(value), this.scope, this.target);\n\t}\n\n\t/**\n\t * Delete an element stored under the provided key from storage.\n\t */\n\tpublic delete() {\n\t\tthis.storage.remove(this.key, this.scope);\n\t}\n}\n"]}