{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/testing/common/testTypes.ts"],"names":[],"mappings":"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","file":"testTypes.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\nimport { MarshalledId } from 'vs/base/common/marshallingIds';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { IPosition } from 'vs/editor/common/core/position';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { TestId } from 'vs/workbench/contrib/testing/common/testId';\n\nexport const enum TestResultState {\n\tUnset = 0,\n\tQueued = 1,\n\tRunning = 2,\n\tPassed = 3,\n\tFailed = 4,\n\tSkipped = 5,\n\tErrored = 6\n}\n\n/** note: keep in sync with TestRunProfileKind in vscode.d.ts */\nexport const enum ExtTestRunProfileKind {\n\tRun = 1,\n\tDebug = 2,\n\tCoverage = 3,\n}\n\nexport const enum TestRunProfileBitset {\n\tRun = 1 << 1,\n\tDebug = 1 << 2,\n\tCoverage = 1 << 3,\n\tHasNonDefaultProfile = 1 << 4,\n\tHasConfigurable = 1 << 5,\n\tSupportsContinuousRun = 1 << 6,\n}\n\n/**\n * List of all test run profile bitset values.\n */\nexport const testRunProfileBitsetList = [\n\tTestRunProfileBitset.Run,\n\tTestRunProfileBitset.Debug,\n\tTestRunProfileBitset.Coverage,\n\tTestRunProfileBitset.HasNonDefaultProfile,\n\tTestRunProfileBitset.HasConfigurable,\n\tTestRunProfileBitset.SupportsContinuousRun,\n];\n\n/**\n * DTO for a controller's run profiles.\n */\nexport interface ITestRunProfile {\n\tcontrollerId: string;\n\tprofileId: number;\n\tlabel: string;\n\tgroup: TestRunProfileBitset;\n\tisDefault: boolean;\n\ttag: string | null;\n\thasConfigurationHandler: boolean;\n\tsupportsContinuousRun: boolean;\n}\n\n/**\n * A fully-resolved request to run tests, passsed between the main thread\n * and extension host.\n */\nexport interface ResolvedTestRunRequest {\n\ttargets: {\n\t\ttestIds: string[];\n\t\tcontrollerId: string;\n\t\tprofileGroup: TestRunProfileBitset;\n\t\tprofileId: number;\n\t}[];\n\texclude?: string[];\n\t/** Whether this is a continuous test run */\n\tcontinuous?: boolean;\n\t/** Whether this was trigged by a user action in UI. Default=true */\n\tisUiTriggered?: boolean;\n}\n\n/**\n * Request to the main thread to run a set of tests.\n */\nexport interface ExtensionRunTestsRequest {\n\tid: string;\n\tinclude: string[];\n\texclude: string[];\n\tcontrollerId: string;\n\tprofile?: { group: TestRunProfileBitset; id: number };\n\tpersist: boolean;\n\t/** Whether this is a result of a continuous test run request */\n\tcontinuous: boolean;\n}\n\n/**\n * Request parameters a controller run handler. This is different than\n * {@link IStartControllerTests}. The latter is used to ask for one or more test\n * runs tracked directly by the renderer.\n *\n * This alone can be used to start an autorun, without a specific associated runId.\n */\nexport interface ICallProfileRunHandler {\n\tcontrollerId: string;\n\tprofileId: number;\n\texcludeExtIds: string[];\n\ttestIds: string[];\n}\n\nexport const isStartControllerTests = (t: ICallProfileRunHandler | IStartControllerTests): t is IStartControllerTests => ('runId' as keyof IStartControllerTests) in t;\n\n/**\n * Request from the main thread to run tests for a single controller.\n */\nexport interface IStartControllerTests extends ICallProfileRunHandler {\n\trunId: string;\n}\n\nexport interface IStartControllerTestsResult {\n\terror?: string;\n}\n\n/**\n * Location with a fully-instantiated Range and URI.\n */\nexport interface IRichLocation {\n\trange: Range;\n\turi: URI;\n}\n\nexport namespace IRichLocation {\n\texport interface Serialize {\n\t\trange: IRange;\n\t\turi: UriComponents;\n\t}\n\n\texport const serialize = (location: IRichLocation): Serialize => ({\n\t\trange: location.range.toJSON(),\n\t\turi: location.uri.toJSON(),\n\t});\n\n\texport const deserialize = (location: Serialize): IRichLocation => ({\n\t\trange: Range.lift(location.range),\n\t\turi: URI.revive(location.uri),\n\t});\n}\n\nexport const enum TestMessageType {\n\tError,\n\tOutput\n}\n\nexport interface ITestErrorMessage {\n\tmessage: string | IMarkdownString;\n\ttype: TestMessageType.Error;\n\texpected: string | undefined;\n\tactual: string | undefined;\n\tcontextValue: string | undefined;\n\tlocation: IRichLocation | undefined;\n}\n\nexport namespace ITestErrorMessage {\n\texport interface Serialized {\n\t\tmessage: string | IMarkdownString;\n\t\ttype: TestMessageType.Error;\n\t\texpected: string | undefined;\n\t\tactual: string | undefined;\n\t\tcontextValue: string | undefined;\n\t\tlocation: IRichLocation.Serialize | undefined;\n\t}\n\n\texport const serialize = (message: ITestErrorMessage): Serialized => ({\n\t\tmessage: message.message,\n\t\ttype: TestMessageType.Error,\n\t\texpected: message.expected,\n\t\tactual: message.actual,\n\t\tcontextValue: message.contextValue,\n\t\tlocation: message.location && IRichLocation.serialize(message.location),\n\t});\n\n\texport const deserialize = (message: Serialized): ITestErrorMessage => ({\n\t\tmessage: message.message,\n\t\ttype: TestMessageType.Error,\n\t\texpected: message.expected,\n\t\tactual: message.actual,\n\t\tcontextValue: message.contextValue,\n\t\tlocation: message.location && IRichLocation.deserialize(message.location),\n\t});\n}\n\nexport interface ITestOutputMessage {\n\tmessage: string;\n\ttype: TestMessageType.Output;\n\toffset: number;\n\tlength: number;\n\tmarker?: number;\n\tlocation: IRichLocation | undefined;\n}\n\n/**\n * Gets the TTY marker ID for either starting or ending\n * an ITestOutputMessage.marker of the given ID.\n */\nexport const getMarkId = (marker: number, start: boolean) => `${start ? 's' : 'e'}${marker}`;\n\nexport namespace ITestOutputMessage {\n\texport interface Serialized {\n\t\tmessage: string;\n\t\toffset: number;\n\t\tlength: number;\n\t\ttype: TestMessageType.Output;\n\t\tlocation: IRichLocation.Serialize | undefined;\n\t}\n\n\texport const serialize = (message: ITestOutputMessage): Serialized => ({\n\t\tmessage: message.message,\n\t\ttype: TestMessageType.Output,\n\t\toffset: message.offset,\n\t\tlength: message.length,\n\t\tlocation: message.location && IRichLocation.serialize(message.location),\n\t});\n\n\texport const deserialize = (message: Serialized): ITestOutputMessage => ({\n\t\tmessage: message.message,\n\t\ttype: TestMessageType.Output,\n\t\toffset: message.offset,\n\t\tlength: message.length,\n\t\tlocation: message.location && IRichLocation.deserialize(message.location),\n\t});\n}\n\nexport type ITestMessage = ITestErrorMessage | ITestOutputMessage;\n\nexport namespace ITestMessage {\n\texport type Serialized = ITestErrorMessage.Serialized | ITestOutputMessage.Serialized;\n\n\texport const serialize = (message: ITestMessage): Serialized =>\n\t\tmessage.type === TestMessageType.Error ? ITestErrorMessage.serialize(message) : ITestOutputMessage.serialize(message);\n\n\texport const deserialize = (message: Serialized): ITestMessage =>\n\t\tmessage.type === TestMessageType.Error ? ITestErrorMessage.deserialize(message) : ITestOutputMessage.deserialize(message);\n}\n\nexport interface ITestTaskState {\n\tstate: TestResultState;\n\tduration: number | undefined;\n\tmessages: ITestMessage[];\n}\n\nexport namespace ITestTaskState {\n\texport interface Serialized {\n\t\tstate: TestResultState;\n\t\tduration: number | undefined;\n\t\tmessages: ITestMessage.Serialized[];\n\t}\n\n\texport const serializeWithoutMessages = (state: ITestTaskState): Serialized => ({\n\t\tstate: state.state,\n\t\tduration: state.duration,\n\t\tmessages: [],\n\t});\n\n\texport const serialize = (state: ITestTaskState): Serialized => ({\n\t\tstate: state.state,\n\t\tduration: state.duration,\n\t\tmessages: state.messages.map(ITestMessage.serialize),\n\t});\n\n\texport const deserialize = (state: Serialized): ITestTaskState => ({\n\t\tstate: state.state,\n\t\tduration: state.duration,\n\t\tmessages: state.messages.map(ITestMessage.deserialize),\n\t});\n}\n\nexport interface ITestRunTask {\n\tid: string;\n\tname: string | undefined;\n\trunning: boolean;\n}\n\nexport interface ITestTag {\n\treadonly id: string;\n}\n\nconst testTagDelimiter = '\\0';\n\nexport const namespaceTestTag =\n\t(ctrlId: string, tagId: string) => ctrlId + testTagDelimiter + tagId;\n\nexport const denamespaceTestTag = (namespaced: string) => {\n\tconst index = namespaced.indexOf(testTagDelimiter);\n\treturn { ctrlId: namespaced.slice(0, index), tagId: namespaced.slice(index + 1) };\n};\n\nexport interface ITestTagDisplayInfo {\n\tid: string;\n}\n\n/**\n * The TestItem from .d.ts, as a plain object without children.\n */\nexport interface ITestItem {\n\t/** ID of the test given by the test controller */\n\textId: string;\n\tlabel: string;\n\ttags: string[];\n\tbusy: boolean;\n\tchildren?: never;\n\turi: URI | undefined;\n\trange: Range | null;\n\tdescription: string | null;\n\terror: string | IMarkdownString | null;\n\tsortText: string | null;\n}\n\nexport namespace ITestItem {\n\texport interface Serialized {\n\t\textId: string;\n\t\tlabel: string;\n\t\ttags: string[];\n\t\tbusy: boolean;\n\t\tchildren?: never;\n\t\turi: UriComponents | undefined;\n\t\trange: IRange | null;\n\t\tdescription: string | null;\n\t\terror: string | IMarkdownString | null;\n\t\tsortText: string | null;\n\t}\n\n\texport const serialize = (item: ITestItem): Serialized => ({\n\t\textId: item.extId,\n\t\tlabel: item.label,\n\t\ttags: item.tags,\n\t\tbusy: item.busy,\n\t\tchildren: undefined,\n\t\turi: item.uri?.toJSON(),\n\t\trange: item.range?.toJSON() || null,\n\t\tdescription: item.description,\n\t\terror: item.error,\n\t\tsortText: item.sortText\n\t});\n\n\texport const deserialize = (serialized: Serialized): ITestItem => ({\n\t\textId: serialized.extId,\n\t\tlabel: serialized.label,\n\t\ttags: serialized.tags,\n\t\tbusy: serialized.busy,\n\t\tchildren: undefined,\n\t\turi: serialized.uri ? URI.revive(serialized.uri) : undefined,\n\t\trange: serialized.range ? Range.lift(serialized.range) : null,\n\t\tdescription: serialized.description,\n\t\terror: serialized.error,\n\t\tsortText: serialized.sortText\n\t});\n}\n\nexport const enum TestItemExpandState {\n\tNotExpandable,\n\tExpandable,\n\tBusyExpanding,\n\tExpanded,\n}\n\n/**\n * TestItem-like shape, but with an ID and children as strings.\n */\nexport interface InternalTestItem {\n\t/** Controller ID from whence this test came */\n\tcontrollerId: string;\n\t/** Expandability state */\n\texpand: TestItemExpandState;\n\t/** Raw test item properties */\n\titem: ITestItem;\n}\n\nexport namespace InternalTestItem {\n\texport interface Serialized {\n\t\texpand: TestItemExpandState;\n\t\titem: ITestItem.Serialized;\n\t}\n\n\texport const serialize = (item: InternalTestItem): Serialized => ({\n\t\texpand: item.expand,\n\t\titem: ITestItem.serialize(item.item)\n\t});\n\n\texport const deserialize = (serialized: Serialized): InternalTestItem => ({\n\t\t// the `controllerId` is derived from the test.item.extId. It's redundant\n\t\t// in the non-serialized InternalTestItem too, but there just because it's\n\t\t// checked against in many hot paths.\n\t\tcontrollerId: TestId.root(serialized.item.extId),\n\t\texpand: serialized.expand,\n\t\titem: ITestItem.deserialize(serialized.item)\n\t});\n}\n\n/**\n * A partial update made to an existing InternalTestItem.\n */\nexport interface ITestItemUpdate {\n\textId: string;\n\texpand?: TestItemExpandState;\n\titem?: Partial<ITestItem>;\n}\n\nexport namespace ITestItemUpdate {\n\texport interface Serialized {\n\t\textId: string;\n\t\texpand?: TestItemExpandState;\n\t\titem?: Partial<ITestItem.Serialized>;\n\t}\n\n\texport const serialize = (u: ITestItemUpdate): Serialized => {\n\t\tlet item: Partial<ITestItem.Serialized> | undefined;\n\t\tif (u.item) {\n\t\t\titem = {};\n\t\t\tif (u.item.label !== undefined) { item.label = u.item.label; }\n\t\t\tif (u.item.tags !== undefined) { item.tags = u.item.tags; }\n\t\t\tif (u.item.busy !== undefined) { item.busy = u.item.busy; }\n\t\t\tif (u.item.uri !== undefined) { item.uri = u.item.uri?.toJSON(); }\n\t\t\tif (u.item.range !== undefined) { item.range = u.item.range?.toJSON(); }\n\t\t\tif (u.item.description !== undefined) { item.description = u.item.description; }\n\t\t\tif (u.item.error !== undefined) { item.error = u.item.error; }\n\t\t\tif (u.item.sortText !== undefined) { item.sortText = u.item.sortText; }\n\t\t}\n\n\t\treturn { extId: u.extId, expand: u.expand, item };\n\t};\n\n\texport const deserialize = (u: Serialized): ITestItemUpdate => {\n\t\tlet item: Partial<ITestItem> | undefined;\n\t\tif (u.item) {\n\t\t\titem = {};\n\t\t\tif (u.item.label !== undefined) { item.label = u.item.label; }\n\t\t\tif (u.item.tags !== undefined) { item.tags = u.item.tags; }\n\t\t\tif (u.item.busy !== undefined) { item.busy = u.item.busy; }\n\t\t\tif (u.item.range !== undefined) { item.range = u.item.range ? Range.lift(u.item.range) : null; }\n\t\t\tif (u.item.description !== undefined) { item.description = u.item.description; }\n\t\t\tif (u.item.error !== undefined) { item.error = u.item.error; }\n\t\t\tif (u.item.sortText !== undefined) { item.sortText = u.item.sortText; }\n\t\t}\n\n\t\treturn { extId: u.extId, expand: u.expand, item };\n\t};\n\n}\n\nexport const applyTestItemUpdate = (internal: InternalTestItem | ITestItemUpdate, patch: ITestItemUpdate) => {\n\tif (patch.expand !== undefined) {\n\t\tinternal.expand = patch.expand;\n\t}\n\tif (patch.item !== undefined) {\n\t\tinternal.item = internal.item ? Object.assign(internal.item, patch.item) : patch.item;\n\t}\n};\n\n/**\n * Test result item used in the main thread.\n */\nexport interface TestResultItem extends InternalTestItem {\n\t/** State of this test in various tasks */\n\ttasks: ITestTaskState[];\n\t/** State of this test as a computation of its tasks */\n\townComputedState: TestResultState;\n\t/** Computed state based on children */\n\tcomputedState: TestResultState;\n\t/** Max duration of the item's tasks (if run directly) */\n\townDuration?: number;\n\t/** Whether this test item is outdated */\n\tretired?: boolean;\n}\n\nexport namespace TestResultItem {\n\t/**\n\t * Serialized version of the TestResultItem. Note that 'retired' is not\n\t * included since all hydrated items are automatically retired.\n\t */\n\texport interface Serialized extends InternalTestItem.Serialized {\n\t\ttasks: ITestTaskState.Serialized[];\n\t\townComputedState: TestResultState;\n\t\tcomputedState: TestResultState;\n\t}\n\n\texport const serializeWithoutMessages = (original: TestResultItem): Serialized => ({\n\t\t...InternalTestItem.serialize(original),\n\t\townComputedState: original.ownComputedState,\n\t\tcomputedState: original.computedState,\n\t\ttasks: original.tasks.map(ITestTaskState.serializeWithoutMessages),\n\t});\n\n\texport const serialize = (original: TestResultItem): Serialized => ({\n\t\t...InternalTestItem.serialize(original),\n\t\townComputedState: original.ownComputedState,\n\t\tcomputedState: original.computedState,\n\t\ttasks: original.tasks.map(ITestTaskState.serialize),\n\t});\n\n\texport const deserialize = (serialized: Serialized): TestResultItem => ({\n\t\t...InternalTestItem.deserialize(serialized),\n\t\townComputedState: serialized.ownComputedState,\n\t\tcomputedState: serialized.computedState,\n\t\ttasks: serialized.tasks.map(ITestTaskState.deserialize),\n\t\tretired: true,\n\t});\n}\n\nexport interface ISerializedTestResults {\n\t/** ID of these test results */\n\tid: string;\n\t/** Time the results were compelted */\n\tcompletedAt: number;\n\t/** Subset of test result items */\n\titems: TestResultItem.Serialized[];\n\t/** Tasks involved in the run. */\n\ttasks: { id: string; name: string | undefined }[];\n\t/** Human-readable name of the test run. */\n\tname: string;\n\t/** Test trigger informaton */\n\trequest: ResolvedTestRunRequest;\n}\n\nexport interface ITestCoverage {\n\tfiles: IFileCoverage[];\n}\n\nexport interface ICoveredCount {\n\tcovered: number;\n\ttotal: number;\n}\n\nexport interface IFileCoverage {\n\turi: URI;\n\tstatement: ICoveredCount;\n\tbranch?: ICoveredCount;\n\tfunction?: ICoveredCount;\n\tdetails?: CoverageDetails[];\n}\n\nexport const enum DetailType {\n\tFunction,\n\tStatement,\n}\n\nexport type CoverageDetails = IFunctionCoverage | IStatementCoverage;\n\nexport interface IBranchCoverage {\n\tcount: number;\n\tlocation?: IRange | IPosition;\n}\n\nexport interface IFunctionCoverage {\n\ttype: DetailType.Function;\n\tcount: number;\n\tlocation?: IRange | IPosition;\n}\n\nexport interface IStatementCoverage {\n\ttype: DetailType.Statement;\n\tcount: number;\n\tlocation: IRange | IPosition;\n\tbranches?: IBranchCoverage[];\n}\n\nexport const enum TestDiffOpType {\n\t/** Adds a new test (with children) */\n\tAdd,\n\t/** Shallow-updates an existing test */\n\tUpdate,\n\t/** Ranges of some tests in a document were synced, so it should be considered up-to-date */\n\tDocumentSynced,\n\t/** Removes a test (and all its children) */\n\tRemove,\n\t/** Changes the number of controllers who are yet to publish their collection roots. */\n\tIncrementPendingExtHosts,\n\t/** Retires a test/result */\n\tRetire,\n\t/** Add a new test tag */\n\tAddTag,\n\t/** Remove a test tag */\n\tRemoveTag,\n}\n\nexport type TestsDiffOp =\n\t| { op: TestDiffOpType.Add; item: InternalTestItem }\n\t| { op: TestDiffOpType.Update; item: ITestItemUpdate }\n\t| { op: TestDiffOpType.Remove; itemId: string }\n\t| { op: TestDiffOpType.Retire; itemId: string }\n\t| { op: TestDiffOpType.IncrementPendingExtHosts; amount: number }\n\t| { op: TestDiffOpType.AddTag; tag: ITestTagDisplayInfo }\n\t| { op: TestDiffOpType.RemoveTag; id: string }\n\t| { op: TestDiffOpType.DocumentSynced; uri: URI; docv?: number };\n\nexport namespace TestsDiffOp {\n\texport type Serialized =\n\t\t| { op: TestDiffOpType.Add; item: InternalTestItem.Serialized }\n\t\t| { op: TestDiffOpType.Update; item: ITestItemUpdate.Serialized }\n\t\t| { op: TestDiffOpType.Remove; itemId: string }\n\t\t| { op: TestDiffOpType.Retire; itemId: string }\n\t\t| { op: TestDiffOpType.IncrementPendingExtHosts; amount: number }\n\t\t| { op: TestDiffOpType.AddTag; tag: ITestTagDisplayInfo }\n\t\t| { op: TestDiffOpType.RemoveTag; id: string }\n\t\t| { op: TestDiffOpType.DocumentSynced; uri: UriComponents; docv?: number };\n\n\texport const deserialize = (u: Serialized): TestsDiffOp => {\n\t\tif (u.op === TestDiffOpType.Add) {\n\t\t\treturn { op: u.op, item: InternalTestItem.deserialize(u.item) };\n\t\t} else if (u.op === TestDiffOpType.Update) {\n\t\t\treturn { op: u.op, item: ITestItemUpdate.deserialize(u.item) };\n\t\t} else if (u.op === TestDiffOpType.DocumentSynced) {\n\t\t\treturn { op: u.op, uri: URI.revive(u.uri), docv: u.docv };\n\t\t} else {\n\t\t\treturn u;\n\t\t}\n\t};\n\n\texport const serialize = (u: TestsDiffOp): Serialized => {\n\t\tif (u.op === TestDiffOpType.Add) {\n\t\t\treturn { op: u.op, item: InternalTestItem.serialize(u.item) };\n\t\t} else if (u.op === TestDiffOpType.Update) {\n\t\t\treturn { op: u.op, item: ITestItemUpdate.serialize(u.item) };\n\t\t} else {\n\t\t\treturn u;\n\t\t}\n\t};\n}\n\n/**\n * Context for actions taken in the test explorer view.\n */\nexport interface ITestItemContext {\n\t/** Marshalling marker */\n\t$mid: MarshalledId.TestItemContext;\n\t/** Tests and parents from the root to the current items */\n\ttests: InternalTestItem.Serialized[];\n}\n\n/**\n * Context for actions taken in the test explorer view.\n */\nexport interface ITestMessageMenuArgs {\n\t/** Marshalling marker */\n\t$mid: MarshalledId.TestMessageMenuArgs;\n\t/** Tests ext ID */\n\textId: string;\n\t/** Serialized test message */\n\tmessage: ITestMessage.Serialized;\n}\n\n/**\n * Request from the ext host or main thread to indicate that tests have\n * changed. It's assumed that any item upserted *must* have its children\n * previously also upserted, or upserted as part of the same operation.\n * Children that no longer exist in an upserted item will be removed.\n */\nexport type TestsDiff = TestsDiffOp[];\n\n/**\n * @private\n */\nexport interface IncrementalTestCollectionItem extends InternalTestItem {\n\tchildren: Set<string>;\n}\n\n/**\n * The IncrementalChangeCollector is used in the IncrementalTestCollection\n * and called with diff changes as they're applied. This is used in the\n * ext host to create a cohesive change event from a diff.\n */\nexport interface IncrementalChangeCollector<T> {\n\t/**\n\t * A node was added.\n\t */\n\tadd?(node: T): void;\n\n\t/**\n\t * A node in the collection was updated.\n\t */\n\tupdate?(node: T): void;\n\n\t/**\n\t * A node was removed.\n\t */\n\tremove?(node: T, isNestedOperation: boolean): void;\n\n\t/**\n\t * Called when the diff has been applied.\n\t */\n\tcomplete?(): void;\n}\n\n/**\n * Maintains tests in this extension host sent from the main thread.\n */\nexport abstract class AbstractIncrementalTestCollection<T extends IncrementalTestCollectionItem>  {\n\tprivate readonly _tags = new Map<string, ITestTagDisplayInfo>();\n\n\t/**\n\t * Map of item IDs to test item objects.\n\t */\n\tprotected readonly items = new Map<string, T>();\n\n\t/**\n\t * ID of test root items.\n\t */\n\tprotected readonly roots = new Set<T>();\n\n\t/**\n\t * Number of 'busy' controllers.\n\t */\n\tprotected busyControllerCount = 0;\n\n\t/**\n\t * Number of pending roots.\n\t */\n\tprotected pendingRootCount = 0;\n\n\t/**\n\t * Known test tags.\n\t */\n\tpublic readonly tags: ReadonlyMap<string, ITestTagDisplayInfo> = this._tags;\n\n\t/**\n\t * Applies the diff to the collection.\n\t */\n\tpublic apply(diff: TestsDiff) {\n\t\tconst changes = this.createChangeCollector();\n\n\t\tfor (const op of diff) {\n\t\t\tswitch (op.op) {\n\t\t\t\tcase TestDiffOpType.Add:\n\t\t\t\t\tthis.add(InternalTestItem.deserialize(op.item), changes);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TestDiffOpType.Update:\n\t\t\t\t\tthis.update(ITestItemUpdate.deserialize(op.item), changes);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TestDiffOpType.Remove:\n\t\t\t\t\tthis.remove(op.itemId, changes);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TestDiffOpType.Retire:\n\t\t\t\t\tthis.retireTest(op.itemId);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TestDiffOpType.IncrementPendingExtHosts:\n\t\t\t\t\tthis.updatePendingRoots(op.amount);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TestDiffOpType.AddTag:\n\t\t\t\t\tthis._tags.set(op.tag.id, op.tag);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase TestDiffOpType.RemoveTag:\n\t\t\t\t\tthis._tags.delete(op.id);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tchanges.complete?.();\n\t}\n\n\tprotected add(item: InternalTestItem, changes: IncrementalChangeCollector<T>\n\t) {\n\t\tconst parentId = TestId.parentId(item.item.extId)?.toString();\n\t\tlet created: T;\n\t\tif (!parentId) {\n\t\t\tcreated = this.createItem(item);\n\t\t\tthis.roots.add(created);\n\t\t\tthis.items.set(item.item.extId, created);\n\t\t} else if (this.items.has(parentId)) {\n\t\t\tconst parent = this.items.get(parentId)!;\n\t\t\tparent.children.add(item.item.extId);\n\t\t\tcreated = this.createItem(item, parent);\n\t\t\tthis.items.set(item.item.extId, created);\n\t\t} else {\n\t\t\tconsole.error(`Test with unknown parent ID: ${JSON.stringify(item)}`);\n\t\t\treturn;\n\t\t}\n\n\t\tchanges.add?.(created);\n\t\tif (item.expand === TestItemExpandState.BusyExpanding) {\n\t\t\tthis.busyControllerCount++;\n\t\t}\n\n\t\treturn created;\n\t}\n\n\tprotected update(patch: ITestItemUpdate, changes: IncrementalChangeCollector<T>\n\t) {\n\t\tconst existing = this.items.get(patch.extId);\n\t\tif (!existing) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (patch.expand !== undefined) {\n\t\t\tif (existing.expand === TestItemExpandState.BusyExpanding) {\n\t\t\t\tthis.busyControllerCount--;\n\t\t\t}\n\t\t\tif (patch.expand === TestItemExpandState.BusyExpanding) {\n\t\t\t\tthis.busyControllerCount++;\n\t\t\t}\n\t\t}\n\n\t\tapplyTestItemUpdate(existing, patch);\n\t\tchanges.update?.(existing);\n\t\treturn existing;\n\t}\n\n\tprotected remove(itemId: string, changes: IncrementalChangeCollector<T>) {\n\t\tconst toRemove = this.items.get(itemId);\n\t\tif (!toRemove) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst parentId = TestId.parentId(toRemove.item.extId)?.toString();\n\t\tif (parentId) {\n\t\t\tconst parent = this.items.get(parentId)!;\n\t\t\tparent.children.delete(toRemove.item.extId);\n\t\t} else {\n\t\t\tthis.roots.delete(toRemove);\n\t\t}\n\n\t\tconst queue: Iterable<string>[] = [[itemId]];\n\t\twhile (queue.length) {\n\t\t\tfor (const itemId of queue.pop()!) {\n\t\t\t\tconst existing = this.items.get(itemId);\n\t\t\t\tif (existing) {\n\t\t\t\t\tqueue.push(existing.children);\n\t\t\t\t\tthis.items.delete(itemId);\n\t\t\t\t\tchanges.remove?.(existing, existing !== toRemove);\n\n\t\t\t\t\tif (existing.expand === TestItemExpandState.BusyExpanding) {\n\t\t\t\t\t\tthis.busyControllerCount--;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Called when the extension signals a test result should be retired.\n\t */\n\tprotected retireTest(testId: string) {\n\t\t// no-op\n\t}\n\n\t/**\n\t * Updates the number of test root sources who are yet to report. When\n\t * the total pending test roots reaches 0, the roots for all controllers\n\t * will exist in the collection.\n\t */\n\tpublic updatePendingRoots(delta: number) {\n\t\tthis.pendingRootCount += delta;\n\t}\n\n\t/**\n\t * Called before a diff is applied to create a new change collector.\n\t */\n\tprotected createChangeCollector(): IncrementalChangeCollector<T> {\n\t\treturn {};\n\t}\n\n\t/**\n\t * Creates a new item for the collection from the internal test item.\n\t */\n\tprotected abstract createItem(internal: InternalTestItem, parent?: T): T;\n}\n"]}