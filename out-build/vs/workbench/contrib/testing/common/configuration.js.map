{"version":3,"sources":["vs/workbench/contrib/testing/common/configuration.ts"],"names":[],"mappings":"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","file":"configuration.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IConfigurationNode } from 'vs/platform/configuration/common/configurationRegistry';\n\nexport const enum TestingConfigKeys {\n\tAutoRunDelay = 'testing.autoRun.delay',\n\tAutoOpenPeekView = 'testing.automaticallyOpenPeekView',\n\tAutoOpenPeekViewDuringContinuousRun = 'testing.automaticallyOpenPeekViewDuringAutoRun',\n\tOpenTesting = 'testing.openTesting',\n\tFollowRunningTest = 'testing.followRunningTest',\n\tDefaultGutterClickAction = 'testing.defaultGutterClickAction',\n\tGutterEnabled = 'testing.gutterEnabled',\n\tSaveBeforeTest = 'testing.saveBeforeTest',\n\tAlwaysRevealTestOnStateChange = 'testing.alwaysRevealTestOnStateChange',\n\tCountBadge = 'testing.countBadge',\n\tShowAllMessages = 'testing.showAllMessages',\n}\n\nexport const enum AutoOpenTesting {\n\tNeverOpen = 'neverOpen',\n\tOpenOnTestStart = 'openOnTestStart',\n\tOpenOnTestFailure = 'openOnTestFailure',\n\tOpenExplorerOnTestStart = 'openExplorerOnTestStart',\n}\n\nexport const enum AutoOpenPeekViewWhen {\n\tFailureVisible = 'failureInVisibleDocument',\n\tFailureAnywhere = 'failureAnywhere',\n\tNever = 'never',\n}\n\nexport const enum DefaultGutterClickAction {\n\tRun = 'run',\n\tDebug = 'debug',\n\tContextMenu = 'contextMenu',\n}\n\nexport const enum TestingCountBadge {\n\tFailed = 'failed',\n\tOff = 'off',\n\tPassed = 'passed',\n\tSkipped = 'skipped',\n}\n\nexport const testingConfiguration: IConfigurationNode = {\n\tid: 'testing',\n\torder: 21,\n\ttitle: localize('testConfigurationTitle', \"Testing\"),\n\ttype: 'object',\n\tproperties: {\n\t\t[TestingConfigKeys.AutoRunDelay]: {\n\t\t\ttype: 'integer',\n\t\t\tminimum: 0,\n\t\t\tdescription: localize('testing.autoRun.delay', \"How long to wait, in milliseconds, after a test is marked as outdated and starting a new run.\"),\n\t\t\tdefault: 1000,\n\t\t},\n\t\t[TestingConfigKeys.AutoOpenPeekView]: {\n\t\t\tdescription: localize('testing.automaticallyOpenPeekView', \"Configures when the error Peek view is automatically opened.\"),\n\t\t\tenum: [\n\t\t\t\tAutoOpenPeekViewWhen.FailureAnywhere,\n\t\t\t\tAutoOpenPeekViewWhen.FailureVisible,\n\t\t\t\tAutoOpenPeekViewWhen.Never,\n\t\t\t],\n\t\t\tdefault: AutoOpenPeekViewWhen.FailureVisible,\n\t\t\tenumDescriptions: [\n\t\t\t\tlocalize('testing.automaticallyOpenPeekView.failureAnywhere', \"Open automatically no matter where the failure is.\"),\n\t\t\t\tlocalize('testing.automaticallyOpenPeekView.failureInVisibleDocument', \"Open automatically when a test fails in a visible document.\"),\n\t\t\t\tlocalize('testing.automaticallyOpenPeekView.never', \"Never automatically open.\"),\n\t\t\t],\n\t\t},\n\t\t[TestingConfigKeys.ShowAllMessages]: {\n\t\t\tdescription: localize('testing.showAllMessages', \"Controls whether to show messages from all test runs.\"),\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t},\n\t\t[TestingConfigKeys.AutoOpenPeekViewDuringContinuousRun]: {\n\t\t\tdescription: localize('testing.automaticallyOpenPeekViewDuringContinuousRun', \"Controls whether to automatically open the Peek view during continuous run mode.\"),\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t},\n\t\t[TestingConfigKeys.CountBadge]: {\n\t\t\tdescription: localize('testing.countBadge', 'Controls the count badge on the Testing icon on the Activity Bar.'),\n\t\t\tenum: [\n\t\t\t\tTestingCountBadge.Failed,\n\t\t\t\tTestingCountBadge.Off,\n\t\t\t\tTestingCountBadge.Passed,\n\t\t\t\tTestingCountBadge.Skipped,\n\t\t\t],\n\t\t\tenumDescriptions: [\n\t\t\t\tlocalize('testing.countBadge.failed', 'Show the number of failed tests'),\n\t\t\t\tlocalize('testing.countBadge.off', 'Disable the testing count badge'),\n\t\t\t\tlocalize('testing.countBadge.passed', 'Show the number of passed tests'),\n\t\t\t\tlocalize('testing.countBadge.skipped', 'Show the number of skipped tests'),\n\t\t\t],\n\t\t\tdefault: TestingCountBadge.Failed,\n\t\t},\n\t\t[TestingConfigKeys.FollowRunningTest]: {\n\t\t\tdescription: localize('testing.followRunningTest', 'Controls whether the running test should be followed in the Test Explorer view.'),\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true,\n\t\t},\n\t\t[TestingConfigKeys.DefaultGutterClickAction]: {\n\t\t\tdescription: localize('testing.defaultGutterClickAction', 'Controls the action to take when left-clicking on a test decoration in the gutter.'),\n\t\t\tenum: [\n\t\t\t\tDefaultGutterClickAction.Run,\n\t\t\t\tDefaultGutterClickAction.Debug,\n\t\t\t\tDefaultGutterClickAction.ContextMenu,\n\t\t\t],\n\t\t\tenumDescriptions: [\n\t\t\t\tlocalize('testing.defaultGutterClickAction.run', 'Run the test.'),\n\t\t\t\tlocalize('testing.defaultGutterClickAction.debug', 'Debug the test.'),\n\t\t\t\tlocalize('testing.defaultGutterClickAction.contextMenu', 'Open the context menu for more options.'),\n\t\t\t],\n\t\t\tdefault: DefaultGutterClickAction.Run,\n\t\t},\n\t\t[TestingConfigKeys.GutterEnabled]: {\n\t\t\tdescription: localize('testing.gutterEnabled', 'Controls whether test decorations are shown in the editor gutter.'),\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true,\n\t\t},\n\t\t[TestingConfigKeys.SaveBeforeTest]: {\n\t\t\tdescription: localize('testing.saveBeforeTest', 'Control whether save all dirty editors before running a test.'),\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true,\n\t\t},\n\t\t[TestingConfigKeys.OpenTesting]: {\n\t\t\tenum: [\n\t\t\t\tAutoOpenTesting.NeverOpen,\n\t\t\t\tAutoOpenTesting.OpenOnTestStart,\n\t\t\t\tAutoOpenTesting.OpenOnTestFailure,\n\t\t\t\tAutoOpenTesting.OpenExplorerOnTestStart,\n\t\t\t],\n\t\t\tenumDescriptions: [\n\t\t\t\tlocalize('testing.openTesting.neverOpen', 'Never automatically open the testing views'),\n\t\t\t\tlocalize('testing.openTesting.openOnTestStart', 'Open the test results view when tests start'),\n\t\t\t\tlocalize('testing.openTesting.openOnTestFailure', 'Open the test result view on any test failure'),\n\t\t\t\tlocalize('testing.openTesting.openExplorerOnTestStart', 'Open the test explorer when tests start'),\n\t\t\t],\n\t\t\tdefault: 'openOnTestStart',\n\t\t\tdescription: localize('testing.openTesting', \"Controls when the testing view should open.\")\n\t\t},\n\t\t[TestingConfigKeys.AlwaysRevealTestOnStateChange]: {\n\t\t\tmarkdownDescription: localize('testing.alwaysRevealTestOnStateChange', \"Always reveal the executed test when `#testing.followRunningTest#` is on. If this setting is turned off, only failed tests will be revealed.\"),\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t},\n\t}\n};\n\nexport interface ITestingConfiguration {\n\t[TestingConfigKeys.AutoRunDelay]: number;\n\t[TestingConfigKeys.AutoOpenPeekView]: AutoOpenPeekViewWhen;\n\t[TestingConfigKeys.AutoOpenPeekViewDuringContinuousRun]: boolean;\n\t[TestingConfigKeys.CountBadge]: TestingCountBadge;\n\t[TestingConfigKeys.FollowRunningTest]: boolean;\n\t[TestingConfigKeys.DefaultGutterClickAction]: DefaultGutterClickAction;\n\t[TestingConfigKeys.GutterEnabled]: boolean;\n\t[TestingConfigKeys.SaveBeforeTest]: boolean;\n\t[TestingConfigKeys.OpenTesting]: AutoOpenTesting;\n\t[TestingConfigKeys.AlwaysRevealTestOnStateChange]: boolean;\n\t[TestingConfigKeys.ShowAllMessages]: boolean;\n}\n\nexport const getTestingConfiguration = <K extends TestingConfigKeys>(config: IConfigurationService, key: K) => config.getValue<ITestingConfiguration[K]>(key);\n"]}