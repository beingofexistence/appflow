{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/testing/common/testItemCollection.ts"],"names":[],"mappings":"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","file":"testItemCollection.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Barrier, isThenable, RunOnceScheduler } from 'vs/base/common/async';\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { assertNever } from 'vs/base/common/assert';\nimport { applyTestItemUpdate, ITestItem, ITestTag, namespaceTestTag, TestDiffOpType, TestItemExpandState, TestsDiff, TestsDiffOp } from 'vs/workbench/contrib/testing/common/testTypes';\nimport { TestId } from 'vs/workbench/contrib/testing/common/testId';\nimport { URI } from 'vs/base/common/uri';\n\n/**\n * @private\n */\ninterface CollectionItem<T> {\n\treadonly fullId: TestId;\n\tactual: T;\n\texpand: TestItemExpandState;\n\t/**\n\t * Number of levels of items below this one that are expanded. May be infinite.\n\t */\n\texpandLevels?: number;\n\tresolveBarrier?: Barrier;\n}\n\nexport const enum TestItemEventOp {\n\tUpsert,\n\tSetTags,\n\tUpdateCanResolveChildren,\n\tRemoveChild,\n\tSetProp,\n\tBulk,\n\tDocumentSynced,\n}\n\nexport interface ITestItemUpsertChild {\n\top: TestItemEventOp.Upsert;\n\titem: ITestItemLike;\n}\n\nexport interface ITestItemUpdateCanResolveChildren {\n\top: TestItemEventOp.UpdateCanResolveChildren;\n\tstate: boolean;\n}\n\nexport interface ITestItemSetTags {\n\top: TestItemEventOp.SetTags;\n\tnew: ITestTag[];\n\told: ITestTag[];\n}\n\nexport interface ITestItemRemoveChild {\n\top: TestItemEventOp.RemoveChild;\n\tid: string;\n}\n\nexport interface ITestItemSetProp {\n\top: TestItemEventOp.SetProp;\n\tupdate: Partial<ITestItem>;\n}\nexport interface ITestItemBulkReplace {\n\top: TestItemEventOp.Bulk;\n\tops: (ITestItemUpsertChild | ITestItemRemoveChild)[];\n}\n\nexport interface ITestItemDocumentSynced {\n\top: TestItemEventOp.DocumentSynced;\n}\n\nexport type ExtHostTestItemEvent =\n\t| ITestItemSetTags\n\t| ITestItemUpsertChild\n\t| ITestItemRemoveChild\n\t| ITestItemUpdateCanResolveChildren\n\t| ITestItemSetProp\n\t| ITestItemBulkReplace\n\t| ITestItemDocumentSynced;\n\nexport interface ITestItemApi<T> {\n\tcontrollerId: string;\n\tparent?: T;\n\tlistener?: (evt: ExtHostTestItemEvent) => void;\n}\n\nexport interface ITestItemCollectionOptions<T> {\n\t/** Controller ID to use to prefix these test items. */\n\tcontrollerId: string;\n\n\t/** Gets the document version at the given URI, if it's open */\n\tgetDocumentVersion(uri: URI | undefined): number | undefined;\n\n\t/** Gets API for the given test item, used to listen for events and set parents. */\n\tgetApiFor(item: T): ITestItemApi<T>;\n\n\t/** Converts the full test item to the common interface. */\n\ttoITestItem(item: T): ITestItem;\n\n\t/** Gets children for the item. */\n\tgetChildren(item: T): ITestChildrenLike<T>;\n\n\t/** Root to use for the new test collection. */\n\troot: T;\n}\n\nconst strictEqualComparator = <T>(a: T, b: T) => a === b;\nconst diffableProps: { [K in keyof ITestItem]?: (a: ITestItem[K], b: ITestItem[K]) => boolean } = {\n\trange: (a, b) => {\n\t\tif (a === b) { return true; }\n\t\tif (!a || !b) { return false; }\n\t\treturn a.equalsRange(b);\n\t},\n\tbusy: strictEqualComparator,\n\tlabel: strictEqualComparator,\n\tdescription: strictEqualComparator,\n\terror: strictEqualComparator,\n\tsortText: strictEqualComparator,\n\ttags: (a, b) => {\n\t\tif (a.length !== b.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (a.some(t1 => !b.includes(t1))) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t},\n};\n\nconst diffableEntries = Object.entries(diffableProps) as readonly [keyof ITestItem, (a: any, b: any) => boolean][];\n\nconst diffTestItems = (a: ITestItem, b: ITestItem) => {\n\tlet output: Record<string, unknown> | undefined;\n\tfor (const [key, cmp] of diffableEntries) {\n\t\tif (!cmp(a[key], b[key])) {\n\t\t\tif (output) {\n\t\t\t\toutput[key] = b[key];\n\t\t\t} else {\n\t\t\t\toutput = { [key]: b[key] };\n\t\t\t}\n\t\t}\n\t}\n\n\treturn output as Partial<ITestItem> | undefined;\n};\n\nexport interface ITestChildrenLike<T> extends Iterable<[string, T]> {\n\tget(id: string): T | undefined;\n\tdelete(id: string): void;\n}\n\nexport interface ITestItemLike {\n\tid: string;\n\ttags: readonly ITestTag[];\n\turi?: URI;\n\tcanResolveChildren: boolean;\n}\n\n/**\n * Maintains a collection of test items for a single controller.\n */\nexport class TestItemCollection<T extends ITestItemLike> extends Disposable {\n\tprivate readonly debounceSendDiff = this._register(new RunOnceScheduler(() => this.flushDiff(), 200));\n\tprivate readonly diffOpEmitter = this._register(new Emitter<TestsDiff>());\n\tprivate _resolveHandler?: (item: T | undefined) => Promise<void> | void;\n\n\tpublic get root() {\n\t\treturn this.options.root;\n\t}\n\n\tpublic readonly tree = new Map</* full test id */string, CollectionItem<T>>();\n\tprivate readonly tags = new Map<string, { label?: string; refCount: number }>();\n\n\tprotected diff: TestsDiff = [];\n\n\tconstructor(private readonly options: ITestItemCollectionOptions<T>) {\n\t\tsuper();\n\t\tthis.root.canResolveChildren = true;\n\t\tthis.upsertItem(this.root, undefined);\n\t}\n\n\t/**\n\t * Handler used for expanding test items.\n\t */\n\tpublic set resolveHandler(handler: undefined | ((item: T | undefined) => void)) {\n\t\tthis._resolveHandler = handler;\n\t\tfor (const test of this.tree.values()) {\n\t\t\tthis.updateExpandability(test);\n\t\t}\n\t}\n\n\tpublic get resolveHandler() {\n\t\treturn this._resolveHandler;\n\t}\n\n\t/**\n\t * Fires when an operation happens that should result in a diff.\n\t */\n\tpublic readonly onDidGenerateDiff = this.diffOpEmitter.event;\n\n\t/**\n\t * Gets a diff of all changes that have been made, and clears the diff queue.\n\t */\n\tpublic collectDiff() {\n\t\tconst diff = this.diff;\n\t\tthis.diff = [];\n\t\treturn diff;\n\t}\n\n\t/**\n\t * Pushes a new diff entry onto the collected diff list.\n\t */\n\tpublic pushDiff(diff: TestsDiffOp) {\n\t\tswitch (diff.op) {\n\t\t\tcase TestDiffOpType.DocumentSynced: {\n\t\t\t\tfor (const existing of this.diff) {\n\t\t\t\t\tif (existing.op === TestDiffOpType.DocumentSynced && existing.uri === diff.uri) {\n\t\t\t\t\t\texisting.docv = diff.docv;\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase TestDiffOpType.Update: {\n\t\t\t\t// Try to merge updates, since they're invoked per-property\n\t\t\t\tconst last = this.diff[this.diff.length - 1];\n\t\t\t\tif (last) {\n\t\t\t\t\tif (last.op === TestDiffOpType.Update && last.item.extId === diff.item.extId) {\n\t\t\t\t\t\tapplyTestItemUpdate(last.item, diff.item);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (last.op === TestDiffOpType.Add && last.item.item.extId === diff.item.extId) {\n\t\t\t\t\t\tapplyTestItemUpdate(last.item, diff.item);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tthis.diff.push(diff);\n\n\t\tif (!this.debounceSendDiff.isScheduled()) {\n\t\t\tthis.debounceSendDiff.schedule();\n\t\t}\n\t}\n\n\t/**\n\t * Expands the test and the given number of `levels` of children. If levels\n\t * is < 0, then all children will be expanded. If it's 0, then only this\n\t * item will be expanded.\n\t */\n\tpublic expand(testId: string, levels: number): Promise<void> | void {\n\t\tconst internal = this.tree.get(testId);\n\t\tif (!internal) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (internal.expandLevels === undefined || levels > internal.expandLevels) {\n\t\t\tinternal.expandLevels = levels;\n\t\t}\n\n\t\t// try to avoid awaiting things if the provider returns synchronously in\n\t\t// order to keep everything in a single diff and DOM update.\n\t\tif (internal.expand === TestItemExpandState.Expandable) {\n\t\t\tconst r = this.resolveChildren(internal);\n\t\t\treturn !r.isOpen()\n\t\t\t\t? r.wait().then(() => this.expandChildren(internal, levels - 1))\n\t\t\t\t: this.expandChildren(internal, levels - 1);\n\t\t} else if (internal.expand === TestItemExpandState.Expanded) {\n\t\t\treturn internal.resolveBarrier?.isOpen() === false\n\t\t\t\t? internal.resolveBarrier.wait().then(() => this.expandChildren(internal, levels - 1))\n\t\t\t\t: this.expandChildren(internal, levels - 1);\n\t\t}\n\t}\n\n\tpublic override dispose() {\n\t\tfor (const item of this.tree.values()) {\n\t\t\tthis.options.getApiFor(item.actual).listener = undefined;\n\t\t}\n\n\t\tthis.tree.clear();\n\t\tthis.diff = [];\n\t\tsuper.dispose();\n\t}\n\n\tprivate onTestItemEvent(internal: CollectionItem<T>, evt: ExtHostTestItemEvent) {\n\t\tswitch (evt.op) {\n\t\t\tcase TestItemEventOp.RemoveChild:\n\t\t\t\tthis.removeItem(TestId.joinToString(internal.fullId, evt.id));\n\t\t\t\tbreak;\n\n\t\t\tcase TestItemEventOp.Upsert:\n\t\t\t\tthis.upsertItem(evt.item as T, internal);\n\t\t\t\tbreak;\n\n\t\t\tcase TestItemEventOp.Bulk:\n\t\t\t\tfor (const op of evt.ops) {\n\t\t\t\t\tthis.onTestItemEvent(internal, op);\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase TestItemEventOp.SetTags:\n\t\t\t\tthis.diffTagRefs(evt.new, evt.old, internal.fullId.toString());\n\t\t\t\tbreak;\n\n\t\t\tcase TestItemEventOp.UpdateCanResolveChildren:\n\t\t\t\tthis.updateExpandability(internal);\n\t\t\t\tbreak;\n\n\t\t\tcase TestItemEventOp.SetProp:\n\t\t\t\tthis.pushDiff({\n\t\t\t\t\top: TestDiffOpType.Update,\n\t\t\t\t\titem: {\n\t\t\t\t\t\textId: internal.fullId.toString(),\n\t\t\t\t\t\titem: evt.update,\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tbreak;\n\n\t\t\tcase TestItemEventOp.DocumentSynced:\n\t\t\t\tthis.documentSynced(internal.actual.uri);\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tassertNever(evt);\n\t\t}\n\t}\n\n\tprivate documentSynced(uri: URI | undefined) {\n\t\tif (uri) {\n\t\t\tthis.pushDiff({\n\t\t\t\top: TestDiffOpType.DocumentSynced,\n\t\t\t\turi,\n\t\t\t\tdocv: this.options.getDocumentVersion(uri)\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate upsertItem(actual: T, parent: CollectionItem<T> | undefined): void {\n\t\tconst fullId = TestId.fromExtHostTestItem(actual, this.root.id, parent?.actual);\n\n\t\t// If this test item exists elsewhere in the tree already (exists at an\n\t\t// old ID with an existing parent), remove that old item.\n\t\tconst privateApi = this.options.getApiFor(actual);\n\t\tif (privateApi.parent && privateApi.parent !== parent?.actual) {\n\t\t\tthis.options.getChildren(privateApi.parent).delete(actual.id);\n\t\t}\n\n\t\tlet internal = this.tree.get(fullId.toString());\n\t\t// Case 1: a brand new item\n\t\tif (!internal) {\n\t\t\tinternal = {\n\t\t\t\tfullId,\n\t\t\t\tactual,\n\t\t\t\texpandLevels: parent?.expandLevels /* intentionally undefined or 0 */ ? parent.expandLevels - 1 : undefined,\n\t\t\t\texpand: TestItemExpandState.NotExpandable, // updated by `connectItemAndChildren`\n\t\t\t};\n\n\t\t\tactual.tags.forEach(this.incrementTagRefs, this);\n\t\t\tthis.tree.set(internal.fullId.toString(), internal);\n\t\t\tthis.setItemParent(actual, parent);\n\t\t\tthis.pushDiff({\n\t\t\t\top: TestDiffOpType.Add,\n\t\t\t\titem: {\n\t\t\t\t\tcontrollerId: this.options.controllerId,\n\t\t\t\t\texpand: internal.expand,\n\t\t\t\t\titem: this.options.toITestItem(actual),\n\t\t\t\t},\n\t\t\t});\n\n\t\t\tthis.connectItemAndChildren(actual, internal, parent);\n\t\t\treturn;\n\t\t}\n\n\t\t// Case 2: re-insertion of an existing item, no-op\n\t\tif (internal.actual === actual) {\n\t\t\tthis.connectItem(actual, internal, parent); // re-connect in case the parent changed\n\t\t\treturn; // no-op\n\t\t}\n\n\t\t// Case 3: upsert of an existing item by ID, with a new instance\n\t\tif (internal.actual.uri?.toString() !== actual.uri?.toString()) {\n\t\t\t// If the item has a new URI, re-insert it; we don't support updating\n\t\t\t// URIs on existing test items.\n\t\t\tthis.removeItem(fullId.toString());\n\t\t\treturn this.upsertItem(actual, parent);\n\t\t}\n\t\tconst oldChildren = this.options.getChildren(internal.actual);\n\t\tconst oldActual = internal.actual;\n\t\tconst update = diffTestItems(this.options.toITestItem(oldActual), this.options.toITestItem(actual));\n\t\tthis.options.getApiFor(oldActual).listener = undefined;\n\n\t\tinternal.actual = actual;\n\t\tinternal.expand = TestItemExpandState.NotExpandable; // updated by `connectItemAndChildren`\n\n\t\tif (update) {\n\t\t\t// tags are handled in a special way\n\t\t\tif (update.hasOwnProperty('tags')) {\n\t\t\t\tthis.diffTagRefs(actual.tags, oldActual.tags, fullId.toString());\n\t\t\t\tdelete update.tags;\n\t\t\t}\n\t\t\tthis.onTestItemEvent(internal, { op: TestItemEventOp.SetProp, update });\n\t\t}\n\n\t\tthis.connectItemAndChildren(actual, internal, parent);\n\n\t\t// Remove any orphaned children.\n\t\tfor (const [_, child] of oldChildren) {\n\t\t\tif (!this.options.getChildren(actual).get(child.id)) {\n\t\t\t\tthis.removeItem(TestId.joinToString(fullId, child.id));\n\t\t\t}\n\t\t}\n\n\t\t// Mark ranges in the document as synced (#161320)\n\t\tthis.documentSynced(internal.actual.uri);\n\t}\n\n\tprivate diffTagRefs(newTags: readonly ITestTag[], oldTags: readonly ITestTag[], extId: string) {\n\t\tconst toDelete = new Set(oldTags.map(t => t.id));\n\t\tfor (const tag of newTags) {\n\t\t\tif (!toDelete.delete(tag.id)) {\n\t\t\t\tthis.incrementTagRefs(tag);\n\t\t\t}\n\t\t}\n\n\t\tthis.pushDiff({\n\t\t\top: TestDiffOpType.Update,\n\t\t\titem: { extId, item: { tags: newTags.map(v => namespaceTestTag(this.options.controllerId, v.id)) } }\n\t\t});\n\n\t\ttoDelete.forEach(this.decrementTagRefs, this);\n\t}\n\n\tprivate incrementTagRefs(tag: ITestTag) {\n\t\tconst existing = this.tags.get(tag.id);\n\t\tif (existing) {\n\t\t\texisting.refCount++;\n\t\t} else {\n\t\t\tthis.tags.set(tag.id, { refCount: 1 });\n\t\t\tthis.pushDiff({\n\t\t\t\top: TestDiffOpType.AddTag, tag: {\n\t\t\t\t\tid: namespaceTestTag(this.options.controllerId, tag.id),\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate decrementTagRefs(tagId: string) {\n\t\tconst existing = this.tags.get(tagId);\n\t\tif (existing && !--existing.refCount) {\n\t\t\tthis.tags.delete(tagId);\n\t\t\tthis.pushDiff({ op: TestDiffOpType.RemoveTag, id: namespaceTestTag(this.options.controllerId, tagId) });\n\t\t}\n\t}\n\n\tprivate setItemParent(actual: T, parent: CollectionItem<T> | undefined) {\n\t\tthis.options.getApiFor(actual).parent = parent && parent.actual !== this.root ? parent.actual : undefined;\n\t}\n\n\tprivate connectItem(actual: T, internal: CollectionItem<T>, parent: CollectionItem<T> | undefined) {\n\t\tthis.setItemParent(actual, parent);\n\t\tconst api = this.options.getApiFor(actual);\n\t\tapi.parent = parent?.actual;\n\t\tapi.listener = evt => this.onTestItemEvent(internal, evt);\n\t\tthis.updateExpandability(internal);\n\t}\n\n\tprivate connectItemAndChildren(actual: T, internal: CollectionItem<T>, parent: CollectionItem<T> | undefined) {\n\t\tthis.connectItem(actual, internal, parent);\n\n\t\t// Discover any existing children that might have already been added\n\t\tfor (const [_, child] of this.options.getChildren(actual)) {\n\t\t\tthis.upsertItem(child, internal);\n\t\t}\n\t}\n\n\t/**\n\t * Updates the `expand` state of the item. Should be called whenever the\n\t * resolved state of the item changes. Can automatically expand the item\n\t * if requested by a consumer.\n\t */\n\tprivate updateExpandability(internal: CollectionItem<T>) {\n\t\tlet newState: TestItemExpandState;\n\t\tif (!this._resolveHandler) {\n\t\t\tnewState = TestItemExpandState.NotExpandable;\n\t\t} else if (internal.resolveBarrier) {\n\t\t\tnewState = internal.resolveBarrier.isOpen()\n\t\t\t\t? TestItemExpandState.Expanded\n\t\t\t\t: TestItemExpandState.BusyExpanding;\n\t\t} else {\n\t\t\tnewState = internal.actual.canResolveChildren\n\t\t\t\t? TestItemExpandState.Expandable\n\t\t\t\t: TestItemExpandState.NotExpandable;\n\t\t}\n\n\t\tif (newState === internal.expand) {\n\t\t\treturn;\n\t\t}\n\n\t\tinternal.expand = newState;\n\t\tthis.pushDiff({ op: TestDiffOpType.Update, item: { extId: internal.fullId.toString(), expand: newState } });\n\n\t\tif (newState === TestItemExpandState.Expandable && internal.expandLevels !== undefined) {\n\t\t\tthis.resolveChildren(internal);\n\t\t}\n\t}\n\n\t/**\n\t * Expands all children of the item, \"levels\" deep. If levels is 0, only\n\t * the children will be expanded. If it's 1, the children and their children\n\t * will be expanded. If it's <0, it's a no-op.\n\t */\n\tprivate expandChildren(internal: CollectionItem<T>, levels: number): Promise<void> | void {\n\t\tif (levels < 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst expandRequests: Promise<void>[] = [];\n\t\tfor (const [_, child] of this.options.getChildren(internal.actual)) {\n\t\t\tconst promise = this.expand(TestId.joinToString(internal.fullId, child.id), levels);\n\t\t\tif (isThenable(promise)) {\n\t\t\t\texpandRequests.push(promise);\n\t\t\t}\n\t\t}\n\n\t\tif (expandRequests.length) {\n\t\t\treturn Promise.all(expandRequests).then(() => { });\n\t\t}\n\t}\n\n\t/**\n\t * Calls `discoverChildren` on the item, refreshing all its tests.\n\t */\n\tprivate resolveChildren(internal: CollectionItem<T>) {\n\t\tif (internal.resolveBarrier) {\n\t\t\treturn internal.resolveBarrier;\n\t\t}\n\n\t\tif (!this._resolveHandler) {\n\t\t\tconst b = new Barrier();\n\t\t\tb.open();\n\t\t\treturn b;\n\t\t}\n\n\t\tinternal.expand = TestItemExpandState.BusyExpanding;\n\t\tthis.pushExpandStateUpdate(internal);\n\n\t\tconst barrier = internal.resolveBarrier = new Barrier();\n\t\tconst applyError = (err: Error) => {\n\t\t\tconsole.error(`Unhandled error in resolveHandler of test controller \"${this.options.controllerId}\"`, err);\n\t\t};\n\n\t\tlet r: Thenable<void> | undefined | void;\n\t\ttry {\n\t\t\tr = this._resolveHandler(internal.actual === this.root ? undefined : internal.actual);\n\t\t} catch (err) {\n\t\t\tapplyError(err);\n\t\t}\n\n\t\tif (isThenable(r)) {\n\t\t\tr.catch(applyError).then(() => {\n\t\t\t\tbarrier.open();\n\t\t\t\tthis.updateExpandability(internal);\n\t\t\t});\n\t\t} else {\n\t\t\tbarrier.open();\n\t\t\tthis.updateExpandability(internal);\n\t\t}\n\n\t\treturn internal.resolveBarrier;\n\t}\n\n\tprivate pushExpandStateUpdate(internal: CollectionItem<T>) {\n\t\tthis.pushDiff({ op: TestDiffOpType.Update, item: { extId: internal.fullId.toString(), expand: internal.expand } });\n\t}\n\n\tprivate removeItem(childId: string) {\n\t\tconst childItem = this.tree.get(childId);\n\t\tif (!childItem) {\n\t\t\tthrow new Error('attempting to remove non-existent child');\n\t\t}\n\n\t\tthis.pushDiff({ op: TestDiffOpType.Remove, itemId: childId });\n\n\t\tconst queue: (CollectionItem<T> | undefined)[] = [childItem];\n\t\twhile (queue.length) {\n\t\t\tconst item = queue.pop();\n\t\t\tif (!item) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis.options.getApiFor(item.actual).listener = undefined;\n\n\t\t\tfor (const tag of item.actual.tags) {\n\t\t\t\tthis.decrementTagRefs(tag.id);\n\t\t\t}\n\n\t\t\tthis.tree.delete(item.fullId.toString());\n\t\t\tfor (const [_, child] of this.options.getChildren(item.actual)) {\n\t\t\t\tqueue.push(this.tree.get(TestId.joinToString(item.fullId, child.id)));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Immediately emits any pending diffs on the collection.\n\t */\n\tpublic flushDiff() {\n\t\tconst diff = this.collectDiff();\n\t\tif (diff.length) {\n\t\t\tthis.diffOpEmitter.fire(diff);\n\t\t}\n\t}\n}\n\n/** Implementation of vscode.TestItemCollection */\nexport interface ITestItemChildren<T extends ITestItemLike> extends Iterable<[string, T]> {\n\treadonly size: number;\n\treplace(items: readonly T[]): void;\n\tforEach(callback: (item: T, collection: this) => unknown, thisArg?: unknown): void;\n\tadd(item: T): void;\n\tdelete(itemId: string): void;\n\tget(itemId: string): T | undefined;\n\n\ttoJSON(): readonly T[];\n}\n\nexport class DuplicateTestItemError extends Error {\n\tconstructor(id: string) {\n\t\tsuper(`Attempted to insert a duplicate test item ID ${id}`);\n\t}\n}\n\nexport class InvalidTestItemError extends Error {\n\tconstructor(id: string) {\n\t\tsuper(`TestItem with ID \"${id}\" is invalid. Make sure to create it from the createTestItem method.`);\n\t}\n}\n\nexport class MixedTestItemController extends Error {\n\tconstructor(id: string, ctrlA: string, ctrlB: string) {\n\t\tsuper(`TestItem with ID \"${id}\" is from controller \"${ctrlA}\" and cannot be added as a child of an item from controller \"${ctrlB}\".`);\n\t}\n}\n\nexport const createTestItemChildren = <T extends ITestItemLike>(api: ITestItemApi<T>, getApi: (item: T) => ITestItemApi<T>, checkCtor: Function): ITestItemChildren<T> => {\n\tlet mapped = new Map<string, T>();\n\n\treturn {\n\t\t/** @inheritdoc */\n\t\tget size() {\n\t\t\treturn mapped.size;\n\t\t},\n\n\t\t/** @inheritdoc */\n\t\tforEach(callback: (item: T, collection: ITestItemChildren<T>) => unknown, thisArg?: unknown) {\n\t\t\tfor (const item of mapped.values()) {\n\t\t\t\tcallback.call(thisArg, item, this);\n\t\t\t}\n\t\t},\n\n\t\t/** @inheritdoc */\n\t\t[Symbol.iterator](): IterableIterator<[string, T]> {\n\t\t\treturn mapped.entries();\n\t\t},\n\n\t\t/** @inheritdoc */\n\t\treplace(items: Iterable<T>) {\n\t\t\tconst newMapped = new Map<string, T>();\n\t\t\tconst toDelete = new Set(mapped.keys());\n\t\t\tconst bulk: ITestItemBulkReplace = { op: TestItemEventOp.Bulk, ops: [] };\n\n\t\t\tfor (const item of items) {\n\t\t\t\tif (!(item instanceof checkCtor)) {\n\t\t\t\t\tthrow new InvalidTestItemError((item as ITestItemLike).id);\n\t\t\t\t}\n\n\t\t\t\tconst itemController = getApi(item).controllerId;\n\t\t\t\tif (itemController !== api.controllerId) {\n\t\t\t\t\tthrow new MixedTestItemController(item.id, itemController, api.controllerId);\n\t\t\t\t}\n\n\t\t\t\tif (newMapped.has(item.id)) {\n\t\t\t\t\tthrow new DuplicateTestItemError(item.id);\n\t\t\t\t}\n\n\t\t\t\tnewMapped.set(item.id, item);\n\t\t\t\ttoDelete.delete(item.id);\n\t\t\t\tbulk.ops.push({ op: TestItemEventOp.Upsert, item });\n\t\t\t}\n\n\t\t\tfor (const id of toDelete.keys()) {\n\t\t\t\tbulk.ops.push({ op: TestItemEventOp.RemoveChild, id });\n\t\t\t}\n\n\t\t\tapi.listener?.(bulk);\n\n\t\t\t// important mutations come after firing, so if an error happens no\n\t\t\t// changes will be \"saved\":\n\t\t\tmapped = newMapped;\n\t\t},\n\n\n\t\t/** @inheritdoc */\n\t\tadd(item: T) {\n\t\t\tif (!(item instanceof checkCtor)) {\n\t\t\t\tthrow new InvalidTestItemError((item as ITestItemLike).id);\n\t\t\t}\n\n\t\t\tmapped.set(item.id, item);\n\t\t\tapi.listener?.({ op: TestItemEventOp.Upsert, item });\n\t\t},\n\n\t\t/** @inheritdoc */\n\t\tdelete(id: string) {\n\t\t\tif (mapped.delete(id)) {\n\t\t\t\tapi.listener?.({ op: TestItemEventOp.RemoveChild, id });\n\t\t\t}\n\t\t},\n\n\t\t/** @inheritdoc */\n\t\tget(itemId: string) {\n\t\t\treturn mapped.get(itemId);\n\t\t},\n\n\t\t/** JSON serialization function. */\n\t\ttoJSON() {\n\t\t\treturn Array.from(mapped.values());\n\t\t},\n\t};\n};\n"]}