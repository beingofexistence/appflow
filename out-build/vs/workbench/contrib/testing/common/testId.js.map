{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/testing/common/testId.ts"],"names":[],"mappings":"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","file":"testId.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport const enum TestIdPathParts {\n\t/** Delimiter for path parts in test IDs */\n\tDelimiter = '\\0',\n}\n\n/**\n * Enum for describing relative positions of tests. Similar to\n * `node.compareDocumentPosition` in the DOM.\n */\nexport const enum TestPosition {\n\t/** a === b */\n\tIsSame,\n\t/** Neither a nor b are a child of one another. They may share a common parent, though. */\n\tDisconnected,\n\t/** b is a child of a */\n\tIsChild,\n\t/** b is a parent of a */\n\tIsParent,\n}\n\ntype TestItemLike = { id: string; parent?: TestItemLike; _isRoot?: boolean };\n\n/**\n * The test ID is a stringifiable client that\n */\nexport class TestId {\n\tprivate stringifed?: string;\n\n\t/**\n\t * Creates a test ID from an ext host test item.\n\t */\n\tpublic static fromExtHostTestItem(item: TestItemLike, rootId: string, parent = item.parent) {\n\t\tif (item._isRoot) {\n\t\t\treturn new TestId([rootId]);\n\t\t}\n\n\t\tconst path = [item.id];\n\t\tfor (let i = parent; i && i.id !== rootId; i = i.parent) {\n\t\t\tpath.push(i.id);\n\t\t}\n\t\tpath.push(rootId);\n\n\t\treturn new TestId(path.reverse());\n\t}\n\n\t/**\n\t * Cheaply ets whether the ID refers to the root .\n\t */\n\tpublic static isRoot(idString: string) {\n\t\treturn !idString.includes(TestIdPathParts.Delimiter);\n\t}\n\n\t/**\n\t * Cheaply gets whether the ID refers to the root .\n\t */\n\tpublic static root(idString: string) {\n\t\tconst idx = idString.indexOf(TestIdPathParts.Delimiter);\n\t\treturn idx === -1 ? idString : idString.slice(0, idx);\n\t}\n\n\t/**\n\t * Creates a test ID from a serialized TestId instance.\n\t */\n\tpublic static fromString(idString: string) {\n\t\treturn new TestId(idString.split(TestIdPathParts.Delimiter));\n\t}\n\n\t/**\n\t * Gets the ID resulting from adding b to the base ID.\n\t */\n\tpublic static join(base: TestId, b: string) {\n\t\treturn new TestId([...base.path, b]);\n\t}\n\n\t/**\n\t * Gets the string ID resulting from adding b to the base ID.\n\t */\n\tpublic static joinToString(base: string | TestId, b: string) {\n\t\treturn base.toString() + TestIdPathParts.Delimiter + b;\n\t}\n\n\t/**\n\t * Cheaply gets the parent ID of a test identified with the string.\n\t */\n\tpublic static parentId(idString: string) {\n\t\tconst idx = idString.lastIndexOf(TestIdPathParts.Delimiter);\n\t\treturn idx === -1 ? undefined : idString.slice(0, idx);\n\t}\n\n\t/**\n\t * Cheaply gets the local ID of a test identified with the string.\n\t */\n\tpublic static localId(idString: string) {\n\t\tconst idx = idString.lastIndexOf(TestIdPathParts.Delimiter);\n\t\treturn idx === -1 ? idString : idString.slice(idx + TestIdPathParts.Delimiter.length);\n\t}\n\n\t/**\n\t * Gets whether maybeChild is a child of maybeParent.\n\t * todo@connor4312: review usages of this to see if using the WellDefinedPrefixTree is better\n\t */\n\tpublic static isChild(maybeParent: string, maybeChild: string) {\n\t\treturn maybeChild.startsWith(maybeParent) && maybeChild[maybeParent.length] === TestIdPathParts.Delimiter;\n\t}\n\n\t/**\n\t * Compares the position of the two ID strings.\n\t * todo@connor4312: review usages of this to see if using the WellDefinedPrefixTree is better\n\t */\n\tpublic static compare(a: string, b: string) {\n\t\tif (a === b) {\n\t\t\treturn TestPosition.IsSame;\n\t\t}\n\n\t\tif (TestId.isChild(a, b)) {\n\t\t\treturn TestPosition.IsChild;\n\t\t}\n\n\t\tif (TestId.isChild(b, a)) {\n\t\t\treturn TestPosition.IsParent;\n\t\t}\n\n\t\treturn TestPosition.Disconnected;\n\t}\n\n\tconstructor(\n\t\tpublic readonly path: readonly string[],\n\t\tprivate readonly viewEnd = path.length,\n\t) {\n\t\tif (path.length === 0 || viewEnd < 1) {\n\t\t\tthrow new Error('cannot create test with empty path');\n\t\t}\n\t}\n\n\t/**\n\t * Gets the ID of the parent test.\n\t */\n\tpublic get rootId(): TestId {\n\t\treturn new TestId(this.path, 1);\n\t}\n\n\t/**\n\t * Gets the ID of the parent test.\n\t */\n\tpublic get parentId(): TestId | undefined {\n\t\treturn this.viewEnd > 1 ? new TestId(this.path, this.viewEnd - 1) : undefined;\n\t}\n\n\t/**\n\t * Gets the local ID of the current full test ID.\n\t */\n\tpublic get localId() {\n\t\treturn this.path[this.viewEnd - 1];\n\t}\n\n\t/**\n\t * Gets whether this ID refers to the root.\n\t */\n\tpublic get controllerId() {\n\t\treturn this.path[0];\n\t}\n\n\t/**\n\t * Gets whether this ID refers to the root.\n\t */\n\tpublic get isRoot() {\n\t\treturn this.viewEnd === 1;\n\t}\n\n\t/**\n\t * Returns an iterable that yields IDs of all parent items down to and\n\t * including the current item.\n\t */\n\tpublic *idsFromRoot() {\n\t\tfor (let i = 1; i <= this.viewEnd; i++) {\n\t\t\tyield new TestId(this.path, i);\n\t\t}\n\t}\n\n\t/**\n\t * Returns an iterable that yields IDs of the current item up to the root\n\t * item.\n\t */\n\tpublic *idsToRoot() {\n\t\tfor (let i = this.viewEnd; i > 0; i--) {\n\t\t\tyield new TestId(this.path, i);\n\t\t}\n\t}\n\n\t/**\n\t * Compares the other test ID with this one.\n\t */\n\tpublic compare(other: TestId | string) {\n\t\tif (typeof other === 'string') {\n\t\t\treturn TestId.compare(this.toString(), other);\n\t\t}\n\n\t\tfor (let i = 0; i < other.viewEnd && i < this.viewEnd; i++) {\n\t\t\tif (other.path[i] !== this.path[i]) {\n\t\t\t\treturn TestPosition.Disconnected;\n\t\t\t}\n\t\t}\n\n\t\tif (other.viewEnd > this.viewEnd) {\n\t\t\treturn TestPosition.IsChild;\n\t\t}\n\n\t\tif (other.viewEnd < this.viewEnd) {\n\t\t\treturn TestPosition.IsParent;\n\t\t}\n\n\t\treturn TestPosition.IsSame;\n\t}\n\n\t/**\n\t * Serializes the ID.\n\t */\n\tpublic toJSON() {\n\t\treturn this.toString();\n\t}\n\n\t/**\n\t * Serializes the ID to a string.\n\t */\n\tpublic toString() {\n\t\tif (!this.stringifed) {\n\t\t\tthis.stringifed = this.path[0];\n\t\t\tfor (let i = 1; i < this.viewEnd; i++) {\n\t\t\t\tthis.stringifed += TestIdPathParts.Delimiter;\n\t\t\t\tthis.stringifed += this.path[i];\n\t\t\t}\n\t\t}\n\n\t\treturn this.stringifed;\n\t}\n}\n"]}