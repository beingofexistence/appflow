{"version":3,"sources":["vs/workbench/contrib/testing/browser/testingProgressUiService.ts"],"names":[],"mappings":"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","file":"testingProgressUiService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { localize } from 'vs/nls';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IViewsService } from 'vs/workbench/common/views';\nimport { AutoOpenTesting, getTestingConfiguration, TestingConfigKeys } from 'vs/workbench/contrib/testing/common/configuration';\nimport { Testing } from 'vs/workbench/contrib/testing/common/constants';\nimport { isFailedState } from 'vs/workbench/contrib/testing/common/testingStates';\nimport { ITestResult, LiveTestResult, TestResultItemChangeReason } from 'vs/workbench/contrib/testing/common/testResult';\nimport { ITestResultService } from 'vs/workbench/contrib/testing/common/testResultService';\nimport { TestResultState } from 'vs/workbench/contrib/testing/common/testTypes';\n\n/** Workbench contribution that triggers updates in the TestingProgressUi service */\nexport class TestingProgressTrigger extends Disposable {\n\tconstructor(\n\t\t@ITestResultService resultService: ITestResultService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(resultService.onResultsChanged((e) => {\n\t\t\tif ('started' in e) {\n\t\t\t\tthis.attachAutoOpenForNewResults(e.started);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate attachAutoOpenForNewResults(result: LiveTestResult) {\n\t\tif (result.request.isUiTriggered === false) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst cfg = getTestingConfiguration(this.configurationService, TestingConfigKeys.OpenTesting);\n\t\tif (cfg === AutoOpenTesting.NeverOpen) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (cfg === AutoOpenTesting.OpenExplorerOnTestStart) {\n\t\t\treturn this.openExplorerView();\n\t\t}\n\n\t\tif (cfg === AutoOpenTesting.OpenOnTestStart) {\n\t\t\treturn this.openResultsView();\n\t\t}\n\n\t\t// open on failure\n\t\tconst disposable = new DisposableStore();\n\t\tdisposable.add(result.onComplete(() => disposable.dispose()));\n\t\tdisposable.add(result.onChange(e => {\n\t\t\tif (e.reason === TestResultItemChangeReason.OwnStateChange && isFailedState(e.item.ownComputedState)) {\n\t\t\t\tthis.openResultsView();\n\t\t\t\tdisposable.dispose();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate openExplorerView() {\n\t\tthis.viewsService.openView(Testing.ExplorerViewId, false);\n\t}\n\n\tprivate openResultsView() {\n\t\tthis.viewsService.openView(Testing.ResultsViewId, false);\n\t}\n}\n\nexport type CountSummary = ReturnType<typeof collectTestStateCounts>;\n\nexport const collectTestStateCounts = (isRunning: boolean, results: ReadonlyArray<ITestResult>) => {\n\tlet passed = 0;\n\tlet failed = 0;\n\tlet skipped = 0;\n\tlet running = 0;\n\tlet queued = 0;\n\n\tfor (const result of results) {\n\t\tconst count = result.counts;\n\t\tfailed += count[TestResultState.Errored] + count[TestResultState.Failed];\n\t\tpassed += count[TestResultState.Passed];\n\t\tskipped += count[TestResultState.Skipped];\n\t\trunning += count[TestResultState.Running];\n\t\tqueued += count[TestResultState.Queued];\n\t}\n\n\treturn {\n\t\tisRunning,\n\t\tpassed,\n\t\tfailed,\n\t\trunSoFar: passed + failed,\n\t\ttotalWillBeRun: passed + failed + queued + running,\n\t\tskipped,\n\t};\n};\n\nexport const getTestProgressText = ({ isRunning, passed, runSoFar, totalWillBeRun, skipped, failed }: CountSummary) => {\n\tlet percent = passed / runSoFar * 100;\n\tif (failed > 0) {\n\t\t// fix: prevent from rounding to 100 if there's any failed test\n\t\tpercent = Math.min(percent, 99.9);\n\t} else if (runSoFar === 0) {\n\t\tpercent = 0;\n\t}\n\n\tif (isRunning) {\n\t\tif (runSoFar === 0) {\n\t\t\treturn localize('testProgress.runningInitial', 'Running tests...');\n\t\t} else if (skipped === 0) {\n\t\t\treturn localize('testProgress.running', 'Running tests, {0}/{1} passed ({2}%)', passed, totalWillBeRun, percent.toPrecision(3));\n\t\t} else {\n\t\t\treturn localize('testProgressWithSkip.running', 'Running tests, {0}/{1} tests passed ({2}%, {3} skipped)', passed, totalWillBeRun, percent.toPrecision(3), skipped);\n\t\t}\n\t} else {\n\t\tif (skipped === 0) {\n\t\t\treturn localize('testProgress.completed', '{0}/{1} tests passed ({2}%)', passed, runSoFar, percent.toPrecision(3));\n\t\t} else {\n\t\t\treturn localize('testProgressWithSkip.completed', '{0}/{1} tests passed ({2}%, {3} skipped)', passed, runSoFar, percent.toPrecision(3), skipped);\n\t\t}\n\t}\n};\n"]}