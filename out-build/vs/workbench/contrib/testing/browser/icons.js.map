{"version":3,"sources":["vs/workbench/contrib/testing/browser/icons.ts"],"names":[],"mappings":"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","file":"icons.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from 'vs/base/common/codicons';\nimport { localize } from 'vs/nls';\nimport { registerIcon, spinningLoading } from 'vs/platform/theme/common/iconRegistry';\nimport { registerThemingParticipant } from 'vs/platform/theme/common/themeService';\nimport { ThemeIcon } from 'vs/base/common/themables';\nimport { testingColorRunAction, testStatesToIconColors } from 'vs/workbench/contrib/testing/browser/theme';\nimport { TestResultState } from 'vs/workbench/contrib/testing/common/testTypes';\n\nexport const testingViewIcon = registerIcon('test-view-icon', Codicon.beaker, localize('testViewIcon', 'View icon of the test view.'));\nexport const testingResultsIcon = registerIcon('test-results-icon', Codicon.checklist, localize('testingResultsIcon', 'Icons for test results.'));\nexport const testingRunIcon = registerIcon('testing-run-icon', Codicon.run, localize('testingRunIcon', 'Icon of the \"run test\" action.'));\nexport const testingRerunIcon = registerIcon('testing-rerun-icon', Codicon.refresh, localize('testingRerunIcon', 'Icon of the \"rerun tests\" action.'));\nexport const testingRunAllIcon = registerIcon('testing-run-all-icon', Codicon.runAll, localize('testingRunAllIcon', 'Icon of the \"run all tests\" action.'));\n// todo: https://github.com/microsoft/vscode-codicons/issues/72\nexport const testingDebugAllIcon = registerIcon('testing-debug-all-icon', Codicon.debugAltSmall, localize('testingDebugAllIcon', 'Icon of the \"debug all tests\" action.'));\nexport const testingDebugIcon = registerIcon('testing-debug-icon', Codicon.debugAltSmall, localize('testingDebugIcon', 'Icon of the \"debug test\" action.'));\nexport const testingCancelIcon = registerIcon('testing-cancel-icon', Codicon.debugStop, localize('testingCancelIcon', 'Icon to cancel ongoing test runs.'));\nexport const testingFilterIcon = registerIcon('testing-filter', Codicon.filter, localize('filterIcon', 'Icon for the \\'Filter\\' action in the testing view.'));\nexport const testingHiddenIcon = registerIcon('testing-hidden', Codicon.eyeClosed, localize('hiddenIcon', 'Icon shown beside hidden tests, when they\\'ve been shown.'));\n\nexport const testingShowAsList = registerIcon('testing-show-as-list-icon', Codicon.listTree, localize('testingShowAsList', 'Icon shown when the test explorer is disabled as a tree.'));\nexport const testingShowAsTree = registerIcon('testing-show-as-list-icon', Codicon.listFlat, localize('testingShowAsTree', 'Icon shown when the test explorer is disabled as a list.'));\n\nexport const testingUpdateProfiles = registerIcon('testing-update-profiles', Codicon.gear, localize('testingUpdateProfiles', 'Icon shown to update test profiles.'));\nexport const testingRefreshTests = registerIcon('testing-refresh-tests', Codicon.refresh, localize('testingRefreshTests', 'Icon on the button to refresh tests.'));\nexport const testingTurnContinuousRunOn = registerIcon('testing-turn-continuous-run-on', Codicon.eye, localize('testingTurnContinuousRunOn', 'Icon to turn continuous test runs on.'));\nexport const testingTurnContinuousRunOff = registerIcon('testing-turn-continuous-run-off', Codicon.eyeClosed, localize('testingTurnContinuousRunOff', 'Icon to turn continuous test runs off.'));\nexport const testingContinuousIsOn = registerIcon('testing-continuous-is-on', Codicon.eye, localize('testingTurnContinuousRunIsOn', 'Icon when continuous run is on for a test ite,.'));\nexport const testingCancelRefreshTests = registerIcon('testing-cancel-refresh-tests', Codicon.stop, localize('testingCancelRefreshTests', 'Icon on the button to cancel refreshing tests.'));\n\nexport const testingStatesToIcons = new Map<TestResultState, ThemeIcon>([\n\t[TestResultState.Errored, registerIcon('testing-error-icon', Codicon.issues, localize('testingErrorIcon', 'Icon shown for tests that have an error.'))],\n\t[TestResultState.Failed, registerIcon('testing-failed-icon', Codicon.error, localize('testingFailedIcon', 'Icon shown for tests that failed.'))],\n\t[TestResultState.Passed, registerIcon('testing-passed-icon', Codicon.pass, localize('testingPassedIcon', 'Icon shown for tests that passed.'))],\n\t[TestResultState.Queued, registerIcon('testing-queued-icon', Codicon.history, localize('testingQueuedIcon', 'Icon shown for tests that are queued.'))],\n\t[TestResultState.Running, spinningLoading],\n\t[TestResultState.Skipped, registerIcon('testing-skipped-icon', Codicon.debugStepOver, localize('testingSkippedIcon', 'Icon shown for tests that are skipped.'))],\n\t[TestResultState.Unset, registerIcon('testing-unset-icon', Codicon.circleOutline, localize('testingUnsetIcon', 'Icon shown for tests that are in an unset state.'))],\n]);\n\nregisterThemingParticipant((theme, collector) => {\n\tfor (const [state, icon] of testingStatesToIcons.entries()) {\n\t\tconst color = testStatesToIconColors[state];\n\t\tif (!color) {\n\t\t\tcontinue;\n\t\t}\n\t\tcollector.addRule(`.monaco-workbench ${ThemeIcon.asCSSSelector(icon)} {\n\t\t\tcolor: ${theme.getColor(color)} !important;\n\t\t}`);\n\t}\n\n\tcollector.addRule(`\n\t\t.monaco-editor ${ThemeIcon.asCSSSelector(testingRunIcon)},\n\t\t.monaco-editor ${ThemeIcon.asCSSSelector(testingRunAllIcon)} {\n\t\t\tcolor: ${theme.getColor(testingColorRunAction)};\n\t\t}\n\t`);\n});\n"]}