{"version":3,"sources":["vs/workbench/contrib/testing/browser/theme.ts"],"names":[],"mappings":"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","file":"theme.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Color, RGBA } from 'vs/base/common/color';\nimport { localize } from 'vs/nls';\nimport { contrastBorder, editorErrorForeground, editorForeground, registerColor, transparent } from 'vs/platform/theme/common/colorRegistry';\nimport { TestMessageType, TestResultState } from 'vs/workbench/contrib/testing/common/testTypes';\n\nexport const testingColorIconFailed = registerColor('testing.iconFailed', {\n\tdark: '#f14c4c',\n\tlight: '#f14c4c',\n\thcDark: '#f14c4c',\n\thcLight: '#B5200D'\n}, localize('testing.iconFailed', \"Color for the 'failed' icon in the test explorer.\"));\n\nexport const testingColorIconErrored = registerColor('testing.iconErrored', {\n\tdark: '#f14c4c',\n\tlight: '#f14c4c',\n\thcDark: '#f14c4c',\n\thcLight: '#B5200D'\n}, localize('testing.iconErrored', \"Color for the 'Errored' icon in the test explorer.\"));\n\nexport const testingColorIconPassed = registerColor('testing.iconPassed', {\n\tdark: '#73c991',\n\tlight: '#73c991',\n\thcDark: '#73c991',\n\thcLight: '#007100'\n}, localize('testing.iconPassed', \"Color for the 'passed' icon in the test explorer.\"));\n\nexport const testingColorRunAction = registerColor('testing.runAction', {\n\tdark: testingColorIconPassed,\n\tlight: testingColorIconPassed,\n\thcDark: testingColorIconPassed,\n\thcLight: testingColorIconPassed\n}, localize('testing.runAction', \"Color for 'run' icons in the editor.\"));\n\nexport const testingColorIconQueued = registerColor('testing.iconQueued', {\n\tdark: '#cca700',\n\tlight: '#cca700',\n\thcDark: '#cca700',\n\thcLight: '#cca700'\n}, localize('testing.iconQueued', \"Color for the 'Queued' icon in the test explorer.\"));\n\nexport const testingColorIconUnset = registerColor('testing.iconUnset', {\n\tdark: '#848484',\n\tlight: '#848484',\n\thcDark: '#848484',\n\thcLight: '#848484'\n}, localize('testing.iconUnset', \"Color for the 'Unset' icon in the test explorer.\"));\n\nexport const testingColorIconSkipped = registerColor('testing.iconSkipped', {\n\tdark: '#848484',\n\tlight: '#848484',\n\thcDark: '#848484',\n\thcLight: '#848484'\n}, localize('testing.iconSkipped', \"Color for the 'Skipped' icon in the test explorer.\"));\n\nexport const testingPeekBorder = registerColor('testing.peekBorder', {\n\tdark: editorErrorForeground,\n\tlight: editorErrorForeground,\n\thcDark: contrastBorder,\n\thcLight: contrastBorder\n}, localize('testing.peekBorder', 'Color of the peek view borders and arrow.'));\n\nexport const testingPeekHeaderBackground = registerColor('testing.peekHeaderBackground', {\n\tdark: transparent(editorErrorForeground, 0.1),\n\tlight: transparent(editorErrorForeground, 0.1),\n\thcDark: null,\n\thcLight: null\n}, localize('testing.peekBorder', 'Color of the peek view borders and arrow.'));\n\nexport const testMessageSeverityColors: {\n\t[K in TestMessageType]: {\n\t\tdecorationForeground: string;\n\t\tmarginBackground: string;\n\t};\n} = {\n\t[TestMessageType.Error]: {\n\t\tdecorationForeground: registerColor(\n\t\t\t'testing.message.error.decorationForeground',\n\t\t\t{ dark: editorErrorForeground, light: editorErrorForeground, hcDark: editorForeground, hcLight: editorForeground },\n\t\t\tlocalize('testing.message.error.decorationForeground', 'Text color of test error messages shown inline in the editor.')\n\t\t),\n\t\tmarginBackground: registerColor(\n\t\t\t'testing.message.error.lineBackground',\n\t\t\t{ dark: new Color(new RGBA(255, 0, 0, 0.2)), light: new Color(new RGBA(255, 0, 0, 0.2)), hcDark: null, hcLight: null },\n\t\t\tlocalize('testing.message.error.marginBackground', 'Margin color beside error messages shown inline in the editor.')\n\t\t),\n\t},\n\t[TestMessageType.Output]: {\n\t\tdecorationForeground: registerColor(\n\t\t\t'testing.message.info.decorationForeground',\n\t\t\t{ dark: transparent(editorForeground, 0.5), light: transparent(editorForeground, 0.5), hcDark: transparent(editorForeground, 0.5), hcLight: transparent(editorForeground, 0.5) },\n\t\t\tlocalize('testing.message.info.decorationForeground', 'Text color of test info messages shown inline in the editor.')\n\t\t),\n\t\tmarginBackground: registerColor(\n\t\t\t'testing.message.info.lineBackground',\n\t\t\t{ dark: null, light: null, hcDark: null, hcLight: null },\n\t\t\tlocalize('testing.message.info.marginBackground', 'Margin color beside info messages shown inline in the editor.')\n\t\t),\n\t},\n};\n\nexport const testStatesToIconColors: { [K in TestResultState]?: string } = {\n\t[TestResultState.Errored]: testingColorIconErrored,\n\t[TestResultState.Failed]: testingColorIconFailed,\n\t[TestResultState.Passed]: testingColorIconPassed,\n\t[TestResultState.Queued]: testingColorIconQueued,\n\t[TestResultState.Unset]: testingColorIconUnset,\n\t[TestResultState.Skipped]: testingColorIconSkipped,\n};\n"]}