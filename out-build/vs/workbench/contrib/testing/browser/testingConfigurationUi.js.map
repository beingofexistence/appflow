{"version":3,"sources":["vs/workbench/contrib/testing/browser/testingConfigurationUi.ts"],"names":[],"mappings":"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","file":"testingConfigurationUi.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { groupBy } from 'vs/base/common/arrays';\nimport { isDefined } from 'vs/base/common/types';\nimport { ServicesAccessor } from 'vs/editor/browser/editorExtensions';\nimport { localize } from 'vs/nls';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { QuickPickInput, IQuickPickItem, IQuickInputService, IQuickPickItemButtonEvent } from 'vs/platform/quickinput/common/quickInput';\nimport { ThemeIcon } from 'vs/base/common/themables';\nimport { testingUpdateProfiles } from 'vs/workbench/contrib/testing/browser/icons';\nimport { testConfigurationGroupNames } from 'vs/workbench/contrib/testing/common/constants';\nimport { InternalTestItem, ITestRunProfile, TestRunProfileBitset } from 'vs/workbench/contrib/testing/common/testTypes';\nimport { canUseProfileWithTest, ITestProfileService } from 'vs/workbench/contrib/testing/common/testProfileService';\n\ninterface IConfigurationPickerOptions {\n\t/** Placeholder text */\n\tplaceholder?: string;\n\t/** Show buttons to trigger configuration */\n\tshowConfigureButtons?: boolean;\n\t/** Only show configurations from this controller */\n\tonlyForTest?: InternalTestItem;\n\t/** Only show this group */\n\tonlyGroup?: TestRunProfileBitset;\n\t/** Only show items which are configurable */\n\tonlyConfigurable?: boolean;\n}\n\nfunction buildPicker(accessor: ServicesAccessor, {\n\tonlyGroup,\n\tshowConfigureButtons = true,\n\tonlyForTest,\n\tonlyConfigurable,\n\tplaceholder = localize('testConfigurationUi.pick', 'Pick a test profile to use'),\n}: IConfigurationPickerOptions) {\n\tconst profileService = accessor.get(ITestProfileService);\n\tconst items: QuickPickInput<IQuickPickItem & { profile: ITestRunProfile }>[] = [];\n\tconst pushItems = (allProfiles: ITestRunProfile[], description?: string) => {\n\t\tfor (const profiles of groupBy(allProfiles, (a, b) => a.group - b.group)) {\n\t\t\tlet addedHeader = false;\n\t\t\tif (onlyGroup) {\n\t\t\t\tif (profiles[0].group !== onlyGroup) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\taddedHeader = true; // showing one group, no need for label\n\t\t\t}\n\n\t\t\tfor (const profile of profiles) {\n\t\t\t\tif (onlyConfigurable && !profile.hasConfigurationHandler) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!addedHeader) {\n\t\t\t\t\titems.push({ type: 'separator', label: testConfigurationGroupNames[profiles[0].group] });\n\t\t\t\t\taddedHeader = true;\n\t\t\t\t}\n\n\t\t\t\titems.push(({\n\t\t\t\t\ttype: 'item',\n\t\t\t\t\tprofile,\n\t\t\t\t\tlabel: profile.label,\n\t\t\t\t\tdescription,\n\t\t\t\t\talwaysShow: true,\n\t\t\t\t\tbuttons: profile.hasConfigurationHandler && showConfigureButtons\n\t\t\t\t\t\t? [{\n\t\t\t\t\t\t\ticonClass: ThemeIcon.asClassName(testingUpdateProfiles),\n\t\t\t\t\t\t\ttooltip: localize('updateTestConfiguration', 'Update Test Configuration')\n\t\t\t\t\t\t}] : []\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\t};\n\n\tif (onlyForTest !== undefined) {\n\t\tpushItems(profileService.getControllerProfiles(onlyForTest.controllerId).filter(p => canUseProfileWithTest(p, onlyForTest)));\n\t} else {\n\t\tfor (const { profiles, controller } of profileService.all()) {\n\t\t\tpushItems(profiles, controller.label.value);\n\t\t}\n\t}\n\n\tconst quickpick = accessor.get(IQuickInputService).createQuickPick<IQuickPickItem & { profile: ITestRunProfile }>();\n\tquickpick.items = items;\n\tquickpick.placeholder = placeholder;\n\treturn quickpick;\n}\n\nconst triggerButtonHandler = (service: ITestProfileService, resolve: (arg: undefined) => void) =>\n\t(evt: IQuickPickItemButtonEvent<IQuickPickItem>) => {\n\t\tconst profile = (evt.item as { profile?: ITestRunProfile }).profile;\n\t\tif (profile) {\n\t\t\tservice.configure(profile.controllerId, profile.profileId);\n\t\t\tresolve(undefined);\n\t\t}\n\t};\n\nCommandsRegistry.registerCommand({\n\tid: 'vscode.pickMultipleTestProfiles',\n\thandler: async (accessor: ServicesAccessor, options: IConfigurationPickerOptions & {\n\t\tselected?: ITestRunProfile[];\n\t}) => {\n\t\tconst profileService = accessor.get(ITestProfileService);\n\t\tconst quickpick = buildPicker(accessor, options);\n\t\tif (!quickpick) {\n\t\t\treturn;\n\t\t}\n\n\t\tquickpick.canSelectMany = true;\n\t\tif (options.selected) {\n\t\t\tquickpick.selectedItems = quickpick.items\n\t\t\t\t.filter((i): i is IQuickPickItem & { profile: ITestRunProfile } => i.type === 'item')\n\t\t\t\t.filter(i => options.selected!.some(s => s.controllerId === i.profile.controllerId && s.profileId === i.profile.profileId));\n\t\t}\n\n\t\tconst pick = await new Promise<ITestRunProfile[] | undefined>(resolve => {\n\t\t\tquickpick.onDidAccept(() => {\n\t\t\t\tconst selected = quickpick.selectedItems as readonly { profile?: ITestRunProfile }[];\n\t\t\t\tresolve(selected.map(s => s.profile).filter(isDefined));\n\t\t\t});\n\t\t\tquickpick.onDidHide(() => resolve(undefined));\n\t\t\tquickpick.onDidTriggerItemButton(triggerButtonHandler(profileService, resolve));\n\t\t\tquickpick.show();\n\t\t});\n\n\t\tquickpick.dispose();\n\t\treturn pick;\n\t}\n});\n\nCommandsRegistry.registerCommand({\n\tid: 'vscode.pickTestProfile',\n\thandler: async (accessor: ServicesAccessor, options: IConfigurationPickerOptions) => {\n\t\tconst profileService = accessor.get(ITestProfileService);\n\t\tconst quickpick = buildPicker(accessor, options);\n\t\tif (!quickpick) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst pick = await new Promise<ITestRunProfile | undefined>(resolve => {\n\t\t\tquickpick.onDidAccept(() => resolve((quickpick.selectedItems[0] as { profile?: ITestRunProfile })?.profile));\n\t\t\tquickpick.onDidHide(() => resolve(undefined));\n\t\t\tquickpick.onDidTriggerItemButton(triggerButtonHandler(profileService, resolve));\n\t\t\tquickpick.show();\n\t\t});\n\n\t\tquickpick.dispose();\n\t\treturn pick;\n\t}\n});\n\n"]}