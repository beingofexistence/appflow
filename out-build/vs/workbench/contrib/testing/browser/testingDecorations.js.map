{"version":3,"sources":["vs/workbench/contrib/testing/browser/testingDecorations.ts"],"names":[],"mappings":"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","file":"testingDecorations.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from 'vs/base/browser/dom';\nimport { renderStringAsPlaintext } from 'vs/base/browser/markdownRenderer';\nimport { Action, IAction, Separator, SubmenuAction } from 'vs/base/common/actions';\nimport { equals } from 'vs/base/common/arrays';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IMarkdownString, MarkdownString } from 'vs/base/common/htmlContent';\nimport { stripIcons } from 'vs/base/common/iconLabels';\nimport { Iterable } from 'vs/base/common/iterator';\nimport { Disposable, DisposableStore, IReference, MutableDisposable } from 'vs/base/common/lifecycle';\nimport { ResourceMap } from 'vs/base/common/map';\nimport { isMacintosh } from 'vs/base/common/platform';\nimport { ThemeIcon } from 'vs/base/common/themables';\nimport { Constants } from 'vs/base/common/uint';\nimport { URI } from 'vs/base/common/uri';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { ContentWidgetPositionPreference, ICodeEditor, IContentWidgetPosition, IEditorMouseEvent, MouseTargetType } from 'vs/editor/browser/editorBrowser';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { EditorOption } from 'vs/editor/common/config/editorOptions';\nimport { overviewRulerError, overviewRulerInfo } from 'vs/editor/common/core/editorColorRegistry';\nimport { IRange } from 'vs/editor/common/core/range';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { IModelDeltaDecoration, ITextModel, OverviewRulerLane, TrackedRangeStickiness } from 'vs/editor/common/model';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { localize } from 'vs/nls';\nimport { createAndFillInContextMenuActions } from 'vs/platform/actions/browser/menuEntryActionViewItem';\nimport { IMenuService, MenuId } from 'vs/platform/actions/common/actions';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { themeColorFromId } from 'vs/platform/theme/common/themeService';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { EditorLineNumberContextMenu, GutterActionsRegistry } from 'vs/workbench/contrib/codeEditor/browser/editorLineNumberMenu';\nimport { getTestItemContextOverlay } from 'vs/workbench/contrib/testing/browser/explorerProjections/testItemContextOverlay';\nimport { testingRunAllIcon, testingRunIcon, testingStatesToIcons } from 'vs/workbench/contrib/testing/browser/icons';\nimport { DefaultGutterClickAction, TestingConfigKeys, getTestingConfiguration } from 'vs/workbench/contrib/testing/common/configuration';\nimport { Testing, labelForTestInState } from 'vs/workbench/contrib/testing/common/constants';\nimport { TestId } from 'vs/workbench/contrib/testing/common/testId';\nimport { ITestProfileService } from 'vs/workbench/contrib/testing/common/testProfileService';\nimport { ITestResult, LiveTestResult } from 'vs/workbench/contrib/testing/common/testResult';\nimport { ITestResultService } from 'vs/workbench/contrib/testing/common/testResultService';\nimport { ITestService, getContextForTestItem, testsInFile } from 'vs/workbench/contrib/testing/common/testService';\nimport { IRichLocation, ITestMessage, ITestRunProfile, IncrementalTestCollectionItem, InternalTestItem, TestDiffOpType, TestMessageType, TestResultItem, TestResultState, TestRunProfileBitset } from 'vs/workbench/contrib/testing/common/testTypes';\nimport { ITestDecoration as IPublicTestDecoration, ITestingDecorationsService, TestDecorations } from 'vs/workbench/contrib/testing/common/testingDecorations';\nimport { ITestingPeekOpener } from 'vs/workbench/contrib/testing/common/testingPeekOpener';\nimport { isFailedState, maxPriority } from 'vs/workbench/contrib/testing/common/testingStates';\nimport { TestUriType, buildTestUri, parseTestUri } from 'vs/workbench/contrib/testing/common/testingUri';\n\nconst MAX_INLINE_MESSAGE_LENGTH = 128;\n\nfunction isOriginalInDiffEditor(codeEditorService: ICodeEditorService, codeEditor: ICodeEditor): boolean {\n\tconst diffEditors = codeEditorService.listDiffEditors();\n\n\tfor (const diffEditor of diffEditors) {\n\t\tif (diffEditor.getOriginalEditor() === codeEditor) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\ninterface ITestDecoration extends IPublicTestDecoration {\n\tid: string;\n\tclick(e: IEditorMouseEvent): boolean;\n}\n\n/** Value for saved decorations, providing fast accessors for the hot 'syncDecorations' path */\nclass CachedDecorations {\n\tprivate readonly runByIdKey = new Map<string, RunTestDecoration>();\n\tprivate readonly messages = new Map<ITestMessage, TestMessageDecoration>();\n\n\tpublic get size() {\n\t\treturn this.runByIdKey.size + this.messages.size;\n\t}\n\n\t/** Gets a test run decoration that contains exactly the given test IDs */\n\tpublic getForExactTests(testIds: string[]) {\n\t\tconst key = testIds.sort().join('\\0\\0');\n\t\treturn this.runByIdKey.get(key);\n\t}\n\n\t/** Gets the decoration that corresponds to the given test message */\n\tpublic getMessage(message: ITestMessage) {\n\t\treturn this.messages.get(message);\n\t}\n\n\t/** Removes the decoration for the given test messsage */\n\tpublic removeMessage(message: ITestMessage) {\n\t\tthis.messages.delete(message);\n\t}\n\n\t/** Adds a new test message decoration */\n\tpublic addMessage(d: TestMessageDecoration) {\n\t\tthis.messages.set(d.testMessage, d);\n\t}\n\n\t/** Adds a new test run decroation */\n\tpublic addTest(d: RunTestDecoration) {\n\t\tconst key = d.testIds.sort().join('\\0\\0');\n\t\tthis.runByIdKey.set(key, d);\n\t}\n\n\t/** Finds an extension by VS Code event ID */\n\tpublic getById(decorationId: string) {\n\t\tfor (const d of this.runByIdKey.values()) {\n\t\t\tif (d.id === decorationId) {\n\t\t\t\treturn d;\n\t\t\t}\n\t\t}\n\t\tfor (const d of this.messages.values()) {\n\t\t\tif (d.id === decorationId) {\n\t\t\t\treturn d;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/** Iterate over all decorations */\n\t*[Symbol.iterator](): IterableIterator<ITestDecoration> {\n\t\tfor (const d of this.runByIdKey.values()) {\n\t\t\tyield d;\n\t\t}\n\t\tfor (const d of this.messages.values()) {\n\t\t\tyield d;\n\t\t}\n\t}\n}\n\nexport class TestingDecorationService extends Disposable implements ITestingDecorationsService {\n\tdeclare public _serviceBrand: undefined;\n\n\tprivate generation = 0;\n\tprivate readonly changeEmitter = new Emitter<void>();\n\tprivate readonly decorationCache = new ResourceMap<{\n\t\t/** The document version at which ranges have been updated, requiring rerendering */\n\t\trangeUpdateVersionId?: number;\n\t\t/** Counter for the results rendered in the document */\n\t\tgeneration: number;\n\t\tvalue: CachedDecorations;\n\t}>();\n\n\t/**\n\t * List of messages that should be hidden because an editor changed their\n\t * underlying ranges. I think this is good enough, because:\n\t *  - Message decorations are never shown across reloads; this does not\n\t *    need to persist\n\t *  - Message instances are stable for any completed test results for\n\t *    the duration of the session.\n\t */\n\tprivate readonly invalidatedMessages = new WeakSet<ITestMessage>();\n\n\t/** @inheritdoc */\n\tpublic readonly onDidChange = this.changeEmitter.event;\n\n\tconstructor(\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ITestService private readonly testService: ITestService,\n\t\t@ITestResultService private readonly results: ITestResultService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t) {\n\t\tsuper();\n\t\tcodeEditorService.registerDecorationType('test-message-decoration', TestMessageDecoration.decorationId, {}, undefined);\n\n\t\tmodelService.onModelRemoved(e => this.decorationCache.delete(e.uri));\n\n\t\tconst debounceInvalidate = this._register(new RunOnceScheduler(() => this.invalidate(), 100));\n\n\t\t// If ranges were updated in the document, mark that we should explicitly\n\t\t// sync decorations to the published lines, since we assume that everything\n\t\t// is up to date. This prevents issues, as in #138632, #138835, #138922.\n\t\tthis._register(this.testService.onWillProcessDiff(diff => {\n\t\t\tfor (const entry of diff) {\n\t\t\t\tif (entry.op !== TestDiffOpType.DocumentSynced) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst rec = this.decorationCache.get(entry.uri);\n\t\t\t\tif (rec) {\n\t\t\t\t\trec.rangeUpdateVersionId = entry.docv;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!debounceInvalidate.isScheduled()) {\n\t\t\t\tdebounceInvalidate.schedule();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(Event.any(\n\t\t\tthis.results.onResultsChanged,\n\t\t\tthis.results.onTestChanged,\n\t\t\tthis.testService.excluded.onTestExclusionsChanged,\n\t\t\tthis.testService.showInlineOutput.onDidChange,\n\t\t\tEvent.filter(configurationService.onDidChangeConfiguration, e => e.affectsConfiguration(TestingConfigKeys.GutterEnabled)),\n\t\t)(() => {\n\t\t\tif (!debounceInvalidate.isScheduled()) {\n\t\t\t\tdebounceInvalidate.schedule();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(GutterActionsRegistry.registerGutterActionsGenerator((context, result) => {\n\t\t\tconst model = context.editor.getModel();\n\t\t\tconst testingDecorations = TestingDecorations.get(context.editor);\n\t\t\tif (!model || !testingDecorations?.currentUri) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst currentDecorations = this.syncDecorations(testingDecorations.currentUri);\n\t\t\tif (!currentDecorations.size) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst modelDecorations = model.getLinesDecorations(context.lineNumber, context.lineNumber);\n\t\t\tfor (const { id } of modelDecorations) {\n\t\t\t\tconst decoration = currentDecorations.getById(id);\n\t\t\t\tif (decoration) {\n\t\t\t\t\tconst { object: actions } = decoration.getContextMenuActions();\n\t\t\t\t\tfor (const action of actions) {\n\t\t\t\t\t\tresult.push(action, '1_testing');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\t/** @inheritdoc */\n\tpublic invalidateResultMessage(message: ITestMessage) {\n\t\tthis.invalidatedMessages.add(message);\n\t\tthis.invalidate();\n\t}\n\n\t/** @inheritdoc */\n\tpublic syncDecorations(resource: URI): CachedDecorations {\n\t\tconst model = this.modelService.getModel(resource);\n\t\tif (!model) {\n\t\t\treturn new CachedDecorations();\n\t\t}\n\n\t\tconst cached = this.decorationCache.get(resource);\n\t\tif (cached && cached.generation === this.generation && (cached.rangeUpdateVersionId === undefined || cached.rangeUpdateVersionId !== model.getVersionId())) {\n\t\t\treturn cached.value;\n\t\t}\n\n\t\treturn this.applyDecorations(model);\n\t}\n\n\t/** @inheritdoc */\n\tpublic getDecoratedTestPosition(resource: URI, testId: string) {\n\t\tconst model = this.modelService.getModel(resource);\n\t\tif (!model) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst decoration = Iterable.find(this.syncDecorations(resource), v => v instanceof RunTestDecoration && v.isForTest(testId));\n\t\tif (!decoration) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// decoration is collapsed, so the range is meaningless; only position matters.\n\t\treturn model.getDecorationRange(decoration.id)?.getStartPosition();\n\t}\n\n\tprivate invalidate() {\n\t\tthis.generation++;\n\t\tthis.changeEmitter.fire();\n\t}\n\n\t/**\n\t * Applies the current set of test decorations to the given text model.\n\t */\n\tprivate applyDecorations(model: ITextModel) {\n\t\tconst gutterEnabled = getTestingConfiguration(this.configurationService, TestingConfigKeys.GutterEnabled);\n\t\tconst uriStr = model.uri.toString();\n\t\tconst cached = this.decorationCache.get(model.uri);\n\t\tconst testRangesUpdated = cached?.rangeUpdateVersionId === model.getVersionId();\n\t\tconst lastDecorations = cached?.value ?? new CachedDecorations();\n\n\t\tconst newDecorations = model.changeDecorations(accessor => {\n\t\t\tconst newDecorations = new CachedDecorations();\n\t\t\tconst runDecorations = new TestDecorations<{ line: number; id: ''; test: IncrementalTestCollectionItem; resultItem: TestResultItem | undefined }>();\n\t\t\tfor (const test of this.testService.collection.getNodeByUrl(model.uri)) {\n\t\t\t\tif (!test.item.range) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst stateLookup = this.results.getStateById(test.item.extId);\n\t\t\t\tconst line = test.item.range.startLineNumber;\n\t\t\t\trunDecorations.push({ line, id: '', test, resultItem: stateLookup?.[1] });\n\t\t\t}\n\n\t\t\tfor (const [line, tests] of runDecorations.lines()) {\n\t\t\t\tconst multi = tests.length > 1;\n\t\t\t\tlet existing = lastDecorations.getForExactTests(tests.map(t => t.test.item.extId));\n\n\t\t\t\t// see comment in the constructor for what's going on here\n\t\t\t\tif (existing && testRangesUpdated && model.getDecorationRange(existing.id)?.startLineNumber !== line) {\n\t\t\t\t\texisting = undefined;\n\t\t\t\t}\n\n\t\t\t\tif (existing) {\n\t\t\t\t\tif (existing.replaceOptions(tests, gutterEnabled)) {\n\t\t\t\t\t\taccessor.changeDecorationOptions(existing.id, existing.editorDecoration.options);\n\t\t\t\t\t}\n\t\t\t\t\tnewDecorations.addTest(existing);\n\t\t\t\t} else {\n\t\t\t\t\tnewDecorations.addTest(multi\n\t\t\t\t\t\t? this.instantiationService.createInstance(MultiRunTestDecoration, tests, gutterEnabled, model)\n\t\t\t\t\t\t: this.instantiationService.createInstance(RunSingleTestDecoration, tests[0].test, tests[0].resultItem, model, gutterEnabled));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst messageLines = new Set<number>();\n\t\t\tif (getTestingConfiguration(this.configurationService, TestingConfigKeys.ShowAllMessages)) {\n\t\t\t\tthis.results.results.forEach(lastResult => this.applyDecorationsFromResult(lastResult, messageLines, uriStr, lastDecorations, model, newDecorations));\n\t\t\t} else {\n\t\t\t\tthis.applyDecorationsFromResult(this.results.results[0], messageLines, uriStr, lastDecorations, model, newDecorations);\n\t\t\t}\n\n\t\t\tconst saveFromRemoval = new Set<string>();\n\t\t\tfor (const decoration of newDecorations) {\n\t\t\t\tif (decoration.id === '') {\n\t\t\t\t\tdecoration.id = accessor.addDecoration(decoration.editorDecoration.range, decoration.editorDecoration.options);\n\t\t\t\t} else {\n\t\t\t\t\tsaveFromRemoval.add(decoration.id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const decoration of lastDecorations) {\n\t\t\t\tif (!saveFromRemoval.has(decoration.id)) {\n\t\t\t\t\taccessor.removeDecoration(decoration.id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.decorationCache.set(model.uri, {\n\t\t\t\tgeneration: this.generation,\n\t\t\t\trangeUpdateVersionId: cached?.rangeUpdateVersionId,\n\t\t\t\tvalue: newDecorations,\n\t\t\t});\n\n\t\t\treturn newDecorations;\n\t\t});\n\n\t\treturn newDecorations || lastDecorations;\n\t}\n\n\tprivate applyDecorationsFromResult(lastResult: ITestResult, messageLines: Set<Number>, uriStr: string, lastDecorations: CachedDecorations, model: ITextModel, newDecorations: CachedDecorations) {\n\t\tif (this.testService.showInlineOutput.value && lastResult instanceof LiveTestResult) {\n\t\t\tfor (const task of lastResult.tasks) {\n\t\t\t\tfor (const m of task.otherMessages) {\n\t\t\t\t\tif (!this.invalidatedMessages.has(m) && m.location?.uri.toString() === uriStr) {\n\t\t\t\t\t\tconst decoration = lastDecorations.getMessage(m) || this.instantiationService.createInstance(TestMessageDecoration, m, undefined, model);\n\t\t\t\t\t\tnewDecorations.addMessage(decoration);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const test of lastResult.tests) {\n\t\t\t\tfor (let taskId = 0; taskId < test.tasks.length; taskId++) {\n\t\t\t\t\tconst state = test.tasks[taskId];\n\t\t\t\t\tfor (let i = 0; i < state.messages.length; i++) {\n\t\t\t\t\t\tconst m = state.messages[i];\n\t\t\t\t\t\tif (this.invalidatedMessages.has(m) || m.location?.uri.toString() !== uriStr) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Only add one message per line number. Overlapping messages\n\t\t\t\t\t\t// don't appear well, and the peek will show all of them (#134129)\n\t\t\t\t\t\tconst line = m.location.range.startLineNumber;\n\t\t\t\t\t\tif (!messageLines.has(line)) {\n\t\t\t\t\t\t\tconst decoration = lastDecorations.getMessage(m) || this.instantiationService.createInstance(TestMessageDecoration, m, buildTestUri({\n\t\t\t\t\t\t\t\ttype: TestUriType.ResultActualOutput,\n\t\t\t\t\t\t\t\tmessageIndex: i,\n\t\t\t\t\t\t\t\ttaskIndex: taskId,\n\t\t\t\t\t\t\t\tresultId: lastResult.id,\n\t\t\t\t\t\t\t\ttestExtId: test.item.extId,\n\t\t\t\t\t\t\t}), model);\n\n\t\t\t\t\t\t\tnewDecorations.addMessage(decoration);\n\t\t\t\t\t\t\tmessageLines.add(line);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class TestingDecorations extends Disposable implements IEditorContribution {\n\t/**\n\t * Gets the decorations associated with the given code editor.\n\t */\n\tpublic static get(editor: ICodeEditor): TestingDecorations | null {\n\t\treturn editor.getContribution<TestingDecorations>(Testing.DecorationsContributionId);\n\t}\n\n\tpublic get currentUri() { return this._currentUri; }\n\n\tprivate _currentUri?: URI;\n\tprivate readonly expectedWidget = new MutableDisposable<ExpectedLensContentWidget>();\n\tprivate readonly actualWidget = new MutableDisposable<ActualLensContentWidget>();\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@ITestService private readonly testService: ITestService,\n\t\t@ITestingDecorationsService private readonly decorations: ITestingDecorationsService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper();\n\n\t\tcodeEditorService.registerDecorationType('test-message-decoration', TestMessageDecoration.decorationId, {}, undefined, editor);\n\n\t\tthis.attachModel(editor.getModel()?.uri);\n\t\tthis._register(decorations.onDidChange(() => {\n\t\t\tif (this._currentUri) {\n\t\t\t\tdecorations.syncDecorations(this._currentUri);\n\t\t\t}\n\t\t}));\n\t\tthis._register(this.editor.onDidChangeModel(e => this.attachModel(e.newModelUrl || undefined)));\n\t\tthis._register(this.editor.onMouseDown(e => {\n\t\t\tif (e.target.position && this.currentUri) {\n\t\t\t\tconst modelDecorations = editor.getModel()?.getLineDecorations(e.target.position.lineNumber) ?? [];\n\t\t\t\tif (!modelDecorations.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst cache = decorations.syncDecorations(this.currentUri);\n\t\t\t\tfor (const { id } of modelDecorations) {\n\t\t\t\t\tif ((cache.getById(id) as ITestDecoration | undefined)?.click(e)) {\n\t\t\t\t\t\te.event.stopPropagation();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t\tthis._register(Event.accumulate(this.editor.onDidChangeModelContent, 0, this._store)(evts => {\n\t\t\tconst model = editor.getModel();\n\t\t\tif (!this._currentUri || !model) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst currentDecorations = decorations.syncDecorations(this._currentUri);\n\t\t\tif (!currentDecorations.size) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const e of evts) {\n\t\t\t\tfor (const change of e.changes) {\n\t\t\t\t\tconst modelDecorations = model.getLinesDecorations(change.range.startLineNumber, change.range.endLineNumber);\n\t\t\t\t\tfor (const { id } of modelDecorations) {\n\t\t\t\t\t\tconst decoration = currentDecorations.getById(id);\n\t\t\t\t\t\tif (decoration instanceof TestMessageDecoration) {\n\t\t\t\t\t\t\tdecorations.invalidateResultMessage(decoration.testMessage);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tconst updateFontFamilyVar = () => {\n\t\t\tthis.editor.getContainerDomNode().style.setProperty('--testMessageDecorationFontFamily', editor.getOption(EditorOption.fontFamily));\n\t\t\tthis.editor.getContainerDomNode().style.setProperty('--testMessageDecorationFontSize', `${editor.getOption(EditorOption.fontSize)}px`);\n\t\t};\n\t\tthis._register(this.editor.onDidChangeConfiguration((e) => {\n\t\t\tif (e.hasChanged(EditorOption.fontFamily)) {\n\t\t\t\tupdateFontFamilyVar();\n\t\t\t}\n\t\t}));\n\t\tupdateFontFamilyVar();\n\t}\n\n\tprivate attachModel(uri?: URI) {\n\t\tswitch (uri && parseTestUri(uri)?.type) {\n\t\t\tcase TestUriType.ResultExpectedOutput:\n\t\t\t\tthis.expectedWidget.value = new ExpectedLensContentWidget(this.editor);\n\t\t\t\tthis.actualWidget.clear();\n\t\t\t\tbreak;\n\t\t\tcase TestUriType.ResultActualOutput:\n\t\t\t\tthis.expectedWidget.clear();\n\t\t\t\tthis.actualWidget.value = new ActualLensContentWidget(this.editor);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.expectedWidget.clear();\n\t\t\t\tthis.actualWidget.clear();\n\t\t}\n\n\t\tif (isOriginalInDiffEditor(this.codeEditorService, this.editor)) {\n\t\t\turi = undefined;\n\t\t}\n\n\t\tthis._currentUri = uri;\n\n\t\tif (!uri) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.decorations.syncDecorations(uri);\n\n\t\t(async () => {\n\t\t\tfor await (const _test of testsInFile(this.testService, this.uriIdentityService, uri, false)) {\n\t\t\t\t// consume the iterator so that all tests in the file get expanded. Or\n\t\t\t\t// at least until the URI changes. If new items are requested, changes\n\t\t\t\t// will be trigged in the `onDidProcessDiff` callback.\n\t\t\t\tif (this._currentUri !== uri) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t})();\n\t}\n}\n\nconst collapseRange = (originalRange: IRange) => ({\n\tstartLineNumber: originalRange.startLineNumber,\n\tendLineNumber: originalRange.startLineNumber,\n\tstartColumn: originalRange.startColumn,\n\tendColumn: originalRange.startColumn,\n});\n\nconst createRunTestDecoration = (tests: readonly IncrementalTestCollectionItem[], states: readonly (TestResultItem | undefined)[], visible: boolean): IModelDeltaDecoration => {\n\tconst range = tests[0]?.item.range;\n\tif (!range) {\n\t\tthrow new Error('Test decorations can only be created for tests with a range');\n\t}\n\n\tif (!visible) {\n\t\treturn { range: collapseRange(range), options: { isWholeLine: true, description: 'run-test-decoration' } };\n\t}\n\n\tlet computedState = TestResultState.Unset;\n\tconst hoverMessageParts: string[] = [];\n\tlet testIdWithMessages: string | undefined;\n\tlet retired = false;\n\tfor (let i = 0; i < tests.length; i++) {\n\t\tconst test = tests[i];\n\t\tconst resultItem = states[i];\n\t\tconst state = resultItem?.computedState ?? TestResultState.Unset;\n\t\tif (hoverMessageParts.length < 10) {\n\t\t\thoverMessageParts.push(labelForTestInState(test.item.label, state));\n\t\t}\n\t\tcomputedState = maxPriority(computedState, state);\n\t\tretired = retired || !!resultItem?.retired;\n\t\tif (!testIdWithMessages && resultItem?.tasks.some(t => t.messages.length)) {\n\t\t\ttestIdWithMessages = test.item.extId;\n\t\t}\n\t}\n\n\tconst hasMultipleTests = tests.length > 1 || tests[0].children.size > 0;\n\tconst icon = computedState === TestResultState.Unset\n\t\t? (hasMultipleTests ? testingRunAllIcon : testingRunIcon)\n\t\t: testingStatesToIcons.get(computedState)!;\n\n\tlet hoverMessage: IMarkdownString | undefined;\n\n\tlet glyphMarginClassName = ThemeIcon.asClassName(icon) + ' testing-run-glyph';\n\tif (retired) {\n\t\tglyphMarginClassName += ' retired';\n\t}\n\n\treturn {\n\t\trange: collapseRange(range),\n\t\toptions: {\n\t\t\tdescription: 'run-test-decoration',\n\t\t\tshowIfCollapsed: true,\n\t\t\tget hoverMessage() {\n\t\t\t\tif (!hoverMessage) {\n\t\t\t\t\tconst building = hoverMessage = new MarkdownString('', true).appendText(hoverMessageParts.join(', ') + '.');\n\t\t\t\t\tif (testIdWithMessages) {\n\t\t\t\t\t\tconst args = encodeURIComponent(JSON.stringify([testIdWithMessages]));\n\t\t\t\t\t\tbuilding.appendMarkdown(` [${localize('peekTestOutout', 'Peek Test Output')}](command:vscode.peekTestError?${args})`);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn hoverMessage;\n\t\t\t},\n\t\t\tglyphMarginClassName,\n\t\t\tstickiness: TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges,\n\t\t\tzIndex: 10000,\n\t\t}\n\t};\n};\n\nconst enum LensContentWidgetVars {\n\tFontFamily = 'testingDiffLensFontFamily',\n\tFontFeatures = 'testingDiffLensFontFeatures',\n}\n\nabstract class TitleLensContentWidget {\n\t/** @inheritdoc */\n\tpublic readonly allowEditorOverflow = false;\n\t/** @inheritdoc */\n\tpublic readonly suppressMouseDown = true;\n\n\tprivate readonly _domNode = dom.$('span');\n\tprivate viewZoneId?: string;\n\n\tconstructor(private readonly editor: ICodeEditor) {\n\t\tqueueMicrotask(() => {\n\t\t\tthis.applyStyling();\n\t\t\tthis.editor.addContentWidget(this);\n\t\t});\n\t}\n\n\tprivate applyStyling() {\n\t\tlet fontSize = this.editor.getOption(EditorOption.codeLensFontSize);\n\t\tlet height: number;\n\t\tif (!fontSize || fontSize < 5) {\n\t\t\tfontSize = (this.editor.getOption(EditorOption.fontSize) * .9) | 0;\n\t\t\theight = this.editor.getOption(EditorOption.lineHeight);\n\t\t} else {\n\t\t\theight = (fontSize * Math.max(1.3, this.editor.getOption(EditorOption.lineHeight) / this.editor.getOption(EditorOption.fontSize))) | 0;\n\t\t}\n\n\t\tconst editorFontInfo = this.editor.getOption(EditorOption.fontInfo);\n\t\tconst node = this._domNode;\n\t\tnode.classList.add('testing-diff-lens-widget');\n\t\tnode.textContent = this.getText();\n\t\tnode.style.lineHeight = `${height}px`;\n\t\tnode.style.fontSize = `${fontSize}px`;\n\t\tnode.style.fontFamily = `var(--${LensContentWidgetVars.FontFamily})`;\n\t\tnode.style.fontFeatureSettings = `var(--${LensContentWidgetVars.FontFeatures})`;\n\n\t\tconst containerStyle = this.editor.getContainerDomNode().style;\n\t\tcontainerStyle.setProperty(LensContentWidgetVars.FontFamily, this.editor.getOption(EditorOption.codeLensFontFamily) ?? 'inherit');\n\t\tcontainerStyle.setProperty(LensContentWidgetVars.FontFeatures, editorFontInfo.fontFeatureSettings);\n\n\t\tthis.editor.changeViewZones(accessor => {\n\t\t\tif (this.viewZoneId) {\n\t\t\t\taccessor.removeZone(this.viewZoneId);\n\t\t\t}\n\n\t\t\tthis.viewZoneId = accessor.addZone({\n\t\t\t\tafterLineNumber: 0,\n\t\t\t\tafterColumn: Constants.MAX_SAFE_SMALL_INTEGER,\n\t\t\t\tdomNode: document.createElement('div'),\n\t\t\t\theightInPx: 20,\n\t\t\t});\n\t\t});\n\t}\n\n\t/** @inheritdoc */\n\tpublic abstract getId(): string;\n\n\t/** @inheritdoc */\n\tpublic getDomNode() {\n\t\treturn this._domNode;\n\t}\n\n\t/** @inheritdoc */\n\tpublic dispose() {\n\t\tthis.editor.changeViewZones(accessor => {\n\t\t\tif (this.viewZoneId) {\n\t\t\t\taccessor.removeZone(this.viewZoneId);\n\t\t\t}\n\t\t});\n\n\t\tthis.editor.removeContentWidget(this);\n\t}\n\n\t/** @inheritdoc */\n\tpublic getPosition(): IContentWidgetPosition {\n\t\treturn {\n\t\t\tposition: { column: 0, lineNumber: 0 },\n\t\t\tpreference: [ContentWidgetPositionPreference.ABOVE],\n\t\t};\n\t}\n\n\tprotected abstract getText(): string;\n}\n\nclass ExpectedLensContentWidget extends TitleLensContentWidget {\n\tpublic getId() {\n\t\treturn 'expectedTestingLens';\n\t}\n\n\tprotected override getText() {\n\t\treturn localize('expected.title', 'Expected');\n\t}\n}\n\n\nclass ActualLensContentWidget extends TitleLensContentWidget {\n\tpublic getId() {\n\t\treturn 'actualTestingLens';\n\t}\n\n\tprotected override getText() {\n\t\treturn localize('actual.title', 'Actual');\n\t}\n}\n\nabstract class RunTestDecoration {\n\t/** @inheritdoc */\n\tpublic id = '';\n\n\tpublic get line() {\n\t\treturn this.editorDecoration.range.startLineNumber;\n\t}\n\n\tpublic get testIds() {\n\t\treturn this.tests.map(t => t.test.item.extId);\n\t}\n\n\tpublic editorDecoration: IModelDeltaDecoration;\n\tpublic displayedStates: readonly (TestResultState | undefined)[];\n\n\tconstructor(\n\t\tprotected tests: readonly {\n\t\t\ttest: IncrementalTestCollectionItem;\n\t\t\tresultItem: TestResultItem | undefined;\n\t\t}[],\n\t\tprivate visible: boolean,\n\t\tprotected readonly model: ITextModel,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@ITestService protected readonly testService: ITestService,\n\t\t@IContextMenuService protected readonly contextMenuService: IContextMenuService,\n\t\t@ICommandService protected readonly commandService: ICommandService,\n\t\t@IConfigurationService protected readonly configurationService: IConfigurationService,\n\t\t@ITestProfileService protected readonly testProfileService: ITestProfileService,\n\t\t@IContextKeyService protected readonly contextKeyService: IContextKeyService,\n\t\t@IMenuService protected readonly menuService: IMenuService,\n\t) {\n\t\tthis.displayedStates = tests.map(t => t.resultItem?.computedState);\n\t\tthis.editorDecoration = createRunTestDecoration(tests.map(t => t.test), tests.map(t => t.resultItem), visible);\n\t\tthis.editorDecoration.options.glyphMarginHoverMessage = new MarkdownString().appendText(this.getGutterLabel());\n\t}\n\n\t/** @inheritdoc */\n\tpublic click(e: IEditorMouseEvent): boolean {\n\t\tif (e.target.type !== MouseTargetType.GUTTER_GLYPH_MARGIN\n\t\t\t// handled by editor gutter context menu\n\t\t\t|| e.event.rightButton\n\t\t\t|| isMacintosh && e.event.leftButton && e.event.ctrlKey\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tswitch (getTestingConfiguration(this.configurationService, TestingConfigKeys.DefaultGutterClickAction)) {\n\t\t\tcase DefaultGutterClickAction.ContextMenu:\n\t\t\t\tthis.showContextMenu(e);\n\t\t\t\tbreak;\n\t\t\tcase DefaultGutterClickAction.Debug:\n\t\t\t\tthis.defaultDebug();\n\t\t\t\tbreak;\n\t\t\tcase DefaultGutterClickAction.Run:\n\t\t\tdefault:\n\t\t\t\tthis.defaultRun();\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Updates the decoration to match the new set of tests.\n\t * @returns true if options were changed, false otherwise\n\t */\n\tpublic replaceOptions(newTests: readonly {\n\t\ttest: IncrementalTestCollectionItem;\n\t\tresultItem: TestResultItem | undefined;\n\t}[], visible: boolean): boolean {\n\t\tconst displayedStates = newTests.map(t => t.resultItem?.computedState);\n\t\tif (visible === this.visible && equals(this.displayedStates, displayedStates)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tthis.tests = newTests;\n\t\tthis.displayedStates = displayedStates;\n\t\tthis.visible = visible;\n\t\tthis.editorDecoration.options = createRunTestDecoration(newTests.map(t => t.test), newTests.map(t => t.resultItem), visible).options;\n\t\tthis.editorDecoration.options.glyphMarginHoverMessage = new MarkdownString().appendText(this.getGutterLabel());\n\t\treturn true;\n\t}\n\n\t/**\n\t * Gets whether this decoration serves as the run button for the given test ID.\n\t */\n\tpublic isForTest(testId: string) {\n\t\treturn this.tests.some(t => t.test.item.extId === testId);\n\t}\n\n\t/**\n\t * Called when the decoration is clicked on.\n\t */\n\tabstract getContextMenuActions(): IReference<IAction[]>;\n\n\tprotected defaultRun() {\n\t\treturn this.testService.runTests({\n\t\t\ttests: this.tests.map(({ test }) => test),\n\t\t\tgroup: TestRunProfileBitset.Run,\n\t\t});\n\t}\n\n\tprotected defaultDebug() {\n\t\treturn this.testService.runTests({\n\t\t\ttests: this.tests.map(({ test }) => test),\n\t\t\tgroup: TestRunProfileBitset.Debug,\n\t\t});\n\t}\n\n\tprivate showContextMenu(e: IEditorMouseEvent) {\n\t\tconst editor = this.codeEditorService.listCodeEditors().find(e => e.getModel() === this.model);\n\t\teditor?.getContribution<EditorLineNumberContextMenu>(EditorLineNumberContextMenu.ID)?.show(e);\n\t}\n\n\tprivate getGutterLabel() {\n\t\tswitch (getTestingConfiguration(this.configurationService, TestingConfigKeys.DefaultGutterClickAction)) {\n\t\t\tcase DefaultGutterClickAction.ContextMenu:\n\t\t\t\treturn localize('testing.gutterMsg.contextMenu', 'Click for test options');\n\t\t\tcase DefaultGutterClickAction.Debug:\n\t\t\t\treturn localize('testing.gutterMsg.debug', 'Click to debug tests, right click for more options');\n\t\t\tcase DefaultGutterClickAction.Run:\n\t\t\tdefault:\n\t\t\t\treturn localize('testing.gutterMsg.run', 'Click to run tests, right click for more options');\n\t\t}\n\t}\n\n\t/**\n\t * Gets context menu actions relevant for a singel test.\n\t */\n\tprotected getTestContextMenuActions(test: InternalTestItem, resultItem?: TestResultItem): IReference<IAction[]> {\n\t\tconst testActions: IAction[] = [];\n\t\tconst capabilities = this.testProfileService.capabilitiesForTest(test);\n\t\tif (capabilities & TestRunProfileBitset.Run) {\n\t\t\ttestActions.push(new Action('testing.gutter.run', localize('run test', 'Run Test'), undefined, undefined, () => this.testService.runTests({\n\t\t\t\tgroup: TestRunProfileBitset.Run,\n\t\t\t\ttests: [test],\n\t\t\t})));\n\t\t}\n\n\t\tif (capabilities & TestRunProfileBitset.Debug) {\n\t\t\ttestActions.push(new Action('testing.gutter.debug', localize('debug test', 'Debug Test'), undefined, undefined, () => this.testService.runTests({\n\t\t\t\tgroup: TestRunProfileBitset.Debug,\n\t\t\t\ttests: [test],\n\t\t\t})));\n\t\t}\n\n\t\tif (capabilities & TestRunProfileBitset.HasNonDefaultProfile) {\n\t\t\ttestActions.push(new Action('testing.runUsing', localize('testing.runUsing', 'Execute Using Profile...'), undefined, undefined, async () => {\n\t\t\t\tconst profile: ITestRunProfile | undefined = await this.commandService.executeCommand('vscode.pickTestProfile', { onlyForTest: test });\n\t\t\t\tif (!profile) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.testService.runResolvedTests({\n\t\t\t\t\ttargets: [{\n\t\t\t\t\t\tprofileGroup: profile.group,\n\t\t\t\t\t\tprofileId: profile.profileId,\n\t\t\t\t\t\tcontrollerId: profile.controllerId,\n\t\t\t\t\t\ttestIds: [test.item.extId]\n\t\t\t\t\t}]\n\t\t\t\t});\n\t\t\t}));\n\t\t}\n\n\t\tif (resultItem && isFailedState(resultItem.computedState)) {\n\t\t\ttestActions.push(new Action('testing.gutter.peekFailure', localize('peek failure', 'Peek Error'), undefined, undefined,\n\t\t\t\t() => this.commandService.executeCommand('vscode.peekTestError', test.item.extId)));\n\t\t}\n\n\t\ttestActions.push(new Action('testing.gutter.reveal', localize('reveal test', 'Reveal in Test Explorer'), undefined, undefined,\n\t\t\t() => this.commandService.executeCommand('_revealTestInExplorer', test.item.extId)));\n\n\t\tconst contributed = this.getContributedTestActions(test, capabilities);\n\t\treturn { object: Separator.join(testActions, contributed), dispose() { } };\n\t}\n\n\tprivate getContributedTestActions(test: InternalTestItem, capabilities: number): IAction[] {\n\t\tconst contextOverlay = this.contextKeyService.createOverlay(getTestItemContextOverlay(test, capabilities));\n\t\tconst menu = this.menuService.createMenu(MenuId.TestItemGutter, contextOverlay);\n\n\t\ttry {\n\t\t\tconst target: IAction[] = [];\n\t\t\tconst arg = getContextForTestItem(this.testService.collection, test.item.extId);\n\t\t\tcreateAndFillInContextMenuActions(menu, { shouldForwardArgs: true, arg }, target);\n\t\t\treturn target;\n\t\t} finally {\n\t\t\tmenu.dispose();\n\t\t}\n\t}\n}\n\nclass MultiRunTestDecoration extends RunTestDecoration implements ITestDecoration {\n\toverride getContextMenuActions() {\n\t\tconst allActions: IAction[] = [];\n\t\tif (this.tests.some(({ test }) => this.testProfileService.capabilitiesForTest(test) & TestRunProfileBitset.Run)) {\n\t\t\tallActions.push(new Action('testing.gutter.runAll', localize('run all test', 'Run All Tests'), undefined, undefined, () => this.defaultRun()));\n\t\t}\n\n\t\tif (this.tests.some(({ test }) => this.testProfileService.capabilitiesForTest(test) & TestRunProfileBitset.Debug)) {\n\t\t\tallActions.push(new Action('testing.gutter.debugAll', localize('debug all test', 'Debug All Tests'), undefined, undefined, () => this.defaultDebug()));\n\t\t}\n\n\t\tconst testItems = this.tests.map(testItem => ({\n\t\t\tcurrentLabel: testItem.test.item.label,\n\t\t\ttestItem,\n\t\t\tparent: TestId.fromString(testItem.test.item.extId).parentId,\n\t\t}));\n\n\t\tconst getLabelConflicts = (tests: typeof testItems) => {\n\t\t\tconst labelCount = new Map<string, number>();\n\t\t\tfor (const test of tests) {\n\t\t\t\tlabelCount.set(test.currentLabel, (labelCount.get(test.currentLabel) || 0) + 1);\n\t\t\t}\n\n\t\t\treturn tests.filter(e => labelCount.get(e.currentLabel)! > 1);\n\t\t};\n\n\t\tlet conflicts, hasParent = true;\n\t\twhile ((conflicts = getLabelConflicts(testItems)).length && hasParent) {\n\t\t\tfor (const conflict of conflicts) {\n\t\t\t\tif (conflict.parent) {\n\t\t\t\t\tconst parent = this.testService.collection.getNodeById(conflict.parent.toString());\n\t\t\t\t\tconflict.currentLabel = parent?.item.label + ' > ' + conflict.currentLabel;\n\t\t\t\t\tconflict.parent = conflict.parent.parentId;\n\t\t\t\t} else {\n\t\t\t\t\thasParent = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst disposable = new DisposableStore();\n\t\tconst testSubmenus = testItems.map(({ currentLabel, testItem }) => {\n\t\t\tconst actions = this.getTestContextMenuActions(testItem.test, testItem.resultItem);\n\t\t\tdisposable.add(actions);\n\t\t\treturn new SubmenuAction(testItem.test.item.extId, stripIcons(currentLabel), actions.object);\n\t\t});\n\n\t\treturn { object: Separator.join(allActions, testSubmenus), dispose: () => disposable.dispose() };\n\t}\n}\n\nclass RunSingleTestDecoration extends RunTestDecoration implements ITestDecoration {\n\tconstructor(\n\t\ttest: IncrementalTestCollectionItem,\n\t\tresultItem: TestResultItem | undefined,\n\t\tmodel: ITextModel,\n\t\tvisible: boolean,\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@ITestService testService: ITestService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ITestProfileService testProfiles: ITestProfileService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IMenuService menuService: IMenuService,\n\t) {\n\t\tsuper([{ test, resultItem }], visible, model, codeEditorService, testService, contextMenuService, commandService, configurationService, testProfiles, contextKeyService, menuService);\n\t}\n\n\toverride getContextMenuActions() {\n\t\treturn this.getTestContextMenuActions(this.tests[0].test, this.tests[0].resultItem);\n\t}\n}\n\nconst lineBreakRe = /\\r?\\n\\s*/g;\n\nclass TestMessageDecoration implements ITestDecoration {\n\tpublic static readonly inlineClassName = 'test-message-inline-content';\n\tpublic static readonly decorationId = `testmessage-${generateUuid()}`;\n\n\tpublic id = '';\n\n\tpublic readonly editorDecoration: IModelDeltaDecoration;\n\tpublic readonly location: IRichLocation;\n\tpublic readonly line: number;\n\n\tprivate readonly contentIdClass = `test-message-inline-content-id${generateUuid()}`;\n\n\tconstructor(\n\t\tpublic readonly testMessage: ITestMessage,\n\t\tprivate readonly messageUri: URI | undefined,\n\t\ttextModel: ITextModel,\n\t\t@ITestingPeekOpener private readonly peekOpener: ITestingPeekOpener,\n\t\t@ICodeEditorService editorService: ICodeEditorService,\n\t) {\n\t\tthis.location = testMessage.location!;\n\t\tthis.line = this.location.range.startLineNumber;\n\t\tconst severity = testMessage.type;\n\t\tconst message = testMessage.message;\n\n\t\tconst options = editorService.resolveDecorationOptions(TestMessageDecoration.decorationId, true);\n\t\toptions.hoverMessage = typeof message === 'string' ? new MarkdownString().appendText(message) : message;\n\t\toptions.zIndex = 10; // todo: in spite of the z-index, this appears behind gitlens\n\t\toptions.className = `testing-inline-message-severity-${severity}`;\n\t\toptions.isWholeLine = true;\n\t\toptions.stickiness = TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges;\n\t\toptions.collapseOnReplaceEdit = true;\n\n\t\tlet inlineText = renderStringAsPlaintext(message).replace(lineBreakRe, ' ');\n\t\tif (inlineText.length > MAX_INLINE_MESSAGE_LENGTH) {\n\t\t\tinlineText = inlineText.slice(0, MAX_INLINE_MESSAGE_LENGTH - 1) + '…';\n\t\t}\n\n\t\toptions.after = {\n\t\t\tcontent: ' '.repeat(4) + inlineText,\n\t\t\tinlineClassName: `test-message-inline-content test-message-inline-content-s${severity} ${this.contentIdClass} ${messageUri ? 'test-message-inline-content-clickable' : ''}`\n\t\t};\n\t\toptions.showIfCollapsed = true;\n\n\t\tconst rulerColor = severity === TestMessageType.Error\n\t\t\t? overviewRulerError\n\t\t\t: overviewRulerInfo;\n\n\t\tif (rulerColor) {\n\t\t\toptions.overviewRuler = { color: themeColorFromId(rulerColor), position: OverviewRulerLane.Right };\n\t\t}\n\n\t\tconst lineLength = textModel.getLineLength(this.location.range.startLineNumber);\n\t\tconst column = lineLength ? (lineLength + 1) : this.location.range.endColumn;\n\t\tthis.editorDecoration = {\n\t\t\toptions,\n\t\t\trange: {\n\t\t\t\tstartLineNumber: this.location.range.startLineNumber,\n\t\t\t\tstartColumn: column,\n\t\t\t\tendColumn: column,\n\t\t\t\tendLineNumber: this.location.range.startLineNumber,\n\t\t\t}\n\t\t};\n\t}\n\n\tclick(e: IEditorMouseEvent): boolean {\n\t\tif (e.event.rightButton) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!this.messageUri) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (e.target.element?.className.includes(this.contentIdClass)) {\n\t\t\tthis.peekOpener.peekUri(this.messageUri);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tgetContextMenuActions() {\n\t\treturn { object: [], dispose: () => { } };\n\t}\n}\n"]}