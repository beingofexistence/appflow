{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/testing/browser/explorerProjections/testingObjectTree.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAShG,MAAa,IAAsC,SAAQ,iBAAyD;QAEnH;;;;;WAKG;QACI,qBAAqB,CAAC,mBAAsD;YAClF,MAAM,IAAI,GAAqC,mBAAmB,IAAI,EAAE,CAAC;YAEzE;;;eAGG;YACH,MAAM,KAAK,GAAG,CAAC,IAAwD,EAAE,MAAwC,EAAW,EAAE;gBAC7H,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,YAAY,YAAI,CAAgB,EAAE;oBACnD,OAAO,KAAK,CAAC;iBACb;gBAED,MAAM,OAAO,GAAG,YAAG,CAAI,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC7D,MAAM,MAAM,GAAG,MAAM,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;gBAChD,sFAAsF;gBACtF,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC;gBAEpF,IAAI,qBAAqB,GAAG,MAAM,CAAC,SAAS,KAAK,SAAS,CAAC;gBAC3D,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;oBACzB,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,QAAQ,EAAE;wBAClC,qBAAqB,GAAG,KAAK,CAAC,KAAK,EAAE,MAAM,CAAC,IAAI,qBAAqB,CAAC;qBACtE;iBACD;gBAED,IAAI,qBAAqB,EAAE;oBAC1B,MAAM,CAAC,QAAQ,KAAK,EAAE,CAAC;oBACvB,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,GAAG,MAAM,CAAC;iBAClC;qBAAM,IAAI,MAAM,CAAC,QAAQ,EAAE,cAAc,CAAC,OAAO,CAAC,EAAE;oBACpD,OAAO,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;iBAChC;gBAED,OAAO,qBAAqB,CAAC;YAC9B,CAAC,CAAC;YAEF,IAAI,CAAC,QAAQ,KAAK,EAAE,CAAC;YAErB,0EAA0E;YAC1E,yEAAyE;YACzE,kCAAkC;YAClC,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAE;gBAC3C,IAAI,IAAI,CAAC,OAAO,YAAY,YAAI,EAAiB;oBAChD,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,KAAK,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;wBACpE,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;qBAClB;yBAAM;wBACN,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC;wBACpF,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;qBACtB;iBACD;aACD;YAED,OAAO,IAAI,CAAC;QACb,CAAC;KACD;IA5DD,oBA4DC","file":"testingObjectTree.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITreeNode } from 'vs/base/browser/ui/tree/tree';\nimport { WorkbenchObjectTree } from 'vs/platform/list/browser/listService';\nimport { TestExplorerTreeElement, TestItemTreeElement } from 'vs/workbench/contrib/testing/browser/explorerProjections/index';\nimport { ISerializedTestTreeCollapseState } from 'vs/workbench/contrib/testing/browser/explorerProjections/testingViewState';\nimport { TestId } from 'vs/workbench/contrib/testing/common/testId';\n\n\nexport class TestingObjectTree<TFilterData = void> extends WorkbenchObjectTree<TestExplorerTreeElement, TFilterData> {\n\n\t/**\n\t * Gets a serialized view state for the tree, optimized for storage.\n\t *\n\t * @param updatePreviousState Optional previous state to mutate and update\n\t * instead of creating a new one.\n\t */\n\tpublic getOptimizedViewState(updatePreviousState?: ISerializedTestTreeCollapseState): ISerializedTestTreeCollapseState {\n\t\tconst root: ISerializedTestTreeCollapseState = updatePreviousState || {};\n\n\t\t/**\n\t\t * Recursive builder function. Returns whether the subtree has any non-default\n\t\t * value. Adds itself to the parent children if it does.\n\t\t */\n\t\tconst build = (node: ITreeNode<TestExplorerTreeElement | null, unknown>, parent: ISerializedTestTreeCollapseState): boolean => {\n\t\t\tif (!(node.element instanceof TestItemTreeElement)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst localId = TestId.localId(node.element.test.item.extId);\n\t\t\tconst inTree = parent.children?.[localId] || {};\n\t\t\t// only saved collapsed state if it's not the default (not collapsed, or a root depth)\n\t\t\tinTree.collapsed = node.depth === 0 || !node.collapsed ? node.collapsed : undefined;\n\n\t\t\tlet hasAnyNonDefaultValue = inTree.collapsed !== undefined;\n\t\t\tif (node.children.length) {\n\t\t\t\tfor (const child of node.children) {\n\t\t\t\t\thasAnyNonDefaultValue = build(child, inTree) || hasAnyNonDefaultValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (hasAnyNonDefaultValue) {\n\t\t\t\tparent.children ??= {};\n\t\t\t\tparent.children[localId] = inTree;\n\t\t\t} else if (parent.children?.hasOwnProperty(localId)) {\n\t\t\t\tdelete parent.children[localId];\n\t\t\t}\n\n\t\t\treturn hasAnyNonDefaultValue;\n\t\t};\n\n\t\troot.children ??= {};\n\n\t\t// Controller IDs are hidden if there's only a single test controller, but\n\t\t// make sure they're added when the tree is built if this is the case, so\n\t\t// that the later ID lookup works.\n\t\tfor (const node of this.getNode().children) {\n\t\t\tif (node.element instanceof TestItemTreeElement) {\n\t\t\t\tif (node.element.test.controllerId === node.element.test.item.extId) {\n\t\t\t\t\tbuild(node, root);\n\t\t\t\t} else {\n\t\t\t\t\tconst ctrlNode = root.children[node.element.test.controllerId] ??= { children: {} };\n\t\t\t\t\tbuild(node, ctrlNode);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn root;\n\t}\n}\n"]}