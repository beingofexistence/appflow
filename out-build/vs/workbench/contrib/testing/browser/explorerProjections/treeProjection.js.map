{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/testing/browser/explorerProjections/treeProjection.ts"],"names":[],"mappings":"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","file":"treeProjection.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ObjectTree } from 'vs/base/browser/ui/tree/objectTree';\nimport { Emitter } from 'vs/base/common/event';\nimport { FuzzyScore } from 'vs/base/common/filters';\nimport { Iterable } from 'vs/base/common/iterator';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ITestTreeProjection, TestExplorerTreeElement, TestItemTreeElement, TestTreeErrorMessage, getChildrenForParent, testIdentityProvider } from 'vs/workbench/contrib/testing/browser/explorerProjections/index';\nimport { ISerializedTestTreeCollapseState, isCollapsedInSerializedTestTree } from 'vs/workbench/contrib/testing/browser/explorerProjections/testingViewState';\nimport { IComputedStateAndDurationAccessor, refreshComputedState } from 'vs/workbench/contrib/testing/common/getComputedState';\nimport { TestId } from 'vs/workbench/contrib/testing/common/testId';\nimport { TestResultItemChangeReason } from 'vs/workbench/contrib/testing/common/testResult';\nimport { ITestResultService } from 'vs/workbench/contrib/testing/common/testResultService';\nimport { ITestService } from 'vs/workbench/contrib/testing/common/testService';\nimport { ITestItemUpdate, InternalTestItem, TestDiffOpType, TestItemExpandState, TestResultState, TestsDiff, applyTestItemUpdate } from 'vs/workbench/contrib/testing/common/testTypes';\n\nconst computedStateAccessor: IComputedStateAndDurationAccessor<TreeTestItemElement> = {\n\tgetOwnState: i => i instanceof TestItemTreeElement ? i.ownState : TestResultState.Unset,\n\tgetCurrentComputedState: i => i.state,\n\tsetComputedState: (i, s) => i.state = s,\n\n\tgetCurrentComputedDuration: i => i.duration,\n\tgetOwnDuration: i => i instanceof TestItemTreeElement ? i.ownDuration : undefined,\n\tsetComputedDuration: (i, d) => i.duration = d,\n\n\tgetChildren: i => Iterable.filter(\n\t\ti.children.values(),\n\t\t(t): t is TreeTestItemElement => t instanceof TreeTestItemElement,\n\t),\n\t*getParents(i) {\n\t\tfor (let parent = i.parent; parent; parent = parent.parent) {\n\t\t\tyield parent as TreeTestItemElement;\n\t\t}\n\t},\n};\n\n/**\n * Test tree element element that groups be hierarchy.\n */\nclass TreeTestItemElement extends TestItemTreeElement {\n\t/**\n\t * Own, non-computed state.\n\t * @internal\n\t */\n\tpublic ownState = TestResultState.Unset;\n\n\t/**\n\t * Own, non-computed duration.\n\t * @internal\n\t */\n\tpublic ownDuration: number | undefined;\n\n\tpublic override get description() {\n\t\treturn this.test.item.description;\n\t}\n\n\tprivate errorChild?: TestTreeErrorMessage;\n\n\tconstructor(\n\t\ttest: InternalTestItem,\n\t\tparent: null | TreeTestItemElement,\n\t\tprotected readonly addedOrRemoved: (n: TestItemTreeElement) => void,\n\t) {\n\t\tsuper({ ...test, item: { ...test.item } }, parent);\n\t\tthis.updateErrorVisibility();\n\t}\n\n\tpublic update(patch: ITestItemUpdate) {\n\t\tapplyTestItemUpdate(this.test, patch);\n\t\tthis.updateErrorVisibility(patch);\n\t\tthis.fireChange();\n\t}\n\n\tpublic fireChange() {\n\t\tthis.changeEmitter.fire();\n\t}\n\n\tprivate updateErrorVisibility(patch?: ITestItemUpdate) {\n\t\tif (this.errorChild && (!this.test.item.error || patch?.item?.error)) {\n\t\t\tthis.addedOrRemoved(this);\n\t\t\tthis.children.delete(this.errorChild);\n\t\t\tthis.errorChild = undefined;\n\t\t}\n\t\tif (this.test.item.error && !this.errorChild) {\n\t\t\tthis.errorChild = new TestTreeErrorMessage(this.test.item.error, this);\n\t\t\tthis.children.add(this.errorChild);\n\t\t\tthis.addedOrRemoved(this);\n\t\t}\n\t}\n}\n\n/**\n * Projection that lists tests in their traditional tree view.\n */\nexport class TreeProjection extends Disposable implements ITestTreeProjection {\n\tprivate readonly updateEmitter = new Emitter<void>();\n\n\tprivate readonly changedParents = new Set<TestItemTreeElement | null>();\n\tprivate readonly resortedParents = new Set<TestItemTreeElement | null>();\n\n\tprivate readonly items = new Map<string, TreeTestItemElement>();\n\n\t/**\n\t * Gets root elements of the tree.\n\t */\n\tprivate get rootsWithChildren(): Iterable<TreeTestItemElement> {\n\t\tconst rootsIt = Iterable.map(this.testService.collection.rootItems, r => this.items.get(r.item.extId));\n\t\treturn Iterable.filter(rootsIt, (r): r is TreeTestItemElement => !!r?.children.size);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly onUpdate = this.updateEmitter.event;\n\n\tconstructor(\n\t\tpublic lastState: ISerializedTestTreeCollapseState,\n\t\t@ITestService private readonly testService: ITestService,\n\t\t@ITestResultService private readonly results: ITestResultService,\n\t) {\n\t\tsuper();\n\t\tthis._register(testService.onDidProcessDiff((diff) => this.applyDiff(diff)));\n\n\t\t// when test results are cleared, recalculate all state\n\t\tthis._register(results.onResultsChanged((evt) => {\n\t\t\tif (!('removed' in evt)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const inTree of [...this.items.values()].sort((a, b) => b.depth - a.depth)) {\n\t\t\t\tconst lookup = this.results.getStateById(inTree.test.item.extId)?.[1];\n\t\t\t\tinTree.ownDuration = lookup?.ownDuration;\n\t\t\t\trefreshComputedState(computedStateAccessor, inTree, lookup?.ownComputedState ?? TestResultState.Unset).forEach(i => i.fireChange());\n\t\t\t}\n\t\t}));\n\n\t\t// when test states change, reflect in the tree\n\t\tthis._register(results.onTestChanged(ev => {\n\t\t\tif (ev.reason === TestResultItemChangeReason.NewMessage) {\n\t\t\t\treturn; // no effect in the tree\n\t\t\t}\n\n\t\t\tlet result = ev.item;\n\t\t\t// if the state is unset, or the latest run is not making the change,\n\t\t\t// double check that it's valid. Retire calls might cause previous\n\t\t\t// emit a state change for a test run that's already long completed.\n\t\t\tif (result.ownComputedState === TestResultState.Unset || ev.result !== results.results[0]) {\n\t\t\t\tconst fallback = results.getStateById(result.item.extId);\n\t\t\t\tif (fallback) {\n\t\t\t\t\tresult = fallback[1];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst item = this.items.get(result.item.extId);\n\t\t\tif (!item) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Skip refreshing the duration if we can trivially tell it didn't change.\n\t\t\tconst refreshDuration = ev.reason === TestResultItemChangeReason.OwnStateChange && ev.previousOwnDuration !== result.ownDuration;\n\t\t\t// For items without children, always use the computed state. They are\n\t\t\t// either leaves (for which it's fine) or nodes where we haven't expanded\n\t\t\t// children and should trust whatever the result service gives us.\n\t\t\tconst explicitComputed = item.children.size ? undefined : result.computedState;\n\n\t\t\titem.retired = !!result.retired;\n\t\t\titem.ownState = result.ownComputedState;\n\t\t\titem.ownDuration = result.ownDuration;\n\t\t\titem.fireChange();\n\n\t\t\trefreshComputedState(computedStateAccessor, item, explicitComputed, refreshDuration).forEach(i => i.fireChange());\n\t\t}));\n\n\t\tfor (const test of testService.collection.all) {\n\t\t\tthis.storeItem(this.createItem(test));\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic getElementByTestId(testId: string): TestItemTreeElement | undefined {\n\t\treturn this.items.get(testId);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tprivate applyDiff(diff: TestsDiff) {\n\t\tfor (const op of diff) {\n\t\t\tswitch (op.op) {\n\t\t\t\tcase TestDiffOpType.Add: {\n\t\t\t\t\tconst item = this.createItem(op.item);\n\t\t\t\t\tthis.storeItem(item);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcase TestDiffOpType.Update: {\n\t\t\t\t\tconst patch = op.item;\n\t\t\t\t\tconst existing = this.items.get(patch.extId);\n\t\t\t\t\tif (!existing) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// parent needs to be re-rendered on an expand update, so that its\n\t\t\t\t\t// children are rewritten.\n\t\t\t\t\tconst needsParentUpdate = existing.test.expand === TestItemExpandState.NotExpandable && patch.expand;\n\t\t\t\t\texisting.update(patch);\n\t\t\t\t\tif (needsParentUpdate) {\n\t\t\t\t\t\tthis.changedParents.add(existing.parent);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.resortedParents.add(existing.parent);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcase TestDiffOpType.Remove: {\n\t\t\t\t\tconst toRemove = this.items.get(op.itemId);\n\t\t\t\t\tif (!toRemove) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\t// The first element will cause the root to be hidden\n\t\t\t\t\tconst affectsRootElement = toRemove.depth === 1 && toRemove.parent?.children.size === 1;\n\t\t\t\t\tthis.changedParents.add(affectsRootElement ? null : toRemove.parent);\n\n\t\t\t\t\tconst queue: Iterable<TestExplorerTreeElement>[] = [[toRemove]];\n\t\t\t\t\twhile (queue.length) {\n\t\t\t\t\t\tfor (const item of queue.pop()!) {\n\t\t\t\t\t\t\tif (item instanceof TreeTestItemElement) {\n\t\t\t\t\t\t\t\tqueue.push(this.unstoreItem(item));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (diff.length !== 0) {\n\t\t\tthis.updateEmitter.fire();\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic applyTo(tree: ObjectTree<TestExplorerTreeElement, FuzzyScore>) {\n\t\tfor (const s of [this.changedParents, this.resortedParents]) {\n\t\t\tfor (const element of s) {\n\t\t\t\tif (element && !tree.hasElement(element)) {\n\t\t\t\t\ts.delete(element);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const parent of this.changedParents) {\n\t\t\ttree.setChildren(parent, getChildrenForParent(this.lastState, this.rootsWithChildren, parent), { diffIdentityProvider: testIdentityProvider });\n\t\t}\n\n\t\tfor (const parent of this.resortedParents) {\n\t\t\ttree.resort(parent, false);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic expandElement(element: TestItemTreeElement, depth: number): void {\n\t\tif (!(element instanceof TreeTestItemElement)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (element.test.expand === TestItemExpandState.NotExpandable) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.testService.collection.expand(element.test.item.extId, depth);\n\t}\n\n\tprivate createItem(item: InternalTestItem): TreeTestItemElement {\n\t\tconst parentId = TestId.parentId(item.item.extId);\n\t\tconst parent = parentId ? this.items.get(parentId)! : null;\n\t\treturn new TreeTestItemElement(item, parent, n => this.changedParents.add(n));\n\t}\n\n\tprivate unstoreItem(treeElement: TreeTestItemElement) {\n\t\tconst parent = treeElement.parent;\n\t\tparent?.children.delete(treeElement);\n\t\tthis.items.delete(treeElement.test.item.extId);\n\t\tif (parent instanceof TreeTestItemElement) {\n\t\t\trefreshComputedState(computedStateAccessor, parent, undefined, !!treeElement.duration).forEach(i => i.fireChange());\n\t\t}\n\n\t\treturn treeElement.children;\n\t}\n\n\tprivate storeItem(treeElement: TreeTestItemElement) {\n\t\ttreeElement.parent?.children.add(treeElement);\n\t\tthis.items.set(treeElement.test.item.extId, treeElement);\n\n\t\t// The first element will cause the root to be shown\n\t\tconst affectsRootElement = treeElement.depth === 1 && treeElement.parent?.children.size === 1;\n\t\tthis.changedParents.add(affectsRootElement ? null : treeElement.parent);\n\n\t\tif (treeElement.depth === 0 || isCollapsedInSerializedTestTree(this.lastState, treeElement.test.item.extId) === false) {\n\t\t\tthis.expandElement(treeElement, 0);\n\t\t}\n\n\t\tconst prevState = this.results.getStateById(treeElement.test.item.extId)?.[1];\n\t\tif (prevState) {\n\t\t\ttreeElement.retired = !!prevState.retired;\n\t\t\ttreeElement.ownState = prevState.computedState;\n\t\t\ttreeElement.ownDuration = prevState.ownDuration;\n\n\t\t\trefreshComputedState(computedStateAccessor, treeElement, undefined, !!treeElement.ownDuration).forEach(i => i.fireChange());\n\t\t}\n\t}\n}\n"]}