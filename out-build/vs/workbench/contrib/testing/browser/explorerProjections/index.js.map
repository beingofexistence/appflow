{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/testing/browser/explorerProjections/index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IIdentityProvider } from 'vs/base/browser/ui/list/list';\nimport { ObjectTree } from 'vs/base/browser/ui/tree/objectTree';\nimport { IObjectTreeElement, ObjectTreeElementCollapseState } from 'vs/base/browser/ui/tree/tree';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { FuzzyScore } from 'vs/base/common/filters';\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\nimport { Iterable } from 'vs/base/common/iterator';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { MarshalledId } from 'vs/base/common/marshallingIds';\nimport { ISerializedTestTreeCollapseState, isCollapsedInSerializedTestTree } from 'vs/workbench/contrib/testing/browser/explorerProjections/testingViewState';\nimport { ITestItemContext, InternalTestItem, TestItemExpandState, TestResultState } from 'vs/workbench/contrib/testing/common/testTypes';\n\n/**\n * Describes a rendering of tests in the explorer view. Different\n * implementations of this are used for trees and lists, and groupings.\n * Originally this was implemented as inline logic within the ViewModel and\n * using a single IncrementalTestChangeCollector, but this became hairy\n * with status projections.\n */\nexport interface ITestTreeProjection extends IDisposable {\n\t/**\n\t * Event that fires when the projection changes.\n\t */\n\tonUpdate: Event<void>;\n\n\t/**\n\t * State to use for applying default collapse state of items.\n\t */\n\tlastState: ISerializedTestTreeCollapseState;\n\n\t/**\n\t * Fired when an element in the tree is expanded.\n\t */\n\texpandElement(element: TestItemTreeElement, depth: number): void;\n\n\t/**\n\t * Gets an element by its extension-assigned ID.\n\t */\n\tgetElementByTestId(testId: string): TestItemTreeElement | undefined;\n\n\t/**\n\t * Applies pending update to the tree.\n\t */\n\tapplyTo(tree: ObjectTree<TestExplorerTreeElement, FuzzyScore>): void;\n}\n\nlet idCounter = 0;\n\nconst getId = () => String(idCounter++);\n\nexport abstract class TestItemTreeElement {\n\tprotected readonly changeEmitter = new Emitter<void>();\n\n\t/**\n\t * Fired whenever the element or test properties change.\n\t */\n\tpublic readonly onChange = this.changeEmitter.event;\n\n\t/**\n\t * Tree children of this item.\n\t */\n\tpublic readonly children = new Set<TestExplorerTreeElement>();\n\n\t/**\n\t * Unique ID of the element in the tree.\n\t */\n\tpublic readonly treeId = getId();\n\n\t/**\n\t * Depth of the element in the tree.\n\t */\n\tpublic depth: number = this.parent ? this.parent.depth + 1 : 0;\n\n\t/**\n\t * Whether the node's test result is 'retired' -- from an outdated test run.\n\t */\n\tpublic retired = false;\n\n\t/**\n\t * State to show on the item. This is generally the item's computed state\n\t * from its children.\n\t */\n\tpublic state = TestResultState.Unset;\n\n\t/**\n\t * Time it took this test/item to run.\n\t */\n\tpublic duration: number | undefined;\n\n\t/**\n\t * Tree element description.\n\t */\n\tpublic abstract description: string | null;\n\n\tconstructor(\n\t\tpublic readonly test: InternalTestItem,\n\t\t/**\n\t\t * Parent tree item. May not actually be the test item who owns this one\n\t\t * in a 'flat' projection.\n\t\t */\n\t\tpublic readonly parent: TestItemTreeElement | null = null,\n\t) { }\n\n\tpublic toJSON() {\n\t\tif (this.depth === 0) {\n\t\t\treturn { controllerId: this.test.controllerId };\n\t\t}\n\n\t\tconst context: ITestItemContext = {\n\t\t\t$mid: MarshalledId.TestItemContext,\n\t\t\ttests: [InternalTestItem.serialize(this.test)],\n\t\t};\n\n\t\tfor (let p = this.parent; p && p.depth > 0; p = p.parent) {\n\t\t\tcontext.tests.unshift(InternalTestItem.serialize(p.test));\n\t\t}\n\n\t\treturn context;\n\t}\n}\n\nexport class TestTreeErrorMessage {\n\tpublic readonly treeId = getId();\n\tpublic readonly children = new Set<never>();\n\n\tpublic get description() {\n\t\treturn typeof this.message === 'string' ? this.message : this.message.value;\n\t}\n\n\tconstructor(\n\t\tpublic readonly message: string | IMarkdownString,\n\t\tpublic readonly parent: TestExplorerTreeElement,\n\t) { }\n}\n\nexport type TestExplorerTreeElement = TestItemTreeElement | TestTreeErrorMessage;\n\nexport const testIdentityProvider: IIdentityProvider<TestExplorerTreeElement> = {\n\tgetId(element) {\n\t\treturn element.treeId + '\\0' + (element instanceof TestTreeErrorMessage ? 'error' : element.test.expand);\n\t}\n};\n\nexport const getChildrenForParent = (serialized: ISerializedTestTreeCollapseState, rootsWithChildren: Iterable<TestExplorerTreeElement>, node: TestExplorerTreeElement | null): Iterable<IObjectTreeElement<TestExplorerTreeElement>> => {\n\tlet it: Iterable<TestExplorerTreeElement>;\n\tif (node === null) { // roots\n\t\tconst rootsWithChildrenArr = [...rootsWithChildren];\n\t\tif (rootsWithChildrenArr.length === 1) {\n\t\t\treturn getChildrenForParent(serialized, rootsWithChildrenArr, rootsWithChildrenArr[0]);\n\t\t}\n\t\tit = rootsWithChildrenArr;\n\t} else {\n\t\tit = node.children;\n\t}\n\n\treturn Iterable.map(it, element => (\n\t\telement instanceof TestTreeErrorMessage\n\t\t\t? { element }\n\t\t\t: {\n\t\t\t\telement,\n\t\t\t\tcollapsible: element.test.expand !== TestItemExpandState.NotExpandable,\n\t\t\t\tcollapsed: isCollapsedInSerializedTestTree(serialized, element.test.item.extId) ?? element.depth > 0\n\t\t\t\t\t? ObjectTreeElementCollapseState.PreserveOrCollapsed\n\t\t\t\t\t: ObjectTreeElementCollapseState.PreserveOrExpanded,\n\t\t\t\tchildren: getChildrenForParent(serialized, rootsWithChildren, element),\n\t\t\t}\n\t));\n};\n"]}