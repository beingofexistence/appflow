{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/testing/browser/explorerProjections/listProjection.ts"],"names":[],"mappings":"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","file":"listProjection.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ObjectTree } from 'vs/base/browser/ui/tree/objectTree';\nimport { Emitter } from 'vs/base/common/event';\nimport { FuzzyScore } from 'vs/base/common/filters';\nimport { Iterable } from 'vs/base/common/iterator';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { flatTestItemDelimiter } from 'vs/workbench/contrib/testing/browser/explorerProjections/display';\nimport { ITestTreeProjection, TestExplorerTreeElement, TestItemTreeElement, TestTreeErrorMessage, getChildrenForParent, testIdentityProvider } from 'vs/workbench/contrib/testing/browser/explorerProjections/index';\nimport { ISerializedTestTreeCollapseState, isCollapsedInSerializedTestTree } from 'vs/workbench/contrib/testing/browser/explorerProjections/testingViewState';\nimport { TestId } from 'vs/workbench/contrib/testing/common/testId';\nimport { TestResultItemChangeReason } from 'vs/workbench/contrib/testing/common/testResult';\nimport { ITestResultService } from 'vs/workbench/contrib/testing/common/testResultService';\nimport { ITestService } from 'vs/workbench/contrib/testing/common/testService';\nimport { ITestItemUpdate, InternalTestItem, TestDiffOpType, TestItemExpandState, TestResultState, TestsDiff, applyTestItemUpdate } from 'vs/workbench/contrib/testing/common/testTypes';\n\n/**\n * Test tree element element that groups be hierarchy.\n */\nclass ListTestItemElement extends TestItemTreeElement {\n\tprivate errorChild?: TestTreeErrorMessage;\n\n\tpublic descriptionParts: string[] = [];\n\n\tpublic override get description() {\n\t\treturn this.chain.map(c => c.item.label).join(flatTestItemDelimiter);\n\t}\n\n\tconstructor(\n\t\ttest: InternalTestItem,\n\t\tparent: null | ListTestItemElement,\n\t\tprivate readonly chain: InternalTestItem[],\n\t) {\n\t\tsuper({ ...test, item: { ...test.item } }, parent);\n\t\tthis.updateErrorVisibility();\n\t}\n\n\tpublic update(patch: ITestItemUpdate) {\n\t\tapplyTestItemUpdate(this.test, patch);\n\t\tthis.updateErrorVisibility(patch);\n\t\tthis.fireChange();\n\t}\n\n\tpublic fireChange() {\n\t\tthis.changeEmitter.fire();\n\t}\n\n\tprivate updateErrorVisibility(patch?: ITestItemUpdate) {\n\t\tif (this.errorChild && (!this.test.item.error || patch?.item?.error)) {\n\t\t\tthis.children.delete(this.errorChild);\n\t\t\tthis.errorChild = undefined;\n\t\t}\n\t\tif (this.test.item.error && !this.errorChild) {\n\t\t\tthis.errorChild = new TestTreeErrorMessage(this.test.item.error, this);\n\t\t\tthis.children.add(this.errorChild);\n\t\t}\n\t}\n}\n\n\n/**\n * Projection that lists tests in their traditional tree view.\n */\nexport class ListProjection extends Disposable implements ITestTreeProjection {\n\tprivate readonly updateEmitter = new Emitter<void>();\n\tprivate readonly items = new Map<string, ListTestItemElement>();\n\n\t/**\n\t * Gets root elements of the tree.\n\t */\n\tprivate get rootsWithChildren(): Iterable<ListTestItemElement> {\n\t\tconst rootsIt = Iterable.map(this.testService.collection.rootItems, r => this.items.get(r.item.extId));\n\t\treturn Iterable.filter(rootsIt, (r): r is ListTestItemElement => !!r?.children.size);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly onUpdate = this.updateEmitter.event;\n\n\tconstructor(\n\t\tpublic lastState: ISerializedTestTreeCollapseState,\n\t\t@ITestService private readonly testService: ITestService,\n\t\t@ITestResultService private readonly results: ITestResultService,\n\t) {\n\t\tsuper();\n\t\tthis._register(testService.onDidProcessDiff((diff) => this.applyDiff(diff)));\n\n\t\t// when test results are cleared, recalculate all state\n\t\tthis._register(results.onResultsChanged((evt) => {\n\t\t\tif (!('removed' in evt)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfor (const inTree of this.items.values()) {\n\t\t\t\t// Simple logic here, because we know in this projection states\n\t\t\t\t// are never inherited.\n\t\t\t\tconst lookup = this.results.getStateById(inTree.test.item.extId)?.[1];\n\t\t\t\tinTree.duration = lookup?.ownDuration;\n\t\t\t\tinTree.state = lookup?.ownComputedState || TestResultState.Unset;\n\t\t\t\tinTree.fireChange();\n\t\t\t}\n\t\t}));\n\n\t\t// when test states change, reflect in the tree\n\t\tthis._register(results.onTestChanged(ev => {\n\t\t\tif (ev.reason === TestResultItemChangeReason.NewMessage) {\n\t\t\t\treturn; // no effect in the tree\n\t\t\t}\n\n\t\t\tlet result = ev.item;\n\t\t\t// if the state is unset, or the latest run is not making the change,\n\t\t\t// double check that it's valid. Retire calls might cause previous\n\t\t\t// emit a state change for a test run that's already long completed.\n\t\t\tif (result.ownComputedState === TestResultState.Unset || ev.result !== results.results[0]) {\n\t\t\t\tconst fallback = results.getStateById(result.item.extId);\n\t\t\t\tif (fallback) {\n\t\t\t\t\tresult = fallback[1];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst item = this.items.get(result.item.extId);\n\t\t\tif (!item) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\titem.retired = !!result.retired;\n\t\t\titem.state = result.computedState;\n\t\t\titem.duration = result.ownDuration;\n\t\t\titem.fireChange();\n\t\t}));\n\n\t\tfor (const test of testService.collection.all) {\n\t\t\tthis.storeItem(test);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic getElementByTestId(testId: string): TestItemTreeElement | undefined {\n\t\treturn this.items.get(testId);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tprivate applyDiff(diff: TestsDiff) {\n\t\tfor (const op of diff) {\n\t\t\tswitch (op.op) {\n\t\t\t\tcase TestDiffOpType.Add: {\n\t\t\t\t\tthis.storeItem(op.item);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcase TestDiffOpType.Update: {\n\t\t\t\t\tthis.items.get(op.item.extId)?.update(op.item);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcase TestDiffOpType.Remove: {\n\t\t\t\t\tfor (const [id, item] of this.items) {\n\t\t\t\t\t\tif (id === op.itemId || TestId.isChild(op.itemId, id)) {\n\t\t\t\t\t\t\tthis.unstoreItem(item);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (diff.length !== 0) {\n\t\t\tthis.updateEmitter.fire();\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic applyTo(tree: ObjectTree<TestExplorerTreeElement, FuzzyScore>) {\n\t\t// We don't bother doing a very specific update like we do in the TreeProjection.\n\t\t// It's a flat list, so chances are we need to render everything anyway.\n\t\t// Let the diffIdentityProvider handle that.\n\t\ttree.setChildren(null, getChildrenForParent(this.lastState, this.rootsWithChildren, null), {\n\t\t\tdiffIdentityProvider: testIdentityProvider,\n\t\t\tdiffDepth: Infinity\n\t\t});\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic expandElement(element: TestItemTreeElement, depth: number): void {\n\t\tif (!(element instanceof ListTestItemElement)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (element.test.expand === TestItemExpandState.NotExpandable) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.testService.collection.expand(element.test.item.extId, depth);\n\t}\n\n\tprivate unstoreItem(treeElement: ListTestItemElement) {\n\t\tthis.items.delete(treeElement.test.item.extId);\n\t\ttreeElement.parent?.children.delete(treeElement);\n\n\t\tconst parentId = TestId.fromString(treeElement.test.item.extId).parentId;\n\t\tif (!parentId) {\n\t\t\treturn;\n\t\t}\n\n\t\t// create the parent if it's now its own leaf\n\t\tfor (const id of parentId.idsToRoot()) {\n\t\t\tconst parentTest = this.testService.collection.getNodeById(id.toString());\n\t\t\tif (parentTest) {\n\t\t\t\tif (parentTest.children.size === 0 && !this.items.has(id.toString())) {\n\t\t\t\t\tthis._storeItem(parentId, parentTest);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _storeItem(testId: TestId, item: InternalTestItem) {\n\t\tconst displayedParent = testId.isRoot ? null : this.items.get(item.controllerId)!;\n\t\tconst chain = [...testId.idsFromRoot()].slice(1, -1).map(id => this.testService.collection.getNodeById(id.toString())!);\n\t\tconst treeElement = new ListTestItemElement(item, displayedParent, chain);\n\t\tdisplayedParent?.children.add(treeElement);\n\t\tthis.items.set(treeElement.test.item.extId, treeElement);\n\n\t\tif (treeElement.depth === 0 || isCollapsedInSerializedTestTree(this.lastState, treeElement.test.item.extId) === false) {\n\t\t\tthis.expandElement(treeElement, Infinity);\n\t\t}\n\n\t\tconst prevState = this.results.getStateById(treeElement.test.item.extId)?.[1];\n\t\tif (prevState) {\n\t\t\ttreeElement.retired = !!prevState.retired;\n\t\t\ttreeElement.state = prevState.computedState;\n\t\t\ttreeElement.duration = prevState.ownDuration;\n\t\t}\n\t}\n\n\tprivate storeItem(item: InternalTestItem) {\n\t\tconst testId = TestId.fromString(item.item.extId);\n\n\t\t// Remove any non-root parent of this item which is no longer a leaf.\n\t\tfor (const parentId of testId.idsToRoot()) {\n\t\t\tif (!parentId.isRoot) {\n\t\t\t\tconst prevParent = this.items.get(parentId.toString());\n\t\t\t\tif (prevParent) {\n\t\t\t\t\tthis.unstoreItem(prevParent);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._storeItem(testId, item);\n\t}\n}\n"]}