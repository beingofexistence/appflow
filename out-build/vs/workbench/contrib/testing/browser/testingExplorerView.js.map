{"version":3,"sources":["vs/workbench/contrib/testing/browser/testingExplorerView.ts"],"names":[],"mappings":"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","file":"testingExplorerView.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from 'vs/base/browser/dom';\nimport { IKeyboardEvent } from 'vs/base/browser/keyboardEvent';\nimport { ActionBar, IActionViewItem } from 'vs/base/browser/ui/actionbar/actionbar';\nimport { Button } from 'vs/base/browser/ui/button/button';\nimport { renderLabelWithIcons } from 'vs/base/browser/ui/iconLabel/iconLabels';\nimport { IIdentityProvider, IKeyboardNavigationLabelProvider, IListVirtualDelegate } from 'vs/base/browser/ui/list/list';\nimport { DefaultKeyboardNavigationDelegate, IListAccessibilityProvider } from 'vs/base/browser/ui/list/listWidget';\nimport { ITreeContextMenuEvent, ITreeFilter, ITreeNode, ITreeRenderer, ITreeSorter, TreeFilterResult, TreeVisibility } from 'vs/base/browser/ui/tree/tree';\nimport { Action, ActionRunner, IAction, Separator } from 'vs/base/common/actions';\nimport { mapFindFirst } from 'vs/base/common/arraysFind';\nimport { RunOnceScheduler, disposableTimeout } from 'vs/base/common/async';\nimport { Color, RGBA } from 'vs/base/common/color';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { FuzzyScore } from 'vs/base/common/filters';\nimport { KeyCode } from 'vs/base/common/keyCodes';\nimport { Disposable, DisposableStore, MutableDisposable } from 'vs/base/common/lifecycle';\nimport { fuzzyContains } from 'vs/base/common/strings';\nimport { ThemeIcon } from 'vs/base/common/themables';\nimport { isDefined } from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport 'vs/css!./media/testing';\nimport { MarkdownRenderer } from 'vs/editor/contrib/markdownRenderer/browser/markdownRenderer';\nimport { localize } from 'vs/nls';\nimport { DropdownWithPrimaryActionViewItem } from 'vs/platform/actions/browser/dropdownWithPrimaryActionViewItem';\nimport { MenuEntryActionViewItem, createActionViewItem, createAndFillInActionBarActions } from 'vs/platform/actions/browser/menuEntryActionViewItem';\nimport { IMenuService, MenuId, MenuItemAction } from 'vs/platform/actions/common/actions';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { UnmanagedProgress } from 'vs/platform/progress/common/progress';\nimport { IStorageService, StorageScope, StorageTarget, WillSaveStateReason } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { defaultButtonStyles } from 'vs/platform/theme/browser/defaultStyles';\nimport { foreground } from 'vs/platform/theme/common/colorRegistry';\nimport { spinningLoading } from 'vs/platform/theme/common/iconRegistry';\nimport { IThemeService, registerThemingParticipant } from 'vs/platform/theme/common/themeService';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { registerNavigableContainer } from 'vs/workbench/browser/actions/widgetNavigationCommands';\nimport { ViewPane } from 'vs/workbench/browser/parts/views/viewPane';\nimport { IViewletViewOptions } from 'vs/workbench/browser/parts/views/viewsViewlet';\nimport { DiffEditorInput } from 'vs/workbench/common/editor/diffEditorInput';\nimport { IViewDescriptorService } from 'vs/workbench/common/views';\nimport { ITestTreeProjection, TestExplorerTreeElement, TestItemTreeElement, TestTreeErrorMessage } from 'vs/workbench/contrib/testing/browser/explorerProjections/index';\nimport { ListProjection } from 'vs/workbench/contrib/testing/browser/explorerProjections/listProjection';\nimport { getTestItemContextOverlay } from 'vs/workbench/contrib/testing/browser/explorerProjections/testItemContextOverlay';\nimport { TestingObjectTree } from 'vs/workbench/contrib/testing/browser/explorerProjections/testingObjectTree';\nimport { ISerializedTestTreeCollapseState } from 'vs/workbench/contrib/testing/browser/explorerProjections/testingViewState';\nimport { TreeProjection } from 'vs/workbench/contrib/testing/browser/explorerProjections/treeProjection';\nimport * as icons from 'vs/workbench/contrib/testing/browser/icons';\nimport { DebugLastRun, ReRunLastRun } from 'vs/workbench/contrib/testing/browser/testExplorerActions';\nimport { TestingExplorerFilter } from 'vs/workbench/contrib/testing/browser/testingExplorerFilter';\nimport { CountSummary, collectTestStateCounts, getTestProgressText } from 'vs/workbench/contrib/testing/browser/testingProgressUiService';\nimport { TestingConfigKeys, TestingCountBadge, getTestingConfiguration } from 'vs/workbench/contrib/testing/common/configuration';\nimport { TestCommandId, TestExplorerViewMode, TestExplorerViewSorting, Testing, labelForTestInState } from 'vs/workbench/contrib/testing/common/constants';\nimport { StoredValue } from 'vs/workbench/contrib/testing/common/storedValue';\nimport { ITestExplorerFilterState, TestExplorerFilterState, TestFilterTerm } from 'vs/workbench/contrib/testing/common/testExplorerFilterState';\nimport { TestId } from 'vs/workbench/contrib/testing/common/testId';\nimport { ITestProfileService, canUseProfileWithTest } from 'vs/workbench/contrib/testing/common/testProfileService';\nimport { LiveTestResult, TestResultItemChangeReason } from 'vs/workbench/contrib/testing/common/testResult';\nimport { ITestResultService } from 'vs/workbench/contrib/testing/common/testResultService';\nimport { IMainThreadTestCollection, ITestService, testCollectionIsEmpty } from 'vs/workbench/contrib/testing/common/testService';\nimport { ITestRunProfile, InternalTestItem, TestItemExpandState, TestResultState, TestRunProfileBitset } from 'vs/workbench/contrib/testing/common/testTypes';\nimport { TestingContextKeys } from 'vs/workbench/contrib/testing/common/testingContextKeys';\nimport { ITestingContinuousRunService } from 'vs/workbench/contrib/testing/common/testingContinuousRunService';\nimport { ITestingPeekOpener } from 'vs/workbench/contrib/testing/common/testingPeekOpener';\nimport { cmpPriority, isFailedState, isStateWithResult, statesInOrder } from 'vs/workbench/contrib/testing/common/testingStates';\nimport { IActivityService, IconBadge, NumberBadge } from 'vs/workbench/services/activity/common/activity';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\n\nconst enum LastFocusState {\n\tInput,\n\tTree,\n}\n\nexport class TestingExplorerView extends ViewPane {\n\tpublic viewModel!: TestingExplorerViewModel;\n\tprivate filterActionBar = this._register(new MutableDisposable());\n\tprivate container!: HTMLElement;\n\tprivate treeHeader!: HTMLElement;\n\tprivate discoveryProgress = this._register(new MutableDisposable<UnmanagedProgress>());\n\tprivate readonly filter = this._register(new MutableDisposable<TestingExplorerFilter>());\n\tprivate readonly filterFocusListener = this._register(new MutableDisposable());\n\tprivate readonly dimensions = { width: 0, height: 0 };\n\tprivate lastFocusState = LastFocusState.Input;\n\n\tpublic get focusedTreeElements() {\n\t\treturn this.viewModel.tree.getFocus().filter(isDefined);\n\t}\n\n\tconstructor(\n\t\toptions: IViewletViewOptions,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@ITestService private readonly testService: ITestService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@ITestProfileService private readonly testProfileService: ITestProfileService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t) {\n\t\tsuper(options, keybindingService, contextMenuService, configurationService, contextKeyService, viewDescriptorService, instantiationService, openerService, themeService, telemetryService);\n\n\t\tconst relayout = this._register(new RunOnceScheduler(() => this.layoutBody(), 1));\n\t\tthis._register(this.onDidChangeViewWelcomeState(() => {\n\t\t\tif (!this.shouldShowWelcome()) {\n\t\t\t\trelayout.schedule();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(testService.collection.onBusyProvidersChange(busy => {\n\t\t\tthis.updateDiscoveryProgress(busy);\n\t\t}));\n\n\t\tthis._register(testProfileService.onDidChange(() => this.updateActions()));\n\t}\n\n\tpublic override shouldShowWelcome() {\n\t\treturn this.viewModel?.welcomeExperience === WelcomeExperience.ForWorkspace ?? true;\n\t}\n\n\tpublic override focus() {\n\t\tsuper.focus();\n\t\tif (this.lastFocusState === LastFocusState.Tree) {\n\t\t\tthis.viewModel.tree.domFocus();\n\t\t} else {\n\t\t\tthis.filter.value?.focus();\n\t\t}\n\t}\n\n\t/**\n\t * Gets include/exclude items in the tree, based either on visible tests\n\t * or a use selection.\n\t */\n\tpublic getTreeIncludeExclude(profile?: ITestRunProfile, filterToType: 'visible' | 'selected' = 'visible') {\n\t\tconst projection = this.viewModel.projection.value;\n\t\tif (!projection) {\n\t\t\treturn { include: [], exclude: [] };\n\t\t}\n\n\t\t// To calculate includes and excludes, we include the first children that\n\t\t// have a majority of their items included too, and then apply exclusions.\n\t\tconst include = new Set<InternalTestItem>();\n\t\tconst exclude: InternalTestItem[] = [];\n\n\t\tconst attempt = (element: TestExplorerTreeElement, alreadyIncluded: boolean) => {\n\t\t\t// sanity check hasElement since updates are debounced and they may exist\n\t\t\t// but not be rendered yet\n\t\t\tif (!(element instanceof TestItemTreeElement) || !this.viewModel.tree.hasElement(element)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If the current node is not visible or runnable in the current profile, it's excluded\n\t\t\tconst inTree = this.viewModel.tree.getNode(element);\n\t\t\tif (!inTree.visible) {\n\t\t\t\tif (alreadyIncluded) { exclude.push(element.test); }\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If it's not already included but most of its children are, then add it\n\t\t\t// if it can be run under the current profile (when specified)\n\t\t\tif (\n\t\t\t\t// If it's not already included...\n\t\t\t\t!alreadyIncluded\n\t\t\t\t// And it can be run using the current profile (if any)\n\t\t\t\t&& (!profile || canUseProfileWithTest(profile, element.test))\n\t\t\t\t// And either it's a leaf node or most children are included, the  include it.\n\t\t\t\t&& (inTree.children.length === 0 || inTree.visibleChildrenCount * 2 >= inTree.children.length)\n\t\t\t\t// And not if we're only showing a single of its children, since it\n\t\t\t\t// probably fans out later. (Worse case we'll directly include its single child)\n\t\t\t\t&& inTree.visibleChildrenCount !== 1\n\t\t\t) {\n\t\t\t\tinclude.add(element.test);\n\t\t\t\talreadyIncluded = true;\n\t\t\t}\n\n\t\t\t// Recurse ✨\n\t\t\tfor (const child of element.children) {\n\t\t\t\tattempt(child, alreadyIncluded);\n\t\t\t}\n\t\t};\n\n\t\tif (filterToType === 'selected') {\n\t\t\tconst sel = this.viewModel.tree.getSelection().filter(isDefined);\n\t\t\tif (sel.length) {\n\n\t\t\t\tL:\n\t\t\t\tfor (const node of sel) {\n\t\t\t\t\tif (node instanceof TestItemTreeElement) {\n\t\t\t\t\t\t// avoid adding an item if its parent is already included\n\t\t\t\t\t\tfor (let i: TestItemTreeElement | null = node; i; i = i.parent) {\n\t\t\t\t\t\t\tif (include.has(i.test)) {\n\t\t\t\t\t\t\t\tcontinue L;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tinclude.add(node.test);\n\t\t\t\t\t\tnode.children.forEach(c => attempt(c, true));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn { include: [...include], exclude };\n\t\t\t}\n\t\t}\n\n\t\tfor (const root of this.testService.collection.rootItems) {\n\t\t\tconst element = projection.getElementByTestId(root.item.extId);\n\t\t\tif (!element) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (profile && !canUseProfileWithTest(profile, root)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// single controllers won't have visible root ID nodes, handle that  case specially\n\t\t\tif (!this.viewModel.tree.hasElement(element)) {\n\t\t\t\tconst visibleChildren = [...element.children].reduce((acc, c) =>\n\t\t\t\t\tthis.viewModel.tree.hasElement(c) && this.viewModel.tree.getNode(c).visible ? acc + 1 : acc, 0);\n\n\t\t\t\t// note we intentionally check children > 0 here, unlike above, since\n\t\t\t\t// we don't want to bother dispatching to controllers who have no discovered tests\n\t\t\t\tif (element.children.size > 0 && visibleChildren * 2 >= element.children.size) {\n\t\t\t\t\tinclude.add(element.test);\n\t\t\t\t\telement.children.forEach(c => attempt(c, true));\n\t\t\t\t} else {\n\t\t\t\t\telement.children.forEach(c => attempt(c, false));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tattempt(element, false);\n\t\t\t}\n\t\t}\n\n\t\treturn { include: [...include], exclude };\n\t}\n\n\toverride render(): void {\n\t\tsuper.render();\n\t\tthis._register(registerNavigableContainer({\n\t\t\tfocusNotifiers: [this],\n\t\t\tfocusNextWidget: () => {\n\t\t\t\tif (!this.viewModel.tree.isDOMFocused()) {\n\t\t\t\t\tthis.viewModel.tree.domFocus();\n\t\t\t\t}\n\t\t\t},\n\t\t\tfocusPreviousWidget: () => {\n\t\t\t\tif (this.viewModel.tree.isDOMFocused()) {\n\t\t\t\t\tthis.filter.value?.focus();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected override renderBody(container: HTMLElement): void {\n\t\tsuper.renderBody(container);\n\n\t\tthis.container = dom.append(container, dom.$('.test-explorer'));\n\t\tthis.treeHeader = dom.append(this.container, dom.$('.test-explorer-header'));\n\t\tthis.filterActionBar.value = this.createFilterActionBar();\n\n\t\tconst messagesContainer = dom.append(this.treeHeader, dom.$('.result-summary-container'));\n\t\tthis._register(this.instantiationService.createInstance(ResultSummaryView, messagesContainer));\n\n\t\tconst listContainer = dom.append(this.container, dom.$('.test-explorer-tree'));\n\t\tthis.viewModel = this.instantiationService.createInstance(TestingExplorerViewModel, listContainer, this.onDidChangeBodyVisibility);\n\t\tthis._register(this.viewModel.tree.onDidFocus(() => this.lastFocusState = LastFocusState.Tree));\n\t\tthis._register(this.viewModel.onChangeWelcomeVisibility(() => this._onDidChangeViewWelcomeState.fire()));\n\t\tthis._register(this.viewModel);\n\t\tthis._onDidChangeViewWelcomeState.fire();\n\t}\n\n\t/** @override  */\n\tpublic override getActionViewItem(action: IAction): IActionViewItem | undefined {\n\t\tswitch (action.id) {\n\t\t\tcase TestCommandId.FilterAction:\n\t\t\t\tthis.filter.value = this.instantiationService.createInstance(TestingExplorerFilter, action);\n\t\t\t\tthis.filterFocusListener.value = this.filter.value.onDidFocus(() => this.lastFocusState = LastFocusState.Input);\n\t\t\t\treturn this.filter.value;\n\t\t\tcase TestCommandId.RunSelectedAction:\n\t\t\t\treturn this.getRunGroupDropdown(TestRunProfileBitset.Run, action);\n\t\t\tcase TestCommandId.DebugSelectedAction:\n\t\t\t\treturn this.getRunGroupDropdown(TestRunProfileBitset.Debug, action);\n\t\t\tdefault:\n\t\t\t\treturn super.getActionViewItem(action);\n\t\t}\n\t}\n\n\t/** @inheritdoc */\n\tprivate getTestConfigGroupActions(group: TestRunProfileBitset) {\n\t\tconst profileActions: IAction[] = [];\n\n\t\tlet participatingGroups = 0;\n\t\tlet hasConfigurable = false;\n\t\tconst defaults = this.testProfileService.getGroupDefaultProfiles(group);\n\t\tfor (const { profiles, controller } of this.testProfileService.all()) {\n\t\t\tlet hasAdded = false;\n\n\t\t\tfor (const profile of profiles) {\n\t\t\t\tif (profile.group !== group) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!hasAdded) {\n\t\t\t\t\thasAdded = true;\n\t\t\t\t\tparticipatingGroups++;\n\t\t\t\t\tprofileActions.push(new Action(`${controller.id}.$root`, controller.label.value, undefined, false));\n\t\t\t\t}\n\n\t\t\t\thasConfigurable = hasConfigurable || profile.hasConfigurationHandler;\n\t\t\t\tprofileActions.push(new Action(\n\t\t\t\t\t`${controller.id}.${profile.profileId}`,\n\t\t\t\t\tdefaults.includes(profile) ? localize('defaultTestProfile', '{0} (Default)', profile.label) : profile.label,\n\t\t\t\t\tundefined,\n\t\t\t\t\tundefined,\n\t\t\t\t\t() => {\n\t\t\t\t\t\tconst { include, exclude } = this.getTreeIncludeExclude(profile);\n\t\t\t\t\t\tthis.testService.runResolvedTests({\n\t\t\t\t\t\t\texclude: exclude.map(e => e.item.extId),\n\t\t\t\t\t\t\ttargets: [{\n\t\t\t\t\t\t\t\tprofileGroup: profile.group,\n\t\t\t\t\t\t\t\tprofileId: profile.profileId,\n\t\t\t\t\t\t\t\tcontrollerId: profile.controllerId,\n\t\t\t\t\t\t\t\ttestIds: include.map(i => i.item.extId),\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t));\n\t\t\t}\n\t\t}\n\n\t\t// If there's only one group, don't add a heading for it in the dropdown.\n\t\tif (participatingGroups === 1) {\n\t\t\tprofileActions.shift();\n\t\t}\n\n\t\tconst postActions: IAction[] = [];\n\t\tif (profileActions.length > 1) {\n\t\t\tpostActions.push(new Action(\n\t\t\t\t'selectDefaultTestConfigurations',\n\t\t\t\tlocalize('selectDefaultConfigs', 'Select Default Profile'),\n\t\t\t\tundefined,\n\t\t\t\tundefined,\n\t\t\t\t() => this.commandService.executeCommand<ITestRunProfile>(TestCommandId.SelectDefaultTestProfiles, group),\n\t\t\t));\n\t\t}\n\n\t\tif (hasConfigurable) {\n\t\t\tpostActions.push(new Action(\n\t\t\t\t'configureTestProfiles',\n\t\t\t\tlocalize('configureTestProfiles', 'Configure Test Profiles'),\n\t\t\t\tundefined,\n\t\t\t\tundefined,\n\t\t\t\t() => this.commandService.executeCommand<ITestRunProfile>(TestCommandId.ConfigureTestProfilesAction, group),\n\t\t\t));\n\t\t}\n\n\t\treturn Separator.join(profileActions, postActions);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic override saveState() {\n\t\tthis.filter.value?.saveState();\n\t\tsuper.saveState();\n\t}\n\n\tprivate getRunGroupDropdown(group: TestRunProfileBitset, defaultAction: IAction) {\n\t\tconst dropdownActions = this.getTestConfigGroupActions(group);\n\t\tif (dropdownActions.length < 2) {\n\t\t\treturn super.getActionViewItem(defaultAction);\n\t\t}\n\n\t\tconst primaryAction = this.instantiationService.createInstance(MenuItemAction, {\n\t\t\tid: defaultAction.id,\n\t\t\ttitle: defaultAction.label,\n\t\t\ticon: group === TestRunProfileBitset.Run\n\t\t\t\t? icons.testingRunAllIcon\n\t\t\t\t: icons.testingDebugAllIcon,\n\t\t}, undefined, undefined, undefined);\n\n\t\tconst dropdownAction = new Action('selectRunConfig', 'Select Configuration...', 'codicon-chevron-down', true);\n\n\t\treturn this.instantiationService.createInstance(\n\t\t\tDropdownWithPrimaryActionViewItem,\n\t\t\tprimaryAction, dropdownAction, dropdownActions,\n\t\t\t'',\n\t\t\tthis.contextMenuService,\n\t\t\t{}\n\t\t);\n\t}\n\n\tprivate createFilterActionBar() {\n\t\tconst bar = new ActionBar(this.treeHeader, {\n\t\t\tactionViewItemProvider: action => this.getActionViewItem(action),\n\t\t\ttriggerKeys: { keyDown: false, keys: [] },\n\t\t});\n\t\tbar.push(new Action(TestCommandId.FilterAction));\n\t\tbar.getContainer().classList.add('testing-filter-action-bar');\n\t\treturn bar;\n\t}\n\n\tprivate updateDiscoveryProgress(busy: number) {\n\t\tif (!busy && this.discoveryProgress) {\n\t\t\tthis.discoveryProgress.clear();\n\t\t} else if (busy && !this.discoveryProgress.value) {\n\t\t\tthis.discoveryProgress.value = this.instantiationService.createInstance(UnmanagedProgress, { location: this.getProgressLocation() });\n\t\t}\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected override layoutBody(height = this.dimensions.height, width = this.dimensions.width): void {\n\t\tsuper.layoutBody(height, width);\n\t\tthis.dimensions.height = height;\n\t\tthis.dimensions.width = width;\n\t\tthis.container.style.height = `${height}px`;\n\t\tthis.viewModel?.layout(height - this.treeHeader.clientHeight, width);\n\t\tthis.filter.value?.layout(width);\n\t}\n}\n\nconst SUMMARY_RENDER_INTERVAL = 200;\n\nclass ResultSummaryView extends Disposable {\n\tprivate elementsWereAttached = false;\n\tprivate badgeType: TestingCountBadge;\n\tprivate lastBadge?: NumberBadge | IconBadge;\n\tprivate readonly badgeDisposable = this._register(new MutableDisposable());\n\tprivate readonly renderLoop = this._register(new RunOnceScheduler(() => this.render(), SUMMARY_RENDER_INTERVAL));\n\tprivate readonly elements = dom.h('div.result-summary', [\n\t\tdom.h('div@status'),\n\t\tdom.h('div@count'),\n\t\tdom.h('div@count'),\n\t\tdom.h('span'),\n\t\tdom.h('duration@duration'),\n\t\tdom.h('a@rerun'),\n\t]);\n\n\tconstructor(\n\t\tprivate readonly container: HTMLElement,\n\t\t@ITestResultService private readonly resultService: ITestResultService,\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@ITestingContinuousRunService private readonly crService: ITestingContinuousRunService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\n\t\tthis.badgeType = configurationService.getValue<TestingCountBadge>(TestingConfigKeys.CountBadge);\n\t\tthis._register(resultService.onResultsChanged(this.render, this));\n\t\tthis._register(configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(TestingConfigKeys.CountBadge)) {\n\t\t\t\tthis.badgeType = configurationService.getValue(TestingConfigKeys.CountBadge);\n\t\t\t\tthis.render();\n\t\t\t}\n\t\t}));\n\n\t\tconst ab = this._register(new ActionBar(this.elements.rerun, {\n\t\t\tactionViewItemProvider: action => createActionViewItem(instantiationService, action),\n\t\t}));\n\t\tab.push(instantiationService.createInstance(MenuItemAction,\n\t\t\t{ ...new ReRunLastRun().desc, icon: icons.testingRerunIcon },\n\t\t\t{ ...new DebugLastRun().desc, icon: icons.testingDebugIcon },\n\t\t\t{},\n\t\t\tundefined,\n\t\t), { icon: true, label: false });\n\n\t\tthis.render();\n\t}\n\n\tprivate render() {\n\t\tconst { results } = this.resultService;\n\t\tconst { count, root, status, duration, rerun } = this.elements;\n\t\tif (!results.length) {\n\t\t\tthis.container.innerText = localize('noResults', 'No test results yet.');\n\t\t\tif (this.elementsWereAttached) {\n\t\t\t\tthis.container.removeChild(root);\n\t\t\t\tthis.elementsWereAttached = false;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\tconst live = results.filter(r => !r.completedAt) as LiveTestResult[];\n\t\tlet counts: CountSummary;\n\t\tif (live.length) {\n\t\t\tstatus.className = ThemeIcon.asClassName(spinningLoading);\n\t\t\tcounts = collectTestStateCounts(true, live);\n\t\t\tthis.renderLoop.schedule();\n\n\t\t\tconst last = live[live.length - 1];\n\t\t\tduration.textContent = formatDuration(Date.now() - last.startedAt);\n\t\t\trerun.style.display = 'none';\n\t\t} else {\n\t\t\tconst last = results[0];\n\t\t\tconst dominantState = mapFindFirst(statesInOrder, s => last.counts[s] > 0 ? s : undefined);\n\t\t\tstatus.className = ThemeIcon.asClassName(icons.testingStatesToIcons.get(dominantState ?? TestResultState.Unset)!);\n\t\t\tcounts = collectTestStateCounts(false, [last]);\n\t\t\tduration.textContent = last instanceof LiveTestResult ? formatDuration(last.completedAt! - last.startedAt) : '';\n\t\t\trerun.style.display = 'block';\n\t\t}\n\n\t\tcount.textContent = `${counts.passed}/${counts.totalWillBeRun}`;\n\t\tcount.title = getTestProgressText(counts);\n\t\tthis.renderActivityBadge(counts);\n\n\t\tif (!this.elementsWereAttached) {\n\t\t\tdom.clearNode(this.container);\n\t\t\tthis.container.appendChild(root);\n\t\t\tthis.elementsWereAttached = true;\n\t\t}\n\t}\n\n\tprivate renderActivityBadge(countSummary: CountSummary) {\n\t\tif (countSummary && this.badgeType !== TestingCountBadge.Off && countSummary[this.badgeType] !== 0) {\n\t\t\tif (this.lastBadge instanceof NumberBadge && this.lastBadge.number === countSummary[this.badgeType]) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.lastBadge = new NumberBadge(countSummary[this.badgeType], num => this.getLocalizedBadgeString(this.badgeType, num));\n\t\t} else if (this.crService.isEnabled()) {\n\t\t\tif (this.lastBadge instanceof IconBadge && this.lastBadge.icon === icons.testingContinuousIsOn) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.lastBadge = new IconBadge(icons.testingContinuousIsOn, () => localize('testingContinuousBadge', 'Tests are being watched for changes'));\n\t\t} else {\n\t\t\tif (!this.lastBadge) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.lastBadge = undefined;\n\t\t}\n\n\t\tthis.badgeDisposable.value = this.lastBadge && this.activityService.showViewActivity(Testing.ExplorerViewId, { badge: this.lastBadge });\n\t}\n\n\tprivate getLocalizedBadgeString(countBadgeType: TestingCountBadge, count: number): string {\n\t\tswitch (countBadgeType) {\n\t\t\tcase TestingCountBadge.Passed:\n\t\t\t\treturn localize('testingCountBadgePassed', '{0} passed tests', count);\n\t\t\tcase TestingCountBadge.Skipped:\n\t\t\t\treturn localize('testingCountBadgeSkipped', '{0} skipped tests', count);\n\t\t\tdefault:\n\t\t\t\treturn localize('testingCountBadgeFailed', '{0} failed tests', count);\n\t\t}\n\t}\n}\n\nconst enum WelcomeExperience {\n\tNone,\n\tForWorkspace,\n\tForDocument,\n}\n\nclass TestingExplorerViewModel extends Disposable {\n\tpublic tree: TestingObjectTree<FuzzyScore>;\n\tprivate filter: TestsFilter;\n\tpublic projection = this._register(new MutableDisposable<ITestTreeProjection>());\n\n\tprivate readonly revealTimeout = new MutableDisposable();\n\tprivate readonly _viewMode = TestingContextKeys.viewMode.bindTo(this.contextKeyService);\n\tprivate readonly _viewSorting = TestingContextKeys.viewSorting.bindTo(this.contextKeyService);\n\tprivate readonly welcomeVisibilityEmitter = new Emitter<WelcomeExperience>();\n\tprivate readonly actionRunner = new TestExplorerActionRunner(() => this.tree.getSelection().filter(isDefined));\n\tprivate readonly lastViewState = this._register(new StoredValue<ISerializedTestTreeCollapseState>({\n\t\tkey: 'testing.treeState',\n\t\tscope: StorageScope.WORKSPACE,\n\t\ttarget: StorageTarget.MACHINE,\n\t}, this.storageService));\n\tprivate readonly noTestForDocumentWidget: NoTestsForDocumentWidget;\n\n\t/**\n\t * Whether there's a reveal request which has not yet been delivered. This\n\t * can happen if the user asks to reveal before the test tree is loaded.\n\t * We check to see if the reveal request is present on each tree update,\n\t * and do it then if so.\n\t */\n\tprivate hasPendingReveal = false;\n\t/**\n\t * Fires when the visibility of the placeholder state changes.\n\t */\n\tpublic readonly onChangeWelcomeVisibility = this.welcomeVisibilityEmitter.event;\n\n\t/**\n\t * Gets whether the welcome should be visible.\n\t */\n\tpublic welcomeExperience = WelcomeExperience.None;\n\n\tpublic get viewMode() {\n\t\treturn this._viewMode.get() ?? TestExplorerViewMode.Tree;\n\t}\n\n\tpublic set viewMode(newMode: TestExplorerViewMode) {\n\t\tif (newMode === this._viewMode.get()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._viewMode.set(newMode);\n\t\tthis.updatePreferredProjection();\n\t\tthis.storageService.store('testing.viewMode', newMode, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n\n\n\tpublic get viewSorting() {\n\t\treturn this._viewSorting.get() ?? TestExplorerViewSorting.ByStatus;\n\t}\n\n\tpublic set viewSorting(newSorting: TestExplorerViewSorting) {\n\t\tif (newSorting === this._viewSorting.get()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._viewSorting.set(newSorting);\n\t\tthis.tree.resort(null);\n\t\tthis.storageService.store('testing.viewSorting', newSorting, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n\n\tconstructor(\n\t\tlistContainer: HTMLElement,\n\t\tonDidChangeVisibility: Event<boolean>,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t\t@IContextMenuService private readonly contextMenuService: IContextMenuService,\n\t\t@ITestService private readonly testService: ITestService,\n\t\t@ITestExplorerFilterState private readonly filterState: TestExplorerFilterState,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@ITestResultService private readonly testResults: ITestResultService,\n\t\t@ITestingPeekOpener private readonly peekOpener: ITestingPeekOpener,\n\t\t@ITestProfileService private readonly testProfileService: ITestProfileService,\n\t\t@ITestingContinuousRunService private readonly crService: ITestingContinuousRunService,\n\t\t@ICommandService commandService: ICommandService,\n\t) {\n\t\tsuper();\n\n\t\tthis.hasPendingReveal = !!filterState.reveal.value;\n\t\tthis.noTestForDocumentWidget = this._register(instantiationService.createInstance(NoTestsForDocumentWidget, listContainer));\n\t\tthis._viewMode.set(this.storageService.get('testing.viewMode', StorageScope.WORKSPACE, TestExplorerViewMode.Tree) as TestExplorerViewMode);\n\t\tthis._viewSorting.set(this.storageService.get('testing.viewSorting', StorageScope.WORKSPACE, TestExplorerViewSorting.ByLocation) as TestExplorerViewSorting);\n\n\t\tthis.reevaluateWelcomeState();\n\t\tthis.filter = this.instantiationService.createInstance(TestsFilter, testService.collection);\n\t\tthis.tree = instantiationService.createInstance(\n\t\t\tTestingObjectTree,\n\t\t\t'Test Explorer List',\n\t\t\tlistContainer,\n\t\t\tnew ListDelegate(),\n\t\t\t[\n\t\t\t\tinstantiationService.createInstance(TestItemRenderer, this.actionRunner),\n\t\t\t\tinstantiationService.createInstance(ErrorRenderer),\n\t\t\t],\n\t\t\t{\n\t\t\t\tidentityProvider: instantiationService.createInstance(IdentityProvider),\n\t\t\t\thideTwistiesOfChildlessElements: false,\n\t\t\t\tsorter: instantiationService.createInstance(TreeSorter, this),\n\t\t\t\tkeyboardNavigationLabelProvider: instantiationService.createInstance(TreeKeyboardNavigationLabelProvider),\n\t\t\t\taccessibilityProvider: instantiationService.createInstance(ListAccessibilityProvider),\n\t\t\t\tfilter: this.filter,\n\t\t\t\tfindWidgetEnabled: false,\n\t\t\t\topenOnSingleClick: false,\n\t\t\t}) as TestingObjectTree<FuzzyScore>;\n\n\n\t\t// saves the collapse state so that if items are removed or refreshed, they\n\t\t// retain the same state (#170169)\n\t\tconst collapseStateSaver = this._register(new RunOnceScheduler(() => {\n\t\t\t// reuse the last view state to avoid making a bunch of object garbage:\n\t\t\tconst state = this.tree.getOptimizedViewState(this.lastViewState.get({}));\n\t\t\tconst projection = this.projection.value;\n\t\t\tif (projection) {\n\t\t\t\tprojection.lastState = state;\n\t\t\t}\n\t\t}, 3000));\n\n\t\tthis._register(this.tree.onDidChangeCollapseState(evt => {\n\t\t\tif (evt.node.element instanceof TestItemTreeElement) {\n\t\t\t\tif (!evt.node.collapsed) {\n\t\t\t\t\tthis.projection.value?.expandElement(evt.node.element, evt.deep ? Infinity : 0);\n\t\t\t\t}\n\t\t\t\tcollapseStateSaver.schedule();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.crService.onDidChange(testId => {\n\t\t\tif (testId) {\n\t\t\t\t// a continuous run test will sort to the top:\n\t\t\t\tconst elem = this.projection.value?.getElementByTestId(testId);\n\t\t\t\tthis.tree.resort(elem?.parent && this.tree.hasElement(elem.parent) ? elem.parent : null, false);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(onDidChangeVisibility(visible => {\n\t\t\tif (visible) {\n\t\t\t\tthis.ensureProjection();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.tree.onContextMenu(e => this.onContextMenu(e)));\n\n\t\tthis._register(Event.any(\n\t\t\tfilterState.text.onDidChange,\n\t\t\tfilterState.fuzzy.onDidChange,\n\t\t\ttestService.excluded.onTestExclusionsChanged,\n\t\t)(this.tree.refilter, this.tree));\n\n\t\tthis._register(this.tree.onDidOpen(e => {\n\t\t\tif (e.element instanceof TestItemTreeElement && !e.element.children.size && e.element.test.item.uri) {\n\t\t\t\tcommandService.executeCommand('vscode.revealTest', e.element.test.item.extId);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.tree);\n\n\t\tthis._register(this.onChangeWelcomeVisibility(e => {\n\t\t\tthis.noTestForDocumentWidget.setVisible(e === WelcomeExperience.ForDocument);\n\t\t}));\n\n\t\tthis._register(dom.addStandardDisposableListener(this.tree.getHTMLElement(), 'keydown', evt => {\n\t\t\tif (evt.equals(KeyCode.Enter)) {\n\t\t\t\tthis.handleExecuteKeypress(evt);\n\t\t\t} else if (DefaultKeyboardNavigationDelegate.mightProducePrintableCharacter(evt)) {\n\t\t\t\tfilterState.text.value = evt.browserEvent.key;\n\t\t\t\tfilterState.focusInput();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(filterState.reveal.onDidChange(id => this.revealById(id, undefined, false)));\n\n\t\tthis._register(onDidChangeVisibility(visible => {\n\t\t\tif (visible) {\n\t\t\t\tfilterState.focusInput();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.tree.onDidChangeSelection(evt => {\n\t\t\tif (evt.browserEvent instanceof MouseEvent && (evt.browserEvent.altKey || evt.browserEvent.shiftKey)) {\n\t\t\t\treturn; // don't focus when alt-clicking to multi select\n\t\t\t}\n\n\t\t\tconst selected = evt.elements[0];\n\t\t\tif (selected && evt.browserEvent && selected instanceof TestItemTreeElement\n\t\t\t\t&& selected.children.size === 0 && selected.test.expand === TestItemExpandState.NotExpandable) {\n\t\t\t\tthis.tryPeekError(selected);\n\t\t\t}\n\t\t}));\n\n\t\tlet followRunningTests = getTestingConfiguration(configurationService, TestingConfigKeys.FollowRunningTest);\n\t\tthis._register(configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(TestingConfigKeys.FollowRunningTest)) {\n\t\t\t\tfollowRunningTests = getTestingConfiguration(configurationService, TestingConfigKeys.FollowRunningTest);\n\t\t\t}\n\t\t}));\n\n\t\tlet alwaysRevealTestAfterStateChange = getTestingConfiguration(configurationService, TestingConfigKeys.AlwaysRevealTestOnStateChange);\n\t\tthis._register(configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(TestingConfigKeys.AlwaysRevealTestOnStateChange)) {\n\t\t\t\talwaysRevealTestAfterStateChange = getTestingConfiguration(configurationService, TestingConfigKeys.AlwaysRevealTestOnStateChange);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(testResults.onTestChanged(evt => {\n\t\t\tif (!followRunningTests) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (evt.reason !== TestResultItemChangeReason.OwnStateChange) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.tree.selectionSize > 1) {\n\t\t\t\treturn; // don't change a multi-selection #180950\n\t\t\t}\n\n\t\t\t// follow running tests, or tests whose state changed. Tests that\n\t\t\t// complete very fast may not enter the running state at all.\n\t\t\tif (evt.item.ownComputedState !== TestResultState.Running && !(evt.previousState === TestResultState.Queued && isStateWithResult(evt.item.ownComputedState))) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.revealById(evt.item.item.extId, alwaysRevealTestAfterStateChange, false);\n\t\t}));\n\n\t\tthis._register(testResults.onResultsChanged(() => {\n\t\t\tthis.tree.resort(null);\n\t\t}));\n\n\t\tthis._register(this.testProfileService.onDidChange(() => {\n\t\t\tthis.tree.rerender();\n\t\t}));\n\n\t\tconst onEditorChange = () => {\n\t\t\tif (editorService.activeEditor instanceof DiffEditorInput) {\n\t\t\t\tthis.filter.filterToDocumentUri(editorService.activeEditor.primary.resource);\n\t\t\t} else {\n\t\t\t\tthis.filter.filterToDocumentUri(editorService.activeEditor?.resource);\n\t\t\t}\n\n\t\t\tif (this.filterState.isFilteringFor(TestFilterTerm.CurrentDoc)) {\n\t\t\t\tthis.tree.refilter();\n\t\t\t}\n\t\t};\n\n\t\tthis._register(editorService.onDidActiveEditorChange(onEditorChange));\n\n\t\tthis._register(this.storageService.onWillSaveState(({ reason, }) => {\n\t\t\tif (reason === WillSaveStateReason.SHUTDOWN) {\n\t\t\t\tthis.lastViewState.store(this.tree.getOptimizedViewState());\n\t\t\t}\n\t\t}));\n\n\t\tonEditorChange();\n\t}\n\n\t/**\n\t * Re-layout the tree.\n\t */\n\tpublic layout(height?: number, width?: number): void {\n\t\tthis.tree.layout(height, width);\n\t}\n\n\t/**\n\t * Tries to reveal by extension ID. Queues the request if the extension\n\t * ID is not currently available.\n\t */\n\tprivate revealById(id: string | undefined, expand = true, focus = true) {\n\t\tif (!id) {\n\t\t\tthis.hasPendingReveal = false;\n\t\t\treturn;\n\t\t}\n\n\t\tconst projection = this.ensureProjection();\n\n\t\t// If the item itself is visible in the tree, show it. Otherwise, expand\n\t\t// its closest parent.\n\t\tlet expandToLevel = 0;\n\t\tconst idPath = [...TestId.fromString(id).idsFromRoot()];\n\t\tfor (let i = idPath.length - 1; i >= expandToLevel; i--) {\n\t\t\tconst element = projection.getElementByTestId(idPath[i].toString());\n\t\t\t// Skip all elements that aren't in the tree.\n\t\t\tif (!element || !this.tree.hasElement(element)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// If this 'if' is true, we're at the closest-visible parent to the node\n\t\t\t// we want to expand. Expand that, and then start the loop again because\n\t\t\t// we might already have children for it.\n\t\t\tif (i < idPath.length - 1) {\n\t\t\t\tif (expand) {\n\t\t\t\t\tthis.tree.expand(element);\n\t\t\t\t\texpandToLevel = i + 1; // avoid an infinite loop if the test does not exist\n\t\t\t\t\ti = idPath.length - 1; // restart the loop since new children may now be visible\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Otherwise, we've arrived!\n\n\t\t\t// If the node or any of its children are excluded, flip on the 'show\n\t\t\t// excluded tests' checkbox automatically. If we didn't expand, then set\n\t\t\t// target focus target to the first collapsed element.\n\n\t\t\tlet focusTarget = element;\n\t\t\tfor (let n: TestItemTreeElement | null = element; n instanceof TestItemTreeElement; n = n.parent) {\n\t\t\t\tif (n.test && this.testService.excluded.contains(n.test)) {\n\t\t\t\t\tthis.filterState.toggleFilteringFor(TestFilterTerm.Hidden, true);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (!expand && (this.tree.hasElement(n) && this.tree.isCollapsed(n))) {\n\t\t\t\t\tfocusTarget = n;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.filterState.reveal.value = undefined;\n\t\t\tthis.hasPendingReveal = false;\n\t\t\tif (focus) {\n\t\t\t\tthis.tree.domFocus();\n\t\t\t}\n\n\t\t\tif (this.tree.getRelativeTop(focusTarget) === null) {\n\t\t\t\tthis.tree.reveal(focusTarget, 0.5);\n\t\t\t}\n\n\t\t\tthis.revealTimeout.value = disposableTimeout(() => {\n\t\t\t\tthis.tree.setFocus([focusTarget]);\n\t\t\t\tthis.tree.setSelection([focusTarget]);\n\t\t\t}, 1);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// If here, we've expanded all parents we can. Waiting on data to come\n\t\t// in to possibly show the revealed test.\n\t\tthis.hasPendingReveal = true;\n\t}\n\n\t/**\n\t * Collapse all items in the tree.\n\t */\n\tpublic async collapseAll() {\n\t\tthis.tree.collapseAll();\n\t}\n\n\t/**\n\t * Tries to peek the first test error, if the item is in a failed state.\n\t */\n\tprivate tryPeekError(item: TestItemTreeElement) {\n\t\tconst lookup = item.test && this.testResults.getStateById(item.test.item.extId);\n\t\treturn lookup && lookup[1].tasks.some(s => isFailedState(s.state))\n\t\t\t? this.peekOpener.tryPeekFirstError(lookup[0], lookup[1], { preserveFocus: true })\n\t\t\t: false;\n\t}\n\n\tprivate onContextMenu(evt: ITreeContextMenuEvent<TestExplorerTreeElement | null>) {\n\t\tconst element = evt.element;\n\t\tif (!(element instanceof TestItemTreeElement)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { actions } = getActionableElementActions(this.contextKeyService, this.menuService, this.testService, this.crService, this.testProfileService, element);\n\t\tthis.contextMenuService.showContextMenu({\n\t\t\tgetAnchor: () => evt.anchor,\n\t\t\tgetActions: () => actions.secondary,\n\t\t\tgetActionsContext: () => element,\n\t\t\tactionRunner: this.actionRunner,\n\t\t});\n\t}\n\n\tprivate handleExecuteKeypress(evt: IKeyboardEvent) {\n\t\tconst focused = this.tree.getFocus();\n\t\tconst selected = this.tree.getSelection();\n\t\tlet targeted: (TestExplorerTreeElement | null)[];\n\t\tif (focused.length === 1 && selected.includes(focused[0])) {\n\t\t\tevt.browserEvent?.preventDefault();\n\t\t\ttargeted = selected;\n\t\t} else {\n\t\t\ttargeted = focused;\n\t\t}\n\n\t\tconst toRun = targeted\n\t\t\t.filter((e): e is TestItemTreeElement => e instanceof TestItemTreeElement);\n\n\t\tif (toRun.length) {\n\t\t\tthis.testService.runTests({\n\t\t\t\tgroup: TestRunProfileBitset.Run,\n\t\t\t\ttests: toRun.map(t => t.test),\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate reevaluateWelcomeState() {\n\t\tconst shouldShowWelcome = this.testService.collection.busyProviders === 0 && testCollectionIsEmpty(this.testService.collection);\n\t\tconst welcomeExperience = shouldShowWelcome\n\t\t\t? (this.filterState.isFilteringFor(TestFilterTerm.CurrentDoc) ? WelcomeExperience.ForDocument : WelcomeExperience.ForWorkspace)\n\t\t\t: WelcomeExperience.None;\n\n\t\tif (welcomeExperience !== this.welcomeExperience) {\n\t\t\tthis.welcomeExperience = welcomeExperience;\n\t\t\tthis.welcomeVisibilityEmitter.fire(welcomeExperience);\n\t\t}\n\t}\n\n\tprivate ensureProjection() {\n\t\treturn this.projection.value ?? this.updatePreferredProjection();\n\t}\n\n\tprivate updatePreferredProjection() {\n\t\tthis.projection.clear();\n\n\t\tconst lastState = this.lastViewState.get({});\n\t\tif (this._viewMode.get() === TestExplorerViewMode.List) {\n\t\t\tthis.projection.value = this.instantiationService.createInstance(ListProjection, lastState);\n\t\t} else {\n\t\t\tthis.projection.value = this.instantiationService.createInstance(TreeProjection, lastState);\n\t\t}\n\n\t\tconst scheduler = this._register(new RunOnceScheduler(() => this.applyProjectionChanges(), 200));\n\t\tthis.projection.value.onUpdate(() => {\n\t\t\tif (!scheduler.isScheduled()) {\n\t\t\t\tscheduler.schedule();\n\t\t\t}\n\t\t});\n\n\t\tthis.applyProjectionChanges();\n\t\treturn this.projection.value;\n\t}\n\n\tprivate applyProjectionChanges() {\n\t\tthis.reevaluateWelcomeState();\n\t\tthis.projection.value?.applyTo(this.tree);\n\n\t\tthis.tree.refilter();\n\n\t\tif (this.hasPendingReveal) {\n\t\t\tthis.revealById(this.filterState.reveal.value);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the selected tests from the tree.\n\t */\n\tpublic getSelectedTests() {\n\t\treturn this.tree.getSelection();\n\t}\n}\n\nconst enum FilterResult {\n\tExclude,\n\tInherit,\n\tInclude,\n}\n\nconst hasNodeInOrParentOfUri = (collection: IMainThreadTestCollection, ident: IUriIdentityService, testUri: URI, fromNode?: string) => {\n\tconst queue: Iterable<string>[] = [fromNode ? [fromNode] : collection.rootIds];\n\twhile (queue.length) {\n\t\tfor (const id of queue.pop()!) {\n\t\t\tconst node = collection.getNodeById(id);\n\t\t\tif (!node) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!node.item.uri || !ident.extUri.isEqualOrParent(testUri, node.item.uri)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Only show nodes that can be expanded (and might have a child with\n\t\t\t// a range) or ones that have a physical location.\n\t\t\tif (node.item.range || node.expand === TestItemExpandState.Expandable) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tqueue.push(node.children);\n\t\t}\n\t}\n\n\treturn false;\n};\n\nclass TestsFilter implements ITreeFilter<TestExplorerTreeElement> {\n\tprivate documentUri: URI | undefined;\n\n\tconstructor(\n\t\tprivate readonly collection: IMainThreadTestCollection,\n\t\t@ITestExplorerFilterState private readonly state: ITestExplorerFilterState,\n\t\t@ITestService private readonly testService: ITestService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t) { }\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic filter(element: TestItemTreeElement): TreeFilterResult<void> {\n\t\tif (element instanceof TestTreeErrorMessage) {\n\t\t\treturn TreeVisibility.Visible;\n\t\t}\n\n\t\tif (\n\t\t\telement.test\n\t\t\t&& !this.state.isFilteringFor(TestFilterTerm.Hidden)\n\t\t\t&& this.testService.excluded.contains(element.test)\n\t\t) {\n\t\t\treturn TreeVisibility.Hidden;\n\t\t}\n\n\t\tswitch (Math.min(this.testFilterText(element), this.testLocation(element), this.testState(element), this.testTags(element))) {\n\t\t\tcase FilterResult.Exclude:\n\t\t\t\treturn TreeVisibility.Hidden;\n\t\t\tcase FilterResult.Include:\n\t\t\t\treturn TreeVisibility.Visible;\n\t\t\tdefault:\n\t\t\t\treturn TreeVisibility.Recurse;\n\t\t}\n\t}\n\n\tpublic filterToDocumentUri(uri: URI | undefined) {\n\t\tthis.documentUri = uri;\n\t}\n\n\tprivate testTags(element: TestItemTreeElement): FilterResult {\n\t\tif (!this.state.includeTags.size && !this.state.excludeTags.size) {\n\t\t\treturn FilterResult.Include;\n\t\t}\n\n\t\treturn (this.state.includeTags.size ?\n\t\t\telement.test.item.tags.some(t => this.state.includeTags.has(t)) :\n\t\t\ttrue) && element.test.item.tags.every(t => !this.state.excludeTags.has(t))\n\t\t\t? FilterResult.Include\n\t\t\t: FilterResult.Inherit;\n\t}\n\n\tprivate testState(element: TestItemTreeElement): FilterResult {\n\t\tif (this.state.isFilteringFor(TestFilterTerm.Failed)) {\n\t\t\treturn isFailedState(element.state) ? FilterResult.Include : FilterResult.Inherit;\n\t\t}\n\n\t\tif (this.state.isFilteringFor(TestFilterTerm.Executed)) {\n\t\t\treturn element.state !== TestResultState.Unset ? FilterResult.Include : FilterResult.Inherit;\n\t\t}\n\n\t\treturn FilterResult.Include;\n\t}\n\n\tprivate testLocation(element: TestItemTreeElement): FilterResult {\n\t\tif (!this.documentUri) {\n\t\t\treturn FilterResult.Include;\n\t\t}\n\n\t\tif (!this.state.isFilteringFor(TestFilterTerm.CurrentDoc) || !(element instanceof TestItemTreeElement)) {\n\t\t\treturn FilterResult.Include;\n\t\t}\n\n\t\tif (hasNodeInOrParentOfUri(this.collection, this.uriIdentityService, this.documentUri, element.test.item.extId)) {\n\t\t\treturn FilterResult.Include;\n\t\t}\n\n\t\treturn FilterResult.Inherit;\n\t}\n\n\tprivate testFilterText(element: TestItemTreeElement) {\n\t\tif (this.state.globList.length === 0) {\n\t\t\treturn FilterResult.Include;\n\t\t}\n\n\t\tconst fuzzy = this.state.fuzzy.value;\n\t\tfor (let e: TestItemTreeElement | null = element; e; e = e.parent) {\n\t\t\t// start as included if the first glob is a negation\n\t\t\tlet included = this.state.globList[0].include === false ? FilterResult.Include : FilterResult.Inherit;\n\t\t\tconst data = e.test.item.label.toLowerCase();\n\n\t\t\tfor (const { include, text } of this.state.globList) {\n\t\t\t\tif (fuzzy ? fuzzyContains(data, text) : data.includes(text)) {\n\t\t\t\t\tincluded = include ? FilterResult.Include : FilterResult.Exclude;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (included !== FilterResult.Inherit) {\n\t\t\t\treturn included;\n\t\t\t}\n\t\t}\n\n\t\treturn FilterResult.Inherit;\n\t}\n}\n\nclass TreeSorter implements ITreeSorter<TestExplorerTreeElement> {\n\tconstructor(\n\t\tprivate readonly viewModel: TestingExplorerViewModel,\n\t) { }\n\n\tpublic compare(a: TestExplorerTreeElement, b: TestExplorerTreeElement): number {\n\t\tif (a instanceof TestTreeErrorMessage || b instanceof TestTreeErrorMessage) {\n\t\t\treturn (a instanceof TestTreeErrorMessage ? -1 : 0) + (b instanceof TestTreeErrorMessage ? 1 : 0);\n\t\t}\n\n\t\tconst durationDelta = (b.duration || 0) - (a.duration || 0);\n\t\tif (this.viewModel.viewSorting === TestExplorerViewSorting.ByDuration && durationDelta !== 0) {\n\t\t\treturn durationDelta;\n\t\t}\n\n\t\tconst stateDelta = cmpPriority(a.state, b.state);\n\t\tif (this.viewModel.viewSorting === TestExplorerViewSorting.ByStatus && stateDelta !== 0) {\n\t\t\treturn stateDelta;\n\t\t}\n\n\t\tlet inSameLocation = false;\n\t\tif (a instanceof TestItemTreeElement && b instanceof TestItemTreeElement && a.test.item.uri && b.test.item.uri && a.test.item.uri.toString() === b.test.item.uri.toString() && a.test.item.range && b.test.item.range) {\n\t\t\tinSameLocation = true;\n\n\t\t\tconst delta = a.test.item.range.startLineNumber - b.test.item.range.startLineNumber;\n\t\t\tif (delta !== 0) {\n\t\t\t\treturn delta;\n\t\t\t}\n\t\t}\n\n\t\tconst sa = a.test.item.sortText;\n\t\tconst sb = b.test.item.sortText;\n\t\t// If tests are in the same location and there's no preferred sortText,\n\t\t// keep the extension's insertion order (#163449).\n\t\treturn inSameLocation && !sa && !sb ? 0 : (sa || a.test.item.label).localeCompare(sb || b.test.item.label);\n\t}\n}\n\nclass NoTestsForDocumentWidget extends Disposable {\n\tprivate readonly el: HTMLElement;\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\t@ITestExplorerFilterState filterState: ITestExplorerFilterState\n\t) {\n\t\tsuper();\n\t\tconst el = this.el = dom.append(container, dom.$('.testing-no-test-placeholder'));\n\t\tconst emptyParagraph = dom.append(el, dom.$('p'));\n\t\temptyParagraph.innerText = localize('testingNoTest', 'No tests were found in this file.');\n\t\tconst buttonLabel = localize('testingFindExtension', 'Show Workspace Tests');\n\t\tconst button = this._register(new Button(el, { title: buttonLabel, ...defaultButtonStyles }));\n\t\tbutton.label = buttonLabel;\n\t\tthis._register(button.onDidClick(() => filterState.toggleFilteringFor(TestFilterTerm.CurrentDoc, false)));\n\t}\n\n\tpublic setVisible(isVisible: boolean) {\n\t\tthis.el.classList.toggle('visible', isVisible);\n\t}\n}\n\nclass TestExplorerActionRunner extends ActionRunner {\n\tconstructor(private getSelectedTests: () => ReadonlyArray<TestExplorerTreeElement>) {\n\t\tsuper();\n\t}\n\n\tprotected override async runAction(action: IAction, context: TestExplorerTreeElement): Promise<any> {\n\t\tif (!(action instanceof MenuItemAction)) {\n\t\t\treturn super.runAction(action, context);\n\t\t}\n\n\t\tconst selection = this.getSelectedTests();\n\t\tconst contextIsSelected = selection.some(s => s === context);\n\t\tconst actualContext = contextIsSelected ? selection : [context];\n\t\tconst actionable = actualContext.filter((t): t is TestItemTreeElement => t instanceof TestItemTreeElement);\n\t\tawait action.run(...actionable);\n\t}\n}\n\nconst getLabelForTestTreeElement = (element: TestItemTreeElement) => {\n\tlet label = labelForTestInState(element.description || element.test.item.label, element.state);\n\n\tif (element instanceof TestItemTreeElement) {\n\t\tif (element.duration !== undefined) {\n\t\t\tlabel = localize({\n\t\t\t\tkey: 'testing.treeElementLabelDuration',\n\t\t\t\tcomment: ['{0} is the original label in testing.treeElementLabel, {1} is a duration'],\n\t\t\t}, '{0}, in {1}', label, formatDuration(element.duration));\n\t\t}\n\n\t\tif (element.retired) {\n\t\t\tlabel = localize({\n\t\t\t\tkey: 'testing.treeElementLabelOutdated',\n\t\t\t\tcomment: ['{0} is the original label in testing.treeElementLabel'],\n\t\t\t}, '{0}, outdated result', label);\n\t\t}\n\t}\n\n\treturn label;\n};\n\nclass ListAccessibilityProvider implements IListAccessibilityProvider<TestExplorerTreeElement> {\n\tgetWidgetAriaLabel(): string {\n\t\treturn localize('testExplorer', \"Test Explorer\");\n\t}\n\n\tgetAriaLabel(element: TestExplorerTreeElement): string {\n\t\treturn element instanceof TestTreeErrorMessage\n\t\t\t? element.description\n\t\t\t: getLabelForTestTreeElement(element);\n\t}\n}\n\nclass TreeKeyboardNavigationLabelProvider implements IKeyboardNavigationLabelProvider<TestExplorerTreeElement> {\n\tgetKeyboardNavigationLabel(element: TestExplorerTreeElement) {\n\t\treturn element instanceof TestTreeErrorMessage ? element.message : element.test.item.label;\n\t}\n}\n\nclass ListDelegate implements IListVirtualDelegate<TestExplorerTreeElement> {\n\tgetHeight(_element: TestExplorerTreeElement) {\n\t\treturn 22;\n\t}\n\n\tgetTemplateId(element: TestExplorerTreeElement) {\n\t\tif (element instanceof TestTreeErrorMessage) {\n\t\t\treturn ErrorRenderer.ID;\n\t\t}\n\n\t\treturn TestItemRenderer.ID;\n\t}\n}\n\nclass IdentityProvider implements IIdentityProvider<TestExplorerTreeElement> {\n\tpublic getId(element: TestExplorerTreeElement) {\n\t\treturn element.treeId;\n\t}\n}\n\ninterface IErrorTemplateData {\n\tlabel: HTMLElement;\n}\n\nclass ErrorRenderer implements ITreeRenderer<TestTreeErrorMessage, FuzzyScore, IErrorTemplateData> {\n\tstatic readonly ID = 'error';\n\n\tprivate readonly renderer: MarkdownRenderer;\n\n\tconstructor(@IInstantiationService instantionService: IInstantiationService) {\n\t\tthis.renderer = instantionService.createInstance(MarkdownRenderer, {});\n\t}\n\n\tget templateId(): string {\n\t\treturn ErrorRenderer.ID;\n\t}\n\n\trenderTemplate(container: HTMLElement): IErrorTemplateData {\n\t\tconst label = dom.append(container, dom.$('.error'));\n\t\treturn { label };\n\t}\n\n\trenderElement({ element }: ITreeNode<TestTreeErrorMessage, FuzzyScore>, _: number, data: IErrorTemplateData): void {\n\t\tif (typeof element.message === 'string') {\n\t\t\tdata.label.innerText = element.message;\n\t\t} else {\n\t\t\tconst result = this.renderer.render(element.message, { inline: true });\n\t\t\tdata.label.appendChild(result.element);\n\t\t}\n\n\t\tdata.label.title = element.description;\n\t}\n\n\tdisposeTemplate(): void {\n\t\t// noop\n\t}\n}\n\ninterface ITestElementTemplateData {\n\tcurrent?: TestItemTreeElement;\n\tlabel: HTMLElement;\n\ticon: HTMLElement;\n\twrapper: HTMLElement;\n\tactionBar: ActionBar;\n\telementDisposable: DisposableStore;\n\ttemplateDisposable: DisposableStore;\n}\n\nclass TestItemRenderer extends Disposable\n\timplements ITreeRenderer<TestItemTreeElement, FuzzyScore, ITestElementTemplateData> {\n\tpublic static readonly ID = 'testItem';\n\n\tconstructor(\n\t\tprivate readonly actionRunner: TestExplorerActionRunner,\n\t\t@IMenuService private readonly menuService: IMenuService,\n\t\t@ITestService protected readonly testService: ITestService,\n\t\t@ITestProfileService protected readonly profiles: ITestProfileService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITestingContinuousRunService private readonly crService: ITestingContinuousRunService,\n\t) {\n\t\tsuper();\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic readonly templateId = TestItemRenderer.ID;\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic renderTemplate(container: HTMLElement): ITestElementTemplateData {\n\t\tconst wrapper = dom.append(container, dom.$('.test-item'));\n\n\t\tconst icon = dom.append(wrapper, dom.$('.computed-state'));\n\t\tconst label = dom.append(wrapper, dom.$('.label'));\n\t\tconst disposable = new DisposableStore();\n\n\t\tdom.append(wrapper, dom.$(ThemeIcon.asCSSSelector(icons.testingHiddenIcon)));\n\t\tconst actionBar = disposable.add(new ActionBar(wrapper, {\n\t\t\tactionRunner: this.actionRunner,\n\t\t\tactionViewItemProvider: action =>\n\t\t\t\taction instanceof MenuItemAction\n\t\t\t\t\t? this.instantiationService.createInstance(MenuEntryActionViewItem, action, undefined)\n\t\t\t\t\t: undefined\n\t\t}));\n\n\t\tdisposable.add(this.crService.onDidChange(changed => {\n\t\t\tconst id = templateData.current?.test.item.extId;\n\t\t\tif (id && (!changed || changed === id || TestId.isChild(id, changed))) {\n\t\t\t\tthis.fillActionBar(templateData.current!, templateData);\n\t\t\t}\n\t\t}));\n\n\t\tconst templateData: ITestElementTemplateData = { wrapper, label, actionBar, icon, elementDisposable: new DisposableStore(), templateDisposable: disposable };\n\t\treturn templateData;\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tdisposeTemplate(templateData: ITestElementTemplateData): void {\n\t\ttemplateData.templateDisposable.clear();\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tdisposeElement(_element: ITreeNode<TestItemTreeElement, FuzzyScore>, _: number, templateData: ITestElementTemplateData): void {\n\t\ttemplateData.elementDisposable.clear();\n\t}\n\n\tprivate fillActionBar(element: TestItemTreeElement, data: ITestElementTemplateData) {\n\t\tconst { actions, contextOverlay } = getActionableElementActions(this.contextKeyService, this.menuService, this.testService, this.crService, this.profiles, element);\n\t\tconst crSelf = !!contextOverlay.getContextKeyValue(TestingContextKeys.isContinuousModeOn.key);\n\t\tconst crChild = !crSelf && this.crService.isEnabledForAChildOf(element.test.item.extId);\n\t\tdata.actionBar.domNode.classList.toggle('testing-is-continuous-run', crSelf || crChild);\n\t\tdata.actionBar.clear();\n\t\tdata.actionBar.context = element;\n\t\tdata.actionBar.push(actions.primary, { icon: true, label: false });\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic renderElement(node: ITreeNode<TestItemTreeElement, FuzzyScore>, _depth: number, data: ITestElementTemplateData): void {\n\t\tdata.elementDisposable.clear();\n\t\tdata.current = node.element;\n\t\tthis.fillActionBar(node.element, data);\n\n\n\t\tdata.elementDisposable.add(node.element.onChange(() => this._renderElement(node, data)));\n\t\tthis._renderElement(node, data);\n\t}\n\n\tpublic _renderElement(node: ITreeNode<TestItemTreeElement, FuzzyScore>, data: ITestElementTemplateData): void {\n\t\tconst testHidden = this.testService.excluded.contains(node.element.test);\n\t\tdata.wrapper.classList.toggle('test-is-hidden', testHidden);\n\n\t\tconst icon = icons.testingStatesToIcons.get(\n\t\t\tnode.element.test.expand === TestItemExpandState.BusyExpanding || node.element.test.item.busy\n\t\t\t\t? TestResultState.Running\n\t\t\t\t: node.element.state);\n\n\t\tdata.icon.className = 'computed-state ' + (icon ? ThemeIcon.asClassName(icon) : '');\n\t\tif (node.element.retired) {\n\t\t\tdata.icon.className += ' retired';\n\t\t}\n\n\t\tdata.label.title = getLabelForTestTreeElement(node.element);\n\t\tif (node.element.test.item.label.trim()) {\n\t\t\tdom.reset(data.label, ...renderLabelWithIcons(node.element.test.item.label));\n\t\t} else {\n\t\t\tdata.label.textContent = String.fromCharCode(0xA0); // &nbsp;\n\t\t}\n\n\t\tlet description = node.element.description;\n\t\tif (node.element.duration !== undefined) {\n\t\t\tdescription = description\n\t\t\t\t? `${description}: ${formatDuration(node.element.duration)}`\n\t\t\t\t: formatDuration(node.element.duration);\n\t\t}\n\n\t\tif (description) {\n\t\t\tdom.append(data.label, dom.$('span.test-label-description', {}, description));\n\t\t}\n\t}\n}\n\nconst formatDuration = (ms: number) => {\n\tif (ms < 10) {\n\t\treturn `${ms.toFixed(1)}ms`;\n\t}\n\n\tif (ms < 1_000) {\n\t\treturn `${ms.toFixed(0)}ms`;\n\t}\n\n\treturn `${(ms / 1000).toFixed(1)}s`;\n};\n\nconst getActionableElementActions = (\n\tcontextKeyService: IContextKeyService,\n\tmenuService: IMenuService,\n\ttestService: ITestService,\n\tcrService: ITestingContinuousRunService,\n\tprofiles: ITestProfileService,\n\telement: TestItemTreeElement,\n) => {\n\tconst test = element instanceof TestItemTreeElement ? element.test : undefined;\n\tconst contextKeys: [string, unknown][] = getTestItemContextOverlay(test, test ? profiles.capabilitiesForTest(test) : 0);\n\tcontextKeys.push(['view', Testing.ExplorerViewId]);\n\tif (test) {\n\t\tconst ctrl = testService.getTestController(test.controllerId);\n\t\tconst supportsCr = !!ctrl && profiles.getControllerProfiles(ctrl.id).some(p => p.supportsContinuousRun);\n\t\tcontextKeys.push([\n\t\t\tTestingContextKeys.canRefreshTests.key,\n\t\t\t!!ctrl?.canRefresh.value && TestId.isRoot(test.item.extId),\n\t\t], [\n\t\t\tTestingContextKeys.testItemIsHidden.key,\n\t\t\ttestService.excluded.contains(test)\n\t\t], [\n\t\t\tTestingContextKeys.isContinuousModeOn.key,\n\t\t\tsupportsCr && crService.isSpecificallyEnabledFor(test.item.extId)\n\t\t], [\n\t\t\tTestingContextKeys.isParentRunningContinuously.key,\n\t\t\tsupportsCr && crService.isEnabledForAParentOf(test.item.extId)\n\t\t], [\n\t\t\tTestingContextKeys.supportsContinuousRun.key,\n\t\t\tsupportsCr,\n\t\t]);\n\t}\n\n\tconst contextOverlay = contextKeyService.createOverlay(contextKeys);\n\tconst menu = menuService.createMenu(MenuId.TestItem, contextOverlay);\n\n\ttry {\n\t\tconst primary: IAction[] = [];\n\t\tconst secondary: IAction[] = [];\n\t\tconst result = { primary, secondary };\n\t\tcreateAndFillInActionBarActions(menu, {\n\t\t\tshouldForwardArgs: true,\n\t\t}, result, 'inline');\n\n\t\treturn { actions: result, contextOverlay };\n\t} finally {\n\t\tmenu.dispose();\n\t}\n};\n\nregisterThemingParticipant((theme, collector) => {\n\tif (theme.type === 'dark') {\n\t\tconst foregroundColor = theme.getColor(foreground);\n\t\tif (foregroundColor) {\n\t\t\tconst fgWithOpacity = new Color(new RGBA(foregroundColor.rgba.r, foregroundColor.rgba.g, foregroundColor.rgba.b, 0.65));\n\t\t\tcollector.addRule(`.test-explorer .test-explorer-messages { color: ${fgWithOpacity}; }`);\n\t\t}\n\t}\n});\n"]}