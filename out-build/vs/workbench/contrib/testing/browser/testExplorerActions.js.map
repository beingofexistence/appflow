{"version":3,"sources":["vs/workbench/contrib/testing/browser/testExplorerActions.ts"],"names":[],"mappings":"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","file":"testExplorerActions.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from 'vs/base/common/arrays';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { KeyChord, KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { isDefined } from 'vs/base/common/types';\nimport { isCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { MessageController } from 'vs/editor/contrib/message/browser/messageController';\nimport { localize } from 'vs/nls';\nimport { Categories } from 'vs/platform/action/common/actionCommonCategories';\nimport { Action2, IAction2Options, MenuId } from 'vs/platform/actions/common/actions';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ContextKeyExpr, ContextKeyExpression, ContextKeyGreaterExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IProgressService, ProgressLocation } from 'vs/platform/progress/common/progress';\nimport { IQuickInputService, IQuickPickItem, IQuickPickSeparator } from 'vs/platform/quickinput/common/quickInput';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { ViewAction } from 'vs/workbench/browser/parts/views/viewPane';\nimport { FocusedViewContext } from 'vs/workbench/common/contextkeys';\nimport { IViewsService, ViewContainerLocation } from 'vs/workbench/common/views';\nimport { VIEWLET_ID as EXTENSIONS_VIEWLET_ID, IExtensionsViewPaneContainer } from 'vs/workbench/contrib/extensions/common/extensions';\nimport { TestExplorerTreeElement, TestItemTreeElement } from 'vs/workbench/contrib/testing/browser/explorerProjections/index';\nimport * as icons from 'vs/workbench/contrib/testing/browser/icons';\nimport { TestingExplorerView } from 'vs/workbench/contrib/testing/browser/testingExplorerView';\nimport { TestResultsView } from 'vs/workbench/contrib/testing/browser/testingOutputPeek';\nimport { TestingConfigKeys, getTestingConfiguration } from 'vs/workbench/contrib/testing/common/configuration';\nimport { TestCommandId, TestExplorerViewMode, TestExplorerViewSorting, Testing, testConfigurationGroupNames } from 'vs/workbench/contrib/testing/common/constants';\nimport { TestId } from 'vs/workbench/contrib/testing/common/testId';\nimport { ITestProfileService, canUseProfileWithTest } from 'vs/workbench/contrib/testing/common/testProfileService';\nimport { ITestResult } from 'vs/workbench/contrib/testing/common/testResult';\nimport { ITestResultService } from 'vs/workbench/contrib/testing/common/testResultService';\nimport { IMainThreadTestCollection, IMainThreadTestController, ITestService, expandAndGetTestById, testsInFile } from 'vs/workbench/contrib/testing/common/testService';\nimport { ExtTestRunProfileKind, ITestRunProfile, InternalTestItem, TestRunProfileBitset } from 'vs/workbench/contrib/testing/common/testTypes';\nimport { TestingContextKeys } from 'vs/workbench/contrib/testing/common/testingContextKeys';\nimport { ITestingContinuousRunService } from 'vs/workbench/contrib/testing/common/testingContinuousRunService';\nimport { ITestingPeekOpener } from 'vs/workbench/contrib/testing/common/testingPeekOpener';\nimport { isFailedState } from 'vs/workbench/contrib/testing/common/testingStates';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IPaneCompositePartService } from 'vs/workbench/services/panecomposite/browser/panecomposite';\n\nconst category = Categories.Test;\n\nconst enum ActionOrder {\n\t// Navigation:\n\tRefresh = 10,\n\tRun,\n\tDebug,\n\tCoverage,\n\tRunContinuous,\n\tRunUsing,\n\n\t// Submenu:\n\tCollapse,\n\tClearResults,\n\tDisplayMode,\n\tSort,\n\tGoToTest,\n\tHideTest,\n\tContinuousRunTest = -1 >>> 1, // max int, always at the end to avoid shifting on hover\n}\n\nconst hasAnyTestProvider = ContextKeyGreaterExpr.create(TestingContextKeys.providerCount.key, 0);\n\nexport class HideTestAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.HideTestAction,\n\t\t\ttitle: localize('hideTest', 'Hide Test'),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.TestItem,\n\t\t\t\tgroup: 'builtin@2',\n\t\t\t\twhen: TestingContextKeys.testItemIsHidden.isEqualTo(false)\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic override run(accessor: ServicesAccessor, ...elements: TestItemTreeElement[]) {\n\t\tconst service = accessor.get(ITestService);\n\t\tfor (const element of elements) {\n\t\t\tservice.excluded.toggle(element.test, true);\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n}\n\nexport class UnhideTestAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.UnhideTestAction,\n\t\t\ttitle: localize('unhideTest', 'Unhide Test'),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.TestItem,\n\t\t\t\torder: ActionOrder.HideTest,\n\t\t\t\twhen: TestingContextKeys.testItemIsHidden.isEqualTo(true)\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic override run(accessor: ServicesAccessor, ...elements: InternalTestItem[]) {\n\t\tconst service = accessor.get(ITestService);\n\t\tfor (const element of elements) {\n\t\t\tif (element instanceof TestItemTreeElement) {\n\t\t\t\tservice.excluded.toggle(element.test, false);\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n}\n\nexport class UnhideAllTestsAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.UnhideAllTestsAction,\n\t\t\ttitle: localize('unhideAllTests', 'Unhide All Tests'),\n\t\t});\n\t}\n\n\tpublic override run(accessor: ServicesAccessor) {\n\t\tconst service = accessor.get(ITestService);\n\t\tservice.excluded.clear();\n\t\treturn Promise.resolve();\n\t}\n}\n\nconst testItemInlineAndInContext = (order: ActionOrder, when?: ContextKeyExpression) => [\n\t{\n\t\tid: MenuId.TestItem,\n\t\tgroup: 'inline',\n\t\torder,\n\t\twhen,\n\t}, {\n\t\tid: MenuId.TestItem,\n\t\tgroup: 'builtin@1',\n\t\torder,\n\t\twhen,\n\t}\n];\n\nexport class DebugAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.DebugAction,\n\t\t\ttitle: localize('debug test', 'Debug Test'),\n\t\t\ticon: icons.testingDebugIcon,\n\t\t\tmenu: testItemInlineAndInContext(ActionOrder.Debug, TestingContextKeys.hasDebuggableTests.isEqualTo(true)),\n\t\t});\n\t}\n\n\tpublic override run(acessor: ServicesAccessor, ...elements: TestItemTreeElement[]): Promise<any> {\n\t\treturn acessor.get(ITestService).runTests({\n\t\t\ttests: elements.map(e => e.test),\n\t\t\tgroup: TestRunProfileBitset.Debug,\n\t\t});\n\t}\n}\n\nexport class RunUsingProfileAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.RunUsingProfileAction,\n\t\t\ttitle: localize('testing.runUsing', 'Execute Using Profile...'),\n\t\t\ticon: icons.testingDebugIcon,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.TestItem,\n\t\t\t\torder: ActionOrder.RunUsing,\n\t\t\t\tgroup: 'builtin@2',\n\t\t\t\twhen: TestingContextKeys.hasNonDefaultProfile.isEqualTo(true),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic override async run(acessor: ServicesAccessor, ...elements: TestItemTreeElement[]): Promise<any> {\n\t\tconst commandService = acessor.get(ICommandService);\n\t\tconst testService = acessor.get(ITestService);\n\t\tconst profile: ITestRunProfile | undefined = await commandService.executeCommand('vscode.pickTestProfile', {\n\t\t\tonlyForTest: elements[0].test,\n\t\t});\n\t\tif (!profile) {\n\t\t\treturn;\n\t\t}\n\n\t\ttestService.runResolvedTests({\n\t\t\ttargets: [{\n\t\t\t\tprofileGroup: profile.group,\n\t\t\t\tprofileId: profile.profileId,\n\t\t\t\tcontrollerId: profile.controllerId,\n\t\t\t\ttestIds: elements.filter(t => canUseProfileWithTest(profile, t.test)).map(t => t.test.item.extId)\n\t\t\t}]\n\t\t});\n\t}\n}\n\nexport class RunAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.RunAction,\n\t\t\ttitle: localize('run test', 'Run Test'),\n\t\t\ticon: icons.testingRunIcon,\n\t\t\tmenu: testItemInlineAndInContext(ActionOrder.Run, TestingContextKeys.hasRunnableTests.isEqualTo(true)),\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic override run(acessor: ServicesAccessor, ...elements: TestItemTreeElement[]): Promise<any> {\n\t\treturn acessor.get(ITestService).runTests({\n\t\t\ttests: elements.map(e => e.test),\n\t\t\tgroup: TestRunProfileBitset.Run,\n\t\t});\n\t}\n}\n\nexport class SelectDefaultTestProfiles extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.SelectDefaultTestProfiles,\n\t\t\ttitle: localize('testing.selectDefaultTestProfiles', 'Select Default Profile'),\n\t\t\ticon: icons.testingUpdateProfiles,\n\t\t\tcategory,\n\t\t});\n\t}\n\n\tpublic override async run(acessor: ServicesAccessor, onlyGroup: TestRunProfileBitset) {\n\t\tconst commands = acessor.get(ICommandService);\n\t\tconst testProfileService = acessor.get(ITestProfileService);\n\t\tconst profiles = await commands.executeCommand<ITestRunProfile[]>('vscode.pickMultipleTestProfiles', {\n\t\t\tshowConfigureButtons: false,\n\t\t\tselected: testProfileService.getGroupDefaultProfiles(onlyGroup),\n\t\t\tonlyGroup,\n\t\t});\n\n\t\tif (profiles?.length) {\n\t\t\ttestProfileService.setGroupDefaultProfiles(onlyGroup, profiles);\n\t\t}\n\t}\n}\n\nexport class ContinuousRunTestAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.ToggleContinousRunForTest,\n\t\t\ttitle: localize('testing.toggleContinuousRunOn', 'Turn on Continuous Run'),\n\t\t\ticon: icons.testingTurnContinuousRunOn,\n\t\t\tprecondition: ContextKeyExpr.or(\n\t\t\t\tTestingContextKeys.isContinuousModeOn.isEqualTo(true),\n\t\t\t\tTestingContextKeys.isParentRunningContinuously.isEqualTo(false)\n\t\t\t),\n\t\t\ttoggled: {\n\t\t\t\tcondition: TestingContextKeys.isContinuousModeOn.isEqualTo(true),\n\t\t\t\ticon: icons.testingContinuousIsOn,\n\t\t\t\ttitle: localize('testing.toggleContinuousRunOff', 'Turn off Continuous Run'),\n\t\t\t},\n\t\t\tmenu: testItemInlineAndInContext(ActionOrder.ContinuousRunTest, TestingContextKeys.supportsContinuousRun.isEqualTo(true)),\n\t\t});\n\t}\n\n\tpublic override async run(accessor: ServicesAccessor, ...elements: TestItemTreeElement[]): Promise<any> {\n\t\tconst crService = accessor.get(ITestingContinuousRunService);\n\t\tconst profileService = accessor.get(ITestProfileService);\n\t\tfor (const element of elements) {\n\t\t\tconst id = element.test.item.extId;\n\t\t\tif (crService.isSpecificallyEnabledFor(id)) {\n\t\t\t\tcrService.stop(id);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst profiles = profileService.getGroupDefaultProfiles(TestRunProfileBitset.Run)\n\t\t\t\t.filter(p => p.supportsContinuousRun && p.controllerId === element.test.controllerId);\n\t\t\tif (!profiles.length) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcrService.start(profiles, id);\n\t\t}\n\t}\n}\n\nexport class ContinuousRunUsingProfileTestAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.ContinousRunUsingForTest,\n\t\t\ttitle: localize('testing.startContinuousRunUsing', 'Start Continous Run Using...'),\n\t\t\ticon: icons.testingDebugIcon,\n\t\t\tmenu: [\n\t\t\t\t{\n\t\t\t\t\tid: MenuId.TestItem,\n\t\t\t\t\torder: ActionOrder.RunContinuous,\n\t\t\t\t\tgroup: 'builtin@2',\n\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\tTestingContextKeys.supportsContinuousRun.isEqualTo(true),\n\t\t\t\t\t\tTestingContextKeys.isContinuousModeOn.isEqualTo(false),\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t],\n\t\t});\n\t}\n\n\tpublic override async run(accessor: ServicesAccessor, ...elements: TestItemTreeElement[]): Promise<any> {\n\t\tconst crService = accessor.get(ITestingContinuousRunService);\n\t\tconst profileService = accessor.get(ITestProfileService);\n\t\tconst notificationService = accessor.get(INotificationService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\n\t\tfor (const element of elements) {\n\t\t\tconst selected = await selectContinuousRunProfiles(crService, notificationService, quickInputService,\n\t\t\t\t[{ profiles: profileService.getControllerProfiles(element.test.controllerId) }]);\n\n\t\t\tif (selected.length) {\n\t\t\t\tcrService.start(selected, element.test.item.extId);\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class ConfigureTestProfilesAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.ConfigureTestProfilesAction,\n\t\t\ttitle: { value: localize('testing.configureProfile', 'Configure Test Profiles'), original: 'Configure Test Profiles' },\n\t\t\ticon: icons.testingUpdateProfiles,\n\t\t\tf1: true,\n\t\t\tcategory,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: TestingContextKeys.hasConfigurableProfile.isEqualTo(true),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic override async run(acessor: ServicesAccessor, onlyGroup?: TestRunProfileBitset) {\n\t\tconst commands = acessor.get(ICommandService);\n\t\tconst testProfileService = acessor.get(ITestProfileService);\n\t\tconst profile = await commands.executeCommand<ITestRunProfile>('vscode.pickTestProfile', {\n\t\t\tplaceholder: localize('configureProfile', 'Select a profile to update'),\n\t\t\tshowConfigureButtons: false,\n\t\t\tonlyConfigurable: true,\n\t\t\tonlyGroup,\n\t\t});\n\n\t\tif (profile) {\n\t\t\ttestProfileService.configure(profile.controllerId, profile.profileId);\n\t\t}\n\t}\n}\n\nconst continuousMenus = (whenIsContinuousOn: boolean): IAction2Options['menu'] => [\n\t{\n\t\tid: MenuId.ViewTitle,\n\t\tgroup: 'navigation',\n\t\torder: ActionOrder.RunUsing,\n\t\twhen: ContextKeyExpr.and(\n\t\t\tContextKeyExpr.equals('view', Testing.ExplorerViewId),\n\t\t\tTestingContextKeys.supportsContinuousRun.isEqualTo(true),\n\t\t\tTestingContextKeys.isContinuousModeOn.isEqualTo(whenIsContinuousOn),\n\t\t),\n\t},\n\t{\n\t\tid: MenuId.CommandPalette,\n\t\twhen: TestingContextKeys.supportsContinuousRun.isEqualTo(true),\n\t},\n];\n\nclass StopContinuousRunAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.StopContinousRun,\n\t\t\ttitle: { value: localize('testing.stopContinuous', \"Stop Continuous Run\"), original: 'Stop Continuous Run' },\n\t\t\tcategory,\n\t\t\ticon: icons.testingTurnContinuousRunOff,\n\t\t\tmenu: continuousMenus(true),\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor): void {\n\t\taccessor.get(ITestingContinuousRunService).stop();\n\t}\n}\n\nfunction selectContinuousRunProfiles(\n\tcrs: ITestingContinuousRunService,\n\tnotificationService: INotificationService,\n\tquickInputService: IQuickInputService,\n\tprofilesToPickFrom: Iterable<Readonly<{\n\t\tcontroller?: IMainThreadTestController;\n\t\tprofiles: ITestRunProfile[];\n\t}>>,\n): Promise<ITestRunProfile[]> {\n\ttype ItemType = IQuickPickItem & { profile: ITestRunProfile };\n\n\tconst items: ItemType[] = [];\n\tfor (const { controller, profiles } of profilesToPickFrom) {\n\t\tfor (const profile of profiles) {\n\t\t\tif (profile.supportsContinuousRun) {\n\t\t\t\titems.push({\n\t\t\t\t\tlabel: profile.label || controller?.label.value || '',\n\t\t\t\t\tdescription: controller?.label.value,\n\t\t\t\t\tprofile,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tif (items.length === 0) {\n\t\tnotificationService.info(localize('testing.noProfiles', 'No test continuous run-enabled profiles were found'));\n\t\treturn Promise.resolve([]);\n\t}\n\n\t// special case: don't bother to quick a pickpick if there's only a single profile\n\tif (items.length === 1) {\n\t\treturn Promise.resolve([items[0].profile]);\n\t}\n\n\tconst qpItems: (ItemType | IQuickPickSeparator)[] = [];\n\tconst selectedItems: ItemType[] = [];\n\tconst lastRun = crs.lastRunProfileIds;\n\n\titems.sort((a, b) => a.profile.group - b.profile.group\n\t\t|| a.profile.controllerId.localeCompare(b.profile.controllerId)\n\t\t|| a.label.localeCompare(b.label));\n\n\tfor (let i = 0; i < items.length; i++) {\n\t\tconst item = items[i];\n\t\tif (i === 0 || items[i - 1].profile.group !== item.profile.group) {\n\t\t\tqpItems.push({ type: 'separator', label: testConfigurationGroupNames[item.profile.group] });\n\t\t}\n\n\t\tqpItems.push(item);\n\t\tif (lastRun.has(item.profile.profileId)) {\n\t\t\tselectedItems.push(item);\n\t\t}\n\t}\n\n\tconst quickpick = quickInputService.createQuickPick<IQuickPickItem & { profile: ITestRunProfile }>();\n\tquickpick.title = localize('testing.selectContinuousProfiles', 'Select profiles to run when files change:');\n\tquickpick.canSelectMany = true;\n\tquickpick.items = qpItems;\n\tquickpick.selectedItems = selectedItems;\n\tquickpick.show();\n\treturn new Promise((resolve, reject) => {\n\t\tquickpick.onDidAccept(() => {\n\t\t\tresolve(quickpick.selectedItems.map(i => i.profile));\n\t\t\tquickpick.dispose();\n\t\t});\n\n\t\tquickpick.onDidHide(() => {\n\t\t\tresolve([]);\n\t\t\tquickpick.dispose();\n\t\t});\n\t});\n}\n\nclass StartContinuousRunAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.StartContinousRun,\n\t\t\ttitle: { value: localize('testing.startContinuous', \"Start Continuous Run\"), original: 'Enable Continuous Run' },\n\t\t\tcategory,\n\t\t\ticon: icons.testingTurnContinuousRunOn,\n\t\t\tmenu: continuousMenus(false),\n\t\t});\n\t}\n\tasync run(accessor: ServicesAccessor, ...args: any[]): Promise<void> {\n\t\tconst crs = accessor.get(ITestingContinuousRunService);\n\t\tconst selected = await selectContinuousRunProfiles(crs, accessor.get(INotificationService), accessor.get(IQuickInputService), accessor.get(ITestProfileService).all());\n\t\tif (selected.length) {\n\t\t\tcrs.start(selected);\n\t\t}\n\t}\n}\n\nabstract class ExecuteSelectedAction extends ViewAction<TestingExplorerView> {\n\tconstructor(options: IAction2Options, private readonly group: TestRunProfileBitset) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: group === TestRunProfileBitset.Run\n\t\t\t\t\t? ActionOrder.Run\n\t\t\t\t\t: group === TestRunProfileBitset.Debug\n\t\t\t\t\t\t? ActionOrder.Debug\n\t\t\t\t\t\t: ActionOrder.Coverage,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tContextKeyExpr.equals('view', Testing.ExplorerViewId),\n\t\t\t\t\tTestingContextKeys.isRunning.isEqualTo(false),\n\t\t\t\t\tTestingContextKeys.capabilityToContextKey[group].isEqualTo(true),\n\t\t\t\t)\n\t\t\t}],\n\t\t\tcategory,\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(accessor: ServicesAccessor, view: TestingExplorerView): Promise<ITestResult | undefined> {\n\t\tconst { include, exclude } = view.getTreeIncludeExclude();\n\t\treturn accessor.get(ITestService).runTests({ tests: include, exclude, group: this.group });\n\t}\n}\n\nexport class GetSelectedProfiles extends Action2 {\n\tconstructor() {\n\t\tsuper({ id: TestCommandId.GetSelectedProfiles, title: localize('getSelectedProfiles', 'Get Selected Profiles') });\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic override run(accessor: ServicesAccessor) {\n\t\tconst profiles = accessor.get(ITestProfileService);\n\t\treturn [\n\t\t\t...profiles.getGroupDefaultProfiles(TestRunProfileBitset.Run),\n\t\t\t...profiles.getGroupDefaultProfiles(TestRunProfileBitset.Debug),\n\t\t\t...profiles.getGroupDefaultProfiles(TestRunProfileBitset.Coverage),\n\t\t].map(p => ({\n\t\t\tcontrollerId: p.controllerId,\n\t\t\tlabel: p.label,\n\t\t\tkind: p.group & TestRunProfileBitset.Coverage\n\t\t\t\t? ExtTestRunProfileKind.Coverage\n\t\t\t\t: p.group & TestRunProfileBitset.Debug\n\t\t\t\t\t? ExtTestRunProfileKind.Debug\n\t\t\t\t\t: ExtTestRunProfileKind.Run,\n\t\t}));\n\t}\n}\n\nexport class GetExplorerSelection extends ViewAction<TestingExplorerView> {\n\tconstructor() {\n\t\tsuper({ id: TestCommandId.GetExplorerSelection, title: localize('getExplorerSelection', 'Get Explorer Selection'), viewId: Testing.ExplorerViewId });\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic override runInView(_accessor: ServicesAccessor, view: TestingExplorerView) {\n\t\tconst { include, exclude } = view.getTreeIncludeExclude(undefined, 'selected');\n\t\tconst mapper = (i: InternalTestItem) => i.item.extId;\n\t\treturn { include: include.map(mapper), exclude: exclude.map(mapper) };\n\t}\n}\n\nexport class RunSelectedAction extends ExecuteSelectedAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.RunSelectedAction,\n\t\t\ttitle: localize('runSelectedTests', 'Run Tests'),\n\t\t\ticon: icons.testingRunAllIcon,\n\t\t}, TestRunProfileBitset.Run);\n\t}\n}\n\nexport class DebugSelectedAction extends ExecuteSelectedAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.DebugSelectedAction,\n\t\t\ttitle: localize('debugSelectedTests', 'Debug Tests'),\n\t\t\ticon: icons.testingDebugAllIcon,\n\t\t}, TestRunProfileBitset.Debug);\n\t}\n}\n\nconst showDiscoveringWhile = <R>(progress: IProgressService, task: Promise<R>): Promise<R> => {\n\treturn progress.withProgress(\n\t\t{\n\t\t\tlocation: ProgressLocation.Window,\n\t\t\ttitle: localize('discoveringTests', 'Discovering Tests'),\n\t\t},\n\t\t() => task,\n\t);\n};\n\nabstract class RunOrDebugAllTestsAction extends Action2 {\n\tconstructor(options: IAction2Options, private readonly group: TestRunProfileBitset, private noTestsFoundError: string) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tcategory,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: TestingContextKeys.capabilityToContextKey[group].isEqualTo(true),\n\t\t\t}]\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor) {\n\t\tconst testService = accessor.get(ITestService);\n\t\tconst notifications = accessor.get(INotificationService);\n\n\t\tconst roots = [...testService.collection.rootItems];\n\t\tif (!roots.length) {\n\t\t\tnotifications.info(this.noTestsFoundError);\n\t\t\treturn;\n\t\t}\n\n\t\tawait testService.runTests({ tests: roots, group: this.group });\n\t}\n}\n\nexport class RunAllAction extends RunOrDebugAllTestsAction {\n\tconstructor() {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tid: TestCommandId.RunAllAction,\n\t\t\t\ttitle: localize('runAllTests', 'Run All Tests'),\n\t\t\t\ticon: icons.testingRunAllIcon,\n\t\t\t\tkeybinding: {\n\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyCode.KeyA),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTestRunProfileBitset.Run,\n\t\t\tlocalize('noTestProvider', 'No tests found in this workspace. You may need to install a test provider extension'),\n\t\t);\n\t}\n}\n\nexport class DebugAllAction extends RunOrDebugAllTestsAction {\n\tconstructor() {\n\t\tsuper(\n\t\t\t{\n\t\t\t\tid: TestCommandId.DebugAllAction,\n\t\t\t\ttitle: localize('debugAllTests', 'Debug All Tests'),\n\t\t\t\ticon: icons.testingDebugIcon,\n\t\t\t\tkeybinding: {\n\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyMod.CtrlCmd | KeyCode.KeyA),\n\t\t\t\t},\n\t\t\t},\n\t\t\tTestRunProfileBitset.Debug,\n\t\t\tlocalize('noDebugTestProvider', 'No debuggable tests found in this workspace. You may need to install a test provider extension'),\n\t\t);\n\t}\n}\n\nexport class CancelTestRunAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.CancelTestRunAction,\n\t\t\ttitle: { value: localize('testing.cancelRun', \"Cancel Test Run\"), original: 'Cancel Test Run' },\n\t\t\ticon: icons.testingCancelIcon,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyMod.CtrlCmd | KeyCode.KeyX),\n\t\t\t},\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.Run,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tContextKeyExpr.equals('view', Testing.ExplorerViewId),\n\t\t\t\t\tContextKeyExpr.equals(TestingContextKeys.isRunning.serialize(), true),\n\t\t\t\t)\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic async run(accessor: ServicesAccessor) {\n\t\tconst resultService = accessor.get(ITestResultService);\n\t\tconst testService = accessor.get(ITestService);\n\t\tfor (const run of resultService.results) {\n\t\t\tif (!run.completedAt) {\n\t\t\t\ttestService.cancelTestRun(run.id);\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class TestingViewAsListAction extends ViewAction<TestingExplorerView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.TestingViewAsListAction,\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t\ttitle: { value: localize('testing.viewAsList', \"View as List\"), original: 'View as List' },\n\t\t\ttoggled: TestingContextKeys.viewMode.isEqualTo(TestExplorerViewMode.List),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.DisplayMode,\n\t\t\t\tgroup: 'viewAs',\n\t\t\t\twhen: ContextKeyExpr.equals('view', Testing.ExplorerViewId)\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(_accessor: ServicesAccessor, view: TestingExplorerView) {\n\t\tview.viewModel.viewMode = TestExplorerViewMode.List;\n\t}\n}\n\nexport class TestingViewAsTreeAction extends ViewAction<TestingExplorerView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.TestingViewAsTreeAction,\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t\ttitle: { value: localize('testing.viewAsTree', \"View as Tree\"), original: 'View as Tree' },\n\t\t\ttoggled: TestingContextKeys.viewMode.isEqualTo(TestExplorerViewMode.Tree),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.DisplayMode,\n\t\t\t\tgroup: 'viewAs',\n\t\t\t\twhen: ContextKeyExpr.equals('view', Testing.ExplorerViewId)\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(_accessor: ServicesAccessor, view: TestingExplorerView) {\n\t\tview.viewModel.viewMode = TestExplorerViewMode.Tree;\n\t}\n}\n\n\nexport class TestingSortByStatusAction extends ViewAction<TestingExplorerView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.TestingSortByStatusAction,\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t\ttitle: { value: localize('testing.sortByStatus', \"Sort by Status\"), original: 'Sort by Status' },\n\t\t\ttoggled: TestingContextKeys.viewSorting.isEqualTo(TestExplorerViewSorting.ByStatus),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.Sort,\n\t\t\t\tgroup: 'sortBy',\n\t\t\t\twhen: ContextKeyExpr.equals('view', Testing.ExplorerViewId)\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(_accessor: ServicesAccessor, view: TestingExplorerView) {\n\t\tview.viewModel.viewSorting = TestExplorerViewSorting.ByStatus;\n\t}\n}\n\nexport class TestingSortByLocationAction extends ViewAction<TestingExplorerView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.TestingSortByLocationAction,\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t\ttitle: { value: localize('testing.sortByLocation', \"Sort by Location\"), original: 'Sort by Location' },\n\t\t\ttoggled: TestingContextKeys.viewSorting.isEqualTo(TestExplorerViewSorting.ByLocation),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.Sort,\n\t\t\t\tgroup: 'sortBy',\n\t\t\t\twhen: ContextKeyExpr.equals('view', Testing.ExplorerViewId)\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(_accessor: ServicesAccessor, view: TestingExplorerView) {\n\t\tview.viewModel.viewSorting = TestExplorerViewSorting.ByLocation;\n\t}\n}\n\nexport class TestingSortByDurationAction extends ViewAction<TestingExplorerView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.TestingSortByDurationAction,\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t\ttitle: { value: localize('testing.sortByDuration', \"Sort by Duration\"), original: 'Sort by Duration' },\n\t\t\ttoggled: TestingContextKeys.viewSorting.isEqualTo(TestExplorerViewSorting.ByDuration),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.Sort,\n\t\t\t\tgroup: 'sortBy',\n\t\t\t\twhen: ContextKeyExpr.equals('view', Testing.ExplorerViewId)\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(_accessor: ServicesAccessor, view: TestingExplorerView) {\n\t\tview.viewModel.viewSorting = TestExplorerViewSorting.ByDuration;\n\t}\n}\n\nexport class ShowMostRecentOutputAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.ShowMostRecentOutputAction,\n\t\t\ttitle: { value: localize('testing.showMostRecentOutput', \"Show Output\"), original: 'Show Output' },\n\t\t\tcategory,\n\t\t\ticon: Codicon.terminal,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyMod.CtrlCmd | KeyCode.KeyO),\n\t\t\t},\n\t\t\tprecondition: TestingContextKeys.hasAnyResults.isEqualTo(true),\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.Collapse,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\twhen: ContextKeyExpr.equals('view', Testing.ExplorerViewId),\n\t\t\t}, {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: TestingContextKeys.hasAnyResults.isEqualTo(true)\n\t\t\t}]\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor) {\n\t\tconst viewService = accessor.get(IViewsService);\n\t\tconst testView = await viewService.openView<TestResultsView>(Testing.ResultsViewId, true);\n\t\ttestView?.showLatestRun();\n\t}\n}\n\nexport class CollapseAllAction extends ViewAction<TestingExplorerView> {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.CollapseAllAction,\n\t\t\tviewId: Testing.ExplorerViewId,\n\t\t\ttitle: { value: localize('testing.collapseAll', \"Collapse All Tests\"), original: 'Collapse All Tests' },\n\t\t\ticon: Codicon.collapseAll,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.Collapse,\n\t\t\t\tgroup: 'displayAction',\n\t\t\t\twhen: ContextKeyExpr.equals('view', Testing.ExplorerViewId)\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic runInView(_accessor: ServicesAccessor, view: TestingExplorerView) {\n\t\tview.viewModel.collapseAll();\n\t}\n}\n\nexport class ClearTestResultsAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.ClearTestResultsAction,\n\t\t\ttitle: { value: localize('testing.clearResults', \"Clear All Results\"), original: 'Clear All Results' },\n\t\t\tcategory,\n\t\t\ticon: Codicon.trash,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.TestPeekTitle,\n\t\t\t}, {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: TestingContextKeys.hasAnyResults.isEqualTo(true),\n\t\t\t}, {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.ClearResults,\n\t\t\t\tgroup: 'displayAction',\n\t\t\t\twhen: ContextKeyExpr.equals('view', Testing.ExplorerViewId)\n\t\t\t}, {\n\t\t\t\tid: MenuId.ViewTitle,\n\t\t\t\torder: ActionOrder.ClearResults,\n\t\t\t\tgroup: 'navigation',\n\t\t\t\twhen: ContextKeyExpr.equals('view', Testing.ResultsViewId)\n\t\t\t}],\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic run(accessor: ServicesAccessor) {\n\t\taccessor.get(ITestResultService).clear();\n\t}\n}\n\nexport class GoToTest extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.GoToTest,\n\t\t\ttitle: { value: localize('testing.editFocusedTest', \"Go to Test\"), original: 'Go to Test' },\n\t\t\ticon: Codicon.goToFile,\n\t\t\tmenu: testItemInlineAndInContext(ActionOrder.GoToTest, TestingContextKeys.testItemHasUri.isEqualTo(true)),\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib - 10,\n\t\t\t\twhen: FocusedViewContext.isEqualTo(Testing.ExplorerViewId),\n\t\t\t\tprimary: KeyCode.Enter | KeyMod.Alt,\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic override async run(accessor: ServicesAccessor, element?: TestExplorerTreeElement, preserveFocus?: boolean) {\n\t\tif (!element) {\n\t\t\tconst view = accessor.get(IViewsService).getActiveViewWithId<TestingExplorerView>(Testing.ExplorerViewId);\n\t\t\telement = view?.focusedTreeElements[0];\n\t\t}\n\n\t\tif (element && element instanceof TestItemTreeElement) {\n\t\t\taccessor.get(ICommandService).executeCommand('vscode.revealTest', element.test.item.extId, preserveFocus);\n\t\t}\n\t}\n}\n\nabstract class ExecuteTestAtCursor extends Action2 {\n\tconstructor(options: IAction2Options, protected readonly group: TestRunProfileBitset) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: hasAnyTestProvider,\n\t\t\t}, {\n\t\t\t\tid: MenuId.EditorContext,\n\t\t\t\tgroup: 'testing',\n\t\t\t\torder: group === TestRunProfileBitset.Run ? ActionOrder.Run : ActionOrder.Debug,\n\t\t\t\twhen: ContextKeyExpr.and(TestingContextKeys.activeEditorHasTests, TestingContextKeys.capabilityToContextKey[group]),\n\t\t\t}]\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic async run(accessor: ServicesAccessor) {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst activeEditorPane = editorService.activeEditorPane;\n\t\tconst activeControl = editorService.activeTextEditorControl;\n\t\tif (!activeEditorPane || !activeControl) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst position = activeControl?.getPosition();\n\t\tconst model = activeControl?.getModel();\n\t\tif (!position || !model || !('uri' in model)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst testService = accessor.get(ITestService);\n\t\tconst profileService = accessor.get(ITestProfileService);\n\t\tconst uriIdentityService = accessor.get(IUriIdentityService);\n\t\tconst progressService = accessor.get(IProgressService);\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\n\t\tlet bestNodes: InternalTestItem[] = [];\n\t\tlet bestRange: Range | undefined;\n\n\t\tlet bestNodesBefore: InternalTestItem[] = [];\n\t\tlet bestRangeBefore: Range | undefined;\n\n\t\tconst saveBeforeTest = getTestingConfiguration(configurationService, TestingConfigKeys.SaveBeforeTest);\n\t\tif (saveBeforeTest) {\n\t\t\tawait editorService.save({ editor: activeEditorPane.input, groupId: activeEditorPane.group.id });\n\t\t\tawait testService.syncTests();\n\t\t}\n\n\t\t// testsInFile will descend in the test tree. We assume that as we go\n\t\t// deeper, ranges get more specific. We'll want to run all tests whose\n\t\t// range is equal to the most specific range we find (see #133519)\n\t\t//\n\t\t// If we don't find any test whose range contains the position, we pick\n\t\t// the closest one before the position. Again, if we find several tests\n\t\t// whose range is equal to the closest one, we run them all.\n\t\tawait showDiscoveringWhile(progressService, (async () => {\n\t\t\tfor await (const test of testsInFile(testService, uriIdentityService, model.uri)) {\n\t\t\t\tif (!test.item.range || !(profileService.capabilitiesForTest(test) & this.group)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst irange = Range.lift(test.item.range);\n\t\t\t\tif (irange.containsPosition(position)) {\n\t\t\t\t\tif (bestRange && Range.equalsRange(test.item.range, bestRange)) {\n\t\t\t\t\t\t// check that a parent isn't already included (#180760)\n\t\t\t\t\t\tif (!bestNodes.some(b => TestId.isChild(b.item.extId, test.item.extId))) {\n\t\t\t\t\t\t\tbestNodes.push(test);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbestRange = irange;\n\t\t\t\t\t\tbestNodes = [test];\n\t\t\t\t\t}\n\t\t\t\t} else if (Position.isBefore(irange.getStartPosition(), position)) {\n\t\t\t\t\tif (!bestRangeBefore || bestRangeBefore.getStartPosition().isBefore(irange.getStartPosition())) {\n\t\t\t\t\t\tbestRangeBefore = irange;\n\t\t\t\t\t\tbestNodesBefore = [test];\n\t\t\t\t\t} else if (irange.equalsRange(bestRangeBefore) && !bestNodesBefore.some(b => TestId.isChild(b.item.extId, test.item.extId))) {\n\t\t\t\t\t\tbestNodesBefore.push(test);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})());\n\n\t\tconst testsToRun = bestNodes.length ? bestNodes : bestNodesBefore;\n\t\tif (testsToRun.length) {\n\t\t\tawait testService.runTests({\n\t\t\t\tgroup: this.group,\n\t\t\t\ttests: bestNodes.length ? bestNodes : bestNodesBefore,\n\t\t\t});\n\t\t} else if (isCodeEditor(activeControl)) {\n\t\t\tMessageController.get(activeControl)?.showMessage(localize('noTestsAtCursor', \"No tests found here\"), position);\n\t\t}\n\t}\n}\n\nexport class RunAtCursor extends ExecuteTestAtCursor {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.RunAtCursor,\n\t\t\ttitle: { value: localize('testing.runAtCursor', \"Run Test at Cursor\"), original: 'Run Test at Cursor' },\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyCode.KeyC),\n\t\t\t},\n\t\t}, TestRunProfileBitset.Run);\n\t}\n}\n\nexport class DebugAtCursor extends ExecuteTestAtCursor {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.DebugAtCursor,\n\t\t\ttitle: { value: localize('testing.debugAtCursor', \"Debug Test at Cursor\"), original: 'Debug Test at Cursor' },\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyMod.CtrlCmd | KeyCode.KeyC),\n\t\t\t},\n\t\t}, TestRunProfileBitset.Debug);\n\t}\n}\n\nabstract class ExecuteTestsInCurrentFile extends Action2 {\n\tconstructor(options: IAction2Options, protected readonly group: TestRunProfileBitset) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tmenu: [{\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: TestingContextKeys.capabilityToContextKey[group].isEqualTo(true),\n\t\t\t}, {\n\t\t\t\tid: MenuId.EditorContext,\n\t\t\t\tgroup: 'testing',\n\t\t\t\t// add 0.1 to be after the \"at cursor\" commands\n\t\t\t\torder: (group === TestRunProfileBitset.Run ? ActionOrder.Run : ActionOrder.Debug) + 0.1,\n\t\t\t\twhen: ContextKeyExpr.and(TestingContextKeys.activeEditorHasTests, TestingContextKeys.capabilityToContextKey[group]),\n\t\t\t}],\n\t\t});\n\t}\n\n\t/**\n\t * @override\n\t */\n\tpublic run(accessor: ServicesAccessor) {\n\t\tconst control = accessor.get(IEditorService).activeTextEditorControl;\n\t\tconst position = control?.getPosition();\n\t\tconst model = control?.getModel();\n\t\tif (!position || !model || !('uri' in model)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst testService = accessor.get(ITestService);\n\t\tconst demandedUri = model.uri.toString();\n\n\t\t// Iterate through the entire collection and run any tests that are in the\n\t\t// uri. See #138007.\n\t\tconst queue = [testService.collection.rootIds];\n\t\tconst discovered: InternalTestItem[] = [];\n\t\twhile (queue.length) {\n\t\t\tfor (const id of queue.pop()!) {\n\t\t\t\tconst node = testService.collection.getNodeById(id)!;\n\t\t\t\tif (node.item.uri?.toString() === demandedUri) {\n\t\t\t\t\tdiscovered.push(node);\n\t\t\t\t} else {\n\t\t\t\t\tqueue.push(node.children);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (discovered.length) {\n\t\t\treturn testService.runTests({\n\t\t\t\ttests: discovered,\n\t\t\t\tgroup: this.group,\n\t\t\t});\n\t\t}\n\n\t\tif (isCodeEditor(control)) {\n\t\t\tMessageController.get(control)?.showMessage(localize('noTestsInFile', \"No tests found in this file\"), position);\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n\nexport class RunCurrentFile extends ExecuteTestsInCurrentFile {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.RunCurrentFile,\n\t\t\ttitle: { value: localize('testing.runCurrentFile', \"Run Tests in Current File\"), original: 'Run Tests in Current File' },\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyCode.KeyF),\n\t\t\t},\n\t\t}, TestRunProfileBitset.Run);\n\t}\n}\n\nexport class DebugCurrentFile extends ExecuteTestsInCurrentFile {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.DebugCurrentFile,\n\t\t\ttitle: { value: localize('testing.debugCurrentFile', \"Debug Tests in Current File\"), original: 'Debug Tests in Current File' },\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\twhen: EditorContextKeys.editorTextFocus,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyMod.CtrlCmd | KeyCode.KeyF),\n\t\t\t},\n\t\t}, TestRunProfileBitset.Debug);\n\t}\n}\n\nexport const discoverAndRunTests = async (\n\tcollection: IMainThreadTestCollection,\n\tprogress: IProgressService,\n\tids: ReadonlyArray<string>,\n\trunTests: (tests: ReadonlyArray<InternalTestItem>) => Promise<ITestResult>,\n): Promise<ITestResult | undefined> => {\n\tconst todo = Promise.all(ids.map(p => expandAndGetTestById(collection, p)));\n\tconst tests = (await showDiscoveringWhile(progress, todo)).filter(isDefined);\n\treturn tests.length ? await runTests(tests) : undefined;\n};\n\nabstract class RunOrDebugExtsByPath extends Action2 {\n\t/**\n\t * @override\n\t */\n\tpublic async run(accessor: ServicesAccessor, ...args: unknown[]) {\n\t\tconst testService = accessor.get(ITestService);\n\t\tawait discoverAndRunTests(\n\t\t\taccessor.get(ITestService).collection,\n\t\t\taccessor.get(IProgressService),\n\t\t\t[...this.getTestExtIdsToRun(accessor, ...args)],\n\t\t\ttests => this.runTest(testService, tests),\n\t\t);\n\t}\n\n\tprotected abstract getTestExtIdsToRun(accessor: ServicesAccessor, ...args: unknown[]): Iterable<string>;\n\n\tprotected abstract runTest(service: ITestService, node: readonly InternalTestItem[]): Promise<ITestResult>;\n}\n\nabstract class RunOrDebugFailedTests extends RunOrDebugExtsByPath {\n\tconstructor(options: IAction2Options) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: hasAnyTestProvider,\n\t\t\t},\n\t\t});\n\t}\n\t/**\n\t * @inheritdoc\n\t */\n\tprotected getTestExtIdsToRun(accessor: ServicesAccessor) {\n\t\tconst { results } = accessor.get(ITestResultService);\n\t\tconst ids = new Set<string>();\n\t\tfor (let i = results.length - 1; i >= 0; i--) {\n\t\t\tconst resultSet = results[i];\n\t\t\tfor (const test of resultSet.tests) {\n\t\t\t\tif (isFailedState(test.ownComputedState)) {\n\t\t\t\t\tids.add(test.item.extId);\n\t\t\t\t} else {\n\t\t\t\t\tids.delete(test.item.extId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn ids;\n\t}\n}\n\nabstract class RunOrDebugLastRun extends RunOrDebugExtsByPath {\n\tconstructor(options: IAction2Options) {\n\t\tsuper({\n\t\t\t...options,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\thasAnyTestProvider,\n\t\t\t\t\tTestingContextKeys.hasAnyResults.isEqualTo(true),\n\t\t\t\t),\n\t\t\t},\n\t\t});\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tprotected *getTestExtIdsToRun(accessor: ServicesAccessor, runId?: string): Iterable<string> {\n\t\tconst resultService = accessor.get(ITestResultService);\n\t\tconst lastResult = runId ? resultService.results.find(r => r.id === runId) : resultService.results[0];\n\t\tif (!lastResult) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const test of lastResult.request.targets) {\n\t\t\tfor (const testId of test.testIds) {\n\t\t\t\tyield testId;\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class ReRunFailedTests extends RunOrDebugFailedTests {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.ReRunFailedTests,\n\t\t\ttitle: { value: localize('testing.reRunFailTests', \"Rerun Failed Tests\"), original: 'Rerun Failed Tests' },\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyCode.KeyE),\n\t\t\t},\n\t\t});\n\t}\n\n\tprotected runTest(service: ITestService, internalTests: InternalTestItem[]): Promise<ITestResult> {\n\t\treturn service.runTests({\n\t\t\tgroup: TestRunProfileBitset.Run,\n\t\t\ttests: internalTests,\n\t\t});\n\t}\n}\n\nexport class DebugFailedTests extends RunOrDebugFailedTests {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.DebugFailedTests,\n\t\t\ttitle: { value: localize('testing.debugFailTests', \"Debug Failed Tests\"), original: 'Debug Failed Tests' },\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyMod.CtrlCmd | KeyCode.KeyE),\n\t\t\t},\n\t\t});\n\t}\n\n\tprotected runTest(service: ITestService, internalTests: InternalTestItem[]): Promise<ITestResult> {\n\t\treturn service.runTests({\n\t\t\tgroup: TestRunProfileBitset.Debug,\n\t\t\ttests: internalTests,\n\t\t});\n\t}\n}\n\nexport class ReRunLastRun extends RunOrDebugLastRun {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.ReRunLastRun,\n\t\t\ttitle: { value: localize('testing.reRunLastRun', \"Rerun Last Run\"), original: 'Rerun Last Run' },\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyCode.KeyL),\n\t\t\t},\n\t\t});\n\t}\n\n\tprotected runTest(service: ITestService, internalTests: InternalTestItem[]): Promise<ITestResult> {\n\t\treturn service.runTests({\n\t\t\tgroup: TestRunProfileBitset.Run,\n\t\t\ttests: internalTests,\n\t\t});\n\t}\n}\n\nexport class DebugLastRun extends RunOrDebugLastRun {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.DebugLastRun,\n\t\t\ttitle: { value: localize('testing.debugLastRun', \"Debug Last Run\"), original: 'Debug Last Run' },\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyMod.CtrlCmd | KeyCode.KeyL),\n\t\t\t},\n\t\t});\n\t}\n\n\tprotected runTest(service: ITestService, internalTests: InternalTestItem[]): Promise<ITestResult> {\n\t\treturn service.runTests({\n\t\t\tgroup: TestRunProfileBitset.Debug,\n\t\t\ttests: internalTests,\n\t\t});\n\t}\n}\n\nexport class SearchForTestExtension extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.SearchForTestExtension,\n\t\t\ttitle: { value: localize('testing.searchForTestExtension', \"Search for Test Extension\"), original: 'Search for Test Extension' },\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor) {\n\t\tconst paneCompositeService = accessor.get(IPaneCompositePartService);\n\t\tconst viewlet = (await paneCompositeService.openPaneComposite(EXTENSIONS_VIEWLET_ID, ViewContainerLocation.Sidebar, true))?.getViewPaneContainer() as IExtensionsViewPaneContainer;\n\t\tviewlet.search('@category:\"testing\"');\n\t\tviewlet.focus();\n\t}\n}\n\nexport class OpenOutputPeek extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.OpenOutputPeek,\n\t\t\ttitle: { value: localize('testing.openOutputPeek', \"Peek Output\"), original: 'Peek Output' },\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyMod.CtrlCmd | KeyCode.KeyM),\n\t\t\t},\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: TestingContextKeys.hasAnyResults.isEqualTo(true),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor) {\n\t\taccessor.get(ITestingPeekOpener).open();\n\t}\n}\n\nexport class ToggleInlineTestOutput extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.ToggleInlineTestOutput,\n\t\t\ttitle: { value: localize('testing.toggleInlineTestOutput', \"Toggle Inline Test Output\"), original: 'Toggle Inline Test Output' },\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyMod.CtrlCmd | KeyCode.KeyI),\n\t\t\t},\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: TestingContextKeys.hasAnyResults.isEqualTo(true),\n\t\t\t},\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor) {\n\t\tconst testService = accessor.get(ITestService);\n\t\ttestService.showInlineOutput.value = !testService.showInlineOutput.value;\n\t}\n}\n\nconst refreshMenus = (whenIsRefreshing: boolean): IAction2Options['menu'] => [\n\t{\n\t\tid: MenuId.TestItem,\n\t\tgroup: 'inline',\n\t\torder: ActionOrder.Refresh,\n\t\twhen: ContextKeyExpr.and(\n\t\t\tTestingContextKeys.canRefreshTests.isEqualTo(true),\n\t\t\tTestingContextKeys.isRefreshingTests.isEqualTo(whenIsRefreshing),\n\t\t),\n\t},\n\t{\n\t\tid: MenuId.ViewTitle,\n\t\tgroup: 'navigation',\n\t\torder: ActionOrder.Refresh,\n\t\twhen: ContextKeyExpr.and(\n\t\t\tContextKeyExpr.equals('view', Testing.ExplorerViewId),\n\t\t\tTestingContextKeys.canRefreshTests.isEqualTo(true),\n\t\t\tTestingContextKeys.isRefreshingTests.isEqualTo(whenIsRefreshing),\n\t\t),\n\t},\n\t{\n\t\tid: MenuId.CommandPalette,\n\t\twhen: TestingContextKeys.canRefreshTests.isEqualTo(true),\n\t},\n];\n\nexport class RefreshTestsAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.RefreshTestsAction,\n\t\t\ttitle: { value: localize('testing.refreshTests', \"Refresh Tests\"), original: 'Refresh Tests' },\n\t\t\tcategory,\n\t\t\ticon: icons.testingRefreshTests,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyChord(KeyMod.CtrlCmd | KeyCode.Semicolon, KeyMod.CtrlCmd | KeyCode.KeyR),\n\t\t\t\twhen: TestingContextKeys.canRefreshTests.isEqualTo(true),\n\t\t\t},\n\t\t\tmenu: refreshMenus(false),\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor, ...elements: TestItemTreeElement[]) {\n\t\tconst testService = accessor.get(ITestService);\n\t\tconst progressService = accessor.get(IProgressService);\n\n\t\tconst controllerIds = distinct(elements.filter(isDefined).map(e => e.test.controllerId));\n\t\treturn progressService.withProgress({ location: Testing.ViewletId }, async () => {\n\t\t\tif (controllerIds.length) {\n\t\t\t\tawait Promise.all(controllerIds.map(id => testService.refreshTests(id)));\n\t\t\t} else {\n\t\t\t\tawait testService.refreshTests();\n\t\t\t}\n\t\t});\n\t}\n}\n\nexport class CancelTestRefreshAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TestCommandId.CancelTestRefreshAction,\n\t\t\ttitle: { value: localize('testing.cancelTestRefresh', \"Cancel Test Refresh\"), original: 'Cancel Test Refresh' },\n\t\t\tcategory,\n\t\t\ticon: icons.testingCancelRefreshTests,\n\t\t\tmenu: refreshMenus(true),\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor) {\n\t\taccessor.get(ITestService).cancelRefreshTests();\n\t}\n}\n\nexport const allTestActions = [\n\tCancelTestRefreshAction,\n\tCancelTestRunAction,\n\tClearTestResultsAction,\n\tCollapseAllAction,\n\tConfigureTestProfilesAction,\n\tContinuousRunTestAction,\n\tContinuousRunUsingProfileTestAction,\n\tDebugAction,\n\tDebugAllAction,\n\tDebugAtCursor,\n\tDebugCurrentFile,\n\tDebugFailedTests,\n\tDebugLastRun,\n\tDebugSelectedAction,\n\tGoToTest,\n\tGetExplorerSelection,\n\tGetSelectedProfiles,\n\tHideTestAction,\n\tOpenOutputPeek,\n\tRefreshTestsAction,\n\tReRunFailedTests,\n\tReRunLastRun,\n\tRunAction,\n\tRunAllAction,\n\tRunAtCursor,\n\tRunCurrentFile,\n\tRunSelectedAction,\n\tRunUsingProfileAction,\n\tSearchForTestExtension,\n\tSelectDefaultTestProfiles,\n\tShowMostRecentOutputAction,\n\tStartContinuousRunAction,\n\tStopContinuousRunAction,\n\tTestingSortByDurationAction,\n\tTestingSortByLocationAction,\n\tTestingSortByStatusAction,\n\tTestingViewAsListAction,\n\tTestingViewAsTreeAction,\n\tToggleInlineTestOutput,\n\tUnhideAllTestsAction,\n\tUnhideTestAction,\n];\n"]}