{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/mergeEditor/test/browser/model.test.ts"],"names":[],"mappings":"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","file":"model.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { IReader, transaction } from 'vs/base/common/observable';\nimport { isDefined } from 'vs/base/common/types';\nimport { Range } from 'vs/editor/common/core/range';\nimport { linesDiffComputers } from 'vs/editor/common/diff/linesDiffComputers';\nimport { EndOfLinePreference, ITextModel } from 'vs/editor/common/model';\nimport { createModelServices, createTextModel } from 'vs/editor/test/common/testTextModel';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { NullTelemetryService } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { IMergeDiffComputer, IMergeDiffComputerResult, toLineRange, toRangeMapping } from 'vs/workbench/contrib/mergeEditor/browser/model/diffComputer';\nimport { DetailedLineRangeMapping } from 'vs/workbench/contrib/mergeEditor/browser/model/mapping';\nimport { MergeEditorModel } from 'vs/workbench/contrib/mergeEditor/browser/model/mergeEditorModel';\nimport { MergeEditorTelemetry } from 'vs/workbench/contrib/mergeEditor/browser/telemetry';\n\nsuite('merge editor model', () => {\n\t// todo: renable when failing case is found https://github.com/microsoft/vscode/pull/190444#issuecomment-1678151428\n\t// ensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('prepend line', async () => {\n\t\tawait testMergeModel(\n\t\t\t{\n\t\t\t\t\"languageId\": \"plaintext\",\n\t\t\t\t\"base\": \"line1\\nline2\",\n\t\t\t\t\"input1\": \"0\\nline1\\nline2\",\n\t\t\t\t\"input2\": \"0\\nline1\\nline2\",\n\t\t\t\t\"result\": \"\"\n\t\t\t},\n\t\t\tmodel => {\n\t\t\t\tassert.deepStrictEqual(model.getProjections(), {\n\t\t\t\t\tbase: ['⟦⟧₀line1', 'line2'],\n\t\t\t\t\tinput1: ['⟦0', '⟧₀line1', 'line2'],\n\t\t\t\t\tinput2: ['⟦0', '⟧₀line1', 'line2'],\n\t\t\t\t\tresult: ['⟦⟧{unrecognized}₀'],\n\t\t\t\t});\n\n\t\t\t\tmodel.toggleConflict(0, 1);\n\t\t\t\tassert.deepStrictEqual(\n\t\t\t\t\t{ result: model.getResult() },\n\t\t\t\t\t{ result: '0\\nline1\\nline2' }\n\t\t\t\t);\n\n\t\t\t\tmodel.toggleConflict(0, 2);\n\t\t\t\tassert.deepStrictEqual(\n\t\t\t\t\t{ result: model.getResult() },\n\t\t\t\t\t({ result: \"0\\n0\\nline1\\nline2\" })\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('empty base', async () => {\n\t\tawait testMergeModel(\n\t\t\t{\n\t\t\t\t\"languageId\": \"plaintext\",\n\t\t\t\t\"base\": \"\",\n\t\t\t\t\"input1\": \"input1\",\n\t\t\t\t\"input2\": \"input2\",\n\t\t\t\t\"result\": \"\"\n\t\t\t},\n\t\t\tmodel => {\n\t\t\t\tassert.deepStrictEqual(model.getProjections(), {\n\t\t\t\t\tbase: ['⟦⟧₀'],\n\t\t\t\t\tinput1: ['⟦input1⟧₀'],\n\t\t\t\t\tinput2: ['⟦input2⟧₀'],\n\t\t\t\t\tresult: ['⟦⟧{base}₀'],\n\t\t\t\t});\n\n\t\t\t\tmodel.toggleConflict(0, 1);\n\t\t\t\tassert.deepStrictEqual(\n\t\t\t\t\t{ result: model.getResult() },\n\t\t\t\t\t({ result: \"input1\" })\n\t\t\t\t);\n\n\t\t\t\tmodel.toggleConflict(0, 2);\n\t\t\t\tassert.deepStrictEqual(\n\t\t\t\t\t{ result: model.getResult() },\n\t\t\t\t\t({ result: \"input2\" })\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('can merge word changes', async () => {\n\t\tawait testMergeModel(\n\t\t\t{\n\t\t\t\t\"languageId\": \"plaintext\",\n\t\t\t\t\"base\": \"hello\",\n\t\t\t\t\"input1\": \"hallo\",\n\t\t\t\t\"input2\": \"helloworld\",\n\t\t\t\t\"result\": \"\"\n\t\t\t},\n\t\t\tmodel => {\n\t\t\t\tassert.deepStrictEqual(model.getProjections(), {\n\t\t\t\t\tbase: ['⟦hello⟧₀'],\n\t\t\t\t\tinput1: ['⟦hallo⟧₀'],\n\t\t\t\t\tinput2: ['⟦helloworld⟧₀'],\n\t\t\t\t\tresult: ['⟦⟧{unrecognized}₀'],\n\t\t\t\t});\n\n\t\t\t\tmodel.toggleConflict(0, 1);\n\t\t\t\tmodel.toggleConflict(0, 2);\n\n\t\t\t\tassert.deepStrictEqual(\n\t\t\t\t\t{ result: model.getResult() },\n\t\t\t\t\t{ result: 'halloworld' }\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\n\t});\n\n\ttest('can combine insertions at end of document', async () => {\n\t\tawait testMergeModel(\n\t\t\t{\n\t\t\t\t\"languageId\": \"plaintext\",\n\t\t\t\t\"base\": \"Zürich\\nBern\\nBasel\\nChur\\nGenf\\nThun\",\n\t\t\t\t\"input1\": \"Zürich\\nBern\\nChur\\nDavos\\nGenf\\nThun\\nfunction f(b:boolean) {}\",\n\t\t\t\t\"input2\": \"Zürich\\nBern\\nBasel (FCB)\\nChur\\nGenf\\nThun\\nfunction f(a:number) {}\",\n\t\t\t\t\"result\": \"Zürich\\nBern\\nBasel\\nChur\\nDavos\\nGenf\\nThun\"\n\t\t\t},\n\t\t\tmodel => {\n\t\t\t\tassert.deepStrictEqual(model.getProjections(), {\n\t\t\t\t\tbase: ['Zürich', 'Bern', '⟦Basel', '⟧₀Chur', '⟦⟧₁Genf', 'Thun⟦⟧₂'],\n\t\t\t\t\tinput1: [\n\t\t\t\t\t\t'Zürich',\n\t\t\t\t\t\t'Bern',\n\t\t\t\t\t\t'⟦⟧₀Chur',\n\t\t\t\t\t\t'⟦Davos',\n\t\t\t\t\t\t'⟧₁Genf',\n\t\t\t\t\t\t'Thun',\n\t\t\t\t\t\t'⟦function f(b:boolean) {}⟧₂',\n\t\t\t\t\t],\n\t\t\t\t\tinput2: [\n\t\t\t\t\t\t'Zürich',\n\t\t\t\t\t\t'Bern',\n\t\t\t\t\t\t'⟦Basel (FCB)',\n\t\t\t\t\t\t'⟧₀Chur',\n\t\t\t\t\t\t'⟦⟧₁Genf',\n\t\t\t\t\t\t'Thun',\n\t\t\t\t\t\t'⟦function f(a:number) {}⟧₂',\n\t\t\t\t\t],\n\t\t\t\t\tresult: [\n\t\t\t\t\t\t'Zürich',\n\t\t\t\t\t\t'Bern',\n\t\t\t\t\t\t'⟦Basel',\n\t\t\t\t\t\t'⟧{base}₀Chur',\n\t\t\t\t\t\t'⟦Davos',\n\t\t\t\t\t\t'⟧{1✓}₁Genf',\n\t\t\t\t\t\t'Thun⟦⟧{base}₂',\n\t\t\t\t\t],\n\t\t\t\t});\n\n\t\t\t\tmodel.toggleConflict(2, 1);\n\t\t\t\tmodel.toggleConflict(2, 2);\n\n\t\t\t\tassert.deepStrictEqual(\n\t\t\t\t\t{ result: model.getResult() },\n\t\t\t\t\t{\n\t\t\t\t\t\tresult:\n\t\t\t\t\t\t\t'Zürich\\nBern\\nBasel\\nChur\\nDavos\\nGenf\\nThun\\nfunction f(b:boolean) {}\\nfunction f(a:number) {}',\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('conflicts are reset', async () => {\n\t\tawait testMergeModel(\n\t\t\t{\n\t\t\t\t\"languageId\": \"typescript\",\n\t\t\t\t\"base\": \"import { h } from 'vs/base/browser/dom';\\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\\nimport { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';\\nimport { EditorOption } from 'vs/editor/common/config/editorOptions';\\nimport { autorun, IReader, observableFromEvent, ObservableValue } from 'vs/workbench/contrib/audioCues/browser/observable';\\nimport { LineRange } from 'vs/workbench/contrib/mergeEditor/browser/model/lineRange';\\n\",\n\t\t\t\t\"input1\": \"import { h } from 'vs/base/browser/dom';\\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\\nimport { observableSignalFromEvent } from 'vs/base/common/observable';\\nimport { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';\\nimport { autorun, IReader, observableFromEvent } from 'vs/workbench/contrib/audioCues/browser/observable';\\nimport { LineRange } from 'vs/workbench/contrib/mergeEditor/browser/model/lineRange';\\n\",\n\t\t\t\t\"input2\": \"import { h } from 'vs/base/browser/dom';\\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\\nimport { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';\\nimport { autorun, IReader, observableFromEvent, ObservableValue } from 'vs/workbench/contrib/audioCues/browser/observable';\\nimport { LineRange } from 'vs/workbench/contrib/mergeEditor/browser/model/lineRange';\\n\",\n\t\t\t\t\"result\": \"import { h } from 'vs/base/browser/dom';\\r\\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\\r\\nimport { observableSignalFromEvent } from 'vs/base/common/observable';\\r\\nimport { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';\\r\\n<<<<<<< Updated upstream\\r\\nimport { autorun, IReader, observableFromEvent, ObservableValue } from 'vs/workbench/contrib/audioCues/browser/observable';\\r\\n=======\\r\\nimport { autorun, IReader, observableFromEvent } from 'vs/workbench/contrib/audioCues/browser/observable';\\r\\n>>>>>>> Stashed changes\\r\\nimport { LineRange } from 'vs/workbench/contrib/mergeEditor/browser/model/lineRange';\\r\\n\"\n\t\t\t},\n\t\t\tmodel => {\n\t\t\t\tassert.deepStrictEqual(model.getProjections(), {\n\t\t\t\t\tbase: [\n\t\t\t\t\t\t\"import { h } from 'vs/base/browser/dom';\",\n\t\t\t\t\t\t\"import { Disposable, IDisposable } from 'vs/base/common/lifecycle';\",\n\t\t\t\t\t\t\"⟦⟧₀import { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';\",\n\t\t\t\t\t\t\"⟦import { EditorOption } from 'vs/editor/common/config/editorOptions';\",\n\t\t\t\t\t\t\"import { autorun, IReader, observableFromEvent, ObservableValue } from 'vs/workbench/contrib/audioCues/browser/observable';\",\n\t\t\t\t\t\t\"⟧₁import { LineRange } from 'vs/workbench/contrib/mergeEditor/browser/model/lineRange';\",\n\t\t\t\t\t\t'',\n\t\t\t\t\t],\n\t\t\t\t\tinput1: [\n\t\t\t\t\t\t\"import { h } from 'vs/base/browser/dom';\",\n\t\t\t\t\t\t\"import { Disposable, IDisposable } from 'vs/base/common/lifecycle';\",\n\t\t\t\t\t\t\"⟦import { observableSignalFromEvent } from 'vs/base/common/observable';\",\n\t\t\t\t\t\t\"⟧₀import { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';\",\n\t\t\t\t\t\t\"⟦import { autorun, IReader, observableFromEvent } from 'vs/workbench/contrib/audioCues/browser/observable';\",\n\t\t\t\t\t\t\"⟧₁import { LineRange } from 'vs/workbench/contrib/mergeEditor/browser/model/lineRange';\",\n\t\t\t\t\t\t'',\n\t\t\t\t\t],\n\t\t\t\t\tinput2: [\n\t\t\t\t\t\t\"import { h } from 'vs/base/browser/dom';\",\n\t\t\t\t\t\t\"import { Disposable, IDisposable } from 'vs/base/common/lifecycle';\",\n\t\t\t\t\t\t\"⟦⟧₀import { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';\",\n\t\t\t\t\t\t\"⟦import { autorun, IReader, observableFromEvent, ObservableValue } from 'vs/workbench/contrib/audioCues/browser/observable';\",\n\t\t\t\t\t\t\"⟧₁import { LineRange } from 'vs/workbench/contrib/mergeEditor/browser/model/lineRange';\",\n\t\t\t\t\t\t'',\n\t\t\t\t\t],\n\t\t\t\t\tresult: [\n\t\t\t\t\t\t\"import { h } from 'vs/base/browser/dom';\",\n\t\t\t\t\t\t\"import { Disposable, IDisposable } from 'vs/base/common/lifecycle';\",\n\t\t\t\t\t\t\"⟦import { observableSignalFromEvent } from 'vs/base/common/observable';\",\n\t\t\t\t\t\t\"⟧{1✓}₀import { CodeEditorWidget } from 'vs/editor/browser/widget/codeEditorWidget';\",\n\t\t\t\t\t\t'⟦<<<<<<< Updated upstream',\n\t\t\t\t\t\t\"import { autorun, IReader, observableFromEvent, ObservableValue } from 'vs/workbench/contrib/audioCues/browser/observable';\",\n\t\t\t\t\t\t'=======',\n\t\t\t\t\t\t\"import { autorun, IReader, observableFromEvent } from 'vs/workbench/contrib/audioCues/browser/observable';\",\n\t\t\t\t\t\t'>>>>>>> Stashed changes',\n\t\t\t\t\t\t\"⟧{unrecognized}₁import { LineRange } from 'vs/workbench/contrib/mergeEditor/browser/model/lineRange';\",\n\t\t\t\t\t\t'',\n\t\t\t\t\t],\n\t\t\t\t});\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('auto-solve equal edits', async () => {\n\t\tawait testMergeModel(\n\t\t\t{\n\t\t\t\t\"languageId\": \"javascript\",\n\t\t\t\t\"base\": \"const { readFileSync } = require('fs');\\n\\nlet paths = process.argv.slice(2);\\nmain(paths);\\n\\nfunction main(paths) {\\n    // print the welcome message\\n    printMessage();\\n\\n    let data = getLineCountInfo(paths);\\n    console.log(\\\"Lines: \\\" + data.totalLineCount);\\n}\\n\\n/**\\n * Prints the welcome message\\n*/\\nfunction printMessage() {\\n    console.log(\\\"Welcome To Line Counter\\\");\\n}\\n\\n/**\\n * @param {string[]} paths\\n*/\\nfunction getLineCountInfo(paths) {\\n    let lineCounts = paths.map(path => ({ path, count: getLinesLength(readFileSync(path, 'utf8')) }));\\n    return {\\n        totalLineCount: lineCounts.reduce((acc, { count }) => acc + count, 0),\\n        lineCounts,\\n    };\\n}\\n\\n/**\\n * @param {string} str\\n */\\nfunction getLinesLength(str) {\\n    return str.split('\\\\n').length;\\n}\\n\",\n\t\t\t\t\"input1\": \"const { readFileSync } = require('fs');\\n\\nlet paths = process.argv.slice(2);\\nmain(paths);\\n\\nfunction main(paths) {\\n    // print the welcome message\\n    printMessage();\\n\\n    const data = getLineCountInfo(paths);\\n    console.log(\\\"Lines: \\\" + data.totalLineCount);\\n}\\n\\nfunction printMessage() {\\n    console.log(\\\"Welcome To Line Counter\\\");\\n}\\n\\n/**\\n * @param {string[]} paths\\n*/\\nfunction getLineCountInfo(paths) {\\n    let lineCounts = paths.map(path => ({ path, count: getLinesLength(readFileSync(path, 'utf8')) }));\\n    return {\\n        totalLineCount: lineCounts.reduce((acc, { count }) => acc + count, 0),\\n        lineCounts,\\n    };\\n}\\n\\n/**\\n * @param {string} str\\n */\\nfunction getLinesLength(str) {\\n    return str.split('\\\\n').length;\\n}\\n\",\n\t\t\t\t\"input2\": \"const { readFileSync } = require('fs');\\n\\nlet paths = process.argv.slice(2);\\nrun(paths);\\n\\nfunction run(paths) {\\n    // print the welcome message\\n    printMessage();\\n\\n    const data = getLineCountInfo(paths);\\n    console.log(\\\"Lines: \\\" + data.totalLineCount);\\n}\\n\\nfunction printMessage() {\\n    console.log(\\\"Welcome To Line Counter\\\");\\n}\\n\\n/**\\n * @param {string[]} paths\\n*/\\nfunction getLineCountInfo(paths) {\\n    let lineCounts = paths.map(path => ({ path, count: getLinesLength(readFileSync(path, 'utf8')) }));\\n    return {\\n        totalLineCount: lineCounts.reduce((acc, { count }) => acc + count, 0),\\n        lineCounts,\\n    };\\n}\\n\\n/**\\n * @param {string} str\\n */\\nfunction getLinesLength(str) {\\n    return str.split('\\\\n').length;\\n}\\n\",\n\t\t\t\t\"result\": \"<<<<<<< uiae\\n>>>>>>> Stashed changes\",\n\t\t\t\tresetResult: true,\n\t\t\t},\n\t\t\tasync model => {\n\t\t\t\tawait model.mergeModel.reset();\n\n\t\t\t\tassert.deepStrictEqual(model.getResult(), `const { readFileSync } = require('fs');\\n\\nlet paths = process.argv.slice(2);\\nrun(paths);\\n\\nfunction run(paths) {\\n    // print the welcome message\\n    printMessage();\\n\\n    const data = getLineCountInfo(paths);\\n    console.log(\"Lines: \" + data.totalLineCount);\\n}\\n\\nfunction printMessage() {\\n    console.log(\"Welcome To Line Counter\");\\n}\\n\\n/**\\n * @param {string[]} paths\\n*/\\nfunction getLineCountInfo(paths) {\\n    let lineCounts = paths.map(path => ({ path, count: getLinesLength(readFileSync(path, 'utf8')) }));\\n    return {\\n        totalLineCount: lineCounts.reduce((acc, { count }) => acc + count, 0),\\n        lineCounts,\\n    };\\n}\\n\\n/**\\n * @param {string} str\\n */\\nfunction getLinesLength(str) {\\n    return str.split('\\\\n').length;\\n}\\n`);\n\t\t\t}\n\t\t);\n\t});\n});\n\nasync function testMergeModel(\n\toptions: MergeModelOptions,\n\tfn: (model: MergeModelInterface) => void\n): Promise<void> {\n\tconst disposables = new DisposableStore();\n\tconst modelInterface = disposables.add(\n\t\tnew MergeModelInterface(options, createModelServices(disposables))\n\t);\n\tawait modelInterface.mergeModel.onInitialized;\n\tawait fn(modelInterface);\n\tdisposables.dispose();\n}\n\ninterface MergeModelOptions {\n\tlanguageId: string;\n\tinput1: string;\n\tinput2: string;\n\tbase: string;\n\tresult: string;\n\tresetResult?: boolean;\n}\n\nfunction toSmallNumbersDec(value: number): string {\n\tconst smallNumbers = ['₀', '₁', '₂', '₃', '₄', '₅', '₆', '₇', '₈', '₉'];\n\treturn value.toString().split('').map(c => smallNumbers[parseInt(c)]).join('');\n}\n\nclass MergeModelInterface extends Disposable {\n\tpublic readonly mergeModel: MergeEditorModel;\n\n\tconstructor(options: MergeModelOptions, instantiationService: IInstantiationService) {\n\t\tsuper();\n\t\tconst input1TextModel = this._register(createTextModel(options.input1, options.languageId));\n\t\tconst input2TextModel = this._register(createTextModel(options.input2, options.languageId));\n\t\tconst baseTextModel = this._register(createTextModel(options.base, options.languageId));\n\t\tconst resultTextModel = this._register(createTextModel(options.result, options.languageId));\n\n\t\tconst diffComputer: IMergeDiffComputer = {\n\t\t\tasync computeDiff(textModel1: ITextModel, textModel2: ITextModel, reader: IReader): Promise<IMergeDiffComputerResult> {\n\t\t\t\tconst result = await linesDiffComputers.getLegacy().computeDiff(\n\t\t\t\t\ttextModel1.getLinesContent(),\n\t\t\t\t\ttextModel2.getLinesContent(),\n\t\t\t\t\t{ ignoreTrimWhitespace: false, maxComputationTimeMs: 10000, computeMoves: false }\n\t\t\t\t);\n\t\t\t\tconst changes = result.changes.map(c =>\n\t\t\t\t\tnew DetailedLineRangeMapping(\n\t\t\t\t\t\ttoLineRange(c.original),\n\t\t\t\t\t\ttextModel1,\n\t\t\t\t\t\ttoLineRange(c.modified),\n\t\t\t\t\t\ttextModel2,\n\t\t\t\t\t\tc.innerChanges?.map(ic => toRangeMapping(ic)).filter(isDefined)\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\treturn {\n\t\t\t\t\tdiffs: changes\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\tthis.mergeModel = this._register(instantiationService.createInstance(MergeEditorModel,\n\t\t\tbaseTextModel,\n\t\t\t{\n\t\t\t\ttextModel: input1TextModel,\n\t\t\t\tdescription: '',\n\t\t\t\tdetail: '',\n\t\t\t\ttitle: '',\n\t\t\t},\n\t\t\t{\n\t\t\t\ttextModel: input2TextModel,\n\t\t\t\tdescription: '',\n\t\t\t\tdetail: '',\n\t\t\t\ttitle: '',\n\t\t\t},\n\t\t\tresultTextModel,\n\t\t\tdiffComputer,\n\t\t\t{\n\t\t\t\tresetResult: options.resetResult || false\n\t\t\t},\n\t\t\tnew MergeEditorTelemetry(NullTelemetryService),\n\t\t));\n\t}\n\n\tgetProjections(): unknown {\n\t\tinterface LabeledRange {\n\t\t\trange: Range;\n\t\t\tlabel: string;\n\t\t}\n\t\tfunction applyRanges(textModel: ITextModel, ranges: LabeledRange[]): void {\n\t\t\ttextModel.applyEdits(ranges.map(({ range, label }) => ({\n\t\t\t\trange: range,\n\t\t\t\ttext: `⟦${textModel.getValueInRange(range)}⟧${label}`,\n\t\t\t})));\n\t\t}\n\t\tconst baseRanges = this.mergeModel.modifiedBaseRanges.get();\n\n\t\tconst baseTextModel = createTextModel(this.mergeModel.base.getValue());\n\t\tapplyRanges(\n\t\t\tbaseTextModel,\n\t\t\tbaseRanges.map<LabeledRange>((r, idx) => ({\n\t\t\t\trange: r.baseRange.toRange(),\n\t\t\t\tlabel: toSmallNumbersDec(idx),\n\t\t\t}))\n\t\t);\n\n\t\tconst input1TextModel = createTextModel(this.mergeModel.input1.textModel.getValue());\n\t\tapplyRanges(\n\t\t\tinput1TextModel,\n\t\t\tbaseRanges.map<LabeledRange>((r, idx) => ({\n\t\t\t\trange: r.input1Range.toRange(),\n\t\t\t\tlabel: toSmallNumbersDec(idx),\n\t\t\t}))\n\t\t);\n\n\t\tconst input2TextModel = createTextModel(this.mergeModel.input2.textModel.getValue());\n\t\tapplyRanges(\n\t\t\tinput2TextModel,\n\t\t\tbaseRanges.map<LabeledRange>((r, idx) => ({\n\t\t\t\trange: r.input2Range.toRange(),\n\t\t\t\tlabel: toSmallNumbersDec(idx),\n\t\t\t}))\n\t\t);\n\n\t\tconst resultTextModel = createTextModel(this.mergeModel.resultTextModel.getValue());\n\t\tapplyRanges(\n\t\t\tresultTextModel,\n\t\t\tbaseRanges.map<LabeledRange>((r, idx) => ({\n\t\t\t\trange: this.mergeModel.getLineRangeInResult(r.baseRange).toRange(),\n\t\t\t\tlabel: `{${this.mergeModel.getState(r).get()}}${toSmallNumbersDec(idx)}`,\n\t\t\t}))\n\t\t);\n\n\t\tconst result = {\n\t\t\tbase: baseTextModel.getValue(EndOfLinePreference.LF).split('\\n'),\n\t\t\tinput1: input1TextModel.getValue(EndOfLinePreference.LF).split('\\n'),\n\t\t\tinput2: input2TextModel.getValue(EndOfLinePreference.LF).split('\\n'),\n\t\t\tresult: resultTextModel.getValue(EndOfLinePreference.LF).split('\\n'),\n\t\t};\n\t\tbaseTextModel.dispose();\n\t\tinput1TextModel.dispose();\n\t\tinput2TextModel.dispose();\n\t\tresultTextModel.dispose();\n\t\treturn result;\n\t}\n\n\ttoggleConflict(conflictIdx: number, inputNumber: 1 | 2): void {\n\t\tconst baseRange = this.mergeModel.modifiedBaseRanges.get()[conflictIdx];\n\t\tif (!baseRange) {\n\t\t\tthrow new Error();\n\t\t}\n\t\tconst state = this.mergeModel.getState(baseRange).get();\n\t\ttransaction(tx => {\n\t\t\tthis.mergeModel.setState(baseRange, state.toggle(inputNumber), true, tx);\n\t\t});\n\t}\n\n\tgetResult(): string {\n\t\treturn this.mergeModel.resultTextModel.getValue();\n\t}\n}\n"]}