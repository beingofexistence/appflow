{"version":3,"sources":["vs/workbench/contrib/mergeEditor/electron-sandbox/devCommands.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAqBhG,MAAM,qBAAqB,GAAqB,EAAE,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAa,EAAE,IAAoB,CAAC,EAAE,QAAQ,EAAE,oBAAoB,EAAE,CAAC;IAEzI,MAAa,IAAgC,SAAQ,aAAG;QACvD;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,4BAA4B;gBAChC,QAAQ,EAAE,qBAAqB;gBAC/B,KAAK,EAAE;oBACN,KAAK,EAAE,IAAA,cAAQ,EACd,CAAqB,EACrB,IAAmC,CACnC;oBACD,QAAQ,EAAE,mCAAmC;iBAC7C;gBACD,IAAI,EAAE,cAAG,CAAK,cAAc;gBAC5B,EAAE,EAAE,IAAI;aACR,CAAC,CAAC;QACJ,CAAC;QAED,KAAK,CAAC,GAAG,CAAC,QAA0B,EAAE,IAA0E;YAC/G,MAAM,iBAAiB,GAAG,QAAQ,CAAC,GAAG,CAAC,gBAAG,CAAgB,CAAC;YAC3D,MAAM,gBAAgB,GAAG,QAAQ,CAAC,GAAG,CAAC,sBAAG,CAAe,CAAC;YACzD,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,mBAAG,CAAY,CAAC;YACnD,MAAM,eAAe,GAAG,QAAQ,CAAC,GAAG,CAAC,cAAG,CAAc,CAAC;YACvD,MAAM,GAAG,GAAG,QAAQ,CAAC,GAAG,CAAC,iBAAG,CAAuB,CAAC;YACpD,MAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,WAAG,CAAU,CAAC;YAE/C,IAAI,CAAC,IAAI,EAAE;gBACV,IAAI,GAAG,EAAE,CAAC;aACV;YAED,IAAI,OAA4B,CAAC;YACjC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE;gBACf,MAAM,MAAM,GAAG,MAAM,iBAAiB,CAAC,KAAK,CAAC;oBAC5C,MAAM,EAAE,IAAA,cAAQ,EAAC,CAAuB,EAAE,IAAY,CAAC;oBACvD,KAAK,EAAE,MAAM,gBAAgB,CAAC,QAAQ,EAAE;iBACxC,CAAC,CAAC;gBACH,IAAI,MAAM,KAAK,SAAS,EAAE;oBACzB,OAAO;iBACP;gBACD,OAAO;oBACN,MAAM,KAAK,EAAE;wBACZ,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;wBACpB,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,UAAU,EAAE,WAAW,EAAE,CAAC;aAC9E;iBAAM;gBACN,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC;aACpB;YAED,MAAM,SAAS,GAAG,SAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,IAAA,aAAG,GAAS,CAAC,CAAC;YAEzD,MAAM,SAAS,GAAG,eAAe,CAAC,aAAa,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YAE7E,MAAM,OAAO,GAAG,SAAG,CAAC,QAAQ,CAAC,SAAS,EAAE,QAAQ,SAAS,EAAE,CAAC,CAAC;YAC7D,MAAM,SAAS,GAAG,SAAG,CAAC,QAAQ,CAAC,SAAS,EAAE,UAAU,SAAS,EAAE,CAAC,CAAC;YACjE,MAAM,SAAS,GAAG,SAAG,CAAC,QAAQ,CAAC,SAAS,EAAE,UAAU,SAAS,EAAE,CAAC,CAAC;YACjE,MAAM,SAAS,GAAG,SAAG,CAAC,QAAQ,CAAC,SAAS,EAAE,UAAU,SAAS,EAAE,CAAC,CAAC;YACjE,MAAM,gBAAgB,GAAG,SAAG,CAAC,QAAQ,CAAC,SAAS,EAAE,iBAAiB,SAAS,EAAE,CAAC,CAAC;YAE/E,KAAK,UAAU,SAAS,CAAC,GAAQ,EAAE,OAAe;gBACjD,MAAM,WAAW,CAAC,SAAS,CAAC,GAAG,EAAE,YAAG,CAAM,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;YAChE,CAAC;YAED,MAAM,iBAAiB,GAAG,MAAM,iBAAiB,CAAC,iBAAiB,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;YAEvF,MAAM,OAAO,CAAC,GAAG,CAAC;gBACjB,SAAS,CAAC,OAAO,EAAE,OAAO,CAAC,IAAI,CAAC;gBAChC,SAAS,CAAC,SAAS,EAAE,OAAO,CAAC,MAAM,CAAC;gBACpC,SAAS,CAAC,SAAS,EAAE,OAAO,CAAC,MAAM,CAAC;gBACpC,SAAS,CAAC,SAAS,EAAE,iBAAiB,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC;gBACxF,SAAS,CAAC,gBAAgB,EAAE,OAAO,CAAC,aAAa,IAAI,EAAE,CAAC;aACxD,CAAC,CAAC;YAEH,MAAM,KAAK,GAA8B;gBACxC,IAAI,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE;gBAC3B,MAAM,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,EAAE,aAAa,EAAE;gBAChG,MAAM,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,WAAW,EAAE,SAAS,EAAE,MAAM,EAAE,aAAa,EAAE;gBAChG,MAAM,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE;aAC/B,CAAC;YACF,aAAa,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QACjC,CAAC;KACD;IA9ED,oBA8EC;IAED,KAAK,UAAU,iBAAiB,CAAC,iBAAsB,EAAiB,mBAA2C;QAClH,IAAI,mBAAmB,EAAE;YACxB,OAAO,mBAAmB,KAAK,SAAS,CAAC;SACzC;QACD,MAAM,MAAM,GAAG,MAAM,iBAAiB,CAAC,IAAI,CAAC,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,EAAE,KAAK,EAAE,gBAAgB,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC,CAAC;QACrJ,OAAO,MAAM,EAAE,MAAM,CAAC;IACvB,CAAC;IAED,MAAe,iBAAkB,SAAQ,aAAG;QAC3C,YAAY,IAA+B;YAC1C,KAAK,CAAC,IAAI,CAAC,CAAC;QACb,CAAC;QAED,GAAG,CAAC,QAA0B;YAC7B,MAAM,EAAE,gBAAgB,EAAE,GAAG,QAAQ,CAAC,GAAG,CAAC,mBAAG,CAAY,CAAC;YAC1D,IAAI,gBAAgB,YAAY,kBAAI,EAAS;gBAC5C,MAAM,EAAE,GAAG,gBAAgB,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC;gBAC5C,IAAI,CAAC,EAAE,EAAE;oBACR,OAAO;iBACP;gBACD,IAAI,CAAC,gBAAgB,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;aACpC;QACF,CAAC;KAGD;IAED,MAAa,IAAoC,SAAQ,iBAAiB;QACzE;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,+CAA+C;gBACnD,QAAQ,EAAE,qBAAqB;gBAC/B,KAAK,EAAE;oBACN,KAAK,EAAE,IAAA,cAAQ,EACd,CAA+C,EAC/C,IAA0C,CAC1C;oBACD,QAAQ,EAAE,0CAA0C;iBACpD;gBACD,IAAI,EAAE,cAAG,CAAK,cAAc;gBAC5B,EAAE,EAAE,IAAI;aACR,CAAC,CAAC;QACJ,CAAC;QAEQ,KAAK,CAAC,gBAAgB,CAAC,SAAe,EAAkB,QAA0B;YAC1F,MAAM,YAAY,GAAG,SAAS,CAAC,eAAe,CAAC,GAAG,EAAE,EAAE,YAAY,CAAC;YACnE,IAAI,CAAC,YAAY,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC/C,OAAO;aACP;YAED,MAAM,IAAI,GAAG,YAAY;iBACvB,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CACV,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,eAAe,CACnC,CAAC,CACD,CACD;iBACA,IAAI,CAAC,IAAI,CAAC,CAAC;YAEb,MAAM,MAAM,GAAG,YAAY;iBACzB,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CACV,SAAS,CAAC,oBAAoB,CAAC,MAAM,CAAC,QAAQ,EAAG,CAAC,eAAe,CAChE,SAAS,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC,EAAE,CAAC,CAAC,CAC/C,CACD;iBACA,IAAI,CAAC,IAAI,CAAC,CAAC;YAEb,MAAM,MAAM,GAAG,YAAY;iBACzB,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CACV,SAAS,CAAC,oBAAoB,CAAC,MAAM,CAAC,QAAQ,EAAG,CAAC,eAAe,CAChE,SAAS,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC,EAAE,CAAC,CAAC,CAC/C,CACD;iBACA,IAAI,CAAC,IAAI,CAAC,CAAC;YAEb,MAAM,MAAM,GAAG,YAAY;iBACzB,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CACV,SAAS,CAAC,oBAAoB,CAAC,MAAM,CAAC,QAAQ,EAAG,CAAC,eAAe,CAChE,SAAS,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC,CAAC,CAC7C,CACD;iBACA,IAAI,CAAC,IAAI,CAAC,CAAC;YAEb,IAAI,IAAI,EAA6B,CAAC,GAAG,CAAC,QAAQ,EAAE;gBACnD,IAAI,EAAE;oBACL,IAAI;oBACJ,MAAM;oBACN,MAAM;oBACN,MAAM;oBACN,UAAU,EAAE,SAAS,CAAC,oBAAoB,CAAC,MAAM,CAAC,QAAQ,EAAG,CAAC,aAAa,EAAE;iBAC7E;aACD,CAAC,CAAC;QACJ,CAAC;KACD;IAjED,oBAiEC","file":"devCommands.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { randomPath } from 'vs/base/common/extpath';\nimport { URI } from 'vs/base/common/uri';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { localize } from 'vs/nls';\nimport { ILocalizedString } from 'vs/platform/action/common/action';\nimport { Action2, IAction2Options } from 'vs/platform/actions/common/actions';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\nimport { IResourceMergeEditorInput } from 'vs/workbench/common/editor';\nimport { MergeEditor } from 'vs/workbench/contrib/mergeEditor/browser/view/mergeEditor';\nimport { MergeEditorViewModel } from 'vs/workbench/contrib/mergeEditor/browser/view/viewModel';\nimport { MergeEditorContents } from 'vs/workbench/contrib/mergeEditor/common/mergeEditor';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\n\nconst MERGE_EDITOR_CATEGORY: ILocalizedString = { value: localize('mergeEditor', \"Merge Editor (Dev)\"), original: 'Merge Editor (Dev)' };\n\nexport class MergeEditorOpenContentsFromJSON extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'merge.dev.openContentsJson',\n\t\t\tcategory: MERGE_EDITOR_CATEGORY,\n\t\t\ttitle: {\n\t\t\t\tvalue: localize(\n\t\t\t\t\t'merge.dev.openState',\n\t\t\t\t\t'Open Merge Editor State from JSON'\n\t\t\t\t),\n\t\t\t\toriginal: 'Open Merge Editor State from JSON',\n\t\t\t},\n\t\t\ticon: Codicon.layoutCentered,\n\t\t\tf1: true,\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, args?: { data?: MergeEditorContents; resultState?: 'initial' | 'current' }): Promise<void> {\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst languageService = accessor.get(ILanguageService);\n\t\tconst env = accessor.get(INativeEnvironmentService);\n\t\tconst fileService = accessor.get(IFileService);\n\n\t\tif (!args) {\n\t\t\targs = {};\n\t\t}\n\n\t\tlet content: MergeEditorContents;\n\t\tif (!args.data) {\n\t\t\tconst result = await quickInputService.input({\n\t\t\t\tprompt: localize('mergeEditor.enterJSON', 'Enter JSON'),\n\t\t\t\tvalue: await clipboardService.readText(),\n\t\t\t});\n\t\t\tif (result === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tcontent =\n\t\t\t\tresult !== ''\n\t\t\t\t\t? JSON.parse(result)\n\t\t\t\t\t: { base: '', input1: '', input2: '', result: '', languageId: 'plaintext' };\n\t\t} else {\n\t\t\tcontent = args.data;\n\t\t}\n\n\t\tconst targetDir = URI.joinPath(env.tmpDir, randomPath());\n\n\t\tconst extension = languageService.getExtensions(content.languageId)[0] || '';\n\n\t\tconst baseUri = URI.joinPath(targetDir, `/base${extension}`);\n\t\tconst input1Uri = URI.joinPath(targetDir, `/input1${extension}`);\n\t\tconst input2Uri = URI.joinPath(targetDir, `/input2${extension}`);\n\t\tconst resultUri = URI.joinPath(targetDir, `/result${extension}`);\n\t\tconst initialResultUri = URI.joinPath(targetDir, `/initialResult${extension}`);\n\n\t\tasync function writeFile(uri: URI, content: string): Promise<void> {\n\t\t\tawait fileService.writeFile(uri, VSBuffer.fromString(content));\n\t\t}\n\n\t\tconst shouldOpenInitial = await promptOpenInitial(quickInputService, args.resultState);\n\n\t\tawait Promise.all([\n\t\t\twriteFile(baseUri, content.base),\n\t\t\twriteFile(input1Uri, content.input1),\n\t\t\twriteFile(input2Uri, content.input2),\n\t\t\twriteFile(resultUri, shouldOpenInitial ? (content.initialResult || '') : content.result),\n\t\t\twriteFile(initialResultUri, content.initialResult || ''),\n\t\t]);\n\n\t\tconst input: IResourceMergeEditorInput = {\n\t\t\tbase: { resource: baseUri },\n\t\t\tinput1: { resource: input1Uri, label: 'Input 1', description: 'Input 1', detail: '(from JSON)' },\n\t\t\tinput2: { resource: input2Uri, label: 'Input 2', description: 'Input 2', detail: '(from JSON)' },\n\t\t\tresult: { resource: resultUri },\n\t\t};\n\t\teditorService.openEditor(input);\n\t}\n}\n\nasync function promptOpenInitial(quickInputService: IQuickInputService, resultStateOverride?: 'initial' | 'current') {\n\tif (resultStateOverride) {\n\t\treturn resultStateOverride === 'initial';\n\t}\n\tconst result = await quickInputService.pick([{ label: 'result', result: false }, { label: 'initial result', result: true }], { canPickMany: false });\n\treturn result?.result;\n}\n\nabstract class MergeEditorAction extends Action2 {\n\tconstructor(desc: Readonly<IAction2Options>) {\n\t\tsuper(desc);\n\t}\n\n\trun(accessor: ServicesAccessor): void {\n\t\tconst { activeEditorPane } = accessor.get(IEditorService);\n\t\tif (activeEditorPane instanceof MergeEditor) {\n\t\t\tconst vm = activeEditorPane.viewModel.get();\n\t\t\tif (!vm) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.runWithViewModel(vm, accessor);\n\t\t}\n\t}\n\n\tabstract runWithViewModel(viewModel: MergeEditorViewModel, accessor: ServicesAccessor): void;\n}\n\nexport class OpenSelectionInTemporaryMergeEditor extends MergeEditorAction {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'merge.dev.openSelectionInTemporaryMergeEditor',\n\t\t\tcategory: MERGE_EDITOR_CATEGORY,\n\t\t\ttitle: {\n\t\t\t\tvalue: localize(\n\t\t\t\t\t'merge.dev.openSelectionInTemporaryMergeEditor',\n\t\t\t\t\t'Open Selection In Temporary Merge Editor'\n\t\t\t\t),\n\t\t\t\toriginal: 'Open Selection In Temporary Merge Editor',\n\t\t\t},\n\t\t\ticon: Codicon.layoutCentered,\n\t\t\tf1: true,\n\t\t});\n\t}\n\n\toverride async runWithViewModel(viewModel: MergeEditorViewModel, accessor: ServicesAccessor) {\n\t\tconst rangesInBase = viewModel.selectionInBase.get()?.rangesInBase;\n\t\tif (!rangesInBase || rangesInBase.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst base = rangesInBase\n\t\t\t.map((r) =>\n\t\t\t\tviewModel.model.base.getValueInRange(\n\t\t\t\t\tr\n\t\t\t\t)\n\t\t\t)\n\t\t\t.join('\\n');\n\n\t\tconst input1 = rangesInBase\n\t\t\t.map((r) =>\n\t\t\t\tviewModel.inputCodeEditorView1.editor.getModel()!.getValueInRange(\n\t\t\t\t\tviewModel.model.translateBaseRangeToInput(1, r)\n\t\t\t\t)\n\t\t\t)\n\t\t\t.join('\\n');\n\n\t\tconst input2 = rangesInBase\n\t\t\t.map((r) =>\n\t\t\t\tviewModel.inputCodeEditorView2.editor.getModel()!.getValueInRange(\n\t\t\t\t\tviewModel.model.translateBaseRangeToInput(2, r)\n\t\t\t\t)\n\t\t\t)\n\t\t\t.join('\\n');\n\n\t\tconst result = rangesInBase\n\t\t\t.map((r) =>\n\t\t\t\tviewModel.resultCodeEditorView.editor.getModel()!.getValueInRange(\n\t\t\t\t\tviewModel.model.translateBaseRangeToResult(r)\n\t\t\t\t)\n\t\t\t)\n\t\t\t.join('\\n');\n\n\t\tnew MergeEditorOpenContentsFromJSON().run(accessor, {\n\t\t\tdata: {\n\t\t\t\tbase,\n\t\t\t\tinput1,\n\t\t\t\tinput2,\n\t\t\t\tresult,\n\t\t\t\tlanguageId: viewModel.resultCodeEditorView.editor.getModel()!.getLanguageId()\n\t\t\t}\n\t\t});\n\t}\n}\n"]}