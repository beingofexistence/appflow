{"version":3,"sources":["vs/workbench/contrib/mergeEditor/browser/commands/devCommands.ts"],"names":[],"mappings":"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","file":"devCommands.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { URI } from 'vs/base/common/uri';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { localize } from 'vs/nls';\nimport { ILocalizedString } from 'vs/platform/action/common/action';\nimport { Action2 } from 'vs/platform/actions/common/actions';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { IFileDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\nimport { IResourceMergeEditorInput } from 'vs/workbench/common/editor';\nimport { MergeEditor } from 'vs/workbench/contrib/mergeEditor/browser/view/mergeEditor';\nimport { ctxIsMergeEditor, MergeEditorContents } from 'vs/workbench/contrib/mergeEditor/common/mergeEditor';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\n\nconst MERGE_EDITOR_CATEGORY: ILocalizedString = { value: localize('mergeEditor', \"Merge Editor (Dev)\"), original: 'Merge Editor (Dev)' };\n\nexport class MergeEditorCopyContentsToJSON extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'merge.dev.copyContentsJson',\n\t\t\tcategory: MERGE_EDITOR_CATEGORY,\n\t\t\ttitle: {\n\t\t\t\tvalue: localize(\n\t\t\t\t\t'merge.dev.copyState',\n\t\t\t\t\t'Copy Merge Editor State as JSON'\n\t\t\t\t),\n\t\t\t\toriginal: 'Copy Merge Editor State as JSON',\n\t\t\t},\n\t\t\ticon: Codicon.layoutCentered,\n\t\t\tf1: true,\n\t\t\tprecondition: ctxIsMergeEditor,\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor): void {\n\t\tconst { activeEditorPane } = accessor.get(IEditorService);\n\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\tconst notificationService = accessor.get(INotificationService);\n\n\t\tif (!(activeEditorPane instanceof MergeEditor)) {\n\t\t\tnotificationService.info({\n\t\t\t\tname: localize('mergeEditor.name', 'Merge Editor'),\n\t\t\t\tmessage: localize('mergeEditor.noActiveMergeEditor', \"No active merge editor\")\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tconst model = activeEditorPane.model;\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\t\tconst contents: MergeEditorContents = {\n\t\t\tlanguageId: model.resultTextModel.getLanguageId(),\n\t\t\tbase: model.base.getValue(),\n\t\t\tinput1: model.input1.textModel.getValue(),\n\t\t\tinput2: model.input2.textModel.getValue(),\n\t\t\tresult: model.resultTextModel.getValue(),\n\t\t\tinitialResult: model.getInitialResultValue(),\n\t\t};\n\t\tconst jsonStr = JSON.stringify(contents, undefined, 4);\n\t\tclipboardService.writeText(jsonStr);\n\n\t\tnotificationService.info({\n\t\t\tname: localize('mergeEditor.name', 'Merge Editor'),\n\t\t\tmessage: localize('mergeEditor.successfullyCopiedMergeEditorContents', \"Successfully copied merge editor state\"),\n\t\t});\n\t}\n}\n\nexport class MergeEditorSaveContentsToFolder extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'merge.dev.saveContentsToFolder',\n\t\t\tcategory: MERGE_EDITOR_CATEGORY,\n\t\t\ttitle: {\n\t\t\t\tvalue: localize(\n\t\t\t\t\t'merge.dev.saveContentsToFolder',\n\t\t\t\t\t'Save Merge Editor State to Folder'\n\t\t\t\t),\n\t\t\t\toriginal: 'Save Merge Editor State to Folder',\n\t\t\t},\n\t\t\ticon: Codicon.layoutCentered,\n\t\t\tf1: true,\n\t\t\tprecondition: ctxIsMergeEditor,\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor) {\n\t\tconst { activeEditorPane } = accessor.get(IEditorService);\n\t\tconst notificationService = accessor.get(INotificationService);\n\t\tconst dialogService = accessor.get(IFileDialogService);\n\t\tconst fileService = accessor.get(IFileService);\n\t\tconst languageService = accessor.get(ILanguageService);\n\n\t\tif (!(activeEditorPane instanceof MergeEditor)) {\n\t\t\tnotificationService.info({\n\t\t\t\tname: localize('mergeEditor.name', 'Merge Editor'),\n\t\t\t\tmessage: localize('mergeEditor.noActiveMergeEditor', \"No active merge editor\")\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\t\tconst model = activeEditorPane.model;\n\t\tif (!model) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst result = await dialogService.showOpenDialog({\n\t\t\tcanSelectFiles: false,\n\t\t\tcanSelectFolders: true,\n\t\t\tcanSelectMany: false,\n\t\t\ttitle: localize('mergeEditor.selectFolderToSaveTo', 'Select folder to save to')\n\t\t});\n\t\tif (!result) {\n\t\t\treturn;\n\t\t}\n\t\tconst targetDir = result[0];\n\n\t\tconst extension = languageService.getExtensions(model.resultTextModel.getLanguageId())[0] || '';\n\n\t\tasync function write(fileName: string, source: string) {\n\t\t\tawait fileService.writeFile(URI.joinPath(targetDir, fileName + extension), VSBuffer.fromString(source), {});\n\t\t}\n\n\t\tawait Promise.all([\n\t\t\twrite('base', model.base.getValue()),\n\t\t\twrite('input1', model.input1.textModel.getValue()),\n\t\t\twrite('input2', model.input2.textModel.getValue()),\n\t\t\twrite('result', model.resultTextModel.getValue()),\n\t\t\twrite('initialResult', model.getInitialResultValue()),\n\t\t]);\n\n\t\tnotificationService.info({\n\t\t\tname: localize('mergeEditor.name', 'Merge Editor'),\n\t\t\tmessage: localize('mergeEditor.successfullySavedMergeEditorContentsToFolder', \"Successfully saved merge editor state to folder\"),\n\t\t});\n\t}\n}\n\nexport class MergeEditorLoadContentsFromFolder extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'merge.dev.loadContentsFromFolder',\n\t\t\tcategory: MERGE_EDITOR_CATEGORY,\n\t\t\ttitle: {\n\t\t\t\tvalue: localize(\n\t\t\t\t\t'merge.dev.loadContentsFromFolder',\n\t\t\t\t\t'Load Merge Editor State from Folder'\n\t\t\t\t),\n\t\t\t\toriginal: 'Load Merge Editor State from Folder',\n\t\t\t},\n\t\t\ticon: Codicon.layoutCentered,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, args?: { folderUri?: URI; resultState?: 'initial' | 'current' }) {\n\t\tconst dialogService = accessor.get(IFileDialogService);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst fileService = accessor.get(IFileService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\n\t\tif (!args) {\n\t\t\targs = {};\n\t\t}\n\n\t\tlet targetDir: URI;\n\t\tif (!args.folderUri) {\n\t\t\tconst result = await dialogService.showOpenDialog({\n\t\t\t\tcanSelectFiles: false,\n\t\t\t\tcanSelectFolders: true,\n\t\t\t\tcanSelectMany: false,\n\t\t\t\ttitle: localize('mergeEditor.selectFolderToSaveTo', 'Select folder to save to')\n\t\t\t});\n\t\t\tif (!result) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\ttargetDir = result[0];\n\t\t} else {\n\t\t\ttargetDir = args.folderUri;\n\t\t}\n\n\t\tconst targetDirInfo = await fileService.resolve(targetDir);\n\n\t\tfunction findFile(name: string) {\n\t\t\treturn targetDirInfo.children!.find(c => c.name.startsWith(name))?.resource!;\n\t\t}\n\n\t\tconst shouldOpenInitial = await promptOpenInitial(quickInputService, args.resultState);\n\n\t\tconst baseUri = findFile('base');\n\t\tconst input1Uri = findFile('input1');\n\t\tconst input2Uri = findFile('input2');\n\t\tconst resultUri = findFile(shouldOpenInitial ? 'initialResult' : 'result');\n\n\t\tconst input: IResourceMergeEditorInput = {\n\t\t\tbase: { resource: baseUri },\n\t\t\tinput1: { resource: input1Uri, label: 'Input 1', description: 'Input 1', detail: '(from file)' },\n\t\t\tinput2: { resource: input2Uri, label: 'Input 2', description: 'Input 2', detail: '(from file)' },\n\t\t\tresult: { resource: resultUri },\n\t\t};\n\t\teditorService.openEditor(input);\n\t}\n}\n\nasync function promptOpenInitial(quickInputService: IQuickInputService, resultStateOverride?: 'initial' | 'current') {\n\tif (resultStateOverride) {\n\t\treturn resultStateOverride === 'initial';\n\t}\n\tconst result = await quickInputService.pick([{ label: 'result', result: false }, { label: 'initial result', result: true }], { canPickMany: false });\n\treturn result?.result;\n}\n"]}