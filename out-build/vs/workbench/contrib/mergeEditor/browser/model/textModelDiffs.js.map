{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/mergeEditor/browser/model/textModelDiffs.ts"],"names":[],"mappings":"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","file":"textModelDiffs.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { compareBy, numberComparator } from 'vs/base/common/arrays';\nimport { BugIndicatingError } from 'vs/base/common/errors';\nimport { Disposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { DetailedLineRangeMapping } from 'vs/workbench/contrib/mergeEditor/browser/model/mapping';\nimport { LineRangeEdit } from 'vs/workbench/contrib/mergeEditor/browser/model/editing';\nimport { LineRange } from 'vs/workbench/contrib/mergeEditor/browser/model/lineRange';\nimport { ReentrancyBarrier } from 'vs/workbench/contrib/mergeEditor/browser/utils';\nimport { IMergeDiffComputer } from './diffComputer';\nimport { autorun, IObservable, IReader, ITransaction, observableSignal, observableValue, transaction } from 'vs/base/common/observable';\nimport { UndoRedoGroup } from 'vs/platform/undoRedo/common/undoRedo';\n\nexport class TextModelDiffs extends Disposable {\n\tprivate recomputeCount = 0;\n\tprivate readonly _state = observableValue<TextModelDiffState, TextModelDiffChangeReason>(this, TextModelDiffState.initializing);\n\tprivate readonly _diffs = observableValue<DetailedLineRangeMapping[], TextModelDiffChangeReason>(this, []);\n\n\tprivate readonly barrier = new ReentrancyBarrier();\n\tprivate isDisposed = false;\n\n\tpublic get isApplyingChange() {\n\t\treturn this.barrier.isActive;\n\t}\n\n\tconstructor(\n\t\tprivate readonly baseTextModel: ITextModel,\n\t\tprivate readonly textModel: ITextModel,\n\t\tprivate readonly diffComputer: IMergeDiffComputer,\n\t) {\n\t\tsuper();\n\n\t\tconst recomputeSignal = observableSignal('recompute');\n\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description Update diff state */\n\t\t\trecomputeSignal.read(reader);\n\t\t\tthis.recompute(reader);\n\t\t}));\n\n\t\tthis._register(\n\t\t\tbaseTextModel.onDidChangeContent(\n\t\t\t\tthis.barrier.makeExclusive(() => {\n\t\t\t\t\trecomputeSignal.trigger(undefined);\n\t\t\t\t})\n\t\t\t)\n\t\t);\n\t\tthis._register(\n\t\t\ttextModel.onDidChangeContent(\n\t\t\t\tthis.barrier.makeExclusive(() => {\n\t\t\t\t\trecomputeSignal.trigger(undefined);\n\t\t\t\t})\n\t\t\t)\n\t\t);\n\t\tthis._register(toDisposable(() => {\n\t\t\tthis.isDisposed = true;\n\t\t}));\n\t}\n\n\tpublic get state(): IObservable<TextModelDiffState, TextModelDiffChangeReason> {\n\t\treturn this._state;\n\t}\n\n\t/**\n\t * Diffs from base to input.\n\t*/\n\tpublic get diffs(): IObservable<DetailedLineRangeMapping[], TextModelDiffChangeReason> {\n\t\treturn this._diffs;\n\t}\n\n\tprivate isInitializing = true;\n\n\tprivate recompute(reader: IReader): void {\n\t\tthis.recomputeCount++;\n\t\tconst currentRecomputeIdx = this.recomputeCount;\n\n\t\tif (this._state.get() === TextModelDiffState.initializing) {\n\t\t\tthis.isInitializing = true;\n\t\t}\n\n\t\ttransaction(tx => {\n\t\t\t/** @description Starting Diff Computation. */\n\t\t\tthis._state.set(\n\t\t\t\tthis.isInitializing ? TextModelDiffState.initializing : TextModelDiffState.updating,\n\t\t\t\ttx,\n\t\t\t\tTextModelDiffChangeReason.other\n\t\t\t);\n\t\t});\n\n\t\tconst result = this.diffComputer.computeDiff(this.baseTextModel, this.textModel, reader);\n\n\t\tresult.then((result) => {\n\t\t\tif (this.isDisposed) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (currentRecomputeIdx !== this.recomputeCount) {\n\t\t\t\t// There is a newer recompute call\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\ttransaction(tx => {\n\t\t\t\t/** @description Completed Diff Computation */\n\t\t\t\tif (result.diffs) {\n\t\t\t\t\tthis._state.set(TextModelDiffState.upToDate, tx, TextModelDiffChangeReason.textChange);\n\t\t\t\t\tthis._diffs.set(result.diffs, tx, TextModelDiffChangeReason.textChange);\n\t\t\t\t} else {\n\t\t\t\t\tthis._state.set(TextModelDiffState.error, tx, TextModelDiffChangeReason.textChange);\n\t\t\t\t}\n\t\t\t\tthis.isInitializing = false;\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate ensureUpToDate(): void {\n\t\tif (this.state.get() !== TextModelDiffState.upToDate) {\n\t\t\tthrow new BugIndicatingError('Cannot remove diffs when the model is not up to date');\n\t\t}\n\t}\n\n\tpublic removeDiffs(diffToRemoves: DetailedLineRangeMapping[], transaction: ITransaction | undefined, group?: UndoRedoGroup): void {\n\t\tthis.ensureUpToDate();\n\n\t\tdiffToRemoves.sort(compareBy((d) => d.inputRange.startLineNumber, numberComparator));\n\t\tdiffToRemoves.reverse();\n\n\t\tlet diffs = this._diffs.get();\n\n\t\tfor (const diffToRemove of diffToRemoves) {\n\t\t\t// TODO improve performance\n\t\t\tconst len = diffs.length;\n\t\t\tdiffs = diffs.filter((d) => d !== diffToRemove);\n\t\t\tif (len === diffs.length) {\n\t\t\t\tthrow new BugIndicatingError();\n\t\t\t}\n\n\t\t\tthis.barrier.runExclusivelyOrThrow(() => {\n\t\t\t\tconst edits = diffToRemove.getReverseLineEdit().toEdits(this.textModel.getLineCount());\n\t\t\t\tthis.textModel.pushEditOperations(null, edits, () => null, group);\n\t\t\t});\n\n\t\t\tdiffs = diffs.map((d) =>\n\t\t\t\td.outputRange.isAfter(diffToRemove.outputRange)\n\t\t\t\t\t? d.addOutputLineDelta(diffToRemove.inputRange.lineCount - diffToRemove.outputRange.lineCount)\n\t\t\t\t\t: d\n\t\t\t);\n\t\t}\n\n\t\tthis._diffs.set(diffs, transaction, TextModelDiffChangeReason.other);\n\t}\n\n\t/**\n\t * Edit must be conflict free.\n\t */\n\tpublic applyEditRelativeToOriginal(edit: LineRangeEdit, transaction: ITransaction | undefined, group?: UndoRedoGroup): void {\n\t\tthis.ensureUpToDate();\n\n\t\tconst editMapping = new DetailedLineRangeMapping(\n\t\t\tedit.range,\n\t\t\tthis.baseTextModel,\n\t\t\tnew LineRange(edit.range.startLineNumber, edit.newLines.length),\n\t\t\tthis.textModel\n\t\t);\n\n\t\tlet firstAfter = false;\n\t\tlet delta = 0;\n\t\tconst newDiffs = new Array<DetailedLineRangeMapping>();\n\t\tfor (const diff of this.diffs.get()) {\n\t\t\tif (diff.inputRange.touches(edit.range)) {\n\t\t\t\tthrow new BugIndicatingError('Edit must be conflict free.');\n\t\t\t} else if (diff.inputRange.isAfter(edit.range)) {\n\t\t\t\tif (!firstAfter) {\n\t\t\t\t\tfirstAfter = true;\n\t\t\t\t\tnewDiffs.push(editMapping.addOutputLineDelta(delta));\n\t\t\t\t}\n\n\t\t\t\tnewDiffs.push(diff.addOutputLineDelta(edit.newLines.length - edit.range.lineCount));\n\t\t\t} else {\n\t\t\t\tnewDiffs.push(diff);\n\t\t\t}\n\n\t\t\tif (!firstAfter) {\n\t\t\t\tdelta += diff.outputRange.lineCount - diff.inputRange.lineCount;\n\t\t\t}\n\t\t}\n\n\t\tif (!firstAfter) {\n\t\t\tfirstAfter = true;\n\t\t\tnewDiffs.push(editMapping.addOutputLineDelta(delta));\n\t\t}\n\n\t\tthis.barrier.runExclusivelyOrThrow(() => {\n\t\t\tconst edits = new LineRangeEdit(edit.range.delta(delta), edit.newLines).toEdits(this.textModel.getLineCount());\n\t\t\tthis.textModel.pushEditOperations(null, edits, () => null, group);\n\t\t});\n\t\tthis._diffs.set(newDiffs, transaction, TextModelDiffChangeReason.other);\n\t}\n\n\tpublic findTouchingDiffs(baseRange: LineRange): DetailedLineRangeMapping[] {\n\t\treturn this.diffs.get().filter(d => d.inputRange.touches(baseRange));\n\t}\n\n\tprivate getResultLine(lineNumber: number, reader?: IReader): number | DetailedLineRangeMapping {\n\t\tlet offset = 0;\n\t\tconst diffs = reader ? this.diffs.read(reader) : this.diffs.get();\n\t\tfor (const diff of diffs) {\n\t\t\tif (diff.inputRange.contains(lineNumber) || diff.inputRange.endLineNumberExclusive === lineNumber) {\n\t\t\t\treturn diff;\n\t\t\t} else if (diff.inputRange.endLineNumberExclusive < lineNumber) {\n\t\t\t\toffset = diff.resultingDeltaFromOriginalToModified;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn lineNumber + offset;\n\t}\n\n\tpublic getResultLineRange(baseRange: LineRange, reader?: IReader): LineRange {\n\t\tlet start = this.getResultLine(baseRange.startLineNumber, reader);\n\t\tif (typeof start !== 'number') {\n\t\t\tstart = start.outputRange.startLineNumber;\n\t\t}\n\t\tlet endExclusive = this.getResultLine(baseRange.endLineNumberExclusive, reader);\n\t\tif (typeof endExclusive !== 'number') {\n\t\t\tendExclusive = endExclusive.outputRange.endLineNumberExclusive;\n\t\t}\n\n\t\treturn LineRange.fromLineNumbers(start, endExclusive);\n\t}\n}\n\nexport const enum TextModelDiffChangeReason {\n\tother = 0,\n\ttextChange = 1,\n}\n\nexport const enum TextModelDiffState {\n\tinitializing = 1,\n\tupToDate = 2,\n\tupdating = 3,\n\terror = 4,\n}\n\nexport interface ITextModelDiffsState {\n\tstate: TextModelDiffState;\n\tdiffs: DetailedLineRangeMapping[];\n}\n"]}