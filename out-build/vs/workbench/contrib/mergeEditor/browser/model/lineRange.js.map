{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/mergeEditor/browser/model/lineRange.ts"],"names":[],"mappings":"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","file":"lineRange.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Comparator, compareBy, numberComparator } from 'vs/base/common/arrays';\nimport { BugIndicatingError } from 'vs/base/common/errors';\nimport { Constants } from 'vs/base/common/uint';\nimport { Range } from 'vs/editor/common/core/range';\nimport { ITextModel } from 'vs/editor/common/model';\n\nexport class LineRange {\n\tpublic static readonly compareByStart: Comparator<LineRange> = compareBy(l => l.startLineNumber, numberComparator);\n\n\tpublic static join(ranges: LineRange[]): LineRange | undefined {\n\t\tif (ranges.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet startLineNumber = Number.MAX_SAFE_INTEGER;\n\t\tlet endLineNumber = 0;\n\t\tfor (const range of ranges) {\n\t\t\tstartLineNumber = Math.min(startLineNumber, range.startLineNumber);\n\t\t\tendLineNumber = Math.max(endLineNumber, range.startLineNumber + range.lineCount);\n\t\t}\n\t\treturn new LineRange(startLineNumber, endLineNumber - startLineNumber);\n\t}\n\n\tstatic fromLineNumbers(startLineNumber: number, endExclusiveLineNumber: number): LineRange {\n\t\treturn new LineRange(startLineNumber, endExclusiveLineNumber - startLineNumber);\n\t}\n\n\tconstructor(\n\t\tpublic readonly startLineNumber: number,\n\t\tpublic readonly lineCount: number\n\t) {\n\t\tif (lineCount < 0) {\n\t\t\tthrow new BugIndicatingError();\n\t\t}\n\t}\n\n\tpublic join(other: LineRange): LineRange {\n\t\treturn new LineRange(Math.min(this.startLineNumber, other.startLineNumber), Math.max(this.endLineNumberExclusive, other.endLineNumberExclusive) - this.startLineNumber);\n\t}\n\n\tpublic get endLineNumberExclusive(): number {\n\t\treturn this.startLineNumber + this.lineCount;\n\t}\n\n\tpublic get isEmpty(): boolean {\n\t\treturn this.lineCount === 0;\n\t}\n\n\t/**\n\t * Returns false if there is at least one line between `this` and `other`.\n\t*/\n\tpublic touches(other: LineRange): boolean {\n\t\treturn (\n\t\t\tthis.endLineNumberExclusive >= other.startLineNumber &&\n\t\t\tother.endLineNumberExclusive >= this.startLineNumber\n\t\t);\n\t}\n\n\tpublic isAfter(range: LineRange): boolean {\n\t\treturn this.startLineNumber >= range.endLineNumberExclusive;\n\t}\n\n\tpublic isBefore(range: LineRange): boolean {\n\t\treturn range.startLineNumber >= this.endLineNumberExclusive;\n\t}\n\n\tpublic delta(lineDelta: number): LineRange {\n\t\treturn new LineRange(this.startLineNumber + lineDelta, this.lineCount);\n\t}\n\n\tpublic toString() {\n\t\treturn `[${this.startLineNumber},${this.endLineNumberExclusive})`;\n\t}\n\n\tpublic equals(originalRange: LineRange) {\n\t\treturn this.startLineNumber === originalRange.startLineNumber && this.lineCount === originalRange.lineCount;\n\t}\n\n\tpublic contains(lineNumber: number): boolean {\n\t\treturn this.startLineNumber <= lineNumber && lineNumber < this.endLineNumberExclusive;\n\t}\n\n\tpublic deltaEnd(delta: number): LineRange {\n\t\treturn new LineRange(this.startLineNumber, this.lineCount + delta);\n\t}\n\n\tpublic deltaStart(lineDelta: number): LineRange {\n\t\treturn new LineRange(this.startLineNumber + lineDelta, this.lineCount - lineDelta);\n\t}\n\n\tpublic getLines(model: ITextModel): string[] {\n\t\tconst result = new Array(this.lineCount);\n\t\tfor (let i = 0; i < this.lineCount; i++) {\n\t\t\tresult[i] = model.getLineContent(this.startLineNumber + i);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic containsRange(range: LineRange): boolean {\n\t\treturn this.startLineNumber <= range.startLineNumber && range.endLineNumberExclusive <= this.endLineNumberExclusive;\n\t}\n\n\tpublic toRange(): Range {\n\t\treturn new Range(this.startLineNumber, 1, this.endLineNumberExclusive, 1);\n\t}\n\n\tpublic toInclusiveRange(): Range | undefined {\n\t\tif (this.isEmpty) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn new Range(this.startLineNumber, 1, this.endLineNumberExclusive - 1, Constants.MAX_SAFE_SMALL_INTEGER);\n\t}\n\n\tpublic toInclusiveRangeOrEmpty(): Range {\n\t\tif (this.isEmpty) {\n\t\t\treturn new Range(this.startLineNumber, 1, this.startLineNumber, 1);\n\t\t}\n\t\treturn new Range(this.startLineNumber, 1, this.endLineNumberExclusive - 1, Constants.MAX_SAFE_SMALL_INTEGER);\n\t}\n\n\tintersects(lineRange: LineRange) {\n\t\treturn this.startLineNumber <= lineRange.endLineNumberExclusive\n\t\t\t&& lineRange.startLineNumber <= this.endLineNumberExclusive;\n\t}\n}\n"]}