{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/mergeEditor/browser/model/editing.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOhG;;;MAGE;IACF,MAAa,IAAI;QAChB,YACiB,KAAW,EACX,QAAkB;YADlB,UAAK,GAAL,KAAK,CAAM;YACX,aAAQ,GAAR,QAAQ,CAAU;QAC/B,CAAC;QAEE,MAAM,CAAC,KAAW;YACxB,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,IAAA,YAAG,EAAI,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;QAChF,CAAC;QAEM,OAAO,CAAC,cAAsB;YACpC,OAAO,IAAI,IAAI,CAAM,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QACtD,CAAC;KACD;IAbD,oBAaC;IAED,MAAa,IAAI;QAChB,YACiB,KAAU,EACV,OAAe;YADf,UAAK,GAAL,KAAK,CAAK;YACV,YAAO,GAAP,OAAO,CAAQ;QAC5B,CAAC;QAEE,MAAM,CAAC,KAAW;YACxB,OAAO,WAAG,CAAG,WAAW,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,OAAO,KAAK,KAAK,CAAC,OAAO,CAAC;QACrF,CAAC;KACD;IATD,oBASC;IAED,MAAa,IAAI;QAChB,YAA4B,KAA+B;YAA/B,UAAK,GAAL,KAAK,CAA0B;QAAI,CAAC;QAEzD,OAAO,CAAC,cAAsB;YACpC,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;gBAC3B,IAAI,CAAC,CAAC,KAAK,CAAC,sBAAsB,IAAI,cAAc,EAAE;oBACrD,OAAO;wBACN,KAAK,EAAE,IAAI,WAAG,CAAG,CAAC,CAAC,KAAK,CAAC,eAAe,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,sBAAsB,EAAE,CAAC,CAAC;wBAC/E,IAAI,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;qBAC5C,CAAC;iBACF;gBAED,IAAI,CAAC,CAAC,KAAK,CAAC,eAAe,KAAK,CAAC,EAAE;oBAClC,OAAO;wBACN,KAAK,EAAE,IAAI,WAAG,CAAG,CAAC,EAAE,CAAC,EAAE,cAAc,EAAE,MAAM,CAAC,gBAAgB,CAAC;wBAC/D,IAAI,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;qBAC3B,CAAC;iBACF;gBAED,OAAO;oBACN,KAAK,EAAE,IAAI,WAAG,CAAG,CAAC,CAAC,KAAK,CAAC,eAAe,GAAG,CAAC,EAAE,MAAM,CAAC,gBAAgB,EAAE,cAAc,EAAE,MAAM,CAAC,gBAAgB,CAAC;oBAC/G,IAAI,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC;iBAC5C,CAAC;YACH,CAAC,CAAC,CAAC;QACJ,CAAC;KACD;IAzBD,oBAyBC","file":"editing.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { equals } from 'vs/base/common/arrays';\nimport { Range } from 'vs/editor/common/core/range';\nimport { IIdentifiedSingleEditOperation } from 'vs/editor/common/model';\nimport { LineRange } from './lineRange';\n\n/**\n * Represents an edit, expressed in whole lines:\n * At (before) {@link LineRange.startLineNumber}, delete {@link LineRange.lineCount} many lines and insert {@link newLines}.\n*/\nexport class LineRangeEdit {\n\tconstructor(\n\t\tpublic readonly range: LineRange,\n\t\tpublic readonly newLines: string[]\n\t) { }\n\n\tpublic equals(other: LineRangeEdit): boolean {\n\t\treturn this.range.equals(other.range) && equals(this.newLines, other.newLines);\n\t}\n\n\tpublic toEdits(modelLineCount: number): IIdentifiedSingleEditOperation[] {\n\t\treturn new LineEdits([this]).toEdits(modelLineCount);\n\t}\n}\n\nexport class RangeEdit {\n\tconstructor(\n\t\tpublic readonly range: Range,\n\t\tpublic readonly newText: string\n\t) { }\n\n\tpublic equals(other: RangeEdit): boolean {\n\t\treturn Range.equalsRange(this.range, other.range) && this.newText === other.newText;\n\t}\n}\n\nexport class LineEdits {\n\tconstructor(public readonly edits: readonly LineRangeEdit[]) { }\n\n\tpublic toEdits(modelLineCount: number): IIdentifiedSingleEditOperation[] {\n\t\treturn this.edits.map((e) => {\n\t\t\tif (e.range.endLineNumberExclusive <= modelLineCount) {\n\t\t\t\treturn {\n\t\t\t\t\trange: new Range(e.range.startLineNumber, 1, e.range.endLineNumberExclusive, 1),\n\t\t\t\t\ttext: e.newLines.map(s => s + '\\n').join(''),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (e.range.startLineNumber === 1) {\n\t\t\t\treturn {\n\t\t\t\t\trange: new Range(1, 1, modelLineCount, Number.MAX_SAFE_INTEGER),\n\t\t\t\t\ttext: e.newLines.join('\\n'),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\trange: new Range(e.range.startLineNumber - 1, Number.MAX_SAFE_INTEGER, modelLineCount, Number.MAX_SAFE_INTEGER),\n\t\t\t\ttext: e.newLines.map(s => '\\n' + s).join(''),\n\t\t\t};\n\t\t});\n\t}\n}\n"]}