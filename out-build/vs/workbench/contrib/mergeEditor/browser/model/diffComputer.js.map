{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/mergeEditor/browser/model/diffComputer.ts"],"names":[],"mappings":"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","file":"diffComputer.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { assertFn, checkAdjacentItems } from 'vs/base/common/assert';\nimport { IReader } from 'vs/base/common/observable';\nimport { RangeMapping as DiffRangeMapping } from 'vs/editor/common/diff/rangeMapping';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IEditorWorkerService } from 'vs/editor/common/services/editorWorker';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { LineRange } from 'vs/workbench/contrib/mergeEditor/browser/model/lineRange';\nimport { DetailedLineRangeMapping, RangeMapping } from 'vs/workbench/contrib/mergeEditor/browser/model/mapping';\nimport { observableConfigValue } from 'vs/workbench/contrib/mergeEditor/browser/utils';\nimport { LineRange as DiffLineRange } from 'vs/editor/common/core/lineRange';\n\nexport interface IMergeDiffComputer {\n\tcomputeDiff(textModel1: ITextModel, textModel2: ITextModel, reader: IReader): Promise<IMergeDiffComputerResult>;\n}\n\nexport interface IMergeDiffComputerResult {\n\tdiffs: DetailedLineRangeMapping[] | null;\n}\n\nexport class MergeDiffComputer implements IMergeDiffComputer {\n\tprivate readonly mergeAlgorithm = observableConfigValue<'smart' | 'experimental' | 'legacy' | 'advanced'>(\n\t\t'mergeEditor.diffAlgorithm', 'advanced', this.configurationService)\n\t\t.map(v => v === 'smart' ? 'legacy' : v === 'experimental' ? 'advanced' : v);\n\n\tconstructor(\n\t\t@IEditorWorkerService private readonly editorWorkerService: IEditorWorkerService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t) {\n\t}\n\n\tasync computeDiff(textModel1: ITextModel, textModel2: ITextModel, reader: IReader): Promise<IMergeDiffComputerResult> {\n\t\tconst diffAlgorithm = this.mergeAlgorithm.read(reader);\n\t\tconst result = await this.editorWorkerService.computeDiff(\n\t\t\ttextModel1.uri,\n\t\t\ttextModel2.uri,\n\t\t\t{\n\t\t\t\tignoreTrimWhitespace: false,\n\t\t\t\tmaxComputationTimeMs: 0,\n\t\t\t\tcomputeMoves: false,\n\t\t\t},\n\t\t\tdiffAlgorithm,\n\t\t);\n\n\t\tif (!result) {\n\t\t\tthrow new Error('Diff computation failed');\n\t\t}\n\n\t\tif (textModel1.isDisposed() || textModel2.isDisposed()) {\n\t\t\treturn { diffs: null };\n\t\t}\n\n\t\tconst changes = result.changes.map(c =>\n\t\t\tnew DetailedLineRangeMapping(\n\t\t\t\ttoLineRange(c.original),\n\t\t\t\ttextModel1,\n\t\t\t\ttoLineRange(c.modified),\n\t\t\t\ttextModel2,\n\t\t\t\tc.innerChanges?.map(ic => toRangeMapping(ic))\n\t\t\t)\n\t\t);\n\n\t\tassertFn(() => {\n\t\t\tfor (const c of changes) {\n\t\t\t\tconst inputRange = c.inputRange;\n\t\t\t\tconst outputRange = c.outputRange;\n\t\t\t\tconst inputTextModel = c.inputTextModel;\n\t\t\t\tconst outputTextModel = c.outputTextModel;\n\n\t\t\t\tfor (const map of c.rangeMappings) {\n\t\t\t\t\tlet inputRangesValid = inputRange.startLineNumber - 1 <= map.inputRange.startLineNumber\n\t\t\t\t\t\t&& map.inputRange.endLineNumber <= inputRange.endLineNumberExclusive;\n\t\t\t\t\tif (inputRangesValid && map.inputRange.startLineNumber === inputRange.startLineNumber - 1) {\n\t\t\t\t\t\tinputRangesValid = map.inputRange.endColumn >= inputTextModel.getLineMaxColumn(map.inputRange.startLineNumber);\n\t\t\t\t\t}\n\t\t\t\t\tif (inputRangesValid && map.inputRange.endLineNumber === inputRange.endLineNumberExclusive) {\n\t\t\t\t\t\tinputRangesValid = map.inputRange.endColumn === 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tlet outputRangesValid = outputRange.startLineNumber - 1 <= map.outputRange.startLineNumber\n\t\t\t\t\t\t&& map.outputRange.endLineNumber <= outputRange.endLineNumberExclusive;\n\t\t\t\t\tif (outputRangesValid && map.outputRange.startLineNumber === outputRange.startLineNumber - 1) {\n\t\t\t\t\t\toutputRangesValid = map.outputRange.endColumn >= outputTextModel.getLineMaxColumn(map.outputRange.endLineNumber);\n\t\t\t\t\t}\n\t\t\t\t\tif (outputRangesValid && map.outputRange.endLineNumber === outputRange.endLineNumberExclusive) {\n\t\t\t\t\t\toutputRangesValid = map.outputRange.endColumn === 1;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!inputRangesValid || !outputRangesValid) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn changes.length === 0 || (changes[0].inputRange.startLineNumber === changes[0].outputRange.startLineNumber &&\n\t\t\t\tcheckAdjacentItems(changes,\n\t\t\t\t\t(m1, m2) => m2.inputRange.startLineNumber - m1.inputRange.endLineNumberExclusive === m2.outputRange.startLineNumber - m1.outputRange.endLineNumberExclusive &&\n\t\t\t\t\t\t// There has to be an unchanged line in between (otherwise both diffs should have been joined)\n\t\t\t\t\t\tm1.inputRange.endLineNumberExclusive < m2.inputRange.startLineNumber &&\n\t\t\t\t\t\tm1.outputRange.endLineNumberExclusive < m2.outputRange.startLineNumber,\n\t\t\t\t));\n\t\t});\n\n\t\treturn {\n\t\t\tdiffs: changes\n\t\t};\n\t}\n}\n\nexport function toLineRange(range: DiffLineRange): LineRange {\n\treturn new LineRange(range.startLineNumber, range.length);\n}\n\nexport function toRangeMapping(mapping: DiffRangeMapping): RangeMapping {\n\treturn new RangeMapping(mapping.originalRange, mapping.modifiedRange);\n}\n"]}