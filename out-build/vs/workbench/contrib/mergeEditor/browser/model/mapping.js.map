{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/mergeEditor/browser/model/mapping.ts"],"names":[],"mappings":"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","file":"mapping.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { compareBy, lastOrDefault, numberComparator } from 'vs/base/common/arrays';\nimport { findLast } from 'vs/base/common/arraysFind';\nimport { assertFn, checkAdjacentItems } from 'vs/base/common/assert';\nimport { BugIndicatingError } from 'vs/base/common/errors';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { concatArrays } from 'vs/workbench/contrib/mergeEditor/browser/utils';\nimport { LineRangeEdit } from './editing';\nimport { LineRange } from './lineRange';\nimport { rangeIsBeforeOrTouching, rangeContainsPosition, lengthBetweenPositions, addLength } from 'vs/workbench/contrib/mergeEditor/browser/model/rangeUtils';\n\n/**\n * Represents a mapping of an input line range to an output line range.\n*/\nexport class LineRangeMapping {\n\tpublic static join(mappings: readonly LineRangeMapping[]): LineRangeMapping | undefined {\n\t\treturn mappings.reduce<undefined | LineRangeMapping>((acc, cur) => acc ? acc.join(cur) : cur, undefined);\n\t}\n\tconstructor(\n\t\tpublic readonly inputRange: LineRange,\n\t\tpublic readonly outputRange: LineRange\n\t) { }\n\n\tpublic extendInputRange(extendedInputRange: LineRange): LineRangeMapping {\n\t\tif (!extendedInputRange.containsRange(this.inputRange)) {\n\t\t\tthrow new BugIndicatingError();\n\t\t}\n\n\t\tconst startDelta = extendedInputRange.startLineNumber - this.inputRange.startLineNumber;\n\t\tconst endDelta = extendedInputRange.endLineNumberExclusive - this.inputRange.endLineNumberExclusive;\n\t\treturn new LineRangeMapping(\n\t\t\textendedInputRange,\n\t\t\tnew LineRange(\n\t\t\t\tthis.outputRange.startLineNumber + startDelta,\n\t\t\t\tthis.outputRange.lineCount - startDelta + endDelta\n\t\t\t)\n\t\t);\n\t}\n\n\tpublic join(other: LineRangeMapping): LineRangeMapping {\n\t\treturn new LineRangeMapping(\n\t\t\tthis.inputRange.join(other.inputRange),\n\t\t\tthis.outputRange.join(other.outputRange)\n\t\t);\n\t}\n\n\tpublic get resultingDeltaFromOriginalToModified(): number {\n\t\treturn this.outputRange.endLineNumberExclusive - this.inputRange.endLineNumberExclusive;\n\t}\n\n\tpublic toString(): string {\n\t\treturn `${this.inputRange.toString()} -> ${this.outputRange.toString()}`;\n\t}\n\n\tpublic addOutputLineDelta(delta: number): LineRangeMapping {\n\t\treturn new LineRangeMapping(\n\t\t\tthis.inputRange,\n\t\t\tthis.outputRange.delta(delta)\n\t\t);\n\t}\n\n\tpublic addInputLineDelta(delta: number): LineRangeMapping {\n\t\treturn new LineRangeMapping(\n\t\t\tthis.inputRange.delta(delta),\n\t\t\tthis.outputRange\n\t\t);\n\t}\n\n\tpublic reverse(): LineRangeMapping {\n\t\treturn new LineRangeMapping(this.outputRange, this.inputRange);\n\t}\n}\n\n/**\n* Represents a total monotonous mapping of line ranges in one document to another document.\n*/\nexport class DocumentLineRangeMap {\n\tpublic static betweenOutputs(\n\t\tinputToOutput1: readonly LineRangeMapping[],\n\t\tinputToOutput2: readonly LineRangeMapping[],\n\t\tinputLineCount: number\n\t): DocumentLineRangeMap {\n\t\tconst alignments = MappingAlignment.compute(inputToOutput1, inputToOutput2);\n\t\tconst mappings = alignments.map((m) => new LineRangeMapping(m.output1Range, m.output2Range));\n\t\treturn new DocumentLineRangeMap(mappings, inputLineCount);\n\t}\n\n\tconstructor(\n\t\t/**\n\t\t * The line range mappings that define this document mapping.\n\t\t * The space between two input ranges must equal the space between two output ranges.\n\t\t * These holes act as dense sequence of 1:1 line mappings.\n\t\t*/\n\t\tpublic readonly lineRangeMappings: LineRangeMapping[],\n\t\tpublic readonly inputLineCount: number\n\t) {\n\t\tassertFn(() => {\n\t\t\treturn checkAdjacentItems(lineRangeMappings,\n\t\t\t\t(m1, m2) => m1.inputRange.isBefore(m2.inputRange) && m1.outputRange.isBefore(m2.outputRange) &&\n\t\t\t\t\tm2.inputRange.startLineNumber - m1.inputRange.endLineNumberExclusive === m2.outputRange.startLineNumber - m1.outputRange.endLineNumberExclusive,\n\t\t\t);\n\t\t});\n\t}\n\n\tpublic project(lineNumber: number): LineRangeMapping {\n\t\tconst lastBefore = findLast(this.lineRangeMappings, r => r.inputRange.startLineNumber <= lineNumber);\n\t\tif (!lastBefore) {\n\t\t\treturn new LineRangeMapping(\n\t\t\t\tnew LineRange(lineNumber, 1),\n\t\t\t\tnew LineRange(lineNumber, 1)\n\t\t\t);\n\t\t}\n\n\t\tif (lastBefore.inputRange.contains(lineNumber)) {\n\t\t\treturn lastBefore;\n\t\t}\n\t\tconst containingRange = new LineRange(lineNumber, 1);\n\t\tconst mappedRange = new LineRange(\n\t\t\tlineNumber +\n\t\t\tlastBefore.outputRange.endLineNumberExclusive -\n\t\t\tlastBefore.inputRange.endLineNumberExclusive,\n\t\t\t1\n\t\t);\n\t\treturn new LineRangeMapping(containingRange, mappedRange);\n\t}\n\n\tpublic get outputLineCount(): number {\n\t\tconst last = lastOrDefault(this.lineRangeMappings);\n\t\tconst diff = last ? last.outputRange.endLineNumberExclusive - last.inputRange.endLineNumberExclusive : 0;\n\t\treturn this.inputLineCount + diff;\n\t}\n\n\tpublic reverse(): DocumentLineRangeMap {\n\t\treturn new DocumentLineRangeMap(\n\t\t\tthis.lineRangeMappings.map(r => r.reverse()),\n\t\t\tthis.outputLineCount\n\t\t);\n\t}\n}\n\n/**\n * Aligns two mappings with a common input range.\n */\nexport class MappingAlignment<T extends LineRangeMapping> {\n\tpublic static compute<T extends LineRangeMapping>(\n\t\tfromInputToOutput1: readonly T[],\n\t\tfromInputToOutput2: readonly T[]\n\t): MappingAlignment<T>[] {\n\t\tconst compareByStartLineNumber = compareBy<LineRangeMapping, number>(\n\t\t\t(d) => d.inputRange.startLineNumber,\n\t\t\tnumberComparator\n\t\t);\n\n\t\tconst combinedDiffs = concatArrays(\n\t\t\tfromInputToOutput1.map((diff) => ({ source: 0 as const, diff })),\n\t\t\tfromInputToOutput2.map((diff) => ({ source: 1 as const, diff }))\n\t\t).sort(compareBy((d) => d.diff, compareByStartLineNumber));\n\n\t\tconst currentDiffs = [new Array<T>(), new Array<T>()];\n\t\tconst deltaFromBaseToInput = [0, 0];\n\n\t\tconst alignments = new Array<MappingAlignment<T>>();\n\n\t\tfunction pushAndReset(inputRange: LineRange) {\n\t\t\tconst mapping1 = LineRangeMapping.join(currentDiffs[0]) || new LineRangeMapping(inputRange, inputRange.delta(deltaFromBaseToInput[0]));\n\t\t\tconst mapping2 = LineRangeMapping.join(currentDiffs[1]) || new LineRangeMapping(inputRange, inputRange.delta(deltaFromBaseToInput[1]));\n\n\t\t\talignments.push(\n\t\t\t\tnew MappingAlignment(\n\t\t\t\t\tcurrentInputRange!,\n\t\t\t\t\tmapping1.extendInputRange(currentInputRange!).outputRange,\n\t\t\t\t\tcurrentDiffs[0],\n\t\t\t\t\tmapping2.extendInputRange(currentInputRange!).outputRange,\n\t\t\t\t\tcurrentDiffs[1]\n\t\t\t\t)\n\t\t\t);\n\t\t\tcurrentDiffs[0] = [];\n\t\t\tcurrentDiffs[1] = [];\n\t\t}\n\n\t\tlet currentInputRange: LineRange | undefined;\n\n\t\tfor (const diff of combinedDiffs) {\n\t\t\tconst range = diff.diff.inputRange;\n\t\t\tif (currentInputRange && !currentInputRange.touches(range)) {\n\t\t\t\tpushAndReset(currentInputRange);\n\t\t\t\tcurrentInputRange = undefined;\n\t\t\t}\n\t\t\tdeltaFromBaseToInput[diff.source] =\n\t\t\t\tdiff.diff.resultingDeltaFromOriginalToModified;\n\t\t\tcurrentInputRange = currentInputRange ? currentInputRange.join(range) : range;\n\t\t\tcurrentDiffs[diff.source].push(diff.diff);\n\t\t}\n\t\tif (currentInputRange) {\n\t\t\tpushAndReset(currentInputRange);\n\t\t}\n\n\t\treturn alignments;\n\t}\n\n\tconstructor(\n\t\tpublic readonly inputRange: LineRange,\n\t\tpublic readonly output1Range: LineRange,\n\t\tpublic readonly output1LineMappings: T[],\n\t\tpublic readonly output2Range: LineRange,\n\t\tpublic readonly output2LineMappings: T[],\n\t) {\n\t}\n\n\tpublic toString(): string {\n\t\treturn `${this.output1Range} <- ${this.inputRange} -> ${this.output2Range}`;\n\t}\n}\n\n/**\n * A line range mapping with inner range mappings.\n*/\nexport class DetailedLineRangeMapping extends LineRangeMapping {\n\tpublic static override join(mappings: readonly DetailedLineRangeMapping[]): DetailedLineRangeMapping | undefined {\n\t\treturn mappings.reduce<undefined | DetailedLineRangeMapping>((acc, cur) => acc ? acc.join(cur) : cur, undefined);\n\t}\n\n\tpublic readonly rangeMappings: readonly RangeMapping[];\n\n\tconstructor(\n\t\tinputRange: LineRange,\n\t\tpublic readonly inputTextModel: ITextModel,\n\t\toutputRange: LineRange,\n\t\tpublic readonly outputTextModel: ITextModel,\n\t\trangeMappings?: readonly RangeMapping[],\n\t) {\n\t\tsuper(inputRange, outputRange);\n\n\t\tthis.rangeMappings = rangeMappings || [new RangeMapping(this.inputRange.toRange(), this.outputRange.toRange())];\n\t}\n\n\tpublic override addOutputLineDelta(delta: number): DetailedLineRangeMapping {\n\t\treturn new DetailedLineRangeMapping(\n\t\t\tthis.inputRange,\n\t\t\tthis.inputTextModel,\n\t\t\tthis.outputRange.delta(delta),\n\t\t\tthis.outputTextModel,\n\t\t\tthis.rangeMappings.map(d => d.addOutputLineDelta(delta))\n\t\t);\n\t}\n\n\tpublic override addInputLineDelta(delta: number): DetailedLineRangeMapping {\n\t\treturn new DetailedLineRangeMapping(\n\t\t\tthis.inputRange.delta(delta),\n\t\t\tthis.inputTextModel,\n\t\t\tthis.outputRange,\n\t\t\tthis.outputTextModel,\n\t\t\tthis.rangeMappings.map(d => d.addInputLineDelta(delta))\n\t\t);\n\t}\n\n\tpublic override join(other: DetailedLineRangeMapping): DetailedLineRangeMapping {\n\t\treturn new DetailedLineRangeMapping(\n\t\t\tthis.inputRange.join(other.inputRange),\n\t\t\tthis.inputTextModel,\n\t\t\tthis.outputRange.join(other.outputRange),\n\t\t\tthis.outputTextModel,\n\t\t);\n\t}\n\n\tpublic getLineEdit(): LineRangeEdit {\n\t\treturn new LineRangeEdit(this.inputRange, this.getOutputLines());\n\t}\n\n\tpublic getReverseLineEdit(): LineRangeEdit {\n\t\treturn new LineRangeEdit(this.outputRange, this.getInputLines());\n\t}\n\n\tprivate getOutputLines(): string[] {\n\t\treturn this.outputRange.getLines(this.outputTextModel);\n\t}\n\n\tprivate getInputLines(): string[] {\n\t\treturn this.inputRange.getLines(this.inputTextModel);\n\t}\n}\n\n/**\n * Represents a mapping of an input range to an output range.\n*/\nexport class RangeMapping {\n\tconstructor(public readonly inputRange: Range, public readonly outputRange: Range) {\n\t}\n\ttoString(): string {\n\t\tfunction rangeToString(range: Range) {\n\t\t\t// TODO@hediet make this the default Range.toString\n\t\t\treturn `[${range.startLineNumber}:${range.startColumn}, ${range.endLineNumber}:${range.endColumn})`;\n\t\t}\n\n\t\treturn `${rangeToString(this.inputRange)} -> ${rangeToString(this.outputRange)}`;\n\t}\n\n\taddOutputLineDelta(deltaLines: number): RangeMapping {\n\t\treturn new RangeMapping(\n\t\t\tthis.inputRange,\n\t\t\tnew Range(\n\t\t\t\tthis.outputRange.startLineNumber + deltaLines,\n\t\t\t\tthis.outputRange.startColumn,\n\t\t\t\tthis.outputRange.endLineNumber + deltaLines,\n\t\t\t\tthis.outputRange.endColumn\n\t\t\t)\n\t\t);\n\t}\n\n\taddInputLineDelta(deltaLines: number): RangeMapping {\n\t\treturn new RangeMapping(\n\t\t\tnew Range(\n\t\t\t\tthis.inputRange.startLineNumber + deltaLines,\n\t\t\t\tthis.inputRange.startColumn,\n\t\t\t\tthis.inputRange.endLineNumber + deltaLines,\n\t\t\t\tthis.inputRange.endColumn\n\t\t\t),\n\t\t\tthis.outputRange,\n\t\t);\n\t}\n\n\treverse(): RangeMapping {\n\t\treturn new RangeMapping(this.outputRange, this.inputRange);\n\t}\n}\n\n/**\n* Represents a total monotonous mapping of ranges in one document to another document.\n*/\nexport class DocumentRangeMap {\n\tconstructor(\n\t\t/**\n\t\t * The line range mappings that define this document mapping.\n\t\t * Can have holes.\n\t\t*/\n\t\tpublic readonly rangeMappings: RangeMapping[],\n\t\tpublic readonly inputLineCount: number\n\t) {\n\t\tassertFn(() => checkAdjacentItems(\n\t\t\trangeMappings,\n\t\t\t(m1, m2) =>\n\t\t\t\trangeIsBeforeOrTouching(m1.inputRange, m2.inputRange) &&\n\t\t\t\trangeIsBeforeOrTouching(m1.outputRange, m2.outputRange) /*&&\n\t\t\t\tlengthBetweenPositions(m1.inputRange.getEndPosition(), m2.inputRange.getStartPosition()).equals(\n\t\t\t\t\tlengthBetweenPositions(m1.outputRange.getEndPosition(), m2.outputRange.getStartPosition())\n\t\t\t\t)*/\n\t\t));\n\t}\n\n\tpublic project(position: Position): RangeMapping {\n\t\tconst lastBefore = findLast(this.rangeMappings, r => r.inputRange.getStartPosition().isBeforeOrEqual(position));\n\t\tif (!lastBefore) {\n\t\t\treturn new RangeMapping(\n\t\t\t\tRange.fromPositions(position, position),\n\t\t\t\tRange.fromPositions(position, position)\n\t\t\t);\n\t\t}\n\n\t\tif (rangeContainsPosition(lastBefore.inputRange, position)) {\n\t\t\treturn lastBefore;\n\t\t}\n\n\t\tconst dist = lengthBetweenPositions(lastBefore.inputRange.getEndPosition(), position);\n\t\tconst outputPos = addLength(lastBefore.outputRange.getEndPosition(), dist);\n\n\t\treturn new RangeMapping(\n\t\t\tRange.fromPositions(position),\n\t\t\tRange.fromPositions(outputPos)\n\t\t);\n\t}\n\n\tpublic projectRange(range: Range): RangeMapping {\n\t\tconst start = this.project(range.getStartPosition());\n\t\tconst end = this.project(range.getEndPosition());\n\t\treturn new RangeMapping(\n\t\t\tstart.inputRange.plusRange(end.inputRange),\n\t\t\tstart.outputRange.plusRange(end.outputRange)\n\t\t);\n\t}\n\n\tpublic get outputLineCount(): number {\n\t\tconst last = lastOrDefault(this.rangeMappings);\n\t\tconst diff = last ? last.outputRange.endLineNumber - last.inputRange.endLineNumber : 0;\n\t\treturn this.inputLineCount + diff;\n\t}\n\n\tpublic reverse(): DocumentRangeMap {\n\t\treturn new DocumentRangeMap(\n\t\t\tthis.rangeMappings.map(m => m.reverse()),\n\t\t\tthis.outputLineCount\n\t\t);\n\t}\n}\n"]}