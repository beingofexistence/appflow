{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/mergeEditor/browser/model/modifiedBaseRange.ts"],"names":[],"mappings":"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","file":"modifiedBaseRange.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { compareBy, equals, numberComparator, tieBreakComparators } from 'vs/base/common/arrays';\nimport { BugIndicatingError } from 'vs/base/common/errors';\nimport { splitLines } from 'vs/base/common/strings';\nimport { Constants } from 'vs/base/common/uint';\nimport { Position } from 'vs/editor/common/core/position';\nimport { Range } from 'vs/editor/common/core/range';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { LineRangeEdit, RangeEdit } from 'vs/workbench/contrib/mergeEditor/browser/model/editing';\nimport { LineRange } from 'vs/workbench/contrib/mergeEditor/browser/model/lineRange';\nimport { DetailedLineRangeMapping, MappingAlignment } from 'vs/workbench/contrib/mergeEditor/browser/model/mapping';\nimport { concatArrays } from 'vs/workbench/contrib/mergeEditor/browser/utils';\n\n/**\n * Describes modifications in input 1 and input 2 for a specific range in base.\n *\n * The UI offers a mechanism to either apply all changes from input 1 or input 2 or both.\n *\n * Immutable.\n*/\nexport class ModifiedBaseRange {\n\tpublic static fromDiffs(\n\t\tdiffs1: readonly DetailedLineRangeMapping[],\n\t\tdiffs2: readonly DetailedLineRangeMapping[],\n\t\tbaseTextModel: ITextModel,\n\t\tinput1TextModel: ITextModel,\n\t\tinput2TextModel: ITextModel\n\t): ModifiedBaseRange[] {\n\t\tconst alignments = MappingAlignment.compute(diffs1, diffs2);\n\t\treturn alignments.map(\n\t\t\t(a) => new ModifiedBaseRange(\n\t\t\t\ta.inputRange,\n\t\t\t\tbaseTextModel,\n\t\t\t\ta.output1Range,\n\t\t\t\tinput1TextModel,\n\t\t\t\ta.output1LineMappings,\n\t\t\t\ta.output2Range,\n\t\t\t\tinput2TextModel,\n\t\t\t\ta.output2LineMappings\n\t\t\t)\n\t\t);\n\t}\n\n\tpublic readonly input1CombinedDiff = DetailedLineRangeMapping.join(this.input1Diffs);\n\tpublic readonly input2CombinedDiff = DetailedLineRangeMapping.join(this.input2Diffs);\n\tpublic readonly isEqualChange = equals(this.input1Diffs, this.input2Diffs, (a, b) => a.getLineEdit().equals(b.getLineEdit()));\n\n\tconstructor(\n\t\tpublic readonly baseRange: LineRange,\n\t\tpublic readonly baseTextModel: ITextModel,\n\t\tpublic readonly input1Range: LineRange,\n\t\tpublic readonly input1TextModel: ITextModel,\n\n\t\t/**\n\t\t * From base to input1\n\t\t*/\n\t\tpublic readonly input1Diffs: readonly DetailedLineRangeMapping[],\n\t\tpublic readonly input2Range: LineRange,\n\t\tpublic readonly input2TextModel: ITextModel,\n\n\t\t/**\n\t\t * From base to input2\n\t\t*/\n\t\tpublic readonly input2Diffs: readonly DetailedLineRangeMapping[]\n\t) {\n\t\tif (this.input1Diffs.length === 0 && this.input2Diffs.length === 0) {\n\t\t\tthrow new BugIndicatingError('must have at least one diff');\n\t\t}\n\t}\n\n\tpublic getInputRange(inputNumber: 1 | 2): LineRange {\n\t\treturn inputNumber === 1 ? this.input1Range : this.input2Range;\n\t}\n\n\tpublic getInputCombinedDiff(inputNumber: 1 | 2): DetailedLineRangeMapping | undefined {\n\t\treturn inputNumber === 1 ? this.input1CombinedDiff : this.input2CombinedDiff;\n\t}\n\n\tpublic getInputDiffs(inputNumber: 1 | 2): readonly DetailedLineRangeMapping[] {\n\t\treturn inputNumber === 1 ? this.input1Diffs : this.input2Diffs;\n\t}\n\n\tpublic get isConflicting(): boolean {\n\t\treturn this.input1Diffs.length > 0 && this.input2Diffs.length > 0;\n\t}\n\n\tpublic get canBeCombined(): boolean {\n\t\treturn this.smartCombineInputs(1) !== undefined;\n\t}\n\n\tpublic get isOrderRelevant(): boolean {\n\t\tconst input1 = this.smartCombineInputs(1);\n\t\tconst input2 = this.smartCombineInputs(2);\n\t\tif (!input1 || !input2) {\n\t\t\treturn false;\n\t\t}\n\t\treturn !input1.equals(input2);\n\t}\n\n\tpublic getEditForBase(state: ModifiedBaseRangeState): { edit: LineRangeEdit | undefined; effectiveState: ModifiedBaseRangeState } {\n\t\tconst diffs: { diff: DetailedLineRangeMapping; inputNumber: InputNumber }[] = [];\n\t\tif (state.includesInput1 && this.input1CombinedDiff) {\n\t\t\tdiffs.push({ diff: this.input1CombinedDiff, inputNumber: 1 });\n\t\t}\n\t\tif (state.includesInput2 && this.input2CombinedDiff) {\n\t\t\tdiffs.push({ diff: this.input2CombinedDiff, inputNumber: 2 });\n\t\t}\n\n\t\tif (diffs.length === 0) {\n\t\t\treturn { edit: undefined, effectiveState: ModifiedBaseRangeState.base };\n\t\t}\n\t\tif (diffs.length === 1) {\n\t\t\treturn { edit: diffs[0].diff.getLineEdit(), effectiveState: ModifiedBaseRangeState.base.withInputValue(diffs[0].inputNumber, true, false) };\n\t\t}\n\n\t\tif (state.kind !== ModifiedBaseRangeStateKind.both) {\n\t\t\tthrow new BugIndicatingError();\n\t\t}\n\n\t\tconst smartCombinedEdit = state.smartCombination ? this.smartCombineInputs(state.firstInput) : this.dumbCombineInputs(state.firstInput);\n\t\tif (smartCombinedEdit) {\n\t\t\treturn { edit: smartCombinedEdit, effectiveState: state };\n\t\t}\n\n\t\treturn {\n\t\t\tedit: diffs[getOtherInputNumber(state.firstInput) - 1].diff.getLineEdit(),\n\t\t\teffectiveState: ModifiedBaseRangeState.base.withInputValue(\n\t\t\t\tgetOtherInputNumber(state.firstInput),\n\t\t\t\ttrue,\n\t\t\t\tfalse\n\t\t\t),\n\t\t};\n\t}\n\n\tprivate smartInput1LineRangeEdit: LineRangeEdit | undefined | null = null;\n\tprivate smartInput2LineRangeEdit: LineRangeEdit | undefined | null = null;\n\n\tprivate smartCombineInputs(firstInput: 1 | 2): LineRangeEdit | undefined {\n\t\tif (firstInput === 1 && this.smartInput1LineRangeEdit !== null) {\n\t\t\treturn this.smartInput1LineRangeEdit;\n\t\t} else if (firstInput === 2 && this.smartInput2LineRangeEdit !== null) {\n\t\t\treturn this.smartInput2LineRangeEdit;\n\t\t}\n\n\t\tconst combinedDiffs = concatArrays(\n\t\t\tthis.input1Diffs.flatMap((diffs) =>\n\t\t\t\tdiffs.rangeMappings.map((diff) => ({ diff, input: 1 as const }))\n\t\t\t),\n\t\t\tthis.input2Diffs.flatMap((diffs) =>\n\t\t\t\tdiffs.rangeMappings.map((diff) => ({ diff, input: 2 as const }))\n\t\t\t)\n\t\t).sort(\n\t\t\ttieBreakComparators(\n\t\t\t\tcompareBy((d) => d.diff.inputRange, Range.compareRangesUsingStarts),\n\t\t\t\tcompareBy((d) => (d.input === firstInput ? 1 : 2), numberComparator)\n\t\t\t)\n\t\t);\n\n\t\tconst sortedEdits = combinedDiffs.map(d => {\n\t\t\tconst sourceTextModel = d.input === 1 ? this.input1TextModel : this.input2TextModel;\n\t\t\treturn new RangeEdit(d.diff.inputRange, sourceTextModel.getValueInRange(d.diff.outputRange));\n\t\t});\n\n\t\tconst result = editsToLineRangeEdit(this.baseRange, sortedEdits, this.baseTextModel);\n\t\tif (firstInput === 1) {\n\t\t\tthis.smartInput1LineRangeEdit = result;\n\t\t} else {\n\t\t\tthis.smartInput2LineRangeEdit = result;\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate dumbInput1LineRangeEdit: LineRangeEdit | undefined | null = null;\n\tprivate dumbInput2LineRangeEdit: LineRangeEdit | undefined | null = null;\n\n\tprivate dumbCombineInputs(firstInput: 1 | 2): LineRangeEdit | undefined {\n\t\tif (firstInput === 1 && this.dumbInput1LineRangeEdit !== null) {\n\t\t\treturn this.dumbInput1LineRangeEdit;\n\t\t} else if (firstInput === 2 && this.dumbInput2LineRangeEdit !== null) {\n\t\t\treturn this.dumbInput2LineRangeEdit;\n\t\t}\n\n\t\tlet input1Lines = this.input1Range.getLines(this.input1TextModel);\n\t\tlet input2Lines = this.input2Range.getLines(this.input2TextModel);\n\t\tif (firstInput === 2) {\n\t\t\t[input1Lines, input2Lines] = [input2Lines, input1Lines];\n\t\t}\n\n\t\tconst result = new LineRangeEdit(this.baseRange, input1Lines.concat(input2Lines));\n\t\tif (firstInput === 1) {\n\t\t\tthis.dumbInput1LineRangeEdit = result;\n\t\t} else {\n\t\t\tthis.dumbInput2LineRangeEdit = result;\n\t\t}\n\t\treturn result;\n\t}\n}\n\nfunction editsToLineRangeEdit(range: LineRange, sortedEdits: RangeEdit[], textModel: ITextModel): LineRangeEdit | undefined {\n\tlet text = '';\n\tconst startsLineBefore = range.startLineNumber > 1;\n\tlet currentPosition = startsLineBefore\n\t\t? new Position(\n\t\t\trange.startLineNumber - 1,\n\t\t\ttextModel.getLineMaxColumn(range.startLineNumber - 1)\n\t\t)\n\t\t: new Position(range.startLineNumber, 1);\n\n\tfor (const edit of sortedEdits) {\n\t\tconst diffStart = edit.range.getStartPosition();\n\t\tif (!currentPosition.isBeforeOrEqual(diffStart)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet originalText = textModel.getValueInRange(Range.fromPositions(currentPosition, diffStart));\n\t\tif (diffStart.lineNumber > textModel.getLineCount()) {\n\t\t\t// assert diffStart.lineNumber === textModel.getLineCount() + 1\n\t\t\t// getValueInRange doesn't include this virtual line break, as the document ends the line before.\n\t\t\t// endsLineAfter will be false.\n\t\t\toriginalText += '\\n';\n\t\t}\n\t\ttext += originalText;\n\t\ttext += edit.newText;\n\t\tcurrentPosition = edit.range.getEndPosition();\n\t}\n\n\tconst endsLineAfter = range.endLineNumberExclusive <= textModel.getLineCount();\n\tconst end = endsLineAfter ? new Position(\n\t\trange.endLineNumberExclusive,\n\t\t1\n\t) : new Position(range.endLineNumberExclusive - 1, Constants.MAX_SAFE_SMALL_INTEGER);\n\n\tconst originalText = textModel.getValueInRange(\n\t\tRange.fromPositions(currentPosition, end)\n\t);\n\ttext += originalText;\n\n\tconst lines = splitLines(text);\n\tif (startsLineBefore) {\n\t\tif (lines[0] !== '') {\n\t\t\treturn undefined;\n\t\t}\n\t\tlines.shift();\n\t}\n\tif (endsLineAfter) {\n\t\tif (lines[lines.length - 1] !== '') {\n\t\t\treturn undefined;\n\t\t}\n\t\tlines.pop();\n\t}\n\treturn new LineRangeEdit(range, lines);\n}\n\nexport enum ModifiedBaseRangeStateKind {\n\tbase,\n\tinput1,\n\tinput2,\n\tboth,\n\tunrecognized,\n}\n\nexport type InputNumber = 1 | 2;\n\nexport function getOtherInputNumber(inputNumber: InputNumber): InputNumber {\n\treturn inputNumber === 1 ? 2 : 1;\n}\n\nexport abstract class AbstractModifiedBaseRangeState {\n\tconstructor() { }\n\n\tabstract get kind(): ModifiedBaseRangeStateKind;\n\n\tpublic get includesInput1(): boolean { return false; }\n\tpublic get includesInput2(): boolean { return false; }\n\n\tpublic includesInput(inputNumber: InputNumber): boolean {\n\t\treturn inputNumber === 1 ? this.includesInput1 : this.includesInput2;\n\t}\n\n\tpublic isInputIncluded(inputNumber: InputNumber): boolean {\n\t\treturn inputNumber === 1 ? this.includesInput1 : this.includesInput2;\n\t}\n\n\tpublic abstract toString(): string;\n\n\tpublic abstract swap(): ModifiedBaseRangeState;\n\n\tpublic abstract withInputValue(inputNumber: InputNumber, value: boolean, smartCombination?: boolean): ModifiedBaseRangeState;\n\n\tpublic abstract equals(other: ModifiedBaseRangeState): boolean;\n\n\tpublic toggle(inputNumber: InputNumber) {\n\t\treturn this.withInputValue(inputNumber, !this.includesInput(inputNumber), true);\n\t}\n\n\tpublic getInput(inputNumber: 1 | 2): InputState {\n\t\tif (!this.isInputIncluded(inputNumber)) {\n\t\t\treturn InputState.excluded;\n\t\t}\n\t\treturn InputState.first;\n\t}\n}\n\nexport class ModifiedBaseRangeStateBase extends AbstractModifiedBaseRangeState {\n\toverride get kind(): ModifiedBaseRangeStateKind.base { return ModifiedBaseRangeStateKind.base; }\n\tpublic override toString(): string { return 'base'; }\n\tpublic override swap(): ModifiedBaseRangeState { return this; }\n\n\tpublic override withInputValue(inputNumber: InputNumber, value: boolean, smartCombination: boolean = false): ModifiedBaseRangeState {\n\t\tif (inputNumber === 1) {\n\t\t\treturn value ? new ModifiedBaseRangeStateInput1() : this;\n\t\t} else {\n\t\t\treturn value ? new ModifiedBaseRangeStateInput2() : this;\n\t\t}\n\t}\n\n\tpublic override equals(other: ModifiedBaseRangeState): boolean {\n\t\treturn other.kind === ModifiedBaseRangeStateKind.base;\n\t}\n}\n\nexport class ModifiedBaseRangeStateInput1 extends AbstractModifiedBaseRangeState {\n\toverride get kind(): ModifiedBaseRangeStateKind.input1 { return ModifiedBaseRangeStateKind.input1; }\n\toverride get includesInput1(): boolean { return true; }\n\tpublic toString(): string { return '1✓'; }\n\tpublic override swap(): ModifiedBaseRangeState { return new ModifiedBaseRangeStateInput2(); }\n\n\tpublic override withInputValue(inputNumber: InputNumber, value: boolean, smartCombination: boolean = false): ModifiedBaseRangeState {\n\t\tif (inputNumber === 1) {\n\t\t\treturn value ? this : new ModifiedBaseRangeStateBase();\n\t\t} else {\n\t\t\treturn value ? new ModifiedBaseRangeStateBoth(1, smartCombination) : new ModifiedBaseRangeStateInput2();\n\t\t}\n\t}\n\n\tpublic override equals(other: ModifiedBaseRangeState): boolean {\n\t\treturn other.kind === ModifiedBaseRangeStateKind.input1;\n\t}\n}\n\nexport class ModifiedBaseRangeStateInput2 extends AbstractModifiedBaseRangeState {\n\toverride get kind(): ModifiedBaseRangeStateKind.input2 { return ModifiedBaseRangeStateKind.input2; }\n\toverride get includesInput2(): boolean { return true; }\n\tpublic toString(): string { return '2✓'; }\n\tpublic override swap(): ModifiedBaseRangeState { return new ModifiedBaseRangeStateInput1(); }\n\n\tpublic withInputValue(inputNumber: InputNumber, value: boolean, smartCombination: boolean = false): ModifiedBaseRangeState {\n\t\tif (inputNumber === 2) {\n\t\t\treturn value ? this : new ModifiedBaseRangeStateBase();\n\t\t} else {\n\t\t\treturn value ? new ModifiedBaseRangeStateBoth(2, smartCombination) : new ModifiedBaseRangeStateInput2();\n\t\t}\n\t}\n\n\tpublic override equals(other: ModifiedBaseRangeState): boolean {\n\t\treturn other.kind === ModifiedBaseRangeStateKind.input2;\n\t}\n}\n\nexport class ModifiedBaseRangeStateBoth extends AbstractModifiedBaseRangeState {\n\tconstructor(\n\t\tpublic readonly firstInput: InputNumber,\n\t\tpublic readonly smartCombination: boolean\n\t) {\n\t\tsuper();\n\t}\n\n\toverride get kind(): ModifiedBaseRangeStateKind.both { return ModifiedBaseRangeStateKind.both; }\n\toverride get includesInput1(): boolean { return true; }\n\toverride get includesInput2(): boolean { return true; }\n\n\tpublic toString(): string {\n\t\treturn '2✓';\n\t}\n\n\tpublic override swap(): ModifiedBaseRangeState { return new ModifiedBaseRangeStateBoth(getOtherInputNumber(this.firstInput), this.smartCombination); }\n\n\tpublic withInputValue(inputNumber: InputNumber, value: boolean, smartCombination: boolean = false): ModifiedBaseRangeState {\n\t\tif (value) {\n\t\t\treturn this;\n\t\t}\n\t\treturn inputNumber === 1 ? new ModifiedBaseRangeStateInput2() : new ModifiedBaseRangeStateInput1();\n\t}\n\n\tpublic override equals(other: ModifiedBaseRangeState): boolean {\n\t\treturn other.kind === ModifiedBaseRangeStateKind.both && this.firstInput === other.firstInput && this.smartCombination === other.smartCombination;\n\t}\n\n\tpublic override getInput(inputNumber: 1 | 2): InputState {\n\t\treturn inputNumber === this.firstInput ? InputState.first : InputState.second;\n\t}\n}\n\nexport class ModifiedBaseRangeStateUnrecognized extends AbstractModifiedBaseRangeState {\n\toverride get kind(): ModifiedBaseRangeStateKind.unrecognized { return ModifiedBaseRangeStateKind.unrecognized; }\n\tpublic override toString(): string { return 'unrecognized'; }\n\tpublic override swap(): ModifiedBaseRangeState { return this; }\n\n\tpublic withInputValue(inputNumber: InputNumber, value: boolean, smartCombination: boolean = false): ModifiedBaseRangeState {\n\t\tif (!value) {\n\t\t\treturn this;\n\t\t}\n\t\treturn inputNumber === 1 ? new ModifiedBaseRangeStateInput1() : new ModifiedBaseRangeStateInput2();\n\t}\n\n\tpublic override equals(other: ModifiedBaseRangeState): boolean {\n\t\treturn other.kind === ModifiedBaseRangeStateKind.unrecognized;\n\t}\n}\n\nexport type ModifiedBaseRangeState = ModifiedBaseRangeStateBase | ModifiedBaseRangeStateInput1 | ModifiedBaseRangeStateInput2 | ModifiedBaseRangeStateInput2 | ModifiedBaseRangeStateBoth | ModifiedBaseRangeStateUnrecognized;\n\nexport namespace ModifiedBaseRangeState {\n\texport const base = new ModifiedBaseRangeStateBase();\n\texport const unrecognized = new ModifiedBaseRangeStateUnrecognized();\n}\n\nexport const enum InputState {\n\texcluded = 0,\n\tfirst = 1,\n\tsecond = 2,\n\tunrecognized = 3\n}\n"]}