{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/mergeEditor/browser/mergeEditorSerializer.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAShG,MAAa,IAAI;QAChB,YAAY;YACX,OAAO,IAAI,CAAC;QACb,CAAC;QAED,SAAS,CAAC,MAAY;YACrB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;QAC5C,CAAC;QAED,MAAM,CAAC,MAAY;YAClB,OAAO;gBACN,IAAI,EAAE,MAAM,CAAC,IAAI;gBACjB,MAAM,EAAE,MAAM,CAAC,MAAM;gBACrB,MAAM,EAAE,MAAM,CAAC,MAAM;gBACrB,MAAM,EAAE,MAAM,CAAC,MAAM;aACrB,CAAC;QACH,CAAC;QAED,WAAW,CAAC,oBAAyB,EAAoB,GAAW;YACnE,IAAI;gBACH,MAAM,IAAI,GAAyB,IAAA,iBAAG,EAAG,GAAG,CAAC,CAAC;gBAC9C,OAAO,oBAAoB,CAAC,cAAc,CACzC,uBAAI,EACJ,IAAI,CAAC,IAAI,EACT,IAAI,uBAAI,CAAiB,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,EACzG,IAAI,uBAAI,CAAiB,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,EACzG,IAAI,CAAC,MAAM,CACX,CAAC;aACF;YAAC,OAAO,GAAG,EAAE;gBACb,IAAA,WAAE,EAAgB,GAAG,CAAC,CAAC;gBACvB,OAAO,SAAS,CAAC;aACjB;QACF,CAAC;KACD;IAjCD,oBAiCC","file":"mergeEditorSerializer.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { parse } from 'vs/base/common/marshalling';\nimport { URI } from 'vs/base/common/uri';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IEditorSerializer } from 'vs/workbench/common/editor';\nimport { MergeEditorInput, MergeEditorInputData } from 'vs/workbench/contrib/mergeEditor/browser/mergeEditorInput';\n\nexport class MergeEditorSerializer implements IEditorSerializer {\n\tcanSerialize(): boolean {\n\t\treturn true;\n\t}\n\n\tserialize(editor: MergeEditorInput): string {\n\t\treturn JSON.stringify(this.toJSON(editor));\n\t}\n\n\ttoJSON(editor: MergeEditorInput): MergeEditorInputJSON {\n\t\treturn {\n\t\t\tbase: editor.base,\n\t\t\tinput1: editor.input1,\n\t\t\tinput2: editor.input2,\n\t\t\tresult: editor.result,\n\t\t};\n\t}\n\n\tdeserialize(instantiationService: IInstantiationService, raw: string): MergeEditorInput | undefined {\n\t\ttry {\n\t\t\tconst data = <MergeEditorInputJSON>parse(raw);\n\t\t\treturn instantiationService.createInstance(\n\t\t\t\tMergeEditorInput,\n\t\t\t\tdata.base,\n\t\t\t\tnew MergeEditorInputData(data.input1.uri, data.input1.title, data.input1.detail, data.input1.description),\n\t\t\t\tnew MergeEditorInputData(data.input2.uri, data.input2.title, data.input2.detail, data.input2.description),\n\t\t\t\tdata.result\n\t\t\t);\n\t\t} catch (err) {\n\t\t\tonUnexpectedError(err);\n\t\t\treturn undefined;\n\t\t}\n\t}\n}\n\ninterface MergeEditorInputJSON {\n\tbase: URI;\n\tinput1: { uri: URI; title?: string; detail?: string; description?: string };\n\tinput2: { uri: URI; title?: string; detail?: string; description?: string };\n\tresult: URI;\n}\n"]}