{"version":3,"sources":["vs/workbench/contrib/mergeEditor/browser/view/colors.ts"],"names":[],"mappings":"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","file":"colors.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { mergeCurrentHeaderBackground, mergeIncomingHeaderBackground, registerColor, transparent } from 'vs/platform/theme/common/colorRegistry';\n\nexport const diff = registerColor(\n\t'mergeEditor.change.background',\n\t{ dark: '#9bb95533', light: '#9bb95533', hcDark: '#9bb95533', hcLight: '#9bb95533', },\n\tlocalize('mergeEditor.change.background', 'The background color for changes.')\n);\n\nexport const diffWord = registerColor(\n\t'mergeEditor.change.word.background',\n\t{ dark: '#9ccc2c33', light: '#9ccc2c66', hcDark: '#9ccc2c33', hcLight: '#9ccc2c66', },\n\tlocalize('mergeEditor.change.word.background', 'The background color for word changes.')\n);\n\nexport const diffBase = registerColor(\n\t'mergeEditor.changeBase.background',\n\t{ dark: '#4B1818FF', light: '#FFCCCCFF', hcDark: '#4B1818FF', hcLight: '#FFCCCCFF', },\n\tlocalize('mergeEditor.changeBase.background', 'The background color for changes in base.')\n);\n\nexport const diffWordBase = registerColor(\n\t'mergeEditor.changeBase.word.background',\n\t{ dark: '#6F1313FF', light: '#FFA3A3FF', hcDark: '#6F1313FF', hcLight: '#FFA3A3FF', },\n\tlocalize('mergeEditor.changeBase.word.background', 'The background color for word changes in base.')\n);\n\nexport const conflictBorderUnhandledUnfocused = registerColor(\n\t'mergeEditor.conflict.unhandledUnfocused.border',\n\t{ dark: '#ffa6007a', light: '#ffa600FF', hcDark: '#ffa6007a', hcLight: '#ffa6007a', },\n\tlocalize('mergeEditor.conflict.unhandledUnfocused.border', 'The border color of unhandled unfocused conflicts.')\n);\n\nexport const conflictBorderUnhandledFocused = registerColor(\n\t'mergeEditor.conflict.unhandledFocused.border',\n\t{ dark: '#ffa600', light: '#ffa600', hcDark: '#ffa600', hcLight: '#ffa600', },\n\tlocalize('mergeEditor.conflict.unhandledFocused.border', 'The border color of unhandled focused conflicts.')\n);\n\nexport const conflictBorderHandledUnfocused = registerColor(\n\t'mergeEditor.conflict.handledUnfocused.border',\n\t{ dark: '#86868649', light: '#86868649', hcDark: '#86868649', hcLight: '#86868649', },\n\tlocalize('mergeEditor.conflict.handledUnfocused.border', 'The border color of handled unfocused conflicts.')\n);\n\nexport const conflictBorderHandledFocused = registerColor(\n\t'mergeEditor.conflict.handledFocused.border',\n\t{ dark: '#c1c1c1cc', light: '#c1c1c1cc', hcDark: '#c1c1c1cc', hcLight: '#c1c1c1cc', },\n\tlocalize('mergeEditor.conflict.handledFocused.border', 'The border color of handled focused conflicts.')\n);\n\nexport const handledConflictMinimapOverViewRulerColor = registerColor(\n\t'mergeEditor.conflict.handled.minimapOverViewRuler',\n\t{ dark: '#adaca8ee', light: '#adaca8ee', hcDark: '#adaca8ee', hcLight: '#adaca8ee', },\n\tlocalize('mergeEditor.conflict.handled.minimapOverViewRuler', 'The foreground color for changes in input 1.')\n);\n\nexport const unhandledConflictMinimapOverViewRulerColor = registerColor(\n\t'mergeEditor.conflict.unhandled.minimapOverViewRuler',\n\t{ dark: '#fcba03FF', light: '#fcba03FF', hcDark: '#fcba03FF', hcLight: '#fcba03FF', },\n\tlocalize('mergeEditor.conflict.unhandled.minimapOverViewRuler', 'The foreground color for changes in input 1.')\n);\n\nexport const conflictingLinesBackground = registerColor(\n\t'mergeEditor.conflictingLines.background',\n\t{ dark: '#ffea0047', light: '#ffea0047', hcDark: '#ffea0047', hcLight: '#ffea0047', },\n\tlocalize('mergeEditor.conflictingLines.background', 'The background of the \"Conflicting Lines\" text.')\n);\n\nconst contentTransparency = 0.4;\nexport const conflictInput1Background = registerColor(\n\t'mergeEditor.conflict.input1.background',\n\t{ dark: transparent(mergeCurrentHeaderBackground, contentTransparency), light: transparent(mergeCurrentHeaderBackground, contentTransparency), hcDark: transparent(mergeCurrentHeaderBackground, contentTransparency), hcLight: transparent(mergeCurrentHeaderBackground, contentTransparency) },\n\tlocalize('mergeEditor.conflict.input1.background', 'The background color of decorations in input 1.')\n);\n\nexport const conflictInput2Background = registerColor(\n\t'mergeEditor.conflict.input2.background',\n\t{ dark: transparent(mergeIncomingHeaderBackground, contentTransparency), light: transparent(mergeIncomingHeaderBackground, contentTransparency), hcDark: transparent(mergeIncomingHeaderBackground, contentTransparency), hcLight: transparent(mergeIncomingHeaderBackground, contentTransparency) },\n\tlocalize('mergeEditor.conflict.input2.background', 'The background color of decorations in input 2.')\n);\n"]}