{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/mergeEditor/browser/view/viewZones.ts"],"names":[],"mappings":"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","file":"viewZones.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { $ } from 'vs/base/browser/dom';\nimport { CompareResult, lastOrDefault } from 'vs/base/common/arrays';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { IObservable, IReader } from 'vs/base/common/observable';\nimport { ICodeEditor, IViewZoneChangeAccessor } from 'vs/editor/browser/editorBrowser';\nimport { LineRange } from 'vs/workbench/contrib/mergeEditor/browser/model/lineRange';\nimport { DetailedLineRangeMapping } from 'vs/workbench/contrib/mergeEditor/browser/model/mapping';\nimport { ModifiedBaseRange } from 'vs/workbench/contrib/mergeEditor/browser/model/modifiedBaseRange';\nimport { join } from 'vs/workbench/contrib/mergeEditor/browser/utils';\nimport { ActionsSource, ConflictActionsFactory, IContentWidgetAction } from 'vs/workbench/contrib/mergeEditor/browser/view/conflictActions';\nimport { getAlignments } from 'vs/workbench/contrib/mergeEditor/browser/view/lineAlignment';\nimport { MergeEditorViewModel } from 'vs/workbench/contrib/mergeEditor/browser/view/viewModel';\n\nexport class ViewZoneComputer {\n\tprivate readonly conflictActionsFactoryInput1 = new ConflictActionsFactory(this.input1Editor);\n\tprivate readonly conflictActionsFactoryInput2 = new ConflictActionsFactory(this.input2Editor);\n\tprivate readonly conflictActionsFactoryResult = new ConflictActionsFactory(this.resultEditor);\n\n\tconstructor(\n\t\tprivate readonly input1Editor: ICodeEditor,\n\t\tprivate readonly input2Editor: ICodeEditor,\n\t\tprivate readonly resultEditor: ICodeEditor,\n\t) { }\n\n\tpublic computeViewZones(\n\t\treader: IReader,\n\t\tviewModel: MergeEditorViewModel,\n\t\toptions: {\n\t\t\tshouldAlignResult: boolean;\n\t\t\tshouldAlignBase: boolean;\n\t\t\tcodeLensesVisible: boolean;\n\t\t\tshowNonConflictingChanges: boolean;\n\t\t}\n\t): MergeEditorViewZones {\n\t\tlet input1LinesAdded = 0;\n\t\tlet input2LinesAdded = 0;\n\t\tlet baseLinesAdded = 0;\n\t\tlet resultLinesAdded = 0;\n\n\t\tconst input1ViewZones: MergeEditorViewZone[] = [];\n\t\tconst input2ViewZones: MergeEditorViewZone[] = [];\n\t\tconst baseViewZones: MergeEditorViewZone[] = [];\n\t\tconst resultViewZones: MergeEditorViewZone[] = [];\n\n\t\tconst model = viewModel.model;\n\n\t\tconst resultDiffs = model.baseResultDiffs.read(reader);\n\t\tconst baseRangeWithStoreAndTouchingDiffs = join(\n\t\t\tmodel.modifiedBaseRanges.read(reader),\n\t\t\tresultDiffs,\n\t\t\t(baseRange, diff) =>\n\t\t\t\tbaseRange.baseRange.touches(diff.inputRange)\n\t\t\t\t\t? CompareResult.neitherLessOrGreaterThan\n\t\t\t\t\t: LineRange.compareByStart(\n\t\t\t\t\t\tbaseRange.baseRange,\n\t\t\t\t\t\tdiff.inputRange\n\t\t\t\t\t)\n\t\t);\n\n\t\tconst shouldShowCodeLenses = options.codeLensesVisible;\n\t\tconst showNonConflictingChanges = options.showNonConflictingChanges;\n\n\t\tlet lastModifiedBaseRange: ModifiedBaseRange | undefined = undefined;\n\t\tlet lastBaseResultDiff: DetailedLineRangeMapping | undefined = undefined;\n\t\tfor (const m of baseRangeWithStoreAndTouchingDiffs) {\n\t\t\tif (shouldShowCodeLenses && m.left && (m.left.isConflicting || showNonConflictingChanges || !model.isHandled(m.left).read(reader))) {\n\t\t\t\tconst actions = new ActionsSource(viewModel, m.left);\n\t\t\t\tif (options.shouldAlignResult || !actions.inputIsEmpty.read(reader)) {\n\t\t\t\t\tinput1ViewZones.push(new CommandViewZone(this.conflictActionsFactoryInput1, m.left.input1Range.startLineNumber - 1, actions.itemsInput1));\n\t\t\t\t\tinput2ViewZones.push(new CommandViewZone(this.conflictActionsFactoryInput2, m.left.input2Range.startLineNumber - 1, actions.itemsInput2));\n\t\t\t\t\tif (options.shouldAlignBase) {\n\t\t\t\t\t\tbaseViewZones.push(new Placeholder(m.left.baseRange.startLineNumber - 1, 16));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst afterLineNumber = m.left.baseRange.startLineNumber + (lastBaseResultDiff?.resultingDeltaFromOriginalToModified ?? 0) - 1;\n\t\t\t\tresultViewZones.push(new CommandViewZone(this.conflictActionsFactoryResult, afterLineNumber, actions.resultItems));\n\n\t\t\t}\n\n\t\t\tconst lastResultDiff = lastOrDefault(m.rights)!;\n\t\t\tif (lastResultDiff) {\n\t\t\t\tlastBaseResultDiff = lastResultDiff;\n\t\t\t}\n\t\t\tlet alignedLines: LineAlignment[];\n\t\t\tif (m.left) {\n\t\t\t\talignedLines = getAlignments(m.left).map(a => ({\n\t\t\t\t\tinput1Line: a[0],\n\t\t\t\t\tbaseLine: a[1],\n\t\t\t\t\tinput2Line: a[2],\n\t\t\t\t\tresultLine: undefined,\n\t\t\t\t}));\n\n\t\t\t\tlastModifiedBaseRange = m.left;\n\t\t\t\t// This is a total hack.\n\t\t\t\talignedLines[alignedLines.length - 1].resultLine =\n\t\t\t\t\tm.left.baseRange.endLineNumberExclusive\n\t\t\t\t\t+ (lastBaseResultDiff ? lastBaseResultDiff.resultingDeltaFromOriginalToModified : 0);\n\n\t\t\t} else {\n\t\t\t\talignedLines = [{\n\t\t\t\t\tbaseLine: lastResultDiff.inputRange.endLineNumberExclusive,\n\t\t\t\t\tinput1Line: lastResultDiff.inputRange.endLineNumberExclusive + (lastModifiedBaseRange ? (lastModifiedBaseRange.input1Range.endLineNumberExclusive - lastModifiedBaseRange.baseRange.endLineNumberExclusive) : 0),\n\t\t\t\t\tinput2Line: lastResultDiff.inputRange.endLineNumberExclusive + (lastModifiedBaseRange ? (lastModifiedBaseRange.input2Range.endLineNumberExclusive - lastModifiedBaseRange.baseRange.endLineNumberExclusive) : 0),\n\t\t\t\t\tresultLine: lastResultDiff.outputRange.endLineNumberExclusive,\n\t\t\t\t}];\n\t\t\t}\n\n\t\t\tfor (const { input1Line, baseLine, input2Line, resultLine } of alignedLines) {\n\t\t\t\tif (!options.shouldAlignBase && (input1Line === undefined || input2Line === undefined)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst input1Line_ =\n\t\t\t\t\tinput1Line !== undefined ? input1Line + input1LinesAdded : -1;\n\t\t\t\tconst input2Line_ =\n\t\t\t\t\tinput2Line !== undefined ? input2Line + input2LinesAdded : -1;\n\t\t\t\tconst baseLine_ = baseLine + baseLinesAdded;\n\t\t\t\tconst resultLine_ = resultLine !== undefined ? resultLine + resultLinesAdded : -1;\n\n\t\t\t\tconst max = Math.max(options.shouldAlignBase ? baseLine_ : 0, input1Line_, input2Line_, options.shouldAlignResult ? resultLine_ : 0);\n\n\t\t\t\tif (input1Line !== undefined) {\n\t\t\t\t\tconst diffInput1 = max - input1Line_;\n\t\t\t\t\tif (diffInput1 > 0) {\n\t\t\t\t\t\tinput1ViewZones.push(new Spacer(input1Line - 1, diffInput1));\n\t\t\t\t\t\tinput1LinesAdded += diffInput1;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (input2Line !== undefined) {\n\t\t\t\t\tconst diffInput2 = max - input2Line_;\n\t\t\t\t\tif (diffInput2 > 0) {\n\t\t\t\t\t\tinput2ViewZones.push(new Spacer(input2Line - 1, diffInput2));\n\t\t\t\t\t\tinput2LinesAdded += diffInput2;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (options.shouldAlignBase) {\n\t\t\t\t\tconst diffBase = max - baseLine_;\n\t\t\t\t\tif (diffBase > 0) {\n\t\t\t\t\t\tbaseViewZones.push(new Spacer(baseLine - 1, diffBase));\n\t\t\t\t\t\tbaseLinesAdded += diffBase;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (options.shouldAlignResult && resultLine !== undefined) {\n\t\t\t\t\tconst diffResult = max - resultLine_;\n\t\t\t\t\tif (diffResult > 0) {\n\t\t\t\t\t\tresultViewZones.push(new Spacer(resultLine - 1, diffResult));\n\t\t\t\t\t\tresultLinesAdded += diffResult;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn new MergeEditorViewZones(input1ViewZones, input2ViewZones, baseViewZones, resultViewZones);\n\t}\n}\n\ninterface LineAlignment {\n\tbaseLine: number;\n\tinput1Line?: number;\n\tinput2Line?: number;\n\tresultLine?: number;\n}\n\nexport class MergeEditorViewZones {\n\tconstructor(\n\t\tpublic readonly input1ViewZones: readonly MergeEditorViewZone[],\n\t\tpublic readonly input2ViewZones: readonly MergeEditorViewZone[],\n\t\tpublic readonly baseViewZones: readonly MergeEditorViewZone[],\n\t\tpublic readonly resultViewZones: readonly MergeEditorViewZone[],\n\t) { }\n}\n\n/**\n * This is an abstract class to create various editor view zones.\n*/\nexport abstract class MergeEditorViewZone {\n\tabstract create(viewZoneChangeAccessor: IViewZoneChangeAccessor, viewZoneIdsToCleanUp: string[], disposableStore: DisposableStore): void;\n}\n\nclass Spacer extends MergeEditorViewZone {\n\tconstructor(\n\t\tprivate readonly afterLineNumber: number,\n\t\tprivate readonly heightInLines: number\n\t) {\n\t\tsuper();\n\t}\n\n\toverride create(\n\t\tviewZoneChangeAccessor: IViewZoneChangeAccessor,\n\t\tviewZoneIdsToCleanUp: string[],\n\t\tdisposableStore: DisposableStore\n\t): void {\n\t\tviewZoneIdsToCleanUp.push(\n\t\t\tviewZoneChangeAccessor.addZone({\n\t\t\t\tafterLineNumber: this.afterLineNumber,\n\t\t\t\theightInLines: this.heightInLines,\n\t\t\t\tdomNode: $('div.diagonal-fill'),\n\t\t\t})\n\t\t);\n\t}\n}\n\nclass Placeholder extends MergeEditorViewZone {\n\tconstructor(\n\t\tprivate readonly afterLineNumber: number,\n\t\tprivate readonly heightPx: number\n\t) {\n\t\tsuper();\n\t}\n\n\toverride create(\n\t\tviewZoneChangeAccessor: IViewZoneChangeAccessor,\n\t\tviewZoneIdsToCleanUp: string[],\n\t\tdisposableStore: DisposableStore\n\t): void {\n\t\tviewZoneIdsToCleanUp.push(\n\t\t\tviewZoneChangeAccessor.addZone({\n\t\t\t\tafterLineNumber: this.afterLineNumber,\n\t\t\t\theightInPx: this.heightPx,\n\t\t\t\tdomNode: $('div.conflict-actions-placeholder'),\n\t\t\t})\n\t\t);\n\t}\n}\n\nclass CommandViewZone extends MergeEditorViewZone {\n\tconstructor(\n\t\tprivate readonly conflictActionsFactory: ConflictActionsFactory,\n\t\tprivate readonly lineNumber: number,\n\t\tprivate readonly items: IObservable<IContentWidgetAction[]>,\n\t) {\n\t\tsuper();\n\t}\n\n\toverride create(viewZoneChangeAccessor: IViewZoneChangeAccessor, viewZoneIdsToCleanUp: string[], disposableStore: DisposableStore): void {\n\t\tdisposableStore.add(\n\t\t\tthis.conflictActionsFactory.createWidget(\n\t\t\t\tviewZoneChangeAccessor,\n\t\t\t\tthis.lineNumber,\n\t\t\t\tthis.items,\n\t\t\t\tviewZoneIdsToCleanUp,\n\t\t\t)\n\t\t);\n\t}\n}\n"]}