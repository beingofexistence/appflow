{"version":3,"sources":["vs/workbench/contrib/mergeEditor/browser/mergeEditorInputModel.ts"],"names":[],"mappings":"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","file":"mergeEditorInputModel.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { assertFn } from 'vs/base/common/assert';\nimport { BugIndicatingError } from 'vs/base/common/errors';\nimport { Event } from 'vs/base/common/event';\nimport { DisposableStore, IDisposable } from 'vs/base/common/lifecycle';\nimport { derived, IObservable, observableFromEvent, observableValue } from 'vs/base/common/observable';\nimport { basename, isEqual } from 'vs/base/common/resources';\nimport Severity from 'vs/base/common/severity';\nimport { URI } from 'vs/base/common/uri';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { IResolvedTextEditorModel, ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { localize } from 'vs/nls';\nimport { ConfirmResult, IDialogService, IPromptButton } from 'vs/platform/dialogs/common/dialogs';\nimport { IEditorModel } from 'vs/platform/editor/common/editor';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IRevertOptions, SaveSourceRegistry } from 'vs/workbench/common/editor';\nimport { EditorModel } from 'vs/workbench/common/editor/editorModel';\nimport { MergeEditorInputData } from 'vs/workbench/contrib/mergeEditor/browser/mergeEditorInput';\nimport { conflictMarkers } from 'vs/workbench/contrib/mergeEditor/browser/mergeMarkers/mergeMarkersController';\nimport { MergeDiffComputer } from 'vs/workbench/contrib/mergeEditor/browser/model/diffComputer';\nimport { InputData, MergeEditorModel } from 'vs/workbench/contrib/mergeEditor/browser/model/mergeEditorModel';\nimport { MergeEditorTelemetry } from 'vs/workbench/contrib/mergeEditor/browser/telemetry';\nimport { StorageCloseWithConflicts } from 'vs/workbench/contrib/mergeEditor/common/mergeEditor';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { ITextFileEditorModel, ITextFileSaveOptions, ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\n\nexport interface MergeEditorArgs {\n\tbase: URI;\n\tinput1: MergeEditorInputData;\n\tinput2: MergeEditorInputData;\n\tresult: URI;\n}\n\nexport interface IMergeEditorInputModelFactory {\n\tcreateInputModel(args: MergeEditorArgs): Promise<IMergeEditorInputModel>;\n}\n\nexport interface IMergeEditorInputModel extends IDisposable, IEditorModel {\n\treadonly resultUri: URI;\n\n\treadonly model: MergeEditorModel;\n\treadonly isDirty: IObservable<boolean>;\n\n\tsave(options?: ITextFileSaveOptions): Promise<void>;\n\n\t/**\n\t * If save resets the dirty state, revert must do so too.\n\t*/\n\trevert(options?: IRevertOptions): Promise<void>;\n\n\tshouldConfirmClose(): boolean;\n\n\tconfirmClose(inputModels: IMergeEditorInputModel[]): Promise<ConfirmResult>;\n\n\t/**\n\t * Marks the merge as done. The merge editor must be closed afterwards.\n\t*/\n\taccept(): Promise<void>;\n}\n\n/* ================ Temp File ================ */\n\nexport class TempFileMergeEditorModeFactory implements IMergeEditorInputModelFactory {\n\tconstructor(\n\t\tprivate readonly _mergeEditorTelemetry: MergeEditorTelemetry,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ITextModelService private readonly _textModelService: ITextModelService,\n\t\t@IModelService private readonly _modelService: IModelService,\n\t) {\n\t}\n\n\tasync createInputModel(args: MergeEditorArgs): Promise<IMergeEditorInputModel> {\n\t\tconst store = new DisposableStore();\n\n\t\tconst [\n\t\t\tbase,\n\t\t\tresult,\n\t\t\tinput1Data,\n\t\t\tinput2Data,\n\t\t] = await Promise.all([\n\t\t\tthis._textModelService.createModelReference(args.base),\n\t\t\tthis._textModelService.createModelReference(args.result),\n\t\t\ttoInputData(args.input1, this._textModelService, store),\n\t\t\ttoInputData(args.input2, this._textModelService, store),\n\t\t]);\n\n\t\tstore.add(base);\n\t\tstore.add(result);\n\n\t\tconst tempResultUri = result.object.textEditorModel.uri.with({ scheme: 'merge-result' });\n\n\t\tconst temporaryResultModel = this._modelService.createModel(\n\t\t\t'',\n\t\t\t{\n\t\t\t\tlanguageId: result.object.textEditorModel.getLanguageId(),\n\t\t\t\tonDidChange: Event.None,\n\t\t\t},\n\t\t\ttempResultUri,\n\t\t);\n\t\tstore.add(temporaryResultModel);\n\n\t\tconst mergeDiffComputer = this._instantiationService.createInstance(MergeDiffComputer);\n\t\tconst model = this._instantiationService.createInstance(\n\t\t\tMergeEditorModel,\n\t\t\tbase.object.textEditorModel,\n\t\t\tinput1Data,\n\t\t\tinput2Data,\n\t\t\ttemporaryResultModel,\n\t\t\tmergeDiffComputer,\n\t\t\t{\n\t\t\t\tresetResult: true,\n\t\t\t},\n\t\t\tthis._mergeEditorTelemetry,\n\t\t);\n\t\tstore.add(model);\n\n\t\tawait model.onInitialized;\n\n\t\treturn this._instantiationService.createInstance(TempFileMergeEditorInputModel, model, store, result.object, args.result);\n\t}\n}\n\nclass TempFileMergeEditorInputModel extends EditorModel implements IMergeEditorInputModel {\n\tprivate readonly savedAltVersionId = observableValue(this, this.model.resultTextModel.getAlternativeVersionId());\n\tprivate readonly altVersionId = observableFromEvent(\n\t\te => this.model.resultTextModel.onDidChangeContent(e),\n\t\t() =>\n\t\t\t/** @description getAlternativeVersionId */ this.model.resultTextModel.getAlternativeVersionId()\n\t);\n\n\tpublic readonly isDirty = derived(this, (reader) => this.altVersionId.read(reader) !== this.savedAltVersionId.read(reader));\n\n\tprivate finished = false;\n\n\tconstructor(\n\t\tpublic readonly model: MergeEditorModel,\n\t\tprivate readonly disposable: IDisposable,\n\t\tprivate readonly result: IResolvedTextEditorModel,\n\t\tpublic readonly resultUri: URI,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t) {\n\t\tsuper();\n\t}\n\n\toverride dispose(): void {\n\t\tthis.disposable.dispose();\n\t\tsuper.dispose();\n\t}\n\n\tasync accept(): Promise<void> {\n\t\tconst value = await this.model.resultTextModel.getValue();\n\t\tthis.result.textEditorModel.setValue(value);\n\t\tthis.savedAltVersionId.set(this.model.resultTextModel.getAlternativeVersionId(), undefined);\n\t\tawait this.textFileService.save(this.result.textEditorModel.uri);\n\t\tthis.finished = true;\n\t}\n\n\tprivate async _discard(): Promise<void> {\n\t\tawait this.textFileService.revert(this.model.resultTextModel.uri);\n\t\tthis.savedAltVersionId.set(this.model.resultTextModel.getAlternativeVersionId(), undefined);\n\t\tthis.finished = true;\n\t}\n\n\tpublic shouldConfirmClose(): boolean {\n\t\treturn true;\n\t}\n\n\tpublic async confirmClose(inputModels: TempFileMergeEditorInputModel[]): Promise<ConfirmResult> {\n\t\tassertFn(\n\t\t\t() => inputModels.some((m) => m === this)\n\t\t);\n\n\t\tconst someDirty = inputModels.some((m) => m.isDirty.get());\n\t\tlet choice: ConfirmResult;\n\t\tif (someDirty) {\n\t\t\tconst isMany = inputModels.length > 1;\n\n\t\t\tconst message = isMany\n\t\t\t\t? localize('messageN', 'Do you want keep the merge result of {0} files?', inputModels.length)\n\t\t\t\t: localize('message1', 'Do you want keep the merge result of {0}?', basename(inputModels[0].model.resultTextModel.uri));\n\n\t\t\tconst hasUnhandledConflicts = inputModels.some((m) => m.model.hasUnhandledConflicts.get());\n\n\t\t\tconst buttons: IPromptButton<ConfirmResult>[] = [\n\t\t\t\t{\n\t\t\t\t\tlabel: hasUnhandledConflicts ?\n\t\t\t\t\t\tlocalize({ key: 'saveWithConflict', comment: ['&& denotes a mnemonic'] }, \"&&Save With Conflicts\") :\n\t\t\t\t\t\tlocalize({ key: 'save', comment: ['&& denotes a mnemonic'] }, \"&&Save\"),\n\t\t\t\t\trun: () => ConfirmResult.SAVE\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: localize({ key: 'discard', comment: ['&& denotes a mnemonic'] }, \"Do&&n't Save\"),\n\t\t\t\t\trun: () => ConfirmResult.DONT_SAVE\n\t\t\t\t}\n\t\t\t];\n\n\t\t\tchoice = (await this.dialogService.prompt<ConfirmResult>({\n\t\t\t\ttype: Severity.Info,\n\t\t\t\tmessage,\n\t\t\t\tdetail:\n\t\t\t\t\thasUnhandledConflicts\n\t\t\t\t\t\t? isMany\n\t\t\t\t\t\t\t? localize('detailNConflicts', \"The files contain unhandled conflicts. The merge results will be lost if you don't save them.\")\n\t\t\t\t\t\t\t: localize('detail1Conflicts', \"The file contains unhandled conflicts. The merge result will be lost if you don't save it.\")\n\t\t\t\t\t\t: isMany\n\t\t\t\t\t\t\t? localize('detailN', \"The merge results will be lost if you don't save them.\")\n\t\t\t\t\t\t\t: localize('detail1', \"The merge result will be lost if you don't save it.\"),\n\t\t\t\tbuttons,\n\t\t\t\tcancelButton: {\n\t\t\t\t\trun: () => ConfirmResult.CANCEL\n\t\t\t\t}\n\t\t\t})).result;\n\t\t} else {\n\t\t\tchoice = ConfirmResult.DONT_SAVE;\n\t\t}\n\n\t\tif (choice === ConfirmResult.SAVE) {\n\t\t\t// save with conflicts\n\t\t\tawait Promise.all(inputModels.map(m => m.accept()));\n\t\t} else if (choice === ConfirmResult.DONT_SAVE) {\n\t\t\t// discard changes\n\t\t\tawait Promise.all(inputModels.map(m => m._discard()));\n\t\t} else {\n\t\t\t// cancel: stay in editor\n\t\t}\n\t\treturn choice;\n\t}\n\n\tpublic async save(options?: ITextFileSaveOptions): Promise<void> {\n\t\tif (this.finished) {\n\t\t\treturn;\n\t\t}\n\t\t// It does not make sense to save anything in the temp file mode.\n\t\t// The file stays dirty from the first edit on.\n\n\t\t(async () => {\n\t\t\tconst { confirmed } = await this.dialogService.confirm({\n\t\t\t\tmessage: localize(\n\t\t\t\t\t'saveTempFile.message',\n\t\t\t\t\t\"Do you want to accept the merge result?\"\n\t\t\t\t),\n\t\t\t\tdetail: localize(\n\t\t\t\t\t'saveTempFile.detail',\n\t\t\t\t\t\"This will write the merge result to the original file and close the merge editor.\"\n\t\t\t\t),\n\t\t\t\tprimaryButton: localize({ key: 'acceptMerge', comment: ['&& denotes a mnemonic'] }, '&&Accept Merge')\n\t\t\t});\n\n\t\t\tif (confirmed) {\n\t\t\t\tawait this.accept();\n\t\t\t\tconst editors = this.editorService.findEditors(this.resultUri).filter(e => e.editor.typeId === 'mergeEditor.Input');\n\t\t\t\tawait this.editorService.closeEditors(editors);\n\t\t\t}\n\t\t})();\n\t}\n\n\tpublic async revert(options?: IRevertOptions): Promise<void> {\n\t\t// no op\n\t}\n}\n\n/* ================ Workspace ================ */\n\nexport class WorkspaceMergeEditorModeFactory implements IMergeEditorInputModelFactory {\n\tconstructor(\n\t\tprivate readonly _mergeEditorTelemetry: MergeEditorTelemetry,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ITextModelService private readonly _textModelService: ITextModelService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t) {\n\t}\n\n\tprivate static readonly FILE_SAVED_SOURCE = SaveSourceRegistry.registerSource('merge-editor.source', localize('merge-editor.source', \"Before Resolving Conflicts In Merge Editor\"));\n\n\tpublic async createInputModel(args: MergeEditorArgs): Promise<IMergeEditorInputModel> {\n\t\tconst store = new DisposableStore();\n\n\t\tlet resultTextFileModel = undefined as ITextFileEditorModel | undefined;\n\t\tconst modelListener = store.add(new DisposableStore());\n\t\tconst handleDidCreate = (model: ITextFileEditorModel) => {\n\t\t\tif (isEqual(args.result, model.resource)) {\n\t\t\t\tmodelListener.clear();\n\t\t\t\tresultTextFileModel = model;\n\t\t\t}\n\t\t};\n\t\tmodelListener.add(this.textFileService.files.onDidCreate(handleDidCreate));\n\t\tthis.textFileService.files.models.forEach(handleDidCreate);\n\n\t\tconst [\n\t\t\tbase,\n\t\t\tresult,\n\t\t\tinput1Data,\n\t\t\tinput2Data,\n\t\t] = await Promise.all([\n\t\t\tthis._textModelService.createModelReference(args.base),\n\t\t\tthis._textModelService.createModelReference(args.result),\n\t\t\ttoInputData(args.input1, this._textModelService, store),\n\t\t\ttoInputData(args.input2, this._textModelService, store),\n\t\t]);\n\n\t\tstore.add(base);\n\t\tstore.add(result);\n\n\t\tif (!resultTextFileModel) {\n\t\t\tthrow new BugIndicatingError();\n\t\t}\n\t\t// So that \"Don't save\" does revert the file\n\t\tawait resultTextFileModel.save({ source: WorkspaceMergeEditorModeFactory.FILE_SAVED_SOURCE });\n\n\t\tconst lines = resultTextFileModel.textEditorModel!.getLinesContent();\n\t\tconst hasConflictMarkers = lines.some(l => l.startsWith(conflictMarkers.start));\n\t\tconst resetResult = hasConflictMarkers;\n\n\t\tconst mergeDiffComputer = this._instantiationService.createInstance(MergeDiffComputer);\n\n\t\tconst model = this._instantiationService.createInstance(\n\t\t\tMergeEditorModel,\n\t\t\tbase.object.textEditorModel,\n\t\t\tinput1Data,\n\t\t\tinput2Data,\n\t\t\tresult.object.textEditorModel,\n\t\t\tmergeDiffComputer,\n\t\t\t{\n\t\t\t\tresetResult\n\t\t\t},\n\t\t\tthis._mergeEditorTelemetry,\n\t\t);\n\t\tstore.add(model);\n\n\t\tawait model.onInitialized;\n\n\t\treturn this._instantiationService.createInstance(WorkspaceMergeEditorInputModel, model, store, resultTextFileModel, this._mergeEditorTelemetry);\n\t}\n}\n\nclass WorkspaceMergeEditorInputModel extends EditorModel implements IMergeEditorInputModel {\n\tpublic readonly isDirty = observableFromEvent(\n\t\tEvent.any(this.resultTextFileModel.onDidChangeDirty, this.resultTextFileModel.onDidSaveError),\n\t\t() => /** @description isDirty */ this.resultTextFileModel.isDirty()\n\t);\n\n\tprivate reported = false;\n\tprivate readonly dateTimeOpened = new Date();\n\n\tconstructor(\n\t\tpublic readonly model: MergeEditorModel,\n\t\tprivate readonly disposableStore: DisposableStore,\n\t\tprivate readonly resultTextFileModel: ITextFileEditorModel,\n\t\tprivate readonly telemetry: MergeEditorTelemetry,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis.disposableStore.dispose();\n\t\tsuper.dispose();\n\n\t\tthis.reportClose(false);\n\t}\n\n\tprivate reportClose(accepted: boolean): void {\n\t\tif (!this.reported) {\n\t\t\tconst remainingConflictCount = this.model.unhandledConflictsCount.get();\n\t\t\tconst durationOpenedMs = new Date().getTime() - this.dateTimeOpened.getTime();\n\t\t\tthis.telemetry.reportMergeEditorClosed({\n\t\t\t\tdurationOpenedSecs: durationOpenedMs / 1000,\n\t\t\t\tremainingConflictCount,\n\t\t\t\taccepted,\n\n\t\t\t\tconflictCount: this.model.conflictCount,\n\t\t\t\tcombinableConflictCount: this.model.combinableConflictCount,\n\n\t\t\t\tconflictsResolvedWithBase: this.model.conflictsResolvedWithBase,\n\t\t\t\tconflictsResolvedWithInput1: this.model.conflictsResolvedWithInput1,\n\t\t\t\tconflictsResolvedWithInput2: this.model.conflictsResolvedWithInput2,\n\t\t\t\tconflictsResolvedWithSmartCombination: this.model.conflictsResolvedWithSmartCombination,\n\n\t\t\t\tmanuallySolvedConflictCountThatEqualNone: this.model.manuallySolvedConflictCountThatEqualNone,\n\t\t\t\tmanuallySolvedConflictCountThatEqualSmartCombine: this.model.manuallySolvedConflictCountThatEqualSmartCombine,\n\t\t\t\tmanuallySolvedConflictCountThatEqualInput1: this.model.manuallySolvedConflictCountThatEqualInput1,\n\t\t\t\tmanuallySolvedConflictCountThatEqualInput2: this.model.manuallySolvedConflictCountThatEqualInput2,\n\n\t\t\t\tmanuallySolvedConflictCountThatEqualNoneAndStartedWithBase: this.model.manuallySolvedConflictCountThatEqualNoneAndStartedWithBase,\n\t\t\t\tmanuallySolvedConflictCountThatEqualNoneAndStartedWithInput1: this.model.manuallySolvedConflictCountThatEqualNoneAndStartedWithInput1,\n\t\t\t\tmanuallySolvedConflictCountThatEqualNoneAndStartedWithInput2: this.model.manuallySolvedConflictCountThatEqualNoneAndStartedWithInput2,\n\t\t\t\tmanuallySolvedConflictCountThatEqualNoneAndStartedWithBothNonSmart: this.model.manuallySolvedConflictCountThatEqualNoneAndStartedWithBothNonSmart,\n\t\t\t\tmanuallySolvedConflictCountThatEqualNoneAndStartedWithBothSmart: this.model.manuallySolvedConflictCountThatEqualNoneAndStartedWithBothSmart,\n\t\t\t});\n\t\t\tthis.reported = true;\n\t\t}\n\t}\n\n\tpublic async accept(): Promise<void> {\n\t\tthis.reportClose(true);\n\t\tawait this.resultTextFileModel.save();\n\t}\n\n\tget resultUri(): URI {\n\t\treturn this.resultTextFileModel.resource;\n\t}\n\n\tasync save(options?: ITextFileSaveOptions): Promise<void> {\n\t\tawait this.resultTextFileModel.save(options);\n\t}\n\n\t/**\n\t * If save resets the dirty state, revert must do so too.\n\t*/\n\tasync revert(options?: IRevertOptions): Promise<void> {\n\t\tawait this.resultTextFileModel.revert(options);\n\t}\n\n\tshouldConfirmClose(): boolean {\n\t\t// Always confirm\n\t\treturn true;\n\t}\n\n\tasync confirmClose(inputModels: IMergeEditorInputModel[]): Promise<ConfirmResult> {\n\t\tconst isMany = inputModels.length > 1;\n\t\tconst someDirty = inputModels.some(m => m.isDirty.get());\n\t\tconst someUnhandledConflicts = inputModels.some(m => m.model.hasUnhandledConflicts.get());\n\t\tif (someDirty) {\n\t\t\tconst message = isMany\n\t\t\t\t? localize('workspace.messageN', 'Do you want to save the changes you made to {0} files?', inputModels.length)\n\t\t\t\t: localize('workspace.message1', 'Do you want to save the changes you made to {0}?', basename(inputModels[0].resultUri));\n\t\t\tconst { result } = await this._dialogService.prompt<ConfirmResult>({\n\t\t\t\ttype: Severity.Info,\n\t\t\t\tmessage,\n\t\t\t\tdetail:\n\t\t\t\t\tsomeUnhandledConflicts ?\n\t\t\t\t\t\tisMany\n\t\t\t\t\t\t\t? localize('workspace.detailN.unhandled', \"The files contain unhandled conflicts. Your changes will be lost if you don't save them.\")\n\t\t\t\t\t\t\t: localize('workspace.detail1.unhandled', \"The file contains unhandled conflicts. Your changes will be lost if you don't save them.\")\n\t\t\t\t\t\t: isMany\n\t\t\t\t\t\t\t? localize('workspace.detailN.handled', \"Your changes will be lost if you don't save them.\")\n\t\t\t\t\t\t\t: localize('workspace.detail1.handled', \"Your changes will be lost if you don't save them.\"),\n\t\t\t\tbuttons: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: someUnhandledConflicts\n\t\t\t\t\t\t\t? localize({ key: 'workspace.saveWithConflict', comment: ['&& denotes a mnemonic'] }, '&&Save with Conflicts')\n\t\t\t\t\t\t\t: localize({ key: 'workspace.save', comment: ['&& denotes a mnemonic'] }, '&&Save'),\n\t\t\t\t\t\trun: () => ConfirmResult.SAVE\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: localize({ key: 'workspace.doNotSave', comment: ['&& denotes a mnemonic'] }, \"Do&&n't Save\"),\n\t\t\t\t\t\trun: () => ConfirmResult.DONT_SAVE\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tcancelButton: {\n\t\t\t\t\trun: () => ConfirmResult.CANCEL\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn result;\n\n\t\t} else if (someUnhandledConflicts && !this._storageService.getBoolean(StorageCloseWithConflicts, StorageScope.PROFILE, false)) {\n\t\t\tconst { confirmed, checkboxChecked } = await this._dialogService.confirm({\n\t\t\t\tmessage: isMany\n\t\t\t\t\t? localize('workspace.messageN.nonDirty', 'Do you want to close {0} merge editors?', inputModels.length)\n\t\t\t\t\t: localize('workspace.message1.nonDirty', 'Do you want to close the merge editor for {0}?', basename(inputModels[0].resultUri)),\n\t\t\t\tdetail: someUnhandledConflicts ?\n\t\t\t\t\tisMany\n\t\t\t\t\t\t? localize('workspace.detailN.unhandled.nonDirty', \"The files contain unhandled conflicts.\")\n\t\t\t\t\t\t: localize('workspace.detail1.unhandled.nonDirty', \"The file contains unhandled conflicts.\")\n\t\t\t\t\t: undefined,\n\t\t\t\tprimaryButton: someUnhandledConflicts\n\t\t\t\t\t? localize({ key: 'workspace.closeWithConflicts', comment: ['&& denotes a mnemonic'] }, '&&Close with Conflicts')\n\t\t\t\t\t: localize({ key: 'workspace.close', comment: ['&& denotes a mnemonic'] }, '&&Close'),\n\t\t\t\tcheckbox: { label: localize('noMoreWarn', \"Don't ask again\") }\n\t\t\t});\n\n\t\t\tif (checkboxChecked) {\n\t\t\t\tthis._storageService.store(StorageCloseWithConflicts, true, StorageScope.PROFILE, StorageTarget.USER);\n\t\t\t}\n\n\t\t\treturn confirmed ? ConfirmResult.SAVE : ConfirmResult.CANCEL;\n\t\t} else {\n\t\t\t// This shouldn't do anything\n\t\t\treturn ConfirmResult.SAVE;\n\t\t}\n\t}\n}\n\n/* ================= Utils ================== */\n\nasync function toInputData(data: MergeEditorInputData, textModelService: ITextModelService, store: DisposableStore): Promise<InputData> {\n\tconst ref = await textModelService.createModelReference(data.uri);\n\tstore.add(ref);\n\treturn {\n\t\ttextModel: ref.object.textEditorModel,\n\t\ttitle: data.title,\n\t\tdescription: data.description,\n\t\tdetail: data.detail,\n\t};\n}\n"]}