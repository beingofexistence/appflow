{"version":3,"sources":["vs/workbench/contrib/mergeEditor/common/mergeEditor.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOnF,QAAA,IAAI,GAAe,IAAI,gBAAG,CAAoB,eAAe,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,IAAA,cAAQ,EAAC,CAAI,EAAE,IAA8B,CAAC,EAAE,CAAC,CAAC;IACxJ,QAAA,IAAI,GAAqB,IAAI,gBAAG,CAAoB,qBAAqB,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,IAAA,cAAQ,EAAC,CAAK,EAAE,IAAsD,CAAC,EAAE,CAAC,CAAC;IAC7L,QAAA,IAAI,GAAmB,IAAI,gBAAG,CAAkC,mBAAmB,EAAE,OAAO,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,IAAA,cAAQ,EAAC,CAAc,EAAE,IAAmC,CAAC,EAAE,CAAC,CAAC;IAC9L,QAAA,IAAI,GAAqB,IAAI,gBAAG,CAAoB,qBAAqB,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,IAAA,cAAQ,EAAC,CAAU,EAAE,IAA4C,CAAC,EAAE,CAAC,CAAC;IACxL,QAAA,IAAI,GAA0B,IAAI,gBAAG,CAAoB,0BAA0B,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,IAAA,cAAQ,EAAC,CAAe,EAAE,IAAoC,CAAC,EAAE,CAAC,CAAC;IAC/L,QAAA,IAAI,GAAsC,IAAI,gBAAG,CAAoB,sCAAsC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,IAAA,cAAQ,EAAC,CAA2B,EAAE,IAAmD,CAAC,EAAE,CAAC,CAAC;IAElP,QAAA,IAAI,GAAc,IAAI,gBAAG,CAAmB,oBAAoB,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,IAAA,cAAQ,EAAC,CAAS,EAAE,IAAwC,CAAC,EAAE,CAAC,CAAC;IACtK,QAAA,IAAI,GAAgB,IAAI,gBAAG,CAAmB,sBAAsB,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,IAAA,cAAQ,EAAC,CAAW,EAAE,IAAyC,CAAC,EAAE,CAAC,CAAC;IAW7K,QAAA,IAAI,GAAwB,+BAA+B,CAAC","file":"mergeEditor.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { RawContextKey } from 'vs/platform/contextkey/common/contextkey';\n\nexport type MergeEditorLayoutKind = 'mixed' | 'columns';\n\nexport const ctxIsMergeEditor = new RawContextKey<boolean>('isMergeEditor', false, { type: 'boolean', description: localize('is', 'The editor is a merge editor') });\nexport const ctxIsMergeResultEditor = new RawContextKey<boolean>('isMergeResultEditor', false, { type: 'boolean', description: localize('isr', 'The editor is a the result editor of a merge editor.') });\nexport const ctxMergeEditorLayout = new RawContextKey<MergeEditorLayoutKind>('mergeEditorLayout', 'mixed', { type: 'string', description: localize('editorLayout', 'The layout mode of a merge editor') });\nexport const ctxMergeEditorShowBase = new RawContextKey<boolean>('mergeEditorShowBase', false, { type: 'boolean', description: localize('showBase', 'If the merge editor shows the base version') });\nexport const ctxMergeEditorShowBaseAtTop = new RawContextKey<boolean>('mergeEditorShowBaseAtTop', false, { type: 'boolean', description: localize('showBaseAtTop', 'If base should be shown at the top') });\nexport const ctxMergeEditorShowNonConflictingChanges = new RawContextKey<boolean>('mergeEditorShowNonConflictingChanges', false, { type: 'boolean', description: localize('showNonConflictingChanges', 'If the merge editor shows non-conflicting changes') });\n\nexport const ctxMergeBaseUri = new RawContextKey<string>('mergeEditorBaseUri', '', { type: 'string', description: localize('baseUri', 'The uri of the baser of a merge editor') });\nexport const ctxMergeResultUri = new RawContextKey<string>('mergeEditorResultUri', '', { type: 'string', description: localize('resultUri', 'The uri of the result of a merge editor') });\n\nexport interface MergeEditorContents {\n\tlanguageId: string;\n\tbase: string;\n\tinput1: string;\n\tinput2: string;\n\tresult: string;\n\tinitialResult?: string;\n}\n\nexport const StorageCloseWithConflicts = 'mergeEditorCloseWithConflicts';\n"]}