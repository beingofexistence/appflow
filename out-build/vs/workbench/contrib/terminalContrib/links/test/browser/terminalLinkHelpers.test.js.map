{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminalContrib/links/test/browser/terminalLinkHelpers.test.ts"],"names":[],"mappings":"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","file":"terminalLinkHelpers.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport type { IBufferLine, IBufferCell } from 'xterm';\nimport { convertLinkRangeToBuffer } from 'vs/workbench/contrib/terminalContrib/links/browser/terminalLinkHelpers';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nsuite('Workbench - Terminal Link Helpers', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('convertLinkRangeToBuffer', () => {\n\t\ttest('should convert ranges for ascii characters', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: 'AA http://t', width: 11 },\n\t\t\t\t{ text: '.com/f/', width: 8 }\n\t\t\t]);\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, 11, { startColumn: 4, startLineNumber: 1, endColumn: 19, endLineNumber: 1 }, 0);\n\t\t\tassert.deepStrictEqual(bufferRange, {\n\t\t\t\tstart: { x: 4, y: 1 },\n\t\t\t\tend: { x: 7, y: 2 }\n\t\t\t});\n\t\t});\n\t\ttest('should convert ranges for wide characters before the link', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: 'A文 http://', width: 11 },\n\t\t\t\t{ text: 't.com/f/', width: 9 }\n\t\t\t]);\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, 11, { startColumn: 4, startLineNumber: 1, endColumn: 19, endLineNumber: 1 }, 0);\n\t\t\tassert.deepStrictEqual(bufferRange, {\n\t\t\t\tstart: { x: 4 + 1, y: 1 },\n\t\t\t\tend: { x: 7 + 1, y: 2 }\n\t\t\t});\n\t\t});\n\t\ttest('should give correct range for links containing multi-character emoji', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: 'A🙂 http://', width: 11 }\n\t\t\t]);\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, 11, { startColumn: 0 + 1, startLineNumber: 1, endColumn: 2 + 1, endLineNumber: 1 }, 0);\n\t\t\tassert.deepStrictEqual(bufferRange, {\n\t\t\t\tstart: { x: 1, y: 1 },\n\t\t\t\tend: { x: 2, y: 1 }\n\t\t\t});\n\t\t});\n\t\ttest('should convert ranges for combining characters before the link', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: 'A🙂 http://', width: 11 },\n\t\t\t\t{ text: 't.com/f/', width: 9 }\n\t\t\t]);\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, 11, { startColumn: 4 + 1, startLineNumber: 1, endColumn: 19 + 1, endLineNumber: 1 }, 0);\n\t\t\tassert.deepStrictEqual(bufferRange, {\n\t\t\t\tstart: { x: 6, y: 1 },\n\t\t\t\tend: { x: 9, y: 2 }\n\t\t\t});\n\t\t});\n\t\ttest('should convert ranges for wide characters inside the link', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: 'AA http://t', width: 11 },\n\t\t\t\t{ text: '.com/文/', width: 8 }\n\t\t\t]);\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, 11, { startColumn: 4, startLineNumber: 1, endColumn: 19, endLineNumber: 1 }, 0);\n\t\t\tassert.deepStrictEqual(bufferRange, {\n\t\t\t\tstart: { x: 4, y: 1 },\n\t\t\t\tend: { x: 7 + 1, y: 2 }\n\t\t\t});\n\t\t});\n\t\ttest('should convert ranges for wide characters before and inside the link', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: 'A文 http://', width: 11 },\n\t\t\t\t{ text: 't.com/文/', width: 9 }\n\t\t\t]);\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, 11, { startColumn: 4, startLineNumber: 1, endColumn: 19, endLineNumber: 1 }, 0);\n\t\t\tassert.deepStrictEqual(bufferRange, {\n\t\t\t\tstart: { x: 4 + 1, y: 1 },\n\t\t\t\tend: { x: 7 + 2, y: 2 }\n\t\t\t});\n\t\t});\n\t\ttest('should convert ranges for emoji before and wide inside the link', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: 'A🙂 http://', width: 11 },\n\t\t\t\t{ text: 't.com/文/', width: 9 }\n\t\t\t]);\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, 11, { startColumn: 4 + 1, startLineNumber: 1, endColumn: 19 + 1, endLineNumber: 1 }, 0);\n\t\t\tassert.deepStrictEqual(bufferRange, {\n\t\t\t\tstart: { x: 6, y: 1 },\n\t\t\t\tend: { x: 10 + 1, y: 2 }\n\t\t\t});\n\t\t});\n\t\ttest('should convert ranges for ascii characters (link starts on wrapped)', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: 'AAAAAAAAAAA', width: 11 },\n\t\t\t\t{ text: 'AA http://t', width: 11 },\n\t\t\t\t{ text: '.com/f/', width: 8 }\n\t\t\t]);\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, 11, { startColumn: 15, startLineNumber: 1, endColumn: 30, endLineNumber: 1 }, 0);\n\t\t\tassert.deepStrictEqual(bufferRange, {\n\t\t\t\tstart: { x: 4, y: 2 },\n\t\t\t\tend: { x: 7, y: 3 }\n\t\t\t});\n\t\t});\n\t\ttest('should convert ranges for wide characters before the link (link starts on wrapped)', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: 'AAAAAAAAAAA', width: 11 },\n\t\t\t\t{ text: 'A文 http://', width: 11 },\n\t\t\t\t{ text: 't.com/f/', width: 9 }\n\t\t\t]);\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, 11, { startColumn: 15, startLineNumber: 1, endColumn: 30, endLineNumber: 1 }, 0);\n\t\t\tassert.deepStrictEqual(bufferRange, {\n\t\t\t\tstart: { x: 4 + 1, y: 2 },\n\t\t\t\tend: { x: 7 + 1, y: 3 }\n\t\t\t});\n\t\t});\n\t\ttest('regression test #147619: 获取模板 25235168 的预览图失败', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: '获取模板 25235168 的预览图失败', width: 30 }\n\t\t\t]);\n\t\t\tassert.deepStrictEqual(convertLinkRangeToBuffer(lines, 30, {\n\t\t\t\tstartColumn: 1,\n\t\t\t\tstartLineNumber: 1,\n\t\t\t\tendColumn: 5,\n\t\t\t\tendLineNumber: 1\n\t\t\t}, 0), {\n\t\t\t\tstart: { x: 1, y: 1 },\n\t\t\t\tend: { x: 8, y: 1 }\n\t\t\t});\n\t\t\tassert.deepStrictEqual(convertLinkRangeToBuffer(lines, 30, {\n\t\t\t\tstartColumn: 6,\n\t\t\t\tstartLineNumber: 1,\n\t\t\t\tendColumn: 14,\n\t\t\t\tendLineNumber: 1\n\t\t\t}, 0), {\n\t\t\t\tstart: { x: 10, y: 1 },\n\t\t\t\tend: { x: 17, y: 1 }\n\t\t\t});\n\t\t\tassert.deepStrictEqual(convertLinkRangeToBuffer(lines, 30, {\n\t\t\t\tstartColumn: 15,\n\t\t\t\tstartLineNumber: 1,\n\t\t\t\tendColumn: 21,\n\t\t\t\tendLineNumber: 1\n\t\t\t}, 0), {\n\t\t\t\tstart: { x: 19, y: 1 },\n\t\t\t\tend: { x: 30, y: 1 }\n\t\t\t});\n\t\t});\n\t\ttest('should convert ranges for wide characters inside the link (link starts on wrapped)', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: 'AAAAAAAAAAA', width: 11 },\n\t\t\t\t{ text: 'AA http://t', width: 11 },\n\t\t\t\t{ text: '.com/文/', width: 8 }\n\t\t\t]);\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, 11, { startColumn: 15, startLineNumber: 1, endColumn: 30, endLineNumber: 1 }, 0);\n\t\t\tassert.deepStrictEqual(bufferRange, {\n\t\t\t\tstart: { x: 4, y: 2 },\n\t\t\t\tend: { x: 7 + 1, y: 3 }\n\t\t\t});\n\t\t});\n\t\ttest('should convert ranges for wide characters before and inside the link #2', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: 'AAAAAAAAAAA', width: 11 },\n\t\t\t\t{ text: 'A文 http://', width: 11 },\n\t\t\t\t{ text: 't.com/文/', width: 9 }\n\t\t\t]);\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, 11, { startColumn: 15, startLineNumber: 1, endColumn: 30, endLineNumber: 1 }, 0);\n\t\t\tassert.deepStrictEqual(bufferRange, {\n\t\t\t\tstart: { x: 4 + 1, y: 2 },\n\t\t\t\tend: { x: 7 + 2, y: 3 }\n\t\t\t});\n\t\t});\n\t\ttest('should convert ranges for several wide characters before the link', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: 'A文文AAAAAA', width: 11 },\n\t\t\t\t{ text: 'AA文文 http', width: 11 },\n\t\t\t\t{ text: '://t.com/f/', width: 11 }\n\t\t\t]);\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, 11, { startColumn: 15, startLineNumber: 1, endColumn: 30, endLineNumber: 1 }, 0);\n\t\t\t// This test ensures that the start offset is applied to the end before it's counted\n\t\t\tassert.deepStrictEqual(bufferRange, {\n\t\t\t\tstart: { x: 3 + 4, y: 2 },\n\t\t\t\tend: { x: 6 + 4, y: 3 }\n\t\t\t});\n\t\t});\n\t\ttest('should convert ranges for several wide characters before and inside the link', () => {\n\t\t\tconst lines = createBufferLineArray([\n\t\t\t\t{ text: 'A文文AAAAAA', width: 11 },\n\t\t\t\t{ text: 'AA文文 http', width: 11 },\n\t\t\t\t{ text: '://t.com/文', width: 11 },\n\t\t\t\t{ text: '文/', width: 3 }\n\t\t\t]);\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, 11, { startColumn: 14, startLineNumber: 1, endColumn: 31, endLineNumber: 1 }, 0);\n\t\t\t// This test ensures that the start offset is applies to the end before it's counted\n\t\t\tassert.deepStrictEqual(bufferRange, {\n\t\t\t\tstart: { x: 5, y: 2 },\n\t\t\t\tend: { x: 1, y: 4 }\n\t\t\t});\n\t\t});\n\t});\n});\n\nconst TEST_WIDE_CHAR = '文';\nconst TEST_NULL_CHAR = 'C';\n\nfunction createBufferLineArray(lines: { text: string; width: number }[]): IBufferLine[] {\n\tconst result: IBufferLine[] = [];\n\tlines.forEach((l, i) => {\n\t\tresult.push(new TestBufferLine(\n\t\t\tl.text,\n\t\t\tl.width,\n\t\t\ti + 1 !== lines.length\n\t\t));\n\t});\n\treturn result;\n}\n\nclass TestBufferLine implements IBufferLine {\n\tconstructor(\n\t\tprivate _text: string,\n\t\tpublic length: number,\n\t\tpublic isWrapped: boolean\n\t) {\n\n\t}\n\tgetCell(x: number): IBufferCell | undefined {\n\t\t// Create a fake line of cells and use that to resolve the width\n\t\tconst cells: string[] = [];\n\t\tlet wideNullCellOffset = 0; // There is no null 0 width char after a wide char\n\t\tconst emojiOffset = 0; // Skip chars as emoji are multiple characters\n\t\tfor (let i = 0; i <= x - wideNullCellOffset + emojiOffset; i++) {\n\t\t\tlet char = this._text.charAt(i);\n\t\t\tif (char === '\\ud83d') {\n\t\t\t\t// Make \"🙂\"\n\t\t\t\tchar += '\\ude42';\n\t\t\t}\n\t\t\tcells.push(char);\n\t\t\tif (this._text.charAt(i) === TEST_WIDE_CHAR || char.charCodeAt(0) > 255) {\n\t\t\t\t// Skip the next character as it's width is 0\n\t\t\t\tcells.push(TEST_NULL_CHAR);\n\t\t\t\twideNullCellOffset++;\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tgetChars: () => {\n\t\t\t\treturn x >= cells.length ? '' : cells[x];\n\t\t\t},\n\t\t\tgetWidth: () => {\n\t\t\t\tswitch (cells[x]) {\n\t\t\t\t\tcase TEST_WIDE_CHAR: return 2;\n\t\t\t\t\tcase TEST_NULL_CHAR: return 0;\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\t// Naive measurement, assume anything our of ascii in tests are wide\n\t\t\t\t\t\tif (cells[x].charCodeAt(0) > 255) {\n\t\t\t\t\t\t\treturn 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} as any;\n\t}\n\ttranslateToString(): string {\n\t\tthrow new Error('Method not implemented.');\n\t}\n}\n"]}