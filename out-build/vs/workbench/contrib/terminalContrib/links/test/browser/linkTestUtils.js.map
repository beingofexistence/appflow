{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminalContrib/links/test/browser/linkTestUtils.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOzF,KAAK,UAAU,IAAI,CACzB,IAAY,EACZ,QAAmG,EACnG,QAA+B,EAC/B,YAA8B;QAE9B,QAAQ,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QAEvB,mDAAmD;QACnD,MAAM,IAAI,OAAO,CAAO,CAAC,CAAC,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5D,MAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACrC,MAAM,aAAa,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,SAAS,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YAC5F,OAAO,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;QAClD,CAAC,EAAE,CAAC,CAAC,CAAC;QAEN,gCAAgC;QAChC,MAAM,KAAK,GAAkB,EAAE,CAAC;QAChC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAClE,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAE,CAAC,CAAC;SACrD;QAED,oDAAoD;QACpD,MAAM,WAAW,GAAG,CAAC,MAAM,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,EAAE,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;YAC/G,OAAO;gBACN,IAAI,EAAE,CAAC,CAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC,IAAI;gBACjC,IAAI,EAAE,YAAY;gBAClB,WAAW,EAAE,CAAC,CAAC,WAAW;aAC1B,CAAC;QACH,CAAC,CAAC,CAAC;QACH,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE;YACtC,OAAO;gBACN,IAAI,EAAE,YAAY;gBAClB,IAAI,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI;gBAC5C,WAAW,EAAE;oBACZ,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;oBAC7C,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;iBAC3C;aACD,CAAC;QACH,CAAC,CAAC,CAAC;QACH,IAAA,wBAAe,EAAC,WAAW,EAAE,aAAa,CAAC,CAAC;IAC7C,CAAC;IAxCD,oBAwCC","file":"linkTestUtils.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepStrictEqual } from 'assert';\nimport { ITerminalLinkDetector, TerminalLinkType } from 'vs/workbench/contrib/terminalContrib/links/browser/links';\nimport { URI } from 'vs/base/common/uri';\nimport type { IBufferLine } from 'xterm';\n\nexport async function assertLinkHelper(\n\ttext: string,\n\texpected: ({ uri: URI; range: [number, number][] } | { text: string; range: [number, number][] })[],\n\tdetector: ITerminalLinkDetector,\n\texpectedType: TerminalLinkType\n) {\n\tdetector.xterm.reset();\n\n\t// Write the text and wait for the parser to finish\n\tawait new Promise<void>(r => detector.xterm.write(text, r));\n\tconst textSplit = text.split('\\r\\n');\n\tconst lastLineIndex = textSplit.filter((e, i) => i !== textSplit.length - 1).reduce((p, c) => {\n\t\treturn p + Math.max(Math.ceil(c.length / 80), 1);\n\t}, 0);\n\n\t// Ensure all links are provided\n\tconst lines: IBufferLine[] = [];\n\tfor (let i = 0; i < detector.xterm.buffer.active.cursorY + 1; i++) {\n\t\tlines.push(detector.xterm.buffer.active.getLine(i)!);\n\t}\n\n\t// Detect links always on the last line with content\n\tconst actualLinks = (await detector.detect(lines, lastLineIndex, detector.xterm.buffer.active.cursorY)).map(e => {\n\t\treturn {\n\t\t\tlink: e.uri?.toString() ?? e.text,\n\t\t\ttype: expectedType,\n\t\t\tbufferRange: e.bufferRange\n\t\t};\n\t});\n\tconst expectedLinks = expected.map(e => {\n\t\treturn {\n\t\t\ttype: expectedType,\n\t\t\tlink: 'uri' in e ? e.uri.toString() : e.text,\n\t\t\tbufferRange: {\n\t\t\t\tstart: { x: e.range[0][0], y: e.range[0][1] },\n\t\t\t\tend: { x: e.range[1][0], y: e.range[1][1] },\n\t\t\t}\n\t\t};\n\t});\n\tdeepStrictEqual(actualLinks, expectedLinks);\n}\n"]}