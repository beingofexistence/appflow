{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminalContrib/links/browser/terminalWordLinkDetector.ts"],"names":[],"mappings":"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","file":"terminalWordLinkDetector.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { escapeRegExpCharacters } from 'vs/base/common/strings';\nimport { URI } from 'vs/base/common/uri';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { matchesScheme } from 'vs/platform/opener/common/opener';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { TerminalSettingId } from 'vs/platform/terminal/common/terminal';\nimport { ITerminalSimpleLink, ITerminalLinkDetector, TerminalBuiltinLinkType } from 'vs/workbench/contrib/terminalContrib/links/browser/links';\nimport { convertLinkRangeToBuffer, getXtermLineContent } from 'vs/workbench/contrib/terminalContrib/links/browser/terminalLinkHelpers';\nimport { ITerminalConfiguration, TERMINAL_CONFIG_SECTION } from 'vs/workbench/contrib/terminal/common/terminal';\nimport type { IBufferLine, Terminal } from 'xterm';\n\nconst enum Constants {\n\t/**\n\t * The max line length to try extract word links from.\n\t */\n\tMaxLineLength = 2000\n}\n\ninterface Word {\n\tstartIndex: number;\n\tendIndex: number;\n\ttext: string;\n}\n\nexport class TerminalWordLinkDetector extends Disposable implements ITerminalLinkDetector {\n\tstatic id = 'word';\n\n\t// Word links typically search the workspace so it makes sense that their maximum link length is\n\t// quite small.\n\treadonly maxLinkLength = 100;\n\n\tprivate _separatorRegex!: RegExp;\n\n\tconstructor(\n\t\treadonly xterm: Terminal,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t) {\n\t\tsuper();\n\n\t\tthis._refreshSeparatorCodes();\n\t\tthis._register(this._configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(TerminalSettingId.WordSeparators)) {\n\t\t\t\tthis._refreshSeparatorCodes();\n\t\t\t}\n\t\t}));\n\t}\n\n\tdetect(lines: IBufferLine[], startLine: number, endLine: number): ITerminalSimpleLink[] {\n\t\tconst links: ITerminalSimpleLink[] = [];\n\n\t\t// Get the text representation of the wrapped line\n\t\tconst text = getXtermLineContent(this.xterm.buffer.active, startLine, endLine, this.xterm.cols);\n\t\tif (text === '' || text.length > Constants.MaxLineLength) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// Parse out all words from the wrapped line\n\t\tconst words: Word[] = this._parseWords(text);\n\n\t\t// Map the words to ITerminalLink objects\n\t\tfor (const word of words) {\n\t\t\tif (word.text === '') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (word.text.length > 0 && word.text.charAt(word.text.length - 1) === ':') {\n\t\t\t\tword.text = word.text.slice(0, -1);\n\t\t\t\tword.endIndex--;\n\t\t\t}\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(\n\t\t\t\tlines,\n\t\t\t\tthis.xterm.cols,\n\t\t\t\t{\n\t\t\t\t\tstartColumn: word.startIndex + 1,\n\t\t\t\t\tstartLineNumber: 1,\n\t\t\t\t\tendColumn: word.endIndex + 1,\n\t\t\t\t\tendLineNumber: 1\n\t\t\t\t},\n\t\t\t\tstartLine\n\t\t\t);\n\n\t\t\t// Support this product's URL protocol\n\t\t\tif (matchesScheme(word.text, this._productService.urlProtocol)) {\n\t\t\t\tconst uri = URI.parse(word.text);\n\t\t\t\tif (uri) {\n\t\t\t\t\tlinks.push({\n\t\t\t\t\t\ttext: word.text,\n\t\t\t\t\t\turi,\n\t\t\t\t\t\tbufferRange,\n\t\t\t\t\t\ttype: TerminalBuiltinLinkType.Url\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Search links\n\t\t\tlinks.push({\n\t\t\t\ttext: word.text,\n\t\t\t\tbufferRange,\n\t\t\t\ttype: TerminalBuiltinLinkType.Search\n\t\t\t});\n\t\t}\n\n\t\treturn links;\n\t}\n\n\tprivate _parseWords(text: string): Word[] {\n\t\tconst words: Word[] = [];\n\t\tconst splitWords = text.split(this._separatorRegex);\n\t\tlet runningIndex = 0;\n\t\tfor (let i = 0; i < splitWords.length; i++) {\n\t\t\twords.push({\n\t\t\t\ttext: splitWords[i],\n\t\t\t\tstartIndex: runningIndex,\n\t\t\t\tendIndex: runningIndex + splitWords[i].length\n\t\t\t});\n\t\t\trunningIndex += splitWords[i].length + 1;\n\t\t}\n\t\treturn words;\n\t}\n\n\tprivate _refreshSeparatorCodes(): void {\n\t\tconst separators = this._configurationService.getValue<ITerminalConfiguration>(TERMINAL_CONFIG_SECTION).wordSeparators;\n\t\tlet powerlineSymbols = '';\n\t\tfor (let i = 0xe0b0; i <= 0xe0bf; i++) {\n\t\t\tpowerlineSymbols += String.fromCharCode(i);\n\t\t}\n\t\tthis._separatorRegex = new RegExp(`[${escapeRegExpCharacters(separators)}${powerlineSymbols}]`, 'g');\n\t}\n}\n"]}