{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminalContrib/links/browser/terminalLinkOpeners.ts"],"names":[],"mappings":"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","file":"terminalLinkOpeners.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from 'vs/base/common/network';\nimport { OperatingSystem } from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { ITextEditorSelection } from 'vs/platform/editor/common/editor';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { ITerminalLinkOpener, ITerminalSimpleLink } from 'vs/workbench/contrib/terminalContrib/links/browser/links';\nimport { osPathModule, updateLinkWithRelativeCwd } from 'vs/workbench/contrib/terminalContrib/links/browser/terminalLinkHelpers';\nimport { ITerminalCapabilityStore, TerminalCapability } from 'vs/platform/terminal/common/capabilities/capabilities';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { QueryBuilder } from 'vs/workbench/services/search/common/queryBuilder';\nimport { ISearchService } from 'vs/workbench/services/search/common/search';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { getLinkSuffix } from 'vs/workbench/contrib/terminalContrib/links/browser/terminalLinkParsing';\nimport { ITerminalLogService } from 'vs/platform/terminal/common/terminal';\n\nexport class TerminalLocalFileLinkOpener implements ITerminalLinkOpener {\n\tconstructor(\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t) {\n\t}\n\n\tasync open(link: ITerminalSimpleLink): Promise<void> {\n\t\tif (!link.uri) {\n\t\t\tthrow new Error('Tried to open file link without a resolved URI');\n\t\t}\n\t\tconst linkSuffix = link.parsedLink ? link.parsedLink.suffix : getLinkSuffix(link.text);\n\t\tlet selection: ITextEditorSelection | undefined = link.selection;\n\t\tif (!selection) {\n\t\t\tselection = linkSuffix?.row === undefined ? undefined : {\n\t\t\t\tstartLineNumber: linkSuffix.row ?? 1,\n\t\t\t\tstartColumn: linkSuffix.col ?? 1,\n\t\t\t\tendLineNumber: linkSuffix.rowEnd,\n\t\t\t\tendColumn: linkSuffix.colEnd\n\t\t\t};\n\t\t}\n\t\tawait this._editorService.openEditor({\n\t\t\tresource: link.uri,\n\t\t\toptions: { pinned: true, selection, revealIfOpened: true }\n\t\t});\n\t}\n}\n\nexport class TerminalLocalFolderInWorkspaceLinkOpener implements ITerminalLinkOpener {\n\tconstructor(@ICommandService private readonly _commandService: ICommandService) {\n\t}\n\n\tasync open(link: ITerminalSimpleLink): Promise<void> {\n\t\tif (!link.uri) {\n\t\t\tthrow new Error('Tried to open folder in workspace link without a resolved URI');\n\t\t}\n\t\tawait this._commandService.executeCommand('revealInExplorer', link.uri);\n\t}\n}\n\nexport class TerminalLocalFolderOutsideWorkspaceLinkOpener implements ITerminalLinkOpener {\n\tconstructor(@IHostService private readonly _hostService: IHostService) {\n\t}\n\n\tasync open(link: ITerminalSimpleLink): Promise<void> {\n\t\tif (!link.uri) {\n\t\t\tthrow new Error('Tried to open folder in workspace link without a resolved URI');\n\t\t}\n\t\tthis._hostService.openWindow([{ folderUri: link.uri }], { forceNewWindow: true });\n\t}\n}\n\nexport class TerminalSearchLinkOpener implements ITerminalLinkOpener {\n\tprotected _fileQueryBuilder = this._instantiationService.createInstance(QueryBuilder);\n\n\tconstructor(\n\t\tprivate readonly _capabilities: ITerminalCapabilityStore,\n\t\tprivate readonly _initialCwd: string,\n\t\tprivate readonly _localFileOpener: TerminalLocalFileLinkOpener,\n\t\tprivate readonly _localFolderInWorkspaceOpener: TerminalLocalFolderInWorkspaceLinkOpener,\n\t\tprivate readonly _getOS: () => OperatingSystem,\n\t\t@IFileService private readonly _fileService: IFileService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ITerminalLogService private readonly _logService: ITerminalLogService,\n\t\t@IQuickInputService private readonly _quickInputService: IQuickInputService,\n\t\t@ISearchService private readonly _searchService: ISearchService,\n\t\t@IWorkspaceContextService private readonly _workspaceContextService: IWorkspaceContextService,\n\t\t@IWorkbenchEnvironmentService private readonly _workbenchEnvironmentService: IWorkbenchEnvironmentService,\n\t) {\n\t}\n\n\tasync open(link: ITerminalSimpleLink): Promise<void> {\n\t\tconst osPath = osPathModule(this._getOS());\n\t\tconst pathSeparator = osPath.sep;\n\t\t// Remove file:/// and any leading ./ or ../ since quick access doesn't understand that format\n\t\tlet text = link.text.replace(/^file:\\/\\/\\/?/, '');\n\t\ttext = osPath.normalize(text).replace(/^(\\.+[\\\\/])+/, '');\n\n\t\t// Remove `:<one or more non number characters>` from the end of the link.\n\t\t// Examples:\n\t\t// - Ruby stack traces: <link>:in ...\n\t\t// - Grep output: <link>:<result line>\n\t\t// This only happens when the colon is _not_ followed by a forward- or back-slash as that\n\t\t// would break absolute Windows paths (eg. `C:/Users/...`).\n\t\ttext = text.replace(/:[^\\\\/][^\\d]+$/, '');\n\n\t\t// If any of the names of the folders in the workspace matches\n\t\t// a prefix of the link, remove that prefix and continue\n\t\tthis._workspaceContextService.getWorkspace().folders.forEach((folder) => {\n\t\t\tif (text.substring(0, folder.name.length + 1) === folder.name + pathSeparator) {\n\t\t\t\ttext = text.substring(folder.name.length + 1);\n\t\t\t\treturn;\n\t\t\t}\n\t\t});\n\t\tlet cwdResolvedText = text;\n\t\tif (this._capabilities.has(TerminalCapability.CommandDetection)) {\n\t\t\tcwdResolvedText = updateLinkWithRelativeCwd(this._capabilities, link.bufferRange.start.y, text, osPath, this._logService)?.[0] || text;\n\t\t}\n\n\t\t// Try open the cwd resolved link first\n\t\tif (await this._tryOpenExactLink(cwdResolvedText, link)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// If the cwd resolved text didn't match, try find the link without the cwd resolved, for\n\t\t// example when a command prints paths in a sub-directory of the current cwd\n\t\tif (text !== cwdResolvedText) {\n\t\t\tif (await this._tryOpenExactLink(text, link)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Fallback to searching quick access\n\t\treturn this._quickInputService.quickAccess.show(text);\n\t}\n\n\tprivate async _getExactMatch(sanitizedLink: string): Promise<IResourceMatch | undefined> {\n\t\t// Make the link relative to the cwd if it isn't absolute\n\t\tconst os = this._getOS();\n\t\tconst pathModule = osPathModule(os);\n\t\tconst isAbsolute = pathModule.isAbsolute(sanitizedLink);\n\t\tlet absolutePath: string | undefined = isAbsolute ? sanitizedLink : undefined;\n\t\tif (!isAbsolute && this._initialCwd.length > 0) {\n\t\t\tabsolutePath = pathModule.join(this._initialCwd, sanitizedLink);\n\t\t}\n\n\t\t// Try open as an absolute link\n\t\tlet resourceMatch: IResourceMatch | undefined;\n\t\tif (absolutePath) {\n\t\t\tlet normalizedAbsolutePath: string = absolutePath;\n\t\t\tif (os === OperatingSystem.Windows) {\n\t\t\t\tnormalizedAbsolutePath = absolutePath.replace(/\\\\/g, '/');\n\t\t\t\tif (normalizedAbsolutePath.match(/[a-z]:/i)) {\n\t\t\t\t\tnormalizedAbsolutePath = `/${normalizedAbsolutePath}`;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet uri: URI;\n\t\t\tif (this._workbenchEnvironmentService.remoteAuthority) {\n\t\t\t\turi = URI.from({\n\t\t\t\t\tscheme: Schemas.vscodeRemote,\n\t\t\t\t\tauthority: this._workbenchEnvironmentService.remoteAuthority,\n\t\t\t\t\tpath: normalizedAbsolutePath\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\turi = URI.file(normalizedAbsolutePath);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst fileStat = await this._fileService.stat(uri);\n\t\t\t\tresourceMatch = { uri, isDirectory: fileStat.isDirectory };\n\t\t\t} catch {\n\t\t\t\t// File or dir doesn't exist, continue on\n\t\t\t}\n\t\t}\n\n\t\t// Search the workspace if an exact match based on the absolute path was not found\n\t\tif (!resourceMatch) {\n\t\t\tconst results = await this._searchService.fileSearch(\n\t\t\t\tthis._fileQueryBuilder.file(this._workspaceContextService.getWorkspace().folders, {\n\t\t\t\t\tfilePattern: sanitizedLink,\n\t\t\t\t\tmaxResults: 2\n\t\t\t\t})\n\t\t\t);\n\t\t\tif (results.results.length > 0) {\n\t\t\t\tif (results.results.length === 1) {\n\t\t\t\t\t// If there's exactly 1 search result, return it regardless of whether it's\n\t\t\t\t\t// exact or partial.\n\t\t\t\t\tresourceMatch = { uri: results.results[0].resource };\n\t\t\t\t} else if (!isAbsolute) {\n\t\t\t\t\t// For non-absolute links, exact link matching is allowed only if there is a single an exact\n\t\t\t\t\t// file match. For example searching for `foo.txt` when there is no cwd information\n\t\t\t\t\t// available (ie. only the initial cwd) should open the file directly only if there is a\n\t\t\t\t\t// single file names `foo.txt` anywhere within the folder. These same rules apply to\n\t\t\t\t\t// relative paths with folders such as `src/foo.txt`.\n\t\t\t\t\tconst results = await this._searchService.fileSearch(\n\t\t\t\t\t\tthis._fileQueryBuilder.file(this._workspaceContextService.getWorkspace().folders, {\n\t\t\t\t\t\t\tfilePattern: `**/${sanitizedLink}`\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t\t// Find an exact match if it exists\n\t\t\t\t\tconst exactMatches = results.results.filter(e => e.resource.toString().endsWith(sanitizedLink));\n\t\t\t\t\tif (exactMatches.length === 1) {\n\t\t\t\t\t\tresourceMatch = { uri: exactMatches[0].resource };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn resourceMatch;\n\t}\n\n\tprivate async _tryOpenExactLink(text: string, link: ITerminalSimpleLink): Promise<boolean> {\n\t\tconst sanitizedLink = text.replace(/:\\d+(:\\d+)?$/, '');\n\t\ttry {\n\t\t\tconst result = await this._getExactMatch(sanitizedLink);\n\t\t\tif (result) {\n\t\t\t\tconst { uri, isDirectory } = result;\n\t\t\t\tconst linkToOpen = {\n\t\t\t\t\t// Use the absolute URI's path here so the optional line/col get detected\n\t\t\t\t\ttext: result.uri.path + (text.match(/:\\d+(:\\d+)?$/)?.[0] || ''),\n\t\t\t\t\turi,\n\t\t\t\t\tbufferRange: link.bufferRange,\n\t\t\t\t\ttype: link.type\n\t\t\t\t};\n\t\t\t\tif (uri) {\n\t\t\t\t\tawait (isDirectory ? this._localFolderInWorkspaceOpener.open(linkToOpen) : this._localFileOpener.open(linkToOpen));\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch {\n\t\t\treturn false;\n\t\t}\n\t\treturn false;\n\t}\n}\n\ninterface IResourceMatch {\n\turi: URI;\n\tisDirectory?: boolean;\n}\n\nexport class TerminalUrlLinkOpener implements ITerminalLinkOpener {\n\tconstructor(\n\t\tprivate readonly _isRemote: boolean,\n\t\t@IOpenerService private readonly _openerService: IOpenerService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService\n\t) {\n\t}\n\n\tasync open(link: ITerminalSimpleLink): Promise<void> {\n\t\tif (!link.uri) {\n\t\t\tthrow new Error('Tried to open a url without a resolved URI');\n\t\t}\n\t\t// It's important to use the raw string value here to avoid converting pre-encoded values\n\t\t// from the URL like `%2B` -> `+`.\n\t\tthis._openerService.open(link.text, {\n\t\t\tallowTunneling: this._isRemote && this._configurationService.getValue('remote.forwardOnOpen'),\n\t\t\tallowContributedOpeners: true,\n\t\t\topenExternal: true\n\t\t});\n\t}\n}\n"]}