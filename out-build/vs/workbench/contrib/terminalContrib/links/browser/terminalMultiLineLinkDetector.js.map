{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminalContrib/links/browser/terminalMultiLineLinkDetector.ts"],"names":[],"mappings":"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","file":"terminalMultiLineLinkDetector.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { ITerminalLinkDetector, ITerminalLinkResolver, ITerminalSimpleLink, TerminalBuiltinLinkType } from 'vs/workbench/contrib/terminalContrib/links/browser/links';\nimport { convertLinkRangeToBuffer, getXtermLineContent } from 'vs/workbench/contrib/terminalContrib/links/browser/terminalLinkHelpers';\nimport type { IBufferLine, Terminal } from 'xterm';\nimport { ITerminalProcessManager } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { ITerminalBackend, ITerminalLogService } from 'vs/platform/terminal/common/terminal';\n\nconst enum Constants {\n\t/**\n\t * The max line length to try extract word links from.\n\t */\n\tMaxLineLength = 2000,\n\n\t/**\n\t * The maximum length of a link to resolve against the file system. This limit is put in place\n\t * to avoid sending excessive data when remote connections are in place.\n\t */\n\tMaxResolvedLinkLength = 1024,\n}\n\nconst lineNumberPrefixMatchers = [\n\t// Ripgrep:\n\t//   /some/file\n\t//   16:searchresult\n\t//   16:    searchresult\n\t// Eslint:\n\t//   /some/file\n\t//     16:5  error ...\n\t/ *(?<link>(?<line>\\d+):(?<col>\\d+)?)/\n];\n\nconst gitDiffMatchers = [\n\t// --- a/some/file\n\t// +++ b/some/file\n\t// @@ -8,11 +8,11 @@ file content...\n\t/^(?<link>@@ .+ \\+(?<toFileLine>\\d+),(?<toFileCount>\\d+) @@)/\n];\n\nexport class TerminalMultiLineLinkDetector implements ITerminalLinkDetector {\n\tstatic id = 'multiline';\n\n\t// This was chosen as a reasonable maximum line length given the tradeoff between performance\n\t// and how likely it is to encounter such a large line length. Some useful reference points:\n\t// - Window old max length: 260 ($MAX_PATH)\n\t// - Linux max length: 4096 ($PATH_MAX)\n\treadonly maxLinkLength = 500;\n\n\tconstructor(\n\t\treadonly xterm: Terminal,\n\t\tprivate readonly _processManager: Pick<ITerminalProcessManager, 'initialCwd' | 'os' | 'remoteAuthority' | 'userHome'> & { backend?: Pick<ITerminalBackend, 'getWslPath'> },\n\t\tprivate readonly _linkResolver: ITerminalLinkResolver,\n\t\t@ITerminalLogService private readonly _logService: ITerminalLogService,\n\t\t@IUriIdentityService private readonly _uriIdentityService: IUriIdentityService,\n\t\t@IWorkspaceContextService private readonly _workspaceContextService: IWorkspaceContextService\n\t) {\n\t}\n\n\tasync detect(lines: IBufferLine[], startLine: number, endLine: number): Promise<ITerminalSimpleLink[]> {\n\t\tconst links: ITerminalSimpleLink[] = [];\n\n\t\t// Get the text representation of the wrapped line\n\t\tconst text = getXtermLineContent(this.xterm.buffer.active, startLine, endLine, this.xterm.cols);\n\t\tif (text === '' || text.length > Constants.MaxLineLength) {\n\t\t\treturn [];\n\t\t}\n\n\t\tthis._logService.trace('terminalMultiLineLinkDetector#detect text', text);\n\n\t\t// Match against the fallback matchers which are mainly designed to catch paths with spaces\n\t\t// that aren't possible using the regular mechanism.\n\t\tfor (const matcher of lineNumberPrefixMatchers) {\n\t\t\tconst match = text.match(matcher);\n\t\t\tconst group = match?.groups;\n\t\t\tif (!group) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst link = group?.link;\n\t\t\tconst line = group?.line;\n\t\t\tconst col = group?.col;\n\t\t\tif (!link || line === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Don't try resolve any links of excessive length\n\t\t\tif (link.length > Constants.MaxResolvedLinkLength) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis._logService.trace('terminalMultiLineLinkDetector#detect candidate', link);\n\n\t\t\t// Scan up looking for the first line that could be a path\n\t\t\tlet possiblePath: string | undefined;\n\t\t\tfor (let index = startLine - 1; index >= 0; index--) {\n\t\t\t\t// Ignore lines that aren't at the beginning of a wrapped line\n\t\t\t\tif (this.xterm.buffer.active.getLine(index)!.isWrapped) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst text = getXtermLineContent(this.xterm.buffer.active, index, index, this.xterm.cols);\n\t\t\t\tif (!text.match(/^\\s*\\d/)) {\n\t\t\t\t\tpossiblePath = text;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!possiblePath) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Check if the first non-matching line is an absolute or relative link\n\t\t\tconst linkStat = await this._linkResolver.resolveLink(this._processManager, possiblePath);\n\t\t\tif (linkStat) {\n\t\t\t\tlet type: TerminalBuiltinLinkType;\n\t\t\t\tif (linkStat.isDirectory) {\n\t\t\t\t\tif (this._isDirectoryInsideWorkspace(linkStat.uri)) {\n\t\t\t\t\t\ttype = TerminalBuiltinLinkType.LocalFolderInWorkspace;\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttype = TerminalBuiltinLinkType.LocalFolderOutsideWorkspace;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\ttype = TerminalBuiltinLinkType.LocalFile;\n\t\t\t\t}\n\n\t\t\t\t// Convert the entire line's text string index into a wrapped buffer range\n\t\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, this.xterm.cols, {\n\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\tstartLineNumber: 1,\n\t\t\t\t\tendColumn: 1 + text.length,\n\t\t\t\t\tendLineNumber: 1\n\t\t\t\t}, startLine);\n\n\t\t\t\tconst simpleLink: ITerminalSimpleLink = {\n\t\t\t\t\ttext: link,\n\t\t\t\t\turi: linkStat.uri,\n\t\t\t\t\tselection: {\n\t\t\t\t\t\tstartLineNumber: parseInt(line),\n\t\t\t\t\t\tstartColumn: col ? parseInt(col) : 1\n\t\t\t\t\t},\n\t\t\t\t\tdisableTrimColon: true,\n\t\t\t\t\tbufferRange: bufferRange,\n\t\t\t\t\ttype\n\t\t\t\t};\n\t\t\t\tthis._logService.trace('terminalMultiLineLinkDetector#detect verified link', simpleLink);\n\t\t\t\tlinks.push(simpleLink);\n\n\t\t\t\t// Break on the first match\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (links.length === 0) {\n\t\t\tfor (const matcher of gitDiffMatchers) {\n\t\t\t\tconst match = text.match(matcher);\n\t\t\t\tconst group = match?.groups;\n\t\t\t\tif (!group) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst link = group?.link;\n\t\t\t\tconst toFileLine = group?.toFileLine;\n\t\t\t\tconst toFileCount = group?.toFileCount;\n\t\t\t\tif (!link || toFileLine === undefined) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Don't try resolve any links of excessive length\n\t\t\t\tif (link.length > Constants.MaxResolvedLinkLength) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tthis._logService.trace('terminalMultiLineLinkDetector#detect candidate', link);\n\n\n\t\t\t\t// Scan up looking for the first line that could be a path\n\t\t\t\tlet possiblePath: string | undefined;\n\t\t\t\tfor (let index = startLine - 1; index >= 0; index--) {\n\t\t\t\t\t// Ignore lines that aren't at the beginning of a wrapped line\n\t\t\t\t\tif (this.xterm.buffer.active.getLine(index)!.isWrapped) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tconst text = getXtermLineContent(this.xterm.buffer.active, index, index, this.xterm.cols);\n\t\t\t\t\tconst match = text.match(/\\+\\+\\+ b\\/(?<path>.+)/);\n\t\t\t\t\tif (match) {\n\t\t\t\t\t\tpossiblePath = match.groups?.path;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!possiblePath) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Check if the first non-matching line is an absolute or relative link\n\t\t\t\tconst linkStat = await this._linkResolver.resolveLink(this._processManager, possiblePath);\n\t\t\t\tif (linkStat) {\n\t\t\t\t\tlet type: TerminalBuiltinLinkType;\n\t\t\t\t\tif (linkStat.isDirectory) {\n\t\t\t\t\t\tif (this._isDirectoryInsideWorkspace(linkStat.uri)) {\n\t\t\t\t\t\t\ttype = TerminalBuiltinLinkType.LocalFolderInWorkspace;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttype = TerminalBuiltinLinkType.LocalFolderOutsideWorkspace;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttype = TerminalBuiltinLinkType.LocalFile;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Convert the link to the buffer range\n\t\t\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, this.xterm.cols, {\n\t\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\t\tstartLineNumber: 1,\n\t\t\t\t\t\tendColumn: 1 + link.length,\n\t\t\t\t\t\tendLineNumber: 1\n\t\t\t\t\t}, startLine);\n\n\t\t\t\t\tconst simpleLink: ITerminalSimpleLink = {\n\t\t\t\t\t\ttext: link,\n\t\t\t\t\t\turi: linkStat.uri,\n\t\t\t\t\t\tselection: {\n\t\t\t\t\t\t\tstartLineNumber: parseInt(toFileLine),\n\t\t\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\t\t\tendLineNumber: parseInt(toFileLine) + parseInt(toFileCount)\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbufferRange: bufferRange,\n\t\t\t\t\t\ttype\n\t\t\t\t\t};\n\t\t\t\t\tthis._logService.trace('terminalMultiLineLinkDetector#detect verified link', simpleLink);\n\t\t\t\t\tlinks.push(simpleLink);\n\n\t\t\t\t\t// Break on the first match\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn links;\n\t}\n\n\tprivate _isDirectoryInsideWorkspace(uri: URI) {\n\t\tconst folders = this._workspaceContextService.getWorkspace().folders;\n\t\tfor (let i = 0; i < folders.length; i++) {\n\t\t\tif (this._uriIdentityService.extUri.isEqualOrParent(uri, folders[i].uri)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n"]}