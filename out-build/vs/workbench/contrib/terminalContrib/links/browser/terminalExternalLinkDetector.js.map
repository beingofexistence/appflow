{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminalContrib/links/browser/terminalExternalLinkDetector.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOhG,MAAa,IAAI;QAGhB,YACU,EAAU,EACV,KAAe,EACP,CAA0E;YAFlF,OAAE,GAAF,EAAE,CAAQ;YACV,UAAK,GAAL,KAAK,CAAU;YACP,MAAC,GAAD,CAAC,CAAyE;YALnF,kBAAa,GAAG,IAAI,CAAC;QAO9B,CAAC;QAED,KAAK,CAAC,MAAM,CAAC,KAAoB,EAAE,SAAiB,EAAE,OAAe;YACpE,kDAAkD;YAClD,MAAM,IAAI,GAAG,IAAA,0BAAI,EAAgB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YAChG,IAAI,IAAI,KAAK,EAAE,IAAI,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,aAAa,EAAE;gBACpD,OAAO,EAAE,CAAC;aACV;YAED,MAAM,aAAa,GAAG,MAAM,IAAI,CAAC,CAAC,CAAa,IAAI,CAAC,CAAC;YACrD,IAAI,CAAC,aAAa,EAAE;gBACnB,OAAO,EAAE,CAAC;aACV;YAED,MAAM,MAAM,GAAG,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;gBACvC,MAAM,WAAW,GAAG,IAAA,0BAAI,EAAqB,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;oBACpE,WAAW,EAAE,IAAI,CAAC,UAAU,GAAG,CAAC;oBAChC,eAAe,EAAE,CAAC;oBAClB,SAAS,EAAE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC;oBAC5C,aAAa,EAAE,CAAC;iBAChB,EAAE,SAAS,CAAC,CAAC;gBACd,MAAM,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;gBAE1F,MAAM,CAAC,GAAwB;oBAC9B,IAAI,EAAE,YAAY;oBAClB,KAAK,EAAE,IAAI,CAAC,KAAK;oBACjB,WAAW;oBACX,IAAI,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC,EAAE,EAAE;oBACrB,QAAQ,EAAE,IAAI,CAAC,QAAQ;iBACvB,CAAC;gBACF,OAAO,CAAC,CAAC;YACV,CAAC,CAAC,CAAC;YAEH,OAAO,MAAM,CAAC;QACf,CAAC;KACD;IA3CD,oBA2CC","file":"terminalExternalLinkDetector.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITerminalLinkDetector, ITerminalSimpleLink, OmitFirstArg } from 'vs/workbench/contrib/terminalContrib/links/browser/links';\nimport { convertLinkRangeToBuffer, getXtermLineContent } from 'vs/workbench/contrib/terminalContrib/links/browser/terminalLinkHelpers';\nimport { ITerminalExternalLinkProvider } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport type { IBufferLine, Terminal } from 'xterm';\n\nexport class TerminalExternalLinkDetector implements ITerminalLinkDetector {\n\treadonly maxLinkLength = 2000;\n\n\tconstructor(\n\t\treadonly id: string,\n\t\treadonly xterm: Terminal,\n\t\tprivate readonly _provideLinks: OmitFirstArg<ITerminalExternalLinkProvider['provideLinks']>\n\t) {\n\t}\n\n\tasync detect(lines: IBufferLine[], startLine: number, endLine: number): Promise<ITerminalSimpleLink[]> {\n\t\t// Get the text representation of the wrapped line\n\t\tconst text = getXtermLineContent(this.xterm.buffer.active, startLine, endLine, this.xterm.cols);\n\t\tif (text === '' || text.length > this.maxLinkLength) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst externalLinks = await this._provideLinks(text);\n\t\tif (!externalLinks) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst result = externalLinks.map(link => {\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, this.xterm.cols, {\n\t\t\t\tstartColumn: link.startIndex + 1,\n\t\t\t\tstartLineNumber: 1,\n\t\t\t\tendColumn: link.startIndex + link.length + 1,\n\t\t\t\tendLineNumber: 1\n\t\t\t}, startLine);\n\t\t\tconst matchingText = text.substring(link.startIndex, link.startIndex + link.length) || '';\n\n\t\t\tconst l: ITerminalSimpleLink = {\n\t\t\t\ttext: matchingText,\n\t\t\t\tlabel: link.label,\n\t\t\t\tbufferRange,\n\t\t\t\ttype: { id: this.id },\n\t\t\t\tactivate: link.activate\n\t\t\t};\n\t\t\treturn l;\n\t\t});\n\n\t\treturn result;\n\t}\n}\n"]}