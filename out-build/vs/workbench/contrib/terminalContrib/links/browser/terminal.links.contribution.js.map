{"version":3,"sources":["vs/workbench/contrib/terminalContrib/links/browser/terminal.links.contribution.ts"],"names":[],"mappings":"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","file":"terminal.links.contribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { localize } from 'vs/nls';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { AccessibleViewProviderId, accessibleViewCurrentProviderId, accessibleViewIsShown } from 'vs/workbench/contrib/accessibility/browser/accessibilityConfiguration';\nimport { IDetachedTerminalInstance, ITerminalContribution, ITerminalInstance, IXtermTerminal, isDetachedTerminalInstance } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { registerActiveInstanceAction } from 'vs/workbench/contrib/terminal/browser/terminalActions';\nimport { registerTerminalContribution } from 'vs/workbench/contrib/terminal/browser/terminalExtensions';\nimport { TerminalWidgetManager } from 'vs/workbench/contrib/terminal/browser/widgets/widgetManager';\nimport { ITerminalProcessInfo, ITerminalProcessManager, TerminalCommandId, isTerminalProcessManager } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { TerminalContextKeys } from 'vs/workbench/contrib/terminal/common/terminalContextKey';\nimport { terminalStrings } from 'vs/workbench/contrib/terminal/common/terminalStrings';\nimport { ITerminalLinkProviderService } from 'vs/workbench/contrib/terminalContrib/links/browser/links';\nimport { IDetectedLinks, TerminalLinkManager } from 'vs/workbench/contrib/terminalContrib/links/browser/terminalLinkManager';\nimport { TerminalLinkProviderService } from 'vs/workbench/contrib/terminalContrib/links/browser/terminalLinkProviderService';\nimport { TerminalLinkQuickpick } from 'vs/workbench/contrib/terminalContrib/links/browser/terminalLinkQuickpick';\nimport { TerminalLinkResolver } from 'vs/workbench/contrib/terminalContrib/links/browser/terminalLinkResolver';\nimport type { Terminal as RawXtermTerminal } from 'xterm';\n\nregisterSingleton(ITerminalLinkProviderService, TerminalLinkProviderService, InstantiationType.Delayed);\n\nclass TerminalLinkContribution extends DisposableStore implements ITerminalContribution {\n\tstatic readonly ID = 'terminal.link';\n\n\tstatic get(instance: ITerminalInstance): TerminalLinkContribution | null {\n\t\treturn instance.getContribution<TerminalLinkContribution>(TerminalLinkContribution.ID);\n\t}\n\n\tprivate _linkManager: TerminalLinkManager | undefined;\n\tget linkManager(): TerminalLinkManager | undefined { return this._linkManager; }\n\n\tprivate _terminalLinkQuickpick: TerminalLinkQuickpick | undefined;\n\tprivate _linkResolver: TerminalLinkResolver;\n\n\tconstructor(\n\t\tprivate readonly _instance: ITerminalInstance | IDetachedTerminalInstance,\n\t\tprivate readonly _processManager: ITerminalProcessManager | ITerminalProcessInfo,\n\t\tprivate readonly _widgetManager: TerminalWidgetManager,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ITerminalLinkProviderService private readonly _terminalLinkProviderService: ITerminalLinkProviderService\n\t) {\n\t\tsuper();\n\t\tthis._linkResolver = this._instantiationService.createInstance(TerminalLinkResolver);\n\t}\n\n\txtermReady(xterm: IXtermTerminal & { raw: RawXtermTerminal }): void {\n\t\tconst linkManager = this._instantiationService.createInstance(TerminalLinkManager, xterm.raw, this._processManager, this._instance.capabilities, this._linkResolver);\n\t\tif (isTerminalProcessManager(this._processManager)) {\n\t\t\tthis._processManager.onProcessReady(() => {\n\t\t\t\tlinkManager.setWidgetManager(this._widgetManager);\n\t\t\t});\n\t\t} else {\n\t\t\tlinkManager.setWidgetManager(this._widgetManager);\n\t\t}\n\t\tthis._linkManager = this.add(linkManager);\n\n\t\t// Attach the link provider(s) to the instance and listen for changes\n\t\tif (!isDetachedTerminalInstance(this._instance)) {\n\t\t\tfor (const linkProvider of this._terminalLinkProviderService.linkProviders) {\n\t\t\t\tthis._linkManager.registerExternalLinkProvider(linkProvider.provideLinks.bind(linkProvider, this._instance));\n\t\t\t}\n\t\t\tthis.add(this._terminalLinkProviderService.onDidAddLinkProvider(e => {\n\t\t\t\tlinkManager.registerExternalLinkProvider(e.provideLinks.bind(e, this._instance as ITerminalInstance));\n\t\t\t}));\n\t\t}\n\t\t// TODO: Currently only a single link provider is supported; the one registered by the ext host\n\t\tthis.add(this._terminalLinkProviderService.onDidRemoveLinkProvider(e => {\n\t\t\tlinkManager.dispose();\n\t\t\tthis.xtermReady(xterm);\n\t\t}));\n\t}\n\n\tasync showLinkQuickpick(extended?: boolean): Promise<void> {\n\t\tif (!this._terminalLinkQuickpick) {\n\t\t\tthis._terminalLinkQuickpick = this.add(this._instantiationService.createInstance(TerminalLinkQuickpick));\n\t\t\tthis._terminalLinkQuickpick.onDidRequestMoreLinks(() => {\n\t\t\t\tthis.showLinkQuickpick(true);\n\t\t\t});\n\t\t}\n\t\tconst links = await this._getLinks();\n\t\treturn await this._terminalLinkQuickpick.show(links);\n\t}\n\n\tprivate async _getLinks(): Promise<{ viewport: IDetectedLinks; all: Promise<IDetectedLinks> }> {\n\t\tif (!this._linkManager) {\n\t\t\tthrow new Error('terminal links are not ready, cannot generate link quick pick');\n\t\t}\n\t\treturn this._linkManager.getLinks();\n\t}\n\n\tasync openRecentLink(type: 'localFile' | 'url'): Promise<void> {\n\t\tif (!this._linkManager) {\n\t\t\tthrow new Error('terminal links are not ready, cannot open a link');\n\t\t}\n\t\tthis._linkManager.openRecentLink(type);\n\t}\n}\n\nregisterTerminalContribution(TerminalLinkContribution.ID, TerminalLinkContribution, true);\n\nconst category = terminalStrings.actionCategory;\n\nregisterActiveInstanceAction({\n\tid: TerminalCommandId.OpenDetectedLink,\n\ttitle: { value: localize('workbench.action.terminal.openDetectedLink', \"Open Detected Link...\"), original: 'Open Detected Link...' },\n\tf1: true,\n\tcategory,\n\tprecondition: TerminalContextKeys.terminalHasBeenCreated,\n\tkeybinding: [{\n\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyO,\n\t\tweight: KeybindingWeight.WorkbenchContrib + 1,\n\t\twhen: TerminalContextKeys.focus\n\t}, {\n\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyG,\n\t\tweight: KeybindingWeight.WorkbenchContrib + 1,\n\t\twhen: ContextKeyExpr.and(accessibleViewIsShown, ContextKeyExpr.equals(accessibleViewCurrentProviderId.key, AccessibleViewProviderId.Terminal))\n\t},\n\t],\n\trun: (activeInstance) => TerminalLinkContribution.get(activeInstance)?.showLinkQuickpick()\n});\nregisterActiveInstanceAction({\n\tid: TerminalCommandId.OpenWebLink,\n\ttitle: { value: localize('workbench.action.terminal.openLastUrlLink', \"Open Last URL Link\"), original: 'Open Last URL Link' },\n\tf1: true,\n\tcategory,\n\tprecondition: TerminalContextKeys.terminalHasBeenCreated,\n\trun: (activeInstance) => TerminalLinkContribution.get(activeInstance)?.openRecentLink('url')\n});\nregisterActiveInstanceAction({\n\tid: TerminalCommandId.OpenFileLink,\n\ttitle: { value: localize('workbench.action.terminal.openLastLocalFileLink', \"Open Last Local File Link\"), original: 'Open Last Local File Link' },\n\tf1: true,\n\tcategory,\n\tprecondition: TerminalContextKeys.terminalHasBeenCreated,\n\trun: (activeInstance) => TerminalLinkContribution.get(activeInstance)?.openRecentLink('localFile')\n});\n"]}