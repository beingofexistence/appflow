{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminalContrib/links/browser/terminalLinkResolver.ts"],"names":[],"mappings":"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","file":"terminalLinkResolver.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITerminalLinkResolver, ResolvedLink } from 'vs/workbench/contrib/terminalContrib/links/browser/links';\nimport { removeLinkSuffix, removeLinkQueryString, winDrivePrefix } from 'vs/workbench/contrib/terminalContrib/links/browser/terminalLinkParsing';\nimport { URI } from 'vs/base/common/uri';\nimport { ITerminalProcessManager } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { Schemas } from 'vs/base/common/network';\nimport { isWindows, OperatingSystem, OS } from 'vs/base/common/platform';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IPath, posix, win32 } from 'vs/base/common/path';\nimport { ITerminalBackend } from 'vs/platform/terminal/common/terminal';\n\nexport class TerminalLinkResolver implements ITerminalLinkResolver {\n\tdeclare _serviceBrand: undefined;\n\n\t// Link cache could be shared across all terminals, but that could lead to weird results when\n\t// both local and remote terminals are present\n\tprivate readonly _resolvedLinkCaches: Map<string, LinkCache> = new Map();\n\n\tconstructor(\n\t\t@IFileService private readonly _fileService: IFileService,\n\t) {\n\t}\n\n\tasync resolveLink(processManager: Pick<ITerminalProcessManager, 'initialCwd' | 'os' | 'remoteAuthority' | 'userHome'> & { backend?: Pick<ITerminalBackend, 'getWslPath'> }, link: string, uri?: URI): Promise<ResolvedLink> {\n\t\t// Get the link cache\n\t\tlet cache = this._resolvedLinkCaches.get(processManager.remoteAuthority ?? '');\n\t\tif (!cache) {\n\t\t\tcache = new LinkCache();\n\t\t\tthis._resolvedLinkCaches.set(processManager.remoteAuthority ?? '', cache);\n\t\t}\n\n\t\t// Check resolved link cache first\n\t\tconst cached = cache.get(uri || link);\n\t\tif (cached !== undefined) {\n\t\t\treturn cached;\n\t\t}\n\n\t\tif (uri) {\n\t\t\ttry {\n\t\t\t\tconst stat = await this._fileService.stat(uri);\n\t\t\t\tconst result = { uri, link, isDirectory: stat.isDirectory };\n\t\t\t\tcache.set(uri, result);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\t// Does not exist\n\t\t\t\tcache.set(uri, null);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\n\t\t// Remove any line/col suffix\n\t\tlet linkUrl = removeLinkSuffix(link);\n\n\t\t// Remove any query string\n\t\tlinkUrl = removeLinkQueryString(linkUrl);\n\n\t\t// Exit early if the link is determines as not valid already\n\t\tif (linkUrl.length === 0) {\n\t\t\tcache.set(link, null);\n\t\t\treturn null;\n\t\t}\n\n\t\t// If the link looks like a /mnt/ WSL path and this is a Windows frontend, use the backend\n\t\t// to get the resolved path from the wslpath util.\n\t\tif (isWindows && link.match(/^\\/mnt\\/[a-z]/i) && processManager.backend) {\n\t\t\tlinkUrl = await processManager.backend.getWslPath(linkUrl, 'unix-to-win');\n\t\t}\n\t\t// Skip preprocessing if it looks like a special Windows -> WSL link\n\t\telse if (isWindows && link.match(/^(?:\\/\\/|\\\\\\\\)wsl(?:\\$|\\.localhost)(\\/|\\\\)/)) {\n\t\t\t// No-op, it's already the right format\n\t\t}\n\t\t// Handle all non-WSL links\n\t\telse {\n\t\t\tconst preprocessedLink = this._preprocessPath(linkUrl, processManager.initialCwd, processManager.os, processManager.userHome);\n\t\t\tif (!preprocessedLink) {\n\t\t\t\tcache.set(link, null);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tlinkUrl = preprocessedLink;\n\t\t}\n\n\t\ttry {\n\t\t\tlet uri: URI;\n\t\t\tif (processManager.remoteAuthority) {\n\t\t\t\turi = URI.from({\n\t\t\t\t\tscheme: Schemas.vscodeRemote,\n\t\t\t\t\tauthority: processManager.remoteAuthority,\n\t\t\t\t\tpath: linkUrl\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\turi = URI.file(linkUrl);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst stat = await this._fileService.stat(uri);\n\t\t\t\tconst result = { uri, link, isDirectory: stat.isDirectory };\n\t\t\t\tcache.set(link, result);\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\t// Does not exist\n\t\t\t\tcache.set(link, null);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} catch {\n\t\t\t// Errors in parsing the path\n\t\t\tcache.set(link, null);\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tprotected _preprocessPath(link: string, initialCwd: string, os: OperatingSystem | undefined, userHome: string | undefined): string | null {\n\t\tconst osPath = this._getOsPath(os);\n\t\tif (link.charAt(0) === '~') {\n\t\t\t// Resolve ~ -> userHome\n\t\t\tif (!userHome) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tlink = osPath.join(userHome, link.substring(1));\n\t\t} else if (link.charAt(0) !== '/' && link.charAt(0) !== '~') {\n\t\t\t// Resolve workspace path . | .. | <relative_path> -> <path>/. | <path>/.. | <path>/<relative_path>\n\t\t\tif (os === OperatingSystem.Windows) {\n\t\t\t\tif (!link.match('^' + winDrivePrefix) && !link.startsWith('\\\\\\\\?\\\\')) {\n\t\t\t\t\tif (!initialCwd) {\n\t\t\t\t\t\t// Abort if no workspace is open\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t\tlink = osPath.join(initialCwd, link);\n\t\t\t\t} else {\n\t\t\t\t\t// Remove \\\\?\\ from paths so that they share the same underlying\n\t\t\t\t\t// uri and don't open multiple tabs for the same file\n\t\t\t\t\tlink = link.replace(/^\\\\\\\\\\?\\\\/, '');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!initialCwd) {\n\t\t\t\t\t// Abort if no workspace is open\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tlink = osPath.join(initialCwd, link);\n\t\t\t}\n\t\t}\n\t\tlink = osPath.normalize(link);\n\n\t\treturn link;\n\t}\n\n\tprivate _getOsPath(os: OperatingSystem | undefined): IPath {\n\t\treturn (os ?? OS) === OperatingSystem.Windows ? win32 : posix;\n\t}\n}\n\nconst enum LinkCacheConstants {\n\t/**\n\t * How long to cache links for in milliseconds, the TTL resets whenever a new value is set in\n\t * the cache.\n\t */\n\tTTL = 10000\n}\n\nclass LinkCache {\n\tprivate readonly _cache = new Map<string, ResolvedLink>();\n\tprivate _cacheTilTimeout = 0;\n\n\tset(link: string | URI, value: ResolvedLink) {\n\t\t// Reset cached link TTL on any set\n\t\tif (this._cacheTilTimeout) {\n\t\t\twindow.clearTimeout(this._cacheTilTimeout);\n\t\t}\n\t\tthis._cacheTilTimeout = window.setTimeout(() => this._cache.clear(), LinkCacheConstants.TTL);\n\t\tthis._cache.set(this._getKey(link), value);\n\t}\n\n\tget(link: string | URI): ResolvedLink | undefined {\n\t\treturn this._cache.get(this._getKey(link));\n\t}\n\n\tprivate _getKey(link: string | URI): string {\n\t\tif (URI.isUri(link)) {\n\t\t\treturn link.toString();\n\t\t}\n\t\treturn link;\n\t}\n}\n"]}