{"version":3,"sources":["vs/workbench/contrib/terminalContrib/links/browser/terminalLinkDetectorAdapter.ts"],"names":[],"mappings":"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","file":"terminalLinkDetectorAdapter.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { localize } from 'vs/nls';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ITerminalLinkDetector, ITerminalSimpleLink, TerminalBuiltinLinkType, TerminalLinkType } from 'vs/workbench/contrib/terminalContrib/links/browser/links';\nimport { TerminalLink } from 'vs/workbench/contrib/terminalContrib/links/browser/terminalLink';\nimport { XtermLinkMatcherHandler } from 'vs/workbench/contrib/terminalContrib/links/browser/terminalLinkManager';\nimport type { IBufferLine, ILink, ILinkProvider, IViewportRange } from 'xterm';\n\nexport interface IActivateLinkEvent {\n\tlink: ITerminalSimpleLink;\n\tevent?: MouseEvent;\n}\n\nexport interface IShowHoverEvent {\n\tlink: TerminalLink;\n\tviewportRange: IViewportRange;\n\tmodifierDownCallback?: () => void;\n\tmodifierUpCallback?: () => void;\n}\n\n/**\n * Wrap a link detector object so it can be used in xterm.js\n */\nexport class TerminalLinkDetectorAdapter extends Disposable implements ILinkProvider {\n\tprivate _activeLinks: TerminalLink[] | undefined;\n\n\tprivate readonly _onDidActivateLink = this._register(new Emitter<IActivateLinkEvent>());\n\treadonly onDidActivateLink = this._onDidActivateLink.event;\n\tprivate readonly _onDidShowHover = this._register(new Emitter<IShowHoverEvent>());\n\treadonly onDidShowHover = this._onDidShowHover.event;\n\n\tconstructor(\n\t\tprivate readonly _detector: ITerminalLinkDetector,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t) {\n\t\tsuper();\n\t}\n\n\tprivate _activeProvideLinkRequests: Map<number, Promise<TerminalLink[]>> = new Map();\n\tasync provideLinks(bufferLineNumber: number, callback: (links: ILink[] | undefined) => void) {\n\t\tlet activeRequest = this._activeProvideLinkRequests.get(bufferLineNumber);\n\t\tif (activeRequest) {\n\t\t\tawait activeRequest;\n\t\t\tcallback(this._activeLinks);\n\t\t\treturn;\n\t\t}\n\t\tif (this._activeLinks) {\n\t\t\tfor (const link of this._activeLinks) {\n\t\t\t\tlink.dispose();\n\t\t\t}\n\t\t}\n\t\tactiveRequest = this._provideLinks(bufferLineNumber);\n\t\tthis._activeProvideLinkRequests.set(bufferLineNumber, activeRequest);\n\t\tthis._activeLinks = await activeRequest;\n\t\tthis._activeProvideLinkRequests.delete(bufferLineNumber);\n\t\tcallback(this._activeLinks);\n\t}\n\n\tprivate async _provideLinks(bufferLineNumber: number): Promise<TerminalLink[]> {\n\t\t// Dispose of all old links if new links are provided, links are only cached for the current line\n\t\tconst links: TerminalLink[] = [];\n\n\t\tlet startLine = bufferLineNumber - 1;\n\t\tlet endLine = startLine;\n\n\t\tconst lines: IBufferLine[] = [\n\t\t\tthis._detector.xterm.buffer.active.getLine(startLine)!\n\t\t];\n\n\t\t// Cap the maximum context on either side of the line being provided, by taking the context\n\t\t// around the line being provided for this ensures the line the pointer is on will have\n\t\t// links provided.\n\t\tconst maxLineContext = Math.max(this._detector.maxLinkLength / this._detector.xterm.cols);\n\t\tconst minStartLine = Math.max(startLine - maxLineContext, 0);\n\t\tconst maxEndLine = Math.min(endLine + maxLineContext, this._detector.xterm.buffer.active.length);\n\n\t\twhile (startLine >= minStartLine && this._detector.xterm.buffer.active.getLine(startLine)?.isWrapped) {\n\t\t\tlines.unshift(this._detector.xterm.buffer.active.getLine(startLine - 1)!);\n\t\t\tstartLine--;\n\t\t}\n\n\t\twhile (endLine < maxEndLine && this._detector.xterm.buffer.active.getLine(endLine + 1)?.isWrapped) {\n\t\t\tlines.push(this._detector.xterm.buffer.active.getLine(endLine + 1)!);\n\t\t\tendLine++;\n\t\t}\n\n\t\tconst detectedLinks = await this._detector.detect(lines, startLine, endLine);\n\t\tfor (const link of detectedLinks) {\n\t\t\tlinks.push(this._createTerminalLink(link, async (event) => {\n\t\t\t\tthis._onDidActivateLink.fire({ link, event });\n\t\t\t}));\n\t\t}\n\n\t\treturn links;\n\t}\n\n\tprivate _createTerminalLink(l: ITerminalSimpleLink, activateCallback: XtermLinkMatcherHandler): TerminalLink {\n\t\t// Remove trailing colon if there is one so the link is more useful\n\t\tif (!l.disableTrimColon && l.text.length > 0 && l.text.charAt(l.text.length - 1) === ':') {\n\t\t\tl.text = l.text.slice(0, -1);\n\t\t\tl.bufferRange.end.x--;\n\t\t}\n\t\treturn this._instantiationService.createInstance(TerminalLink,\n\t\t\tthis._detector.xterm,\n\t\t\tl.bufferRange,\n\t\t\tl.text,\n\t\t\tl.actions,\n\t\t\tthis._detector.xterm.buffer.active.viewportY,\n\t\t\tactivateCallback,\n\t\t\t(link, viewportRange, modifierDownCallback, modifierUpCallback) => this._onDidShowHover.fire({\n\t\t\t\tlink,\n\t\t\t\tviewportRange,\n\t\t\t\tmodifierDownCallback,\n\t\t\t\tmodifierUpCallback\n\t\t\t}),\n\t\t\tl.type !== TerminalBuiltinLinkType.Search, // Only search is low confidence\n\t\t\tl.label || this._getLabel(l.type),\n\t\t\tl.type\n\t\t);\n\t}\n\n\tprivate _getLabel(type: TerminalLinkType): string {\n\t\tswitch (type) {\n\t\t\tcase TerminalBuiltinLinkType.Search: return localize('searchWorkspace', 'Search workspace');\n\t\t\tcase TerminalBuiltinLinkType.LocalFile: return localize('openFile', 'Open file in editor');\n\t\t\tcase TerminalBuiltinLinkType.LocalFolderInWorkspace: return localize('focusFolder', 'Focus folder in explorer');\n\t\t\tcase TerminalBuiltinLinkType.LocalFolderOutsideWorkspace: return localize('openFolder', 'Open folder in new window');\n\t\t\tcase TerminalBuiltinLinkType.Url:\n\t\t\tdefault:\n\t\t\t\treturn localize('followLink', 'Follow link');\n\t\t}\n\t}\n}\n"]}