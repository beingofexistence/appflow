{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminalContrib/links/browser/terminalUriLinkDetector.ts"],"names":[],"mappings":"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","file":"terminalUriLinkDetector.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { ILinkComputerTarget, LinkComputer } from 'vs/editor/common/languages/linkComputer';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { ITerminalLinkDetector, ITerminalLinkResolver, ITerminalSimpleLink, TerminalBuiltinLinkType } from 'vs/workbench/contrib/terminalContrib/links/browser/links';\nimport { convertLinkRangeToBuffer, getXtermLineContent } from 'vs/workbench/contrib/terminalContrib/links/browser/terminalLinkHelpers';\nimport { ITerminalProcessManager } from 'vs/workbench/contrib/terminal/common/terminal';\nimport type { IBufferLine, Terminal } from 'xterm';\nimport { ITerminalBackend } from 'vs/platform/terminal/common/terminal';\n\nconst enum Constants {\n\t/**\n\t * The maximum number of links in a line to resolve against the file system. This limit is put\n\t * in place to avoid sending excessive data when remote connections are in place.\n\t */\n\tMaxResolvedLinksInLine = 10\n}\n\nexport class TerminalUriLinkDetector implements ITerminalLinkDetector {\n\tstatic id = 'uri';\n\n\t// 2048 is the maximum URL length\n\treadonly maxLinkLength = 2048;\n\n\tconstructor(\n\t\treadonly xterm: Terminal,\n\t\tprivate readonly _processManager: Pick<ITerminalProcessManager, 'initialCwd' | 'os' | 'remoteAuthority' | 'userHome'> & { backend?: Pick<ITerminalBackend, 'getWslPath'> },\n\t\tprivate readonly _linkResolver: ITerminalLinkResolver,\n\t\t@IUriIdentityService private readonly _uriIdentityService: IUriIdentityService,\n\t\t@IWorkspaceContextService private readonly _workspaceContextService: IWorkspaceContextService\n\t) {\n\t}\n\n\tasync detect(lines: IBufferLine[], startLine: number, endLine: number): Promise<ITerminalSimpleLink[]> {\n\t\tconst links: ITerminalSimpleLink[] = [];\n\n\t\tconst linkComputerTarget = new TerminalLinkAdapter(this.xterm, startLine, endLine);\n\t\tconst computedLinks = LinkComputer.computeLinks(linkComputerTarget);\n\n\t\tlet resolvedLinkCount = 0;\n\t\tfor (const computedLink of computedLinks) {\n\t\t\tconst bufferRange = convertLinkRangeToBuffer(lines, this.xterm.cols, computedLink.range, startLine);\n\n\t\t\t// Check if the link is within the mouse position\n\t\t\tconst uri = computedLink.url\n\t\t\t\t? (typeof computedLink.url === 'string' ? URI.parse(this._excludeLineAndColSuffix(computedLink.url)) : computedLink.url)\n\t\t\t\t: undefined;\n\n\t\t\tif (!uri) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst text = computedLink.url?.toString() || '';\n\n\t\t\t// Don't try resolve any links of excessive length\n\t\t\tif (text.length > this.maxLinkLength) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Handle non-file scheme links\n\t\t\tif (uri.scheme !== Schemas.file) {\n\t\t\t\tlinks.push({\n\t\t\t\t\ttext,\n\t\t\t\t\turi,\n\t\t\t\t\tbufferRange,\n\t\t\t\t\ttype: TerminalBuiltinLinkType.Url\n\t\t\t\t});\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Filter out URI with unrecognized authorities\n\t\t\tif (uri.authority.length !== 2 && uri.authority.endsWith(':')) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// As a fallback URI, treat the authority as local to the workspace. This is required\n\t\t\t// for `ls --hyperlink` support for example which includes the hostname in the URI like\n\t\t\t// `file://Some-Hostname/mnt/c/foo/bar`.\n\t\t\tconst uriCandidates: URI[] = [uri];\n\t\t\tif (uri.authority.length > 0) {\n\t\t\t\turiCandidates.push(URI.from({ ...uri, authority: undefined }));\n\t\t\t}\n\n\t\t\t// Iterate over all candidates, pushing the candidate on the first that's verified\n\t\t\tfor (const uriCandidate of uriCandidates) {\n\t\t\t\tconst linkStat = await this._linkResolver.resolveLink(this._processManager, text, uriCandidate);\n\n\t\t\t\t// Create the link if validated\n\t\t\t\tif (linkStat) {\n\t\t\t\t\tlet type: TerminalBuiltinLinkType;\n\t\t\t\t\tif (linkStat.isDirectory) {\n\t\t\t\t\t\tif (this._isDirectoryInsideWorkspace(uriCandidate)) {\n\t\t\t\t\t\t\ttype = TerminalBuiltinLinkType.LocalFolderInWorkspace;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttype = TerminalBuiltinLinkType.LocalFolderOutsideWorkspace;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttype = TerminalBuiltinLinkType.LocalFile;\n\t\t\t\t\t}\n\t\t\t\t\tlinks.push({\n\t\t\t\t\t\t// Use computedLink.url if it's a string to retain the line/col suffix\n\t\t\t\t\t\ttext: typeof computedLink.url === 'string' ? computedLink.url : linkStat.link,\n\t\t\t\t\t\turi: uriCandidate,\n\t\t\t\t\t\tbufferRange,\n\t\t\t\t\t\ttype\n\t\t\t\t\t});\n\t\t\t\t\tresolvedLinkCount++;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Stop early if too many links exist in the line\n\t\t\tif (++resolvedLinkCount >= Constants.MaxResolvedLinksInLine) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn links;\n\t}\n\n\tprivate _isDirectoryInsideWorkspace(uri: URI) {\n\t\tconst folders = this._workspaceContextService.getWorkspace().folders;\n\t\tfor (let i = 0; i < folders.length; i++) {\n\t\t\tif (this._uriIdentityService.extUri.isEqualOrParent(uri, folders[i].uri)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _excludeLineAndColSuffix(path: string): string {\n\t\treturn path.replace(/:\\d+(:\\d+)?$/, '');\n\t}\n}\n\nclass TerminalLinkAdapter implements ILinkComputerTarget {\n\tconstructor(\n\t\tprivate _xterm: Terminal,\n\t\tprivate _lineStart: number,\n\t\tprivate _lineEnd: number\n\t) { }\n\n\tgetLineCount(): number {\n\t\treturn 1;\n\t}\n\n\tgetLineContent(): string {\n\t\treturn getXtermLineContent(this._xterm.buffer.active, this._lineStart, this._lineEnd, this._xterm.cols);\n\t}\n}\n"]}