{"version":3,"sources":["vs/workbench/contrib/terminalContrib/environmentChanges/browser/terminal.environmentChanges.contribution.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAchG,gIAAgI;IAEhI,IAAA,sBAAI,EAAyB;QAC5B,EAAE,+GAAgD;QAClD,KAAK,EAAE,EAAE,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAwD,EAAE,IAAgC,CAAC,EAAE,QAAQ,EAAE,gCAAgC,EAAE;QAClK,GAAG,EAAE,KAAK,EAAE,cAAc,EAAE,CAAC,EAAE,QAAQ,EAAE,GAAG,EAAE,EAAE;YAC/C,MAAM,UAAU,GAAG,cAAc,CAAC,gCAAgC,CAAC;YACnE,IAAI,UAAU,EAAE;gBACf,MAAM,KAAK,GAAG,GAA2C,CAAC;gBAC1D,MAAM,oBAAoB,GAAG,QAAQ,CAAC,GAAG,CAAC,mBAAG,CAAmB,CAAC;gBACjE,MAAM,cAAc,GAAG,oBAAoB,CAAC,cAAc,CAAC,6BAA6B,CAAC,CAAC;gBAC1F,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,mBAAG,CAAY,CAAC;gBACnD,MAAM,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;gBACvC,MAAM,SAAS,GAAG,KAAK,EAAE,eAAe,CAAC,CAAC,CAAC,MAAM,KAAK,CAAC,eAAe,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;gBACnF,MAAM,WAAW,GAAG,MAAM,cAAc,CAAC,kBAAkB,CAAC,SAAG,CAAC,IAAI,CACnE;oBACC,MAAM,EAAE,6BAA6B,CAAC,MAAM;oBAC5C,IAAI,EAAE,sBAAsB,SAAS,EAAE;oBACvC,QAAQ,EAAE,0BAA0B,CAAC,UAAU,EAAE,KAAK,CAAC;oBACvD,KAAK,EAAE,0BAA0B,SAAS,EAAE;iBAC5C,CAAC,CAAC,CAAC;gBACL,IAAI,WAAW,EAAE;oBAChB,MAAM,aAAa,CAAC,UAAU,CAAC;wBAC9B,QAAQ,EAAE,WAAW,CAAC,GAAG;qBACzB,CAAC,CAAC;iBACH;aACD;QACF,CAAC;KACD,CAAC,CAAC;IAGH,SAAS,0BAA0B,CAAC,UAAgD,EAAE,KAA2C;QAChI,IAAI,OAAO,GAAG,KAAK,IAAA,cAAQ,EAAC,CAAY,EAAE,IAA8B,CAAC,EAAE,CAAC;QAC5E,MAAM,kBAAkB,GAAG,UAAU,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;QACnE,MAAM,qBAAqB,GAAG,UAAU,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;QAClE,KAAK,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,UAAU,CAAC,WAAW,EAAE;YACjD,OAAO,IAAI,UAAU,IAAA,cAAQ,EAAC,CAAW,EAAE,IAAgB,EAAE,GAAG,CAAC,EAAE,CAAC;YACpE,OAAO,IAAI,IAAI,CAAC;YAChB,MAAM,iBAAiB,GAAG,kBAAkB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACtD,IAAI,iBAAiB,EAAE;gBACtB,OAAO,IAAI,KAAK,iBAAiB,IAAI,CAAC;aACtC;YACD,MAAM,oBAAoB,GAAG,qBAAqB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC5D,IAAI,oBAAoB,EAAE;gBACzB,sFAAsF;gBACtF,MAAM,eAAe,GAAG,iBAAiB,CAAC,CAAC,CAAC,KAAK,IAAA,cAAQ,EAAC,CAAmC,EAAE,IAAW,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;gBACpH,OAAO,IAAI,KAAK,oBAAoB,GAAG,eAAe,IAAI,CAAC;aAC3D;YAED,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,EAAE;gBACxC,IAAI,WAAW,CAAC,OAAO,EAAE,KAAK,CAAC,KAAK,KAAK,EAAE;oBAC1C,SAAS;iBACT;gBACD,OAAO,IAAI,SAAS,gBAAgB,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC;aACxF;SACD;QACD,OAAO,OAAO,CAAC;IAChB,CAAC;IAED,SAAS,WAAW,CACnB,OAAoC,EACpC,KAA2C;QAE3C,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;YACnB,OAAO,IAAI,CAAC;SACZ;QACD,gFAAgF;QAChF,IAAI,OAAO,CAAC,KAAK,CAAC,eAAe,IAAI,KAAK,EAAE,eAAe,IAAI,OAAO,CAAC,KAAK,CAAC,eAAe,CAAC,KAAK,KAAK,KAAK,CAAC,eAAe,CAAC,KAAK,EAAE;YACnI,OAAO,IAAI,CAAC;SACZ;QACD,OAAO,KAAK,CAAC;IACd,CAAC;IAED,SAAS,gBAAgB,CAAC,IAAoC,EAAE,KAAa,EAAE,QAAgB;QAC9F,QAAQ,IAAI,EAAE;YACb,KAAK,oDAA8B,CAAC,OAAO,CAAC,CAAC,OAAO,GAAG,QAAQ,IAAI,KAAK,UAAU,QAAQ,GAAG,CAAC;YAC9F,KAAK,oDAA8B,CAAC,MAAM,CAAC,CAAC,OAAO,GAAG,QAAQ,WAAW,QAAQ,IAAI,KAAK,EAAE,CAAC;YAC7F,OAAO,CAAC,CAAC,OAAO,GAAG,QAAQ,IAAI,KAAK,EAAE,CAAC;SACvC;IACF,CAAC;IAED,IAAM,6BAA6B,GAAnC,MAAM,6BAA6B;;iBAC3B,WAAM,GAAG,gCAAH,AAAmC,CAAC;QAEjD,YACoB,wBAA6B,EAChB,CAAkB;YAAlB,MAAC,GAAD,CAAC,CAAiB;YAElD,wBAAwB,CAAC,gCAAgC,CAAC,+BAA6B,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;QACvG,CAAC;QAED,KAAK,CAAC,kBAAkB,CAAC,QAAa;YACrC,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAa,QAAQ,CAAC,QAAQ,CAAC,CAAC;YACvD,IAAI,QAAQ,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,EAAE;gBACvC,OAAO,QAAQ,CAAC;aAChB;YAED,OAAO,IAAI,CAAC,CAAC,CAAa,WAAW,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,UAAU,EAAE,UAAU,EAAE,WAAW,EAAE,aAAK,CAAC,IAAI,EAAE,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;QAChI,CAAC;;IAjBI,6BAA6B;QAIhC,WAAA,qBAAG,CAAA;QACH,WAAA,WAAG,CAAA;OALA,6BAA6B,CAkBlC","file":"terminal.environmentChanges.contribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { Event } from 'vs/base/common/event';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { ITextModelContentProvider, ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { localize } from 'vs/nls';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { EnvironmentVariableMutatorType, EnvironmentVariableScope, IEnvironmentVariableMutator, IMergedEnvironmentVariableCollection } from 'vs/platform/terminal/common/environmentVariable';\nimport { registerActiveInstanceAction } from 'vs/workbench/contrib/terminal/browser/terminalActions';\nimport { TerminalCommandId } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\n\n// TODO: The rest of the terminal environment changes feature should move here https://github.com/microsoft/vscode/issues/177241\n\nregisterActiveInstanceAction({\n\tid: TerminalCommandId.ShowEnvironmentContributions,\n\ttitle: { value: localize('workbench.action.terminal.showEnvironmentContributions', \"Show Environment Contributions\"), original: 'Show Environment Contributions' },\n\trun: async (activeInstance, c, accessor, arg) => {\n\t\tconst collection = activeInstance.extEnvironmentVariableCollection;\n\t\tif (collection) {\n\t\t\tconst scope = arg as EnvironmentVariableScope | undefined;\n\t\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\t\tconst outputProvider = instantiationService.createInstance(EnvironmentCollectionProvider);\n\t\t\tconst editorService = accessor.get(IEditorService);\n\t\t\tconst timestamp = new Date().getTime();\n\t\t\tconst scopeDesc = scope?.workspaceFolder ? ` - ${scope.workspaceFolder.name}` : '';\n\t\t\tconst textContent = await outputProvider.provideTextContent(URI.from(\n\t\t\t\t{\n\t\t\t\t\tscheme: EnvironmentCollectionProvider.scheme,\n\t\t\t\t\tpath: `Environment changes${scopeDesc}`,\n\t\t\t\t\tfragment: describeEnvironmentChanges(collection, scope),\n\t\t\t\t\tquery: `environment-collection-${timestamp}`\n\t\t\t\t}));\n\t\t\tif (textContent) {\n\t\t\t\tawait editorService.openEditor({\n\t\t\t\t\tresource: textContent.uri\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n});\n\n\nfunction describeEnvironmentChanges(collection: IMergedEnvironmentVariableCollection, scope: EnvironmentVariableScope | undefined): string {\n\tlet content = `# ${localize('envChanges', 'Terminal Environment Changes')}`;\n\tconst globalDescriptions = collection.getDescriptionMap(undefined);\n\tconst workspaceDescriptions = collection.getDescriptionMap(scope);\n\tfor (const [ext, coll] of collection.collections) {\n\t\tcontent += `\\n\\n## ${localize('extension', 'Extension: {0}', ext)}`;\n\t\tcontent += '\\n';\n\t\tconst globalDescription = globalDescriptions.get(ext);\n\t\tif (globalDescription) {\n\t\t\tcontent += `\\n${globalDescription}\\n`;\n\t\t}\n\t\tconst workspaceDescription = workspaceDescriptions.get(ext);\n\t\tif (workspaceDescription) {\n\t\t\t// Only show '(workspace)' suffix if there is already a description for the extension.\n\t\t\tconst workspaceSuffix = globalDescription ? ` (${localize('ScopedEnvironmentContributionInfo', 'workspace')})` : '';\n\t\t\tcontent += `\\n${workspaceDescription}${workspaceSuffix}\\n`;\n\t\t}\n\n\t\tfor (const mutator of coll.map.values()) {\n\t\t\tif (filterScope(mutator, scope) === false) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcontent += `\\n- \\`${mutatorTypeLabel(mutator.type, mutator.value, mutator.variable)}\\``;\n\t\t}\n\t}\n\treturn content;\n}\n\nfunction filterScope(\n\tmutator: IEnvironmentVariableMutator,\n\tscope: EnvironmentVariableScope | undefined\n): boolean {\n\tif (!mutator.scope) {\n\t\treturn true;\n\t}\n\t// Only mutators which are applicable on the relevant workspace should be shown.\n\tif (mutator.scope.workspaceFolder && scope?.workspaceFolder && mutator.scope.workspaceFolder.index === scope.workspaceFolder.index) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nfunction mutatorTypeLabel(type: EnvironmentVariableMutatorType, value: string, variable: string): string {\n\tswitch (type) {\n\t\tcase EnvironmentVariableMutatorType.Prepend: return `${variable}=${value}\\${env:${variable}}`;\n\t\tcase EnvironmentVariableMutatorType.Append: return `${variable}=\\${env:${variable}}${value}`;\n\t\tdefault: return `${variable}=${value}`;\n\t}\n}\n\nclass EnvironmentCollectionProvider implements ITextModelContentProvider {\n\tstatic scheme = 'ENVIRONMENT_CHANGES_COLLECTION';\n\n\tconstructor(\n\t\t@ITextModelService textModelResolverService: ITextModelService,\n\t\t@IModelService private readonly _modelService: IModelService\n\t) {\n\t\ttextModelResolverService.registerTextModelContentProvider(EnvironmentCollectionProvider.scheme, this);\n\t}\n\n\tasync provideTextContent(resource: URI): Promise<ITextModel | null> {\n\t\tconst existing = this._modelService.getModel(resource);\n\t\tif (existing && !existing.isDisposed()) {\n\t\t\treturn existing;\n\t\t}\n\n\t\treturn this._modelService.createModel(resource.fragment, { languageId: 'markdown', onDidChange: Event.None }, resource, false);\n\t}\n}\n"]}