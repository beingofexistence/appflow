{"version":3,"sources":["vs/workbench/contrib/terminalContrib/developer/browser/terminal.developer.contribution.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAsBhG,IAAA,sBAAI,EAAmB;QACtB,EAAE,uFAAoC;QACtC,KAAK,EAAE,EAAE,KAAK,EAAE,IAAA,cAAQ,EAAC,CAA4C,EAAE,IAA6B,CAAC,EAAE,QAAQ,EAAE,6BAA6B,EAAE;QAChJ,QAAQ,EAAE,4BAAG,CAAQ,SAAS;QAC9B,YAAY,EAAE,gBAAG,CAAY,EAAE,CAAC,wCAAmB,CAAC,MAAM,CAAC;QAC3D,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,QAAQ,EAAE,EAAE;YAC1B,MAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,WAAG,CAAU,CAAC;YAC/C,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,YAAG,CAAY,CAAC;YACnD,MAAM,uBAAuB,GAAG,QAAQ,CAAC,GAAG,CAAC,eAAG,CAAsB,CAAC;YACvE,MAAM,MAAM,GAAG,MAAM,CAAC,CAAC,OAAO,CAAC,cAAc,EAAE,KAAK,EAAE,YAAY,CAAC;YACnE,IAAI,CAAC,MAAM,EAAE;gBACZ,OAAO;aACP;YACD,MAAM,MAAM,GAAG,uBAAuB,CAAC,YAAY,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;YACrE,MAAM,OAAO,GAAG,SAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,kBAAkB,CAAC,CAAC;YACzD,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YAChD,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;YAC5B,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;YAC9B,MAAM,GAAG,GAAG,MAAM,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC;YAChD,IAAI,CAAC,GAAG,EAAE;gBACT,OAAO;aACP;YACD,GAAG,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;YACpC,MAAM,IAAI,GAAG,MAAM,IAAI,OAAO,CAAc,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YACzE,IAAI,CAAC,IAAI,EAAE;gBACV,OAAO;aACP;YACD,MAAM,WAAW,CAAC,SAAS,CAAC,OAAO,EAAE,YAAG,CAAM,IAAI,CAAC,IAAI,UAAU,CAAC,MAAM,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,CAAC;YAC9F,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC7B,CAAC;KACD,CAAC,CAAC;IAEH,IAAA,sBAAI,EAAmB;QACtB,EAAE,6FAAuC;QACzC,KAAK,EAAE,EAAE,KAAK,EAAE,IAAA,cAAQ,EAAC,CAA+C,EAAE,IAAwB,CAAC,EAAE,QAAQ,EAAE,wBAAwB,EAAE;QACzI,QAAQ,EAAE,4BAAG,CAAQ,SAAS;QAC9B,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,QAAQ,EAAE,EAAE;YAC1B,MAAM,iBAAiB,GAAG,QAAQ,CAAC,GAAG,CAAC,gBAAG,CAAgB,CAAC;YAC3D,MAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,OAAO,CAAC,yBAAyB,EAAE,CAAC;YAC7D,MAAM,CAAC,CAAC,OAAO,CAAC,oBAAoB,EAAE,CAAC;YACvC,MAAM,QAAQ,CAAC,YAAY,CAAC;YAC5B,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE;gBACpB,MAAM,IAAI,KAAK,CAAC,2DAA2D,CAAC,CAAC;aAC7E;YACD,MAAM,IAAI,GAAG,MAAM,iBAAiB,CAAC,KAAK,CAAC;gBAC1C,KAAK,EAAE,EAAE;gBACT,WAAW,EAAE,+BAA+B;gBAC5C,MAAM,EAAE,IAAA,cAAQ,EAAC,CAAsD,EAAE,IAAiE,CAAC;aAC3I,CAAC,CAAC;YACH,IAAI,CAAC,IAAI,EAAE;gBACV,OAAO;aACP;YACD,IAAI,WAAW,GAAG,IAAI;iBACpB,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC;iBACrB,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YACxB,OAAO,IAAI,EAAE;gBACZ,MAAM,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,qBAAqB,CAAC,CAAC;gBACvD,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,CAAC,KAAK,KAAK,SAAS,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;oBACpE,MAAM;iBACN;gBACD,WAAW,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;aACnI;YACD,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAsC,CAAC;YAC9D,KAAK,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QAC/B,CAAC;KACD,CAAC,CAAC;IAGH,IAAA,sBAAI,EAAmB;QACtB,EAAE,mFAAkC;QACpC,KAAK,EAAE,EAAE,KAAK,EAAE,IAAA,cAAQ,EAAC,CAA0C,EAAE,IAAkB,CAAC,EAAE,QAAQ,EAAE,kBAAkB,EAAE;QACxH,QAAQ,EAAE,4BAAG,CAAQ,SAAS;QAC9B,GAAG,EAAE,KAAK,EAAE,CAAC,EAAE,QAAQ,EAAE,EAAE;YAC1B,MAAM,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,cAAG,CAAiB,CAAC;YACrD,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,eAAe,CAAC,qBAAqB,EAAE,CAAC,CAAC;YACvE,MAAM,oBAAoB,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC;YACnE,sDAAsD;YACtD,MAAM,iBAAiB,GAAG,oBAAoB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,QAAQ,CAAC;YAC5F,KAAK,MAAM,OAAO,IAAI,iBAAiB,EAAE;gBACxC,UAAU,CAAC,IAAI,CAAC,sCAAsC,OAAO,CAAC,eAAe,GAAG,CAAC,CAAC;gBAClF,OAAO,CAAC,cAAc,EAAE,CAAC;aACzB;QACF,CAAC;KACD,CAAC,CAAC;IAEH,IAAM,mBAAmB,GAAzB,MAAM,mBAAoB,SAAQ,eAAG;;iBACpB,OAAE,GAAG,kBAAH,AAAqB,CAAC;QAExC,MAAM,CAAC,GAAG,CAAC,QAA2B;YACrC,OAAO,QAAQ,CAAC,eAAe,CAAsB,qBAAmB,CAAC,EAAE,CAAC,CAAC;QAC9E,CAAC;QACD,YACC,QAA2B,EAC3B,cAAuC,EACvC,aAAmB,EACqB,CAA0B;YAClE,KAAK,EAAE,CAAC;YADgC,MAAC,GAAD,CAAC,CAAyB;YAElE,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAqB,wBAAwB,CAAC,CAAC,CAAC,EAAE;gBAChE,IAAI,CAAC,CAAC,oBAAoB,yEAA2B,EAAE;oBACtD,IAAI,CAAC,CAAC,EAAe,CAAC;iBACtB;YACF,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QACD,UAAU,CAAC,KAAyC;YACnD,IAAI,CAAC,CAAC,GAAQ,KAAK,CAAC;YACpB,IAAI,CAAC,CAAC,EAAe,CAAC;QACvB,CAAC;QAEO,CAAC;YACR,MAAM,OAAO,GAAY,IAAI,CAAC,CAAC,CAAqB,QAAQ,yEAA2B,IAAI,KAAK,CAAC;YACjG,IAAI,CAAC,CAAC,EAAO,GAAG,CAAC,OAAO,EAAE,SAAS,CAAC,MAAM,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;QACjE,CAAC;;IA1BI,mBAAmB;QAUtB,WAAA,mBAAG,CAAA;OAVA,mBAAmB,CA2BxB;IACD,IAAA,yBAAI,EAAyB,mBAAmB,CAAC,EAAE,EAAE,mBAAmB,CAAC,CAAC","file":"terminal.developer.contribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { Categories } from 'vs/platform/action/common/actionCommonCategories';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\nimport { ITerminalLogService, TerminalSettingId } from 'vs/platform/terminal/common/terminal';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IInternalXtermTerminal, ITerminalContribution, ITerminalInstance, IXtermTerminal } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { registerTerminalAction } from 'vs/workbench/contrib/terminal/browser/terminalActions';\nimport { registerTerminalContribution } from 'vs/workbench/contrib/terminal/browser/terminalExtensions';\nimport { TerminalWidgetManager } from 'vs/workbench/contrib/terminal/browser/widgets/widgetManager';\nimport { ITerminalProcessManager, TerminalCommandId } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { TerminalContextKeys } from 'vs/workbench/contrib/terminal/common/terminalContextKey';\nimport type { Terminal } from 'xterm';\n\nregisterTerminalAction({\n\tid: TerminalCommandId.ShowTextureAtlas,\n\ttitle: { value: localize('workbench.action.terminal.showTextureAtlas', \"Show Terminal Texture Atlas\"), original: 'Show Terminal Texture Atlas' },\n\tcategory: Categories.Developer,\n\tprecondition: ContextKeyExpr.or(TerminalContextKeys.isOpen),\n\trun: async (c, accessor) => {\n\t\tconst fileService = accessor.get(IFileService);\n\t\tconst openerService = accessor.get(IOpenerService);\n\t\tconst workspaceContextService = accessor.get(IWorkspaceContextService);\n\t\tconst bitmap = await c.service.activeInstance?.xterm?.textureAtlas;\n\t\tif (!bitmap) {\n\t\t\treturn;\n\t\t}\n\t\tconst cwdUri = workspaceContextService.getWorkspace().folders[0].uri;\n\t\tconst fileUri = URI.joinPath(cwdUri, 'textureAtlas.png');\n\t\tconst canvas = document.createElement('canvas');\n\t\tcanvas.width = bitmap.width;\n\t\tcanvas.height = bitmap.height;\n\t\tconst ctx = canvas.getContext('bitmaprenderer');\n\t\tif (!ctx) {\n\t\t\treturn;\n\t\t}\n\t\tctx.transferFromImageBitmap(bitmap);\n\t\tconst blob = await new Promise<Blob | null>((res) => canvas.toBlob(res));\n\t\tif (!blob) {\n\t\t\treturn;\n\t\t}\n\t\tawait fileService.writeFile(fileUri, VSBuffer.wrap(new Uint8Array(await blob.arrayBuffer())));\n\t\topenerService.open(fileUri);\n\t}\n});\n\nregisterTerminalAction({\n\tid: TerminalCommandId.WriteDataToTerminal,\n\ttitle: { value: localize('workbench.action.terminal.writeDataToTerminal', \"Write Data to Terminal\"), original: 'Write Data to Terminal' },\n\tcategory: Categories.Developer,\n\trun: async (c, accessor) => {\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst instance = await c.service.getActiveOrCreateInstance();\n\t\tawait c.service.revealActiveTerminal();\n\t\tawait instance.processReady;\n\t\tif (!instance.xterm) {\n\t\t\tthrow new Error('Cannot write data to terminal if xterm isn\\'t initialized');\n\t\t}\n\t\tconst data = await quickInputService.input({\n\t\t\tvalue: '',\n\t\t\tplaceHolder: 'Enter data, use \\\\x to escape',\n\t\t\tprompt: localize('workbench.action.terminal.writeDataToTerminal.prompt', \"Enter data to write directly to the terminal, bypassing the pty\"),\n\t\t});\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\tlet escapedData = data\n\t\t\t.replace(/\\\\n/g, '\\n')\n\t\t\t.replace(/\\\\r/g, '\\r');\n\t\twhile (true) {\n\t\t\tconst match = escapedData.match(/\\\\x([0-9a-fA-F]{2})/);\n\t\t\tif (match === null || match.index === undefined || match.length < 2) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tescapedData = escapedData.slice(0, match.index) + String.fromCharCode(parseInt(match[1], 16)) + escapedData.slice(match.index + 4);\n\t\t}\n\t\tconst xterm = instance.xterm as any as IInternalXtermTerminal;\n\t\txterm._writeText(escapedData);\n\t}\n});\n\n\nregisterTerminalAction({\n\tid: TerminalCommandId.RestartPtyHost,\n\ttitle: { value: localize('workbench.action.terminal.restartPtyHost', \"Restart Pty Host\"), original: 'Restart Pty Host' },\n\tcategory: Categories.Developer,\n\trun: async (c, accessor) => {\n\t\tconst logService = accessor.get(ITerminalLogService);\n\t\tconst backends = Array.from(c.instanceService.getRegisteredBackends());\n\t\tconst unresponsiveBackends = backends.filter(e => !e.isResponsive);\n\t\t// Restart only unresponsive backends if there are any\n\t\tconst restartCandidates = unresponsiveBackends.length > 0 ? unresponsiveBackends : backends;\n\t\tfor (const backend of restartCandidates) {\n\t\t\tlogService.warn(`Restarting pty host for authority \"${backend.remoteAuthority}\"`);\n\t\t\tbackend.restartPtyHost();\n\t\t}\n\t}\n});\n\nclass DevModeContribution extends DisposableStore implements ITerminalContribution {\n\tstatic readonly ID = 'terminal.devMode';\n\tprivate _xterm: IXtermTerminal & { raw: Terminal } | undefined;\n\tstatic get(instance: ITerminalInstance): DevModeContribution | null {\n\t\treturn instance.getContribution<DevModeContribution>(DevModeContribution.ID);\n\t}\n\tconstructor(\n\t\tinstance: ITerminalInstance,\n\t\tprocessManager: ITerminalProcessManager,\n\t\twidgetManager: TerminalWidgetManager,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService) {\n\t\tsuper();\n\t\tthis.add(this._configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(TerminalSettingId.DevMode)) {\n\t\t\t\tthis._updateDevMode();\n\t\t\t}\n\t\t}));\n\t}\n\txtermReady(xterm: IXtermTerminal & { raw: Terminal }): void {\n\t\tthis._xterm = xterm;\n\t\tthis._updateDevMode();\n\t}\n\n\tprivate _updateDevMode() {\n\t\tconst devMode: boolean = this._configurationService.getValue(TerminalSettingId.DevMode) || false;\n\t\tthis._xterm?.raw.element?.classList.toggle('dev-mode', devMode);\n\t}\n}\nregisterTerminalContribution(DevModeContribution.ID, DevModeContribution);\n"]}