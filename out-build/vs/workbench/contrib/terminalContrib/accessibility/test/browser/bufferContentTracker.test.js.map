{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminalContrib/accessibility/test/browser/bufferContentTracker.test.ts"],"names":[],"mappings":"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","file":"bufferContentTracker.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { importAMDNodeModule } from 'vs/amdX';\nimport { isWindows } from 'vs/base/common/platform';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { ContextMenuService } from 'vs/platform/contextview/browser/contextMenuService';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { MockContextKeyService } from 'vs/platform/keybinding/test/common/mockKeybindingService';\nimport { ILoggerService, NullLogService } from 'vs/platform/log/common/log';\nimport { TerminalCapability } from 'vs/platform/terminal/common/capabilities/capabilities';\nimport { TerminalCapabilityStore } from 'vs/platform/terminal/common/capabilities/terminalCapabilityStore';\nimport { ITerminalLogService } from 'vs/platform/terminal/common/terminal';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { TestThemeService } from 'vs/platform/theme/test/common/testThemeService';\nimport { TerminalConfigHelper } from 'vs/workbench/contrib/terminal/browser/terminalConfigHelper';\nimport { writeP } from 'vs/workbench/contrib/terminal/browser/terminalTestHelpers';\nimport { XtermTerminal } from 'vs/workbench/contrib/terminal/browser/xterm/xtermTerminal';\nimport { ITerminalConfiguration } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { BufferContentTracker } from 'vs/workbench/contrib/terminalContrib/accessibility/browser/bufferContentTracker';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { TestLifecycleService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { TestLoggerService } from 'vs/workbench/test/common/workbenchTestServices';\nimport type { Terminal } from 'xterm';\n\nconst defaultTerminalConfig: Partial<ITerminalConfiguration> = {\n\tfontFamily: 'monospace',\n\tfontWeight: 'normal',\n\tfontWeightBold: 'normal',\n\tgpuAcceleration: 'off',\n\tscrollback: 1000,\n\tfastScrollSensitivity: 2,\n\tmouseWheelScrollSensitivity: 1,\n\tunicodeVersion: '6'\n};\n\nsuite('Buffer Content Tracker', () => {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet instantiationService: TestInstantiationService;\n\tlet configurationService: TestConfigurationService;\n\tlet themeService: TestThemeService;\n\tlet xterm: XtermTerminal;\n\tlet capabilities: TerminalCapabilityStore;\n\tlet configHelper: TerminalConfigHelper;\n\tlet bufferTracker: BufferContentTracker;\n\tconst prompt = 'vscode-git:(prompt/more-tests)';\n\tconst promptPlusData = 'vscode-git:(prompt/more-tests) ' + 'some data';\n\n\tsetup(async () => {\n\t\tconfigurationService = new TestConfigurationService({ terminal: { integrated: defaultTerminalConfig } });\n\t\tinstantiationService = store.add(new TestInstantiationService());\n\t\tthemeService = new TestThemeService();\n\t\tinstantiationService.stub(IConfigurationService, configurationService);\n\t\tinstantiationService.stub(IThemeService, themeService);\n\t\tinstantiationService.stub(ITerminalLogService, new NullLogService());\n\t\tinstantiationService.stub(ILoggerService, store.add(new TestLoggerService()));\n\t\tinstantiationService.stub(IContextMenuService, store.add(instantiationService.createInstance(ContextMenuService)));\n\t\tinstantiationService.stub(ILifecycleService, store.add(new TestLifecycleService()));\n\t\tinstantiationService.stub(IContextKeyService, store.add(new MockContextKeyService()));\n\t\tconfigHelper = store.add(instantiationService.createInstance(TerminalConfigHelper));\n\t\tcapabilities = store.add(new TerminalCapabilityStore());\n\t\tif (!isWindows) {\n\t\t\tcapabilities.add(TerminalCapability.NaiveCwdDetection, null!);\n\t\t}\n\t\tconst TerminalCtor = (await importAMDNodeModule<typeof import('xterm')>('xterm', 'lib/xterm.js')).Terminal;\n\t\txterm = store.add(instantiationService.createInstance(XtermTerminal, TerminalCtor, configHelper, 80, 30, { getBackgroundColor: () => undefined }, capabilities, '', new MockContextKeyService().createKey('', true)!, true));\n\t\tconst container = document.createElement('div');\n\t\txterm.raw.open(container);\n\t\tconfigurationService = new TestConfigurationService({ terminal: { integrated: { tabs: { separator: ' - ', title: '${cwd}', description: '${cwd}' } } } });\n\t\tbufferTracker = store.add(instantiationService.createInstance(BufferContentTracker, xterm));\n\t});\n\n\ttest('should not clear the prompt line', async () => {\n\t\tassert.strictEqual(bufferTracker.lines.length, 0);\n\t\tawait writeP(xterm.raw, prompt);\n\t\txterm.clearBuffer();\n\t\tbufferTracker.update();\n\t\tassert.deepStrictEqual(bufferTracker.lines, [prompt]);\n\t});\n\ttest('repeated updates should not change the content', async () => {\n\t\tassert.strictEqual(bufferTracker.lines.length, 0);\n\t\tawait writeP(xterm.raw, prompt);\n\t\tbufferTracker.update();\n\t\tassert.deepStrictEqual(bufferTracker.lines, [prompt]);\n\t\tbufferTracker.update();\n\t\tassert.deepStrictEqual(bufferTracker.lines, [prompt]);\n\t\tbufferTracker.update();\n\t\tassert.deepStrictEqual(bufferTracker.lines, [prompt]);\n\t});\n\ttest('should add lines in the viewport and scrollback', async () => {\n\t\tawait writeAndAssertBufferState(promptPlusData, 38, xterm.raw, bufferTracker);\n\t});\n\ttest('should add lines in the viewport and full scrollback', async () => {\n\t\tawait writeAndAssertBufferState(promptPlusData, 1030, xterm.raw, bufferTracker);\n\t});\n\ttest('should refresh viewport', async () => {\n\t\tawait writeAndAssertBufferState(promptPlusData, 6, xterm.raw, bufferTracker);\n\t\tawait writeP(xterm.raw, '\\x1b[3Ainserteddata');\n\t\tbufferTracker.update();\n\t\tassert.deepStrictEqual(bufferTracker.lines, [promptPlusData, promptPlusData, `${promptPlusData}inserteddata`, promptPlusData, promptPlusData, promptPlusData]);\n\t});\n\ttest('should refresh viewport with full scrollback', async () => {\n\t\tconst content = `${prompt}\\r\\n`.repeat(1030).trimEnd();\n\t\tawait writeP(xterm.raw, content);\n\t\tbufferTracker.update();\n\t\tawait writeP(xterm.raw, '\\x1b[4Ainsertion');\n\t\tbufferTracker.update();\n\t\tconst expected = content.split('\\r\\n');\n\t\texpected[1025] = `${prompt}insertion`;\n\t\tassert.deepStrictEqual(bufferTracker.lines[1025], `${prompt}insertion`);\n\t});\n\ttest('should cap the size of the cached lines, removing old lines in favor of new lines', async () => {\n\t\tconst content = `${prompt}\\r\\n`.repeat(1036).trimEnd();\n\t\tawait writeP(xterm.raw, content);\n\t\tbufferTracker.update();\n\t\tconst expected = content.split('\\r\\n');\n\t\t// delete the 6 lines that should be trimmed\n\t\tfor (let i = 0; i < 6; i++) {\n\t\t\texpected.pop();\n\t\t}\n\t\t// insert a new character\n\t\tawait writeP(xterm.raw, '\\x1b[2Ainsertion');\n\t\tbufferTracker.update();\n\t\texpected[1027] = `${prompt}insertion`;\n\t\tassert.strictEqual(bufferTracker.lines.length, expected.length);\n\t\tassert.deepStrictEqual(bufferTracker.lines, expected);\n\t});\n});\n\nasync function writeAndAssertBufferState(data: string, rows: number, terminal: Terminal, bufferTracker: BufferContentTracker): Promise<void> {\n\tconst content = `${data}\\r\\n`.repeat(rows).trimEnd();\n\tawait writeP(terminal, content);\n\tbufferTracker.update();\n\tassert.strictEqual(bufferTracker.lines.length, rows);\n\tassert.deepStrictEqual(bufferTracker.lines, content.split('\\r\\n'));\n}\n"]}