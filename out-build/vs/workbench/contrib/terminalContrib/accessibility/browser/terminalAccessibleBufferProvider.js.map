{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminalContrib/accessibility/browser/terminalAccessibleBufferProvider.ts"],"names":[],"mappings":"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","file":"terminalAccessibleBufferProvider.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { TerminalCapability, ITerminalCommand } from 'vs/platform/terminal/common/capabilities/capabilities';\nimport { ICurrentPartialCommand } from 'vs/platform/terminal/common/capabilities/commandDetectionCapability';\nimport { AccessibilityVerbositySettingId } from 'vs/workbench/contrib/accessibility/browser/accessibilityConfiguration';\nimport { AccessibleViewType, IAccessibleContentProvider, IAccessibleViewOptions, IAccessibleViewSymbol } from 'vs/workbench/contrib/accessibility/browser/accessibleView';\nimport { IXtermTerminal, ITerminalInstance, ITerminalService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { BufferContentTracker } from 'vs/workbench/contrib/terminalContrib/accessibility/browser/bufferContentTracker';\nimport type { Terminal } from 'xterm';\n\nexport class TerminalAccessibleBufferProvider extends DisposableStore implements IAccessibleContentProvider {\n\toptions: IAccessibleViewOptions = { type: AccessibleViewType.View, language: 'terminal', positionBottom: true };\n\tverbositySettingKey = AccessibilityVerbositySettingId.Terminal;\n\tprivate _xterm: IXtermTerminal & { raw: Terminal } | undefined;\n\tconstructor(\n\t\tprivate readonly _instance: Pick<ITerminalInstance, 'onDidRunText' | 'focus' | 'shellType' | 'capabilities' | 'onDidRequestFocus' | 'resource'>,\n\t\tprivate _bufferTracker: BufferContentTracker,\n\t\t@IModelService _modelService: IModelService,\n\t\t@IConfigurationService _configurationService: IConfigurationService,\n\t\t@IContextKeyService _contextKeyService: IContextKeyService,\n\t\t@ITerminalService _terminalService: ITerminalService,\n\t\t@IConfigurationService configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\t}\n\n\tonClose() {\n\t\tthis._instance.focus();\n\t}\n\tregisterListeners(): void {\n\t\tif (!this._xterm) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprovideContent(): string {\n\t\tthis._bufferTracker.update();\n\t\treturn this._bufferTracker.lines.join('\\n');\n\t}\n\n\tgetSymbols(): IAccessibleViewSymbol[] {\n\t\tconst commands = this._getCommandsWithEditorLine() ?? [];\n\t\tconst symbols: IAccessibleViewSymbol[] = [];\n\t\tfor (const command of commands) {\n\t\t\tconst label = command.command.command;\n\t\t\tif (label) {\n\t\t\t\tsymbols.push({\n\t\t\t\t\tlabel,\n\t\t\t\t\tlineNumber: command.lineNumber\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn symbols;\n\t}\n\n\tprivate _getCommandsWithEditorLine(): ICommandWithEditorLine[] | undefined {\n\t\tconst capability = this._instance.capabilities.get(TerminalCapability.CommandDetection);\n\t\tconst commands = capability?.commands;\n\t\tconst currentCommand = capability?.currentCommand;\n\t\tif (!commands?.length) {\n\t\t\treturn;\n\t\t}\n\t\tconst result: ICommandWithEditorLine[] = [];\n\t\tfor (const command of commands) {\n\t\t\tconst lineNumber = this._getEditorLineForCommand(command);\n\t\t\tif (lineNumber === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tresult.push({ command, lineNumber });\n\t\t}\n\t\tif (currentCommand) {\n\t\t\tconst lineNumber = this._getEditorLineForCommand(currentCommand);\n\t\t\tif (lineNumber !== undefined) {\n\t\t\t\tresult.push({ command: currentCommand, lineNumber });\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\tprivate _getEditorLineForCommand(command: ITerminalCommand | ICurrentPartialCommand): number | undefined {\n\t\tlet line: number | undefined;\n\t\tif ('marker' in command) {\n\t\t\tline = command.marker?.line;\n\t\t} else if ('commandStartMarker' in command) {\n\t\t\tline = command.commandStartMarker?.line;\n\t\t}\n\t\tif (line === undefined || line < 0) {\n\t\t\treturn;\n\t\t}\n\t\tline = this._bufferTracker.bufferToEditorLineMapping.get(line);\n\t\tif (line === undefined) {\n\t\t\treturn;\n\t\t}\n\t\treturn line + 1;\n\t}\n}\nexport interface ICommandWithEditorLine { command: ITerminalCommand | ICurrentPartialCommand; lineNumber: number }\n"]}