{"version":3,"sources":["vs/workbench/contrib/terminalContrib/accessibility/browser/terminal.accessibility.contribution.ts"],"names":[],"mappings":"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","file":"terminal.accessibility.contribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { localize } from 'vs/nls';\nimport { CONTEXT_ACCESSIBILITY_MODE_ENABLED } from 'vs/platform/accessibility/common/accessibility';\nimport { Action2, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { ContextKeyExpr, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { ITerminalCommand, TerminalCapability } from 'vs/platform/terminal/common/capabilities/capabilities';\nimport { ICurrentPartialCommand } from 'vs/platform/terminal/common/capabilities/commandDetectionCapability';\nimport { AccessibleViewProviderId, accessibleViewCurrentProviderId, accessibleViewIsShown } from 'vs/workbench/contrib/accessibility/browser/accessibilityConfiguration';\nimport { IAccessibleViewService, NavigationType } from 'vs/workbench/contrib/accessibility/browser/accessibleView';\nimport { AccessibilityHelpAction, AccessibleViewAction } from 'vs/workbench/contrib/accessibility/browser/accessibleViewActions';\nimport { ITerminalContribution, ITerminalInstance, ITerminalService, IXtermTerminal } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { registerTerminalAction } from 'vs/workbench/contrib/terminal/browser/terminalActions';\nimport { registerTerminalContribution } from 'vs/workbench/contrib/terminal/browser/terminalExtensions';\nimport { TerminalWidgetManager } from 'vs/workbench/contrib/terminal/browser/widgets/widgetManager';\nimport { ITerminalProcessManager, TerminalCommandId } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { TerminalContextKeys } from 'vs/workbench/contrib/terminal/common/terminalContextKey';\nimport { BufferContentTracker } from 'vs/workbench/contrib/terminalContrib/accessibility/browser/bufferContentTracker';\nimport { TerminalAccessibleContentProvider } from 'vs/workbench/contrib/terminalContrib/accessibility/browser/terminalAccessibilityHelp';\nimport { TextAreaSyncAddon } from 'vs/workbench/contrib/terminalContrib/accessibility/browser/textAreaSyncAddon';\nimport type { Terminal } from 'xterm';\nimport { Position } from 'vs/editor/common/core/position';\nimport { ICommandWithEditorLine, TerminalAccessibleBufferProvider } from 'vs/workbench/contrib/terminalContrib/accessibility/browser/terminalAccessibleBufferProvider';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TerminalSettingId } from 'vs/platform/terminal/common/terminal';\nimport { Event } from 'vs/base/common/event';\n\nclass TextAreaSyncContribution extends DisposableStore implements ITerminalContribution {\n\tstatic readonly ID = 'terminal.textAreaSync';\n\tstatic get(instance: ITerminalInstance): TextAreaSyncContribution | null {\n\t\treturn instance.getContribution<TextAreaSyncContribution>(TextAreaSyncContribution.ID);\n\t}\n\tconstructor(\n\t\tprivate readonly _instance: ITerminalInstance,\n\t\tprocessManager: ITerminalProcessManager,\n\t\twidgetManager: TerminalWidgetManager,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService\n\t) {\n\t\tsuper();\n\t}\n\txtermReady(xterm: IXtermTerminal & { raw: Terminal }): void {\n\t\tconst addon = this._instantiationService.createInstance(TextAreaSyncAddon, this._instance.capabilities);\n\t\txterm.raw.loadAddon(addon);\n\t\taddon.activate(xterm.raw);\n\t}\n}\nregisterTerminalContribution(TextAreaSyncContribution.ID, TextAreaSyncContribution);\n\n\nexport class TerminalAccessibleViewContribution extends Disposable implements ITerminalContribution {\n\tstatic readonly ID = 'terminal.accessibleBufferProvider';\n\tstatic get(instance: ITerminalInstance): TerminalAccessibleViewContribution | null {\n\t\treturn instance.getContribution<TerminalAccessibleViewContribution>(TerminalAccessibleViewContribution.ID);\n\t}\n\tprivate _bufferTracker: BufferContentTracker | undefined;\n\tprivate _bufferProvider: TerminalAccessibleBufferProvider | undefined;\n\tprivate _xterm: Pick<IXtermTerminal, 'shellIntegration' | 'getFont'> & { raw: Terminal } | undefined;\n\tconstructor(\n\t\tprivate readonly _instance: ITerminalInstance,\n\t\tprocessManager: ITerminalProcessManager,\n\t\twidgetManager: TerminalWidgetManager,\n\t\t@IAccessibleViewService private readonly _accessibleViewService: IAccessibleViewService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ITerminalService private readonly _terminalService: ITerminalService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService) {\n\t\tsuper();\n\t\tthis._register(AccessibleViewAction.addImplementation(90, 'terminal', () => {\n\t\t\tif (this._terminalService.activeInstance !== this._instance) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis.show();\n\t\t\treturn true;\n\t\t}, TerminalContextKeys.focus));\n\t\tthis._register(_instance.onDidRunText(() => {\n\t\t\tconst focusAfterRun = configurationService.getValue(TerminalSettingId.FocusAfterRun);\n\t\t\tif (focusAfterRun === 'terminal') {\n\t\t\t\t_instance.focus(true);\n\t\t\t} else if (focusAfterRun === 'accessible-buffer') {\n\t\t\t\tthis.show();\n\t\t\t}\n\t\t}));\n\t}\n\txtermReady(xterm: IXtermTerminal & { raw: Terminal }): void {\n\t\tconst addon = this._instantiationService.createInstance(TextAreaSyncAddon, this._instance.capabilities);\n\t\txterm.raw.loadAddon(addon);\n\t\taddon.activate(xterm.raw);\n\t\tthis._xterm = xterm;\n\t\tthis._register(this._xterm.raw.onWriteParsed(async () => {\n\t\t\tif (this._isTerminalAccessibleViewOpen() && this._xterm!.raw.buffer.active.baseY === 0) {\n\t\t\t\tthis.show();\n\t\t\t}\n\t\t}));\n\n\t\tconst onRequestUpdateEditor = Event.latch(this._xterm.raw.onScroll);\n\t\tthis._register(onRequestUpdateEditor(() => {\n\t\t\tif (this._isTerminalAccessibleViewOpen()) {\n\t\t\t\tthis.show();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate _isTerminalAccessibleViewOpen(): boolean {\n\t\treturn accessibleViewCurrentProviderId.getValue(this._contextKeyService) === AccessibleViewProviderId.Terminal;\n\t}\n\n\tshow(): void {\n\t\tif (!this._xterm) {\n\t\t\treturn;\n\t\t}\n\t\tif (!this._bufferTracker) {\n\t\t\tthis._bufferTracker = this._register(this._instantiationService.createInstance(BufferContentTracker, this._xterm));\n\t\t}\n\t\tif (!this._bufferProvider) {\n\t\t\tthis._bufferProvider = this._register(this._instantiationService.createInstance(TerminalAccessibleBufferProvider, this._instance, this._bufferTracker));\n\t\t}\n\t\tthis._accessibleViewService.show(this._bufferProvider);\n\t}\n\tnavigateToCommand(type: NavigationType): void {\n\t\tconst currentLine = this._accessibleViewService.getPosition()?.lineNumber || this._accessibleViewService.getLastPosition()?.lineNumber;\n\t\tconst commands = this._getCommandsWithEditorLine();\n\t\tif (!commands?.length || !currentLine) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst filteredCommands = type === NavigationType.Previous ? commands.filter(c => c.lineNumber < currentLine).sort((a, b) => b.lineNumber - a.lineNumber) : commands.filter(c => c.lineNumber > currentLine).sort((a, b) => a.lineNumber - b.lineNumber);\n\t\tif (!filteredCommands.length) {\n\t\t\treturn;\n\t\t}\n\t\tthis._accessibleViewService.setPosition(new Position(filteredCommands[0].lineNumber, 1), true);\n\t}\n\n\tprivate _getCommandsWithEditorLine(): ICommandWithEditorLine[] | undefined {\n\t\tconst capability = this._instance.capabilities.get(TerminalCapability.CommandDetection);\n\t\tconst commands = capability?.commands;\n\t\tconst currentCommand = capability?.currentCommand;\n\t\tif (!commands?.length) {\n\t\t\treturn;\n\t\t}\n\t\tconst result: ICommandWithEditorLine[] = [];\n\t\tfor (const command of commands) {\n\t\t\tconst lineNumber = this._getEditorLineForCommand(command);\n\t\t\tif (!lineNumber) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tresult.push({ command, lineNumber });\n\t\t}\n\t\tif (currentCommand) {\n\t\t\tconst lineNumber = this._getEditorLineForCommand(currentCommand);\n\t\t\tif (!!lineNumber) {\n\t\t\t\tresult.push({ command: currentCommand, lineNumber });\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _getEditorLineForCommand(command: ITerminalCommand | ICurrentPartialCommand): number | undefined {\n\t\tif (!this._bufferTracker) {\n\t\t\treturn;\n\t\t}\n\t\tlet line: number | undefined;\n\t\tif ('marker' in command) {\n\t\t\tline = command.marker?.line;\n\t\t} else if ('commandStartMarker' in command) {\n\t\t\tline = command.commandStartMarker?.line;\n\t\t}\n\t\tif (line === undefined || line < 0) {\n\t\t\treturn;\n\t\t}\n\t\tline = this._bufferTracker.bufferToEditorLineMapping.get(line);\n\t\tif (line === undefined) {\n\t\t\treturn;\n\t\t}\n\t\treturn line + 1;\n\t}\n\n}\nregisterTerminalContribution(TerminalAccessibleViewContribution.ID, TerminalAccessibleViewContribution);\n\nexport class TerminalAccessibilityHelpContribution extends Disposable {\n\tstatic ID: 'terminalAccessibilityHelpContribution';\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis._register(AccessibilityHelpAction.addImplementation(105, 'terminal', async accessor => {\n\t\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\t\tconst terminalService = accessor.get(ITerminalService);\n\t\t\tconst accessibleViewService = accessor.get(IAccessibleViewService);\n\t\t\tconst instance = await terminalService.getActiveOrCreateInstance();\n\t\t\tawait terminalService.revealActiveTerminal();\n\t\t\tconst terminal = instance?.xterm;\n\t\t\tif (!terminal) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\taccessibleViewService.show(instantiationService.createInstance(TerminalAccessibleContentProvider, instance, terminal));\n\t\t}, ContextKeyExpr.or(TerminalContextKeys.focus, ContextKeyExpr.and(accessibleViewIsShown, ContextKeyExpr.equals(accessibleViewCurrentProviderId.key, AccessibleViewProviderId.Terminal)))));\n\t}\n}\nregisterTerminalContribution(TerminalAccessibilityHelpContribution.ID, TerminalAccessibilityHelpContribution);\n\n\nclass FocusAccessibleBufferAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: TerminalCommandId.FocusAccessibleBuffer,\n\t\t\ttitle: { value: localize('workbench.action.terminal.focusAccessibleBuffer', 'Focus Accessible Buffer'), original: 'Focus Accessible Buffer' },\n\t\t\tprecondition: ContextKeyExpr.or(TerminalContextKeys.processSupported, TerminalContextKeys.terminalHasBeenCreated),\n\t\t\tkeybinding: [\n\t\t\t\t{\n\t\t\t\t\tprimary: KeyMod.Alt | KeyCode.F2,\n\t\t\t\t\tsecondary: [KeyMod.CtrlCmd | KeyCode.UpArrow],\n\t\t\t\t\tlinux: {\n\t\t\t\t\t\tprimary: KeyMod.Alt | KeyCode.F2 | KeyMod.Shift,\n\t\t\t\t\t\tsecondary: [KeyMod.CtrlCmd | KeyCode.UpArrow]\n\t\t\t\t\t},\n\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\t\twhen: ContextKeyExpr.and(CONTEXT_ACCESSIBILITY_MODE_ENABLED, TerminalContextKeys.focus)\n\t\t\t\t}\n\t\t\t]\n\t\t});\n\t}\n\toverride async run(accessor: ServicesAccessor, ...args: any[]): Promise<void> {\n\t\tconst terminalService = accessor.get(ITerminalService);\n\t\tconst terminal = await terminalService.getActiveOrCreateInstance();\n\t\tif (!terminal?.xterm) {\n\t\t\treturn;\n\t\t}\n\t\tTerminalAccessibleViewContribution.get(terminal)?.show();\n\t}\n}\nregisterAction2(FocusAccessibleBufferAction);\n\nregisterTerminalAction({\n\tid: TerminalCommandId.AccessibleBufferGoToNextCommand,\n\ttitle: { value: localize('workbench.action.terminal.accessibleBufferGoToNextCommand', 'Accessible Buffer Go to Next Command'), original: 'Accessible Buffer Go to Next Command' },\n\tprecondition: ContextKeyExpr.or(TerminalContextKeys.processSupported, TerminalContextKeys.terminalHasBeenCreated, ContextKeyExpr.and(accessibleViewIsShown, ContextKeyExpr.equals(accessibleViewCurrentProviderId.key, AccessibleViewProviderId.Terminal))),\n\tkeybinding: [\n\t\t{\n\t\t\tprimary: KeyMod.Alt | KeyCode.DownArrow,\n\t\t\twhen: ContextKeyExpr.and(ContextKeyExpr.and(accessibleViewIsShown, ContextKeyExpr.equals(accessibleViewCurrentProviderId.key, AccessibleViewProviderId.Terminal))),\n\t\t\tweight: KeybindingWeight.WorkbenchContrib + 2\n\t\t}\n\t],\n\trun: async (c) => {\n\t\tconst instance = await c.service.getActiveOrCreateInstance();\n\t\tawait c.service.revealActiveTerminal();\n\t\tif (!instance) {\n\t\t\treturn;\n\t\t}\n\t\tawait TerminalAccessibleViewContribution.get(instance)?.navigateToCommand(NavigationType.Next);\n\t}\n});\n\n\nregisterTerminalAction({\n\tid: TerminalCommandId.AccessibleBufferGoToPreviousCommand,\n\ttitle: { value: localize('workbench.action.terminal.accessibleBufferGoToPreviousCommand', 'Accessible Buffer Go to Previous Command'), original: 'Accessible Buffer Go to Previous Command' },\n\tprecondition: ContextKeyExpr.and(ContextKeyExpr.or(TerminalContextKeys.processSupported, TerminalContextKeys.terminalHasBeenCreated), ContextKeyExpr.and(accessibleViewIsShown, ContextKeyExpr.equals(accessibleViewCurrentProviderId.key, AccessibleViewProviderId.Terminal))),\n\tkeybinding: [\n\t\t{\n\t\t\tprimary: KeyMod.Alt | KeyCode.UpArrow,\n\t\t\twhen: ContextKeyExpr.and(ContextKeyExpr.and(accessibleViewIsShown, ContextKeyExpr.equals(accessibleViewCurrentProviderId.key, AccessibleViewProviderId.Terminal))),\n\t\t\tweight: KeybindingWeight.WorkbenchContrib + 2\n\t\t}\n\t],\n\trun: async (c) => {\n\t\tconst instance = await c.service.getActiveOrCreateInstance();\n\t\tawait c.service.revealActiveTerminal();\n\t\tif (!instance) {\n\t\t\treturn;\n\t\t}\n\t\tawait TerminalAccessibleViewContribution.get(instance)?.navigateToCommand(NavigationType.Previous);\n\t}\n});\n"]}