{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminalContrib/quickFix/test/browser/quickFixAddon.test.ts"],"names":[],"mappings":"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","file":"quickFixAddon.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { strictEqual } from 'assert';\nimport { IAction } from 'vs/base/common/actions';\nimport { isWindows } from 'vs/base/common/platform';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { ContextMenuService } from 'vs/platform/contextview/browser/contextMenuService';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { ILogService, NullLogService } from 'vs/platform/log/common/log';\nimport { ITerminalCommand, TerminalCapability } from 'vs/platform/terminal/common/capabilities/capabilities';\nimport { CommandDetectionCapability } from 'vs/platform/terminal/common/capabilities/commandDetectionCapability';\nimport { TerminalCapabilityStore } from 'vs/platform/terminal/common/capabilities/terminalCapabilityStore';\nimport { gitSimilar, freePort, FreePortOutputRegex, gitCreatePr, GitCreatePrOutputRegex, GitPushOutputRegex, gitPushSetUpstream, GitSimilarOutputRegex, gitTwoDashes, GitTwoDashesRegex, pwshUnixCommandNotFoundError, PwshUnixCommandNotFoundErrorOutputRegex, pwshGeneralError, PwshGeneralErrorOutputRegex } from 'vs/workbench/contrib/terminalContrib/quickFix/browser/terminalQuickFixBuiltinActions';\nimport { TerminalQuickFixAddon, getQuickFixesForCommand } from 'vs/workbench/contrib/terminalContrib/quickFix/browser/quickFixAddon';\nimport { URI } from 'vs/base/common/uri';\nimport type { Terminal } from 'xterm';\nimport { Event } from 'vs/base/common/event';\nimport { LabelService } from 'vs/workbench/services/label/common/labelService';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { OpenerService } from 'vs/editor/browser/services/openerService';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { TestStorageService } from 'vs/workbench/test/common/workbenchTestServices';\nimport { ITerminalQuickFixService } from 'vs/workbench/contrib/terminalContrib/quickFix/browser/quickFix';\nimport { ITerminalOutputMatcher } from 'vs/platform/terminal/common/terminal';\nimport { importAMDNodeModule } from 'vs/amdX';\nimport { TestCommandService } from 'vs/editor/test/browser/editorTestServices';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nsuite('QuickFixAddon', () => {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet quickFixAddon: TerminalQuickFixAddon;\n\tlet commandDetection: CommandDetectionCapability;\n\tlet commandService: TestCommandService;\n\tlet openerService: OpenerService;\n\tlet labelService: LabelService;\n\tlet terminal: Terminal;\n\tlet instantiationService: TestInstantiationService;\n\n\tsetup(async () => {\n\t\tinstantiationService = store.add(new TestInstantiationService());\n\t\tconst TerminalCtor = (await importAMDNodeModule<typeof import('xterm')>('xterm', 'lib/xterm.js')).Terminal;\n\t\tterminal = store.add(new TerminalCtor({\n\t\t\tallowProposedApi: true,\n\t\t\tcols: 80,\n\t\t\trows: 30\n\t\t}));\n\t\tinstantiationService.stub(IStorageService, store.add(new TestStorageService()));\n\t\tinstantiationService.stub(ITerminalQuickFixService, {\n\t\t\tonDidRegisterProvider: Event.None,\n\t\t\tonDidUnregisterProvider: Event.None,\n\t\t\tonDidRegisterCommandSelector: Event.None,\n\t\t\textensionQuickFixes: Promise.resolve([])\n\t\t} as Partial<ITerminalQuickFixService>);\n\t\tinstantiationService.stub(IConfigurationService, new TestConfigurationService());\n\t\tinstantiationService.stub(ILabelService, {} as Partial<ILabelService>);\n\t\tconst capabilities = store.add(new TerminalCapabilityStore());\n\t\tinstantiationService.stub(ILogService, new NullLogService());\n\t\tcommandDetection = store.add(instantiationService.createInstance(CommandDetectionCapability, terminal));\n\t\tcapabilities.add(TerminalCapability.CommandDetection, commandDetection);\n\t\tinstantiationService.stub(IContextMenuService, store.add(instantiationService.createInstance(ContextMenuService)));\n\t\tinstantiationService.stub(IOpenerService, {} as Partial<IOpenerService>);\n\t\tcommandService = new TestCommandService(instantiationService);\n\n\t\tquickFixAddon = instantiationService.createInstance(TerminalQuickFixAddon, [], capabilities);\n\t\tterminal.loadAddon(quickFixAddon);\n\t});\n\n\tsuite('registerCommandFinishedListener & getMatchActions', () => {\n\t\tsuite('gitSimilarCommand', () => {\n\t\t\tconst expectedMap = new Map();\n\t\t\tconst command = `git sttatus`;\n\t\t\tlet output = `git: 'sttatus' is not a git command. See 'git --help'.\n\n\t\t\tThe most similar command is\n\t\t\tstatus`;\n\t\t\tconst exitCode = 1;\n\t\t\tconst actions = [{\n\t\t\t\tid: 'Git Similar',\n\t\t\t\tenabled: true,\n\t\t\t\tlabel: 'Run: git status',\n\t\t\t\ttooltip: 'Run: git status',\n\t\t\t\tcommand: 'git status'\n\t\t\t}];\n\t\t\tconst outputLines = output.split('\\n');\n\t\t\tsetup(() => {\n\t\t\t\tconst command = gitSimilar();\n\t\t\t\texpectedMap.set(command.commandLineMatcher.toString(), [command]);\n\t\t\t\tquickFixAddon.registerCommandFinishedListener(command);\n\t\t\t});\n\t\t\tsuite('returns undefined when', () => {\n\t\t\t\ttest('output does not match', async () => {\n\t\t\t\t\tstrictEqual(await (getQuickFixesForCommand([], terminal, createCommand(command, `invalid output`, GitSimilarOutputRegex, exitCode, [`invalid output`]), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t\t});\n\t\t\t\ttest('command does not match', async () => {\n\t\t\t\t\tstrictEqual(await (getQuickFixesForCommand([], terminal, createCommand(`gt sttatus`, output, GitSimilarOutputRegex, exitCode, outputLines), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t\t});\n\t\t\t});\n\t\t\tsuite('returns actions when', () => {\n\t\t\t\ttest('expected unix exit code', async () => {\n\t\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand(command, output, GitSimilarOutputRegex, exitCode, outputLines), expectedMap, commandService, openerService, labelService)), actions);\n\t\t\t\t});\n\t\t\t\ttest('matching exit status', async () => {\n\t\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand(command, output, GitSimilarOutputRegex, 2, outputLines), expectedMap, commandService, openerService, labelService)), actions);\n\t\t\t\t});\n\t\t\t});\n\t\t\tsuite('returns match', () => {\n\t\t\t\ttest('returns match', async () => {\n\t\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand(command, output, GitSimilarOutputRegex, exitCode, outputLines), expectedMap, commandService, openerService, labelService)), actions);\n\t\t\t\t});\n\n\t\t\t\ttest('returns multiple match', async () => {\n\t\t\t\t\toutput = `git: 'pu' is not a git command. See 'git --help'.\n\t\t\t\tThe most similar commands are\n\t\t\t\t\t\tpull\n\t\t\t\t\t\tpush`;\n\t\t\t\t\tconst actions = [{\n\t\t\t\t\t\tid: 'Git Similar',\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tlabel: 'Run: git pull',\n\t\t\t\t\t\ttooltip: 'Run: git pull',\n\t\t\t\t\t\tcommand: 'git pull'\n\t\t\t\t\t}, {\n\t\t\t\t\t\tid: 'Git Similar',\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tlabel: 'Run: git push',\n\t\t\t\t\t\ttooltip: 'Run: git push',\n\t\t\t\t\t\tcommand: 'git push'\n\t\t\t\t\t}];\n\t\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand('git pu', output, GitSimilarOutputRegex, exitCode, output.split('\\n')), expectedMap, commandService, openerService, labelService)), actions);\n\t\t\t\t});\n\t\t\t\ttest('passes any arguments through', async () => {\n\t\t\t\t\toutput = `git: 'checkoutt' is not a git command. See 'git --help'.\n\t\t\t\tThe most similar commands are\n\t\t\t\t\t\tcheckout`;\n\t\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand('git checkoutt .', output, GitSimilarOutputRegex, exitCode, output.split('\\n')), expectedMap, commandService, openerService, labelService)), [{\n\t\t\t\t\t\tid: 'Git Similar',\n\t\t\t\t\t\tenabled: true,\n\t\t\t\t\t\tlabel: 'Run: git checkout .',\n\t\t\t\t\t\ttooltip: 'Run: git checkout .',\n\t\t\t\t\t\tcommand: 'git checkout .'\n\t\t\t\t\t}]);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\tsuite('gitTwoDashes', () => {\n\t\t\tconst expectedMap = new Map();\n\t\t\tconst command = `git add . -all`;\n\t\t\tconst output = 'error: did you mean `--all` (with two dashes)?';\n\t\t\tconst exitCode = 1;\n\t\t\tconst actions = [{\n\t\t\t\tid: 'Git Two Dashes',\n\t\t\t\tenabled: true,\n\t\t\t\tlabel: 'Run: git add . --all',\n\t\t\t\ttooltip: 'Run: git add . --all',\n\t\t\t\tcommand: 'git add . --all'\n\t\t\t}];\n\t\t\tsetup(() => {\n\t\t\t\tconst command = gitTwoDashes();\n\t\t\t\texpectedMap.set(command.commandLineMatcher.toString(), [command]);\n\t\t\t\tquickFixAddon.registerCommandFinishedListener(command);\n\t\t\t});\n\t\t\tsuite('returns undefined when', () => {\n\t\t\t\ttest('output does not match', async () => {\n\t\t\t\t\tstrictEqual((await getQuickFixesForCommand([], terminal, createCommand(command, `invalid output`, GitTwoDashesRegex, exitCode), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t\t});\n\t\t\t\ttest('command does not match', async () => {\n\t\t\t\t\tstrictEqual((await getQuickFixesForCommand([], terminal, createCommand(`gt sttatus`, output, GitTwoDashesRegex, exitCode), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t\t});\n\t\t\t});\n\t\t\tsuite('returns actions when', () => {\n\t\t\t\ttest('expected unix exit code', async () => {\n\t\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand(command, output, GitTwoDashesRegex, exitCode), expectedMap, commandService, openerService, labelService)), actions);\n\t\t\t\t});\n\t\t\t\ttest('matching exit status', async () => {\n\t\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand(command, output, GitTwoDashesRegex, 2), expectedMap, commandService, openerService, labelService)), actions);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\tif (!isWindows) {\n\t\t\tsuite('freePort', () => {\n\t\t\t\tconst expectedMap = new Map();\n\t\t\t\tconst portCommand = `yarn start dev`;\n\t\t\t\tconst output = `yarn run v1.22.17\n\t\t\twarning ../../package.json: No license field\n\t\t\tError: listen EADDRINUSE: address already in use 0.0.0.0:3000\n\t\t\t\tat Server.setupListenHandle [as _listen2] (node:net:1315:16)\n\t\t\t\tat listenInCluster (node:net:1363:12)\n\t\t\t\tat doListen (node:net:1501:7)\n\t\t\t\tat processTicksAndRejections (node:internal/process/task_queues:84:21)\n\t\t\tEmitted 'error' event on WebSocketServer instance at:\n\t\t\t\tat Server.emit (node:events:394:28)\n\t\t\t\tat emitErrorNT (node:net:1342:8)\n\t\t\t\tat processTicksAndRejections (node:internal/process/task_queues:83:21) {\n\t\t\t}\n\t\t\terror Command failed with exit code 1.\n\t\t\tinfo Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.`;\n\t\t\t\tconst actionOptions = [{\n\t\t\t\t\tid: 'Free Port',\n\t\t\t\t\tlabel: 'Free port 3000',\n\t\t\t\t\trun: true,\n\t\t\t\t\ttooltip: 'Free port 3000',\n\t\t\t\t\tenabled: true\n\t\t\t\t}];\n\t\t\t\tsetup(() => {\n\t\t\t\t\tconst command = freePort(() => Promise.resolve());\n\t\t\t\t\texpectedMap.set(command.commandLineMatcher.toString(), [command]);\n\t\t\t\t\tquickFixAddon.registerCommandFinishedListener(command);\n\t\t\t\t});\n\t\t\t\tsuite('returns undefined when', () => {\n\t\t\t\t\ttest('output does not match', async () => {\n\t\t\t\t\t\tstrictEqual((await getQuickFixesForCommand([], terminal, createCommand(portCommand, `invalid output`, FreePortOutputRegex), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t\ttest('returns actions', async () => {\n\t\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand(portCommand, output, FreePortOutputRegex), expectedMap, commandService, openerService, labelService)), actionOptions);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tsuite('gitPushSetUpstream', () => {\n\t\t\tconst expectedMap = new Map();\n\t\t\tconst command = `git push`;\n\t\t\tconst output = `fatal: The current branch test22 has no upstream branch.\n\t\t\tTo push the current branch and set the remote as upstream, use\n\n\t\t\t\tgit push --set-upstream origin test22`;\n\t\t\tconst exitCode = 128;\n\t\t\tconst actions = [{\n\t\t\t\tid: 'Git Push Set Upstream',\n\t\t\t\tenabled: true,\n\t\t\t\tlabel: 'Run: git push --set-upstream origin test22',\n\t\t\t\ttooltip: 'Run: git push --set-upstream origin test22',\n\t\t\t\tcommand: 'git push --set-upstream origin test22'\n\t\t\t}];\n\t\t\tsetup(() => {\n\t\t\t\tconst command = gitPushSetUpstream();\n\t\t\t\texpectedMap.set(command.commandLineMatcher.toString(), [command]);\n\t\t\t\tquickFixAddon.registerCommandFinishedListener(command);\n\t\t\t});\n\t\t\tsuite('returns undefined when', () => {\n\t\t\t\ttest('output does not match', async () => {\n\t\t\t\t\tstrictEqual((await getQuickFixesForCommand([], terminal, createCommand(command, `invalid output`, GitPushOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t\t});\n\t\t\t\ttest('command does not match', async () => {\n\t\t\t\t\tstrictEqual((await getQuickFixesForCommand([], terminal, createCommand(`git status`, output, GitPushOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t\t});\n\t\t\t});\n\t\t\tsuite('returns actions when', () => {\n\t\t\t\ttest('expected unix exit code', async () => {\n\t\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand(command, output, GitPushOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), actions);\n\t\t\t\t});\n\t\t\t\ttest('matching exit status', async () => {\n\t\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand(command, output, GitPushOutputRegex, 2), expectedMap, commandService, openerService, labelService)), actions);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t\tsuite('gitCreatePr', () => {\n\t\t\tconst expectedMap = new Map();\n\t\t\tconst command = `git push`;\n\t\t\tconst output = `Total 0 (delta 0), reused 0 (delta 0), pack-reused 0\n\t\t\tremote:\n\t\t\tremote: Create a pull request for 'test22' on GitHub by visiting:\n\t\t\tremote:      https://github.com/meganrogge/xterm.js/pull/new/test22\n\t\t\tremote:\n\t\t\tTo https://github.com/meganrogge/xterm.js\n\t\t\t * [new branch]        test22 -> test22\n\t\t\tBranch 'test22' set up to track remote branch 'test22' from 'origin'. `;\n\t\t\tconst exitCode = 0;\n\t\t\tconst actions = [{\n\t\t\t\tid: 'Git Create Pr',\n\t\t\t\tenabled: true,\n\t\t\t\tlabel: 'Open: https://github.com/meganrogge/xterm.js/pull/new/test22',\n\t\t\t\ttooltip: 'Open: https://github.com/meganrogge/xterm.js/pull/new/test22',\n\t\t\t\turi: URI.parse('https://github.com/meganrogge/xterm.js/pull/new/test22')\n\t\t\t}];\n\t\t\tsetup(() => {\n\t\t\t\tconst command = gitCreatePr();\n\t\t\t\texpectedMap.set(command.commandLineMatcher.toString(), [command]);\n\t\t\t\tquickFixAddon.registerCommandFinishedListener(command);\n\t\t\t});\n\t\t\tsuite('returns undefined when', () => {\n\t\t\t\ttest('output does not match', async () => {\n\t\t\t\t\tstrictEqual((await getQuickFixesForCommand([], terminal, createCommand(command, `invalid output`, GitCreatePrOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t\t});\n\t\t\t\ttest('command does not match', async () => {\n\t\t\t\t\tstrictEqual((await getQuickFixesForCommand([], terminal, createCommand(`git status`, output, GitCreatePrOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t\t});\n\t\t\t\ttest('failure exit status', async () => {\n\t\t\t\t\tstrictEqual((await getQuickFixesForCommand([], terminal, createCommand(command, output, GitCreatePrOutputRegex, 2), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t\t});\n\t\t\t});\n\t\t\tsuite('returns actions when', () => {\n\t\t\t\ttest('expected unix exit code', async () => {\n\t\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand(command, output, GitCreatePrOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), actions);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t});\n\tsuite('gitPush - multiple providers', () => {\n\t\tconst expectedMap = new Map();\n\t\tconst command = `git push`;\n\t\tconst output = `fatal: The current branch test22 has no upstream branch.\n\t\tTo push the current branch and set the remote as upstream, use\n\n\t\t\tgit push --set-upstream origin test22`;\n\t\tconst exitCode = 128;\n\t\tconst actions = [{\n\t\t\tid: 'Git Push Set Upstream',\n\t\t\tenabled: true,\n\t\t\tlabel: 'Run: git push --set-upstream origin test22',\n\t\t\ttooltip: 'Run: git push --set-upstream origin test22',\n\t\t\tcommand: 'git push --set-upstream origin test22'\n\t\t}];\n\t\tsetup(() => {\n\t\t\tconst pushCommand = gitPushSetUpstream();\n\t\t\tconst prCommand = gitCreatePr();\n\t\t\tquickFixAddon.registerCommandFinishedListener(prCommand);\n\t\t\texpectedMap.set(pushCommand.commandLineMatcher.toString(), [pushCommand, prCommand]);\n\t\t});\n\t\tsuite('returns undefined when', () => {\n\t\t\ttest('output does not match', async () => {\n\t\t\t\tstrictEqual((await getQuickFixesForCommand([], terminal, createCommand(command, `invalid output`, GitPushOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t});\n\t\t\ttest('command does not match', async () => {\n\t\t\t\tstrictEqual((await getQuickFixesForCommand([], terminal, createCommand(`git status`, output, GitPushOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t});\n\t\t});\n\t\tsuite('returns actions when', () => {\n\t\t\ttest('expected unix exit code', async () => {\n\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand(command, output, GitPushOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), actions);\n\t\t\t});\n\t\t\ttest('matching exit status', async () => {\n\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand(command, output, GitPushOutputRegex, 2), expectedMap, commandService, openerService, labelService)), actions);\n\t\t\t});\n\t\t});\n\t});\n\tsuite('pwsh feedback providers', () => {\n\t\tsuite('General', () => {\n\t\t\tconst expectedMap = new Map();\n\t\t\tconst command = `not important`;\n\t\t\tconst output = [\n\t\t\t\t`...`,\n\t\t\t\t``,\n\t\t\t\t`Suggestion [General]:`,\n\t\t\t\t`  The most similar commands are: python3, python3m, pamon, python3.6, rtmon, echo, pushd, etsn, pwsh, pwconv.`,\n\t\t\t\t``,\n\t\t\t\t`Suggestion [cmd-not-found]:`,\n\t\t\t\t`  Command 'python' not found, but can be installed with:`,\n\t\t\t\t`  sudo apt install python3`,\n\t\t\t\t`  sudo apt install python`,\n\t\t\t\t`  sudo apt install python-minimal`,\n\t\t\t\t`  You also have python3 installed, you can run 'python3' instead.'`,\n\t\t\t\t``,\n\t\t\t].join('\\n');\n\t\t\tconst exitCode = 128;\n\t\t\tconst actions = [\n\t\t\t\t'python3',\n\t\t\t\t'python3m',\n\t\t\t\t'pamon',\n\t\t\t\t'python3.6',\n\t\t\t\t'rtmon',\n\t\t\t\t'echo',\n\t\t\t\t'pushd',\n\t\t\t\t'etsn',\n\t\t\t\t'pwsh',\n\t\t\t\t'pwconv',\n\t\t\t].map(command => {\n\t\t\t\treturn {\n\t\t\t\t\tid: 'Pwsh General Error',\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tlabel: `Run: ${command}`,\n\t\t\t\t\ttooltip: `Run: ${command}`,\n\t\t\t\t\tcommand: command\n\t\t\t\t};\n\t\t\t});\n\t\t\tsetup(() => {\n\t\t\t\tconst pushCommand = pwshGeneralError();\n\t\t\t\tquickFixAddon.registerCommandFinishedListener(pushCommand);\n\t\t\t\texpectedMap.set(pushCommand.commandLineMatcher.toString(), [pushCommand]);\n\t\t\t});\n\t\t\ttest('returns undefined when output does not match', async () => {\n\t\t\t\tstrictEqual((await getQuickFixesForCommand([], terminal, createCommand(command, `invalid output`, PwshGeneralErrorOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t});\n\t\t\ttest('returns actions when output matches', async () => {\n\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand(command, output, PwshGeneralErrorOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), actions);\n\t\t\t});\n\t\t});\n\t\tsuite('Unix cmd-not-found', () => {\n\t\t\tconst expectedMap = new Map();\n\t\t\tconst command = `not important`;\n\t\t\tconst output = [\n\t\t\t\t`...`,\n\t\t\t\t``,\n\t\t\t\t`Suggestion [General]`,\n\t\t\t\t`  The most similar commands are: python3, python3m, pamon, python3.6, rtmon, echo, pushd, etsn, pwsh, pwconv.`,\n\t\t\t\t``,\n\t\t\t\t`Suggestion [cmd-not-found]:`,\n\t\t\t\t`  Command 'python' not found, but can be installed with:`,\n\t\t\t\t`  sudo apt install python3`,\n\t\t\t\t`  sudo apt install python`,\n\t\t\t\t`  sudo apt install python-minimal`,\n\t\t\t\t`  You also have python3 installed, you can run 'python3' instead.'`,\n\t\t\t\t``,\n\t\t\t].join('\\n');\n\t\t\tconst exitCode = 128;\n\t\t\tconst actions = [\n\t\t\t\t'sudo apt install python3',\n\t\t\t\t'sudo apt install python',\n\t\t\t\t'sudo apt install python-minimal',\n\t\t\t\t'python3',\n\t\t\t].map(command => {\n\t\t\t\treturn {\n\t\t\t\t\tid: 'Pwsh Unix Command Not Found Error',\n\t\t\t\t\tenabled: true,\n\t\t\t\t\tlabel: `Run: ${command}`,\n\t\t\t\t\ttooltip: `Run: ${command}`,\n\t\t\t\t\tcommand: command\n\t\t\t\t};\n\t\t\t});\n\t\t\tsetup(() => {\n\t\t\t\tconst pushCommand = pwshUnixCommandNotFoundError();\n\t\t\t\tquickFixAddon.registerCommandFinishedListener(pushCommand);\n\t\t\t\texpectedMap.set(pushCommand.commandLineMatcher.toString(), [pushCommand]);\n\t\t\t});\n\t\t\ttest('returns undefined when output does not match', async () => {\n\t\t\t\tstrictEqual((await getQuickFixesForCommand([], terminal, createCommand(command, `invalid output`, PwshUnixCommandNotFoundErrorOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), undefined);\n\t\t\t});\n\t\t\ttest('returns actions when output matches', async () => {\n\t\t\t\tassertMatchOptions((await getQuickFixesForCommand([], terminal, createCommand(command, output, PwshUnixCommandNotFoundErrorOutputRegex, exitCode), expectedMap, commandService, openerService, labelService)), actions);\n\t\t\t});\n\t\t});\n\t});\n});\n\nfunction createCommand(command: string, output: string, outputMatcher?: RegExp | string, exitCode?: number, outputLines?: string[]): ITerminalCommand {\n\treturn {\n\t\tcwd: '',\n\t\tcommandStartLineContent: '',\n\t\tmarkProperties: {},\n\t\tcommand,\n\t\tisTrusted: true,\n\t\texitCode,\n\t\tgetOutput: () => { return output; },\n\t\tgetOutputMatch: (_matcher: ITerminalOutputMatcher) => {\n\t\t\tif (outputMatcher) {\n\t\t\t\tconst regexMatch = output.match(outputMatcher) ?? undefined;\n\t\t\t\tif (regexMatch) {\n\t\t\t\t\treturn outputLines ? { regexMatch, outputLines } : { regexMatch, outputLines: [] };\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn undefined;\n\t\t},\n\t\ttimestamp: Date.now(),\n\t\thasOutput: () => !!output\n\t};\n}\n\ntype TestAction = Pick<IAction, 'id' | 'label' | 'tooltip' | 'enabled'> & { command?: string; uri?: URI };\nfunction assertMatchOptions(actual: TestAction[] | undefined, expected: TestAction[]): void {\n\tstrictEqual(actual?.length, expected.length);\n\tfor (let i = 0; i < expected.length; i++) {\n\t\tconst expectedItem = expected[i];\n\t\tconst actualItem: any = actual[i];\n\t\tstrictEqual(actualItem.id, expectedItem.id, `ID`);\n\t\tstrictEqual(actualItem.enabled, expectedItem.enabled, `enabled`);\n\t\tstrictEqual(actualItem.label, expectedItem.label, `label`);\n\t\tstrictEqual(actualItem.tooltip, expectedItem.tooltip, `tooltip`);\n\t\tif (expectedItem.command) {\n\t\t\tstrictEqual(actualItem.command, expectedItem.command);\n\t\t}\n\t\tif (expectedItem.uri) {\n\t\t\tstrictEqual(actualItem.uri!.toString(), expectedItem.uri.toString());\n\t\t}\n\t}\n}\n"]}