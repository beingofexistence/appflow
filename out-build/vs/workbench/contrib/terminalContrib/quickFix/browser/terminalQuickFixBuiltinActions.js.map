{"version":3,"sources":["vs/workbench/contrib/terminalContrib/quickFix/browser/terminalQuickFixBuiltinActions.ts"],"names":[],"mappings":"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","file":"terminalQuickFixBuiltinActions.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { ITerminalQuickFixInternalOptions, ITerminalCommandMatchResult, ITerminalQuickFixExecuteTerminalCommandAction, TerminalQuickFixActionInternal, TerminalQuickFixType } from 'vs/workbench/contrib/terminalContrib/quickFix/browser/quickFix';\n\nexport const GitCommandLineRegex = /git/;\nexport const GitPushCommandLineRegex = /git\\s+push/;\nexport const GitTwoDashesRegex = /error: did you mean `--(.+)` \\(with two dashes\\)\\?/;\nexport const GitSimilarOutputRegex = /(?:(most similar commands? (is|are)))/;\nexport const FreePortOutputRegex = /(?:address already in use (?:0\\.0\\.0\\.0|127\\.0\\.0\\.1|localhost|::):|Unable to bind [^ ]*:|can't listen on port |listen EADDRINUSE [^ ]*:)(?<portNumber>\\d{4,5})/;\nexport const GitPushOutputRegex = /git push --set-upstream origin (?<branchName>[^\\s]+)/;\n// The previous line starts with \"Create a pull request for \\'([^\\s]+)\\' on GitHub by visiting:\\s*\"\n// it's safe to assume it's a github pull request if the URL includes `/pull/`\nexport const GitCreatePrOutputRegex = /remote:\\s*(?<link>https:\\/\\/github\\.com\\/.+\\/.+\\/pull\\/new\\/.+)/;\nexport const PwshGeneralErrorOutputRegex = /Suggestion \\[General\\]:/;\nexport const PwshUnixCommandNotFoundErrorOutputRegex = /Suggestion \\[cmd-not-found\\]:/;\n\nexport const enum QuickFixSource {\n\tBuiltin = 'builtin'\n}\n\nexport function gitSimilar(): ITerminalQuickFixInternalOptions {\n\treturn {\n\t\tid: 'Git Similar',\n\t\ttype: 'internal',\n\t\tcommandLineMatcher: GitCommandLineRegex,\n\t\toutputMatcher: {\n\t\t\tlineMatcher: GitSimilarOutputRegex,\n\t\t\tanchor: 'bottom',\n\t\t\toffset: 0,\n\t\t\tlength: 10\n\t\t},\n\t\tcommandExitResult: 'error',\n\t\tgetQuickFixes: (matchResult: ITerminalCommandMatchResult) => {\n\t\t\tconst regexMatch = matchResult.outputMatch?.regexMatch[0];\n\t\t\tif (!regexMatch || !matchResult.outputMatch) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst actions: TerminalQuickFixActionInternal[] = [];\n\t\t\tconst startIndex = matchResult.outputMatch.outputLines.findIndex(l => l.includes(regexMatch)) + 1;\n\t\t\tconst results = matchResult.outputMatch.outputLines.map(r => r.trim());\n\t\t\tfor (let i = startIndex; i < results.length; i++) {\n\t\t\t\tconst fixedCommand = results[i];\n\t\t\t\tif (fixedCommand) {\n\t\t\t\t\tactions.push({\n\t\t\t\t\t\tid: 'Git Similar',\n\t\t\t\t\t\ttype: TerminalQuickFixType.TerminalCommand,\n\t\t\t\t\t\tterminalCommand: matchResult.commandLine.replace(/git\\s+[^\\s]+/, () => `git ${fixedCommand}`),\n\t\t\t\t\t\taddNewLine: true,\n\t\t\t\t\t\tsource: QuickFixSource.Builtin\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn actions;\n\t\t}\n\t};\n}\n\nexport function gitTwoDashes(): ITerminalQuickFixInternalOptions {\n\treturn {\n\t\tid: 'Git Two Dashes',\n\t\ttype: 'internal',\n\t\tcommandLineMatcher: GitCommandLineRegex,\n\t\toutputMatcher: {\n\t\t\tlineMatcher: GitTwoDashesRegex,\n\t\t\tanchor: 'bottom',\n\t\t\toffset: 0,\n\t\t\tlength: 2\n\t\t},\n\t\tcommandExitResult: 'error',\n\t\tgetQuickFixes: (matchResult: ITerminalCommandMatchResult) => {\n\t\t\tconst problemArg = matchResult?.outputMatch?.regexMatch?.[1];\n\t\t\tif (!problemArg) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn {\n\t\t\t\ttype: TerminalQuickFixType.TerminalCommand,\n\t\t\t\tid: 'Git Two Dashes',\n\t\t\t\tterminalCommand: matchResult.commandLine.replace(` -${problemArg}`, () => ` --${problemArg}`),\n\t\t\t\taddNewLine: true,\n\t\t\t\tsource: QuickFixSource.Builtin\n\t\t\t};\n\t\t}\n\t};\n}\nexport function freePort(runCallback: (port: string, commandLine: string) => Promise<void>): ITerminalQuickFixInternalOptions {\n\treturn {\n\t\tid: 'Free Port',\n\t\ttype: 'internal',\n\t\tcommandLineMatcher: /.+/,\n\t\toutputMatcher: {\n\t\t\tlineMatcher: FreePortOutputRegex,\n\t\t\tanchor: 'bottom',\n\t\t\toffset: 0,\n\t\t\tlength: 30\n\t\t},\n\t\tcommandExitResult: 'error',\n\t\tgetQuickFixes: (matchResult: ITerminalCommandMatchResult) => {\n\t\t\tconst port = matchResult?.outputMatch?.regexMatch?.groups?.portNumber;\n\t\t\tif (!port) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst label = localize(\"terminal.freePort\", \"Free port {0}\", port);\n\t\t\treturn {\n\t\t\t\ttype: TerminalQuickFixType.Port,\n\t\t\t\tclass: undefined,\n\t\t\t\ttooltip: label,\n\t\t\t\tid: 'Free Port',\n\t\t\t\tlabel,\n\t\t\t\tenabled: true,\n\t\t\t\tsource: QuickFixSource.Builtin,\n\t\t\t\trun: () => runCallback(port, matchResult.commandLine)\n\t\t\t};\n\t\t}\n\t};\n}\n\nexport function gitPushSetUpstream(): ITerminalQuickFixInternalOptions {\n\treturn {\n\t\tid: 'Git Push Set Upstream',\n\t\ttype: 'internal',\n\t\tcommandLineMatcher: GitPushCommandLineRegex,\n\t\t/**\n\t\t\tExample output on Windows:\n\t\t\t8: PS C:\\Users\\merogge\\repos\\xterm.js> git push\n\t\t\t7: fatal: The current branch sdjfskdjfdslkjf has no upstream branch.\n\t\t\t6: To push the current branch and set the remote as upstream, use\n\t\t\t5:\n\t\t\t4:\tgit push --set-upstream origin sdjfskdjfdslkjf\n\t\t\t3:\n\t\t\t2: To have this happen automatically for branches without a tracking\n\t\t\t1: upstream, see 'push.autoSetupRemote' in 'git help config'.\n\t\t\t0:\n\n\t\t\tExample output on macOS:\n\t\t\t5: meganrogge@Megans-MacBook-Pro xterm.js % git push\n\t\t\t4: fatal: The current branch merogge/asjdkfsjdkfsdjf has no upstream branch.\n\t\t\t3: To push the current branch and set the remote as upstream, use\n\t\t\t2:\n\t\t\t1:\tgit push --set-upstream origin merogge/asjdkfsjdkfsdjf\n\t\t\t0:\n\t\t */\n\t\toutputMatcher: {\n\t\t\tlineMatcher: GitPushOutputRegex,\n\t\t\tanchor: 'bottom',\n\t\t\toffset: 0,\n\t\t\tlength: 8\n\t\t},\n\t\tcommandExitResult: 'error',\n\t\tgetQuickFixes: (matchResult: ITerminalCommandMatchResult) => {\n\t\t\tconst matches = matchResult.outputMatch;\n\t\t\tconst commandToRun = 'git push --set-upstream origin ${group:branchName}';\n\t\t\tif (!matches) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst groups = matches.regexMatch.groups;\n\t\t\tif (!groups) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst actions: TerminalQuickFixActionInternal[] = [];\n\t\t\tlet fixedCommand = commandToRun;\n\t\t\tfor (const [key, value] of Object.entries(groups)) {\n\t\t\t\tconst varToResolve = '${group:' + `${key}` + '}';\n\t\t\t\tif (!commandToRun.includes(varToResolve)) {\n\t\t\t\t\treturn [];\n\t\t\t\t}\n\t\t\t\tfixedCommand = fixedCommand.replaceAll(varToResolve, () => value);\n\t\t\t}\n\t\t\tif (fixedCommand) {\n\t\t\t\tactions.push({\n\t\t\t\t\ttype: TerminalQuickFixType.TerminalCommand,\n\t\t\t\t\tid: 'Git Push Set Upstream',\n\t\t\t\t\tterminalCommand: fixedCommand,\n\t\t\t\t\taddNewLine: true,\n\t\t\t\t\tsource: QuickFixSource.Builtin\n\t\t\t\t});\n\t\t\t\treturn actions;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t};\n}\n\nexport function gitCreatePr(): ITerminalQuickFixInternalOptions {\n\treturn {\n\t\tid: 'Git Create Pr',\n\t\ttype: 'internal',\n\t\tcommandLineMatcher: GitPushCommandLineRegex,\n\t\t// Example output:\n\t\t// ...\n\t\t// 10: remote:\n\t\t// 9:  remote: Create a pull request for 'my_branch' on GitHub by visiting:\n\t\t// 8:  remote:      https://github.com/microsoft/vscode/pull/new/my_branch\n\t\t// 7:  remote:\n\t\t// 6:  remote: GitHub found x vulnerabilities on microsoft/vscode's default branch (...). To find out more, visit:\n\t\t// 5:  remote:      https://github.com/microsoft/vscode/security/dependabot\n\t\t// 4:  remote:\n\t\t// 3:  To https://github.com/microsoft/vscode\n\t\t// 2:  * [new branch]              my_branch -> my_branch\n\t\t// 1:  Branch 'my_branch' set up to track remote branch 'my_branch' from 'origin'.\n\t\t// 0:\n\t\toutputMatcher: {\n\t\t\tlineMatcher: GitCreatePrOutputRegex,\n\t\t\tanchor: 'bottom',\n\t\t\toffset: 4,\n\t\t\t// ~6 should only be needed here for security alerts, but the git provider can customize\n\t\t\t// the text, so use 12 to be safe.\n\t\t\tlength: 12\n\t\t},\n\t\tcommandExitResult: 'success',\n\t\tgetQuickFixes: (matchResult: ITerminalCommandMatchResult) => {\n\t\t\tconst link = matchResult?.outputMatch?.regexMatch?.groups?.link;\n\t\t\tif (!link) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst label = localize(\"terminal.createPR\", \"Create PR {0}\", link);\n\t\t\treturn {\n\t\t\t\tid: 'Git Create Pr',\n\t\t\t\tlabel,\n\t\t\t\tenabled: true,\n\t\t\t\ttype: TerminalQuickFixType.Opener,\n\t\t\t\turi: URI.parse(link),\n\t\t\t\tsource: QuickFixSource.Builtin\n\t\t\t};\n\t\t}\n\t};\n}\n\nexport function pwshGeneralError(): ITerminalQuickFixInternalOptions {\n\treturn {\n\t\tid: 'Pwsh General Error',\n\t\ttype: 'internal',\n\t\tcommandLineMatcher: /.+/,\n\t\toutputMatcher: {\n\t\t\tlineMatcher: PwshGeneralErrorOutputRegex,\n\t\t\tanchor: 'bottom',\n\t\t\toffset: 0,\n\t\t\tlength: 10\n\t\t},\n\t\tcommandExitResult: 'error',\n\t\tgetQuickFixes: (matchResult: ITerminalCommandMatchResult) => {\n\t\t\tconst lines = matchResult.outputMatch?.regexMatch.input?.split('\\n');\n\t\t\tif (!lines) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Find the start\n\t\t\tlet i = 0;\n\t\t\tlet inFeedbackProvider = false;\n\t\t\tfor (; i < lines.length; i++) {\n\t\t\t\tif (lines[i].match(PwshGeneralErrorOutputRegex)) {\n\t\t\t\t\tinFeedbackProvider = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!inFeedbackProvider) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst suggestions = lines[i + 1].match(/The most similar commands are: (?<values>.+)./)?.groups?.values?.split(', ');\n\t\t\tif (!suggestions) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst result: ITerminalQuickFixExecuteTerminalCommandAction[] = [];\n\t\t\tfor (const suggestion of suggestions) {\n\t\t\t\tresult.push({\n\t\t\t\t\tid: 'Pwsh General Error',\n\t\t\t\t\ttype: TerminalQuickFixType.TerminalCommand,\n\t\t\t\t\tterminalCommand: suggestion,\n\t\t\t\t\tsource: QuickFixSource.Builtin\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t};\n}\n\nexport function pwshUnixCommandNotFoundError(): ITerminalQuickFixInternalOptions {\n\treturn {\n\t\tid: 'Unix Command Not Found',\n\t\ttype: 'internal',\n\t\tcommandLineMatcher: /.+/,\n\t\toutputMatcher: {\n\t\t\tlineMatcher: PwshUnixCommandNotFoundErrorOutputRegex,\n\t\t\tanchor: 'bottom',\n\t\t\toffset: 0,\n\t\t\tlength: 10\n\t\t},\n\t\tcommandExitResult: 'error',\n\t\tgetQuickFixes: (matchResult: ITerminalCommandMatchResult) => {\n\t\t\tconst lines = matchResult.outputMatch?.regexMatch.input?.split('\\n');\n\t\t\tif (!lines) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Find the start\n\t\t\tlet i = 0;\n\t\t\tlet inFeedbackProvider = false;\n\t\t\tfor (; i < lines.length; i++) {\n\t\t\t\tif (lines[i].match(PwshUnixCommandNotFoundErrorOutputRegex)) {\n\t\t\t\t\tinFeedbackProvider = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!inFeedbackProvider) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Always remove the first element as it's the \"Suggestion [cmd-not-found]\"\" line\n\t\t\tconst result: ITerminalQuickFixExecuteTerminalCommandAction[] = [];\n\t\t\tlet inSuggestions = false;\n\t\t\tfor (; i < lines.length; i++) {\n\t\t\t\tconst line = lines[i].trim();\n\t\t\t\tif (line.length === 0) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tconst installCommand = line.match(/You also have .+ installed, you can run '(?<command>.+)' instead./)?.groups?.command;\n\t\t\t\tif (installCommand) {\n\t\t\t\t\tresult.push({\n\t\t\t\t\t\tid: 'Pwsh Unix Command Not Found Error',\n\t\t\t\t\t\ttype: TerminalQuickFixType.TerminalCommand,\n\t\t\t\t\t\tterminalCommand: installCommand,\n\t\t\t\t\t\tsource: QuickFixSource.Builtin\n\t\t\t\t\t});\n\t\t\t\t\tinSuggestions = false;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (line.match(/Command '.+' not found, but can be installed with:/)) {\n\t\t\t\t\tinSuggestions = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (inSuggestions) {\n\t\t\t\t\tresult.push({\n\t\t\t\t\t\tid: 'Pwsh Unix Command Not Found Error',\n\t\t\t\t\t\ttype: TerminalQuickFixType.TerminalCommand,\n\t\t\t\t\t\tterminalCommand: line.trim(),\n\t\t\t\t\t\tsource: QuickFixSource.Builtin\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t};\n}\n"]}