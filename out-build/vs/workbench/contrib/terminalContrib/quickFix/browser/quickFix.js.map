{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminalContrib/quickFix/browser/quickFix.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAWnF,QAAA,IAAI,GAAuB,IAAA,mBAAG,EAAuC,yBAAyB,CAAC,CAAC;IA+B7G,IAAY,oBAKX;IALD,WAAY,oBAAoB;QAC/B,qFAAmB,CAAA;QACnB,mEAAU,CAAA;QACV,+DAAQ,CAAA;QACR,iFAAiB,CAAA;IAClB,CAAC,EALW,oBAAoB,oCAApB,oBAAoB,QAK/B","file":"quickFix.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Event } from 'vs/base/common/event';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { IAction } from 'vs/base/common/actions';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { URI } from 'vs/base/common/uri';\nimport { ITerminalCommandSelector, ITerminalOutputMatch, ITerminalOutputMatcher } from 'vs/platform/terminal/common/terminal';\nimport { ITerminalCommand } from 'vs/platform/terminal/common/capabilities/capabilities';\n\nexport const ITerminalQuickFixService = createDecorator<ITerminalQuickFixService>('terminalQuickFixService');\nexport interface ITerminalQuickFixService {\n\tonDidRegisterProvider: Event<ITerminalQuickFixProviderSelector>;\n\tonDidRegisterCommandSelector: Event<ITerminalCommandSelector>;\n\tonDidUnregisterProvider: Event<string>;\n\treadonly _serviceBrand: undefined;\n\treadonly extensionQuickFixes: Promise<Array<ITerminalCommandSelector>>;\n\tproviders: Map<string, ITerminalQuickFixProvider>;\n\tregisterQuickFixProvider(id: string, provider: ITerminalQuickFixProvider): IDisposable;\n\tregisterCommandSelector(selector: ITerminalCommandSelector): void;\n}\n\nexport interface ITerminalQuickFixProviderSelector {\n\tselector: ITerminalCommandSelector;\n\tprovider: ITerminalQuickFixProvider;\n}\n\nexport type TerminalQuickFixActionInternal = IAction | ITerminalQuickFixExecuteTerminalCommandAction | ITerminalQuickFixOpenerAction;\nexport type TerminalQuickFixCallback = (matchResult: ITerminalCommandMatchResult) => TerminalQuickFixActionInternal[] | TerminalQuickFixActionInternal | undefined;\nexport type TerminalQuickFixCallbackExtension = (terminalCommand: ITerminalCommand, lines: string[] | undefined, option: ITerminalQuickFixOptions, token: CancellationToken) => Promise<ITerminalQuickFix[] | ITerminalQuickFix | undefined>;\n\nexport interface ITerminalQuickFixProvider {\n\t/**\n\t * Provides terminal quick fixes\n\t * @param commandMatchResult The command match result for which to provide quick fixes\n\t * @param token A cancellation token indicating the result is no longer needed\n\t * @return Terminal quick fix(es) if any\n\t */\n\tprovideTerminalQuickFixes(terminalCommand: ITerminalCommand, lines: string[] | undefined, option: ITerminalQuickFixOptions, token: CancellationToken): Promise<ITerminalQuickFix[] | ITerminalQuickFix | undefined>;\n}\n\nexport enum TerminalQuickFixType {\n\tTerminalCommand = 0,\n\tOpener = 1,\n\tPort = 2,\n\tVscodeCommand = 3\n}\n\nexport interface ITerminalQuickFixOptions {\n\ttype: 'internal' | 'resolved' | 'unresolved';\n\tid: string;\n\tcommandLineMatcher: string | RegExp;\n\toutputMatcher?: ITerminalOutputMatcher;\n\tcommandExitResult: 'success' | 'error';\n\tkind?: 'fix' | 'explain';\n}\n\nexport interface ITerminalQuickFix {\n\ttype: TerminalQuickFixType;\n\tid: string;\n\tsource: string;\n}\n\nexport interface ITerminalQuickFixExecuteTerminalCommandAction extends ITerminalQuickFix {\n\ttype: TerminalQuickFixType.TerminalCommand;\n\tterminalCommand: string;\n\t// TODO: Should this depend on whether alt is held?\n\taddNewLine?: boolean;\n}\nexport interface ITerminalQuickFixOpenerAction extends ITerminalQuickFix {\n\ttype: TerminalQuickFixType.Opener;\n\turi: URI;\n}\nexport interface ITerminalQuickFixCommandAction extends ITerminalQuickFix {\n\ttitle: string;\n}\n\nexport interface ITerminalCommandMatchResult {\n\tcommandLine: string;\n\tcommandLineMatch: RegExpMatchArray;\n\toutputMatch?: ITerminalOutputMatch;\n}\n\nexport interface ITerminalQuickFixInternalOptions extends ITerminalQuickFixOptions {\n\ttype: 'internal';\n\tgetQuickFixes: TerminalQuickFixCallback;\n}\n\nexport interface ITerminalQuickFixResolvedExtensionOptions extends ITerminalQuickFixOptions {\n\ttype: 'resolved';\n\tgetQuickFixes: TerminalQuickFixCallbackExtension;\n}\n\nexport interface ITerminalQuickFixUnresolvedExtensionOptions extends ITerminalQuickFixOptions {\n\ttype: 'unresolved';\n}\n"]}