{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminalContrib/typeAhead/browser/terminal.typeAhead.contribution.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAahG,IAAM,6BAA6B,GAAnC,MAAM,6BAA8B,SAAQ,eAAG;;iBAC9B,OAAE,GAAG,oBAAH,AAAuB,CAAC;QAE1C,MAAM,CAAC,GAAG,CAAC,QAA2B;YACrC,OAAO,QAAQ,CAAC,eAAe,CAAgC,+BAA6B,CAAC,EAAE,CAAC,CAAC;QAClG,CAAC;QAID,YACC,QAA2B,EACV,CAAwC,EACzD,aAAmB,EACqB,CAA0B,EAC1B,CAA0B;YAElE,KAAK,EAAE,CAAC;YALS,MAAC,GAAD,CAAC,CAAuC;YAEjB,MAAC,GAAD,CAAC,CAAyB;YAC1B,MAAC,GAAD,CAAC,CAAyB;YAGlE,IAAI,CAAC,GAAG,CAAC,IAAA,eAAG,EAAU,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,EAAO,OAAO,EAAE,CAAC,CAAC,CAAC;QACtD,CAAC;QAED,UAAU,CAAC,KAAiD;YAC3D,IAAI,CAAC,CAAC,CAAmB,KAAK,CAAC,GAAG,CAAC,CAAC;YACpC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAqB,wBAAwB,CAAC,CAAC,CAAC,EAAE;gBAChE,IAAI,CAAC,CAAC,oBAAoB,iFAAoC,EAAE;oBAC/D,IAAI,CAAC,CAAC,CAAmB,KAAK,CAAC,GAAG,CAAC,CAAC;iBACpC;YACF,CAAC,CAAC,CAAC,CAAC;YAEJ,2DAA2D;YAC3D,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAe,cAAc,CAAC,GAAG,EAAE;gBACjD,IAAI,CAAC,CAAC,EAAO,KAAK,EAAE,CAAC;YACtB,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAEO,CAAC,CAAmB,KAAuB;YAClD,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAqB,QAAQ,CAAyB,cAAG,CAAqB,CAAC,gBAAgB,CAAC;YACtH,MAAM,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAe,eAAe,CAAC;YACxD,IAAI,OAAO,KAAK,KAAK,IAAI,OAAO,KAAK,MAAM,IAAI,CAAC,QAAQ,EAAE;gBACzD,IAAI,CAAC,CAAC,EAAO,OAAO,EAAE,CAAC;gBACvB,IAAI,CAAC,CAAC,GAAQ,SAAS,CAAC;gBACxB,OAAO;aACP;YACD,IAAI,IAAI,CAAC,CAAC,EAAO;gBAChB,OAAO;aACP;YACD,IAAI,OAAO,KAAK,IAAI,IAAI,CAAC,OAAO,KAAK,MAAM,IAAI,QAAQ,CAAC,EAAE;gBACzD,IAAI,CAAC,CAAC,GAAQ,IAAI,CAAC,CAAC,CAAqB,cAAc,CAAC,6BAAI,EAAY,IAAI,CAAC,CAAC,CAAe,CAAC;gBAC9F,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAM,CAAC;aAC7B;QACF,CAAC;;IAjDI,6BAA6B;QAahC,WAAA,mBAAG,CAAA;QACH,WAAA,mBAAG,CAAA;OAdA,6BAA6B,CAkDlC;IAED,IAAA,yBAAI,EAAyB,6BAA6B,CAAC,EAAE,EAAE,6BAA6B,CAAC,CAAC","file":"terminal.typeAhead.contribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore, toDisposable } from 'vs/base/common/lifecycle';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { TerminalSettingId } from 'vs/platform/terminal/common/terminal';\nimport { ITerminalContribution, ITerminalInstance, IXtermTerminal } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { registerTerminalContribution } from 'vs/workbench/contrib/terminal/browser/terminalExtensions';\nimport { TerminalWidgetManager } from 'vs/workbench/contrib/terminal/browser/widgets/widgetManager';\nimport { TypeAheadAddon } from 'vs/workbench/contrib/terminalContrib/typeAhead/browser/terminalTypeAheadAddon';\nimport { ITerminalConfiguration, ITerminalProcessManager, TERMINAL_CONFIG_SECTION } from 'vs/workbench/contrib/terminal/common/terminal';\nimport type { Terminal as RawXtermTerminal } from 'xterm';\n\nclass TerminalTypeAheadContribution extends DisposableStore implements ITerminalContribution {\n\tstatic readonly ID = 'terminal.typeAhead';\n\n\tstatic get(instance: ITerminalInstance): TerminalTypeAheadContribution | null {\n\t\treturn instance.getContribution<TerminalTypeAheadContribution>(TerminalTypeAheadContribution.ID);\n\t}\n\n\tprivate _addon: TypeAheadAddon | undefined;\n\n\tconstructor(\n\t\tinstance: ITerminalInstance,\n\t\tprivate readonly _processManager: ITerminalProcessManager,\n\t\twidgetManager: TerminalWidgetManager,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService\n\t) {\n\t\tsuper();\n\t\tthis.add(toDisposable(() => this._addon?.dispose()));\n\t}\n\n\txtermReady(xterm: IXtermTerminal & { raw: RawXtermTerminal }): void {\n\t\tthis._loadTypeAheadAddon(xterm.raw);\n\t\tthis.add(this._configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(TerminalSettingId.LocalEchoEnabled)) {\n\t\t\t\tthis._loadTypeAheadAddon(xterm.raw);\n\t\t\t}\n\t\t}));\n\n\t\t// Reset the addon when the terminal launches or relaunches\n\t\tthis.add(this._processManager.onProcessReady(() => {\n\t\t\tthis._addon?.reset();\n\t\t}));\n\t}\n\n\tprivate _loadTypeAheadAddon(xterm: RawXtermTerminal): void {\n\t\tconst enabled = this._configurationService.getValue<ITerminalConfiguration>(TERMINAL_CONFIG_SECTION).localEchoEnabled;\n\t\tconst isRemote = !!this._processManager.remoteAuthority;\n\t\tif (enabled === 'off' || enabled === 'auto' && !isRemote) {\n\t\t\tthis._addon?.dispose();\n\t\t\tthis._addon = undefined;\n\t\t\treturn;\n\t\t}\n\t\tif (this._addon) {\n\t\t\treturn;\n\t\t}\n\t\tif (enabled === 'on' || (enabled === 'auto' && isRemote)) {\n\t\t\tthis._addon = this._instantiationService.createInstance(TypeAheadAddon, this._processManager);\n\t\t\txterm.loadAddon(this._addon);\n\t\t}\n\t}\n}\n\nregisterTerminalContribution(TerminalTypeAheadContribution.ID, TerminalTypeAheadContribution);\n"]}