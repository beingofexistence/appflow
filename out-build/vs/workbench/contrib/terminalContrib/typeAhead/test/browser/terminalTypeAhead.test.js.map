{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/terminalContrib/typeAhead/test/browser/terminalTypeAhead.test.ts"],"names":[],"mappings":"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","file":"terminalTypeAhead.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport type { IBuffer, Terminal } from 'xterm';\nimport { SinonStub, stub, useFakeTimers } from 'sinon';\nimport { Emitter } from 'vs/base/common/event';\nimport { CharPredictState, IPrediction, PredictionStats, TypeAheadAddon } from 'vs/workbench/contrib/terminalContrib/typeAhead/browser/terminalTypeAheadAddon';\nimport { DEFAULT_LOCAL_ECHO_EXCLUDE, IBeforeProcessDataEvent, ITerminalConfiguration, ITerminalProcessManager } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\n\nconst CSI = `\\x1b[`;\n\nconst enum CursorMoveDirection {\n\tBack = 'D',\n\tForwards = 'C',\n}\n\nsuite('Workbench - Terminal Typeahead', () => {\n\tconst ds = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('PredictionStats', () => {\n\t\tlet stats: PredictionStats;\n\t\tlet add: Emitter<IPrediction>;\n\t\tlet succeed: Emitter<IPrediction>;\n\t\tlet fail: Emitter<IPrediction>;\n\n\t\tsetup(() => {\n\t\t\tadd = ds.add(new Emitter<IPrediction>());\n\t\t\tsucceed = ds.add(new Emitter<IPrediction>());\n\t\t\tfail = ds.add(new Emitter<IPrediction>());\n\n\t\t\tstats = ds.add(new PredictionStats({\n\t\t\t\tonPredictionAdded: add.event,\n\t\t\t\tonPredictionSucceeded: succeed.event,\n\t\t\t\tonPredictionFailed: fail.event,\n\t\t\t} as any));\n\t\t});\n\n\t\ttest('creates sane data', () => {\n\t\t\tconst stubs = createPredictionStubs(5);\n\t\t\tconst clock = useFakeTimers();\n\t\t\ttry {\n\t\t\t\tfor (const s of stubs) { add.fire(s); }\n\n\t\t\t\tfor (let i = 0; i < stubs.length; i++) {\n\t\t\t\t\tclock.tick(100);\n\t\t\t\t\t(i % 2 ? fail : succeed).fire(stubs[i]);\n\t\t\t\t}\n\n\t\t\t\tassert.strictEqual(stats.accuracy, 3 / 5);\n\t\t\t\tassert.strictEqual(stats.sampleSize, 5);\n\t\t\t\tassert.deepStrictEqual(stats.latency, {\n\t\t\t\t\tcount: 3,\n\t\t\t\t\tmin: 100,\n\t\t\t\t\tmax: 500,\n\t\t\t\t\tmedian: 300\n\t\t\t\t});\n\t\t\t} finally {\n\t\t\t\tclock.restore();\n\t\t\t}\n\t\t});\n\n\t\ttest('circular buffer', () => {\n\t\t\tconst bufferSize = 24;\n\t\t\tconst stubs = createPredictionStubs(bufferSize * 2);\n\n\t\t\tfor (const s of stubs.slice(0, bufferSize)) { add.fire(s); succeed.fire(s); }\n\t\t\tassert.strictEqual(stats.accuracy, 1);\n\n\t\t\tfor (const s of stubs.slice(bufferSize, bufferSize * 3 / 2)) { add.fire(s); fail.fire(s); }\n\t\t\tassert.strictEqual(stats.accuracy, 0.5);\n\n\t\t\tfor (const s of stubs.slice(bufferSize * 3 / 2)) { add.fire(s); fail.fire(s); }\n\t\t\tassert.strictEqual(stats.accuracy, 0);\n\t\t});\n\t});\n\n\tsuite('timeline', () => {\n\t\tlet onBeforeProcessData: Emitter<IBeforeProcessDataEvent>;\n\t\tlet publicLog: SinonStub;\n\t\tlet config: ITerminalConfiguration;\n\t\tlet addon: TestTypeAheadAddon;\n\n\t\tconst predictedHelloo = [\n\t\t\t`${CSI}?25l`, // hide cursor\n\t\t\t`${CSI}2;7H`, // move cursor\n\t\t\t'o', // new character\n\t\t\t`${CSI}2;8H`, // place cursor back at end of line\n\t\t\t`${CSI}?25h`, // show cursor\n\t\t].join('');\n\n\t\tconst expectProcessed = (input: string, output: string) => {\n\t\t\tconst evt = { data: input };\n\t\t\tonBeforeProcessData.fire(evt);\n\t\t\tassert.strictEqual(JSON.stringify(evt.data), JSON.stringify(output));\n\t\t};\n\n\t\tsetup(() => {\n\t\t\tonBeforeProcessData = ds.add(new Emitter<IBeforeProcessDataEvent>());\n\t\t\tconfig = upcastPartial<ITerminalConfiguration>({\n\t\t\t\tlocalEchoStyle: 'italic',\n\t\t\t\tlocalEchoLatencyThreshold: 0,\n\t\t\t\tlocalEchoExcludePrograms: DEFAULT_LOCAL_ECHO_EXCLUDE,\n\t\t\t});\n\t\t\tpublicLog = stub();\n\t\t\taddon = new TestTypeAheadAddon(\n\t\t\t\tupcastPartial<ITerminalProcessManager>({ onBeforeProcessData: onBeforeProcessData.event }),\n\t\t\t\tnew TestConfigurationService({ terminal: { integrated: { ...config } } }),\n\t\t\t\tupcastPartial<ITelemetryService>({ publicLog })\n\t\t\t);\n\t\t\taddon.unlockMakingPredictions();\n\t\t});\n\n\t\tteardown(() => {\n\t\t\taddon.dispose();\n\t\t});\n\n\t\ttest('predicts a single character', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\tt.onData('o');\n\t\t\tt.expectWritten(`${CSI}3mo${CSI}23m`);\n\t\t});\n\n\t\ttest('validates character prediction', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\tt.onData('o');\n\t\t\texpectProcessed('o', predictedHelloo);\n\t\t\tassert.strictEqual(addon.stats?.accuracy, 1);\n\t\t});\n\n\t\ttest('validates zsh prediction (#112842)', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\tt.onData('o');\n\t\t\texpectProcessed('o', predictedHelloo);\n\n\t\t\tt.onData('x');\n\t\t\texpectProcessed('\\box', [\n\t\t\t\t`${CSI}?25l`, // hide cursor\n\t\t\t\t`${CSI}2;8H`, // move cursor\n\t\t\t\t'\\box', // new data\n\t\t\t\t`${CSI}2;9H`, // place cursor back at end of line\n\t\t\t\t`${CSI}?25h`, // show cursor\n\t\t\t].join(''));\n\t\t\tassert.strictEqual(addon.stats?.accuracy, 1);\n\t\t});\n\n\t\ttest('does not validate zsh prediction on differing lookbehindn (#112842)', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\tt.onData('o');\n\t\t\texpectProcessed('o', predictedHelloo);\n\n\t\t\tt.onData('x');\n\t\t\texpectProcessed('\\bqx', [\n\t\t\t\t`${CSI}?25l`, // hide cursor\n\t\t\t\t`${CSI}2;8H`, // move cursor cursor\n\t\t\t\t`${CSI}X`, // delete character\n\t\t\t\t`${CSI}0m`, // reset style\n\t\t\t\t'\\bqx', // new data\n\t\t\t\t`${CSI}?25h`, // show cursor\n\t\t\t].join(''));\n\t\t\tassert.strictEqual(addon.stats?.accuracy, 0.5);\n\t\t});\n\n\t\ttest('rolls back character prediction', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\tt.onData('o');\n\n\t\t\texpectProcessed('q', [\n\t\t\t\t`${CSI}?25l`, // hide cursor\n\t\t\t\t`${CSI}2;7H`, // move cursor cursor\n\t\t\t\t`${CSI}X`, // delete character\n\t\t\t\t`${CSI}0m`, // reset style\n\t\t\t\t'q', // new character\n\t\t\t\t`${CSI}?25h`, // show cursor\n\t\t\t].join(''));\n\t\t\tassert.strictEqual(addon.stats?.accuracy, 0);\n\t\t});\n\n\t\ttest('handles left arrow when we hit the boundary', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['|'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\taddon.unlockNavigating();\n\n\t\t\tconst cursorXBefore = addon.physicalCursor(t.terminal.buffer.active)?.x!;\n\t\t\tt.onData(`${CSI}${CursorMoveDirection.Back}`);\n\t\t\tt.expectWritten('');\n\n\t\t\t// Trigger rollback because we don't expect this data\n\t\t\tonBeforeProcessData.fire({ data: 'xy' });\n\n\t\t\tassert.strictEqual(\n\t\t\t\taddon.physicalCursor(t.terminal.buffer.active)?.x,\n\t\t\t\t// The cursor should not have changed because we've hit the\n\t\t\t\t// boundary (start of prompt)\n\t\t\t\tcursorXBefore);\n\t\t});\n\n\t\ttest('handles right arrow when we hit the boundary', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['|'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\taddon.unlockNavigating();\n\n\t\t\tconst cursorXBefore = addon.physicalCursor(t.terminal.buffer.active)?.x!;\n\t\t\tt.onData(`${CSI}${CursorMoveDirection.Forwards}`);\n\t\t\tt.expectWritten('');\n\n\t\t\t// Trigger rollback because we don't expect this data\n\t\t\tonBeforeProcessData.fire({ data: 'xy' });\n\n\t\t\tassert.strictEqual(\n\t\t\t\taddon.physicalCursor(t.terminal.buffer.active)?.x,\n\t\t\t\t// The cursor should not have changed because we've hit the\n\t\t\t\t// boundary (end of prompt)\n\t\t\t\tcursorXBefore);\n\t\t});\n\n\t\ttest('internal cursor state is reset when all predictions are undone', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['|'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\taddon.unlockNavigating();\n\n\t\t\tconst cursorXBefore = addon.physicalCursor(t.terminal.buffer.active)?.x!;\n\t\t\tt.onData(`${CSI}${CursorMoveDirection.Back}`);\n\t\t\tt.expectWritten('');\n\t\t\taddon.undoAllPredictions();\n\n\t\t\tassert.strictEqual(\n\t\t\t\taddon.physicalCursor(t.terminal.buffer.active)?.x,\n\t\t\t\t// The cursor should not have changed because we've hit the\n\t\t\t\t// boundary (start of prompt)\n\t\t\t\tcursorXBefore);\n\t\t});\n\n\t\ttest('restores cursor graphics mode', () => {\n\t\t\tconst t = ds.add(createMockTerminal({\n\t\t\t\tlines: ['hello|'],\n\t\t\t\tcursorAttrs: { isAttributeDefault: false, isBold: true, isFgPalette: true, getFgColor: 1 },\n\t\t\t}));\n\t\t\taddon.activate(t.terminal);\n\t\t\tt.onData('o');\n\n\t\t\texpectProcessed('q', [\n\t\t\t\t`${CSI}?25l`, // hide cursor\n\t\t\t\t`${CSI}2;7H`, // move cursor cursor\n\t\t\t\t`${CSI}X`, // delete character\n\t\t\t\t`${CSI}1;38;5;1m`, // reset style\n\t\t\t\t'q', // new character\n\t\t\t\t`${CSI}?25h`, // show cursor\n\t\t\t].join(''));\n\t\t\tassert.strictEqual(addon.stats?.accuracy, 0);\n\t\t});\n\n\t\ttest('validates against and applies graphics mode on predicted', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\tt.onData('o');\n\t\t\texpectProcessed(`${CSI}4mo`, [\n\t\t\t\t`${CSI}?25l`, // hide cursor\n\t\t\t\t`${CSI}2;7H`, // move cursor\n\t\t\t\t`${CSI}4m`, // new PTY's style\n\t\t\t\t'o', // new character\n\t\t\t\t`${CSI}2;8H`, // place cursor back at end of line\n\t\t\t\t`${CSI}?25h`, // show cursor\n\t\t\t].join(''));\n\t\t\tassert.strictEqual(addon.stats?.accuracy, 1);\n\t\t});\n\n\t\ttest('ignores cursor hides or shows', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\tt.onData('o');\n\t\t\texpectProcessed(`${CSI}?25lo${CSI}?25h`, [\n\t\t\t\t`${CSI}?25l`, // hide cursor from PTY\n\t\t\t\t`${CSI}?25l`, // hide cursor\n\t\t\t\t`${CSI}2;7H`, // move cursor\n\t\t\t\t'o', // new character\n\t\t\t\t`${CSI}?25h`, // show cursor from PTY\n\t\t\t\t`${CSI}2;8H`, // place cursor back at end of line\n\t\t\t\t`${CSI}?25h`, // show cursor\n\t\t\t].join(''));\n\t\t\tassert.strictEqual(addon.stats?.accuracy, 1);\n\t\t});\n\n\t\ttest('matches backspace at EOL (bash style)', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\tt.onData('\\x7F');\n\t\t\texpectProcessed(`\\b${CSI}K`, `\\b${CSI}K`);\n\t\t\tassert.strictEqual(addon.stats?.accuracy, 1);\n\t\t});\n\n\t\ttest('matches backspace at EOL (zsh style)', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\tt.onData('\\x7F');\n\t\t\texpectProcessed('\\b \\b', '\\b \\b');\n\t\t\tassert.strictEqual(addon.stats?.accuracy, 1);\n\t\t});\n\n\t\ttest('gradually matches backspace', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\tt.onData('\\x7F');\n\t\t\texpectProcessed('\\b', '');\n\t\t\texpectProcessed(' \\b', '\\b \\b');\n\t\t\tassert.strictEqual(addon.stats?.accuracy, 1);\n\t\t});\n\n\t\ttest('restores old character after invalid backspace', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hel|lo'] }));\n\t\t\taddon.activate(t.terminal);\n\t\t\taddon.unlockNavigating();\n\t\t\tt.onData('\\x7F');\n\t\t\tt.expectWritten(`${CSI}2;4H${CSI}X`);\n\t\t\texpectProcessed('x', `${CSI}?25l${CSI}0ml${CSI}2;5H${CSI}0mx${CSI}?25h`);\n\t\t\tassert.strictEqual(addon.stats?.accuracy, 0);\n\t\t});\n\n\t\ttest('waits for validation before deleting to left of cursor', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.activate(t.terminal);\n\n\t\t\t// initially should not backspace (until the server confirms it)\n\t\t\tt.onData('\\x7F');\n\t\t\tt.expectWritten('');\n\t\t\texpectProcessed('\\b \\b', '\\b \\b');\n\t\t\tt.cursor.x--;\n\n\t\t\t// enter input on the column...\n\t\t\tt.onData('o');\n\t\t\tonBeforeProcessData.fire({ data: 'o' });\n\t\t\tt.cursor.x++;\n\t\t\tt.clearWritten();\n\n\t\t\t// now that the column is 'unlocked', we should be able to predict backspace on it\n\t\t\tt.onData('\\x7F');\n\t\t\tt.expectWritten(`${CSI}2;6H${CSI}X`);\n\t\t});\n\n\t\ttest('waits for first valid prediction on a line', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.lockMakingPredictions();\n\t\t\taddon.activate(t.terminal);\n\n\t\t\tt.onData('o');\n\t\t\tt.expectWritten('');\n\t\t\texpectProcessed('o', 'o');\n\n\t\t\tt.onData('o');\n\t\t\tt.expectWritten(`${CSI}3mo${CSI}23m`);\n\t\t});\n\n\t\ttest('disables on title change', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.activate(t.terminal);\n\n\t\t\taddon.reevaluateNow();\n\t\t\tassert.strictEqual(addon.isShowing, true, 'expected to show initially');\n\n\t\t\tt.onTitleChange.fire('foo - VIM.exe');\n\t\t\taddon.reevaluateNow();\n\t\t\tassert.strictEqual(addon.isShowing, false, 'expected to hide when vim is open');\n\n\t\t\tt.onTitleChange.fire('foo - git.exe');\n\t\t\taddon.reevaluateNow();\n\t\t\tassert.strictEqual(addon.isShowing, true, 'expected to show again after vim closed');\n\t\t});\n\n\t\ttest('adds line wrap prediction even if behind a boundary', () => {\n\t\t\tconst t = ds.add(createMockTerminal({ lines: ['hello|'] }));\n\t\t\taddon.lockMakingPredictions();\n\t\t\taddon.activate(t.terminal);\n\n\t\t\tt.onData('hi'.repeat(50));\n\t\t\tt.expectWritten('');\n\t\t\texpectProcessed('hi', [\n\t\t\t\t`${CSI}?25l`, // hide cursor\n\t\t\t\t'hi', // this greeting characters\n\t\t\t\t...new Array(36).fill(`${CSI}3mh${CSI}23m${CSI}3mi${CSI}23m`), // rest of the greetings that fit on this line\n\t\t\t\t`${CSI}2;81H`, // move to end of line\n\t\t\t\t`${CSI}?25h`\n\t\t\t].join(''));\n\t\t});\n\t});\n});\n\nclass TestTypeAheadAddon extends TypeAheadAddon {\n\tunlockMakingPredictions() {\n\t\tthis._lastRow = { y: 1, startingX: 100, endingX: 100, charState: CharPredictState.Validated };\n\t}\n\n\tlockMakingPredictions() {\n\t\tthis._lastRow = undefined;\n\t}\n\n\tunlockNavigating() {\n\t\tthis._lastRow = { y: 1, startingX: 1, endingX: 1, charState: CharPredictState.Validated };\n\t}\n\n\treevaluateNow() {\n\t\tthis._reevaluatePredictorStateNow(this.stats!, this._timeline!);\n\t}\n\n\tget isShowing() {\n\t\treturn !!this._timeline?.isShowingPredictions;\n\t}\n\n\tundoAllPredictions() {\n\t\tthis._timeline?.undoAllPredictions();\n\t}\n\n\tphysicalCursor(buffer: IBuffer) {\n\t\treturn this._timeline?.physicalCursor(buffer);\n\t}\n\n\ttentativeCursor(buffer: IBuffer) {\n\t\treturn this._timeline?.tentativeCursor(buffer);\n\t}\n}\n\nfunction upcastPartial<T>(v: Partial<T>): T {\n\treturn v as T;\n}\n\nfunction createPredictionStubs(n: number) {\n\treturn new Array(n).fill(0).map(stubPrediction);\n}\n\nfunction stubPrediction(): IPrediction {\n\treturn {\n\t\tapply: () => '',\n\t\trollback: () => '',\n\t\tmatches: () => 0,\n\t\trollForwards: () => '',\n\t};\n}\n\nfunction createMockTerminal({ lines, cursorAttrs }: {\n\tlines: string[];\n\tcursorAttrs?: any;\n}) {\n\tconst ds = new DisposableStore();\n\tconst written: string[] = [];\n\tconst cursor = { y: 1, x: 1 };\n\tconst onTitleChange = ds.add(new Emitter<string>());\n\tconst onData = ds.add(new Emitter<string>());\n\tconst csiEmitter = ds.add(new Emitter<number[]>());\n\n\tfor (let y = 0; y < lines.length; y++) {\n\t\tconst line = lines[y];\n\t\tif (line.includes('|')) {\n\t\t\tcursor.y = y + 1;\n\t\t\tcursor.x = line.indexOf('|') + 1;\n\t\t\tlines[y] = line.replace('|', ''); // CodeQL [SM02383] replacing the first occurrence is intended\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn {\n\t\twritten,\n\t\tcursor,\n\t\texpectWritten: (s: string) => {\n\t\t\tassert.strictEqual(JSON.stringify(written.join('')), JSON.stringify(s));\n\t\t\twritten.splice(0, written.length);\n\t\t},\n\t\tclearWritten: () => written.splice(0, written.length),\n\t\tonData: (s: string) => onData.fire(s),\n\t\tcsiEmitter,\n\t\tonTitleChange,\n\t\tdispose: () => ds.dispose(),\n\t\tterminal: {\n\t\t\tcols: 80,\n\t\t\trows: 5,\n\t\t\tonResize: new Emitter<void>().event,\n\t\t\tonData: onData.event,\n\t\t\tonTitleChange: onTitleChange.event,\n\t\t\tparser: {\n\t\t\t\tregisterCsiHandler(_: unknown, callback: () => void) {\n\t\t\t\t\tds.add(csiEmitter.event(callback));\n\t\t\t\t},\n\t\t\t},\n\t\t\twrite(line: string) {\n\t\t\t\twritten.push(line);\n\t\t\t},\n\t\t\t_core: {\n\t\t\t\t_inputHandler: {\n\t\t\t\t\t_curAttrData: mockCell('', cursorAttrs)\n\t\t\t\t},\n\t\t\t\twriteSync() {\n\n\t\t\t\t}\n\t\t\t},\n\t\t\tbuffer: {\n\t\t\t\tactive: {\n\t\t\t\t\ttype: 'normal',\n\t\t\t\t\tbaseY: 0,\n\t\t\t\t\tget cursorY() { return cursor.y; },\n\t\t\t\t\tget cursorX() { return cursor.x; },\n\t\t\t\t\tgetLine(y: number) {\n\t\t\t\t\t\tconst s = lines[y - 1] || '';\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tlength: s.length,\n\t\t\t\t\t\t\tgetCell: (x: number) => mockCell(s[x - 1] || ''),\n\t\t\t\t\t\t\ttranslateToString: (trim: boolean, start = 0, end = s.length) => {\n\t\t\t\t\t\t\t\tconst out = s.slice(start, end);\n\t\t\t\t\t\t\t\treturn trim ? out.trimRight() : out;\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t},\n\t\t\t\t}\n\t\t\t}\n\t\t} as unknown as Terminal\n\t};\n}\n\nfunction mockCell(char: string, attrs: { [key: string]: unknown } = {}) {\n\treturn new Proxy({}, {\n\t\tget(_, prop) {\n\t\t\tif (typeof prop === 'string' && attrs.hasOwnProperty(prop)) {\n\t\t\t\treturn () => attrs[prop];\n\t\t\t}\n\n\t\t\tswitch (prop) {\n\t\t\t\tcase 'getWidth':\n\t\t\t\t\treturn () => 1;\n\t\t\t\tcase 'getChars':\n\t\t\t\t\treturn () => char;\n\t\t\t\tcase 'getCode':\n\t\t\t\t\treturn () => char.charCodeAt(0) || 0;\n\t\t\t\tcase 'isAttributeDefault':\n\t\t\t\t\treturn () => true;\n\t\t\t\tdefault:\n\t\t\t\t\treturn String(prop).startsWith('is') ? (() => false) : (() => 0);\n\t\t\t}\n\t\t},\n\t});\n}\n"]}