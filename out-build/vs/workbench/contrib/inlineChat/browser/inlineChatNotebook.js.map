{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/inlineChat/browser/inlineChatNotebook.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAYzF,IAAM,IAAI,GAAV,MAAM,IAAI;QAIhB,YAC4B,cAAoB,EACvB,qBAA2B;YAJnC,MAAC,GAAQ,IAAI,eAAG,EAAc,CAAC;YAO/C,IAAI,CAAC,CAAC,CAAM,GAAG,CAAC,cAAc,CAAC,0BAA0B,CAAC,iBAAO,CAAC,kBAAkB,EAAE;gBACrF,gBAAgB,EAAE,CAAC,OAAO,EAAE,GAAG,EAAE,EAAE;oBAClC,MAAM,IAAI,GAAG,wBAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;oBAChC,IAAI,CAAC,IAAI,EAAE;wBACV,MAAM,IAAA,WAAE,EAAW,mBAAmB,CAAC,CAAC;qBACxC;oBACD,KAAK,MAAM,MAAM,IAAI,qBAAqB,CAAC,mBAAmB,EAAE,EAAE;wBACjE,IAAI,IAAA,eAAG,EAAK,MAAM,CAAC,SAAS,EAAE,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,EAAE;4BAClD,OAAO,aAAa,MAAM,CAAC,KAAK,EAAE,IAAI,GAAG,EAAE,CAAC;yBAC5C;qBACD;oBACD,MAAM,IAAA,WAAE,EAAW,mBAAmB,CAAC,CAAC;gBACzC,CAAC;aACD,CAAC,CAAC,CAAC;YAEJ,IAAI,CAAC,CAAC,CAAM,GAAG,CAAC,cAAc,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,EAAE;gBACpE,MAAM,SAAS,GAAG,wBAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,CAAC;gBACjE,IAAI,CAAC,SAAS,EAAE;oBACf,OAAO;iBACP;gBACD,KAAK,MAAM,cAAc,IAAI,qBAAqB,CAAC,mBAAmB,EAAE,EAAE;oBACzE,IAAI,IAAA,eAAG,EAAK,cAAc,CAAC,SAAS,EAAE,GAAG,EAAE,SAAS,CAAC,QAAQ,CAAC,EAAE;wBAC/D,IAAI,KAAK,GAAG,KAAK,CAAC;wBAClB,MAAM,OAAO,GAAkB,EAAE,CAAC;wBAClC,KAAK,MAAM,CAAC,EAAE,UAAU,CAAC,IAAI,cAAc,CAAC,WAAW,EAAE;4BACxD,OAAO,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;4BACzB,KAAK,GAAG,UAAU,KAAK,gBAAgB,IAAI,KAAK,CAAC;yBACjD;wBACD,IAAI,KAAK,EAAE;4BACV,qEAAqE;4BACrE,8BAA8B;4BAC9B,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;gCAC7B,IAAI,MAAM,KAAK,gBAAgB,EAAE;oCAChC,2BAAI,CAAiB,GAAG,CAAC,MAAM,CAAC,EAAE,qBAAqB,EAAE,CAAC;iCAC1D;6BACD;4BACD,MAAM;yBACN;qBACD;iBACD;YACF,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAED,OAAO;YACN,IAAI,CAAC,CAAC,CAAM,OAAO,EAAE,CAAC;QACvB,CAAC;KACD,CAAA;IAvDY,oBAAI;mBAAJ,IAAI;QAKd,WAAA,wBAAI,CAAA;QACJ,WAAA,4BAAI,CAAA;OANM,IAAI,CAuDhB","file":"inlineChatNotebook.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { illegalState } from 'vs/base/common/errors';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport { isEqual } from 'vs/base/common/resources';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { InlineChatController } from 'vs/workbench/contrib/inlineChat/browser/inlineChatController';\nimport { IInlineChatSessionService } from 'vs/workbench/contrib/inlineChat/browser/inlineChatSession';\nimport { INotebookEditorService } from 'vs/workbench/contrib/notebook/browser/services/notebookEditorService';\nimport { CellUri } from 'vs/workbench/contrib/notebook/common/notebookCommon';\n\nexport class InlineChatNotebookContribution {\n\n\tprivate readonly _store = new DisposableStore();\n\n\tconstructor(\n\t\t@IInlineChatSessionService sessionService: IInlineChatSessionService,\n\t\t@INotebookEditorService notebookEditorService: INotebookEditorService,\n\t) {\n\n\t\tthis._store.add(sessionService.registerSessionKeyComputer(Schemas.vscodeNotebookCell, {\n\t\t\tgetComparisonKey: (_editor, uri) => {\n\t\t\t\tconst data = CellUri.parse(uri);\n\t\t\t\tif (!data) {\n\t\t\t\t\tthrow illegalState('Expected notebook');\n\t\t\t\t}\n\t\t\t\tfor (const editor of notebookEditorService.listNotebookEditors()) {\n\t\t\t\t\tif (isEqual(editor.textModel?.uri, data.notebook)) {\n\t\t\t\t\t\treturn `<notebook>${editor.getId()}#${uri}`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthrow illegalState('Expected notebook');\n\t\t\t}\n\t\t}));\n\n\t\tthis._store.add(sessionService.onWillStartSession(newSessionEditor => {\n\t\t\tconst candidate = CellUri.parse(newSessionEditor.getModel().uri);\n\t\t\tif (!candidate) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tfor (const notebookEditor of notebookEditorService.listNotebookEditors()) {\n\t\t\t\tif (isEqual(notebookEditor.textModel?.uri, candidate.notebook)) {\n\t\t\t\t\tlet found = false;\n\t\t\t\t\tconst editors: ICodeEditor[] = [];\n\t\t\t\t\tfor (const [, codeEditor] of notebookEditor.codeEditors) {\n\t\t\t\t\t\teditors.push(codeEditor);\n\t\t\t\t\t\tfound = codeEditor === newSessionEditor || found;\n\t\t\t\t\t}\n\t\t\t\t\tif (found) {\n\t\t\t\t\t\t// found the this editor in the outer notebook editor -> make sure to\n\t\t\t\t\t\t// cancel all sibling sessions\n\t\t\t\t\t\tfor (const editor of editors) {\n\t\t\t\t\t\t\tif (editor !== newSessionEditor) {\n\t\t\t\t\t\t\t\tInlineChatController.get(editor)?.finishExistingSession();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tdispose(): void {\n\t\tthis._store.dispose();\n\t}\n}\n"]}