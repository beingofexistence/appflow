{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/inlineChat/test/browser/inlineChatController.test.ts"],"names":[],"mappings":"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","file":"inlineChatController.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { equals } from 'vs/base/common/arrays';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { mock } from 'vs/base/test/common/mock';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { TestDiffProviderFactoryService } from 'vs/editor/browser/diff/testDiffProviderFactoryService';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { IDiffProviderFactoryService } from 'vs/editor/browser/widget/diffEditor/diffProviderFactoryService';\nimport { Range } from 'vs/editor/common/core/range';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { instantiateTestCodeEditor } from 'vs/editor/test/browser/testCodeEditor';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { MockContextKeyService } from 'vs/platform/keybinding/test/common/mockKeybindingService';\nimport { IEditorProgressService, IProgressRunner } from 'vs/platform/progress/common/progress';\nimport { AccessibilityVerbositySettingId } from 'vs/workbench/contrib/accessibility/browser/accessibilityConfiguration';\nimport { IAccessibleViewService } from 'vs/workbench/contrib/accessibility/browser/accessibleView';\nimport { IChatAccessibilityService } from 'vs/workbench/contrib/chat/browser/chat';\nimport { IChatResponseViewModel } from 'vs/workbench/contrib/chat/common/chatViewModel';\nimport { InlineChatController, InlineChatRunOptions, State } from 'vs/workbench/contrib/inlineChat/browser/inlineChatController';\nimport { IInlineChatSessionService, InlineChatSessionService } from 'vs/workbench/contrib/inlineChat/browser/inlineChatSession';\nimport { IInlineChatService, InlineChatResponseType } from 'vs/workbench/contrib/inlineChat/common/inlineChat';\nimport { InlineChatServiceImpl } from 'vs/workbench/contrib/inlineChat/common/inlineChatServiceImpl';\nimport { workbenchInstantiationService } from 'vs/workbench/test/browser/workbenchTestServices';\n\nsuite('InteractiveChatController', function () {\n\tclass TestController extends InlineChatController {\n\n\t\tstatic INIT_SEQUENCE: readonly State[] = [State.CREATE_SESSION, State.INIT_UI, State.WAIT_FOR_INPUT];\n\t\tstatic INIT_SEQUENCE_AUTO_SEND: readonly State[] = [...this.INIT_SEQUENCE, State.MAKE_REQUEST, State.APPLY_RESPONSE, State.SHOW_RESPONSE, State.WAIT_FOR_INPUT];\n\n\t\tprivate readonly _onDidChangeState = new Emitter<State>();\n\t\treadonly onDidChangeState: Event<State> = this._onDidChangeState.event;\n\n\t\treadonly states: readonly State[] = [];\n\n\t\twaitFor(states: readonly State[]): Promise<void> {\n\t\t\tconst actual: State[] = [];\n\n\t\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\t\tconst d = this.onDidChangeState(state => {\n\t\t\t\t\tactual.push(state);\n\t\t\t\t\tif (equals(states, actual)) {\n\t\t\t\t\t\td.dispose();\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\td.dispose();\n\t\t\t\t\treject(`timeout, \\nWANTED ${states.join('>')}, \\nGOT ${actual.join('>')}`);\n\t\t\t\t}, 1000);\n\t\t\t});\n\t\t}\n\n\t\tprotected override async _nextState(state: State, options: InlineChatRunOptions): Promise<void> {\n\t\t\tlet nextState: State | void = state;\n\t\t\twhile (nextState) {\n\t\t\t\tthis._onDidChangeState.fire(nextState);\n\t\t\t\t(<State[]>this.states).push(nextState);\n\t\t\t\tnextState = await this[nextState](options);\n\t\t\t}\n\t\t}\n\n\t\toverride dispose() {\n\t\t\tsuper.dispose();\n\t\t\tthis._onDidChangeState.dispose();\n\t\t}\n\t}\n\n\tconst store = new DisposableStore();\n\tlet editor: ICodeEditor;\n\tlet model: ITextModel;\n\tlet ctrl: TestController;\n\t// let contextKeys: MockContextKeyService;\n\tlet inlineChatService: InlineChatServiceImpl;\n\tlet inlineChatSessionService: IInlineChatSessionService;\n\tlet instaService: TestInstantiationService;\n\n\tsetup(function () {\n\n\t\tconst contextKeyService = new MockContextKeyService();\n\t\tinlineChatService = new InlineChatServiceImpl(contextKeyService);\n\n\t\tconst serviceCollection = new ServiceCollection(\n\t\t\t[IContextKeyService, contextKeyService],\n\t\t\t[IInlineChatService, inlineChatService],\n\t\t\t[IDiffProviderFactoryService, new SyncDescriptor(TestDiffProviderFactoryService)],\n\t\t\t[IInlineChatSessionService, new SyncDescriptor(InlineChatSessionService)],\n\t\t\t[IEditorProgressService, new class extends mock<IEditorProgressService>() {\n\t\t\t\toverride show(total: unknown, delay?: unknown): IProgressRunner {\n\t\t\t\t\treturn {\n\t\t\t\t\t\ttotal() { },\n\t\t\t\t\t\tworked(value) { },\n\t\t\t\t\t\tdone() { },\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}],\n\t\t\t[IChatAccessibilityService, new class extends mock<IChatAccessibilityService>() {\n\t\t\t\toverride acceptResponse(response?: IChatResponseViewModel): void { }\n\t\t\t\toverride acceptRequest(): void { }\n\t\t\t}],\n\t\t\t[IAccessibleViewService, new class extends mock<IAccessibleViewService>() {\n\t\t\t\toverride getOpenAriaHint(verbositySettingKey: AccessibilityVerbositySettingId): string | null {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t}]\n\t\t);\n\n\t\tinstaService = store.add(workbenchInstantiationService(undefined, store).createChild(serviceCollection));\n\t\tinlineChatSessionService = store.add(instaService.get(IInlineChatSessionService));\n\n\t\tmodel = store.add(instaService.get(IModelService).createModel('Hello\\nWorld\\nHello Again\\nHello World\\n', null));\n\t\teditor = store.add(instantiateTestCodeEditor(instaService, model));\n\n\t\tstore.add(inlineChatService.addProvider({\n\t\t\tdebugName: 'Unit Test',\n\t\t\tlabel: 'Unit Test',\n\t\t\tprepareInlineChatSession() {\n\t\t\t\treturn {\n\t\t\t\t\tid: Math.random()\n\t\t\t\t};\n\t\t\t},\n\t\t\tprovideResponse(session, request) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: InlineChatResponseType.EditorEdit,\n\t\t\t\t\tid: Math.random(),\n\t\t\t\t\tedits: [{\n\t\t\t\t\t\trange: new Range(1, 1, 1, 1),\n\t\t\t\t\t\ttext: request.prompt\n\t\t\t\t\t}]\n\t\t\t\t};\n\t\t\t}\n\t\t}));\n\t});\n\n\tteardown(function () {\n\t\tstore.clear();\n\t\tctrl?.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('creation, not showing anything', function () {\n\t\tctrl = instaService.createInstance(TestController, editor);\n\t\tassert.ok(ctrl);\n\t\tassert.strictEqual(ctrl.getWidgetPosition(), undefined);\n\t});\n\n\ttest('run (show/hide)', async function () {\n\t\tctrl = instaService.createInstance(TestController, editor);\n\t\tconst p = ctrl.waitFor(TestController.INIT_SEQUENCE_AUTO_SEND);\n\t\tconst run = ctrl.run({ message: 'Hello', autoSend: true });\n\t\tawait p;\n\t\tassert.ok(ctrl.getWidgetPosition() !== undefined);\n\t\tctrl.cancelSession();\n\n\t\tawait run;\n\n\t\tassert.ok(ctrl.getWidgetPosition() === undefined);\n\t});\n\n\ttest('wholeRange expands to whole lines, editor selection default', async function () {\n\n\t\teditor.setSelection(new Range(1, 1, 1, 3));\n\t\tctrl = instaService.createInstance(TestController, editor);\n\n\t\tconst d = inlineChatService.addProvider({\n\t\t\tdebugName: 'Unit Test',\n\t\t\tlabel: 'Unit Test',\n\t\t\tprepareInlineChatSession() {\n\t\t\t\treturn {\n\t\t\t\t\tid: Math.random()\n\t\t\t\t};\n\t\t\t},\n\t\t\tprovideResponse(session, request) {\n\t\t\t\tthrow new Error();\n\t\t\t}\n\t\t});\n\n\t\tctrl.run({});\n\t\tawait Event.toPromise(Event.filter(ctrl.onDidChangeState, e => e === State.WAIT_FOR_INPUT));\n\n\t\tconst session = inlineChatSessionService.getSession(editor, editor.getModel()!.uri);\n\t\tassert.ok(session);\n\t\tassert.deepStrictEqual(session.wholeRange.value, new Range(1, 1, 1, 6));\n\n\t\tctrl.cancelSession();\n\t\td.dispose();\n\t});\n\n\ttest('wholeRange expands to whole lines, session provided', async function () {\n\n\t\teditor.setSelection(new Range(1, 1, 1, 1));\n\t\tctrl = instaService.createInstance(TestController, editor);\n\n\t\tconst d = inlineChatService.addProvider({\n\t\t\tdebugName: 'Unit Test',\n\t\t\tlabel: 'Unit Test',\n\t\t\tprepareInlineChatSession() {\n\t\t\t\treturn {\n\t\t\t\t\tid: Math.random(),\n\t\t\t\t\twholeRange: new Range(1, 1, 1, 3)\n\t\t\t\t};\n\t\t\t},\n\t\t\tprovideResponse(session, request) {\n\t\t\t\tthrow new Error();\n\t\t\t}\n\t\t});\n\n\t\tctrl.run({});\n\t\tawait Event.toPromise(Event.filter(ctrl.onDidChangeState, e => e === State.WAIT_FOR_INPUT));\n\n\t\tconst session = inlineChatSessionService.getSession(editor, editor.getModel()!.uri);\n\t\tassert.ok(session);\n\t\tassert.deepStrictEqual(session.wholeRange.value, new Range(1, 1, 1, 6));\n\n\t\tctrl.cancelSession();\n\t\td.dispose();\n\t});\n\n\ttest('typing outside of wholeRange finishes session', async function () {\n\t\tctrl = instaService.createInstance(TestController, editor);\n\t\tconst p = ctrl.waitFor(TestController.INIT_SEQUENCE_AUTO_SEND);\n\t\tconst r = ctrl.run({ message: 'Hello', autoSend: true });\n\n\t\tawait p;\n\n\t\tconst session = inlineChatSessionService.getSession(editor, editor.getModel()!.uri);\n\t\tassert.ok(session);\n\t\tassert.deepStrictEqual(session.wholeRange.value, new Range(1, 1, 1, 11));\n\n\t\teditor.setSelection(new Range(2, 1, 2, 1));\n\t\teditor.trigger('test', 'type', { text: 'a' });\n\n\t\tawait ctrl.waitFor([State.ACCEPT]);\n\t\tawait r;\n\t});\n\n\ttest('\\'whole range\\' isn\\'t updated for edits outside whole range #4346', async function () {\n\n\t\teditor.setSelection(new Range(3, 1, 3, 1));\n\n\t\tconst d = inlineChatService.addProvider({\n\t\t\tdebugName: 'Unit Test',\n\t\t\tlabel: 'Unit Test',\n\t\t\tprepareInlineChatSession() {\n\t\t\t\treturn {\n\t\t\t\t\tid: Math.random(),\n\t\t\t\t\twholeRange: new Range(3, 1, 3, 3)\n\t\t\t\t};\n\t\t\t},\n\t\t\tprovideResponse(session, request) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: InlineChatResponseType.EditorEdit,\n\t\t\t\t\tid: Math.random(),\n\t\t\t\t\tedits: [{\n\t\t\t\t\t\trange: new Range(1, 1, 1, 1), // EDIT happens outside of whole range\n\t\t\t\t\t\ttext: `${request.prompt}\\n${request.prompt}`\n\t\t\t\t\t}]\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t\tstore.add(d);\n\t\tctrl = instaService.createInstance(TestController, editor);\n\t\tconst p = ctrl.waitFor(TestController.INIT_SEQUENCE);\n\t\tconst r = ctrl.run({ message: 'Hello', autoSend: false });\n\n\t\tawait p;\n\n\t\tconst session = inlineChatSessionService.getSession(editor, editor.getModel()!.uri);\n\t\tassert.ok(session);\n\t\tassert.deepStrictEqual(session.wholeRange.value, new Range(3, 1, 3, 12));\n\n\t\tctrl.acceptInput();\n\n\t\tawait ctrl.waitFor([State.MAKE_REQUEST, State.APPLY_RESPONSE, State.SHOW_RESPONSE, State.WAIT_FOR_INPUT]);\n\n\t\tassert.deepStrictEqual(session.wholeRange.value, new Range(1, 1, 4, 12));\n\n\t\tctrl.cancelSession();\n\t\tawait r;\n\t});\n\n\ttest('Stuck inline chat widget #211', async function () {\n\t\tconst d = inlineChatService.addProvider({\n\t\t\tdebugName: 'Unit Test',\n\t\t\tlabel: 'Unit Test',\n\t\t\tprepareInlineChatSession() {\n\t\t\t\treturn {\n\t\t\t\t\tid: Math.random(),\n\t\t\t\t\twholeRange: new Range(3, 1, 3, 3)\n\t\t\t\t};\n\t\t\t},\n\t\t\tprovideResponse(session, request) {\n\t\t\t\treturn new Promise<never>(() => { });\n\t\t\t}\n\t\t});\n\t\tstore.add(d);\n\t\tctrl = instaService.createInstance(TestController, editor);\n\t\tconst p = ctrl.waitFor([...TestController.INIT_SEQUENCE, State.MAKE_REQUEST]);\n\t\tconst r = ctrl.run({ message: 'Hello', autoSend: true });\n\n\t\tawait p;\n\t\tctrl.acceptSession();\n\n\t\tawait r;\n\t\tassert.strictEqual(ctrl.getWidgetPosition(), undefined);\n\t});\n});\n"]}