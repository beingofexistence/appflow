{"version":3,"sources":["vs/workbench/contrib/inlineChat/common/inlineChat.ts"],"names":[],"mappings":"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","file":"inlineChat.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { IRange } from 'vs/editor/common/core/range';\nimport { ISelection } from 'vs/editor/common/core/selection';\nimport { Event } from 'vs/base/common/event';\nimport { ProviderResult, TextEdit, WorkspaceEdit } from 'vs/editor/common/languages';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { localize } from 'vs/nls';\nimport { MenuId } from 'vs/platform/actions/common/actions';\nimport { Extensions, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport { RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IProgress } from 'vs/platform/progress/common/progress';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { diffInserted, diffRemoved, editorHoverHighlight, editorWidgetBackground, editorWidgetBorder, focusBorder, inputBackground, inputPlaceholderForeground, registerColor, transparent, widgetShadow } from 'vs/platform/theme/common/colorRegistry';\nimport { Extensions as ExtensionsMigration, IConfigurationMigrationRegistry } from 'vs/workbench/common/configuration';\n\nexport interface IInlineChatSlashCommand {\n\tcommand: string;\n\tdetail?: string;\n\trefer?: boolean;\n\texecuteImmediately?: boolean;\n}\n\nexport interface IInlineChatSession {\n\tid: number;\n\tplaceholder?: string;\n\tmessage?: string;\n\tslashCommands?: IInlineChatSlashCommand[];\n\twholeRange?: IRange;\n}\n\nexport interface IInlineChatRequest {\n\tprompt: string;\n\tselection: ISelection;\n\twholeRange: IRange;\n\tattempt: number;\n\trequestId: string;\n\tlive: boolean;\n}\n\nexport type IInlineChatResponse = IInlineChatEditResponse | IInlineChatBulkEditResponse | IInlineChatMessageResponse;\n\nexport const enum InlineChatResponseType {\n\tEditorEdit = 'editorEdit',\n\tBulkEdit = 'bulkEdit',\n\tMessage = 'message'\n}\n\nexport const enum InlineChateResponseTypes {\n\tOnlyMessages = 'onlyMessages',\n\tOnlyEdits = 'onlyEdits',\n\tMixed = 'mixed'\n}\n\nexport interface IInlineChatEditResponse {\n\tid: number;\n\ttype: InlineChatResponseType.EditorEdit;\n\tedits: TextEdit[];\n\tplaceholder?: string;\n\twholeRange?: IRange;\n}\n\nexport interface IInlineChatBulkEditResponse {\n\tid: number;\n\ttype: InlineChatResponseType.BulkEdit;\n\tedits: WorkspaceEdit;\n\tplaceholder?: string;\n\twholeRange?: IRange;\n}\n\nexport interface IInlineChatMessageResponse {\n\tid: number;\n\ttype: InlineChatResponseType.Message;\n\tmessage: IMarkdownString;\n\tplaceholder?: string;\n\twholeRange?: IRange;\n}\n\nexport interface IInlineChatProgressItem {\n\tedits?: TextEdit[];\n\tmessage?: string;\n}\n\nexport const enum InlineChatResponseFeedbackKind {\n\tUnhelpful = 0,\n\tHelpful = 1,\n\tUndone = 2,\n\tAccepted = 3\n}\n\nexport interface IInlineChatSessionProvider {\n\n\tdebugName: string;\n\tlabel: string;\n\n\tprepareInlineChatSession(model: ITextModel, range: ISelection, token: CancellationToken): ProviderResult<IInlineChatSession>;\n\n\tprovideResponse(item: IInlineChatSession, request: IInlineChatRequest, progress: IProgress<IInlineChatProgressItem>, token: CancellationToken): ProviderResult<IInlineChatResponse>;\n\n\thandleInlineChatResponseFeedback?(session: IInlineChatSession, response: IInlineChatResponse, kind: InlineChatResponseFeedbackKind): void;\n}\n\nexport const IInlineChatService = createDecorator<IInlineChatService>('IInlineChatService');\n\nexport interface IInlineChatService {\n\t_serviceBrand: undefined;\n\n\tonDidChangeProviders: Event<void>;\n\taddProvider(provider: IInlineChatSessionProvider): IDisposable;\n\tgetAllProvider(): Iterable<IInlineChatSessionProvider>;\n}\n\nexport const INLINE_CHAT_ID = 'interactiveEditor';\nexport const INTERACTIVE_EDITOR_ACCESSIBILITY_HELP_ID = 'interactiveEditorAccessiblityHelp';\n\nexport const CTX_INLINE_CHAT_HAS_PROVIDER = new RawContextKey<boolean>('inlineChatHasProvider', false, localize('inlineChatHasProvider', \"Whether a provider for interactive editors exists\"));\nexport const CTX_INLINE_CHAT_VISIBLE = new RawContextKey<boolean>('inlineChatVisible', false, localize('inlineChatVisible', \"Whether the interactive editor input is visible\"));\nexport const CTX_INLINE_CHAT_FOCUSED = new RawContextKey<boolean>('inlineChatFocused', false, localize('inlineChatFocused', \"Whether the interactive editor input is focused\"));\nexport const CTX_INLINE_CHAT_RESPONSE_FOCUSED = new RawContextKey<boolean>('inlineChatResponseFocused', false, localize('inlineChatResponseFocused', \"Whether the interactive widget's response is focused\"));\nexport const CTX_INLINE_CHAT_EMPTY = new RawContextKey<boolean>('inlineChatEmpty', false, localize('inlineChatEmpty', \"Whether the interactive editor input is empty\"));\nexport const CTX_INLINE_CHAT_INNER_CURSOR_FIRST = new RawContextKey<boolean>('inlineChatInnerCursorFirst', false, localize('inlineChatInnerCursorFirst', \"Whether the cursor of the iteractive editor input is on the first line\"));\nexport const CTX_INLINE_CHAT_INNER_CURSOR_LAST = new RawContextKey<boolean>('inlineChatInnerCursorLast', false, localize('inlineChatInnerCursorLast', \"Whether the cursor of the iteractive editor input is on the last line\"));\nexport const CTX_INLINE_CHAT_INNER_CURSOR_START = new RawContextKey<boolean>('inlineChatInnerCursorStart', false, localize('inlineChatInnerCursorStart', \"Whether the cursor of the iteractive editor input is on the start of the input\"));\nexport const CTX_INLINE_CHAT_INNER_CURSOR_END = new RawContextKey<boolean>('inlineChatInnerCursorEnd', false, localize('inlineChatInnerCursorEnd', \"Whether the cursor of the iteractive editor input is on the end of the input\"));\nexport const CTX_INLINE_CHAT_MESSAGE_CROP_STATE = new RawContextKey<'cropped' | 'not_cropped' | 'expanded'>('inlineChatMarkdownMessageCropState', 'not_cropped', localize('inlineChatMarkdownMessageCropState', \"Whether the interactive editor message is cropped, not cropped or expanded\"));\nexport const CTX_INLINE_CHAT_OUTER_CURSOR_POSITION = new RawContextKey<'above' | 'below' | ''>('inlineChatOuterCursorPosition', '', localize('inlineChatOuterCursorPosition', \"Whether the cursor of the outer editor is above or below the interactive editor input\"));\nexport const CTX_INLINE_CHAT_HAS_ACTIVE_REQUEST = new RawContextKey<boolean>('inlineChatHasActiveRequest', false, localize('inlineChatHasActiveRequest', \"Whether interactive editor has an active request\"));\nexport const CTX_INLINE_CHAT_HAS_STASHED_SESSION = new RawContextKey<boolean>('inlineChatHasStashedSession', false, localize('inlineChatHasStashedSession', \"Whether interactive editor has kept a session for quick restore\"));\nexport const CTX_INLINE_CHAT_LAST_RESPONSE_TYPE = new RawContextKey<InlineChatResponseType | undefined>('inlineChatLastResponseType', undefined, localize('inlineChatResponseType', \"What type was the last response of the current interactive editor session\"));\nexport const CTX_INLINE_CHAT_RESPONSE_TYPES = new RawContextKey<InlineChateResponseTypes | undefined>('inlineChatResponseTypes', undefined, localize('inlineChatResponseTypes', \"What type was the responses have been receieved\"));\nexport const CTX_INLINE_CHAT_DID_EDIT = new RawContextKey<boolean>('inlineChatDidEdit', undefined, localize('inlineChatDidEdit', \"Whether interactive editor did change any code\"));\nexport const CTX_INLINE_CHAT_USER_DID_EDIT = new RawContextKey<boolean>('inlineChatUserDidEdit', undefined, localize('inlineChatUserDidEdit', \"Whether the user did changes ontop of the inline chat\"));\nexport const CTX_INLINE_CHAT_LAST_FEEDBACK = new RawContextKey<'unhelpful' | 'helpful' | ''>('inlineChatLastFeedbackKind', '', localize('inlineChatLastFeedbackKind', \"The last kind of feedback that was provided\"));\nexport const CTX_INLINE_CHAT_DOCUMENT_CHANGED = new RawContextKey<boolean>('inlineChatDocumentChanged', false, localize('inlineChatDocumentChanged', \"Whether the document has changed concurrently\"));\nexport const CTX_INLINE_CHAT_EDIT_MODE = new RawContextKey<EditMode>('config.inlineChat.editMode', EditMode.Live);\n\n// --- (select) action identifier\n\nexport const ACTION_ACCEPT_CHANGES = 'interactive.acceptChanges';\nexport const ACTION_REGENERATE_RESPONSE = 'inlineChat.regenerate';\nexport const ACTION_VIEW_IN_CHAT = 'inlineChat.viewInChat';\n\n// --- menus\n\nexport const MENU_INLINE_CHAT_WIDGET = MenuId.for('inlineChatWidget');\nexport const MENU_INLINE_CHAT_WIDGET_MARKDOWN_MESSAGE = MenuId.for('inlineChatWidget.markdownMessage');\nexport const MENU_INLINE_CHAT_WIDGET_STATUS = MenuId.for('inlineChatWidget.status');\nexport const MENU_INLINE_CHAT_WIDGET_FEEDBACK = MenuId.for('inlineChatWidget.feedback');\nexport const MENU_INLINE_CHAT_WIDGET_DISCARD = MenuId.for('inlineChatWidget.undo');\nexport const MENU_INLINE_CHAT_WIDGET_TOGGLE = MenuId.for('inlineChatWidget.toggle');\n\n// --- colors\n\n\nexport const inlineChatBackground = registerColor('inlineChat.background', { dark: editorWidgetBackground, light: editorWidgetBackground, hcDark: editorWidgetBackground, hcLight: editorWidgetBackground }, localize('inlineChat.background', \"Background color of the interactive editor widget\"));\nexport const inlineChatBorder = registerColor('inlineChat.border', { dark: editorWidgetBorder, light: editorWidgetBorder, hcDark: editorWidgetBorder, hcLight: editorWidgetBorder }, localize('inlineChat.border', \"Border color of the interactive editor widget\"));\nexport const inlineChatShadow = registerColor('inlineChat.shadow', { dark: widgetShadow, light: widgetShadow, hcDark: widgetShadow, hcLight: widgetShadow }, localize('inlineChat.shadow', \"Shadow color of the interactive editor widget\"));\nexport const inlineChatRegionHighlight = registerColor('inlineChat.regionHighlight', { dark: editorHoverHighlight, light: editorHoverHighlight, hcDark: editorHoverHighlight, hcLight: editorHoverHighlight }, localize('inlineChat.regionHighlight', \"Background highlighting of the current interactive region. Must be transparent.\"), true);\nexport const inlineChatInputBorder = registerColor('inlineChatInput.border', { dark: editorWidgetBorder, light: editorWidgetBorder, hcDark: editorWidgetBorder, hcLight: editorWidgetBorder }, localize('inlineChatInput.border', \"Border color of the interactive editor input\"));\nexport const inlineChatInputFocusBorder = registerColor('inlineChatInput.focusBorder', { dark: focusBorder, light: focusBorder, hcDark: focusBorder, hcLight: focusBorder }, localize('inlineChatInput.focusBorder', \"Border color of the interactive editor input when focused\"));\nexport const inlineChatInputPlaceholderForeground = registerColor('inlineChatInput.placeholderForeground', { dark: inputPlaceholderForeground, light: inputPlaceholderForeground, hcDark: inputPlaceholderForeground, hcLight: inputPlaceholderForeground }, localize('inlineChatInput.placeholderForeground', \"Foreground color of the interactive editor input placeholder\"));\nexport const inlineChatInputBackground = registerColor('inlineChatInput.background', { dark: inputBackground, light: inputBackground, hcDark: inputBackground, hcLight: inputBackground }, localize('inlineChatInput.background', \"Background color of the interactive editor input\"));\n\nexport const inlineChatDiffInserted = registerColor('inlineChatDiff.inserted', { dark: transparent(diffInserted, .5), light: transparent(diffInserted, .5), hcDark: transparent(diffInserted, .5), hcLight: transparent(diffInserted, .5) }, localize('inlineChatDiff.inserted', \"Background color of inserted text in the interactive editor input\"));\nexport const inlineChatDiffRemoved = registerColor('inlineChatDiff.removed', { dark: transparent(diffRemoved, .5), light: transparent(diffRemoved, .5), hcDark: transparent(diffRemoved, .5), hcLight: transparent(diffRemoved, .5) }, localize('inlineChatDiff.removed', \"Background color of removed text in the interactive editor input\"));\n\n// settings\n\nexport const enum EditMode {\n\tLive = 'live',\n\tLivePreview = 'livePreview',\n\tPreview = 'preview'\n}\n\nRegistry.as<IConfigurationMigrationRegistry>(ExtensionsMigration.ConfigurationMigration).registerConfigurationMigrations(\n\t[{\n\t\tkey: 'interactiveEditor.editMode', migrateFn: (value: any) => {\n\t\t\treturn [['inlineChat.mode', { value: value }]];\n\t\t}\n\t}]\n);\n\nRegistry.as<IConfigurationRegistry>(Extensions.Configuration).registerConfiguration({\n\tid: 'editor',\n\tproperties: {\n\t\t'inlineChat.mode': {\n\t\t\tdescription: localize('mode', \"Configure if changes crafted in the interactive editor are applied directly to the document or are previewed first.\"),\n\t\t\tdefault: EditMode.LivePreview,\n\t\t\ttype: 'string',\n\t\t\tenum: [EditMode.LivePreview, EditMode.Preview, EditMode.Live],\n\t\t\tmarkdownEnumDescriptions: [\n\t\t\t\tlocalize('mode.livePreview', \"Changes are applied directly to the document and are highlighted visually via inline or side-by-side diffs. Ending a session will keep the changes.\"),\n\t\t\t\tlocalize('mode.preview', \"Changes are previewed only and need to be accepted via the apply button. Ending a session will discard the changes.\"),\n\t\t\t\tlocalize('mode.live', \"Changes are applied directly to the document but can be highlighted via inline diffs. Ending a session will keep the changes.\"),\n\t\t\t]\n\t\t},\n\t\t'inlineChat.showDiff': {\n\t\t\tdescription: localize('showDiff', \"Enable/disable showing the diff when edits are generated. Works only with inlineChat.mode equal to live or livePreview.\"),\n\t\t\tdefault: true,\n\t\t\ttype: 'boolean'\n\t\t}\n\t}\n});\n"]}