{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/inlineChat/common/inlineChatServiceImpl.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAQzF,IAAM,IAAI,GAAV,MAAM,IAAI;QAShB,IAAW,oBAAoB;YAC9B,OAAO,IAAI,CAAC,CAAC,CAAqB,KAAK,CAAC;QACzC,CAAC;QAED,YAAgC,iBAAsB;YATrC,MAAC,GAAU,IAAI,gBAAG,EAAqC,CAAC;YAIxD,MAAC,GAAuB,IAAI,WAAG,EAAY,CAAC;YAM5D,IAAI,CAAC,CAAC,GAAiB,gBAAG,CAA0B,MAAM,CAAC,iBAAiB,CAAC,CAAC;QAC/E,CAAC;QAED,WAAW,CAAC,QAAoC;YAE/C,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,CAAQ,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxC,IAAI,CAAC,CAAC,CAAe,GAAG,CAAC,IAAI,CAAC,CAAC;YAC/B,IAAI,CAAC,CAAC,CAAqB,IAAI,EAAE,CAAC;YAElC,OAAO,IAAA,eAAG,EAAU,GAAG,EAAE;gBACxB,EAAE,EAAE,CAAC;gBACL,IAAI,CAAC,CAAC,CAAe,GAAG,CAAC,IAAI,CAAC,CAAC,CAAQ,IAAI,GAAG,CAAC,CAAC,CAAC;gBACjD,IAAI,CAAC,CAAC,CAAqB,IAAI,EAAE,CAAC;YACnC,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,cAAc;YACb,OAAO,CAAC,GAAG,IAAI,CAAC,CAAC,CAAQ,CAAC,OAAO,EAAE,CAAC;QACrC,CAAC;KACD,CAAA;IAjCY,oBAAI;mBAAJ,IAAI;QAaH,WAAA,gBAAG,CAAA;OAbJ,IAAI,CAiChB","file":"inlineChatServiceImpl.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { Emitter } from 'vs/base/common/event';\nimport { LinkedList } from 'vs/base/common/linkedList';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IInlineChatService, IInlineChatSessionProvider, CTX_INLINE_CHAT_HAS_PROVIDER } from './inlineChat';\n\nexport class InlineChatServiceImpl implements IInlineChatService {\n\n\tdeclare _serviceBrand: undefined;\n\n\tprivate readonly _entries = new LinkedList<IInlineChatSessionProvider>();\n\n\tprivate readonly _ctxHasProvider: IContextKey<boolean>;\n\n\tprivate readonly _onDidChangeProviders = new Emitter<void>();\n\tpublic get onDidChangeProviders() {\n\t\treturn this._onDidChangeProviders.event;\n\t}\n\n\tconstructor(@IContextKeyService contextKeyService: IContextKeyService) {\n\t\tthis._ctxHasProvider = CTX_INLINE_CHAT_HAS_PROVIDER.bindTo(contextKeyService);\n\t}\n\n\taddProvider(provider: IInlineChatSessionProvider): IDisposable {\n\n\t\tconst rm = this._entries.push(provider);\n\t\tthis._ctxHasProvider.set(true);\n\t\tthis._onDidChangeProviders.fire();\n\n\t\treturn toDisposable(() => {\n\t\t\trm();\n\t\t\tthis._ctxHasProvider.set(this._entries.size > 0);\n\t\t\tthis._onDidChangeProviders.fire();\n\t\t});\n\t}\n\n\tgetAllProvider() {\n\t\treturn [...this._entries].reverse();\n\t}\n}\n"]}