{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/debug/browser/replFilter.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAehG,MAAa,IAAI;QAAjB;YAIS,MAAC,GAA+B,EAAE,CAAC;QA0C5C,CAAC;iBA5CO,eAAU,GAAG,aAAH,AAAM,CAAU;QAGjC,IAAI,WAAW,CAAC,KAAa;YAC5B,IAAI,CAAC,CAAC,GAAgB,EAAE,CAAC;YACzB,KAAK,GAAG,KAAK,CAAC,IAAI,EAAE,CAAC;YAErB,IAAI,KAAK,IAAI,KAAK,KAAK,EAAE,EAAE;gBAC1B,MAAM,OAAO,GAAG,IAAA,UAAG,EAAY,KAAK,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;gBACtF,KAAK,MAAM,CAAC,IAAI,OAAO,EAAE;oBACxB,IAAI,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE;wBACtB,IAAI,CAAC,CAAC,CAAc,IAAI,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;qBACjE;yBAAM;wBACN,IAAI,CAAC,CAAC,CAAc,IAAI,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;qBACxD;iBACD;aACD;QACF,CAAC;QAED,MAAM,CAAC,OAAqB,EAAE,gBAAgC;YAC7D,IAAI,OAAO,YAAY,gBAAI,IAAmB,OAAO,YAAY,gBAAI,IAAoB,OAAO,YAAY,iBAAI,EAAM;gBACrH,8GAA8G;gBAC9G,sCAA8B;aAC9B;YAED,IAAI,mBAAmB,GAAG,KAAK,CAAC;YAChC,IAAI,mBAAmB,GAAG,KAAK,CAAC;YAEhC,MAAM,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAEpC,KAAK,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,IAAI,CAAC,CAAC,EAAe;gBAClD,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,CAAO,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE;oBAC7D,8DAA8D;oBAC9D,OAAO,KAAK,CAAC;iBACb;qBAAM,IAAI,IAAI,KAAK,SAAS,EAAE;oBAC9B,mBAAmB,GAAG,IAAI,CAAC;oBAC3B,IAAI,IAAI,CAAO,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE;wBACvC,mBAAmB,GAAG,IAAI,CAAC;qBAC3B;iBACD;aACD;YAED,OAAO,mBAAmB,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,CAAC,OAAO,gBAAgB,KAAK,WAAW,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,+BAAuB,CAAC,CAAC;QAC1I,CAAC;;IA7CF,oBA8CC","file":"replFilter.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { matchesFuzzy } from 'vs/base/common/filters';\nimport { splitGlobAware } from 'vs/base/common/glob';\nimport { ITreeFilter, TreeVisibility, TreeFilterResult } from 'vs/base/browser/ui/tree/tree';\nimport { IReplElement } from 'vs/workbench/contrib/debug/common/debug';\nimport { ReplEvaluationResult, ReplEvaluationInput } from 'vs/workbench/contrib/debug/common/replModel';\nimport { Variable } from 'vs/workbench/contrib/debug/common/debugModel';\n\n\ntype ParsedQuery = {\n\ttype: 'include' | 'exclude';\n\tquery: string;\n};\n\nexport class ReplFilter implements ITreeFilter<IReplElement> {\n\n\tstatic matchQuery = matchesFuzzy;\n\n\tprivate _parsedQueries: ParsedQuery[] = [];\n\tset filterQuery(query: string) {\n\t\tthis._parsedQueries = [];\n\t\tquery = query.trim();\n\n\t\tif (query && query !== '') {\n\t\t\tconst filters = splitGlobAware(query, ',').map(s => s.trim()).filter(s => !!s.length);\n\t\t\tfor (const f of filters) {\n\t\t\t\tif (f.startsWith('!')) {\n\t\t\t\t\tthis._parsedQueries.push({ type: 'exclude', query: f.slice(1) });\n\t\t\t\t} else {\n\t\t\t\t\tthis._parsedQueries.push({ type: 'include', query: f });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfilter(element: IReplElement, parentVisibility: TreeVisibility): TreeFilterResult<void> {\n\t\tif (element instanceof ReplEvaluationInput || element instanceof ReplEvaluationResult || element instanceof Variable) {\n\t\t\t// Only filter the output events, everything else is visible https://github.com/microsoft/vscode/issues/105863\n\t\t\treturn TreeVisibility.Visible;\n\t\t}\n\n\t\tlet includeQueryPresent = false;\n\t\tlet includeQueryMatched = false;\n\n\t\tconst text = element.toString(true);\n\n\t\tfor (const { type, query } of this._parsedQueries) {\n\t\t\tif (type === 'exclude' && ReplFilter.matchQuery(query, text)) {\n\t\t\t\t// If exclude query matches, ignore all other queries and hide\n\t\t\t\treturn false;\n\t\t\t} else if (type === 'include') {\n\t\t\t\tincludeQueryPresent = true;\n\t\t\t\tif (ReplFilter.matchQuery(query, text)) {\n\t\t\t\t\tincludeQueryMatched = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn includeQueryPresent ? includeQueryMatched : (typeof parentVisibility !== 'undefined' ? parentVisibility : TreeVisibility.Visible);\n\t}\n}\n"]}