{"version":3,"sources":["vs/workbench/contrib/debug/browser/debugTaskRunner.ts"],"names":[],"mappings":"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","file":"debugTaskRunner.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport severity from 'vs/base/common/severity';\nimport { Event } from 'vs/base/common/event';\nimport { Markers } from 'vs/workbench/contrib/markers/common/markers';\nimport { ITaskService, ITaskSummary } from 'vs/workbench/contrib/tasks/common/taskService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IWorkspaceFolder, IWorkspace } from 'vs/platform/workspace/common/workspace';\nimport { ITaskEvent, TaskEventKind, ITaskIdentifier } from 'vs/workbench/contrib/tasks/common/tasks';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IMarkerService, MarkerSeverity } from 'vs/platform/markers/common/markers';\nimport { IDebugConfiguration } from 'vs/workbench/contrib/debug/common/debug';\nimport { IViewsService } from 'vs/workbench/common/views';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { createErrorWithActions } from 'vs/base/common/errorMessage';\nimport { Action } from 'vs/base/common/actions';\nimport { DEBUG_CONFIGURE_COMMAND_ID, DEBUG_CONFIGURE_LABEL } from 'vs/workbench/contrib/debug/browser/debugCommands';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\n\nfunction once(match: (e: ITaskEvent) => boolean, event: Event<ITaskEvent>): Event<ITaskEvent> {\n\treturn (listener, thisArgs = null, disposables?) => {\n\t\tconst result = event(e => {\n\t\t\tif (match(e)) {\n\t\t\t\tresult.dispose();\n\t\t\t\treturn listener.call(thisArgs, e);\n\t\t\t}\n\t\t}, null, disposables);\n\t\treturn result;\n\t};\n}\n\nexport const enum TaskRunResult {\n\tFailure,\n\tSuccess\n}\n\nconst DEBUG_TASK_ERROR_CHOICE_KEY = 'debug.taskerrorchoice';\n\nexport class DebugTaskRunner {\n\n\tprivate canceled = false;\n\n\tconstructor(\n\t\t@ITaskService private readonly taskService: ITaskService,\n\t\t@IMarkerService private readonly markerService: IMarkerService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ICommandService private readonly commandService: ICommandService\n\t) { }\n\n\tcancel(): void {\n\t\tthis.canceled = true;\n\t}\n\n\tasync runTaskAndCheckErrors(root: IWorkspaceFolder | IWorkspace | undefined, taskId: string | ITaskIdentifier | undefined): Promise<TaskRunResult> {\n\t\ttry {\n\t\t\tthis.canceled = false;\n\t\t\tconst taskSummary = await this.runTask(root, taskId);\n\t\t\tif (this.canceled || (taskSummary && taskSummary.exitCode === undefined)) {\n\t\t\t\t// User canceled, either debugging, or the prelaunch task\n\t\t\t\treturn TaskRunResult.Failure;\n\t\t\t}\n\n\t\t\tconst errorCount = taskId ? this.markerService.read({ severities: MarkerSeverity.Error, take: 2 }).length : 0;\n\t\t\tconst successExitCode = taskSummary && taskSummary.exitCode === 0;\n\t\t\tconst failureExitCode = taskSummary && taskSummary.exitCode !== 0;\n\t\t\tconst onTaskErrors = this.configurationService.getValue<IDebugConfiguration>('debug').onTaskErrors;\n\t\t\tif (successExitCode || onTaskErrors === 'debugAnyway' || (errorCount === 0 && !failureExitCode)) {\n\t\t\t\treturn TaskRunResult.Success;\n\t\t\t}\n\t\t\tif (onTaskErrors === 'showErrors') {\n\t\t\t\tawait this.viewsService.openView(Markers.MARKERS_VIEW_ID, true);\n\t\t\t\treturn Promise.resolve(TaskRunResult.Failure);\n\t\t\t}\n\t\t\tif (onTaskErrors === 'abort') {\n\t\t\t\treturn Promise.resolve(TaskRunResult.Failure);\n\t\t\t}\n\n\t\t\tconst taskLabel = typeof taskId === 'string' ? taskId : taskId ? taskId.name : '';\n\t\t\tconst message = errorCount > 1\n\t\t\t\t? nls.localize('preLaunchTaskErrors', \"Errors exist after running preLaunchTask '{0}'.\", taskLabel)\n\t\t\t\t: errorCount === 1\n\t\t\t\t\t? nls.localize('preLaunchTaskError', \"Error exists after running preLaunchTask '{0}'.\", taskLabel)\n\t\t\t\t\t: taskSummary && typeof taskSummary.exitCode === 'number'\n\t\t\t\t\t\t? nls.localize('preLaunchTaskExitCode', \"The preLaunchTask '{0}' terminated with exit code {1}.\", taskLabel, taskSummary.exitCode)\n\t\t\t\t\t\t: nls.localize('preLaunchTaskTerminated', \"The preLaunchTask '{0}' terminated.\", taskLabel);\n\n\t\t\tenum DebugChoice {\n\t\t\t\tDebugAnyway = 1,\n\t\t\t\tShowErrors = 2,\n\t\t\t\tCancel = 0\n\t\t\t}\n\t\t\tconst { result, checkboxChecked } = await this.dialogService.prompt<DebugChoice>({\n\t\t\t\ttype: severity.Warning,\n\t\t\t\tmessage,\n\t\t\t\tbuttons: [\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: nls.localize({ key: 'debugAnyway', comment: ['&& denotes a mnemonic'] }, \"&&Debug Anyway\"),\n\t\t\t\t\t\trun: () => DebugChoice.DebugAnyway\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: nls.localize({ key: 'showErrors', comment: ['&& denotes a mnemonic'] }, \"&&Show Errors\"),\n\t\t\t\t\t\trun: () => DebugChoice.ShowErrors\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\tcancelButton: {\n\t\t\t\t\tlabel: nls.localize('abort', \"Abort\"),\n\t\t\t\t\trun: () => DebugChoice.Cancel\n\t\t\t\t},\n\t\t\t\tcheckbox: {\n\t\t\t\t\tlabel: nls.localize('remember', \"Remember my choice in user settings\"),\n\t\t\t\t}\n\t\t\t});\n\n\n\t\t\tconst debugAnyway = result === DebugChoice.DebugAnyway;\n\t\t\tconst abort = result === DebugChoice.Cancel;\n\t\t\tif (checkboxChecked) {\n\t\t\t\tthis.configurationService.updateValue('debug.onTaskErrors', result === DebugChoice.DebugAnyway ? 'debugAnyway' : abort ? 'abort' : 'showErrors');\n\t\t\t}\n\n\t\t\tif (abort) {\n\t\t\t\treturn Promise.resolve(TaskRunResult.Failure);\n\t\t\t}\n\t\t\tif (debugAnyway) {\n\t\t\t\treturn TaskRunResult.Success;\n\t\t\t}\n\n\t\t\tawait this.viewsService.openView(Markers.MARKERS_VIEW_ID, true);\n\t\t\treturn Promise.resolve(TaskRunResult.Failure);\n\t\t} catch (err) {\n\t\t\tconst taskConfigureAction = this.taskService.configureAction();\n\t\t\tconst choiceMap: { [key: string]: number } = JSON.parse(this.storageService.get(DEBUG_TASK_ERROR_CHOICE_KEY, StorageScope.WORKSPACE, '{}'));\n\n\t\t\tlet choice = -1;\n\t\t\tenum DebugChoice {\n\t\t\t\tDebugAnyway = 0,\n\t\t\t\tConfigureTask = 1,\n\t\t\t\tCancel = 2\n\t\t\t}\n\t\t\tif (choiceMap[err.message] !== undefined) {\n\t\t\t\tchoice = choiceMap[err.message];\n\t\t\t} else {\n\t\t\t\tconst { result, checkboxChecked } = await this.dialogService.prompt<DebugChoice>({\n\t\t\t\t\ttype: severity.Error,\n\t\t\t\t\tmessage: err.message,\n\t\t\t\t\tbuttons: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: nls.localize({ key: 'debugAnyway', comment: ['&& denotes a mnemonic'] }, \"&&Debug Anyway\"),\n\t\t\t\t\t\t\trun: () => DebugChoice.DebugAnyway\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: taskConfigureAction.label,\n\t\t\t\t\t\t\trun: () => DebugChoice.ConfigureTask\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\tcancelButton: {\n\t\t\t\t\t\trun: () => DebugChoice.Cancel\n\t\t\t\t\t},\n\t\t\t\t\tcheckbox: {\n\t\t\t\t\t\tlabel: nls.localize('rememberTask', \"Remember my choice for this task\")\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tchoice = result;\n\t\t\t\tif (checkboxChecked) {\n\t\t\t\t\tchoiceMap[err.message] = choice;\n\t\t\t\t\tthis.storageService.store(DEBUG_TASK_ERROR_CHOICE_KEY, JSON.stringify(choiceMap), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (choice === DebugChoice.ConfigureTask) {\n\t\t\t\tawait taskConfigureAction.run();\n\t\t\t}\n\n\t\t\treturn choice === DebugChoice.DebugAnyway ? TaskRunResult.Success : TaskRunResult.Failure;\n\t\t}\n\t}\n\n\tasync runTask(root: IWorkspace | IWorkspaceFolder | undefined, taskId: string | ITaskIdentifier | undefined): Promise<ITaskSummary | null> {\n\t\tif (!taskId) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\t\tif (!root) {\n\t\t\treturn Promise.reject(new Error(nls.localize('invalidTaskReference', \"Task '{0}' can not be referenced from a launch configuration that is in a different workspace folder.\", typeof taskId === 'string' ? taskId : taskId.type)));\n\t\t}\n\t\t// run a task before starting a debug session\n\t\tconst task = await this.taskService.getTask(root, taskId);\n\t\tif (!task) {\n\t\t\tconst errorMessage = typeof taskId === 'string'\n\t\t\t\t? nls.localize('DebugTaskNotFoundWithTaskId', \"Could not find the task '{0}'.\", taskId)\n\t\t\t\t: nls.localize('DebugTaskNotFound', \"Could not find the specified task.\");\n\t\t\treturn Promise.reject(createErrorWithActions(errorMessage, [new Action(DEBUG_CONFIGURE_COMMAND_ID, DEBUG_CONFIGURE_LABEL, undefined, true, () => this.commandService.executeCommand(DEBUG_CONFIGURE_COMMAND_ID))]));\n\t\t}\n\n\t\t// If a task is missing the problem matcher the promise will never complete, so we need to have a workaround #35340\n\t\tlet taskStarted = false;\n\t\tconst taskKey = task.getMapKey();\n\t\tconst inactivePromise: Promise<ITaskSummary | null> = new Promise((c) => once(e => {\n\t\t\t// When a task isBackground it will go inactive when it is safe to launch.\n\t\t\t// But when a background task is terminated by the user, it will also fire an inactive event.\n\t\t\t// This means that we will not get to see the real exit code from running the task (undefined when terminated by the user).\n\t\t\t// Catch the ProcessEnded event here, which occurs before inactive, and capture the exit code to prevent this.\n\t\t\treturn (e.kind === TaskEventKind.Inactive\n\t\t\t\t|| (e.kind === TaskEventKind.ProcessEnded && e.exitCode === undefined))\n\t\t\t\t&& e.__task?.getMapKey() === taskKey;\n\t\t}, this.taskService.onDidStateChange)(e => {\n\t\t\ttaskStarted = true;\n\t\t\tc(e.kind === TaskEventKind.ProcessEnded ? { exitCode: e.exitCode } : null);\n\t\t}));\n\n\t\tconst promise: Promise<ITaskSummary | null> = this.taskService.getActiveTasks().then(async (tasks): Promise<ITaskSummary | null> => {\n\t\t\tif (tasks.find(t => t.getMapKey() === taskKey)) {\n\t\t\t\t// Check that the task isn't busy and if it is, wait for it\n\t\t\t\tconst busyTasks = await this.taskService.getBusyTasks();\n\t\t\t\tif (busyTasks.find(t => t.getMapKey() === taskKey)) {\n\t\t\t\t\ttaskStarted = true;\n\t\t\t\t\treturn inactivePromise;\n\t\t\t\t}\n\t\t\t\t// task is already running and isn't busy - nothing to do.\n\t\t\t\treturn Promise.resolve(null);\n\t\t\t}\n\t\t\tonce(e => ((e.kind === TaskEventKind.Active) || (e.kind === TaskEventKind.DependsOnStarted)) && e.__task?.getMapKey() === taskKey, this.taskService.onDidStateChange)(() => {\n\t\t\t\t// Task is active, so everything seems to be fine, no need to prompt after 10 seconds\n\t\t\t\t// Use case being a slow running task should not be prompted even though it takes more than 10 seconds\n\t\t\t\ttaskStarted = true;\n\t\t\t});\n\t\t\tconst taskPromise = this.taskService.run(task);\n\t\t\tif (task.configurationProperties.isBackground) {\n\t\t\t\treturn inactivePromise;\n\t\t\t}\n\n\t\t\treturn taskPromise.then(x => x ?? null);\n\t\t});\n\n\t\treturn new Promise((c, e) => {\n\t\t\tconst waitForInput = new Promise<void>(resolve => once(e => (e.kind === TaskEventKind.AcquiredInput) && e.__task?.getMapKey() === taskKey, this.taskService.onDidStateChange)(() => {\n\t\t\t\tresolve();\n\t\t\t}));\n\n\t\t\tpromise.then(result => {\n\t\t\t\ttaskStarted = true;\n\t\t\t\tc(result);\n\t\t\t}, error => e(error));\n\n\t\t\twaitForInput.then(() => {\n\t\t\t\tconst waitTime = task.configurationProperties.isBackground ? 5000 : 10000;\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tif (!taskStarted) {\n\t\t\t\t\t\tconst errorMessage = typeof taskId === 'string'\n\t\t\t\t\t\t\t? nls.localize('taskNotTrackedWithTaskId', \"The task '{0}' cannot be tracked. Make sure to have a problem matcher defined.\", taskId)\n\t\t\t\t\t\t\t: nls.localize('taskNotTracked', \"The task '{0}' cannot be tracked. Make sure to have a problem matcher defined.\", JSON.stringify(taskId));\n\t\t\t\t\t\te({ severity: severity.Error, message: errorMessage });\n\t\t\t\t\t}\n\t\t\t\t}, waitTime);\n\t\t\t});\n\t\t});\n\t}\n}\n"]}