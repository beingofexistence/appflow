{"version":3,"sources":["vs/workbench/contrib/debug/browser/statusbarColorProvider.ts"],"names":[],"mappings":"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","file":"statusbarColorProvider.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { ColorTransformType, asCssVariable, asCssVariableName, registerColor } from 'vs/platform/theme/common/colorRegistry';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IDebugService, State, IDebugSession, IDebugConfiguration } from 'vs/workbench/contrib/debug/common/debug';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { STATUS_BAR_FOREGROUND, STATUS_BAR_BORDER, COMMAND_CENTER_BACKGROUND } from 'vs/workbench/common/theme';\nimport { DisposableStore, IDisposable } from 'vs/base/common/lifecycle';\nimport { IStatusbarService } from 'vs/workbench/services/statusbar/browser/statusbar';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ILayoutService } from 'vs/platform/layout/browser/layoutService';\n\n\n// colors for theming\n\nexport const STATUS_BAR_DEBUGGING_BACKGROUND = registerColor('statusBar.debuggingBackground', {\n\tdark: '#CC6633',\n\tlight: '#CC6633',\n\thcDark: '#BA592C',\n\thcLight: '#B5200D'\n}, localize('statusBarDebuggingBackground', \"Status bar background color when a program is being debugged. The status bar is shown in the bottom of the window\"));\n\nexport const STATUS_BAR_DEBUGGING_FOREGROUND = registerColor('statusBar.debuggingForeground', {\n\tdark: STATUS_BAR_FOREGROUND,\n\tlight: STATUS_BAR_FOREGROUND,\n\thcDark: STATUS_BAR_FOREGROUND,\n\thcLight: '#FFFFFF'\n}, localize('statusBarDebuggingForeground', \"Status bar foreground color when a program is being debugged. The status bar is shown in the bottom of the window\"));\n\nexport const STATUS_BAR_DEBUGGING_BORDER = registerColor('statusBar.debuggingBorder', {\n\tdark: STATUS_BAR_BORDER,\n\tlight: STATUS_BAR_BORDER,\n\thcDark: STATUS_BAR_BORDER,\n\thcLight: STATUS_BAR_BORDER\n}, localize('statusBarDebuggingBorder', \"Status bar border color separating to the sidebar and editor when a program is being debugged. The status bar is shown in the bottom of the window\"));\n\nexport const COMMAND_CENTER_DEBUGGING_BACKGROUND = registerColor(\n\t'commandCenter.debuggingBackground',\n\t{\n\t\tdark: { value: STATUS_BAR_DEBUGGING_BACKGROUND, op: ColorTransformType.Transparent, factor: 0.258 },\n\t\thcDark: { value: STATUS_BAR_DEBUGGING_BACKGROUND, op: ColorTransformType.Transparent, factor: 0.258 },\n\t\tlight: { value: STATUS_BAR_DEBUGGING_BACKGROUND, op: ColorTransformType.Transparent, factor: 0.258 },\n\t\thcLight: { value: STATUS_BAR_DEBUGGING_BACKGROUND, op: ColorTransformType.Transparent, factor: 0.258 }\n\t},\n\tlocalize('commandCenter-activeBackground', \"Command center background color when a program is being debugged\"),\n\ttrue\n);\n\nexport class StatusBarColorProvider implements IWorkbenchContribution {\n\n\tprivate readonly disposables = new DisposableStore();\n\tprivate disposable: IDisposable | undefined;\n\n\tprivate set enabled(enabled: boolean) {\n\t\tif (enabled === !!this.disposable) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (enabled) {\n\t\t\tthis.disposable = this.statusbarService.overrideStyle({\n\t\t\t\tpriority: 10,\n\t\t\t\tforeground: STATUS_BAR_DEBUGGING_FOREGROUND,\n\t\t\t\tbackground: STATUS_BAR_DEBUGGING_BACKGROUND,\n\t\t\t\tborder: STATUS_BAR_DEBUGGING_BORDER,\n\t\t\t});\n\t\t} else {\n\t\t\tthis.disposable!.dispose();\n\t\t\tthis.disposable = undefined;\n\t\t}\n\t}\n\n\tconstructor(\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t\t@ILayoutService private readonly layoutService: ILayoutService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tthis.debugService.onDidChangeState(this.update, this, this.disposables);\n\t\tthis.contextService.onDidChangeWorkbenchState(this.update, this, this.disposables);\n\t\tthis.configurationService.onDidChangeConfiguration((e) => {\n\t\t\tif (e.affectsConfiguration('debug.enableStatusBarColor') || e.affectsConfiguration('debug.toolBarLocation')) {\n\t\t\t\tthis.update();\n\t\t\t}\n\t\t});\n\t\tthis.update();\n\t}\n\n\tprotected update(): void {\n\t\tconst debugConfig = this.configurationService.getValue<IDebugConfiguration>('debug');\n\t\tconst isInDebugMode = isStatusbarInDebugMode(this.debugService.state, this.debugService.getModel().getSessions());\n\t\tif (!debugConfig.enableStatusBarColor) {\n\t\t\tthis.enabled = false;\n\t\t} else {\n\t\t\tthis.enabled = isInDebugMode;\n\t\t}\n\n\t\tconst isInCommandCenter = debugConfig.toolBarLocation === 'commandCenter';\n\t\tthis.layoutService.container.style.setProperty(asCssVariableName(COMMAND_CENTER_BACKGROUND), isInCommandCenter && isInDebugMode\n\t\t\t? asCssVariable(COMMAND_CENTER_DEBUGGING_BACKGROUND)\n\t\t\t: ''\n\t\t);\n\n\t}\n\n\tdispose(): void {\n\t\tthis.disposable?.dispose();\n\t\tthis.disposables.dispose();\n\t}\n}\n\nexport function isStatusbarInDebugMode(state: State, sessions: IDebugSession[]): boolean {\n\tif (state === State.Inactive || state === State.Initializing || sessions.every(s => s.suppressDebugStatusbar || s.configuration?.noDebug)) {\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n"]}