{"version":3,"sources":["vs/workbench/contrib/debug/browser/debugConfigurationManager.ts"],"names":[],"mappings":"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","file":"debugConfigurationManager.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct, flatten } from 'vs/base/common/arrays';\nimport { sequence } from 'vs/base/common/async';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport * as json from 'vs/base/common/json';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport { DisposableStore, IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport * as objects from 'vs/base/common/objects';\nimport * as resources from 'vs/base/common/resources';\nimport { URI as uri } from 'vs/base/common/uri';\nimport * as nls from 'vs/nls';\nimport { ConfigurationTarget, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IJSONContributionRegistry, Extensions as JSONExtensions } from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { ThemeIcon } from 'vs/base/common/themables';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { IWorkspaceContextService, IWorkspaceFolder, IWorkspaceFoldersChangeEvent, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { IEditorPane } from 'vs/workbench/common/editor';\nimport { debugConfigure } from 'vs/workbench/contrib/debug/browser/debugIcons';\nimport { CONTEXT_DEBUG_CONFIGURATION_TYPE, DebugConfigurationProviderTriggerKind, IAdapterManager, ICompound, IConfig, IConfigPresentation, IConfigurationManager, IDebugConfigurationProvider, IGlobalConfig, ILaunch } from 'vs/workbench/contrib/debug/common/debug';\nimport { launchSchema } from 'vs/workbench/contrib/debug/common/debugSchemas';\nimport { getVisibleAndSorted } from 'vs/workbench/contrib/debug/common/debugUtils';\nimport { launchSchemaId } from 'vs/workbench/services/configuration/common/configuration';\nimport { ACTIVE_GROUP, IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IHistoryService } from 'vs/workbench/services/history/common/history';\nimport { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\n\nconst jsonRegistry = Registry.as<IJSONContributionRegistry>(JSONExtensions.JSONContribution);\njsonRegistry.registerSchema(launchSchemaId, launchSchema);\n\nconst DEBUG_SELECTED_CONFIG_NAME_KEY = 'debug.selectedconfigname';\nconst DEBUG_SELECTED_ROOT = 'debug.selectedroot';\n// Debug type is only stored if a dynamic configuration is used for better restore\nconst DEBUG_SELECTED_TYPE = 'debug.selectedtype';\nconst DEBUG_RECENT_DYNAMIC_CONFIGURATIONS = 'debug.recentdynamicconfigurations';\n\ninterface IDynamicPickItem { label: string; launch: ILaunch; config: IConfig }\n\nexport class ConfigurationManager implements IConfigurationManager {\n\tprivate launches!: ILaunch[];\n\tprivate selectedName: string | undefined;\n\tprivate selectedLaunch: ILaunch | undefined;\n\tprivate getSelectedConfig: () => Promise<IConfig | undefined> = () => Promise.resolve(undefined);\n\tprivate selectedType: string | undefined;\n\tprivate selectedDynamic = false;\n\tprivate toDispose: IDisposable[];\n\tprivate readonly _onDidSelectConfigurationName = new Emitter<void>();\n\tprivate configProviders: IDebugConfigurationProvider[];\n\tprivate debugConfigurationTypeContext: IContextKey<string>;\n\n\tconstructor(\n\t\tprivate readonly adapterManager: IAdapterManager,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IHistoryService private readonly historyService: IHistoryService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService\n\t) {\n\t\tthis.configProviders = [];\n\t\tthis.toDispose = [];\n\t\tthis.initLaunches();\n\t\tthis.setCompoundSchemaValues();\n\t\tthis.registerListeners();\n\t\tconst previousSelectedRoot = this.storageService.get(DEBUG_SELECTED_ROOT, StorageScope.WORKSPACE);\n\t\tconst previousSelectedType = this.storageService.get(DEBUG_SELECTED_TYPE, StorageScope.WORKSPACE);\n\t\tconst previousSelectedLaunch = this.launches.find(l => l.uri.toString() === previousSelectedRoot);\n\t\tconst previousSelectedName = this.storageService.get(DEBUG_SELECTED_CONFIG_NAME_KEY, StorageScope.WORKSPACE);\n\t\tthis.debugConfigurationTypeContext = CONTEXT_DEBUG_CONFIGURATION_TYPE.bindTo(contextKeyService);\n\t\tconst dynamicConfig = previousSelectedType ? { type: previousSelectedType } : undefined;\n\t\tif (previousSelectedLaunch && previousSelectedLaunch.getConfigurationNames().length) {\n\t\t\tthis.selectConfiguration(previousSelectedLaunch, previousSelectedName, undefined, dynamicConfig);\n\t\t} else if (this.launches.length > 0) {\n\t\t\tthis.selectConfiguration(undefined, previousSelectedName, undefined, dynamicConfig);\n\t\t}\n\t}\n\n\tregisterDebugConfigurationProvider(debugConfigurationProvider: IDebugConfigurationProvider): IDisposable {\n\t\tthis.configProviders.push(debugConfigurationProvider);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis.unregisterDebugConfigurationProvider(debugConfigurationProvider);\n\t\t\t}\n\t\t};\n\t}\n\n\tunregisterDebugConfigurationProvider(debugConfigurationProvider: IDebugConfigurationProvider): void {\n\t\tconst ix = this.configProviders.indexOf(debugConfigurationProvider);\n\t\tif (ix >= 0) {\n\t\t\tthis.configProviders.splice(ix, 1);\n\t\t}\n\t}\n\n\t/**\n\t * if scope is not specified,a value of DebugConfigurationProvideTrigger.Initial is assumed.\n\t */\n\thasDebugConfigurationProvider(debugType: string, triggerKind?: DebugConfigurationProviderTriggerKind): boolean {\n\t\tif (triggerKind === undefined) {\n\t\t\ttriggerKind = DebugConfigurationProviderTriggerKind.Initial;\n\t\t}\n\t\t// check if there are providers for the given type that contribute a provideDebugConfigurations method\n\t\tconst provider = this.configProviders.find(p => p.provideDebugConfigurations && (p.type === debugType) && (p.triggerKind === triggerKind));\n\t\treturn !!provider;\n\t}\n\n\tasync resolveConfigurationByProviders(folderUri: uri | undefined, type: string | undefined, config: IConfig, token: CancellationToken): Promise<IConfig | null | undefined> {\n\t\tconst resolveDebugConfigurationForType = async (type: string | undefined, config: IConfig | null | undefined) => {\n\t\t\tif (type !== '*') {\n\t\t\t\tawait this.adapterManager.activateDebuggers('onDebugResolve', type);\n\t\t\t}\n\n\t\t\tfor (const p of this.configProviders) {\n\t\t\t\tif (p.type === type && p.resolveDebugConfiguration && config) {\n\t\t\t\t\tconfig = await p.resolveDebugConfiguration(folderUri, config, token);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn config;\n\t\t};\n\n\t\tlet resolvedType = config.type ?? type;\n\t\tlet result: IConfig | null | undefined = config;\n\t\tfor (let seen = new Set(); result && !seen.has(resolvedType);) {\n\t\t\tseen.add(resolvedType);\n\t\t\tresult = await resolveDebugConfigurationForType(resolvedType, result);\n\t\t\tresult = await resolveDebugConfigurationForType('*', result);\n\t\t\tresolvedType = result?.type ?? type!;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tasync resolveDebugConfigurationWithSubstitutedVariables(folderUri: uri | undefined, type: string | undefined, config: IConfig, token: CancellationToken): Promise<IConfig | null | undefined> {\n\t\t// pipe the config through the promises sequentially. Append at the end the '*' types\n\t\tconst providers = this.configProviders.filter(p => p.type === type && p.resolveDebugConfigurationWithSubstitutedVariables)\n\t\t\t.concat(this.configProviders.filter(p => p.type === '*' && p.resolveDebugConfigurationWithSubstitutedVariables));\n\n\t\tlet result: IConfig | null | undefined = config;\n\t\tawait sequence(providers.map(provider => async () => {\n\t\t\t// If any provider returned undefined or null make sure to respect that and do not pass the result to more resolver\n\t\t\tif (result) {\n\t\t\t\tresult = await provider.resolveDebugConfigurationWithSubstitutedVariables!(folderUri, result, token);\n\t\t\t}\n\t\t}));\n\n\t\treturn result;\n\t}\n\n\tasync provideDebugConfigurations(folderUri: uri | undefined, type: string, token: CancellationToken): Promise<any[]> {\n\t\tawait this.adapterManager.activateDebuggers('onDebugInitialConfigurations');\n\t\tconst results = await Promise.all(this.configProviders.filter(p => p.type === type && p.triggerKind === DebugConfigurationProviderTriggerKind.Initial && p.provideDebugConfigurations).map(p => p.provideDebugConfigurations!(folderUri, token)));\n\n\t\treturn results.reduce((first, second) => first.concat(second), []);\n\t}\n\n\tasync getDynamicProviders(): Promise<{ label: string; type: string; getProvider: () => Promise<IDebugConfigurationProvider | undefined>; pick: () => Promise<{ launch: ILaunch; config: IConfig } | undefined> }[]> {\n\t\tawait this.extensionService.whenInstalledExtensionsRegistered();\n\t\tconst onDebugDynamicConfigurationsName = 'onDebugDynamicConfigurations';\n\t\tconst debugDynamicExtensionsTypes = this.extensionService.extensions.reduce((acc, e) => {\n\t\t\tif (!e.activationEvents) {\n\t\t\t\treturn acc;\n\t\t\t}\n\n\t\t\tconst explicitTypes: string[] = [];\n\t\t\tlet hasGenericEvent = false;\n\t\t\tfor (const event of e.activationEvents) {\n\t\t\t\tif (event === onDebugDynamicConfigurationsName) {\n\t\t\t\t\thasGenericEvent = true;\n\t\t\t\t} else if (event.startsWith(`${onDebugDynamicConfigurationsName}:`)) {\n\t\t\t\t\texplicitTypes.push(event.slice(onDebugDynamicConfigurationsName.length + 1));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (explicitTypes.length) {\n\t\t\t\treturn acc.concat(explicitTypes);\n\t\t\t}\n\n\t\t\tif (hasGenericEvent) {\n\t\t\t\tconst debuggerType = e.contributes?.debuggers?.[0].type;\n\t\t\t\treturn debuggerType ? acc.concat(debuggerType) : acc;\n\t\t\t}\n\n\t\t\treturn acc;\n\t\t}, [] as string[]);\n\n\t\treturn debugDynamicExtensionsTypes.map(type => {\n\t\t\treturn {\n\t\t\t\tlabel: this.adapterManager.getDebuggerLabel(type)!,\n\t\t\t\tgetProvider: async () => {\n\t\t\t\t\tawait this.adapterManager.activateDebuggers(onDebugDynamicConfigurationsName, type);\n\t\t\t\t\treturn this.configProviders.find(p => p.type === type && p.triggerKind === DebugConfigurationProviderTriggerKind.Dynamic && p.provideDebugConfigurations);\n\t\t\t\t},\n\t\t\t\ttype,\n\t\t\t\tpick: async () => {\n\t\t\t\t\t// Do a late 'onDebugDynamicConfigurationsName' activation so extensions are not activated too early #108578\n\t\t\t\t\tawait this.adapterManager.activateDebuggers(onDebugDynamicConfigurationsName, type);\n\n\t\t\t\t\tconst token = new CancellationTokenSource();\n\t\t\t\t\tconst picks: Promise<IDynamicPickItem[]>[] = [];\n\t\t\t\t\tconst provider = this.configProviders.find(p => p.type === type && p.triggerKind === DebugConfigurationProviderTriggerKind.Dynamic && p.provideDebugConfigurations);\n\t\t\t\t\tthis.getLaunches().forEach(launch => {\n\t\t\t\t\t\tif (launch.workspace && provider) {\n\t\t\t\t\t\t\tpicks.push(provider.provideDebugConfigurations!(launch.workspace.uri, token.token).then(configurations => configurations.map(config => ({\n\t\t\t\t\t\t\t\tlabel: config.name,\n\t\t\t\t\t\t\t\tdescription: launch.name,\n\t\t\t\t\t\t\t\tconfig,\n\t\t\t\t\t\t\t\tbuttons: [{\n\t\t\t\t\t\t\t\t\ticonClass: ThemeIcon.asClassName(debugConfigure),\n\t\t\t\t\t\t\t\t\ttooltip: nls.localize('editLaunchConfig', \"Edit Debug Configuration in launch.json\")\n\t\t\t\t\t\t\t\t}],\n\t\t\t\t\t\t\t\tlaunch\n\t\t\t\t\t\t\t}))));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tconst disposables = new DisposableStore();\n\t\t\t\t\tconst input = disposables.add(this.quickInputService.createQuickPick<IDynamicPickItem>());\n\t\t\t\t\tinput.busy = true;\n\t\t\t\t\tinput.placeholder = nls.localize('selectConfiguration', \"Select Launch Configuration\");\n\n\t\t\t\t\tconst chosenPromise = new Promise<IDynamicPickItem | undefined>(resolve => {\n\t\t\t\t\t\tdisposables.add(input.onDidAccept(() => resolve(input.activeItems[0])));\n\t\t\t\t\t\tdisposables.add(input.onDidTriggerItemButton(async (context) => {\n\t\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t\t\tconst { launch, config } = context.item;\n\t\t\t\t\t\t\tawait launch.openConfigFile({ preserveFocus: false, type: config.type, suppressInitialConfigs: true });\n\t\t\t\t\t\t\t// Only Launch have a pin trigger button\n\t\t\t\t\t\t\tawait (launch as Launch).writeConfiguration(config);\n\t\t\t\t\t\t\tawait this.selectConfiguration(launch, config.name);\n\t\t\t\t\t\t\tthis.removeRecentDynamicConfigurations(config.name, config.type);\n\t\t\t\t\t\t}));\n\t\t\t\t\t});\n\n\t\t\t\t\tconst nestedPicks = await Promise.all(picks);\n\t\t\t\t\tconst items = flatten(nestedPicks);\n\n\t\t\t\t\tinput.items = items;\n\t\t\t\t\tinput.busy = false;\n\t\t\t\t\tinput.show();\n\t\t\t\t\tconst chosen = await chosenPromise;\n\n\t\t\t\t\tdisposables.dispose();\n\n\t\t\t\t\tif (!chosen) {\n\t\t\t\t\t\t// User canceled quick input we should notify the provider to cancel computing configurations\n\t\t\t\t\t\ttoken.cancel();\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn chosen;\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n\n\tgetAllConfigurations(): { launch: ILaunch; name: string; presentation?: IConfigPresentation }[] {\n\t\tconst all: { launch: ILaunch; name: string; presentation?: IConfigPresentation }[] = [];\n\t\tfor (const l of this.launches) {\n\t\t\tfor (const name of l.getConfigurationNames()) {\n\t\t\t\tconst config = l.getConfiguration(name) || l.getCompound(name);\n\t\t\t\tif (config) {\n\t\t\t\t\tall.push({ launch: l, name, presentation: config.presentation });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn getVisibleAndSorted(all);\n\t}\n\n\tremoveRecentDynamicConfigurations(name: string, type: string) {\n\t\tconst remaining = this.getRecentDynamicConfigurations().filter(c => c.name !== name || c.type !== type);\n\t\tthis.storageService.store(DEBUG_RECENT_DYNAMIC_CONFIGURATIONS, JSON.stringify(remaining), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tif (this.selectedConfiguration.name === name && this.selectedType === type && this.selectedDynamic) {\n\t\t\tthis.selectConfiguration(undefined, undefined);\n\t\t} else {\n\t\t\tthis._onDidSelectConfigurationName.fire();\n\t\t}\n\t}\n\n\tgetRecentDynamicConfigurations(): { name: string; type: string }[] {\n\t\treturn JSON.parse(this.storageService.get(DEBUG_RECENT_DYNAMIC_CONFIGURATIONS, StorageScope.WORKSPACE, '[]'));\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis.toDispose.push(Event.any<IWorkspaceFoldersChangeEvent | WorkbenchState>(this.contextService.onDidChangeWorkspaceFolders, this.contextService.onDidChangeWorkbenchState)(() => {\n\t\t\tthis.initLaunches();\n\t\t\tthis.selectConfiguration(undefined);\n\t\t\tthis.setCompoundSchemaValues();\n\t\t}));\n\t\tthis.toDispose.push(this.configurationService.onDidChangeConfiguration(async e => {\n\t\t\tif (e.affectsConfiguration('launch')) {\n\t\t\t\t// A change happen in the launch.json. If there is already a launch configuration selected, do not change the selection.\n\t\t\t\tawait this.selectConfiguration(undefined);\n\t\t\t\tthis.setCompoundSchemaValues();\n\t\t\t}\n\t\t}));\n\t\tthis.toDispose.push(this.adapterManager.onDidDebuggersExtPointRead(() => {\n\t\t\tthis.setCompoundSchemaValues();\n\t\t}));\n\t}\n\n\tprivate initLaunches(): void {\n\t\tthis.launches = this.contextService.getWorkspace().folders.map(folder => this.instantiationService.createInstance(Launch, this, this.adapterManager, folder));\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE) {\n\t\t\tthis.launches.push(this.instantiationService.createInstance(WorkspaceLaunch, this, this.adapterManager));\n\t\t}\n\t\tthis.launches.push(this.instantiationService.createInstance(UserLaunch, this, this.adapterManager));\n\n\t\tif (this.selectedLaunch && this.launches.indexOf(this.selectedLaunch) === -1) {\n\t\t\tthis.selectConfiguration(undefined);\n\t\t}\n\t}\n\n\tprivate setCompoundSchemaValues(): void {\n\t\tconst compoundConfigurationsSchema = (<IJSONSchema>launchSchema.properties!['compounds'].items).properties!['configurations'];\n\t\tconst launchNames = this.launches.map(l =>\n\t\t\tl.getConfigurationNames(true)).reduce((first, second) => first.concat(second), []);\n\t\t(<IJSONSchema>compoundConfigurationsSchema.items).oneOf![0].enum = launchNames;\n\t\t(<IJSONSchema>compoundConfigurationsSchema.items).oneOf![1].properties!.name.enum = launchNames;\n\n\t\tconst folderNames = this.contextService.getWorkspace().folders.map(f => f.name);\n\t\t(<IJSONSchema>compoundConfigurationsSchema.items).oneOf![1].properties!.folder.enum = folderNames;\n\n\t\tjsonRegistry.registerSchema(launchSchemaId, launchSchema);\n\t}\n\n\tgetLaunches(): ILaunch[] {\n\t\treturn this.launches;\n\t}\n\n\tgetLaunch(workspaceUri: uri | undefined): ILaunch | undefined {\n\t\tif (!uri.isUri(workspaceUri)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this.launches.find(l => l.workspace && this.uriIdentityService.extUri.isEqual(l.workspace.uri, workspaceUri));\n\t}\n\n\tget selectedConfiguration(): { launch: ILaunch | undefined; name: string | undefined; getConfig: () => Promise<IConfig | undefined>; type: string | undefined } {\n\t\treturn {\n\t\t\tlaunch: this.selectedLaunch,\n\t\t\tname: this.selectedName,\n\t\t\tgetConfig: this.getSelectedConfig,\n\t\t\ttype: this.selectedType\n\t\t};\n\t}\n\n\tget onDidSelectConfiguration(): Event<void> {\n\t\treturn this._onDidSelectConfigurationName.event;\n\t}\n\n\tgetWorkspaceLaunch(): ILaunch | undefined {\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE) {\n\t\t\treturn this.launches[this.launches.length - 1];\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tasync selectConfiguration(launch: ILaunch | undefined, name?: string, config?: IConfig, dynamicConfig?: { type?: string }): Promise<void> {\n\t\tif (typeof launch === 'undefined') {\n\t\t\tconst rootUri = this.historyService.getLastActiveWorkspaceRoot();\n\t\t\tlaunch = this.getLaunch(rootUri);\n\t\t\tif (!launch || launch.getConfigurationNames().length === 0) {\n\t\t\t\tlaunch = this.launches.find(l => !!(l && l.getConfigurationNames().length)) || launch || this.launches[0];\n\t\t\t}\n\t\t}\n\n\t\tconst previousLaunch = this.selectedLaunch;\n\t\tconst previousName = this.selectedName;\n\t\tconst previousSelectedDynamic = this.selectedDynamic;\n\t\tthis.selectedLaunch = launch;\n\n\t\tif (this.selectedLaunch) {\n\t\t\tthis.storageService.store(DEBUG_SELECTED_ROOT, this.selectedLaunch.uri.toString(), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis.storageService.remove(DEBUG_SELECTED_ROOT, StorageScope.WORKSPACE);\n\t\t}\n\n\t\tconst names = launch ? launch.getConfigurationNames() : [];\n\t\tthis.getSelectedConfig = () => {\n\t\t\tconst selected = this.selectedName ? launch?.getConfiguration(this.selectedName) : undefined;\n\t\t\treturn Promise.resolve(selected || config);\n\t\t};\n\n\t\tlet type = config?.type;\n\t\tif (name && names.indexOf(name) >= 0) {\n\t\t\tthis.setSelectedLaunchName(name);\n\t\t} else if (dynamicConfig && dynamicConfig.type) {\n\t\t\t// We could not find the previously used name and config is not passed. We should get all dynamic configurations from providers\n\t\t\t// And potentially auto select the previously used dynamic configuration #96293\n\t\t\ttype = dynamicConfig.type;\n\t\t\tif (!config) {\n\t\t\t\tconst providers = (await this.getDynamicProviders()).filter(p => p.type === type);\n\t\t\t\tthis.getSelectedConfig = async () => {\n\t\t\t\t\tconst activatedProviders = await Promise.all(providers.map(p => p.getProvider()));\n\t\t\t\t\tconst provider = activatedProviders.length > 0 ? activatedProviders[0] : undefined;\n\t\t\t\t\tif (provider && launch && launch.workspace) {\n\t\t\t\t\t\tconst token = new CancellationTokenSource();\n\t\t\t\t\t\tconst dynamicConfigs = await provider.provideDebugConfigurations!(launch.workspace.uri, token.token);\n\t\t\t\t\t\tconst dynamicConfig = dynamicConfigs.find(c => c.name === name);\n\t\t\t\t\t\tif (dynamicConfig) {\n\t\t\t\t\t\t\treturn dynamicConfig;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn undefined;\n\t\t\t\t};\n\t\t\t}\n\t\t\tthis.setSelectedLaunchName(name);\n\n\t\t\tlet recentDynamicProviders = this.getRecentDynamicConfigurations();\n\t\t\tif (name && dynamicConfig.type) {\n\t\t\t\t// We need to store the recently used dynamic configurations to be able to show them in UI #110009\n\t\t\t\trecentDynamicProviders.unshift({ name, type: dynamicConfig.type });\n\t\t\t\trecentDynamicProviders = distinct(recentDynamicProviders, t => `${t.name} : ${t.type}`);\n\t\t\t\tthis.storageService.store(DEBUG_RECENT_DYNAMIC_CONFIGURATIONS, JSON.stringify(recentDynamicProviders), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t\t}\n\t\t} else if (!this.selectedName || names.indexOf(this.selectedName) === -1) {\n\t\t\t// We could not find the configuration to select, pick the first one, or reset the selection if there is no launch configuration\n\t\t\tconst nameToSet = names.length ? names[0] : undefined;\n\t\t\tthis.setSelectedLaunchName(nameToSet);\n\t\t}\n\n\t\tif (!config && launch && this.selectedName) {\n\t\t\tconfig = launch.getConfiguration(this.selectedName);\n\t\t\ttype = config?.type;\n\t\t}\n\n\t\tthis.selectedType = dynamicConfig?.type || config?.type;\n\t\tthis.selectedDynamic = !!dynamicConfig;\n\t\t// Only store the selected type if we are having a dynamic configuration. Otherwise restoring this configuration from storage might be misindentified as a dynamic configuration\n\t\tthis.storageService.store(DEBUG_SELECTED_TYPE, dynamicConfig ? this.selectedType : undefined, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\n\t\tif (type) {\n\t\t\tthis.debugConfigurationTypeContext.set(type);\n\t\t} else {\n\t\t\tthis.debugConfigurationTypeContext.reset();\n\t\t}\n\n\t\tif (this.selectedLaunch !== previousLaunch || this.selectedName !== previousName || previousSelectedDynamic !== this.selectedDynamic) {\n\t\t\tthis._onDidSelectConfigurationName.fire();\n\t\t}\n\t}\n\n\tprivate setSelectedLaunchName(selectedName: string | undefined): void {\n\t\tthis.selectedName = selectedName;\n\n\t\tif (this.selectedName) {\n\t\t\tthis.storageService.store(DEBUG_SELECTED_CONFIG_NAME_KEY, this.selectedName, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis.storageService.remove(DEBUG_SELECTED_CONFIG_NAME_KEY, StorageScope.WORKSPACE);\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.toDispose = dispose(this.toDispose);\n\t}\n}\n\nabstract class AbstractLaunch implements ILaunch {\n\tabstract readonly uri: uri;\n\tabstract readonly name: string;\n\tabstract readonly workspace: IWorkspaceFolder | undefined;\n\tprotected abstract getConfig(): IGlobalConfig | undefined;\n\tabstract openConfigFile(options: { preserveFocus: boolean; type?: string | undefined; suppressInitialConfigs?: boolean | undefined }, token?: CancellationToken | undefined): Promise<{ editor: IEditorPane | null; created: boolean }>;\n\n\tconstructor(\n\t\tprotected configurationManager: ConfigurationManager,\n\t\tprivate readonly adapterManager: IAdapterManager\n\t) { }\n\n\tgetCompound(name: string): ICompound | undefined {\n\t\tconst config = this.getConfig();\n\t\tif (!config || !config.compounds) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn config.compounds.find(compound => compound.name === name);\n\t}\n\n\tgetConfigurationNames(ignoreCompoundsAndPresentation = false): string[] {\n\t\tconst config = this.getConfig();\n\t\tif (!config || (!Array.isArray(config.configurations) && !Array.isArray(config.compounds))) {\n\t\t\treturn [];\n\t\t} else {\n\t\t\tconst configurations: (IConfig | ICompound)[] = [];\n\t\t\tif (config.configurations) {\n\t\t\t\tconfigurations.push(...config.configurations.filter(cfg => cfg && typeof cfg.name === 'string'));\n\t\t\t}\n\n\t\t\tif (ignoreCompoundsAndPresentation) {\n\t\t\t\treturn configurations.map(c => c.name);\n\t\t\t}\n\n\t\t\tif (config.compounds) {\n\t\t\t\tconfigurations.push(...config.compounds.filter(compound => typeof compound.name === 'string' && compound.configurations && compound.configurations.length));\n\t\t\t}\n\t\t\treturn getVisibleAndSorted(configurations).map(c => c.name);\n\t\t}\n\t}\n\n\tgetConfiguration(name: string): IConfig | undefined {\n\t\t// We need to clone the configuration in order to be able to make changes to it #42198\n\t\tconst config = objects.deepClone(this.getConfig());\n\t\tif (!config || !config.configurations) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst configuration = config.configurations.find(config => config && config.name === name);\n\t\tif (configuration) {\n\t\t\tif (this instanceof UserLaunch) {\n\t\t\t\tconfiguration.__configurationTarget = ConfigurationTarget.USER;\n\t\t\t} else if (this instanceof WorkspaceLaunch) {\n\t\t\t\tconfiguration.__configurationTarget = ConfigurationTarget.WORKSPACE;\n\t\t\t} else {\n\t\t\t\tconfiguration.__configurationTarget = ConfigurationTarget.WORKSPACE_FOLDER;\n\t\t\t}\n\t\t}\n\t\treturn configuration;\n\t}\n\n\tasync getInitialConfigurationContent(folderUri?: uri, type?: string, useInitialConfigs?: boolean, token?: CancellationToken): Promise<string> {\n\t\tlet content = '';\n\t\tconst adapter = type ? this.adapterManager.getEnabledDebugger(type) : await this.adapterManager.guessDebugger(true);\n\t\tif (adapter) {\n\t\t\tconst initialConfigs = useInitialConfigs ?\n\t\t\t\tawait this.configurationManager.provideDebugConfigurations(folderUri, adapter.type, token || CancellationToken.None) :\n\t\t\t\t[];\n\t\t\tcontent = await adapter.getInitialConfigurationContent(initialConfigs);\n\t\t}\n\t\treturn content;\n\t}\n\n\tget hidden(): boolean {\n\t\treturn false;\n\t}\n}\n\nclass Launch extends AbstractLaunch implements ILaunch {\n\n\tconstructor(\n\t\tconfigurationManager: ConfigurationManager,\n\t\tadapterManager: IAdapterManager,\n\t\tpublic workspace: IWorkspaceFolder,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper(configurationManager, adapterManager);\n\t}\n\n\tget uri(): uri {\n\t\treturn resources.joinPath(this.workspace.uri, '/.vscode/launch.json');\n\t}\n\n\tget name(): string {\n\t\treturn this.workspace.name;\n\t}\n\n\tprotected getConfig(): IGlobalConfig | undefined {\n\t\treturn this.configurationService.inspect<IGlobalConfig>('launch', { resource: this.workspace.uri }).workspaceFolderValue;\n\t}\n\n\tasync openConfigFile({ preserveFocus, type, suppressInitialConfigs }: { preserveFocus: boolean; type?: string; suppressInitialConfigs?: boolean }, token?: CancellationToken): Promise<{ editor: IEditorPane | null; created: boolean }> {\n\t\tconst resource = this.uri;\n\t\tlet created = false;\n\t\tlet content = '';\n\t\ttry {\n\t\t\tconst fileContent = await this.fileService.readFile(resource);\n\t\t\tcontent = fileContent.value.toString();\n\t\t} catch {\n\t\t\t// launch.json not found: create one by collecting launch configs from debugConfigProviders\n\t\t\tcontent = await this.getInitialConfigurationContent(this.workspace.uri, type, !suppressInitialConfigs, token);\n\t\t\tif (!content) {\n\t\t\t\t// Cancelled\n\t\t\t\treturn { editor: null, created: false };\n\t\t\t}\n\n\t\t\tcreated = true; // pin only if config file is created #8727\n\t\t\ttry {\n\t\t\t\tawait this.textFileService.write(resource, content);\n\t\t\t} catch (error) {\n\t\t\t\tthrow new Error(nls.localize('DebugConfig.failed', \"Unable to create 'launch.json' file inside the '.vscode' folder ({0}).\", error.message));\n\t\t\t}\n\t\t}\n\n\t\tconst index = content.indexOf(`\"${this.configurationManager.selectedConfiguration.name}\"`);\n\t\tlet startLineNumber = 1;\n\t\tfor (let i = 0; i < index; i++) {\n\t\t\tif (content.charAt(i) === '\\n') {\n\t\t\t\tstartLineNumber++;\n\t\t\t}\n\t\t}\n\t\tconst selection = startLineNumber > 1 ? { startLineNumber, startColumn: 4 } : undefined;\n\n\t\tconst editor = await this.editorService.openEditor({\n\t\t\tresource,\n\t\t\toptions: {\n\t\t\t\tselection,\n\t\t\t\tpreserveFocus,\n\t\t\t\tpinned: created,\n\t\t\t\trevealIfVisible: true\n\t\t\t},\n\t\t}, ACTIVE_GROUP);\n\n\t\treturn ({\n\t\t\teditor: editor ?? null,\n\t\t\tcreated\n\t\t});\n\t}\n\n\tasync writeConfiguration(configuration: IConfig): Promise<void> {\n\t\tconst fullConfig = objects.deepClone(this.getConfig()!);\n\t\tif (!fullConfig.configurations) {\n\t\t\tfullConfig.configurations = [];\n\t\t}\n\t\tfullConfig.configurations.push(configuration);\n\t\tawait this.configurationService.updateValue('launch', fullConfig, { resource: this.workspace.uri }, ConfigurationTarget.WORKSPACE_FOLDER);\n\t}\n}\n\nclass WorkspaceLaunch extends AbstractLaunch implements ILaunch {\n\tconstructor(\n\t\tconfigurationManager: ConfigurationManager,\n\t\tadapterManager: IAdapterManager,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService\n\t) {\n\t\tsuper(configurationManager, adapterManager);\n\t}\n\n\tget workspace(): undefined {\n\t\treturn undefined;\n\t}\n\n\tget uri(): uri {\n\t\treturn this.contextService.getWorkspace().configuration!;\n\t}\n\n\tget name(): string {\n\t\treturn nls.localize('workspace', \"workspace\");\n\t}\n\n\tprotected getConfig(): IGlobalConfig | undefined {\n\t\treturn this.configurationService.inspect<IGlobalConfig>('launch').workspaceValue;\n\t}\n\n\tasync openConfigFile({ preserveFocus, type, useInitialConfigs }: { preserveFocus: boolean; type?: string; useInitialConfigs?: boolean }, token?: CancellationToken): Promise<{ editor: IEditorPane | null; created: boolean }> {\n\t\tconst launchExistInFile = !!this.getConfig();\n\t\tif (!launchExistInFile) {\n\t\t\t// Launch property in workspace config not found: create one by collecting launch configs from debugConfigProviders\n\t\t\tconst content = await this.getInitialConfigurationContent(undefined, type, useInitialConfigs, token);\n\t\t\tif (content) {\n\t\t\t\tawait this.configurationService.updateValue('launch', json.parse(content), ConfigurationTarget.WORKSPACE);\n\t\t\t} else {\n\t\t\t\treturn { editor: null, created: false };\n\t\t\t}\n\t\t}\n\n\t\tconst editor = await this.editorService.openEditor({\n\t\t\tresource: this.contextService.getWorkspace().configuration!,\n\t\t\toptions: { preserveFocus }\n\t\t}, ACTIVE_GROUP);\n\n\t\treturn ({\n\t\t\teditor: editor ?? null,\n\t\t\tcreated: false\n\t\t});\n\t}\n}\n\nclass UserLaunch extends AbstractLaunch implements ILaunch {\n\n\tconstructor(\n\t\tconfigurationManager: ConfigurationManager,\n\t\tadapterManager: IAdapterManager,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService\n\t) {\n\t\tsuper(configurationManager, adapterManager);\n\t}\n\n\tget workspace(): undefined {\n\t\treturn undefined;\n\t}\n\n\tget uri(): uri {\n\t\treturn this.preferencesService.userSettingsResource;\n\t}\n\n\tget name(): string {\n\t\treturn nls.localize('user settings', \"user settings\");\n\t}\n\n\toverride get hidden(): boolean {\n\t\treturn true;\n\t}\n\n\tprotected getConfig(): IGlobalConfig | undefined {\n\t\treturn this.configurationService.inspect<IGlobalConfig>('launch').userValue;\n\t}\n\n\tasync openConfigFile({ preserveFocus, type, useInitialContent }: { preserveFocus: boolean; type?: string; useInitialContent?: boolean }): Promise<{ editor: IEditorPane | null; created: boolean }> {\n\t\tconst editor = await this.preferencesService.openUserSettings({ jsonEditor: true, preserveFocus, revealSetting: { key: 'launch' } });\n\t\treturn ({\n\t\t\teditor: editor ?? null,\n\t\t\tcreated: false\n\t\t});\n\t}\n}\n"]}