{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/debug/browser/extensionHostDebugService.ts"],"names":[],"mappings":"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","file":"extensionHostDebugService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { IChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { IExtensionHostDebugService, IOpenExtensionWindowResult } from 'vs/platform/debug/common/extensionHostDebug';\nimport { ExtensionHostDebugBroadcastChannel, ExtensionHostDebugChannelClient } from 'vs/platform/debug/common/extensionHostDebugIpc';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { isFolderToOpen, isWorkspaceToOpen } from 'vs/platform/window/common/window';\nimport { IWorkspaceContextService, isSingleFolderWorkspaceIdentifier, isWorkspaceIdentifier, toWorkspaceIdentifier, hasWorkspaceFileExtension } from 'vs/platform/workspace/common/workspace';\nimport { IBrowserWorkbenchEnvironmentService } from 'vs/workbench/services/environment/browser/environmentService';\nimport { IWorkspace, IWorkspaceProvider } from 'vs/workbench/services/host/browser/browserHostService';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\n\nclass BrowserExtensionHostDebugService extends ExtensionHostDebugChannelClient implements IExtensionHostDebugService {\n\n\tprivate static readonly LAST_EXTENSION_DEVELOPMENT_WORKSPACE_KEY = 'debug.lastExtensionDevelopmentWorkspace';\n\n\tprivate workspaceProvider: IWorkspaceProvider;\n\n\tprivate readonly storageService: IStorageService;\n\tprivate readonly fileService: IFileService;\n\n\tconstructor(\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@IBrowserWorkbenchEnvironmentService environmentService: IBrowserWorkbenchEnvironmentService,\n\t\t@ILogService logService: ILogService,\n\t\t@IHostService hostService: IHostService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IFileService fileService: IFileService\n\t) {\n\t\tconst connection = remoteAgentService.getConnection();\n\t\tlet channel: IChannel;\n\t\tif (connection) {\n\t\t\tchannel = connection.getChannel(ExtensionHostDebugBroadcastChannel.ChannelName);\n\t\t} else {\n\t\t\t// Extension host debugging not supported in serverless.\n\t\t\tchannel = { call: async () => undefined, listen: () => Event.None } as any;\n\t\t}\n\n\t\tsuper(channel);\n\n\t\tthis.storageService = storageService;\n\t\tthis.fileService = fileService;\n\n\t\tif (environmentService.options && environmentService.options.workspaceProvider) {\n\t\t\tthis.workspaceProvider = environmentService.options.workspaceProvider;\n\t\t} else {\n\t\t\tthis.workspaceProvider = { open: async () => true, workspace: undefined, trusted: undefined };\n\t\t\tlogService.warn('Extension Host Debugging not available due to missing workspace provider.');\n\t\t}\n\n\t\t// Reload window on reload request\n\t\tthis._register(this.onReload(event => {\n\t\t\tif (environmentService.isExtensionDevelopment && environmentService.debugExtensionHost.debugId === event.sessionId) {\n\t\t\t\thostService.reload();\n\t\t\t}\n\t\t}));\n\n\t\t// Close window on close request\n\t\tthis._register(this.onClose(event => {\n\t\t\tif (environmentService.isExtensionDevelopment && environmentService.debugExtensionHost.debugId === event.sessionId) {\n\t\t\t\thostService.close();\n\t\t\t}\n\t\t}));\n\n\t\t// Remember workspace as last used for extension development\n\t\t// (unless this is API tests) to restore for a future session\n\t\tif (environmentService.isExtensionDevelopment && !environmentService.extensionTestsLocationURI) {\n\t\t\tconst workspaceId = toWorkspaceIdentifier(contextService.getWorkspace());\n\t\t\tif (isSingleFolderWorkspaceIdentifier(workspaceId) || isWorkspaceIdentifier(workspaceId)) {\n\t\t\t\tconst serializedWorkspace = isSingleFolderWorkspaceIdentifier(workspaceId) ? { folderUri: workspaceId.uri.toJSON() } : { workspaceUri: workspaceId.configPath.toJSON() };\n\t\t\t\tstorageService.store(BrowserExtensionHostDebugService.LAST_EXTENSION_DEVELOPMENT_WORKSPACE_KEY, JSON.stringify(serializedWorkspace), StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\t\t} else {\n\t\t\t\tstorageService.remove(BrowserExtensionHostDebugService.LAST_EXTENSION_DEVELOPMENT_WORKSPACE_KEY, StorageScope.PROFILE);\n\t\t\t}\n\t\t}\n\t}\n\n\toverride async openExtensionDevelopmentHostWindow(args: string[], _debugRenderer: boolean): Promise<IOpenExtensionWindowResult> {\n\n\t\t// Add environment parameters required for debug to work\n\t\tconst environment = new Map<string, string>();\n\n\t\tconst fileUriArg = this.findArgument('file-uri', args);\n\t\tif (fileUriArg && !hasWorkspaceFileExtension(fileUriArg)) {\n\t\t\tenvironment.set('openFile', fileUriArg);\n\t\t}\n\n\t\tconst copyArgs = [\n\t\t\t'extensionDevelopmentPath',\n\t\t\t'extensionTestsPath',\n\t\t\t'extensionEnvironment',\n\t\t\t'debugId',\n\t\t\t'inspect-brk-extensions',\n\t\t\t'inspect-extensions',\n\t\t];\n\n\t\tfor (const argName of copyArgs) {\n\t\t\tconst value = this.findArgument(argName, args);\n\t\t\tif (value) {\n\t\t\t\tenvironment.set(argName, value);\n\t\t\t}\n\t\t}\n\n\t\t// Find out which workspace to open debug window on\n\t\tlet debugWorkspace: IWorkspace = undefined;\n\t\tconst folderUriArg = this.findArgument('folder-uri', args);\n\t\tif (folderUriArg) {\n\t\t\tdebugWorkspace = { folderUri: URI.parse(folderUriArg) };\n\t\t} else {\n\t\t\tconst fileUriArg = this.findArgument('file-uri', args);\n\t\t\tif (fileUriArg && hasWorkspaceFileExtension(fileUriArg)) {\n\t\t\t\tdebugWorkspace = { workspaceUri: URI.parse(fileUriArg) };\n\t\t\t}\n\t\t}\n\n\t\tconst extensionTestsPath = this.findArgument('extensionTestsPath', args);\n\t\tif (!debugWorkspace && !extensionTestsPath) {\n\t\t\tconst lastExtensionDevelopmentWorkspace = this.storageService.get(BrowserExtensionHostDebugService.LAST_EXTENSION_DEVELOPMENT_WORKSPACE_KEY, StorageScope.PROFILE);\n\t\t\tif (lastExtensionDevelopmentWorkspace) {\n\t\t\t\ttry {\n\t\t\t\t\tconst serializedWorkspace: { workspaceUri?: UriComponents; folderUri?: UriComponents } = JSON.parse(lastExtensionDevelopmentWorkspace);\n\t\t\t\t\tif (serializedWorkspace.workspaceUri) {\n\t\t\t\t\t\tdebugWorkspace = { workspaceUri: URI.revive(serializedWorkspace.workspaceUri) };\n\t\t\t\t\t} else if (serializedWorkspace.folderUri) {\n\t\t\t\t\t\tdebugWorkspace = { folderUri: URI.revive(serializedWorkspace.folderUri) };\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Validate workspace exists\n\t\tif (debugWorkspace) {\n\t\t\tconst debugWorkspaceResource = isFolderToOpen(debugWorkspace) ? debugWorkspace.folderUri : isWorkspaceToOpen(debugWorkspace) ? debugWorkspace.workspaceUri : undefined;\n\t\t\tif (debugWorkspaceResource) {\n\t\t\t\tconst workspaceExists = await this.fileService.exists(debugWorkspaceResource);\n\t\t\t\tif (!workspaceExists) {\n\t\t\t\t\tdebugWorkspace = undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Open debug window as new window. Pass arguments over.\n\t\tconst success = await this.workspaceProvider.open(debugWorkspace, {\n\t\t\treuse: false, \t\t\t\t\t\t\t\t// debugging always requires a new window\n\t\t\tpayload: Array.from(environment.entries())\t// mandatory properties to enable debugging\n\t\t});\n\n\t\treturn { success };\n\t}\n\n\tprivate findArgument(key: string, args: string[]): string | undefined {\n\t\tfor (const a of args) {\n\t\t\tconst k = `--${key}=`;\n\t\t\tif (a.indexOf(k) === 0) {\n\t\t\t\treturn a.substring(k.length);\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n\nregisterSingleton(IExtensionHostDebugService, BrowserExtensionHostDebugService, InstantiationType.Delayed);\n"]}