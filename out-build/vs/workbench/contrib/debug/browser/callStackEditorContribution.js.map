{"version":3,"sources":["vs/workbench/contrib/debug/browser/callStackEditorContribution.ts"],"names":[],"mappings":"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","file":"callStackEditorContribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { distinct } from 'vs/base/common/arrays';\nimport { Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Constants } from 'vs/base/common/uint';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { Range } from 'vs/editor/common/core/range';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { GlyphMarginLane, IModelDecorationOptions, IModelDeltaDecoration, OverviewRulerLane, TrackedRangeStickiness } from 'vs/editor/common/model';\nimport { localize } from 'vs/nls';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { registerColor } from 'vs/platform/theme/common/colorRegistry';\nimport { themeColorFromId } from 'vs/platform/theme/common/themeService';\nimport { ThemeIcon } from 'vs/base/common/themables';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { debugStackframe, debugStackframeFocused } from 'vs/workbench/contrib/debug/browser/debugIcons';\nimport { IDebugService, IStackFrame } from 'vs/workbench/contrib/debug/common/debug';\nimport 'vs/css!./media/callStackEditorContribution';\n\nexport const topStackFrameColor = registerColor('editor.stackFrameHighlightBackground', { dark: '#ffff0033', light: '#ffff6673', hcDark: '#ffff0033', hcLight: '#ffff6673' }, localize('topStackFrameLineHighlight', 'Background color for the highlight of line at the top stack frame position.'));\nexport const focusedStackFrameColor = registerColor('editor.focusedStackFrameHighlightBackground', { dark: '#7abd7a4d', light: '#cee7ce73', hcDark: '#7abd7a4d', hcLight: '#cee7ce73' }, localize('focusedStackFrameLineHighlight', 'Background color for the highlight of line at focused stack frame position.'));\nconst stickiness = TrackedRangeStickiness.NeverGrowsWhenTypingAtEdges;\n\n// we need a separate decoration for glyph margin, since we do not want it on each line of a multi line statement.\nconst TOP_STACK_FRAME_MARGIN: IModelDecorationOptions = {\n\tdescription: 'top-stack-frame-margin',\n\tglyphMarginClassName: ThemeIcon.asClassName(debugStackframe),\n\tglyphMargin: { position: GlyphMarginLane.Right },\n\tzIndex: 9999,\n\tstickiness,\n\toverviewRuler: {\n\t\tposition: OverviewRulerLane.Full,\n\t\tcolor: themeColorFromId(topStackFrameColor)\n\t}\n};\nconst FOCUSED_STACK_FRAME_MARGIN: IModelDecorationOptions = {\n\tdescription: 'focused-stack-frame-margin',\n\tglyphMarginClassName: ThemeIcon.asClassName(debugStackframeFocused),\n\tglyphMargin: { position: GlyphMarginLane.Right },\n\tzIndex: 9999,\n\tstickiness,\n\toverviewRuler: {\n\t\tposition: OverviewRulerLane.Full,\n\t\tcolor: themeColorFromId(focusedStackFrameColor)\n\t}\n};\nconst TOP_STACK_FRAME_DECORATION: IModelDecorationOptions = {\n\tdescription: 'top-stack-frame-decoration',\n\tisWholeLine: true,\n\tclassName: 'debug-top-stack-frame-line',\n\tstickiness\n};\nconst FOCUSED_STACK_FRAME_DECORATION: IModelDecorationOptions = {\n\tdescription: 'focused-stack-frame-decoration',\n\tisWholeLine: true,\n\tclassName: 'debug-focused-stack-frame-line',\n\tstickiness\n};\n\nexport function createDecorationsForStackFrame(stackFrame: IStackFrame, isFocusedSession: boolean, noCharactersBefore: boolean): IModelDeltaDecoration[] {\n\t// only show decorations for the currently focused thread.\n\tconst result: IModelDeltaDecoration[] = [];\n\tconst columnUntilEOLRange = new Range(stackFrame.range.startLineNumber, stackFrame.range.startColumn, stackFrame.range.startLineNumber, Constants.MAX_SAFE_SMALL_INTEGER);\n\tconst range = new Range(stackFrame.range.startLineNumber, stackFrame.range.startColumn, stackFrame.range.startLineNumber, stackFrame.range.startColumn + 1);\n\n\t// compute how to decorate the editor. Different decorations are used if this is a top stack frame, focused stack frame,\n\t// an exception or a stack frame that did not change the line number (we only decorate the columns, not the whole line).\n\tconst topStackFrame = stackFrame.thread.getTopStackFrame();\n\tif (stackFrame.getId() === topStackFrame?.getId()) {\n\t\tif (isFocusedSession) {\n\t\t\tresult.push({\n\t\t\t\toptions: TOP_STACK_FRAME_MARGIN,\n\t\t\t\trange\n\t\t\t});\n\t\t}\n\n\t\tresult.push({\n\t\t\toptions: TOP_STACK_FRAME_DECORATION,\n\t\t\trange: columnUntilEOLRange\n\t\t});\n\n\t\tif (stackFrame.range.startColumn > 1) {\n\t\t\tresult.push({\n\t\t\t\toptions: {\n\t\t\t\t\tdescription: 'top-stack-frame-inline-decoration',\n\t\t\t\t\tbefore: {\n\t\t\t\t\t\tcontent: '\\uEB8B',\n\t\t\t\t\t\tinlineClassName: noCharactersBefore ? 'debug-top-stack-frame-column start-of-line' : 'debug-top-stack-frame-column',\n\t\t\t\t\t\tinlineClassNameAffectsLetterSpacing: true\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\trange: columnUntilEOLRange\n\t\t\t});\n\t\t}\n\t} else {\n\t\tif (isFocusedSession) {\n\t\t\tresult.push({\n\t\t\t\toptions: FOCUSED_STACK_FRAME_MARGIN,\n\t\t\t\trange\n\t\t\t});\n\t\t}\n\n\t\tresult.push({\n\t\t\toptions: FOCUSED_STACK_FRAME_DECORATION,\n\t\t\trange: columnUntilEOLRange\n\t\t});\n\t}\n\n\treturn result;\n}\n\nexport class CallStackEditorContribution extends Disposable implements IEditorContribution {\n\tprivate decorations = this.editor.createDecorationsCollection();\n\n\tconstructor(\n\t\tprivate readonly editor: ICodeEditor,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\n\t\tconst setDecorations = () => this.decorations.set(this.createCallStackDecorations());\n\t\tthis._register(Event.any(this.debugService.getViewModel().onDidFocusStackFrame, this.debugService.getModel().onDidChangeCallStack)(() => {\n\t\t\tsetDecorations();\n\t\t}));\n\t\tthis._register(this.editor.onDidChangeModel(e => {\n\t\t\tif (e.newModelUrl) {\n\t\t\t\tsetDecorations();\n\t\t\t}\n\t\t}));\n\t\tsetDecorations();\n\t}\n\n\tprivate createCallStackDecorations(): IModelDeltaDecoration[] {\n\t\tconst editor = this.editor;\n\t\tif (!editor.hasModel()) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst focusedStackFrame = this.debugService.getViewModel().focusedStackFrame;\n\t\tconst decorations: IModelDeltaDecoration[] = [];\n\t\tthis.debugService.getModel().getSessions().forEach(s => {\n\t\t\tconst isSessionFocused = s === focusedStackFrame?.thread.session;\n\t\t\ts.getAllThreads().forEach(t => {\n\t\t\t\tif (t.stopped) {\n\t\t\t\t\tconst callStack = t.getCallStack();\n\t\t\t\t\tconst stackFrames: IStackFrame[] = [];\n\t\t\t\t\tif (callStack.length > 0) {\n\t\t\t\t\t\t// Always decorate top stack frame, and decorate focused stack frame if it is not the top stack frame\n\t\t\t\t\t\tif (focusedStackFrame && !focusedStackFrame.equals(callStack[0])) {\n\t\t\t\t\t\t\tstackFrames.push(focusedStackFrame);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstackFrames.push(callStack[0]);\n\t\t\t\t\t}\n\n\t\t\t\t\tstackFrames.forEach(candidateStackFrame => {\n\t\t\t\t\t\tif (candidateStackFrame && this.uriIdentityService.extUri.isEqual(candidateStackFrame.source.uri, editor.getModel()?.uri)) {\n\t\t\t\t\t\t\tif (candidateStackFrame.range.startLineNumber > editor.getModel()?.getLineCount() || candidateStackFrame.range.startLineNumber < 1) {\n\t\t\t\t\t\t\t\tthis.logService.warn(`CallStackEditorContribution: invalid stack frame line number: ${candidateStackFrame.range.startLineNumber}`);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tconst noCharactersBefore = editor.getModel().getLineFirstNonWhitespaceColumn(candidateStackFrame.range.startLineNumber) >= candidateStackFrame.range.startColumn;\n\t\t\t\t\t\t\tdecorations.push(...createDecorationsForStackFrame(candidateStackFrame, isSessionFocused, noCharactersBefore));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\t// Deduplicate same decorations so colors do not stack #109045\n\t\treturn distinct(decorations, d => `${d.options.className} ${d.options.glyphMarginClassName} ${d.range.startLineNumber} ${d.range.startColumn}`);\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\t\tthis.decorations.clear();\n\t}\n}\n\n"]}