{"version":3,"sources":["vs/workbench/contrib/debug/browser/debugAdapterManager.ts"],"names":[],"mappings":"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","file":"debugAdapterManager.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IJSONSchema, IJSONSchemaMap } from 'vs/base/common/jsonSchema';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport Severity from 'vs/base/common/severity';\nimport * as strings from 'vs/base/common/strings';\nimport { isCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { IEditorModel } from 'vs/editor/common/editorCommon';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { ITextModel } from 'vs/editor/common/model';\nimport * as nls from 'vs/nls';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { Extensions as JSONExtensions, IJSONContributionRegistry } from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { Breakpoints } from 'vs/workbench/contrib/debug/common/breakpoints';\nimport { CONTEXT_DEBUGGERS_AVAILABLE, CONTEXT_DEBUG_EXTENSION_AVAILABLE, IAdapterDescriptor, IAdapterManager, IConfig, IDebugAdapter, IDebugAdapterDescriptorFactory, IDebugAdapterFactory, IDebugConfiguration, IDebugSession, INTERNAL_CONSOLE_OPTIONS_SCHEMA } from 'vs/workbench/contrib/debug/common/debug';\nimport { Debugger } from 'vs/workbench/contrib/debug/common/debugger';\nimport { breakpointsExtPoint, debuggersExtPoint, launchSchema, presentationSchema } from 'vs/workbench/contrib/debug/common/debugSchemas';\nimport { TaskDefinitionRegistry } from 'vs/workbench/contrib/tasks/common/taskDefinitionRegistry';\nimport { launchSchemaId } from 'vs/workbench/services/configuration/common/configuration';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { ILifecycleService, LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\n\nconst jsonRegistry = Registry.as<IJSONContributionRegistry>(JSONExtensions.JSONContribution);\n\nexport interface IAdapterManagerDelegate {\n\tonDidNewSession: Event<IDebugSession>;\n}\n\nexport class AdapterManager extends Disposable implements IAdapterManager {\n\n\tprivate debuggers: Debugger[];\n\tprivate adapterDescriptorFactories: IDebugAdapterDescriptorFactory[];\n\tprivate debugAdapterFactories = new Map<string, IDebugAdapterFactory>();\n\tprivate debuggersAvailable!: IContextKey<boolean>;\n\tprivate debugExtensionsAvailable!: IContextKey<boolean>;\n\tprivate readonly _onDidRegisterDebugger = new Emitter<void>();\n\tprivate readonly _onDidDebuggersExtPointRead = new Emitter<void>();\n\tprivate breakpointContributions: Breakpoints[] = [];\n\tprivate debuggerWhenKeys = new Set<string>();\n\n\t/** Extensions that were already active before any debugger activation events */\n\tprivate earlyActivatedExtensions: Set<string> | undefined;\n\n\tprivate usedDebugTypes = new Set<string>();\n\n\tconstructor(\n\t\tdelegate: IAdapterManagerDelegate,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService\n\t) {\n\t\tsuper();\n\t\tthis.adapterDescriptorFactories = [];\n\t\tthis.debuggers = [];\n\t\tthis.registerListeners();\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tthis.debuggersAvailable = CONTEXT_DEBUGGERS_AVAILABLE.bindTo(contextKeyService);\n\t\t\tthis.debugExtensionsAvailable = CONTEXT_DEBUG_EXTENSION_AVAILABLE.bindTo(contextKeyService);\n\t\t});\n\t\tthis._register(this.contextKeyService.onDidChangeContext(e => {\n\t\t\tif (e.affectsSome(this.debuggerWhenKeys)) {\n\t\t\t\tthis.debuggersAvailable.set(this.hasEnabledDebuggers());\n\t\t\t\tthis.updateDebugAdapterSchema();\n\t\t\t}\n\t\t}));\n\t\tthis._register(this.onDidDebuggersExtPointRead(() => {\n\t\t\tthis.debugExtensionsAvailable.set(this.debuggers.length > 0);\n\t\t}));\n\t\tthis.lifecycleService.when(LifecyclePhase.Eventually)\n\t\t\t.then(() => this.debugExtensionsAvailable.set(this.debuggers.length > 0)); // If no extensions with a debugger contribution are loaded\n\n\t\tthis._register(delegate.onDidNewSession(s => {\n\t\t\tthis.usedDebugTypes.add(s.configuration.type);\n\t\t}));\n\t}\n\n\tprivate registerListeners(): void {\n\t\tdebuggersExtPoint.setHandler((extensions, delta) => {\n\t\t\tdelta.added.forEach(added => {\n\t\t\t\tadded.value.forEach(rawAdapter => {\n\t\t\t\t\tif (!rawAdapter.type || (typeof rawAdapter.type !== 'string')) {\n\t\t\t\t\t\tadded.collector.error(nls.localize('debugNoType', \"Debugger 'type' can not be omitted and must be of type 'string'.\"));\n\t\t\t\t\t}\n\n\t\t\t\t\tif (rawAdapter.type !== '*') {\n\t\t\t\t\t\tconst existing = this.getDebugger(rawAdapter.type);\n\t\t\t\t\t\tif (existing) {\n\t\t\t\t\t\t\texisting.merge(rawAdapter, added.description);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst dbg = this.instantiationService.createInstance(Debugger, this, rawAdapter, added.description);\n\t\t\t\t\t\t\tdbg.when?.keys().forEach(key => this.debuggerWhenKeys.add(key));\n\t\t\t\t\t\t\tthis.debuggers.push(dbg);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// take care of all wildcard contributions\n\t\t\textensions.forEach(extension => {\n\t\t\t\textension.value.forEach(rawAdapter => {\n\t\t\t\t\tif (rawAdapter.type === '*') {\n\t\t\t\t\t\tthis.debuggers.forEach(dbg => dbg.merge(rawAdapter, extension.description));\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tdelta.removed.forEach(removed => {\n\t\t\t\tconst removedTypes = removed.value.map(rawAdapter => rawAdapter.type);\n\t\t\t\tthis.debuggers = this.debuggers.filter(d => removedTypes.indexOf(d.type) === -1);\n\t\t\t});\n\n\t\t\tthis.updateDebugAdapterSchema();\n\t\t\tthis._onDidDebuggersExtPointRead.fire();\n\t\t});\n\n\t\tbreakpointsExtPoint.setHandler(extensions => {\n\t\t\tthis.breakpointContributions = extensions.flatMap(ext => ext.value.map(breakpoint => this.instantiationService.createInstance(Breakpoints, breakpoint)));\n\t\t});\n\t}\n\n\tprivate updateDebugAdapterSchema(): void {\n\t\t// update the schema to include all attributes, snippets and types from extensions.\n\t\tconst items = (<IJSONSchema>launchSchema.properties!['configurations'].items);\n\t\tconst taskSchema = TaskDefinitionRegistry.getJsonSchema();\n\t\tconst definitions: IJSONSchemaMap = {\n\t\t\t'common': {\n\t\t\t\tproperties: {\n\t\t\t\t\t'name': {\n\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\tdescription: nls.localize('debugName', \"Name of configuration; appears in the launch configuration dropdown menu.\"),\n\t\t\t\t\t\tdefault: 'Launch'\n\t\t\t\t\t},\n\t\t\t\t\t'debugServer': {\n\t\t\t\t\t\ttype: 'number',\n\t\t\t\t\t\tdescription: nls.localize('debugServer', \"For debug extension development only: if a port is specified VS Code tries to connect to a debug adapter running in server mode\"),\n\t\t\t\t\t\tdefault: 4711\n\t\t\t\t\t},\n\t\t\t\t\t'preLaunchTask': {\n\t\t\t\t\t\tanyOf: [taskSchema, {\n\t\t\t\t\t\t\ttype: ['string']\n\t\t\t\t\t\t}],\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdefaultSnippets: [{ body: { task: '', type: '' } }],\n\t\t\t\t\t\tdescription: nls.localize('debugPrelaunchTask', \"Task to run before debug session starts.\")\n\t\t\t\t\t},\n\t\t\t\t\t'postDebugTask': {\n\t\t\t\t\t\tanyOf: [taskSchema, {\n\t\t\t\t\t\t\ttype: ['string'],\n\t\t\t\t\t\t}],\n\t\t\t\t\t\tdefault: '',\n\t\t\t\t\t\tdefaultSnippets: [{ body: { task: '', type: '' } }],\n\t\t\t\t\t\tdescription: nls.localize('debugPostDebugTask', \"Task to run after debug session ends.\")\n\t\t\t\t\t},\n\t\t\t\t\t'presentation': presentationSchema,\n\t\t\t\t\t'internalConsoleOptions': INTERNAL_CONSOLE_OPTIONS_SCHEMA,\n\t\t\t\t\t'suppressMultipleSessionWarning': {\n\t\t\t\t\t\ttype: 'boolean',\n\t\t\t\t\t\tdescription: nls.localize('suppressMultipleSessionWarning', \"Disable the warning when trying to start the same debug configuration more than once.\"),\n\t\t\t\t\t\tdefault: true\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tlaunchSchema.definitions = definitions;\n\t\titems.oneOf = [];\n\t\titems.defaultSnippets = [];\n\t\tthis.debuggers.forEach(adapter => {\n\t\t\tconst schemaAttributes = adapter.getSchemaAttributes(definitions);\n\t\t\tif (schemaAttributes && items.oneOf) {\n\t\t\t\titems.oneOf.push(...schemaAttributes);\n\t\t\t}\n\t\t\tconst configurationSnippets = adapter.configurationSnippets;\n\t\t\tif (configurationSnippets && items.defaultSnippets) {\n\t\t\t\titems.defaultSnippets.push(...configurationSnippets);\n\t\t\t}\n\t\t});\n\t\tjsonRegistry.registerSchema(launchSchemaId, launchSchema);\n\t}\n\n\tregisterDebugAdapterFactory(debugTypes: string[], debugAdapterLauncher: IDebugAdapterFactory): IDisposable {\n\t\tdebugTypes.forEach(debugType => this.debugAdapterFactories.set(debugType, debugAdapterLauncher));\n\t\tthis.debuggersAvailable.set(this.hasEnabledDebuggers());\n\t\tthis._onDidRegisterDebugger.fire();\n\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tdebugTypes.forEach(debugType => this.debugAdapterFactories.delete(debugType));\n\t\t\t}\n\t\t};\n\t}\n\n\thasEnabledDebuggers(): boolean {\n\t\tfor (const [type] of this.debugAdapterFactories) {\n\t\t\tconst dbg = this.getDebugger(type);\n\t\t\tif (dbg && dbg.enabled) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tcreateDebugAdapter(session: IDebugSession): IDebugAdapter | undefined {\n\t\tconst factory = this.debugAdapterFactories.get(session.configuration.type);\n\t\tif (factory) {\n\t\t\treturn factory.createDebugAdapter(session);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tsubstituteVariables(debugType: string, folder: IWorkspaceFolder | undefined, config: IConfig): Promise<IConfig> {\n\t\tconst factory = this.debugAdapterFactories.get(debugType);\n\t\tif (factory) {\n\t\t\treturn factory.substituteVariables(folder, config);\n\t\t}\n\t\treturn Promise.resolve(config);\n\t}\n\n\trunInTerminal(debugType: string, args: DebugProtocol.RunInTerminalRequestArguments, sessionId: string): Promise<number | undefined> {\n\t\tconst factory = this.debugAdapterFactories.get(debugType);\n\t\tif (factory) {\n\t\t\treturn factory.runInTerminal(args, sessionId);\n\t\t}\n\t\treturn Promise.resolve(void 0);\n\t}\n\n\tregisterDebugAdapterDescriptorFactory(debugAdapterProvider: IDebugAdapterDescriptorFactory): IDisposable {\n\t\tthis.adapterDescriptorFactories.push(debugAdapterProvider);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis.unregisterDebugAdapterDescriptorFactory(debugAdapterProvider);\n\t\t\t}\n\t\t};\n\t}\n\n\tunregisterDebugAdapterDescriptorFactory(debugAdapterProvider: IDebugAdapterDescriptorFactory): void {\n\t\tconst ix = this.adapterDescriptorFactories.indexOf(debugAdapterProvider);\n\t\tif (ix >= 0) {\n\t\t\tthis.adapterDescriptorFactories.splice(ix, 1);\n\t\t}\n\t}\n\n\tgetDebugAdapterDescriptor(session: IDebugSession): Promise<IAdapterDescriptor | undefined> {\n\t\tconst config = session.configuration;\n\t\tconst providers = this.adapterDescriptorFactories.filter(p => p.type === config.type && p.createDebugAdapterDescriptor);\n\t\tif (providers.length === 1) {\n\t\t\treturn providers[0].createDebugAdapterDescriptor(session);\n\t\t} else {\n\t\t\t// TODO@AW handle n > 1 case\n\t\t}\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tgetDebuggerLabel(type: string): string | undefined {\n\t\tconst dbgr = this.getDebugger(type);\n\t\tif (dbgr) {\n\t\t\treturn dbgr.label;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tget onDidRegisterDebugger(): Event<void> {\n\t\treturn this._onDidRegisterDebugger.event;\n\t}\n\n\tget onDidDebuggersExtPointRead(): Event<void> {\n\t\treturn this._onDidDebuggersExtPointRead.event;\n\t}\n\n\tcanSetBreakpointsIn(model: ITextModel): boolean {\n\t\tconst languageId = model.getLanguageId();\n\t\tif (!languageId || languageId === 'jsonc' || languageId === 'log') {\n\t\t\t// do not allow breakpoints in our settings files and output\n\t\t\treturn false;\n\t\t}\n\t\tif (this.configurationService.getValue<IDebugConfiguration>('debug').allowBreakpointsEverywhere) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this.breakpointContributions.some(breakpoints => breakpoints.language === languageId && breakpoints.enabled);\n\t}\n\n\tgetDebugger(type: string): Debugger | undefined {\n\t\treturn this.debuggers.find(dbg => strings.equalsIgnoreCase(dbg.type, type));\n\t}\n\n\tgetEnabledDebugger(type: string): Debugger | undefined {\n\t\tconst adapter = this.getDebugger(type);\n\t\treturn adapter && adapter.enabled ? adapter : undefined;\n\t}\n\n\tsomeDebuggerInterestedInLanguage(languageId: string): boolean {\n\t\treturn !!this.debuggers\n\t\t\t.filter(d => d.enabled)\n\t\t\t.find(a => a.interestedInLanguage(languageId));\n\t}\n\n\tasync guessDebugger(gettingConfigurations: boolean): Promise<Debugger | undefined> {\n\t\tconst activeTextEditorControl = this.editorService.activeTextEditorControl;\n\t\tlet candidates: Debugger[] = [];\n\t\tlet languageLabel: string | null = null;\n\t\tlet model: IEditorModel | null = null;\n\t\tif (isCodeEditor(activeTextEditorControl)) {\n\t\t\tmodel = activeTextEditorControl.getModel();\n\t\t\tconst language = model ? model.getLanguageId() : undefined;\n\t\t\tif (language) {\n\t\t\t\tlanguageLabel = this.languageService.getLanguageName(language);\n\t\t\t}\n\t\t\tconst adapters = this.debuggers\n\t\t\t\t.filter(a => a.enabled)\n\t\t\t\t.filter(a => language && a.interestedInLanguage(language));\n\t\t\tif (adapters.length === 1) {\n\t\t\t\treturn adapters[0];\n\t\t\t}\n\t\t\tif (adapters.length > 1) {\n\t\t\t\tcandidates = adapters;\n\t\t\t}\n\t\t}\n\n\t\t// We want to get the debuggers that have configuration providers in the case we are fetching configurations\n\t\t// Or if a breakpoint can be set in the current file (good hint that an extension can handle it)\n\t\tif ((!languageLabel || gettingConfigurations || (model && this.canSetBreakpointsIn(model))) && candidates.length === 0) {\n\t\t\tawait this.activateDebuggers('onDebugInitialConfigurations');\n\t\t\tcandidates = this.debuggers\n\t\t\t\t.filter(a => a.enabled)\n\t\t\t\t.filter(dbg => dbg.hasInitialConfiguration() || dbg.hasConfigurationProvider());\n\t\t}\n\n\t\tif (candidates.length === 0 && languageLabel) {\n\t\t\tif (languageLabel.indexOf(' ') >= 0) {\n\t\t\t\tlanguageLabel = `'${languageLabel}'`;\n\t\t\t}\n\t\t\tconst { confirmed } = await this.dialogService.confirm({\n\t\t\t\ttype: Severity.Warning,\n\t\t\t\tmessage: nls.localize('CouldNotFindLanguage', \"You don't have an extension for debugging {0}. Should we find a {0} extension in the Marketplace?\", languageLabel),\n\t\t\t\tprimaryButton: nls.localize({ key: 'findExtension', comment: ['&& denotes a mnemonic'] }, \"&&Find {0} extension\", languageLabel)\n\t\t\t});\n\t\t\tif (confirmed) {\n\t\t\t\tawait this.commandService.executeCommand('debug.installAdditionalDebuggers', languageLabel);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis.initExtensionActivationsIfNeeded();\n\n\t\tcandidates.sort((first, second) => first.label.localeCompare(second.label));\n\t\tcandidates = candidates.filter(a => !a.isHiddenFromDropdown);\n\n\t\tconst suggestedCandidates: Debugger[] = [];\n\t\tconst otherCandidates: Debugger[] = [];\n\t\tcandidates.forEach(d => {\n\t\t\tconst descriptor = d.getMainExtensionDescriptor();\n\t\t\tif (descriptor.id && !!this.earlyActivatedExtensions?.has(descriptor.id)) {\n\t\t\t\t// Was activated early\n\t\t\t\tsuggestedCandidates.push(d);\n\t\t\t} else if (this.usedDebugTypes.has(d.type)) {\n\t\t\t\t// Was used already\n\t\t\t\tsuggestedCandidates.push(d);\n\t\t\t} else {\n\t\t\t\totherCandidates.push(d);\n\t\t\t}\n\t\t});\n\n\t\tconst picks: { label: string; debugger?: Debugger; type?: string }[] = [];\n\t\tif (suggestedCandidates.length > 0) {\n\t\t\tpicks.push(\n\t\t\t\t{ type: 'separator', label: nls.localize('suggestedDebuggers', \"Suggested\") },\n\t\t\t\t...suggestedCandidates.map(c => ({ label: c.label, debugger: c })));\n\t\t}\n\n\t\tif (otherCandidates.length > 0) {\n\t\t\tif (picks.length > 0) {\n\t\t\t\tpicks.push({ type: 'separator', label: '' });\n\t\t\t}\n\n\t\t\tpicks.push(...otherCandidates.map(c => ({ label: c.label, debugger: c })));\n\t\t}\n\n\t\tpicks.push(\n\t\t\t{ type: 'separator', label: '' },\n\t\t\t{ label: languageLabel ? nls.localize('installLanguage', \"Install an extension for {0}...\", languageLabel) : nls.localize('installExt', \"Install extension...\") });\n\n\t\tconst placeHolder = nls.localize('selectDebug', \"Select debugger\");\n\t\treturn this.quickInputService.pick<{ label: string; debugger?: Debugger }>(picks, { activeItem: picks[0], placeHolder })\n\t\t\t.then(picked => {\n\t\t\t\tif (picked && picked.debugger) {\n\t\t\t\t\treturn picked.debugger;\n\t\t\t\t}\n\t\t\t\tif (picked) {\n\t\t\t\t\tthis.commandService.executeCommand('debug.installAdditionalDebuggers', languageLabel);\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t});\n\t}\n\n\tprivate initExtensionActivationsIfNeeded(): void {\n\t\tif (!this.earlyActivatedExtensions) {\n\t\t\tthis.earlyActivatedExtensions = new Set<string>();\n\n\t\t\tconst status = this.extensionService.getExtensionsStatus();\n\t\t\tfor (const id in status) {\n\t\t\t\tif (!!status[id].activationTimes) {\n\t\t\t\t\tthis.earlyActivatedExtensions.add(id);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tasync activateDebuggers(activationEvent: string, debugType?: string): Promise<void> {\n\t\tthis.initExtensionActivationsIfNeeded();\n\n\t\tconst promises: Promise<any>[] = [\n\t\t\tthis.extensionService.activateByEvent(activationEvent),\n\t\t\tthis.extensionService.activateByEvent('onDebug')\n\t\t];\n\t\tif (debugType) {\n\t\t\tpromises.push(this.extensionService.activateByEvent(`${activationEvent}:${debugType}`));\n\t\t}\n\t\tawait Promise.all(promises);\n\t}\n}\n"]}