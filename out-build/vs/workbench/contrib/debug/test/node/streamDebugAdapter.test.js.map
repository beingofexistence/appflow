{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/debug/test/node/streamDebugAdapter.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAYhG,SAAS,qBAAqB,CAAC,YAAkB;QAChD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;YACtC,YAAY,CAAC,WAAW,CAAC,YAAY,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,EAAE,CAAC,MAAM,EAAE,EAAE;gBACxE,OAAO,CAAC,MAAM,CAAC,CAAC;YACjB,CAAC,EAAE,IAAI,CAAC,CAAC;QACV,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,SAAS,gBAAgB,CAAC,MAAkB;QAC3C,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,CAAC,IAAY,EAAE,EAAE;YAClC,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAC7C,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YAChC,MAAM,QAAQ,GAAQ;gBACrB,GAAG,EAAE,OAAO,CAAC,GAAG;gBAChB,WAAW,EAAE,OAAO,CAAC,GAAG;gBACxB,IAAI,EAAE,UAAU;gBAChB,OAAO,EAAE,OAAO,CAAC,OAAO;aACxB,CAAC;YACF,IAAI,OAAO,CAAC,SAAS,CAAC,SAAS,KAAK,MAAM,EAAE;gBAC3C,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC;aACxB;iBAAM;gBACN,QAAQ,CAAC,OAAO,GAAG,KAAK,CAAC;gBACzB,QAAQ,CAAC,OAAO,GAAG,QAAQ,CAAC;aAC5B;YAED,MAAM,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;YACjD,MAAM,CAAC,KAAK,CAAC,mBAAmB,eAAe,CAAC,MAAM,WAAW,eAAe,EAAE,CAAC,CAAC;QACrF,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,4BAA4B,EAAE,GAAG,EAAE;QAExC,IAAI,CAAC,wEAAwE,EAAE,KAAK,IAAI,EAAE;YACzF,uEAAuE;YACvE,qFAAqF;YACrF,MAAM,QAAQ,GAAa,EAAE,CAAC;YAC9B,MAAM,OAAO,GAAG,UAAU,CAAC,GAAG,EAAE;gBAC/B,OAAO,CAAC,GAAG,CAAC,kDAAkD,EAAE,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACrF,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,iCAAiC;YAE3C,MAAM,QAAQ,GAAG,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACxD,MAAM,QAAQ,GAAG,QAAQ,CAAC,EAAE,CAAQ,CAAC,CAAC,IAAA,UAAG,EAAE,eAAe,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,IAAA,UAAG,EAAE,IAAA,WAAM,GAAE,EAAE,QAAQ,CAAC,CAAC;YACjG,QAAQ,CAAC,IAAI,CAAC,aAAa,QAAQ,EAAE,CAAC,CAAC;YACvC,MAAM,MAAM,GAAG,MAAM,IAAI,OAAO,CAAa,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAChE,MAAM,MAAM,GAAG,GAAG,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC;gBAClD,MAAM,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;gBAChD,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;gBAC7B,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACzB,CAAC,CAAC,CAAC;YACH,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;YAE3B,MAAM,YAAY,GAAG,IAAI,mBAAI,CAAkB;gBAC9C,IAAI,EAAE,YAAY;gBAClB,IAAI,EAAE,QAAQ;aACd,CAAC,CAAC;YACH,IAAI;gBACH,MAAM,YAAY,CAAC,YAAY,EAAE,CAAC;gBAClC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;gBACjC,MAAM,QAAQ,GAA2B,MAAM,qBAAqB,CAAC,YAAY,CAAC,CAAC;gBACnF,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;gBAC9B,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;gBACnD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;gBAC5C,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aAC7D;oBAAS;gBACT,MAAM,YAAY,CAAC,WAAW,EAAE,CAAC;gBACjC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;gBACjC,YAAY,CAAC,OAAO,CAAC,CAAC;gBACtB,MAAM,CAAC,KAAK,EAAE,CAAC;gBACf,YAAY,CAAC,OAAO,EAAE,CAAC;aACvB;QACF,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qEAAqE,EAAE,KAAK,IAAI,EAAE;YAEtF,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;YACxD,MAAM,IAAI,GAAG,MAAM,KAAK,CAAC,GAAG,CAAU,OAAO,EAAE,EAAE,CAAC,kBAAkB,EAAE,IAAI,CAAC,yBAAyB,EAAE,EAAE,CAAC,oCAAoC,CAAC,CAAC;YAC/I,MAAM,MAAM,GAAG,GAAG,CAAC,YAAY,CAAC,gBAAgB,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAC/D,MAAM,YAAY,GAAG,IAAI,mBAAI,CAAe;gBAC3C,IAAI,EAAE,QAAQ;gBACd,IAAI;aACJ,CAAC,CAAC;YACH,IAAI;gBACH,MAAM,YAAY,CAAC,YAAY,EAAE,CAAC;gBAClC,MAAM,QAAQ,GAA2B,MAAM,qBAAqB,CAAC,YAAY,CAAC,CAAC;gBACnF,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;gBACnD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;gBAC5C,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;aAC7D;oBAAS;gBACT,MAAM,YAAY,CAAC,WAAW,EAAE,CAAC;gBACjC,MAAM,CAAC,KAAK,EAAE,CAAC;gBACf,YAAY,CAAC,OAAO,EAAE,CAAC;aACvB;QACF,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"streamDebugAdapter.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as crypto from 'crypto';\nimport * as net from 'net';\nimport * as platform from 'vs/base/common/platform';\nimport { tmpdir } from 'os';\nimport { join } from 'vs/base/common/path';\nimport * as ports from 'vs/base/node/ports';\nimport { SocketDebugAdapter, NamedPipeDebugAdapter, StreamDebugAdapter } from 'vs/workbench/contrib/debug/node/debugAdapter';\n\n\nfunction sendInitializeRequest(debugAdapter: StreamDebugAdapter): Promise<DebugProtocol.Response> {\n\treturn new Promise((resolve, reject) => {\n\t\tdebugAdapter.sendRequest('initialize', { adapterID: 'test' }, (result) => {\n\t\t\tresolve(result);\n\t\t}, 3000);\n\t});\n}\n\nfunction serverConnection(socket: net.Socket) {\n\tsocket.on('data', (data: Buffer) => {\n\t\tconst str = data.toString().split('\\r\\n')[2];\n\t\tconst request = JSON.parse(str);\n\t\tconst response: any = {\n\t\t\tseq: request.seq,\n\t\t\trequest_seq: request.seq,\n\t\t\ttype: 'response',\n\t\t\tcommand: request.command\n\t\t};\n\t\tif (request.arguments.adapterID === 'test') {\n\t\t\tresponse.success = true;\n\t\t} else {\n\t\t\tresponse.success = false;\n\t\t\tresponse.message = 'failed';\n\t\t}\n\n\t\tconst responsePayload = JSON.stringify(response);\n\t\tsocket.write(`Content-Length: ${responsePayload.length}\\r\\n\\r\\n${responsePayload}`);\n\t});\n}\n\nsuite('Debug - StreamDebugAdapter', () => {\n\n\ttest(`StreamDebugAdapter (NamedPipeDebugAdapter) can initialize a connection`, async () => {\n\t\t// todo@connor4312: debug test failure that seems to only happen in CI.\n\t\t// Even running this test on a loop on my machine for an hour doesn't hit failures :(\n\t\tconst progress: string[] = [];\n\t\tconst timeout = setTimeout(() => {\n\t\t\tconsole.log('NamedPipeDebugAdapter test might fail. Progress:', progress.join(','));\n\t\t}, 1000); // should usually finish is <10ms\n\n\t\tconst pipeName = crypto.randomBytes(10).toString('hex');\n\t\tconst pipePath = platform.isWindows ? join('\\\\\\\\.\\\\pipe\\\\', pipeName) : join(tmpdir(), pipeName);\n\t\tprogress.push(`listen on ${pipePath}`);\n\t\tconst server = await new Promise<net.Server>((resolve, reject) => {\n\t\t\tconst server = net.createServer(serverConnection);\n\t\t\tserver.once('listening', () => resolve(server));\n\t\t\tserver.once('error', reject);\n\t\t\tserver.listen(pipePath);\n\t\t});\n\t\tprogress.push('server up');\n\n\t\tconst debugAdapter = new NamedPipeDebugAdapter({\n\t\t\ttype: 'pipeServer',\n\t\t\tpath: pipePath\n\t\t});\n\t\ttry {\n\t\t\tawait debugAdapter.startSession();\n\t\t\tprogress.push('started session');\n\t\t\tconst response: DebugProtocol.Response = await sendInitializeRequest(debugAdapter);\n\t\t\tprogress.push('got response');\n\t\t\tassert.strictEqual(response.command, 'initialize');\n\t\t\tassert.strictEqual(response.request_seq, 1);\n\t\t\tassert.strictEqual(response.success, true, response.message);\n\t\t} finally {\n\t\t\tawait debugAdapter.stopSession();\n\t\t\tprogress.push('stopped session');\n\t\t\tclearTimeout(timeout);\n\t\t\tserver.close();\n\t\t\tdebugAdapter.dispose();\n\t\t}\n\t});\n\n\ttest(`StreamDebugAdapter (SocketDebugAdapter) can initialize a connection`, async () => {\n\n\t\tconst rndPort = Math.floor(Math.random() * 1000 + 8000);\n\t\tconst port = await ports.findFreePort(rndPort, 10 /* try 10 ports */, 3000 /* try up to 3 seconds */, 87 /* skip 87 ports between attempts */);\n\t\tconst server = net.createServer(serverConnection).listen(port);\n\t\tconst debugAdapter = new SocketDebugAdapter({\n\t\t\ttype: 'server',\n\t\t\tport\n\t\t});\n\t\ttry {\n\t\t\tawait debugAdapter.startSession();\n\t\t\tconst response: DebugProtocol.Response = await sendInitializeRequest(debugAdapter);\n\t\t\tassert.strictEqual(response.command, 'initialize');\n\t\t\tassert.strictEqual(response.request_seq, 1);\n\t\t\tassert.strictEqual(response.success, true, response.message);\n\t\t} finally {\n\t\t\tawait debugAdapter.stopSession();\n\t\t\tserver.close();\n\t\t\tdebugAdapter.dispose();\n\t\t}\n\t});\n});\n"]}