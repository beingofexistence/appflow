{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/debug/test/common/debugModel.test.ts"],"names":[],"mappings":"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","file":"debugModel.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { DeferredPromise } from 'vs/base/common/async';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { mockObject } from 'vs/base/test/common/mock';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { DebugModel, ExceptionBreakpoint, FunctionBreakpoint, Thread } from 'vs/workbench/contrib/debug/common/debugModel';\nimport { MockDebugStorage } from 'vs/workbench/contrib/debug/test/common/mockDebug';\nimport { TestStorageService } from 'vs/workbench/test/common/workbenchTestServices';\n\nsuite('DebugModel', () => {\n\tsuite('FunctionBreakpoint', () => {\n\t\ttest('Id is saved', () => {\n\t\t\tconst fbp = new FunctionBreakpoint('function', true, 'hit condition', 'condition', 'log message');\n\t\t\tconst strigified = JSON.stringify(fbp);\n\t\t\tconst parsed = JSON.parse(strigified);\n\t\t\tassert.equal(parsed.id, fbp.getId());\n\t\t});\n\t});\n\n\tsuite('ExceptionBreakpoint', () => {\n\t\ttest('Restored matches new', () => {\n\t\t\tconst ebp = new ExceptionBreakpoint('id', 'label', true, true, 'condition', 'description', 'condition description', false);\n\t\t\tconst strigified = JSON.stringify(ebp);\n\t\t\tconst parsed = JSON.parse(strigified);\n\t\t\tconst newEbp = new ExceptionBreakpoint(parsed.filter, parsed.label, parsed.enabled, parsed.supportsCondition, parsed.condition, parsed.description, parsed.conditionDescription, !!parsed.fallback);\n\t\t\tassert.ok(ebp.matches(newEbp));\n\t\t});\n\t});\n\n\tsuite('DebugModel', () => {\n\t\ttest('refreshTopOfCallstack resolves all returned promises when called multiple times', async () => {\n\t\t\tconst topFrameDeferred = new DeferredPromise<void>();\n\t\t\tconst wholeStackDeferred = new DeferredPromise<void>();\n\t\t\tconst fakeThread = mockObject<Thread>()({\n\t\t\t\tsession: { capabilities: { supportsDelayedStackTraceLoading: true } } as any,\n\t\t\t\tgetCallStack: () => [],\n\t\t\t\tgetStaleCallStack: () => [],\n\t\t\t});\n\t\t\tfakeThread.fetchCallStack.callsFake((levels: number) => {\n\t\t\t\treturn levels === 1 ? topFrameDeferred.p : wholeStackDeferred.p;\n\t\t\t});\n\t\t\tfakeThread.getId.returns(1);\n\n\t\t\tconst disposable = new DisposableStore();\n\t\t\tconst storage = disposable.add(new TestStorageService());\n\t\t\tconst model = new DebugModel(disposable.add(new MockDebugStorage(storage)), <any>{ isDirty: (e: any) => false }, undefined!, new NullLogService());\n\t\t\tdisposable.add(model);\n\n\t\t\tlet top1Resolved = false;\n\t\t\tlet whole1Resolved = false;\n\t\t\tlet top2Resolved = false;\n\t\t\tlet whole2Resolved = false;\n\t\t\tconst result1 = model.refreshTopOfCallstack(fakeThread as any);\n\t\t\tresult1.topCallStack.then(() => top1Resolved = true);\n\t\t\tresult1.wholeCallStack.then(() => whole1Resolved = true);\n\n\t\t\tconst result2 = model.refreshTopOfCallstack(fakeThread as any);\n\t\t\tresult2.topCallStack.then(() => top2Resolved = true);\n\t\t\tresult2.wholeCallStack.then(() => whole2Resolved = true);\n\n\t\t\tassert.ok(!top1Resolved);\n\t\t\tassert.ok(!whole1Resolved);\n\t\t\tassert.ok(!top2Resolved);\n\t\t\tassert.ok(!whole2Resolved);\n\n\t\t\tawait topFrameDeferred.complete();\n\t\t\tawait result1.topCallStack;\n\t\t\tawait result2.topCallStack;\n\t\t\tassert.ok(!whole1Resolved);\n\t\t\tassert.ok(!whole2Resolved);\n\n\t\t\tawait wholeStackDeferred.complete();\n\t\t\tawait result1.wholeCallStack;\n\t\t\tawait result2.wholeCallStack;\n\n\t\t\tdisposable.dispose();\n\t\t});\n\t});\n});\n"]}