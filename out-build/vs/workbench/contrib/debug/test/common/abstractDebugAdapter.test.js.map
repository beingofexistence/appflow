{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/debug/test/common/abstractDebugAdapter.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAOhG,KAAK,CAAC,8BAA8B,EAAE,GAAG,EAAE;QAC1C,IAAA,WAAG,GAAsC,CAAC;QAE1C,KAAK,CAAC,gBAAgB,EAAE,GAAG,EAAE;YAC5B,IAAI,OAAa,CAAa;YAC9B,IAAI,MAAgB,CAAC;YACrB,KAAK,CAAC,GAAG,EAAE;gBACV,OAAO,GAAG,IAAI,gBAAI,EAAc,CAAC;gBACjC,MAAM,GAAG,EAAE,CAAC;gBACZ,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;oBACpB,MAAM,CAAC,IAAI,CAAE,EAAgC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBAC3D,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;gBAChE,CAAC,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;YAEH,MAAM,QAAQ,GAAG,KAAK,EAAE,UAAkB,EAAE,EAAE;gBAC7C,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,UAAU,EAAE,EAAE,UAAU,EAAE,EAAE,OAAO,CAAC,CAAC,CAAC;gBACvF,MAAM,CAAC,IAAI,CAAC,IAAI,UAAU,EAAE,CAAC,CAAC;gBAC9B,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC,CAAC;YAChE,CAAC,CAAC;YAEF,IAAI,CAAC,uCAAuC,EAAE,KAAK,IAAI,EAAE;gBACxD,MAAM,QAAQ,CAAC,YAAY,CAAC,CAAC;gBAC7B,MAAM,IAAA,WAAG,EAAK,CAAC,CAAC,CAAC;gBAEjB,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,YAAY,EAAE,mBAAmB,EAAE,aAAa,EAAE,mBAAmB,CAAC,CAAC,CAAC;YACzG,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;gBACvD,MAAM,QAAQ,CAAC,WAAW,CAAC,CAAC;gBAC5B,MAAM,IAAA,WAAG,EAAK,CAAC,CAAC,CAAC;gBAEjB,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,YAAY,EAAE,mBAAmB,EAAE,WAAW,EAAE,mBAAmB,CAAC,CAAC,CAAC;YACvG,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,2CAA2C,EAAE,KAAK,IAAI,EAAE;gBAC5D,OAAO,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;gBACjD,OAAO,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;gBACjD,OAAO,CAAC,aAAa,CAAC,QAAQ,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,CAAC;gBACjD,MAAM,IAAA,WAAG,EAAK,CAAC,CAAC,CAAC;gBAEjB,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,mBAAmB,EAAE,mBAAmB,EAAE,mBAAmB,CAAC,CAAC,CAAC;YAChH,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"abstractDebugAdapter.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { timeout } from 'vs/base/common/async';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { MockDebugAdapter } from 'vs/workbench/contrib/debug/test/common/mockDebug';\n\nsuite('Debug - AbstractDebugAdapter', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('event ordering', () => {\n\t\tlet adapter: MockDebugAdapter;\n\t\tlet output: string[];\n\t\tsetup(() => {\n\t\t\tadapter = new MockDebugAdapter();\n\t\t\toutput = [];\n\t\t\tadapter.onEvent(ev => {\n\t\t\t\toutput.push((ev as DebugProtocol.OutputEvent).body.output);\n\t\t\t\tPromise.resolve().then(() => output.push('--end microtask--'));\n\t\t\t});\n\t\t});\n\n\t\tconst evaluate = async (expression: string) => {\n\t\t\tawait new Promise(resolve => adapter.sendRequest('evaluate', { expression }, resolve));\n\t\t\toutput.push(`=${expression}`);\n\t\t\tPromise.resolve().then(() => output.push('--end microtask--'));\n\t\t};\n\n\t\ttest('inserts task boundary before response', async () => {\n\t\t\tawait evaluate('before.foo');\n\t\t\tawait timeout(0);\n\n\t\t\tassert.deepStrictEqual(output, ['before.foo', '--end microtask--', '=before.foo', '--end microtask--']);\n\t\t});\n\n\t\ttest('inserts task boundary after response', async () => {\n\t\t\tawait evaluate('after.foo');\n\t\t\tawait timeout(0);\n\n\t\t\tassert.deepStrictEqual(output, ['=after.foo', '--end microtask--', 'after.foo', '--end microtask--']);\n\t\t});\n\n\t\ttest('does not insert boundaries between events', async () => {\n\t\t\tadapter.sendEventBody('output', { output: 'a' });\n\t\t\tadapter.sendEventBody('output', { output: 'b' });\n\t\t\tadapter.sendEventBody('output', { output: 'c' });\n\t\t\tawait timeout(0);\n\n\t\t\tassert.deepStrictEqual(output, ['a', 'b', 'c', '--end microtask--', '--end microtask--', '--end microtask--']);\n\t\t});\n\t});\n});\n"]}