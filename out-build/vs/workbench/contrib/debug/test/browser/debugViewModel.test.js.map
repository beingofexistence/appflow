{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/debug/test/browser/debugViewModel.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAYhG,KAAK,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAChC,IAAI,KAAW,CAAM;QAErB,KAAK,CAAC,GAAG,EAAE;YACV,KAAK,GAAG,IAAI,qBAAI,CAAM,IAAI,4BAAI,EAAmB,CAAC,CAAC;QACpD,CAAC,CAAC,CAAC;QAEH,IAAA,WAAG,GAAsC,CAAC;QAE1C,IAAI,CAAC,qBAAqB,EAAE,GAAG,EAAE;YAChC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,iBAAiB,EAAE,SAAS,CAAC,CAAC;YACvD,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;YACnD,MAAM,OAAO,GAAG,IAAI,gBAAI,EAAS,CAAC;YAClC,MAAM,MAAM,GAAG,IAAI,iBAAI,CAAG,OAAO,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;YAClD,MAAM,MAAM,GAAG,IAAI,iBAAG,CAAI;gBACzB,IAAI,EAAE,mBAAmB;gBACzB,eAAe,EAAE,EAAE;gBACnB,gBAAgB,EAAE,aAAa;aAC/B,EAAE,iBAAiB,EAAE,qBAAI,EAAoB,IAAI,SAAG,EAAa,CAAC,CAAC;YACpE,MAAM,KAAK,GAAG,IAAI,iBAAI,CAAO,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,eAAe,EAAE,CAAC,EAAE,SAAS,EAAE,CAAC,EAAE,aAAa,EAAE,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;YACrJ,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;YAE9C,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,iBAAkB,CAAC,KAAK,EAAE,EAAE,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;YACpE,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,aAAc,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;YACrD,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,cAAe,CAAC,KAAK,EAAE,EAAE,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;QACpE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qBAAqB,EAAE,GAAG,EAAE;YAChC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,qBAAqB,EAAE,EAAE,SAAS,CAAC,CAAC;YAC7D,MAAM,UAAU,GAAG,IAAI,iBAAI,CAAO,eAAe,CAAC,CAAC;YACnD,KAAK,CAAC,qBAAqB,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;YAE/C,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,qBAAqB,EAAE,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;QAC3E,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gDAAgD,EAAE,GAAG,EAAE;YAC3D,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,kBAAkB,EAAE,EAAE,KAAK,CAAC,CAAC;YACtD,KAAK,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;YAChC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,kBAAkB,EAAE,EAAE,IAAI,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"debugViewModel.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { MockContextKeyService } from 'vs/platform/keybinding/test/common/mockKeybindingService';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { Expression, StackFrame, Thread } from 'vs/workbench/contrib/debug/common/debugModel';\nimport { Source } from 'vs/workbench/contrib/debug/common/debugSource';\nimport { ViewModel } from 'vs/workbench/contrib/debug/common/debugViewModel';\nimport { mockUriIdentityService } from 'vs/workbench/contrib/debug/test/browser/mockDebugModel';\nimport { MockSession } from 'vs/workbench/contrib/debug/test/common/mockDebug';\n\nsuite('Debug - View Model', () => {\n\tlet model: ViewModel;\n\n\tsetup(() => {\n\t\tmodel = new ViewModel(new MockContextKeyService());\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('focused stack frame', () => {\n\t\tassert.strictEqual(model.focusedStackFrame, undefined);\n\t\tassert.strictEqual(model.focusedThread, undefined);\n\t\tconst session = new MockSession();\n\t\tconst thread = new Thread(session, 'myThread', 1);\n\t\tconst source = new Source({\n\t\t\tname: 'internalModule.js',\n\t\t\tsourceReference: 11,\n\t\t\tpresentationHint: 'deemphasize'\n\t\t}, 'aDebugSessionId', mockUriIdentityService, new NullLogService());\n\t\tconst frame = new StackFrame(thread, 1, source, 'app.js', 'normal', { startColumn: 1, startLineNumber: 1, endColumn: 1, endLineNumber: 1 }, 0, true);\n\t\tmodel.setFocus(frame, thread, session, false);\n\n\t\tassert.strictEqual(model.focusedStackFrame!.getId(), frame.getId());\n\t\tassert.strictEqual(model.focusedThread!.threadId, 1);\n\t\tassert.strictEqual(model.focusedSession!.getId(), session.getId());\n\t});\n\n\ttest('selected expression', () => {\n\t\tassert.strictEqual(model.getSelectedExpression(), undefined);\n\t\tconst expression = new Expression('my expression');\n\t\tmodel.setSelectedExpression(expression, false);\n\n\t\tassert.strictEqual(model.getSelectedExpression()?.expression, expression);\n\t});\n\n\ttest('multi session view and changed workbench state', () => {\n\t\tassert.strictEqual(model.isMultiSessionView(), false);\n\t\tmodel.setMultiSessionView(true);\n\t\tassert.strictEqual(model.isMultiSessionView(), true);\n\t});\n});\n"]}