{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/debug/test/browser/debugMemory.test.ts"],"names":[],"mappings":"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","file":"debugMemory.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { decodeBase64, encodeBase64, VSBuffer } from 'vs/base/common/buffer';\nimport { Emitter } from 'vs/base/common/event';\nimport { mockObject, MockObject } from 'vs/base/test/common/mock';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { MemoryRangeType } from 'vs/workbench/contrib/debug/common/debug';\nimport { MemoryRegion } from 'vs/workbench/contrib/debug/common/debugModel';\nimport { MockSession } from 'vs/workbench/contrib/debug/test/common/mockDebug';\n\nsuite('Debug - Memory', () => {\n\tconst dapResponseCommon = {\n\t\tcommand: 'someCommand',\n\t\ttype: 'response',\n\t\tseq: 1,\n\t\trequest_seq: 1,\n\t\tsuccess: true,\n\t};\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('MemoryRegion', () => {\n\t\tlet memory: VSBuffer;\n\t\tlet unreadable: number;\n\t\tlet invalidateMemoryEmitter: Emitter<DebugProtocol.MemoryEvent>;\n\t\tlet session: MockObject<MockSession, 'onDidInvalidateMemory'>;\n\t\tlet region: MemoryRegion;\n\n\t\tsetup(() => {\n\t\t\tconst memoryBuf = new Uint8Array(1024);\n\t\t\tfor (let i = 0; i < memoryBuf.length; i++) {\n\t\t\t\tmemoryBuf[i] = i; // will be 0-255\n\t\t\t}\n\t\t\tmemory = VSBuffer.wrap(memoryBuf);\n\t\t\tinvalidateMemoryEmitter = new Emitter();\n\t\t\tunreadable = 0;\n\n\t\t\tsession = mockObject<MockSession>()({\n\t\t\t\tonDidInvalidateMemory: invalidateMemoryEmitter.event\n\t\t\t});\n\n\t\t\tsession.readMemory.callsFake((ref: string, fromOffset: number, count: number) => {\n\t\t\t\tconst res: DebugProtocol.ReadMemoryResponse = ({\n\t\t\t\t\t...dapResponseCommon,\n\t\t\t\t\tbody: {\n\t\t\t\t\t\taddress: '0',\n\t\t\t\t\t\tdata: encodeBase64(memory.slice(fromOffset, fromOffset + Math.max(0, count - unreadable))),\n\t\t\t\t\t\tunreadableBytes: unreadable\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tunreadable = 0;\n\n\t\t\t\treturn Promise.resolve(res);\n\t\t\t});\n\n\t\t\tsession.writeMemory.callsFake((ref: string, fromOffset: number, data: string): DebugProtocol.WriteMemoryResponse => {\n\t\t\t\tconst decoded = decodeBase64(data);\n\t\t\t\tfor (let i = 0; i < decoded.byteLength; i++) {\n\t\t\t\t\tmemory.buffer[fromOffset + i] = decoded.buffer[i];\n\t\t\t\t}\n\n\t\t\t\treturn ({\n\t\t\t\t\t...dapResponseCommon,\n\t\t\t\t\tbody: {\n\t\t\t\t\t\tbytesWritten: decoded.byteLength,\n\t\t\t\t\t\toffset: fromOffset,\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tregion = new MemoryRegion('ref', session as any);\n\t\t});\n\n\t\tteardown(() => {\n\t\t\tregion.dispose();\n\t\t});\n\n\t\ttest('reads a simple range', async () => {\n\t\t\tassert.deepStrictEqual(await region.read(10, 14), [\n\t\t\t\t{ type: MemoryRangeType.Valid, offset: 10, length: 4, data: VSBuffer.wrap(new Uint8Array([10, 11, 12, 13])) }\n\t\t\t]);\n\t\t});\n\n\t\ttest('reads a non-contiguous range', async () => {\n\t\t\tunreadable = 3;\n\t\t\tassert.deepStrictEqual(await region.read(10, 14), [\n\t\t\t\t{ type: MemoryRangeType.Valid, offset: 10, length: 1, data: VSBuffer.wrap(new Uint8Array([10])) },\n\t\t\t\t{ type: MemoryRangeType.Unreadable, offset: 11, length: 3 },\n\t\t\t]);\n\t\t});\n\t});\n});\n"]}