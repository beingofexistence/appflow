{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/debug/test/browser/debugConfigurationManager.test.ts"],"names":[],"mappings":"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","file":"debugConfigurationManager.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Event } from 'vs/base/common/event';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { ContextKeyService } from 'vs/platform/contextkey/browser/contextKeyService';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { UriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentityService';\nimport { ConfigurationManager } from 'vs/workbench/contrib/debug/browser/debugConfigurationManager';\nimport { DebugConfigurationProviderTriggerKind, IAdapterManager, IConfig, IDebugAdapterExecutable, IDebugSession } from 'vs/workbench/contrib/debug/common/debug';\nimport { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';\nimport { TestHistoryService, TestQuickInputService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { TestContextService, TestExtensionService, TestStorageService } from 'vs/workbench/test/common/workbenchTestServices';\n\nsuite('debugConfigurationManager', () => {\n\tconst configurationProviderType = 'custom-type';\n\tlet _debugConfigurationManager: ConfigurationManager;\n\tlet disposables: DisposableStore;\n\n\tconst adapterManager = <IAdapterManager>{\n\t\tgetDebugAdapterDescriptor(session: IDebugSession, config: IConfig): Promise<IDebugAdapterExecutable | undefined> {\n\t\t\treturn Promise.resolve(undefined);\n\t\t},\n\n\t\tactivateDebuggers(activationEvent: string, debugType?: string): Promise<void> {\n\t\t\treturn Promise.resolve();\n\t\t},\n\n\t\tget onDidDebuggersExtPointRead(): Event<void> {\n\t\t\treturn Event.None;\n\t\t}\n\t};\n\n\tconst preferencesService = <IPreferencesService>{\n\t\tuserSettingsResource: URI.file('/tmp/settings.json')\n\t};\n\n\tconst configurationService = new TestConfigurationService();\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\tconst fileService = disposables.add(new FileService(new NullLogService()));\n\t\tconst instantiationService = disposables.add(new TestInstantiationService(new ServiceCollection([IPreferencesService, preferencesService], [IConfigurationService, configurationService])));\n\t\t_debugConfigurationManager = new ConfigurationManager(\n\t\t\tadapterManager,\n\t\t\tnew TestContextService(),\n\t\t\tconfigurationService,\n\t\t\tnew TestQuickInputService(),\n\t\t\tinstantiationService,\n\t\t\tnew TestStorageService(),\n\t\t\tnew TestExtensionService(),\n\t\t\tnew TestHistoryService(),\n\t\t\tnew UriIdentityService(fileService),\n\t\t\tnew ContextKeyService(configurationService));\n\t});\n\n\tteardown(() => disposables.dispose());\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('resolves configuration based on type', async () => {\n\t\tdisposables.add(_debugConfigurationManager.registerDebugConfigurationProvider({\n\t\t\ttype: configurationProviderType,\n\t\t\tresolveDebugConfiguration: (folderUri, config, token) => {\n\t\t\t\tassert.strictEqual(config.type, configurationProviderType);\n\t\t\t\treturn Promise.resolve({\n\t\t\t\t\t...config,\n\t\t\t\t\tconfigurationResolved: true\n\t\t\t\t});\n\t\t\t},\n\t\t\ttriggerKind: DebugConfigurationProviderTriggerKind.Initial\n\t\t}));\n\n\t\tconst initialConfig: IConfig = {\n\t\t\ttype: configurationProviderType,\n\t\t\trequest: 'launch',\n\t\t\tname: 'configName',\n\t\t};\n\n\t\tconst resultConfig = await _debugConfigurationManager.resolveConfigurationByProviders(undefined, configurationProviderType, initialConfig, CancellationToken.None);\n\t\tassert.strictEqual((resultConfig as any).configurationResolved, true, 'Configuration should be updated by test provider');\n\t});\n\n\ttest('resolves configuration from second provider if type changes', async () => {\n\t\tconst secondProviderType = 'second-provider';\n\t\tdisposables.add(_debugConfigurationManager.registerDebugConfigurationProvider({\n\t\t\ttype: configurationProviderType,\n\t\t\tresolveDebugConfiguration: (folderUri, config, token) => {\n\t\t\t\tassert.strictEqual(config.type, configurationProviderType);\n\t\t\t\treturn Promise.resolve({\n\t\t\t\t\t...config,\n\t\t\t\t\ttype: secondProviderType\n\t\t\t\t});\n\t\t\t},\n\t\t\ttriggerKind: DebugConfigurationProviderTriggerKind.Initial\n\t\t}));\n\t\tdisposables.add(_debugConfigurationManager.registerDebugConfigurationProvider({\n\t\t\ttype: secondProviderType,\n\t\t\tresolveDebugConfiguration: (folderUri, config, token) => {\n\t\t\t\tassert.strictEqual(config.type, secondProviderType);\n\t\t\t\treturn Promise.resolve({\n\t\t\t\t\t...config,\n\t\t\t\t\tconfigurationResolved: true\n\t\t\t\t});\n\t\t\t},\n\t\t\ttriggerKind: DebugConfigurationProviderTriggerKind.Initial\n\t\t}));\n\n\t\tconst initialConfig: IConfig = {\n\t\t\ttype: configurationProviderType,\n\t\t\trequest: 'launch',\n\t\t\tname: 'configName',\n\t\t};\n\n\t\tconst resultConfig = await _debugConfigurationManager.resolveConfigurationByProviders(undefined, configurationProviderType, initialConfig, CancellationToken.None);\n\t\tassert.strictEqual(resultConfig!.type, secondProviderType);\n\t\tassert.strictEqual((resultConfig as any).configurationResolved, true, 'Configuration should be updated by test provider');\n\t});\n\n\tteardown(() => disposables.clear());\n});\n"]}