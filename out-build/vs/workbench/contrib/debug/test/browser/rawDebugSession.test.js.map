{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/debug/test/browser/rawDebugSession.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAchG,KAAK,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC7B,IAAI,WAAgB,CAAa;QACjC,KAAK,CAAC,GAAG,EAAE;YACV,WAAW,GAAG,IAAI,eAAG,EAAc,CAAC;QACrC,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,GAAG,EAAE;YACb,WAAW,CAAC,OAAO,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;QAEH,IAAA,WAAG,GAAsC,CAAC;QAE1C,SAAS,iBAAiB;YACzB,MAAM,YAAY,GAAG,IAAI,gBAAI,EAAc,CAAC;YAC5C,MAAM,IAAI,GAAG,IAAA,UAAG,GAAoB,CAAC;gBACpC,IAAI,EAAE,YAAY;aAClB,CAAC,CAAC;YAEH,MAAM,OAAO,GAAG,IAAI,sBAAI,CACvB,YAAY,EACZ,IAAwB,EACxB,WAAW,EACX,MAAM,EACN,IAAI,CAAC,IAAA,UAAG,GAA+B,CAAC,EACxC,IAAI,CAAC,IAAA,UAAG,GAAmB,CAAC,EAC5B,IAAI,CAAC,IAAA,UAAG,GAAyB,CAAC,EAClC,IAAI,CAAC,IAAA,UAAG,GAAmB,CAAC,CAAC,CAAC;YAC/B,WAAW,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACzB,WAAW,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YAE9B,OAAO,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC;QAC/B,CAAC;QAED,IAAI,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,EAAE,YAAY,EAAE,IAAI,EAAE,GAAG,iBAAiB,EAAE,CAAC;YACnD,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YAEnD,YAAY,CAAC,eAAe,CAAC,gBAAgB,EAAE;gBAC9C,OAAO,EAAE,QAAQ;gBACjB,aAAa,EAAE;oBACd,IAAI,EAAE,iBAAiB;iBACvB;aAC+C,CAAC,CAAC;YACnD,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,yBAAyB,CAAC,gBAAgB,CAAC,CAAC;YAChF,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC;YACvD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wCAAwC,EAAE,KAAK,IAAI,EAAE;YACzD,MAAM,EAAE,YAAY,EAAE,IAAI,EAAE,GAAG,iBAAiB,EAAE,CAAC;YACnD,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;YAEpD,YAAY,CAAC,eAAe,CAAC,gBAAgB,EAAE;gBAC9C,OAAO,EAAE,QAAQ;gBACjB,aAAa,EAAE;oBACd,IAAI,EAAE,iBAAiB;iBACvB;aAC+C,CAAC,CAAC;YACnD,MAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,yBAAyB,CAAC,gBAAgB,CAAC,CAAC;YAChF,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,EAAE,gBAAgB,CAAC,CAAC;YACvD,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"rawDebugSession.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { mock, mockObject } from 'vs/base/test/common/mock';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { IExtensionHostDebugService } from 'vs/platform/debug/common/extensionHostDebug';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { RawDebugSession } from 'vs/workbench/contrib/debug/browser/rawDebugSession';\nimport { IDebugger } from 'vs/workbench/contrib/debug/common/debug';\nimport { MockDebugAdapter } from 'vs/workbench/contrib/debug/test/common/mockDebug';\n\nsuite('RawDebugSession', () => {\n\tlet disposables: DisposableStore;\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t});\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction createTestObjects() {\n\t\tconst debugAdapter = new MockDebugAdapter();\n\t\tconst dbgr = mockObject<IDebugger>()({\n\t\t\ttype: 'mock-debug'\n\t\t});\n\n\t\tconst session = new RawDebugSession(\n\t\t\tdebugAdapter,\n\t\t\tdbgr as any as IDebugger,\n\t\t\t'sessionId',\n\t\t\t'name',\n\t\t\tnew (mock<IExtensionHostDebugService>()),\n\t\t\tnew (mock<IOpenerService>()),\n\t\t\tnew (mock<INotificationService>()),\n\t\t\tnew (mock<IDialogService>()));\n\t\tdisposables.add(session);\n\t\tdisposables.add(debugAdapter);\n\n\t\treturn { debugAdapter, dbgr };\n\t}\n\n\ttest('handles startDebugging request success', async () => {\n\t\tconst { debugAdapter, dbgr } = createTestObjects();\n\t\tdbgr.startDebugging.returns(Promise.resolve(true));\n\n\t\tdebugAdapter.sendRequestBody('startDebugging', {\n\t\t\trequest: 'launch',\n\t\t\tconfiguration: {\n\t\t\t\ttype: 'some-other-type'\n\t\t\t}\n\t\t} as DebugProtocol.StartDebuggingRequestArguments);\n\t\tconst response = await debugAdapter.waitForResponseFromClient('startDebugging');\n\t\tassert.strictEqual(response.command, 'startDebugging');\n\t\tassert.strictEqual(response.success, true);\n\t});\n\n\ttest('handles startDebugging request failure', async () => {\n\t\tconst { debugAdapter, dbgr } = createTestObjects();\n\t\tdbgr.startDebugging.returns(Promise.resolve(false));\n\n\t\tdebugAdapter.sendRequestBody('startDebugging', {\n\t\t\trequest: 'launch',\n\t\t\tconfiguration: {\n\t\t\t\ttype: 'some-other-type'\n\t\t\t}\n\t\t} as DebugProtocol.StartDebuggingRequestArguments);\n\t\tconst response = await debugAdapter.waitForResponseFromClient('startDebugging');\n\t\tassert.strictEqual(response.command, 'startDebugging');\n\t\tassert.strictEqual(response.success, false);\n\t});\n});\n"]}