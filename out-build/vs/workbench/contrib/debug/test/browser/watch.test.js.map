{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/debug/test/browser/watch.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAQhG,cAAc;IAEd,SAAS,sBAAsB,CAAC,gBAA8B,EAAE,YAAoB;QACnF,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC/C,gBAAgB,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;YAC7B,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;YACxC,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;YACpC,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,eAAe,EAAE,GAAG,EAAE;QAC3B,IAAI,KAAW,CAAO;QACtB,IAAI,WAAgB,CAAa;QAEjC,KAAK,CAAC,GAAG,EAAE;YACV,WAAW,GAAG,IAAI,eAAG,EAAc,CAAC;YACpC,KAAK,GAAG,IAAA,qBAAI,EAAiB,WAAW,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,GAAG,EAAE;YACb,WAAW,CAAC,OAAO,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;QAEH,IAAA,WAAG,GAAsC,CAAC;QAE1C,IAAI,CAAC,mBAAmB,EAAE,GAAG,EAAE;YAC9B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,mBAAmB,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC1D,KAAK,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;YACpC,KAAK,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;YACpC,IAAI,gBAAgB,GAAG,KAAK,CAAC,mBAAmB,EAAE,CAAC;YACnD,sBAAsB,CAAC,gBAAgB,EAAE,SAAS,CAAC,CAAC;YAEpD,KAAK,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,UAAU,CAAC,CAAC;YACrE,KAAK,CAAC,qBAAqB,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,UAAU,CAAC,CAAC;YACrE,sBAAsB,CAAC,KAAK,CAAC,mBAAmB,EAAE,EAAE,UAAU,CAAC,CAAC;YAEhE,sBAAsB,CAAC,KAAK,CAAC,mBAAmB,EAAE,EAAE,UAAU,CAAC,CAAC;YAEhE,KAAK,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,CAAC;YAC3C,KAAK,CAAC,mBAAmB,CAAC,KAAK,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;YACrE,gBAAgB,GAAG,KAAK,CAAC,mBAAmB,EAAE,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;YACzD,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;YAC/D,MAAM,CAAC,WAAW,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;YAEzD,KAAK,CAAC,sBAAsB,EAAE,CAAC;YAC/B,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,mBAAmB,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"watch.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { DebugModel, Expression } from 'vs/workbench/contrib/debug/common/debugModel';\nimport { createMockDebugModel } from 'vs/workbench/contrib/debug/test/browser/mockDebugModel';\n\n// Expressions\n\nfunction assertWatchExpressions(watchExpressions: Expression[], expectedName: string) {\n\tassert.strictEqual(watchExpressions.length, 2);\n\twatchExpressions.forEach(we => {\n\t\tassert.strictEqual(we.available, false);\n\t\tassert.strictEqual(we.reference, 0);\n\t\tassert.strictEqual(we.name, expectedName);\n\t});\n}\n\nsuite('Debug - Watch', () => {\n\tlet model: DebugModel;\n\tlet disposables: DisposableStore;\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\tmodel = createMockDebugModel(disposables);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('watch expressions', () => {\n\t\tassert.strictEqual(model.getWatchExpressions().length, 0);\n\t\tmodel.addWatchExpression('console');\n\t\tmodel.addWatchExpression('console');\n\t\tlet watchExpressions = model.getWatchExpressions();\n\t\tassertWatchExpressions(watchExpressions, 'console');\n\n\t\tmodel.renameWatchExpression(watchExpressions[0].getId(), 'new_name');\n\t\tmodel.renameWatchExpression(watchExpressions[1].getId(), 'new_name');\n\t\tassertWatchExpressions(model.getWatchExpressions(), 'new_name');\n\n\t\tassertWatchExpressions(model.getWatchExpressions(), 'new_name');\n\n\t\tmodel.addWatchExpression('mockExpression');\n\t\tmodel.moveWatchExpression(model.getWatchExpressions()[2].getId(), 1);\n\t\twatchExpressions = model.getWatchExpressions();\n\t\tassert.strictEqual(watchExpressions[0].name, 'new_name');\n\t\tassert.strictEqual(watchExpressions[1].name, 'mockExpression');\n\t\tassert.strictEqual(watchExpressions[2].name, 'new_name');\n\n\t\tmodel.removeWatchExpressions();\n\t\tassert.strictEqual(model.getWatchExpressions().length, 0);\n\t});\n});\n"]}