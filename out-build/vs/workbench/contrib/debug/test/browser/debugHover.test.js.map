{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/debug/test/browser/debugHover.test.ts"],"names":[],"mappings":"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","file":"debugHover.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { findExpressionInStackFrame } from 'vs/workbench/contrib/debug/browser/debugHover';\nimport type { IExpression, IScope } from 'vs/workbench/contrib/debug/common/debug';\nimport { Scope, StackFrame, Thread, Variable } from 'vs/workbench/contrib/debug/common/debugModel';\nimport { Source } from 'vs/workbench/contrib/debug/common/debugSource';\nimport { createTestSession } from 'vs/workbench/contrib/debug/test/browser/callStack.test';\nimport { createMockDebugModel, mockUriIdentityService } from 'vs/workbench/contrib/debug/test/browser/mockDebugModel';\n\nsuite('Debug - Hover', () => {\n\tlet disposables: DisposableStore;\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t});\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\ttest('find expression in stack frame', async () => {\n\t\tconst model = createMockDebugModel(disposables);\n\t\tconst session = disposables.add(createTestSession(model));\n\n\t\tconst thread = new class extends Thread {\n\t\t\tpublic override getCallStack(): StackFrame[] {\n\t\t\t\treturn [stackFrame];\n\t\t\t}\n\t\t}(session, 'mockthread', 1);\n\n\t\tconst firstSource = new Source({\n\t\t\tname: 'internalModule.js',\n\t\t\tpath: 'a/b/c/d/internalModule.js',\n\t\t\tsourceReference: 10,\n\t\t}, 'aDebugSessionId', mockUriIdentityService, new NullLogService());\n\n\t\tconst stackFrame = new class extends StackFrame {\n\t\t\toverride getScopes(): Promise<IScope[]> {\n\t\t\t\treturn Promise.resolve([scope]);\n\t\t\t}\n\t\t}(thread, 1, firstSource, 'app.js', 'normal', { startLineNumber: 1, startColumn: 1, endLineNumber: 1, endColumn: 10 }, 1, true);\n\n\n\t\tconst scope = new class extends Scope {\n\t\t\toverride getChildren(): Promise<IExpression[]> {\n\t\t\t\treturn Promise.resolve([variableA]);\n\t\t\t}\n\t\t}(stackFrame, 1, 'local', 1, false, 10, 10);\n\n\t\tconst variableA = new class extends Variable {\n\t\t\toverride getChildren(): Promise<IExpression[]> {\n\t\t\t\treturn Promise.resolve([variableB]);\n\t\t\t}\n\t\t}(session, 1, scope, 2, 'A', 'A', undefined!, 0, 0, undefined, {}, 'string');\n\t\tconst variableB = new Variable(session, 1, scope, 2, 'B', 'A.B', undefined!, 0, 0, undefined, {}, 'string');\n\n\t\tassert.strictEqual(await findExpressionInStackFrame(stackFrame, []), undefined);\n\t\tassert.strictEqual(await findExpressionInStackFrame(stackFrame, ['A']), variableA);\n\t\tassert.strictEqual(await findExpressionInStackFrame(stackFrame, ['doesNotExist', 'no']), undefined);\n\t\tassert.strictEqual(await findExpressionInStackFrame(stackFrame, ['a']), undefined);\n\t\tassert.strictEqual(await findExpressionInStackFrame(stackFrame, ['B']), undefined);\n\t\tassert.strictEqual(await findExpressionInStackFrame(stackFrame, ['A', 'B']), variableB);\n\t\tassert.strictEqual(await findExpressionInStackFrame(stackFrame, ['A', 'C']), undefined);\n\n\t\t// We do not search in expensive scopes\n\t\tscope.expensive = true;\n\t\tassert.strictEqual(await findExpressionInStackFrame(stackFrame, ['A']), undefined);\n\t});\n});\n"]}