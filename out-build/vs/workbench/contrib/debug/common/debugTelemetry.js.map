{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/debug/common/debugTelemetry.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAMzF,IAAM,IAAI,GAAV,MAAM,IAAI;QAEhB,YACkB,CAAkB,EACC,CAAqB;YADxC,MAAC,GAAD,CAAC,CAAiB;YACC,MAAC,GAAD,CAAC,CAAoB;QACtD,CAAC;QAEL,oBAAoB,CAAC,IAAU,EAAM,gBAAyB;YAC7D,MAAM,SAAS,GAAG,IAAI,CAAC,0BAA0B,EAAE,CAAC;YACpD;;;;;;;;;;;cAWE;YACF,IAAI,CAAC,CAAC,CAAgB,SAAS,CAAC,mBAAmB,EAAE;gBACpD,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,eAAe,EAAE,IAAI,CAAC,CAAC,CAAK,cAAc,EAAE,CAAC,MAAM;gBACnD,oBAAoB,EAAE,IAAI,CAAC,CAAC,CAAK,uBAAuB,EAAE;gBAC1D,qBAAqB,EAAE,IAAI,CAAC,CAAC,CAAK,mBAAmB,EAAE,CAAC,MAAM;gBAC9D,aAAa,EAAE,SAAS,CAAC,UAAU,CAAC,KAAK;gBACzC,SAAS,EAAE,SAAS,CAAC,SAAS;gBAC9B,gBAAgB;aAChB,CAAC,CAAC;QACJ,CAAC;QAED,mBAAmB,CAAC,OAAsB,EAAE,gBAAiC;YAE5E,MAAM,WAAW,GAAG,IAAI,CAAC,CAAC,CAAK,cAAc,EAAE,CAAC;YAEhD;;;;;;;;;cASE;YACF,IAAI,CAAC,CAAC,CAAgB,SAAS,CAAC,kBAAkB,EAAE;gBACnD,IAAI,EAAE,OAAO,IAAI,OAAO,CAAC,aAAa,CAAC,IAAI;gBAC3C,OAAO,EAAE,gBAAgB,CAAC,cAAc,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC;gBACpE,sBAAsB,EAAE,gBAAgB,CAAC,sBAAsB;gBAC/D,eAAe,EAAE,WAAW,CAAC,MAAM;gBACnC,qBAAqB,EAAE,IAAI,CAAC,CAAC,CAAK,mBAAmB,EAAE,CAAC,MAAM;aAC9D,CAAC,CAAC;QACJ,CAAC;KACD,CAAA;IAtDY,oBAAI;mBAAJ,IAAI;QAId,WAAA,eAAG,CAAA;OAJO,IAAI,CAsDhB","file":"debugTelemetry.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDebugModel, IDebugSession, AdapterEndEvent } from 'vs/workbench/contrib/debug/common/debug';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { Debugger } from 'vs/workbench/contrib/debug/common/debugger';\n\nexport class DebugTelemetry {\n\n\tconstructor(\n\t\tprivate readonly model: IDebugModel,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t) { }\n\n\tlogDebugSessionStart(dbgr: Debugger, launchJsonExists: boolean) {\n\t\tconst extension = dbgr.getMainExtensionDescriptor();\n\t\t/* __GDPR__\n\t\t\t\"debugSessionStart\" : {\n\t\t\t\t\"owner\": \"connor4312\",\n\t\t\t\t\"type\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"breakpointCount\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\"exceptionBreakpoints\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"watchExpressionsCount\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\"extensionName\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"isBuiltin\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true},\n\t\t\t\t\"launchJsonExists\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t\t}\n\t\t*/\n\t\tthis.telemetryService.publicLog('debugSessionStart', {\n\t\t\ttype: dbgr.type,\n\t\t\tbreakpointCount: this.model.getBreakpoints().length,\n\t\t\texceptionBreakpoints: this.model.getExceptionBreakpoints(),\n\t\t\twatchExpressionsCount: this.model.getWatchExpressions().length,\n\t\t\textensionName: extension.identifier.value,\n\t\t\tisBuiltin: extension.isBuiltin,\n\t\t\tlaunchJsonExists\n\t\t});\n\t}\n\n\tlogDebugSessionStop(session: IDebugSession, adapterExitEvent: AdapterEndEvent) {\n\n\t\tconst breakpoints = this.model.getBreakpoints();\n\n\t\t/* __GDPR__\n\t\t\t\"debugSessionStop\" : {\n\t\t\t\t\"owner\": \"connor4312\",\n\t\t\t\t\"type\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"success\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\"sessionLengthInSeconds\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\"breakpointCount\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true },\n\t\t\t\t\"watchExpressionsCount\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t\t}\n\t\t*/\n\t\tthis.telemetryService.publicLog('debugSessionStop', {\n\t\t\ttype: session && session.configuration.type,\n\t\t\tsuccess: adapterExitEvent.emittedStopped || breakpoints.length === 0,\n\t\t\tsessionLengthInSeconds: adapterExitEvent.sessionLengthInSeconds,\n\t\t\tbreakpointCount: breakpoints.length,\n\t\t\twatchExpressionsCount: this.model.getWatchExpressions().length\n\t\t});\n\t}\n}\n"]}