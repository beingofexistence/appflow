{"version":3,"sources":["vs/workbench/contrib/debug/common/debugSource.ts"],"names":[],"mappings":"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","file":"debugSource.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { URI } from 'vs/base/common/uri';\nimport { normalize, isAbsolute } from 'vs/base/common/path';\nimport * as resources from 'vs/base/common/resources';\nimport { DEBUG_SCHEME } from 'vs/workbench/contrib/debug/common/debug';\nimport { IRange } from 'vs/editor/common/core/range';\nimport { IEditorService, SIDE_GROUP, ACTIVE_GROUP } from 'vs/workbench/services/editor/common/editorService';\nimport { Schemas } from 'vs/base/common/network';\nimport { isUri } from 'vs/workbench/contrib/debug/common/debugUtils';\nimport { IEditorPane } from 'vs/workbench/common/editor';\nimport { TextEditorSelectionRevealType } from 'vs/platform/editor/common/editor';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { ILogService } from 'vs/platform/log/common/log';\n\nexport const UNKNOWN_SOURCE_LABEL = nls.localize('unknownSource', \"Unknown Source\");\n\n/**\n * Debug URI format\n *\n * a debug URI represents a Source object and the debug session where the Source comes from.\n *\n *       debug:arbitrary_path?session=123e4567-e89b-12d3-a456-426655440000&ref=1016\n *       \\___/ \\____________/ \\__________________________________________/ \\______/\n *         |          |                             |                          |\n *      scheme   source.path                    session id            source.reference\n *\n *\n */\n\nexport class Source {\n\n\treadonly uri: URI;\n\tavailable: boolean;\n\traw: DebugProtocol.Source;\n\n\tconstructor(raw_: DebugProtocol.Source | undefined, sessionId: string, uriIdentityService: IUriIdentityService, logService: ILogService) {\n\t\tlet path: string;\n\t\tif (raw_) {\n\t\t\tthis.raw = raw_;\n\t\t\tpath = this.raw.path || this.raw.name || '';\n\t\t\tthis.available = true;\n\t\t} else {\n\t\t\tthis.raw = { name: UNKNOWN_SOURCE_LABEL };\n\t\t\tthis.available = false;\n\t\t\tpath = `${DEBUG_SCHEME}:${UNKNOWN_SOURCE_LABEL}`;\n\t\t}\n\n\t\tthis.uri = getUriFromSource(this.raw, path, sessionId, uriIdentityService, logService);\n\t}\n\n\tget name() {\n\t\treturn this.raw.name || resources.basenameOrAuthority(this.uri);\n\t}\n\n\tget origin() {\n\t\treturn this.raw.origin;\n\t}\n\n\tget presentationHint() {\n\t\treturn this.raw.presentationHint;\n\t}\n\n\tget reference() {\n\t\treturn this.raw.sourceReference;\n\t}\n\n\tget inMemory() {\n\t\treturn this.uri.scheme === DEBUG_SCHEME;\n\t}\n\n\topenInEditor(editorService: IEditorService, selection: IRange, preserveFocus?: boolean, sideBySide?: boolean, pinned?: boolean): Promise<IEditorPane | undefined> {\n\t\treturn !this.available ? Promise.resolve(undefined) : editorService.openEditor({\n\t\t\tresource: this.uri,\n\t\t\tdescription: this.origin,\n\t\t\toptions: {\n\t\t\t\tpreserveFocus,\n\t\t\t\tselection,\n\t\t\t\trevealIfOpened: true,\n\t\t\t\tselectionRevealType: TextEditorSelectionRevealType.CenterIfOutsideViewport,\n\t\t\t\tpinned\n\t\t\t}\n\t\t}, sideBySide ? SIDE_GROUP : ACTIVE_GROUP);\n\t}\n\n\tstatic getEncodedDebugData(modelUri: URI): { name: string; path: string; sessionId?: string; sourceReference?: number } {\n\t\tlet path: string;\n\t\tlet sourceReference: number | undefined;\n\t\tlet sessionId: string | undefined;\n\n\t\tswitch (modelUri.scheme) {\n\t\t\tcase Schemas.file:\n\t\t\t\tpath = normalize(modelUri.fsPath);\n\t\t\t\tbreak;\n\t\t\tcase DEBUG_SCHEME:\n\t\t\t\tpath = modelUri.path;\n\t\t\t\tif (modelUri.query) {\n\t\t\t\t\tconst keyvalues = modelUri.query.split('&');\n\t\t\t\t\tfor (const keyvalue of keyvalues) {\n\t\t\t\t\t\tconst pair = keyvalue.split('=');\n\t\t\t\t\t\tif (pair.length === 2) {\n\t\t\t\t\t\t\tswitch (pair[0]) {\n\t\t\t\t\t\t\t\tcase 'session':\n\t\t\t\t\t\t\t\t\tsessionId = pair[1];\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'ref':\n\t\t\t\t\t\t\t\t\tsourceReference = parseInt(pair[1]);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tpath = modelUri.toString();\n\t\t\t\tbreak;\n\t\t}\n\n\t\treturn {\n\t\t\tname: resources.basenameOrAuthority(modelUri),\n\t\t\tpath,\n\t\t\tsourceReference,\n\t\t\tsessionId\n\t\t};\n\t}\n}\n\nexport function getUriFromSource(raw: DebugProtocol.Source, path: string | undefined, sessionId: string, uriIdentityService: IUriIdentityService, logService: ILogService): URI {\n\tconst _getUriFromSource = (path: string | undefined) => {\n\t\tif (typeof raw.sourceReference === 'number' && raw.sourceReference > 0) {\n\t\t\treturn URI.from({\n\t\t\t\tscheme: DEBUG_SCHEME,\n\t\t\t\tpath,\n\t\t\t\tquery: `session=${sessionId}&ref=${raw.sourceReference}`\n\t\t\t});\n\t\t}\n\n\t\tif (path && isUri(path)) {\t// path looks like a uri\n\t\t\treturn uriIdentityService.asCanonicalUri(URI.parse(path));\n\t\t}\n\t\t// assume a filesystem path\n\t\tif (path && isAbsolute(path)) {\n\t\t\treturn uriIdentityService.asCanonicalUri(URI.file(path));\n\t\t}\n\t\t// path is relative: since VS Code cannot deal with this by itself\n\t\t// create a debug url that will result in a DAP 'source' request when the url is resolved.\n\t\treturn uriIdentityService.asCanonicalUri(URI.from({\n\t\t\tscheme: DEBUG_SCHEME,\n\t\t\tpath,\n\t\t\tquery: `session=${sessionId}`\n\t\t}));\n\t};\n\n\n\ttry {\n\t\treturn _getUriFromSource(path);\n\t} catch (err) {\n\t\tlogService.error('Invalid path from debug adapter: ' + path);\n\t\treturn _getUriFromSource('/invalidDebugSource');\n\t}\n}\n"]}