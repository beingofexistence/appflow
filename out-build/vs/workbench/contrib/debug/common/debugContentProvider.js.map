{"version":3,"sources":["vs/workbench/contrib/debug/common/debugContentProvider.ts"],"names":[],"mappings":"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","file":"debugContentProvider.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI as uri } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { getMimeTypes } from 'vs/editor/common/services/languagesAssociations';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { ITextModelService, ITextModelContentProvider } from 'vs/editor/common/services/resolverService';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { DEBUG_SCHEME, IDebugService, IDebugSession } from 'vs/workbench/contrib/debug/common/debug';\nimport { Source } from 'vs/workbench/contrib/debug/common/debugSource';\nimport { IEditorWorkerService } from 'vs/editor/common/services/editorWorker';\nimport { EditOperation } from 'vs/editor/common/core/editOperation';\nimport { Range } from 'vs/editor/common/core/range';\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { PLAINTEXT_LANGUAGE_ID } from 'vs/editor/common/languages/modesRegistry';\nimport { ErrorNoTelemetry } from 'vs/base/common/errors';\n\n/**\n * Debug URI format\n *\n * a debug URI represents a Source object and the debug session where the Source comes from.\n *\n *       debug:arbitrary_path?session=123e4567-e89b-12d3-a456-426655440000&ref=1016\n *       \\___/ \\____________/ \\__________________________________________/ \\______/\n *         |          |                             |                          |\n *      scheme   source.path                    session id            source.reference\n *\n * the arbitrary_path and the session id are encoded with 'encodeURIComponent'\n *\n */\nexport class DebugContentProvider implements IWorkbenchContribution, ITextModelContentProvider {\n\n\tprivate static INSTANCE: DebugContentProvider;\n\n\tprivate readonly pendingUpdates = new Map<string, CancellationTokenSource>();\n\n\tconstructor(\n\t\t@ITextModelService textModelResolverService: ITextModelService,\n\t\t@IDebugService private readonly debugService: IDebugService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IEditorWorkerService private readonly editorWorkerService: IEditorWorkerService\n\t) {\n\t\ttextModelResolverService.registerTextModelContentProvider(DEBUG_SCHEME, this);\n\t\tDebugContentProvider.INSTANCE = this;\n\t}\n\n\tdispose(): void {\n\t\tthis.pendingUpdates.forEach(cancellationSource => cancellationSource.dispose());\n\t}\n\n\tprovideTextContent(resource: uri): Promise<ITextModel> | null {\n\t\treturn this.createOrUpdateContentModel(resource, true);\n\t}\n\n\t/**\n\t * Reload the model content of the given resource.\n\t * If there is no model for the given resource, this method does nothing.\n\t */\n\tstatic refreshDebugContent(resource: uri): void {\n\t\tDebugContentProvider.INSTANCE?.createOrUpdateContentModel(resource, false);\n\t}\n\n\t/**\n\t * Create or reload the model content of the given resource.\n\t */\n\tprivate createOrUpdateContentModel(resource: uri, createIfNotExists: boolean): Promise<ITextModel> | null {\n\n\t\tconst model = this.modelService.getModel(resource);\n\t\tif (!model && !createIfNotExists) {\n\t\t\t// nothing to do\n\t\t\treturn null;\n\t\t}\n\n\t\tlet session: IDebugSession | undefined;\n\n\t\tif (resource.query) {\n\t\t\tconst data = Source.getEncodedDebugData(resource);\n\t\t\tsession = this.debugService.getModel().getSession(data.sessionId);\n\t\t}\n\n\t\tif (!session) {\n\t\t\t// fallback: use focused session\n\t\t\tsession = this.debugService.getViewModel().focusedSession;\n\t\t}\n\n\t\tif (!session) {\n\t\t\treturn Promise.reject(new ErrorNoTelemetry(localize('unable', \"Unable to resolve the resource without a debug session\")));\n\t\t}\n\t\tconst createErrModel = (errMsg?: string) => {\n\t\t\tthis.debugService.sourceIsNotAvailable(resource);\n\t\t\tconst languageSelection = this.languageService.createById(PLAINTEXT_LANGUAGE_ID);\n\t\t\tconst message = errMsg\n\t\t\t\t? localize('canNotResolveSourceWithError', \"Could not load source '{0}': {1}.\", resource.path, errMsg)\n\t\t\t\t: localize('canNotResolveSource', \"Could not load source '{0}'.\", resource.path);\n\t\t\treturn this.modelService.createModel(message, languageSelection, resource);\n\t\t};\n\n\t\treturn session.loadSource(resource).then(response => {\n\n\t\t\tif (response && response.body) {\n\n\t\t\t\tif (model) {\n\n\t\t\t\t\tconst newContent = response.body.content;\n\n\t\t\t\t\t// cancel and dispose an existing update\n\t\t\t\t\tconst cancellationSource = this.pendingUpdates.get(model.id);\n\t\t\t\t\tcancellationSource?.cancel();\n\n\t\t\t\t\t// create and keep update token\n\t\t\t\t\tconst myToken = new CancellationTokenSource();\n\t\t\t\t\tthis.pendingUpdates.set(model.id, myToken);\n\n\t\t\t\t\t// update text model\n\t\t\t\t\treturn this.editorWorkerService.computeMoreMinimalEdits(model.uri, [{ text: newContent, range: model.getFullModelRange() }]).then(edits => {\n\n\t\t\t\t\t\t// remove token\n\t\t\t\t\t\tthis.pendingUpdates.delete(model.id);\n\n\t\t\t\t\t\tif (!myToken.token.isCancellationRequested && edits && edits.length > 0) {\n\t\t\t\t\t\t\t// use the evil-edit as these models show in readonly-editor only\n\t\t\t\t\t\t\tmodel.applyEdits(edits.map(edit => EditOperation.replace(Range.lift(edit.range), edit.text)));\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn model;\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\t// create text model\n\t\t\t\t\tconst mime = response.body.mimeType || getMimeTypes(resource)[0];\n\t\t\t\t\tconst languageSelection = this.languageService.createByMimeType(mime);\n\t\t\t\t\treturn this.modelService.createModel(response.body.content, languageSelection, resource);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn createErrModel();\n\n\t\t}, (err: DebugProtocol.ErrorResponse) => createErrModel(err.message));\n\t}\n}\n"]}