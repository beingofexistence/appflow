{"version":3,"sources":["vs/workbench/contrib/debug/common/loadedScriptsPicker.ts"],"names":[],"mappings":"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","file":"loadedScriptsPicker.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from 'vs/nls';\nimport { matchesFuzzy } from 'vs/base/common/filters';\nimport { Source } from 'vs/workbench/contrib/debug/common/debugSource';\nimport { IQuickInputService, IQuickPickItem, IQuickPickSeparator } from 'vs/platform/quickinput/common/quickInput';\nimport { IDebugService, IDebugSession } from 'vs/workbench/contrib/debug/common/debug';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { getIconClasses } from 'vs/editor/common/services/getIconClasses';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\n\nimport { dirname } from 'vs/base/common/resources';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { ILabelService } from 'vs/platform/label/common/label';\n\nexport interface IPickerDebugItem extends IQuickPickItem {\n\taccept(): void;\n}\n\n/**\n * This function takes a regular quickpick and makes one for loaded scripts that has persistent headers\n * e.g. when some picks are filtered out, the ones that are visible still have its header.\n */\nexport async function showLoadedScriptMenu(accessor: ServicesAccessor) {\n\tconst quickInputService = accessor.get(IQuickInputService);\n\tconst debugService = accessor.get(IDebugService);\n\tconst editorService = accessor.get(IEditorService);\n\tconst sessions = debugService.getModel().getSessions(false);\n\tconst modelService = accessor.get(IModelService);\n\tconst languageService = accessor.get(ILanguageService);\n\tconst labelService = accessor.get(ILabelService);\n\n\tconst localDisposableStore = new DisposableStore();\n\tconst quickPick = quickInputService.createQuickPick<IPickerDebugItem>();\n\tlocalDisposableStore.add(quickPick);\n\tquickPick.matchOnLabel = quickPick.matchOnDescription = quickPick.matchOnDetail = quickPick.sortByLabel = false;\n\tquickPick.placeholder = nls.localize('moveFocusedView.selectView', \"Search loaded scripts by name\");\n\tquickPick.items = await _getPicks(quickPick.value, sessions, editorService, modelService, languageService, labelService);\n\n\tlocalDisposableStore.add(quickPick.onDidChangeValue(async () => {\n\t\tquickPick.items = await _getPicks(quickPick.value, sessions, editorService, modelService, languageService, labelService);\n\t}));\n\tlocalDisposableStore.add(quickPick.onDidAccept(() => {\n\t\tconst selectedItem = quickPick.selectedItems[0];\n\t\tselectedItem.accept();\n\t\tquickPick.hide();\n\t\tlocalDisposableStore.dispose();\n\t}));\n\tquickPick.show();\n}\n\nasync function _getPicksFromSession(session: IDebugSession, filter: string, editorService: IEditorService, modelService: IModelService, languageService: ILanguageService, labelService: ILabelService): Promise<Array<IPickerDebugItem | IQuickPickSeparator>> {\n\tconst items: Array<IPickerDebugItem | IQuickPickSeparator> = [];\n\titems.push({ type: 'separator', label: session.name });\n\tconst sources = await session.getLoadedSources();\n\n\tsources.forEach((element: Source) => {\n\t\tconst pick = _createPick(element, filter, editorService, modelService, languageService, labelService);\n\t\tif (pick) {\n\t\t\titems.push(pick);\n\t\t}\n\n\t});\n\treturn items;\n}\nasync function _getPicks(filter: string, sessions: IDebugSession[], editorService: IEditorService, modelService: IModelService, languageService: ILanguageService, labelService: ILabelService): Promise<Array<IPickerDebugItem | IQuickPickSeparator>> {\n\tconst loadedScriptPicks: Array<IPickerDebugItem | IQuickPickSeparator> = [];\n\n\n\tconst picks = await Promise.all(\n\t\tsessions.map((session) => _getPicksFromSession(session, filter, editorService, modelService, languageService, labelService))\n\t);\n\n\tfor (const row of picks) {\n\t\tfor (const elem of row) {\n\t\t\tloadedScriptPicks.push(elem);\n\t\t}\n\t}\n\treturn loadedScriptPicks;\n}\n\nfunction _createPick(source: Source, filter: string, editorService: IEditorService, modelService: IModelService, languageService: ILanguageService, labelService: ILabelService): IPickerDebugItem | undefined {\n\n\tconst label = labelService.getUriBasenameLabel(source.uri);\n\tconst desc = labelService.getUriLabel(dirname(source.uri));\n\n\t// manually filter so that headers don't get filtered out\n\tconst labelHighlights = matchesFuzzy(filter, label, true);\n\tconst descHighlights = matchesFuzzy(filter, desc, true);\n\tif (labelHighlights || descHighlights) {\n\t\treturn {\n\t\t\tlabel,\n\t\t\tdescription: desc === '.' ? undefined : desc,\n\t\t\thighlights: { label: labelHighlights ?? undefined, description: descHighlights ?? undefined },\n\t\t\ticonClasses: getIconClasses(modelService, languageService, source.uri),\n\t\t\taccept: () => {\n\t\t\t\tif (source.available) {\n\t\t\t\t\tsource.openInEditor(editorService, { startLineNumber: 0, startColumn: 0, endLineNumber: 0, endColumn: 0 });\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\treturn undefined;\n}\n"]}