{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/searchEditor/browser/searchEditorModel.ts"],"names":[],"mappings":"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","file":"searchEditorModel.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { parseSavedSearchEditor, parseSerializedSearchEditor } from 'vs/workbench/contrib/searchEditor/browser/searchEditorSerialization';\nimport { IWorkingCopyBackupService } from 'vs/workbench/services/workingCopy/common/workingCopyBackup';\nimport { SearchConfiguration } from './searchEditorInput';\nimport { assertIsDefined } from 'vs/base/common/types';\nimport { createTextBufferFactoryFromStream } from 'vs/editor/common/model/textModel';\nimport { SearchEditorWorkingCopyTypeId } from 'vs/workbench/contrib/searchEditor/browser/constants';\nimport { Emitter } from 'vs/base/common/event';\nimport { ResourceMap } from 'vs/base/common/map';\nimport { SEARCH_RESULT_LANGUAGE_ID } from 'vs/workbench/services/search/common/search';\n\nexport type SearchEditorData = { resultsModel: ITextModel; configurationModel: SearchConfigurationModel };\n\nexport class SearchConfigurationModel {\n\tprivate _onConfigDidUpdate = new Emitter<SearchConfiguration>();\n\tpublic readonly onConfigDidUpdate = this._onConfigDidUpdate.event;\n\n\tconstructor(public config: Readonly<SearchConfiguration>) { }\n\tupdateConfig(config: SearchConfiguration) { this.config = config; this._onConfigDidUpdate.fire(config); }\n}\n\nexport class SearchEditorModel {\n\tconstructor(\n\t\tprivate resource: URI,\n\t) { }\n\n\tasync resolve(): Promise<SearchEditorData> {\n\t\treturn assertIsDefined(searchEditorModelFactory.models.get(this.resource)).resolve();\n\t}\n}\n\nclass SearchEditorModelFactory {\n\tmodels = new ResourceMap<{ resolve: () => Promise<SearchEditorData> }>();\n\n\tconstructor() { }\n\n\tinitializeModelFromExistingModel(accessor: ServicesAccessor, resource: URI, config: SearchConfiguration) {\n\t\tif (this.models.has(resource)) {\n\t\t\tthrow Error('Unable to contruct model for resource that already exists');\n\t\t}\n\n\t\tconst languageService = accessor.get(ILanguageService);\n\t\tconst modelService = accessor.get(IModelService);\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst workingCopyBackupService = accessor.get(IWorkingCopyBackupService);\n\n\t\tlet ongoingResolve: Promise<SearchEditorData> | undefined;\n\n\t\tthis.models.set(resource, {\n\t\t\tresolve: () => {\n\t\t\t\tif (!ongoingResolve) {\n\t\t\t\t\tongoingResolve = (async () => {\n\n\t\t\t\t\t\tconst backup = await this.tryFetchModelFromBackupService(resource, languageService, modelService, workingCopyBackupService, instantiationService);\n\t\t\t\t\t\tif (backup) {\n\t\t\t\t\t\t\treturn backup;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn Promise.resolve({\n\t\t\t\t\t\t\tresultsModel: modelService.getModel(resource) ?? modelService.createModel('', languageService.createById(SEARCH_RESULT_LANGUAGE_ID), resource),\n\t\t\t\t\t\t\tconfigurationModel: new SearchConfigurationModel(config)\n\t\t\t\t\t\t});\n\t\t\t\t\t})();\n\t\t\t\t}\n\t\t\t\treturn ongoingResolve;\n\t\t\t}\n\t\t});\n\t}\n\n\tinitializeModelFromRawData(accessor: ServicesAccessor, resource: URI, config: SearchConfiguration, contents: string | undefined) {\n\t\tif (this.models.has(resource)) {\n\t\t\tthrow Error('Unable to contruct model for resource that already exists');\n\t\t}\n\n\t\tconst languageService = accessor.get(ILanguageService);\n\t\tconst modelService = accessor.get(IModelService);\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst workingCopyBackupService = accessor.get(IWorkingCopyBackupService);\n\n\t\tlet ongoingResolve: Promise<SearchEditorData> | undefined;\n\n\t\tthis.models.set(resource, {\n\t\t\tresolve: () => {\n\t\t\t\tif (!ongoingResolve) {\n\t\t\t\t\tongoingResolve = (async () => {\n\n\t\t\t\t\t\tconst backup = await this.tryFetchModelFromBackupService(resource, languageService, modelService, workingCopyBackupService, instantiationService);\n\t\t\t\t\t\tif (backup) {\n\t\t\t\t\t\t\treturn backup;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn Promise.resolve({\n\t\t\t\t\t\t\tresultsModel: modelService.createModel(contents ?? '', languageService.createById(SEARCH_RESULT_LANGUAGE_ID), resource),\n\t\t\t\t\t\t\tconfigurationModel: new SearchConfigurationModel(config)\n\t\t\t\t\t\t});\n\t\t\t\t\t})();\n\t\t\t\t}\n\t\t\t\treturn ongoingResolve;\n\t\t\t}\n\t\t});\n\t}\n\n\tinitializeModelFromExistingFile(accessor: ServicesAccessor, resource: URI, existingFile: URI) {\n\t\tif (this.models.has(resource)) {\n\t\t\tthrow Error('Unable to contruct model for resource that already exists');\n\t\t}\n\n\t\tconst languageService = accessor.get(ILanguageService);\n\t\tconst modelService = accessor.get(IModelService);\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst workingCopyBackupService = accessor.get(IWorkingCopyBackupService);\n\n\t\tlet ongoingResolve: Promise<SearchEditorData> | undefined;\n\n\t\tthis.models.set(resource, {\n\t\t\tresolve: async () => {\n\t\t\t\tif (!ongoingResolve) {\n\t\t\t\t\tongoingResolve = (async () => {\n\n\t\t\t\t\t\tconst backup = await this.tryFetchModelFromBackupService(resource, languageService, modelService, workingCopyBackupService, instantiationService);\n\t\t\t\t\t\tif (backup) {\n\t\t\t\t\t\t\treturn backup;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst { text, config } = await instantiationService.invokeFunction(parseSavedSearchEditor, existingFile);\n\t\t\t\t\t\treturn ({\n\t\t\t\t\t\t\tresultsModel: modelService.createModel(text ?? '', languageService.createById(SEARCH_RESULT_LANGUAGE_ID), resource),\n\t\t\t\t\t\t\tconfigurationModel: new SearchConfigurationModel(config)\n\t\t\t\t\t\t});\n\t\t\t\t\t})();\n\t\t\t\t}\n\t\t\t\treturn ongoingResolve;\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async tryFetchModelFromBackupService(resource: URI, languageService: ILanguageService, modelService: IModelService, workingCopyBackupService: IWorkingCopyBackupService, instantiationService: IInstantiationService): Promise<SearchEditorData | undefined> {\n\t\tconst backup = await workingCopyBackupService.resolve({ resource, typeId: SearchEditorWorkingCopyTypeId });\n\n\t\tlet model = modelService.getModel(resource);\n\t\tif (!model && backup) {\n\t\t\tconst factory = await createTextBufferFactoryFromStream(backup.value);\n\n\t\t\tmodel = modelService.createModel(factory, languageService.createById(SEARCH_RESULT_LANGUAGE_ID), resource);\n\t\t}\n\n\t\tif (model) {\n\t\t\tconst existingFile = model.getValue();\n\t\t\tconst { text, config } = parseSerializedSearchEditor(existingFile);\n\t\t\tmodelService.destroyModel(resource);\n\t\t\treturn ({\n\t\t\t\tresultsModel: modelService.createModel(text ?? '', languageService.createById(SEARCH_RESULT_LANGUAGE_ID), resource),\n\t\t\t\tconfigurationModel: new SearchConfigurationModel(config)\n\t\t\t});\n\t\t}\n\t\telse {\n\t\t\treturn undefined;\n\t\t}\n\t}\n}\n\nexport const searchEditorModelFactory = new SearchEditorModelFactory();\n"]}