{"version":3,"sources":["vs/workbench/contrib/searchEditor/browser/searchEditorSerialization.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAchG,kEAAkE;IAClE,MAAM,aAAa,GAAG,IAAI,CAAC;IAE3B,MAAM,mBAAmB,GACxB,CAAC,CAAS,EAAE,EAAE,CACb,CAAC,KAAU,EAAI,EAAE,CAChB,IAAI,WAAG,CAAG,KAAK,CAAC,eAAe,GAAG,CAAC,EAAE,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,aAAa,GAAG,CAAC,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC;IAErG,MAAM,yBAAyB,GAAG,CAAC,KAAW,EAAG,iBAAyB,EAA2D,EAAE;QACtI,MAAM,aAAa,GAAG,CAAC,CAAS,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC,eAAe,GAAG,CAAC,EAAE,CAAC;QAE5E,MAAM,cAAc,GAAG,KAAK,CAAC,gBAAgB,EAAE,CAAC;QAGhD,MAAM,OAAO,GAA4D,EAAE,CAAC;QAE5E,cAAc;aACZ,OAAO,CAAC,CAAC,UAAU,EAAE,CAAC,EAAE,EAAE;YAC1B,MAAM,UAAU,GAAG,aAAa,CAAC,CAAC,CAAC,CAAC;YACpC,MAAM,UAAU,GAAG,GAAG,CAAC,MAAM,CAAC,iBAAiB,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC;YACrE,MAAM,MAAM,GAAG,KAAK,UAAU,GAAG,UAAU,IAAI,CAAC;YAChD,MAAM,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC;YAEnC,iEAAiE;YACjE,MAAM,IAAI,GAAG,MAAM,GAAG,CAAC,UAAU,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;YAEhE,MAAM,eAAe,GAAG,CAAC,EAAE,KAAK,EAAE,GAAG,EAAoC,EAAE,EAAE,CAAC,IAAI,WAAG,CAAG,CAAC,EAAE,CAAC,KAAK,IAAI,CAAC,CAAC,GAAG,YAAY,EAAE,CAAC,EAAE,CAAC,GAAG,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,YAAY,CAAC,CAAC;YAE1K,MAAM,UAAU,GAAG,KAAK,CAAC,cAAc,EAAE,CAAC;YAC1C,MAAM,iBAAiB,GAAG,UAAU,CAAC,eAAe,KAAK,UAAU,CAAC,aAAa,CAAC;YAElF,IAAI,SAAS,CAAC;YACd,IAAI,iBAAiB,EAAE;gBAAE,SAAS,GAAG,CAAC,eAAe,CAAC,EAAE,KAAK,EAAE,UAAU,CAAC,WAAW,EAAE,GAAG,EAAE,UAAU,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;aAAE;iBAClH,IAAI,CAAC,KAAK,CAAC,EAAE;gBAAE,SAAS,GAAG,CAAC,eAAe,CAAC,EAAE,KAAK,EAAE,UAAU,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;aAAE;iBAClF,IAAI,CAAC,KAAK,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;gBAAE,SAAS,GAAG,CAAC,eAAe,CAAC,EAAE,GAAG,EAAE,UAAU,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;aAAE;iBACtG;gBAAE,SAAS,GAAG,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC;aAAE;YAE3C,OAAO,CAAC,IAAI,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;QAEJ,OAAO,OAAO,CAAC;IAChB,CAAC,CAAC;IAIF,SAAS,6BAA6B,CAAC,SAAe,EAAO,cAAkC;QAE9F,MAAM,kBAAkB,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,2BAA2B,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,kBAAI,CAAgB,EAAE,SAAS,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;QAClN,MAAM,kBAAkB,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,IAAI,EAAE,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,SAAS,CAAC,cAAc,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,KAAK,EAAE,EAAE,CAAC,6BAA6B,CAAC,SAAS,EAAE,cAAc,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;QAE9P,OAAO,CAAC,kBAAkB,EAAE,GAAG,kBAAkB,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAgC,CAAC;IACpG,CAAC;IACD,SAAS,2BAA2B,CAAC,QAAa,EAAE,aAAsB,EAAE,YAAiC,EAAE,cAAkC,EAAE,eAAe,GAAG,IAAI;QACxK,MAAM,iBAAiB,GAAG,aAAa,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC;QAE1G,MAAM,IAAI,GAAa,eAAe,CAAC,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;QAC/E,MAAM,WAAW,GAAY,EAAE,CAAC;QAEhC,MAAM,wBAAwB,GAA2B,EAAE,CAAC;QAE5D,MAAM,OAAO,GAA2C,EAAE,CAAC;QAC3D,YAAY,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,UAAU,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC,CAAC;QAC/E,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC;QAEpD,IAAI,QAAQ,GAAuB,SAAS,CAAC;QAE7C,MAAM,SAAS,GAAG,IAAI,GAAG,EAAU,CAAC;QACpC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YAC7B,yBAAyB,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACnE,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,EAAE;oBACrC,OAAO,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,UAAU,GAAG,CAAC,KAAK,CAAC,UAAU,EAAE;wBACnE,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC,KAAK,EAAG,CAAC;wBAC9C,IAAI,QAAQ,KAAK,SAAS,IAAI,UAAU,KAAK,QAAQ,GAAG,CAAC,EAAE;4BAC1D,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;yBACd;wBACD,IAAI,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,MAAM,CAAC,iBAAiB,GAAG,GAAG,UAAU,EAAE,CAAC,MAAM,CAAC,GAAG,UAAU,KAAK,IAAI,EAAE,CAAC,CAAC;wBAC/F,QAAQ,GAAG,UAAU,CAAC;qBACtB;oBAED,wBAAwB,CAAC,KAAK,CAAC,UAAU,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC;oBACzD,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;oBAChC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;oBACtB,QAAQ,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC;iBAC7B;gBAED,WAAW,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,mBAAmB,CAAC,wBAAwB,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;YACxG,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,OAAO,OAAO,CAAC,MAAM,EAAE;YACtB,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,GAAG,OAAO,CAAC,KAAK,EAAG,CAAC;YAC9C,IAAI,CAAC,IAAI,CAAC,KAAK,UAAU,KAAK,IAAI,EAAE,CAAC,CAAC;SACtC;QAED,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC;IAC9B,CAAC;IAED,SAAS,6BAA6B,CAAC,SAAe,EAAO,cAAkC,EAAE,eAAwB;QACxH,OAAO,2BAA2B,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,EAAE,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,kBAAI,CAAgB,EAAE,SAAS,CAAC,OAAO,EAAE,cAAc,EAAE,eAAe,CAAC,CAAC;IAChK,CAAC;IAED,MAAM,mCAAmC,GAAG,CAAC,OAAmB,EAAE,QAAgB,EAAE,QAAgB,EAAE,YAAoB,EAAuB,EAAE;QAClJ,OAAO;YACN,KAAK,EAAE,OAAO,CAAC,cAAc,CAAC,OAAO;YACrC,QAAQ,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,QAAQ;YAC3C,eAAe,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,eAAe;YACzD,cAAc,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,WAAW;YACpD,cAAc,EAAE,QAAQ,EAAE,cAAc,EAAE,QAAQ;YAClD,oBAAoB,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,QAAQ,IAAI,OAAO,EAAE,kCAAkC,CAAC;YAC7F,gCAAgC,EAAE,CAAC,OAAO,EAAE,kCAAkC,KAAK,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,kCAAkC,CAAC;YAClJ,YAAY;YACZ,eAAe,EAAE,CAAC,CAAC,OAAO,CAAC,eAAe;YAC1C,oBAAoB,EAAE;gBACrB,kBAAkB,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,YAAY,EAAE,yBAAyB;gBACpF,oBAAoB,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,YAAY,EAAE,2BAA2B;gBACxF,gBAAgB,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,YAAY,EAAE,qBAAqB;gBAC9E,aAAa,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,YAAY,EAAE,sBAAsB;aAC5E;SACD,CAAC;IACH,CAAC,CAAC;IAEK,MAAM,IAAI,GAA2B,CAAC,MAAoC,EAAU,EAAE;QAC5F,MAAM,2BAA2B,GAAG,CAAI,CAAmC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,SAAS,CAAQ,CAAC;QAEnJ,MAAM,cAAc,GAAG,CAAC,GAAW,EAAE,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAEzF,OAAO,2BAA2B,CAAC;YAClC,YAAY,cAAc,CAAC,MAAM,CAAC,KAAK,IAAI,EAAE,CAAC,EAAE;YAEhD,CAAC,MAAM,CAAC,eAAe,IAAI,MAAM,CAAC,cAAc,IAAI,MAAM,CAAC,QAAQ,IAAI,MAAM,CAAC,gCAAgC,KAAK,KAAK,CAAC;mBACtH,YAAY,IAAA,YAAG,EAAM;oBACvB,MAAM,CAAC,eAAe,IAAI,eAAe;oBACzC,MAAM,CAAC,cAAc,IAAI,WAAW;oBACpC,MAAM,CAAC,QAAQ,IAAI,QAAQ;oBAC3B,MAAM,CAAC,eAAe,IAAI,aAAa;oBACvC,CAAC,MAAM,CAAC,gCAAgC,KAAK,KAAK,CAAC,IAAI,uBAAuB;iBAC9E,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;YACd,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,gBAAgB,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,SAAS;YAC3E,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,gBAAgB,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,SAAS;YAC3E,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,mBAAmB,MAAM,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,SAAS;YAC1E,EAAE;SACF,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;IACxB,CAAC,CAAC;IArBW,QAAA,IAAI,QAqBf;IAEK,MAAM,IAAI,GAA0B,CAAC,KAAiB,EAAuB,EAAE,CACrF,IAAA,YAAI,EAAwB,KAAK,CAAC,eAAe,CAAC,IAAI,WAAG,CAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC;IADnF,QAAA,IAAI,QAC+E;IAEzF,MAAM,IAAI,GAAkB,GAAwB,EAAE,CAAC,CAAC;QAC9D,KAAK,EAAE,EAAE;QACT,cAAc,EAAE,EAAE;QAClB,cAAc,EAAE,EAAE;QAClB,QAAQ,EAAE,KAAK;QACf,eAAe,EAAE,KAAK;QACtB,gCAAgC,EAAE,IAAI;QACtC,cAAc,EAAE,KAAK;QACrB,YAAY,EAAE,CAAC;QACf,oBAAoB,EAAE,KAAK;QAC3B,eAAe,EAAE,KAAK;QACtB,oBAAoB,EAAE;YACrB,kBAAkB,EAAE,IAAI;YACxB,oBAAoB,EAAE,KAAK;YAC3B,gBAAgB,EAAE,IAAI;YACtB,aAAa,EAAE,IAAI;SACnB;KACD,CAAC,CAAC;IAjBU,QAAA,IAAI,QAiBd;IAEI,MAAM,IAAI,GAA0B,CAAC,KAAe,EAAuB,EAAE;QAEnF,MAAM,KAAK,GAAG,IAAA,YAAI,GAAiB,CAAC;QAEpC,MAAM,gBAAgB,GAAG,CAAC,GAAW,EAAE,EAAE;YACxC,IAAI,GAAG,GAAG,EAAE,CAAC;YACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACpC,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;oBACpB,CAAC,EAAE,CAAC;oBACJ,MAAM,OAAO,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;oBAEvB,IAAI,OAAO,KAAK,GAAG,EAAE;wBACpB,GAAG,IAAI,IAAI,CAAC;qBACZ;yBACI,IAAI,OAAO,KAAK,IAAI,EAAE;wBAC1B,GAAG,IAAI,IAAI,CAAC;qBACZ;yBACI;wBACJ,MAAM,KAAK,CAAC,IAAA,cAAQ,EAAC,CAAyB,EAAE,IAAwD,CAAC,CAAC,CAAC;qBAC3G;iBACD;qBAAM;oBACN,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;iBACd;aACD;YACD,OAAO,GAAG,CAAC;QACZ,CAAC,CAAC;QAEF,MAAM,QAAQ,GAAG,mBAAmB,CAAC;QACrC,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;YACzB,MAAM,MAAM,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACnC,IAAI,CAAC,MAAM,EAAE;gBAAE,SAAS;aAAE;YAC1B,MAAM,CAAC,EAAE,GAAG,EAAE,KAAK,CAAC,GAAG,MAAM,CAAC;YAC9B,QAAQ,GAAG,EAAE;gBACZ,KAAK,OAAO;oBAAE,KAAK,CAAC,KAAK,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC;oBAAC,MAAM;gBAC3D,KAAK,WAAW;oBAAE,KAAK,CAAC,cAAc,GAAG,KAAK,CAAC;oBAAC,MAAM;gBACtD,KAAK,WAAW;oBAAE,KAAK,CAAC,cAAc,GAAG,KAAK,CAAC;oBAAC,MAAM;gBACtD,KAAK,cAAc;oBAAE,KAAK,CAAC,YAAY,GAAG,CAAC,KAAK,CAAC;oBAAC,MAAM;gBACxD,KAAK,OAAO,CAAC,CAAC;oBACb,KAAK,CAAC,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;oBAChD,KAAK,CAAC,eAAe,GAAG,KAAK,CAAC,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;oBAC9D,KAAK,CAAC,gCAAgC,GAAG,KAAK,CAAC,OAAO,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC,CAAC;oBACvF,KAAK,CAAC,cAAc,GAAG,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;oBACzD,KAAK,CAAC,eAAe,GAAG,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;iBAC5D;aACD;SACD;QAED,KAAK,CAAC,oBAAoB,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,cAAc,IAAI,KAAK,CAAC,cAAc,IAAI,CAAC,KAAK,CAAC,gCAAgC,CAAC,CAAC;QAEzH,OAAO,KAAK,CAAC;IACd,CAAC,CAAC;IAlDW,QAAA,IAAI,QAkDf;IAEK,MAAM,IAAI,GAChB,CAAC,YAAkB,EAAU,iBAAyB,EAAE,iBAAyB,EAAE,YAAoB,EAAE,cAAkC,EAAE,SAA0B,EAAE,QAAkB,EAAgF,EAAE;QAC5Q,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE;YAAE,MAAM,KAAK,CAAC,0CAA0C,CAAC,CAAC;SAAE;QACrF,MAAM,MAAM,GAAG,mCAAmC,CAAC,YAAY,CAAC,KAAK,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,YAAY,CAAC,CAAC;QAE3H,MAAM,SAAS,GAAG,YAAY,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,IAAA,cAAQ,EAAC,CAAU,EAAE,IAAW,EAAE,YAAY,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,IAAA,cAAQ,EAAC,CAAS,EAAE,IAAQ,CAAC,CAAC;QAC7I,MAAM,WAAW,GAAG,YAAY,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,IAAA,cAAQ,EAAC,CAAY,EAAE,IAAa,EAAE,YAAY,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,IAAA,cAAQ,EAAC,CAAW,EAAE,IAAU,CAAC,CAAC;QAE/I,MAAM,IAAI,GAAG;YACZ,YAAY,CAAC,KAAK,EAAE;gBACnB,CAAC,CAAC,GAAG,WAAW,MAAM,SAAS,EAAE;gBACjC,CAAC,CAAC,IAAA,cAAQ,EAAC,CAAW,EAAE,IAAY,CAAC;SACtC,CAAC;QACF,IAAI,QAAQ,EAAE;YACb,IAAI,CAAC,IAAI,CAAC,IAAA,cAAQ,EAAC,CAAyB,EAAE,IAAmH,CAAC,CAAC,CAAC;SACpK;QACD,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAEd,MAAM,aAAa,GAAG,CAAC,CAAmB,EAAS,CAAmB,EAAS,EAAE,CAAC,IAAA,kBAAI,EAAgB,CAAC,EAAE,CAAC,EAAE,SAAS,CAAC,CAAC;QAEvH,MAAM,UAAU,GACf,iCAAiC,CAChC,IAAA,YAAG,EACF,YAAY,CAAC,aAAa,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC;aAC9C,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,WAAW,CAAC,wBAAwB,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC;aAC5E,OAAO,CAAC,SAAS,CAAC,EAAE,CAAC,6BAA6B,CAAC,SAAS,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAExF,OAAO;YACN,WAAW,EAAE,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACzE,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC;YACtD,MAAM;SACN,CAAC;IACH,CAAC,CAAC;IAhCU,QAAA,IAAI,QAgCd;IAEH,MAAM,iCAAiC,GAAG,CAAC,cAA2C,EAA6B,EAAE;QACpH,MAAM,IAAI,GAAa,EAAE,CAAC;QAC1B,MAAM,WAAW,GAAY,EAAE,CAAC;QAEhC,cAAc,CAAC,OAAO,CAAC,UAAU,CAAC,EAAE;YACnC,UAAU,CAAC,WAAW,CAAC,GAAG,CAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;YACvG,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACjD,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,WAAW;QAC3B,CAAC,CAAC,CAAC;QAEH,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC;IAC9B,CAAC,CAAC;IAEK,MAAM,IAAI,GAAqB,KAAK,EAAE,QAA0B,EAAE,QAAa,EAAE,EAAE;QACzF,MAAM,eAAe,GAAG,QAAQ,CAAC,GAAG,CAAC,eAAG,CAAc,CAAC;QAEvD,MAAM,IAAI,GAAG,CAAC,MAAM,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC;QAC1D,OAAO,IAAA,YAAI,EAAwB,IAAI,CAAC,CAAC;IAC1C,CAAC,CAAC;IALW,QAAA,IAAI,QAKf;IAEK,MAAM,IAAI,GAA0B,CAAC,IAAY,EAAE,EAAE;QAC3D,MAAM,WAAW,GAAG,EAAE,CAAC;QACvB,MAAM,SAAS,GAAG,EAAE,CAAC;QAErB,IAAI,QAAQ,GAAG,IAAI,CAAC;QACpB,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,EAAE;YACxC,IAAI,QAAQ,EAAE;gBACb,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACvB,IAAI,IAAI,KAAK,EAAE,EAAE;oBAChB,QAAQ,GAAG,KAAK,CAAC;iBACjB;aACD;iBAAM;gBACN,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACrB;SACD;QAED,OAAO,EAAE,MAAM,EAAE,IAAA,YAAI,EAAwB,WAAW,CAAC,EAAE,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;IACzF,CAAC,CAAC;IAjBW,QAAA,IAAI,QAiBf","file":"searchEditorSerialization.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce, flatten } from 'vs/base/common/arrays';\nimport { URI } from 'vs/base/common/uri';\nimport 'vs/css!./media/searchEditor';\nimport { ServicesAccessor } from 'vs/editor/browser/editorExtensions';\nimport { Range } from 'vs/editor/common/core/range';\nimport type { ITextModel } from 'vs/editor/common/model';\nimport { localize } from 'vs/nls';\nimport { FileMatch, Match, searchMatchComparer, SearchResult, FolderMatch, CellMatch } from 'vs/workbench/contrib/search/browser/searchModel';\nimport type { SearchConfiguration } from 'vs/workbench/contrib/searchEditor/browser/searchEditorInput';\nimport { ITextQuery, SearchSortOrder } from 'vs/workbench/services/search/common/search';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\n\n// Using \\r\\n on Windows inserts an extra newline between results.\nconst lineDelimiter = '\\n';\n\nconst translateRangeLines =\n\t(n: number) =>\n\t\t(range: Range) =>\n\t\t\tnew Range(range.startLineNumber + n, range.startColumn, range.endLineNumber + n, range.endColumn);\n\nconst matchToSearchResultFormat = (match: Match, longestLineNumber: number): { line: string; ranges: Range[]; lineNumber: string }[] => {\n\tconst getLinePrefix = (i: number) => `${match.range().startLineNumber + i}`;\n\n\tconst fullMatchLines = match.fullPreviewLines();\n\n\n\tconst results: { line: string; ranges: Range[]; lineNumber: string }[] = [];\n\n\tfullMatchLines\n\t\t.forEach((sourceLine, i) => {\n\t\t\tconst lineNumber = getLinePrefix(i);\n\t\t\tconst paddingStr = ' '.repeat(longestLineNumber - lineNumber.length);\n\t\t\tconst prefix = `  ${paddingStr}${lineNumber}: `;\n\t\t\tconst prefixOffset = prefix.length;\n\n\t\t\t// split instead of replace to avoid creating a new string object\n\t\t\tconst line = prefix + (sourceLine.split(/\\r?\\n?$/, 1)[0] || '');\n\n\t\t\tconst rangeOnThisLine = ({ start, end }: { start?: number; end?: number }) => new Range(1, (start ?? 1) + prefixOffset, 1, (end ?? sourceLine.length + 1) + prefixOffset);\n\n\t\t\tconst matchRange = match.rangeInPreview();\n\t\t\tconst matchIsSingleLine = matchRange.startLineNumber === matchRange.endLineNumber;\n\n\t\t\tlet lineRange;\n\t\t\tif (matchIsSingleLine) { lineRange = (rangeOnThisLine({ start: matchRange.startColumn, end: matchRange.endColumn })); }\n\t\t\telse if (i === 0) { lineRange = (rangeOnThisLine({ start: matchRange.startColumn })); }\n\t\t\telse if (i === fullMatchLines.length - 1) { lineRange = (rangeOnThisLine({ end: matchRange.endColumn })); }\n\t\t\telse { lineRange = (rangeOnThisLine({})); }\n\n\t\t\tresults.push({ lineNumber: lineNumber, line, ranges: [lineRange] });\n\t\t});\n\n\treturn results;\n};\n\ntype SearchResultSerialization = { text: string[]; matchRanges: Range[] };\n\nfunction fileMatchToSearchResultFormat(fileMatch: FileMatch, labelFormatter: (x: URI) => string): SearchResultSerialization[] {\n\n\tconst textSerializations = fileMatch.textMatches().length > 0 ? matchesToSearchResultFormat(fileMatch.resource, fileMatch.textMatches().sort(searchMatchComparer), fileMatch.context, labelFormatter) : undefined;\n\tconst cellSerializations = fileMatch.cellMatches().sort((a, b) => a.cellIndex - b.cellIndex).sort().filter(cellMatch => cellMatch.contentMatches.length > 0).map((cellMatch, index) => cellMatchToSearchResultFormat(cellMatch, labelFormatter, index === 0));\n\n\treturn [textSerializations, ...cellSerializations].filter(x => !!x) as SearchResultSerialization[];\n}\nfunction matchesToSearchResultFormat(resource: URI, sortedMatches: Match[], matchContext: Map<number, string>, labelFormatter: (x: URI) => string, shouldUseHeader = true): SearchResultSerialization {\n\tconst longestLineNumber = sortedMatches[sortedMatches.length - 1].range().endLineNumber.toString().length;\n\n\tconst text: string[] = shouldUseHeader ? [`${labelFormatter(resource)}:`] : [];\n\tconst matchRanges: Range[] = [];\n\n\tconst targetLineNumberToOffset: Record<string, number> = {};\n\n\tconst context: { line: string; lineNumber: number }[] = [];\n\tmatchContext.forEach((line, lineNumber) => context.push({ line, lineNumber }));\n\tcontext.sort((a, b) => a.lineNumber - b.lineNumber);\n\n\tlet lastLine: number | undefined = undefined;\n\n\tconst seenLines = new Set<string>();\n\tsortedMatches.forEach(match => {\n\t\tmatchToSearchResultFormat(match, longestLineNumber).forEach(match => {\n\t\t\tif (!seenLines.has(match.lineNumber)) {\n\t\t\t\twhile (context.length && context[0].lineNumber < +match.lineNumber) {\n\t\t\t\t\tconst { line, lineNumber } = context.shift()!;\n\t\t\t\t\tif (lastLine !== undefined && lineNumber !== lastLine + 1) {\n\t\t\t\t\t\ttext.push('');\n\t\t\t\t\t}\n\t\t\t\t\ttext.push(`  ${' '.repeat(longestLineNumber - `${lineNumber}`.length)}${lineNumber}  ${line}`);\n\t\t\t\t\tlastLine = lineNumber;\n\t\t\t\t}\n\n\t\t\t\ttargetLineNumberToOffset[match.lineNumber] = text.length;\n\t\t\t\tseenLines.add(match.lineNumber);\n\t\t\t\ttext.push(match.line);\n\t\t\t\tlastLine = +match.lineNumber;\n\t\t\t}\n\n\t\t\tmatchRanges.push(...match.ranges.map(translateRangeLines(targetLineNumberToOffset[match.lineNumber])));\n\t\t});\n\t});\n\n\twhile (context.length) {\n\t\tconst { line, lineNumber } = context.shift()!;\n\t\ttext.push(`  ${lineNumber}  ${line}`);\n\t}\n\n\treturn { text, matchRanges };\n}\n\nfunction cellMatchToSearchResultFormat(cellMatch: CellMatch, labelFormatter: (x: URI) => string, shouldUseHeader: boolean): SearchResultSerialization {\n\treturn matchesToSearchResultFormat(cellMatch.cell.uri, cellMatch.contentMatches.sort(searchMatchComparer), cellMatch.context, labelFormatter, shouldUseHeader);\n}\n\nconst contentPatternToSearchConfiguration = (pattern: ITextQuery, includes: string, excludes: string, contextLines: number): SearchConfiguration => {\n\treturn {\n\t\tquery: pattern.contentPattern.pattern,\n\t\tisRegexp: !!pattern.contentPattern.isRegExp,\n\t\tisCaseSensitive: !!pattern.contentPattern.isCaseSensitive,\n\t\tmatchWholeWord: !!pattern.contentPattern.isWordMatch,\n\t\tfilesToExclude: excludes, filesToInclude: includes,\n\t\tshowIncludesExcludes: !!(includes || excludes || pattern?.userDisabledExcludesAndIgnoreFiles),\n\t\tuseExcludeSettingsAndIgnoreFiles: (pattern?.userDisabledExcludesAndIgnoreFiles === undefined ? true : !pattern.userDisabledExcludesAndIgnoreFiles),\n\t\tcontextLines,\n\t\tonlyOpenEditors: !!pattern.onlyOpenEditors,\n\t\tnotebookSearchConfig: {\n\t\t\tincludeMarkupInput: !!pattern.contentPattern.notebookInfo?.isInNotebookMarkdownInput,\n\t\t\tincludeMarkupPreview: !!pattern.contentPattern.notebookInfo?.isInNotebookMarkdownPreview,\n\t\t\tincludeCodeInput: !!pattern.contentPattern.notebookInfo?.isInNotebookCellInput,\n\t\t\tincludeOutput: !!pattern.contentPattern.notebookInfo?.isInNotebookCellOutput,\n\t\t}\n\t};\n};\n\nexport const serializeSearchConfiguration = (config: Partial<SearchConfiguration>): string => {\n\tconst removeNullFalseAndUndefined = <T>(a: (T | null | false | undefined)[]) => a.filter(a => a !== false && a !== null && a !== undefined) as T[];\n\n\tconst escapeNewlines = (str: string) => str.replace(/\\\\/g, '\\\\\\\\').replace(/\\n/g, '\\\\n');\n\n\treturn removeNullFalseAndUndefined([\n\t\t`# Query: ${escapeNewlines(config.query ?? '')}`,\n\n\t\t(config.isCaseSensitive || config.matchWholeWord || config.isRegexp || config.useExcludeSettingsAndIgnoreFiles === false)\n\t\t&& `# Flags: ${coalesce([\n\t\t\tconfig.isCaseSensitive && 'CaseSensitive',\n\t\t\tconfig.matchWholeWord && 'WordMatch',\n\t\t\tconfig.isRegexp && 'RegExp',\n\t\t\tconfig.onlyOpenEditors && 'OpenEditors',\n\t\t\t(config.useExcludeSettingsAndIgnoreFiles === false) && 'IgnoreExcludeSettings'\n\t\t]).join(' ')}`,\n\t\tconfig.filesToInclude ? `# Including: ${config.filesToInclude}` : undefined,\n\t\tconfig.filesToExclude ? `# Excluding: ${config.filesToExclude}` : undefined,\n\t\tconfig.contextLines ? `# ContextLines: ${config.contextLines}` : undefined,\n\t\t''\n\t]).join(lineDelimiter);\n};\n\nexport const extractSearchQueryFromModel = (model: ITextModel): SearchConfiguration =>\n\textractSearchQueryFromLines(model.getValueInRange(new Range(1, 1, 6, 1)).split(lineDelimiter));\n\nexport const defaultSearchConfig = (): SearchConfiguration => ({\n\tquery: '',\n\tfilesToInclude: '',\n\tfilesToExclude: '',\n\tisRegexp: false,\n\tisCaseSensitive: false,\n\tuseExcludeSettingsAndIgnoreFiles: true,\n\tmatchWholeWord: false,\n\tcontextLines: 0,\n\tshowIncludesExcludes: false,\n\tonlyOpenEditors: false,\n\tnotebookSearchConfig: {\n\t\tincludeMarkupInput: true,\n\t\tincludeMarkupPreview: false,\n\t\tincludeCodeInput: true,\n\t\tincludeOutput: true,\n\t}\n});\n\nexport const extractSearchQueryFromLines = (lines: string[]): SearchConfiguration => {\n\n\tconst query = defaultSearchConfig();\n\n\tconst unescapeNewlines = (str: string) => {\n\t\tlet out = '';\n\t\tfor (let i = 0; i < str.length; i++) {\n\t\t\tif (str[i] === '\\\\') {\n\t\t\t\ti++;\n\t\t\t\tconst escaped = str[i];\n\n\t\t\t\tif (escaped === 'n') {\n\t\t\t\t\tout += '\\n';\n\t\t\t\t}\n\t\t\t\telse if (escaped === '\\\\') {\n\t\t\t\t\tout += '\\\\';\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tthrow Error(localize('invalidQueryStringError', \"All backslashes in Query string must be escaped (\\\\\\\\)\"));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tout += str[i];\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t};\n\n\tconst parseYML = /^# ([^:]*): (.*)$/;\n\tfor (const line of lines) {\n\t\tconst parsed = parseYML.exec(line);\n\t\tif (!parsed) { continue; }\n\t\tconst [, key, value] = parsed;\n\t\tswitch (key) {\n\t\t\tcase 'Query': query.query = unescapeNewlines(value); break;\n\t\t\tcase 'Including': query.filesToInclude = value; break;\n\t\t\tcase 'Excluding': query.filesToExclude = value; break;\n\t\t\tcase 'ContextLines': query.contextLines = +value; break;\n\t\t\tcase 'Flags': {\n\t\t\t\tquery.isRegexp = value.indexOf('RegExp') !== -1;\n\t\t\t\tquery.isCaseSensitive = value.indexOf('CaseSensitive') !== -1;\n\t\t\t\tquery.useExcludeSettingsAndIgnoreFiles = value.indexOf('IgnoreExcludeSettings') === -1;\n\t\t\t\tquery.matchWholeWord = value.indexOf('WordMatch') !== -1;\n\t\t\t\tquery.onlyOpenEditors = value.indexOf('OpenEditors') !== -1;\n\t\t\t}\n\t\t}\n\t}\n\n\tquery.showIncludesExcludes = !!(query.filesToInclude || query.filesToExclude || !query.useExcludeSettingsAndIgnoreFiles);\n\n\treturn query;\n};\n\nexport const serializeSearchResultForEditor =\n\t(searchResult: SearchResult, rawIncludePattern: string, rawExcludePattern: string, contextLines: number, labelFormatter: (x: URI) => string, sortOrder: SearchSortOrder, limitHit?: boolean): { matchRanges: Range[]; text: string; config: Partial<SearchConfiguration> } => {\n\t\tif (!searchResult.query) { throw Error('Internal Error: Expected query, got null'); }\n\t\tconst config = contentPatternToSearchConfiguration(searchResult.query, rawIncludePattern, rawExcludePattern, contextLines);\n\n\t\tconst filecount = searchResult.fileCount() > 1 ? localize('numFiles', \"{0} files\", searchResult.fileCount()) : localize('oneFile', \"1 file\");\n\t\tconst resultcount = searchResult.count() > 1 ? localize('numResults', \"{0} results\", searchResult.count()) : localize('oneResult', \"1 result\");\n\n\t\tconst info = [\n\t\t\tsearchResult.count()\n\t\t\t\t? `${resultcount} - ${filecount}`\n\t\t\t\t: localize('noResults', \"No Results\"),\n\t\t];\n\t\tif (limitHit) {\n\t\t\tinfo.push(localize('searchMaxResultsWarning', \"The result set only contains a subset of all matches. Be more specific in your search to narrow down the results.\"));\n\t\t}\n\t\tinfo.push('');\n\n\t\tconst matchComparer = (a: FileMatch | FolderMatch, b: FileMatch | FolderMatch) => searchMatchComparer(a, b, sortOrder);\n\n\t\tconst allResults =\n\t\t\tflattenSearchResultSerializations(\n\t\t\t\tflatten(\n\t\t\t\t\tsearchResult.folderMatches().sort(matchComparer)\n\t\t\t\t\t\t.map(folderMatch => folderMatch.allDownstreamFileMatches().sort(matchComparer)\n\t\t\t\t\t\t\t.flatMap(fileMatch => fileMatchToSearchResultFormat(fileMatch, labelFormatter)))));\n\n\t\treturn {\n\t\t\tmatchRanges: allResults.matchRanges.map(translateRangeLines(info.length)),\n\t\t\ttext: info.concat(allResults.text).join(lineDelimiter),\n\t\t\tconfig\n\t\t};\n\t};\n\nconst flattenSearchResultSerializations = (serializations: SearchResultSerialization[]): SearchResultSerialization => {\n\tconst text: string[] = [];\n\tconst matchRanges: Range[] = [];\n\n\tserializations.forEach(serialized => {\n\t\tserialized.matchRanges.map(translateRangeLines(text.length)).forEach(range => matchRanges.push(range));\n\t\tserialized.text.forEach(line => text.push(line));\n\t\ttext.push(''); // new line\n\t});\n\n\treturn { text, matchRanges };\n};\n\nexport const parseSavedSearchEditor = async (accessor: ServicesAccessor, resource: URI) => {\n\tconst textFileService = accessor.get(ITextFileService);\n\n\tconst text = (await textFileService.read(resource)).value;\n\treturn parseSerializedSearchEditor(text);\n};\n\nexport const parseSerializedSearchEditor = (text: string) => {\n\tconst headerlines = [];\n\tconst bodylines = [];\n\n\tlet inHeader = true;\n\tfor (const line of text.split(/\\r?\\n/g)) {\n\t\tif (inHeader) {\n\t\t\theaderlines.push(line);\n\t\t\tif (line === '') {\n\t\t\t\tinHeader = false;\n\t\t\t}\n\t\t} else {\n\t\t\tbodylines.push(line);\n\t\t}\n\t}\n\n\treturn { config: extractSearchQueryFromLines(headerlines), text: bodylines.join('\\n') };\n};\n"]}