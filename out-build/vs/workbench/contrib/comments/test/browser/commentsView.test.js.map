{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/comments/test/browser/commentsView.test.ts"],"names":[],"mappings":"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","file":"commentsView.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { workbenchInstantiationService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { CommentsPanel } from 'vs/workbench/contrib/comments/browser/commentsView';\nimport { CommentService, ICommentService } from 'vs/workbench/contrib/comments/browser/commentService';\nimport { Comment, CommentInput, CommentThread, CommentThreadCollapsibleState, CommentThreadState } from 'vs/editor/common/languages';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { IViewContainerModel, IViewDescriptor, IViewDescriptorService, ViewContainer, ViewContainerLocation } from 'vs/workbench/common/views';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { IContextViewService } from 'vs/platform/contextview/browser/contextView';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nclass TestCommentThread implements CommentThread<IRange> {\n\tisDocumentCommentThread(): this is CommentThread<IRange> {\n\t\treturn true;\n\t}\n\tconstructor(public readonly commentThreadHandle: number,\n\t\tpublic readonly controllerHandle: number,\n\t\tpublic readonly threadId: string,\n\t\tpublic readonly resource: string,\n\t\tpublic readonly range: IRange,\n\t\tpublic readonly comments: Comment[]) { }\n\n\tonDidChangeComments: Event<readonly Comment[] | undefined> = new Emitter<readonly Comment[] | undefined>().event;\n\tonDidChangeInitialCollapsibleState: Event<CommentThreadCollapsibleState | undefined> = new Emitter<CommentThreadCollapsibleState | undefined>().event;\n\tcanReply: boolean = false;\n\tonDidChangeInput: Event<CommentInput | undefined> = new Emitter<CommentInput | undefined>().event;\n\tonDidChangeRange: Event<IRange> = new Emitter<IRange>().event;\n\tonDidChangeLabel: Event<string | undefined> = new Emitter<string | undefined>().event;\n\tonDidChangeCollapsibleState: Event<CommentThreadCollapsibleState | undefined> = new Emitter<CommentThreadCollapsibleState | undefined>().event;\n\tonDidChangeState: Event<CommentThreadState | undefined> = new Emitter<CommentThreadState | undefined>().event;\n\tonDidChangeCanReply: Event<boolean> = new Emitter<boolean>().event;\n\tisDisposed: boolean = false;\n\tisTemplate: boolean = false;\n\tlabel: string | undefined = undefined;\n\tcontextValue: string | undefined = undefined;\n}\n\nexport class TestViewDescriptorService implements Partial<IViewDescriptorService> {\n\tgetViewLocationById(id: string): ViewContainerLocation | null {\n\t\treturn ViewContainerLocation.Panel;\n\t}\n\treadonly onDidChangeLocation: Event<{ views: IViewDescriptor[]; from: ViewContainerLocation; to: ViewContainerLocation }> = new Emitter<{ views: IViewDescriptor[]; from: ViewContainerLocation; to: ViewContainerLocation }>().event;\n\tgetViewDescriptorById(id: string): IViewDescriptor | null {\n\t\treturn null;\n\t}\n\tgetViewContainerByViewId(id: string): ViewContainer | null {\n\t\treturn {\n\t\t\tid: 'comments',\n\t\t\ttitle: { value: 'Comments', original: 'Comments' },\n\t\t\tctorDescriptor: {} as any\n\t\t};\n\t}\n\tgetViewContainerModel(viewContainer: ViewContainer): IViewContainerModel {\n\t\tconst partialViewContainerModel: Partial<IViewContainerModel> = {\n\t\t\tonDidChangeContainerInfo: new Emitter<{ title?: boolean; icon?: boolean; keybindingId?: boolean }>().event\n\t\t};\n\t\treturn partialViewContainerModel as IViewContainerModel;\n\t}\n\tgetDefaultContainerById(id: string): ViewContainer | null {\n\t\treturn null;\n\t}\n}\n\nsuite('Comments View', function () {\n\tteardown(() => {\n\t\tinstantiationService.dispose();\n\t\tcommentService.dispose();\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet disposables: DisposableStore;\n\tlet instantiationService: TestInstantiationService;\n\tlet commentService: CommentService;\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\tinstantiationService = workbenchInstantiationService({}, disposables);\n\t\tinstantiationService.stub(IConfigurationService, new TestConfigurationService());\n\t\tinstantiationService.stub(IContextViewService, {});\n\t\tinstantiationService.stub(IViewDescriptorService, new TestViewDescriptorService());\n\t\tcommentService = instantiationService.createInstance(CommentService);\n\t\tinstantiationService.stub(ICommentService, commentService);\n\t});\n\n\n\n\ttest('collapse all', async function () {\n\t\tconst view = instantiationService.createInstance(CommentsPanel, { id: 'comments', title: 'Comments' });\n\t\tview.render();\n\t\tcommentService.setWorkspaceComments('test', [\n\t\t\tnew TestCommentThread(1, 1, '1', 'test1', new Range(1, 1, 1, 1), [{ body: 'test', uniqueIdInThread: 1, userName: 'alex' }]),\n\t\t\tnew TestCommentThread(2, 1, '1', 'test2', new Range(1, 1, 1, 1), [{ body: 'test', uniqueIdInThread: 1, userName: 'alex' }]),\n\t\t]);\n\t\tassert.strictEqual(view.getFilterStats().total, 2);\n\t\tassert.strictEqual(view.areAllCommentsExpanded(), true);\n\t\tview.collapseAll();\n\t\tassert.strictEqual(view.isSomeCommentsExpanded(), false);\n\t\tview.dispose();\n\t});\n\n\ttest('expand all', async function () {\n\t\tconst view = instantiationService.createInstance(CommentsPanel, { id: 'comments', title: 'Comments' });\n\t\tview.render();\n\t\tcommentService.setWorkspaceComments('test', [\n\t\t\tnew TestCommentThread(1, 1, '1', 'test1', new Range(1, 1, 1, 1), [{ body: 'test', uniqueIdInThread: 1, userName: 'alex' }]),\n\t\t\tnew TestCommentThread(2, 1, '1', 'test2', new Range(1, 1, 1, 1), [{ body: 'test', uniqueIdInThread: 1, userName: 'alex' }]),\n\t\t]);\n\t\tassert.strictEqual(view.getFilterStats().total, 2);\n\t\tview.collapseAll();\n\t\tassert.strictEqual(view.isSomeCommentsExpanded(), false);\n\t\tview.expandAll();\n\t\tassert.strictEqual(view.areAllCommentsExpanded(), true);\n\t\tview.dispose();\n\t});\n\n\ttest('filter by text', async function () {\n\t\tconst view = instantiationService.createInstance(CommentsPanel, { id: 'comments', title: 'Comments' });\n\t\tview.setVisible(true);\n\t\tview.render();\n\t\tcommentService.setWorkspaceComments('test', [\n\t\t\tnew TestCommentThread(1, 1, '1', 'test1', new Range(1, 1, 1, 1), [{ body: 'This comment is a cat.', uniqueIdInThread: 1, userName: 'alex' }]),\n\t\t\tnew TestCommentThread(2, 1, '1', 'test2', new Range(1, 1, 1, 1), [{ body: 'This comment is a dog.', uniqueIdInThread: 1, userName: 'alex' }]),\n\t\t]);\n\t\tassert.strictEqual(view.getFilterStats().total, 2);\n\t\tassert.strictEqual(view.getFilterStats().filtered, 2);\n\t\tview.getFilterWidget().setFilterText('cat');\n\t\t// Setting showResolved causes the filter to trigger for the purposes of this test.\n\t\tview.filters.showResolved = false;\n\n\t\tassert.strictEqual(view.getFilterStats().total, 2);\n\t\tassert.strictEqual(view.getFilterStats().filtered, 1);\n\t\tview.clearFilterText();\n\t\t// Setting showResolved causes the filter to trigger for the purposes of this test.\n\t\tview.filters.showResolved = true;\n\t\tassert.strictEqual(view.getFilterStats().total, 2);\n\t\tassert.strictEqual(view.getFilterStats().filtered, 2);\n\t\tview.dispose();\n\t});\n});\n"]}