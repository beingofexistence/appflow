{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/comments/browser/commentThreadRangeDecorator.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAUhG,MAAM,4BAA4B;QAGjC,IAAW,EAAE;YACZ,OAAO,IAAI,CAAC,CAAC,CAAa;QAC3B,CAAC;QAED,IAAW,EAAE,CAAC,EAAsB;YACnC,IAAI,CAAC,CAAC,GAAe,EAAE,CAAC;QACzB,CAAC;QAED,YACiB,KAAa,EACb,OAAY;YADZ,UAAK,GAAL,KAAK,CAAQ;YACb,YAAO,GAAP,OAAO,CAAK;QAC7B,CAAC;KACD;IAED,MAAa,IAA4B,SAAQ,eAAG;iBACpC,MAAC,GAAa,gCAAb,AAA6C,CAAC;QAS9D,YAAY,cAAoB;YAC/B,KAAK,EAAE,CAAC;YAPD,MAAC,GAAyB,EAAE,CAAC;YAC7B,MAAC,GAA+B,EAAE,CAAC;YAEnC,MAAC,GAA6C,EAAE,CAAC;YAKxD,MAAM,iBAAiB,GAA4B;gBAClD,WAAW,EAAE,IAAI,CAAwB,CAAC;gBAC1C,WAAW,EAAE,KAAK;gBAClB,MAAM,EAAE,EAAE;gBACV,SAAS,EAAE,sBAAsB;gBACjC,yBAAyB,EAAE,IAAI;aAC/B,CAAC;YAEF,IAAI,CAAC,CAAC,GAAmB,eAAG,CAAoB,aAAa,CAAC,iBAAiB,CAAC,CAAC;YAEjF,MAAM,uBAAuB,GAA4B;gBACxD,WAAW,EAAE,IAAI,CAAwB,CAAC;gBAC1C,WAAW,EAAE,KAAK;gBAClB,MAAM,EAAE,EAAE;gBACV,SAAS,EAAE,8BAA8B;gBACzC,yBAAyB,EAAE,IAAI;aAC/B,CAAC;YAEF,IAAI,CAAC,CAAC,GAAyB,eAAG,CAAoB,aAAa,CAAC,uBAAuB,CAAC,CAAC;YAC7F,IAAI,CAAC,CAAC,CAAS,cAAc,CAAC,+BAA+B,CAAC,MAAM,CAAC,EAAE;gBACtE,IAAI,CAAC,CAAC,CAAa,MAAM,CAAC,CAAC;YAC5B,CAAC,CAAC,CAAC,CAAC;YACJ,IAAI,CAAC,CAAC,CAAS,cAAc,CAAC,yBAAyB,CAAC,GAAG,EAAE;gBAC5D,IAAI,CAAC,CAAC,CAAa,SAAS,CAAC,CAAC;YAC/B,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAEO,CAAC,CAAa,MAAyC;YAC9D,IAAI,CAAC,IAAI,CAAC,CAAC,IAAS,CAAC,MAAM,EAAE,QAAQ,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,QAAQ,EAAE,KAAK,IAAI,CAAC,CAAC,CAAM,QAAQ,EAAE,EAAE,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE;gBACnH,OAAO;aACP;YACD,IAAI,CAAC,CAAC,EAAmC,OAAO,EAAE,CAAC;YACnD,MAAM,aAAa,GAAmC,EAAE,CAAC;YACzD,IAAI,MAAM,EAAE;gBACX,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;gBAC3B,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,eAAe,KAAK,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,KAAK,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE;oBAC3G,IAAI,MAAM,CAAC,gBAAgB,KAAK,yCAA6B,CAAC,QAAQ,EAAE;wBACvE,IAAI,CAAC,CAAC,GAAoC,MAAM,CAAC,2BAA2B,CAAC,KAAK,CAAC,EAAE;4BACpF,IAAI,KAAK,KAAK,yCAA6B,CAAC,SAAS,EAAE;gCACtD,IAAI,CAAC,CAAC,CAAa,SAAS,CAAC,CAAC;6BAC9B;wBACF,CAAC,CAAC,CAAC;wBACH,aAAa,CAAC,IAAI,CAAC,IAAI,4BAA4B,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAuB,CAAC,CAAC;qBAC1F;iBACD;aACD;YACD,IAAI,CAAC,CAAC,CAAM,iBAAiB,CAAC,CAAC,cAAc,EAAE,EAAE;gBAChD,IAAI,CAAC,CAAC,GAAqB,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,EAAoB,aAAa,CAAC,CAAC;gBACpG,aAAa,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,KAAK,EAAE,EAAE,CAAC,UAAU,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC,CAAa,KAAK,CAAC,CAAC,CAAC;YACzF,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,MAAM,CAAC,MAA+B,EAAE,YAA4B;YAC1E,MAAM,KAAK,GAAG,MAAM,EAAE,QAAQ,EAAE,CAAC;YACjC,IAAI,CAAC,MAAM,IAAI,CAAC,KAAK,EAAE;gBACtB,OAAO;aACP;YACD,IAAA,eAAG,EAAK,IAAI,CAAC,CAAC,CAA4B,CAAC;YAC3C,IAAI,CAAC,CAAC,GAAQ,MAAM,CAAC;YAErB,MAAM,6BAA6B,GAAmC,EAAE,CAAC;YACzE,KAAK,MAAM,IAAI,IAAI,YAAY,EAAE;gBAChC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;oBAC7B,IAAI,MAAM,CAAC,UAAU,EAAE;wBACtB,OAAO;qBACP;oBAED,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC;oBAC3B,6FAA6F;oBAC7F,2DAA2D;oBAC3D,IAAI,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,eAAe,KAAK,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW,KAAK,KAAK,CAAC,SAAS,CAAC,EAAE;wBACzG,OAAO;qBACP;oBAED,IAAI,CAAC,CAAC,CAA4B,IAAI,CAAC,MAAM,CAAC,2BAA2B,CAAC,GAAG,EAAE;wBAC9E,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,YAAY,CAAC,CAAC;oBACnC,CAAC,CAAC,CAAC,CAAC;oBAEJ,IAAI,MAAM,CAAC,gBAAgB,KAAK,yCAA6B,CAAC,SAAS,EAAE;wBACxE,OAAO;qBACP;oBAED,6BAA6B,CAAC,IAAI,CAAC,IAAI,4BAA4B,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAiB,CAAC,CAAC;gBACrG,CAAC,CAAC,CAAC;aACH;YAED,MAAM,CAAC,iBAAiB,CAAC,CAAC,cAAc,EAAE,EAAE;gBAC3C,IAAI,CAAC,CAAC,GAAe,cAAc,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,EAAc,6BAA6B,CAAC,CAAC;gBACxG,6BAA6B,CAAC,OAAO,CAAC,CAAC,UAAU,EAAE,KAAK,EAAE,EAAE,CAAC,UAAU,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC,CAAa,KAAK,CAAC,CAAC,CAAC;YACzG,CAAC,CAAC,CAAC;QACJ,CAAC;QAEQ,OAAO;YACf,IAAA,eAAG,EAAK,IAAI,CAAC,CAAC,CAA4B,CAAC;YAC3C,IAAI,CAAC,CAAC,EAAmC,OAAO,EAAE,CAAC;YACnD,KAAK,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC;;IA5GF,oBA6GC","file":"commentThreadRangeDecorator.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, dispose, IDisposable } from 'vs/base/common/lifecycle';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { IRange } from 'vs/editor/common/core/range';\nimport { CommentThread, CommentThreadCollapsibleState } from 'vs/editor/common/languages';\nimport { IModelDecorationOptions, IModelDeltaDecoration } from 'vs/editor/common/model';\nimport { ModelDecorationOptions } from 'vs/editor/common/model/textModel';\nimport { ICommentInfo, ICommentService } from 'vs/workbench/contrib/comments/browser/commentService';\n\nclass CommentThreadRangeDecoration implements IModelDeltaDecoration {\n\tprivate _decorationId: string | undefined;\n\n\tpublic get id(): string | undefined {\n\t\treturn this._decorationId;\n\t}\n\n\tpublic set id(id: string | undefined) {\n\t\tthis._decorationId = id;\n\t}\n\n\tconstructor(\n\t\tpublic readonly range: IRange,\n\t\tpublic readonly options: ModelDecorationOptions) {\n\t}\n}\n\nexport class CommentThreadRangeDecorator extends Disposable {\n\tprivate static description = 'comment-thread-range-decorator';\n\tprivate decorationOptions: ModelDecorationOptions;\n\tprivate activeDecorationOptions: ModelDecorationOptions;\n\tprivate decorationIds: string[] = [];\n\tprivate activeDecorationIds: string[] = [];\n\tprivate editor: ICodeEditor | undefined;\n\tprivate threadCollapseStateListeners: IDisposable[] = [];\n\tprivate currentThreadCollapseStateListener: IDisposable | undefined;\n\n\tconstructor(commentService: ICommentService) {\n\t\tsuper();\n\t\tconst decorationOptions: IModelDecorationOptions = {\n\t\t\tdescription: CommentThreadRangeDecorator.description,\n\t\t\tisWholeLine: false,\n\t\t\tzIndex: 20,\n\t\t\tclassName: 'comment-thread-range',\n\t\t\tshouldFillLineOnLineBreak: true\n\t\t};\n\n\t\tthis.decorationOptions = ModelDecorationOptions.createDynamic(decorationOptions);\n\n\t\tconst activeDecorationOptions: IModelDecorationOptions = {\n\t\t\tdescription: CommentThreadRangeDecorator.description,\n\t\t\tisWholeLine: false,\n\t\t\tzIndex: 20,\n\t\t\tclassName: 'comment-thread-range-current',\n\t\t\tshouldFillLineOnLineBreak: true\n\t\t};\n\n\t\tthis.activeDecorationOptions = ModelDecorationOptions.createDynamic(activeDecorationOptions);\n\t\tthis._register(commentService.onDidChangeCurrentCommentThread(thread => {\n\t\t\tthis.updateCurrent(thread);\n\t\t}));\n\t\tthis._register(commentService.onDidUpdateCommentThreads(() => {\n\t\t\tthis.updateCurrent(undefined);\n\t\t}));\n\t}\n\n\tprivate updateCurrent(thread: CommentThread<IRange> | undefined) {\n\t\tif (!this.editor || (thread?.resource && (thread.resource?.toString() !== this.editor.getModel()?.uri.toString()))) {\n\t\t\treturn;\n\t\t}\n\t\tthis.currentThreadCollapseStateListener?.dispose();\n\t\tconst newDecoration: CommentThreadRangeDecoration[] = [];\n\t\tif (thread) {\n\t\t\tconst range = thread.range;\n\t\t\tif (range && !((range.startLineNumber === range.endLineNumber) && (range.startColumn === range.endColumn))) {\n\t\t\t\tif (thread.collapsibleState === CommentThreadCollapsibleState.Expanded) {\n\t\t\t\t\tthis.currentThreadCollapseStateListener = thread.onDidChangeCollapsibleState(state => {\n\t\t\t\t\t\tif (state === CommentThreadCollapsibleState.Collapsed) {\n\t\t\t\t\t\t\tthis.updateCurrent(undefined);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tnewDecoration.push(new CommentThreadRangeDecoration(range, this.activeDecorationOptions));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.editor.changeDecorations((changeAccessor) => {\n\t\t\tthis.activeDecorationIds = changeAccessor.deltaDecorations(this.activeDecorationIds, newDecoration);\n\t\t\tnewDecoration.forEach((decoration, index) => decoration.id = this.decorationIds[index]);\n\t\t});\n\t}\n\n\tpublic update(editor: ICodeEditor | undefined, commentInfos: ICommentInfo[]) {\n\t\tconst model = editor?.getModel();\n\t\tif (!editor || !model) {\n\t\t\treturn;\n\t\t}\n\t\tdispose(this.threadCollapseStateListeners);\n\t\tthis.editor = editor;\n\n\t\tconst commentThreadRangeDecorations: CommentThreadRangeDecoration[] = [];\n\t\tfor (const info of commentInfos) {\n\t\t\tinfo.threads.forEach(thread => {\n\t\t\t\tif (thread.isDisposed) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst range = thread.range;\n\t\t\t\t// We only want to show a range decoration when there's the range spans either multiple lines\n\t\t\t\t// or, when is spans multiple characters on the sample line\n\t\t\t\tif (!range || (range.startLineNumber === range.endLineNumber) && (range.startColumn === range.endColumn)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.threadCollapseStateListeners.push(thread.onDidChangeCollapsibleState(() => {\n\t\t\t\t\tthis.update(editor, commentInfos);\n\t\t\t\t}));\n\n\t\t\t\tif (thread.collapsibleState === CommentThreadCollapsibleState.Collapsed) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tcommentThreadRangeDecorations.push(new CommentThreadRangeDecoration(range, this.decorationOptions));\n\t\t\t});\n\t\t}\n\n\t\teditor.changeDecorations((changeAccessor) => {\n\t\t\tthis.decorationIds = changeAccessor.deltaDecorations(this.decorationIds, commentThreadRangeDecorations);\n\t\t\tcommentThreadRangeDecorations.forEach((decoration, index) => decoration.id = this.decorationIds[index]);\n\t\t});\n\t}\n\n\toverride dispose() {\n\t\tdispose(this.threadCollapseStateListeners);\n\t\tthis.currentThreadCollapseStateListener?.dispose();\n\t\tsuper.dispose();\n\t}\n}\n"]}