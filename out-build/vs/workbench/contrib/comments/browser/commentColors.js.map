{"version":3,"sources":["vs/workbench/contrib/comments/browser/commentColors.ts"],"names":[],"mappings":"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","file":"commentColors.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Color } from 'vs/base/common/color';\nimport * as languages from 'vs/editor/common/languages';\nimport * as nls from 'vs/nls';\nimport { contrastBorder, disabledForeground, listFocusOutline, registerColor, transparent } from 'vs/platform/theme/common/colorRegistry';\nimport { IColorTheme } from 'vs/platform/theme/common/themeService';\n\nconst resolvedCommentViewIcon = registerColor('commentsView.resolvedIcon', { dark: disabledForeground, light: disabledForeground, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('resolvedCommentIcon', 'Icon color for resolved comments.'));\nconst unresolvedCommentViewIcon = registerColor('commentsView.unresolvedIcon', { dark: listFocusOutline, light: listFocusOutline, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('unresolvedCommentIcon', 'Icon color for unresolved comments.'));\n\nconst resolvedCommentBorder = registerColor('editorCommentsWidget.resolvedBorder', { dark: resolvedCommentViewIcon, light: resolvedCommentViewIcon, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('resolvedCommentBorder', 'Color of borders and arrow for resolved comments.'));\nconst unresolvedCommentBorder = registerColor('editorCommentsWidget.unresolvedBorder', { dark: unresolvedCommentViewIcon, light: unresolvedCommentViewIcon, hcDark: contrastBorder, hcLight: contrastBorder }, nls.localize('unresolvedCommentBorder', 'Color of borders and arrow for unresolved comments.'));\nexport const commentThreadRangeBackground = registerColor('editorCommentsWidget.rangeBackground', { dark: transparent(unresolvedCommentBorder, .1), light: transparent(unresolvedCommentBorder, .1), hcDark: transparent(unresolvedCommentBorder, .1), hcLight: transparent(unresolvedCommentBorder, .1) }, nls.localize('commentThreadRangeBackground', 'Color of background for comment ranges.'));\nexport const commentThreadRangeActiveBackground = registerColor('editorCommentsWidget.rangeActiveBackground', { dark: transparent(unresolvedCommentBorder, .1), light: transparent(unresolvedCommentBorder, .1), hcDark: transparent(unresolvedCommentBorder, .1), hcLight: transparent(unresolvedCommentBorder, .1) }, nls.localize('commentThreadActiveRangeBackground', 'Color of background for currently selected or hovered comment range.'));\n\nconst commentThreadStateBorderColors = new Map([\n\t[languages.CommentThreadState.Unresolved, unresolvedCommentBorder],\n\t[languages.CommentThreadState.Resolved, resolvedCommentBorder],\n]);\n\nconst commentThreadStateIconColors = new Map([\n\t[languages.CommentThreadState.Unresolved, unresolvedCommentViewIcon],\n\t[languages.CommentThreadState.Resolved, resolvedCommentViewIcon],\n]);\n\nexport const commentThreadStateColorVar = '--comment-thread-state-color';\nexport const commentViewThreadStateColorVar = '--comment-view-thread-state-color';\nexport const commentThreadStateBackgroundColorVar = '--comment-thread-state-background-color';\n\nfunction getCommentThreadStateColor(state: languages.CommentThreadState | undefined, theme: IColorTheme, map: Map<languages.CommentThreadState, string>): Color | undefined {\n\tconst colorId = (state !== undefined) ? map.get(state) : undefined;\n\treturn (colorId !== undefined) ? theme.getColor(colorId) : undefined;\n}\n\nexport function getCommentThreadStateBorderColor(state: languages.CommentThreadState | undefined, theme: IColorTheme): Color | undefined {\n\treturn getCommentThreadStateColor(state, theme, commentThreadStateBorderColors);\n}\n\nexport function getCommentThreadStateIconColor(state: languages.CommentThreadState | undefined, theme: IColorTheme): Color | undefined {\n\treturn getCommentThreadStateColor(state, theme, commentThreadStateIconColors);\n}\n"]}