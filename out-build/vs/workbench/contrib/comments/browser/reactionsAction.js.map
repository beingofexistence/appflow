{"version":3,"sources":["vs/workbench/contrib/comments/browser/reactionsAction.ts"],"names":[],"mappings":"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","file":"reactionsAction.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as dom from 'vs/base/browser/dom';\nimport { Action, IAction } from 'vs/base/common/actions';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { ActionViewItem } from 'vs/base/browser/ui/actionbar/actionViewItems';\n\nexport class ToggleReactionsAction extends Action {\n\tstatic readonly ID = 'toolbar.toggle.pickReactions';\n\tprivate _menuActions: IAction[] = [];\n\tprivate toggleDropdownMenu: () => void;\n\tconstructor(toggleDropdownMenu: () => void, title?: string) {\n\t\tsuper(ToggleReactionsAction.ID, title || nls.localize('pickReactions', \"Pick Reactions...\"), 'toggle-reactions', true);\n\t\tthis.toggleDropdownMenu = toggleDropdownMenu;\n\t}\n\toverride run(): Promise<any> {\n\t\tthis.toggleDropdownMenu();\n\t\treturn Promise.resolve(true);\n\t}\n\tget menuActions() {\n\t\treturn this._menuActions;\n\t}\n\tset menuActions(actions: IAction[]) {\n\t\tthis._menuActions = actions;\n\t}\n}\nexport class ReactionActionViewItem extends ActionViewItem {\n\tconstructor(action: ReactionAction) {\n\t\tsuper(null, action, {});\n\t}\n\tprotected override updateLabel(): void {\n\t\tif (!this.label) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst action = this.action as ReactionAction;\n\t\tif (action.class) {\n\t\t\tthis.label.classList.add(action.class);\n\t\t}\n\t\tif (!action.icon) {\n\t\t\tconst reactionLabel = dom.append(this.label, dom.$('span.reaction-label'));\n\t\t\treactionLabel.innerText = action.label;\n\t\t} else {\n\t\t\tconst reactionIcon = dom.append(this.label, dom.$('.reaction-icon'));\n\t\t\tconst uri = URI.revive(action.icon);\n\t\t\treactionIcon.style.backgroundImage = dom.asCSSUrl(uri);\n\t\t\treactionIcon.title = action.label;\n\t\t}\n\t\tif (action.count) {\n\t\t\tconst reactionCount = dom.append(this.label, dom.$('span.reaction-count'));\n\t\t\treactionCount.innerText = `${action.count}`;\n\t\t}\n\t}\n\n\tprotected override getTooltip(): string | undefined {\n\t\tconst action = this.action as ReactionAction;\n\t\tconst toggleMessage = action.enabled ? nls.localize('comment.toggleableReaction', \"Toggle reaction, \") : '';\n\n\t\tif (action.count === undefined) {\n\t\t\treturn nls.localize({\n\t\t\t\tkey: 'comment.reactionLabelNone', comment: [\n\t\t\t\t\t'This is a tooltip for an emoji button so that the current user can toggle their reaction to a comment.',\n\t\t\t\t\t'The first arg is localized message \"Toggle reaction\" or empty if the user doesn\\'t have permission to toggle the reaction, the second is the name of the reaction.']\n\t\t\t}, \"{0}{1} reaction\", toggleMessage, action.label);\n\t\t} else if (action.count === 1) {\n\t\t\treturn nls.localize({\n\t\t\t\tkey: 'comment.reactionLabelOne', comment: [\n\t\t\t\t\t'This is a tooltip for an emoji that is a \"reaction\" to a comment where the count of the reactions is 1.',\n\t\t\t\t\t'The emoji is also a button so that the current user can also toggle their own emoji reaction.',\n\t\t\t\t\t'The first arg is localized message \"Toggle reaction\" or empty if the user doesn\\'t have permission to toggle the reaction, the second is the name of the reaction.']\n\t\t\t}, \"{0}1 reaction with {1}\", toggleMessage, action.label);\n\t\t} else if (action.count > 1) {\n\t\t\treturn nls.localize({\n\t\t\t\tkey: 'comment.reactionLabelMany', comment: [\n\t\t\t\t\t'This is a tooltip for an emoji that is a \"reaction\" to a comment where the count of the reactions is greater than 1.',\n\t\t\t\t\t'The emoji is also a button so that the current user can also toggle their own emoji reaction.',\n\t\t\t\t\t'The first arg is localized message \"Toggle reaction\" or empty if the user doesn\\'t have permission to toggle the reaction, the second is number of users who have reacted with that reaction, and the third is the name of the reaction.']\n\t\t\t}, \"{0}{1} reactions with {2}\", toggleMessage, action.count, action.label);\n\t\t}\n\t\treturn undefined;\n\t}\n}\nexport class ReactionAction extends Action {\n\tstatic readonly ID = 'toolbar.toggle.reaction';\n\tconstructor(id: string, label: string = '', cssClass: string = '', enabled: boolean = true, actionCallback?: (event?: any) => Promise<any>, public icon?: UriComponents, public count?: number) {\n\t\tsuper(ReactionAction.ID, label, cssClass, enabled, actionCallback);\n\t}\n}\n"]}