{"version":3,"sources":["vs/workbench/contrib/comments/common/commentContextKeys.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,IAAiB,kBAAkB,CA8ClC;IA9CD,WAAiB,kBAAkB;QAElC;;WAEG;QACU,iDAA8B,GAAG,IAAI,gBAAG,CAAoB,gCAAgC,EAAE,KAAK,EAAE;YACjH,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAoB,EAAE,IAAkE,CAAC;YACnH,IAAI,EAAE,SAAS;SACf,CAAC,CAAC;QAEH;;WAEG;QACU,iDAA8B,GAAG,IAAI,gBAAG,CAAoB,gCAAgC,EAAE,KAAK,EAAE;YACjH,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAA0B,EAAE,IAAkD,CAAC;YACzG,IAAI,EAAE,SAAS;SACf,CAAC,CAAC;QAEH;;WAEG;QACU,yCAAsB,GAAG,IAAI,gBAAG,CAAoB,wBAAwB,EAAE,KAAK,EAAE;YACjG,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAuB,EAAE,IAAsE,CAAC;YAC1H,IAAI,EAAE,SAAS;SACf,CAAC,CAAC;QAEH;;WAEG;QACU,uCAAoB,GAAG,IAAI,gBAAG,CAAoB,sBAAsB,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAsB,EAAE,IAA6C,CAAC,EAAE,CAAC,CAAC;QACrN;;WAEG;QACU,iCAAc,GAAG,IAAI,gBAAG,CAAoB,gBAAgB,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAgB,EAAE,IAAmC,CAAC,EAAE,CAAC,CAAC;QACzL;;WAEG;QACU,iCAAc,GAAG,IAAI,gBAAG,CAAmB,SAAS,EAAE,SAAS,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAS,EAAE,IAAkC,CAAC,EAAE,CAAC,CAAC;QAC5K;;WAEG;QACU,uCAAoB,GAAG,IAAI,gBAAG,CAAmB,eAAe,EAAE,SAAS,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAe,EAAE,IAAyC,CAAC,EAAE,CAAC,CAAC;QACrM;;WAEG;QACU,2CAAwB,GAAG,IAAI,gBAAG,CAAmB,mBAAmB,EAAE,SAAS,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,GAAG,CAAC,QAAQ,CAAC,CAAmB,EAAE,IAA4D,CAAC,EAAE,CAAC,CAAC;IACrO,CAAC,EA9CgB,kBAAkB,kCAAlB,kBAAkB,QA8ClC","file":"commentContextKeys.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { RawContextKey } from 'vs/platform/contextkey/common/contextkey';\n\n\nexport namespace CommentContextKeys {\n\n\t/**\n\t * A context key that is set when the active cursor is in a commenting range.\n\t */\n\texport const activeCursorHasCommentingRange = new RawContextKey<boolean>('activeCursorHasCommentingRange', false, {\n\t\tdescription: nls.localize('hasCommentingRange', \"Whether the position at the active cursor has a commenting range\"),\n\t\ttype: 'boolean'\n\t});\n\n\t/**\n\t * A context key that is set when the active editor has commenting ranges.\n\t */\n\texport const activeEditorHasCommentingRange = new RawContextKey<boolean>('activeEditorHasCommentingRange', false, {\n\t\tdescription: nls.localize('editorHasCommentingRange', \"Whether the active editor has a commenting range\"),\n\t\ttype: 'boolean'\n\t});\n\n\t/**\n\t * A context key that is set when the workspace has either comments or commenting ranges.\n\t */\n\texport const WorkspaceHasCommenting = new RawContextKey<boolean>('workspaceHasCommenting', false, {\n\t\tdescription: nls.localize('hasCommentingProvider', \"Whether the open workspace has either comments or commenting ranges.\"),\n\t\ttype: 'boolean'\n\t});\n\n\t/**\n\t * A context key that is set when the comment thread has no comments.\n\t */\n\texport const commentThreadIsEmpty = new RawContextKey<boolean>('commentThreadIsEmpty', false, { type: 'boolean', description: nls.localize('commentThreadIsEmpty', \"Set when the comment thread has no comments\") });\n\t/**\n\t * A context key that is set when the comment has no input.\n\t */\n\texport const commentIsEmpty = new RawContextKey<boolean>('commentIsEmpty', false, { type: 'boolean', description: nls.localize('commentIsEmpty', \"Set when the comment has no input\") });\n\t/**\n\t * The context value of the comment.\n\t */\n\texport const commentContext = new RawContextKey<string>('comment', undefined, { type: 'string', description: nls.localize('comment', \"The context value of the comment\") });\n\t/**\n\t * The context value of the comment thread.\n\t */\n\texport const commentThreadContext = new RawContextKey<string>('commentThread', undefined, { type: 'string', description: nls.localize('commentThread', \"The context value of the comment thread\") });\n\t/**\n\t * The comment controller id associated with a comment thread.\n\t */\n\texport const commentControllerContext = new RawContextKey<string>('commentController', undefined, { type: 'string', description: nls.localize('commentController', \"The comment controller id associated with a comment thread\") });\n}\n"]}