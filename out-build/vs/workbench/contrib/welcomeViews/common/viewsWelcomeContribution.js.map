{"version":3,"sources":["vs/workbench/contrib/welcomeViews/common/viewsWelcomeContribution.ts"],"names":[],"mappings":"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","file":"viewsWelcomeContribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IExtensionPoint, IExtensionPointUser } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { ViewsWelcomeExtensionPoint, ViewWelcome, ViewIdentifierMap } from './viewsWelcomeExtensionPoint';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Extensions as ViewContainerExtensions, IViewContentDescriptor, IViewsRegistry } from 'vs/workbench/common/views';\nimport { isProposedApiEnabled } from 'vs/workbench/services/extensions/common/extensions';\n\nconst viewsRegistry = Registry.as<IViewsRegistry>(ViewContainerExtensions.ViewsRegistry);\n\nexport class ViewsWelcomeContribution extends Disposable implements IWorkbenchContribution {\n\n\tprivate viewWelcomeContents = new Map<ViewWelcome, IDisposable>();\n\n\tconstructor(extensionPoint: IExtensionPoint<ViewsWelcomeExtensionPoint>) {\n\t\tsuper();\n\n\t\textensionPoint.setHandler((_, { added, removed }) => {\n\t\t\tfor (const contribution of removed) {\n\t\t\t\tfor (const welcome of contribution.value) {\n\t\t\t\t\tconst disposable = this.viewWelcomeContents.get(welcome);\n\n\t\t\t\t\tdisposable?.dispose();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst welcomesByViewId = new Map<string, Map<ViewWelcome, IViewContentDescriptor>>();\n\n\t\t\tfor (const contribution of added) {\n\t\t\t\tfor (const welcome of contribution.value) {\n\t\t\t\t\tconst { group, order } = parseGroupAndOrder(welcome, contribution);\n\t\t\t\t\tconst precondition = ContextKeyExpr.deserialize(welcome.enablement);\n\n\t\t\t\t\tconst id = ViewIdentifierMap[welcome.view] ?? welcome.view;\n\t\t\t\t\tlet viewContentMap = welcomesByViewId.get(id);\n\t\t\t\t\tif (!viewContentMap) {\n\t\t\t\t\t\tviewContentMap = new Map();\n\t\t\t\t\t\twelcomesByViewId.set(id, viewContentMap);\n\t\t\t\t\t}\n\n\t\t\t\t\tviewContentMap.set(welcome, {\n\t\t\t\t\t\tcontent: welcome.contents,\n\t\t\t\t\t\twhen: ContextKeyExpr.deserialize(welcome.when),\n\t\t\t\t\t\tprecondition,\n\t\t\t\t\t\tgroup,\n\t\t\t\t\t\torder\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const [id, viewContentMap] of welcomesByViewId) {\n\t\t\t\tconst disposables = viewsRegistry.registerViewWelcomeContent2(id, viewContentMap);\n\n\t\t\t\tfor (const [welcome, disposable] of disposables) {\n\t\t\t\t\tthis.viewWelcomeContents.set(welcome, disposable);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction parseGroupAndOrder(welcome: ViewWelcome, contribution: IExtensionPointUser<ViewsWelcomeExtensionPoint>): { group: string | undefined; order: number | undefined } {\n\n\tlet group: string | undefined;\n\tlet order: number | undefined;\n\tif (welcome.group) {\n\t\tif (!isProposedApiEnabled(contribution.description, 'contribViewsWelcome')) {\n\t\t\tcontribution.collector.warn(nls.localize('ViewsWelcomeExtensionPoint.proposedAPI', \"The viewsWelcome contribution in '{0}' requires 'enabledApiProposals: [\\\"contribViewsWelcome\\\"]' in order to use the 'group' proposed property.\", contribution.description.identifier.value));\n\t\t\treturn { group, order };\n\t\t}\n\n\t\tconst idx = welcome.group.lastIndexOf('@');\n\t\tif (idx > 0) {\n\t\t\tgroup = welcome.group.substr(0, idx);\n\t\t\torder = Number(welcome.group.substr(idx + 1)) || undefined;\n\t\t} else {\n\t\t\tgroup = welcome.group;\n\t\t}\n\t}\n\treturn { group, order };\n}\n"]}