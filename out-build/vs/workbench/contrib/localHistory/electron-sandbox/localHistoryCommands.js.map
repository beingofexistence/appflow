{"version":3,"sources":["vs/workbench/contrib/localHistory/electron-sandbox/localHistoryCommands.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAchG,gBAAgB;IAEhB,IAAA,aAAG,EAAa,KAAM,SAAQ,aAAG;QAChC;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,0CAA0C;gBAC9C,KAAK,EAAE;oBACN,KAAK,EAAE,aAAE,CAAQ,CAAC,CAAC,IAAA,cAAQ,EAAC,CAAiB,EAAE,IAAyB,CAAC,CAAC,CAAC,CAAC,aAAE,CAAU,CAAC,CAAC,IAAA,cAAQ,EAAC,CAAa,EAAE,IAAkB,CAAC,CAAC,CAAC,CAAC,IAAA,cAAQ,EAAC,CAAe,EAAE,IAAwB,CAAC;oBAC3L,QAAQ,EAAE,aAAE,CAAQ,CAAC,CAAC,yBAAyB,CAAC,CAAC,CAAC,aAAE,CAAU,CAAC,CAAC,kBAAkB,CAAC,CAAC,CAAC,wBAAwB;iBAC7G;gBACD,IAAI,EAAE;oBACL,EAAE,EAAE,aAAG,CAAI,mBAAmB;oBAC9B,KAAK,EAAE,UAAU;oBACjB,KAAK,EAAE,CAAC;oBACR,IAAI,EAAE,gBAAG,CAAY,GAAG,CAAC,mBAAI,EAA4B,kBAAI,CAAe,MAAM,CAAC,SAAS,CAAC,iBAAO,CAAC,IAAI,CAAC,CAAC;iBAC3G;aACD,CAAC,CAAC;QACJ,CAAC;QACD,KAAK,CAAC,GAAG,CAAC,QAA0B,EAAE,IAA8B;YACnE,MAAM,yBAAyB,GAAG,QAAQ,CAAC,GAAG,CAAC,yBAAI,CAAuB,CAAC;YAC3E,MAAM,iBAAiB,GAAG,QAAQ,CAAC,GAAG,CAAC,aAAI,CAAe,CAAC;YAE3D,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,IAAA,2BAAI,EAAkB,yBAAyB,EAAE,IAAI,CAAC,CAAC;YAC/E,IAAI,KAAK,EAAE;gBACV,MAAM,iBAAiB,CAAC,gBAAgB,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,iBAAO,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;aAC/F;QACF,CAAC;KACD,CAAC,CAAC;;AAEH,YAAY","file":"localHistoryCommands.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { IWorkingCopyHistoryService } from 'vs/workbench/services/workingCopy/common/workingCopyHistory';\nimport { ServicesAccessor } from 'vs/editor/browser/editorExtensions';\nimport { registerAction2, Action2, MenuId } from 'vs/platform/actions/common/actions';\nimport { LOCAL_HISTORY_MENU_CONTEXT_KEY } from 'vs/workbench/contrib/localHistory/browser/localHistory';\nimport { findLocalHistoryEntry, ITimelineCommandArgument } from 'vs/workbench/contrib/localHistory/browser/localHistoryCommands';\nimport { isMacintosh, isWindows } from 'vs/base/common/platform';\nimport { INativeHostService } from 'vs/platform/native/common/native';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { Schemas } from 'vs/base/common/network';\nimport { ResourceContextKey } from 'vs/workbench/common/contextkeys';\n\n//#region Delete\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.localHistory.revealInOS',\n\t\t\ttitle: {\n\t\t\t\tvalue: isWindows ? localize('revealInWindows', \"Reveal in File Explorer\") : isMacintosh ? localize('revealInMac', \"Reveal in Finder\") : localize('openContainer', \"Open Containing Folder\"),\n\t\t\t\toriginal: isWindows ? 'Reveal in File Explorer' : isMacintosh ? 'Reveal in Finder' : 'Open Containing Folder'\n\t\t\t},\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.TimelineItemContext,\n\t\t\t\tgroup: '4_reveal',\n\t\t\t\torder: 1,\n\t\t\t\twhen: ContextKeyExpr.and(LOCAL_HISTORY_MENU_CONTEXT_KEY, ResourceContextKey.Scheme.isEqualTo(Schemas.file))\n\t\t\t}\n\t\t});\n\t}\n\tasync run(accessor: ServicesAccessor, item: ITimelineCommandArgument): Promise<void> {\n\t\tconst workingCopyHistoryService = accessor.get(IWorkingCopyHistoryService);\n\t\tconst nativeHostService = accessor.get(INativeHostService);\n\n\t\tconst { entry } = await findLocalHistoryEntry(workingCopyHistoryService, item);\n\t\tif (entry) {\n\t\t\tawait nativeHostService.showItemInFolder(entry.location.with({ scheme: Schemas.file }).fsPath);\n\t\t}\n\t}\n});\n\n//#endregion\n"]}