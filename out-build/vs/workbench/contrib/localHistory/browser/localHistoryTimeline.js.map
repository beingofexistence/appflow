{"version":3,"sources":["vs/workbench/contrib/localHistory/browser/localHistoryTimeline.ts"],"names":[],"mappings":"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","file":"localHistoryTimeline.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { Emitter } from 'vs/base/common/event';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Disposable, MutableDisposable } from 'vs/base/common/lifecycle';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { ITimelineService, Timeline, TimelineChangeEvent, TimelineItem, TimelineOptions, TimelineProvider } from 'vs/workbench/contrib/timeline/common/timeline';\nimport { IWorkingCopyHistoryEntry, IWorkingCopyHistoryService } from 'vs/workbench/services/workingCopy/common/workingCopyHistory';\nimport { URI } from 'vs/base/common/uri';\nimport { IPathService } from 'vs/workbench/services/path/common/pathService';\nimport { API_OPEN_DIFF_EDITOR_COMMAND_ID } from 'vs/workbench/browser/parts/editor/editorCommands';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { LocalHistoryFileSystemProvider } from 'vs/workbench/contrib/localHistory/browser/localHistoryFileSystemProvider';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { SaveSourceRegistry } from 'vs/workbench/common/editor';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { COMPARE_WITH_FILE_LABEL, toDiffEditorArguments } from 'vs/workbench/contrib/localHistory/browser/localHistoryCommands';\nimport { MarkdownString } from 'vs/base/common/htmlContent';\nimport { getLocalHistoryDateFormatter, LOCAL_HISTORY_ICON_ENTRY, LOCAL_HISTORY_MENU_CONTEXT_VALUE } from 'vs/workbench/contrib/localHistory/browser/localHistory';\nimport { Schemas } from 'vs/base/common/network';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { getVirtualWorkspaceAuthority } from 'vs/platform/workspace/common/virtualWorkspace';\n\nexport class LocalHistoryTimeline extends Disposable implements IWorkbenchContribution, TimelineProvider {\n\n\tprivate static readonly ID = 'timeline.localHistory';\n\n\tprivate static readonly LOCAL_HISTORY_ENABLED_SETTINGS_KEY = 'workbench.localHistory.enabled';\n\n\treadonly id = LocalHistoryTimeline.ID;\n\n\treadonly label = localize('localHistory', \"Local History\");\n\n\treadonly scheme = '*'; // we try to show local history for all schemes if possible\n\n\tprivate readonly _onDidChange = this._register(new Emitter<TimelineChangeEvent>());\n\treadonly onDidChange = this._onDidChange.event;\n\n\tprivate readonly timelineProviderDisposable = this._register(new MutableDisposable());\n\n\tconstructor(\n\t\t@ITimelineService private readonly timelineService: ITimelineService,\n\t\t@IWorkingCopyHistoryService private readonly workingCopyHistoryService: IWorkingCopyHistoryService,\n\t\t@IPathService private readonly pathService: IPathService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerComponents();\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerComponents(): void {\n\n\t\t// Timeline (if enabled)\n\t\tthis.updateTimelineRegistration();\n\n\t\t// File Service Provider\n\t\tthis._register(this.fileService.registerProvider(LocalHistoryFileSystemProvider.SCHEMA, new LocalHistoryFileSystemProvider(this.fileService)));\n\t}\n\n\tprivate updateTimelineRegistration(): void {\n\t\tif (this.configurationService.getValue<boolean>(LocalHistoryTimeline.LOCAL_HISTORY_ENABLED_SETTINGS_KEY)) {\n\t\t\tthis.timelineProviderDisposable.value = this.timelineService.registerTimelineProvider(this);\n\t\t} else {\n\t\t\tthis.timelineProviderDisposable.clear();\n\t\t}\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// History changes\n\t\tthis._register(this.workingCopyHistoryService.onDidAddEntry(e => this.onDidChangeWorkingCopyHistoryEntry(e.entry)));\n\t\tthis._register(this.workingCopyHistoryService.onDidChangeEntry(e => this.onDidChangeWorkingCopyHistoryEntry(e.entry)));\n\t\tthis._register(this.workingCopyHistoryService.onDidReplaceEntry(e => this.onDidChangeWorkingCopyHistoryEntry(e.entry)));\n\t\tthis._register(this.workingCopyHistoryService.onDidRemoveEntry(e => this.onDidChangeWorkingCopyHistoryEntry(e.entry)));\n\t\tthis._register(this.workingCopyHistoryService.onDidRemoveEntries(() => this.onDidChangeWorkingCopyHistoryEntry(undefined /* all entries */)));\n\t\tthis._register(this.workingCopyHistoryService.onDidMoveEntries(() => this.onDidChangeWorkingCopyHistoryEntry(undefined /* all entries */)));\n\n\t\t// Configuration changes\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(LocalHistoryTimeline.LOCAL_HISTORY_ENABLED_SETTINGS_KEY)) {\n\t\t\t\tthis.updateTimelineRegistration();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate onDidChangeWorkingCopyHistoryEntry(entry: IWorkingCopyHistoryEntry | undefined): void {\n\n\t\t// Re-emit as timeline change event\n\t\tthis._onDidChange.fire({\n\t\t\tid: LocalHistoryTimeline.ID,\n\t\t\turi: entry?.workingCopy.resource,\n\t\t\treset: true // there is no other way to indicate that items might have been replaced/removed\n\t\t});\n\t}\n\n\tasync provideTimeline(uri: URI, options: TimelineOptions, token: CancellationToken): Promise<Timeline> {\n\t\tconst items: TimelineItem[] = [];\n\n\t\t// Try to convert the provided `uri` into a form that is likely\n\t\t// for the provider to find entries for so that we can ensure\n\t\t// the timeline is always providing local history entries\n\n\t\tlet resource: URI | undefined = undefined;\n\t\tif (uri.scheme === LocalHistoryFileSystemProvider.SCHEMA) {\n\t\t\t// `vscode-local-history`: convert back to the associated resource\n\t\t\tresource = LocalHistoryFileSystemProvider.fromLocalHistoryFileSystem(uri).associatedResource;\n\t\t} else if (uri.scheme === this.pathService.defaultUriScheme || uri.scheme === Schemas.vscodeUserData) {\n\t\t\t// default-scheme / settings: keep as is\n\t\t\tresource = uri;\n\t\t} else if (this.fileService.hasProvider(uri)) {\n\t\t\t// anything that is backed by a file system provider:\n\t\t\t// try best to convert the URI back into a form that is\n\t\t\t// likely to match the workspace URIs. That means:\n\t\t\t// - change to the default URI scheme\n\t\t\t// - change to the remote authority or virtual workspace authority\n\t\t\t// - preserve the path\n\t\t\tresource = URI.from({\n\t\t\t\tscheme: this.pathService.defaultUriScheme,\n\t\t\t\tauthority: this.environmentService.remoteAuthority ?? getVirtualWorkspaceAuthority(this.contextService.getWorkspace()),\n\t\t\t\tpath: uri.path\n\t\t\t});\n\t\t}\n\n\t\tif (resource) {\n\n\t\t\t// Retrieve from working copy history\n\t\t\tconst entries = await this.workingCopyHistoryService.getEntries(resource, token);\n\n\t\t\t// Convert to timeline items\n\t\t\tfor (const entry of entries) {\n\t\t\t\titems.push(this.toTimelineItem(entry));\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tsource: LocalHistoryTimeline.ID,\n\t\t\titems\n\t\t};\n\t}\n\n\tprivate toTimelineItem(entry: IWorkingCopyHistoryEntry): TimelineItem {\n\t\treturn {\n\t\t\thandle: entry.id,\n\t\t\tlabel: SaveSourceRegistry.getSourceLabel(entry.source),\n\t\t\ttooltip: new MarkdownString(`$(history) ${getLocalHistoryDateFormatter().format(entry.timestamp)}\\n\\n${SaveSourceRegistry.getSourceLabel(entry.source)}`, { supportThemeIcons: true }),\n\t\t\tsource: LocalHistoryTimeline.ID,\n\t\t\ttimestamp: entry.timestamp,\n\t\t\tthemeIcon: LOCAL_HISTORY_ICON_ENTRY,\n\t\t\tcontextValue: LOCAL_HISTORY_MENU_CONTEXT_VALUE,\n\t\t\tcommand: {\n\t\t\t\tid: API_OPEN_DIFF_EDITOR_COMMAND_ID,\n\t\t\t\ttitle: COMPARE_WITH_FILE_LABEL.value,\n\t\t\t\targuments: toDiffEditorArguments(entry, entry.workingCopy.resource)\n\t\t\t}\n\t\t};\n\t}\n}\n"]}