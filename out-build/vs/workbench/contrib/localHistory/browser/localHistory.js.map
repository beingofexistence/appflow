{"version":3,"sources":["vs/workbench/contrib/localHistory/browser/localHistory.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAYhG,IAAI,yBAAyB,GAA2C,SAAS,CAAC;IAElF,SAAgB,IAAI;QACnB,IAAI,CAAC,yBAAyB,EAAE;YAC/B,MAAM,OAAO,GAA+B,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC;YAEnI,IAAI,SAA8B,CAAC;YACnC,IAAI;gBACH,SAAS,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,aAAE,EAAQ,OAAO,CAAC,CAAC;aACvD;YAAC,OAAO,KAAK,EAAE;gBACf,SAAS,GAAG,IAAI,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC,gGAAgG;aACzJ;YAED,yBAAyB,GAAG;gBAC3B,MAAM,EAAE,IAAI,CAAC,EAAE,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC;aACtC,CAAC;SACF;QAED,OAAO,yBAAyB,CAAC;IAClC,CAAC;IAjBD,oBAiBC;IAEY,QAAA,IAAI,GAA+B,mBAAmB,CAAC;IACvD,QAAA,IAAI,GAA6B,gBAAG,CAAY,MAAM,CAAC,cAAc,EAAE,YAAI,CAA6B,CAAC;IAEzG,QAAA,IAAI,GAAuB,IAAA,kBAAG,EAAU,mBAAmB,EAAE,cAAG,CAAK,aAAa,EAAE,IAAA,cAAQ,EAAC,CAAkB,EAAE,IAAsD,CAAC,CAAC,CAAC;IAC1K,QAAA,IAAI,GAAyB,IAAA,kBAAG,EAAU,sBAAsB,EAAE,cAAG,CAAK,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAqB,EAAE,IAAuD,CAAC,CAAC,CAAC","file":"localHistory.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { language } from 'vs/base/common/platform';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { registerIcon } from 'vs/platform/theme/common/iconRegistry';\n\ninterface ILocalHistoryDateFormatter {\n\tformat: (timestamp: number) => string;\n}\n\nlet localHistoryDateFormatter: ILocalHistoryDateFormatter | undefined = undefined;\n\nexport function getLocalHistoryDateFormatter(): ILocalHistoryDateFormatter {\n\tif (!localHistoryDateFormatter) {\n\t\tconst options: Intl.DateTimeFormatOptions = { year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric' };\n\n\t\tlet formatter: Intl.DateTimeFormat;\n\t\ttry {\n\t\t\tformatter = new Intl.DateTimeFormat(language, options);\n\t\t} catch (error) {\n\t\t\tformatter = new Intl.DateTimeFormat(undefined, options); // error can happen when language is invalid (https://github.com/microsoft/vscode/issues/147086)\n\t\t}\n\n\t\tlocalHistoryDateFormatter = {\n\t\t\tformat: date => formatter.format(date)\n\t\t};\n\t}\n\n\treturn localHistoryDateFormatter;\n}\n\nexport const LOCAL_HISTORY_MENU_CONTEXT_VALUE = 'localHistory:item';\nexport const LOCAL_HISTORY_MENU_CONTEXT_KEY = ContextKeyExpr.equals('timelineItem', LOCAL_HISTORY_MENU_CONTEXT_VALUE);\n\nexport const LOCAL_HISTORY_ICON_ENTRY = registerIcon('localHistory-icon', Codicon.circleOutline, localize('localHistoryIcon', \"Icon for a local history entry in the timeline view.\"));\nexport const LOCAL_HISTORY_ICON_RESTORE = registerIcon('localHistory-restore', Codicon.check, localize('localHistoryRestore', \"Icon for restoring contents of a local history entry.\"));\n"]}