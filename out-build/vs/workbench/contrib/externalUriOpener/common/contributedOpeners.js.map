{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/externalUriOpener/common/contributedOpeners.ts"],"names":[],"mappings":"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","file":"contributedOpeners.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { Memento } from 'vs/workbench/common/memento';\nimport { updateContributedOpeners } from 'vs/workbench/contrib/externalUriOpener/common/configuration';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\n\ninterface RegisteredExternalOpener {\n\treadonly extensionId: string;\n\n\tisCurrentlyRegistered: boolean;\n}\n\ninterface OpenersMemento {\n\t[id: string]: RegisteredExternalOpener;\n}\n\nexport class ContributedExternalUriOpenersStore extends Disposable {\n\n\tprivate static readonly STORAGE_ID = 'externalUriOpeners';\n\n\tprivate readonly _openers = new Map<string, RegisteredExternalOpener>();\n\tprivate readonly _memento: Memento;\n\tprivate _mementoObject: OpenersMemento;\n\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService\n\t) {\n\t\tsuper();\n\n\t\tthis._memento = new Memento(ContributedExternalUriOpenersStore.STORAGE_ID, storageService);\n\t\tthis._mementoObject = this._memento.getMemento(StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tfor (const [id, value] of Object.entries(this._mementoObject || {})) {\n\t\t\tthis.add(id, value.extensionId, { isCurrentlyRegistered: false });\n\t\t}\n\n\t\tthis.invalidateOpenersOnExtensionsChanged();\n\n\t\tthis._register(this._extensionService.onDidChangeExtensions(() => this.invalidateOpenersOnExtensionsChanged()));\n\t\tthis._register(this._extensionService.onDidChangeExtensionsStatus(() => this.invalidateOpenersOnExtensionsChanged()));\n\t}\n\n\tpublic didRegisterOpener(id: string, extensionId: string): void {\n\t\tthis.add(id, extensionId, {\n\t\t\tisCurrentlyRegistered: true\n\t\t});\n\t}\n\n\tprivate add(id: string, extensionId: string, options: { isCurrentlyRegistered: boolean }): void {\n\t\tconst existing = this._openers.get(id);\n\t\tif (existing) {\n\t\t\texisting.isCurrentlyRegistered = existing.isCurrentlyRegistered || options.isCurrentlyRegistered;\n\t\t\treturn;\n\t\t}\n\n\t\tconst entry = {\n\t\t\textensionId,\n\t\t\tisCurrentlyRegistered: options.isCurrentlyRegistered\n\t\t};\n\t\tthis._openers.set(id, entry);\n\n\t\tthis._mementoObject[id] = entry;\n\t\tthis._memento.saveMemento();\n\n\t\tthis.updateSchema();\n\t}\n\n\tpublic delete(id: string): void {\n\t\tthis._openers.delete(id);\n\n\t\tdelete this._mementoObject[id];\n\t\tthis._memento.saveMemento();\n\n\t\tthis.updateSchema();\n\t}\n\n\tprivate async invalidateOpenersOnExtensionsChanged() {\n\t\tawait this._extensionService.whenInstalledExtensionsRegistered();\n\t\tconst registeredExtensions = this._extensionService.extensions;\n\n\t\tfor (const [id, entry] of this._openers) {\n\t\t\tconst extension = registeredExtensions.find(r => r.identifier.value === entry.extensionId);\n\t\t\tif (extension) {\n\t\t\t\tif (!this._extensionService.canRemoveExtension(extension)) {\n\t\t\t\t\t// The extension is running. We should have registered openers at this point\n\t\t\t\t\tif (!entry.isCurrentlyRegistered) {\n\t\t\t\t\t\tthis.delete(id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// The opener came from an extension that is no longer enabled/installed\n\t\t\t\tthis.delete(id);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate updateSchema() {\n\t\tconst ids: string[] = [];\n\t\tconst descriptions: string[] = [];\n\n\t\tfor (const [id, entry] of this._openers) {\n\t\t\tids.push(id);\n\t\t\tdescriptions.push(entry.extensionId);\n\t\t}\n\n\t\tupdateContributedOpeners(ids, descriptions);\n\t}\n}\n"]}