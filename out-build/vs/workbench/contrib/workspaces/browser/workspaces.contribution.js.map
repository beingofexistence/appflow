{"version":3,"sources":["vs/workbench/contrib/workspaces/browser/workspaces.contribution.ts"],"names":[],"mappings":"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","file":"workspaces.contribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContributionsRegistry, IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { hasWorkspaceFileExtension, IWorkspaceContextService, WorkbenchState, WORKSPACE_SUFFIX } from 'vs/platform/workspace/common/workspace';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { INeverShowAgainOptions, INotificationService, NeverShowAgainScope, NotificationPriority, Severity } from 'vs/platform/notification/common/notification';\nimport { URI } from 'vs/base/common/uri';\nimport { isEqual, joinPath } from 'vs/base/common/resources';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { IQuickInputService, IQuickPickItem } from 'vs/platform/quickinput/common/quickInput';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { isVirtualWorkspace } from 'vs/platform/workspace/common/virtualWorkspace';\nimport { Action2, MenuId, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { ServicesAccessor } from 'vs/editor/browser/editorExtensions';\nimport { ActiveEditorContext, ResourceContextKey, TemporaryWorkspaceContext } from 'vs/workbench/common/contextkeys';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { TEXT_FILE_EDITOR_ID } from 'vs/workbench/contrib/files/common/files';\n\n/**\n * A workbench contribution that will look for `.code-workspace` files in the root of the\n * workspace folder and open a notification to suggest to open one of the workspaces.\n */\nexport class WorkspacesFinderContribution extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IStorageService private readonly storageService: IStorageService\n\t) {\n\t\tsuper();\n\n\t\tthis.findWorkspaces();\n\t}\n\n\tprivate async findWorkspaces(): Promise<void> {\n\t\tconst folder = this.contextService.getWorkspace().folders[0];\n\t\tif (!folder || this.contextService.getWorkbenchState() !== WorkbenchState.FOLDER || isVirtualWorkspace(this.contextService.getWorkspace())) {\n\t\t\treturn; // require a single (non virtual) root folder\n\t\t}\n\n\t\tconst rootFileNames = (await this.fileService.resolve(folder.uri)).children?.map(child => child.name);\n\t\tif (Array.isArray(rootFileNames)) {\n\t\t\tconst workspaceFiles = rootFileNames.filter(hasWorkspaceFileExtension);\n\t\t\tif (workspaceFiles.length > 0) {\n\t\t\t\tthis.doHandleWorkspaceFiles(folder.uri, workspaceFiles);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate doHandleWorkspaceFiles(folder: URI, workspaces: string[]): void {\n\t\tconst neverShowAgain: INeverShowAgainOptions = { id: 'workspaces.dontPromptToOpen', scope: NeverShowAgainScope.WORKSPACE, isSecondary: true };\n\n\t\t// Prompt to open one workspace\n\t\tif (workspaces.length === 1) {\n\t\t\tconst workspaceFile = workspaces[0];\n\n\t\t\tthis.notificationService.prompt(Severity.Info, localize('workspaceFound', \"This folder contains a workspace file '{0}'. Do you want to open it? [Learn more]({1}) about workspace files.\", workspaceFile, 'https://go.microsoft.com/fwlink/?linkid=2025315'), [{\n\t\t\t\tlabel: localize('openWorkspace', \"Open Workspace\"),\n\t\t\t\trun: () => this.hostService.openWindow([{ workspaceUri: joinPath(folder, workspaceFile) }])\n\t\t\t}], {\n\t\t\t\tneverShowAgain,\n\t\t\t\tpriority: !this.storageService.isNew(StorageScope.WORKSPACE) ? NotificationPriority.SILENT : undefined // https://github.com/microsoft/vscode/issues/125315\n\t\t\t});\n\t\t}\n\n\t\t// Prompt to select a workspace from many\n\t\telse if (workspaces.length > 1) {\n\t\t\tthis.notificationService.prompt(Severity.Info, localize('workspacesFound', \"This folder contains multiple workspace files. Do you want to open one? [Learn more]({0}) about workspace files.\", 'https://go.microsoft.com/fwlink/?linkid=2025315'), [{\n\t\t\t\tlabel: localize('selectWorkspace', \"Select Workspace\"),\n\t\t\t\trun: () => {\n\t\t\t\t\tthis.quickInputService.pick(\n\t\t\t\t\t\tworkspaces.map(workspace => ({ label: workspace } as IQuickPickItem)),\n\t\t\t\t\t\t{ placeHolder: localize('selectToOpen', \"Select a workspace to open\") }).then(pick => {\n\t\t\t\t\t\t\tif (pick) {\n\t\t\t\t\t\t\t\tthis.hostService.openWindow([{ workspaceUri: joinPath(folder, pick.label) }]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}], {\n\t\t\t\tneverShowAgain,\n\t\t\t\tpriority: !this.storageService.isNew(StorageScope.WORKSPACE) ? NotificationPriority.SILENT : undefined // https://github.com/microsoft/vscode/issues/125315\n\t\t\t});\n\t\t}\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(WorkspacesFinderContribution, LifecyclePhase.Eventually);\n\n// Render \"Open Workspace\" button in *.code-workspace files\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.openWorkspaceFromEditor',\n\t\t\ttitle: { original: 'Open Workspace', value: localize('openWorkspace', \"Open Workspace\") },\n\t\t\tf1: false,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.EditorContent,\n\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\tResourceContextKey.Extension.isEqualTo(WORKSPACE_SUFFIX),\n\t\t\t\t\tActiveEditorContext.isEqualTo(TEXT_FILE_EDITOR_ID),\n\t\t\t\t\tTemporaryWorkspaceContext.toNegated()\n\t\t\t\t)\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, uri: URI): Promise<void> {\n\t\tconst hostService = accessor.get(IHostService);\n\t\tconst contextService = accessor.get(IWorkspaceContextService);\n\t\tconst notificationService = accessor.get(INotificationService);\n\n\t\tif (contextService.getWorkbenchState() === WorkbenchState.WORKSPACE) {\n\t\t\tconst workspaceConfiguration = contextService.getWorkspace().configuration;\n\t\t\tif (workspaceConfiguration && isEqual(workspaceConfiguration, uri)) {\n\t\t\t\tnotificationService.info(localize('alreadyOpen', \"This workspace is already open.\"));\n\n\t\t\t\treturn; // workspace already opened\n\t\t\t}\n\t\t}\n\n\t\treturn hostService.openWindow([{ workspaceUri: uri }]);\n\t}\n});\n"]}