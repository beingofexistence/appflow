{"version":3,"sources":["vs/workbench/contrib/externalTerminal/browser/externalTerminal.contribution.ts"],"names":[],"mappings":"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","file":"externalTerminal.contribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { URI } from 'vs/base/common/uri';\nimport { MenuId, MenuRegistry, IMenuItem } from 'vs/platform/actions/common/actions';\nimport { ITerminalGroupService, ITerminalService as IIntegratedTerminalService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { ResourceContextKey } from 'vs/workbench/common/contextkeys';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IListService } from 'vs/platform/list/browser/listService';\nimport { getMultiSelectedResources, IExplorerService } from 'vs/workbench/contrib/files/browser/files';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { Schemas } from 'vs/base/common/network';\nimport { distinct } from 'vs/base/common/arrays';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { isWindows } from 'vs/base/common/platform';\nimport { dirname, basename } from 'vs/base/common/path';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IExternalTerminalConfiguration, IExternalTerminalService } from 'vs/platform/externalTerminal/common/externalTerminal';\nimport { TerminalLocation } from 'vs/platform/terminal/common/terminal';\n\nconst OPEN_IN_TERMINAL_COMMAND_ID = 'openInTerminal';\nconst OPEN_IN_INTEGRATED_TERMINAL_COMMAND_ID = 'openInIntegratedTerminal';\n\nfunction registerOpenTerminalCommand(id: string, explorerKind: 'integrated' | 'external') {\n\tCommandsRegistry.registerCommand({\n\t\tid: id,\n\t\thandler: async (accessor, resource: URI) => {\n\n\t\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\t\tconst editorService = accessor.get(IEditorService);\n\t\t\tconst fileService = accessor.get(IFileService);\n\t\t\tconst integratedTerminalService = accessor.get(IIntegratedTerminalService);\n\t\t\tconst remoteAgentService = accessor.get(IRemoteAgentService);\n\t\t\tconst terminalGroupService = accessor.get(ITerminalGroupService);\n\t\t\tlet externalTerminalService: IExternalTerminalService | undefined = undefined;\n\t\t\ttry {\n\t\t\t\texternalTerminalService = accessor.get(IExternalTerminalService);\n\t\t\t} catch {\n\t\t\t}\n\n\t\t\tconst resources = getMultiSelectedResources(resource, accessor.get(IListService), editorService, accessor.get(IExplorerService));\n\t\t\treturn fileService.resolveAll(resources.map(r => ({ resource: r }))).then(async stats => {\n\t\t\t\t// Always use integrated terminal when using a remote\n\t\t\t\tconst config = configurationService.getValue<IExternalTerminalConfiguration>();\n\n\t\t\t\tconst useIntegratedTerminal = remoteAgentService.getConnection() || explorerKind === 'integrated';\n\t\t\t\tconst targets = distinct(stats.filter(data => data.success));\n\t\t\t\tif (useIntegratedTerminal) {\n\t\t\t\t\t// TODO: Use uri for cwd in createterminal\n\t\t\t\t\tconst opened: { [path: string]: boolean } = {};\n\t\t\t\t\tconst cwds = targets.map(({ stat }) => {\n\t\t\t\t\t\tconst resource = stat!.resource;\n\t\t\t\t\t\tif (stat!.isDirectory) {\n\t\t\t\t\t\t\treturn resource;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn URI.from({\n\t\t\t\t\t\t\tscheme: resource.scheme,\n\t\t\t\t\t\t\tauthority: resource.authority,\n\t\t\t\t\t\t\tfragment: resource.fragment,\n\t\t\t\t\t\t\tquery: resource.query,\n\t\t\t\t\t\t\tpath: dirname(resource.path)\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\tfor (const cwd of cwds) {\n\t\t\t\t\t\tif (opened[cwd.path]) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\topened[cwd.path] = true;\n\t\t\t\t\t\tconst instance = await integratedTerminalService.createTerminal({ config: { cwd } });\n\t\t\t\t\t\tif (instance && instance.target !== TerminalLocation.Editor && (resources.length === 1 || !resource || cwd.path === resource.path || cwd.path === dirname(resource.path))) {\n\t\t\t\t\t\t\tintegratedTerminalService.setActiveInstance(instance);\n\t\t\t\t\t\t\tterminalGroupService.showPanel(true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (externalTerminalService) {\n\t\t\t\t\tdistinct(targets.map(({ stat }) => stat!.isDirectory ? stat!.resource.fsPath : dirname(stat!.resource.fsPath))).forEach(cwd => {\n\t\t\t\t\t\texternalTerminalService!.openTerminal(config.terminal.external, cwd);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}\n\nregisterOpenTerminalCommand(OPEN_IN_TERMINAL_COMMAND_ID, 'external');\nregisterOpenTerminalCommand(OPEN_IN_INTEGRATED_TERMINAL_COMMAND_ID, 'integrated');\n\nexport class ExternalTerminalContribution extends Disposable implements IWorkbenchContribution {\n\tprivate _openInIntegratedTerminalMenuItem: IMenuItem;\n\tprivate _openInTerminalMenuItem: IMenuItem;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tconst shouldShowIntegratedOnLocal = ContextKeyExpr.and(\n\t\t\tResourceContextKey.Scheme.isEqualTo(Schemas.file),\n\t\t\tContextKeyExpr.or(ContextKeyExpr.equals('config.terminal.explorerKind', 'integrated'), ContextKeyExpr.equals('config.terminal.explorerKind', 'both')));\n\n\n\t\tconst shouldShowExternalKindOnLocal = ContextKeyExpr.and(\n\t\t\tResourceContextKey.Scheme.isEqualTo(Schemas.file),\n\t\t\tContextKeyExpr.or(ContextKeyExpr.equals('config.terminal.explorerKind', 'external'), ContextKeyExpr.equals('config.terminal.explorerKind', 'both')));\n\n\t\tthis._openInIntegratedTerminalMenuItem = {\n\t\t\tgroup: 'navigation',\n\t\t\torder: 30,\n\t\t\tcommand: {\n\t\t\t\tid: OPEN_IN_INTEGRATED_TERMINAL_COMMAND_ID,\n\t\t\t\ttitle: nls.localize('scopedConsoleAction.Integrated', \"Open in Integrated Terminal\")\n\t\t\t},\n\t\t\twhen: ContextKeyExpr.or(shouldShowIntegratedOnLocal, ResourceContextKey.Scheme.isEqualTo(Schemas.vscodeRemote))\n\t\t};\n\n\n\t\tthis._openInTerminalMenuItem = {\n\t\t\tgroup: 'navigation',\n\t\t\torder: 31,\n\t\t\tcommand: {\n\t\t\t\tid: OPEN_IN_TERMINAL_COMMAND_ID,\n\t\t\t\ttitle: nls.localize('scopedConsoleAction.external', \"Open in External Terminal\")\n\t\t\t},\n\t\t\twhen: shouldShowExternalKindOnLocal\n\t\t};\n\n\n\t\tMenuRegistry.appendMenuItem(MenuId.ExplorerContext, this._openInTerminalMenuItem);\n\t\tMenuRegistry.appendMenuItem(MenuId.ExplorerContext, this._openInIntegratedTerminalMenuItem);\n\n\t\tthis._configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('terminal.explorerKind') || e.affectsConfiguration('terminal.external')) {\n\t\t\t\tthis._refreshOpenInTerminalMenuItemTitle();\n\t\t\t}\n\t\t});\n\n\t\tthis._refreshOpenInTerminalMenuItemTitle();\n\t}\n\n\tprivate isWindows(): boolean {\n\t\tconst config = this._configurationService.getValue<IExternalTerminalConfiguration>().terminal;\n\t\tif (isWindows && config.external?.windowsExec) {\n\t\t\tconst file = basename(config.external.windowsExec);\n\t\t\tif (file === 'wt' || file === 'wt.exe') {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _refreshOpenInTerminalMenuItemTitle(): void {\n\t\tif (this.isWindows()) {\n\t\t\tthis._openInTerminalMenuItem.command.title = nls.localize('scopedConsoleAction.wt', \"Open in Windows Terminal\");\n\t\t}\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(ExternalTerminalContribution, LifecyclePhase.Restored);\n"]}