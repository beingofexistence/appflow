{"version":3,"sources":["vs/workbench/contrib/externalTerminal/electron-sandbox/externalTerminal.contribution.ts"],"names":[],"mappings":"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","file":"externalTerminal.contribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as paths from 'vs/base/common/path';\nimport { DEFAULT_TERMINAL_OSX, IExternalTerminalSettings } from 'vs/platform/externalTerminal/common/externalTerminal';\nimport { MenuId, MenuRegistry } from 'vs/platform/actions/common/actions';\nimport { KeyMod, KeyCode } from 'vs/base/common/keyCodes';\nimport { IHistoryService } from 'vs/workbench/services/history/common/history';\nimport { KeybindingsRegistry, KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { Schemas } from 'vs/base/common/network';\nimport { IConfigurationRegistry, Extensions, ConfigurationScope } from 'vs/platform/configuration/common/configurationRegistry';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { IExternalTerminalService } from 'vs/platform/externalTerminal/electron-sandbox/externalTerminalService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TerminalContextKeys } from 'vs/workbench/contrib/terminal/common/terminalContextKey';\nimport { IRemoteAuthorityResolverService } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\n\nconst OPEN_NATIVE_CONSOLE_COMMAND_ID = 'workbench.action.terminal.openNativeConsole';\nKeybindingsRegistry.registerCommandAndKeybindingRule({\n\tid: OPEN_NATIVE_CONSOLE_COMMAND_ID,\n\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyC,\n\twhen: TerminalContextKeys.notFocus,\n\tweight: KeybindingWeight.WorkbenchContrib,\n\thandler: async (accessor) => {\n\t\tconst historyService = accessor.get(IHistoryService);\n\t\t// Open external terminal in local workspaces\n\t\tconst terminalService = accessor.get(IExternalTerminalService);\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\tconst remoteAuthorityResolverService = accessor.get(IRemoteAuthorityResolverService);\n\t\tconst root = historyService.getLastActiveWorkspaceRoot();\n\t\tconst config = configurationService.getValue<IExternalTerminalSettings>('terminal.external');\n\n\t\t// It's a local workspace, open the root\n\t\tif (root?.scheme === Schemas.file) {\n\t\t\tterminalService.openTerminal(config, root.fsPath);\n\t\t\treturn;\n\t\t}\n\n\t\t// If it's a remote workspace, open the canonical URI if it is a local folder\n\t\ttry {\n\t\t\tif (root?.scheme === Schemas.vscodeRemote) {\n\t\t\t\tconst canonicalUri = await remoteAuthorityResolverService.getCanonicalURI(root);\n\t\t\t\tif (canonicalUri.scheme === Schemas.file) {\n\t\t\t\t\tterminalService.openTerminal(config, canonicalUri.fsPath);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch { }\n\n\t\t// Open the current file's folder if it's local or its canonical URI is local\n\t\t// Opens current file's folder, if no folder is open in editor\n\t\tconst activeFile = historyService.getLastActiveFile(Schemas.file);\n\t\tif (activeFile?.scheme === Schemas.file) {\n\t\t\tterminalService.openTerminal(config, paths.dirname(activeFile.fsPath));\n\t\t\treturn;\n\t\t}\n\t\ttry {\n\t\t\tif (activeFile?.scheme === Schemas.vscodeRemote) {\n\t\t\t\tconst canonicalUri = await remoteAuthorityResolverService.getCanonicalURI(activeFile);\n\t\t\t\tif (canonicalUri.scheme === Schemas.file) {\n\t\t\t\t\tterminalService.openTerminal(config, canonicalUri.fsPath);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t} catch { }\n\n\t\t// Fallback to opening without a cwd which will end up using the local home path\n\t\tterminalService.openTerminal(config, undefined);\n\t}\n});\n\nMenuRegistry.appendMenuItem(MenuId.CommandPalette, {\n\tcommand: {\n\t\tid: OPEN_NATIVE_CONSOLE_COMMAND_ID,\n\t\ttitle: { value: nls.localize('globalConsoleAction', \"Open New External Terminal\"), original: 'Open New External Terminal' }\n\t}\n});\n\nexport class ExternalTerminalContribution implements IWorkbenchContribution {\n\n\tpublic _serviceBrand: undefined;\n\tconstructor(@IExternalTerminalService private readonly _externalTerminalService: IExternalTerminalService) {\n\t\tthis._updateConfiguration();\n\t}\n\n\tprivate async _updateConfiguration(): Promise<void> {\n\t\tconst terminals = await this._externalTerminalService.getDefaultTerminalForPlatforms();\n\t\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(Extensions.Configuration);\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\tid: 'externalTerminal',\n\t\t\torder: 100,\n\t\t\ttitle: nls.localize('terminalConfigurationTitle', \"External Terminal\"),\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\t'terminal.explorerKind': {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tenum: [\n\t\t\t\t\t\t'integrated',\n\t\t\t\t\t\t'external',\n\t\t\t\t\t\t'both'\n\t\t\t\t\t],\n\t\t\t\t\tenumDescriptions: [\n\t\t\t\t\t\tnls.localize('terminal.explorerKind.integrated', \"Use VS Code's integrated terminal.\"),\n\t\t\t\t\t\tnls.localize('terminal.explorerKind.external', \"Use the configured external terminal.\"),\n\t\t\t\t\t\tnls.localize('terminal.explorerKind.both', \"Use the other two together.\")\n\t\t\t\t\t],\n\t\t\t\t\tdescription: nls.localize('explorer.openInTerminalKind', \"When opening a file from the Explorer in a terminal, determines what kind of terminal will be launched\"),\n\t\t\t\t\tdefault: 'integrated'\n\t\t\t\t},\n\t\t\t\t'terminal.sourceControlRepositoriesKind': {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tenum: [\n\t\t\t\t\t\t'integrated',\n\t\t\t\t\t\t'external',\n\t\t\t\t\t\t'both'\n\t\t\t\t\t],\n\t\t\t\t\tenumDescriptions: [\n\t\t\t\t\t\tnls.localize('terminal.sourceControlRepositoriesKind.integrated', \"Use VS Code's integrated terminal.\"),\n\t\t\t\t\t\tnls.localize('terminal.sourceControlRepositoriesKind.external', \"Use the configured external terminal.\"),\n\t\t\t\t\t\tnls.localize('terminal.sourceControlRepositoriesKind.both', \"Use the other two together.\")\n\t\t\t\t\t],\n\t\t\t\t\tdescription: nls.localize('sourceControlRepositories.openInTerminalKind', \"When opening a repository from the Source Control Repositories view in a terminal, determines what kind of terminal will be launched\"),\n\t\t\t\t\tdefault: 'integrated'\n\t\t\t\t},\n\t\t\t\t'terminal.external.windowsExec': {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('terminal.external.windowsExec', \"Customizes which terminal to run on Windows.\"),\n\t\t\t\t\tdefault: terminals.windows,\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t\t},\n\t\t\t\t'terminal.external.osxExec': {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('terminal.external.osxExec', \"Customizes which terminal application to run on macOS.\"),\n\t\t\t\t\tdefault: DEFAULT_TERMINAL_OSX,\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t\t},\n\t\t\t\t'terminal.external.linuxExec': {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('terminal.external.linuxExec', \"Customizes which terminal to run on Linux.\"),\n\t\t\t\t\tdefault: terminals.linux,\n\t\t\t\t\tscope: ConfigurationScope.APPLICATION\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\n// Register workbench contributions\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(ExternalTerminalContribution, LifecyclePhase.Restored);\n"]}