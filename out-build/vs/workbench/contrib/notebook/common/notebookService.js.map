{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/notebook/common/notebookService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAgBnF,QAAA,IAAI,GAAe,IAAA,mBAAG,EAA+B,iBAAiB,CAAC,CAAC;IAqBrF,MAAa,IAAI;QAChB,YACU,QAAgB,EAChB,UAA+B,EAC/B,aAA2C;YAF3C,aAAQ,GAAR,QAAQ,CAAQ;YAChB,eAAU,GAAV,UAAU,CAAqB;YAC/B,kBAAa,GAAb,aAAa,CAA8B;QACjD,CAAC;KACL;IAND,oBAMC","file":"notebookService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { URI } from 'vs/base/common/uri';\nimport { NotebookProviderInfo } from 'vs/workbench/contrib/notebook/common/notebookProvider';\nimport { Event } from 'vs/base/common/event';\nimport { INotebookRendererInfo, NotebookData, TransientOptions, IOrderedMimeType, IOutputDto, INotebookContributionData, NotebookExtensionDescription, INotebookStaticPreloadInfo } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { NotebookTextModel } from 'vs/workbench/contrib/notebook/common/model/notebookTextModel';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { NotebookCellTextModel } from 'vs/workbench/contrib/notebook/common/model/notebookCellTextModel';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { ConfigurationTarget } from 'vs/platform/configuration/common/configuration';\nimport { IFileStatWithMetadata, IWriteFileOptions } from 'vs/platform/files/common/files';\n\n\nexport const INotebookService = createDecorator<INotebookService>('notebookService');\n\nexport interface INotebookContentProvider {\n\toptions: TransientOptions;\n\n\topen(uri: URI, backupId: string | VSBuffer | undefined, untitledDocumentData: VSBuffer | undefined, token: CancellationToken): Promise<{ data: NotebookData; transientOptions: TransientOptions }>;\n\tbackup(uri: URI, token: CancellationToken): Promise<string | VSBuffer>;\n}\n\nexport interface INotebookSerializer {\n\toptions: TransientOptions;\n\tdataToNotebook(data: VSBuffer): Promise<NotebookData>;\n\tnotebookToData(data: NotebookData): Promise<VSBuffer>;\n\tsave(uri: URI, versionId: number, options: IWriteFileOptions, token: CancellationToken): Promise<IFileStatWithMetadata>;\n}\n\nexport interface INotebookRawData {\n\tdata: NotebookData;\n\ttransientOptions: TransientOptions;\n}\n\nexport class SimpleNotebookProviderInfo {\n\tconstructor(\n\t\treadonly viewType: string,\n\t\treadonly serializer: INotebookSerializer,\n\t\treadonly extensionData: NotebookExtensionDescription\n\t) { }\n}\n\nexport interface INotebookService {\n\treadonly _serviceBrand: undefined;\n\tcanResolve(viewType: string): Promise<boolean>;\n\n\treadonly onAddViewType: Event<string>;\n\treadonly onWillRemoveViewType: Event<string>;\n\treadonly onDidChangeOutputRenderers: Event<void>;\n\treadonly onWillAddNotebookDocument: Event<NotebookTextModel>;\n\treadonly onDidAddNotebookDocument: Event<NotebookTextModel>;\n\n\treadonly onWillRemoveNotebookDocument: Event<NotebookTextModel>;\n\treadonly onDidRemoveNotebookDocument: Event<NotebookTextModel>;\n\n\tregisterNotebookSerializer(viewType: string, extensionData: NotebookExtensionDescription, serializer: INotebookSerializer): IDisposable;\n\twithNotebookDataProvider(viewType: string): Promise<SimpleNotebookProviderInfo>;\n\n\tgetOutputMimeTypeInfo(textModel: NotebookTextModel, kernelProvides: readonly string[] | undefined, output: IOutputDto): readonly IOrderedMimeType[];\n\n\tgetViewTypeProvider(viewType: string): string | undefined;\n\tgetRendererInfo(id: string): INotebookRendererInfo | undefined;\n\tgetRenderers(): INotebookRendererInfo[];\n\n\tgetStaticPreloads(viewType: string): Iterable<INotebookStaticPreloadInfo>;\n\n\t/** Updates the preferred renderer for the given mimetype in the workspace. */\n\tupdateMimePreferredRenderer(viewType: string, mimeType: string, rendererId: string, otherMimetypes: readonly string[]): void;\n\tsaveMimeDisplayOrder(target: ConfigurationTarget): void;\n\n\tcreateNotebookTextModel(viewType: string, uri: URI, data: NotebookData, transientOptions: TransientOptions): NotebookTextModel;\n\tgetNotebookTextModel(uri: URI): NotebookTextModel | undefined;\n\tgetNotebookTextModels(): Iterable<NotebookTextModel>;\n\tlistNotebookDocuments(): readonly NotebookTextModel[];\n\n\t/**\tRegister a notebook type that we will handle. The notebook editor will be registered for notebook types contributed by extensions */\n\tregisterContributedNotebookType(viewType: string, data: INotebookContributionData): IDisposable;\n\tgetContributedNotebookType(viewType: string): NotebookProviderInfo | undefined;\n\tgetContributedNotebookTypes(resource?: URI): readonly NotebookProviderInfo[];\n\tgetNotebookProviderResourceRoots(): URI[];\n\n\tsetToCopy(items: NotebookCellTextModel[], isCopy: boolean): void;\n\tgetToCopy(): { items: NotebookCellTextModel[]; isCopy: boolean } | undefined;\n\tclearEditorCache(): void;\n}\n"]}