{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/notebook/common/notebookRendererMessagingService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMnF,QAAA,IAAI,GAAgC,IAAA,mBAAG,EAAgD,mCAAmC,CAAC,CAAC","file":"notebookRendererMessagingService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport const INotebookRendererMessagingService = createDecorator<INotebookRendererMessagingService>('INotebookRendererMessagingService');\n\nexport interface INotebookRendererMessagingService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Event that fires when a message should be posted to extension hosts.\n\t */\n\tonShouldPostMessage: Event<{ editorId: string; rendererId: string; message: unknown }>;\n\n\t/**\n\t * Prepares messaging for the given renderer ID.\n\t */\n\tprepare(rendererId: string): void;\n\t/**\n\t * Gets messaging scoped for a specific editor.\n\t */\n\tgetScoped(editorId: string): IScopedRendererMessaging;\n\n\t/**\n\t * Called when the main thread gets a message for a renderer.\n\t */\n\treceiveMessage(editorId: string | undefined, rendererId: string, message: unknown): Promise<boolean>;\n}\n\nexport interface IScopedRendererMessaging extends IDisposable {\n\t/**\n\t * Method called when a message is received. Should return a boolean\n\t * indicating whether a renderer received it.\n\t */\n\treceiveMessageHandler?: (rendererId: string, message: unknown) => Promise<boolean>;\n\n\t/**\n\t * Sends a message to an extension from a renderer.\n\t */\n\tpostMessage(rendererId: string, message: unknown): void;\n}\n"]}