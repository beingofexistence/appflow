{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/notebook/common/model/notebookCellOutputTextModel.ts"],"names":[],"mappings":"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","file":"notebookCellOutputTextModel.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ICellOutput, IOutputDto, IOutputItemDto, compressOutputItemStreams, isTextStreamMime } from 'vs/workbench/contrib/notebook/common/notebookCommon';\n\nexport class NotebookCellOutputTextModel extends Disposable implements ICellOutput {\n\n\tprivate _onDidChangeData = this._register(new Emitter<void>());\n\tonDidChangeData = this._onDidChangeData.event;\n\n\tget outputs() {\n\t\treturn this._rawOutput.outputs || [];\n\t}\n\n\tget metadata(): Record<string, any> | undefined {\n\t\treturn this._rawOutput.metadata;\n\t}\n\n\tget outputId(): string {\n\t\treturn this._rawOutput.outputId;\n\t}\n\n\t/**\n\t * Alternative output id that's reused when the output is updated.\n\t */\n\tprivate _alternativeOutputId: string;\n\n\tget alternativeOutputId(): string {\n\t\treturn this._alternativeOutputId;\n\t}\n\n\tprivate _versionId = 0;\n\n\tget versionId() {\n\t\treturn this._versionId;\n\t}\n\n\tconstructor(\n\t\tprivate _rawOutput: IOutputDto\n\t) {\n\t\tsuper();\n\n\t\tthis._alternativeOutputId = this._rawOutput.outputId;\n\t}\n\n\treplaceData(rawData: IOutputDto) {\n\t\tthis.versionedBufferLengths = {};\n\t\tthis._rawOutput = rawData;\n\t\tthis.optimizeOutputItems();\n\t\tthis._versionId = this._versionId + 1;\n\t\tthis._onDidChangeData.fire();\n\t}\n\n\tappendData(items: IOutputItemDto[]) {\n\t\tthis.trackBufferLengths();\n\t\tthis._rawOutput.outputs.push(...items);\n\t\tthis.optimizeOutputItems();\n\t\tthis._versionId = this._versionId + 1;\n\t\tthis._onDidChangeData.fire();\n\t}\n\n\tprivate trackBufferLengths() {\n\t\tthis.outputs.forEach(output => {\n\t\t\tif (isTextStreamMime(output.mime)) {\n\t\t\t\tif (!this.versionedBufferLengths[output.mime]) {\n\t\t\t\t\tthis.versionedBufferLengths[output.mime] = {};\n\t\t\t\t}\n\t\t\t\tthis.versionedBufferLengths[output.mime][this.versionId] = output.data.byteLength;\n\t\t\t}\n\t\t});\n\t}\n\n\t// mime: versionId: buffer length\n\tprivate versionedBufferLengths: Record<string, Record<number, number>> = {};\n\n\tappendedSinceVersion(versionId: number, mime: string): VSBuffer | undefined {\n\t\tconst bufferLength = this.versionedBufferLengths[mime]?.[versionId];\n\t\tconst output = this.outputs.find(output => output.mime === mime);\n\t\tif (bufferLength && output) {\n\t\t\treturn output.data.slice(bufferLength);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate optimizeOutputItems() {\n\t\tif (this.outputs.length > 1 && this.outputs.every(item => isTextStreamMime(item.mime))) {\n\t\t\t// Look for the mimes in the items, and keep track of their order.\n\t\t\t// Merge the streams into one output item, per mime type.\n\t\t\tconst mimeOutputs = new Map<string, Uint8Array[]>();\n\t\t\tconst mimeTypes: string[] = [];\n\t\t\tthis.outputs.forEach(item => {\n\t\t\t\tlet items: Uint8Array[];\n\t\t\t\tif (mimeOutputs.has(item.mime)) {\n\t\t\t\t\titems = mimeOutputs.get(item.mime)!;\n\t\t\t\t} else {\n\t\t\t\t\titems = [];\n\t\t\t\t\tmimeOutputs.set(item.mime, items);\n\t\t\t\t\tmimeTypes.push(item.mime);\n\t\t\t\t}\n\t\t\t\titems.push(item.data.buffer);\n\t\t\t});\n\t\t\tthis.outputs.length = 0;\n\t\t\tmimeTypes.forEach(mime => {\n\t\t\t\tconst compressionResult = compressOutputItemStreams(mimeOutputs.get(mime)!);\n\t\t\t\tthis.outputs.push({\n\t\t\t\t\tmime,\n\t\t\t\t\tdata: compressionResult.data\n\t\t\t\t});\n\t\t\t\tif (compressionResult.didCompression) {\n\t\t\t\t\t// we can't rely on knowing buffer lengths if we've erased previous lines\n\t\t\t\t\tthis.versionedBufferLengths = {};\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tasDto(): IOutputDto {\n\t\treturn {\n\t\t\t// data: this._data,\n\t\t\tmetadata: this._rawOutput.metadata,\n\t\t\toutputs: this._rawOutput.outputs,\n\t\t\toutputId: this._rawOutput.outputId\n\t\t};\n\t}\n\n\tbumpVersion() {\n\t\tthis._versionId = this._versionId + 1;\n\t}\n\n}\n"]}