{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/notebook/common/notebookExecutionService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAShG,IAAY,uBAIX;IAJD,WAAY,uBAAuB;QAClC,yEAAU,CAAA;QACV,mFAAe,CAAA;QACf,yFAAkB,CAAA;IACnB,CAAC,EAJW,uBAAuB,uCAAvB,uBAAuB,QAIlC;IAgBY,QAAA,GAAG,GAAyB,IAAA,mBAAG,EAAwC,2BAA2B,CAAC,CAAC","file":"notebookExecutionService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { NotebookCellTextModel } from 'vs/workbench/contrib/notebook/common/model/notebookCellTextModel';\nimport { INotebookTextModel, IOutputDto, IOutputItemDto } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { INotebookCellExecution } from 'vs/workbench/contrib/notebook/common/notebookExecutionStateService';\n\nexport enum CellExecutionUpdateType {\n\tOutput = 1,\n\tOutputItems = 2,\n\tExecutionState = 3,\n}\n\nexport interface ICellExecuteOutputEdit {\n\teditType: CellExecutionUpdateType.Output;\n\tcellHandle: number;\n\tappend?: boolean;\n\toutputs: IOutputDto[];\n}\n\nexport interface ICellExecuteOutputItemEdit {\n\teditType: CellExecutionUpdateType.OutputItems;\n\tappend?: boolean;\n\toutputId: string;\n\titems: IOutputItemDto[];\n}\n\nexport const INotebookExecutionService = createDecorator<INotebookExecutionService>('INotebookExecutionService');\n\nexport interface INotebookExecutionService {\n\t_serviceBrand: undefined;\n\n\texecuteNotebookCells(notebook: INotebookTextModel, cells: Iterable<NotebookCellTextModel>, contextKeyService: IContextKeyService): Promise<void>;\n\tcancelNotebookCells(notebook: INotebookTextModel, cells: Iterable<NotebookCellTextModel>): Promise<void>;\n\tcancelNotebookCellHandles(notebook: INotebookTextModel, cells: Iterable<number>): Promise<void>;\n\tregisterExecutionParticipant(participant: ICellExecutionParticipant): IDisposable;\n}\n\nexport interface ICellExecutionParticipant {\n\tonWillExecuteCell(executions: INotebookCellExecution[]): Promise<void>;\n}\n"]}