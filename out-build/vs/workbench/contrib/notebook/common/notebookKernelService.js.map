{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/notebook/common/notebookKernelService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAuDhG,IAAkB,gBAIjB;IAJD,WAAkB,gBAAgB;QACjC,uEAAgB,CAAA;QAChB,iEAAa,CAAA;QACb,uEAAgB,CAAA;IACjB,CAAC,EAJiB,gBAAgB,gCAAhB,gBAAgB,QAIjC;IA+BY,QAAA,IAAI,GAAqB,IAAA,mBAAG,EAAqC,wBAAwB,CAAC,CAAC;IAiD3F,QAAA,IAAI,GAA4B,IAAA,mBAAG,EAA4C,+BAA+B,CAAC,CAAC","file":"notebookKernelService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IAction } from 'vs/base/common/actions';\nimport { Event } from 'vs/base/common/event';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { INotebookKernelSourceAction } from 'vs/workbench/contrib/notebook/common/notebookCommon';\n\nexport interface ISelectedNotebooksChangeEvent {\n\tnotebook: URI;\n\toldKernel: string | undefined;\n\tnewKernel: string | undefined;\n}\n\nexport interface INotebookKernelMatchResult {\n\treadonly selected: INotebookKernel | undefined;\n\treadonly suggestions: INotebookKernel[];\n\treadonly all: INotebookKernel[];\n\treadonly hidden: INotebookKernel[];\n}\n\n\nexport interface INotebookKernelChangeEvent {\n\tlabel?: true;\n\tdescription?: true;\n\tdetail?: true;\n\tsupportedLanguages?: true;\n\thasExecutionOrder?: true;\n\thasInterruptHandler?: true;\n}\n\nexport interface INotebookKernel {\n\treadonly id: string;\n\treadonly viewType: string;\n\treadonly onDidChange: Event<Readonly<INotebookKernelChangeEvent>>;\n\treadonly extension: ExtensionIdentifier;\n\n\treadonly localResourceRoot: URI;\n\treadonly preloadUris: URI[];\n\treadonly preloadProvides: string[];\n\n\tlabel: string;\n\tdescription?: string;\n\tdetail?: string;\n\tsupportedLanguages: string[];\n\timplementsInterrupt?: boolean;\n\timplementsExecutionOrder?: boolean;\n\n\texecuteNotebookCellsRequest(uri: URI, cellHandles: number[]): Promise<void>;\n\tcancelNotebookCellExecution(uri: URI, cellHandles: number[]): Promise<void>;\n}\n\nexport const enum ProxyKernelState {\n\tDisconnected = 1,\n\tConnected = 2,\n\tInitializing = 3\n}\n\nexport interface INotebookProxyKernelChangeEvent extends INotebookKernelChangeEvent {\n\tconnectionState?: true;\n}\n\nexport interface INotebookKernelDetectionTask {\n\treadonly notebookType: string;\n}\n\nexport interface ISourceAction {\n\treadonly action: IAction;\n\treadonly onDidChangeState: Event<void>;\n\treadonly isPrimary?: boolean;\n\texecution: Promise<void> | undefined;\n\trunAction: () => Promise<void>;\n}\n\nexport interface INotebookSourceActionChangeEvent {\n\tnotebook?: URI;\n\tviewType: string;\n}\n\nexport interface IKernelSourceActionProvider {\n\treadonly viewType: string;\n\tonDidChangeSourceActions?: Event<void>;\n\tprovideKernelSourceActions(): Promise<INotebookKernelSourceAction[]>;\n}\n\nexport interface INotebookTextModelLike { uri: URI; viewType: string }\n\nexport const INotebookKernelService = createDecorator<INotebookKernelService>('INotebookKernelService');\n\nexport interface INotebookKernelService {\n\t_serviceBrand: undefined;\n\n\treadonly onDidAddKernel: Event<INotebookKernel>;\n\treadonly onDidRemoveKernel: Event<INotebookKernel>;\n\treadonly onDidChangeSelectedNotebooks: Event<ISelectedNotebooksChangeEvent>;\n\treadonly onDidChangeNotebookAffinity: Event<void>;\n\tregisterKernel(kernel: INotebookKernel): IDisposable;\n\n\tgetMatchingKernel(notebook: INotebookTextModelLike): INotebookKernelMatchResult;\n\n\t/**\n\t * Returns the selected or only available kernel.\n\t */\n\tgetSelectedOrSuggestedKernel(notebook: INotebookTextModelLike): INotebookKernel | undefined;\n\n\t/**\n\t * Bind a notebook document to a kernel. A notebook is only bound to one kernel\n\t * but a kernel can be bound to many notebooks (depending on its configuration)\n\t */\n\tselectKernelForNotebook(kernel: INotebookKernel, notebook: INotebookTextModelLike): void;\n\n\t/**\n\t * Set the kernel that a notebook should use when it starts up\n\t */\n\tpreselectKernelForNotebook(kernel: INotebookKernel, notebook: INotebookTextModelLike): void;\n\n\t/**\n\t * Set a perference of a kernel for a certain notebook. Higher values win, `undefined` removes the preference\n\t */\n\tupdateKernelNotebookAffinity(kernel: INotebookKernel, notebook: URI, preference: number | undefined): void;\n\n\t//#region Kernel detection tasks\n\treadonly onDidChangeKernelDetectionTasks: Event<string>;\n\tregisterNotebookKernelDetectionTask(task: INotebookKernelDetectionTask): IDisposable;\n\tgetKernelDetectionTasks(notebook: INotebookTextModelLike): INotebookKernelDetectionTask[];\n\t//#endregion\n\n\t//#region Kernel source actions\n\treadonly onDidChangeSourceActions: Event<INotebookSourceActionChangeEvent>;\n\tgetSourceActions(notebook: INotebookTextModelLike, contextKeyService: IContextKeyService | undefined): ISourceAction[];\n\tgetRunningSourceActions(notebook: INotebookTextModelLike): ISourceAction[];\n\tregisterKernelSourceActionProvider(viewType: string, provider: IKernelSourceActionProvider): IDisposable;\n\tgetKernelSourceActions2(notebook: INotebookTextModelLike): Promise<INotebookKernelSourceAction[]>;\n\t//#endregion\n}\n\nexport const INotebookKernelHistoryService = createDecorator<INotebookKernelHistoryService>('INotebookKernelHistoryService');\nexport interface INotebookKernelHistoryService {\n\t_serviceBrand: undefined;\n\tgetKernels(notebook: INotebookTextModelLike): { selected: INotebookKernel | undefined; all: INotebookKernel[] };\n\taddMostRecentKernel(kernel: INotebookKernel): void;\n}\n"]}