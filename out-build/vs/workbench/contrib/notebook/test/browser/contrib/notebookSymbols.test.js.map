{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/notebook/test/browser/contrib/notebookSymbols.test.ts"],"names":[],"mappings":"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","file":"notebookSymbols.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { mock } from 'vs/base/test/common/mock';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IOutlineModelService, OutlineModel } from 'vs/editor/contrib/documentSymbols/browser/outlineModel';\nimport { ICellViewModel } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\nimport { NotebookOutlineEntryFactory } from 'vs/workbench/contrib/notebook/browser/viewModel/notebookOutlineEntryFactory';\nimport { INotebookExecutionStateService } from 'vs/workbench/contrib/notebook/common/notebookExecutionStateService';\n\nsuite('Notebook Symbols', function () {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttype textSymbol = { name: string; selectionRange: {}; children?: textSymbol[] };\n\tconst symbolsPerTextModel: Record<string, textSymbol[]> = {};\n\tfunction setSymbolsForTextModel(symbols: textSymbol[], textmodelId = 'textId') {\n\t\tsymbolsPerTextModel[textmodelId] = symbols;\n\t}\n\n\tconst executionService = new class extends mock<INotebookExecutionStateService>() {\n\t\toverride getCellExecution() { return undefined; }\n\t};\n\n\tclass OutlineModelStub {\n\t\tconstructor(private textId: string) { }\n\n\t\tgetTopLevelSymbols() {\n\t\t\treturn symbolsPerTextModel[this.textId];\n\t\t}\n\t}\n\tconst outlineModelService = new class extends mock<IOutlineModelService>() {\n\t\toverride getOrCreate(model: ITextModel, arg1: any) {\n\t\t\tconst outline = new OutlineModelStub(model.id) as unknown as OutlineModel;\n\t\t\treturn Promise.resolve(outline);\n\t\t}\n\t\toverride getDebounceValue(arg0: any) {\n\t\t\treturn 0;\n\t\t}\n\t};\n\n\tfunction createCellViewModel(version: number = 1, textmodelId = 'textId') {\n\t\treturn {\n\t\t\ttextBuffer: {\n\t\t\t\tgetLineCount() { return 0; }\n\t\t\t},\n\t\t\tgetText() {\n\t\t\t\treturn '# code';\n\t\t\t},\n\t\t\tmodel: {\n\t\t\t\ttextModel: {\n\t\t\t\t\tid: textmodelId,\n\t\t\t\t\tgetVersionId() { return version; }\n\t\t\t\t}\n\t\t\t}\n\t\t} as ICellViewModel;\n\t}\n\n\ttest('Cell without symbols cache', function () {\n\t\tsetSymbolsForTextModel([{ name: 'var', selectionRange: {} }]);\n\t\tconst entryFactory = new NotebookOutlineEntryFactory(executionService);\n\t\tconst entries = entryFactory.getOutlineEntries(createCellViewModel(), 0);\n\n\t\tassert.equal(entries.length, 1, 'no entries created');\n\t\tassert.equal(entries[0].label, '# code', 'entry should fall back to first line of cell');\n\t});\n\n\ttest('Cell with simple symbols', async function () {\n\t\tsetSymbolsForTextModel([{ name: 'var1', selectionRange: {} }, { name: 'var2', selectionRange: {} }]);\n\t\tconst entryFactory = new NotebookOutlineEntryFactory(executionService);\n\t\tconst cell = createCellViewModel();\n\n\t\tawait entryFactory.cacheSymbols(cell.model.textModel!, outlineModelService, CancellationToken.None);\n\t\tconst entries = entryFactory.getOutlineEntries(cell, 0);\n\n\t\tassert.equal(entries.length, 2, 'wrong number of outline entries');\n\t\tassert.equal(entries[0].label, 'var1');\n\t\t// 6 levels for markdown, all code symbols are greater than the max markdown level\n\t\tassert.equal(entries[0].level, 7);\n\t\tassert.equal(entries[0].index, 0);\n\t\tassert.equal(entries[1].label, 'var2');\n\t\tassert.equal(entries[1].level, 7);\n\t\tassert.equal(entries[1].index, 1);\n\t});\n\n\ttest('Cell with nested symbols', async function () {\n\t\tsetSymbolsForTextModel([\n\t\t\t{ name: 'root1', selectionRange: {}, children: [{ name: 'nested1', selectionRange: {} }, { name: 'nested2', selectionRange: {} }] },\n\t\t\t{ name: 'root2', selectionRange: {}, children: [{ name: 'nested1', selectionRange: {} }] }\n\t\t]);\n\t\tconst entryFactory = new NotebookOutlineEntryFactory(executionService);\n\t\tconst cell = createCellViewModel();\n\n\t\tawait entryFactory.cacheSymbols(cell.model.textModel!, outlineModelService, CancellationToken.None);\n\t\tconst entries = entryFactory.getOutlineEntries(createCellViewModel(), 0);\n\n\t\tassert.equal(entries.length, 5, 'wrong number of outline entries');\n\t\tassert.equal(entries[0].label, 'root1');\n\t\tassert.equal(entries[0].level, 7);\n\t\tassert.equal(entries[1].label, 'nested1');\n\t\tassert.equal(entries[1].level, 8);\n\t\tassert.equal(entries[2].label, 'nested2');\n\t\tassert.equal(entries[2].level, 8);\n\t\tassert.equal(entries[3].label, 'root2');\n\t\tassert.equal(entries[3].level, 7);\n\t\tassert.equal(entries[4].label, 'nested1');\n\t\tassert.equal(entries[4].level, 8);\n\t});\n\n\ttest('Multiple Cells with symbols', async function () {\n\t\tsetSymbolsForTextModel([{ name: 'var1', selectionRange: {} }], '$1');\n\t\tsetSymbolsForTextModel([{ name: 'var2', selectionRange: {} }], '$2');\n\t\tconst entryFactory = new NotebookOutlineEntryFactory(executionService);\n\n\t\tconst cell1 = createCellViewModel(1, '$1');\n\t\tconst cell2 = createCellViewModel(1, '$2');\n\t\tawait entryFactory.cacheSymbols(cell1.model.textModel!, outlineModelService, CancellationToken.None);\n\t\tawait entryFactory.cacheSymbols(cell2.model.textModel!, outlineModelService, CancellationToken.None);\n\n\t\tconst entries1 = entryFactory.getOutlineEntries(createCellViewModel(1, '$1'), 0);\n\t\tconst entries2 = entryFactory.getOutlineEntries(createCellViewModel(1, '$2'), 0);\n\n\n\t\tassert.equal(entries1.length, 1, 'wrong number of outline entries');\n\t\tassert.equal(entries1[0].label, 'var1');\n\t\tassert.equal(entries2.length, 1, 'wrong number of outline entries');\n\t\tassert.equal(entries2[0].label, 'var2');\n\t});\n\n});\n"]}