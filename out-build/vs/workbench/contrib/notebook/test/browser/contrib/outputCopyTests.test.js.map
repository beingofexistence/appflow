{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/notebook/test/browser/contrib/outputCopyTests.test.ts"],"names":[],"mappings":"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","file":"outputCopyTests.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ICellOutputViewModel, ICellViewModel } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\nimport { mock } from 'vs/base/test/common/mock';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport * as assert from 'assert';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { IOutputItemDto } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { copyCellOutput } from 'vs/workbench/contrib/notebook/browser/contrib/clipboard/cellOutputClipboard';\n\nsuite('Cell Output Clipboard Tests', () => {\n\n\tclass ClipboardService {\n\t\tprivate _clipboardContent = '';\n\t\tpublic get clipboardContent() {\n\t\t\treturn this._clipboardContent;\n\t\t}\n\t\tpublic async writeText(value: string) {\n\t\t\tthis._clipboardContent = value;\n\t\t}\n\t}\n\n\tconst logService = new class extends mock<ILogService>() { };\n\n\tfunction createOutputViewModel(outputs: IOutputItemDto[], cellViewModel?: ICellViewModel) {\n\t\tconst outputViewModel = { model: { outputs: outputs } } as ICellOutputViewModel;\n\n\t\tif (cellViewModel) {\n\t\t\tcellViewModel.outputsViewModels.push(outputViewModel);\n\t\t\tcellViewModel.model.outputs.push(outputViewModel.model);\n\t\t} else {\n\t\t\tcellViewModel = {\n\t\t\t\toutputsViewModels: [outputViewModel],\n\t\t\t\tmodel: { outputs: [outputViewModel.model] }\n\t\t\t} as ICellViewModel;\n\t\t}\n\n\t\toutputViewModel.cellViewModel = cellViewModel;\n\n\t\treturn outputViewModel;\n\t}\n\n\ttest('Copy text/plain output', async () => {\n\t\tconst mimeType = 'text/plain';\n\t\tconst clipboard = new ClipboardService();\n\n\t\tconst outputDto = { data: VSBuffer.fromString('output content'), mime: 'text/plain' };\n\t\tconst output = createOutputViewModel([outputDto]);\n\n\t\tawait copyCellOutput(mimeType, output, clipboard as unknown as IClipboardService, logService);\n\n\t\tassert.strictEqual(clipboard.clipboardContent, 'output content');\n\t});\n\n\ttest('Nothing copied for invalid mimetype', async () => {\n\t\tconst clipboard = new ClipboardService();\n\n\t\tconst outputDtos = [\n\t\t\t{ data: VSBuffer.fromString('output content'), mime: 'bad' },\n\t\t\t{ data: VSBuffer.fromString('output 2'), mime: 'unknown' }];\n\t\tconst output = createOutputViewModel(outputDtos);\n\n\t\tawait copyCellOutput('bad', output, clipboard as unknown as IClipboardService, logService);\n\n\t\tassert.strictEqual(clipboard.clipboardContent, '');\n\t});\n\n\ttest('Text copied if available instead of invalid mime type', async () => {\n\t\tconst clipboard = new ClipboardService();\n\n\t\tconst outputDtos = [\n\t\t\t{ data: VSBuffer.fromString('output content'), mime: 'bad' },\n\t\t\t{ data: VSBuffer.fromString('text content'), mime: 'text/plain' }];\n\t\tconst output = createOutputViewModel(outputDtos);\n\n\t\tawait copyCellOutput('bad', output, clipboard as unknown as IClipboardService, logService);\n\n\t\tassert.strictEqual(clipboard.clipboardContent, 'text content');\n\t});\n\n\ttest('Selected mimetype is preferred', async () => {\n\t\tconst clipboard = new ClipboardService();\n\n\t\tconst outputDtos = [\n\t\t\t{ data: VSBuffer.fromString('plain text'), mime: 'text/plain' },\n\t\t\t{ data: VSBuffer.fromString('html content'), mime: 'text/html' }];\n\t\tconst output = createOutputViewModel(outputDtos);\n\n\t\tawait copyCellOutput('text/html', output, clipboard as unknown as IClipboardService, logService);\n\n\t\tassert.strictEqual(clipboard.clipboardContent, 'html content');\n\t});\n\n\ttest('copy subsequent output', async () => {\n\t\tconst clipboard = new ClipboardService();\n\n\t\tconst output = createOutputViewModel([{ data: VSBuffer.fromString('first'), mime: 'text/plain' }]);\n\t\tconst output2 = createOutputViewModel([{ data: VSBuffer.fromString('second'), mime: 'text/plain' }], output.cellViewModel as ICellViewModel);\n\t\tconst output3 = createOutputViewModel([{ data: VSBuffer.fromString('third'), mime: 'text/plain' }], output.cellViewModel as ICellViewModel);\n\n\t\tawait copyCellOutput('text/plain', output2, clipboard as unknown as IClipboardService, logService);\n\n\t\tassert.strictEqual(clipboard.clipboardContent, 'second');\n\n\t\tawait copyCellOutput('text/plain', output3, clipboard as unknown as IClipboardService, logService);\n\n\t\tassert.strictEqual(clipboard.clipboardContent, 'third');\n\t});\n\n\ttest('adjacent stream outputs are concanented', async () => {\n\t\tconst clipboard = new ClipboardService();\n\n\t\tconst output = createOutputViewModel([{ data: VSBuffer.fromString('stdout'), mime: 'application/vnd.code.notebook.stdout' }]);\n\t\tcreateOutputViewModel([{ data: VSBuffer.fromString('stderr'), mime: 'application/vnd.code.notebook.stderr' }], output.cellViewModel as ICellViewModel);\n\t\tcreateOutputViewModel([{ data: VSBuffer.fromString('text content'), mime: 'text/plain' }], output.cellViewModel as ICellViewModel);\n\t\tcreateOutputViewModel([{ data: VSBuffer.fromString('non-adjacent'), mime: 'application/vnd.code.notebook.stdout' }], output.cellViewModel as ICellViewModel);\n\n\t\tawait copyCellOutput('application/vnd.code.notebook.stdout', output, clipboard as unknown as IClipboardService, logService);\n\n\t\tassert.strictEqual(clipboard.clipboardContent, 'stdoutstderr');\n\t});\n\n});\n"]}