{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/notebook/test/browser/notebookKernelHistory.test.ts"],"names":[],"mappings":"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","file":"notebookKernelHistory.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { URI } from 'vs/base/common/uri';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { setupInstantiationService, withTestNotebook as _withTestNotebook } from 'vs/workbench/contrib/notebook/test/browser/testNotebookEditor';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { INotebookKernel, INotebookKernelService } from 'vs/workbench/contrib/notebook/common/notebookKernelService';\nimport { NotebookKernelService } from 'vs/workbench/contrib/notebook/browser/services/notebookKernelServiceImpl';\nimport { INotebookService } from 'vs/workbench/contrib/notebook/common/notebookService';\nimport { mock } from 'vs/base/test/common/mock';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { NotebookTextModel } from 'vs/workbench/contrib/notebook/common/model/notebookTextModel';\nimport { PLAINTEXT_LANGUAGE_ID } from 'vs/editor/common/languages/modesRegistry';\nimport { IMenu, IMenuService } from 'vs/platform/actions/common/actions';\nimport { NotebookKernelHistoryService } from 'vs/workbench/contrib/notebook/browser/services/notebookKernelHistoryServiceImpl';\nimport { IApplicationStorageValueChangeEvent, IProfileStorageValueChangeEvent, IStorageService, IStorageValueChangeEvent, IWillSaveStateEvent, IWorkspaceStorageValueChangeEvent, StorageScope } from 'vs/platform/storage/common/storage';\nimport { INotebookLoggingService } from 'vs/workbench/contrib/notebook/common/notebookLoggingService';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nsuite('NotebookKernelHistoryService', () => {\n\n\tlet disposables: DisposableStore;\n\tlet instantiationService: TestInstantiationService;\n\tlet kernelService: INotebookKernelService;\n\n\tlet onDidAddNotebookDocument: Emitter<NotebookTextModel>;\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(function () {\n\t\tdisposables = new DisposableStore();\n\t\tonDidAddNotebookDocument = new Emitter();\n\t\tdisposables.add(onDidAddNotebookDocument);\n\n\t\tinstantiationService = setupInstantiationService(disposables);\n\t\tinstantiationService.stub(INotebookService, new class extends mock<INotebookService>() {\n\t\t\toverride onDidAddNotebookDocument = onDidAddNotebookDocument.event;\n\t\t\toverride onWillRemoveNotebookDocument = Event.None;\n\t\t\toverride getNotebookTextModels() { return []; }\n\t\t});\n\t\tinstantiationService.stub(IMenuService, new class extends mock<IMenuService>() {\n\t\t\toverride createMenu() {\n\t\t\t\treturn new class extends mock<IMenu>() {\n\t\t\t\t\toverride onDidChange = Event.None;\n\t\t\t\t\toverride getActions() { return []; }\n\t\t\t\t\toverride dispose() { }\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t\tkernelService = disposables.add(instantiationService.createInstance(NotebookKernelService));\n\t\tinstantiationService.set(INotebookKernelService, kernelService);\n\t});\n\n\ttest('notebook kernel empty history', function () {\n\n\t\tconst u1 = URI.parse('foo:///one');\n\n\t\tconst k1 = new TestNotebookKernel({ label: 'z', viewType: 'foo' });\n\t\tconst k2 = new TestNotebookKernel({ label: 'a', viewType: 'foo' });\n\n\t\tdisposables.add(kernelService.registerKernel(k1));\n\t\tdisposables.add(kernelService.registerKernel(k2));\n\n\t\tinstantiationService.stub(IStorageService, new class extends mock<IStorageService>() {\n\t\t\toverride onWillSaveState: Event<IWillSaveStateEvent> = Event.None;\n\t\t\toverride onDidChangeValue(scope: StorageScope.WORKSPACE, key: string | undefined, disposable: DisposableStore): Event<IWorkspaceStorageValueChangeEvent>;\n\t\t\toverride onDidChangeValue(scope: StorageScope.PROFILE, key: string | undefined, disposable: DisposableStore): Event<IProfileStorageValueChangeEvent>;\n\t\t\toverride onDidChangeValue(scope: StorageScope.APPLICATION, key: string | undefined, disposable: DisposableStore): Event<IApplicationStorageValueChangeEvent>;\n\t\t\toverride onDidChangeValue(scope: StorageScope, key: string | undefined, disposable: DisposableStore): Event<IStorageValueChangeEvent> {\n\t\t\t\treturn Event.None;\n\t\t\t}\n\t\t\toverride get(key: string, scope: StorageScope, fallbackValue: string): string;\n\t\t\toverride get(key: string, scope: StorageScope, fallbackValue?: string | undefined): string | undefined;\n\t\t\toverride get(key: unknown, scope: unknown, fallbackValue?: unknown): string | undefined {\n\t\t\t\tif (key === 'notebook.kernelHistory') {\n\t\t\t\t\treturn JSON.stringify({\n\t\t\t\t\t\t'foo': {\n\t\t\t\t\t\t\t'entries': []\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t});\n\n\t\tinstantiationService.stub(INotebookLoggingService, new class extends mock<INotebookLoggingService>() {\n\t\t\toverride info() { }\n\t\t\toverride debug() { }\n\t\t});\n\n\t\tconst kernelHistoryService = disposables.add(instantiationService.createInstance(NotebookKernelHistoryService));\n\n\t\tlet info = kernelHistoryService.getKernels({ uri: u1, viewType: 'foo' });\n\t\tassert.equal(info.all.length, 0);\n\t\tassert.ok(!info.selected);\n\n\t\t// update priorities for u1 notebook\n\t\tkernelService.updateKernelNotebookAffinity(k2, u1, 2);\n\n\t\tinfo = kernelHistoryService.getKernels({ uri: u1, viewType: 'foo' });\n\t\tassert.equal(info.all.length, 0);\n\t\t// MRU only auto selects kernel if there is only one\n\t\tassert.deepStrictEqual(info.selected, undefined);\n\t});\n\n\ttest('notebook kernel history restore', function () {\n\n\t\tconst u1 = URI.parse('foo:///one');\n\n\t\tconst k1 = new TestNotebookKernel({ label: 'z', viewType: 'foo' });\n\t\tconst k2 = new TestNotebookKernel({ label: 'a', viewType: 'foo' });\n\t\tconst k3 = new TestNotebookKernel({ label: 'b', viewType: 'foo' });\n\n\t\tdisposables.add(kernelService.registerKernel(k1));\n\t\tdisposables.add(kernelService.registerKernel(k2));\n\t\tdisposables.add(kernelService.registerKernel(k3));\n\n\t\tinstantiationService.stub(IStorageService, new class extends mock<IStorageService>() {\n\t\t\toverride onWillSaveState: Event<IWillSaveStateEvent> = Event.None;\n\t\t\toverride onDidChangeValue(scope: StorageScope.WORKSPACE, key: string | undefined, disposable: DisposableStore): Event<IWorkspaceStorageValueChangeEvent>;\n\t\t\toverride onDidChangeValue(scope: StorageScope.PROFILE, key: string | undefined, disposable: DisposableStore): Event<IProfileStorageValueChangeEvent>;\n\t\t\toverride onDidChangeValue(scope: StorageScope.APPLICATION, key: string | undefined, disposable: DisposableStore): Event<IApplicationStorageValueChangeEvent>;\n\t\t\toverride onDidChangeValue(scope: StorageScope, key: string | undefined, disposable: DisposableStore): Event<IStorageValueChangeEvent> {\n\t\t\t\treturn Event.None;\n\t\t\t}\n\t\t\toverride get(key: string, scope: StorageScope, fallbackValue: string): string;\n\t\t\toverride get(key: string, scope: StorageScope, fallbackValue?: string | undefined): string | undefined;\n\t\t\toverride get(key: unknown, scope: unknown, fallbackValue?: unknown): string | undefined {\n\t\t\t\tif (key === 'notebook.kernelHistory') {\n\t\t\t\t\treturn JSON.stringify({\n\t\t\t\t\t\t'foo': {\n\t\t\t\t\t\t\t'entries': [\n\t\t\t\t\t\t\t\tk2.id\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t});\n\n\t\tinstantiationService.stub(INotebookLoggingService, new class extends mock<INotebookLoggingService>() {\n\t\t\toverride info() { }\n\t\t\toverride debug() { }\n\t\t});\n\n\t\tconst kernelHistoryService = disposables.add(instantiationService.createInstance(NotebookKernelHistoryService));\n\t\tlet info = kernelHistoryService.getKernels({ uri: u1, viewType: 'foo' });\n\t\tassert.equal(info.all.length, 1);\n\t\tassert.deepStrictEqual(info.selected, undefined);\n\n\t\tkernelHistoryService.addMostRecentKernel(k3);\n\t\tinfo = kernelHistoryService.getKernels({ uri: u1, viewType: 'foo' });\n\t\tassert.deepStrictEqual(info.all, [k3, k2]);\n\t});\n});\n\nclass TestNotebookKernel implements INotebookKernel {\n\tid: string = Math.random() + 'kernel';\n\tlabel: string = 'test-label';\n\tviewType = '*';\n\tonDidChange = Event.None;\n\textension: ExtensionIdentifier = new ExtensionIdentifier('test');\n\tlocalResourceRoot: URI = URI.file('/test');\n\tdescription?: string | undefined;\n\tdetail?: string | undefined;\n\tpreloadUris: URI[] = [];\n\tpreloadProvides: string[] = [];\n\tsupportedLanguages: string[] = [];\n\texecuteNotebookCellsRequest(): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tcancelNotebookCellExecution(): Promise<void> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tconstructor(opts?: { languages?: string[]; label?: string; viewType?: string }) {\n\t\tthis.supportedLanguages = opts?.languages ?? [PLAINTEXT_LANGUAGE_ID];\n\t\tthis.label = opts?.label ?? this.label;\n\t\tthis.viewType = opts?.viewType ?? this.viewType;\n\t}\n}\n"]}