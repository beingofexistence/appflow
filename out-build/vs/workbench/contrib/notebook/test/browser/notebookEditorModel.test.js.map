{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/notebook/test/browser/notebookEditorModel.test.ts"],"names":[],"mappings":"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","file":"notebookEditorModel.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { Mimes } from 'vs/base/common/mime';\nimport { URI } from 'vs/base/common/uri';\nimport { mock } from 'vs/base/test/common/mock';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { NotebookTextModel } from 'vs/workbench/contrib/notebook/common/model/notebookTextModel';\nimport { CellKind, NotebookData, TransientOptions } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { NotebookFileWorkingCopyModel } from 'vs/workbench/contrib/notebook/common/notebookEditorModel';\nimport { INotebookSerializer, INotebookService, SimpleNotebookProviderInfo } from 'vs/workbench/contrib/notebook/common/notebookService';\nimport { setupInstantiationService } from 'vs/workbench/contrib/notebook/test/browser/testNotebookEditor';\n\nsuite('NotebookFileWorkingCopyModel', function () {\n\n\tlet disposables: DisposableStore;\n\tlet instantiationService: TestInstantiationService;\n\tconst configurationService = new TestConfigurationService();\n\n\tteardown(() => disposables.dispose());\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\tinstantiationService = setupInstantiationService(disposables);\n\t});\n\n\ttest('no transient output is send to serializer', async function () {\n\n\t\tconst notebook = instantiationService.createInstance(NotebookTextModel,\n\t\t\t'notebook',\n\t\t\tURI.file('test'),\n\t\t\t[{ cellKind: CellKind.Code, language: 'foo', mime: 'foo', source: 'foo', outputs: [{ outputId: 'id', outputs: [{ mime: Mimes.text, data: VSBuffer.fromString('Hello Out') }] }] }],\n\t\t\t{},\n\t\t\t{ transientCellMetadata: {}, transientDocumentMetadata: {}, cellContentMetadata: {}, transientOutputs: false }\n\t\t);\n\n\t\t{ // transient output\n\t\t\tlet callCount = 0;\n\t\t\tconst model = disposables.add(new NotebookFileWorkingCopyModel(\n\t\t\t\tnotebook,\n\t\t\t\tmockNotebookService(notebook,\n\t\t\t\t\tnew class extends mock<INotebookSerializer>() {\n\t\t\t\t\t\toverride options: TransientOptions = { transientOutputs: true, transientCellMetadata: {}, transientDocumentMetadata: {}, cellContentMetadata: {} };\n\t\t\t\t\t\toverride async notebookToData(notebook: NotebookData) {\n\t\t\t\t\t\t\tcallCount += 1;\n\t\t\t\t\t\t\tassert.strictEqual(notebook.cells.length, 1);\n\t\t\t\t\t\t\tassert.strictEqual(notebook.cells[0].outputs.length, 0);\n\t\t\t\t\t\t\treturn VSBuffer.fromString('');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t),\n\t\t\t\tconfigurationService\n\t\t\t));\n\n\t\t\tawait model.snapshot(CancellationToken.None);\n\t\t\tassert.strictEqual(callCount, 1);\n\t\t}\n\n\t\t{ // NOT transient output\n\t\t\tlet callCount = 0;\n\t\t\tconst model = disposables.add(new NotebookFileWorkingCopyModel(\n\t\t\t\tnotebook,\n\t\t\t\tmockNotebookService(notebook,\n\t\t\t\t\tnew class extends mock<INotebookSerializer>() {\n\t\t\t\t\t\toverride options: TransientOptions = { transientOutputs: false, transientCellMetadata: {}, transientDocumentMetadata: {}, cellContentMetadata: {} };\n\t\t\t\t\t\toverride async notebookToData(notebook: NotebookData) {\n\t\t\t\t\t\t\tcallCount += 1;\n\t\t\t\t\t\t\tassert.strictEqual(notebook.cells.length, 1);\n\t\t\t\t\t\t\tassert.strictEqual(notebook.cells[0].outputs.length, 1);\n\t\t\t\t\t\t\treturn VSBuffer.fromString('');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t),\n\t\t\t\tconfigurationService\n\t\t\t));\n\t\t\tawait model.snapshot(CancellationToken.None);\n\t\t\tassert.strictEqual(callCount, 1);\n\t\t}\n\t});\n\n\ttest('no transient metadata is send to serializer', async function () {\n\n\t\tconst notebook = instantiationService.createInstance(NotebookTextModel,\n\t\t\t'notebook',\n\t\t\tURI.file('test'),\n\t\t\t[{ cellKind: CellKind.Code, language: 'foo', mime: 'foo', source: 'foo', outputs: [] }],\n\t\t\t{ foo: 123, bar: 456 },\n\t\t\t{ transientCellMetadata: {}, transientDocumentMetadata: {}, cellContentMetadata: {}, transientOutputs: false }\n\t\t);\n\n\t\t{ // transient\n\t\t\tlet callCount = 0;\n\t\t\tconst model = new NotebookFileWorkingCopyModel(\n\t\t\t\tnotebook,\n\t\t\t\tmockNotebookService(notebook,\n\t\t\t\t\tnew class extends mock<INotebookSerializer>() {\n\t\t\t\t\t\toverride options: TransientOptions = { transientOutputs: true, transientCellMetadata: {}, transientDocumentMetadata: { bar: true }, cellContentMetadata: {} };\n\t\t\t\t\t\toverride async notebookToData(notebook: NotebookData) {\n\t\t\t\t\t\t\tcallCount += 1;\n\t\t\t\t\t\t\tassert.strictEqual(notebook.metadata.foo, 123);\n\t\t\t\t\t\t\tassert.strictEqual(notebook.metadata.bar, undefined);\n\t\t\t\t\t\t\treturn VSBuffer.fromString('');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t),\n\t\t\t\tconfigurationService\n\t\t\t);\n\n\t\t\tawait model.snapshot(CancellationToken.None);\n\t\t\tassert.strictEqual(callCount, 1);\n\t\t}\n\n\t\t{ // NOT transient\n\t\t\tlet callCount = 0;\n\t\t\tconst model = new NotebookFileWorkingCopyModel(\n\t\t\t\tnotebook,\n\t\t\t\tmockNotebookService(notebook,\n\t\t\t\t\tnew class extends mock<INotebookSerializer>() {\n\t\t\t\t\t\toverride options: TransientOptions = { transientOutputs: false, transientCellMetadata: {}, transientDocumentMetadata: {}, cellContentMetadata: {} };\n\t\t\t\t\t\toverride async notebookToData(notebook: NotebookData) {\n\t\t\t\t\t\t\tcallCount += 1;\n\t\t\t\t\t\t\tassert.strictEqual(notebook.metadata.foo, 123);\n\t\t\t\t\t\t\tassert.strictEqual(notebook.metadata.bar, 456);\n\t\t\t\t\t\t\treturn VSBuffer.fromString('');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t),\n\t\t\t\tconfigurationService\n\t\t\t);\n\t\t\tawait model.snapshot(CancellationToken.None);\n\t\t\tassert.strictEqual(callCount, 1);\n\t\t}\n\t});\n\n\ttest('no transient cell metadata is send to serializer', async function () {\n\n\t\tconst notebook = instantiationService.createInstance(NotebookTextModel,\n\t\t\t'notebook',\n\t\t\tURI.file('test'),\n\t\t\t[{ cellKind: CellKind.Code, language: 'foo', mime: 'foo', source: 'foo', outputs: [], metadata: { foo: 123, bar: 456 } }],\n\t\t\t{},\n\t\t\t{ transientCellMetadata: {}, transientDocumentMetadata: {}, cellContentMetadata: {}, transientOutputs: false, }\n\t\t);\n\n\t\t{ // transient\n\t\t\tlet callCount = 0;\n\t\t\tconst model = new NotebookFileWorkingCopyModel(\n\t\t\t\tnotebook,\n\t\t\t\tmockNotebookService(notebook,\n\t\t\t\t\tnew class extends mock<INotebookSerializer>() {\n\t\t\t\t\t\toverride options: TransientOptions = { transientOutputs: true, transientDocumentMetadata: {}, transientCellMetadata: { bar: true }, cellContentMetadata: {} };\n\t\t\t\t\t\toverride async notebookToData(notebook: NotebookData) {\n\t\t\t\t\t\t\tcallCount += 1;\n\t\t\t\t\t\t\tassert.strictEqual(notebook.cells[0].metadata!.foo, 123);\n\t\t\t\t\t\t\tassert.strictEqual(notebook.cells[0].metadata!.bar, undefined);\n\t\t\t\t\t\t\treturn VSBuffer.fromString('');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t),\n\t\t\t\tconfigurationService\n\t\t\t);\n\n\t\t\tawait model.snapshot(CancellationToken.None);\n\t\t\tassert.strictEqual(callCount, 1);\n\t\t}\n\n\t\t{ // NOT transient\n\t\t\tlet callCount = 0;\n\t\t\tconst model = new NotebookFileWorkingCopyModel(\n\t\t\t\tnotebook,\n\t\t\t\tmockNotebookService(notebook,\n\t\t\t\t\tnew class extends mock<INotebookSerializer>() {\n\t\t\t\t\t\toverride options: TransientOptions = { transientOutputs: false, transientCellMetadata: {}, transientDocumentMetadata: {}, cellContentMetadata: {} };\n\t\t\t\t\t\toverride async notebookToData(notebook: NotebookData) {\n\t\t\t\t\t\t\tcallCount += 1;\n\t\t\t\t\t\t\tassert.strictEqual(notebook.cells[0].metadata!.foo, 123);\n\t\t\t\t\t\t\tassert.strictEqual(notebook.cells[0].metadata!.bar, 456);\n\t\t\t\t\t\t\treturn VSBuffer.fromString('');\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t),\n\t\t\t\tconfigurationService\n\t\t\t);\n\t\t\tawait model.snapshot(CancellationToken.None);\n\t\t\tassert.strictEqual(callCount, 1);\n\t\t}\n\t});\n});\n\nfunction mockNotebookService(notebook: NotebookTextModel, notebookSerializer: INotebookSerializer) {\n\treturn new class extends mock<INotebookService>() {\n\t\toverride async withNotebookDataProvider(viewType: string): Promise<SimpleNotebookProviderInfo> {\n\t\t\treturn new SimpleNotebookProviderInfo(\n\t\t\t\tnotebook.viewType,\n\t\t\t\tnotebookSerializer,\n\t\t\t\t{\n\t\t\t\t\tid: new ExtensionIdentifier('test'),\n\t\t\t\t\tlocation: undefined\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t};\n}\n"]}