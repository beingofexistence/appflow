{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/notebook/test/browser/notebookBrowser.test.ts","vs/workbench/contrib/notebook/test/browser/notebookBrowser.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAOhG;;OAEG;IACH,SAAS,SAAS,CAAC,KAAuB,EAAE,QAA2C;QACtF,MAAM,MAAM,GAAiB,EAAE,CAAC;QAChC,IAAI,YAAoC,CAAC;QAEzC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,GAAG,EAAE,EAAE;YAC3B,IAAI,QAAQ,CAAC,IAAI,CAAC,EAAE;gBACnB,IAAI,CAAC,YAAY,EAAE;oBAClB,YAAY,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,EAAE,CAAC;oBAC5C,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;iBAC1B;qBAAM;oBACN,YAAY,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC;iBAC3B;aACD;iBAAM;gBACN,YAAY,GAAG,SAAS,CAAC;aACzB;QACF,CAAC,CAAC,CAAC;QAEH,OAAO,MAAM,CAAC;IACf,CAAC;IAGD,KAAK,CAAC,iBAAiB,EAAE,GAAG,EAAE;QAC7B,KAAK,CAAC,WAAW,EAAE;YAClB,MAAM,SAAS,GAAG,CAAC,IAAoB,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,KAAK,yBAAQ,CAAC,IAAI,CAAC;YAE5E,IAAI,CAAC,UAAU,EAAE;gBAChB,MAAM,KAAK,GAAG;oBACb,EAAE,QAAQ,EAAE,yBAAQ,CAAC,IAAI,EAAE;oBAC3B,EAAE,QAAQ,EAAE,yBAAQ,CAAC,IAAI,EAAE;iBAC3B,CAAC;gBACF,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,KAAyB,EAAE,SAAS,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACjG,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,WAAW,EAAE;gBACjB,MAAM,KAAK,GAAG;oBACb,EAAE,QAAQ,EAAE,yBAAQ,CAAC,MAAM,EAAE;oBAC7B,EAAE,QAAQ,EAAE,yBAAQ,CAAC,MAAM,EAAE;iBAC7B,CAAC;gBACF,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,KAAyB,EAAE,SAAS,CAAC,EAAE,EAAE,CAAC,CAAC;YAC7E,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,YAAY,EAAE;gBAClB,MAAM,KAAK,GAAG;oBACb,EAAE,QAAQ,EAAE,yBAAQ,CAAC,IAAI,EAAE;oBAC3B,EAAE,QAAQ,EAAE,yBAAQ,CAAC,MAAM,EAAE;iBAC7B,CAAC;gBACF,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,KAAyB,EAAE,SAAS,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACjG,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,QAAQ,EAAE;gBACd,MAAM,KAAK,GAAG;oBACb,EAAE,QAAQ,EAAE,yBAAQ,CAAC,IAAI,EAAE;oBAC3B,EAAE,QAAQ,EAAE,yBAAQ,CAAC,IAAI,EAAE;oBAC3B,EAAE,QAAQ,EAAE,yBAAQ,CAAC,MAAM,EAAE;oBAC7B,EAAE,QAAQ,EAAE,yBAAQ,CAAC,IAAI,EAAE;oBAC3B,EAAE,QAAQ,EAAE,yBAAQ,CAAC,MAAM,EAAE;oBAC7B,EAAE,QAAQ,EAAE,yBAAQ,CAAC,MAAM,EAAE;oBAC7B,EAAE,QAAQ,EAAE,yBAAQ,CAAC,IAAI,EAAE;iBAC3B,CAAC;gBACF,MAAM,CAAC,eAAe,CAAC,SAAS,CAAC,KAAyB,EAAE,SAAS,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YAC7I,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"notebookBrowser.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { ICellViewModel } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\nimport { CellKind } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { ICellRange } from 'vs/workbench/contrib/notebook/common/notebookRange';\n\n/**\n * Return a set of ranges for the cells matching the given predicate\n */\nfunction getRanges(cells: ICellViewModel[], included: (cell: ICellViewModel) => boolean): ICellRange[] {\n\tconst ranges: ICellRange[] = [];\n\tlet currentRange: ICellRange | undefined;\n\n\tcells.forEach((cell, idx) => {\n\t\tif (included(cell)) {\n\t\t\tif (!currentRange) {\n\t\t\t\tcurrentRange = { start: idx, end: idx + 1 };\n\t\t\t\tranges.push(currentRange);\n\t\t\t} else {\n\t\t\t\tcurrentRange.end = idx + 1;\n\t\t\t}\n\t\t} else {\n\t\t\tcurrentRange = undefined;\n\t\t}\n\t});\n\n\treturn ranges;\n}\n\n\nsuite('notebookBrowser', () => {\n\tsuite('getRanges', function () {\n\t\tconst predicate = (cell: ICellViewModel) => cell.cellKind === CellKind.Code;\n\n\t\ttest('all code', function () {\n\t\t\tconst cells = [\n\t\t\t\t{ cellKind: CellKind.Code },\n\t\t\t\t{ cellKind: CellKind.Code },\n\t\t\t];\n\t\t\tassert.deepStrictEqual(getRanges(cells as ICellViewModel[], predicate), [{ start: 0, end: 2 }]);\n\t\t});\n\n\t\ttest('none code', function () {\n\t\t\tconst cells = [\n\t\t\t\t{ cellKind: CellKind.Markup },\n\t\t\t\t{ cellKind: CellKind.Markup },\n\t\t\t];\n\t\t\tassert.deepStrictEqual(getRanges(cells as ICellViewModel[], predicate), []);\n\t\t});\n\n\t\ttest('start code', function () {\n\t\t\tconst cells = [\n\t\t\t\t{ cellKind: CellKind.Code },\n\t\t\t\t{ cellKind: CellKind.Markup },\n\t\t\t];\n\t\t\tassert.deepStrictEqual(getRanges(cells as ICellViewModel[], predicate), [{ start: 0, end: 1 }]);\n\t\t});\n\n\t\ttest('random', function () {\n\t\t\tconst cells = [\n\t\t\t\t{ cellKind: CellKind.Code },\n\t\t\t\t{ cellKind: CellKind.Code },\n\t\t\t\t{ cellKind: CellKind.Markup },\n\t\t\t\t{ cellKind: CellKind.Code },\n\t\t\t\t{ cellKind: CellKind.Markup },\n\t\t\t\t{ cellKind: CellKind.Markup },\n\t\t\t\t{ cellKind: CellKind.Code },\n\t\t\t];\n\t\t\tassert.deepStrictEqual(getRanges(cells as ICellViewModel[], predicate), [{ start: 0, end: 2 }, { start: 3, end: 4 }, { start: 6, end: 7 }]);\n\t\t});\n\t});\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { ICellViewModel } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\nimport { CellKind } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { ICellRange } from 'vs/workbench/contrib/notebook/common/notebookRange';\n\n/**\n * Return a set of ranges for the cells matching the given predicate\n */\nfunction getRanges(cells: ICellViewModel[], included: (cell: ICellViewModel) => boolean): ICellRange[] {\n\tconst ranges: ICellRange[] = [];\n\tlet currentRange: ICellRange | undefined;\n\n\tcells.forEach((cell, idx) => {\n\t\tif (included(cell)) {\n\t\t\tif (!currentRange) {\n\t\t\t\tcurrentRange = { start: idx, end: idx + 1 };\n\t\t\t\tranges.push(currentRange);\n\t\t\t} else {\n\t\t\t\tcurrentRange.end = idx + 1;\n\t\t\t}\n\t\t} else {\n\t\t\tcurrentRange = undefined;\n\t\t}\n\t});\n\n\treturn ranges;\n}\n\n\nsuite('notebookBrowser', () => {\n\tsuite('getRanges', function () {\n\t\tconst predicate = (cell: ICellViewModel) => cell.cellKind === CellKind.Code;\n\n\t\ttest('all code', function () {\n\t\t\tconst cells = [\n\t\t\t\t{ cellKind: CellKind.Code },\n\t\t\t\t{ cellKind: CellKind.Code },\n\t\t\t];\n\t\t\tassert.deepStrictEqual(getRanges(cells as ICellViewModel[], predicate), [{ start: 0, end: 2 }]);\n\t\t});\n\n\t\ttest('none code', function () {\n\t\t\tconst cells = [\n\t\t\t\t{ cellKind: CellKind.Markup },\n\t\t\t\t{ cellKind: CellKind.Markup },\n\t\t\t];\n\t\t\tassert.deepStrictEqual(getRanges(cells as ICellViewModel[], predicate), []);\n\t\t});\n\n\t\ttest('start code', function () {\n\t\t\tconst cells = [\n\t\t\t\t{ cellKind: CellKind.Code },\n\t\t\t\t{ cellKind: CellKind.Markup },\n\t\t\t];\n\t\t\tassert.deepStrictEqual(getRanges(cells as ICellViewModel[], predicate), [{ start: 0, end: 1 }]);\n\t\t});\n\n\t\ttest('random', function () {\n\t\t\tconst cells = [\n\t\t\t\t{ cellKind: CellKind.Code },\n\t\t\t\t{ cellKind: CellKind.Code },\n\t\t\t\t{ cellKind: CellKind.Markup },\n\t\t\t\t{ cellKind: CellKind.Code },\n\t\t\t\t{ cellKind: CellKind.Markup },\n\t\t\t\t{ cellKind: CellKind.Markup },\n\t\t\t\t{ cellKind: CellKind.Code },\n\t\t\t];\n\t\t\tassert.deepStrictEqual(getRanges(cells as ICellViewModel[], predicate), [{ start: 0, end: 2 }, { start: 3, end: 4 }, { start: 6, end: 7 }]);\n\t\t});\n\t});\n});\n"]}