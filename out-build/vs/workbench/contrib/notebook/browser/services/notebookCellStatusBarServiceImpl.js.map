{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/notebook/browser/services/notebookCellStatusBarServiceImpl.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAUhG,MAAa,IAA6B,SAAQ,eAAG;QAArD;;YAIkB,MAAC,GAAuB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAY,CAAC,CAAC;YACpE,yBAAoB,GAAgB,IAAI,CAAC,CAAC,CAAqB,KAAK,CAAC;YAE7D,MAAC,GAAmB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAY,CAAC,CAAC;YAChE,qBAAgB,GAAgB,IAAI,CAAC,CAAC,CAAiB,KAAK,CAAC;YAErD,MAAC,GAAkD,EAAE,CAAC;QA6BxE,CAAC;QA3BA,iCAAiC,CAAC,QAA4C;YAC7E,IAAI,CAAC,CAAC,CAAU,IAAI,CAAC,QAAQ,CAAC,CAAC;YAC/B,IAAI,cAAuC,CAAC;YAC5C,IAAI,QAAQ,CAAC,yBAAyB,EAAE;gBACvC,cAAc,GAAG,QAAQ,CAAC,yBAAyB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAiB,IAAI,EAAE,CAAC,CAAC;aACzF;YAED,IAAI,CAAC,CAAC,CAAqB,IAAI,EAAE,CAAC;YAElC,OAAO,IAAA,eAAG,EAAU,GAAG,EAAE;gBACxB,cAAc,EAAE,OAAO,EAAE,CAAC;gBAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAU,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC;gBAC3D,IAAI,CAAC,CAAC,CAAU,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;YAChC,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,KAAK,CAAC,wBAAwB,CAAC,MAAW,EAAE,SAAiB,EAAE,QAAgB,EAAE,KAAwB;YACxG,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAU,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,QAAQ,IAAI,CAAC,CAAC,QAAQ,KAAK,GAAG,CAAC,CAAC;YAC7F,OAAO,MAAM,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,EAAC,CAAC,EAAC,EAAE;gBAChD,IAAI;oBACH,OAAO,MAAM,CAAC,CAAC,yBAAyB,CAAC,MAAM,EAAE,SAAS,EAAE,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;iBACpF;gBAAC,OAAO,CAAC,EAAE;oBACX,IAAA,WAAE,EAAwB,CAAC,CAAC,CAAC;oBAC7B,OAAO,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;iBACrB;YACF,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;KACD;IAvCD,oBAuCC","file":"notebookCellStatusBarServiceImpl.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { onUnexpectedExternalError } from 'vs/base/common/errors';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { INotebookCellStatusBarService } from 'vs/workbench/contrib/notebook/common/notebookCellStatusBarService';\nimport { INotebookCellStatusBarItemList, INotebookCellStatusBarItemProvider } from 'vs/workbench/contrib/notebook/common/notebookCommon';\n\nexport class NotebookCellStatusBarService extends Disposable implements INotebookCellStatusBarService {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeProviders = this._register(new Emitter<void>());\n\treadonly onDidChangeProviders: Event<void> = this._onDidChangeProviders.event;\n\n\tprivate readonly _onDidChangeItems = this._register(new Emitter<void>());\n\treadonly onDidChangeItems: Event<void> = this._onDidChangeItems.event;\n\n\tprivate readonly _providers: INotebookCellStatusBarItemProvider[] = [];\n\n\tregisterCellStatusBarItemProvider(provider: INotebookCellStatusBarItemProvider): IDisposable {\n\t\tthis._providers.push(provider);\n\t\tlet changeListener: IDisposable | undefined;\n\t\tif (provider.onDidChangeStatusBarItems) {\n\t\t\tchangeListener = provider.onDidChangeStatusBarItems(() => this._onDidChangeItems.fire());\n\t\t}\n\n\t\tthis._onDidChangeProviders.fire();\n\n\t\treturn toDisposable(() => {\n\t\t\tchangeListener?.dispose();\n\t\t\tconst idx = this._providers.findIndex(p => p === provider);\n\t\t\tthis._providers.splice(idx, 1);\n\t\t});\n\t}\n\n\tasync getStatusBarItemsForCell(docUri: URI, cellIndex: number, viewType: string, token: CancellationToken): Promise<INotebookCellStatusBarItemList[]> {\n\t\tconst providers = this._providers.filter(p => p.viewType === viewType || p.viewType === '*');\n\t\treturn await Promise.all(providers.map(async p => {\n\t\t\ttry {\n\t\t\t\treturn await p.provideCellStatusBarItems(docUri, cellIndex, token) ?? { items: [] };\n\t\t\t} catch (e) {\n\t\t\t\tonUnexpectedExternalError(e);\n\t\t\t\treturn { items: [] };\n\t\t\t}\n\t\t}));\n\t}\n}\n"]}