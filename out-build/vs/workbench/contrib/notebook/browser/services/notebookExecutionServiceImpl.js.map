{"version":3,"sources":["vs/workbench/contrib/notebook/browser/services/notebookExecutionServiceImpl.ts"],"names":[],"mappings":"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","file":"notebookExecutionServiceImpl.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport * as nls from 'vs/nls';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IWorkspaceTrustRequestService } from 'vs/platform/workspace/common/workspaceTrust';\nimport { KernelPickerMRUStrategy } from 'vs/workbench/contrib/notebook/browser/viewParts/notebookKernelQuickPickStrategy';\nimport { NotebookCellTextModel } from 'vs/workbench/contrib/notebook/common/model/notebookCellTextModel';\nimport { CellKind, INotebookTextModel, NotebookCellExecutionState } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { INotebookExecutionService, ICellExecutionParticipant } from 'vs/workbench/contrib/notebook/common/notebookExecutionService';\nimport { INotebookCellExecution, INotebookExecutionStateService } from 'vs/workbench/contrib/notebook/common/notebookExecutionStateService';\nimport { INotebookKernelHistoryService, INotebookKernelService } from 'vs/workbench/contrib/notebook/common/notebookKernelService';\n\n\nexport class NotebookExecutionService implements INotebookExecutionService, IDisposable {\n\tdeclare _serviceBrand: undefined;\n\tprivate _activeProxyKernelExecutionToken: CancellationTokenSource | undefined;\n\n\tconstructor(\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@INotebookKernelService private readonly _notebookKernelService: INotebookKernelService,\n\t\t@INotebookKernelHistoryService private readonly _notebookKernelHistoryService: INotebookKernelHistoryService,\n\t\t@IWorkspaceTrustRequestService private readonly _workspaceTrustRequestService: IWorkspaceTrustRequestService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@INotebookExecutionStateService private readonly _notebookExecutionStateService: INotebookExecutionStateService,\n\t) {\n\t}\n\n\tasync executeNotebookCells(notebook: INotebookTextModel, cells: Iterable<NotebookCellTextModel>, contextKeyService: IContextKeyService): Promise<void> {\n\t\tconst cellsArr = Array.from(cells)\n\t\t\t.filter(c => c.cellKind === CellKind.Code);\n\t\tif (!cellsArr.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._logService.debug(`NotebookExecutionService#executeNotebookCells ${JSON.stringify(cellsArr.map(c => c.handle))}`);\n\t\tconst message = nls.localize('notebookRunTrust', \"Executing a notebook cell will run code from this workspace.\");\n\t\tconst trust = await this._workspaceTrustRequestService.requestWorkspaceTrust({ message });\n\t\tif (!trust) {\n\t\t\treturn;\n\t\t}\n\n\t\t// create cell executions\n\t\tconst cellExecutions: [NotebookCellTextModel, INotebookCellExecution][] = [];\n\t\tfor (const cell of cellsArr) {\n\t\t\tconst cellExe = this._notebookExecutionStateService.getCellExecution(cell.uri);\n\t\t\tif (!!cellExe) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcellExecutions.push([cell, this._notebookExecutionStateService.createCellExecution(notebook.uri, cell.handle)]);\n\t\t}\n\n\t\tconst kernel = await KernelPickerMRUStrategy.resolveKernel(notebook, this._notebookKernelService, this._notebookKernelHistoryService, this._commandService);\n\n\t\tif (!kernel) {\n\t\t\t// clear all pending cell executions\n\t\t\tcellExecutions.forEach(cellExe => cellExe[1].complete({}));\n\t\t\treturn;\n\t\t}\n\n\t\tthis._notebookKernelHistoryService.addMostRecentKernel(kernel);\n\n\t\t// filter cell executions based on selected kernel\n\t\tconst validCellExecutions: INotebookCellExecution[] = [];\n\t\tfor (const [cell, cellExecution] of cellExecutions) {\n\t\t\tif (!kernel.supportedLanguages.includes(cell.language)) {\n\t\t\t\tcellExecution.complete({});\n\t\t\t} else {\n\t\t\t\tvalidCellExecutions.push(cellExecution);\n\t\t\t}\n\t\t}\n\n\t\t// request execution\n\t\tif (validCellExecutions.length > 0) {\n\t\t\tawait this.runExecutionParticipants(validCellExecutions);\n\n\t\t\tthis._notebookKernelService.selectKernelForNotebook(kernel, notebook);\n\t\t\tawait kernel.executeNotebookCellsRequest(notebook.uri, validCellExecutions.map(c => c.cellHandle));\n\t\t\t// the connecting state can change before the kernel resolves executeNotebookCellsRequest\n\t\t\tconst unconfirmed = validCellExecutions.filter(exe => exe.state === NotebookCellExecutionState.Unconfirmed);\n\t\t\tif (unconfirmed.length) {\n\t\t\t\tthis._logService.debug(`NotebookExecutionService#executeNotebookCells completing unconfirmed executions ${JSON.stringify(unconfirmed.map(exe => exe.cellHandle))}`);\n\t\t\t\tunconfirmed.forEach(exe => exe.complete({}));\n\t\t\t}\n\t\t}\n\t}\n\n\tasync cancelNotebookCellHandles(notebook: INotebookTextModel, cells: Iterable<number>): Promise<void> {\n\t\tconst cellsArr = Array.from(cells);\n\t\tthis._logService.debug(`NotebookExecutionService#cancelNotebookCellHandles ${JSON.stringify(cellsArr)}`);\n\t\tconst kernel = this._notebookKernelService.getSelectedOrSuggestedKernel(notebook);\n\t\tif (kernel) {\n\t\t\tawait kernel.cancelNotebookCellExecution(notebook.uri, cellsArr);\n\n\t\t}\n\t}\n\n\tasync cancelNotebookCells(notebook: INotebookTextModel, cells: Iterable<NotebookCellTextModel>): Promise<void> {\n\t\tthis.cancelNotebookCellHandles(notebook, Array.from(cells, cell => cell.handle));\n\t}\n\n\tprivate readonly cellExecutionParticipants = new Set<ICellExecutionParticipant>;\n\n\tregisterExecutionParticipant(participant: ICellExecutionParticipant) {\n\t\tthis.cellExecutionParticipants.add(participant);\n\t\treturn toDisposable(() => this.cellExecutionParticipants.delete(participant));\n\t}\n\n\tprivate async runExecutionParticipants(executions: INotebookCellExecution[]): Promise<void> {\n\t\tfor (const participant of this.cellExecutionParticipants) {\n\t\t\tawait participant.onWillExecuteCell(executions);\n\t\t}\n\t\treturn;\n\t}\n\n\tdispose() {\n\t\tthis._activeProxyKernelExecutionToken?.dispose(true);\n\t}\n}\n"]}