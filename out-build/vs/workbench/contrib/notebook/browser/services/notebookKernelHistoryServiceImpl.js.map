{"version":3,"sources":["vs/workbench/contrib/notebook/browser/services/notebookKernelHistoryServiceImpl.ts"],"names":[],"mappings":"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","file":"notebookKernelHistoryServiceImpl.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { LinkedMap, Touch } from 'vs/base/common/map';\nimport { localize } from 'vs/nls';\nimport { Categories } from 'vs/platform/action/common/actionCommonCategories';\nimport { Action2, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { INotebookKernel, INotebookKernelHistoryService, INotebookKernelService, INotebookTextModelLike } from 'vs/workbench/contrib/notebook/common/notebookKernelService';\nimport { INotebookLoggingService } from 'vs/workbench/contrib/notebook/common/notebookLoggingService';\n\ninterface ISerializedKernelsListPerType {\n\tentries: string[];\n}\n\ninterface ISerializedKernelsList {\n\t[viewType: string]: ISerializedKernelsListPerType;\n}\n\nconst MAX_KERNELS_IN_HISTORY = 5;\n\nexport class NotebookKernelHistoryService extends Disposable implements INotebookKernelHistoryService {\n\tdeclare _serviceBrand: undefined;\n\n\tprivate static STORAGE_KEY = 'notebook.kernelHistory';\n\tprivate _mostRecentKernelsMap: { [key: string]: LinkedMap<string, string> } = {};\n\n\tconstructor(@IStorageService private readonly _storageService: IStorageService,\n\t\t@INotebookKernelService private readonly _notebookKernelService: INotebookKernelService,\n\t\t@INotebookLoggingService private readonly _notebookLoggingService: INotebookLoggingService) {\n\t\tsuper();\n\n\t\tthis._loadState();\n\t\tthis._register(this._storageService.onWillSaveState(() => this._saveState()));\n\t\tthis._register(this._storageService.onDidChangeValue(StorageScope.WORKSPACE, NotebookKernelHistoryService.STORAGE_KEY, this._register(new DisposableStore()))(() => {\n\t\t\tthis._restoreState();\n\t\t}));\n\t}\n\n\tgetKernels(notebook: INotebookTextModelLike): { selected: INotebookKernel | undefined; all: INotebookKernel[] } {\n\t\tconst allAvailableKernels = this._notebookKernelService.getMatchingKernel(notebook);\n\t\tconst allKernels = allAvailableKernels.all;\n\t\tconst selectedKernel = allAvailableKernels.selected;\n\t\t// We will suggest the only kernel\n\t\tconst suggested = allAvailableKernels.all.length === 1 ? allAvailableKernels.all[0] : undefined;\n\t\tthis._notebookLoggingService.debug('History', `getMatchingKernels: ${allAvailableKernels.all.length} kernels available for ${notebook.uri.path}. Selected: ${allAvailableKernels.selected?.label}. Suggested: ${suggested?.label}`);\n\t\tconst mostRecentKernelIds = this._mostRecentKernelsMap[notebook.viewType] ? [...this._mostRecentKernelsMap[notebook.viewType].values()] : [];\n\t\tconst all = mostRecentKernelIds.map(kernelId => allKernels.find(kernel => kernel.id === kernelId)).filter(kernel => !!kernel) as INotebookKernel[];\n\t\tthis._notebookLoggingService.debug('History', `mru: ${mostRecentKernelIds.length} kernels in history, ${all.length} registered already.`);\n\n\t\treturn {\n\t\t\tselected: selectedKernel ?? suggested,\n\t\t\tall\n\t\t};\n\t}\n\n\taddMostRecentKernel(kernel: INotebookKernel): void {\n\t\tconst key = kernel.id;\n\t\tconst viewType = kernel.viewType;\n\t\tconst recentKeynels = this._mostRecentKernelsMap[viewType] ?? new LinkedMap<string, string>();\n\n\t\trecentKeynels.set(key, key, Touch.AsOld);\n\n\n\t\tif (recentKeynels.size > MAX_KERNELS_IN_HISTORY) {\n\t\t\tconst reserved = [...recentKeynels.entries()].slice(0, MAX_KERNELS_IN_HISTORY);\n\t\t\trecentKeynels.fromJSON(reserved);\n\t\t}\n\n\t\tthis._mostRecentKernelsMap[viewType] = recentKeynels;\n\t}\n\n\tprivate _saveState(): void {\n\t\tlet notEmpty = false;\n\t\tfor (const [_, kernels] of Object.entries(this._mostRecentKernelsMap)) {\n\t\t\tnotEmpty = notEmpty || kernels.size > 0;\n\t\t}\n\n\t\tif (notEmpty) {\n\t\t\tconst serialized = this._serialize();\n\t\t\tthis._storageService.store(NotebookKernelHistoryService.STORAGE_KEY, JSON.stringify(serialized), StorageScope.WORKSPACE, StorageTarget.USER);\n\t\t} else {\n\t\t\tthis._storageService.remove(NotebookKernelHistoryService.STORAGE_KEY, StorageScope.WORKSPACE);\n\t\t}\n\t}\n\n\tprivate _restoreState(): void {\n\t\tconst serialized = this._storageService.get(NotebookKernelHistoryService.STORAGE_KEY, StorageScope.WORKSPACE);\n\t\tif (serialized) {\n\t\t\ttry {\n\t\t\t\tfor (const [viewType, kernels] of JSON.parse(serialized)) {\n\t\t\t\t\tconst linkedMap = this._mostRecentKernelsMap[viewType] ?? new LinkedMap<string, string>();\n\t\t\t\t\tfor (const entry of kernels.entries) {\n\t\t\t\t\t\tlinkedMap.set(entry, entry, Touch.AsOld);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._mostRecentKernelsMap[viewType] = linkedMap;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('Deserialize notebook kernel history failed', e);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _loadState(): void {\n\t\tconst serialized = this._storageService.get(NotebookKernelHistoryService.STORAGE_KEY, StorageScope.WORKSPACE);\n\t\tif (serialized) {\n\t\t\ttry {\n\t\t\t\tthis._deserialize(JSON.parse(serialized));\n\t\t\t} catch (e) {\n\t\t\t\tthis._mostRecentKernelsMap = {};\n\t\t\t}\n\t\t} else {\n\t\t\tthis._mostRecentKernelsMap = {};\n\t\t}\n\t}\n\n\tprivate _serialize(): ISerializedKernelsList {\n\t\tconst result: ISerializedKernelsList = Object.create(null);\n\n\t\tfor (const [viewType, kernels] of Object.entries(this._mostRecentKernelsMap)) {\n\t\t\tresult[viewType] = {\n\t\t\t\tentries: [...kernels.values()]\n\t\t\t};\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _deserialize(serialized: ISerializedKernelsList): void {\n\t\tthis._mostRecentKernelsMap = {};\n\n\t\tfor (const [viewType, kernels] of Object.entries(serialized)) {\n\t\t\tconst linkedMap = new LinkedMap<string, string>();\n\t\t\tconst mapValues: [string, string][] = [];\n\n\t\t\tfor (const entry of kernels.entries) {\n\t\t\t\tmapValues.push([entry, entry]);\n\t\t\t}\n\n\t\t\tlinkedMap.fromJSON(mapValues);\n\t\t\tthis._mostRecentKernelsMap[viewType] = linkedMap;\n\t\t}\n\t}\n\n\t_clear(): void {\n\t\tthis._mostRecentKernelsMap = {};\n\t\tthis._saveState();\n\t}\n}\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'notebook.clearNotebookKernelsMRUCache',\n\t\t\ttitle: {\n\t\t\t\tvalue: localize('workbench.notebook.clearNotebookKernelsMRUCache', \"Clear Notebook Kernels MRU Cache\"),\n\t\t\t\toriginal: 'Clear Notebook Kernels MRU Cache'\n\t\t\t},\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst historyService = accessor.get(INotebookKernelHistoryService) as NotebookKernelHistoryService;\n\t\thistoryService._clear();\n\t}\n});\n"]}