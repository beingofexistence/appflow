{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/notebook/browser/contrib/clipboard/cellOutputClipboard.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOzF,KAAK,UAAU,IAAI,CAAW,QAA4B,EAAE,eAAqC,EAAE,gBAAqB,EAAgB,UAAe;QAC7J,MAAM,UAAU,GAAG,eAAe,CAAC,KAAK,CAAC;QACzC,MAAM,MAAM,GAAG,QAAQ,IAAI,YAAI,CAAiB,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;YACnE,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC;YAC7D,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,YAAI,CAAiB,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QAE/E,QAAQ,GAAG,MAAM,EAAE,IAAI,CAAC;QAExB,IAAI,CAAC,QAAQ,IAAI,CAAC,MAAM,EAAE;YACzB,OAAO;SACP;QAED,MAAM,OAAO,GAAG,IAAI,WAAW,EAAE,CAAC;QAClC,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAE9C,2EAA2E;QAC3E,IAAI,IAAA,oBAAG,EAAc,QAAQ,CAAC,EAAE;YAC/B,MAAM,aAAa,GAAG,eAAe,CAAC,aAA+B,CAAC;YACtE,IAAI,KAAK,GAAG,aAAa,CAAC,iBAAiB,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;YACzE,OAAO,KAAK,GAAG,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,EAAE;gBAClD,MAAM,cAAc,GAAG,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBAC1D,MAAM,UAAU,GAAG,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,IAAA,oBAAG,EAAc,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;gBACxF,IAAI,CAAC,UAAU,EAAE;oBAChB,MAAM;iBACN;gBAED,IAAI,GAAG,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACrD,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC;aAClB;SACD;QAED,IAAI,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;YAC/B,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,qBAAqB,EAAE,EAAE,CAAC,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;SACvE;QAGD,IAAI;YACH,MAAM,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;SAEvC;QAAC,OAAO,CAAC,EAAE;YACX,UAAU,CAAC,KAAK,CAAC,2BAA2B,CAAC,EAAE,CAAC,CAAC;SACjD;IACF,CAAC;IA1CD,oBA0CC;IAEY,QAAA,IAAI,GAAmB;QACnC,YAAY;QACZ,WAAW;QACX,qCAAqC;QACrC,sCAAsC;QACtC,+BAA+B;QAC/B,+BAA+B;QAC/B,sCAAsC;QACtC,+BAA+B;QAC/B,YAAY;QACZ,eAAe;QACf,kBAAkB;KAClB,CAAC","file":"cellOutputClipboard.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ICellOutputViewModel, ICellViewModel } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\nimport { isTextStreamMime } from 'vs/workbench/contrib/notebook/common/notebookCommon';\n\nexport async function copyCellOutput(mimeType: string | undefined, outputViewModel: ICellOutputViewModel, clipboardService: IClipboardService, logService: ILogService) {\n\tconst cellOutput = outputViewModel.model;\n\tconst output = mimeType && TEXT_BASED_MIMETYPES.includes(mimeType) ?\n\t\tcellOutput.outputs.find(output => output.mime === mimeType) :\n\t\tcellOutput.outputs.find(output => TEXT_BASED_MIMETYPES.includes(output.mime));\n\n\tmimeType = output?.mime;\n\n\tif (!mimeType || !output) {\n\t\treturn;\n\t}\n\n\tconst decoder = new TextDecoder();\n\tlet text = decoder.decode(output.data.buffer);\n\n\t// append adjacent text streams since they are concatenated in the renderer\n\tif (isTextStreamMime(mimeType)) {\n\t\tconst cellViewModel = outputViewModel.cellViewModel as ICellViewModel;\n\t\tlet index = cellViewModel.outputsViewModels.indexOf(outputViewModel) + 1;\n\t\twhile (index < cellViewModel.model.outputs.length) {\n\t\t\tconst nextCellOutput = cellViewModel.model.outputs[index];\n\t\t\tconst nextOutput = nextCellOutput.outputs.find(output => isTextStreamMime(output.mime));\n\t\t\tif (!nextOutput) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ttext = text + decoder.decode(nextOutput.data.buffer);\n\t\t\tindex = index + 1;\n\t\t}\n\t}\n\n\tif (mimeType.endsWith('error')) {\n\t\ttext = text.replace(/\\\\u001b\\[[0-9;]*m/gi, '').replaceAll('\\\\n', '\\n');\n\t}\n\n\n\ttry {\n\t\tawait clipboardService.writeText(text);\n\n\t} catch (e) {\n\t\tlogService.error(`Failed to copy content: ${e}`);\n\t}\n}\n\nexport const TEXT_BASED_MIMETYPES = [\n\t'text/latex',\n\t'text/html',\n\t'application/vnd.code.notebook.error',\n\t'application/vnd.code.notebook.stdout',\n\t'application/x.notebook.stdout',\n\t'application/x.notebook.stream',\n\t'application/vnd.code.notebook.stderr',\n\t'application/x.notebook.stderr',\n\t'text/plain',\n\t'text/markdown',\n\t'application/json'\n];\n"]}