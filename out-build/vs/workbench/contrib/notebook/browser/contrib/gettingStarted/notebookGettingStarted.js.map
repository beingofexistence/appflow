{"version":3,"sources":["vs/workbench/contrib/notebook/browser/contrib/gettingStarted/notebookGettingStarted.ts"],"names":[],"mappings":"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","file":"notebookGettingStarted.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { localize } from 'vs/nls';\nimport { Action2, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ContextKeyExpr, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { Categories } from 'vs/platform/action/common/actionCommonCategories';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContribution, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';\nimport { Memento } from 'vs/workbench/common/memento';\nimport { HAS_OPENED_NOTEBOOK } from 'vs/workbench/contrib/notebook/common/notebookContextKeys';\nimport { NotebookSetting } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { NotebookEditorInput } from 'vs/workbench/contrib/notebook/common/notebookEditorInput';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\n\nconst hasOpenedNotebookKey = 'hasOpenedNotebook';\nconst hasShownGettingStartedKey = 'hasShownNotebookGettingStarted';\n\n/**\n * Sets a context key when a notebook has ever been opened by the user\n */\nexport class NotebookGettingStarted extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IEditorService _editorService: IEditorService,\n\t\t@IStorageService _storageService: IStorageService,\n\t\t@IContextKeyService _contextKeyService: IContextKeyService,\n\t\t@ICommandService _commandService: ICommandService,\n\t\t@IConfigurationService _configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\n\t\tconst hasOpenedNotebook = HAS_OPENED_NOTEBOOK.bindTo(_contextKeyService);\n\t\tconst memento = new Memento('notebookGettingStarted2', _storageService);\n\t\tconst storedValue = memento.getMemento(StorageScope.PROFILE, StorageTarget.USER);\n\t\tif (storedValue[hasOpenedNotebookKey]) {\n\t\t\thasOpenedNotebook.set(true);\n\t\t}\n\n\t\tconst needToShowGettingStarted = _configurationService.getValue(NotebookSetting.openGettingStarted) && !storedValue[hasShownGettingStartedKey];\n\t\tif (!storedValue[hasOpenedNotebookKey] || needToShowGettingStarted) {\n\t\t\tconst onDidOpenNotebook = () => {\n\t\t\t\thasOpenedNotebook.set(true);\n\t\t\t\tstoredValue[hasOpenedNotebookKey] = true;\n\n\t\t\t\tif (needToShowGettingStarted) {\n\t\t\t\t\t_commandService.executeCommand('workbench.action.openWalkthrough', { category: 'notebooks', step: 'notebookProfile' }, true);\n\t\t\t\t\tstoredValue[hasShownGettingStartedKey] = true;\n\t\t\t\t}\n\n\t\t\t\tmemento.saveMemento();\n\t\t\t};\n\n\t\t\tif (_editorService.activeEditor?.typeId === NotebookEditorInput.ID) {\n\t\t\t\t// active editor is notebook\n\t\t\t\tonDidOpenNotebook();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst listener = this._register(_editorService.onDidActiveEditorChange(() => {\n\t\t\t\tif (_editorService.activeEditor?.typeId === NotebookEditorInput.ID) {\n\t\t\t\t\tlistener.dispose();\n\t\t\t\t\tonDidOpenNotebook();\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(NotebookGettingStarted, LifecyclePhase.Restored);\n\nregisterAction2(class NotebookClearNotebookLayoutAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.notebook.layout.gettingStarted',\n\t\t\ttitle: {\n\t\t\t\tvalue: localize('workbench.notebook.layout.gettingStarted.label', \"Reset notebook getting started\"),\n\t\t\t\toriginal: 'Reset notebook getting started'\n\t\t\t},\n\t\t\tf1: true,\n\t\t\tprecondition: ContextKeyExpr.equals(`config.${NotebookSetting.openGettingStarted}`, true),\n\t\t\tcategory: Categories.Developer,\n\t\t});\n\t}\n\trun(accessor: ServicesAccessor): void {\n\t\tconst storageService = accessor.get(IStorageService);\n\t\tconst memento = new Memento('notebookGettingStarted', storageService);\n\n\t\tconst storedValue = memento.getMemento(StorageScope.PROFILE, StorageTarget.USER);\n\t\tstoredValue[hasOpenedNotebookKey] = undefined;\n\t\tmemento.saveMemento();\n\t}\n});\n"]}