{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/notebook/browser/contrib/debug/notebookBreakpoints.ts"],"names":[],"mappings":"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","file":"notebookBreakpoints.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { ResourceMap } from 'vs/base/common/map';\nimport { Schemas } from 'vs/base/common/network';\nimport { isEqual } from 'vs/base/common/resources';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContribution, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';\nimport { IBreakpoint, IDebugService } from 'vs/workbench/contrib/debug/common/debug';\nimport { getNotebookEditorFromEditorPane } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\nimport { NotebookTextModel } from 'vs/workbench/contrib/notebook/common/model/notebookTextModel';\nimport { CellUri, NotebookCellsChangeType } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { INotebookService } from 'vs/workbench/contrib/notebook/common/notebookService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\n\nclass NotebookBreakpoints extends Disposable implements IWorkbenchContribution {\n\tconstructor(\n\t\t@IDebugService private readonly _debugService: IDebugService,\n\t\t@INotebookService _notebookService: INotebookService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t) {\n\t\tsuper();\n\n\t\tconst listeners = new ResourceMap<IDisposable>();\n\t\tthis._register(_notebookService.onWillAddNotebookDocument(model => {\n\t\t\tlisteners.set(model.uri, model.onWillAddRemoveCells(e => {\n\t\t\t\t// When deleting a cell, remove its breakpoints\n\t\t\t\tconst debugModel = this._debugService.getModel();\n\t\t\t\tif (!debugModel.getBreakpoints().length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (e.rawEvent.kind !== NotebookCellsChangeType.ModelChange) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const change of e.rawEvent.changes) {\n\t\t\t\t\tconst [start, deleteCount] = change;\n\t\t\t\t\tif (deleteCount > 0) {\n\t\t\t\t\t\tconst deleted = model.cells.slice(start, start + deleteCount);\n\t\t\t\t\t\tfor (const deletedCell of deleted) {\n\t\t\t\t\t\t\tconst cellBps = debugModel.getBreakpoints({ uri: deletedCell.uri });\n\t\t\t\t\t\t\tcellBps.forEach(cellBp => this._debugService.removeBreakpoints(cellBp.getId()));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t}));\n\n\t\tthis._register(_notebookService.onWillRemoveNotebookDocument(model => {\n\t\t\tthis.updateBreakpoints(model);\n\t\t\tlisteners.get(model.uri)?.dispose();\n\t\t\tlisteners.delete(model.uri);\n\t\t}));\n\n\t\tthis._register(this._debugService.getModel().onDidChangeBreakpoints(e => {\n\t\t\tconst newCellBp = e?.added?.find(bp => 'uri' in bp && bp.uri.scheme === Schemas.vscodeNotebookCell) as IBreakpoint | undefined;\n\t\t\tif (newCellBp) {\n\t\t\t\tconst parsed = CellUri.parse(newCellBp.uri);\n\t\t\t\tif (!parsed) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst editor = getNotebookEditorFromEditorPane(this._editorService.activeEditorPane);\n\t\t\t\tif (!editor || !editor.hasModel() || editor.textModel.uri.toString() !== parsed.notebook.toString()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\n\t\t\t\tconst cell = editor.getCellByHandle(parsed.handle);\n\t\t\t\tif (!cell) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\teditor.focusElement(cell);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate updateBreakpoints(model: NotebookTextModel): void {\n\t\tconst bps = this._debugService.getModel().getBreakpoints();\n\t\tif (!bps.length || !model.cells.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst idxMap = new ResourceMap<number>();\n\t\tmodel.cells.forEach((cell, i) => {\n\t\t\tidxMap.set(cell.uri, i);\n\t\t});\n\n\t\tbps.forEach(bp => {\n\t\t\tconst idx = idxMap.get(bp.uri);\n\t\t\tif (typeof idx !== 'number') {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst notebook = CellUri.parse(bp.uri)?.notebook;\n\t\t\tif (!notebook) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst newUri = CellUri.generate(notebook, idx);\n\t\t\tif (isEqual(newUri, bp.uri)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._debugService.removeBreakpoints(bp.getId());\n\t\t\tthis._debugService.addBreakpoints(newUri, [\n\t\t\t\t{\n\t\t\t\t\tcolumn: bp.column,\n\t\t\t\t\tcondition: bp.condition,\n\t\t\t\t\tenabled: bp.enabled,\n\t\t\t\t\thitCondition: bp.hitCondition,\n\t\t\t\t\tlogMessage: bp.logMessage,\n\t\t\t\t\tlineNumber: bp.lineNumber\n\t\t\t\t}\n\t\t\t]);\n\t\t});\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(NotebookBreakpoints, LifecyclePhase.Restored);\n"]}