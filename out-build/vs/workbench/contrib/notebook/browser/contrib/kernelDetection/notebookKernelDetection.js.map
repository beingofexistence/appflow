{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/notebook/browser/contrib/kernelDetection/notebookKernelDetection.ts"],"names":[],"mappings":"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","file":"notebookKernelDetection.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nimport { Disposable, DisposableStore, IDisposable } from 'vs/base/common/lifecycle';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { INotebookKernelService } from 'vs/workbench/contrib/notebook/common/notebookKernelService';\nimport { INotebookLoggingService } from 'vs/workbench/contrib/notebook/common/notebookLoggingService';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\n\nclass NotebookKernelDetection extends Disposable implements IWorkbenchContribution {\n\tprivate _detectionMap = new Map<string, IDisposable>();\n\tprivate _localDisposableStore = this._register(new DisposableStore());\n\n\tconstructor(\n\t\t@INotebookKernelService private readonly _notebookKernelService: INotebookKernelService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@INotebookLoggingService private readonly _notebookLoggingService: INotebookLoggingService\n\t) {\n\t\tsuper();\n\n\t\tthis._registerListeners();\n\t}\n\n\tprivate _registerListeners() {\n\t\tthis._localDisposableStore.clear();\n\n\t\tthis._localDisposableStore.add(this._extensionService.onWillActivateByEvent(e => {\n\t\t\tif (e.event.startsWith('onNotebook:')) {\n\t\t\t\tif (this._extensionService.activationEventIsDone(e.event)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// parse the event to get the notebook type\n\t\t\t\tconst notebookType = e.event.substring('onNotebook:'.length);\n\n\t\t\t\tif (notebookType === '*') {\n\t\t\t\t\t// ignore\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlet shouldStartDetection = false;\n\n\t\t\t\tconst extensionStatus = this._extensionService.getExtensionsStatus();\n\t\t\t\tthis._extensionService.extensions.forEach(extension => {\n\t\t\t\t\tif (extensionStatus[extension.identifier.value].activationTimes) {\n\t\t\t\t\t\t// already activated\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (extension.activationEvents?.includes(e.event)) {\n\t\t\t\t\t\tshouldStartDetection = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (shouldStartDetection && !this._detectionMap.has(notebookType)) {\n\t\t\t\t\tthis._notebookLoggingService.debug('KernelDetection', `start extension activation for ${notebookType}`);\n\t\t\t\t\tconst task = this._notebookKernelService.registerNotebookKernelDetectionTask({\n\t\t\t\t\t\tnotebookType: notebookType\n\t\t\t\t\t});\n\n\t\t\t\t\tthis._detectionMap.set(notebookType, task);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tlet timer: any = null;\n\n\t\tthis._localDisposableStore.add(this._extensionService.onDidChangeExtensionsStatus(() => {\n\t\t\tif (timer) {\n\t\t\t\tclearTimeout(timer);\n\t\t\t}\n\n\t\t\t// activation state might not be updated yet, postpone to next frame\n\t\t\ttimer = setTimeout(() => {\n\t\t\t\tconst taskToDelete: string[] = [];\n\t\t\t\tfor (const [notebookType, task] of this._detectionMap) {\n\t\t\t\t\tif (this._extensionService.activationEventIsDone(`onNotebook:${notebookType}`)) {\n\t\t\t\t\t\tthis._notebookLoggingService.debug('KernelDetection', `finish extension activation for ${notebookType}`);\n\t\t\t\t\t\ttaskToDelete.push(notebookType);\n\t\t\t\t\t\ttask.dispose();\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttaskToDelete.forEach(notebookType => {\n\t\t\t\t\tthis._detectionMap.delete(notebookType);\n\t\t\t\t});\n\t\t\t});\n\t\t}));\n\n\t\tthis._localDisposableStore.add({\n\t\t\tdispose: () => {\n\t\t\t\tif (timer) {\n\t\t\t\t\tclearTimeout(timer);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(NotebookKernelDetection, LifecyclePhase.Restored);\n"]}