{"version":3,"sources":["vs/workbench/contrib/notebook/browser/contrib/find/notebookFind.ts"],"names":[],"mappings":"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","file":"notebookFind.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/notebookFind';\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { Schemas } from 'vs/base/common/network';\nimport { isEqual } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { FindStartFocusAction, getSelectionSearchString, IFindStartOptions, StartFindAction, StartFindReplaceAction } from 'vs/editor/contrib/find/browser/findController';\nimport { localize } from 'vs/nls';\nimport { Action2, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { IShowNotebookFindWidgetOptions, NotebookFindContrib } from 'vs/workbench/contrib/notebook/browser/contrib/find/notebookFindWidget';\nimport { getNotebookEditorFromEditorPane } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\nimport { registerNotebookContribution } from 'vs/workbench/contrib/notebook/browser/notebookEditorExtensions';\nimport { CellUri } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { INTERACTIVE_WINDOW_IS_ACTIVE_EDITOR, KEYBINDING_CONTEXT_NOTEBOOK_FIND_WIDGET_FOCUSED, NOTEBOOK_EDITOR_FOCUSED, NOTEBOOK_IS_ACTIVE_EDITOR } from 'vs/workbench/contrib/notebook/common/notebookContextKeys';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { EditorOption } from 'vs/editor/common/config/editorOptions';\n\nregisterNotebookContribution(NotebookFindContrib.id, NotebookFindContrib);\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'notebook.hideFind',\n\t\t\ttitle: { value: localize('notebookActions.hideFind', \"Hide Find in Notebook\"), original: 'Hide Find in Notebook' },\n\t\t\tkeybinding: {\n\t\t\t\twhen: ContextKeyExpr.and(NOTEBOOK_EDITOR_FOCUSED, KEYBINDING_CONTEXT_NOTEBOOK_FIND_WIDGET_FOCUSED),\n\t\t\t\tprimary: KeyCode.Escape,\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst editor = getNotebookEditorFromEditorPane(editorService.activeEditorPane);\n\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst controller = editor.getContribution<NotebookFindContrib>(NotebookFindContrib.id);\n\t\tcontroller.hide();\n\t\teditor.focus();\n\t}\n});\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'notebook.find',\n\t\t\ttitle: { value: localize('notebookActions.findInNotebook', \"Find in Notebook\"), original: 'Find in Notebook' },\n\t\t\tkeybinding: {\n\t\t\t\twhen: ContextKeyExpr.and(NOTEBOOK_EDITOR_FOCUSED, ContextKeyExpr.or(NOTEBOOK_IS_ACTIVE_EDITOR, INTERACTIVE_WINDOW_IS_ACTIVE_EDITOR), EditorContextKeys.focus.toNegated()),\n\t\t\t\tprimary: KeyCode.KeyF | KeyMod.CtrlCmd,\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst editor = getNotebookEditorFromEditorPane(editorService.activeEditorPane);\n\n\t\tif (!editor) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst controller = editor.getContribution<NotebookFindContrib>(NotebookFindContrib.id);\n\t\tcontroller.show();\n\t}\n});\n\nfunction notebookContainsTextModel(uri: URI, textModel: ITextModel) {\n\tif (textModel.uri.scheme === Schemas.vscodeNotebookCell) {\n\t\tconst cellUri = CellUri.parse(textModel.uri);\n\t\tif (cellUri && isEqual(cellUri.notebook, uri)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nfunction getSearchStringOptions(editor: ICodeEditor, opts: IFindStartOptions) {\n\t// Get the search string result, following the same logic in _start function in 'vs/editor/contrib/find/browser/findController'\n\tif (opts.seedSearchStringFromSelection === 'single') {\n\t\tconst selectionSearchString = getSelectionSearchString(editor, opts.seedSearchStringFromSelection, opts.seedSearchStringFromNonEmptySelection);\n\t\tif (selectionSearchString) {\n\t\t\treturn {\n\t\t\t\tsearchString: selectionSearchString,\n\t\t\t\tselection: editor.getSelection()\n\t\t\t};\n\t\t}\n\t} else if (opts.seedSearchStringFromSelection === 'multiple' && !opts.updateSearchScope) {\n\t\tconst selectionSearchString = getSelectionSearchString(editor, opts.seedSearchStringFromSelection);\n\t\tif (selectionSearchString) {\n\t\t\treturn {\n\t\t\t\tsearchString: selectionSearchString,\n\t\t\t\tselection: editor.getSelection()\n\t\t\t};\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\n\nStartFindAction.addImplementation(100, (accessor: ServicesAccessor, codeEditor: ICodeEditor, args: any) => {\n\tconst editorService = accessor.get(IEditorService);\n\tconst editor = getNotebookEditorFromEditorPane(editorService.activeEditorPane);\n\n\tif (!editor) {\n\t\treturn false;\n\t}\n\n\tif (!codeEditor.hasModel()) {\n\t\treturn false;\n\t}\n\n\tif (!editor.hasEditorFocus() && !editor.hasWebviewFocus()) {\n\t\tconst codeEditorService = accessor.get(ICodeEditorService);\n\t\t// check if the active pane contains the active text editor\n\t\tconst textEditor = codeEditorService.getFocusedCodeEditor() || codeEditorService.getActiveCodeEditor();\n\t\tif (editor.hasModel() && textEditor && textEditor.hasModel() && notebookContainsTextModel(editor.textModel.uri, textEditor.getModel())) {\n\t\t\t// the active text editor is in notebook editor\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tconst controller = editor.getContribution<NotebookFindContrib>(NotebookFindContrib.id);\n\n\tconst searchStringOptions = getSearchStringOptions(codeEditor, {\n\t\tforceRevealReplace: false,\n\t\tseedSearchStringFromSelection: codeEditor.getOption(EditorOption.find).seedSearchStringFromSelection !== 'never' ? 'single' : 'none',\n\t\tseedSearchStringFromNonEmptySelection: codeEditor.getOption(EditorOption.find).seedSearchStringFromSelection === 'selection',\n\t\tseedSearchStringFromGlobalClipboard: codeEditor.getOption(EditorOption.find).globalFindClipboard,\n\t\tshouldFocus: FindStartFocusAction.FocusFindInput,\n\t\tshouldAnimate: true,\n\t\tupdateSearchScope: false,\n\t\tloop: codeEditor.getOption(EditorOption.find).loop\n\t});\n\n\tlet options: IShowNotebookFindWidgetOptions | undefined = undefined;\n\tconst uri = codeEditor.getModel().uri;\n\tconst data = CellUri.parse(uri);\n\tif (searchStringOptions?.selection && data) {\n\t\tconst cell = editor.getCellByHandle(data.handle);\n\t\tif (cell) {\n\t\t\toptions = {\n\t\t\t\tsearchStringSeededFrom: { cell, range: searchStringOptions.selection },\n\t\t\t};\n\t\t}\n\t}\n\n\tcontroller.show(searchStringOptions?.searchString, options);\n\treturn true;\n});\n\nStartFindReplaceAction.addImplementation(100, (accessor: ServicesAccessor, codeEditor: ICodeEditor, args: any) => {\n\tconst editorService = accessor.get(IEditorService);\n\tconst editor = getNotebookEditorFromEditorPane(editorService.activeEditorPane);\n\n\tif (!editor) {\n\t\treturn false;\n\t}\n\n\tif (!codeEditor.hasModel()) {\n\t\treturn false;\n\t}\n\n\tconst controller = editor.getContribution<NotebookFindContrib>(NotebookFindContrib.id);\n\n\tconst searchStringOptions = getSearchStringOptions(codeEditor, {\n\t\tforceRevealReplace: false,\n\t\tseedSearchStringFromSelection: codeEditor.getOption(EditorOption.find).seedSearchStringFromSelection !== 'never' ? 'single' : 'none',\n\t\tseedSearchStringFromNonEmptySelection: codeEditor.getOption(EditorOption.find).seedSearchStringFromSelection === 'selection',\n\t\tseedSearchStringFromGlobalClipboard: codeEditor.getOption(EditorOption.find).globalFindClipboard,\n\t\tshouldFocus: FindStartFocusAction.FocusFindInput,\n\t\tshouldAnimate: true,\n\t\tupdateSearchScope: false,\n\t\tloop: codeEditor.getOption(EditorOption.find).loop\n\t});\n\n\tif (controller) {\n\t\tcontroller.replace(searchStringOptions?.searchString);\n\t\treturn true;\n\t}\n\n\treturn false;\n});\n\n"]}