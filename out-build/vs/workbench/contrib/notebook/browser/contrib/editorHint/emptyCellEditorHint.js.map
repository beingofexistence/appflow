{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/notebook/browser/contrib/editorHint/emptyCellEditorHint.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAiBzF,IAAM,IAAI,GAAV,MAAM,IAAgC,SAAQ,0BAAI;iBACjC,eAAU,GAAG,6CAAH,AAAgD,CAAC;QAClF,YACC,MAAmB,EACc,CAAmB,EAC9B,mBAAwB,EAC7B,cAAmB,EACb,oBAAyB,EAC5B,iBAAsB,EACf,wBAA8B,EACrC,iBAAsB,EACvB,gBAAqB,EACvB,cAAmB;YAEpC,KAAK,CACJ,MAAM,EACN,mBAAmB,EACnB,cAAc,EACd,oBAAoB,EACpB,iBAAiB,EACjB,wBAAwB,EACxB,iBAAiB,EACjB,gBAAgB,EAChB,cAAc,CACd,CAAC;YApB+B,MAAC,GAAD,CAAC,CAAkB;YAsBpD,MAAM,YAAY,GAAG,IAAA,sBAAI,EAA4B,IAAI,CAAC,CAAC,CAAc,gBAAgB,CAAC,CAAC;YAE3F,IAAI,CAAC,YAAY,EAAE;gBAClB,OAAO;aACP;YAED,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,YAAY,CAAC,qBAAqB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,EAAO,CAAC,CAAC,CAAC;QAC9E,CAAC;QAEkB,CAAC;YACnB,MAAM,gBAAgB,GAAG,KAAK,CAAC,CAAC,EAAkB,CAAC;YACnD,IAAI,CAAC,gBAAgB,EAAE;gBACtB,OAAO,KAAK,CAAC;aACb;YAED,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAM,QAAQ,EAAE,CAAC;YACrC,IAAI,CAAC,KAAK,EAAE;gBACX,OAAO,KAAK,CAAC;aACb;YAED,MAAM,cAAc,GAAG,KAAK,EAAE,GAAG,CAAC,MAAM,KAAK,iBAAO,CAAC,kBAAkB,CAAC;YACxE,IAAI,CAAC,cAAc,EAAE;gBACpB,OAAO,KAAK,CAAC;aACb;YAED,MAAM,YAAY,GAAG,IAAA,sBAAI,EAA4B,IAAI,CAAC,CAAC,CAAc,gBAAgB,CAAC,CAAC;YAC3F,IAAI,CAAC,YAAY,EAAE;gBAClB,OAAO,KAAK,CAAC;aACb;YAED,MAAM,UAAU,GAAG,YAAY,CAAC,aAAa,EAAE,CAAC;YAEhD,IAAI,UAAU,EAAE,GAAG,CAAC,QAAQ,KAAK,KAAK,CAAC,GAAG,CAAC,QAAQ,EAAE;gBACpD,OAAO,KAAK,CAAC;aACb;YAED,OAAO,IAAI,CAAC;QACb,CAAC;;IA/DW,oBAAI;mBAAJ,IAAI;QAId,WAAA,mBAAG,CAAA;QACH,WAAA,yBAAG,CAAA;QACH,WAAA,cAAG,CAAA;QACH,WAAA,mBAAG,CAAA;QACH,WAAA,gBAAG,CAAA;QACH,WAAA,wBAAI,CAAA;QACJ,WAAA,gBAAG,CAAA;QACH,WAAA,eAAG,CAAA;QACH,WAAA,oBAAG,CAAA;OAZO,IAAI,CAgEhB;IAED,IAAA,sBAAG,EAAwB,IAAI,CAA4B,UAAU,EAAE,IAAI,gDAAmE,CAAC,CAAC,kDAAkD","file":"emptyCellEditorHint.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from 'vs/base/common/network';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorContributionInstantiation, registerEditorContribution } from 'vs/editor/browser/editorExtensions';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { EmptyTextEditorHintContribution } from 'vs/workbench/contrib/codeEditor/browser/emptyTextEditorHint/emptyTextEditorHint';\nimport { IInlineChatSessionService } from 'vs/workbench/contrib/inlineChat/browser/inlineChatSession';\nimport { IInlineChatService } from 'vs/workbench/contrib/inlineChat/common/inlineChat';\nimport { getNotebookEditorFromEditorPane } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\n\nexport class EmptyCellEditorHintContribution extends EmptyTextEditorHintContribution {\n\tpublic static readonly CONTRIB_ID = 'notebook.editor.contrib.emptyCellEditorHint';\n\tconstructor(\n\t\teditor: ICodeEditor,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IEditorGroupsService editorGroupsService: IEditorGroupsService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IInlineChatSessionService inlineChatSessionService: IInlineChatSessionService,\n\t\t@IInlineChatService inlineChatService: IInlineChatService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IProductService productService: IProductService\n\t) {\n\t\tsuper(\n\t\t\teditor,\n\t\t\teditorGroupsService,\n\t\t\tcommandService,\n\t\t\tconfigurationService,\n\t\t\tkeybindingService,\n\t\t\tinlineChatSessionService,\n\t\t\tinlineChatService,\n\t\t\ttelemetryService,\n\t\t\tproductService\n\t\t);\n\n\t\tconst activeEditor = getNotebookEditorFromEditorPane(this._editorService.activeEditorPane);\n\n\t\tif (!activeEditor) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.toDispose.push(activeEditor.onDidChangeActiveCell(() => this.update()));\n\t}\n\n\tprotected override _shouldRenderHint(): boolean {\n\t\tconst shouldRenderHint = super._shouldRenderHint();\n\t\tif (!shouldRenderHint) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst model = this.editor.getModel();\n\t\tif (!model) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst isNotebookCell = model?.uri.scheme === Schemas.vscodeNotebookCell;\n\t\tif (!isNotebookCell) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst activeEditor = getNotebookEditorFromEditorPane(this._editorService.activeEditorPane);\n\t\tif (!activeEditor) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst activeCell = activeEditor.getActiveCell();\n\n\t\tif (activeCell?.uri.fragment !== model.uri.fragment) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\nregisterEditorContribution(EmptyCellEditorHintContribution.CONTRIB_ID, EmptyCellEditorHintContribution, EditorContributionInstantiation.Eager); // eager because it needs to render a help message\n"]}