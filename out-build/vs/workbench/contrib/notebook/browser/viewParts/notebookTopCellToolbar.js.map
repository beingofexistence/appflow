{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/notebook/browser/viewParts/notebookTopCellToolbar.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAazF,IAAM,IAAI,GAAV,MAAM,IAAmB,SAAQ,eAAG;QAI1C,YACoB,CAAuC,EAE1D,iBAAsB,EACtB,2BAAwC,EACjB,CAA4C,EAC9C,CAA0C,EACjD,CAAmC;YAEjD,KAAK,EAAE,CAAC;YARW,MAAC,GAAD,CAAC,CAAsC;YAIhB,MAAC,GAAD,CAAC,CAAwB;YAC3B,MAAC,GAAD,CAAC,CAAsB;YAC9B,MAAC,GAAD,CAAC,CAAe;YARjC,MAAC,GAAmB,IAAI,CAAC,CAAC,CAAS,IAAI,eAAG,EAAc,CAAC,CAAC;YAY1E,IAAI,CAAC,CAAC,GAAgB,GAAG,CAAC,GAAG,CAAI,2BAA2B,EAAE,GAAG,CAAC,CAAC,CAAC,uCAAuC,CAAC,CAAC,CAAC;YAE9G,IAAI,CAAC,CAAC,GAAS,IAAI,CAAC,CAAC,CAAS,CAAC,CAAoB,cAAc,CAAC,aAAG,EAAmB,IAAI,CAAC,CAAC,EAAe,IAAI,CAAC,CAAC,CAAc,eAAe,CAAC,OAAO,CAAC,oBAAoB,EAAE;gBAC9K,sBAAsB,EAAE,MAAM,CAAC,EAAE;oBAChC,IAAI,MAAM,YAAY,aAAG,EAAa;wBACrC,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAoB,cAAc,CAAC,qBAAI,EAAmB,MAAM,EAAE,SAAS,CAAC,CAAC;wBAChG,OAAO,IAAI,CAAC;qBACZ;oBAED,OAAO,SAAS,CAAC;gBAClB,CAAC;gBACD,WAAW,EAAE;oBACZ,iBAAiB,EAAE,IAAI;iBACvB;gBACD,cAAc,EAAE;oBACf,YAAY,EAAE,CAAC,CAAS,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;iBAC9C;gBACD,kBAAkB,mCAA2B;aAC7C,CAAC,CAAC,CAAC;YAEJ,IAAI,CAAC,CAAC,CAAO,OAAO,GAA2B;gBAC9C,cAAc,EAAE,CAAC;aACjB,CAAC;YAEF,yDAAyD;YACzD,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAc,gBAAgB,CAAC,GAAG,EAAE;gBACxD,IAAI,CAAC,CAAC,CAAiB,KAAK,EAAE,CAAC;gBAE/B,IAAI,IAAI,CAAC,CAAC,CAAc,QAAQ,EAAE,EAAE;oBACnC,IAAI,CAAC,CAAC,CAAiB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAc,oBAAoB,CAAC,GAAG,EAAE;wBACxE,IAAI,CAAC,CAAC,EAAY,CAAC;oBACpB,CAAC,CAAC,CAAC,CAAC;oBAEJ,IAAI,CAAC,CAAC,EAAY,CAAC;iBACnB;YACF,CAAC,CAAC,CAAC,CAAC;YAEJ,IAAI,CAAC,CAAC,EAAY,CAAC;QACpB,CAAC;QAEO,CAAC;YACR,IAAI,IAAI,CAAC,CAAC,CAAc,QAAQ,EAAE,IAAI,IAAI,CAAC,CAAC,CAAc,SAAS,EAAE,KAAK,CAAC,EAAE;gBAC5E,IAAI,CAAC,CAAC,CAAc,SAAS,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;aACnD;iBAAM;gBACN,IAAI,CAAC,CAAC,CAAc,SAAS,CAAC,MAAM,CAAC,eAAe,CAAC,CAAC;aACtD;QACF,CAAC;KACD,CAAA;IA9DY,oBAAI;mBAAJ,IAAI;QASd,WAAA,mBAAG,CAAA;QACH,WAAA,iBAAG,CAAA;QACH,WAAA,aAAG,CAAA;OAXO,IAAI,CA8DhB","file":"notebookTopCellToolbar.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as DOM from 'vs/base/browser/dom';\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { HiddenItemStrategy, MenuWorkbenchToolBar } from 'vs/platform/actions/browser/toolbar';\nimport { IMenuService, MenuItemAction } from 'vs/platform/actions/common/actions';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { INotebookActionContext } from 'vs/workbench/contrib/notebook/browser/controller/coreActions';\nimport { INotebookEditorDelegate } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\nimport { CodiconActionViewItem } from 'vs/workbench/contrib/notebook/browser/view/cellParts/cellActionView';\n\nexport class ListTopCellToolbar extends Disposable {\n\tprivate topCellToolbar: HTMLElement;\n\tprivate toolbar: MenuWorkbenchToolBar;\n\tprivate readonly _modelDisposables = this._register(new DisposableStore());\n\tconstructor(\n\t\tprotected readonly notebookEditor: INotebookEditorDelegate,\n\n\t\tcontextKeyService: IContextKeyService,\n\t\tinsertionIndicatorContainer: HTMLElement,\n\t\t@IInstantiationService protected readonly instantiationService: IInstantiationService,\n\t\t@IContextMenuService protected readonly contextMenuService: IContextMenuService,\n\t\t@IMenuService protected readonly menuService: IMenuService\n\t) {\n\t\tsuper();\n\n\t\tthis.topCellToolbar = DOM.append(insertionIndicatorContainer, DOM.$('.cell-list-top-cell-toolbar-container'));\n\n\t\tthis.toolbar = this._register(instantiationService.createInstance(MenuWorkbenchToolBar, this.topCellToolbar, this.notebookEditor.creationOptions.menuIds.cellTopInsertToolbar, {\n\t\t\tactionViewItemProvider: action => {\n\t\t\t\tif (action instanceof MenuItemAction) {\n\t\t\t\t\tconst item = this.instantiationService.createInstance(CodiconActionViewItem, action, undefined);\n\t\t\t\t\treturn item;\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tmenuOptions: {\n\t\t\t\tshouldForwardArgs: true\n\t\t\t},\n\t\t\ttoolbarOptions: {\n\t\t\t\tprimaryGroup: (g: string) => /^inline/.test(g),\n\t\t\t},\n\t\t\thiddenItemStrategy: HiddenItemStrategy.Ignore,\n\t\t}));\n\n\t\tthis.toolbar.context = <INotebookActionContext>{\n\t\t\tnotebookEditor\n\t\t};\n\n\t\t// update toolbar container css based on cell list length\n\t\tthis._register(this.notebookEditor.onDidChangeModel(() => {\n\t\t\tthis._modelDisposables.clear();\n\n\t\t\tif (this.notebookEditor.hasModel()) {\n\t\t\t\tthis._modelDisposables.add(this.notebookEditor.onDidChangeViewCells(() => {\n\t\t\t\t\tthis.updateClass();\n\t\t\t\t}));\n\n\t\t\t\tthis.updateClass();\n\t\t\t}\n\t\t}));\n\n\t\tthis.updateClass();\n\t}\n\n\tprivate updateClass() {\n\t\tif (this.notebookEditor.hasModel() && this.notebookEditor.getLength() === 0) {\n\t\t\tthis.topCellToolbar.classList.add('emptyNotebook');\n\t\t} else {\n\t\t\tthis.topCellToolbar.classList.remove('emptyNotebook');\n\t\t}\n\t}\n}\n"]}