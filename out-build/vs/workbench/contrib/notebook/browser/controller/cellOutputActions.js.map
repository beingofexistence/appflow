{"version":3,"sources":["vs/workbench/contrib/notebook/browser/controller/cellOutputActions.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAgBnF,QAAA,IAAI,GAAqB,0BAA0B,CAAC;IAEjE,IAAA,aAAG,EAAa,MAAM,oBAAqB,SAAQ,aAAG;QACrD;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,YAAI;gBACR,KAAK,EAAE,IAAA,cAAQ,EAAC,CAA4B,EAAE,IAAa,CAAC;gBAC5D,IAAI,EAAE;oBACL,EAAE,EAAE,aAAG,CAAI,qBAAqB;oBAChC,IAAI,EAAE,0BAAI;iBACV;gBACD,QAAQ,EAAE,kBAAI;gBACd,IAAI,EAAE,KAAK,CAAC,IAAI;aAChB,CAAC,CAAC;QACJ,CAAC;QAED,KAAK,CAAC,GAAG,CAAC,QAA0B,EAAE,aAAuF;YAC5H,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,mBAAG,CAAY,CAAC;YACnD,MAAM,cAAc,GAAG,IAAA,sBAAI,EAA4B,aAAa,CAAC,gBAAgB,CAAC,CAAC;YAEvF,IAAI,CAAC,cAAc,EAAE;gBACpB,OAAO;aACP;YAED,IAAI,eAAiD,CAAC;YACtD,IAAI,UAAU,IAAI,aAAa,IAAI,OAAO,aAAa,CAAC,QAAQ,KAAK,QAAQ,EAAE;gBAC9E,eAAe,GAAG,wBAAwB,CAAC,aAAa,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC;aACnF;iBAAM;gBACN,eAAe,GAAG,aAAa,CAAC,eAAe,CAAC;aAChD;YAED,IAAI,CAAC,eAAe,EAAE;gBACrB,OAAO;aACP;YAED,MAAM,QAAQ,GAAG,eAAe,CAAC,cAAc,EAAE,QAAQ,CAAC;YAE1D,IAAI,QAAQ,EAAE,UAAU,CAAC,QAAQ,CAAC,EAAE;gBACnC,MAAM,YAAY,GAAG,EAAE,UAAU,EAAE,IAAI,EAAE,QAAQ,EAAE,eAAe,CAAC,KAAK,CAAC,QAAQ,EAAE,WAAW,EAAE,eAAe,CAAC,KAAK,CAAC,mBAAmB,EAAE,CAAC;gBAC5I,MAAM,cAAc,CAAC,iBAAiB,CAAC,eAAe,CAAC,aAA+B,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;gBAChH,cAAc,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;aAChD;iBAAM;gBACN,MAAM,gBAAgB,GAAG,QAAQ,CAAC,GAAG,CAAC,sBAAG,CAAe,CAAC;gBACzD,MAAM,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAG,CAAS,CAAC;gBAE7C,IAAA,0BAAI,EAAW,QAAQ,EAAE,eAAe,EAAE,gBAAgB,EAAE,UAAU,CAAC,CAAC;aACxE;QACF,CAAC;KAED,CAAC,CAAC;IAEH,SAAS,wBAAwB,CAAC,QAAgB,EAAE,cAA+B;QAClF,MAAM,iBAAiB,GAAG,cAAc,CAAC,YAAY,EAAE,CAAC;QACxD,IAAI,iBAAiB,EAAE;YACtB,MAAM,SAAS,GAAG,iBAAiB,CAAC,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,KAAK,yBAAQ,CAAC,IAAI,CAAwB,CAAC;YACrH,KAAK,MAAM,IAAI,IAAI,SAAS,EAAE;gBAC7B,MAAM,MAAM,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC;gBACzF,IAAI,MAAM,EAAE;oBACX,OAAO,MAAM,CAAC;iBACd;aACD;SACD;QAED,OAAO,SAAS,CAAC;IAClB,CAAC","file":"cellOutputActions.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ServicesAccessor } from 'vs/editor/browser/editorExtensions';\nimport { localize } from 'vs/nls';\nimport { Action2, MenuId, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { INotebookOutputActionContext, NOTEBOOK_ACTIONS_CATEGORY } from 'vs/workbench/contrib/notebook/browser/controller/coreActions';\nimport { NOTEBOOK_CELL_HAS_OUTPUTS } from 'vs/workbench/contrib/notebook/common/notebookContextKeys';\nimport * as icons from 'vs/workbench/contrib/notebook/browser/notebookIcons';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { copyCellOutput } from 'vs/workbench/contrib/notebook/browser/contrib/clipboard/cellOutputClipboard';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { ICellOutputViewModel, ICellViewModel, INotebookEditor, getNotebookEditorFromEditorPane } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\nimport { CellKind } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { CodeCellViewModel } from 'vs/workbench/contrib/notebook/browser/viewModel/codeCellViewModel';\n\nexport const COPY_OUTPUT_COMMAND_ID = 'notebook.cellOutput.copy';\n\nregisterAction2(class CopyCellOutputAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: COPY_OUTPUT_COMMAND_ID,\n\t\t\ttitle: localize('notebookActions.copyOutput', \"Copy Output\"),\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.NotebookOutputToolbar,\n\t\t\t\twhen: NOTEBOOK_CELL_HAS_OUTPUTS\n\t\t\t},\n\t\t\tcategory: NOTEBOOK_ACTIONS_CATEGORY,\n\t\t\ticon: icons.copyIcon,\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, outputContext: INotebookOutputActionContext | { outputViewModel: ICellOutputViewModel }): Promise<void> {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst notebookEditor = getNotebookEditorFromEditorPane(editorService.activeEditorPane);\n\n\t\tif (!notebookEditor) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet outputViewModel: ICellOutputViewModel | undefined;\n\t\tif ('outputId' in outputContext && typeof outputContext.outputId === 'string') {\n\t\t\toutputViewModel = getOutputViewModelFromId(outputContext.outputId, notebookEditor);\n\t\t} else {\n\t\t\toutputViewModel = outputContext.outputViewModel;\n\t\t}\n\n\t\tif (!outputViewModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst mimeType = outputViewModel.pickedMimeType?.mimeType;\n\n\t\tif (mimeType?.startsWith('image/')) {\n\t\t\tconst focusOptions = { skipReveal: true, outputId: outputViewModel.model.outputId, altOutputId: outputViewModel.model.alternativeOutputId };\n\t\t\tawait notebookEditor.focusNotebookCell(outputViewModel.cellViewModel as ICellViewModel, 'output', focusOptions);\n\t\t\tnotebookEditor.copyOutputImage(outputViewModel);\n\t\t} else {\n\t\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\t\tconst logService = accessor.get(ILogService);\n\n\t\t\tcopyCellOutput(mimeType, outputViewModel, clipboardService, logService);\n\t\t}\n\t}\n\n});\n\nfunction getOutputViewModelFromId(outputId: string, notebookEditor: INotebookEditor): ICellOutputViewModel | undefined {\n\tconst notebookViewModel = notebookEditor.getViewModel();\n\tif (notebookViewModel) {\n\t\tconst codeCells = notebookViewModel.viewCells.filter(cell => cell.cellKind === CellKind.Code) as CodeCellViewModel[];\n\t\tfor (const cell of codeCells) {\n\t\t\tconst output = cell.outputsViewModels.find(output => output.model.outputId === outputId);\n\t\t\tif (output) {\n\t\t\t\treturn output;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn undefined;\n}\n"]}