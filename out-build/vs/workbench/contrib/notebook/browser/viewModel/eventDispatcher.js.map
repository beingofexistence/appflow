{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/notebook/browser/viewModel/eventDispatcher.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,MAAa,IAAwB,SAAQ,eAAG;QAAhD;;YACkB,MAAC,GAAoB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAkC,CAAC,CAAC;YACvF,sBAAiB,GAAG,IAAI,CAAC,CAAC,CAAkB,KAAK,CAAC;YAE1C,MAAC,GAAsB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAoC,CAAC,CAAC;YAC3F,wBAAmB,GAAG,IAAI,CAAC,CAAC,CAAoB,KAAK,CAAC;YAE9C,MAAC,GAAuB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAqC,CAAC,CAAC;YAC7F,yBAAoB,GAAG,IAAI,CAAC,CAAC,CAAqB,KAAK,CAAC;QAmBlE,CAAC;QAjBA,IAAI,CAAC,MAA2B;YAC/B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAG,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,GAAG,GAAG,EAAE,CAAC,EAAE,EAAE;gBAClD,MAAM,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;gBAEpB,QAAQ,CAAC,CAAC,IAAI,EAAE;oBACf,KAAK,0CAAqB,CAAC,aAAa;wBACvC,IAAI,CAAC,CAAC,CAAkB,IAAI,CAAC,CAAC,CAAC,CAAC;wBAChC,MAAM;oBACP,KAAK,0CAAqB,CAAC,eAAe;wBACzC,IAAI,CAAC,CAAC,CAAoB,IAAI,CAAC,CAAC,CAAC,CAAC;wBAClC,MAAM;oBACP,KAAK,0CAAqB,CAAC,gBAAgB;wBAC1C,IAAI,CAAC,CAAC,CAAqB,IAAI,CAAC,CAAC,CAAC,CAAC;wBACnC,MAAM;iBACP;aACD;QACF,CAAC;KACD;IA3BD,oBA2BC","file":"eventDispatcher.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { NotebookCellStateChangedEvent, NotebookLayoutChangedEvent, NotebookMetadataChangedEvent, NotebookViewEvent, NotebookViewEventType } from 'vs/workbench/contrib/notebook/browser/notebookViewEvents';\n\nexport class NotebookEventDispatcher extends Disposable {\n\tprivate readonly _onDidChangeLayout = this._register(new Emitter<NotebookLayoutChangedEvent>());\n\treadonly onDidChangeLayout = this._onDidChangeLayout.event;\n\n\tprivate readonly _onDidChangeMetadata = this._register(new Emitter<NotebookMetadataChangedEvent>());\n\treadonly onDidChangeMetadata = this._onDidChangeMetadata.event;\n\n\tprivate readonly _onDidChangeCellState = this._register(new Emitter<NotebookCellStateChangedEvent>());\n\treadonly onDidChangeCellState = this._onDidChangeCellState.event;\n\n\temit(events: NotebookViewEvent[]) {\n\t\tfor (let i = 0, len = events.length; i < len; i++) {\n\t\t\tconst e = events[i];\n\n\t\t\tswitch (e.type) {\n\t\t\t\tcase NotebookViewEventType.LayoutChanged:\n\t\t\t\t\tthis._onDidChangeLayout.fire(e);\n\t\t\t\t\tbreak;\n\t\t\t\tcase NotebookViewEventType.MetadataChanged:\n\t\t\t\t\tthis._onDidChangeMetadata.fire(e);\n\t\t\t\t\tbreak;\n\t\t\t\tcase NotebookViewEventType.CellStateChanged:\n\t\t\t\t\tthis._onDidChangeCellState.fire(e);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n\n"]}