{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/notebook/browser/viewModel/OutlineEntry.ts"],"names":[],"mappings":";;;;IAmBA,MAAa,IAAI;QAKhB,IAAI,IAAI;YACP,IAAI,IAAI,CAAC,UAAU,EAAE;gBACpB,OAAO,uBAAW,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;aAC3C;YACD,OAAO,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,oBAAI,CAAe,CAAC;gBAC9D,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,qBAAS,CAAC,MAAM,CAAC,oBAAI,EAAgB,MAAM,CAAC,CAAC,CAAC;oBAChE,IAAI,CAAC,IAAI,CAAC,QAAQ,KAAK,yBAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,cAAG,CAAK,QAAQ,CAAC,CAAC,CAAC,cAAG,CAAK,IAAI,CAAC;QAC5E,CAAC;QAED,YACU,KAAa,EACb,KAAa,EACb,IAAoB,EACpB,KAAa,EACb,WAAoB,EACpB,QAAiB,EACjB,QAAc,EACd,UAAuB;YAPvB,UAAK,GAAL,KAAK,CAAQ;YACb,UAAK,GAAL,KAAK,CAAQ;YACb,SAAI,GAAJ,IAAI,CAAgB;YACpB,UAAK,GAAL,KAAK,CAAQ;YACb,gBAAW,GAAX,WAAW,CAAS;YACpB,aAAQ,GAAR,QAAQ,CAAS;YACjB,aAAQ,GAAR,QAAQ,CAAM;YACd,eAAU,GAAV,UAAU,CAAa;YArBzB,MAAC,GAA2B,EAAE,CAAC;QAsBnC,CAAC;QAEL,QAAQ,CAAC,KAAW;YACnB,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,KAAK,CAAC,CAAC;YAC3B,KAAK,CAAC,CAAC,GAAS,IAAI,CAAC;QACtB,CAAC;QAED,IAAI,MAAM;YACT,OAAO,IAAI,CAAC,CAAC,CAAO;QACrB,CAAC;QAED,IAAI,QAAQ;YACX,OAAO,IAAI,CAAC,CAAC,CAAS;QACvB,CAAC;QAED,IAAI,UAAU;YACb,OAAO,IAAI,CAAC,CAAC,CAAW;QACzB,CAAC;QAED,aAAa,CAAC,aAAkB;YAC/B,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,KAAK,yBAAQ,CAAC,IAAI,EAAE;gBACzC,8BAA8B;gBAC9B,MAAM,MAAM,GAAG,aAAa,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,UAAU,EAAE,wBAAc,CAAC,KAAK,GAAG,wBAAc,CAAC,OAAO,EAAE,CAAC,CAAC;gBAC1H,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;oBACxB,IAAI,CAAC,CAAC,GAAa,SAAS,CAAC;iBAC7B;qBAAM;oBACN,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,KAAK,wBAAc,CAAC,KAAK,CAAC,EAAE,QAAQ,IAAI,wBAAc,CAAC,OAAO,CAAC;oBACzG,IAAI,CAAC,CAAC,GAAa,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,MAAM,EAAE,CAAC;iBACpD;aACD;iBAAM;gBACN,wDAAwD;gBACxD,IAAI,QAAoC,CAAC;gBACzC,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,QAAQ,EAAE;oBAClC,KAAK,CAAC,aAAa,CAAC,aAAa,CAAC,CAAC;oBACnC,IAAI,KAAK,CAAC,UAAU,EAAE;wBACrB,QAAQ,GAAG,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;qBAC7F;iBACD;gBACD,IAAI,CAAC,CAAC,GAAa,QAAQ,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;aAC9D;QACF,CAAC;QAED,YAAY;YACX,IAAI,CAAC,CAAC,GAAa,SAAS,CAAC;YAC7B,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,QAAQ,EAAE;gBAClC,KAAK,CAAC,YAAY,EAAE,CAAC;aACrB;QACF,CAAC;QAED,IAAI,CAAC,IAAoB,EAAE,OAAuB;YACjD,IAAI,IAAI,CAAC,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE;gBAC7B,OAAO,IAAI,CAAC;aACZ;YACD,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACnB,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,QAAQ,EAAE;gBAClC,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBACzC,IAAI,MAAM,EAAE;oBACX,OAAO,MAAM,CAAC;iBACd;aACD;YACD,OAAO,CAAC,GAAG,EAAE,CAAC;YACd,OAAO,SAAS,CAAC;QAClB,CAAC;QAED,UAAU,CAAC,MAAsB;YAChC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAClB,KAAK,MAAM,KAAK,IAAI,IAAI,CAAC,QAAQ,EAAE;gBAClC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;aACzB;QACF,CAAC;KACD;IA7FD,oBA6FC","file":"OutlineEntry.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Codicon } from 'vs/base/common/codicons';\nimport { ThemeIcon } from 'vs/base/common/themables';\nimport { IMarkerService, MarkerSeverity } from 'vs/platform/markers/common/markers';\nimport { ICellViewModel } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\nimport { executingStateIcon } from 'vs/workbench/contrib/notebook/browser/notebookIcons';\nimport { CellKind } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { Range } from 'vs/editor/common/core/range';\nimport { SymbolKind, SymbolKinds } from 'vs/editor/common/languages';\n\n\nexport interface IOutlineMarkerInfo {\n\treadonly count: number;\n\treadonly topSev: MarkerSeverity;\n}\n\nexport class OutlineEntry {\n\tprivate _children: OutlineEntry[] = [];\n\tprivate _parent: OutlineEntry | undefined;\n\tprivate _markerInfo: IOutlineMarkerInfo | undefined;\n\n\tget icon(): ThemeIcon {\n\t\tif (this.symbolKind) {\n\t\t\treturn SymbolKinds.toIcon(this.symbolKind);\n\t\t}\n\t\treturn this.isExecuting && this.isPaused ? executingStateIcon :\n\t\t\tthis.isExecuting ? ThemeIcon.modify(executingStateIcon, 'spin') :\n\t\t\t\tthis.cell.cellKind === CellKind.Markup ? Codicon.markdown : Codicon.code;\n\t}\n\n\tconstructor(\n\t\treadonly index: number,\n\t\treadonly level: number,\n\t\treadonly cell: ICellViewModel,\n\t\treadonly label: string,\n\t\treadonly isExecuting: boolean,\n\t\treadonly isPaused: boolean,\n\t\treadonly position?: Range,\n\t\treadonly symbolKind?: SymbolKind,\n\t) { }\n\n\taddChild(entry: OutlineEntry) {\n\t\tthis._children.push(entry);\n\t\tentry._parent = this;\n\t}\n\n\tget parent(): OutlineEntry | undefined {\n\t\treturn this._parent;\n\t}\n\n\tget children(): Iterable<OutlineEntry> {\n\t\treturn this._children;\n\t}\n\n\tget markerInfo(): IOutlineMarkerInfo | undefined {\n\t\treturn this._markerInfo;\n\t}\n\n\tupdateMarkers(markerService: IMarkerService): void {\n\t\tif (this.cell.cellKind === CellKind.Code) {\n\t\t\t// a code cell can have marker\n\t\t\tconst marker = markerService.read({ resource: this.cell.uri, severities: MarkerSeverity.Error | MarkerSeverity.Warning });\n\t\t\tif (marker.length === 0) {\n\t\t\t\tthis._markerInfo = undefined;\n\t\t\t} else {\n\t\t\t\tconst topSev = marker.find(a => a.severity === MarkerSeverity.Error)?.severity ?? MarkerSeverity.Warning;\n\t\t\t\tthis._markerInfo = { topSev, count: marker.length };\n\t\t\t}\n\t\t} else {\n\t\t\t// a markdown cell can inherit markers from its children\n\t\t\tlet topChild: MarkerSeverity | undefined;\n\t\t\tfor (const child of this.children) {\n\t\t\t\tchild.updateMarkers(markerService);\n\t\t\t\tif (child.markerInfo) {\n\t\t\t\t\ttopChild = !topChild ? child.markerInfo.topSev : Math.max(child.markerInfo.topSev, topChild);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._markerInfo = topChild && { topSev: topChild, count: 0 };\n\t\t}\n\t}\n\n\tclearMarkers(): void {\n\t\tthis._markerInfo = undefined;\n\t\tfor (const child of this.children) {\n\t\t\tchild.clearMarkers();\n\t\t}\n\t}\n\n\tfind(cell: ICellViewModel, parents: OutlineEntry[]): OutlineEntry | undefined {\n\t\tif (cell.id === this.cell.id) {\n\t\t\treturn this;\n\t\t}\n\t\tparents.push(this);\n\t\tfor (const child of this.children) {\n\t\t\tconst result = child.find(cell, parents);\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\tparents.pop();\n\t\treturn undefined;\n\t}\n\n\tasFlatList(bucket: OutlineEntry[]): void {\n\t\tbucket.push(this);\n\t\tfor (const child of this.children) {\n\t\t\tchild.asFlatList(bucket);\n\t\t}\n\t}\n}\n"]}