{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/notebook/browser/viewModel/cellSelectionCollection.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,SAAS,WAAW,CAAC,CAAe,EAAE,CAAe;QACpD,IAAI,CAAC,CAAC,MAAM,KAAK,CAAC,CAAC,MAAM,EAAE;YAC1B,OAAO,KAAK,CAAC;SACb;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YAClC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,EAAE;gBACvD,OAAO,KAAK,CAAC;aACb;SACD;QAED,OAAO,IAAI,CAAC;IACb,CAAC;IAED,oIAAoI;IACpI,MAAa,IAAgC,SAAQ,eAAG;QAAxD;;YAEkB,MAAC,GAAuB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAc,CAAC,CAAC;YAGvE,MAAC,GAA6B,IAAI,CAAC;YAEnC,MAAC,GAA2B,EAAE,CAAC;QAuBxC,CAAC;QA3BA,IAAI,oBAAoB,KAAoB,OAAO,IAAI,CAAC,CAAC,CAAqB,KAAK,CAAC,CAAC,CAAC;QAMtF,IAAI,UAAU;YACb,OAAO,IAAI,CAAC,CAAC,CAAW;QACzB,CAAC;QAED,IAAI,KAAK;YACR,OAAO,IAAI,CAAC,CAAC,IAAW,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC,EAAE,CAAC;QAC9C,CAAC;QAED,QAAQ,CAAC,OAA0B,EAAE,UAAwB,EAAE,cAAuB,EAAE,MAAwB;YAC/G,MAAM,OAAO,GAAG,OAAO,KAAK,IAAI,CAAC,CAAC,IAAW,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,EAAY,UAAU,CAAC,CAAC;YAExF,IAAI,CAAC,CAAC,GAAU,OAAO,CAAC;YACxB,IAAI,CAAC,CAAC,GAAa,UAAU,CAAC;YAC9B,IAAI,OAAO,IAAI,cAAc,EAAE;gBAC9B,IAAI,CAAC,CAAC,CAAqB,IAAI,CAAC,MAAM,CAAC,CAAC;aACxC;QACF,CAAC;QAED,aAAa,CAAC,UAAwB,EAAE,cAAuB,EAAE,MAAwB;YACxF,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,EAAS,UAAU,EAAE,cAAc,EAAE,MAAM,CAAC,CAAC;QAClE,CAAC;KACD;IA9BD,oBA8BC","file":"cellSelectionCollection.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ICellRange } from 'vs/workbench/contrib/notebook/common/notebookRange';\n\nfunction rangesEqual(a: ICellRange[], b: ICellRange[]) {\n\tif (a.length !== b.length) {\n\t\treturn false;\n\t}\n\n\tfor (let i = 0; i < a.length; i++) {\n\t\tif (a[i].start !== b[i].start || a[i].end !== b[i].end) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn true;\n}\n\n// Challenge is List View talks about `element`, which needs extra work to convert to ICellRange as we support Folding and Cell Move\nexport class NotebookCellSelectionCollection extends Disposable {\n\n\tprivate readonly _onDidChangeSelection = this._register(new Emitter<string>());\n\tget onDidChangeSelection(): Event<string> { return this._onDidChangeSelection.event; }\n\n\tprivate _primary: ICellRange | null = null;\n\n\tprivate _selections: ICellRange[] = [];\n\n\tget selections(): ICellRange[] {\n\t\treturn this._selections;\n\t}\n\n\tget focus(): ICellRange {\n\t\treturn this._primary ?? { start: 0, end: 0 };\n\t}\n\n\tsetState(primary: ICellRange | null, selections: ICellRange[], forceEventEmit: boolean, source: 'view' | 'model') {\n\t\tconst changed = primary !== this._primary || !rangesEqual(this._selections, selections);\n\n\t\tthis._primary = primary;\n\t\tthis._selections = selections;\n\t\tif (changed || forceEventEmit) {\n\t\t\tthis._onDidChangeSelection.fire(source);\n\t\t}\n\t}\n\n\tsetSelections(selections: ICellRange[], forceEventEmit: boolean, source: 'view' | 'model') {\n\t\tthis.setState(this._primary, selections, forceEventEmit, source);\n\t}\n}\n"]}