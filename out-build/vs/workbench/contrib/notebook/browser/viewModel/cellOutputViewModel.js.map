{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/notebook/browser/viewModel/cellOutputViewModel.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAShG,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,MAAa,IAAoB,SAAQ,eAAG;QAI3C,IAAI,KAAK;YACR,OAAO,IAAI,CAAC,CAAC,CAAc;QAC5B,CAAC;QAGD,IAAI,cAAc;YACjB,OAAO,IAAI,CAAC,CAAC,CAAe;QAC7B,CAAC;QAED,IAAI,cAAc,CAAC,KAAmC;YACrD,IAAI,CAAC,CAAC,GAAiB,KAAK,CAAC;QAC9B,CAAC;QAED,YACU,aAAoC,EAC5B,CAA2B,EAC3B,CAAsB;YAEvC,KAAK,EAAE,CAAC;YAJC,kBAAa,GAAb,aAAa,CAAuB;YAC5B,MAAC,GAAD,CAAC,CAA0B;YAC3B,MAAC,GAAD,CAAC,CAAqB;YAnBhC,MAAC,GAA4B,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAY,CAAC,CAAC;YAChE,uBAAkB,GAAG,IAAI,CAAC,CAAC,CAA0B,KAAK,CAAC;YACpE,iBAAY,GAAG,MAAM,EAAE,CAAC;QAoBxB,CAAC;QAED,gBAAgB;YACf,IAAI,IAAI,CAAC,CAAC,CAAc,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC3C,OAAO,KAAK,CAAC;aACb;YAED,MAAM,aAAa,GAAG,IAAI,CAAC,CAAC,CAAc,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;YAC1D,OAAO,IAAI,CAAC,CAAC,CAAc,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,aAAa,CAAC,CAAC;QAClF,CAAC;QAED,gBAAgB,CAAC,SAAc,EAAgB,cAA6C;YAC3F,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAgB,qBAAqB,CAAC,SAAS,EAAE,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;YACrG,MAAM,KAAK,GAAG,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,UAAU,KAAK,oBAAG,IAAuB,QAAQ,CAAC,SAAS,CAAC,CAAC;YAEpH,OAAO,CAAC,SAAS,EAAE,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;QACxC,CAAC;QAED,aAAa;YACZ,4BAA4B;YAC5B,IAAI,CAAC,CAAC,GAAiB,SAAS,CAAC;YACjC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;YACzB,IAAI,CAAC,CAAC,CAA0B,IAAI,EAAE,CAAC;QACxC,CAAC;QAED,SAAS;YACR,OAAO;gBACN,OAAO,EAAE,IAAI,CAAC,CAAC,CAAc,OAAO;gBACpC,+BAA+B;aAC/B,CAAC;QACH,CAAC;KACD;IAtDD,oBAsDC","file":"cellOutputViewModel.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ICellOutputViewModel, IGenericCellViewModel } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\nimport { NotebookTextModel } from 'vs/workbench/contrib/notebook/common/model/notebookTextModel';\nimport { ICellOutput, IOrderedMimeType, RENDERER_NOT_AVAILABLE } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { INotebookService } from 'vs/workbench/contrib/notebook/common/notebookService';\n\nlet handle = 0;\nexport class CellOutputViewModel extends Disposable implements ICellOutputViewModel {\n\tprivate _onDidResetRendererEmitter = this._register(new Emitter<void>());\n\treadonly onDidResetRenderer = this._onDidResetRendererEmitter.event;\n\toutputHandle = handle++;\n\tget model(): ICellOutput {\n\t\treturn this._outputRawData;\n\t}\n\n\tprivate _pickedMimeType: IOrderedMimeType | undefined;\n\tget pickedMimeType() {\n\t\treturn this._pickedMimeType;\n\t}\n\n\tset pickedMimeType(value: IOrderedMimeType | undefined) {\n\t\tthis._pickedMimeType = value;\n\t}\n\n\tconstructor(\n\t\treadonly cellViewModel: IGenericCellViewModel,\n\t\tprivate readonly _outputRawData: ICellOutput,\n\t\tprivate readonly _notebookService: INotebookService\n\t) {\n\t\tsuper();\n\t}\n\n\thasMultiMimeType() {\n\t\tif (this._outputRawData.outputs.length < 2) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst firstMimeType = this._outputRawData.outputs[0].mime;\n\t\treturn this._outputRawData.outputs.some(output => output.mime !== firstMimeType);\n\t}\n\n\tresolveMimeTypes(textModel: NotebookTextModel, kernelProvides: readonly string[] | undefined): [readonly IOrderedMimeType[], number] {\n\t\tconst mimeTypes = this._notebookService.getOutputMimeTypeInfo(textModel, kernelProvides, this.model);\n\t\tconst index = mimeTypes.findIndex(mimeType => mimeType.rendererId !== RENDERER_NOT_AVAILABLE && mimeType.isTrusted);\n\n\t\treturn [mimeTypes, Math.max(index, 0)];\n\t}\n\n\tresetRenderer() {\n\t\t// reset the output renderer\n\t\tthis._pickedMimeType = undefined;\n\t\tthis.model.bumpVersion();\n\t\tthis._onDidResetRendererEmitter.fire();\n\t}\n\n\ttoRawJSON() {\n\t\treturn {\n\t\t\toutputs: this._outputRawData.outputs,\n\t\t\t// TODO@rebronix, no id, right?\n\t\t};\n\t}\n}\n"]}