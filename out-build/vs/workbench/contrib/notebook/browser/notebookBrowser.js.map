{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/notebook/browser/notebookBrowser.ts"],"names":[],"mappings":"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","file":"notebookBrowser.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Event } from 'vs/base/common/event';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { IEditorContributionDescription } from 'vs/editor/browser/editorExtensions';\nimport * as editorCommon from 'vs/editor/common/editorCommon';\nimport { FontInfo } from 'vs/editor/common/config/fontInfo';\nimport { IPosition } from 'vs/editor/common/core/position';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { FindMatch, IModelDeltaDecoration, IReadonlyTextBuffer, ITextModel, TrackedRangeStickiness } from 'vs/editor/common/model';\nimport { MenuId } from 'vs/platform/actions/common/actions';\nimport { ITextEditorOptions, ITextResourceEditorInput } from 'vs/platform/editor/common/editor';\nimport { IConstructorSignature } from 'vs/platform/instantiation/common/instantiation';\nimport { IEditorPane, IEditorPaneWithSelection } from 'vs/workbench/common/editor';\nimport { CellViewModelStateChangeEvent, NotebookCellStateChangedEvent, NotebookLayoutInfo } from 'vs/workbench/contrib/notebook/browser/notebookViewEvents';\nimport { NotebookCellTextModel } from 'vs/workbench/contrib/notebook/common/model/notebookCellTextModel';\nimport { NotebookTextModel } from 'vs/workbench/contrib/notebook/common/model/notebookTextModel';\nimport { CellKind, ICellOutput, INotebookCellStatusBarItem, INotebookRendererInfo, INotebookSearchOptions, IOrderedMimeType, NotebookCellInternalMetadata, NotebookCellMetadata, NOTEBOOK_EDITOR_ID } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { isCompositeNotebookEditorInput } from 'vs/workbench/contrib/notebook/common/notebookEditorInput';\nimport { INotebookKernel } from 'vs/workbench/contrib/notebook/common/notebookKernelService';\nimport { NotebookOptions } from 'vs/workbench/contrib/notebook/browser/notebookOptions';\nimport { cellRangesToIndexes, ICellRange, reduceCellRanges } from 'vs/workbench/contrib/notebook/common/notebookRange';\nimport { IWebviewElement } from 'vs/workbench/contrib/webview/browser/webview';\nimport { IEditorOptions } from 'vs/editor/common/config/editorOptions';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\n\n//#region Shared commands\nexport const EXPAND_CELL_INPUT_COMMAND_ID = 'notebook.cell.expandCellInput';\nexport const EXECUTE_CELL_COMMAND_ID = 'notebook.cell.execute';\nexport const DETECT_CELL_LANGUAGE = 'notebook.cell.detectLanguage';\nexport const CHANGE_CELL_LANGUAGE = 'notebook.cell.changeLanguage';\nexport const QUIT_EDIT_CELL_COMMAND_ID = 'notebook.cell.quitEdit';\nexport const EXPAND_CELL_OUTPUT_COMMAND_ID = 'notebook.cell.expandCellOutput';\n\n\n//#endregion\n\n//#region Notebook extensions\n\n// Hardcoding viewType/extension ID for now. TODO these should be replaced once we can\n// look them up in the marketplace dynamically.\nexport const IPYNB_VIEW_TYPE = 'jupyter-notebook';\nexport const JUPYTER_EXTENSION_ID = 'ms-toolsai.jupyter';\n/** @deprecated use the notebookKernel<Type> \"keyword\" instead */\nexport const KERNEL_EXTENSIONS = new Map<string, string>([\n\t[IPYNB_VIEW_TYPE, JUPYTER_EXTENSION_ID],\n]);\n// @TODO lramos15, place this in a similar spot to our normal recommendations.\nexport const KERNEL_RECOMMENDATIONS = new Map<string, Map<string, INotebookExtensionRecommendation>>();\nKERNEL_RECOMMENDATIONS.set(IPYNB_VIEW_TYPE, new Map<string, INotebookExtensionRecommendation>());\nKERNEL_RECOMMENDATIONS.get(IPYNB_VIEW_TYPE)?.set('python', {\n\textensionIds: [\n\t\t'ms-python.python',\n\t\tJUPYTER_EXTENSION_ID\n\t],\n\tdisplayName: 'Python + Jupyter',\n});\n\nexport interface INotebookExtensionRecommendation {\n\treadonly extensionIds: string[];\n\treadonly displayName?: string;\n}\n\n//#endregion\n\n//#region  Output related types\n\n// !! IMPORTANT !! ----------------------------------------------------------------------------------\n// NOTE that you MUST update vs/workbench/contrib/notebook/browser/view/renderers/webviewPreloads.ts#L1986\n// whenever changing the values of this const enum. The webviewPreloads-files manually inlines these values\n// because it cannot have dependencies.\n// !! IMPORTANT !! ----------------------------------------------------------------------------------\nexport const enum RenderOutputType {\n\tHtml = 0,\n\tExtension = 1\n}\n\nexport interface IRenderPlainHtmlOutput {\n\treadonly type: RenderOutputType.Html;\n\treadonly source: IDisplayOutputViewModel;\n\treadonly htmlContent: string;\n}\n\nexport interface IRenderOutputViaExtension {\n\treadonly type: RenderOutputType.Extension;\n\treadonly source: IDisplayOutputViewModel;\n\treadonly mimeType: string;\n\treadonly renderer: INotebookRendererInfo;\n}\n\nexport type IInsetRenderOutput = IRenderPlainHtmlOutput | IRenderOutputViaExtension;\n\nexport interface ICellOutputViewModel extends IDisposable {\n\tcellViewModel: IGenericCellViewModel;\n\t/**\n\t * When rendering an output, `model` should always be used as we convert legacy `text/error` output to `display_data` output under the hood.\n\t */\n\tmodel: ICellOutput;\n\tresolveMimeTypes(textModel: NotebookTextModel, kernelProvides: readonly string[] | undefined): [readonly IOrderedMimeType[], number];\n\tpickedMimeType: IOrderedMimeType | undefined;\n\thasMultiMimeType(): boolean;\n\treadonly onDidResetRenderer: Event<void>;\n\tresetRenderer(): void;\n\ttoRawJSON(): any;\n}\n\nexport interface IDisplayOutputViewModel extends ICellOutputViewModel {\n\tresolveMimeTypes(textModel: NotebookTextModel, kernelProvides: readonly string[] | undefined): [readonly IOrderedMimeType[], number];\n}\n\n\n//#endregion\n\n//#region Shared types between the Notebook Editor and Notebook Diff Editor, they are mostly used for output rendering\n\nexport interface IGenericCellViewModel {\n\tid: string;\n\thandle: number;\n\turi: URI;\n\tmetadata: NotebookCellMetadata;\n\toutputIsHovered: boolean;\n\toutputIsFocused: boolean;\n\toutputsViewModels: ICellOutputViewModel[];\n\tgetOutputOffset(index: number): number;\n\tupdateOutputHeight(index: number, height: number, source?: string): void;\n}\n\nexport interface IDisplayOutputLayoutUpdateRequest {\n\treadonly cell: IGenericCellViewModel;\n\toutput: IDisplayOutputViewModel;\n\tcellTop: number;\n\toutputOffset: number;\n\tforceDisplay: boolean;\n}\n\nexport interface ICommonCellInfo {\n\treadonly cellId: string;\n\treadonly cellHandle: number;\n\treadonly cellUri: URI;\n\treadonly executionId?: string;\n}\n\nexport enum ScrollToRevealBehavior {\n\tfullCell,\n\tfirstLine\n}\n\nexport interface IFocusNotebookCellOptions {\n\treadonly skipReveal?: boolean;\n\treadonly focusEditorLine?: number;\n\treadonly revealBehavior?: ScrollToRevealBehavior | undefined;\n\treadonly outputId?: string;\n\treadonly altOutputId?: string;\n}\n\n//#endregion\n\nexport enum CellLayoutState {\n\tUninitialized,\n\tEstimated,\n\tFromCache,\n\tMeasured\n}\n\nexport interface CodeCellLayoutInfo {\n\treadonly fontInfo: FontInfo | null;\n\treadonly editorHeight: number;\n\treadonly editorWidth: number;\n\treadonly estimatedHasHorizontalScrolling: boolean;\n\treadonly statusBarHeight: number;\n\treadonly commentHeight: number;\n\treadonly totalHeight: number;\n\treadonly outputContainerOffset: number;\n\treadonly outputTotalHeight: number;\n\treadonly outputShowMoreContainerHeight: number;\n\treadonly outputShowMoreContainerOffset: number;\n\treadonly bottomToolbarOffset: number;\n\treadonly layoutState: CellLayoutState;\n\treadonly codeIndicatorHeight: number;\n\treadonly outputIndicatorHeight: number;\n}\n\nexport interface CodeCellLayoutChangeEvent {\n\treadonly source?: string;\n\treadonly editorHeight?: boolean;\n\treadonly commentHeight?: boolean;\n\treadonly outputHeight?: boolean;\n\treadonly outputShowMoreContainerHeight?: number;\n\treadonly totalHeight?: boolean;\n\treadonly outerWidth?: number;\n\treadonly font?: FontInfo;\n}\n\nexport interface MarkupCellLayoutInfo {\n\treadonly fontInfo: FontInfo | null;\n\treadonly editorWidth: number;\n\treadonly editorHeight: number;\n\treadonly statusBarHeight: number;\n\treadonly previewHeight: number;\n\treadonly bottomToolbarOffset: number;\n\treadonly totalHeight: number;\n\treadonly layoutState: CellLayoutState;\n\treadonly foldHintHeight: number;\n}\n\nexport enum CellLayoutContext {\n\tFold\n}\n\nexport interface MarkupCellLayoutChangeEvent {\n\treadonly font?: FontInfo;\n\treadonly outerWidth?: number;\n\treadonly editorHeight?: number;\n\treadonly previewHeight?: number;\n\ttotalHeight?: number;\n\treadonly context?: CellLayoutContext;\n}\n\nexport interface ICommonCellViewModelLayoutChangeInfo {\n\treadonly totalHeight?: boolean | number;\n\treadonly outerWidth?: number;\n\treadonly context?: CellLayoutContext;\n}\nexport interface ICellViewModel extends IGenericCellViewModel {\n\treadonly model: NotebookCellTextModel;\n\treadonly id: string;\n\treadonly textBuffer: IReadonlyTextBuffer;\n\treadonly layoutInfo: { totalHeight: number; bottomToolbarOffset: number; editorWidth: number; editorHeight: number; statusBarHeight: number };\n\treadonly onDidChangeLayout: Event<ICommonCellViewModelLayoutChangeInfo>;\n\treadonly onDidChangeCellStatusBarItems: Event<void>;\n\treadonly onCellDecorationsChanged: Event<{ added: INotebookCellDecorationOptions[]; removed: INotebookCellDecorationOptions[] }>;\n\treadonly onDidChangeState: Event<CellViewModelStateChangeEvent>;\n\treadonly onDidChangeEditorAttachState: Event<void>;\n\treadonly editStateSource: string;\n\treadonly editorAttached: boolean;\n\tisInputCollapsed: boolean;\n\tisOutputCollapsed: boolean;\n\tdragging: boolean;\n\thandle: number;\n\turi: URI;\n\tlanguage: string;\n\treadonly mime: string;\n\tcellKind: CellKind;\n\tlineNumbers: 'on' | 'off' | 'inherit';\n\tfocusMode: CellFocusMode;\n\toutputIsHovered: boolean;\n\tgetText(): string;\n\tgetTextLength(): number;\n\tgetHeight(lineHeight: number): number;\n\tmetadata: NotebookCellMetadata;\n\tinternalMetadata: NotebookCellInternalMetadata;\n\ttextModel: ITextModel | undefined;\n\thasModel(): this is IEditableCellViewModel;\n\tresolveTextModel(): Promise<ITextModel>;\n\tgetSelections(): Selection[];\n\tgetSelectionsStartPosition(): IPosition[] | undefined;\n\tgetCellDecorations(): INotebookCellDecorationOptions[];\n\tgetCellStatusBarItems(): INotebookCellStatusBarItem[];\n\tgetEditState(): CellEditState;\n\tupdateEditState(state: CellEditState, source: string): void;\n\tdeltaModelDecorations(oldDecorations: readonly string[], newDecorations: readonly IModelDeltaDecoration[]): string[];\n\tgetCellDecorationRange(id: string): Range | null;\n}\n\nexport interface IEditableCellViewModel extends ICellViewModel {\n\ttextModel: ITextModel;\n}\n\nexport interface INotebookEditorMouseEvent {\n\treadonly event: MouseEvent;\n\treadonly target: ICellViewModel;\n}\n\nexport interface INotebookEditorContribution {\n\t/**\n\t * Dispose this contribution.\n\t */\n\tdispose(): void;\n\t/**\n\t * Store view state.\n\t */\n\tsaveViewState?(): unknown;\n\t/**\n\t * Restore view state.\n\t */\n\trestoreViewState?(state: unknown): void;\n}\n\n/**\n * Vertical Lane in the overview ruler of the notebook editor.\n */\nexport enum NotebookOverviewRulerLane {\n\tLeft = 1,\n\tCenter = 2,\n\tRight = 4,\n\tFull = 7\n}\n\nexport interface INotebookCellDecorationOptions {\n\tclassName?: string;\n\tgutterClassName?: string;\n\toutputClassName?: string;\n\ttopClassName?: string;\n\toverviewRuler?: {\n\t\tcolor: string;\n\t\tmodelRanges: IRange[];\n\t\tincludeOutput: boolean;\n\t\tposition: NotebookOverviewRulerLane;\n\t};\n}\n\nexport interface INotebookDeltaDecoration {\n\treadonly handle: number;\n\treadonly options: INotebookCellDecorationOptions;\n}\n\nexport interface INotebookDeltaCellStatusBarItems {\n\treadonly handle: number;\n\treadonly items: readonly INotebookCellStatusBarItem[];\n}\n\nexport const enum CellRevealSyncType {\n\tDefault = 1,\n\tTop = 2,\n\tCenter = 3,\n\tCenterIfOutsideViewport = 4,\n\tFirstLineIfOutsideViewport = 5\n}\n\nexport enum CellRevealRangeType {\n\tDefault = 1,\n\tCenter = 2,\n\tCenterIfOutsideViewport = 3,\n}\n\nexport enum CellRevealType {\n\tNearTopIfOutsideViewport,\n\tCenterIfOutsideViewport\n}\n\nexport interface INotebookEditorOptions extends ITextEditorOptions {\n\treadonly cellOptions?: ITextResourceEditorInput;\n\treadonly cellRevealType?: CellRevealType;\n\treadonly cellSelections?: ICellRange[];\n\treadonly isReadOnly?: boolean;\n\treadonly viewState?: INotebookEditorViewState;\n\treadonly indexedCellOptions?: { index: number; selection?: IRange };\n}\n\nexport type INotebookEditorContributionCtor = IConstructorSignature<INotebookEditorContribution, [INotebookEditor]>;\n\nexport interface INotebookEditorContributionDescription {\n\tid: string;\n\tctor: INotebookEditorContributionCtor;\n}\n\nexport interface INotebookEditorCreationOptions {\n\treadonly isEmbedded?: boolean;\n\treadonly isReadOnly?: boolean;\n\treadonly contributions?: INotebookEditorContributionDescription[];\n\treadonly cellEditorContributions?: IEditorContributionDescription[];\n\treadonly menuIds: {\n\t\tnotebookToolbar: MenuId;\n\t\tcellTitleToolbar: MenuId;\n\t\tcellDeleteToolbar: MenuId;\n\t\tcellInsertToolbar: MenuId;\n\t\tcellTopInsertToolbar: MenuId;\n\t\tcellExecuteToolbar: MenuId;\n\t\tcellExecutePrimary?: MenuId;\n\t};\n\treadonly options?: NotebookOptions;\n}\n\nexport interface INotebookWebviewMessage {\n\treadonly message: unknown;\n}\n\n//#region Notebook View Model\nexport interface INotebookEditorViewState {\n\teditingCells: { [key: number]: boolean };\n\tcollapsedInputCells: { [key: number]: boolean };\n\tcollapsedOutputCells: { [key: number]: boolean };\n\tcellLineNumberStates: { [key: number]: 'on' | 'off' };\n\teditorViewStates: { [key: number]: editorCommon.ICodeEditorViewState | null };\n\thiddenFoldingRanges?: ICellRange[];\n\tcellTotalHeights?: { [key: number]: number };\n\tscrollPosition?: { left: number; top: number };\n\tfocus?: number;\n\teditorFocused?: boolean;\n\tcontributionsState?: { [id: string]: unknown };\n\tselectedKernelId?: string;\n}\n\nexport interface ICellModelDecorations {\n\treadonly ownerId: number;\n\treadonly decorations: readonly string[];\n}\n\nexport interface ICellModelDeltaDecorations {\n\treadonly ownerId: number;\n\treadonly decorations: readonly IModelDeltaDecoration[];\n}\n\nexport interface IModelDecorationsChangeAccessor {\n\tdeltaDecorations(oldDecorations: ICellModelDecorations[], newDecorations: ICellModelDeltaDecorations[]): ICellModelDecorations[];\n}\n\n\nexport type NotebookViewCellsSplice = [\n\tnumber /* start */,\n\tnumber /* delete count */,\n\tICellViewModel[]\n];\n\nexport interface INotebookViewCellsUpdateEvent {\n\treadonly synchronous: boolean;\n\treadonly splices: readonly NotebookViewCellsSplice[];\n}\n\nexport interface INotebookViewModel {\n\tnotebookDocument: NotebookTextModel;\n\tviewCells: ICellViewModel[];\n\tlayoutInfo: NotebookLayoutInfo | null;\n\tonDidChangeViewCells: Event<INotebookViewCellsUpdateEvent>;\n\tonDidChangeSelection: Event<string>;\n\tgetNearestVisibleCellIndexUpwards(index: number): number;\n\tgetTrackedRange(id: string): ICellRange | null;\n\tsetTrackedRange(id: string | null, newRange: ICellRange | null, newStickiness: TrackedRangeStickiness): string | null;\n\tgetSelections(): ICellRange[];\n\tgetCellIndex(cell: ICellViewModel): number;\n\tdeltaCellStatusBarItems(oldItems: string[], newItems: INotebookDeltaCellStatusBarItems[]): string[];\n\tgetFoldedLength(index: number): number;\n\treplaceOne(cell: ICellViewModel, range: Range, text: string): Promise<void>;\n\treplaceAll(matches: CellFindMatchWithIndex[], texts: string[]): Promise<void>;\n}\n//#endregion\n\nexport interface INotebookEditor {\n\t//#region Eventing\n\treadonly onDidChangeCellState: Event<NotebookCellStateChangedEvent>;\n\treadonly onDidChangeViewCells: Event<INotebookViewCellsUpdateEvent>;\n\treadonly onDidChangeVisibleRanges: Event<void>;\n\treadonly onDidChangeSelection: Event<void>;\n\t/**\n\t * An event emitted when the model of this editor has changed.\n\t */\n\treadonly onDidChangeModel: Event<NotebookTextModel | undefined>;\n\treadonly onDidAttachViewModel: Event<void>;\n\treadonly onDidFocusWidget: Event<void>;\n\treadonly onDidBlurWidget: Event<void>;\n\treadonly onDidScroll: Event<void>;\n\treadonly onDidChangeActiveCell: Event<void>;\n\treadonly onDidChangeActiveKernel: Event<void>;\n\treadonly onMouseUp: Event<INotebookEditorMouseEvent>;\n\treadonly onMouseDown: Event<INotebookEditorMouseEvent>;\n\n\t//#endregion\n\n\t//#region readonly properties\n\treadonly visibleRanges: ICellRange[];\n\treadonly textModel?: NotebookTextModel;\n\treadonly isVisible: boolean;\n\treadonly isReadOnly: boolean;\n\treadonly notebookOptions: NotebookOptions;\n\treadonly isDisposed: boolean;\n\treadonly activeKernel: INotebookKernel | undefined;\n\treadonly scrollTop: number;\n\treadonly scopedContextKeyService: IContextKeyService;\n\treadonly activeCodeEditor: ICodeEditor | undefined;\n\treadonly codeEditors: [ICellViewModel, ICodeEditor][];\n\t//#endregion\n\n\tgetLength(): number;\n\tgetSelections(): ICellRange[];\n\tsetSelections(selections: ICellRange[]): void;\n\tgetFocus(): ICellRange;\n\tsetFocus(focus: ICellRange): void;\n\tgetId(): string;\n\n\tgetViewModel(): INotebookViewModel | undefined;\n\thasModel(): this is IActiveNotebookEditor;\n\tdispose(): void;\n\tgetDomNode(): HTMLElement;\n\tgetInnerWebview(): IWebviewElement | undefined;\n\tgetSelectionViewModels(): ICellViewModel[];\n\tgetEditorViewState(): INotebookEditorViewState;\n\trestoreListViewState(viewState: INotebookEditorViewState | undefined): void;\n\n\n\t/**\n\t * Focus the active cell in notebook cell list\n\t */\n\tfocus(): void;\n\n\t/**\n\t * Focus the notebook cell list container\n\t */\n\tfocusContainer(): void;\n\n\thasEditorFocus(): boolean;\n\thasWebviewFocus(): boolean;\n\n\thasOutputTextSelection(): boolean;\n\tsetOptions(options: INotebookEditorOptions | undefined): Promise<void>;\n\n\t/**\n\t * Select & focus cell\n\t */\n\tfocusElement(cell: ICellViewModel): void;\n\n\t/**\n\t * Layout info for the notebook editor\n\t */\n\tgetLayoutInfo(): NotebookLayoutInfo;\n\n\tgetVisibleRangesPlusViewportAboveAndBelow(): ICellRange[];\n\n\t/**\n\t * Focus the container of a cell (the monaco editor inside is not focused).\n\t */\n\tfocusNotebookCell(cell: ICellViewModel, focus: 'editor' | 'container' | 'output', options?: IFocusNotebookCellOptions): Promise<void>;\n\n\t/**\n\t * Execute the given notebook cells\n\t */\n\texecuteNotebookCells(cells?: Iterable<ICellViewModel>): Promise<void>;\n\n\t/**\n\t * Cancel the given notebook cells\n\t */\n\tcancelNotebookCells(cells?: Iterable<ICellViewModel>): Promise<void>;\n\n\t/**\n\t * Get current active cell\n\t */\n\tgetActiveCell(): ICellViewModel | undefined;\n\n\t/**\n\t * Layout the cell with a new height\n\t */\n\tlayoutNotebookCell(cell: ICellViewModel, height: number): Promise<void>;\n\n\t/**\n\t * Render the output in webview layer\n\t */\n\tcreateOutput(cell: ICellViewModel, output: IInsetRenderOutput, offset: number, createWhenIdle: boolean): Promise<void>;\n\n\t/**\n\t * Update the output in webview layer with latest content. It will delegate to `createOutput` is the output is not rendered yet\n\t */\n\tupdateOutput(cell: ICellViewModel, output: IInsetRenderOutput, offset: number): Promise<void>;\n\n\t/**\n\t * Copy the image in the specific cell output to the clipboard\n\t */\n\tcopyOutputImage(cellOutput: ICellOutputViewModel): Promise<void>;\n\n\treadonly onDidReceiveMessage: Event<INotebookWebviewMessage>;\n\n\t/**\n\t * Send message to the webview for outputs.\n\t */\n\tpostMessage(message: any): void;\n\n\t/**\n\t * Remove class name on the notebook editor root DOM node.\n\t */\n\taddClassName(className: string): void;\n\n\t/**\n\t * Remove class name on the notebook editor root DOM node.\n\t */\n\tremoveClassName(className: string): void;\n\n\t/**\n\t * Set scrollTop value of the notebook editor.\n\t */\n\tsetScrollTop(scrollTop: number): void;\n\n\t/**\n\t * The range will be revealed with as little scrolling as possible.\n\t */\n\trevealCellRangeInView(range: ICellRange): void;\n\n\t/**\n\t * Reveal cell into viewport.\n\t */\n\trevealInView(cell: ICellViewModel): void;\n\n\t/**\n\t * Reveal cell into the top of viewport.\n\t */\n\trevealInViewAtTop(cell: ICellViewModel): void;\n\n\t/**\n\t * Reveal cell into viewport center.\n\t */\n\trevealInCenter(cell: ICellViewModel): void;\n\n\t/**\n\t * Reveal cell into viewport center if cell is currently out of the viewport.\n\t */\n\trevealInCenterIfOutsideViewport(cell: ICellViewModel): void;\n\n\t/**\n\t * Reveal a line in notebook cell into viewport with minimal scrolling.\n\t */\n\trevealLineInViewAsync(cell: ICellViewModel, line: number): Promise<void>;\n\n\t/**\n\t * Reveal a line in notebook cell into viewport center.\n\t */\n\trevealLineInCenterAsync(cell: ICellViewModel, line: number): Promise<void>;\n\n\t/**\n\t * Reveal a line in notebook cell into viewport center.\n\t */\n\trevealLineInCenterIfOutsideViewportAsync(cell: ICellViewModel, line: number): Promise<void>;\n\n\t/**\n\t * Reveal a range in notebook cell into viewport with minimal scrolling.\n\t */\n\trevealRangeInViewAsync(cell: ICellViewModel, range: Selection | Range): Promise<void>;\n\n\t/**\n\t * Reveal a range in notebook cell into viewport center.\n\t */\n\trevealRangeInCenterAsync(cell: ICellViewModel, range: Selection | Range): Promise<void>;\n\n\t/**\n\t * Reveal a range in notebook cell into viewport center.\n\t */\n\trevealRangeInCenterIfOutsideViewportAsync(cell: ICellViewModel, range: Selection | Range): Promise<void>;\n\n\t/**\n\t * Reveal a position with `offset` in a cell into viewport center.\n\t */\n\trevealCellOffsetInCenterAsync(cell: ICellViewModel, offset: number): Promise<void>;\n\n\t/**\n\t * Convert the view range to model range\n\t * @param startIndex Inclusive\n\t * @param endIndex Exclusive\n\t */\n\tgetCellRangeFromViewRange(startIndex: number, endIndex: number): ICellRange | undefined;\n\n\t/**\n\t * Set hidden areas on cell text models.\n\t */\n\tsetHiddenAreas(_ranges: ICellRange[]): boolean;\n\n\t/**\n\t * Set selectiosn on the text editor attached to the cell\n\t */\n\n\tsetCellEditorSelection(cell: ICellViewModel, selection: Range): void;\n\n\t/**\n\t *Change the decorations on the notebook cell list\n\t */\n\n\tdeltaCellDecorations(oldDecorations: string[], newDecorations: INotebookDeltaDecoration[]): string[];\n\n\t/**\n\t * Change the decorations on cell editors.\n\t * The notebook is virtualized and this method should be called to create/delete editor decorations safely.\n\t */\n\tchangeModelDecorations<T>(callback: (changeAccessor: IModelDecorationsChangeAccessor) => T): T | null;\n\n\t/**\n\t * Get a contribution of this editor.\n\t * @id Unique identifier of the contribution.\n\t * @return The contribution or null if contribution not found.\n\t */\n\tgetContribution<T extends INotebookEditorContribution>(id: string): T;\n\n\t/**\n\t * Get the view index of a cell at model `index`\n\t */\n\tgetViewIndexByModelIndex(index: number): number;\n\tgetCellsInRange(range?: ICellRange): ReadonlyArray<ICellViewModel>;\n\tcellAt(index: number): ICellViewModel | undefined;\n\tgetCellByHandle(handle: number): ICellViewModel | undefined;\n\tgetCellIndex(cell: ICellViewModel): number | undefined;\n\tgetNextVisibleCellIndex(index: number): number | undefined;\n\tgetPreviousVisibleCellIndex(index: number): number | undefined;\n\tfind(query: string, options: INotebookSearchOptions, token: CancellationToken, skipWarmup?: boolean, shouldGetSearchPreviewInfo?: boolean, ownerID?: string): Promise<CellFindMatchWithIndex[]>;\n\tfindHighlightCurrent(matchIndex: number, ownerID?: string): Promise<number>;\n\tfindUnHighlightCurrent(matchIndex: number, ownerID?: string): Promise<void>;\n\tfindStop(ownerID?: string): void;\n\tshowProgress(): void;\n\thideProgress(): void;\n\n\tgetAbsoluteTopOfElement(cell: ICellViewModel): number;\n}\n\nexport interface IActiveNotebookEditor extends INotebookEditor {\n\tgetViewModel(): INotebookViewModel;\n\ttextModel: NotebookTextModel;\n\tgetFocus(): ICellRange;\n\tcellAt(index: number): ICellViewModel;\n\tgetCellIndex(cell: ICellViewModel): number;\n\tgetNextVisibleCellIndex(index: number): number;\n}\n\nexport interface INotebookEditorPane extends IEditorPaneWithSelection {\n\tgetControl(): INotebookEditor | undefined;\n\treadonly onDidChangeModel: Event<void>;\n\ttextModel: NotebookTextModel | undefined;\n}\n\nexport interface IBaseCellEditorOptions extends IDisposable {\n\treadonly value: IEditorOptions;\n\treadonly onDidChange: Event<void>;\n}\n\n/**\n * A mix of public interface and internal one (used by internal rendering code, e.g., cellRenderer)\n */\nexport interface INotebookEditorDelegate extends INotebookEditor {\n\thasModel(): this is IActiveNotebookEditorDelegate;\n\n\treadonly creationOptions: INotebookEditorCreationOptions;\n\treadonly onDidChangeOptions: Event<void>;\n\treadonly onDidChangeDecorations: Event<void>;\n\tgetBaseCellEditorOptions(language: string): IBaseCellEditorOptions;\n\tcreateMarkupPreview(cell: ICellViewModel): Promise<void>;\n\tunhideMarkupPreviews(cells: readonly ICellViewModel[]): Promise<void>;\n\thideMarkupPreviews(cells: readonly ICellViewModel[]): Promise<void>;\n\n\t/**\n\t * Remove the output from the webview layer\n\t */\n\tremoveInset(output: IDisplayOutputViewModel): void;\n\n\t/**\n\t * Hide the inset in the webview layer without removing it\n\t */\n\thideInset(output: IDisplayOutputViewModel): void;\n\tdeltaCellContainerClassNames(cellId: string, added: string[], removed: string[]): void;\n}\n\nexport interface IActiveNotebookEditorDelegate extends INotebookEditorDelegate {\n\tgetViewModel(): INotebookViewModel;\n\ttextModel: NotebookTextModel;\n\tgetFocus(): ICellRange;\n\tcellAt(index: number): ICellViewModel;\n\tgetCellIndex(cell: ICellViewModel): number;\n\tgetNextVisibleCellIndex(index: number): number;\n}\n\nexport interface ISearchPreviewInfo {\n\tline: string;\n\trange: {\n\t\tstart: number;\n\t\tend: number;\n\t};\n}\n\nexport interface CellWebviewFindMatch {\n\treadonly index: number;\n\treadonly searchPreviewInfo?: ISearchPreviewInfo;\n}\n\nexport type CellContentFindMatch = FindMatch;\n\nexport interface CellFindMatch {\n\tcell: ICellViewModel;\n\tcontentMatches: CellContentFindMatch[];\n}\n\nexport interface CellFindMatchWithIndex {\n\tcell: ICellViewModel;\n\tindex: number;\n\tlength: number;\n\tgetMatch(index: number): FindMatch | CellWebviewFindMatch;\n\tcontentMatches: FindMatch[];\n\twebviewMatches: CellWebviewFindMatch[];\n}\n\nexport enum CellEditState {\n\t/**\n\t * Default state.\n\t * For markup cells, this is the renderer version of the markup.\n\t * For code cell, the browser focus should be on the container instead of the editor\n\t */\n\tPreview,\n\n\t/**\n\t * Editing mode. Source for markup or code is rendered in editors and the state will be persistent.\n\t */\n\tEditing\n}\n\nexport enum CellFocusMode {\n\tContainer,\n\tEditor,\n\tOutput\n}\n\nexport enum CursorAtBoundary {\n\tNone,\n\tTop,\n\tBottom,\n\tBoth\n}\n\nexport enum CursorAtLineBoundary {\n\tNone,\n\tStart,\n\tEnd,\n\tBoth\n}\n\nexport function getNotebookEditorFromEditorPane(editorPane?: IEditorPane): INotebookEditor | undefined {\n\tif (!editorPane) {\n\t\treturn;\n\t}\n\n\tif (editorPane.getId() === NOTEBOOK_EDITOR_ID) {\n\t\treturn editorPane.getControl() as INotebookEditor | undefined;\n\t}\n\n\tconst input = editorPane.input;\n\n\tif (input && isCompositeNotebookEditorInput(input)) {\n\t\treturn (editorPane.getControl() as { notebookEditor: INotebookEditor | undefined } | undefined)?.notebookEditor;\n\t}\n\n\treturn undefined;\n}\n\n/**\n * ranges: model selections\n * this will convert model selections to view indexes first, and then include the hidden ranges in the list view\n */\nexport function expandCellRangesWithHiddenCells(editor: INotebookEditor, ranges: ICellRange[]) {\n\t// assuming ranges are sorted and no overlap\n\tconst indexes = cellRangesToIndexes(ranges);\n\tconst modelRanges: ICellRange[] = [];\n\tindexes.forEach(index => {\n\t\tconst viewCell = editor.cellAt(index);\n\n\t\tif (!viewCell) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewIndex = editor.getViewIndexByModelIndex(index);\n\t\tif (viewIndex < 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst nextViewIndex = viewIndex + 1;\n\t\tconst range = editor.getCellRangeFromViewRange(viewIndex, nextViewIndex);\n\n\t\tif (range) {\n\t\t\tmodelRanges.push(range);\n\t\t}\n\t});\n\n\treturn reduceCellRanges(modelRanges);\n}\n\nexport function cellRangeToViewCells(editor: IActiveNotebookEditor, ranges: ICellRange[]) {\n\tconst cells: ICellViewModel[] = [];\n\treduceCellRanges(ranges).forEach(range => {\n\t\tcells.push(...editor.getCellsInRange(range));\n\t});\n\n\treturn cells;\n}\n\n//#region Cell Folding\nexport const enum CellFoldingState {\n\tNone,\n\tExpanded,\n\tCollapsed\n}\n\nexport interface EditorFoldingStateDelegate {\n\tgetCellIndex(cell: ICellViewModel): number;\n\tgetFoldingState(index: number): CellFoldingState;\n}\n//#endregion\n"]}