{"version":3,"sources":["vs/workbench/contrib/notebook/browser/notebookAccessibility.ts"],"names":[],"mappings":"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","file":"notebookAccessibility.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { format } from 'vs/base/common/strings';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { ServicesAccessor } from 'vs/editor/browser/editorExtensions';\nimport { AccessibleViewType, IAccessibleViewService } from 'vs/workbench/contrib/accessibility/browser/accessibleView';\nimport { AccessibilityVerbositySettingId } from 'vs/workbench/contrib/accessibility/browser/accessibilityConfiguration';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { getNotebookEditorFromEditorPane } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\n\nexport function getAccessibilityHelpText(accessor: ServicesAccessor): string {\n\tconst keybindingService = accessor.get(IKeybindingService);\n\tconst content = [];\n\tcontent.push(localize('notebook.overview', 'The notebook view is a collection of code and markdown cells. Code cells can be executed and will produce output directly below the cell.'));\n\tcontent.push(descriptionForCommand('notebook.cell.edit',\n\t\tlocalize('notebook.cell.edit', 'The Edit Cell command ({0}) will focus on the cell input.'),\n\t\tlocalize('notebook.cell.editNoKb', 'The Edit Cell command will focus on the cell input and is currently not triggerable by a keybinding.'), keybindingService));\n\tcontent.push(descriptionForCommand('notebook.cell.quitEdit',\n\t\tlocalize('notebook.cell.quitEdit', 'The Quit Edit command ({0}) will set focus on the cell container. The default (Escape) key may need to be pressed twice first exit the virtual cursor if active.'),\n\t\tlocalize('notebook.cell.quitEditNoKb', 'The Quit Edit command will set focus on the cell container and is currently not triggerable by a keybinding.'), keybindingService));\n\tcontent.push(descriptionForCommand('notebook.cell.focusInOutput',\n\t\tlocalize('notebook.cell.focusInOutput', 'The Focus Output command ({0}) will set focus in the cell\\'s output.'),\n\t\tlocalize('notebook.cell.focusInOutputNoKb', 'The Quit Edit command will set focus in the cell\\'s output and is currently not triggerable by a keybinding.'), keybindingService));\n\tcontent.push(localize('notebook.cellNavigation', 'The up and down arrows will move focus between cells while focused on the outer cell container'));\n\tcontent.push(descriptionForCommand('notebook.cell.executeAndFocusContainer',\n\t\tlocalize('notebook.cell.executeAndFocusContainer', 'The Execute Cell command ({0}) executes the cell that currently has focus.',),\n\t\tlocalize('notebook.cell.executeAndFocusContainerNoKb', 'The Execute Cell command executes the cell that currently has focus and is currently not triggerable by a keybinding.'), keybindingService));\n\tcontent.push(localize('notebook.cell.insertCodeCellBelowAndFocusContainer', 'The Insert Cell Above/Below commands will create new empty code cells'));\n\tcontent.push(localize('notebook.changeCellType', 'The Change Cell to Code/Markdown commands are used to switch between cell types.'));\n\n\n\treturn content.join('\\n\\n');\n}\n\nfunction descriptionForCommand(commandId: string, msg: string, noKbMsg: string, keybindingService: IKeybindingService): string {\n\tconst kb = keybindingService.lookupKeybinding(commandId);\n\tif (kb) {\n\t\treturn format(msg, kb.getAriaLabel());\n\t}\n\treturn format(noKbMsg, commandId);\n}\n\nexport async function runAccessibilityHelpAction(accessor: ServicesAccessor, editor: ICodeEditor): Promise<void> {\n\tconst accessibleViewService = accessor.get(IAccessibleViewService);\n\tconst helpText = getAccessibilityHelpText(accessor);\n\taccessibleViewService.show({\n\t\tverbositySettingKey: AccessibilityVerbositySettingId.Notebook,\n\t\tprovideContent: () => helpText,\n\t\tonClose: () => {\n\t\t\teditor.focus();\n\t\t},\n\t\toptions: { type: AccessibleViewType.Help }\n\t});\n}\n\nexport function showAccessibleOutput(accessibleViewService: IAccessibleViewService, editorService: IEditorService) {\n\tconst activePane = editorService.activeEditorPane;\n\tconst notebookEditor = getNotebookEditorFromEditorPane(activePane);\n\tconst notebookViewModel = notebookEditor?.getViewModel();\n\tconst selections = notebookViewModel?.getSelections();\n\tconst notebookDocument = notebookViewModel?.notebookDocument;\n\n\tif (!selections || !notebookDocument || !notebookEditor?.textModel) {\n\t\treturn false;\n\t}\n\n\tconst viewCell = notebookViewModel.viewCells[selections[0].start];\n\tlet outputContent = '';\n\tconst decoder = new TextDecoder();\n\tfor (let i = 0; i < viewCell.outputsViewModels.length; i++) {\n\t\tconst outputViewModel = viewCell.outputsViewModels[i];\n\t\tconst outputTextModel = viewCell.model.outputs[i];\n\t\tconst [mimeTypes, pick] = outputViewModel.resolveMimeTypes(notebookEditor.textModel, undefined);\n\t\tconst mimeType = mimeTypes[pick].mimeType;\n\t\tlet buffer = outputTextModel.outputs.find(output => output.mime === mimeType);\n\n\t\tif (!buffer || mimeType.startsWith('image')) {\n\t\t\tbuffer = outputTextModel.outputs.find(output => !output.mime.startsWith('image'));\n\t\t}\n\n\t\tlet text = `${mimeType}`; // default in case we can't get the text value for some reason.\n\t\tif (buffer) {\n\t\t\tconst charLimit = 100_000;\n\t\t\ttext = decoder.decode(buffer.data.slice(0, charLimit).buffer);\n\n\t\t\tif (buffer.data.byteLength > charLimit) {\n\t\t\t\ttext = text + '...(truncated)';\n\t\t\t}\n\n\t\t\tif (mimeType.endsWith('error')) {\n\t\t\t\ttext = text.replace(/\\\\u001b\\[[0-9;]*m/gi, '').replaceAll('\\\\n', '\\n');\n\t\t\t}\n\t\t}\n\n\t\tconst index = viewCell.outputsViewModels.length > 1\n\t\t\t? `Cell output ${i + 1} of ${viewCell.outputsViewModels.length}\\n`\n\t\t\t: '';\n\t\toutputContent = outputContent.concat(`${index}${text}\\n`);\n\t}\n\n\tif (!outputContent) {\n\t\treturn false;\n\t}\n\n\taccessibleViewService.show({\n\t\tverbositySettingKey: AccessibilityVerbositySettingId.Notebook,\n\t\tprovideContent(): string { return outputContent; },\n\t\tonClose() {\n\t\t\tnotebookEditor?.setFocus(selections[0]);\n\t\t\tactivePane?.focus();\n\t\t},\n\t\toptions: { type: AccessibleViewType.View }\n\t});\n\treturn true;\n}\n"]}