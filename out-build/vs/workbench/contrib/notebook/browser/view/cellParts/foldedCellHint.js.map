{"version":3,"sources":["vs/workbench/contrib/notebook/browser/view/cellParts/foldedCellHint.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAWhG,MAAa,IAAe,SAAQ,eAAI;QAEvC,YACkB,CAAgC,EAChC,CAAuB;YAExC,KAAK,EAAE,CAAC;YAHS,MAAC,GAAD,CAAC,CAA+B;YAChC,MAAC,GAAD,CAAC,CAAsB;QAGzC,CAAC;QAEQ,aAAa,CAAC,OAAa;YACnC,IAAI,CAAC,CAAC,CAAM,OAAO,CAAC,CAAC;QACtB,CAAC;QAEO,CAAC,CAAM,OAAa;YAC3B,IAAI,CAAC,IAAI,CAAC,CAAC,CAAe,QAAQ,EAAE,EAAE;gBACrC,OAAO;aACP;YAED,IAAI,OAAO,CAAC,gBAAgB,IAAI,OAAO,CAAC,YAAY,EAAE,KAAK,+BAAa,CAAC,OAAO,EAAE;gBACjF,GAAG,CAAC,GAAG,CAAE,IAAI,CAAC,CAAC,CAAU,CAAC;aAC1B;iBAAM,IAAI,OAAO,CAAC,YAAY,uCAA+B,EAAE;gBAC/D,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAe,YAAY,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;gBACtE,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAe,YAAY,EAAE,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC;gBACxE,GAAG,CAAC,GAAG,CAAG,IAAI,CAAC,CAAC,EAAW,IAAI,CAAC,CAAC,CAAmB,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC,CAAuB,OAAO,CAAC,CAAC,CAAC;gBACpG,GAAG,CAAC,GAAG,CAAE,IAAI,CAAC,CAAC,CAAU,CAAC;gBAE1B,MAAM,WAAW,GAAG,OAAO,CAAC,UAAU,CAAC,aAAa,CAAC;gBACrD,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,GAAG,GAAG,GAAG,WAAW,IAAI,CAAC;aAC/C;iBAAM;gBACN,GAAG,CAAC,GAAG,CAAE,IAAI,CAAC,CAAC,CAAU,CAAC;aAC1B;QACF,CAAC;QAEO,CAAC,CAAmB,GAAW;YACtC,MAAM,KAAK,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC;gBACxB,IAAA,cAAQ,EAAC,CAAkB,EAAE,IAAe,CAAC,CAAC,CAAC;gBAC/C,IAAA,cAAQ,EAAC,CAAwB,EAAE,IAAkB,EAAE,GAAG,CAAC,CAAC;YAE7D,OAAO,GAAG,CAAC,CAAC,CAAC,iCAAiC,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;QACnE,CAAC;QAEO,CAAC,CAAuB,OAAa;YAC5C,MAAM,UAAU,GAAG,GAAG,CAAC,CAAC,CAAC,8BAA8B,CAAC,CAAC;YACzD,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,qBAAS,CAAC,gBAAgB,CAAC,cAAG,CAAK,IAAI,CAAC,CAAC,CAAC;YACtE,IAAI,CAAC,CAAC,CAAS,GAAG,CAAC,GAAG,CAAmB,UAAU,EAAE,GAAG,CAAC,GAAG,CAAO,KAAK,EAAE,GAAG,EAAE;gBAC9E,MAAM,UAAU,GAAG,IAAI,CAAC,CAAC,CAAe,eAAe,CAAoB,wBAAI,CAAc,EAAE,CAAC,CAAC;gBACjG,MAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAe,YAAY,CAAC,OAAO,CAAC,CAAC;gBACvD,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;oBAC5B,UAAU,CAAC,mBAAmB,CAAC,GAAG,qCAA6B,CAAC,CAAC,CAAC;iBAClE;YACF,CAAC,CAAC,CAAC,CAAC;YAEJ,OAAO,UAAU,CAAC;QACnB,CAAC;QAEQ,uBAAuB,CAAC,OAAa;YAC7C,IAAI,CAAC,CAAC,CAAM,OAAO,CAAC,CAAC;QACtB,CAAC;KACD;IA1DD,oBA0DC","file":"foldedCellHint.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as DOM from 'vs/base/browser/dom';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { ThemeIcon } from 'vs/base/common/themables';\nimport { localize } from 'vs/nls';\nimport { FoldingController } from 'vs/workbench/contrib/notebook/browser/controller/foldingController';\nimport { CellEditState, CellFoldingState, INotebookEditor } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\nimport { CellContentPart } from 'vs/workbench/contrib/notebook/browser/view/cellPart';\nimport { MarkupCellViewModel } from 'vs/workbench/contrib/notebook/browser/viewModel/markupCellViewModel';\n\nexport class FoldedCellHint extends CellContentPart {\n\n\tconstructor(\n\t\tprivate readonly _notebookEditor: INotebookEditor,\n\t\tprivate readonly _container: HTMLElement,\n\t) {\n\t\tsuper();\n\t}\n\n\toverride didRenderCell(element: MarkupCellViewModel): void {\n\t\tthis.update(element);\n\t}\n\n\tprivate update(element: MarkupCellViewModel) {\n\t\tif (!this._notebookEditor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (element.isInputCollapsed || element.getEditState() === CellEditState.Editing) {\n\t\t\tDOM.hide(this._container);\n\t\t} else if (element.foldingState === CellFoldingState.Collapsed) {\n\t\t\tconst idx = this._notebookEditor.getViewModel().getCellIndex(element);\n\t\t\tconst length = this._notebookEditor.getViewModel().getFoldedLength(idx);\n\t\t\tDOM.reset(this._container, this.getHiddenCellsLabel(length), this.getHiddenCellHintButton(element));\n\t\t\tDOM.show(this._container);\n\n\t\t\tconst foldHintTop = element.layoutInfo.previewHeight;\n\t\t\tthis._container.style.top = `${foldHintTop}px`;\n\t\t} else {\n\t\t\tDOM.hide(this._container);\n\t\t}\n\t}\n\n\tprivate getHiddenCellsLabel(num: number): HTMLElement {\n\t\tconst label = num === 1 ?\n\t\t\tlocalize('hiddenCellsLabel', \"1 cell hidden\") :\n\t\t\tlocalize('hiddenCellsLabelPlural', \"{0} cells hidden\", num);\n\n\t\treturn DOM.$('span.notebook-folded-hint-label', undefined, label);\n\t}\n\n\tprivate getHiddenCellHintButton(element: MarkupCellViewModel): HTMLElement {\n\t\tconst expandIcon = DOM.$('span.cell-expand-part-button');\n\t\texpandIcon.classList.add(...ThemeIcon.asClassNameArray(Codicon.more));\n\t\tthis._register(DOM.addDisposableListener(expandIcon, DOM.EventType.CLICK, () => {\n\t\t\tconst controller = this._notebookEditor.getContribution<FoldingController>(FoldingController.id);\n\t\t\tconst idx = this._notebookEditor.getCellIndex(element);\n\t\t\tif (typeof idx === 'number') {\n\t\t\t\tcontroller.setFoldingStateDown(idx, CellFoldingState.Expanded, 1);\n\t\t\t}\n\t\t}));\n\n\t\treturn expandIcon;\n\t}\n\n\toverride updateInternalLayoutNow(element: MarkupCellViewModel) {\n\t\tthis.update(element);\n\t}\n}\n"]}