{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/notebook/browser/view/cellParts/cellProgressBar.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUzF,IAAM,IAAI,GAAV,MAAM,IAAgB,SAAQ,eAAI;QAIxC,YACC,eAA4B,EAC5B,uBAAoC,EACa,CAAmC;YACpF,KAAK,EAAE,CAAC;YADyC,MAAC,GAAD,CAAC,CAAkC;YAGpF,IAAI,CAAC,CAAC,GAAc,IAAI,CAAC,CAAC,CAAS,IAAI,iBAAG,CAAS,eAAe,EAAE,mBAAG,CAAsB,CAAC,CAAC;YAC/F,IAAI,CAAC,CAAC,CAAY,IAAI,EAAE,CAAC;YAEzB,IAAI,CAAC,CAAC,GAAuB,IAAI,CAAC,CAAC,CAAS,IAAI,iBAAG,CAAS,uBAAuB,EAAE,mBAAG,CAAsB,CAAC,CAAC;YAChH,IAAI,CAAC,CAAC,CAAqB,IAAI,EAAE,CAAC;QACnC,CAAC;QAEQ,aAAa,CAAC,OAAuB;YAC7C,IAAI,CAAC,CAAC,CAAwB,OAAO,CAAC,CAAC;QACxC,CAAC;QAEQ,uBAAuB,CAAC,OAAuB,EAAE,CAAkC;YAC3F,IAAI,CAAC,CAAC,CAAwB,OAAO,EAAE,CAAC,CAAC,CAAC;QAC3C,CAAC;QAEQ,WAAW,CAAC,OAAuB,EAAE,CAAgC;YAC7E,IAAI,CAAC,CAAC,eAAe,IAAI,CAAC,CAAC,uBAAuB,EAAE;gBACnD,IAAI,CAAC,CAAC,CAAwB,OAAO,CAAC,CAAC;aACvC;YAED,IAAI,CAAC,CAAC,qBAAqB,EAAE;gBAC5B,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAA8B,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBACnF,IAAI,OAAO,CAAC,gBAAgB,EAAE;oBAC7B,IAAI,CAAC,CAAC,CAAY,IAAI,EAAE,CAAC;oBACzB,IAAI,QAAQ,EAAE,KAAK,KAAK,2CAA0B,CAAC,SAAS,EAAE;wBAC7D,IAAI,CAAC,CAAC,CAAwB,OAAO,CAAC,CAAC;qBACvC;iBACD;qBAAM;oBACN,IAAI,CAAC,CAAC,CAAqB,IAAI,EAAE,CAAC;oBAClC,IAAI,QAAQ,EAAE,KAAK,KAAK,2CAA0B,CAAC,SAAS,EAAE;wBAC7D,IAAI,CAAC,CAAC,CAAwB,OAAO,CAAC,CAAC;qBACvC;iBACD;aACD;QACF,CAAC;QAEO,CAAC,CAAwB,OAAuB,EAAE,CAAmC;YAC5F,MAAM,QAAQ,GAAG,CAAC,EAAE,OAAO,IAAI,IAAI,CAAC,CAAC,CAA8B,gBAAgB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;YACjG,MAAM,WAAW,GAAG,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAqB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAY;YAC9F,IAAI,QAAQ,EAAE,KAAK,KAAK,2CAA0B,CAAC,SAAS,IAAI,CAAC,CAAC,QAAQ,CAAC,QAAQ,IAAI,OAAO,CAAC,gBAAgB,CAAC,EAAE;gBACjH,eAAe,CAAC,WAAW,CAAC,CAAC;aAC7B;iBAAM;gBACN,WAAW,CAAC,IAAI,EAAE,CAAC;aACnB;QACF,CAAC;KACD,CAAA;IAvDY,oBAAI;mBAAJ,IAAI;QAOd,WAAA,mCAAG,CAAA;OAPO,IAAI,CAuDhB;IAED,SAAS,eAAe,CAAC,WAAgB;QACxC,WAAW,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAClC,CAAC","file":"cellProgressBar.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ProgressBar } from 'vs/base/browser/ui/progressbar/progressbar';\nimport { defaultProgressBarStyles } from 'vs/platform/theme/browser/defaultStyles';\nimport { ICellViewModel } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\nimport { CellViewModelStateChangeEvent } from 'vs/workbench/contrib/notebook/browser/notebookViewEvents';\nimport { CellContentPart } from 'vs/workbench/contrib/notebook/browser/view/cellPart';\nimport { NotebookCellExecutionState } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { ICellExecutionStateChangedEvent, INotebookExecutionStateService } from 'vs/workbench/contrib/notebook/common/notebookExecutionStateService';\n\nexport class CellProgressBar extends CellContentPart {\n\tprivate readonly _progressBar: ProgressBar;\n\tprivate readonly _collapsedProgressBar: ProgressBar;\n\n\tconstructor(\n\t\teditorContainer: HTMLElement,\n\t\tcollapsedInputContainer: HTMLElement,\n\t\t@INotebookExecutionStateService private readonly _notebookExecutionStateService: INotebookExecutionStateService) {\n\t\tsuper();\n\n\t\tthis._progressBar = this._register(new ProgressBar(editorContainer, defaultProgressBarStyles));\n\t\tthis._progressBar.hide();\n\n\t\tthis._collapsedProgressBar = this._register(new ProgressBar(collapsedInputContainer, defaultProgressBarStyles));\n\t\tthis._collapsedProgressBar.hide();\n\t}\n\n\toverride didRenderCell(element: ICellViewModel): void {\n\t\tthis._updateForExecutionState(element);\n\t}\n\n\toverride updateForExecutionState(element: ICellViewModel, e: ICellExecutionStateChangedEvent): void {\n\t\tthis._updateForExecutionState(element, e);\n\t}\n\n\toverride updateState(element: ICellViewModel, e: CellViewModelStateChangeEvent): void {\n\t\tif (e.metadataChanged || e.internalMetadataChanged) {\n\t\t\tthis._updateForExecutionState(element);\n\t\t}\n\n\t\tif (e.inputCollapsedChanged) {\n\t\t\tconst exeState = this._notebookExecutionStateService.getCellExecution(element.uri);\n\t\t\tif (element.isInputCollapsed) {\n\t\t\t\tthis._progressBar.hide();\n\t\t\t\tif (exeState?.state === NotebookCellExecutionState.Executing) {\n\t\t\t\t\tthis._updateForExecutionState(element);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._collapsedProgressBar.hide();\n\t\t\t\tif (exeState?.state === NotebookCellExecutionState.Executing) {\n\t\t\t\t\tthis._updateForExecutionState(element);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _updateForExecutionState(element: ICellViewModel, e?: ICellExecutionStateChangedEvent): void {\n\t\tconst exeState = e?.changed ?? this._notebookExecutionStateService.getCellExecution(element.uri);\n\t\tconst progressBar = element.isInputCollapsed ? this._collapsedProgressBar : this._progressBar;\n\t\tif (exeState?.state === NotebookCellExecutionState.Executing && (!exeState.didPause || element.isInputCollapsed)) {\n\t\t\tshowProgressBar(progressBar);\n\t\t} else {\n\t\t\tprogressBar.hide();\n\t\t}\n\t}\n}\n\nfunction showProgressBar(progressBar: ProgressBar): void {\n\tprogressBar.infinite().show(500);\n}\n"]}