{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/notebook/browser/view/cellParts/cellDragRenderer.ts"],"names":[],"mappings":"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","file":"cellDragRenderer.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as DOM from 'vs/base/browser/dom';\nimport { createTrustedTypesPolicy } from 'vs/base/browser/trustedTypes';\nimport { Color } from 'vs/base/common/color';\nimport * as platform from 'vs/base/common/platform';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorOption } from 'vs/editor/common/config/editorOptions';\nimport { Range } from 'vs/editor/common/core/range';\nimport { ColorId } from 'vs/editor/common/encodedTokenAttributes';\nimport * as languages from 'vs/editor/common/languages';\nimport { tokenizeLineToHTML } from 'vs/editor/common/languages/textToHtmlTokenizer';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { BaseCellRenderTemplate } from 'vs/workbench/contrib/notebook/browser/view/notebookRenderingCommon';\n\nclass EditorTextRenderer {\n\n\tprivate static _ttPolicy = createTrustedTypesPolicy('cellRendererEditorText', {\n\t\tcreateHTML(input) { return input; }\n\t});\n\n\tgetRichText(editor: ICodeEditor, modelRange: Range): HTMLElement | null {\n\t\tconst model = editor.getModel();\n\t\tif (!model) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst colorMap = this.getDefaultColorMap();\n\t\tconst fontInfo = editor.getOptions().get(EditorOption.fontInfo);\n\t\tconst fontFamilyVar = '--notebook-editor-font-family';\n\t\tconst fontSizeVar = '--notebook-editor-font-size';\n\t\tconst fontWeightVar = '--notebook-editor-font-weight';\n\n\t\tconst style = ``\n\t\t\t+ `color: ${colorMap[ColorId.DefaultForeground]};`\n\t\t\t+ `background-color: ${colorMap[ColorId.DefaultBackground]};`\n\t\t\t+ `font-family: var(${fontFamilyVar});`\n\t\t\t+ `font-weight: var(${fontWeightVar});`\n\t\t\t+ `font-size: var(${fontSizeVar});`\n\t\t\t+ `line-height: ${fontInfo.lineHeight}px;`\n\t\t\t+ `white-space: pre;`;\n\n\t\tconst element = DOM.$('div', { style });\n\n\t\tconst fontSize = fontInfo.fontSize;\n\t\tconst fontWeight = fontInfo.fontWeight;\n\t\telement.style.setProperty(fontFamilyVar, fontInfo.fontFamily);\n\t\telement.style.setProperty(fontSizeVar, `${fontSize}px`);\n\t\telement.style.setProperty(fontWeightVar, fontWeight);\n\n\t\tconst linesHtml = this.getRichTextLinesAsHtml(model, modelRange, colorMap);\n\t\telement.innerHTML = linesHtml as string;\n\t\treturn element;\n\t}\n\n\tprivate getRichTextLinesAsHtml(model: ITextModel, modelRange: Range, colorMap: string[]): string | TrustedHTML {\n\t\tconst startLineNumber = modelRange.startLineNumber;\n\t\tconst startColumn = modelRange.startColumn;\n\t\tconst endLineNumber = modelRange.endLineNumber;\n\t\tconst endColumn = modelRange.endColumn;\n\n\t\tconst tabSize = model.getOptions().tabSize;\n\n\t\tlet result = '';\n\n\t\tfor (let lineNumber = startLineNumber; lineNumber <= endLineNumber; lineNumber++) {\n\t\t\tconst lineTokens = model.tokenization.getLineTokens(lineNumber);\n\t\t\tconst lineContent = lineTokens.getLineContent();\n\t\t\tconst startOffset = (lineNumber === startLineNumber ? startColumn - 1 : 0);\n\t\t\tconst endOffset = (lineNumber === endLineNumber ? endColumn - 1 : lineContent.length);\n\n\t\t\tif (lineContent === '') {\n\t\t\t\tresult += '<br>';\n\t\t\t} else {\n\t\t\t\tresult += tokenizeLineToHTML(lineContent, lineTokens.inflate(), colorMap, startOffset, endOffset, tabSize, platform.isWindows);\n\t\t\t}\n\t\t}\n\n\t\treturn EditorTextRenderer._ttPolicy?.createHTML(result) ?? result;\n\t}\n\n\tprivate getDefaultColorMap(): string[] {\n\t\tconst colorMap = languages.TokenizationRegistry.getColorMap();\n\t\tconst result: string[] = ['#000000'];\n\t\tif (colorMap) {\n\t\t\tfor (let i = 1, len = colorMap.length; i < len; i++) {\n\t\t\t\tresult[i] = Color.Format.CSS.formatHex(colorMap[i]);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\nexport class CodeCellDragImageRenderer {\n\tgetDragImage(templateData: BaseCellRenderTemplate, editor: ICodeEditor, type: 'code' | 'markdown'): HTMLElement {\n\t\tlet dragImage = this.getDragImageImpl(templateData, editor, type);\n\t\tif (!dragImage) {\n\t\t\t// TODO@roblourens I don't think this can happen\n\t\t\tdragImage = document.createElement('div');\n\t\t\tdragImage.textContent = '1 cell';\n\t\t}\n\n\t\treturn dragImage;\n\t}\n\n\tprivate getDragImageImpl(templateData: BaseCellRenderTemplate, editor: ICodeEditor, type: 'code' | 'markdown'): HTMLElement | null {\n\t\tconst dragImageContainer = templateData.container.cloneNode(true) as HTMLElement;\n\t\tdragImageContainer.classList.forEach(c => dragImageContainer.classList.remove(c));\n\t\tdragImageContainer.classList.add('cell-drag-image', 'monaco-list-row', 'focused', `${type}-cell-row`);\n\n\t\tconst editorContainer: HTMLElement | null = dragImageContainer.querySelector('.cell-editor-container');\n\t\tif (!editorContainer) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst richEditorText = new EditorTextRenderer().getRichText(editor, new Range(1, 1, 1, 1000));\n\t\tif (!richEditorText) {\n\t\t\treturn null;\n\t\t}\n\t\tDOM.reset(editorContainer, richEditorText);\n\n\t\treturn dragImageContainer;\n\t}\n}\n"]}