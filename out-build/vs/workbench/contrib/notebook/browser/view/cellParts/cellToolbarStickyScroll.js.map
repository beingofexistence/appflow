{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/notebook/browser/view/cellParts/cellToolbarStickyScroll.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,SAAgB,IAAI,CAA4B,cAA+B,EAAE,IAAoB,EAAE,OAAoB,EAAE,IAA6C;QACzK,MAAM,WAAW,GAAG,IAAI,EAAE,WAAW,IAAI,CAAC,CAAC;QAC3C,MAAM,GAAG,GAAG,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;QAE3B,MAAM,eAAe,GAAG,GAAG,EAAE;YAC5B,IAAI,IAAI,CAAC,gBAAgB,EAAE;gBAC1B,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,EAAE,CAAC;aACvB;iBAAM;gBACN,MAAM,YAAY,GAAG,cAAc,CAAC,aAAa,EAAE,CAAC,YAAY,CAAC;gBACjE,MAAM,SAAS,GAAG,cAAc,CAAC,SAAS,CAAC;gBAC3C,MAAM,UAAU,GAAG,cAAc,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;gBAChE,MAAM,IAAI,GAAG,SAAS,GAAG,UAAU,GAAG,WAAW,GAAG,YAAY,CAAC;gBACjE,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,YAAY,GAAG,IAAI,CAAC,UAAU,CAAC,eAAe,GAAG,EAAE,CAAC,CAAC,wEAAwE;gBAC5J,MAAM,GAAG,GAAG,MAAM,GAAG,EAAE,CAAC,CAAC,CAAC,sEAAsE;oBAC/F,IAAA,aAAG,EAAG,GAAG,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;oBAC1B,GAAG,CAAC;gBACL,OAAO,CAAC,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC;aAC/B;QACF,CAAC,CAAC;QAEF,eAAe,EAAE,CAAC;QAClB,OAAO,cAAc,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,eAAe,EAAE,CAAC,CAAC;IAC5D,CAAC;IAtBD,oBAsBC","file":"cellToolbarStickyScroll.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { clamp } from 'vs/base/common/numbers';\nimport { ICellViewModel, INotebookEditor } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\n\nexport function registerCellToolbarStickyScroll(notebookEditor: INotebookEditor, cell: ICellViewModel, element: HTMLElement, opts?: { extraOffset?: number; min?: number }): IDisposable {\n\tconst extraOffset = opts?.extraOffset ?? 0;\n\tconst min = opts?.min ?? 0;\n\n\tconst updateForScroll = () => {\n\t\tif (cell.isInputCollapsed) {\n\t\t\telement.style.top = '';\n\t\t} else {\n\t\t\tconst stickyHeight = notebookEditor.getLayoutInfo().stickyHeight;\n\t\t\tconst scrollTop = notebookEditor.scrollTop;\n\t\t\tconst elementTop = notebookEditor.getAbsoluteTopOfElement(cell);\n\t\t\tconst diff = scrollTop - elementTop + extraOffset + stickyHeight;\n\t\t\tconst maxTop = cell.layoutInfo.editorHeight + cell.layoutInfo.statusBarHeight - 45; // subtract roughly the height of the execution order label plus padding\n\t\t\tconst top = maxTop > 20 ? // Don't move the run button if it can only move a very short distance\n\t\t\t\tclamp(min, diff, maxTop) :\n\t\t\t\tmin;\n\t\t\telement.style.top = `${top}px`;\n\t\t}\n\t};\n\n\tupdateForScroll();\n\treturn notebookEditor.onDidScroll(() => updateForScroll());\n}\n"]}