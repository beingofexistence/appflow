{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/notebook/browser/view/cellPart.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG;;;OAGG;IACH,MAAsB,IAAgB,SAAQ,eAAG;QAIhD;YACC,KAAK,EAAE,CAAC;YAHC,MAAC,GAAiB,IAAI,eAAG,EAAc,CAAC;QAIlD,CAAC;QAED;;;WAGG;QACH,iBAAiB,CAAC,OAAuB,IAAU,CAAC;QAEpD;;WAEG;QACH,UAAU,CAAC,OAAuB;YACjC,IAAI,CAAC,CAAC,GAAa,OAAO,CAAC;YAC3B,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAC7B,CAAC;QAED,aAAa,CAAC,OAAuB,IAAU,CAAC;QAEhD;;WAEG;QACH,YAAY,CAAC,OAAuB;YACnC,IAAI,CAAC,CAAC,GAAa,SAAS,CAAC;YAC7B,IAAI,CAAC,CAAC,CAAe,KAAK,EAAE,CAAC;QAC9B,CAAC;QAED;;WAEG;QACH,aAAa,KAAW,CAAC;QAEzB;;;;WAIG;QACH,uBAAuB,CAAC,OAAuB,IAAU,CAAC;QAE1D;;WAEG;QACH,WAAW,CAAC,OAAuB,EAAE,CAAgC,IAAU,CAAC;QAEhF;;WAEG;QACH,uBAAuB,CAAC,OAAuB,EAAE,CAAkC,IAAU,CAAC;KAC9F;IArDD,oBAqDC;IAED;;;OAGG;IACH,MAAsB,IAAgB,SAAQ,eAAG;QAIhD;YACC,KAAK,EAAE,CAAC;YAHU,MAAC,GAAiB,IAAI,CAAC,CAAC,CAAS,IAAI,eAAG,EAAc,CAAC,CAAC;QAI3E,CAAC;QAED;;;WAGG;QACH,iBAAiB,CAAC,OAAuB,IAAU,CAAC;QAEpD;;WAEG;QACH,UAAU,CAAC,OAAuB;YACjC,IAAI,CAAC,CAAC,GAAa,OAAO,CAAC;YAC3B,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;QAC7B,CAAC;QAED,aAAa,CAAC,OAAuB,IAAU,CAAC;QAEhD;;WAEG;QACH,YAAY,CAAC,OAAuB;YACnC,IAAI,CAAC,CAAC,GAAa,SAAS,CAAC;YAC7B,IAAI,CAAC,CAAC,CAAe,KAAK,EAAE,CAAC;QAC9B,CAAC;QAED;;;;WAIG;QACH,uBAAuB,CAAC,OAAuB,IAAU,CAAC;QAE1D;;WAEG;QACH,WAAW,CAAC,OAAuB,EAAE,CAAgC,IAAU,CAAC;QAEhF;;WAEG;QACH,uBAAuB,CAAC,OAAuB,EAAE,CAAkC,IAAU,CAAC;KAC9F;IAhDD,oBAgDC;IAED,MAAa,IAAoB,SAAQ,eAAG;QAK3C,YACkB,CAAwC,EACxC,CAAwC;YAEzD,KAAK,EAAE,CAAC;YAHS,MAAC,GAAD,CAAC,CAAuC;YACxC,MAAC,GAAD,CAAC,CAAuC;YANlD,MAAC,GAA4B,IAAI,CAAC,CAAC,CAAS,IAAI,eAAG,EAAgB,CAAC,CAAC;YACrE,MAAC,GAA8B,IAAI,CAAC,CAAC,CAAS,IAAI,eAAG,EAAgB,CAAC,CAAC;YACvE,MAAC,GAAuC,IAAI,CAAC,CAAC,CAAS,IAAI,eAAG,EAAgB,CAAC,CAAC;QAOxF,CAAC;QAED,iBAAiB,CAAC,KAAiC;YAClD,OAAO,IAAI,IAAI,CAAgB,IAAI,CAAC,CAAC,CAAY,MAAM,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC,CAAY,CAAC;QACpF,CAAC;QAED,iBAAiB,CAAC,KAAiC;YAClD,OAAO,IAAI,IAAI,CAAgB,IAAI,CAAC,CAAC,EAAa,IAAI,CAAC,CAAC,CAAY,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;QACpF,CAAC;QAED,kBAAkB,CAAC,OAAuB;YACzC,gBAAgB;YAChB,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,CAAC,EAAa;gBACrC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;aAChC;YAED,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,CAAC,EAAa;gBACrC,IAAI,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;aAChC;YAED,uBAAuB;YACvB,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,CAAC,EAAa;gBACrC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;aACzB;YAED,IAAI,CAAC,CAAC,CAA0B,KAAK,GAAG,GAAG,CAAC,GAAG,CAAI,GAAG,EAAE;gBACvD,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,CAAC,EAAa;oBACrC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;iBACzB;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,YAAY,CAAC,OAAuB;YACnC,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,CAAC,EAAa;gBACrC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;aAC3B;YAED,IAAI,CAAC,CAAC,CAA0B,KAAK,GAAG,SAAS,CAAC;YAClD,IAAI,CAAC,CAAC,CAA4B,KAAK,GAAG,SAAS,CAAC;YACpD,IAAI,CAAC,CAAC,CAAqC,KAAK,GAAG,SAAS,CAAC;YAE7D,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,CAAC,EAAa;gBACrC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;aAC3B;QACF,CAAC;QAED,uBAAuB,CAAC,QAAwB;YAC/C,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,CAAC,EAAa;gBACrC,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;aACvC;YAED,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,CAAC,EAAa;gBACrC,IAAI,CAAC,uBAAuB,CAAC,QAAQ,CAAC,CAAC;aACvC;QACF,CAAC;QAED,aAAa;YACZ,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,CAAC,EAAa;gBACrC,IAAI,CAAC,aAAa,EAAE,CAAC;aACrB;QACF,CAAC;QAED,WAAW,CAAC,QAAwB,EAAE,CAAgC;YACrE,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,CAAC,EAAa;gBACrC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;aAC9B;YAED,IAAI,CAAC,CAAC,CAA4B,KAAK,GAAG,GAAG,CAAC,GAAG,CAAI,GAAG,EAAE;gBACzD,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,CAAC,EAAa;oBACrC,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;iBAC9B;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,uBAAuB,CAAC,QAAwB,EAAE,CAAkC;YACnF,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,CAAC,EAAa;gBACrC,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;aAC1C;YAED,IAAI,CAAC,CAAC,CAAqC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAI,GAAG,EAAE;gBAClE,KAAK,MAAM,IAAI,IAAI,IAAI,CAAC,CAAC,EAAa;oBACrC,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;iBAC1C;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;KACD;IA/FD,oBA+FC","file":"cellPart.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as DOM from 'vs/base/browser/dom';\nimport { Disposable, DisposableStore, MutableDisposable } from 'vs/base/common/lifecycle';\nimport { ICellViewModel } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\nimport { CellViewModelStateChangeEvent } from 'vs/workbench/contrib/notebook/browser/notebookViewEvents';\nimport { ICellExecutionStateChangedEvent } from 'vs/workbench/contrib/notebook/common/notebookExecutionStateService';\n\n/**\n * A content part is a non-floating element that is rendered inside a cell.\n * The rendering of the content part is synchronous to avoid flickering.\n */\nexport abstract class CellContentPart extends Disposable {\n\tprotected currentCell: ICellViewModel | undefined;\n\tprotected cellDisposables = new DisposableStore();\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Prepare model for cell part rendering\n\t * No DOM operations recommended within this operation\n\t */\n\tprepareRenderCell(element: ICellViewModel): void { }\n\n\t/**\n\t * Update the DOM for the cell `element`\n\t */\n\trenderCell(element: ICellViewModel): void {\n\t\tthis.currentCell = element;\n\t\tthis.didRenderCell(element);\n\t}\n\n\tdidRenderCell(element: ICellViewModel): void { }\n\n\t/**\n\t * Dispose any disposables generated from `didRenderCell`\n\t */\n\tunrenderCell(element: ICellViewModel): void {\n\t\tthis.currentCell = undefined;\n\t\tthis.cellDisposables.clear();\n\t}\n\n\t/**\n\t * Perform DOM read operations to prepare for the list/cell layout update.\n\t */\n\tprepareLayout(): void { }\n\n\t/**\n\t * Update internal DOM (top positions) per cell layout info change\n\t * Note that a cell part doesn't need to call `DOM.scheduleNextFrame`,\n\t * the list view will ensure that layout call is invoked in the right frame\n\t */\n\tupdateInternalLayoutNow(element: ICellViewModel): void { }\n\n\t/**\n\t * Update per cell state change\n\t */\n\tupdateState(element: ICellViewModel, e: CellViewModelStateChangeEvent): void { }\n\n\t/**\n\t * Update per execution state change.\n\t */\n\tupdateForExecutionState(element: ICellViewModel, e: ICellExecutionStateChangedEvent): void { }\n}\n\n/**\n * An overlay part renders on top of other components.\n * The rendering of the overlay part might be postponed to the next animation frame to avoid forced reflow.\n */\nexport abstract class CellOverlayPart extends Disposable {\n\tprotected currentCell: ICellViewModel | undefined;\n\tprotected readonly cellDisposables = this._register(new DisposableStore());\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t/**\n\t * Prepare model for cell part rendering\n\t * No DOM operations recommended within this operation\n\t */\n\tprepareRenderCell(element: ICellViewModel): void { }\n\n\t/**\n\t * Update the DOM for the cell `element`\n\t */\n\trenderCell(element: ICellViewModel): void {\n\t\tthis.currentCell = element;\n\t\tthis.didRenderCell(element);\n\t}\n\n\tdidRenderCell(element: ICellViewModel): void { }\n\n\t/**\n\t * Dispose any disposables generated from `didRenderCell`\n\t */\n\tunrenderCell(element: ICellViewModel): void {\n\t\tthis.currentCell = undefined;\n\t\tthis.cellDisposables.clear();\n\t}\n\n\t/**\n\t * Update internal DOM (top positions) per cell layout info change\n\t * Note that a cell part doesn't need to call `DOM.scheduleNextFrame`,\n\t * the list view will ensure that layout call is invoked in the right frame\n\t */\n\tupdateInternalLayoutNow(element: ICellViewModel): void { }\n\n\t/**\n\t * Update per cell state change\n\t */\n\tupdateState(element: ICellViewModel, e: CellViewModelStateChangeEvent): void { }\n\n\t/**\n\t * Update per execution state change.\n\t */\n\tupdateForExecutionState(element: ICellViewModel, e: ICellExecutionStateChangedEvent): void { }\n}\n\nexport class CellPartsCollection extends Disposable {\n\tprivate _scheduledOverlayRendering = this._register(new MutableDisposable());\n\tprivate _scheduledOverlayUpdateState = this._register(new MutableDisposable());\n\tprivate _scheduledOverlayUpdateExecutionState = this._register(new MutableDisposable());\n\n\tconstructor(\n\t\tprivate readonly contentParts: readonly CellContentPart[],\n\t\tprivate readonly overlayParts: readonly CellOverlayPart[]\n\t) {\n\t\tsuper();\n\t}\n\n\tconcatContentPart(other: readonly CellContentPart[]): CellPartsCollection {\n\t\treturn new CellPartsCollection(this.contentParts.concat(other), this.overlayParts);\n\t}\n\n\tconcatOverlayPart(other: readonly CellOverlayPart[]): CellPartsCollection {\n\t\treturn new CellPartsCollection(this.contentParts, this.overlayParts.concat(other));\n\t}\n\n\tscheduleRenderCell(element: ICellViewModel): void {\n\t\t// prepare model\n\t\tfor (const part of this.contentParts) {\n\t\t\tpart.prepareRenderCell(element);\n\t\t}\n\n\t\tfor (const part of this.overlayParts) {\n\t\t\tpart.prepareRenderCell(element);\n\t\t}\n\n\t\t// render content parts\n\t\tfor (const part of this.contentParts) {\n\t\t\tpart.renderCell(element);\n\t\t}\n\n\t\tthis._scheduledOverlayRendering.value = DOM.modify(() => {\n\t\t\tfor (const part of this.overlayParts) {\n\t\t\t\tpart.renderCell(element);\n\t\t\t}\n\t\t});\n\t}\n\n\tunrenderCell(element: ICellViewModel): void {\n\t\tfor (const part of this.contentParts) {\n\t\t\tpart.unrenderCell(element);\n\t\t}\n\n\t\tthis._scheduledOverlayRendering.value = undefined;\n\t\tthis._scheduledOverlayUpdateState.value = undefined;\n\t\tthis._scheduledOverlayUpdateExecutionState.value = undefined;\n\n\t\tfor (const part of this.overlayParts) {\n\t\t\tpart.unrenderCell(element);\n\t\t}\n\t}\n\n\tupdateInternalLayoutNow(viewCell: ICellViewModel) {\n\t\tfor (const part of this.contentParts) {\n\t\t\tpart.updateInternalLayoutNow(viewCell);\n\t\t}\n\n\t\tfor (const part of this.overlayParts) {\n\t\t\tpart.updateInternalLayoutNow(viewCell);\n\t\t}\n\t}\n\n\tprepareLayout() {\n\t\tfor (const part of this.contentParts) {\n\t\t\tpart.prepareLayout();\n\t\t}\n\t}\n\n\tupdateState(viewCell: ICellViewModel, e: CellViewModelStateChangeEvent) {\n\t\tfor (const part of this.contentParts) {\n\t\t\tpart.updateState(viewCell, e);\n\t\t}\n\n\t\tthis._scheduledOverlayUpdateState.value = DOM.modify(() => {\n\t\t\tfor (const part of this.overlayParts) {\n\t\t\t\tpart.updateState(viewCell, e);\n\t\t\t}\n\t\t});\n\t}\n\n\tupdateForExecutionState(viewCell: ICellViewModel, e: ICellExecutionStateChangedEvent) {\n\t\tfor (const part of this.contentParts) {\n\t\t\tpart.updateForExecutionState(viewCell, e);\n\t\t}\n\n\t\tthis._scheduledOverlayUpdateExecutionState.value = DOM.modify(() => {\n\t\t\tfor (const part of this.overlayParts) {\n\t\t\t\tpart.updateForExecutionState(viewCell, e);\n\t\t\t}\n\t\t});\n\t}\n}\n"]}