{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/notebook/browser/view/notebookRenderingCommon.ts"],"names":[],"mappings":"AAAA;;;gGAGgG","file":"notebookRenderingCommon.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { FastDomNode } from 'vs/base/browser/fastDomNode';\nimport { IMouseWheelEvent } from 'vs/base/browser/mouseEvent';\nimport { IListContextMenuEvent, IListEvent, IListMouseEvent } from 'vs/base/browser/ui/list/list';\nimport { IListStyles } from 'vs/base/browser/ui/list/listWidget';\nimport { Event } from 'vs/base/common/event';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ScrollEvent } from 'vs/base/common/scrollable';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { Range } from 'vs/editor/common/core/range';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IWorkbenchListOptionsUpdate } from 'vs/platform/list/browser/listService';\nimport { CellRevealRangeType, CellRevealSyncType, CellRevealType, ICellOutputViewModel, ICellViewModel } from 'vs/workbench/contrib/notebook/browser/notebookBrowser';\nimport { CellPartsCollection } from 'vs/workbench/contrib/notebook/browser/view/cellPart';\nimport { CellViewModel, NotebookViewModel } from 'vs/workbench/contrib/notebook/browser/viewModel/notebookViewModelImpl';\nimport { ICellRange } from 'vs/workbench/contrib/notebook/common/notebookRange';\n\n\nexport interface INotebookCellList {\n\tisDisposed: boolean;\n\tinRenderingTransaction: boolean;\n\tviewModel: NotebookViewModel | null;\n\twebviewElement: FastDomNode<HTMLElement> | null;\n\treadonly contextKeyService: IContextKeyService;\n\telement(index: number): ICellViewModel | undefined;\n\telementAt(position: number): ICellViewModel | undefined;\n\telementHeight(element: ICellViewModel): number;\n\tonWillScroll: Event<ScrollEvent>;\n\tonDidScroll: Event<ScrollEvent>;\n\tonDidChangeFocus: Event<IListEvent<ICellViewModel>>;\n\tonDidChangeContentHeight: Event<number>;\n\tonDidChangeVisibleRanges: Event<void>;\n\tvisibleRanges: ICellRange[];\n\tscrollTop: number;\n\tscrollHeight: number;\n\tscrollLeft: number;\n\tlength: number;\n\trowsContainer: HTMLElement;\n\tscrollableElement: HTMLElement;\n\tariaLabel: string;\n\treadonly onDidRemoveOutputs: Event<readonly ICellOutputViewModel[]>;\n\treadonly onDidHideOutputs: Event<readonly ICellOutputViewModel[]>;\n\treadonly onDidRemoveCellsFromView: Event<readonly ICellViewModel[]>;\n\treadonly onMouseUp: Event<IListMouseEvent<CellViewModel>>;\n\treadonly onMouseDown: Event<IListMouseEvent<CellViewModel>>;\n\treadonly onContextMenu: Event<IListContextMenuEvent<CellViewModel>>;\n\tdetachViewModel(): void;\n\tattachViewModel(viewModel: NotebookViewModel): void;\n\tattachWebview(element: HTMLElement): void;\n\tclear(): void;\n\tgetCellViewScrollTop(cell: ICellViewModel): number;\n\tgetCellViewScrollBottom(cell: ICellViewModel): number;\n\tgetViewIndex(cell: ICellViewModel): number | undefined;\n\tgetViewIndex2(modelIndex: number): number | undefined;\n\tgetModelIndex(cell: CellViewModel): number | undefined;\n\tgetModelIndex2(viewIndex: number): number | undefined;\n\tgetVisibleRangesPlusViewportAboveAndBelow(): ICellRange[];\n\tfocusElement(element: ICellViewModel): void;\n\tselectElements(elements: ICellViewModel[]): void;\n\tgetFocusedElements(): ICellViewModel[];\n\tgetSelectedElements(): ICellViewModel[];\n\trevealCellsInView(range: ICellRange): void;\n\tscrollToBottom(): void;\n\trevealCell(cell: ICellViewModel, revealType: CellRevealSyncType): void;\n\trevealCellAsync(cell: ICellViewModel, revealType: CellRevealType): Promise<void>;\n\trevealCellRangeAsync(cell: ICellViewModel, range: Selection | Range, revealType: CellRevealRangeType): Promise<void>;\n\trevealCellOffsetInCenterAsync(element: ICellViewModel, offset: number): Promise<void>;\n\tsetHiddenAreas(_ranges: ICellRange[], triggerViewUpdate: boolean): boolean;\n\tdomElementOfElement(element: ICellViewModel): HTMLElement | null;\n\tfocusView(): void;\n\ttriggerScrollFromMouseWheelEvent(browserEvent: IMouseWheelEvent): void;\n\tupdateElementHeight2(element: ICellViewModel, size: number, anchorElementIndex?: number | null): void;\n\tdomFocus(): void;\n\tfocusContainer(): void;\n\tsetCellEditorSelection(element: ICellViewModel, range: Range): void;\n\tstyle(styles: IListStyles): void;\n\tgetRenderHeight(): number;\n\tgetScrollHeight(): number;\n\tupdateOptions(options: IWorkbenchListOptionsUpdate): void;\n\tlayout(height?: number, width?: number): void;\n\tdispose(): void;\n}\n\nexport interface BaseCellRenderTemplate {\n\treadonly rootContainer: HTMLElement;\n\treadonly editorPart: HTMLElement;\n\treadonly cellInputCollapsedContainer: HTMLElement;\n\treadonly instantiationService: IInstantiationService;\n\treadonly container: HTMLElement;\n\treadonly cellContainer: HTMLElement;\n\treadonly templateDisposables: DisposableStore;\n\treadonly elementDisposables: DisposableStore;\n\tcurrentRenderedCell?: ICellViewModel;\n\tcellParts: CellPartsCollection;\n\ttoJSON: () => object;\n}\n\nexport interface MarkdownCellRenderTemplate extends BaseCellRenderTemplate {\n\treadonly editorContainer: HTMLElement;\n\treadonly foldingIndicator: HTMLElement;\n\tcurrentEditor?: ICodeEditor;\n}\n\nexport interface CodeCellRenderTemplate extends BaseCellRenderTemplate {\n\toutputContainer: FastDomNode<HTMLElement>;\n\tcellOutputCollapsedContainer: HTMLElement;\n\toutputShowMoreContainer: FastDomNode<HTMLElement>;\n\tfocusSinkElement: HTMLElement;\n\teditor: ICodeEditor;\n}\n\n\n"]}