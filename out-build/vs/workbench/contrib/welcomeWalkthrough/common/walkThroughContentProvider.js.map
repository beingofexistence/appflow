{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/welcomeWalkthrough/common/walkThroughContentProvider.ts"],"names":[],"mappings":"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","file":"walkThroughContentProvider.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { ITextModelService, ITextModelContentProvider } from 'vs/editor/common/services/resolverService';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { ITextModel, DefaultEndOfLine, EndOfLinePreference, ITextBufferFactory } from 'vs/editor/common/model';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { marked } from 'vs/base/common/marked/marked';\nimport { Schemas } from 'vs/base/common/network';\nimport { Range } from 'vs/editor/common/core/range';\nimport { createTextBufferFactory } from 'vs/editor/common/model/textModel';\nimport { assertIsDefined } from 'vs/base/common/types';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\n\nexport function requireToContent(instantiationService: IInstantiationService, resource: URI): Promise<string> {\n\tif (!resource.query) {\n\t\tthrow new Error('Welcome: invalid resource');\n\t}\n\n\tconst query = JSON.parse(resource.query);\n\tif (!query.moduleId) {\n\t\tthrow new Error('Welcome: invalid resource');\n\t}\n\n\tconst content: Promise<string> = new Promise<string>((resolve, reject) => {\n\t\trequire([query.moduleId], content => {\n\t\t\ttry {\n\t\t\t\tresolve(instantiationService.invokeFunction(content.default));\n\t\t\t} catch (err) {\n\t\t\t\treject(err);\n\t\t\t}\n\t\t});\n\t});\n\n\treturn content;\n}\n\nexport class WalkThroughSnippetContentProvider implements ITextModelContentProvider, IWorkbenchContribution {\n\tprivate loads = new Map<string, Promise<ITextBufferFactory>>();\n\n\tconstructor(\n\t\t@ITextModelService private readonly textModelResolverService: ITextModelService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t) {\n\t\tthis.textModelResolverService.registerTextModelContentProvider(Schemas.walkThroughSnippet, this);\n\t}\n\n\tprivate async textBufferFactoryFromResource(resource: URI): Promise<ITextBufferFactory> {\n\t\tlet ongoing = this.loads.get(resource.toString());\n\t\tif (!ongoing) {\n\t\t\tongoing = requireToContent(this.instantiationService, resource)\n\t\t\t\t.then(content => createTextBufferFactory(content))\n\t\t\t\t.finally(() => this.loads.delete(resource.toString()));\n\t\t\tthis.loads.set(resource.toString(), ongoing);\n\t\t}\n\t\treturn ongoing;\n\t}\n\n\tpublic async provideTextContent(resource: URI): Promise<ITextModel> {\n\t\tconst factory = await this.textBufferFactoryFromResource(resource.with({ fragment: '' }));\n\t\tlet codeEditorModel = this.modelService.getModel(resource);\n\t\tif (!codeEditorModel) {\n\t\t\tconst j = parseInt(resource.fragment);\n\t\t\tlet i = 0;\n\t\t\tconst renderer = new marked.Renderer();\n\t\t\trenderer.code = (code, lang) => {\n\t\t\t\ti++;\n\t\t\t\tconst languageId = typeof lang === 'string' ? this.languageService.getLanguageIdByLanguageName(lang) || '' : '';\n\t\t\t\tconst languageSelection = this.languageService.createById(languageId);\n\t\t\t\t// Create all models for this resource in one go... we'll need them all and we don't want to re-parse markdown each time\n\t\t\t\tconst model = this.modelService.createModel(code, languageSelection, resource.with({ fragment: `${i}.${lang}` }));\n\t\t\t\tif (i === j) { codeEditorModel = model; }\n\t\t\t\treturn '';\n\t\t\t};\n\t\t\tconst textBuffer = factory.create(DefaultEndOfLine.LF).textBuffer;\n\t\t\tconst lineCount = textBuffer.getLineCount();\n\t\t\tconst range = new Range(1, 1, lineCount, textBuffer.getLineLength(lineCount) + 1);\n\t\t\tconst markdown = textBuffer.getValueInRange(range, EndOfLinePreference.TextDefined);\n\t\t\tmarked(markdown, { renderer });\n\t\t}\n\t\treturn assertIsDefined(codeEditorModel);\n\t}\n}\n"]}