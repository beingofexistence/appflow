{"version":3,"sources":["vs/workbench/contrib/welcomeWalkthrough/browser/editor/editorWalkThrough.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAahG,MAAM,MAAM,GAAG,oCAAoC,CAAC;IACpD,MAAM,YAAY,GAA4B;QAC7C,MAAM;QACN,IAAI,EAAE,IAAA,cAAQ,EAAC,CAAyB,EAAE,IAAmB,CAAC;QAC9D,QAAQ,EAAE,aAAG,CAAQ,YAAY,CAAC,sFAAsF,CAAC;aACvH,IAAI,CAAC;YACL,MAAM,EAAE,iBAAO,CAAC,WAAW;YAC3B,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,mFAAmF,EAAE,CAAC;SACxH,CAAC;QACH,aAAa,EAAE,aAAa;KAC5B,CAAC;IAEF,MAAa,IAAwB,SAAQ,aAAG;iBAExB,OAAE,GAAG,4CAA4C,CAAC;iBAClD,UAAK,GAAG,EAAE,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAmB,EAAE,IAA+B,CAAC,EAAE,QAAQ,EAAE,+BAA+B,EAAE,CAAC;QAEpJ;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,IAAI,CAAoB,EAAE;gBAC9B,KAAK,EAAE,IAAI,CAAoB,KAAK;gBACpC,QAAQ,EAAE,4BAAG,CAAQ,IAAI;gBACzB,EAAE,EAAE,IAAI;aACR,CAAC,CAAC;QACJ,CAAC;QAEe,GAAG,CAAC,eAAiC;YACpD,MAAM,aAAa,GAAG,eAAe,CAAC,GAAG,CAAC,mBAAG,CAAY,CAAC;YAC1D,MAAM,oBAAoB,GAAG,eAAe,CAAC,GAAG,CAAC,mBAAG,CAAmB,CAAC;YACxE,MAAM,KAAK,GAAG,oBAAoB,CAAC,cAAc,CAAC,uBAAI,EAAc,YAAY,CAAC,CAAC;YAClF,yCAAyC;YACzC,OAAO,aAAa,CAAC,UAAU,CAAC,KAAK,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;iBACtD,IAAI,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACxB,CAAC;;IArBF,oBAsBC;IAED,MAAa,IAAI;iBAEA,OAAE,GAAG,MAAM,CAAC;QAErB,YAAY,CAAC,WAAgB;YACnC,OAAO,IAAI,CAAC;QACb,CAAC;QAEM,SAAS,CAAC,WAAgB;YAChC,OAAO,EAAE,CAAC;QACX,CAAC;QAEM,WAAW,CAAC,oBAAyB;YAC3C,OAAO,oBAAoB,CAAC,cAAc,CAAC,uBAAI,EAAc,YAAY,CAAC,CAAC;QAC5E,CAAC;;IAdF,oBAeC","file":"editorWalkThrough.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/workbench/contrib/welcomeWalkthrough/browser/editor/vs_code_editor_walkthrough';\nimport { localize } from 'vs/nls';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { WalkThroughInput, WalkThroughInputOptions } from 'vs/workbench/contrib/welcomeWalkthrough/browser/walkThroughInput';\nimport { FileAccess, Schemas } from 'vs/base/common/network';\nimport { IEditorSerializer } from 'vs/workbench/common/editor';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { Action2 } from 'vs/platform/actions/common/actions';\nimport { Categories } from 'vs/platform/action/common/actionCommonCategories';\n\nconst typeId = 'workbench.editors.walkThroughInput';\nconst inputOptions: WalkThroughInputOptions = {\n\ttypeId,\n\tname: localize('editorWalkThrough.title', \"Editor Playground\"),\n\tresource: FileAccess.asBrowserUri('vs/workbench/contrib/welcomeWalkthrough/browser/editor/vs_code_editor_walkthrough.md')\n\t\t.with({\n\t\t\tscheme: Schemas.walkThrough,\n\t\t\tquery: JSON.stringify({ moduleId: 'vs/workbench/contrib/welcomeWalkthrough/browser/editor/vs_code_editor_walkthrough' })\n\t\t}),\n\ttelemetryFrom: 'walkThrough'\n};\n\nexport class EditorWalkThroughAction extends Action2 {\n\n\tpublic static readonly ID = 'workbench.action.showInteractivePlayground';\n\tpublic static readonly LABEL = { value: localize('editorWalkThrough', \"Interactive Editor Playground\"), original: 'Interactive Editor Playground' };\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: EditorWalkThroughAction.ID,\n\t\t\ttitle: EditorWalkThroughAction.LABEL,\n\t\t\tcategory: Categories.Help,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\tpublic override run(serviceAccessor: ServicesAccessor): Promise<void> {\n\t\tconst editorService = serviceAccessor.get(IEditorService);\n\t\tconst instantiationService = serviceAccessor.get(IInstantiationService);\n\t\tconst input = instantiationService.createInstance(WalkThroughInput, inputOptions);\n\t\t// TODO @lramos15 adopt the resolver here\n\t\treturn editorService.openEditor(input, { pinned: true })\n\t\t\t.then(() => void (0));\n\t}\n}\n\nexport class EditorWalkThroughInputSerializer implements IEditorSerializer {\n\n\tstatic readonly ID = typeId;\n\n\tpublic canSerialize(editorInput: EditorInput): boolean {\n\t\treturn true;\n\t}\n\n\tpublic serialize(editorInput: EditorInput): string {\n\t\treturn '';\n\t}\n\n\tpublic deserialize(instantiationService: IInstantiationService): WalkThroughInput {\n\t\treturn instantiationService.createInstance(WalkThroughInput, inputOptions);\n\t}\n}\n"]}