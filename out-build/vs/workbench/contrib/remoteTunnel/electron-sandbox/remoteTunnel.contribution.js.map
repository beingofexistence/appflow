{"version":3,"sources":["vs/workbench/contrib/remoteTunnel/electron-sandbox/remoteTunnel.contribution.ts"],"names":[],"mappings":"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","file":"remoteTunnel.contribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from 'vs/base/common/actions';\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport { ITunnelApplicationConfig } from 'vs/base/common/product';\nimport { joinPath } from 'vs/base/common/resources';\nimport { isNumber, isObject, isString } from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { ILocalizedString } from 'vs/platform/action/common/action';\nimport { Action2, MenuId, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { Extensions as ConfigurationExtensions, ConfigurationScope, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport { ContextKeyExpr, IContextKey, IContextKeyService, RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogger, ILoggerService } from 'vs/platform/log/common/log';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IProgress, IProgressService, IProgressStep, ProgressLocation } from 'vs/platform/progress/common/progress';\nimport { IQuickInputService, IQuickPickItem, IQuickPickSeparator, QuickPickItem } from 'vs/platform/quickinput/common/quickInput';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { CONFIGURATION_KEY_HOST_NAME, CONFIGURATION_KEY_PREFIX, CONFIGURATION_KEY_PREVENT_SLEEP, ConnectionInfo, INACTIVE_TUNNEL_MODE, IRemoteTunnelService, IRemoteTunnelSession, LOGGER_NAME, LOG_ID, TunnelStatus } from 'vs/platform/remoteTunnel/common/remoteTunnel';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IWorkspaceContextService, isUntitledWorkspace } from 'vs/platform/workspace/common/workspace';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { AuthenticationSession, IAuthenticationService } from 'vs/workbench/services/authentication/common/authentication';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IOutputService } from 'vs/workbench/services/output/common/output';\nimport { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';\n\nexport const REMOTE_TUNNEL_CATEGORY: ILocalizedString = {\n\toriginal: 'Remote-Tunnels',\n\tvalue: localize('remoteTunnel.category', 'Remote Tunnels')\n};\n\ntype CONTEXT_KEY_STATES = 'connected' | 'connecting' | 'disconnected';\n\nexport const REMOTE_TUNNEL_CONNECTION_STATE_KEY = 'remoteTunnelConnection';\nexport const REMOTE_TUNNEL_CONNECTION_STATE = new RawContextKey<CONTEXT_KEY_STATES>(REMOTE_TUNNEL_CONNECTION_STATE_KEY, 'disconnected');\n\nconst REMOTE_TUNNEL_USED_STORAGE_KEY = 'remoteTunnelServiceUsed';\nconst REMOTE_TUNNEL_PROMPTED_PREVIEW_STORAGE_KEY = 'remoteTunnelServicePromptedPreview';\nconst REMOTE_TUNNEL_EXTENSION_RECOMMENDED_KEY = 'remoteTunnelExtensionRecommended';\nconst REMOTE_TUNNEL_EXTENSION_TIMEOUT = 4 * 60 * 1000; // show the recommendation that a machine started using tunnels if it joined less than 4 minutes ago\n\nconst INVALID_TOKEN_RETRIES = 2;\n\ninterface UsedOnHostMessage { hostName: string; timeStamp: number }\n\ntype ExistingSessionItem = { session: AuthenticationSession; providerId: string; label: string; description: string };\ntype IAuthenticationProvider = { id: string; scopes: string[] };\ntype AuthenticationProviderOption = IQuickPickItem & { provider: IAuthenticationProvider };\n\nenum RemoteTunnelCommandIds {\n\tturnOn = 'workbench.remoteTunnel.actions.turnOn',\n\tturnOff = 'workbench.remoteTunnel.actions.turnOff',\n\tconnecting = 'workbench.remoteTunnel.actions.connecting',\n\tmanage = 'workbench.remoteTunnel.actions.manage',\n\tshowLog = 'workbench.remoteTunnel.actions.showLog',\n\tconfigure = 'workbench.remoteTunnel.actions.configure',\n\tcopyToClipboard = 'workbench.remoteTunnel.actions.copyToClipboard',\n\tlearnMore = 'workbench.remoteTunnel.actions.learnMore',\n}\n\n// name shown in nofications\nnamespace RemoteTunnelCommandLabels {\n\texport const turnOn = localize('remoteTunnel.actions.turnOn', 'Turn on Remote Tunnel Access...');\n\texport const turnOff = localize('remoteTunnel.actions.turnOff', 'Turn off Remote Tunnel Access...');\n\texport const showLog = localize('remoteTunnel.actions.showLog', 'Show Remote Tunnel Service Log');\n\texport const configure = localize('remoteTunnel.actions.configure', 'Configure Tunnel Name...');\n\texport const copyToClipboard = localize('remoteTunnel.actions.copyToClipboard', 'Copy Browser URI to Clipboard');\n\texport const learnMore = localize('remoteTunnel.actions.learnMore', 'Get Started with Tunnels');\n}\n\n\nexport class RemoteTunnelWorkbenchContribution extends Disposable implements IWorkbenchContribution {\n\n\tprivate readonly connectionStateContext: IContextKey<CONTEXT_KEY_STATES>;\n\n\tprivate readonly serverConfiguration: ITunnelApplicationConfig;\n\n\tprivate connectionInfo: ConnectionInfo | undefined;\n\n\tprivate readonly logger: ILogger;\n\n\tprivate expiredSessions: Set<string> = new Set();\n\n\tconstructor(\n\t\t@IAuthenticationService private readonly authenticationService: IAuthenticationService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IProductService productService: IProductService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ILoggerService loggerService: ILoggerService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@INativeEnvironmentService private environmentService: INativeEnvironmentService,\n\t\t@IRemoteTunnelService private remoteTunnelService: IRemoteTunnelService,\n\t\t@ICommandService private commandService: ICommandService,\n\t\t@IWorkspaceContextService private workspaceContextService: IWorkspaceContextService,\n\t\t@IProgressService private progressService: IProgressService,\n\t\t@INotificationService private notificationService: INotificationService\n\t) {\n\t\tsuper();\n\n\t\tthis.logger = this._register(loggerService.createLogger(joinPath(environmentService.logsHome, `${LOG_ID}.log`), { id: LOG_ID, name: LOGGER_NAME }));\n\n\t\tthis.connectionStateContext = REMOTE_TUNNEL_CONNECTION_STATE.bindTo(this.contextKeyService);\n\n\t\tconst serverConfiguration = productService.tunnelApplicationConfig;\n\t\tif (!serverConfiguration || !productService.tunnelApplicationName) {\n\t\t\tthis.logger.error('Missing \\'tunnelApplicationConfig\\' or \\'tunnelApplicationName\\' in product.json. Remote tunneling is not available.');\n\t\t\tthis.serverConfiguration = { authenticationProviders: {}, editorWebUrl: '', extension: { extensionId: '', friendlyName: '' } };\n\t\t\treturn;\n\t\t}\n\t\tthis.serverConfiguration = serverConfiguration;\n\n\t\tthis._register(this.remoteTunnelService.onDidChangeTunnelStatus(s => this.handleTunnelStatusUpdate(s)));\n\n\t\tthis.registerCommands();\n\n\t\tthis.initialize();\n\n\t\tthis.recommendRemoteExtensionIfNeeded();\n\t}\n\n\tprivate handleTunnelStatusUpdate(status: TunnelStatus) {\n\t\tthis.connectionInfo = undefined;\n\t\tif (status.type === 'disconnected') {\n\t\t\tif (status.onTokenFailed) {\n\t\t\t\tthis.expiredSessions.add(status.onTokenFailed.sessionId);\n\t\t\t}\n\t\t\tthis.connectionStateContext.set('disconnected');\n\t\t} else if (status.type === 'connecting') {\n\t\t\tthis.connectionStateContext.set('connecting');\n\t\t} else if (status.type === 'connected') {\n\t\t\tthis.connectionInfo = status.info;\n\t\t\tthis.connectionStateContext.set('connected');\n\t\t}\n\t}\n\n\tprivate async recommendRemoteExtensionIfNeeded() {\n\t\tawait this.extensionService.whenInstalledExtensionsRegistered();\n\n\t\tconst remoteExtension = this.serverConfiguration.extension;\n\t\tconst shouldRecommend = async () => {\n\t\t\tif (this.storageService.getBoolean(REMOTE_TUNNEL_EXTENSION_RECOMMENDED_KEY, StorageScope.APPLICATION)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tif (await this.extensionService.getExtension(remoteExtension.extensionId)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tconst usedOnHostMessage = this.storageService.get(REMOTE_TUNNEL_USED_STORAGE_KEY, StorageScope.APPLICATION);\n\t\t\tif (!usedOnHostMessage) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tlet usedTunnelName: string | undefined;\n\t\t\ttry {\n\t\t\t\tconst message = JSON.parse(usedOnHostMessage);\n\t\t\t\tif (!isObject(message)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tconst { hostName, timeStamp } = message as UsedOnHostMessage;\n\t\t\t\tif (!isString(hostName)! || !isNumber(timeStamp) || new Date().getTime() > timeStamp + REMOTE_TUNNEL_EXTENSION_TIMEOUT) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tusedTunnelName = hostName;\n\t\t\t} catch (_) {\n\t\t\t\t// problems parsing the message, likly the old message format\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tconst currentTunnelName = await this.remoteTunnelService.getTunnelName();\n\t\t\tif (!currentTunnelName || currentTunnelName === usedTunnelName) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn usedTunnelName;\n\t\t};\n\t\tconst recommed = async () => {\n\t\t\tconst usedOnHost = await shouldRecommend();\n\t\t\tif (!usedOnHost) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis.notificationService.notify({\n\t\t\t\tseverity: Severity.Info,\n\t\t\t\tmessage:\n\t\t\t\t\tlocalize(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tkey: 'recommend.remoteExtension',\n\t\t\t\t\t\t\tcomment: ['{0} will be a tunnel name, {1} will the link address to the web UI, {6} an extension name. [label](command:commandId) is a markdown link. Only translate the label, do not modify the format']\n\t\t\t\t\t\t},\n\t\t\t\t\t\t\"Tunnel '{0}' is avaiable for remote access. The {1} extension can be used to connect to it.\",\n\t\t\t\t\t\tusedOnHost, remoteExtension.friendlyName\n\t\t\t\t\t),\n\t\t\t\tactions: {\n\t\t\t\t\tprimary: [\n\t\t\t\t\t\tnew Action('showExtension', localize('action.showExtension', \"Show Extension\"), undefined, true, () => {\n\t\t\t\t\t\t\treturn this.commandService.executeCommand('workbench.extensions.action.showExtensionsWithIds', [remoteExtension.extensionId]);\n\t\t\t\t\t\t}),\n\t\t\t\t\t\tnew Action('doNotShowAgain', localize('action.doNotShowAgain', \"Do not show again\"), undefined, true, () => {\n\t\t\t\t\t\t\tthis.storageService.store(REMOTE_TUNNEL_EXTENSION_RECOMMENDED_KEY, true, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\t\t\t}),\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn true;\n\t\t};\n\t\tif (await shouldRecommend()) {\n\t\t\tconst disposables = this._register(new DisposableStore());\n\t\t\tdisposables.add(this.storageService.onDidChangeValue(StorageScope.APPLICATION, REMOTE_TUNNEL_USED_STORAGE_KEY, disposables)(async () => {\n\t\t\t\tconst success = await recommed();\n\t\t\t\tif (success) {\n\t\t\t\t\tdisposables.dispose();\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t}\n\n\tprivate async initialize(): Promise<void> {\n\t\tconst [mode, status] = await Promise.all([\n\t\t\tthis.remoteTunnelService.getMode(),\n\t\t\tthis.remoteTunnelService.getTunnelStatus(),\n\t\t]);\n\n\t\tthis.handleTunnelStatusUpdate(status);\n\n\t\tif (mode.active && mode.session.token) {\n\t\t\treturn; // already initialized, token available\n\t\t}\n\n\t\treturn await this.progressService.withProgress(\n\t\t\t{\n\t\t\t\tlocation: ProgressLocation.Window,\n\t\t\t\ttitle: localize({ key: 'initialize.progress.title', comment: ['Only translate \\'Looking for remote tunnel\\', do not change the format of the rest (markdown link format)'] }, \"[Looking for remote tunnel](command:{0})\", RemoteTunnelCommandIds.showLog),\n\t\t\t},\n\t\t\tasync (progress: IProgress<IProgressStep>) => {\n\t\t\t\tconst listener = this.remoteTunnelService.onDidChangeTunnelStatus(status => {\n\t\t\t\t\tswitch (status.type) {\n\t\t\t\t\t\tcase 'connecting':\n\t\t\t\t\t\t\tif (status.progress) {\n\t\t\t\t\t\t\t\tprogress.report({ message: status.progress });\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tlet newSession: IRemoteTunnelSession | undefined;\n\t\t\t\tif (mode.active) {\n\t\t\t\t\tconst token = await this.getSessionToken(mode.session);\n\t\t\t\t\tif (token) {\n\t\t\t\t\t\tnewSession = { ...mode.session, token };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst status = await this.remoteTunnelService.initialize(mode.active && newSession ? { ...mode, session: newSession } : INACTIVE_TUNNEL_MODE);\n\t\t\t\tlistener.dispose();\n\n\t\t\t\tif (status.type === 'connected') {\n\t\t\t\t\tthis.connectionInfo = status.info;\n\t\t\t\t\tthis.connectionStateContext.set('connected');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n\n\n\tprivate async startTunnel(asService: boolean): Promise<ConnectionInfo | undefined> {\n\t\tif (this.connectionInfo) {\n\t\t\treturn this.connectionInfo;\n\t\t}\n\n\t\tlet tokenProblems = false;\n\t\tfor (let i = 0; i < INVALID_TOKEN_RETRIES; i++) {\n\t\t\ttokenProblems = false;\n\n\t\t\tconst authenticationSession = await this.getAuthenticationSession();\n\t\t\tif (authenticationSession === undefined) {\n\t\t\t\tthis.logger.info('No authentication session available, not starting tunnel');\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst result = await this.progressService.withProgress(\n\t\t\t\t{\n\t\t\t\t\tlocation: ProgressLocation.Notification,\n\t\t\t\t\ttitle: localize({ key: 'startTunnel.progress.title', comment: ['Only translate \\'Starting remote tunnel\\', do not change the format of the rest (markdown link format)'] }, \"[Starting remote tunnel](command:{0})\", RemoteTunnelCommandIds.showLog),\n\t\t\t\t},\n\t\t\t\t(progress: IProgress<IProgressStep>) => {\n\t\t\t\t\treturn new Promise<ConnectionInfo | undefined>((s, e) => {\n\t\t\t\t\t\tlet completed = false;\n\t\t\t\t\t\tconst listener = this.remoteTunnelService.onDidChangeTunnelStatus(status => {\n\t\t\t\t\t\t\tswitch (status.type) {\n\t\t\t\t\t\t\t\tcase 'connecting':\n\t\t\t\t\t\t\t\t\tif (status.progress) {\n\t\t\t\t\t\t\t\t\t\tprogress.report({ message: status.progress });\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'connected':\n\t\t\t\t\t\t\t\t\tlistener.dispose();\n\t\t\t\t\t\t\t\t\tcompleted = true;\n\t\t\t\t\t\t\t\t\ts(status.info);\n\t\t\t\t\t\t\t\t\tif (status.serviceInstallFailed) {\n\t\t\t\t\t\t\t\t\t\tthis.notificationService.notify({\n\t\t\t\t\t\t\t\t\t\t\tseverity: Severity.Warning,\n\t\t\t\t\t\t\t\t\t\t\tmessage: localize(\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tkey: 'remoteTunnel.serviceInstallFailed',\n\t\t\t\t\t\t\t\t\t\t\t\t\tcomment: ['{Locked=\"](command:{0})\"}']\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\t\"Installation as a service failed, and we fell back to running the tunnel for this session. See the [error log](command:{0}) for details.\",\n\t\t\t\t\t\t\t\t\t\t\t\tRemoteTunnelCommandIds.showLog,\n\t\t\t\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'disconnected':\n\t\t\t\t\t\t\t\t\tlistener.dispose();\n\t\t\t\t\t\t\t\t\tcompleted = true;\n\t\t\t\t\t\t\t\t\ttokenProblems = !!status.onTokenFailed;\n\t\t\t\t\t\t\t\t\ts(undefined);\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst token = authenticationSession.session.idToken ?? authenticationSession.session.accessToken;\n\t\t\t\t\t\tconst account: IRemoteTunnelSession = { sessionId: authenticationSession.session.id, token, providerId: authenticationSession.providerId, accountLabel: authenticationSession.session.account.label };\n\t\t\t\t\t\tthis.remoteTunnelService.startTunnel({ active: true, asService, session: account }).then(status => {\n\t\t\t\t\t\t\tif (!completed && (status.type === 'connected' || status.type === 'disconnected')) {\n\t\t\t\t\t\t\t\tlistener.dispose();\n\t\t\t\t\t\t\t\tif (status.type === 'connected') {\n\t\t\t\t\t\t\t\t\ts(status.info);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ttokenProblems = !!status.onTokenFailed;\n\t\t\t\t\t\t\t\t\ts(undefined);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t\t\tif (result || !tokenProblems) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async getAuthenticationSession(): Promise<ExistingSessionItem | undefined> {\n\t\tconst sessions = await this.getAllSessions();\n\t\tif (sessions.length === 1) {\n\t\t\treturn sessions[0];\n\t\t}\n\n\t\tconst quickpick = this.quickInputService.createQuickPick<ExistingSessionItem | AuthenticationProviderOption | IQuickPickItem>();\n\t\tquickpick.ok = false;\n\t\tquickpick.placeholder = localize('accountPreference.placeholder', \"Sign in to an account to enable remote access\");\n\t\tquickpick.ignoreFocusOut = true;\n\t\tquickpick.items = await this.createQuickpickItems(sessions);\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tquickpick.onDidHide((e) => {\n\t\t\t\tresolve(undefined);\n\t\t\t\tquickpick.dispose();\n\t\t\t});\n\n\t\t\tquickpick.onDidAccept(async (e) => {\n\t\t\t\tconst selection = quickpick.selectedItems[0];\n\t\t\t\tif ('provider' in selection) {\n\t\t\t\t\tconst session = await this.authenticationService.createSession(selection.provider.id, selection.provider.scopes);\n\t\t\t\t\tresolve(this.createExistingSessionItem(session, selection.provider.id));\n\t\t\t\t} else if ('session' in selection) {\n\t\t\t\t\tresolve(selection);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(undefined);\n\t\t\t\t}\n\t\t\t\tquickpick.hide();\n\t\t\t});\n\n\t\t\tquickpick.show();\n\t\t});\n\t}\n\n\tprivate createExistingSessionItem(session: AuthenticationSession, providerId: string): ExistingSessionItem {\n\t\treturn {\n\t\t\tlabel: session.account.label,\n\t\t\tdescription: this.authenticationService.getLabel(providerId),\n\t\t\tsession,\n\t\t\tproviderId\n\t\t};\n\t}\n\n\tprivate async createQuickpickItems(sessions: ExistingSessionItem[]): Promise<(ExistingSessionItem | AuthenticationProviderOption | IQuickPickSeparator | IQuickPickItem & { canceledAuthentication: boolean })[]> {\n\t\tconst options: (ExistingSessionItem | AuthenticationProviderOption | IQuickPickSeparator | IQuickPickItem & { canceledAuthentication: boolean })[] = [];\n\n\t\tif (sessions.length) {\n\t\t\toptions.push({ type: 'separator', label: localize('signed in', \"Signed In\") });\n\t\t\toptions.push(...sessions);\n\t\t\toptions.push({ type: 'separator', label: localize('others', \"Others\") });\n\t\t}\n\n\t\tfor (const authenticationProvider of (await this.getAuthenticationProviders())) {\n\t\t\tconst signedInForProvider = sessions.some(account => account.providerId === authenticationProvider.id);\n\t\t\tif (!signedInForProvider || this.authenticationService.supportsMultipleAccounts(authenticationProvider.id)) {\n\t\t\t\tconst providerName = this.authenticationService.getLabel(authenticationProvider.id);\n\t\t\t\toptions.push({ label: localize({ key: 'sign in using account', comment: ['{0} will be a auth provider (e.g. Github)'] }, \"Sign in with {0}\", providerName), provider: authenticationProvider });\n\t\t\t}\n\t\t}\n\n\t\treturn options;\n\t}\n\n\t/**\n\t * Returns all authentication sessions available from {@link getAuthenticationProviders}.\n\t */\n\tprivate async getAllSessions(): Promise<ExistingSessionItem[]> {\n\t\tconst authenticationProviders = await this.getAuthenticationProviders();\n\t\tconst accounts = new Map<string, ExistingSessionItem>();\n\t\tconst currentAccount = await this.remoteTunnelService.getMode();\n\t\tlet currentSession: ExistingSessionItem | undefined;\n\n\t\tfor (const provider of authenticationProviders) {\n\t\t\tconst sessions = await this.authenticationService.getSessions(provider.id, provider.scopes);\n\n\t\t\tfor (const session of sessions) {\n\t\t\t\tif (!this.expiredSessions.has(session.id)) {\n\t\t\t\t\tconst item = this.createExistingSessionItem(session, provider.id);\n\t\t\t\t\taccounts.set(item.session.account.id, item);\n\t\t\t\t\tif (currentAccount.active && currentAccount.session.sessionId === session.id) {\n\t\t\t\t\t\tcurrentSession = item;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (currentSession !== undefined) {\n\t\t\taccounts.set(currentSession.session.account.id, currentSession);\n\t\t}\n\n\t\treturn [...accounts.values()];\n\t}\n\n\tprivate async getSessionToken(session: IRemoteTunnelSession | undefined): Promise<string | undefined> {\n\t\tif (session) {\n\t\t\tconst sessionItem = (await this.getAllSessions()).find(s => s.session.id === session.sessionId);\n\t\t\tif (sessionItem) {\n\t\t\t\treturn sessionItem.session.idToken ?? sessionItem.session.accessToken;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Returns all authentication providers which can be used to authenticate\n\t * to the remote storage service, based on product.json configuration\n\t * and registered authentication providers.\n\t */\n\tprivate async getAuthenticationProviders(): Promise<IAuthenticationProvider[]> {\n\t\t// Get the list of authentication providers configured in product.json\n\t\tconst authenticationProviders = this.serverConfiguration.authenticationProviders;\n\t\tconst configuredAuthenticationProviders = Object.keys(authenticationProviders).reduce<IAuthenticationProvider[]>((result, id) => {\n\t\t\tresult.push({ id, scopes: authenticationProviders[id].scopes });\n\t\t\treturn result;\n\t\t}, []);\n\n\t\t// Filter out anything that isn't currently available through the authenticationService\n\t\tconst availableAuthenticationProviders = this.authenticationService.declaredProviders;\n\n\t\treturn configuredAuthenticationProviders.filter(({ id }) => availableAuthenticationProviders.some(provider => provider.id === id));\n\t}\n\n\tprivate registerCommands() {\n\t\tconst that = this;\n\n\t\tthis._register(registerAction2(class extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: RemoteTunnelCommandIds.turnOn,\n\t\t\t\t\ttitle: RemoteTunnelCommandLabels.turnOn,\n\t\t\t\t\tcategory: REMOTE_TUNNEL_CATEGORY,\n\t\t\t\t\tprecondition: ContextKeyExpr.equals(REMOTE_TUNNEL_CONNECTION_STATE_KEY, 'disconnected'),\n\t\t\t\t\tmenu: [{\n\t\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: MenuId.AccountsContext,\n\t\t\t\t\t\tgroup: '2_remoteTunnel',\n\t\t\t\t\t\twhen: ContextKeyExpr.equals(REMOTE_TUNNEL_CONNECTION_STATE_KEY, 'disconnected'),\n\t\t\t\t\t}]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync run(accessor: ServicesAccessor) {\n\t\t\t\tconst notificationService = accessor.get(INotificationService);\n\t\t\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\t\t\tconst commandService = accessor.get(ICommandService);\n\t\t\t\tconst storageService = accessor.get(IStorageService);\n\t\t\t\tconst dialogService = accessor.get(IDialogService);\n\t\t\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\t\t\tconst productService = accessor.get(IProductService);\n\n\t\t\t\tconst didNotifyPreview = storageService.getBoolean(REMOTE_TUNNEL_PROMPTED_PREVIEW_STORAGE_KEY, StorageScope.APPLICATION, false);\n\t\t\t\tif (!didNotifyPreview) {\n\t\t\t\t\tconst { confirmed } = await dialogService.confirm({\n\t\t\t\t\t\tmessage: localize('tunnel.preview', 'Remote Tunnels is currently in preview. Please report any problems using the \"Help: Report Issue\" command.'),\n\t\t\t\t\t\tprimaryButton: localize({ key: 'enable', comment: ['&& denotes a mnemonic'] }, '&&Enable')\n\t\t\t\t\t});\n\t\t\t\t\tif (!confirmed) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tstorageService.store(REMOTE_TUNNEL_PROMPTED_PREVIEW_STORAGE_KEY, true, StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\t}\n\n\t\t\t\tconst disposables = new DisposableStore();\n\t\t\t\tconst quickPick = quickInputService.createQuickPick<IQuickPickItem & { service: boolean }>();\n\t\t\t\tquickPick.placeholder = localize('tunnel.enable.placeholder', 'Select how you want to enable access');\n\t\t\t\tquickPick.items = [\n\t\t\t\t\t{ service: false, label: localize('tunnel.enable.session', 'Turn on for this session'), description: localize('tunnel.enable.session.description', 'Run whenever {0} is open', productService.nameShort) },\n\t\t\t\t\t{ service: true, label: localize('tunnel.enable.service', 'Install as a service'), description: localize('tunnel.enable.service.description', 'Run whenever you\\'re logged in') }\n\t\t\t\t];\n\n\t\t\t\tconst asService = await new Promise<boolean | undefined>(resolve => {\n\t\t\t\t\tdisposables.add(quickPick.onDidAccept(() => resolve(quickPick.selectedItems[0]?.service)));\n\t\t\t\t\tdisposables.add(quickPick.onDidHide(() => resolve(undefined)));\n\t\t\t\t\tquickPick.show();\n\t\t\t\t});\n\n\t\t\t\tquickPick.dispose();\n\n\t\t\t\tif (asService === undefined) {\n\t\t\t\t\treturn; // no-op\n\t\t\t\t}\n\n\t\t\t\tconst connectionInfo = await that.startTunnel(/* installAsService= */ asService);\n\n\t\t\t\tif (connectionInfo) {\n\t\t\t\t\tconst linkToOpen = that.getLinkToOpen(connectionInfo);\n\t\t\t\t\tconst remoteExtension = that.serverConfiguration.extension;\n\t\t\t\t\tconst linkToOpenForMarkdown = linkToOpen.toString(false).replace(/\\)/g, '%29');\n\t\t\t\t\tnotificationService.notify({\n\t\t\t\t\t\tseverity: Severity.Info,\n\t\t\t\t\t\tmessage:\n\t\t\t\t\t\t\tlocalize(\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tkey: 'progress.turnOn.final',\n\t\t\t\t\t\t\t\t\tcomment: ['{0} will be the tunnel name, {1} will the link address to the web UI, {6} an extension name, {7} a link to the extension documentation. [label](command:commandId) is a markdown link. Only translate the label, do not modify the format']\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"You can now access this machine anywhere via the secure tunnel [{0}](command:{4}). To connect via a different machine, use the generated [{1}]({2}) link or use the [{6}]({7}) extension in the desktop or web. You can [configure](command:{3}) or [turn off](command:{5}) this access via the VS Code Accounts menu.\",\n\t\t\t\t\t\t\t\tconnectionInfo.tunnelName, connectionInfo.domain, linkToOpenForMarkdown, RemoteTunnelCommandIds.manage, RemoteTunnelCommandIds.configure, RemoteTunnelCommandIds.turnOff, remoteExtension.friendlyName, 'https://code.visualstudio.com/docs/remote/tunnels'\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\tactions: {\n\t\t\t\t\t\t\tprimary: [\n\t\t\t\t\t\t\t\tnew Action('copyToClipboard', localize('action.copyToClipboard', \"Copy Browser Link to Clipboard\"), undefined, true, () => clipboardService.writeText(linkToOpen.toString(true))),\n\t\t\t\t\t\t\t\tnew Action('showExtension', localize('action.showExtension', \"Show Extension\"), undefined, true, () => {\n\t\t\t\t\t\t\t\t\treturn commandService.executeCommand('workbench.extensions.action.showExtensionsWithIds', [remoteExtension.extensionId]);\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tconst usedOnHostMessage: UsedOnHostMessage = { hostName: connectionInfo.tunnelName, timeStamp: new Date().getTime() };\n\t\t\t\t\tstorageService.store(REMOTE_TUNNEL_USED_STORAGE_KEY, JSON.stringify(usedOnHostMessage), StorageScope.APPLICATION, StorageTarget.USER);\n\t\t\t\t} else {\n\t\t\t\t\tnotificationService.notify({\n\t\t\t\t\t\tseverity: Severity.Info,\n\t\t\t\t\t\tmessage: localize('progress.turnOn.failed',\n\t\t\t\t\t\t\t\"Unable to turn on the remote tunnel access. Check the Remote Tunnel Service log for details.\"),\n\t\t\t\t\t});\n\t\t\t\t\tawait commandService.executeCommand(RemoteTunnelCommandIds.showLog);\n\t\t\t\t}\n\t\t\t}\n\n\t\t}));\n\n\t\tthis._register(registerAction2(class extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: RemoteTunnelCommandIds.manage,\n\t\t\t\t\ttitle: localize('remoteTunnel.actions.manage.on.v2', 'Remote Tunnel Access is On'),\n\t\t\t\t\tcategory: REMOTE_TUNNEL_CATEGORY,\n\t\t\t\t\tmenu: [{\n\t\t\t\t\t\tid: MenuId.AccountsContext,\n\t\t\t\t\t\tgroup: '2_remoteTunnel',\n\t\t\t\t\t\twhen: ContextKeyExpr.equals(REMOTE_TUNNEL_CONNECTION_STATE_KEY, 'connected'),\n\t\t\t\t\t}]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync run() {\n\t\t\t\tthat.showManageOptions();\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(registerAction2(class extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: RemoteTunnelCommandIds.connecting,\n\t\t\t\t\ttitle: localize('remoteTunnel.actions.manage.connecting', 'Remote Tunnel Access is Connecting'),\n\t\t\t\t\tcategory: REMOTE_TUNNEL_CATEGORY,\n\t\t\t\t\tmenu: [{\n\t\t\t\t\t\tid: MenuId.AccountsContext,\n\t\t\t\t\t\tgroup: '2_remoteTunnel',\n\t\t\t\t\t\twhen: ContextKeyExpr.equals(REMOTE_TUNNEL_CONNECTION_STATE_KEY, 'connecting'),\n\t\t\t\t\t}]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync run() {\n\t\t\t\tthat.showManageOptions();\n\t\t\t}\n\t\t}));\n\n\n\t\tthis._register(registerAction2(class extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: RemoteTunnelCommandIds.turnOff,\n\t\t\t\t\ttitle: RemoteTunnelCommandLabels.turnOff,\n\t\t\t\t\tcategory: REMOTE_TUNNEL_CATEGORY,\n\t\t\t\t\tprecondition: ContextKeyExpr.notEquals(REMOTE_TUNNEL_CONNECTION_STATE_KEY, 'disconnected'),\n\t\t\t\t\tmenu: [{\n\t\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\t\twhen: ContextKeyExpr.notEquals(REMOTE_TUNNEL_CONNECTION_STATE_KEY, ''),\n\t\t\t\t\t}]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync run() {\n\t\t\t\tconst message =\n\t\t\t\t\tthat.connectionInfo?.isAttached ?\n\t\t\t\t\t\tlocalize('remoteTunnel.turnOffAttached.confirm', 'Do you want to turn off Remote Tunnel Access? This will also stop the service that was started externally.') :\n\t\t\t\t\t\tlocalize('remoteTunnel.turnOff.confirm', 'Do you want to turn off Remote Tunnel Access?');\n\n\t\t\t\tconst { confirmed } = await that.dialogService.confirm({ message });\n\t\t\t\tif (confirmed) {\n\t\t\t\t\tthat.remoteTunnelService.stopTunnel();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(registerAction2(class extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: RemoteTunnelCommandIds.showLog,\n\t\t\t\t\ttitle: RemoteTunnelCommandLabels.showLog,\n\t\t\t\t\tcategory: REMOTE_TUNNEL_CATEGORY,\n\t\t\t\t\tmenu: [{\n\t\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\t\twhen: ContextKeyExpr.notEquals(REMOTE_TUNNEL_CONNECTION_STATE_KEY, ''),\n\t\t\t\t\t}]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync run(accessor: ServicesAccessor) {\n\t\t\t\tconst outputService = accessor.get(IOutputService);\n\t\t\t\toutputService.showChannel(LOG_ID);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(registerAction2(class extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: RemoteTunnelCommandIds.configure,\n\t\t\t\t\ttitle: RemoteTunnelCommandLabels.configure,\n\t\t\t\t\tcategory: REMOTE_TUNNEL_CATEGORY,\n\t\t\t\t\tmenu: [{\n\t\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\t\twhen: ContextKeyExpr.notEquals(REMOTE_TUNNEL_CONNECTION_STATE_KEY, ''),\n\t\t\t\t\t}]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync run(accessor: ServicesAccessor) {\n\t\t\t\tconst preferencesService = accessor.get(IPreferencesService);\n\t\t\t\tpreferencesService.openSettings({ query: CONFIGURATION_KEY_PREFIX });\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(registerAction2(class extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: RemoteTunnelCommandIds.copyToClipboard,\n\t\t\t\t\ttitle: RemoteTunnelCommandLabels.copyToClipboard,\n\t\t\t\t\tcategory: REMOTE_TUNNEL_CATEGORY,\n\t\t\t\t\tprecondition: ContextKeyExpr.equals(REMOTE_TUNNEL_CONNECTION_STATE_KEY, 'connected'),\n\t\t\t\t\tmenu: [{\n\t\t\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\t\t\twhen: ContextKeyExpr.equals(REMOTE_TUNNEL_CONNECTION_STATE_KEY, 'connected'),\n\t\t\t\t\t}]\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync run(accessor: ServicesAccessor) {\n\t\t\t\tconst clipboardService = accessor.get(IClipboardService);\n\t\t\t\tif (that.connectionInfo) {\n\t\t\t\t\tconst linkToOpen = that.getLinkToOpen(that.connectionInfo);\n\t\t\t\t\tclipboardService.writeText(linkToOpen.toString(true));\n\t\t\t\t}\n\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(registerAction2(class extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: RemoteTunnelCommandIds.learnMore,\n\t\t\t\t\ttitle: RemoteTunnelCommandLabels.learnMore,\n\t\t\t\t\tcategory: REMOTE_TUNNEL_CATEGORY,\n\t\t\t\t\tmenu: []\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync run(accessor: ServicesAccessor) {\n\t\t\t\tconst openerService = accessor.get(IOpenerService);\n\t\t\t\tawait openerService.open('https://aka.ms/vscode-server-doc');\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate getLinkToOpen(connectionInfo: ConnectionInfo): URI {\n\t\tconst workspace = this.workspaceContextService.getWorkspace();\n\t\tconst folders = workspace.folders;\n\t\tlet resource;\n\t\tif (folders.length === 1) {\n\t\t\tresource = folders[0].uri;\n\t\t} else if (workspace.configuration && !isUntitledWorkspace(workspace.configuration, this.environmentService)) {\n\t\t\tresource = workspace.configuration;\n\t\t}\n\t\tconst link = URI.parse(connectionInfo.link);\n\t\tif (resource?.scheme === Schemas.file) {\n\t\t\treturn joinPath(link, resource.path);\n\t\t}\n\t\treturn joinPath(link, this.environmentService.userHome.path);\n\t}\n\n\n\tprivate async showManageOptions() {\n\t\tconst account = await this.remoteTunnelService.getMode();\n\n\t\treturn new Promise<void>((c, e) => {\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tconst quickPick = this.quickInputService.createQuickPick();\n\t\t\tquickPick.placeholder = localize('manage.placeholder', 'Select a command to invoke');\n\t\t\tdisposables.add(quickPick);\n\t\t\tconst items: Array<QuickPickItem> = [];\n\t\t\titems.push({ id: RemoteTunnelCommandIds.learnMore, label: RemoteTunnelCommandLabels.learnMore });\n\t\t\tif (this.connectionInfo) {\n\t\t\t\tquickPick.title =\n\t\t\t\t\tthis.connectionInfo.isAttached ?\n\t\t\t\t\t\tlocalize({ key: 'manage.title.attached', comment: ['{0} is the tunnel name'] }, 'Remote Tunnel Access enabled for {0} (launched externally)', this.connectionInfo.tunnelName) :\n\t\t\t\t\t\tlocalize({ key: 'manage.title.orunning', comment: ['{0} is the tunnel name'] }, 'Remote Tunnel Access enabled for {0}', this.connectionInfo.tunnelName);\n\n\t\t\t\titems.push({ id: RemoteTunnelCommandIds.copyToClipboard, label: RemoteTunnelCommandLabels.copyToClipboard, description: this.connectionInfo.domain });\n\t\t\t} else {\n\t\t\t\tquickPick.title = localize('manage.title.off', 'Remote Tunnel Access not enabled');\n\t\t\t}\n\t\t\titems.push({ id: RemoteTunnelCommandIds.showLog, label: localize('manage.showLog', 'Show Log') });\n\t\t\titems.push({ type: 'separator' });\n\t\t\titems.push({ id: RemoteTunnelCommandIds.configure, label: localize('manage.tunnelName', 'Change Tunnel Name'), description: this.connectionInfo?.tunnelName });\n\t\t\titems.push({ id: RemoteTunnelCommandIds.turnOff, label: RemoteTunnelCommandLabels.turnOff, description: account.active ? `${account.session.accountLabel} (${account.session.providerId})` : undefined });\n\n\t\t\tquickPick.items = items;\n\t\t\tdisposables.add(quickPick.onDidAccept(() => {\n\t\t\t\tif (quickPick.selectedItems[0] && quickPick.selectedItems[0].id) {\n\t\t\t\t\tthis.commandService.executeCommand(quickPick.selectedItems[0].id);\n\t\t\t\t}\n\t\t\t\tquickPick.hide();\n\t\t\t}));\n\t\t\tdisposables.add(quickPick.onDidHide(() => {\n\t\t\t\tdisposables.dispose();\n\t\t\t\tc();\n\t\t\t}));\n\t\t\tquickPick.show();\n\t\t});\n\t}\n}\n\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(RemoteTunnelWorkbenchContribution, LifecyclePhase.Restored);\n\nRegistry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration).registerConfiguration({\n\ttype: 'object',\n\tproperties: {\n\t\t[CONFIGURATION_KEY_HOST_NAME]: {\n\t\t\tdescription: localize('remoteTunnelAccess.machineName', \"The name under which the remote tunnel access is registered. If not set, the host name is used.\"),\n\t\t\ttype: 'string',\n\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\tpattern: '^(\\\\w[\\\\w-]*)?$',\n\t\t\tpatternErrorMessage: localize('remoteTunnelAccess.machineNameRegex', \"The name must only consist of letters, numbers, underscore and dash. It must not start with a dash.\"),\n\t\t\tmaxLength: 20,\n\t\t\tdefault: ''\n\t\t},\n\t\t[CONFIGURATION_KEY_PREVENT_SLEEP]: {\n\t\t\tdescription: localize('remoteTunnelAccess.preventSleep', \"Prevent the computer from sleeping when remote tunnel access is turned on.\"),\n\t\t\ttype: 'boolean',\n\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\tdefault: false,\n\t\t}\n\t}\n});\n"]}