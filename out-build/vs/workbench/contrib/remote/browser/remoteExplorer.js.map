{"version":3,"sources":["vs/workbench/contrib/remote/browser/remoteExplorer.ts"],"names":[],"mappings":"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","file":"remoteExplorer.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as nls from 'vs/nls';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { Extensions, IViewContainersRegistry, IViewsRegistry, ViewContainer, ViewContainerLocation } from 'vs/workbench/common/views';\nimport { IRemoteExplorerService, PORT_AUTO_FORWARD_SETTING, PORT_AUTO_SOURCE_SETTING, PORT_AUTO_SOURCE_SETTING_HYBRID, PORT_AUTO_SOURCE_SETTING_OUTPUT, PORT_AUTO_SOURCE_SETTING_PROCESS, TUNNEL_VIEW_CONTAINER_ID, TUNNEL_VIEW_ID } from 'vs/workbench/services/remote/common/remoteExplorerService';\nimport { Attributes, AutoTunnelSource, forwardedPortsViewEnabled, makeAddress, mapHasAddressLocalhostOrAllInterfaces, OnPortForward, Tunnel, TunnelCloseReason, TunnelSource } from 'vs/workbench/services/remote/common/tunnelModel';\nimport { ForwardPortAction, OpenPortInBrowserAction, TunnelPanel, TunnelPanelDescriptor, TunnelViewModel, OpenPortInPreviewAction, openPreviewEnabledContext } from 'vs/workbench/contrib/remote/browser/tunnelView';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IStatusbarEntry, IStatusbarEntryAccessor, IStatusbarService, StatusbarAlignment } from 'vs/workbench/services/statusbar/browser/statusbar';\nimport { UrlFinder } from 'vs/workbench/contrib/remote/browser/urlFinder';\nimport Severity from 'vs/base/common/severity';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { INotificationHandle, INotificationService, IPromptChoice } from 'vs/platform/notification/common/notification';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { ITerminalService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { IDebugService } from 'vs/workbench/contrib/debug/common/debug';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { isWeb, OperatingSystem } from 'vs/base/common/platform';\nimport { ITunnelService, RemoteTunnel, TunnelPrivacyId } from 'vs/platform/tunnel/common/tunnel';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { ViewPaneContainer } from 'vs/workbench/browser/parts/views/viewPaneContainer';\nimport { IActivityService, NumberBadge } from 'vs/workbench/services/activity/common/activity';\nimport { portsViewIcon } from 'vs/workbench/contrib/remote/browser/remoteIcons';\nimport { Event } from 'vs/base/common/event';\nimport { IExternalUriOpenerService } from 'vs/workbench/contrib/externalUriOpener/common/externalUriOpenerService';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions } from 'vs/platform/configuration/common/configurationRegistry';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IWorkbenchConfigurationService } from 'vs/workbench/services/configuration/common/configuration';\n\nexport const VIEWLET_ID = 'workbench.view.remote';\n\nexport class ForwardedPortsView extends Disposable implements IWorkbenchContribution {\n\tprivate contextKeyListener?: IDisposable;\n\tprivate _activityBadge?: IDisposable;\n\tprivate entryAccessor: IStatusbarEntryAccessor | undefined;\n\n\tconstructor(\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IRemoteExplorerService private readonly remoteExplorerService: IRemoteExplorerService,\n\t\t@ITunnelService private readonly tunnelService: ITunnelService,\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t) {\n\t\tsuper();\n\t\tthis._register(Registry.as<IViewsRegistry>(Extensions.ViewsRegistry).registerViewWelcomeContent(TUNNEL_VIEW_ID, {\n\t\t\tcontent: this.environmentService.remoteAuthority ? nls.localize('remoteNoPorts', \"No forwarded ports. Forward a port to access your running services locally.\\n[Forward a Port]({0})\", `command:${ForwardPortAction.INLINE_ID}`)\n\t\t\t\t: nls.localize('noRemoteNoPorts', \"No forwarded ports. Forward a port to access your locally running services over the internet.\\n[Forward a Port]({0})\", `command:${ForwardPortAction.INLINE_ID}`),\n\t\t}));\n\t\tthis.enableBadgeAndStatusBar();\n\t\tthis.enableForwardedPortsView();\n\t}\n\n\tprivate async getViewContainer(): Promise<ViewContainer | null> {\n\t\treturn Registry.as<IViewContainersRegistry>(Extensions.ViewContainersRegistry).registerViewContainer({\n\t\t\tid: TUNNEL_VIEW_CONTAINER_ID,\n\t\t\ttitle: { value: nls.localize('ports', \"Ports\"), original: 'Ports' },\n\t\t\ticon: portsViewIcon,\n\t\t\tctorDescriptor: new SyncDescriptor(ViewPaneContainer, [TUNNEL_VIEW_CONTAINER_ID, { mergeViewWithContainerWhenSingleView: true }]),\n\t\t\tstorageId: TUNNEL_VIEW_CONTAINER_ID,\n\t\t\thideIfEmpty: true,\n\t\t\torder: 5\n\t\t}, ViewContainerLocation.Panel);\n\t}\n\n\tprivate async enableForwardedPortsView() {\n\t\tif (this.contextKeyListener) {\n\t\t\tthis.contextKeyListener.dispose();\n\t\t\tthis.contextKeyListener = undefined;\n\t\t}\n\n\t\tconst viewEnabled: boolean = !!forwardedPortsViewEnabled.getValue(this.contextKeyService);\n\n\t\tif (viewEnabled) {\n\t\t\tconst viewContainer = await this.getViewContainer();\n\t\t\tconst tunnelPanelDescriptor = new TunnelPanelDescriptor(new TunnelViewModel(this.remoteExplorerService, this.tunnelService), this.environmentService);\n\t\t\tconst viewsRegistry = Registry.as<IViewsRegistry>(Extensions.ViewsRegistry);\n\t\t\tif (viewContainer) {\n\t\t\t\tthis.remoteExplorerService.enablePortsFeatures();\n\t\t\t\tviewsRegistry.registerViews([tunnelPanelDescriptor!], viewContainer);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.contextKeyListener = this.contextKeyService.onDidChangeContext(e => {\n\t\t\t\tif (e.affectsSome(new Set(forwardedPortsViewEnabled.keys()))) {\n\t\t\t\t\tthis.enableForwardedPortsView();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate enableBadgeAndStatusBar() {\n\t\tconst disposable = Registry.as<IViewsRegistry>(Extensions.ViewsRegistry).onViewsRegistered(e => {\n\t\t\tif (e.find(view => view.views.find(viewDescriptor => viewDescriptor.id === TUNNEL_VIEW_ID))) {\n\t\t\t\tthis._register(Event.debounce(this.remoteExplorerService.tunnelModel.onForwardPort, (_last, e) => e, 50)(() => {\n\t\t\t\t\tthis.updateActivityBadge();\n\t\t\t\t\tthis.updateStatusBar();\n\t\t\t\t}));\n\t\t\t\tthis._register(Event.debounce(this.remoteExplorerService.tunnelModel.onClosePort, (_last, e) => e, 50)(() => {\n\t\t\t\t\tthis.updateActivityBadge();\n\t\t\t\t\tthis.updateStatusBar();\n\t\t\t\t}));\n\n\t\t\t\tthis.updateActivityBadge();\n\t\t\t\tthis.updateStatusBar();\n\t\t\t\tdisposable.dispose();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async updateActivityBadge() {\n\t\tthis._activityBadge?.dispose();\n\t\tif (this.remoteExplorerService.tunnelModel.forwarded.size > 0) {\n\t\t\tthis._activityBadge = this.activityService.showViewActivity(TUNNEL_VIEW_ID, {\n\t\t\t\tbadge: new NumberBadge(this.remoteExplorerService.tunnelModel.forwarded.size, n => n === 1 ? nls.localize('1forwardedPort', \"1 forwarded port\") : nls.localize('nForwardedPorts', \"{0} forwarded ports\", n))\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate updateStatusBar() {\n\t\tif (!this.entryAccessor) {\n\t\t\tthis._register(this.entryAccessor = this.statusbarService.addEntry(this.entry, 'status.forwardedPorts', StatusbarAlignment.LEFT, 40));\n\t\t} else {\n\t\t\tthis.entryAccessor.update(this.entry);\n\t\t}\n\t}\n\n\tprivate get entry(): IStatusbarEntry {\n\t\tlet tooltip: string;\n\t\tconst count = this.remoteExplorerService.tunnelModel.forwarded.size + this.remoteExplorerService.tunnelModel.detected.size;\n\t\tconst text = `${count}`;\n\t\tif (count === 0) {\n\t\t\ttooltip = nls.localize('remote.forwardedPorts.statusbarTextNone', \"No Ports Forwarded\");\n\t\t} else {\n\t\t\tconst allTunnels = Array.from(this.remoteExplorerService.tunnelModel.forwarded.values());\n\t\t\tallTunnels.push(...Array.from(this.remoteExplorerService.tunnelModel.detected.values()));\n\t\t\ttooltip = nls.localize('remote.forwardedPorts.statusbarTooltip', \"Forwarded Ports: {0}\",\n\t\t\t\tallTunnels.map(forwarded => forwarded.remotePort).join(', '));\n\t\t}\n\t\treturn {\n\t\t\tname: nls.localize('status.forwardedPorts', \"Forwarded Ports\"),\n\t\t\ttext: `$(radio-tower) ${text}`,\n\t\t\tariaLabel: tooltip,\n\t\t\ttooltip,\n\t\t\tcommand: `${TUNNEL_VIEW_ID}.focus`\n\t\t};\n\t}\n}\n\nexport class PortRestore implements IWorkbenchContribution {\n\tconstructor(\n\t\t@IRemoteExplorerService private readonly remoteExplorerService: IRemoteExplorerService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tif (!this.remoteExplorerService.tunnelModel.environmentTunnelsSet) {\n\t\t\tEvent.once(this.remoteExplorerService.tunnelModel.onEnvironmentTunnelsSet)(async () => {\n\t\t\t\tawait this.restore();\n\t\t\t});\n\t\t} else {\n\t\t\tthis.restore();\n\t\t}\n\t}\n\n\tprivate async restore() {\n\t\tthis.logService.trace('ForwardedPorts: Doing first restore.');\n\t\treturn this.remoteExplorerService.restore();\n\t}\n}\n\n\nexport class AutomaticPortForwarding extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@ITerminalService terminalService: ITerminalService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IExternalUriOpenerService externalOpenerService: IExternalUriOpenerService,\n\t\t@IRemoteExplorerService remoteExplorerService: IRemoteExplorerService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IWorkbenchConfigurationService configurationService: IWorkbenchConfigurationService,\n\t\t@IDebugService debugService: IDebugService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@ITunnelService tunnelService: ITunnelService,\n\t\t@IHostService hostService: IHostService,\n\t\t@ILogService logService: ILogService\n\t) {\n\t\tsuper();\n\t\tif (!environmentService.remoteAuthority) {\n\t\t\treturn;\n\t\t}\n\n\t\tconfigurationService.whenRemoteConfigurationLoaded().then(() => remoteAgentService.getEnvironment()).then(environment => {\n\t\t\tif (environment?.os !== OperatingSystem.Linux) {\n\t\t\t\tRegistry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration)\n\t\t\t\t\t.registerDefaultConfigurations([{ overrides: { 'remote.autoForwardPortsSource': PORT_AUTO_SOURCE_SETTING_OUTPUT } }]);\n\t\t\t\tthis._register(new OutputAutomaticPortForwarding(terminalService, notificationService, openerService, externalOpenerService,\n\t\t\t\t\tremoteExplorerService, configurationService, debugService, tunnelService, hostService, logService, contextKeyService, () => false));\n\t\t\t} else {\n\t\t\t\tconst useProc = () => (configurationService.getValue(PORT_AUTO_SOURCE_SETTING) === PORT_AUTO_SOURCE_SETTING_PROCESS);\n\t\t\t\tif (useProc()) {\n\t\t\t\t\tthis._register(new ProcAutomaticPortForwarding(false, configurationService, remoteExplorerService, notificationService,\n\t\t\t\t\t\topenerService, externalOpenerService, tunnelService, hostService, logService, contextKeyService));\n\t\t\t\t} else if (configurationService.getValue(PORT_AUTO_SOURCE_SETTING) === PORT_AUTO_SOURCE_SETTING_HYBRID) {\n\t\t\t\t\tthis._register(new ProcAutomaticPortForwarding(true, configurationService, remoteExplorerService, notificationService,\n\t\t\t\t\t\topenerService, externalOpenerService, tunnelService, hostService, logService, contextKeyService));\n\t\t\t\t}\n\t\t\t\tthis._register(new OutputAutomaticPortForwarding(terminalService, notificationService, openerService, externalOpenerService,\n\t\t\t\t\tremoteExplorerService, configurationService, debugService, tunnelService, hostService, logService, contextKeyService, useProc));\n\t\t\t}\n\t\t});\n\t}\n}\n\nclass OnAutoForwardedAction extends Disposable {\n\tprivate lastNotifyTime: Date;\n\tprivate static NOTIFY_COOL_DOWN = 5000; // milliseconds\n\tprivate lastNotification: INotificationHandle | undefined;\n\tprivate lastShownPort: number | undefined;\n\tprivate doActionTunnels: RemoteTunnel[] | undefined;\n\tprivate alreadyOpenedOnce: Set<string> = new Set();\n\n\tconstructor(private readonly notificationService: INotificationService,\n\t\tprivate readonly remoteExplorerService: IRemoteExplorerService,\n\t\tprivate readonly openerService: IOpenerService,\n\t\tprivate readonly externalOpenerService: IExternalUriOpenerService,\n\t\tprivate readonly tunnelService: ITunnelService,\n\t\tprivate readonly hostService: IHostService,\n\t\tprivate readonly logService: ILogService,\n\t\tprivate readonly contextKeyService: IContextKeyService) {\n\t\tsuper();\n\t\tthis.lastNotifyTime = new Date();\n\t\tthis.lastNotifyTime.setFullYear(this.lastNotifyTime.getFullYear() - 1);\n\t}\n\n\tpublic async doAction(tunnels: RemoteTunnel[]): Promise<void> {\n\t\tthis.logService.trace(`ForwardedPorts: (OnAutoForwardedAction) Starting action for ${tunnels[0]?.tunnelRemotePort}`);\n\t\tthis.doActionTunnels = tunnels;\n\t\tconst tunnel = await this.portNumberHeuristicDelay();\n\t\tthis.logService.trace(`ForwardedPorts: (OnAutoForwardedAction) Heuristic chose ${tunnel?.tunnelRemotePort}`);\n\t\tif (tunnel) {\n\t\t\tconst allAttributes = await this.remoteExplorerService.tunnelModel.getAttributes([{ port: tunnel.tunnelRemotePort, host: tunnel.tunnelRemoteHost }]);\n\t\t\tconst attributes = allAttributes?.get(tunnel.tunnelRemotePort)?.onAutoForward;\n\t\t\tthis.logService.trace(`ForwardedPorts: (OnAutoForwardedAction) onAutoForward action is ${attributes}`);\n\t\t\tswitch (attributes) {\n\t\t\t\tcase OnPortForward.OpenBrowserOnce: {\n\t\t\t\t\tif (this.alreadyOpenedOnce.has(tunnel.localAddress)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tthis.alreadyOpenedOnce.add(tunnel.localAddress);\n\t\t\t\t\t// Intentionally do not break so that the open browser path can be run.\n\t\t\t\t}\n\t\t\t\tcase OnPortForward.OpenBrowser: {\n\t\t\t\t\tconst address = makeAddress(tunnel.tunnelRemoteHost, tunnel.tunnelRemotePort);\n\t\t\t\t\tawait OpenPortInBrowserAction.run(this.remoteExplorerService.tunnelModel, this.openerService, address);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase OnPortForward.OpenPreview: {\n\t\t\t\t\tconst address = makeAddress(tunnel.tunnelRemoteHost, tunnel.tunnelRemotePort);\n\t\t\t\t\tawait OpenPortInPreviewAction.run(this.remoteExplorerService.tunnelModel, this.openerService, this.externalOpenerService, address);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase OnPortForward.Silent: break;\n\t\t\t\tdefault: {\n\t\t\t\t\tconst elapsed = new Date().getTime() - this.lastNotifyTime.getTime();\n\t\t\t\t\tthis.logService.trace(`ForwardedPorts: (OnAutoForwardedAction) time elapsed since last notification ${elapsed} ms`);\n\t\t\t\t\tif (elapsed > OnAutoForwardedAction.NOTIFY_COOL_DOWN) {\n\t\t\t\t\t\tawait this.showNotification(tunnel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic hide(removedPorts: number[]) {\n\t\tif (this.doActionTunnels) {\n\t\t\tthis.doActionTunnels = this.doActionTunnels.filter(value => !removedPorts.includes(value.tunnelRemotePort));\n\t\t}\n\t\tif (this.lastShownPort && removedPorts.indexOf(this.lastShownPort) >= 0) {\n\t\t\tthis.lastNotification?.close();\n\t\t}\n\t}\n\n\tprivate newerTunnel: RemoteTunnel | undefined;\n\tprivate async portNumberHeuristicDelay(): Promise<RemoteTunnel | undefined> {\n\t\tthis.logService.trace(`ForwardedPorts: (OnAutoForwardedAction) Starting heuristic delay`);\n\t\tif (!this.doActionTunnels || this.doActionTunnels.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tthis.doActionTunnels = this.doActionTunnels.sort((a, b) => a.tunnelRemotePort - b.tunnelRemotePort);\n\t\tconst firstTunnel = this.doActionTunnels.shift()!;\n\t\t// Heuristic.\n\t\tif (firstTunnel.tunnelRemotePort % 1000 === 0) {\n\t\t\tthis.logService.trace(`ForwardedPorts: (OnAutoForwardedAction) Heuristic chose tunnel because % 1000: ${firstTunnel.tunnelRemotePort}`);\n\t\t\tthis.newerTunnel = firstTunnel;\n\t\t\treturn firstTunnel;\n\t\t\t// 9229 is the node inspect port\n\t\t} else if (firstTunnel.tunnelRemotePort < 10000 && firstTunnel.tunnelRemotePort !== 9229) {\n\t\t\tthis.logService.trace(`ForwardedPorts: (OnAutoForwardedAction) Heuristic chose tunnel because < 10000: ${firstTunnel.tunnelRemotePort}`);\n\t\t\tthis.newerTunnel = firstTunnel;\n\t\t\treturn firstTunnel;\n\t\t}\n\n\t\tthis.logService.trace(`ForwardedPorts: (OnAutoForwardedAction) Waiting for \"better\" tunnel than ${firstTunnel.tunnelRemotePort}`);\n\t\tthis.newerTunnel = undefined;\n\t\treturn new Promise(resolve => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (this.newerTunnel) {\n\t\t\t\t\tresolve(undefined);\n\t\t\t\t} else if (this.doActionTunnels?.includes(firstTunnel)) {\n\t\t\t\t\tresolve(firstTunnel);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(undefined);\n\t\t\t\t}\n\t\t\t}, 3000);\n\t\t});\n\t}\n\n\tprivate basicMessage(tunnel: RemoteTunnel) {\n\t\treturn nls.localize('remote.tunnelsView.automaticForward', \"Your application running on port {0} is available.  \",\n\t\t\ttunnel.tunnelRemotePort);\n\t}\n\n\tprivate linkMessage() {\n\t\treturn nls.localize(\n\t\t\t{ key: 'remote.tunnelsView.notificationLink2', comment: ['[See all forwarded ports]({0}) is a link. Only translate `See all forwarded ports`. Do not change brackets and parentheses or {0}'] },\n\t\t\t\"[See all forwarded ports]({0})\", `command:${TunnelPanel.ID}.focus`);\n\t}\n\n\tprivate async showNotification(tunnel: RemoteTunnel) {\n\t\tif (!await this.hostService.hadLastFocus()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.lastNotification?.close();\n\t\tlet message = this.basicMessage(tunnel);\n\t\tconst choices = [this.openBrowserChoice(tunnel)];\n\t\tif (!isWeb || openPreviewEnabledContext.getValue(this.contextKeyService)) {\n\t\t\tchoices.push(this.openPreviewChoice(tunnel));\n\t\t}\n\n\t\tif ((tunnel.tunnelLocalPort !== tunnel.tunnelRemotePort) && this.tunnelService.canElevate && this.tunnelService.isPortPrivileged(tunnel.tunnelRemotePort)) {\n\t\t\t// Privileged ports are not on Windows, so it's safe to use \"superuser\"\n\t\t\tmessage += nls.localize('remote.tunnelsView.elevationMessage', \"You'll need to run as superuser to use port {0} locally.  \", tunnel.tunnelRemotePort);\n\t\t\tchoices.unshift(this.elevateChoice(tunnel));\n\t\t}\n\n\t\tif (tunnel.privacy === TunnelPrivacyId.Private && isWeb && this.tunnelService.canChangePrivacy) {\n\t\t\tchoices.push(this.makePublicChoice(tunnel));\n\t\t}\n\n\t\tmessage += this.linkMessage();\n\n\t\tthis.lastNotification = this.notificationService.prompt(Severity.Info, message, choices, { neverShowAgain: { id: 'remote.tunnelsView.autoForwardNeverShow', isSecondary: true } });\n\t\tthis.lastShownPort = tunnel.tunnelRemotePort;\n\t\tthis.lastNotifyTime = new Date();\n\t\tthis.lastNotification.onDidClose(() => {\n\t\t\tthis.lastNotification = undefined;\n\t\t\tthis.lastShownPort = undefined;\n\t\t});\n\t}\n\n\tprivate makePublicChoice(tunnel: RemoteTunnel): IPromptChoice {\n\t\treturn {\n\t\t\tlabel: nls.localize('remote.tunnelsView.makePublic', \"Make Public\"),\n\t\t\trun: async () => {\n\t\t\t\tconst oldTunnelDetails = mapHasAddressLocalhostOrAllInterfaces(this.remoteExplorerService.tunnelModel.forwarded, tunnel.tunnelRemoteHost, tunnel.tunnelRemotePort);\n\t\t\t\tawait this.remoteExplorerService.close({ host: tunnel.tunnelRemoteHost, port: tunnel.tunnelRemotePort }, TunnelCloseReason.Other);\n\t\t\t\treturn this.remoteExplorerService.forward({\n\t\t\t\t\tremote: { host: tunnel.tunnelRemoteHost, port: tunnel.tunnelRemotePort },\n\t\t\t\t\tlocal: tunnel.tunnelLocalPort,\n\t\t\t\t\tname: oldTunnelDetails?.name,\n\t\t\t\t\televateIfNeeded: true,\n\t\t\t\t\tprivacy: TunnelPrivacyId.Public,\n\t\t\t\t\tsource: oldTunnelDetails?.source\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate openBrowserChoice(tunnel: RemoteTunnel): IPromptChoice {\n\t\tconst address = makeAddress(tunnel.tunnelRemoteHost, tunnel.tunnelRemotePort);\n\t\treturn {\n\t\t\tlabel: OpenPortInBrowserAction.LABEL,\n\t\t\trun: () => OpenPortInBrowserAction.run(this.remoteExplorerService.tunnelModel, this.openerService, address)\n\t\t};\n\t}\n\n\tprivate openPreviewChoice(tunnel: RemoteTunnel): IPromptChoice {\n\t\tconst address = makeAddress(tunnel.tunnelRemoteHost, tunnel.tunnelRemotePort);\n\t\treturn {\n\t\t\tlabel: OpenPortInPreviewAction.LABEL,\n\t\t\trun: () => OpenPortInPreviewAction.run(this.remoteExplorerService.tunnelModel, this.openerService, this.externalOpenerService, address)\n\t\t};\n\t}\n\n\tprivate elevateChoice(tunnel: RemoteTunnel): IPromptChoice {\n\t\treturn {\n\t\t\t// Privileged ports are not on Windows, so it's ok to stick to just \"sudo\".\n\t\t\tlabel: nls.localize('remote.tunnelsView.elevationButton', \"Use Port {0} as Sudo...\", tunnel.tunnelRemotePort),\n\t\t\trun: async () => {\n\t\t\t\tawait this.remoteExplorerService.close({ host: tunnel.tunnelRemoteHost, port: tunnel.tunnelRemotePort }, TunnelCloseReason.Other);\n\t\t\t\tconst newTunnel = await this.remoteExplorerService.forward({\n\t\t\t\t\tremote: { host: tunnel.tunnelRemoteHost, port: tunnel.tunnelRemotePort },\n\t\t\t\t\tlocal: tunnel.tunnelRemotePort,\n\t\t\t\t\televateIfNeeded: true,\n\t\t\t\t\tsource: AutoTunnelSource\n\t\t\t\t});\n\t\t\t\tif (!newTunnel || (typeof newTunnel === 'string')) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.lastNotification?.close();\n\t\t\t\tthis.lastShownPort = newTunnel.tunnelRemotePort;\n\t\t\t\tthis.lastNotification = this.notificationService.prompt(Severity.Info,\n\t\t\t\t\tthis.basicMessage(newTunnel) + this.linkMessage(),\n\t\t\t\t\t[this.openBrowserChoice(newTunnel), this.openPreviewChoice(tunnel)],\n\t\t\t\t\t{ neverShowAgain: { id: 'remote.tunnelsView.autoForwardNeverShow', isSecondary: true } });\n\t\t\t\tthis.lastNotification.onDidClose(() => {\n\t\t\t\t\tthis.lastNotification = undefined;\n\t\t\t\t\tthis.lastShownPort = undefined;\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\t}\n}\n\nclass OutputAutomaticPortForwarding extends Disposable {\n\tprivate portsFeatures?: IDisposable;\n\tprivate urlFinder?: UrlFinder;\n\tprivate notifier: OnAutoForwardedAction;\n\n\tconstructor(\n\t\tprivate readonly terminalService: ITerminalService,\n\t\treadonly notificationService: INotificationService,\n\t\treadonly openerService: IOpenerService,\n\t\treadonly externalOpenerService: IExternalUriOpenerService,\n\t\tprivate readonly remoteExplorerService: IRemoteExplorerService,\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\tprivate readonly debugService: IDebugService,\n\t\treadonly tunnelService: ITunnelService,\n\t\treadonly hostService: IHostService,\n\t\treadonly logService: ILogService,\n\t\treadonly contextKeyService: IContextKeyService,\n\t\treadonly privilegedOnly: () => boolean\n\t) {\n\t\tsuper();\n\t\tthis.notifier = new OnAutoForwardedAction(notificationService, remoteExplorerService, openerService, externalOpenerService, tunnelService, hostService, logService, contextKeyService);\n\t\tthis._register(configurationService.onDidChangeConfiguration((e) => {\n\t\t\tif (e.affectsConfiguration(PORT_AUTO_FORWARD_SETTING)) {\n\t\t\t\tthis.tryStartStopUrlFinder();\n\t\t\t}\n\t\t}));\n\n\t\tthis.portsFeatures = this._register(this.remoteExplorerService.onEnabledPortsFeatures(() => {\n\t\t\tthis.tryStartStopUrlFinder();\n\t\t}));\n\t\tthis.tryStartStopUrlFinder();\n\n\t\tif (configurationService.getValue(PORT_AUTO_SOURCE_SETTING) === PORT_AUTO_SOURCE_SETTING_HYBRID) {\n\t\t\tthis._register(this.tunnelService.onTunnelClosed(tunnel => this.notifier.hide([tunnel.port])));\n\t\t}\n\t}\n\n\tprivate tryStartStopUrlFinder() {\n\t\tif (this.configurationService.getValue(PORT_AUTO_FORWARD_SETTING)) {\n\t\t\tthis.startUrlFinder();\n\t\t} else {\n\t\t\tthis.stopUrlFinder();\n\t\t}\n\t}\n\n\tprivate startUrlFinder() {\n\t\tif (!this.urlFinder && !this.remoteExplorerService.portsFeaturesEnabled) {\n\t\t\treturn;\n\t\t}\n\t\tthis.portsFeatures?.dispose();\n\t\tthis.urlFinder = this._register(new UrlFinder(this.terminalService, this.debugService));\n\t\tthis._register(this.urlFinder.onDidMatchLocalUrl(async (localUrl) => {\n\t\t\tif (mapHasAddressLocalhostOrAllInterfaces(this.remoteExplorerService.tunnelModel.detected, localUrl.host, localUrl.port)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst attributes = (await this.remoteExplorerService.tunnelModel.getAttributes([localUrl]))?.get(localUrl.port);\n\t\t\tif (attributes?.onAutoForward === OnPortForward.Ignore) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.privilegedOnly() && !this.tunnelService.isPortPrivileged(localUrl.port)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst forwarded = await this.remoteExplorerService.forward({ remote: localUrl, source: AutoTunnelSource }, attributes ?? null);\n\t\t\tif (forwarded && (typeof forwarded !== 'string')) {\n\t\t\t\tthis.notifier.doAction([forwarded]);\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate stopUrlFinder() {\n\t\tif (this.urlFinder) {\n\t\t\tthis.urlFinder.dispose();\n\t\t\tthis.urlFinder = undefined;\n\t\t}\n\t}\n}\n\nclass ProcAutomaticPortForwarding extends Disposable {\n\tprivate candidateListener: IDisposable | undefined;\n\tprivate autoForwarded: Set<string> = new Set();\n\tprivate notifiedOnly: Set<string> = new Set();\n\tprivate notifier: OnAutoForwardedAction;\n\tprivate initialCandidates: Set<string> = new Set();\n\tprivate portsFeatures: IDisposable | undefined;\n\n\tconstructor(\n\t\tprivate readonly unforwardOnly: boolean,\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\treadonly remoteExplorerService: IRemoteExplorerService,\n\t\treadonly notificationService: INotificationService,\n\t\treadonly openerService: IOpenerService,\n\t\treadonly externalOpenerService: IExternalUriOpenerService,\n\t\treadonly tunnelService: ITunnelService,\n\t\treadonly hostService: IHostService,\n\t\treadonly logService: ILogService,\n\t\treadonly contextKeyService: IContextKeyService,\n\t) {\n\t\tsuper();\n\t\tthis.notifier = new OnAutoForwardedAction(notificationService, remoteExplorerService, openerService, externalOpenerService, tunnelService, hostService, logService, contextKeyService);\n\t\tthis.initialize();\n\t}\n\n\tprivate async initialize() {\n\t\tif (!this.remoteExplorerService.tunnelModel.environmentTunnelsSet) {\n\t\t\tawait new Promise<void>(resolve => this.remoteExplorerService.tunnelModel.onEnvironmentTunnelsSet(() => resolve()));\n\t\t}\n\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(async (e) => {\n\t\t\tif (e.affectsConfiguration(PORT_AUTO_FORWARD_SETTING)) {\n\t\t\t\tawait this.startStopCandidateListener();\n\t\t\t}\n\t\t}));\n\n\t\tthis.portsFeatures = this._register(this.remoteExplorerService.onEnabledPortsFeatures(async () => {\n\t\t\tawait this.startStopCandidateListener();\n\t\t}));\n\n\t\tthis.startStopCandidateListener();\n\t}\n\n\tprivate async startStopCandidateListener() {\n\t\tif (this.configurationService.getValue(PORT_AUTO_FORWARD_SETTING)) {\n\t\t\tawait this.startCandidateListener();\n\t\t} else {\n\t\t\tthis.stopCandidateListener();\n\t\t}\n\t}\n\n\tprivate stopCandidateListener() {\n\t\tif (this.candidateListener) {\n\t\t\tthis.candidateListener.dispose();\n\t\t\tthis.candidateListener = undefined;\n\t\t}\n\t}\n\n\tprivate async startCandidateListener() {\n\t\tif (this.candidateListener || !this.remoteExplorerService.portsFeaturesEnabled) {\n\t\t\treturn;\n\t\t}\n\t\tthis.portsFeatures?.dispose();\n\n\t\t// Capture list of starting candidates so we don't auto forward them later.\n\t\tawait this.setInitialCandidates();\n\n\t\t// Need to check the setting again, since it may have changed while we waited for the initial candidates to be set.\n\t\tif (this.configurationService.getValue(PORT_AUTO_FORWARD_SETTING)) {\n\t\t\tthis.candidateListener = this._register(this.remoteExplorerService.tunnelModel.onCandidatesChanged(this.handleCandidateUpdate, this));\n\t\t}\n\t}\n\n\tprivate async setInitialCandidates() {\n\t\tlet startingCandidates = this.remoteExplorerService.tunnelModel.candidatesOrUndefined;\n\t\tif (!startingCandidates) {\n\t\t\tawait new Promise<void>(resolve => this.remoteExplorerService.tunnelModel.onCandidatesChanged(() => resolve()));\n\t\t\tstartingCandidates = this.remoteExplorerService.tunnelModel.candidates;\n\t\t}\n\n\t\tfor (const value of startingCandidates) {\n\t\t\tthis.initialCandidates.add(makeAddress(value.host, value.port));\n\t\t}\n\t\tthis.logService.debug(`ForwardedPorts: (ProcForwarding) Initial candidates set to ${startingCandidates.map(candidate => candidate.port).join(', ')}`);\n\t}\n\n\tprivate async forwardCandidates(): Promise<RemoteTunnel[] | undefined> {\n\t\tlet attributes: Map<number, Attributes> | undefined;\n\t\tconst allTunnels: RemoteTunnel[] = [];\n\t\tthis.logService.trace(`ForwardedPorts: (ProcForwarding) Attempting to forward ${this.remoteExplorerService.tunnelModel.candidates.length} candidates`);\n\t\tfor (const value of this.remoteExplorerService.tunnelModel.candidates) {\n\t\t\tif (!value.detail) {\n\t\t\t\tthis.logService.trace(`ForwardedPorts: (ProcForwarding) Port ${value.port} missing detail`);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!attributes) {\n\t\t\t\tattributes = await this.remoteExplorerService.tunnelModel.getAttributes(this.remoteExplorerService.tunnelModel.candidates);\n\t\t\t}\n\n\t\t\tconst portAttributes = attributes?.get(value.port);\n\n\t\t\tconst address = makeAddress(value.host, value.port);\n\t\t\tif (this.initialCandidates.has(address) && (portAttributes?.onAutoForward === undefined)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (this.notifiedOnly.has(address) || this.autoForwarded.has(address)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst alreadyForwarded = mapHasAddressLocalhostOrAllInterfaces(this.remoteExplorerService.tunnelModel.forwarded, value.host, value.port);\n\t\t\tif (mapHasAddressLocalhostOrAllInterfaces(this.remoteExplorerService.tunnelModel.detected, value.host, value.port)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (portAttributes?.onAutoForward === OnPortForward.Ignore) {\n\t\t\t\tthis.logService.trace(`ForwardedPorts: (ProcForwarding) Port ${value.port} is ignored`);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst forwarded = await this.remoteExplorerService.forward({ remote: value, source: AutoTunnelSource }, portAttributes ?? null);\n\t\t\tif (!alreadyForwarded && forwarded) {\n\t\t\t\tthis.logService.trace(`ForwardedPorts: (ProcForwarding) Port ${value.port} has been forwarded`);\n\t\t\t\tthis.autoForwarded.add(address);\n\t\t\t} else if (forwarded) {\n\t\t\t\tthis.logService.trace(`ForwardedPorts: (ProcForwarding) Port ${value.port} has been notified`);\n\t\t\t\tthis.notifiedOnly.add(address);\n\t\t\t}\n\t\t\tif (forwarded && (typeof forwarded !== 'string')) {\n\t\t\t\tallTunnels.push(forwarded);\n\t\t\t}\n\t\t}\n\t\tthis.logService.trace(`ForwardedPorts: (ProcForwarding) Forwarded ${allTunnels.length} candidates`);\n\t\tif (allTunnels.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn allTunnels;\n\t}\n\n\tprivate async handleCandidateUpdate(removed: Map<string, { host: string; port: number }>) {\n\t\tconst removedPorts: number[] = [];\n\t\tlet autoForwarded: Map<string, string | Tunnel>;\n\t\tif (this.unforwardOnly) {\n\t\t\tautoForwarded = new Map();\n\t\t\tfor (const entry of this.remoteExplorerService.tunnelModel.forwarded.entries()) {\n\t\t\t\tif (entry[1].source.source === TunnelSource.Auto) {\n\t\t\t\t\tautoForwarded.set(entry[0], entry[1]);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tautoForwarded = new Map(this.autoForwarded.entries());\n\t\t}\n\n\t\tfor (const removedPort of removed) {\n\t\t\tconst key = removedPort[0];\n\t\t\tlet value = removedPort[1];\n\t\t\tconst forwardedValue = mapHasAddressLocalhostOrAllInterfaces(autoForwarded, value.host, value.port);\n\t\t\tif (forwardedValue) {\n\t\t\t\tif (typeof forwardedValue === 'string') {\n\t\t\t\t\tthis.autoForwarded.delete(key);\n\t\t\t\t} else {\n\t\t\t\t\tvalue = { host: forwardedValue.remoteHost, port: forwardedValue.remotePort };\n\t\t\t\t}\n\t\t\t\tawait this.remoteExplorerService.close(value, TunnelCloseReason.AutoForwardEnd);\n\t\t\t\tremovedPorts.push(value.port);\n\t\t\t} else if (this.notifiedOnly.has(key)) {\n\t\t\t\tthis.notifiedOnly.delete(key);\n\t\t\t\tremovedPorts.push(value.port);\n\t\t\t} else if (this.initialCandidates.has(key)) {\n\t\t\t\tthis.initialCandidates.delete(key);\n\t\t\t}\n\t\t}\n\n\t\tif (this.unforwardOnly) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (removedPorts.length > 0) {\n\t\t\tawait this.notifier.hide(removedPorts);\n\t\t}\n\n\t\tconst tunnels = await this.forwardCandidates();\n\t\tif (tunnels) {\n\t\t\tawait this.notifier.doAction(tunnels);\n\t\t}\n\t}\n}\n"]}