{"version":3,"sources":["vs/workbench/contrib/remote/browser/tunnelFactory.ts"],"names":[],"mappings":"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","file":"tunnelFactory.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { ITunnelService, TunnelOptions, RemoteTunnel, TunnelCreationOptions, ITunnel, TunnelProtocol, TunnelPrivacyId } from 'vs/platform/tunnel/common/tunnel';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IBrowserWorkbenchEnvironmentService } from 'vs/workbench/services/environment/browser/environmentService';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { URI } from 'vs/base/common/uri';\nimport { IRemoteExplorerService } from 'vs/workbench/services/remote/common/remoteExplorerService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { forwardedPortsViewEnabled } from 'vs/workbench/services/remote/common/tunnelModel';\n\nexport class TunnelFactoryContribution extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@ITunnelService tunnelService: ITunnelService,\n\t\t@IBrowserWorkbenchEnvironmentService environmentService: IBrowserWorkbenchEnvironmentService,\n\t\t@IOpenerService private openerService: IOpenerService,\n\t\t@IRemoteExplorerService remoteExplorerService: IRemoteExplorerService,\n\t\t@ILogService logService: ILogService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService\n\t) {\n\t\tsuper();\n\t\tconst tunnelFactory = environmentService.options?.tunnelProvider?.tunnelFactory;\n\t\tif (tunnelFactory) {\n\t\t\t// At this point we clearly want the ports view/features since we have a tunnel factory\n\t\t\tcontextKeyService.createKey(forwardedPortsViewEnabled.key, true);\n\t\t\tlet privacyOptions = environmentService.options?.tunnelProvider?.features?.privacyOptions ?? [];\n\t\t\tif (environmentService.options?.tunnelProvider?.features?.public\n\t\t\t\t&& (privacyOptions.length === 0)) {\n\t\t\t\tprivacyOptions = [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 'private',\n\t\t\t\t\t\tlabel: nls.localize('tunnelPrivacy.private', \"Private\"),\n\t\t\t\t\t\tthemeIcon: 'lock'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 'public',\n\t\t\t\t\t\tlabel: nls.localize('tunnelPrivacy.public', \"Public\"),\n\t\t\t\t\t\tthemeIcon: 'eye'\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t}\n\n\t\t\tthis._register(tunnelService.setTunnelProvider({\n\t\t\t\tforwardPort: async (tunnelOptions: TunnelOptions, tunnelCreationOptions: TunnelCreationOptions): Promise<RemoteTunnel | string | undefined> => {\n\t\t\t\t\tlet tunnelPromise: Promise<ITunnel> | undefined;\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttunnelPromise = tunnelFactory(tunnelOptions, tunnelCreationOptions);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tlogService.trace('tunnelFactory: tunnel provider error');\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!tunnelPromise) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t\tlet tunnel: ITunnel;\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttunnel = await tunnelPromise;\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tlogService.trace('tunnelFactory: tunnel provider promise error');\n\t\t\t\t\t\tif (e instanceof Error) {\n\t\t\t\t\t\t\treturn e.message;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t\tconst localAddress = tunnel.localAddress.startsWith('http') ? tunnel.localAddress : `http://${tunnel.localAddress}`;\n\t\t\t\t\tconst remoteTunnel: RemoteTunnel = {\n\t\t\t\t\t\ttunnelRemotePort: tunnel.remoteAddress.port,\n\t\t\t\t\t\ttunnelRemoteHost: tunnel.remoteAddress.host,\n\t\t\t\t\t\t// The tunnel factory may give us an inaccessible local address.\n\t\t\t\t\t\t// To make sure this doesn't happen, resolve the uri immediately.\n\t\t\t\t\t\tlocalAddress: await this.resolveExternalUri(localAddress),\n\t\t\t\t\t\tprivacy: tunnel.privacy ?? (tunnel.public ? TunnelPrivacyId.Public : TunnelPrivacyId.Private),\n\t\t\t\t\t\tprotocol: tunnel.protocol ?? TunnelProtocol.Http,\n\t\t\t\t\t\tdispose: async () => { await tunnel.dispose(); }\n\t\t\t\t\t};\n\t\t\t\t\treturn remoteTunnel;\n\t\t\t\t}\n\t\t\t}));\n\t\t\tconst tunnelInformation = environmentService.options?.tunnelProvider?.features ?\n\t\t\t\t{\n\t\t\t\t\tfeatures: {\n\t\t\t\t\t\televation: !!environmentService.options?.tunnelProvider?.features?.elevation,\n\t\t\t\t\t\tpublic: !!environmentService.options?.tunnelProvider?.features?.public,\n\t\t\t\t\t\tprivacyOptions\n\t\t\t\t\t}\n\t\t\t\t} : undefined;\n\t\t\tremoteExplorerService.setTunnelInformation(tunnelInformation);\n\t\t}\n\t}\n\n\tprivate async resolveExternalUri(uri: string): Promise<string> {\n\t\ttry {\n\t\t\treturn (await this.openerService.resolveExternalUri(URI.parse(uri))).resolved.toString();\n\t\t} catch {\n\t\t\treturn uri;\n\t\t}\n\t}\n}\n"]}