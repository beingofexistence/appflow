{"version":3,"sources":["vs/workbench/contrib/remote/browser/remoteStartEntry.ts"],"names":[],"mappings":"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","file":"remoteStartEntry.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { Action2, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { IExtensionManagementService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { IWorkbenchExtensionEnablementService } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { IContextKeyService, RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { WorkbenchActionExecutedClassification, WorkbenchActionExecutedEvent } from 'vs/base/common/actions';\n\nexport const showStartEntryInWeb = new RawContextKey<boolean>('showRemoteStartEntryInWeb', false);\nexport class RemoteStartEntry extends Disposable implements IWorkbenchContribution {\n\n\tprivate static readonly REMOTE_WEB_START_ENTRY_ACTIONS_COMMAND_ID = 'workbench.action.remote.showWebStartEntryActions';\n\n\tprivate readonly remoteExtensionId: string;\n\tprivate readonly startCommand: string;\n\n\tconstructor(\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IWorkbenchExtensionEnablementService private readonly extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService) {\n\n\t\tsuper();\n\n\t\tconst remoteExtensionTips = this.productService.remoteExtensionTips?.['tunnel'];\n\t\tthis.startCommand = remoteExtensionTips?.startEntry?.startCommand ?? '';\n\t\tthis.remoteExtensionId = remoteExtensionTips?.extensionId ?? '';\n\n\t\tthis._init();\n\t\tthis.registerActions();\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerActions(): void {\n\t\tconst category = { value: nls.localize('remote.category', \"Remote\"), original: 'Remote' };\n\n\t\t// Show Remote Start Action\n\t\tconst startEntry = this;\n\t\tregisterAction2(class extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: RemoteStartEntry.REMOTE_WEB_START_ENTRY_ACTIONS_COMMAND_ID,\n\t\t\t\t\tcategory,\n\t\t\t\t\ttitle: { value: nls.localize('remote.showWebStartEntryActions', \"Show Remote Start Entry for web\"), original: 'Show Remote Start Entry for web' },\n\t\t\t\t\tf1: false\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tasync run(): Promise<void> {\n\t\t\t\tawait startEntry.showWebRemoteStartActions();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.extensionEnablementService.onEnablementChanged(async (result) => {\n\n\t\t\tfor (const ext of result) {\n\t\t\t\tif (ExtensionIdentifier.equals(this.remoteExtensionId, ext.identifier.id)) {\n\t\t\t\t\tif (this.extensionEnablementService.isEnabled(ext)) {\n\t\t\t\t\t\tshowStartEntryInWeb.bindTo(this.contextKeyService).set(true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tshowStartEntryInWeb.bindTo(this.contextKeyService).set(false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate async _init(): Promise<void> {\n\n\t\t// Check if installed and enabled\n\t\tconst installed = (await this.extensionManagementService.getInstalled()).find(value => ExtensionIdentifier.equals(value.identifier.id, this.remoteExtensionId));\n\t\tif (installed) {\n\t\t\tif (this.extensionEnablementService.isEnabled(installed)) {\n\t\t\t\tshowStartEntryInWeb.bindTo(this.contextKeyService).set(true);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async showWebRemoteStartActions() {\n\t\tthis.commandService.executeCommand(this.startCommand);\n\t\tthis.telemetryService.publicLog2<WorkbenchActionExecutedEvent, WorkbenchActionExecutedClassification>('workbenchActionExecuted', {\n\t\t\tid: this.startCommand,\n\t\t\tfrom: 'remote start entry'\n\t\t});\n\t}\n}\n"]}