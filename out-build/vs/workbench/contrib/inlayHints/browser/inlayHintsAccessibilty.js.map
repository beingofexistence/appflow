{"version":3,"sources":["vs/workbench/contrib/inlayHints/browser/inlayHintsAccessibilty.ts"],"names":[],"mappings":"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","file":"inlayHintsAccessibilty.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from 'vs/base/browser/dom';\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { KeyCode } from 'vs/base/common/keyCodes';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction2, EditorContributionInstantiation, registerEditorContribution } from 'vs/editor/browser/editorExtensions';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { InlayHintItem, asCommandLink } from 'vs/editor/contrib/inlayHints/browser/inlayHints';\nimport { InlayHintsController } from 'vs/editor/contrib/inlayHints/browser/inlayHintsController';\nimport { localize } from 'vs/nls';\nimport { registerAction2 } from 'vs/platform/actions/common/actions';\nimport { AudioCue, IAudioCueService } from 'vs/platform/audioCues/browser/audioCueService';\nimport { IContextKey, IContextKeyService, RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { Link } from 'vs/platform/opener/browser/link';\n\n\nexport class InlayHintsAccessibility implements IEditorContribution {\n\n\tstatic readonly IsReading = new RawContextKey<boolean>('isReadingLineWithInlayHints', false, { type: 'boolean', description: localize('isReadingLineWithInlayHints', \"Whether the current line and its inlay hints are currently focused\") });\n\n\tstatic readonly ID: string = 'editor.contrib.InlayHintsAccessibility';\n\n\tstatic get(editor: ICodeEditor): InlayHintsAccessibility | undefined {\n\t\treturn editor.getContribution<InlayHintsAccessibility>(InlayHintsAccessibility.ID) ?? undefined;\n\t}\n\n\tprivate readonly _ariaElement: HTMLSpanElement;\n\tprivate readonly _ctxIsReading: IContextKey<boolean>;\n\n\tprivate readonly _sessionDispoosables = new DisposableStore();\n\n\tconstructor(\n\t\tprivate readonly _editor: ICodeEditor,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IAudioCueService private readonly _audioCueService: IAudioCueService,\n\t\t@IInstantiationService private readonly _instaService: IInstantiationService,\n\t) {\n\t\tthis._ariaElement = document.createElement('span');\n\t\tthis._ariaElement.style.position = 'fixed';\n\t\tthis._ariaElement.className = 'inlayhint-accessibility-element';\n\t\tthis._ariaElement.tabIndex = 0;\n\t\tthis._ariaElement.setAttribute('aria-description', localize('description', \"Code with Inlay Hint Information\"));\n\n\t\tthis._ctxIsReading = InlayHintsAccessibility.IsReading.bindTo(contextKeyService);\n\t}\n\n\tdispose(): void {\n\t\tthis._sessionDispoosables.dispose();\n\t\tthis._ctxIsReading.reset();\n\t\tthis._ariaElement.remove();\n\t}\n\n\tprivate _reset(): void {\n\t\tdom.clearNode(this._ariaElement);\n\t\tthis._sessionDispoosables.clear();\n\t\tthis._ctxIsReading.reset();\n\t}\n\n\tprivate async _read(line: number, hints: InlayHintItem[]) {\n\n\t\tthis._sessionDispoosables.clear();\n\n\t\tif (!this._ariaElement.isConnected) {\n\t\t\tthis._editor.getDomNode()?.appendChild(this._ariaElement);\n\t\t}\n\n\t\tif (!this._editor.hasModel() || !this._ariaElement.isConnected) {\n\t\t\tthis._ctxIsReading.set(false);\n\t\t\treturn;\n\t\t}\n\n\t\tconst cts = new CancellationTokenSource();\n\t\tthis._sessionDispoosables.add(cts);\n\n\t\tfor (const hint of hints) {\n\t\t\tawait hint.resolve(cts.token);\n\t\t}\n\n\t\tif (cts.token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\t\tconst model = this._editor.getModel();\n\t\t// const text = this._editor.getModel().getLineContent(line);\n\t\tconst newChildren: (string | HTMLElement)[] = [];\n\n\t\tlet start = 0;\n\t\tlet tooLongToRead = false;\n\n\t\tfor (const item of hints) {\n\n\t\t\t// text\n\t\t\tconst part = model.getValueInRange({ startLineNumber: line, startColumn: start + 1, endLineNumber: line, endColumn: item.hint.position.column });\n\t\t\tif (part.length > 0) {\n\t\t\t\tnewChildren.push(part);\n\t\t\t\tstart = item.hint.position.column - 1;\n\t\t\t}\n\n\t\t\t// check length\n\t\t\tif (start > 750) {\n\t\t\t\tnewChildren.push('…');\n\t\t\t\ttooLongToRead = true;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// hint\n\t\t\tconst em = document.createElement('em');\n\t\t\tconst { label } = item.hint;\n\t\t\tif (typeof label === 'string') {\n\t\t\t\tem.innerText = label;\n\t\t\t} else {\n\t\t\t\tfor (const part of label) {\n\t\t\t\t\tif (part.command) {\n\t\t\t\t\t\tconst link = this._instaService.createInstance(Link, em,\n\t\t\t\t\t\t\t{ href: asCommandLink(part.command), label: part.label, title: part.command.title },\n\t\t\t\t\t\t\tundefined\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthis._sessionDispoosables.add(link);\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tem.innerText += part.label;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tnewChildren.push(em);\n\t\t}\n\n\t\t// trailing text\n\t\tif (!tooLongToRead) {\n\t\t\tnewChildren.push(model.getValueInRange({ startLineNumber: line, startColumn: start + 1, endLineNumber: line, endColumn: Number.MAX_SAFE_INTEGER }));\n\t\t}\n\n\t\tdom.reset(this._ariaElement, ...newChildren);\n\t\tthis._ariaElement.focus();\n\t\tthis._ctxIsReading.set(true);\n\n\t\t// reset on blur\n\t\tthis._sessionDispoosables.add(dom.addDisposableListener(this._ariaElement, 'focusout', () => {\n\t\t\tthis._reset();\n\t\t}));\n\t}\n\n\n\n\tstartInlayHintsReading(): void {\n\t\tif (!this._editor.hasModel()) {\n\t\t\treturn;\n\t\t}\n\t\tconst line = this._editor.getPosition().lineNumber;\n\t\tconst hints = InlayHintsController.get(this._editor)?.getInlayHintsForLine(line);\n\t\tif (!hints || hints.length === 0) {\n\t\t\tthis._audioCueService.playAudioCue(AudioCue.noInlayHints);\n\t\t} else {\n\t\t\tthis._read(line, hints);\n\t\t}\n\t}\n\n\tstopInlayHintsReading(): void {\n\t\tthis._reset();\n\t\tthis._editor.focus();\n\t}\n}\n\n\nregisterAction2(class StartReadHints extends EditorAction2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'inlayHints.startReadingLineWithHint',\n\t\t\ttitle: {\n\t\t\t\tvalue: localize('read.title', 'Read Line With Inline Hints'),\n\t\t\t\toriginal: 'Read Line With Inline Hints'\n\t\t\t},\n\t\t\tprecondition: EditorContextKeys.hasInlayHintsProvider,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\trunEditorCommand(_accessor: ServicesAccessor, editor: ICodeEditor) {\n\t\tconst ctrl = InlayHintsAccessibility.get(editor);\n\t\tctrl?.startInlayHintsReading();\n\t}\n});\n\nregisterAction2(class StopReadHints extends EditorAction2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'inlayHints.stopReadingLineWithHint',\n\t\t\ttitle: {\n\t\t\t\tvalue: localize('stop.title', 'Stop Inlay Hints Reading'),\n\t\t\t\toriginal: 'Stop Inlay Hints Reading'\n\t\t\t},\n\t\t\tprecondition: InlayHintsAccessibility.IsReading,\n\t\t\tf1: true,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t\tprimary: KeyCode.Escape\n\t\t\t}\n\t\t});\n\t}\n\n\trunEditorCommand(_accessor: ServicesAccessor, editor: ICodeEditor) {\n\t\tconst ctrl = InlayHintsAccessibility.get(editor);\n\t\tctrl?.stopInlayHintsReading();\n\t}\n});\n\nregisterEditorContribution(InlayHintsAccessibility.ID, InlayHintsAccessibility, EditorContributionInstantiation.Lazy);\n"]}