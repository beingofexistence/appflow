{"version":3,"sources":["vs/workbench/contrib/tasks/common/taskConfiguration.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAyBhG,IAAkB,YAejB;IAfD,WAAkB,YAAY;QAC7B;;WAEG;QACH,mDAAU,CAAA;QAEV;;WAEG;QACH,mDAAU,CAAA;QAEV;;WAEG;QACH,+CAAQ,CAAA;IACT,CAAC,EAfiB,YAAY,4BAAZ,YAAY,QAe7B;IA2GD,IAAiB,eAAe,CAK/B;IALD,WAAiB,eAAe;QAC/B,SAAgB,EAAE,CAAC,KAAU;YAC5B,MAAM,SAAS,GAAoB,KAAK,CAAC;YACzC,OAAO,SAAS,KAAK,SAAS,IAAI,KAAK,CAAC,GAAG,CAAM,KAAK,CAAC,IAAI,CAAC,CAAC;QAC9D,CAAC;QAHe,kBAAE,KAGjB,CAAA;IACF,CAAC,EALgB,eAAe,+BAAf,eAAe,QAK/B;IAwED,IAAiB,aAAa,CAc7B;IAdD,WAAiB,aAAa;QAC7B,SAAgB,KAAK,CAAC,KAAoB;YACzC,IAAI,KAAK,CAAC,GAAG,CAAM,KAAK,CAAC,EAAE;gBAC1B,OAAO,KAAK,CAAC;aACb;iBAAM,IAAI,KAAK,CAAC,GAAG,CAAW,KAAK,CAAC,EAAE;gBACtC,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACvB;iBAAM;gBACN,IAAI,KAAK,CAAC,GAAG,CAAM,KAAK,CAAC,KAAK,CAAC,EAAE;oBAChC,OAAO,KAAK,CAAC,KAAK,CAAC;iBACnB;qBAAM;oBACN,OAAO,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;iBAC7B;aACD;QACF,CAAC;QAZe,mBAAK,QAYpB,CAAA;IACF,CAAC,EAdgB,aAAa,6BAAb,aAAa,QAc7B;IA0SD,IAAK,kBAKJ;IALD,WAAK,kBAAkB;QACtB,iEAAO,CAAA;QACP,+DAAM,CAAA;QACN,+EAAc,CAAA;QACd,6DAAK,CAAA;IACN,CAAC,EALI,kBAAkB,KAAlB,kBAAkB,QAKtB;IAOD,MAAM,WAAW,GAAU,EAAE,CAAC;IAC9B,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAE3B,SAAS,cAAc,CAAuB,MAAS,EAAE,MAAkB,EAAE,GAAM;QAClF,MAAM,WAAW,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;QAChC,IAAI,WAAW,KAAK,SAAS,EAAE;YAC9B,MAAM,CAAC,GAAG,CAAC,GAAG,WAAY,CAAC;SAC3B;IACF,CAAC;IAED,SAAS,YAAY,CAAuB,MAAS,EAAE,MAAkB,EAAE,GAAM;QAChF,MAAM,WAAW,GAAG,MAAM,CAAC,GAAG,CAAC,CAAC;QAChC,IAAI,MAAM,CAAC,GAAG,CAAC,KAAK,SAAS,IAAI,WAAW,KAAK,SAAS,EAAE;YAC3D,MAAM,CAAC,GAAG,CAAC,GAAG,WAAY,CAAC;SAC3B;IACF,CAAC;IAiBD,SAAS,QAAQ,CAAgB,KAAoB,EAAE,UAA2C,EAAE,kBAA2B,KAAK;QACnI,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,IAAI,UAAU,KAAK,SAAS,EAAE;YACtE,OAAO,IAAI,CAAC;SACZ;QACD,KAAK,MAAM,IAAI,IAAI,UAAU,EAAE;YAC9B,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACtC,IAAI,QAAQ,KAAK,SAAS,IAAI,QAAQ,KAAK,IAAI,EAAE;gBAChD,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;oBAC5D,OAAO,KAAK,CAAC;iBACb;qBAAM,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,eAAe,EAAE;oBAChF,OAAO,KAAK,CAAC;iBACb;aACD;SACD;QACD,OAAO,IAAI,CAAC;IACb,CAAC;IAED,SAAS,iBAAiB,CAAgB,MAAqB,EAAE,MAAqB,EAAE,UAA+B;QACtH,IAAI,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,EAAE,UAAU,CAAC,EAAE;YAC5C,OAAO,MAAM,CAAC;SACd;QACD,IAAI,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,EAAE,UAAU,CAAC,EAAE;YAC5C,OAAO,MAAM,CAAC;SACd;QACD,KAAK,MAAM,IAAI,IAAI,UAAU,EAAE;YAC9B,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC/B,IAAI,KAAU,CAAC;YACf,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;gBAC5B,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;aACvE;iBAAM;gBACN,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;aACzB;YACD,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;gBAC1C,MAAM,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;aACzB;SACD;QACD,OAAO,MAAM,CAAC;IACf,CAAC;IAED,SAAS,eAAe,CAAgB,MAAqB,EAAE,MAAqB,EAAE,UAA2C,EAAE,kBAA2B,KAAK;QAClK,IAAI,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,EAAE,UAAU,CAAC,EAAE;YAC5C,OAAO,MAAM,CAAC;SACd;QACD,IAAI,CAAC,MAAM,IAAI,QAAQ,CAAC,MAAM,EAAE,UAAU,EAAE,eAAe,CAAC,EAAE;YAC7D,OAAO,MAAM,CAAC;SACd;QACD,KAAK,MAAM,IAAI,IAAI,UAAW,EAAE;YAC/B,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC/B,IAAI,KAAU,CAAC;YACf,IAAI,IAAI,CAAC,IAAI,EAAE;gBACd,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;aACrE;iBAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,KAAK,SAAS,EAAE;gBAC1C,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC;aACzB;YACD,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;gBAC1C,MAAM,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;aACzB;SACD;QACD,OAAO,MAAM,CAAC;IACf,CAAC;IAED,SAAS,aAAa,CAAgB,MAAqB,EAAE,QAAuB,EAAE,UAA+B,EAAE,OAAsB;QAC5I,IAAI,MAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YACtC,OAAO,MAAM,CAAC;SACd;QACD,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,IAAI,IAAI,QAAQ,KAAK,SAAS,IAAI,QAAQ,KAAK,IAAI,EAAE;YAC3F,IAAI,QAAQ,KAAK,SAAS,IAAI,QAAQ,KAAK,IAAI,EAAE;gBAChD,OAAO,OAAO,CAAC,GAAG,CAAO,QAAQ,CAAC,CAAC;aACnC;iBAAM;gBACN,OAAO,SAAS,CAAC;aACjB;SACD;QACD,KAAK,MAAM,IAAI,IAAI,UAAU,EAAE;YAC9B,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC;YAC/B,IAAI,MAAM,CAAC,QAAQ,CAAC,KAAK,SAAS,EAAE;gBACnC,SAAS;aACT;YACD,IAAI,KAAU,CAAC;YACf,IAAI,IAAI,CAAC,IAAI,EAAE;gBACd,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,CAAC;aAC1D;iBAAM;gBACN,KAAK,GAAG,QAAQ,CAAC,QAAQ,CAAC,CAAC;aAC3B;YAED,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;gBAC1C,MAAM,CAAC,QAAQ,CAAC,GAAG,KAAK,CAAC;aACzB;SACD;QACD,OAAO,MAAM,CAAC;IACf,CAAC;IAED,SAAS,OAAO,CAAgB,MAAS,EAAE,UAA+B;QACzE,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,KAAK,IAAI,EAAE;YAC5C,OAAO,SAAS,CAAC;SACjB;QACD,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YAC5B,OAAO,MAAM,CAAC;SACd;QACD,KAAK,MAAM,IAAI,IAAI,UAAU,EAAE;YAC9B,IAAI,IAAI,CAAC,IAAI,EAAE;gBACd,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACpC,IAAI,KAAK,EAAE;oBACV,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;iBACxB;aACD;SACD;QACD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACtB,OAAO,MAAM,CAAC;IACf,CAAC;IAED,IAAiB,YAAY,CAa5B;IAbD,WAAiB,YAAY;QAC5B,SAAgB,UAAU,CAAC,KAAyB;YACnD,IAAI,CAAC,KAAK,EAAE;gBACX,OAAO,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC;aAClC;YACD,QAAQ,KAAK,CAAC,WAAW,EAAE,EAAE;gBAC5B,KAAK,YAAY;oBAChB,OAAO,KAAK,CAAC,YAAY,CAAC,UAAU,CAAC;gBACtC,KAAK,SAAS,CAAC;gBACf;oBACC,OAAO,KAAK,CAAC,YAAY,CAAC,OAAO,CAAC;aACnC;QACF,CAAC;QAXe,uBAAU,aAWzB,CAAA;IACF,CAAC,EAbgB,YAAY,4BAAZ,YAAY,QAa5B;IAED,IAAiB,UAAU,CAiB1B;IAjBD,WAAiB,UAAU;QAC1B,MAAM,UAAU,GAAyC,CAAC,EAAE,QAAQ,EAAE,mBAAmB,EAAE,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,EAAE,EAAE,QAAQ,EAAE,eAAe,EAAE,CAAC,CAAC;QACnJ,SAAgB,iBAAiB,CAAC,KAAoC;YACrE,OAAO;gBACN,iBAAiB,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI;gBACzD,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,YAAY,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC,OAAO;gBAChF,aAAa,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;aAC9C,CAAC;QACH,CAAC;QANe,4BAAiB,oBAMhC,CAAA;QAED,SAAgB,gBAAgB,CAAC,MAAyB,EAAE,MAAqC;YAChG,OAAO,iBAAiB,CAAC,MAAM,EAAE,MAAM,EAAE,UAAU,CAAE,CAAC;QACvD,CAAC;QAFe,2BAAgB,mBAE/B,CAAA;QAED,SAAgB,cAAc,CAAC,MAAyB,EAAE,MAAqC;YAC9F,OAAO,eAAe,CAAC,MAAM,EAAE,MAAM,EAAE,UAAU,CAAE,CAAC;QACrD,CAAC;QAFe,yBAAc,iBAE7B,CAAA;IACF,CAAC,EAjBgB,UAAU,0BAAV,UAAU,QAiB1B;IAgBD,IAAU,kBAAkB,CAiD3B;IAjDD,WAAU,kBAAkB;QAE3B,MAAM,UAAU,GAAiD,CAAC,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC;QAE7I,SAAgB,EAAE,CAAC,KAAU;YAC5B,MAAM,SAAS,GAAwB,KAAK,CAAC;YAC7C,OAAO,SAAS,IAAI,CAAC,KAAK,CAAC,GAAG,CAAM,SAAS,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,GAAG,CAAW,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;QACnG,CAAC;QAHe,qBAAE,KAGjB,CAAA;QAED,SAAgB,IAAI,CAAa,MAAuC,EAAE,OAAsB;YAC/F,IAAI,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE;gBAChB,OAAO,SAAS,CAAC;aACjB;YACD,MAAM,MAAM,GAAwB,EAAE,CAAC;YACvC,IAAI,MAAM,CAAC,UAAU,KAAK,SAAS,EAAE;gBACpC,MAAM,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;aACtC;YACD,IAAI,MAAM,CAAC,IAAI,KAAK,SAAS,EAAE;gBAC9B,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC;aAClC;YACD,IAAI,MAAM,CAAC,OAAO,KAAK,SAAS,EAAE;gBACjC,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC,GAAG,CAAO,MAAM,CAAC,OAAO,CAAC,CAAC;aACnD;YAED,OAAO,MAAM,CAAC;QACf,CAAC;QAhBe,uBAAI,OAgBnB,CAAA;QAED,SAAgB,OAAO,CAAa,KAAgC;YACnE,OAAO,QAAQ,CAAC,KAAK,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;QAC1C,CAAC;QAFe,0BAAO,UAEtB,CAAA;QAED,SAAgB,gBAAgB,CAAa,MAA6C,EAAE,MAA6C;YACxI,OAAO,iBAAiB,CAAC,MAAM,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;QACtD,CAAC;QAFe,mCAAgB,mBAE/B,CAAA;QAED,SAAgB,cAAc,CAAa,MAAiC,EAAE,MAAiC;YAC9G,OAAO,eAAe,CAAC,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC;QAC1D,CAAC;QAFe,iCAAc,iBAE7B,CAAA;QAED,SAAgB,YAAY,CAAa,KAAgC,EAAE,OAAsB;YAChG,OAAO,KAAK,CAAC;QACd,CAAC;QAFe,+BAAY,eAE3B,CAAA;QAED,SAAgB,MAAM,CAAa,KAAgC;YAClE,IAAI,CAAC,KAAK,EAAE;gBACX,OAAO,SAAS,CAAC;aACjB;YACD,OAAO,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAC7B,CAAC;QALe,yBAAM,SAKrB,CAAA;IACF,CAAC,EAjDS,kBAAkB,KAAlB,kBAAkB,QAiD3B;IAED,IAAU,cAAc,CA4DvB;IA5DD,WAAU,cAAc;QAEvB,MAAM,UAAU,GAAiE,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,EAAE,EAAE,QAAQ,EAAE,KAAK,EAAE,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,kBAAkB,EAAE,CAAC,CAAC;QAC7K,MAAM,QAAQ,GAA0B,EAAE,GAAG,EAAE,oBAAoB,EAAE,CAAC;QAEtE,SAAgB,IAAI,CAAa,OAA8B,EAAE,OAAsB;YACtF,MAAM,MAAM,GAAyB,EAAE,CAAC;YACxC,IAAI,OAAO,CAAC,GAAG,KAAK,SAAS,EAAE;gBAC9B,IAAI,KAAK,CAAC,GAAG,CAAM,OAAO,CAAC,GAAG,CAAC,EAAE;oBAChC,MAAM,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC;iBACzB;qBAAM;oBACN,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAgC,EAAE,IAAmE,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;iBAC9J;aACD;YACD,IAAI,OAAO,CAAC,GAAG,KAAK,SAAS,EAAE;gBAC9B,MAAM,CAAC,GAAG,GAAG,OAAO,CAAC,GAAG,CAAO,OAAO,CAAC,GAAG,CAAC,CAAC;aAC5C;YACD,MAAM,CAAC,KAAK,GAAG,kBAAkB,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YAC/D,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC;QAC7C,CAAC;QAde,mBAAI,OAcnB,CAAA;QAED,SAAgB,OAAO,CAAC,KAAuC;YAC9D,OAAO,QAAQ,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;QACpC,CAAC;QAFe,sBAAO,UAEtB,CAAA;QAED,SAAgB,gBAAgB,CAAC,MAAwC,EAAE,MAAwC;YAClH,IAAI,CAAC,MAAM,KAAK,SAAS,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;gBAC9C,OAAO,MAAM,CAAC;aACd;YACD,IAAI,CAAC,MAAM,KAAK,SAAS,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;gBAC9C,OAAO,MAAM,CAAC;aACd;YACD,cAAc,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;YACtC,IAAI,MAAM,CAAC,GAAG,KAAK,SAAS,EAAE;gBAC7B,MAAM,CAAC,GAAG,GAAG,MAAM,CAAC,GAAG,CAAC;aACxB;iBAAM,IAAI,MAAM,CAAC,GAAG,KAAK,SAAS,EAAE;gBACpC,MAAM,GAAG,GAA8B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBAC3D,IAAI,MAAM,CAAC,GAAG,KAAK,SAAS,EAAE;oBAC7B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAI,CAAC,GAAG,CAAC,CAAC,CAAC;iBACpE;gBACD,IAAI,MAAM,CAAC,GAAG,KAAK,SAAS,EAAE;oBAC7B,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAI,CAAC,GAAG,CAAC,CAAC,CAAC;iBACpE;gBACD,MAAM,CAAC,GAAG,GAAG,GAAG,CAAC;aACjB;YACD,MAAM,CAAC,KAAK,GAAG,kBAAkB,CAAC,gBAAgB,CAAC,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,KAAK,CAAC,CAAC;YAC/E,OAAO,MAAM,CAAC;QACf,CAAC;QAtBe,+BAAgB,mBAsB/B,CAAA;QAED,SAAgB,cAAc,CAAC,MAAwC,EAAE,MAAwC;YAChH,OAAO,eAAe,CAAC,MAAM,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;QACpD,CAAC;QAFe,6BAAc,iBAE7B,CAAA;QAED,SAAgB,YAAY,CAAC,KAAuC,EAAE,OAAsB;YAC3F,OAAO,aAAa,CAAC,KAAK,EAAE,QAAQ,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;QAC5D,CAAC;QAFe,2BAAY,eAE3B,CAAA;QAED,SAAgB,MAAM,CAAC,KAA2B;YACjD,OAAO,OAAO,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;QACnC,CAAC;QAFe,qBAAM,SAErB,CAAA;IACF,CAAC,EA5DS,cAAc,KAAd,cAAc,QA4DvB;IAED,IAAU,oBAAoB,CAmS7B;IAnSD,WAAU,oBAAoB;QAE7B,IAAiB,mBAAmB,CAmFnC;QAnFD,WAAiB,mBAAmB;YACnC,MAAM,UAAU,GAAkD,CAAC,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,EAAE,QAAQ,EAAE,gBAAgB,EAAE,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,EAAE,EAAE,QAAQ,EAAE,kBAAkB,EAAE,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,EAAE,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC,CAAC;YAMtS,SAAgB,IAAI,CAAa,MAAiC,EAAE,OAAsB;gBACzF,IAAI,IAAa,CAAC;gBAClB,IAAI,MAAwB,CAAC;gBAC7B,IAAI,cAAuC,CAAC;gBAC5C,IAAI,KAAc,CAAC;gBACnB,IAAI,KAAsB,CAAC;gBAC3B,IAAI,gBAAyB,CAAC;gBAC9B,IAAI,KAAc,CAAC;gBACnB,IAAI,KAAyB,CAAC;gBAC9B,IAAI,KAA0B,CAAC;gBAC/B,IAAI,QAAQ,GAAG,KAAK,CAAC;gBACrB,IAAI,KAAK,CAAC,GAAG,CAAO,MAAM,CAAC,WAAW,CAAC,EAAE;oBACxC,IAAI,GAAG,MAAM,CAAC,WAAW,CAAC;oBAC1B,QAAQ,GAAG,IAAI,CAAC;iBAChB;gBACD,IAAI,KAAK,CAAC,GAAG,CAAM,MAAM,CAAC,UAAU,CAAC,EAAE;oBACtC,MAAM,GAAG,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;oBACxD,QAAQ,GAAG,IAAI,CAAC;iBAChB;gBACD,MAAM,YAAY,GAAG,MAAM,CAAC,YAAY,IAAI,MAAM,CAAC,QAAQ,CAAC;gBAC5D,IAAI,YAAY,EAAE;oBACjB,IAAI,KAAK,CAAC,GAAG,CAAO,YAAY,CAAC,IAAI,CAAC,EAAE;wBACvC,IAAI,GAAG,YAAY,CAAC,IAAI,CAAC;qBACzB;oBACD,IAAI,KAAK,CAAC,GAAG,CAAM,YAAY,CAAC,MAAM,CAAC,EAAE;wBACxC,MAAM,GAAG,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;qBAC1D;oBACD,IAAI,KAAK,CAAC,GAAG,CAAM,YAAY,CAAC,cAAc,CAAC,EAAE;wBAChD,cAAc,GAAG,KAAK,CAAC,iBAAiB,CAAC,UAAU,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;qBACjF;oBACD,IAAI,KAAK,CAAC,GAAG,CAAO,YAAY,CAAC,KAAK,CAAC,EAAE;wBACxC,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC;qBAC3B;oBACD,IAAI,KAAK,CAAC,GAAG,CAAM,YAAY,CAAC,KAAK,CAAC,EAAE;wBACvC,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,UAAU,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;qBACvD;oBACD,IAAI,KAAK,CAAC,GAAG,CAAO,YAAY,CAAC,gBAAgB,CAAC,EAAE;wBACnD,gBAAgB,GAAG,YAAY,CAAC,gBAAgB,CAAC;qBACjD;oBACD,IAAI,KAAK,CAAC,GAAG,CAAO,YAAY,CAAC,KAAK,CAAC,EAAE;wBACxC,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC;qBAC3B;oBACD,IAAI,KAAK,CAAC,GAAG,CAAM,YAAY,CAAC,KAAK,CAAC,EAAE;wBACvC,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC;qBAC3B;oBACD,IAAI,KAAK,CAAC,GAAG,CAAO,YAAY,CAAC,KAAK,CAAC,EAAE;wBACxC,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC;qBAC3B;oBACD,QAAQ,GAAG,IAAI,CAAC;iBAChB;gBACD,IAAI,CAAC,QAAQ,EAAE;oBACd,OAAO,SAAS,CAAC;iBACjB;gBACD,OAAO,EAAE,IAAI,EAAE,IAAK,EAAE,MAAM,EAAE,MAAO,EAAE,cAAc,EAAE,cAAe,EAAE,KAAK,EAAE,KAAM,EAAE,KAAK,EAAE,KAAM,EAAE,gBAAgB,EAAE,gBAAiB,EAAE,KAAK,EAAE,KAAM,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;YACjL,CAAC;YAtDe,wBAAI,OAsDnB,CAAA;YAED,SAAgB,gBAAgB,CAAC,MAAkC,EAAE,MAA8C;gBAClH,OAAO,iBAAiB,CAAC,MAAM,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;YACtD,CAAC;YAFe,oCAAgB,mBAE/B,CAAA;YAED,SAAgB,cAAc,CAAC,MAAkC,EAAE,MAA8C;gBAChH,OAAO,eAAe,CAAC,MAAM,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;YACpD,CAAC;YAFe,kCAAc,iBAE7B,CAAA;YAED,SAAgB,YAAY,CAAC,KAAiC,EAAE,OAAsB;gBACrF,MAAM,WAAW,GAAG,OAAO,CAAC,MAAM,KAAK,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;gBACrF,OAAO,aAAa,CAAC,KAAK,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,MAAM,EAAE,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE,cAAc,EAAE,KAAK,CAAC,iBAAiB,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,SAAS,CAAC,MAAM,EAAE,gBAAgB,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;YAC5O,CAAC;YAHe,gCAAY,eAG3B,CAAA;YAED,SAAgB,MAAM,CAAC,KAAiC;gBACvD,OAAO,OAAO,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;YACnC,CAAC;YAFe,0BAAM,SAErB,CAAA;YAED,SAAgB,OAAO,CAAa,KAAiC;gBACpE,OAAO,QAAQ,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;YACpC,CAAC;YAFe,2BAAO,UAEtB,CAAA;QACF,CAAC,EAnFgB,mBAAmB,GAAnB,wCAAmB,KAAnB,wCAAmB,QAmFnC;QAED,IAAU,WAAW,CAsBpB;QAtBD,WAAU,WAAW;YACpB,SAAgB,IAAI,CAAa,KAAgC;gBAChE,IAAI,KAAK,KAAK,SAAS,IAAI,KAAK,KAAK,IAAI,EAAE;oBAC1C,OAAO,SAAS,CAAC;iBACjB;gBACD,IAAI,KAAK,CAAC,GAAG,CAAM,KAAK,CAAC,EAAE;oBAC1B,OAAO,KAAK,CAAC;iBACb;qBAAM,IAAI,KAAK,CAAC,GAAG,CAAW,KAAK,CAAC,EAAE;oBACtC,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;iBACvB;qBAAM;oBACN,MAAM,OAAO,GAAG,KAAK,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;oBACvD,MAAM,MAAM,GAAG,KAAK,CAAC,GAAG,CAAM,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAW,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;oBAChI,IAAI,MAAM,EAAE;wBACX,OAAO;4BACN,KAAK,EAAE,MAAM;4BACb,OAAO,EAAE,OAAO;yBAChB,CAAC;qBACF;yBAAM;wBACN,OAAO,SAAS,CAAC;qBACjB;iBACD;YACF,CAAC;YApBe,gBAAI,OAoBnB,CAAA;QACF,CAAC,EAtBS,WAAW,KAAX,WAAW,QAsBpB;QAWD,MAAM,UAAU,GAAkD;YACjE,EAAE,QAAQ,EAAE,SAAS,EAAE,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,SAAS,EAAE,IAAI,EAAE,cAAc,EAAE;YAC5F,EAAE,QAAQ,EAAE,MAAM,EAAE,EAAE,EAAE,QAAQ,EAAE,cAAc,EAAE,EAAE,EAAE,QAAQ,EAAE,kBAAkB,EAAE;YACpF,EAAE,QAAQ,EAAE,cAAc,EAAE,IAAI,EAAE,mBAAmB,EAAE;SACvD,CAAC;QAEF,SAAgB,IAAI,CAAa,MAAkC,EAAE,OAAsB;YAC1F,IAAI,MAAM,GAAgC,QAAQ,CAAC,MAAM,EAAE,OAAO,CAAE,CAAC;YAErE,IAAI,QAAQ,GAA4C,SAAS,CAAC;YAClE,IAAI,MAAM,CAAC,OAAO,IAAI,OAAO,CAAC,QAAQ,6BAAqB,EAAE;gBAC5D,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;aAC7C;iBAAM,IAAI,MAAM,CAAC,GAAG,IAAI,OAAO,CAAC,QAAQ,yBAAiB,EAAE;gBAC3D,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;aACzC;iBAAM,IAAI,MAAM,CAAC,KAAK,IAAI,OAAO,CAAC,QAAQ,2BAAmB,EAAE;gBAC/D,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;aAC3C;YACD,IAAI,QAAQ,EAAE;gBACb,MAAM,GAAG,gBAAgB,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,aAAa,2CAAmC,CAAC,CAAC;aACtG;YACD,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC;QAC7C,CAAC;QAfe,yBAAI,OAenB,CAAA;QAED,SAAS,QAAQ,CAAa,MAAsC,EAAE,OAAsB;YAC3F,MAAM,IAAI,GAAoC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAC/E,IAAI,OAA0B,CAAC;YAC/B,IAAI,KAAK,CAAC,GAAG,CAAM,MAAM,CAAC,IAAI,CAAC,EAAE;gBAChC,IAAI,MAAM,CAAC,IAAI,KAAK,OAAO,IAAI,MAAM,CAAC,IAAI,KAAK,SAAS,EAAE;oBACzD,OAAO,GAAG,KAAK,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;iBACpD;aACD;YACD,MAAM,oBAAoB,GAAG,kBAAkB,CAAC,EAAE,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;YAC1E,IAAI,KAAK,CAAC,GAAG,CAAO,MAAM,CAAC,cAAc,CAAC,IAAI,oBAAoB,EAAE;gBACnE,OAAO,GAAG,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC;aAClC;iBAAM,IAAI,MAAM,CAAC,cAAc,KAAK,SAAS,EAAE;gBAC/C,OAAO,GAAG,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC;aACxF;YAED,MAAM,MAAM,GAAgC;gBAC3C,IAAI,EAAE,IAAI;gBACV,OAAO,EAAE,OAAQ;gBACjB,YAAY,EAAE,mBAAmB,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAE;aACxD,CAAC;YAEF,IAAI,MAAM,CAAC,IAAI,KAAK,SAAS,EAAE;gBAC9B,MAAM,CAAC,IAAI,GAAG,EAAE,CAAC;gBACjB,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,EAAE;oBAC9B,MAAM,SAAS,GAAG,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBACxC,IAAI,SAAS,KAAK,SAAS,EAAE;wBAC5B,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;qBAC5B;yBAAM;wBACN,OAAO,CAAC,cAAc,CAAC,IAAI,CAC1B,GAAG,CAAC,QAAQ,CACX,CAAgC,EAChC,IAA6F,EAC7F,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CACrD,CAAC,CAAC;qBACJ;iBACD;aACD;YACD,IAAI,MAAM,CAAC,OAAO,KAAK,SAAS,EAAE;gBACjC,MAAM,CAAC,OAAO,GAAG,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;gBAC9D,IAAI,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,KAAK,KAAK,SAAS,IAAI,oBAAoB,EAAE;oBACjF,MAAM,CAAC,OAAO,CAAC,KAAK,GAAG,kBAAkB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAqC,EAAE,OAAO,CAAC,CAAC;oBACtG,IAAI,OAAO,CAAC,MAAM,KAAK,KAAK,CAAC,eAAe,CAAC,QAAQ,EAAE;wBACtD,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAA6B,EAAE,IAAsF,CAAC,CAAC,CAAC;qBACjK;iBACD;aACD;YAED,IAAI,KAAK,CAAC,GAAG,CAAM,MAAM,CAAC,YAAY,CAAC,EAAE;gBACxC,MAAM,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC;aAC1C;YACD,IAAI,KAAK,CAAC,GAAG,CAAO,MAAM,CAAC,gBAAgB,CAAC,EAAE;gBAC7C,MAAM,CAAC,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;aAClD;YAED,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,MAAM,CAAC;QAC7C,CAAC;QAED,SAAgB,UAAU,CAAC,KAAkC;YAC5D,OAAO,KAAK,IAAI,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC;QAC9B,CAAC;QAFe,+BAAU,aAEzB,CAAA;QAED,SAAgB,OAAO,CAAC,KAA8C;YACrE,OAAO,QAAQ,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;QACpC,CAAC;QAFe,4BAAO,UAEtB,CAAA;QAED,SAAgB,gBAAgB,CAAC,MAAmC,EAAE,MAAmC,EAAE,aAAsB;YAChI,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;gBACpB,OAAO,MAAM,CAAC;aACd;YACD,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;gBACpB,OAAO,MAAM,CAAC;aACd;YACD,cAAc,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;YACvC,cAAc,CAAC,MAAM,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;YAC1C,cAAc,CAAC,MAAM,EAAE,MAAM,EAAE,cAAc,CAAC,CAAC;YAC/C,cAAc,CAAC,MAAM,EAAE,MAAM,EAAE,kBAAkB,CAAC,CAAC;YACnD,IAAI,MAAM,CAAC,IAAI,KAAK,SAAS,EAAE;gBAC9B,IAAI,MAAM,CAAC,IAAI,KAAK,SAAS,IAAI,aAAa,EAAE;oBAC/C,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC;iBAC1B;qBAAM;oBACN,MAAM,CAAC,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;iBAC9C;aACD;YACD,MAAM,CAAC,YAAY,GAAG,mBAAmB,CAAC,gBAAgB,CAAC,MAAM,CAAC,YAAa,EAAE,MAAM,CAAC,YAAY,CAAE,CAAC;YACvG,MAAM,CAAC,OAAO,GAAG,cAAc,CAAC,gBAAgB,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;YACjF,OAAO,MAAM,CAAC;QACf,CAAC;QArBe,qCAAgB,mBAqB/B,CAAA;QAED,SAAgB,cAAc,CAAC,MAAmC,EAAE,MAAmC;YACtG,OAAO,eAAe,CAAC,MAAM,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;QACpD,CAAC;QAFe,mCAAc,iBAE7B,CAAA;QAED,SAAgB,WAAW,CAAC,MAAmC,EAAE,MAA+C,EAAE,QAA4B;YAC7I,IAAI,CAAC,MAAM,KAAK,SAAS,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;gBAC9C,OAAO,MAAM,CAAC;aACd;YACD,MAAM,GAAG,MAAM,IAAI;gBAClB,IAAI,EAAE,SAAS;gBACf,OAAO,EAAE,SAAS;gBAClB,YAAY,EAAE,SAAS;aACvB,CAAC;YACF,IAAI,MAAM,CAAC,IAAI,KAAK,SAAS,EAAE;gBAC9B,YAAY,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC;gBACrC,YAAY,CAAC,MAAM,EAAE,MAAM,EAAE,cAAc,CAAC,CAAC;gBAC7C,YAAY,CAAC,MAAM,EAAE,MAAM,EAAE,kBAAkB,CAAC,CAAC;gBACjD,IAAI,IAAI,GAA0B,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;gBACzE,IAAI,CAAC,MAAM,CAAC,gBAAgB,IAAI,QAAQ,EAAE;oBACzC,IAAI,MAAM,CAAC,YAAY,KAAK,SAAS,EAAE;wBACtC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,GAAG,QAAQ,CAAC,CAAC;qBAC1C;yBAAM;wBACN,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;qBACpB;iBACD;gBACD,IAAI,MAAM,CAAC,IAAI,EAAE;oBAChB,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;iBAChC;gBACD,MAAM,CAAC,IAAI,GAAG,IAAI,CAAC;aACnB;YACD,YAAY,CAAC,MAAM,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC;YAExC,MAAM,CAAC,YAAY,GAAG,mBAAmB,CAAC,cAAc,CAAC,MAAM,CAAC,YAAa,EAAE,MAAM,CAAC,YAAY,CAAE,CAAC;YACrG,MAAM,CAAC,OAAO,GAAG,cAAc,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;YAE/E,OAAO,MAAM,CAAC;QACf,CAAC;QAhCe,gCAAW,cAgC1B,CAAA;QAED,SAAgB,YAAY,CAAC,KAA8C,EAAE,OAAsB;YAClG,IAAI,CAAC,KAAK,IAAI,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;gBACrC,OAAO;aACP;YACD,IAAI,KAAK,CAAC,IAAI,KAAK,SAAS,IAAI,KAAK,CAAC,OAAO,KAAK,SAAS,EAAE;gBAC5D,KAAK,CAAC,OAAO,GAAG,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC;aAC1C;YACD,KAAK,CAAC,YAAY,GAAG,mBAAmB,CAAC,YAAY,CAAC,KAAK,CAAC,YAAa,EAAE,OAAO,CAAE,CAAC;YACrF,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACpB,KAAK,CAAC,OAAO,GAAG,cAAc,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;aACpE;YACD,IAAI,KAAK,CAAC,IAAI,KAAK,SAAS,EAAE;gBAC7B,KAAK,CAAC,IAAI,GAAG,WAAW,CAAC;aACzB;YACD,IAAI,KAAK,CAAC,gBAAgB,KAAK,SAAS,EAAE;gBACzC,KAAK,CAAC,gBAAgB,GAAG,CAAC,OAAO,CAAC,aAAa,2CAAmC,CAAC,CAAC;aACpF;QACF,CAAC;QAjBe,iCAAY,eAiB3B,CAAA;QAED,SAAgB,MAAM,CAAC,KAAkC;YACxD,OAAO,OAAO,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;QACnC,CAAC;QAFe,2BAAM,SAErB,CAAA;IACF,CAAC,EAnSS,oBAAoB,KAApB,oBAAoB,QAmS7B;IAED,IAAiB,uBAAuB,CAoGvC;IApGD,WAAiB,uBAAuB;QAEvC,SAAgB,SAAS,CAAa,QAAiE,EAAE,OAAsB;YAC9H,MAAM,MAAM,GAA4C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAE5E,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;gBAC7B,OAAO,MAAM,CAAC;aACd;YAC6C,QAAS,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;gBACzE,MAAM,mBAAmB,GAAG,CAAC,IAAI,oBAAG,CAAkB,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;gBAC7F,IAAI,IAAA,oBAAG,EAAmB,mBAAmB,CAAC,EAAE;oBAC/C,MAAM,CAAC,mBAAmB,CAAC,IAAI,CAAC,GAAG,mBAAmB,CAAC;iBACvD;qBAAM;oBACN,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAA4B,EAAE,IAAkE,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;iBACnL;YACF,CAAC,CAAC,CAAC;YACH,OAAO,MAAM,CAAC;QACf,CAAC;QAfe,iCAAS,YAexB,CAAA;QAED,SAAgB,gBAAgB,CAAa,QAA2D,EAAE,OAAsB;YAC/H,IAAI,MAAM,GAAuD,EAAE,CAAC;YACpE,IAAI,QAAQ,CAAC,OAAO,IAAI,QAAQ,CAAC,OAAO,CAAC,cAAc,IAAI,OAAO,CAAC,QAAQ,6BAAqB,EAAE;gBACjG,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;aACxD;iBAAM,IAAI,QAAQ,CAAC,GAAG,IAAI,QAAQ,CAAC,GAAG,CAAC,cAAc,IAAI,OAAO,CAAC,QAAQ,yBAAiB,EAAE;gBAC5F,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;aACpD;iBAAM,IAAI,QAAQ,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC,cAAc,IAAI,OAAO,CAAC,QAAQ,2BAAmB,EAAE;gBAClG,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;aACtD;iBAAM,IAAI,QAAQ,CAAC,cAAc,EAAE;gBACnC,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC;aAChD;YACD,OAAO,MAAM,CAAC;QACf,CAAC;QAZe,wCAAgB,mBAY/B,CAAA;QAED,SAAgB,IAAI,CAAa,MAA2D,EAAE,OAAsB;YACnH,MAAM,MAAM,GAAqB,EAAE,CAAC;YACpC,IAAI,MAAM,KAAK,SAAS,EAAE;gBACzB,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC;aACzB;YACD,MAAM,MAAM,GAAa,EAAE,CAAC;YAC5B,SAAS,SAAS,CAAC,OAAyD;gBAC3E,IAAI,OAAO,CAAC,KAAK,EAAE;oBAClB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;iBAC3B;gBACD,IAAI,OAAO,CAAC,MAAM,EAAE;oBACnB,MAAM,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;iBAC/B;YACF,CAAC;YACD,MAAM,IAAI,GAAG,qBAAqB,CAAC,MAAM,CAAC,CAAC;YAC3C,IAAI,IAAI,KAAK,kBAAkB,CAAC,OAAO,EAAE;gBACxC,MAAM,KAAK,GAAG,GAAG,CAAC,QAAQ,CACzB,CAAwC,EACxC,IAAuI,EACvI,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;gBAClC,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACpC;iBAAM,IAAI,IAAI,KAAK,kBAAkB,CAAC,MAAM,IAAI,IAAI,KAAK,kBAAkB,CAAC,cAAc,EAAE;gBAC5F,SAAS,CAAC,qBAAqB,CAAC,MAA6C,EAAE,OAAO,CAAC,CAAC,CAAC;aACzF;iBAAM,IAAI,IAAI,KAAK,kBAAkB,CAAC,KAAK,EAAE;gBAC7C,MAAM,eAAe,GAAqD,MAAM,CAAC;gBACjF,eAAe,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;oBACxC,SAAS,CAAC,qBAAqB,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC,CAAC;gBAC3D,CAAC,CAAC,CAAC;aACH;YACD,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC;QAClC,CAAC;QA9Be,4BAAI,OA8BnB,CAAA;QAED,SAAS,qBAAqB,CAAa,KAA8C;YACxF,IAAI,KAAK,CAAC,GAAG,CAAM,KAAK,CAAC,EAAE;gBAC1B,OAAO,kBAAkB,CAAC,MAAM,CAAC;aACjC;iBAAM,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBAChC,OAAO,kBAAkB,CAAC,KAAK,CAAC;aAChC;iBAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAS,KAAK,CAAC,EAAE;gBACrC,OAAO,kBAAkB,CAAC,cAAc,CAAC;aACzC;iBAAM;gBACN,OAAO,kBAAkB,CAAC,OAAO,CAAC;aAClC;QACF,CAAC;QAED,SAAS,qBAAqB,CAAa,KAAmD,EAAE,OAAsB;YACrH,IAAI,KAAK,CAAC,GAAG,CAAM,KAAK,CAAC,EAAE;gBAC1B,IAAI,YAAY,GAAW,KAAK,CAAC;gBACjC,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;oBACvD,YAAY,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;oBACzC,MAAM,MAAM,GAAG,oBAAG,CAAoB,GAAG,CAAC,YAAY,CAAC,CAAC;oBACxD,IAAI,MAAM,EAAE;wBACX,OAAO,EAAE,KAAK,EAAE,OAAO,CAAC,GAAG,CAAO,MAAM,CAAC,EAAE,CAAC;qBAC5C;oBACD,IAAI,mBAAmB,GAAmD,OAAO,CAAC,oBAAoB,CAAC,YAAY,CAAC,CAAC;oBACrH,IAAI,mBAAmB,EAAE;wBACxB,mBAAmB,GAAG,OAAO,CAAC,GAAG,CAAO,mBAAmB,CAAC,CAAC;wBAC7D,kBAAkB;wBAClB,OAAO,mBAAmB,CAAC,IAAI,CAAC;wBAChC,OAAO,EAAE,KAAK,EAAE,mBAAmB,EAAE,CAAC;qBACtC;iBACD;gBACD,OAAO,EAAE,MAAM,EAAE,CAAC,GAAG,CAAC,QAAQ,CAAC,CAA8C,EAAE,IAAgD,EAAE,KAAK,CAAC,CAAC,EAAE,CAAC;aAC3I;iBAAM;gBACN,MAAM,IAAI,GAAwC,KAAK,CAAC;gBACxD,OAAO,EAAE,KAAK,EAAE,IAAI,oBAAG,CAAkB,OAAO,CAAC,eAAe,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC;aAChF;QACF,CAAC;IACF,CAAC,EApGgB,uBAAuB,uCAAvB,uBAAuB,QAoGvC;IAED,MAAM,aAAa,GAA8B;QAChD,KAAK,EAAE,WAAW;QAClB,MAAM,EAAE,SAAS;KACjB,CAAC;IAEF,IAAiB,SAAS,CA0BzB;IA1BD,WAAiB,SAAS;QACzB,SAAgB,IAAI,CAAa,QAAyC;YACzE,IAAI,QAAQ,KAAK,SAAS,EAAE;gBAC3B,OAAO,SAAS,CAAC;aACjB;iBAAM,IAAI,KAAK,CAAC,GAAG,CAAM,QAAQ,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE;gBACpE,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;aAC3C;iBAAM,IAAI,KAAK,CAAC,GAAG,CAAM,QAAQ,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,SAAS,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;gBAC9E,MAAM,KAAK,GAAW,QAAQ,CAAC,IAAI,CAAC;gBACpC,MAAM,SAAS,GAAqB,KAAK,CAAC,GAAG,CAAS,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC;gBAEvG,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC;aACjC;YACD,OAAO,SAAS,CAAC;QAClB,CAAC;QAZe,cAAI,OAYnB,CAAA;QAED,SAAgB,EAAE,CAAC,KAA+B;YACjD,IAAI,KAAK,CAAC,GAAG,CAAM,KAAK,CAAC,EAAE;gBAC1B,OAAO,KAAK,CAAC;aACb;iBAAM,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;gBAC5B,OAAO,KAAK,CAAC,GAAG,CAAC;aACjB;YACD,OAAO;gBACN,IAAI,EAAE,KAAK,CAAC,GAAG;gBACf,SAAS,EAAE,KAAK,CAAC,SAAS;aAC1B,CAAC;QACH,CAAC;QAVe,YAAE,KAUjB,CAAA;IACF,CAAC,EA1BgB,SAAS,yBAAT,SAAS,QA0BzB;IAED,IAAU,cAAc,CAqBvB;IArBD,WAAU,cAAc;QACvB,SAAS,aAAa,CAAC,OAAsB,EAAE,MAAwB;YACtE,QAAQ,MAAM,EAAE;gBACf,KAAK,gBAAgB,CAAC,IAAI,CAAC,CAAC,OAAO,KAAK,CAAC,GAAG,CAAkB;gBAC9D,KAAK,gBAAgB,CAAC,SAAS,CAAC,CAAC,OAAO,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC;gBACpE,OAAO,CAAC,CAAC,OAAO,OAAO,CAAC,SAAS,IAAI,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC;aACrI;QACF,CAAC;QAED,SAAgB,IAAI,CAAa,QAAkC,EAAE,OAAsB,EAAE,MAAwB;YACpH,IAAI,KAAK,CAAC,GAAG,CAAM,QAAQ,CAAC,EAAE;gBAC7B,OAAO,EAAE,GAAG,EAAE,aAAa,CAAC,OAAO,EAAE,MAAM,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;aAC/D;iBAAM,IAAI,eAAe,CAAC,EAAE,CAAC,QAAQ,CAAC,EAAE;gBACxC,OAAO;oBACN,GAAG,EAAE,aAAa,CAAC,OAAO,EAAE,MAAM,CAAC;oBACnC,IAAI,EAAE,KAAK,CAAC,cAAc,CAAC,oBAAoB,CAAC,QAAiC,EAAE,OAAO,CAAC,eAAe,CAAC;iBAC3G,CAAC;aACF;iBAAM;gBACN,OAAO,SAAS,CAAC;aACjB;QACF,CAAC;QAXe,mBAAI,OAWnB,CAAA;IACF,CAAC,EArBS,cAAc,KAAd,cAAc,QAqBvB;IAED,IAAU,YAAY,CAUrB;IAVD,WAAU,YAAY;QACrB,SAAgB,IAAI,CAAC,KAAyB;YAC7C,QAAQ,KAAK,EAAE;gBACd;oBACC,oDAAmC;gBACpC,kDAAiC;gBACjC;oBACC,oDAAmC;aACpC;QACF,CAAC;QARe,iBAAI,OAQnB,CAAA;IACF,CAAC,EAVS,YAAY,KAAZ,YAAY,QAUrB;IAED,IAAU,uBAAuB,CAmFhC;IAnFD,WAAU,uBAAuB;QAEhC,MAAM,UAAU,GAAqD;YACpE,EAAE,QAAQ,EAAE,MAAM,EAAE;YACpB,EAAE,QAAQ,EAAE,YAAY,EAAE;YAC1B,EAAE,QAAQ,EAAE,OAAO,EAAE;YACrB,EAAE,QAAQ,EAAE,cAAc,EAAE;YAC5B,EAAE,QAAQ,EAAE,eAAe,EAAE;YAC7B,EAAE,QAAQ,EAAE,WAAW,EAAE;YACzB,EAAE,QAAQ,EAAE,cAAc,EAAE,IAAI,EAAE,oBAAoB,CAAC,mBAAmB,EAAE;YAC5E,EAAE,QAAQ,EAAE,iBAAiB,EAAE;YAC/B,EAAE,QAAQ,EAAE,SAAS,EAAE;YACvB,EAAE,QAAQ,EAAE,MAAM,EAAE;YACpB,EAAE,QAAQ,EAAE,MAAM,EAAE;SACpB,CAAC;QAEF,SAAgB,IAAI,CAAa,QAA2D,EAAE,OAAsB,EACnH,qBAA8B,EAAE,MAAwB,EAAE,UAA2B;YACrF,IAAI,CAAC,QAAQ,EAAE;gBACd,OAAO,EAAE,CAAC;aACV;YACD,MAAM,MAAM,GAA4D,EAAE,CAAC;YAE3E,IAAI,UAAU,EAAE;gBACf,KAAK,MAAM,YAAY,IAAI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE;oBACnD,IAAI,QAAQ,CAAC,YAAY,CAAC,KAAK,SAAS,EAAE;wBACzC,MAAM,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,GAAG,CAAO,QAAQ,CAAC,YAAY,CAAC,CAAC,CAAC;qBACjE;iBACD;aACD;YAED,IAAI,KAAK,CAAC,GAAG,CAAM,QAAQ,CAAC,QAAQ,CAAC,EAAE;gBACtC,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC,QAAQ,CAAC;aAChC;YACD,IAAI,KAAK,CAAC,GAAG,CAAM,QAAQ,CAAC,KAAK,CAAC,IAAI,OAAO,CAAC,aAAa,2CAAmC,EAAE;gBAC/F,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC;aAC7B;YACD,IAAI,KAAK,CAAC,GAAG,CAAM,QAAQ,CAAC,UAAU,CAAC,EAAE;gBACxC,MAAM,CAAC,UAAU,GAAG,QAAQ,CAAC,UAAU,CAAC;aACxC;YACD,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;YAC5B,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;YAC5B,IAAI,QAAQ,CAAC,YAAY,KAAK,SAAS,EAAE;gBACxC,MAAM,CAAC,YAAY,GAAG,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC;aAC9C;YACD,IAAI,QAAQ,CAAC,aAAa,KAAK,SAAS,EAAE;gBACzC,MAAM,CAAC,aAAa,GAAG,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC;aAChD;YACD,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAC9C,IAAI,QAAQ,CAAC,SAAS,KAAK,SAAS,EAAE;gBACrC,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE;oBACtC,MAAM,CAAC,SAAS,GAAG,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,YAAqC,EAAE,IAAI,EAA2B,EAAE;wBACrH,MAAM,UAAU,GAAG,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;wBAC9D,IAAI,UAAU,EAAE;4BACf,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;yBAC9B;wBACD,OAAO,YAAY,CAAC;oBACrB,CAAC,EAAE,EAAE,CAAC,CAAC;iBACP;qBAAM;oBACN,MAAM,cAAc,GAAG,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;oBAChF,MAAM,CAAC,SAAS,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;iBACjE;aACD;YACD,MAAM,CAAC,YAAY,GAAG,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;YAC/D,IAAI,qBAAqB,IAAI,CAAC,QAAQ,CAAC,YAAY,KAAK,SAAS,IAAK,QAAqC,CAAC,QAAQ,KAAK,SAAS,CAAC,EAAE;gBACpI,MAAM,CAAC,YAAY,GAAG,oBAAoB,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;aACvF;YACD,IAAI,qBAAqB,IAAI,CAAC,QAAQ,CAAC,OAAO,KAAK,SAAS,CAAC,EAAE;gBAC9D,MAAM,CAAC,OAAO,GAAG,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;aAChE;YACD,MAAM,oBAAoB,GAAG,uBAAuB,CAAC,gBAAgB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YACzF,IAAI,oBAAoB,CAAC,KAAK,KAAK,SAAS,EAAE;gBAC7C,MAAM,CAAC,eAAe,GAAG,oBAAoB,CAAC,KAAK,CAAC;aACpD;YACD,IAAI,QAAQ,CAAC,MAAM,EAAE;gBACpB,MAAM,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC;aAChC;YACD,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,oBAAoB,CAAC,MAAM,EAAE,CAAC;QACtF,CAAC;QA9De,4BAAI,OA8DnB,CAAA;QAED,SAAgB,OAAO,CAAa,KAAqC;YACxE,OAAO,QAAQ,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;QACpC,CAAC;QAFe,+BAAO,UAEtB,CAAA;IACF,CAAC,EAnFS,uBAAuB,KAAvB,uBAAuB,QAmFhC;IAED,IAAU,eAAe,CAoHxB;IApHD,WAAU,eAAe;QAExB,MAAM,KAAK,GAAG,QAAQ,CAAC;QACvB,MAAM,IAAI,GAAG,OAAO,CAAC;QACrB,MAAM,IAAI,GAAG,OAAO,CAAC;QACrB,MAAM,GAAG,GAAG,aAAa,CAAC;QAC1B,MAAM,UAAU,GAAG,oBAAoB,CAAC;QAMxC,SAAgB,IAAI,CAAa,QAA0B,EAAE,OAAsB,EAAE,KAAa,EAAE,MAAwB,EAAE,QAA2C;YACxK,IAAI,CAAC,QAAQ,EAAE;gBACd,OAAO,SAAS,CAAC;aACjB;YACD,MAAM,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;YAC3B,MAAM,SAAS,GAAI,QAA4B,CAAC,SAAS,CAAC;YAC1D,IAAI,CAAC,IAAI,IAAI,CAAC,SAAS,EAAE;gBACxB,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAgC,EAAE,IAAiG,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpN,OAAO,SAAS,CAAC;aACjB;YACD,MAAM,eAAe,GAAG,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,IAAI,4BAAG,CAAoB,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YACrG,IAAI,CAAC,eAAe,EAAE;gBACrB,MAAM,OAAO,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAsC,EAAE,IAAoI,EAAE,IAAI,CAAC,CAAC;gBACjN,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBACvC,OAAO,SAAS,CAAC;aACjB;YACD,IAAI,UAA6C,CAAC;YAClD,IAAI,KAAK,CAAC,GAAG,CAAM,SAAS,CAAC,EAAE;gBAC9B,IAAI,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;oBACnC,UAAU,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC;iBACxE;qBAAM,IAAI,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;oBACzC,UAAU,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;iBACtE;qBAAM,IAAI,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;oBACzC,UAAU,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC;iBACtE;qBAAM,IAAI,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;oBACxC,UAAU,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,SAAS,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC;iBAC1E;qBAAM,IAAI,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;oBAC/C,UAAU,GAAG,EAAE,IAAI,EAAE,YAAY,EAAE,QAAQ,EAAE,SAAS,CAAC,SAAS,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC;iBAC1F;aACD;iBAAM;gBACN,IAAI,KAAK,CAAC,GAAG,CAAM,QAAQ,CAAC,IAAI,CAAC,EAAE;oBAClC,UAAU,GAAG,QAAiC,CAAC;iBAC/C;aACD;YACD,IAAI,UAAU,KAAK,SAAS,EAAE;gBAC7B,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CACzC,CAAiC,EACjC,IAA0H,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC,CAClK,CAAC,CAAC;gBACH,OAAO,SAAS,CAAC;aACjB;YACD,MAAM,cAAc,GAA0C,KAAK,CAAC,cAAc,CAAC,oBAAoB,CAAC,UAAU,EAAE,OAAO,CAAC,eAAe,CAAC,CAAC;YAC7I,IAAI,cAAc,KAAK,SAAS,EAAE;gBACjC,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CACzC,CAAmC,EACnC,IAAyG,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC,CACjJ,CAAC,CAAC;gBACH,OAAO,SAAS,CAAC;aACjB;YACD,MAAM,aAAa,GAAmC;gBACrD,eAAe,EAAE,OAAO,CAAC,eAAe;gBACxC,IAAI,EAAE,oBAAoB;gBAC1B,KAAK;gBACL,OAAO,EAAE,QAAQ;aACjB,CAAC;YACF,IAAI,UAAqC,CAAC;YAC1C,QAAQ,MAAM,EAAE;gBACf,KAAK,gBAAgB,CAAC,IAAI,CAAC,CAAC;oBAC3B,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,EAA2B,EAAE,aAAa,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC,CAAC;oBACnI,MAAM;iBACN;gBACD,KAAK,gBAAgB,CAAC,aAAa,CAAC,CAAC;oBACpC,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,EAAmC,EAAE,aAAa,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,cAAc,CAAC,aAAa,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC,CAAC;oBACpJ,MAAM;iBACN;gBACD,OAAO,CAAC,CAAC;oBACR,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,EAAgC,EAAE,aAAa,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,cAAc,CAAC,SAAS,EAAE,MAAM,EAAE,aAAa,EAAE,CAAC,CAAC;oBAC7I,MAAM;iBACN;aACD;YACD,MAAM,MAAM,GAA0B,IAAI,KAAK,CAAC,GAAG,CAClD,GAAG,eAAe,CAAC,WAAW,IAAI,cAAc,CAAC,IAAI,EAAE,EACvD,UAAU,EACV,SAAS,EACT,IAAI,EACJ,cAAc,EACd,UAAU,CAAC,iBAAiB,CAAC,QAAQ,CAAC,UAAU,CAAC,EACjD,EAAE,IAAI,EAAE,QAAQ,CAAC,IAAI,EAAE,CACvB,CAAC;YACF,MAAM,aAAa,GAAG,uBAAuB,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,EAAE,eAAe,CAAC,UAAU,CAAC,CAAC;YAChH,MAAM,CAAC,mBAAmB,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YACjD,IAAI,aAAa,CAAC,KAAK,EAAE;gBACxB,MAAM,CAAC,uBAAuB,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,uBAAuB,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC;gBACpG,IAAI,MAAM,CAAC,uBAAuB,CAAC,IAAI,EAAE;oBACxC,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,uBAAuB,CAAC,IAAI,CAAC;iBACpD;qBAAM;oBACN,IAAI,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC;oBACnC,IAAI,eAAe,CAAC,QAAQ,IAAI,eAAe,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;wBACpE,KAAK,MAAM,QAAQ,IAAI,eAAe,CAAC,QAAQ,EAAE;4BAChD,MAAM,KAAK,GAAG,MAAM,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC;4BAC1C,IAAI,KAAK,EAAE;gCACV,KAAK,GAAG,KAAK,GAAG,IAAI,GAAG,KAAK,CAAC;gCAC7B,MAAM;6BACN;yBACD;qBACD;oBACD,MAAM,CAAC,MAAM,GAAG,KAAK,CAAC;iBACtB;gBACD,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,UAAU,EAAE;oBAC/C,MAAM,CAAC,uBAAuB,CAAC,UAAU,GAAG,cAAc,CAAC,IAAI,CAAC;iBAChE;aACD;YACD,OAAO,MAAM,CAAC;QACf,CAAC;QAvGe,oBAAI,OAuGnB,CAAA;IACF,CAAC,EApHS,eAAe,KAAf,eAAe,QAoHxB;IAED,IAAU,UAAU,CAgKnB;IAhKD,WAAU,UAAU;QACnB,SAAgB,IAAI,CAAa,QAAqB,EAAE,OAAsB,EAAE,KAAa,EAAE,MAAwB;YACtH,IAAI,CAAC,QAAQ,EAAE;gBACd,OAAO,SAAS,CAAC;aACjB;YACD,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,CAAC;YACzB,IAAI,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,EAAE;gBACxC,IAAI,GAAG,KAAK,CAAC,GAAG,CAAkB;aAClC;YACD,IAAI,IAAI,KAAK,KAAK,CAAC,GAAG,IAAqB,IAAI,KAAK,OAAO,IAAI,IAAI,KAAK,SAAS,EAAE;gBAClF,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,EAA+B,EAAE,IAA0F,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5M,OAAO,SAAS,CAAC;aACjB;YACD,IAAI,QAAQ,GAAG,QAAQ,CAAC,QAAQ,CAAC;YACjC,IAAI,KAAK,CAAC,GAAG,CAAM,QAAQ,CAAC,KAAK,CAAC,IAAI,OAAO,CAAC,aAAa,2CAAmC,EAAE;gBAC/F,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC;aAC1B;YACD,IAAI,CAAC,QAAQ,EAAE;gBACd,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAgC,EAAE,IAA+E,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;gBAClM,OAAO,SAAS,CAAC;aACjB;YAED,IAAI,UAAqC,CAAC;YAC1C,QAAQ,MAAM,EAAE;gBACf,KAAK,gBAAgB,CAAC,IAAI,CAAC,CAAC;oBAC3B,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,EAA2B,EAAE,aAAa,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,cAAc,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,oBAAoB,EAAE,eAAe,EAAE,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;oBACxN,MAAM;iBACN;gBACD,KAAK,gBAAgB,CAAC,aAAa,CAAC,CAAC;oBACpC,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,EAAmC,EAAE,aAAa,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,cAAc,CAAC,aAAa,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,oBAAoB,EAAE,eAAe,EAAE,OAAO,CAAC,eAAe,EAAE,SAAS,EAAE,OAAO,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC;oBACvQ,MAAM;iBACN;gBACD,OAAO,CAAC,CAAC;oBACR,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,EAAgC,EAAE,aAAa,EAAE,EAAE,IAAI,EAAE,KAAK,CAAC,cAAc,CAAC,SAAS,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,oBAAoB,EAAE,eAAe,EAAE,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,CAAC;oBAClO,MAAM;iBACN;aACD;YAED,MAAM,MAAM,GAAqB,IAAI,KAAK,CAAC,GAAG,CAC7C,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,EACjC,UAAU,EACV,QAAQ,EACR,KAAK,CAAC,GAAG,EACT,SAAS,EACT,KAAK,EACL,UAAU,CAAC,iBAAiB,CAAC,QAAQ,CAAC,UAAU,CAAC,EACjD;gBACC,IAAI,EAAE,QAAQ;gBACd,UAAU,EAAE,QAAQ;aACpB,CACD,CAAC;YACF,MAAM,aAAa,GAAG,uBAAuB,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;YACrF,MAAM,CAAC,mBAAmB,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;YACjD,IAAI,aAAa,CAAC,KAAK,EAAE;gBACxB,MAAM,CAAC,uBAAuB,GAAG,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,uBAAuB,EAAE,aAAa,CAAC,KAAK,CAAC,CAAC;aACpG;YACD,MAAM,aAAa,GAAY,IAAI,CAAC,CAAC,2DAA2D;YAChG,IAAI,aAAa,EAAE;gBAClB,MAAM,MAAM,GAA0B,QAAiC,CAAC;gBACxE,IAAI,MAAM,CAAC,uBAAuB,CAAC,YAAY,KAAK,SAAS,IAAI,MAAM,CAAC,UAAU,KAAK,SAAS,EAAE;oBACjG,MAAM,CAAC,uBAAuB,CAAC,YAAY,GAAG,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC;iBAClE;gBACD,IAAI,MAAM,CAAC,uBAAuB,CAAC,KAAK,KAAK,SAAS,EAAE;oBACvD,IAAI,MAAM,CAAC,cAAc,KAAK,IAAI,EAAE;wBACnC,MAAM,CAAC,uBAAuB,CAAC,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC;qBAC7D;yBAAM,IAAI,MAAM,CAAC,aAAa,KAAK,IAAI,EAAE;wBACzC,MAAM,CAAC,uBAAuB,CAAC,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC;qBAC5D;iBACD;aACD;YACD,MAAM,OAAO,GAAgC,oBAAoB,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAE,CAAC;YAC3F,IAAI,OAAO,EAAE;gBACZ,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;aACzB;YACD,IAAI,QAAQ,CAAC,OAAO,KAAK,SAAS,EAAE;gBACnC,uDAAuD;gBACvD,wBAAwB;gBACxB,OAAO,CAAC,gBAAgB,GAAG,IAAI,CAAC;aAChC;YACD,OAAO,MAAM,CAAC;QACf,CAAC;QA/Ee,eAAI,OA+EnB,CAAA;QAED,SAAgB,WAAW,CAAC,IAAe,EAAS,OAAiB;YACpE,4EAA4E;YAC5E,iDAAiD;YACjD,IAAI,oBAAoB,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,uBAAuB,CAAC,SAAS,KAAK,SAAS,EAAE;gBAC1G,IAAI,CAAC,OAAO,GAAG,oBAAoB,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;aAClH;YACD,IAAI,IAAI,CAAC,uBAAuB,CAAC,eAAe,KAAK,SAAS,IAAI,OAAO,CAAC,cAAc,KAAK,SAAS,EAAE;gBACvG,IAAI,CAAC,uBAAuB,CAAC,eAAe,GAAG,OAAO,CAAC,GAAG,CAAO,OAAO,CAAC,cAAc,CAAC,CAAC;gBACzF,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;aAC/B;YACD,2DAA2D;YAC3D,IAAI,IAAI,CAAC,uBAAuB,CAAC,aAAa,KAAK,SAAS,IAAI,IAAI,CAAC,uBAAuB,CAAC,YAAY,KAAK,SAAS,IAAI,OAAO,CAAC,aAAa,KAAK,SAAS,EAAE;gBAC/J,IAAI,CAAC,uBAAuB,CAAC,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;aACnE;QACF,CAAC;QAde,sBAAW,cAc1B,CAAA;QAED,SAAgB,YAAY,CAAC,IAAe,EAAS,OAAsB;YAC1E,oBAAoB,CAAC,YAAY,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YACzD,IAAI,IAAI,CAAC,uBAAuB,CAAC,aAAa,KAAK,SAAS,EAAE;gBAC7D,IAAI,CAAC,uBAAuB,CAAC,aAAa,GAAG,IAAI,CAAC,uBAAuB,CAAC,YAAY,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,YAAY,CAAC,CAAC,CAAC,IAAI,CAAC;aACzJ;YACD,IAAI,IAAI,CAAC,uBAAuB,CAAC,YAAY,KAAK,SAAS,EAAE;gBAC5D,IAAI,CAAC,uBAAuB,CAAC,YAAY,GAAG,KAAK,CAAC;aAClD;YACD,IAAI,IAAI,CAAC,uBAAuB,CAAC,eAAe,KAAK,SAAS,EAAE;gBAC/D,IAAI,CAAC,uBAAuB,CAAC,eAAe,GAAG,WAAW,CAAC;aAC3D;QACF,CAAC;QAXe,uBAAY,eAW3B,CAAA;QAED,SAAgB,gBAAgB,CAAC,eAA0B,EAAc,eAAkD;YAC1H,MAAM,MAAM,GAAqB,IAAI,KAAK,CAAC,GAAG,CAC7C,eAAe,CAAC,GAAG,EACnB,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,eAAe,CAAC,OAAO,EAAE,EAAE,UAAU,EAAE,eAAe,CAAC,OAAO,EAAE,CAAC,EACnF,eAAe,CAAC,uBAAuB,CAAC,IAAI,IAAI,eAAe,CAAC,MAAM,EACtE,KAAK,CAAC,GAAG,EACT,eAAe,CAAC,OAAO,EACvB,KAAK,EACL,eAAe,CAAC,UAAU,EAC1B;gBACC,IAAI,EAAE,eAAe,CAAC,uBAAuB,CAAC,IAAI,IAAI,eAAe,CAAC,uBAAuB,CAAC,IAAI;gBAClG,UAAU,EAAE,eAAe,CAAC,uBAAuB,CAAC,UAAU,IAAI,eAAe,CAAC,uBAAuB,CAAC,UAAU;gBACpH,IAAI,EAAE,eAAe,CAAC,uBAAuB,CAAC,IAAI;gBAClD,IAAI,EAAE,eAAe,CAAC,uBAAuB,CAAC,IAAI;aAClD,CAED,CAAC;YACF,MAAM,CAAC,mBAAmB,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;YAC7D,MAAM,iBAAiB,GAAmC,MAAM,CAAC,uBAAuB,CAAC;YAEzF,cAAc,CAAC,iBAAiB,EAAE,eAAe,CAAC,uBAAuB,EAAE,OAAO,CAAC,CAAC;YACpF,cAAc,CAAC,iBAAiB,EAAE,eAAe,CAAC,uBAAuB,EAAE,cAAc,CAAC,CAAC;YAC3F,cAAc,CAAC,iBAAiB,EAAE,eAAe,CAAC,uBAAuB,EAAE,WAAW,CAAC,CAAC;YACxF,cAAc,CAAC,iBAAiB,EAAE,eAAe,CAAC,uBAAuB,EAAE,iBAAiB,CAAC,CAAC;YAC9F,cAAc,CAAC,iBAAiB,EAAE,eAAe,CAAC,uBAAuB,EAAE,eAAe,CAAC,CAAC;YAC5F,cAAc,CAAC,iBAAiB,EAAE,eAAe,CAAC,uBAAuB,EAAE,QAAQ,CAAC,CAAC;YACrF,MAAM,CAAC,OAAO,CAAC,YAAY,GAAG,oBAAoB,CAAC,mBAAmB,CAAC,gBAAgB,CACtF,MAAM,CAAC,OAAO,CAAC,YAAa,EAAE,eAAe,CAAC,uBAAuB,CAAC,YAAY,CAAE,CAAC;YACtF,MAAM,CAAC,OAAO,CAAC,OAAO,GAAG,cAAc,CAAC,gBAAgB,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,eAAe,CAAC,uBAAuB,CAAC,OAAO,CAAC,CAAC;YAClI,MAAM,CAAC,UAAU,GAAG,UAAU,CAAC,gBAAgB,CAAC,MAAM,CAAC,UAAU,EAAE,eAAe,CAAC,UAAU,CAAC,CAAC;YAE/F,MAAM,sBAAsB,GAAmC,eAAe,CAAC,uBAAuB,CAAC;YACvG,YAAY,CAAC,iBAAiB,EAAE,sBAAsB,EAAE,OAAO,CAAC,CAAC;YACjE,YAAY,CAAC,iBAAiB,EAAE,sBAAsB,EAAE,cAAc,CAAC,CAAC;YACxE,YAAY,CAAC,iBAAiB,EAAE,sBAAsB,EAAE,WAAW,CAAC,CAAC;YACrE,YAAY,CAAC,iBAAiB,EAAE,sBAAsB,EAAE,iBAAiB,CAAC,CAAC;YAC3E,YAAY,CAAC,iBAAiB,EAAE,sBAAsB,EAAE,eAAe,CAAC,CAAC;YACzE,YAAY,CAAC,iBAAiB,EAAE,sBAAsB,EAAE,QAAQ,CAAC,CAAC;YAClE,MAAM,CAAC,OAAO,CAAC,YAAY,GAAG,oBAAoB,CAAC,mBAAmB,CAAC,cAAc,CACpF,MAAM,CAAC,OAAO,CAAC,YAAa,EAAE,sBAAsB,CAAC,YAAY,CAAE,CAAC;YACrE,MAAM,CAAC,OAAO,CAAC,OAAO,GAAG,cAAc,CAAC,cAAc,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,EAAE,sBAAsB,CAAC,OAAO,CAAC,CAAC;YAC/G,MAAM,CAAC,UAAU,GAAG,UAAU,CAAC,cAAc,CAAC,MAAM,CAAC,UAAU,EAAE,eAAe,CAAC,UAAU,CAAC,CAAC;YAE7F,IAAI,eAAe,CAAC,kBAAkB,KAAK,IAAI,EAAE;gBAChD,MAAM,CAAC,kBAAkB,GAAG,IAAI,CAAC;aACjC;YAED,OAAO,MAAM,CAAC;QACf,CAAC;QAhDe,2BAAgB,mBAgD/B,CAAA;IACF,CAAC,EAhKS,UAAU,KAAV,UAAU,QAgKnB;IAOD,IAAiB,UAAU,CAsI1B;IAtID,WAAiB,UAAU;QAE1B,SAAS,YAAY,CAAC,KAAqC;YAC1D,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC;YACxB,MAAM,SAAS,GAAI,KAAa,CAAC,SAAS,CAAC;YAC3C,OAAO,SAAS,KAAK,SAAS,IAAI,CAAC,IAAI,KAAK,SAAS,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,KAAK,CAAC,GAAG,IAAqB,IAAI,KAAK,OAAO,IAAI,IAAI,KAAK,SAAS,CAAC,CAAC;QAC1J,CAAC;QAED,MAAM,qBAAqB,GAA8C;YACxE,KAAK,EAAE,kBAAI;YACX,OAAO,EAAE,kBAAI;SACb,CAAC;QAEF,SAAgB,IAAI,CAAa,SAA4D,EAAE,OAAiB,EAAE,OAAsB,EAAE,MAAwB,EAAE,QAA2C;YAC9M,MAAM,MAAM,GAAqB,EAAE,MAAM,EAAE,EAAE,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC;YAChE,IAAI,CAAC,SAAS,EAAE;gBACf,OAAO,MAAM,CAAC;aACd;YACD,MAAM,gBAAgB,GAAmD,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;YACvG,MAAM,eAAe,GAAmD,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;YACtG,MAAM,WAAW,GAAY,OAAO,CAAC,aAAa,2CAAmC,CAAC;YACtF,MAAM,cAAc,GAAG,OAAO,CAAC,GAAG,CAAO,OAAO,CAAC,cAAc,CAAC,CAAC;YACjE,KAAK,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,SAAS,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;gBACtD,MAAM,QAAQ,GAAG,SAAS,CAAC,KAAK,CAAC,CAAC;gBAClC,MAAM,UAAU,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,4BAAG,CAAoB,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;gBAC3H,IAAI,gBAAgB,GAAY,KAAK,CAAC;gBACtC,IAAI,UAAU,IAAI,UAAU,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,mBAAmB,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;oBACrG,gBAAgB,GAAG,IAAI,CAAC;iBACxB;qBAAM,IAAI,CAAC,UAAU,IAAI,QAAQ,CAAC,IAAI,EAAE;oBACxC,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,EAAE;wBACrD,IAAI,QAAQ,CAAC,IAAI,KAAK,GAAG,EAAE;4BAC1B,gBAAgB,GAAG,CAAC,kBAAI,CAA2B,QAAQ,CAAC,OAAO,CAAC,iBAAiB,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;4BACxG,MAAM;yBACN;qBACD;iBACD;gBAED,IAAI,gBAAgB,EAAE;oBACrB,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CACxC,EAAuC,EAAE,IAAkE,EAC3G,QAAQ,CAAC,IAAI,CACb,CAAC,CAAC;oBACH,SAAS;iBACT;gBAED,IAAI,YAAY,CAAC,QAAQ,CAAC,EAAE;oBAC3B,MAAM,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;oBACrE,IAAI,UAAU,EAAE;wBACf,UAAU,CAAC,WAAW,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;wBAC5C,UAAU,CAAC,YAAY,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;wBAC7C,IAAI,WAAW,EAAE;4BAChB,IAAI,CAAC,UAAU,CAAC,OAAO,KAAK,SAAS,IAAI,UAAU,CAAC,OAAO,CAAC,IAAI,KAAK,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,uBAAuB,CAAC,SAAS,KAAK,SAAS,IAAI,UAAU,CAAC,uBAAuB,CAAC,SAAS,CAAC,MAAM,KAAK,CAAC,CAAC,EAAE;gCAC7M,OAAO,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CACzC,EAAwC,EAAE,IAAiI,EAC3K,UAAU,CAAC,uBAAuB,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC,CAC/E,CAAC,CAAC;gCACH,SAAS;6BACT;yBACD;6BAAM;4BACN,IAAI,UAAU,CAAC,OAAO,KAAK,SAAS,IAAI,UAAU,CAAC,OAAO,CAAC,IAAI,KAAK,SAAS,EAAE;gCAC9E,OAAO,CAAC,eAAe,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CACxC,EAA6B,EAAE,IAAsG,EACrI,UAAU,CAAC,uBAAuB,CAAC,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC,CAC/E,CAAC,CAAC;gCACH,SAAS;6BACT;yBACD;wBACD,IAAI,UAAU,CAAC,uBAAuB,CAAC,KAAK,KAAK,KAAK,CAAC,SAAS,CAAC,KAAK,IAAI,gBAAgB,CAAC,IAAI,GAAG,CAAC,EAAE;4BACpG,gBAAgB,CAAC,IAAI,GAAG,UAAU,CAAC;4BACnC,gBAAgB,CAAC,IAAI,GAAG,CAAC,CAAC;yBAC1B;6BAAM,IAAI,UAAU,CAAC,uBAAuB,CAAC,KAAK,KAAK,KAAK,CAAC,SAAS,CAAC,IAAI,IAAI,eAAe,CAAC,IAAI,GAAG,CAAC,EAAE;4BACzG,eAAe,CAAC,IAAI,GAAG,UAAU,CAAC;4BAClC,eAAe,CAAC,IAAI,GAAG,CAAC,CAAC;yBACzB;6BAAM,IAAI,UAAU,CAAC,uBAAuB,CAAC,IAAI,KAAK,OAAO,IAAI,gBAAgB,CAAC,IAAI,GAAG,CAAC,EAAE;4BAC5F,gBAAgB,CAAC,IAAI,GAAG,UAAU,CAAC;4BACnC,gBAAgB,CAAC,IAAI,GAAG,CAAC,CAAC;yBAC1B;6BAAM,IAAI,UAAU,CAAC,uBAAuB,CAAC,IAAI,KAAK,MAAM,IAAI,eAAe,CAAC,IAAI,GAAG,CAAC,EAAE;4BAC1F,eAAe,CAAC,IAAI,GAAG,UAAU,CAAC;4BAClC,eAAe,CAAC,IAAI,GAAG,CAAC,CAAC;yBACzB;wBACD,UAAU,CAAC,mBAAmB,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;wBACvD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;qBAC/B;iBACD;qBAAM;oBACN,MAAM,cAAc,GAAG,eAAe,CAAC,IAAI,CAAC,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;oBACxF,IAAI,cAAc,EAAE;wBACnB,cAAc,CAAC,mBAAmB,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;wBAC3D,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;qBACvC;iBACD;gBACD,OAAO,CAAC,cAAc,GAAG,OAAO,CAAC,GAAG,CAAO,cAAc,CAAC,CAAC;aAC3D;YACD,4EAA4E;YAC5E,kGAAkG;YAClG,6FAA6F;YAC7F,MAAM,qBAAqB,GAAG,KAAK,CAAC,GAAG,CAAM,gBAAgB,CAAC,IAAI,EAAE,uBAAuB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,gBAAgB,CAAC,IAAI,EAAE,uBAAuB,CAAC,KAAK,CAAC,CAAC,CAAC,gBAAgB,CAAC,IAAI,EAAE,uBAAuB,CAAC,KAAK,EAAE,GAAG,CAAC;YACtN,MAAM,wBAAwB,GAAG,KAAK,CAAC,GAAG,CAAM,eAAe,CAAC,IAAI,EAAE,uBAAuB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,IAAI,EAAE,uBAAuB,CAAC,KAAK,CAAC,CAAC,CAAC,eAAe,CAAC,IAAI,EAAE,uBAAuB,CAAC,KAAK,EAAE,GAAG,CAAC;YACtN,IAAI,CAAC,qBAAqB,KAAK,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,gBAAgB,CAAC,IAAI,EAAE;gBAClJ,gBAAgB,CAAC,IAAI,CAAC,uBAAuB,CAAC,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC;aAC5E;iBAAM,IAAI,CAAC,wBAAwB,KAAK,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,GAAG,CAAC,CAAC,IAAI,eAAe,CAAC,IAAI,EAAE;gBACxJ,eAAe,CAAC,IAAI,CAAC,uBAAuB,CAAC,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC;aAC1E;YAED,OAAO,MAAM,CAAC;QACf,CAAC;QA3Fe,eAAI,OA2FnB,CAAA;QAED,SAAgB,WAAW,CAAC,MAA0B,EAAE,MAA0B;YACjF,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;gBAChD,OAAO,MAAM,CAAC;aACd;YACD,IAAI,MAAM,KAAK,SAAS,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE;gBAChD,OAAO,MAAM,CAAC;aACd;YAED,IAAI,MAAM,EAAE;gBACX,qDAAqD;gBACrD,MAAM,GAAG,GAAwC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;gBACrE,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;oBACvB,GAAG,CAAC,IAAI,CAAC,uBAAuB,CAAC,IAAK,CAAC,GAAG,IAAI,CAAC;gBAChD,CAAC,CAAC,CAAC;gBAEH,MAAM,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;oBACvB,GAAG,CAAC,IAAI,CAAC,uBAAuB,CAAC,IAAK,CAAC,GAAG,IAAI,CAAC;gBAChD,CAAC,CAAC,CAAC;gBACH,MAAM,SAAS,GAAuB,EAAE,CAAC;gBACzC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;oBACrB,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,uBAAuB,CAAC,IAAK,CAAC,CAAC,CAAC;oBACxD,OAAO,GAAG,CAAC,IAAI,CAAC,uBAAuB,CAAC,IAAK,CAAC,CAAC;gBAChD,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;gBAC1D,MAAM,GAAG,SAAS,CAAC;aACnB;YACD,OAAO,MAAM,CAAC;QACf,CAAC;QA3Be,sBAAW,cA2B1B,CAAA;IACF,CAAC,EAtIgB,UAAU,0BAAV,UAAU,QAsI1B;IASD,IAAU,OAAO,CAyEhB;IAzED,WAAU,OAAO;QAEhB,SAAgB,IAAI,CAAC,MAAwC,EAAE,OAAsB;YACpF,IAAI,MAAM,GAAG,QAAQ,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;YACvC,IAAI,SAAS,GAAyB,SAAS,CAAC;YAChD,IAAI,MAAM,CAAC,OAAO,IAAI,OAAO,CAAC,QAAQ,6BAAqB,EAAE;gBAC5D,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;aAC9C;iBAAM,IAAI,MAAM,CAAC,GAAG,IAAI,OAAO,CAAC,QAAQ,yBAAiB,EAAE;gBAC3D,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;aAC1C;iBAAM,IAAI,MAAM,CAAC,KAAK,IAAI,OAAO,CAAC,QAAQ,2BAAmB,EAAE;gBAC/D,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;aAC5C;YACD,IAAI,SAAS,EAAE;gBACd,MAAM,GAAG,OAAO,CAAC,gBAAgB,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;aACrD;YACD,MAAM,OAAO,GAAG,oBAAoB,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;YAC3D,IAAI,OAAO,EAAE;gBACZ,MAAM,CAAC,OAAO,GAAG,OAAO,CAAC;aACzB;YACD,OAAO,CAAC,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;YACtC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACvB,OAAO,MAAM,CAAC;QACf,CAAC;QApBe,YAAI,OAoBnB,CAAA;QAED,SAAgB,QAAQ,CAAa,MAAoC,EAAE,OAAsB;YAChG,MAAM,MAAM,GAAa,EAAE,CAAC;YAC5B,IAAI,MAAM,CAAC,gBAAgB,KAAK,SAAS,EAAE;gBAC1C,MAAM,CAAC,gBAAgB,GAAG,CAAC,CAAC,MAAM,CAAC,gBAAgB,CAAC;aACpD;YACD,IAAI,MAAM,CAAC,aAAa,KAAK,SAAS,EAAE;gBACvC,MAAM,CAAC,aAAa,GAAG,CAAC,CAAC,MAAM,CAAC,aAAa,CAAC;aAC9C;YACD,IAAI,MAAM,CAAC,cAAc,EAAE;gBAC1B,MAAM,CAAC,cAAc,GAAG,uBAAuB,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC,KAAK,CAAC;aAC3F;YACD,OAAO,MAAM,CAAC;QACf,CAAC;QAZe,gBAAQ,WAYvB,CAAA;QAED,SAAgB,OAAO,CAAC,KAAe;YACtC,OAAO,CAAC,KAAK,IAAI,KAAK,CAAC,OAAO,KAAK,SAAS,IAAI,KAAK,CAAC,aAAa,KAAK,SAAS,IAAI,KAAK,CAAC,gBAAgB,KAAK,SAAS,CAAC;QAC3H,CAAC;QAFe,eAAO,UAEtB,CAAA;QAED,SAAgB,gBAAgB,CAAC,MAAgB,EAAE,MAAgB;YAClE,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;gBACpB,OAAO,MAAM,CAAC;aACd;YACD,IAAI,OAAO,CAAC,MAAM,CAAC,EAAE;gBACpB,OAAO,MAAM,CAAC;aACd;YACD,cAAc,CAAC,MAAM,EAAE,MAAM,EAAE,eAAe,CAAC,CAAC;YAChD,cAAc,CAAC,MAAM,EAAE,MAAM,EAAE,kBAAkB,CAAC,CAAC;YACnD,OAAO,MAAM,CAAC;QACf,CAAC;QAVe,wBAAgB,mBAU/B,CAAA;QAED,SAAgB,YAAY,CAAC,KAAe,EAAE,OAAsB;YACnE,IAAI,CAAC,KAAK,EAAE;gBACX,OAAO;aACP;YACD,oBAAoB,CAAC,YAAY,CAAC,KAAK,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAC1D,IAAI,KAAK,CAAC,gBAAgB,KAAK,SAAS,EAAE;gBACzC,KAAK,CAAC,gBAAgB,GAAG,CAAC,OAAO,CAAC,aAAa,2CAAmC,CAAC,CAAC;aACpF;YACD,IAAI,KAAK,CAAC,aAAa,KAAK,SAAS,EAAE;gBACtC,KAAK,CAAC,aAAa,GAAG,IAAI,CAAC;aAC3B;QACF,CAAC;QAXe,oBAAY,eAW3B,CAAA;QAED,SAAgB,MAAM,CAAC,KAAe;YACrC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;YACrB,IAAI,KAAK,CAAC,OAAO,EAAE;gBAClB,oBAAoB,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;aAC3C;QACF,CAAC;QALe,cAAM,SAKrB,CAAA;IACF,CAAC,EAzES,OAAO,KAAP,OAAO,QAyEhB;IAED,IAAiB,eAAe,CAwB/B;IAxBD,WAAiB,eAAe;QAE/B,SAAgB,IAAI,CAAC,MAAwC;YAC5D,MAAM,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,OAAO,CAAC;YAC/C,IAAI,MAAyC,CAAC;YAC9C,IAAI,MAAM,EAAE;gBACX,QAAQ,MAAM,EAAE;oBACf,KAAK,UAAU;wBACd,MAAM,GAAG,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC;wBACxC,MAAM;oBACP,KAAK,SAAS;wBACb,MAAM,GAAG,KAAK,CAAC,eAAe,CAAC,OAAO,CAAC;wBACvC,MAAM;iBACP;aACD;YACD,MAAM,aAAa,GAAG,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YACrD,IAAI,aAAa,2CAAmC,EAAE;gBACrD,OAAO,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,OAAO,CAAC;aAC/C;iBAAM,IAAI,aAAa,2CAAmC,EAAE;gBAC5D,OAAO,KAAK,CAAC,eAAe,CAAC,QAAQ,CAAC;aACtC;iBAAM;gBACN,MAAM,IAAI,KAAK,CAAC,oBAAoB,CAAC,CAAC;aACtC;QACF,CAAC;QArBe,oBAAI,OAqBnB,CAAA;IACF,CAAC,EAxBgB,eAAe,+BAAf,eAAe,QAwB/B;IAED,IAAiB,iBAAiB,CAkBjC;IAlBD,WAAiB,iBAAiB;QAEjC,MAAM,QAAQ,yCAA0D,CAAC;QAEzE,SAAgB,IAAI,CAAC,MAAwC;YAC5D,MAAM,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;YAC/B,IAAI,CAAC,OAAO,EAAE;gBACb,OAAO,QAAQ,CAAC;aAChB;YACD,QAAQ,OAAO,EAAE;gBAChB,KAAK,OAAO;oBACX,8CAAsC;gBACvC,KAAK,OAAO;oBACX,8CAAsC;gBACvC;oBACC,OAAO,QAAQ,CAAC;aACjB;QACF,CAAC;QAbe,sBAAI,OAanB,CAAA;IACF,CAAC,EAlBgB,iBAAiB,iCAAjB,iBAAiB,QAkBjC;IAYD,MAAa,IAAI;QAKhB,YAAY,KAAY;YACvB,IAAI,CAAC,CAAC,GAAS,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACnC,IAAI,KAAK,EAAE;gBACV,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAO,EAAE;oBAC7C,MAAM,KAAK,GAAG,KAAK,CAAC,CAAC,CAAO,GAAG,CAAC,CAAC;oBACjC,IAAI,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;wBACzB,IAAI,CAAC,CAAC,CAAO,GAAG,CAAC,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC;qBAClC;yBAAM;wBACN,IAAI,CAAC,CAAC,CAAO,GAAG,CAAC,GAAG,KAAK,CAAC;qBAC1B;iBACD;aACD;QACF,CAAC;QAEM,KAAK;YACX,IAAI,CAAC,CAAC,GAAM,IAAI,CAAC,CAAC,CAAO;YACzB,IAAI,CAAC,CAAC,GAAS,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACpC,CAAC;QAEM,OAAO,CAAC,UAAkB;YAChC,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAI,UAAU,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;YAChE,IAAI,MAAM,GAAuB,SAAS,CAAC;YAC3C,IAAI,SAAS,KAAK,SAAS,EAAE;gBAC5B,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;oBAC7B,MAAM,GAAG,SAAS,CAAC,KAAK,EAAE,CAAC;oBAC3B,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;wBAC3B,OAAO,IAAI,CAAC,CAAK,CAAC,UAAU,CAAC,CAAC;qBAC9B;iBACD;qBAAM;oBACN,MAAM,GAAG,SAAS,CAAC;oBACnB,OAAO,IAAI,CAAC,CAAK,CAAC,UAAU,CAAC,CAAC;iBAC9B;aACD;YACD,IAAI,MAAM,KAAK,SAAS,EAAE;gBACzB,MAAM,GAAG,IAAI,CAAC,GAAG,EAAW,CAAC;aAC7B;YACD,MAAM,YAAY,GAAG,IAAI,CAAC,CAAC,CAAO,UAAU,CAAC,CAAC;YAC9C,IAAI,YAAY,KAAK,SAAS,EAAE;gBAC/B,IAAI,CAAC,CAAC,CAAO,UAAU,CAAC,GAAG,MAAM,CAAC;aAClC;iBAAM;gBACN,IAAI,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;oBAChC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;iBAC1B;qBAAM;oBACN,MAAM,UAAU,GAAa,CAAC,YAAY,CAAC,CAAC;oBAC5C,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBACxB,IAAI,CAAC,CAAC,CAAO,UAAU,CAAC,GAAG,UAAU,CAAC;iBACtC;aACD;YACD,OAAO,MAAM,CAAC;QACf,CAAC;QAEM,MAAM;YACZ,IAAI,CAAC,CAAC,GAAM,SAAS,CAAC;QACvB,CAAC;KACD;IA3DD,oBA2DC;IAED,IAAY,gBAIX;IAJD,WAAY,gBAAgB;QAC3B,iEAAS,CAAA;QACT,yEAAa,CAAA;QACb,uDAAI,CAAA;IACL,CAAC,EAJW,gBAAgB,gCAAhB,gBAAgB,QAI3B;IAED,MAAM,mBAAmB;QAQxB,YAAY,eAAiC,EAAE,SAAiC,EAAE,QAAkB,EAAE,eAAiC,EAAE,OAAa;YACrJ,IAAI,CAAC,CAAC,GAAiB,eAAe,CAAC;YACvC,IAAI,CAAC,CAAC,GAAW,SAAS,CAAC;YAC3B,IAAI,CAAC,CAAC,GAAU,QAAQ,CAAC;YACzB,IAAI,CAAC,CAAC,GAAiB,eAAe,CAAC;YACvC,IAAI,CAAC,CAAC,GAAS,OAAO,CAAC;QACxB,CAAC;QAEM,GAAG,CAAC,UAA4C,EAAE,MAAwB,EAAE,iBAAsB;YACxG,MAAM,MAAM,GAAG,eAAe,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YAChD,MAAM,aAAa,GAAG,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACzD,MAAM,OAAO,GAAkB;gBAC9B,eAAe,EAAE,IAAI,CAAC,CAAC;gBACvB,SAAS,EAAE,IAAI,CAAC,CAAC;gBACjB,eAAe,EAAE,IAAI,CAAC,CAAC;gBACvB,OAAO,EAAE,IAAI,CAAC,CAAC;gBACf,oBAAoB,EAAE,EAAE;gBACxB,MAAM;gBACN,aAAa;gBACb,QAAQ,EAAE,IAAI,CAAC,CAAC;gBAChB,cAAc,EAAE,EAAE;gBAClB,iBAAiB;aACjB,CAAC;YACF,MAAM,eAAe,GAAG,IAAI,CAAC,CAAC,CAA6B,UAAU,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YACxF,OAAO;gBACN,gBAAgB,EAAE,IAAI,CAAC,CAAC,CAAe,MAAM;gBAC7C,MAAM,EAAE,eAAe,CAAC,MAAM;gBAC9B,UAAU,EAAE,eAAe,CAAC,UAAU;gBACtC,MAAM;aACN,CAAC;QACH,CAAC;QAEO,CAAC,CAA6B,UAA4C,EAAE,OAAsB,EAAE,MAAwB;YACnI,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;YAClD,IAAI,IAAI,CAAC,CAAC,CAAe,MAAM,CAAC,OAAO,EAAE,EAAE;gBAC1C,OAAO,EAAE,MAAM,EAAE,EAAE,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC;aACtC;YACD,OAAO,CAAC,oBAAoB,GAAG,uBAAuB,CAAC,SAAS,CAAC,UAAU,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;YAC/F,IAAI,WAAW,GAAmC,SAAS,CAAC;YAC5D,IAAI,mBAAmB,GAAsD,SAAS,CAAC;YACvF,IAAI,UAAU,CAAC,OAAO,IAAI,OAAO,CAAC,QAAQ,6BAAqB,EAAE;gBAChE,WAAW,GAAG,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,MAAM,CAAC;gBACzF,mBAAmB,GAAG,UAAU,CAAC,OAAO,CAAC,KAAK,CAAC;aAC/C;iBAAM,IAAI,UAAU,CAAC,GAAG,IAAI,OAAO,CAAC,QAAQ,yBAAiB,EAAE;gBAC/D,WAAW,GAAG,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,MAAM,CAAC;gBACrF,mBAAmB,GAAG,UAAU,CAAC,GAAG,CAAC,KAAK,CAAC;aAC3C;iBAAM,IAAI,UAAU,CAAC,KAAK,IAAI,OAAO,CAAC,QAAQ,2BAAmB,EAAE;gBACnE,WAAW,GAAG,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,MAAM,CAAC;gBACvF,mBAAmB,GAAG,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC;aAC7C;YACD,IAAI,OAAO,CAAC,aAAa,2CAAmC,IAAI,WAAW,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,IAAI,mBAAmB,IAAI,mBAAmB,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC/J,MAAM,WAAW,GAAa,EAAE,CAAC;gBACjC,KAAK,MAAM,IAAI,IAAI,mBAAmB,EAAE;oBACvC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;iBAChD;gBACD,OAAO,CAAC,eAAe,CAAC,KAAK,CAC5B,GAAG,CAAC,QAAQ,CACX,EAAE,AAAuM,EACzM,CADK,EAAE,CACoI,EAAE,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CACrK,CAAC,OAF0C,EAAE,OAAO,EAAE,CAAC,gJAAgJ,CAAC;aAGzM;YAED,IAAI,MAAM,GAAqB,EAAE,MAAM,EAAE,EAAE,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC;YAC9D,IAAI,UAAU,CAAC,KAAK,EAAE;gBACrB,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;aACrE;YACD,IAAI,WAAW,EAAE;gBAChB,MAAM,CAAC,MAAM,GAAG,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;aACnE;YAED,IAAI,CAAC,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;gBAChG,MAAM,QAAQ,GAAqB,uBAAuB,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,EAAE,OAAO,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;gBAChH,MAAM,YAAY,GAAG,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,SAAS,CAAC;gBACvI,MAAM,IAAI,GAAG,KAAK,CAAC,aAAa,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;gBAC7D,MAAM,IAAI,GAAqB,IAAI,KAAK,CAAC,GAAG,CAC3C,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,EAC7B,MAAM,CAAC,MAAM,CAAC,EAAgC,EAAE,MAAM,EAAE,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,UAAU,EAAE,eAAe,EAAE,OAAO,CAAC,eAAe,EAAE,EAAE,CAAC,EACjJ,IAAI,EACJ,KAAK,CAAC,GAAG,EACT;oBACC,IAAI,EAAE,SAAS;oBACf,OAAO,EAAE,SAAS;oBAClB,YAAY,EAAE,SAAS;oBACvB,gBAAgB,EAAE,IAAI;iBACtB,EACD,KAAK,EACL,EAAE,iBAAiB,EAAE,IAAI,EAAE,EAC3B;oBACC,IAAI,EAAE,IAAI;oBACV,UAAU,EAAE,IAAI;oBAChB,KAAK,EAAE,KAAK,CAAC,SAAS,CAAC,KAAK;oBAC5B,YAAY,EAAE,YAAY;oBAC1B,eAAe,EAAE,QAAQ;iBACzB,CACD,CAAC;gBACF,MAAM,aAAa,GAAG,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;gBACvD,IAAI,aAAa,KAAK,SAAS,EAAE;oBAChC,IAAI,CAAC,uBAAuB,CAAC,KAAK,GAAG,aAAa,CAAC;iBACnD;qBAAM,IAAI,UAAU,CAAC,KAAK,KAAK,MAAM,EAAE;oBACvC,IAAI,CAAC,uBAAuB,CAAC,KAAK,GAAG,SAAS,CAAC;iBAC/C;gBACD,UAAU,CAAC,WAAW,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBACtC,UAAU,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBACvC,MAAM,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC;aACvB;YACD,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,IAAI,EAAE,CAAC;YACpC,MAAM,CAAC,UAAU,GAAG,MAAM,CAAC,UAAU,IAAI,EAAE,CAAC;YAC5C,OAAO,MAAM,CAAC;QACf,CAAC;KACD;IAED,MAAM,QAAQ,GAAgD,IAAI,GAAG,EAAE,CAAC;IACxE,MAAM,cAAc,GAAgD,IAAI,GAAG,EAAE,CAAC;IAC9E,SAAgB,IAAI,CAAE,eAAiC,EAAE,SAAiC,EAAE,QAAkB,EAAE,aAA+C,EAAE,MAAwB,EAAE,MAAwB,EAAE,iBAAsB,EAAiB,YAAqB,KAAK;QACrR,MAAM,iBAAiB,GAAG,SAAS,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,QAAQ,CAAC;QAChE,IAAI,gBAAgB,GAAG,iBAAiB,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACrD,IAAI,CAAC,gBAAgB,EAAE;YACtB,iBAAiB,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,GAAG,EAAE,CAAC,CAAC;YACzC,gBAAgB,GAAG,iBAAiB,CAAC,GAAG,CAAC,MAAM,CAAE,CAAC;SAClD;QACD,IAAI,OAAO,GAAG,gBAAgB,CAAC,GAAG,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;QACnE,IAAI,CAAC,OAAO,EAAE;YACb,OAAO,GAAG,IAAI,IAAI,EAAK,CAAC;YACxB,gBAAgB,CAAC,GAAG,CAAC,eAAe,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,OAAO,CAAC,CAAC;SAC9D;QACD,IAAI;YACH,OAAO,CAAC,KAAK,EAAE,CAAC;YAChB,OAAO,CAAC,IAAI,mBAAmB,CAAC,eAAe,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,aAAa,EAAE,MAAM,EAAE,iBAAiB,CAAC,CAAC;SACtI;gBAAS;YACT,OAAO,CAAC,MAAM,EAAE,CAAC;SACjB;IACF,CAAC;IAlBD,oBAkBC;IAID,SAAgB,IAAI,CAAa,eAA0B,EAAc,eAAkD;QAC1H,OAAO,UAAU,CAAC,gBAAgB,CAAC,eAAe,EAAE,eAAe,CAAC,CAAC;IACtE,CAAC;IAFD,oBAEC","file":"taskConfiguration.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\n\nimport * as Objects from 'vs/base/common/objects';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { IJSONSchemaMap } from 'vs/base/common/jsonSchema';\nimport { Platform } from 'vs/base/common/platform';\nimport * as Types from 'vs/base/common/types';\nimport * as UUID from 'vs/base/common/uuid';\n\nimport { ValidationStatus, IProblemReporter as IProblemReporterBase } from 'vs/base/common/parsers';\nimport {\n\tINamedProblemMatcher, ProblemMatcherParser, Config as ProblemMatcherConfig,\n\tisNamedProblemMatcher, ProblemMatcherRegistry, ProblemMatcher\n} from 'vs/workbench/contrib/tasks/common/problemMatcher';\n\nimport { IWorkspaceFolder, IWorkspace } from 'vs/platform/workspace/common/workspace';\nimport * as Tasks from './tasks';\nimport { ITaskDefinitionRegistry, TaskDefinitionRegistry } from './taskDefinitionRegistry';\nimport { ConfiguredInput } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\nimport { URI } from 'vs/base/common/uri';\nimport { ShellExecutionSupportedContext, ProcessExecutionSupportedContext } from 'vs/workbench/contrib/tasks/common/taskService';\nimport { IContextKeyService, RawContextKey } from 'vs/platform/contextkey/common/contextkey';\n\nexport const enum ShellQuoting {\n\t/**\n\t * Default is character escaping.\n\t */\n\tescape = 1,\n\n\t/**\n\t * Default is strong quoting\n\t */\n\tstrong = 2,\n\n\t/**\n\t * Default is weak quoting.\n\t */\n\tweak = 3\n}\n\nexport interface IShellQuotingOptions {\n\t/**\n\t * The character used to do character escaping.\n\t */\n\tescape?: string | {\n\t\tescapeChar: string;\n\t\tcharsToEscape: string;\n\t};\n\n\t/**\n\t * The character used for string quoting.\n\t */\n\tstrong?: string;\n\n\t/**\n\t * The character used for weak quoting.\n\t */\n\tweak?: string;\n}\n\nexport interface IShellConfiguration {\n\texecutable?: string;\n\targs?: string[];\n\tquoting?: IShellQuotingOptions;\n}\n\nexport interface ICommandOptionsConfig {\n\t/**\n\t * The current working directory of the executed program or shell.\n\t * If omitted VSCode's current workspace root is used.\n\t */\n\tcwd?: string;\n\n\t/**\n\t * The additional environment of the executed program or shell. If omitted\n\t * the parent process' environment is used.\n\t */\n\tenv?: IStringDictionary<string>;\n\n\t/**\n\t * The shell configuration;\n\t */\n\tshell?: IShellConfiguration;\n}\n\nexport interface IPresentationOptionsConfig {\n\t/**\n\t * Controls whether the terminal executing a task is brought to front or not.\n\t * Defaults to `RevealKind.Always`.\n\t */\n\treveal?: string;\n\n\t/**\n\t * Controls whether the problems panel is revealed when running this task or not.\n\t * Defaults to `RevealKind.Never`.\n\t */\n\trevealProblems?: string;\n\n\t/**\n\t * Controls whether the executed command is printed to the output window or terminal as well.\n\t */\n\techo?: boolean;\n\n\t/**\n\t * Controls whether the terminal is focus when this task is executed\n\t */\n\tfocus?: boolean;\n\n\t/**\n\t * Controls whether the task runs in a new terminal\n\t */\n\tpanel?: string;\n\n\t/**\n\t * Controls whether to show the \"Terminal will be reused by tasks, press any key to close it\" message.\n\t */\n\tshowReuseMessage?: boolean;\n\n\t/**\n\t * Controls whether the terminal should be cleared before running the task.\n\t */\n\tclear?: boolean;\n\n\t/**\n\t * Controls whether the task is executed in a specific terminal group using split panes.\n\t */\n\tgroup?: string;\n\n\t/**\n\t * Controls whether the terminal that the task runs in is closed when the task completes.\n\t */\n\tclose?: boolean;\n}\n\nexport interface IRunOptionsConfig {\n\treevaluateOnRerun?: boolean;\n\trunOn?: string;\n\tinstanceLimit?: number;\n}\n\nexport interface ITaskIdentifier {\n\ttype?: string;\n\t[name: string]: any;\n}\n\nexport namespace ITaskIdentifier {\n\texport function is(value: any): value is ITaskIdentifier {\n\t\tconst candidate: ITaskIdentifier = value;\n\t\treturn candidate !== undefined && Types.isString(value.type);\n\t}\n}\n\nexport interface ILegacyTaskProperties {\n\t/**\n\t * @deprecated Use `isBackground` instead.\n\t * Whether the executed command is kept alive and is watching the file system.\n\t */\n\tisWatching?: boolean;\n\n\t/**\n\t * @deprecated Use `group` instead.\n\t * Whether this task maps to the default build command.\n\t */\n\tisBuildCommand?: boolean;\n\n\t/**\n\t * @deprecated Use `group` instead.\n\t * Whether this task maps to the default test command.\n\t */\n\tisTestCommand?: boolean;\n}\n\nexport interface ILegacyCommandProperties {\n\n\t/**\n\t * Whether this is a shell or process\n\t */\n\ttype?: string;\n\n\t/**\n\t * @deprecated Use presentation options\n\t * Controls whether the output view of the running tasks is brought to front or not.\n\t * See BaseTaskRunnerConfiguration#showOutput for details.\n\t */\n\tshowOutput?: string;\n\n\t/**\n\t * @deprecated Use presentation options\n\t * Controls whether the executed command is printed to the output windows as well.\n\t */\n\techoCommand?: boolean;\n\n\t/**\n\t * @deprecated Use presentation instead\n\t */\n\tterminal?: IPresentationOptionsConfig;\n\n\t/**\n\t * @deprecated Use inline commands.\n\t * See BaseTaskRunnerConfiguration#suppressTaskName for details.\n\t */\n\tsuppressTaskName?: boolean;\n\n\t/**\n\t * Some commands require that the task argument is highlighted with a special\n\t * prefix (e.g. /t: for msbuild). This property can be used to control such\n\t * a prefix.\n\t */\n\ttaskSelector?: string;\n\n\t/**\n\t * @deprecated use the task type instead.\n\t * Specifies whether the command is a shell command and therefore must\n\t * be executed in a shell interpreter (e.g. cmd.exe, bash, ...).\n\t *\n\t * Defaults to false if omitted.\n\t */\n\tisShellCommand?: boolean | IShellConfiguration;\n}\n\nexport type CommandString = string | string[] | { value: string | string[]; quoting: 'escape' | 'strong' | 'weak' };\n\nexport namespace CommandString {\n\texport function value(value: CommandString): string {\n\t\tif (Types.isString(value)) {\n\t\t\treturn value;\n\t\t} else if (Types.isStringArray(value)) {\n\t\t\treturn value.join(' ');\n\t\t} else {\n\t\t\tif (Types.isString(value.value)) {\n\t\t\t\treturn value.value;\n\t\t\t} else {\n\t\t\t\treturn value.value.join(' ');\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport interface IBaseCommandProperties {\n\n\t/**\n\t * The command to be executed. Can be an external program or a shell\n\t * command.\n\t */\n\tcommand?: CommandString;\n\n\t/**\n\t * The command options used when the command is executed. Can be omitted.\n\t */\n\toptions?: ICommandOptionsConfig;\n\n\t/**\n\t * The arguments passed to the command or additional arguments passed to the\n\t * command when using a global command.\n\t */\n\targs?: CommandString[];\n}\n\n\nexport interface ICommandProperties extends IBaseCommandProperties {\n\n\t/**\n\t * Windows specific command properties\n\t */\n\twindows?: IBaseCommandProperties;\n\n\t/**\n\t * OSX specific command properties\n\t */\n\tosx?: IBaseCommandProperties;\n\n\t/**\n\t * linux specific command properties\n\t */\n\tlinux?: IBaseCommandProperties;\n}\n\nexport interface IGroupKind {\n\tkind?: string;\n\tisDefault?: boolean | string;\n}\n\nexport interface IConfigurationProperties {\n\t/**\n\t * The task's name\n\t */\n\ttaskName?: string;\n\n\t/**\n\t * The UI label used for the task.\n\t */\n\tlabel?: string;\n\n\t/**\n\t * An optional identifier which can be used to reference a task\n\t * in a dependsOn or other attributes.\n\t */\n\tidentifier?: string;\n\n\t/**\n\t * Whether the executed command is kept alive and runs in the background.\n\t */\n\tisBackground?: boolean;\n\n\t/**\n\t * Whether the task should prompt on close for confirmation if running.\n\t */\n\tpromptOnClose?: boolean;\n\n\t/**\n\t * Defines the group the task belongs too.\n\t */\n\tgroup?: string | IGroupKind;\n\n\t/**\n\t * A description of the task.\n\t */\n\tdetail?: string;\n\n\t/**\n\t * The other tasks the task depend on\n\t */\n\tdependsOn?: string | ITaskIdentifier | Array<string | ITaskIdentifier>;\n\n\t/**\n\t * The order the dependsOn tasks should be executed in.\n\t */\n\tdependsOrder?: string;\n\n\t/**\n\t * Controls the behavior of the used terminal\n\t */\n\tpresentation?: IPresentationOptionsConfig;\n\n\t/**\n\t * Controls shell options.\n\t */\n\toptions?: ICommandOptionsConfig;\n\n\t/**\n\t * The problem matcher(s) to use to capture problems in the tasks\n\t * output.\n\t */\n\tproblemMatcher?: ProblemMatcherConfig.ProblemMatcherType;\n\n\t/**\n\t * Task run options. Control run related properties.\n\t */\n\trunOptions?: IRunOptionsConfig;\n\n\t/**\n\t * The icon for this task in the terminal tabs list\n\t */\n\ticon?: { id: string; color?: string };\n\n\t/**\n\t * The icon's color in the terminal tabs list\n\t */\n\tcolor?: string;\n\n\t/**\n\t * Do not show this task in the run task quickpick\n\t */\n\thide?: boolean;\n}\n\nexport interface ICustomTask extends ICommandProperties, IConfigurationProperties {\n\t/**\n\t * Custom tasks have the type CUSTOMIZED_TASK_TYPE\n\t */\n\ttype?: string;\n\n}\n\nexport interface IConfiguringTask extends IConfigurationProperties {\n\t/**\n\t * The contributed type of the task\n\t */\n\ttype?: string;\n}\n\n/**\n * The base task runner configuration\n */\nexport interface IBaseTaskRunnerConfiguration {\n\n\t/**\n\t * The command to be executed. Can be an external program or a shell\n\t * command.\n\t */\n\tcommand?: CommandString;\n\n\t/**\n\t * @deprecated Use type instead\n\t *\n\t * Specifies whether the command is a shell command and therefore must\n\t * be executed in a shell interpreter (e.g. cmd.exe, bash, ...).\n\t *\n\t * Defaults to false if omitted.\n\t */\n\tisShellCommand?: boolean;\n\n\t/**\n\t * The task type\n\t */\n\ttype?: string;\n\n\t/**\n\t * The command options used when the command is executed. Can be omitted.\n\t */\n\toptions?: ICommandOptionsConfig;\n\n\t/**\n\t * The arguments passed to the command. Can be omitted.\n\t */\n\targs?: CommandString[];\n\n\t/**\n\t * Controls whether the output view of the running tasks is brought to front or not.\n\t * Valid values are:\n\t *   \"always\": bring the output window always to front when a task is executed.\n\t *   \"silent\": only bring it to front if no problem matcher is defined for the task executed.\n\t *   \"never\": never bring the output window to front.\n\t *\n\t * If omitted \"always\" is used.\n\t */\n\tshowOutput?: string;\n\n\t/**\n\t * Controls whether the executed command is printed to the output windows as well.\n\t */\n\techoCommand?: boolean;\n\n\t/**\n\t * The group\n\t */\n\tgroup?: string | IGroupKind;\n\n\t/**\n\t * Controls the behavior of the used terminal\n\t */\n\tpresentation?: IPresentationOptionsConfig;\n\n\t/**\n\t * If set to false the task name is added as an additional argument to the\n\t * command when executed. If set to true the task name is suppressed. If\n\t * omitted false is used.\n\t */\n\tsuppressTaskName?: boolean;\n\n\t/**\n\t * Some commands require that the task argument is highlighted with a special\n\t * prefix (e.g. /t: for msbuild). This property can be used to control such\n\t * a prefix.\n\t */\n\ttaskSelector?: string;\n\n\t/**\n\t * The problem matcher(s) to used if a global command is executed (e.g. no tasks\n\t * are defined). A tasks.json file can either contain a global problemMatcher\n\t * property or a tasks property but not both.\n\t */\n\tproblemMatcher?: ProblemMatcherConfig.ProblemMatcherType;\n\n\t/**\n\t * @deprecated Use `isBackground` instead.\n\t *\n\t * Specifies whether a global command is a watching the filesystem. A task.json\n\t * file can either contain a global isWatching property or a tasks property\n\t * but not both.\n\t */\n\tisWatching?: boolean;\n\n\t/**\n\t * Specifies whether a global command is a background task.\n\t */\n\tisBackground?: boolean;\n\n\t/**\n\t * Whether the task should prompt on close for confirmation if running.\n\t */\n\tpromptOnClose?: boolean;\n\n\t/**\n\t * The configuration of the available tasks. A tasks.json file can either\n\t * contain a global problemMatcher property or a tasks property but not both.\n\t */\n\ttasks?: Array<ICustomTask | IConfiguringTask>;\n\n\t/**\n\t * Problem matcher declarations.\n\t */\n\tdeclares?: ProblemMatcherConfig.INamedProblemMatcher[];\n\n\t/**\n\t * Optional user input variables.\n\t */\n\tinputs?: ConfiguredInput[];\n}\n\n/**\n * A configuration of an external build system. BuildConfiguration.buildSystem\n * must be set to 'program'\n */\nexport interface IExternalTaskRunnerConfiguration extends IBaseTaskRunnerConfiguration {\n\n\t_runner?: string;\n\n\t/**\n\t * Determines the runner to use\n\t */\n\trunner?: string;\n\n\t/**\n\t * The config's version number\n\t */\n\tversion: string;\n\n\t/**\n\t * Windows specific task configuration\n\t */\n\twindows?: IBaseTaskRunnerConfiguration;\n\n\t/**\n\t * Mac specific task configuration\n\t */\n\tosx?: IBaseTaskRunnerConfiguration;\n\n\t/**\n\t * Linux specific task configuration\n\t */\n\tlinux?: IBaseTaskRunnerConfiguration;\n}\n\nenum ProblemMatcherKind {\n\tUnknown,\n\tString,\n\tProblemMatcher,\n\tArray\n}\n\ntype TaskConfigurationValueWithErrors<T> = {\n\tvalue?: T;\n\terrors?: string[];\n};\n\nconst EMPTY_ARRAY: any[] = [];\nObject.freeze(EMPTY_ARRAY);\n\nfunction assignProperty<T, K extends keyof T>(target: T, source: Partial<T>, key: K) {\n\tconst sourceAtKey = source[key];\n\tif (sourceAtKey !== undefined) {\n\t\ttarget[key] = sourceAtKey!;\n\t}\n}\n\nfunction fillProperty<T, K extends keyof T>(target: T, source: Partial<T>, key: K) {\n\tconst sourceAtKey = source[key];\n\tif (target[key] === undefined && sourceAtKey !== undefined) {\n\t\ttarget[key] = sourceAtKey!;\n\t}\n}\n\n\ninterface IParserType<T> {\n\tisEmpty(value: T | undefined): boolean;\n\tassignProperties(target: T | undefined, source: T | undefined): T | undefined;\n\tfillProperties(target: T | undefined, source: T | undefined): T | undefined;\n\tfillDefaults(value: T | undefined, context: IParseContext): T | undefined;\n\tfreeze(value: T): Readonly<T> | undefined;\n}\n\ninterface IMetaData<T, U> {\n\tproperty: keyof T;\n\ttype?: IParserType<U>;\n}\n\n\nfunction _isEmpty<T>(this: void, value: T | undefined, properties: IMetaData<T, any>[] | undefined, allowEmptyArray: boolean = false): boolean {\n\tif (value === undefined || value === null || properties === undefined) {\n\t\treturn true;\n\t}\n\tfor (const meta of properties) {\n\t\tconst property = value[meta.property];\n\t\tif (property !== undefined && property !== null) {\n\t\t\tif (meta.type !== undefined && !meta.type.isEmpty(property)) {\n\t\t\t\treturn false;\n\t\t\t} else if (!Array.isArray(property) || (property.length > 0) || allowEmptyArray) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t}\n\treturn true;\n}\n\nfunction _assignProperties<T>(this: void, target: T | undefined, source: T | undefined, properties: IMetaData<T, any>[]): T | undefined {\n\tif (!source || _isEmpty(source, properties)) {\n\t\treturn target;\n\t}\n\tif (!target || _isEmpty(target, properties)) {\n\t\treturn source;\n\t}\n\tfor (const meta of properties) {\n\t\tconst property = meta.property;\n\t\tlet value: any;\n\t\tif (meta.type !== undefined) {\n\t\t\tvalue = meta.type.assignProperties(target[property], source[property]);\n\t\t} else {\n\t\t\tvalue = source[property];\n\t\t}\n\t\tif (value !== undefined && value !== null) {\n\t\t\ttarget[property] = value;\n\t\t}\n\t}\n\treturn target;\n}\n\nfunction _fillProperties<T>(this: void, target: T | undefined, source: T | undefined, properties: IMetaData<T, any>[] | undefined, allowEmptyArray: boolean = false): T | undefined {\n\tif (!source || _isEmpty(source, properties)) {\n\t\treturn target;\n\t}\n\tif (!target || _isEmpty(target, properties, allowEmptyArray)) {\n\t\treturn source;\n\t}\n\tfor (const meta of properties!) {\n\t\tconst property = meta.property;\n\t\tlet value: any;\n\t\tif (meta.type) {\n\t\t\tvalue = meta.type.fillProperties(target[property], source[property]);\n\t\t} else if (target[property] === undefined) {\n\t\t\tvalue = source[property];\n\t\t}\n\t\tif (value !== undefined && value !== null) {\n\t\t\ttarget[property] = value;\n\t\t}\n\t}\n\treturn target;\n}\n\nfunction _fillDefaults<T>(this: void, target: T | undefined, defaults: T | undefined, properties: IMetaData<T, any>[], context: IParseContext): T | undefined {\n\tif (target && Object.isFrozen(target)) {\n\t\treturn target;\n\t}\n\tif (target === undefined || target === null || defaults === undefined || defaults === null) {\n\t\tif (defaults !== undefined && defaults !== null) {\n\t\t\treturn Objects.deepClone(defaults);\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\tfor (const meta of properties) {\n\t\tconst property = meta.property;\n\t\tif (target[property] !== undefined) {\n\t\t\tcontinue;\n\t\t}\n\t\tlet value: any;\n\t\tif (meta.type) {\n\t\t\tvalue = meta.type.fillDefaults(target[property], context);\n\t\t} else {\n\t\t\tvalue = defaults[property];\n\t\t}\n\n\t\tif (value !== undefined && value !== null) {\n\t\t\ttarget[property] = value;\n\t\t}\n\t}\n\treturn target;\n}\n\nfunction _freeze<T>(this: void, target: T, properties: IMetaData<T, any>[]): Readonly<T> | undefined {\n\tif (target === undefined || target === null) {\n\t\treturn undefined;\n\t}\n\tif (Object.isFrozen(target)) {\n\t\treturn target;\n\t}\n\tfor (const meta of properties) {\n\t\tif (meta.type) {\n\t\t\tconst value = target[meta.property];\n\t\t\tif (value) {\n\t\t\t\tmeta.type.freeze(value);\n\t\t\t}\n\t\t}\n\t}\n\tObject.freeze(target);\n\treturn target;\n}\n\nexport namespace RunOnOptions {\n\texport function fromString(value: string | undefined): Tasks.RunOnOptions {\n\t\tif (!value) {\n\t\t\treturn Tasks.RunOnOptions.default;\n\t\t}\n\t\tswitch (value.toLowerCase()) {\n\t\t\tcase 'folderopen':\n\t\t\t\treturn Tasks.RunOnOptions.folderOpen;\n\t\t\tcase 'default':\n\t\t\tdefault:\n\t\t\t\treturn Tasks.RunOnOptions.default;\n\t\t}\n\t}\n}\n\nexport namespace RunOptions {\n\tconst properties: IMetaData<Tasks.IRunOptions, void>[] = [{ property: 'reevaluateOnRerun' }, { property: 'runOn' }, { property: 'instanceLimit' }];\n\texport function fromConfiguration(value: IRunOptionsConfig | undefined): Tasks.IRunOptions {\n\t\treturn {\n\t\t\treevaluateOnRerun: value ? value.reevaluateOnRerun : true,\n\t\t\trunOn: value ? RunOnOptions.fromString(value.runOn) : Tasks.RunOnOptions.default,\n\t\t\tinstanceLimit: value ? value.instanceLimit : 1\n\t\t};\n\t}\n\n\texport function assignProperties(target: Tasks.IRunOptions, source: Tasks.IRunOptions | undefined): Tasks.IRunOptions {\n\t\treturn _assignProperties(target, source, properties)!;\n\t}\n\n\texport function fillProperties(target: Tasks.IRunOptions, source: Tasks.IRunOptions | undefined): Tasks.IRunOptions {\n\t\treturn _fillProperties(target, source, properties)!;\n\t}\n}\n\nexport interface IParseContext {\n\tworkspaceFolder: IWorkspaceFolder;\n\tworkspace: IWorkspace | undefined;\n\tproblemReporter: IProblemReporter;\n\tnamedProblemMatchers: IStringDictionary<INamedProblemMatcher>;\n\tuuidMap: UUIDMap;\n\tengine: Tasks.ExecutionEngine;\n\tschemaVersion: Tasks.JsonSchemaVersion;\n\tplatform: Platform;\n\ttaskLoadIssues: string[];\n\tcontextKeyService: IContextKeyService;\n}\n\n\nnamespace ShellConfiguration {\n\n\tconst properties: IMetaData<Tasks.IShellConfiguration, void>[] = [{ property: 'executable' }, { property: 'args' }, { property: 'quoting' }];\n\n\texport function is(value: any): value is IShellConfiguration {\n\t\tconst candidate: IShellConfiguration = value;\n\t\treturn candidate && (Types.isString(candidate.executable) || Types.isStringArray(candidate.args));\n\t}\n\n\texport function from(this: void, config: IShellConfiguration | undefined, context: IParseContext): Tasks.IShellConfiguration | undefined {\n\t\tif (!is(config)) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst result: IShellConfiguration = {};\n\t\tif (config.executable !== undefined) {\n\t\t\tresult.executable = config.executable;\n\t\t}\n\t\tif (config.args !== undefined) {\n\t\t\tresult.args = config.args.slice();\n\t\t}\n\t\tif (config.quoting !== undefined) {\n\t\t\tresult.quoting = Objects.deepClone(config.quoting);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\texport function isEmpty(this: void, value: Tasks.IShellConfiguration): boolean {\n\t\treturn _isEmpty(value, properties, true);\n\t}\n\n\texport function assignProperties(this: void, target: Tasks.IShellConfiguration | undefined, source: Tasks.IShellConfiguration | undefined): Tasks.IShellConfiguration | undefined {\n\t\treturn _assignProperties(target, source, properties);\n\t}\n\n\texport function fillProperties(this: void, target: Tasks.IShellConfiguration, source: Tasks.IShellConfiguration): Tasks.IShellConfiguration | undefined {\n\t\treturn _fillProperties(target, source, properties, true);\n\t}\n\n\texport function fillDefaults(this: void, value: Tasks.IShellConfiguration, context: IParseContext): Tasks.IShellConfiguration {\n\t\treturn value;\n\t}\n\n\texport function freeze(this: void, value: Tasks.IShellConfiguration): Readonly<Tasks.IShellConfiguration> | undefined {\n\t\tif (!value) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn Object.freeze(value);\n\t}\n}\n\nnamespace CommandOptions {\n\n\tconst properties: IMetaData<Tasks.CommandOptions, Tasks.IShellConfiguration>[] = [{ property: 'cwd' }, { property: 'env' }, { property: 'shell', type: ShellConfiguration }];\n\tconst defaults: ICommandOptionsConfig = { cwd: '${workspaceFolder}' };\n\n\texport function from(this: void, options: ICommandOptionsConfig, context: IParseContext): Tasks.CommandOptions | undefined {\n\t\tconst result: Tasks.CommandOptions = {};\n\t\tif (options.cwd !== undefined) {\n\t\t\tif (Types.isString(options.cwd)) {\n\t\t\t\tresult.cwd = options.cwd;\n\t\t\t} else {\n\t\t\t\tcontext.taskLoadIssues.push(nls.localize('ConfigurationParser.invalidCWD', 'Warning: options.cwd must be of type string. Ignoring value {0}\\n', options.cwd));\n\t\t\t}\n\t\t}\n\t\tif (options.env !== undefined) {\n\t\t\tresult.env = Objects.deepClone(options.env);\n\t\t}\n\t\tresult.shell = ShellConfiguration.from(options.shell, context);\n\t\treturn isEmpty(result) ? undefined : result;\n\t}\n\n\texport function isEmpty(value: Tasks.CommandOptions | undefined): boolean {\n\t\treturn _isEmpty(value, properties);\n\t}\n\n\texport function assignProperties(target: Tasks.CommandOptions | undefined, source: Tasks.CommandOptions | undefined): Tasks.CommandOptions | undefined {\n\t\tif ((source === undefined) || isEmpty(source)) {\n\t\t\treturn target;\n\t\t}\n\t\tif ((target === undefined) || isEmpty(target)) {\n\t\t\treturn source;\n\t\t}\n\t\tassignProperty(target, source, 'cwd');\n\t\tif (target.env === undefined) {\n\t\t\ttarget.env = source.env;\n\t\t} else if (source.env !== undefined) {\n\t\t\tconst env: { [key: string]: string } = Object.create(null);\n\t\t\tif (target.env !== undefined) {\n\t\t\t\tObject.keys(target.env).forEach(key => env[key] = target.env![key]);\n\t\t\t}\n\t\t\tif (source.env !== undefined) {\n\t\t\t\tObject.keys(source.env).forEach(key => env[key] = source.env![key]);\n\t\t\t}\n\t\t\ttarget.env = env;\n\t\t}\n\t\ttarget.shell = ShellConfiguration.assignProperties(target.shell, source.shell);\n\t\treturn target;\n\t}\n\n\texport function fillProperties(target: Tasks.CommandOptions | undefined, source: Tasks.CommandOptions | undefined): Tasks.CommandOptions | undefined {\n\t\treturn _fillProperties(target, source, properties);\n\t}\n\n\texport function fillDefaults(value: Tasks.CommandOptions | undefined, context: IParseContext): Tasks.CommandOptions | undefined {\n\t\treturn _fillDefaults(value, defaults, properties, context);\n\t}\n\n\texport function freeze(value: Tasks.CommandOptions): Readonly<Tasks.CommandOptions> | undefined {\n\t\treturn _freeze(value, properties);\n\t}\n}\n\nnamespace CommandConfiguration {\n\n\texport namespace PresentationOptions {\n\t\tconst properties: IMetaData<Tasks.IPresentationOptions, void>[] = [{ property: 'echo' }, { property: 'reveal' }, { property: 'revealProblems' }, { property: 'focus' }, { property: 'panel' }, { property: 'showReuseMessage' }, { property: 'clear' }, { property: 'group' }, { property: 'close' }];\n\n\t\tinterface IPresentationOptionsShape extends ILegacyCommandProperties {\n\t\t\tpresentation?: IPresentationOptionsConfig;\n\t\t}\n\n\t\texport function from(this: void, config: IPresentationOptionsShape, context: IParseContext): Tasks.IPresentationOptions | undefined {\n\t\t\tlet echo: boolean;\n\t\t\tlet reveal: Tasks.RevealKind;\n\t\t\tlet revealProblems: Tasks.RevealProblemKind;\n\t\t\tlet focus: boolean;\n\t\t\tlet panel: Tasks.PanelKind;\n\t\t\tlet showReuseMessage: boolean;\n\t\t\tlet clear: boolean;\n\t\t\tlet group: string | undefined;\n\t\t\tlet close: boolean | undefined;\n\t\t\tlet hasProps = false;\n\t\t\tif (Types.isBoolean(config.echoCommand)) {\n\t\t\t\techo = config.echoCommand;\n\t\t\t\thasProps = true;\n\t\t\t}\n\t\t\tif (Types.isString(config.showOutput)) {\n\t\t\t\treveal = Tasks.RevealKind.fromString(config.showOutput);\n\t\t\t\thasProps = true;\n\t\t\t}\n\t\t\tconst presentation = config.presentation || config.terminal;\n\t\t\tif (presentation) {\n\t\t\t\tif (Types.isBoolean(presentation.echo)) {\n\t\t\t\t\techo = presentation.echo;\n\t\t\t\t}\n\t\t\t\tif (Types.isString(presentation.reveal)) {\n\t\t\t\t\treveal = Tasks.RevealKind.fromString(presentation.reveal);\n\t\t\t\t}\n\t\t\t\tif (Types.isString(presentation.revealProblems)) {\n\t\t\t\t\trevealProblems = Tasks.RevealProblemKind.fromString(presentation.revealProblems);\n\t\t\t\t}\n\t\t\t\tif (Types.isBoolean(presentation.focus)) {\n\t\t\t\t\tfocus = presentation.focus;\n\t\t\t\t}\n\t\t\t\tif (Types.isString(presentation.panel)) {\n\t\t\t\t\tpanel = Tasks.PanelKind.fromString(presentation.panel);\n\t\t\t\t}\n\t\t\t\tif (Types.isBoolean(presentation.showReuseMessage)) {\n\t\t\t\t\tshowReuseMessage = presentation.showReuseMessage;\n\t\t\t\t}\n\t\t\t\tif (Types.isBoolean(presentation.clear)) {\n\t\t\t\t\tclear = presentation.clear;\n\t\t\t\t}\n\t\t\t\tif (Types.isString(presentation.group)) {\n\t\t\t\t\tgroup = presentation.group;\n\t\t\t\t}\n\t\t\t\tif (Types.isBoolean(presentation.close)) {\n\t\t\t\t\tclose = presentation.close;\n\t\t\t\t}\n\t\t\t\thasProps = true;\n\t\t\t}\n\t\t\tif (!hasProps) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\treturn { echo: echo!, reveal: reveal!, revealProblems: revealProblems!, focus: focus!, panel: panel!, showReuseMessage: showReuseMessage!, clear: clear!, group, close: close };\n\t\t}\n\n\t\texport function assignProperties(target: Tasks.IPresentationOptions, source: Tasks.IPresentationOptions | undefined): Tasks.IPresentationOptions | undefined {\n\t\t\treturn _assignProperties(target, source, properties);\n\t\t}\n\n\t\texport function fillProperties(target: Tasks.IPresentationOptions, source: Tasks.IPresentationOptions | undefined): Tasks.IPresentationOptions | undefined {\n\t\t\treturn _fillProperties(target, source, properties);\n\t\t}\n\n\t\texport function fillDefaults(value: Tasks.IPresentationOptions, context: IParseContext): Tasks.IPresentationOptions | undefined {\n\t\t\tconst defaultEcho = context.engine === Tasks.ExecutionEngine.Terminal ? true : false;\n\t\t\treturn _fillDefaults(value, { echo: defaultEcho, reveal: Tasks.RevealKind.Always, revealProblems: Tasks.RevealProblemKind.Never, focus: false, panel: Tasks.PanelKind.Shared, showReuseMessage: true, clear: false }, properties, context);\n\t\t}\n\n\t\texport function freeze(value: Tasks.IPresentationOptions): Readonly<Tasks.IPresentationOptions> | undefined {\n\t\t\treturn _freeze(value, properties);\n\t\t}\n\n\t\texport function isEmpty(this: void, value: Tasks.IPresentationOptions): boolean {\n\t\t\treturn _isEmpty(value, properties);\n\t\t}\n\t}\n\n\tnamespace ShellString {\n\t\texport function from(this: void, value: CommandString | undefined): Tasks.CommandString | undefined {\n\t\t\tif (value === undefined || value === null) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tif (Types.isString(value)) {\n\t\t\t\treturn value;\n\t\t\t} else if (Types.isStringArray(value)) {\n\t\t\t\treturn value.join(' ');\n\t\t\t} else {\n\t\t\t\tconst quoting = Tasks.ShellQuoting.from(value.quoting);\n\t\t\t\tconst result = Types.isString(value.value) ? value.value : Types.isStringArray(value.value) ? value.value.join(' ') : undefined;\n\t\t\t\tif (result) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tvalue: result,\n\t\t\t\t\t\tquoting: quoting\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tinterface IBaseCommandConfigurationShape extends IBaseCommandProperties, ILegacyCommandProperties {\n\t}\n\n\tinterface ICommandConfigurationShape extends IBaseCommandConfigurationShape {\n\t\twindows?: IBaseCommandConfigurationShape;\n\t\tosx?: IBaseCommandConfigurationShape;\n\t\tlinux?: IBaseCommandConfigurationShape;\n\t}\n\n\tconst properties: IMetaData<Tasks.ICommandConfiguration, any>[] = [\n\t\t{ property: 'runtime' }, { property: 'name' }, { property: 'options', type: CommandOptions },\n\t\t{ property: 'args' }, { property: 'taskSelector' }, { property: 'suppressTaskName' },\n\t\t{ property: 'presentation', type: PresentationOptions }\n\t];\n\n\texport function from(this: void, config: ICommandConfigurationShape, context: IParseContext): Tasks.ICommandConfiguration | undefined {\n\t\tlet result: Tasks.ICommandConfiguration = fromBase(config, context)!;\n\n\t\tlet osConfig: Tasks.ICommandConfiguration | undefined = undefined;\n\t\tif (config.windows && context.platform === Platform.Windows) {\n\t\t\tosConfig = fromBase(config.windows, context);\n\t\t} else if (config.osx && context.platform === Platform.Mac) {\n\t\t\tosConfig = fromBase(config.osx, context);\n\t\t} else if (config.linux && context.platform === Platform.Linux) {\n\t\t\tosConfig = fromBase(config.linux, context);\n\t\t}\n\t\tif (osConfig) {\n\t\t\tresult = assignProperties(result, osConfig, context.schemaVersion === Tasks.JsonSchemaVersion.V2_0_0);\n\t\t}\n\t\treturn isEmpty(result) ? undefined : result;\n\t}\n\n\tfunction fromBase(this: void, config: IBaseCommandConfigurationShape, context: IParseContext): Tasks.ICommandConfiguration | undefined {\n\t\tconst name: Tasks.CommandString | undefined = ShellString.from(config.command);\n\t\tlet runtime: Tasks.RuntimeType;\n\t\tif (Types.isString(config.type)) {\n\t\t\tif (config.type === 'shell' || config.type === 'process') {\n\t\t\t\truntime = Tasks.RuntimeType.fromString(config.type);\n\t\t\t}\n\t\t}\n\t\tconst isShellConfiguration = ShellConfiguration.is(config.isShellCommand);\n\t\tif (Types.isBoolean(config.isShellCommand) || isShellConfiguration) {\n\t\t\truntime = Tasks.RuntimeType.Shell;\n\t\t} else if (config.isShellCommand !== undefined) {\n\t\t\truntime = !!config.isShellCommand ? Tasks.RuntimeType.Shell : Tasks.RuntimeType.Process;\n\t\t}\n\n\t\tconst result: Tasks.ICommandConfiguration = {\n\t\t\tname: name,\n\t\t\truntime: runtime!,\n\t\t\tpresentation: PresentationOptions.from(config, context)!\n\t\t};\n\n\t\tif (config.args !== undefined) {\n\t\t\tresult.args = [];\n\t\t\tfor (const arg of config.args) {\n\t\t\t\tconst converted = ShellString.from(arg);\n\t\t\t\tif (converted !== undefined) {\n\t\t\t\t\tresult.args.push(converted);\n\t\t\t\t} else {\n\t\t\t\t\tcontext.taskLoadIssues.push(\n\t\t\t\t\t\tnls.localize(\n\t\t\t\t\t\t\t'ConfigurationParser.inValidArg',\n\t\t\t\t\t\t\t'Error: command argument must either be a string or a quoted string. Provided value is:\\n{0}',\n\t\t\t\t\t\t\targ ? JSON.stringify(arg, undefined, 4) : 'undefined'\n\t\t\t\t\t\t));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (config.options !== undefined) {\n\t\t\tresult.options = CommandOptions.from(config.options, context);\n\t\t\tif (result.options && result.options.shell === undefined && isShellConfiguration) {\n\t\t\t\tresult.options.shell = ShellConfiguration.from(config.isShellCommand as IShellConfiguration, context);\n\t\t\t\tif (context.engine !== Tasks.ExecutionEngine.Terminal) {\n\t\t\t\t\tcontext.taskLoadIssues.push(nls.localize('ConfigurationParser.noShell', 'Warning: shell configuration is only supported when executing tasks in the terminal.'));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (Types.isString(config.taskSelector)) {\n\t\t\tresult.taskSelector = config.taskSelector;\n\t\t}\n\t\tif (Types.isBoolean(config.suppressTaskName)) {\n\t\t\tresult.suppressTaskName = config.suppressTaskName;\n\t\t}\n\n\t\treturn isEmpty(result) ? undefined : result;\n\t}\n\n\texport function hasCommand(value: Tasks.ICommandConfiguration): boolean {\n\t\treturn value && !!value.name;\n\t}\n\n\texport function isEmpty(value: Tasks.ICommandConfiguration | undefined): boolean {\n\t\treturn _isEmpty(value, properties);\n\t}\n\n\texport function assignProperties(target: Tasks.ICommandConfiguration, source: Tasks.ICommandConfiguration, overwriteArgs: boolean): Tasks.ICommandConfiguration {\n\t\tif (isEmpty(source)) {\n\t\t\treturn target;\n\t\t}\n\t\tif (isEmpty(target)) {\n\t\t\treturn source;\n\t\t}\n\t\tassignProperty(target, source, 'name');\n\t\tassignProperty(target, source, 'runtime');\n\t\tassignProperty(target, source, 'taskSelector');\n\t\tassignProperty(target, source, 'suppressTaskName');\n\t\tif (source.args !== undefined) {\n\t\t\tif (target.args === undefined || overwriteArgs) {\n\t\t\t\ttarget.args = source.args;\n\t\t\t} else {\n\t\t\t\ttarget.args = target.args.concat(source.args);\n\t\t\t}\n\t\t}\n\t\ttarget.presentation = PresentationOptions.assignProperties(target.presentation!, source.presentation)!;\n\t\ttarget.options = CommandOptions.assignProperties(target.options, source.options);\n\t\treturn target;\n\t}\n\n\texport function fillProperties(target: Tasks.ICommandConfiguration, source: Tasks.ICommandConfiguration): Tasks.ICommandConfiguration | undefined {\n\t\treturn _fillProperties(target, source, properties);\n\t}\n\n\texport function fillGlobals(target: Tasks.ICommandConfiguration, source: Tasks.ICommandConfiguration | undefined, taskName: string | undefined): Tasks.ICommandConfiguration {\n\t\tif ((source === undefined) || isEmpty(source)) {\n\t\t\treturn target;\n\t\t}\n\t\ttarget = target || {\n\t\t\tname: undefined,\n\t\t\truntime: undefined,\n\t\t\tpresentation: undefined\n\t\t};\n\t\tif (target.name === undefined) {\n\t\t\tfillProperty(target, source, 'name');\n\t\t\tfillProperty(target, source, 'taskSelector');\n\t\t\tfillProperty(target, source, 'suppressTaskName');\n\t\t\tlet args: Tasks.CommandString[] = source.args ? source.args.slice() : [];\n\t\t\tif (!target.suppressTaskName && taskName) {\n\t\t\t\tif (target.taskSelector !== undefined) {\n\t\t\t\t\targs.push(target.taskSelector + taskName);\n\t\t\t\t} else {\n\t\t\t\t\targs.push(taskName);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (target.args) {\n\t\t\t\targs = args.concat(target.args);\n\t\t\t}\n\t\t\ttarget.args = args;\n\t\t}\n\t\tfillProperty(target, source, 'runtime');\n\n\t\ttarget.presentation = PresentationOptions.fillProperties(target.presentation!, source.presentation)!;\n\t\ttarget.options = CommandOptions.fillProperties(target.options, source.options);\n\n\t\treturn target;\n\t}\n\n\texport function fillDefaults(value: Tasks.ICommandConfiguration | undefined, context: IParseContext): void {\n\t\tif (!value || Object.isFrozen(value)) {\n\t\t\treturn;\n\t\t}\n\t\tif (value.name !== undefined && value.runtime === undefined) {\n\t\t\tvalue.runtime = Tasks.RuntimeType.Process;\n\t\t}\n\t\tvalue.presentation = PresentationOptions.fillDefaults(value.presentation!, context)!;\n\t\tif (!isEmpty(value)) {\n\t\t\tvalue.options = CommandOptions.fillDefaults(value.options, context);\n\t\t}\n\t\tif (value.args === undefined) {\n\t\t\tvalue.args = EMPTY_ARRAY;\n\t\t}\n\t\tif (value.suppressTaskName === undefined) {\n\t\t\tvalue.suppressTaskName = (context.schemaVersion === Tasks.JsonSchemaVersion.V2_0_0);\n\t\t}\n\t}\n\n\texport function freeze(value: Tasks.ICommandConfiguration): Readonly<Tasks.ICommandConfiguration> | undefined {\n\t\treturn _freeze(value, properties);\n\t}\n}\n\nexport namespace ProblemMatcherConverter {\n\n\texport function namedFrom(this: void, declares: ProblemMatcherConfig.INamedProblemMatcher[] | undefined, context: IParseContext): IStringDictionary<INamedProblemMatcher> {\n\t\tconst result: IStringDictionary<INamedProblemMatcher> = Object.create(null);\n\n\t\tif (!Array.isArray(declares)) {\n\t\t\treturn result;\n\t\t}\n\t\t(<ProblemMatcherConfig.INamedProblemMatcher[]>declares).forEach((value) => {\n\t\t\tconst namedProblemMatcher = (new ProblemMatcherParser(context.problemReporter)).parse(value);\n\t\t\tif (isNamedProblemMatcher(namedProblemMatcher)) {\n\t\t\t\tresult[namedProblemMatcher.name] = namedProblemMatcher;\n\t\t\t} else {\n\t\t\t\tcontext.problemReporter.error(nls.localize('ConfigurationParser.noName', 'Error: Problem Matcher in declare scope must have a name:\\n{0}\\n', JSON.stringify(value, undefined, 4)));\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\texport function fromWithOsConfig(this: void, external: IConfigurationProperties & { [key: string]: any }, context: IParseContext): TaskConfigurationValueWithErrors<ProblemMatcher[]> {\n\t\tlet result: TaskConfigurationValueWithErrors<ProblemMatcher[]> = {};\n\t\tif (external.windows && external.windows.problemMatcher && context.platform === Platform.Windows) {\n\t\t\tresult = from(external.windows.problemMatcher, context);\n\t\t} else if (external.osx && external.osx.problemMatcher && context.platform === Platform.Mac) {\n\t\t\tresult = from(external.osx.problemMatcher, context);\n\t\t} else if (external.linux && external.linux.problemMatcher && context.platform === Platform.Linux) {\n\t\t\tresult = from(external.linux.problemMatcher, context);\n\t\t} else if (external.problemMatcher) {\n\t\t\tresult = from(external.problemMatcher, context);\n\t\t}\n\t\treturn result;\n\t}\n\n\texport function from(this: void, config: ProblemMatcherConfig.ProblemMatcherType | undefined, context: IParseContext): TaskConfigurationValueWithErrors<ProblemMatcher[]> {\n\t\tconst result: ProblemMatcher[] = [];\n\t\tif (config === undefined) {\n\t\t\treturn { value: result };\n\t\t}\n\t\tconst errors: string[] = [];\n\t\tfunction addResult(matcher: TaskConfigurationValueWithErrors<ProblemMatcher>) {\n\t\t\tif (matcher.value) {\n\t\t\t\tresult.push(matcher.value);\n\t\t\t}\n\t\t\tif (matcher.errors) {\n\t\t\t\terrors.push(...matcher.errors);\n\t\t\t}\n\t\t}\n\t\tconst kind = getProblemMatcherKind(config);\n\t\tif (kind === ProblemMatcherKind.Unknown) {\n\t\t\tconst error = nls.localize(\n\t\t\t\t'ConfigurationParser.unknownMatcherKind',\n\t\t\t\t'Warning: the defined problem matcher is unknown. Supported types are string | ProblemMatcher | Array<string | ProblemMatcher>.\\n{0}\\n',\n\t\t\t\tJSON.stringify(config, null, 4));\n\t\t\tcontext.problemReporter.warn(error);\n\t\t} else if (kind === ProblemMatcherKind.String || kind === ProblemMatcherKind.ProblemMatcher) {\n\t\t\taddResult(resolveProblemMatcher(config as ProblemMatcherConfig.ProblemMatcher, context));\n\t\t} else if (kind === ProblemMatcherKind.Array) {\n\t\t\tconst problemMatchers = <(string | ProblemMatcherConfig.ProblemMatcher)[]>config;\n\t\t\tproblemMatchers.forEach(problemMatcher => {\n\t\t\t\taddResult(resolveProblemMatcher(problemMatcher, context));\n\t\t\t});\n\t\t}\n\t\treturn { value: result, errors };\n\t}\n\n\tfunction getProblemMatcherKind(this: void, value: ProblemMatcherConfig.ProblemMatcherType): ProblemMatcherKind {\n\t\tif (Types.isString(value)) {\n\t\t\treturn ProblemMatcherKind.String;\n\t\t} else if (Array.isArray(value)) {\n\t\t\treturn ProblemMatcherKind.Array;\n\t\t} else if (!Types.isUndefined(value)) {\n\t\t\treturn ProblemMatcherKind.ProblemMatcher;\n\t\t} else {\n\t\t\treturn ProblemMatcherKind.Unknown;\n\t\t}\n\t}\n\n\tfunction resolveProblemMatcher(this: void, value: string | ProblemMatcherConfig.ProblemMatcher, context: IParseContext): TaskConfigurationValueWithErrors<ProblemMatcher> {\n\t\tif (Types.isString(value)) {\n\t\t\tlet variableName = <string>value;\n\t\t\tif (variableName.length > 1 && variableName[0] === '$') {\n\t\t\t\tvariableName = variableName.substring(1);\n\t\t\t\tconst global = ProblemMatcherRegistry.get(variableName);\n\t\t\t\tif (global) {\n\t\t\t\t\treturn { value: Objects.deepClone(global) };\n\t\t\t\t}\n\t\t\t\tlet localProblemMatcher: ProblemMatcher & Partial<INamedProblemMatcher> = context.namedProblemMatchers[variableName];\n\t\t\t\tif (localProblemMatcher) {\n\t\t\t\t\tlocalProblemMatcher = Objects.deepClone(localProblemMatcher);\n\t\t\t\t\t// remove the name\n\t\t\t\t\tdelete localProblemMatcher.name;\n\t\t\t\t\treturn { value: localProblemMatcher };\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn { errors: [nls.localize('ConfigurationParser.invalidVariableReference', 'Error: Invalid problemMatcher reference: {0}\\n', value)] };\n\t\t} else {\n\t\t\tconst json = <ProblemMatcherConfig.ProblemMatcher>value;\n\t\t\treturn { value: new ProblemMatcherParser(context.problemReporter).parse(json) };\n\t\t}\n\t}\n}\n\nconst partialSource: Partial<Tasks.TaskSource> = {\n\tlabel: 'Workspace',\n\tconfig: undefined\n};\n\nexport namespace GroupKind {\n\texport function from(this: void, external: string | IGroupKind | undefined): Tasks.TaskGroup | undefined {\n\t\tif (external === undefined) {\n\t\t\treturn undefined;\n\t\t} else if (Types.isString(external) && Tasks.TaskGroup.is(external)) {\n\t\t\treturn { _id: external, isDefault: false };\n\t\t} else if (Types.isString(external.kind) && Tasks.TaskGroup.is(external.kind)) {\n\t\t\tconst group: string = external.kind;\n\t\t\tconst isDefault: boolean | string = Types.isUndefined(external.isDefault) ? false : external.isDefault;\n\n\t\t\treturn { _id: group, isDefault };\n\t\t}\n\t\treturn undefined;\n\t}\n\n\texport function to(group: Tasks.TaskGroup | string): IGroupKind | string {\n\t\tif (Types.isString(group)) {\n\t\t\treturn group;\n\t\t} else if (!group.isDefault) {\n\t\t\treturn group._id;\n\t\t}\n\t\treturn {\n\t\t\tkind: group._id,\n\t\t\tisDefault: group.isDefault,\n\t\t};\n\t}\n}\n\nnamespace TaskDependency {\n\tfunction uriFromSource(context: IParseContext, source: TaskConfigSource): URI | string {\n\t\tswitch (source) {\n\t\t\tcase TaskConfigSource.User: return Tasks.USER_TASKS_GROUP_KEY;\n\t\t\tcase TaskConfigSource.TasksJson: return context.workspaceFolder.uri;\n\t\t\tdefault: return context.workspace && context.workspace.configuration ? context.workspace.configuration : context.workspaceFolder.uri;\n\t\t}\n\t}\n\n\texport function from(this: void, external: string | ITaskIdentifier, context: IParseContext, source: TaskConfigSource): Tasks.ITaskDependency | undefined {\n\t\tif (Types.isString(external)) {\n\t\t\treturn { uri: uriFromSource(context, source), task: external };\n\t\t} else if (ITaskIdentifier.is(external)) {\n\t\t\treturn {\n\t\t\t\turi: uriFromSource(context, source),\n\t\t\t\ttask: Tasks.TaskDefinition.createTaskIdentifier(external as Tasks.ITaskIdentifier, context.problemReporter)\n\t\t\t};\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n}\n\nnamespace DependsOrder {\n\texport function from(order: string | undefined): Tasks.DependsOrder {\n\t\tswitch (order) {\n\t\t\tcase Tasks.DependsOrder.sequence:\n\t\t\t\treturn Tasks.DependsOrder.sequence;\n\t\t\tcase Tasks.DependsOrder.parallel:\n\t\t\tdefault:\n\t\t\t\treturn Tasks.DependsOrder.parallel;\n\t\t}\n\t}\n}\n\nnamespace ConfigurationProperties {\n\n\tconst properties: IMetaData<Tasks.IConfigurationProperties, any>[] = [\n\t\t{ property: 'name' },\n\t\t{ property: 'identifier' },\n\t\t{ property: 'group' },\n\t\t{ property: 'isBackground' },\n\t\t{ property: 'promptOnClose' },\n\t\t{ property: 'dependsOn' },\n\t\t{ property: 'presentation', type: CommandConfiguration.PresentationOptions },\n\t\t{ property: 'problemMatchers' },\n\t\t{ property: 'options' },\n\t\t{ property: 'icon' },\n\t\t{ property: 'hide' }\n\t];\n\n\texport function from(this: void, external: IConfigurationProperties & { [key: string]: any }, context: IParseContext,\n\t\tincludeCommandOptions: boolean, source: TaskConfigSource, properties?: IJSONSchemaMap): TaskConfigurationValueWithErrors<Tasks.IConfigurationProperties> {\n\t\tif (!external) {\n\t\t\treturn {};\n\t\t}\n\t\tconst result: Tasks.IConfigurationProperties & { [key: string]: any } = {};\n\n\t\tif (properties) {\n\t\t\tfor (const propertyName of Object.keys(properties)) {\n\t\t\t\tif (external[propertyName] !== undefined) {\n\t\t\t\t\tresult[propertyName] = Objects.deepClone(external[propertyName]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (Types.isString(external.taskName)) {\n\t\t\tresult.name = external.taskName;\n\t\t}\n\t\tif (Types.isString(external.label) && context.schemaVersion === Tasks.JsonSchemaVersion.V2_0_0) {\n\t\t\tresult.name = external.label;\n\t\t}\n\t\tif (Types.isString(external.identifier)) {\n\t\t\tresult.identifier = external.identifier;\n\t\t}\n\t\tresult.icon = external.icon;\n\t\tresult.hide = external.hide;\n\t\tif (external.isBackground !== undefined) {\n\t\t\tresult.isBackground = !!external.isBackground;\n\t\t}\n\t\tif (external.promptOnClose !== undefined) {\n\t\t\tresult.promptOnClose = !!external.promptOnClose;\n\t\t}\n\t\tresult.group = GroupKind.from(external.group);\n\t\tif (external.dependsOn !== undefined) {\n\t\t\tif (Array.isArray(external.dependsOn)) {\n\t\t\t\tresult.dependsOn = external.dependsOn.reduce((dependencies: Tasks.ITaskDependency[], item): Tasks.ITaskDependency[] => {\n\t\t\t\t\tconst dependency = TaskDependency.from(item, context, source);\n\t\t\t\t\tif (dependency) {\n\t\t\t\t\t\tdependencies.push(dependency);\n\t\t\t\t\t}\n\t\t\t\t\treturn dependencies;\n\t\t\t\t}, []);\n\t\t\t} else {\n\t\t\t\tconst dependsOnValue = TaskDependency.from(external.dependsOn, context, source);\n\t\t\t\tresult.dependsOn = dependsOnValue ? [dependsOnValue] : undefined;\n\t\t\t}\n\t\t}\n\t\tresult.dependsOrder = DependsOrder.from(external.dependsOrder);\n\t\tif (includeCommandOptions && (external.presentation !== undefined || (external as ILegacyCommandProperties).terminal !== undefined)) {\n\t\t\tresult.presentation = CommandConfiguration.PresentationOptions.from(external, context);\n\t\t}\n\t\tif (includeCommandOptions && (external.options !== undefined)) {\n\t\t\tresult.options = CommandOptions.from(external.options, context);\n\t\t}\n\t\tconst configProblemMatcher = ProblemMatcherConverter.fromWithOsConfig(external, context);\n\t\tif (configProblemMatcher.value !== undefined) {\n\t\t\tresult.problemMatchers = configProblemMatcher.value;\n\t\t}\n\t\tif (external.detail) {\n\t\t\tresult.detail = external.detail;\n\t\t}\n\t\treturn isEmpty(result) ? {} : { value: result, errors: configProblemMatcher.errors };\n\t}\n\n\texport function isEmpty(this: void, value: Tasks.IConfigurationProperties): boolean {\n\t\treturn _isEmpty(value, properties);\n\t}\n}\n\nnamespace ConfiguringTask {\n\n\tconst grunt = 'grunt.';\n\tconst jake = 'jake.';\n\tconst gulp = 'gulp.';\n\tconst npm = 'vscode.npm.';\n\tconst typescript = 'vscode.typescript.';\n\n\tinterface ICustomizeShape {\n\t\tcustomize: string;\n\t}\n\n\texport function from(this: void, external: IConfiguringTask, context: IParseContext, index: number, source: TaskConfigSource, registry?: Partial<ITaskDefinitionRegistry>): Tasks.ConfiguringTask | undefined {\n\t\tif (!external) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst type = external.type;\n\t\tconst customize = (external as ICustomizeShape).customize;\n\t\tif (!type && !customize) {\n\t\t\tcontext.problemReporter.error(nls.localize('ConfigurationParser.noTaskType', 'Error: tasks configuration must have a type property. The configuration will be ignored.\\n{0}\\n', JSON.stringify(external, null, 4)));\n\t\t\treturn undefined;\n\t\t}\n\t\tconst typeDeclaration = type ? registry?.get?.(type) || TaskDefinitionRegistry.get(type) : undefined;\n\t\tif (!typeDeclaration) {\n\t\t\tconst message = nls.localize('ConfigurationParser.noTypeDefinition', 'Error: there is no registered task type \\'{0}\\'. Did you miss installing an extension that provides a corresponding task provider?', type);\n\t\t\tcontext.problemReporter.error(message);\n\t\t\treturn undefined;\n\t\t}\n\t\tlet identifier: Tasks.ITaskIdentifier | undefined;\n\t\tif (Types.isString(customize)) {\n\t\t\tif (customize.indexOf(grunt) === 0) {\n\t\t\t\tidentifier = { type: 'grunt', task: customize.substring(grunt.length) };\n\t\t\t} else if (customize.indexOf(jake) === 0) {\n\t\t\t\tidentifier = { type: 'jake', task: customize.substring(jake.length) };\n\t\t\t} else if (customize.indexOf(gulp) === 0) {\n\t\t\t\tidentifier = { type: 'gulp', task: customize.substring(gulp.length) };\n\t\t\t} else if (customize.indexOf(npm) === 0) {\n\t\t\t\tidentifier = { type: 'npm', script: customize.substring(npm.length + 4) };\n\t\t\t} else if (customize.indexOf(typescript) === 0) {\n\t\t\t\tidentifier = { type: 'typescript', tsconfig: customize.substring(typescript.length + 6) };\n\t\t\t}\n\t\t} else {\n\t\t\tif (Types.isString(external.type)) {\n\t\t\t\tidentifier = external as Tasks.ITaskIdentifier;\n\t\t\t}\n\t\t}\n\t\tif (identifier === undefined) {\n\t\t\tcontext.problemReporter.error(nls.localize(\n\t\t\t\t'ConfigurationParser.missingType',\n\t\t\t\t'Error: the task configuration \\'{0}\\' is missing the required property \\'type\\'. The task configuration will be ignored.', JSON.stringify(external, undefined, 0)\n\t\t\t));\n\t\t\treturn undefined;\n\t\t}\n\t\tconst taskIdentifier: Tasks.KeyedTaskIdentifier | undefined = Tasks.TaskDefinition.createTaskIdentifier(identifier, context.problemReporter);\n\t\tif (taskIdentifier === undefined) {\n\t\t\tcontext.problemReporter.error(nls.localize(\n\t\t\t\t'ConfigurationParser.incorrectType',\n\t\t\t\t'Error: the task configuration \\'{0}\\' is using an unknown type. The task configuration will be ignored.', JSON.stringify(external, undefined, 0)\n\t\t\t));\n\t\t\treturn undefined;\n\t\t}\n\t\tconst configElement: Tasks.ITaskSourceConfigElement = {\n\t\t\tworkspaceFolder: context.workspaceFolder,\n\t\t\tfile: '.vscode/tasks.json',\n\t\t\tindex,\n\t\t\telement: external\n\t\t};\n\t\tlet taskSource: Tasks.FileBasedTaskSource;\n\t\tswitch (source) {\n\t\t\tcase TaskConfigSource.User: {\n\t\t\t\ttaskSource = Object.assign({} as Tasks.IUserTaskSource, partialSource, { kind: Tasks.TaskSourceKind.User, config: configElement });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase TaskConfigSource.WorkspaceFile: {\n\t\t\t\ttaskSource = Object.assign({} as Tasks.WorkspaceFileTaskSource, partialSource, { kind: Tasks.TaskSourceKind.WorkspaceFile, config: configElement });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\ttaskSource = Object.assign({} as Tasks.IWorkspaceTaskSource, partialSource, { kind: Tasks.TaskSourceKind.Workspace, config: configElement });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst result: Tasks.ConfiguringTask = new Tasks.ConfiguringTask(\n\t\t\t`${typeDeclaration.extensionId}.${taskIdentifier._key}`,\n\t\t\ttaskSource,\n\t\t\tundefined,\n\t\t\ttype,\n\t\t\ttaskIdentifier,\n\t\t\tRunOptions.fromConfiguration(external.runOptions),\n\t\t\t{ hide: external.hide }\n\t\t);\n\t\tconst configuration = ConfigurationProperties.from(external, context, true, source, typeDeclaration.properties);\n\t\tresult.addTaskLoadMessages(configuration.errors);\n\t\tif (configuration.value) {\n\t\t\tresult.configurationProperties = Object.assign(result.configurationProperties, configuration.value);\n\t\t\tif (result.configurationProperties.name) {\n\t\t\t\tresult._label = result.configurationProperties.name;\n\t\t\t} else {\n\t\t\t\tlet label = result.configures.type;\n\t\t\t\tif (typeDeclaration.required && typeDeclaration.required.length > 0) {\n\t\t\t\t\tfor (const required of typeDeclaration.required) {\n\t\t\t\t\t\tconst value = result.configures[required];\n\t\t\t\t\t\tif (value) {\n\t\t\t\t\t\t\tlabel = label + ': ' + value;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult._label = label;\n\t\t\t}\n\t\t\tif (!result.configurationProperties.identifier) {\n\t\t\t\tresult.configurationProperties.identifier = taskIdentifier._key;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\nnamespace CustomTask {\n\texport function from(this: void, external: ICustomTask, context: IParseContext, index: number, source: TaskConfigSource): Tasks.CustomTask | undefined {\n\t\tif (!external) {\n\t\t\treturn undefined;\n\t\t}\n\t\tlet type = external.type;\n\t\tif (type === undefined || type === null) {\n\t\t\ttype = Tasks.CUSTOMIZED_TASK_TYPE;\n\t\t}\n\t\tif (type !== Tasks.CUSTOMIZED_TASK_TYPE && type !== 'shell' && type !== 'process') {\n\t\t\tcontext.problemReporter.error(nls.localize('ConfigurationParser.notCustom', 'Error: tasks is not declared as a custom task. The configuration will be ignored.\\n{0}\\n', JSON.stringify(external, null, 4)));\n\t\t\treturn undefined;\n\t\t}\n\t\tlet taskName = external.taskName;\n\t\tif (Types.isString(external.label) && context.schemaVersion === Tasks.JsonSchemaVersion.V2_0_0) {\n\t\t\ttaskName = external.label;\n\t\t}\n\t\tif (!taskName) {\n\t\t\tcontext.problemReporter.error(nls.localize('ConfigurationParser.noTaskName', 'Error: a task must provide a label property. The task will be ignored.\\n{0}\\n', JSON.stringify(external, null, 4)));\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet taskSource: Tasks.FileBasedTaskSource;\n\t\tswitch (source) {\n\t\t\tcase TaskConfigSource.User: {\n\t\t\t\ttaskSource = Object.assign({} as Tasks.IUserTaskSource, partialSource, { kind: Tasks.TaskSourceKind.User, config: { index, element: external, file: '.vscode/tasks.json', workspaceFolder: context.workspaceFolder } });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase TaskConfigSource.WorkspaceFile: {\n\t\t\t\ttaskSource = Object.assign({} as Tasks.WorkspaceFileTaskSource, partialSource, { kind: Tasks.TaskSourceKind.WorkspaceFile, config: { index, element: external, file: '.vscode/tasks.json', workspaceFolder: context.workspaceFolder, workspace: context.workspace } });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\ttaskSource = Object.assign({} as Tasks.IWorkspaceTaskSource, partialSource, { kind: Tasks.TaskSourceKind.Workspace, config: { index, element: external, file: '.vscode/tasks.json', workspaceFolder: context.workspaceFolder } });\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tconst result: Tasks.CustomTask = new Tasks.CustomTask(\n\t\t\tcontext.uuidMap.getUUID(taskName),\n\t\t\ttaskSource,\n\t\t\ttaskName,\n\t\t\tTasks.CUSTOMIZED_TASK_TYPE,\n\t\t\tundefined,\n\t\t\tfalse,\n\t\t\tRunOptions.fromConfiguration(external.runOptions),\n\t\t\t{\n\t\t\t\tname: taskName,\n\t\t\t\tidentifier: taskName,\n\t\t\t}\n\t\t);\n\t\tconst configuration = ConfigurationProperties.from(external, context, false, source);\n\t\tresult.addTaskLoadMessages(configuration.errors);\n\t\tif (configuration.value) {\n\t\t\tresult.configurationProperties = Object.assign(result.configurationProperties, configuration.value);\n\t\t}\n\t\tconst supportLegacy: boolean = true; //context.schemaVersion === Tasks.JsonSchemaVersion.V2_0_0;\n\t\tif (supportLegacy) {\n\t\t\tconst legacy: ILegacyTaskProperties = external as ILegacyTaskProperties;\n\t\t\tif (result.configurationProperties.isBackground === undefined && legacy.isWatching !== undefined) {\n\t\t\t\tresult.configurationProperties.isBackground = !!legacy.isWatching;\n\t\t\t}\n\t\t\tif (result.configurationProperties.group === undefined) {\n\t\t\t\tif (legacy.isBuildCommand === true) {\n\t\t\t\t\tresult.configurationProperties.group = Tasks.TaskGroup.Build;\n\t\t\t\t} else if (legacy.isTestCommand === true) {\n\t\t\t\t\tresult.configurationProperties.group = Tasks.TaskGroup.Test;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst command: Tasks.ICommandConfiguration = CommandConfiguration.from(external, context)!;\n\t\tif (command) {\n\t\t\tresult.command = command;\n\t\t}\n\t\tif (external.command !== undefined) {\n\t\t\t// if the task has its own command then we suppress the\n\t\t\t// task name by default.\n\t\t\tcommand.suppressTaskName = true;\n\t\t}\n\t\treturn result;\n\t}\n\n\texport function fillGlobals(task: Tasks.CustomTask, globals: IGlobals): void {\n\t\t// We only merge a command from a global definition if there is no dependsOn\n\t\t// or there is a dependsOn and a defined command.\n\t\tif (CommandConfiguration.hasCommand(task.command) || task.configurationProperties.dependsOn === undefined) {\n\t\t\ttask.command = CommandConfiguration.fillGlobals(task.command, globals.command, task.configurationProperties.name);\n\t\t}\n\t\tif (task.configurationProperties.problemMatchers === undefined && globals.problemMatcher !== undefined) {\n\t\t\ttask.configurationProperties.problemMatchers = Objects.deepClone(globals.problemMatcher);\n\t\t\ttask.hasDefinedMatchers = true;\n\t\t}\n\t\t// promptOnClose is inferred from isBackground if available\n\t\tif (task.configurationProperties.promptOnClose === undefined && task.configurationProperties.isBackground === undefined && globals.promptOnClose !== undefined) {\n\t\t\ttask.configurationProperties.promptOnClose = globals.promptOnClose;\n\t\t}\n\t}\n\n\texport function fillDefaults(task: Tasks.CustomTask, context: IParseContext): void {\n\t\tCommandConfiguration.fillDefaults(task.command, context);\n\t\tif (task.configurationProperties.promptOnClose === undefined) {\n\t\t\ttask.configurationProperties.promptOnClose = task.configurationProperties.isBackground !== undefined ? !task.configurationProperties.isBackground : true;\n\t\t}\n\t\tif (task.configurationProperties.isBackground === undefined) {\n\t\t\ttask.configurationProperties.isBackground = false;\n\t\t}\n\t\tif (task.configurationProperties.problemMatchers === undefined) {\n\t\t\ttask.configurationProperties.problemMatchers = EMPTY_ARRAY;\n\t\t}\n\t}\n\n\texport function createCustomTask(contributedTask: Tasks.ContributedTask, configuredProps: Tasks.ConfiguringTask | Tasks.CustomTask): Tasks.CustomTask {\n\t\tconst result: Tasks.CustomTask = new Tasks.CustomTask(\n\t\t\tconfiguredProps._id,\n\t\t\tObject.assign({}, configuredProps._source, { customizes: contributedTask.defines }),\n\t\t\tconfiguredProps.configurationProperties.name || contributedTask._label,\n\t\t\tTasks.CUSTOMIZED_TASK_TYPE,\n\t\t\tcontributedTask.command,\n\t\t\tfalse,\n\t\t\tcontributedTask.runOptions,\n\t\t\t{\n\t\t\t\tname: configuredProps.configurationProperties.name || contributedTask.configurationProperties.name,\n\t\t\t\tidentifier: configuredProps.configurationProperties.identifier || contributedTask.configurationProperties.identifier,\n\t\t\t\ticon: configuredProps.configurationProperties.icon,\n\t\t\t\thide: configuredProps.configurationProperties.hide\n\t\t\t},\n\n\t\t);\n\t\tresult.addTaskLoadMessages(configuredProps.taskLoadMessages);\n\t\tconst resultConfigProps: Tasks.IConfigurationProperties = result.configurationProperties;\n\n\t\tassignProperty(resultConfigProps, configuredProps.configurationProperties, 'group');\n\t\tassignProperty(resultConfigProps, configuredProps.configurationProperties, 'isBackground');\n\t\tassignProperty(resultConfigProps, configuredProps.configurationProperties, 'dependsOn');\n\t\tassignProperty(resultConfigProps, configuredProps.configurationProperties, 'problemMatchers');\n\t\tassignProperty(resultConfigProps, configuredProps.configurationProperties, 'promptOnClose');\n\t\tassignProperty(resultConfigProps, configuredProps.configurationProperties, 'detail');\n\t\tresult.command.presentation = CommandConfiguration.PresentationOptions.assignProperties(\n\t\t\tresult.command.presentation!, configuredProps.configurationProperties.presentation)!;\n\t\tresult.command.options = CommandOptions.assignProperties(result.command.options, configuredProps.configurationProperties.options);\n\t\tresult.runOptions = RunOptions.assignProperties(result.runOptions, configuredProps.runOptions);\n\n\t\tconst contributedConfigProps: Tasks.IConfigurationProperties = contributedTask.configurationProperties;\n\t\tfillProperty(resultConfigProps, contributedConfigProps, 'group');\n\t\tfillProperty(resultConfigProps, contributedConfigProps, 'isBackground');\n\t\tfillProperty(resultConfigProps, contributedConfigProps, 'dependsOn');\n\t\tfillProperty(resultConfigProps, contributedConfigProps, 'problemMatchers');\n\t\tfillProperty(resultConfigProps, contributedConfigProps, 'promptOnClose');\n\t\tfillProperty(resultConfigProps, contributedConfigProps, 'detail');\n\t\tresult.command.presentation = CommandConfiguration.PresentationOptions.fillProperties(\n\t\t\tresult.command.presentation!, contributedConfigProps.presentation)!;\n\t\tresult.command.options = CommandOptions.fillProperties(result.command.options, contributedConfigProps.options);\n\t\tresult.runOptions = RunOptions.fillProperties(result.runOptions, contributedTask.runOptions);\n\n\t\tif (contributedTask.hasDefinedMatchers === true) {\n\t\t\tresult.hasDefinedMatchers = true;\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nexport interface ITaskParseResult {\n\tcustom: Tasks.CustomTask[];\n\tconfigured: Tasks.ConfiguringTask[];\n}\n\nexport namespace TaskParser {\n\n\tfunction isCustomTask(value: ICustomTask | IConfiguringTask): value is ICustomTask {\n\t\tconst type = value.type;\n\t\tconst customize = (value as any).customize;\n\t\treturn customize === undefined && (type === undefined || type === null || type === Tasks.CUSTOMIZED_TASK_TYPE || type === 'shell' || type === 'process');\n\t}\n\n\tconst builtinTypeContextMap: IStringDictionary<RawContextKey<boolean>> = {\n\t\tshell: ShellExecutionSupportedContext,\n\t\tprocess: ProcessExecutionSupportedContext\n\t};\n\n\texport function from(this: void, externals: Array<ICustomTask | IConfiguringTask> | undefined, globals: IGlobals, context: IParseContext, source: TaskConfigSource, registry?: Partial<ITaskDefinitionRegistry>): ITaskParseResult {\n\t\tconst result: ITaskParseResult = { custom: [], configured: [] };\n\t\tif (!externals) {\n\t\t\treturn result;\n\t\t}\n\t\tconst defaultBuildTask: { task: Tasks.Task | undefined; rank: number } = { task: undefined, rank: -1 };\n\t\tconst defaultTestTask: { task: Tasks.Task | undefined; rank: number } = { task: undefined, rank: -1 };\n\t\tconst schema2_0_0: boolean = context.schemaVersion === Tasks.JsonSchemaVersion.V2_0_0;\n\t\tconst baseLoadIssues = Objects.deepClone(context.taskLoadIssues);\n\t\tfor (let index = 0; index < externals.length; index++) {\n\t\t\tconst external = externals[index];\n\t\t\tconst definition = external.type ? registry?.get?.(external.type) || TaskDefinitionRegistry.get(external.type) : undefined;\n\t\t\tlet typeNotSupported: boolean = false;\n\t\t\tif (definition && definition.when && !context.contextKeyService.contextMatchesRules(definition.when)) {\n\t\t\t\ttypeNotSupported = true;\n\t\t\t} else if (!definition && external.type) {\n\t\t\t\tfor (const key of Object.keys(builtinTypeContextMap)) {\n\t\t\t\t\tif (external.type === key) {\n\t\t\t\t\t\ttypeNotSupported = !ShellExecutionSupportedContext.evaluate(context.contextKeyService.getContext(null));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeNotSupported) {\n\t\t\t\tcontext.problemReporter.info(nls.localize(\n\t\t\t\t\t'taskConfiguration.providerUnavailable', 'Warning: {0} tasks are unavailable in the current environment.\\n',\n\t\t\t\t\texternal.type\n\t\t\t\t));\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (isCustomTask(external)) {\n\t\t\t\tconst customTask = CustomTask.from(external, context, index, source);\n\t\t\t\tif (customTask) {\n\t\t\t\t\tCustomTask.fillGlobals(customTask, globals);\n\t\t\t\t\tCustomTask.fillDefaults(customTask, context);\n\t\t\t\t\tif (schema2_0_0) {\n\t\t\t\t\t\tif ((customTask.command === undefined || customTask.command.name === undefined) && (customTask.configurationProperties.dependsOn === undefined || customTask.configurationProperties.dependsOn.length === 0)) {\n\t\t\t\t\t\t\tcontext.problemReporter.error(nls.localize(\n\t\t\t\t\t\t\t\t'taskConfiguration.noCommandOrDependsOn', 'Error: the task \\'{0}\\' neither specifies a command nor a dependsOn property. The task will be ignored. Its definition is:\\n{1}',\n\t\t\t\t\t\t\t\tcustomTask.configurationProperties.name, JSON.stringify(external, undefined, 4)\n\t\t\t\t\t\t\t));\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (customTask.command === undefined || customTask.command.name === undefined) {\n\t\t\t\t\t\t\tcontext.problemReporter.warn(nls.localize(\n\t\t\t\t\t\t\t\t'taskConfiguration.noCommand', 'Error: the task \\'{0}\\' doesn\\'t define a command. The task will be ignored. Its definition is:\\n{1}',\n\t\t\t\t\t\t\t\tcustomTask.configurationProperties.name, JSON.stringify(external, undefined, 4)\n\t\t\t\t\t\t\t));\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (customTask.configurationProperties.group === Tasks.TaskGroup.Build && defaultBuildTask.rank < 2) {\n\t\t\t\t\t\tdefaultBuildTask.task = customTask;\n\t\t\t\t\t\tdefaultBuildTask.rank = 2;\n\t\t\t\t\t} else if (customTask.configurationProperties.group === Tasks.TaskGroup.Test && defaultTestTask.rank < 2) {\n\t\t\t\t\t\tdefaultTestTask.task = customTask;\n\t\t\t\t\t\tdefaultTestTask.rank = 2;\n\t\t\t\t\t} else if (customTask.configurationProperties.name === 'build' && defaultBuildTask.rank < 1) {\n\t\t\t\t\t\tdefaultBuildTask.task = customTask;\n\t\t\t\t\t\tdefaultBuildTask.rank = 1;\n\t\t\t\t\t} else if (customTask.configurationProperties.name === 'test' && defaultTestTask.rank < 1) {\n\t\t\t\t\t\tdefaultTestTask.task = customTask;\n\t\t\t\t\t\tdefaultTestTask.rank = 1;\n\t\t\t\t\t}\n\t\t\t\t\tcustomTask.addTaskLoadMessages(context.taskLoadIssues);\n\t\t\t\t\tresult.custom.push(customTask);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst configuredTask = ConfiguringTask.from(external, context, index, source, registry);\n\t\t\t\tif (configuredTask) {\n\t\t\t\t\tconfiguredTask.addTaskLoadMessages(context.taskLoadIssues);\n\t\t\t\t\tresult.configured.push(configuredTask);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcontext.taskLoadIssues = Objects.deepClone(baseLoadIssues);\n\t\t}\n\t\t// There is some special logic for tasks with the labels \"build\" and \"test\".\n\t\t// Even if they are not marked as a task group Build or Test, we automagically group them as such.\n\t\t// However, if they are already grouped as Build or Test, we don't need to add this grouping.\n\t\tconst defaultBuildGroupName = Types.isString(defaultBuildTask.task?.configurationProperties.group) ? defaultBuildTask.task?.configurationProperties.group : defaultBuildTask.task?.configurationProperties.group?._id;\n\t\tconst defaultTestTaskGroupName = Types.isString(defaultTestTask.task?.configurationProperties.group) ? defaultTestTask.task?.configurationProperties.group : defaultTestTask.task?.configurationProperties.group?._id;\n\t\tif ((defaultBuildGroupName !== Tasks.TaskGroup.Build._id) && (defaultBuildTask.rank > -1) && (defaultBuildTask.rank < 2) && defaultBuildTask.task) {\n\t\t\tdefaultBuildTask.task.configurationProperties.group = Tasks.TaskGroup.Build;\n\t\t} else if ((defaultTestTaskGroupName !== Tasks.TaskGroup.Test._id) && (defaultTestTask.rank > -1) && (defaultTestTask.rank < 2) && defaultTestTask.task) {\n\t\t\tdefaultTestTask.task.configurationProperties.group = Tasks.TaskGroup.Test;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\texport function assignTasks(target: Tasks.CustomTask[], source: Tasks.CustomTask[]): Tasks.CustomTask[] {\n\t\tif (source === undefined || source.length === 0) {\n\t\t\treturn target;\n\t\t}\n\t\tif (target === undefined || target.length === 0) {\n\t\t\treturn source;\n\t\t}\n\n\t\tif (source) {\n\t\t\t// Tasks are keyed by ID but we need to merge by name\n\t\t\tconst map: IStringDictionary<Tasks.CustomTask> = Object.create(null);\n\t\t\ttarget.forEach((task) => {\n\t\t\t\tmap[task.configurationProperties.name!] = task;\n\t\t\t});\n\n\t\t\tsource.forEach((task) => {\n\t\t\t\tmap[task.configurationProperties.name!] = task;\n\t\t\t});\n\t\t\tconst newTarget: Tasks.CustomTask[] = [];\n\t\t\ttarget.forEach(task => {\n\t\t\t\tnewTarget.push(map[task.configurationProperties.name!]);\n\t\t\t\tdelete map[task.configurationProperties.name!];\n\t\t\t});\n\t\t\tObject.keys(map).forEach(key => newTarget.push(map[key]));\n\t\t\ttarget = newTarget;\n\t\t}\n\t\treturn target;\n\t}\n}\n\nexport interface IGlobals {\n\tcommand?: Tasks.ICommandConfiguration;\n\tproblemMatcher?: ProblemMatcher[];\n\tpromptOnClose?: boolean;\n\tsuppressTaskName?: boolean;\n}\n\nnamespace Globals {\n\n\texport function from(config: IExternalTaskRunnerConfiguration, context: IParseContext): IGlobals {\n\t\tlet result = fromBase(config, context);\n\t\tlet osGlobals: IGlobals | undefined = undefined;\n\t\tif (config.windows && context.platform === Platform.Windows) {\n\t\t\tosGlobals = fromBase(config.windows, context);\n\t\t} else if (config.osx && context.platform === Platform.Mac) {\n\t\t\tosGlobals = fromBase(config.osx, context);\n\t\t} else if (config.linux && context.platform === Platform.Linux) {\n\t\t\tosGlobals = fromBase(config.linux, context);\n\t\t}\n\t\tif (osGlobals) {\n\t\t\tresult = Globals.assignProperties(result, osGlobals);\n\t\t}\n\t\tconst command = CommandConfiguration.from(config, context);\n\t\tif (command) {\n\t\t\tresult.command = command;\n\t\t}\n\t\tGlobals.fillDefaults(result, context);\n\t\tGlobals.freeze(result);\n\t\treturn result;\n\t}\n\n\texport function fromBase(this: void, config: IBaseTaskRunnerConfiguration, context: IParseContext): IGlobals {\n\t\tconst result: IGlobals = {};\n\t\tif (config.suppressTaskName !== undefined) {\n\t\t\tresult.suppressTaskName = !!config.suppressTaskName;\n\t\t}\n\t\tif (config.promptOnClose !== undefined) {\n\t\t\tresult.promptOnClose = !!config.promptOnClose;\n\t\t}\n\t\tif (config.problemMatcher) {\n\t\t\tresult.problemMatcher = ProblemMatcherConverter.from(config.problemMatcher, context).value;\n\t\t}\n\t\treturn result;\n\t}\n\n\texport function isEmpty(value: IGlobals): boolean {\n\t\treturn !value || value.command === undefined && value.promptOnClose === undefined && value.suppressTaskName === undefined;\n\t}\n\n\texport function assignProperties(target: IGlobals, source: IGlobals): IGlobals {\n\t\tif (isEmpty(source)) {\n\t\t\treturn target;\n\t\t}\n\t\tif (isEmpty(target)) {\n\t\t\treturn source;\n\t\t}\n\t\tassignProperty(target, source, 'promptOnClose');\n\t\tassignProperty(target, source, 'suppressTaskName');\n\t\treturn target;\n\t}\n\n\texport function fillDefaults(value: IGlobals, context: IParseContext): void {\n\t\tif (!value) {\n\t\t\treturn;\n\t\t}\n\t\tCommandConfiguration.fillDefaults(value.command, context);\n\t\tif (value.suppressTaskName === undefined) {\n\t\t\tvalue.suppressTaskName = (context.schemaVersion === Tasks.JsonSchemaVersion.V2_0_0);\n\t\t}\n\t\tif (value.promptOnClose === undefined) {\n\t\t\tvalue.promptOnClose = true;\n\t\t}\n\t}\n\n\texport function freeze(value: IGlobals): void {\n\t\tObject.freeze(value);\n\t\tif (value.command) {\n\t\t\tCommandConfiguration.freeze(value.command);\n\t\t}\n\t}\n}\n\nexport namespace ExecutionEngine {\n\n\texport function from(config: IExternalTaskRunnerConfiguration): Tasks.ExecutionEngine {\n\t\tconst runner = config.runner || config._runner;\n\t\tlet result: Tasks.ExecutionEngine | undefined;\n\t\tif (runner) {\n\t\t\tswitch (runner) {\n\t\t\t\tcase 'terminal':\n\t\t\t\t\tresult = Tasks.ExecutionEngine.Terminal;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'process':\n\t\t\t\t\tresult = Tasks.ExecutionEngine.Process;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tconst schemaVersion = JsonSchemaVersion.from(config);\n\t\tif (schemaVersion === Tasks.JsonSchemaVersion.V0_1_0) {\n\t\t\treturn result || Tasks.ExecutionEngine.Process;\n\t\t} else if (schemaVersion === Tasks.JsonSchemaVersion.V2_0_0) {\n\t\t\treturn Tasks.ExecutionEngine.Terminal;\n\t\t} else {\n\t\t\tthrow new Error('Shouldn\\'t happen.');\n\t\t}\n\t}\n}\n\nexport namespace JsonSchemaVersion {\n\n\tconst _default: Tasks.JsonSchemaVersion = Tasks.JsonSchemaVersion.V2_0_0;\n\n\texport function from(config: IExternalTaskRunnerConfiguration): Tasks.JsonSchemaVersion {\n\t\tconst version = config.version;\n\t\tif (!version) {\n\t\t\treturn _default;\n\t\t}\n\t\tswitch (version) {\n\t\t\tcase '0.1.0':\n\t\t\t\treturn Tasks.JsonSchemaVersion.V0_1_0;\n\t\t\tcase '2.0.0':\n\t\t\t\treturn Tasks.JsonSchemaVersion.V2_0_0;\n\t\t\tdefault:\n\t\t\t\treturn _default;\n\t\t}\n\t}\n}\n\nexport interface IParseResult {\n\tvalidationStatus: ValidationStatus;\n\tcustom: Tasks.CustomTask[];\n\tconfigured: Tasks.ConfiguringTask[];\n\tengine: Tasks.ExecutionEngine;\n}\n\nexport interface IProblemReporter extends IProblemReporterBase {\n}\n\nexport class UUIDMap {\n\n\tprivate last: IStringDictionary<string | string[]> | undefined;\n\tprivate current: IStringDictionary<string | string[]>;\n\n\tconstructor(other?: UUIDMap) {\n\t\tthis.current = Object.create(null);\n\t\tif (other) {\n\t\t\tfor (const key of Object.keys(other.current)) {\n\t\t\t\tconst value = other.current[key];\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tthis.current[key] = value.slice();\n\t\t\t\t} else {\n\t\t\t\t\tthis.current[key] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic start(): void {\n\t\tthis.last = this.current;\n\t\tthis.current = Object.create(null);\n\t}\n\n\tpublic getUUID(identifier: string): string {\n\t\tconst lastValue = this.last ? this.last[identifier] : undefined;\n\t\tlet result: string | undefined = undefined;\n\t\tif (lastValue !== undefined) {\n\t\t\tif (Array.isArray(lastValue)) {\n\t\t\t\tresult = lastValue.shift();\n\t\t\t\tif (lastValue.length === 0) {\n\t\t\t\t\tdelete this.last![identifier];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresult = lastValue;\n\t\t\t\tdelete this.last![identifier];\n\t\t\t}\n\t\t}\n\t\tif (result === undefined) {\n\t\t\tresult = UUID.generateUuid();\n\t\t}\n\t\tconst currentValue = this.current[identifier];\n\t\tif (currentValue === undefined) {\n\t\t\tthis.current[identifier] = result;\n\t\t} else {\n\t\t\tif (Array.isArray(currentValue)) {\n\t\t\t\tcurrentValue.push(result);\n\t\t\t} else {\n\t\t\t\tconst arrayValue: string[] = [currentValue];\n\t\t\t\tarrayValue.push(result);\n\t\t\t\tthis.current[identifier] = arrayValue;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic finish(): void {\n\t\tthis.last = undefined;\n\t}\n}\n\nexport enum TaskConfigSource {\n\tTasksJson,\n\tWorkspaceFile,\n\tUser\n}\n\nclass ConfigurationParser {\n\n\tprivate workspaceFolder: IWorkspaceFolder;\n\tprivate workspace: IWorkspace | undefined;\n\tprivate problemReporter: IProblemReporter;\n\tprivate uuidMap: UUIDMap;\n\tprivate platform: Platform;\n\n\tconstructor(workspaceFolder: IWorkspaceFolder, workspace: IWorkspace | undefined, platform: Platform, problemReporter: IProblemReporter, uuidMap: UUIDMap) {\n\t\tthis.workspaceFolder = workspaceFolder;\n\t\tthis.workspace = workspace;\n\t\tthis.platform = platform;\n\t\tthis.problemReporter = problemReporter;\n\t\tthis.uuidMap = uuidMap;\n\t}\n\n\tpublic run(fileConfig: IExternalTaskRunnerConfiguration, source: TaskConfigSource, contextKeyService: IContextKeyService): IParseResult {\n\t\tconst engine = ExecutionEngine.from(fileConfig);\n\t\tconst schemaVersion = JsonSchemaVersion.from(fileConfig);\n\t\tconst context: IParseContext = {\n\t\t\tworkspaceFolder: this.workspaceFolder,\n\t\t\tworkspace: this.workspace,\n\t\t\tproblemReporter: this.problemReporter,\n\t\t\tuuidMap: this.uuidMap,\n\t\t\tnamedProblemMatchers: {},\n\t\t\tengine,\n\t\t\tschemaVersion,\n\t\t\tplatform: this.platform,\n\t\t\ttaskLoadIssues: [],\n\t\t\tcontextKeyService\n\t\t};\n\t\tconst taskParseResult = this.createTaskRunnerConfiguration(fileConfig, context, source);\n\t\treturn {\n\t\t\tvalidationStatus: this.problemReporter.status,\n\t\t\tcustom: taskParseResult.custom,\n\t\t\tconfigured: taskParseResult.configured,\n\t\t\tengine\n\t\t};\n\t}\n\n\tprivate createTaskRunnerConfiguration(fileConfig: IExternalTaskRunnerConfiguration, context: IParseContext, source: TaskConfigSource): ITaskParseResult {\n\t\tconst globals = Globals.from(fileConfig, context);\n\t\tif (this.problemReporter.status.isFatal()) {\n\t\t\treturn { custom: [], configured: [] };\n\t\t}\n\t\tcontext.namedProblemMatchers = ProblemMatcherConverter.namedFrom(fileConfig.declares, context);\n\t\tlet globalTasks: Tasks.CustomTask[] | undefined = undefined;\n\t\tlet externalGlobalTasks: Array<IConfiguringTask | ICustomTask> | undefined = undefined;\n\t\tif (fileConfig.windows && context.platform === Platform.Windows) {\n\t\t\tglobalTasks = TaskParser.from(fileConfig.windows.tasks, globals, context, source).custom;\n\t\t\texternalGlobalTasks = fileConfig.windows.tasks;\n\t\t} else if (fileConfig.osx && context.platform === Platform.Mac) {\n\t\t\tglobalTasks = TaskParser.from(fileConfig.osx.tasks, globals, context, source).custom;\n\t\t\texternalGlobalTasks = fileConfig.osx.tasks;\n\t\t} else if (fileConfig.linux && context.platform === Platform.Linux) {\n\t\t\tglobalTasks = TaskParser.from(fileConfig.linux.tasks, globals, context, source).custom;\n\t\t\texternalGlobalTasks = fileConfig.linux.tasks;\n\t\t}\n\t\tif (context.schemaVersion === Tasks.JsonSchemaVersion.V2_0_0 && globalTasks && globalTasks.length > 0 && externalGlobalTasks && externalGlobalTasks.length > 0) {\n\t\t\tconst taskContent: string[] = [];\n\t\t\tfor (const task of externalGlobalTasks) {\n\t\t\t\ttaskContent.push(JSON.stringify(task, null, 4));\n\t\t\t}\n\t\t\tcontext.problemReporter.error(\n\t\t\t\tnls.localize(\n\t\t\t\t\t{ key: 'TaskParse.noOsSpecificGlobalTasks', comment: ['\\\"Task version 2.0.0\\\" refers to the 2.0.0 version of the task system. The \\\"version 2.0.0\\\" is not localizable as it is a json key and value.'] },\n\t\t\t\t\t'Task version 2.0.0 doesn\\'t support global OS specific tasks. Convert them to a task with a OS specific command. Affected tasks are:\\n{0}', taskContent.join('\\n'))\n\t\t\t);\n\t\t}\n\n\t\tlet result: ITaskParseResult = { custom: [], configured: [] };\n\t\tif (fileConfig.tasks) {\n\t\t\tresult = TaskParser.from(fileConfig.tasks, globals, context, source);\n\t\t}\n\t\tif (globalTasks) {\n\t\t\tresult.custom = TaskParser.assignTasks(result.custom, globalTasks);\n\t\t}\n\n\t\tif ((!result.custom || result.custom.length === 0) && (globals.command && globals.command.name)) {\n\t\t\tconst matchers: ProblemMatcher[] = ProblemMatcherConverter.from(fileConfig.problemMatcher, context).value ?? [];\n\t\t\tconst isBackground = fileConfig.isBackground ? !!fileConfig.isBackground : fileConfig.isWatching ? !!fileConfig.isWatching : undefined;\n\t\t\tconst name = Tasks.CommandString.value(globals.command.name);\n\t\t\tconst task: Tasks.CustomTask = new Tasks.CustomTask(\n\t\t\t\tcontext.uuidMap.getUUID(name),\n\t\t\t\tObject.assign({} as Tasks.IWorkspaceTaskSource, source, { config: { index: -1, element: fileConfig, workspaceFolder: context.workspaceFolder } }),\n\t\t\t\tname,\n\t\t\t\tTasks.CUSTOMIZED_TASK_TYPE,\n\t\t\t\t{\n\t\t\t\t\tname: undefined,\n\t\t\t\t\truntime: undefined,\n\t\t\t\t\tpresentation: undefined,\n\t\t\t\t\tsuppressTaskName: true\n\t\t\t\t},\n\t\t\t\tfalse,\n\t\t\t\t{ reevaluateOnRerun: true },\n\t\t\t\t{\n\t\t\t\t\tname: name,\n\t\t\t\t\tidentifier: name,\n\t\t\t\t\tgroup: Tasks.TaskGroup.Build,\n\t\t\t\t\tisBackground: isBackground,\n\t\t\t\t\tproblemMatchers: matchers\n\t\t\t\t}\n\t\t\t);\n\t\t\tconst taskGroupKind = GroupKind.from(fileConfig.group);\n\t\t\tif (taskGroupKind !== undefined) {\n\t\t\t\ttask.configurationProperties.group = taskGroupKind;\n\t\t\t} else if (fileConfig.group === 'none') {\n\t\t\t\ttask.configurationProperties.group = undefined;\n\t\t\t}\n\t\t\tCustomTask.fillGlobals(task, globals);\n\t\t\tCustomTask.fillDefaults(task, context);\n\t\t\tresult.custom = [task];\n\t\t}\n\t\tresult.custom = result.custom || [];\n\t\tresult.configured = result.configured || [];\n\t\treturn result;\n\t}\n}\n\nconst uuidMaps: Map<TaskConfigSource, Map<string, UUIDMap>> = new Map();\nconst recentUuidMaps: Map<TaskConfigSource, Map<string, UUIDMap>> = new Map();\nexport function parse(workspaceFolder: IWorkspaceFolder, workspace: IWorkspace | undefined, platform: Platform, configuration: IExternalTaskRunnerConfiguration, logger: IProblemReporter, source: TaskConfigSource, contextKeyService: IContextKeyService, isRecents: boolean = false): IParseResult {\n\tconst recentOrOtherMaps = isRecents ? recentUuidMaps : uuidMaps;\n\tlet selectedUuidMaps = recentOrOtherMaps.get(source);\n\tif (!selectedUuidMaps) {\n\t\trecentOrOtherMaps.set(source, new Map());\n\t\tselectedUuidMaps = recentOrOtherMaps.get(source)!;\n\t}\n\tlet uuidMap = selectedUuidMaps.get(workspaceFolder.uri.toString());\n\tif (!uuidMap) {\n\t\tuuidMap = new UUIDMap();\n\t\tselectedUuidMaps.set(workspaceFolder.uri.toString(), uuidMap);\n\t}\n\ttry {\n\t\tuuidMap.start();\n\t\treturn (new ConfigurationParser(workspaceFolder, workspace, platform, logger, uuidMap)).run(configuration, source, contextKeyService);\n\t} finally {\n\t\tuuidMap.finish();\n\t}\n}\n\n\n\nexport function createCustomTask(contributedTask: Tasks.ContributedTask, configuredProps: Tasks.ConfiguringTask | Tasks.CustomTask): Tasks.CustomTask {\n\treturn CustomTask.createCustomTask(contributedTask, configuredProps);\n}\n"]}