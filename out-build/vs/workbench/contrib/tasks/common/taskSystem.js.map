{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/tasks/common/taskSystem.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAWhG,IAAkB,UASjB;IATD,WAAkB,UAAU;QAC3B,6DAAa,CAAA;QACb,yDAAW,CAAA;QACX,yDAAW,CAAA;QACX,uDAAU,CAAA;QACV,6EAAqB,CAAA;QACrB,2DAAY,CAAA;QACZ,qEAAiB,CAAA;QACjB,2DAAY,CAAA;IACb,CAAC,EATiB,UAAU,0BAAV,UAAU,QAS3B;IAED,MAAa,IAAI;QAKhB,YAAY,QAAkB,EAAE,OAAe,EAAE,IAAgB;YAChE,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACvB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QAClB,CAAC;KACD;IAVD,oBAUC;IAED,IAAiB,QAAQ,CAIxB;IAJD,WAAiB,QAAQ;QACX,iBAAQ,GAAW,UAAU,CAAC;QAC9B,gBAAO,GAAW,SAAS,CAAC;QAC5B,kBAAS,GAAW,WAAW,CAAC;IAC9C,CAAC,EAJgB,QAAQ,wBAAR,QAAQ,QAIxB;IASD,IAAkB,eAGjB;IAHD,WAAkB,eAAe;QAChC,2DAAW,CAAA;QACX,yDAAU,CAAA;IACX,CAAC,EAHiB,eAAe,+BAAf,eAAe,QAGhC","file":"taskSystem.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport Severity from 'vs/base/common/severity';\nimport { TerminateResponse } from 'vs/base/common/processes';\nimport { Event } from 'vs/base/common/event';\nimport { Platform } from 'vs/base/common/platform';\nimport { IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { Task, ITaskEvent, KeyedTaskIdentifier } from './tasks';\nimport { ConfigurationTarget } from 'vs/platform/configuration/common/configuration';\n\nexport const enum TaskErrors {\n\tNotConfigured,\n\tRunningTask,\n\tNoBuildTask,\n\tNoTestTask,\n\tConfigValidationError,\n\tTaskNotFound,\n\tNoValidTaskRunner,\n\tUnknownError\n}\n\nexport class TaskError {\n\tpublic severity: Severity;\n\tpublic message: string;\n\tpublic code: TaskErrors;\n\n\tconstructor(severity: Severity, message: string, code: TaskErrors) {\n\t\tthis.severity = severity;\n\t\tthis.message = message;\n\t\tthis.code = code;\n\t}\n}\n\nexport namespace Triggers {\n\texport const shortcut: string = 'shortcut';\n\texport const command: string = 'command';\n\texport const reconnect: string = 'reconnect';\n}\n\nexport interface ITaskSummary {\n\t/**\n\t * Exit code of the process.\n\t */\n\texitCode?: number;\n}\n\nexport const enum TaskExecuteKind {\n\tStarted = 1,\n\tActive = 2\n}\n\nexport interface ITaskExecuteResult {\n\tkind: TaskExecuteKind;\n\tpromise: Promise<ITaskSummary>;\n\ttask: Task;\n\tstarted?: {\n\t\trestartOnFileChanges?: string;\n\t};\n\tactive?: {\n\t\tsame: boolean;\n\t\tbackground: boolean;\n\t};\n}\n\nexport interface ITaskResolver {\n\tresolve(uri: URI | string, identifier: string | KeyedTaskIdentifier | undefined): Promise<Task | undefined>;\n}\n\nexport interface ITaskTerminateResponse extends TerminateResponse {\n\ttask: Task | undefined;\n}\n\nexport interface IResolveSet {\n\tprocess?: {\n\t\tname: string;\n\t\tcwd?: string;\n\t\tpath?: string;\n\t};\n\tvariables: Set<string>;\n}\n\nexport interface IResolvedVariables {\n\tprocess?: string;\n\tvariables: Map<string, string>;\n}\n\nexport interface ITaskSystemInfo {\n\tplatform: Platform;\n\tcontext: any;\n\turiProvider: (this: void, path: string) => URI;\n\tresolveVariables(workspaceFolder: IWorkspaceFolder, toResolve: IResolveSet, target: ConfigurationTarget): Promise<IResolvedVariables | undefined>;\n\tfindExecutable(command: string, cwd?: string, paths?: string[]): Promise<string | undefined>;\n}\n\nexport interface ITaskSystemInfoResolver {\n\t(workspaceFolder: IWorkspaceFolder | undefined): ITaskSystemInfo | undefined;\n}\n\nexport interface ITaskSystem {\n\tonDidStateChange: Event<ITaskEvent>;\n\treconnect(task: Task, resolver: ITaskResolver): ITaskExecuteResult;\n\trun(task: Task, resolver: ITaskResolver): ITaskExecuteResult;\n\trerun(): ITaskExecuteResult | undefined;\n\tisActive(): Promise<boolean>;\n\tisActiveSync(): boolean;\n\tgetActiveTasks(): Task[];\n\tgetLastInstance(task: Task): Task | undefined;\n\tgetBusyTasks(): Task[];\n\tcanAutoTerminate(): boolean;\n\tterminate(task: Task): Promise<ITaskTerminateResponse>;\n\tterminateAll(): Promise<ITaskTerminateResponse[]>;\n\trevealTask(task: Task): boolean;\n\tcustomExecutionComplete(task: Task, result: number): Promise<void>;\n\tisTaskVisible(task: Task): boolean;\n}\n"]}