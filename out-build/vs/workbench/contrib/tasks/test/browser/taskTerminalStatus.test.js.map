{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/tasks/test/browser/taskTerminalStatus.test.ts"],"names":[],"mappings":"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","file":"taskTerminalStatus.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ok } from 'assert';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { AudioCue, IAudioCueService } from 'vs/platform/audioCues/browser/audioCueService';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { ACTIVE_TASK_STATUS, FAILED_TASK_STATUS, SUCCEEDED_TASK_STATUS, TaskTerminalStatus } from 'vs/workbench/contrib/tasks/browser/taskTerminalStatus';\nimport { AbstractProblemCollector } from 'vs/workbench/contrib/tasks/common/problemCollectors';\nimport { CommonTask, ITaskEvent, TaskEventKind, TaskRunType } from 'vs/workbench/contrib/tasks/common/tasks';\nimport { ITaskService, Task } from 'vs/workbench/contrib/tasks/common/taskService';\nimport { ITerminalInstance } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { ITerminalStatusList, TerminalStatusList } from 'vs/workbench/contrib/terminal/browser/terminalStatusList';\nimport { ITerminalStatus } from 'vs/workbench/contrib/terminal/common/terminal';\n\nclass TestTaskService implements Partial<ITaskService> {\n\tprivate readonly _onDidStateChange: Emitter<ITaskEvent> = new Emitter();\n\tpublic get onDidStateChange(): Event<ITaskEvent> {\n\t\treturn this._onDidStateChange.event;\n\t}\n\tpublic triggerStateChange(event: Partial<ITaskEvent>): void {\n\t\tthis._onDidStateChange.fire(event as ITaskEvent);\n\t}\n}\n\nclass TestAudioCueService implements Partial<IAudioCueService> {\n\tasync playAudioCue(cue: AudioCue): Promise<void> {\n\t\treturn;\n\t}\n}\n\nclass TestTerminal implements Partial<ITerminalInstance> {\n\tstatusList: TerminalStatusList = new TerminalStatusList(new TestConfigurationService());\n}\n\nclass TestTask extends CommonTask {\n\n\tconstructor() {\n\t\tsuper('test', undefined, undefined, {}, {}, { kind: '', label: '' });\n\t}\n\n\tprotected getFolderId(): string | undefined {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tprotected fromObject(object: any): Task {\n\t\tthrow new Error('Method not implemented.');\n\t}\n}\n\nclass TestProblemCollector implements Partial<AbstractProblemCollector> {\n\tprotected readonly _onDidFindFirstMatch = new Emitter<void>();\n\treadonly onDidFindFirstMatch = this._onDidFindFirstMatch.event;\n\tprotected readonly _onDidFindErrors = new Emitter<void>();\n\treadonly onDidFindErrors = this._onDidFindErrors.event;\n\tprotected readonly _onDidRequestInvalidateLastMarker = new Emitter<void>();\n\treadonly onDidRequestInvalidateLastMarker = this._onDidRequestInvalidateLastMarker.event;\n}\n\nsuite('Task Terminal Status', () => {\n\tlet store: DisposableStore;\n\tlet instantiationService: TestInstantiationService;\n\tlet taskService: TestTaskService;\n\tlet taskTerminalStatus: TaskTerminalStatus;\n\tlet testTerminal: ITerminalInstance;\n\tlet testTask: Task;\n\tlet problemCollector: AbstractProblemCollector;\n\tlet audioCueService: TestAudioCueService;\n\tsetup(() => {\n\t\tstore = new DisposableStore();\n\t\tinstantiationService = new TestInstantiationService();\n\t\ttaskService = new TestTaskService();\n\t\taudioCueService = new TestAudioCueService();\n\t\ttaskTerminalStatus = new TaskTerminalStatus(taskService as any, audioCueService as any);\n\t\ttestTerminal = instantiationService.createInstance(TestTerminal) as any;\n\t\ttestTask = instantiationService.createInstance(TestTask) as unknown as Task;\n\t\tproblemCollector = instantiationService.createInstance(TestProblemCollector) as any;\n\t\tstore.add(instantiationService);\n\t\tstore.add(taskTerminalStatus);\n\t});\n\tteardown(() => {\n\t\tstore.clear();\n\t});\n\tensureNoDisposablesAreLeakedInTestSuite();\n\ttest('Should add failed status when there is an exit code on task end', async () => {\n\t\ttaskTerminalStatus.addTerminal(testTask, testTerminal, problemCollector);\n\t\ttaskService.triggerStateChange({ kind: TaskEventKind.ProcessStarted });\n\t\tassertStatus(testTerminal.statusList, ACTIVE_TASK_STATUS);\n\t\ttaskService.triggerStateChange({ kind: TaskEventKind.Inactive });\n\t\tassertStatus(testTerminal.statusList, SUCCEEDED_TASK_STATUS);\n\t\ttaskService.triggerStateChange({ kind: TaskEventKind.End });\n\t\tawait poll<void>(async () => Promise.resolve(), () => testTerminal?.statusList.primary?.id === FAILED_TASK_STATUS.id, 'terminal status should be updated');\n\t});\n\ttest('Should add active status when a non-background task is run for a second time in the same terminal', () => {\n\t\ttaskTerminalStatus.addTerminal(testTask, testTerminal, problemCollector);\n\t\ttaskService.triggerStateChange({ kind: TaskEventKind.ProcessStarted });\n\t\tassertStatus(testTerminal.statusList, ACTIVE_TASK_STATUS);\n\t\ttaskService.triggerStateChange({ kind: TaskEventKind.Inactive });\n\t\tassertStatus(testTerminal.statusList, SUCCEEDED_TASK_STATUS);\n\t\ttaskService.triggerStateChange({ kind: TaskEventKind.ProcessStarted, runType: TaskRunType.SingleRun });\n\t\tassertStatus(testTerminal.statusList, ACTIVE_TASK_STATUS);\n\t\ttaskService.triggerStateChange({ kind: TaskEventKind.Inactive });\n\t\tassertStatus(testTerminal.statusList, SUCCEEDED_TASK_STATUS);\n\t});\n\ttest('Should drop status when a background task exits', async () => {\n\t\ttaskTerminalStatus.addTerminal(testTask, testTerminal, problemCollector);\n\t\ttaskService.triggerStateChange({ kind: TaskEventKind.ProcessStarted, runType: TaskRunType.Background });\n\t\tassertStatus(testTerminal.statusList, ACTIVE_TASK_STATUS);\n\t\ttaskService.triggerStateChange({ kind: TaskEventKind.Inactive });\n\t\tassertStatus(testTerminal.statusList, SUCCEEDED_TASK_STATUS);\n\t\ttaskService.triggerStateChange({ kind: TaskEventKind.ProcessEnded, exitCode: 0 });\n\t\tawait poll<void>(async () => Promise.resolve(), () => testTerminal?.statusList.statuses?.includes(SUCCEEDED_TASK_STATUS) === false, 'terminal should have dropped status');\n\t});\n\ttest('Should add succeeded status when a non-background task exits', () => {\n\t\ttaskTerminalStatus.addTerminal(testTask, testTerminal, problemCollector);\n\t\ttaskService.triggerStateChange({ kind: TaskEventKind.ProcessStarted, runType: TaskRunType.SingleRun });\n\t\tassertStatus(testTerminal.statusList, ACTIVE_TASK_STATUS);\n\t\ttaskService.triggerStateChange({ kind: TaskEventKind.Inactive });\n\t\tassertStatus(testTerminal.statusList, SUCCEEDED_TASK_STATUS);\n\t\ttaskService.triggerStateChange({ kind: TaskEventKind.ProcessEnded, exitCode: 0 });\n\t\tassertStatus(testTerminal.statusList, SUCCEEDED_TASK_STATUS);\n\t});\n});\n\nfunction assertStatus(actual: ITerminalStatusList, expected: ITerminalStatus): void {\n\tok(actual.statuses.length === 1, '# of statuses');\n\tok(actual.primary?.id === expected.id, 'ID');\n\tok(actual.primary?.severity === expected.severity, 'Severity');\n}\n\nasync function poll<T>(\n\tfn: () => Thenable<T>,\n\tacceptFn: (result: T) => boolean,\n\ttimeoutMessage: string,\n\tretryCount: number = 200,\n\tretryInterval: number = 10 // millis\n): Promise<T> {\n\tlet trial = 1;\n\tlet lastError: string = '';\n\n\twhile (true) {\n\t\tif (trial > retryCount) {\n\t\t\tthrow new Error(`Timeout: ${timeoutMessage} after ${(retryCount * retryInterval) / 1000} seconds.\\r${lastError}`);\n\t\t}\n\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await fn();\n\t\t\tif (acceptFn(result)) {\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\tlastError = 'Did not pass accept function';\n\t\t\t}\n\t\t} catch (e: any) {\n\t\t\tlastError = Array.isArray(e.stack) ? e.stack.join('\\n') : e.stack;\n\t\t}\n\n\t\tawait new Promise(resolve => setTimeout(resolve, retryInterval));\n\t\ttrial++;\n\t}\n}\n"]}