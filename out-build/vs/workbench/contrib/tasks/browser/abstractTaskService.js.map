{"version":3,"sources":["vs/workbench/contrib/tasks/browser/abstractTaskService.ts"],"names":[],"mappings":"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","file":"abstractTaskService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from 'vs/base/common/actions';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport * as glob from 'vs/base/common/glob';\nimport * as json from 'vs/base/common/json';\nimport { Disposable, dispose, IDisposable, IReference } from 'vs/base/common/lifecycle';\nimport { LRUCache, Touch } from 'vs/base/common/map';\nimport * as Objects from 'vs/base/common/objects';\nimport { ValidationState, ValidationStatus } from 'vs/base/common/parsers';\nimport * as Platform from 'vs/base/common/platform';\nimport { TerminateResponseCode } from 'vs/base/common/processes';\nimport * as resources from 'vs/base/common/resources';\nimport Severity from 'vs/base/common/severity';\nimport * as Types from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport * as UUID from 'vs/base/common/uuid';\nimport * as nls from 'vs/nls';\nimport { CommandsRegistry, ICommandService } from 'vs/platform/commands/common/commands';\nimport { ConfigurationTarget, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IFileService, IFileStatWithPartialMetadata } from 'vs/platform/files/common/files';\nimport { IMarkerService } from 'vs/platform/markers/common/markers';\nimport { IProgressOptions, IProgressService, ProgressLocation } from 'vs/platform/progress/common/progress';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { INamedProblemMatcher, ProblemMatcherRegistry } from 'vs/workbench/contrib/tasks/common/problemMatcher';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\n\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\n\nimport { IModelService } from 'vs/editor/common/services/model';\n\nimport { IWorkspace, IWorkspaceContextService, IWorkspaceFolder, WorkbenchState, WorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { Markers } from 'vs/workbench/contrib/markers/common/markers';\nimport { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\n\nimport { IOutputChannel, IOutputService } from 'vs/workbench/services/output/common/output';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\n\nimport { ITerminalGroupService, ITerminalService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { ITerminalProfileResolverService } from 'vs/workbench/contrib/terminal/common/terminal';\n\nimport { ConfiguringTask, ContributedTask, CustomTask, ExecutionEngine, InMemoryTask, ITaskEvent, ITaskIdentifier, ITaskSet, JsonSchemaVersion, KeyedTaskIdentifier, RuntimeType, Task, TASK_RUNNING_STATE, TaskDefinition, TaskEventKind, TaskGroup, TaskRunSource, TaskSettingId, TaskSorter, TaskSourceKind, TasksSchemaProperties, USER_TASKS_GROUP_KEY } from 'vs/workbench/contrib/tasks/common/tasks';\nimport { CustomExecutionSupportedContext, ICustomizationProperties, IProblemMatcherRunOptions, ITaskFilter, ITaskProvider, ITaskService, IWorkspaceFolderTaskResult, ProcessExecutionSupportedContext, ServerlessWebContext, ShellExecutionSupportedContext, TaskCommandsRegistered, TaskExecutionSupportedContext } from 'vs/workbench/contrib/tasks/common/taskService';\nimport { ITaskExecuteResult, ITaskResolver, ITaskSummary, ITaskSystem, ITaskSystemInfo, ITaskTerminateResponse, TaskError, TaskErrors, TaskExecuteKind } from 'vs/workbench/contrib/tasks/common/taskSystem';\nimport { getTemplates as getTaskTemplates } from 'vs/workbench/contrib/tasks/common/taskTemplates';\n\nimport * as TaskConfig from '../common/taskConfiguration';\nimport { TerminalTaskSystem } from './terminalTaskSystem';\n\nimport { IQuickInputService, IQuickPick, IQuickPickItem, IQuickPickSeparator, QuickPickInput } from 'vs/platform/quickinput/common/quickInput';\n\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { TaskDefinitionRegistry } from 'vs/workbench/contrib/tasks/common/taskDefinitionRegistry';\n\nimport { raceTimeout } from 'vs/base/common/async';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { once } from 'vs/base/common/functional';\nimport { toFormattedString } from 'vs/base/common/jsonFormatter';\nimport { Schemas } from 'vs/base/common/network';\nimport { ThemeIcon } from 'vs/base/common/themables';\nimport { IResolvedTextEditorModel, ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { TextEditorSelectionRevealType } from 'vs/platform/editor/common/editor';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { TerminalExitReason } from 'vs/platform/terminal/common/terminal';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IWorkspaceTrustManagementService, IWorkspaceTrustRequestService } from 'vs/platform/workspace/common/workspaceTrust';\nimport { VirtualWorkspaceContext } from 'vs/workbench/common/contextkeys';\nimport { EditorResourceAccessor, SaveReason } from 'vs/workbench/common/editor';\nimport { IViewDescriptorService, IViewsService } from 'vs/workbench/common/views';\nimport { configureTaskIcon, isWorkspaceFolder, ITaskQuickPickEntry, QUICKOPEN_DETAIL_CONFIG, QUICKOPEN_SKIP_CONFIG, TaskQuickPick } from 'vs/workbench/contrib/tasks/browser/taskQuickPick';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { ILifecycleService, ShutdownReason, StartupKind } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IPaneCompositePartService } from 'vs/workbench/services/panecomposite/browser/panecomposite';\nimport { IPathService } from 'vs/workbench/services/path/common/pathService';\nimport { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\n\nconst QUICKOPEN_HISTORY_LIMIT_CONFIG = 'task.quickOpen.history';\nconst PROBLEM_MATCHER_NEVER_CONFIG = 'task.problemMatchers.neverPrompt';\nconst USE_SLOW_PICKER = 'task.quickOpen.showAll';\n\nexport namespace ConfigureTaskAction {\n\texport const ID = 'workbench.action.tasks.configureTaskRunner';\n\texport const TEXT = nls.localize('ConfigureTaskRunnerAction.label', \"Configure Task\");\n}\n\nexport type TaskQuickPickEntryType = (IQuickPickItem & { task: Task }) | (IQuickPickItem & { folder: IWorkspaceFolder }) | (IQuickPickItem & { settingType: string });\n\nclass ProblemReporter implements TaskConfig.IProblemReporter {\n\n\tprivate _validationStatus: ValidationStatus;\n\n\tconstructor(private _outputChannel: IOutputChannel) {\n\t\tthis._validationStatus = new ValidationStatus();\n\t}\n\n\tpublic info(message: string): void {\n\t\tthis._validationStatus.state = ValidationState.Info;\n\t\tthis._outputChannel.append(message + '\\n');\n\t}\n\n\tpublic warn(message: string): void {\n\t\tthis._validationStatus.state = ValidationState.Warning;\n\t\tthis._outputChannel.append(message + '\\n');\n\t}\n\n\tpublic error(message: string): void {\n\t\tthis._validationStatus.state = ValidationState.Error;\n\t\tthis._outputChannel.append(message + '\\n');\n\t}\n\n\tpublic fatal(message: string): void {\n\t\tthis._validationStatus.state = ValidationState.Fatal;\n\t\tthis._outputChannel.append(message + '\\n');\n\t}\n\n\tpublic get status(): ValidationStatus {\n\t\treturn this._validationStatus;\n\t}\n}\n\nexport interface IWorkspaceFolderConfigurationResult {\n\tworkspaceFolder: IWorkspaceFolder;\n\tconfig: TaskConfig.IExternalTaskRunnerConfiguration | undefined;\n\thasErrors: boolean;\n}\n\ninterface ICommandUpgrade {\n\tcommand?: string;\n\targs?: string[];\n}\n\nclass TaskMap {\n\tprivate _store: Map<string, Task[]> = new Map();\n\n\tpublic forEach(callback: (value: Task[], folder: string) => void): void {\n\t\tthis._store.forEach(callback);\n\t}\n\n\tpublic static getKey(workspaceFolder: IWorkspace | IWorkspaceFolder | string): string {\n\t\tlet key: string | undefined;\n\t\tif (Types.isString(workspaceFolder)) {\n\t\t\tkey = workspaceFolder;\n\t\t} else {\n\t\t\tconst uri: URI | null | undefined = isWorkspaceFolder(workspaceFolder) ? workspaceFolder.uri : workspaceFolder.configuration;\n\t\t\tkey = uri ? uri.toString() : '';\n\t\t}\n\t\treturn key;\n\t}\n\n\tpublic get(workspaceFolder: IWorkspace | IWorkspaceFolder | string): Task[] {\n\t\tconst key = TaskMap.getKey(workspaceFolder);\n\t\tlet result: Task[] | undefined = this._store.get(key);\n\t\tif (!result) {\n\t\t\tresult = [];\n\t\t\tthis._store.set(key, result);\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic add(workspaceFolder: IWorkspace | IWorkspaceFolder | string, ...task: Task[]): void {\n\t\tconst key = TaskMap.getKey(workspaceFolder);\n\t\tlet values = this._store.get(key);\n\t\tif (!values) {\n\t\t\tvalues = [];\n\t\t\tthis._store.set(key, values);\n\t\t}\n\t\tvalues.push(...task);\n\t}\n\n\tpublic all(): Task[] {\n\t\tconst result: Task[] = [];\n\t\tthis._store.forEach((values) => result.push(...values));\n\t\treturn result;\n\t}\n}\n\nexport abstract class AbstractTaskService extends Disposable implements ITaskService {\n\n\t// private static autoDetectTelemetryName: string = 'taskServer.autoDetect';\n\tprivate static readonly RecentlyUsedTasks_Key = 'workbench.tasks.recentlyUsedTasks';\n\tprivate static readonly RecentlyUsedTasks_KeyV2 = 'workbench.tasks.recentlyUsedTasks2';\n\tprivate static readonly PersistentTasks_Key = 'workbench.tasks.persistentTasks';\n\tprivate static readonly IgnoreTask010DonotShowAgain_key = 'workbench.tasks.ignoreTask010Shown';\n\n\tpublic _serviceBrand: undefined;\n\tpublic static OutputChannelId: string = 'tasks';\n\tpublic static OutputChannelLabel: string = nls.localize('tasks', \"Tasks\");\n\n\tprivate static _nextHandle: number = 0;\n\n\tprivate _tasksReconnected: boolean = false;\n\tprivate _schemaVersion: JsonSchemaVersion | undefined;\n\tprivate _executionEngine: ExecutionEngine | undefined;\n\tprivate _workspaceFolders: IWorkspaceFolder[] | undefined;\n\tprivate _workspace: IWorkspace | undefined;\n\tprivate _ignoredWorkspaceFolders: IWorkspaceFolder[] | undefined;\n\tprivate _showIgnoreMessage?: boolean;\n\tprivate _providers: Map<number, ITaskProvider>;\n\tprivate _providerTypes: Map<number, string>;\n\tprotected _taskSystemInfos: Map<string, ITaskSystemInfo[]>;\n\n\tprotected _workspaceTasksPromise?: Promise<Map<string, IWorkspaceFolderTaskResult>>;\n\tprotected readonly _whenTaskSystemReady: Promise<void>;\n\n\tprotected _taskSystem?: ITaskSystem;\n\tprotected _taskSystemListeners?: IDisposable[] = [];\n\tprivate _recentlyUsedTasksV1: LRUCache<string, string> | undefined;\n\tprivate _recentlyUsedTasks: LRUCache<string, string> | undefined;\n\n\tprivate _persistentTasks: LRUCache<string, string> | undefined;\n\n\tprotected _taskRunningState: IContextKey<boolean>;\n\n\tprotected _outputChannel: IOutputChannel;\n\tprotected readonly _onDidStateChange: Emitter<ITaskEvent>;\n\tprivate _waitForAllSupportedExecutions: Promise<void>;\n\tprivate _onDidRegisterSupportedExecutions: Emitter<void> = new Emitter();\n\tprivate _onDidRegisterAllSupportedExecutions: Emitter<void> = new Emitter();\n\tprivate _onDidChangeTaskSystemInfo: Emitter<void> = new Emitter();\n\tprivate _willRestart: boolean = false;\n\tpublic onDidChangeTaskSystemInfo: Event<void> = this._onDidChangeTaskSystemInfo.event;\n\tprivate _onDidReconnectToTasks: Emitter<void> = new Emitter();\n\tpublic onDidReconnectToTasks: Event<void> = this._onDidReconnectToTasks.event;\n\tpublic get isReconnected(): boolean { return this._tasksReconnected; }\n\n\tconstructor(\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IMarkerService protected readonly _markerService: IMarkerService,\n\t\t@IOutputService protected readonly _outputService: IOutputService,\n\t\t@IPaneCompositePartService private readonly _paneCompositeService: IPaneCompositePartService,\n\t\t@IViewsService private readonly _viewsService: IViewsService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IFileService protected readonly _fileService: IFileService,\n\t\t@IWorkspaceContextService protected readonly _contextService: IWorkspaceContextService,\n\t\t@ITelemetryService protected readonly _telemetryService: ITelemetryService,\n\t\t@ITextFileService private readonly _textFileService: ITextFileService,\n\t\t@IModelService protected readonly _modelService: IModelService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@IQuickInputService private readonly _quickInputService: IQuickInputService,\n\t\t@IConfigurationResolverService protected readonly _configurationResolverService: IConfigurationResolverService,\n\t\t@ITerminalService private readonly _terminalService: ITerminalService,\n\t\t@ITerminalGroupService private readonly _terminalGroupService: ITerminalGroupService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@IProgressService private readonly _progressService: IProgressService,\n\t\t@IOpenerService private readonly _openerService: IOpenerService,\n\t\t@IDialogService protected readonly _dialogService: IDialogService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@IContextKeyService protected readonly _contextKeyService: IContextKeyService,\n\t\t@IWorkbenchEnvironmentService private readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ITerminalProfileResolverService private readonly _terminalProfileResolverService: ITerminalProfileResolverService,\n\t\t@IPathService private readonly _pathService: IPathService,\n\t\t@ITextModelService private readonly _textModelResolverService: ITextModelService,\n\t\t@IPreferencesService private readonly _preferencesService: IPreferencesService,\n\t\t@IViewDescriptorService private readonly _viewDescriptorService: IViewDescriptorService,\n\t\t@IWorkspaceTrustRequestService private readonly _workspaceTrustRequestService: IWorkspaceTrustRequestService,\n\t\t@IWorkspaceTrustManagementService private readonly _workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IThemeService private readonly _themeService: IThemeService,\n\t\t@ILifecycleService private readonly _lifecycleService: ILifecycleService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService\n\t) {\n\t\tsuper();\n\t\tthis._whenTaskSystemReady = Event.toPromise(this.onDidChangeTaskSystemInfo);\n\t\tthis._workspaceTasksPromise = undefined;\n\t\tthis._taskSystem = undefined;\n\t\tthis._taskSystemListeners = undefined;\n\t\tthis._outputChannel = this._outputService.getChannel(AbstractTaskService.OutputChannelId)!;\n\t\tthis._providers = new Map<number, ITaskProvider>();\n\t\tthis._providerTypes = new Map<number, string>();\n\t\tthis._taskSystemInfos = new Map<string, ITaskSystemInfo[]>();\n\t\tthis._register(this._contextService.onDidChangeWorkspaceFolders(() => {\n\t\t\tconst folderSetup = this._computeWorkspaceFolderSetup();\n\t\t\tif (this.executionEngine !== folderSetup[2]) {\n\t\t\t\tthis._disposeTaskSystemListeners();\n\t\t\t\tthis._taskSystem = undefined;\n\t\t\t}\n\t\t\tthis._updateSetup(folderSetup);\n\t\t\treturn this._updateWorkspaceTasks(TaskRunSource.FolderOpen);\n\t\t}));\n\t\tthis._register(this._configurationService.onDidChangeConfiguration((e) => {\n\t\t\tif (!e.affectsConfiguration('tasks') || (!this._taskSystem && !this._workspaceTasksPromise)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!this._taskSystem || this._taskSystem instanceof TerminalTaskSystem) {\n\t\t\t\tthis._outputChannel.clear();\n\t\t\t}\n\n\t\t\tthis._setTaskLRUCacheLimit();\n\t\t\treturn this._updateWorkspaceTasks(TaskRunSource.ConfigurationChange);\n\t\t}));\n\t\tthis._taskRunningState = TASK_RUNNING_STATE.bindTo(_contextKeyService);\n\t\tthis._onDidStateChange = this._register(new Emitter());\n\t\tthis._registerCommands().then(() => TaskCommandsRegistered.bindTo(this._contextKeyService).set(true));\n\t\tServerlessWebContext.bindTo(this._contextKeyService).set(Platform.isWeb && !remoteAgentService.getConnection()?.remoteAuthority);\n\t\tthis._configurationResolverService.contributeVariable('defaultBuildTask', async (): Promise<string | undefined> => {\n\t\t\tlet tasks = await this._getTasksForGroup(TaskGroup.Build);\n\t\t\tif (tasks.length > 0) {\n\t\t\t\tconst defaults = this._getDefaultTasks(tasks);\n\t\t\t\tif (defaults.length === 1) {\n\t\t\t\t\treturn defaults[0]._label;\n\t\t\t\t} else if (defaults.length) {\n\t\t\t\t\ttasks = defaults;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet entry: ITaskQuickPickEntry | null | undefined;\n\t\t\tif (tasks && tasks.length > 0) {\n\t\t\t\tentry = await this._showQuickPick(tasks, nls.localize('TaskService.pickBuildTaskForLabel', 'Select the build task (there is no default build task defined)'));\n\t\t\t}\n\n\t\t\tconst task: Task | undefined | null = entry ? entry.task : undefined;\n\t\t\tif (!task) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\treturn task._label;\n\t\t});\n\t\tthis._lifecycleService.onBeforeShutdown(e => {\n\t\t\tthis._willRestart = e.reason !== ShutdownReason.RELOAD;\n\t\t});\n\t\tthis._register(this.onDidStateChange(e => {\n\t\t\tif (e.kind === TaskEventKind.Changed) {\n\t\t\t\t// no-op\n\t\t\t} else if ((this._willRestart || (e.kind === TaskEventKind.Terminated && e.exitReason === TerminalExitReason.User)) && e.taskId) {\n\t\t\t\tthis.removePersistentTask(e.taskId);\n\t\t\t} else if (e.kind === TaskEventKind.Start && e.__task && e.__task.getWorkspaceFolder()) {\n\t\t\t\tthis._setPersistentTask(e.__task);\n\t\t\t}\n\t\t}));\n\t\tthis._waitForAllSupportedExecutions = new Promise(resolve => {\n\t\t\tonce(this._onDidRegisterAllSupportedExecutions.event)(() => resolve());\n\t\t});\n\t\tif (this._terminalService.getReconnectedTerminals('Task')?.length) {\n\t\t\tthis._attemptTaskReconnection();\n\t\t} else {\n\t\t\tthis._terminalService.whenConnected.then(() => {\n\t\t\t\tif (this._terminalService.getReconnectedTerminals('Task')?.length) {\n\t\t\t\t\tthis._attemptTaskReconnection();\n\t\t\t\t} else {\n\t\t\t\t\tthis._tasksReconnected = true;\n\t\t\t\t\tthis._onDidReconnectToTasks.fire();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis._upgrade();\n\t}\n\n\tpublic registerSupportedExecutions(custom?: boolean, shell?: boolean, process?: boolean) {\n\t\tif (custom !== undefined) {\n\t\t\tconst customContext = CustomExecutionSupportedContext.bindTo(this._contextKeyService);\n\t\t\tcustomContext.set(custom);\n\t\t}\n\t\tconst isVirtual = !!VirtualWorkspaceContext.getValue(this._contextKeyService);\n\t\tif (shell !== undefined) {\n\t\t\tconst shellContext = ShellExecutionSupportedContext.bindTo(this._contextKeyService);\n\t\t\tshellContext.set(shell && !isVirtual);\n\t\t}\n\t\tif (process !== undefined) {\n\t\t\tconst processContext = ProcessExecutionSupportedContext.bindTo(this._contextKeyService);\n\t\t\tprocessContext.set(process && !isVirtual);\n\t\t}\n\t\t// update tasks so an incomplete list isn't returned when getWorkspaceTasks is called\n\t\tthis._workspaceTasksPromise = undefined;\n\t\tthis._onDidRegisterSupportedExecutions.fire();\n\t\tif (custom && shell && process) {\n\t\t\tthis._onDidRegisterAllSupportedExecutions.fire();\n\t\t}\n\t}\n\n\tprivate _attemptTaskReconnection(): void {\n\t\tif (this._lifecycleService.startupKind !== StartupKind.ReloadedWindow) {\n\t\t\tthis._tasksReconnected = true;\n\t\t\tthis._storageService.remove(AbstractTaskService.PersistentTasks_Key, StorageScope.WORKSPACE);\n\t\t}\n\t\tif (!this._configurationService.getValue(TaskSettingId.Reconnection) || this._tasksReconnected) {\n\t\t\tthis._tasksReconnected = true;\n\t\t\treturn;\n\t\t}\n\t\tthis.getWorkspaceTasks(TaskRunSource.Reconnect).then(async () => {\n\t\t\tthis._tasksReconnected = await this._reconnectTasks();\n\t\t\tthis._onDidReconnectToTasks.fire();\n\t\t});\n\t}\n\n\tprivate async _reconnectTasks(): Promise<boolean> {\n\t\tconst tasks = await this.getSavedTasks('persistent');\n\t\tif (!tasks.length) {\n\t\t\treturn true;\n\t\t}\n\t\tfor (const task of tasks) {\n\t\t\tif (ConfiguringTask.is(task)) {\n\t\t\t\tconst resolved = await this.tryResolveTask(task);\n\t\t\t\tif (resolved) {\n\t\t\t\t\tthis.run(resolved, undefined, TaskRunSource.Reconnect);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.run(task, undefined, TaskRunSource.Reconnect);\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic get onDidStateChange(): Event<ITaskEvent> {\n\t\treturn this._onDidStateChange.event;\n\t}\n\n\tpublic get supportsMultipleTaskExecutions(): boolean {\n\t\treturn this.inTerminal();\n\t}\n\n\tprivate async _registerCommands(): Promise<void> {\n\t\tCommandsRegistry.registerCommand({\n\t\t\tid: 'workbench.action.tasks.runTask',\n\t\t\thandler: async (accessor, arg) => {\n\t\t\t\tif (await this._trust()) {\n\t\t\t\t\tawait this._runTaskCommand(arg);\n\t\t\t\t}\n\t\t\t},\n\t\t\tdescription: {\n\t\t\t\tdescription: 'Run Task',\n\t\t\t\targs: [{\n\t\t\t\t\tname: 'args',\n\t\t\t\t\tisOptional: true,\n\t\t\t\t\tdescription: nls.localize('runTask.arg', \"Filters the tasks shown in the quickpick\"),\n\t\t\t\t\tschema: {\n\t\t\t\t\t\tanyOf: [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\tdescription: nls.localize('runTask.label', \"The task's label or a term to filter by\")\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\t\ttype: {\n\t\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\t\tdescription: nls.localize('runTask.type', \"The contributed task type\")\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\ttask: {\n\t\t\t\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\t\t\t\tdescription: nls.localize('runTask.task', \"The task's label or a term to filter by\")\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}]\n\t\t\t}\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.reRunTask', async (accessor, arg) => {\n\t\t\tif (await this._trust()) {\n\t\t\t\tthis._reRunTaskCommand();\n\t\t\t}\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.restartTask', async (accessor, arg) => {\n\t\t\tif (await this._trust()) {\n\t\t\t\tthis._runRestartTaskCommand(arg);\n\t\t\t}\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.terminate', async (accessor, arg) => {\n\t\t\tif (await this._trust()) {\n\t\t\t\tthis._runTerminateCommand(arg);\n\t\t\t}\n\t\t});\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.showLog', () => {\n\t\t\tthis._showOutput();\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.build', async () => {\n\t\t\tif (await this._trust()) {\n\t\t\t\tthis._runBuildCommand();\n\t\t\t}\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.test', async () => {\n\t\t\tif (await this._trust()) {\n\t\t\t\tthis._runTestCommand();\n\t\t\t}\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.configureTaskRunner', async () => {\n\t\t\tif (await this._trust()) {\n\t\t\t\tthis._runConfigureTasks();\n\t\t\t}\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.configureDefaultBuildTask', async () => {\n\t\t\tif (await this._trust()) {\n\t\t\t\tthis._runConfigureDefaultBuildTask();\n\t\t\t}\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.configureDefaultTestTask', async () => {\n\t\t\tif (await this._trust()) {\n\t\t\t\tthis._runConfigureDefaultTestTask();\n\t\t\t}\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.showTasks', async () => {\n\t\t\tif (await this._trust()) {\n\t\t\t\treturn this.runShowTasks();\n\t\t\t}\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.toggleProblems', () => this._commandService.executeCommand(Markers.TOGGLE_MARKERS_VIEW_ACTION_ID));\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.openUserTasks', async () => {\n\t\t\tconst resource = this._getResourceForKind(TaskSourceKind.User);\n\t\t\tif (resource) {\n\t\t\t\tthis._openTaskFile(resource, TaskSourceKind.User);\n\t\t\t}\n\t\t});\n\n\t\tCommandsRegistry.registerCommand('workbench.action.tasks.openWorkspaceFileTasks', async () => {\n\t\t\tconst resource = this._getResourceForKind(TaskSourceKind.WorkspaceFile);\n\t\t\tif (resource) {\n\t\t\t\tthis._openTaskFile(resource, TaskSourceKind.WorkspaceFile);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate get workspaceFolders(): IWorkspaceFolder[] {\n\t\tif (!this._workspaceFolders) {\n\t\t\tthis._updateSetup();\n\t\t}\n\t\treturn this._workspaceFolders!;\n\t}\n\n\tprivate get ignoredWorkspaceFolders(): IWorkspaceFolder[] {\n\t\tif (!this._ignoredWorkspaceFolders) {\n\t\t\tthis._updateSetup();\n\t\t}\n\t\treturn this._ignoredWorkspaceFolders!;\n\t}\n\n\tprotected get executionEngine(): ExecutionEngine {\n\t\tif (this._executionEngine === undefined) {\n\t\t\tthis._updateSetup();\n\t\t}\n\t\treturn this._executionEngine!;\n\t}\n\n\tprivate get schemaVersion(): JsonSchemaVersion {\n\t\tif (this._schemaVersion === undefined) {\n\t\t\tthis._updateSetup();\n\t\t}\n\t\treturn this._schemaVersion!;\n\t}\n\n\tprivate get showIgnoreMessage(): boolean {\n\t\tif (this._showIgnoreMessage === undefined) {\n\t\t\tthis._showIgnoreMessage = !this._storageService.getBoolean(AbstractTaskService.IgnoreTask010DonotShowAgain_key, StorageScope.WORKSPACE, false);\n\t\t}\n\t\treturn this._showIgnoreMessage;\n\t}\n\n\tprivate _getActivationEvents(type: string | undefined): string[] {\n\t\tconst result: string[] = [];\n\t\tresult.push('onCommand:workbench.action.tasks.runTask');\n\t\tif (type) {\n\t\t\t// send a specific activation event for this task type\n\t\t\tresult.push(`onTaskType:${type}`);\n\t\t} else {\n\t\t\t// send activation events for all task types\n\t\t\tfor (const definition of TaskDefinitionRegistry.all()) {\n\t\t\t\tresult.push(`onTaskType:${definition.taskType}`);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async _activateTaskProviders(type: string | undefined): Promise<void> {\n\t\t// We need to first wait for extensions to be registered because we might read\n\t\t// the `TaskDefinitionRegistry` in case `type` is `undefined`\n\t\tawait this._extensionService.whenInstalledExtensionsRegistered();\n\t\tawait raceTimeout(\n\t\t\tPromise.all(this._getActivationEvents(type).map(activationEvent => this._extensionService.activateByEvent(activationEvent))),\n\t\t\t5000,\n\t\t\t() => console.warn('Timed out activating extensions for task providers')\n\t\t);\n\t}\n\n\tprivate _updateSetup(setup?: [IWorkspaceFolder[], IWorkspaceFolder[], ExecutionEngine, JsonSchemaVersion, IWorkspace | undefined]): void {\n\t\tif (!setup) {\n\t\t\tsetup = this._computeWorkspaceFolderSetup();\n\t\t}\n\t\tthis._workspaceFolders = setup[0];\n\t\tif (this._ignoredWorkspaceFolders) {\n\t\t\tif (this._ignoredWorkspaceFolders.length !== setup[1].length) {\n\t\t\t\tthis._showIgnoreMessage = undefined;\n\t\t\t} else {\n\t\t\t\tconst set: Set<string> = new Set();\n\t\t\t\tthis._ignoredWorkspaceFolders.forEach(folder => set.add(folder.uri.toString()));\n\t\t\t\tfor (const folder of setup[1]) {\n\t\t\t\t\tif (!set.has(folder.uri.toString())) {\n\t\t\t\t\t\tthis._showIgnoreMessage = undefined;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._ignoredWorkspaceFolders = setup[1];\n\t\tthis._executionEngine = setup[2];\n\t\tthis._schemaVersion = setup[3];\n\t\tthis._workspace = setup[4];\n\t}\n\n\tprotected _showOutput(runSource: TaskRunSource = TaskRunSource.User): void {\n\t\tif (!VirtualWorkspaceContext.getValue(this._contextKeyService) && ((runSource === TaskRunSource.User) || (runSource === TaskRunSource.ConfigurationChange))) {\n\t\t\tthis._notificationService.prompt(Severity.Warning, nls.localize('taskServiceOutputPrompt', 'There are task errors. See the output for details.'),\n\t\t\t\t[{\n\t\t\t\t\tlabel: nls.localize('showOutput', \"Show output\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tthis._outputService.showChannel(this._outputChannel.id, true);\n\t\t\t\t\t}\n\t\t\t\t}]);\n\t\t}\n\t}\n\n\tprotected _disposeTaskSystemListeners(): void {\n\t\tif (this._taskSystemListeners) {\n\t\t\tdispose(this._taskSystemListeners);\n\t\t\tthis._taskSystemListeners = undefined;\n\t\t}\n\t}\n\n\tpublic registerTaskProvider(provider: ITaskProvider, type: string): IDisposable {\n\t\tif (!provider) {\n\t\t\treturn {\n\t\t\t\tdispose: () => { }\n\t\t\t};\n\t\t}\n\t\tconst handle = AbstractTaskService._nextHandle++;\n\t\tthis._providers.set(handle, provider);\n\t\tthis._providerTypes.set(handle, type);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis._providers.delete(handle);\n\t\t\t\tthis._providerTypes.delete(handle);\n\t\t\t}\n\t\t};\n\t}\n\n\tget hasTaskSystemInfo(): boolean {\n\t\tconst infosCount = Array.from(this._taskSystemInfos.values()).flat().length;\n\t\t// If there's a remoteAuthority, then we end up with 2 taskSystemInfos,\n\t\t// one for each extension host.\n\t\tif (this._environmentService.remoteAuthority) {\n\t\t\treturn infosCount > 1;\n\t\t}\n\t\treturn infosCount > 0;\n\t}\n\n\tpublic registerTaskSystem(key: string, info: ITaskSystemInfo): void {\n\t\t// Ideally the Web caller of registerRegisterTaskSystem would use the correct key.\n\t\t// However, the caller doesn't know about the workspace folders at the time of the call, even though we know about them here.\n\t\tif (info.platform === Platform.Platform.Web) {\n\t\t\tkey = this.workspaceFolders.length ? this.workspaceFolders[0].uri.scheme : key;\n\t\t}\n\t\tif (!this._taskSystemInfos.has(key)) {\n\t\t\tthis._taskSystemInfos.set(key, [info]);\n\t\t} else {\n\t\t\tconst infos = this._taskSystemInfos.get(key)!;\n\t\t\tif (info.platform === Platform.Platform.Web) {\n\t\t\t\t// Web infos should be pushed last.\n\t\t\t\tinfos.push(info);\n\t\t\t} else {\n\t\t\t\tinfos.unshift(info);\n\t\t\t}\n\t\t}\n\n\t\tif (this.hasTaskSystemInfo) {\n\t\t\tthis._onDidChangeTaskSystemInfo.fire();\n\t\t}\n\t}\n\n\tprivate _getTaskSystemInfo(key: string): ITaskSystemInfo | undefined {\n\t\tconst infos = this._taskSystemInfos.get(key);\n\t\treturn (infos && infos.length) ? infos[0] : undefined;\n\t}\n\n\tpublic extensionCallbackTaskComplete(task: Task, result: number): Promise<void> {\n\t\tif (!this._taskSystem) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\t\treturn this._taskSystem.customExecutionComplete(task, result);\n\t}\n\n\t/**\n\t * Get a subset of workspace tasks that match a certain predicate.\n\t */\n\tprivate async _findWorkspaceTasks(predicate: (task: ConfiguringTask | Task, workspaceFolder: IWorkspaceFolder) => boolean): Promise<(ConfiguringTask | Task)[]> {\n\t\tconst result: (ConfiguringTask | Task)[] = [];\n\n\t\tconst tasks = await this.getWorkspaceTasks();\n\t\tfor (const [, workspaceTasks] of tasks) {\n\t\t\tif (workspaceTasks.configurations) {\n\t\t\t\tfor (const taskName in workspaceTasks.configurations.byIdentifier) {\n\t\t\t\t\tconst task = workspaceTasks.configurations.byIdentifier[taskName];\n\t\t\t\t\tif (predicate(task, workspaceTasks.workspaceFolder)) {\n\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (workspaceTasks.set) {\n\t\t\t\tfor (const task of workspaceTasks.set.tasks) {\n\t\t\t\t\tif (predicate(task, workspaceTasks.workspaceFolder)) {\n\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async _findWorkspaceTasksInGroup(group: TaskGroup, isDefault: boolean): Promise<(ConfiguringTask | Task)[]> {\n\t\treturn this._findWorkspaceTasks((task) => {\n\t\t\tconst taskGroup = task.configurationProperties.group;\n\t\t\tif (taskGroup && typeof taskGroup !== 'string') {\n\t\t\t\treturn (taskGroup._id === group._id && (!isDefault || !!taskGroup.isDefault));\n\t\t\t}\n\t\t\treturn false;\n\t\t});\n\t}\n\n\tpublic async getTask(folder: IWorkspace | IWorkspaceFolder | string, identifier: string | ITaskIdentifier, compareId: boolean = false, type: string | undefined = undefined): Promise<Task | undefined> {\n\t\tif (!(await this._trust())) {\n\t\t\treturn;\n\t\t}\n\t\tconst name = Types.isString(folder) ? folder : isWorkspaceFolder(folder) ? folder.name : folder.configuration ? resources.basename(folder.configuration) : undefined;\n\t\tif (this.ignoredWorkspaceFolders.some(ignored => ignored.name === name)) {\n\t\t\treturn Promise.reject(new Error(nls.localize('TaskServer.folderIgnored', 'The folder {0} is ignored since it uses task version 0.1.0', name)));\n\t\t}\n\t\tconst key: string | KeyedTaskIdentifier | undefined = !Types.isString(identifier)\n\t\t\t? TaskDefinition.createTaskIdentifier(identifier, console)\n\t\t\t: identifier;\n\n\t\tif (key === undefined) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\t// Try to find the task in the workspace\n\t\tconst requestedFolder = TaskMap.getKey(folder);\n\t\tconst matchedTasks = await this._findWorkspaceTasks((task, workspaceFolder) => {\n\t\t\tconst taskFolder = TaskMap.getKey(workspaceFolder);\n\t\t\tif (taskFolder !== requestedFolder && taskFolder !== USER_TASKS_GROUP_KEY) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn task.matches(key, compareId);\n\t\t});\n\t\tmatchedTasks.sort(task => task._source.kind === TaskSourceKind.Extension ? 1 : -1);\n\t\tif (matchedTasks.length > 0) {\n\t\t\t// Nice, we found a configured task!\n\t\t\tconst task = matchedTasks[0];\n\t\t\tif (ConfiguringTask.is(task)) {\n\t\t\t\treturn this.tryResolveTask(task);\n\t\t\t} else {\n\t\t\t\treturn task;\n\t\t\t}\n\t\t}\n\n\t\t// We didn't find the task, so we need to ask all resolvers about it\n\t\tconst map = await this._getGroupedTasks({ type });\n\t\tlet values = map.get(folder);\n\t\tvalues = values.concat(map.get(USER_TASKS_GROUP_KEY));\n\n\t\tif (!values) {\n\t\t\treturn undefined;\n\t\t}\n\t\tvalues = values.filter(task => task.matches(key, compareId)).sort(task => task._source.kind === TaskSourceKind.Extension ? 1 : -1);\n\t\treturn values.length > 0 ? values[0] : undefined;\n\t}\n\n\tpublic async tryResolveTask(configuringTask: ConfiguringTask): Promise<Task | undefined> {\n\t\tif (!(await this._trust())) {\n\t\t\treturn;\n\t\t}\n\t\tawait this._activateTaskProviders(configuringTask.type);\n\t\tlet matchingProvider: ITaskProvider | undefined;\n\t\tlet matchingProviderUnavailable: boolean = false;\n\t\tfor (const [handle, provider] of this._providers) {\n\t\t\tconst providerType = this._providerTypes.get(handle);\n\t\t\tif (configuringTask.type === providerType) {\n\t\t\t\tif (providerType && !this._isTaskProviderEnabled(providerType)) {\n\t\t\t\t\tmatchingProviderUnavailable = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tmatchingProvider = provider;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!matchingProvider) {\n\t\t\tif (matchingProviderUnavailable) {\n\t\t\t\tthis._outputChannel.append(nls.localize(\n\t\t\t\t\t'TaskService.providerUnavailable',\n\t\t\t\t\t'Warning: {0} tasks are unavailable in the current environment.\\n',\n\t\t\t\t\tconfiguringTask.configures.type\n\t\t\t\t));\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// Try to resolve the task first\n\t\ttry {\n\t\t\tconst resolvedTask = await matchingProvider.resolveTask(configuringTask);\n\t\t\tif (resolvedTask && (resolvedTask._id === configuringTask._id)) {\n\t\t\t\treturn TaskConfig.createCustomTask(resolvedTask, configuringTask);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// Ignore errors. The task could not be provided by any of the providers.\n\t\t}\n\n\t\t// The task couldn't be resolved. Instead, use the less efficient provideTask.\n\t\tconst tasks = await this.tasks({ type: configuringTask.type });\n\t\tfor (const task of tasks) {\n\t\t\tif (task._id === configuringTask._id) {\n\t\t\t\treturn TaskConfig.createCustomTask(<ContributedTask>task, configuringTask);\n\t\t\t}\n\t\t}\n\n\t\treturn;\n\t}\n\n\tprotected abstract _versionAndEngineCompatible(filter?: ITaskFilter): boolean;\n\n\tpublic async tasks(filter?: ITaskFilter): Promise<Task[]> {\n\t\tif (!(await this._trust())) {\n\t\t\treturn [];\n\t\t}\n\t\tif (!this._versionAndEngineCompatible(filter)) {\n\t\t\treturn Promise.resolve<Task[]>([]);\n\t\t}\n\t\treturn this._getGroupedTasks(filter).then((map) => {\n\t\t\tif (!filter || !filter.type) {\n\t\t\t\treturn map.all();\n\t\t\t}\n\t\t\tconst result: Task[] = [];\n\t\t\tmap.forEach((tasks) => {\n\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\tif (ContributedTask.is(task) && ((task.defines.type === filter.type) || (task._source.label === filter.type))) {\n\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t} else if (CustomTask.is(task)) {\n\t\t\t\t\t\tif (task.type === filter.type) {\n\t\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst customizes = task.customizes();\n\t\t\t\t\t\t\tif (customizes && customizes.type === filter.type) {\n\t\t\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tpublic taskTypes(): string[] {\n\t\tconst types: string[] = [];\n\t\tif (this._isProvideTasksEnabled()) {\n\t\t\tfor (const definition of TaskDefinitionRegistry.all()) {\n\t\t\t\tif (this._isTaskProviderEnabled(definition.taskType)) {\n\t\t\t\t\ttypes.push(definition.taskType);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn types;\n\t}\n\n\tpublic createSorter(): TaskSorter {\n\t\treturn new TaskSorter(this._contextService.getWorkspace() ? this._contextService.getWorkspace().folders : []);\n\t}\n\n\tprivate _isActive(): Promise<boolean> {\n\t\tif (!this._taskSystem) {\n\t\t\treturn Promise.resolve(false);\n\t\t}\n\t\treturn this._taskSystem.isActive();\n\t}\n\n\tpublic async getActiveTasks(): Promise<Task[]> {\n\t\tif (!this._taskSystem) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this._taskSystem.getActiveTasks();\n\t}\n\n\tpublic async getBusyTasks(): Promise<Task[]> {\n\t\tif (!this._taskSystem) {\n\t\t\treturn [];\n\t\t}\n\t\treturn this._taskSystem.getBusyTasks();\n\t}\n\n\tpublic getRecentlyUsedTasksV1(): LRUCache<string, string> {\n\t\tif (this._recentlyUsedTasksV1) {\n\t\t\treturn this._recentlyUsedTasksV1;\n\t\t}\n\t\tconst quickOpenHistoryLimit = this._configurationService.getValue<number>(QUICKOPEN_HISTORY_LIMIT_CONFIG);\n\t\tthis._recentlyUsedTasksV1 = new LRUCache<string, string>(quickOpenHistoryLimit);\n\n\t\tconst storageValue = this._storageService.get(AbstractTaskService.RecentlyUsedTasks_Key, StorageScope.WORKSPACE);\n\t\tif (storageValue) {\n\t\t\ttry {\n\t\t\t\tconst values: string[] = JSON.parse(storageValue);\n\t\t\t\tif (Array.isArray(values)) {\n\t\t\t\t\tfor (const value of values) {\n\t\t\t\t\t\tthis._recentlyUsedTasksV1.set(value, value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t// Ignore. We use the empty result\n\t\t\t}\n\t\t}\n\t\treturn this._recentlyUsedTasksV1;\n\t}\n\n\tprivate _getTasksFromStorage(type: 'persistent' | 'historical'): LRUCache<string, string> {\n\t\treturn type === 'persistent' ? this._getPersistentTasks() : this._getRecentTasks();\n\t}\n\n\tprivate _getRecentTasks(): LRUCache<string, string> {\n\t\tif (this._recentlyUsedTasks) {\n\t\t\treturn this._recentlyUsedTasks;\n\t\t}\n\t\tconst quickOpenHistoryLimit = this._configurationService.getValue<number>(QUICKOPEN_HISTORY_LIMIT_CONFIG);\n\t\tthis._recentlyUsedTasks = new LRUCache<string, string>(quickOpenHistoryLimit);\n\n\t\tconst storageValue = this._storageService.get(AbstractTaskService.RecentlyUsedTasks_KeyV2, StorageScope.WORKSPACE);\n\t\tif (storageValue) {\n\t\t\ttry {\n\t\t\t\tconst values: [string, string][] = JSON.parse(storageValue);\n\t\t\t\tif (Array.isArray(values)) {\n\t\t\t\t\tfor (const value of values) {\n\t\t\t\t\t\tthis._recentlyUsedTasks.set(value[0], value[1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t// Ignore. We use the empty result\n\t\t\t}\n\t\t}\n\t\treturn this._recentlyUsedTasks;\n\t}\n\n\tprivate _getPersistentTasks(): LRUCache<string, string> {\n\t\tif (this._persistentTasks) {\n\t\t\treturn this._persistentTasks;\n\t\t}\n\t\t//TODO: should this # be configurable?\n\t\tthis._persistentTasks = new LRUCache<string, string>(10);\n\t\tconst storageValue = this._storageService.get(AbstractTaskService.PersistentTasks_Key, StorageScope.WORKSPACE);\n\t\tif (storageValue) {\n\t\t\ttry {\n\t\t\t\tconst values: [string, string][] = JSON.parse(storageValue);\n\t\t\t\tif (Array.isArray(values)) {\n\t\t\t\t\tfor (const value of values) {\n\t\t\t\t\t\tthis._persistentTasks.set(value[0], value[1]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\t// Ignore. We use the empty result\n\t\t\t}\n\t\t}\n\t\treturn this._persistentTasks;\n\t}\n\n\tprivate _getFolderFromTaskKey(key: string): { folder: string | undefined; isWorkspaceFile: boolean | undefined } {\n\t\tconst keyValue: { folder: string | undefined; id: string | undefined } = JSON.parse(key);\n\t\treturn {\n\t\t\tfolder: keyValue.folder, isWorkspaceFile: keyValue.id?.endsWith(TaskSourceKind.WorkspaceFile)\n\t\t};\n\t}\n\n\tpublic async getSavedTasks(type: 'persistent' | 'historical'): Promise<(Task | ConfiguringTask)[]> {\n\t\tconst folderMap: IStringDictionary<IWorkspaceFolder> = Object.create(null);\n\t\tthis.workspaceFolders.forEach(folder => {\n\t\t\tfolderMap[folder.uri.toString()] = folder;\n\t\t});\n\t\tconst folderToTasksMap: Map<string, any> = new Map();\n\t\tconst workspaceToTaskMap: Map<string, any> = new Map();\n\t\tconst storedTasks = this._getTasksFromStorage(type);\n\t\tconst tasks: (Task | ConfiguringTask)[] = [];\n\n\t\tfunction addTaskToMap(map: Map<string, any>, folder: string | undefined, task: any) {\n\t\t\tif (folder && !map.has(folder)) {\n\t\t\t\tmap.set(folder, []);\n\t\t\t}\n\t\t\tif (folder && (folderMap[folder] || (folder === USER_TASKS_GROUP_KEY)) && task) {\n\t\t\t\tmap.get(folder).push(task);\n\t\t\t}\n\t\t}\n\t\tfor (const entry of storedTasks.entries()) {\n\t\t\tconst key = entry[0];\n\t\t\tconst task = JSON.parse(entry[1]);\n\t\t\tconst folderInfo = this._getFolderFromTaskKey(key);\n\t\t\taddTaskToMap(folderInfo.isWorkspaceFile ? workspaceToTaskMap : folderToTasksMap, folderInfo.folder, task);\n\t\t}\n\n\t\tconst readTasksMap: Map<string, (Task | ConfiguringTask)> = new Map();\n\n\t\tasync function readTasks(that: AbstractTaskService, map: Map<string, any>, isWorkspaceFile: boolean) {\n\t\t\tfor (const key of map.keys()) {\n\t\t\t\tconst custom: CustomTask[] = [];\n\t\t\t\tconst customized: IStringDictionary<ConfiguringTask> = Object.create(null);\n\t\t\t\tconst taskConfigSource = (folderMap[key]\n\t\t\t\t\t? (isWorkspaceFile\n\t\t\t\t\t\t? TaskConfig.TaskConfigSource.WorkspaceFile : TaskConfig.TaskConfigSource.TasksJson)\n\t\t\t\t\t: TaskConfig.TaskConfigSource.User);\n\t\t\t\tawait that._computeTasksForSingleConfig(folderMap[key] ?? await that._getAFolder(), {\n\t\t\t\t\tversion: '2.0.0',\n\t\t\t\t\ttasks: map.get(key)\n\t\t\t\t}, TaskRunSource.System, custom, customized, taskConfigSource, true);\n\t\t\t\tcustom.forEach(task => {\n\t\t\t\t\tconst taskKey = task.getRecentlyUsedKey();\n\t\t\t\t\tif (taskKey) {\n\t\t\t\t\t\treadTasksMap.set(taskKey, task);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tfor (const configuration in customized) {\n\t\t\t\t\tconst taskKey = customized[configuration].getRecentlyUsedKey();\n\t\t\t\t\tif (taskKey) {\n\t\t\t\t\t\treadTasksMap.set(taskKey, customized[configuration]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tawait readTasks(this, folderToTasksMap, false);\n\t\tawait readTasks(this, workspaceToTaskMap, true);\n\t\tfor (const key of storedTasks.keys()) {\n\t\t\tif (readTasksMap.has(key)) {\n\t\t\t\ttasks.push(readTasksMap.get(key)!);\n\t\t\t}\n\t\t}\n\t\treturn tasks;\n\t}\n\n\tpublic removeRecentlyUsedTask(taskRecentlyUsedKey: string) {\n\t\tif (this._getTasksFromStorage('historical').has(taskRecentlyUsedKey)) {\n\t\t\tthis._getTasksFromStorage('historical').delete(taskRecentlyUsedKey);\n\t\t\tthis._saveRecentlyUsedTasks();\n\t\t}\n\t}\n\n\tpublic removePersistentTask(key: string) {\n\t\tif (this._getTasksFromStorage('persistent').has(key)) {\n\t\t\tthis._getTasksFromStorage('persistent').delete(key);\n\t\t\tthis._savePersistentTasks();\n\t\t}\n\t}\n\n\tprivate _setTaskLRUCacheLimit() {\n\t\tconst quickOpenHistoryLimit = this._configurationService.getValue<number>(QUICKOPEN_HISTORY_LIMIT_CONFIG);\n\t\tif (this._recentlyUsedTasks) {\n\t\t\tthis._recentlyUsedTasks.limit = quickOpenHistoryLimit;\n\t\t}\n\t}\n\n\tprivate async _setRecentlyUsedTask(task: Task): Promise<void> {\n\t\tlet key = task.getRecentlyUsedKey();\n\t\tif (!InMemoryTask.is(task) && key) {\n\t\t\tconst customizations = this._createCustomizableTask(task);\n\t\t\tif (ContributedTask.is(task) && customizations) {\n\t\t\t\tconst custom: CustomTask[] = [];\n\t\t\t\tconst customized: IStringDictionary<ConfiguringTask> = Object.create(null);\n\t\t\t\tawait this._computeTasksForSingleConfig(task._source.workspaceFolder ?? this.workspaceFolders[0], {\n\t\t\t\t\tversion: '2.0.0',\n\t\t\t\t\ttasks: [customizations]\n\t\t\t\t}, TaskRunSource.System, custom, customized, TaskConfig.TaskConfigSource.TasksJson, true);\n\t\t\t\tfor (const configuration in customized) {\n\t\t\t\t\tkey = customized[configuration].getRecentlyUsedKey()!;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._getTasksFromStorage('historical').set(key, JSON.stringify(customizations));\n\t\t\tthis._saveRecentlyUsedTasks();\n\t\t}\n\t}\n\n\tprivate _saveRecentlyUsedTasks(): void {\n\t\tif (!this._recentlyUsedTasks) {\n\t\t\treturn;\n\t\t}\n\t\tconst quickOpenHistoryLimit = this._configurationService.getValue<number>(QUICKOPEN_HISTORY_LIMIT_CONFIG);\n\t\t// setting history limit to 0 means no LRU sorting\n\t\tif (quickOpenHistoryLimit === 0) {\n\t\t\treturn;\n\t\t}\n\t\tlet keys = [...this._recentlyUsedTasks.keys()];\n\t\tif (keys.length > quickOpenHistoryLimit) {\n\t\t\tkeys = keys.slice(0, quickOpenHistoryLimit);\n\t\t}\n\t\tconst keyValues: [string, string][] = [];\n\t\tfor (const key of keys) {\n\t\t\tkeyValues.push([key, this._recentlyUsedTasks.get(key, Touch.None)!]);\n\t\t}\n\t\tthis._storageService.store(AbstractTaskService.RecentlyUsedTasks_KeyV2, JSON.stringify(keyValues), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n\n\tprivate async _setPersistentTask(task: Task): Promise<void> {\n\t\tif (!this._configurationService.getValue(TaskSettingId.Reconnection)) {\n\t\t\treturn;\n\t\t}\n\t\tlet key = task.getRecentlyUsedKey();\n\t\tif (!InMemoryTask.is(task) && key) {\n\t\t\tconst customizations = this._createCustomizableTask(task);\n\t\t\tif (ContributedTask.is(task) && customizations) {\n\t\t\t\tconst custom: CustomTask[] = [];\n\t\t\t\tconst customized: IStringDictionary<ConfiguringTask> = Object.create(null);\n\t\t\t\tawait this._computeTasksForSingleConfig(task._source.workspaceFolder ?? this.workspaceFolders[0], {\n\t\t\t\t\tversion: '2.0.0',\n\t\t\t\t\ttasks: [customizations]\n\t\t\t\t}, TaskRunSource.System, custom, customized, TaskConfig.TaskConfigSource.TasksJson, true);\n\t\t\t\tfor (const configuration in customized) {\n\t\t\t\t\tkey = customized[configuration].getRecentlyUsedKey()!;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!task.configurationProperties.isBackground) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._getTasksFromStorage('persistent').set(key, JSON.stringify(customizations));\n\t\t\tthis._savePersistentTasks();\n\t\t}\n\t}\n\n\tprivate _savePersistentTasks(): void {\n\t\tif (!this._persistentTasks) {\n\t\t\treturn;\n\t\t}\n\t\tconst keys = [...this._persistentTasks.keys()];\n\t\tconst keyValues: [string, string][] = [];\n\t\tfor (const key of keys) {\n\t\t\tkeyValues.push([key, this._persistentTasks.get(key, Touch.None)!]);\n\t\t}\n\t\tthis._storageService.store(AbstractTaskService.PersistentTasks_Key, JSON.stringify(keyValues), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n\n\tprivate _openDocumentation(): void {\n\t\tthis._openerService.open(URI.parse('https://code.visualstudio.com/docs/editor/tasks#_defining-a-problem-matcher'));\n\t}\n\n\tprivate async _findSingleWorkspaceTaskOfGroup(group: TaskGroup): Promise<ITaskSummary | undefined> {\n\t\tconst tasksOfGroup = await this._findWorkspaceTasksInGroup(group, true);\n\t\tif ((tasksOfGroup.length === 1) && (typeof tasksOfGroup[0].configurationProperties.group !== 'string') && tasksOfGroup[0].configurationProperties.group?.isDefault) {\n\t\t\tlet resolvedTask: Task | undefined;\n\t\t\tif (ConfiguringTask.is(tasksOfGroup[0])) {\n\t\t\t\tresolvedTask = await this.tryResolveTask(tasksOfGroup[0]);\n\t\t\t} else {\n\t\t\t\tresolvedTask = tasksOfGroup[0];\n\t\t\t}\n\t\t\tif (resolvedTask) {\n\t\t\t\treturn this.run(resolvedTask, undefined, TaskRunSource.User);\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async _build(): Promise<ITaskSummary> {\n\t\tconst tryBuildShortcut = await this._findSingleWorkspaceTaskOfGroup(TaskGroup.Build);\n\t\tif (tryBuildShortcut) {\n\t\t\treturn tryBuildShortcut;\n\t\t}\n\t\treturn this._getGroupedTasksAndExecute();\n\t}\n\n\tprivate async _runTest(): Promise<ITaskSummary> {\n\t\tconst tryTestShortcut = await this._findSingleWorkspaceTaskOfGroup(TaskGroup.Test);\n\t\tif (tryTestShortcut) {\n\t\t\treturn tryTestShortcut;\n\t\t}\n\n\t\treturn this._getGroupedTasksAndExecute(true);\n\t}\n\n\tprivate async _getGroupedTasksAndExecute(test?: boolean): Promise<ITaskSummary> {\n\t\tconst tasks = await this._getGroupedTasks();\n\t\tconst runnable = this._createRunnableTask(tasks, test ? TaskGroup.Test : TaskGroup.Build);\n\t\tif (!runnable || !runnable.task) {\n\t\t\tif (test) {\n\t\t\t\tif (this.schemaVersion === JsonSchemaVersion.V0_1_0) {\n\t\t\t\t\tthrow new TaskError(Severity.Info, nls.localize('TaskService.noTestTask1', 'No test task defined. Mark a task with \\'isTestCommand\\' in the tasks.json file.'), TaskErrors.NoTestTask);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TaskError(Severity.Info, nls.localize('TaskService.noTestTask2', 'No test task defined. Mark a task with as a \\'test\\' group in the tasks.json file.'), TaskErrors.NoTestTask);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this.schemaVersion === JsonSchemaVersion.V0_1_0) {\n\t\t\t\t\tthrow new TaskError(Severity.Info, nls.localize('TaskService.noBuildTask1', 'No build task defined. Mark a task with \\'isBuildCommand\\' in the tasks.json file.'), TaskErrors.NoBuildTask);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new TaskError(Severity.Info, nls.localize('TaskService.noBuildTask2', 'No build task defined. Mark a task with as a \\'build\\' group in the tasks.json file.'), TaskErrors.NoBuildTask);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlet executeTaskResult: ITaskSummary;\n\t\ttry {\n\t\t\texecuteTaskResult = await this._executeTask(runnable.task, runnable.resolver, TaskRunSource.User);\n\t\t} catch (error) {\n\t\t\tthis._handleError(error);\n\t\t\treturn Promise.reject(error);\n\t\t}\n\t\treturn executeTaskResult;\n\t}\n\n\tpublic async run(task: Task | undefined, options?: IProblemMatcherRunOptions, runSource: TaskRunSource = TaskRunSource.System): Promise<ITaskSummary | undefined> {\n\t\tif (!(await this._trust())) {\n\t\t\treturn;\n\t\t}\n\t\tif (!task) {\n\t\t\tthrow new TaskError(Severity.Info, nls.localize('TaskServer.noTask', 'Task to execute is undefined'), TaskErrors.TaskNotFound);\n\t\t}\n\t\tconst resolver = this._createResolver();\n\t\tlet executeTaskResult: ITaskSummary | undefined;\n\t\ttry {\n\t\t\tif (options && options.attachProblemMatcher && this._shouldAttachProblemMatcher(task) && !InMemoryTask.is(task)) {\n\t\t\t\tconst taskToExecute = await this._attachProblemMatcher(task);\n\t\t\t\tif (taskToExecute) {\n\t\t\t\t\texecuteTaskResult = await this._executeTask(taskToExecute, resolver, runSource);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\texecuteTaskResult = await this._executeTask(task, resolver, runSource);\n\t\t\t}\n\t\t\treturn executeTaskResult;\n\t\t} catch (error) {\n\t\t\tthis._handleError(error);\n\t\t\treturn Promise.reject(error);\n\t\t}\n\t}\n\n\tprivate _isProvideTasksEnabled(): boolean {\n\t\tconst settingValue = this._configurationService.getValue(TaskSettingId.AutoDetect);\n\t\treturn settingValue === 'on';\n\t}\n\n\tprivate _isProblemMatcherPromptEnabled(type?: string): boolean {\n\t\tconst settingValue = this._configurationService.getValue(PROBLEM_MATCHER_NEVER_CONFIG);\n\t\tif (Types.isBoolean(settingValue)) {\n\t\t\treturn !settingValue;\n\t\t}\n\t\tif (type === undefined) {\n\t\t\treturn true;\n\t\t}\n\t\tconst settingValueMap: IStringDictionary<boolean> = <any>settingValue;\n\t\treturn !settingValueMap[type];\n\t}\n\n\tprivate _getTypeForTask(task: Task): string {\n\t\tlet type: string;\n\t\tif (CustomTask.is(task)) {\n\t\t\tconst configProperties: TaskConfig.IConfigurationProperties = task._source.config.element;\n\t\t\ttype = (<any>configProperties).type;\n\t\t} else {\n\t\t\ttype = task.getDefinition()!.type;\n\t\t}\n\t\treturn type;\n\t}\n\n\tprivate _shouldAttachProblemMatcher(task: Task): boolean {\n\t\tconst enabled = this._isProblemMatcherPromptEnabled(this._getTypeForTask(task));\n\t\tif (enabled === false) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!this._canCustomize(task)) {\n\t\t\treturn false;\n\t\t}\n\t\tif (task.configurationProperties.group !== undefined && task.configurationProperties.group !== TaskGroup.Build) {\n\t\t\treturn false;\n\t\t}\n\t\tif (task.configurationProperties.problemMatchers !== undefined && task.configurationProperties.problemMatchers.length > 0) {\n\t\t\treturn false;\n\t\t}\n\t\tif (ContributedTask.is(task)) {\n\t\t\treturn !task.hasDefinedMatchers && !!task.configurationProperties.problemMatchers && (task.configurationProperties.problemMatchers.length === 0);\n\t\t}\n\t\tif (CustomTask.is(task)) {\n\t\t\tconst configProperties: TaskConfig.IConfigurationProperties = task._source.config.element;\n\t\t\treturn configProperties.problemMatcher === undefined && !task.hasDefinedMatchers;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate async _updateNeverProblemMatcherSetting(type: string): Promise<void> {\n\t\tconst current = this._configurationService.getValue(PROBLEM_MATCHER_NEVER_CONFIG);\n\t\tif (current === true) {\n\t\t\treturn;\n\t\t}\n\t\tlet newValue: IStringDictionary<boolean>;\n\t\tif (current !== false) {\n\t\t\tnewValue = <any>current;\n\t\t} else {\n\t\t\tnewValue = Object.create(null);\n\t\t}\n\t\tnewValue[type] = true;\n\t\treturn this._configurationService.updateValue(PROBLEM_MATCHER_NEVER_CONFIG, newValue);\n\t}\n\n\tprivate async _attachProblemMatcher(task: ContributedTask | CustomTask): Promise<Task | undefined> {\n\t\tinterface IProblemMatcherPickEntry extends IQuickPickItem {\n\t\t\tmatcher: INamedProblemMatcher | undefined;\n\t\t\tnever?: boolean;\n\t\t\tlearnMore?: boolean;\n\t\t\tsetting?: string;\n\t\t}\n\t\tlet entries: QuickPickInput<IProblemMatcherPickEntry>[] = [];\n\t\tfor (const key of ProblemMatcherRegistry.keys()) {\n\t\t\tconst matcher = ProblemMatcherRegistry.get(key);\n\t\t\tif (matcher.deprecated) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (matcher.name === matcher.label) {\n\t\t\t\tentries.push({ label: matcher.name, matcher: matcher });\n\t\t\t} else {\n\t\t\t\tentries.push({\n\t\t\t\t\tlabel: matcher.label,\n\t\t\t\t\tdescription: `$${matcher.name}`,\n\t\t\t\t\tmatcher: matcher\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (entries.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tentries = entries.sort((a, b) => {\n\t\t\tif (a.label && b.label) {\n\t\t\t\treturn a.label.localeCompare(b.label);\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t});\n\t\tentries.unshift({ type: 'separator', label: nls.localize('TaskService.associate', 'associate') });\n\t\tlet taskType: string;\n\t\tif (CustomTask.is(task)) {\n\t\t\tconst configProperties: TaskConfig.IConfigurationProperties = task._source.config.element;\n\t\t\ttaskType = (<any>configProperties).type;\n\t\t} else {\n\t\t\ttaskType = task.getDefinition().type;\n\t\t}\n\t\tentries.unshift(\n\t\t\t{ label: nls.localize('TaskService.attachProblemMatcher.continueWithout', 'Continue without scanning the task output'), matcher: undefined },\n\t\t\t{ label: nls.localize('TaskService.attachProblemMatcher.never', 'Never scan the task output for this task'), matcher: undefined, never: true },\n\t\t\t{ label: nls.localize('TaskService.attachProblemMatcher.neverType', 'Never scan the task output for {0} tasks', taskType), matcher: undefined, setting: taskType },\n\t\t\t{ label: nls.localize('TaskService.attachProblemMatcher.learnMoreAbout', 'Learn more about scanning the task output'), matcher: undefined, learnMore: true }\n\t\t);\n\t\tconst problemMatcher = await this._quickInputService.pick(entries, { placeHolder: nls.localize('selectProblemMatcher', 'Select for which kind of errors and warnings to scan the task output') });\n\t\tif (!problemMatcher) {\n\t\t\treturn task;\n\t\t}\n\t\tif (problemMatcher.learnMore) {\n\t\t\tthis._openDocumentation();\n\t\t\treturn undefined;\n\t\t}\n\t\tif (problemMatcher.never) {\n\t\t\tthis.customize(task, { problemMatcher: [] }, true);\n\t\t\treturn task;\n\t\t}\n\t\tif (problemMatcher.matcher) {\n\t\t\tconst newTask = task.clone();\n\t\t\tconst matcherReference = `$${problemMatcher.matcher.name}`;\n\t\t\tconst properties: ICustomizationProperties = { problemMatcher: [matcherReference] };\n\t\t\tnewTask.configurationProperties.problemMatchers = [matcherReference];\n\t\t\tconst matcher = ProblemMatcherRegistry.get(problemMatcher.matcher.name);\n\t\t\tif (matcher && matcher.watching !== undefined) {\n\t\t\t\tproperties.isBackground = true;\n\t\t\t\tnewTask.configurationProperties.isBackground = true;\n\t\t\t}\n\t\t\tthis.customize(task, properties, true);\n\t\t\treturn newTask;\n\t\t}\n\t\tif (problemMatcher.setting) {\n\t\t\tawait this._updateNeverProblemMatcherSetting(problemMatcher.setting);\n\t\t}\n\t\treturn task;\n\t}\n\n\tprivate async _getTasksForGroup(group: TaskGroup): Promise<Task[]> {\n\t\tconst groups = await this._getGroupedTasks();\n\t\tconst result: Task[] = [];\n\t\tgroups.forEach(tasks => {\n\t\t\tfor (const task of tasks) {\n\t\t\t\tconst configTaskGroup = TaskGroup.from(task.configurationProperties.group);\n\t\t\t\tif (configTaskGroup?._id === group._id) {\n\t\t\t\t\tresult.push(task);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn result;\n\t}\n\n\tpublic needsFolderQualification(): boolean {\n\t\treturn this._contextService.getWorkbenchState() === WorkbenchState.WORKSPACE;\n\t}\n\n\tprivate _canCustomize(task: Task): boolean {\n\t\tif (this.schemaVersion !== JsonSchemaVersion.V2_0_0) {\n\t\t\treturn false;\n\t\t}\n\t\tif (CustomTask.is(task)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (ContributedTask.is(task)) {\n\t\t\treturn !!task.getWorkspaceFolder();\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate async _formatTaskForJson(resource: URI, task: TaskConfig.ICustomTask | TaskConfig.IConfiguringTask): Promise<string> {\n\t\tlet reference: IReference<IResolvedTextEditorModel> | undefined;\n\t\tlet stringValue: string = '';\n\t\ttry {\n\t\t\treference = await this._textModelResolverService.createModelReference(resource);\n\t\t\tconst model = reference.object.textEditorModel;\n\t\t\tconst { tabSize, insertSpaces } = model.getOptions();\n\t\t\tconst eol = model.getEOL();\n\t\t\tlet stringified = toFormattedString(task, { eol, tabSize, insertSpaces });\n\t\t\tconst regex = new RegExp(eol + (insertSpaces ? ' '.repeat(tabSize) : '\\\\t'), 'g');\n\t\t\tstringified = stringified.replace(regex, eol + (insertSpaces ? ' '.repeat(tabSize * 3) : '\\t\\t\\t'));\n\t\t\tconst twoTabs = insertSpaces ? ' '.repeat(tabSize * 2) : '\\t\\t';\n\t\t\tstringValue = twoTabs + stringified.slice(0, stringified.length - 1) + twoTabs + stringified.slice(stringified.length - 1);\n\t\t} finally {\n\t\t\treference?.dispose();\n\t\t}\n\t\treturn stringValue;\n\t}\n\n\tprivate async _openEditorAtTask(resource: URI | undefined, task: TaskConfig.ICustomTask | TaskConfig.IConfiguringTask | string | undefined, configIndex: number = -1): Promise<boolean> {\n\t\tif (resource === undefined) {\n\t\t\treturn Promise.resolve(false);\n\t\t}\n\t\tconst fileContent = await this._fileService.readFile(resource);\n\t\tconst content = fileContent.value;\n\t\tif (!content || !task) {\n\t\t\treturn false;\n\t\t}\n\t\tconst contentValue = content.toString();\n\t\tlet stringValue: string | undefined;\n\t\tif (configIndex !== -1) {\n\t\t\tconst json: TaskConfig.IExternalTaskRunnerConfiguration = this._configurationService.getValue<TaskConfig.IExternalTaskRunnerConfiguration>('tasks', { resource });\n\t\t\tif (json.tasks && (json.tasks.length > configIndex)) {\n\t\t\t\tstringValue = await this._formatTaskForJson(resource, json.tasks[configIndex]);\n\t\t\t}\n\t\t}\n\t\tif (!stringValue) {\n\t\t\tif (typeof task === 'string') {\n\t\t\t\tstringValue = task;\n\t\t\t} else {\n\t\t\t\tstringValue = await this._formatTaskForJson(resource, task);\n\t\t\t}\n\t\t}\n\n\t\tconst index = contentValue.indexOf(stringValue);\n\t\tlet startLineNumber = 1;\n\t\tfor (let i = 0; i < index; i++) {\n\t\t\tif (contentValue.charAt(i) === '\\n') {\n\t\t\t\tstartLineNumber++;\n\t\t\t}\n\t\t}\n\t\tlet endLineNumber = startLineNumber;\n\t\tfor (let i = 0; i < stringValue.length; i++) {\n\t\t\tif (stringValue.charAt(i) === '\\n') {\n\t\t\t\tendLineNumber++;\n\t\t\t}\n\t\t}\n\t\tconst selection = startLineNumber > 1 ? { startLineNumber, startColumn: startLineNumber === endLineNumber ? 4 : 3, endLineNumber, endColumn: startLineNumber === endLineNumber ? undefined : 4 } : undefined;\n\n\t\tawait this._editorService.openEditor({\n\t\t\tresource,\n\t\t\toptions: {\n\t\t\t\tpinned: false,\n\t\t\t\tforceReload: true, // because content might have changed\n\t\t\t\tselection,\n\t\t\t\tselectionRevealType: TextEditorSelectionRevealType.CenterIfOutsideViewport\n\t\t\t}\n\t\t});\n\t\treturn !!selection;\n\t}\n\n\tprivate _createCustomizableTask(task: ContributedTask | CustomTask | ConfiguringTask): TaskConfig.ICustomTask | TaskConfig.IConfiguringTask | undefined {\n\t\tlet toCustomize: TaskConfig.ICustomTask | TaskConfig.IConfiguringTask | undefined;\n\t\tconst taskConfig = CustomTask.is(task) || ConfiguringTask.is(task) ? task._source.config : undefined;\n\t\tif (taskConfig && taskConfig.element) {\n\t\t\ttoCustomize = { ...(taskConfig.element) };\n\t\t} else if (ContributedTask.is(task)) {\n\t\t\ttoCustomize = {\n\t\t\t};\n\t\t\tconst identifier: TaskConfig.ITaskIdentifier = Object.assign(Object.create(null), task.defines);\n\t\t\tdelete identifier['_key'];\n\t\t\tObject.keys(identifier).forEach(key => (<any>toCustomize)![key] = identifier[key]);\n\t\t\tif (task.configurationProperties.problemMatchers && task.configurationProperties.problemMatchers.length > 0 && Types.isStringArray(task.configurationProperties.problemMatchers)) {\n\t\t\t\ttoCustomize.problemMatcher = task.configurationProperties.problemMatchers;\n\t\t\t}\n\t\t\tif (task.configurationProperties.group) {\n\t\t\t\ttoCustomize.group = TaskConfig.GroupKind.to(task.configurationProperties.group);\n\t\t\t}\n\t\t}\n\t\tif (!toCustomize) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (toCustomize.problemMatcher === undefined && task.configurationProperties.problemMatchers === undefined || (task.configurationProperties.problemMatchers && task.configurationProperties.problemMatchers.length === 0)) {\n\t\t\ttoCustomize.problemMatcher = [];\n\t\t}\n\t\tif (task._source.label !== 'Workspace') {\n\t\t\ttoCustomize.label = task.configurationProperties.identifier;\n\t\t} else {\n\t\t\ttoCustomize.label = task._label;\n\t\t}\n\t\ttoCustomize.detail = task.configurationProperties.detail;\n\t\treturn toCustomize;\n\t}\n\n\tpublic async customize(task: ContributedTask | CustomTask | ConfiguringTask, properties?: ICustomizationProperties, openConfig?: boolean): Promise<void> {\n\t\tif (!(await this._trust())) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst workspaceFolder = task.getWorkspaceFolder();\n\t\tif (!workspaceFolder) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\tconst configuration = this._getConfiguration(workspaceFolder, task._source.kind);\n\t\tif (configuration.hasParseErrors) {\n\t\t\tthis._notificationService.warn(nls.localize('customizeParseErrors', 'The current task configuration has errors. Please fix the errors first before customizing a task.'));\n\t\t\treturn Promise.resolve<void>(undefined);\n\t\t}\n\n\t\tconst fileConfig = configuration.config;\n\t\tconst toCustomize = this._createCustomizableTask(task);\n\t\tif (!toCustomize) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\tconst index: number | undefined = CustomTask.is(task) ? task._source.config.index : undefined;\n\t\tif (properties) {\n\t\t\tfor (const property of Object.getOwnPropertyNames(properties)) {\n\t\t\t\tconst value = (<any>properties)[property];\n\t\t\t\tif (value !== undefined && value !== null) {\n\t\t\t\t\t(<any>toCustomize)[property] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!fileConfig) {\n\t\t\tconst value = {\n\t\t\t\tversion: '2.0.0',\n\t\t\t\ttasks: [toCustomize]\n\t\t\t};\n\t\t\tlet content = [\n\t\t\t\t'{',\n\t\t\t\tnls.localize('tasksJsonComment', '\\t// See https://go.microsoft.com/fwlink/?LinkId=733558 \\n\\t// for the documentation about the tasks.json format'),\n\t\t\t].join('\\n') + JSON.stringify(value, null, '\\t').substr(1);\n\t\t\tconst editorConfig = this._configurationService.getValue<any>();\n\t\t\tif (editorConfig.editor.insertSpaces) {\n\t\t\t\tcontent = content.replace(/(\\n)(\\t+)/g, (_, s1, s2) => s1 + ' '.repeat(s2.length * editorConfig.editor.tabSize));\n\t\t\t}\n\t\t\tawait this._textFileService.create([{ resource: workspaceFolder.toResource('.vscode/tasks.json'), value: content }]);\n\t\t} else {\n\t\t\t// We have a global task configuration\n\t\t\tif ((index === -1) && properties) {\n\t\t\t\tif (properties.problemMatcher !== undefined) {\n\t\t\t\t\tfileConfig.problemMatcher = properties.problemMatcher;\n\t\t\t\t\tawait this._writeConfiguration(workspaceFolder, 'tasks.problemMatchers', fileConfig.problemMatcher, task._source.kind);\n\t\t\t\t} else if (properties.group !== undefined) {\n\t\t\t\t\tfileConfig.group = properties.group;\n\t\t\t\t\tawait this._writeConfiguration(workspaceFolder, 'tasks.group', fileConfig.group, task._source.kind);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!Array.isArray(fileConfig.tasks)) {\n\t\t\t\t\tfileConfig.tasks = [];\n\t\t\t\t}\n\t\t\t\tif (index === undefined) {\n\t\t\t\t\tfileConfig.tasks.push(toCustomize);\n\t\t\t\t} else {\n\t\t\t\t\tfileConfig.tasks[index] = toCustomize;\n\t\t\t\t}\n\t\t\t\tawait this._writeConfiguration(workspaceFolder, 'tasks.tasks', fileConfig.tasks, task._source.kind);\n\t\t\t}\n\t\t}\n\n\t\tif (openConfig) {\n\t\t\tthis._openEditorAtTask(this._getResourceForTask(task), toCustomize);\n\t\t}\n\t}\n\n\tprivate _writeConfiguration(workspaceFolder: IWorkspaceFolder, key: string, value: any, source?: string): Promise<void> | undefined {\n\t\tlet target: ConfigurationTarget | undefined = undefined;\n\t\tswitch (source) {\n\t\t\tcase TaskSourceKind.User: target = ConfigurationTarget.USER; break;\n\t\t\tcase TaskSourceKind.WorkspaceFile: target = ConfigurationTarget.WORKSPACE; break;\n\t\t\tdefault: if (this._contextService.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\t\ttarget = ConfigurationTarget.WORKSPACE;\n\t\t\t} else if (this._contextService.getWorkbenchState() === WorkbenchState.WORKSPACE) {\n\t\t\t\ttarget = ConfigurationTarget.WORKSPACE_FOLDER;\n\t\t\t}\n\t\t}\n\t\tif (target) {\n\t\t\treturn this._configurationService.updateValue(key, value, { resource: workspaceFolder.uri }, target);\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tprivate _getResourceForKind(kind: string): URI | undefined {\n\t\tthis._updateSetup();\n\t\tswitch (kind) {\n\t\t\tcase TaskSourceKind.User: {\n\t\t\t\treturn resources.joinPath(resources.dirname(this._preferencesService.userSettingsResource), 'tasks.json');\n\t\t\t}\n\t\t\tcase TaskSourceKind.WorkspaceFile: {\n\t\t\t\tif (this._workspace && this._workspace.configuration) {\n\t\t\t\t\treturn this._workspace.configuration;\n\t\t\t\t}\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _getResourceForTask(task: CustomTask | ConfiguringTask | ContributedTask): URI {\n\t\tif (CustomTask.is(task)) {\n\t\t\tlet uri = this._getResourceForKind(task._source.kind);\n\t\t\tif (!uri) {\n\t\t\t\tconst taskFolder = task.getWorkspaceFolder();\n\t\t\t\tif (taskFolder) {\n\t\t\t\t\turi = taskFolder.toResource(task._source.config.file);\n\t\t\t\t} else {\n\t\t\t\t\turi = this.workspaceFolders[0].uri;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn uri;\n\t\t} else {\n\t\t\treturn task.getWorkspaceFolder()!.toResource('.vscode/tasks.json');\n\t\t}\n\t}\n\n\tpublic async openConfig(task: CustomTask | ConfiguringTask | undefined): Promise<boolean> {\n\t\tlet resource: URI | undefined;\n\t\tif (task) {\n\t\t\tresource = this._getResourceForTask(task);\n\t\t} else {\n\t\t\tresource = (this._workspaceFolders && (this._workspaceFolders.length > 0)) ? this._workspaceFolders[0].toResource('.vscode/tasks.json') : undefined;\n\t\t}\n\t\treturn this._openEditorAtTask(resource, task ? task._label : undefined, task ? task._source.config.index : -1);\n\t}\n\n\tprivate _createRunnableTask(tasks: TaskMap, group: TaskGroup): { task: Task; resolver: ITaskResolver } | undefined {\n\t\tinterface IResolverData {\n\t\t\tid: Map<string, Task>;\n\t\t\tlabel: Map<string, Task>;\n\t\t\tidentifier: Map<string, Task>;\n\t\t}\n\n\t\tconst resolverData: Map<string, IResolverData> = new Map();\n\t\tconst workspaceTasks: Task[] = [];\n\t\tconst extensionTasks: Task[] = [];\n\t\ttasks.forEach((tasks, folder) => {\n\t\t\tlet data = resolverData.get(folder);\n\t\t\tif (!data) {\n\t\t\t\tdata = {\n\t\t\t\t\tid: new Map<string, Task>(),\n\t\t\t\t\tlabel: new Map<string, Task>(),\n\t\t\t\t\tidentifier: new Map<string, Task>()\n\t\t\t\t};\n\t\t\t\tresolverData.set(folder, data);\n\t\t\t}\n\t\t\tfor (const task of tasks) {\n\t\t\t\tdata.id.set(task._id, task);\n\t\t\t\tdata.label.set(task._label, task);\n\t\t\t\tif (task.configurationProperties.identifier) {\n\t\t\t\t\tdata.identifier.set(task.configurationProperties.identifier, task);\n\t\t\t\t}\n\t\t\t\tif (group && task.configurationProperties.group === group) {\n\t\t\t\t\tif (task._source.kind === TaskSourceKind.Workspace) {\n\t\t\t\t\t\tworkspaceTasks.push(task);\n\t\t\t\t\t} else {\n\t\t\t\t\t\textensionTasks.push(task);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tconst resolver: ITaskResolver = {\n\t\t\tresolve: async (uri: URI | string, alias: string) => {\n\t\t\t\tconst data = resolverData.get(typeof uri === 'string' ? uri : uri.toString());\n\t\t\t\tif (!data) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn data.id.get(alias) || data.label.get(alias) || data.identifier.get(alias);\n\t\t\t}\n\t\t};\n\t\tif (workspaceTasks.length > 0) {\n\t\t\tif (workspaceTasks.length > 1) {\n\t\t\t\tthis._outputChannel.append(nls.localize('moreThanOneBuildTask', 'There are many build tasks defined in the tasks.json. Executing the first one.\\n'));\n\t\t\t}\n\t\t\treturn { task: workspaceTasks[0], resolver };\n\t\t}\n\t\tif (extensionTasks.length === 0) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// We can only have extension tasks if we are in version 2.0.0. Then we can even run\n\t\t// multiple build tasks.\n\t\tif (extensionTasks.length === 1) {\n\t\t\treturn { task: extensionTasks[0], resolver };\n\t\t} else {\n\t\t\tconst id: string = UUID.generateUuid();\n\t\t\tconst task: InMemoryTask = new InMemoryTask(\n\t\t\t\tid,\n\t\t\t\t{ kind: TaskSourceKind.InMemory, label: 'inMemory' },\n\t\t\t\tid,\n\t\t\t\t'inMemory',\n\t\t\t\t{ reevaluateOnRerun: true },\n\t\t\t\t{\n\t\t\t\t\tidentifier: id,\n\t\t\t\t\tdependsOn: extensionTasks.map((extensionTask) => { return { uri: extensionTask.getWorkspaceFolder()!.uri, task: extensionTask._id }; }),\n\t\t\t\t\tname: id\n\t\t\t\t}\n\t\t\t);\n\t\t\treturn { task, resolver };\n\t\t}\n\t}\n\n\tprivate _createResolver(grouped?: TaskMap): ITaskResolver {\n\t\tinterface ResolverData {\n\t\t\tlabel: Map<string, Task>;\n\t\t\tidentifier: Map<string, Task>;\n\t\t\ttaskIdentifier: Map<string, Task>;\n\t\t}\n\n\t\tlet resolverData: Map<string, ResolverData> | undefined;\n\n\t\tasync function quickResolve(that: AbstractTaskService, uri: URI | string, identifier: string | ITaskIdentifier) {\n\t\t\tconst foundTasks = await that._findWorkspaceTasks((task: Task | ConfiguringTask): boolean => {\n\t\t\t\tconst taskUri = ((ConfiguringTask.is(task) || CustomTask.is(task)) ? task._source.config.workspaceFolder?.uri : undefined);\n\t\t\t\tconst originalUri = (typeof uri === 'string' ? uri : uri.toString());\n\t\t\t\tif (taskUri?.toString() !== originalUri) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (Types.isString(identifier)) {\n\t\t\t\t\treturn ((task._label === identifier) || (task.configurationProperties.identifier === identifier));\n\t\t\t\t} else {\n\t\t\t\t\tconst keyedIdentifier = task.getDefinition(true);\n\t\t\t\t\tconst searchIdentifier = TaskDefinition.createTaskIdentifier(identifier, console);\n\t\t\t\t\treturn (searchIdentifier && keyedIdentifier) ? (searchIdentifier._key === keyedIdentifier._key) : false;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (foundTasks.length === 0) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tconst task = foundTasks[0];\n\t\t\tif (ConfiguringTask.is(task)) {\n\t\t\t\treturn that.tryResolveTask(task);\n\t\t\t}\n\t\t\treturn task;\n\t\t}\n\n\t\tasync function getResolverData(that: AbstractTaskService) {\n\t\t\tif (resolverData === undefined) {\n\t\t\t\tresolverData = new Map();\n\t\t\t\t(grouped || await that._getGroupedTasks()).forEach((tasks, folder) => {\n\t\t\t\t\tlet data = resolverData!.get(folder);\n\t\t\t\t\tif (!data) {\n\t\t\t\t\t\tdata = { label: new Map<string, Task>(), identifier: new Map<string, Task>(), taskIdentifier: new Map<string, Task>() };\n\t\t\t\t\t\tresolverData!.set(folder, data);\n\t\t\t\t\t}\n\t\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\t\tdata.label.set(task._label, task);\n\t\t\t\t\t\tif (task.configurationProperties.identifier) {\n\t\t\t\t\t\t\tdata.identifier.set(task.configurationProperties.identifier, task);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst keyedIdentifier = task.getDefinition(true);\n\t\t\t\t\t\tif (keyedIdentifier !== undefined) {\n\t\t\t\t\t\t\tdata.taskIdentifier.set(keyedIdentifier._key, task);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn resolverData;\n\t\t}\n\n\t\tasync function fullResolve(that: AbstractTaskService, uri: URI | string, identifier: string | ITaskIdentifier) {\n\t\t\tconst allResolverData = await getResolverData(that);\n\t\t\tconst data = allResolverData.get(typeof uri === 'string' ? uri : uri.toString());\n\t\t\tif (!data) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tif (Types.isString(identifier)) {\n\t\t\t\treturn data.label.get(identifier) || data.identifier.get(identifier);\n\t\t\t} else {\n\t\t\t\tconst key = TaskDefinition.createTaskIdentifier(identifier, console);\n\t\t\t\treturn key !== undefined ? data.taskIdentifier.get(key._key) : undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tresolve: async (uri: URI | string, identifier: string | ITaskIdentifier | undefined) => {\n\t\t\t\tif (!identifier) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tif ((resolverData === undefined) && (grouped === undefined)) {\n\t\t\t\t\treturn (await quickResolve(this, uri, identifier)) ?? fullResolve(this, uri, identifier);\n\t\t\t\t} else {\n\t\t\t\t\treturn fullResolve(this, uri, identifier);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate async _saveBeforeRun(): Promise<boolean> {\n\t\tenum SaveBeforeRunConfigOptions {\n\t\t\tAlways = 'always',\n\t\t\tNever = 'never',\n\t\t\tPrompt = 'prompt'\n\t\t}\n\n\t\tconst saveBeforeRunTaskConfig: SaveBeforeRunConfigOptions = this._configurationService.getValue(TaskSettingId.SaveBeforeRun);\n\n\t\tif (saveBeforeRunTaskConfig === SaveBeforeRunConfigOptions.Never) {\n\t\t\treturn false;\n\t\t} else if (saveBeforeRunTaskConfig === SaveBeforeRunConfigOptions.Prompt && this._editorService.editors.some(e => e.isDirty())) {\n\t\t\tconst { confirmed } = await this._dialogService.confirm({\n\t\t\t\tmessage: nls.localize('TaskSystem.saveBeforeRun.prompt.title', \"Save all editors?\"),\n\t\t\t\tdetail: nls.localize('detail', \"Do you want to save all editors before running the task?\"),\n\t\t\t\tprimaryButton: nls.localize({ key: 'saveBeforeRun.save', comment: ['&& denotes a mnemonic'] }, '&&Save'),\n\t\t\t\tcancelButton: nls.localize('saveBeforeRun.dontSave', 'Don\\'t save'),\n\t\t\t});\n\n\t\t\tif (!confirmed) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tawait this._editorService.saveAll({ reason: SaveReason.AUTO });\n\t\treturn true;\n\t}\n\n\tprivate async _executeTask(task: Task, resolver: ITaskResolver, runSource: TaskRunSource): Promise<ITaskSummary> {\n\t\tlet taskToRun: Task = task;\n\t\tif (await this._saveBeforeRun()) {\n\t\t\tawait this._configurationService.reloadConfiguration();\n\t\t\tawait this._updateWorkspaceTasks();\n\t\t\tconst taskFolder = task.getWorkspaceFolder();\n\t\t\tconst taskIdentifier = task.configurationProperties.identifier;\n\t\t\tconst taskType = CustomTask.is(task) ? task.customizes()?.type : (ContributedTask.is(task) ? task.type : undefined);\n\t\t\t// Since we save before running tasks, the task may have changed as part of the save.\n\t\t\t// However, if the TaskRunSource is not User, then we shouldn't try to fetch the task again\n\t\t\t// since this can cause a new'd task to get overwritten with a provided task.\n\t\t\ttaskToRun = ((taskFolder && taskIdentifier && (runSource === TaskRunSource.User))\n\t\t\t\t? await this.getTask(taskFolder, taskIdentifier, false, taskType) : task) ?? task;\n\t\t}\n\t\tawait ProblemMatcherRegistry.onReady();\n\t\tconst executeResult = runSource === TaskRunSource.Reconnect ? this._getTaskSystem().reconnect(taskToRun, resolver) : this._getTaskSystem().run(taskToRun, resolver);\n\t\tif (executeResult) {\n\t\t\treturn this._handleExecuteResult(executeResult, runSource);\n\t\t}\n\t\treturn { exitCode: 0 };\n\t}\n\n\tprivate async _handleExecuteResult(executeResult: ITaskExecuteResult, runSource?: TaskRunSource): Promise<ITaskSummary> {\n\t\tif (runSource === TaskRunSource.User) {\n\t\t\tawait this._setRecentlyUsedTask(executeResult.task);\n\t\t}\n\t\tif (executeResult.kind === TaskExecuteKind.Active) {\n\t\t\tconst active = executeResult.active;\n\t\t\tif (active && active.same && runSource === TaskRunSource.FolderOpen || runSource === TaskRunSource.Reconnect) {\n\t\t\t\t// ignore, the task is already active, likely from being reconnected or from folder open.\n\t\t\t\tthis._logService.debug('Ignoring task that is already active', executeResult.task);\n\t\t\t\treturn executeResult.promise;\n\t\t\t}\n\t\t\tif (active && active.same) {\n\t\t\t\tif (this._taskSystem?.isTaskVisible(executeResult.task)) {\n\t\t\t\t\tconst message = nls.localize('TaskSystem.activeSame.noBackground', 'The task \\'{0}\\' is already active.', executeResult.task.getQualifiedLabel());\n\t\t\t\t\tconst lastInstance = this._getTaskSystem().getLastInstance(executeResult.task) ?? executeResult.task;\n\t\t\t\t\tthis._notificationService.prompt(Severity.Warning, message,\n\t\t\t\t\t\t[{\n\t\t\t\t\t\t\tlabel: nls.localize('terminateTask', \"Terminate Task\"),\n\t\t\t\t\t\t\trun: () => this.terminate(lastInstance)\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: nls.localize('restartTask', \"Restart Task\"),\n\t\t\t\t\t\t\trun: () => this._restart(lastInstance)\n\t\t\t\t\t\t}],\n\t\t\t\t\t\t{ sticky: true }\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tthis._taskSystem?.revealTask(executeResult.task);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new TaskError(Severity.Warning, nls.localize('TaskSystem.active', 'There is already a task running. Terminate it first before executing another task.'), TaskErrors.RunningTask);\n\t\t\t}\n\t\t}\n\t\tthis._setRecentlyUsedTask(executeResult.task);\n\t\treturn executeResult.promise;\n\t}\n\n\tprivate async _restart(task: Task): Promise<void> {\n\t\tif (!this._taskSystem) {\n\t\t\treturn;\n\t\t}\n\t\tconst response = await this._taskSystem.terminate(task);\n\t\tif (response.success) {\n\t\t\ttry {\n\t\t\t\tawait this.run(task);\n\t\t\t} catch {\n\t\t\t\t// eat the error, we don't care about it here\n\t\t\t}\n\t\t} else {\n\t\t\tthis._notificationService.warn(nls.localize('TaskSystem.restartFailed', 'Failed to terminate and restart task {0}', Types.isString(task) ? task : task.configurationProperties.name));\n\t\t}\n\t}\n\n\tpublic async terminate(task: Task): Promise<ITaskTerminateResponse> {\n\t\tif (!(await this._trust())) {\n\t\t\treturn { success: true, task: undefined };\n\t\t}\n\n\t\tif (!this._taskSystem) {\n\t\t\treturn { success: true, task: undefined };\n\t\t}\n\t\treturn this._taskSystem.terminate(task);\n\t}\n\n\tprivate _terminateAll(): Promise<ITaskTerminateResponse[]> {\n\t\tif (!this._taskSystem) {\n\t\t\treturn Promise.resolve<ITaskTerminateResponse[]>([]);\n\t\t}\n\t\treturn this._taskSystem.terminateAll();\n\t}\n\n\tprotected _createTerminalTaskSystem(): ITaskSystem {\n\t\treturn new TerminalTaskSystem(\n\t\t\tthis._terminalService, this._terminalGroupService, this._outputService, this._paneCompositeService, this._viewsService, this._markerService,\n\t\t\tthis._modelService, this._configurationResolverService,\n\t\t\tthis._contextService, this._environmentService,\n\t\t\tAbstractTaskService.OutputChannelId, this._fileService, this._terminalProfileResolverService,\n\t\t\tthis._pathService, this._viewDescriptorService, this._logService, this._notificationService,\n\t\t\tthis._instantiationService,\n\t\t\t(workspaceFolder: IWorkspaceFolder | undefined) => {\n\t\t\t\tif (workspaceFolder) {\n\t\t\t\t\treturn this._getTaskSystemInfo(workspaceFolder.uri.scheme);\n\t\t\t\t} else if (this._taskSystemInfos.size > 0) {\n\t\t\t\t\tconst infos = Array.from(this._taskSystemInfos.entries());\n\t\t\t\t\tconst notFile = infos.filter(info => info[0] !== Schemas.file);\n\t\t\t\t\tif (notFile.length > 0) {\n\t\t\t\t\t\treturn notFile[0][1][0];\n\t\t\t\t\t}\n\t\t\t\t\treturn infos[0][1][0];\n\t\t\t\t} else {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t}\n\n\tprotected abstract _getTaskSystem(): ITaskSystem;\n\n\tprivate _isTaskProviderEnabled(type: string) {\n\t\tconst definition = TaskDefinitionRegistry.get(type);\n\t\treturn !definition || !definition.when || this._contextKeyService.contextMatchesRules(definition.when);\n\t}\n\n\tprivate async _getGroupedTasks(filter?: ITaskFilter): Promise<TaskMap> {\n\t\tawait this._waitForAllSupportedExecutions;\n\t\tconst type = filter?.type;\n\t\tconst needsRecentTasksMigration = this._needsRecentTasksMigration();\n\t\tawait this._activateTaskProviders(filter?.type);\n\t\tconst validTypes: IStringDictionary<boolean> = Object.create(null);\n\t\tTaskDefinitionRegistry.all().forEach(definition => validTypes[definition.taskType] = true);\n\t\tvalidTypes['shell'] = true;\n\t\tvalidTypes['process'] = true;\n\t\tconst contributedTaskSets = await new Promise<ITaskSet[]>(resolve => {\n\t\t\tconst result: ITaskSet[] = [];\n\t\t\tlet counter: number = 0;\n\t\t\tconst done = (value: ITaskSet | undefined) => {\n\t\t\t\tif (value) {\n\t\t\t\t\tresult.push(value);\n\t\t\t\t}\n\t\t\t\tif (--counter === 0) {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t};\n\t\t\tconst error = (error: any) => {\n\t\t\t\ttry {\n\t\t\t\t\tif (error && Types.isString(error.message)) {\n\t\t\t\t\t\tthis._outputChannel.append('Error: ');\n\t\t\t\t\t\tthis._outputChannel.append(error.message);\n\t\t\t\t\t\tthis._outputChannel.append('\\n');\n\t\t\t\t\t\tthis._showOutput();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._outputChannel.append('Unknown error received while collecting tasks from providers.\\n');\n\t\t\t\t\t\tthis._showOutput();\n\t\t\t\t\t}\n\t\t\t\t} finally {\n\t\t\t\t\tif (--counter === 0) {\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t\tif (this._isProvideTasksEnabled() && (this.schemaVersion === JsonSchemaVersion.V2_0_0) && (this._providers.size > 0)) {\n\t\t\t\tlet foundAnyProviders = false;\n\t\t\t\tfor (const [handle, provider] of this._providers) {\n\t\t\t\t\tconst providerType = this._providerTypes.get(handle);\n\t\t\t\t\tif ((type === undefined) || (type === providerType)) {\n\t\t\t\t\t\tif (providerType && !this._isTaskProviderEnabled(providerType)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfoundAnyProviders = true;\n\t\t\t\t\t\tcounter++;\n\t\t\t\t\t\traceTimeout(provider.provideTasks(validTypes).then((taskSet: ITaskSet) => {\n\t\t\t\t\t\t\t// Check that the tasks provided are of the correct type\n\t\t\t\t\t\t\tfor (const task of taskSet.tasks) {\n\t\t\t\t\t\t\t\tif (task.type !== this._providerTypes.get(handle)) {\n\t\t\t\t\t\t\t\t\tthis._outputChannel.append(nls.localize('unexpectedTaskType', \"The task provider for \\\"{0}\\\" tasks unexpectedly provided a task of type \\\"{1}\\\".\\n\", this._providerTypes.get(handle), task.type));\n\t\t\t\t\t\t\t\t\tif ((task.type !== 'shell') && (task.type !== 'process')) {\n\t\t\t\t\t\t\t\t\t\tthis._showOutput();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn done(taskSet);\n\t\t\t\t\t\t}, error), 5000, () => {\n\t\t\t\t\t\t\t// onTimeout\n\t\t\t\t\t\t\tconsole.error('Timed out getting tasks from ', providerType);\n\t\t\t\t\t\t\tdone(undefined);\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!foundAnyProviders) {\n\t\t\t\t\tresolve(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(result);\n\t\t\t}\n\t\t});\n\n\t\tconst result: TaskMap = new TaskMap();\n\t\tconst contributedTasks: TaskMap = new TaskMap();\n\n\t\tfor (const set of contributedTaskSets) {\n\t\t\tfor (const task of set.tasks) {\n\t\t\t\tconst workspaceFolder = task.getWorkspaceFolder();\n\t\t\t\tif (workspaceFolder) {\n\t\t\t\t\tcontributedTasks.add(workspaceFolder, task);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tconst customTasks = await this.getWorkspaceTasks();\n\t\t\tconst customTasksKeyValuePairs = Array.from(customTasks);\n\t\t\tconst customTasksPromises = customTasksKeyValuePairs.map(async ([key, folderTasks]) => {\n\t\t\t\tconst contributed = contributedTasks.get(key);\n\t\t\t\tif (!folderTasks.set) {\n\t\t\t\t\tif (contributed) {\n\t\t\t\t\t\tresult.add(key, ...contributed);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (this._contextService.getWorkbenchState() === WorkbenchState.EMPTY) {\n\t\t\t\t\tresult.add(key, ...folderTasks.set.tasks);\n\t\t\t\t} else {\n\t\t\t\t\tconst configurations = folderTasks.configurations;\n\t\t\t\t\tconst legacyTaskConfigurations = folderTasks.set ? this._getLegacyTaskConfigurations(folderTasks.set) : undefined;\n\t\t\t\t\tconst customTasksToDelete: Task[] = [];\n\t\t\t\t\tif (configurations || legacyTaskConfigurations) {\n\t\t\t\t\t\tconst unUsedConfigurations: Set<string> = new Set<string>();\n\t\t\t\t\t\tif (configurations) {\n\t\t\t\t\t\t\tObject.keys(configurations.byIdentifier).forEach(key => unUsedConfigurations.add(key));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor (const task of contributed) {\n\t\t\t\t\t\t\tif (!ContributedTask.is(task)) {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (configurations) {\n\t\t\t\t\t\t\t\tconst configuringTask = configurations.byIdentifier[task.defines._key];\n\t\t\t\t\t\t\t\tif (configuringTask) {\n\t\t\t\t\t\t\t\t\tunUsedConfigurations.delete(task.defines._key);\n\t\t\t\t\t\t\t\t\tresult.add(key, TaskConfig.createCustomTask(task, configuringTask));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tresult.add(key, task);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else if (legacyTaskConfigurations) {\n\t\t\t\t\t\t\t\tconst configuringTask = legacyTaskConfigurations[task.defines._key];\n\t\t\t\t\t\t\t\tif (configuringTask) {\n\t\t\t\t\t\t\t\t\tresult.add(key, TaskConfig.createCustomTask(task, configuringTask));\n\t\t\t\t\t\t\t\t\tcustomTasksToDelete.push(configuringTask);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tresult.add(key, task);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tresult.add(key, task);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (customTasksToDelete.length > 0) {\n\t\t\t\t\t\t\tconst toDelete = customTasksToDelete.reduce<IStringDictionary<boolean>>((map, task) => {\n\t\t\t\t\t\t\t\tmap[task._id] = true;\n\t\t\t\t\t\t\t\treturn map;\n\t\t\t\t\t\t\t}, Object.create(null));\n\t\t\t\t\t\t\tfor (const task of folderTasks.set.tasks) {\n\t\t\t\t\t\t\t\tif (toDelete[task._id]) {\n\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tresult.add(key, task);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.add(key, ...folderTasks.set.tasks);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst unUsedConfigurationsAsArray = Array.from(unUsedConfigurations);\n\n\t\t\t\t\t\tconst unUsedConfigurationPromises = unUsedConfigurationsAsArray.map(async (value) => {\n\t\t\t\t\t\t\tconst configuringTask = configurations!.byIdentifier[value];\n\t\t\t\t\t\t\tif (type && (type !== configuringTask.configures.type)) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tlet requiredTaskProviderUnavailable: boolean = false;\n\n\t\t\t\t\t\t\tfor (const [handle, provider] of this._providers) {\n\t\t\t\t\t\t\t\tconst providerType = this._providerTypes.get(handle);\n\t\t\t\t\t\t\t\tif (configuringTask.type === providerType) {\n\t\t\t\t\t\t\t\t\tif (providerType && !this._isTaskProviderEnabled(providerType)) {\n\t\t\t\t\t\t\t\t\t\trequiredTaskProviderUnavailable = true;\n\t\t\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\t\tconst resolvedTask = await provider.resolveTask(configuringTask);\n\t\t\t\t\t\t\t\t\t\tif (resolvedTask && (resolvedTask._id === configuringTask._id)) {\n\t\t\t\t\t\t\t\t\t\t\tresult.add(key, TaskConfig.createCustomTask(resolvedTask, configuringTask));\n\t\t\t\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t\t\t\t// Ignore errors. The task could not be provided by any of the providers.\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (requiredTaskProviderUnavailable) {\n\t\t\t\t\t\t\t\tthis._outputChannel.append(nls.localize(\n\t\t\t\t\t\t\t\t\t'TaskService.providerUnavailable',\n\t\t\t\t\t\t\t\t\t'Warning: {0} tasks are unavailable in the current environment.\\n',\n\t\t\t\t\t\t\t\t\tconfiguringTask.configures.type\n\t\t\t\t\t\t\t\t));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis._outputChannel.append(nls.localize(\n\t\t\t\t\t\t\t\t\t'TaskService.noConfiguration',\n\t\t\t\t\t\t\t\t\t'Error: The {0} task detection didn\\'t contribute a task for the following configuration:\\n{1}\\nThe task will be ignored.\\n',\n\t\t\t\t\t\t\t\t\tconfiguringTask.configures.type,\n\t\t\t\t\t\t\t\t\tJSON.stringify(configuringTask._source.config.element, undefined, 4)\n\t\t\t\t\t\t\t\t));\n\t\t\t\t\t\t\t\tthis._showOutput();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tawait Promise.all(unUsedConfigurationPromises);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.add(key, ...folderTasks.set.tasks);\n\t\t\t\t\t\tresult.add(key, ...contributed);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tawait Promise.all(customTasksPromises);\n\t\t\tif (needsRecentTasksMigration) {\n\t\t\t\t// At this point we have all the tasks and can migrate the recently used tasks.\n\t\t\t\tawait this._migrateRecentTasks(result.all());\n\t\t\t}\n\t\t\treturn result;\n\t\t} catch {\n\t\t\t// If we can't read the tasks.json file provide at least the contributed tasks\n\t\t\tconst result: TaskMap = new TaskMap();\n\t\t\tfor (const set of contributedTaskSets) {\n\t\t\t\tfor (const task of set.tasks) {\n\t\t\t\t\tconst folder = task.getWorkspaceFolder();\n\t\t\t\t\tif (folder) {\n\t\t\t\t\t\tresult.add(folder, task);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t}\n\n\tprivate _getLegacyTaskConfigurations(workspaceTasks: ITaskSet): IStringDictionary<CustomTask> | undefined {\n\t\tlet result: IStringDictionary<CustomTask> | undefined;\n\t\tfunction getResult(): IStringDictionary<CustomTask> {\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tresult = Object.create(null);\n\t\t\treturn result!;\n\t\t}\n\t\tfor (const task of workspaceTasks.tasks) {\n\t\t\tif (CustomTask.is(task)) {\n\t\t\t\tconst commandName = task.command && task.command.name;\n\t\t\t\t// This is for backwards compatibility with the 0.1.0 task annotation code\n\t\t\t\t// if we had a gulp, jake or grunt command a task specification was a annotation\n\t\t\t\tif (commandName === 'gulp' || commandName === 'grunt' || commandName === 'jake') {\n\t\t\t\t\tconst identifier = KeyedTaskIdentifier.create({\n\t\t\t\t\t\ttype: commandName,\n\t\t\t\t\t\ttask: task.configurationProperties.name\n\t\t\t\t\t});\n\t\t\t\t\tgetResult()[identifier._key] = task;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic async getWorkspaceTasks(runSource: TaskRunSource = TaskRunSource.User): Promise<Map<string, IWorkspaceFolderTaskResult>> {\n\t\tif (!(await this._trust())) {\n\t\t\treturn new Map();\n\t\t}\n\t\tawait raceTimeout(this._waitForAllSupportedExecutions, 2000, () => {\n\t\t\tthis._logService.warn('Timed out waiting for all supported executions');\n\t\t});\n\t\tawait this._whenTaskSystemReady;\n\t\tif (this._workspaceTasksPromise) {\n\t\t\treturn this._workspaceTasksPromise;\n\t\t}\n\t\treturn this._updateWorkspaceTasks(runSource);\n\t}\n\n\tprivate _updateWorkspaceTasks(runSource: TaskRunSource = TaskRunSource.User): Promise<Map<string, IWorkspaceFolderTaskResult>> {\n\t\tthis._workspaceTasksPromise = this._computeWorkspaceTasks(runSource);\n\t\treturn this._workspaceTasksPromise;\n\t}\n\n\tprivate async _getAFolder(): Promise<IWorkspaceFolder> {\n\t\tlet folder = this.workspaceFolders.length > 0 ? this.workspaceFolders[0] : undefined;\n\t\tif (!folder) {\n\t\t\tconst userhome = await this._pathService.userHome();\n\t\t\tfolder = new WorkspaceFolder({ uri: userhome, name: resources.basename(userhome), index: 0 });\n\t\t}\n\t\treturn folder;\n\t}\n\n\tprotected async _computeWorkspaceTasks(runSource: TaskRunSource = TaskRunSource.User): Promise<Map<string, IWorkspaceFolderTaskResult>> {\n\t\tconst promises: Promise<IWorkspaceFolderTaskResult | undefined>[] = [];\n\t\tfor (const folder of this.workspaceFolders) {\n\t\t\tpromises.push(this._computeWorkspaceFolderTasks(folder, runSource));\n\t\t}\n\t\tconst values = await Promise.all(promises);\n\t\tconst result = new Map<string, IWorkspaceFolderTaskResult>();\n\t\tfor (const value of values) {\n\t\t\tif (value) {\n\t\t\t\tresult.set(value.workspaceFolder.uri.toString(), value);\n\t\t\t}\n\t\t}\n\n\t\tconst folder = await this._getAFolder();\n\t\tif (this._contextService.getWorkbenchState() !== WorkbenchState.EMPTY) {\n\t\t\tconst workspaceFileTasks = await this._computeWorkspaceFileTasks(folder, runSource);\n\t\t\tif (workspaceFileTasks && this._workspace && this._workspace.configuration) {\n\t\t\t\tresult.set(this._workspace.configuration.toString(), workspaceFileTasks);\n\t\t\t}\n\t\t}\n\n\t\tconst userTasks = await this._computeUserTasks(folder, runSource);\n\t\tif (userTasks) {\n\t\t\tresult.set(USER_TASKS_GROUP_KEY, userTasks);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate get _jsonTasksSupported(): boolean {\n\t\treturn ShellExecutionSupportedContext.getValue(this._contextKeyService) === true && ProcessExecutionSupportedContext.getValue(this._contextKeyService) === true;\n\t}\n\n\tprivate async _computeWorkspaceFolderTasks(workspaceFolder: IWorkspaceFolder, runSource: TaskRunSource = TaskRunSource.User): Promise<IWorkspaceFolderTaskResult> {\n\t\tconst workspaceFolderConfiguration = (this._executionEngine === ExecutionEngine.Process ? await this._computeLegacyConfiguration(workspaceFolder) : await this._computeConfiguration(workspaceFolder));\n\t\tif (!workspaceFolderConfiguration || !workspaceFolderConfiguration.config || workspaceFolderConfiguration.hasErrors) {\n\t\t\treturn Promise.resolve({ workspaceFolder, set: undefined, configurations: undefined, hasErrors: workspaceFolderConfiguration ? workspaceFolderConfiguration.hasErrors : false });\n\t\t}\n\t\tawait ProblemMatcherRegistry.onReady();\n\t\tconst taskSystemInfo: ITaskSystemInfo | undefined = this._getTaskSystemInfo(workspaceFolder.uri.scheme);\n\t\tconst problemReporter = new ProblemReporter(this._outputChannel);\n\t\tconst parseResult = TaskConfig.parse(workspaceFolder, undefined, taskSystemInfo ? taskSystemInfo.platform : Platform.platform, workspaceFolderConfiguration.config!, problemReporter, TaskConfig.TaskConfigSource.TasksJson, this._contextKeyService);\n\t\tlet hasErrors = false;\n\t\tif (!parseResult.validationStatus.isOK() && (parseResult.validationStatus.state !== ValidationState.Info)) {\n\t\t\thasErrors = true;\n\t\t\tthis._showOutput(runSource);\n\t\t}\n\t\tif (problemReporter.status.isFatal()) {\n\t\t\tproblemReporter.fatal(nls.localize('TaskSystem.configurationErrors', 'Error: the provided task configuration has validation errors and can\\'t not be used. Please correct the errors first.'));\n\t\t\treturn { workspaceFolder, set: undefined, configurations: undefined, hasErrors };\n\t\t}\n\t\tlet customizedTasks: { byIdentifier: IStringDictionary<ConfiguringTask> } | undefined;\n\t\tif (parseResult.configured && parseResult.configured.length > 0) {\n\t\t\tcustomizedTasks = {\n\t\t\t\tbyIdentifier: Object.create(null)\n\t\t\t};\n\t\t\tfor (const task of parseResult.configured) {\n\t\t\t\tcustomizedTasks.byIdentifier[task.configures._key] = task;\n\t\t\t}\n\t\t}\n\t\tif (!this._jsonTasksSupported && (parseResult.custom.length > 0)) {\n\t\t\tconsole.warn('Custom workspace tasks are not supported.');\n\t\t}\n\t\treturn { workspaceFolder, set: { tasks: this._jsonTasksSupported ? parseResult.custom : [] }, configurations: customizedTasks, hasErrors };\n\t}\n\n\tprivate _testParseExternalConfig(config: TaskConfig.IExternalTaskRunnerConfiguration | undefined, location: string): { config: TaskConfig.IExternalTaskRunnerConfiguration | undefined; hasParseErrors: boolean } {\n\t\tif (!config) {\n\t\t\treturn { config: undefined, hasParseErrors: false };\n\t\t}\n\t\tconst parseErrors: string[] = (config as any).$parseErrors;\n\t\tif (parseErrors) {\n\t\t\tlet isAffected = false;\n\t\t\tfor (const parseError of parseErrors) {\n\t\t\t\tif (/tasks\\.json$/.test(parseError)) {\n\t\t\t\t\tisAffected = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isAffected) {\n\t\t\t\tthis._outputChannel.append(nls.localize({ key: 'TaskSystem.invalidTaskJsonOther', comment: ['Message notifies of an error in one of several places there is tasks related json, not necessarily in a file named tasks.json'] }, 'Error: The content of the tasks json in {0} has syntax errors. Please correct them before executing a task.\\n', location));\n\t\t\t\tthis._showOutput();\n\t\t\t\treturn { config, hasParseErrors: true };\n\t\t\t}\n\t\t}\n\t\treturn { config, hasParseErrors: false };\n\t}\n\n\tprivate async _computeWorkspaceFileTasks(workspaceFolder: IWorkspaceFolder, runSource: TaskRunSource = TaskRunSource.User): Promise<IWorkspaceFolderTaskResult> {\n\t\tif (this._executionEngine === ExecutionEngine.Process) {\n\t\t\treturn this._emptyWorkspaceTaskResults(workspaceFolder);\n\t\t}\n\t\tconst workspaceFileConfig = this._getConfiguration(workspaceFolder, TaskSourceKind.WorkspaceFile);\n\t\tconst configuration = this._testParseExternalConfig(workspaceFileConfig.config, nls.localize('TasksSystem.locationWorkspaceConfig', 'workspace file'));\n\t\tconst customizedTasks: { byIdentifier: IStringDictionary<ConfiguringTask> } = {\n\t\t\tbyIdentifier: Object.create(null)\n\t\t};\n\n\t\tconst custom: CustomTask[] = [];\n\t\tawait this._computeTasksForSingleConfig(workspaceFolder, configuration.config, runSource, custom, customizedTasks.byIdentifier, TaskConfig.TaskConfigSource.WorkspaceFile);\n\t\tconst engine = configuration.config ? TaskConfig.ExecutionEngine.from(configuration.config) : ExecutionEngine.Terminal;\n\t\tif (engine === ExecutionEngine.Process) {\n\t\t\tthis._notificationService.warn(nls.localize('TaskSystem.versionWorkspaceFile', 'Only tasks version 2.0.0 permitted in workspace configuration files.'));\n\t\t\treturn this._emptyWorkspaceTaskResults(workspaceFolder);\n\t\t}\n\t\treturn { workspaceFolder, set: { tasks: custom }, configurations: customizedTasks, hasErrors: configuration.hasParseErrors };\n\t}\n\n\tprivate async _computeUserTasks(workspaceFolder: IWorkspaceFolder, runSource: TaskRunSource = TaskRunSource.User): Promise<IWorkspaceFolderTaskResult> {\n\t\tif (this._executionEngine === ExecutionEngine.Process) {\n\t\t\treturn this._emptyWorkspaceTaskResults(workspaceFolder);\n\t\t}\n\t\tconst userTasksConfig = this._getConfiguration(workspaceFolder, TaskSourceKind.User);\n\t\tconst configuration = this._testParseExternalConfig(userTasksConfig.config, nls.localize('TasksSystem.locationUserConfig', 'user settings'));\n\t\tconst customizedTasks: { byIdentifier: IStringDictionary<ConfiguringTask> } = {\n\t\t\tbyIdentifier: Object.create(null)\n\t\t};\n\n\t\tconst custom: CustomTask[] = [];\n\t\tawait this._computeTasksForSingleConfig(workspaceFolder, configuration.config, runSource, custom, customizedTasks.byIdentifier, TaskConfig.TaskConfigSource.User);\n\t\tconst engine = configuration.config ? TaskConfig.ExecutionEngine.from(configuration.config) : ExecutionEngine.Terminal;\n\t\tif (engine === ExecutionEngine.Process) {\n\t\t\tthis._notificationService.warn(nls.localize('TaskSystem.versionSettings', 'Only tasks version 2.0.0 permitted in user settings.'));\n\t\t\treturn this._emptyWorkspaceTaskResults(workspaceFolder);\n\t\t}\n\t\treturn { workspaceFolder, set: { tasks: custom }, configurations: customizedTasks, hasErrors: configuration.hasParseErrors };\n\t}\n\n\tprivate _emptyWorkspaceTaskResults(workspaceFolder: IWorkspaceFolder): IWorkspaceFolderTaskResult {\n\t\treturn { workspaceFolder, set: undefined, configurations: undefined, hasErrors: false };\n\t}\n\n\tprivate async _computeTasksForSingleConfig(workspaceFolder: IWorkspaceFolder, config: TaskConfig.IExternalTaskRunnerConfiguration | undefined, runSource: TaskRunSource, custom: CustomTask[], customized: IStringDictionary<ConfiguringTask>, source: TaskConfig.TaskConfigSource, isRecentTask: boolean = false): Promise<boolean> {\n\t\tif (!config) {\n\t\t\treturn false;\n\t\t}\n\t\tconst taskSystemInfo: ITaskSystemInfo | undefined = this._getTaskSystemInfo(workspaceFolder.uri.scheme);\n\t\tconst problemReporter = new ProblemReporter(this._outputChannel);\n\t\tif (!taskSystemInfo) {\n\t\t\tproblemReporter.fatal(nls.localize('TaskSystem.workspaceFolderError', 'Workspace folder was undefined'));\n\t\t\treturn true;\n\t\t}\n\t\tconst parseResult = TaskConfig.parse(workspaceFolder, this._workspace, taskSystemInfo ? taskSystemInfo.platform : Platform.platform, config, problemReporter, source, this._contextKeyService, isRecentTask);\n\t\tlet hasErrors = false;\n\t\tif (!parseResult.validationStatus.isOK() && (parseResult.validationStatus.state !== ValidationState.Info)) {\n\t\t\tthis._showOutput(runSource);\n\t\t\thasErrors = true;\n\t\t}\n\t\tif (problemReporter.status.isFatal()) {\n\t\t\tproblemReporter.fatal(nls.localize('TaskSystem.configurationErrors', 'Error: the provided task configuration has validation errors and can\\'t not be used. Please correct the errors first.'));\n\t\t\treturn hasErrors;\n\t\t}\n\t\tif (parseResult.configured && parseResult.configured.length > 0) {\n\t\t\tfor (const task of parseResult.configured) {\n\t\t\t\tcustomized[task.configures._key] = task;\n\t\t\t}\n\t\t}\n\t\tif (!this._jsonTasksSupported && (parseResult.custom.length > 0)) {\n\t\t\tconsole.warn('Custom workspace tasks are not supported.');\n\t\t} else {\n\t\t\tfor (const task of parseResult.custom) {\n\t\t\t\tcustom.push(task);\n\t\t\t}\n\t\t}\n\t\treturn hasErrors;\n\t}\n\n\tprivate _computeConfiguration(workspaceFolder: IWorkspaceFolder): Promise<IWorkspaceFolderConfigurationResult> {\n\t\tconst { config, hasParseErrors } = this._getConfiguration(workspaceFolder);\n\t\treturn Promise.resolve<IWorkspaceFolderConfigurationResult>({ workspaceFolder, config, hasErrors: hasParseErrors });\n\t}\n\n\tprotected abstract _computeLegacyConfiguration(workspaceFolder: IWorkspaceFolder): Promise<IWorkspaceFolderConfigurationResult>;\n\n\tprivate _computeWorkspaceFolderSetup(): [IWorkspaceFolder[], IWorkspaceFolder[], ExecutionEngine, JsonSchemaVersion, IWorkspace | undefined] {\n\t\tconst workspaceFolders: IWorkspaceFolder[] = [];\n\t\tconst ignoredWorkspaceFolders: IWorkspaceFolder[] = [];\n\t\tlet executionEngine = ExecutionEngine.Terminal;\n\t\tlet schemaVersion = JsonSchemaVersion.V2_0_0;\n\t\tlet workspace: IWorkspace | undefined;\n\t\tif (this._contextService.getWorkbenchState() === WorkbenchState.FOLDER) {\n\t\t\tconst workspaceFolder: IWorkspaceFolder = this._contextService.getWorkspace().folders[0];\n\t\t\tworkspaceFolders.push(workspaceFolder);\n\t\t\texecutionEngine = this._computeExecutionEngine(workspaceFolder);\n\t\t\tconst telemetryData: { [key: string]: any } = {\n\t\t\t\texecutionEngineVersion: executionEngine\n\t\t\t};\n\t\t\t/* __GDPR__\n\t\t\t\t\"taskService.engineVersion\" : {\n\t\t\t\t\t\"owner\": \"alexr00\",\n\t\t\t\t\t\"comment\": \"The engine version of tasks. Used to determine if a user is using a deprecated version.\",\n\t\t\t\t\t\"executionEngineVersion\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"comment\": \"The engine version of tasks.\" }\n\t\t\t\t}\n\t\t\t*/\n\t\t\tthis._telemetryService.publicLog('taskService.engineVersion', telemetryData);\n\t\t\tschemaVersion = this._computeJsonSchemaVersion(workspaceFolder);\n\t\t} else if (this._contextService.getWorkbenchState() === WorkbenchState.WORKSPACE) {\n\t\t\tworkspace = this._contextService.getWorkspace();\n\t\t\tfor (const workspaceFolder of this._contextService.getWorkspace().folders) {\n\t\t\t\tif (schemaVersion === this._computeJsonSchemaVersion(workspaceFolder)) {\n\t\t\t\t\tworkspaceFolders.push(workspaceFolder);\n\t\t\t\t} else {\n\t\t\t\t\tignoredWorkspaceFolders.push(workspaceFolder);\n\t\t\t\t\tthis._outputChannel.append(nls.localize(\n\t\t\t\t\t\t'taskService.ignoreingFolder',\n\t\t\t\t\t\t'Ignoring task configurations for workspace folder {0}. Multi folder workspace task support requires that all folders use task version 2.0.0\\n',\n\t\t\t\t\t\tworkspaceFolder.uri.fsPath));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn [workspaceFolders, ignoredWorkspaceFolders, executionEngine, schemaVersion, workspace];\n\t}\n\n\tprivate _computeExecutionEngine(workspaceFolder: IWorkspaceFolder): ExecutionEngine {\n\t\tconst { config } = this._getConfiguration(workspaceFolder);\n\t\tif (!config) {\n\t\t\treturn ExecutionEngine._default;\n\t\t}\n\t\treturn TaskConfig.ExecutionEngine.from(config);\n\t}\n\n\tprivate _computeJsonSchemaVersion(workspaceFolder: IWorkspaceFolder): JsonSchemaVersion {\n\t\tconst { config } = this._getConfiguration(workspaceFolder);\n\t\tif (!config) {\n\t\t\treturn JsonSchemaVersion.V2_0_0;\n\t\t}\n\t\treturn TaskConfig.JsonSchemaVersion.from(config);\n\t}\n\n\tprotected _getConfiguration(workspaceFolder: IWorkspaceFolder, source?: string): { config: TaskConfig.IExternalTaskRunnerConfiguration | undefined; hasParseErrors: boolean } {\n\t\tlet result;\n\t\tif ((source !== TaskSourceKind.User) && (this._contextService.getWorkbenchState() === WorkbenchState.EMPTY)) {\n\t\t\tresult = undefined;\n\t\t} else {\n\t\t\tconst wholeConfig = this._configurationService.inspect<TaskConfig.IExternalTaskRunnerConfiguration>('tasks', { resource: workspaceFolder.uri });\n\t\t\tswitch (source) {\n\t\t\t\tcase TaskSourceKind.User: {\n\t\t\t\t\tif (wholeConfig.userValue !== wholeConfig.workspaceFolderValue) {\n\t\t\t\t\t\tresult = Objects.deepClone(wholeConfig.userValue);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase TaskSourceKind.Workspace: result = Objects.deepClone(wholeConfig.workspaceFolderValue); break;\n\t\t\t\tcase TaskSourceKind.WorkspaceFile: {\n\t\t\t\t\tif ((this._contextService.getWorkbenchState() === WorkbenchState.WORKSPACE)\n\t\t\t\t\t\t&& (wholeConfig.workspaceFolderValue !== wholeConfig.workspaceValue)) {\n\t\t\t\t\t\tresult = Objects.deepClone(wholeConfig.workspaceValue);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault: result = Objects.deepClone(wholeConfig.workspaceFolderValue);\n\t\t\t}\n\t\t}\n\t\tif (!result) {\n\t\t\treturn { config: undefined, hasParseErrors: false };\n\t\t}\n\t\tconst parseErrors: string[] = (result as any).$parseErrors;\n\t\tif (parseErrors) {\n\t\t\tlet isAffected = false;\n\t\t\tfor (const parseError of parseErrors) {\n\t\t\t\tif (/tasks\\.json$/.test(parseError)) {\n\t\t\t\t\tisAffected = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isAffected) {\n\t\t\t\tthis._outputChannel.append(nls.localize('TaskSystem.invalidTaskJson', 'Error: The content of the tasks.json file has syntax errors. Please correct them before executing a task.\\n'));\n\t\t\t\tthis._showOutput();\n\t\t\t\treturn { config: undefined, hasParseErrors: true };\n\t\t\t}\n\t\t}\n\t\treturn { config: result, hasParseErrors: false };\n\t}\n\n\tpublic inTerminal(): boolean {\n\t\tif (this._taskSystem) {\n\t\t\treturn this._taskSystem instanceof TerminalTaskSystem;\n\t\t}\n\t\treturn this._executionEngine === ExecutionEngine.Terminal;\n\t}\n\n\tpublic configureAction(): Action {\n\t\tconst thisCapture: AbstractTaskService = this;\n\t\treturn new class extends Action {\n\t\t\tconstructor() {\n\t\t\t\tsuper(ConfigureTaskAction.ID, ConfigureTaskAction.TEXT, undefined, true, () => { thisCapture._runConfigureTasks(); return Promise.resolve(undefined); });\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate _handleError(err: any): void {\n\t\tlet showOutput = true;\n\t\tif (err instanceof TaskError) {\n\t\t\tconst buildError = <TaskError>err;\n\t\t\tconst needsConfig = buildError.code === TaskErrors.NotConfigured || buildError.code === TaskErrors.NoBuildTask || buildError.code === TaskErrors.NoTestTask;\n\t\t\tconst needsTerminate = buildError.code === TaskErrors.RunningTask;\n\t\t\tif (needsConfig || needsTerminate) {\n\t\t\t\tthis._notificationService.prompt(buildError.severity, buildError.message, [{\n\t\t\t\t\tlabel: needsConfig ? ConfigureTaskAction.TEXT : nls.localize('TerminateAction.label', \"Terminate Task\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tif (needsConfig) {\n\t\t\t\t\t\t\tthis._runConfigureTasks();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._runTerminateCommand();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}]);\n\t\t\t} else {\n\t\t\t\tthis._notificationService.notify({ severity: buildError.severity, message: buildError.message });\n\t\t\t}\n\t\t} else if (err instanceof Error) {\n\t\t\tconst error = <Error>err;\n\t\t\tthis._notificationService.error(error.message);\n\t\t\tshowOutput = false;\n\t\t} else if (Types.isString(err)) {\n\t\t\tthis._notificationService.error(<string>err);\n\t\t} else {\n\t\t\tthis._notificationService.error(nls.localize('TaskSystem.unknownError', 'An error has occurred while running a task. See task log for details.'));\n\t\t}\n\t\tif (showOutput) {\n\t\t\tthis._showOutput();\n\t\t}\n\t}\n\n\tprivate _showDetail(): boolean {\n\t\treturn this._configurationService.getValue<boolean>(QUICKOPEN_DETAIL_CONFIG);\n\t}\n\n\tprivate async _createTaskQuickPickEntries(tasks: Task[], group: boolean = false, sort: boolean = false, selectedEntry?: ITaskQuickPickEntry, includeRecents: boolean = true): Promise<ITaskQuickPickEntry[]> {\n\t\tlet encounteredTasks: { [key: string]: ITaskQuickPickEntry[] } = {};\n\t\tif (tasks === undefined || tasks === null || tasks.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tconst TaskQuickPickEntry = (task: Task): ITaskQuickPickEntry => {\n\t\t\tconst newEntry = { label: task._label, description: this.getTaskDescription(task), task, detail: this._showDetail() ? task.configurationProperties.detail : undefined };\n\t\t\tif (encounteredTasks[task._id]) {\n\t\t\t\tif (encounteredTasks[task._id].length === 1) {\n\t\t\t\t\tencounteredTasks[task._id][0].label += ' (1)';\n\t\t\t\t}\n\t\t\t\tnewEntry.label = newEntry.label + ' (' + (encounteredTasks[task._id].length + 1).toString() + ')';\n\t\t\t} else {\n\t\t\t\tencounteredTasks[task._id] = [];\n\t\t\t}\n\t\t\tencounteredTasks[task._id].push(newEntry);\n\t\t\treturn newEntry;\n\n\t\t};\n\t\tfunction fillEntries(entries: QuickPickInput<ITaskQuickPickEntry>[], tasks: Task[], groupLabel: string): void {\n\t\t\tif (tasks.length) {\n\t\t\t\tentries.push({ type: 'separator', label: groupLabel });\n\t\t\t}\n\t\t\tfor (const task of tasks) {\n\t\t\t\tconst entry: ITaskQuickPickEntry = TaskQuickPickEntry(task);\n\t\t\t\tentry.buttons = [{ iconClass: ThemeIcon.asClassName(configureTaskIcon), tooltip: nls.localize('configureTask', \"Configure Task\") }];\n\t\t\t\tif (selectedEntry && (task === selectedEntry.task)) {\n\t\t\t\t\tentries.unshift(selectedEntry);\n\t\t\t\t} else {\n\t\t\t\t\tentries.push(entry);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlet entries: ITaskQuickPickEntry[];\n\t\tif (group) {\n\t\t\tentries = [];\n\t\t\tif (tasks.length === 1) {\n\t\t\t\tentries.push(TaskQuickPickEntry(tasks[0]));\n\t\t\t} else {\n\t\t\t\tconst recentlyUsedTasks = await this.getSavedTasks('historical');\n\t\t\t\tconst recent: Task[] = [];\n\t\t\t\tconst recentSet: Set<string> = new Set();\n\t\t\t\tlet configured: Task[] = [];\n\t\t\t\tlet detected: Task[] = [];\n\t\t\t\tconst taskMap: IStringDictionary<Task> = Object.create(null);\n\t\t\t\ttasks.forEach(task => {\n\t\t\t\t\tconst key = task.getCommonTaskId();\n\t\t\t\t\tif (key) {\n\t\t\t\t\t\ttaskMap[key] = task;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\trecentlyUsedTasks.reverse().forEach(recentTask => {\n\t\t\t\t\tconst key = recentTask.getCommonTaskId();\n\t\t\t\t\tif (key) {\n\t\t\t\t\t\trecentSet.add(key);\n\t\t\t\t\t\tconst task = taskMap[key];\n\t\t\t\t\t\tif (task) {\n\t\t\t\t\t\t\trecent.push(task);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\tconst key = task.getCommonTaskId();\n\t\t\t\t\tif (!key || !recentSet.has(key)) {\n\t\t\t\t\t\tif ((task._source.kind === TaskSourceKind.Workspace) || (task._source.kind === TaskSourceKind.User)) {\n\t\t\t\t\t\t\tconfigured.push(task);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdetected.push(task);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst sorter = this.createSorter();\n\t\t\t\tif (includeRecents) {\n\t\t\t\t\tfillEntries(entries, recent, nls.localize('recentlyUsed', 'recently used tasks'));\n\t\t\t\t}\n\t\t\t\tconfigured = configured.sort((a, b) => sorter.compare(a, b));\n\t\t\t\tfillEntries(entries, configured, nls.localize('configured', 'configured tasks'));\n\t\t\t\tdetected = detected.sort((a, b) => sorter.compare(a, b));\n\t\t\t\tfillEntries(entries, detected, nls.localize('detected', 'detected tasks'));\n\t\t\t}\n\t\t} else {\n\t\t\tif (sort) {\n\t\t\t\tconst sorter = this.createSorter();\n\t\t\t\ttasks = tasks.sort((a, b) => sorter.compare(a, b));\n\t\t\t}\n\t\t\tentries = tasks.map<ITaskQuickPickEntry>(task => TaskQuickPickEntry(task));\n\t\t}\n\t\tencounteredTasks = {};\n\t\treturn entries;\n\t}\n\tprivate async _showTwoLevelQuickPick(placeHolder: string, defaultEntry?: ITaskQuickPickEntry, type?: string, name?: string) {\n\t\treturn this._instantiationService.createInstance(TaskQuickPick).show(placeHolder, defaultEntry, type, name);\n\t}\n\n\tprivate async _showQuickPick(tasks: Promise<Task[]> | Task[], placeHolder: string, defaultEntry?: ITaskQuickPickEntry, group: boolean = false, sort: boolean = false, selectedEntry?: ITaskQuickPickEntry, additionalEntries?: ITaskQuickPickEntry[], name?: string): Promise<ITaskQuickPickEntry | undefined | null> {\n\t\tconst resolvedTasks = await tasks;\n\t\tconst entries: (ITaskQuickPickEntry | IQuickPickSeparator)[] | undefined = await raceTimeout(this._createTaskQuickPickEntries(resolvedTasks, group, sort, selectedEntry), 200, () => undefined);\n\t\tif (!entries) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (entries.length === 1 && this._configurationService.getValue<boolean>(QUICKOPEN_SKIP_CONFIG)) {\n\t\t\treturn (<ITaskQuickPickEntry>entries[0]);\n\t\t} else if ((entries.length === 0) && defaultEntry) {\n\t\t\tentries.push(defaultEntry);\n\t\t} else if (entries.length > 1 && additionalEntries && additionalEntries.length > 0) {\n\t\t\tentries.push({ type: 'separator', label: '' });\n\t\t\tentries.push(additionalEntries[0]);\n\t\t}\n\n\t\tconst picker: IQuickPick<ITaskQuickPickEntry> = this._quickInputService.createQuickPick();\n\t\tpicker.placeholder = placeHolder;\n\t\tpicker.matchOnDescription = true;\n\t\tif (name) {\n\t\t\tpicker.value = name;\n\t\t}\n\t\tpicker.onDidTriggerItemButton(context => {\n\t\t\tconst task = context.item.task;\n\t\t\tthis._quickInputService.cancel();\n\t\t\tif (ContributedTask.is(task)) {\n\t\t\t\tthis.customize(task, undefined, true);\n\t\t\t} else if (CustomTask.is(task)) {\n\t\t\t\tthis.openConfig(task);\n\t\t\t}\n\t\t});\n\t\tpicker.items = entries;\n\t\tpicker.show();\n\n\t\treturn new Promise<ITaskQuickPickEntry | undefined | null>(resolve => {\n\t\t\tthis._register(picker.onDidAccept(async () => {\n\t\t\t\tconst selectedEntry = picker.selectedItems ? picker.selectedItems[0] : undefined;\n\t\t\t\tpicker.dispose();\n\t\t\t\tif (!selectedEntry) {\n\t\t\t\t\tresolve(undefined);\n\t\t\t\t}\n\t\t\t\tresolve(selectedEntry);\n\t\t\t}));\n\t\t});\n\t}\n\n\tprivate _needsRecentTasksMigration(): boolean {\n\t\treturn (this.getRecentlyUsedTasksV1().size > 0) && (this._getTasksFromStorage('historical').size === 0);\n\t}\n\n\tprivate async _migrateRecentTasks(tasks: Task[]) {\n\t\tif (!this._needsRecentTasksMigration()) {\n\t\t\treturn;\n\t\t}\n\t\tconst recentlyUsedTasks = this.getRecentlyUsedTasksV1();\n\t\tconst taskMap: IStringDictionary<Task> = Object.create(null);\n\t\ttasks.forEach(task => {\n\t\t\tconst key = task.getRecentlyUsedKey();\n\t\t\tif (key) {\n\t\t\t\ttaskMap[key] = task;\n\t\t\t}\n\t\t});\n\t\tconst reversed = [...recentlyUsedTasks.keys()].reverse();\n\t\tfor (const key in reversed) {\n\t\t\tconst task = taskMap[key];\n\t\t\tif (task) {\n\t\t\t\tawait this._setRecentlyUsedTask(task);\n\t\t\t}\n\t\t}\n\t\tthis._storageService.remove(AbstractTaskService.RecentlyUsedTasks_Key, StorageScope.WORKSPACE);\n\t}\n\n\tprivate _showIgnoredFoldersMessage(): Promise<void> {\n\t\tif (this.ignoredWorkspaceFolders.length === 0 || !this.showIgnoreMessage) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tthis._notificationService.prompt(\n\t\t\tSeverity.Info,\n\t\t\tnls.localize('TaskService.ignoredFolder', 'The following workspace folders are ignored since they use task version 0.1.0: {0}', this.ignoredWorkspaceFolders.map(f => f.name).join(', ')),\n\t\t\t[{\n\t\t\t\tlabel: nls.localize('TaskService.notAgain', \"Don't Show Again\"),\n\t\t\t\tisSecondary: true,\n\t\t\t\trun: () => {\n\t\t\t\t\tthis._storageService.store(AbstractTaskService.IgnoreTask010DonotShowAgain_key, true, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t\t\t\tthis._showIgnoreMessage = false;\n\t\t\t\t}\n\t\t\t}]\n\t\t);\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tprivate async _trust(): Promise<boolean> {\n\t\tif (ServerlessWebContext && !TaskExecutionSupportedContext) {\n\t\t\treturn false;\n\t\t}\n\t\tawait this._workspaceTrustManagementService.workspaceTrustInitialized;\n\t\tif (!this._workspaceTrustManagementService.isWorkspaceTrusted()) {\n\t\t\treturn (await this._workspaceTrustRequestService.requestWorkspaceTrust(\n\t\t\t\t{\n\t\t\t\t\tmessage: nls.localize('TaskService.requestTrust', \"Listing and running tasks requires that some of the files in this workspace be executed as code.\")\n\t\t\t\t})) === true;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate async _runTaskCommand(filter?: string | ITaskIdentifier): Promise<void> {\n\t\tif (!this._tasksReconnected) {\n\t\t\treturn;\n\t\t}\n\t\tif (!filter) {\n\t\t\treturn this._doRunTaskCommand();\n\t\t}\n\t\tconst type = typeof filter === 'string' ? undefined : filter.type;\n\t\tconst taskName = typeof filter === 'string' ? filter : filter.task;\n\t\tconst grouped = await this._getGroupedTasks({ type });\n\t\tconst identifier = this._getTaskIdentifier(filter);\n\t\tconst tasks = grouped.all();\n\t\tconst resolver = this._createResolver(grouped);\n\t\tconst folderURIs: (URI | string)[] = this._contextService.getWorkspace().folders.map(folder => folder.uri);\n\t\tif (this._contextService.getWorkbenchState() === WorkbenchState.WORKSPACE) {\n\t\t\tfolderURIs.push(this._contextService.getWorkspace().configuration!);\n\t\t}\n\t\tfolderURIs.push(USER_TASKS_GROUP_KEY);\n\t\tif (identifier) {\n\t\t\tfor (const uri of folderURIs) {\n\t\t\t\tconst task = await resolver.resolve(uri, identifier);\n\t\t\t\tif (task) {\n\t\t\t\t\tthis.run(task);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst exactMatchTask = !taskName ? undefined : tasks.find(t => t.configurationProperties.identifier === taskName || t.getDefinition(true)?.configurationProperties?.identifier === taskName);\n\t\tif (!exactMatchTask) {\n\t\t\treturn this._doRunTaskCommand(tasks, type, taskName);\n\t\t}\n\t\tfor (const uri of folderURIs) {\n\t\t\tconst task = await resolver.resolve(uri, taskName);\n\t\t\tif (task) {\n\t\t\t\tawait this.run(task, { attachProblemMatcher: true }, TaskRunSource.User);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _tasksAndGroupedTasks(filter?: ITaskFilter): { tasks: Promise<Task[]>; grouped: Promise<TaskMap> } {\n\t\tif (!this._versionAndEngineCompatible(filter)) {\n\t\t\treturn { tasks: Promise.resolve<Task[]>([]), grouped: Promise.resolve(new TaskMap()) };\n\t\t}\n\t\tconst grouped = this._getGroupedTasks(filter);\n\t\tconst tasks = grouped.then((map) => {\n\t\t\tif (!filter || !filter.type) {\n\t\t\t\treturn map.all();\n\t\t\t}\n\t\t\tconst result: Task[] = [];\n\t\t\tmap.forEach((tasks) => {\n\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\tif (ContributedTask.is(task) && task.defines.type === filter.type) {\n\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t} else if (CustomTask.is(task)) {\n\t\t\t\t\t\tif (task.type === filter.type) {\n\t\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst customizes = task.customizes();\n\t\t\t\t\t\t\tif (customizes && customizes.type === filter.type) {\n\t\t\t\t\t\t\t\tresult.push(task);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn result;\n\t\t});\n\t\treturn { tasks, grouped };\n\t}\n\n\tprivate _doRunTaskCommand(tasks?: Task[], type?: string, name?: string): void {\n\t\tconst pickThen = (task: Task | undefined | null) => {\n\t\t\tif (task === undefined) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (task === null) {\n\t\t\t\tthis._runConfigureTasks();\n\t\t\t} else {\n\t\t\t\tthis.run(task, { attachProblemMatcher: true }, TaskRunSource.User).then(undefined, reason => {\n\t\t\t\t\t// eat the error, it has already been surfaced to the user and we don't care about it here\n\t\t\t\t});\n\t\t\t}\n\t\t};\n\n\t\tconst placeholder = nls.localize('TaskService.pickRunTask', 'Select the task to run');\n\n\t\tthis._showIgnoredFoldersMessage().then(() => {\n\t\t\tif (this._configurationService.getValue(USE_SLOW_PICKER)) {\n\t\t\t\tlet taskResult: { tasks: Promise<Task[]>; grouped: Promise<TaskMap> } | undefined = undefined;\n\t\t\t\tif (!tasks) {\n\t\t\t\t\ttaskResult = this._tasksAndGroupedTasks();\n\t\t\t\t}\n\t\t\t\tthis._showQuickPick(tasks ? tasks : taskResult!.tasks, placeholder,\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: '$(plus) ' + nls.localize('TaskService.noEntryToRun', 'Configure a Task'),\n\t\t\t\t\t\ttask: null\n\t\t\t\t\t},\n\t\t\t\t\ttrue, undefined, undefined, undefined, name).\n\t\t\t\t\tthen((entry) => {\n\t\t\t\t\t\treturn pickThen(entry ? entry.task : undefined);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tthis._showTwoLevelQuickPick(placeholder,\n\t\t\t\t\t{\n\t\t\t\t\t\tlabel: '$(plus) ' + nls.localize('TaskService.noEntryToRun', 'Configure a Task'),\n\t\t\t\t\t\ttask: null\n\t\t\t\t\t}, type, name).\n\t\t\t\t\tthen(pickThen);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _reRunTaskCommand(): void {\n\n\t\tProblemMatcherRegistry.onReady().then(() => {\n\t\t\treturn this._editorService.saveAll({ reason: SaveReason.AUTO }).then(() => { // make sure all dirty editors are saved\n\t\t\t\tconst executeResult = this._getTaskSystem().rerun();\n\t\t\t\tif (executeResult) {\n\t\t\t\t\treturn this._handleExecuteResult(executeResult);\n\t\t\t\t} else {\n\t\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t *\n\t * @param tasks - The tasks which need to be filtered\n\t * @param tasksInList - This tells splitPerGroupType to filter out globbed tasks (into defaults)\n\t * @returns\n\t */\n\tprivate _getDefaultTasks(tasks: Task[], taskGlobsInList: boolean = false): Task[] {\n\t\tconst defaults: Task[] = [];\n\t\tfor (const task of tasks) {\n\t\t\t// At this point (assuming taskGlobsInList is true) there are tasks with matching globs, so only put those in defaults\n\t\t\tif (taskGlobsInList && typeof (task.configurationProperties.group as TaskGroup).isDefault === 'string') {\n\t\t\t\tdefaults.push(task);\n\t\t\t} else if (!taskGlobsInList && (task.configurationProperties.group as TaskGroup).isDefault === true) {\n\t\t\t\tdefaults.push(task);\n\t\t\t}\n\t\t}\n\t\treturn defaults;\n\t}\n\n\tprivate _runTaskGroupCommand(taskGroup: TaskGroup, strings: {\n\t\tfetching: string;\n\t\tselect: string;\n\t\tnotFoundConfigure: string;\n\t}, configure: () => void, legacyCommand: () => void): void {\n\t\tif (this.schemaVersion === JsonSchemaVersion.V0_1_0) {\n\t\t\tlegacyCommand();\n\t\t\treturn;\n\t\t}\n\t\tconst options: IProgressOptions = {\n\t\t\tlocation: ProgressLocation.Window,\n\t\t\ttitle: strings.fetching\n\t\t};\n\t\tconst promise = (async () => {\n\t\t\tlet groupTasks: (Task | ConfiguringTask)[] = [];\n\n\t\t\tasync function runSingleTask(task: Task | undefined, problemMatcherOptions: IProblemMatcherRunOptions | undefined, that: AbstractTaskService) {\n\t\t\t\tthat.run(task, problemMatcherOptions, TaskRunSource.User).then(undefined, reason => {\n\t\t\t\t\t// eat the error, it has already been surfaced to the user and we don't care about it here\n\t\t\t\t});\n\t\t\t}\n\t\t\tconst chooseAndRunTask = (tasks: Task[]) => {\n\t\t\t\tthis._showIgnoredFoldersMessage().then(() => {\n\t\t\t\t\tthis._showQuickPick(tasks,\n\t\t\t\t\t\tstrings.select,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: strings.notFoundConfigure,\n\t\t\t\t\t\t\ttask: null\n\t\t\t\t\t\t},\n\t\t\t\t\t\ttrue).then((entry) => {\n\t\t\t\t\t\t\tconst task: Task | undefined | null = entry ? entry.task : undefined;\n\t\t\t\t\t\t\tif (task === undefined) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (task === null) {\n\t\t\t\t\t\t\t\tconfigure.apply(this);\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\trunSingleTask(task, { attachProblemMatcher: true }, this);\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t};\n\t\t\tlet globTasksDetected = false;\n\t\t\t// First check for globs before checking for the default tasks of the task group\n\t\t\tconst absoluteURI = EditorResourceAccessor.getOriginalUri(this._editorService.activeEditor);\n\t\t\tif (absoluteURI) {\n\t\t\t\tconst workspaceFolder = this._contextService.getWorkspaceFolder(absoluteURI);\n\t\t\t\tif (workspaceFolder) {\n\t\t\t\t\tconst configuredTasks = this._getConfiguration(workspaceFolder)?.config?.tasks;\n\t\t\t\t\tif (configuredTasks) {\n\t\t\t\t\t\tglobTasksDetected = configuredTasks.filter(task => task.group && typeof task.group !== 'string' && typeof task.group.isDefault === 'string').length > 0;\n\t\t\t\t\t\t// This will activate extensions, so only do so if necessary #185960\n\t\t\t\t\t\tif (globTasksDetected) {\n\t\t\t\t\t\t\t// Fallback to absolute path of the file if it is not in a workspace or relative path cannot be found\n\t\t\t\t\t\t\tconst relativePath = workspaceFolder?.uri ? (resources.relativePath(workspaceFolder.uri, absoluteURI) ?? absoluteURI.path) : absoluteURI.path;\n\n\t\t\t\t\t\t\tgroupTasks = await this._findWorkspaceTasks((task) => {\n\t\t\t\t\t\t\t\tconst currentTaskGroup = task.configurationProperties.group;\n\t\t\t\t\t\t\t\tif (currentTaskGroup && typeof currentTaskGroup !== 'string' && typeof currentTaskGroup.isDefault === 'string') {\n\t\t\t\t\t\t\t\t\treturn (currentTaskGroup._id === taskGroup._id && glob.match(currentTaskGroup.isDefault, relativePath));\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!globTasksDetected && groupTasks.length === 0) {\n\t\t\t\tgroupTasks = await this._findWorkspaceTasksInGroup(taskGroup, true);\n\t\t\t}\n\n\t\t\tconst handleMultipleTasks = (areGlobTasks: boolean) => {\n\t\t\t\treturn this._getTasksForGroup(taskGroup).then((tasks) => {\n\t\t\t\t\tif (tasks.length > 0) {\n\t\t\t\t\t\t// If we're dealing with tasks that were chosen because of a glob match,\n\t\t\t\t\t\t// then put globs in the defaults and everything else in none\n\t\t\t\t\t\tconst defaults = this._getDefaultTasks(tasks, areGlobTasks);\n\t\t\t\t\t\tif (defaults.length === 1) {\n\t\t\t\t\t\t\trunSingleTask(defaults[0], undefined, this);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else if (defaults.length > 0) {\n\t\t\t\t\t\t\ttasks = defaults;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// At this this point there are multiple tasks.\n\t\t\t\t\tchooseAndRunTask(tasks);\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tconst resolveTaskAndRun = (taskGroupTask: Task | ConfiguringTask) => {\n\t\t\t\tif (ConfiguringTask.is(taskGroupTask)) {\n\t\t\t\t\tthis.tryResolveTask(taskGroupTask).then(resolvedTask => {\n\t\t\t\t\t\trunSingleTask(resolvedTask, undefined, this);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\trunSingleTask(taskGroupTask, undefined, this);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// A single default glob task was returned, just run it directly\n\t\t\tif (groupTasks.length === 1) {\n\t\t\t\treturn resolveTaskAndRun(groupTasks[0]);\n\t\t\t}\n\n\t\t\t// If there's multiple globs that match we want to show the quick picker for those tasks\n\t\t\t// We will need to call splitPerGroupType putting globs in defaults and the remaining tasks in none.\n\t\t\t// We don't need to carry on after here\n\t\t\tif (globTasksDetected && groupTasks.length > 1) {\n\t\t\t\treturn handleMultipleTasks(true);\n\t\t\t}\n\n\t\t\t// If no globs are found or matched fallback to checking for default tasks of the task group\n\t\t\tif (!groupTasks.length) {\n\t\t\t\tgroupTasks = await this._findWorkspaceTasksInGroup(taskGroup, false);\n\t\t\t}\n\n\t\t\t// A single default task was returned, just run it directly\n\t\t\tif (groupTasks.length === 1) {\n\t\t\t\treturn resolveTaskAndRun(groupTasks[0]);\n\t\t\t}\n\n\t\t\t// Multiple default tasks returned, show the quickPicker\n\t\t\treturn handleMultipleTasks(false);\n\t\t})();\n\t\tthis._progressService.withProgress(options, () => promise);\n\t}\n\n\tprivate _runBuildCommand(): void {\n\t\tif (!this._tasksReconnected) {\n\t\t\treturn;\n\t\t}\n\t\treturn this._runTaskGroupCommand(TaskGroup.Build, {\n\t\t\tfetching: nls.localize('TaskService.fetchingBuildTasks', 'Fetching build tasks...'),\n\t\t\tselect: nls.localize('TaskService.pickBuildTask', 'Select the build task to run'),\n\t\t\tnotFoundConfigure: nls.localize('TaskService.noBuildTask', 'No build task to run found. Configure Build Task...')\n\t\t}, this._runConfigureDefaultBuildTask, this._build);\n\t}\n\n\tprivate _runTestCommand(): void {\n\t\treturn this._runTaskGroupCommand(TaskGroup.Test, {\n\t\t\tfetching: nls.localize('TaskService.fetchingTestTasks', 'Fetching test tasks...'),\n\t\t\tselect: nls.localize('TaskService.pickTestTask', 'Select the test task to run'),\n\t\t\tnotFoundConfigure: nls.localize('TaskService.noTestTaskTerminal', 'No test task to run found. Configure Tasks...')\n\t\t}, this._runConfigureDefaultTestTask, this._runTest);\n\t}\n\n\tprivate _runTerminateCommand(arg?: any): void {\n\t\tif (arg === 'terminateAll') {\n\t\t\tthis._terminateAll();\n\t\t\treturn;\n\t\t}\n\t\tconst runQuickPick = (promise?: Promise<Task[]>) => {\n\t\t\tthis._showQuickPick(promise || this.getActiveTasks(),\n\t\t\t\tnls.localize('TaskService.taskToTerminate', 'Select a task to terminate'),\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize('TaskService.noTaskRunning', 'No task is currently running'),\n\t\t\t\t\ttask: undefined\n\t\t\t\t},\n\t\t\t\tfalse, true,\n\t\t\t\tundefined,\n\t\t\t\t[{\n\t\t\t\t\tlabel: nls.localize('TaskService.terminateAllRunningTasks', 'All Running Tasks'),\n\t\t\t\t\tid: 'terminateAll',\n\t\t\t\t\ttask: undefined\n\t\t\t\t}]\n\t\t\t).then(entry => {\n\t\t\t\tif (entry && entry.id === 'terminateAll') {\n\t\t\t\t\tthis._terminateAll();\n\t\t\t\t}\n\t\t\t\tconst task: Task | undefined | null = entry ? entry.task : undefined;\n\t\t\t\tif (task === undefined || task === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.terminate(task);\n\t\t\t});\n\t\t};\n\t\tif (this.inTerminal()) {\n\t\t\tconst identifier = this._getTaskIdentifier(arg);\n\t\t\tlet promise: Promise<Task[]>;\n\t\t\tif (identifier !== undefined) {\n\t\t\t\tpromise = this.getActiveTasks();\n\t\t\t\tpromise.then((tasks) => {\n\t\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\t\tif (task.matches(identifier)) {\n\t\t\t\t\t\t\tthis.terminate(task);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\trunQuickPick(promise);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\trunQuickPick();\n\t\t\t}\n\t\t} else {\n\t\t\tthis._isActive().then((active) => {\n\t\t\t\tif (active) {\n\t\t\t\t\tthis._terminateAll().then((responses) => {\n\t\t\t\t\t\t// the output runner has only one task\n\t\t\t\t\t\tconst response = responses[0];\n\t\t\t\t\t\tif (response.success) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (response.code && response.code === TerminateResponseCode.ProcessNotFound) {\n\t\t\t\t\t\t\tthis._notificationService.error(nls.localize('TerminateAction.noProcess', 'The launched process doesn\\'t exist anymore. If the task spawned background tasks exiting VS Code might result in orphaned processes.'));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._notificationService.error(nls.localize('TerminateAction.failed', 'Failed to terminate running task'));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate async _runRestartTaskCommand(arg?: any): Promise<void> {\n\n\t\tconst activeTasks = await this.getActiveTasks();\n\n\t\tif (activeTasks.length === 1) {\n\t\t\tthis._restart(activeTasks[0]);\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.inTerminal()) {\n\t\t\t// try dispatching using task identifier\n\t\t\tconst identifier = this._getTaskIdentifier(arg);\n\t\t\tif (identifier !== undefined) {\n\t\t\t\tfor (const task of activeTasks) {\n\t\t\t\t\tif (task.matches(identifier)) {\n\t\t\t\t\t\tthis._restart(task);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// show quick pick with active tasks\n\t\t\tconst entry = await this._showQuickPick(\n\t\t\t\tactiveTasks,\n\t\t\t\tnls.localize('TaskService.taskToRestart', 'Select the task to restart'),\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize('TaskService.noTaskToRestart', 'No task to restart'),\n\t\t\t\t\ttask: null\n\t\t\t\t},\n\t\t\t\tfalse,\n\t\t\t\ttrue\n\t\t\t);\n\t\t\tif (entry && entry.task) {\n\t\t\t\tthis._restart(entry.task);\n\t\t\t}\n\t\t} else {\n\t\t\tif (activeTasks.length > 0) {\n\t\t\t\tthis._restart(activeTasks[0]);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _getTaskIdentifier(filter?: string | ITaskIdentifier): string | KeyedTaskIdentifier | undefined {\n\t\tlet result: string | KeyedTaskIdentifier | undefined = undefined;\n\t\tif (Types.isString(filter)) {\n\t\t\tresult = filter;\n\t\t} else if (filter && Types.isString(filter.type)) {\n\t\t\tresult = TaskDefinition.createTaskIdentifier(filter, console);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _configHasTasks(taskConfig?: TaskConfig.IExternalTaskRunnerConfiguration): boolean {\n\t\treturn !!taskConfig && !!taskConfig.tasks && taskConfig.tasks.length > 0;\n\t}\n\n\tprivate _openTaskFile(resource: URI, taskSource: string) {\n\t\tlet configFileCreated = false;\n\t\tthis._fileService.stat(resource).then((stat) => stat, () => undefined).then(async (stat) => {\n\t\t\tconst fileExists: boolean = !!stat;\n\t\t\tconst configValue = this._configurationService.inspect<TaskConfig.IExternalTaskRunnerConfiguration>('tasks');\n\t\t\tlet tasksExistInFile: boolean;\n\t\t\tlet target: ConfigurationTarget;\n\t\t\tswitch (taskSource) {\n\t\t\t\tcase TaskSourceKind.User: tasksExistInFile = this._configHasTasks(configValue.userValue); target = ConfigurationTarget.USER; break;\n\t\t\t\tcase TaskSourceKind.WorkspaceFile: tasksExistInFile = this._configHasTasks(configValue.workspaceValue); target = ConfigurationTarget.WORKSPACE; break;\n\t\t\t\tdefault: tasksExistInFile = this._configHasTasks(configValue.workspaceFolderValue); target = ConfigurationTarget.WORKSPACE_FOLDER;\n\t\t\t}\n\t\t\tlet content;\n\t\t\tif (!tasksExistInFile) {\n\t\t\t\tconst pickTemplateResult = await this._quickInputService.pick(getTaskTemplates(), { placeHolder: nls.localize('TaskService.template', 'Select a Task Template') });\n\t\t\t\tif (!pickTemplateResult) {\n\t\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t\t}\n\t\t\t\tcontent = pickTemplateResult.content;\n\t\t\t\tconst editorConfig = this._configurationService.getValue() as any;\n\t\t\t\tif (editorConfig.editor.insertSpaces) {\n\t\t\t\t\tcontent = content.replace(/(\\n)(\\t+)/g, (_, s1, s2) => s1 + ' '.repeat(s2.length * editorConfig.editor.tabSize));\n\t\t\t\t}\n\t\t\t\tconfigFileCreated = true;\n\t\t\t}\n\n\t\t\tif (!fileExists && content) {\n\t\t\t\treturn this._textFileService.create([{ resource, value: content }]).then(result => {\n\t\t\t\t\treturn result[0].resource;\n\t\t\t\t});\n\t\t\t} else if (fileExists && (tasksExistInFile || content)) {\n\t\t\t\tif (content) {\n\t\t\t\t\tthis._configurationService.updateValue('tasks', json.parse(content), target);\n\t\t\t\t}\n\t\t\t\treturn stat?.resource;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t}).then((resource) => {\n\t\t\tif (!resource) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._editorService.openEditor({\n\t\t\t\tresource,\n\t\t\t\toptions: {\n\t\t\t\t\tpinned: configFileCreated // pin only if config file is created #8727\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate _isTaskEntry(value: IQuickPickItem): value is IQuickPickItem & { task: Task } {\n\t\tconst candidate: IQuickPickItem & { task: Task } = value as any;\n\t\treturn candidate && !!candidate.task;\n\t}\n\n\tprivate _isSettingEntry(value: IQuickPickItem): value is IQuickPickItem & { settingType: string } {\n\t\tconst candidate: IQuickPickItem & { settingType: string } = value as any;\n\t\treturn candidate && !!candidate.settingType;\n\t}\n\n\tprivate _configureTask(task: Task) {\n\t\tif (ContributedTask.is(task)) {\n\t\t\tthis.customize(task, undefined, true);\n\t\t} else if (CustomTask.is(task)) {\n\t\t\tthis.openConfig(task);\n\t\t} else if (ConfiguringTask.is(task)) {\n\t\t\t// Do nothing.\n\t\t}\n\t}\n\n\tprivate _handleSelection(selection: TaskQuickPickEntryType | undefined) {\n\t\tif (!selection) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._isTaskEntry(selection)) {\n\t\t\tthis._configureTask(selection.task);\n\t\t} else if (this._isSettingEntry(selection)) {\n\t\t\tconst taskQuickPick = this._instantiationService.createInstance(TaskQuickPick);\n\t\t\ttaskQuickPick.handleSettingOption(selection.settingType);\n\t\t} else if (selection.folder && (this._contextService.getWorkbenchState() !== WorkbenchState.EMPTY)) {\n\t\t\tthis._openTaskFile(selection.folder.toResource('.vscode/tasks.json'), TaskSourceKind.Workspace);\n\t\t} else {\n\t\t\tconst resource = this._getResourceForKind(TaskSourceKind.User);\n\t\t\tif (resource) {\n\t\t\t\tthis._openTaskFile(resource, TaskSourceKind.User);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic getTaskDescription(task: Task | ConfiguringTask): string | undefined {\n\t\tlet description: string | undefined;\n\t\tif (task._source.kind === TaskSourceKind.User) {\n\t\t\tdescription = nls.localize('taskQuickPick.userSettings', 'User');\n\t\t} else if (task._source.kind === TaskSourceKind.WorkspaceFile) {\n\t\t\tdescription = task.getWorkspaceFileName();\n\t\t} else if (this.needsFolderQualification()) {\n\t\t\tconst workspaceFolder = task.getWorkspaceFolder();\n\t\t\tif (workspaceFolder) {\n\t\t\t\tdescription = workspaceFolder.name;\n\t\t\t}\n\t\t}\n\t\treturn description;\n\t}\n\n\tprivate async _runConfigureTasks(): Promise<void> {\n\t\tif (!(await this._trust())) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet taskPromise: Promise<TaskMap>;\n\t\tif (this.schemaVersion === JsonSchemaVersion.V2_0_0) {\n\t\t\ttaskPromise = this._getGroupedTasks();\n\t\t} else {\n\t\t\ttaskPromise = Promise.resolve(new TaskMap());\n\t\t}\n\n\t\tconst stats = this._contextService.getWorkspace().folders.map<Promise<IFileStatWithPartialMetadata | undefined>>((folder) => {\n\t\t\treturn this._fileService.stat(folder.toResource('.vscode/tasks.json')).then(stat => stat, () => undefined);\n\t\t});\n\n\t\tconst createLabel = nls.localize('TaskService.createJsonFile', 'Create tasks.json file from template');\n\t\tconst openLabel = nls.localize('TaskService.openJsonFile', 'Open tasks.json file');\n\t\tconst tokenSource = new CancellationTokenSource();\n\t\tconst cancellationToken: CancellationToken = tokenSource.token;\n\t\tconst entries = Promise.all(stats).then((stats) => {\n\t\t\treturn taskPromise.then((taskMap) => {\n\t\t\t\tconst entries: QuickPickInput<TaskQuickPickEntryType>[] = [];\n\t\t\t\tlet configuredCount = 0;\n\t\t\t\tlet tasks = taskMap.all();\n\t\t\t\tif (tasks.length > 0) {\n\t\t\t\t\ttasks = tasks.sort((a, b) => a._label.localeCompare(b._label));\n\t\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\t\tconst entry = { label: TaskQuickPick.getTaskLabelWithIcon(task), task, description: this.getTaskDescription(task), detail: this._showDetail() ? task.configurationProperties.detail : undefined };\n\t\t\t\t\t\tTaskQuickPick.applyColorStyles(task, entry, this._themeService);\n\t\t\t\t\t\tentries.push(entry);\n\t\t\t\t\t\tif (!ContributedTask.is(task)) {\n\t\t\t\t\t\t\tconfiguredCount++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tconst needsCreateOrOpen = (configuredCount === 0);\n\t\t\t\t// If the only configured tasks are user tasks, then we should also show the option to create from a template.\n\t\t\t\tif (needsCreateOrOpen || (taskMap.get(USER_TASKS_GROUP_KEY).length === configuredCount)) {\n\t\t\t\t\tconst label = stats[0] !== undefined ? openLabel : createLabel;\n\t\t\t\t\tif (entries.length) {\n\t\t\t\t\t\tentries.push({ type: 'separator' });\n\t\t\t\t\t}\n\t\t\t\t\tentries.push({ label, folder: this._contextService.getWorkspace().folders[0] });\n\t\t\t\t}\n\t\t\t\tif ((entries.length === 1) && !needsCreateOrOpen) {\n\t\t\t\t\ttokenSource.cancel();\n\t\t\t\t}\n\t\t\t\treturn entries;\n\t\t\t});\n\t\t});\n\n\t\tconst timeout: boolean = await Promise.race([new Promise<boolean>((resolve) => {\n\t\t\tentries.then(() => resolve(false));\n\t\t}), new Promise<boolean>((resolve) => {\n\t\t\tconst timer = setTimeout(() => {\n\t\t\t\tclearTimeout(timer);\n\t\t\t\tresolve(true);\n\t\t\t}, 200);\n\t\t})]);\n\n\t\tif (!timeout && ((await entries).length === 1) && this._configurationService.getValue<boolean>(QUICKOPEN_SKIP_CONFIG)) {\n\t\t\tconst entry: any = <any>((await entries)[0]);\n\t\t\tif (entry.task) {\n\t\t\t\tthis._handleSelection(entry);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst entriesWithSettings = entries.then(resolvedEntries => {\n\t\t\tresolvedEntries.push(...TaskQuickPick.allSettingEntries(this._configurationService));\n\t\t\treturn resolvedEntries;\n\t\t});\n\n\t\tthis._quickInputService.pick(entriesWithSettings,\n\t\t\t{ placeHolder: nls.localize('TaskService.pickTask', 'Select a task to configure') }, cancellationToken).\n\t\t\tthen(async (selection) => {\n\t\t\t\tif (cancellationToken.isCancellationRequested) {\n\t\t\t\t\t// canceled when there's only one task\n\t\t\t\t\tconst task = (await entries)[0];\n\t\t\t\t\tif ((<any>task).task) {\n\t\t\t\t\t\tselection = <TaskQuickPickEntryType>task;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._handleSelection(selection);\n\t\t\t});\n\t}\n\n\tprivate _runConfigureDefaultBuildTask(): void {\n\t\tif (this.schemaVersion === JsonSchemaVersion.V2_0_0) {\n\t\t\tthis.tasks().then((tasks => {\n\t\t\t\tif (tasks.length === 0) {\n\t\t\t\t\tthis._runConfigureTasks();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst entries: QuickPickInput<TaskQuickPickEntryType>[] = [];\n\t\t\t\tlet selectedTask: Task | undefined;\n\t\t\t\tlet selectedEntry: TaskQuickPickEntryType | undefined;\n\t\t\t\tthis._showIgnoredFoldersMessage().then(() => {\n\t\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\t\tconst taskGroup: TaskGroup | undefined = TaskGroup.from(task.configurationProperties.group);\n\t\t\t\t\t\tif (taskGroup && taskGroup.isDefault && taskGroup._id === TaskGroup.Build._id) {\n\t\t\t\t\t\t\tconst label = nls.localize('TaskService.defaultBuildTaskExists', '{0} is already marked as the default build task', TaskQuickPick.getTaskLabelWithIcon(task, task.getQualifiedLabel()));\n\t\t\t\t\t\t\tselectedTask = task;\n\t\t\t\t\t\t\tselectedEntry = { label, task, description: this.getTaskDescription(task), detail: this._showDetail() ? task.configurationProperties.detail : undefined };\n\t\t\t\t\t\t\tTaskQuickPick.applyColorStyles(task, selectedEntry, this._themeService);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst entry = { label: TaskQuickPick.getTaskLabelWithIcon(task), task, description: this.getTaskDescription(task), detail: this._showDetail() ? task.configurationProperties.detail : undefined };\n\t\t\t\t\t\t\tTaskQuickPick.applyColorStyles(task, entry, this._themeService);\n\t\t\t\t\t\t\tentries.push(entry);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (selectedEntry) {\n\t\t\t\t\t\tentries.unshift(selectedEntry);\n\t\t\t\t\t}\n\t\t\t\t\tconst tokenSource = new CancellationTokenSource();\n\t\t\t\t\tconst cancellationToken: CancellationToken = tokenSource.token;\n\t\t\t\t\tthis._quickInputService.pick(entries,\n\t\t\t\t\t\t{ placeHolder: nls.localize('TaskService.pickTask', 'Select a task to configure') }, cancellationToken).\n\t\t\t\t\t\tthen(async (entry) => {\n\t\t\t\t\t\t\tif (cancellationToken.isCancellationRequested) {\n\t\t\t\t\t\t\t\t// canceled when there's only one task\n\t\t\t\t\t\t\t\tconst task = (await entries)[0];\n\t\t\t\t\t\t\t\tif ((<any>task).task) {\n\t\t\t\t\t\t\t\t\tentry = <TaskQuickPickEntryType>task;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst task: Task | undefined | null = entry && 'task' in entry ? entry.task : undefined;\n\t\t\t\t\t\t\tif ((task === undefined) || (task === null)) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (task === selectedTask && CustomTask.is(task)) {\n\t\t\t\t\t\t\t\tthis.openConfig(task);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!InMemoryTask.is(task)) {\n\t\t\t\t\t\t\t\tthis.customize(task, { group: { kind: 'build', isDefault: true } }, true).then(() => {\n\t\t\t\t\t\t\t\t\tif (selectedTask && (task !== selectedTask) && !InMemoryTask.is(selectedTask)) {\n\t\t\t\t\t\t\t\t\t\tthis.customize(selectedTask, { group: 'build' }, false);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\tthis._quickInputService.pick(entries, {\n\t\t\t\t\t\tplaceHolder: nls.localize('TaskService.pickDefaultBuildTask', 'Select the task to be used as the default build task')\n\t\t\t\t\t}).\n\t\t\t\t\t\tthen((entry) => {\n\t\t\t\t\t\t\tconst task: Task | undefined | null = entry && 'task' in entry ? entry.task : undefined;\n\t\t\t\t\t\t\tif ((task === undefined) || (task === null)) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (task === selectedTask && CustomTask.is(task)) {\n\t\t\t\t\t\t\t\tthis.openConfig(task);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!InMemoryTask.is(task)) {\n\t\t\t\t\t\t\t\tthis.customize(task, { group: { kind: 'build', isDefault: true } }, true).then(() => {\n\t\t\t\t\t\t\t\t\tif (selectedTask && (task !== selectedTask) && !InMemoryTask.is(selectedTask)) {\n\t\t\t\t\t\t\t\t\t\tthis.customize(selectedTask, { group: 'build' }, false);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}));\n\t\t} else {\n\t\t\tthis._runConfigureTasks();\n\t\t}\n\t}\n\n\tprivate _runConfigureDefaultTestTask(): void {\n\t\tif (this.schemaVersion === JsonSchemaVersion.V2_0_0) {\n\t\t\tthis.tasks().then((tasks => {\n\t\t\t\tif (tasks.length === 0) {\n\t\t\t\t\tthis._runConfigureTasks();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tlet selectedTask: Task | undefined;\n\t\t\t\tlet selectedEntry: ITaskQuickPickEntry;\n\n\t\t\t\tfor (const task of tasks) {\n\t\t\t\t\tconst taskGroup: TaskGroup | undefined = TaskGroup.from(task.configurationProperties.group);\n\t\t\t\t\tif (taskGroup && taskGroup.isDefault && taskGroup._id === TaskGroup.Test._id) {\n\t\t\t\t\t\tselectedTask = task;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (selectedTask) {\n\t\t\t\t\tselectedEntry = {\n\t\t\t\t\t\tlabel: nls.localize('TaskService.defaultTestTaskExists', '{0} is already marked as the default test task.', selectedTask.getQualifiedLabel()),\n\t\t\t\t\t\ttask: selectedTask,\n\t\t\t\t\t\tdetail: this._showDetail() ? selectedTask.configurationProperties.detail : undefined\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tthis._showIgnoredFoldersMessage().then(() => {\n\t\t\t\t\tthis._showQuickPick(tasks,\n\t\t\t\t\t\tnls.localize('TaskService.pickDefaultTestTask', 'Select the task to be used as the default test task'), undefined, true, false, selectedEntry).then((entry) => {\n\t\t\t\t\t\t\tconst task: Task | undefined | null = entry ? entry.task : undefined;\n\t\t\t\t\t\t\tif (!task) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (task === selectedTask && CustomTask.is(task)) {\n\t\t\t\t\t\t\t\tthis.openConfig(task);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!InMemoryTask.is(task)) {\n\t\t\t\t\t\t\t\tthis.customize(task, { group: { kind: 'test', isDefault: true } }, true).then(() => {\n\t\t\t\t\t\t\t\t\tif (selectedTask && (task !== selectedTask) && !InMemoryTask.is(selectedTask)) {\n\t\t\t\t\t\t\t\t\t\tthis.customize(selectedTask, { group: 'test' }, false);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}));\n\t\t} else {\n\t\t\tthis._runConfigureTasks();\n\t\t}\n\t}\n\n\tpublic async runShowTasks(): Promise<void> {\n\t\tconst activeTasksPromise: Promise<Task[]> = this.getActiveTasks();\n\t\tconst activeTasks: Task[] = await activeTasksPromise;\n\t\tlet group: string | undefined;\n\t\tif (activeTasks.length === 1) {\n\t\t\tthis._taskSystem!.revealTask(activeTasks[0]);\n\t\t} else if (activeTasks.length && activeTasks.every((task) => {\n\t\t\tif (InMemoryTask.is(task)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (!group) {\n\t\t\t\tgroup = task.command.presentation?.group;\n\t\t\t}\n\t\t\treturn task.command.presentation?.group && (task.command.presentation.group === group);\n\t\t})) {\n\t\t\tthis._taskSystem!.revealTask(activeTasks[0]);\n\t\t} else {\n\t\t\tthis._showQuickPick(activeTasksPromise,\n\t\t\t\tnls.localize('TaskService.pickShowTask', 'Select the task to show its output'),\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize('TaskService.noTaskIsRunning', 'No task is running'),\n\t\t\t\t\ttask: null\n\t\t\t\t},\n\t\t\t\tfalse, true\n\t\t\t).then((entry) => {\n\t\t\t\tconst task: Task | undefined | null = entry ? entry.task : undefined;\n\t\t\t\tif (task === undefined || task === null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._taskSystem!.revealTask(task);\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate async _createTasksDotOld(folder: IWorkspaceFolder): Promise<[URI, URI] | undefined> {\n\t\tconst tasksFile = folder.toResource('.vscode/tasks.json');\n\t\tif (await this._fileService.exists(tasksFile)) {\n\t\t\tconst oldFile = tasksFile.with({ path: `${tasksFile.path}.old` });\n\t\t\tawait this._fileService.copy(tasksFile, oldFile, true);\n\t\t\treturn [oldFile, tasksFile];\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate _upgradeTask(task: Task, suppressTaskName: boolean, globalConfig: { windows?: ICommandUpgrade; osx?: ICommandUpgrade; linux?: ICommandUpgrade }): TaskConfig.ICustomTask | TaskConfig.IConfiguringTask | undefined {\n\t\tif (!CustomTask.is(task)) {\n\t\t\treturn;\n\t\t}\n\t\tconst configElement: any = {\n\t\t\tlabel: task._label\n\t\t};\n\t\tconst oldTaskTypes = new Set(['gulp', 'jake', 'grunt']);\n\t\tif (Types.isString(task.command.name) && oldTaskTypes.has(task.command.name)) {\n\t\t\tconfigElement.type = task.command.name;\n\t\t\tconfigElement.task = task.command.args![0];\n\t\t} else {\n\t\t\tif (task.command.runtime === RuntimeType.Shell) {\n\t\t\t\tconfigElement.type = RuntimeType.toString(RuntimeType.Shell);\n\t\t\t}\n\t\t\tif (task.command.name && !suppressTaskName && !globalConfig.windows?.command && !globalConfig.osx?.command && !globalConfig.linux?.command) {\n\t\t\t\tconfigElement.command = task.command.name;\n\t\t\t} else if (suppressTaskName) {\n\t\t\t\tconfigElement.command = task._source.config.element.command;\n\t\t\t}\n\t\t\tif (task.command.args && (!Array.isArray(task.command.args) || (task.command.args.length > 0))) {\n\t\t\t\tif (!globalConfig.windows?.args && !globalConfig.osx?.args && !globalConfig.linux?.args) {\n\t\t\t\t\tconfigElement.args = task.command.args;\n\t\t\t\t} else {\n\t\t\t\t\tconfigElement.args = task._source.config.element.args;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (task.configurationProperties.presentation) {\n\t\t\tconfigElement.presentation = task.configurationProperties.presentation;\n\t\t}\n\t\tif (task.configurationProperties.isBackground) {\n\t\t\tconfigElement.isBackground = task.configurationProperties.isBackground;\n\t\t}\n\t\tif (task.configurationProperties.problemMatchers) {\n\t\t\tconfigElement.problemMatcher = task._source.config.element.problemMatcher;\n\t\t}\n\t\tif (task.configurationProperties.group) {\n\t\t\tconfigElement.group = task.configurationProperties.group;\n\t\t}\n\n\t\ttask._source.config.element = configElement;\n\t\tconst tempTask = new CustomTask(task._id, task._source, task._label, task.type, task.command, task.hasDefinedMatchers, task.runOptions, task.configurationProperties);\n\t\tconst configTask = this._createCustomizableTask(tempTask);\n\t\tif (configTask) {\n\t\t\treturn configTask;\n\t\t}\n\t\treturn;\n\t}\n\n\tprivate async _upgrade(): Promise<void> {\n\t\tif (this.schemaVersion === JsonSchemaVersion.V2_0_0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._workspaceTrustManagementService.isWorkspaceTrusted()) {\n\t\t\tthis._register(Event.once(this._workspaceTrustManagementService.onDidChangeTrust)(isTrusted => {\n\t\t\t\tif (isTrusted) {\n\t\t\t\t\tthis._upgrade();\n\t\t\t\t}\n\t\t\t}));\n\t\t\treturn;\n\t\t}\n\n\t\tconst tasks = await this._getGroupedTasks();\n\t\tconst fileDiffs: [URI, URI][] = [];\n\t\tfor (const folder of this.workspaceFolders) {\n\t\t\tconst diff = await this._createTasksDotOld(folder);\n\t\t\tif (diff) {\n\t\t\t\tfileDiffs.push(diff);\n\t\t\t}\n\t\t\tif (!diff) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst configTasks: (TaskConfig.ICustomTask | TaskConfig.IConfiguringTask)[] = [];\n\t\t\tconst suppressTaskName = !!this._configurationService.getValue(TasksSchemaProperties.SuppressTaskName, { resource: folder.uri });\n\t\t\tconst globalConfig = {\n\t\t\t\twindows: <ICommandUpgrade>this._configurationService.getValue(TasksSchemaProperties.Windows, { resource: folder.uri }),\n\t\t\t\tosx: <ICommandUpgrade>this._configurationService.getValue(TasksSchemaProperties.Osx, { resource: folder.uri }),\n\t\t\t\tlinux: <ICommandUpgrade>this._configurationService.getValue(TasksSchemaProperties.Linux, { resource: folder.uri })\n\t\t\t};\n\t\t\ttasks.get(folder).forEach(task => {\n\t\t\t\tconst configTask = this._upgradeTask(task, suppressTaskName, globalConfig);\n\t\t\t\tif (configTask) {\n\t\t\t\t\tconfigTasks.push(configTask);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis._taskSystem = undefined;\n\t\t\tthis._workspaceTasksPromise = undefined;\n\t\t\tawait this._writeConfiguration(folder, 'tasks.tasks', configTasks);\n\t\t\tawait this._writeConfiguration(folder, 'tasks.version', '2.0.0');\n\t\t\tif (this._configurationService.getValue(TasksSchemaProperties.ShowOutput, { resource: folder.uri })) {\n\t\t\t\tawait this._configurationService.updateValue(TasksSchemaProperties.ShowOutput, undefined, { resource: folder.uri });\n\t\t\t}\n\t\t\tif (this._configurationService.getValue(TasksSchemaProperties.IsShellCommand, { resource: folder.uri })) {\n\t\t\t\tawait this._configurationService.updateValue(TasksSchemaProperties.IsShellCommand, undefined, { resource: folder.uri });\n\t\t\t}\n\t\t\tif (this._configurationService.getValue(TasksSchemaProperties.SuppressTaskName, { resource: folder.uri })) {\n\t\t\t\tawait this._configurationService.updateValue(TasksSchemaProperties.SuppressTaskName, undefined, { resource: folder.uri });\n\t\t\t}\n\t\t}\n\t\tthis._updateSetup();\n\n\t\tthis._notificationService.prompt(Severity.Warning,\n\t\t\tfileDiffs.length === 1 ?\n\t\t\t\tnls.localize('taskService.upgradeVersion', \"The deprecated tasks version 0.1.0 has been removed. Your tasks have been upgraded to version 2.0.0. Open the diff to review the upgrade.\")\n\t\t\t\t: nls.localize('taskService.upgradeVersionPlural', \"The deprecated tasks version 0.1.0 has been removed. Your tasks have been upgraded to version 2.0.0. Open the diffs to review the upgrade.\"),\n\t\t\t[{\n\t\t\t\tlabel: fileDiffs.length === 1 ? nls.localize('taskService.openDiff', \"Open diff\") : nls.localize('taskService.openDiffs', \"Open diffs\"),\n\t\t\t\trun: async () => {\n\t\t\t\t\tfor (const upgrade of fileDiffs) {\n\t\t\t\t\t\tawait this._editorService.openEditor({\n\t\t\t\t\t\t\toriginal: { resource: upgrade[0] },\n\t\t\t\t\t\t\tmodified: { resource: upgrade[1] }\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}]\n\t\t);\n\t}\n}\n"]}