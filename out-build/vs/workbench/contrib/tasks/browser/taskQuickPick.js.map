{"version":3,"sources":["vs/workbench/contrib/tasks/browser/taskQuickPick.ts"],"names":[],"mappings":"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","file":"taskQuickPick.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as Objects from 'vs/base/common/objects';\nimport { Task, ContributedTask, CustomTask, ConfiguringTask, TaskSorter, KeyedTaskIdentifier } from 'vs/workbench/contrib/tasks/common/tasks';\nimport { IWorkspace, IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport * as Types from 'vs/base/common/types';\nimport { ITaskService, IWorkspaceFolderTaskResult } from 'vs/workbench/contrib/tasks/common/taskService';\nimport { IQuickPickItem, QuickPickInput, IQuickPick, IQuickInputButton, IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Event } from 'vs/base/common/event';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { ThemeIcon } from 'vs/base/common/themables';\nimport { registerIcon } from 'vs/platform/theme/common/iconRegistry';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { getColorClass, getColorStyleElement } from 'vs/workbench/contrib/terminal/browser/terminalIcon';\nimport { TaskQuickPickEntryType } from 'vs/workbench/contrib/tasks/browser/abstractTaskService';\nimport { showWithPinnedItems } from 'vs/platform/quickinput/browser/quickPickPin';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\n\nexport const QUICKOPEN_DETAIL_CONFIG = 'task.quickOpen.detail';\nexport const QUICKOPEN_SKIP_CONFIG = 'task.quickOpen.skip';\nexport function isWorkspaceFolder(folder: IWorkspace | IWorkspaceFolder): folder is IWorkspaceFolder {\n\treturn 'uri' in folder;\n}\n\nexport interface ITaskQuickPickEntry extends IQuickPickItem {\n\ttask: Task | undefined | null;\n}\n\nexport interface ITaskTwoLevelQuickPickEntry extends IQuickPickItem {\n\ttask: Task | ConfiguringTask | string | undefined | null;\n\tsettingType?: string;\n}\n\nconst SHOW_ALL: string = nls.localize('taskQuickPick.showAll', \"Show All Tasks...\");\n\nexport const configureTaskIcon = registerIcon('tasks-list-configure', Codicon.gear, nls.localize('configureTaskIcon', 'Configuration icon in the tasks selection list.'));\nconst removeTaskIcon = registerIcon('tasks-remove', Codicon.close, nls.localize('removeTaskIcon', 'Icon for remove in the tasks selection list.'));\n\nconst runTaskStorageKey = 'runTaskStorageKey';\n\nexport class TaskQuickPick extends Disposable {\n\tprivate _sorter: TaskSorter;\n\tprivate _topLevelEntries: QuickPickInput<ITaskTwoLevelQuickPickEntry>[] | undefined;\n\tconstructor(\n\t\t@ITaskService private _taskService: ITaskService,\n\t\t@IConfigurationService private _configurationService: IConfigurationService,\n\t\t@IQuickInputService private _quickInputService: IQuickInputService,\n\t\t@INotificationService private _notificationService: INotificationService,\n\t\t@IThemeService private _themeService: IThemeService,\n\t\t@IDialogService private _dialogService: IDialogService,\n\t\t@IStorageService private _storageService: IStorageService) {\n\t\tsuper();\n\t\tthis._sorter = this._taskService.createSorter();\n\t}\n\n\tprivate _showDetail(): boolean {\n\t\t// Ensure invalid values get converted into boolean values\n\t\treturn !!this._configurationService.getValue(QUICKOPEN_DETAIL_CONFIG);\n\t}\n\n\tprivate _guessTaskLabel(task: Task | ConfiguringTask): string {\n\t\tif (task._label) {\n\t\t\treturn task._label;\n\t\t}\n\t\tif (ConfiguringTask.is(task)) {\n\t\t\tlet label: string = task.configures.type;\n\t\t\tconst configures: Partial<KeyedTaskIdentifier> = Objects.deepClone(task.configures);\n\t\t\tdelete configures['_key'];\n\t\t\tdelete configures['type'];\n\t\t\tObject.keys(configures).forEach(key => label += `: ${configures[key]}`);\n\t\t\treturn label;\n\t\t}\n\t\treturn '';\n\t}\n\n\tpublic static getTaskLabelWithIcon(task: Task | ConfiguringTask, labelGuess?: string): string {\n\t\tconst label = labelGuess || task._label;\n\t\tconst icon = task.configurationProperties.icon;\n\t\tif (!icon) {\n\t\t\treturn `${label}`;\n\t\t}\n\t\treturn icon.id ? `$(${icon.id}) ${label}` : `$(${Codicon.tools.id}) ${label}`;\n\t}\n\n\tpublic static applyColorStyles(task: Task | ConfiguringTask, entry: TaskQuickPickEntryType | ITaskTwoLevelQuickPickEntry, themeService: IThemeService): void {\n\t\tif (task.configurationProperties.icon?.color) {\n\t\t\tconst colorTheme = themeService.getColorTheme();\n\t\t\tconst styleElement = getColorStyleElement(colorTheme);\n\t\t\tentry.iconClasses = [getColorClass(task.configurationProperties.icon.color)];\n\t\t\tdocument.body.appendChild(styleElement);\n\t\t}\n\t}\n\n\tprivate _createTaskEntry(task: Task | ConfiguringTask, extraButtons: IQuickInputButton[] = []): ITaskTwoLevelQuickPickEntry {\n\t\tconst buttons: IQuickInputButton[] = [\n\t\t\t{ iconClass: ThemeIcon.asClassName(configureTaskIcon), tooltip: nls.localize('configureTask', \"Configure Task\") },\n\t\t\t...extraButtons\n\t\t];\n\t\tconst entry: ITaskTwoLevelQuickPickEntry = { label: TaskQuickPick.getTaskLabelWithIcon(task, this._guessTaskLabel(task)), description: this._taskService.getTaskDescription(task), task, detail: this._showDetail() ? task.configurationProperties.detail : undefined, buttons };\n\t\tTaskQuickPick.applyColorStyles(task, entry, this._themeService);\n\t\treturn entry;\n\t}\n\n\tprivate _createEntriesForGroup(entries: QuickPickInput<ITaskTwoLevelQuickPickEntry>[], tasks: (Task | ConfiguringTask)[],\n\t\tgroupLabel: string, extraButtons: IQuickInputButton[] = []) {\n\t\tentries.push({ type: 'separator', label: groupLabel });\n\t\ttasks.forEach(task => {\n\t\t\tif (!task.configurationProperties.hide) {\n\t\t\t\tentries.push(this._createTaskEntry(task, extraButtons));\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _createTypeEntries(entries: QuickPickInput<ITaskTwoLevelQuickPickEntry>[], types: string[]) {\n\t\tentries.push({ type: 'separator', label: nls.localize('contributedTasks', \"contributed\") });\n\t\ttypes.forEach(type => {\n\t\t\tentries.push({ label: `$(folder) ${type}`, task: type, ariaLabel: nls.localize('taskType', \"All {0} tasks\", type) });\n\t\t});\n\t\tentries.push({ label: SHOW_ALL, task: SHOW_ALL, alwaysShow: true });\n\t}\n\n\tprivate _handleFolderTaskResult(result: Map<string, IWorkspaceFolderTaskResult>): (Task | ConfiguringTask)[] {\n\t\tconst tasks: (Task | ConfiguringTask)[] = [];\n\t\tArray.from(result).forEach(([key, folderTasks]) => {\n\t\t\tif (folderTasks.set) {\n\t\t\t\ttasks.push(...folderTasks.set.tasks);\n\t\t\t}\n\t\t\tif (folderTasks.configurations) {\n\t\t\t\tfor (const configuration in folderTasks.configurations.byIdentifier) {\n\t\t\t\t\ttasks.push(folderTasks.configurations.byIdentifier[configuration]);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn tasks;\n\t}\n\n\tprivate _dedupeConfiguredAndRecent(recentTasks: (Task | ConfiguringTask)[], configuredTasks: (Task | ConfiguringTask)[]): { configuredTasks: (Task | ConfiguringTask)[]; recentTasks: (Task | ConfiguringTask)[] } {\n\t\tlet dedupedConfiguredTasks: (Task | ConfiguringTask)[] = [];\n\t\tconst foundRecentTasks: boolean[] = Array(recentTasks.length).fill(false);\n\t\tfor (let j = 0; j < configuredTasks.length; j++) {\n\t\t\tconst workspaceFolder = configuredTasks[j].getWorkspaceFolder()?.uri.toString();\n\t\t\tconst definition = configuredTasks[j].getDefinition()?._key;\n\t\t\tconst type = configuredTasks[j].type;\n\t\t\tconst label = configuredTasks[j]._label;\n\t\t\tconst recentKey = configuredTasks[j].getRecentlyUsedKey();\n\t\t\tconst findIndex = recentTasks.findIndex((value) => {\n\t\t\t\treturn (workspaceFolder && definition && value.getWorkspaceFolder()?.uri.toString() === workspaceFolder\n\t\t\t\t\t&& ((value.getDefinition()?._key === definition) || (value.type === type && value._label === label)))\n\t\t\t\t\t|| (recentKey && value.getRecentlyUsedKey() === recentKey);\n\t\t\t});\n\t\t\tif (findIndex === -1) {\n\t\t\t\tdedupedConfiguredTasks.push(configuredTasks[j]);\n\t\t\t} else {\n\t\t\t\trecentTasks[findIndex] = configuredTasks[j];\n\t\t\t\tfoundRecentTasks[findIndex] = true;\n\t\t\t}\n\t\t}\n\t\tdedupedConfiguredTasks = dedupedConfiguredTasks.sort((a, b) => this._sorter.compare(a, b));\n\t\tconst prunedRecentTasks: (Task | ConfiguringTask)[] = [];\n\t\tfor (let i = 0; i < recentTasks.length; i++) {\n\t\t\tif (foundRecentTasks[i] || ConfiguringTask.is(recentTasks[i])) {\n\t\t\t\tprunedRecentTasks.push(recentTasks[i]);\n\t\t\t}\n\t\t}\n\t\treturn { configuredTasks: dedupedConfiguredTasks, recentTasks: prunedRecentTasks };\n\t}\n\n\tpublic async getTopLevelEntries(defaultEntry?: ITaskQuickPickEntry): Promise<{ entries: QuickPickInput<ITaskTwoLevelQuickPickEntry>[]; isSingleConfigured?: Task | ConfiguringTask }> {\n\t\tif (this._topLevelEntries !== undefined) {\n\t\t\treturn { entries: this._topLevelEntries };\n\t\t}\n\t\tlet recentTasks: (Task | ConfiguringTask)[] = (await this._taskService.getSavedTasks('historical')).reverse();\n\t\tconst configuredTasks: (Task | ConfiguringTask)[] = this._handleFolderTaskResult(await this._taskService.getWorkspaceTasks());\n\t\tconst extensionTaskTypes = this._taskService.taskTypes();\n\t\tthis._topLevelEntries = [];\n\t\t// Dedupe will update recent tasks if they've changed in tasks.json.\n\t\tconst dedupeAndPrune = this._dedupeConfiguredAndRecent(recentTasks, configuredTasks);\n\t\tconst dedupedConfiguredTasks: (Task | ConfiguringTask)[] = dedupeAndPrune.configuredTasks;\n\t\trecentTasks = dedupeAndPrune.recentTasks;\n\t\tif (recentTasks.length > 0) {\n\t\t\tconst removeRecentButton: IQuickInputButton = {\n\t\t\t\ticonClass: ThemeIcon.asClassName(removeTaskIcon),\n\t\t\t\ttooltip: nls.localize('removeRecent', 'Remove Recently Used Task')\n\t\t\t};\n\t\t\tthis._createEntriesForGroup(this._topLevelEntries, recentTasks, nls.localize('recentlyUsed', 'recently used'), [removeRecentButton]);\n\t\t}\n\t\tif (configuredTasks.length > 0) {\n\t\t\tif (dedupedConfiguredTasks.length > 0) {\n\t\t\t\tthis._createEntriesForGroup(this._topLevelEntries, dedupedConfiguredTasks, nls.localize('configured', 'configured'));\n\t\t\t}\n\t\t}\n\n\t\tif (defaultEntry && (configuredTasks.length === 0)) {\n\t\t\tthis._topLevelEntries.push({ type: 'separator', label: nls.localize('configured', 'configured') });\n\t\t\tthis._topLevelEntries.push(defaultEntry);\n\t\t}\n\n\t\tif (extensionTaskTypes.length > 0) {\n\t\t\tthis._createTypeEntries(this._topLevelEntries, extensionTaskTypes);\n\t\t}\n\t\treturn { entries: this._topLevelEntries, isSingleConfigured: configuredTasks.length === 1 ? configuredTasks[0] : undefined };\n\t}\n\n\tpublic async handleSettingOption(selectedType: string) {\n\t\tconst { confirmed } = await this._dialogService.confirm({\n\t\t\ttype: Severity.Warning,\n\t\t\tmessage: nls.localize('TaskQuickPick.changeSettingDetails',\n\t\t\t\t\"Task detection for {0} tasks causes files in any workspace you open to be run as code. Enabling {0} task detection is a user setting and will apply to any workspace you open. \\n\\n Do you want to enable {0} task detection for all workspaces?\", selectedType),\n\t\t\tcancelButton: nls.localize('TaskQuickPick.changeSettingNo', \"No\")\n\t\t});\n\t\tif (confirmed) {\n\t\t\tawait this._configurationService.updateValue(`${selectedType}.autoDetect`, 'on');\n\t\t\tawait new Promise<void>(resolve => setTimeout(() => resolve(), 100));\n\t\t\treturn this.show(nls.localize('TaskService.pickRunTask', 'Select the task to run'), undefined, selectedType);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic async show(placeHolder: string, defaultEntry?: ITaskQuickPickEntry, startAtType?: string, name?: string): Promise<Task | undefined | null> {\n\t\tconst picker: IQuickPick<ITaskTwoLevelQuickPickEntry> = this._quickInputService.createQuickPick();\n\t\tpicker.placeholder = placeHolder;\n\t\tpicker.matchOnDescription = true;\n\t\tpicker.ignoreFocusOut = false;\n\t\tpicker.onDidTriggerItemButton(async (context) => {\n\t\t\tconst task = context.item.task;\n\t\t\tif (context.button.iconClass === ThemeIcon.asClassName(removeTaskIcon)) {\n\t\t\t\tconst key = (task && !Types.isString(task)) ? task.getRecentlyUsedKey() : undefined;\n\t\t\t\tif (key) {\n\t\t\t\t\tthis._taskService.removeRecentlyUsedTask(key);\n\t\t\t\t}\n\t\t\t\tconst indexToRemove = picker.items.indexOf(context.item);\n\t\t\t\tif (indexToRemove >= 0) {\n\t\t\t\t\tpicker.items = [...picker.items.slice(0, indexToRemove), ...picker.items.slice(indexToRemove + 1)];\n\t\t\t\t}\n\t\t\t} else if (context.button.iconClass === ThemeIcon.asClassName(configureTaskIcon)) {\n\t\t\t\tthis._quickInputService.cancel();\n\t\t\t\tif (ContributedTask.is(task)) {\n\t\t\t\t\tthis._taskService.customize(task, undefined, true);\n\t\t\t\t} else if (CustomTask.is(task) || ConfiguringTask.is(task)) {\n\t\t\t\t\tlet canOpenConfig: boolean = false;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tcanOpenConfig = await this._taskService.openConfig(task);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t// do nothing.\n\t\t\t\t\t}\n\t\t\t\t\tif (!canOpenConfig) {\n\t\t\t\t\t\tthis._taskService.customize(task, undefined, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tif (name) {\n\t\t\tpicker.value = name;\n\t\t}\n\t\tlet firstLevelTask: Task | ConfiguringTask | string | undefined | null = startAtType;\n\t\tif (!firstLevelTask) {\n\t\t\t// First show recent tasks configured tasks. Other tasks will be available at a second level\n\t\t\tconst topLevelEntriesResult = await this.getTopLevelEntries(defaultEntry);\n\t\t\tif (topLevelEntriesResult.isSingleConfigured && this._configurationService.getValue<boolean>(QUICKOPEN_SKIP_CONFIG)) {\n\t\t\t\tpicker.dispose();\n\t\t\t\treturn this._toTask(topLevelEntriesResult.isSingleConfigured);\n\t\t\t}\n\t\t\tconst taskQuickPickEntries: QuickPickInput<ITaskTwoLevelQuickPickEntry>[] = topLevelEntriesResult.entries;\n\t\t\tfirstLevelTask = await this._doPickerFirstLevel(picker, taskQuickPickEntries);\n\t\t}\n\t\tdo {\n\t\t\tif (Types.isString(firstLevelTask)) {\n\t\t\t\tif (name) {\n\t\t\t\t\tawait this._doPickerFirstLevel(picker, (await this.getTopLevelEntries(defaultEntry)).entries);\n\t\t\t\t\tpicker.dispose();\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tconst selectedEntry = await this.doPickerSecondLevel(picker, firstLevelTask);\n\t\t\t\t// Proceed to second level of quick pick\n\t\t\t\tif (selectedEntry && !selectedEntry.settingType && selectedEntry.task === null) {\n\t\t\t\t\t// The user has chosen to go back to the first level\n\t\t\t\t\tpicker.value = '';\n\t\t\t\t\tfirstLevelTask = await this._doPickerFirstLevel(picker, (await this.getTopLevelEntries(defaultEntry)).entries);\n\t\t\t\t} else if (selectedEntry && Types.isString(selectedEntry.settingType)) {\n\t\t\t\t\tpicker.dispose();\n\t\t\t\t\treturn this.handleSettingOption(selectedEntry.settingType);\n\t\t\t\t} else {\n\t\t\t\t\tpicker.dispose();\n\t\t\t\t\treturn (selectedEntry?.task && !Types.isString(selectedEntry?.task)) ? this._toTask(selectedEntry?.task) : undefined;\n\t\t\t\t}\n\t\t\t} else if (firstLevelTask) {\n\t\t\t\tpicker.dispose();\n\t\t\t\treturn this._toTask(firstLevelTask);\n\t\t\t} else {\n\t\t\t\tpicker.dispose();\n\t\t\t\treturn firstLevelTask;\n\t\t\t}\n\t\t} while (1);\n\t\treturn;\n\t}\n\n\n\n\tprivate async _doPickerFirstLevel(picker: IQuickPick<ITaskTwoLevelQuickPickEntry>, taskQuickPickEntries: QuickPickInput<ITaskTwoLevelQuickPickEntry>[]): Promise<Task | ConfiguringTask | string | null | undefined> {\n\t\tpicker.items = taskQuickPickEntries;\n\t\tshowWithPinnedItems(this._storageService, runTaskStorageKey, picker, true);\n\t\tconst firstLevelPickerResult = await new Promise<ITaskTwoLevelQuickPickEntry | undefined | null>(resolve => {\n\t\t\tEvent.once(picker.onDidAccept)(async () => {\n\t\t\t\tresolve(picker.selectedItems ? picker.selectedItems[0] : undefined);\n\t\t\t});\n\t\t});\n\t\treturn firstLevelPickerResult?.task;\n\t}\n\n\tpublic async doPickerSecondLevel(picker: IQuickPick<ITaskTwoLevelQuickPickEntry>, type: string, name?: string) {\n\t\tpicker.busy = true;\n\t\tif (type === SHOW_ALL) {\n\t\t\tconst items = (await this._taskService.tasks()).filter(t => !t.configurationProperties.hide).sort((a, b) => this._sorter.compare(a, b)).map(task => this._createTaskEntry(task));\n\t\t\titems.push(...TaskQuickPick.allSettingEntries(this._configurationService));\n\t\t\tpicker.items = items;\n\t\t} else {\n\t\t\tpicker.value = name || '';\n\t\t\tpicker.items = await this._getEntriesForProvider(type);\n\t\t}\n\t\tawait picker.show();\n\t\tpicker.busy = false;\n\t\tconst secondLevelPickerResult = await new Promise<ITaskTwoLevelQuickPickEntry | undefined | null>(resolve => {\n\t\t\tEvent.once(picker.onDidAccept)(async () => {\n\t\t\t\tresolve(picker.selectedItems ? picker.selectedItems[0] : undefined);\n\t\t\t});\n\t\t});\n\t\treturn secondLevelPickerResult;\n\t}\n\n\tpublic static allSettingEntries(configurationService: IConfigurationService): (ITaskTwoLevelQuickPickEntry & { settingType: string })[] {\n\t\tconst entries: (ITaskTwoLevelQuickPickEntry & { settingType: string })[] = [];\n\t\tconst gruntEntry = TaskQuickPick.getSettingEntry(configurationService, 'grunt');\n\t\tif (gruntEntry) {\n\t\t\tentries.push(gruntEntry);\n\t\t}\n\t\tconst gulpEntry = TaskQuickPick.getSettingEntry(configurationService, 'gulp');\n\t\tif (gulpEntry) {\n\t\t\tentries.push(gulpEntry);\n\t\t}\n\t\tconst jakeEntry = TaskQuickPick.getSettingEntry(configurationService, 'jake');\n\t\tif (jakeEntry) {\n\t\t\tentries.push(jakeEntry);\n\t\t}\n\t\treturn entries;\n\t}\n\n\tpublic static getSettingEntry(configurationService: IConfigurationService, type: string): (ITaskTwoLevelQuickPickEntry & { settingType: string }) | undefined {\n\t\tif (configurationService.getValue(`${type}.autoDetect`) === 'off') {\n\t\t\treturn {\n\t\t\t\tlabel: nls.localize('TaskQuickPick.changeSettingsOptions', \"$(gear) {0} task detection is turned off. Enable {1} task detection...\",\n\t\t\t\t\ttype[0].toUpperCase() + type.slice(1), type),\n\t\t\t\ttask: null,\n\t\t\t\tsettingType: type,\n\t\t\t\talwaysShow: true\n\t\t\t};\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async _getEntriesForProvider(type: string): Promise<QuickPickInput<ITaskTwoLevelQuickPickEntry>[]> {\n\t\tconst tasks = (await this._taskService.tasks({ type })).sort((a, b) => this._sorter.compare(a, b));\n\t\tlet taskQuickPickEntries: QuickPickInput<ITaskTwoLevelQuickPickEntry>[] = [];\n\t\tif (tasks.length > 0) {\n\t\t\tfor (const task of tasks) {\n\t\t\t\tif (!task.configurationProperties.hide) {\n\t\t\t\t\ttaskQuickPickEntries.push(this._createTaskEntry(task));\n\t\t\t\t}\n\t\t\t}\n\t\t\ttaskQuickPickEntries.push({\n\t\t\t\ttype: 'separator'\n\t\t\t}, {\n\t\t\t\tlabel: nls.localize('TaskQuickPick.goBack', 'Go back ↩'),\n\t\t\t\ttask: null,\n\t\t\t\talwaysShow: true\n\t\t\t});\n\t\t} else {\n\t\t\ttaskQuickPickEntries = [{\n\t\t\t\tlabel: nls.localize('TaskQuickPick.noTasksForType', 'No {0} tasks found. Go back ↩', type),\n\t\t\t\ttask: null,\n\t\t\t\talwaysShow: true\n\t\t\t}];\n\t\t}\n\n\t\tconst settingEntry = TaskQuickPick.getSettingEntry(this._configurationService, type);\n\t\tif (settingEntry) {\n\t\t\ttaskQuickPickEntries.push(settingEntry);\n\t\t}\n\t\treturn taskQuickPickEntries;\n\t}\n\n\tprivate async _toTask(task: Task | ConfiguringTask): Promise<Task | undefined> {\n\t\tif (!ConfiguringTask.is(task)) {\n\t\t\treturn task;\n\t\t}\n\n\t\tconst resolvedTask = await this._taskService.tryResolveTask(task);\n\n\t\tif (!resolvedTask) {\n\t\t\tthis._notificationService.error(nls.localize('noProviderForTask', \"There is no task provider registered for tasks of type \\\"{0}\\\".\", task.type));\n\t\t}\n\t\treturn resolvedTask;\n\t}\n}\n"]}