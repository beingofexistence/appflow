{"version":3,"sources":["vs/workbench/contrib/tasks/browser/taskService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAUhG,MAAa,IAAY,SAAQ,0BAAI;iBACZ,OAAE,GAAgC,GAAG,CAAC,QAAQ,CAAC,CAA+B,EAAE,IAAgD,CAAC,CAAC;QAEhJ,EAAE;YACX,IAAI,IAAI,CAAC,CAAC,EAAY;gBACrB,OAAO,IAAI,CAAC,CAAC,CAAW;aACxB;YACD,IAAI,IAAI,CAAC,EAAE,KAAkB,uBAAe,CAAC,QAAQ,EAAE;gBACtD,MAAM,IAAI,KAAK,CAAC,IAAI,CAAQ,EAAE,CAA8B,CAAC;aAC7D;YACD,IAAI,CAAC,CAAC,GAAa,IAAI,CAAC,EAAE,EAAyB,CAAC;YACpD,IAAI,CAAC,CAAC;gBACL;oBACC,IAAI,CAAC,CAAC,CAAW,gBAAgB,CAAC,CAAC,KAAK,EAAE,EAAE;wBAC3C,IAAI,CAAC,CAAC,CAAiB,GAAG,CAAC,IAAI,CAAC,CAAY,CAAC,YAAY,EAAE,CAAC,CAAC;wBAC7D,IAAI,CAAC,CAAC,CAAiB,IAAI,CAAC,KAAK,CAAC,CAAC;oBACpC,CAAC,CAAC;iBACF,CAAC;YACH,OAAO,IAAI,CAAC,CAAC,CAAW;QACzB,CAAC;QAES,EAAE,CAA0B,eAAiC;YACtE,MAAM,IAAI,KAAK,CAAC,IAAI,CAAQ,EAAE,CAA8B,CAAC;QAC9D,CAAC;QAES,EAAE,CAA0B,MAAoB;YACzD,OAAO,IAAI,CAAC,EAAE,KAAkB,uBAAe,CAAC,QAAQ,CAAC;QAC1D,CAAC;;IA3BF,oBA4BC;IAED,IAAA,gBAAG,EAAe,kBAAI,EAAU,IAAI,oCAAmC,CAAC","file":"taskService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { ITaskSystem } from 'vs/workbench/contrib/tasks/common/taskSystem';\nimport { ExecutionEngine } from 'vs/workbench/contrib/tasks/common/tasks';\nimport { AbstractTaskService, IWorkspaceFolderConfigurationResult } from 'vs/workbench/contrib/tasks/browser/abstractTaskService';\nimport { ITaskFilter, ITaskService } from 'vs/workbench/contrib/tasks/common/taskService';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\nexport class TaskService extends AbstractTaskService {\n\tprivate static readonly ProcessTaskSystemSupportMessage = nls.localize('taskService.processTaskSystem', 'Process task system is not support in the web.');\n\n\tprotected _getTaskSystem(): ITaskSystem {\n\t\tif (this._taskSystem) {\n\t\t\treturn this._taskSystem;\n\t\t}\n\t\tif (this.executionEngine !== ExecutionEngine.Terminal) {\n\t\t\tthrow new Error(TaskService.ProcessTaskSystemSupportMessage);\n\t\t}\n\t\tthis._taskSystem = this._createTerminalTaskSystem();\n\t\tthis._taskSystemListeners =\n\t\t\t[\n\t\t\t\tthis._taskSystem.onDidStateChange((event) => {\n\t\t\t\t\tthis._taskRunningState.set(this._taskSystem!.isActiveSync());\n\t\t\t\t\tthis._onDidStateChange.fire(event);\n\t\t\t\t}),\n\t\t\t];\n\t\treturn this._taskSystem;\n\t}\n\n\tprotected _computeLegacyConfiguration(workspaceFolder: IWorkspaceFolder): Promise<IWorkspaceFolderConfigurationResult> {\n\t\tthrow new Error(TaskService.ProcessTaskSystemSupportMessage);\n\t}\n\n\tprotected _versionAndEngineCompatible(filter?: ITaskFilter): boolean {\n\t\treturn this.executionEngine === ExecutionEngine.Terminal;\n\t}\n}\n\nregisterSingleton(ITaskService, TaskService, InstantiationType.Delayed);\n"]}