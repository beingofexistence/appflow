{"version":3,"sources":["vs/workbench/contrib/tasks/browser/terminalTaskSystem.ts"],"names":[],"mappings":"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","file":"terminalTaskSystem.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { asArray } from 'vs/base/common/arrays';\nimport * as Async from 'vs/base/common/async';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { isUNC } from 'vs/base/common/extpath';\nimport { Disposable, DisposableStore, IDisposable } from 'vs/base/common/lifecycle';\nimport { LinkedMap, Touch } from 'vs/base/common/map';\nimport * as Objects from 'vs/base/common/objects';\nimport * as path from 'vs/base/common/path';\nimport * as Platform from 'vs/base/common/platform';\nimport * as resources from 'vs/base/common/resources';\nimport Severity from 'vs/base/common/severity';\nimport * as Types from 'vs/base/common/types';\nimport * as nls from 'vs/nls';\n\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IMarkerService, MarkerSeverity } from 'vs/platform/markers/common/markers';\nimport { IWorkspaceContextService, IWorkspaceFolder, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { Markers } from 'vs/workbench/contrib/markers/common/markers';\nimport { ProblemMatcher, ProblemMatcherRegistry /*, ProblemPattern, getResource */ } from 'vs/workbench/contrib/tasks/common/problemMatcher';\n\nimport { Codicon } from 'vs/base/common/codicons';\nimport { Schemas } from 'vs/base/common/network';\nimport { ThemeIcon } from 'vs/base/common/themables';\nimport { URI } from 'vs/base/common/uri';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IShellLaunchConfig, WaitOnExitValue } from 'vs/platform/terminal/common/terminal';\nimport { formatMessageForTerminal } from 'vs/platform/terminal/common/terminalStrings';\nimport { IViewDescriptorService, IViewsService, ViewContainerLocation } from 'vs/workbench/common/views';\nimport { TaskTerminalStatus } from 'vs/workbench/contrib/tasks/browser/taskTerminalStatus';\nimport { ProblemCollectorEventKind, ProblemHandlingStrategy, StartStopProblemCollector, WatchingProblemCollector } from 'vs/workbench/contrib/tasks/common/problemCollectors';\nimport { GroupKind } from 'vs/workbench/contrib/tasks/common/taskConfiguration';\nimport { IResolveSet, IResolvedVariables, ITaskExecuteResult, ITaskResolver, ITaskSummary, ITaskSystem, ITaskSystemInfo, ITaskSystemInfoResolver, ITaskTerminateResponse, TaskError, TaskErrors, TaskExecuteKind, Triggers } from 'vs/workbench/contrib/tasks/common/taskSystem';\nimport { CommandOptions, CommandString, ContributedTask, CustomTask, DependsOrder, ICommandConfiguration, IConfigurationProperties, IExtensionTaskSource, IPresentationOptions, IShellConfiguration, IShellQuotingOptions, ITaskEvent, InMemoryTask, PanelKind, RevealKind, RevealProblemKind, RuntimeType, ShellQuoting, Task, TaskEvent, TaskEventKind, TaskScope, TaskSourceKind } from 'vs/workbench/contrib/tasks/common/tasks';\nimport { ITerminalGroupService, ITerminalInstance, ITerminalService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { VSCodeOscProperty, VSCodeOscPt, VSCodeSequence } from 'vs/workbench/contrib/terminal/browser/terminalEscapeSequences';\nimport { TerminalProcessExtHostProxy } from 'vs/workbench/contrib/terminal/browser/terminalProcessExtHostProxy';\nimport { ITerminalProfileResolverService, TERMINAL_VIEW_ID } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IOutputService } from 'vs/workbench/services/output/common/output';\nimport { IPaneCompositePartService } from 'vs/workbench/services/panecomposite/browser/panecomposite';\nimport { IPathService } from 'vs/workbench/services/path/common/pathService';\n\ninterface ITerminalData {\n\tterminal: ITerminalInstance;\n\tlastTask: string;\n\tgroup?: string;\n}\n\ninterface IInstanceCount {\n\tcount: number;\n}\n\ninterface IActiveTerminalData {\n\tterminal?: ITerminalInstance;\n\ttask: Task;\n\tpromise: Promise<ITaskSummary>;\n\tstate?: TaskEventKind;\n\tcount: IInstanceCount;\n}\n\ninterface IReconnectionTaskData {\n\tlabel: string;\n\tid: string;\n\tlastTask: string;\n\tgroup?: string;\n}\n\nconst ReconnectionType = 'Task';\n\nclass VariableResolver {\n\tprivate static _regex = /\\$\\{(.*?)\\}/g;\n\tconstructor(public workspaceFolder: IWorkspaceFolder | undefined, public taskSystemInfo: ITaskSystemInfo | undefined, public readonly values: Map<string, string>, private _service: IConfigurationResolverService | undefined) {\n\t}\n\tasync resolve(value: string): Promise<string> {\n\t\tconst replacers: Promise<string>[] = [];\n\t\tvalue.replace(VariableResolver._regex, (match, ...args) => {\n\t\t\treplacers.push(this._replacer(match, args));\n\t\t\treturn match;\n\t\t});\n\t\tconst resolvedReplacers = await Promise.all(replacers);\n\t\treturn value.replace(VariableResolver._regex, () => resolvedReplacers.shift()!);\n\n\t}\n\n\tprivate async _replacer(match: string, args: string[]): Promise<string> {\n\t\t// Strip out the ${} because the map contains them variables without those characters.\n\t\tconst result = this.values.get(match.substring(2, match.length - 1));\n\t\tif ((result !== undefined) && (result !== null)) {\n\t\t\treturn result;\n\t\t}\n\t\tif (this._service) {\n\t\t\treturn this._service.resolveAsync(this.workspaceFolder, match);\n\t\t}\n\t\treturn match;\n\t}\n}\n\nclass VerifiedTask {\n\treadonly task: Task;\n\treadonly resolver: ITaskResolver;\n\treadonly trigger: string;\n\tresolvedVariables?: IResolvedVariables;\n\tsystemInfo?: ITaskSystemInfo;\n\tworkspaceFolder?: IWorkspaceFolder;\n\tshellLaunchConfig?: IShellLaunchConfig;\n\n\tconstructor(task: Task, resolver: ITaskResolver, trigger: string) {\n\t\tthis.task = task;\n\t\tthis.resolver = resolver;\n\t\tthis.trigger = trigger;\n\t}\n\n\tpublic verify(): boolean {\n\t\tlet verified = false;\n\t\tif (this.trigger && this.resolvedVariables && this.workspaceFolder && (this.shellLaunchConfig !== undefined)) {\n\t\t\tverified = true;\n\t\t}\n\t\treturn verified;\n\t}\n\n\tpublic getVerifiedTask(): { task: Task; resolver: ITaskResolver; trigger: string; resolvedVariables: IResolvedVariables; systemInfo: ITaskSystemInfo; workspaceFolder: IWorkspaceFolder; shellLaunchConfig: IShellLaunchConfig } {\n\t\tif (this.verify()) {\n\t\t\treturn { task: this.task, resolver: this.resolver, trigger: this.trigger, resolvedVariables: this.resolvedVariables!, systemInfo: this.systemInfo!, workspaceFolder: this.workspaceFolder!, shellLaunchConfig: this.shellLaunchConfig! };\n\t\t} else {\n\t\t\tthrow new Error('VerifiedTask was not checked. verify must be checked before getVerifiedTask.');\n\t\t}\n\t}\n}\n\nexport class TerminalTaskSystem extends Disposable implements ITaskSystem {\n\n\tpublic static TelemetryEventName: string = 'taskService';\n\n\tprivate static readonly ProcessVarName = '__process__';\n\n\tprivate static _shellQuotes: IStringDictionary<IShellQuotingOptions> = {\n\t\t'cmd': {\n\t\t\tstrong: '\"'\n\t\t},\n\t\t'powershell': {\n\t\t\tescape: {\n\t\t\t\tescapeChar: '`',\n\t\t\t\tcharsToEscape: ' \"\\'()'\n\t\t\t},\n\t\t\tstrong: '\\'',\n\t\t\tweak: '\"'\n\t\t},\n\t\t'bash': {\n\t\t\tescape: {\n\t\t\t\tescapeChar: '\\\\',\n\t\t\t\tcharsToEscape: ' \"\\''\n\t\t\t},\n\t\t\tstrong: '\\'',\n\t\t\tweak: '\"'\n\t\t},\n\t\t'zsh': {\n\t\t\tescape: {\n\t\t\t\tescapeChar: '\\\\',\n\t\t\t\tcharsToEscape: ' \"\\''\n\t\t\t},\n\t\t\tstrong: '\\'',\n\t\t\tweak: '\"'\n\t\t}\n\t};\n\n\tprivate static _osShellQuotes: IStringDictionary<IShellQuotingOptions> = {\n\t\t'Linux': TerminalTaskSystem._shellQuotes['bash'],\n\t\t'Mac': TerminalTaskSystem._shellQuotes['bash'],\n\t\t'Windows': TerminalTaskSystem._shellQuotes['powershell']\n\t};\n\n\tprivate _activeTasks: IStringDictionary<IActiveTerminalData>;\n\tprivate _busyTasks: IStringDictionary<Task>;\n\tprivate _terminals: IStringDictionary<ITerminalData>;\n\tprivate _idleTaskTerminals: LinkedMap<string, string>;\n\tprivate _sameTaskTerminals: IStringDictionary<string>;\n\tprivate _taskSystemInfoResolver: ITaskSystemInfoResolver;\n\tprivate _lastTask: VerifiedTask | undefined;\n\t// Should always be set in run\n\tprivate _currentTask!: VerifiedTask;\n\tprivate _isRerun: boolean = false;\n\tprivate _previousPanelId: string | undefined;\n\tprivate _previousTerminalInstance: ITerminalInstance | undefined;\n\tprivate _terminalStatusManager: TaskTerminalStatus;\n\tprivate _terminalCreationQueue: Promise<ITerminalInstance | void> = Promise.resolve();\n\tprivate _hasReconnected: boolean = false;\n\tprivate readonly _onDidStateChange: Emitter<ITaskEvent>;\n\tprivate _reconnectedTerminals: ITerminalInstance[] | undefined;\n\n\ttaskShellIntegrationStartSequence(cwd: string | URI | undefined): string {\n\t\treturn (\n\t\t\tVSCodeSequence(VSCodeOscPt.PromptStart) +\n\t\t\tVSCodeSequence(VSCodeOscPt.Property, `${VSCodeOscProperty.Task}=True`) +\n\t\t\t(cwd\n\t\t\t\t? VSCodeSequence(VSCodeOscPt.Property, `${VSCodeOscProperty.Cwd}=${typeof cwd === 'string' ? cwd : cwd.fsPath}`)\n\t\t\t\t: ''\n\t\t\t) +\n\t\t\tVSCodeSequence(VSCodeOscPt.CommandStart)\n\t\t);\n\t}\n\tget taskShellIntegrationOutputSequence(): string {\n\t\treturn VSCodeSequence(VSCodeOscPt.CommandExecuted);\n\t}\n\n\tconstructor(\n\t\tprivate _terminalService: ITerminalService,\n\t\tprivate _terminalGroupService: ITerminalGroupService,\n\t\tprivate _outputService: IOutputService,\n\t\tprivate _paneCompositeService: IPaneCompositePartService,\n\t\tprivate _viewsService: IViewsService,\n\t\tprivate _markerService: IMarkerService,\n\t\tprivate _modelService: IModelService,\n\t\tprivate _configurationResolverService: IConfigurationResolverService,\n\t\tprivate _contextService: IWorkspaceContextService,\n\t\tprivate _environmentService: IWorkbenchEnvironmentService,\n\t\tprivate _outputChannelId: string,\n\t\tprivate _fileService: IFileService,\n\t\tprivate _terminalProfileResolverService: ITerminalProfileResolverService,\n\t\tprivate _pathService: IPathService,\n\t\tprivate _viewDescriptorService: IViewDescriptorService,\n\t\tprivate _logService: ILogService,\n\t\tprivate _notificationService: INotificationService,\n\t\tinstantiationService: IInstantiationService,\n\t\ttaskSystemInfoResolver: ITaskSystemInfoResolver,\n\t) {\n\t\tsuper();\n\n\t\tthis._activeTasks = Object.create(null);\n\t\tthis._busyTasks = Object.create(null);\n\t\tthis._terminals = Object.create(null);\n\t\tthis._idleTaskTerminals = new LinkedMap<string, string>();\n\t\tthis._sameTaskTerminals = Object.create(null);\n\t\tthis._onDidStateChange = new Emitter();\n\t\tthis._taskSystemInfoResolver = taskSystemInfoResolver;\n\t\tthis._register(this._terminalStatusManager = instantiationService.createInstance(TaskTerminalStatus));\n\t}\n\n\tpublic get onDidStateChange(): Event<ITaskEvent> {\n\t\treturn this._onDidStateChange.event;\n\t}\n\n\tprivate _log(value: string): void {\n\t\tthis._appendOutput(value + '\\n');\n\t}\n\n\tprotected _showOutput(): void {\n\t\tthis._outputService.showChannel(this._outputChannelId, true);\n\t}\n\n\tpublic reconnect(task: Task, resolver: ITaskResolver): ITaskExecuteResult {\n\t\tthis._reconnectToTerminals();\n\t\treturn this.run(task, resolver, Triggers.reconnect);\n\t}\n\n\tpublic run(task: Task, resolver: ITaskResolver, trigger: string = Triggers.command): ITaskExecuteResult {\n\t\ttask = task.clone(); // A small amount of task state is stored in the task (instance) and tasks passed in to run may have that set already.\n\t\tconst instances = InMemoryTask.is(task) || this._isTaskEmpty(task) ? [] : this._getInstances(task);\n\t\tconst validInstance = instances.length < ((task.runOptions && task.runOptions.instanceLimit) ?? 1);\n\t\tconst instance = instances[0]?.count?.count ?? 0;\n\t\tthis._currentTask = new VerifiedTask(task, resolver, trigger);\n\t\tif (instance > 0) {\n\t\t\ttask.instance = instance;\n\t\t}\n\t\tif (!validInstance) {\n\t\t\tconst terminalData = instances[instances.length - 1];\n\t\t\tthis._lastTask = this._currentTask;\n\t\t\treturn { kind: TaskExecuteKind.Active, task: terminalData.task, active: { same: true, background: task.configurationProperties.isBackground! }, promise: terminalData.promise };\n\t\t}\n\n\t\ttry {\n\t\t\tconst executeResult = { kind: TaskExecuteKind.Started, task, started: {}, promise: this._executeTask(task, resolver, trigger, new Set(), new Map(), undefined) };\n\t\t\texecuteResult.promise.then(summary => {\n\t\t\t\tthis._lastTask = this._currentTask;\n\t\t\t});\n\t\t\treturn executeResult;\n\t\t} catch (error) {\n\t\t\tif (error instanceof TaskError) {\n\t\t\t\tthrow error;\n\t\t\t} else if (error instanceof Error) {\n\t\t\t\tthis._log(error.message);\n\t\t\t\tthrow new TaskError(Severity.Error, error.message, TaskErrors.UnknownError);\n\t\t\t} else {\n\t\t\t\tthis._log(error.toString());\n\t\t\t\tthrow new TaskError(Severity.Error, nls.localize('TerminalTaskSystem.unknownError', 'A unknown error has occurred while executing a task. See task output log for details.'), TaskErrors.UnknownError);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic rerun(): ITaskExecuteResult | undefined {\n\t\tif (this._lastTask && this._lastTask.verify()) {\n\t\t\tif ((this._lastTask.task.runOptions.reevaluateOnRerun !== undefined) && !this._lastTask.task.runOptions.reevaluateOnRerun) {\n\t\t\t\tthis._isRerun = true;\n\t\t\t}\n\t\t\tconst result = this.run(this._lastTask.task, this._lastTask.resolver);\n\t\t\tresult.promise.then(summary => {\n\t\t\t\tthis._isRerun = false;\n\t\t\t});\n\t\t\treturn result;\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tprivate _showTaskLoadErrors(task: Task) {\n\t\tif (task.taskLoadMessages && task.taskLoadMessages.length > 0) {\n\t\t\ttask.taskLoadMessages.forEach(loadMessage => {\n\t\t\t\tthis._log(loadMessage + '\\n');\n\t\t\t});\n\t\t\tconst openOutput = 'Show Output';\n\t\t\tthis._notificationService.prompt(Severity.Warning,\n\t\t\t\tnls.localize('TerminalTaskSystem.taskLoadReporting', \"There are issues with task \\\"{0}\\\". See the output for more details.\",\n\t\t\t\t\ttask._label), [{\n\t\t\t\t\t\tlabel: openOutput,\n\t\t\t\t\t\trun: () => this._showOutput()\n\t\t\t\t\t}]);\n\t\t}\n\t}\n\n\tpublic isTaskVisible(task: Task): boolean {\n\t\tconst terminalData = this._activeTasks[task.getMapKey()];\n\t\tif (!terminalData?.terminal) {\n\t\t\treturn false;\n\t\t}\n\t\tconst activeTerminalInstance = this._terminalService.activeInstance;\n\t\tconst isPanelShowingTerminal = !!this._viewsService.getActiveViewWithId(TERMINAL_VIEW_ID);\n\t\treturn isPanelShowingTerminal && (activeTerminalInstance?.instanceId === terminalData.terminal.instanceId);\n\t}\n\n\n\tpublic revealTask(task: Task): boolean {\n\t\tconst terminalData = this._activeTasks[task.getMapKey()];\n\t\tif (!terminalData?.terminal) {\n\t\t\treturn false;\n\t\t}\n\t\tconst isTerminalInPanel: boolean = this._viewDescriptorService.getViewLocationById(TERMINAL_VIEW_ID) === ViewContainerLocation.Panel;\n\t\tif (isTerminalInPanel && this.isTaskVisible(task)) {\n\t\t\tif (this._previousPanelId) {\n\t\t\t\tif (this._previousTerminalInstance) {\n\t\t\t\t\tthis._terminalService.setActiveInstance(this._previousTerminalInstance);\n\t\t\t\t}\n\t\t\t\tthis._paneCompositeService.openPaneComposite(this._previousPanelId, ViewContainerLocation.Panel);\n\t\t\t} else {\n\t\t\t\tthis._paneCompositeService.hideActivePaneComposite(ViewContainerLocation.Panel);\n\t\t\t}\n\t\t\tthis._previousPanelId = undefined;\n\t\t\tthis._previousTerminalInstance = undefined;\n\t\t} else {\n\t\t\tif (isTerminalInPanel) {\n\t\t\t\tthis._previousPanelId = this._paneCompositeService.getActivePaneComposite(ViewContainerLocation.Panel)?.getId();\n\t\t\t\tif (this._previousPanelId === TERMINAL_VIEW_ID) {\n\t\t\t\t\tthis._previousTerminalInstance = this._terminalService.activeInstance ?? undefined;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._terminalService.setActiveInstance(terminalData.terminal);\n\t\t\tif (CustomTask.is(task) || ContributedTask.is(task)) {\n\t\t\t\tthis._terminalGroupService.showPanel(task.command.presentation!.focus);\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\n\tpublic isActive(): Promise<boolean> {\n\t\treturn Promise.resolve(this.isActiveSync());\n\t}\n\n\tpublic isActiveSync(): boolean {\n\t\treturn Object.values(this._activeTasks).some(value => !!value.terminal);\n\t}\n\n\tpublic canAutoTerminate(): boolean {\n\t\treturn Object.values(this._activeTasks).every(value => !value.task.configurationProperties.promptOnClose);\n\t}\n\n\tpublic getActiveTasks(): Task[] {\n\t\treturn Object.values(this._activeTasks).flatMap(value => value.terminal ? value.task : []);\n\t}\n\n\tpublic getLastInstance(task: Task): Task | undefined {\n\t\tconst recentKey = task.getRecentlyUsedKey();\n\t\treturn Object.values(this._activeTasks).reverse().find(\n\t\t\t(value) => recentKey && recentKey === value.task.getRecentlyUsedKey())?.task;\n\t}\n\n\tpublic getBusyTasks(): Task[] {\n\t\treturn Object.keys(this._busyTasks).map(key => this._busyTasks[key]);\n\t}\n\n\tpublic customExecutionComplete(task: Task, result: number): Promise<void> {\n\t\tconst activeTerminal = this._activeTasks[task.getMapKey()];\n\t\tif (!activeTerminal?.terminal) {\n\t\t\treturn Promise.reject(new Error('Expected to have a terminal for a custom execution task'));\n\t\t}\n\n\t\treturn new Promise<void>((resolve) => {\n\t\t\t// activeTerminal.terminal.rendererExit(result);\n\t\t\tresolve();\n\t\t});\n\t}\n\n\tprivate _getInstances(task: Task): IActiveTerminalData[] {\n\t\tconst recentKey = task.getRecentlyUsedKey();\n\t\treturn Object.values(this._activeTasks).filter(\n\t\t\t(value) => recentKey && recentKey === value.task.getRecentlyUsedKey());\n\t}\n\n\tprivate _removeFromActiveTasks(task: Task | string): void {\n\t\tconst key = typeof task === 'string' ? task : task.getMapKey();\n\t\tconst taskToRemove = this._activeTasks[key];\n\t\tif (!taskToRemove) {\n\t\t\treturn;\n\t\t}\n\t\tdelete this._activeTasks[key];\n\t}\n\n\tprivate _fireTaskEvent(event: ITaskEvent) {\n\t\tif (event.kind !== TaskEventKind.Changed) {\n\t\t\tconst activeTask = this._activeTasks[event.__task.getMapKey()];\n\t\t\tif (activeTask) {\n\t\t\t\tactiveTask.state = event.kind;\n\t\t\t}\n\t\t}\n\t\tthis._onDidStateChange.fire(event);\n\t}\n\n\tpublic terminate(task: Task): Promise<ITaskTerminateResponse> {\n\t\tconst activeTerminal = this._activeTasks[task.getMapKey()];\n\t\tconst terminal = activeTerminal.terminal;\n\t\tif (!terminal) {\n\t\t\treturn Promise.resolve<ITaskTerminateResponse>({ success: false, task: undefined });\n\t\t}\n\t\treturn new Promise<ITaskTerminateResponse>((resolve, reject) => {\n\t\t\tterminal.onDisposed(terminal => {\n\t\t\t\tthis._fireTaskEvent(TaskEvent.terminated(task, terminal.instanceId, terminal.exitReason));\n\t\t\t});\n\t\t\tconst onExit = terminal.onExit(() => {\n\t\t\t\tconst task = activeTerminal.task;\n\t\t\t\ttry {\n\t\t\t\t\tonExit.dispose();\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.terminated(task, terminal.instanceId, terminal.exitReason));\n\t\t\t\t} catch (error) {\n\t\t\t\t\t// Do nothing.\n\t\t\t\t}\n\t\t\t\tresolve({ success: true, task: task });\n\t\t\t});\n\t\t\tterminal.dispose();\n\t\t});\n\t}\n\n\tpublic terminateAll(): Promise<ITaskTerminateResponse[]> {\n\t\tconst promises: Promise<ITaskTerminateResponse>[] = [];\n\t\tfor (const [key, terminalData] of Object.entries(this._activeTasks)) {\n\t\t\tconst terminal = terminalData.terminal;\n\t\t\tif (terminal) {\n\t\t\t\tpromises.push(new Promise<ITaskTerminateResponse>((resolve, reject) => {\n\t\t\t\t\tconst onExit = terminal.onExit(() => {\n\t\t\t\t\t\tconst task = terminalData.task;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tonExit.dispose();\n\t\t\t\t\t\t\tthis._fireTaskEvent(TaskEvent.terminated(task, terminal.instanceId, terminal.exitReason));\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t// Do nothing.\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this._activeTasks[key] === terminalData) {\n\t\t\t\t\t\t\tdelete this._activeTasks[key];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve({ success: true, task: terminalData.task });\n\t\t\t\t\t});\n\t\t\t\t}));\n\t\t\t\tterminal.dispose();\n\t\t\t}\n\t\t}\n\t\treturn Promise.all<ITaskTerminateResponse>(promises);\n\t}\n\n\tprivate _showDependencyCycleMessage(task: Task) {\n\t\tthis._log(nls.localize('dependencyCycle',\n\t\t\t'There is a dependency cycle. See task \"{0}\".',\n\t\t\ttask._label\n\t\t));\n\t\tthis._showOutput();\n\t}\n\n\tprivate _executeTask(task: Task, resolver: ITaskResolver, trigger: string, liveDependencies: Set<string>, encounteredTasks: Map<string, Promise<ITaskSummary>>, alreadyResolved?: Map<string, string>): Promise<ITaskSummary> {\n\t\tthis._showTaskLoadErrors(task);\n\n\t\tconst mapKey = task.getMapKey();\n\n\t\t// It's important that we add this task's entry to _activeTasks before\n\t\t// any of the code in the then runs (see #180541 and #180578). Wrapping\n\t\t// it in Promise.resolve().then() ensures that.\n\t\tconst promise = Promise.resolve().then(async () => {\n\t\t\talreadyResolved = alreadyResolved ?? new Map<string, string>();\n\t\t\tconst promises: Promise<ITaskSummary>[] = [];\n\t\t\tif (task.configurationProperties.dependsOn) {\n\t\t\t\tconst nextLiveDependencies = new Set(liveDependencies).add(task.getCommonTaskId());\n\t\t\t\tfor (const dependency of task.configurationProperties.dependsOn) {\n\t\t\t\t\tconst dependencyTask = await resolver.resolve(dependency.uri, dependency.task!);\n\t\t\t\t\tif (dependencyTask) {\n\t\t\t\t\t\tthis._adoptConfigurationForDependencyTask(dependencyTask, task);\n\t\t\t\t\t\tlet taskResult;\n\t\t\t\t\t\tconst commonKey = dependencyTask.getCommonTaskId();\n\t\t\t\t\t\tif (nextLiveDependencies.has(commonKey)) {\n\t\t\t\t\t\t\tthis._showDependencyCycleMessage(dependencyTask);\n\t\t\t\t\t\t\ttaskResult = Promise.resolve<ITaskSummary>({});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttaskResult = encounteredTasks.get(commonKey);\n\t\t\t\t\t\t\tif (!taskResult) {\n\t\t\t\t\t\t\t\tconst activeTask = this._activeTasks[dependencyTask.getMapKey()] ?? this._getInstances(dependencyTask).pop();\n\t\t\t\t\t\t\t\ttaskResult = activeTask && this._getDependencyPromise(activeTask);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!taskResult) {\n\t\t\t\t\t\t\tthis._fireTaskEvent(TaskEvent.general(TaskEventKind.DependsOnStarted, task));\n\t\t\t\t\t\t\ttaskResult = this._executeDependencyTask(dependencyTask, resolver, trigger, nextLiveDependencies, encounteredTasks, alreadyResolved);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tencounteredTasks.set(commonKey, taskResult);\n\t\t\t\t\t\tpromises.push(taskResult);\n\t\t\t\t\t\tif (task.configurationProperties.dependsOrder === DependsOrder.sequence) {\n\t\t\t\t\t\t\tconst promiseResult = await taskResult;\n\t\t\t\t\t\t\tif (promiseResult.exitCode !== 0) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._log(nls.localize('dependencyFailed',\n\t\t\t\t\t\t\t'Couldn\\'t resolve dependent task \\'{0}\\' in workspace folder \\'{1}\\'',\n\t\t\t\t\t\t\tTypes.isString(dependency.task) ? dependency.task : JSON.stringify(dependency.task, undefined, 0),\n\t\t\t\t\t\t\tdependency.uri.toString()\n\t\t\t\t\t\t));\n\t\t\t\t\t\tthis._showOutput();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn Promise.all(promises).then((summaries): Promise<ITaskSummary> | ITaskSummary => {\n\t\t\t\tfor (const summary of summaries) {\n\t\t\t\t\tif (summary.exitCode !== 0) {\n\t\t\t\t\t\treturn { exitCode: summary.exitCode };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif ((ContributedTask.is(task) || CustomTask.is(task)) && (task.command)) {\n\t\t\t\t\tif (this._isRerun) {\n\t\t\t\t\t\treturn this._reexecuteCommand(task, trigger, alreadyResolved!);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn this._executeCommand(task, trigger, alreadyResolved!);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn { exitCode: 0 };\n\t\t\t});\n\t\t}).finally(() => {\n\t\t\tif (this._activeTasks[mapKey] === activeTask) {\n\t\t\t\tdelete this._activeTasks[mapKey];\n\t\t\t}\n\t\t});\n\t\tconst lastInstance = this._getInstances(task).pop();\n\t\tconst count = lastInstance?.count ?? { count: 0 };\n\t\tcount.count++;\n\t\tconst activeTask = { task, promise, count };\n\t\tthis._activeTasks[mapKey] = activeTask;\n\t\treturn promise;\n\t}\n\n\tprivate _createInactiveDependencyPromise(task: Task): Promise<ITaskSummary> {\n\t\treturn new Promise<ITaskSummary>(resolve => {\n\t\t\tconst taskInactiveDisposable = this.onDidStateChange(taskEvent => {\n\t\t\t\tif ((taskEvent.kind === TaskEventKind.Inactive) && (taskEvent.__task === task)) {\n\t\t\t\t\ttaskInactiveDisposable.dispose();\n\t\t\t\t\tresolve({ exitCode: 0 });\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate _adoptConfigurationForDependencyTask(dependencyTask: Task, task: Task): void {\n\t\tif (dependencyTask.configurationProperties.icon) {\n\t\t\tdependencyTask.configurationProperties.icon.id ||= task.configurationProperties.icon?.id;\n\t\t\tdependencyTask.configurationProperties.icon.color ||= task.configurationProperties.icon?.color;\n\t\t} else {\n\t\t\tdependencyTask.configurationProperties.icon = task.configurationProperties.icon;\n\t\t}\n\n\t\tif (dependencyTask.configurationProperties.hide) {\n\t\t\tdependencyTask.configurationProperties.hide ||= task.configurationProperties.hide;\n\t\t} else {\n\t\t\tdependencyTask.configurationProperties.hide = task.configurationProperties.hide;\n\t\t}\n\t}\n\n\tprivate async _getDependencyPromise(task: IActiveTerminalData): Promise<ITaskSummary> {\n\t\tif (!task.task.configurationProperties.isBackground) {\n\t\t\treturn task.promise;\n\t\t}\n\t\tif (!task.task.configurationProperties.problemMatchers || task.task.configurationProperties.problemMatchers.length === 0) {\n\t\t\treturn task.promise;\n\t\t}\n\t\tif (task.state === TaskEventKind.Inactive) {\n\t\t\treturn { exitCode: 0 };\n\t\t}\n\t\treturn this._createInactiveDependencyPromise(task.task);\n\t}\n\n\tprivate async _executeDependencyTask(task: Task, resolver: ITaskResolver, trigger: string, liveDependencies: Set<string>, encounteredTasks: Map<string, Promise<ITaskSummary>>, alreadyResolved?: Map<string, string>): Promise<ITaskSummary> {\n\t\t// If the task is a background task with a watching problem matcher, we don't wait for the whole task to finish,\n\t\t// just for the problem matcher to go inactive.\n\t\tif (!task.configurationProperties.isBackground) {\n\t\t\treturn this._executeTask(task, resolver, trigger, liveDependencies, encounteredTasks, alreadyResolved);\n\t\t}\n\n\t\tconst inactivePromise = this._createInactiveDependencyPromise(task);\n\t\treturn Promise.race([inactivePromise, this._executeTask(task, resolver, trigger, liveDependencies, encounteredTasks, alreadyResolved)]);\n\t}\n\n\tprivate async _resolveAndFindExecutable(systemInfo: ITaskSystemInfo | undefined, workspaceFolder: IWorkspaceFolder | undefined, task: CustomTask | ContributedTask, cwd: string | undefined, envPath: string | undefined): Promise<string> {\n\t\tconst command = await this._configurationResolverService.resolveAsync(workspaceFolder, CommandString.value(task.command.name!));\n\t\tcwd = cwd ? await this._configurationResolverService.resolveAsync(workspaceFolder, cwd) : undefined;\n\t\tconst paths = envPath ? await Promise.all(envPath.split(path.delimiter).map(p => this._configurationResolverService.resolveAsync(workspaceFolder, p))) : undefined;\n\t\tlet foundExecutable = await systemInfo?.findExecutable(command, cwd, paths);\n\t\tif (!foundExecutable) {\n\t\t\tfoundExecutable = path.join(cwd ?? '', command);\n\t\t}\n\t\treturn foundExecutable;\n\t}\n\n\tprivate _findUnresolvedVariables(variables: Set<string>, alreadyResolved: Map<string, string>): Set<string> {\n\t\tif (alreadyResolved.size === 0) {\n\t\t\treturn variables;\n\t\t}\n\t\tconst unresolved = new Set<string>();\n\t\tfor (const variable of variables) {\n\t\t\tif (!alreadyResolved.has(variable.substring(2, variable.length - 1))) {\n\t\t\t\tunresolved.add(variable);\n\t\t\t}\n\t\t}\n\t\treturn unresolved;\n\t}\n\n\tprivate _mergeMaps(mergeInto: Map<string, string>, mergeFrom: Map<string, string>) {\n\t\tfor (const entry of mergeFrom) {\n\t\t\tif (!mergeInto.has(entry[0])) {\n\t\t\t\tmergeInto.set(entry[0], entry[1]);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _acquireInput(taskSystemInfo: ITaskSystemInfo | undefined, workspaceFolder: IWorkspaceFolder | undefined, task: CustomTask | ContributedTask, variables: Set<string>, alreadyResolved: Map<string, string>): Promise<IResolvedVariables | undefined> {\n\t\tconst resolved = await this._resolveVariablesFromSet(taskSystemInfo, workspaceFolder, task, variables, alreadyResolved);\n\t\tthis._fireTaskEvent(TaskEvent.general(TaskEventKind.AcquiredInput, task));\n\t\treturn resolved;\n\t}\n\n\tprivate _resolveVariablesFromSet(taskSystemInfo: ITaskSystemInfo | undefined, workspaceFolder: IWorkspaceFolder | undefined, task: CustomTask | ContributedTask, variables: Set<string>, alreadyResolved: Map<string, string>): Promise<IResolvedVariables | undefined> {\n\t\tconst isProcess = task.command && task.command.runtime === RuntimeType.Process;\n\t\tconst options = task.command && task.command.options ? task.command.options : undefined;\n\t\tconst cwd = options ? options.cwd : undefined;\n\t\tlet envPath: string | undefined = undefined;\n\t\tif (options && options.env) {\n\t\t\tfor (const key of Object.keys(options.env)) {\n\t\t\t\tif (key.toLowerCase() === 'path') {\n\t\t\t\t\tif (Types.isString(options.env[key])) {\n\t\t\t\t\t\tenvPath = options.env[key];\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst unresolved = this._findUnresolvedVariables(variables, alreadyResolved);\n\t\tlet resolvedVariables: Promise<IResolvedVariables | undefined>;\n\t\tif (taskSystemInfo && workspaceFolder) {\n\t\t\tconst resolveSet: IResolveSet = {\n\t\t\t\tvariables: unresolved\n\t\t\t};\n\n\t\t\tif (taskSystemInfo.platform === Platform.Platform.Windows && isProcess) {\n\t\t\t\tresolveSet.process = { name: CommandString.value(task.command.name!) };\n\t\t\t\tif (cwd) {\n\t\t\t\t\tresolveSet.process.cwd = cwd;\n\t\t\t\t}\n\t\t\t\tif (envPath) {\n\t\t\t\t\tresolveSet.process.path = envPath;\n\t\t\t\t}\n\t\t\t}\n\t\t\tresolvedVariables = taskSystemInfo.resolveVariables(workspaceFolder, resolveSet, TaskSourceKind.toConfigurationTarget(task._source.kind)).then(async (resolved) => {\n\t\t\t\tif (!resolved) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\tthis._mergeMaps(alreadyResolved, resolved.variables);\n\t\t\t\tresolved.variables = new Map(alreadyResolved);\n\t\t\t\tif (isProcess) {\n\t\t\t\t\tlet process = CommandString.value(task.command.name!);\n\t\t\t\t\tif (taskSystemInfo.platform === Platform.Platform.Windows) {\n\t\t\t\t\t\tprocess = await this._resolveAndFindExecutable(taskSystemInfo, workspaceFolder, task, cwd, envPath);\n\t\t\t\t\t}\n\t\t\t\t\tresolved.variables.set(TerminalTaskSystem.ProcessVarName, process);\n\t\t\t\t}\n\t\t\t\treturn resolved;\n\t\t\t});\n\t\t\treturn resolvedVariables;\n\t\t} else {\n\t\t\tconst variablesArray = new Array<string>();\n\t\t\tunresolved.forEach(variable => variablesArray.push(variable));\n\n\t\t\treturn new Promise<IResolvedVariables | undefined>((resolve, reject) => {\n\t\t\t\tthis._configurationResolverService.resolveWithInteraction(workspaceFolder, variablesArray, 'tasks', undefined, TaskSourceKind.toConfigurationTarget(task._source.kind)).then(async (resolvedVariablesMap: Map<string, string> | undefined) => {\n\t\t\t\t\tif (resolvedVariablesMap) {\n\t\t\t\t\t\tthis._mergeMaps(alreadyResolved, resolvedVariablesMap);\n\t\t\t\t\t\tresolvedVariablesMap = new Map(alreadyResolved);\n\t\t\t\t\t\tif (isProcess) {\n\t\t\t\t\t\t\tlet processVarValue: string;\n\t\t\t\t\t\t\tif (Platform.isWindows) {\n\t\t\t\t\t\t\t\tprocessVarValue = await this._resolveAndFindExecutable(taskSystemInfo, workspaceFolder, task, cwd, envPath);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tprocessVarValue = await this._configurationResolverService.resolveAsync(workspaceFolder, CommandString.value(task.command.name!));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tresolvedVariablesMap.set(TerminalTaskSystem.ProcessVarName, processVarValue);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst resolvedVariablesResult: IResolvedVariables = {\n\t\t\t\t\t\t\tvariables: resolvedVariablesMap,\n\t\t\t\t\t\t};\n\t\t\t\t\t\tresolve(resolvedVariablesResult);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresolve(undefined);\n\t\t\t\t\t}\n\t\t\t\t}, reason => {\n\t\t\t\t\treject(reason);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate _executeCommand(task: CustomTask | ContributedTask, trigger: string, alreadyResolved: Map<string, string>): Promise<ITaskSummary> {\n\t\tconst taskWorkspaceFolder = task.getWorkspaceFolder();\n\t\tlet workspaceFolder: IWorkspaceFolder | undefined;\n\t\tif (taskWorkspaceFolder) {\n\t\t\tworkspaceFolder = this._currentTask.workspaceFolder = taskWorkspaceFolder;\n\t\t} else {\n\t\t\tconst folders = this._contextService.getWorkspace().folders;\n\t\t\tworkspaceFolder = folders.length > 0 ? folders[0] : undefined;\n\t\t}\n\t\tconst systemInfo: ITaskSystemInfo | undefined = this._currentTask.systemInfo = this._taskSystemInfoResolver(workspaceFolder);\n\n\t\tconst variables = new Set<string>();\n\t\tthis._collectTaskVariables(variables, task);\n\t\tconst resolvedVariables = this._acquireInput(systemInfo, workspaceFolder, task, variables, alreadyResolved);\n\n\t\treturn resolvedVariables.then((resolvedVariables) => {\n\t\t\tif (resolvedVariables && !this._isTaskEmpty(task)) {\n\t\t\t\tthis._currentTask.resolvedVariables = resolvedVariables;\n\t\t\t\treturn this._executeInTerminal(task, trigger, new VariableResolver(workspaceFolder, systemInfo, resolvedVariables.variables, this._configurationResolverService), workspaceFolder);\n\t\t\t} else {\n\t\t\t\t// Allows the taskExecutions array to be updated in the extension host\n\t\t\t\tthis._fireTaskEvent(TaskEvent.general(TaskEventKind.End, task));\n\t\t\t\treturn Promise.resolve({ exitCode: 0 });\n\t\t\t}\n\t\t}, reason => {\n\t\t\treturn Promise.reject(reason);\n\t\t});\n\t}\n\n\tprivate _isTaskEmpty(task: CustomTask | ContributedTask): boolean {\n\t\tconst isCustomExecution = (task.command.runtime === RuntimeType.CustomExecution);\n\t\treturn !((task.command !== undefined) && task.command.runtime && (isCustomExecution || (task.command.name !== undefined)));\n\t}\n\n\tprivate _reexecuteCommand(task: CustomTask | ContributedTask, trigger: string, alreadyResolved: Map<string, string>): Promise<ITaskSummary> {\n\t\tconst lastTask = this._lastTask;\n\t\tif (!lastTask) {\n\t\t\treturn Promise.reject(new Error('No task previously run'));\n\t\t}\n\t\tconst workspaceFolder = this._currentTask.workspaceFolder = lastTask.workspaceFolder;\n\t\tconst variables = new Set<string>();\n\t\tthis._collectTaskVariables(variables, task);\n\n\t\t// Check that the task hasn't changed to include new variables\n\t\tlet hasAllVariables = true;\n\t\tvariables.forEach(value => {\n\t\t\tif (value.substring(2, value.length - 1) in lastTask.getVerifiedTask().resolvedVariables) {\n\t\t\t\thasAllVariables = false;\n\t\t\t}\n\t\t});\n\n\t\tif (!hasAllVariables) {\n\t\t\treturn this._acquireInput(lastTask.getVerifiedTask().systemInfo, lastTask.getVerifiedTask().workspaceFolder, task, variables, alreadyResolved).then((resolvedVariables) => {\n\t\t\t\tif (!resolvedVariables) {\n\t\t\t\t\t// Allows the taskExecutions array to be updated in the extension host\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.general(TaskEventKind.End, task));\n\t\t\t\t\treturn { exitCode: 0 };\n\t\t\t\t}\n\t\t\t\tthis._currentTask.resolvedVariables = resolvedVariables;\n\t\t\t\treturn this._executeInTerminal(task, trigger, new VariableResolver(lastTask.getVerifiedTask().workspaceFolder, lastTask.getVerifiedTask().systemInfo, resolvedVariables.variables, this._configurationResolverService), workspaceFolder!);\n\t\t\t}, reason => {\n\t\t\t\treturn Promise.reject(reason);\n\t\t\t});\n\t\t} else {\n\t\t\tthis._currentTask.resolvedVariables = lastTask.getVerifiedTask().resolvedVariables;\n\t\t\treturn this._executeInTerminal(task, trigger, new VariableResolver(lastTask.getVerifiedTask().workspaceFolder, lastTask.getVerifiedTask().systemInfo, lastTask.getVerifiedTask().resolvedVariables.variables, this._configurationResolverService), workspaceFolder!);\n\t\t}\n\t}\n\n\tprivate async _executeInTerminal(task: CustomTask | ContributedTask, trigger: string, resolver: VariableResolver, workspaceFolder: IWorkspaceFolder | undefined): Promise<ITaskSummary> {\n\t\tlet terminal: ITerminalInstance | undefined = undefined;\n\t\tlet error: TaskError | undefined = undefined;\n\t\tlet promise: Promise<ITaskSummary> | undefined = undefined;\n\t\tif (task.configurationProperties.isBackground) {\n\t\t\tconst problemMatchers = await this._resolveMatchers(resolver, task.configurationProperties.problemMatchers);\n\t\t\tconst watchingProblemMatcher = new WatchingProblemCollector(problemMatchers, this._markerService, this._modelService, this._fileService);\n\t\t\tif ((problemMatchers.length > 0) && !watchingProblemMatcher.isWatching()) {\n\t\t\t\tthis._appendOutput(nls.localize('TerminalTaskSystem.nonWatchingMatcher', 'Task {0} is a background task but uses a problem matcher without a background pattern', task._label));\n\t\t\t\tthis._showOutput();\n\t\t\t}\n\t\t\tconst toDispose = new DisposableStore();\n\t\t\tlet eventCounter: number = 0;\n\t\t\tconst mapKey = task.getMapKey();\n\t\t\ttoDispose.add(watchingProblemMatcher.onDidStateChange((event) => {\n\t\t\t\tif (event.kind === ProblemCollectorEventKind.BackgroundProcessingBegins) {\n\t\t\t\t\teventCounter++;\n\t\t\t\t\tthis._busyTasks[mapKey] = task;\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.general(TaskEventKind.Active, task, terminal?.instanceId));\n\t\t\t\t} else if (event.kind === ProblemCollectorEventKind.BackgroundProcessingEnds) {\n\t\t\t\t\teventCounter--;\n\t\t\t\t\tif (this._busyTasks[mapKey]) {\n\t\t\t\t\t\tdelete this._busyTasks[mapKey];\n\t\t\t\t\t}\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.general(TaskEventKind.Inactive, task, terminal?.instanceId));\n\t\t\t\t\tif (eventCounter === 0) {\n\t\t\t\t\t\tif ((watchingProblemMatcher.numberOfMatches > 0) && watchingProblemMatcher.maxMarkerSeverity &&\n\t\t\t\t\t\t\t(watchingProblemMatcher.maxMarkerSeverity >= MarkerSeverity.Error)) {\n\t\t\t\t\t\t\tconst reveal = task.command.presentation!.reveal;\n\t\t\t\t\t\t\tconst revealProblems = task.command.presentation!.revealProblems;\n\t\t\t\t\t\t\tif (revealProblems === RevealProblemKind.OnProblem) {\n\t\t\t\t\t\t\t\tthis._viewsService.openView(Markers.MARKERS_VIEW_ID, true);\n\t\t\t\t\t\t\t} else if (reveal === RevealKind.Silent) {\n\t\t\t\t\t\t\t\tthis._terminalService.setActiveInstance(terminal!);\n\t\t\t\t\t\t\t\tthis._terminalGroupService.showPanel(false);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\t\t\twatchingProblemMatcher.aboutToStart();\n\t\t\tlet delayer: Async.Delayer<any> | undefined = undefined;\n\t\t\t[terminal, error] = await this._createTerminal(task, resolver, workspaceFolder);\n\n\t\t\tif (error) {\n\t\t\t\treturn Promise.reject(new Error((<TaskError>error).message));\n\t\t\t}\n\t\t\tif (!terminal) {\n\t\t\t\treturn Promise.reject(new Error(`Failed to create terminal for task ${task._label}`));\n\t\t\t}\n\t\t\tthis._terminalStatusManager.addTerminal(task, terminal, watchingProblemMatcher);\n\n\t\t\tlet processStartedSignaled = false;\n\t\t\tterminal.processReady.then(() => {\n\t\t\t\tif (!processStartedSignaled) {\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.processStarted(task, terminal!.instanceId, terminal!.processId!));\n\t\t\t\t\tprocessStartedSignaled = true;\n\t\t\t\t}\n\t\t\t}, (_error) => {\n\t\t\t\tthis._logService.error('Task terminal process never got ready');\n\t\t\t});\n\t\t\tthis._fireTaskEvent(TaskEvent.start(task, terminal.instanceId, resolver.values));\n\t\t\tlet onData: IDisposable | undefined;\n\t\t\tif (problemMatchers.length) {\n\t\t\t\t// prevent https://github.com/microsoft/vscode/issues/174511 from happening\n\t\t\t\tonData = terminal.onLineData((line) => {\n\t\t\t\t\twatchingProblemMatcher.processLine(line);\n\t\t\t\t\tif (!delayer) {\n\t\t\t\t\t\tdelayer = new Async.Delayer(3000);\n\t\t\t\t\t}\n\t\t\t\t\tdelayer.trigger(() => {\n\t\t\t\t\t\twatchingProblemMatcher.forceDelivery();\n\t\t\t\t\t\tdelayer = undefined;\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tpromise = new Promise<ITaskSummary>((resolve, reject) => {\n\t\t\t\tconst onExit = terminal!.onExit((terminalLaunchResult) => {\n\t\t\t\t\tconst exitCode = typeof terminalLaunchResult === 'number' ? terminalLaunchResult : terminalLaunchResult?.code;\n\t\t\t\t\tonData?.dispose();\n\t\t\t\t\tonExit.dispose();\n\t\t\t\t\tconst key = task.getMapKey();\n\t\t\t\t\tif (this._busyTasks[mapKey]) {\n\t\t\t\t\t\tdelete this._busyTasks[mapKey];\n\t\t\t\t\t}\n\t\t\t\t\tthis._removeFromActiveTasks(task);\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.changed());\n\t\t\t\t\tif (terminalLaunchResult !== undefined) {\n\t\t\t\t\t\t// Only keep a reference to the terminal if it is not being disposed.\n\t\t\t\t\t\tswitch (task.command.presentation!.panel) {\n\t\t\t\t\t\t\tcase PanelKind.Dedicated:\n\t\t\t\t\t\t\t\tthis._sameTaskTerminals[key] = terminal!.instanceId.toString();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase PanelKind.Shared:\n\t\t\t\t\t\t\t\tthis._idleTaskTerminals.set(key, terminal!.instanceId.toString(), Touch.AsOld);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst reveal = task.command.presentation!.reveal;\n\t\t\t\t\tif ((reveal === RevealKind.Silent) && ((exitCode !== 0) || (watchingProblemMatcher.numberOfMatches > 0) && watchingProblemMatcher.maxMarkerSeverity &&\n\t\t\t\t\t\t(watchingProblemMatcher.maxMarkerSeverity >= MarkerSeverity.Error))) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis._terminalService.setActiveInstance(terminal!);\n\t\t\t\t\t\t\tthis._terminalGroupService.showPanel(false);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t// If the terminal has already been disposed, then setting the active instance will fail. #99828\n\t\t\t\t\t\t\t// There is nothing else to do here.\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\twatchingProblemMatcher.done();\n\t\t\t\t\twatchingProblemMatcher.dispose();\n\t\t\t\t\tif (!processStartedSignaled) {\n\t\t\t\t\t\tthis._fireTaskEvent(TaskEvent.processStarted(task, terminal!.instanceId, terminal!.processId!));\n\t\t\t\t\t\tprocessStartedSignaled = true;\n\t\t\t\t\t}\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.processEnded(task, terminal!.instanceId, exitCode));\n\n\t\t\t\t\tfor (let i = 0; i < eventCounter; i++) {\n\t\t\t\t\t\tthis._fireTaskEvent(TaskEvent.general(TaskEventKind.Inactive, task, terminal!.instanceId));\n\t\t\t\t\t}\n\t\t\t\t\teventCounter = 0;\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.general(TaskEventKind.End, task));\n\t\t\t\t\ttoDispose.dispose();\n\t\t\t\t\tresolve({ exitCode: exitCode ?? undefined });\n\t\t\t\t});\n\t\t\t});\n\t\t\tif (trigger === Triggers.reconnect && !!terminal.xterm) {\n\t\t\t\tconst bufferLines = [];\n\t\t\t\tconst bufferReverseIterator = terminal.xterm.getBufferReverseIterator();\n\t\t\t\tconst startRegex = new RegExp(watchingProblemMatcher.beginPatterns.map(pattern => pattern.source).join('|'));\n\t\t\t\tfor (const nextLine of bufferReverseIterator) {\n\t\t\t\t\tbufferLines.push(nextLine);\n\t\t\t\t\tif (startRegex.test(nextLine)) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlet delayer: Async.Delayer<any> | undefined = undefined;\n\t\t\t\tfor (let i = bufferLines.length - 1; i >= 0; i--) {\n\t\t\t\t\twatchingProblemMatcher.processLine(bufferLines[i]);\n\t\t\t\t\tif (!delayer) {\n\t\t\t\t\t\tdelayer = new Async.Delayer(3000);\n\t\t\t\t\t}\n\t\t\t\t\tdelayer.trigger(() => {\n\t\t\t\t\t\twatchingProblemMatcher.forceDelivery();\n\t\t\t\t\t\tdelayer = undefined;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t[terminal, error] = await this._createTerminal(task, resolver, workspaceFolder);\n\n\t\t\tif (error) {\n\t\t\t\treturn Promise.reject(new Error((<TaskError>error).message));\n\t\t\t}\n\t\t\tif (!terminal) {\n\t\t\t\treturn Promise.reject(new Error(`Failed to create terminal for task ${task._label}`));\n\t\t\t}\n\n\t\t\tlet processStartedSignaled = false;\n\t\t\tterminal.processReady.then(() => {\n\t\t\t\tif (!processStartedSignaled) {\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.processStarted(task, terminal!.instanceId, terminal!.processId!));\n\t\t\t\t\tprocessStartedSignaled = true;\n\t\t\t\t}\n\t\t\t}, (_error) => {\n\t\t\t\t// The process never got ready. Need to think how to handle this.\n\t\t\t});\n\t\t\tthis._fireTaskEvent(TaskEvent.start(task, terminal.instanceId, resolver.values));\n\t\t\tconst mapKey = task.getMapKey();\n\t\t\tthis._busyTasks[mapKey] = task;\n\t\t\tthis._fireTaskEvent(TaskEvent.general(TaskEventKind.Active, task, terminal.instanceId));\n\t\t\tconst problemMatchers = await this._resolveMatchers(resolver, task.configurationProperties.problemMatchers);\n\t\t\tconst startStopProblemMatcher = new StartStopProblemCollector(problemMatchers, this._markerService, this._modelService, ProblemHandlingStrategy.Clean, this._fileService);\n\t\t\tthis._terminalStatusManager.addTerminal(task, terminal, startStopProblemMatcher);\n\t\t\tconst onData = terminal.onLineData((line) => {\n\t\t\t\tstartStopProblemMatcher.processLine(line);\n\t\t\t});\n\t\t\tpromise = new Promise<ITaskSummary>((resolve, reject) => {\n\t\t\t\tconst onExit = terminal!.onExit((terminalLaunchResult) => {\n\t\t\t\t\tconst exitCode = typeof terminalLaunchResult === 'number' ? terminalLaunchResult : terminalLaunchResult?.code;\n\t\t\t\t\tonExit.dispose();\n\t\t\t\t\tconst key = task.getMapKey();\n\t\t\t\t\tthis._removeFromActiveTasks(task);\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.changed());\n\t\t\t\t\tif (terminalLaunchResult !== undefined) {\n\t\t\t\t\t\t// Only keep a reference to the terminal if it is not being disposed.\n\t\t\t\t\t\tswitch (task.command.presentation!.panel) {\n\t\t\t\t\t\t\tcase PanelKind.Dedicated:\n\t\t\t\t\t\t\t\tthis._sameTaskTerminals[key] = terminal!.instanceId.toString();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase PanelKind.Shared:\n\t\t\t\t\t\t\t\tthis._idleTaskTerminals.set(key, terminal!.instanceId.toString(), Touch.AsOld);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst reveal = task.command.presentation!.reveal;\n\t\t\t\t\tconst revealProblems = task.command.presentation!.revealProblems;\n\t\t\t\t\tconst revealProblemPanel = terminal && (revealProblems === RevealProblemKind.OnProblem) && (startStopProblemMatcher.numberOfMatches > 0);\n\t\t\t\t\tif (revealProblemPanel) {\n\t\t\t\t\t\tthis._viewsService.openView(Markers.MARKERS_VIEW_ID);\n\t\t\t\t\t} else if (terminal && (reveal === RevealKind.Silent) && ((exitCode !== 0) || (startStopProblemMatcher.numberOfMatches > 0) && startStopProblemMatcher.maxMarkerSeverity &&\n\t\t\t\t\t\t(startStopProblemMatcher.maxMarkerSeverity >= MarkerSeverity.Error))) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tthis._terminalService.setActiveInstance(terminal);\n\t\t\t\t\t\t\tthis._terminalGroupService.showPanel(false);\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t// If the terminal has already been disposed, then setting the active instance will fail. #99828\n\t\t\t\t\t\t\t// There is nothing else to do here.\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// Hack to work around #92868 until terminal is fixed.\n\t\t\t\t\tsetTimeout(() => {\n\t\t\t\t\t\tonData.dispose();\n\t\t\t\t\t\tstartStopProblemMatcher.done();\n\t\t\t\t\t\tstartStopProblemMatcher.dispose();\n\t\t\t\t\t}, 100);\n\t\t\t\t\tif (!processStartedSignaled && terminal) {\n\t\t\t\t\t\tthis._fireTaskEvent(TaskEvent.processStarted(task, terminal.instanceId, terminal.processId!));\n\t\t\t\t\t\tprocessStartedSignaled = true;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.processEnded(task, terminal?.instanceId, exitCode ?? undefined));\n\t\t\t\t\tif (this._busyTasks[mapKey]) {\n\t\t\t\t\t\tdelete this._busyTasks[mapKey];\n\t\t\t\t\t}\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.general(TaskEventKind.Inactive, task, terminal?.instanceId));\n\t\t\t\t\tthis._fireTaskEvent(TaskEvent.general(TaskEventKind.End, task, terminal?.instanceId));\n\t\t\t\t\tresolve({ exitCode: exitCode ?? undefined });\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tconst showProblemPanel = task.command.presentation && (task.command.presentation.revealProblems === RevealProblemKind.Always);\n\t\tif (showProblemPanel) {\n\t\t\tthis._viewsService.openView(Markers.MARKERS_VIEW_ID);\n\t\t} else if (task.command.presentation && (task.command.presentation.focus || task.command.presentation.reveal === RevealKind.Always)) {\n\t\t\tthis._terminalService.setActiveInstance(terminal);\n\t\t\tthis._terminalGroupService.showPanel(task.command.presentation.focus);\n\t\t}\n\t\tthis._activeTasks[task.getMapKey()].terminal = terminal;\n\t\tthis._fireTaskEvent(TaskEvent.changed());\n\t\treturn promise;\n\t}\n\n\tprivate _createTerminalName(task: CustomTask | ContributedTask): string {\n\t\tconst needsFolderQualification = this._contextService.getWorkbenchState() === WorkbenchState.WORKSPACE;\n\t\treturn needsFolderQualification ? task.getQualifiedLabel() : (task.configurationProperties.name || '');\n\t}\n\n\tprivate async _createShellLaunchConfig(task: CustomTask | ContributedTask, workspaceFolder: IWorkspaceFolder | undefined, variableResolver: VariableResolver, platform: Platform.Platform, options: CommandOptions, command: CommandString, args: CommandString[], waitOnExit: WaitOnExitValue): Promise<IShellLaunchConfig | undefined> {\n\t\tlet shellLaunchConfig: IShellLaunchConfig;\n\t\tconst isShellCommand = task.command.runtime === RuntimeType.Shell;\n\t\tconst needsFolderQualification = this._contextService.getWorkbenchState() === WorkbenchState.WORKSPACE;\n\t\tconst terminalName = this._createTerminalName(task);\n\t\tconst type = ReconnectionType;\n\t\tconst originalCommand = task.command.name;\n\t\tlet cwd: string | URI | undefined;\n\t\tif (options.cwd) {\n\t\t\tcwd = options.cwd;\n\t\t\tif (!path.isAbsolute(cwd)) {\n\t\t\t\tif (workspaceFolder && (workspaceFolder.uri.scheme === Schemas.file)) {\n\t\t\t\t\tcwd = path.join(workspaceFolder.uri.fsPath, cwd);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// This must be normalized to the OS\n\t\t\tcwd = isUNC(cwd) ? cwd : resources.toLocalResource(URI.from({ scheme: Schemas.file, path: cwd }), this._environmentService.remoteAuthority, this._pathService.defaultUriScheme);\n\t\t}\n\t\tif (isShellCommand) {\n\t\t\tlet os: Platform.OperatingSystem;\n\t\t\tswitch (platform) {\n\t\t\t\tcase Platform.Platform.Windows: os = Platform.OperatingSystem.Windows; break;\n\t\t\t\tcase Platform.Platform.Mac: os = Platform.OperatingSystem.Macintosh; break;\n\t\t\t\tcase Platform.Platform.Linux:\n\t\t\t\tdefault: os = Platform.OperatingSystem.Linux; break;\n\t\t\t}\n\t\t\tconst defaultProfile = await this._terminalProfileResolverService.getDefaultProfile({\n\t\t\t\tallowAutomationShell: true,\n\t\t\t\tos,\n\t\t\t\tremoteAuthority: this._environmentService.remoteAuthority\n\t\t\t});\n\t\t\tlet icon: URI | ThemeIcon | { light: URI; dark: URI } | undefined;\n\t\t\tif (task.configurationProperties.icon?.id) {\n\t\t\t\ticon = ThemeIcon.fromId(task.configurationProperties.icon.id);\n\t\t\t} else {\n\t\t\t\tconst taskGroupKind = task.configurationProperties.group ? GroupKind.to(task.configurationProperties.group) : undefined;\n\t\t\t\tconst kindId = typeof taskGroupKind === 'string' ? taskGroupKind : taskGroupKind?.kind;\n\t\t\t\ticon = kindId === 'test' ? ThemeIcon.fromId(Codicon.beaker.id) : defaultProfile.icon;\n\t\t\t}\n\t\t\tshellLaunchConfig = {\n\t\t\t\tname: terminalName,\n\t\t\t\ttype,\n\t\t\t\texecutable: defaultProfile.path,\n\t\t\t\targs: defaultProfile.args,\n\t\t\t\tenv: { ...defaultProfile.env },\n\t\t\t\ticon,\n\t\t\t\tcolor: task.configurationProperties.icon?.color || undefined,\n\t\t\t\twaitOnExit\n\t\t\t};\n\t\t\tlet shellSpecified: boolean = false;\n\t\t\tconst shellOptions: IShellConfiguration | undefined = task.command.options && task.command.options.shell;\n\t\t\tif (shellOptions) {\n\t\t\t\tif (shellOptions.executable) {\n\t\t\t\t\t// Clear out the args so that we don't end up with mismatched args.\n\t\t\t\t\tif (shellOptions.executable !== shellLaunchConfig.executable) {\n\t\t\t\t\t\tshellLaunchConfig.args = undefined;\n\t\t\t\t\t}\n\t\t\t\t\tshellLaunchConfig.executable = await this._resolveVariable(variableResolver, shellOptions.executable);\n\t\t\t\t\tshellSpecified = true;\n\t\t\t\t}\n\t\t\t\tif (shellOptions.args) {\n\t\t\t\t\tshellLaunchConfig.args = await this._resolveVariables(variableResolver, shellOptions.args.slice());\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (shellLaunchConfig.args === undefined) {\n\t\t\t\tshellLaunchConfig.args = [];\n\t\t\t}\n\t\t\tconst shellArgs = Array.isArray(shellLaunchConfig.args!) ? <string[]>shellLaunchConfig.args!.slice(0) : [shellLaunchConfig.args!];\n\t\t\tconst toAdd: string[] = [];\n\t\t\tconst basename = path.posix.basename((await this._pathService.fileURI(shellLaunchConfig.executable!)).path).toLowerCase();\n\t\t\tconst commandLine = this._buildShellCommandLine(platform, basename, shellOptions, command, originalCommand, args);\n\t\t\tlet windowsShellArgs: boolean = false;\n\t\t\tif (platform === Platform.Platform.Windows) {\n\t\t\t\twindowsShellArgs = true;\n\t\t\t\t// If we don't have a cwd, then the terminal uses the home dir.\n\t\t\t\tconst userHome = await this._pathService.userHome();\n\t\t\t\tif (basename === 'cmd.exe' && ((options.cwd && isUNC(options.cwd)) || (!options.cwd && isUNC(userHome.fsPath)))) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tif ((basename === 'powershell.exe') || (basename === 'pwsh.exe')) {\n\t\t\t\t\tif (!shellSpecified) {\n\t\t\t\t\t\ttoAdd.push('-Command');\n\t\t\t\t\t}\n\t\t\t\t} else if ((basename === 'bash.exe') || (basename === 'zsh.exe')) {\n\t\t\t\t\twindowsShellArgs = false;\n\t\t\t\t\tif (!shellSpecified) {\n\t\t\t\t\t\ttoAdd.push('-c');\n\t\t\t\t\t}\n\t\t\t\t} else if (basename === 'wsl.exe') {\n\t\t\t\t\tif (!shellSpecified) {\n\t\t\t\t\t\ttoAdd.push('-e');\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (!shellSpecified) {\n\t\t\t\t\t\ttoAdd.push('/d', '/c');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!shellSpecified) {\n\t\t\t\t\t// Under Mac remove -l to not start it as a login shell.\n\t\t\t\t\tif (platform === Platform.Platform.Mac) {\n\t\t\t\t\t\t// Background on -l on osx https://github.com/microsoft/vscode/issues/107563\n\t\t\t\t\t\t// TODO: Handle by pulling the default terminal profile?\n\t\t\t\t\t\t// const osxShellArgs = this._configurationService.inspect(TerminalSettingId.ShellArgsMacOs);\n\t\t\t\t\t\t// if ((osxShellArgs.user === undefined) && (osxShellArgs.userLocal === undefined) && (osxShellArgs.userLocalValue === undefined)\n\t\t\t\t\t\t// \t&& (osxShellArgs.userRemote === undefined) && (osxShellArgs.userRemoteValue === undefined)\n\t\t\t\t\t\t// \t&& (osxShellArgs.userValue === undefined) && (osxShellArgs.workspace === undefined)\n\t\t\t\t\t\t// \t&& (osxShellArgs.workspaceFolder === undefined) && (osxShellArgs.workspaceFolderValue === undefined)\n\t\t\t\t\t\t// \t&& (osxShellArgs.workspaceValue === undefined)) {\n\t\t\t\t\t\t// \tconst index = shellArgs.indexOf('-l');\n\t\t\t\t\t\t// \tif (index !== -1) {\n\t\t\t\t\t\t// \t\tshellArgs.splice(index, 1);\n\t\t\t\t\t\t// \t}\n\t\t\t\t\t\t// }\n\t\t\t\t\t}\n\t\t\t\t\ttoAdd.push('-c');\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst combinedShellArgs = this._addAllArgument(toAdd, shellArgs);\n\t\t\tcombinedShellArgs.push(commandLine);\n\t\t\tshellLaunchConfig.args = windowsShellArgs ? combinedShellArgs.join(' ') : combinedShellArgs;\n\t\t\tif (task.command.presentation && task.command.presentation.echo) {\n\t\t\t\tif (needsFolderQualification && workspaceFolder) {\n\t\t\t\t\tshellLaunchConfig.initialText = this.taskShellIntegrationStartSequence(cwd) + formatMessageForTerminal(nls.localize({\n\t\t\t\t\t\tkey: 'task.executingInFolder',\n\t\t\t\t\t\tcomment: ['The workspace folder the task is running in', 'The task command line or label']\n\t\t\t\t\t}, 'Executing task in folder {0}: {1}', workspaceFolder.name, commandLine), { excludeLeadingNewLine: true }) + this.taskShellIntegrationOutputSequence;\n\t\t\t\t} else {\n\t\t\t\t\tshellLaunchConfig.initialText = this.taskShellIntegrationStartSequence(cwd) + formatMessageForTerminal(nls.localize({\n\t\t\t\t\t\tkey: 'task.executing.shellIntegration',\n\t\t\t\t\t\tcomment: ['The task command line or label']\n\t\t\t\t\t}, 'Executing task: {0}', commandLine), { excludeLeadingNewLine: true }) + this.taskShellIntegrationOutputSequence;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tshellLaunchConfig.initialText = {\n\t\t\t\t\ttext: this.taskShellIntegrationStartSequence(cwd) + this.taskShellIntegrationOutputSequence,\n\t\t\t\t\ttrailingNewLine: false\n\t\t\t\t};\n\t\t\t}\n\t\t} else {\n\t\t\tconst commandExecutable = (task.command.runtime !== RuntimeType.CustomExecution) ? CommandString.value(command) : undefined;\n\t\t\tconst executable = !isShellCommand\n\t\t\t\t? await this._resolveVariable(variableResolver, await this._resolveVariable(variableResolver, '${' + TerminalTaskSystem.ProcessVarName + '}'))\n\t\t\t\t: commandExecutable;\n\n\t\t\t// When we have a process task there is no need to quote arguments. So we go ahead and take the string value.\n\t\t\tshellLaunchConfig = {\n\t\t\t\tname: terminalName,\n\t\t\t\ttype,\n\t\t\t\ticon: task.configurationProperties.icon?.id ? ThemeIcon.fromId(task.configurationProperties.icon.id) : undefined,\n\t\t\t\tcolor: task.configurationProperties.icon?.color || undefined,\n\t\t\t\texecutable: executable,\n\t\t\t\targs: args.map(a => Types.isString(a) ? a : a.value),\n\t\t\t\twaitOnExit\n\t\t\t};\n\t\t\tif (task.command.presentation && task.command.presentation.echo) {\n\t\t\t\tconst getArgsToEcho = (args: string | string[] | undefined): string => {\n\t\t\t\t\tif (!args || args.length === 0) {\n\t\t\t\t\t\treturn '';\n\t\t\t\t\t}\n\t\t\t\t\tif (Types.isString(args)) {\n\t\t\t\t\t\treturn args;\n\t\t\t\t\t}\n\t\t\t\t\treturn args.join(' ');\n\t\t\t\t};\n\t\t\t\tif (needsFolderQualification && workspaceFolder) {\n\t\t\t\t\tshellLaunchConfig.initialText = this.taskShellIntegrationStartSequence(cwd) + formatMessageForTerminal(nls.localize({\n\t\t\t\t\t\tkey: 'task.executingInFolder',\n\t\t\t\t\t\tcomment: ['The workspace folder the task is running in', 'The task command line or label']\n\t\t\t\t\t}, 'Executing task in folder {0}: {1}', workspaceFolder.name, `${shellLaunchConfig.executable} ${getArgsToEcho(shellLaunchConfig.args)}`), { excludeLeadingNewLine: true }) + this.taskShellIntegrationOutputSequence;\n\t\t\t\t} else {\n\t\t\t\t\tshellLaunchConfig.initialText = this.taskShellIntegrationStartSequence(cwd) + formatMessageForTerminal(nls.localize({\n\t\t\t\t\t\tkey: 'task.executing.shell-integration',\n\t\t\t\t\t\tcomment: ['The task command line or label']\n\t\t\t\t\t}, 'Executing task: {0}', `${shellLaunchConfig.executable} ${getArgsToEcho(shellLaunchConfig.args)}`), { excludeLeadingNewLine: true }) + this.taskShellIntegrationOutputSequence;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tshellLaunchConfig.initialText = {\n\t\t\t\t\ttext: this.taskShellIntegrationStartSequence(cwd) + this.taskShellIntegrationOutputSequence,\n\t\t\t\t\ttrailingNewLine: false\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif (cwd) {\n\t\t\tshellLaunchConfig.cwd = cwd;\n\t\t}\n\t\tif (options.env) {\n\t\t\tif (shellLaunchConfig.env) {\n\t\t\t\tshellLaunchConfig.env = { ...shellLaunchConfig.env, ...options.env };\n\t\t\t} else {\n\t\t\t\tshellLaunchConfig.env = options.env;\n\t\t\t}\n\t\t}\n\t\tshellLaunchConfig.isFeatureTerminal = true;\n\t\tshellLaunchConfig.useShellEnvironment = true;\n\t\treturn shellLaunchConfig;\n\t}\n\n\tprivate _addAllArgument(shellCommandArgs: string[], configuredShellArgs: string[]): string[] {\n\t\tconst combinedShellArgs: string[] = Objects.deepClone(configuredShellArgs);\n\t\tshellCommandArgs.forEach(element => {\n\t\t\tconst shouldAddShellCommandArg = configuredShellArgs.every((arg, index) => {\n\t\t\t\tif ((arg.toLowerCase() === element) && (configuredShellArgs.length > index + 1)) {\n\t\t\t\t\t// We can still add the argument, but only if not all of the following arguments begin with \"-\".\n\t\t\t\t\treturn !configuredShellArgs.slice(index + 1).every(testArg => testArg.startsWith('-'));\n\t\t\t\t} else {\n\t\t\t\t\treturn arg.toLowerCase() !== element;\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (shouldAddShellCommandArg) {\n\t\t\t\tcombinedShellArgs.push(element);\n\t\t\t}\n\t\t});\n\t\treturn combinedShellArgs;\n\t}\n\n\tprivate async _reconnectToTerminal(task: Task): Promise<ITerminalInstance | undefined> {\n\t\tif (!this._reconnectedTerminals) {\n\t\t\treturn;\n\t\t}\n\t\tfor (let i = 0; i < this._reconnectedTerminals.length; i++) {\n\t\t\tconst terminal = this._reconnectedTerminals[i];\n\t\t\tif (getReconnectionData(terminal)?.lastTask === task.getCommonTaskId()) {\n\t\t\t\tthis._reconnectedTerminals.splice(i, 1);\n\t\t\t\treturn terminal;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async _doCreateTerminal(task: Task, group: string | undefined, launchConfigs: IShellLaunchConfig): Promise<ITerminalInstance> {\n\t\tconst reconnectedTerminal = await this._reconnectToTerminal(task);\n\t\tconst onDisposed = (terminal: ITerminalInstance) => this._fireTaskEvent(TaskEvent.terminated(task, terminal.instanceId, terminal.exitReason));\n\t\tif (reconnectedTerminal) {\n\t\t\tif ('command' in task && task.command.presentation) {\n\t\t\t\treconnectedTerminal.waitOnExit = getWaitOnExitValue(task.command.presentation, task.configurationProperties);\n\t\t\t}\n\t\t\treconnectedTerminal.onDisposed(onDisposed);\n\t\t\tthis._logService.trace('reconnected to task and terminal', task._id);\n\t\t\treturn reconnectedTerminal;\n\t\t}\n\t\tif (group) {\n\t\t\t// Try to find an existing terminal to split.\n\t\t\t// Even if an existing terminal is found, the split can fail if the terminal width is too small.\n\t\t\tfor (const terminal of Object.values(this._terminals)) {\n\t\t\t\tif (terminal.group === group) {\n\t\t\t\t\tthis._logService.trace(`Found terminal to split for group ${group}`);\n\t\t\t\t\tconst originalInstance = terminal.terminal;\n\t\t\t\t\tconst result = await this._terminalService.createTerminal({ location: { parentTerminal: originalInstance }, config: launchConfigs });\n\t\t\t\t\tresult.onDisposed(onDisposed);\n\t\t\t\t\tif (result) {\n\t\t\t\t\t\treturn result;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._logService.trace(`No terminal found to split for group ${group}`);\n\t\t}\n\t\t// Either no group is used, no terminal with the group exists or splitting an existing terminal failed.\n\t\tconst createdTerminal = await this._terminalService.createTerminal({ config: launchConfigs });\n\t\tcreatedTerminal.onDisposed(onDisposed);\n\t\treturn createdTerminal;\n\t}\n\n\tprivate _reconnectToTerminals(): void {\n\t\tif (this._hasReconnected) {\n\t\t\tthis._logService.trace(`Already reconnected, to ${this._reconnectedTerminals?.length} terminals so returning`);\n\t\t\treturn;\n\t\t}\n\t\tthis._reconnectedTerminals = this._terminalService.getReconnectedTerminals(ReconnectionType)?.filter(t => !t.isDisposed && getReconnectionData(t)) || [];\n\t\tthis._logService.trace(`Attempting reconnection of ${this._reconnectedTerminals?.length} terminals`);\n\t\tif (!this._reconnectedTerminals?.length) {\n\t\t\tthis._logService.trace(`No terminals to reconnect to so returning`);\n\t\t} else {\n\t\t\tfor (const terminal of this._reconnectedTerminals) {\n\t\t\t\tconst data = getReconnectionData(terminal) as IReconnectionTaskData | undefined;\n\t\t\t\tif (data) {\n\t\t\t\t\tconst terminalData = { lastTask: data.lastTask, group: data.group, terminal };\n\t\t\t\t\tthis._terminals[terminal.instanceId] = terminalData;\n\t\t\t\t\tthis._logService.trace('Reconnecting to task terminal', terminalData.lastTask, terminal.instanceId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._hasReconnected = true;\n\t}\n\n\tprivate _deleteTaskAndTerminal(terminal: ITerminalInstance, terminalData: ITerminalData): void {\n\t\tdelete this._terminals[terminal.instanceId];\n\t\tdelete this._sameTaskTerminals[terminalData.lastTask];\n\t\tthis._idleTaskTerminals.delete(terminalData.lastTask);\n\t\t// Delete the task now as a work around for cases when the onExit isn't fired.\n\t\t// This can happen if the terminal wasn't shutdown with an \"immediate\" flag and is expected.\n\t\t// For correct terminal re-use, the task needs to be deleted immediately.\n\t\t// Note that this shouldn't be a problem anymore since user initiated terminal kills are now immediate.\n\t\tconst mapKey = terminalData.lastTask;\n\t\tthis._removeFromActiveTasks(mapKey);\n\t\tif (this._busyTasks[mapKey]) {\n\t\t\tdelete this._busyTasks[mapKey];\n\t\t}\n\t}\n\n\tprivate async _createTerminal(task: CustomTask | ContributedTask, resolver: VariableResolver, workspaceFolder: IWorkspaceFolder | undefined): Promise<[ITerminalInstance | undefined, TaskError | undefined]> {\n\t\tconst platform = resolver.taskSystemInfo ? resolver.taskSystemInfo.platform : Platform.platform;\n\t\tconst options = await this._resolveOptions(resolver, task.command.options);\n\t\tconst presentationOptions = task.command.presentation;\n\n\t\tif (!presentationOptions) {\n\t\t\tthrow new Error('Task presentation options should not be undefined here.');\n\t\t}\n\t\tconst waitOnExit = getWaitOnExitValue(presentationOptions, task.configurationProperties);\n\n\t\tlet command: CommandString | undefined;\n\t\tlet args: CommandString[] | undefined;\n\t\tlet launchConfigs: IShellLaunchConfig | undefined;\n\n\t\tif (task.command.runtime === RuntimeType.CustomExecution) {\n\t\t\tthis._currentTask.shellLaunchConfig = launchConfigs = {\n\t\t\t\tcustomPtyImplementation: (id, cols, rows) => new TerminalProcessExtHostProxy(id, cols, rows, this._terminalService),\n\t\t\t\twaitOnExit,\n\t\t\t\tname: this._createTerminalName(task),\n\t\t\t\tinitialText: task.command.presentation && task.command.presentation.echo ? formatMessageForTerminal(nls.localize({\n\t\t\t\t\tkey: 'task.executing',\n\t\t\t\t\tcomment: ['The task command line or label']\n\t\t\t\t}, 'Executing task: {0}', task._label), { excludeLeadingNewLine: true }) : undefined,\n\t\t\t\tisFeatureTerminal: true,\n\t\t\t\ticon: task.configurationProperties.icon?.id ? ThemeIcon.fromId(task.configurationProperties.icon.id) : undefined,\n\t\t\t\tcolor: task.configurationProperties.icon?.color || undefined\n\t\t\t};\n\t\t} else {\n\t\t\tconst resolvedResult: { command: CommandString; args: CommandString[] } = await this._resolveCommandAndArgs(resolver, task.command);\n\t\t\tcommand = resolvedResult.command;\n\t\t\targs = resolvedResult.args;\n\n\t\t\tthis._currentTask.shellLaunchConfig = launchConfigs = await this._createShellLaunchConfig(task, workspaceFolder, resolver, platform, options, command, args, waitOnExit);\n\t\t\tif (launchConfigs === undefined) {\n\t\t\t\treturn [undefined, new TaskError(Severity.Error, nls.localize('TerminalTaskSystem', 'Can\\'t execute a shell command on an UNC drive using cmd.exe.'), TaskErrors.UnknownError)];\n\t\t\t}\n\t\t}\n\t\tconst prefersSameTerminal = presentationOptions.panel === PanelKind.Dedicated;\n\t\tconst allowsSharedTerminal = presentationOptions.panel === PanelKind.Shared;\n\t\tconst group = presentationOptions.group;\n\n\t\tconst taskKey = task.getMapKey();\n\t\tlet terminalToReuse: ITerminalData | undefined;\n\t\tif (prefersSameTerminal) {\n\t\t\tconst terminalId = this._sameTaskTerminals[taskKey];\n\t\t\tif (terminalId) {\n\t\t\t\tterminalToReuse = this._terminals[terminalId];\n\t\t\t\tdelete this._sameTaskTerminals[taskKey];\n\t\t\t}\n\t\t} else if (allowsSharedTerminal) {\n\t\t\t// Always allow to reuse the terminal previously used by the same task.\n\t\t\tlet terminalId = this._idleTaskTerminals.remove(taskKey);\n\t\t\tif (!terminalId) {\n\t\t\t\t// There is no idle terminal which was used by the same task.\n\t\t\t\t// Search for any idle terminal used previously by a task of the same group\n\t\t\t\t// (or, if the task has no group, a terminal used by a task without group).\n\t\t\t\tfor (const taskId of this._idleTaskTerminals.keys()) {\n\t\t\t\t\tconst idleTerminalId = this._idleTaskTerminals.get(taskId)!;\n\t\t\t\t\tif (idleTerminalId && this._terminals[idleTerminalId] && this._terminals[idleTerminalId].group === group) {\n\t\t\t\t\t\tterminalId = this._idleTaskTerminals.remove(taskId);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (terminalId) {\n\t\t\t\tterminalToReuse = this._terminals[terminalId];\n\t\t\t}\n\t\t}\n\t\tif (terminalToReuse) {\n\t\t\tif (!launchConfigs) {\n\t\t\t\tthrow new Error('Task shell launch configuration should not be undefined here.');\n\t\t\t}\n\n\t\t\tterminalToReuse.terminal.scrollToBottom();\n\t\t\tif (task.configurationProperties.isBackground) {\n\t\t\t\tlaunchConfigs.reconnectionProperties = { ownerId: ReconnectionType, data: { lastTask: task.getCommonTaskId(), group, label: task._label, id: task._id } };\n\t\t\t}\n\t\t\tawait terminalToReuse.terminal.reuseTerminal(launchConfigs);\n\n\t\t\tif (task.command.presentation && task.command.presentation.clear) {\n\t\t\t\tterminalToReuse.terminal.clearBuffer();\n\t\t\t}\n\t\t\tthis._terminals[terminalToReuse.terminal.instanceId.toString()].lastTask = taskKey;\n\t\t\treturn [terminalToReuse.terminal, undefined];\n\t\t}\n\n\t\tthis._terminalCreationQueue = this._terminalCreationQueue.then(() => this._doCreateTerminal(task, group, launchConfigs!));\n\t\tconst terminal: ITerminalInstance = (await this._terminalCreationQueue)!;\n\t\tif (task.configurationProperties.isBackground) {\n\t\t\tterminal.shellLaunchConfig.reconnectionProperties = { ownerId: ReconnectionType, data: { lastTask: task.getCommonTaskId(), group, label: task._label, id: task._id } };\n\t\t}\n\t\tconst terminalKey = terminal.instanceId.toString();\n\t\tconst terminalData = { terminal: terminal, lastTask: taskKey, group };\n\t\tterminal.onDisposed(() => this._deleteTaskAndTerminal(terminal, terminalData));\n\t\tthis._terminals[terminalKey] = terminalData;\n\t\treturn [terminal, undefined];\n\t}\n\n\tprivate _buildShellCommandLine(platform: Platform.Platform, shellExecutable: string, shellOptions: IShellConfiguration | undefined, command: CommandString, originalCommand: CommandString | undefined, args: CommandString[]): string {\n\t\tconst basename = path.parse(shellExecutable).name.toLowerCase();\n\t\tconst shellQuoteOptions = this._getQuotingOptions(basename, shellOptions, platform);\n\n\t\tfunction needsQuotes(value: string): boolean {\n\t\t\tif (value.length >= 2) {\n\t\t\t\tconst first = value[0] === shellQuoteOptions.strong ? shellQuoteOptions.strong : value[0] === shellQuoteOptions.weak ? shellQuoteOptions.weak : undefined;\n\t\t\t\tif (first === value[value.length - 1]) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet quote: string | undefined;\n\t\t\tfor (let i = 0; i < value.length; i++) {\n\t\t\t\t// We found the end quote.\n\t\t\t\tconst ch = value[i];\n\t\t\t\tif (ch === quote) {\n\t\t\t\t\tquote = undefined;\n\t\t\t\t} else if (quote !== undefined) {\n\t\t\t\t\t// skip the character. We are quoted.\n\t\t\t\t\tcontinue;\n\t\t\t\t} else if (ch === shellQuoteOptions.escape) {\n\t\t\t\t\t// Skip the next character\n\t\t\t\t\ti++;\n\t\t\t\t} else if (ch === shellQuoteOptions.strong || ch === shellQuoteOptions.weak) {\n\t\t\t\t\tquote = ch;\n\t\t\t\t} else if (ch === ' ') {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t}\n\n\t\tfunction quote(value: string, kind: ShellQuoting): [string, boolean] {\n\t\t\tif (kind === ShellQuoting.Strong && shellQuoteOptions.strong) {\n\t\t\t\treturn [shellQuoteOptions.strong + value + shellQuoteOptions.strong, true];\n\t\t\t} else if (kind === ShellQuoting.Weak && shellQuoteOptions.weak) {\n\t\t\t\treturn [shellQuoteOptions.weak + value + shellQuoteOptions.weak, true];\n\t\t\t} else if (kind === ShellQuoting.Escape && shellQuoteOptions.escape) {\n\t\t\t\tif (Types.isString(shellQuoteOptions.escape)) {\n\t\t\t\t\treturn [value.replace(/ /g, shellQuoteOptions.escape + ' '), true];\n\t\t\t\t} else {\n\t\t\t\t\tconst buffer: string[] = [];\n\t\t\t\t\tfor (const ch of shellQuoteOptions.escape.charsToEscape) {\n\t\t\t\t\t\tbuffer.push(`\\\\${ch}`);\n\t\t\t\t\t}\n\t\t\t\t\tconst regexp: RegExp = new RegExp('[' + buffer.join(',') + ']', 'g');\n\t\t\t\t\tconst escapeChar = shellQuoteOptions.escape.escapeChar;\n\t\t\t\t\treturn [value.replace(regexp, (match) => escapeChar + match), true];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn [value, false];\n\t\t}\n\n\t\tfunction quoteIfNecessary(value: CommandString): [string, boolean] {\n\t\t\tif (Types.isString(value)) {\n\t\t\t\tif (needsQuotes(value)) {\n\t\t\t\t\treturn quote(value, ShellQuoting.Strong);\n\t\t\t\t} else {\n\t\t\t\t\treturn [value, false];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn quote(value.value, value.quoting);\n\t\t\t}\n\t\t}\n\n\t\t// If we have no args and the command is a string then use the command to stay backwards compatible with the old command line\n\t\t// model. To allow variable resolving with spaces we do continue if the resolved value is different than the original one\n\t\t// and the resolved one needs quoting.\n\t\tif ((!args || args.length === 0) && Types.isString(command) && (command === originalCommand as string || needsQuotes(originalCommand as string))) {\n\t\t\treturn command;\n\t\t}\n\n\t\tconst result: string[] = [];\n\t\tlet commandQuoted = false;\n\t\tlet argQuoted = false;\n\t\tlet value: string;\n\t\tlet quoted: boolean;\n\t\t[value, quoted] = quoteIfNecessary(command);\n\t\tresult.push(value);\n\t\tcommandQuoted = quoted;\n\t\tfor (const arg of args) {\n\t\t\t[value, quoted] = quoteIfNecessary(arg);\n\t\t\tresult.push(value);\n\t\t\targQuoted = argQuoted || quoted;\n\t\t}\n\n\t\tlet commandLine = result.join(' ');\n\t\t// There are special rules quoted command line in cmd.exe\n\t\tif (platform === Platform.Platform.Windows) {\n\t\t\tif (basename === 'cmd' && commandQuoted && argQuoted) {\n\t\t\t\tcommandLine = '\"' + commandLine + '\"';\n\t\t\t} else if ((basename === 'powershell' || basename === 'pwsh') && commandQuoted) {\n\t\t\t\tcommandLine = '& ' + commandLine;\n\t\t\t}\n\t\t}\n\n\t\treturn commandLine;\n\t}\n\n\tprivate _getQuotingOptions(shellBasename: string, shellOptions: IShellConfiguration | undefined, platform: Platform.Platform): IShellQuotingOptions {\n\t\tif (shellOptions && shellOptions.quoting) {\n\t\t\treturn shellOptions.quoting;\n\t\t}\n\t\treturn TerminalTaskSystem._shellQuotes[shellBasename] || TerminalTaskSystem._osShellQuotes[Platform.PlatformToString(platform)];\n\t}\n\n\tprivate _collectTaskVariables(variables: Set<string>, task: CustomTask | ContributedTask): void {\n\t\tif (task.command && task.command.name) {\n\t\t\tthis._collectCommandVariables(variables, task.command, task);\n\t\t}\n\t\tthis._collectMatcherVariables(variables, task.configurationProperties.problemMatchers);\n\n\t\tif (task.command.runtime === RuntimeType.CustomExecution && (CustomTask.is(task) || ContributedTask.is(task))) {\n\t\t\tlet definition: any;\n\t\t\tif (CustomTask.is(task)) {\n\t\t\t\tdefinition = task._source.config.element;\n\t\t\t} else {\n\t\t\t\tdefinition = Objects.deepClone(task.defines);\n\t\t\t\tdelete definition._key;\n\t\t\t\tdelete definition.type;\n\t\t\t}\n\t\t\tthis._collectDefinitionVariables(variables, definition);\n\t\t}\n\t}\n\n\tprivate _collectDefinitionVariables(variables: Set<string>, definition: any): void {\n\t\tif (Types.isString(definition)) {\n\t\t\tthis._collectVariables(variables, definition);\n\t\t} else if (Array.isArray(definition)) {\n\t\t\tdefinition.forEach((element: any) => this._collectDefinitionVariables(variables, element));\n\t\t} else if (Types.isObject(definition)) {\n\t\t\tfor (const key in definition) {\n\t\t\t\tthis._collectDefinitionVariables(variables, definition[key]);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _collectCommandVariables(variables: Set<string>, command: ICommandConfiguration, task: CustomTask | ContributedTask): void {\n\t\t// The custom execution should have everything it needs already as it provided\n\t\t// the callback.\n\t\tif (command.runtime === RuntimeType.CustomExecution) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (command.name === undefined) {\n\t\t\tthrow new Error('Command name should never be undefined here.');\n\t\t}\n\t\tthis._collectVariables(variables, command.name);\n\t\tcommand.args?.forEach(arg => this._collectVariables(variables, arg));\n\t\t// Try to get a scope.\n\t\tconst scope = (<IExtensionTaskSource>task._source).scope;\n\t\tif (scope !== TaskScope.Global) {\n\t\t\tvariables.add('${workspaceFolder}');\n\t\t}\n\t\tif (command.options) {\n\t\t\tconst options = command.options;\n\t\t\tif (options.cwd) {\n\t\t\t\tthis._collectVariables(variables, options.cwd);\n\t\t\t}\n\t\t\tconst optionsEnv = options.env;\n\t\t\tif (optionsEnv) {\n\t\t\t\tObject.keys(optionsEnv).forEach((key) => {\n\t\t\t\t\tconst value: any = optionsEnv[key];\n\t\t\t\t\tif (Types.isString(value)) {\n\t\t\t\t\t\tthis._collectVariables(variables, value);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tif (options.shell) {\n\t\t\t\tif (options.shell.executable) {\n\t\t\t\t\tthis._collectVariables(variables, options.shell.executable);\n\t\t\t\t}\n\t\t\t\toptions.shell.args?.forEach(arg => this._collectVariables(variables, arg));\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _collectMatcherVariables(variables: Set<string>, values: Array<string | ProblemMatcher> | undefined): void {\n\t\tif (values === undefined || values === null || values.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tvalues.forEach((value) => {\n\t\t\tlet matcher: ProblemMatcher;\n\t\t\tif (Types.isString(value)) {\n\t\t\t\tif (value[0] === '$') {\n\t\t\t\t\tmatcher = ProblemMatcherRegistry.get(value.substring(1));\n\t\t\t\t} else {\n\t\t\t\t\tmatcher = ProblemMatcherRegistry.get(value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmatcher = value;\n\t\t\t}\n\t\t\tif (matcher && matcher.filePrefix) {\n\t\t\t\tif (Types.isString(matcher.filePrefix)) {\n\t\t\t\t\tthis._collectVariables(variables, matcher.filePrefix);\n\t\t\t\t} else {\n\t\t\t\t\tfor (const fp of [...asArray(matcher.filePrefix.include || []), ...asArray(matcher.filePrefix.exclude || [])]) {\n\t\t\t\t\t\tthis._collectVariables(variables, fp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _collectVariables(variables: Set<string>, value: string | CommandString): void {\n\t\tconst string: string = Types.isString(value) ? value : value.value;\n\t\tconst r = /\\$\\{(.*?)\\}/g;\n\t\tlet matches: RegExpExecArray | null;\n\t\tdo {\n\t\t\tmatches = r.exec(string);\n\t\t\tif (matches) {\n\t\t\t\tvariables.add(matches[0]);\n\t\t\t}\n\t\t} while (matches);\n\t}\n\n\tprivate async _resolveCommandAndArgs(resolver: VariableResolver, commandConfig: ICommandConfiguration): Promise<{ command: CommandString; args: CommandString[] }> {\n\t\t// First we need to use the command args:\n\t\tlet args: CommandString[] = commandConfig.args ? commandConfig.args.slice() : [];\n\t\targs = await this._resolveVariables(resolver, args);\n\t\tconst command: CommandString = await this._resolveVariable(resolver, commandConfig.name);\n\t\treturn { command, args };\n\t}\n\n\tprivate async _resolveVariables(resolver: VariableResolver, value: string[]): Promise<string[]>;\n\tprivate async _resolveVariables(resolver: VariableResolver, value: CommandString[]): Promise<CommandString[]>;\n\tprivate async _resolveVariables(resolver: VariableResolver, value: CommandString[]): Promise<CommandString[]> {\n\t\treturn Promise.all(value.map(s => this._resolveVariable(resolver, s)));\n\t}\n\n\tprivate async _resolveMatchers(resolver: VariableResolver, values: Array<string | ProblemMatcher> | undefined): Promise<ProblemMatcher[]> {\n\t\tif (values === undefined || values === null || values.length === 0) {\n\t\t\treturn [];\n\t\t}\n\t\tconst result: ProblemMatcher[] = [];\n\t\tfor (const value of values) {\n\t\t\tlet matcher: ProblemMatcher;\n\t\t\tif (Types.isString(value)) {\n\t\t\t\tif (value[0] === '$') {\n\t\t\t\t\tmatcher = ProblemMatcherRegistry.get(value.substring(1));\n\t\t\t\t} else {\n\t\t\t\t\tmatcher = ProblemMatcherRegistry.get(value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmatcher = value;\n\t\t\t}\n\t\t\tif (!matcher) {\n\t\t\t\tthis._appendOutput(nls.localize('unknownProblemMatcher', 'Problem matcher {0} can\\'t be resolved. The matcher will be ignored'));\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst taskSystemInfo: ITaskSystemInfo | undefined = resolver.taskSystemInfo;\n\t\t\tconst hasFilePrefix = matcher.filePrefix !== undefined;\n\t\t\tconst hasUriProvider = taskSystemInfo !== undefined && taskSystemInfo.uriProvider !== undefined;\n\t\t\tif (!hasFilePrefix && !hasUriProvider) {\n\t\t\t\tresult.push(matcher);\n\t\t\t} else {\n\t\t\t\tconst copy = Objects.deepClone(matcher);\n\t\t\t\tif (hasUriProvider && (taskSystemInfo !== undefined)) {\n\t\t\t\t\tcopy.uriProvider = taskSystemInfo.uriProvider;\n\t\t\t\t}\n\t\t\t\tif (hasFilePrefix) {\n\t\t\t\t\tconst filePrefix = copy.filePrefix;\n\t\t\t\t\tif (Types.isString(filePrefix)) {\n\t\t\t\t\t\tcopy.filePrefix = await this._resolveVariable(resolver, filePrefix);\n\t\t\t\t\t} else if (filePrefix !== undefined) {\n\t\t\t\t\t\tif (filePrefix.include) {\n\t\t\t\t\t\t\tfilePrefix.include = Array.isArray(filePrefix.include)\n\t\t\t\t\t\t\t\t? await Promise.all(filePrefix.include.map(x => this._resolveVariable(resolver, x)))\n\t\t\t\t\t\t\t\t: await this._resolveVariable(resolver, filePrefix.include);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (filePrefix.exclude) {\n\t\t\t\t\t\t\tfilePrefix.exclude = Array.isArray(filePrefix.exclude)\n\t\t\t\t\t\t\t\t? await Promise.all(filePrefix.exclude.map(x => this._resolveVariable(resolver, x)))\n\t\t\t\t\t\t\t\t: await this._resolveVariable(resolver, filePrefix.exclude);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tresult.push(copy);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate async _resolveVariable(resolver: VariableResolver, value: string | undefined): Promise<string>;\n\tprivate async _resolveVariable(resolver: VariableResolver, value: CommandString | undefined): Promise<CommandString>;\n\tprivate async _resolveVariable(resolver: VariableResolver, value: CommandString | undefined): Promise<CommandString> {\n\t\t// TODO@Dirk Task.getWorkspaceFolder should return a WorkspaceFolder that is defined in workspace.ts\n\t\tif (Types.isString(value)) {\n\t\t\treturn resolver.resolve(value);\n\t\t} else if (value !== undefined) {\n\t\t\treturn {\n\t\t\t\tvalue: await resolver.resolve(value.value),\n\t\t\t\tquoting: value.quoting\n\t\t\t};\n\t\t} else { // This should never happen\n\t\t\tthrow new Error('Should never try to resolve undefined.');\n\t\t}\n\t}\n\n\tprivate async _resolveOptions(resolver: VariableResolver, options: CommandOptions | undefined): Promise<CommandOptions> {\n\t\tif (options === undefined || options === null) {\n\t\t\tlet cwd: string | undefined;\n\t\t\ttry {\n\t\t\t\tcwd = await this._resolveVariable(resolver, '${workspaceFolder}');\n\t\t\t} catch (e) {\n\t\t\t\t// No workspace\n\t\t\t}\n\t\t\treturn { cwd };\n\t\t}\n\t\tconst result: CommandOptions = Types.isString(options.cwd)\n\t\t\t? { cwd: await this._resolveVariable(resolver, options.cwd) }\n\t\t\t: { cwd: await this._resolveVariable(resolver, '${workspaceFolder}') };\n\t\tif (options.env) {\n\t\t\tresult.env = Object.create(null);\n\t\t\tfor (const key of Object.keys(options.env)) {\n\t\t\t\tconst value: any = options.env![key];\n\t\t\t\tif (Types.isString(value)) {\n\t\t\t\t\tresult.env![key] = await this._resolveVariable(resolver, value);\n\t\t\t\t} else {\n\t\t\t\t\tresult.env![key] = value.toString();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tstatic WellKnownCommands: IStringDictionary<boolean> = {\n\t\t'ant': true,\n\t\t'cmake': true,\n\t\t'eslint': true,\n\t\t'gradle': true,\n\t\t'grunt': true,\n\t\t'gulp': true,\n\t\t'jake': true,\n\t\t'jenkins': true,\n\t\t'jshint': true,\n\t\t'make': true,\n\t\t'maven': true,\n\t\t'msbuild': true,\n\t\t'msc': true,\n\t\t'nmake': true,\n\t\t'npm': true,\n\t\t'rake': true,\n\t\t'tsc': true,\n\t\t'xbuild': true\n\t};\n\n\tpublic getSanitizedCommand(cmd: string): string {\n\t\tlet result = cmd.toLowerCase();\n\t\tconst index = result.lastIndexOf(path.sep);\n\t\tif (index !== -1) {\n\t\t\tresult = result.substring(index + 1);\n\t\t}\n\t\tif (TerminalTaskSystem.WellKnownCommands[result]) {\n\t\t\treturn result;\n\t\t}\n\t\treturn 'other';\n\t}\n\n\tprivate _appendOutput(output: string): void {\n\t\tconst outputChannel = this._outputService.getChannel(this._outputChannelId);\n\t\toutputChannel?.append(output);\n\t}\n}\n\nfunction getWaitOnExitValue(presentationOptions: IPresentationOptions, configurationProperties: IConfigurationProperties) {\n\tif ((presentationOptions.close === undefined) || (presentationOptions.close === false)) {\n\t\tif ((presentationOptions.reveal !== RevealKind.Never) || !configurationProperties.isBackground || (presentationOptions.close === false)) {\n\t\t\tif (presentationOptions.panel === PanelKind.New) {\n\t\t\t\treturn taskShellIntegrationWaitOnExitSequence(nls.localize('closeTerminal', 'Press any key to close the terminal.'));\n\t\t\t} else if (presentationOptions.showReuseMessage) {\n\t\t\t\treturn taskShellIntegrationWaitOnExitSequence(nls.localize('reuseTerminal', 'Terminal will be reused by tasks, press any key to close it.'));\n\t\t\t} else {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn !presentationOptions.close;\n}\n\nfunction taskShellIntegrationWaitOnExitSequence(message: string): (exitCode: number) => string {\n\treturn (exitCode) => {\n\t\treturn `${VSCodeSequence(VSCodeOscPt.CommandFinished, exitCode.toString())}${message}`;\n\t};\n}\n\nfunction getReconnectionData(terminal: ITerminalInstance): IReconnectionTaskData | undefined {\n\treturn terminal.shellLaunchConfig.attachPersistentProcess?.reconnectionProperties?.data as IReconnectionTaskData | undefined;\n}\n"]}