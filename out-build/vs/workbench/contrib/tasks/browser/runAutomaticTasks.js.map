{"version":3,"sources":["vs/workbench/contrib/tasks/browser/runAutomaticTasks.ts"],"names":[],"mappings":"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","file":"runAutomaticTasks.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport * as resources from 'vs/base/common/resources';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { ITaskService, IWorkspaceFolderTaskResult } from 'vs/workbench/contrib/tasks/common/taskService';\nimport { RunOnOptions, Task, TaskRunSource, TaskSource, TaskSourceKind, TASKS_CATEGORY, WorkspaceFileTaskSource, IWorkspaceTaskSource } from 'vs/workbench/contrib/tasks/common/tasks';\nimport { IQuickPickItem, IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\nimport { Action2 } from 'vs/platform/actions/common/actions';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { IWorkspaceTrustManagementService } from 'vs/platform/workspace/common/workspaceTrust';\nimport { ConfigurationTarget, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { URI } from 'vs/base/common/uri';\nimport { Event } from 'vs/base/common/event';\nimport { ILogService } from 'vs/platform/log/common/log';\n\nconst ALLOW_AUTOMATIC_TASKS = 'task.allowAutomaticTasks';\n\nexport class RunAutomaticTasks extends Disposable implements IWorkbenchContribution {\n\tprivate _hasRunTasks: boolean = false;\n\tconstructor(\n\t\t@ITaskService private readonly _taskService: ITaskService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IWorkspaceTrustManagementService private readonly _workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@ILogService private readonly _logService: ILogService) {\n\t\tsuper();\n\t\tif (this._taskService.isReconnected) {\n\t\t\tthis._tryRunTasks();\n\t\t} else {\n\t\t\tthis._register(Event.once(this._taskService.onDidReconnectToTasks)(async () => await this._tryRunTasks()));\n\t\t}\n\t\tthis._register(this._workspaceTrustManagementService.onDidChangeTrust(async () => await this._tryRunTasks()));\n\t}\n\n\tprivate async _tryRunTasks() {\n\t\tif (!this._workspaceTrustManagementService.isWorkspaceTrusted()) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._hasRunTasks || this._configurationService.getValue(ALLOW_AUTOMATIC_TASKS) === 'off') {\n\t\t\treturn;\n\t\t}\n\t\tthis._hasRunTasks = true;\n\t\tthis._logService.trace('RunAutomaticTasks: Trying to run tasks.');\n\t\t// Wait until we have task system info (the extension host and workspace folders are available).\n\t\tif (!this._taskService.hasTaskSystemInfo) {\n\t\t\tthis._logService.trace('RunAutomaticTasks: Awaiting task system info.');\n\t\t\tawait Event.toPromise(Event.once(this._taskService.onDidChangeTaskSystemInfo));\n\t\t}\n\t\tconst workspaceTasks = await this._taskService.getWorkspaceTasks(TaskRunSource.FolderOpen);\n\t\tthis._logService.trace(`RunAutomaticTasks: Found ${workspaceTasks.size} automatic tasks`);\n\t\tawait this._runWithPermission(this._taskService, this._configurationService, workspaceTasks);\n\t}\n\n\tprivate _runTasks(taskService: ITaskService, tasks: Array<Task | Promise<Task | undefined>>) {\n\t\ttasks.forEach(task => {\n\t\t\tif (task instanceof Promise) {\n\t\t\t\ttask.then(promiseResult => {\n\t\t\t\t\tif (promiseResult) {\n\t\t\t\t\t\ttaskService.run(promiseResult);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\ttaskService.run(task);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _getTaskSource(source: TaskSource): URI | undefined {\n\t\tconst taskKind = TaskSourceKind.toConfigurationTarget(source.kind);\n\t\tswitch (taskKind) {\n\t\t\tcase ConfigurationTarget.WORKSPACE_FOLDER: {\n\t\t\t\treturn resources.joinPath((<IWorkspaceTaskSource>source).config.workspaceFolder!.uri, (<IWorkspaceTaskSource>source).config.file);\n\t\t\t}\n\t\t\tcase ConfigurationTarget.WORKSPACE: {\n\t\t\t\treturn (<WorkspaceFileTaskSource>source).config.workspace?.configuration ?? undefined;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate _findAutoTasks(taskService: ITaskService, workspaceTaskResult: Map<string, IWorkspaceFolderTaskResult>): { tasks: Array<Task | Promise<Task | undefined>>; taskNames: Array<string>; locations: Map<string, URI> } {\n\t\tconst tasks = new Array<Task | Promise<Task | undefined>>();\n\t\tconst taskNames = new Array<string>();\n\t\tconst locations = new Map<string, URI>();\n\n\t\tif (workspaceTaskResult) {\n\t\t\tworkspaceTaskResult.forEach(resultElement => {\n\t\t\t\tif (resultElement.set) {\n\t\t\t\t\tresultElement.set.tasks.forEach(task => {\n\t\t\t\t\t\tif (task.runOptions.runOn === RunOnOptions.folderOpen) {\n\t\t\t\t\t\t\ttasks.push(task);\n\t\t\t\t\t\t\ttaskNames.push(task._label);\n\t\t\t\t\t\t\tconst location = this._getTaskSource(task._source);\n\t\t\t\t\t\t\tif (location) {\n\t\t\t\t\t\t\t\tlocations.set(location.fsPath, location);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tif (resultElement.configurations) {\n\t\t\t\t\tfor (const configuredTask of Object.values(resultElement.configurations.byIdentifier)) {\n\t\t\t\t\t\tif (configuredTask.runOptions.runOn === RunOnOptions.folderOpen) {\n\t\t\t\t\t\t\ttasks.push(new Promise<Task | undefined>(resolve => {\n\t\t\t\t\t\t\t\ttaskService.getTask(resultElement.workspaceFolder, configuredTask._id, true).then(task => resolve(task));\n\t\t\t\t\t\t\t}));\n\t\t\t\t\t\t\tif (configuredTask._label) {\n\t\t\t\t\t\t\t\ttaskNames.push(configuredTask._label);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\ttaskNames.push(configuredTask.configures.task);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tconst location = this._getTaskSource(configuredTask._source);\n\t\t\t\t\t\t\tif (location) {\n\t\t\t\t\t\t\t\tlocations.set(location.fsPath, location);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn { tasks, taskNames, locations };\n\t}\n\n\tprivate async _runWithPermission(taskService: ITaskService, configurationService: IConfigurationService, workspaceTaskResult: Map<string, IWorkspaceFolderTaskResult>) {\n\n\t\tconst { tasks, taskNames } = this._findAutoTasks(taskService, workspaceTaskResult);\n\n\t\tif (taskNames.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tif (configurationService.getValue(ALLOW_AUTOMATIC_TASKS) === 'off') {\n\t\t\treturn;\n\t\t}\n\t\tthis._runTasks(taskService, tasks);\n\t}\n}\n\nexport class ManageAutomaticTaskRunning extends Action2 {\n\n\tpublic static readonly ID = 'workbench.action.tasks.manageAutomaticRunning';\n\tpublic static readonly LABEL = nls.localize('workbench.action.tasks.manageAutomaticRunning', \"Manage Automatic Tasks\");\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ManageAutomaticTaskRunning.ID,\n\t\t\ttitle: ManageAutomaticTaskRunning.LABEL,\n\t\t\tcategory: TASKS_CATEGORY\n\t\t});\n\t}\n\n\tpublic async run(accessor: ServicesAccessor): Promise<any> {\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\tconst allowItem: IQuickPickItem = { label: nls.localize('workbench.action.tasks.allowAutomaticTasks', \"Allow Automatic Tasks\") };\n\t\tconst disallowItem: IQuickPickItem = { label: nls.localize('workbench.action.tasks.disallowAutomaticTasks', \"Disallow Automatic Tasks\") };\n\t\tconst value = await quickInputService.pick([allowItem, disallowItem], { canPickMany: false });\n\t\tif (!value) {\n\t\t\treturn;\n\t\t}\n\t\tconfigurationService.updateValue(ALLOW_AUTOMATIC_TASKS, value === allowItem ? 'on' : 'off', ConfigurationTarget.USER);\n\t}\n}\n"]}