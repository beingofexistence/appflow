{"version":3,"sources":["vs/workbench/contrib/tasks/browser/tasksQuickAccess.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;;IAmBzF,IAAM,IAAI,GAAV,MAAM,IAAyB,SAAQ,wBAAiD;;iBAEvF,WAAM,GAAG,OAAH,AAAU,CAAC;QAExB,YACoB,gBAAqB,EAClB,CAAkB,EACT,CAA0B,EAC7B,CAAuB,EACrB,CAAyB,EAC/B,CAAmB,EACpB,CAAkB,EAChB,CAAoB;YAE7C,KAAK,CAAC,MAAI,CAAqB,MAAM,EAAE;gBACtC,aAAa,EAAE;oBACd,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAe,EAAE,IAAmB,CAAC;iBACrD;aACD,CAAC,CAAC;YAZmB,MAAC,GAAD,CAAC,CAAiB;YACT,MAAC,GAAD,CAAC,CAAyB;YAC7B,MAAC,GAAD,CAAC,CAAsB;YACrB,MAAC,GAAD,CAAC,CAAwB;YAC/B,MAAC,GAAD,CAAC,CAAkB;YACpB,MAAC,GAAD,CAAC,CAAiB;YAChB,MAAC,GAAD,CAAC,CAAmB;QAO9C,CAAC;QAES,KAAK,CAAC,CAAC,CAAS,MAAc,EAAE,WAAgB,EAAc,KAAwB;YAC/F,IAAI,KAAK,CAAC,uBAAuB,EAAE;gBAClC,OAAO,EAAE,CAAC;aACV;YAED,MAAM,aAAa,GAAG,IAAI,oBAAI,CAAU,IAAI,CAAC,CAAC,EAAa,IAAI,CAAC,CAAC,EAAsB,IAAI,CAAC,CAAC,EAAmB,IAAI,CAAC,CAAC,EAAqB,IAAI,CAAC,CAAC,EAAc,IAAI,CAAC,CAAC,EAAe,IAAI,CAAC,CAAC,CAAe,CAAC;YAC1M,MAAM,aAAa,GAAG,MAAM,aAAa,CAAC,kBAAkB,EAAE,CAAC;YAC/D,MAAM,SAAS,GAAwD,EAAE,CAAC;YAE1E,KAAK,MAAM,KAAK,IAAI,aAAa,CAAC,OAAO,EAAE;gBAC1C,MAAM,UAAU,GAAG,IAAA,aAAG,EAAU,MAAM,EAAE,KAAK,CAAC,KAAM,CAAC,CAAC;gBACtD,IAAI,CAAC,UAAU,EAAE;oBAChB,SAAS;iBACT;gBAED,IAAI,KAAK,CAAC,IAAI,KAAK,WAAW,EAAE;oBAC/B,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBACtB;gBAED,MAAM,IAAI,GAAkE,KAAM,CAAC,IAAK,CAAC;gBACzF,MAAM,gBAAgB,GAAwD,KAAK,CAAC;gBACpF,gBAAgB,CAAC,UAAU,GAAG,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC;gBACpD,gBAAgB,CAAC,OAAO,GAAG,CAAC,KAAK,EAAE,EAAE;oBACpC,IAAI,CAAC,KAAK,KAAK,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,MAAM,KAAK,CAAC,CAAC,EAAE;wBAC9D,MAAM,GAAG,GAAG,CAAC,IAAI,IAAI,CAAC,IAAA,WAAG,EAAM,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC;wBAC9E,IAAI,GAAG,EAAE;4BACR,IAAI,CAAC,CAAC,CAAY,sBAAsB,CAAC,GAAG,CAAC,CAAC;yBAC9C;wBACD,OAAO,iCAAa,CAAC,cAAc,CAAC;qBACpC;yBAAM;wBACN,IAAI,WAAG,CAAa,EAAE,CAAC,IAAI,CAAC,EAAE;4BAC7B,IAAI,CAAC,CAAC,CAAY,SAAS,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;yBACnD;6BAAM,IAAI,WAAG,CAAQ,EAAE,CAAC,IAAI,CAAC,EAAE;4BAC/B,IAAI,CAAC,CAAC,CAAY,UAAU,CAAC,IAAI,CAAC,CAAC;yBACnC;wBACD,OAAO,iCAAa,CAAC,YAAY,CAAC;qBAClC;gBACF,CAAC,CAAC;gBACF,gBAAgB,CAAC,MAAM,GAAG,KAAK,IAAI,EAAE;oBACpC,IAAI,IAAA,WAAG,EAAM,IAAI,CAAC,EAAE;wBACnB,6CAA6C;wBAC7C,MAAM,UAAU,GAAG,MAAM,aAAa,CAAC,IAAI,CAAC,IAAA,cAAQ,EAAC,CAAyB,EAAE,IAAwB,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;wBAC5H,IAAI,UAAU,EAAE;4BACf,IAAI,CAAC,CAAC,CAAY,GAAG,CAAC,UAAU,EAAE,EAAE,oBAAoB,EAAE,IAAI,EAAE,CAAC,CAAC;yBAClE;qBACD;yBAAM;wBACN,IAAI,CAAC,CAAC,CAAY,GAAG,CAAC,MAAM,IAAI,CAAC,CAAC,CAAO,IAAI,CAAC,EAAE,EAAE,oBAAoB,EAAE,IAAI,EAAE,CAAC,CAAC;qBAChF;gBACF,CAAC,CAAC;gBAEF,SAAS,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;aACjC;YACD,OAAO,SAAS,CAAC;QAClB,CAAC;QAEO,KAAK,CAAC,CAAC,CAAO,IAAgB;YACrC,IAAI,CAAC,WAAG,CAAa,EAAE,CAAC,IAAI,CAAC,EAAE;gBAC9B,OAAO,IAAI,CAAC;aACZ;YAED,OAAO,IAAI,CAAC,CAAC,CAAY,cAAc,CAAC,IAAI,CAAC,CAAC;QAC/C,CAAC;;IAlFW,oBAAI;mBAAJ,IAAI;QAKd,WAAA,gBAAG,CAAA;QACH,WAAA,kBAAI,CAAA;QACJ,WAAA,mBAAG,CAAA;QACH,WAAA,gBAAG,CAAA;QACH,WAAA,kBAAG,CAAA;QACH,WAAA,aAAG,CAAA;QACH,WAAA,kBAAG,CAAA;QACH,WAAA,aAAG,CAAA;OAZO,IAAI,CAmFhB","file":"tasksQuickAccess.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { IQuickPickSeparator, IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\nimport { IPickerQuickAccessItem, PickerQuickAccessProvider, TriggerAction } from 'vs/platform/quickinput/browser/pickerQuickAccess';\nimport { matchesFuzzy } from 'vs/base/common/filters';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { ITaskService, Task } from 'vs/workbench/contrib/tasks/common/taskService';\nimport { CustomTask, ContributedTask, ConfiguringTask } from 'vs/workbench/contrib/tasks/common/tasks';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { TaskQuickPick, ITaskTwoLevelQuickPickEntry } from 'vs/workbench/contrib/tasks/browser/taskQuickPick';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { isString } from 'vs/base/common/types';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\n\nexport class TasksQuickAccessProvider extends PickerQuickAccessProvider<IPickerQuickAccessItem> {\n\n\tstatic PREFIX = 'task ';\n\n\tconstructor(\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@ITaskService private _taskService: ITaskService,\n\t\t@IConfigurationService private _configurationService: IConfigurationService,\n\t\t@IQuickInputService private _quickInputService: IQuickInputService,\n\t\t@INotificationService private _notificationService: INotificationService,\n\t\t@IDialogService private _dialogService: IDialogService,\n\t\t@IThemeService private _themeService: IThemeService,\n\t\t@IStorageService private _storageService: IStorageService\n\t) {\n\t\tsuper(TasksQuickAccessProvider.PREFIX, {\n\t\t\tnoResultsPick: {\n\t\t\t\tlabel: localize('noTaskResults', \"No matching tasks\")\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected async _getPicks(filter: string, disposables: DisposableStore, token: CancellationToken): Promise<Array<IPickerQuickAccessItem | IQuickPickSeparator>> {\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst taskQuickPick = new TaskQuickPick(this._taskService, this._configurationService, this._quickInputService, this._notificationService, this._themeService, this._dialogService, this._storageService);\n\t\tconst topLevelPicks = await taskQuickPick.getTopLevelEntries();\n\t\tconst taskPicks: Array<IPickerQuickAccessItem | IQuickPickSeparator> = [];\n\n\t\tfor (const entry of topLevelPicks.entries) {\n\t\t\tconst highlights = matchesFuzzy(filter, entry.label!);\n\t\t\tif (!highlights) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (entry.type === 'separator') {\n\t\t\t\ttaskPicks.push(entry);\n\t\t\t}\n\n\t\t\tconst task: Task | ConfiguringTask | string = (<ITaskTwoLevelQuickPickEntry>entry).task!;\n\t\t\tconst quickAccessEntry: IPickerQuickAccessItem = <ITaskTwoLevelQuickPickEntry>entry;\n\t\t\tquickAccessEntry.highlights = { label: highlights };\n\t\t\tquickAccessEntry.trigger = (index) => {\n\t\t\t\tif ((index === 1) && (quickAccessEntry.buttons?.length === 2)) {\n\t\t\t\t\tconst key = (task && !isString(task)) ? task.getRecentlyUsedKey() : undefined;\n\t\t\t\t\tif (key) {\n\t\t\t\t\t\tthis._taskService.removeRecentlyUsedTask(key);\n\t\t\t\t\t}\n\t\t\t\t\treturn TriggerAction.REFRESH_PICKER;\n\t\t\t\t} else {\n\t\t\t\t\tif (ContributedTask.is(task)) {\n\t\t\t\t\t\tthis._taskService.customize(task, undefined, true);\n\t\t\t\t\t} else if (CustomTask.is(task)) {\n\t\t\t\t\t\tthis._taskService.openConfig(task);\n\t\t\t\t\t}\n\t\t\t\t\treturn TriggerAction.CLOSE_PICKER;\n\t\t\t\t}\n\t\t\t};\n\t\t\tquickAccessEntry.accept = async () => {\n\t\t\t\tif (isString(task)) {\n\t\t\t\t\t// switch to quick pick and show second level\n\t\t\t\t\tconst showResult = await taskQuickPick.show(localize('TaskService.pickRunTask', 'Select the task to run'), undefined, task);\n\t\t\t\t\tif (showResult) {\n\t\t\t\t\t\tthis._taskService.run(showResult, { attachProblemMatcher: true });\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis._taskService.run(await this._toTask(task), { attachProblemMatcher: true });\n\t\t\t\t}\n\t\t\t};\n\n\t\t\ttaskPicks.push(quickAccessEntry);\n\t\t}\n\t\treturn taskPicks;\n\t}\n\n\tprivate async _toTask(task: Task | ConfiguringTask): Promise<Task | undefined> {\n\t\tif (!ConfiguringTask.is(task)) {\n\t\t\treturn task;\n\t\t}\n\n\t\treturn this._taskService.tryResolveTask(task);\n\t}\n}\n"]}