{"version":3,"sources":["vs/workbench/contrib/tasks/browser/taskTerminalStatus.ts"],"names":[],"mappings":"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","file":"taskTerminalStatus.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport Severity from 'vs/base/common/severity';\nimport { AbstractProblemCollector, StartStopProblemCollector } from 'vs/workbench/contrib/tasks/common/problemCollectors';\nimport { ITaskGeneralEvent, ITaskProcessEndedEvent, ITaskProcessStartedEvent, TaskEventKind, TaskRunType } from 'vs/workbench/contrib/tasks/common/tasks';\nimport { ITaskService, Task } from 'vs/workbench/contrib/tasks/common/taskService';\nimport { ITerminalInstance } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { MarkerSeverity } from 'vs/platform/markers/common/markers';\nimport { spinningLoading } from 'vs/platform/theme/common/iconRegistry';\nimport { IMarker } from 'vs/platform/terminal/common/capabilities/capabilities';\nimport { AudioCue, IAudioCueService } from 'vs/platform/audioCues/browser/audioCueService';\nimport { ITerminalStatus } from 'vs/workbench/contrib/terminal/common/terminal';\n\ninterface ITerminalData {\n\tterminal: ITerminalInstance;\n\ttask: Task;\n\tstatus: ITerminalStatus;\n\tproblemMatcher: AbstractProblemCollector;\n\ttaskRunEnded: boolean;\n\tdisposeListener?: IDisposable;\n}\n\nconst TASK_TERMINAL_STATUS_ID = 'task_terminal_status';\nexport const ACTIVE_TASK_STATUS: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, icon: spinningLoading, severity: Severity.Info, tooltip: nls.localize('taskTerminalStatus.active', \"Task is running\") };\nexport const SUCCEEDED_TASK_STATUS: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, icon: Codicon.check, severity: Severity.Info, tooltip: nls.localize('taskTerminalStatus.succeeded', \"Task succeeded\") };\nconst SUCCEEDED_INACTIVE_TASK_STATUS: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, icon: Codicon.check, severity: Severity.Info, tooltip: nls.localize('taskTerminalStatus.succeededInactive', \"Task succeeded and waiting...\") };\nexport const FAILED_TASK_STATUS: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, icon: Codicon.error, severity: Severity.Error, tooltip: nls.localize('taskTerminalStatus.errors', \"Task has errors\") };\nconst FAILED_INACTIVE_TASK_STATUS: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, icon: Codicon.error, severity: Severity.Error, tooltip: nls.localize('taskTerminalStatus.errorsInactive', \"Task has errors and is waiting...\") };\nconst WARNING_TASK_STATUS: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, icon: Codicon.warning, severity: Severity.Warning, tooltip: nls.localize('taskTerminalStatus.warnings', \"Task has warnings\") };\nconst WARNING_INACTIVE_TASK_STATUS: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, icon: Codicon.warning, severity: Severity.Warning, tooltip: nls.localize('taskTerminalStatus.warningsInactive', \"Task has warnings and is waiting...\") };\nconst INFO_TASK_STATUS: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, icon: Codicon.info, severity: Severity.Info, tooltip: nls.localize('taskTerminalStatus.infos', \"Task has infos\") };\nconst INFO_INACTIVE_TASK_STATUS: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, icon: Codicon.info, severity: Severity.Info, tooltip: nls.localize('taskTerminalStatus.infosInactive', \"Task has infos and is waiting...\") };\n\nexport class TaskTerminalStatus extends Disposable {\n\tprivate terminalMap: Map<number, ITerminalData> = new Map();\n\tprivate _marker: IMarker | undefined;\n\tconstructor(@ITaskService taskService: ITaskService, @IAudioCueService private readonly _audioCueService: IAudioCueService) {\n\t\tsuper();\n\t\tthis._register(taskService.onDidStateChange((event) => {\n\t\t\tswitch (event.kind) {\n\t\t\t\tcase TaskEventKind.ProcessStarted:\n\t\t\t\tcase TaskEventKind.Active: this.eventActive(event); break;\n\t\t\t\tcase TaskEventKind.Inactive: this.eventInactive(event); break;\n\t\t\t\tcase TaskEventKind.ProcessEnded: this.eventEnd(event); break;\n\t\t\t}\n\t\t}));\n\t}\n\n\taddTerminal(task: Task, terminal: ITerminalInstance, problemMatcher: AbstractProblemCollector) {\n\t\tconst status: ITerminalStatus = { id: TASK_TERMINAL_STATUS_ID, severity: Severity.Info };\n\t\tterminal.statusList.add(status);\n\t\tthis._register(problemMatcher.onDidFindFirstMatch(() => {\n\t\t\tthis._marker = terminal.registerMarker();\n\t\t}));\n\t\tthis._register(problemMatcher.onDidFindErrors(() => {\n\t\t\tif (this._marker) {\n\t\t\t\tterminal.addBufferMarker({ marker: this._marker, hoverMessage: nls.localize('task.watchFirstError', \"Beginning of detected errors for this run\"), disableCommandStorage: true });\n\t\t\t}\n\t\t}));\n\t\tthis._register(problemMatcher.onDidRequestInvalidateLastMarker(() => {\n\t\t\tthis._marker?.dispose();\n\t\t\tthis._marker = undefined;\n\t\t}));\n\n\t\tthis.terminalMap.set(terminal.instanceId, { terminal, task, status, problemMatcher, taskRunEnded: false });\n\t}\n\n\tprivate terminalFromEvent(event: { terminalId: number | undefined }): ITerminalData | undefined {\n\t\tif (!('terminalId' in event) || !event.terminalId) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this.terminalMap.get(event.terminalId);\n\t}\n\n\tprivate eventEnd(event: ITaskProcessEndedEvent) {\n\t\tconst terminalData = this.terminalFromEvent(event);\n\t\tif (!terminalData) {\n\t\t\treturn;\n\t\t}\n\t\tterminalData.taskRunEnded = true;\n\t\tterminalData.terminal.statusList.remove(terminalData.status);\n\t\tif ((event.exitCode === 0) && (terminalData.problemMatcher.numberOfMatches === 0)) {\n\t\t\tthis._audioCueService.playAudioCue(AudioCue.taskCompleted);\n\t\t\tif (terminalData.task.configurationProperties.isBackground) {\n\t\t\t\tfor (const status of terminalData.terminal.statusList.statuses) {\n\t\t\t\t\tterminalData.terminal.statusList.remove(status);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tterminalData.terminal.statusList.add(SUCCEEDED_TASK_STATUS);\n\t\t\t}\n\t\t} else if (event.exitCode || terminalData.problemMatcher.maxMarkerSeverity === MarkerSeverity.Error) {\n\t\t\tthis._audioCueService.playAudioCue(AudioCue.taskFailed);\n\t\t\tterminalData.terminal.statusList.add(FAILED_TASK_STATUS);\n\t\t} else if (terminalData.problemMatcher.maxMarkerSeverity === MarkerSeverity.Warning) {\n\t\t\tterminalData.terminal.statusList.add(WARNING_TASK_STATUS);\n\t\t} else if (terminalData.problemMatcher.maxMarkerSeverity === MarkerSeverity.Info) {\n\t\t\tterminalData.terminal.statusList.add(INFO_TASK_STATUS);\n\t\t}\n\t}\n\n\tprivate eventInactive(event: ITaskGeneralEvent) {\n\t\tconst terminalData = this.terminalFromEvent(event);\n\t\tif (!terminalData || !terminalData.problemMatcher || terminalData.taskRunEnded) {\n\t\t\treturn;\n\t\t}\n\t\tterminalData.terminal.statusList.remove(terminalData.status);\n\t\tif (terminalData.problemMatcher.numberOfMatches === 0) {\n\t\t\tthis._audioCueService.playAudioCue(AudioCue.taskCompleted);\n\t\t\tterminalData.terminal.statusList.add(SUCCEEDED_INACTIVE_TASK_STATUS);\n\t\t} else if (terminalData.problemMatcher.maxMarkerSeverity === MarkerSeverity.Error) {\n\t\t\tthis._audioCueService.playAudioCue(AudioCue.taskFailed);\n\t\t\tterminalData.terminal.statusList.add(FAILED_INACTIVE_TASK_STATUS);\n\t\t} else if (terminalData.problemMatcher.maxMarkerSeverity === MarkerSeverity.Warning) {\n\t\t\tterminalData.terminal.statusList.add(WARNING_INACTIVE_TASK_STATUS);\n\t\t} else if (terminalData.problemMatcher.maxMarkerSeverity === MarkerSeverity.Info) {\n\t\t\tterminalData.terminal.statusList.add(INFO_INACTIVE_TASK_STATUS);\n\t\t}\n\t}\n\n\tprivate eventActive(event: ITaskGeneralEvent | ITaskProcessStartedEvent) {\n\t\tconst terminalData = this.terminalFromEvent(event);\n\t\tif (!terminalData) {\n\t\t\treturn;\n\t\t}\n\t\tif (!terminalData.disposeListener) {\n\t\t\tterminalData.disposeListener = terminalData.terminal.onDisposed(() => {\n\t\t\t\tif (!event.terminalId) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.terminalMap.delete(event.terminalId);\n\t\t\t\tterminalData.disposeListener?.dispose();\n\t\t\t});\n\t\t}\n\t\tterminalData.taskRunEnded = false;\n\t\tterminalData.terminal.statusList.remove(terminalData.status);\n\t\t// We don't want to show an infinite status for a background task that doesn't have a problem matcher.\n\t\tif ((terminalData.problemMatcher instanceof StartStopProblemCollector) || (terminalData.problemMatcher?.problemMatchers.length > 0) || event.runType === TaskRunType.SingleRun) {\n\t\t\tterminalData.terminal.statusList.add(ACTIVE_TASK_STATUS);\n\t\t}\n\t}\n}\n"]}