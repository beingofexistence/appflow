{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/output/common/outputChannelModelService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAYnF,QAAA,IAAI,GAAyB,IAAA,mBAAG,EAAyC,2BAA2B,CAAC,CAAC;IAS5G,IAAM,IAAI,GAAV,MAAM,IAAI;QAMhB,YACe,CAAiC,EACxB,CAA0C,EACnC,kBAAuB;YAFtB,MAAC,GAAD,CAAC,CAAe;YACP,MAAC,GAAD,CAAC,CAAwB;YAU1D,MAAC,GAAiC,IAAI,CAAC;YAP9C,IAAI,CAAC,CAAC,GAAgB,IAAA,eAAG,EAAM,kBAAkB,CAAC,cAAc,EAAE,UAAU,IAAA,UAAG,EAAc,IAAI,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,cAAc,EAAE,EAAE,CAAC,EAAE,CAAC,CAAC;QACzI,CAAC;QAED,wBAAwB,CAAC,EAAU,EAAE,QAAa,EAAE,QAA4B,EAAE,IAAU;YAC3F,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAoB,cAAc,CAAC,yBAAI,EAAoB,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAoB,cAAc,CAAC,yBAAI,EAAyB,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAS,CAAC;QAC1N,CAAC;QAGD,IAAY,CAAC;YACZ,IAAI,CAAC,IAAI,CAAC,CAAC,EAAW;gBACrB,IAAI,CAAC,CAAC,GAAY,IAAI,CAAC,CAAC,CAAW,YAAY,CAAC,IAAI,CAAC,CAAC,CAAc,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAc,CAAC;aACrG;YACD,OAAO,IAAI,CAAC,CAAC,CAAU;QACxB,CAAC;KAED,CAAA;IA1BY,oBAAI;mBAAJ,IAAI;QAOd,WAAA,WAAG,CAAA;QACH,WAAA,mBAAG,CAAA;QACH,WAAA,wBAAG,CAAA;OATO,IAAI,CA0BhB;IAED,IAAA,gBAAG,EAAe,YAAI,EAAwB,IAAI,oCAAiD,CAAC","file":"outputChannelModelService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { createDecorator, IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { toLocalISOString } from 'vs/base/common/date';\nimport { joinPath } from 'vs/base/common/resources';\nimport { DelegatedOutputChannelModel, FileOutputChannelModel, IOutputChannelModel } from 'vs/workbench/contrib/output/common/outputChannelModel';\nimport { URI } from 'vs/base/common/uri';\nimport { ILanguageSelection } from 'vs/editor/common/languages/language';\n\nexport const IOutputChannelModelService = createDecorator<IOutputChannelModelService>('outputChannelModelService');\n\nexport interface IOutputChannelModelService {\n\treadonly _serviceBrand: undefined;\n\n\tcreateOutputChannelModel(id: string, modelUri: URI, language: ILanguageSelection, file?: URI): IOutputChannelModel;\n\n}\n\nexport class OutputChannelModelService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly outputLocation: URI;\n\n\tconstructor(\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService\n\t) {\n\t\tthis.outputLocation = joinPath(environmentService.windowLogsPath, `output_${toLocalISOString(new Date()).replace(/-|:|\\.\\d+Z$/g, '')}`);\n\t}\n\n\tcreateOutputChannelModel(id: string, modelUri: URI, language: ILanguageSelection, file?: URI): IOutputChannelModel {\n\t\treturn file ? this.instantiationService.createInstance(FileOutputChannelModel, modelUri, language, file) : this.instantiationService.createInstance(DelegatedOutputChannelModel, id, modelUri, language, this.outputDir);\n\t}\n\n\tprivate _outputDir: Promise<URI> | null = null;\n\tprivate get outputDir(): Promise<URI> {\n\t\tif (!this._outputDir) {\n\t\t\tthis._outputDir = this.fileService.createFolder(this.outputLocation).then(() => this.outputLocation);\n\t\t}\n\t\treturn this._outputDir;\n\t}\n\n}\n\nregisterSingleton(IOutputChannelModelService, OutputChannelModelService, InstantiationType.Delayed);\n"]}