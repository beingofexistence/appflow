{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/output/browser/outputLinkProvider.ts"],"names":[],"mappings":"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","file":"outputLinkProvider.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { ILink } from 'vs/editor/common/languages';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { OUTPUT_MODE_ID, LOG_MODE_ID } from 'vs/workbench/services/output/common/output';\nimport { MonacoWebWorker, createWebWorker } from 'vs/editor/browser/services/webWorker';\nimport { ICreateData, OutputLinkComputer } from 'vs/workbench/contrib/output/common/outputLinkComputer';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { ILanguageConfigurationService } from 'vs/editor/common/languages/languageConfigurationRegistry';\nimport { ILanguageFeaturesService } from 'vs/editor/common/services/languageFeatures';\n\nexport class OutputLinkProvider {\n\n\tprivate static readonly DISPOSE_WORKER_TIME = 3 * 60 * 1000; // dispose worker after 3 minutes of inactivity\n\n\tprivate worker?: MonacoWebWorker<OutputLinkComputer>;\n\tprivate disposeWorkerScheduler: RunOnceScheduler;\n\tprivate linkProviderRegistration: IDisposable | undefined;\n\n\tconstructor(\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@ILanguageConfigurationService private readonly languageConfigurationService: ILanguageConfigurationService,\n\t\t@ILanguageFeaturesService private readonly languageFeaturesService: ILanguageFeaturesService,\n\t) {\n\t\tthis.disposeWorkerScheduler = new RunOnceScheduler(() => this.disposeWorker(), OutputLinkProvider.DISPOSE_WORKER_TIME);\n\n\t\tthis.registerListeners();\n\t\tthis.updateLinkProviderWorker();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis.contextService.onDidChangeWorkspaceFolders(() => this.updateLinkProviderWorker());\n\t}\n\n\tprivate updateLinkProviderWorker(): void {\n\n\t\t// Setup link provider depending on folders being opened or not\n\t\tconst folders = this.contextService.getWorkspace().folders;\n\t\tif (folders.length > 0) {\n\t\t\tif (!this.linkProviderRegistration) {\n\t\t\t\tthis.linkProviderRegistration = this.languageFeaturesService.linkProvider.register([{ language: OUTPUT_MODE_ID, scheme: '*' }, { language: LOG_MODE_ID, scheme: '*' }], {\n\t\t\t\t\tprovideLinks: async model => {\n\t\t\t\t\t\tconst links = await this.provideLinks(model.uri);\n\n\t\t\t\t\t\treturn links && { links };\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\tdispose(this.linkProviderRegistration);\n\t\t\tthis.linkProviderRegistration = undefined;\n\t\t}\n\n\t\t// Dispose worker to recreate with folders on next provideLinks request\n\t\tthis.disposeWorker();\n\t\tthis.disposeWorkerScheduler.cancel();\n\t}\n\n\tprivate getOrCreateWorker(): MonacoWebWorker<OutputLinkComputer> {\n\t\tthis.disposeWorkerScheduler.schedule();\n\n\t\tif (!this.worker) {\n\t\t\tconst createData: ICreateData = {\n\t\t\t\tworkspaceFolders: this.contextService.getWorkspace().folders.map(folder => folder.uri.toString())\n\t\t\t};\n\n\t\t\tthis.worker = createWebWorker<OutputLinkComputer>(this.modelService, this.languageConfigurationService, {\n\t\t\t\tmoduleId: 'vs/workbench/contrib/output/common/outputLinkComputer',\n\t\t\t\tcreateData,\n\t\t\t\tlabel: 'outputLinkComputer'\n\t\t\t});\n\t\t}\n\n\t\treturn this.worker;\n\t}\n\n\tprivate async provideLinks(modelUri: URI): Promise<ILink[]> {\n\t\tconst linkComputer = await this.getOrCreateWorker().withSyncedResources([modelUri]);\n\n\t\treturn linkComputer.computeLinks(modelUri.toString());\n\t}\n\n\tprivate disposeWorker(): void {\n\t\tif (this.worker) {\n\t\t\tthis.worker.dispose();\n\t\t\tthis.worker = undefined;\n\t\t}\n\t}\n}\n"]}