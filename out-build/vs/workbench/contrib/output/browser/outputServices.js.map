{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/output/browser/outputServices.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAqBhG,MAAM,yBAAyB,GAAG,sBAAsB,CAAC;IAEzD,IAAM,aAAa,GAAnB,MAAM,aAAc,SAAQ,eAAG;QAQ9B,YACU,uBAAiD,EAC9B,yBAA+B,EACzC,eAAoB;YAEtC,KAAK,EAAE,CAAC;YAJC,4BAAuB,GAAvB,uBAAuB,CAA0B;YAP3D,eAAU,GAAY,KAAK,CAAC;YAY3B,IAAI,CAAC,EAAE,GAAG,uBAAuB,CAAC,EAAE,CAAC;YACrC,IAAI,CAAC,KAAK,GAAG,uBAAuB,CAAC,KAAK,CAAC;YAC3C,IAAI,CAAC,GAAG,GAAG,SAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,YAAG,EAAY,IAAI,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;YAC9D,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,CAAC,CAAS,yBAAyB,CAAC,wBAAwB,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,uBAAuB,CAAC,UAAU,CAAC,CAAC,CAAC,eAAe,CAAC,UAAU,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,gBAAgB,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,CAAC,YAAG,CAAM,CAAC,CAAC,YAAG,CAAS,EAAE,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAC;QAChU,CAAC;QAED,MAAM,CAAC,MAAc;YACpB,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC3B,CAAC;QAED,MAAM,CAAC,IAA6B,EAAE,IAAa;YAClD,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;QACrC,CAAC;QAED,KAAK;YACJ,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACpB,CAAC;QAED,OAAO,CAAC,KAAa;YACpB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC3B,CAAC;KACD,CAAA;IAnCK,aAAa;QAUhB,WAAA,gCAAI,CAAA;QACJ,WAAA,cAAG,CAAA;OAXA,aAAa,CAmClB;IAEM,IAAM,IAAI,GAAV,MAAM,IAAc,SAAQ,eAAG;QAcrC,YACkB,CAAoC,EAC9B,CAA0C,EAC9C,wBAA6B,EACnC,CAAgC,EAC1B,CAAsC,EAC1C,CAAkC,EAC7B,iBAAsB;YAE1C,KAAK,EAAE,CAAC;YAR0B,MAAC,GAAD,CAAC,CAAkB;YACb,MAAC,GAAD,CAAC,CAAwB;YAEnC,MAAC,GAAD,CAAC,CAAc;YACT,MAAC,GAAD,CAAC,CAAoB;YACzB,MAAC,GAAD,CAAC,CAAgB;YAhB1C,MAAC,GAAsC,IAAI,GAAG,EAAyB,CAAC;YAI/D,MAAC,GAAwB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAc,CAAC,CAAC;YACvE,0BAAqB,GAAkB,IAAI,CAAC,CAAC,CAAsB,KAAK,CAAC;YAejF,IAAI,CAAC,CAAC,GAA0B,IAAI,CAAC,CAAC,CAAc,GAAG,CAAC,yBAAyB,kCAA0B,EAAE,CAAC,CAAC;YAC/G,IAAI,CAAC,CAAC,GAA4B,YAAG,CAA2B,MAAM,CAAC,iBAAiB,CAAC,CAAC;YAC1F,IAAI,CAAC,CAAC,CAA0B,GAAG,CAAC,IAAI,CAAC,CAAC,CAAwB,CAAC;YACnE,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,qBAAqB,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAA0B,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YAEpG,IAAI,CAAC,CAAC,GAA+B,YAAG,CAAuB,MAAM,CAAC,iBAAiB,CAAC,CAAC;YAEzF,qDAAqD;YACrD,wBAAwB,CAAC,gCAAgC,CAAC,YAAG,EAAY,IAAI,CAAC,CAAC;YAC/E,CAAC,CAAoB,cAAc,CAAC,yBAAI,CAAe,CAAC;YAExD,yDAAyD;YACzD,MAAM,QAAQ,GAAG,cAAG,CAAM,EAAE,CAAyB,YAAG,CAAQ,cAAc,CAAC,CAAC;YAChF,KAAK,MAAM,iBAAiB,IAAI,QAAQ,CAAC,WAAW,EAAE,EAAE;gBACvD,IAAI,CAAC,CAAC,CAAoB,iBAAiB,CAAC,EAAE,CAAC,CAAC;aAChD;YACD,IAAI,CAAC,CAAC,CAAS,QAAQ,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC,EAAqB,IAAI,CAAC,CAAC,CAAC;YAE/E,iDAAiD;YACjD,IAAI,CAAC,IAAI,CAAC,CAAC,EAAc;gBACxB,MAAM,QAAQ,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;gBAC9C,IAAI,CAAC,CAAC,CAAgB,QAAQ,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;aACrG;YAED,IAAI,CAAC,CAAC,CAAS,aAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAY,yBAAyB,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,YAAG,IAAe,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE;gBACxH,IAAI,IAAI,CAAC,CAAC,EAAc;oBACvB,IAAI,CAAC,CAAC,CAAY,mBAAmB,CAAiB,YAAG,CAAY,EAAE,WAAW,CAAC,IAAI,CAAC,CAAC,EAAc,IAAI,CAAC,CAAC;iBAC7G;YACF,CAAC,CAAC,CAAC,CAAC;YAEJ,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAgB,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;QAC3E,CAAC;QAED,kBAAkB,CAAC,QAAa;YAC/B,MAAM,OAAO,GAAkB,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;YAC9D,IAAI,OAAO,EAAE;gBACZ,OAAO,OAAO,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;aACjC;YACD,OAAO,IAAI,CAAC;QACb,CAAC;QAED,KAAK,CAAC,WAAW,CAAC,EAAU,EAAE,aAAuB;YACpD,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YACpC,IAAI,IAAI,CAAC,CAAC,EAAc,EAAE,KAAK,OAAO,EAAE,EAAE,EAAE;gBAC3C,IAAI,CAAC,CAAC,CAAgB,OAAO,CAAC,CAAC;gBAC/B,IAAI,CAAC,CAAC,CAAsB,IAAI,CAAC,EAAE,CAAC,CAAC;aACrC;YACD,MAAM,UAAU,GAAG,MAAM,IAAI,CAAC,CAAC,CAAY,QAAQ,CAAiB,YAAG,EAAa,CAAC,aAAa,CAAC,CAAC;YACpG,IAAI,UAAU,IAAI,OAAO,EAAE;gBAC1B,UAAU,CAAC,WAAW,CAAC,OAAO,EAAE,CAAC,CAAC,aAAa,CAAC,CAAC;aACjD;QACF,CAAC;QAED,UAAU,CAAC,EAAU;YACpB,OAAO,IAAI,CAAC,CAAC,CAAQ,GAAG,CAAC,EAAE,CAAC,CAAC;QAC9B,CAAC;QAED,oBAAoB,CAAC,EAAU;YAC9B,OAAO,cAAG,CAAM,EAAE,CAAyB,YAAG,CAAQ,cAAc,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;QACtF,CAAC;QAED,qBAAqB;YACpB,OAAO,cAAG,CAAM,EAAE,CAAyB,YAAG,CAAQ,cAAc,CAAC,CAAC,WAAW,EAAE,CAAC;QACrF,CAAC;QAED,gBAAgB;YACf,OAAO,IAAI,CAAC,CAAC,CAAa;QAC3B,CAAC;QAEO,KAAK,CAAC,CAAC,CAAoB,SAAiB;YACnD,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAa,SAAS,CAAC,CAAC;YAC9C,IAAI,CAAC,CAAC,CAAQ,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YACtC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAgB,IAAI,CAAC,CAAC,KAA4B,SAAS,EAAE;gBACvE,IAAI,CAAC,CAAC,CAAgB,OAAO,CAAC,CAAC;gBAC/B,IAAI,CAAC,CAAC,CAAsB,IAAI,CAAC,SAAS,CAAC,CAAC;gBAC5C,MAAM,UAAU,GAAG,IAAI,CAAC,CAAC,CAAY,mBAAmB,CAAiB,YAAG,CAAY,CAAC;gBACzF,UAAU,EAAE,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;aACvC;QACF,CAAC;QAEO,CAAC,CAAa,EAAU;YAC/B,MAAM,kBAAkB,GAAkB,EAAE,CAAC;YAC7C,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAkB,EAAE,CAAC,CAAC;YAC5C,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;gBAC5B,IAAI,IAAI,CAAC,CAAC,KAAiB,OAAO,EAAE;oBACnC,MAAM,QAAQ,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;oBAC9C,MAAM,OAAO,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;oBAC9E,IAAI,OAAO,IAAI,IAAI,CAAC,CAAC,CAAY,aAAa,CAAC,YAAG,CAAY,EAAE;wBAC/D,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;qBAC7B;yBAAM;wBACN,IAAI,CAAC,CAAC,CAAgB,SAAS,CAAC,CAAC;qBACjC;iBACD;gBACD,cAAG,CAAM,EAAE,CAAyB,YAAG,CAAQ,cAAc,CAAC,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;gBACjF,IAAA,eAAG,EAAK,kBAAkB,CAAC,CAAC;YAC7B,CAAC,EAAE,kBAAkB,CAAC,CAAC;YAEvB,OAAO,OAAO,CAAC;QAChB,CAAC;QAEO,CAAC,CAAkB,EAAU;YACpC,MAAM,WAAW,GAAG,cAAG,CAAM,EAAE,CAAyB,YAAG,CAAQ,cAAc,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YAClG,IAAI,CAAC,WAAW,EAAE;gBACjB,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,YAAY,EAAE,yBAAyB,CAAC,CAAC;gBAC/D,MAAM,IAAI,KAAK,CAAC,YAAY,EAAE,yBAAyB,CAAC,CAAC;aACzD;YACD,OAAO,IAAI,CAAC,CAAC,CAAoB,cAAc,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;QAC7E,CAAC;QAEO,CAAC,CAAgB,OAAkC;YAC1D,IAAI,CAAC,CAAC,GAAe,OAAO,CAAC;YAC7B,IAAI,CAAC,CAAC,CAA6B,GAAG,CAAC,CAAC,CAAC,OAAO,EAAE,uBAAuB,EAAE,IAAI,IAAI,OAAO,EAAE,uBAAuB,EAAE,GAAG,CAAC,CAAC;YAE1H,IAAI,IAAI,CAAC,CAAC,EAAc;gBACvB,IAAI,CAAC,CAAC,CAAc,KAAK,CAAC,yBAAyB,EAAE,IAAI,CAAC,CAAC,CAAa,EAAE,gEAAgD,CAAC;aAC3H;iBAAM;gBACN,IAAI,CAAC,CAAC,CAAc,MAAM,CAAC,yBAAyB,iCAAyB,CAAC;aAC9E;QACF,CAAC;KACD,CAAA;IA/IY,oBAAI;mBAAJ,IAAI;QAed,WAAA,aAAG,CAAA;QACH,WAAA,mBAAG,CAAA;QACH,WAAA,qBAAG,CAAA;QACH,WAAA,SAAG,CAAA;QACH,WAAA,eAAG,CAAA;QACH,WAAA,WAAG,CAAA;QACH,WAAA,gBAAG,CAAA;OArBO,IAAI,CA+IhB;IAEM,IAAM,IAAI,GAAV,MAAM,IAAI;QAIhB,YACiB,CAAmC,EACvB,CAAgD,EAC1D,CAAqC;YAFtB,MAAC,GAAD,CAAC,CAAiB;YACN,MAAC,GAAD,CAAC,CAA8B;YACzC,MAAC,GAAD,CAAC,CAAmB;YALhD,MAAC,GAAiD,IAAI,GAAG,EAA+B,CAAC;QAOjG,CAAC;QAED,kBAAkB,CAAC,QAAa;YAC/B,IAAI,QAAQ,CAAC,MAAM,KAAK,YAAG,EAAS;gBACnC,MAAM,YAAY,GAAG,IAAI,CAAC,CAAC,CAAe,QAAQ,CAAC,CAAC;gBACpD,IAAI,YAAY,EAAE;oBACjB,OAAO,YAAY,CAAC,SAAS,EAAE,CAAC;iBAChC;aACD;YACD,OAAO,IAAI,CAAC;QACb,CAAC;QAEO,CAAC,CAAe,QAAa;YACpC,MAAM,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC;YAChC,IAAI,YAAY,GAAG,IAAI,CAAC,CAAC,CAAa,GAAG,CAAC,SAAS,CAAC,CAAC;YACrD,IAAI,CAAC,YAAY,EAAE;gBAClB,MAAM,kBAAkB,GAAkB,EAAE,CAAC;gBAC7C,MAAM,uBAAuB,GAAG,IAAI,CAAC,CAAC,CAAa,qBAAqB,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;gBACnH,IAAI,uBAAuB,IAAI,uBAAuB,CAAC,IAAI,EAAE;oBAC5D,YAAY,GAAG,IAAI,CAAC,CAAC,CAAyB,wBAAwB,CAAC,SAAS,EAAE,QAAQ,EAAE,uBAAuB,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAe,UAAU,CAAC,uBAAuB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAe,gBAAgB,CAAC,uBAAuB,CAAC,GAAG,CAAC,CAAC,CAAC,YAAG,CAAM,CAAC,CAAC,YAAG,CAAS,EAAE,uBAAuB,CAAC,IAAI,CAAC,CAAC;oBAClU,YAAY,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,IAAA,eAAG,EAAK,kBAAkB,CAAC,EAAE,kBAAkB,CAAC,CAAC;oBAC9E,IAAI,CAAC,CAAC,CAAa,GAAG,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;iBAChD;aACD;YACD,OAAO,YAAY,CAAC;QACrB,CAAC;KACD,CAAA;IAnCY,oBAAI;mBAAJ,IAAI;QAKd,WAAA,YAAG,CAAA;QACH,WAAA,gCAAI,CAAA;QACJ,WAAA,cAAG,CAAA;OAPO,IAAI,CAmChB","file":"outputServices.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { URI } from 'vs/base/common/uri';\nimport { IDisposable, dispose, Disposable } from 'vs/base/common/lifecycle';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IOutputChannel, IOutputService, OUTPUT_VIEW_ID, OUTPUT_SCHEME, LOG_SCHEME, LOG_MIME, OUTPUT_MIME, OutputChannelUpdateMode, IOutputChannelDescriptor, Extensions, IOutputChannelRegistry, ACTIVE_OUTPUT_CHANNEL_CONTEXT, CONTEXT_ACTIVE_LOG_OUTPUT } from 'vs/workbench/services/output/common/output';\nimport { OutputLinkProvider } from 'vs/workbench/contrib/output/browser/outputLinkProvider';\nimport { ITextModelService, ITextModelContentProvider } from 'vs/editor/common/services/resolverService';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IOutputChannelModel } from 'vs/workbench/contrib/output/common/outputChannelModel';\nimport { IViewsService } from 'vs/workbench/common/views';\nimport { OutputViewPane } from 'vs/workbench/contrib/output/browser/outputView';\nimport { IOutputChannelModelService } from 'vs/workbench/contrib/output/common/outputChannelModelService';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\n\nconst OUTPUT_ACTIVE_CHANNEL_KEY = 'output.activechannel';\n\nclass OutputChannel extends Disposable implements IOutputChannel {\n\n\tscrollLock: boolean = false;\n\treadonly model: IOutputChannelModel;\n\treadonly id: string;\n\treadonly label: string;\n\treadonly uri: URI;\n\n\tconstructor(\n\t\treadonly outputChannelDescriptor: IOutputChannelDescriptor,\n\t\t@IOutputChannelModelService outputChannelModelService: IOutputChannelModelService,\n\t\t@ILanguageService languageService: ILanguageService,\n\t) {\n\t\tsuper();\n\t\tthis.id = outputChannelDescriptor.id;\n\t\tthis.label = outputChannelDescriptor.label;\n\t\tthis.uri = URI.from({ scheme: OUTPUT_SCHEME, path: this.id });\n\t\tthis.model = this._register(outputChannelModelService.createOutputChannelModel(this.id, this.uri, outputChannelDescriptor.languageId ? languageService.createById(outputChannelDescriptor.languageId) : languageService.createByMimeType(outputChannelDescriptor.log ? LOG_MIME : OUTPUT_MIME), outputChannelDescriptor.file));\n\t}\n\n\tappend(output: string): void {\n\t\tthis.model.append(output);\n\t}\n\n\tupdate(mode: OutputChannelUpdateMode, till?: number): void {\n\t\tthis.model.update(mode, till, true);\n\t}\n\n\tclear(): void {\n\t\tthis.model.clear();\n\t}\n\n\treplace(value: string): void {\n\t\tthis.model.replace(value);\n\t}\n}\n\nexport class OutputService extends Disposable implements IOutputService, ITextModelContentProvider {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate channels: Map<string, OutputChannel> = new Map<string, OutputChannel>();\n\tprivate activeChannelIdInStorage: string;\n\tprivate activeChannel?: OutputChannel;\n\n\tprivate readonly _onActiveOutputChannel = this._register(new Emitter<string>());\n\treadonly onActiveOutputChannel: Event<string> = this._onActiveOutputChannel.event;\n\n\tprivate readonly activeOutputChannelContext: IContextKey<string>;\n\tprivate readonly activeLogOutputChannelContext: IContextKey<boolean>;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITextModelService textModelResolverService: ITextModelService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t) {\n\t\tsuper();\n\t\tthis.activeChannelIdInStorage = this.storageService.get(OUTPUT_ACTIVE_CHANNEL_KEY, StorageScope.WORKSPACE, '');\n\t\tthis.activeOutputChannelContext = ACTIVE_OUTPUT_CHANNEL_CONTEXT.bindTo(contextKeyService);\n\t\tthis.activeOutputChannelContext.set(this.activeChannelIdInStorage);\n\t\tthis._register(this.onActiveOutputChannel(channel => this.activeOutputChannelContext.set(channel)));\n\n\t\tthis.activeLogOutputChannelContext = CONTEXT_ACTIVE_LOG_OUTPUT.bindTo(contextKeyService);\n\n\t\t// Register as text model content provider for output\n\t\ttextModelResolverService.registerTextModelContentProvider(OUTPUT_SCHEME, this);\n\t\tinstantiationService.createInstance(OutputLinkProvider);\n\n\t\t// Create output channels for already registered channels\n\t\tconst registry = Registry.as<IOutputChannelRegistry>(Extensions.OutputChannels);\n\t\tfor (const channelIdentifier of registry.getChannels()) {\n\t\t\tthis.onDidRegisterChannel(channelIdentifier.id);\n\t\t}\n\t\tthis._register(registry.onDidRegisterChannel(this.onDidRegisterChannel, this));\n\n\t\t// Set active channel to first channel if not set\n\t\tif (!this.activeChannel) {\n\t\t\tconst channels = this.getChannelDescriptors();\n\t\t\tthis.setActiveChannel(channels && channels.length > 0 ? this.getChannel(channels[0].id) : undefined);\n\t\t}\n\n\t\tthis._register(Event.filter(this.viewsService.onDidChangeViewVisibility, e => e.id === OUTPUT_VIEW_ID && e.visible)(() => {\n\t\t\tif (this.activeChannel) {\n\t\t\t\tthis.viewsService.getActiveViewWithId<OutputViewPane>(OUTPUT_VIEW_ID)?.showChannel(this.activeChannel, true);\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this.lifecycleService.onDidShutdown(() => this.dispose()));\n\t}\n\n\tprovideTextContent(resource: URI): Promise<ITextModel> | null {\n\t\tconst channel = <OutputChannel>this.getChannel(resource.path);\n\t\tif (channel) {\n\t\t\treturn channel.model.loadModel();\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync showChannel(id: string, preserveFocus?: boolean): Promise<void> {\n\t\tconst channel = this.getChannel(id);\n\t\tif (this.activeChannel?.id !== channel?.id) {\n\t\t\tthis.setActiveChannel(channel);\n\t\t\tthis._onActiveOutputChannel.fire(id);\n\t\t}\n\t\tconst outputView = await this.viewsService.openView<OutputViewPane>(OUTPUT_VIEW_ID, !preserveFocus);\n\t\tif (outputView && channel) {\n\t\t\toutputView.showChannel(channel, !!preserveFocus);\n\t\t}\n\t}\n\n\tgetChannel(id: string): OutputChannel | undefined {\n\t\treturn this.channels.get(id);\n\t}\n\n\tgetChannelDescriptor(id: string): IOutputChannelDescriptor | undefined {\n\t\treturn Registry.as<IOutputChannelRegistry>(Extensions.OutputChannels).getChannel(id);\n\t}\n\n\tgetChannelDescriptors(): IOutputChannelDescriptor[] {\n\t\treturn Registry.as<IOutputChannelRegistry>(Extensions.OutputChannels).getChannels();\n\t}\n\n\tgetActiveChannel(): IOutputChannel | undefined {\n\t\treturn this.activeChannel;\n\t}\n\n\tprivate async onDidRegisterChannel(channelId: string): Promise<void> {\n\t\tconst channel = this.createChannel(channelId);\n\t\tthis.channels.set(channelId, channel);\n\t\tif (!this.activeChannel || this.activeChannelIdInStorage === channelId) {\n\t\t\tthis.setActiveChannel(channel);\n\t\t\tthis._onActiveOutputChannel.fire(channelId);\n\t\t\tconst outputView = this.viewsService.getActiveViewWithId<OutputViewPane>(OUTPUT_VIEW_ID);\n\t\t\toutputView?.showChannel(channel, true);\n\t\t}\n\t}\n\n\tprivate createChannel(id: string): OutputChannel {\n\t\tconst channelDisposables: IDisposable[] = [];\n\t\tconst channel = this.instantiateChannel(id);\n\t\tchannel.model.onDispose(() => {\n\t\t\tif (this.activeChannel === channel) {\n\t\t\t\tconst channels = this.getChannelDescriptors();\n\t\t\t\tconst channel = channels.length ? this.getChannel(channels[0].id) : undefined;\n\t\t\t\tif (channel && this.viewsService.isViewVisible(OUTPUT_VIEW_ID)) {\n\t\t\t\t\tthis.showChannel(channel.id);\n\t\t\t\t} else {\n\t\t\t\t\tthis.setActiveChannel(undefined);\n\t\t\t\t}\n\t\t\t}\n\t\t\tRegistry.as<IOutputChannelRegistry>(Extensions.OutputChannels).removeChannel(id);\n\t\t\tdispose(channelDisposables);\n\t\t}, channelDisposables);\n\n\t\treturn channel;\n\t}\n\n\tprivate instantiateChannel(id: string): OutputChannel {\n\t\tconst channelData = Registry.as<IOutputChannelRegistry>(Extensions.OutputChannels).getChannel(id);\n\t\tif (!channelData) {\n\t\t\tthis.logService.error(`Channel '${id}' is not registered yet`);\n\t\t\tthrow new Error(`Channel '${id}' is not registered yet`);\n\t\t}\n\t\treturn this.instantiationService.createInstance(OutputChannel, channelData);\n\t}\n\n\tprivate setActiveChannel(channel: OutputChannel | undefined): void {\n\t\tthis.activeChannel = channel;\n\t\tthis.activeLogOutputChannelContext.set(!!channel?.outputChannelDescriptor?.file && channel?.outputChannelDescriptor?.log);\n\n\t\tif (this.activeChannel) {\n\t\t\tthis.storageService.store(OUTPUT_ACTIVE_CHANNEL_KEY, this.activeChannel.id, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis.storageService.remove(OUTPUT_ACTIVE_CHANNEL_KEY, StorageScope.WORKSPACE);\n\t\t}\n\t}\n}\n\nexport class LogContentProvider {\n\n\tprivate channelModels: Map<string, IOutputChannelModel> = new Map<string, IOutputChannelModel>();\n\n\tconstructor(\n\t\t@IOutputService private readonly outputService: IOutputService,\n\t\t@IOutputChannelModelService private readonly outputChannelModelService: IOutputChannelModelService,\n\t\t@ILanguageService private readonly languageService: ILanguageService\n\t) {\n\t}\n\n\tprovideTextContent(resource: URI): Promise<ITextModel> | null {\n\t\tif (resource.scheme === LOG_SCHEME) {\n\t\t\tconst channelModel = this.getChannelModel(resource);\n\t\t\tif (channelModel) {\n\t\t\t\treturn channelModel.loadModel();\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate getChannelModel(resource: URI): IOutputChannelModel | undefined {\n\t\tconst channelId = resource.path;\n\t\tlet channelModel = this.channelModels.get(channelId);\n\t\tif (!channelModel) {\n\t\t\tconst channelDisposables: IDisposable[] = [];\n\t\t\tconst outputChannelDescriptor = this.outputService.getChannelDescriptors().filter(({ id }) => id === channelId)[0];\n\t\t\tif (outputChannelDescriptor && outputChannelDescriptor.file) {\n\t\t\t\tchannelModel = this.outputChannelModelService.createOutputChannelModel(channelId, resource, outputChannelDescriptor.languageId ? this.languageService.createById(outputChannelDescriptor.languageId) : this.languageService.createByMimeType(outputChannelDescriptor.log ? LOG_MIME : OUTPUT_MIME), outputChannelDescriptor.file);\n\t\t\t\tchannelModel.onDispose(() => dispose(channelDisposables), channelDisposables);\n\t\t\t\tthis.channelModels.set(channelId, channelModel);\n\t\t\t}\n\t\t}\n\t\treturn channelModel;\n\t}\n}\n"]}