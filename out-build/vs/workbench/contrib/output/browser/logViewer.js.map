{"version":3,"sources":["vs/workbench/contrib/output/browser/logViewer.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;;IAsBzF,IAAM,IAAI,GAAV,MAAM,IAAe,SAAQ,8BAAI;;iBAEd,OAAE,GAAG,+BAAH,AAAkC,CAAC;QAE9D,IAAa,MAAM;YAClB,OAAO,MAAI,CAAW,EAAE,CAAC;QAC1B,CAAC;QAED,YACC,uBAAqD,EAClC,wBAA6B,EAC9B,eAAoB,EACtB,aAAkB,EACpB,WAAgB,EACf,YAAiB,EACJ,yBAA8B;YAE1D,KAAK,CACJ,SAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,YAAG,EAAS,IAAI,EAAE,uBAAuB,CAAC,EAAE,EAAE,CAAC,EAClE,IAAA,UAAG,EAAM,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,EAC3C,IAAA,UAAG,EAAK,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,EAC1C,SAAS,EACT,SAAS,EACT,wBAAwB,EACxB,eAAe,EACf,aAAa,EACb,WAAW,EACX,YAAY,EACZ,yBAAyB,CACzB,CAAC;QACH,CAAC;;IA9BW,oBAAI;mBAAJ,IAAI;QAUd,WAAA,qBAAG,CAAA;QACH,WAAA,eAAG,CAAA;QACH,WAAA,mBAAG,CAAA;QACH,WAAA,WAAG,CAAA;QACH,WAAA,WAAG,CAAA;QACH,WAAA,+BAAG,CAAA;OAfO,IAAI,CA+BhB;IAEM,IAAM,IAAI,GAAV,MAAM,IAAU,SAAQ,yBAAI;;iBAElB,yBAAoB,GAAG,6BAAH,AAAgC,CAAC;QAErE,YACoB,gBAAqB,EACjB,oBAAyB,EAC/B,cAAmB,EACD,gCAAqC,EACzD,YAAiB,EACV,kBAAuB,EAC7B,aAAkB,EACpB,WAAgB;YAE9B,KAAK,CAAC,MAAI,CAAM,oBAAoB,EAAE,gBAAgB,EAAE,oBAAoB,EAAE,cAAc,EAAE,gCAAgC,EAAE,YAAY,EAAE,kBAAkB,EAAE,aAAa,EAAE,WAAW,CAAC,CAAC;QAC/L,CAAC;QAEkB,EAAE;YACpB,MAAM,OAAO,GAAG,KAAK,CAAC,EAAE,EAAyB,CAAC;YAClD,OAAO,CAAC,QAAQ,GAAG,KAAK,CAAC,CAAC,8BAA8B;YACxD,OAAO,CAAC,OAAO,GAAG,KAAK,CAAC;YACxB,OAAO,CAAC,oBAAoB,GAAG,KAAK,CAAC;YACrC,OAAO,CAAC,2BAA2B,GAAG,UAAU,CAAC;YACjD,OAAO,OAAO,CAAC;QAChB,CAAC;QAES,CAAC;YACV,OAAO,IAAA,cAAQ,EAAC,CAAoB,EAAE,IAAY,CAAC,CAAC;QACrD,CAAC;;IA5BW,oBAAI;mBAAJ,IAAI;QAKd,WAAA,eAAG,CAAA;QACH,WAAA,mBAAG,CAAA;QACH,WAAA,aAAG,CAAA;QACH,WAAA,+BAAG,CAAA;QACH,WAAA,kBAAG,CAAA;QACH,WAAA,yBAAG,CAAA;QACH,WAAA,mBAAG,CAAA;QACH,WAAA,WAAG,CAAA;OAZO,IAAI,CA6BhB","file":"logViewer.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { dirname, basename } from 'vs/base/common/path';\nimport { IEditorOptions } from 'vs/editor/common/config/editorOptions';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfiguration';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { AbstractTextResourceEditor } from 'vs/workbench/browser/parts/editor/textResourceEditor';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { TextResourceEditorInput } from 'vs/workbench/common/editor/textResourceEditorInput';\nimport { URI } from 'vs/base/common/uri';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { LOG_SCHEME, IFileOutputChannelDescriptor } from 'vs/workbench/services/output/common/output';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { IFilesConfigurationService } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\n\nexport class LogViewerInput extends TextResourceEditorInput {\n\n\tstatic override readonly ID = 'workbench.editorinputs.output';\n\n\toverride get typeId(): string {\n\t\treturn LogViewerInput.ID;\n\t}\n\n\tconstructor(\n\t\toutputChannelDescriptor: IFileOutputChannelDescriptor,\n\t\t@ITextModelService textModelResolverService: ITextModelService,\n\t\t@ITextFileService textFileService: ITextFileService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IFileService fileService: IFileService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@IFilesConfigurationService filesConfigurationService: IFilesConfigurationService\n\t) {\n\t\tsuper(\n\t\t\tURI.from({ scheme: LOG_SCHEME, path: outputChannelDescriptor.id }),\n\t\t\tbasename(outputChannelDescriptor.file.path),\n\t\t\tdirname(outputChannelDescriptor.file.path),\n\t\t\tundefined,\n\t\t\tundefined,\n\t\t\ttextModelResolverService,\n\t\t\ttextFileService,\n\t\t\teditorService,\n\t\t\tfileService,\n\t\t\tlabelService,\n\t\t\tfilesConfigurationService\n\t\t);\n\t}\n}\n\nexport class LogViewer extends AbstractTextResourceEditor {\n\n\tstatic readonly LOG_VIEWER_EDITOR_ID = 'workbench.editors.logViewer';\n\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IFileService fileService: IFileService\n\t) {\n\t\tsuper(LogViewer.LOG_VIEWER_EDITOR_ID, telemetryService, instantiationService, storageService, textResourceConfigurationService, themeService, editorGroupService, editorService, fileService);\n\t}\n\n\tprotected override getConfigurationOverrides(): IEditorOptions {\n\t\tconst options = super.getConfigurationOverrides();\n\t\toptions.wordWrap = 'off'; // all log viewers do not wrap\n\t\toptions.folding = false;\n\t\toptions.scrollBeyondLastLine = false;\n\t\toptions.renderValidationDecorations = 'editable';\n\t\treturn options;\n\t}\n\n\tprotected getAriaLabel(): string {\n\t\treturn localize('logViewerAriaLabel', \"Log viewer\");\n\t}\n}\n"]}