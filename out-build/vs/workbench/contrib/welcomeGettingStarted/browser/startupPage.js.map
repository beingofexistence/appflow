{"version":3,"sources":["vs/workbench/contrib/welcomeGettingStarted/browser/startupPage.ts"],"names":[],"mappings":"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","file":"startupPage.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport * as arrays from 'vs/base/common/arrays';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { IWorkspaceContextService, UNKNOWN_EMPTY_WINDOW_WORKSPACE, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IWorkingCopyBackupService } from 'vs/workbench/services/workingCopy/common/workingCopyBackup';\nimport { ILifecycleService, StartupKind } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { joinPath } from 'vs/base/common/resources';\nimport { IEditorOptions } from 'vs/platform/editor/common/editor';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { GettingStartedEditorOptions, GettingStartedInput, gettingStartedInputTypeId } from 'vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedInput';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { getTelemetryLevel } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { TelemetryLevel } from 'vs/platform/telemetry/common/telemetry';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { localize } from 'vs/nls';\nimport { IEditorResolverService, RegisteredEditorPriority } from 'vs/workbench/services/editor/common/editorResolverService';\n\nexport const restoreWalkthroughsConfigurationKey = 'workbench.welcomePage.restorableWalkthroughs';\nexport type RestoreWalkthroughsConfigurationValue = { folder: string; category?: string; step?: string };\n\nconst configurationKey = 'workbench.startupEditor';\nconst oldConfigurationKey = 'workbench.welcome.enabled';\nconst telemetryOptOutStorageKey = 'workbench.telemetryOptOutShown';\n\nexport class StartupPageContribution implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IWorkingCopyBackupService private readonly workingCopyBackupService: IWorkingCopyBackupService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@IWorkbenchLayoutService private readonly layoutService: IWorkbenchLayoutService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@ICommandService private readonly commandService: ICommandService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IEditorResolverService editorResolverService: IEditorResolverService\n\t) {\n\t\teditorResolverService.registerEditor(\n\t\t\t`${GettingStartedInput.RESOURCE.scheme}:/**`,\n\t\t\t{\n\t\t\t\tid: GettingStartedInput.ID,\n\t\t\t\tlabel: localize('welcome.displayName', \"Welcome Page\"),\n\t\t\t\tpriority: RegisteredEditorPriority.builtin,\n\t\t\t},\n\t\t\t{\n\t\t\t\tsinglePerResource: false,\n\t\t\t\tcanSupportResource: uri => uri.scheme === GettingStartedInput.RESOURCE.scheme,\n\t\t\t},\n\t\t\t{\n\t\t\t\tcreateEditorInput: ({ resource, options }) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\teditor: this.instantiationService.createInstance(GettingStartedInput, options as GettingStartedEditorOptions),\n\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t...options,\n\t\t\t\t\t\t\tpinned: false\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\tthis.run().then(undefined, onUnexpectedError);\n\t}\n\n\tprivate async run() {\n\n\t\t// Always open Welcome page for first-launch, no matter what is open or which startupEditor is set.\n\t\tif (\n\t\t\tthis.productService.enableTelemetry\n\t\t\t&& this.productService.showTelemetryOptOut\n\t\t\t&& getTelemetryLevel(this.configurationService) !== TelemetryLevel.NONE\n\t\t\t&& !this.environmentService.skipWelcome\n\t\t\t&& !this.storageService.get(telemetryOptOutStorageKey, StorageScope.PROFILE)\n\t\t) {\n\t\t\tthis.storageService.store(telemetryOptOutStorageKey, true, StorageScope.PROFILE, StorageTarget.USER);\n\t\t\tawait this.openGettingStarted(true);\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.tryOpenWalkthroughForFolder()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst enabled = isStartupPageEnabled(this.configurationService, this.contextService, this.environmentService);\n\t\tif (enabled && this.lifecycleService.startupKind !== StartupKind.ReloadedWindow) {\n\t\t\tconst hasBackups = await this.workingCopyBackupService.hasBackups();\n\t\t\tif (hasBackups) { return; }\n\n\t\t\t// Open the welcome even if we opened a set of default editors\n\t\t\tif (!this.editorService.activeEditor || this.layoutService.openedDefaultEditors) {\n\t\t\t\tconst startupEditorSetting = this.configurationService.inspect<string>(configurationKey);\n\n\n\t\t\t\tconst isStartupEditorReadme = startupEditorSetting.value === 'readme';\n\t\t\t\tconst isStartupEditorUserReadme = startupEditorSetting.userValue === 'readme';\n\t\t\t\tconst isStartupEditorDefaultReadme = startupEditorSetting.defaultValue === 'readme';\n\n\t\t\t\t// 'readme' should not be set in workspace settings to prevent tracking,\n\t\t\t\t// but it can be set as a default (as in codespaces or from configurationDefaults) or a user setting\n\t\t\t\tif (isStartupEditorReadme && (!isStartupEditorUserReadme || !isStartupEditorDefaultReadme)) {\n\t\t\t\t\tthis.logService.warn(`Warning: 'workbench.startupEditor: readme' setting ignored due to being set somewhere other than user or default settings (user=${startupEditorSetting.userValue}, default=${startupEditorSetting.defaultValue})`);\n\t\t\t\t}\n\n\t\t\t\tconst openWithReadme = isStartupEditorReadme && (isStartupEditorUserReadme || isStartupEditorDefaultReadme);\n\t\t\t\tif (openWithReadme) {\n\t\t\t\t\tawait this.openReadme();\n\t\t\t\t} else if (startupEditorSetting.value === 'welcomePage' || startupEditorSetting.value === 'welcomePageInEmptyWorkbench') {\n\t\t\t\t\tawait this.openGettingStarted();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate tryOpenWalkthroughForFolder(): boolean {\n\t\tconst toRestore = this.storageService.get(restoreWalkthroughsConfigurationKey, StorageScope.PROFILE);\n\t\tif (!toRestore) {\n\t\t\treturn false;\n\t\t}\n\t\telse {\n\t\t\tconst restoreData: RestoreWalkthroughsConfigurationValue = JSON.parse(toRestore);\n\t\t\tconst currentWorkspace = this.contextService.getWorkspace();\n\t\t\tif (restoreData.folder === UNKNOWN_EMPTY_WINDOW_WORKSPACE.id || restoreData.folder === currentWorkspace.folders[0].uri.toString()) {\n\t\t\t\tthis.editorService.openEditor({\n\t\t\t\t\tresource: GettingStartedInput.RESOURCE,\n\t\t\t\t\toptions: <GettingStartedEditorOptions>{ selectedCategory: restoreData.category, selectedStep: restoreData.step, pinned: false },\n\t\t\t\t});\n\t\t\t\tthis.storageService.remove(restoreWalkthroughsConfigurationKey, StorageScope.PROFILE);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate async openReadme() {\n\t\tconst readmes = arrays.coalesce(\n\t\t\tawait Promise.all(this.contextService.getWorkspace().folders.map(\n\t\t\t\tasync folder => {\n\t\t\t\t\tconst folderUri = folder.uri;\n\t\t\t\t\tconst folderStat = await this.fileService.resolve(folderUri).catch(onUnexpectedError);\n\t\t\t\t\tconst files = folderStat?.children ? folderStat.children.map(child => child.name).sort() : [];\n\t\t\t\t\tconst file = files.find(file => file.toLowerCase() === 'readme.md') || files.find(file => file.toLowerCase().startsWith('readme'));\n\t\t\t\t\tif (file) { return joinPath(folderUri, file); }\n\t\t\t\t\telse { return undefined; }\n\t\t\t\t})));\n\n\t\tif (!this.editorService.activeEditor) {\n\t\t\tif (readmes.length) {\n\t\t\t\tconst isMarkDown = (readme: URI) => readme.path.toLowerCase().endsWith('.md');\n\t\t\t\tawait Promise.all([\n\t\t\t\t\tthis.commandService.executeCommand('markdown.showPreview', null, readmes.filter(isMarkDown), { locked: true }).catch(error => {\n\t\t\t\t\t\tthis.notificationService.error(localize('startupPage.markdownPreviewError', 'Could not open markdown preview: {0}.\\n\\nPlease make sure the markdown extension is enabled.', error.message));\n\t\t\t\t\t}),\n\t\t\t\t\tthis.editorService.openEditors(readmes.filter(readme => !isMarkDown(readme)).map(readme => ({ resource: readme }))),\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\t// If no readme is found, default to showing the welcome page.\n\t\t\t\tawait this.openGettingStarted();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async openGettingStarted(showTelemetryNotice?: boolean) {\n\t\tconst startupEditorTypeID = gettingStartedInputTypeId;\n\t\tconst editor = this.editorService.activeEditor;\n\n\t\t// Ensure that the welcome editor won't get opened more than once\n\t\tif (editor?.typeId === startupEditorTypeID || this.editorService.editors.some(e => e.typeId === startupEditorTypeID)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst options: IEditorOptions = editor ? { pinned: false, index: 0 } : { pinned: false };\n\t\tif (startupEditorTypeID === gettingStartedInputTypeId) {\n\t\t\tthis.editorService.openEditor({\n\t\t\t\tresource: GettingStartedInput.RESOURCE,\n\t\t\t\toptions: <GettingStartedEditorOptions>{ showTelemetryNotice, ...options },\n\t\t\t});\n\t\t}\n\t}\n}\n\nfunction isStartupPageEnabled(configurationService: IConfigurationService, contextService: IWorkspaceContextService, environmentService: IWorkbenchEnvironmentService) {\n\tif (environmentService.skipWelcome) {\n\t\treturn false;\n\t}\n\n\tconst startupEditor = configurationService.inspect<string>(configurationKey);\n\tif (!startupEditor.userValue && !startupEditor.workspaceValue) {\n\t\tconst welcomeEnabled = configurationService.inspect(oldConfigurationKey);\n\t\tif (welcomeEnabled.value !== undefined && welcomeEnabled.value !== null) {\n\t\t\treturn welcomeEnabled.value;\n\t\t}\n\t}\n\n\treturn startupEditor.value === 'welcomePage'\n\t\t|| startupEditor.value === 'readme' && (startupEditor.userValue === 'readme' || startupEditor.defaultValue === 'readme')\n\t\t|| (contextService.getWorkbenchState() === WorkbenchState.EMPTY && startupEditor.value === 'welcomePageInEmptyWorkbench');\n}\n"]}