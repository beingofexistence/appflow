{"version":3,"sources":["vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted.contribution.ts"],"names":[],"mappings":"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","file":"gettingStarted.contribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { GettingStartedInputSerializer, GettingStartedPage, inWelcomeContext } from 'vs/workbench/contrib/welcomeGettingStarted/browser/gettingStarted';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { EditorExtensions, IEditorFactoryRegistry } from 'vs/workbench/common/editor';\nimport { MenuId, registerAction2, Action2 } from 'vs/platform/actions/common/actions';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { ContextKeyExpr, IContextKeyService, RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { KeyCode } from 'vs/base/common/keyCodes';\nimport { EditorPaneDescriptor, IEditorPaneRegistry } from 'vs/workbench/browser/editor';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { IWalkthroughsService } from 'vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedService';\nimport { GettingStartedEditorOptions, GettingStartedInput } from 'vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedInput';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { ConfigurationScope, Extensions as ConfigurationExtensions, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport { workbenchConfigurationNodeBase } from 'vs/workbench/common/configuration';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { CommandsRegistry, ICommandService } from 'vs/platform/commands/common/commands';\nimport { IQuickInputService, IQuickPickItem } from 'vs/platform/quickinput/common/quickInput';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { isLinux, isMacintosh, isWindows, OperatingSystem as OS } from 'vs/base/common/platform';\nimport { IExtensionManagementServerService } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { StartupPageContribution, } from 'vs/workbench/contrib/welcomeGettingStarted/browser/startupPage';\nimport { ExtensionsInput } from 'vs/workbench/contrib/extensions/common/extensionsInput';\nimport { Categories } from 'vs/platform/action/common/actionCommonCategories';\n\nexport * as icons from 'vs/workbench/contrib/welcomeGettingStarted/browser/gettingStartedIcons';\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.openWalkthrough',\n\t\t\ttitle: { value: localize('miWelcome', \"Welcome\"), original: 'Welcome' },\n\t\t\tcategory: Categories.Help,\n\t\t\tf1: true,\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.MenubarHelpMenu,\n\t\t\t\tgroup: '1_welcome',\n\t\t\t\torder: 1,\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic run(\n\t\taccessor: ServicesAccessor,\n\t\twalkthroughID: string | { category: string; step: string } | undefined,\n\t\ttoSide: boolean | undefined\n\t) {\n\t\tconst editorGroupsService = accessor.get(IEditorGroupsService);\n\t\tconst instantiationService = accessor.get(IInstantiationService);\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst commandService = accessor.get(ICommandService);\n\n\t\tif (walkthroughID) {\n\t\t\tconst selectedCategory = typeof walkthroughID === 'string' ? walkthroughID : walkthroughID.category;\n\t\t\tconst selectedStep = typeof walkthroughID === 'string' ? undefined : walkthroughID.step;\n\n\t\t\t// Try first to select the walkthrough on an active welcome page with no selected walkthrough\n\t\t\tfor (const group of editorGroupsService.groups) {\n\t\t\t\tif (group.activeEditor instanceof GettingStartedInput) {\n\t\t\t\t\t(group.activeEditorPane as GettingStartedPage).makeCategoryVisibleWhenAvailable(selectedCategory, selectedStep);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Otherwise, try to find a welcome input somewhere with no selected walkthrough, and open it to this one.\n\t\t\tconst result = editorService.findEditors({ typeId: GettingStartedInput.ID, editorId: undefined, resource: GettingStartedInput.RESOURCE });\n\t\t\tfor (const { editor, groupId } of result) {\n\t\t\t\tif (editor instanceof GettingStartedInput) {\n\t\t\t\t\tconst group = editorGroupsService.getGroup(groupId);\n\t\t\t\t\tif (!editor.selectedCategory && group) {\n\t\t\t\t\t\teditor.selectedCategory = selectedCategory;\n\t\t\t\t\t\teditor.selectedStep = selectedStep;\n\t\t\t\t\t\tgroup.openEditor(editor, { revealIfOpened: true });\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst activeEditor = editorService.activeEditor;\n\t\t\t// If the walkthrough is already open just reveal the step\n\t\t\tif (selectedStep && activeEditor instanceof GettingStartedInput && activeEditor.selectedCategory === selectedCategory) {\n\t\t\t\tcommandService.executeCommand('walkthroughs.selectStep', selectedStep);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If it's the extension install page then lets replace it with the getting started page\n\t\t\tif (activeEditor instanceof ExtensionsInput) {\n\t\t\t\tconst activeGroup = editorGroupsService.activeGroup;\n\t\t\t\tactiveGroup.replaceEditors([{\n\t\t\t\t\teditor: activeEditor,\n\t\t\t\t\treplacement: instantiationService.createInstance(GettingStartedInput, { selectedCategory: selectedCategory, selectedStep: selectedStep })\n\t\t\t\t}]);\n\t\t\t} else {\n\t\t\t\t// else open respecting toSide\n\t\t\t\teditorService.openEditor({\n\t\t\t\t\tresource: GettingStartedInput.RESOURCE,\n\t\t\t\t\toptions: <GettingStartedEditorOptions>{ selectedCategory: selectedCategory, selectedStep: selectedStep, preserveFocus: toSide ?? false }\n\t\t\t\t}).then((editor) => {\n\t\t\t\t\t(editor as GettingStartedPage)?.makeCategoryVisibleWhenAvailable(selectedCategory, selectedStep);\n\t\t\t\t});\n\n\t\t\t}\n\t\t} else {\n\t\t\teditorService.openEditor({ resource: GettingStartedInput.RESOURCE });\n\t\t}\n\t}\n});\n\nRegistry.as<IEditorFactoryRegistry>(EditorExtensions.EditorFactory).registerEditorSerializer(GettingStartedInput.ID, GettingStartedInputSerializer);\nRegistry.as<IEditorPaneRegistry>(EditorExtensions.EditorPane).registerEditorPane(\n\tEditorPaneDescriptor.create(\n\t\tGettingStartedPage,\n\t\tGettingStartedPage.ID,\n\t\tlocalize('welcome', \"Welcome\")\n\t),\n\t[\n\t\tnew SyncDescriptor(GettingStartedInput)\n\t]\n);\n\nconst category = { value: localize('welcome', \"Welcome\"), original: 'Welcome' };\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'welcome.goBack',\n\t\t\ttitle: { value: localize('welcome.goBack', \"Go Back\"), original: 'Go Back' },\n\t\t\tcategory,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.EditorContrib,\n\t\t\t\tprimary: KeyCode.Escape,\n\t\t\t\twhen: inWelcomeContext\n\t\t\t},\n\t\t\tprecondition: ContextKeyExpr.equals('activeEditor', 'gettingStartedPage'),\n\t\t\tf1: true\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor) {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst editorPane = editorService.activeEditorPane;\n\t\tif (editorPane instanceof GettingStartedPage) {\n\t\t\teditorPane.escape();\n\t\t}\n\t}\n});\n\nCommandsRegistry.registerCommand({\n\tid: 'walkthroughs.selectStep',\n\thandler: (accessor, stepID: string) => {\n\t\tconst editorService = accessor.get(IEditorService);\n\t\tconst editorPane = editorService.activeEditorPane;\n\t\tif (editorPane instanceof GettingStartedPage) {\n\t\t\teditorPane.selectStepLoose(stepID);\n\t\t} else {\n\t\t\tconsole.error('Cannot run walkthroughs.selectStep outside of walkthrough context');\n\t\t}\n\t}\n});\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'welcome.markStepComplete',\n\t\t\ttitle: localize('welcome.markStepComplete', \"Mark Step Complete\"),\n\t\t\tcategory,\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor, arg: string) {\n\t\tif (!arg) { return; }\n\t\tconst gettingStartedService = accessor.get(IWalkthroughsService);\n\t\tgettingStartedService.progressStep(arg);\n\t}\n});\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'welcome.markStepIncomplete',\n\t\t\ttitle: localize('welcome.markStepInomplete', \"Mark Step Incomplete\"),\n\t\t\tcategory,\n\t\t});\n\t}\n\n\trun(accessor: ServicesAccessor, arg: string) {\n\t\tif (!arg) { return; }\n\t\tconst gettingStartedService = accessor.get(IWalkthroughsService);\n\t\tgettingStartedService.deprogressStep(arg);\n\t}\n});\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'welcome.showAllWalkthroughs',\n\t\t\ttitle: { value: localize('welcome.showAllWalkthroughs', \"Open Walkthrough...\"), original: 'Open Walkthrough...' },\n\t\t\tcategory,\n\t\t\tf1: true,\n\t\t});\n\t}\n\n\tprivate async getQuickPickItems(\n\t\tcontextService: IContextKeyService,\n\t\tgettingStartedService: IWalkthroughsService\n\t): Promise<IQuickPickItem[]> {\n\t\tconst categories = await gettingStartedService.getWalkthroughs();\n\t\treturn categories\n\t\t\t.filter(c => contextService.contextMatchesRules(c.when))\n\t\t\t.map(x => ({\n\t\t\t\tid: x.id,\n\t\t\t\tlabel: x.title,\n\t\t\t\tdetail: x.description,\n\t\t\t\tdescription: x.source,\n\t\t\t}));\n\t}\n\n\tasync run(accessor: ServicesAccessor) {\n\t\tconst commandService = accessor.get(ICommandService);\n\t\tconst contextService = accessor.get(IContextKeyService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst gettingStartedService = accessor.get(IWalkthroughsService);\n\t\tconst extensionService = accessor.get(IExtensionService);\n\n\t\tconst quickPick = quickInputService.createQuickPick();\n\t\tquickPick.canSelectMany = false;\n\t\tquickPick.matchOnDescription = true;\n\t\tquickPick.matchOnDetail = true;\n\t\tquickPick.placeholder = localize('pickWalkthroughs', 'Select a walkthrough to open');\n\t\tquickPick.items = await this.getQuickPickItems(contextService, gettingStartedService);\n\t\tquickPick.busy = true;\n\t\tquickPick.onDidAccept(() => {\n\t\t\tconst selection = quickPick.selectedItems[0];\n\t\t\tif (selection) {\n\t\t\t\tcommandService.executeCommand('workbench.action.openWalkthrough', selection.id);\n\t\t\t}\n\t\t\tquickPick.hide();\n\t\t});\n\t\tquickPick.onDidHide(() => quickPick.dispose());\n\t\tawait extensionService.whenInstalledExtensionsRegistered();\n\t\tgettingStartedService.onDidAddWalkthrough(async () => {\n\t\t\tquickPick.items = await this.getQuickPickItems(contextService, gettingStartedService);\n\t\t});\n\t\tquickPick.show();\n\t\tquickPick.busy = false;\n\t}\n});\n\nexport const WorkspacePlatform = new RawContextKey<'mac' | 'linux' | 'windows' | 'webworker' | undefined>('workspacePlatform', undefined, localize('workspacePlatform', \"The platform of the current workspace, which in remote or serverless contexts may be different from the platform of the UI\"));\nclass WorkspacePlatformContribution {\n\tconstructor(\n\t\t@IExtensionManagementServerService private readonly extensionManagementServerService: IExtensionManagementServerService,\n\t\t@IRemoteAgentService private readonly remoteAgentService: IRemoteAgentService,\n\t\t@IContextKeyService private readonly contextService: IContextKeyService,\n\t) {\n\t\tthis.remoteAgentService.getEnvironment().then(env => {\n\t\t\tconst remoteOS = env?.os;\n\n\t\t\tconst remotePlatform = remoteOS === OS.Macintosh ? 'mac'\n\t\t\t\t: remoteOS === OS.Windows ? 'windows'\n\t\t\t\t\t: remoteOS === OS.Linux ? 'linux'\n\t\t\t\t\t\t: undefined;\n\n\t\t\tif (remotePlatform) {\n\t\t\t\tWorkspacePlatform.bindTo(this.contextService).set(remotePlatform);\n\t\t\t} else if (this.extensionManagementServerService.localExtensionManagementServer) {\n\t\t\t\tif (isMacintosh) {\n\t\t\t\t\tWorkspacePlatform.bindTo(this.contextService).set('mac');\n\t\t\t\t} else if (isLinux) {\n\t\t\t\t\tWorkspacePlatform.bindTo(this.contextService).set('linux');\n\t\t\t\t} else if (isWindows) {\n\t\t\t\t\tWorkspacePlatform.bindTo(this.contextService).set('windows');\n\t\t\t\t}\n\t\t\t} else if (this.extensionManagementServerService.webExtensionManagementServer) {\n\t\t\t\tWorkspacePlatform.bindTo(this.contextService).set('webworker');\n\t\t\t} else {\n\t\t\t\tconsole.error('Error: Unable to detect workspace platform');\n\t\t\t}\n\t\t});\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench)\n\t.registerWorkbenchContribution(WorkspacePlatformContribution, LifecyclePhase.Restored);\n\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\nconfigurationRegistry.registerConfiguration({\n\t...workbenchConfigurationNodeBase,\n\tproperties: {\n\t\t'workbench.welcomePage.walkthroughs.openOnInstall': {\n\t\t\tscope: ConfigurationScope.MACHINE,\n\t\t\ttype: 'boolean',\n\t\t\tdefault: true,\n\t\t\tdescription: localize('workbench.welcomePage.walkthroughs.openOnInstall', \"When enabled, an extension's walkthrough will open upon install of the extension.\")\n\t\t},\n\t\t'workbench.startupEditor': {\n\t\t\t'scope': ConfigurationScope.RESOURCE,\n\t\t\t'type': 'string',\n\t\t\t'enum': ['none', 'welcomePage', 'readme', 'newUntitledFile', 'welcomePageInEmptyWorkbench'],\n\t\t\t'enumDescriptions': [\n\t\t\t\tlocalize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'workbench.startupEditor.none' }, \"Start without an editor.\"),\n\t\t\t\tlocalize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'workbench.startupEditor.welcomePage' }, \"Open the Welcome page, with content to aid in getting started with VS Code and extensions.\"),\n\t\t\t\tlocalize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'workbench.startupEditor.readme' }, \"Open the README when opening a folder that contains one, fallback to 'welcomePage' otherwise. Note: This is only observed as a global configuration, it will be ignored if set in a workspace or folder configuration.\"),\n\t\t\t\tlocalize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'workbench.startupEditor.newUntitledFile' }, \"Open a new untitled text file (only applies when opening an empty window).\"),\n\t\t\t\tlocalize({ comment: ['This is the description for a setting. Values surrounded by single quotes are not to be translated.'], key: 'workbench.startupEditor.welcomePageInEmptyWorkbench' }, \"Open the Welcome page when opening an empty workbench.\"),\n\t\t\t],\n\t\t\t'default': 'welcomePage',\n\t\t\t'description': localize('workbench.startupEditor', \"Controls which editor is shown at startup, if none are restored from the previous session.\")\n\t\t},\n\t\t'workbench.welcomePage.preferReducedMotion': {\n\t\t\tscope: ConfigurationScope.APPLICATION,\n\t\t\ttype: 'boolean',\n\t\t\tdefault: false,\n\t\t\tdeprecationMessage: localize('deprecationMessage', \"Deprecated, use the global `workbench.reduceMotion`.\"),\n\t\t\tdescription: localize('workbench.welcomePage.preferReducedMotion', \"When enabled, reduce motion in welcome page.\")\n\t\t}\n\t}\n});\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench)\n\t.registerWorkbenchContribution(StartupPageContribution, LifecyclePhase.Restored);\n"]}