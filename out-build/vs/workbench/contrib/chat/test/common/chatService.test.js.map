{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/chat/test/common/chatService.test.ts"],"names":[],"mappings":"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","file":"chatService.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { ProviderResult } from 'vs/editor/common/languages';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { MockContextKeyService } from 'vs/platform/keybinding/test/common/mockKeybindingService';\nimport { ILogService, NullLogService } from 'vs/platform/log/common/log';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { NullTelemetryService } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IViewsService } from 'vs/workbench/common/views';\nimport { ChatAgentService, IChatAgentService } from 'vs/workbench/contrib/chat/common/chatAgents';\nimport { IChatContributionService } from 'vs/workbench/contrib/chat/common/chatContributionService';\nimport { IChat, IChatProgress, IChatProvider, IChatRequest, IChatResponse, IPersistedChatState, ISlashCommand } from 'vs/workbench/contrib/chat/common/chatService';\nimport { ChatService } from 'vs/workbench/contrib/chat/common/chatServiceImpl';\nimport { ChatSlashCommandService, IChatSlashCommandService } from 'vs/workbench/contrib/chat/common/chatSlashCommands';\nimport { ChatVariablesService, IChatVariablesService } from 'vs/workbench/contrib/chat/common/chatVariables';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { TestContextService, TestExtensionService, TestStorageService } from 'vs/workbench/test/common/workbenchTestServices';\n\nclass SimpleTestProvider extends Disposable implements IChatProvider {\n\tprivate static sessionId = 0;\n\n\tlastInitialState = undefined;\n\n\treadonly displayName = 'Test';\n\n\tprivate _onDidChangeState = this._register(new Emitter());\n\n\tconstructor(readonly id: string) {\n\t\tsuper();\n\t}\n\n\tprepareSession(initialState: any) {\n\t\tthis.lastInitialState = initialState;\n\t\treturn Promise.resolve(<IChat>{\n\t\t\tid: SimpleTestProvider.sessionId++,\n\t\t\tusername: 'test',\n\t\t\tresponderUsername: 'test',\n\t\t\trequesterUsername: 'test',\n\t\t\tonDidChangeState: this._onDidChangeState.event\n\t\t});\n\t}\n\n\tchangeState(state: any) {\n\t\tthis._onDidChangeState.fire(state);\n\t}\n\n\tasync provideReply(request: IChatRequest) {\n\t\treturn { session: request.session, followups: [] };\n\t}\n}\n\nsuite('Chat', () => {\n\tconst testDisposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet storageService: IStorageService;\n\tlet instantiationService: TestInstantiationService;\n\n\tsetup(async () => {\n\t\tinstantiationService = testDisposables.add(new TestInstantiationService(new ServiceCollection(\n\t\t\t// [IChatSlashCommandService, new SyncDescriptor<any>(ChatSlashCommandService)],\n\t\t\t[IChatVariablesService, new SyncDescriptor<any>(ChatVariablesService)]\n\t\t)));\n\t\tinstantiationService.stub(IStorageService, storageService = testDisposables.add(new TestStorageService()));\n\t\tinstantiationService.stub(ILogService, new NullLogService());\n\t\tinstantiationService.stub(ITelemetryService, NullTelemetryService);\n\t\tinstantiationService.stub(IExtensionService, new TestExtensionService());\n\t\tinstantiationService.stub(IContextKeyService, new MockContextKeyService());\n\t\tinstantiationService.stub(IViewsService, new TestExtensionService());\n\t\tinstantiationService.stub(IChatContributionService, new TestExtensionService());\n\t\tinstantiationService.stub(IWorkspaceContextService, new TestContextService());\n\t\tinstantiationService.stub(IChatSlashCommandService, testDisposables.add(instantiationService.createInstance(ChatSlashCommandService)));\n\t\tinstantiationService.stub(IChatAgentService, testDisposables.add(instantiationService.createInstance(ChatAgentService)));\n\t});\n\n\ttest('retrieveSession', async () => {\n\t\tconst testService = testDisposables.add(instantiationService.createInstance(ChatService));\n\t\tconst provider1 = testDisposables.add(new SimpleTestProvider('provider1'));\n\t\tconst provider2 = testDisposables.add(new SimpleTestProvider('provider2'));\n\t\ttestDisposables.add(testService.registerProvider(provider1));\n\t\ttestDisposables.add(testService.registerProvider(provider2));\n\n\t\tconst session1 = testDisposables.add(testService.startSession('provider1', CancellationToken.None));\n\t\tawait session1.waitForInitialization();\n\t\tsession1!.addRequest('request 1');\n\n\t\tconst session2 = testDisposables.add(testService.startSession('provider2', CancellationToken.None));\n\t\tawait session2.waitForInitialization();\n\t\tsession2!.addRequest('request 2');\n\n\t\tassert.strictEqual(provider1.lastInitialState, undefined);\n\t\tassert.strictEqual(provider2.lastInitialState, undefined);\n\t\tprovider1.changeState({ state: 'provider1_state' });\n\t\tprovider2.changeState({ state: 'provider2_state' });\n\t\tstorageService.flush();\n\n\t\tconst testService2 = testDisposables.add(instantiationService.createInstance(ChatService));\n\t\ttestDisposables.add(testService2.registerProvider(provider1));\n\t\ttestDisposables.add(testService2.registerProvider(provider2));\n\t\tconst retrieved1 = testDisposables.add(testService2.getOrRestoreSession(session1.sessionId)!);\n\t\tawait retrieved1!.waitForInitialization();\n\t\tconst retrieved2 = testDisposables.add(testService2.getOrRestoreSession(session2.sessionId)!);\n\t\tawait retrieved2!.waitForInitialization();\n\t\tassert.deepStrictEqual(provider1.lastInitialState, { state: 'provider1_state' });\n\t\tassert.deepStrictEqual(provider2.lastInitialState, { state: 'provider2_state' });\n\t});\n\n\ttest('Handles failed session startup', async () => {\n\t\tfunction getFailProvider(providerId: string) {\n\t\t\treturn new class implements IChatProvider {\n\t\t\t\treadonly id = providerId;\n\t\t\t\treadonly displayName = 'Test';\n\n\t\t\t\tlastInitialState = undefined;\n\n\t\t\t\tprepareSession(initialState: any): ProviderResult<any> {\n\t\t\t\t\tthrow new Error('Failed to start session');\n\t\t\t\t}\n\n\t\t\t\tasync provideReply(request: IChatRequest) {\n\t\t\t\t\treturn { session: request.session, followups: [] };\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tconst testService = testDisposables.add(instantiationService.createInstance(ChatService));\n\t\tconst provider1 = getFailProvider('provider1');\n\t\ttestDisposables.add(testService.registerProvider(provider1));\n\n\t\tconst session1 = testDisposables.add(testService.startSession('provider1', CancellationToken.None));\n\t\tawait assert.rejects(() => session1.waitForInitialization());\n\t});\n\n\ttest('Can\\'t register same provider id twice', async () => {\n\t\tconst testService = testDisposables.add(instantiationService.createInstance(ChatService));\n\t\tconst id = 'testProvider';\n\t\ttestDisposables.add(testService.registerProvider({\n\t\t\tid,\n\t\t\tdisplayName: 'Test',\n\t\t\tprepareSession: function (initialState: IPersistedChatState | undefined, token: CancellationToken): ProviderResult<IChat | undefined> {\n\t\t\t\tthrow new Error('Function not implemented.');\n\t\t\t},\n\t\t\tprovideReply: function (request: IChatRequest, progress: (progress: IChatProgress) => void, token: CancellationToken): ProviderResult<IChatResponse> {\n\t\t\t\tthrow new Error('Function not implemented.');\n\t\t\t}\n\t\t}));\n\n\t\tassert.throws(() => {\n\t\t\ttestDisposables.add(testService.registerProvider({\n\t\t\t\tid,\n\t\t\t\tdisplayName: 'Test',\n\t\t\t\tprepareSession: function (initialState: IPersistedChatState | undefined, token: CancellationToken): ProviderResult<IChat | undefined> {\n\t\t\t\t\tthrow new Error('Function not implemented.');\n\t\t\t\t},\n\t\t\t\tprovideReply: function (request: IChatRequest, progress: (progress: IChatProgress) => void, token: CancellationToken): ProviderResult<IChatResponse> {\n\t\t\t\t\tthrow new Error('Function not implemented.');\n\t\t\t\t}\n\t\t\t}));\n\t\t}, 'Expected to throw for dupe provider');\n\t});\n\n\ttest('getSlashCommands', async () => {\n\t\tconst testService = testDisposables.add(instantiationService.createInstance(ChatService));\n\t\tconst provider = testDisposables.add(new class extends SimpleTestProvider {\n\t\t\tconstructor() {\n\t\t\t\tsuper('testProvider');\n\t\t\t}\n\n\t\t\tprovideSlashCommands(): ProviderResult<ISlashCommand[]> {\n\t\t\t\treturn [\n\t\t\t\t\t{\n\t\t\t\t\t\tcommand: 'command',\n\t\t\t\t\t\tdetail: 'detail',\n\t\t\t\t\t\tsortText: 'sortText',\n\t\t\t\t\t}\n\t\t\t\t];\n\t\t\t}\n\t\t});\n\n\t\ttestDisposables.add(testService.registerProvider(provider));\n\n\t\tconst model = testDisposables.add(testService.startSession('testProvider', CancellationToken.None));\n\t\tconst commands = await testService.getSlashCommands(model.sessionId, CancellationToken.None);\n\n\t\tassert.strictEqual(commands?.length, 1);\n\t\tassert.strictEqual(commands?.[0].command, 'command');\n\t\tassert.strictEqual(commands?.[0].detail, 'detail');\n\t\tassert.strictEqual(commands?.[0].sortText, 'sortText');\n\t});\n\n\ttest('sendRequestToProvider', async () => {\n\t\tconst testService = testDisposables.add(instantiationService.createInstance(ChatService));\n\t\ttestDisposables.add(testService.registerProvider(testDisposables.add(new SimpleTestProvider('testProvider'))));\n\n\t\tconst model = testDisposables.add(testService.startSession('testProvider', CancellationToken.None));\n\t\tassert.strictEqual(model.getRequests().length, 0);\n\n\t\tawait testService.sendRequestToProvider(model.sessionId, { message: 'test request' });\n\t\tassert.strictEqual(model.getRequests().length, 1);\n\t});\n\n\ttest('addCompleteRequest', async () => {\n\t\tconst testService = testDisposables.add(instantiationService.createInstance(ChatService));\n\t\ttestDisposables.add(testService.registerProvider(testDisposables.add(new SimpleTestProvider('testProvider'))));\n\n\t\tconst model = testDisposables.add(testService.startSession('testProvider', CancellationToken.None));\n\t\tassert.strictEqual(model.getRequests().length, 0);\n\n\t\tawait testService.addCompleteRequest(model.sessionId, 'test request', { message: 'test response' });\n\t\tassert.strictEqual(model.getRequests().length, 1);\n\t\tassert.ok(model.getRequests()[0].response);\n\t\tassert.strictEqual(model.getRequests()[0].response?.response.asString(), 'test response');\n\t});\n});\n"]}