{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/chat/test/common/chatVariables.test.ts"],"names":[],"mappings":"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","file":"chatVariables.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { ChatVariablesService } from 'vs/workbench/contrib/chat/common/chatVariables';\n\nsuite('ChatVariables', function () {\n\n\tlet service: ChatVariablesService;\n\n\tsetup(function () {\n\t\tservice = new ChatVariablesService();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('ChatVariables - resolveVariables', async function () {\n\n\t\tconst v1 = service.registerVariable({ name: 'foo', description: 'bar' }, async () => ([{ level: 'full', value: 'farboo' }]));\n\t\tconst v2 = service.registerVariable({ name: 'far', description: 'boo' }, async () => ([{ level: 'full', value: 'farboo' }]));\n\n\t\t{\n\t\t\tconst data = await service.resolveVariables('Hello @foo and@far', null!, CancellationToken.None);\n\t\t\tassert.strictEqual(Object.keys(data.variables).length, 1);\n\t\t\tassert.deepEqual(Object.keys(data.variables).sort(), ['foo']);\n\t\t\tassert.strictEqual(data.prompt, 'Hello [@foo](values:foo) and@far');\n\t\t}\n\t\t{\n\t\t\tconst data = await service.resolveVariables('@foo Hello', null!, CancellationToken.None);\n\t\t\tassert.strictEqual(Object.keys(data.variables).length, 1);\n\t\t\tassert.deepEqual(Object.keys(data.variables).sort(), ['foo']);\n\t\t\tassert.strictEqual(data.prompt, '[@foo](values:foo) Hello');\n\t\t}\n\t\t{\n\t\t\tconst data = await service.resolveVariables('Hello @foo', null!, CancellationToken.None);\n\t\t\tassert.strictEqual(Object.keys(data.variables).length, 1);\n\t\t\tassert.deepEqual(Object.keys(data.variables).sort(), ['foo']);\n\t\t}\n\t\t{\n\t\t\tconst data = await service.resolveVariables('Hello @foo?', null!, CancellationToken.None);\n\t\t\tassert.strictEqual(Object.keys(data.variables).length, 1);\n\t\t\tassert.deepEqual(Object.keys(data.variables).sort(), ['foo']);\n\t\t\tassert.strictEqual(data.prompt, 'Hello [@foo](values:foo)?');\n\t\t}\n\t\t{\n\t\t\tconst data = await service.resolveVariables('Hello @foo and@far @foo', null!, CancellationToken.None);\n\t\t\tassert.strictEqual(Object.keys(data.variables).length, 1);\n\t\t\tassert.deepEqual(Object.keys(data.variables).sort(), ['foo']);\n\t\t}\n\t\t{\n\t\t\tconst data = await service.resolveVariables('Hello @foo and @far @foo', null!, CancellationToken.None);\n\t\t\tassert.strictEqual(Object.keys(data.variables).length, 2);\n\t\t\tassert.deepEqual(Object.keys(data.variables).sort(), ['far', 'foo']);\n\t\t}\n\t\t{\n\t\t\tconst data = await service.resolveVariables('Hello @foo and @far @foo @unknown', null!, CancellationToken.None);\n\t\t\tassert.strictEqual(Object.keys(data.variables).length, 2);\n\t\t\tassert.deepEqual(Object.keys(data.variables).sort(), ['far', 'foo']);\n\t\t\tassert.strictEqual(data.prompt, 'Hello [@foo](values:foo) and [@far](values:far) [@foo](values:foo) @unknown');\n\t\t}\n\n\t\tv1.dispose();\n\t\tv2.dispose();\n\t});\n});\n"]}