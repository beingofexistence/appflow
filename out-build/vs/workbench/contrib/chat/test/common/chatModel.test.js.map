{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/chat/test/common/chatModel.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAahG,KAAK,CAAC,WAAW,EAAE,GAAG,EAAE;QACvB,MAAM,eAAe,GAAG,IAAA,WAAG,GAAsC,CAAC;QAElE,IAAI,oBAA0B,CAAqB;QAEnD,KAAK,CAAC,KAAK,IAAI,EAAE;YAChB,oBAAoB,GAAG,eAAe,CAAC,GAAG,CAAC,IAAI,+BAAI,EAAsB,CAAC,CAAC;YAC3E,oBAAoB,CAAC,IAAI,CAAC,aAAG,EAAc,eAAe,CAAC,GAAG,CAAC,IAAI,4BAAI,EAAgB,CAAC,CAAC,CAAC;YAC1F,oBAAoB,CAAC,IAAI,CAAC,SAAG,EAAU,IAAI,SAAG,EAAa,CAAC,CAAC;YAC7D,oBAAoB,CAAC,IAAI,CAAC,gBAAG,EAAgB,IAAI,4BAAI,EAAkB,CAAC,CAAC;YACzE,oBAAoB,CAAC,IAAI,CAAC,gBAAG,EAAgB,eAAe,CAAC,GAAG,CAAC,oBAAoB,CAAC,cAAc,CAAC,gBAAG,CAAc,CAAC,CAAC,CAAC;QAC1H,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;YAC3C,MAAM,KAAK,GAAG,eAAe,CAAC,GAAG,CAAC,oBAAoB,CAAC,cAAc,CAAC,eAAG,EAAQ,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC;YAEzG,IAAI,cAAc,GAAG,KAAK,CAAC;YAC3B,KAAK,CAAC,qBAAqB,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE;gBACvC,cAAc,GAAG,IAAI,CAAC;YACvB,CAAC,CAAC,CAAC;YAEH,MAAM,IAAA,WAAG,EAAK,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC,WAAW,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;YAE1C,KAAK,CAAC,UAAU,CAAC,EAAS,EAAE,SAAS,CAAC,CAAC;YACvC,MAAM,IAAA,WAAG,EAAK,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC,WAAW,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6CAA6C,EAAE,KAAK,IAAI,EAAE;YAC9D,MAAM,KAAK,GAAG,eAAe,CAAC,GAAG,CAAC,oBAAoB,CAAC,cAAc,CAAC,eAAG,EAAQ,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC;YACzG,KAAK,CAAC,OAAO,EAAE,CAAC;YAEhB,MAAM,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,qBAAqB,EAAE,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"chatModel.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { timeout } from 'vs/base/common/async';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { ILogService, NullLogService } from 'vs/platform/log/common/log';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { ChatAgentService, IChatAgentService } from 'vs/workbench/contrib/chat/common/chatAgents';\nimport { ChatModel } from 'vs/workbench/contrib/chat/common/chatModel';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { TestExtensionService, TestStorageService } from 'vs/workbench/test/common/workbenchTestServices';\n\nsuite('ChatModel', () => {\n\tconst testDisposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet instantiationService: TestInstantiationService;\n\n\tsetup(async () => {\n\t\tinstantiationService = testDisposables.add(new TestInstantiationService());\n\t\tinstantiationService.stub(IStorageService, testDisposables.add(new TestStorageService()));\n\t\tinstantiationService.stub(ILogService, new NullLogService());\n\t\tinstantiationService.stub(IExtensionService, new TestExtensionService());\n\t\tinstantiationService.stub(IChatAgentService, testDisposables.add(instantiationService.createInstance(ChatAgentService)));\n\t});\n\n\ttest('Waits for initialization', async () => {\n\t\tconst model = testDisposables.add(instantiationService.createInstance(ChatModel, 'provider', undefined));\n\n\t\tlet hasInitialized = false;\n\t\tmodel.waitForInitialization().then(() => {\n\t\t\thasInitialized = true;\n\t\t});\n\n\t\tawait timeout(0);\n\t\tassert.strictEqual(hasInitialized, false);\n\n\t\tmodel.initialize({} as any, undefined);\n\t\tawait timeout(0);\n\t\tassert.strictEqual(hasInitialized, true);\n\t});\n\n\ttest('Initialization fails when model is disposed', async () => {\n\t\tconst model = testDisposables.add(instantiationService.createInstance(ChatModel, 'provider', undefined));\n\t\tmodel.dispose();\n\n\t\tawait assert.rejects(() => model.waitForInitialization());\n\t});\n});\n\n"]}