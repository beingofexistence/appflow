{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/chat/common/chatVariables.ts"],"names":[],"mappings":"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","file":"chatVariables.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { onUnexpectedExternalError } from 'vs/base/common/errors';\nimport { Iterable } from 'vs/base/common/iterator';\nimport { IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IChatModel } from 'vs/workbench/contrib/chat/common/chatModel';\n\nexport interface IChatVariableData {\n\tname: string;\n\tdescription: string;\n\thidden?: boolean;\n\tcanTakeArgument?: boolean;\n}\n\nexport interface IChatRequestVariableValue {\n\tlevel: 'short' | 'medium' | 'full';\n\tvalue: string;\n\tdescription?: string;\n}\n\nexport interface IChatVariableResolver {\n\t// TODO should we spec \"zoom level\"\n\t(messageText: string, arg: string | undefined, model: IChatModel, token: CancellationToken): Promise<IChatRequestVariableValue[] | undefined>;\n}\n\nexport const IChatVariablesService = createDecorator<IChatVariablesService>('IChatVariablesService');\n\nexport interface IChatVariablesService {\n\t_serviceBrand: undefined;\n\tregisterVariable(data: IChatVariableData, resolver: IChatVariableResolver): IDisposable;\n\tgetVariables(): Iterable<Readonly<IChatVariableData>>;\n\n\t/**\n\t * Resolves all variables that occur in `prompt`\n\t */\n\tresolveVariables(prompt: string, model: IChatModel, token: CancellationToken): Promise<IChatVariableResolveResult>;\n}\n\ninterface IChatData {\n\tdata: IChatVariableData;\n\tresolver: IChatVariableResolver;\n}\n\ninterface IChatVariableResolveResult {\n\tvariables: Record<string, IChatRequestVariableValue[]>;\n\tprompt: string;\n}\n\nexport class ChatVariablesService implements IChatVariablesService {\n\tdeclare _serviceBrand: undefined;\n\n\tprivate _resolver = new Map<string, IChatData>();\n\n\tconstructor() {\n\t}\n\n\tasync resolveVariables(prompt: string, model: IChatModel, token: CancellationToken): Promise<IChatVariableResolveResult> {\n\t\tconst resolvedVariables: Record<string, IChatRequestVariableValue[]> = {};\n\t\tconst jobs: Promise<any>[] = [];\n\n\t\t// TODO have a separate parser that is also used for decorations\n\t\tconst regex = /(^|\\s)@(\\w+)(:\\w+)?(?=\\s|$|\\b)/ig;\n\n\t\tlet lastMatch = 0;\n\t\tconst parsedPrompt: string[] = [];\n\t\tlet match: RegExpMatchArray | null;\n\t\twhile (match = regex.exec(prompt)) {\n\t\t\tconst [fullMatch, leading, varName, arg] = match;\n\t\t\tconst data = this._resolver.get(varName.toLowerCase());\n\t\t\tif (data) {\n\t\t\t\tif (!arg || data.data.canTakeArgument) {\n\t\t\t\t\tparsedPrompt.push(prompt.substring(lastMatch, match.index!));\n\t\t\t\t\tparsedPrompt.push('');\n\t\t\t\t\tlastMatch = match.index! + fullMatch.length;\n\t\t\t\t\tconst varIndex = parsedPrompt.length - 1;\n\t\t\t\t\tconst argWithoutColon = arg?.slice(1);\n\t\t\t\t\tconst fullVarName = varName + (arg ?? '');\n\t\t\t\t\tjobs.push(data.resolver(prompt, argWithoutColon, model, token).then(value => {\n\t\t\t\t\t\tif (value) {\n\t\t\t\t\t\t\tresolvedVariables[fullVarName] = value;\n\t\t\t\t\t\t\tparsedPrompt[varIndex] = `${leading}[@${fullVarName}](values:${fullVarName})`;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tparsedPrompt[varIndex] = fullMatch;\n\t\t\t\t\t\t}\n\t\t\t\t\t}).catch(onUnexpectedExternalError));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tparsedPrompt.push(prompt.substring(lastMatch));\n\n\t\tawait Promise.allSettled(jobs);\n\n\t\treturn {\n\t\t\tvariables: resolvedVariables,\n\t\t\tprompt: parsedPrompt.join('')\n\t\t};\n\t}\n\n\tgetVariables(): Iterable<Readonly<IChatVariableData>> {\n\t\tconst all = Iterable.map(this._resolver.values(), data => data.data);\n\t\treturn Iterable.filter(all, data => !data.hidden);\n\t}\n\n\tregisterVariable(data: IChatVariableData, resolver: IChatVariableResolver): IDisposable {\n\t\tconst key = data.name.toLowerCase();\n\t\tif (this._resolver.has(key)) {\n\t\t\tthrow new Error(`A chat variable with the name '${data.name}' already exists.`);\n\t\t}\n\t\tthis._resolver.set(key, { data, resolver });\n\t\treturn toDisposable(() => {\n\t\t\tthis._resolver.delete(key);\n\t\t});\n\t}\n}\n"]}