{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/chat/common/chatProvider.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG,IAAkB,eAKjB;IALD,WAAkB,eAAe;QAChC,yDAAM,CAAA;QACN,qDAAI,CAAA;QACJ,+DAAS,CAAA;QACT,6DAAQ,CAAA;IACT,CAAC,EALiB,eAAe,+BAAf,eAAe,QAKhC;IAwBY,QAAA,GAAG,GAAoB,IAAA,mBAAG,EAAmC,qBAAqB,CAAC,CAAC;IAWjG,MAAa,GAAG;QAAhB;YAGkB,MAAC,GAAgD,IAAI,GAAG,EAAE,CAAC;QAkB7E,CAAC;QAfA,4BAA4B,CAAC,UAAkB,EAAE,QAA+B;YAC/E,IAAI,IAAI,CAAC,CAAC,CAAU,GAAG,CAAC,UAAU,CAAC,EAAE;gBACpC,MAAM,IAAI,KAAK,CAAC,0CAA0C,UAAU,yBAAyB,CAAC,CAAC;aAC/F;YACD,IAAI,CAAC,CAAC,CAAU,GAAG,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;YAC1C,OAAO,IAAA,eAAG,EAAU,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAU,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;QAC/D,CAAC;QAED,iBAAiB,CAAC,UAAkB,EAAE,QAAwB,EAAE,OAAgC,EAAE,QAA0C,EAAE,KAAwB;YACrK,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAU,GAAG,CAAC,UAAU,CAAC,CAAC;YACjD,IAAI,CAAC,QAAQ,EAAE;gBACd,MAAM,IAAI,KAAK,CAAC,0CAA0C,UAAU,qBAAqB,CAAC,CAAC;aAC3F;YACD,OAAO,QAAQ,CAAC,mBAAmB,CAAC,QAAQ,EAAE,OAAO,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;QACzE,CAAC;KACD;IArBD,kBAqBC","file":"chatProvider.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IProgress } from 'vs/platform/progress/common/progress';\n\nexport const enum ChatMessageRole {\n\tSystem,\n\tUser,\n\tAssistant,\n\tFunction,\n}\n\nexport interface IChatMessage {\n\treadonly role: ChatMessageRole;\n\treadonly content: string;\n\treadonly name?: string;\n}\n\nexport interface IChatResponseFragment {\n\tindex: number;\n\tpart: string;\n}\n\nexport interface IChatResponseProviderMetadata {\n\treadonly extension: ExtensionIdentifier;\n\treadonly displayName: string;\n\treadonly description?: string;\n}\n\nexport interface IChatResponseProvider {\n\tmetadata: IChatResponseProviderMetadata;\n\tprovideChatResponse(messages: IChatMessage[], options: { [name: string]: any }, progress: IProgress<IChatResponseFragment>, token: CancellationToken): Promise<any>;\n}\n\nexport const IChatProviderService = createDecorator<IChatProviderService>('chatProviderService');\n\nexport interface IChatProviderService {\n\n\treadonly _serviceBrand: undefined;\n\n\tregisterChatResponseProvider(identifier: string, provider: IChatResponseProvider): IDisposable;\n\n\tfetchChatResponse(identifier: string, messages: IChatMessage[], options: { [name: string]: any }, progress: IProgress<IChatResponseFragment>, token: CancellationToken): Promise<any>;\n}\n\nexport class ChatProviderService implements IChatProviderService {\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly _providers: Map<string, IChatResponseProvider> = new Map();\n\n\n\tregisterChatResponseProvider(identifier: string, provider: IChatResponseProvider): IDisposable {\n\t\tif (this._providers.has(identifier)) {\n\t\t\tthrow new Error(`Chat response provider with identifier ${identifier} is already registered.`);\n\t\t}\n\t\tthis._providers.set(identifier, provider);\n\t\treturn toDisposable(() => this._providers.delete(identifier));\n\t}\n\n\tfetchChatResponse(identifier: string, messages: IChatMessage[], options: { [name: string]: any }, progress: IProgress<IChatResponseFragment>, token: CancellationToken): Promise<any> {\n\t\tconst provider = this._providers.get(identifier);\n\t\tif (!provider) {\n\t\t\tthrow new Error(`Chat response provider with identifier ${identifier} is not registered.`);\n\t\t}\n\t\treturn provider.provideChatResponse(messages, options, progress, token);\n\t}\n}\n"]}