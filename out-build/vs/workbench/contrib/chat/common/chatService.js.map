{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/chat/common/chatService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAkHhG,2DAA2D;IAC3D,IAAY,+BAGX;IAHD,WAAY,+BAA+B;QAC1C,iFAAM,CAAA;QACN,qFAAQ,CAAA;IACT,CAAC,EAHW,+BAA+B,+CAA/B,+BAA+B,QAG1C;IAQD,IAAY,0BAIX;IAJD,WAAY,0BAA0B;QACrC,oCAAoC;QACpC,+EAAU,CAAA;QACV,iFAAW,CAAA;IACZ,CAAC,EAJW,0BAA0B,0CAA1B,0BAA0B,QAIrC;IAwEY,QAAA,GAAG,GAAY,IAAA,mBAAG,EAA2B,cAAc,CAAC,CAAC","file":"chatService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Event } from 'vs/base/common/event';\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { ProviderResult } from 'vs/editor/common/languages';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IChatModel, ChatModel, ISerializableChatData } from 'vs/workbench/contrib/chat/common/chatModel';\nimport { IChatRequestVariableValue } from 'vs/workbench/contrib/chat/common/chatVariables';\n\nexport interface IChat {\n\tid: number; // TODO Maybe remove this and move to a subclass that only the provider knows about\n\trequesterUsername: string;\n\trequesterAvatarIconUri?: URI;\n\tresponderUsername: string;\n\tresponderAvatarIconUri?: URI;\n\tinputPlaceholder?: string;\n\tonDidChangeState?: Event<any>;\n\tdispose?(): void;\n}\n\nexport interface IChatRequest {\n\tsession: IChat;\n\tmessage: string | IChatReplyFollowup;\n\tvariables: Record<string, IChatRequestVariableValue[]>;\n}\n\nexport interface IChatResponseErrorDetails {\n\tmessage: string;\n\tresponseIsIncomplete?: boolean;\n\tresponseIsFiltered?: boolean;\n}\n\nexport interface IChatResponse {\n\tsession: IChat;\n\terrorDetails?: IChatResponseErrorDetails;\n\ttimings?: {\n\t\tfirstProgress: number;\n\t\ttotalElapsed: number;\n\t};\n}\n\nexport interface IChatResponseProgressFileTreeData {\n\tlabel: string;\n\turi: URI;\n\tchildren?: IChatResponseProgressFileTreeData[];\n}\n\nexport type IChatProgress =\n\t{ content: string | IMarkdownString } | { requestId: string } | { treeData: IChatResponseProgressFileTreeData } | { placeholder: string; resolvedContent: Promise<string | IMarkdownString | { treeData: IChatResponseProgressFileTreeData }> };\n\nexport interface IPersistedChatState { }\nexport interface IChatProvider {\n\treadonly id: string;\n\treadonly displayName: string;\n\treadonly iconUrl?: string;\n\tprepareSession(initialState: IPersistedChatState | undefined, token: CancellationToken): ProviderResult<IChat | undefined>;\n\tresolveRequest?(session: IChat, context: any, token: CancellationToken): ProviderResult<IChatRequest>;\n\tprovideWelcomeMessage?(token: CancellationToken): ProviderResult<(string | IChatReplyFollowup[])[] | undefined>;\n\tprovideFollowups?(session: IChat, token: CancellationToken): ProviderResult<IChatFollowup[] | undefined>;\n\tprovideReply(request: IChatRequest, progress: (progress: IChatProgress) => void, token: CancellationToken): ProviderResult<IChatResponse>;\n\tprovideSlashCommands?(session: IChat, token: CancellationToken): ProviderResult<ISlashCommand[]>;\n\tremoveRequest?(session: IChat, requestId: string): void;\n}\n\nexport interface ISlashCommand {\n\tcommand: string;\n\tsortText?: string;\n\tdetail?: string;\n\n\t/**\n\t * Whether the command should execute as soon\n\t * as it is entered. Defaults to `false`.\n\t */\n\texecuteImmediately?: boolean;\n\t/**\n\t * Whether executing the command puts the\n\t * chat into a persistent mode, where the\n\t * slash command is prepended to the chat input.\n\t */\n\tshouldRepopulate?: boolean;\n\t/**\n\t * Placeholder text to render in the chat input\n\t * when the slash command has been repopulated.\n\t * Has no effect if `shouldRepopulate` is `false`.\n\t */\n\tfollowupPlaceholder?: string;\n\t/**\n\t * The slash command(s) that this command wants to be\n\t * deprioritized in favor of.\n\t */\n\tyieldsTo?: ReadonlyArray<{ readonly command: string }>;\n}\n\nexport interface IChatReplyFollowup {\n\tkind: 'reply';\n\tmessage: string;\n\ttitle?: string;\n\ttooltip?: string;\n\tmetadata?: any;\n}\n\nexport interface IChatResponseCommandFollowup {\n\tkind: 'command';\n\tcommandId: string;\n\targs?: any[];\n\ttitle: string; // supports codicon strings\n\twhen?: string;\n}\n\nexport type IChatFollowup = IChatReplyFollowup | IChatResponseCommandFollowup;\n\n// Name has to match the one in vscode.d.ts for some reason\nexport enum InteractiveSessionVoteDirection {\n\tUp = 1,\n\tDown = 2\n}\n\nexport interface IChatVoteAction {\n\tkind: 'vote';\n\tresponseId: string;\n\tdirection: InteractiveSessionVoteDirection;\n}\n\nexport enum InteractiveSessionCopyKind {\n\t// Keyboard shortcut or context menu\n\tAction = 1,\n\tToolbar = 2\n}\n\nexport interface IChatCopyAction {\n\tkind: 'copy';\n\tresponseId: string;\n\tcodeBlockIndex: number;\n\tcopyType: InteractiveSessionCopyKind;\n\tcopiedCharacters: number;\n\ttotalCharacters: number;\n\tcopiedText: string;\n}\n\nexport interface IChatInsertAction {\n\tkind: 'insert';\n\tresponseId: string;\n\tcodeBlockIndex: number;\n\ttotalCharacters: number;\n\tnewFile?: boolean;\n}\n\nexport interface IChatTerminalAction {\n\tkind: 'runInTerminal';\n\tresponseId: string;\n\tcodeBlockIndex: number;\n\tlanguageId?: string;\n}\n\nexport interface IChatCommandAction {\n\tkind: 'command';\n\tcommand: IChatResponseCommandFollowup;\n}\n\nexport type ChatUserAction = IChatVoteAction | IChatCopyAction | IChatInsertAction | IChatTerminalAction | IChatCommandAction;\n\nexport interface IChatUserActionEvent {\n\taction: ChatUserAction;\n\tproviderId: string;\n}\n\nexport interface IChatDynamicRequest {\n\t/**\n\t * The message that will be displayed in the UI\n\t */\n\tmessage: string;\n\n\t/**\n\t * Any extra metadata/context that will go to the provider.\n\t */\n\tmetadata?: any;\n}\n\nexport interface IChatCompleteResponse {\n\tmessage: string | (IMarkdownString | IChatResponseProgressFileTreeData)[];\n\terrorDetails?: IChatResponseErrorDetails;\n\tfollowups?: IChatFollowup[];\n}\n\nexport interface IChatDetail {\n\tsessionId: string;\n\ttitle: string;\n}\n\nexport interface IChatProviderInfo {\n\tid: string;\n\tdisplayName: string;\n}\n\nexport interface IChatTransferredSessionData {\n\tsessionId: string;\n\tinputValue: string;\n}\n\nexport const IChatService = createDecorator<IChatService>('IChatService');\n\nexport interface IChatService {\n\t_serviceBrand: undefined;\n\ttransferredSessionData: IChatTransferredSessionData | undefined;\n\n\tonDidSubmitSlashCommand: Event<{ slashCommand: string; sessionId: string }>;\n\tregisterProvider(provider: IChatProvider): IDisposable;\n\tgetProviderInfos(): IChatProviderInfo[];\n\tstartSession(providerId: string, token: CancellationToken): ChatModel | undefined;\n\tgetSession(sessionId: string): IChatModel | undefined;\n\tgetSessionId(sessionProviderId: number): string | undefined;\n\tgetOrRestoreSession(sessionId: string): IChatModel | undefined;\n\tloadSessionFromContent(data: ISerializableChatData): IChatModel | undefined;\n\n\t/**\n\t * Returns whether the request was accepted.\n\t */\n\tsendRequest(sessionId: string, message: string | IChatReplyFollowup, usedSlashCommand?: ISlashCommand): Promise<{ responseCompletePromise: Promise<void> } | undefined>;\n\tremoveRequest(sessionid: string, requestId: string): Promise<void>;\n\tcancelCurrentRequestForSession(sessionId: string): void;\n\tgetSlashCommands(sessionId: string, token: CancellationToken): Promise<ISlashCommand[] | undefined>;\n\tclearSession(sessionId: string): void;\n\taddRequest(context: any): void;\n\taddCompleteRequest(sessionId: string, message: string, response: IChatCompleteResponse): void;\n\tsendRequestToProvider(sessionId: string, message: IChatDynamicRequest): void;\n\tgetHistory(): IChatDetail[];\n\tremoveHistoryEntry(sessionId: string): void;\n\n\tonDidPerformUserAction: Event<IChatUserActionEvent>;\n\tnotifyUserAction(event: IChatUserActionEvent): void;\n\n\ttransferChatSession(transferredSessionData: IChatTransferredSessionData, toWorkspace: URI): void;\n}\n"]}