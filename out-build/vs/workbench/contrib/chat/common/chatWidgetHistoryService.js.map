{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/chat/common/chatWidgetHistoryService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAOnF,QAAA,IAAI,GAAwB,IAAA,mBAAG,EAAwC,2BAA2B,CAAC,CAAC;IAe1G,IAAM,IAAI,GAAV,MAAM,IAAI;QAShB,YACkB,cAAmB;YAJpB,MAAC,GAAoB,IAAI,WAAG,EAAY,CAAC;YACjD,sBAAiB,GAAgB,IAAI,CAAC,CAAC,CAAkB,KAAK,CAAC;YAKvE,IAAI,CAAC,CAAC,GAAS,IAAI,aAAG,CAAK,qBAAqB,EAAE,cAAc,CAAC,CAAC;YAClE,IAAI,CAAC,CAAC,GAAW,IAAI,CAAC,CAAC,CAAO,UAAU,+DAA+D,CAAC;QACzG,CAAC;QAED,UAAU,CAAC,UAAkB;YAC5B,OAAO,IAAI,CAAC,CAAC,CAAS,OAAO,EAAE,CAAC,UAAU,CAAC,IAAI,EAAE,CAAC;QACnD,CAAC;QAED,WAAW,CAAC,UAAkB,EAAE,OAAiB;YAChD,IAAI,CAAC,IAAI,CAAC,CAAC,CAAS,OAAO,EAAE;gBAC5B,IAAI,CAAC,CAAC,CAAS,OAAO,GAAG,EAAE,CAAC;aAC5B;YACD,IAAI,CAAC,CAAC,CAAS,OAAO,CAAC,UAAU,CAAC,GAAG,OAAO,CAAC;YAC7C,IAAI,CAAC,CAAC,CAAO,WAAW,EAAE,CAAC;QAC5B,CAAC;QAED,YAAY;YACX,IAAI,CAAC,CAAC,CAAS,OAAO,GAAG,EAAE,CAAC;YAC5B,IAAI,CAAC,CAAC,CAAO,WAAW,EAAE,CAAC;YAC3B,IAAI,CAAC,CAAC,CAAkB,IAAI,EAAE,CAAC;QAChC,CAAC;KACD,CAAA;IAjCY,oBAAI;mBAAJ,IAAI;QAUd,WAAA,aAAG,CAAA;OAVO,IAAI,CAiChB","file":"chatWidgetHistoryService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { Memento } from 'vs/workbench/common/memento';\n\nexport const IChatWidgetHistoryService = createDecorator<IChatWidgetHistoryService>('IChatWidgetHistoryService');\nexport interface IChatWidgetHistoryService {\n\t_serviceBrand: undefined;\n\n\treadonly onDidClearHistory: Event<void>;\n\n\tclearHistory(): void;\n\tgetHistory(providerId: string): string[];\n\tsaveHistory(providerId: string, history: string[]): void;\n}\n\ninterface IChatHistory {\n\thistory: { [providerId: string]: string[] };\n}\n\nexport class ChatWidgetHistoryService implements IChatWidgetHistoryService {\n\t_serviceBrand: undefined;\n\n\tprivate memento: Memento;\n\tprivate viewState: IChatHistory;\n\n\tprivate readonly _onDidClearHistory = new Emitter<void>();\n\treadonly onDidClearHistory: Event<void> = this._onDidClearHistory.event;\n\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService\n\t) {\n\t\tthis.memento = new Memento('interactive-session', storageService);\n\t\tthis.viewState = this.memento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE) as IChatHistory;\n\t}\n\n\tgetHistory(providerId: string): string[] {\n\t\treturn this.viewState.history?.[providerId] ?? [];\n\t}\n\n\tsaveHistory(providerId: string, history: string[]): void {\n\t\tif (!this.viewState.history) {\n\t\t\tthis.viewState.history = {};\n\t\t}\n\t\tthis.viewState.history[providerId] = history;\n\t\tthis.memento.saveMemento();\n\t}\n\n\tclearHistory(): void {\n\t\tthis.viewState.history = {};\n\t\tthis.memento.saveMemento();\n\t\tthis._onDidClearHistory.fire();\n\t}\n}\n"]}