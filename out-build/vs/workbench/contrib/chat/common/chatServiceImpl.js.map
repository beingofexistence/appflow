{"version":3,"sources":["vs/workbench/contrib/chat/common/chatServiceImpl.ts"],"names":[],"mappings":"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","file":"chatServiceImpl.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancelablePromise, createCancelablePromise } from 'vs/base/common/async';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { MarkdownString, isMarkdownString } from 'vs/base/common/htmlContent';\nimport { Iterable } from 'vs/base/common/iterator';\nimport { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { revive } from 'vs/base/common/marshalling';\nimport { StopWatch } from 'vs/base/common/stopwatch';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { Progress } from 'vs/platform/progress/common/progress';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IChatAgentData, IChatAgentService } from 'vs/workbench/contrib/chat/common/chatAgents';\nimport { CONTEXT_PROVIDER_EXISTS } from 'vs/workbench/contrib/chat/common/chatContextKeys';\nimport { ChatModel, ChatWelcomeMessageModel, IChatModel, ISerializableChatData, ISerializableChatsData, isCompleteInteractiveProgressTreeData } from 'vs/workbench/contrib/chat/common/chatModel';\nimport { ChatMessageRole, IChatMessage } from 'vs/workbench/contrib/chat/common/chatProvider';\nimport { IChat, IChatCompleteResponse, IChatDetail, IChatDynamicRequest, IChatFollowup, IChatProgress, IChatProvider, IChatProviderInfo, IChatReplyFollowup, IChatRequest, IChatResponse, IChatService, IChatTransferredSessionData, IChatUserActionEvent, ISlashCommand, InteractiveSessionCopyKind, InteractiveSessionVoteDirection } from 'vs/workbench/contrib/chat/common/chatService';\nimport { IChatSlashCommandService, IChatSlashFragment } from 'vs/workbench/contrib/chat/common/chatSlashCommands';\nimport { IChatVariablesService } from 'vs/workbench/contrib/chat/common/chatVariables';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\n\nconst serializedChatKey = 'interactive.sessions';\n\nconst globalChatKey = 'chat.workspaceTransfer';\ninterface IChatTransfer {\n\ttoWorkspace: UriComponents;\n\ttimestampInMilliseconds: number;\n\tchat: ISerializableChatData;\n\tinputValue: string;\n}\nconst SESSION_TRANSFER_EXPIRATION_IN_MILLISECONDS = 1000 * 60;\n\ntype ChatProviderInvokedEvent = {\n\tproviderId: string;\n\ttimeToFirstProgress: number;\n\ttotalTime: number;\n\tresult: 'success' | 'error' | 'errorWithOutput' | 'cancelled' | 'filtered';\n\trequestType: 'string' | 'followup' | 'slashCommand';\n\tslashCommand: string | undefined;\n};\n\ntype ChatProviderInvokedClassification = {\n\tproviderId: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'The identifier of the provider that was invoked.' };\n\ttimeToFirstProgress: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; isMeasurement: true; comment: 'The time in milliseconds from invoking the provider to getting the first data.' };\n\ttotalTime: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; isMeasurement: true; comment: 'The total time it took to run the provider\\'s `provideResponseWithProgress`.' };\n\tresult: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Whether invoking the ChatProvider resulted in an error.' };\n\trequestType: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The type of request that the user made.' };\n\tslashCommand?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The type of slashCommand used.' };\n\towner: 'roblourens';\n\tcomment: 'Provides insight into the performance of Chat providers.';\n};\n\ntype ChatVoteEvent = {\n\tproviderId: string;\n\tdirection: 'up' | 'down';\n};\n\ntype ChatVoteClassification = {\n\tproviderId: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'The identifier of the provider that this response came from.' };\n\tdirection: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Whether the user voted up or down.' };\n\towner: 'roblourens';\n\tcomment: 'Provides insight into the performance of Chat providers.';\n};\n\ntype ChatCopyEvent = {\n\tproviderId: string;\n\tcopyKind: 'action' | 'toolbar';\n};\n\ntype ChatCopyClassification = {\n\tproviderId: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'The identifier of the provider that this codeblock response came from.' };\n\tcopyKind: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'How the copy was initiated.' };\n\towner: 'roblourens';\n\tcomment: 'Provides insight into the usage of Chat features.';\n};\n\ntype ChatInsertEvent = {\n\tproviderId: string;\n\tnewFile: boolean;\n};\n\ntype ChatInsertClassification = {\n\tproviderId: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'The identifier of the provider that this codeblock response came from.' };\n\tnewFile: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Whether the code was inserted into a new untitled file.' };\n\towner: 'roblourens';\n\tcomment: 'Provides insight into the usage of Chat features.';\n};\n\ntype ChatCommandEvent = {\n\tproviderId: string;\n\tcommandId: string;\n};\n\ntype ChatCommandClassification = {\n\tproviderId: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'The identifier of the provider that this codeblock response came from.' };\n\tcommandId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The id of the command that was executed.' };\n\towner: 'roblourens';\n\tcomment: 'Provides insight into the usage of Chat features.';\n};\n\ntype ChatTerminalEvent = {\n\tproviderId: string;\n\tlanguageId: string;\n};\n\ntype ChatTerminalClassification = {\n\tproviderId: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'The identifier of the provider that this codeblock response came from.' };\n\tlanguageId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The language of the code that was run in the terminal.' };\n\towner: 'roblourens';\n\tcomment: 'Provides insight into the usage of Chat features.';\n};\n\nconst maxPersistedSessions = 25;\n\nexport class ChatService extends Disposable implements IChatService {\n\tdeclare _serviceBrand: undefined;\n\n\tprivate readonly _providers = new Map<string, IChatProvider>();\n\n\tprivate readonly _sessionModels = new Map<string, ChatModel>();\n\tprivate readonly _pendingRequests = new Map<string, CancelablePromise<void>>();\n\tprivate readonly _persistedSessions: ISerializableChatsData;\n\tprivate readonly _hasProvider: IContextKey<boolean>;\n\n\tprivate _transferredSessionData: IChatTransferredSessionData | undefined;\n\tpublic get transferredSessionData(): IChatTransferredSessionData | undefined {\n\t\treturn this._transferredSessionData;\n\t}\n\n\tprivate readonly _onDidPerformUserAction = this._register(new Emitter<IChatUserActionEvent>());\n\tpublic readonly onDidPerformUserAction: Event<IChatUserActionEvent> = this._onDidPerformUserAction.event;\n\n\tprivate readonly _onDidSubmitSlashCommand = this._register(new Emitter<{ slashCommand: string; sessionId: string }>());\n\tpublic readonly onDidSubmitSlashCommand = this._onDidSubmitSlashCommand.event;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IChatSlashCommandService private readonly chatSlashCommandService: IChatSlashCommandService,\n\t\t@IChatVariablesService private readonly chatVariablesService: IChatVariablesService,\n\t\t@IChatAgentService private readonly chatAgentService: IChatAgentService\n\t) {\n\t\tsuper();\n\n\t\tthis._hasProvider = CONTEXT_PROVIDER_EXISTS.bindTo(this.contextKeyService);\n\n\t\tconst sessionData = storageService.get(serializedChatKey, StorageScope.WORKSPACE, '');\n\t\tif (sessionData) {\n\t\t\tthis._persistedSessions = this.deserializeChats(sessionData);\n\t\t\tconst countsForLog = Object.keys(this._persistedSessions).length;\n\t\t\tif (countsForLog > 0) {\n\t\t\t\tthis.trace('constructor', `Restored ${countsForLog} persisted sessions`);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._persistedSessions = {};\n\t\t}\n\n\t\tconst transferredData = this.getTransferredSessionData();\n\t\tconst transferredChat = transferredData?.chat;\n\t\tif (transferredChat) {\n\t\t\tthis.trace('constructor', `Transferred session ${transferredChat.sessionId}`);\n\t\t\tthis._persistedSessions[transferredChat.sessionId] = transferredChat;\n\t\t\tthis._transferredSessionData = { sessionId: transferredChat.sessionId, inputValue: transferredData.inputValue };\n\t\t}\n\n\t\tthis._register(storageService.onWillSaveState(() => this.saveState()));\n\t}\n\n\tprivate saveState(): void {\n\t\tlet allSessions: (ChatModel | ISerializableChatData)[] = Array.from(this._sessionModels.values())\n\t\t\t.filter(session => session.getRequests().length > 0);\n\t\tallSessions = allSessions.concat(\n\t\t\tObject.values(this._persistedSessions)\n\t\t\t\t.filter(session => !this._sessionModels.has(session.sessionId))\n\t\t\t\t.filter(session => session.requests.length));\n\t\tallSessions.sort((a, b) => (b.creationDate ?? 0) - (a.creationDate ?? 0));\n\t\tallSessions = allSessions.slice(0, maxPersistedSessions);\n\t\tif (allSessions.length) {\n\t\t\tthis.trace('onWillSaveState', `Persisting ${allSessions.length} sessions`);\n\t\t}\n\n\t\tconst serialized = JSON.stringify(allSessions);\n\n\t\tif (allSessions.length) {\n\t\t\tthis.trace('onWillSaveState', `Persisting ${serialized.length} chars`);\n\t\t}\n\n\t\tthis.storageService.store(serializedChatKey, serialized, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t}\n\n\tnotifyUserAction(action: IChatUserActionEvent): void {\n\t\tif (action.action.kind === 'vote') {\n\t\t\tthis.telemetryService.publicLog2<ChatVoteEvent, ChatVoteClassification>('interactiveSessionVote', {\n\t\t\t\tproviderId: action.providerId,\n\t\t\t\tdirection: action.action.direction === InteractiveSessionVoteDirection.Up ? 'up' : 'down'\n\t\t\t});\n\t\t} else if (action.action.kind === 'copy') {\n\t\t\tthis.telemetryService.publicLog2<ChatCopyEvent, ChatCopyClassification>('interactiveSessionCopy', {\n\t\t\t\tproviderId: action.providerId,\n\t\t\t\tcopyKind: action.action.copyType === InteractiveSessionCopyKind.Action ? 'action' : 'toolbar'\n\t\t\t});\n\t\t} else if (action.action.kind === 'insert') {\n\t\t\tthis.telemetryService.publicLog2<ChatInsertEvent, ChatInsertClassification>('interactiveSessionInsert', {\n\t\t\t\tproviderId: action.providerId,\n\t\t\t\tnewFile: !!action.action.newFile\n\t\t\t});\n\t\t} else if (action.action.kind === 'command') {\n\t\t\tconst command = CommandsRegistry.getCommand(action.action.command.commandId);\n\t\t\tconst commandId = command ? action.action.command.commandId : 'INVALID';\n\t\t\tthis.telemetryService.publicLog2<ChatCommandEvent, ChatCommandClassification>('interactiveSessionCommand', {\n\t\t\t\tproviderId: action.providerId,\n\t\t\t\tcommandId\n\t\t\t});\n\t\t} else if (action.action.kind === 'runInTerminal') {\n\t\t\tthis.telemetryService.publicLog2<ChatTerminalEvent, ChatTerminalClassification>('interactiveSessionRunInTerminal', {\n\t\t\t\tproviderId: action.providerId,\n\t\t\t\tlanguageId: action.action.languageId ?? ''\n\t\t\t});\n\t\t}\n\n\t\tthis._onDidPerformUserAction.fire(action);\n\t}\n\n\tprivate trace(method: string, message: string): void {\n\t\tthis.logService.trace(`ChatService#${method}: ${message}`);\n\t}\n\n\tprivate error(method: string, message: string): void {\n\t\tthis.logService.error(`ChatService#${method} ${message}`);\n\t}\n\n\tprivate deserializeChats(sessionData: string): ISerializableChatsData {\n\t\ttry {\n\t\t\tconst arrayOfSessions: ISerializableChatData[] = revive(JSON.parse(sessionData)); // Revive serialized URIs in session data\n\t\t\tif (!Array.isArray(arrayOfSessions)) {\n\t\t\t\tthrow new Error('Expected array');\n\t\t\t}\n\n\t\t\tconst sessions = arrayOfSessions.reduce((acc, session) => {\n\t\t\t\t// Revive serialized markdown strings in response data\n\t\t\t\tfor (const request of session.requests) {\n\t\t\t\t\tif (Array.isArray(request.response)) {\n\t\t\t\t\t\trequest.response = request.response.map((response) => {\n\t\t\t\t\t\t\tif (typeof response === 'string') {\n\t\t\t\t\t\t\t\treturn new MarkdownString(response);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn response;\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (typeof request.response === 'string') {\n\t\t\t\t\t\trequest.response = [new MarkdownString(request.response)];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tacc[session.sessionId] = session;\n\t\t\t\treturn acc;\n\t\t\t}, {} as ISerializableChatsData);\n\t\t\treturn sessions;\n\t\t} catch (err) {\n\t\t\tthis.error('deserializeChats', `Malformed session data: ${err}. [${sessionData.substring(0, 20)}${sessionData.length > 20 ? '...' : ''}]`);\n\t\t\treturn {};\n\t\t}\n\t}\n\n\tprivate getTransferredSessionData(): IChatTransfer | undefined {\n\t\tconst data: IChatTransfer[] = this.storageService.getObject(globalChatKey, StorageScope.PROFILE, []);\n\t\tconst workspaceUri = this.workspaceContextService.getWorkspace().folders[0]?.uri;\n\t\tif (!workspaceUri) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst thisWorkspace = workspaceUri.toString();\n\t\tconst currentTime = Date.now();\n\t\t// Only use transferred data if it was created recently\n\t\tconst transferred = data.find(item => URI.revive(item.toWorkspace).toString() === thisWorkspace && (currentTime - item.timestampInMilliseconds < SESSION_TRANSFER_EXPIRATION_IN_MILLISECONDS));\n\t\t// Keep data that isn't for the current workspace and that hasn't expired yet\n\t\tconst filtered = data.filter(item => URI.revive(item.toWorkspace).toString() !== thisWorkspace && (currentTime - item.timestampInMilliseconds < SESSION_TRANSFER_EXPIRATION_IN_MILLISECONDS));\n\t\tthis.storageService.store(globalChatKey, JSON.stringify(filtered), StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\treturn transferred;\n\t}\n\n\tgetHistory(): IChatDetail[] {\n\t\tconst sessions = Object.values(this._persistedSessions)\n\t\t\t.filter(session => session.requests.length > 0);\n\t\tsessions.sort((a, b) => (b.creationDate ?? 0) - (a.creationDate ?? 0));\n\n\t\treturn sessions\n\t\t\t.filter(session => !this._sessionModels.has(session.sessionId))\n\t\t\t.filter(session => !session.isImported)\n\t\t\t.map(item => {\n\t\t\t\treturn <IChatDetail>{\n\t\t\t\t\tsessionId: item.sessionId,\n\t\t\t\t\ttitle: item.requests[0]?.message || '',\n\t\t\t\t};\n\t\t\t});\n\t}\n\n\tremoveHistoryEntry(sessionId: string): void {\n\t\tdelete this._persistedSessions[sessionId];\n\t}\n\n\tstartSession(providerId: string, token: CancellationToken): ChatModel {\n\t\tthis.trace('startSession', `providerId=${providerId}`);\n\t\treturn this._startSession(providerId, undefined, token);\n\t}\n\n\tprivate _startSession(providerId: string, someSessionHistory: ISerializableChatData | undefined, token: CancellationToken): ChatModel {\n\t\tconst model = this.instantiationService.createInstance(ChatModel, providerId, someSessionHistory);\n\t\tthis._sessionModels.set(model.sessionId, model);\n\t\tconst modelInitPromise = this.initializeSession(model, token);\n\t\tmodelInitPromise.catch(err => {\n\t\t\tthis.trace('startSession', `initializeSession failed: ${err}`);\n\t\t\tmodel.setInitializationError(err);\n\t\t\tmodel.dispose();\n\t\t\tthis._sessionModels.delete(model.sessionId);\n\t\t});\n\n\t\treturn model;\n\t}\n\n\tprivate reinitializeModel(model: ChatModel): void {\n\t\tmodel.startReinitialize();\n\t\tthis.startSessionInit(model, CancellationToken.None);\n\t}\n\n\tprivate startSessionInit(model: ChatModel, token: CancellationToken): void {\n\t\tconst modelInitPromise = this.initializeSession(model, token);\n\t\tmodelInitPromise.catch(err => {\n\t\t\tthis.trace('startSession', `initializeSession failed: ${err}`);\n\t\t\tmodel.setInitializationError(err);\n\t\t\tmodel.dispose();\n\t\t\tthis._sessionModels.delete(model.sessionId);\n\t\t});\n\t}\n\n\tprivate async initializeSession(model: ChatModel, token: CancellationToken): Promise<void> {\n\t\tawait this.extensionService.activateByEvent(`onInteractiveSession:${model.providerId}`);\n\n\t\tconst provider = this._providers.get(model.providerId);\n\t\tif (!provider) {\n\t\t\tthrow new Error(`Unknown provider: ${model.providerId}`);\n\t\t}\n\n\t\tlet session: IChat | undefined;\n\t\ttry {\n\t\t\tsession = await provider.prepareSession(model.providerState, token) ?? undefined;\n\t\t} catch (err) {\n\t\t\tthis.trace('initializeSession', `Provider initializeSession threw: ${err}`);\n\t\t}\n\n\t\tif (!session) {\n\t\t\tthrow new Error('Provider returned no session');\n\t\t}\n\n\t\tthis.trace('startSession', `Provider returned session`);\n\n\t\tconst welcomeMessage = model.welcomeMessage ? undefined : await provider.provideWelcomeMessage?.(token) ?? undefined;\n\t\tconst welcomeModel = welcomeMessage && new ChatWelcomeMessageModel(\n\t\t\tmodel, welcomeMessage.map(item => typeof item === 'string' ? new MarkdownString(item) : item as IChatReplyFollowup[]));\n\n\t\tmodel.initialize(session, welcomeModel);\n\t}\n\n\tgetSession(sessionId: string): IChatModel | undefined {\n\t\treturn this._sessionModels.get(sessionId);\n\t}\n\n\tgetSessionId(sessionProviderId: number): string | undefined {\n\t\treturn Iterable.find(this._sessionModels.values(), model => model.session?.id === sessionProviderId)?.sessionId;\n\t}\n\n\tgetOrRestoreSession(sessionId: string): ChatModel | undefined {\n\t\tconst model = this._sessionModels.get(sessionId);\n\t\tif (model) {\n\t\t\treturn model;\n\t\t}\n\n\t\tconst sessionData = this._persistedSessions[sessionId];\n\t\tif (!sessionData) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (sessionId === this.transferredSessionData?.sessionId) {\n\t\t\tthis._transferredSessionData = undefined;\n\t\t}\n\n\t\treturn this._startSession(sessionData.providerId, sessionData, CancellationToken.None);\n\t}\n\n\tloadSessionFromContent(data: ISerializableChatData): IChatModel | undefined {\n\t\treturn this._startSession(data.providerId, data, CancellationToken.None);\n\t}\n\n\tasync sendRequest(sessionId: string, request: string | IChatReplyFollowup, usedSlashCommand?: ISlashCommand): Promise<{ responseCompletePromise: Promise<void> } | undefined> {\n\t\tconst messageText = typeof request === 'string' ? request : request.message;\n\t\tthis.trace('sendRequest', `sessionId: ${sessionId}, message: ${messageText.substring(0, 20)}${messageText.length > 20 ? '[...]' : ''}}`);\n\t\tif (!messageText.trim()) {\n\t\t\tthis.trace('sendRequest', 'Rejected empty message');\n\t\t\treturn;\n\t\t}\n\n\t\tconst model = this._sessionModels.get(sessionId);\n\t\tif (!model) {\n\t\t\tthrow new Error(`Unknown session: ${sessionId}`);\n\t\t}\n\n\t\tawait model.waitForInitialization();\n\t\tconst provider = this._providers.get(model.providerId);\n\t\tif (!provider) {\n\t\t\tthrow new Error(`Unknown provider: ${model.providerId}`);\n\t\t}\n\n\t\tif (this._pendingRequests.has(sessionId)) {\n\t\t\tthis.trace('sendRequest', `Session ${sessionId} already has a pending request`);\n\t\t\treturn;\n\t\t}\n\n\t\t// This method is only returning whether the request was accepted - don't block on the actual request\n\t\treturn { responseCompletePromise: this._sendRequestAsync(model, provider, request, usedSlashCommand) };\n\t}\n\n\tprivate async _sendRequestAsync(model: ChatModel, provider: IChatProvider, message: string | IChatReplyFollowup, usedSlashCommand?: ISlashCommand): Promise<void> {\n\t\tconst resolvedAgent = typeof message === 'string' ? this.resolveAgent(message) : undefined;\n\t\tconst request = model.addRequest(message, resolvedAgent);\n\n\t\tconst resolvedCommand = typeof message === 'string' && message.startsWith('/') ? await this.handleSlashCommand(model.sessionId, message) : message;\n\n\n\t\tlet gotProgress = false;\n\t\tconst requestType = typeof message === 'string' ?\n\t\t\t(message.startsWith('/') ? 'slashCommand' : 'string') :\n\t\t\t'followup';\n\n\t\tconst rawResponsePromise = createCancelablePromise<void>(async token => {\n\t\t\tconst progressCallback = (progress: IChatProgress) => {\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tgotProgress = true;\n\t\t\t\tif ('content' in progress) {\n\t\t\t\t\tthis.trace('sendRequest', `Provider returned progress for session ${model.sessionId}, ${typeof progress.content === 'string' ? progress.content.length : progress.content.value.length} chars`);\n\t\t\t\t} else if ('placeholder' in progress) {\n\t\t\t\t\tthis.trace('sendRequest', `Provider returned placeholder for session ${model.sessionId}, ${progress.placeholder}`);\n\t\t\t\t} else if (isCompleteInteractiveProgressTreeData(progress)) {\n\t\t\t\t\t// This isn't exposed in API\n\t\t\t\t\tthis.trace('sendRequest', `Provider returned tree data for session ${model.sessionId}, ${progress.treeData.label}`);\n\t\t\t\t} else {\n\t\t\t\t\tthis.trace('sendRequest', `Provider returned id for session ${model.sessionId}, ${progress.requestId}`);\n\t\t\t\t}\n\n\t\t\t\tmodel.acceptResponseProgress(request, progress);\n\t\t\t};\n\n\t\t\tconst stopWatch = new StopWatch(false);\n\t\t\tconst listener = token.onCancellationRequested(() => {\n\t\t\t\tthis.trace('sendRequest', `Request for session ${model.sessionId} was cancelled`);\n\t\t\t\tthis.telemetryService.publicLog2<ChatProviderInvokedEvent, ChatProviderInvokedClassification>('interactiveSessionProviderInvoked', {\n\t\t\t\t\tproviderId: provider.id,\n\t\t\t\t\ttimeToFirstProgress: -1,\n\t\t\t\t\t// Normally timings happen inside the EH around the actual provider. For cancellation we can measure how long the user waited before cancelling\n\t\t\t\t\ttotalTime: stopWatch.elapsed(),\n\t\t\t\t\tresult: 'cancelled',\n\t\t\t\t\trequestType,\n\t\t\t\t\tslashCommand: usedSlashCommand?.command\n\t\t\t\t});\n\n\t\t\t\tmodel.cancelRequest(request);\n\t\t\t});\n\n\t\t\ttry {\n\t\t\t\tif (usedSlashCommand?.command) {\n\t\t\t\t\tthis._onDidSubmitSlashCommand.fire({ slashCommand: usedSlashCommand.command, sessionId: model.sessionId });\n\t\t\t\t}\n\n\t\t\t\tlet rawResponse: IChatResponse | null | undefined;\n\t\t\t\tlet slashCommandFollowups: IChatFollowup[] | void = [];\n\n\t\t\t\tif (typeof message === 'string' && resolvedAgent) {\n\t\t\t\t\tconst history: IChatMessage[] = [];\n\t\t\t\t\tfor (const request of model.getRequests()) {\n\t\t\t\t\t\tif (typeof request.message !== 'string' || !request.response) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (isMarkdownString(request.response.response.value)) {\n\t\t\t\t\t\t\thistory.push({ role: ChatMessageRole.User, content: request.message });\n\t\t\t\t\t\t\thistory.push({ role: ChatMessageRole.Assistant, content: request.response.response.value.value });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst agentResult = await this.chatAgentService.invokeAgent(resolvedAgent.id, message.substring(resolvedAgent.id.length + 1).trimStart(), new Progress<IChatSlashFragment>(p => {\n\t\t\t\t\t\tconst { content } = p;\n\t\t\t\t\t\tconst data = isCompleteInteractiveProgressTreeData(content) ? content : { content };\n\t\t\t\t\t\tprogressCallback(data);\n\t\t\t\t\t}), history, token);\n\t\t\t\t\tslashCommandFollowups = agentResult?.followUp;\n\t\t\t\t\trawResponse = { session: model.session! };\n\t\t\t\t} else if ((typeof resolvedCommand === 'string' && typeof message === 'string' && this.chatSlashCommandService.hasCommand(resolvedCommand))) {\n\t\t\t\t\t// contributed slash commands\n\t\t\t\t\t// TODO: spell this out in the UI\n\t\t\t\t\tconst history: IChatMessage[] = [];\n\t\t\t\t\tfor (const request of model.getRequests()) {\n\t\t\t\t\t\tif (typeof request.message !== 'string' || !request.response) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (isMarkdownString(request.response.response.value)) {\n\t\t\t\t\t\t\thistory.push({ role: ChatMessageRole.User, content: request.message });\n\t\t\t\t\t\t\thistory.push({ role: ChatMessageRole.Assistant, content: request.response.response.value.value });\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst commandResult = await this.chatSlashCommandService.executeCommand(resolvedCommand, message.substring(resolvedCommand.length + 1).trimStart(), new Progress<IChatSlashFragment>(p => {\n\t\t\t\t\t\tconst { content } = p;\n\t\t\t\t\t\tconst data = isCompleteInteractiveProgressTreeData(content) ? content : { content };\n\t\t\t\t\t\tprogressCallback(data);\n\t\t\t\t\t}), history, token);\n\t\t\t\t\tslashCommandFollowups = commandResult?.followUp;\n\t\t\t\t\trawResponse = { session: model.session! };\n\n\t\t\t\t} else {\n\t\t\t\t\tconst request: IChatRequest = {\n\t\t\t\t\t\tsession: model.session!,\n\t\t\t\t\t\tmessage: resolvedCommand,\n\t\t\t\t\t\tvariables: {}\n\t\t\t\t\t};\n\n\t\t\t\t\tif (typeof request.message === 'string') {\n\t\t\t\t\t\tconst varResult = await this.chatVariablesService.resolveVariables(request.message, model, token);\n\t\t\t\t\t\trequest.variables = varResult.variables;\n\t\t\t\t\t\trequest.message = varResult.prompt;\n\t\t\t\t\t}\n\n\t\t\t\t\trawResponse = await provider.provideReply(request, progressCallback, token);\n\t\t\t\t}\n\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tif (!rawResponse) {\n\t\t\t\t\t\tthis.trace('sendRequest', `Provider returned no response for session ${model.sessionId}`);\n\t\t\t\t\t\trawResponse = { session: model.session!, errorDetails: { message: localize('emptyResponse', \"Provider returned null response\") } };\n\t\t\t\t\t}\n\n\t\t\t\t\tconst result = rawResponse.errorDetails?.responseIsFiltered ? 'filtered' :\n\t\t\t\t\t\trawResponse.errorDetails && gotProgress ? 'errorWithOutput' :\n\t\t\t\t\t\t\trawResponse.errorDetails ? 'error' :\n\t\t\t\t\t\t\t\t'success';\n\t\t\t\t\tthis.telemetryService.publicLog2<ChatProviderInvokedEvent, ChatProviderInvokedClassification>('interactiveSessionProviderInvoked', {\n\t\t\t\t\t\tproviderId: provider.id,\n\t\t\t\t\t\ttimeToFirstProgress: rawResponse.timings?.firstProgress ?? 0,\n\t\t\t\t\t\ttotalTime: rawResponse.timings?.totalElapsed ?? 0,\n\t\t\t\t\t\tresult,\n\t\t\t\t\t\trequestType,\n\t\t\t\t\t\tslashCommand: usedSlashCommand?.command\n\t\t\t\t\t});\n\t\t\t\t\tmodel.setResponse(request, rawResponse);\n\t\t\t\t\tthis.trace('sendRequest', `Provider returned response for session ${model.sessionId}`);\n\n\t\t\t\t\t// TODO refactor this or rethink the API https://github.com/microsoft/vscode-copilot/issues/593\n\t\t\t\t\tif (provider.provideFollowups) {\n\t\t\t\t\t\tPromise.resolve(provider.provideFollowups(model.session!, CancellationToken.None)).then(providerFollowups => {\n\t\t\t\t\t\t\tconst allFollowups = providerFollowups?.concat(slashCommandFollowups ?? []);\n\t\t\t\t\t\t\tmodel.setFollowups(request, allFollowups ?? undefined);\n\t\t\t\t\t\t\tmodel.completeResponse(request);\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (slashCommandFollowups?.length) {\n\t\t\t\t\t\tmodel.setFollowups(request, slashCommandFollowups);\n\t\t\t\t\t\tmodel.completeResponse(request);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmodel.completeResponse(request);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tlistener.dispose();\n\t\t\t}\n\t\t});\n\t\tthis._pendingRequests.set(model.sessionId, rawResponsePromise);\n\t\trawResponsePromise.finally(() => {\n\t\t\tthis._pendingRequests.delete(model.sessionId);\n\t\t});\n\t\treturn rawResponsePromise;\n\t}\n\n\tasync removeRequest(sessionId: string, requestId: string): Promise<void> {\n\t\tconst model = this._sessionModels.get(sessionId);\n\t\tif (!model) {\n\t\t\tthrow new Error(`Unknown session: ${sessionId}`);\n\t\t}\n\n\t\tawait model.waitForInitialization();\n\t\tconst provider = this._providers.get(model.providerId);\n\t\tif (!provider) {\n\t\t\tthrow new Error(`Unknown provider: ${model.providerId}`);\n\t\t}\n\n\t\tmodel.removeRequest(requestId);\n\t\tprovider.removeRequest?.(model.session!, requestId);\n\t}\n\n\tprivate async handleSlashCommand(sessionId: string, command: string): Promise<string> {\n\t\tconst slashCommands = await this.getSlashCommands(sessionId, CancellationToken.None);\n\t\tfor (const slashCommand of slashCommands ?? []) {\n\t\t\tif (command.startsWith(`/${slashCommand.command}`) && this.chatSlashCommandService.hasCommand(slashCommand.command)) {\n\t\t\t\treturn slashCommand.command;\n\t\t\t}\n\t\t}\n\t\treturn command;\n\t}\n\n\tprivate resolveAgent(prompt: string): IChatAgentData | undefined {\n\t\tprompt = prompt.trim();\n\t\tconst agents = this.chatAgentService.getAgents();\n\t\tif (!prompt.startsWith('@')) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn agents.find(a => prompt.match(new RegExp(`@${a.id}($|\\\\s)`)));\n\t}\n\n\tasync getSlashCommands(sessionId: string, token: CancellationToken): Promise<ISlashCommand[] | undefined> {\n\t\tconst model = this._sessionModels.get(sessionId);\n\t\tif (!model) {\n\t\t\tthrow new Error(`Unknown session: ${sessionId}`);\n\t\t}\n\n\t\tawait model.waitForInitialization();\n\t\tconst provider = this._providers.get(model.providerId);\n\t\tif (!provider) {\n\t\t\tthrow new Error(`Unknown provider: ${model.providerId}`);\n\t\t}\n\n\t\tconst serviceResults = this.chatSlashCommandService.getCommands().map(data => {\n\t\t\treturn <ISlashCommand>{\n\t\t\t\tcommand: data.command,\n\t\t\t\tdetail: data.detail,\n\t\t\t\tsortText: data.sortText,\n\t\t\t\texecuteImmediately: data.executeImmediately\n\t\t\t};\n\t\t});\n\n\t\tconst mainProviderRequest = provider.provideSlashCommands?.(model.session!, token);\n\n\t\ttry {\n\t\t\tconst providerResults = await mainProviderRequest;\n\t\t\tif (providerResults) {\n\t\t\t\treturn providerResults.concat(serviceResults);\n\t\t\t}\n\t\t\treturn serviceResults;\n\n\t\t} catch (e) {\n\t\t\tthis.logService.error(e);\n\t\t\treturn serviceResults;\n\t\t}\n\t}\n\n\tasync addRequest(context: any): Promise<void> {\n\t\t// This and resolveRequest are not currently used by any scenario, but leave for future use\n\n\t\t// TODO How to decide which session this goes to?\n\t\tconst model = Iterable.first(this._sessionModels.values());\n\t\tif (!model) {\n\t\t\t// If no session, create one- how and is the service the right place to decide this?\n\t\t\tthis.trace('addRequest', 'No session available');\n\t\t\treturn;\n\t\t}\n\n\t\tconst provider = this._providers.get(model.providerId);\n\t\tif (!provider || !provider.resolveRequest) {\n\t\t\tthis.trace('addRequest', 'No provider available');\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis.trace('addRequest', `Calling resolveRequest for session ${model.sessionId}`);\n\t\tconst request = await provider.resolveRequest(model.session!, context, CancellationToken.None);\n\t\tif (!request) {\n\t\t\tthis.trace('addRequest', `Provider returned no request for session ${model.sessionId}`);\n\t\t\treturn;\n\t\t}\n\n\t\t// Maybe this API should queue a request after the current one?\n\t\tthis.trace('addRequest', `Sending resolved request for session ${model.sessionId}`);\n\t\tthis.sendRequest(model.sessionId, request.message);\n\t}\n\n\tasync sendRequestToProvider(sessionId: string, message: IChatDynamicRequest): Promise<void> {\n\t\tthis.trace('sendRequestToProvider', `sessionId: ${sessionId}`);\n\t\tawait this.sendRequest(sessionId, message.message);\n\t}\n\n\tgetProviders(): string[] {\n\t\treturn Array.from(this._providers.keys());\n\t}\n\n\tasync addCompleteRequest(sessionId: string, message: string, response: IChatCompleteResponse): Promise<void> {\n\t\tthis.trace('addCompleteRequest', `message: ${message}`);\n\n\t\tconst model = this._sessionModels.get(sessionId);\n\t\tif (!model) {\n\t\t\tthrow new Error(`Unknown session: ${sessionId}`);\n\t\t}\n\n\t\tawait model.waitForInitialization();\n\t\tconst request = model.addRequest(message, undefined);\n\t\tif (typeof response.message === 'string') {\n\t\t\tmodel.acceptResponseProgress(request, { content: response.message });\n\t\t} else {\n\t\t\tfor (const part of response.message) {\n\t\t\t\tconst progress = isMarkdownString(part) ? { content: part.value } : { treeData: part };\n\t\t\t\tmodel.acceptResponseProgress(request, progress, true);\n\t\t\t}\n\t\t}\n\t\tmodel.setResponse(request, {\n\t\t\tsession: model.session!,\n\t\t\terrorDetails: response.errorDetails,\n\t\t});\n\t\tif (response.followups !== undefined) {\n\t\t\tmodel.setFollowups(request, response.followups);\n\t\t}\n\t\tmodel.completeResponse(request);\n\t}\n\n\tcancelCurrentRequestForSession(sessionId: string): void {\n\t\tthis.trace('cancelCurrentRequestForSession', `sessionId: ${sessionId}`);\n\t\tthis._pendingRequests.get(sessionId)?.cancel();\n\t}\n\n\tclearSession(sessionId: string): void {\n\t\tthis.trace('clearSession', `sessionId: ${sessionId}`);\n\t\tconst model = this._sessionModels.get(sessionId);\n\t\tif (!model) {\n\t\t\tthrow new Error(`Unknown session: ${sessionId}`);\n\t\t}\n\n\t\tthis._persistedSessions[sessionId] = model.toJSON();\n\n\t\tmodel.dispose();\n\t\tthis._sessionModels.delete(sessionId);\n\t\tthis._pendingRequests.get(sessionId)?.cancel();\n\t}\n\n\tregisterProvider(provider: IChatProvider): IDisposable {\n\t\tthis.trace('registerProvider', `Adding new chat provider`);\n\n\t\tif (this._providers.has(provider.id)) {\n\t\t\tthrow new Error(`Provider ${provider.id} already registered`);\n\t\t}\n\n\t\tthis._providers.set(provider.id, provider);\n\t\tthis._hasProvider.set(true);\n\n\t\tArray.from(this._sessionModels.values())\n\t\t\t.filter(model => model.providerId === provider.id)\n\t\t\t.forEach(model => this.reinitializeModel(model));\n\n\t\treturn toDisposable(() => {\n\t\t\tthis.trace('registerProvider', `Disposing chat provider`);\n\t\t\tthis._providers.delete(provider.id);\n\t\t\tthis._hasProvider.set(this._providers.size > 0);\n\t\t});\n\t}\n\n\tgetProviderInfos(): IChatProviderInfo[] {\n\t\treturn Array.from(this._providers.values()).map(provider => {\n\t\t\treturn {\n\t\t\t\tid: provider.id,\n\t\t\t\tdisplayName: provider.displayName\n\t\t\t};\n\t\t});\n\t}\n\n\ttransferChatSession(transferredSessionData: IChatTransferredSessionData, toWorkspace: URI): void {\n\t\tconst model = Iterable.find(this._sessionModels.values(), model => model.sessionId === transferredSessionData.sessionId);\n\t\tif (!model) {\n\t\t\tthrow new Error(`Failed to transfer session. Unknown session ID: ${transferredSessionData.sessionId}`);\n\t\t}\n\n\t\tconst existingRaw: IChatTransfer[] = this.storageService.getObject(globalChatKey, StorageScope.PROFILE, []);\n\t\texistingRaw.push({\n\t\t\tchat: model.toJSON(),\n\t\t\ttimestampInMilliseconds: Date.now(),\n\t\t\ttoWorkspace: toWorkspace,\n\t\t\tinputValue: transferredSessionData.inputValue,\n\t\t});\n\n\t\tthis.storageService.store(globalChatKey, JSON.stringify(existingRaw), StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\tthis.trace('transferChatSession', `Transferred session ${model.sessionId} to workspace ${toWorkspace.toString()}`);\n\t}\n}\n"]}