{"version":3,"sources":["vs/workbench/contrib/chat/common/chatAgents.ts"],"names":[],"mappings":"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","file":"chatAgents.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { Iterable } from 'vs/base/common/iterator';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport { Disposable, DisposableStore, IDisposable, combinedDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IProgress } from 'vs/platform/progress/common/progress';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { IChatMessage } from 'vs/workbench/contrib/chat/common/chatProvider';\nimport { IChatFollowup, IChatResponseProgressFileTreeData } from 'vs/workbench/contrib/chat/common/chatService';\nimport { IExtensionService, isProposedApiEnabled } from 'vs/workbench/services/extensions/common/extensions';\nimport { ExtensionsRegistry } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\n\n//#region extension point\n\nconst agentItem: IJSONSchema = {\n\ttype: 'object',\n\trequired: ['agent', 'detail'],\n\tproperties: {\n\t\tagent: {\n\t\t\ttype: 'string',\n\t\t\tmarkdownDescription: localize('agent', \"The name of the agent which will be used as prefix.\")\n\t\t},\n\t\tdetail: {\n\t\t\ttype: 'string',\n\t\t\tmarkdownDescription: localize('details', \"The details of the agent.\")\n\t\t},\n\t}\n};\n\nconst agentItems: IJSONSchema = {\n\tdescription: localize('vscode.extension.contributes.slashes', \"Contributes agents to chat\"),\n\toneOf: [\n\t\tagentItem,\n\t\t{\n\t\t\ttype: 'array',\n\t\t\titems: agentItem\n\t\t}\n\t]\n};\n\nexport const agentsExtPoint = ExtensionsRegistry.registerExtensionPoint<IChatAgentData | IChatAgentData[]>({\n\textensionPoint: 'agents',\n\tjsonSchema: agentItems\n});\n\n//#region agent service, commands etc\n\nexport interface IChatAgentData {\n\tid: string;\n\tmetadata: IChatAgentMetadata;\n}\n\nfunction isAgentData(data: any): data is IChatAgentData {\n\treturn typeof data === 'object' && data &&\n\t\ttypeof data.id === 'string' &&\n\t\ttypeof data.detail === 'string';\n\t// (typeof data.sortText === 'undefined' || typeof data.sortText === 'string') &&\n\t// (typeof data.executeImmediately === 'undefined' || typeof data.executeImmediately === 'boolean');\n}\n\nexport interface IChatAgentFragment {\n\tcontent: string | { treeData: IChatResponseProgressFileTreeData };\n}\n\nexport interface IChatAgentCommand {\n\tname: string;\n\tdescription: string;\n}\n\nexport interface IChatAgentMetadata {\n\tdescription: string;\n\tsubCommands: IChatAgentCommand[];\n\trequireCommand?: boolean; // Do some agents not have a default action?\n\tisImplicit?: boolean; // Only @workspace. slash commands get promoted to the top-level and this agent is invoked when those are used\n\tfullName?: string;\n\ticon?: URI;\n}\n\nexport type IChatAgentCallback = { (prompt: string, progress: IProgress<IChatAgentFragment>, history: IChatMessage[], token: CancellationToken): Promise<{ followUp: IChatFollowup[] } | void> };\n\nexport const IChatAgentService = createDecorator<IChatAgentService>('chatAgentService');\n\nexport interface IChatAgentService {\n\t_serviceBrand: undefined;\n\treadonly onDidChangeAgents: Event<void>;\n\tregisterAgentData(data: IChatAgentData): IDisposable;\n\tregisterAgentCallback(id: string, callback: IChatAgentCallback): IDisposable;\n\tregisterAgent(data: IChatAgentData, callback: IChatAgentCallback): IDisposable;\n\tinvokeAgent(id: string, prompt: string, progress: IProgress<IChatAgentFragment>, history: IChatMessage[], token: CancellationToken): Promise<{ followUp: IChatFollowup[] } | void>;\n\tgetAgents(): Array<IChatAgentData>;\n\thasAgent(id: string): boolean;\n}\n\ntype Tuple = { data: IChatAgentData; callback?: IChatAgentCallback };\n\nexport class ChatAgentService extends Disposable implements IChatAgentService {\n\n\tpublic static readonly AGENT_LEADER = '@';\n\n\tdeclare _serviceBrand: undefined;\n\n\tprivate readonly _agents = new Map<string, Tuple>();\n\n\tprivate readonly _onDidChangeAgents = this._register(new Emitter<void>());\n\treadonly onDidChangeAgents: Event<void> = this._onDidChangeAgents.event;\n\n\tconstructor(@IExtensionService private readonly _extensionService: IExtensionService) {\n\t\tsuper();\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\t\tthis._agents.clear();\n\t}\n\n\tregisterAgentData(data: IChatAgentData): IDisposable {\n\t\tif (this._agents.has(data.id)) {\n\t\t\tthrow new Error(`Already registered an agent with id ${data.id}}`);\n\t\t}\n\t\tthis._agents.set(data.id, { data });\n\t\tthis._onDidChangeAgents.fire();\n\n\t\treturn toDisposable(() => {\n\t\t\tif (this._agents.delete(data.id)) {\n\t\t\t\tthis._onDidChangeAgents.fire();\n\t\t\t}\n\t\t});\n\t}\n\n\tregisterAgentCallback(id: string, agentCallback: IChatAgentCallback): IDisposable {\n\t\tconst data = this._agents.get(id);\n\t\tif (!data) {\n\t\t\tthrow new Error(`No agent with id ${id} registered`);\n\t\t}\n\t\tdata.callback = agentCallback;\n\t\treturn toDisposable(() => data.callback = undefined);\n\t}\n\n\tregisterAgent(data: IChatAgentData, callback: IChatAgentCallback): IDisposable {\n\t\treturn combinedDisposable(\n\t\t\tthis.registerAgentData(data),\n\t\t\tthis.registerAgentCallback(data.id, callback)\n\t\t);\n\t}\n\n\tgetAgents(): Array<IChatAgentData> {\n\t\treturn Array.from(this._agents.values(), v => v.data);\n\t}\n\n\thasAgent(id: string): boolean {\n\t\treturn this._agents.has(id);\n\t}\n\n\tasync invokeAgent(id: string, prompt: string, progress: IProgress<IChatAgentFragment>, history: IChatMessage[], token: CancellationToken): Promise<{ followUp: IChatFollowup[] } | void> {\n\t\tconst data = this._agents.get(id);\n\t\tif (!data) {\n\t\t\tthrow new Error('No agent with id ${id} NOT registered');\n\t\t}\n\t\tif (!data.callback) {\n\t\t\tawait this._extensionService.activateByEvent(`onChatAgent:${id}`);\n\t\t}\n\t\tif (!data.callback) {\n\t\t\tthrow new Error(`No agent with id ${id} NOT resolved`);\n\t\t}\n\n\t\treturn await data.callback(prompt, progress, history, token);\n\t}\n}\n\nclass ChatAgentContribution implements IWorkbenchContribution {\n\tconstructor(@IChatAgentService chatAgentService: IChatAgentService) {\n\t\tconst contributions = new DisposableStore();\n\n\t\tagentsExtPoint.setHandler(extensions => {\n\t\t\tcontributions.clear();\n\n\t\t\tfor (const entry of extensions) {\n\t\t\t\tif (!isProposedApiEnabled(entry.description, 'chatAgents')) {\n\t\t\t\t\tentry.collector.error(`The ${agentsExtPoint.name} is proposed API`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst { value } = entry;\n\n\t\t\t\tfor (const candidate of Iterable.wrap(value)) {\n\n\t\t\t\t\tif (!isAgentData(candidate)) {\n\t\t\t\t\t\tentry.collector.error(localize('invalid', \"Invalid {0}: {1}\", agentsExtPoint.name, JSON.stringify(candidate)));\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tcontributions.add(chatAgentService.registerAgentData({ ...candidate }));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(ChatAgentContribution, LifecyclePhase.Restored);\n"]}