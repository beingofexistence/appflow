{"version":3,"sources":["vs/workbench/contrib/chat/common/chatSlashCommands.ts"],"names":[],"mappings":"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","file":"chatSlashCommands.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { Iterable } from 'vs/base/common/iterator';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport { Disposable, DisposableStore, IDisposable, combinedDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { localize } from 'vs/nls';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IProgress } from 'vs/platform/progress/common/progress';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { IChatMessage } from 'vs/workbench/contrib/chat/common/chatProvider';\nimport { IChatFollowup, IChatResponseProgressFileTreeData } from 'vs/workbench/contrib/chat/common/chatService';\nimport { IExtensionService, isProposedApiEnabled } from 'vs/workbench/services/extensions/common/extensions';\nimport { ExtensionsRegistry } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\n\n//#region extension point\n\nconst slashItem: IJSONSchema = {\n\ttype: 'object',\n\trequired: ['command', 'detail'],\n\tproperties: {\n\t\tcommand: {\n\t\t\ttype: 'string',\n\t\t\tmarkdownDescription: localize('command', \"The name of the slash command which will be used as prefix.\")\n\t\t},\n\t\tdetail: {\n\t\t\ttype: 'string',\n\t\t\tmarkdownDescription: localize('details', \"The details of the slash command.\")\n\t\t},\n\t}\n};\n\nconst slashItems: IJSONSchema = {\n\tdescription: localize('vscode.extension.contributes.slashes', \"Contributes slash commands to chat\"),\n\toneOf: [\n\t\tslashItem,\n\t\t{\n\t\t\ttype: 'array',\n\t\t\titems: slashItem\n\t\t}\n\t]\n};\n\nexport const slashesExtPoint = ExtensionsRegistry.registerExtensionPoint<IChatSlashData | IChatSlashData[]>({\n\textensionPoint: 'slashes',\n\tjsonSchema: slashItems\n});\n\n//#region slash service, commands etc\n\nexport interface IChatSlashData {\n\tcommand: string;\n\tdetail: string;\n\tsortText?: string;\n\n\t/**\n\t * Whether the command should execute as soon\n\t * as it is entered. Defaults to `false`.\n\t */\n\texecuteImmediately?: boolean;\n}\n\nfunction isChatSlashData(data: any): data is IChatSlashData {\n\treturn typeof data === 'object' && data &&\n\t\ttypeof data.command === 'string' &&\n\t\ttypeof data.detail === 'string' &&\n\t\t(typeof data.sortText === 'undefined' || typeof data.sortText === 'string') &&\n\t\t(typeof data.executeImmediately === 'undefined' || typeof data.executeImmediately === 'boolean');\n}\n\nexport interface IChatSlashFragment {\n\tcontent: string | { treeData: IChatResponseProgressFileTreeData };\n}\n\nexport type IChatSlashCallback = { (prompt: string, progress: IProgress<IChatSlashFragment>, history: IChatMessage[], token: CancellationToken): Promise<{ followUp: IChatFollowup[] } | void> };\n\nexport const IChatSlashCommandService = createDecorator<IChatSlashCommandService>('chatSlashCommandService');\n\nexport interface IChatSlashCommandService {\n\t_serviceBrand: undefined;\n\treadonly onDidChangeCommands: Event<void>;\n\tregisterSlashData(data: IChatSlashData): IDisposable;\n\tregisterSlashCallback(id: string, command: IChatSlashCallback): IDisposable;\n\tregisterSlashCommand(data: IChatSlashData, command: IChatSlashCallback): IDisposable;\n\texecuteCommand(id: string, prompt: string, progress: IProgress<IChatSlashFragment>, history: IChatMessage[], token: CancellationToken): Promise<{ followUp: IChatFollowup[] } | void>;\n\tgetCommands(): Array<IChatSlashData>;\n\thasCommand(id: string): boolean;\n}\n\ntype Tuple = { data: IChatSlashData; command?: IChatSlashCallback };\n\nexport class ChatSlashCommandService extends Disposable implements IChatSlashCommandService {\n\n\tdeclare _serviceBrand: undefined;\n\n\tprivate readonly _commands = new Map<string, Tuple>();\n\n\tprivate readonly _onDidChangeCommands = this._register(new Emitter<void>());\n\treadonly onDidChangeCommands: Event<void> = this._onDidChangeCommands.event;\n\n\tconstructor(@IExtensionService private readonly _extensionService: IExtensionService) {\n\t\tsuper();\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\t\tthis._commands.clear();\n\t}\n\n\tregisterSlashData(data: IChatSlashData): IDisposable {\n\t\tif (this._commands.has(data.command)) {\n\t\t\tthrow new Error(`Already registered a command with id ${data.command}}`);\n\t\t}\n\t\tthis._commands.set(data.command, { data });\n\t\tthis._onDidChangeCommands.fire();\n\n\t\treturn toDisposable(() => {\n\t\t\tif (this._commands.delete(data.command)) {\n\t\t\t\tthis._onDidChangeCommands.fire();\n\t\t\t}\n\t\t});\n\t}\n\n\tregisterSlashCallback(id: string, command: IChatSlashCallback): IDisposable {\n\t\tconst data = this._commands.get(id);\n\t\tif (!data) {\n\t\t\tthrow new Error(`No command with id ${id} registered`);\n\t\t}\n\t\tdata.command = command;\n\t\treturn toDisposable(() => data.command = undefined);\n\t}\n\n\tregisterSlashCommand(data: IChatSlashData, command: IChatSlashCallback): IDisposable {\n\t\treturn combinedDisposable(\n\t\t\tthis.registerSlashData(data),\n\t\t\tthis.registerSlashCallback(data.command, command)\n\t\t);\n\t}\n\n\tgetCommands(): Array<IChatSlashData> {\n\t\treturn Array.from(this._commands.values(), v => v.data);\n\t}\n\n\thasCommand(id: string): boolean {\n\t\treturn this._commands.has(id);\n\t}\n\n\tasync executeCommand(id: string, prompt: string, progress: IProgress<IChatSlashFragment>, history: IChatMessage[], token: CancellationToken): Promise<{ followUp: IChatFollowup[] } | void> {\n\t\tconst data = this._commands.get(id);\n\t\tif (!data) {\n\t\t\tthrow new Error('No command with id ${id} NOT registered');\n\t\t}\n\t\tif (!data.command) {\n\t\t\tawait this._extensionService.activateByEvent(`onSlash:${id}`);\n\t\t}\n\t\tif (!data.command) {\n\t\t\tthrow new Error(`No command with id ${id} NOT resolved`);\n\t\t}\n\n\t\treturn await data.command(prompt, progress, history, token);\n\t}\n}\n\nclass ChatSlashCommandContribution implements IWorkbenchContribution {\n\tconstructor(@IChatSlashCommandService slashCommandService: IChatSlashCommandService) {\n\t\tconst contributions = new DisposableStore();\n\n\t\tslashesExtPoint.setHandler(extensions => {\n\t\t\tcontributions.clear();\n\n\t\t\tfor (const entry of extensions) {\n\t\t\t\tif (!isProposedApiEnabled(entry.description, 'chatSlashCommands')) {\n\t\t\t\t\tentry.collector.error(`The ${slashesExtPoint.name} is proposed API`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst { value } = entry;\n\n\t\t\t\tfor (const candidate of Iterable.wrap(value)) {\n\n\t\t\t\t\tif (!isChatSlashData(candidate)) {\n\t\t\t\t\t\tentry.collector.error(localize('invalid', \"Invalid {0}: {1}\", slashesExtPoint.name, JSON.stringify(candidate)));\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tcontributions.add(slashCommandService.registerSlashData({ ...candidate }));\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(ChatSlashCommandContribution, LifecyclePhase.Restored);\n"]}