{"version":3,"sources":["vs/workbench/contrib/chat/common/chatContextKeys.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAKnF,QAAA,IAAI,GAA+B,IAAI,gBAAG,CAAoB,kCAAkC,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,IAAA,cAAQ,EAAC,CAAyC,EAAE,IAA6D,CAAC,EAAE,CAAC,CAAC;IAC/P,QAAA,IAAI,GAAoB,IAAI,gBAAG,CAAmB,yBAAyB,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,EAAE,IAAA,cAAQ,EAAC,CAAgC,EAAE,IAAoH,CAAC,EAAE,CAAC,CAAC;IACpR,QAAA,IAAI,GAAwB,IAAI,gBAAG,CAAoB,6BAA6B,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,IAAA,cAAQ,EAAC,CAAsB,EAAE,IAA6D,CAAC,EAAE,CAAC,CAAC;IAChO,QAAA,IAAI,GAA+B,IAAI,gBAAG,CAAoB,8BAA8B,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,IAAA,cAAQ,EAAC,CAAqC,EAAE,IAAqD,CAAC,EAAE,CAAC,CAAC;IAE/O,QAAA,IAAI,GAAe,IAAI,gBAAG,CAAoB,cAAc,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,IAAA,cAAQ,EAAC,CAAc,EAAE,IAA8B,CAAC,EAAE,CAAC,CAAC;IACjK,QAAA,IAAI,GAAc,IAAI,gBAAG,CAAoB,aAAa,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,IAAA,cAAQ,EAAC,CAAa,EAAE,IAA4B,CAAC,EAAE,CAAC,CAAC;IAE5J,QAAA,IAAI,GAA0B,IAAI,gBAAG,CAAoB,kBAAkB,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,IAAA,cAAQ,EAAC,CAAyB,EAAE,IAAoC,CAAC,EAAE,CAAC,CAAC;IACjM,QAAA,IAAI,GAAoB,IAAI,gBAAG,CAAoB,aAAa,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,IAAA,cAAQ,EAAC,CAAoB,EAAE,IAAwD,CAAC,EAAE,CAAC,CAAC;IACrM,QAAA,IAAI,GAAsB,IAAI,gBAAG,CAAoB,QAAQ,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,IAAA,cAAQ,EAAC,CAAQ,EAAE,IAAyD,CAAC,EAAE,CAAC,CAAC;IACvL,QAAA,IAAI,GAAmB,IAAI,gBAAG,CAAoB,iBAAiB,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,IAAA,cAAQ,EAAC,CAAiB,EAAE,IAAgH,CAAC,EAAE,CAAC,CAAC;IAE7P,QAAA,IAAI,GAAsB,IAAI,gBAAG,CAAoB,iBAAiB,EAAE,KAAK,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAE,IAAA,cAAQ,EAAC,EAAiB,EAAE,IAAmD,CAAC,EAAE,CAAC,CAAC","file":"chatContextKeys.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { RawContextKey } from 'vs/platform/contextkey/common/contextkey';\n\nexport const CONTEXT_RESPONSE_HAS_PROVIDER_ID = new RawContextKey<boolean>('chatSessionResponseHasProviderId', false, { type: 'boolean', description: localize('interactiveSessionResponseHasProviderId', \"True when the provider has assigned an id to this response.\") });\nexport const CONTEXT_RESPONSE_VOTE = new RawContextKey<string>('chatSessionResponseVote', '', { type: 'string', description: localize('interactiveSessionResponseVote', \"When the response has been voted up, is set to 'up'. When voted down, is set to 'down'. Otherwise an empty string.\") });\nexport const CONTEXT_RESPONSE_FILTERED = new RawContextKey<boolean>('chatSessionResponseFiltered', false, { type: 'boolean', description: localize('chatResponseFiltered', \"True when the chat response was filtered out by the server.\") });\nexport const CONTEXT_CHAT_REQUEST_IN_PROGRESS = new RawContextKey<boolean>('chatSessionRequestInProgress', false, { type: 'boolean', description: localize('interactiveSessionRequestInProgress', \"True when the current request is still in progress.\") });\n\nexport const CONTEXT_RESPONSE = new RawContextKey<boolean>('chatResponse', false, { type: 'boolean', description: localize('chatResponse', \"The chat item is a response.\") });\nexport const CONTEXT_REQUEST = new RawContextKey<boolean>('chatRequest', false, { type: 'boolean', description: localize('chatRequest', \"The chat item is a request\") });\n\nexport const CONTEXT_CHAT_INPUT_HAS_TEXT = new RawContextKey<boolean>('chatInputHasText', false, { type: 'boolean', description: localize('interactiveInputHasText', \"True when the chat input has text.\") });\nexport const CONTEXT_IN_CHAT_INPUT = new RawContextKey<boolean>('inChatInput', false, { type: 'boolean', description: localize('inInteractiveInput', \"True when focus is in the chat input, false otherwise.\") });\nexport const CONTEXT_IN_CHAT_SESSION = new RawContextKey<boolean>('inChat', false, { type: 'boolean', description: localize('inChat', \"True when focus is in the chat widget, false otherwise.\") });\nexport const CONTEXT_IN_CHAT_LIST = new RawContextKey<boolean>('chatListFocused', false, { type: 'boolean', description: localize('chatListFocused', \"True when a row of the chat list is focused, but not when focus is on a different element inside the chat row.\") });\n\nexport const CONTEXT_PROVIDER_EXISTS = new RawContextKey<boolean>('hasChatProvider', false, { type: 'boolean', description: localize('hasChatProvider', \"True when some chat provider has been registered.\") });\n"]}