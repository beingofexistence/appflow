{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/chat/browser/chatEditor.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAyBzF,IAAM,IAAI,GAAV,MAAM,IAAW,SAAQ,gBAAG;QAIlC,IAAa,uBAAuB;YACnC,OAAO,IAAI,CAAC,CAAC,CAAwB;QACtC,CAAC;QAKD,YACoB,gBAAqB,EACzB,YAAiB,EACQ,CAAyB,EAC/B,CAAmB,EAChB,CAAsB;YAE3D,KAAK,CAAC,sBAAI,CAAY,QAAQ,EAAE,gBAAgB,EAAE,YAAY,EAAE,CAAC,CAAc,CAAC;YAJxC,MAAC,GAAD,CAAC,CAAwB;YAC/B,MAAC,GAAD,CAAC,CAAkB;YAChB,MAAC,GAAD,CAAC,CAAqB;QAG5D,CAAC;QAEM,KAAK,CAAC,KAAK;YACjB,OAAO,IAAI,CAAC,CAAC,CAAoB,cAAc,CAAC,gBAAI,CAAY,CAAC;QAClE,CAAC;QAEkB,EAAE,CAAW,MAAmB;YAClD,IAAI,CAAC,CAAC,GAA0B,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAiB,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC;YAC5F,MAAM,0BAA0B,GAAG,IAAI,CAAC,CAAC,CAAoB,WAAW,CAAC,IAAI,uBAAG,CAAe,CAAC,gBAAG,EAAiB,IAAI,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC;YAEpJ,IAAI,CAAC,CAAC,GAAQ,IAAI,CAAC,CAAC,CACnB,0BAA0B,CAAC,cAAc,CACxC,iBAAI,EACJ,EAAE,QAAQ,EAAE,IAAI,EAAE,EAClB;gBACC,cAAc,EAAE,mBAAG;gBACnB,cAAc,EAAE,mBAAG;gBACnB,qBAAqB,EAAE,mBAAG;gBAC1B,sBAAsB,EAAE,mBAAG;aAC3B,CAAC,CAAC,CAAC;YACN,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAM,UAAU,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAC3D,IAAI,CAAC,CAAC,CAAM,MAAM,CAAC,MAAM,CAAC,CAAC;YAC3B,IAAI,CAAC,CAAC,CAAM,UAAU,CAAC,IAAI,CAAC,CAAC;QAC9B,CAAC;QAEe,KAAK;YACpB,IAAI,IAAI,CAAC,CAAC,EAAO;gBAChB,IAAI,CAAC,CAAC,CAAM,UAAU,EAAE,CAAC;aACzB;QACF,CAAC;QAEQ,UAAU;YAClB,IAAI,CAAC,CAAC,EAAU,CAAC;YACjB,KAAK,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC;QAEQ,KAAK,CAAC,QAAQ,CAAC,KAAW,EAAa,OAA2B,EAAE,OAA2B,EAAE,KAAwB;YACjI,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,OAAO,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;YAE/C,MAAM,WAAW,GAAG,MAAM,KAAK,CAAC,OAAO,EAAE,CAAC;YAC1C,IAAI,CAAC,WAAW,EAAE;gBACjB,MAAM,IAAI,KAAK,CAAC,4CAA4C,KAAK,CAAC,SAAS,EAAE,CAAC,CAAC;aAC/E;YAED,IAAI,CAAC,IAAI,CAAC,CAAC,EAAO;gBACjB,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;aAChE;YAED,IAAI,CAAC,CAAC,CAAW,WAAW,CAAC,KAAK,CAAC,CAAC;QACrC,CAAC;QAEO,CAAC,CAAW,KAAiB;YACpC,IAAI,CAAC,CAAC,GAAU,IAAI,aAAG,CAAK,6BAA6B,GAAG,KAAK,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAc,CAAC;YAClG,IAAI,CAAC,CAAC,GAAY,IAAI,CAAC,CAAC,CAAQ,UAAU,+DAA6D,CAAC;YACxG,IAAI,CAAC,CAAC,CAAM,QAAQ,CAAC,KAAK,EAAE,EAAE,GAAG,IAAI,CAAC,CAAC,EAAW,CAAC,CAAC;QACrD,CAAC;QAEkB,CAAC;YACnB,IAAI,CAAC,CAAC,EAAO,SAAS,EAAE,CAAC;YAEzB,IAAI,IAAI,CAAC,CAAC,IAAW,IAAI,CAAC,CAAC,EAAW;gBACrC,MAAM,eAAe,GAAG,IAAI,CAAC,CAAC,CAAM,YAAY,EAAE,CAAC;gBACnD,IAAI,CAAC,CAAW,CAAC,UAAU,GAAG,eAAe,CAAC,UAAU,CAAC;gBACzD,IAAI,CAAC,CAAS,CAAC,WAAW,EAAE,CAAC;aAC7B;QACF,CAAC;QAEQ,MAAM,CAAC,SAAkB,EAAQ,QAAuC;YAChF,IAAI,IAAI,CAAC,CAAC,EAAO;gBAChB,IAAI,CAAC,CAAC,CAAM,MAAM,CAAC,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC,KAAK,CAAC,CAAC;aACtD;QACF,CAAC;KACD,CAAA;IA3FY,oBAAI;mBAAJ,IAAI;QAYd,WAAA,eAAG,CAAA;QACH,WAAA,kBAAG,CAAA;QACH,WAAA,mBAAG,CAAA;QACH,WAAA,aAAG,CAAA;QACH,WAAA,gBAAG,CAAA;OAhBO,IAAI,CA2FhB","file":"chatEditor.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/chatEditor';\nimport * as dom from 'vs/base/browser/dom';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IContextKeyService, IScopedContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IEditorOptions } from 'vs/platform/editor/common/editor';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { editorBackground, editorForeground, inputBackground } from 'vs/platform/theme/common/colorRegistry';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { EditorPane } from 'vs/workbench/browser/parts/editor/editorPane';\nimport { IEditorOpenContext } from 'vs/workbench/common/editor';\nimport { Memento } from 'vs/workbench/common/memento';\nimport { ChatEditorInput } from 'vs/workbench/contrib/chat/browser/chatEditorInput';\nimport { IViewState, ChatWidget } from 'vs/workbench/contrib/chat/browser/chatWidget';\nimport { IChatModel, ISerializableChatData } from 'vs/workbench/contrib/chat/common/chatModel';\nimport { clearChatEditor } from 'vs/workbench/contrib/chat/browser/actions/chatClear';\n\nexport interface IChatEditorOptions extends IEditorOptions {\n\ttarget: { sessionId: string } | { providerId: string } | { data: ISerializableChatData };\n}\n\nexport class ChatEditor extends EditorPane {\n\tprivate widget!: ChatWidget;\n\n\tprivate _scopedContextKeyService!: IScopedContextKeyService;\n\toverride get scopedContextKeyService() {\n\t\treturn this._scopedContextKeyService;\n\t}\n\n\tprivate _memento: Memento | undefined;\n\tprivate _viewState: IViewState | undefined;\n\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t) {\n\t\tsuper(ChatEditorInput.EditorID, telemetryService, themeService, storageService);\n\t}\n\n\tpublic async clear() {\n\t\treturn this.instantiationService.invokeFunction(clearChatEditor);\n\t}\n\n\tprotected override createEditor(parent: HTMLElement): void {\n\t\tthis._scopedContextKeyService = this._register(this.contextKeyService.createScoped(parent));\n\t\tconst scopedInstantiationService = this.instantiationService.createChild(new ServiceCollection([IContextKeyService, this.scopedContextKeyService]));\n\n\t\tthis.widget = this._register(\n\t\t\tscopedInstantiationService.createInstance(\n\t\t\t\tChatWidget,\n\t\t\t\t{ resource: true },\n\t\t\t\t{\n\t\t\t\t\tlistForeground: editorForeground,\n\t\t\t\t\tlistBackground: editorBackground,\n\t\t\t\t\tinputEditorBackground: inputBackground,\n\t\t\t\t\tresultEditorBackground: editorBackground\n\t\t\t\t}));\n\t\tthis._register(this.widget.onDidClear(() => this.clear()));\n\t\tthis.widget.render(parent);\n\t\tthis.widget.setVisible(true);\n\t}\n\n\tpublic override focus(): void {\n\t\tif (this.widget) {\n\t\t\tthis.widget.focusInput();\n\t\t}\n\t}\n\n\toverride clearInput(): void {\n\t\tthis.saveState();\n\t\tsuper.clearInput();\n\t}\n\n\toverride async setInput(input: ChatEditorInput, options: IChatEditorOptions, context: IEditorOpenContext, token: CancellationToken): Promise<void> {\n\t\tsuper.setInput(input, options, context, token);\n\n\t\tconst editorModel = await input.resolve();\n\t\tif (!editorModel) {\n\t\t\tthrow new Error(`Failed to get model for chat editor. id: ${input.sessionId}`);\n\t\t}\n\n\t\tif (!this.widget) {\n\t\t\tthrow new Error('ChatEditor lifecycle issue: no editor widget');\n\t\t}\n\n\t\tthis.updateModel(editorModel.model);\n\t}\n\n\tprivate updateModel(model: IChatModel): void {\n\t\tthis._memento = new Memento('interactive-session-editor-' + model.sessionId, this.storageService);\n\t\tthis._viewState = this._memento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE) as IViewState;\n\t\tthis.widget.setModel(model, { ...this._viewState });\n\t}\n\n\tprotected override saveState(): void {\n\t\tthis.widget?.saveState();\n\n\t\tif (this._memento && this._viewState) {\n\t\t\tconst widgetViewState = this.widget.getViewState();\n\t\t\tthis._viewState!.inputValue = widgetViewState.inputValue;\n\t\t\tthis._memento!.saveMemento();\n\t\t}\n\t}\n\n\toverride layout(dimension: dom.Dimension, position?: dom.IDomPosition | undefined): void {\n\t\tif (this.widget) {\n\t\t\tthis.widget.layout(dimension.height, dimension.width);\n\t\t}\n\t}\n}\n\n"]}