{"version":3,"sources":["vs/workbench/contrib/chat/browser/chatContributionServiceImpl.ts"],"names":[],"mappings":"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","file":"chatContributionServiceImpl.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from 'vs/base/common/codicons';\nimport { DisposableStore, IDisposable } from 'vs/base/common/lifecycle';\nimport * as resources from 'vs/base/common/resources';\nimport { localize } from 'vs/nls';\nimport { registerAction2 } from 'vs/platform/actions/common/actions';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { ViewPaneContainer } from 'vs/workbench/browser/parts/views/viewPaneContainer';\nimport { Extensions as WorkbenchExtensions, IWorkbenchContribution, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';\nimport { IViewContainersRegistry, IViewDescriptor, IViewsRegistry, ViewContainer, ViewContainerLocation, Extensions as ViewExtensions } from 'vs/workbench/common/views';\nimport { getHistoryAction, getOpenChatEditorAction } from 'vs/workbench/contrib/chat/browser/actions/chatActions';\nimport { getClearAction } from 'vs/workbench/contrib/chat/browser/actions/chatClearActions';\nimport { getMoveToEditorAction } from 'vs/workbench/contrib/chat/browser/actions/chatMoveActions';\nimport { getQuickChatActionForProvider } from 'vs/workbench/contrib/chat/browser/actions/chatQuickInputActions';\nimport { CHAT_SIDEBAR_PANEL_ID, ChatViewPane, IChatViewOptions } from 'vs/workbench/contrib/chat/browser/chatViewPane';\nimport { IChatContributionService, IChatProviderContribution, IRawChatProviderContribution } from 'vs/workbench/contrib/chat/common/chatContributionService';\nimport * as extensionsRegistry from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\n\n\nconst chatExtensionPoint = extensionsRegistry.ExtensionsRegistry.registerExtensionPoint<IRawChatProviderContribution[]>({\n\textensionPoint: 'interactiveSession',\n\tjsonSchema: {\n\t\tdescription: localize('vscode.extension.contributes.interactiveSession', 'Contributes an Interactive Session provider'),\n\t\ttype: 'array',\n\t\titems: {\n\t\t\tadditionalProperties: false,\n\t\t\ttype: 'object',\n\t\t\tdefaultSnippets: [{ body: { id: '', program: '', runtime: '' } }],\n\t\t\trequired: ['id', 'label'],\n\t\t\tproperties: {\n\t\t\t\tid: {\n\t\t\t\t\tdescription: localize('vscode.extension.contributes.interactiveSession.id', \"Unique identifier for this Interactive Session provider.\"),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\tlabel: {\n\t\t\t\t\tdescription: localize('vscode.extension.contributes.interactiveSession.label', \"Display name for this Interactive Session provider.\"),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\ticon: {\n\t\t\t\t\tdescription: localize('vscode.extension.contributes.interactiveSession.icon', \"An icon for this Interactive Session provider.\"),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t\twhen: {\n\t\t\t\t\tdescription: localize('vscode.extension.contributes.interactiveSession.when', \"A condition which must be true to enable this Interactive Session provider.\"),\n\t\t\t\t\ttype: 'string'\n\t\t\t\t},\n\t\t\t}\n\t\t}\n\t},\n\tactivationEventsGenerator: (contributions: IRawChatProviderContribution[], result: { push(item: string): void }) => {\n\t\tfor (const contrib of contributions) {\n\t\t\tresult.push(`onInteractiveSession:${contrib.id}`);\n\t\t}\n\t},\n});\n\nexport class ChatExtensionPointHandler implements IWorkbenchContribution {\n\n\tprivate _viewContainer: ViewContainer;\n\tprivate _registrationDisposables = new Map<string, IDisposable>();\n\n\tconstructor(\n\t\t@IChatContributionService readonly _chatContributionService: IChatContributionService\n\t) {\n\t\tthis._viewContainer = this.registerViewContainer();\n\t\tthis.handleAndRegisterChatExtensions();\n\t}\n\n\tprivate handleAndRegisterChatExtensions(): void {\n\t\tchatExtensionPoint.setHandler((extensions, delta) => {\n\t\t\tfor (const extension of delta.added) {\n\t\t\t\tconst extensionDisposable = new DisposableStore();\n\t\t\t\tfor (const providerDescriptor of extension.value) {\n\t\t\t\t\tthis.registerChatProvider(providerDescriptor);\n\t\t\t\t\tconst extensionIcon = extension.description.icon ?\n\t\t\t\t\t\tresources.joinPath(extension.description.extensionLocation, extension.description.icon) :\n\t\t\t\t\t\tundefined;\n\t\t\t\t\tthis._chatContributionService.registerChatProvider({\n\t\t\t\t\t\t...providerDescriptor,\n\t\t\t\t\t\textensionIcon\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\tthis._registrationDisposables.set(extension.description.identifier.value, extensionDisposable);\n\t\t\t}\n\n\t\t\tfor (const extension of delta.removed) {\n\t\t\t\tconst registration = this._registrationDisposables.get(extension.description.identifier.value);\n\t\t\t\tif (registration) {\n\t\t\t\t\tregistration.dispose();\n\t\t\t\t\tthis._registrationDisposables.delete(extension.description.identifier.value);\n\t\t\t\t}\n\n\t\t\t\tfor (const providerDescriptor of extension.value) {\n\t\t\t\t\tthis._chatContributionService.deregisterChatProvider(providerDescriptor.id);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate registerViewContainer(): ViewContainer {\n\t\t// Register View Container\n\t\tconst title = localize('chat.viewContainer.label', \"Chat\");\n\t\tconst icon = Codicon.commentDiscussion;\n\t\tconst viewContainerId = CHAT_SIDEBAR_PANEL_ID;\n\t\tconst viewContainer: ViewContainer = Registry.as<IViewContainersRegistry>(ViewExtensions.ViewContainersRegistry).registerViewContainer({\n\t\t\tid: viewContainerId,\n\t\t\ttitle: { value: title, original: 'Chat' },\n\t\t\ticon,\n\t\t\tctorDescriptor: new SyncDescriptor(ViewPaneContainer, [viewContainerId, { mergeViewWithContainerWhenSingleView: true }]),\n\t\t\tstorageId: viewContainerId,\n\t\t\thideIfEmpty: true,\n\t\t\torder: 100,\n\t\t}, ViewContainerLocation.Sidebar);\n\n\t\treturn viewContainer;\n\t}\n\n\tprivate registerChatProvider(providerDescriptor: IRawChatProviderContribution): IDisposable {\n\t\t// Register View\n\t\tconst viewId = this._chatContributionService.getViewIdForProvider(providerDescriptor.id);\n\t\tconst viewDescriptor: IViewDescriptor[] = [{\n\t\t\tid: viewId,\n\t\t\tcontainerIcon: this._viewContainer.icon,\n\t\t\tcontainerTitle: this._viewContainer.title.value,\n\t\t\tname: providerDescriptor.label,\n\t\t\tcanToggleVisibility: false,\n\t\t\tcanMoveView: true,\n\t\t\tctorDescriptor: new SyncDescriptor(ChatViewPane, [<IChatViewOptions>{ providerId: providerDescriptor.id }]),\n\t\t\twhen: ContextKeyExpr.deserialize(providerDescriptor.when)\n\t\t}];\n\t\tRegistry.as<IViewsRegistry>(ViewExtensions.ViewsRegistry).registerViews(viewDescriptor, this._viewContainer);\n\n\t\t// Per-provider actions\n\n\t\t// Actions in view title\n\t\tconst disposables = new DisposableStore();\n\t\tdisposables.add(registerAction2(getHistoryAction(viewId, providerDescriptor.id)));\n\t\tdisposables.add(registerAction2(getClearAction(viewId, providerDescriptor.id)));\n\t\tdisposables.add(registerAction2(getMoveToEditorAction(viewId, providerDescriptor.id)));\n\n\t\t// \"Open Chat\" Actions\n\t\tdisposables.add(registerAction2(getOpenChatEditorAction(providerDescriptor.id, providerDescriptor.label, providerDescriptor.when)));\n\t\tdisposables.add(registerAction2(getQuickChatActionForProvider(providerDescriptor.id, providerDescriptor.label)));\n\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tRegistry.as<IViewsRegistry>(ViewExtensions.ViewsRegistry).deregisterViews(viewDescriptor, this._viewContainer);\n\t\t\t\tRegistry.as<IViewContainersRegistry>(ViewExtensions.ViewContainersRegistry).deregisterViewContainer(this._viewContainer);\n\t\t\t\tdisposables.dispose();\n\t\t\t}\n\t\t};\n\t}\n}\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(ChatExtensionPointHandler, LifecyclePhase.Starting);\n\n\nexport class ChatContributionService implements IChatContributionService {\n\tdeclare _serviceBrand: undefined;\n\n\tprivate _registeredProviders = new Map<string, IChatProviderContribution>();\n\n\tconstructor(\n\t) { }\n\n\tpublic getViewIdForProvider(providerId: string): string {\n\t\treturn ChatViewPane.ID + '.' + providerId;\n\t}\n\n\tpublic registerChatProvider(provider: IChatProviderContribution): void {\n\t\tthis._registeredProviders.set(provider.id, provider);\n\t}\n\n\tpublic deregisterChatProvider(providerId: string): void {\n\t\tthis._registeredProviders.delete(providerId);\n\t}\n\n\tpublic get registeredProviders(): IChatProviderContribution[] {\n\t\treturn Array.from(this._registeredProviders.values());\n\t}\n}\n"]}