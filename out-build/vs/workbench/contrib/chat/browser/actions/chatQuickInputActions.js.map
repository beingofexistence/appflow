{"version":3,"sources":["vs/workbench/contrib/chat/browser/actions/chatQuickInputActions.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAYnF,QAAA,IAAI,GAA2B,mCAAmC,CAAC;IAChF,SAAgB,IAAI;QACnB,IAAA,aAAG,EAAa,qBAAqB,CAAC,CAAC;QAEvC,IAAA,aAAG,EAAa,MAAM,oBAAqB,SAAQ,aAAG;YACrD;gBACC,KAAK,CAAC;oBACL,EAAE,EAAE,2CAA2C;oBAC/C,KAAK,EAAE;wBACN,KAAK,EAAE,IAAA,cAAQ,EAAC,CAA2B,EAAE,IAAmB,CAAC;wBACjE,QAAQ,EAAE,mBAAmB;qBAC7B;oBACD,EAAE,EAAE,KAAK;oBACT,QAAQ,EAAE,kBAAI;oBACd,IAAI,EAAE,cAAG,CAAK,iBAAiB;oBAC/B,IAAI,EAAE;wBACL,EAAE,EAAE,aAAG,CAAI,aAAa;wBACxB,KAAK,EAAE,YAAY;wBACnB,KAAK,EAAE,EAAE;qBACT;iBACD,CAAC,CAAC;YACJ,CAAC;YAED,GAAG,CAAC,QAA0B;gBAC7B,MAAM,gBAAgB,GAAG,QAAQ,CAAC,GAAG,CAAC,WAAI,CAAc,CAAC;gBACzD,gBAAgB,CAAC,cAAc,EAAE,CAAC;YACnC,CAAC;SACD,CAAC,CAAC;QAEH,IAAA,aAAG,EAAa,MAAM,oBAAqB,SAAQ,aAAG;YACrD;gBACC,KAAK,CAAC;oBACL,EAAE,EAAE,kCAAkC;oBACtC,KAAK,EAAE;wBACN,KAAK,EAAE,IAAA,cAAQ,EAAC,CAA2B,EAAE,IAAkB,CAAC;wBAChE,QAAQ,EAAE,kBAAkB;qBAC5B;oBACD,EAAE,EAAE,KAAK;oBACT,QAAQ,EAAE,kBAAI;oBACd,IAAI,EAAE,cAAG,CAAK,KAAK;oBACnB,IAAI,EAAE;wBACL,EAAE,EAAE,aAAG,CAAI,aAAa;wBACxB,KAAK,EAAE,YAAY;wBACnB,KAAK,EAAE,EAAE;qBACT;iBACD,CAAC,CAAC;YACJ,CAAC;YAED,GAAG,CAAC,QAA0B;gBAC7B,MAAM,gBAAgB,GAAG,QAAQ,CAAC,GAAG,CAAC,WAAI,CAAc,CAAC;gBACzD,gBAAgB,CAAC,KAAK,EAAE,CAAC;YAC1B,CAAC;SACD,CAAC,CAAC;IACJ,CAAC;IApDD,oBAoDC;IAED,MAAM,qBAAsB,SAAQ,aAAG;QACtC;YACC,KAAK,CAAC;gBACL,EAAE,EAAE,YAAI;gBACR,KAAK,EAAE,EAAE,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAW,EAAE,IAAY,CAAC,EAAE,QAAQ,EAAE,YAAY,EAAE;gBAC7E,YAAY,EAAE,sBAAI;gBAClB,IAAI,EAAE,cAAG,CAAK,iBAAiB;gBAC/B,EAAE,EAAE,KAAK;gBACT,QAAQ,EAAE,kBAAI;gBACd,UAAU,EAAE;oBACX,MAAM,6CAAmC;oBACzC,OAAO,EAAE,mDAA6B,wBAAe;oBACrD,KAAK,EAAE;wBACN,OAAO,EAAE,mDAA6B,uBAAa,wBAAe;qBAClE;iBACD;aACD,CAAC,CAAC;QACJ,CAAC;QAEQ,GAAG,CAAC,QAA0B,EAAE,KAAc;YACtD,MAAM,gBAAgB,GAAG,QAAQ,CAAC,GAAG,CAAC,WAAI,CAAc,CAAC;YACzD,gBAAgB,CAAC,MAAM,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC3C,CAAC;KACD;IAED;;;;;;;OAOG;IACH,SAAgB,IAAI,CAA0B,EAAU,EAAE,KAAa;QACtE,OAAO,MAAM,kBAAmB,SAAQ,aAAG;YAC1C;gBACC,KAAK,CAAC;oBACL,EAAE,EAAE,kCAAkC,EAAE,EAAE;oBAC1C,QAAQ,EAAE,kBAAI;oBACd,KAAK,EAAE,EAAE,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAyB,EAAE,IAAuB,EAAE,KAAK,CAAC,EAAE,QAAQ,EAAE,oBAAoB,KAAK,GAAG,EAAE;oBAC7H,EAAE,EAAE,IAAI;iBACR,CAAC,CAAC;YACJ,CAAC;YAEQ,GAAG,CAAC,QAA0B,EAAE,KAAc;gBACtD,MAAM,gBAAgB,GAAG,QAAQ,CAAC,GAAG,CAAC,WAAI,CAAc,CAAC;gBACzD,gBAAgB,CAAC,MAAM,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YACpC,CAAC;SACD,CAAC;IACH,CAAC;IAhBD,oBAgBC","file":"chatQuickInputActions.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from 'vs/base/common/codicons';\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { localize } from 'vs/nls';\nimport { Action2, MenuId, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { CHAT_CATEGORY } from 'vs/workbench/contrib/chat/browser/actions/chatActions';\nimport { IQuickChatService } from 'vs/workbench/contrib/chat/browser/chat';\nimport { CONTEXT_PROVIDER_EXISTS } from 'vs/workbench/contrib/chat/common/chatContextKeys';\n\nexport const ASK_QUICK_QUESTION_ACTION_ID = 'workbench.action.quickchat.toggle';\nexport function registerQuickChatActions() {\n\tregisterAction2(QuickChatGlobalAction);\n\n\tregisterAction2(class OpenInChatViewAction extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'workbench.action.quickchat.openInChatView',\n\t\t\t\ttitle: {\n\t\t\t\t\tvalue: localize('chat.openInChatView.label', \"Open in Chat View\"),\n\t\t\t\t\toriginal: 'Open in Chat View'\n\t\t\t\t},\n\t\t\t\tf1: false,\n\t\t\t\tcategory: CHAT_CATEGORY,\n\t\t\t\ticon: Codicon.commentDiscussion,\n\t\t\t\tmenu: {\n\t\t\t\t\tid: MenuId.ChatInputSide,\n\t\t\t\t\tgroup: 'navigation',\n\t\t\t\t\torder: 10\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\trun(accessor: ServicesAccessor) {\n\t\t\tconst quickChatService = accessor.get(IQuickChatService);\n\t\t\tquickChatService.openInChatView();\n\t\t}\n\t});\n\n\tregisterAction2(class CloseQuickChatAction extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'workbench.action.quickchat.close',\n\t\t\t\ttitle: {\n\t\t\t\t\tvalue: localize('chat.closeQuickChat.label', \"Close Quick Chat\"),\n\t\t\t\t\toriginal: 'Close Quick Chat'\n\t\t\t\t},\n\t\t\t\tf1: false,\n\t\t\t\tcategory: CHAT_CATEGORY,\n\t\t\t\ticon: Codicon.close,\n\t\t\t\tmenu: {\n\t\t\t\t\tid: MenuId.ChatInputSide,\n\t\t\t\t\tgroup: 'navigation',\n\t\t\t\t\torder: 20\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\trun(accessor: ServicesAccessor) {\n\t\t\tconst quickChatService = accessor.get(IQuickChatService);\n\t\t\tquickChatService.close();\n\t\t}\n\t});\n}\n\nclass QuickChatGlobalAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: ASK_QUICK_QUESTION_ACTION_ID,\n\t\t\ttitle: { value: localize('quickChat', \"Quick Chat\"), original: 'Quick Chat' },\n\t\t\tprecondition: CONTEXT_PROVIDER_EXISTS,\n\t\t\ticon: Codicon.commentDiscussion,\n\t\t\tf1: false,\n\t\t\tcategory: CHAT_CATEGORY,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyI,\n\t\t\t\tlinux: {\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Shift | KeyMod.Alt | KeyCode.KeyI\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\toverride run(accessor: ServicesAccessor, query?: string): void {\n\t\tconst quickChatService = accessor.get(IQuickChatService);\n\t\tquickChatService.toggle(undefined, query);\n\t}\n}\n\n/**\n * Returns a provider specific action that will open the quick chat for that provider.\n * This is used to include the provider label in the action title so it shows up in\n * the command palette.\n * @param id The id of the provider\n * @param label The label of the provider\n * @returns An action that will open the quick chat for this provider\n */\nexport function getQuickChatActionForProvider(id: string, label: string) {\n\treturn class AskQuickChatAction extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: `workbench.action.openQuickChat.${id}`,\n\t\t\t\tcategory: CHAT_CATEGORY,\n\t\t\t\ttitle: { value: localize('interactiveSession.open', \"Open Quick Chat ({0})\", label), original: `Open Quick Chat (${label})` },\n\t\t\t\tf1: true\n\t\t\t});\n\t\t}\n\n\t\toverride run(accessor: ServicesAccessor, query?: string): void {\n\t\t\tconst quickChatService = accessor.get(IQuickChatService);\n\t\t\tquickChatService.toggle(id, query);\n\t\t}\n\t};\n}\n"]}