{"version":3,"sources":["vs/workbench/contrib/chat/browser/actions/chatImportExport.ts"],"names":[],"mappings":"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","file":"chatImportExport.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { joinPath } from 'vs/base/common/resources';\nimport { ServicesAccessor } from 'vs/editor/browser/editorExtensions';\nimport { localize } from 'vs/nls';\nimport { Action2, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { IFileDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { CHAT_CATEGORY } from 'vs/workbench/contrib/chat/browser/actions/chatActions';\nimport { IChatWidgetService } from 'vs/workbench/contrib/chat/browser/chat';\nimport { IChatEditorOptions } from 'vs/workbench/contrib/chat/browser/chatEditor';\nimport { ChatEditorInput } from 'vs/workbench/contrib/chat/browser/chatEditorInput';\nimport { CONTEXT_PROVIDER_EXISTS } from 'vs/workbench/contrib/chat/common/chatContextKeys';\nimport { isExportableSessionData } from 'vs/workbench/contrib/chat/common/chatModel';\nimport { IChatService } from 'vs/workbench/contrib/chat/common/chatService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\n\nconst defaultFileName = 'chat.json';\nconst filters = [{ name: localize('chat.file.label', \"Chat Session\"), extensions: ['json'] }];\n\nexport function registerChatExportActions() {\n\tregisterAction2(class ExportChatAction extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'workbench.action.chat.export',\n\t\t\t\tcategory: CHAT_CATEGORY,\n\t\t\t\ttitle: {\n\t\t\t\t\tvalue: localize('chat.export.label', \"Export Session\") + '...',\n\t\t\t\t\toriginal: 'Export Session...'\n\t\t\t\t},\n\t\t\t\tprecondition: CONTEXT_PROVIDER_EXISTS,\n\t\t\t\tf1: true,\n\t\t\t});\n\t\t}\n\t\tasync run(accessor: ServicesAccessor, ...args: any[]) {\n\t\t\tconst widgetService = accessor.get(IChatWidgetService);\n\t\t\tconst fileDialogService = accessor.get(IFileDialogService);\n\t\t\tconst fileService = accessor.get(IFileService);\n\t\t\tconst chatService = accessor.get(IChatService);\n\n\t\t\tconst widget = widgetService.lastFocusedWidget;\n\t\t\tif (!widget || !widget.viewModel) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst defaultUri = joinPath(await fileDialogService.defaultFilePath(), defaultFileName);\n\t\t\tconst result = await fileDialogService.showSaveDialog({\n\t\t\t\tdefaultUri,\n\t\t\t\tfilters\n\t\t\t});\n\t\t\tif (!result) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst model = chatService.getSession(widget.viewModel.sessionId);\n\t\t\tif (!model) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Using toJSON on the model\n\t\t\tconst content = VSBuffer.fromString(JSON.stringify(model.toExport(), undefined, 2));\n\t\t\tawait fileService.writeFile(result, content);\n\t\t}\n\t});\n\n\tregisterAction2(class ImportChatAction extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'workbench.action.chat.import',\n\t\t\t\ttitle: {\n\t\t\t\t\tvalue: localize('chat.import.label', \"Import Session\") + '...',\n\t\t\t\t\toriginal: 'Import Session...'\n\t\t\t\t},\n\t\t\t\tcategory: CHAT_CATEGORY,\n\t\t\t\tprecondition: CONTEXT_PROVIDER_EXISTS,\n\t\t\t\tf1: true,\n\t\t\t});\n\t\t}\n\t\tasync run(accessor: ServicesAccessor, ...args: any[]) {\n\t\t\tconst fileDialogService = accessor.get(IFileDialogService);\n\t\t\tconst fileService = accessor.get(IFileService);\n\t\t\tconst editorService = accessor.get(IEditorService);\n\n\t\t\tconst defaultUri = joinPath(await fileDialogService.defaultFilePath(), defaultFileName);\n\t\t\tconst result = await fileDialogService.showOpenDialog({\n\t\t\t\tdefaultUri,\n\t\t\t\tcanSelectFiles: true,\n\t\t\t\tfilters\n\t\t\t});\n\t\t\tif (!result) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst content = await fileService.readFile(result[0]);\n\t\t\ttry {\n\t\t\t\tconst data = JSON.parse(content.value.toString());\n\t\t\t\tif (!isExportableSessionData(data)) {\n\t\t\t\t\tthrow new Error('Invalid chat session data');\n\t\t\t\t}\n\n\t\t\t\tawait editorService.openEditor({ resource: ChatEditorInput.getNewEditorUri(), options: <IChatEditorOptions>{ target: { data }, pinned: true } });\n\t\t\t} catch (err) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t});\n}\n"]}