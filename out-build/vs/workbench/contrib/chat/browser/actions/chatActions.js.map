{"version":3,"sources":["vs/workbench/contrib/chat/browser/actions/chatActions.ts"],"names":[],"mappings":"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","file":"chatActions.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from 'vs/base/common/codicons';\nimport { KeyCode, KeyMod } from 'vs/base/common/keyCodes';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ThemeIcon } from 'vs/base/common/themables';\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { EditorAction, EditorAction2, ServicesAccessor, registerEditorAction } from 'vs/editor/browser/editorExtensions';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { EditorContextKeys } from 'vs/editor/common/editorContextKeys';\nimport { localize } from 'vs/nls';\nimport { Action2, IAction2Options, MenuId, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { KeybindingWeight } from 'vs/platform/keybinding/common/keybindingsRegistry';\nimport { IQuickInputService, IQuickPickItem } from 'vs/platform/quickinput/common/quickInput';\nimport { ViewAction } from 'vs/workbench/browser/parts/views/viewPane';\nimport { runAccessibilityHelpAction } from 'vs/workbench/contrib/chat/browser/actions/chatAccessibilityHelp';\nimport { IChatWidgetService } from 'vs/workbench/contrib/chat/browser/chat';\nimport { IChatEditorOptions } from 'vs/workbench/contrib/chat/browser/chatEditor';\nimport { ChatEditorInput } from 'vs/workbench/contrib/chat/browser/chatEditorInput';\nimport { ChatViewPane } from 'vs/workbench/contrib/chat/browser/chatViewPane';\nimport { CONTEXT_IN_CHAT_INPUT, CONTEXT_IN_CHAT_SESSION, CONTEXT_PROVIDER_EXISTS, CONTEXT_REQUEST, CONTEXT_RESPONSE } from 'vs/workbench/contrib/chat/common/chatContextKeys';\nimport { IChatDetail, IChatService } from 'vs/workbench/contrib/chat/common/chatService';\nimport { IChatWidgetHistoryService } from 'vs/workbench/contrib/chat/common/chatWidgetHistoryService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { AccessibilityHelpAction } from 'vs/workbench/contrib/accessibility/browser/accessibleViewActions';\n\nexport const CHAT_CATEGORY = { value: localize('chat.category', \"Chat\"), original: 'Chat' };\nexport const CHAT_OPEN_ACTION_ID = 'workbench.action.chat.open';\n\nclass QuickChatGlobalAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: CHAT_OPEN_ACTION_ID,\n\t\t\ttitle: { value: localize('quickChat', \"Quick Chat\"), original: 'Quick Chat' },\n\t\t\tprecondition: CONTEXT_PROVIDER_EXISTS,\n\t\t\ticon: Codicon.commentDiscussion,\n\t\t\tf1: false,\n\t\t\tcategory: CHAT_CATEGORY,\n\t\t\tkeybinding: {\n\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.Alt | KeyCode.KeyI,\n\t\t\t\tmac: {\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyMod.WinCtrl | KeyCode.KeyI\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\toverride async run(accessor: ServicesAccessor, query?: string): Promise<void> {\n\t\tconst chatService = accessor.get(IChatService);\n\t\tconst chatWidgetService = accessor.get(IChatWidgetService);\n\t\tconst providers = chatService.getProviderInfos();\n\t\tif (!providers.length) {\n\t\t\treturn;\n\t\t}\n\t\tconst chatWidget = await chatWidgetService.revealViewForProvider(providers[0].id);\n\t\tif (!chatWidget) {\n\t\t\treturn;\n\t\t}\n\t\tif (query) {\n\t\t\tchatWidget.acceptInput(query);\n\t\t}\n\t\tchatWidget.focusInput();\n\t}\n}\n\nexport function registerChatActions() {\n\tregisterAction2(QuickChatGlobalAction);\n\tregisterEditorAction(class ChatAcceptInput extends EditorAction {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'chat.action.acceptInput',\n\t\t\t\tlabel: localize({ key: 'actions.chat.acceptInput', comment: ['Apply input from the chat input box'] }, \"Accept Chat Input\"),\n\t\t\t\talias: 'Accept Chat Input',\n\t\t\t\tprecondition: CONTEXT_IN_CHAT_INPUT,\n\t\t\t\tkbOpts: {\n\t\t\t\t\tkbExpr: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyCode.Enter,\n\t\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\trun(accessor: ServicesAccessor, editor: ICodeEditor): void | Promise<void> {\n\t\t\tconst editorUri = editor.getModel()?.uri;\n\t\t\tif (editorUri) {\n\t\t\t\tconst widgetService = accessor.get(IChatWidgetService);\n\t\t\t\twidgetService.getWidgetByInputUri(editorUri)?.acceptInput();\n\t\t\t}\n\t\t}\n\t});\n\n\tregisterAction2(class ClearChatHistoryAction extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'workbench.action.chatEditor.clearHistory',\n\t\t\t\ttitle: {\n\t\t\t\t\tvalue: localize('interactiveSession.clearHistory.label', \"Clear Input History\"),\n\t\t\t\t\toriginal: 'Clear Input History'\n\t\t\t\t},\n\t\t\t\tprecondition: CONTEXT_PROVIDER_EXISTS,\n\t\t\t\tcategory: CHAT_CATEGORY,\n\t\t\t\tf1: true,\n\t\t\t});\n\t\t}\n\t\tasync run(accessor: ServicesAccessor, ...args: any[]) {\n\t\t\tconst historyService = accessor.get(IChatWidgetHistoryService);\n\t\t\thistoryService.clearHistory();\n\t\t}\n\t});\n\n\tregisterAction2(class FocusChatAction extends EditorAction2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'chat.action.focus',\n\t\t\t\ttitle: { value: localize('actions.interactiveSession.focus', \"Focus Chat List\"), original: 'Focus Chat List' },\n\t\t\t\tprecondition: CONTEXT_IN_CHAT_INPUT,\n\t\t\t\tcategory: CHAT_CATEGORY,\n\t\t\t\tkeybinding: {\n\t\t\t\t\twhen: EditorContextKeys.textInputFocus,\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.UpArrow,\n\t\t\t\t\tweight: KeybindingWeight.EditorContrib\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\trunEditorCommand(accessor: ServicesAccessor, editor: ICodeEditor): void | Promise<void> {\n\t\t\tconst editorUri = editor.getModel()?.uri;\n\t\t\tif (editorUri) {\n\t\t\t\tconst widgetService = accessor.get(IChatWidgetService);\n\t\t\t\twidgetService.getWidgetByInputUri(editorUri)?.focusLastMessage();\n\t\t\t}\n\t\t}\n\t});\n\n\tclass ChatAccessibilityHelpContribution extends Disposable {\n\t\tstatic ID: 'chatAccessibilityHelpContribution';\n\t\tconstructor() {\n\t\t\tsuper();\n\t\t\tthis._register(AccessibilityHelpAction.addImplementation(105, 'panelChat', async accessor => {\n\t\t\t\tconst codeEditor = accessor.get(ICodeEditorService).getActiveCodeEditor() || accessor.get(ICodeEditorService).getFocusedCodeEditor();\n\t\t\t\trunAccessibilityHelpAction(accessor, codeEditor ?? undefined, 'panelChat');\n\t\t\t}, ContextKeyExpr.or(CONTEXT_IN_CHAT_SESSION, CONTEXT_RESPONSE, CONTEXT_REQUEST)));\n\t\t}\n\t}\n\n\tconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\n\tworkbenchRegistry.registerWorkbenchContribution(ChatAccessibilityHelpContribution, LifecyclePhase.Eventually);\n\n\tregisterAction2(class FocusChatInputAction extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: 'workbench.action.chat.focusInput',\n\t\t\t\ttitle: {\n\t\t\t\t\tvalue: localize('interactiveSession.focusInput.label', \"Focus Chat Input\"),\n\t\t\t\t\toriginal: 'Focus Chat Input'\n\t\t\t\t},\n\t\t\t\tf1: false,\n\t\t\t\tkeybinding: {\n\t\t\t\t\tprimary: KeyMod.CtrlCmd | KeyCode.DownArrow,\n\t\t\t\t\tweight: KeybindingWeight.WorkbenchContrib,\n\t\t\t\t\twhen: ContextKeyExpr.and(CONTEXT_IN_CHAT_SESSION, ContextKeyExpr.not(EditorContextKeys.focus.key))\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\trun(accessor: ServicesAccessor, ...args: any[]) {\n\t\t\tconst widgetService = accessor.get(IChatWidgetService);\n\t\t\twidgetService.lastFocusedWidget?.focusInput();\n\t\t}\n\t});\n}\n\nexport function getOpenChatEditorAction(id: string, label: string, when?: string) {\n\treturn class OpenChatEditor extends Action2 {\n\t\tconstructor() {\n\t\t\tsuper({\n\t\t\t\tid: `workbench.action.openChat.${id}`,\n\t\t\t\ttitle: { value: localize('interactiveSession.open', \"Open Editor ({0})\", label), original: `Open Editor (${label})` },\n\t\t\t\tf1: true,\n\t\t\t\tcategory: CHAT_CATEGORY,\n\t\t\t\tprecondition: ContextKeyExpr.deserialize(when)\n\t\t\t});\n\t\t}\n\n\t\tasync run(accessor: ServicesAccessor) {\n\t\t\tconst editorService = accessor.get(IEditorService);\n\t\t\tawait editorService.openEditor({ resource: ChatEditorInput.getNewEditorUri(), options: <IChatEditorOptions>{ target: { providerId: id }, pinned: true } });\n\t\t}\n\t};\n}\n\nconst getHistoryChatActionDescriptorForViewTitle = (viewId: string, providerId: string): Readonly<IAction2Options> & { viewId: string } => ({\n\tviewId,\n\tid: `workbench.action.chat.${providerId}.history`,\n\ttitle: {\n\t\tvalue: localize('interactiveSession.history.label', \"Show History\"),\n\t\toriginal: 'Show History'\n\t},\n\tmenu: {\n\t\tid: MenuId.ViewTitle,\n\t\twhen: ContextKeyExpr.equals('view', viewId),\n\t\tgroup: 'navigation',\n\t\torder: 0\n\t},\n\tcategory: CHAT_CATEGORY,\n\ticon: Codicon.history,\n\tf1: false\n});\n\nexport function getHistoryAction(viewId: string, providerId: string) {\n\treturn class HistoryAction extends ViewAction<ChatViewPane> {\n\t\tconstructor() {\n\t\t\tsuper(getHistoryChatActionDescriptorForViewTitle(viewId, providerId));\n\t\t}\n\n\t\tasync runInView(accessor: ServicesAccessor, view: ChatViewPane) {\n\t\t\tconst chatService = accessor.get(IChatService);\n\t\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\t\tconst editorService = accessor.get(IEditorService);\n\t\t\tconst items = chatService.getHistory();\n\t\t\tconst picks = items.map(i => (<IQuickPickItem & { chat: IChatDetail }>{\n\t\t\t\tlabel: i.title,\n\t\t\t\tchat: i,\n\t\t\t\tbuttons: [{\n\t\t\t\t\ticonClass: ThemeIcon.asClassName(Codicon.x),\n\t\t\t\t\ttooltip: localize('interactiveSession.history.delete', \"Delete\"),\n\t\t\t\t}]\n\t\t\t}));\n\t\t\tconst selection = await quickInputService.pick(picks,\n\t\t\t\t{\n\t\t\t\t\tplaceHolder: localize('interactiveSession.history.pick', \"Select a chat session to restore\"),\n\t\t\t\t\tonDidTriggerItemButton: context => {\n\t\t\t\t\t\tchatService.removeHistoryEntry(context.item.chat.sessionId);\n\t\t\t\t\t\tcontext.removeItem();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\tif (selection) {\n\t\t\t\tconst sessionId = selection.chat.sessionId;\n\t\t\t\tawait editorService.openEditor({\n\t\t\t\t\tresource: ChatEditorInput.getNewEditorUri(), options: <IChatEditorOptions>{ target: { sessionId }, pinned: true }\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t};\n}\n"]}