{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/chat/browser/contrib/chatHistoryVariables.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;IAQhG,IAAM,oBAAoB,GAA1B,MAAM,oBAAqB,SAAQ,eAAG;QACrC,YACwB,oBAAyB;YAEhD,KAAK,EAAE,CAAC;YAER,IAAI,CAAC,CAAC,CAAS,oBAAoB,CAAC,gBAAgB,CAAC,EAAE,IAAI,EAAE,UAAU,EAAE,WAAW,EAAE,EAAE,EAAE,eAAe,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,EAAE;gBACrK,IAAI,CAAC,GAAG,EAAE;oBACT,OAAO,SAAS,CAAC;iBACjB;gBAED,MAAM,WAAW,GAAG,QAAQ,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;gBACtC,MAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC,WAAW,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC;gBAC/D,IAAI,CAAC,QAAQ,EAAE;oBACd,OAAO,SAAS,CAAC;iBACjB;gBAED,OAAO,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,QAAQ,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YACjE,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;KACD,CAAA;IApBK,oBAAoB;QAEvB,WAAA,mBAAG,CAAA;OAFA,oBAAoB,CAoBzB;IAED,cAAG,CAAM,EAAE,CAAkC,0BAAmB,CAAC,SAAS,CAAC,CAAC,6BAA6B,CAAC,oBAAoB,oCAA4B,CAAC","file":"chatHistoryVariables.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { IChatVariablesService } from 'vs/workbench/contrib/chat/common/chatVariables';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\n\nclass ChatHistoryVariables extends Disposable {\n\tconstructor(\n\t\t@IChatVariablesService chatVariablesService: IChatVariablesService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(chatVariablesService.registerVariable({ name: 'response', description: '', canTakeArgument: true, hidden: true }, async (message, arg, model, token) => {\n\t\t\tif (!arg) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\tconst responseNum = parseInt(arg, 10);\n\t\t\tconst response = model.getRequests()[responseNum - 1].response;\n\t\t\tif (!response) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\treturn [{ level: 'full', value: response.response.asString() }];\n\t\t}));\n\t}\n}\n\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(ChatHistoryVariables, LifecyclePhase.Eventually);\n"]}