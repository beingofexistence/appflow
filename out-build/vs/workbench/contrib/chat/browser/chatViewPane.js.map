{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/chat/browser/chatViewPane.ts"],"names":[],"mappings":"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","file":"chatViewPane.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { editorBackground } from 'vs/platform/theme/common/colorRegistry';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IViewPaneOptions, ViewPane } from 'vs/workbench/browser/parts/views/viewPane';\nimport { Memento } from 'vs/workbench/common/memento';\nimport { SIDE_BAR_FOREGROUND } from 'vs/workbench/common/theme';\nimport { IViewDescriptorService } from 'vs/workbench/common/views';\nimport { IChatViewPane } from 'vs/workbench/contrib/chat/browser/chat';\nimport { IViewState, ChatWidget } from 'vs/workbench/contrib/chat/browser/chatWidget';\nimport { IChatModel } from 'vs/workbench/contrib/chat/common/chatModel';\nimport { IChatService } from 'vs/workbench/contrib/chat/common/chatService';\n\nexport interface IChatViewOptions {\n\treadonly providerId: string;\n}\n\ninterface IViewPaneState extends IViewState {\n\tsessionId?: string;\n}\n\nexport const CHAT_SIDEBAR_PANEL_ID = 'workbench.panel.chatSidebar';\nexport class ChatViewPane extends ViewPane implements IChatViewPane {\n\tstatic ID = 'workbench.panel.chat.view';\n\n\tprivate _widget!: ChatWidget;\n\tget widget(): ChatWidget { return this._widget; }\n\n\tprivate modelDisposables = this._register(new DisposableStore());\n\tprivate memento: Memento;\n\tprivate viewState: IViewPaneState;\n\n\tconstructor(\n\t\tprivate readonly chatViewOptions: IChatViewOptions,\n\t\toptions: IViewPaneOptions,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IChatService private readonly chatService: IChatService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper(options, keybindingService, contextMenuService, configurationService, contextKeyService, viewDescriptorService, instantiationService, openerService, themeService, telemetryService);\n\n\t\t// View state for the ViewPane is currently global per-provider basically, but some other strictly per-model state will require a separate memento.\n\t\tthis.memento = new Memento('interactive-session-view-' + this.chatViewOptions.providerId, this.storageService);\n\t\tthis.viewState = this.memento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE) as IViewPaneState;\n\t}\n\n\tprivate updateModel(model?: IChatModel | undefined): void {\n\t\tthis.modelDisposables.clear();\n\n\t\tmodel = model ?? (this.chatService.transferredSessionData?.sessionId\n\t\t\t? this.chatService.getOrRestoreSession(this.chatService.transferredSessionData.sessionId)\n\t\t\t: this.chatService.startSession(this.chatViewOptions.providerId, CancellationToken.None));\n\t\tif (!model) {\n\t\t\tthrow new Error('Could not start chat session');\n\t\t}\n\n\t\tthis._widget.setModel(model, { ...this.viewState });\n\t\tthis.viewState.sessionId = model.sessionId;\n\t}\n\n\tprotected override renderBody(parent: HTMLElement): void {\n\t\ttry {\n\t\t\tsuper.renderBody(parent);\n\n\t\t\tconst scopedInstantiationService = this.instantiationService.createChild(new ServiceCollection([IContextKeyService, this.scopedContextKeyService]));\n\n\t\t\tthis._widget = this._register(scopedInstantiationService.createInstance(\n\t\t\t\tChatWidget,\n\t\t\t\t{ viewId: this.id },\n\t\t\t\t{\n\t\t\t\t\tlistForeground: SIDE_BAR_FOREGROUND,\n\t\t\t\t\tlistBackground: this.getBackgroundColor(),\n\t\t\t\t\tinputEditorBackground: this.getBackgroundColor(),\n\t\t\t\t\tresultEditorBackground: editorBackground\n\t\t\t\t}));\n\t\t\tthis._register(this.onDidChangeBodyVisibility(visible => {\n\t\t\t\tthis._widget.setVisible(visible);\n\t\t\t}));\n\t\t\tthis._register(this._widget.onDidClear(() => this.clear()));\n\t\t\tthis._widget.render(parent);\n\n\t\t\tlet sessionId: string | undefined;\n\t\t\tif (this.chatService.transferredSessionData) {\n\t\t\t\tsessionId = this.chatService.transferredSessionData.sessionId;\n\t\t\t\tthis.viewState.inputValue = this.chatService.transferredSessionData.inputValue;\n\t\t\t} else {\n\t\t\t\tsessionId = this.viewState.sessionId;\n\t\t\t}\n\n\t\t\tconst initialModel = sessionId ? this.chatService.getOrRestoreSession(sessionId) : undefined;\n\t\t\tthis.updateModel(initialModel);\n\t\t} catch (e) {\n\t\t\tthis.logService.error(e);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tacceptInput(query?: string): void {\n\t\tthis._widget.acceptInput(query);\n\t}\n\n\tasync clear(): Promise<void> {\n\t\tif (this.widget.viewModel) {\n\t\t\tthis.chatService.clearSession(this.widget.viewModel.sessionId);\n\t\t}\n\t\tthis.viewState.inputValue = '';\n\t\tthis.updateModel();\n\t}\n\n\tloadSession(sessionId: string): void {\n\t\tif (this.widget.viewModel) {\n\t\t\tthis.chatService.clearSession(this.widget.viewModel.sessionId);\n\t\t}\n\n\t\tconst newModel = this.chatService.getOrRestoreSession(sessionId);\n\t\tthis.updateModel(newModel);\n\t}\n\n\tfocusInput(): void {\n\t\tthis._widget.focusInput();\n\t}\n\n\toverride focus(): void {\n\t\tsuper.focus();\n\t\tthis._widget.focusInput();\n\t}\n\n\tprotected override layoutBody(height: number, width: number): void {\n\t\tsuper.layoutBody(height, width);\n\t\tthis._widget.layout(height, width);\n\t}\n\n\toverride saveState(): void {\n\t\tif (this._widget) {\n\t\t\t// Since input history is per-provider, this is handled by a separate service and not the memento here.\n\t\t\t// TODO multiple chat views will overwrite each other\n\t\t\tthis._widget.saveState();\n\n\t\t\tconst widgetViewState = this._widget.getViewState();\n\t\t\tthis.viewState.inputValue = widgetViewState.inputValue;\n\t\t\tthis.memento.saveMemento();\n\t\t}\n\n\t\tsuper.saveState();\n\t}\n}\n\n\n"]}