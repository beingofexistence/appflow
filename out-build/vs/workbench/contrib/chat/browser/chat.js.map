{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/chat/browser/chat.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IASnF,QAAA,IAAI,GAAiB,IAAA,mBAAG,EAAiC,mBAAmB,CAAC,CAAC;IAC9E,QAAA,IAAI,GAAgB,IAAA,mBAAG,EAAgC,kBAAkB,CAAC,CAAC;IAC3E,QAAA,IAAI,GAAwB,IAAA,mBAAG,EAAwC,0BAA0B,CAAC,CAAC","file":"chat.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { ISlashCommand } from 'vs/workbench/contrib/chat/common/chatService';\nimport { IChatRequestViewModel, IChatResponseViewModel, IChatViewModel, IChatWelcomeMessageViewModel } from 'vs/workbench/contrib/chat/common/chatViewModel';\nimport { Event } from 'vs/base/common/event';\nimport { URI } from 'vs/base/common/uri';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport const IChatWidgetService = createDecorator<IChatWidgetService>('chatWidgetService');\nexport const IQuickChatService = createDecorator<IQuickChatService>('quickChatService');\nexport const IChatAccessibilityService = createDecorator<IChatAccessibilityService>('chatAccessibilityService');\n\nexport interface IChatWidgetService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Returns the most recently focused widget if any.\n\t */\n\treadonly lastFocusedWidget: IChatWidget | undefined;\n\n\t/**\n\t * Returns whether a view was successfully revealed.\n\t */\n\trevealViewForProvider(providerId: string): Promise<IChatWidget | undefined>;\n\n\tgetWidgetByInputUri(uri: URI): IChatWidget | undefined;\n\n\tgetWidgetBySessionId(sessionId: string): IChatWidget | undefined;\n}\n\nexport interface IQuickChatService {\n\treadonly _serviceBrand: undefined;\n\treadonly onDidClose: Event<void>;\n\treadonly enabled: boolean;\n\ttoggle(providerId?: string, query?: string): void;\n\tfocus(): void;\n\topen(): void;\n\tclose(): void;\n\topenInChatView(): void;\n}\n\nexport interface IChatAccessibilityService {\n\treadonly _serviceBrand: undefined;\n\tacceptRequest(): void;\n\tacceptResponse(response?: IChatResponseViewModel | string): void;\n}\n\nexport interface IChatCodeBlockInfo {\n\tcodeBlockIndex: number;\n\telement: IChatResponseViewModel;\n\tfocus(): void;\n}\n\nexport interface IChatFileTreeInfo {\n\ttreeDataId: string;\n\ttreeIndex: number;\n\tfocus(): void;\n}\n\nexport type ChatTreeItem = IChatRequestViewModel | IChatResponseViewModel | IChatWelcomeMessageViewModel;\n\nexport interface IBaseChatWidgetViewContext {\n\trenderInputOnTop?: boolean;\n\trenderStyle?: 'default' | 'compact';\n}\n\nexport interface IChatViewViewContext extends IBaseChatWidgetViewContext {\n\tviewId: string;\n}\n\nexport interface IChatResourceViewContext extends IBaseChatWidgetViewContext {\n\tresource: boolean;\n}\n\nexport type IChatWidgetViewContext = IChatViewViewContext | IChatResourceViewContext;\n\nexport interface IChatWidget {\n\treadonly onDidChangeViewModel: Event<void>;\n\treadonly onDidAcceptInput: Event<void>;\n\treadonly viewContext: IChatWidgetViewContext;\n\treadonly viewModel: IChatViewModel | undefined;\n\treadonly inputEditor: ICodeEditor;\n\treadonly providerId: string;\n\n\treveal(item: ChatTreeItem): void;\n\tfocus(item: ChatTreeItem): void;\n\tmoveFocus(item: ChatTreeItem, type: 'next' | 'previous'): void;\n\tgetFocus(): ChatTreeItem | undefined;\n\tupdateInput(query?: string): void;\n\tacceptInput(query?: string): void;\n\tfocusLastMessage(): void;\n\tfocusInput(): void;\n\thasInputFocus(): boolean;\n\tgetSlashCommands(): Promise<ISlashCommand[] | undefined>;\n\tgetCodeBlockInfoForEditor(uri: URI): IChatCodeBlockInfo | undefined;\n\tgetCodeBlockInfosForResponse(response: IChatResponseViewModel): IChatCodeBlockInfo[];\n\tgetFileTreeInfosForResponse(response: IChatResponseViewModel): IChatFileTreeInfo[];\n\tgetLastFocusedFileTreeForResponse(response: IChatResponseViewModel): IChatFileTreeInfo | undefined;\n\tclear(): void;\n}\n\nexport interface IChatViewPane {\n\tclear(): void;\n}\n"]}