{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/interactive/browser/interactiveDocumentService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOnF,QAAA,IAAI,GAA0B,IAAA,mBAAG,EAA0C,6BAA6B,CAAC,CAAC;IAUvH,MAAa,IAA2B,SAAQ,eAAG;QAOlD;YACC,KAAK,EAAE,CAAC;YANQ,MAAC,GAA+B,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAA+D,CAAC,CAAC;YACxI,iCAA4B,GAAG,IAAI,CAAC,CAAC,CAA6B,KAAK,CAAC;YACvD,MAAC,GAAkC,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAA2C,CAAC,CAAC;YACvH,oCAA+B,GAAG,IAAI,CAAC,CAAC,CAAgC,KAAK,CAAC;QAI9E,CAAC;QAED,6BAA6B,CAAC,WAAgB,EAAE,QAAa,EAAE,UAAkB;YAChF,IAAI,CAAC,CAAC,CAA6B,IAAI,CAAC;gBACvC,WAAW;gBACX,QAAQ;gBACR,UAAU;aACV,CAAC,CAAC;QACJ,CAAC;QAED,6BAA6B,CAAC,WAAgB,EAAE,QAAa;YAC5D,IAAI,CAAC,CAAC,CAAgC,IAAI,CAAC;gBAC1C,WAAW;gBACX,QAAQ;aACR,CAAC,CAAC;QACJ,CAAC;KACD;IAzBD,oBAyBC","file":"interactiveDocumentService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport const IInteractiveDocumentService = createDecorator<IInteractiveDocumentService>('IInteractiveDocumentService');\n\nexport interface IInteractiveDocumentService {\n\treadonly _serviceBrand: undefined;\n\tonWillAddInteractiveDocument: Event<{ notebookUri: URI; inputUri: URI; languageId: string }>;\n\tonWillRemoveInteractiveDocument: Event<{ notebookUri: URI; inputUri: URI }>;\n\twillCreateInteractiveDocument(notebookUri: URI, inputUri: URI, languageId: string): void;\n\twillRemoveInteractiveDocument(notebookUri: URI, inputUri: URI): void;\n}\n\nexport class InteractiveDocumentService extends Disposable implements IInteractiveDocumentService {\n\tdeclare readonly _serviceBrand: undefined;\n\tprivate readonly _onWillAddInteractiveDocument = this._register(new Emitter<{ notebookUri: URI; inputUri: URI; languageId: string }>());\n\tonWillAddInteractiveDocument = this._onWillAddInteractiveDocument.event;\n\tprivate readonly _onWillRemoveInteractiveDocument = this._register(new Emitter<{ notebookUri: URI; inputUri: URI }>());\n\tonWillRemoveInteractiveDocument = this._onWillRemoveInteractiveDocument.event;\n\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\twillCreateInteractiveDocument(notebookUri: URI, inputUri: URI, languageId: string) {\n\t\tthis._onWillAddInteractiveDocument.fire({\n\t\t\tnotebookUri,\n\t\t\tinputUri,\n\t\t\tlanguageId\n\t\t});\n\t}\n\n\twillRemoveInteractiveDocument(notebookUri: URI, inputUri: URI) {\n\t\tthis._onWillRemoveInteractiveDocument.fire({\n\t\t\tnotebookUri,\n\t\t\tinputUri\n\t\t});\n\t}\n}\n"]}