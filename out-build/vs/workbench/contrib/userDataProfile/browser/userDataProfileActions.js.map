{"version":3,"sources":["vs/workbench/contrib/userDataProfile/browser/userDataProfileActions.ts"],"names":[],"mappings":"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","file":"userDataProfileActions.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { Action2, IMenuService, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { QuickPickItem, IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\nimport { IUserDataProfileManagementService, PROFILES_CATEGORY, IUserDataProfileService, PROFILES_ENABLEMENT_CONTEXT, HAS_PROFILES_CONTEXT, MANAGE_PROFILES_ACTION_ID, ProfilesMenu } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\nimport { IUserDataProfile, IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { Categories } from 'vs/platform/action/common/actionCommonCategories';\nimport { ContextKeyExpr, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { createAndFillInActionBarActions } from 'vs/platform/actions/browser/menuEntryActionViewItem';\nimport { IAction, Separator } from 'vs/base/common/actions';\n\nclass CreateTransientProfileAction extends Action2 {\n\tstatic readonly ID = 'workbench.profiles.actions.createTemporaryProfile';\n\tstatic readonly TITLE = {\n\t\tvalue: localize('create temporary profile', \"Create a Temporary Profile\"),\n\t\toriginal: 'Create a Temporary Profile'\n\t};\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: CreateTransientProfileAction.ID,\n\t\t\ttitle: CreateTransientProfileAction.TITLE,\n\t\t\tcategory: PROFILES_CATEGORY,\n\t\t\tf1: true,\n\t\t\tprecondition: PROFILES_ENABLEMENT_CONTEXT,\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor) {\n\t\treturn accessor.get(IUserDataProfileManagementService).createAndEnterTransientProfile();\n\t}\n}\n\nregisterAction2(CreateTransientProfileAction);\n\nexport class RenameProfileAction extends Action2 {\n\tstatic readonly ID = 'workbench.profiles.actions.renameProfile';\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: RenameProfileAction.ID,\n\t\t\ttitle: {\n\t\t\t\tvalue: localize('rename profile', \"Rename...\"),\n\t\t\t\toriginal: 'Rename...'\n\t\t\t},\n\t\t\tcategory: PROFILES_CATEGORY,\n\t\t\tf1: true,\n\t\t\tprecondition: ContextKeyExpr.and(PROFILES_ENABLEMENT_CONTEXT, HAS_PROFILES_CONTEXT),\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor, profile?: IUserDataProfile) {\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst userDataProfileService = accessor.get(IUserDataProfileService);\n\t\tconst userDataProfilesService = accessor.get(IUserDataProfilesService);\n\t\tconst userDataProfileManagementService = accessor.get(IUserDataProfileManagementService);\n\t\tconst notificationService = accessor.get(INotificationService);\n\n\t\tif (!profile) {\n\t\t\tprofile = await this.pickProfile(quickInputService, userDataProfileService, userDataProfilesService);\n\t\t}\n\n\t\tif (!profile || profile.isDefault) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst name = await quickInputService.input({\n\t\t\tvalue: profile.name,\n\t\t\ttitle: localize('select profile to rename', 'Rename {0}', profile.name),\n\t\t\tvalidateInput: async (value: string) => {\n\t\t\t\tif (profile!.name !== value && userDataProfilesService.profiles.some(p => p.name === value)) {\n\t\t\t\t\treturn localize('profileExists', \"Profile with name {0} already exists.\", value);\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t});\n\t\tif (name && name !== profile.name) {\n\t\t\ttry {\n\t\t\t\tawait userDataProfileManagementService.updateProfile(profile, { name });\n\t\t\t} catch (error) {\n\t\t\t\tnotificationService.error(error);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async pickProfile(quickInputService: IQuickInputService, userDataProfileService: IUserDataProfileService, userDataProfilesService: IUserDataProfilesService): Promise<IUserDataProfile | undefined> {\n\t\tconst profiles = userDataProfilesService.profiles.filter(p => !p.isDefault && !p.isTransient);\n\t\tif (!profiles.length) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst pick = await quickInputService.pick(\n\t\t\tprofiles.map(profile => ({\n\t\t\t\tlabel: profile.name,\n\t\t\t\tdescription: profile.id === userDataProfileService.currentProfile.id ? localize('current', \"Current\") : undefined,\n\t\t\t\tprofile\n\t\t\t})),\n\t\t\t{\n\t\t\t\ttitle: localize('rename specific profile', \"Rename Profile...\"),\n\t\t\t\tplaceHolder: localize('pick profile to rename', \"Select Profile to Rename\"),\n\t\t\t});\n\t\treturn pick?.profile;\n\t}\n}\n\nregisterAction2(RenameProfileAction);\n\nregisterAction2(class ManageProfilesAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: MANAGE_PROFILES_ACTION_ID,\n\t\t\ttitle: {\n\t\t\t\tvalue: localize('mange', \"Manage...\"),\n\t\t\t\toriginal: 'Manage...'\n\t\t\t},\n\t\t\tcategory: PROFILES_CATEGORY,\n\t\t\tprecondition: ContextKeyExpr.and(PROFILES_ENABLEMENT_CONTEXT, HAS_PROFILES_CONTEXT),\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor) {\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst menuService = accessor.get(IMenuService);\n\t\tconst contextKeyService = accessor.get(IContextKeyService);\n\t\tconst commandService = accessor.get(ICommandService);\n\n\t\tconst menu = menuService.createMenu(ProfilesMenu, contextKeyService);\n\t\tconst actions: IAction[] = [];\n\t\tcreateAndFillInActionBarActions(menu, undefined, actions);\n\t\tmenu.dispose();\n\n\t\tif (actions.length) {\n\t\t\tconst picks: QuickPickItem[] = actions.map(action => {\n\t\t\t\tif (action instanceof Separator) {\n\t\t\t\t\treturn { type: 'separator' };\n\t\t\t\t}\n\t\t\t\treturn {\n\t\t\t\t\tid: action.id,\n\t\t\t\t\tlabel: `${action.label}${action.checked ? ` $(${Codicon.check.id})` : ''}`,\n\t\t\t\t};\n\t\t\t});\n\t\t\tconst pick = await quickInputService.pick(picks, { canPickMany: false, title: PROFILES_CATEGORY.value });\n\t\t\tif (pick?.id) {\n\t\t\t\tawait commandService.executeCommand(pick.id);\n\t\t\t}\n\t\t}\n\t}\n});\n\n// Developer Actions\n\nregisterAction2(class CleanupProfilesAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.profiles.actions.cleanupProfiles',\n\t\t\ttitle: {\n\t\t\t\tvalue: localize('cleanup profile', \"Cleanup Profiles\"),\n\t\t\t\toriginal: 'Cleanup Profiles'\n\t\t\t},\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true,\n\t\t\tprecondition: PROFILES_ENABLEMENT_CONTEXT,\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor) {\n\t\treturn accessor.get(IUserDataProfilesService).cleanUp();\n\t}\n});\n\nregisterAction2(class ResetWorkspacesAction extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.profiles.actions.resetWorkspaces',\n\t\t\ttitle: {\n\t\t\t\tvalue: localize('reset workspaces', \"Reset Workspace Profiles Associations\"),\n\t\t\t\toriginal: 'Reset Workspace Profiles Associations'\n\t\t\t},\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true,\n\t\t\tprecondition: PROFILES_ENABLEMENT_CONTEXT,\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor) {\n\t\tconst userDataProfilesService = accessor.get(IUserDataProfilesService);\n\t\treturn userDataProfilesService.resetWorkspaces();\n\t}\n});\n"]}