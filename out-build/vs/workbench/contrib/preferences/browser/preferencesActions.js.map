{"version":3,"sources":["vs/workbench/contrib/preferences/browser/preferencesActions.ts"],"names":[],"mappings":"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","file":"preferencesActions.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Action } from 'vs/base/common/actions';\nimport { URI } from 'vs/base/common/uri';\nimport { getIconClasses } from 'vs/editor/common/services/getIconClasses';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport * as nls from 'vs/nls';\nimport { IQuickInputService, IQuickPickItem } from 'vs/platform/quickinput/common/quickInput';\nimport { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Extensions, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport { EditorExtensionsRegistry } from 'vs/editor/browser/editorExtensions';\nimport { MenuId, MenuRegistry, isIMenuItem } from 'vs/platform/actions/common/actions';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\n\nexport class ConfigureLanguageBasedSettingsAction extends Action {\n\n\tstatic readonly ID = 'workbench.action.configureLanguageBasedSettings';\n\tstatic readonly LABEL = { value: nls.localize('configureLanguageBasedSettings', \"Configure Language Specific Settings...\"), original: 'Configure Language Specific Settings...' };\n\n\tconstructor(\n\t\tid: string,\n\t\tlabel: string,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService\n\t) {\n\t\tsuper(id, label);\n\t}\n\n\toverride async run(): Promise<void> {\n\t\tconst languages = this.languageService.getSortedRegisteredLanguageNames();\n\t\tconst picks: IQuickPickItem[] = languages.map(({ languageName, languageId }) => {\n\t\t\tconst description: string = nls.localize('languageDescriptionConfigured', \"({0})\", languageId);\n\t\t\t// construct a fake resource to be able to show nice icons if any\n\t\t\tlet fakeResource: URI | undefined;\n\t\t\tconst extensions = this.languageService.getExtensions(languageId);\n\t\t\tif (extensions.length) {\n\t\t\t\tfakeResource = URI.file(extensions[0]);\n\t\t\t} else {\n\t\t\t\tconst filenames = this.languageService.getFilenames(languageId);\n\t\t\t\tif (filenames.length) {\n\t\t\t\t\tfakeResource = URI.file(filenames[0]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\tlabel: languageName,\n\t\t\t\ticonClasses: getIconClasses(this.modelService, this.languageService, fakeResource),\n\t\t\t\tdescription\n\t\t\t} as IQuickPickItem;\n\t\t});\n\n\t\tawait this.quickInputService.pick(picks, { placeHolder: nls.localize('pickLanguage', \"Select Language\") })\n\t\t\t.then(pick => {\n\t\t\t\tif (pick) {\n\t\t\t\t\tconst languageId = this.languageService.getLanguageIdByLanguageName(pick.label);\n\t\t\t\t\tif (typeof languageId === 'string') {\n\t\t\t\t\t\treturn this.preferencesService.openLanguageSpecificSettings(languageId);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t});\n\n\t}\n}\n\n// Register a command that gets all settings\nCommandsRegistry.registerCommand({\n\tid: '_getAllSettings',\n\thandler: () => {\n\t\tconst configRegistry = Registry.as<IConfigurationRegistry>(Extensions.Configuration);\n\t\tconst allSettings = configRegistry.getConfigurationProperties();\n\t\treturn allSettings;\n\t}\n});\n\n//#region --- Register a command to get all actions from the command palette\nCommandsRegistry.registerCommand('_getAllCommands', function (accessor) {\n\tconst keybindingService = accessor.get(IKeybindingService);\n\tconst actions: { command: string; label: string; precondition?: string; keybinding: string }[] = [];\n\tfor (const editorAction of EditorExtensionsRegistry.getEditorActions()) {\n\t\tconst keybinding = keybindingService.lookupKeybinding(editorAction.id);\n\t\tactions.push({ command: editorAction.id, label: editorAction.label, precondition: editorAction.precondition?.serialize(), keybinding: keybinding?.getLabel() ?? 'Not set' });\n\t}\n\tfor (const menuItem of MenuRegistry.getMenuItems(MenuId.CommandPalette)) {\n\t\tif (isIMenuItem(menuItem)) {\n\t\t\tconst title = typeof menuItem.command.title === 'string' ? menuItem.command.title : menuItem.command.title.value;\n\t\t\tconst category = menuItem.command.category ? typeof menuItem.command.category === 'string' ? menuItem.command.category : menuItem.command.category.value : undefined;\n\t\t\tconst label = category ? `${category}: ${title}` : title;\n\t\t\tconst keybinding = keybindingService.lookupKeybinding(menuItem.command.id);\n\t\t\tactions.push({ command: menuItem.command.id, label, precondition: menuItem.when?.serialize(), keybinding: keybinding?.getLabel() ?? 'Not set' });\n\t\t}\n\t}\n\treturn actions;\n});\n//#endregion\n\n"]}