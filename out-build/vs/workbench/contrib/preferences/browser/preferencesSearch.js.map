{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/preferences/browser/preferencesSearch.ts"],"names":[],"mappings":"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","file":"preferencesSearch.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ISettingsEditorModel, ISetting, ISettingsGroup, ISearchResult, IGroupFilter, SettingMatchType, ISettingMatch } from 'vs/workbench/services/preferences/common/preferences';\nimport { IRange } from 'vs/editor/common/core/range';\nimport { distinct } from 'vs/base/common/arrays';\nimport * as strings from 'vs/base/common/strings';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IConfigurationRegistry, Extensions } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IMatch, or, matchesContiguousSubString, matchesPrefix, matchesCamelCase, matchesWords } from 'vs/base/common/filters';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IPreferencesSearchService, ISearchProvider, IWorkbenchSettingsConfiguration } from 'vs/workbench/contrib/preferences/common/preferences';\nimport { IExtensionManagementService, ILocalExtension } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { IWorkbenchExtensionEnablementService } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { ExtensionType } from 'vs/platform/extensions/common/extensions';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IAiRelatedInformationService, RelatedInformationType, SettingInformationResult } from 'vs/workbench/services/aiRelatedInformation/common/aiRelatedInformation';\n\nexport interface IEndpointDetails {\n\turlBase?: string;\n\tkey?: string;\n}\n\nexport class PreferencesSearchService extends Disposable implements IPreferencesSearchService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\t// @ts-expect-error disable remote search for now, ref https://github.com/microsoft/vscode/issues/172411\n\tprivate _installedExtensions: Promise<ILocalExtension[]>;\n\tprivate _remoteSearchProvider: RemoteSearchProvider | undefined;\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IWorkbenchExtensionEnablementService private readonly extensionEnablementService: IWorkbenchExtensionEnablementService\n\t) {\n\t\tsuper();\n\n\t\t// This request goes to the shared process but results won't change during a window's lifetime, so cache the results.\n\t\tthis._installedExtensions = this.extensionManagementService.getInstalled(ExtensionType.User).then(exts => {\n\t\t\t// Filter to enabled extensions that have settings\n\t\t\treturn exts\n\t\t\t\t.filter(ext => this.extensionEnablementService.isEnabled(ext))\n\t\t\t\t.filter(ext => ext.manifest && ext.manifest.contributes && ext.manifest.contributes.configuration)\n\t\t\t\t.filter(ext => !!ext.identifier.uuid);\n\t\t});\n\t}\n\n\tprivate get remoteSearchAllowed(): boolean {\n\t\tconst workbenchSettings = this.configurationService.getValue<IWorkbenchSettingsConfiguration>().workbench.settings;\n\t\treturn workbenchSettings.enableNaturalLanguageSearch;\n\t}\n\n\tgetRemoteSearchProvider(filter: string, newExtensionsOnly = false): RemoteSearchProvider | undefined {\n\t\tif (!this.remoteSearchAllowed) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (!this._remoteSearchProvider) {\n\t\t\tthis._remoteSearchProvider = this.instantiationService.createInstance(RemoteSearchProvider);\n\t\t}\n\n\t\tthis._remoteSearchProvider.setFilter(filter);\n\t\treturn this._remoteSearchProvider;\n\t}\n\n\tgetLocalSearchProvider(filter: string): LocalSearchProvider {\n\t\treturn this.instantiationService.createInstance(LocalSearchProvider, filter);\n\t}\n}\n\nfunction cleanFilter(filter: string): string {\n\t// Remove \" and : which are likely to be copypasted as part of a setting name.\n\t// Leave other special characters which the user might want to search for.\n\treturn filter\n\t\t.replace(/[\":]/g, ' ')\n\t\t.replace(/  /g, ' ')\n\t\t.trim();\n}\n\nexport class LocalSearchProvider implements ISearchProvider {\n\tstatic readonly EXACT_MATCH_SCORE = 10000;\n\tstatic readonly START_SCORE = 1000;\n\n\tconstructor(\n\t\tprivate _filter: string,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tthis._filter = cleanFilter(this._filter);\n\t}\n\n\tsearchModel(preferencesModel: ISettingsEditorModel, token?: CancellationToken): Promise<ISearchResult | null> {\n\t\tif (!this._filter) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\tlet orderedScore = LocalSearchProvider.START_SCORE; // Sort is not stable\n\t\tconst settingMatcher = (setting: ISetting) => {\n\t\t\tconst { matches, matchType } = new SettingMatches(this._filter, setting, true, true, (filter, setting) => preferencesModel.findValueMatches(filter, setting), this.configurationService);\n\t\t\tconst score = this._filter === setting.key ?\n\t\t\t\tLocalSearchProvider.EXACT_MATCH_SCORE :\n\t\t\t\torderedScore--;\n\n\t\t\treturn matches && matches.length ?\n\t\t\t\t{\n\t\t\t\t\tmatches,\n\t\t\t\t\tmatchType,\n\t\t\t\t\tscore\n\t\t\t\t} :\n\t\t\t\tnull;\n\t\t};\n\n\t\tconst filterMatches = preferencesModel.filterSettings(this._filter, this.getGroupFilter(this._filter), settingMatcher);\n\t\tif (filterMatches[0] && filterMatches[0].score === LocalSearchProvider.EXACT_MATCH_SCORE) {\n\t\t\treturn Promise.resolve({\n\t\t\t\tfilterMatches: filterMatches.slice(0, 1),\n\t\t\t\texactMatch: true\n\t\t\t});\n\t\t} else {\n\t\t\treturn Promise.resolve({\n\t\t\t\tfilterMatches\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate getGroupFilter(filter: string): IGroupFilter {\n\t\tconst regex = strings.createRegExp(filter, false, { global: true });\n\t\treturn (group: ISettingsGroup) => {\n\t\t\treturn regex.test(group.title);\n\t\t};\n\t}\n}\n\nexport class SettingMatches {\n\n\tprivate readonly descriptionMatchingWords: Map<string, IRange[]> = new Map<string, IRange[]>();\n\tprivate readonly keyMatchingWords: Map<string, IRange[]> = new Map<string, IRange[]>();\n\tprivate readonly valueMatchingWords: Map<string, IRange[]> = new Map<string, IRange[]>();\n\n\treadonly matches: IRange[];\n\tmatchType: SettingMatchType = SettingMatchType.None;\n\n\tconstructor(\n\t\tsearchString: string,\n\t\tsetting: ISetting,\n\t\tprivate requireFullQueryMatch: boolean,\n\t\tprivate searchDescription: boolean,\n\t\tprivate valuesMatcher: (filter: string, setting: ISetting) => IRange[],\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tthis.matches = distinct(this._findMatchesInSetting(searchString, setting), (match) => `${match.startLineNumber}_${match.startColumn}_${match.endLineNumber}_${match.endColumn}_`);\n\t}\n\n\tprivate _findMatchesInSetting(searchString: string, setting: ISetting): IRange[] {\n\t\tconst result = this._doFindMatchesInSetting(searchString, setting);\n\t\tif (setting.overrides && setting.overrides.length) {\n\t\t\tfor (const subSetting of setting.overrides) {\n\t\t\t\tconst subSettingMatches = new SettingMatches(searchString, subSetting, this.requireFullQueryMatch, this.searchDescription, this.valuesMatcher, this.configurationService);\n\t\t\t\tconst words = searchString.split(' ');\n\t\t\t\tconst descriptionRanges: IRange[] = this.getRangesForWords(words, this.descriptionMatchingWords, [subSettingMatches.descriptionMatchingWords, subSettingMatches.keyMatchingWords, subSettingMatches.valueMatchingWords]);\n\t\t\t\tconst keyRanges: IRange[] = this.getRangesForWords(words, this.keyMatchingWords, [subSettingMatches.descriptionMatchingWords, subSettingMatches.keyMatchingWords, subSettingMatches.valueMatchingWords]);\n\t\t\t\tconst subSettingKeyRanges: IRange[] = this.getRangesForWords(words, subSettingMatches.keyMatchingWords, [this.descriptionMatchingWords, this.keyMatchingWords, subSettingMatches.valueMatchingWords]);\n\t\t\t\tconst subSettingValueRanges: IRange[] = this.getRangesForWords(words, subSettingMatches.valueMatchingWords, [this.descriptionMatchingWords, this.keyMatchingWords, subSettingMatches.keyMatchingWords]);\n\t\t\t\tresult.push(...descriptionRanges, ...keyRanges, ...subSettingKeyRanges, ...subSettingValueRanges);\n\t\t\t\tresult.push(...subSettingMatches.matches);\n\t\t\t\tthis.refreshMatchType(keyRanges.length + subSettingKeyRanges.length);\n\t\t\t\tthis.matchType |= subSettingMatches.matchType;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate _doFindMatchesInSetting(searchString: string, setting: ISetting): IRange[] {\n\t\tconst registry: { [qualifiedKey: string]: IJSONSchema } = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties();\n\t\tconst schema: IJSONSchema = registry[setting.key];\n\n\t\tconst words = searchString.split(' ');\n\t\tconst settingKeyAsWords: string = setting.key.split('.').join(' ');\n\n\t\tconst settingValue = this.configurationService.getValue(setting.key);\n\n\t\tfor (const word of words) {\n\t\t\t// Whole word match attempts also take place within this loop.\n\t\t\tif (this.searchDescription) {\n\t\t\t\tfor (let lineIndex = 0; lineIndex < setting.description.length; lineIndex++) {\n\t\t\t\t\tconst descriptionMatches = matchesWords(word, setting.description[lineIndex], true);\n\t\t\t\t\tif (descriptionMatches) {\n\t\t\t\t\t\tthis.descriptionMatchingWords.set(word, descriptionMatches.map(match => this.toDescriptionRange(setting, match, lineIndex)));\n\t\t\t\t\t}\n\t\t\t\t\tthis.checkForWholeWordMatchType(word, setting.description[lineIndex]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst keyMatches = or(matchesWords, matchesCamelCase)(word, settingKeyAsWords);\n\t\t\tif (keyMatches) {\n\t\t\t\tthis.keyMatchingWords.set(word, keyMatches.map(match => this.toKeyRange(setting, match)));\n\t\t\t}\n\t\t\tthis.checkForWholeWordMatchType(word, settingKeyAsWords);\n\n\t\t\tconst valueMatches = typeof settingValue === 'string' ? matchesContiguousSubString(word, settingValue) : null;\n\t\t\tif (valueMatches) {\n\t\t\t\tthis.valueMatchingWords.set(word, valueMatches.map(match => this.toValueRange(setting, match)));\n\t\t\t} else if (schema && schema.enum && schema.enum.some(enumValue => typeof enumValue === 'string' && !!matchesContiguousSubString(word, enumValue))) {\n\t\t\t\tthis.valueMatchingWords.set(word, []);\n\t\t\t}\n\t\t\tif (typeof settingValue === 'string') {\n\t\t\t\tthis.checkForWholeWordMatchType(word, settingValue);\n\t\t\t}\n\t\t}\n\n\t\tconst descriptionRanges: IRange[] = [];\n\t\tif (this.searchDescription) {\n\t\t\tfor (let lineIndex = 0; lineIndex < setting.description.length; lineIndex++) {\n\t\t\t\tconst matches = or(matchesContiguousSubString)(searchString, setting.description[lineIndex] || '') || [];\n\t\t\t\tdescriptionRanges.push(...matches.map(match => this.toDescriptionRange(setting, match, lineIndex)));\n\t\t\t}\n\t\t\tif (descriptionRanges.length === 0) {\n\t\t\t\tdescriptionRanges.push(...this.getRangesForWords(words, this.descriptionMatchingWords, [this.keyMatchingWords, this.valueMatchingWords]));\n\t\t\t}\n\t\t}\n\n\t\tconst keyMatches = or(matchesPrefix, matchesContiguousSubString)(searchString, setting.key);\n\t\tconst keyRanges: IRange[] = keyMatches ? keyMatches.map(match => this.toKeyRange(setting, match)) : this.getRangesForWords(words, this.keyMatchingWords, [this.descriptionMatchingWords, this.valueMatchingWords]);\n\n\t\tlet valueRanges: IRange[] = [];\n\t\tif (typeof settingValue === 'string' && settingValue) {\n\t\t\tconst valueMatches = or(matchesPrefix, matchesContiguousSubString)(searchString, settingValue);\n\t\t\tvalueRanges = valueMatches ? valueMatches.map(match => this.toValueRange(setting, match)) : this.getRangesForWords(words, this.valueMatchingWords, [this.keyMatchingWords, this.descriptionMatchingWords]);\n\t\t} else {\n\t\t\tvalueRanges = this.valuesMatcher(searchString, setting);\n\t\t}\n\n\t\tthis.refreshMatchType(keyRanges.length);\n\t\treturn [...descriptionRanges, ...keyRanges, ...valueRanges];\n\t}\n\n\tprivate checkForWholeWordMatchType(singleWordQuery: string, lineToSearch: string) {\n\t\t// Trim excess ending characters off the query.\n\t\tsingleWordQuery = singleWordQuery.toLowerCase().replace(/[\\s-\\._]+$/, '');\n\t\tlineToSearch = lineToSearch.toLowerCase();\n\t\tconst singleWordRegex = new RegExp(`\\\\b${strings.escapeRegExpCharacters(singleWordQuery)}\\\\b`);\n\t\tif (singleWordRegex.test(lineToSearch)) {\n\t\t\tthis.matchType |= SettingMatchType.WholeWordMatch;\n\t\t}\n\t}\n\n\tprivate refreshMatchType(keyRangesLength: number) {\n\t\tif (keyRangesLength) {\n\t\t\tthis.matchType |= SettingMatchType.KeyMatch;\n\t\t}\n\t}\n\n\tprivate getRangesForWords(words: string[], from: Map<string, IRange[]>, others: Map<string, IRange[]>[]): IRange[] {\n\t\tconst result: IRange[] = [];\n\t\tfor (const word of words) {\n\t\t\tconst ranges = from.get(word);\n\t\t\tif (ranges) {\n\t\t\t\tresult.push(...ranges);\n\t\t\t} else if (this.requireFullQueryMatch && others.every(o => !o.has(word))) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate toKeyRange(setting: ISetting, match: IMatch): IRange {\n\t\treturn {\n\t\t\tstartLineNumber: setting.keyRange.startLineNumber,\n\t\t\tstartColumn: setting.keyRange.startColumn + match.start,\n\t\t\tendLineNumber: setting.keyRange.startLineNumber,\n\t\t\tendColumn: setting.keyRange.startColumn + match.end\n\t\t};\n\t}\n\n\tprivate toDescriptionRange(setting: ISetting, match: IMatch, lineIndex: number): IRange {\n\t\treturn {\n\t\t\tstartLineNumber: setting.descriptionRanges[lineIndex].startLineNumber,\n\t\t\tstartColumn: setting.descriptionRanges[lineIndex].startColumn + match.start,\n\t\t\tendLineNumber: setting.descriptionRanges[lineIndex].endLineNumber,\n\t\t\tendColumn: setting.descriptionRanges[lineIndex].startColumn + match.end\n\t\t};\n\t}\n\n\tprivate toValueRange(setting: ISetting, match: IMatch): IRange {\n\t\treturn {\n\t\t\tstartLineNumber: setting.valueRange.startLineNumber,\n\t\t\tstartColumn: setting.valueRange.startColumn + match.start + 1,\n\t\t\tendLineNumber: setting.valueRange.startLineNumber,\n\t\t\tendColumn: setting.valueRange.startColumn + match.end + 1\n\t\t};\n\t}\n}\n\nclass RemoteSearchKeysProvider {\n\tprivate settingKeys: string[] = [];\n\tprivate settingsRecord: Record<string, ISetting> = {};\n\tprivate currentPreferencesModel: ISettingsEditorModel | undefined;\n\n\tconstructor(\n\t\tprivate readonly aiRelatedInformationService: IAiRelatedInformationService\n\t) { }\n\n\tupdateModel(preferencesModel: ISettingsEditorModel) {\n\t\tif (preferencesModel === this.currentPreferencesModel) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.currentPreferencesModel = preferencesModel;\n\t\tthis.refresh();\n\t}\n\n\tprivate refresh() {\n\t\tthis.settingKeys = [];\n\t\tthis.settingsRecord = {};\n\n\t\tif (\n\t\t\t!this.currentPreferencesModel ||\n\t\t\t!this.aiRelatedInformationService.isEnabled()\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const group of this.currentPreferencesModel.settingsGroups) {\n\t\t\tif (group.id === 'mostCommonlyUsed') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfor (const section of group.sections) {\n\t\t\t\tfor (const setting of section.settings) {\n\t\t\t\t\tthis.settingKeys.push(setting.key);\n\t\t\t\t\tthis.settingsRecord[setting.key] = setting;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tgetSettingKeys(): string[] {\n\t\treturn this.settingKeys;\n\t}\n\n\tgetSettingsRecord(): Record<string, ISetting> {\n\t\treturn this.settingsRecord;\n\t}\n}\n\nexport class RemoteSearchProvider implements ISearchProvider {\n\tprivate static readonly AI_RELATED_INFORMATION_THRESHOLD = 0.73;\n\tprivate static readonly AI_RELATED_INFORMATION_MAX_PICKS = 15;\n\n\tprivate readonly _keysProvider: RemoteSearchKeysProvider;\n\tprivate _filter: string = '';\n\n\tconstructor(\n\t\t@IAiRelatedInformationService private readonly aiRelatedInformationService: IAiRelatedInformationService\n\t) {\n\t\tthis._keysProvider = new RemoteSearchKeysProvider(aiRelatedInformationService);\n\t}\n\n\tsetFilter(filter: string) {\n\t\tthis._filter = cleanFilter(filter);\n\t}\n\n\tasync searchModel(preferencesModel: ISettingsEditorModel, token?: CancellationToken | undefined): Promise<ISearchResult | null> {\n\t\tif (\n\t\t\t!this._filter ||\n\t\t\t!this.aiRelatedInformationService.isEnabled()\n\t\t) {\n\t\t\treturn null;\n\t\t}\n\n\t\tthis._keysProvider.updateModel(preferencesModel);\n\n\t\treturn {\n\t\t\tfilterMatches: await this.getAiRelatedInformationItems(token)\n\t\t};\n\t}\n\n\tprivate async getAiRelatedInformationItems(token?: CancellationToken | undefined) {\n\t\tconst settingsRecord = this._keysProvider.getSettingsRecord();\n\n\t\tconst filterMatches: ISettingMatch[] = [];\n\t\tconst relatedInformation = await this.aiRelatedInformationService.getRelatedInformation(this._filter, [RelatedInformationType.SettingInformation], token ?? CancellationToken.None) as SettingInformationResult[];\n\t\trelatedInformation.sort((a, b) => b.weight - a.weight);\n\n\t\tfor (const info of relatedInformation) {\n\t\t\tif (info.weight < RemoteSearchProvider.AI_RELATED_INFORMATION_THRESHOLD || filterMatches.length === RemoteSearchProvider.AI_RELATED_INFORMATION_MAX_PICKS) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tconst pick = info.setting;\n\t\t\tfilterMatches.push({\n\t\t\t\tsetting: settingsRecord[pick],\n\t\t\t\tmatches: [settingsRecord[pick].range],\n\t\t\t\tmatchType: SettingMatchType.RemoteMatch,\n\t\t\t\tscore: info.weight\n\t\t\t});\n\t\t}\n\n\t\treturn filterMatches;\n\t}\n}\n\nregisterSingleton(IPreferencesSearchService, PreferencesSearchService, InstantiationType.Delayed);\n"]}