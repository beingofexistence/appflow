{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/preferences/browser/settingsTreeModels.ts"],"names":[],"mappings":"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","file":"settingsTreeModels.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from 'vs/base/common/arrays';\nimport { escapeRegExpCharacters, isFalsyOrWhitespace } from 'vs/base/common/strings';\nimport { isUndefinedOrNull } from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport { ConfigurationTarget, IConfigurationValue } from 'vs/platform/configuration/common/configuration';\nimport { SettingsTarget } from 'vs/workbench/contrib/preferences/browser/preferencesWidgets';\nimport { ITOCEntry, knownAcronyms, knownTermMappings, tocData } from 'vs/workbench/contrib/preferences/browser/settingsLayout';\nimport { ENABLE_EXTENSION_TOGGLE_SETTINGS, ENABLE_LANGUAGE_FILTER, MODIFIED_SETTING_TAG, POLICY_SETTING_TAG, REQUIRE_TRUSTED_WORKSPACE_SETTING_TAG } from 'vs/workbench/contrib/preferences/common/preferences';\nimport { IExtensionSetting, ISearchResult, ISetting, ISettingMatch, SettingMatchType, SettingValueType } from 'vs/workbench/services/preferences/common/preferences';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { FOLDER_SCOPES, WORKSPACE_SCOPES, REMOTE_MACHINE_SCOPES, LOCAL_MACHINE_SCOPES, IWorkbenchConfigurationService, APPLICATION_SCOPES } from 'vs/workbench/services/configuration/common/configuration';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Emitter } from 'vs/base/common/event';\nimport { ConfigurationScope, EditPresentationTypes, Extensions, IConfigurationRegistry, IExtensionInfo } from 'vs/platform/configuration/common/configurationRegistry';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\nimport { IProductService } from 'vs/platform/product/common/productService';\n\nexport const ONLINE_SERVICES_SETTING_TAG = 'usesOnlineServices';\n\nexport interface ISettingsEditorViewState {\n\tsettingsTarget: SettingsTarget;\n\tquery?: string; // used to keep track of loading from setInput vs loading from cache\n\ttagFilters?: Set<string>;\n\textensionFilters?: Set<string>;\n\tfeatureFilters?: Set<string>;\n\tidFilters?: Set<string>;\n\tlanguageFilter?: string;\n\tfilterToCategory?: SettingsTreeGroupElement;\n}\n\nexport abstract class SettingsTreeElement extends Disposable {\n\tid: string;\n\tparent?: SettingsTreeGroupElement;\n\n\tprivate _tabbable = false;\n\tprotected readonly _onDidChangeTabbable = new Emitter<void>();\n\treadonly onDidChangeTabbable = this._onDidChangeTabbable.event;\n\n\tconstructor(_id: string) {\n\t\tsuper();\n\t\tthis.id = _id;\n\t}\n\n\tget tabbable(): boolean {\n\t\treturn this._tabbable;\n\t}\n\n\tset tabbable(value: boolean) {\n\t\tthis._tabbable = value;\n\t\tthis._onDidChangeTabbable.fire();\n\t}\n}\n\nexport type SettingsTreeGroupChild = (SettingsTreeGroupElement | SettingsTreeSettingElement | SettingsTreeNewExtensionsElement);\n\nexport class SettingsTreeGroupElement extends SettingsTreeElement {\n\tcount?: number;\n\tlabel: string;\n\tlevel: number;\n\tisFirstGroup: boolean;\n\n\tprivate _childSettingKeys: Set<string> = new Set();\n\tprivate _children: SettingsTreeGroupChild[] = [];\n\n\tget children(): SettingsTreeGroupChild[] {\n\t\treturn this._children;\n\t}\n\n\tset children(newChildren: SettingsTreeGroupChild[]) {\n\t\tthis._children = newChildren;\n\n\t\tthis._childSettingKeys = new Set();\n\t\tthis._children.forEach(child => {\n\t\t\tif (child instanceof SettingsTreeSettingElement) {\n\t\t\t\tthis._childSettingKeys.add(child.setting.key);\n\t\t\t}\n\t\t});\n\t}\n\n\tconstructor(_id: string, count: number | undefined, label: string, level: number, isFirstGroup: boolean) {\n\t\tsuper(_id);\n\n\t\tthis.count = count;\n\t\tthis.label = label;\n\t\tthis.level = level;\n\t\tthis.isFirstGroup = isFirstGroup;\n\t}\n\n\t/**\n\t * Returns whether this group contains the given child key (to a depth of 1 only)\n\t */\n\tcontainsSetting(key: string): boolean {\n\t\treturn this._childSettingKeys.has(key);\n\t}\n}\n\nexport class SettingsTreeNewExtensionsElement extends SettingsTreeElement {\n\tconstructor(_id: string, public readonly extensionIds: string[]) {\n\t\tsuper(_id);\n\t}\n}\n\nexport class SettingsTreeSettingElement extends SettingsTreeElement {\n\tprivate static readonly MAX_DESC_LINES = 20;\n\n\tsetting: ISetting;\n\n\tprivate _displayCategory: string | null = null;\n\tprivate _displayLabel: string | null = null;\n\n\t/**\n\t * scopeValue || defaultValue, for rendering convenience.\n\t */\n\tvalue: any;\n\n\t/**\n\t * The value in the current settings scope.\n\t */\n\tscopeValue: any;\n\n\t/**\n\t * The default value\n\t */\n\tdefaultValue?: any;\n\n\t/**\n\t * The source of the default value to display.\n\t * This value also accounts for extension-contributed language-specific default value overrides.\n\t */\n\tdefaultValueSource: string | IExtensionInfo | undefined;\n\n\t/**\n\t * Whether the setting is configured in the selected scope.\n\t */\n\tisConfigured = false;\n\n\t/**\n\t * Whether the setting requires trusted target\n\t */\n\tisUntrusted = false;\n\n\t/**\n\t * Whether the setting is under a policy that blocks all changes.\n\t */\n\thasPolicyValue = false;\n\n\ttags?: Set<string>;\n\toverriddenScopeList: string[] = [];\n\toverriddenDefaultsLanguageList: string[] = [];\n\n\t/**\n\t * For each language that contributes setting values or default overrides, we can see those values here.\n\t */\n\tlanguageOverrideValues: Map<string, IConfigurationValue<unknown>> = new Map<string, IConfigurationValue<unknown>>();\n\n\tdescription!: string;\n\tvalueType!: SettingValueType;\n\n\tconstructor(\n\t\tsetting: ISetting,\n\t\tparent: SettingsTreeGroupElement,\n\t\treadonly settingsTarget: SettingsTarget,\n\t\tprivate readonly isWorkspaceTrusted: boolean,\n\t\tprivate readonly languageFilter: string | undefined,\n\t\tprivate readonly languageService: ILanguageService,\n\t\tprivate readonly productService: IProductService,\n\t\tprivate readonly userDataProfileService: IUserDataProfileService,\n\t\tprivate readonly configurationService: IWorkbenchConfigurationService,\n\t) {\n\t\tsuper(sanitizeId(parent.id + '_' + setting.key));\n\t\tthis.setting = setting;\n\t\tthis.parent = parent;\n\n\t\t// Make sure description and valueType are initialized\n\t\tthis.initSettingDescription();\n\t\tthis.initSettingValueType();\n\t}\n\n\tget displayCategory(): string {\n\t\tif (!this._displayCategory) {\n\t\t\tthis.initLabels();\n\t\t}\n\n\t\treturn this._displayCategory!;\n\t}\n\n\tget displayLabel(): string {\n\t\tif (!this._displayLabel) {\n\t\t\tthis.initLabels();\n\t\t}\n\n\t\treturn this._displayLabel!;\n\t}\n\n\tprivate initLabels(): void {\n\t\tif (this.setting.title) {\n\t\t\tthis._displayLabel = this.setting.title;\n\t\t\tthis._displayCategory = '';\n\t\t\treturn;\n\t\t}\n\t\tconst displayKeyFormat = settingKeyToDisplayFormat(this.setting.key, this.parent!.id, this.setting.isLanguageTagSetting);\n\t\tthis._displayLabel = displayKeyFormat.label;\n\t\tthis._displayCategory = displayKeyFormat.category;\n\t}\n\n\tprivate initSettingDescription() {\n\t\tif (this.setting.description.length > SettingsTreeSettingElement.MAX_DESC_LINES) {\n\t\t\tconst truncatedDescLines = this.setting.description.slice(0, SettingsTreeSettingElement.MAX_DESC_LINES);\n\t\t\ttruncatedDescLines.push('[...]');\n\t\t\tthis.description = truncatedDescLines.join('\\n');\n\t\t} else {\n\t\t\tthis.description = this.setting.description.join('\\n');\n\t\t}\n\t}\n\n\tprivate initSettingValueType() {\n\t\tif (isExtensionToggleSetting(this.setting, this.productService)) {\n\t\t\tthis.valueType = SettingValueType.ExtensionToggle;\n\t\t} else if (this.setting.enum && (!this.setting.type || settingTypeEnumRenderable(this.setting.type))) {\n\t\t\tthis.valueType = SettingValueType.Enum;\n\t\t} else if (this.setting.type === 'string') {\n\t\t\tif (this.setting.editPresentation === EditPresentationTypes.Multiline) {\n\t\t\t\tthis.valueType = SettingValueType.MultilineString;\n\t\t\t} else {\n\t\t\t\tthis.valueType = SettingValueType.String;\n\t\t\t}\n\t\t} else if (isExcludeSetting(this.setting)) {\n\t\t\tthis.valueType = SettingValueType.Exclude;\n\t\t} else if (isIncludeSetting(this.setting)) {\n\t\t\tthis.valueType = SettingValueType.Include;\n\t\t} else if (this.setting.type === 'integer') {\n\t\t\tthis.valueType = SettingValueType.Integer;\n\t\t} else if (this.setting.type === 'number') {\n\t\t\tthis.valueType = SettingValueType.Number;\n\t\t} else if (this.setting.type === 'boolean') {\n\t\t\tthis.valueType = SettingValueType.Boolean;\n\t\t} else if (this.setting.type === 'array' && this.setting.arrayItemType &&\n\t\t\t['string', 'enum', 'number', 'integer'].includes(this.setting.arrayItemType)) {\n\t\t\tthis.valueType = SettingValueType.Array;\n\t\t} else if (Array.isArray(this.setting.type) && this.setting.type.includes(SettingValueType.Null) && this.setting.type.length === 2) {\n\t\t\tif (this.setting.type.includes(SettingValueType.Integer)) {\n\t\t\t\tthis.valueType = SettingValueType.NullableInteger;\n\t\t\t} else if (this.setting.type.includes(SettingValueType.Number)) {\n\t\t\t\tthis.valueType = SettingValueType.NullableNumber;\n\t\t\t} else {\n\t\t\t\tthis.valueType = SettingValueType.Complex;\n\t\t\t}\n\t\t} else if (isObjectSetting(this.setting)) {\n\t\t\tif (this.setting.allKeysAreBoolean) {\n\t\t\t\tthis.valueType = SettingValueType.BooleanObject;\n\t\t\t} else {\n\t\t\t\tthis.valueType = SettingValueType.Object;\n\t\t\t}\n\t\t} else if (this.setting.isLanguageTagSetting) {\n\t\t\tthis.valueType = SettingValueType.LanguageTag;\n\t\t} else {\n\t\t\tthis.valueType = SettingValueType.Complex;\n\t\t}\n\t}\n\n\tinspectSelf() {\n\t\tconst targetToInspect = this.getTargetToInspect(this.setting);\n\t\tconst inspectResult = inspectSetting(this.setting.key, targetToInspect, this.languageFilter, this.configurationService);\n\t\tthis.update(inspectResult, this.isWorkspaceTrusted);\n\t}\n\n\tprivate getTargetToInspect(setting: ISetting): SettingsTarget {\n\t\tif (!this.userDataProfileService.currentProfile.isDefault && !this.userDataProfileService.currentProfile.useDefaultFlags?.settings) {\n\t\t\tif (setting.scope === ConfigurationScope.APPLICATION) {\n\t\t\t\treturn ConfigurationTarget.APPLICATION;\n\t\t\t}\n\t\t\tif (this.configurationService.isSettingAppliedForAllProfiles(setting.key) && this.settingsTarget === ConfigurationTarget.USER_LOCAL) {\n\t\t\t\treturn ConfigurationTarget.APPLICATION;\n\t\t\t}\n\t\t}\n\t\treturn this.settingsTarget;\n\t}\n\n\tprivate update(inspectResult: IInspectResult, isWorkspaceTrusted: boolean): void {\n\t\tlet { isConfigured, inspected, targetSelector, inspectedLanguageOverrides, languageSelector } = inspectResult;\n\n\t\tswitch (targetSelector) {\n\t\t\tcase 'workspaceFolderValue':\n\t\t\tcase 'workspaceValue':\n\t\t\t\tthis.isUntrusted = !!this.setting.restricted && !isWorkspaceTrusted;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet displayValue = isConfigured ? inspected[targetSelector] : inspected.defaultValue;\n\t\tconst overriddenScopeList: string[] = [];\n\t\tconst overriddenDefaultsLanguageList: string[] = [];\n\t\tif ((languageSelector || targetSelector !== 'workspaceValue') && typeof inspected.workspaceValue !== 'undefined') {\n\t\t\toverriddenScopeList.push('workspace:');\n\t\t}\n\t\tif ((languageSelector || targetSelector !== 'userRemoteValue') && typeof inspected.userRemoteValue !== 'undefined') {\n\t\t\toverriddenScopeList.push('remote:');\n\t\t}\n\t\tif ((languageSelector || targetSelector !== 'userLocalValue') && typeof inspected.userLocalValue !== 'undefined') {\n\t\t\toverriddenScopeList.push('user:');\n\t\t}\n\n\t\tif (inspected.overrideIdentifiers) {\n\t\t\tfor (const overrideIdentifier of inspected.overrideIdentifiers) {\n\t\t\t\tconst inspectedOverride = inspectedLanguageOverrides.get(overrideIdentifier);\n\t\t\t\tif (inspectedOverride) {\n\t\t\t\t\tif (this.languageService.isRegisteredLanguageId(overrideIdentifier)) {\n\t\t\t\t\t\tif (languageSelector !== overrideIdentifier && typeof inspectedOverride.default?.override !== 'undefined') {\n\t\t\t\t\t\t\toverriddenDefaultsLanguageList.push(overrideIdentifier);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((languageSelector !== overrideIdentifier || targetSelector !== 'workspaceValue') && typeof inspectedOverride.workspace?.override !== 'undefined') {\n\t\t\t\t\t\t\toverriddenScopeList.push(`workspace:${overrideIdentifier}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((languageSelector !== overrideIdentifier || targetSelector !== 'userRemoteValue') && typeof inspectedOverride.userRemote?.override !== 'undefined') {\n\t\t\t\t\t\t\toverriddenScopeList.push(`remote:${overrideIdentifier}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((languageSelector !== overrideIdentifier || targetSelector !== 'userLocalValue') && typeof inspectedOverride.userLocal?.override !== 'undefined') {\n\t\t\t\t\t\t\toverriddenScopeList.push(`user:${overrideIdentifier}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.languageOverrideValues.set(overrideIdentifier, inspectedOverride);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.overriddenScopeList = overriddenScopeList;\n\t\tthis.overriddenDefaultsLanguageList = overriddenDefaultsLanguageList;\n\n\t\t// The user might have added, removed, or modified a language filter,\n\t\t// so we reset the default value source to the non-language-specific default value source for now.\n\t\tthis.defaultValueSource = this.setting.nonLanguageSpecificDefaultValueSource;\n\n\t\tif (inspected.policyValue) {\n\t\t\tthis.hasPolicyValue = true;\n\t\t\tisConfigured = false; // The user did not manually configure the setting themselves.\n\t\t\tdisplayValue = inspected.policyValue;\n\t\t\tthis.scopeValue = inspected.policyValue;\n\t\t\tthis.defaultValue = inspected.defaultValue;\n\t\t} else if (languageSelector && this.languageOverrideValues.has(languageSelector)) {\n\t\t\tconst overrideValues = this.languageOverrideValues.get(languageSelector)!;\n\t\t\t// In the worst case, go back to using the previous display value.\n\t\t\t// Also, sometimes the override is in the form of a default value override, so consider that second.\n\t\t\tdisplayValue = (isConfigured ? overrideValues[targetSelector] : overrideValues.defaultValue) ?? displayValue;\n\t\t\tthis.scopeValue = isConfigured && overrideValues[targetSelector];\n\t\t\tthis.defaultValue = overrideValues.defaultValue ?? inspected.defaultValue;\n\n\t\t\tconst registryValues = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationDefaultsOverrides();\n\t\t\tconst overrideValueSource = registryValues.get(`[${languageSelector}]`)?.valuesSources?.get(this.setting.key);\n\t\t\tif (overrideValueSource) {\n\t\t\t\tthis.defaultValueSource = overrideValueSource;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.scopeValue = isConfigured && inspected[targetSelector];\n\t\t\tthis.defaultValue = inspected.defaultValue;\n\t\t}\n\n\t\tthis.value = displayValue;\n\t\tthis.isConfigured = isConfigured;\n\t\tif (isConfigured || this.setting.tags || this.tags || this.setting.restricted || this.hasPolicyValue) {\n\t\t\t// Don't create an empty Set for all 1000 settings, only if needed\n\t\t\tthis.tags = new Set<string>();\n\t\t\tif (isConfigured) {\n\t\t\t\tthis.tags.add(MODIFIED_SETTING_TAG);\n\t\t\t}\n\n\t\t\tthis.setting.tags?.forEach(tag => this.tags!.add(tag));\n\n\t\t\tif (this.setting.restricted) {\n\t\t\t\tthis.tags.add(REQUIRE_TRUSTED_WORKSPACE_SETTING_TAG);\n\t\t\t}\n\n\t\t\tif (this.hasPolicyValue) {\n\t\t\t\tthis.tags.add(POLICY_SETTING_TAG);\n\t\t\t}\n\t\t}\n\t}\n\n\tmatchesAllTags(tagFilters?: Set<string>): boolean {\n\t\tif (!tagFilters?.size) {\n\t\t\t// This setting, which may have tags,\n\t\t\t// matches against a query with no tags.\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!this.tags) {\n\t\t\t// The setting must inspect itself to get tag information\n\t\t\t// including for the hasPolicy tag.\n\t\t\tthis.inspectSelf();\n\t\t}\n\n\t\t// Check that the filter tags are a subset of this setting's tags\n\t\treturn !!this.tags?.size &&\n\t\t\tArray.from(tagFilters).every(tag => this.tags!.has(tag));\n\t}\n\n\tmatchesScope(scope: SettingsTarget, isRemote: boolean): boolean {\n\t\tconst configTarget = URI.isUri(scope) ? ConfigurationTarget.WORKSPACE_FOLDER : scope;\n\n\t\tif (!this.setting.scope) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (configTarget === ConfigurationTarget.APPLICATION) {\n\t\t\treturn APPLICATION_SCOPES.includes(this.setting.scope);\n\t\t}\n\n\t\tif (configTarget === ConfigurationTarget.WORKSPACE_FOLDER) {\n\t\t\treturn FOLDER_SCOPES.includes(this.setting.scope);\n\t\t}\n\n\t\tif (configTarget === ConfigurationTarget.WORKSPACE) {\n\t\t\treturn WORKSPACE_SCOPES.includes(this.setting.scope);\n\t\t}\n\n\t\tif (configTarget === ConfigurationTarget.USER_REMOTE) {\n\t\t\treturn REMOTE_MACHINE_SCOPES.includes(this.setting.scope);\n\t\t}\n\n\t\tif (configTarget === ConfigurationTarget.USER_LOCAL) {\n\t\t\tif (isRemote) {\n\t\t\t\treturn LOCAL_MACHINE_SCOPES.includes(this.setting.scope);\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tmatchesAnyExtension(extensionFilters?: Set<string>): boolean {\n\t\tif (!extensionFilters || !extensionFilters.size) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!this.setting.extensionInfo) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn Array.from(extensionFilters).some(extensionId => extensionId.toLowerCase() === this.setting.extensionInfo!.id.toLowerCase());\n\t}\n\n\tmatchesAnyFeature(featureFilters?: Set<string>): boolean {\n\t\tif (!featureFilters || !featureFilters.size) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst features = tocData.children!.find(child => child.id === 'features');\n\n\t\treturn Array.from(featureFilters).some(filter => {\n\t\t\tif (features && features.children) {\n\t\t\t\tconst feature = features.children.find(feature => 'features/' + filter === feature.id);\n\t\t\t\tif (feature) {\n\t\t\t\t\tconst patterns = feature.settings?.map(setting => createSettingMatchRegExp(setting));\n\t\t\t\t\treturn patterns && !this.setting.extensionInfo && patterns.some(pattern => pattern.test(this.setting.key.toLowerCase()));\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t});\n\t}\n\n\tmatchesAnyId(idFilters?: Set<string>): boolean {\n\t\tif (!idFilters || !idFilters.size) {\n\t\t\treturn true;\n\t\t}\n\t\treturn idFilters.has(this.setting.key);\n\t}\n\n\tmatchesAllLanguages(languageFilter?: string): boolean {\n\t\tif (!languageFilter) {\n\t\t\t// We're not filtering by language.\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!this.languageService.isRegisteredLanguageId(languageFilter)) {\n\t\t\t// We're trying to filter by an invalid language.\n\t\t\treturn false;\n\t\t}\n\n\t\t// We have a language filter in the search widget at this point.\n\t\t// We decide to show all language overridable settings to make the\n\t\t// lang filter act more like a scope filter,\n\t\t// rather than adding on an implicit @modified as well.\n\t\tif (this.setting.scope === ConfigurationScope.LANGUAGE_OVERRIDABLE) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\n\nfunction createSettingMatchRegExp(pattern: string): RegExp {\n\tpattern = escapeRegExpCharacters(pattern)\n\t\t.replace(/\\\\\\*/g, '.*');\n\n\treturn new RegExp(`^${pattern}$`, 'i');\n}\n\nexport class SettingsTreeModel {\n\tprotected _root!: SettingsTreeGroupElement;\n\tprivate _tocRoot!: ITOCEntry<ISetting>;\n\tprivate readonly _treeElementsBySettingName = new Map<string, SettingsTreeSettingElement[]>();\n\n\tconstructor(\n\t\tprotected readonly _viewState: ISettingsEditorViewState,\n\t\tprivate _isWorkspaceTrusted: boolean,\n\t\t@IWorkbenchConfigurationService private readonly _configurationService: IWorkbenchConfigurationService,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@IUserDataProfileService private readonly _userDataProfileService: IUserDataProfileService,\n\t\t@IProductService private readonly _productService: IProductService\n\t) {\n\t}\n\n\tget root(): SettingsTreeGroupElement {\n\t\treturn this._root;\n\t}\n\n\tupdate(newTocRoot = this._tocRoot): void {\n\t\tthis._treeElementsBySettingName.clear();\n\n\t\tconst newRoot = this.createSettingsTreeGroupElement(newTocRoot);\n\t\tif (newRoot.children[0] instanceof SettingsTreeGroupElement) {\n\t\t\t(<SettingsTreeGroupElement>newRoot.children[0]).isFirstGroup = true;\n\t\t}\n\n\t\tif (this._root) {\n\t\t\tthis.disposeChildren(this._root.children);\n\t\t\tthis._root.children = newRoot.children;\n\t\t} else {\n\t\t\tthis._root = newRoot;\n\t\t}\n\t}\n\n\tupdateWorkspaceTrust(workspaceTrusted: boolean): void {\n\t\tthis._isWorkspaceTrusted = workspaceTrusted;\n\t\tthis.updateRequireTrustedTargetElements();\n\t}\n\n\tprivate disposeChildren(children: SettingsTreeGroupChild[]) {\n\t\tfor (const child of children) {\n\t\t\tthis.recursiveDispose(child);\n\t\t}\n\t}\n\n\tprivate recursiveDispose(element: SettingsTreeElement) {\n\t\tif (element instanceof SettingsTreeGroupElement) {\n\t\t\tthis.disposeChildren(element.children);\n\t\t}\n\n\t\telement.dispose();\n\t}\n\n\tgetElementsByName(name: string): SettingsTreeSettingElement[] | null {\n\t\treturn this._treeElementsBySettingName.get(name) ?? null;\n\t}\n\n\tupdateElementsByName(name: string): void {\n\t\tif (!this._treeElementsBySettingName.has(name)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.reinspectSettings(this._treeElementsBySettingName.get(name)!);\n\t}\n\n\tprivate updateRequireTrustedTargetElements(): void {\n\t\tthis.reinspectSettings([...this._treeElementsBySettingName.values()].flat().filter(s => s.isUntrusted));\n\t}\n\n\tprivate reinspectSettings(settings: SettingsTreeSettingElement[]): void {\n\t\tfor (const element of settings) {\n\t\t\telement.inspectSelf();\n\t\t}\n\t}\n\n\tprivate createSettingsTreeGroupElement(tocEntry: ITOCEntry<ISetting>, parent?: SettingsTreeGroupElement): SettingsTreeGroupElement {\n\t\tconst depth = parent ? this.getDepth(parent) + 1 : 0;\n\t\tconst element = new SettingsTreeGroupElement(tocEntry.id, undefined, tocEntry.label, depth, false);\n\t\telement.parent = parent;\n\n\t\tconst children: SettingsTreeGroupChild[] = [];\n\t\tif (tocEntry.settings) {\n\t\t\tconst settingChildren = tocEntry.settings.map(s => this.createSettingsTreeSettingElement(s, element))\n\t\t\t\t.filter(el => el.setting.deprecationMessage ? el.isConfigured : true);\n\t\t\tchildren.push(...settingChildren);\n\t\t}\n\n\t\tif (tocEntry.children) {\n\t\t\tconst groupChildren = tocEntry.children.map(child => this.createSettingsTreeGroupElement(child, element));\n\t\t\tchildren.push(...groupChildren);\n\t\t}\n\n\t\telement.children = children;\n\n\t\treturn element;\n\t}\n\n\tprivate getDepth(element: SettingsTreeElement): number {\n\t\tif (element.parent) {\n\t\t\treturn 1 + this.getDepth(element.parent);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tprivate createSettingsTreeSettingElement(setting: ISetting, parent: SettingsTreeGroupElement): SettingsTreeSettingElement {\n\t\tconst element = new SettingsTreeSettingElement(\n\t\t\tsetting,\n\t\t\tparent,\n\t\t\tthis._viewState.settingsTarget,\n\t\t\tthis._isWorkspaceTrusted,\n\t\t\tthis._viewState.languageFilter,\n\t\t\tthis._languageService,\n\t\t\tthis._productService,\n\t\t\tthis._userDataProfileService,\n\t\t\tthis._configurationService);\n\n\t\tconst nameElements = this._treeElementsBySettingName.get(setting.key) || [];\n\t\tnameElements.push(element);\n\t\tthis._treeElementsBySettingName.set(setting.key, nameElements);\n\t\treturn element;\n\t}\n}\n\ninterface IInspectResult {\n\tisConfigured: boolean;\n\tinspected: IConfigurationValue<unknown>;\n\ttargetSelector: 'applicationValue' | 'userLocalValue' | 'userRemoteValue' | 'workspaceValue' | 'workspaceFolderValue';\n\tinspectedLanguageOverrides: Map<string, IConfigurationValue<unknown>>;\n\tlanguageSelector: string | undefined;\n}\n\nexport function inspectSetting(key: string, target: SettingsTarget, languageFilter: string | undefined, configurationService: IWorkbenchConfigurationService): IInspectResult {\n\tconst inspectOverrides = URI.isUri(target) ? { resource: target } : undefined;\n\tconst inspected = configurationService.inspect(key, inspectOverrides);\n\tconst targetSelector = target === ConfigurationTarget.APPLICATION ? 'applicationValue' :\n\t\ttarget === ConfigurationTarget.USER_LOCAL ? 'userLocalValue' :\n\t\t\ttarget === ConfigurationTarget.USER_REMOTE ? 'userRemoteValue' :\n\t\t\t\ttarget === ConfigurationTarget.WORKSPACE ? 'workspaceValue' :\n\t\t\t\t\t'workspaceFolderValue';\n\tconst targetOverrideSelector = target === ConfigurationTarget.APPLICATION ? 'application' :\n\t\ttarget === ConfigurationTarget.USER_LOCAL ? 'userLocal' :\n\t\t\ttarget === ConfigurationTarget.USER_REMOTE ? 'userRemote' :\n\t\t\t\ttarget === ConfigurationTarget.WORKSPACE ? 'workspace' :\n\t\t\t\t\t'workspaceFolder';\n\tlet isConfigured = typeof inspected[targetSelector] !== 'undefined';\n\n\tconst overrideIdentifiers = inspected.overrideIdentifiers;\n\tconst inspectedLanguageOverrides = new Map<string, IConfigurationValue<unknown>>();\n\n\t// We must reset isConfigured to be false if languageFilter is set, and manually\n\t// determine whether it can be set to true later.\n\tif (languageFilter) {\n\t\tisConfigured = false;\n\t}\n\tif (overrideIdentifiers) {\n\t\t// The setting we're looking at has language overrides.\n\t\tfor (const overrideIdentifier of overrideIdentifiers) {\n\t\t\tinspectedLanguageOverrides.set(overrideIdentifier, configurationService.inspect(key, { overrideIdentifier }));\n\t\t}\n\n\t\t// For all language filters, see if there's an override for that filter.\n\t\tif (languageFilter) {\n\t\t\tif (inspectedLanguageOverrides.has(languageFilter)) {\n\t\t\t\tconst overrideValue = inspectedLanguageOverrides.get(languageFilter)![targetOverrideSelector]?.override;\n\t\t\t\tif (typeof overrideValue !== 'undefined') {\n\t\t\t\t\tisConfigured = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn { isConfigured, inspected, targetSelector, inspectedLanguageOverrides, languageSelector: languageFilter };\n}\n\nfunction sanitizeId(id: string): string {\n\treturn id.replace(/[\\.\\/]/, '_');\n}\n\nexport function settingKeyToDisplayFormat(key: string, groupId: string = '', isLanguageTagSetting: boolean = false): { category: string; label: string } {\n\tconst lastDotIdx = key.lastIndexOf('.');\n\tlet category = '';\n\tif (lastDotIdx >= 0) {\n\t\tcategory = key.substring(0, lastDotIdx);\n\t\tkey = key.substring(lastDotIdx + 1);\n\t}\n\n\tgroupId = groupId.replace(/\\//g, '.');\n\tcategory = trimCategoryForGroup(category, groupId);\n\tcategory = wordifyKey(category);\n\n\tif (isLanguageTagSetting) {\n\t\tkey = key.replace(/[\\[\\]]/g, '');\n\t\tkey = '$(bracket) ' + key;\n\t}\n\n\tconst label = wordifyKey(key);\n\treturn { category, label };\n}\n\nfunction wordifyKey(key: string): string {\n\tkey = key\n\t\t.replace(/\\.([a-z0-9])/g, (_, p1) => ` \\u203A ${p1.toUpperCase()}`) // Replace dot with spaced '>'\n\t\t.replace(/([a-z0-9])([A-Z])/g, '$1 $2') // Camel case to spacing, fooBar => foo Bar\n\t\t.replace(/^[a-z]/g, match => match.toUpperCase()) // Upper casing all first letters, foo => Foo\n\t\t.replace(/\\b\\w+\\b/g, match => { // Upper casing known acronyms\n\t\t\treturn knownAcronyms.has(match.toLowerCase()) ?\n\t\t\t\tmatch.toUpperCase() :\n\t\t\t\tmatch;\n\t\t});\n\n\tfor (const [k, v] of knownTermMappings) {\n\t\tkey = key.replace(new RegExp(`\\\\b${k}\\\\b`, 'gi'), v);\n\t}\n\n\treturn key;\n}\n\n/**\n * Removes redundant sections of the category label.\n * A redundant section is a section already reflected in the groupId.\n *\n * @param category The category of the specific setting.\n * @param groupId The author + extension ID.\n * @returns The new category label to use.\n */\nfunction trimCategoryForGroup(category: string, groupId: string): string {\n\tconst doTrim = (forward: boolean) => {\n\t\t// Remove the Insiders portion if the category doesn't use it.\n\t\tif (!/insiders$/i.test(category)) {\n\t\t\tgroupId = groupId.replace(/-?insiders$/i, '');\n\t\t}\n\t\tconst parts = groupId.split('.')\n\t\t\t.map(part => {\n\t\t\t\t// Remove hyphens, but only if that results in a match with the category.\n\t\t\t\tif (part.replace(/-/g, '').toLowerCase() === category.toLowerCase()) {\n\t\t\t\t\treturn part.replace(/-/g, '');\n\t\t\t\t} else {\n\t\t\t\t\treturn part;\n\t\t\t\t}\n\t\t\t});\n\t\twhile (parts.length) {\n\t\t\tconst reg = new RegExp(`^${parts.join('\\\\.')}(\\\\.|$)`, 'i');\n\t\t\tif (reg.test(category)) {\n\t\t\t\treturn category.replace(reg, '');\n\t\t\t}\n\n\t\t\tif (forward) {\n\t\t\t\tparts.pop();\n\t\t\t} else {\n\t\t\t\tparts.shift();\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t};\n\n\tlet trimmed = doTrim(true);\n\tif (trimmed === null) {\n\t\ttrimmed = doTrim(false);\n\t}\n\n\tif (trimmed === null) {\n\t\ttrimmed = category;\n\t}\n\n\treturn trimmed;\n}\n\nfunction isExtensionToggleSetting(setting: ISetting, productService: IProductService): boolean {\n\treturn ENABLE_EXTENSION_TOGGLE_SETTINGS &&\n\t\t!!productService.extensionRecommendations &&\n\t\t!!setting.displayExtensionId;\n}\n\nfunction isExcludeSetting(setting: ISetting): boolean {\n\treturn setting.key === 'files.exclude' ||\n\t\tsetting.key === 'search.exclude' ||\n\t\tsetting.key === 'workbench.localHistory.exclude' ||\n\t\tsetting.key === 'explorer.autoRevealExclude' ||\n\t\tsetting.key === 'files.readonlyExclude' ||\n\t\tsetting.key === 'files.watcherExclude';\n}\n\nfunction isIncludeSetting(setting: ISetting): boolean {\n\treturn setting.key === 'files.readonlyInclude';\n}\n\nfunction isObjectRenderableSchema({ type }: IJSONSchema): boolean {\n\treturn type === 'string' || type === 'boolean' || type === 'integer' || type === 'number';\n}\n\nfunction isObjectSetting({\n\ttype,\n\tobjectProperties,\n\tobjectPatternProperties,\n\tobjectAdditionalProperties\n}: ISetting): boolean {\n\tif (type !== 'object') {\n\t\treturn false;\n\t}\n\n\t// object can have any shape\n\tif (\n\t\tisUndefinedOrNull(objectProperties) &&\n\t\tisUndefinedOrNull(objectPatternProperties) &&\n\t\tisUndefinedOrNull(objectAdditionalProperties)\n\t) {\n\t\treturn false;\n\t}\n\n\t// objectAdditionalProperties allow the setting to have any shape,\n\t// but if there's a pattern property that handles everything, then every\n\t// property will match that patternProperty, so we don't need to look at\n\t// the value of objectAdditionalProperties in that case.\n\tif ((objectAdditionalProperties === true || objectAdditionalProperties === undefined)\n\t\t&& !Object.keys(objectPatternProperties ?? {}).includes('.*')) {\n\t\treturn false;\n\t}\n\n\tconst schemas = [...Object.values(objectProperties ?? {}), ...Object.values(objectPatternProperties ?? {})];\n\n\tif (objectAdditionalProperties && typeof objectAdditionalProperties === 'object') {\n\t\tschemas.push(objectAdditionalProperties);\n\t}\n\n\t// Flatten anyof schemas\n\tconst flatSchemas = schemas.map((schema): IJSONSchema[] => {\n\t\tif (Array.isArray(schema.anyOf)) {\n\t\t\treturn schema.anyOf;\n\t\t}\n\t\treturn [schema];\n\t}).flat();\n\n\treturn flatSchemas.every(isObjectRenderableSchema);\n}\n\nfunction settingTypeEnumRenderable(_type: string | string[]) {\n\tconst enumRenderableSettingTypes = ['string', 'boolean', 'null', 'integer', 'number'];\n\tconst type = Array.isArray(_type) ? _type : [_type];\n\treturn type.every(type => enumRenderableSettingTypes.includes(type));\n}\n\nexport const enum SearchResultIdx {\n\tLocal = 0,\n\tRemote = 1,\n\tNewExtensions = 2\n}\n\nexport class SearchResultModel extends SettingsTreeModel {\n\tprivate rawSearchResults: ISearchResult[] | null = null;\n\tprivate cachedUniqueSearchResults: ISearchResult | null = null;\n\tprivate newExtensionSearchResults: ISearchResult | null = null;\n\tprivate searchResultCount: number | null = null;\n\n\treadonly id = 'searchResultModel';\n\n\tconstructor(\n\t\tviewState: ISettingsEditorViewState,\n\t\tisWorkspaceTrusted: boolean,\n\t\t@IWorkbenchConfigurationService configurationService: IWorkbenchConfigurationService,\n\t\t@IWorkbenchEnvironmentService private environmentService: IWorkbenchEnvironmentService,\n\t\t@ILanguageService languageService: ILanguageService,\n\t\t@IUserDataProfileService userDataProfileService: IUserDataProfileService,\n\t\t@IProductService productService: IProductService\n\t) {\n\t\tsuper(viewState, isWorkspaceTrusted, configurationService, languageService, userDataProfileService, productService);\n\t\tthis.update({ id: 'searchResultModel', label: '' });\n\t}\n\n\tprivate compareTwoNullableNumbers(a: number | undefined, b: number | undefined): number {\n\t\tconst aOrMax = a ?? Number.MAX_SAFE_INTEGER;\n\t\tconst bOrMax = b ?? Number.MAX_SAFE_INTEGER;\n\t\tif (aOrMax < bOrMax) {\n\t\t\treturn -1;\n\t\t} else if (aOrMax > bOrMax) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tprivate sortResults(filterMatches: ISettingMatch[]): ISettingMatch[] {\n\t\tfilterMatches.sort((a, b) => {\n\t\t\tif (a.matchType !== b.matchType) {\n\t\t\t\t// Sort by match type if the match types are not the same.\n\t\t\t\t// The priority of the match type is given by the SettingMatchType enum.\n\t\t\t\treturn b.matchType - a.matchType;\n\t\t\t} else if (a.matchType === SettingMatchType.RemoteMatch) {\n\t\t\t\t// The match types are the same and are RemoteMatch.\n\t\t\t\t// Sort by score.\n\t\t\t\treturn b.score - a.score;\n\t\t\t} else {\n\t\t\t\t// The match types are the same.\n\t\t\t\tif (a.setting.extensionInfo && b.setting.extensionInfo\n\t\t\t\t\t&& a.setting.extensionInfo.id === b.setting.extensionInfo.id) {\n\t\t\t\t\t// These settings belong to the same extension.\n\t\t\t\t\tif (a.setting.categoryLabel !== b.setting.categoryLabel\n\t\t\t\t\t\t&& (a.setting.categoryOrder !== undefined || b.setting.categoryOrder !== undefined)\n\t\t\t\t\t\t&& a.setting.categoryOrder !== b.setting.categoryOrder) {\n\t\t\t\t\t\t// These two settings don't belong to the same category and have different category orders.\n\t\t\t\t\t\treturn this.compareTwoNullableNumbers(a.setting.categoryOrder, b.setting.categoryOrder);\n\t\t\t\t\t} else if (a.setting.categoryLabel === b.setting.categoryLabel\n\t\t\t\t\t\t&& (a.setting.order !== undefined || b.setting.order !== undefined)\n\t\t\t\t\t\t&& a.setting.order !== b.setting.order) {\n\t\t\t\t\t\t// These two settings belong to the same category, but have different orders.\n\t\t\t\t\t\treturn this.compareTwoNullableNumbers(a.setting.order, b.setting.order);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// In the worst case, go back to lexicographical order.\n\t\t\t\treturn b.score - a.score;\n\t\t\t}\n\t\t});\n\t\treturn filterMatches;\n\t}\n\n\tgetUniqueResults(): ISearchResult | null {\n\t\tif (this.cachedUniqueSearchResults) {\n\t\t\treturn this.cachedUniqueSearchResults;\n\t\t}\n\n\t\tif (!this.rawSearchResults) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet combinedFilterMatches: ISettingMatch[] = [];\n\n\t\tconst localMatchKeys = new Set();\n\t\tconst localResult = this.rawSearchResults[SearchResultIdx.Local];\n\t\tif (localResult) {\n\t\t\tlocalResult.filterMatches.forEach(m => localMatchKeys.add(m.setting.key));\n\t\t\tcombinedFilterMatches = localResult.filterMatches;\n\t\t}\n\n\t\tconst remoteResult = this.rawSearchResults[SearchResultIdx.Remote];\n\t\tif (remoteResult) {\n\t\t\tremoteResult.filterMatches = remoteResult.filterMatches.filter(m => !localMatchKeys.has(m.setting.key));\n\t\t\tcombinedFilterMatches = combinedFilterMatches.concat(remoteResult.filterMatches);\n\n\t\t\tthis.newExtensionSearchResults = this.rawSearchResults[SearchResultIdx.NewExtensions];\n\t\t}\n\n\t\t// Combine and sort results.\n\t\tcombinedFilterMatches = this.sortResults(combinedFilterMatches);\n\n\t\tthis.cachedUniqueSearchResults = {\n\t\t\tfilterMatches: combinedFilterMatches,\n\t\t\texactMatch: localResult?.exactMatch || remoteResult?.exactMatch\n\t\t};\n\n\t\treturn this.cachedUniqueSearchResults;\n\t}\n\n\tgetRawResults(): ISearchResult[] {\n\t\treturn this.rawSearchResults || [];\n\t}\n\n\tsetResult(order: SearchResultIdx, result: ISearchResult | null): void {\n\t\tthis.cachedUniqueSearchResults = null;\n\t\tthis.newExtensionSearchResults = null;\n\n\t\tthis.rawSearchResults = this.rawSearchResults || [];\n\t\tif (!result) {\n\t\t\tdelete this.rawSearchResults[order];\n\t\t\treturn;\n\t\t}\n\n\t\tif (result.exactMatch) {\n\t\t\tthis.rawSearchResults = [];\n\t\t}\n\n\t\tthis.rawSearchResults[order] = result;\n\t\tthis.updateChildren();\n\t}\n\n\tupdateChildren(): void {\n\t\tthis.update({\n\t\t\tid: 'searchResultModel',\n\t\t\tlabel: 'searchResultModel',\n\t\t\tsettings: this.getFlatSettings()\n\t\t});\n\n\t\t// Save time, filter children in the search model instead of relying on the tree filter, which still requires heights to be calculated.\n\t\tconst isRemote = !!this.environmentService.remoteAuthority;\n\n\t\tthis.root.children = this.root.children\n\t\t\t.filter(child => child instanceof SettingsTreeSettingElement && child.matchesAllTags(this._viewState.tagFilters) && child.matchesScope(this._viewState.settingsTarget, isRemote) && child.matchesAnyExtension(this._viewState.extensionFilters) && child.matchesAnyId(this._viewState.idFilters) && child.matchesAnyFeature(this._viewState.featureFilters) && child.matchesAllLanguages(this._viewState.languageFilter));\n\t\tthis.searchResultCount = this.root.children.length;\n\n\t\tif (this.newExtensionSearchResults?.filterMatches.length) {\n\t\t\tlet resultExtensionIds = this.newExtensionSearchResults.filterMatches\n\t\t\t\t.map(result => (<IExtensionSetting>result.setting))\n\t\t\t\t.filter(setting => setting.extensionName && setting.extensionPublisher)\n\t\t\t\t.map(setting => `${setting.extensionPublisher}.${setting.extensionName}`);\n\t\t\tresultExtensionIds = arrays.distinct(resultExtensionIds);\n\n\t\t\tif (resultExtensionIds.length) {\n\t\t\t\tconst newExtElement = new SettingsTreeNewExtensionsElement('newExtensions', resultExtensionIds);\n\t\t\t\tnewExtElement.parent = this._root;\n\t\t\t\tthis._root.children.push(newExtElement);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetUniqueResultsCount(): number {\n\t\treturn this.searchResultCount ?? 0;\n\t}\n\n\tprivate getFlatSettings(): ISetting[] {\n\t\treturn this.getUniqueResults()?.filterMatches.map(m => m.setting) ?? [];\n\t}\n}\n\nexport interface IParsedQuery {\n\ttags: string[];\n\tquery: string;\n\textensionFilters: string[];\n\tidFilters: string[];\n\tfeatureFilters: string[];\n\tlanguageFilter: string | undefined;\n}\n\nconst tagRegex = /(^|\\s)@tag:(\"([^\"]*)\"|[^\"]\\S*)/g;\nconst extensionRegex = /(^|\\s)@ext:(\"([^\"]*)\"|[^\"]\\S*)?/g;\nconst featureRegex = /(^|\\s)@feature:(\"([^\"]*)\"|[^\"]\\S*)?/g;\nconst idRegex = /(^|\\s)@id:(\"([^\"]*)\"|[^\"]\\S*)?/g;\nconst languageRegex = /(^|\\s)@lang:(\"([^\"]*)\"|[^\"]\\S*)?/g;\n\nexport function parseQuery(query: string): IParsedQuery {\n\t/**\n\t * A helper function to parse the query on one type of regex.\n\t *\n\t * @param query The search query\n\t * @param filterRegex The regex to use on the query\n\t * @param parsedParts The parts that the regex parses out will be appended to the array passed in here.\n\t * @returns The query with the parsed parts removed\n\t */\n\tfunction getTagsForType(query: string, filterRegex: RegExp, parsedParts: string[]): string {\n\t\treturn query.replace(filterRegex, (_, __, quotedParsedElement, unquotedParsedElement) => {\n\t\t\tconst parsedElement: string = unquotedParsedElement || quotedParsedElement;\n\t\t\tif (parsedElement) {\n\t\t\t\tparsedParts.push(...parsedElement.split(',').map(s => s.trim()).filter(s => !isFalsyOrWhitespace(s)));\n\t\t\t}\n\t\t\treturn '';\n\t\t});\n\t}\n\n\tconst tags: string[] = [];\n\tquery = query.replace(tagRegex, (_, __, quotedTag, tag) => {\n\t\ttags.push(tag || quotedTag);\n\t\treturn '';\n\t});\n\n\tquery = query.replace(`@${MODIFIED_SETTING_TAG}`, () => {\n\t\ttags.push(MODIFIED_SETTING_TAG);\n\t\treturn '';\n\t});\n\n\tquery = query.replace(`@${POLICY_SETTING_TAG}`, () => {\n\t\ttags.push(POLICY_SETTING_TAG);\n\t\treturn '';\n\t});\n\n\tconst extensions: string[] = [];\n\tconst features: string[] = [];\n\tconst ids: string[] = [];\n\tconst langs: string[] = [];\n\tquery = getTagsForType(query, extensionRegex, extensions);\n\tquery = getTagsForType(query, featureRegex, features);\n\tquery = getTagsForType(query, idRegex, ids);\n\n\tif (ENABLE_LANGUAGE_FILTER) {\n\t\tquery = getTagsForType(query, languageRegex, langs);\n\t}\n\n\tquery = query.trim();\n\n\t// For now, only return the first found language filter\n\treturn {\n\t\ttags,\n\t\textensionFilters: extensions,\n\t\tfeatureFilters: features,\n\t\tidFilters: ids,\n\t\tlanguageFilter: langs.length ? langs[0] : undefined,\n\t\tquery,\n\t};\n}\n"]}