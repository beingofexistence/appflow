{"version":3,"sources":["vs/workbench/contrib/preferences/common/preferencesContribution.ts"],"names":[],"mappings":"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","file":"preferencesContribution.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore, dispose, IDisposable } from 'vs/base/common/lifecycle';\nimport { isEqual } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport * as nls from 'vs/nls';\nimport { ConfigurationTarget, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ConfigurationScope, Extensions, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport * as JSONContributionRegistry from 'vs/platform/jsonschemas/common/jsonContributionRegistry';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { workbenchConfigurationNodeBase } from 'vs/workbench/common/configuration';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { EditorInputWithOptions } from 'vs/workbench/common/editor';\nimport { SideBySideEditorInput } from 'vs/workbench/common/editor/sideBySideEditorInput';\nimport { RegisteredEditorPriority, IEditorResolverService } from 'vs/workbench/services/editor/common/editorResolverService';\nimport { ITextEditorService } from 'vs/workbench/services/textfile/common/textEditorService';\nimport { DEFAULT_SETTINGS_EDITOR_SETTING, FOLDER_SETTINGS_PATH, IPreferencesService, USE_SPLIT_JSON_SETTING } from 'vs/workbench/services/preferences/common/preferences';\nimport { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\n\nconst schemaRegistry = Registry.as<JSONContributionRegistry.IJSONContributionRegistry>(JSONContributionRegistry.Extensions.JSONContribution);\n\nexport class PreferencesContribution implements IWorkbenchContribution {\n\tprivate editorOpeningListener: IDisposable | undefined;\n\tprivate settingsListener: IDisposable;\n\n\tconstructor(\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@ITextModelService private readonly textModelResolverService: ITextModelService,\n\t\t@IPreferencesService private readonly preferencesService: IPreferencesService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n\t\t@IWorkspaceContextService private readonly workspaceService: IWorkspaceContextService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IEditorResolverService private readonly editorResolverService: IEditorResolverService,\n\t\t@ITextEditorService private readonly textEditorService: ITextEditorService\n\t) {\n\t\tthis.settingsListener = this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(USE_SPLIT_JSON_SETTING) || e.affectsConfiguration(DEFAULT_SETTINGS_EDITOR_SETTING)) {\n\t\t\t\tthis.handleSettingsEditorRegistration();\n\t\t\t}\n\t\t});\n\t\tthis.handleSettingsEditorRegistration();\n\n\t\tthis.start();\n\t}\n\n\tprivate handleSettingsEditorRegistration(): void {\n\n\t\t// dispose any old listener we had\n\t\tdispose(this.editorOpeningListener);\n\n\t\t// install editor opening listener unless user has disabled this\n\t\tif (!!this.configurationService.getValue(USE_SPLIT_JSON_SETTING) || !!this.configurationService.getValue(DEFAULT_SETTINGS_EDITOR_SETTING)) {\n\t\t\tthis.editorOpeningListener = this.editorResolverService.registerEditor(\n\t\t\t\t'**/settings.json',\n\t\t\t\t{\n\t\t\t\t\tid: SideBySideEditorInput.ID,\n\t\t\t\t\tlabel: nls.localize('splitSettingsEditorLabel', \"Split Settings Editor\"),\n\t\t\t\t\tpriority: RegisteredEditorPriority.builtin,\n\t\t\t\t},\n\t\t\t\t{},\n\t\t\t\t{\n\t\t\t\t\tcreateEditorInput: ({ resource, options }): EditorInputWithOptions => {\n\t\t\t\t\t\t// Global User Settings File\n\t\t\t\t\t\tif (isEqual(resource, this.userDataProfileService.currentProfile.settingsResource)) {\n\t\t\t\t\t\t\treturn { editor: this.preferencesService.createSplitJsonEditorInput(ConfigurationTarget.USER_LOCAL, resource), options };\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Single Folder Workspace Settings File\n\t\t\t\t\t\tconst state = this.workspaceService.getWorkbenchState();\n\t\t\t\t\t\tif (state === WorkbenchState.FOLDER) {\n\t\t\t\t\t\t\tconst folders = this.workspaceService.getWorkspace().folders;\n\t\t\t\t\t\t\tif (isEqual(resource, folders[0].toResource(FOLDER_SETTINGS_PATH))) {\n\t\t\t\t\t\t\t\treturn { editor: this.preferencesService.createSplitJsonEditorInput(ConfigurationTarget.WORKSPACE, resource), options };\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Multi Folder Workspace Settings File\n\t\t\t\t\t\telse if (state === WorkbenchState.WORKSPACE) {\n\t\t\t\t\t\t\tconst folders = this.workspaceService.getWorkspace().folders;\n\t\t\t\t\t\t\tfor (const folder of folders) {\n\t\t\t\t\t\t\t\tif (isEqual(resource, folder.toResource(FOLDER_SETTINGS_PATH))) {\n\t\t\t\t\t\t\t\t\treturn { editor: this.preferencesService.createSplitJsonEditorInput(ConfigurationTarget.WORKSPACE_FOLDER, resource), options };\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn { editor: this.textEditorService.createTextEditor({ resource }), options };\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate start(): void {\n\n\t\tthis.textModelResolverService.registerTextModelContentProvider('vscode', {\n\t\t\tprovideTextContent: async (uri: URI): Promise<ITextModel | null> => {\n\t\t\t\tif (uri.scheme !== 'vscode') {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif (uri.authority === 'schemas') {\n\t\t\t\t\treturn this.getSchemaModel(uri);\n\t\t\t\t}\n\t\t\t\treturn this.preferencesService.resolveModel(uri);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate getSchemaModel(uri: URI): ITextModel {\n\t\tlet schema = schemaRegistry.getSchemaContributions().schemas[uri.toString()] ?? {} /* Use empty schema if not yet registered */;\n\t\tconst modelContent = JSON.stringify(schema);\n\t\tconst languageSelection = this.languageService.createById('jsonc');\n\t\tconst model = this.modelService.createModel(modelContent, languageSelection, uri);\n\t\tconst disposables = new DisposableStore();\n\t\tdisposables.add(schemaRegistry.onDidChangeSchema(schemaUri => {\n\t\t\tif (schemaUri === uri.toString()) {\n\t\t\t\tschema = schemaRegistry.getSchemaContributions().schemas[uri.toString()];\n\t\t\t\tmodel.setValue(JSON.stringify(schema));\n\t\t\t}\n\t\t}));\n\t\tdisposables.add(model.onWillDispose(() => disposables.dispose()));\n\t\treturn model;\n\t}\n\n\tdispose(): void {\n\t\tdispose(this.editorOpeningListener);\n\t\tdispose(this.settingsListener);\n\t}\n}\n\nconst registry = Registry.as<IConfigurationRegistry>(Extensions.Configuration);\nregistry.registerConfiguration({\n\t...workbenchConfigurationNodeBase,\n\t'properties': {\n\t\t'workbench.settings.enableNaturalLanguageSearch': {\n\t\t\t'type': 'boolean',\n\t\t\t'description': nls.localize('enableNaturalLanguageSettingsSearch', \"Controls whether to enable the natural language search mode for settings. The natural language search is provided by a Microsoft online service.\"),\n\t\t\t'default': true,\n\t\t\t'scope': ConfigurationScope.WINDOW,\n\t\t\t'tags': ['usesOnlineServices']\n\t\t},\n\t\t'workbench.settings.settingsSearchTocBehavior': {\n\t\t\t'type': 'string',\n\t\t\t'enum': ['hide', 'filter'],\n\t\t\t'enumDescriptions': [\n\t\t\t\tnls.localize('settingsSearchTocBehavior.hide', \"Hide the Table of Contents while searching.\"),\n\t\t\t\tnls.localize('settingsSearchTocBehavior.filter', \"Filter the Table of Contents to just categories that have matching settings. Clicking a category will filter the results to that category.\"),\n\t\t\t],\n\t\t\t'description': nls.localize('settingsSearchTocBehavior', \"Controls the behavior of the settings editor Table of Contents while searching.\"),\n\t\t\t'default': 'filter',\n\t\t\t'scope': ConfigurationScope.WINDOW\n\t\t},\n\t}\n});\n"]}