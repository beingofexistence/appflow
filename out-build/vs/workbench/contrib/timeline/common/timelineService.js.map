{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/timeline/common/timelineService.ts"],"names":[],"mappings":"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","file":"timelineService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ITimelineService, TimelineChangeEvent, TimelineOptions, TimelineProvidersChangeEvent, TimelineProvider, TimelinePaneId } from './timeline';\nimport { IViewsService } from 'vs/workbench/common/views';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IContextKey, IContextKeyService, RawContextKey } from 'vs/platform/contextkey/common/contextkey';\n\nexport const TimelineHasProviderContext = new RawContextKey<boolean>('timelineHasProvider', false);\n\nexport class TimelineService implements ITimelineService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeProviders = new Emitter<TimelineProvidersChangeEvent>();\n\treadonly onDidChangeProviders: Event<TimelineProvidersChangeEvent> = this._onDidChangeProviders.event;\n\n\tprivate readonly _onDidChangeTimeline = new Emitter<TimelineChangeEvent>();\n\treadonly onDidChangeTimeline: Event<TimelineChangeEvent> = this._onDidChangeTimeline.event;\n\tprivate readonly _onDidChangeUri = new Emitter<URI>();\n\treadonly onDidChangeUri: Event<URI> = this._onDidChangeUri.event;\n\n\tprivate readonly hasProviderContext: IContextKey<boolean>;\n\tprivate readonly providers = new Map<string, TimelineProvider>();\n\tprivate readonly providerSubscriptions = new Map<string, IDisposable>();\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IViewsService protected viewsService: IViewsService,\n\t\t@IConfigurationService protected configurationService: IConfigurationService,\n\t\t@IContextKeyService protected contextKeyService: IContextKeyService,\n\t) {\n\t\tthis.hasProviderContext = TimelineHasProviderContext.bindTo(this.contextKeyService);\n\t\tthis.updateHasProviderContext();\n\t}\n\n\tgetSources() {\n\t\treturn [...this.providers.values()].map(p => ({ id: p.id, label: p.label }));\n\t}\n\n\tgetTimeline(id: string, uri: URI, options: TimelineOptions, tokenSource: CancellationTokenSource) {\n\t\tthis.logService.trace(`TimelineService#getTimeline(${id}): uri=${uri.toString()}`);\n\n\t\tconst provider = this.providers.get(id);\n\t\tif (provider === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (typeof provider.scheme === 'string') {\n\t\t\tif (provider.scheme !== '*' && provider.scheme !== uri.scheme) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t} else if (!provider.scheme.includes(uri.scheme)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn {\n\t\t\tresult: provider.provideTimeline(uri, options, tokenSource.token)\n\t\t\t\t.then(result => {\n\t\t\t\t\tif (result === undefined) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\tresult.items = result.items.map(item => ({ ...item, source: provider.id }));\n\t\t\t\t\tresult.items.sort((a, b) => (b.timestamp - a.timestamp) || b.source.localeCompare(a.source, undefined, { numeric: true, sensitivity: 'base' }));\n\n\t\t\t\t\treturn result;\n\t\t\t\t}),\n\t\t\toptions: options,\n\t\t\tsource: provider.id,\n\t\t\ttokenSource: tokenSource,\n\t\t\turi: uri\n\t\t};\n\t}\n\n\tregisterTimelineProvider(provider: TimelineProvider): IDisposable {\n\t\tthis.logService.trace(`TimelineService#registerTimelineProvider: id=${provider.id}`);\n\n\t\tconst id = provider.id;\n\n\t\tconst existing = this.providers.get(id);\n\t\tif (existing) {\n\t\t\t// For now to deal with https://github.com/microsoft/vscode/issues/89553 allow any overwritting here (still will be blocked in the Extension Host)\n\t\t\t// TODO@eamodio: Ultimately will need to figure out a way to unregister providers when the Extension Host restarts/crashes\n\t\t\t// throw new Error(`Timeline Provider ${id} already exists.`);\n\t\t\ttry {\n\t\t\t\texisting?.dispose();\n\t\t\t}\n\t\t\tcatch { }\n\t\t}\n\n\t\tthis.providers.set(id, provider);\n\n\t\tthis.updateHasProviderContext();\n\n\t\tif (provider.onDidChange) {\n\t\t\tthis.providerSubscriptions.set(id, provider.onDidChange(e => this._onDidChangeTimeline.fire(e)));\n\t\t}\n\t\tthis._onDidChangeProviders.fire({ added: [id] });\n\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis.providers.delete(id);\n\t\t\t\tthis._onDidChangeProviders.fire({ removed: [id] });\n\t\t\t}\n\t\t};\n\t}\n\n\tunregisterTimelineProvider(id: string): void {\n\t\tthis.logService.trace(`TimelineService#unregisterTimelineProvider: id=${id}`);\n\n\t\tif (!this.providers.has(id)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.providers.delete(id);\n\t\tthis.providerSubscriptions.delete(id);\n\n\t\tthis.updateHasProviderContext();\n\n\t\tthis._onDidChangeProviders.fire({ removed: [id] });\n\t}\n\n\tsetUri(uri: URI) {\n\t\tthis.viewsService.openView(TimelinePaneId, true);\n\t\tthis._onDidChangeUri.fire(uri);\n\t}\n\n\tprivate updateHasProviderContext() {\n\t\tthis.hasProviderContext.set(this.providers.size !== 0);\n\t}\n}\n"]}