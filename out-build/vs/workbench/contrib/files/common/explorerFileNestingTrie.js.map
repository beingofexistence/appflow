{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/files/common/explorerFileNestingTrie.ts"],"names":[],"mappings":"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","file":"explorerFileNestingTrie.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\ntype FilenameAttributes = {\n\t// index.test in index.test.json\n\tbasename: string;\n\t// json in index.test.json\n\textname: string;\n\t// my-folder in my-folder/index.test.json\n\tdirname: string;\n};\n\n/**\n * A sort of double-ended trie, used to efficiently query for matches to \"star\" patterns, where\n * a given key represents a parent and may contain a capturing group (\"*\"), which can then be\n * referenced via the token \"$(capture)\" in associated child patterns.\n *\n * The generated tree will have at most two levels, as subtrees are flattened rather than nested.\n *\n * Example:\n * The config: [\n * [ *.ts , [ $(capture).*.ts ; $(capture).js ] ]\n * [ *.js , [ $(capture).min.js ] ] ]\n * Nests the files: [ a.ts ; a.d.ts ; a.js ; a.min.js ; b.ts ; b.min.js ]\n * As:\n * - a.ts => [ a.d.ts ; a.js ; a.min.js ]\n * - b.ts => [ ]\n * - b.min.ts => [ ]\n */\nexport class ExplorerFileNestingTrie {\n\tprivate root = new PreTrie();\n\n\tconstructor(config: [string, string[]][]) {\n\t\tfor (const [parentPattern, childPatterns] of config) {\n\t\t\tfor (const childPattern of childPatterns) {\n\t\t\t\tthis.root.add(parentPattern, childPattern);\n\t\t\t}\n\t\t}\n\t}\n\n\ttoString() {\n\t\treturn this.root.toString();\n\t}\n\n\tprivate getAttributes(filename: string, dirname: string): FilenameAttributes {\n\t\tconst lastDot = filename.lastIndexOf('.');\n\t\tif (lastDot < 1) {\n\t\t\treturn {\n\t\t\t\tdirname,\n\t\t\t\tbasename: filename,\n\t\t\t\textname: ''\n\t\t\t};\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tdirname,\n\t\t\t\tbasename: filename.substring(0, lastDot),\n\t\t\t\textname: filename.substring(lastDot + 1)\n\t\t\t};\n\t\t}\n\t}\n\n\tnest(files: string[], dirname: string): Map<string, Set<string>> {\n\t\tconst parentFinder = new PreTrie();\n\n\t\tfor (const potentialParent of files) {\n\t\t\tconst attributes = this.getAttributes(potentialParent, dirname);\n\t\t\tconst children = this.root.get(potentialParent, attributes);\n\t\t\tfor (const child of children) {\n\t\t\t\tparentFinder.add(child, potentialParent);\n\t\t\t}\n\t\t}\n\n\t\tconst findAllRootAncestors = (file: string, seen: Set<string> = new Set()): string[] => {\n\t\t\tif (seen.has(file)) { return []; }\n\t\t\tseen.add(file);\n\t\t\tconst attributes = this.getAttributes(file, dirname);\n\t\t\tconst ancestors = parentFinder.get(file, attributes);\n\t\t\tif (ancestors.length === 0) {\n\t\t\t\treturn [file];\n\t\t\t}\n\n\t\t\tif (ancestors.length === 1 && ancestors[0] === file) {\n\t\t\t\treturn [file];\n\t\t\t}\n\n\t\t\treturn ancestors.flatMap(a => findAllRootAncestors(a, seen));\n\t\t};\n\n\t\tconst result = new Map<string, Set<string>>();\n\t\tfor (const file of files) {\n\t\t\tlet ancestors = findAllRootAncestors(file);\n\t\t\tif (ancestors.length === 0) { ancestors = [file]; }\n\t\t\tfor (const ancestor of ancestors) {\n\t\t\t\tlet existing = result.get(ancestor);\n\t\t\t\tif (!existing) { result.set(ancestor, existing = new Set()); }\n\t\t\t\tif (file !== ancestor) {\n\t\t\t\t\texisting.add(file);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n}\n\n/** Export for test only. */\nexport class PreTrie {\n\tprivate value: SufTrie = new SufTrie();\n\n\tprivate map: Map<string, PreTrie> = new Map();\n\n\tconstructor() { }\n\n\tadd(key: string, value: string) {\n\t\tif (key === '') {\n\t\t\tthis.value.add(key, value);\n\t\t} else if (key[0] === '*') {\n\t\t\tthis.value.add(key, value);\n\t\t} else {\n\t\t\tconst head = key[0];\n\t\t\tconst rest = key.slice(1);\n\t\t\tlet existing = this.map.get(head);\n\t\t\tif (!existing) {\n\t\t\t\tthis.map.set(head, existing = new PreTrie());\n\t\t\t}\n\t\t\texisting.add(rest, value);\n\t\t}\n\t}\n\n\tget(key: string, attributes: FilenameAttributes): string[] {\n\t\tconst results: string[] = [];\n\t\tresults.push(...this.value.get(key, attributes));\n\n\t\tconst head = key[0];\n\t\tconst rest = key.slice(1);\n\t\tconst existing = this.map.get(head);\n\t\tif (existing) {\n\t\t\tresults.push(...existing.get(rest, attributes));\n\t\t}\n\n\t\treturn results;\n\t}\n\n\ttoString(indentation = ''): string {\n\t\tconst lines = [];\n\t\tif (this.value.hasItems) {\n\t\t\tlines.push('* => \\n' + this.value.toString(indentation + '  '));\n\t\t}\n\t\t[...this.map.entries()].map(([key, trie]) =>\n\t\t\tlines.push('^' + key + ' => \\n' + trie.toString(indentation + '  ')));\n\t\treturn lines.map(l => indentation + l).join('\\n');\n\t}\n}\n\n/** Export for test only. */\nexport class SufTrie {\n\tprivate star: SubstitutionString[] = [];\n\tprivate epsilon: SubstitutionString[] = [];\n\n\tprivate map: Map<string, SufTrie> = new Map();\n\thasItems: boolean = false;\n\n\tconstructor() { }\n\n\tadd(key: string, value: string) {\n\t\tthis.hasItems = true;\n\t\tif (key === '*') {\n\t\t\tthis.star.push(new SubstitutionString(value));\n\t\t} else if (key === '') {\n\t\t\tthis.epsilon.push(new SubstitutionString(value));\n\t\t} else {\n\t\t\tconst tail = key[key.length - 1];\n\t\t\tconst rest = key.slice(0, key.length - 1);\n\t\t\tif (tail === '*') {\n\t\t\t\tthrow Error('Unexpected star in SufTrie key: ' + key);\n\t\t\t} else {\n\t\t\t\tlet existing = this.map.get(tail);\n\t\t\t\tif (!existing) {\n\t\t\t\t\tthis.map.set(tail, existing = new SufTrie());\n\t\t\t\t}\n\t\t\t\texisting.add(rest, value);\n\t\t\t}\n\t\t}\n\t}\n\n\tget(key: string, attributes: FilenameAttributes): string[] {\n\t\tconst results: string[] = [];\n\t\tif (key === '') {\n\t\t\tresults.push(...this.epsilon.map(ss => ss.substitute(attributes)));\n\t\t}\n\t\tif (this.star.length) {\n\t\t\tresults.push(...this.star.map(ss => ss.substitute(attributes, key)));\n\t\t}\n\n\t\tconst tail = key[key.length - 1];\n\t\tconst rest = key.slice(0, key.length - 1);\n\t\tconst existing = this.map.get(tail);\n\t\tif (existing) {\n\t\t\tresults.push(...existing.get(rest, attributes));\n\t\t}\n\n\t\treturn results;\n\t}\n\n\ttoString(indentation = ''): string {\n\t\tconst lines = [];\n\t\tif (this.star.length) {\n\t\t\tlines.push('* => ' + this.star.join('; '));\n\t\t}\n\n\t\tif (this.epsilon.length) {\n\t\t\t// allow-any-unicode-next-line\n\t\t\tlines.push('ε => ' + this.epsilon.join('; '));\n\t\t}\n\n\t\t[...this.map.entries()].map(([key, trie]) =>\n\t\t\tlines.push(key + '$' + ' => \\n' + trie.toString(indentation + '  ')));\n\n\t\treturn lines.map(l => indentation + l).join('\\n');\n\t}\n}\n\nconst enum SubstitutionType {\n\tcapture = 'capture',\n\tbasename = 'basename',\n\tdirname = 'dirname',\n\textname = 'extname',\n}\n\nconst substitutionStringTokenizer = /\\$[({](capture|basename|dirname|extname)[)}]/g;\n\nclass SubstitutionString {\n\n\tprivate tokens: (string | { capture: SubstitutionType })[] = [];\n\n\tconstructor(pattern: string) {\n\t\tsubstitutionStringTokenizer.lastIndex = 0;\n\t\tlet token;\n\t\tlet lastIndex = 0;\n\t\twhile (token = substitutionStringTokenizer.exec(pattern)) {\n\t\t\tconst prefix = pattern.slice(lastIndex, token.index);\n\t\t\tthis.tokens.push(prefix);\n\n\t\t\tconst type = token[1];\n\t\t\tswitch (type) {\n\t\t\t\tcase SubstitutionType.basename:\n\t\t\t\tcase SubstitutionType.dirname:\n\t\t\t\tcase SubstitutionType.extname:\n\t\t\t\tcase SubstitutionType.capture:\n\t\t\t\t\tthis.tokens.push({ capture: type });\n\t\t\t\t\tbreak;\n\t\t\t\tdefault: throw Error('unknown substitution type: ' + type);\n\t\t\t}\n\t\t\tlastIndex = token.index + token[0].length;\n\t\t}\n\n\t\tif (lastIndex !== pattern.length) {\n\t\t\tconst suffix = pattern.slice(lastIndex, pattern.length);\n\t\t\tthis.tokens.push(suffix);\n\t\t}\n\t}\n\n\tsubstitute(attributes: FilenameAttributes, capture?: string): string {\n\t\treturn this.tokens.map(t => {\n\t\t\tif (typeof t === 'string') { return t; }\n\t\t\tswitch (t.capture) {\n\t\t\t\tcase SubstitutionType.basename: return attributes.basename;\n\t\t\t\tcase SubstitutionType.dirname: return attributes.dirname;\n\t\t\t\tcase SubstitutionType.extname: return attributes.extname;\n\t\t\t\tcase SubstitutionType.capture: return capture || '';\n\t\t\t}\n\t\t}).join('');\n\t}\n}\n"]}