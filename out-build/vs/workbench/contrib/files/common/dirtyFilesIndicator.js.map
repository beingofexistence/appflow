{"version":3,"sources":["vs/workbench/contrib/files/common/dirtyFilesIndicator.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAYzF,IAAM,IAAI,GAAV,MAAM,IAAoB,SAAQ,eAAG;QAK3C,YACoB,CAAsC,EACvC,CAAqC,EAClC,CAAwC,EACjC,CAA+C;YAE3E,KAAK,EAAE,CAAC;YAL4B,MAAC,GAAD,CAAC,CAAoB;YACtB,MAAC,GAAD,CAAC,CAAmB;YACjB,MAAC,GAAD,CAAC,CAAsB;YAChB,MAAC,GAAD,CAAC,CAA6B;YAR3D,MAAC,GAAa,IAAI,CAAC,CAAC,CAAS,IAAI,eAAG,EAAgB,CAAC,CAAC;YAE/D,MAAC,GAAqB,CAAC,CAAC;YAU/B,IAAI,CAAC,CAAC,EAAoB,CAAC;YAE3B,IAAI,CAAC,CAAC,EAAkB,CAAC;QAC1B,CAAC;QAEO,CAAC;YAER,+BAA+B;YAC/B,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAkB,gBAAgB,CAAC,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAA2B,WAAW,CAAC,CAAC,CAAC,CAAC;YAEvH,YAAY;YACZ,IAAI,CAAC,CAAC,CAAgB,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC;QAC3D,CAAC;QAEO,CAAC,CAA2B,WAAyB;YAC5D,MAAM,QAAQ,GAAG,WAAW,CAAC,OAAO,EAAE,CAAC;YACvC,IAAI,QAAQ,IAAI,CAAC,CAAC,WAAW,CAAC,YAAY,2CAAmC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAyB,eAAe,EAAE,2CAAmC,EAAE;gBACtK,OAAO,CAAC,gFAAgF;aACxF;YAED,IAAI,QAAQ,IAAI,IAAI,CAAC,CAAC,GAAqB,CAAC,EAAE;gBAC7C,IAAI,CAAC,CAAC,EAAoB,CAAC;aAC3B;QACF,CAAC;QAEO,CAAC;YACR,MAAM,UAAU,GAAG,IAAI,CAAC,CAAC,GAAqB,IAAI,CAAC,CAAC,CAAkB,UAAU,CAAC;YAEjF,uCAAuC;YACvC,IAAI,UAAU,GAAG,CAAC,EAAE;gBACnB,IAAI,CAAC,CAAC,CAAW,KAAK,GAAG,IAAI,CAAC,CAAC,CAAe,yBAAyB,CACtE,YAAI,EACJ;oBACC,KAAK,EAAE,IAAI,cAAG,CAAS,UAAU,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAW,EAAE,IAAgB,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAY,EAAE,IAAmB,EAAE,UAAU,CAAC,CAAC;oBAChK,KAAK,EAAE,wBAAwB;iBAC/B,CACD,CAAC;aACF;iBAAM;gBACN,IAAI,CAAC,CAAC,CAAW,KAAK,EAAE,CAAC;aACzB;QACF,CAAC;KACD,CAAA;IAtDY,oBAAI;mBAAJ,IAAI;QAMd,WAAA,eAAG,CAAA;QACH,WAAA,cAAG,CAAA;QACH,WAAA,wBAAG,CAAA;QACH,WAAA,+BAAG,CAAA;OATO,IAAI,CAsDhB","file":"dirtyFilesIndicator.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { VIEWLET_ID } from 'vs/workbench/contrib/files/common/files';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { Disposable, MutableDisposable } from 'vs/base/common/lifecycle';\nimport { IActivityService, NumberBadge } from 'vs/workbench/services/activity/common/activity';\nimport { IWorkingCopyService } from 'vs/workbench/services/workingCopy/common/workingCopyService';\nimport { IWorkingCopy, WorkingCopyCapabilities } from 'vs/workbench/services/workingCopy/common/workingCopy';\nimport { IFilesConfigurationService, AutoSaveMode } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\n\nexport class DirtyFilesIndicator extends Disposable implements IWorkbenchContribution {\n\tprivate readonly badgeHandle = this._register(new MutableDisposable());\n\n\tprivate lastKnownDirtyCount = 0;\n\n\tconstructor(\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IWorkingCopyService private readonly workingCopyService: IWorkingCopyService,\n\t\t@IFilesConfigurationService private readonly filesConfigurationService: IFilesConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tthis.updateActivityBadge();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Working copy dirty indicator\n\t\tthis._register(this.workingCopyService.onDidChangeDirty(workingCopy => this.onWorkingCopyDidChangeDirty(workingCopy)));\n\n\t\t// Lifecycle\n\t\tthis.lifecycleService.onDidShutdown(() => this.dispose());\n\t}\n\n\tprivate onWorkingCopyDidChangeDirty(workingCopy: IWorkingCopy): void {\n\t\tconst gotDirty = workingCopy.isDirty();\n\t\tif (gotDirty && !(workingCopy.capabilities & WorkingCopyCapabilities.Untitled) && this.filesConfigurationService.getAutoSaveMode() === AutoSaveMode.AFTER_SHORT_DELAY) {\n\t\t\treturn; // do not indicate dirty of working copies that are auto saved after short delay\n\t\t}\n\n\t\tif (gotDirty || this.lastKnownDirtyCount > 0) {\n\t\t\tthis.updateActivityBadge();\n\t\t}\n\t}\n\n\tprivate updateActivityBadge(): void {\n\t\tconst dirtyCount = this.lastKnownDirtyCount = this.workingCopyService.dirtyCount;\n\n\t\t// Indicate dirty count in badge if any\n\t\tif (dirtyCount > 0) {\n\t\t\tthis.badgeHandle.value = this.activityService.showViewContainerActivity(\n\t\t\t\tVIEWLET_ID,\n\t\t\t\t{\n\t\t\t\t\tbadge: new NumberBadge(dirtyCount, num => num === 1 ? nls.localize('dirtyFile', \"1 unsaved file\") : nls.localize('dirtyFiles', \"{0} unsaved files\", dirtyCount)),\n\t\t\t\t\tclazz: 'explorer-viewlet-label'\n\t\t\t\t}\n\t\t\t);\n\t\t} else {\n\t\t\tthis.badgeHandle.clear();\n\t\t}\n\t}\n}\n"]}