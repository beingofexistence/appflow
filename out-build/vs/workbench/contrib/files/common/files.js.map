{"version":3,"sources":["vs/workbench/contrib/files/common/files.ts"],"names":[],"mappings":"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","file":"files.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { IEditorOptions } from 'vs/editor/common/config/editorOptions';\nimport { IWorkbenchEditorConfiguration, IEditorIdentifier, EditorResourceAccessor, SideBySideEditor } from 'vs/workbench/common/editor';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { IFilesConfiguration as PlatformIFilesConfiguration, FileChangeType, IFileService } from 'vs/platform/files/common/files';\nimport { ContextKeyExpr, RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { ITextModelContentProvider } from 'vs/editor/common/services/resolverService';\nimport { Disposable, DisposableStore, MutableDisposable } from 'vs/base/common/lifecycle';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { ILanguageService, ILanguageSelection } from 'vs/editor/common/languages/language';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { InputFocusedContextKey } from 'vs/platform/contextkey/common/contextkeys';\nimport { IEditorGroup } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { once } from 'vs/base/common/functional';\nimport { ITextEditorOptions } from 'vs/platform/editor/common/editor';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { localize } from 'vs/nls';\nimport { IExpression } from 'vs/base/common/glob';\n\n/**\n * Explorer viewlet id.\n */\nexport const VIEWLET_ID = 'workbench.view.explorer';\n\n/**\n * Explorer file view id.\n */\nexport const VIEW_ID = 'workbench.explorer.fileView';\n\n/**\n * Context Keys to use with keybindings for the Explorer and Open Editors view\n */\nexport const ExplorerViewletVisibleContext = new RawContextKey<boolean>('explorerViewletVisible', true, { type: 'boolean', description: localize('explorerViewletVisible', \"True when the EXPLORER viewlet is visible.\") });\nexport const FoldersViewVisibleContext = new RawContextKey<boolean>('foldersViewVisible', true, { type: 'boolean', description: localize('foldersViewVisible', \"True when the FOLDERS view (the file tree within the explorer view container) is visible.\") });\nexport const ExplorerFolderContext = new RawContextKey<boolean>('explorerResourceIsFolder', false, { type: 'boolean', description: localize('explorerResourceIsFolder', \"True when the focused item in the EXPLORER is a folder.\") });\nexport const ExplorerResourceReadonlyContext = new RawContextKey<boolean>('explorerResourceReadonly', false, { type: 'boolean', description: localize('explorerResourceReadonly', \"True when the focused item in the EXPLORER is read-only.\") });\nexport const ExplorerResourceNotReadonlyContext = ExplorerResourceReadonlyContext.toNegated();\n/**\n * Comma separated list of editor ids that can be used for the selected explorer resource.\n */\nexport const ExplorerResourceAvailableEditorIdsContext = new RawContextKey<string>('explorerResourceAvailableEditorIds', '');\nexport const ExplorerRootContext = new RawContextKey<boolean>('explorerResourceIsRoot', false, { type: 'boolean', description: localize('explorerResourceIsRoot', \"True when the focused item in the EXPLORER is a root folder.\") });\nexport const ExplorerResourceCut = new RawContextKey<boolean>('explorerResourceCut', false, { type: 'boolean', description: localize('explorerResourceCut', \"True when an item in the EXPLORER has been cut for cut and paste.\") });\nexport const ExplorerResourceMoveableToTrash = new RawContextKey<boolean>('explorerResourceMoveableToTrash', false, { type: 'boolean', description: localize('explorerResourceMoveableToTrash', \"True when the focused item in the EXPLORER can be moved to trash.\") });\nexport const FilesExplorerFocusedContext = new RawContextKey<boolean>('filesExplorerFocus', true, { type: 'boolean', description: localize('filesExplorerFocus', \"True when the focus is inside the EXPLORER view.\") });\nexport const OpenEditorsFocusedContext = new RawContextKey<boolean>('openEditorsFocus', true, { type: 'boolean', description: localize('openEditorsFocus', \"True when the focus is inside the OPEN EDITORS view.\") });\nexport const ExplorerFocusedContext = new RawContextKey<boolean>('explorerViewletFocus', true, { type: 'boolean', description: localize('explorerViewletFocus', \"True when the focus is inside the EXPLORER viewlet.\") });\n\n// compressed nodes\nexport const ExplorerCompressedFocusContext = new RawContextKey<boolean>('explorerViewletCompressedFocus', true, { type: 'boolean', description: localize('explorerViewletCompressedFocus', \"True when the focused item in the EXPLORER view is a compact item.\") });\nexport const ExplorerCompressedFirstFocusContext = new RawContextKey<boolean>('explorerViewletCompressedFirstFocus', true, { type: 'boolean', description: localize('explorerViewletCompressedFirstFocus', \"True when the focus is inside a compact item's first part in the EXPLORER view.\") });\nexport const ExplorerCompressedLastFocusContext = new RawContextKey<boolean>('explorerViewletCompressedLastFocus', true, { type: 'boolean', description: localize('explorerViewletCompressedLastFocus', \"True when the focus is inside a compact item's last part in the EXPLORER view.\") });\n\nexport const ViewHasSomeCollapsibleRootItemContext = new RawContextKey<boolean>('viewHasSomeCollapsibleItem', false, { type: 'boolean', description: localize('viewHasSomeCollapsibleItem', \"True when a workspace in the EXPLORER view has some collapsible root child.\") });\n\nexport const FilesExplorerFocusCondition = ContextKeyExpr.and(FoldersViewVisibleContext, FilesExplorerFocusedContext, ContextKeyExpr.not(InputFocusedContextKey));\nexport const ExplorerFocusCondition = ContextKeyExpr.and(FoldersViewVisibleContext, ExplorerFocusedContext, ContextKeyExpr.not(InputFocusedContextKey));\n\n/**\n * Text file editor id.\n */\nexport const TEXT_FILE_EDITOR_ID = 'workbench.editors.files.textFileEditor';\n\n/**\n * File editor input id.\n */\nexport const FILE_EDITOR_INPUT_ID = 'workbench.editors.files.fileEditorInput';\n\n/**\n * Binary file editor id.\n */\nexport const BINARY_FILE_EDITOR_ID = 'workbench.editors.files.binaryFileEditor';\n\n/**\n * Language identifier for binary files opened as text.\n */\nexport const BINARY_TEXT_FILE_MODE = 'code-text-binary';\n\nexport interface IFilesConfiguration extends PlatformIFilesConfiguration, IWorkbenchEditorConfiguration {\n\texplorer: {\n\t\topenEditors: {\n\t\t\tvisible: number;\n\t\t\tsortOrder: 'editorOrder' | 'alphabetical' | 'fullPath';\n\t\t};\n\t\tautoReveal: boolean | 'focusNoScroll';\n\t\tautoRevealExclude: IExpression;\n\t\tenableDragAndDrop: boolean;\n\t\tconfirmDelete: boolean;\n\t\tenableUndo: boolean;\n\t\tconfirmUndo: UndoConfirmLevel;\n\t\texpandSingleFolderWorkspaces: boolean;\n\t\tsortOrder: SortOrder;\n\t\tsortOrderLexicographicOptions: LexicographicOptions;\n\t\tdecorations: {\n\t\t\tcolors: boolean;\n\t\t\tbadges: boolean;\n\t\t};\n\t\tincrementalNaming: 'simple' | 'smart' | 'disabled';\n\t\texcludeGitIgnore: boolean;\n\t\tfileNesting: {\n\t\t\tenabled: boolean;\n\t\t\texpand: boolean;\n\t\t\tpatterns: { [parent: string]: string };\n\t\t};\n\t};\n\teditor: IEditorOptions;\n}\n\nexport interface IFileResource {\n\tresource: URI;\n\tisDirectory?: boolean;\n}\n\nexport const enum SortOrder {\n\tDefault = 'default',\n\tMixed = 'mixed',\n\tFilesFirst = 'filesFirst',\n\tType = 'type',\n\tModified = 'modified',\n\tFoldersNestsFiles = 'foldersNestsFiles',\n}\n\nexport const enum UndoConfirmLevel {\n\tVerbose = 'verbose',\n\tDefault = 'default',\n\tLight = 'light',\n}\n\nexport const enum LexicographicOptions {\n\tDefault = 'default',\n\tUpper = 'upper',\n\tLower = 'lower',\n\tUnicode = 'unicode',\n}\n\nexport interface ISortOrderConfiguration {\n\tsortOrder: SortOrder;\n\tlexicographicOptions: LexicographicOptions;\n}\n\nexport class TextFileContentProvider extends Disposable implements ITextModelContentProvider {\n\tprivate readonly fileWatcherDisposable = this._register(new MutableDisposable());\n\n\tconstructor(\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@IModelService private readonly modelService: IModelService\n\t) {\n\t\tsuper();\n\t}\n\n\tstatic async open(resource: URI, scheme: string, label: string, editorService: IEditorService, options?: ITextEditorOptions): Promise<void> {\n\t\tawait editorService.openEditor({\n\t\t\toriginal: { resource: TextFileContentProvider.resourceToTextFile(scheme, resource) },\n\t\t\tmodified: { resource },\n\t\t\tlabel,\n\t\t\toptions\n\t\t});\n\t}\n\n\tprivate static resourceToTextFile(scheme: string, resource: URI): URI {\n\t\treturn resource.with({ scheme, query: JSON.stringify({ scheme: resource.scheme, query: resource.query }) });\n\t}\n\n\tprivate static textFileToResource(resource: URI): URI {\n\t\tconst { scheme, query } = JSON.parse(resource.query);\n\n\t\treturn resource.with({ scheme, query });\n\t}\n\n\tasync provideTextContent(resource: URI): Promise<ITextModel | null> {\n\t\tif (!resource.query) {\n\t\t\t// We require the URI to use the `query` to transport the original scheme and query\n\t\t\t// as done by `resourceToTextFile`\n\t\t\treturn null;\n\t\t}\n\n\t\tconst savedFileResource = TextFileContentProvider.textFileToResource(resource);\n\n\t\t// Make sure our text file is resolved up to date\n\t\tconst codeEditorModel = await this.resolveEditorModel(resource);\n\n\t\t// Make sure to keep contents up to date when it changes\n\t\tif (!this.fileWatcherDisposable.value) {\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tthis.fileWatcherDisposable.value = disposables;\n\t\t\tdisposables.add(this.fileService.onDidFilesChange(changes => {\n\t\t\t\tif (changes.contains(savedFileResource, FileChangeType.UPDATED)) {\n\t\t\t\t\tthis.resolveEditorModel(resource, false /* do not create if missing */); // update model when resource changes\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tif (codeEditorModel) {\n\t\t\t\tdisposables.add(once(codeEditorModel.onWillDispose)(() => this.fileWatcherDisposable.clear()));\n\t\t\t}\n\t\t}\n\n\t\treturn codeEditorModel;\n\t}\n\n\tprivate resolveEditorModel(resource: URI, createAsNeeded?: true): Promise<ITextModel>;\n\tprivate resolveEditorModel(resource: URI, createAsNeeded?: boolean): Promise<ITextModel | null>;\n\tprivate async resolveEditorModel(resource: URI, createAsNeeded: boolean = true): Promise<ITextModel | null> {\n\t\tconst savedFileResource = TextFileContentProvider.textFileToResource(resource);\n\n\t\tconst content = await this.textFileService.readStream(savedFileResource);\n\n\t\tlet codeEditorModel = this.modelService.getModel(resource);\n\t\tif (codeEditorModel) {\n\t\t\tthis.modelService.updateModel(codeEditorModel, content.value);\n\t\t} else if (createAsNeeded) {\n\t\t\tconst textFileModel = this.modelService.getModel(savedFileResource);\n\n\t\t\tlet languageSelector: ILanguageSelection;\n\t\t\tif (textFileModel) {\n\t\t\t\tlanguageSelector = this.languageService.createById(textFileModel.getLanguageId());\n\t\t\t} else {\n\t\t\t\tlanguageSelector = this.languageService.createByFilepathOrFirstLine(savedFileResource);\n\t\t\t}\n\n\t\t\tcodeEditorModel = this.modelService.createModel(content.value, languageSelector, resource);\n\t\t}\n\n\t\treturn codeEditorModel;\n\t}\n}\n\nexport class OpenEditor implements IEditorIdentifier {\n\n\tprivate id: number;\n\tprivate static COUNTER = 0;\n\n\tconstructor(private _editor: EditorInput, private _group: IEditorGroup) {\n\t\tthis.id = OpenEditor.COUNTER++;\n\t}\n\n\tget editor() {\n\t\treturn this._editor;\n\t}\n\n\tget group() {\n\t\treturn this._group;\n\t}\n\n\tget groupId() {\n\t\treturn this._group.id;\n\t}\n\n\tgetId(): string {\n\t\treturn `openeditor:${this.groupId}:${this.id}`;\n\t}\n\n\tisPreview(): boolean {\n\t\treturn !this._group.isPinned(this.editor);\n\t}\n\n\tisSticky(): boolean {\n\t\treturn this._group.isSticky(this.editor);\n\t}\n\n\tgetResource(): URI | undefined {\n\t\treturn EditorResourceAccessor.getOriginalUri(this.editor, { supportSideBySide: SideBySideEditor.PRIMARY });\n\t}\n}\n"]}