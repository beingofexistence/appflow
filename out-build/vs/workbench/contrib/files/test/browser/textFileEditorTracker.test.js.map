{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/files/test/browser/textFileEditorTracker.test.ts"],"names":[],"mappings":"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","file":"textFileEditorTracker.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Event } from 'vs/base/common/event';\nimport { TextFileEditorTracker } from 'vs/workbench/contrib/files/browser/editors/textFileEditorTracker';\nimport { ensureNoDisposablesAreLeakedInTestSuite, toResource } from 'vs/base/test/common/utils';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { workbenchInstantiationService, TestServiceAccessor, TestFilesConfigurationService, registerTestFileEditor, registerTestResourceEditor, createEditorPart, TestEnvironmentService, TestFileService, workbenchTeardown } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { IResolvedTextFileEditorModel, snapshotToString, ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { FileChangesEvent, FileChangeType, FileOperationError, FileOperationResult } from 'vs/platform/files/common/files';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { timeout } from 'vs/base/common/async';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { TextFileEditorModelManager } from 'vs/workbench/services/textfile/common/textFileEditorModelManager';\nimport { EditorService } from 'vs/workbench/services/editor/browser/editorService';\nimport { UntitledTextEditorInput } from 'vs/workbench/services/untitled/common/untitledTextEditorInput';\nimport { isEqual } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IFilesConfigurationService } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\nimport { MockContextKeyService } from 'vs/platform/keybinding/test/common/mockKeybindingService';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { FILE_EDITOR_INPUT_ID } from 'vs/workbench/contrib/files/common/files';\nimport { DEFAULT_EDITOR_ASSOCIATION } from 'vs/workbench/common/editor';\nimport { TestWorkspace } from 'vs/platform/workspace/test/common/testWorkspace';\nimport { TestContextService } from 'vs/workbench/test/common/workbenchTestServices';\nimport { UriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentityService';\n\nsuite('Files - TextFileEditorTracker', () => {\n\n\tconst disposables = new DisposableStore();\n\n\tclass TestTextFileEditorTracker extends TextFileEditorTracker {\n\n\t\tprotected override getDirtyTextFileTrackerDelay(): number {\n\t\t\treturn 5; // encapsulated in a method for tests to override\n\t\t}\n\t}\n\n\tsetup(() => {\n\t\tdisposables.add(registerTestFileEditor());\n\t\tdisposables.add(registerTestResourceEditor());\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\tasync function createTracker(autoSaveEnabled = false): Promise<{ accessor: TestServiceAccessor; cleanup: () => Promise<void> }> {\n\t\tconst instantiationService = workbenchInstantiationService(undefined, disposables);\n\n\t\tif (autoSaveEnabled) {\n\t\t\tconst configurationService = new TestConfigurationService();\n\t\t\tconfigurationService.setUserConfiguration('files', { autoSave: 'afterDelay', autoSaveDelay: 1 });\n\n\t\t\tinstantiationService.stub(IConfigurationService, configurationService);\n\n\t\t\tconst fileService = disposables.add(new TestFileService());\n\n\t\t\tinstantiationService.stub(IFilesConfigurationService, disposables.add(new TestFilesConfigurationService(\n\t\t\t\t<IContextKeyService>instantiationService.createInstance(MockContextKeyService),\n\t\t\t\tconfigurationService,\n\t\t\t\tnew TestContextService(TestWorkspace),\n\t\t\t\tTestEnvironmentService,\n\t\t\t\tdisposables.add(new UriIdentityService(fileService)),\n\t\t\t\tfileService\n\t\t\t)));\n\t\t}\n\n\t\tconst part = await createEditorPart(instantiationService, disposables);\n\t\tinstantiationService.stub(IEditorGroupsService, part);\n\n\t\tconst editorService: EditorService = disposables.add(instantiationService.createInstance(EditorService));\n\t\tdisposables.add(editorService);\n\t\tinstantiationService.stub(IEditorService, editorService);\n\n\t\tconst accessor = instantiationService.createInstance(TestServiceAccessor);\n\t\tdisposables.add((<TextFileEditorModelManager>accessor.textFileService.files));\n\n\t\tdisposables.add(instantiationService.createInstance(TestTextFileEditorTracker));\n\n\t\tconst cleanup = async () => {\n\t\t\tawait workbenchTeardown(instantiationService);\n\t\t\tpart.dispose();\n\t\t};\n\n\t\treturn { accessor, cleanup };\n\t}\n\n\ttest('file change event updates model', async function () {\n\t\tconst { accessor, cleanup } = await createTracker();\n\n\t\tconst resource = toResource.call(this, '/path/index.txt');\n\n\t\tconst model = await accessor.textFileService.files.resolve(resource) as IResolvedTextFileEditorModel;\n\t\tdisposables.add(model);\n\n\t\tmodel.textEditorModel.setValue('Super Good');\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), 'Super Good');\n\n\t\tawait model.save();\n\n\t\t// change event (watcher)\n\t\taccessor.fileService.fireFileChanges(new FileChangesEvent([{ resource, type: FileChangeType.UPDATED }], false));\n\n\t\tawait timeout(0); // due to event updating model async\n\n\t\tassert.strictEqual(snapshotToString(model.createSnapshot()!), 'Hello Html');\n\n\t\tawait cleanup();\n\t});\n\n\ttest('dirty text file model opens as editor', async function () {\n\t\tconst resource = toResource.call(this, '/path/index.txt');\n\n\t\tawait testDirtyTextFileModelOpensEditorDependingOnAutoSaveSetting(resource, false, false);\n\t});\n\n\ttest('dirty text file model does not open as editor if autosave is ON', async function () {\n\t\tconst resource = toResource.call(this, '/path/index.txt');\n\n\t\tawait testDirtyTextFileModelOpensEditorDependingOnAutoSaveSetting(resource, true, false);\n\t});\n\n\ttest('dirty text file model opens as editor when save fails', async function () {\n\t\tconst resource = toResource.call(this, '/path/index.txt');\n\n\t\tawait testDirtyTextFileModelOpensEditorDependingOnAutoSaveSetting(resource, false, true);\n\t});\n\n\ttest('dirty text file model opens as editor when save fails if autosave is ON', async function () {\n\t\tconst resource = toResource.call(this, '/path/index.txt');\n\n\t\tawait testDirtyTextFileModelOpensEditorDependingOnAutoSaveSetting(resource, true, true);\n\t});\n\n\tasync function testDirtyTextFileModelOpensEditorDependingOnAutoSaveSetting(resource: URI, autoSave: boolean, error: boolean): Promise<void> {\n\t\tconst { accessor, cleanup } = await createTracker(autoSave);\n\n\t\tassert.ok(!accessor.editorService.isOpened({ resource, typeId: FILE_EDITOR_INPUT_ID, editorId: DEFAULT_EDITOR_ASSOCIATION.id }));\n\n\t\tif (error) {\n\t\t\taccessor.textFileService.setWriteErrorOnce(new FileOperationError('fail to write', FileOperationResult.FILE_OTHER_ERROR));\n\t\t}\n\n\t\tconst model = await accessor.textFileService.files.resolve(resource) as IResolvedTextFileEditorModel;\n\t\tdisposables.add(model);\n\n\t\tmodel.textEditorModel.setValue('Super Good');\n\n\t\tif (autoSave) {\n\t\t\tawait model.save();\n\t\t\tawait timeout(10);\n\t\t\tif (error) {\n\t\t\t\tassert.ok(accessor.editorService.isOpened({ resource, typeId: FILE_EDITOR_INPUT_ID, editorId: DEFAULT_EDITOR_ASSOCIATION.id }));\n\t\t\t} else {\n\t\t\t\tassert.ok(!accessor.editorService.isOpened({ resource, typeId: FILE_EDITOR_INPUT_ID, editorId: DEFAULT_EDITOR_ASSOCIATION.id }));\n\t\t\t}\n\t\t} else {\n\t\t\tawait awaitEditorOpening(accessor.editorService);\n\t\t\tassert.ok(accessor.editorService.isOpened({ resource, typeId: FILE_EDITOR_INPUT_ID, editorId: DEFAULT_EDITOR_ASSOCIATION.id }));\n\t\t}\n\n\t\tawait cleanup();\n\t}\n\n\ttest('dirty untitled text file model opens as editor', function () {\n\t\treturn testUntitledEditor(false);\n\t});\n\n\ttest('dirty untitled text file model opens as editor - autosave ON', function () {\n\t\treturn testUntitledEditor(true);\n\t});\n\n\tasync function testUntitledEditor(autoSaveEnabled: boolean): Promise<void> {\n\t\tconst { accessor, cleanup } = await createTracker(autoSaveEnabled);\n\n\t\tconst untitledTextEditor = await accessor.textEditorService.resolveTextEditor({ resource: undefined, forceUntitled: true }) as UntitledTextEditorInput;\n\t\tconst model = disposables.add(await untitledTextEditor.resolve());\n\n\t\tassert.ok(!accessor.editorService.isOpened(untitledTextEditor));\n\n\t\tmodel.textEditorModel?.setValue('Super Good');\n\n\t\tawait awaitEditorOpening(accessor.editorService);\n\t\tassert.ok(accessor.editorService.isOpened(untitledTextEditor));\n\n\t\tawait cleanup();\n\t}\n\n\tfunction awaitEditorOpening(editorService: IEditorService): Promise<void> {\n\t\treturn Event.toPromise(Event.once(editorService.onDidActiveEditorChange));\n\t}\n\n\ttest('non-dirty files reload on window focus', async function () {\n\t\tconst { accessor, cleanup } = await createTracker();\n\n\t\tconst resource = toResource.call(this, '/path/index.txt');\n\n\t\tawait accessor.editorService.openEditor(await accessor.textEditorService.resolveTextEditor({ resource, options: { override: DEFAULT_EDITOR_ASSOCIATION.id } }));\n\n\t\taccessor.hostService.setFocus(false);\n\t\taccessor.hostService.setFocus(true);\n\n\t\tawait awaitModelResolveEvent(accessor.textFileService, resource);\n\n\t\tawait cleanup();\n\t});\n\n\tfunction awaitModelResolveEvent(textFileService: ITextFileService, resource: URI): Promise<void> {\n\t\treturn new Promise(resolve => {\n\t\t\tconst listener = textFileService.files.onDidResolve(e => {\n\t\t\t\tif (isEqual(e.model.resource, resource)) {\n\t\t\t\t\tlistener.dispose();\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"]}