{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/files/test/browser/editorAutoSave.test.ts"],"names":[],"mappings":"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","file":"editorAutoSave.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Event } from 'vs/base/common/event';\nimport { ensureNoDisposablesAreLeakedInTestSuite, toResource } from 'vs/base/test/common/utils';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { TestFilesConfigurationService, workbenchInstantiationService, TestServiceAccessor, registerTestFileEditor, createEditorPart, TestEnvironmentService, TestFileService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { ITextFileEditorModel } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { TextFileEditorModelManager } from 'vs/workbench/services/textfile/common/textFileEditorModelManager';\nimport { EditorService } from 'vs/workbench/services/editor/browser/editorService';\nimport { EditorAutoSave } from 'vs/workbench/browser/parts/editor/editorAutoSave';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { IFilesConfigurationService } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { MockContextKeyService } from 'vs/platform/keybinding/test/common/mockKeybindingService';\nimport { DEFAULT_EDITOR_ASSOCIATION } from 'vs/workbench/common/editor';\nimport { TestWorkspace } from 'vs/platform/workspace/test/common/testWorkspace';\nimport { TestContextService } from 'vs/workbench/test/common/workbenchTestServices';\nimport { UriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentityService';\n\nsuite('EditorAutoSave', () => {\n\n\tconst disposables = new DisposableStore();\n\n\tsetup(() => {\n\t\tdisposables.add(registerTestFileEditor());\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\tasync function createEditorAutoSave(autoSaveConfig: object): Promise<TestServiceAccessor> {\n\t\tconst instantiationService = workbenchInstantiationService(undefined, disposables);\n\n\t\tconst configurationService = new TestConfigurationService();\n\t\tconfigurationService.setUserConfiguration('files', autoSaveConfig);\n\t\tinstantiationService.stub(IConfigurationService, configurationService);\n\n\t\tinstantiationService.stub(IFilesConfigurationService, disposables.add(new TestFilesConfigurationService(\n\t\t\t<IContextKeyService>instantiationService.createInstance(MockContextKeyService),\n\t\t\tconfigurationService,\n\t\t\tnew TestContextService(TestWorkspace),\n\t\t\tTestEnvironmentService,\n\t\t\tdisposables.add(new UriIdentityService(disposables.add(new TestFileService()))),\n\t\t\tdisposables.add(new TestFileService())\n\t\t)));\n\n\t\tconst part = await createEditorPart(instantiationService, disposables);\n\t\tinstantiationService.stub(IEditorGroupsService, part);\n\n\t\tconst editorService: EditorService = disposables.add(instantiationService.createInstance(EditorService));\n\t\tinstantiationService.stub(IEditorService, editorService);\n\n\t\tconst accessor = instantiationService.createInstance(TestServiceAccessor);\n\t\tdisposables.add((<TextFileEditorModelManager>accessor.textFileService.files));\n\n\t\tdisposables.add(instantiationService.createInstance(EditorAutoSave));\n\n\t\treturn accessor;\n\t}\n\n\ttest('editor auto saves after short delay if configured', async function () {\n\t\tconst accessor = await createEditorAutoSave({ autoSave: 'afterDelay', autoSaveDelay: 1 });\n\n\t\tconst resource = toResource.call(this, '/path/index.txt');\n\n\t\tconst model: ITextFileEditorModel = disposables.add(await accessor.textFileService.files.resolve(resource));\n\t\tmodel.textEditorModel?.setValue('Super Good');\n\n\t\tassert.ok(model.isDirty());\n\n\t\tawait awaitModelSaved(model);\n\n\t\tassert.strictEqual(model.isDirty(), false);\n\t});\n\n\ttest('editor auto saves on focus change if configured', async function () {\n\t\tconst accessor = await createEditorAutoSave({ autoSave: 'onFocusChange' });\n\n\t\tconst resource = toResource.call(this, '/path/index.txt');\n\t\tawait accessor.editorService.openEditor({ resource, options: { override: DEFAULT_EDITOR_ASSOCIATION.id } });\n\n\t\tconst model: ITextFileEditorModel = disposables.add(await accessor.textFileService.files.resolve(resource));\n\t\tmodel.textEditorModel?.setValue('Super Good');\n\n\t\tassert.ok(model.isDirty());\n\n\t\tconst editorPane = await accessor.editorService.openEditor({ resource: toResource.call(this, '/path/index_other.txt') });\n\n\t\tawait awaitModelSaved(model);\n\n\t\tassert.strictEqual(model.isDirty(), false);\n\n\t\tawait editorPane?.group?.closeAllEditors();\n\t});\n\n\tfunction awaitModelSaved(model: ITextFileEditorModel): Promise<void> {\n\t\treturn Event.toPromise(Event.once(model.onDidChangeDirty));\n\t}\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"]}