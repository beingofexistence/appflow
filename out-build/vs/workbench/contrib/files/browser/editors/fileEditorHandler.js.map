{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/files/browser/editors/fileEditorHandler.ts"],"names":[],"mappings":"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","file":"fileEditorHandler.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { IEditorSerializer } from 'vs/workbench/common/editor';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { ITextEditorService } from 'vs/workbench/services/textfile/common/textEditorService';\nimport { isEqual } from 'vs/base/common/resources';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IWorkingCopyIdentifier, NO_TYPE_ID } from 'vs/workbench/services/workingCopy/common/workingCopy';\nimport { IWorkingCopyEditorHandler, IWorkingCopyEditorService } from 'vs/workbench/services/workingCopy/common/workingCopyEditorService';\nimport { FileEditorInput } from 'vs/workbench/contrib/files/browser/editors/fileEditorInput';\nimport { IFileService } from 'vs/platform/files/common/files';\n\ninterface ISerializedFileEditorInput {\n\tresourceJSON: UriComponents;\n\tpreferredResourceJSON?: UriComponents;\n\tname?: string;\n\tdescription?: string;\n\tencoding?: string;\n\tmodeId?: string; // should be `languageId` but is kept for backwards compatibility\n}\n\nexport class FileEditorInputSerializer implements IEditorSerializer {\n\n\tcanSerialize(editorInput: EditorInput): boolean {\n\t\treturn true;\n\t}\n\n\tserialize(editorInput: EditorInput): string {\n\t\tconst fileEditorInput = editorInput as FileEditorInput;\n\t\tconst resource = fileEditorInput.resource;\n\t\tconst preferredResource = fileEditorInput.preferredResource;\n\t\tconst serializedFileEditorInput: ISerializedFileEditorInput = {\n\t\t\tresourceJSON: resource.toJSON(),\n\t\t\tpreferredResourceJSON: isEqual(resource, preferredResource) ? undefined : preferredResource, // only storing preferredResource if it differs from the resource\n\t\t\tname: fileEditorInput.getPreferredName(),\n\t\t\tdescription: fileEditorInput.getPreferredDescription(),\n\t\t\tencoding: fileEditorInput.getEncoding(),\n\t\t\tmodeId: fileEditorInput.getPreferredLanguageId() // only using the preferred user associated language here if available to not store redundant data\n\t\t};\n\n\t\treturn JSON.stringify(serializedFileEditorInput);\n\t}\n\n\tdeserialize(instantiationService: IInstantiationService, serializedEditorInput: string): FileEditorInput {\n\t\treturn instantiationService.invokeFunction(accessor => {\n\t\t\tconst serializedFileEditorInput: ISerializedFileEditorInput = JSON.parse(serializedEditorInput);\n\t\t\tconst resource = URI.revive(serializedFileEditorInput.resourceJSON);\n\t\t\tconst preferredResource = URI.revive(serializedFileEditorInput.preferredResourceJSON);\n\t\t\tconst name = serializedFileEditorInput.name;\n\t\t\tconst description = serializedFileEditorInput.description;\n\t\t\tconst encoding = serializedFileEditorInput.encoding;\n\t\t\tconst languageId = serializedFileEditorInput.modeId;\n\n\t\t\tconst fileEditorInput = accessor.get(ITextEditorService).createTextEditor({ resource, label: name, description, encoding, languageId, forceFile: true }) as FileEditorInput;\n\t\t\tif (preferredResource) {\n\t\t\t\tfileEditorInput.setPreferredResource(preferredResource);\n\t\t\t}\n\n\t\t\treturn fileEditorInput;\n\t\t});\n\t}\n}\n\nexport class FileEditorWorkingCopyEditorHandler extends Disposable implements IWorkbenchContribution, IWorkingCopyEditorHandler {\n\n\tconstructor(\n\t\t@IWorkingCopyEditorService workingCopyEditorService: IWorkingCopyEditorService,\n\t\t@ITextEditorService private readonly textEditorService: ITextEditorService,\n\t\t@IFileService private readonly fileService: IFileService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(workingCopyEditorService.registerHandler(this));\n\t}\n\n\thandles(workingCopy: IWorkingCopyIdentifier): boolean | Promise<boolean> {\n\t\treturn workingCopy.typeId === NO_TYPE_ID && this.fileService.canHandleResource(workingCopy.resource);\n\t}\n\n\tprivate handlesSync(workingCopy: IWorkingCopyIdentifier): boolean {\n\t\treturn workingCopy.typeId === NO_TYPE_ID && this.fileService.hasProvider(workingCopy.resource);\n\t}\n\n\tisOpen(workingCopy: IWorkingCopyIdentifier, editor: EditorInput): boolean {\n\t\tif (!this.handlesSync(workingCopy)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Naturally it would make sense here to check for `instanceof FileEditorInput`\n\t\t// but because some custom editors also leverage text file based working copies\n\t\t// we need to do a weaker check by only comparing for the resource\n\n\t\treturn isEqual(workingCopy.resource, editor.resource);\n\t}\n\n\tcreateEditor(workingCopy: IWorkingCopyIdentifier): EditorInput {\n\t\treturn this.textEditorService.createTextEditor({ resource: workingCopy.resource, forceFile: true });\n\t}\n}\n"]}