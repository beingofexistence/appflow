{"version":3,"sources":["vs/workbench/contrib/files/browser/editors/textFileEditor.ts"],"names":[],"mappings":"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","file":"textFileEditor.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { mark } from 'vs/base/common/performance';\nimport { assertIsDefined } from 'vs/base/common/types';\nimport { IPathService } from 'vs/workbench/services/path/common/pathService';\nimport { IAction, toAction } from 'vs/base/common/actions';\nimport { VIEWLET_ID, TEXT_FILE_EDITOR_ID, BINARY_TEXT_FILE_MODE } from 'vs/workbench/contrib/files/common/files';\nimport { ITextFileService, TextFileOperationError, TextFileOperationResult } from 'vs/workbench/services/textfile/common/textfiles';\nimport { AbstractTextCodeEditor } from 'vs/workbench/browser/parts/editor/textCodeEditor';\nimport { IEditorOpenContext, isTextEditorViewState, DEFAULT_EDITOR_ASSOCIATION, createEditorOpenError, IFileEditorInputOptions, createTooLargeFileError } from 'vs/workbench/common/editor';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { applyTextEditorOptions } from 'vs/workbench/common/editor/editorOptions';\nimport { BinaryEditorModel } from 'vs/workbench/common/editor/binaryEditorModel';\nimport { FileEditorInput } from 'vs/workbench/contrib/files/browser/editors/fileEditorInput';\nimport { FileOperationError, FileOperationResult, FileChangesEvent, IFileService, FileOperationEvent, FileOperation, ByteSize, TooLargeFileOperationError } from 'vs/platform/files/common/files';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfiguration';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { ICodeEditorViewState, ScrollType } from 'vs/editor/common/editorCommon';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IEditorGroup, IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { EditorActivation, ITextEditorOptions } from 'vs/platform/editor/common/editor';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { IExplorerService } from 'vs/workbench/contrib/files/browser/files';\nimport { IPaneCompositePartService } from 'vs/workbench/services/panecomposite/browser/panecomposite';\nimport { ViewContainerLocation } from 'vs/workbench/common/views';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { IEditorOptions as ICodeEditorOptions } from 'vs/editor/common/config/editorOptions';\n\n/**\n * An implementation of editor for file system resources.\n */\nexport class TextFileEditor extends AbstractTextCodeEditor<ICodeEditorViewState> {\n\n\tstatic readonly ID = TEXT_FILE_EDITOR_ID;\n\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IPaneCompositePartService private readonly paneCompositeService: IPaneCompositePartService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IExplorerService private readonly explorerService: IExplorerService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IPathService private readonly pathService: IPathService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IPreferencesService protected readonly preferencesService: IPreferencesService,\n\t\t@IHostService private readonly hostService: IHostService\n\t) {\n\t\tsuper(TextFileEditor.ID, telemetryService, instantiationService, storageService, textResourceConfigurationService, themeService, editorService, editorGroupService, fileService);\n\n\t\t// Clear view state for deleted files\n\t\tthis._register(this.fileService.onDidFilesChange(e => this.onDidFilesChange(e)));\n\n\t\t// Move view state for moved files\n\t\tthis._register(this.fileService.onDidRunOperation(e => this.onDidRunOperation(e)));\n\t}\n\n\tprivate onDidFilesChange(e: FileChangesEvent): void {\n\t\tfor (const resource of e.rawDeleted) {\n\t\t\tthis.clearEditorViewState(resource);\n\t\t}\n\t}\n\n\tprivate onDidRunOperation(e: FileOperationEvent): void {\n\t\tif (e.operation === FileOperation.MOVE && e.target) {\n\t\t\tthis.moveEditorViewState(e.resource, e.target.resource, this.uriIdentityService.extUri);\n\t\t}\n\t}\n\n\toverride getTitle(): string {\n\t\tif (this.input) {\n\t\t\treturn this.input.getName();\n\t\t}\n\n\t\treturn localize('textFileEditor', \"Text File Editor\");\n\t}\n\n\toverride get input(): FileEditorInput | undefined {\n\t\treturn this._input as FileEditorInput;\n\t}\n\n\toverride async setInput(input: FileEditorInput, options: IFileEditorInputOptions | undefined, context: IEditorOpenContext, token: CancellationToken): Promise<void> {\n\t\tmark('code/willSetInputToTextFileEditor');\n\n\t\t// Set input and resolve\n\t\tawait super.setInput(input, options, context, token);\n\t\ttry {\n\t\t\tconst resolvedModel = await input.resolve(options);\n\n\t\t\t// Check for cancellation\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// There is a special case where the text editor has to handle binary\n\t\t\t// file editor input: if a binary file has been resolved and cached\n\t\t\t// before, it maybe an actual instance of BinaryEditorModel. In this\n\t\t\t// case our text editor has to open this model using the binary editor.\n\t\t\t// We return early in this case.\n\n\t\t\tif (resolvedModel instanceof BinaryEditorModel) {\n\t\t\t\treturn this.openAsBinary(input, options);\n\t\t\t}\n\n\t\t\tconst textFileModel = resolvedModel;\n\n\t\t\t// Editor\n\t\t\tconst control = assertIsDefined(this.editorControl);\n\t\t\tcontrol.setModel(textFileModel.textEditorModel);\n\n\t\t\t// Restore view state (unless provided by options)\n\t\t\tif (!isTextEditorViewState(options?.viewState)) {\n\t\t\t\tconst editorViewState = this.loadEditorViewState(input, context);\n\t\t\t\tif (editorViewState) {\n\t\t\t\t\tif (options?.selection) {\n\t\t\t\t\t\teditorViewState.cursorState = []; // prevent duplicate selections via options\n\t\t\t\t\t}\n\n\t\t\t\t\tcontrol.restoreViewState(editorViewState);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Apply options to editor if any\n\t\t\tif (options) {\n\t\t\t\tapplyTextEditorOptions(options, control, ScrollType.Immediate);\n\t\t\t}\n\n\t\t\t// Since the resolved model provides information about being readonly\n\t\t\t// or not, we apply it here to the editor even though the editor input\n\t\t\t// was already asked for being readonly or not. The rationale is that\n\t\t\t// a resolved model might have more specific information about being\n\t\t\t// readonly or not that the input did not have.\n\t\t\tcontrol.updateOptions(this.getReadonlyConfiguration(textFileModel.isReadonly()));\n\n\t\t\tif (control.handleInitialized) {\n\t\t\t\tcontrol.handleInitialized();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tawait this.handleSetInputError(error, input, options);\n\t\t}\n\n\t\tmark('code/didSetInputToTextFileEditor');\n\t}\n\n\tprotected async handleSetInputError(error: Error, input: FileEditorInput, options: ITextEditorOptions | undefined): Promise<void> {\n\n\t\t// Handle case where content appears to be binary\n\t\tif ((<TextFileOperationError>error).textFileOperationResult === TextFileOperationResult.FILE_IS_BINARY) {\n\t\t\treturn this.openAsBinary(input, options);\n\t\t}\n\n\t\t// Handle case where we were asked to open a folder\n\t\tif ((<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_IS_DIRECTORY) {\n\t\t\tconst actions: IAction[] = [];\n\n\t\t\tactions.push(toAction({\n\t\t\t\tid: 'workbench.files.action.openFolder', label: localize('openFolder', \"Open Folder\"), run: async () => {\n\t\t\t\t\treturn this.hostService.openWindow([{ folderUri: input.resource }], { forceNewWindow: true });\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tif (this.contextService.isInsideWorkspace(input.preferredResource)) {\n\t\t\t\tactions.push(toAction({\n\t\t\t\t\tid: 'workbench.files.action.reveal', label: localize('reveal', \"Reveal Folder\"), run: async () => {\n\t\t\t\t\t\tawait this.paneCompositeService.openPaneComposite(VIEWLET_ID, ViewContainerLocation.Sidebar, true);\n\n\t\t\t\t\t\treturn this.explorerService.select(input.preferredResource, true);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\tthrow createEditorOpenError(localize('fileIsDirectory', \"The file is not displayed in the text editor because it is a directory.\"), actions, { forceMessage: true });\n\t\t}\n\n\t\t// Handle case where a file is too large to open without confirmation\n\t\tif ((<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_TOO_LARGE && this.group) {\n\t\t\tlet message: string;\n\t\t\tif (error instanceof TooLargeFileOperationError) {\n\t\t\t\tmessage = localize('fileTooLargeForHeapErrorWithSize', \"The file is not displayed in the text editor because it is very large ({0}).\", ByteSize.formatSize(error.size));\n\t\t\t} else {\n\t\t\t\tmessage = localize('fileTooLargeForHeapErrorWithoutSize', \"The file is not displayed in the text editor because it is very large.\");\n\t\t\t}\n\n\t\t\tthrow createTooLargeFileError(this.group, input, options, message, this.preferencesService);\n\t\t}\n\n\t\t// Offer to create a file from the error if we have a file not found and the name is valid\n\t\tif ((<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_NOT_FOUND && await this.pathService.hasValidBasename(input.preferredResource)) {\n\t\t\tconst fileNotFoundError = createEditorOpenError(new FileOperationError(localize('unavailableResourceErrorEditorText', \"The editor could not be opened because the file was not found.\"), FileOperationResult.FILE_NOT_FOUND), [\n\t\t\t\ttoAction({\n\t\t\t\t\tid: 'workbench.files.action.createMissingFile', label: localize('createFile', \"Create File\"), run: async () => {\n\t\t\t\t\t\tawait this.textFileService.create([{ resource: input.preferredResource }]);\n\n\t\t\t\t\t\treturn this.editorService.openEditor({\n\t\t\t\t\t\t\tresource: input.preferredResource,\n\t\t\t\t\t\t\toptions: {\n\t\t\t\t\t\t\t\tpinned: true // new file gets pinned by default\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t], {\n\n\t\t\t\t// Support the flow of directly pressing `Enter` on the dialog to\n\t\t\t\t// create the file on the go. This is nice when for example following\n\t\t\t\t// a link to a file that does not exist to scaffold it quickly.\n\n\t\t\t\tallowDialog: true\n\t\t\t});\n\n\t\t\tthrow fileNotFoundError;\n\t\t}\n\n\t\t// Otherwise make sure the error bubbles up\n\t\tthrow error;\n\t}\n\n\tprivate openAsBinary(input: FileEditorInput, options: ITextEditorOptions | undefined): void {\n\t\tconst defaultBinaryEditor = this.configurationService.getValue<string | undefined>('workbench.editor.defaultBinaryEditor');\n\t\tconst group = this.group ?? this.editorGroupService.activeGroup;\n\n\t\tconst editorOptions = {\n\t\t\t...options,\n\t\t\t// Make sure to not steal away the currently active group\n\t\t\t// because we are triggering another openEditor() call\n\t\t\t// and do not control the initial intent that resulted\n\t\t\t// in us now opening as binary.\n\t\t\tactivation: EditorActivation.PRESERVE\n\t\t};\n\n\t\t// Check configuration and determine whether we open the binary\n\t\t// file input in a different editor or going through the same\n\t\t// editor.\n\t\t// Going through the same editor is debt, and a better solution\n\t\t// would be to introduce a real editor for the binary case\n\t\t// and avoid enforcing binary or text on the file editor input.\n\n\t\tif (defaultBinaryEditor && defaultBinaryEditor !== '' && defaultBinaryEditor !== DEFAULT_EDITOR_ASSOCIATION.id) {\n\t\t\tthis.doOpenAsBinaryInDifferentEditor(group, defaultBinaryEditor, input, editorOptions);\n\t\t} else {\n\t\t\tthis.doOpenAsBinaryInSameEditor(group, defaultBinaryEditor, input, editorOptions);\n\t\t}\n\t}\n\n\tprivate doOpenAsBinaryInDifferentEditor(group: IEditorGroup, editorId: string | undefined, editor: FileEditorInput, editorOptions: ITextEditorOptions): void {\n\t\tthis.editorService.replaceEditors([{\n\t\t\teditor,\n\t\t\treplacement: { resource: editor.resource, options: { ...editorOptions, override: editorId } }\n\t\t}], group);\n\t}\n\n\tprivate doOpenAsBinaryInSameEditor(group: IEditorGroup, editorId: string | undefined, editor: FileEditorInput, editorOptions: ITextEditorOptions): void {\n\n\t\t// Open binary as text\n\t\tif (editorId === DEFAULT_EDITOR_ASSOCIATION.id) {\n\t\t\teditor.setForceOpenAsText();\n\t\t\teditor.setPreferredLanguageId(BINARY_TEXT_FILE_MODE); // https://github.com/microsoft/vscode/issues/131076\n\n\t\t\teditorOptions = { ...editorOptions, forceReload: true }; // Same pane and same input, must force reload to clear cached state\n\t\t}\n\n\t\t// Open as binary\n\t\telse {\n\t\t\teditor.setForceOpenAsBinary();\n\t\t}\n\n\t\tgroup.openEditor(editor, editorOptions);\n\t}\n\n\toverride clearInput(): void {\n\t\tsuper.clearInput();\n\n\t\t// Clear Model\n\t\tthis.editorControl?.setModel(null);\n\t}\n\n\tprotected override createEditorControl(parent: HTMLElement, initialOptions: ICodeEditorOptions): void {\n\t\tmark('code/willCreateTextFileEditorControl');\n\n\t\tsuper.createEditorControl(parent, initialOptions);\n\n\t\tmark('code/didCreateTextFileEditorControl');\n\t}\n\n\tprotected override tracksEditorViewState(input: EditorInput): boolean {\n\t\treturn input instanceof FileEditorInput;\n\t}\n\n\tprotected override tracksDisposedEditorViewState(): boolean {\n\t\treturn true; // track view state even for disposed editors\n\t}\n}\n"]}