{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/files/browser/editors/fileEditorInput.ts"],"names":[],"mappings":"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","file":"fileEditorInput.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { IFileEditorInput, Verbosity, GroupIdentifier, IMoveResult, EditorInputCapabilities, IEditorDescriptor, IEditorPane, IUntypedEditorInput, DEFAULT_EDITOR_ASSOCIATION, IUntypedFileEditorInput, findViewStateForEditor, isResourceEditorInput, IFileEditorInputOptions } from 'vs/workbench/common/editor';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { AbstractTextResourceEditorInput } from 'vs/workbench/common/editor/textResourceEditorInput';\nimport { ITextResourceEditorInput } from 'vs/platform/editor/common/editor';\nimport { BinaryEditorModel } from 'vs/workbench/common/editor/binaryEditorModel';\nimport { ByteSize, IFileReadLimits, IFileService, getLargeFileConfirmationLimit } from 'vs/platform/files/common/files';\nimport { ITextFileService, TextFileEditorModelState, TextFileResolveReason, TextFileOperationError, TextFileOperationResult, ITextFileEditorModel, EncodingMode } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IReference, dispose, DisposableStore } from 'vs/base/common/lifecycle';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { FILE_EDITOR_INPUT_ID, TEXT_FILE_EDITOR_ID, BINARY_FILE_EDITOR_ID } from 'vs/workbench/contrib/files/common/files';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { AutoSaveMode, IFilesConfigurationService } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { isEqual } from 'vs/base/common/resources';\nimport { Event } from 'vs/base/common/event';\nimport { Schemas } from 'vs/base/common/network';\nimport { createTextBufferFactory } from 'vs/editor/common/model/textModel';\nimport { IPathService } from 'vs/workbench/services/path/common/pathService';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfiguration';\nimport { isConfigured } from 'vs/platform/configuration/common/configuration';\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\n\nconst enum ForceOpenAs {\n\tNone,\n\tText,\n\tBinary\n}\n\n/**\n * A file editor input is the input type for the file editor of file system resources.\n */\nexport class FileEditorInput extends AbstractTextResourceEditorInput implements IFileEditorInput {\n\n\toverride get typeId(): string {\n\t\treturn FILE_EDITOR_INPUT_ID;\n\t}\n\n\toverride get editorId(): string | undefined {\n\t\treturn DEFAULT_EDITOR_ASSOCIATION.id;\n\t}\n\n\toverride get capabilities(): EditorInputCapabilities {\n\t\tlet capabilities = EditorInputCapabilities.CanSplitInGroup;\n\n\t\tif (this.model) {\n\t\t\tif (this.model.isReadonly()) {\n\t\t\t\tcapabilities |= EditorInputCapabilities.Readonly;\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.fileService.hasProvider(this.resource)) {\n\t\t\t\tif (this.filesConfigurationService.isReadonly(this.resource)) {\n\t\t\t\t\tcapabilities |= EditorInputCapabilities.Readonly;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tcapabilities |= EditorInputCapabilities.Untitled;\n\t\t\t}\n\t\t}\n\n\t\tif (!(capabilities & EditorInputCapabilities.Readonly)) {\n\t\t\tcapabilities |= EditorInputCapabilities.CanDropIntoEditor;\n\t\t}\n\n\t\treturn capabilities;\n\t}\n\n\tprivate preferredName: string | undefined;\n\tprivate preferredDescription: string | undefined;\n\tprivate preferredEncoding: string | undefined;\n\tprivate preferredLanguageId: string | undefined;\n\tprivate preferredContents: string | undefined;\n\n\tprivate forceOpenAs: ForceOpenAs = ForceOpenAs.None;\n\n\tprivate model: ITextFileEditorModel | undefined = undefined;\n\tprivate cachedTextFileModelReference: IReference<ITextFileEditorModel> | undefined = undefined;\n\n\tprivate readonly modelListeners = this._register(new DisposableStore());\n\n\tconstructor(\n\t\tresource: URI,\n\t\tpreferredResource: URI | undefined,\n\t\tpreferredName: string | undefined,\n\t\tpreferredDescription: string | undefined,\n\t\tpreferredEncoding: string | undefined,\n\t\tpreferredLanguageId: string | undefined,\n\t\tpreferredContents: string | undefined,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITextFileService textFileService: ITextFileService,\n\t\t@ITextModelService private readonly textModelResolverService: ITextModelService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IFilesConfigurationService filesConfigurationService: IFilesConfigurationService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IPathService private readonly pathService: IPathService,\n\t\t@ITextResourceConfigurationService private readonly textResourceConfigurationService: ITextResourceConfigurationService\n\t) {\n\t\tsuper(resource, preferredResource, editorService, textFileService, labelService, fileService, filesConfigurationService);\n\n\t\tthis.model = this.textFileService.files.get(resource);\n\n\t\tif (preferredName) {\n\t\t\tthis.setPreferredName(preferredName);\n\t\t}\n\n\t\tif (preferredDescription) {\n\t\t\tthis.setPreferredDescription(preferredDescription);\n\t\t}\n\n\t\tif (preferredEncoding) {\n\t\t\tthis.setPreferredEncoding(preferredEncoding);\n\t\t}\n\n\t\tif (preferredLanguageId) {\n\t\t\tthis.setPreferredLanguageId(preferredLanguageId);\n\t\t}\n\n\t\tif (typeof preferredContents === 'string') {\n\t\t\tthis.setPreferredContents(preferredContents);\n\t\t}\n\n\t\t// Attach to model that matches our resource once created\n\t\tthis._register(this.textFileService.files.onDidCreate(model => this.onDidCreateTextFileModel(model)));\n\n\t\t// If a file model already exists, make sure to wire it in\n\t\tif (this.model) {\n\t\t\tthis.registerModelListeners(this.model);\n\t\t}\n\t}\n\n\tprivate onDidCreateTextFileModel(model: ITextFileEditorModel): void {\n\n\t\t// Once the text file model is created, we keep it inside\n\t\t// the input to be able to implement some methods properly\n\t\tif (isEqual(model.resource, this.resource)) {\n\t\t\tthis.model = model;\n\n\t\t\tthis.registerModelListeners(model);\n\t\t}\n\t}\n\n\tprivate registerModelListeners(model: ITextFileEditorModel): void {\n\n\t\t// Clear any old\n\t\tthis.modelListeners.clear();\n\n\t\t// re-emit some events from the model\n\t\tthis.modelListeners.add(model.onDidChangeDirty(() => this._onDidChangeDirty.fire()));\n\t\tthis.modelListeners.add(model.onDidChangeReadonly(() => this._onDidChangeCapabilities.fire()));\n\n\t\t// important: treat save errors as potential dirty change because\n\t\t// a file that is in save conflict or error will report dirty even\n\t\t// if auto save is turned on.\n\t\tthis.modelListeners.add(model.onDidSaveError(() => this._onDidChangeDirty.fire()));\n\n\t\t// remove model association once it gets disposed\n\t\tthis.modelListeners.add(Event.once(model.onWillDispose)(() => {\n\t\t\tthis.modelListeners.clear();\n\t\t\tthis.model = undefined;\n\t\t}));\n\t}\n\n\toverride getName(): string {\n\t\treturn this.preferredName || super.getName();\n\t}\n\n\tsetPreferredName(name: string): void {\n\t\tif (!this.allowLabelOverride()) {\n\t\t\treturn; // block for specific schemes we consider to be owning\n\t\t}\n\n\t\tif (this.preferredName !== name) {\n\t\t\tthis.preferredName = name;\n\n\t\t\tthis._onDidChangeLabel.fire();\n\t\t}\n\t}\n\n\tprivate allowLabelOverride(): boolean {\n\t\treturn this.resource.scheme !== this.pathService.defaultUriScheme &&\n\t\t\tthis.resource.scheme !== Schemas.vscodeUserData &&\n\t\t\tthis.resource.scheme !== Schemas.file &&\n\t\t\tthis.resource.scheme !== Schemas.vscodeRemote;\n\t}\n\n\tgetPreferredName(): string | undefined {\n\t\treturn this.preferredName;\n\t}\n\n\toverride isReadonly(): boolean | IMarkdownString {\n\t\treturn this.model ? this.model.isReadonly() : this.filesConfigurationService.isReadonly(this.resource);\n\t}\n\n\toverride getDescription(verbosity?: Verbosity): string | undefined {\n\t\treturn this.preferredDescription || super.getDescription(verbosity);\n\t}\n\n\tsetPreferredDescription(description: string): void {\n\t\tif (!this.allowLabelOverride()) {\n\t\t\treturn; // block for specific schemes we consider to be owning\n\t\t}\n\n\t\tif (this.preferredDescription !== description) {\n\t\t\tthis.preferredDescription = description;\n\n\t\t\tthis._onDidChangeLabel.fire();\n\t\t}\n\t}\n\n\tgetPreferredDescription(): string | undefined {\n\t\treturn this.preferredDescription;\n\t}\n\n\tgetEncoding(): string | undefined {\n\t\tif (this.model) {\n\t\t\treturn this.model.getEncoding();\n\t\t}\n\n\t\treturn this.preferredEncoding;\n\t}\n\n\tgetPreferredEncoding(): string | undefined {\n\t\treturn this.preferredEncoding;\n\t}\n\n\tasync setEncoding(encoding: string, mode: EncodingMode): Promise<void> {\n\t\tthis.setPreferredEncoding(encoding);\n\n\t\treturn this.model?.setEncoding(encoding, mode);\n\t}\n\n\tsetPreferredEncoding(encoding: string): void {\n\t\tthis.preferredEncoding = encoding;\n\n\t\t// encoding is a good hint to open the file as text\n\t\tthis.setForceOpenAsText();\n\t}\n\n\tgetLanguageId(): string | undefined {\n\t\tif (this.model) {\n\t\t\treturn this.model.getLanguageId();\n\t\t}\n\n\t\treturn this.preferredLanguageId;\n\t}\n\n\tgetPreferredLanguageId(): string | undefined {\n\t\treturn this.preferredLanguageId;\n\t}\n\n\tsetLanguageId(languageId: string, source?: string): void {\n\t\tthis.setPreferredLanguageId(languageId);\n\n\t\tthis.model?.setLanguageId(languageId, source);\n\t}\n\n\tsetPreferredLanguageId(languageId: string): void {\n\t\tthis.preferredLanguageId = languageId;\n\n\t\t// languages are a good hint to open the file as text\n\t\tthis.setForceOpenAsText();\n\t}\n\n\tsetPreferredContents(contents: string): void {\n\t\tthis.preferredContents = contents;\n\n\t\t// contents is a good hint to open the file as text\n\t\tthis.setForceOpenAsText();\n\t}\n\n\tsetForceOpenAsText(): void {\n\t\tthis.forceOpenAs = ForceOpenAs.Text;\n\t}\n\n\tsetForceOpenAsBinary(): void {\n\t\tthis.forceOpenAs = ForceOpenAs.Binary;\n\t}\n\n\toverride isDirty(): boolean {\n\t\treturn !!(this.model?.isDirty());\n\t}\n\n\toverride isSaving(): boolean {\n\t\tif (this.model?.hasState(TextFileEditorModelState.SAVED) || this.model?.hasState(TextFileEditorModelState.CONFLICT) || this.model?.hasState(TextFileEditorModelState.ERROR)) {\n\t\t\treturn false; // require the model to be dirty and not in conflict or error state\n\t\t}\n\n\t\t// Note: currently not checking for ModelState.PENDING_SAVE for a reason\n\t\t// because we currently miss an event for this state change on editors\n\t\t// and it could result in bad UX where an editor can be closed even though\n\t\t// it shows up as dirty and has not finished saving yet.\n\n\t\tif (this.filesConfigurationService.getAutoSaveMode() === AutoSaveMode.AFTER_SHORT_DELAY) {\n\t\t\treturn true; // a short auto save is configured, treat this as being saved\n\t\t}\n\n\t\treturn super.isSaving();\n\t}\n\n\toverride prefersEditorPane<T extends IEditorDescriptor<IEditorPane>>(editorPanes: T[]): T | undefined {\n\t\tif (this.forceOpenAs === ForceOpenAs.Binary) {\n\t\t\treturn editorPanes.find(editorPane => editorPane.typeId === BINARY_FILE_EDITOR_ID);\n\t\t}\n\n\t\treturn editorPanes.find(editorPane => editorPane.typeId === TEXT_FILE_EDITOR_ID);\n\t}\n\n\toverride resolve(options?: IFileEditorInputOptions): Promise<ITextFileEditorModel | BinaryEditorModel> {\n\n\t\t// Resolve as binary\n\t\tif (this.forceOpenAs === ForceOpenAs.Binary) {\n\t\t\treturn this.doResolveAsBinary();\n\t\t}\n\n\t\t// Resolve as text\n\t\treturn this.doResolveAsText(options);\n\t}\n\n\tprivate async doResolveAsText(options?: IFileEditorInputOptions): Promise<ITextFileEditorModel | BinaryEditorModel> {\n\t\ttry {\n\n\t\t\t// Unset preferred contents after having applied it once\n\t\t\t// to prevent this property to stick. We still want future\n\t\t\t// `resolve` calls to fetch the contents from disk.\n\t\t\tconst preferredContents = this.preferredContents;\n\t\t\tthis.preferredContents = undefined;\n\n\t\t\t// Resolve resource via text file service and only allow\n\t\t\t// to open binary files if we are instructed so\n\t\t\tawait this.textFileService.files.resolve(this.resource, {\n\t\t\t\tlanguageId: this.preferredLanguageId,\n\t\t\t\tencoding: this.preferredEncoding,\n\t\t\t\tcontents: typeof preferredContents === 'string' ? createTextBufferFactory(preferredContents) : undefined,\n\t\t\t\treload: { async: true }, // trigger a reload of the model if it exists already but do not wait to show the model\n\t\t\t\tallowBinary: this.forceOpenAs === ForceOpenAs.Text,\n\t\t\t\treason: TextFileResolveReason.EDITOR,\n\t\t\t\tlimits: this.ensureLimits(options)\n\t\t\t});\n\n\t\t\t// This is a bit ugly, because we first resolve the model and then resolve a model reference. the reason being that binary\n\t\t\t// or very large files do not resolve to a text file model but should be opened as binary files without text. First calling into\n\t\t\t// resolve() ensures we are not creating model references for these kind of resources.\n\t\t\t// In addition we have a bit of payload to take into account (encoding, reload) that the text resolver does not handle yet.\n\t\t\tif (!this.cachedTextFileModelReference) {\n\t\t\t\tthis.cachedTextFileModelReference = await this.textModelResolverService.createModelReference(this.resource) as IReference<ITextFileEditorModel>;\n\t\t\t}\n\n\t\t\tconst model = this.cachedTextFileModelReference.object;\n\n\t\t\t// It is possible that this input was disposed before the model\n\t\t\t// finished resolving. As such, we need to make sure to dispose\n\t\t\t// the model reference to not leak it.\n\t\t\tif (this.isDisposed()) {\n\t\t\t\tthis.disposeModelReference();\n\t\t\t}\n\n\t\t\treturn model;\n\t\t} catch (error) {\n\n\t\t\t// Handle binary files with binary model\n\t\t\tif ((<TextFileOperationError>error).textFileOperationResult === TextFileOperationResult.FILE_IS_BINARY) {\n\t\t\t\treturn this.doResolveAsBinary();\n\t\t\t}\n\n\t\t\t// Bubble any other error up\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate ensureLimits(options?: IFileEditorInputOptions): IFileReadLimits | undefined {\n\t\tif (options?.limits) {\n\t\t\treturn options.limits; // respect passed in limits if any\n\t\t}\n\n\t\t// We want to determine the large file configuration based on the best defaults\n\t\t// for the resource but also respecting user settings. We only apply user settings\n\t\t// if explicitly configured by the user. Otherwise we pick the best limit for the\n\t\t// resource scheme.\n\n\t\tconst defaultSizeLimit = getLargeFileConfirmationLimit(this.resource);\n\t\tlet configuredSizeLimit: number | undefined = undefined;\n\n\t\tconst configuredSizeLimitMb = this.textResourceConfigurationService.inspect<number>(this.resource, null, 'workbench.editorLargeFileConfirmation');\n\t\tif (isConfigured(configuredSizeLimitMb)) {\n\t\t\tconfiguredSizeLimit = configuredSizeLimitMb.value * ByteSize.MB; // normalize to MB\n\t\t}\n\n\t\treturn {\n\t\t\tsize: configuredSizeLimit ?? defaultSizeLimit\n\t\t};\n\t}\n\n\tprivate async doResolveAsBinary(): Promise<BinaryEditorModel> {\n\t\tconst model = this.instantiationService.createInstance(BinaryEditorModel, this.preferredResource, this.getName());\n\t\tawait model.resolve();\n\n\t\treturn model;\n\t}\n\n\tisResolved(): boolean {\n\t\treturn !!this.model;\n\t}\n\n\toverride async rename(group: GroupIdentifier, target: URI): Promise<IMoveResult> {\n\t\treturn {\n\t\t\teditor: {\n\t\t\t\tresource: target,\n\t\t\t\tencoding: this.getEncoding(),\n\t\t\t\toptions: {\n\t\t\t\t\tviewState: findViewStateForEditor(this, group, this.editorService)\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\toverride toUntyped(options?: { preserveViewState: GroupIdentifier }): ITextResourceEditorInput {\n\t\tconst untypedInput: IUntypedFileEditorInput = {\n\t\t\tresource: this.preferredResource,\n\t\t\tforceFile: true,\n\t\t\toptions: {\n\t\t\t\toverride: this.editorId\n\t\t\t}\n\t\t};\n\n\t\tif (typeof options?.preserveViewState === 'number') {\n\t\t\tuntypedInput.encoding = this.getEncoding();\n\t\t\tuntypedInput.languageId = this.getLanguageId();\n\t\t\tuntypedInput.contents = (() => {\n\t\t\t\tconst model = this.textFileService.files.get(this.resource);\n\t\t\t\tif (model?.isDirty() && !model.textEditorModel.isTooLargeForHeapOperation()) {\n\t\t\t\t\treturn model.textEditorModel.getValue(); // only if dirty and not too large\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t})();\n\n\t\t\tuntypedInput.options = {\n\t\t\t\t...untypedInput.options,\n\t\t\t\tviewState: findViewStateForEditor(this, options.preserveViewState, this.editorService)\n\t\t\t};\n\t\t}\n\n\t\treturn untypedInput;\n\t}\n\n\toverride matches(otherInput: EditorInput | IUntypedEditorInput): boolean {\n\t\tif (this === otherInput) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (otherInput instanceof FileEditorInput) {\n\t\t\treturn isEqual(otherInput.resource, this.resource);\n\t\t}\n\n\t\tif (isResourceEditorInput(otherInput)) {\n\t\t\treturn super.matches(otherInput);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\toverride dispose(): void {\n\n\t\t// Model\n\t\tthis.model = undefined;\n\n\t\t// Model reference\n\t\tthis.disposeModelReference();\n\n\t\tsuper.dispose();\n\t}\n\n\tprivate disposeModelReference(): void {\n\t\tdispose(this.cachedTextFileModelReference);\n\t\tthis.cachedTextFileModelReference = undefined;\n\t}\n}\n"]}