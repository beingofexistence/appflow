{"version":3,"sources":["vs/workbench/contrib/files/browser/editors/binaryFileEditor.ts"],"names":[],"mappings":"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","file":"binaryFileEditor.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { BaseBinaryResourceEditor } from 'vs/workbench/browser/parts/editor/binaryEditor';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { FileEditorInput } from 'vs/workbench/contrib/files/browser/editors/fileEditorInput';\nimport { BINARY_FILE_EDITOR_ID, BINARY_TEXT_FILE_MODE } from 'vs/workbench/contrib/files/common/files';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { EditorResolution, IEditorOptions } from 'vs/platform/editor/common/editor';\nimport { IEditorResolverService, ResolvedStatus, ResolvedEditor } from 'vs/workbench/services/editor/common/editorResolverService';\nimport { isEditorInputWithOptions } from 'vs/workbench/common/editor';\nimport { DiffEditorInput } from 'vs/workbench/common/editor/diffEditorInput';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\n\n/**\n * An implementation of editor for binary files that cannot be displayed.\n */\nexport class BinaryFileEditor extends BaseBinaryResourceEditor {\n\n\tstatic readonly ID = BINARY_FILE_EDITOR_ID;\n\n\tconstructor(\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IEditorResolverService private readonly editorResolverService: IEditorResolverService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService\n\t) {\n\t\tsuper(\n\t\t\tBinaryFileEditor.ID,\n\t\t\t{\n\t\t\t\topenInternal: (input, options) => this.openInternal(input, options)\n\t\t\t},\n\t\t\ttelemetryService,\n\t\t\tthemeService,\n\t\t\tstorageService\n\t\t);\n\t}\n\n\tprivate async openInternal(input: EditorInput, options: IEditorOptions | undefined): Promise<void> {\n\t\tif (input instanceof FileEditorInput && this.group?.activeEditor) {\n\n\t\t\t// We operate on the active editor here to support re-opening\n\t\t\t// diff editors where `input` may just be one side of the\n\t\t\t// diff editor.\n\t\t\t// Since `openInternal` can only ever be selected from the\n\t\t\t// active editor of the group, this is a safe assumption.\n\t\t\t// (https://github.com/microsoft/vscode/issues/124222)\n\t\t\tconst activeEditor = this.group.activeEditor;\n\t\t\tconst untypedActiveEditor = activeEditor?.toUntyped();\n\t\t\tif (!untypedActiveEditor) {\n\t\t\t\treturn; // we need untyped editor support\n\t\t\t}\n\n\t\t\t// Try to let the user pick an editor\n\t\t\tlet resolvedEditor: ResolvedEditor | undefined = await this.editorResolverService.resolveEditor({\n\t\t\t\t...untypedActiveEditor,\n\t\t\t\toptions: {\n\t\t\t\t\t...options,\n\t\t\t\t\toverride: EditorResolution.PICK\n\t\t\t\t}\n\t\t\t}, this.group);\n\n\t\t\tif (resolvedEditor === ResolvedStatus.NONE) {\n\t\t\t\tresolvedEditor = undefined;\n\t\t\t} else if (resolvedEditor === ResolvedStatus.ABORT) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If the result if a file editor, the user indicated to open\n\t\t\t// the binary file as text. As such we adjust the input for that.\n\t\t\tif (isEditorInputWithOptions(resolvedEditor)) {\n\t\t\t\tfor (const editor of resolvedEditor.editor instanceof DiffEditorInput ? [resolvedEditor.editor.original, resolvedEditor.editor.modified] : [resolvedEditor.editor]) {\n\t\t\t\t\tif (editor instanceof FileEditorInput) {\n\t\t\t\t\t\teditor.setForceOpenAsText();\n\t\t\t\t\t\teditor.setPreferredLanguageId(BINARY_TEXT_FILE_MODE); // https://github.com/microsoft/vscode/issues/131076\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Replace the active editor with the picked one\n\t\t\tawait (this.group ?? this.editorGroupService.activeGroup).replaceEditors([{\n\t\t\t\teditor: activeEditor,\n\t\t\t\treplacement: resolvedEditor?.editor ?? input,\n\t\t\t\toptions: {\n\t\t\t\t\t...resolvedEditor?.options ?? options\n\t\t\t\t}\n\t\t\t}]);\n\t\t}\n\t}\n\n\toverride getTitle(): string {\n\t\treturn this.input ? this.input.getName() : localize('binaryFileEditor', \"Binary File Viewer\");\n\t}\n}\n"]}