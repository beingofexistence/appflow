{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/contrib/files/browser/editors/textFileEditorTracker.ts"],"names":[],"mappings":"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","file":"textFileEditorTracker.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { URI } from 'vs/base/common/uri';\nimport { ITextFileService, TextFileEditorModelState } from 'vs/workbench/services/textfile/common/textfiles';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { distinct, coalesce } from 'vs/base/common/arrays';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { RunOnceWorker } from 'vs/base/common/async';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { IFilesConfigurationService, AutoSaveMode } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\nimport { FILE_EDITOR_INPUT_ID } from 'vs/workbench/contrib/files/common/files';\nimport { Schemas } from 'vs/base/common/network';\nimport { UntitledTextEditorInput } from 'vs/workbench/services/untitled/common/untitledTextEditorInput';\nimport { IWorkingCopyEditorService } from 'vs/workbench/services/workingCopy/common/workingCopyEditorService';\nimport { DEFAULT_EDITOR_ASSOCIATION } from 'vs/workbench/common/editor';\n\nexport class TextFileEditorTracker extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@IFilesConfigurationService private readonly filesConfigurationService: IFilesConfigurationService,\n\t\t@IWorkingCopyEditorService private readonly workingCopyEditorService: IWorkingCopyEditorService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Ensure dirty text file and untitled models are always opened as editors\n\t\tthis._register(this.textFileService.files.onDidChangeDirty(model => this.ensureDirtyFilesAreOpenedWorker.work(model.resource)));\n\t\tthis._register(this.textFileService.files.onDidSaveError(model => this.ensureDirtyFilesAreOpenedWorker.work(model.resource)));\n\t\tthis._register(this.textFileService.untitled.onDidChangeDirty(model => this.ensureDirtyFilesAreOpenedWorker.work(model.resource)));\n\n\t\t// Update visible text file editors when focus is gained\n\t\tthis._register(this.hostService.onDidChangeFocus(hasFocus => hasFocus ? this.reloadVisibleTextFileEditors() : undefined));\n\n\t\t// Lifecycle\n\t\tthis._register(this.lifecycleService.onDidShutdown(() => this.dispose()));\n\t}\n\n\t//#region Text File: Ensure every dirty text and untitled file is opened in an editor\n\n\tprivate readonly ensureDirtyFilesAreOpenedWorker = this._register(new RunOnceWorker<URI>(units => this.ensureDirtyTextFilesAreOpened(units), this.getDirtyTextFileTrackerDelay()));\n\n\tprotected getDirtyTextFileTrackerDelay(): number {\n\t\treturn 800; // encapsulated in a method for tests to override\n\t}\n\n\tprivate ensureDirtyTextFilesAreOpened(resources: URI[]): void {\n\t\tthis.doEnsureDirtyTextFilesAreOpened(distinct(resources.filter(resource => {\n\t\t\tif (!this.textFileService.isDirty(resource)) {\n\t\t\t\treturn false; // resource must be dirty\n\t\t\t}\n\n\t\t\tconst fileModel = this.textFileService.files.get(resource);\n\t\t\tif (fileModel?.hasState(TextFileEditorModelState.PENDING_SAVE)) {\n\t\t\t\treturn false; // resource must not be pending to save\n\t\t\t}\n\n\t\t\tif (resource.scheme !== Schemas.untitled && this.filesConfigurationService.getAutoSaveMode() === AutoSaveMode.AFTER_SHORT_DELAY && !fileModel?.hasState(TextFileEditorModelState.ERROR)) {\n\t\t\t\t// leave models auto saved after short delay unless\n\t\t\t\t// the save resulted in an error and not for untitled\n\t\t\t\t// that are not auto-saved anyway\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tif (this.editorService.isOpened({ resource, typeId: resource.scheme === Schemas.untitled ? UntitledTextEditorInput.ID : FILE_EDITOR_INPUT_ID, editorId: DEFAULT_EDITOR_ASSOCIATION.id })) {\n\t\t\t\treturn false; // model must not be opened already as file (fast check via editor type)\n\t\t\t}\n\n\t\t\tconst model = fileModel ?? this.textFileService.untitled.get(resource);\n\t\t\tif (model && this.workingCopyEditorService.findEditor(model)) {\n\t\t\t\treturn false; // model must not be opened already as file (slower check via working copy)\n\t\t\t}\n\n\t\t\treturn true;\n\t\t}), resource => resource.toString()));\n\t}\n\n\tprivate doEnsureDirtyTextFilesAreOpened(resources: URI[]): void {\n\t\tif (!resources.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.editorService.openEditors(resources.map(resource => ({\n\t\t\tresource,\n\t\t\toptions: { inactive: true, pinned: true, preserveFocus: true }\n\t\t})));\n\t}\n\n\t//#endregion\n\n\t//#region Window Focus Change: Update visible code editors when focus is gained that have a known text file model\n\n\tprivate reloadVisibleTextFileEditors(): void {\n\t\t// the window got focus and we use this as a hint that files might have been changed outside\n\t\t// of this window. since file events can be unreliable, we queue a load for models that\n\t\t// are visible in any editor. since this is a fast operation in the case nothing has changed,\n\t\t// we tolerate the additional work.\n\t\tdistinct(\n\t\t\tcoalesce(this.codeEditorService.listCodeEditors()\n\t\t\t\t.map(codeEditor => {\n\t\t\t\t\tconst resource = codeEditor.getModel()?.uri;\n\t\t\t\t\tif (!resource) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst model = this.textFileService.files.get(resource);\n\t\t\t\t\tif (!model || model.isDirty() || !model.isResolved()) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn model;\n\t\t\t\t})),\n\t\t\tmodel => model.resource.toString()\n\t\t).forEach(model => this.textFileService.files.resolve(model.resource, { reload: { async: true } }));\n\t}\n\n\t//#endregion\n}\n"]}