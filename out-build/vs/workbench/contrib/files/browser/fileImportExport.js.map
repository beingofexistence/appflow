{"version":3,"sources":["vs/workbench/contrib/files/browser/fileImportExport.ts"],"names":[],"mappings":"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","file":"fileImportExport.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { getFileNamesMessage, IConfirmation, IDialogService, IFileDialogService, IPromptButton } from 'vs/platform/dialogs/common/dialogs';\nimport { ByteSize, FileSystemProviderCapabilities, IFileService, IFileStatWithMetadata } from 'vs/platform/files/common/files';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { IProgress, IProgressService, IProgressStep, ProgressLocation } from 'vs/platform/progress/common/progress';\nimport { IExplorerService } from 'vs/workbench/contrib/files/browser/files';\nimport { IFilesConfiguration, UndoConfirmLevel, VIEW_ID } from 'vs/workbench/contrib/files/common/files';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { Limiter, Promises, RunOnceWorker } from 'vs/base/common/async';\nimport { newWriteableBufferStream, VSBuffer } from 'vs/base/common/buffer';\nimport { basename, dirname, joinPath } from 'vs/base/common/resources';\nimport { ResourceFileEdit } from 'vs/editor/browser/services/bulkEditService';\nimport { ExplorerItem } from 'vs/workbench/contrib/files/common/explorerModel';\nimport { URI } from 'vs/base/common/uri';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { extractEditorsAndFilesDropData } from 'vs/platform/dnd/browser/dnd';\nimport { IWorkspaceEditingService } from 'vs/workbench/services/workspaces/common/workspaceEditing';\nimport { isWeb } from 'vs/base/common/platform';\nimport { triggerDownload } from 'vs/base/browser/dom';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { FileAccess, Schemas } from 'vs/base/common/network';\nimport { mnemonicButtonLabel } from 'vs/base/common/labels';\nimport { listenStream } from 'vs/base/common/stream';\nimport { DisposableStore, toDisposable } from 'vs/base/common/lifecycle';\nimport { once } from 'vs/base/common/functional';\nimport { coalesce } from 'vs/base/common/arrays';\nimport { canceled } from 'vs/base/common/errors';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { WebFileSystemAccess } from 'vs/platform/files/browser/webFileSystemAccess';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\n\n//#region Browser File Upload (drag and drop, input element)\n\ninterface IBrowserUploadOperation {\n\tstartTime: number;\n\tprogressScheduler: RunOnceWorker<IProgressStep>;\n\n\tfilesTotal: number;\n\tfilesUploaded: number;\n\n\ttotalBytesUploaded: number;\n}\n\ninterface IWebkitDataTransfer {\n\titems: IWebkitDataTransferItem[];\n}\n\ninterface IWebkitDataTransferItem {\n\twebkitGetAsEntry(): IWebkitDataTransferItemEntry;\n}\n\ninterface IWebkitDataTransferItemEntry {\n\tname: string | undefined;\n\tisFile: boolean;\n\tisDirectory: boolean;\n\n\tfile(resolve: (file: File) => void, reject: () => void): void;\n\tcreateReader(): IWebkitDataTransferItemEntryReader;\n}\n\ninterface IWebkitDataTransferItemEntryReader {\n\treadEntries(resolve: (file: IWebkitDataTransferItemEntry[]) => void, reject: () => void): void;\n}\n\nexport class BrowserFileUpload {\n\n\tprivate static readonly MAX_PARALLEL_UPLOADS = 20;\n\n\tconstructor(\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IExplorerService private readonly explorerService: IExplorerService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IFileService private readonly fileService: IFileService\n\t) {\n\t}\n\n\tupload(target: ExplorerItem, source: DragEvent | FileList): Promise<void> {\n\t\tconst cts = new CancellationTokenSource();\n\n\t\t// Indicate progress globally\n\t\tconst uploadPromise = this.progressService.withProgress(\n\t\t\t{\n\t\t\t\tlocation: ProgressLocation.Window,\n\t\t\t\tdelay: 800,\n\t\t\t\tcancellable: true,\n\t\t\t\ttitle: localize('uploadingFiles', \"Uploading\")\n\t\t\t},\n\t\t\tasync progress => this.doUpload(target, this.toTransfer(source), progress, cts.token),\n\t\t\t() => cts.dispose(true)\n\t\t);\n\n\t\t// Also indicate progress in the files view\n\t\tthis.progressService.withProgress({ location: VIEW_ID, delay: 500 }, () => uploadPromise);\n\n\t\treturn uploadPromise;\n\t}\n\n\tprivate toTransfer(source: DragEvent | FileList): IWebkitDataTransfer {\n\t\tif (source instanceof DragEvent) {\n\t\t\treturn source.dataTransfer as unknown as IWebkitDataTransfer;\n\t\t}\n\n\t\tconst transfer: IWebkitDataTransfer = { items: [] };\n\n\t\t// We want to reuse the same code for uploading from\n\t\t// Drag & Drop as well as input element based upload\n\t\t// so we convert into webkit data transfer when the\n\t\t// input element approach is used (simplified).\n\t\tfor (const file of source) {\n\t\t\ttransfer.items.push({\n\t\t\t\twebkitGetAsEntry: () => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tname: file.name,\n\t\t\t\t\t\tisDirectory: false,\n\t\t\t\t\t\tisFile: true,\n\t\t\t\t\t\tcreateReader: () => { throw new Error('Unsupported for files'); },\n\t\t\t\t\t\tfile: resolve => resolve(file)\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn transfer;\n\t}\n\n\tprivate async doUpload(target: ExplorerItem, source: IWebkitDataTransfer, progress: IProgress<IProgressStep>, token: CancellationToken): Promise<void> {\n\t\tconst items = source.items;\n\n\t\t// Somehow the items thing is being modified at random, maybe as a security\n\t\t// measure since this is a DND operation. As such, we copy the items into\n\t\t// an array we own as early as possible before using it.\n\t\tconst entries: IWebkitDataTransferItemEntry[] = [];\n\t\tfor (const item of items) {\n\t\t\tentries.push(item.webkitGetAsEntry());\n\t\t}\n\n\t\tconst results: { isFile: boolean; resource: URI }[] = [];\n\t\tconst operation: IBrowserUploadOperation = {\n\t\t\tstartTime: Date.now(),\n\t\t\tprogressScheduler: new RunOnceWorker<IProgressStep>(steps => { progress.report(steps[steps.length - 1]); }, 1000),\n\n\t\t\tfilesTotal: entries.length,\n\t\t\tfilesUploaded: 0,\n\n\t\t\ttotalBytesUploaded: 0\n\t\t};\n\n\t\t// Upload all entries in parallel up to a\n\t\t// certain maximum leveraging the `Limiter`\n\t\tconst uploadLimiter = new Limiter(BrowserFileUpload.MAX_PARALLEL_UPLOADS);\n\t\tawait Promises.settled(entries.map(entry => {\n\t\t\treturn uploadLimiter.queue(async () => {\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Confirm overwrite as needed\n\t\t\t\tif (target && entry.name && target.getChild(entry.name)) {\n\t\t\t\t\tconst { confirmed } = await this.dialogService.confirm(getFileOverwriteConfirm(entry.name));\n\t\t\t\t\tif (!confirmed) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tawait this.explorerService.applyBulkEdit([new ResourceFileEdit(joinPath(target.resource, entry.name), undefined, { recursive: true, folder: target.getChild(entry.name)?.isDirectory })], {\n\t\t\t\t\t\tundoLabel: localize('overwrite', \"Overwrite {0}\", entry.name),\n\t\t\t\t\t\tprogressLabel: localize('overwriting', \"Overwriting {0}\", entry.name),\n\t\t\t\t\t});\n\n\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Upload entry\n\t\t\t\tconst result = await this.doUploadEntry(entry, target.resource, target, progress, operation, token);\n\t\t\t\tif (result) {\n\t\t\t\t\tresults.push(result);\n\t\t\t\t}\n\t\t\t});\n\t\t}));\n\n\t\toperation.progressScheduler.dispose();\n\n\t\t// Open uploaded file in editor only if we upload just one\n\t\tconst firstUploadedFile = results[0];\n\t\tif (!token.isCancellationRequested && firstUploadedFile?.isFile) {\n\t\t\tawait this.editorService.openEditor({ resource: firstUploadedFile.resource, options: { pinned: true } });\n\t\t}\n\t}\n\n\tprivate async doUploadEntry(entry: IWebkitDataTransferItemEntry, parentResource: URI, target: ExplorerItem | undefined, progress: IProgress<IProgressStep>, operation: IBrowserUploadOperation, token: CancellationToken): Promise<{ isFile: boolean; resource: URI } | undefined> {\n\t\tif (token.isCancellationRequested || !entry.name || (!entry.isFile && !entry.isDirectory)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Report progress\n\t\tlet fileBytesUploaded = 0;\n\t\tconst reportProgress = (fileSize: number, bytesUploaded: number): void => {\n\t\t\tfileBytesUploaded += bytesUploaded;\n\t\t\toperation.totalBytesUploaded += bytesUploaded;\n\n\t\t\tconst bytesUploadedPerSecond = operation.totalBytesUploaded / ((Date.now() - operation.startTime) / 1000);\n\n\t\t\t// Small file\n\t\t\tlet message: string;\n\t\t\tif (fileSize < ByteSize.MB) {\n\t\t\t\tif (operation.filesTotal === 1) {\n\t\t\t\t\tmessage = `${entry.name}`;\n\t\t\t\t} else {\n\t\t\t\t\tmessage = localize('uploadProgressSmallMany', \"{0} of {1} files ({2}/s)\", operation.filesUploaded, operation.filesTotal, ByteSize.formatSize(bytesUploadedPerSecond));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Large file\n\t\t\telse {\n\t\t\t\tmessage = localize('uploadProgressLarge', \"{0} ({1} of {2}, {3}/s)\", entry.name, ByteSize.formatSize(fileBytesUploaded), ByteSize.formatSize(fileSize), ByteSize.formatSize(bytesUploadedPerSecond));\n\t\t\t}\n\n\t\t\t// Report progress but limit to update only once per second\n\t\t\toperation.progressScheduler.work({ message });\n\t\t};\n\t\toperation.filesUploaded++;\n\t\treportProgress(0, 0);\n\n\t\t// Handle file upload\n\t\tconst resource = joinPath(parentResource, entry.name);\n\t\tif (entry.isFile) {\n\t\t\tconst file = await new Promise<File>((resolve, reject) => entry.file(resolve, reject));\n\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t// Chrome/Edge/Firefox support stream method, but only use it for\n\t\t\t// larger files to reduce the overhead of the streaming approach\n\t\t\tif (typeof file.stream === 'function' && file.size > ByteSize.MB) {\n\t\t\t\tawait this.doUploadFileBuffered(resource, file, reportProgress, token);\n\t\t\t}\n\n\t\t\t// Fallback to unbuffered upload for other browsers or small files\n\t\t\telse {\n\t\t\t\tawait this.doUploadFileUnbuffered(resource, file, reportProgress);\n\t\t\t}\n\n\t\t\treturn { isFile: true, resource };\n\t\t}\n\n\t\t// Handle folder upload\n\t\telse {\n\n\t\t\t// Create target folder\n\t\t\tawait this.fileService.createFolder(resource);\n\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t// Recursive upload files in this directory\n\t\t\tconst dirReader = entry.createReader();\n\t\t\tconst childEntries: IWebkitDataTransferItemEntry[] = [];\n\t\t\tlet done = false;\n\t\t\tdo {\n\t\t\t\tconst childEntriesChunk = await new Promise<IWebkitDataTransferItemEntry[]>((resolve, reject) => dirReader.readEntries(resolve, reject));\n\t\t\t\tif (childEntriesChunk.length > 0) {\n\t\t\t\t\tchildEntries.push(...childEntriesChunk);\n\t\t\t\t} else {\n\t\t\t\t\tdone = true; // an empty array is a signal that all entries have been read\n\t\t\t\t}\n\t\t\t} while (!done && !token.isCancellationRequested);\n\n\t\t\t// Update operation total based on new counts\n\t\t\toperation.filesTotal += childEntries.length;\n\n\t\t\t// Split up files from folders to upload\n\t\t\tconst folderTarget = target && target.getChild(entry.name) || undefined;\n\t\t\tconst fileChildEntries: IWebkitDataTransferItemEntry[] = [];\n\t\t\tconst folderChildEntries: IWebkitDataTransferItemEntry[] = [];\n\t\t\tfor (const childEntry of childEntries) {\n\t\t\t\tif (childEntry.isFile) {\n\t\t\t\t\tfileChildEntries.push(childEntry);\n\t\t\t\t} else if (childEntry.isDirectory) {\n\t\t\t\t\tfolderChildEntries.push(childEntry);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Upload files (up to `MAX_PARALLEL_UPLOADS` in parallel)\n\t\t\tconst fileUploadQueue = new Limiter(BrowserFileUpload.MAX_PARALLEL_UPLOADS);\n\t\t\tawait Promises.settled(fileChildEntries.map(fileChildEntry => {\n\t\t\t\treturn fileUploadQueue.queue(() => this.doUploadEntry(fileChildEntry, resource, folderTarget, progress, operation, token));\n\t\t\t}));\n\n\t\t\t// Upload folders (sequentially give we don't know their sizes)\n\t\t\tfor (const folderChildEntry of folderChildEntries) {\n\t\t\t\tawait this.doUploadEntry(folderChildEntry, resource, folderTarget, progress, operation, token);\n\t\t\t}\n\n\t\t\treturn { isFile: false, resource };\n\t\t}\n\t}\n\n\tprivate async doUploadFileBuffered(resource: URI, file: File, progressReporter: (fileSize: number, bytesUploaded: number) => void, token: CancellationToken): Promise<void> {\n\t\tconst writeableStream = newWriteableBufferStream({\n\t\t\t// Set a highWaterMark to prevent the stream\n\t\t\t// for file upload to produce large buffers\n\t\t\t// in-memory\n\t\t\thighWaterMark: 10\n\t\t});\n\t\tconst writeFilePromise = this.fileService.writeFile(resource, writeableStream);\n\n\t\t// Read the file in chunks using File.stream() web APIs\n\t\ttry {\n\t\t\tconst reader: ReadableStreamDefaultReader<Uint8Array> = file.stream().getReader();\n\n\t\t\tlet res = await reader.read();\n\t\t\twhile (!res.done) {\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Write buffer into stream but make sure to wait\n\t\t\t\t// in case the `highWaterMark` is reached\n\t\t\t\tconst buffer = VSBuffer.wrap(res.value);\n\t\t\t\tawait writeableStream.write(buffer);\n\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t// Report progress\n\t\t\t\tprogressReporter(file.size, buffer.byteLength);\n\n\t\t\t\tres = await reader.read();\n\t\t\t}\n\t\t\twriteableStream.end(undefined);\n\t\t} catch (error) {\n\t\t\twriteableStream.error(error);\n\t\t\twriteableStream.end();\n\t\t}\n\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Wait for file being written to target\n\t\tawait writeFilePromise;\n\t}\n\n\tprivate doUploadFileUnbuffered(resource: URI, file: File, progressReporter: (fileSize: number, bytesUploaded: number) => void): Promise<void> {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tconst reader = new FileReader();\n\t\t\treader.onload = async event => {\n\t\t\t\ttry {\n\t\t\t\t\tif (event.target?.result instanceof ArrayBuffer) {\n\t\t\t\t\t\tconst buffer = VSBuffer.wrap(new Uint8Array(event.target.result));\n\t\t\t\t\t\tawait this.fileService.writeFile(resource, buffer);\n\n\t\t\t\t\t\t// Report progress\n\t\t\t\t\t\tprogressReporter(file.size, buffer.byteLength);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error('Could not read from dropped file.');\n\t\t\t\t\t}\n\n\t\t\t\t\tresolve();\n\t\t\t\t} catch (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Start reading the file to trigger `onload`\n\t\t\treader.readAsArrayBuffer(file);\n\t\t});\n\t}\n}\n\n//#endregion\n\n//#region External File Import (drag and drop)\n\nexport class ExternalFileImport {\n\n\tconstructor(\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IWorkspaceEditingService private readonly workspaceEditingService: IWorkspaceEditingService,\n\t\t@IExplorerService private readonly explorerService: IExplorerService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) {\n\t}\n\n\tasync import(target: ExplorerItem, source: DragEvent): Promise<void> {\n\t\tconst cts = new CancellationTokenSource();\n\n\t\t// Indicate progress globally\n\t\tconst importPromise = this.progressService.withProgress(\n\t\t\t{\n\t\t\t\tlocation: ProgressLocation.Window,\n\t\t\t\tdelay: 800,\n\t\t\t\tcancellable: true,\n\t\t\t\ttitle: localize('copyingFiles', \"Copying...\")\n\t\t\t},\n\t\t\tasync () => await this.doImport(target, source, cts.token),\n\t\t\t() => cts.dispose(true)\n\t\t);\n\n\t\t// Also indicate progress in the files view\n\t\tthis.progressService.withProgress({ location: VIEW_ID, delay: 500 }, () => importPromise);\n\n\t\treturn importPromise;\n\t}\n\n\tprivate async doImport(target: ExplorerItem, source: DragEvent, token: CancellationToken): Promise<void> {\n\n\t\t// Activate all providers for the resources dropped\n\t\tconst candidateFiles = coalesce((await this.instantiationService.invokeFunction(accessor => extractEditorsAndFilesDropData(accessor, source))).map(editor => editor.resource));\n\t\tawait Promise.all(candidateFiles.map(resource => this.fileService.activateProvider(resource.scheme)));\n\n\t\t// Check for dropped external files to be folders\n\t\tconst files = coalesce(candidateFiles.filter(resource => this.fileService.hasProvider(resource)));\n\t\tconst resolvedFiles = await this.fileService.resolveAll(files.map(file => ({ resource: file })));\n\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Pass focus to window\n\t\tthis.hostService.focus();\n\n\t\t// Handle folders by adding to workspace if we are in workspace context and if dropped on top\n\t\tconst folders = resolvedFiles.filter(resolvedFile => resolvedFile.success && resolvedFile.stat?.isDirectory).map(resolvedFile => ({ uri: resolvedFile.stat!.resource }));\n\t\tif (folders.length > 0 && target.isRoot) {\n\t\t\tenum ImportChoice {\n\t\t\t\tCopy = 1,\n\t\t\t\tAdd = 2\n\t\t\t}\n\n\t\t\tconst buttons: IPromptButton<ImportChoice | undefined>[] = [\n\t\t\t\t{\n\t\t\t\t\tlabel: folders.length > 1 ?\n\t\t\t\t\t\tlocalize('copyFolders', \"&&Copy Folders\") :\n\t\t\t\t\t\tlocalize('copyFolder', \"&&Copy Folder\"),\n\t\t\t\t\trun: () => ImportChoice.Copy\n\t\t\t\t}\n\t\t\t];\n\n\t\t\tlet message: string;\n\n\t\t\t// We only allow to add a folder to the workspace if there is already a workspace folder with that scheme\n\t\t\tconst workspaceFolderSchemas = this.contextService.getWorkspace().folders.map(folder => folder.uri.scheme);\n\t\t\tif (folders.some(folder => workspaceFolderSchemas.indexOf(folder.uri.scheme) >= 0)) {\n\t\t\t\tbuttons.unshift({\n\t\t\t\t\tlabel: folders.length > 1 ?\n\t\t\t\t\t\tlocalize('addFolders', \"&&Add Folders to Workspace\") :\n\t\t\t\t\t\tlocalize('addFolder', \"&&Add Folder to Workspace\"),\n\t\t\t\t\trun: () => ImportChoice.Add\n\t\t\t\t});\n\t\t\t\tmessage = folders.length > 1 ?\n\t\t\t\t\tlocalize('dropFolders', \"Do you want to copy the folders or add the folders to the workspace?\") :\n\t\t\t\t\tlocalize('dropFolder', \"Do you want to copy '{0}' or add '{0}' as a folder to the workspace?\", basename(folders[0].uri));\n\t\t\t} else {\n\t\t\t\tmessage = folders.length > 1 ?\n\t\t\t\t\tlocalize('copyfolders', \"Are you sure to want to copy folders?\") :\n\t\t\t\t\tlocalize('copyfolder', \"Are you sure to want to copy '{0}'?\", basename(folders[0].uri));\n\t\t\t}\n\n\t\t\tconst { result } = await this.dialogService.prompt({\n\t\t\t\ttype: Severity.Info,\n\t\t\t\tmessage,\n\t\t\t\tbuttons,\n\t\t\t\tcancelButton: true\n\t\t\t});\n\n\t\t\t// Add folders\n\t\t\tif (result === ImportChoice.Add) {\n\t\t\t\treturn this.workspaceEditingService.addFolders(folders);\n\t\t\t}\n\n\t\t\t// Copy resources\n\t\t\tif (result === ImportChoice.Copy) {\n\t\t\t\treturn this.importResources(target, files, token);\n\t\t\t}\n\t\t}\n\n\t\t// Handle dropped files (only support FileStat as target)\n\t\telse if (target instanceof ExplorerItem) {\n\t\t\treturn this.importResources(target, files, token);\n\t\t}\n\t}\n\n\tprivate async importResources(target: ExplorerItem, resources: URI[], token: CancellationToken): Promise<void> {\n\t\tif (resources && resources.length > 0) {\n\n\t\t\t// Resolve target to check for name collisions and ask user\n\t\t\tconst targetStat = await this.fileService.resolve(target.resource);\n\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Check for name collisions\n\t\t\tconst targetNames = new Set<string>();\n\t\t\tconst caseSensitive = this.fileService.hasCapability(target.resource, FileSystemProviderCapabilities.PathCaseSensitive);\n\t\t\tif (targetStat.children) {\n\t\t\t\ttargetStat.children.forEach(child => {\n\t\t\t\t\ttargetNames.add(caseSensitive ? child.name : child.name.toLowerCase());\n\t\t\t\t});\n\t\t\t}\n\n\n\t\t\tlet inaccessibleFileCount = 0;\n\t\t\tconst resourcesFiltered = coalesce((await Promises.settled(resources.map(async resource => {\n\t\t\t\tconst fileDoesNotExist = !(await this.fileService.exists(resource));\n\t\t\t\tif (fileDoesNotExist) {\n\t\t\t\t\tinaccessibleFileCount++;\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\tif (targetNames.has(caseSensitive ? basename(resource) : basename(resource).toLowerCase())) {\n\t\t\t\t\tconst confirmationResult = await this.dialogService.confirm(getFileOverwriteConfirm(basename(resource)));\n\t\t\t\t\tif (!confirmationResult.confirmed) {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn resource;\n\t\t\t}))));\n\n\t\t\tif (inaccessibleFileCount > 0) {\n\t\t\t\tthis.notificationService.error(inaccessibleFileCount > 1 ? localize('filesInaccessible', \"Some or all of the dropped files could not be accessed for import.\") : localize('fileInaccessible', \"The dropped file could not be accessed for import.\"));\n\t\t\t}\n\n\t\t\t// Copy resources through bulk edit API\n\t\t\tconst resourceFileEdits = resourcesFiltered.map(resource => {\n\t\t\t\tconst sourceFileName = basename(resource);\n\t\t\t\tconst targetFile = joinPath(target.resource, sourceFileName);\n\n\t\t\t\treturn new ResourceFileEdit(resource, targetFile, { overwrite: true, copy: true });\n\t\t\t});\n\n\t\t\tconst undoLevel = this.configurationService.getValue<IFilesConfiguration>().explorer.confirmUndo;\n\t\t\tawait this.explorerService.applyBulkEdit(resourceFileEdits, {\n\t\t\t\tundoLabel: resourcesFiltered.length === 1 ?\n\t\t\t\t\tlocalize({ comment: ['substitution will be the name of the file that was imported'], key: 'importFile' }, \"Import {0}\", basename(resourcesFiltered[0])) :\n\t\t\t\t\tlocalize({ comment: ['substitution will be the number of files that were imported'], key: 'importnFile' }, \"Import {0} resources\", resourcesFiltered.length),\n\t\t\t\tprogressLabel: resourcesFiltered.length === 1 ?\n\t\t\t\t\tlocalize({ comment: ['substitution will be the name of the file that was copied'], key: 'copyingFile' }, \"Copying {0}\", basename(resourcesFiltered[0])) :\n\t\t\t\t\tlocalize({ comment: ['substitution will be the number of files that were copied'], key: 'copyingnFile' }, \"Copying {0} resources\", resourcesFiltered.length),\n\t\t\t\tprogressLocation: ProgressLocation.Window,\n\t\t\t\tconfirmBeforeUndo: undoLevel === UndoConfirmLevel.Verbose || undoLevel === UndoConfirmLevel.Default,\n\t\t\t});\n\n\t\t\t// if we only add one file, just open it directly\n\t\t\tif (resourceFileEdits.length === 1) {\n\t\t\t\tconst item = this.explorerService.findClosest(resourceFileEdits[0].newResource!);\n\t\t\t\tif (item && !item.isDirectory) {\n\t\t\t\t\tthis.editorService.openEditor({ resource: item.resource, options: { pinned: true } });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n//#endregion\n\n//#region Download (web, native)\n\ninterface IDownloadOperation {\n\tstartTime: number;\n\tprogressScheduler: RunOnceWorker<IProgressStep>;\n\n\tfilesTotal: number;\n\tfilesDownloaded: number;\n\n\ttotalBytesDownloaded: number;\n\tfileBytesDownloaded: number;\n}\n\nexport class FileDownload {\n\n\tprivate static readonly LAST_USED_DOWNLOAD_PATH_STORAGE_KEY = 'workbench.explorer.downloadPath';\n\n\tconstructor(\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IExplorerService private readonly explorerService: IExplorerService,\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IFileDialogService private readonly fileDialogService: IFileDialogService,\n\t\t@IStorageService private readonly storageService: IStorageService\n\t) {\n\t}\n\n\tdownload(source: ExplorerItem[]): Promise<void> {\n\t\tconst cts = new CancellationTokenSource();\n\n\t\t// Indicate progress globally\n\t\tconst downloadPromise = this.progressService.withProgress(\n\t\t\t{\n\t\t\t\tlocation: ProgressLocation.Window,\n\t\t\t\tdelay: 800,\n\t\t\t\tcancellable: isWeb,\n\t\t\t\ttitle: localize('downloadingFiles', \"Downloading\")\n\t\t\t},\n\t\t\tasync progress => this.doDownload(source, progress, cts),\n\t\t\t() => cts.dispose(true)\n\t\t);\n\n\t\t// Also indicate progress in the files view\n\t\tthis.progressService.withProgress({ location: VIEW_ID, delay: 500 }, () => downloadPromise);\n\n\t\treturn downloadPromise;\n\t}\n\n\tprivate async doDownload(sources: ExplorerItem[], progress: IProgress<IProgressStep>, cts: CancellationTokenSource): Promise<void> {\n\t\tfor (const source of sources) {\n\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Web: use DOM APIs to download files with optional support\n\t\t\t// for folders and large files\n\t\t\tif (isWeb) {\n\t\t\t\tawait this.doDownloadBrowser(source.resource, progress, cts);\n\t\t\t}\n\n\t\t\t// Native: use working copy file service to get at the contents\n\t\t\telse {\n\t\t\t\tawait this.doDownloadNative(source, progress, cts);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async doDownloadBrowser(resource: URI, progress: IProgress<IProgressStep>, cts: CancellationTokenSource): Promise<void> {\n\t\tconst stat = await this.fileService.resolve(resource, { resolveMetadata: true });\n\n\t\tif (cts.token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst maxBlobDownloadSize = 32 * ByteSize.MB; // avoid to download via blob-trick >32MB to avoid memory pressure\n\t\tconst preferFileSystemAccessWebApis = stat.isDirectory || stat.size > maxBlobDownloadSize;\n\n\t\t// Folder: use FS APIs to download files and folders if available and preferred\n\t\tif (preferFileSystemAccessWebApis && WebFileSystemAccess.supported(window)) {\n\t\t\ttry {\n\t\t\t\tconst parentFolder: FileSystemDirectoryHandle = await window.showDirectoryPicker();\n\t\t\t\tconst operation: IDownloadOperation = {\n\t\t\t\t\tstartTime: Date.now(),\n\t\t\t\t\tprogressScheduler: new RunOnceWorker<IProgressStep>(steps => { progress.report(steps[steps.length - 1]); }, 1000),\n\n\t\t\t\t\tfilesTotal: stat.isDirectory ? 0 : 1, // folders increment filesTotal within downloadFolder method\n\t\t\t\t\tfilesDownloaded: 0,\n\n\t\t\t\t\ttotalBytesDownloaded: 0,\n\t\t\t\t\tfileBytesDownloaded: 0\n\t\t\t\t};\n\n\t\t\t\tif (stat.isDirectory) {\n\t\t\t\t\tconst targetFolder = await parentFolder.getDirectoryHandle(stat.name, { create: true });\n\t\t\t\t\tawait this.downloadFolderBrowser(stat, targetFolder, operation, cts.token);\n\t\t\t\t} else {\n\t\t\t\t\tawait this.downloadFileBrowser(parentFolder, stat, operation, cts.token);\n\t\t\t\t}\n\n\t\t\t\toperation.progressScheduler.dispose();\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.warn(error);\n\t\t\t\tcts.cancel(); // `showDirectoryPicker` will throw an error when the user cancels\n\t\t\t}\n\t\t}\n\n\t\t// File: use traditional download to circumvent browser limitations\n\t\telse if (stat.isFile) {\n\t\t\tlet bufferOrUri: Uint8Array | URI;\n\t\t\ttry {\n\t\t\t\tbufferOrUri = (await this.fileService.readFile(stat.resource, { limits: { size: maxBlobDownloadSize } }, cts.token)).value.buffer;\n\t\t\t} catch (error) {\n\t\t\t\tbufferOrUri = FileAccess.uriToBrowserUri(stat.resource);\n\t\t\t}\n\n\t\t\tif (!cts.token.isCancellationRequested) {\n\t\t\t\ttriggerDownload(bufferOrUri, stat.name);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async downloadFileBufferedBrowser(resource: URI, target: FileSystemWritableFileStream, operation: IDownloadOperation, token: CancellationToken): Promise<void> {\n\t\tconst contents = await this.fileService.readFileStream(resource, undefined, token);\n\t\tif (token.isCancellationRequested) {\n\t\t\ttarget.close();\n\t\t\treturn;\n\t\t}\n\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tconst sourceStream = contents.value;\n\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tdisposables.add(toDisposable(() => target.close()));\n\n\t\t\tdisposables.add(once(token.onCancellationRequested)(() => {\n\t\t\t\tdisposables.dispose();\n\t\t\t\treject(canceled());\n\t\t\t}));\n\n\t\t\tlistenStream(sourceStream, {\n\t\t\t\tonData: data => {\n\t\t\t\t\ttarget.write(data.buffer);\n\t\t\t\t\tthis.reportProgress(contents.name, contents.size, data.byteLength, operation);\n\t\t\t\t},\n\t\t\t\tonError: error => {\n\t\t\t\t\tdisposables.dispose();\n\t\t\t\t\treject(error);\n\t\t\t\t},\n\t\t\t\tonEnd: () => {\n\t\t\t\t\tdisposables.dispose();\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t}, token);\n\t\t});\n\t}\n\n\tprivate async downloadFileUnbufferedBrowser(resource: URI, target: FileSystemWritableFileStream, operation: IDownloadOperation, token: CancellationToken): Promise<void> {\n\t\tconst contents = await this.fileService.readFile(resource, undefined, token);\n\t\tif (!token.isCancellationRequested) {\n\t\t\ttarget.write(contents.value.buffer);\n\t\t\tthis.reportProgress(contents.name, contents.size, contents.value.byteLength, operation);\n\t\t}\n\n\t\ttarget.close();\n\t}\n\n\tprivate async downloadFileBrowser(targetFolder: FileSystemDirectoryHandle, file: IFileStatWithMetadata, operation: IDownloadOperation, token: CancellationToken): Promise<void> {\n\n\t\t// Report progress\n\t\toperation.filesDownloaded++;\n\t\toperation.fileBytesDownloaded = 0; // reset for this file\n\t\tthis.reportProgress(file.name, 0, 0, operation);\n\n\t\t// Start to download\n\t\tconst targetFile = await targetFolder.getFileHandle(file.name, { create: true });\n\t\tconst targetFileWriter = await targetFile.createWritable();\n\n\t\t// For large files, write buffered using streams\n\t\tif (file.size > ByteSize.MB) {\n\t\t\treturn this.downloadFileBufferedBrowser(file.resource, targetFileWriter, operation, token);\n\t\t}\n\n\t\t// For small files prefer to write unbuffered to reduce overhead\n\t\treturn this.downloadFileUnbufferedBrowser(file.resource, targetFileWriter, operation, token);\n\t}\n\n\tprivate async downloadFolderBrowser(folder: IFileStatWithMetadata, targetFolder: FileSystemDirectoryHandle, operation: IDownloadOperation, token: CancellationToken): Promise<void> {\n\t\tif (folder.children) {\n\t\t\toperation.filesTotal += (folder.children.map(child => child.isFile)).length;\n\n\t\t\tfor (const child of folder.children) {\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (child.isFile) {\n\t\t\t\t\tawait this.downloadFileBrowser(targetFolder, child, operation, token);\n\t\t\t\t} else {\n\t\t\t\t\tconst childFolder = await targetFolder.getDirectoryHandle(child.name, { create: true });\n\t\t\t\t\tconst resolvedChildFolder = await this.fileService.resolve(child.resource, { resolveMetadata: true });\n\n\t\t\t\t\tawait this.downloadFolderBrowser(resolvedChildFolder, childFolder, operation, token);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate reportProgress(name: string, fileSize: number, bytesDownloaded: number, operation: IDownloadOperation): void {\n\t\toperation.fileBytesDownloaded += bytesDownloaded;\n\t\toperation.totalBytesDownloaded += bytesDownloaded;\n\n\t\tconst bytesDownloadedPerSecond = operation.totalBytesDownloaded / ((Date.now() - operation.startTime) / 1000);\n\n\t\t// Small file\n\t\tlet message: string;\n\t\tif (fileSize < ByteSize.MB) {\n\t\t\tif (operation.filesTotal === 1) {\n\t\t\t\tmessage = name;\n\t\t\t} else {\n\t\t\t\tmessage = localize('downloadProgressSmallMany', \"{0} of {1} files ({2}/s)\", operation.filesDownloaded, operation.filesTotal, ByteSize.formatSize(bytesDownloadedPerSecond));\n\t\t\t}\n\t\t}\n\n\t\t// Large file\n\t\telse {\n\t\t\tmessage = localize('downloadProgressLarge', \"{0} ({1} of {2}, {3}/s)\", name, ByteSize.formatSize(operation.fileBytesDownloaded), ByteSize.formatSize(fileSize), ByteSize.formatSize(bytesDownloadedPerSecond));\n\t\t}\n\n\t\t// Report progress but limit to update only once per second\n\t\toperation.progressScheduler.work({ message });\n\t}\n\n\tprivate async doDownloadNative(explorerItem: ExplorerItem, progress: IProgress<IProgressStep>, cts: CancellationTokenSource): Promise<void> {\n\t\tprogress.report({ message: explorerItem.name });\n\n\t\tlet defaultUri: URI;\n\t\tconst lastUsedDownloadPath = this.storageService.get(FileDownload.LAST_USED_DOWNLOAD_PATH_STORAGE_KEY, StorageScope.APPLICATION);\n\t\tif (lastUsedDownloadPath) {\n\t\t\tdefaultUri = joinPath(URI.file(lastUsedDownloadPath), explorerItem.name);\n\t\t} else {\n\t\t\tdefaultUri = joinPath(\n\t\t\t\texplorerItem.isDirectory ?\n\t\t\t\t\tawait this.fileDialogService.defaultFolderPath(Schemas.file) :\n\t\t\t\t\tawait this.fileDialogService.defaultFilePath(Schemas.file),\n\t\t\t\texplorerItem.name\n\t\t\t);\n\t\t}\n\n\t\tconst destination = await this.fileDialogService.showSaveDialog({\n\t\t\tavailableFileSystems: [Schemas.file],\n\t\t\tsaveLabel: mnemonicButtonLabel(localize('downloadButton', \"Download\")),\n\t\t\ttitle: localize('chooseWhereToDownload', \"Choose Where to Download\"),\n\t\t\tdefaultUri\n\t\t});\n\n\t\tif (destination) {\n\n\t\t\t// Remember as last used download folder\n\t\t\tthis.storageService.store(FileDownload.LAST_USED_DOWNLOAD_PATH_STORAGE_KEY, dirname(destination).fsPath, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\n\t\t\t// Perform download\n\t\t\tawait this.explorerService.applyBulkEdit([new ResourceFileEdit(explorerItem.resource, destination, { overwrite: true, copy: true })], {\n\t\t\t\tundoLabel: localize('downloadBulkEdit', \"Download {0}\", explorerItem.name),\n\t\t\t\tprogressLabel: localize('downloadingBulkEdit', \"Downloading {0}\", explorerItem.name),\n\t\t\t\tprogressLocation: ProgressLocation.Window\n\t\t\t});\n\t\t} else {\n\t\t\tcts.cancel(); // User canceled a download. In case there were multiple files selected we should cancel the remainder of the prompts #86100\n\t\t}\n\t}\n}\n\n//#endregion\n\n//#region Helpers\n\nexport function getFileOverwriteConfirm(name: string): IConfirmation {\n\treturn {\n\t\tmessage: localize('confirmOverwrite', \"A file or folder with the name '{0}' already exists in the destination folder. Do you want to replace it?\", name),\n\t\tdetail: localize('irreversible', \"This action is irreversible!\"),\n\t\tprimaryButton: localize({ key: 'replaceButtonLabel', comment: ['&& denotes a mnemonic'] }, \"&&Replace\"),\n\t\ttype: 'warning'\n\t};\n}\n\nexport function getMultipleFilesOverwriteConfirm(files: URI[]): IConfirmation {\n\tif (files.length > 1) {\n\t\treturn {\n\t\t\tmessage: localize('confirmManyOverwrites', \"The following {0} files and/or folders already exist in the destination folder. Do you want to replace them?\", files.length),\n\t\t\tdetail: getFileNamesMessage(files) + '\\n' + localize('irreversible', \"This action is irreversible!\"),\n\t\t\tprimaryButton: localize({ key: 'replaceButtonLabel', comment: ['&& denotes a mnemonic'] }, \"&&Replace\"),\n\t\t\ttype: 'warning'\n\t\t};\n\t}\n\n\treturn getFileOverwriteConfirm(basename(files[0]));\n}\n\n//#endregion\n"]}