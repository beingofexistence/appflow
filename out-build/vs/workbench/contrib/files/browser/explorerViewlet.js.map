{"version":3,"sources":["vs/workbench/contrib/files/browser/explorerViewlet.ts"],"names":[],"mappings":"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","file":"explorerViewlet.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/explorerviewlet';\nimport { localize } from 'vs/nls';\nimport { mark } from 'vs/base/common/performance';\nimport { VIEWLET_ID, VIEW_ID, IFilesConfiguration, ExplorerViewletVisibleContext } from 'vs/workbench/contrib/files/common/files';\nimport { IViewletViewOptions } from 'vs/workbench/browser/parts/views/viewsViewlet';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ExplorerView } from 'vs/workbench/contrib/files/browser/views/explorerView';\nimport { EmptyView } from 'vs/workbench/contrib/files/browser/views/emptyView';\nimport { OpenEditorsView } from 'vs/workbench/contrib/files/browser/views/openEditorsView';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IContextKeyService, IContextKey, ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IViewsRegistry, IViewDescriptor, Extensions, ViewContainer, IViewContainersRegistry, ViewContainerLocation, IViewDescriptorService, ViewContentGroups } from 'vs/workbench/common/views';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { ViewPaneContainer } from 'vs/workbench/browser/parts/views/viewPaneContainer';\nimport { ViewPane } from 'vs/workbench/browser/parts/views/viewPane';\nimport { KeyChord, KeyMod, KeyCode } from 'vs/base/common/keyCodes';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IProgressService, ProgressLocation } from 'vs/platform/progress/common/progress';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { WorkbenchStateContext, RemoteNameContext, OpenFolderWorkspaceSupportContext } from 'vs/workbench/common/contextkeys';\nimport { IsWebContext } from 'vs/platform/contextkey/common/contextkeys';\nimport { AddRootFolderAction, OpenFolderAction, OpenFileFolderAction, OpenFolderViaWorkspaceAction } from 'vs/workbench/browser/actions/workspaceActions';\nimport { OpenRecentAction } from 'vs/workbench/browser/actions/windowActions';\nimport { isMacintosh, isWeb } from 'vs/base/common/platform';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { registerIcon } from 'vs/platform/theme/common/iconRegistry';\n\nconst explorerViewIcon = registerIcon('explorer-view-icon', Codicon.files, localize('explorerViewIcon', 'View icon of the explorer view.'));\nconst openEditorsViewIcon = registerIcon('open-editors-view-icon', Codicon.book, localize('openEditorsIcon', 'View icon of the open editors view.'));\n\nexport class ExplorerViewletViewsContribution extends Disposable implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IProgressService progressService: IProgressService\n\t) {\n\t\tsuper();\n\n\t\tprogressService.withProgress({ location: ProgressLocation.Explorer }, () => workspaceContextService.getCompleteWorkspace()).finally(() => {\n\t\t\tthis.registerViews();\n\n\t\t\tthis._register(workspaceContextService.onDidChangeWorkbenchState(() => this.registerViews()));\n\t\t\tthis._register(workspaceContextService.onDidChangeWorkspaceFolders(() => this.registerViews()));\n\t\t});\n\t}\n\n\tprivate registerViews(): void {\n\t\tmark('code/willRegisterExplorerViews');\n\n\t\tconst viewDescriptors = viewsRegistry.getViews(VIEW_CONTAINER);\n\n\t\tconst viewDescriptorsToRegister: IViewDescriptor[] = [];\n\t\tconst viewDescriptorsToDeregister: IViewDescriptor[] = [];\n\n\t\tconst openEditorsViewDescriptor = this.createOpenEditorsViewDescriptor();\n\t\tif (!viewDescriptors.some(v => v.id === openEditorsViewDescriptor.id)) {\n\t\t\tviewDescriptorsToRegister.push(openEditorsViewDescriptor);\n\t\t}\n\n\t\tconst explorerViewDescriptor = this.createExplorerViewDescriptor();\n\t\tconst registeredExplorerViewDescriptor = viewDescriptors.find(v => v.id === explorerViewDescriptor.id);\n\t\tconst emptyViewDescriptor = this.createEmptyViewDescriptor();\n\t\tconst registeredEmptyViewDescriptor = viewDescriptors.find(v => v.id === emptyViewDescriptor.id);\n\n\t\tif (this.workspaceContextService.getWorkbenchState() === WorkbenchState.EMPTY || this.workspaceContextService.getWorkspace().folders.length === 0) {\n\t\t\tif (registeredExplorerViewDescriptor) {\n\t\t\t\tviewDescriptorsToDeregister.push(registeredExplorerViewDescriptor);\n\t\t\t}\n\t\t\tif (!registeredEmptyViewDescriptor) {\n\t\t\t\tviewDescriptorsToRegister.push(emptyViewDescriptor);\n\t\t\t}\n\t\t} else {\n\t\t\tif (registeredEmptyViewDescriptor) {\n\t\t\t\tviewDescriptorsToDeregister.push(registeredEmptyViewDescriptor);\n\t\t\t}\n\t\t\tif (!registeredExplorerViewDescriptor) {\n\t\t\t\tviewDescriptorsToRegister.push(explorerViewDescriptor);\n\t\t\t}\n\t\t}\n\n\t\tif (viewDescriptorsToRegister.length) {\n\t\t\tviewsRegistry.registerViews(viewDescriptorsToRegister, VIEW_CONTAINER);\n\t\t}\n\t\tif (viewDescriptorsToDeregister.length) {\n\t\t\tviewsRegistry.deregisterViews(viewDescriptorsToDeregister, VIEW_CONTAINER);\n\t\t}\n\n\t\tmark('code/didRegisterExplorerViews');\n\t}\n\n\tprivate createOpenEditorsViewDescriptor(): IViewDescriptor {\n\t\treturn {\n\t\t\tid: OpenEditorsView.ID,\n\t\t\tname: OpenEditorsView.NAME,\n\t\t\tctorDescriptor: new SyncDescriptor(OpenEditorsView),\n\t\t\tcontainerIcon: openEditorsViewIcon,\n\t\t\torder: 0,\n\t\t\tcanToggleVisibility: true,\n\t\t\tcanMoveView: true,\n\t\t\tcollapsed: false,\n\t\t\thideByDefault: true,\n\t\t\tfocusCommand: {\n\t\t\t\tid: 'workbench.files.action.focusOpenEditorsView',\n\t\t\t\tkeybindings: { primary: KeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyCode.KeyE) }\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate createEmptyViewDescriptor(): IViewDescriptor {\n\t\treturn {\n\t\t\tid: EmptyView.ID,\n\t\t\tname: EmptyView.NAME,\n\t\t\tcontainerIcon: explorerViewIcon,\n\t\t\tctorDescriptor: new SyncDescriptor(EmptyView),\n\t\t\torder: 1,\n\t\t\tcanToggleVisibility: true,\n\t\t\tfocusCommand: {\n\t\t\t\tid: 'workbench.explorer.fileView.focus'\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate createExplorerViewDescriptor(): IViewDescriptor {\n\t\treturn {\n\t\t\tid: VIEW_ID,\n\t\t\tname: localize('folders', \"Folders\"),\n\t\t\tcontainerIcon: explorerViewIcon,\n\t\t\tctorDescriptor: new SyncDescriptor(ExplorerView),\n\t\t\torder: 1,\n\t\t\tcanMoveView: true,\n\t\t\tcanToggleVisibility: false,\n\t\t\tfocusCommand: {\n\t\t\t\tid: 'workbench.explorer.fileView.focus'\n\t\t\t}\n\t\t};\n\t}\n}\n\nexport class ExplorerViewPaneContainer extends ViewPaneContainer {\n\n\tprivate viewletVisibleContextKey: IContextKey<boolean>;\n\n\tconstructor(\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IViewDescriptorService viewDescriptorService: IViewDescriptorService\n\t) {\n\n\t\tsuper(VIEWLET_ID, { mergeViewWithContainerWhenSingleView: true }, instantiationService, configurationService, layoutService, contextMenuService, telemetryService, extensionService, themeService, storageService, contextService, viewDescriptorService);\n\n\t\tthis.viewletVisibleContextKey = ExplorerViewletVisibleContext.bindTo(contextKeyService);\n\t\tthis._register(this.contextService.onDidChangeWorkspaceName(e => this.updateTitleArea()));\n\t}\n\n\toverride create(parent: HTMLElement): void {\n\t\tsuper.create(parent);\n\t\tparent.classList.add('explorer-viewlet');\n\t}\n\n\tprotected override createView(viewDescriptor: IViewDescriptor, options: IViewletViewOptions): ViewPane {\n\t\tif (viewDescriptor.id === VIEW_ID) {\n\t\t\treturn this.instantiationService.createInstance(ExplorerView, {\n\t\t\t\t...options, delegate: {\n\t\t\t\t\twillOpenElement: e => {\n\t\t\t\t\t\tif (!(e instanceof MouseEvent)) {\n\t\t\t\t\t\t\treturn; // only delay when user clicks\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst openEditorsView = this.getOpenEditorsView();\n\t\t\t\t\t\tif (openEditorsView) {\n\t\t\t\t\t\t\tlet delay = 0;\n\n\t\t\t\t\t\t\tconst config = this.configurationService.getValue<IFilesConfiguration>();\n\t\t\t\t\t\t\tif (!!config.workbench?.editor?.enablePreview) {\n\t\t\t\t\t\t\t\t// delay open editors view when preview is enabled\n\t\t\t\t\t\t\t\t// to accomodate for the user doing a double click\n\t\t\t\t\t\t\t\t// to pin the editor.\n\t\t\t\t\t\t\t\t// without this delay a double click would be not\n\t\t\t\t\t\t\t\t// possible because the next element would move\n\t\t\t\t\t\t\t\t// under the mouse after the first click.\n\t\t\t\t\t\t\t\tdelay = 250;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\topenEditorsView.setStructuralRefreshDelay(delay);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tdidOpenElement: e => {\n\t\t\t\t\t\tif (!(e instanceof MouseEvent)) {\n\t\t\t\t\t\t\treturn; // only delay when user clicks\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst openEditorsView = this.getOpenEditorsView();\n\t\t\t\t\t\topenEditorsView?.setStructuralRefreshDelay(0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn super.createView(viewDescriptor, options);\n\t}\n\n\tgetExplorerView(): ExplorerView {\n\t\treturn <ExplorerView>this.getView(VIEW_ID);\n\t}\n\n\tgetOpenEditorsView(): OpenEditorsView {\n\t\treturn <OpenEditorsView>this.getView(OpenEditorsView.ID);\n\t}\n\n\toverride setVisible(visible: boolean): void {\n\t\tthis.viewletVisibleContextKey.set(visible);\n\t\tsuper.setVisible(visible);\n\t}\n\n\toverride focus(): void {\n\t\tconst explorerView = this.getView(VIEW_ID);\n\t\tif (explorerView && this.panes.every(p => !p.isExpanded())) {\n\t\t\texplorerView.setExpanded(true);\n\t\t}\n\t\tif (explorerView?.isExpanded()) {\n\t\t\texplorerView.focus();\n\t\t} else {\n\t\t\tsuper.focus();\n\t\t}\n\t}\n}\n\nconst viewContainerRegistry = Registry.as<IViewContainersRegistry>(Extensions.ViewContainersRegistry);\n\n/**\n * Explorer viewlet container.\n */\nexport const VIEW_CONTAINER: ViewContainer = viewContainerRegistry.registerViewContainer({\n\tid: VIEWLET_ID,\n\ttitle: { value: localize('explore', \"Explorer\"), original: 'Explorer' },\n\tctorDescriptor: new SyncDescriptor(ExplorerViewPaneContainer),\n\tstorageId: 'workbench.explorer.views.state',\n\ticon: explorerViewIcon,\n\talwaysUseContainerInfo: true,\n\thideIfEmpty: true,\n\torder: 0,\n\topenCommandActionDescriptor: {\n\t\tid: VIEWLET_ID,\n\t\ttitle: { value: localize('explore', \"Explorer\"), original: 'Explorer' },\n\t\tmnemonicTitle: localize({ key: 'miViewExplorer', comment: ['&& denotes a mnemonic'] }, \"&&Explorer\"),\n\t\tkeybindings: { primary: KeyMod.CtrlCmd | KeyMod.Shift | KeyCode.KeyE },\n\t\torder: 0\n\t},\n}, ViewContainerLocation.Sidebar, { isDefault: true });\n\nconst openFolder = localize('openFolder', \"Open Folder\");\nconst addAFolder = localize('addAFolder', \"add a folder\");\nconst openRecent = localize('openRecent', \"Open Recent\");\n\nconst addRootFolderButton = `[${openFolder}](command:${AddRootFolderAction.ID})`;\nconst addAFolderButton = `[${addAFolder}](command:${AddRootFolderAction.ID})`;\nconst openFolderButton = `[${openFolder}](command:${(isMacintosh && !isWeb) ? OpenFileFolderAction.ID : OpenFolderAction.ID})`;\nconst openFolderViaWorkspaceButton = `[${openFolder}](command:${OpenFolderViaWorkspaceAction.ID})`;\nconst openRecentButton = `[${openRecent}](command:${OpenRecentAction.ID})`;\n\nconst viewsRegistry = Registry.as<IViewsRegistry>(Extensions.ViewsRegistry);\nviewsRegistry.registerViewWelcomeContent(EmptyView.ID, {\n\tcontent: localize({ key: 'noWorkspaceHelp', comment: ['Please do not translate the word \"commmand\", it is part of our internal syntax which must not change'] },\n\t\t\"You have not yet added a folder to the workspace.\\n{0}\", addRootFolderButton),\n\twhen: ContextKeyExpr.and(\n\t\t// inside a .code-workspace\n\t\tWorkbenchStateContext.isEqualTo('workspace'),\n\t\t// unless we cannot enter or open workspaces (e.g. web serverless)\n\t\tOpenFolderWorkspaceSupportContext\n\t),\n\tgroup: ViewContentGroups.Open,\n\torder: 1\n});\n\nviewsRegistry.registerViewWelcomeContent(EmptyView.ID, {\n\tcontent: localize({ key: 'noFolderHelpWeb', comment: ['Please do not translate the word \"commmand\", it is part of our internal syntax which must not change'] },\n\t\t\"You have not yet opened a folder.\\n{0}\\n{1}\", openFolderViaWorkspaceButton, openRecentButton),\n\twhen: ContextKeyExpr.and(\n\t\t// inside a .code-workspace\n\t\tWorkbenchStateContext.isEqualTo('workspace'),\n\t\t// we cannot enter workspaces (e.g. web serverless)\n\t\tOpenFolderWorkspaceSupportContext.toNegated()\n\t),\n\tgroup: ViewContentGroups.Open,\n\torder: 1\n});\n\nviewsRegistry.registerViewWelcomeContent(EmptyView.ID, {\n\tcontent: localize({ key: 'remoteNoFolderHelp', comment: ['Please do not translate the word \"commmand\", it is part of our internal syntax which must not change'] },\n\t\t\"Connected to remote.\\n{0}\", openFolderButton),\n\twhen: ContextKeyExpr.and(\n\t\t// not inside a .code-workspace\n\t\tWorkbenchStateContext.notEqualsTo('workspace'),\n\t\t// connected to a remote\n\t\tRemoteNameContext.notEqualsTo(''),\n\t\t// but not in web\n\t\tIsWebContext.toNegated()),\n\tgroup: ViewContentGroups.Open,\n\torder: 1\n});\n\nviewsRegistry.registerViewWelcomeContent(EmptyView.ID, {\n\tcontent: localize({ key: 'noFolderButEditorsHelp', comment: ['Please do not translate the word \"commmand\", it is part of our internal syntax which must not change'] },\n\t\t\"You have not yet opened a folder.\\n{0}\\nOpening a folder will close all currently open editors. To keep them open, {1} instead.\", openFolderButton, addAFolderButton),\n\twhen: ContextKeyExpr.and(\n\t\t// editors are opened\n\t\tContextKeyExpr.has('editorIsOpen'),\n\t\tContextKeyExpr.or(\n\t\t\t// not inside a .code-workspace and local\n\t\t\tContextKeyExpr.and(WorkbenchStateContext.notEqualsTo('workspace'), RemoteNameContext.isEqualTo('')),\n\t\t\t// not inside a .code-workspace and web\n\t\t\tContextKeyExpr.and(WorkbenchStateContext.notEqualsTo('workspace'), IsWebContext)\n\t\t)\n\t),\n\tgroup: ViewContentGroups.Open,\n\torder: 1\n});\n\nviewsRegistry.registerViewWelcomeContent(EmptyView.ID, {\n\tcontent: localize({ key: 'noFolderHelp', comment: ['Please do not translate the word \"commmand\", it is part of our internal syntax which must not change'] },\n\t\t\"You have not yet opened a folder.\\n{0}\", openFolderButton),\n\twhen: ContextKeyExpr.and(\n\t\t// no editor is open\n\t\tContextKeyExpr.has('editorIsOpen')?.negate(),\n\t\tContextKeyExpr.or(\n\t\t\t// not inside a .code-workspace and local\n\t\t\tContextKeyExpr.and(WorkbenchStateContext.notEqualsTo('workspace'), RemoteNameContext.isEqualTo('')),\n\t\t\t// not inside a .code-workspace and web\n\t\t\tContextKeyExpr.and(WorkbenchStateContext.notEqualsTo('workspace'), IsWebContext)\n\t\t)\n\t),\n\tgroup: ViewContentGroups.Open,\n\torder: 1\n});\n"]}