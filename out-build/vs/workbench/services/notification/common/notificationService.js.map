{"version":3,"sources":["vs/workbench/services/notification/common/notificationService.ts"],"names":[],"mappings":"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","file":"notificationService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { INotificationService, INotification, INotificationHandle, Severity, NotificationMessage, INotificationActions, IPromptChoice, IPromptOptions, IStatusMessageOptions, NoOpNotification, NeverShowAgainScope, NotificationsFilter, INeverShowAgainOptions } from 'vs/platform/notification/common/notification';\nimport { NotificationsModel, ChoiceAction, NotificationChangeType } from 'vs/workbench/common/notifications';\nimport { Disposable, DisposableStore, IDisposable } from 'vs/base/common/lifecycle';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IAction, Action } from 'vs/base/common/actions';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\n\nexport class NotificationService extends Disposable implements INotificationService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\treadonly model = this._register(new NotificationsModel());\n\n\tprivate readonly _onDidAddNotification = this._register(new Emitter<INotification>());\n\treadonly onDidAddNotification = this._onDidAddNotification.event;\n\n\tprivate readonly _onDidRemoveNotification = this._register(new Emitter<INotification>());\n\treadonly onDidRemoveNotification = this._onDidRemoveNotification.event;\n\n\tprivate readonly _onDidChangeDoNotDisturbMode = this._register(new Emitter<void>());\n\treadonly onDidChangeDoNotDisturbMode = this._onDidChangeDoNotDisturbMode.event;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService\n\t) {\n\t\tsuper();\n\n\t\tthis.updateDoNotDisturbFilters();\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.model.onDidChangeNotification(e => {\n\t\t\tswitch (e.kind) {\n\t\t\t\tcase NotificationChangeType.ADD:\n\t\t\t\tcase NotificationChangeType.REMOVE: {\n\t\t\t\t\tconst notification: INotification = {\n\t\t\t\t\t\tmessage: e.item.message.original,\n\t\t\t\t\t\tseverity: e.item.severity,\n\t\t\t\t\t\tsource: typeof e.item.sourceId === 'string' && typeof e.item.source === 'string' ? { id: e.item.sourceId, label: e.item.source } : e.item.source,\n\t\t\t\t\t\tpriority: e.item.priority\n\t\t\t\t\t};\n\n\t\t\t\t\tif (e.kind === NotificationChangeType.ADD) {\n\t\t\t\t\t\tthis._onDidAddNotification.fire(notification);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (e.kind === NotificationChangeType.REMOVE) {\n\t\t\t\t\t\tthis._onDidRemoveNotification.fire(notification);\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\t//#region Do not disturb mode\n\n\tstatic readonly DND_SETTINGS_KEY = 'notifications.doNotDisturbMode';\n\n\tprivate _doNotDisturbMode = this.storageService.getBoolean(NotificationService.DND_SETTINGS_KEY, StorageScope.APPLICATION, false);\n\n\tget doNotDisturbMode() {\n\t\treturn this._doNotDisturbMode;\n\t}\n\n\tset doNotDisturbMode(enabled: boolean) {\n\t\tif (this._doNotDisturbMode === enabled) {\n\t\t\treturn; // no change\n\t\t}\n\n\t\tthis.storageService.store(NotificationService.DND_SETTINGS_KEY, enabled, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\tthis._doNotDisturbMode = enabled;\n\n\t\t// Toggle via filter\n\t\tthis.updateDoNotDisturbFilters();\n\n\t\t// Events\n\t\tthis._onDidChangeDoNotDisturbMode.fire();\n\t}\n\n\tprivate updateDoNotDisturbFilters(): void {\n\t\tlet filter: NotificationsFilter;\n\t\tif (this._doNotDisturbMode) {\n\t\t\tfilter = NotificationsFilter.ERROR;\n\t\t} else {\n\t\t\tfilter = NotificationsFilter.OFF;\n\t\t}\n\n\t\tthis.model.setFilter(filter);\n\t}\n\n\t//#endregion\n\n\tinfo(message: NotificationMessage | NotificationMessage[]): void {\n\t\tif (Array.isArray(message)) {\n\t\t\tmessage.forEach(m => this.info(m));\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.model.addNotification({ severity: Severity.Info, message });\n\t}\n\n\twarn(message: NotificationMessage | NotificationMessage[]): void {\n\t\tif (Array.isArray(message)) {\n\t\t\tmessage.forEach(m => this.warn(m));\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.model.addNotification({ severity: Severity.Warning, message });\n\t}\n\n\terror(message: NotificationMessage | NotificationMessage[]): void {\n\t\tif (Array.isArray(message)) {\n\t\t\tmessage.forEach(m => this.error(m));\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.model.addNotification({ severity: Severity.Error, message });\n\t}\n\n\tnotify(notification: INotification): INotificationHandle {\n\t\tconst toDispose = new DisposableStore();\n\n\t\t// Handle neverShowAgain option accordingly\n\n\t\tif (notification.neverShowAgain) {\n\t\t\tconst scope = this.toStorageScope(notification.neverShowAgain);\n\t\t\tconst id = notification.neverShowAgain.id;\n\n\t\t\t// If the user already picked to not show the notification\n\t\t\t// again, we return with a no-op notification here\n\t\t\tif (this.storageService.getBoolean(id, scope)) {\n\t\t\t\treturn new NoOpNotification();\n\t\t\t}\n\n\t\t\tconst neverShowAgainAction = toDispose.add(new Action(\n\t\t\t\t'workbench.notification.neverShowAgain',\n\t\t\t\tlocalize('neverShowAgain', \"Don't Show Again\"),\n\t\t\t\tundefined, true, async () => {\n\n\t\t\t\t\t// Close notification\n\t\t\t\t\thandle.close();\n\n\t\t\t\t\t// Remember choice\n\t\t\t\t\tthis.storageService.store(id, true, scope, StorageTarget.USER);\n\t\t\t\t}));\n\n\t\t\t// Insert as primary or secondary action\n\t\t\tconst actions = {\n\t\t\t\tprimary: notification.actions?.primary || [],\n\t\t\t\tsecondary: notification.actions?.secondary || []\n\t\t\t};\n\t\t\tif (!notification.neverShowAgain.isSecondary) {\n\t\t\t\tactions.primary = [neverShowAgainAction, ...actions.primary]; // action comes first\n\t\t\t} else {\n\t\t\t\tactions.secondary = [...actions.secondary, neverShowAgainAction]; // actions comes last\n\t\t\t}\n\n\t\t\tnotification.actions = actions;\n\t\t}\n\n\t\t// Show notification\n\t\tconst handle = this.model.addNotification(notification);\n\n\t\t// Cleanup when notification gets disposed\n\t\tEvent.once(handle.onDidClose)(() => toDispose.dispose());\n\n\t\treturn handle;\n\t}\n\n\tprivate toStorageScope(options: INeverShowAgainOptions): StorageScope {\n\t\tswitch (options.scope) {\n\t\t\tcase NeverShowAgainScope.APPLICATION:\n\t\t\t\treturn StorageScope.APPLICATION;\n\t\t\tcase NeverShowAgainScope.PROFILE:\n\t\t\t\treturn StorageScope.PROFILE;\n\t\t\tcase NeverShowAgainScope.WORKSPACE:\n\t\t\t\treturn StorageScope.WORKSPACE;\n\t\t\tdefault:\n\t\t\t\treturn StorageScope.APPLICATION;\n\t\t}\n\t}\n\n\tprompt(severity: Severity, message: string, choices: IPromptChoice[], options?: IPromptOptions): INotificationHandle {\n\t\tconst toDispose = new DisposableStore();\n\n\t\t// Handle neverShowAgain option accordingly\n\t\tif (options?.neverShowAgain) {\n\t\t\tconst scope = this.toStorageScope(options.neverShowAgain);\n\t\t\tconst id = options.neverShowAgain.id;\n\n\t\t\t// If the user already picked to not show the notification\n\t\t\t// again, we return with a no-op notification here\n\t\t\tif (this.storageService.getBoolean(id, scope)) {\n\t\t\t\treturn new NoOpNotification();\n\t\t\t}\n\n\t\t\tconst neverShowAgainChoice = {\n\t\t\t\tlabel: localize('neverShowAgain', \"Don't Show Again\"),\n\t\t\t\trun: () => this.storageService.store(id, true, scope, StorageTarget.USER),\n\t\t\t\tisSecondary: options.neverShowAgain.isSecondary\n\t\t\t};\n\n\t\t\t// Insert as primary or secondary action\n\t\t\tif (!options.neverShowAgain.isSecondary) {\n\t\t\t\tchoices = [neverShowAgainChoice, ...choices]; // action comes first\n\t\t\t} else {\n\t\t\t\tchoices = [...choices, neverShowAgainChoice]; // actions comes last\n\t\t\t}\n\t\t}\n\n\t\tlet choiceClicked = false;\n\n\n\t\t// Convert choices into primary/secondary actions\n\t\tconst primaryActions: IAction[] = [];\n\t\tconst secondaryActions: IAction[] = [];\n\t\tchoices.forEach((choice, index) => {\n\t\t\tconst action = new ChoiceAction(`workbench.dialog.choice.${index}`, choice);\n\t\t\tif (!choice.isSecondary) {\n\t\t\t\tprimaryActions.push(action);\n\t\t\t} else {\n\t\t\t\tsecondaryActions.push(action);\n\t\t\t}\n\n\t\t\t// React to action being clicked\n\t\t\ttoDispose.add(action.onDidRun(() => {\n\t\t\t\tchoiceClicked = true;\n\n\t\t\t\t// Close notification unless we are told to keep open\n\t\t\t\tif (!choice.keepOpen) {\n\t\t\t\t\thandle.close();\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\ttoDispose.add(action);\n\t\t});\n\n\t\t// Show notification with actions\n\t\tconst actions: INotificationActions = { primary: primaryActions, secondary: secondaryActions };\n\t\tconst handle = this.notify({ severity, message, actions, sticky: options?.sticky, priority: options?.priority });\n\n\t\tEvent.once(handle.onDidClose)(() => {\n\n\t\t\t// Cleanup when notification gets disposed\n\t\t\ttoDispose.dispose();\n\n\t\t\t// Indicate cancellation to the outside if no action was executed\n\t\t\tif (options && typeof options.onCancel === 'function' && !choiceClicked) {\n\t\t\t\toptions.onCancel();\n\t\t\t}\n\t\t});\n\n\t\treturn handle;\n\t}\n\n\tstatus(message: NotificationMessage, options?: IStatusMessageOptions): IDisposable {\n\t\treturn this.model.showStatusMessage(message, options);\n\t}\n}\n\nregisterSingleton(INotificationService, NotificationService, InstantiationType.Delayed);\n"]}