{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/extensionRecommendations/common/extensionRecommendations.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,IAAkB,6BAQjB;IARD,WAAkB,6BAA6B;QAC9C,2FAAS,CAAA;QACT,iFAAI,CAAA;QACJ,6FAAU,CAAA;QACV,uGAAe,CAAA;QACf,yGAAgB,CAAA;QAChB,iGAAY,CAAA;QACZ,+FAAW,CAAA;IACZ,CAAC,EARiB,6BAA6B,6CAA7B,6BAA6B,QAQ9C;IAOY,QAAA,IAAI,GAA+B,IAAA,mBAAG,EAA+C,iCAAiC,CAAC,CAAC;IAwBxH,QAAA,IAAI,GAAsC,IAAA,mBAAG,EAAsD,yCAAyC,CAAC,CAAC","file":"extensionRecommendations.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { Event } from 'vs/base/common/event';\n\nexport const enum ExtensionRecommendationReason {\n\tWorkspace,\n\tFile,\n\tExecutable,\n\tWorkspaceConfig,\n\tDynamicWorkspace,\n\tExperimental,\n\tApplication,\n}\n\nexport interface IExtensionRecommendationReason {\n\treasonId: ExtensionRecommendationReason;\n\treasonText: string;\n}\n\nexport const IExtensionRecommendationsService = createDecorator<IExtensionRecommendationsService>('extensionRecommendationsService');\n\nexport interface IExtensionRecommendationsService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChangeRecommendations: Event<void>;\n\tgetAllRecommendationsWithReason(): IStringDictionary<IExtensionRecommendationReason>;\n\n\tgetImportantRecommendations(): Promise<string[]>;\n\tgetOtherRecommendations(): Promise<string[]>;\n\tgetFileBasedRecommendations(): string[];\n\tgetExeBasedRecommendations(exe?: string): Promise<{ important: string[]; others: string[] }>;\n\tgetConfigBasedRecommendations(): Promise<{ important: string[]; others: string[] }>;\n\tgetWorkspaceRecommendations(): Promise<string[]>;\n\tgetKeymapRecommendations(): string[];\n\tgetLanguageRecommendations(): string[];\n\tgetRemoteRecommendations(): string[];\n}\n\nexport type IgnoredRecommendationChangeNotification = {\n\textensionId: string;\n\tisRecommended: boolean;\n};\n\nexport const IExtensionIgnoredRecommendationsService = createDecorator<IExtensionIgnoredRecommendationsService>('IExtensionIgnoredRecommendationsService');\n\nexport interface IExtensionIgnoredRecommendationsService {\n\treadonly _serviceBrand: undefined;\n\n\tonDidChangeIgnoredRecommendations: Event<void>;\n\treadonly ignoredRecommendations: string[];\n\n\tonDidChangeGlobalIgnoredRecommendation: Event<IgnoredRecommendationChangeNotification>;\n\treadonly globalIgnoredRecommendations: string[];\n\ttoggleGlobalIgnoredRecommendation(extensionId: string, ignore: boolean): void;\n}\n\n\n"]}