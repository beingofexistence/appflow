{"version":3,"sources":["vs/workbench/services/userDataProfile/browser/settingsResource.ts"],"names":[],"mappings":"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","file":"settingsResource.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { ConfigurationScope, Extensions, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport { FileOperationError, FileOperationResult, IFileService } from 'vs/platform/files/common/files';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IProfileResource, IProfileResourceChildTreeItem, IProfileResourceInitializer, IProfileResourceTreeItem, IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\nimport { updateIgnoredSettings } from 'vs/platform/userDataSync/common/settingsMerge';\nimport { IUserDataSyncUtilService } from 'vs/platform/userDataSync/common/userDataSync';\nimport { ITreeItemCheckboxState, TreeItemCollapsibleState } from 'vs/workbench/common/views';\nimport { IUserDataProfile, ProfileResourceType } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { API_OPEN_EDITOR_COMMAND_ID } from 'vs/workbench/browser/parts/editor/editorCommands';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { localize } from 'vs/nls';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\n\ninterface ISettingsContent {\n\tsettings: string | null;\n}\n\nexport class SettingsResourceInitializer implements IProfileResourceInitializer {\n\n\tconstructor(\n\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t}\n\n\tasync initialize(content: string): Promise<void> {\n\t\tconst settingsContent: ISettingsContent = JSON.parse(content);\n\t\tif (settingsContent.settings === null) {\n\t\t\tthis.logService.info(`Initializing Profile: No settings to apply...`);\n\t\t\treturn;\n\t\t}\n\t\tawait this.fileService.writeFile(this.userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString(settingsContent.settings));\n\t}\n}\n\nexport class SettingsResource implements IProfileResource {\n\n\tconstructor(\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IUserDataSyncUtilService private readonly userDataSyncUtilService: IUserDataSyncUtilService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t}\n\n\tasync getContent(profile: IUserDataProfile): Promise<string> {\n\t\tconst settingsContent = await this.getSettingsContent(profile);\n\t\treturn JSON.stringify(settingsContent);\n\t}\n\n\tasync getSettingsContent(profile: IUserDataProfile): Promise<ISettingsContent> {\n\t\tconst localContent = await this.getLocalFileContent(profile);\n\t\tif (localContent === null) {\n\t\t\treturn { settings: null };\n\t\t} else {\n\t\t\tconst ignoredSettings = this.getIgnoredSettings();\n\t\t\tconst formattingOptions = await this.userDataSyncUtilService.resolveFormattingOptions(profile.settingsResource);\n\t\t\tconst settings = updateIgnoredSettings(localContent || '{}', '{}', ignoredSettings, formattingOptions);\n\t\t\treturn { settings };\n\t\t}\n\t}\n\n\tasync apply(content: string, profile: IUserDataProfile): Promise<void> {\n\t\tconst settingsContent: ISettingsContent = JSON.parse(content);\n\t\tif (settingsContent.settings === null) {\n\t\t\tthis.logService.info(`Importing Profile (${profile.name}): No settings to apply...`);\n\t\t\treturn;\n\t\t}\n\t\tconst localSettingsContent = await this.getLocalFileContent(profile);\n\t\tconst formattingOptions = await this.userDataSyncUtilService.resolveFormattingOptions(profile.settingsResource);\n\t\tconst contentToUpdate = updateIgnoredSettings(settingsContent.settings, localSettingsContent || '{}', this.getIgnoredSettings(), formattingOptions);\n\t\tawait this.fileService.writeFile(profile.settingsResource, VSBuffer.fromString(contentToUpdate));\n\t}\n\n\tprivate getIgnoredSettings(): string[] {\n\t\tconst allSettings = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties();\n\t\tconst ignoredSettings = Object.keys(allSettings).filter(key => allSettings[key]?.scope === ConfigurationScope.MACHINE || allSettings[key]?.scope === ConfigurationScope.MACHINE_OVERRIDABLE);\n\t\treturn ignoredSettings;\n\t}\n\n\tprivate async getLocalFileContent(profile: IUserDataProfile): Promise<string | null> {\n\t\ttry {\n\t\t\tconst content = await this.fileService.readFile(profile.settingsResource);\n\t\t\treturn content.value.toString();\n\t\t} catch (error) {\n\t\t\t// File not found\n\t\t\tif (error instanceof FileOperationError && error.fileOperationResult === FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n}\n\nexport class SettingsResourceTreeItem implements IProfileResourceTreeItem {\n\n\treadonly type = ProfileResourceType.Settings;\n\treadonly handle = ProfileResourceType.Settings;\n\treadonly label = { label: localize('settings', \"Settings\") };\n\treadonly collapsibleState = TreeItemCollapsibleState.Expanded;\n\tcheckbox: ITreeItemCheckboxState | undefined;\n\n\tconstructor(\n\t\tprivate readonly profile: IUserDataProfile,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) { }\n\n\tasync getChildren(): Promise<IProfileResourceChildTreeItem[]> {\n\t\treturn [{\n\t\t\thandle: this.profile.settingsResource.toString(),\n\t\t\tresourceUri: this.profile.settingsResource,\n\t\t\tcollapsibleState: TreeItemCollapsibleState.None,\n\t\t\tparent: this,\n\t\t\taccessibilityInformation: {\n\t\t\t\tlabel: this.uriIdentityService.extUri.basename(this.profile.settingsResource)\n\t\t\t},\n\t\t\tcommand: {\n\t\t\t\tid: API_OPEN_EDITOR_COMMAND_ID,\n\t\t\t\ttitle: '',\n\t\t\t\targuments: [this.profile.settingsResource, undefined, undefined]\n\t\t\t}\n\t\t}];\n\t}\n\n\tasync hasContent(): Promise<boolean> {\n\t\tconst settingsContent = await this.instantiationService.createInstance(SettingsResource).getSettingsContent(this.profile);\n\t\treturn settingsContent.settings !== null;\n\t}\n\n\tasync getContent(): Promise<string> {\n\t\treturn this.instantiationService.createInstance(SettingsResource).getContent(this.profile);\n\t}\n\n\tisFromDefaultProfile(): boolean {\n\t\treturn !this.profile.isDefault && !!this.profile.useDefaultFlags?.settings;\n\t}\n\n}\n"]}