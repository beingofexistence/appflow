{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/userDataProfile/browser/userDataProfileStorageService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAazF,IAAM,IAAI,GAAV,MAAM,IAA8B,SAAQ,oCAAI;QAKtD,YACkB,cAAmB,EACX,CAA4C,EACxD,CAAgC;YAE7C,KAAK,CAAC,cAAc,CAAC,CAAC;YAHoB,MAAC,GAAD,CAAC,CAA0B;YACvC,MAAC,GAAD,CAAC,CAAc;YAN7B,MAAC,GAAc,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAA8B,CAAC,CAAC;YAC7E,gBAAW,GAAkC,IAAI,CAAC,CAAC,CAAY,KAAK,CAAC;YAQ7E,MAAM,WAAW,GAAG,IAAI,CAAC,CAAC,CAAS,IAAI,eAAG,EAAc,CAAC,CAAC;YAC1D,IAAI,CAAC,CAAC,CAAS,aAAK,CAAC,MAAM,CAAC,cAAc,CAAC,iBAAiB,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,iCAAyB,EAAE,WAAW,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,EAAyC,CAAC,CAAC,CAAC;YAC1K,IAAI,CAAC,CAAC,CAAS,cAAc,CAAC,gBAAgB,+BAAuB,SAAS,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAuC,CAAC,CAAC,CAAC,CAAC,CAAC;QACrJ,CAAC;QAEO,CAAC;YACR,+EAA+E;YAC/E,+BAA+B;YAC/B,IAAI,CAAC,CAAC,CAAY,IAAI,CAAC,EAAE,aAAa,EAAE,CAAC,IAAI,CAAC,CAAC,CAAsB,cAAc,CAAC,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC;QAC3G,CAAC;QAEO,CAAC,CAAuC,CAAkC;YACjF,8EAA8E;YAC9E,+BAA+B;YAC/B,IAAI,CAAC,CAAC,CAAY,IAAI,CAAC,EAAE,aAAa,EAAE,EAAE,EAAE,YAAY,EAAE,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC,CAAsB,cAAc,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACtI,CAAC;QAES,CAAC,CAAqB,OAAyB;YACxD,OAAO,IAAA,aAAG,EAA0B,OAAO,CAAC,CAAC,CAAC,CAAC,qBAAI,CAAqB,wBAAwB,CAAC,IAAI,CAAC,CAAC,CAAU,CAAC,CAAC,CAAC,qBAAI,CAAqB,oBAAoB,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAU,CAAC;QAC7L,CAAC;KACD,CAAA;IA/BY,oBAAI;mBAAJ,IAAI;QAMd,WAAA,aAAG,CAAA;QACH,WAAA,qBAAG,CAAA;QACH,WAAA,SAAG,CAAA;OARO,IAAI,CA+BhB;IAED,IAAA,gBAAG,EAAe,oCAAI,EAA4B,IAAI,oCAAqD,CAAC","file":"userDataProfileStorageService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IStorageDatabase } from 'vs/base/parts/storage/common/storage';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { AbstractUserDataProfileStorageService, IProfileStorageChanges, IUserDataProfileStorageService } from 'vs/platform/userDataProfile/common/userDataProfileStorageService';\nimport { IProfileStorageValueChangeEvent, isProfileUsingDefaultStorage, IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { IUserDataProfile } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { IndexedDBStorageDatabase } from 'vs/workbench/services/storage/browser/storageService';\nimport { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\n\nexport class UserDataProfileStorageService extends AbstractUserDataProfileStorageService implements IUserDataProfileStorageService {\n\n\tprivate readonly _onDidChange = this._register(new Emitter<IProfileStorageChanges>());\n\treadonly onDidChange: Event<IProfileStorageChanges> = this._onDidChange.event;\n\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper(storageService);\n\t\tconst disposables = this._register(new DisposableStore());\n\t\tthis._register(Event.filter(storageService.onDidChangeTarget, e => e.scope === StorageScope.PROFILE, disposables)(() => this.onDidChangeStorageTargetInCurrentProfile()));\n\t\tthis._register(storageService.onDidChangeValue(StorageScope.PROFILE, undefined, disposables)(e => this.onDidChangeStorageValueInCurrentProfile(e)));\n\t}\n\n\tprivate onDidChangeStorageTargetInCurrentProfile(): void {\n\t\t// Not broadcasting changes to other windows/tabs as it is not required in web.\n\t\t// Revisit if needed in future.\n\t\tthis._onDidChange.fire({ targetChanges: [this.userDataProfileService.currentProfile], valueChanges: [] });\n\t}\n\n\tprivate onDidChangeStorageValueInCurrentProfile(e: IProfileStorageValueChangeEvent): void {\n\t\t// Not broadcasting changes to other windows/tabs as it is not required in web\n\t\t// Revisit if needed in future.\n\t\tthis._onDidChange.fire({ targetChanges: [], valueChanges: [{ profile: this.userDataProfileService.currentProfile, changes: [e] }] });\n\t}\n\n\tprotected createStorageDatabase(profile: IUserDataProfile): Promise<IStorageDatabase> {\n\t\treturn isProfileUsingDefaultStorage(profile) ? IndexedDBStorageDatabase.createApplicationStorage(this.logService) : IndexedDBStorageDatabase.createProfileStorage(profile, this.logService);\n\t}\n}\n\nregisterSingleton(IUserDataProfileStorageService, UserDataProfileStorageService, InstantiationType.Delayed);\n"]}