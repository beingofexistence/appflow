{"version":3,"sources":["vs/workbench/services/userDataProfile/browser/userDataProfileManagement.ts"],"names":[],"mappings":"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","file":"userDataProfileManagement.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { CancellationError } from 'vs/base/common/errors';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { localize } from 'vs/nls';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IRequestService, asJson } from 'vs/platform/request/common/request';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { DidChangeProfilesEvent, IUserDataProfile, IUserDataProfileOptions, IUserDataProfilesService, IUserDataProfileUpdateOptions } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { IWorkspaceContextService, toWorkspaceIdentifier } from 'vs/platform/workspace/common/workspace';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { DidChangeUserDataProfileEvent, IProfileTemplateInfo, IUserDataProfileManagementService, IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\n\nexport type ProfileManagementActionExecutedClassification = {\n\towner: 'sandy081';\n\tcomment: 'Logged when profile management action is excuted';\n\tid: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The identifier of the action that was run.' };\n};\n\nexport type ProfileManagementActionExecutedEvent = {\n\tid: string;\n};\n\nexport class UserDataProfileManagementService extends Disposable implements IUserDataProfileManagementService {\n\treadonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IRequestService private readonly requestService: IRequestService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis._register(userDataProfilesService.onDidChangeProfiles(e => this.onDidChangeProfiles(e)));\n\t\tthis._register(userDataProfilesService.onDidResetWorkspaces(() => this.onDidResetWorkspaces()));\n\t\tthis._register(userDataProfileService.onDidChangeCurrentProfile(e => this.onDidChangeCurrentProfile(e)));\n\t\tthis._register(userDataProfilesService.onDidChangeProfiles(e => {\n\t\t\tconst updatedCurrentProfile = e.updated.find(p => this.userDataProfileService.currentProfile.id === p.id);\n\t\t\tif (updatedCurrentProfile) {\n\t\t\t\tthis.changeCurrentProfile(updatedCurrentProfile, localize('reload message when updated', \"The current profile has been updated. Please reload to switch back to the updated profile\"));\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate onDidChangeProfiles(e: DidChangeProfilesEvent): void {\n\t\tif (e.removed.some(profile => profile.id === this.userDataProfileService.currentProfile.id)) {\n\t\t\tthis.changeCurrentProfile(this.userDataProfilesService.defaultProfile, localize('reload message when removed', \"The current profile has been removed. Please reload to switch back to default profile\"));\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate onDidResetWorkspaces(): void {\n\t\tif (!this.userDataProfileService.currentProfile.isDefault) {\n\t\t\tthis.changeCurrentProfile(this.userDataProfilesService.defaultProfile, localize('reload message when removed', \"The current profile has been removed. Please reload to switch back to default profile\"));\n\t\t\treturn;\n\t\t}\n\t}\n\n\tprivate async onDidChangeCurrentProfile(e: DidChangeUserDataProfileEvent): Promise<void> {\n\t\tif (e.previous.isTransient) {\n\t\t\tawait this.userDataProfilesService.cleanUpTransientProfiles();\n\t\t}\n\t}\n\n\tasync createAndEnterProfile(name: string, options?: IUserDataProfileOptions): Promise<IUserDataProfile> {\n\t\tconst profile = await this.userDataProfilesService.createNamedProfile(name, options, toWorkspaceIdentifier(this.workspaceContextService.getWorkspace()));\n\t\tawait this.changeCurrentProfile(profile);\n\t\tthis.telemetryService.publicLog2<ProfileManagementActionExecutedEvent, ProfileManagementActionExecutedClassification>('profileManagementActionExecuted', { id: 'createAndEnterProfile' });\n\t\treturn profile;\n\t}\n\n\tasync createAndEnterTransientProfile(): Promise<IUserDataProfile> {\n\t\tconst profile = await this.userDataProfilesService.createTransientProfile(toWorkspaceIdentifier(this.workspaceContextService.getWorkspace()));\n\t\tawait this.changeCurrentProfile(profile);\n\t\tthis.telemetryService.publicLog2<ProfileManagementActionExecutedEvent, ProfileManagementActionExecutedClassification>('profileManagementActionExecuted', { id: 'createAndEnterTransientProfile' });\n\t\treturn profile;\n\t}\n\n\tasync updateProfile(profile: IUserDataProfile, updateOptions: IUserDataProfileUpdateOptions): Promise<void> {\n\t\tif (!this.userDataProfilesService.profiles.some(p => p.id === profile.id)) {\n\t\t\tthrow new Error(`Profile ${profile.name} does not exist`);\n\t\t}\n\t\tif (profile.isDefault) {\n\t\t\tthrow new Error(localize('cannotRenameDefaultProfile', \"Cannot rename the default profile\"));\n\t\t}\n\t\tawait this.userDataProfilesService.updateProfile(profile, updateOptions);\n\t\tthis.telemetryService.publicLog2<ProfileManagementActionExecutedEvent, ProfileManagementActionExecutedClassification>('profileManagementActionExecuted', { id: 'updateProfile' });\n\t}\n\n\tasync removeProfile(profile: IUserDataProfile): Promise<void> {\n\t\tif (!this.userDataProfilesService.profiles.some(p => p.id === profile.id)) {\n\t\t\tthrow new Error(`Profile ${profile.name} does not exist`);\n\t\t}\n\t\tif (profile.isDefault) {\n\t\t\tthrow new Error(localize('cannotDeleteDefaultProfile', \"Cannot delete the default profile\"));\n\t\t}\n\t\tawait this.userDataProfilesService.removeProfile(profile);\n\t\tthis.telemetryService.publicLog2<ProfileManagementActionExecutedEvent, ProfileManagementActionExecutedClassification>('profileManagementActionExecuted', { id: 'removeProfile' });\n\t}\n\n\tasync switchProfile(profile: IUserDataProfile): Promise<void> {\n\t\tconst workspaceIdentifier = toWorkspaceIdentifier(this.workspaceContextService.getWorkspace());\n\t\tif (!this.userDataProfilesService.profiles.some(p => p.id === profile.id)) {\n\t\t\tthrow new Error(`Profile ${profile.name} does not exist`);\n\t\t}\n\t\tif (this.userDataProfileService.currentProfile.id === profile.id) {\n\t\t\treturn;\n\t\t}\n\t\tawait this.userDataProfilesService.setProfileForWorkspace(workspaceIdentifier, profile);\n\t\tawait this.changeCurrentProfile(profile);\n\t\tthis.telemetryService.publicLog2<ProfileManagementActionExecutedEvent, ProfileManagementActionExecutedClassification>('profileManagementActionExecuted', { id: 'switchProfile' });\n\t}\n\n\tasync getBuiltinProfileTemplates(): Promise<IProfileTemplateInfo[]> {\n\t\tif (this.productService.profileTemplatesUrl) {\n\t\t\ttry {\n\t\t\t\tconst context = await this.requestService.request({ type: 'GET', url: this.productService.profileTemplatesUrl }, CancellationToken.None);\n\t\t\t\tif (context.res.statusCode === 200) {\n\t\t\t\t\treturn (await asJson<IProfileTemplateInfo[]>(context)) || [];\n\t\t\t\t} else {\n\t\t\t\t\tthis.logService.error('Could not get profile templates.', context.res.statusCode);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\t\treturn [];\n\t}\n\n\tprivate async changeCurrentProfile(profile: IUserDataProfile, reloadMessage?: string): Promise<void> {\n\t\tconst isRemoteWindow = !!this.environmentService.remoteAuthority;\n\n\t\tif (!isRemoteWindow) {\n\t\t\tif (!(await this.extensionService.stopExtensionHosts(localize('switch profile', \"Switching to a profile.\")))) {\n\t\t\t\t// If extension host did not stop, do not switch profile\n\t\t\t\tif (this.userDataProfilesService.profiles.some(p => p.id === this.userDataProfileService.currentProfile.id)) {\n\t\t\t\t\tawait this.userDataProfilesService.setProfileForWorkspace(toWorkspaceIdentifier(this.workspaceContextService.getWorkspace()), this.userDataProfileService.currentProfile);\n\t\t\t\t}\n\t\t\t\tthrow new CancellationError();\n\t\t\t}\n\t\t}\n\n\t\t// In a remote window update current profile before reloading so that data is preserved from current profile if asked to preserve\n\t\tawait this.userDataProfileService.updateCurrentProfile(profile);\n\n\t\tif (isRemoteWindow) {\n\t\t\tconst { confirmed } = await this.dialogService.confirm({\n\t\t\t\tmessage: reloadMessage ?? localize('reload message', \"Switching a profile requires reloading VS Code.\"),\n\t\t\t\tprimaryButton: localize('reload button', \"&&Reload\"),\n\t\t\t});\n\t\t\tif (confirmed) {\n\t\t\t\tawait this.hostService.reload();\n\t\t\t}\n\t\t} else {\n\t\t\tawait this.extensionService.startExtensionHosts();\n\t\t}\n\t}\n}\n\nregisterSingleton(IUserDataProfileManagementService, UserDataProfileManagementService, InstantiationType.Eager /* Eager because it updates the current window profile by listening to profiles changes */);\n"]}