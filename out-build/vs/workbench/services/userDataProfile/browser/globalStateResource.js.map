{"version":3,"sources":["vs/workbench/services/userDataProfile/browser/globalStateResource.ts"],"names":[],"mappings":"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","file":"globalStateResource.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IStorageEntry, IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { IUserDataProfile, ProfileResourceType } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { IUserDataProfileStorageService } from 'vs/platform/userDataProfile/common/userDataProfileStorageService';\nimport { API_OPEN_EDITOR_COMMAND_ID } from 'vs/workbench/browser/parts/editor/editorCommands';\nimport { ITreeItemCheckboxState, TreeItemCollapsibleState } from 'vs/workbench/common/views';\nimport { IProfileResource, IProfileResourceChildTreeItem, IProfileResourceInitializer, IProfileResourceTreeItem } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\n\ninterface IGlobalState {\n\tstorage: IStringDictionary<string>;\n}\n\nexport class GlobalStateResourceInitializer implements IProfileResourceInitializer {\n\n\tconstructor(@IStorageService private readonly storageService: IStorageService) {\n\t}\n\n\tasync initialize(content: string): Promise<void> {\n\t\tconst globalState: IGlobalState = JSON.parse(content);\n\t\tconst storageKeys = Object.keys(globalState.storage);\n\t\tif (storageKeys.length) {\n\t\t\tconst storageEntries: Array<IStorageEntry> = [];\n\t\t\tfor (const key of storageKeys) {\n\t\t\t\tstorageEntries.push({ key, value: globalState.storage[key], scope: StorageScope.PROFILE, target: StorageTarget.USER });\n\t\t\t}\n\t\t\tthis.storageService.storeAll(storageEntries, true);\n\t\t}\n\t}\n}\n\nexport class GlobalStateResource implements IProfileResource {\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IUserDataProfileStorageService private readonly userDataProfileStorageService: IUserDataProfileStorageService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t}\n\n\tasync getContent(profile: IUserDataProfile): Promise<string> {\n\t\tconst globalState = await this.getGlobalState(profile);\n\t\treturn JSON.stringify(globalState);\n\t}\n\n\tasync apply(content: string, profile: IUserDataProfile): Promise<void> {\n\t\tconst globalState: IGlobalState = JSON.parse(content);\n\t\tawait this.writeGlobalState(globalState, profile);\n\t}\n\n\tasync getGlobalState(profile: IUserDataProfile): Promise<IGlobalState> {\n\t\tconst storage: IStringDictionary<string> = {};\n\t\tconst storageData = await this.userDataProfileStorageService.readStorageData(profile);\n\t\tfor (const [key, value] of storageData) {\n\t\t\tif (value.value !== undefined && value.target === StorageTarget.USER) {\n\t\t\t\tstorage[key] = value.value;\n\t\t\t}\n\t\t}\n\t\treturn { storage };\n\t}\n\n\tprivate async writeGlobalState(globalState: IGlobalState, profile: IUserDataProfile): Promise<void> {\n\t\tconst storageKeys = Object.keys(globalState.storage);\n\t\tif (storageKeys.length) {\n\t\t\tconst updatedStorage = new Map<string, string | undefined>();\n\t\t\tconst nonProfileKeys = [\n\t\t\t\t// Do not include application scope user target keys because they also include default profile user target keys\n\t\t\t\t...this.storageService.keys(StorageScope.APPLICATION, StorageTarget.MACHINE),\n\t\t\t\t...this.storageService.keys(StorageScope.WORKSPACE, StorageTarget.USER),\n\t\t\t\t...this.storageService.keys(StorageScope.WORKSPACE, StorageTarget.MACHINE),\n\t\t\t];\n\t\t\tfor (const key of storageKeys) {\n\t\t\t\tif (nonProfileKeys.includes(key)) {\n\t\t\t\t\tthis.logService.info(`Importing Profile (${profile.name}): Ignoring global state key '${key}' because it is not a profile key.`);\n\t\t\t\t} else {\n\t\t\t\t\tupdatedStorage.set(key, globalState.storage[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait this.userDataProfileStorageService.updateStorageData(profile, updatedStorage, StorageTarget.USER);\n\t\t}\n\t}\n}\n\nexport abstract class GlobalStateResourceTreeItem implements IProfileResourceTreeItem {\n\n\treadonly type = ProfileResourceType.GlobalState;\n\treadonly handle = ProfileResourceType.GlobalState;\n\treadonly label = { label: localize('globalState', \"UI State\") };\n\treadonly collapsibleState = TreeItemCollapsibleState.Collapsed;\n\tcheckbox: ITreeItemCheckboxState | undefined;\n\n\tconstructor(\n\t\tprivate readonly resource: URI,\n\t\tprivate readonly uriIdentityService: IUriIdentityService\n\t) { }\n\n\tasync getChildren(): Promise<IProfileResourceChildTreeItem[]> {\n\t\treturn [{\n\t\t\thandle: this.resource.toString(),\n\t\t\tresourceUri: this.resource,\n\t\t\tcollapsibleState: TreeItemCollapsibleState.None,\n\t\t\taccessibilityInformation: {\n\t\t\t\tlabel: this.uriIdentityService.extUri.basename(this.resource)\n\t\t\t},\n\t\t\tparent: this,\n\t\t\tcommand: {\n\t\t\t\tid: API_OPEN_EDITOR_COMMAND_ID,\n\t\t\t\ttitle: '',\n\t\t\t\targuments: [this.resource, undefined, undefined]\n\t\t\t}\n\t\t}];\n\t}\n\n\tabstract getContent(): Promise<string>;\n\tabstract isFromDefaultProfile(): boolean;\n}\n\nexport class GlobalStateResourceExportTreeItem extends GlobalStateResourceTreeItem {\n\n\tconstructor(\n\t\tprivate readonly profile: IUserDataProfile,\n\t\tresource: URI,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService\n\t) {\n\t\tsuper(resource, uriIdentityService);\n\t}\n\n\tasync hasContent(): Promise<boolean> {\n\t\tconst globalState = await this.instantiationService.createInstance(GlobalStateResource).getGlobalState(this.profile);\n\t\treturn Object.keys(globalState.storage).length > 0;\n\t}\n\n\tasync getContent(): Promise<string> {\n\t\treturn this.instantiationService.createInstance(GlobalStateResource).getContent(this.profile);\n\t}\n\n\tisFromDefaultProfile(): boolean {\n\t\treturn !this.profile.isDefault && !!this.profile.useDefaultFlags?.globalState;\n\t}\n\n}\n\nexport class GlobalStateResourceImportTreeItem extends GlobalStateResourceTreeItem {\n\n\tconstructor(\n\t\tprivate readonly content: string,\n\t\tresource: URI,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper(resource, uriIdentityService);\n\t}\n\n\tasync getContent(): Promise<string> {\n\t\treturn this.content;\n\t}\n\n\tisFromDefaultProfile(): boolean {\n\t\treturn false;\n\t}\n\n}\n"]}