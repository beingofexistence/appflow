{"version":3,"sources":["vs/workbench/services/userDataProfile/common/userDataProfile.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAuBnF,QAAA,GAAG,GAAuB,IAAA,mBAAG,EAAsC,yBAAyB,CAAC,CAAC;IAc9F,QAAA,GAAG,GAAiC,IAAA,mBAAG,EAAgD,mCAAmC,CAAC,CAAC;IAsBzI,SAAgB,GAAG,CAAuB,KAAc;QACvD,MAAM,SAAS,GAAG,KAA6C,CAAC;QAEhE,OAAO,CAAC,CAAC,CAAC,SAAS,IAAI,OAAO,SAAS,KAAK,QAAQ;eAChD,CAAC,IAAA,WAAG,EAAS,SAAS,CAAC,QAAQ,CAAC,IAAI,OAAO,SAAS,CAAC,QAAQ,KAAK,QAAQ,CAAC;eAC3E,CAAC,IAAA,WAAG,EAAS,SAAS,CAAC,WAAW,CAAC,IAAI,OAAO,SAAS,CAAC,WAAW,KAAK,QAAQ,CAAC;eACjF,CAAC,IAAA,WAAG,EAAS,SAAS,CAAC,UAAU,CAAC,IAAI,OAAO,SAAS,CAAC,UAAU,KAAK,QAAQ,CAAC,CAAC,CAAC;IACtF,CAAC;IAPD,kBAOC;IAEY,QAAA,GAAG,GAAqB,SAAS,CAAC;IAC/C,SAAgB,GAAG,CAAkB,IAAY,EAAE,cAAmB;QACrE,OAAO,SAAG,CAAC,IAAI,CAAC;YACf,MAAM,EAAE,cAAc,CAAC,WAAW;YAClC,SAAS,EAAE,WAAG;YACd,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;SAC9C,CAAC,CAAC;IACJ,CAAC;IAND,kBAMC;IAOY,QAAA,GAAG,GAAmC,IAAA,mBAAG,EAAkD,qCAAqC,CAAC,CAAC;IAkDlI,QAAA,GAAG,GAA0B,IAAA,kBAAG,EAAU,qBAAqB,EAAE,cAAG,CAAK,QAAQ,EAAE,IAAA,cAAQ,EAAC,CAAoB,EAAE,IAA2B,CAAC,CAAC,CAAC;IAEhJ,QAAA,GAAG,GAAY,IAAI,aAAG,CAAI,UAAU,CAAC,CAAC;IACtC,QAAA,GAAG,GAAyB,mCAAmC,CAAC;IAChE,QAAA,GAAG,GAAc,EAAE,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAU,EAAE,IAAU,CAAC,EAAE,QAAQ,EAAE,UAAU,EAAE,CAAC;IACnF,QAAA,GAAG,GAAiB,EAAE,GAAG,WAAG,EAAa,CAAC;IAC1C,QAAA,GAAG,GAAiB,cAAc,CAAC;IACnC,QAAA,GAAG,GAAc,CAAC,EAAE,IAAI,EAAE,IAAA,cAAQ,EAAC,CAAS,EAAE,IAAS,CAAC,EAAE,UAAU,EAAE,CAAC,WAAG,CAAe,EAAE,CAAC,CAAC;IAC7F,QAAA,GAAG,GAA2B,IAAI,gBAAG,CAAoB,kBAAkB,EAAE,IAAI,CAAC,CAAC;IACnF,QAAA,GAAG,GAAuB,IAAI,gBAAG,CAAmB,gBAAgB,EAAE,EAAE,CAAC,CAAC;IAC1E,QAAA,GAAG,GAAoC,IAAI,gBAAG,CAAoB,2BAA2B,EAAE,KAAK,CAAC,CAAC;IACtG,QAAA,GAAG,GAAoB,IAAI,gBAAG,CAAoB,aAAa,EAAE,KAAK,CAAC,CAAC;IACxE,QAAA,GAAG,GAAqC,IAAI,gBAAG,CAAoB,2BAA2B,EAAE,KAAK,CAAC,CAAC;IACvG,QAAA,GAAG,GAAqC,IAAI,gBAAG,CAAoB,2BAA2B,EAAE,KAAK,CAAC,CAAC","file":"userDataProfile.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isUndefined } from 'vs/base/common/types';\nimport { Event } from 'vs/base/common/event';\nimport { localize } from 'vs/nls';\nimport { MenuId } from 'vs/platform/actions/common/actions';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IUserDataProfile, IUserDataProfileOptions, IUserDataProfileUpdateOptions, ProfileResourceType } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { URI } from 'vs/base/common/uri';\nimport { registerIcon } from 'vs/platform/theme/common/iconRegistry';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { ITreeItem, ITreeItemLabel } from 'vs/workbench/common/views';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { IProductService } from 'vs/platform/product/common/productService';\n\nexport interface DidChangeUserDataProfileEvent {\n\treadonly previous: IUserDataProfile;\n\treadonly profile: IUserDataProfile;\n\tjoin(promise: Promise<void>): void;\n}\n\nexport const IUserDataProfileService = createDecorator<IUserDataProfileService>('IUserDataProfileService');\nexport interface IUserDataProfileService {\n\treadonly _serviceBrand: undefined;\n\treadonly currentProfile: IUserDataProfile;\n\treadonly onDidChangeCurrentProfile: Event<DidChangeUserDataProfileEvent>;\n\tupdateCurrentProfile(currentProfile: IUserDataProfile): Promise<void>;\n\tgetShortName(profile: IUserDataProfile): string;\n}\n\nexport interface IProfileTemplateInfo {\n\treadonly name: string;\n\treadonly url: string;\n}\n\nexport const IUserDataProfileManagementService = createDecorator<IUserDataProfileManagementService>('IUserDataProfileManagementService');\nexport interface IUserDataProfileManagementService {\n\treadonly _serviceBrand: undefined;\n\n\tcreateAndEnterProfile(name: string, options?: IUserDataProfileOptions): Promise<IUserDataProfile>;\n\tcreateAndEnterTransientProfile(): Promise<IUserDataProfile>;\n\tremoveProfile(profile: IUserDataProfile): Promise<void>;\n\tupdateProfile(profile: IUserDataProfile, updateOptions: IUserDataProfileUpdateOptions): Promise<void>;\n\tswitchProfile(profile: IUserDataProfile): Promise<void>;\n\tgetBuiltinProfileTemplates(): Promise<IProfileTemplateInfo[]>;\n\n}\n\nexport interface IUserDataProfileTemplate {\n\treadonly settings?: string;\n\treadonly keybindings?: string;\n\treadonly tasks?: string;\n\treadonly snippets?: string;\n\treadonly globalState?: string;\n\treadonly extensions?: string;\n}\n\nexport function isUserDataProfileTemplate(thing: unknown): thing is IUserDataProfileTemplate {\n\tconst candidate = thing as IUserDataProfileTemplate | undefined;\n\n\treturn !!(candidate && typeof candidate === 'object'\n\t\t&& (isUndefined(candidate.settings) || typeof candidate.settings === 'string')\n\t\t&& (isUndefined(candidate.globalState) || typeof candidate.globalState === 'string')\n\t\t&& (isUndefined(candidate.extensions) || typeof candidate.extensions === 'string'));\n}\n\nexport const PROFILE_URL_AUTHORITY = 'profile';\nexport function toUserDataProfileUri(path: string, productService: IProductService): URI {\n\treturn URI.from({\n\t\tscheme: productService.urlProtocol,\n\t\tauthority: PROFILE_URL_AUTHORITY,\n\t\tpath: path.startsWith('/') ? path : `/${path}`\n\t});\n}\n\nexport interface IProfileImportOptions extends IUserDataProfileOptions {\n\treadonly name?: string;\n\treadonly mode?: 'preview' | 'apply' | 'both';\n}\n\nexport const IUserDataProfileImportExportService = createDecorator<IUserDataProfileImportExportService>('IUserDataProfileImportExportService');\nexport interface IUserDataProfileImportExportService {\n\treadonly _serviceBrand: undefined;\n\n\tregisterProfileContentHandler(id: string, profileContentHandler: IUserDataProfileContentHandler): IDisposable;\n\tunregisterProfileContentHandler(id: string): void;\n\n\texportProfile(): Promise<void>;\n\timportProfile(uri: URI, options?: IProfileImportOptions): Promise<void>;\n\tshowProfileContents(): Promise<void>;\n\tcreateProfile(from?: IUserDataProfile | URI): Promise<void>;\n\teditProfile(profile: IUserDataProfile): Promise<void>;\n\tcreateTroubleshootProfile(): Promise<void>;\n\tsetProfile(profile: IUserDataProfileTemplate): Promise<void>;\n}\n\nexport interface IProfileResourceInitializer {\n\tinitialize(content: string): Promise<void>;\n}\n\nexport interface IProfileResource {\n\tgetContent(profile: IUserDataProfile): Promise<string>;\n\tapply(content: string, profile: IUserDataProfile): Promise<void>;\n}\n\nexport interface IProfileResourceTreeItem extends ITreeItem {\n\treadonly type: ProfileResourceType;\n\treadonly label: ITreeItemLabel;\n\tisFromDefaultProfile(): boolean;\n\tgetChildren(): Promise<IProfileResourceChildTreeItem[] | undefined>;\n\tgetContent(): Promise<string>;\n}\n\nexport interface IProfileResourceChildTreeItem extends ITreeItem {\n\tparent: IProfileResourceTreeItem;\n}\n\nexport interface ISaveProfileResult {\n\treadonly id: string;\n\treadonly link: URI;\n}\n\nexport interface IUserDataProfileContentHandler {\n\treadonly name: string;\n\treadonly description?: string;\n\treadonly extensionId?: string;\n\tsaveProfile(name: string, content: string, token: CancellationToken): Promise<ISaveProfileResult | null>;\n\treadProfile(idOrUri: string | URI, token: CancellationToken): Promise<string | null>;\n}\n\nexport const defaultUserDataProfileIcon = registerIcon('defaultProfile-icon', Codicon.settings, localize('defaultProfileIcon', 'Icon for Default Profile.'));\n\nexport const ProfilesMenu = new MenuId('Profiles');\nexport const MANAGE_PROFILES_ACTION_ID = 'workbench.profiles.actions.manage';\nexport const PROFILES_TITLE = { value: localize('profiles', \"Profiles\"), original: 'Profiles' };\nexport const PROFILES_CATEGORY = { ...PROFILES_TITLE };\nexport const PROFILE_EXTENSION = 'code-profile';\nexport const PROFILE_FILTER = [{ name: localize('profile', \"Profile\"), extensions: [PROFILE_EXTENSION] }];\nexport const PROFILES_ENABLEMENT_CONTEXT = new RawContextKey<boolean>('profiles.enabled', true);\nexport const CURRENT_PROFILE_CONTEXT = new RawContextKey<string>('currentProfile', '');\nexport const IS_CURRENT_PROFILE_TRANSIENT_CONTEXT = new RawContextKey<boolean>('isCurrentProfileTransient', false);\nexport const HAS_PROFILES_CONTEXT = new RawContextKey<boolean>('hasProfiles', false);\nexport const IS_PROFILE_EXPORT_IN_PROGRESS_CONTEXT = new RawContextKey<boolean>('isProfileExportInProgress', false);\nexport const IS_PROFILE_IMPORT_IN_PROGRESS_CONTEXT = new RawContextKey<boolean>('isProfileImportInProgress', false);\n"]}