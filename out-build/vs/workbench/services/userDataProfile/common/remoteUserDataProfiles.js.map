{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/userDataProfile/common/remoteUserDataProfiles.ts"],"names":[],"mappings":"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","file":"remoteUserDataProfiles.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { DidChangeProfilesEvent, IUserDataProfile, IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\nimport { distinct } from 'vs/base/common/arrays';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { UserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfileIpc';\n\nconst associatedRemoteProfilesKey = 'associatedRemoteProfiles';\n\nexport const IRemoteUserDataProfilesService = createDecorator<IRemoteUserDataProfilesService>('IRemoteUserDataProfilesService');\nexport interface IRemoteUserDataProfilesService {\n\treadonly _serviceBrand: undefined;\n\tgetRemoteProfiles(): Promise<readonly IUserDataProfile[]>;\n\tgetRemoteProfile(localProfile: IUserDataProfile): Promise<IUserDataProfile>;\n}\n\nclass RemoteUserDataProfilesService extends Disposable implements IRemoteUserDataProfilesService {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly initPromise: Promise<void>;\n\n\tprivate remoteUserDataProfilesService: IUserDataProfilesService | undefined;\n\n\tconstructor(\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IRemoteAgentService private readonly remoteAgentService: IRemoteAgentService,\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis.initPromise = this.init();\n\t}\n\n\tprivate async init(): Promise<void> {\n\t\tconst connection = this.remoteAgentService.getConnection();\n\t\tif (!connection) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst environment = await this.remoteAgentService.getEnvironment();\n\t\tif (!environment) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.remoteUserDataProfilesService = new UserDataProfilesService(environment.profiles.all, environment.profiles.home, connection.getChannel('userDataProfiles'));\n\t\tthis._register(this.userDataProfilesService.onDidChangeProfiles(e => this.onDidChangeLocalProfiles(e)));\n\n\t\t// Associate current local profile with remote profile\n\t\tconst remoteProfile = await this.getAssociatedRemoteProfile(this.userDataProfileService.currentProfile, this.remoteUserDataProfilesService);\n\t\tif (!remoteProfile.isDefault) {\n\t\t\tthis.setAssociatedRemoteProfiles([...this.getAssociatedRemoteProfiles(), remoteProfile.id]);\n\t\t}\n\n\t\tthis.cleanUp();\n\t}\n\n\tprivate async onDidChangeLocalProfiles(e: DidChangeProfilesEvent): Promise<void> {\n\t\tfor (const profile of e.removed) {\n\t\t\tconst remoteProfile = this.remoteUserDataProfilesService?.profiles.find(p => p.id === profile.id);\n\t\t\tif (remoteProfile) {\n\t\t\t\tawait this.remoteUserDataProfilesService?.removeProfile(remoteProfile);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync getRemoteProfiles(): Promise<readonly IUserDataProfile[]> {\n\t\tawait this.initPromise;\n\n\t\tif (!this.remoteUserDataProfilesService) {\n\t\t\tthrow new Error('Remote profiles service not available in the current window');\n\t\t}\n\n\t\treturn this.remoteUserDataProfilesService.profiles;\n\t}\n\n\tasync getRemoteProfile(localProfile: IUserDataProfile): Promise<IUserDataProfile> {\n\t\tawait this.initPromise;\n\n\t\tif (!this.remoteUserDataProfilesService) {\n\t\t\tthrow new Error('Remote profiles service not available in the current window');\n\t\t}\n\n\t\treturn this.getAssociatedRemoteProfile(localProfile, this.remoteUserDataProfilesService);\n\t}\n\n\tprivate async getAssociatedRemoteProfile(localProfile: IUserDataProfile, remoteUserDataProfilesService: IUserDataProfilesService): Promise<IUserDataProfile> {\n\t\t// If the local profile is the default profile, return the remote default profile\n\t\tif (localProfile.isDefault) {\n\t\t\treturn remoteUserDataProfilesService.defaultProfile;\n\t\t}\n\n\t\tlet profile = remoteUserDataProfilesService.profiles.find(p => p.id === localProfile.id);\n\t\tif (!profile) {\n\t\t\tprofile = await remoteUserDataProfilesService.createProfile(localProfile.id, localProfile.name, {\n\t\t\t\tshortName: localProfile.shortName,\n\t\t\t\ttransient: localProfile.isTransient,\n\t\t\t\tuseDefaultFlags: localProfile.useDefaultFlags,\n\t\t\t});\n\t\t\tthis.setAssociatedRemoteProfiles([...this.getAssociatedRemoteProfiles(), this.userDataProfileService.currentProfile.id]);\n\t\t}\n\t\treturn profile;\n\t}\n\n\tprivate getAssociatedRemoteProfiles(): string[] {\n\t\tif (this.environmentService.remoteAuthority) {\n\t\t\tconst remotes = this.parseAssociatedRemoteProfiles();\n\t\t\treturn remotes[this.environmentService.remoteAuthority] ?? [];\n\t\t}\n\t\treturn [];\n\t}\n\n\tprivate setAssociatedRemoteProfiles(profiles: string[]): void {\n\t\tif (this.environmentService.remoteAuthority) {\n\t\t\tconst remotes = this.parseAssociatedRemoteProfiles();\n\t\t\tprofiles = distinct(profiles);\n\t\t\tif (profiles.length) {\n\t\t\t\tremotes[this.environmentService.remoteAuthority] = profiles;\n\t\t\t} else {\n\t\t\t\tdelete remotes[this.environmentService.remoteAuthority];\n\t\t\t}\n\t\t\tif (Object.keys(remotes).length) {\n\t\t\t\tthis.storageService.store(associatedRemoteProfilesKey, JSON.stringify(remotes), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t\t} else {\n\t\t\t\tthis.storageService.remove(associatedRemoteProfilesKey, StorageScope.APPLICATION);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate parseAssociatedRemoteProfiles(): IStringDictionary<string[]> {\n\t\tif (this.environmentService.remoteAuthority) {\n\t\t\tconst value = this.storageService.get(associatedRemoteProfilesKey, StorageScope.APPLICATION);\n\t\t\ttry {\n\t\t\t\treturn value ? JSON.parse(value) : {};\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\t\treturn {};\n\t}\n\n\tprivate async cleanUp(): Promise<void> {\n\t\tconst associatedRemoteProfiles: string[] = [];\n\t\tfor (const profileId of this.getAssociatedRemoteProfiles()) {\n\t\t\tconst remoteProfile = this.remoteUserDataProfilesService?.profiles.find(p => p.id === profileId);\n\t\t\tif (!remoteProfile) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst localProfile = this.userDataProfilesService.profiles.find(p => p.id === profileId);\n\t\t\tif (localProfile) {\n\t\t\t\tif (localProfile.name !== remoteProfile.name || localProfile.shortName !== remoteProfile.shortName) {\n\t\t\t\t\tawait this.remoteUserDataProfilesService?.updateProfile(remoteProfile, { name: localProfile.name, shortName: localProfile.shortName });\n\t\t\t\t}\n\t\t\t\tassociatedRemoteProfiles.push(profileId);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (remoteProfile) {\n\t\t\t\t// Cleanup remote profiles those are not available locally\n\t\t\t\tawait this.remoteUserDataProfilesService?.removeProfile(remoteProfile);\n\t\t\t}\n\t\t}\n\t\tthis.setAssociatedRemoteProfiles(associatedRemoteProfiles);\n\t}\n\n}\n\nregisterSingleton(IRemoteUserDataProfilesService, RemoteUserDataProfilesService, InstantiationType.Delayed);\n"]}