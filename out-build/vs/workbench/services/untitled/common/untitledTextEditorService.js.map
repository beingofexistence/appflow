{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/untitled/common/untitledTextEditorService.ts"],"names":[],"mappings":"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","file":"untitledTextEditorService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { createDecorator, IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { UntitledTextEditorModel, IUntitledTextEditorModel } from 'vs/workbench/services/untitled/common/untitledTextEditorModel';\nimport { IFilesConfiguration } from 'vs/platform/files/common/files';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { ResourceMap } from 'vs/base/common/map';\nimport { Schemas } from 'vs/base/common/network';\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\nexport const IUntitledTextEditorService = createDecorator<IUntitledTextEditorService>('untitledTextEditorService');\n\nexport interface INewUntitledTextEditorOptions {\n\n\t/**\n\t * Initial value of the untitled editor. An untitled editor with initial\n\t * value is dirty right from the beginning.\n\t */\n\tinitialValue?: string;\n\n\t/**\n\t * Preferred language id to use when saving the untitled editor.\n\t */\n\tlanguageId?: string;\n\n\t/**\n\t * Preferred encoding to use when saving the untitled editor.\n\t */\n\tencoding?: string;\n}\n\nexport interface IExistingUntitledTextEditorOptions extends INewUntitledTextEditorOptions {\n\n\t/**\n\t * A resource to identify the untitled editor to create or return\n\t * if already existing.\n\t *\n\t * Note: the resource will not be used unless the scheme is `untitled`.\n\t */\n\tuntitledResource?: URI;\n}\n\nexport interface INewUntitledTextEditorWithAssociatedResourceOptions extends INewUntitledTextEditorOptions {\n\n\t/**\n\t * Resource components to associate with the untitled editor. When saving\n\t * the untitled editor, the associated components will be used and the user\n\t * is not being asked to provide a file path.\n\t *\n\t * Note: currently it is not possible to specify the `scheme` to use. The\n\t * untitled editor will saved to the default local or remote resource.\n\t */\n\tassociatedResource?: { authority: string; path: string; query: string; fragment: string };\n}\n\ntype IInternalUntitledTextEditorOptions = IExistingUntitledTextEditorOptions & INewUntitledTextEditorWithAssociatedResourceOptions;\n\nexport interface IUntitledTextEditorModelManager {\n\n\t/**\n\t * Events for when untitled text editors change (e.g. getting dirty, saved or reverted).\n\t */\n\treadonly onDidChangeDirty: Event<IUntitledTextEditorModel>;\n\n\t/**\n\t * Events for when untitled text editor encodings change.\n\t */\n\treadonly onDidChangeEncoding: Event<IUntitledTextEditorModel>;\n\n\t/**\n\t * Events for when untitled text editor labels change.\n\t */\n\treadonly onDidChangeLabel: Event<IUntitledTextEditorModel>;\n\n\t/**\n\t * Events for when untitled text editors are about to be disposed.\n\t */\n\treadonly onWillDispose: Event<IUntitledTextEditorModel>;\n\n\t/**\n\t * Creates a new untitled editor model with the provided options. If the `untitledResource`\n\t * property is provided and the untitled editor exists, it will return that existing\n\t * instance instead of creating a new one.\n\t */\n\tcreate(options?: INewUntitledTextEditorOptions): IUntitledTextEditorModel;\n\tcreate(options?: INewUntitledTextEditorWithAssociatedResourceOptions): IUntitledTextEditorModel;\n\tcreate(options?: IExistingUntitledTextEditorOptions): IUntitledTextEditorModel;\n\n\t/**\n\t * Returns an existing untitled editor model if already created before.\n\t */\n\tget(resource: URI): IUntitledTextEditorModel | undefined;\n\n\t/**\n\t * Returns the value of the untitled editor, undefined if none exists\n\t * @param resource The URI of the untitled file\n\t * @returns The content, or undefined\n\t */\n\tgetValue(resource: URI): string | undefined;\n\n\t/**\n\t * Resolves an untitled editor model from the provided options. If the `untitledResource`\n\t * property is provided and the untitled editor exists, it will return that existing\n\t * instance instead of creating a new one.\n\t */\n\tresolve(options?: INewUntitledTextEditorOptions): Promise<IUntitledTextEditorModel>;\n\tresolve(options?: INewUntitledTextEditorWithAssociatedResourceOptions): Promise<IUntitledTextEditorModel>;\n\tresolve(options?: IExistingUntitledTextEditorOptions): Promise<IUntitledTextEditorModel>;\n\n\t/**\n\t * Figures out if the given resource has an associated resource or not.\n\t */\n\tisUntitledWithAssociatedResource(resource: URI): boolean;\n}\n\nexport interface IUntitledTextEditorService extends IUntitledTextEditorModelManager {\n\n\treadonly _serviceBrand: undefined;\n}\n\nexport class UntitledTextEditorService extends Disposable implements IUntitledTextEditorService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static readonly UNTITLED_WITHOUT_ASSOCIATED_RESOURCE_REGEX = /Untitled-\\d+/;\n\n\tprivate readonly _onDidChangeDirty = this._register(new Emitter<IUntitledTextEditorModel>());\n\treadonly onDidChangeDirty = this._onDidChangeDirty.event;\n\n\tprivate readonly _onDidChangeEncoding = this._register(new Emitter<IUntitledTextEditorModel>());\n\treadonly onDidChangeEncoding = this._onDidChangeEncoding.event;\n\n\tprivate readonly _onWillDispose = this._register(new Emitter<IUntitledTextEditorModel>());\n\treadonly onWillDispose = this._onWillDispose.event;\n\n\tprivate readonly _onDidChangeLabel = this._register(new Emitter<IUntitledTextEditorModel>());\n\treadonly onDidChangeLabel = this._onDidChangeLabel.event;\n\n\tprivate readonly mapResourceToModel = new ResourceMap<UntitledTextEditorModel>();\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\t}\n\n\tget(resource: URI): UntitledTextEditorModel | undefined {\n\t\treturn this.mapResourceToModel.get(resource);\n\t}\n\n\tgetValue(resource: URI): string | undefined {\n\t\treturn this.get(resource)?.textEditorModel?.getValue();\n\t}\n\n\tasync resolve(options?: IInternalUntitledTextEditorOptions): Promise<UntitledTextEditorModel> {\n\t\tconst model = this.doCreateOrGet(options);\n\t\tawait model.resolve();\n\n\t\treturn model;\n\t}\n\n\tcreate(options?: IInternalUntitledTextEditorOptions): UntitledTextEditorModel {\n\t\treturn this.doCreateOrGet(options);\n\t}\n\n\tprivate doCreateOrGet(options: IInternalUntitledTextEditorOptions = Object.create(null)): UntitledTextEditorModel {\n\t\tconst massagedOptions = this.massageOptions(options);\n\n\t\t// Return existing instance if asked for it\n\t\tif (massagedOptions.untitledResource && this.mapResourceToModel.has(massagedOptions.untitledResource)) {\n\t\t\treturn this.mapResourceToModel.get(massagedOptions.untitledResource)!;\n\t\t}\n\n\t\t// Create new instance otherwise\n\t\treturn this.doCreate(massagedOptions);\n\t}\n\n\tprivate massageOptions(options: IInternalUntitledTextEditorOptions): IInternalUntitledTextEditorOptions {\n\t\tconst massagedOptions: IInternalUntitledTextEditorOptions = Object.create(null);\n\n\t\t// Figure out associated and untitled resource\n\t\tif (options.associatedResource) {\n\t\t\tmassagedOptions.untitledResource = URI.from({\n\t\t\t\tscheme: Schemas.untitled,\n\t\t\t\tauthority: options.associatedResource.authority,\n\t\t\t\tfragment: options.associatedResource.fragment,\n\t\t\t\tpath: options.associatedResource.path,\n\t\t\t\tquery: options.associatedResource.query\n\t\t\t});\n\t\t\tmassagedOptions.associatedResource = options.associatedResource;\n\t\t} else {\n\t\t\tif (options.untitledResource?.scheme === Schemas.untitled) {\n\t\t\t\tmassagedOptions.untitledResource = options.untitledResource;\n\t\t\t}\n\t\t}\n\n\t\t// Language id\n\t\tif (options.languageId) {\n\t\t\tmassagedOptions.languageId = options.languageId;\n\t\t} else if (!massagedOptions.associatedResource) {\n\t\t\tconst configuration = this.configurationService.getValue<IFilesConfiguration>();\n\t\t\tif (configuration.files?.defaultLanguage) {\n\t\t\t\tmassagedOptions.languageId = configuration.files.defaultLanguage;\n\t\t\t}\n\t\t}\n\n\t\t// Take over encoding and initial value\n\t\tmassagedOptions.encoding = options.encoding;\n\t\tmassagedOptions.initialValue = options.initialValue;\n\n\t\treturn massagedOptions;\n\t}\n\n\tprivate doCreate(options: IInternalUntitledTextEditorOptions): UntitledTextEditorModel {\n\n\t\t// Create a new untitled resource if none is provided\n\t\tlet untitledResource = options.untitledResource;\n\t\tif (!untitledResource) {\n\t\t\tlet counter = 1;\n\t\t\tdo {\n\t\t\t\tuntitledResource = URI.from({ scheme: Schemas.untitled, path: `Untitled-${counter}` });\n\t\t\t\tcounter++;\n\t\t\t} while (this.mapResourceToModel.has(untitledResource));\n\t\t}\n\n\t\t// Create new model with provided options\n\t\tconst model = this._register(this.instantiationService.createInstance(UntitledTextEditorModel, untitledResource, !!options.associatedResource, options.initialValue, options.languageId, options.encoding));\n\n\t\tthis.registerModel(model);\n\n\t\treturn model;\n\t}\n\n\tprivate registerModel(model: UntitledTextEditorModel): void {\n\n\t\t// Install model listeners\n\t\tconst modelListeners = new DisposableStore();\n\t\tmodelListeners.add(model.onDidChangeDirty(() => this._onDidChangeDirty.fire(model)));\n\t\tmodelListeners.add(model.onDidChangeName(() => this._onDidChangeLabel.fire(model)));\n\t\tmodelListeners.add(model.onDidChangeEncoding(() => this._onDidChangeEncoding.fire(model)));\n\t\tmodelListeners.add(model.onWillDispose(() => this._onWillDispose.fire(model)));\n\n\t\t// Remove from cache on dispose\n\t\tEvent.once(model.onWillDispose)(() => {\n\n\t\t\t// Registry\n\t\t\tthis.mapResourceToModel.delete(model.resource);\n\n\t\t\t// Listeners\n\t\t\tmodelListeners.dispose();\n\t\t});\n\n\t\t// Add to cache\n\t\tthis.mapResourceToModel.set(model.resource, model);\n\n\t\t// If the model is dirty right from the beginning,\n\t\t// make sure to emit this as an event\n\t\tif (model.isDirty()) {\n\t\t\tthis._onDidChangeDirty.fire(model);\n\t\t}\n\t}\n\n\tisUntitledWithAssociatedResource(resource: URI): boolean {\n\t\treturn resource.scheme === Schemas.untitled && resource.path.length > 1 && !UntitledTextEditorService.UNTITLED_WITHOUT_ASSOCIATED_RESOURCE_REGEX.test(resource.path);\n\t}\n}\n\nregisterSingleton(IUntitledTextEditorService, UntitledTextEditorService, InstantiationType.Delayed);\n"]}