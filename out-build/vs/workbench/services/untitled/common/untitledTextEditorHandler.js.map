{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/untitled/common/untitledTextEditorHandler.ts"],"names":[],"mappings":"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","file":"untitledTextEditorHandler.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from 'vs/base/common/network';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { IEditorSerializer } from 'vs/workbench/common/editor';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { ITextEditorService } from 'vs/workbench/services/textfile/common/textEditorService';\nimport { isEqual, toLocalResource } from 'vs/base/common/resources';\nimport { PLAINTEXT_LANGUAGE_ID } from 'vs/editor/common/languages/modesRegistry';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IFilesConfigurationService } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\nimport { IPathService } from 'vs/workbench/services/path/common/pathService';\nimport { UntitledTextEditorInput } from 'vs/workbench/services/untitled/common/untitledTextEditorInput';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IWorkingCopyIdentifier, NO_TYPE_ID } from 'vs/workbench/services/workingCopy/common/workingCopy';\nimport { IWorkingCopyEditorHandler, IWorkingCopyEditorService } from 'vs/workbench/services/workingCopy/common/workingCopyEditorService';\nimport { IUntitledTextEditorService } from 'vs/workbench/services/untitled/common/untitledTextEditorService';\n\ninterface ISerializedUntitledTextEditorInput {\n\treadonly resourceJSON: UriComponents;\n\treadonly modeId: string | undefined; // should be `languageId` but is kept for backwards compatibility\n\treadonly encoding: string | undefined;\n}\n\nexport class UntitledTextEditorInputSerializer implements IEditorSerializer {\n\n\tconstructor(\n\t\t@IFilesConfigurationService private readonly filesConfigurationService: IFilesConfigurationService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IPathService private readonly pathService: IPathService\n\t) { }\n\n\tcanSerialize(editorInput: EditorInput): boolean {\n\t\treturn this.filesConfigurationService.isHotExitEnabled && !editorInput.isDisposed();\n\t}\n\n\tserialize(editorInput: EditorInput): string | undefined {\n\t\tif (!this.filesConfigurationService.isHotExitEnabled || editorInput.isDisposed()) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst untitledTextEditorInput = editorInput as UntitledTextEditorInput;\n\n\t\tlet resource = untitledTextEditorInput.resource;\n\t\tif (untitledTextEditorInput.model.hasAssociatedFilePath) {\n\t\t\tresource = toLocalResource(resource, this.environmentService.remoteAuthority, this.pathService.defaultUriScheme); // untitled with associated file path use the local schema\n\t\t}\n\n\t\t// Language: only remember language if it is either specific (not text)\n\t\t// or if the language was explicitly set by the user. We want to preserve\n\t\t// this information across restarts and not set the language unless\n\t\t// this is the case.\n\t\tlet languageId: string | undefined;\n\t\tconst languageIdCandidate = untitledTextEditorInput.getLanguageId();\n\t\tif (languageIdCandidate !== PLAINTEXT_LANGUAGE_ID) {\n\t\t\tlanguageId = languageIdCandidate;\n\t\t} else if (untitledTextEditorInput.model.hasLanguageSetExplicitly) {\n\t\t\tlanguageId = languageIdCandidate;\n\t\t}\n\n\t\tconst serialized: ISerializedUntitledTextEditorInput = {\n\t\t\tresourceJSON: resource.toJSON(),\n\t\t\tmodeId: languageId,\n\t\t\tencoding: untitledTextEditorInput.getEncoding()\n\t\t};\n\n\t\treturn JSON.stringify(serialized);\n\t}\n\n\tdeserialize(instantiationService: IInstantiationService, serializedEditorInput: string): UntitledTextEditorInput {\n\t\treturn instantiationService.invokeFunction(accessor => {\n\t\t\tconst deserialized: ISerializedUntitledTextEditorInput = JSON.parse(serializedEditorInput);\n\t\t\tconst resource = URI.revive(deserialized.resourceJSON);\n\t\t\tconst languageId = deserialized.modeId;\n\t\t\tconst encoding = deserialized.encoding;\n\n\t\t\treturn accessor.get(ITextEditorService).createTextEditor({ resource, languageId, encoding, forceUntitled: true }) as UntitledTextEditorInput;\n\t\t});\n\t}\n}\n\nexport class UntitledTextEditorWorkingCopyEditorHandler extends Disposable implements IWorkbenchContribution, IWorkingCopyEditorHandler {\n\n\tconstructor(\n\t\t@IWorkingCopyEditorService workingCopyEditorService: IWorkingCopyEditorService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IPathService private readonly pathService: IPathService,\n\t\t@ITextEditorService private readonly textEditorService: ITextEditorService,\n\t\t@IUntitledTextEditorService private readonly untitledTextEditorService: IUntitledTextEditorService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(workingCopyEditorService.registerHandler(this));\n\t}\n\n\thandles(workingCopy: IWorkingCopyIdentifier): boolean {\n\t\treturn workingCopy.resource.scheme === Schemas.untitled && workingCopy.typeId === NO_TYPE_ID;\n\t}\n\n\tisOpen(workingCopy: IWorkingCopyIdentifier, editor: EditorInput): boolean {\n\t\tif (!this.handles(workingCopy)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn editor instanceof UntitledTextEditorInput && isEqual(workingCopy.resource, editor.resource);\n\t}\n\n\tcreateEditor(workingCopy: IWorkingCopyIdentifier): EditorInput {\n\t\tlet editorInputResource: URI;\n\n\t\t// If the untitled has an associated resource,\n\t\t// ensure to restore the local resource it had\n\t\tif (this.untitledTextEditorService.isUntitledWithAssociatedResource(workingCopy.resource)) {\n\t\t\teditorInputResource = toLocalResource(workingCopy.resource, this.environmentService.remoteAuthority, this.pathService.defaultUriScheme);\n\t\t} else {\n\t\t\teditorInputResource = workingCopy.resource;\n\t\t}\n\n\t\treturn this.textEditorService.createTextEditor({ resource: editorInputResource, forceUntitled: true });\n\t}\n}\n"]}