{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/untitled/common/untitledTextEditorInput.ts"],"names":[],"mappings":"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","file":"untitledTextEditorInput.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { DEFAULT_EDITOR_ASSOCIATION, findViewStateForEditor, GroupIdentifier, isUntitledResourceEditorInput, IUntitledTextResourceEditorInput, IUntypedEditorInput, Verbosity } from 'vs/workbench/common/editor';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { AbstractTextResourceEditorInput } from 'vs/workbench/common/editor/textResourceEditorInput';\nimport { IUntitledTextEditorModel } from 'vs/workbench/services/untitled/common/untitledTextEditorModel';\nimport { EncodingMode, IEncodingSupport, ILanguageSupport, ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { isEqual, toLocalResource } from 'vs/base/common/resources';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IPathService } from 'vs/workbench/services/path/common/pathService';\nimport { ITextEditorOptions } from 'vs/platform/editor/common/editor';\nimport { IFilesConfigurationService } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\n\n/**\n * An editor input to be used for untitled text buffers.\n */\nexport class UntitledTextEditorInput extends AbstractTextResourceEditorInput implements IEncodingSupport, ILanguageSupport {\n\n\tstatic readonly ID: string = 'workbench.editors.untitledEditorInput';\n\n\toverride get typeId(): string {\n\t\treturn UntitledTextEditorInput.ID;\n\t}\n\n\toverride get editorId(): string | undefined {\n\t\treturn DEFAULT_EDITOR_ASSOCIATION.id;\n\t}\n\n\tprivate modelResolve: Promise<void> | undefined = undefined;\n\n\tconstructor(\n\t\treadonly model: IUntitledTextEditorModel,\n\t\t@ITextFileService textFileService: ITextFileService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IPathService private readonly pathService: IPathService,\n\t\t@IFilesConfigurationService filesConfigurationService: IFilesConfigurationService\n\t) {\n\t\tsuper(model.resource, undefined, editorService, textFileService, labelService, fileService, filesConfigurationService);\n\n\t\tthis.registerModelListeners(model);\n\t}\n\n\tprivate registerModelListeners(model: IUntitledTextEditorModel): void {\n\n\t\t// re-emit some events from the model\n\t\tthis._register(model.onDidChangeDirty(() => this._onDidChangeDirty.fire()));\n\t\tthis._register(model.onDidChangeName(() => this._onDidChangeLabel.fire()));\n\n\t\t// a reverted untitled text editor model renders this input disposed\n\t\tthis._register(model.onDidRevert(() => this.dispose()));\n\t}\n\n\toverride getName(): string {\n\t\treturn this.model.name;\n\t}\n\n\toverride getDescription(verbosity = Verbosity.MEDIUM): string | undefined {\n\n\t\t// Without associated path: only use if name and description differ\n\t\tif (!this.model.hasAssociatedFilePath) {\n\t\t\tconst descriptionCandidate = this.resource.path;\n\t\t\tif (descriptionCandidate !== this.getName()) {\n\t\t\t\treturn descriptionCandidate;\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// With associated path: delegate to parent\n\t\treturn super.getDescription(verbosity);\n\t}\n\n\toverride getTitle(verbosity: Verbosity): string {\n\n\t\t// Without associated path: check if name and description differ to decide\n\t\t// if description should appear besides the name to distinguish better\n\t\tif (!this.model.hasAssociatedFilePath) {\n\t\t\tconst name = this.getName();\n\t\t\tconst description = this.getDescription();\n\t\t\tif (description && description !== name) {\n\t\t\t\treturn `${name} â€¢ ${description}`;\n\t\t\t}\n\n\t\t\treturn name;\n\t\t}\n\n\t\t// With associated path: delegate to parent\n\t\treturn super.getTitle(verbosity);\n\t}\n\n\toverride isDirty(): boolean {\n\t\treturn this.model.isDirty();\n\t}\n\n\tgetEncoding(): string | undefined {\n\t\treturn this.model.getEncoding();\n\t}\n\n\tsetEncoding(encoding: string, mode: EncodingMode /* ignored, we only have Encode */): Promise<void> {\n\t\treturn this.model.setEncoding(encoding);\n\t}\n\n\tsetLanguageId(languageId: string, source?: string): void {\n\t\tthis.model.setLanguageId(languageId, source);\n\t}\n\n\tgetLanguageId(): string | undefined {\n\t\treturn this.model.getLanguageId();\n\t}\n\n\toverride async resolve(): Promise<IUntitledTextEditorModel> {\n\t\tif (!this.modelResolve) {\n\t\t\tthis.modelResolve = this.model.resolve();\n\t\t}\n\n\t\tawait this.modelResolve;\n\n\t\treturn this.model;\n\t}\n\n\toverride toUntyped(options?: { preserveViewState: GroupIdentifier }): IUntitledTextResourceEditorInput {\n\t\tconst untypedInput: IUntitledTextResourceEditorInput & { resource: URI | undefined; options: ITextEditorOptions } = {\n\t\t\tresource: this.model.hasAssociatedFilePath ? toLocalResource(this.model.resource, this.environmentService.remoteAuthority, this.pathService.defaultUriScheme) : this.resource,\n\t\t\tforceUntitled: true,\n\t\t\toptions: {\n\t\t\t\toverride: this.editorId\n\t\t\t}\n\t\t};\n\n\t\tif (typeof options?.preserveViewState === 'number') {\n\t\t\tuntypedInput.encoding = this.getEncoding();\n\t\t\tuntypedInput.languageId = this.getLanguageId();\n\t\t\tuntypedInput.contents = this.model.isModified() ? this.model.textEditorModel?.getValue() : undefined;\n\t\t\tuntypedInput.options.viewState = findViewStateForEditor(this, options.preserveViewState, this.editorService);\n\n\t\t\tif (typeof untypedInput.contents === 'string' && !this.model.hasAssociatedFilePath) {\n\t\t\t\t// Given how generic untitled resources in the system are, we\n\t\t\t\t// need to be careful not to set our resource into the untyped\n\t\t\t\t// editor if we want to transport contents too, because of\n\t\t\t\t// issue https://github.com/microsoft/vscode/issues/140898\n\t\t\t\t// The workaround is to simply remove the resource association\n\t\t\t\t// if we have contents and no associated resource.\n\t\t\t\t// In that case we can ensure that a new untitled resource is\n\t\t\t\t// being created and the contents can be restored properly.\n\t\t\t\tuntypedInput.resource = undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn untypedInput;\n\t}\n\n\toverride matches(otherInput: EditorInput | IUntypedEditorInput): boolean {\n\t\tif (this === otherInput) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (otherInput instanceof UntitledTextEditorInput) {\n\t\t\treturn isEqual(otherInput.resource, this.resource);\n\t\t}\n\n\t\tif (isUntitledResourceEditorInput(otherInput)) {\n\t\t\treturn super.matches(otherInput);\n\t\t}\n\n\t\treturn false;\n\t}\n\n\toverride dispose(): void {\n\t\tthis.modelResolve = undefined;\n\n\t\tsuper.dispose();\n\t}\n}\n"]}