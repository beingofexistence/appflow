{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/untitled/common/untitledTextEditorModel.ts"],"names":[],"mappings":"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","file":"untitledTextEditorModel.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ISaveOptions } from 'vs/workbench/common/editor';\nimport { BaseTextEditorModel } from 'vs/workbench/common/editor/textEditorModel';\nimport { URI } from 'vs/base/common/uri';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IWorkingCopyBackupService } from 'vs/workbench/services/workingCopy/common/workingCopyBackup';\nimport { ITextResourceConfigurationChangeEvent, ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfiguration';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { createTextBufferFactoryFromStream } from 'vs/editor/common/model/textModel';\nimport { ITextEditorModel } from 'vs/editor/common/services/resolverService';\nimport { IWorkingCopyService } from 'vs/workbench/services/workingCopy/common/workingCopyService';\nimport { IWorkingCopy, WorkingCopyCapabilities, IWorkingCopyBackup, NO_TYPE_ID, IWorkingCopySaveEvent } from 'vs/workbench/services/workingCopy/common/workingCopy';\nimport { IEncodingSupport, ILanguageSupport, ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IModelContentChangedEvent } from 'vs/editor/common/textModelEvents';\nimport { assertIsDefined } from 'vs/base/common/types';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { ensureValidWordDefinition } from 'vs/editor/common/core/wordHelper';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { getCharContainingOffset } from 'vs/base/common/strings';\nimport { UTF8 } from 'vs/workbench/services/textfile/common/encoding';\nimport { bufferToReadable, bufferToStream, VSBuffer, VSBufferReadable, VSBufferReadableStream } from 'vs/base/common/buffer';\nimport { ILanguageDetectionService } from 'vs/workbench/services/languageDetection/common/languageDetectionWorkerService';\nimport { IAccessibilityService } from 'vs/platform/accessibility/common/accessibility';\n\nexport interface IUntitledTextEditorModel extends ITextEditorModel, ILanguageSupport, IEncodingSupport, IWorkingCopy {\n\n\t/**\n\t * Emits an event when the encoding of this untitled model changes.\n\t */\n\treadonly onDidChangeEncoding: Event<void>;\n\n\t/**\n\t * Emits an event when the name of this untitled model changes.\n\t */\n\treadonly onDidChangeName: Event<void>;\n\n\t/**\n\t * Emits an event when this untitled model is reverted.\n\t */\n\treadonly onDidRevert: Event<void>;\n\n\t/**\n\t * Whether this untitled text model has an associated file path.\n\t */\n\treadonly hasAssociatedFilePath: boolean;\n\n\t/**\n\t * Whether this model has an explicit language or not.\n\t */\n\treadonly hasLanguageSetExplicitly: boolean;\n\n\t/**\n\t * Sets the encoding to use for this untitled model.\n\t */\n\tsetEncoding(encoding: string): Promise<void>;\n\n\t/**\n\t * Resolves the untitled model.\n\t */\n\tresolve(): Promise<void>;\n}\n\nexport class UntitledTextEditorModel extends BaseTextEditorModel implements IUntitledTextEditorModel {\n\n\tprivate static readonly FIRST_LINE_NAME_MAX_LENGTH = 40;\n\tprivate static readonly FIRST_LINE_NAME_CANDIDATE_MAX_LENGTH = UntitledTextEditorModel.FIRST_LINE_NAME_MAX_LENGTH * 10;\n\n\t// Support the special '${activeEditorLanguage}' language by\n\t// looking up the language id from the editor that is active\n\t// before the untitled editor opens. This special id is only\n\t// used for the initial language and can be changed after the\n\t// fact (either manually or through auto-detection).\n\tprivate static readonly ACTIVE_EDITOR_LANGUAGE_ID = '${activeEditorLanguage}';\n\n\t//#region Events\n\n\tprivate readonly _onDidChangeContent = this._register(new Emitter<void>());\n\treadonly onDidChangeContent = this._onDidChangeContent.event;\n\n\tprivate readonly _onDidChangeName = this._register(new Emitter<void>());\n\treadonly onDidChangeName = this._onDidChangeName.event;\n\n\tprivate readonly _onDidChangeDirty = this._register(new Emitter<void>());\n\treadonly onDidChangeDirty = this._onDidChangeDirty.event;\n\n\tprivate readonly _onDidChangeEncoding = this._register(new Emitter<void>());\n\treadonly onDidChangeEncoding = this._onDidChangeEncoding.event;\n\n\tprivate readonly _onDidSave = this._register(new Emitter<IWorkingCopySaveEvent>());\n\treadonly onDidSave = this._onDidSave.event;\n\n\tprivate readonly _onDidRevert = this._register(new Emitter<void>());\n\treadonly onDidRevert = this._onDidRevert.event;\n\n\t//#endregion\n\n\treadonly typeId = NO_TYPE_ID; // IMPORTANT: never change this to not break existing assumptions (e.g. backups)\n\n\treadonly capabilities = WorkingCopyCapabilities.Untitled;\n\n\t//#region Name\n\n\tprivate configuredLabelFormat: 'content' | 'name' = 'content';\n\n\tprivate cachedModelFirstLineWords: string | undefined = undefined;\n\tget name(): string {\n\n\t\t// Take name from first line if present and only if\n\t\t// we have no associated file path. In that case we\n\t\t// prefer the file name as title.\n\t\tif (this.configuredLabelFormat === 'content' && !this.hasAssociatedFilePath && this.cachedModelFirstLineWords) {\n\t\t\treturn this.cachedModelFirstLineWords;\n\t\t}\n\n\t\t// Otherwise fallback to resource\n\t\treturn this.labelService.getUriBasenameLabel(this.resource);\n\t}\n\n\t//#endregion\n\n\tconstructor(\n\t\treadonly resource: URI,\n\t\treadonly hasAssociatedFilePath: boolean,\n\t\tprivate readonly initialValue: string | undefined,\n\t\tprivate preferredLanguageId: string | undefined,\n\t\tprivate preferredEncoding: string | undefined,\n\t\t@ILanguageService languageService: ILanguageService,\n\t\t@IModelService modelService: IModelService,\n\t\t@IWorkingCopyBackupService private readonly workingCopyBackupService: IWorkingCopyBackupService,\n\t\t@ITextResourceConfigurationService private readonly textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IWorkingCopyService private readonly workingCopyService: IWorkingCopyService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@ILanguageDetectionService languageDetectionService: ILanguageDetectionService,\n\t\t@IAccessibilityService accessibilityService: IAccessibilityService,\n\t) {\n\t\tsuper(modelService, languageService, languageDetectionService, accessibilityService);\n\n\t\t// Make known to working copy service\n\t\tthis._register(this.workingCopyService.registerWorkingCopy(this));\n\n\t\t// This is typically controlled by the setting `files.defaultLanguage`.\n\t\t// If that setting is set, we should not detect the language.\n\t\tif (preferredLanguageId) {\n\t\t\tthis.setLanguageId(preferredLanguageId);\n\t\t}\n\n\t\t// Fetch config\n\t\tthis.onConfigurationChange(undefined, false);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Config Changes\n\t\tthis._register(this.textResourceConfigurationService.onDidChangeConfiguration(e => this.onConfigurationChange(e, true)));\n\t}\n\n\tprivate onConfigurationChange(e: ITextResourceConfigurationChangeEvent | undefined, fromEvent: boolean): void {\n\n\t\t// Encoding\n\t\tif (!e || e.affectsConfiguration(this.resource, 'files.encoding')) {\n\t\t\tconst configuredEncoding = this.textResourceConfigurationService.getValue(this.resource, 'files.encoding');\n\t\t\tif (this.configuredEncoding !== configuredEncoding && typeof configuredEncoding === 'string') {\n\t\t\t\tthis.configuredEncoding = configuredEncoding;\n\n\t\t\t\tif (fromEvent && !this.preferredEncoding) {\n\t\t\t\t\tthis._onDidChangeEncoding.fire(); // do not fire event if we have a preferred encoding set\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Label Format\n\t\tif (!e || e.affectsConfiguration(this.resource, 'workbench.editor.untitled.labelFormat')) {\n\t\t\tconst configuredLabelFormat = this.textResourceConfigurationService.getValue(this.resource, 'workbench.editor.untitled.labelFormat');\n\t\t\tif (this.configuredLabelFormat !== configuredLabelFormat && (configuredLabelFormat === 'content' || configuredLabelFormat === 'name')) {\n\t\t\t\tthis.configuredLabelFormat = configuredLabelFormat;\n\n\t\t\t\tif (fromEvent) {\n\t\t\t\t\tthis._onDidChangeName.fire();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t//#region Language\n\n\toverride setLanguageId(languageId: string, source?: string): void {\n\t\tconst actualLanguage: string | undefined = languageId === UntitledTextEditorModel.ACTIVE_EDITOR_LANGUAGE_ID\n\t\t\t? this.editorService.activeTextEditorLanguageId\n\t\t\t: languageId;\n\t\tthis.preferredLanguageId = actualLanguage;\n\n\t\tif (actualLanguage) {\n\t\t\tsuper.setLanguageId(actualLanguage, source);\n\t\t}\n\t}\n\n\toverride getLanguageId(): string | undefined {\n\t\tif (this.textEditorModel) {\n\t\t\treturn this.textEditorModel.getLanguageId();\n\t\t}\n\n\t\treturn this.preferredLanguageId;\n\t}\n\n\t//#endregion\n\n\t//#region Encoding\n\n\tprivate configuredEncoding: string | undefined;\n\n\tgetEncoding(): string | undefined {\n\t\treturn this.preferredEncoding || this.configuredEncoding;\n\t}\n\n\tasync setEncoding(encoding: string): Promise<void> {\n\t\tconst oldEncoding = this.getEncoding();\n\t\tthis.preferredEncoding = encoding;\n\n\t\t// Emit if it changed\n\t\tif (oldEncoding !== this.preferredEncoding) {\n\t\t\tthis._onDidChangeEncoding.fire();\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region Dirty\n\n\tprivate dirty = this.hasAssociatedFilePath || !!this.initialValue;\n\n\tisDirty(): boolean {\n\t\treturn this.dirty;\n\t}\n\n\tisModified(): boolean {\n\t\treturn this.isDirty();\n\t}\n\n\tprivate setDirty(dirty: boolean): void {\n\t\tif (this.dirty === dirty) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.dirty = dirty;\n\t\tthis._onDidChangeDirty.fire();\n\t}\n\n\t//#endregion\n\n\t//#region Save / Revert / Backup\n\n\tasync save(options?: ISaveOptions): Promise<boolean> {\n\t\tconst target = await this.textFileService.save(this.resource, options);\n\n\t\t// Emit as event\n\t\tif (target) {\n\t\t\tthis._onDidSave.fire({ reason: options?.reason, source: options?.source });\n\t\t}\n\n\t\treturn !!target;\n\t}\n\n\tasync revert(): Promise<void> {\n\n\t\t// No longer dirty\n\t\tthis.setDirty(false);\n\n\t\t// Emit as event\n\t\tthis._onDidRevert.fire();\n\n\t\t// A reverted untitled model is invalid because it has\n\t\t// no actual source on disk to revert to. As such we\n\t\t// dispose the model.\n\t\tthis.dispose();\n\t}\n\n\tasync backup(token: CancellationToken): Promise<IWorkingCopyBackup> {\n\t\tlet content: VSBufferReadable | undefined = undefined;\n\n\t\t// Make sure to check whether this model has been resolved\n\t\t// or not and fallback to the initial value - if any - to\n\t\t// prevent backing up an unresolved model and loosing the\n\t\t// initial value.\n\t\tif (this.isResolved()) {\n\t\t\t// Fill in content the same way we would do when saving the file\n\t\t\t// via the text file service encoding support (hardcode UTF-8)\n\t\t\tcontent = await this.textFileService.getEncodedReadable(this.resource, this.createSnapshot() ?? undefined, { encoding: UTF8 });\n\t\t} else if (typeof this.initialValue === 'string') {\n\t\t\tcontent = bufferToReadable(VSBuffer.fromString(this.initialValue));\n\t\t}\n\n\t\treturn { content };\n\t}\n\n\t//#endregion\n\n\t//#region Resolve\n\n\toverride async resolve(): Promise<void> {\n\n\t\t// Create text editor model if not yet done\n\t\tlet createdUntitledModel = false;\n\t\tlet hasBackup = false;\n\t\tif (!this.textEditorModel) {\n\t\t\tlet untitledContents: VSBufferReadableStream;\n\n\t\t\t// Check for backups or use initial value or empty\n\t\t\tconst backup = await this.workingCopyBackupService.resolve(this);\n\t\t\tif (backup) {\n\t\t\t\tuntitledContents = backup.value;\n\t\t\t\thasBackup = true;\n\t\t\t} else {\n\t\t\t\tuntitledContents = bufferToStream(VSBuffer.fromString(this.initialValue || ''));\n\t\t\t}\n\n\t\t\t// Determine untitled contents based on backup\n\t\t\t// or initial value. We must use text file service\n\t\t\t// to create the text factory to respect encodings\n\t\t\t// accordingly.\n\t\t\tconst untitledContentsFactory = await createTextBufferFactoryFromStream(await this.textFileService.getDecodedStream(this.resource, untitledContents, { encoding: UTF8 }));\n\n\t\t\tthis.createTextEditorModel(untitledContentsFactory, this.resource, this.preferredLanguageId);\n\t\t\tcreatedUntitledModel = true;\n\t\t}\n\n\t\t// Otherwise: the untitled model already exists and we must assume\n\t\t// that the value of the model was changed by the user. As such we\n\t\t// do not update the contents, only the language if configured.\n\t\telse {\n\t\t\tthis.updateTextEditorModel(undefined, this.preferredLanguageId);\n\t\t}\n\n\t\t// Listen to text model events\n\t\tconst textEditorModel = assertIsDefined(this.textEditorModel);\n\t\tthis.installModelListeners(textEditorModel);\n\n\t\t// Only adjust name and dirty state etc. if we\n\t\t// actually created the untitled model\n\t\tif (createdUntitledModel) {\n\n\t\t\t// Name\n\t\t\tif (hasBackup || this.initialValue) {\n\t\t\t\tthis.updateNameFromFirstLine(textEditorModel);\n\t\t\t}\n\n\t\t\t// Untitled associated to file path are dirty right away as well as untitled with content\n\t\t\tthis.setDirty(this.hasAssociatedFilePath || !!hasBackup || !!this.initialValue);\n\n\t\t\t// If we have initial contents, make sure to emit this\n\t\t\t// as the appropiate events to the outside.\n\t\t\tif (hasBackup || this.initialValue) {\n\t\t\t\tthis._onDidChangeContent.fire();\n\t\t\t}\n\t\t}\n\n\t\treturn super.resolve();\n\t}\n\n\tprotected override installModelListeners(model: ITextModel): void {\n\t\tthis._register(model.onDidChangeContent(e => this.onModelContentChanged(model, e)));\n\t\tthis._register(model.onDidChangeLanguage(() => this.onConfigurationChange(undefined, true))); // language change can have impact on config\n\n\t\tsuper.installModelListeners(model);\n\t}\n\n\tprivate onModelContentChanged(textEditorModel: ITextModel, e: IModelContentChangedEvent): void {\n\n\t\t// mark the untitled text editor as non-dirty once its content becomes empty and we do\n\t\t// not have an associated path set. we never want dirty indicator in that case.\n\t\tif (!this.hasAssociatedFilePath && textEditorModel.getLineCount() === 1 && textEditorModel.getLineContent(1) === '') {\n\t\t\tthis.setDirty(false);\n\t\t}\n\n\t\t// turn dirty otherwise\n\t\telse {\n\t\t\tthis.setDirty(true);\n\t\t}\n\n\t\t// Check for name change if first line changed in the range of 0-FIRST_LINE_NAME_CANDIDATE_MAX_LENGTH columns\n\t\tif (e.changes.some(change => (change.range.startLineNumber === 1 || change.range.endLineNumber === 1) && change.range.startColumn <= UntitledTextEditorModel.FIRST_LINE_NAME_CANDIDATE_MAX_LENGTH)) {\n\t\t\tthis.updateNameFromFirstLine(textEditorModel);\n\t\t}\n\n\t\t// Emit as general content change event\n\t\tthis._onDidChangeContent.fire();\n\n\t\t// Detect language from content\n\t\tthis.autoDetectLanguage();\n\t}\n\n\tprivate updateNameFromFirstLine(textEditorModel: ITextModel): void {\n\t\tif (this.hasAssociatedFilePath) {\n\t\t\treturn; // not in case of an associated file path\n\t\t}\n\n\t\t// Determine the first words of the model following these rules:\n\t\t// - cannot be only whitespace (so we trim())\n\t\t// - cannot be only non-alphanumeric characters (so we run word definition regex over it)\n\t\t// - cannot be longer than FIRST_LINE_MAX_TITLE_LENGTH\n\t\t// - normalize multiple whitespaces to a single whitespace\n\n\t\tlet modelFirstWordsCandidate: string | undefined = undefined;\n\n\t\tlet firstLineText = textEditorModel\n\t\t\t.getValueInRange({\n\t\t\t\tstartLineNumber: 1,\n\t\t\t\tendLineNumber: 1,\n\t\t\t\tstartColumn: 1,\n\t\t\t\tendColumn: UntitledTextEditorModel.FIRST_LINE_NAME_CANDIDATE_MAX_LENGTH + 1\t\t// first cap at FIRST_LINE_NAME_CANDIDATE_MAX_LENGTH\n\t\t\t})\n\t\t\t.trim().replace(/\\s+/g, ' ') \t\t\t\t\t\t\t\t\t\t\t\t\t\t// normalize whitespaces\n\t\t\t.replace(/\\u202E/g, '');\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// drop Right-to-Left Override character (#190133)\n\t\tfirstLineText = firstLineText.substr(0, getCharContainingOffset(\t\t\t\t\t\t// finally cap at FIRST_LINE_NAME_MAX_LENGTH (grapheme aware #111235)\n\t\t\tfirstLineText,\n\t\t\tUntitledTextEditorModel.FIRST_LINE_NAME_MAX_LENGTH)[0]\n\t\t);\n\n\t\tif (firstLineText && ensureValidWordDefinition().exec(firstLineText)) {\n\t\t\tmodelFirstWordsCandidate = firstLineText;\n\t\t}\n\n\t\tif (modelFirstWordsCandidate !== this.cachedModelFirstLineWords) {\n\t\t\tthis.cachedModelFirstLineWords = modelFirstWordsCandidate;\n\t\t\tthis._onDidChangeName.fire();\n\t\t}\n\t}\n\n\t//#endregion\n\n\toverride isReadonly(): boolean {\n\t\treturn false;\n\t}\n}\n"]}