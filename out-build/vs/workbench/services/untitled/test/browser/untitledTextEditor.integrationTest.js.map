{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/untitled/test/browser/untitledTextEditor.integrationTest.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAUhG,KAAK,CAAC,uBAAuB,EAAE,GAAG,EAAE;QAEnC,MAAM,WAAW,GAAG,IAAI,eAAG,EAAc,CAAC;QAE1C,IAAI,oBAAyB,CAAmB;QAChD,IAAI,QAAc,CAAgB;QAElC,KAAK,CAAC,GAAG,EAAE;YACV,oBAAoB,GAAG,IAAA,4BAAI,EAA0B,SAAS,EAAE,WAAW,CAAC,CAAC;YAC7E,QAAQ,GAAG,oBAAoB,CAAC,cAAc,CAAC,4BAAI,CAAgB,CAAC;YACpE,WAAW,CAAC,GAAG,CAAC,QAAQ,CAAC,yBAAyB,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,GAAG,EAAE;YACb,WAAW,CAAC,KAAK,EAAE,CAAC;QACrB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6BAA6B,EAAE,KAAK;YACxC,OAAO,oBAAoB,CAAC,oCAAoC,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qCAAqC,EAAE,KAAK;YAChD,MAAM,YAAY,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YAC5C,OAAO,oBAAoB,CAAC,YAAY,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,KAAK,UAAU,oBAAoB,CAAC,OAAe;YAClD,MAAM,OAAO,GAAG,QAAQ,CAAC,yBAAyB,CAAC;YACnD,MAAM,aAAa,GAAG,WAAW,CAAC,GAAG,CAAC,oBAAoB,CAAC,cAAc,CAAC,8BAAI,EAAqB,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YACtH,MAAM,aAAa,GAAG,WAAW,CAAC,GAAG,CAAC,oBAAoB,CAAC,cAAc,CAAC,8BAAI,EAAqB,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAEtH,MAAM,aAAa,GAAG,WAAW,CAAC,GAAG,CAAC,MAAM,aAAa,CAAC,OAAO,EAAE,CAAC,CAAC;YACrE,aAAa,CAAC,eAAe,EAAE,QAAQ,CAAC,OAAO,CAAC,CAAC;YAEjD,MAAM,MAAM,GAAG,MAAM,aAAa,CAAC,MAAM,CAAC,gCAAiB,CAAC,IAAI,CAAC,CAAC;YAClE,MAAM,uBAAuB,GAAG,EAAE,MAAM,EAAE,aAAa,CAAC,MAAM,EAAE,QAAQ,EAAE,aAAa,CAAC,QAAQ,EAAE,CAAC;YACnG,MAAM,QAAQ,CAAC,wBAAwB,CAAC,MAAM,CAAC,uBAAuB,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;YAExF,MAAM,aAAa,GAAG,WAAW,CAAC,GAAG,CAAC,MAAM,aAAa,CAAC,OAAO,EAAE,CAAC,CAAC;YAErE,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,eAAe,EAAE,QAAQ,EAAE,EAAE,OAAO,CAAC,CAAC;YACvE,MAAM,CAAC,WAAW,CAAC,aAAa,CAAC,OAAO,EAAE,EAAE,IAAI,CAAC,CAAC;QACnD,CAAC;QAED,IAAA,WAAG,GAAsC,CAAC;IAC3C,CAAC,CAAC,CAAC","file":"untitledTextEditor.integrationTest.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { workbenchInstantiationService, TestServiceAccessor } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { UntitledTextEditorInput } from 'vs/workbench/services/untitled/common/untitledTextEditorInput';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nsuite('Untitled text editors', () => {\n\n\tconst disposables = new DisposableStore();\n\n\tlet instantiationService: IInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\t\tdisposables.add(accessor.untitledTextEditorService);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('backup and restore (simple)', async function () {\n\t\treturn testBackupAndRestore('Some very small file text content.');\n\t});\n\n\ttest('backup and restore (large, #121347)', async function () {\n\t\tconst largeContent = '국어한\\n'.repeat(100000);\n\t\treturn testBackupAndRestore(largeContent);\n\t});\n\n\tasync function testBackupAndRestore(content: string) {\n\t\tconst service = accessor.untitledTextEditorService;\n\t\tconst originalInput = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, service.create()));\n\t\tconst restoredInput = disposables.add(instantiationService.createInstance(UntitledTextEditorInput, service.create()));\n\n\t\tconst originalModel = disposables.add(await originalInput.resolve());\n\t\toriginalModel.textEditorModel?.setValue(content);\n\n\t\tconst backup = await originalModel.backup(CancellationToken.None);\n\t\tconst modelRestoredIdentifier = { typeId: originalModel.typeId, resource: restoredInput.resource };\n\t\tawait accessor.workingCopyBackupService.backup(modelRestoredIdentifier, backup.content);\n\n\t\tconst restoredModel = disposables.add(await restoredInput.resolve());\n\n\t\tassert.strictEqual(restoredModel.textEditorModel?.getValue(), content);\n\t\tassert.strictEqual(restoredModel.isDirty(), true);\n\t}\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"]}