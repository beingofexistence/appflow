{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/languageStatus/common/languageStatusService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAgCnF,QAAA,GAAG,GAAsB,IAAA,mBAAG,EAAqC,wBAAwB,CAAC,CAAC;IAcxG,MAAM,yBAAyB;QAA/B;YAIkB,MAAC,GAAW,IAAI,6BAAG,EAAuC,CAAC;YAEnE,gBAAW,GAAe,IAAI,CAAC,CAAC,CAAS,WAAW,CAAC;QAkB/D,CAAC;QAhBA,SAAS,CAAC,MAAuB;YAChC,OAAO,IAAI,CAAC,CAAC,CAAS,QAAQ,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QACzD,CAAC;QAED,iBAAiB,CAAC,KAAiB;YAClC,OAAO,IAAI,CAAC,CAAC,CAAS,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBAClD,IAAI,GAAG,GAAG,CAAC,CAAC,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC;gBAClC,IAAI,GAAG,KAAK,CAAC,EAAE;oBACd,GAAG,GAAG,IAAA,aAAG,EAAK,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;iBAClC;gBACD,IAAI,GAAG,KAAK,CAAC,EAAE;oBACd,GAAG,GAAG,IAAA,aAAG,EAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;iBAC1B;gBACD,OAAO,GAAG,CAAC;YACZ,CAAC,CAAC,CAAC;QACJ,CAAC;KACD;IAED,IAAA,gBAAG,EAAe,WAAG,EAAqB,yBAAyB,oCAA4B,CAAC","file":"languageStatusService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Event } from 'vs/base/common/event';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport Severity from 'vs/base/common/severity';\nimport { compare } from 'vs/base/common/strings';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { Command } from 'vs/editor/common/languages';\nimport { LanguageFeatureRegistry } from 'vs/editor/common/languageFeatureRegistry';\nimport { LanguageSelector } from 'vs/editor/common/languageSelector';\nimport { IAccessibilityInformation } from 'vs/platform/accessibility/common/accessibility';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport interface ILanguageStatus {\n\treadonly id: string;\n\treadonly name: string;\n\treadonly selector: LanguageSelector;\n\treadonly severity: Severity;\n\treadonly label: string;\n\treadonly detail: string;\n\treadonly busy: boolean;\n\treadonly source: string;\n\treadonly command: Command | undefined;\n\treadonly accessibilityInfo: IAccessibilityInformation | undefined;\n}\n\nexport interface ILanguageStatusProvider {\n\tprovideLanguageStatus(langId: string, token: CancellationToken): Promise<ILanguageStatus | undefined>;\n}\n\nexport const ILanguageStatusService = createDecorator<ILanguageStatusService>('ILanguageStatusService');\n\nexport interface ILanguageStatusService {\n\n\t_serviceBrand: undefined;\n\n\tonDidChange: Event<void>;\n\n\taddStatus(status: ILanguageStatus): IDisposable;\n\n\tgetLanguageStatus(model: ITextModel): ILanguageStatus[];\n}\n\n\nclass LanguageStatusServiceImpl implements ILanguageStatusService {\n\n\tdeclare _serviceBrand: undefined;\n\n\tprivate readonly _provider = new LanguageFeatureRegistry<ILanguageStatus>();\n\n\treadonly onDidChange: Event<any> = this._provider.onDidChange;\n\n\taddStatus(status: ILanguageStatus): IDisposable {\n\t\treturn this._provider.register(status.selector, status);\n\t}\n\n\tgetLanguageStatus(model: ITextModel): ILanguageStatus[] {\n\t\treturn this._provider.ordered(model).sort((a, b) => {\n\t\t\tlet res = b.severity - a.severity;\n\t\t\tif (res === 0) {\n\t\t\t\tres = compare(a.source, b.source);\n\t\t\t}\n\t\t\tif (res === 0) {\n\t\t\t\tres = compare(a.id, b.id);\n\t\t\t}\n\t\t\treturn res;\n\t\t});\n\t}\n}\n\nregisterSingleton(ILanguageStatusService, LanguageStatusServiceImpl, InstantiationType.Delayed);\n"]}