{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/panecomposite/browser/panecomposite.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAWnF,QAAA,IAAI,GAAwB,IAAA,mBAAG,EAAwC,0BAA0B,CAAC,CAAC","file":"panecomposite.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Event } from 'vs/base/common/event';\nimport { PaneCompositeDescriptor } from 'vs/workbench/browser/panecomposite';\nimport { IProgressIndicator } from 'vs/platform/progress/common/progress';\nimport { IPaneComposite } from 'vs/workbench/common/panecomposite';\nimport { ViewContainerLocation } from 'vs/workbench/common/views';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { IBadge } from 'vs/workbench/services/activity/common/activity';\n\nexport const IPaneCompositePartService = createDecorator<IPaneCompositePartService>('paneCompositePartService');\n\nexport interface IPaneCompositePartService {\n\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidPaneCompositeOpen: Event<{ composite: IPaneComposite; viewContainerLocation: ViewContainerLocation }>;\n\treadonly onDidPaneCompositeClose: Event<{ composite: IPaneComposite; viewContainerLocation: ViewContainerLocation }>;\n\n\t/**\n\t * Opens a viewlet with the given identifier and pass keyboard focus to it if specified.\n\t */\n\topenPaneComposite(id: string | undefined, viewContainerLocation: ViewContainerLocation, focus?: boolean): Promise<IPaneComposite | undefined>;\n\n\t/**\n\t * Returns the current active viewlet if any.\n\t */\n\tgetActivePaneComposite(viewContainerLocation: ViewContainerLocation): IPaneComposite | undefined;\n\n\t/**\n\t * Returns the viewlet by id.\n\t */\n\tgetPaneComposite(id: string, viewContainerLocation: ViewContainerLocation): PaneCompositeDescriptor | undefined;\n\n\t/**\n\t * Returns all enabled viewlets\n\t */\n\tgetPaneComposites(viewContainerLocation: ViewContainerLocation): PaneCompositeDescriptor[];\n\n\t/**\n\t * Returns id of pinned view containers following the visual order.\n\t */\n\tgetPinnedPaneCompositeIds(viewContainerLocation: ViewContainerLocation): string[];\n\n\t/**\n\t * Returns id of visible view containers following the visual order.\n\t */\n\tgetVisiblePaneCompositeIds(viewContainerLocation: ViewContainerLocation): string[];\n\n\t/**\n\t * Returns the progress indicator for the side bar.\n\t */\n\tgetProgressIndicator(id: string, viewContainerLocation: ViewContainerLocation): IProgressIndicator | undefined;\n\n\t/**\n\t * Hide the active viewlet.\n\t */\n\thideActivePaneComposite(viewContainerLocation: ViewContainerLocation): void;\n\n\t/**\n\t * Return the last active viewlet id.\n\t */\n\tgetLastActivePaneCompositeId(viewContainerLocation: ViewContainerLocation): string;\n\n\t/**\n\t * Show an activity in a viewlet.\n\t */\n\tshowActivity(id: string, viewContainerLocation: ViewContainerLocation, badge: IBadge, clazz?: string, priority?: number): IDisposable;\n}\n"]}