{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/host/electron-sandbox/nativeHostService.ts"],"names":[],"mappings":"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","file":"nativeHostService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { INativeHostService } from 'vs/platform/native/common/native';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ILabelService, Verbosity } from 'vs/platform/label/common/label';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IWindowOpenable, IOpenWindowOptions, isFolderToOpen, isWorkspaceToOpen, IOpenEmptyWindowOptions } from 'vs/platform/window/common/window';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { NativeHostService } from 'vs/platform/native/electron-sandbox/nativeHostService';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { IMainProcessService } from 'vs/platform/ipc/common/mainProcessService';\n\nclass WorkbenchNativeHostService extends NativeHostService {\n\n\tconstructor(\n\t\t@INativeWorkbenchEnvironmentService environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IMainProcessService mainProcessService: IMainProcessService\n\t) {\n\t\tsuper(environmentService.window.id, mainProcessService);\n\t}\n}\n\nclass WorkbenchHostService extends Disposable implements IHostService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService\n\t) {\n\t\tsuper();\n\t}\n\n\t//#region Focus\n\n\tget onDidChangeFocus(): Event<boolean> { return this._onDidChangeFocus; }\n\tprivate _onDidChangeFocus: Event<boolean> = Event.latch(Event.any(\n\t\tEvent.map(Event.filter(this.nativeHostService.onDidFocusWindow, id => id === this.nativeHostService.windowId), () => this.hasFocus),\n\t\tEvent.map(Event.filter(this.nativeHostService.onDidBlurWindow, id => id === this.nativeHostService.windowId), () => this.hasFocus)\n\t), undefined, this._store);\n\n\tget hasFocus(): boolean {\n\t\treturn document.hasFocus();\n\t}\n\n\tasync hadLastFocus(): Promise<boolean> {\n\t\tconst activeWindowId = await this.nativeHostService.getActiveWindowId();\n\n\t\tif (typeof activeWindowId === 'undefined') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn activeWindowId === this.nativeHostService.windowId;\n\t}\n\n\t//#endregion\n\n\n\t//#region Window\n\n\topenWindow(options?: IOpenEmptyWindowOptions): Promise<void>;\n\topenWindow(toOpen: IWindowOpenable[], options?: IOpenWindowOptions): Promise<void>;\n\topenWindow(arg1?: IOpenEmptyWindowOptions | IWindowOpenable[], arg2?: IOpenWindowOptions): Promise<void> {\n\t\tif (Array.isArray(arg1)) {\n\t\t\treturn this.doOpenWindow(arg1, arg2);\n\t\t}\n\n\t\treturn this.doOpenEmptyWindow(arg1);\n\t}\n\n\tprivate doOpenWindow(toOpen: IWindowOpenable[], options?: IOpenWindowOptions): Promise<void> {\n\t\tconst remoteAuthority = this.environmentService.remoteAuthority;\n\t\tif (!!remoteAuthority) {\n\t\t\ttoOpen.forEach(openable => openable.label = openable.label || this.getRecentLabel(openable));\n\n\t\t\tif (options?.remoteAuthority === undefined) {\n\t\t\t\t// set the remoteAuthority of the window the request came from.\n\t\t\t\t// It will be used when the input is neither file nor vscode-remote.\n\t\t\t\toptions = options ? { ...options, remoteAuthority } : { remoteAuthority };\n\t\t\t}\n\t\t}\n\n\t\treturn this.nativeHostService.openWindow(toOpen, options);\n\t}\n\n\tprivate getRecentLabel(openable: IWindowOpenable): string {\n\t\tif (isFolderToOpen(openable)) {\n\t\t\treturn this.labelService.getWorkspaceLabel(openable.folderUri, { verbose: Verbosity.LONG });\n\t\t}\n\n\t\tif (isWorkspaceToOpen(openable)) {\n\t\t\treturn this.labelService.getWorkspaceLabel({ id: '', configPath: openable.workspaceUri }, { verbose: Verbosity.LONG });\n\t\t}\n\n\t\treturn this.labelService.getUriLabel(openable.fileUri);\n\t}\n\n\tprivate doOpenEmptyWindow(options?: IOpenEmptyWindowOptions): Promise<void> {\n\t\tconst remoteAuthority = this.environmentService.remoteAuthority;\n\t\tif (!!remoteAuthority && options?.remoteAuthority === undefined) {\n\t\t\t// set the remoteAuthority of the window the request came from\n\t\t\toptions = options ? { ...options, remoteAuthority } : { remoteAuthority };\n\t\t}\n\t\treturn this.nativeHostService.openWindow(options);\n\t}\n\n\ttoggleFullScreen(): Promise<void> {\n\t\treturn this.nativeHostService.toggleFullScreen();\n\t}\n\n\t//#endregion\n\n\n\t//#region Lifecycle\n\n\tfocus(options?: { force: boolean }): Promise<void> {\n\t\treturn this.nativeHostService.focusWindow(options);\n\t}\n\n\trestart(): Promise<void> {\n\t\treturn this.nativeHostService.relaunch();\n\t}\n\n\treload(options?: { disableExtensions?: boolean }): Promise<void> {\n\t\treturn this.nativeHostService.reload(options);\n\t}\n\n\tclose(): Promise<void> {\n\t\treturn this.nativeHostService.closeWindow();\n\t}\n\n\tasync withExpectedShutdown<T>(expectedShutdownTask: () => Promise<T>): Promise<T> {\n\t\treturn await expectedShutdownTask();\n\t}\n\n\t//#endregion\n}\n\nregisterSingleton(IHostService, WorkbenchHostService, InstantiationType.Delayed);\nregisterSingleton(INativeHostService, WorkbenchNativeHostService, InstantiationType.Delayed);\n"]}