{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/themes/browser/browserHostColorSchemeService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG,MAAa,IAA8B,SAAQ,eAAG;QAMrD;YAEC,KAAK,EAAE,CAAC;YAJQ,MAAC,GAAyB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAY,CAAC,CAAC;YAM9E,IAAI,CAAC,CAAC,EAAkB,CAAC;QAC1B,CAAC;QAEO,CAAC;YAER,IAAA,aAAG,EAAyB,8BAA8B,EAAE,GAAG,EAAE;gBAChE,IAAI,CAAC,CAAC,CAAuB,IAAI,EAAE,CAAC;YACrC,CAAC,CAAC,CAAC;YACH,IAAA,aAAG,EAAyB,yBAAyB,EAAE,GAAG,EAAE;gBAC3D,IAAI,CAAC,CAAC,CAAuB,IAAI,EAAE,CAAC;YACrC,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,IAAI,sBAAsB;YACzB,OAAO,IAAI,CAAC,CAAC,CAAuB,KAAK,CAAC;QAC3C,CAAC;QAED,IAAI,IAAI;YACP,IAAI,MAAM,CAAC,UAAU,CAAC,+BAA+B,CAAC,CAAC,OAAO,EAAE;gBAC/D,OAAO,KAAK,CAAC;aACb;iBAAM,IAAI,MAAM,CAAC,UAAU,CAAC,8BAA8B,CAAC,CAAC,OAAO,EAAE;gBACrE,OAAO,IAAI,CAAC;aACZ;YACD,OAAO,KAAK,CAAC;QACd,CAAC;QAED,IAAI,YAAY;YACf,IAAI,MAAM,CAAC,UAAU,CAAC,yBAAyB,CAAC,CAAC,OAAO,EAAE;gBACzD,OAAO,IAAI,CAAC;aACZ;YACD,OAAO,KAAK,CAAC;QACd,CAAC;KAED;IA3CD,oBA2CC;IAED,IAAA,gBAAG,EAAe,6BAAI,EAAqB,IAAI,oCAAqD,CAAC","file":"browserHostColorSchemeService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { addMatchMediaChangeListener } from 'vs/base/browser/browser';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IHostColorSchemeService } from 'vs/workbench/services/themes/common/hostColorSchemeService';\n\nexport class BrowserHostColorSchemeService extends Disposable implements IHostColorSchemeService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidSchemeChangeEvent = this._register(new Emitter<void>());\n\n\tconstructor(\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\taddMatchMediaChangeListener('(prefers-color-scheme: dark)', () => {\n\t\t\tthis._onDidSchemeChangeEvent.fire();\n\t\t});\n\t\taddMatchMediaChangeListener('(forced-colors: active)', () => {\n\t\t\tthis._onDidSchemeChangeEvent.fire();\n\t\t});\n\t}\n\n\tget onDidChangeColorScheme(): Event<void> {\n\t\treturn this._onDidSchemeChangeEvent.event;\n\t}\n\n\tget dark(): boolean {\n\t\tif (window.matchMedia(`(prefers-color-scheme: light)`).matches) {\n\t\t\treturn false;\n\t\t} else if (window.matchMedia(`(prefers-color-scheme: dark)`).matches) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tget highContrast(): boolean {\n\t\tif (window.matchMedia(`(forced-colors: active)`).matches) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n}\n\nregisterSingleton(IHostColorSchemeService, BrowserHostColorSchemeService, InstantiationType.Delayed);\n"]}