{"version":3,"sources":["vs/workbench/services/themes/common/colorExtensionPoint.ts"],"names":[],"mappings":"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","file":"colorExtensionPoint.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { ExtensionsRegistry } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { IColorRegistry, Extensions as ColorRegistryExtensions } from 'vs/platform/theme/common/colorRegistry';\nimport { Color } from 'vs/base/common/color';\nimport { Registry } from 'vs/platform/registry/common/platform';\n\ninterface IColorExtensionPoint {\n\tid: string;\n\tdescription: string;\n\tdefaults: { light: string; dark: string; highContrast: string; highContrastLight?: string };\n}\n\nconst colorRegistry: IColorRegistry = Registry.as<IColorRegistry>(ColorRegistryExtensions.ColorContribution);\n\nconst colorReferenceSchema = colorRegistry.getColorReferenceSchema();\nconst colorIdPattern = '^\\\\w+[.\\\\w+]*$';\n\nconst configurationExtPoint = ExtensionsRegistry.registerExtensionPoint<IColorExtensionPoint[]>({\n\textensionPoint: 'colors',\n\tjsonSchema: {\n\t\tdescription: nls.localize('contributes.color', 'Contributes extension defined themable colors'),\n\t\ttype: 'array',\n\t\titems: {\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tid: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('contributes.color.id', 'The identifier of the themable color'),\n\t\t\t\t\tpattern: colorIdPattern,\n\t\t\t\t\tpatternErrorMessage: nls.localize('contributes.color.id.format', 'Identifiers must only contain letters, digits and dots and can not start with a dot'),\n\t\t\t\t},\n\t\t\t\tdescription: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('contributes.color.description', 'The description of the themable color'),\n\t\t\t\t},\n\t\t\t\tdefaults: {\n\t\t\t\t\ttype: 'object',\n\t\t\t\t\tproperties: {\n\t\t\t\t\t\tlight: {\n\t\t\t\t\t\t\tdescription: nls.localize('contributes.defaults.light', 'The default color for light themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default.'),\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tanyOf: [\n\t\t\t\t\t\t\t\tcolorReferenceSchema,\n\t\t\t\t\t\t\t\t{ type: 'string', format: 'color-hex' }\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\tdark: {\n\t\t\t\t\t\t\tdescription: nls.localize('contributes.defaults.dark', 'The default color for dark themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default.'),\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tanyOf: [\n\t\t\t\t\t\t\t\tcolorReferenceSchema,\n\t\t\t\t\t\t\t\t{ type: 'string', format: 'color-hex' }\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\thighContrast: {\n\t\t\t\t\t\t\tdescription: nls.localize('contributes.defaults.highContrast', 'The default color for high contrast dark themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default. If not provided, the `dark` color is used as default for high contrast dark themes.'),\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tanyOf: [\n\t\t\t\t\t\t\t\tcolorReferenceSchema,\n\t\t\t\t\t\t\t\t{ type: 'string', format: 'color-hex' }\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t},\n\t\t\t\t\t\thighContrastLight: {\n\t\t\t\t\t\t\tdescription: nls.localize('contributes.defaults.highContrastLight', 'The default color for high contrast light themes. Either a color value in hex (#RRGGBB[AA]) or the identifier of a themable color which provides the default. If not provided, the `light` color is used as default for high contrast light themes.'),\n\t\t\t\t\t\t\ttype: 'string',\n\t\t\t\t\t\t\tanyOf: [\n\t\t\t\t\t\t\t\tcolorReferenceSchema,\n\t\t\t\t\t\t\t\t{ type: 'string', format: 'color-hex' }\n\t\t\t\t\t\t\t]\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\trequired: ['light', 'dark']\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n});\n\nexport class ColorExtensionPoint {\n\n\tconstructor() {\n\t\tconfigurationExtPoint.setHandler((extensions, delta) => {\n\t\t\tfor (const extension of delta.added) {\n\t\t\t\tconst extensionValue = <IColorExtensionPoint[]>extension.value;\n\t\t\t\tconst collector = extension.collector;\n\n\t\t\t\tif (!extensionValue || !Array.isArray(extensionValue)) {\n\t\t\t\t\tcollector.error(nls.localize('invalid.colorConfiguration', \"'configuration.colors' must be a array\"));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst parseColorValue = (s: string, name: string) => {\n\t\t\t\t\tif (s.length > 0) {\n\t\t\t\t\t\tif (s[0] === '#') {\n\t\t\t\t\t\t\treturn Color.Format.CSS.parseHex(s);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn s;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcollector.error(nls.localize('invalid.default.colorType', \"{0} must be either a color value in hex (#RRGGBB[AA] or #RGB[A]) or the identifier of a themable color which provides the default.\", name));\n\t\t\t\t\treturn Color.red;\n\t\t\t\t};\n\n\t\t\t\tfor (const colorContribution of extensionValue) {\n\t\t\t\t\tif (typeof colorContribution.id !== 'string' || colorContribution.id.length === 0) {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.id', \"'configuration.colors.id' must be defined and can not be empty\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (!colorContribution.id.match(colorIdPattern)) {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.id.format', \"'configuration.colors.id' must only contain letters, digits and dots and can not start with a dot\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (typeof colorContribution.description !== 'string' || colorContribution.id.length === 0) {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.description', \"'configuration.colors.description' must be defined and can not be empty\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst defaults = colorContribution.defaults;\n\t\t\t\t\tif (!defaults || typeof defaults !== 'object' || typeof defaults.light !== 'string' || typeof defaults.dark !== 'string') {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.defaults', \"'configuration.colors.defaults' must be defined and must contain 'light' and 'dark'\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (defaults.highContrast && typeof defaults.highContrast !== 'string') {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.defaults.highContrast', \"If defined, 'configuration.colors.defaults.highContrast' must be a string.\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (defaults.highContrastLight && typeof defaults.highContrastLight !== 'string') {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.defaults.highContrastLight', \"If defined, 'configuration.colors.defaults.highContrastLight' must be a string.\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tcolorRegistry.registerColor(colorContribution.id, {\n\t\t\t\t\t\tlight: parseColorValue(defaults.light, 'configuration.colors.defaults.light'),\n\t\t\t\t\t\tdark: parseColorValue(defaults.dark, 'configuration.colors.defaults.dark'),\n\t\t\t\t\t\thcDark: parseColorValue(defaults.highContrast ?? defaults.dark, 'configuration.colors.defaults.highContrast'),\n\t\t\t\t\t\thcLight: parseColorValue(defaults.highContrastLight ?? defaults.light, 'configuration.colors.defaults.highContrastLight'),\n\t\t\t\t\t}, colorContribution.description);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const extension of delta.removed) {\n\t\t\t\tconst extensionValue = <IColorExtensionPoint[]>extension.value;\n\t\t\t\tfor (const colorContribution of extensionValue) {\n\t\t\t\t\tcolorRegistry.deregisterColor(colorContribution.id);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\n\n\n"]}