{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/themes/common/workbenchThemeService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAUnF,QAAA,IAAI,GAAqB,IAAA,mBAAG,EAA2D,kBAAG,CAAW,CAAC;IAEtG,QAAA,IAAI,GAAa,IAAI,CAAC;IACtB,QAAA,IAAI,GAAY,SAAS,CAAC;IAC1B,QAAA,IAAI,GAAU,UAAU,CAAC;IACzB,QAAA,IAAI,GAAgB,UAAU,CAAC;IAE/B,QAAA,IAAI,GAAqB,GAAG,CAAC;IAC7B,QAAA,IAAI,GAAsB,GAAG,CAAC;IAC9B,QAAA,IAAI,GAAmB,GAAG,CAAC;IAE3B,QAAA,IAAI,GAAc,YAAY,CAAC;IAE5C,IAAY,aAcX;IAdD,WAAY,aAAa;QACxB,qDAAoC,CAAA;QACpC,wDAAuC,CAAA;QACvC,kEAAiD,CAAA;QACjD,uEAAsD,CAAA;QACtD,+EAA8D,CAAA;QAC9D,gGAA+E,CAAA;QAE/E,2EAA0D,CAAA;QAC1D,6EAA4D,CAAA;QAC5D,sFAAqE,CAAA;QACrE,4FAA2E,CAAA;QAC3E,qEAAoD,CAAA;QACpD,4DAA2C,CAAA;IAC5C,CAAC,EAdW,aAAa,6BAAb,aAAa,QAcxB;IAED,IAAY,oBAWX;IAXD,WAAY,oBAAoB;QAC/B,gEAAwC,CAAA;QACxC,kEAA0C,CAAA;QAC1C,qEAA6C,CAAA;QAC7C,4EAAoD,CAAA;QAEpD,8DAAsC,CAAA;QACtC,gEAAwC,CAAA;QAExC,mDAA2B,CAAA;QAC3B,sDAA8B,CAAA;IAC/B,CAAC,EAXW,oBAAoB,oCAApB,oBAAoB,QAW/B;IAEY,QAAA,IAAI,GAA8B;QAC9C,wBAAwB,EAAE,SAAS;QACnC,sBAAsB,EAAE,SAAS;QACjC,8BAA8B,EAAE,SAAS;KACzC,CAAC;IAEW,QAAA,IAAI,GAA+B;QAC/C,wBAAwB,EAAE,SAAS;QACnC,sBAAsB,EAAE,SAAS;QACjC,8BAA8B,EAAE,SAAS;KACzC,CAAC;IAwJF,IAAiB,aAAa,CAa7B;IAbD,WAAiB,aAAa;QAC7B,SAAgB,YAAY,CAAC,CAA4B;YACxD,OAAO,CAAC,IAAI,EAAE,YAAY,EAAE,CAAC,CAAC,WAAW,EAAE,mBAAmB,EAAE,CAAC,CAAC,kBAAkB,EAAE,cAAc,EAAE,CAAC,CAAC,aAAa,EAAE,mBAAmB,EAAE,CAAC,CAAC,kBAAkB,EAAE,CAAC;QACpK,CAAC;QAFe,0BAAY,eAE3B,CAAA;QACD,SAAgB,cAAc,CAAC,CAAM;YACpC,IAAI,CAAC,IAAI,IAAA,WAAG,EAAM,CAAC,CAAC,YAAY,CAAC,IAAI,IAAA,WAAG,EAAO,CAAC,CAAC,mBAAmB,CAAC,IAAI,IAAA,WAAG,EAAM,CAAC,CAAC,cAAc,CAAC,IAAI,IAAA,WAAG,EAAM,CAAC,CAAC,mBAAmB,CAAC,EAAE;gBACvI,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC,YAAY,EAAE,kBAAkB,EAAE,CAAC,CAAC,mBAAmB,EAAE,aAAa,EAAE,CAAC,CAAC,cAAc,EAAE,kBAAkB,EAAE,CAAC,CAAC,mBAAmB,EAAE,CAAC;aAC9J;YACD,OAAO,SAAS,CAAC;QAClB,CAAC;QALe,4BAAc,iBAK7B,CAAA;QACD,SAAgB,QAAQ,CAAC,SAAiB,EAAE,IAAY,EAAE,SAAS,GAAG,KAAK;YAC1E,OAAO,EAAE,kBAAkB,EAAE,SAAS,EAAE,WAAW,EAAE,GAAG,SAAS,IAAI,IAAI,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,kBAAkB,EAAE,SAAS,EAAE,CAAC;QACnI,CAAC;QAFe,sBAAQ,WAEvB,CAAA;IACF,CAAC,EAbgB,aAAa,6BAAb,aAAa,QAa7B","file":"workbenchThemeService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { refineServiceDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Event } from 'vs/base/common/event';\nimport { Color } from 'vs/base/common/color';\nimport { IColorTheme, IThemeService, IFileIconTheme, IProductIconTheme } from 'vs/platform/theme/common/themeService';\nimport { ConfigurationTarget } from 'vs/platform/configuration/common/configuration';\nimport { isBoolean, isString } from 'vs/base/common/types';\nimport { IconContribution, IconDefinition } from 'vs/platform/theme/common/iconRegistry';\n\nexport const IWorkbenchThemeService = refineServiceDecorator<IThemeService, IWorkbenchThemeService>(IThemeService);\n\nexport const VS_LIGHT_THEME = 'vs';\nexport const VS_DARK_THEME = 'vs-dark';\nexport const VS_HC_THEME = 'hc-black';\nexport const VS_HC_LIGHT_THEME = 'hc-light';\n\nexport const THEME_SCOPE_OPEN_PAREN = '[';\nexport const THEME_SCOPE_CLOSE_PAREN = ']';\nexport const THEME_SCOPE_WILDCARD = '*';\n\nexport const themeScopeRegex = /\\[(.+?)\\]/g;\n\nexport enum ThemeSettings {\n\tCOLOR_THEME = 'workbench.colorTheme',\n\tFILE_ICON_THEME = 'workbench.iconTheme',\n\tPRODUCT_ICON_THEME = 'workbench.productIconTheme',\n\tCOLOR_CUSTOMIZATIONS = 'workbench.colorCustomizations',\n\tTOKEN_COLOR_CUSTOMIZATIONS = 'editor.tokenColorCustomizations',\n\tSEMANTIC_TOKEN_COLOR_CUSTOMIZATIONS = 'editor.semanticTokenColorCustomizations',\n\n\tPREFERRED_DARK_THEME = 'workbench.preferredDarkColorTheme',\n\tPREFERRED_LIGHT_THEME = 'workbench.preferredLightColorTheme',\n\tPREFERRED_HC_DARK_THEME = 'workbench.preferredHighContrastColorTheme', /* id kept for compatibility reasons */\n\tPREFERRED_HC_LIGHT_THEME = 'workbench.preferredHighContrastLightColorTheme',\n\tDETECT_COLOR_SCHEME = 'window.autoDetectColorScheme',\n\tDETECT_HC = 'window.autoDetectHighContrast'\n}\n\nexport enum ThemeSettingDefaults {\n\tCOLOR_THEME_DARK = 'Default Dark Modern',\n\tCOLOR_THEME_LIGHT = 'Default Light Modern',\n\tCOLOR_THEME_HC_DARK = 'Default High Contrast',\n\tCOLOR_THEME_HC_LIGHT = 'Default High Contrast Light',\n\n\tCOLOR_THEME_DARK_OLD = 'Default Dark+',\n\tCOLOR_THEME_LIGHT_OLD = 'Default Light+',\n\n\tFILE_ICON_THEME = 'vs-seti',\n\tPRODUCT_ICON_THEME = 'Default',\n}\n\nexport const COLOR_THEME_DARK_INITIAL_COLORS = {\n\t'activityBar.background': '#181818',\n\t'statusBar.background': '#181818',\n\t'statusBar.noFolderBackground': '#1f1f1f',\n};\n\nexport const COLOR_THEME_LIGHT_INITIAL_COLORS = {\n\t'activityBar.background': '#f8f8f8',\n\t'statusBar.background': '#f8f8f8',\n\t'statusBar.noFolderBackground': '#f8f8f8'\n};\n\nexport interface IWorkbenchTheme {\n\treadonly id: string;\n\treadonly label: string;\n\treadonly extensionData?: ExtensionData;\n\treadonly description?: string;\n\treadonly settingsId: string | null;\n}\n\nexport interface IWorkbenchColorTheme extends IWorkbenchTheme, IColorTheme {\n\treadonly settingsId: string;\n\treadonly tokenColors: ITextMateThemingRule[];\n}\n\nexport interface IColorMap {\n\t[id: string]: Color;\n}\n\nexport interface IWorkbenchFileIconTheme extends IWorkbenchTheme, IFileIconTheme {\n}\n\nexport interface IWorkbenchProductIconTheme extends IWorkbenchTheme, IProductIconTheme {\n\treadonly settingsId: string;\n\n\tgetIcon(icon: IconContribution): IconDefinition | undefined;\n}\n\nexport type ThemeSettingTarget = ConfigurationTarget | undefined | 'auto' | 'preview';\n\n\nexport interface IWorkbenchThemeService extends IThemeService {\n\treadonly _serviceBrand: undefined;\n\tsetColorTheme(themeId: string | undefined | IWorkbenchColorTheme, settingsTarget: ThemeSettingTarget): Promise<IWorkbenchColorTheme | null>;\n\tgetColorTheme(): IWorkbenchColorTheme;\n\tgetColorThemes(): Promise<IWorkbenchColorTheme[]>;\n\tgetMarketplaceColorThemes(publisher: string, name: string, version: string): Promise<IWorkbenchColorTheme[]>;\n\tonDidColorThemeChange: Event<IWorkbenchColorTheme>;\n\n\thasUpdatedDefaultThemes(): boolean;\n\n\tsetFileIconTheme(iconThemeId: string | undefined | IWorkbenchFileIconTheme, settingsTarget: ThemeSettingTarget): Promise<IWorkbenchFileIconTheme>;\n\tgetFileIconTheme(): IWorkbenchFileIconTheme;\n\tgetFileIconThemes(): Promise<IWorkbenchFileIconTheme[]>;\n\tgetMarketplaceFileIconThemes(publisher: string, name: string, version: string): Promise<IWorkbenchFileIconTheme[]>;\n\tonDidFileIconThemeChange: Event<IWorkbenchFileIconTheme>;\n\n\tsetProductIconTheme(iconThemeId: string | undefined | IWorkbenchProductIconTheme, settingsTarget: ThemeSettingTarget): Promise<IWorkbenchProductIconTheme>;\n\tgetProductIconTheme(): IWorkbenchProductIconTheme;\n\tgetProductIconThemes(): Promise<IWorkbenchProductIconTheme[]>;\n\tgetMarketplaceProductIconThemes(publisher: string, name: string, version: string): Promise<IWorkbenchProductIconTheme[]>;\n\tonDidProductIconThemeChange: Event<IWorkbenchProductIconTheme>;\n}\n\nexport interface IThemeScopedColorCustomizations {\n\t[colorId: string]: string;\n}\n\nexport interface IColorCustomizations {\n\t[colorIdOrThemeScope: string]: IThemeScopedColorCustomizations | string;\n}\n\nexport interface IThemeScopedTokenColorCustomizations {\n\t[groupId: string]: ITextMateThemingRule[] | ITokenColorizationSetting | boolean | string | undefined;\n\tcomments?: string | ITokenColorizationSetting;\n\tstrings?: string | ITokenColorizationSetting;\n\tnumbers?: string | ITokenColorizationSetting;\n\tkeywords?: string | ITokenColorizationSetting;\n\ttypes?: string | ITokenColorizationSetting;\n\tfunctions?: string | ITokenColorizationSetting;\n\tvariables?: string | ITokenColorizationSetting;\n\ttextMateRules?: ITextMateThemingRule[];\n\tsemanticHighlighting?: boolean; // deprecated, use ISemanticTokenColorCustomizations.enabled instead\n}\n\nexport interface ITokenColorCustomizations {\n\t[groupIdOrThemeScope: string]: IThemeScopedTokenColorCustomizations | ITextMateThemingRule[] | ITokenColorizationSetting | boolean | string | undefined;\n\tcomments?: string | ITokenColorizationSetting;\n\tstrings?: string | ITokenColorizationSetting;\n\tnumbers?: string | ITokenColorizationSetting;\n\tkeywords?: string | ITokenColorizationSetting;\n\ttypes?: string | ITokenColorizationSetting;\n\tfunctions?: string | ITokenColorizationSetting;\n\tvariables?: string | ITokenColorizationSetting;\n\ttextMateRules?: ITextMateThemingRule[];\n\tsemanticHighlighting?: boolean; // deprecated, use ISemanticTokenColorCustomizations.enabled instead\n}\n\nexport interface IThemeScopedSemanticTokenColorCustomizations {\n\t[styleRule: string]: ISemanticTokenRules | boolean | undefined;\n\tenabled?: boolean;\n\trules?: ISemanticTokenRules;\n}\n\nexport interface ISemanticTokenColorCustomizations {\n\t[styleRuleOrThemeScope: string]: IThemeScopedSemanticTokenColorCustomizations | ISemanticTokenRules | boolean | undefined;\n\tenabled?: boolean;\n\trules?: ISemanticTokenRules;\n}\n\nexport interface IThemeScopedExperimentalSemanticTokenColorCustomizations {\n\t[themeScope: string]: ISemanticTokenRules | undefined;\n}\n\nexport interface IExperimentalSemanticTokenColorCustomizations {\n\t[styleRuleOrThemeScope: string]: IThemeScopedExperimentalSemanticTokenColorCustomizations | ISemanticTokenRules | undefined;\n}\n\nexport type IThemeScopedCustomizations =\n\tIThemeScopedColorCustomizations\n\t| IThemeScopedTokenColorCustomizations\n\t| IThemeScopedExperimentalSemanticTokenColorCustomizations\n\t| IThemeScopedSemanticTokenColorCustomizations;\n\nexport type IThemeScopableCustomizations =\n\tIColorCustomizations\n\t| ITokenColorCustomizations\n\t| IExperimentalSemanticTokenColorCustomizations\n\t| ISemanticTokenColorCustomizations;\n\nexport interface ISemanticTokenRules {\n\t[selector: string]: string | ISemanticTokenColorizationSetting | undefined;\n}\n\nexport interface ITextMateThemingRule {\n\tname?: string;\n\tscope?: string | string[];\n\tsettings: ITokenColorizationSetting;\n}\n\nexport interface ITokenColorizationSetting {\n\tforeground?: string;\n\tbackground?: string;\n\tfontStyle?: string; /* [italic|bold|underline|strikethrough] */\n}\n\nexport interface ISemanticTokenColorizationSetting {\n\tforeground?: string;\n\tfontStyle?: string; /* [italic|bold|underline|strikethrough] */\n\tbold?: boolean;\n\tunderline?: boolean;\n\tstrikethrough?: boolean;\n\titalic?: boolean;\n}\n\nexport interface ExtensionData {\n\textensionId: string;\n\textensionPublisher: string;\n\textensionName: string;\n\textensionIsBuiltin: boolean;\n}\n\nexport namespace ExtensionData {\n\texport function toJSONObject(d: ExtensionData | undefined): any {\n\t\treturn d && { _extensionId: d.extensionId, _extensionIsBuiltin: d.extensionIsBuiltin, _extensionName: d.extensionName, _extensionPublisher: d.extensionPublisher };\n\t}\n\texport function fromJSONObject(o: any): ExtensionData | undefined {\n\t\tif (o && isString(o._extensionId) && isBoolean(o._extensionIsBuiltin) && isString(o._extensionName) && isString(o._extensionPublisher)) {\n\t\t\treturn { extensionId: o._extensionId, extensionIsBuiltin: o._extensionIsBuiltin, extensionName: o._extensionName, extensionPublisher: o._extensionPublisher };\n\t\t}\n\t\treturn undefined;\n\t}\n\texport function fromName(publisher: string, name: string, isBuiltin = false): ExtensionData {\n\t\treturn { extensionPublisher: publisher, extensionId: `${publisher}.${name}`, extensionName: name, extensionIsBuiltin: isBuiltin };\n\t}\n}\n\nexport interface IThemeExtensionPoint {\n\tid: string;\n\tlabel?: string;\n\tdescription?: string;\n\tpath: string;\n\tuiTheme?: typeof VS_LIGHT_THEME | typeof VS_DARK_THEME | typeof VS_HC_THEME | typeof VS_HC_LIGHT_THEME;\n\t_watch: boolean; // unsupported options to watch location\n}\n"]}