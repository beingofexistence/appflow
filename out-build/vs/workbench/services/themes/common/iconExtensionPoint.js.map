{"version":3,"sources":["vs/workbench/services/themes/common/iconExtensionPoint.ts"],"names":[],"mappings":"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","file":"iconExtensionPoint.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { ExtensionsRegistry } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { IIconRegistry, Extensions as IconRegistryExtensions } from 'vs/platform/theme/common/iconRegistry';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { ThemeIcon } from 'vs/base/common/themables';\nimport * as resources from 'vs/base/common/resources';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { extname, posix } from 'vs/base/common/path';\n\ninterface IIconExtensionPoint {\n\t[id: string]: {\n\t\tdescription: string;\n\t\tdefault: { fontPath: string; fontCharacter: string } | string;\n\t};\n}\n\nconst iconRegistry: IIconRegistry = Registry.as<IIconRegistry>(IconRegistryExtensions.IconContribution);\n\nconst iconReferenceSchema = iconRegistry.getIconReferenceSchema();\nconst iconIdPattern = `^${ThemeIcon.iconNameSegment}(-${ThemeIcon.iconNameSegment})+$`;\n\nconst iconConfigurationExtPoint = ExtensionsRegistry.registerExtensionPoint<IIconExtensionPoint>({\n\textensionPoint: 'icons',\n\tjsonSchema: {\n\t\tdescription: nls.localize('contributes.icons', 'Contributes extension defined themable icons'),\n\t\ttype: 'object',\n\t\tpropertyNames: {\n\t\t\tpattern: iconIdPattern,\n\t\t\tdescription: nls.localize('contributes.icon.id', 'The identifier of the themable icon'),\n\t\t\tpatternErrorMessage: nls.localize('contributes.icon.id.format', 'Identifiers can only contain letters, digits and minuses and need to consist of at least two segments in the form `component-iconname`.'),\n\t\t},\n\t\tadditionalProperties: {\n\t\t\ttype: 'object',\n\t\t\tproperties: {\n\t\t\t\tdescription: {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: nls.localize('contributes.icon.description', 'The description of the themable icon'),\n\t\t\t\t},\n\t\t\t\tdefault: {\n\t\t\t\t\tanyOf: [\n\t\t\t\t\t\ticonReferenceSchema,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttype: 'object',\n\t\t\t\t\t\t\tproperties: {\n\t\t\t\t\t\t\t\tfontPath: {\n\t\t\t\t\t\t\t\t\tdescription: nls.localize('contributes.icon.default.fontPath', 'The path of the icon font that defines the icon.'),\n\t\t\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\tfontCharacter: {\n\t\t\t\t\t\t\t\t\tdescription: nls.localize('contributes.icon.default.fontCharacter', 'The character for the icon in the icon font.'),\n\t\t\t\t\t\t\t\t\ttype: 'string'\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\trequired: ['fontPath', 'fontCharacter'],\n\t\t\t\t\t\t\tdefaultSnippets: [{ body: { fontPath: '${1:myiconfont.woff}', fontCharacter: '${2:\\\\\\\\E001}' } }]\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\tdescription: nls.localize('contributes.icon.default', 'The default of the icon. Either a reference to an extisting ThemeIcon or an icon in an icon font.'),\n\t\t\t\t}\n\t\t\t},\n\t\t\trequired: ['description', 'default'],\n\t\t\tdefaultSnippets: [{ body: { description: '${1:my icon}', default: { fontPath: '${2:myiconfont.woff}', fontCharacter: '${3:\\\\\\\\E001}' } } }]\n\t\t},\n\t\tdefaultSnippets: [{ body: { '${1:my-icon-id}': { description: '${2:my icon}', default: { fontPath: '${3:myiconfont.woff}', fontCharacter: '${4:\\\\\\\\E001}' } } } }]\n\t}\n});\n\nexport class IconExtensionPoint {\n\n\tconstructor() {\n\t\ticonConfigurationExtPoint.setHandler((extensions, delta) => {\n\t\t\tfor (const extension of delta.added) {\n\t\t\t\tconst extensionValue = <IIconExtensionPoint>extension.value;\n\t\t\t\tconst collector = extension.collector;\n\n\t\t\t\tif (!extensionValue || typeof extensionValue !== 'object') {\n\t\t\t\t\tcollector.error(nls.localize('invalid.icons.configuration', \"'configuration.icons' must be an object with the icon names as properties.\"));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (const id in extensionValue) {\n\t\t\t\t\tif (!id.match(iconIdPattern)) {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.icons.id.format', \"'configuration.icons' keys represent the icon id and can only contain letter, digits and minuses. They need to consist of at least two segments in the form `component-iconname`.\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst iconContribution = extensionValue[id];\n\t\t\t\t\tif (typeof iconContribution.description !== 'string' || iconContribution.description.length === 0) {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.icons.description', \"'configuration.icons.description' must be defined and can not be empty\"));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tconst defaultIcon = iconContribution.default;\n\t\t\t\t\tif (typeof defaultIcon === 'string') {\n\t\t\t\t\t\ticonRegistry.registerIcon(id, { id: defaultIcon }, iconContribution.description);\n\t\t\t\t\t} else if (typeof defaultIcon === 'object' && typeof defaultIcon.fontPath === 'string' && typeof defaultIcon.fontCharacter === 'string') {\n\t\t\t\t\t\tconst format = extname(defaultIcon.fontPath).substring(1);\n\t\t\t\t\t\tif (['woff', 'woff2', 'ttf'].indexOf(format) === -1) {\n\t\t\t\t\t\t\tcollector.warn(nls.localize('invalid.icons.default.fontPath.extension', \"Expected `contributes.icons.default.fontPath` to have file extension 'woff', woff2' or 'ttf', is '{0}'.\", format));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst extensionLocation = extension.description.extensionLocation;\n\t\t\t\t\t\tconst iconFontLocation = resources.joinPath(extensionLocation, defaultIcon.fontPath);\n\t\t\t\t\t\tif (!resources.isEqualOrParent(iconFontLocation, extensionLocation)) {\n\t\t\t\t\t\t\tcollector.warn(nls.localize('invalid.icons.default.fontPath.path', \"Expected `contributes.icons.default.fontPath` ({0}) to be included inside extension's folder ({0}).\", iconFontLocation.path, extensionLocation.path));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst fontId = getFontId(extension.description, defaultIcon.fontPath);\n\t\t\t\t\t\tconst definition = iconRegistry.registerIconFont(fontId, { src: [{ location: iconFontLocation, format }] });\n\t\t\t\t\t\ticonRegistry.registerIcon(id, {\n\t\t\t\t\t\t\tfontCharacter: defaultIcon.fontCharacter,\n\t\t\t\t\t\t\tfont: {\n\t\t\t\t\t\t\t\tid: fontId,\n\t\t\t\t\t\t\t\tdefinition\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, iconContribution.description);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcollector.error(nls.localize('invalid.icons.default', \"'configuration.icons.default' must be either a reference to the id of an other theme icon (string) or a icon definition (object) with properties `fontPath` and `fontCharacter`.\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const extension of delta.removed) {\n\t\t\t\tconst extensionValue = <IIconExtensionPoint>extension.value;\n\t\t\t\tfor (const id in extensionValue) {\n\t\t\t\t\ticonRegistry.deregisterIcon(id);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction getFontId(description: IExtensionDescription, fontPath: string) {\n\treturn posix.join(description.identifier.value, fontPath);\n}\n"]}