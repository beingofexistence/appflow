{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/themes/electron-sandbox/nativeHostColorSchemeService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;;IAYzF,IAAM,IAAI,GAAV,MAAM,IAA6B,SAAQ,eAAG;;iBAEpC,gBAAW,GAAG,qBAAH,AAAwB,CAAC;QAUpD,YACqB,CAAwC,EACxB,kBAAwB,EAC3C,CAA2B;YAE5C,KAAK,EAAE,CAAC;YAJ6B,MAAC,GAAD,CAAC,CAAsB;YAEnC,MAAC,GAAD,CAAC,CAAkB;YAT5B,MAAC,GAAyB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAY,CAAC,CAAC;YACtE,2BAAsB,GAAG,IAAI,CAAC,CAAC,CAAuB,KAAK,CAAC;YAYpE,gCAAgC;YAChC,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAiB,sBAAsB,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAM,MAAM,CAAC,CAAC,CAAC,CAAC;YAE7F,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,EAAe,IAAI,kBAAkB,CAAC,MAAM,CAAC,WAAW,CAAC;YAC/E,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,IAAI,CAAC;YACzB,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;YAEzC,qCAAqC;YACrC,IAAI,CAAC,CAAC,CAAiB,gBAAgB,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAM,MAAM,CAAC,CAAC,CAAC;QAC/E,CAAC;QAEO,CAAC;YACR,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAc,GAAG,CAAC,MAAI,CAAyB,WAAW,oCAA2B,CAAC;YAC3G,IAAI,MAAM,EAAE;gBACX,IAAI;oBACH,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;oBAClC,IAAI,IAAA,WAAG,EAAM,MAAM,CAAC,IAAI,IAAA,WAAG,EAAO,MAAM,CAAC,YAAY,CAAC,IAAI,IAAA,WAAG,EAAO,MAAM,CAAC,IAAI,CAAC,EAAE;wBACjF,OAAO,MAAsB,CAAC;qBAC9B;iBACD;gBAAC,OAAO,CAAC,EAAE;oBACX,SAAS;iBACT;aACD;YACD,OAAO,SAAS,CAAC;QAClB,CAAC;QAEO,CAAC,CAAM,EAAE,YAAY,EAAE,IAAI,EAAgB;YAClD,IAAI,IAAI,KAAK,IAAI,CAAC,IAAI,IAAI,YAAY,KAAK,IAAI,CAAC,YAAY,EAAE;gBAE7D,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBACjB,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;gBACjC,IAAI,CAAC,CAAC,CAAc,KAAK,CAAC,MAAI,CAAyB,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,mEAAkD,CAAC;gBAC7J,IAAI,CAAC,CAAC,CAAuB,IAAI,EAAE,CAAC;aACpC;QACF,CAAC;;IArDW,oBAAI;mBAAJ,IAAI;QAad,WAAA,aAAI,CAAA;QACJ,WAAA,yBAAI,CAAA;QACJ,WAAA,aAAG,CAAA;OAfO,IAAI,CAuDhB;IAED,IAAA,gBAAG,EAAe,6BAAI,EAAqB,IAAI,oCAAoD,CAAC","file":"nativeHostColorSchemeService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { INativeHostService } from 'vs/platform/native/common/native';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IHostColorSchemeService } from 'vs/workbench/services/themes/common/hostColorSchemeService';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { isBoolean, isObject } from 'vs/base/common/types';\nimport { IColorScheme } from 'vs/platform/window/common/window';\n\nexport class NativeHostColorSchemeService extends Disposable implements IHostColorSchemeService {\n\n\tstatic readonly STORAGE_KEY = 'HostColorSchemeData';\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeColorScheme = this._register(new Emitter<void>());\n\treadonly onDidChangeColorScheme = this._onDidChangeColorScheme.event;\n\n\tpublic dark: boolean;\n\tpublic highContrast: boolean;\n\n\tconstructor(\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t\t@INativeWorkbenchEnvironmentService environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IStorageService private storageService: IStorageService\n\t) {\n\t\tsuper();\n\n\t\t// register listener with the OS\n\t\tthis._register(this.nativeHostService.onDidChangeColorScheme(scheme => this.update(scheme)));\n\n\t\tconst initial = this.getStoredValue() ?? environmentService.window.colorScheme;\n\t\tthis.dark = initial.dark;\n\t\tthis.highContrast = initial.highContrast;\n\n\t\t// fetch the actual value from the OS\n\t\tthis.nativeHostService.getOSColorScheme().then(scheme => this.update(scheme));\n\t}\n\n\tprivate getStoredValue(): IColorScheme | undefined {\n\t\tconst stored = this.storageService.get(NativeHostColorSchemeService.STORAGE_KEY, StorageScope.APPLICATION);\n\t\tif (stored) {\n\t\t\ttry {\n\t\t\t\tconst scheme = JSON.parse(stored);\n\t\t\t\tif (isObject(scheme) && isBoolean(scheme.highContrast) && isBoolean(scheme.dark)) {\n\t\t\t\t\treturn scheme as IColorScheme;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate update({ highContrast, dark }: IColorScheme) {\n\t\tif (dark !== this.dark || highContrast !== this.highContrast) {\n\n\t\t\tthis.dark = dark;\n\t\t\tthis.highContrast = highContrast;\n\t\t\tthis.storageService.store(NativeHostColorSchemeService.STORAGE_KEY, JSON.stringify({ highContrast, dark }), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t\tthis._onDidChangeColorScheme.fire();\n\t\t}\n\t}\n\n}\n\nregisterSingleton(IHostColorSchemeService, NativeHostColorSchemeService, InstantiationType.Delayed);\n"]}