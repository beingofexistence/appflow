{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/statusbar/browser/statusbar.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAUnF,QAAA,GAAG,GAAiB,IAAA,mBAAG,EAAgC,kBAAkB,CAAC,CAAC;IAoExF,IAAkB,kBAGjB;IAHD,WAAkB,kBAAkB;QACnC,2DAAI,CAAA;QACJ,6DAAK,CAAA;IACN,CAAC,EAHiB,kBAAkB,kCAAlB,kBAAkB,QAGnC;IAwBD,SAAgB,GAAG,CAAsB,KAAc;QACtD,MAAM,SAAS,GAAG,KAA4C,CAAC;QAE/D,OAAO,OAAO,SAAS,EAAE,EAAE,KAAK,QAAQ,IAAI,OAAO,SAAS,CAAC,SAAS,KAAK,QAAQ,CAAC;IACrF,CAAC;IAJD,kBAIC;IAyBD,SAAgB,GAAG,CAAsB,KAAc;QACtD,MAAM,SAAS,GAAG,KAA4C,CAAC;QAE/D,OAAO,CAAC,OAAO,SAAS,EAAE,OAAO,KAAK,QAAQ,IAAI,GAAG,CAAsB,SAAS,EAAE,OAAO,CAAC,CAAC,IAAI,OAAO,SAAS,EAAE,SAAS,KAAK,QAAQ,CAAC;IAC7I,CAAC;IAJD,kBAIC;IAEY,QAAA,GAAG,GAA2B;QAC1C,EAAE,EAAE,6BAA6B;QACjC,KAAK,EAAE,EAAE;KACT,CAAC;IAUW,QAAA,GAAG,GAAyC,CAAC,UAAU,EAAE,SAAS,EAAE,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC","file":"statusbar.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { ThemeColor } from 'vs/base/common/themables';\nimport { Event } from 'vs/base/common/event';\nimport { Command } from 'vs/editor/common/languages';\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\nimport { ColorIdentifier } from 'vs/platform/theme/common/colorRegistry';\n\nexport const IStatusbarService = createDecorator<IStatusbarService>('statusbarService');\n\nexport interface IStatusbarService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * An event that is triggered when an entry's visibility is changed.\n\t */\n\treadonly onDidChangeEntryVisibility: Event<{ id: string; visible: boolean }>;\n\n\t/**\n\t * Adds an entry to the statusbar with the given alignment and priority. Use the returned accessor\n\t * to update or remove the statusbar entry.\n\t *\n\t * @param id identifier of the entry is needed to allow users to hide entries via settings\n\t * @param alignment either LEFT or RIGHT side in the status bar\n\t * @param priority items get arranged from highest priority to lowest priority from left to right\n\t * in their respective alignment slot\n\t */\n\taddEntry(entry: IStatusbarEntry, id: string, alignment: StatusbarAlignment, priority?: number | IStatusbarEntryPriority): IStatusbarEntryAccessor;\n\n\t/**\n\t * Adds an entry to the statusbar with the given alignment relative to another entry. Use the returned\n\t * accessor to update or remove the statusbar entry.\n\t *\n\t * @param id identifier of the entry is needed to allow users to hide entries via settings\n\t * @param alignment either LEFT or RIGHT side in the status bar\n\t * @param location a reference to another entry to position relative to\n\t */\n\taddEntry(entry: IStatusbarEntry, id: string, alignment: StatusbarAlignment, location?: IStatusbarEntryLocation): IStatusbarEntryAccessor;\n\n\t/**\n\t * Return if an entry is visible or not.\n\t */\n\tisEntryVisible(id: string): boolean;\n\n\t/**\n\t * Allows to update an entry's visibility with the provided ID.\n\t */\n\tupdateEntryVisibility(id: string, visible: boolean): void;\n\n\t/**\n\t * Focused the status bar. If one of the status bar entries was focused, focuses it directly.\n\t */\n\tfocus(preserveEntryFocus?: boolean): void;\n\n\t/**\n\t * Focuses the next status bar entry. If none focused, focuses the first.\n\t */\n\tfocusNextEntry(): void;\n\n\t/**\n\t * Focuses the previous status bar entry. If none focused, focuses the last.\n\t */\n\tfocusPreviousEntry(): void;\n\n\t/**\n\t *\tReturns true if a status bar entry is focused.\n\t */\n\tisEntryFocused(): boolean;\n\n\t/**\n\t * Temporarily override statusbar style.\n\t */\n\toverrideStyle(style: IStatusbarStyleOverride): IDisposable;\n}\n\nexport const enum StatusbarAlignment {\n\tLEFT,\n\tRIGHT\n}\n\nexport interface IStatusbarEntryLocation {\n\n\t/**\n\t * The identifier of another status bar entry to\n\t * position relative to.\n\t */\n\tid: string;\n\n\t/**\n\t * The alignment of the status bar entry relative\n\t * to the referenced entry.\n\t */\n\talignment: StatusbarAlignment;\n\n\t/**\n\t * Whether to move the entry close to the location\n\t * so that it appears as if both this entry and\n\t * the location belong to each other.\n\t */\n\tcompact?: boolean;\n}\n\nexport function isStatusbarEntryLocation(thing: unknown): thing is IStatusbarEntryLocation {\n\tconst candidate = thing as IStatusbarEntryLocation | undefined;\n\n\treturn typeof candidate?.id === 'string' && typeof candidate.alignment === 'number';\n}\n\nexport interface IStatusbarEntryPriority {\n\n\t/**\n\t * The main priority of the entry that\n\t * defines the order of appearance:\n\t * either a number or a reference to\n\t * another status bar entry to position\n\t * relative to.\n\t *\n\t * May not be unique across all entries.\n\t */\n\treadonly primary: number | IStatusbarEntryLocation;\n\n\t/**\n\t * The secondary priority of the entry\n\t * is used in case the main priority\n\t * matches another one's priority.\n\t *\n\t * Should be unique across all entries.\n\t */\n\treadonly secondary: number;\n}\n\nexport function isStatusbarEntryPriority(thing: unknown): thing is IStatusbarEntryPriority {\n\tconst candidate = thing as IStatusbarEntryPriority | undefined;\n\n\treturn (typeof candidate?.primary === 'number' || isStatusbarEntryLocation(candidate?.primary)) && typeof candidate?.secondary === 'number';\n}\n\nexport const ShowTooltipCommand: Command = {\n\tid: 'statusBar.entry.showTooltip',\n\ttitle: ''\n};\n\nexport interface IStatusbarStyleOverride {\n\treadonly priority: number; // lower has higher priority\n\treadonly foreground?: ColorIdentifier;\n\treadonly background?: ColorIdentifier;\n\treadonly border?: ColorIdentifier;\n}\n\nexport type StatusbarEntryKind = 'standard' | 'warning' | 'error' | 'prominent' | 'remote' | 'offline';\nexport const StatusbarEntryKinds: StatusbarEntryKind[] = ['standard', 'warning', 'error', 'prominent', 'remote', 'offline'];\n\n/**\n * A declarative way of describing a status bar entry\n */\nexport interface IStatusbarEntry {\n\n\t/**\n\t * The (short) name to show for the entry like 'Language Indicator',\n\t * 'Git Status' etc.\n\t */\n\treadonly name: string;\n\n\t/**\n\t * The text to show for the entry. You can embed icons in the text by leveraging the syntax:\n\t *\n\t * `My text $(icon name) contains icons like $(icon name) this one.`\n\t */\n\treadonly text: string;\n\n\t/**\n\t * Text to be read out by the screen reader.\n\t */\n\treadonly ariaLabel: string;\n\n\t/**\n\t * Role of the status bar entry which defines how a screen reader interacts with it.\n\t * Default is 'button'.\n\t */\n\treadonly role?: string;\n\n\t/**\n\t * An optional tooltip text to show when you hover over the entry\n\t */\n\treadonly tooltip?: string | IMarkdownString | HTMLElement;\n\n\t/**\n\t * An optional color to use for the entry.\n\t *\n\t * @deprecated Use `kind` instead to support themable hover styles.\n\t */\n\treadonly color?: string | ThemeColor;\n\n\t/**\n\t * An optional background color to use for the entry.\n\t *\n\t * @deprecated Use `kind` instead to support themable hover styles.\n\t */\n\treadonly backgroundColor?: string | ThemeColor;\n\n\t/**\n\t * An optional command to execute on click.\n\t *\n\t * Can use the special `ShowTooltipCommand` to\n\t * show the tooltip on click if provided.\n\t */\n\treadonly command?: string | Command | typeof ShowTooltipCommand;\n\n\t/**\n\t * Whether to show a beak above the status bar entry.\n\t */\n\treadonly showBeak?: boolean;\n\n\t/**\n\t * Will enable a spinning icon in front of the text to indicate progress. When `true` is\n\t * specified, `syncing` will be used.\n\t */\n\treadonly showProgress?: boolean | 'syncing' | 'loading';\n\n\t/**\n\t * The kind of status bar entry. This applies different colors to the entry.\n\t */\n\treadonly kind?: StatusbarEntryKind;\n}\n\nexport interface IStatusbarEntryAccessor extends IDisposable {\n\n\t/**\n\t * Allows to update an existing status bar entry.\n\t */\n\tupdate(properties: IStatusbarEntry): void;\n}\n"]}