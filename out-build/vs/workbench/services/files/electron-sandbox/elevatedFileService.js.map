{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/files/electron-sandbox/elevatedFileService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAYzF,IAAM,IAAI,GAAV,MAAM,IAAI;QAIhB,YACsC,CAAuB,EAC7B,CAAgB,EACM,CAAwB;YAFxC,MAAC,GAAD,CAAC,CAAsB;YAC7B,MAAC,GAAD,CAAC,CAAe;YACM,MAAC,GAAD,CAAC,CAAuB;QAC1E,CAAC;QAEL,WAAW,CAAC,QAAa;YACxB,wDAAwD;YACxD,uDAAuD;YACvD,mBAAmB;YACnB,qDAAqD;YACrD,OAAO,QAAQ,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,CAAC;QACzC,CAAC;QAED,KAAK,CAAC,iBAAiB,CAAC,QAAa,EAAE,KAA2D,EAAE,OAA2B;YAC9H,MAAM,MAAM,GAAG,SAAG,CAAC,IAAI,CAAC,IAAA,aAAG,EAAQ,IAAI,CAAC,CAAC,CAAkB,YAAY,EAAE,eAAe,CAAC,CAAC,CAAC;YAC3F,IAAI;gBACH,8BAA8B;gBAC9B,MAAM,IAAI,CAAC,CAAC,CAAW,SAAS,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;gBAEzD,wBAAwB;gBACxB,MAAM,IAAI,CAAC,CAAC,CAAiB,aAAa,CAAC,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;aACtE;oBAAS;gBAET,WAAW;gBACX,MAAM,IAAI,CAAC,CAAC,CAAW,GAAG,CAAC,MAAM,CAAC,CAAC;aACnC;YAED,OAAO,IAAI,CAAC,CAAC,CAAW,OAAO,CAAC,QAAQ,EAAE,EAAE,eAAe,EAAE,IAAI,EAAE,CAAC,CAAC;QACtE,CAAC;KACD,CAAA;IAlCY,oBAAI;mBAAJ,IAAI;QAKd,WAAA,aAAI,CAAA;QACJ,WAAA,WAAG,CAAA;QACH,WAAA,yBAAI,CAAA;OAPM,IAAI,CAkChB;IAED,IAAA,gBAAG,EAAe,yBAAG,EAAmB,IAAI,oCAAiD,CAAC","file":"elevatedFileService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer, VSBufferReadable, VSBufferReadableStream } from 'vs/base/common/buffer';\nimport { randomPath } from 'vs/base/common/extpath';\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { IFileService, IFileStatWithMetadata, IWriteFileOptions } from 'vs/platform/files/common/files';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { INativeHostService } from 'vs/platform/native/common/native';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { IElevatedFileService } from 'vs/workbench/services/files/common/elevatedFileService';\n\nexport class NativeElevatedFileService implements IElevatedFileService {\n\n\treadonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@INativeWorkbenchEnvironmentService private readonly environmentService: INativeWorkbenchEnvironmentService\n\t) { }\n\n\tisSupported(resource: URI): boolean {\n\t\t// Saving elevated is currently only supported for local\n\t\t// files for as long as we have no generic support from\n\t\t// the file service\n\t\t// (https://github.com/microsoft/vscode/issues/48659)\n\t\treturn resource.scheme === Schemas.file;\n\t}\n\n\tasync writeFileElevated(resource: URI, value: VSBuffer | VSBufferReadable | VSBufferReadableStream, options?: IWriteFileOptions): Promise<IFileStatWithMetadata> {\n\t\tconst source = URI.file(randomPath(this.environmentService.userDataPath, 'code-elevated'));\n\t\ttry {\n\t\t\t// write into a tmp file first\n\t\t\tawait this.fileService.writeFile(source, value, options);\n\n\t\t\t// then sudo prompt copy\n\t\t\tawait this.nativeHostService.writeElevated(source, resource, options);\n\t\t} finally {\n\n\t\t\t// clean up\n\t\t\tawait this.fileService.del(source);\n\t\t}\n\n\t\treturn this.fileService.resolve(resource, { resolveMetadata: true });\n\t}\n}\n\nregisterSingleton(IElevatedFileService, NativeElevatedFileService, InstantiationType.Delayed);\n"]}