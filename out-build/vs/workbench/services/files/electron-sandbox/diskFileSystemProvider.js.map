{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/files/electron-sandbox/diskFileSystemProvider.ts"],"names":[],"mappings":"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","file":"diskFileSystemProvider.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { isLinux } from 'vs/base/common/platform';\nimport { FileSystemProviderCapabilities, IFileDeleteOptions, IStat, FileType, IFileReadStreamOptions, IFileWriteOptions, IFileOpenOptions, IFileOverwriteOptions, IFileSystemProviderWithFileReadWriteCapability, IFileSystemProviderWithOpenReadWriteCloseCapability, IFileSystemProviderWithFileReadStreamCapability, IFileSystemProviderWithFileFolderCopyCapability, IFileSystemProviderWithFileAtomicReadCapability, IFileAtomicReadOptions, IFileSystemProviderWithFileCloneCapability } from 'vs/platform/files/common/files';\nimport { AbstractDiskFileSystemProvider } from 'vs/platform/files/common/diskFileSystemProvider';\nimport { IMainProcessService } from 'vs/platform/ipc/common/mainProcessService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { ReadableStreamEvents } from 'vs/base/common/stream';\nimport { URI } from 'vs/base/common/uri';\nimport { DiskFileSystemProviderClient, LOCAL_FILE_SYSTEM_CHANNEL_NAME } from 'vs/platform/files/common/diskFileSystemProviderClient';\nimport { IDiskFileChange, ILogMessage, AbstractUniversalWatcherClient } from 'vs/platform/files/common/watcher';\nimport { UniversalWatcherClient } from 'vs/workbench/services/files/electron-sandbox/watcherClient';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IUtilityProcessWorkerWorkbenchService } from 'vs/workbench/services/utilityProcess/electron-sandbox/utilityProcessWorkerWorkbenchService';\n\n/**\n * A sandbox ready disk file system provider that delegates almost all calls\n * to the main process via `DiskFileSystemProviderServer` except for recursive\n * file watching that is done via shared process workers due to CPU intensity.\n */\nexport class DiskFileSystemProvider extends AbstractDiskFileSystemProvider implements\n\tIFileSystemProviderWithFileReadWriteCapability,\n\tIFileSystemProviderWithOpenReadWriteCloseCapability,\n\tIFileSystemProviderWithFileReadStreamCapability,\n\tIFileSystemProviderWithFileFolderCopyCapability,\n\tIFileSystemProviderWithFileAtomicReadCapability,\n\tIFileSystemProviderWithFileCloneCapability {\n\n\tprivate readonly provider = this._register(new DiskFileSystemProviderClient(this.mainProcessService.getChannel(LOCAL_FILE_SYSTEM_CHANNEL_NAME), { pathCaseSensitive: isLinux, trash: true }));\n\n\tconstructor(\n\t\tprivate readonly mainProcessService: IMainProcessService,\n\t\tprivate readonly utilityProcessWorkerWorkbenchService: IUtilityProcessWorkerWorkbenchService,\n\t\tlogService: ILogService\n\t) {\n\t\tsuper(logService, { watcher: { forceUniversal: true /* send all requests to universal watcher process */ } });\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Forward events from the embedded provider\n\t\tthis.provider.onDidChangeFile(changes => this._onDidChangeFile.fire(changes));\n\t\tthis.provider.onDidWatchError(error => this._onDidWatchError.fire(error));\n\t}\n\n\t//#region File Capabilities\n\n\tget onDidChangeCapabilities(): Event<void> { return this.provider.onDidChangeCapabilities; }\n\n\tget capabilities(): FileSystemProviderCapabilities { return this.provider.capabilities; }\n\n\t//#endregion\n\n\t//#region File Metadata Resolving\n\n\tstat(resource: URI): Promise<IStat> {\n\t\treturn this.provider.stat(resource);\n\t}\n\n\treaddir(resource: URI): Promise<[string, FileType][]> {\n\t\treturn this.provider.readdir(resource);\n\t}\n\n\t//#endregion\n\n\t//#region File Reading/Writing\n\n\treadFile(resource: URI, opts?: IFileAtomicReadOptions): Promise<Uint8Array> {\n\t\treturn this.provider.readFile(resource, opts);\n\t}\n\n\treadFileStream(resource: URI, opts: IFileReadStreamOptions, token: CancellationToken): ReadableStreamEvents<Uint8Array> {\n\t\treturn this.provider.readFileStream(resource, opts, token);\n\t}\n\n\twriteFile(resource: URI, content: Uint8Array, opts: IFileWriteOptions): Promise<void> {\n\t\treturn this.provider.writeFile(resource, content, opts);\n\t}\n\n\topen(resource: URI, opts: IFileOpenOptions): Promise<number> {\n\t\treturn this.provider.open(resource, opts);\n\t}\n\n\tclose(fd: number): Promise<void> {\n\t\treturn this.provider.close(fd);\n\t}\n\n\tread(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> {\n\t\treturn this.provider.read(fd, pos, data, offset, length);\n\t}\n\n\twrite(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number> {\n\t\treturn this.provider.write(fd, pos, data, offset, length);\n\t}\n\n\t//#endregion\n\n\t//#region Move/Copy/Delete/Create Folder\n\n\tmkdir(resource: URI): Promise<void> {\n\t\treturn this.provider.mkdir(resource);\n\t}\n\n\tdelete(resource: URI, opts: IFileDeleteOptions): Promise<void> {\n\t\treturn this.provider.delete(resource, opts);\n\t}\n\n\trename(from: URI, to: URI, opts: IFileOverwriteOptions): Promise<void> {\n\t\treturn this.provider.rename(from, to, opts);\n\t}\n\n\tcopy(from: URI, to: URI, opts: IFileOverwriteOptions): Promise<void> {\n\t\treturn this.provider.copy(from, to, opts);\n\t}\n\n\t//#endregion\n\n\t//#region Clone File\n\n\tcloneFile(from: URI, to: URI): Promise<void> {\n\t\treturn this.provider.cloneFile(from, to);\n\t}\n\n\t//#endregion\n\n\t//#region File Watching\n\n\tprotected createUniversalWatcher(\n\t\tonChange: (changes: IDiskFileChange[]) => void,\n\t\tonLogMessage: (msg: ILogMessage) => void,\n\t\tverboseLogging: boolean\n\t): AbstractUniversalWatcherClient {\n\t\treturn new UniversalWatcherClient(changes => onChange(changes), msg => onLogMessage(msg), verboseLogging, this.utilityProcessWorkerWorkbenchService);\n\t}\n\n\tprotected createNonRecursiveWatcher(): never {\n\t\tthrow new Error('Method not implemented in sandbox.'); // we never expect this to be called given we set `forceUniversal: true`\n\t}\n\n\t//#endregion\n}\n"]}