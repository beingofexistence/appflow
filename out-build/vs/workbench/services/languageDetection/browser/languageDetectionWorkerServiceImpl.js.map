{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/languageDetection/browser/languageDetectionWorkerServiceImpl.ts"],"names":[],"mappings":"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","file":"languageDetectionWorkerServiceImpl.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ILanguageDetectionService, ILanguageDetectionStats, LanguageDetectionStatsClassification, LanguageDetectionStatsId } from 'vs/workbench/services/languageDetection/common/languageDetectionWorkerService';\nimport { AppResourcePath, FileAccess, nodeModulesAsarPath, nodeModulesPath, Schemas } from 'vs/base/common/network';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { URI } from 'vs/base/common/uri';\nimport { isWeb } from 'vs/base/common/platform';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { LanguageDetectionSimpleWorker } from 'vs/workbench/services/languageDetection/browser/languageDetectionSimpleWorker';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { SimpleWorkerClient } from 'vs/base/common/worker/simpleWorker';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { EditorWorkerClient, EditorWorkerHost } from 'vs/editor/browser/services/editorWorkerService';\nimport { ILanguageConfigurationService } from 'vs/editor/common/languages/languageConfigurationRegistry';\nimport { IDiagnosticsService } from 'vs/platform/diagnostics/common/diagnostics';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { LRUCache } from 'vs/base/common/map';\nimport { ILogService } from 'vs/platform/log/common/log';\n\nconst TOP_LANG_COUNTS = 12;\n\nconst regexpModuleLocation: AppResourcePath = `${nodeModulesPath}/vscode-regexp-languagedetection`;\nconst regexpModuleLocationAsar: AppResourcePath = `${nodeModulesAsarPath}/vscode-regexp-languagedetection`;\nconst moduleLocation: AppResourcePath = `${nodeModulesPath}/@vscode/vscode-languagedetection`;\nconst moduleLocationAsar: AppResourcePath = `${nodeModulesAsarPath}/@vscode/vscode-languagedetection`;\n\nexport class LanguageDetectionService extends Disposable implements ILanguageDetectionService {\n\tstatic readonly enablementSettingKey = 'workbench.editor.languageDetection';\n\tstatic readonly historyBasedEnablementConfig = 'workbench.editor.historyBasedLanguageDetection';\n\tstatic readonly preferHistoryConfig = 'workbench.editor.preferHistoryBasedLanguageDetection';\n\tstatic readonly workspaceOpenedLanguagesStorageKey = 'workbench.editor.languageDetectionOpenedLanguages.workspace';\n\tstatic readonly globalOpenedLanguagesStorageKey = 'workbench.editor.languageDetectionOpenedLanguages.global';\n\n\t_serviceBrand: undefined;\n\n\tprivate _languageDetectionWorkerClient: LanguageDetectionWorkerClient;\n\n\tprivate hasResolvedWorkspaceLanguageIds = false;\n\tprivate workspaceLanguageIds = new Set<string>();\n\tprivate sessionOpenedLanguageIds = new Set<string>();\n\tprivate historicalGlobalOpenedLanguageIds = new LRUCache<string, true>(TOP_LANG_COUNTS);\n\tprivate historicalWorkspaceOpenedLanguageIds = new LRUCache<string, true>(TOP_LANG_COUNTS);\n\tprivate dirtyBiases: boolean = true;\n\tprivate langBiases: Record<string, number> = {};\n\n\tconstructor(\n\t\t@IWorkbenchEnvironmentService private readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ILanguageService languageService: ILanguageService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IDiagnosticsService private readonly _diagnosticsService: IDiagnosticsService,\n\t\t@IWorkspaceContextService private readonly _workspaceContextService: IWorkspaceContextService,\n\t\t@IModelService modelService: IModelService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@ILanguageConfigurationService languageConfigurationService: ILanguageConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tthis._languageDetectionWorkerClient = this._register(new LanguageDetectionWorkerClient(\n\t\t\tmodelService,\n\t\t\tlanguageService,\n\t\t\ttelemetryService,\n\t\t\t// TODO: See if it's possible to bundle vscode-languagedetection\n\t\t\tthis._environmentService.isBuilt && !isWeb\n\t\t\t\t? FileAccess.asBrowserUri(`${moduleLocationAsar}/dist/lib/index.js`).toString(true)\n\t\t\t\t: FileAccess.asBrowserUri(`${moduleLocation}/dist/lib/index.js`).toString(true),\n\t\t\tthis._environmentService.isBuilt && !isWeb\n\t\t\t\t? FileAccess.asBrowserUri(`${moduleLocationAsar}/model/model.json`).toString(true)\n\t\t\t\t: FileAccess.asBrowserUri(`${moduleLocation}/model/model.json`).toString(true),\n\t\t\tthis._environmentService.isBuilt && !isWeb\n\t\t\t\t? FileAccess.asBrowserUri(`${moduleLocationAsar}/model/group1-shard1of1.bin`).toString(true)\n\t\t\t\t: FileAccess.asBrowserUri(`${moduleLocation}/model/group1-shard1of1.bin`).toString(true),\n\t\t\tthis._environmentService.isBuilt && !isWeb\n\t\t\t\t? FileAccess.asBrowserUri(`${regexpModuleLocationAsar}/dist/index.js`).toString(true)\n\t\t\t\t: FileAccess.asBrowserUri(`${regexpModuleLocation}/dist/index.js`).toString(true),\n\t\t\tlanguageConfigurationService\n\t\t));\n\n\t\tthis.initEditorOpenedListeners(storageService);\n\t}\n\n\tprivate async resolveWorkspaceLanguageIds() {\n\t\tif (this.hasResolvedWorkspaceLanguageIds) { return; }\n\t\tthis.hasResolvedWorkspaceLanguageIds = true;\n\t\tconst fileExtensions = await this._diagnosticsService.getWorkspaceFileExtensions(this._workspaceContextService.getWorkspace());\n\n\t\tlet count = 0;\n\t\tfor (const ext of fileExtensions.extensions) {\n\t\t\tconst langId = this._languageDetectionWorkerClient.getLanguageId(ext);\n\t\t\tif (langId && count < TOP_LANG_COUNTS) {\n\t\t\t\tthis.workspaceLanguageIds.add(langId);\n\t\t\t\tcount++;\n\t\t\t\tif (count > TOP_LANG_COUNTS) { break; }\n\t\t\t}\n\t\t}\n\t\tthis.dirtyBiases = true;\n\t}\n\n\tpublic isEnabledForLanguage(languageId: string): boolean {\n\t\treturn !!languageId && this._configurationService.getValue<boolean>(LanguageDetectionService.enablementSettingKey, { overrideIdentifier: languageId });\n\t}\n\n\n\tprivate getLanguageBiases(): Record<string, number> {\n\t\tif (!this.dirtyBiases) { return this.langBiases; }\n\n\t\tconst biases: Record<string, number> = {};\n\n\t\t// Give different weight to the biases depending on relevance of source\n\t\tthis.sessionOpenedLanguageIds.forEach(lang =>\n\t\t\tbiases[lang] = (biases[lang] ?? 0) + 7);\n\n\t\tthis.workspaceLanguageIds.forEach(lang =>\n\t\t\tbiases[lang] = (biases[lang] ?? 0) + 5);\n\n\t\t[...this.historicalWorkspaceOpenedLanguageIds.keys()].forEach(lang =>\n\t\t\tbiases[lang] = (biases[lang] ?? 0) + 3);\n\n\t\t[...this.historicalGlobalOpenedLanguageIds.keys()].forEach(lang =>\n\t\t\tbiases[lang] = (biases[lang] ?? 0) + 1);\n\n\t\tthis._logService.trace('Session Languages:', JSON.stringify([...this.sessionOpenedLanguageIds]));\n\t\tthis._logService.trace('Workspace Languages:', JSON.stringify([...this.workspaceLanguageIds]));\n\t\tthis._logService.trace('Historical Workspace Opened Languages:', JSON.stringify([...this.historicalWorkspaceOpenedLanguageIds.keys()]));\n\t\tthis._logService.trace('Historical Globally Opened Languages:', JSON.stringify([...this.historicalGlobalOpenedLanguageIds.keys()]));\n\t\tthis._logService.trace('Computed Language Detection Biases:', JSON.stringify(biases));\n\t\tthis.dirtyBiases = false;\n\t\tthis.langBiases = biases;\n\t\treturn biases;\n\t}\n\n\tasync detectLanguage(resource: URI, supportedLangs?: string[]): Promise<string | undefined> {\n\t\tconst useHistory = this._configurationService.getValue<string[]>(LanguageDetectionService.historyBasedEnablementConfig);\n\t\tconst preferHistory = this._configurationService.getValue<boolean>(LanguageDetectionService.preferHistoryConfig);\n\t\tif (useHistory) {\n\t\t\tawait this.resolveWorkspaceLanguageIds();\n\t\t}\n\t\tconst biases = useHistory ? this.getLanguageBiases() : undefined;\n\t\treturn this._languageDetectionWorkerClient.detectLanguage(resource, biases, preferHistory, supportedLangs);\n\t}\n\n\t// TODO: explore using the history service or something similar to provide this list of opened editors\n\t// so this service can support delayed instantiation. This may be tricky since it seems the IHistoryService\n\t// only gives history for a workspace... where this takes advantage of history at a global level as well.\n\tprivate initEditorOpenedListeners(storageService: IStorageService) {\n\t\ttry {\n\t\t\tconst globalLangHistoryData = JSON.parse(storageService.get(LanguageDetectionService.globalOpenedLanguagesStorageKey, StorageScope.PROFILE, '[]'));\n\t\t\tthis.historicalGlobalOpenedLanguageIds.fromJSON(globalLangHistoryData);\n\t\t} catch (e) { console.error(e); }\n\n\t\ttry {\n\t\t\tconst workspaceLangHistoryData = JSON.parse(storageService.get(LanguageDetectionService.workspaceOpenedLanguagesStorageKey, StorageScope.WORKSPACE, '[]'));\n\t\t\tthis.historicalWorkspaceOpenedLanguageIds.fromJSON(workspaceLangHistoryData);\n\t\t} catch (e) { console.error(e); }\n\n\t\tthis._register(this._editorService.onDidActiveEditorChange(() => {\n\t\t\tconst activeLanguage = this._editorService.activeTextEditorLanguageId;\n\t\t\tif (activeLanguage && this._editorService.activeEditor?.resource?.scheme !== Schemas.untitled) {\n\t\t\t\tthis.sessionOpenedLanguageIds.add(activeLanguage);\n\t\t\t\tthis.historicalGlobalOpenedLanguageIds.set(activeLanguage, true);\n\t\t\t\tthis.historicalWorkspaceOpenedLanguageIds.set(activeLanguage, true);\n\t\t\t\tstorageService.store(LanguageDetectionService.globalOpenedLanguagesStorageKey, JSON.stringify(this.historicalGlobalOpenedLanguageIds.toJSON()), StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\t\t\tstorageService.store(LanguageDetectionService.workspaceOpenedLanguagesStorageKey, JSON.stringify(this.historicalWorkspaceOpenedLanguageIds.toJSON()), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t\t\tthis.dirtyBiases = true;\n\t\t\t}\n\t\t}));\n\t}\n}\n\nexport interface IWorkerClient<W> {\n\tgetProxyObject(): Promise<W>;\n\tdispose(): void;\n}\n\nexport class LanguageDetectionWorkerHost {\n\tconstructor(\n\t\tprivate _indexJsUri: string,\n\t\tprivate _modelJsonUri: string,\n\t\tprivate _weightsUri: string,\n\t\tprivate _telemetryService: ITelemetryService,\n\t) {\n\t}\n\n\tasync getIndexJsUri() {\n\t\treturn this._indexJsUri;\n\t}\n\n\tasync getModelJsonUri() {\n\t\treturn this._modelJsonUri;\n\t}\n\n\tasync getWeightsUri() {\n\t\treturn this._weightsUri;\n\t}\n\n\tasync sendTelemetryEvent(languages: string[], confidences: number[], timeSpent: number): Promise<void> {\n\t\ttype LanguageDetectionStats = { languages: string; confidences: string; timeSpent: number };\n\t\ttype LanguageDetectionStatsClassification = {\n\t\t\towner: 'TylerLeonhardt';\n\t\t\tcomment: 'Helps understand how effective language detection is via confidences and how long it takes to run';\n\t\t\tlanguages: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The languages that are guessed' };\n\t\t\tconfidences: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The confidences of each language guessed' };\n\t\t\ttimeSpent: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The time it took to run language detection' };\n\t\t};\n\n\t\tthis._telemetryService.publicLog2<LanguageDetectionStats, LanguageDetectionStatsClassification>('automaticlanguagedetection.stats', {\n\t\t\tlanguages: languages.join(','),\n\t\t\tconfidences: confidences.join(','),\n\t\t\ttimeSpent\n\t\t});\n\t}\n}\n\nexport class LanguageDetectionWorkerClient extends EditorWorkerClient {\n\tprivate workerPromise: Promise<IWorkerClient<LanguageDetectionSimpleWorker>> | undefined;\n\n\tconstructor(\n\t\tmodelService: IModelService,\n\t\tprivate readonly _languageService: ILanguageService,\n\t\tprivate readonly _telemetryService: ITelemetryService,\n\t\tprivate readonly _indexJsUri: string,\n\t\tprivate readonly _modelJsonUri: string,\n\t\tprivate readonly _weightsUri: string,\n\t\tprivate readonly _regexpModelUri: string,\n\t\tlanguageConfigurationService: ILanguageConfigurationService,\n\t) {\n\t\tsuper(modelService, true, 'languageDetectionWorkerService', languageConfigurationService);\n\t}\n\n\tprivate _getOrCreateLanguageDetectionWorker(): Promise<IWorkerClient<LanguageDetectionSimpleWorker>> {\n\t\tif (this.workerPromise) {\n\t\t\treturn this.workerPromise;\n\t\t}\n\n\t\tthis.workerPromise = new Promise((resolve, reject) => {\n\t\t\tresolve(this._register(new SimpleWorkerClient<LanguageDetectionSimpleWorker, EditorWorkerHost>(\n\t\t\t\tthis._workerFactory,\n\t\t\t\t'vs/workbench/services/languageDetection/browser/languageDetectionSimpleWorker',\n\t\t\t\tnew EditorWorkerHost(this)\n\t\t\t)));\n\t\t});\n\n\t\treturn this.workerPromise;\n\t}\n\n\tprivate _guessLanguageIdByUri(uri: URI): string | undefined {\n\t\tconst guess = this._languageService.guessLanguageIdByFilepathOrFirstLine(uri);\n\t\tif (guess && guess !== 'unknown') {\n\t\t\treturn guess;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprotected override async _getProxy(): Promise<LanguageDetectionSimpleWorker> {\n\t\treturn (await this._getOrCreateLanguageDetectionWorker()).getProxyObject();\n\t}\n\n\t// foreign host request\n\tpublic override async fhr(method: string, args: any[]): Promise<any> {\n\t\tswitch (method) {\n\t\t\tcase 'getIndexJsUri':\n\t\t\t\treturn this.getIndexJsUri();\n\t\t\tcase 'getModelJsonUri':\n\t\t\t\treturn this.getModelJsonUri();\n\t\t\tcase 'getWeightsUri':\n\t\t\t\treturn this.getWeightsUri();\n\t\t\tcase 'getRegexpModelUri':\n\t\t\t\treturn this.getRegexpModelUri();\n\t\t\tcase 'getLanguageId':\n\t\t\t\treturn this.getLanguageId(args[0]);\n\t\t\tcase 'sendTelemetryEvent':\n\t\t\t\treturn this.sendTelemetryEvent(args[0], args[1], args[2]);\n\t\t\tdefault:\n\t\t\t\treturn super.fhr(method, args);\n\t\t}\n\t}\n\n\tasync getIndexJsUri() {\n\t\treturn this._indexJsUri;\n\t}\n\n\tgetLanguageId(languageIdOrExt: string | undefined) {\n\t\tif (!languageIdOrExt) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (this._languageService.isRegisteredLanguageId(languageIdOrExt)) {\n\t\t\treturn languageIdOrExt;\n\t\t}\n\t\tconst guessed = this._guessLanguageIdByUri(URI.file(`file.${languageIdOrExt}`));\n\t\tif (!guessed || guessed === 'unknown') {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn guessed;\n\t}\n\n\tasync getModelJsonUri() {\n\t\treturn this._modelJsonUri;\n\t}\n\n\tasync getWeightsUri() {\n\t\treturn this._weightsUri;\n\t}\n\n\tasync getRegexpModelUri() {\n\t\treturn this._regexpModelUri;\n\t}\n\n\tasync sendTelemetryEvent(languages: string[], confidences: number[], timeSpent: number): Promise<void> {\n\t\tthis._telemetryService.publicLog2<ILanguageDetectionStats, LanguageDetectionStatsClassification>(LanguageDetectionStatsId, {\n\t\t\tlanguages: languages.join(','),\n\t\t\tconfidences: confidences.join(','),\n\t\t\ttimeSpent\n\t\t});\n\t}\n\n\tpublic async detectLanguage(resource: URI, langBiases: Record<string, number> | undefined, preferHistory: boolean, supportedLangs?: string[]): Promise<string | undefined> {\n\t\tconst startTime = Date.now();\n\t\tconst quickGuess = this._guessLanguageIdByUri(resource);\n\t\tif (quickGuess) {\n\t\t\treturn quickGuess;\n\t\t}\n\n\t\tawait this._withSyncedResources([resource]);\n\t\tconst modelId = await (await this._getProxy()).detectLanguage(resource.toString(), langBiases, preferHistory, supportedLangs);\n\t\tconst languageId = this.getLanguageId(modelId);\n\n\t\tconst LanguageDetectionStatsId = 'automaticlanguagedetection.perf';\n\n\t\tinterface ILanguageDetectionPerf {\n\t\t\ttimeSpent: number;\n\t\t\tdetection: string;\n\t\t}\n\n\t\ttype LanguageDetectionPerfClassification = {\n\t\t\towner: 'TylerLeonhardt';\n\t\t\tcomment: 'Helps understand how effective language detection and how long it takes to run';\n\t\t\ttimeSpent: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'The time it took to run language detection' };\n\t\t\tdetection: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The language that was detected' };\n\t\t};\n\n\t\tthis._telemetryService.publicLog2<ILanguageDetectionPerf, LanguageDetectionPerfClassification>(LanguageDetectionStatsId, {\n\t\t\ttimeSpent: Date.now() - startTime,\n\t\t\tdetection: languageId || 'unknown',\n\t\t});\n\n\t\treturn languageId;\n\t}\n}\n\n// For now we use Eager until we handle keeping track of history better.\nregisterSingleton(ILanguageDetectionService, LanguageDetectionService, InstantiationType.Eager);\n"]}