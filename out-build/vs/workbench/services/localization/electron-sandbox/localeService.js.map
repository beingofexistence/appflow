{"version":3,"sources":["vs/workbench/services/localization/electron-sandbox/localeService.ts"],"names":[],"mappings":"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","file":"localeService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Language, LANGUAGE_DEFAULT } from 'vs/base/common/platform';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { IJSONEditingService } from 'vs/workbench/services/configuration/common/jsonEditing';\nimport { IActiveLanguagePackService, ILocaleService } from 'vs/workbench/services/localization/common/locale';\nimport { ILanguagePackItem, ILanguagePackService } from 'vs/platform/languagePacks/common/languagePacks';\nimport { IPaneCompositePartService } from 'vs/workbench/services/panecomposite/browser/panecomposite';\nimport { IViewPaneContainer, ViewContainerLocation } from 'vs/workbench/common/views';\nimport { IExtensionManagementService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { IProgressService, ProgressLocation } from 'vs/platform/progress/common/progress';\nimport { localize } from 'vs/nls';\nimport { toAction } from 'vs/base/common/actions';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { stripComments } from 'vs/base/common/stripComments';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\n// duplicate of IExtensionsViewPaneContainer in contrib\ninterface IExtensionsViewPaneContainer extends IViewPaneContainer {\n\treadonly searchValue: string | undefined;\n\tsearch(text: string): void;\n\trefresh(): Promise<void>;\n}\n\n// duplicate of VIEWLET_ID in contrib/extensions\nconst EXTENSIONS_VIEWLET_ID = 'workbench.view.extensions';\n\nclass NativeLocaleService implements ILocaleService {\n\t_serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IJSONEditingService private readonly jsonEditingService: IJSONEditingService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ILanguagePackService private readonly languagePackService: ILanguagePackService,\n\t\t@IPaneCompositePartService private readonly paneCompositePartService: IPaneCompositePartService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IProductService private readonly productService: IProductService\n\t) { }\n\n\tprivate async validateLocaleFile(): Promise<boolean> {\n\t\ttry {\n\t\t\tconst content = await this.textFileService.read(this.environmentService.argvResource, { encoding: 'utf8' });\n\n\t\t\t// This is the same logic that we do where argv.json is parsed so mirror that:\n\t\t\t// https://github.com/microsoft/vscode/blob/32d40cf44e893e87ac33ac4f08de1e5f7fe077fc/src/main.js#L238-L246\n\t\t\tJSON.parse(stripComments(content.value));\n\t\t} catch (error) {\n\t\t\tthis.notificationService.notify({\n\t\t\t\tseverity: Severity.Error,\n\t\t\t\tmessage: localize('argvInvalid', 'Unable to write display language. Please open the runtime settings, correct errors/warnings in it and try again.'),\n\t\t\t\tactions: {\n\t\t\t\t\tprimary: [\n\t\t\t\t\t\ttoAction({\n\t\t\t\t\t\t\tid: 'openArgv',\n\t\t\t\t\t\t\tlabel: localize('openArgv', \"Open Runtime Settings\"),\n\t\t\t\t\t\t\trun: () => this.editorService.openEditor({ resource: this.environmentService.argvResource })\n\t\t\t\t\t\t})\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate async writeLocaleValue(locale: string | undefined): Promise<boolean> {\n\t\tif (!(await this.validateLocaleFile())) {\n\t\t\treturn false;\n\t\t}\n\t\tawait this.jsonEditingService.write(this.environmentService.argvResource, [{ path: ['locale'], value: locale }], true);\n\t\treturn true;\n\t}\n\n\tasync setLocale(languagePackItem: ILanguagePackItem, skipDialog = false): Promise<void> {\n\t\tconst locale = languagePackItem.id;\n\t\tif (locale === Language.value() || (!locale && Language.isDefaultVariant())) {\n\t\t\treturn;\n\t\t}\n\t\tconst installedLanguages = await this.languagePackService.getInstalledLanguages();\n\t\ttry {\n\n\t\t\t// Only Desktop has the concept of installing language packs so we only do this for Desktop\n\t\t\t// and only if the language pack is not installed\n\t\t\tif (!installedLanguages.some(installedLanguage => installedLanguage.id === languagePackItem.id)) {\n\n\t\t\t\t// Only actually install a language pack from Microsoft\n\t\t\t\tif (languagePackItem.galleryExtension?.publisher.toLowerCase() !== 'ms-ceintl') {\n\t\t\t\t\t// Show the view so the user can see the language pack that they should install\n\t\t\t\t\t// as of now, there are no 3rd party language packs available on the Marketplace.\n\t\t\t\t\tconst viewlet = await this.paneCompositePartService.openPaneComposite(EXTENSIONS_VIEWLET_ID, ViewContainerLocation.Sidebar);\n\t\t\t\t\t(viewlet?.getViewPaneContainer() as IExtensionsViewPaneContainer).search(`@id:${languagePackItem.extensionId}`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tawait this.progressService.withProgress(\n\t\t\t\t\t{\n\t\t\t\t\t\tlocation: ProgressLocation.Notification,\n\t\t\t\t\t\ttitle: localize('installing', \"Installing {0} language support...\", languagePackItem.label),\n\t\t\t\t\t},\n\t\t\t\t\tprogress => this.extensionManagementService.installFromGallery(languagePackItem.galleryExtension!, {\n\t\t\t\t\t\t// Setting this to false is how you get the extension to be synced with Settings Sync (if enabled).\n\t\t\t\t\t\tisMachineScoped: false,\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!skipDialog && !await this.showRestartDialog(languagePackItem.label)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this.writeLocaleValue(locale);\n\t\t\tawait this.hostService.restart();\n\t\t} catch (err) {\n\t\t\tthis.notificationService.error(err);\n\t\t}\n\t}\n\n\tasync clearLocalePreference(): Promise<void> {\n\t\ttry {\n\t\t\tawait this.writeLocaleValue(undefined);\n\t\t\tif (!Language.isDefaultVariant()) {\n\t\t\t\tawait this.showRestartDialog('English');\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tthis.notificationService.error(err);\n\t\t}\n\t}\n\n\tprivate async showRestartDialog(languageName: string): Promise<boolean> {\n\t\tconst { confirmed } = await this.dialogService.confirm({\n\t\t\tmessage: localize('restartDisplayLanguageMessage1', \"Restart {0} to switch to {1}?\", this.productService.nameLong, languageName),\n\t\t\tdetail: localize(\n\t\t\t\t'restartDisplayLanguageDetail1',\n\t\t\t\t\"To change the display language to {0}, {1} needs to restart.\",\n\t\t\t\tlanguageName,\n\t\t\t\tthis.productService.nameLong\n\t\t\t),\n\t\t\tprimaryButton: localize({ key: 'restart', comment: ['&& denotes a mnemonic character'] }, \"&&Restart\"),\n\t\t});\n\n\t\treturn confirmed;\n\t}\n}\n\n// This is its own service because the localeService depends on IJSONEditingService which causes a circular dependency\n// Once that's ironed out, we can fold this into the localeService.\nclass NativeActiveLanguagePackService implements IActiveLanguagePackService {\n\t_serviceBrand: undefined;\n\n\tconstructor(\n\t\t@ILanguagePackService private readonly languagePackService: ILanguagePackService\n\t) { }\n\n\tasync getExtensionIdProvidingCurrentLocale(): Promise<string | undefined> {\n\t\tconst language = Language.value();\n\t\tif (language === LANGUAGE_DEFAULT) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst languages = await this.languagePackService.getInstalledLanguages();\n\t\tconst languagePack = languages.find(l => l.id === language);\n\t\treturn languagePack?.extensionId;\n\t}\n}\n\nregisterSingleton(ILocaleService, NativeLocaleService, InstantiationType.Delayed);\nregisterSingleton(IActiveLanguagePackService, NativeActiveLanguagePackService, InstantiationType.Delayed);\n"]}