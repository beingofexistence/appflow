{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/label/test/common/mockLabelService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAShG,MAAa,IAAI;QAAjB;YA2BC,0BAAqB,GAAiC,IAAI,WAAG,EAA6B,CAAC,KAAK,CAAC;QAClG,CAAC;QAzBA,uBAAuB,CAAC,SAAiC;YACxD,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;QAC5C,CAAC;QACD,WAAW,CAAC,QAAa,EAAE,OAA4E;YACtG,OAAO,IAAA,UAAG,EAAO,QAAQ,CAAC,MAAM,CAAC,CAAC;QACnC,CAAC;QACD,mBAAmB,CAAC,QAAa;YAChC,OAAO,IAAA,UAAG,EAAM,QAAQ,CAAC,MAAM,CAAC,CAAC;QAClC,CAAC;QACD,iBAAiB,CAAC,SAAkD,EAAE,OAAgC;YACrG,OAAO,EAAE,CAAC;QACX,CAAC;QACD,YAAY,CAAC,MAAc,EAAE,SAAkB;YAC9C,OAAO,EAAE,CAAC;QACX,CAAC;QACM,cAAc;YACpB,OAAO,EAAE,CAAC;QACX,CAAC;QACD,YAAY,CAAC,MAAc,EAAE,SAAkB;YAC9C,OAAO,GAAG,CAAC;QACZ,CAAC;QACD,iBAAiB,CAAC,SAAiC;YAClD,OAAO,eAAG,CAAQ,IAAI,CAAC;QACxB,CAAC;KAED;IA5BD,oBA4BC","file":"mockLabelService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { basename, normalize } from 'vs/base/common/path';\nimport { URI } from 'vs/base/common/uri';\nimport { IFormatterChangeEvent, ILabelService, ResourceLabelFormatter, Verbosity } from 'vs/platform/label/common/label';\nimport { IWorkspace, IWorkspaceIdentifier } from 'vs/platform/workspace/common/workspace';\n\nexport class MockLabelService implements ILabelService {\n\t_serviceBrand: undefined;\n\n\tregisterCachedFormatter(formatter: ResourceLabelFormatter): IDisposable {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tgetUriLabel(resource: URI, options?: { relative?: boolean | undefined; noPrefix?: boolean | undefined }): string {\n\t\treturn normalize(resource.fsPath);\n\t}\n\tgetUriBasenameLabel(resource: URI): string {\n\t\treturn basename(resource.fsPath);\n\t}\n\tgetWorkspaceLabel(workspace: URI | IWorkspaceIdentifier | IWorkspace, options?: { verbose: Verbosity }): string {\n\t\treturn '';\n\t}\n\tgetHostLabel(scheme: string, authority?: string): string {\n\t\treturn '';\n\t}\n\tpublic getHostTooltip(): string | undefined {\n\t\treturn '';\n\t}\n\tgetSeparator(scheme: string, authority?: string): '/' | '\\\\' {\n\t\treturn '/';\n\t}\n\tregisterFormatter(formatter: ResourceLabelFormatter): IDisposable {\n\t\treturn Disposable.None;\n\t}\n\tonDidChangeFormatters: Event<IFormatterChangeEvent> = new Emitter<IFormatterChangeEvent>().event;\n}\n"]}