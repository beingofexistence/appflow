{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/environment/electron-sandbox/environmentService.ts"],"names":[],"mappings":"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","file":"environmentService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { PerformanceMark } from 'vs/base/common/performance';\nimport { IBrowserWorkbenchEnvironmentService } from 'vs/workbench/services/environment/browser/environmentService';\nimport { IColorScheme, INativeWindowConfiguration, IOSConfiguration, IPath, IPathsToWaitFor } from 'vs/platform/window/common/window';\nimport { IEnvironmentService, INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { refineServiceDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { AbstractNativeEnvironmentService } from 'vs/platform/environment/common/environmentService';\nimport { memoize } from 'vs/base/common/decorators';\nimport { URI } from 'vs/base/common/uri';\nimport { Schemas } from 'vs/base/common/network';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { joinPath } from 'vs/base/common/resources';\n\nexport const INativeWorkbenchEnvironmentService = refineServiceDecorator<IEnvironmentService, INativeWorkbenchEnvironmentService>(IEnvironmentService);\n\n/**\n * A subclass of the `IWorkbenchEnvironmentService` to be used only in native\n * environments (Windows, Linux, macOS) but not e.g. web.\n */\nexport interface INativeWorkbenchEnvironmentService extends IBrowserWorkbenchEnvironmentService, INativeEnvironmentService {\n\n\t// --- Window\n\treadonly window: {\n\t\tid: number;\n\t\tcolorScheme: IColorScheme;\n\t\tmaximized?: boolean;\n\t\taccessibilitySupport?: boolean;\n\t\tisInitialStartup?: boolean;\n\t\tisCodeCaching?: boolean;\n\t\tperfMarks: PerformanceMark[];\n\t};\n\n\t// --- Main\n\treadonly mainPid: number;\n\treadonly os: IOSConfiguration;\n\treadonly machineId: string;\n\n\t// --- Paths\n\treadonly execPath: string;\n\treadonly backupPath?: string;\n\n\t// --- Development\n\treadonly crashReporterDirectory?: string;\n\treadonly crashReporterId?: string;\n\n\t// --- Editors to --wait\n\treadonly filesToWait?: IPathsToWaitFor;\n}\n\nexport class NativeWorkbenchEnvironmentService extends AbstractNativeEnvironmentService implements INativeWorkbenchEnvironmentService {\n\n\t@memoize\n\tget mainPid() { return this.configuration.mainPid; }\n\n\t@memoize\n\tget machineId() { return this.configuration.machineId; }\n\n\t@memoize\n\tget remoteAuthority() { return this.configuration.remoteAuthority; }\n\n\t@memoize\n\tget expectsResolverExtension() { return !!this.configuration.remoteAuthority?.includes('+'); }\n\n\t@memoize\n\tget execPath() { return this.configuration.execPath; }\n\n\t@memoize\n\tget backupPath() { return this.configuration.backupPath; }\n\n\t@memoize\n\tget window() {\n\t\treturn {\n\t\t\tid: this.configuration.windowId,\n\t\t\tcolorScheme: this.configuration.colorScheme,\n\t\t\tmaximized: this.configuration.maximized,\n\t\t\taccessibilitySupport: this.configuration.accessibilitySupport,\n\t\t\tperfMarks: this.configuration.perfMarks,\n\t\t\tisInitialStartup: this.configuration.isInitialStartup,\n\t\t\tisCodeCaching: typeof this.configuration.codeCachePath === 'string'\n\t\t};\n\t}\n\n\t@memoize\n\tget windowLogsPath(): URI { return joinPath(this.logsHome, `window${this.configuration.windowId}`); }\n\n\t@memoize\n\tget logFile(): URI { return joinPath(this.windowLogsPath, `renderer.log`); }\n\n\t@memoize\n\tget extHostLogsPath(): URI { return joinPath(this.windowLogsPath, 'exthost'); }\n\n\t@memoize\n\tget extHostTelemetryLogFile(): URI {\n\t\treturn joinPath(this.extHostLogsPath, 'extensionTelemetry.log');\n\t}\n\n\t@memoize\n\tget webviewExternalEndpoint(): string { return `${Schemas.vscodeWebview}://{{uuid}}`; }\n\n\t@memoize\n\tget skipReleaseNotes(): boolean { return !!this.args['skip-release-notes']; }\n\n\t@memoize\n\tget skipWelcome(): boolean { return !!this.args['skip-welcome']; }\n\n\t@memoize\n\tget logExtensionHostCommunication(): boolean { return !!this.args.logExtensionHostCommunication; }\n\n\t@memoize\n\tget enableSmokeTestDriver(): boolean { return !!this.args['enable-smoke-test-driver']; }\n\n\t@memoize\n\tget extensionEnabledProposedApi(): string[] | undefined {\n\t\tif (Array.isArray(this.args['enable-proposed-api'])) {\n\t\t\treturn this.args['enable-proposed-api'];\n\t\t}\n\n\t\tif ('enable-proposed-api' in this.args) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t@memoize\n\tget os(): IOSConfiguration { return this.configuration.os; }\n\n\t@memoize\n\tget filesToOpenOrCreate(): IPath[] | undefined { return this.configuration.filesToOpenOrCreate; }\n\n\t@memoize\n\tget filesToDiff(): IPath[] | undefined { return this.configuration.filesToDiff; }\n\n\t@memoize\n\tget filesToMerge(): IPath[] | undefined { return this.configuration.filesToMerge; }\n\n\t@memoize\n\tget filesToWait(): IPathsToWaitFor | undefined { return this.configuration.filesToWait; }\n\n\tconstructor(\n\t\tprivate readonly configuration: INativeWindowConfiguration,\n\t\tproductService: IProductService\n\t) {\n\t\tsuper(configuration, { homeDir: configuration.homeDir, tmpDir: configuration.tmpDir, userDataDir: configuration.userDataDir }, productService);\n\t}\n}\n"]}