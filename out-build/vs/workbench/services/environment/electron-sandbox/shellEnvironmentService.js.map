{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/environment/electron-sandbox/shellEnvironmentService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOnF,QAAA,IAAI,GAAuB,IAAA,mBAAG,EAAuC,yBAAyB,CAAC,CAAC;IAS7G,MAAa,IAAI;QAIhB,WAAW;YACV,OAAO,YAAE,CAAM,QAAQ,EAAE,CAAC;QAC3B,CAAC;KACD;IAPD,oBAOC;IAED,IAAA,gBAAG,EAAe,YAAI,EAAsB,IAAI,oCAA+C,CAAC","file":"shellEnvironmentService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IProcessEnvironment } from 'vs/base/common/platform';\nimport { process } from 'vs/base/parts/sandbox/electron-sandbox/globals';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\nexport const IShellEnvironmentService = createDecorator<IShellEnvironmentService>('shellEnvironmentService');\n\nexport interface IShellEnvironmentService {\n\n\treadonly _serviceBrand: undefined;\n\n\tgetShellEnv(): Promise<IProcessEnvironment>;\n}\n\nexport class ShellEnvironmentService implements IShellEnvironmentService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tgetShellEnv(): Promise<IProcessEnvironment> {\n\t\treturn process.shellEnv();\n\t}\n}\n\nregisterSingleton(IShellEnvironmentService, ShellEnvironmentService, InstantiationType.Delayed);\n"]}