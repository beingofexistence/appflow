{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/path/browser/pathService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAWzF,IAAM,IAAI,GAAV,MAAM,IAAmB,SAAQ,iBAAG;QAE1C,YACsB,kBAAuB,EACd,kBAAuB,EAC3B,cAAmB;YAE7C,KAAK,CACJ,kBAAkB,CAAC,kBAAkB,EAAE,cAAc,CAAC,EACtD,kBAAkB,EAClB,kBAAkB,EAClB,cAAc,CACd,CAAC;QACH,CAAC;KACD,CAAA;IAdY,oBAAI;mBAAJ,IAAI;QAGd,WAAA,wBAAG,CAAA;QACH,WAAA,wBAAG,CAAA;QACH,WAAA,eAAG,CAAA;OALO,IAAI,CAchB;IAED,SAAS,kBAAkB,CAAC,kBAAuB,EAA2B,cAAmB;QAEhG,kEAAkE;QAClE,iEAAiE;QACjE,gEAAgE;QAChE,eAAe;QAEf,MAAM,SAAS,GAAG,cAAc,CAAC,YAAY,EAAE,CAAC;QAEhD,MAAM,WAAW,GAAG,IAAA,YAAG,EAAY,SAAS,CAAC,OAAO,CAAC,CAAC;QACtD,IAAI,WAAW,EAAE;YAChB,OAAO,WAAW,CAAC,GAAG,CAAC;SACvB;QAED,IAAI,SAAS,CAAC,aAAa,EAAE;YAC5B,OAAO,IAAA,eAAG,EAAK,SAAS,CAAC,aAAa,CAAC,CAAC;SACxC;QAED,wEAAwE;QACxE,uEAAuE;QACvE,uCAAuC;QAEvC,OAAO,SAAG,CAAC,IAAI,CAAC;YACf,MAAM,EAAE,iBAAG,CAAiB,oBAAoB,CAAC,kBAAkB,EAAE,cAAc,CAAC;YACpF,SAAS,EAAE,kBAAkB,CAAC,eAAe;YAC7C,IAAI,EAAE,GAAG;SACT,CAAC,CAAC;IACJ,CAAC;IAED,IAAA,gBAAG,EAAe,iBAAG,EAAW,IAAI,oCAA0C,CAAC","file":"pathService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { IPathService, AbstractPathService } from 'vs/workbench/services/path/common/pathService';\nimport { URI } from 'vs/base/common/uri';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { firstOrDefault } from 'vs/base/common/arrays';\nimport { dirname } from 'vs/base/common/resources';\n\nexport class BrowserPathService extends AbstractPathService {\n\n\tconstructor(\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService\n\t) {\n\t\tsuper(\n\t\t\tguessLocalUserHome(environmentService, contextService),\n\t\t\tremoteAgentService,\n\t\t\tenvironmentService,\n\t\t\tcontextService\n\t\t);\n\t}\n}\n\nfunction guessLocalUserHome(environmentService: IWorkbenchEnvironmentService, contextService: IWorkspaceContextService): URI {\n\n\t// In web we do not really have the concept of a \"local\" user home\n\t// but we still require it in many places as a fallback. As such,\n\t// we have to come up with a synthetic location derived from the\n\t// environment.\n\n\tconst workspace = contextService.getWorkspace();\n\n\tconst firstFolder = firstOrDefault(workspace.folders);\n\tif (firstFolder) {\n\t\treturn firstFolder.uri;\n\t}\n\n\tif (workspace.configuration) {\n\t\treturn dirname(workspace.configuration);\n\t}\n\n\t// This is not ideal because with a user home location of `/`, all paths\n\t// will potentially appear with `~/...`, but at this point we really do\n\t// not have any other good alternative.\n\n\treturn URI.from({\n\t\tscheme: AbstractPathService.findDefaultUriScheme(environmentService, contextService),\n\t\tauthority: environmentService.remoteAuthority,\n\t\tpath: '/'\n\t});\n}\n\nregisterSingleton(IPathService, BrowserPathService, InstantiationType.Delayed);\n"]}