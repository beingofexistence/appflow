{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/userData/browser/userDataInit.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAkBnF,QAAA,IAAI,GAA6B,IAAA,mBAAG,EAA6C,gCAAgC,CAAC,CAAC;IAKhI,MAAa,IAAI;QAIhB,YAA6B,IAAuC,EAAE;YAAzC,MAAC,GAAD,CAAC,CAAwC;QACtE,CAAC;QAED,KAAK,CAAC,0BAA0B;YAC/B,IAAI,MAAM,IAAI,CAAC,sBAAsB,EAAE,EAAE;gBACxC,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAY,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,WAAW,CAAC,0BAA0B,EAAE,CAAC,CAAC,CAAC;aAClG;QACF,CAAC;QAED,KAAK,CAAC,sBAAsB;YAC3B,OAAO,CAAC,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAY,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,WAAW,CAAC,sBAAsB,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC;QAC/H,CAAC;QAED,KAAK,CAAC,2BAA2B;YAChC,IAAI,MAAM,IAAI,CAAC,sBAAsB,EAAE,EAAE;gBACxC,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAY,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,WAAW,CAAC,2BAA2B,EAAE,CAAC,CAAC,CAAC;aACnG;QACF,CAAC;QAED,KAAK,CAAC,wBAAwB,CAAC,oBAAyB;YACvD,IAAI,MAAM,IAAI,CAAC,sBAAsB,EAAE,EAAE;gBACxC,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAY,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,WAAW,CAAC,wBAAwB,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;aACpH;QACF,CAAC;QAED,KAAK,CAAC,6BAA6B,CAAC,oBAAyB;YAC5D,IAAI,MAAM,IAAI,CAAC,sBAAsB,EAAE,EAAE;gBACxC,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAY,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,WAAW,CAAC,6BAA6B,CAAC,oBAAoB,CAAC,CAAC,CAAC,CAAC;aACzH;QACF,CAAC;KAED;IAnCD,oBAmCC;IAED,IAAM,oCAAoC,GAA1C,MAAM,oCAAoC;QACzC,YACiC,yBAA+B,EACxC,oBAAyB,EAC7B,gBAAqB;YAExC,gBAAgB,CAAC,iCAAiC,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAuB,yBAAyB,EAAE,oBAAoB,CAAC,CAAC,CAAC;QAChJ,CAAC;QAEO,KAAK,CAAC,CAAC,CAAuB,yBAA+B,EAA4B,oBAAyB;YACzH,IAAI,MAAM,yBAAyB,CAAC,sBAAsB,EAAE,EAAE;gBAC7D,IAAA,kBAAI,EAAC,4BAA4B,CAAC,CAAC;gBACnC,MAAM,yBAAyB,CAAC,wBAAwB,CAAC,oBAAoB,CAAC,CAAC;gBAC/E,IAAA,kBAAI,EAAC,2BAA2B,CAAC,CAAC;aAClC;QACF,CAAC;KACD,CAAA;IAhBK,oCAAoC;QAEvC,WAAA,YAAI,CAAA;QACJ,WAAA,mBAAG,CAAA;QACH,WAAA,gBAAG,CAAA;OAJA,oCAAoC,CAgBzC;IAED,IAAI,aAAE,EAAK;QACV,MAAM,iBAAiB,GAAG,cAAG,CAAM,EAAE,CAAkC,0BAAU,CAAC,SAAS,CAAC,CAAC;QAC7F,iBAAiB,CAAC,6BAA6B,CAAC,oCAAoC,kCAA0B,CAAC;KAC/G","file":"userDataInit.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator, IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions } from 'vs/workbench/common/contributions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { isWeb } from 'vs/base/common/platform';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { mark } from 'vs/base/common/performance';\n\nexport interface IUserDataInitializer {\n\trequiresInitialization(): Promise<boolean>;\n\twhenInitializationFinished(): Promise<void>;\n\tinitializeRequiredResources(): Promise<void>;\n\tinitializeInstalledExtensions(instantiationService: IInstantiationService): Promise<void>;\n\tinitializeOtherResources(instantiationService: IInstantiationService): Promise<void>;\n}\n\nexport const IUserDataInitializationService = createDecorator<IUserDataInitializationService>('IUserDataInitializationService');\nexport interface IUserDataInitializationService extends IUserDataInitializer {\n\t_serviceBrand: any;\n}\n\nexport class UserDataInitializationService implements IUserDataInitializationService {\n\n\t_serviceBrand: any;\n\n\tconstructor(private readonly initializers: IUserDataInitializer[] = []) {\n\t}\n\n\tasync whenInitializationFinished(): Promise<void> {\n\t\tif (await this.requiresInitialization()) {\n\t\t\tawait Promise.all(this.initializers.map(initializer => initializer.whenInitializationFinished()));\n\t\t}\n\t}\n\n\tasync requiresInitialization(): Promise<boolean> {\n\t\treturn (await Promise.all(this.initializers.map(initializer => initializer.requiresInitialization()))).some(result => result);\n\t}\n\n\tasync initializeRequiredResources(): Promise<void> {\n\t\tif (await this.requiresInitialization()) {\n\t\t\tawait Promise.all(this.initializers.map(initializer => initializer.initializeRequiredResources()));\n\t\t}\n\t}\n\n\tasync initializeOtherResources(instantiationService: IInstantiationService): Promise<void> {\n\t\tif (await this.requiresInitialization()) {\n\t\t\tawait Promise.all(this.initializers.map(initializer => initializer.initializeOtherResources(instantiationService)));\n\t\t}\n\t}\n\n\tasync initializeInstalledExtensions(instantiationService: IInstantiationService): Promise<void> {\n\t\tif (await this.requiresInitialization()) {\n\t\t\tawait Promise.all(this.initializers.map(initializer => initializer.initializeInstalledExtensions(instantiationService)));\n\t\t}\n\t}\n\n}\n\nclass InitializeOtherResourcesContribution implements IWorkbenchContribution {\n\tconstructor(\n\t\t@IUserDataInitializationService userDataInitializeService: IUserDataInitializationService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IExtensionService extensionService: IExtensionService\n\t) {\n\t\textensionService.whenInstalledExtensionsRegistered().then(() => this.initializeOtherResource(userDataInitializeService, instantiationService));\n\t}\n\n\tprivate async initializeOtherResource(userDataInitializeService: IUserDataInitializationService, instantiationService: IInstantiationService): Promise<void> {\n\t\tif (await userDataInitializeService.requiresInitialization()) {\n\t\t\tmark('code/willInitOtherUserData');\n\t\t\tawait userDataInitializeService.initializeOtherResources(instantiationService);\n\t\t\tmark('code/didInitOtherUserData');\n\t\t}\n\t}\n}\n\nif (isWeb) {\n\tconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(Extensions.Workbench);\n\tworkbenchRegistry.registerWorkbenchContribution(InitializeOtherResourcesContribution, LifecyclePhase.Restored);\n}\n"]}