{"version":3,"sources":["vs/workbench/services/textfile/browser/textFileService.ts"],"names":[],"mappings":"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","file":"textFileService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { URI } from 'vs/base/common/uri';\nimport { IEncodingSupport, ITextFileService, ITextFileStreamContent, ITextFileContent, IResourceEncodings, IReadTextFileOptions, IWriteTextFileOptions, toBufferOrReadable, TextFileOperationError, TextFileOperationResult, ITextFileSaveOptions, ITextFileEditorModelManager, IResourceEncoding, stringToSnapshot, ITextFileSaveAsOptions, IReadTextFileEncodingOptions, TextFileEditorModelState } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IRevertOptions, SaveSourceRegistry } from 'vs/workbench/common/editor';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IFileService, FileOperationError, FileOperationResult, IFileStatWithMetadata, ICreateFileOptions, IFileStreamContent } from 'vs/platform/files/common/files';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { extname as pathExtname } from 'vs/base/common/path';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IUntitledTextEditorService, IUntitledTextEditorModelManager } from 'vs/workbench/services/untitled/common/untitledTextEditorService';\nimport { UntitledTextEditorModel } from 'vs/workbench/services/untitled/common/untitledTextEditorModel';\nimport { TextFileEditorModelManager } from 'vs/workbench/services/textfile/common/textFileEditorModelManager';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { Schemas } from 'vs/base/common/network';\nimport { createTextBufferFactoryFromSnapshot, createTextBufferFactoryFromStream } from 'vs/editor/common/model/textModel';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { joinPath, dirname, basename, toLocalResource, extname, isEqual } from 'vs/base/common/resources';\nimport { IDialogService, IFileDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { VSBuffer, VSBufferReadable, bufferToStream, VSBufferReadableStream } from 'vs/base/common/buffer';\nimport { ITextSnapshot, ITextModel } from 'vs/editor/common/model';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfiguration';\nimport { PLAINTEXT_LANGUAGE_ID } from 'vs/editor/common/languages/modesRegistry';\nimport { IFilesConfigurationService } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\nimport { IResolvedTextEditorModel } from 'vs/editor/common/services/resolverService';\nimport { BaseTextEditorModel } from 'vs/workbench/common/editor/textEditorModel';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { IPathService } from 'vs/workbench/services/path/common/pathService';\nimport { IWorkingCopyFileService, IFileOperationUndoRedoInfo, ICreateFileOperation } from 'vs/workbench/services/workingCopy/common/workingCopyFileService';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { IWorkspaceContextService, WORKSPACE_EXTENSION } from 'vs/platform/workspace/common/workspace';\nimport { UTF8, UTF8_with_bom, UTF16be, UTF16le, encodingExists, toEncodeReadable, toDecodeStream, IDecodeStreamResult, DecodeStreamError, DecodeStreamErrorKind } from 'vs/workbench/services/textfile/common/encoding';\nimport { consumeStream, ReadableStream } from 'vs/base/common/stream';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { IElevatedFileService } from 'vs/workbench/services/files/common/elevatedFileService';\nimport { IDecorationData, IDecorationsProvider, IDecorationsService } from 'vs/workbench/services/decorations/common/decorations';\nimport { Emitter } from 'vs/base/common/event';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { listErrorForeground } from 'vs/platform/theme/common/colorRegistry';\nimport { firstOrDefault } from 'vs/base/common/arrays';\n\n/**\n * The workbench file service implementation implements the raw file service spec and adds additional methods on top.\n */\nexport abstract class AbstractTextFileService extends Disposable implements ITextFileService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static readonly TEXTFILE_SAVE_CREATE_SOURCE = SaveSourceRegistry.registerSource('textFileCreate.source', localize('textFileCreate.source', \"File Created\"));\n\tprivate static readonly TEXTFILE_SAVE_REPLACE_SOURCE = SaveSourceRegistry.registerSource('textFileOverwrite.source', localize('textFileOverwrite.source', \"File Replaced\"));\n\n\treadonly files: ITextFileEditorModelManager = this._register(this.instantiationService.createInstance(TextFileEditorModelManager));\n\n\treadonly untitled: IUntitledTextEditorModelManager = this.untitledTextEditorService;\n\n\tconstructor(\n\t\t@IFileService protected readonly fileService: IFileService,\n\t\t@IUntitledTextEditorService private untitledTextEditorService: IUntitledTextEditorService,\n\t\t@ILifecycleService protected readonly lifecycleService: ILifecycleService,\n\t\t@IInstantiationService protected readonly instantiationService: IInstantiationService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IWorkbenchEnvironmentService protected readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IFileDialogService private readonly fileDialogService: IFileDialogService,\n\t\t@ITextResourceConfigurationService protected readonly textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IFilesConfigurationService protected readonly filesConfigurationService: IFilesConfigurationService,\n\t\t@ICodeEditorService private readonly codeEditorService: ICodeEditorService,\n\t\t@IPathService private readonly pathService: IPathService,\n\t\t@IWorkingCopyFileService private readonly workingCopyFileService: IWorkingCopyFileService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@ILogService protected readonly logService: ILogService,\n\t\t@IElevatedFileService private readonly elevatedFileService: IElevatedFileService,\n\t\t@IDecorationsService private readonly decorationsService: IDecorationsService\n\t) {\n\t\tsuper();\n\n\t\tthis.provideDecorations();\n\t}\n\n\t//#region decorations\n\n\tprivate provideDecorations(): void {\n\n\t\t// Text file model decorations\n\t\tconst provider = this._register(new class extends Disposable implements IDecorationsProvider {\n\n\t\t\treadonly label = localize('textFileModelDecorations', \"Text File Model Decorations\");\n\n\t\t\tprivate readonly _onDidChange = this._register(new Emitter<URI[]>());\n\t\t\treadonly onDidChange = this._onDidChange.event;\n\n\t\t\tconstructor(private readonly files: ITextFileEditorModelManager) {\n\t\t\t\tsuper();\n\n\t\t\t\tthis.registerListeners();\n\t\t\t}\n\n\t\t\tprivate registerListeners(): void {\n\n\t\t\t\t// Creates\n\t\t\t\tthis._register(this.files.onDidResolve(({ model }) => {\n\t\t\t\t\tif (model.isReadonly() || model.hasState(TextFileEditorModelState.ORPHAN)) {\n\t\t\t\t\t\tthis._onDidChange.fire([model.resource]);\n\t\t\t\t\t}\n\t\t\t\t}));\n\n\t\t\t\t// Removals: once a text file model is no longer\n\t\t\t\t// under our control, make sure to signal this as\n\t\t\t\t// decoration change because from this point on we\n\t\t\t\t// have no way of updating the decoration anymore.\n\t\t\t\tthis._register(this.files.onDidRemove(modelUri => this._onDidChange.fire([modelUri])));\n\n\t\t\t\t// Changes\n\t\t\t\tthis._register(this.files.onDidChangeReadonly(model => this._onDidChange.fire([model.resource])));\n\t\t\t\tthis._register(this.files.onDidChangeOrphaned(model => this._onDidChange.fire([model.resource])));\n\t\t\t}\n\n\t\t\tprovideDecorations(uri: URI): IDecorationData | undefined {\n\t\t\t\tconst model = this.files.get(uri);\n\t\t\t\tif (!model || model.isDisposed()) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\tconst isReadonly = model.isReadonly();\n\t\t\t\tconst isOrphaned = model.hasState(TextFileEditorModelState.ORPHAN);\n\n\t\t\t\t// Readonly + Orphaned\n\t\t\t\tif (isReadonly && isOrphaned) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcolor: listErrorForeground,\n\t\t\t\t\t\tletter: Codicon.lockSmall,\n\t\t\t\t\t\tstrikethrough: true,\n\t\t\t\t\t\ttooltip: localize('readonlyAndDeleted', \"Deleted, Read-only\"),\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Readonly\n\t\t\t\telse if (isReadonly) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tletter: Codicon.lockSmall,\n\t\t\t\t\t\ttooltip: localize('readonly', \"Read-only\"),\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// Orphaned\n\t\t\t\telse if (isOrphaned) {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcolor: listErrorForeground,\n\t\t\t\t\t\tstrikethrough: true,\n\t\t\t\t\t\ttooltip: localize('deleted', \"Deleted\"),\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}(this.files));\n\n\t\tthis._register(this.decorationsService.registerDecorationsProvider(provider));\n\t}\n\n\t//#endregin\n\n\t//#region text file read / write / create\n\n\tprivate _encoding: EncodingOracle | undefined;\n\n\tget encoding(): EncodingOracle {\n\t\tif (!this._encoding) {\n\t\t\tthis._encoding = this._register(this.instantiationService.createInstance(EncodingOracle));\n\t\t}\n\n\t\treturn this._encoding;\n\t}\n\n\tasync read(resource: URI, options?: IReadTextFileOptions): Promise<ITextFileContent> {\n\t\tconst [bufferStream, decoder] = await this.doRead(resource, {\n\t\t\t...options,\n\t\t\t// optimization: since we know that the caller does not\n\t\t\t// care about buffering, we indicate this to the reader.\n\t\t\t// this reduces all the overhead the buffered reading\n\t\t\t// has (open, read, close) if the provider supports\n\t\t\t// unbuffered reading.\n\t\t\tpreferUnbuffered: true\n\t\t});\n\n\t\treturn {\n\t\t\t...bufferStream,\n\t\t\tencoding: decoder.detected.encoding || UTF8,\n\t\t\tvalue: await consumeStream(decoder.stream, strings => strings.join(''))\n\t\t};\n\t}\n\n\tasync readStream(resource: URI, options?: IReadTextFileOptions): Promise<ITextFileStreamContent> {\n\t\tconst [bufferStream, decoder] = await this.doRead(resource, options);\n\n\t\treturn {\n\t\t\t...bufferStream,\n\t\t\tencoding: decoder.detected.encoding || UTF8,\n\t\t\tvalue: await createTextBufferFactoryFromStream(decoder.stream)\n\t\t};\n\t}\n\n\tprivate async doRead(resource: URI, options?: IReadTextFileOptions & { preferUnbuffered?: boolean }): Promise<[IFileStreamContent, IDecodeStreamResult]> {\n\t\tconst cts = new CancellationTokenSource();\n\n\t\t// read stream raw (either buffered or unbuffered)\n\t\tlet bufferStream: IFileStreamContent;\n\t\tif (options?.preferUnbuffered) {\n\t\t\tconst content = await this.fileService.readFile(resource, options, cts.token);\n\t\t\tbufferStream = {\n\t\t\t\t...content,\n\t\t\t\tvalue: bufferToStream(content.value)\n\t\t\t};\n\t\t} else {\n\t\t\tbufferStream = await this.fileService.readFileStream(resource, options, cts.token);\n\t\t}\n\n\t\t// read through encoding library\n\t\ttry {\n\t\t\tconst decoder = await this.doGetDecodedStream(resource, bufferStream.value, options);\n\n\t\t\treturn [bufferStream, decoder];\n\t\t} catch (error) {\n\n\t\t\t// Make sure to cancel reading on error to\n\t\t\t// stop file service activity as soon as\n\t\t\t// possible. When for example a large binary\n\t\t\t// file is read we want to cancel the read\n\t\t\t// instantly.\n\t\t\t// Refs:\n\t\t\t// - https://github.com/microsoft/vscode/issues/138805\n\t\t\t// - https://github.com/microsoft/vscode/issues/132771\n\t\t\tcts.dispose(true);\n\n\t\t\t// special treatment for streams that are binary\n\t\t\tif ((<DecodeStreamError>error).decodeStreamErrorKind === DecodeStreamErrorKind.STREAM_IS_BINARY) {\n\t\t\t\tthrow new TextFileOperationError(localize('fileBinaryError', \"File seems to be binary and cannot be opened as text\"), TextFileOperationResult.FILE_IS_BINARY, options);\n\t\t\t}\n\n\t\t\t// re-throw any other error as it is\n\t\t\telse {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync create(operations: { resource: URI; value?: string | ITextSnapshot; options?: ICreateFileOptions }[], undoInfo?: IFileOperationUndoRedoInfo): Promise<readonly IFileStatWithMetadata[]> {\n\t\tconst operationsWithContents: ICreateFileOperation[] = await Promise.all(operations.map(async operation => {\n\t\t\tconst contents = await this.getEncodedReadable(operation.resource, operation.value);\n\t\t\treturn {\n\t\t\t\tresource: operation.resource,\n\t\t\t\tcontents,\n\t\t\t\toverwrite: operation.options?.overwrite\n\t\t\t};\n\t\t}));\n\n\t\treturn this.workingCopyFileService.create(operationsWithContents, CancellationToken.None, undoInfo);\n\t}\n\n\tasync write(resource: URI, value: string | ITextSnapshot, options?: IWriteTextFileOptions): Promise<IFileStatWithMetadata> {\n\t\tconst readable = await this.getEncodedReadable(resource, value, options);\n\n\t\tif (options?.writeElevated && this.elevatedFileService.isSupported(resource)) {\n\t\t\treturn this.elevatedFileService.writeFileElevated(resource, readable, options);\n\t\t}\n\n\t\treturn this.fileService.writeFile(resource, readable, options);\n\t}\n\n\tasync getEncodedReadable(resource: URI, value: ITextSnapshot): Promise<VSBufferReadable>;\n\tasync getEncodedReadable(resource: URI, value: string): Promise<VSBuffer>;\n\tasync getEncodedReadable(resource: URI, value?: ITextSnapshot): Promise<VSBufferReadable | undefined>;\n\tasync getEncodedReadable(resource: URI, value?: string): Promise<VSBuffer | undefined>;\n\tasync getEncodedReadable(resource: URI, value?: string | ITextSnapshot): Promise<VSBuffer | VSBufferReadable | undefined>;\n\tasync getEncodedReadable(resource: URI, value: string | ITextSnapshot, options?: IWriteTextFileOptions): Promise<VSBuffer | VSBufferReadable>;\n\tasync getEncodedReadable(resource: URI, value?: string | ITextSnapshot, options?: IWriteTextFileOptions): Promise<VSBuffer | VSBufferReadable | undefined> {\n\n\t\t// check for encoding\n\t\tconst { encoding, addBOM } = await this.encoding.getWriteEncoding(resource, options);\n\n\t\t// when encoding is standard skip encoding step\n\t\tif (encoding === UTF8 && !addBOM) {\n\t\t\treturn typeof value === 'undefined'\n\t\t\t\t? undefined\n\t\t\t\t: toBufferOrReadable(value);\n\t\t}\n\n\t\t// otherwise create encoded readable\n\t\tvalue = value || '';\n\t\tconst snapshot = typeof value === 'string' ? stringToSnapshot(value) : value;\n\t\treturn toEncodeReadable(snapshot, encoding, { addBOM });\n\t}\n\n\tasync getDecodedStream(resource: URI, value: VSBufferReadableStream, options?: IReadTextFileEncodingOptions): Promise<ReadableStream<string>> {\n\t\treturn (await this.doGetDecodedStream(resource, value, options)).stream;\n\t}\n\n\tprivate doGetDecodedStream(resource: URI, stream: VSBufferReadableStream, options?: IReadTextFileEncodingOptions): Promise<IDecodeStreamResult> {\n\n\t\t// read through encoding library\n\t\treturn toDecodeStream(stream, {\n\t\t\tacceptTextOnly: options?.acceptTextOnly ?? false,\n\t\t\tguessEncoding: options?.autoGuessEncoding || this.textResourceConfigurationService.getValue(resource, 'files.autoGuessEncoding'),\n\t\t\toverwriteEncoding: async detectedEncoding => {\n\t\t\t\tconst { encoding } = await this.encoding.getPreferredReadEncoding(resource, options, detectedEncoding ?? undefined);\n\n\t\t\t\treturn encoding;\n\t\t\t}\n\t\t});\n\t}\n\n\t//#endregion\n\n\n\t//#region save\n\n\tasync save(resource: URI, options?: ITextFileSaveOptions): Promise<URI | undefined> {\n\n\t\t// Untitled\n\t\tif (resource.scheme === Schemas.untitled) {\n\t\t\tconst model = this.untitled.get(resource);\n\t\t\tif (model) {\n\t\t\t\tlet targetUri: URI | undefined;\n\n\t\t\t\t// Untitled with associated file path don't need to prompt\n\t\t\t\tif (model.hasAssociatedFilePath) {\n\t\t\t\t\ttargetUri = await this.suggestSavePath(resource);\n\t\t\t\t}\n\n\t\t\t\t// Otherwise ask user\n\t\t\t\telse {\n\t\t\t\t\ttargetUri = await this.fileDialogService.pickFileToSave(await this.suggestSavePath(resource), options?.availableFileSystems);\n\t\t\t\t}\n\n\t\t\t\t// Save as if target provided\n\t\t\t\tif (targetUri) {\n\t\t\t\t\treturn this.saveAs(resource, targetUri, options);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// File\n\t\telse {\n\t\t\tconst model = this.files.get(resource);\n\t\t\tif (model) {\n\t\t\t\treturn await model.save(options) ? resource : undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tasync saveAs(source: URI, target?: URI, options?: ITextFileSaveAsOptions): Promise<URI | undefined> {\n\n\t\t// Get to target resource\n\t\tif (!target) {\n\t\t\ttarget = await this.fileDialogService.pickFileToSave(await this.suggestSavePath(options?.suggestedTarget ?? source), options?.availableFileSystems);\n\t\t}\n\n\t\tif (!target) {\n\t\t\treturn; // user canceled\n\t\t}\n\n\t\t// Just save if target is same as models own resource\n\t\tif (isEqual(source, target)) {\n\t\t\treturn this.save(source, { ...options, force: true  /* force to save, even if not dirty (https://github.com/microsoft/vscode/issues/99619) */ });\n\t\t}\n\n\t\t// If the target is different but of same identity, we\n\t\t// move the source to the target, knowing that the\n\t\t// underlying file system cannot have both and then save.\n\t\t// However, this will only work if the source exists\n\t\t// and is not orphaned, so we need to check that too.\n\t\tif (this.fileService.hasProvider(source) && this.uriIdentityService.extUri.isEqual(source, target) && (await this.fileService.exists(source))) {\n\t\t\tawait this.workingCopyFileService.move([{ file: { source, target } }], CancellationToken.None);\n\n\t\t\t// At this point we don't know whether we have a\n\t\t\t// model for the source or the target URI so we\n\t\t\t// simply try to save with both resources.\n\t\t\tconst success = await this.save(source, options);\n\t\t\tif (!success) {\n\t\t\t\tawait this.save(target, options);\n\t\t\t}\n\n\t\t\treturn target;\n\t\t}\n\n\t\t// Do it\n\t\treturn this.doSaveAs(source, target, options);\n\t}\n\n\tprivate async doSaveAs(source: URI, target: URI, options?: ITextFileSaveOptions): Promise<URI | undefined> {\n\t\tlet success = false;\n\n\t\t// If the source is an existing text file model, we can directly\n\t\t// use that model to copy the contents to the target destination\n\t\tconst textFileModel = this.files.get(source);\n\t\tif (textFileModel?.isResolved()) {\n\t\t\tsuccess = await this.doSaveAsTextFile(textFileModel, source, target, options);\n\t\t}\n\n\t\t// Otherwise if the source can be handled by the file service\n\t\t// we can simply invoke the copy() function to save as\n\t\telse if (this.fileService.hasProvider(source)) {\n\t\t\tawait this.fileService.copy(source, target, true);\n\n\t\t\tsuccess = true;\n\t\t}\n\n\t\t// Finally we simply check if we can find a editor model that\n\t\t// would give us access to the contents.\n\t\telse {\n\t\t\tconst textModel = this.modelService.getModel(source);\n\t\t\tif (textModel) {\n\t\t\t\tsuccess = await this.doSaveAsTextFile(textModel, source, target, options);\n\t\t\t}\n\t\t}\n\n\t\tif (!success) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Revert the source\n\t\ttry {\n\t\t\tawait this.revert(source);\n\t\t} catch (error) {\n\n\t\t\t// It is possible that reverting the source fails, for example\n\t\t\t// when a remote is disconnected and we cannot read it anymore.\n\t\t\t// However, this should not interrupt the \"Save As\" flow, so\n\t\t\t// we gracefully catch the error and just log it.\n\n\t\t\tthis.logService.error(error);\n\t\t}\n\n\t\treturn target;\n\t}\n\n\tprivate async doSaveAsTextFile(sourceModel: IResolvedTextEditorModel | ITextModel, source: URI, target: URI, options?: ITextFileSaveOptions): Promise<boolean> {\n\n\t\t// Find source encoding if any\n\t\tlet sourceModelEncoding: string | undefined = undefined;\n\t\tconst sourceModelWithEncodingSupport = (sourceModel as unknown as IEncodingSupport);\n\t\tif (typeof sourceModelWithEncodingSupport.getEncoding === 'function') {\n\t\t\tsourceModelEncoding = sourceModelWithEncodingSupport.getEncoding();\n\t\t}\n\n\t\t// Prefer an existing model if it is already resolved for the given target resource\n\t\tlet targetExists: boolean = false;\n\t\tlet targetModel = this.files.get(target);\n\t\tif (targetModel?.isResolved()) {\n\t\t\ttargetExists = true;\n\t\t}\n\n\t\t// Otherwise create the target file empty if it does not exist already and resolve it from there\n\t\telse {\n\t\t\ttargetExists = await this.fileService.exists(target);\n\n\t\t\t// create target file adhoc if it does not exist yet\n\t\t\tif (!targetExists) {\n\t\t\t\tawait this.create([{ resource: target, value: '' }]);\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\ttargetModel = await this.files.resolve(target, { encoding: sourceModelEncoding });\n\t\t\t} catch (error) {\n\t\t\t\t// if the target already exists and was not created by us, it is possible\n\t\t\t\t// that we cannot resolve the target as text model if it is binary or too\n\t\t\t\t// large. in that case we have to delete the target file first and then\n\t\t\t\t// re-run the operation.\n\t\t\t\tif (targetExists) {\n\t\t\t\t\tif (\n\t\t\t\t\t\t(<TextFileOperationError>error).textFileOperationResult === TextFileOperationResult.FILE_IS_BINARY ||\n\t\t\t\t\t\t(<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_TOO_LARGE\n\t\t\t\t\t) {\n\t\t\t\t\t\tawait this.fileService.del(target);\n\n\t\t\t\t\t\treturn this.doSaveAsTextFile(sourceModel, source, target, options);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\n\t\t// Confirm to overwrite if we have an untitled file with associated file where\n\t\t// the file actually exists on disk and we are instructed to save to that file\n\t\t// path. This can happen if the file was created after the untitled file was opened.\n\t\t// See https://github.com/microsoft/vscode/issues/67946\n\t\tlet write: boolean;\n\t\tif (sourceModel instanceof UntitledTextEditorModel && sourceModel.hasAssociatedFilePath && targetExists && this.uriIdentityService.extUri.isEqual(target, toLocalResource(sourceModel.resource, this.environmentService.remoteAuthority, this.pathService.defaultUriScheme))) {\n\t\t\twrite = await this.confirmOverwrite(target);\n\t\t} else {\n\t\t\twrite = true;\n\t\t}\n\n\t\tif (!write) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet sourceTextModel: ITextModel | undefined = undefined;\n\t\tif (sourceModel instanceof BaseTextEditorModel) {\n\t\t\tif (sourceModel.isResolved()) {\n\t\t\t\tsourceTextModel = sourceModel.textEditorModel ?? undefined;\n\t\t\t}\n\t\t} else {\n\t\t\tsourceTextModel = sourceModel as ITextModel;\n\t\t}\n\n\t\tlet targetTextModel: ITextModel | undefined = undefined;\n\t\tif (targetModel.isResolved()) {\n\t\t\ttargetTextModel = targetModel.textEditorModel;\n\t\t}\n\n\t\t// take over model value, encoding and language (only if more specific) from source model\n\t\tif (sourceTextModel && targetTextModel) {\n\n\t\t\t// encoding\n\t\t\ttargetModel.updatePreferredEncoding(sourceModelEncoding);\n\n\t\t\t// content\n\t\t\tthis.modelService.updateModel(targetTextModel, createTextBufferFactoryFromSnapshot(sourceTextModel.createSnapshot()));\n\n\t\t\t// language\n\t\t\tconst sourceLanguageId = sourceTextModel.getLanguageId();\n\t\t\tconst targetLanguageId = targetTextModel.getLanguageId();\n\t\t\tif (sourceLanguageId !== PLAINTEXT_LANGUAGE_ID && targetLanguageId === PLAINTEXT_LANGUAGE_ID) {\n\t\t\t\ttargetTextModel.setLanguage(sourceLanguageId); // only use if more specific than plain/text\n\t\t\t}\n\n\t\t\t// transient properties\n\t\t\tconst sourceTransientProperties = this.codeEditorService.getTransientModelProperties(sourceTextModel);\n\t\t\tif (sourceTransientProperties) {\n\t\t\t\tfor (const [key, value] of sourceTransientProperties) {\n\t\t\t\t\tthis.codeEditorService.setTransientModelProperty(targetTextModel, key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// set source options depending on target exists or not\n\t\tif (!options?.source) {\n\t\t\toptions = {\n\t\t\t\t...options,\n\t\t\t\tsource: targetExists ? AbstractTextFileService.TEXTFILE_SAVE_REPLACE_SOURCE : AbstractTextFileService.TEXTFILE_SAVE_CREATE_SOURCE\n\t\t\t};\n\t\t}\n\n\t\t// save model\n\t\treturn targetModel.save(options);\n\t}\n\n\tprivate async confirmOverwrite(resource: URI): Promise<boolean> {\n\t\tconst { confirmed } = await this.dialogService.confirm({\n\t\t\ttype: 'warning',\n\t\t\tmessage: localize('confirmOverwrite', \"'{0}' already exists. Do you want to replace it?\", basename(resource)),\n\t\t\tdetail: localize('irreversible', \"A file or folder with the name '{0}' already exists in the folder '{1}'. Replacing it will overwrite its current contents.\", basename(resource), basename(dirname(resource))),\n\t\t\tprimaryButton: localize({ key: 'replaceButtonLabel', comment: ['&& denotes a mnemonic'] }, \"&&Replace\"),\n\t\t});\n\n\t\treturn confirmed;\n\t}\n\n\tprivate async suggestSavePath(resource: URI): Promise<URI> {\n\n\t\t// Just take the resource as is if the file service can handle it\n\t\tif (this.fileService.hasProvider(resource)) {\n\t\t\treturn resource;\n\t\t}\n\n\t\tconst remoteAuthority = this.environmentService.remoteAuthority;\n\t\tconst defaultFilePath = await this.fileDialogService.defaultFilePath();\n\n\t\t// Otherwise try to suggest a path that can be saved\n\t\tlet suggestedFilename: string | undefined = undefined;\n\t\tif (resource.scheme === Schemas.untitled) {\n\t\t\tconst model = this.untitled.get(resource);\n\t\t\tif (model) {\n\n\t\t\t\t// Untitled with associated file path\n\t\t\t\tif (model.hasAssociatedFilePath) {\n\t\t\t\t\treturn toLocalResource(resource, remoteAuthority, this.pathService.defaultUriScheme);\n\t\t\t\t}\n\n\t\t\t\t// Untitled without associated file path: use name\n\t\t\t\t// of untitled model if it is a valid path name and\n\t\t\t\t// figure out the file extension from the mode if any.\n\n\t\t\t\tlet nameCandidate: string;\n\t\t\t\tif (await this.pathService.hasValidBasename(joinPath(defaultFilePath, model.name), model.name)) {\n\t\t\t\t\tnameCandidate = model.name;\n\t\t\t\t} else {\n\t\t\t\t\tnameCandidate = basename(resource);\n\t\t\t\t}\n\n\t\t\t\tconst languageId = model.getLanguageId();\n\t\t\t\tif (languageId && languageId !== PLAINTEXT_LANGUAGE_ID) {\n\t\t\t\t\tsuggestedFilename = this.suggestFilename(languageId, nameCandidate);\n\t\t\t\t} else {\n\t\t\t\t\tsuggestedFilename = nameCandidate;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Fallback to basename of resource\n\t\tif (!suggestedFilename) {\n\t\t\tsuggestedFilename = basename(resource);\n\t\t}\n\n\t\t// Try to place where last active file was if any\n\t\t// Otherwise fallback to user home\n\t\treturn joinPath(defaultFilePath, suggestedFilename);\n\t}\n\n\tsuggestFilename(languageId: string, untitledName: string) {\n\t\tconst languageName = this.languageService.getLanguageName(languageId);\n\t\tif (!languageName) {\n\t\t\treturn untitledName; // unknown language, so we cannot suggest a better name\n\t\t}\n\n\t\tconst untitledExtension = pathExtname(untitledName);\n\n\t\tconst extensions = this.languageService.getExtensions(languageId);\n\t\tif (extensions.includes(untitledExtension)) {\n\t\t\treturn untitledName; // preserve extension if it is compatible with the mode\n\t\t}\n\n\t\tconst primaryExtension = firstOrDefault(extensions);\n\t\tif (primaryExtension) {\n\t\t\tif (untitledExtension) {\n\t\t\t\treturn `${untitledName.substring(0, untitledName.indexOf(untitledExtension))}${primaryExtension}`;\n\t\t\t}\n\n\t\t\treturn `${untitledName}${primaryExtension}`;\n\t\t}\n\n\t\tconst filenames = this.languageService.getFilenames(languageId);\n\t\tif (filenames.includes(untitledName)) {\n\t\t\treturn untitledName; // preserve name if it is compatible with the mode\n\t\t}\n\n\t\treturn firstOrDefault(filenames) ?? untitledName;\n\t}\n\n\t//#endregion\n\n\t//#region revert\n\n\tasync revert(resource: URI, options?: IRevertOptions): Promise<void> {\n\n\t\t// Untitled\n\t\tif (resource.scheme === Schemas.untitled) {\n\t\t\tconst model = this.untitled.get(resource);\n\t\t\tif (model) {\n\t\t\t\treturn model.revert(options);\n\t\t\t}\n\t\t}\n\n\t\t// File\n\t\telse {\n\t\t\tconst model = this.files.get(resource);\n\t\t\tif (model && (model.isDirty() || options?.force)) {\n\t\t\t\treturn model.revert(options);\n\t\t\t}\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region dirty\n\n\tisDirty(resource: URI): boolean {\n\t\tconst model = resource.scheme === Schemas.untitled ? this.untitled.get(resource) : this.files.get(resource);\n\t\tif (model) {\n\t\t\treturn model.isDirty();\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t//#endregion\n}\n\nexport interface IEncodingOverride {\n\tparent?: URI;\n\textension?: string;\n\tencoding: string;\n}\n\nexport class EncodingOracle extends Disposable implements IResourceEncodings {\n\n\tprivate _encodingOverrides: IEncodingOverride[];\n\tprotected get encodingOverrides(): IEncodingOverride[] { return this._encodingOverrides; }\n\tprotected set encodingOverrides(value: IEncodingOverride[]) { this._encodingOverrides = value; }\n\n\tconstructor(\n\t\t@ITextResourceConfigurationService private textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IWorkbenchEnvironmentService private environmentService: IWorkbenchEnvironmentService,\n\t\t@IWorkspaceContextService private contextService: IWorkspaceContextService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService\n\t) {\n\t\tsuper();\n\n\t\tthis._encodingOverrides = this.getDefaultEncodingOverrides();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Workspace Folder Change\n\t\tthis._register(this.contextService.onDidChangeWorkspaceFolders(() => this.encodingOverrides = this.getDefaultEncodingOverrides()));\n\t}\n\n\tprivate getDefaultEncodingOverrides(): IEncodingOverride[] {\n\t\tconst defaultEncodingOverrides: IEncodingOverride[] = [];\n\n\t\t// Global settings\n\t\tdefaultEncodingOverrides.push({ parent: this.environmentService.userRoamingDataHome, encoding: UTF8 });\n\n\t\t// Workspace files (via extension and via untitled workspaces location)\n\t\tdefaultEncodingOverrides.push({ extension: WORKSPACE_EXTENSION, encoding: UTF8 });\n\t\tdefaultEncodingOverrides.push({ parent: this.environmentService.untitledWorkspacesHome, encoding: UTF8 });\n\n\t\t// Folder Settings\n\t\tthis.contextService.getWorkspace().folders.forEach(folder => {\n\t\t\tdefaultEncodingOverrides.push({ parent: joinPath(folder.uri, '.vscode'), encoding: UTF8 });\n\t\t});\n\n\t\treturn defaultEncodingOverrides;\n\t}\n\n\tasync getWriteEncoding(resource: URI, options?: IWriteTextFileOptions): Promise<{ encoding: string; addBOM: boolean }> {\n\t\tconst { encoding, hasBOM } = await this.getPreferredWriteEncoding(resource, options ? options.encoding : undefined);\n\n\t\treturn { encoding, addBOM: hasBOM };\n\t}\n\n\tasync getPreferredWriteEncoding(resource: URI, preferredEncoding?: string): Promise<IResourceEncoding> {\n\t\tconst resourceEncoding = await this.getEncodingForResource(resource, preferredEncoding);\n\n\t\treturn {\n\t\t\tencoding: resourceEncoding,\n\t\t\thasBOM: resourceEncoding === UTF16be || resourceEncoding === UTF16le || resourceEncoding === UTF8_with_bom // enforce BOM for certain encodings\n\t\t};\n\t}\n\n\tasync getPreferredReadEncoding(resource: URI, options?: IReadTextFileEncodingOptions, detectedEncoding?: string): Promise<IResourceEncoding> {\n\t\tlet preferredEncoding: string | undefined;\n\n\t\t// Encoding passed in as option\n\t\tif (options?.encoding) {\n\t\t\tif (detectedEncoding === UTF8_with_bom && options.encoding === UTF8) {\n\t\t\t\tpreferredEncoding = UTF8_with_bom; // indicate the file has BOM if we are to resolve with UTF 8\n\t\t\t} else {\n\t\t\t\tpreferredEncoding = options.encoding; // give passed in encoding highest priority\n\t\t\t}\n\t\t}\n\n\t\t// Encoding detected\n\t\telse if (typeof detectedEncoding === 'string') {\n\t\t\tpreferredEncoding = detectedEncoding;\n\t\t}\n\n\t\t// Encoding configured\n\t\telse if (this.textResourceConfigurationService.getValue(resource, 'files.encoding') === UTF8_with_bom) {\n\t\t\tpreferredEncoding = UTF8; // if we did not detect UTF 8 BOM before, this can only be UTF 8 then\n\t\t}\n\n\t\tconst encoding = await this.getEncodingForResource(resource, preferredEncoding);\n\n\t\treturn {\n\t\t\tencoding,\n\t\t\thasBOM: encoding === UTF16be || encoding === UTF16le || encoding === UTF8_with_bom // enforce BOM for certain encodings\n\t\t};\n\t}\n\n\tprivate async getEncodingForResource(resource: URI, preferredEncoding?: string): Promise<string> {\n\t\tlet fileEncoding: string;\n\n\t\tconst override = this.getEncodingOverride(resource);\n\t\tif (override) {\n\t\t\tfileEncoding = override; // encoding override always wins\n\t\t} else if (preferredEncoding) {\n\t\t\tfileEncoding = preferredEncoding; // preferred encoding comes second\n\t\t} else {\n\t\t\tfileEncoding = this.textResourceConfigurationService.getValue(resource, 'files.encoding'); // and last we check for settings\n\t\t}\n\n\t\tif (fileEncoding !== UTF8) {\n\t\t\tif (!fileEncoding || !(await encodingExists(fileEncoding))) {\n\t\t\t\tfileEncoding = UTF8; // the default is UTF-8\n\t\t\t}\n\t\t}\n\n\t\treturn fileEncoding;\n\t}\n\n\tprivate getEncodingOverride(resource: URI): string | undefined {\n\t\tif (this.encodingOverrides?.length) {\n\t\t\tfor (const override of this.encodingOverrides) {\n\n\t\t\t\t// check if the resource is child of encoding override path\n\t\t\t\tif (override.parent && this.uriIdentityService.extUri.isEqualOrParent(resource, override.parent)) {\n\t\t\t\t\treturn override.encoding;\n\t\t\t\t}\n\n\t\t\t\t// check if the resource extension is equal to encoding override\n\t\t\t\tif (override.extension && extname(resource) === `.${override.extension}`) {\n\t\t\t\t\treturn override.encoding;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n"]}