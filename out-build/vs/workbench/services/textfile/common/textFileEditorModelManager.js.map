{"version":3,"sources":["vs/workbench/services/textfile/common/textFileEditorModelManager.ts"],"names":[],"mappings":"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","file":"textFileEditorModelManager.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { URI } from 'vs/base/common/uri';\nimport { TextFileEditorModel } from 'vs/workbench/services/textfile/common/textFileEditorModel';\nimport { dispose, IDisposable, Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { ITextFileEditorModel, ITextFileEditorModelManager, ITextFileEditorModelResolveOrCreateOptions, ITextFileResolveEvent, ITextFileSaveEvent, ITextFileSaveParticipant } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ResourceMap } from 'vs/base/common/map';\nimport { IFileService, FileChangesEvent, FileOperation, FileChangeType, IFileSystemProviderRegistrationEvent, IFileSystemProviderCapabilitiesChangeEvent } from 'vs/platform/files/common/files';\nimport { Promises, ResourceQueue } from 'vs/base/common/async';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { TextFileSaveParticipant } from 'vs/workbench/services/textfile/common/textFileSaveParticipant';\nimport { SaveReason } from 'vs/workbench/common/editor';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IWorkingCopyFileService, WorkingCopyFileEvent } from 'vs/workbench/services/workingCopy/common/workingCopyFileService';\nimport { ITextSnapshot } from 'vs/editor/common/model';\nimport { extname, joinPath } from 'vs/base/common/resources';\nimport { createTextBufferFactoryFromSnapshot } from 'vs/editor/common/model/textModel';\nimport { PLAINTEXT_EXTENSION, PLAINTEXT_LANGUAGE_ID } from 'vs/editor/common/languages/modesRegistry';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\n\nexport class TextFileEditorModelManager extends Disposable implements ITextFileEditorModelManager {\n\n\tprivate readonly _onDidCreate = this._register(new Emitter<TextFileEditorModel>());\n\treadonly onDidCreate = this._onDidCreate.event;\n\n\tprivate readonly _onDidResolve = this._register(new Emitter<ITextFileResolveEvent>());\n\treadonly onDidResolve = this._onDidResolve.event;\n\n\tprivate readonly _onDidRemove = this._register(new Emitter<URI>());\n\treadonly onDidRemove = this._onDidRemove.event;\n\n\tprivate readonly _onDidChangeDirty = this._register(new Emitter<TextFileEditorModel>());\n\treadonly onDidChangeDirty = this._onDidChangeDirty.event;\n\n\tprivate readonly _onDidChangeReadonly = this._register(new Emitter<TextFileEditorModel>());\n\treadonly onDidChangeReadonly = this._onDidChangeReadonly.event;\n\n\tprivate readonly _onDidChangeOrphaned = this._register(new Emitter<TextFileEditorModel>());\n\treadonly onDidChangeOrphaned = this._onDidChangeOrphaned.event;\n\n\tprivate readonly _onDidSaveError = this._register(new Emitter<TextFileEditorModel>());\n\treadonly onDidSaveError = this._onDidSaveError.event;\n\n\tprivate readonly _onDidSave = this._register(new Emitter<ITextFileSaveEvent>());\n\treadonly onDidSave = this._onDidSave.event;\n\n\tprivate readonly _onDidRevert = this._register(new Emitter<TextFileEditorModel>());\n\treadonly onDidRevert = this._onDidRevert.event;\n\n\tprivate readonly _onDidChangeEncoding = this._register(new Emitter<TextFileEditorModel>());\n\treadonly onDidChangeEncoding = this._onDidChangeEncoding.event;\n\n\tprivate readonly mapResourceToModel = new ResourceMap<TextFileEditorModel>();\n\tprivate readonly mapResourceToModelListeners = new ResourceMap<IDisposable>();\n\tprivate readonly mapResourceToDisposeListener = new ResourceMap<IDisposable>();\n\tprivate readonly mapResourceToPendingModelResolvers = new ResourceMap<Promise<void>>();\n\n\tprivate readonly modelResolveQueue = this._register(new ResourceQueue());\n\n\tsaveErrorHandler = (() => {\n\t\tconst notificationService = this.notificationService;\n\n\t\treturn {\n\t\t\tonSaveError(error: Error, model: ITextFileEditorModel): void {\n\t\t\t\tnotificationService.error(localize({ key: 'genericSaveError', comment: ['{0} is the resource that failed to save and {1} the error message'] }, \"Failed to save '{0}': {1}\", model.name, toErrorMessage(error, false)));\n\t\t\t}\n\t\t};\n\t})();\n\n\tget models(): TextFileEditorModel[] {\n\t\treturn [...this.mapResourceToModel.values()];\n\t}\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IWorkingCopyFileService private readonly workingCopyFileService: IWorkingCopyFileService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Update models from file change events\n\t\tthis._register(this.fileService.onDidFilesChange(e => this.onDidFilesChange(e)));\n\n\t\t// File system provider changes\n\t\tthis._register(this.fileService.onDidChangeFileSystemProviderCapabilities(e => this.onDidChangeFileSystemProviderCapabilities(e)));\n\t\tthis._register(this.fileService.onDidChangeFileSystemProviderRegistrations(e => this.onDidChangeFileSystemProviderRegistrations(e)));\n\n\t\t// Working copy operations\n\t\tthis._register(this.workingCopyFileService.onWillRunWorkingCopyFileOperation(e => this.onWillRunWorkingCopyFileOperation(e)));\n\t\tthis._register(this.workingCopyFileService.onDidFailWorkingCopyFileOperation(e => this.onDidFailWorkingCopyFileOperation(e)));\n\t\tthis._register(this.workingCopyFileService.onDidRunWorkingCopyFileOperation(e => this.onDidRunWorkingCopyFileOperation(e)));\n\t}\n\n\tprivate onDidFilesChange(e: FileChangesEvent): void {\n\t\tfor (const model of this.models) {\n\t\t\tif (model.isDirty()) {\n\t\t\t\tcontinue; // never reload dirty models\n\t\t\t}\n\n\t\t\t// Trigger a model resolve for any update or add event that impacts\n\t\t\t// the model. We also consider the added event because it could\n\t\t\t// be that a file was added and updated right after.\n\t\t\tif (e.contains(model.resource, FileChangeType.UPDATED, FileChangeType.ADDED)) {\n\t\t\t\tthis.queueModelReload(model);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onDidChangeFileSystemProviderCapabilities(e: IFileSystemProviderCapabilitiesChangeEvent): void {\n\n\t\t// Resolve models again for file systems that changed\n\t\t// capabilities to fetch latest metadata (e.g. readonly)\n\t\t// into all models.\n\t\tthis.queueModelReloads(e.scheme);\n\t}\n\n\tprivate onDidChangeFileSystemProviderRegistrations(e: IFileSystemProviderRegistrationEvent): void {\n\t\tif (!e.added) {\n\t\t\treturn; // only if added\n\t\t}\n\n\t\t// Resolve models again for file systems that registered\n\t\t// to account for capability changes: extensions may\n\t\t// unregister and register the same provider with different\n\t\t// capabilities, so we want to ensure to fetch latest\n\t\t// metadata (e.g. readonly) into all models.\n\t\tthis.queueModelReloads(e.scheme);\n\t}\n\n\tprivate queueModelReloads(scheme: string): void {\n\t\tfor (const model of this.models) {\n\t\t\tif (model.isDirty()) {\n\t\t\t\tcontinue; // never reload dirty models\n\t\t\t}\n\n\t\t\tif (scheme === model.resource.scheme) {\n\t\t\t\tthis.queueModelReload(model);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate queueModelReload(model: TextFileEditorModel): void {\n\n\t\t// Resolve model to update (use a queue to prevent accumulation of resolves\n\t\t// when the resolve actually takes long. At most we only want the queue\n\t\t// to have a size of 2 (1 running resolve and 1 queued resolve).\n\t\tconst queue = this.modelResolveQueue.queueFor(model.resource);\n\t\tif (queue.size <= 1) {\n\t\t\tqueue.queue(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.reload(model);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tonUnexpectedError(error);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate readonly mapCorrelationIdToModelsToRestore = new Map<number, { source: URI; target: URI; snapshot?: ITextSnapshot; languageId?: string; encoding?: string }[]>();\n\n\tprivate onWillRunWorkingCopyFileOperation(e: WorkingCopyFileEvent): void {\n\n\t\t// Move / Copy: remember models to restore after the operation\n\t\tif (e.operation === FileOperation.MOVE || e.operation === FileOperation.COPY) {\n\t\t\tconst modelsToRestore: { source: URI; target: URI; snapshot?: ITextSnapshot; languageId?: string; encoding?: string }[] = [];\n\n\t\t\tfor (const { source, target } of e.files) {\n\t\t\t\tif (source) {\n\t\t\t\t\tif (this.uriIdentityService.extUri.isEqual(source, target)) {\n\t\t\t\t\t\tcontinue; // ignore if resources are considered equal\n\t\t\t\t\t}\n\n\t\t\t\t\t// find all models that related to source (can be many if resource is a folder)\n\t\t\t\t\tconst sourceModels: TextFileEditorModel[] = [];\n\t\t\t\t\tfor (const model of this.models) {\n\t\t\t\t\t\tif (this.uriIdentityService.extUri.isEqualOrParent(model.resource, source)) {\n\t\t\t\t\t\t\tsourceModels.push(model);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// remember each source model to resolve again after move is done\n\t\t\t\t\t// with optional content to restore if it was dirty\n\t\t\t\t\tfor (const sourceModel of sourceModels) {\n\t\t\t\t\t\tconst sourceModelResource = sourceModel.resource;\n\n\t\t\t\t\t\t// If the source is the actual model, just use target as new resource\n\t\t\t\t\t\tlet targetModelResource: URI;\n\t\t\t\t\t\tif (this.uriIdentityService.extUri.isEqual(sourceModelResource, source)) {\n\t\t\t\t\t\t\ttargetModelResource = target;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Otherwise a parent folder of the source is being moved, so we need\n\t\t\t\t\t\t// to compute the target resource based on that\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\ttargetModelResource = joinPath(target, sourceModelResource.path.substr(source.path.length + 1));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmodelsToRestore.push({\n\t\t\t\t\t\t\tsource: sourceModelResource,\n\t\t\t\t\t\t\ttarget: targetModelResource,\n\t\t\t\t\t\t\tlanguageId: sourceModel.getLanguageId(),\n\t\t\t\t\t\t\tencoding: sourceModel.getEncoding(),\n\t\t\t\t\t\t\tsnapshot: sourceModel.isDirty() ? sourceModel.createSnapshot() : undefined\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.mapCorrelationIdToModelsToRestore.set(e.correlationId, modelsToRestore);\n\t\t}\n\t}\n\n\tprivate onDidFailWorkingCopyFileOperation(e: WorkingCopyFileEvent): void {\n\n\t\t// Move / Copy: restore dirty flag on models to restore that were dirty\n\t\tif ((e.operation === FileOperation.MOVE || e.operation === FileOperation.COPY)) {\n\t\t\tconst modelsToRestore = this.mapCorrelationIdToModelsToRestore.get(e.correlationId);\n\t\t\tif (modelsToRestore) {\n\t\t\t\tthis.mapCorrelationIdToModelsToRestore.delete(e.correlationId);\n\n\t\t\t\tmodelsToRestore.forEach(model => {\n\t\t\t\t\t// snapshot presence means this model used to be dirty and so we restore that\n\t\t\t\t\t// flag. we do NOT have to restore the content because the model was only soft\n\t\t\t\t\t// reverted and did not loose its original dirty contents.\n\t\t\t\t\tif (model.snapshot) {\n\t\t\t\t\t\tthis.get(model.source)?.setDirty(true);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onDidRunWorkingCopyFileOperation(e: WorkingCopyFileEvent): void {\n\t\tswitch (e.operation) {\n\n\t\t\t// Create: Revert existing models\n\t\t\tcase FileOperation.CREATE:\n\t\t\t\te.waitUntil((async () => {\n\t\t\t\t\tfor (const { target } of e.files) {\n\t\t\t\t\t\tconst model = this.get(target);\n\t\t\t\t\t\tif (model && !model.isDisposed()) {\n\t\t\t\t\t\t\tawait model.revert();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t})());\n\t\t\t\tbreak;\n\n\t\t\t// Move/Copy: restore models that were resolved before the operation took place\n\t\t\tcase FileOperation.MOVE:\n\t\t\tcase FileOperation.COPY:\n\t\t\t\te.waitUntil((async () => {\n\t\t\t\t\tconst modelsToRestore = this.mapCorrelationIdToModelsToRestore.get(e.correlationId);\n\t\t\t\t\tif (modelsToRestore) {\n\t\t\t\t\t\tthis.mapCorrelationIdToModelsToRestore.delete(e.correlationId);\n\n\t\t\t\t\t\tawait Promises.settled(modelsToRestore.map(async modelToRestore => {\n\n\t\t\t\t\t\t\t// restore the model at the target. if we have previous dirty content, we pass it\n\t\t\t\t\t\t\t// over to be used, otherwise we force a reload from disk. this is important\n\t\t\t\t\t\t\t// because we know the file has changed on disk after the move and the model might\n\t\t\t\t\t\t\t// have still existed with the previous state. this ensures that the model is not\n\t\t\t\t\t\t\t// tracking a stale state.\n\t\t\t\t\t\t\tconst restoredModel = await this.resolve(modelToRestore.target, {\n\t\t\t\t\t\t\t\treload: { async: false }, // enforce a reload\n\t\t\t\t\t\t\t\tcontents: modelToRestore.snapshot ? createTextBufferFactoryFromSnapshot(modelToRestore.snapshot) : undefined,\n\t\t\t\t\t\t\t\tencoding: modelToRestore.encoding\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t// restore previous language only if the language is now unspecified and it was specified\n\t\t\t\t\t\t\t// but not when the file was explicitly stored with the plain text extension\n\t\t\t\t\t\t\t// (https://github.com/microsoft/vscode/issues/125795)\n\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\tmodelToRestore.languageId &&\n\t\t\t\t\t\t\t\tmodelToRestore.languageId !== PLAINTEXT_LANGUAGE_ID &&\n\t\t\t\t\t\t\t\trestoredModel.getLanguageId() === PLAINTEXT_LANGUAGE_ID &&\n\t\t\t\t\t\t\t\textname(modelToRestore.target) !== PLAINTEXT_EXTENSION\n\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\trestoredModel.updateTextEditorModel(undefined, modelToRestore.languageId);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}));\n\t\t\t\t\t}\n\t\t\t\t})());\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tget(resource: URI): TextFileEditorModel | undefined {\n\t\treturn this.mapResourceToModel.get(resource);\n\t}\n\n\tprivate has(resource: URI): boolean {\n\t\treturn this.mapResourceToModel.has(resource);\n\t}\n\n\tprivate async reload(model: TextFileEditorModel): Promise<void> {\n\n\t\t// Await a pending model resolve first before proceeding\n\t\t// to ensure that we never resolve a model more than once\n\t\t// in parallel.\n\t\tawait this.joinPendingResolves(model.resource);\n\n\t\tif (model.isDirty() || model.isDisposed() || !this.has(model.resource)) {\n\t\t\treturn; // the model possibly got dirty or disposed, so return early then\n\t\t}\n\n\t\t// Trigger reload\n\t\tawait this.doResolve(model, { reload: { async: false } });\n\t}\n\n\tasync resolve(resource: URI, options?: ITextFileEditorModelResolveOrCreateOptions): Promise<TextFileEditorModel> {\n\n\t\t// Await a pending model resolve first before proceeding\n\t\t// to ensure that we never resolve a model more than once\n\t\t// in parallel.\n\t\tconst pendingResolve = this.joinPendingResolves(resource);\n\t\tif (pendingResolve) {\n\t\t\tawait pendingResolve;\n\t\t}\n\n\t\t// Trigger resolve\n\t\treturn this.doResolve(resource, options);\n\t}\n\n\tprivate async doResolve(resourceOrModel: URI | TextFileEditorModel, options?: ITextFileEditorModelResolveOrCreateOptions): Promise<TextFileEditorModel> {\n\t\tlet model: TextFileEditorModel | undefined;\n\t\tlet resource: URI;\n\t\tif (URI.isUri(resourceOrModel)) {\n\t\t\tresource = resourceOrModel;\n\t\t\tmodel = this.get(resource);\n\t\t} else {\n\t\t\tresource = resourceOrModel.resource;\n\t\t\tmodel = resourceOrModel;\n\t\t}\n\n\t\tlet modelResolve: Promise<void>;\n\t\tlet didCreateModel = false;\n\n\t\t// Model exists\n\t\tif (model) {\n\n\t\t\t// Always reload if contents are provided\n\t\t\tif (options?.contents) {\n\t\t\t\tmodelResolve = model.resolve(options);\n\t\t\t}\n\n\t\t\t// Reload async or sync based on options\n\t\t\telse if (options?.reload) {\n\n\t\t\t\t// async reload: trigger a reload but return immediately\n\t\t\t\tif (options.reload.async) {\n\t\t\t\t\tmodelResolve = Promise.resolve();\n\t\t\t\t\t(async () => {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait model.resolve(options);\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\tonUnexpectedError(error);\n\t\t\t\t\t\t}\n\t\t\t\t\t})();\n\t\t\t\t}\n\n\t\t\t\t// sync reload: do not return until model reloaded\n\t\t\t\telse {\n\t\t\t\t\tmodelResolve = model.resolve(options);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Do not reload\n\t\t\telse {\n\t\t\t\tmodelResolve = Promise.resolve();\n\t\t\t}\n\t\t}\n\n\t\t// Model does not exist\n\t\telse {\n\t\t\tdidCreateModel = true;\n\n\t\t\tconst newModel = model = this.instantiationService.createInstance(TextFileEditorModel, resource, options ? options.encoding : undefined, options ? options.languageId : undefined);\n\t\t\tmodelResolve = model.resolve(options);\n\n\t\t\tthis.registerModel(newModel);\n\t\t}\n\n\t\t// Store pending resolves to avoid race conditions\n\t\tthis.mapResourceToPendingModelResolvers.set(resource, modelResolve);\n\n\t\t// Make known to manager (if not already known)\n\t\tthis.add(resource, model);\n\n\t\t// Emit some events if we created the model\n\t\tif (didCreateModel) {\n\t\t\tthis._onDidCreate.fire(model);\n\n\t\t\t// If the model is dirty right from the beginning,\n\t\t\t// make sure to emit this as an event\n\t\t\tif (model.isDirty()) {\n\t\t\t\tthis._onDidChangeDirty.fire(model);\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tawait modelResolve;\n\t\t} catch (error) {\n\n\t\t\t// Automatically dispose the model if we created it\n\t\t\t// because we cannot dispose a model we do not own\n\t\t\t// https://github.com/microsoft/vscode/issues/138850\n\t\t\tif (didCreateModel) {\n\t\t\t\tmodel.dispose();\n\t\t\t}\n\n\t\t\tthrow error;\n\t\t} finally {\n\n\t\t\t// Remove from pending resolves\n\t\t\tthis.mapResourceToPendingModelResolvers.delete(resource);\n\t\t}\n\n\t\t// Apply language if provided\n\t\tif (options?.languageId) {\n\t\t\tmodel.setLanguageId(options.languageId);\n\t\t}\n\n\t\t// Model can be dirty if a backup was restored, so we make sure to\n\t\t// have this event delivered if we created the model here\n\t\tif (didCreateModel && model.isDirty()) {\n\t\t\tthis._onDidChangeDirty.fire(model);\n\t\t}\n\n\t\treturn model;\n\t}\n\n\tprivate joinPendingResolves(resource: URI): Promise<void> | undefined {\n\t\tconst pendingModelResolve = this.mapResourceToPendingModelResolvers.get(resource);\n\t\tif (!pendingModelResolve) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.doJoinPendingResolves(resource);\n\t}\n\n\tprivate async doJoinPendingResolves(resource: URI): Promise<void> {\n\n\t\t// While we have pending model resolves, ensure\n\t\t// to await the last one finishing before returning.\n\t\t// This prevents a race when multiple clients await\n\t\t// the pending resolve and then all trigger the resolve\n\t\t// at the same time.\n\t\tlet currentModelCopyResolve: Promise<void> | undefined;\n\t\twhile (this.mapResourceToPendingModelResolvers.has(resource)) {\n\t\t\tconst nextPendingModelResolve = this.mapResourceToPendingModelResolvers.get(resource);\n\t\t\tif (nextPendingModelResolve === currentModelCopyResolve) {\n\t\t\t\treturn; // already awaited on - return\n\t\t\t}\n\n\t\t\tcurrentModelCopyResolve = nextPendingModelResolve;\n\t\t\ttry {\n\t\t\t\tawait nextPendingModelResolve;\n\t\t\t} catch (error) {\n\t\t\t\t// ignore any error here, it will bubble to the original requestor\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate registerModel(model: TextFileEditorModel): void {\n\n\t\t// Install model listeners\n\t\tconst modelListeners = new DisposableStore();\n\t\tmodelListeners.add(model.onDidResolve(reason => this._onDidResolve.fire({ model, reason })));\n\t\tmodelListeners.add(model.onDidChangeDirty(() => this._onDidChangeDirty.fire(model)));\n\t\tmodelListeners.add(model.onDidChangeReadonly(() => this._onDidChangeReadonly.fire(model)));\n\t\tmodelListeners.add(model.onDidChangeOrphaned(() => this._onDidChangeOrphaned.fire(model)));\n\t\tmodelListeners.add(model.onDidSaveError(() => this._onDidSaveError.fire(model)));\n\t\tmodelListeners.add(model.onDidSave(e => this._onDidSave.fire({ model, ...e })));\n\t\tmodelListeners.add(model.onDidRevert(() => this._onDidRevert.fire(model)));\n\t\tmodelListeners.add(model.onDidChangeEncoding(() => this._onDidChangeEncoding.fire(model)));\n\n\t\t// Keep for disposal\n\t\tthis.mapResourceToModelListeners.set(model.resource, modelListeners);\n\t}\n\n\tadd(resource: URI, model: TextFileEditorModel): void {\n\t\tconst knownModel = this.mapResourceToModel.get(resource);\n\t\tif (knownModel === model) {\n\t\t\treturn; // already cached\n\t\t}\n\n\t\t// dispose any previously stored dispose listener for this resource\n\t\tconst disposeListener = this.mapResourceToDisposeListener.get(resource);\n\t\tdisposeListener?.dispose();\n\n\t\t// store in cache but remove when model gets disposed\n\t\tthis.mapResourceToModel.set(resource, model);\n\t\tthis.mapResourceToDisposeListener.set(resource, model.onWillDispose(() => this.remove(resource)));\n\t}\n\n\tremove(resource: URI): void {\n\t\tconst removed = this.mapResourceToModel.delete(resource);\n\n\t\tconst disposeListener = this.mapResourceToDisposeListener.get(resource);\n\t\tif (disposeListener) {\n\t\t\tdispose(disposeListener);\n\t\t\tthis.mapResourceToDisposeListener.delete(resource);\n\t\t}\n\n\t\tconst modelListener = this.mapResourceToModelListeners.get(resource);\n\t\tif (modelListener) {\n\t\t\tdispose(modelListener);\n\t\t\tthis.mapResourceToModelListeners.delete(resource);\n\t\t}\n\n\t\tif (removed) {\n\t\t\tthis._onDidRemove.fire(resource);\n\t\t}\n\t}\n\n\t//#region Save participants\n\n\tprivate readonly saveParticipants = this._register(this.instantiationService.createInstance(TextFileSaveParticipant));\n\n\taddSaveParticipant(participant: ITextFileSaveParticipant): IDisposable {\n\t\treturn this.saveParticipants.addSaveParticipant(participant);\n\t}\n\n\trunSaveParticipants(model: ITextFileEditorModel, context: { reason: SaveReason }, token: CancellationToken): Promise<void> {\n\t\treturn this.saveParticipants.participate(model, context, token);\n\t}\n\n\t//#endregion\n\n\tcanDispose(model: TextFileEditorModel): true | Promise<true> {\n\n\t\t// quick return if model already disposed or not dirty and not resolving\n\t\tif (\n\t\t\tmodel.isDisposed() ||\n\t\t\t(!this.mapResourceToPendingModelResolvers.has(model.resource) && !model.isDirty())\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// promise based return in all other cases\n\t\treturn this.doCanDispose(model);\n\t}\n\n\tprivate async doCanDispose(model: TextFileEditorModel): Promise<true> {\n\n\t\t// Await any pending resolves first before proceeding\n\t\tconst pendingResolve = this.joinPendingResolves(model.resource);\n\t\tif (pendingResolve) {\n\t\t\tawait pendingResolve;\n\n\t\t\treturn this.canDispose(model);\n\t\t}\n\n\t\t// dirty model: we do not allow to dispose dirty models to prevent\n\t\t// data loss cases. dirty models can only be disposed when they are\n\t\t// either saved or reverted\n\t\tif (model.isDirty()) {\n\t\t\tawait Event.toPromise(model.onDidChangeDirty);\n\n\t\t\treturn this.canDispose(model);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\t// model caches\n\t\tthis.mapResourceToModel.clear();\n\t\tthis.mapResourceToPendingModelResolvers.clear();\n\n\t\t// dispose the dispose listeners\n\t\tdispose(this.mapResourceToDisposeListener.values());\n\t\tthis.mapResourceToDisposeListener.clear();\n\n\t\t// dispose the model change listeners\n\t\tdispose(this.mapResourceToModelListeners.values());\n\t\tthis.mapResourceToModelListeners.clear();\n\t}\n}\n"]}