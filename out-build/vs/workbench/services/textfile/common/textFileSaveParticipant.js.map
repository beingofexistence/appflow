{"version":3,"sources":["vs/workbench/services/textfile/common/textFileSaveParticipant.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAYzF,IAAM,IAAI,GAAV,MAAM,IAAwB,SAAQ,eAAG;QAI/C,YACmB,CAAqC,EAC1C,CAAgC;YAE7C,KAAK,EAAE,CAAC;YAH2B,MAAC,GAAD,CAAC,CAAmB;YACzB,MAAC,GAAD,CAAC,CAAc;YAJ7B,MAAC,GAA8C,EAAE,CAAC;QAOnE,CAAC;QAED,kBAAkB,CAAC,WAAqC;YACvD,MAAM,MAAM,GAAG,IAAA,YAAG,EAAI,IAAI,CAAC,CAAC,EAAiB,WAAW,CAAC,CAAC;YAE1D,OAAO,IAAA,eAAG,EAAU,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC;QACrC,CAAC;QAED,WAAW,CAAC,KAA2B,EAAE,OAA+B,EAAE,KAAwB;YACjG,MAAM,GAAG,GAAG,IAAI,kBAAG,CAAqB,KAAK,CAAC,CAAC;YAE/C,OAAO,IAAI,CAAC,CAAC,CAAe,YAAY,CAAC;gBACxC,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAkB,EAAE,IAAc,EAAE,KAAK,CAAC,IAAI,CAAC;gBAC/D,QAAQ,wCAA+B;gBACvC,WAAW,EAAE,IAAI;gBACjB,KAAK,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI;aACpC,EAAE,KAAK,EAAC,QAAQ,EAAC,EAAE;gBAEnB,gCAAgC;gBAChC,KAAK,CAAC,eAAe,EAAE,gBAAgB,EAAE,CAAC;gBAE1C,KAAK,MAAM,eAAe,IAAI,IAAI,CAAC,CAAC,EAAiB;oBACpD,IAAI,GAAG,CAAC,KAAK,CAAC,uBAAuB,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,cAAc,EAAE;wBAC/E,MAAM;qBACN;oBAED,IAAI;wBACH,MAAM,OAAO,GAAG,eAAe,CAAC,WAAW,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;wBACjF,MAAM,IAAA,WAAG,EAAc,OAAO,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;qBAC3C;oBAAC,OAAO,GAAG,EAAE;wBACb,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,GAAG,CAAC,CAAC;qBAC3B;iBACD;gBAED,+BAA+B;gBAC/B,KAAK,CAAC,eAAe,EAAE,gBAAgB,EAAE,CAAC;YAC3C,CAAC,EAAE,GAAG,EAAE;gBACP,cAAc;gBACd,GAAG,CAAC,MAAM,EAAE,CAAC;YACd,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE;gBACf,GAAG,CAAC,OAAO,EAAE,CAAC;YACf,CAAC,CAAC,CAAC;QACJ,CAAC;QAEQ,OAAO;YACf,IAAI,CAAC,CAAC,CAAgB,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAgB,MAAM,CAAC,CAAC;YAE9D,KAAK,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC;KACD,CAAA;IA1DY,oBAAI;mBAAJ,IAAI;QAKd,WAAA,cAAG,CAAA;QACH,WAAA,SAAG,CAAA;OANO,IAAI,CA0DhB","file":"textFileSaveParticipant.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { raceCancellation } from 'vs/base/common/async';\nimport { CancellationTokenSource, CancellationToken } from 'vs/base/common/cancellation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IProgressService, ProgressLocation } from 'vs/platform/progress/common/progress';\nimport { ITextFileSaveParticipant, ITextFileEditorModel } from 'vs/workbench/services/textfile/common/textfiles';\nimport { SaveReason } from 'vs/workbench/common/editor';\nimport { IDisposable, Disposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { insert } from 'vs/base/common/arrays';\n\nexport class TextFileSaveParticipant extends Disposable {\n\n\tprivate readonly saveParticipants: ITextFileSaveParticipant[] = [];\n\n\tconstructor(\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t}\n\n\taddSaveParticipant(participant: ITextFileSaveParticipant): IDisposable {\n\t\tconst remove = insert(this.saveParticipants, participant);\n\n\t\treturn toDisposable(() => remove());\n\t}\n\n\tparticipate(model: ITextFileEditorModel, context: { reason: SaveReason }, token: CancellationToken): Promise<void> {\n\t\tconst cts = new CancellationTokenSource(token);\n\n\t\treturn this.progressService.withProgress({\n\t\t\ttitle: localize('saveParticipants', \"Saving '{0}'\", model.name),\n\t\t\tlocation: ProgressLocation.Notification,\n\t\t\tcancellable: true,\n\t\t\tdelay: model.isDirty() ? 3000 : 5000\n\t\t}, async progress => {\n\n\t\t\t// undoStop before participation\n\t\t\tmodel.textEditorModel?.pushStackElement();\n\n\t\t\tfor (const saveParticipant of this.saveParticipants) {\n\t\t\t\tif (cts.token.isCancellationRequested || !model.textEditorModel /* disposed */) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tconst promise = saveParticipant.participate(model, context, progress, cts.token);\n\t\t\t\t\tawait raceCancellation(promise, cts.token);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tthis.logService.error(err);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// undoStop after participation\n\t\t\tmodel.textEditorModel?.pushStackElement();\n\t\t}, () => {\n\t\t\t// user cancel\n\t\t\tcts.cancel();\n\t\t}).finally(() => {\n\t\t\tcts.dispose();\n\t\t});\n\t}\n\n\toverride dispose(): void {\n\t\tthis.saveParticipants.splice(0, this.saveParticipants.length);\n\n\t\tsuper.dispose();\n\t}\n}\n"]}