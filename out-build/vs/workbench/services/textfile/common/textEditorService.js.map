{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/textfile/common/textEditorService.ts"],"names":[],"mappings":"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","file":"textEditorService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { ResourceMap } from 'vs/base/common/map';\nimport { createDecorator, IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IEditorFactoryRegistry, IFileEditorInput, IUntypedEditorInput, IUntypedFileEditorInput, EditorExtensions, isResourceDiffEditorInput, isResourceSideBySideEditorInput, IUntitledTextResourceEditorInput, DEFAULT_EDITOR_ASSOCIATION, isResourceMergeEditorInput } from 'vs/workbench/common/editor';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { INewUntitledTextEditorOptions, IUntitledTextEditorService } from 'vs/workbench/services/untitled/common/untitledTextEditorService';\nimport { Schemas } from 'vs/base/common/network';\nimport { DiffEditorInput } from 'vs/workbench/common/editor/diffEditorInput';\nimport { SideBySideEditorInput } from 'vs/workbench/common/editor/sideBySideEditorInput';\nimport { TextResourceEditorInput } from 'vs/workbench/common/editor/textResourceEditorInput';\nimport { UntitledTextEditorInput } from 'vs/workbench/services/untitled/common/untitledTextEditorInput';\nimport { IUntitledTextEditorModel } from 'vs/workbench/services/untitled/common/untitledTextEditorModel';\nimport { basename } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IEditorResolverService, RegisteredEditorPriority } from 'vs/workbench/services/editor/common/editorResolverService';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\nexport const ITextEditorService = createDecorator<ITextEditorService>('textEditorService');\n\nexport interface ITextEditorService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * @deprecated this method should not be used, rather consider using\n\t * `IEditorResolverService` instead with `DEFAULT_EDITOR_ASSOCIATION.id`.\n\t */\n\tcreateTextEditor(input: IUntypedEditorInput): EditorInput;\n\n\t/**\n\t * @deprecated this method should not be used, rather consider using\n\t * `IEditorResolverService` instead with `DEFAULT_EDITOR_ASSOCIATION.id`.\n\t */\n\tcreateTextEditor(input: IUntypedFileEditorInput): IFileEditorInput;\n\n\t/**\n\t * A way to create text editor inputs from an untyped editor input. Depending\n\t * on the passed in input this will be:\n\t * - a `IFileEditorInput` for file resources\n\t * - a `UntitledEditorInput` for untitled resources\n\t * - a `TextResourceEditorInput` for virtual resources\n\t *\n\t * @param input the untyped editor input to create a typed input from\n\t */\n\tresolveTextEditor(input: IUntypedEditorInput): Promise<EditorInput>;\n\tresolveTextEditor(input: IUntypedFileEditorInput): Promise<IFileEditorInput>;\n}\n\nexport class TextEditorService extends Disposable implements ITextEditorService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly editorInputCache = new ResourceMap<TextResourceEditorInput | IFileEditorInput | UntitledTextEditorInput>();\n\n\tprivate readonly fileEditorFactory = Registry.as<IEditorFactoryRegistry>(EditorExtensions.EditorFactory).getFileEditorFactory();\n\n\tconstructor(\n\t\t@IUntitledTextEditorService private readonly untitledTextEditorService: IUntitledTextEditorService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IEditorResolverService private readonly editorResolverService: IEditorResolverService\n\t) {\n\t\tsuper();\n\n\t\t// Register the default editor to the editor resolver\n\t\t// service so that it shows up in the editors picker\n\t\tthis.registerDefaultEditor();\n\t}\n\n\tprivate registerDefaultEditor(): void {\n\t\tthis._register(this.editorResolverService.registerEditor(\n\t\t\t'*',\n\t\t\t{\n\t\t\t\tid: DEFAULT_EDITOR_ASSOCIATION.id,\n\t\t\t\tlabel: DEFAULT_EDITOR_ASSOCIATION.displayName,\n\t\t\t\tdetail: DEFAULT_EDITOR_ASSOCIATION.providerDisplayName,\n\t\t\t\tpriority: RegisteredEditorPriority.builtin\n\t\t\t},\n\t\t\t{},\n\t\t\t{\n\t\t\t\tcreateEditorInput: editor => ({ editor: this.createTextEditor(editor) }),\n\t\t\t\tcreateUntitledEditorInput: untitledEditor => ({ editor: this.createTextEditor(untitledEditor) }),\n\t\t\t\tcreateDiffEditorInput: diffEditor => ({ editor: this.createTextEditor(diffEditor) })\n\t\t\t}\n\t\t));\n\t}\n\n\tresolveTextEditor(input: IUntypedEditorInput): Promise<EditorInput>;\n\tresolveTextEditor(input: IUntypedFileEditorInput): Promise<IFileEditorInput>;\n\tasync resolveTextEditor(input: IUntypedEditorInput | IUntypedFileEditorInput): Promise<EditorInput | IFileEditorInput> {\n\t\treturn this.createTextEditor(input);\n\t}\n\n\tcreateTextEditor(input: IUntypedEditorInput): EditorInput;\n\tcreateTextEditor(input: IUntypedFileEditorInput): IFileEditorInput;\n\tcreateTextEditor(input: IUntypedEditorInput | IUntypedFileEditorInput): EditorInput | IFileEditorInput {\n\n\t\t// Merge Editor Not Supported (we fallback to showing the result only)\n\t\tif (isResourceMergeEditorInput(input)) {\n\t\t\treturn this.createTextEditor(input.result);\n\t\t}\n\n\t\t// Diff Editor Support\n\t\tif (isResourceDiffEditorInput(input)) {\n\t\t\tconst original = this.createTextEditor(input.original);\n\t\t\tconst modified = this.createTextEditor(input.modified);\n\n\t\t\treturn this.instantiationService.createInstance(DiffEditorInput, input.label, input.description, original, modified, undefined);\n\t\t}\n\n\t\t// Side by Side Editor Support\n\t\tif (isResourceSideBySideEditorInput(input)) {\n\t\t\tconst primary = this.createTextEditor(input.primary);\n\t\t\tconst secondary = this.createTextEditor(input.secondary);\n\n\t\t\treturn this.instantiationService.createInstance(SideBySideEditorInput, input.label, input.description, secondary, primary);\n\t\t}\n\n\t\t// Untitled text file support\n\t\tconst untitledInput = input as IUntitledTextResourceEditorInput;\n\t\tif (untitledInput.forceUntitled || !untitledInput.resource || (untitledInput.resource.scheme === Schemas.untitled)) {\n\t\t\tconst untitledOptions: Partial<INewUntitledTextEditorOptions> = {\n\t\t\t\tlanguageId: untitledInput.languageId,\n\t\t\t\tinitialValue: untitledInput.contents,\n\t\t\t\tencoding: untitledInput.encoding\n\t\t\t};\n\n\t\t\t// Untitled resource: use as hint for an existing untitled editor\n\t\t\tlet untitledModel: IUntitledTextEditorModel;\n\t\t\tif (untitledInput.resource?.scheme === Schemas.untitled) {\n\t\t\t\tuntitledModel = this.untitledTextEditorService.create({ untitledResource: untitledInput.resource, ...untitledOptions });\n\t\t\t}\n\n\t\t\t// Other resource: use as hint for associated filepath\n\t\t\telse {\n\t\t\t\tuntitledModel = this.untitledTextEditorService.create({ associatedResource: untitledInput.resource, ...untitledOptions });\n\t\t\t}\n\n\t\t\treturn this.createOrGetCached(untitledModel.resource, () => {\n\n\t\t\t\t// Factory function for new untitled editor\n\t\t\t\tconst input = this.instantiationService.createInstance(UntitledTextEditorInput, untitledModel);\n\n\t\t\t\t// We dispose the untitled model once the editor\n\t\t\t\t// is being disposed. Even though we may have not\n\t\t\t\t// created the model initially, the lifecycle for\n\t\t\t\t// untitled is tightly coupled with the editor\n\t\t\t\t// lifecycle for now.\n\t\t\t\tEvent.once(input.onWillDispose)(() => untitledModel.dispose());\n\n\t\t\t\treturn input;\n\t\t\t});\n\t\t}\n\n\t\t// Text File/Resource Editor Support\n\t\tconst textResourceEditorInput = input as IUntypedFileEditorInput;\n\t\tif (textResourceEditorInput.resource instanceof URI) {\n\n\t\t\t// Derive the label from the path if not provided explicitly\n\t\t\tconst label = textResourceEditorInput.label || basename(textResourceEditorInput.resource);\n\n\t\t\t// We keep track of the preferred resource this input is to be created\n\t\t\t// with but it may be different from the canonical resource (see below)\n\t\t\tconst preferredResource = textResourceEditorInput.resource;\n\n\t\t\t// From this moment on, only operate on the canonical resource\n\t\t\t// to ensure we reduce the chance of opening the same resource\n\t\t\t// with different resource forms (e.g. path casing on Windows)\n\t\t\tconst canonicalResource = this.uriIdentityService.asCanonicalUri(preferredResource);\n\n\t\t\treturn this.createOrGetCached(canonicalResource, () => {\n\n\t\t\t\t// File\n\t\t\t\tif (textResourceEditorInput.forceFile || this.fileService.hasProvider(canonicalResource)) {\n\t\t\t\t\treturn this.fileEditorFactory.createFileEditor(canonicalResource, preferredResource, textResourceEditorInput.label, textResourceEditorInput.description, textResourceEditorInput.encoding, textResourceEditorInput.languageId, textResourceEditorInput.contents, this.instantiationService);\n\t\t\t\t}\n\n\t\t\t\t// Resource\n\t\t\t\treturn this.instantiationService.createInstance(TextResourceEditorInput, canonicalResource, textResourceEditorInput.label, textResourceEditorInput.description, textResourceEditorInput.languageId, textResourceEditorInput.contents);\n\t\t\t}, cachedInput => {\n\n\t\t\t\t// Untitled\n\t\t\t\tif (cachedInput instanceof UntitledTextEditorInput) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Files\n\t\t\t\telse if (!(cachedInput instanceof TextResourceEditorInput)) {\n\t\t\t\t\tcachedInput.setPreferredResource(preferredResource);\n\n\t\t\t\t\tif (textResourceEditorInput.label) {\n\t\t\t\t\t\tcachedInput.setPreferredName(textResourceEditorInput.label);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (textResourceEditorInput.description) {\n\t\t\t\t\t\tcachedInput.setPreferredDescription(textResourceEditorInput.description);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (textResourceEditorInput.encoding) {\n\t\t\t\t\t\tcachedInput.setPreferredEncoding(textResourceEditorInput.encoding);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (textResourceEditorInput.languageId) {\n\t\t\t\t\t\tcachedInput.setPreferredLanguageId(textResourceEditorInput.languageId);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof textResourceEditorInput.contents === 'string') {\n\t\t\t\t\t\tcachedInput.setPreferredContents(textResourceEditorInput.contents);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Resources\n\t\t\t\telse {\n\t\t\t\t\tif (label) {\n\t\t\t\t\t\tcachedInput.setName(label);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (textResourceEditorInput.description) {\n\t\t\t\t\t\tcachedInput.setDescription(textResourceEditorInput.description);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (textResourceEditorInput.languageId) {\n\t\t\t\t\t\tcachedInput.setPreferredLanguageId(textResourceEditorInput.languageId);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof textResourceEditorInput.contents === 'string') {\n\t\t\t\t\t\tcachedInput.setPreferredContents(textResourceEditorInput.contents);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthrow new Error(`ITextEditorService: Unable to create texteditor from ${JSON.stringify(input)}`);\n\t}\n\n\tprivate createOrGetCached(\n\t\tresource: URI,\n\t\tfactoryFn: () => TextResourceEditorInput | IFileEditorInput | UntitledTextEditorInput,\n\t\tcachedFn?: (input: TextResourceEditorInput | IFileEditorInput | UntitledTextEditorInput) => void\n\t): TextResourceEditorInput | IFileEditorInput | UntitledTextEditorInput {\n\n\t\t// Return early if already cached\n\t\tlet input = this.editorInputCache.get(resource);\n\t\tif (input) {\n\t\t\tcachedFn?.(input);\n\n\t\t\treturn input;\n\t\t}\n\n\t\t// Otherwise create and add to cache\n\t\tinput = factoryFn();\n\t\tthis.editorInputCache.set(resource, input);\n\t\tEvent.once(input.onWillDispose)(() => this.editorInputCache.delete(resource));\n\n\t\treturn input;\n\t}\n}\n\nregisterSingleton(ITextEditorService, TextEditorService, InstantiationType.Eager /* do not change: https://github.com/microsoft/vscode/issues/137675 */);\n"]}