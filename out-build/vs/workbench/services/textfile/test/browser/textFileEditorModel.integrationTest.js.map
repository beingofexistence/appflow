{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/textfile/test/browser/textFileEditorModel.integrationTest.ts"],"names":[],"mappings":"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","file":"textFileEditorModel.integrationTest.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { TextFileEditorModel } from 'vs/workbench/services/textfile/common/textFileEditorModel';\nimport { workbenchInstantiationService, TestServiceAccessor } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { ensureNoDisposablesAreLeakedInTestSuite, toResource } from 'vs/base/test/common/utils';\nimport { TextFileEditorModelManager } from 'vs/workbench/services/textfile/common/textFileEditorModelManager';\nimport { createTextBufferFactoryFromStream } from 'vs/editor/common/model/textModel';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { URI } from 'vs/base/common/uri';\nimport { bufferToStream, VSBuffer } from 'vs/base/common/buffer';\nimport { DisposableStore, toDisposable } from 'vs/base/common/lifecycle';\n\nsuite('Files - TextFileEditorModel (integration)', () => {\n\n\tconst disposables = new DisposableStore();\n\n\tlet instantiationService: IInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\tlet content: string;\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\t\tcontent = accessor.fileService.getContent();\n\t\tdisposables.add(toDisposable(() => accessor.fileService.setContent(content)));\n\t\tdisposables.add(<TextFileEditorModelManager>accessor.textFileService.files);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('backup and restore (simple)', async function () {\n\t\treturn testBackupAndRestore(toResource.call(this, '/path/index_async.txt'), toResource.call(this, '/path/index_async2.txt'), 'Some very small file text content.');\n\t});\n\n\ttest('backup and restore (large, #121347)', async function () {\n\t\tconst largeContent = '국어한\\n'.repeat(100000);\n\t\treturn testBackupAndRestore(toResource.call(this, '/path/index_async.txt'), toResource.call(this, '/path/index_async2.txt'), largeContent);\n\t});\n\n\tasync function testBackupAndRestore(resourceA: URI, resourceB: URI, contents: string): Promise<void> {\n\t\tconst originalModel: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, resourceA, 'utf8', undefined));\n\t\tawait originalModel.resolve({\n\t\t\tcontents: await createTextBufferFactoryFromStream(await accessor.textFileService.getDecodedStream(resourceA, bufferToStream(VSBuffer.fromString(contents))))\n\t\t});\n\n\t\tassert.strictEqual(originalModel.textEditorModel?.getValue(), contents);\n\n\t\tconst backup = await originalModel.backup(CancellationToken.None);\n\t\tconst modelRestoredIdentifier = { typeId: originalModel.typeId, resource: resourceB };\n\t\tawait accessor.workingCopyBackupService.backup(modelRestoredIdentifier, backup.content);\n\n\t\tconst modelRestored: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, modelRestoredIdentifier.resource, 'utf8', undefined));\n\t\tawait modelRestored.resolve();\n\n\t\tassert.strictEqual(modelRestored.textEditorModel?.getValue(), contents);\n\t\tassert.strictEqual(modelRestored.isDirty(), true);\n\t}\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"]}