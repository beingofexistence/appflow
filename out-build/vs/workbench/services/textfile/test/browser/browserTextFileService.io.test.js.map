{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/textfile/test/browser/browserTextFileService.io.test.ts"],"names":[],"mappings":"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","file":"browserTextFileService.io.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { workbenchInstantiationService, TestInMemoryFileSystemProvider, TestBrowserTextFileServiceWithEncodingOverrides } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { Schemas } from 'vs/base/common/network';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { TextFileEditorModelManager } from 'vs/workbench/services/textfile/common/textFileEditorModelManager';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { IFileService, IStat } from 'vs/platform/files/common/files';\nimport { URI } from 'vs/base/common/uri';\nimport { join } from 'vs/base/common/path';\nimport { UTF16le, detectEncodingByBOMFromBuffer, UTF8_with_bom, UTF16be, toCanonicalName } from 'vs/workbench/services/textfile/common/encoding';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport files from 'vs/workbench/services/textfile/test/common/fixtures/files';\nimport createSuite from 'vs/workbench/services/textfile/test/common/textFileService.io.test';\nimport { isWeb } from 'vs/base/common/platform';\nimport { IWorkingCopyFileService, WorkingCopyFileService } from 'vs/workbench/services/workingCopy/common/workingCopyFileService';\nimport { WorkingCopyService } from 'vs/workbench/services/workingCopy/common/workingCopyService';\nimport { UriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentityService';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\n// optimization: we don't need to run this suite in native environment,\n// because we have nativeTextFileService.io.test.ts for it,\n// so our tests run faster\nif (isWeb) {\n\tsuite('Files - BrowserTextFileService i/o', function () {\n\t\tconst disposables = new DisposableStore();\n\n\t\tlet service: ITextFileService;\n\t\tlet fileProvider: TestInMemoryFileSystemProvider;\n\t\tconst testDir = 'test';\n\n\t\tcreateSuite({\n\t\t\tsetup: async () => {\n\t\t\t\tconst instantiationService = workbenchInstantiationService(undefined, disposables);\n\n\t\t\t\tconst logService = new NullLogService();\n\t\t\t\tconst fileService = disposables.add(new FileService(logService));\n\n\t\t\t\tfileProvider = disposables.add(new TestInMemoryFileSystemProvider());\n\t\t\t\tdisposables.add(fileService.registerProvider(Schemas.file, fileProvider));\n\n\t\t\t\tconst collection = new ServiceCollection();\n\t\t\t\tcollection.set(IFileService, fileService);\n\t\t\t\tcollection.set(IWorkingCopyFileService, disposables.add(new WorkingCopyFileService(fileService, disposables.add(new WorkingCopyService()), instantiationService, disposables.add(new UriIdentityService(fileService)))));\n\n\t\t\t\tservice = disposables.add(instantiationService.createChild(collection).createInstance(TestBrowserTextFileServiceWithEncodingOverrides));\n\t\t\t\tdisposables.add(<TextFileEditorModelManager>service.files);\n\n\t\t\t\tawait fileProvider.mkdir(URI.file(testDir));\n\t\t\t\tfor (const fileName in files) {\n\t\t\t\t\tawait fileProvider.writeFile(\n\t\t\t\t\t\tURI.file(join(testDir, fileName)),\n\t\t\t\t\t\tfiles[fileName],\n\t\t\t\t\t\t{ create: true, overwrite: false, unlock: false, atomic: false }\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn { service, testDir };\n\t\t\t},\n\n\t\t\tteardown: async () => {\n\t\t\t\tdisposables.clear();\n\t\t\t},\n\n\t\t\texists,\n\t\t\tstat,\n\t\t\treadFile,\n\t\t\tdetectEncodingByBOM\n\t\t});\n\n\t\tasync function exists(fsPath: string): Promise<boolean> {\n\t\t\ttry {\n\t\t\t\tawait fileProvider.readFile(URI.file(fsPath));\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tasync function readFile(fsPath: string): Promise<VSBuffer>;\n\t\tasync function readFile(fsPath: string, encoding: string): Promise<string>;\n\t\tasync function readFile(fsPath: string, encoding?: string): Promise<VSBuffer | string> {\n\t\t\tconst file = await fileProvider.readFile(URI.file(fsPath));\n\n\t\t\tif (!encoding) {\n\t\t\t\treturn VSBuffer.wrap(file);\n\t\t\t}\n\n\t\t\treturn new TextDecoder(toCanonicalName(encoding)).decode(file);\n\t\t}\n\n\t\tasync function stat(fsPath: string): Promise<IStat> {\n\t\t\treturn fileProvider.stat(URI.file(fsPath));\n\t\t}\n\n\t\tasync function detectEncodingByBOM(fsPath: string): Promise<typeof UTF16be | typeof UTF16le | typeof UTF8_with_bom | null> {\n\t\t\ttry {\n\t\t\t\tconst buffer = await readFile(fsPath);\n\n\t\t\t\treturn detectEncodingByBOMFromBuffer(buffer.slice(0, 3), 3);\n\t\t\t} catch (error) {\n\t\t\t\treturn null; // ignore errors (like file not found)\n\t\t\t}\n\t\t}\n\n\t\tensureNoDisposablesAreLeakedInTestSuite();\n\t});\n}\n"]}