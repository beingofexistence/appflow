{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/textfile/test/electron-sandbox/nativeTextFileService.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAoBhG,KAAK,CAAC,+BAA+B,EAAE;QACtC,MAAM,WAAW,GAAG,IAAI,eAAG,EAAc,CAAC;QAE1C,IAAI,OAAY,CAAc;QAC9B,IAAI,oBAAyB,CAAmB;QAEhD,KAAK,CAAC,GAAG,EAAE;YACV,oBAAoB,GAAG,IAAA,4BAAI,EAA0B,SAAS,EAAE,WAAW,CAAC,CAAC;YAE7E,MAAM,UAAU,GAAG,IAAI,SAAG,EAAa,CAAC;YACxC,MAAM,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,iBAAG,CAAS,UAAU,CAAC,CAAC,CAAC;YAEjE,MAAM,YAAY,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,iCAAI,EAAwB,CAAC,CAAC;YACvE,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC,gBAAgB,CAAC,iBAAO,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC;YAE1E,MAAM,UAAU,GAAG,IAAI,uBAAG,EAAgB,CAAC;YAC3C,UAAU,CAAC,GAAG,CAAC,WAAG,EAAW,WAAW,CAAC,CAAC;YAC1C,UAAU,CAAC,GAAG,CAAC,4BAAG,EAAsB,WAAW,CAAC,GAAG,CAAC,IAAI,4BAAG,CAAoB,WAAW,EAAE,WAAW,CAAC,GAAG,CAAC,IAAI,wBAAG,EAAiB,CAAC,EAAE,oBAAoB,EAAE,WAAW,CAAC,GAAG,CAAC,IAAI,wBAAG,CAAgB,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAEzN,OAAO,GAAG,WAAW,CAAC,GAAG,CAAC,oBAAoB,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,cAAc,CAAC,4BAAI,CAA2C,CAAC,CAAC;YACvI,WAAW,CAAC,GAAG,CAA6B,OAAO,CAAC,KAAK,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,GAAG,EAAE;YACb,WAAW,CAAC,KAAK,EAAE,CAAC;QACrB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iCAAiC,EAAE,KAAK;YAC5C,MAAM,KAAK,GAAwB,WAAW,CAAC,GAAG,CAAC,oBAAoB,CAAC,cAAc,CAAC,0BAAI,EAAiB,WAAG,CAAQ,IAAI,CAAC,IAAI,EAAE,uBAAuB,CAAC,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC;YAEhL,MAAM,KAAK,CAAC,OAAO,EAAE,CAAC;YAEtB,IAAI,kBAAkB,GAAG,KAAK,CAAC;YAC/B,KAAK,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,kBAAkB,GAAG,IAAI,CAAC,CAAC;YAEnD,MAAM,QAAQ,GAAG,oBAAoB,CAAC,cAAc,CAAC,4BAAI,CAAgB,CAAC;YAC1E,QAAQ,CAAC,gBAAgB,CAAC,YAAY,EAAE,CAAC;YAEzC,MAAM,CAAC,EAAE,CAAC,QAAQ,CAAC,gBAAgB,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;YAChE,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,gBAAgB,CAAC,eAAe,CAAC,CAAC;YAE7D,MAAM,CAAC,WAAW,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;QAEH,IAAA,WAAG,GAAsC,CAAC;IAC3C,CAAC,CAAC,CAAC","file":"nativeTextFileService.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { TextFileEditorModelManager } from 'vs/workbench/services/textfile/common/textFileEditorModelManager';\nimport { Schemas } from 'vs/base/common/network';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { TestNativeTextFileServiceWithEncodingOverrides, TestServiceAccessor, workbenchInstantiationService } from 'vs/workbench/test/electron-sandbox/workbenchTestServices';\nimport { IWorkingCopyFileService, WorkingCopyFileService } from 'vs/workbench/services/workingCopy/common/workingCopyFileService';\nimport { WorkingCopyService } from 'vs/workbench/services/workingCopy/common/workingCopyService';\nimport { UriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentityService';\nimport { InMemoryFileSystemProvider } from 'vs/platform/files/common/inMemoryFilesystemProvider';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { TextFileEditorModel } from 'vs/workbench/services/textfile/common/textFileEditorModel';\nimport { ensureNoDisposablesAreLeakedInTestSuite, toResource } from 'vs/base/test/common/utils';\n\nsuite('Files - NativeTextFileService', function () {\n\tconst disposables = new DisposableStore();\n\n\tlet service: ITextFileService;\n\tlet instantiationService: IInstantiationService;\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\n\t\tconst logService = new NullLogService();\n\t\tconst fileService = disposables.add(new FileService(logService));\n\n\t\tconst fileProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(fileService.registerProvider(Schemas.file, fileProvider));\n\n\t\tconst collection = new ServiceCollection();\n\t\tcollection.set(IFileService, fileService);\n\t\tcollection.set(IWorkingCopyFileService, disposables.add(new WorkingCopyFileService(fileService, disposables.add(new WorkingCopyService()), instantiationService, disposables.add(new UriIdentityService(fileService)))));\n\n\t\tservice = disposables.add(instantiationService.createChild(collection).createInstance(TestNativeTextFileServiceWithEncodingOverrides));\n\t\tdisposables.add(<TextFileEditorModelManager>service.files);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('shutdown joins on pending saves', async function () {\n\t\tconst model: TextFileEditorModel = disposables.add(instantiationService.createInstance(TextFileEditorModel, toResource.call(this, '/path/index_async.txt'), 'utf8', undefined));\n\n\t\tawait model.resolve();\n\n\t\tlet pendingSaveAwaited = false;\n\t\tmodel.save().then(() => pendingSaveAwaited = true);\n\n\t\tconst accessor = instantiationService.createInstance(TestServiceAccessor);\n\t\taccessor.lifecycleService.fireShutdown();\n\n\t\tassert.ok(accessor.lifecycleService.shutdownJoiners.length > 0);\n\t\tawait Promise.all(accessor.lifecycleService.shutdownJoiners);\n\n\t\tassert.strictEqual(pendingSaveAwaited, true);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"]}