{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/textfile/test/node/encoding/encoding.test.ts"],"names":[],"mappings":"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","file":"encoding.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as fs from 'fs';\nimport * as encoding from 'vs/workbench/services/textfile/common/encoding';\nimport * as streams from 'vs/base/common/stream';\nimport { newWriteableBufferStream, VSBuffer, VSBufferReadableStream, streamToBufferReadableStream } from 'vs/base/common/buffer';\nimport { splitLines } from 'vs/base/common/strings';\nimport { FileAccess } from 'vs/base/common/network';\nimport { importAMDNodeModule } from 'vs/amdX';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nexport async function detectEncodingByBOM(file: string): Promise<typeof encoding.UTF16be | typeof encoding.UTF16le | typeof encoding.UTF8_with_bom | null> {\n\ttry {\n\t\tconst { buffer, bytesRead } = await readExactlyByFile(file, 3);\n\n\t\treturn encoding.detectEncodingByBOMFromBuffer(buffer, bytesRead);\n\t} catch (error) {\n\t\treturn null; // ignore errors (like file not found)\n\t}\n}\n\ninterface ReadResult {\n\tbuffer: VSBuffer | null;\n\tbytesRead: number;\n}\n\nfunction readExactlyByFile(file: string, totalBytes: number): Promise<ReadResult> {\n\treturn new Promise<ReadResult>((resolve, reject) => {\n\t\tfs.open(file, 'r', null, (err, fd) => {\n\t\t\tif (err) {\n\t\t\t\treturn reject(err);\n\t\t\t}\n\n\t\t\tfunction end(err: Error | null, resultBuffer: Buffer | null, bytesRead: number): void {\n\t\t\t\tfs.close(fd, closeError => {\n\t\t\t\t\tif (closeError) {\n\t\t\t\t\t\treturn reject(closeError);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (err && (<any>err).code === 'EISDIR') {\n\t\t\t\t\t\treturn reject(err); // we want to bubble this error up (file is actually a folder)\n\t\t\t\t\t}\n\n\t\t\t\t\treturn resolve({ buffer: resultBuffer ? VSBuffer.wrap(resultBuffer) : null, bytesRead });\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst buffer = Buffer.allocUnsafe(totalBytes);\n\t\t\tlet offset = 0;\n\n\t\t\tfunction readChunk(): void {\n\t\t\t\tfs.read(fd, buffer, offset, totalBytes - offset, null, (err, bytesRead) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn end(err, null, 0);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (bytesRead === 0) {\n\t\t\t\t\t\treturn end(null, buffer, offset);\n\t\t\t\t\t}\n\n\t\t\t\t\toffset += bytesRead;\n\n\t\t\t\t\tif (offset === totalBytes) {\n\t\t\t\t\t\treturn end(null, buffer, offset);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn readChunk();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treadChunk();\n\t\t});\n\t});\n}\n\nsuite('Encoding', () => {\n\n\ttest('detectBOM does not return error for non existing file', async () => {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/not-exist.css').fsPath;\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(file);\n\t\tassert.strictEqual(detectedEncoding, null);\n\t});\n\n\ttest('detectBOM UTF-8', async () => {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some_utf8.css').fsPath;\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(file);\n\t\tassert.strictEqual(detectedEncoding, 'utf8bom');\n\t});\n\n\ttest('detectBOM UTF-16 LE', async () => {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some_utf16le.css').fsPath;\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(file);\n\t\tassert.strictEqual(detectedEncoding, 'utf16le');\n\t});\n\n\ttest('detectBOM UTF-16 BE', async () => {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some_utf16be.css').fsPath;\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(file);\n\t\tassert.strictEqual(detectedEncoding, 'utf16be');\n\t});\n\n\ttest('detectBOM ANSI', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some_ansi.css').fsPath;\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(file);\n\t\tassert.strictEqual(detectedEncoding, null);\n\t});\n\n\ttest('detectBOM ANSI (2)', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/empty.txt').fsPath;\n\n\t\tconst detectedEncoding = await detectEncodingByBOM(file);\n\t\tassert.strictEqual(detectedEncoding, null);\n\t});\n\n\ttest('detectEncodingFromBuffer (JSON saved as PNG)', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some.json.png').fsPath;\n\n\t\tconst buffer = await readExactlyByFile(file, 512);\n\t\tconst mimes = encoding.detectEncodingFromBuffer(buffer);\n\t\tassert.strictEqual(mimes.seemsBinary, false);\n\t});\n\n\ttest('detectEncodingFromBuffer (PNG saved as TXT)', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some.png.txt').fsPath;\n\t\tconst buffer = await readExactlyByFile(file, 512);\n\t\tconst mimes = encoding.detectEncodingFromBuffer(buffer);\n\t\tassert.strictEqual(mimes.seemsBinary, true);\n\t});\n\n\ttest('detectEncodingFromBuffer (XML saved as PNG)', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some.xml.png').fsPath;\n\t\tconst buffer = await readExactlyByFile(file, 512);\n\t\tconst mimes = encoding.detectEncodingFromBuffer(buffer);\n\t\tassert.strictEqual(mimes.seemsBinary, false);\n\t});\n\n\ttest('detectEncodingFromBuffer (QWOFF saved as TXT)', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some.qwoff.txt').fsPath;\n\t\tconst buffer = await readExactlyByFile(file, 512);\n\t\tconst mimes = encoding.detectEncodingFromBuffer(buffer);\n\t\tassert.strictEqual(mimes.seemsBinary, true);\n\t});\n\n\ttest('detectEncodingFromBuffer (CSS saved as QWOFF)', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some.css.qwoff').fsPath;\n\t\tconst buffer = await readExactlyByFile(file, 512);\n\t\tconst mimes = encoding.detectEncodingFromBuffer(buffer);\n\t\tassert.strictEqual(mimes.seemsBinary, false);\n\t});\n\n\ttest('detectEncodingFromBuffer (PDF)', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some.pdf').fsPath;\n\t\tconst buffer = await readExactlyByFile(file, 512);\n\t\tconst mimes = encoding.detectEncodingFromBuffer(buffer);\n\t\tassert.strictEqual(mimes.seemsBinary, true);\n\t});\n\n\ttest('detectEncodingFromBuffer (guess UTF-16 LE from content without BOM)', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/utf16_le_nobom.txt').fsPath;\n\t\tconst buffer = await readExactlyByFile(file, 512);\n\t\tconst mimes = encoding.detectEncodingFromBuffer(buffer);\n\t\tassert.strictEqual(mimes.encoding, encoding.UTF16le);\n\t\tassert.strictEqual(mimes.seemsBinary, false);\n\t});\n\n\ttest('detectEncodingFromBuffer (guess UTF-16 BE from content without BOM)', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/utf16_be_nobom.txt').fsPath;\n\t\tconst buffer = await readExactlyByFile(file, 512);\n\t\tconst mimes = encoding.detectEncodingFromBuffer(buffer);\n\t\tassert.strictEqual(mimes.encoding, encoding.UTF16be);\n\t\tassert.strictEqual(mimes.seemsBinary, false);\n\t});\n\n\ttest('autoGuessEncoding (UTF8)', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some_file.css').fsPath;\n\t\tconst buffer = await readExactlyByFile(file, 512 * 8);\n\t\tconst mimes = await encoding.detectEncodingFromBuffer(buffer, true);\n\t\tassert.strictEqual(mimes.encoding, 'utf8');\n\t});\n\n\ttest('autoGuessEncoding (ASCII)', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some_ansi.css').fsPath;\n\t\tconst buffer = await readExactlyByFile(file, 512 * 8);\n\t\tconst mimes = await encoding.detectEncodingFromBuffer(buffer, true);\n\t\tassert.strictEqual(mimes.encoding, null);\n\t});\n\n\ttest('autoGuessEncoding (ShiftJIS)', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some.shiftjis.txt').fsPath;\n\t\tconst buffer = await readExactlyByFile(file, 512 * 8);\n\t\tconst mimes = await encoding.detectEncodingFromBuffer(buffer, true);\n\t\tassert.strictEqual(mimes.encoding, 'shiftjis');\n\t});\n\n\ttest('autoGuessEncoding (CP1252)', async function () {\n\t\tconst file = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some.cp1252.txt').fsPath;\n\t\tconst buffer = await readExactlyByFile(file, 512 * 8);\n\t\tconst mimes = await encoding.detectEncodingFromBuffer(buffer, true);\n\t\tassert.strictEqual(mimes.encoding, 'windows1252');\n\t});\n\n\tasync function readAndDecodeFromDisk(path: string, fileEncoding: string | null) {\n\t\treturn new Promise<string>((resolve, reject) => {\n\t\t\tfs.readFile(path, (err, data) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(importAMDNodeModule<typeof import('@vscode/iconv-lite-umd')>('@vscode/iconv-lite-umd', 'lib/iconv-lite-umd.js').then(iconv => iconv.decode(data, encoding.toNodeEncoding(fileEncoding!))));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tfunction newTestReadableStream(buffers: Buffer[]): VSBufferReadableStream {\n\t\tconst stream = newWriteableBufferStream();\n\t\tbuffers\n\t\t\t.map(VSBuffer.wrap)\n\t\t\t.forEach(buffer => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tstream.write(buffer);\n\t\t\t\t});\n\t\t\t});\n\t\tsetTimeout(() => {\n\t\t\tstream.end();\n\t\t});\n\t\treturn stream;\n\t}\n\n\tasync function readAllAsString(stream: streams.ReadableStream<string>) {\n\t\treturn streams.consumeStream(stream, strings => strings.join(''));\n\t}\n\n\ttest('toDecodeStream - some stream', async function () {\n\t\tconst source = newTestReadableStream([\n\t\t\tBuffer.from([65, 66, 67]),\n\t\t\tBuffer.from([65, 66, 67]),\n\t\t\tBuffer.from([65, 66, 67]),\n\t\t]);\n\n\t\tconst { detected, stream } = await encoding.toDecodeStream(source, { acceptTextOnly: true, minBytesRequiredForDetection: 4, guessEncoding: false, overwriteEncoding: async detected => detected || encoding.UTF8 });\n\n\t\tassert.ok(detected);\n\t\tassert.ok(stream);\n\n\t\tconst content = await readAllAsString(stream);\n\t\tassert.strictEqual(content, 'ABCABCABC');\n\t});\n\n\ttest('toDecodeStream - some stream, expect too much data', async function () {\n\t\tconst source = newTestReadableStream([\n\t\t\tBuffer.from([65, 66, 67]),\n\t\t\tBuffer.from([65, 66, 67]),\n\t\t\tBuffer.from([65, 66, 67]),\n\t\t]);\n\n\t\tconst { detected, stream } = await encoding.toDecodeStream(source, { acceptTextOnly: true, minBytesRequiredForDetection: 64, guessEncoding: false, overwriteEncoding: async detected => detected || encoding.UTF8 });\n\n\t\tassert.ok(detected);\n\t\tassert.ok(stream);\n\n\t\tconst content = await readAllAsString(stream);\n\t\tassert.strictEqual(content, 'ABCABCABC');\n\t});\n\n\ttest('toDecodeStream - some stream, no data', async function () {\n\t\tconst source = newWriteableBufferStream();\n\t\tsource.end();\n\n\t\tconst { detected, stream } = await encoding.toDecodeStream(source, { acceptTextOnly: true, minBytesRequiredForDetection: 512, guessEncoding: false, overwriteEncoding: async detected => detected || encoding.UTF8 });\n\n\t\tassert.ok(detected);\n\t\tassert.ok(stream);\n\n\t\tconst content = await readAllAsString(stream);\n\t\tassert.strictEqual(content, '');\n\t});\n\n\ttest('toDecodeStream - encoding, utf16be', async function () {\n\t\tconst path = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some_utf16be.css').fsPath;\n\t\tconst source = streamToBufferReadableStream(fs.createReadStream(path));\n\n\t\tconst { detected, stream } = await encoding.toDecodeStream(source, { acceptTextOnly: true, minBytesRequiredForDetection: 64, guessEncoding: false, overwriteEncoding: async detected => detected || encoding.UTF8 });\n\n\t\tassert.strictEqual(detected.encoding, 'utf16be');\n\t\tassert.strictEqual(detected.seemsBinary, false);\n\n\t\tconst expected = await readAndDecodeFromDisk(path, detected.encoding);\n\t\tconst actual = await readAllAsString(stream);\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('toDecodeStream - empty file', async function () {\n\t\tconst path = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/empty.txt').fsPath;\n\t\tconst source = streamToBufferReadableStream(fs.createReadStream(path));\n\t\tconst { detected, stream } = await encoding.toDecodeStream(source, { acceptTextOnly: true, guessEncoding: false, overwriteEncoding: async detected => detected || encoding.UTF8 });\n\n\t\tconst expected = await readAndDecodeFromDisk(path, detected.encoding);\n\t\tconst actual = await readAllAsString(stream);\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('toDecodeStream - decodes buffer entirely', async function () {\n\t\tconst emojis = Buffer.from('🖥️💻💾');\n\t\tconst incompleteEmojis = emojis.slice(0, emojis.length - 1);\n\n\t\tconst buffers: Buffer[] = [];\n\t\tfor (let i = 0; i < incompleteEmojis.length; i++) {\n\t\t\tbuffers.push(incompleteEmojis.slice(i, i + 1));\n\t\t}\n\n\t\tconst source = newTestReadableStream(buffers);\n\t\tconst { stream } = await encoding.toDecodeStream(source, { acceptTextOnly: true, minBytesRequiredForDetection: 4, guessEncoding: false, overwriteEncoding: async detected => detected || encoding.UTF8 });\n\n\t\tconst expected = new TextDecoder().decode(incompleteEmojis);\n\t\tconst actual = await readAllAsString(stream);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('toDecodeStream - some stream (GBK issue #101856)', async function () {\n\t\tconst path = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some_gbk.txt').fsPath;\n\t\tconst source = streamToBufferReadableStream(fs.createReadStream(path));\n\n\t\tconst { detected, stream } = await encoding.toDecodeStream(source, { acceptTextOnly: true, minBytesRequiredForDetection: 4, guessEncoding: false, overwriteEncoding: async () => 'gbk' });\n\t\tassert.ok(detected);\n\t\tassert.ok(stream);\n\n\t\tconst content = await readAllAsString(stream);\n\t\tassert.strictEqual(content.length, 65537);\n\t});\n\n\ttest('toDecodeStream - some stream (UTF-8 issue #102202)', async function () {\n\t\tconst path = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/issue_102202.txt').fsPath;\n\t\tconst source = streamToBufferReadableStream(fs.createReadStream(path));\n\n\t\tconst { detected, stream } = await encoding.toDecodeStream(source, { acceptTextOnly: true, minBytesRequiredForDetection: 4, guessEncoding: false, overwriteEncoding: async () => 'utf-8' });\n\t\tassert.ok(detected);\n\t\tassert.ok(stream);\n\n\t\tconst content = await readAllAsString(stream);\n\t\tconst lines = splitLines(content);\n\n\t\tassert.strictEqual(lines[981].toString(), '啊啊啊啊啊啊aaa啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊啊，啊啊啊啊啊啊啊啊啊啊啊。');\n\t});\n\n\ttest('toDecodeStream - binary', async function () {\n\t\tconst source = () => {\n\t\t\treturn newTestReadableStream([\n\t\t\t\tBuffer.from([0, 0, 0]),\n\t\t\t\tBuffer.from('Hello World'),\n\t\t\t\tBuffer.from([0])\n\t\t\t]);\n\t\t};\n\n\t\t// acceptTextOnly: true\n\n\t\tlet error: Error | undefined = undefined;\n\t\ttry {\n\t\t\tawait encoding.toDecodeStream(source(), { acceptTextOnly: true, guessEncoding: false, overwriteEncoding: async detected => detected || encoding.UTF8 });\n\t\t} catch (e) {\n\t\t\terror = e;\n\t\t}\n\n\t\tassert.ok(error instanceof encoding.DecodeStreamError);\n\t\tassert.strictEqual(error.decodeStreamErrorKind, encoding.DecodeStreamErrorKind.STREAM_IS_BINARY);\n\n\t\t// acceptTextOnly: false\n\n\t\tconst { detected, stream } = await encoding.toDecodeStream(source(), { acceptTextOnly: false, guessEncoding: false, overwriteEncoding: async detected => detected || encoding.UTF8 });\n\n\t\tassert.ok(detected);\n\t\tassert.strictEqual(detected.seemsBinary, true);\n\t\tassert.ok(stream);\n\t});\n\n\ttest('toEncodeReadable - encoding, utf16be', async function () {\n\t\tconst path = FileAccess.asFileUri('vs/workbench/services/textfile/test/node/encoding/fixtures/some_utf16be.css').fsPath;\n\t\tconst source = await readAndDecodeFromDisk(path, encoding.UTF16be);\n\n\t\tconst iconv = await importAMDNodeModule<typeof import('@vscode/iconv-lite-umd')>('@vscode/iconv-lite-umd', 'lib/iconv-lite-umd.js');\n\n\t\tconst expected = VSBuffer.wrap(\n\t\t\ticonv.encode(source, encoding.toNodeEncoding(encoding.UTF16be))\n\t\t).toString();\n\n\t\tconst actual = streams.consumeReadable(\n\t\t\tawait encoding.toEncodeReadable(streams.toReadable(source), encoding.UTF16be),\n\t\t\tVSBuffer.concat\n\t\t).toString();\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n\ttest('toEncodeReadable - empty readable to utf8', async function () {\n\t\tconst source: streams.Readable<string> = {\n\t\t\tread() {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t};\n\n\t\tconst actual = streams.consumeReadable(\n\t\t\tawait encoding.toEncodeReadable(source, encoding.UTF8),\n\t\t\tVSBuffer.concat\n\t\t).toString();\n\n\t\tassert.strictEqual(actual, '');\n\t});\n\n\t[{\n\t\tutfEncoding: encoding.UTF8,\n\t\trelatedBom: encoding.UTF8_BOM\n\t}, {\n\t\tutfEncoding: encoding.UTF8_with_bom,\n\t\trelatedBom: encoding.UTF8_BOM\n\t}, {\n\t\tutfEncoding: encoding.UTF16be,\n\t\trelatedBom: encoding.UTF16be_BOM,\n\t}, {\n\t\tutfEncoding: encoding.UTF16le,\n\t\trelatedBom: encoding.UTF16le_BOM\n\t}].forEach(({ utfEncoding, relatedBom }) => {\n\t\ttest(`toEncodeReadable - empty readable to ${utfEncoding} with BOM`, async function () {\n\t\t\tconst source: streams.Readable<string> = {\n\t\t\t\tread() {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst encodedReadable = encoding.toEncodeReadable(source, utfEncoding, { addBOM: true });\n\n\t\t\tconst expected = VSBuffer.wrap(Buffer.from(relatedBom)).toString();\n\t\t\tconst actual = streams.consumeReadable(await encodedReadable, VSBuffer.concat).toString();\n\n\t\t\tassert.strictEqual(actual, expected);\n\t\t});\n\t});\n\n\ttest('encodingExists', async function () {\n\t\tfor (const enc in encoding.SUPPORTED_ENCODINGS) {\n\t\t\tif (enc === encoding.UTF8_with_bom) {\n\t\t\t\tcontinue; // skip over encodings from us\n\t\t\t}\n\t\t\tconst iconv = await importAMDNodeModule<typeof import('@vscode/iconv-lite-umd')>('@vscode/iconv-lite-umd', 'lib/iconv-lite-umd.js');\n\t\t\tassert.strictEqual(iconv.encodingExists(enc), true, enc);\n\t\t}\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"]}