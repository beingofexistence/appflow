{"version":3,"sources":["vs/workbench/services/textfile/electron-sandbox/nativeTextFileService.ts"],"names":[],"mappings":"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","file":"nativeTextFileService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { AbstractTextFileService } from 'vs/workbench/services/textfile/browser/textFileService';\nimport { ITextFileService, ITextFileStreamContent, ITextFileContent, IReadTextFileOptions, TextFileEditorModelState, ITextFileEditorModel } from 'vs/workbench/services/textfile/common/textfiles';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { URI } from 'vs/base/common/uri';\nimport { IFileService, IFileReadLimits } from 'vs/platform/files/common/files';\nimport { ITextResourceConfigurationService } from 'vs/editor/common/services/textResourceConfiguration';\nimport { IUntitledTextEditorService } from 'vs/workbench/services/untitled/common/untitledTextEditorService';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { IDialogService, IFileDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IFilesConfigurationService } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { IPathService } from 'vs/workbench/services/path/common/pathService';\nimport { IWorkingCopyFileService } from 'vs/workbench/services/workingCopy/common/workingCopyFileService';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { IElevatedFileService } from 'vs/workbench/services/files/common/elevatedFileService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { Promises } from 'vs/base/common/async';\nimport { IDecorationsService } from 'vs/workbench/services/decorations/common/decorations';\n\nexport class NativeTextFileService extends AbstractTextFileService {\n\n\tprotected override readonly environmentService: INativeWorkbenchEnvironmentService;\n\n\tconstructor(\n\t\t@IFileService fileService: IFileService,\n\t\t@IUntitledTextEditorService untitledTextEditorService: IUntitledTextEditorService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IModelService modelService: IModelService,\n\t\t@INativeWorkbenchEnvironmentService environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IDialogService dialogService: IDialogService,\n\t\t@IFileDialogService fileDialogService: IFileDialogService,\n\t\t@ITextResourceConfigurationService textResourceConfigurationService: ITextResourceConfigurationService,\n\t\t@IFilesConfigurationService filesConfigurationService: IFilesConfigurationService,\n\t\t@ICodeEditorService codeEditorService: ICodeEditorService,\n\t\t@IPathService pathService: IPathService,\n\t\t@IWorkingCopyFileService workingCopyFileService: IWorkingCopyFileService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@ILanguageService languageService: ILanguageService,\n\t\t@IElevatedFileService elevatedFileService: IElevatedFileService,\n\t\t@ILogService logService: ILogService,\n\t\t@IDecorationsService decorationsService: IDecorationsService\n\t) {\n\t\tsuper(fileService, untitledTextEditorService, lifecycleService, instantiationService, modelService, environmentService, dialogService, fileDialogService, textResourceConfigurationService, filesConfigurationService, codeEditorService, pathService, workingCopyFileService, uriIdentityService, languageService, logService, elevatedFileService, decorationsService);\n\n\t\tthis.environmentService = environmentService;\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Lifecycle\n\t\tthis.lifecycleService.onWillShutdown(event => event.join(this.onWillShutdown(), { id: 'join.textFiles', label: localize('join.textFiles', \"Saving text files\") }));\n\t}\n\n\tprivate async onWillShutdown(): Promise<void> {\n\t\tlet modelsPendingToSave: ITextFileEditorModel[];\n\n\t\t// As long as models are pending to be saved, we prolong the shutdown\n\t\t// until that has happened to ensure we are not shutting down in the\n\t\t// middle of writing to the file\n\t\t// (https://github.com/microsoft/vscode/issues/116600)\n\t\twhile ((modelsPendingToSave = this.files.models.filter(model => model.hasState(TextFileEditorModelState.PENDING_SAVE))).length > 0) {\n\t\t\tawait Promises.settled(modelsPendingToSave.map(model => model.joinState(TextFileEditorModelState.PENDING_SAVE)));\n\t\t}\n\t}\n\n\toverride async read(resource: URI, options?: IReadTextFileOptions): Promise<ITextFileContent> {\n\n\t\t// ensure platform limits are applied\n\t\toptions = this.ensureLimits(options);\n\n\t\treturn super.read(resource, options);\n\t}\n\n\toverride async readStream(resource: URI, options?: IReadTextFileOptions): Promise<ITextFileStreamContent> {\n\n\t\t// ensure platform limits are applied\n\t\toptions = this.ensureLimits(options);\n\n\t\treturn super.readStream(resource, options);\n\t}\n\n\tprivate ensureLimits(options?: IReadTextFileOptions): IReadTextFileOptions {\n\t\tlet ensuredOptions: IReadTextFileOptions;\n\t\tif (!options) {\n\t\t\tensuredOptions = Object.create(null);\n\t\t} else {\n\t\t\tensuredOptions = options;\n\t\t}\n\n\t\tlet ensuredLimits: IFileReadLimits;\n\t\tif (!ensuredOptions.limits) {\n\t\t\tensuredLimits = Object.create(null);\n\t\t\tensuredOptions = {\n\t\t\t\t...ensuredOptions,\n\t\t\t\tlimits: ensuredLimits\n\t\t\t};\n\t\t} else {\n\t\t\tensuredLimits = ensuredOptions.limits;\n\t\t}\n\n\t\treturn ensuredOptions;\n\t}\n}\n\nregisterSingleton(ITextFileService, NativeTextFileService, InstantiationType.Eager);\n"]}