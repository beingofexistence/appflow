{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/tunnel/electron-sandbox/tunnelService.ts"],"names":[],"mappings":"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","file":"tunnelService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { URI } from 'vs/base/common/uri';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ITunnelService, AbstractTunnelService, RemoteTunnel, TunnelPrivacyId, isPortPrivileged, ITunnelProvider, isTunnelProvider } from 'vs/platform/tunnel/common/tunnel';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IAddressProvider } from 'vs/platform/remote/common/remoteAgentConnection';\nimport { ISharedProcessTunnelService } from 'vs/platform/remote/common/sharedProcessTunnelService';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IRemoteAuthorityResolverService } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { OS } from 'vs/base/common/platform';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\n\nclass SharedProcessTunnel extends Disposable implements RemoteTunnel {\n\n\tpublic readonly privacy = TunnelPrivacyId.Private;\n\tpublic readonly protocol: string | undefined = undefined;\n\n\tconstructor(\n\t\tprivate readonly _id: string,\n\t\tprivate readonly _addressProvider: IAddressProvider,\n\t\tpublic readonly tunnelRemoteHost: string,\n\t\tpublic readonly tunnelRemotePort: number,\n\t\tpublic readonly tunnelLocalPort: number | undefined,\n\t\tpublic readonly localAddress: string,\n\t\tprivate readonly _onBeforeDispose: () => void,\n\t\t@ISharedProcessTunnelService private readonly _sharedProcessTunnelService: ISharedProcessTunnelService,\n\t\t@IRemoteAuthorityResolverService private readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t) {\n\t\tsuper();\n\t\tthis._updateAddress();\n\t\tthis._register(this._remoteAuthorityResolverService.onDidChangeConnectionData(() => this._updateAddress()));\n\t}\n\n\tprivate _updateAddress(): void {\n\t\tthis._addressProvider.getAddress().then((address) => {\n\t\t\tthis._sharedProcessTunnelService.setAddress(this._id, address);\n\t\t});\n\t}\n\n\tpublic override async dispose(): Promise<void> {\n\t\tthis._onBeforeDispose();\n\t\tsuper.dispose();\n\t\tawait this._sharedProcessTunnelService.destroyTunnel(this._id);\n\t}\n}\n\nexport class TunnelService extends AbstractTunnelService {\n\n\tprivate readonly _activeSharedProcessTunnels = new Set<string>();\n\n\tpublic constructor(\n\t\t@ILogService logService: ILogService,\n\t\t@IWorkbenchEnvironmentService private readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ISharedProcessTunnelService private readonly _sharedProcessTunnelService: ISharedProcessTunnelService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@INativeWorkbenchEnvironmentService private readonly _nativeWorkbenchEnvironmentService: INativeWorkbenchEnvironmentService,\n\t\t@IConfigurationService configurationService: IConfigurationService\n\t) {\n\t\tsuper(logService, configurationService);\n\n\t\t// Destroy any shared process tunnels that might still be active\n\t\tlifecycleService.onDidShutdown(() => {\n\t\t\tthis._activeSharedProcessTunnels.forEach((id) => {\n\t\t\t\tthis._sharedProcessTunnelService.destroyTunnel(id);\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic isPortPrivileged(port: number): boolean {\n\t\treturn isPortPrivileged(port, this.defaultTunnelHost, OS, this._nativeWorkbenchEnvironmentService.os.release);\n\t}\n\n\tprotected retainOrCreateTunnel(addressOrTunnelProvider: IAddressProvider | ITunnelProvider, remoteHost: string, remotePort: number, localHost: string, localPort: number | undefined, elevateIfNeeded: boolean, privacy?: string, protocol?: string): Promise<RemoteTunnel | string | undefined> | undefined {\n\t\tconst existing = this.getTunnelFromMap(remoteHost, remotePort);\n\t\tif (existing) {\n\t\t\t++existing.refcount;\n\t\t\treturn existing.value;\n\t\t}\n\n\t\tif (isTunnelProvider(addressOrTunnelProvider)) {\n\t\t\treturn this.createWithProvider(addressOrTunnelProvider, remoteHost, remotePort, localPort, elevateIfNeeded, privacy, protocol);\n\t\t} else {\n\t\t\tthis.logService.trace(`ForwardedPorts: (TunnelService) Creating tunnel without provider ${remoteHost}:${remotePort} on local port ${localPort}.`);\n\n\t\t\tconst tunnel = this._createSharedProcessTunnel(addressOrTunnelProvider, remoteHost, remotePort, localHost, localPort, elevateIfNeeded);\n\t\t\tthis.logService.trace('ForwardedPorts: (TunnelService) Tunnel created without provider.');\n\t\t\tthis.addTunnelToMap(remoteHost, remotePort, tunnel);\n\t\t\treturn tunnel;\n\t\t}\n\t}\n\n\tprivate async _createSharedProcessTunnel(addressProvider: IAddressProvider, tunnelRemoteHost: string, tunnelRemotePort: number, tunnelLocalHost: string, tunnelLocalPort: number | undefined, elevateIfNeeded: boolean | undefined): Promise<RemoteTunnel> {\n\t\tconst { id } = await this._sharedProcessTunnelService.createTunnel();\n\t\tthis._activeSharedProcessTunnels.add(id);\n\t\tconst authority = this._environmentService.remoteAuthority!;\n\t\tconst result = await this._sharedProcessTunnelService.startTunnel(authority, id, tunnelRemoteHost, tunnelRemotePort, tunnelLocalHost, tunnelLocalPort, elevateIfNeeded);\n\t\tconst tunnel = this._instantiationService.createInstance(SharedProcessTunnel, id, addressProvider, tunnelRemoteHost, tunnelRemotePort, result.tunnelLocalPort, result.localAddress, () => {\n\t\t\tthis._activeSharedProcessTunnels.delete(id);\n\t\t});\n\t\treturn tunnel;\n\t}\n\n\toverride canTunnel(uri: URI): boolean {\n\t\treturn super.canTunnel(uri) && !!this._environmentService.remoteAuthority;\n\t}\n}\n\nregisterSingleton(ITunnelService, TunnelService, InstantiationType.Delayed);\n"]}