{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/tunnel/browser/tunnelService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUzF,IAAM,IAAI,GAAV,MAAM,IAAc,SAAQ,YAAG;QACrC,YACc,UAAe,EACU,CAAuB,EACtC,oBAAyB;YAEhD,KAAK,CAAC,UAAU,EAAE,oBAAoB,CAAC,CAAC;YAHF,MAAC,GAAD,CAAC,CAAsB;QAI9D,CAAC;QAEM,gBAAgB,CAAC,KAAa;YACpC,OAAO,KAAK,CAAC;QACd,CAAC;QAES,CAAC,CAAoB,cAAkD,EAAE,UAAkB,EAAE,UAAkB,EAAE,UAAkB,EAAE,SAA6B,EAAE,eAAwB,EAAE,OAAgB,EAAE,QAAiB;YAC1O,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAgB,UAAU,EAAE,UAAU,CAAC,CAAC;YAC/D,IAAI,QAAQ,EAAE;gBACb,EAAE,QAAQ,CAAC,QAAQ,CAAC;gBACpB,OAAO,QAAQ,CAAC,KAAK,CAAC;aACtB;YAED,IAAI,IAAA,YAAG,EAAc,cAAc,CAAC,EAAE;gBACrC,OAAO,IAAI,CAAC,CAAC,CAAkB,cAAc,EAAE,UAAU,EAAE,UAAU,EAAE,SAAS,EAAE,eAAe,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;aACtH;YACD,OAAO,SAAS,CAAC;QAClB,CAAC;QAEQ,SAAS,CAAC,GAAQ;YAC1B,OAAO,KAAK,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAkB,eAAe,CAAC;QAC1E,CAAC;KACD,CAAA;IA7BY,oBAAI;mBAAJ,IAAI;QAEd,WAAA,SAAG,CAAA;QACH,WAAA,wBAAG,CAAA;QACH,WAAA,mBAAG,CAAA;OAJO,IAAI,CA6BhB;IAED,IAAA,gBAAG,EAAe,YAAG,EAAa,IAAI,oCAAqC,CAAC","file":"tunnelService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IAddressProvider } from 'vs/platform/remote/common/remoteAgentConnection';\nimport { AbstractTunnelService, ITunnelProvider, ITunnelService, RemoteTunnel, isTunnelProvider } from 'vs/platform/tunnel/common/tunnel';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\n\nexport class TunnelService extends AbstractTunnelService {\n\tconstructor(\n\t\t@ILogService logService: ILogService,\n\t\t@IWorkbenchEnvironmentService private environmentService: IWorkbenchEnvironmentService,\n\t\t@IConfigurationService configurationService: IConfigurationService\n\t) {\n\t\tsuper(logService, configurationService);\n\t}\n\n\tpublic isPortPrivileged(_port: number): boolean {\n\t\treturn false;\n\t}\n\n\tprotected retainOrCreateTunnel(tunnelProvider: IAddressProvider | ITunnelProvider, remoteHost: string, remotePort: number, _localHost: string, localPort: number | undefined, elevateIfNeeded: boolean, privacy?: string, protocol?: string): Promise<RemoteTunnel | string | undefined> | undefined {\n\t\tconst existing = this.getTunnelFromMap(remoteHost, remotePort);\n\t\tif (existing) {\n\t\t\t++existing.refcount;\n\t\t\treturn existing.value;\n\t\t}\n\n\t\tif (isTunnelProvider(tunnelProvider)) {\n\t\t\treturn this.createWithProvider(tunnelProvider, remoteHost, remotePort, localPort, elevateIfNeeded, privacy, protocol);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\toverride canTunnel(uri: URI): boolean {\n\t\treturn super.canTunnel(uri) && !!this.environmentService.remoteAuthority;\n\t}\n}\n\nregisterSingleton(ITunnelService, TunnelService, InstantiationType.Delayed);\n"]}