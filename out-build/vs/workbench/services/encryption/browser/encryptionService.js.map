{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/encryption/browser/encryptionService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAKhG,MAAa,IAAI;QAIhB,OAAO,CAAC,KAAa;YACpB,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC/B,CAAC;QAED,OAAO,CAAC,KAAa;YACpB,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC/B,CAAC;QAED,qBAAqB;YACpB,OAAO,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC/B,CAAC;QAED,qBAAqB;YACpB,OAAO,OAAO,CAAC,OAAO,mDAAgC,CAAC;QACxD,CAAC;QAED,yBAAyB;YACxB,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACnC,CAAC;KACD;IAvBD,oBAuBC;IAED,IAAA,gBAAG,EAAe,uBAAG,EAAiB,IAAI,oCAAyC,CAAC","file":"encryptionService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IEncryptionService, KnownStorageProvider } from 'vs/platform/encryption/common/encryptionService';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\nexport class EncryptionService implements IEncryptionService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tencrypt(value: string): Promise<string> {\n\t\treturn Promise.resolve(value);\n\t}\n\n\tdecrypt(value: string): Promise<string> {\n\t\treturn Promise.resolve(value);\n\t}\n\n\tisEncryptionAvailable(): Promise<boolean> {\n\t\treturn Promise.resolve(false);\n\t}\n\n\tgetKeyStorageProvider(): Promise<KnownStorageProvider> {\n\t\treturn Promise.resolve(KnownStorageProvider.basicText);\n\t}\n\n\tsetUsePlainTextEncryption(): Promise<void> {\n\t\treturn Promise.resolve(undefined);\n\t}\n}\n\nregisterSingleton(IEncryptionService, EncryptionService, InstantiationType.Delayed);\n"]}