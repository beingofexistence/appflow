{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/terminal/common/embedderTerminalService.ts"],"names":[],"mappings":"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","file":"embedderTerminalService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IProcessDataEvent, IProcessProperty, IProcessPropertyMap, IProcessReadyEvent, IShellLaunchConfig, ITerminalChildProcess, ITerminalLaunchError, ProcessPropertyType } from 'vs/platform/terminal/common/terminal';\nimport { Disposable } from 'vs/base/common/lifecycle';\n\nexport const IEmbedderTerminalService = createDecorator<IEmbedderTerminalService>('embedderTerminalService');\n\n/**\n * Manages terminals that the embedder can create before the terminal contrib is available.\n */\nexport interface IEmbedderTerminalService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidCreateTerminal: Event<IShellLaunchConfig>;\n\n\tcreateTerminal(options: IEmbedderTerminalOptions): void;\n}\n\nexport type EmbedderTerminal = IShellLaunchConfig & Required<Pick<IShellLaunchConfig, 'customPtyImplementation'>>;\n\nexport interface IEmbedderTerminalOptions {\n\tname: string;\n\tpty: IEmbedderTerminalPty;\n\n\t// Extension APIs that have not been implemented for embedders:\n\t//   iconPath?: URI | { light: URI; dark: URI } | ThemeIcon;\n\t//   color?: ThemeColor;\n\t//   location?: TerminalLocation | TerminalEditorLocationOptions | TerminalSplitLocationOptions;\n\t//   isTransient?: boolean;\n}\n\n/**\n * See Pseudoterminal on the vscode API for usage.\n */\nexport interface IEmbedderTerminalPty {\n\tonDidWrite: Event<string>;\n\tonDidClose?: Event<void | number>;\n\tonDidChangeName?: Event<string>;\n\n\topen(): void;\n\tclose(): void;\n\n\t// Extension APIs that have not been implemented for embedders:\n\t//   onDidOverrideDimensions?: Event<TerminalDimensions | undefined>;\n\t//   handleInput?(data: string): void;\n\t//   setDimensions?(dimensions: TerminalDimensions): void;\n}\n\nclass EmbedderTerminalService implements IEmbedderTerminalService {\n\tdeclare _serviceBrand: undefined;\n\n\tprivate readonly _onDidCreateTerminal = new Emitter<IShellLaunchConfig>();\n\treadonly onDidCreateTerminal = Event.buffer(this._onDidCreateTerminal.event);\n\n\tcreateTerminal(options: IEmbedderTerminalOptions): void {\n\t\tconst slc: EmbedderTerminal = {\n\t\t\tname: options.name,\n\t\t\tisFeatureTerminal: true,\n\t\t\tcustomPtyImplementation(terminalId, cols, rows) {\n\t\t\t\treturn new EmbedderTerminalProcess(terminalId, options.pty);\n\t\t\t},\n\t\t};\n\t\tthis._onDidCreateTerminal.fire(slc);\n\t}\n}\n\n\nclass EmbedderTerminalProcess extends Disposable implements ITerminalChildProcess {\n\tprivate readonly _pty: IEmbedderTerminalPty;\n\n\treadonly shouldPersist = false;\n\n\treadonly onProcessData: Event<IProcessDataEvent | string>;\n\tprivate readonly _onProcessReady = this._register(new Emitter<IProcessReadyEvent>());\n\treadonly onProcessReady = this._onProcessReady.event;\n\tprivate readonly _onDidChangeProperty = this._register(new Emitter<IProcessProperty<any>>());\n\treadonly onDidChangeProperty = this._onDidChangeProperty.event;\n\tprivate readonly _onProcessExit = this._register(new Emitter<number | undefined>());\n\treadonly onProcessExit = this._onProcessExit.event;\n\n\tconstructor(\n\t\treadonly id: number,\n\t\tpty: IEmbedderTerminalPty\n\t) {\n\t\tsuper();\n\n\t\tthis._pty = pty;\n\t\tthis.onProcessData = this._pty.onDidWrite;\n\t\tif (this._pty.onDidClose) {\n\t\t\tthis._register(this._pty.onDidClose(e => this._onProcessExit.fire(e || undefined)));\n\t\t}\n\t\tif (this._pty.onDidChangeName) {\n\t\t\tthis._register(this._pty.onDidChangeName(e => this._onDidChangeProperty.fire({\n\t\t\t\ttype: ProcessPropertyType.Title,\n\t\t\t\tvalue: e\n\t\t\t})));\n\t\t}\n\t}\n\n\tasync start(): Promise<ITerminalLaunchError | undefined> {\n\t\tthis._onProcessReady.fire({ pid: -1, cwd: '', windowsPty: undefined });\n\t\tthis._pty.open();\n\t\treturn undefined;\n\t}\n\tshutdown(): void {\n\t\tthis._pty.close();\n\t}\n\n\t// TODO: A lot of these aren't useful for some implementations of ITerminalChildProcess, should\n\t// they be optional? Should there be a base class for \"external\" consumers to implement?\n\n\tinput(): void {\n\t\t// not supported\n\t}\n\tasync processBinary(): Promise<void> {\n\t\t// not supported\n\t}\n\tresize(): void {\n\t\t// no-op\n\t}\n\tclearBuffer(): void | Promise<void> {\n\t\t// no-op\n\t}\n\tacknowledgeDataEvent(): void {\n\t\t// no-op, flow control not currently implemented\n\t}\n\tasync setUnicodeVersion(): Promise<void> {\n\t\t// no-op\n\t}\n\tasync getInitialCwd(): Promise<string> {\n\t\treturn '';\n\t}\n\tasync getCwd(): Promise<string> {\n\t\treturn '';\n\t}\n\trefreshProperty<T extends ProcessPropertyType>(property: ProcessPropertyType): Promise<IProcessPropertyMap[T]> {\n\t\tthrow new Error(`refreshProperty is not suppported in EmbedderTerminalProcess. property: ${property}`);\n\t}\n\n\tupdateProperty(property: ProcessPropertyType, value: any): Promise<void> {\n\t\tthrow new Error(`updateProperty is not suppported in EmbedderTerminalProcess. property: ${property}, value: ${value}`);\n\t}\n}\n\nregisterSingleton(IEmbedderTerminalService, EmbedderTerminalService, InstantiationType.Delayed);\n"]}