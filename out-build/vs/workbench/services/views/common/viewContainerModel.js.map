{"version":3,"sources":["vs/workbench/services/views/common/viewContainerModel.ts"],"names":[],"mappings":"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","file":"viewContainerModel.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ViewContainer, IViewsRegistry, IViewDescriptor, Extensions as ViewExtensions, IViewContainerModel, IAddedViewDescriptorRef, IViewDescriptorRef, IAddedViewDescriptorState, defaultViewIcon } from 'vs/workbench/common/views';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { URI } from 'vs/base/common/uri';\nimport { coalesce, move } from 'vs/base/common/arrays';\nimport { isUndefined, isUndefinedOrNull } from 'vs/base/common/types';\nimport { isEqual } from 'vs/base/common/resources';\nimport { ThemeIcon } from 'vs/base/common/themables';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { localize } from 'vs/nls';\nimport { ILogger, ILoggerService } from 'vs/platform/log/common/log';\nimport { Action2, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { Categories } from 'vs/platform/action/common/actionCommonCategories';\nimport { IOutputService } from 'vs/workbench/services/output/common/output';\nimport { CounterSet } from 'vs/base/common/map';\n\nconst VIEWS_LOG_ID = 'views';\nconst VIEWS_LOG_NAME = localize('views log', \"Views\");\n\nregisterAction2(class extends Action2 {\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: '_workbench.output.showViewsLog',\n\t\t\ttitle: { value: 'Show Views Log', original: 'Show Views Log' },\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\tasync run(servicesAccessor: ServicesAccessor): Promise<void> {\n\t\tconst loggerService = servicesAccessor.get(ILoggerService);\n\t\tconst outputService = servicesAccessor.get(IOutputService);\n\t\tloggerService.setVisibility(VIEWS_LOG_ID, true);\n\t\toutputService.showChannel(VIEWS_LOG_ID);\n\t}\n});\n\nexport function getViewsStateStorageId(viewContainerStorageId: string): string { return `${viewContainerStorageId}.hidden`; }\n\ninterface IStoredWorkspaceViewState {\n\tcollapsed: boolean;\n\tisHidden: boolean;\n\tsize?: number;\n\torder?: number;\n}\n\ninterface IStoredGlobalViewState {\n\tid: string;\n\tisHidden: boolean;\n\torder?: number;\n}\n\ninterface IViewDescriptorState {\n\tvisibleGlobal: boolean | undefined;\n\tvisibleWorkspace: boolean | undefined;\n\tcollapsed: boolean | undefined;\n\tactive: boolean;\n\torder?: number;\n\tsize?: number;\n}\n\nclass ViewDescriptorsState extends Disposable {\n\n\tprivate readonly workspaceViewsStateStorageId: string;\n\tprivate readonly globalViewsStateStorageId: string;\n\tprivate readonly state: Map<string, IViewDescriptorState>;\n\n\tprivate _onDidChangeStoredState = this._register(new Emitter<{ id: string; visible: boolean }[]>());\n\treadonly onDidChangeStoredState = this._onDidChangeStoredState.event;\n\n\tprivate readonly logger: ILogger;\n\n\tconstructor(\n\t\tviewContainerStorageId: string,\n\t\tprivate readonly viewContainerName: string,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ILoggerService loggerService: ILoggerService,\n\t) {\n\t\tsuper();\n\n\t\tthis.logger = loggerService.createLogger(VIEWS_LOG_ID, { name: VIEWS_LOG_NAME, hidden: true });\n\n\t\tthis.globalViewsStateStorageId = getViewsStateStorageId(viewContainerStorageId);\n\t\tthis.workspaceViewsStateStorageId = viewContainerStorageId;\n\t\tthis._register(this.storageService.onDidChangeValue(StorageScope.PROFILE, this.globalViewsStateStorageId, this._register(new DisposableStore()))(() => this.onDidStorageChange()));\n\n\t\tthis.state = this.initialize();\n\n\t}\n\n\tset(id: string, state: IViewDescriptorState): void {\n\t\tthis.state.set(id, state);\n\t}\n\n\tget(id: string): IViewDescriptorState | undefined {\n\t\treturn this.state.get(id);\n\t}\n\n\tupdateState(viewDescriptors: ReadonlyArray<IViewDescriptor>): void {\n\t\tthis.updateWorkspaceState(viewDescriptors);\n\t\tthis.updateGlobalState(viewDescriptors);\n\t}\n\n\tprivate updateWorkspaceState(viewDescriptors: ReadonlyArray<IViewDescriptor>): void {\n\t\tconst storedViewsStates = this.getStoredWorkspaceState();\n\t\tfor (const viewDescriptor of viewDescriptors) {\n\t\t\tconst viewState = this.get(viewDescriptor.id);\n\t\t\tif (viewState) {\n\t\t\t\tstoredViewsStates[viewDescriptor.id] = {\n\t\t\t\t\tcollapsed: !!viewState.collapsed,\n\t\t\t\t\tisHidden: !viewState.visibleWorkspace,\n\t\t\t\t\tsize: viewState.size,\n\t\t\t\t\torder: viewDescriptor.workspace && viewState ? viewState.order : undefined\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(storedViewsStates).length > 0) {\n\t\t\tthis.storageService.store(this.workspaceViewsStateStorageId, JSON.stringify(storedViewsStates), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis.storageService.remove(this.workspaceViewsStateStorageId, StorageScope.WORKSPACE);\n\t\t}\n\t}\n\n\tprivate updateGlobalState(viewDescriptors: ReadonlyArray<IViewDescriptor>): void {\n\t\tconst storedGlobalState = this.getStoredGlobalState();\n\t\tfor (const viewDescriptor of viewDescriptors) {\n\t\t\tconst state = this.get(viewDescriptor.id);\n\t\t\tstoredGlobalState.set(viewDescriptor.id, {\n\t\t\t\tid: viewDescriptor.id,\n\t\t\t\tisHidden: state && viewDescriptor.canToggleVisibility ? !state.visibleGlobal : false,\n\t\t\t\torder: !viewDescriptor.workspace && state ? state.order : undefined\n\t\t\t});\n\t\t}\n\t\tthis.setStoredGlobalState(storedGlobalState);\n\t}\n\n\tprivate onDidStorageChange(): void {\n\t\tif (this.globalViewsStatesValue !== this.getStoredGlobalViewsStatesValue() /* This checks if current window changed the value or not */) {\n\t\t\tthis._globalViewsStatesValue = undefined;\n\t\t\tconst storedViewsVisibilityStates = this.getStoredGlobalState();\n\t\t\tconst storedWorkspaceViewsStates = this.getStoredWorkspaceState();\n\t\t\tconst changedStates: { id: string; visible: boolean }[] = [];\n\t\t\tfor (const [id, storedState] of storedViewsVisibilityStates) {\n\t\t\t\tconst state = this.get(id);\n\t\t\t\tif (state) {\n\t\t\t\t\tif (state.visibleGlobal !== !storedState.isHidden) {\n\t\t\t\t\t\tif (!storedState.isHidden) {\n\t\t\t\t\t\t\tthis.logger.info(`View visibility state changed: ${id} is now visible`, this.viewContainerName);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tchangedStates.push({ id, visible: !storedState.isHidden });\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst workspaceViewState = <IStoredWorkspaceViewState | undefined>storedWorkspaceViewsStates[id];\n\t\t\t\t\tthis.set(id, {\n\t\t\t\t\t\tactive: false,\n\t\t\t\t\t\tvisibleGlobal: !storedState.isHidden,\n\t\t\t\t\t\tvisibleWorkspace: isUndefined(workspaceViewState?.isHidden) ? undefined : !workspaceViewState?.isHidden,\n\t\t\t\t\t\tcollapsed: workspaceViewState?.collapsed,\n\t\t\t\t\t\torder: workspaceViewState?.order,\n\t\t\t\t\t\tsize: workspaceViewState?.size,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (changedStates.length) {\n\t\t\t\tthis._onDidChangeStoredState.fire(changedStates);\n\t\t\t\t// Update the in memory state after firing the event\n\t\t\t\t// so that the views can update their state accordingly\n\t\t\t\tfor (const changedState of changedStates) {\n\t\t\t\t\tconst state = this.get(changedState.id);\n\t\t\t\t\tif (state) {\n\t\t\t\t\t\tstate.visibleGlobal = changedState.visible;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate initialize(): Map<string, IViewDescriptorState> {\n\t\tconst viewStates = new Map<string, IViewDescriptorState>();\n\t\tconst workspaceViewsStates = this.getStoredWorkspaceState();\n\t\tfor (const id of Object.keys(workspaceViewsStates)) {\n\t\t\tconst workspaceViewState = workspaceViewsStates[id];\n\t\t\tviewStates.set(id, {\n\t\t\t\tactive: false,\n\t\t\t\tvisibleGlobal: undefined,\n\t\t\t\tvisibleWorkspace: isUndefined(workspaceViewState.isHidden) ? undefined : !workspaceViewState.isHidden,\n\t\t\t\tcollapsed: workspaceViewState.collapsed,\n\t\t\t\torder: workspaceViewState.order,\n\t\t\t\tsize: workspaceViewState.size,\n\t\t\t});\n\t\t}\n\n\t\t// Migrate to `viewletStateStorageId`\n\t\tconst value = this.storageService.get(this.globalViewsStateStorageId, StorageScope.WORKSPACE, '[]');\n\t\tconst { state: workspaceVisibilityStates } = this.parseStoredGlobalState(value);\n\t\tif (workspaceVisibilityStates.size > 0) {\n\t\t\tfor (const { id, isHidden } of workspaceVisibilityStates.values()) {\n\t\t\t\tconst viewState = viewStates.get(id);\n\t\t\t\t// Not migrated to `viewletStateStorageId`\n\t\t\t\tif (viewState) {\n\t\t\t\t\tif (isUndefined(viewState.visibleWorkspace)) {\n\t\t\t\t\t\tviewState.visibleWorkspace = !isHidden;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tviewStates.set(id, {\n\t\t\t\t\t\tactive: false,\n\t\t\t\t\t\tcollapsed: undefined,\n\t\t\t\t\t\tvisibleGlobal: undefined,\n\t\t\t\t\t\tvisibleWorkspace: !isHidden,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.storageService.remove(this.globalViewsStateStorageId, StorageScope.WORKSPACE);\n\t\t}\n\n\t\tconst { state, hasDuplicates } = this.parseStoredGlobalState(this.globalViewsStatesValue);\n\t\tif (hasDuplicates) {\n\t\t\tthis.setStoredGlobalState(state);\n\t\t}\n\t\tfor (const { id, isHidden, order } of state.values()) {\n\t\t\tconst viewState = viewStates.get(id);\n\t\t\tif (viewState) {\n\t\t\t\tviewState.visibleGlobal = !isHidden;\n\t\t\t\tif (!isUndefined(order)) {\n\t\t\t\t\tviewState.order = order;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tviewStates.set(id, {\n\t\t\t\t\tactive: false,\n\t\t\t\t\tvisibleGlobal: !isHidden,\n\t\t\t\t\torder,\n\t\t\t\t\tcollapsed: undefined,\n\t\t\t\t\tvisibleWorkspace: undefined,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn viewStates;\n\t}\n\n\tprivate getStoredWorkspaceState(): IStringDictionary<IStoredWorkspaceViewState> {\n\t\treturn JSON.parse(this.storageService.get(this.workspaceViewsStateStorageId, StorageScope.WORKSPACE, '{}'));\n\t}\n\n\tprivate getStoredGlobalState(): Map<string, IStoredGlobalViewState> {\n\t\treturn this.parseStoredGlobalState(this.globalViewsStatesValue).state;\n\t}\n\n\tprivate setStoredGlobalState(storedGlobalState: Map<string, IStoredGlobalViewState>): void {\n\t\tthis.globalViewsStatesValue = JSON.stringify([...storedGlobalState.values()]);\n\t}\n\n\tprivate parseStoredGlobalState(value: string): { state: Map<string, IStoredGlobalViewState>; hasDuplicates: boolean } {\n\t\tconst storedValue = <Array<string | IStoredGlobalViewState>>JSON.parse(value);\n\t\tlet hasDuplicates = false;\n\t\tconst state = storedValue.reduce((result, storedState) => {\n\t\t\tif (typeof storedState === 'string' /* migration */) {\n\t\t\t\thasDuplicates = hasDuplicates || result.has(storedState);\n\t\t\t\tresult.set(storedState, { id: storedState, isHidden: true });\n\t\t\t} else {\n\t\t\t\thasDuplicates = hasDuplicates || result.has(storedState.id);\n\t\t\t\tresult.set(storedState.id, storedState);\n\t\t\t}\n\t\t\treturn result;\n\t\t}, new Map<string, IStoredGlobalViewState>());\n\t\treturn { state, hasDuplicates };\n\t}\n\n\tprivate _globalViewsStatesValue: string | undefined;\n\tprivate get globalViewsStatesValue(): string {\n\t\tif (!this._globalViewsStatesValue) {\n\t\t\tthis._globalViewsStatesValue = this.getStoredGlobalViewsStatesValue();\n\t\t}\n\n\t\treturn this._globalViewsStatesValue;\n\t}\n\n\tprivate set globalViewsStatesValue(globalViewsStatesValue: string) {\n\t\tif (this.globalViewsStatesValue !== globalViewsStatesValue) {\n\t\t\tthis._globalViewsStatesValue = globalViewsStatesValue;\n\t\t\tthis.setStoredGlobalViewsStatesValue(globalViewsStatesValue);\n\t\t}\n\t}\n\n\tprivate getStoredGlobalViewsStatesValue(): string {\n\t\treturn this.storageService.get(this.globalViewsStateStorageId, StorageScope.PROFILE, '[]');\n\t}\n\n\tprivate setStoredGlobalViewsStatesValue(value: string): void {\n\t\tthis.storageService.store(this.globalViewsStateStorageId, value, StorageScope.PROFILE, StorageTarget.USER);\n\t}\n\n}\n\ninterface IViewDescriptorItem {\n\tviewDescriptor: IViewDescriptor;\n\tstate: IViewDescriptorState;\n}\n\nexport class ViewContainerModel extends Disposable implements IViewContainerModel {\n\n\tprivate readonly contextKeys = new CounterSet<string>();\n\tprivate viewDescriptorItems: IViewDescriptorItem[] = [];\n\tprivate viewDescriptorsState: ViewDescriptorsState;\n\n\t// Container Info\n\tprivate _title!: string;\n\tget title(): string { return this._title; }\n\n\tprivate _icon: URI | ThemeIcon | undefined;\n\tget icon(): URI | ThemeIcon | undefined { return this._icon; }\n\n\tprivate _keybindingId: string | undefined;\n\tget keybindingId(): string | undefined { return this._keybindingId; }\n\n\tprivate _onDidChangeContainerInfo = this._register(new Emitter<{ title?: boolean; icon?: boolean; keybindingId?: boolean }>());\n\treadonly onDidChangeContainerInfo = this._onDidChangeContainerInfo.event;\n\n\t// All View Descriptors\n\tget allViewDescriptors(): ReadonlyArray<IViewDescriptor> { return this.viewDescriptorItems.map(item => item.viewDescriptor); }\n\tprivate _onDidChangeAllViewDescriptors = this._register(new Emitter<{ added: ReadonlyArray<IViewDescriptor>; removed: ReadonlyArray<IViewDescriptor> }>());\n\treadonly onDidChangeAllViewDescriptors = this._onDidChangeAllViewDescriptors.event;\n\n\t// Active View Descriptors\n\tget activeViewDescriptors(): ReadonlyArray<IViewDescriptor> { return this.viewDescriptorItems.filter(item => item.state.active).map(item => item.viewDescriptor); }\n\tprivate _onDidChangeActiveViewDescriptors = this._register(new Emitter<{ added: ReadonlyArray<IViewDescriptor>; removed: ReadonlyArray<IViewDescriptor> }>());\n\treadonly onDidChangeActiveViewDescriptors = this._onDidChangeActiveViewDescriptors.event;\n\n\t// Visible View Descriptors\n\tget visibleViewDescriptors(): ReadonlyArray<IViewDescriptor> { return this.viewDescriptorItems.filter(item => this.isViewDescriptorVisible(item)).map(item => item.viewDescriptor); }\n\n\tprivate _onDidAddVisibleViewDescriptors = this._register(new Emitter<IAddedViewDescriptorRef[]>());\n\treadonly onDidAddVisibleViewDescriptors: Event<IAddedViewDescriptorRef[]> = this._onDidAddVisibleViewDescriptors.event;\n\n\tprivate _onDidRemoveVisibleViewDescriptors = this._register(new Emitter<IViewDescriptorRef[]>());\n\treadonly onDidRemoveVisibleViewDescriptors: Event<IViewDescriptorRef[]> = this._onDidRemoveVisibleViewDescriptors.event;\n\n\tprivate _onDidMoveVisibleViewDescriptors = this._register(new Emitter<{ from: IViewDescriptorRef; to: IViewDescriptorRef }>());\n\treadonly onDidMoveVisibleViewDescriptors: Event<{ from: IViewDescriptorRef; to: IViewDescriptorRef }> = this._onDidMoveVisibleViewDescriptors.event;\n\n\tprivate readonly logger: ILogger;\n\n\tconstructor(\n\t\treadonly viewContainer: ViewContainer,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@ILoggerService loggerService: ILoggerService,\n\t) {\n\t\tsuper();\n\n\t\tthis.logger = loggerService.createLogger(VIEWS_LOG_ID, { name: VIEWS_LOG_NAME, hidden: true });\n\n\t\tthis._register(Event.filter(contextKeyService.onDidChangeContext, e => e.affectsSome(this.contextKeys))(() => this.onDidChangeContext()));\n\t\tthis.viewDescriptorsState = this._register(instantiationService.createInstance(ViewDescriptorsState, viewContainer.storageId || `${viewContainer.id}.state`, typeof viewContainer.title === 'string' ? viewContainer.title : viewContainer.title.original));\n\t\tthis._register(this.viewDescriptorsState.onDidChangeStoredState(items => this.updateVisibility(items)));\n\n\t\tthis.updateContainerInfo();\n\t}\n\n\tprivate updateContainerInfo(): void {\n\t\t/* Use default container info if one of the visible view descriptors belongs to the current container by default */\n\t\tconst useDefaultContainerInfo = this.viewContainer.alwaysUseContainerInfo || this.visibleViewDescriptors.length === 0 || this.visibleViewDescriptors.some(v => Registry.as<IViewsRegistry>(ViewExtensions.ViewsRegistry).getViewContainer(v.id) === this.viewContainer);\n\t\tconst title = useDefaultContainerInfo ? (typeof this.viewContainer.title === 'string' ? this.viewContainer.title : this.viewContainer.title.value) : this.visibleViewDescriptors[0]?.containerTitle || this.visibleViewDescriptors[0]?.name || '';\n\t\tlet titleChanged: boolean = false;\n\t\tif (this._title !== title) {\n\t\t\tthis._title = title;\n\t\t\ttitleChanged = true;\n\t\t}\n\n\t\tconst icon = useDefaultContainerInfo ? this.viewContainer.icon : this.visibleViewDescriptors[0]?.containerIcon || defaultViewIcon;\n\t\tlet iconChanged: boolean = false;\n\t\tif (!this.isEqualIcon(icon)) {\n\t\t\tthis._icon = icon;\n\t\t\ticonChanged = true;\n\t\t}\n\n\t\tconst keybindingId = this.viewContainer.openCommandActionDescriptor?.id ?? this.activeViewDescriptors.find(v => v.openCommandActionDescriptor)?.openCommandActionDescriptor?.id;\n\t\tlet keybindingIdChanged: boolean = false;\n\t\tif (this._keybindingId !== keybindingId) {\n\t\t\tthis._keybindingId = keybindingId;\n\t\t\tkeybindingIdChanged = true;\n\t\t}\n\n\t\tif (titleChanged || iconChanged || keybindingIdChanged) {\n\t\t\tthis._onDidChangeContainerInfo.fire({ title: titleChanged, icon: iconChanged, keybindingId: keybindingIdChanged });\n\t\t}\n\t}\n\n\tprivate isEqualIcon(icon: URI | ThemeIcon | undefined): boolean {\n\t\tif (URI.isUri(icon)) {\n\t\t\treturn URI.isUri(this._icon) && isEqual(icon, this._icon);\n\t\t} else if (ThemeIcon.isThemeIcon(icon)) {\n\t\t\treturn ThemeIcon.isThemeIcon(this._icon) && ThemeIcon.isEqual(icon, this._icon);\n\t\t}\n\t\treturn icon === this._icon;\n\t}\n\n\tisVisible(id: string): boolean {\n\t\tconst viewDescriptorItem = this.viewDescriptorItems.find(v => v.viewDescriptor.id === id);\n\t\tif (!viewDescriptorItem) {\n\t\t\tthrow new Error(`Unknown view ${id}`);\n\t\t}\n\t\treturn this.isViewDescriptorVisible(viewDescriptorItem);\n\t}\n\n\tsetVisible(id: string, visible: boolean): void {\n\t\tthis.updateVisibility([{ id, visible }]);\n\t}\n\n\tprivate updateVisibility(viewDescriptors: { id: string; visible: boolean }[]): void {\n\t\t// First: Update and remove the view descriptors which are asked to be hidden\n\t\tconst viewDescriptorItemsToHide = coalesce(viewDescriptors.filter(({ visible }) => !visible)\n\t\t\t.map(({ id }) => this.findAndIgnoreIfNotFound(id)));\n\t\tconst removed: IViewDescriptorRef[] = [];\n\t\tfor (const { viewDescriptorItem, visibleIndex } of viewDescriptorItemsToHide) {\n\t\t\tif (this.updateViewDescriptorItemVisibility(viewDescriptorItem, false)) {\n\t\t\t\tremoved.push({ viewDescriptor: viewDescriptorItem.viewDescriptor, index: visibleIndex });\n\t\t\t}\n\t\t}\n\t\tif (removed.length) {\n\t\t\tthis.broadCastRemovedVisibleViewDescriptors(removed);\n\t\t}\n\n\t\t// Second: Update and add the view descriptors which are asked to be shown\n\t\tconst added: IAddedViewDescriptorRef[] = [];\n\t\tfor (const { id, visible } of viewDescriptors) {\n\t\t\tif (!visible) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst foundViewDescriptor = this.findAndIgnoreIfNotFound(id);\n\t\t\tif (!foundViewDescriptor) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst { viewDescriptorItem, visibleIndex } = foundViewDescriptor;\n\t\t\tif (this.updateViewDescriptorItemVisibility(viewDescriptorItem, true)) {\n\t\t\t\tadded.push({ index: visibleIndex, viewDescriptor: viewDescriptorItem.viewDescriptor, size: viewDescriptorItem.state.size, collapsed: !!viewDescriptorItem.state.collapsed });\n\t\t\t}\n\t\t}\n\t\tif (added.length) {\n\t\t\tthis.broadCastAddedVisibleViewDescriptors(added);\n\t\t}\n\t}\n\n\tprivate updateViewDescriptorItemVisibility(viewDescriptorItem: IViewDescriptorItem, visible: boolean): boolean {\n\t\tif (!viewDescriptorItem.viewDescriptor.canToggleVisibility) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.isViewDescriptorVisibleWhenActive(viewDescriptorItem) === visible) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// update visibility\n\t\tif (viewDescriptorItem.viewDescriptor.workspace) {\n\t\t\tviewDescriptorItem.state.visibleWorkspace = visible;\n\t\t} else {\n\t\t\tviewDescriptorItem.state.visibleGlobal = visible;\n\t\t\tif (visible) {\n\t\t\t\tthis.logger.info(`Showing view ${viewDescriptorItem.viewDescriptor.id} in the container ${this.viewContainer.id}`);\n\t\t\t}\n\t\t}\n\n\t\t// return `true` only if visibility is changed\n\t\treturn this.isViewDescriptorVisible(viewDescriptorItem) === visible;\n\t}\n\n\tisCollapsed(id: string): boolean {\n\t\treturn !!this.find(id).viewDescriptorItem.state.collapsed;\n\t}\n\n\tsetCollapsed(id: string, collapsed: boolean): void {\n\t\tconst { viewDescriptorItem } = this.find(id);\n\t\tif (viewDescriptorItem.state.collapsed !== collapsed) {\n\t\t\tviewDescriptorItem.state.collapsed = collapsed;\n\t\t}\n\t\tthis.viewDescriptorsState.updateState(this.allViewDescriptors);\n\t}\n\n\tgetSize(id: string): number | undefined {\n\t\treturn this.find(id).viewDescriptorItem.state.size;\n\t}\n\n\tsetSizes(newSizes: readonly { id: string; size: number }[]): void {\n\t\tfor (const { id, size } of newSizes) {\n\t\t\tconst { viewDescriptorItem } = this.find(id);\n\t\t\tif (viewDescriptorItem.state.size !== size) {\n\t\t\t\tviewDescriptorItem.state.size = size;\n\t\t\t}\n\t\t}\n\t\tthis.viewDescriptorsState.updateState(this.allViewDescriptors);\n\t}\n\n\tmove(from: string, to: string): void {\n\t\tconst fromIndex = this.viewDescriptorItems.findIndex(v => v.viewDescriptor.id === from);\n\t\tconst toIndex = this.viewDescriptorItems.findIndex(v => v.viewDescriptor.id === to);\n\n\t\tconst fromViewDescriptor = this.viewDescriptorItems[fromIndex];\n\t\tconst toViewDescriptor = this.viewDescriptorItems[toIndex];\n\n\t\tmove(this.viewDescriptorItems, fromIndex, toIndex);\n\n\t\tfor (let index = 0; index < this.viewDescriptorItems.length; index++) {\n\t\t\tthis.viewDescriptorItems[index].state.order = index;\n\t\t}\n\n\t\tthis.broadCastMovedViewDescriptors({ index: fromIndex, viewDescriptor: fromViewDescriptor.viewDescriptor }, { index: toIndex, viewDescriptor: toViewDescriptor.viewDescriptor });\n\t}\n\n\tadd(addedViewDescriptorStates: IAddedViewDescriptorState[]): void {\n\t\tconst addedItems: IViewDescriptorItem[] = [];\n\t\tfor (const addedViewDescriptorState of addedViewDescriptorStates) {\n\t\t\tconst viewDescriptor = addedViewDescriptorState.viewDescriptor;\n\n\t\t\tif (viewDescriptor.when) {\n\t\t\t\tfor (const key of viewDescriptor.when.keys()) {\n\t\t\t\t\tthis.contextKeys.add(key);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet state = this.viewDescriptorsState.get(viewDescriptor.id);\n\t\t\tif (state) {\n\t\t\t\t// set defaults if not set\n\t\t\t\tif (viewDescriptor.workspace) {\n\t\t\t\t\tstate.visibleWorkspace = isUndefinedOrNull(addedViewDescriptorState.visible) ? (isUndefinedOrNull(state.visibleWorkspace) ? !viewDescriptor.hideByDefault : state.visibleWorkspace) : addedViewDescriptorState.visible;\n\t\t\t\t} else {\n\t\t\t\t\tconst isVisible = state.visibleGlobal;\n\t\t\t\t\tstate.visibleGlobal = isUndefinedOrNull(addedViewDescriptorState.visible) ? (isUndefinedOrNull(state.visibleGlobal) ? !viewDescriptor.hideByDefault : state.visibleGlobal) : addedViewDescriptorState.visible;\n\t\t\t\t\tif (state.visibleGlobal && !isVisible) {\n\t\t\t\t\t\tthis.logger.info(`Added view ${viewDescriptor.id} in the container ${this.viewContainer.id} and showing it.`, `${isVisible}`, `${viewDescriptor.hideByDefault}`, `${addedViewDescriptorState.visible}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tstate.collapsed = isUndefinedOrNull(addedViewDescriptorState.collapsed) ? (isUndefinedOrNull(state.collapsed) ? !!viewDescriptor.collapsed : state.collapsed) : addedViewDescriptorState.collapsed;\n\t\t\t} else {\n\t\t\t\tstate = {\n\t\t\t\t\tactive: false,\n\t\t\t\t\tvisibleGlobal: isUndefinedOrNull(addedViewDescriptorState.visible) ? !viewDescriptor.hideByDefault : addedViewDescriptorState.visible,\n\t\t\t\t\tvisibleWorkspace: isUndefinedOrNull(addedViewDescriptorState.visible) ? !viewDescriptor.hideByDefault : addedViewDescriptorState.visible,\n\t\t\t\t\tcollapsed: isUndefinedOrNull(addedViewDescriptorState.collapsed) ? !!viewDescriptor.collapsed : addedViewDescriptorState.collapsed,\n\t\t\t\t};\n\t\t\t}\n\t\t\tthis.viewDescriptorsState.set(viewDescriptor.id, state);\n\t\t\tstate.active = this.contextKeyService.contextMatchesRules(viewDescriptor.when);\n\t\t\taddedItems.push({ viewDescriptor, state });\n\t\t}\n\t\tthis.viewDescriptorItems.push(...addedItems);\n\t\tthis.viewDescriptorItems.sort(this.compareViewDescriptors.bind(this));\n\t\tthis._onDidChangeAllViewDescriptors.fire({ added: addedItems.map(({ viewDescriptor }) => viewDescriptor), removed: [] });\n\n\t\tconst addedActiveItems: { viewDescriptorItem: IViewDescriptorItem; visible: boolean }[] = [];\n\t\tfor (const viewDescriptorItem of addedItems) {\n\t\t\tif (viewDescriptorItem.state.active) {\n\t\t\t\taddedActiveItems.push({ viewDescriptorItem, visible: this.isViewDescriptorVisible(viewDescriptorItem) });\n\t\t\t}\n\t\t}\n\t\tif (addedActiveItems.length) {\n\t\t\tthis._onDidChangeActiveViewDescriptors.fire(({ added: addedActiveItems.map(({ viewDescriptorItem }) => viewDescriptorItem.viewDescriptor), removed: [] }));\n\t\t}\n\n\t\tconst addedVisibleDescriptors: IAddedViewDescriptorRef[] = [];\n\t\tfor (const { viewDescriptorItem, visible } of addedActiveItems) {\n\t\t\tif (visible && this.isViewDescriptorVisible(viewDescriptorItem)) {\n\t\t\t\tconst { visibleIndex } = this.find(viewDescriptorItem.viewDescriptor.id);\n\t\t\t\taddedVisibleDescriptors.push({ index: visibleIndex, viewDescriptor: viewDescriptorItem.viewDescriptor, size: viewDescriptorItem.state.size, collapsed: !!viewDescriptorItem.state.collapsed });\n\t\t\t}\n\t\t}\n\t\tthis.broadCastAddedVisibleViewDescriptors(addedVisibleDescriptors);\n\t}\n\n\tremove(viewDescriptors: IViewDescriptor[]): void {\n\t\tconst removed: IViewDescriptor[] = [];\n\t\tconst removedItems: IViewDescriptorItem[] = [];\n\t\tconst removedActiveDescriptors: IViewDescriptor[] = [];\n\t\tconst removedVisibleDescriptors: IViewDescriptorRef[] = [];\n\n\t\tfor (const viewDescriptor of viewDescriptors) {\n\t\t\tif (viewDescriptor.when) {\n\t\t\t\tfor (const key of viewDescriptor.when.keys()) {\n\t\t\t\t\tthis.contextKeys.delete(key);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst index = this.viewDescriptorItems.findIndex(i => i.viewDescriptor.id === viewDescriptor.id);\n\t\t\tif (index !== -1) {\n\t\t\t\tremoved.push(viewDescriptor);\n\t\t\t\tconst viewDescriptorItem = this.viewDescriptorItems[index];\n\t\t\t\tif (viewDescriptorItem.state.active) {\n\t\t\t\t\tremovedActiveDescriptors.push(viewDescriptorItem.viewDescriptor);\n\t\t\t\t}\n\t\t\t\tif (this.isViewDescriptorVisible(viewDescriptorItem)) {\n\t\t\t\t\tconst { visibleIndex } = this.find(viewDescriptorItem.viewDescriptor.id);\n\t\t\t\t\tremovedVisibleDescriptors.push({ index: visibleIndex, viewDescriptor: viewDescriptorItem.viewDescriptor });\n\t\t\t\t}\n\t\t\t\tremovedItems.push(viewDescriptorItem);\n\t\t\t}\n\t\t}\n\n\t\t// update state\n\t\tremovedItems.forEach(item => this.viewDescriptorItems.splice(this.viewDescriptorItems.indexOf(item), 1));\n\n\t\tthis.broadCastRemovedVisibleViewDescriptors(removedVisibleDescriptors);\n\t\tif (removedActiveDescriptors.length) {\n\t\t\tthis._onDidChangeActiveViewDescriptors.fire(({ added: [], removed: removedActiveDescriptors }));\n\t\t}\n\t\tif (removed.length) {\n\t\t\tthis._onDidChangeAllViewDescriptors.fire({ added: [], removed });\n\t\t}\n\t}\n\n\tprivate onDidChangeContext(): void {\n\t\tconst addedActiveItems: { item: IViewDescriptorItem; visibleWhenActive: boolean }[] = [];\n\t\tconst removedActiveItems: IViewDescriptorItem[] = [];\n\n\t\tfor (const item of this.viewDescriptorItems) {\n\t\t\tconst wasActive = item.state.active;\n\t\t\tconst isActive = this.contextKeyService.contextMatchesRules(item.viewDescriptor.when);\n\t\t\tif (wasActive !== isActive) {\n\t\t\t\tif (isActive) {\n\t\t\t\t\taddedActiveItems.push({ item, visibleWhenActive: this.isViewDescriptorVisibleWhenActive(item) });\n\t\t\t\t} else {\n\t\t\t\t\tremovedActiveItems.push(item);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst removedVisibleDescriptors: IViewDescriptorRef[] = [];\n\t\tfor (const item of removedActiveItems) {\n\t\t\tif (this.isViewDescriptorVisible(item)) {\n\t\t\t\tconst { visibleIndex } = this.find(item.viewDescriptor.id);\n\t\t\t\tremovedVisibleDescriptors.push({ index: visibleIndex, viewDescriptor: item.viewDescriptor });\n\t\t\t}\n\t\t}\n\n\t\t// Update the State\n\t\tremovedActiveItems.forEach(item => item.state.active = false);\n\t\taddedActiveItems.forEach(({ item }) => item.state.active = true);\n\n\t\tthis.broadCastRemovedVisibleViewDescriptors(removedVisibleDescriptors);\n\n\t\tif (addedActiveItems.length || removedActiveItems.length) {\n\t\t\tthis._onDidChangeActiveViewDescriptors.fire(({ added: addedActiveItems.map(({ item }) => item.viewDescriptor), removed: removedActiveItems.map(item => item.viewDescriptor) }));\n\t\t}\n\n\t\tconst addedVisibleDescriptors: IAddedViewDescriptorRef[] = [];\n\t\tfor (const { item, visibleWhenActive } of addedActiveItems) {\n\t\t\tif (visibleWhenActive && this.isViewDescriptorVisible(item)) {\n\t\t\t\tconst { visibleIndex } = this.find(item.viewDescriptor.id);\n\t\t\t\taddedVisibleDescriptors.push({ index: visibleIndex, viewDescriptor: item.viewDescriptor, size: item.state.size, collapsed: !!item.state.collapsed });\n\t\t\t}\n\t\t}\n\t\tthis.broadCastAddedVisibleViewDescriptors(addedVisibleDescriptors);\n\t}\n\n\tprivate broadCastAddedVisibleViewDescriptors(added: IAddedViewDescriptorRef[]): void {\n\t\tif (added.length) {\n\t\t\tthis._onDidAddVisibleViewDescriptors.fire(added.sort((a, b) => a.index - b.index));\n\t\t\tthis.updateState(`Added views:${added.map(v => v.viewDescriptor.id).join(',')} in ${this.viewContainer.id}`);\n\t\t}\n\t}\n\n\tprivate broadCastRemovedVisibleViewDescriptors(removed: IViewDescriptorRef[]): void {\n\t\tif (removed.length) {\n\t\t\tthis._onDidRemoveVisibleViewDescriptors.fire(removed.sort((a, b) => b.index - a.index));\n\t\t\tthis.updateState(`Removed views:${removed.map(v => v.viewDescriptor.id).join(',')} from ${this.viewContainer.id}`);\n\t\t}\n\t}\n\n\tprivate broadCastMovedViewDescriptors(from: IViewDescriptorRef, to: IViewDescriptorRef): void {\n\t\tthis._onDidMoveVisibleViewDescriptors.fire({ from, to });\n\t\tthis.updateState(`Moved view ${from.viewDescriptor.id} to ${to.viewDescriptor.id} in ${this.viewContainer.id}`);\n\t}\n\n\tprivate updateState(reason: string): void {\n\t\tthis.logger.info(reason);\n\t\tthis.viewDescriptorsState.updateState(this.allViewDescriptors);\n\t\tthis.updateContainerInfo();\n\t}\n\n\tprivate isViewDescriptorVisible(viewDescriptorItem: IViewDescriptorItem): boolean {\n\t\tif (!viewDescriptorItem.state.active) {\n\t\t\treturn false;\n\t\t}\n\t\treturn this.isViewDescriptorVisibleWhenActive(viewDescriptorItem);\n\t}\n\n\tprivate isViewDescriptorVisibleWhenActive(viewDescriptorItem: IViewDescriptorItem): boolean {\n\t\tif (viewDescriptorItem.viewDescriptor.workspace) {\n\t\t\treturn !!viewDescriptorItem.state.visibleWorkspace;\n\t\t}\n\t\treturn !!viewDescriptorItem.state.visibleGlobal;\n\t}\n\n\tprivate find(id: string): { index: number; visibleIndex: number; viewDescriptorItem: IViewDescriptorItem } {\n\t\tconst result = this.findAndIgnoreIfNotFound(id);\n\t\tif (result) {\n\t\t\treturn result;\n\t\t}\n\t\tthrow new Error(`view descriptor ${id} not found`);\n\t}\n\n\tprivate findAndIgnoreIfNotFound(id: string): { index: number; visibleIndex: number; viewDescriptorItem: IViewDescriptorItem } | undefined {\n\t\tfor (let i = 0, visibleIndex = 0; i < this.viewDescriptorItems.length; i++) {\n\t\t\tconst viewDescriptorItem = this.viewDescriptorItems[i];\n\t\t\tif (viewDescriptorItem.viewDescriptor.id === id) {\n\t\t\t\treturn { index: i, visibleIndex, viewDescriptorItem: viewDescriptorItem };\n\t\t\t}\n\t\t\tif (this.isViewDescriptorVisible(viewDescriptorItem)) {\n\t\t\t\tvisibleIndex++;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate compareViewDescriptors(a: IViewDescriptorItem, b: IViewDescriptorItem): number {\n\t\tif (a.viewDescriptor.id === b.viewDescriptor.id) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn (this.getViewOrder(a) - this.getViewOrder(b)) || this.getGroupOrderResult(a.viewDescriptor, b.viewDescriptor);\n\t}\n\n\tprivate getViewOrder(viewDescriptorItem: IViewDescriptorItem): number {\n\t\tconst viewOrder = typeof viewDescriptorItem.state.order === 'number' ? viewDescriptorItem.state.order : viewDescriptorItem.viewDescriptor.order;\n\t\treturn typeof viewOrder === 'number' ? viewOrder : Number.MAX_VALUE;\n\t}\n\n\tprivate getGroupOrderResult(a: IViewDescriptor, b: IViewDescriptor) {\n\t\tif (!a.group || !b.group) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tif (a.group === b.group) {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn a.group < b.group ? -1 : 1;\n\t}\n}\n"]}