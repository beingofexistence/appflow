{"version":3,"sources":["vs/workbench/services/views/browser/viewDescriptorService.ts"],"names":[],"mappings":"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","file":"viewDescriptorService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ViewContainerLocation, IViewDescriptorService, ViewContainer, IViewsRegistry, IViewContainersRegistry, IViewDescriptor, Extensions as ViewExtensions, ViewVisibilityState, defaultViewIcon, ViewContainerLocationToString } from 'vs/workbench/common/views';\nimport { IContextKey, RawContextKey, IContextKeyService, ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { toDisposable, DisposableStore, Disposable, IDisposable, DisposableMap } from 'vs/base/common/lifecycle';\nimport { ViewPaneContainer, ViewPaneContainerAction, ViewsSubMenu } from 'vs/workbench/browser/parts/views/viewPaneContainer';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { getViewsStateStorageId, ViewContainerModel } from 'vs/workbench/services/views/common/viewContainerModel';\nimport { registerAction2, Action2, MenuId } from 'vs/platform/actions/common/actions';\nimport { localize } from 'vs/nls';\nimport { IStringDictionary } from 'vs/base/common/collections';\n\ninterface IViewsCustomizations {\n\tviewContainerLocations: IStringDictionary<ViewContainerLocation>;\n\tviewLocations: IStringDictionary<string>;\n\tviewContainerBadgeEnablementStates: IStringDictionary<boolean>;\n}\n\nfunction getViewContainerStorageId(viewContainerId: string): string { return `${viewContainerId}.state`; }\n\nexport class ViewDescriptorService extends Disposable implements IViewDescriptorService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static readonly VIEWS_CUSTOMIZATIONS = 'views.customizations';\n\tprivate static readonly COMMON_CONTAINER_ID_PREFIX = 'workbench.views.service';\n\n\tprivate readonly _onDidChangeContainer: Emitter<{ views: IViewDescriptor[]; from: ViewContainer; to: ViewContainer }> = this._register(new Emitter<{ views: IViewDescriptor[]; from: ViewContainer; to: ViewContainer }>());\n\treadonly onDidChangeContainer: Event<{ views: IViewDescriptor[]; from: ViewContainer; to: ViewContainer }> = this._onDidChangeContainer.event;\n\n\tprivate readonly _onDidChangeLocation: Emitter<{ views: IViewDescriptor[]; from: ViewContainerLocation; to: ViewContainerLocation }> = this._register(new Emitter<{ views: IViewDescriptor[]; from: ViewContainerLocation; to: ViewContainerLocation }>());\n\treadonly onDidChangeLocation: Event<{ views: IViewDescriptor[]; from: ViewContainerLocation; to: ViewContainerLocation }> = this._onDidChangeLocation.event;\n\n\tprivate readonly _onDidChangeContainerLocation: Emitter<{ viewContainer: ViewContainer; from: ViewContainerLocation; to: ViewContainerLocation }> = this._register(new Emitter<{ viewContainer: ViewContainer; from: ViewContainerLocation; to: ViewContainerLocation }>());\n\treadonly onDidChangeContainerLocation: Event<{ viewContainer: ViewContainer; from: ViewContainerLocation; to: ViewContainerLocation }> = this._onDidChangeContainerLocation.event;\n\n\tprivate readonly viewContainerModels = this._register(new DisposableMap<ViewContainer, { viewContainerModel: ViewContainerModel; disposables: DisposableStore } & IDisposable>());\n\tprivate readonly viewsVisibilityActionDisposables = this._register(new DisposableMap<ViewContainer, IDisposable>());\n\tprivate readonly activeViewContextKeys: Map<string, IContextKey<boolean>>;\n\tprivate readonly movableViewContextKeys: Map<string, IContextKey<boolean>>;\n\tprivate readonly defaultViewLocationContextKeys: Map<string, IContextKey<boolean>>;\n\tprivate readonly defaultViewContainerLocationContextKeys: Map<string, IContextKey<boolean>>;\n\n\tprivate readonly viewsRegistry: IViewsRegistry;\n\tprivate readonly viewContainersRegistry: IViewContainersRegistry;\n\n\tprivate viewContainersCustomLocations: Map<string, ViewContainerLocation>;\n\tprivate viewDescriptorsCustomLocations: Map<string, string>;\n\tprivate viewContainerBadgeEnablementStates: Map<string, boolean>;\n\n\tprivate readonly _onDidChangeViewContainers = this._register(new Emitter<{ added: ReadonlyArray<{ container: ViewContainer; location: ViewContainerLocation }>; removed: ReadonlyArray<{ container: ViewContainer; location: ViewContainerLocation }> }>());\n\treadonly onDidChangeViewContainers = this._onDidChangeViewContainers.event;\n\tget viewContainers(): ReadonlyArray<ViewContainer> { return this.viewContainersRegistry.all; }\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t) {\n\t\tsuper();\n\n\t\tthis.activeViewContextKeys = new Map<string, IContextKey<boolean>>();\n\t\tthis.movableViewContextKeys = new Map<string, IContextKey<boolean>>();\n\t\tthis.defaultViewLocationContextKeys = new Map<string, IContextKey<boolean>>();\n\t\tthis.defaultViewContainerLocationContextKeys = new Map<string, IContextKey<boolean>>();\n\n\t\tthis.viewContainersRegistry = Registry.as<IViewContainersRegistry>(ViewExtensions.ViewContainersRegistry);\n\t\tthis.viewsRegistry = Registry.as<IViewsRegistry>(ViewExtensions.ViewsRegistry);\n\n\t\tthis.migrateToViewsCustomizationsStorage();\n\t\tthis.viewContainersCustomLocations = new Map<string, ViewContainerLocation>(Object.entries(this.viewCustomizations.viewContainerLocations));\n\t\tthis.viewDescriptorsCustomLocations = new Map<string, string>(Object.entries(this.viewCustomizations.viewLocations));\n\t\tthis.viewContainerBadgeEnablementStates = new Map<string, boolean>(Object.entries(this.viewCustomizations.viewContainerBadgeEnablementStates));\n\n\t\t// Register all containers that were registered before this ctor\n\t\tthis.viewContainers.forEach(viewContainer => this.onDidRegisterViewContainer(viewContainer));\n\n\t\tthis._register(this.viewsRegistry.onViewsRegistered(views => this.onDidRegisterViews(views)));\n\t\tthis._register(this.viewsRegistry.onViewsDeregistered(({ views, viewContainer }) => this.onDidDeregisterViews(views, viewContainer)));\n\n\t\tthis._register(this.viewsRegistry.onDidChangeContainer(({ views, from, to }) => this.onDidChangeDefaultContainer(views, from, to)));\n\n\t\tthis._register(this.viewContainersRegistry.onDidRegister(({ viewContainer }) => {\n\t\t\tthis.onDidRegisterViewContainer(viewContainer);\n\t\t\tthis._onDidChangeViewContainers.fire({ added: [{ container: viewContainer, location: this.getViewContainerLocation(viewContainer) }], removed: [] });\n\t\t}));\n\n\t\tthis._register(this.viewContainersRegistry.onDidDeregister(({ viewContainer }) => {\n\t\t\tthis.onDidDeregisterViewContainer(viewContainer);\n\t\t\tthis._onDidChangeViewContainers.fire({ removed: [{ container: viewContainer, location: this.getViewContainerLocation(viewContainer) }], added: [] });\n\t\t}));\n\n\t\tthis._register(this.storageService.onDidChangeValue(StorageScope.PROFILE, ViewDescriptorService.VIEWS_CUSTOMIZATIONS, this._register(new DisposableStore()))(() => this.onDidStorageChange()));\n\n\t\tthis.extensionService.whenInstalledExtensionsRegistered().then(() => this.whenExtensionsRegistered());\n\n\t}\n\n\tprivate migrateToViewsCustomizationsStorage(): void {\n\t\tif (this.storageService.get(ViewDescriptorService.VIEWS_CUSTOMIZATIONS, StorageScope.PROFILE)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewContainerLocationsValue = this.storageService.get('views.cachedViewContainerLocations', StorageScope.PROFILE);\n\t\tconst viewDescriptorLocationsValue = this.storageService.get('views.cachedViewPositions', StorageScope.PROFILE);\n\t\tif (!viewContainerLocationsValue && !viewDescriptorLocationsValue) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewContainerLocations: [string, ViewContainerLocation][] = viewContainerLocationsValue ? JSON.parse(viewContainerLocationsValue) : [];\n\t\tconst viewDescriptorLocations: [string, { containerId: string }][] = viewDescriptorLocationsValue ? JSON.parse(viewDescriptorLocationsValue) : [];\n\t\tconst viewsCustomizations: IViewsCustomizations = {\n\t\t\tviewContainerLocations: viewContainerLocations.reduce<IStringDictionary<ViewContainerLocation>>((result, [id, location]) => { result[id] = location; return result; }, {}),\n\t\t\tviewLocations: viewDescriptorLocations.reduce<IStringDictionary<string>>((result, [id, { containerId }]) => { result[id] = containerId; return result; }, {}),\n\t\t\tviewContainerBadgeEnablementStates: {}\n\t\t};\n\t\tthis.storageService.store(ViewDescriptorService.VIEWS_CUSTOMIZATIONS, JSON.stringify(viewsCustomizations), StorageScope.PROFILE, StorageTarget.USER);\n\t\tthis.storageService.remove('views.cachedViewContainerLocations', StorageScope.PROFILE);\n\t\tthis.storageService.remove('views.cachedViewPositions', StorageScope.PROFILE);\n\t}\n\n\tprivate registerGroupedViews(groupedViews: Map<string, IViewDescriptor[]>): void {\n\t\tfor (const [containerId, views] of groupedViews.entries()) {\n\t\t\tconst viewContainer = this.viewContainersRegistry.get(containerId);\n\n\t\t\t// The container has not been registered yet\n\t\t\tif (!viewContainer || !this.viewContainerModels.has(viewContainer)) {\n\t\t\t\t// Register if the container is a genarated container\n\t\t\t\tif (this.isGeneratedContainerId(containerId)) {\n\t\t\t\t\tconst viewContainerLocation = this.viewContainersCustomLocations.get(containerId);\n\t\t\t\t\tif (viewContainerLocation !== undefined) {\n\t\t\t\t\t\tthis.registerGeneratedViewContainer(viewContainerLocation, containerId);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Registration of the container handles registration of its views\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Filter out views that have already been added to the view container model\n\t\t\t// This is needed when statically-registered views are moved to\n\t\t\t// other statically registered containers as they will both try to add on startup\n\t\t\tconst viewsToAdd = views.filter(view => this.getViewContainerModel(viewContainer).allViewDescriptors.filter(vd => vd.id === view.id).length === 0);\n\t\t\tthis.addViews(viewContainer, viewsToAdd);\n\t\t}\n\t}\n\n\tprivate deregisterGroupedViews(groupedViews: Map<string, IViewDescriptor[]>): void {\n\t\tfor (const [viewContainerId, views] of groupedViews.entries()) {\n\t\t\tconst viewContainer = this.viewContainersRegistry.get(viewContainerId);\n\n\t\t\t// The container has not been registered yet\n\t\t\tif (!viewContainer || !this.viewContainerModels.has(viewContainer)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis.removeViews(viewContainer, views);\n\t\t}\n\t}\n\n\tprivate moveOrphanViewsToDefaultLocation(): void {\n\t\tfor (const [viewId, containerId] of this.viewDescriptorsCustomLocations.entries()) {\n\t\t\t// check if the view container exists\n\t\t\tif (this.viewContainersRegistry.get(containerId)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// check if view has been registered to default location\n\t\t\tconst viewContainer = this.viewsRegistry.getViewContainer(viewId);\n\t\t\tconst viewDescriptor = this.getViewDescriptorById(viewId);\n\t\t\tif (viewContainer && viewDescriptor) {\n\t\t\t\tthis.addViews(viewContainer, [viewDescriptor]);\n\t\t\t}\n\t\t}\n\t}\n\n\twhenExtensionsRegistered(): void {\n\n\t\t// Handle those views whose custom parent view container does not exist anymore\n\t\t// May be the extension contributing this view container is no longer installed\n\t\t// Or the parent view container is generated and no longer available.\n\t\tthis.moveOrphanViewsToDefaultLocation();\n\n\t\t// Clean up empty generated view containers\n\t\tfor (const viewContainerId of [...this.viewContainersCustomLocations.keys()]) {\n\t\t\tthis.cleanUpGeneratedViewContainer(viewContainerId);\n\t\t}\n\n\t\t// Save updated view customizations after cleanup\n\t\tthis.saveViewCustomizations();\n\n\t\t// Register visibility actions for all views\n\t\tthis.registerViewsVisibilityActions();\n\t}\n\n\tprivate onDidRegisterViews(views: { views: IViewDescriptor[]; viewContainer: ViewContainer }[]): void {\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tviews.forEach(({ views, viewContainer }) => {\n\t\t\t\t// When views are registered, we need to regroup them based on the customizations\n\t\t\t\tconst regroupedViews = this.regroupViews(viewContainer.id, views);\n\n\t\t\t\t// Once they are grouped, try registering them which occurs\n\t\t\t\t// if the container has already been registered within this service\n\t\t\t\t// or we can generate the container from the source view id\n\t\t\t\tthis.registerGroupedViews(regroupedViews);\n\n\t\t\t\tviews.forEach(viewDescriptor => this.getOrCreateMovableViewContextKey(viewDescriptor).set(!!viewDescriptor.canMoveView));\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate isGeneratedContainerId(id: string): boolean {\n\t\treturn id.startsWith(ViewDescriptorService.COMMON_CONTAINER_ID_PREFIX);\n\t}\n\n\tprivate onDidDeregisterViews(views: IViewDescriptor[], viewContainer: ViewContainer): void {\n\t\t// When views are registered, we need to regroup them based on the customizations\n\t\tconst regroupedViews = this.regroupViews(viewContainer.id, views);\n\t\tthis.deregisterGroupedViews(regroupedViews);\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tviews.forEach(viewDescriptor => this.getOrCreateMovableViewContextKey(viewDescriptor).set(false));\n\t\t});\n\t}\n\n\tprivate regroupViews(containerId: string, views: IViewDescriptor[]): Map<string, IViewDescriptor[]> {\n\t\tconst viewsByContainer = new Map<string, IViewDescriptor[]>();\n\n\t\tfor (const viewDescriptor of views) {\n\t\t\tconst correctContainerId = this.viewDescriptorsCustomLocations.get(viewDescriptor.id) ?? containerId;\n\t\t\tlet containerViews = viewsByContainer.get(correctContainerId);\n\t\t\tif (!containerViews) {\n\t\t\t\tviewsByContainer.set(correctContainerId, containerViews = []);\n\t\t\t}\n\t\t\tcontainerViews.push(viewDescriptor);\n\t\t}\n\n\t\treturn viewsByContainer;\n\t}\n\n\tgetViewDescriptorById(viewId: string): IViewDescriptor | null {\n\t\treturn this.viewsRegistry.getView(viewId);\n\t}\n\n\tgetViewLocationById(viewId: string): ViewContainerLocation | null {\n\t\tconst container = this.getViewContainerByViewId(viewId);\n\t\tif (container === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this.getViewContainerLocation(container);\n\t}\n\n\tgetViewContainerByViewId(viewId: string): ViewContainer | null {\n\t\tconst containerId = this.viewDescriptorsCustomLocations.get(viewId);\n\n\t\treturn containerId ?\n\t\t\tthis.viewContainersRegistry.get(containerId) ?? null :\n\t\t\tthis.getDefaultContainerById(viewId);\n\t}\n\n\tgetViewContainerLocation(viewContainer: ViewContainer): ViewContainerLocation {\n\t\treturn this.viewContainersCustomLocations.get(viewContainer.id) ?? this.getDefaultViewContainerLocation(viewContainer);\n\t}\n\n\tgetDefaultViewContainerLocation(viewContainer: ViewContainer): ViewContainerLocation {\n\t\treturn this.viewContainersRegistry.getViewContainerLocation(viewContainer);\n\t}\n\n\tgetDefaultContainerById(viewId: string): ViewContainer | null {\n\t\treturn this.viewsRegistry.getViewContainer(viewId) ?? null;\n\t}\n\n\tgetViewContainerModel(container: ViewContainer): ViewContainerModel {\n\t\treturn this.getOrRegisterViewContainerModel(container);\n\t}\n\n\tgetViewContainerById(id: string): ViewContainer | null {\n\t\treturn this.viewContainersRegistry.get(id) || null;\n\t}\n\n\tgetViewContainersByLocation(location: ViewContainerLocation): ViewContainer[] {\n\t\treturn this.viewContainers.filter(v => this.getViewContainerLocation(v) === location);\n\t}\n\n\tgetDefaultViewContainer(location: ViewContainerLocation): ViewContainer | undefined {\n\t\treturn this.viewContainersRegistry.getDefaultViewContainer(location);\n\t}\n\n\tmoveViewContainerToLocation(viewContainer: ViewContainer, location: ViewContainerLocation, requestedIndex?: number): void {\n\t\tthis.moveViewContainerToLocationWithoutSaving(viewContainer, location, requestedIndex);\n\t\tthis.saveViewCustomizations();\n\t}\n\n\tgetViewContainerBadgeEnablementState(id: string): boolean {\n\t\treturn this.viewContainerBadgeEnablementStates.get(id) ?? true;\n\t}\n\n\tsetViewContainerBadgeEnablementState(id: string, badgesEnabled: boolean): void {\n\t\tthis.viewContainerBadgeEnablementStates.set(id, badgesEnabled);\n\t\tthis.saveViewCustomizations();\n\t}\n\n\tmoveViewToLocation(view: IViewDescriptor, location: ViewContainerLocation): void {\n\t\tconst container = this.registerGeneratedViewContainer(location);\n\t\tthis.moveViewsToContainer([view], container);\n\t}\n\n\tmoveViewsToContainer(views: IViewDescriptor[], viewContainer: ViewContainer, visibilityState?: ViewVisibilityState): void {\n\t\tif (!views.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst from = this.getViewContainerByViewId(views[0].id);\n\t\tconst to = viewContainer;\n\n\t\tif (from && to && from !== to) {\n\t\t\t// Move views\n\t\t\tthis.moveViewsWithoutSaving(views, from, to, visibilityState);\n\t\t\tthis.cleanUpGeneratedViewContainer(from.id);\n\n\t\t\t// Save new locations\n\t\t\tthis.saveViewCustomizations();\n\n\t\t\t// Log to telemetry\n\t\t\tthis.reportMovedViews(views, from, to);\n\t\t}\n\t}\n\n\treset(): void {\n\t\tfor (const viewContainer of this.viewContainers) {\n\t\t\tconst viewContainerModel = this.getViewContainerModel(viewContainer);\n\n\t\t\tfor (const viewDescriptor of viewContainerModel.allViewDescriptors) {\n\t\t\t\tconst defaultContainer = this.getDefaultContainerById(viewDescriptor.id);\n\t\t\t\tconst currentContainer = this.getViewContainerByViewId(viewDescriptor.id);\n\t\t\t\tif (currentContainer && defaultContainer && currentContainer !== defaultContainer) {\n\t\t\t\t\tthis.moveViewsWithoutSaving([viewDescriptor], currentContainer, defaultContainer);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst defaultContainerLocation = this.getDefaultViewContainerLocation(viewContainer);\n\t\t\tconst currentContainerLocation = this.getViewContainerLocation(viewContainer);\n\t\t\tif (defaultContainerLocation !== null && currentContainerLocation !== defaultContainerLocation) {\n\t\t\t\tthis.moveViewContainerToLocationWithoutSaving(viewContainer, defaultContainerLocation);\n\t\t\t}\n\n\t\t\tthis.cleanUpGeneratedViewContainer(viewContainer.id);\n\t\t}\n\n\t\tthis.viewContainersCustomLocations.clear();\n\t\tthis.viewDescriptorsCustomLocations.clear();\n\t\tthis.saveViewCustomizations();\n\t}\n\n\tisViewContainerRemovedPermanently(viewContainerId: string): boolean {\n\t\treturn this.isGeneratedContainerId(viewContainerId) && !this.viewContainersCustomLocations.has(viewContainerId);\n\t}\n\n\tprivate onDidChangeDefaultContainer(views: IViewDescriptor[], from: ViewContainer, to: ViewContainer): void {\n\t\tconst viewsToMove = views.filter(view =>\n\t\t\t!this.viewDescriptorsCustomLocations.has(view.id) // Move views which are not already moved\n\t\t\t|| (!this.viewContainers.includes(from) && this.viewDescriptorsCustomLocations.get(view.id) === from.id) // Move views which are moved from a removed container\n\t\t);\n\t\tif (viewsToMove.length) {\n\t\t\tthis.moveViewsWithoutSaving(viewsToMove, from, to);\n\t\t}\n\t}\n\n\tprivate reportMovedViews(views: IViewDescriptor[], from: ViewContainer, to: ViewContainer): void {\n\t\tconst containerToString = (container: ViewContainer): string => {\n\t\t\tif (container.id.startsWith(ViewDescriptorService.COMMON_CONTAINER_ID_PREFIX)) {\n\t\t\t\treturn 'custom';\n\t\t\t}\n\n\t\t\tif (!container.extensionId) {\n\t\t\t\treturn container.id;\n\t\t\t}\n\n\t\t\treturn 'extension';\n\t\t};\n\n\t\tconst oldLocation = this.getViewContainerLocation(from);\n\t\tconst newLocation = this.getViewContainerLocation(to);\n\t\tconst viewCount = views.length;\n\t\tconst fromContainer = containerToString(from);\n\t\tconst toContainer = containerToString(to);\n\t\tconst fromLocation = oldLocation === ViewContainerLocation.Panel ? 'panel' : 'sidebar';\n\t\tconst toLocation = newLocation === ViewContainerLocation.Panel ? 'panel' : 'sidebar';\n\n\t\tinterface ViewDescriptorServiceMoveViewsEvent {\n\t\t\tviewCount: number;\n\t\t\tfromContainer: string;\n\t\t\ttoContainer: string;\n\t\t\tfromLocation: string;\n\t\t\ttoLocation: string;\n\t\t}\n\n\t\ttype ViewDescriptorServiceMoveViewsClassification = {\n\t\t\towner: 'sbatten';\n\t\t\tcomment: 'Logged when views are moved from one view container to another';\n\t\t\tviewCount: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The number of views moved' };\n\t\t\tfromContainer: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The starting view container of the moved views' };\n\t\t\ttoContainer: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The destination view container of the moved views' };\n\t\t\tfromLocation: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The location of the starting view container. e.g. Primary Side Bar' };\n\t\t\ttoLocation: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The location of the destination view container. e.g. Panel' };\n\t\t};\n\n\t\tthis.telemetryService.publicLog2<ViewDescriptorServiceMoveViewsEvent, ViewDescriptorServiceMoveViewsClassification>('viewDescriptorService.moveViews', { viewCount, fromContainer, toContainer, fromLocation, toLocation });\n\t}\n\n\tprivate moveViewsWithoutSaving(views: IViewDescriptor[], from: ViewContainer, to: ViewContainer, visibilityState: ViewVisibilityState = ViewVisibilityState.Expand): void {\n\t\tthis.removeViews(from, views);\n\t\tthis.addViews(to, views, visibilityState);\n\n\t\tconst oldLocation = this.getViewContainerLocation(from);\n\t\tconst newLocation = this.getViewContainerLocation(to);\n\n\t\tif (oldLocation !== newLocation) {\n\t\t\tthis._onDidChangeLocation.fire({ views, from: oldLocation, to: newLocation });\n\t\t}\n\n\t\tthis._onDidChangeContainer.fire({ views, from, to });\n\t}\n\n\tprivate moveViewContainerToLocationWithoutSaving(viewContainer: ViewContainer, location: ViewContainerLocation, requestedIndex?: number): void {\n\t\tconst from = this.getViewContainerLocation(viewContainer);\n\t\tconst to = location;\n\t\tif (from !== to) {\n\t\t\tconst isGeneratedViewContainer = this.isGeneratedContainerId(viewContainer.id);\n\t\t\tconst isDefaultViewContainerLocation = to === this.getDefaultViewContainerLocation(viewContainer);\n\t\t\tif (isGeneratedViewContainer || !isDefaultViewContainerLocation) {\n\t\t\t\tthis.viewContainersCustomLocations.set(viewContainer.id, to);\n\t\t\t} else {\n\t\t\t\tthis.viewContainersCustomLocations.delete(viewContainer.id);\n\t\t\t}\n\t\t\tthis.getOrCreateDefaultViewContainerLocationContextKey(viewContainer).set(isGeneratedViewContainer || isDefaultViewContainerLocation);\n\n\t\t\tviewContainer.requestedIndex = requestedIndex;\n\t\t\tthis._onDidChangeContainerLocation.fire({ viewContainer, from, to });\n\n\t\t\tconst views = this.getViewsByContainer(viewContainer);\n\t\t\tthis._onDidChangeLocation.fire({ views, from, to });\n\t\t}\n\t}\n\n\tprivate cleanUpGeneratedViewContainer(viewContainerId: string): void {\n\t\t// Skip if container is not generated\n\t\tif (!this.isGeneratedContainerId(viewContainerId)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Skip if container has views registered\n\t\tconst viewContainer = this.getViewContainerById(viewContainerId);\n\t\tif (viewContainer && this.getViewContainerModel(viewContainer)?.allViewDescriptors.length) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Skip if container has moved views\n\t\tif ([...this.viewDescriptorsCustomLocations.values()].includes(viewContainerId)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Deregister the container\n\t\tif (viewContainer) {\n\t\t\tthis.viewContainersRegistry.deregisterViewContainer(viewContainer);\n\t\t}\n\n\t\tthis.viewContainersCustomLocations.delete(viewContainerId);\n\t\tthis.viewContainerBadgeEnablementStates.delete(viewContainerId);\n\n\t\t// Clean up caches of container\n\t\tthis.storageService.remove(getViewsStateStorageId(viewContainer?.storageId || getViewContainerStorageId(viewContainerId)), StorageScope.PROFILE);\n\t}\n\n\tprivate registerGeneratedViewContainer(location: ViewContainerLocation, existingId?: string): ViewContainer {\n\t\tconst id = existingId || this.generateContainerId(location);\n\n\t\tconst container = this.viewContainersRegistry.registerViewContainer({\n\t\t\tid,\n\t\t\tctorDescriptor: new SyncDescriptor(ViewPaneContainer, [id, { mergeViewWithContainerWhenSingleView: true }]),\n\t\t\ttitle: { value: id, original: id }, // we don't want to see this so using id\n\t\t\ticon: location === ViewContainerLocation.Sidebar ? defaultViewIcon : undefined,\n\t\t\tstorageId: getViewContainerStorageId(id),\n\t\t\thideIfEmpty: true\n\t\t}, location, { doNotRegisterOpenCommand: true });\n\n\t\tif (this.viewContainersCustomLocations.get(container.id) !== location) {\n\t\t\tthis.viewContainersCustomLocations.set(container.id, location);\n\t\t}\n\n\t\tthis.getOrCreateDefaultViewContainerLocationContextKey(container).set(true);\n\n\t\treturn container;\n\t}\n\n\tprivate onDidStorageChange(): void {\n\t\tif (JSON.stringify(this.viewCustomizations) !== this.getStoredViewCustomizationsValue() /* This checks if current window changed the value or not */) {\n\t\t\tthis.onDidViewCustomizationsStorageChange();\n\t\t}\n\t}\n\n\tprivate onDidViewCustomizationsStorageChange(): void {\n\t\tthis._viewCustomizations = undefined;\n\n\t\tconst newViewContainerCustomizations = new Map<string, ViewContainerLocation>(Object.entries(this.viewCustomizations.viewContainerLocations));\n\t\tconst newViewDescriptorCustomizations = new Map<string, string>(Object.entries(this.viewCustomizations.viewLocations));\n\t\tconst viewContainersToMove: [ViewContainer, ViewContainerLocation][] = [];\n\t\tconst viewsToMove: { views: IViewDescriptor[]; from: ViewContainer; to: ViewContainer }[] = [];\n\n\t\tfor (const [containerId, location] of newViewContainerCustomizations.entries()) {\n\t\t\tconst container = this.getViewContainerById(containerId);\n\t\t\tif (container) {\n\t\t\t\tif (location !== this.getViewContainerLocation(container)) {\n\t\t\t\t\tviewContainersToMove.push([container, location]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// If the container is generated and not registered, we register it now\n\t\t\telse if (this.isGeneratedContainerId(containerId)) {\n\t\t\t\tthis.registerGeneratedViewContainer(location, containerId);\n\t\t\t}\n\t\t}\n\n\t\tfor (const viewContainer of this.viewContainers) {\n\t\t\tif (!newViewContainerCustomizations.has(viewContainer.id)) {\n\t\t\t\tconst currentLocation = this.getViewContainerLocation(viewContainer);\n\t\t\t\tconst defaultLocation = this.getDefaultViewContainerLocation(viewContainer);\n\t\t\t\tif (currentLocation !== defaultLocation) {\n\t\t\t\t\tviewContainersToMove.push([viewContainer, defaultLocation]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (const [viewId, viewContainerId] of newViewDescriptorCustomizations.entries()) {\n\t\t\tconst viewDescriptor = this.getViewDescriptorById(viewId);\n\t\t\tif (viewDescriptor) {\n\t\t\t\tconst prevViewContainer = this.getViewContainerByViewId(viewId);\n\t\t\t\tconst newViewContainer = this.viewContainersRegistry.get(viewContainerId);\n\t\t\t\tif (prevViewContainer && newViewContainer && newViewContainer !== prevViewContainer) {\n\t\t\t\t\tviewsToMove.push({ views: [viewDescriptor], from: prevViewContainer, to: newViewContainer });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If a value is not present in the cache, it must be reset to default\n\t\tfor (const viewContainer of this.viewContainers) {\n\t\t\tconst viewContainerModel = this.getViewContainerModel(viewContainer);\n\t\t\tfor (const viewDescriptor of viewContainerModel.allViewDescriptors) {\n\t\t\t\tif (!newViewDescriptorCustomizations.has(viewDescriptor.id)) {\n\t\t\t\t\tconst currentContainer = this.getViewContainerByViewId(viewDescriptor.id);\n\t\t\t\t\tconst defaultContainer = this.getDefaultContainerById(viewDescriptor.id);\n\t\t\t\t\tif (currentContainer && defaultContainer && currentContainer !== defaultContainer) {\n\t\t\t\t\t\tviewsToMove.push({ views: [viewDescriptor], from: currentContainer, to: defaultContainer });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Execute View Container Movements\n\t\tfor (const [container, location] of viewContainersToMove) {\n\t\t\tthis.moveViewContainerToLocationWithoutSaving(container, location);\n\t\t}\n\t\t// Execute View Movements\n\t\tfor (const { views, from, to } of viewsToMove) {\n\t\t\tthis.moveViewsWithoutSaving(views, from, to, ViewVisibilityState.Default);\n\t\t}\n\n\t\tthis.viewContainersCustomLocations = newViewContainerCustomizations;\n\t\tthis.viewDescriptorsCustomLocations = newViewDescriptorCustomizations;\n\t}\n\n\t// Generated Container Id Format\n\t// {Common Prefix}.{Location}.{Uniqueness Id}\n\t// Old Format (deprecated)\n\t// {Common Prefix}.{Uniqueness Id}.{Source View Id}\n\tprivate generateContainerId(location: ViewContainerLocation): string {\n\t\treturn `${ViewDescriptorService.COMMON_CONTAINER_ID_PREFIX}.${ViewContainerLocationToString(location)}.${generateUuid()}`;\n\t}\n\n\tprivate saveViewCustomizations(): void {\n\t\tconst viewCustomizations: IViewsCustomizations = { viewContainerLocations: {}, viewLocations: {}, viewContainerBadgeEnablementStates: {} };\n\n\t\tfor (const [containerId, location] of this.viewContainersCustomLocations) {\n\t\t\tconst container = this.getViewContainerById(containerId);\n\t\t\t// Skip if the view container is not a generated container and in default location\n\t\t\tif (container && !this.isGeneratedContainerId(containerId) && location === this.getDefaultViewContainerLocation(container)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tviewCustomizations.viewContainerLocations[containerId] = location;\n\t\t}\n\n\t\tfor (const [viewId, viewContainerId] of this.viewDescriptorsCustomLocations) {\n\t\t\tconst viewContainer = this.getViewContainerById(viewContainerId);\n\t\t\tif (viewContainer) {\n\t\t\t\tconst defaultContainer = this.getDefaultContainerById(viewId);\n\t\t\t\t// Skip if the view is at default location\n\t\t\t\t// https://github.com/microsoft/vscode/issues/90414\n\t\t\t\tif (defaultContainer?.id === viewContainer.id) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tviewCustomizations.viewLocations[viewId] = viewContainerId;\n\t\t}\n\n\t\t// Loop through viewContainerBadgeEnablementStates and save only the ones that are disabled\n\t\tfor (const [viewContainerId, badgeEnablementState] of this.viewContainerBadgeEnablementStates) {\n\t\t\tif (badgeEnablementState === false) {\n\t\t\t\tviewCustomizations.viewContainerBadgeEnablementStates[viewContainerId] = badgeEnablementState;\n\t\t\t}\n\t\t}\n\t\tthis.viewCustomizations = viewCustomizations;\n\t}\n\n\tprivate _viewCustomizations: IViewsCustomizations | undefined;\n\tprivate get viewCustomizations(): IViewsCustomizations {\n\t\tif (!this._viewCustomizations) {\n\t\t\tthis._viewCustomizations = JSON.parse(this.getStoredViewCustomizationsValue()) as IViewsCustomizations;\n\t\t\tthis._viewCustomizations.viewContainerLocations = this._viewCustomizations.viewContainerLocations ?? {};\n\t\t\tthis._viewCustomizations.viewLocations = this._viewCustomizations.viewLocations ?? {};\n\t\t\tthis._viewCustomizations.viewContainerBadgeEnablementStates = this._viewCustomizations.viewContainerBadgeEnablementStates ?? {};\n\t\t}\n\t\treturn this._viewCustomizations;\n\t}\n\n\tprivate set viewCustomizations(viewCustomizations: IViewsCustomizations) {\n\t\tconst value = JSON.stringify(viewCustomizations);\n\t\tif (JSON.stringify(this.viewCustomizations) !== value) {\n\t\t\tthis._viewCustomizations = viewCustomizations;\n\t\t\tthis.setStoredViewCustomizationsValue(value);\n\t\t}\n\t}\n\n\tprivate getStoredViewCustomizationsValue(): string {\n\t\treturn this.storageService.get(ViewDescriptorService.VIEWS_CUSTOMIZATIONS, StorageScope.PROFILE, '{}');\n\t}\n\n\tprivate setStoredViewCustomizationsValue(value: string): void {\n\t\tthis.storageService.store(ViewDescriptorService.VIEWS_CUSTOMIZATIONS, value, StorageScope.PROFILE, StorageTarget.USER);\n\t}\n\n\tprivate getViewsByContainer(viewContainer: ViewContainer): IViewDescriptor[] {\n\t\tconst result = this.viewsRegistry.getViews(viewContainer).filter(viewDescriptor => {\n\t\t\tconst viewDescriptorViewContainerId = this.viewDescriptorsCustomLocations.get(viewDescriptor.id) ?? viewContainer.id;\n\t\t\treturn viewDescriptorViewContainerId === viewContainer.id;\n\t\t});\n\n\t\tfor (const [viewId, viewContainerId] of this.viewDescriptorsCustomLocations.entries()) {\n\t\t\tif (viewContainerId !== viewContainer.id) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (this.viewsRegistry.getViewContainer(viewId) === viewContainer) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst viewDescriptor = this.getViewDescriptorById(viewId);\n\t\t\tif (viewDescriptor) {\n\t\t\t\tresult.push(viewDescriptor);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate onDidRegisterViewContainer(viewContainer: ViewContainer): void {\n\t\tconst defaultLocation = this.isGeneratedContainerId(viewContainer.id) ? true : this.getViewContainerLocation(viewContainer) === this.getDefaultViewContainerLocation(viewContainer);\n\t\tthis.getOrCreateDefaultViewContainerLocationContextKey(viewContainer).set(defaultLocation);\n\t\tthis.getOrRegisterViewContainerModel(viewContainer);\n\t}\n\n\tprivate getOrRegisterViewContainerModel(viewContainer: ViewContainer): ViewContainerModel {\n\t\tlet viewContainerModel = this.viewContainerModels.get(viewContainer)?.viewContainerModel;\n\n\t\tif (!viewContainerModel) {\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tviewContainerModel = disposables.add(this.instantiationService.createInstance(ViewContainerModel, viewContainer));\n\n\t\t\tthis.onDidChangeActiveViews({ added: viewContainerModel.activeViewDescriptors, removed: [] });\n\t\t\tviewContainerModel.onDidChangeActiveViewDescriptors(changed => this.onDidChangeActiveViews(changed), this, disposables);\n\n\t\t\tthis.onDidChangeVisibleViews({ added: [...viewContainerModel.visibleViewDescriptors], removed: [] });\n\t\t\tviewContainerModel.onDidAddVisibleViewDescriptors(added => this.onDidChangeVisibleViews({ added: added.map(({ viewDescriptor }) => viewDescriptor), removed: [] }), this, disposables);\n\t\t\tviewContainerModel.onDidRemoveVisibleViewDescriptors(removed => this.onDidChangeVisibleViews({ added: [], removed: removed.map(({ viewDescriptor }) => viewDescriptor) }), this, disposables);\n\n\t\t\tdisposables.add(toDisposable(() => this.viewsVisibilityActionDisposables.deleteAndDispose(viewContainer)));\n\n\t\t\tdisposables.add(this.registerResetViewContainerAction(viewContainer));\n\n\t\t\tthis.viewContainerModels.set(viewContainer, { viewContainerModel: viewContainerModel, disposables, dispose: () => disposables.dispose() });\n\n\t\t\t// Register all views that were statically registered to this container\n\t\t\t// Potentially, this is registering something that was handled by another container\n\t\t\t// addViews() handles this by filtering views that are already registered\n\t\t\tthis.onDidRegisterViews([{ views: this.viewsRegistry.getViews(viewContainer), viewContainer }]);\n\n\t\t\t// Add views that were registered prior to this view container\n\t\t\tconst viewsToRegister = this.getViewsByContainer(viewContainer).filter(view => this.getDefaultContainerById(view.id) !== viewContainer);\n\t\t\tif (viewsToRegister.length) {\n\t\t\t\tthis.addViews(viewContainer, viewsToRegister);\n\t\t\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\t\t\tviewsToRegister.forEach(viewDescriptor => this.getOrCreateMovableViewContextKey(viewDescriptor).set(!!viewDescriptor.canMoveView));\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\treturn viewContainerModel;\n\t}\n\n\tprivate onDidDeregisterViewContainer(viewContainer: ViewContainer): void {\n\t\tthis.viewContainerModels.deleteAndDispose(viewContainer);\n\t}\n\n\tprivate onDidChangeActiveViews({ added, removed }: { added: ReadonlyArray<IViewDescriptor>; removed: ReadonlyArray<IViewDescriptor> }): void {\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tadded.forEach(viewDescriptor => this.getOrCreateActiveViewContextKey(viewDescriptor).set(true));\n\t\t\tremoved.forEach(viewDescriptor => this.getOrCreateActiveViewContextKey(viewDescriptor).set(false));\n\t\t});\n\t}\n\n\tprivate onDidChangeVisibleViews({ added, removed }: { added: IViewDescriptor[]; removed: IViewDescriptor[] }): void {\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tadded.forEach(viewDescriptor => this.getOrCreateVisibleViewContextKey(viewDescriptor).set(true));\n\t\t\tremoved.forEach(viewDescriptor => this.getOrCreateVisibleViewContextKey(viewDescriptor).set(false));\n\t\t});\n\t}\n\n\tprivate registerViewsVisibilityActions(): void {\n\t\tfor (const [viewContainer, { viewContainerModel, disposables }] of this.viewContainerModels) {\n\t\t\tthis.viewsVisibilityActionDisposables.set(viewContainer, this.registerViewsVisibilityActionsForContainer(viewContainerModel));\n\t\t\tdisposables.add(Event.any(\n\t\t\t\tviewContainerModel.onDidChangeActiveViewDescriptors,\n\t\t\t\tviewContainerModel.onDidAddVisibleViewDescriptors,\n\t\t\t\tviewContainerModel.onDidRemoveVisibleViewDescriptors,\n\t\t\t\tviewContainerModel.onDidMoveVisibleViewDescriptors\n\t\t\t)(e => this.viewsVisibilityActionDisposables.set(viewContainer, this.registerViewsVisibilityActionsForContainer(viewContainerModel))));\n\t\t}\n\t}\n\n\tprivate registerViewsVisibilityActionsForContainer(viewContainerModel: ViewContainerModel): IDisposable {\n\t\tconst disposables = new DisposableStore();\n\t\tviewContainerModel.activeViewDescriptors.forEach((viewDescriptor, index) => {\n\t\t\tif (!viewDescriptor.remoteAuthority) {\n\t\t\t\tdisposables.add(registerAction2(class extends ViewPaneContainerAction<ViewPaneContainer> {\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\tsuper({\n\t\t\t\t\t\t\tid: `${viewDescriptor.id}.toggleVisibility`,\n\t\t\t\t\t\t\tviewPaneContainerId: viewContainerModel.viewContainer.id,\n\t\t\t\t\t\t\tprecondition: viewDescriptor.canToggleVisibility && (!viewContainerModel.isVisible(viewDescriptor.id) || viewContainerModel.visibleViewDescriptors.length > 1) ? ContextKeyExpr.true() : ContextKeyExpr.false(),\n\t\t\t\t\t\t\ttoggled: ContextKeyExpr.has(`${viewDescriptor.id}.visible`),\n\t\t\t\t\t\t\ttitle: viewDescriptor.name,\n\t\t\t\t\t\t\tmenu: [{\n\t\t\t\t\t\t\t\tid: ViewsSubMenu,\n\t\t\t\t\t\t\t\tgroup: '1_toggleViews',\n\t\t\t\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\t\t\t\tContextKeyExpr.equals('viewContainer', viewContainerModel.viewContainer.id),\n\t\t\t\t\t\t\t\t\tContextKeyExpr.equals('viewContainerLocation', ViewContainerLocationToString(ViewContainerLocation.Sidebar)),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\torder: index,\n\t\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\t\tid: MenuId.ViewContainerTitleContext,\n\t\t\t\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\t\t\t\tContextKeyExpr.equals('viewContainer', viewContainerModel.viewContainer.id),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\torder: index,\n\t\t\t\t\t\t\t\tgroup: '1_toggleVisibility'\n\t\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\t\tid: MenuId.ViewTitleContext,\n\t\t\t\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\t\t\t\tviewContainerModel.visibleViewDescriptors.length > 1 ? ContextKeyExpr.or(...viewContainerModel.visibleViewDescriptors.map(v => ContextKeyExpr.equals('view', v.id))) : ContextKeyExpr.false()\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\torder: index,\n\t\t\t\t\t\t\t\tgroup: '2_toggleVisibility'\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tasync runInViewPaneContainer(serviceAccessor: ServicesAccessor, viewPaneContainer: ViewPaneContainer): Promise<void> {\n\t\t\t\t\t\tviewPaneContainer.toggleViewVisibility(viewDescriptor.id);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t\tdisposables.add(registerAction2(class extends ViewPaneContainerAction<ViewPaneContainer> {\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\tsuper({\n\t\t\t\t\t\t\tid: `${viewDescriptor.id}.removeView`,\n\t\t\t\t\t\t\tviewPaneContainerId: viewContainerModel.viewContainer.id,\n\t\t\t\t\t\t\ttitle: localize('hideView', \"Hide '{0}'\", viewDescriptor.name),\n\t\t\t\t\t\t\tprecondition: viewDescriptor.canToggleVisibility && (!viewContainerModel.isVisible(viewDescriptor.id) || viewContainerModel.visibleViewDescriptors.length > 1) ? ContextKeyExpr.true() : ContextKeyExpr.false(),\n\t\t\t\t\t\t\tmenu: [{\n\t\t\t\t\t\t\t\tid: MenuId.ViewTitleContext,\n\t\t\t\t\t\t\t\twhen: ContextKeyExpr.and(\n\t\t\t\t\t\t\t\t\tContextKeyExpr.equals('view', viewDescriptor.id),\n\t\t\t\t\t\t\t\t\tContextKeyExpr.has(`${viewDescriptor.id}.visible`),\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\tgroup: '1_hide',\n\t\t\t\t\t\t\t\torder: 1\n\t\t\t\t\t\t\t}]\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tasync runInViewPaneContainer(serviceAccessor: ServicesAccessor, viewPaneContainer: ViewPaneContainer): Promise<void> {\n\t\t\t\t\t\tviewPaneContainer.toggleViewVisibility(viewDescriptor.id);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\t\t});\n\t\treturn disposables;\n\t}\n\n\tprivate registerResetViewContainerAction(viewContainer: ViewContainer): IDisposable {\n\t\tconst that = this;\n\t\treturn registerAction2(class ResetViewLocationAction extends Action2 {\n\t\t\tconstructor() {\n\t\t\t\tsuper({\n\t\t\t\t\tid: `${viewContainer.id}.resetViewContainerLocation`,\n\t\t\t\t\ttitle: {\n\t\t\t\t\t\toriginal: 'Reset Location',\n\t\t\t\t\t\tvalue: localize('resetViewLocation', \"Reset Location\")\n\t\t\t\t\t},\n\t\t\t\t\tmenu: [{\n\t\t\t\t\t\tid: MenuId.ViewContainerTitleContext,\n\t\t\t\t\t\twhen: ContextKeyExpr.or(\n\t\t\t\t\t\t\tContextKeyExpr.and(\n\t\t\t\t\t\t\t\tContextKeyExpr.equals('viewContainer', viewContainer.id),\n\t\t\t\t\t\t\t\tContextKeyExpr.equals(`${viewContainer.id}.defaultViewContainerLocation`, false)\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t)\n\t\t\t\t\t}],\n\t\t\t\t});\n\t\t\t}\n\t\t\trun(): void {\n\t\t\t\tthat.moveViewContainerToLocation(viewContainer, that.getDefaultViewContainerLocation(viewContainer));\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate addViews(container: ViewContainer, views: IViewDescriptor[], visibilityState: ViewVisibilityState = ViewVisibilityState.Default): void {\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tviews.forEach(view => {\n\t\t\t\tconst isDefaultContainer = this.getDefaultContainerById(view.id) === container;\n\t\t\t\tthis.getOrCreateDefaultViewLocationContextKey(view).set(isDefaultContainer);\n\t\t\t\tif (isDefaultContainer) {\n\t\t\t\t\tthis.viewDescriptorsCustomLocations.delete(view.id);\n\t\t\t\t} else {\n\t\t\t\t\tthis.viewDescriptorsCustomLocations.set(view.id, container.id);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis.getViewContainerModel(container).add(views.map(view => {\n\t\t\treturn {\n\t\t\t\tviewDescriptor: view,\n\t\t\t\tcollapsed: visibilityState === ViewVisibilityState.Default ? undefined : false,\n\t\t\t\tvisible: visibilityState === ViewVisibilityState.Default ? undefined : true\n\t\t\t};\n\t\t}));\n\t}\n\n\tprivate removeViews(container: ViewContainer, views: IViewDescriptor[]): void {\n\t\t// Set view default location keys to false\n\t\tthis.contextKeyService.bufferChangeEvents(() => {\n\t\t\tviews.forEach(view => {\n\t\t\t\tif (this.viewDescriptorsCustomLocations.get(view.id) === container.id) {\n\t\t\t\t\tthis.viewDescriptorsCustomLocations.delete(view.id);\n\t\t\t\t}\n\t\t\t\tthis.getOrCreateDefaultViewLocationContextKey(view).set(false);\n\t\t\t});\n\t\t});\n\n\t\t// Remove the views\n\t\tthis.getViewContainerModel(container).remove(views);\n\t}\n\n\tprivate getOrCreateActiveViewContextKey(viewDescriptor: IViewDescriptor): IContextKey<boolean> {\n\t\tconst activeContextKeyId = `${viewDescriptor.id}.active`;\n\t\tlet contextKey = this.activeViewContextKeys.get(activeContextKeyId);\n\t\tif (!contextKey) {\n\t\t\tcontextKey = new RawContextKey(activeContextKeyId, false).bindTo(this.contextKeyService);\n\t\t\tthis.activeViewContextKeys.set(activeContextKeyId, contextKey);\n\t\t}\n\t\treturn contextKey;\n\t}\n\n\tprivate getOrCreateVisibleViewContextKey(viewDescriptor: IViewDescriptor): IContextKey<boolean> {\n\t\tconst activeContextKeyId = `${viewDescriptor.id}.visible`;\n\t\tlet contextKey = this.activeViewContextKeys.get(activeContextKeyId);\n\t\tif (!contextKey) {\n\t\t\tcontextKey = new RawContextKey(activeContextKeyId, false).bindTo(this.contextKeyService);\n\t\t\tthis.activeViewContextKeys.set(activeContextKeyId, contextKey);\n\t\t}\n\t\treturn contextKey;\n\t}\n\n\tprivate getOrCreateMovableViewContextKey(viewDescriptor: IViewDescriptor): IContextKey<boolean> {\n\t\tconst movableViewContextKeyId = `${viewDescriptor.id}.canMove`;\n\t\tlet contextKey = this.movableViewContextKeys.get(movableViewContextKeyId);\n\t\tif (!contextKey) {\n\t\t\tcontextKey = new RawContextKey(movableViewContextKeyId, false).bindTo(this.contextKeyService);\n\t\t\tthis.movableViewContextKeys.set(movableViewContextKeyId, contextKey);\n\t\t}\n\t\treturn contextKey;\n\t}\n\n\tprivate getOrCreateDefaultViewLocationContextKey(viewDescriptor: IViewDescriptor): IContextKey<boolean> {\n\t\tconst defaultViewLocationContextKeyId = `${viewDescriptor.id}.defaultViewLocation`;\n\t\tlet contextKey = this.defaultViewLocationContextKeys.get(defaultViewLocationContextKeyId);\n\t\tif (!contextKey) {\n\t\t\tcontextKey = new RawContextKey(defaultViewLocationContextKeyId, false).bindTo(this.contextKeyService);\n\t\t\tthis.defaultViewLocationContextKeys.set(defaultViewLocationContextKeyId, contextKey);\n\t\t}\n\t\treturn contextKey;\n\t}\n\n\tprivate getOrCreateDefaultViewContainerLocationContextKey(viewContainer: ViewContainer): IContextKey<boolean> {\n\t\tconst defaultViewContainerLocationContextKeyId = `${viewContainer.id}.defaultViewContainerLocation`;\n\t\tlet contextKey = this.defaultViewContainerLocationContextKeys.get(defaultViewContainerLocationContextKeyId);\n\t\tif (!contextKey) {\n\t\t\tcontextKey = new RawContextKey(defaultViewContainerLocationContextKeyId, false).bindTo(this.contextKeyService);\n\t\t\tthis.defaultViewContainerLocationContextKeys.set(defaultViewContainerLocationContextKeyId, contextKey);\n\t\t}\n\t\treturn contextKey;\n\t}\n}\n\nregisterSingleton(IViewDescriptorService, ViewDescriptorService, InstantiationType.Delayed);\n"]}