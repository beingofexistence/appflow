{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/views/test/browser/viewDescriptorService.test.ts"],"names":[],"mappings":"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","file":"viewDescriptorService.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { IViewsRegistry, IViewDescriptor, IViewContainersRegistry, Extensions as ViewContainerExtensions, ViewContainerLocation, ViewContainer, ViewContainerLocationToString } from 'vs/workbench/common/views';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { workbenchInstantiationService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { ViewDescriptorService } from 'vs/workbench/services/views/browser/viewDescriptorService';\nimport { assertIsDefined } from 'vs/base/common/types';\nimport { ContextKeyService } from 'vs/platform/contextkey/browser/contextKeyService';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { compare } from 'vs/base/common/strings';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nconst ViewsRegistry = Registry.as<IViewsRegistry>(ViewContainerExtensions.ViewsRegistry);\nconst ViewContainersRegistry = Registry.as<IViewContainersRegistry>(ViewContainerExtensions.ViewContainersRegistry);\nconst viewContainerIdPrefix = 'testViewContainer';\nconst sidebarContainer = ViewContainersRegistry.registerViewContainer({ id: `${viewContainerIdPrefix}-${generateUuid()}`, title: { value: 'test', original: 'test' }, ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\nconst panelContainer = ViewContainersRegistry.registerViewContainer({ id: `${viewContainerIdPrefix}-${generateUuid()}`, title: { value: 'test', original: 'test' }, ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Panel);\n\nsuite('ViewDescriptorService', () => {\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\tlet instantiationService: TestInstantiationService;\n\n\tsetup(() => {\n\t\tdisposables.add(instantiationService = <TestInstantiationService>workbenchInstantiationService(undefined, disposables));\n\t\tinstantiationService.stub(IContextKeyService, disposables.add(instantiationService.createInstance(ContextKeyService)));\n\t});\n\n\tteardown(() => {\n\t\tfor (const viewContainer of ViewContainersRegistry.all) {\n\t\t\tif (viewContainer.id.startsWith(viewContainerIdPrefix)) {\n\t\t\t\tViewsRegistry.deregisterViews(ViewsRegistry.getViews(viewContainer), viewContainer);\n\t\t\t}\n\t\t}\n\t});\n\n\tfunction aViewDescriptorService(): ViewDescriptorService {\n\t\treturn disposables.add(instantiationService.createInstance(ViewDescriptorService));\n\t}\n\n\ttest('Empty Containers', function () {\n\t\tconst testObject = aViewDescriptorService();\n\t\tconst sidebarViews = testObject.getViewContainerModel(sidebarContainer);\n\t\tconst panelViews = testObject.getViewContainerModel(panelContainer);\n\t\tassert.strictEqual(sidebarViews.allViewDescriptors.length, 0, 'The sidebar container should have no views yet.');\n\t\tassert.strictEqual(panelViews.allViewDescriptors.length, 0, 'The panel container should have no views yet.');\n\t});\n\n\ttest('Register/Deregister', () => {\n\t\tconst testObject = aViewDescriptorService();\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 1',\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view2',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 2',\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view3',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 3',\n\t\t\t\tcanMoveView: true\n\t\t\t}\n\t\t];\n\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(0, 2), sidebarContainer);\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(2), panelContainer);\n\n\t\tlet sidebarViews = testObject.getViewContainerModel(sidebarContainer);\n\t\tlet panelViews = testObject.getViewContainerModel(panelContainer);\n\n\t\tassert.strictEqual(sidebarViews.activeViewDescriptors.length, 2, 'Sidebar should have 2 views');\n\t\tassert.strictEqual(panelViews.activeViewDescriptors.length, 1, 'Panel should have 1 view');\n\n\t\tViewsRegistry.deregisterViews(viewDescriptors.slice(0, 2), sidebarContainer);\n\t\tViewsRegistry.deregisterViews(viewDescriptors.slice(2), panelContainer);\n\n\t\tsidebarViews = testObject.getViewContainerModel(sidebarContainer);\n\t\tpanelViews = testObject.getViewContainerModel(panelContainer);\n\n\t\tassert.strictEqual(sidebarViews.activeViewDescriptors.length, 0, 'Sidebar should have no views');\n\t\tassert.strictEqual(panelViews.activeViewDescriptors.length, 0, 'Panel should have no views');\n\t});\n\n\ttest('move views to existing containers', async function () {\n\t\tconst testObject = aViewDescriptorService();\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 1',\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view2',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 2',\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view3',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 3',\n\t\t\t\tcanMoveView: true\n\t\t\t}\n\t\t];\n\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(0, 2), sidebarContainer);\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(2), panelContainer);\n\n\t\ttestObject.moveViewsToContainer(viewDescriptors.slice(2), sidebarContainer);\n\t\ttestObject.moveViewsToContainer(viewDescriptors.slice(0, 2), panelContainer);\n\n\t\tconst sidebarViews = testObject.getViewContainerModel(sidebarContainer);\n\t\tconst panelViews = testObject.getViewContainerModel(panelContainer);\n\n\t\tassert.strictEqual(sidebarViews.activeViewDescriptors.length, 1, 'Sidebar should have 2 views');\n\t\tassert.strictEqual(panelViews.activeViewDescriptors.length, 2, 'Panel should have 1 view');\n\n\t\tassert.notStrictEqual(sidebarViews.activeViewDescriptors.indexOf(viewDescriptors[2]), -1, `Sidebar should have ${viewDescriptors[2].name}`);\n\t\tassert.notStrictEqual(panelViews.activeViewDescriptors.indexOf(viewDescriptors[0]), -1, `Panel should have ${viewDescriptors[0].name}`);\n\t\tassert.notStrictEqual(panelViews.activeViewDescriptors.indexOf(viewDescriptors[1]), -1, `Panel should have ${viewDescriptors[1].name}`);\n\t});\n\n\ttest('move views to generated containers', async function () {\n\t\tconst testObject = aViewDescriptorService();\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 1',\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view2',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 2',\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view3',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 3',\n\t\t\t\tcanMoveView: true\n\t\t\t}\n\t\t];\n\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(0, 2), sidebarContainer);\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(2), panelContainer);\n\n\t\ttestObject.moveViewToLocation(viewDescriptors[0], ViewContainerLocation.Panel);\n\t\ttestObject.moveViewToLocation(viewDescriptors[2], ViewContainerLocation.Sidebar);\n\n\t\tlet sidebarViews = testObject.getViewContainerModel(sidebarContainer);\n\t\tlet panelViews = testObject.getViewContainerModel(panelContainer);\n\n\t\tassert.strictEqual(sidebarViews.activeViewDescriptors.length, 1, 'Sidebar container should have 1 view');\n\t\tassert.strictEqual(panelViews.activeViewDescriptors.length, 0, 'Panel container should have no views');\n\n\t\tconst generatedPanel = assertIsDefined(testObject.getViewContainerByViewId(viewDescriptors[0].id));\n\t\tconst generatedSidebar = assertIsDefined(testObject.getViewContainerByViewId(viewDescriptors[2].id));\n\n\t\tassert.strictEqual(testObject.getViewContainerLocation(generatedPanel), ViewContainerLocation.Panel, 'Generated Panel should be in located in the panel');\n\t\tassert.strictEqual(testObject.getViewContainerLocation(generatedSidebar), ViewContainerLocation.Sidebar, 'Generated Sidebar should be in located in the sidebar');\n\n\t\tassert.strictEqual(testObject.getViewContainerLocation(generatedPanel), testObject.getViewLocationById(viewDescriptors[0].id), 'Panel view location and container location should match');\n\t\tassert.strictEqual(testObject.getViewContainerLocation(generatedSidebar), testObject.getViewLocationById(viewDescriptors[2].id), 'Sidebar view location and container location should match');\n\n\t\tassert.strictEqual(testObject.getDefaultContainerById(viewDescriptors[2].id), panelContainer, `${viewDescriptors[2].name} has wrong default container`);\n\t\tassert.strictEqual(testObject.getDefaultContainerById(viewDescriptors[0].id), sidebarContainer, `${viewDescriptors[0].name} has wrong default container`);\n\n\t\ttestObject.moveViewToLocation(viewDescriptors[0], ViewContainerLocation.Sidebar);\n\t\ttestObject.moveViewToLocation(viewDescriptors[2], ViewContainerLocation.Panel);\n\n\t\tsidebarViews = testObject.getViewContainerModel(sidebarContainer);\n\t\tpanelViews = testObject.getViewContainerModel(panelContainer);\n\n\t\tassert.strictEqual(sidebarViews.activeViewDescriptors.length, 1, 'Sidebar should have 2 views');\n\t\tassert.strictEqual(panelViews.activeViewDescriptors.length, 0, 'Panel should have 1 view');\n\n\t\tassert.strictEqual(testObject.getViewLocationById(viewDescriptors[0].id), ViewContainerLocation.Sidebar, 'View should be located in the sidebar');\n\t\tassert.strictEqual(testObject.getViewLocationById(viewDescriptors[2].id), ViewContainerLocation.Panel, 'View should be located in the panel');\n\t});\n\n\ttest('move view events', async function () {\n\t\tconst testObject = aViewDescriptorService();\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 1',\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view2',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 2',\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view3',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 3',\n\t\t\t\tcanMoveView: true\n\t\t\t}\n\t\t];\n\n\t\tlet expectedSequence = '';\n\t\tlet actualSequence = '';\n\n\t\tconst containerMoveString = (view: IViewDescriptor, from: ViewContainer, to: ViewContainer) => {\n\t\t\treturn `Moved ${view.id} from ${from.id} to ${to.id}\\n`;\n\t\t};\n\n\t\tconst locationMoveString = (view: IViewDescriptor, from: ViewContainerLocation, to: ViewContainerLocation) => {\n\t\t\treturn `Moved ${view.id} from ${from === ViewContainerLocation.Sidebar ? 'Sidebar' : 'Panel'} to ${to === ViewContainerLocation.Sidebar ? 'Sidebar' : 'Panel'}\\n`;\n\t\t};\n\t\tdisposables.add(testObject.onDidChangeContainer(({ views, from, to }) => {\n\t\t\tviews.forEach(view => {\n\t\t\t\tactualSequence += containerMoveString(view, from, to);\n\t\t\t});\n\t\t}));\n\n\t\tdisposables.add(testObject.onDidChangeLocation(({ views, from, to }) => {\n\t\t\tviews.forEach(view => {\n\t\t\t\tactualSequence += locationMoveString(view, from, to);\n\t\t\t});\n\t\t}));\n\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(0, 2), sidebarContainer);\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(2), panelContainer);\n\n\t\texpectedSequence += locationMoveString(viewDescriptors[0], ViewContainerLocation.Sidebar, ViewContainerLocation.Panel);\n\t\ttestObject.moveViewToLocation(viewDescriptors[0], ViewContainerLocation.Panel);\n\t\texpectedSequence += containerMoveString(viewDescriptors[0], sidebarContainer, testObject.getViewContainerByViewId(viewDescriptors[0].id)!);\n\n\t\texpectedSequence += locationMoveString(viewDescriptors[2], ViewContainerLocation.Panel, ViewContainerLocation.Sidebar);\n\t\ttestObject.moveViewToLocation(viewDescriptors[2], ViewContainerLocation.Sidebar);\n\t\texpectedSequence += containerMoveString(viewDescriptors[2], panelContainer, testObject.getViewContainerByViewId(viewDescriptors[2].id)!);\n\n\t\texpectedSequence += locationMoveString(viewDescriptors[0], ViewContainerLocation.Panel, ViewContainerLocation.Sidebar);\n\t\texpectedSequence += containerMoveString(viewDescriptors[0], testObject.getViewContainerByViewId(viewDescriptors[0].id)!, sidebarContainer);\n\t\ttestObject.moveViewsToContainer([viewDescriptors[0]], sidebarContainer);\n\n\t\texpectedSequence += locationMoveString(viewDescriptors[2], ViewContainerLocation.Sidebar, ViewContainerLocation.Panel);\n\t\texpectedSequence += containerMoveString(viewDescriptors[2], testObject.getViewContainerByViewId(viewDescriptors[2].id)!, panelContainer);\n\t\ttestObject.moveViewsToContainer([viewDescriptors[2]], panelContainer);\n\n\t\texpectedSequence += locationMoveString(viewDescriptors[0], ViewContainerLocation.Sidebar, ViewContainerLocation.Panel);\n\t\texpectedSequence += containerMoveString(viewDescriptors[0], sidebarContainer, panelContainer);\n\t\ttestObject.moveViewsToContainer([viewDescriptors[0]], panelContainer);\n\n\t\texpectedSequence += locationMoveString(viewDescriptors[2], ViewContainerLocation.Panel, ViewContainerLocation.Sidebar);\n\t\texpectedSequence += containerMoveString(viewDescriptors[2], panelContainer, sidebarContainer);\n\t\ttestObject.moveViewsToContainer([viewDescriptors[2]], sidebarContainer);\n\n\t\texpectedSequence += locationMoveString(viewDescriptors[1], ViewContainerLocation.Sidebar, ViewContainerLocation.Panel);\n\t\texpectedSequence += locationMoveString(viewDescriptors[2], ViewContainerLocation.Sidebar, ViewContainerLocation.Panel);\n\t\texpectedSequence += containerMoveString(viewDescriptors[1], sidebarContainer, panelContainer);\n\t\texpectedSequence += containerMoveString(viewDescriptors[2], sidebarContainer, panelContainer);\n\t\ttestObject.moveViewsToContainer([viewDescriptors[1], viewDescriptors[2]], panelContainer);\n\n\t\tassert.strictEqual(actualSequence, expectedSequence, 'Event sequence not matching expected sequence');\n\t});\n\n\ttest('reset', async function () {\n\t\tconst testObject = aViewDescriptorService();\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 1',\n\t\t\t\tcanMoveView: true,\n\t\t\t\torder: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view2',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 2',\n\t\t\t\tcanMoveView: true,\n\t\t\t\torder: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view3',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 3',\n\t\t\t\tcanMoveView: true,\n\t\t\t\torder: 3\n\t\t\t}\n\t\t];\n\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(0, 2), sidebarContainer);\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(2), panelContainer);\n\n\t\ttestObject.moveViewToLocation(viewDescriptors[0], ViewContainerLocation.Panel);\n\t\ttestObject.moveViewsToContainer([viewDescriptors[1]], panelContainer);\n\t\ttestObject.moveViewToLocation(viewDescriptors[2], ViewContainerLocation.Sidebar);\n\n\t\tconst generatedPanel = assertIsDefined(testObject.getViewContainerByViewId(viewDescriptors[0].id));\n\t\tconst generatedSidebar = assertIsDefined(testObject.getViewContainerByViewId(viewDescriptors[2].id));\n\n\t\ttestObject.reset();\n\n\t\tconst sidebarViews = testObject.getViewContainerModel(sidebarContainer);\n\t\tassert.deepStrictEqual(sidebarViews.allViewDescriptors.map(v => v.id), ['view1', 'view2']);\n\t\tconst panelViews = testObject.getViewContainerModel(panelContainer);\n\t\tassert.deepStrictEqual(panelViews.allViewDescriptors.map(v => v.id), ['view3']);\n\n\t\tconst actual = JSON.parse(instantiationService.get(IStorageService).get('views.customizations', StorageScope.PROFILE)!);\n\t\tassert.deepStrictEqual(actual, { viewContainerLocations: {}, viewLocations: {}, viewContainerBadgeEnablementStates: {} });\n\n\t\tassert.deepStrictEqual(testObject.getViewContainerById(generatedPanel.id), null);\n\t\tassert.deepStrictEqual(testObject.getViewContainerById(generatedSidebar.id), null);\n\t});\n\n\ttest('initialize with custom locations', async function () {\n\t\tconst storageService = instantiationService.get(IStorageService);\n\t\tconst viewContainer1 = ViewContainersRegistry.registerViewContainer({ id: `${viewContainerIdPrefix}-${generateUuid()}`, title: { value: 'test', original: 'test' }, ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst generateViewContainer1 = `workbench.views.service.${ViewContainerLocationToString(ViewContainerLocation.Sidebar)}.${generateUuid()}`;\n\t\tconst viewsCustomizations = {\n\t\t\tviewContainerLocations: {\n\t\t\t\t[generateViewContainer1]: ViewContainerLocation.Sidebar,\n\t\t\t\t[viewContainer1.id]: ViewContainerLocation.AuxiliaryBar\n\t\t\t},\n\t\t\tviewLocations: {\n\t\t\t\t'view1': generateViewContainer1\n\t\t\t}\n\t\t};\n\t\tstorageService.store('views.customizations', JSON.stringify(viewsCustomizations), StorageScope.PROFILE, StorageTarget.USER);\n\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 1',\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view2',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 2',\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view3',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 3',\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view4',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 4',\n\t\t\t\tcanMoveView: true\n\t\t\t}\n\t\t];\n\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(0, 3), sidebarContainer);\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(3), viewContainer1);\n\n\t\tconst testObject = aViewDescriptorService();\n\n\t\tconst sidebarViews = testObject.getViewContainerModel(sidebarContainer);\n\t\tassert.deepStrictEqual(sidebarViews.allViewDescriptors.map(v => v.id), ['view2', 'view3']);\n\n\t\tconst generatedViewContainerViews = testObject.getViewContainerModel(testObject.getViewContainerById(generateViewContainer1)!);\n\t\tassert.deepStrictEqual(generatedViewContainerViews.allViewDescriptors.map(v => v.id), ['view1']);\n\n\t\tconst viewContainer1Views = testObject.getViewContainerModel(viewContainer1);\n\t\tassert.deepStrictEqual(testObject.getViewContainerLocation(viewContainer1), ViewContainerLocation.AuxiliaryBar);\n\t\tassert.deepStrictEqual(viewContainer1Views.allViewDescriptors.map(v => v.id), ['view4']);\n\t});\n\n\ttest('storage change', async function () {\n\t\tconst testObject = aViewDescriptorService();\n\n\t\tconst viewContainer1 = ViewContainersRegistry.registerViewContainer({ id: `${viewContainerIdPrefix}-${generateUuid()}`, title: { value: 'test', original: 'test' }, ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst generateViewContainer1 = `workbench.views.service.${ViewContainerLocationToString(ViewContainerLocation.Sidebar)}.${generateUuid()}`;\n\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 1',\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view2',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 2',\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view3',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 3',\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view4',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 4',\n\t\t\t\tcanMoveView: true\n\t\t\t}\n\t\t];\n\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(0, 3), sidebarContainer);\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(3), viewContainer1);\n\n\t\tconst viewsCustomizations = {\n\t\t\tviewContainerLocations: {\n\t\t\t\t[generateViewContainer1]: ViewContainerLocation.Sidebar,\n\t\t\t\t[viewContainer1.id]: ViewContainerLocation.AuxiliaryBar\n\t\t\t},\n\t\t\tviewLocations: {\n\t\t\t\t'view1': generateViewContainer1\n\t\t\t}\n\t\t};\n\t\tinstantiationService.get(IStorageService).store('views.customizations', JSON.stringify(viewsCustomizations), StorageScope.PROFILE, StorageTarget.USER);\n\n\t\tconst sidebarViews = testObject.getViewContainerModel(sidebarContainer);\n\t\tassert.deepStrictEqual(sidebarViews.allViewDescriptors.map(v => v.id), ['view2', 'view3']);\n\n\t\tconst generatedViewContainerViews = testObject.getViewContainerModel(testObject.getViewContainerById(generateViewContainer1)!);\n\t\tassert.deepStrictEqual(generatedViewContainerViews.allViewDescriptors.map(v => v.id), ['view1']);\n\n\t\tconst viewContainer1Views = testObject.getViewContainerModel(viewContainer1);\n\t\tassert.deepStrictEqual(testObject.getViewContainerLocation(viewContainer1), ViewContainerLocation.AuxiliaryBar);\n\t\tassert.deepStrictEqual(viewContainer1Views.allViewDescriptors.map(v => v.id), ['view4']);\n\t});\n\n\ttest('orphan views', async function () {\n\t\tconst storageService = instantiationService.get(IStorageService);\n\t\tconst viewsCustomizations = {\n\t\t\tviewContainerLocations: {},\n\t\t\tviewLocations: {\n\t\t\t\t'view1': `${viewContainerIdPrefix}-${generateUuid()}`\n\t\t\t}\n\t\t};\n\t\tstorageService.store('views.customizations', JSON.stringify(viewsCustomizations), StorageScope.PROFILE, StorageTarget.USER);\n\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 1',\n\t\t\t\tcanMoveView: true,\n\t\t\t\torder: 1\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view2',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 2',\n\t\t\t\tcanMoveView: true,\n\t\t\t\torder: 2\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view3',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 3',\n\t\t\t\tcanMoveView: true,\n\t\t\t\torder: 3\n\t\t\t}\n\t\t];\n\n\t\tViewsRegistry.registerViews(viewDescriptors, sidebarContainer);\n\n\t\tconst testObject = aViewDescriptorService();\n\n\t\tconst sidebarViews = testObject.getViewContainerModel(sidebarContainer);\n\t\tassert.deepStrictEqual(sidebarViews.allViewDescriptors.map(v => v.id), ['view2', 'view3']);\n\n\t\ttestObject.whenExtensionsRegistered();\n\t\tassert.deepStrictEqual(sidebarViews.allViewDescriptors.map(v => v.id), ['view1', 'view2', 'view3']);\n\t});\n\n\ttest('orphan view containers', async function () {\n\t\tconst storageService = instantiationService.get(IStorageService);\n\t\tconst generatedViewContainerId = `workbench.views.service.${ViewContainerLocationToString(ViewContainerLocation.Sidebar)}.${generateUuid()}`;\n\t\tconst viewsCustomizations = {\n\t\t\tviewContainerLocations: {\n\t\t\t\t[generatedViewContainerId]: ViewContainerLocation.Sidebar\n\t\t\t},\n\t\t\tviewLocations: {}\n\t\t};\n\t\tstorageService.store('views.customizations', JSON.stringify(viewsCustomizations), StorageScope.PROFILE, StorageTarget.USER);\n\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 1',\n\t\t\t\tcanMoveView: true,\n\t\t\t\torder: 1\n\t\t\t}\n\t\t];\n\n\t\tViewsRegistry.registerViews(viewDescriptors, sidebarContainer);\n\n\t\tconst testObject = aViewDescriptorService();\n\t\ttestObject.whenExtensionsRegistered();\n\n\t\tassert.deepStrictEqual(testObject.getViewContainerById(generatedViewContainerId), null);\n\t\tassert.deepStrictEqual(testObject.isViewContainerRemovedPermanently(generatedViewContainerId), true);\n\n\t\tconst actual = JSON.parse(storageService.get('views.customizations', StorageScope.PROFILE)!);\n\t\tassert.deepStrictEqual(actual, { viewContainerLocations: {}, viewLocations: {}, viewContainerBadgeEnablementStates: {} });\n\t});\n\n\ttest('custom locations take precedence when default view container of views change', async function () {\n\t\tconst storageService = instantiationService.get(IStorageService);\n\t\tconst viewContainer1 = ViewContainersRegistry.registerViewContainer({ id: `${viewContainerIdPrefix}-${generateUuid()}`, title: { value: 'test', original: 'test' }, ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst generateViewContainer1 = `workbench.views.service.${ViewContainerLocationToString(ViewContainerLocation.Sidebar)}.${generateUuid()}`;\n\t\tconst viewsCustomizations = {\n\t\t\tviewContainerLocations: {\n\t\t\t\t[generateViewContainer1]: ViewContainerLocation.Sidebar,\n\t\t\t\t[viewContainer1.id]: ViewContainerLocation.AuxiliaryBar\n\t\t\t},\n\t\t\tviewLocations: {\n\t\t\t\t'view1': generateViewContainer1\n\t\t\t}\n\t\t};\n\t\tstorageService.store('views.customizations', JSON.stringify(viewsCustomizations), StorageScope.PROFILE, StorageTarget.USER);\n\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 1',\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view2',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 2',\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view3',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 3',\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view4',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 4',\n\t\t\t\tcanMoveView: true\n\t\t\t}\n\t\t];\n\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(0, 3), sidebarContainer);\n\t\tViewsRegistry.registerViews(viewDescriptors.slice(3), viewContainer1);\n\n\t\tconst testObject = aViewDescriptorService();\n\t\tViewsRegistry.moveViews([viewDescriptors[0], viewDescriptors[1]], panelContainer);\n\n\t\tconst sidebarViews = testObject.getViewContainerModel(sidebarContainer);\n\t\tassert.deepStrictEqual(sidebarViews.allViewDescriptors.map(v => v.id), ['view3']);\n\n\t\tconst panelViews = testObject.getViewContainerModel(panelContainer);\n\t\tassert.deepStrictEqual(panelViews.allViewDescriptors.map(v => v.id), ['view2']);\n\n\t\tconst generatedViewContainerViews = testObject.getViewContainerModel(testObject.getViewContainerById(generateViewContainer1)!);\n\t\tassert.deepStrictEqual(generatedViewContainerViews.allViewDescriptors.map(v => v.id), ['view1']);\n\n\t\tconst viewContainer1Views = testObject.getViewContainerModel(viewContainer1);\n\t\tassert.deepStrictEqual(testObject.getViewContainerLocation(viewContainer1), ViewContainerLocation.AuxiliaryBar);\n\t\tassert.deepStrictEqual(viewContainer1Views.allViewDescriptors.map(v => v.id), ['view4']);\n\t});\n\n\ttest('view containers with not existing views are not removed from customizations', async function () {\n\t\tconst storageService = instantiationService.get(IStorageService);\n\t\tconst viewContainer1 = ViewContainersRegistry.registerViewContainer({ id: `${viewContainerIdPrefix}-${generateUuid()}`, title: { value: 'test', original: 'test' }, ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst generateViewContainer1 = `workbench.views.service.${ViewContainerLocationToString(ViewContainerLocation.Sidebar)}.${generateUuid()}`;\n\t\tconst viewsCustomizations = {\n\t\t\tviewContainerLocations: {\n\t\t\t\t[generateViewContainer1]: ViewContainerLocation.Sidebar,\n\t\t\t\t[viewContainer1.id]: ViewContainerLocation.AuxiliaryBar\n\t\t\t},\n\t\t\tviewLocations: {\n\t\t\t\t'view5': generateViewContainer1\n\t\t\t}\n\t\t};\n\t\tstorageService.store('views.customizations', JSON.stringify(viewsCustomizations), StorageScope.PROFILE, StorageTarget.USER);\n\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 1',\n\t\t\t\tcanMoveView: true\n\t\t\t}\n\t\t];\n\n\t\tViewsRegistry.registerViews(viewDescriptors, viewContainer1);\n\n\t\tconst testObject = aViewDescriptorService();\n\t\ttestObject.whenExtensionsRegistered();\n\n\t\tconst viewContainer1Views = testObject.getViewContainerModel(viewContainer1);\n\t\tassert.deepStrictEqual(testObject.getViewContainerLocation(viewContainer1), ViewContainerLocation.AuxiliaryBar);\n\t\tassert.deepStrictEqual(viewContainer1Views.allViewDescriptors.map(v => v.id), ['view1']);\n\n\t\tconst actual = JSON.parse(storageService.get('views.customizations', StorageScope.PROFILE)!);\n\t\tassert.deepStrictEqual(actual, viewsCustomizations);\n\t});\n\n\ttest('storage change also updates locations even if views do not exists and views are registered later', async function () {\n\t\tconst storageService = instantiationService.get(IStorageService);\n\t\tconst testObject = aViewDescriptorService();\n\n\t\tconst generateViewContainerId = `workbench.views.service.${ViewContainerLocationToString(ViewContainerLocation.AuxiliaryBar)}.${generateUuid()}`;\n\t\tconst viewsCustomizations = {\n\t\t\tviewContainerLocations: {\n\t\t\t\t[generateViewContainerId]: ViewContainerLocation.AuxiliaryBar,\n\t\t\t},\n\t\t\tviewLocations: {\n\t\t\t\t'view1': generateViewContainerId\n\t\t\t}\n\t\t};\n\t\tstorageService.store('views.customizations', JSON.stringify(viewsCustomizations), StorageScope.PROFILE, StorageTarget.USER);\n\n\t\tconst viewContainer = ViewContainersRegistry.registerViewContainer({ id: `${viewContainerIdPrefix}-${generateUuid()}`, title: { value: 'test', original: 'test' }, ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 1',\n\t\t\t\tcanMoveView: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view2',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 2',\n\t\t\t\tcanMoveView: true\n\t\t\t}\n\t\t];\n\t\tViewsRegistry.registerViews(viewDescriptors, viewContainer);\n\n\t\ttestObject.whenExtensionsRegistered();\n\n\t\tconst viewContainer1Views = testObject.getViewContainerModel(viewContainer);\n\t\tassert.deepStrictEqual(viewContainer1Views.allViewDescriptors.map(v => v.id), ['view2']);\n\n\t\tconst generateViewContainer = testObject.getViewContainerById(generateViewContainerId)!;\n\t\tassert.deepStrictEqual(testObject.getViewContainerLocation(generateViewContainer), ViewContainerLocation.AuxiliaryBar);\n\t\tconst generatedViewContainerModel = testObject.getViewContainerModel(generateViewContainer);\n\t\tassert.deepStrictEqual(generatedViewContainerModel.allViewDescriptors.map(v => v.id), ['view1']);\n\t});\n\n\ttest('storage change move views and retain visibility state', async function () {\n\t\tconst storageService = instantiationService.get(IStorageService);\n\t\tconst testObject = aViewDescriptorService();\n\n\t\tconst viewContainer = ViewContainersRegistry.registerViewContainer({ id: `${viewContainerIdPrefix}-${generateUuid()}`, title: { value: 'test', original: 'test' }, ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst viewDescriptors: IViewDescriptor[] = [\n\t\t\t{\n\t\t\t\tid: 'view1',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 1',\n\t\t\t\tcanMoveView: true,\n\t\t\t\tcanToggleVisibility: true\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 'view2',\n\t\t\t\tctorDescriptor: null!,\n\t\t\t\tname: 'Test View 2',\n\t\t\t\tcanMoveView: true\n\t\t\t}\n\t\t];\n\t\tViewsRegistry.registerViews(viewDescriptors, viewContainer);\n\n\t\ttestObject.whenExtensionsRegistered();\n\n\t\tconst viewContainer1Views = testObject.getViewContainerModel(viewContainer);\n\t\tviewContainer1Views.setVisible('view1', false);\n\n\t\tconst generateViewContainerId = `workbench.views.service.${ViewContainerLocationToString(ViewContainerLocation.AuxiliaryBar)}.${generateUuid()}`;\n\t\tconst viewsCustomizations = {\n\t\t\tviewContainerLocations: {\n\t\t\t\t[generateViewContainerId]: ViewContainerLocation.AuxiliaryBar,\n\t\t\t},\n\t\t\tviewLocations: {\n\t\t\t\t'view1': generateViewContainerId\n\t\t\t}\n\t\t};\n\t\tstorageService.store('views.customizations', JSON.stringify(viewsCustomizations), StorageScope.PROFILE, StorageTarget.USER);\n\n\t\tconst generateViewContainer = testObject.getViewContainerById(generateViewContainerId)!;\n\t\tconst generatedViewContainerModel = testObject.getViewContainerModel(generateViewContainer);\n\n\t\tassert.deepStrictEqual(viewContainer1Views.allViewDescriptors.map(v => v.id), ['view2']);\n\t\tassert.deepStrictEqual(testObject.getViewContainerLocation(generateViewContainer), ViewContainerLocation.AuxiliaryBar);\n\t\tassert.deepStrictEqual(generatedViewContainerModel.allViewDescriptors.map(v => v.id), ['view1']);\n\n\t\tstorageService.store('views.customizations', JSON.stringify({}), StorageScope.PROFILE, StorageTarget.USER);\n\n\t\tassert.deepStrictEqual(viewContainer1Views.allViewDescriptors.map(v => v.id).sort((a, b) => compare(a, b)), ['view1', 'view2']);\n\t\tassert.deepStrictEqual(viewContainer1Views.visibleViewDescriptors.map(v => v.id), ['view2']);\n\t\tassert.deepStrictEqual(generatedViewContainerModel.allViewDescriptors.map(v => v.id), []);\n\t});\n\n});\n"]}