{"version":3,"sources":["vs/workbench/services/lifecycle/browser/lifecycleService.ts"],"names":[],"mappings":"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","file":"lifecycleService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ShutdownReason, ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { AbstractLifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycleService';\nimport { localize } from 'vs/nls';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { addDisposableListener, EventType } from 'vs/base/browser/dom';\nimport { IStorageService, WillSaveStateReason } from 'vs/platform/storage/common/storage';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nexport class BrowserLifecycleService extends AbstractLifecycleService {\n\n\tprivate beforeUnloadListener: IDisposable | undefined = undefined;\n\tprivate unloadListener: IDisposable | undefined = undefined;\n\n\tprivate ignoreBeforeUnload = false;\n\n\tprivate didUnload = false;\n\n\tconstructor(\n\t\t@ILogService logService: ILogService,\n\t\t@IStorageService storageService: IStorageService\n\t) {\n\t\tsuper(logService, storageService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Listen to `beforeUnload` to support to veto\n\t\tthis.beforeUnloadListener = addDisposableListener(window, EventType.BEFORE_UNLOAD, (e: BeforeUnloadEvent) => this.onBeforeUnload(e));\n\n\t\t// Listen to `pagehide` to support orderly shutdown\n\t\t// We explicitly do not listen to `unload` event\n\t\t// which would disable certain browser caching.\n\t\t// We currently do not handle the `persisted` property\n\t\t// (https://github.com/microsoft/vscode/issues/136216)\n\t\tthis.unloadListener = addDisposableListener(window, EventType.PAGE_HIDE, () => this.onUnload());\n\t}\n\n\tprivate onBeforeUnload(event: BeforeUnloadEvent): void {\n\n\t\t// Before unload ignored (once)\n\t\tif (this.ignoreBeforeUnload) {\n\t\t\tthis.logService.info('[lifecycle] onBeforeUnload triggered but ignored once');\n\n\t\t\tthis.ignoreBeforeUnload = false;\n\t\t}\n\n\t\t// Before unload with veto support\n\t\telse {\n\t\t\tthis.logService.info('[lifecycle] onBeforeUnload triggered and handled with veto support');\n\n\t\t\tthis.doShutdown(() => this.vetoBeforeUnload(event));\n\t\t}\n\t}\n\n\tprivate vetoBeforeUnload(event: BeforeUnloadEvent): void {\n\t\tevent.preventDefault();\n\t\tevent.returnValue = localize('lifecycleVeto', \"Changes that you made may not be saved. Please check press 'Cancel' and try again.\");\n\t}\n\n\twithExpectedShutdown(reason: ShutdownReason): Promise<void>;\n\twithExpectedShutdown(reason: { disableShutdownHandling: true }, callback: Function): void;\n\twithExpectedShutdown(reason: ShutdownReason | { disableShutdownHandling: true }, callback?: Function): Promise<void> | void {\n\n\t\t// Standard shutdown\n\t\tif (typeof reason === 'number') {\n\t\t\tthis.shutdownReason = reason;\n\n\t\t\t// Ensure UI state is persisted\n\t\t\treturn this.storageService.flush(WillSaveStateReason.SHUTDOWN);\n\t\t}\n\n\t\t// Before unload handling ignored for duration of callback\n\t\telse {\n\t\t\tthis.ignoreBeforeUnload = true;\n\t\t\ttry {\n\t\t\t\tcallback?.();\n\t\t\t} finally {\n\t\t\t\tthis.ignoreBeforeUnload = false;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync shutdown(): Promise<void> {\n\t\tthis.logService.info('[lifecycle] shutdown triggered');\n\n\t\t// An explicit shutdown renders our unload\n\t\t// event handlers disabled, so dispose them.\n\t\tthis.beforeUnloadListener?.dispose();\n\t\tthis.unloadListener?.dispose();\n\n\t\t// Ensure UI state is persisted\n\t\tawait this.storageService.flush(WillSaveStateReason.SHUTDOWN);\n\n\t\t// Handle shutdown without veto support\n\t\tthis.doShutdown();\n\t}\n\n\tprivate doShutdown(vetoShutdown?: () => void): void {\n\t\tconst logService = this.logService;\n\n\t\t// Optimistically trigger a UI state flush\n\t\t// without waiting for it. The browser does\n\t\t// not guarantee that this is being executed\n\t\t// but if a dialog opens, we have a chance\n\t\t// to succeed.\n\t\tthis.storageService.flush(WillSaveStateReason.SHUTDOWN);\n\n\t\tlet veto = false;\n\n\t\tfunction handleVeto(vetoResult: boolean | Promise<boolean>, id: string) {\n\t\t\tif (typeof vetoShutdown !== 'function') {\n\t\t\t\treturn; // veto handling disabled\n\t\t\t}\n\n\t\t\tif (vetoResult instanceof Promise) {\n\t\t\t\tlogService.error(`[lifecycle] Long running operations before shutdown are unsupported in the web (id: ${id})`);\n\n\t\t\t\tveto = true; // implicitly vetos since we cannot handle promises in web\n\t\t\t}\n\n\t\t\tif (vetoResult === true) {\n\t\t\t\tlogService.info(`[lifecycle]: Unload was prevented (id: ${id})`);\n\n\t\t\t\tveto = true;\n\t\t\t}\n\t\t}\n\n\t\t// Before Shutdown\n\t\tthis._onBeforeShutdown.fire({\n\t\t\treason: ShutdownReason.QUIT,\n\t\t\tveto(value, id) {\n\t\t\t\thandleVeto(value, id);\n\t\t\t},\n\t\t\tfinalVeto(valueFn, id) {\n\t\t\t\thandleVeto(valueFn(), id); // in browser, trigger instantly because we do not support async anyway\n\t\t\t}\n\t\t});\n\n\t\t// Veto: handle if provided\n\t\tif (veto && typeof vetoShutdown === 'function') {\n\t\t\treturn vetoShutdown();\n\t\t}\n\n\t\t// No veto, continue to shutdown\n\t\treturn this.onUnload();\n\t}\n\n\tprivate onUnload(): void {\n\t\tif (this.didUnload) {\n\t\t\treturn; // only once\n\t\t}\n\n\t\tthis.didUnload = true;\n\n\t\t// Register a late `pageshow` listener specifically on unload\n\t\tthis._register(addDisposableListener(window, EventType.PAGE_SHOW, (e: PageTransitionEvent) => this.onLoadAfterUnload(e)));\n\n\t\t// First indicate will-shutdown\n\t\tconst logService = this.logService;\n\t\tthis._onWillShutdown.fire({\n\t\t\treason: ShutdownReason.QUIT,\n\t\t\tjoiners: () => [], \t\t\t\t// Unsupported in web\n\t\t\ttoken: CancellationToken.None, \t// Unsupported in web\n\t\t\tjoin(promise, joiner) {\n\t\t\t\tlogService.error(`[lifecycle] Long running operations during shutdown are unsupported in the web (id: ${joiner.id})`);\n\t\t\t},\n\t\t\tforce: () => { /* No-Op in web */ },\n\t\t});\n\n\t\t// Finally end with did-shutdown\n\t\tthis._onDidShutdown.fire();\n\t}\n\n\tprivate onLoadAfterUnload(event: PageTransitionEvent): void {\n\n\t\t// We only really care about page-show events\n\t\t// where the browser indicates to us that the\n\t\t// page was restored from cache and not freshly\n\t\t// loaded.\n\t\tconst wasRestoredFromCache = event.persisted;\n\t\tif (!wasRestoredFromCache) {\n\t\t\treturn;\n\t\t}\n\n\t\t// At this point, we know that the page was restored from\n\t\t// cache even though it was unloaded before,\n\t\t// so in order to get back to a functional workbench, we\n\t\t// currently can only reload the window\n\t\t// Docs: https://web.dev/bfcache/#optimize-your-pages-for-bfcache\n\t\t// Refs: https://github.com/microsoft/vscode/issues/136035\n\t\tthis.withExpectedShutdown({ disableShutdownHandling: true }, () => window.location.reload());\n\t}\n}\n\nregisterSingleton(ILifecycleService, BrowserLifecycleService, InstantiationType.Eager);\n"]}