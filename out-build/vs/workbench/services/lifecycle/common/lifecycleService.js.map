{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/lifecycle/common/lifecycleService.ts"],"names":[],"mappings":"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","file":"lifecycleService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { Barrier } from 'vs/base/common/async';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ILifecycleService, WillShutdownEvent, StartupKind, LifecyclePhase, LifecyclePhaseToString, ShutdownReason, BeforeShutdownErrorEvent, InternalBeforeShutdownEvent } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { mark } from 'vs/base/common/performance';\nimport { IStorageService, StorageScope, StorageTarget, WillSaveStateReason } from 'vs/platform/storage/common/storage';\n\nexport abstract class AbstractLifecycleService extends Disposable implements ILifecycleService {\n\n\tprivate static readonly LAST_SHUTDOWN_REASON_KEY = 'lifecyle.lastShutdownReason';\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprotected readonly _onBeforeShutdown = this._register(new Emitter<InternalBeforeShutdownEvent>());\n\treadonly onBeforeShutdown = this._onBeforeShutdown.event;\n\n\tprotected readonly _onWillShutdown = this._register(new Emitter<WillShutdownEvent>());\n\treadonly onWillShutdown = this._onWillShutdown.event;\n\n\tprotected readonly _onDidShutdown = this._register(new Emitter<void>());\n\treadonly onDidShutdown = this._onDidShutdown.event;\n\n\tprotected readonly _onBeforeShutdownError = this._register(new Emitter<BeforeShutdownErrorEvent>());\n\treadonly onBeforeShutdownError = this._onBeforeShutdownError.event;\n\n\tprotected readonly _onShutdownVeto = this._register(new Emitter<void>());\n\treadonly onShutdownVeto = this._onShutdownVeto.event;\n\n\tprivate _startupKind: StartupKind;\n\tget startupKind(): StartupKind { return this._startupKind; }\n\n\tprivate _phase = LifecyclePhase.Starting;\n\tget phase(): LifecyclePhase { return this._phase; }\n\n\tprivate readonly phaseWhen = new Map<LifecyclePhase, Barrier>();\n\n\tprotected shutdownReason: ShutdownReason | undefined;\n\n\tconstructor(\n\t\t@ILogService protected readonly logService: ILogService,\n\t\t@IStorageService protected readonly storageService: IStorageService\n\t) {\n\t\tsuper();\n\n\t\t// Resolve startup kind\n\t\tthis._startupKind = this.resolveStartupKind();\n\n\t\t// Save shutdown reason to retrieve on next startup\n\t\tthis.storageService.onWillSaveState(e => {\n\t\t\tif (e.reason === WillSaveStateReason.SHUTDOWN) {\n\t\t\t\tthis.storageService.store(AbstractLifecycleService.LAST_SHUTDOWN_REASON_KEY, this.shutdownReason, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate resolveStartupKind(): StartupKind {\n\n\t\t// Retrieve and reset last shutdown reason\n\t\tconst lastShutdownReason = this.storageService.getNumber(AbstractLifecycleService.LAST_SHUTDOWN_REASON_KEY, StorageScope.WORKSPACE);\n\t\tthis.storageService.remove(AbstractLifecycleService.LAST_SHUTDOWN_REASON_KEY, StorageScope.WORKSPACE);\n\n\t\t// Convert into startup kind\n\t\tlet startupKind: StartupKind;\n\t\tswitch (lastShutdownReason) {\n\t\t\tcase ShutdownReason.RELOAD:\n\t\t\t\tstartupKind = StartupKind.ReloadedWindow;\n\t\t\t\tbreak;\n\t\t\tcase ShutdownReason.LOAD:\n\t\t\t\tstartupKind = StartupKind.ReopenedWindow;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tstartupKind = StartupKind.NewWindow;\n\t\t}\n\n\t\tthis.logService.trace(`[lifecycle] starting up (startup kind: ${startupKind})`);\n\n\t\treturn startupKind;\n\t}\n\n\tset phase(value: LifecyclePhase) {\n\t\tif (value < this.phase) {\n\t\t\tthrow new Error('Lifecycle cannot go backwards');\n\t\t}\n\n\t\tif (this._phase === value) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logService.trace(`lifecycle: phase changed (value: ${value})`);\n\n\t\tthis._phase = value;\n\t\tmark(`code/LifecyclePhase/${LifecyclePhaseToString(value)}`);\n\n\t\tconst barrier = this.phaseWhen.get(this._phase);\n\t\tif (barrier) {\n\t\t\tbarrier.open();\n\t\t\tthis.phaseWhen.delete(this._phase);\n\t\t}\n\t}\n\n\tasync when(phase: LifecyclePhase): Promise<void> {\n\t\tif (phase <= this._phase) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet barrier = this.phaseWhen.get(phase);\n\t\tif (!barrier) {\n\t\t\tbarrier = new Barrier();\n\t\t\tthis.phaseWhen.set(phase, barrier);\n\t\t}\n\n\t\tawait barrier.wait();\n\t}\n\n\t/**\n\t * Subclasses to implement the explicit shutdown method.\n\t */\n\tabstract shutdown(): Promise<void>;\n}\n"]}