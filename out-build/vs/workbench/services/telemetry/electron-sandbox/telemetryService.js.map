{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/telemetry/electron-sandbox/telemetryService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAiBzF,IAAM,IAAI,GAAV,MAAM,IAAiB,SAAQ,eAAG;QAOxC,IAAI,SAAS,KAAa,OAAO,IAAI,CAAC,CAAC,CAAI,SAAS,CAAC,CAAC,CAAC;QACvD,IAAI,SAAS,KAAa,OAAO,IAAI,CAAC,CAAC,CAAI,SAAS,CAAC,CAAC,CAAC;QACvD,IAAI,gBAAgB,KAAa,OAAO,IAAI,CAAC,CAAC,CAAI,gBAAgB,CAAC,CAAC,CAAC;QACrE,IAAI,YAAY,KAA0B,OAAO,IAAI,CAAC,CAAC,CAAI,YAAY,CAAC,CAAC,CAAC;QAE1E,YACqC,kBAAwB,EAC3C,cAAmB,EACb,oBAA0B,EAChC,cAAmB,EACb,oBAAyB;YAEhD,KAAK,EAAE,CAAC;YAER,IAAI,IAAA,oBAAG,EAAe,cAAc,EAAE,kBAAkB,CAAC,EAAE;gBAC1D,MAAM,UAAU,GAAG,IAAA,oBAAG,EAAiB,cAAc,EAAE,oBAAoB,CAAC,CAAC;gBAC7E,MAAM,OAAO,GAAG,oBAAoB,CAAC,UAAU,CAAC,mBAAmB,CAAC,CAAC;gBACrE,MAAM,MAAM,GAA4B;oBACvC,SAAS,EAAE,CAAC,IAAI,mBAAI,CAAoB,OAAO,CAAC,CAAC;oBACjD,gBAAgB,EAAE,IAAA,gCAAI,EAA6B,cAAc,EAAE,kBAAkB,CAAC,EAAE,CAAC,OAAO,EAAE,kBAAkB,CAAC,EAAE,CAAC,QAAQ,EAAE,cAAc,CAAC,MAAM,EAAE,cAAc,CAAC,OAAO,EAAE,kBAAkB,CAAC,SAAS,EAAE,UAAU,EAAE,YAAE,EAAO,kBAAkB,CAAC,eAAe,CAAC;oBACvQ,QAAQ,EAAE,IAAA,oBAAG,EAAwB,kBAAkB,CAAC;oBACxD,kBAAkB,EAAE,IAAI;iBACxB,CAAC;gBAEF,IAAI,CAAC,CAAC,GAAM,IAAI,CAAC,CAAC,CAAS,IAAI,sBAAoB,CAAC,MAAM,EAAE,oBAAoB,EAAE,cAAc,CAAC,CAAC,CAAC;aACnG;iBAAM;gBACN,IAAI,CAAC,CAAC,GAAM,oBAAG,CAAkB;aACjC;YAED,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,CAAC,CAAI,kBAAkB,CAAC;QACxD,CAAC;QAED,qBAAqB,CAAC,IAAY,EAAE,KAAa;YAChD,OAAO,IAAI,CAAC,CAAC,CAAI,qBAAqB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACrD,CAAC;QAED,IAAI,cAAc;YACjB,OAAO,IAAI,CAAC,CAAC,CAAI,cAAc,CAAC;QACjC,CAAC;QAED,SAAS,CAAC,SAAiB,EAAE,IAAqB;YACjD,IAAI,CAAC,CAAC,CAAI,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACtC,CAAC;QAED,UAAU,CAAsF,SAAiB,EAAE,IAAgC;YAClJ,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,IAAsB,CAAC,CAAC;QACnD,CAAC;QAED,cAAc,CAAC,cAAsB,EAAE,IAAqB;YAC3D,IAAI,CAAC,CAAC,CAAI,cAAc,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;QAChD,CAAC;QAED,eAAe,CAAsF,SAAiB,EAAE,IAAgC;YACvJ,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,IAAsB,CAAC,CAAC;QACxD,CAAC;KACD,CAAA;IA9DY,oBAAI;mBAAJ,IAAI;QAad,WAAA,yBAAI,CAAA;QACJ,WAAA,oBAAG,CAAA;QACH,WAAA,eAAI,CAAA;QACJ,WAAA,aAAG,CAAA;QACH,WAAA,mBAAG,CAAA;OAjBO,IAAI,CA8DhB;IAED,IAAA,gBAAG,EAAe,eAAG,EAAgB,IAAI,oCAAwC,CAAC","file":"telemetryService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITelemetryService, ITelemetryData, TelemetryLevel } from 'vs/platform/telemetry/common/telemetry';\nimport { supportsTelemetry, NullTelemetryService, getPiiPathsFromEnvironment, isInternalTelemetry } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { ISharedProcessService } from 'vs/platform/ipc/electron-sandbox/services';\nimport { TelemetryAppenderClient } from 'vs/platform/telemetry/common/telemetryIpc';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { resolveWorkbenchCommonProperties } from 'vs/workbench/services/telemetry/common/workbenchCommonProperties';\nimport { TelemetryService as BaseTelemetryService, ITelemetryServiceConfig } from 'vs/platform/telemetry/common/telemetryService';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ClassifiedEvent, StrictPropertyCheck, OmitMetadata, IGDPRProperty } from 'vs/platform/telemetry/common/gdprTypings';\nimport { process } from 'vs/base/parts/sandbox/electron-sandbox/globals';\n\nexport class TelemetryService extends Disposable implements ITelemetryService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate impl: ITelemetryService;\n\tpublic readonly sendErrorTelemetry: boolean;\n\n\tget sessionId(): string { return this.impl.sessionId; }\n\tget machineId(): string { return this.impl.machineId; }\n\tget firstSessionDate(): string { return this.impl.firstSessionDate; }\n\tget msftInternal(): boolean | undefined { return this.impl.msftInternal; }\n\n\tconstructor(\n\t\t@INativeWorkbenchEnvironmentService environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IProductService productService: IProductService,\n\t\t@ISharedProcessService sharedProcessService: ISharedProcessService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IConfigurationService configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tif (supportsTelemetry(productService, environmentService)) {\n\t\t\tconst isInternal = isInternalTelemetry(productService, configurationService);\n\t\t\tconst channel = sharedProcessService.getChannel('telemetryAppender');\n\t\t\tconst config: ITelemetryServiceConfig = {\n\t\t\t\tappenders: [new TelemetryAppenderClient(channel)],\n\t\t\t\tcommonProperties: resolveWorkbenchCommonProperties(storageService, environmentService.os.release, environmentService.os.hostname, productService.commit, productService.version, environmentService.machineId, isInternal, process, environmentService.remoteAuthority),\n\t\t\t\tpiiPaths: getPiiPathsFromEnvironment(environmentService),\n\t\t\t\tsendErrorTelemetry: true\n\t\t\t};\n\n\t\t\tthis.impl = this._register(new BaseTelemetryService(config, configurationService, productService));\n\t\t} else {\n\t\t\tthis.impl = NullTelemetryService;\n\t\t}\n\n\t\tthis.sendErrorTelemetry = this.impl.sendErrorTelemetry;\n\t}\n\n\tsetExperimentProperty(name: string, value: string): void {\n\t\treturn this.impl.setExperimentProperty(name, value);\n\t}\n\n\tget telemetryLevel(): TelemetryLevel {\n\t\treturn this.impl.telemetryLevel;\n\t}\n\n\tpublicLog(eventName: string, data?: ITelemetryData) {\n\t\tthis.impl.publicLog(eventName, data);\n\t}\n\n\tpublicLog2<E extends ClassifiedEvent<OmitMetadata<T>> = never, T extends IGDPRProperty = never>(eventName: string, data?: StrictPropertyCheck<T, E>) {\n\t\tthis.publicLog(eventName, data as ITelemetryData);\n\t}\n\n\tpublicLogError(errorEventName: string, data?: ITelemetryData) {\n\t\tthis.impl.publicLogError(errorEventName, data);\n\t}\n\n\tpublicLogError2<E extends ClassifiedEvent<OmitMetadata<T>> = never, T extends IGDPRProperty = never>(eventName: string, data?: StrictPropertyCheck<T, E>) {\n\t\tthis.publicLogError(eventName, data as ITelemetryData);\n\t}\n}\n\nregisterSingleton(ITelemetryService, TelemetryService, InstantiationType.Delayed);\n"]}