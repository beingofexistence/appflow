{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/telemetry/browser/telemetryService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAkBzF,IAAM,IAAI,GAAV,MAAM,IAAiB,SAAQ,eAAG;QAOxC,IAAI,SAAS,KAAa,OAAO,IAAI,CAAC,CAAC,CAAI,SAAS,CAAC,CAAC,CAAC;QACvD,IAAI,SAAS,KAAa,OAAO,IAAI,CAAC,CAAC,CAAI,SAAS,CAAC,CAAC,CAAC;QACvD,IAAI,gBAAgB,KAAa,OAAO,IAAI,CAAC,CAAC,CAAI,gBAAgB,CAAC,CAAC,CAAC;QACrE,IAAI,YAAY,KAA0B,OAAO,IAAI,CAAC,CAAC,CAAI,YAAY,CAAC,CAAC,CAAC;QAE1E,YACsC,kBAAuB,EAC/C,UAAe,EACZ,aAAkB,EACX,oBAAyB,EAC/B,cAAmB,EACnB,cAAmB,EACf,kBAAuB;YAE5C,KAAK,EAAE,CAAC;YAjBD,MAAC,GAAyB,oBAAG,CAAkB;YACvC,uBAAkB,GAAG,IAAI,CAAC;YAkBzC,IAAI,CAAC,CAAC,GAAM,IAAI,CAAC,CAAC,CAAiB,kBAAkB,EAAE,UAAU,EAAE,aAAa,EAAE,oBAAoB,EAAE,cAAc,EAAE,cAAc,EAAE,kBAAkB,CAAC,CAAC;YAE5J,kHAAkH;YAClH,IAAI,CAAC,CAAC,CAAS,oBAAoB,CAAC,wBAAwB,CAAC,CAAC,CAAC,EAAE;gBAChE,IAAI,CAAC,CAAC,oBAAoB,CAAC,eAAG,CAAkB,EAAE;oBACjD,IAAI,CAAC,CAAC,GAAM,IAAI,CAAC,CAAC,CAAiB,kBAAkB,EAAE,UAAU,EAAE,aAAa,EAAE,oBAAoB,EAAE,cAAc,EAAE,cAAc,EAAE,kBAAkB,CAAC,CAAC;iBAC5J;YACF,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAED;;;;WAIG;QACK,CAAC,CACR,kBAAuB,EACvB,UAAe,EACf,aAAkB,EAClB,oBAAyB,EACzB,cAAmB,EACnB,cAAmB,EACnB,kBAAuB;YAEvB,MAAM,kBAAkB,GAAG,IAAA,oBAAG,EAAe,cAAc,EAAE,kBAAkB,CAAC,IAAI,cAAc,CAAC,QAAQ,EAAE,OAAO,CAAC;YACrH,IAAI,kBAAkB,IAAI,IAAA,oBAAG,EAAe,oBAAoB,CAAC,gCAAwB,IAAI,IAAI,CAAC,CAAC,KAAQ,oBAAG,EAAmB;gBAChI,6FAA6F;gBAC7F,MAAM,SAAS,GAAyB,EAAE,CAAC;gBAC3C,MAAM,UAAU,GAAG,IAAA,oBAAG,EAAiB,cAAc,EAAE,oBAAoB,CAAC,CAAC;gBAC7E,MAAM,iBAAiB,GAAuB,kBAAkB,CAAC,aAAa,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,kBAAkB,CAAC,YAAY,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAAE,KAAK,EAAE,kBAAkB,CAAC,cAAc,CAAC,IAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,mBAAI,CAAqB,UAAU,EAAE,iBAAiB,EAAE,IAAI,EAAE,cAAc,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;gBACvU,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;gBAClC,SAAS,CAAC,IAAI,CAAC,IAAI,2BAAI,CAAiB,UAAU,EAAE,aAAa,EAAE,kBAAkB,EAAE,cAAc,CAAC,CAAC,CAAC;gBACxG,MAAM,MAAM,GAA4B;oBACvC,SAAS;oBACT,gBAAgB,EAAE,IAAA,gCAAI,EAA6B,cAAc,EAAE,cAAc,CAAC,MAAM,EAAE,cAAc,CAAC,OAAO,EAAE,UAAU,EAAE,kBAAkB,CAAC,eAAe,EAAE,cAAc,CAAC,kBAAkB,EAAE,cAAc,CAAC,wBAAwB,EAAE,kBAAkB,CAAC,OAAO,IAAI,kBAAkB,CAAC,OAAO,CAAC,gCAAgC,CAAC;oBACxU,kBAAkB,EAAE,IAAI,CAAC,kBAAkB;iBAC3C,CAAC;gBAEF,OAAO,IAAI,CAAC,CAAC,CAAS,IAAI,sBAAoB,CAAC,MAAM,EAAE,oBAAoB,EAAE,cAAc,CAAC,CAAC,CAAC;aAC9F;YACD,OAAO,IAAI,CAAC,CAAC,CAAI;QAClB,CAAC;QAED,qBAAqB,CAAC,IAAY,EAAE,KAAa;YAChD,OAAO,IAAI,CAAC,CAAC,CAAI,qBAAqB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACrD,CAAC;QAED,IAAI,cAAc;YACjB,OAAO,IAAI,CAAC,CAAC,CAAI,cAAc,CAAC;QACjC,CAAC;QAED,SAAS,CAAC,SAAiB,EAAE,IAAqB;YACjD,IAAI,CAAC,CAAC,CAAI,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACtC,CAAC;QAED,UAAU,CAAsF,SAAiB,EAAE,IAAgC;YAClJ,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,IAAsB,CAAC,CAAC;QACnD,CAAC;QAED,cAAc,CAAC,cAAsB,EAAE,IAAqB;YAC3D,IAAI,CAAC,CAAC,CAAI,SAAS,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC;QAC3C,CAAC;QAED,eAAe,CAAsF,SAAiB,EAAE,IAAgC;YACvJ,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,IAAsB,CAAC,CAAC;QACxD,CAAC;KACD,CAAA;IAzFY,oBAAI;mBAAJ,IAAI;QAad,WAAA,wBAAG,CAAA;QACH,WAAA,SAAG,CAAA;QACH,WAAA,SAAG,CAAA;QACH,WAAA,mBAAG,CAAA;QACH,WAAA,aAAG,CAAA;QACH,WAAA,oBAAG,CAAA;QACH,WAAA,wBAAG,CAAA;OAnBO,IAAI,CAyFhB;IAED,IAAA,gBAAG,EAAe,eAAG,EAAgB,IAAI,oCAAwC,CAAC","file":"telemetryService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ILogService, ILoggerService } from 'vs/platform/log/common/log';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { OneDataSystemWebAppender } from 'vs/platform/telemetry/browser/1dsAppender';\nimport { ClassifiedEvent, IGDPRProperty, OmitMetadata, StrictPropertyCheck } from 'vs/platform/telemetry/common/gdprTypings';\nimport { ITelemetryData, ITelemetryService, TelemetryLevel, TELEMETRY_SETTING_ID } from 'vs/platform/telemetry/common/telemetry';\nimport { TelemetryLogAppender } from 'vs/platform/telemetry/common/telemetryLogAppender';\nimport { ITelemetryServiceConfig, TelemetryService as BaseTelemetryService } from 'vs/platform/telemetry/common/telemetryService';\nimport { getTelemetryLevel, isInternalTelemetry, ITelemetryAppender, NullTelemetryService, supportsTelemetry } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { IBrowserWorkbenchEnvironmentService } from 'vs/workbench/services/environment/browser/environmentService';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { resolveWorkbenchCommonProperties } from 'vs/workbench/services/telemetry/browser/workbenchCommonProperties';\n\nexport class TelemetryService extends Disposable implements ITelemetryService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate impl: ITelemetryService = NullTelemetryService;\n\tpublic readonly sendErrorTelemetry = true;\n\n\tget sessionId(): string { return this.impl.sessionId; }\n\tget machineId(): string { return this.impl.machineId; }\n\tget firstSessionDate(): string { return this.impl.firstSessionDate; }\n\tget msftInternal(): boolean | undefined { return this.impl.msftInternal; }\n\n\tconstructor(\n\t\t@IBrowserWorkbenchEnvironmentService environmentService: IBrowserWorkbenchEnvironmentService,\n\t\t@ILogService logService: ILogService,\n\t\t@ILoggerService loggerService: ILoggerService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IProductService productService: IProductService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService\n\t) {\n\t\tsuper();\n\n\t\tthis.impl = this.initializeService(environmentService, logService, loggerService, configurationService, storageService, productService, remoteAgentService);\n\n\t\t// When the level changes it could change from off to on and we want to make sure telemetry is properly intialized\n\t\tthis._register(configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(TELEMETRY_SETTING_ID)) {\n\t\t\t\tthis.impl = this.initializeService(environmentService, logService, loggerService, configurationService, storageService, productService, remoteAgentService);\n\t\t\t}\n\t\t}));\n\t}\n\n\t/**\n\t * Initializes the telemetry service to be a full fledged service.\n\t * This is only done once and only when telemetry is enabled as this will also ping the endpoint to\n\t * ensure its not adblocked and we can send telemetry\n\t */\n\tprivate initializeService(\n\t\tenvironmentService: IBrowserWorkbenchEnvironmentService,\n\t\tlogService: ILogService,\n\t\tloggerService: ILoggerService,\n\t\tconfigurationService: IConfigurationService,\n\t\tstorageService: IStorageService,\n\t\tproductService: IProductService,\n\t\tremoteAgentService: IRemoteAgentService\n\t) {\n\t\tconst telemetrySupported = supportsTelemetry(productService, environmentService) && productService.aiConfig?.ariaKey;\n\t\tif (telemetrySupported && getTelemetryLevel(configurationService) !== TelemetryLevel.NONE && this.impl === NullTelemetryService) {\n\t\t\t// If remote server is present send telemetry through that, else use the client side appender\n\t\t\tconst appenders: ITelemetryAppender[] = [];\n\t\t\tconst isInternal = isInternalTelemetry(productService, configurationService);\n\t\t\tconst telemetryProvider: ITelemetryAppender = remoteAgentService.getConnection() !== null ? { log: remoteAgentService.logTelemetry.bind(remoteAgentService), flush: remoteAgentService.flushTelemetry.bind(remoteAgentService) } : new OneDataSystemWebAppender(isInternal, 'monacoworkbench', null, productService.aiConfig?.ariaKey);\n\t\t\tappenders.push(telemetryProvider);\n\t\t\tappenders.push(new TelemetryLogAppender(logService, loggerService, environmentService, productService));\n\t\t\tconst config: ITelemetryServiceConfig = {\n\t\t\t\tappenders,\n\t\t\t\tcommonProperties: resolveWorkbenchCommonProperties(storageService, productService.commit, productService.version, isInternal, environmentService.remoteAuthority, productService.embedderIdentifier, productService.removeTelemetryMachineId, environmentService.options && environmentService.options.resolveCommonTelemetryProperties),\n\t\t\t\tsendErrorTelemetry: this.sendErrorTelemetry,\n\t\t\t};\n\n\t\t\treturn this._register(new BaseTelemetryService(config, configurationService, productService));\n\t\t}\n\t\treturn this.impl;\n\t}\n\n\tsetExperimentProperty(name: string, value: string): void {\n\t\treturn this.impl.setExperimentProperty(name, value);\n\t}\n\n\tget telemetryLevel(): TelemetryLevel {\n\t\treturn this.impl.telemetryLevel;\n\t}\n\n\tpublicLog(eventName: string, data?: ITelemetryData) {\n\t\tthis.impl.publicLog(eventName, data);\n\t}\n\n\tpublicLog2<E extends ClassifiedEvent<OmitMetadata<T>> = never, T extends IGDPRProperty = never>(eventName: string, data?: StrictPropertyCheck<T, E>) {\n\t\tthis.publicLog(eventName, data as ITelemetryData);\n\t}\n\n\tpublicLogError(errorEventName: string, data?: ITelemetryData) {\n\t\tthis.impl.publicLog(errorEventName, data);\n\t}\n\n\tpublicLogError2<E extends ClassifiedEvent<OmitMetadata<T>> = never, T extends IGDPRProperty = never>(eventName: string, data?: StrictPropertyCheck<T, E>) {\n\t\tthis.publicLogError(eventName, data as ITelemetryData);\n\t}\n}\n\nregisterSingleton(ITelemetryService, TelemetryService, InstantiationType.Delayed);\n"]}