{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/telemetry/browser/workbenchCommonProperties.ts"],"names":[],"mappings":"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","file":"workbenchCommonProperties.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport * as Platform from 'vs/base/common/platform';\nimport * as uuid from 'vs/base/common/uuid';\nimport { cleanRemoteAuthority } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { mixin } from 'vs/base/common/objects';\nimport { ICommonProperties, firstSessionDateStorageKey, lastSessionDateStorageKey, machineIdKey } from 'vs/platform/telemetry/common/telemetry';\nimport { Gesture } from 'vs/base/browser/touch';\n\n/**\n * General function to help reduce the individuality of user agents\n * @param userAgent userAgent from browser window\n * @returns A simplified user agent with less detail\n */\nfunction cleanUserAgent(userAgent: string): string {\n\treturn userAgent.replace(/(\\d+\\.\\d+)(\\.\\d+)+/g, '$1');\n}\n\nexport function resolveWorkbenchCommonProperties(\n\tstorageService: IStorageService,\n\tcommit: string | undefined,\n\tversion: string | undefined,\n\tisInternalTelemetry: boolean,\n\tremoteAuthority?: string,\n\tproductIdentifier?: string,\n\tremoveMachineId?: boolean,\n\tresolveAdditionalProperties?: () => { [key: string]: any }\n): ICommonProperties {\n\tconst result: ICommonProperties = Object.create(null);\n\tconst firstSessionDate = storageService.get(firstSessionDateStorageKey, StorageScope.APPLICATION)!;\n\tconst lastSessionDate = storageService.get(lastSessionDateStorageKey, StorageScope.APPLICATION)!;\n\n\tlet machineId: string | undefined;\n\tif (!removeMachineId) {\n\t\tmachineId = storageService.get(machineIdKey, StorageScope.APPLICATION);\n\t\tif (!machineId) {\n\t\t\tmachineId = uuid.generateUuid();\n\t\t\tstorageService.store(machineIdKey, machineId, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t}\n\t} else {\n\t\tmachineId = `Redacted-${productIdentifier ?? 'web'}`;\n\t}\n\n\n\t/**\n\t * Note: In the web, session date information is fetched from browser storage, so these dates are tied to a specific\n\t * browser and not the machine overall.\n\t */\n\t// __GDPR__COMMON__ \"common.firstSessionDate\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\tresult['common.firstSessionDate'] = firstSessionDate;\n\t// __GDPR__COMMON__ \"common.lastSessionDate\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\tresult['common.lastSessionDate'] = lastSessionDate || '';\n\t// __GDPR__COMMON__ \"common.isNewSession\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\tresult['common.isNewSession'] = !lastSessionDate ? '1' : '0';\n\t// __GDPR__COMMON__ \"common.remoteAuthority\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n\tresult['common.remoteAuthority'] = cleanRemoteAuthority(remoteAuthority);\n\n\t// __GDPR__COMMON__ \"common.machineId\" : { \"endPoint\": \"MacAddressHash\", \"classification\": \"EndUserPseudonymizedInformation\", \"purpose\": \"FeatureInsight\" }\n\tresult['common.machineId'] = machineId;\n\t// __GDPR__COMMON__ \"sessionID\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\tresult['sessionID'] = uuid.generateUuid() + Date.now();\n\t// __GDPR__COMMON__ \"commitHash\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n\tresult['commitHash'] = commit;\n\t// __GDPR__COMMON__ \"version\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\tresult['version'] = version;\n\t// __GDPR__COMMON__ \"common.platform\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\tresult['common.platform'] = Platform.PlatformToString(Platform.platform);\n\t// __GDPR__COMMON__ \"common.product\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"PerformanceAndHealth\" }\n\tresult['common.product'] = productIdentifier ?? 'web';\n\t// __GDPR__COMMON__ \"common.userAgent\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\tresult['common.userAgent'] = Platform.userAgent ? cleanUserAgent(Platform.userAgent) : undefined;\n\t// __GDPR__COMMON__ \"common.isTouchDevice\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\tresult['common.isTouchDevice'] = String(Gesture.isTouchDevice());\n\n\tif (isInternalTelemetry) {\n\t\t// __GDPR__COMMON__ \"common.msftInternal\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\tresult['common.msftInternal'] = isInternalTelemetry;\n\t}\n\n\t// dynamic properties which value differs on each call\n\tlet seq = 0;\n\tconst startTime = Date.now();\n\tObject.defineProperties(result, {\n\t\t// __GDPR__COMMON__ \"timestamp\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\t\t'timestamp': {\n\t\t\tget: () => new Date(),\n\t\t\tenumerable: true\n\t\t},\n\t\t// __GDPR__COMMON__ \"common.timesincesessionstart\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t'common.timesincesessionstart': {\n\t\t\tget: () => Date.now() - startTime,\n\t\t\tenumerable: true\n\t\t},\n\t\t// __GDPR__COMMON__ \"common.sequence\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\t'common.sequence': {\n\t\t\tget: () => seq++,\n\t\t\tenumerable: true\n\t\t}\n\t});\n\n\tif (resolveAdditionalProperties) {\n\t\tmixin(result, resolveAdditionalProperties());\n\t}\n\n\treturn result;\n}\n\n"]}