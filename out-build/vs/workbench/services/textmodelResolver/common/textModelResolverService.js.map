{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/textmodelResolver/common/textModelResolverService.ts"],"names":[],"mappings":"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","file":"textModelResolverService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IDisposable, toDisposable, IReference, ReferenceCollection, Disposable, AsyncReferenceCollection } from 'vs/base/common/lifecycle';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { TextResourceEditorModel } from 'vs/workbench/common/editor/textResourceEditorModel';\nimport { ITextFileService, TextFileResolveReason } from 'vs/workbench/services/textfile/common/textfiles';\nimport { Schemas } from 'vs/base/common/network';\nimport { ITextModelService, ITextModelContentProvider, ITextEditorModel, IResolvedTextEditorModel, isResolvedTextEditorModel } from 'vs/editor/common/services/resolverService';\nimport { TextFileEditorModel } from 'vs/workbench/services/textfile/common/textFileEditorModel';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IUndoRedoService } from 'vs/platform/undoRedo/common/undoRedo';\nimport { ModelUndoRedoParticipant } from 'vs/editor/common/services/modelUndoRedoParticipant';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\n\nclass ResourceModelCollection extends ReferenceCollection<Promise<IResolvedTextEditorModel>> {\n\n\tprivate readonly providers = new Map<string, ITextModelContentProvider[]>();\n\tprivate readonly modelsToDispose = new Set<string>();\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IModelService private readonly modelService: IModelService\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected createReferencedObject(key: string): Promise<IResolvedTextEditorModel> {\n\t\treturn this.doCreateReferencedObject(key);\n\t}\n\n\tprivate async doCreateReferencedObject(key: string, skipActivateProvider?: boolean): Promise<IResolvedTextEditorModel> {\n\n\t\t// Untrack as being disposed\n\t\tthis.modelsToDispose.delete(key);\n\n\t\t// inMemory Schema: go through model service cache\n\t\tconst resource = URI.parse(key);\n\t\tif (resource.scheme === Schemas.inMemory) {\n\t\t\tconst cachedModel = this.modelService.getModel(resource);\n\t\t\tif (!cachedModel) {\n\t\t\t\tthrow new Error(`Unable to resolve inMemory resource ${key}`);\n\t\t\t}\n\n\t\t\tconst model = this.instantiationService.createInstance(TextResourceEditorModel, resource);\n\t\t\tif (this.ensureResolvedModel(model, key)) {\n\t\t\t\treturn model;\n\t\t\t}\n\t\t}\n\n\t\t// Untitled Schema: go through untitled text service\n\t\tif (resource.scheme === Schemas.untitled) {\n\t\t\tconst model = await this.textFileService.untitled.resolve({ untitledResource: resource });\n\t\t\tif (this.ensureResolvedModel(model, key)) {\n\t\t\t\treturn model;\n\t\t\t}\n\t\t}\n\n\t\t// File or remote file: go through text file service\n\t\tif (this.fileService.hasProvider(resource)) {\n\t\t\tconst model = await this.textFileService.files.resolve(resource, { reason: TextFileResolveReason.REFERENCE });\n\t\t\tif (this.ensureResolvedModel(model, key)) {\n\t\t\t\treturn model;\n\t\t\t}\n\t\t}\n\n\t\t// Virtual documents\n\t\tif (this.providers.has(resource.scheme)) {\n\t\t\tawait this.resolveTextModelContent(key);\n\n\t\t\tconst model = this.instantiationService.createInstance(TextResourceEditorModel, resource);\n\t\t\tif (this.ensureResolvedModel(model, key)) {\n\t\t\t\treturn model;\n\t\t\t}\n\t\t}\n\n\t\t// Either unknown schema, or not yet registered, try to activate\n\t\tif (!skipActivateProvider) {\n\t\t\tawait this.fileService.activateProvider(resource.scheme);\n\n\t\t\treturn this.doCreateReferencedObject(key, true);\n\t\t}\n\n\t\tthrow new Error(`Unable to resolve resource ${key}`);\n\t}\n\n\tprivate ensureResolvedModel(model: ITextEditorModel, key: string): model is IResolvedTextEditorModel {\n\t\tif (isResolvedTextEditorModel(model)) {\n\t\t\treturn true;\n\t\t}\n\n\t\tthrow new Error(`Unable to resolve resource ${key}`);\n\t}\n\n\tprotected destroyReferencedObject(key: string, modelPromise: Promise<ITextEditorModel>): void {\n\n\t\t// untitled and inMemory are bound to a different lifecycle\n\t\tconst resource = URI.parse(key);\n\t\tif (resource.scheme === Schemas.untitled || resource.scheme === Schemas.inMemory) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Track as being disposed before waiting for model to load\n\t\t// to handle the case that the reference is acquired again\n\t\tthis.modelsToDispose.add(key);\n\n\t\t(async () => {\n\t\t\ttry {\n\t\t\t\tconst model = await modelPromise;\n\n\t\t\t\tif (!this.modelsToDispose.has(key)) {\n\t\t\t\t\t// return if model has been acquired again meanwhile\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (model instanceof TextFileEditorModel) {\n\t\t\t\t\t// text file models have conditions that prevent them\n\t\t\t\t\t// from dispose, so we have to wait until we can dispose\n\t\t\t\t\tawait this.textFileService.files.canDispose(model);\n\t\t\t\t}\n\n\t\t\t\tif (!this.modelsToDispose.has(key)) {\n\t\t\t\t\t// return if model has been acquired again meanwhile\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Finally we can dispose the model\n\t\t\t\tmodel.dispose();\n\t\t\t} catch (error) {\n\t\t\t\t// ignore\n\t\t\t} finally {\n\t\t\t\tthis.modelsToDispose.delete(key); // Untrack as being disposed\n\t\t\t}\n\t\t})();\n\t}\n\n\tregisterTextModelContentProvider(scheme: string, provider: ITextModelContentProvider): IDisposable {\n\t\tlet providers = this.providers.get(scheme);\n\t\tif (!providers) {\n\t\t\tproviders = [];\n\t\t\tthis.providers.set(scheme, providers);\n\t\t}\n\n\t\tproviders.unshift(provider);\n\n\t\treturn toDisposable(() => {\n\t\t\tconst providersForScheme = this.providers.get(scheme);\n\t\t\tif (!providersForScheme) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst index = providersForScheme.indexOf(provider);\n\t\t\tif (index === -1) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tprovidersForScheme.splice(index, 1);\n\n\t\t\tif (providersForScheme.length === 0) {\n\t\t\t\tthis.providers.delete(scheme);\n\t\t\t}\n\t\t});\n\t}\n\n\thasTextModelContentProvider(scheme: string): boolean {\n\t\treturn this.providers.get(scheme) !== undefined;\n\t}\n\n\tprivate async resolveTextModelContent(key: string): Promise<ITextModel> {\n\t\tconst resource = URI.parse(key);\n\t\tconst providersForScheme = this.providers.get(resource.scheme) || [];\n\n\t\tfor (const provider of providersForScheme) {\n\t\t\tconst value = await provider.provideTextContent(resource);\n\t\t\tif (value) {\n\t\t\t\treturn value;\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(`Unable to resolve text model content for resource ${key}`);\n\t}\n}\n\nexport class TextModelResolverService extends Disposable implements ITextModelService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate _resourceModelCollection: ResourceModelCollection & ReferenceCollection<Promise<IResolvedTextEditorModel>> /* TS Fail */ | undefined = undefined;\n\tprivate get resourceModelCollection() {\n\t\tif (!this._resourceModelCollection) {\n\t\t\tthis._resourceModelCollection = this.instantiationService.createInstance(ResourceModelCollection);\n\t\t}\n\n\t\treturn this._resourceModelCollection;\n\t}\n\n\tprivate _asyncModelCollection: AsyncReferenceCollection<IResolvedTextEditorModel> | undefined = undefined;\n\tprivate get asyncModelCollection() {\n\t\tif (!this._asyncModelCollection) {\n\t\t\tthis._asyncModelCollection = new AsyncReferenceCollection(this.resourceModelCollection);\n\t\t}\n\n\t\treturn this._asyncModelCollection;\n\t}\n\n\tconstructor(\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IUndoRedoService private readonly undoRedoService: IUndoRedoService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(new ModelUndoRedoParticipant(this.modelService, this, this.undoRedoService));\n\t}\n\n\tasync createModelReference(resource: URI): Promise<IReference<IResolvedTextEditorModel>> {\n\n\t\t// From this moment on, only operate on the canonical resource\n\t\t// to ensure we reduce the chance of resolving the same resource\n\t\t// with different resource forms (e.g. path casing on Windows)\n\t\tresource = this.uriIdentityService.asCanonicalUri(resource);\n\n\t\treturn await this.asyncModelCollection.acquire(resource.toString());\n\t}\n\n\tregisterTextModelContentProvider(scheme: string, provider: ITextModelContentProvider): IDisposable {\n\t\treturn this.resourceModelCollection.registerTextModelContentProvider(scheme, provider);\n\t}\n\n\tcanHandleResource(resource: URI): boolean {\n\t\tif (this.fileService.hasProvider(resource) || resource.scheme === Schemas.untitled || resource.scheme === Schemas.inMemory) {\n\t\t\treturn true; // we handle file://, untitled:// and inMemory:// automatically\n\t\t}\n\n\t\treturn this.resourceModelCollection.hasTextModelContentProvider(resource.scheme);\n\t}\n}\n\nregisterSingleton(ITextModelService, TextModelResolverService, InstantiationType.Delayed);\n"]}