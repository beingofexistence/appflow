{"version":3,"sources":["vs/workbench/services/authentication/browser/authenticationService.ts"],"names":[],"mappings":"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","file":"authenticationService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { flatten } from 'vs/base/common/arrays';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IJSONSchema } from 'vs/base/common/jsonSchema';\nimport { Disposable, dispose, IDisposable, MutableDisposable } from 'vs/base/common/lifecycle';\nimport { isFalsyOrWhitespace } from 'vs/base/common/strings';\nimport { isString } from 'vs/base/common/types';\nimport * as nls from 'vs/nls';\nimport { MenuId, MenuRegistry } from 'vs/platform/actions/common/actions';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { Severity } from 'vs/platform/notification/common/notification';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\nimport { ISecretStorageService } from 'vs/platform/secrets/common/secrets';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IActivityService, NumberBadge } from 'vs/workbench/services/activity/common/activity';\nimport { IAuthenticationCreateSessionOptions, AuthenticationProviderInformation, AuthenticationSession, AuthenticationSessionsChangeEvent, IAuthenticationProvider, IAuthenticationService } from 'vs/workbench/services/authentication/common/authentication';\nimport { IBrowserWorkbenchEnvironmentService } from 'vs/workbench/services/environment/browser/environmentService';\nimport { ActivationKind, IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { ExtensionsRegistry } from 'vs/workbench/services/extensions/common/extensionsRegistry';\n\nexport function getAuthenticationProviderActivationEvent(id: string): string { return `onAuthenticationRequest:${id}`; }\n\ninterface IAccountUsage {\n\textensionId: string;\n\textensionName: string;\n\tlastUsed: number;\n}\n\nexport function readAccountUsages(storageService: IStorageService, providerId: string, accountName: string,): IAccountUsage[] {\n\tconst accountKey = `${providerId}-${accountName}-usages`;\n\tconst storedUsages = storageService.get(accountKey, StorageScope.APPLICATION);\n\tlet usages: IAccountUsage[] = [];\n\tif (storedUsages) {\n\t\ttry {\n\t\t\tusages = JSON.parse(storedUsages);\n\t\t} catch (e) {\n\t\t\t// ignore\n\t\t}\n\t}\n\n\treturn usages;\n}\n\nexport function removeAccountUsage(storageService: IStorageService, providerId: string, accountName: string): void {\n\tconst accountKey = `${providerId}-${accountName}-usages`;\n\tstorageService.remove(accountKey, StorageScope.APPLICATION);\n}\n\nexport function addAccountUsage(storageService: IStorageService, providerId: string, accountName: string, extensionId: string, extensionName: string) {\n\tconst accountKey = `${providerId}-${accountName}-usages`;\n\tconst usages = readAccountUsages(storageService, providerId, accountName);\n\n\tconst existingUsageIndex = usages.findIndex(usage => usage.extensionId === extensionId);\n\tif (existingUsageIndex > -1) {\n\t\tusages.splice(existingUsageIndex, 1, {\n\t\t\textensionId,\n\t\t\textensionName,\n\t\t\tlastUsed: Date.now()\n\t\t});\n\t} else {\n\t\tusages.push({\n\t\t\textensionId,\n\t\t\textensionName,\n\t\t\tlastUsed: Date.now()\n\t\t});\n\t}\n\n\tstorageService.store(accountKey, JSON.stringify(usages), StorageScope.APPLICATION, StorageTarget.MACHINE);\n}\n\n// TODO: pull this out into its own service\nexport type AuthenticationSessionInfo = { readonly id: string; readonly accessToken: string; readonly providerId: string; readonly canSignOut?: boolean };\nexport async function getCurrentAuthenticationSessionInfo(\n\tsecretStorageService: ISecretStorageService,\n\tproductService: IProductService\n): Promise<AuthenticationSessionInfo | undefined> {\n\tconst authenticationSessionValue = await secretStorageService.get(`${productService.urlProtocol}.loginAccount`);\n\tif (authenticationSessionValue) {\n\t\ttry {\n\t\t\tconst authenticationSessionInfo: AuthenticationSessionInfo = JSON.parse(authenticationSessionValue);\n\t\t\tif (authenticationSessionInfo\n\t\t\t\t&& isString(authenticationSessionInfo.id)\n\t\t\t\t&& isString(authenticationSessionInfo.accessToken)\n\t\t\t\t&& isString(authenticationSessionInfo.providerId)\n\t\t\t) {\n\t\t\t\treturn authenticationSessionInfo;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// This is a best effort operation.\n\t\t\tconsole.error(`Failed parsing current auth session value: ${e}`);\n\t\t}\n\t}\n\treturn undefined;\n}\n\nexport interface AllowedExtension {\n\tid: string;\n\tname: string;\n\tallowed?: boolean;\n}\n\nexport function readAllowedExtensions(storageService: IStorageService, providerId: string, accountName: string): AllowedExtension[] {\n\tlet trustedExtensions: AllowedExtension[] = [];\n\ttry {\n\t\tconst trustedExtensionSrc = storageService.get(`${providerId}-${accountName}`, StorageScope.APPLICATION);\n\t\tif (trustedExtensionSrc) {\n\t\t\ttrustedExtensions = JSON.parse(trustedExtensionSrc);\n\t\t}\n\t} catch (err) { }\n\n\treturn trustedExtensions;\n}\n\n// OAuth2 spec prohibits space in a scope, so use that to join them.\nconst SCOPESLIST_SEPARATOR = ' ';\n\ninterface SessionRequest {\n\tdisposables: IDisposable[];\n\trequestingExtensionIds: string[];\n}\n\ninterface SessionRequestInfo {\n\t[scopesList: string]: SessionRequest;\n}\n\nCommandsRegistry.registerCommand('workbench.getCodeExchangeProxyEndpoints', function (accessor, _) {\n\tconst environmentService = accessor.get(IBrowserWorkbenchEnvironmentService);\n\treturn environmentService.options?.codeExchangeProxyEndpoints;\n});\n\nconst authenticationDefinitionSchema: IJSONSchema = {\n\ttype: 'object',\n\tadditionalProperties: false,\n\tproperties: {\n\t\tid: {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('authentication.id', 'The id of the authentication provider.')\n\t\t},\n\t\tlabel: {\n\t\t\ttype: 'string',\n\t\t\tdescription: nls.localize('authentication.label', 'The human readable name of the authentication provider.'),\n\t\t}\n\t}\n};\n\nconst authenticationExtPoint = ExtensionsRegistry.registerExtensionPoint<AuthenticationProviderInformation[]>({\n\textensionPoint: 'authentication',\n\tjsonSchema: {\n\t\tdescription: nls.localize({ key: 'authenticationExtensionPoint', comment: [`'Contributes' means adds here`] }, 'Contributes authentication'),\n\t\ttype: 'array',\n\t\titems: authenticationDefinitionSchema\n\t},\n\tactivationEventsGenerator: (authenticationProviders, result) => {\n\t\tfor (const authenticationProvider of authenticationProviders) {\n\t\t\tif (authenticationProvider.id) {\n\t\t\t\tresult.push(`onAuthenticationRequest:${authenticationProvider.id}`);\n\t\t\t}\n\t\t}\n\t}\n});\n\nlet placeholderMenuItem: IDisposable | undefined = MenuRegistry.appendMenuItem(MenuId.AccountsContext, {\n\tcommand: {\n\t\tid: 'noAuthenticationProviders',\n\t\ttitle: nls.localize('authentication.Placeholder', \"No accounts requested yet...\"),\n\t\tprecondition: ContextKeyExpr.false()\n\t},\n});\n\nexport class AuthenticationService extends Disposable implements IAuthenticationService {\n\tdeclare readonly _serviceBrand: undefined;\n\tprivate _signInRequestItems = new Map<string, SessionRequestInfo>();\n\tprivate _sessionAccessRequestItems = new Map<string, { [extensionId: string]: { disposables: IDisposable[]; possibleSessions: AuthenticationSession[] } }>();\n\tprivate _accountBadgeDisposable = this._register(new MutableDisposable());\n\n\tprivate _authenticationProviders: Map<string, IAuthenticationProvider> = new Map<string, IAuthenticationProvider>();\n\n\t/**\n\t * All providers that have been statically declared by extensions. These may not be registered.\n\t */\n\tdeclaredProviders: AuthenticationProviderInformation[] = [];\n\n\tprivate _onDidRegisterAuthenticationProvider: Emitter<AuthenticationProviderInformation> = this._register(new Emitter<AuthenticationProviderInformation>());\n\treadonly onDidRegisterAuthenticationProvider: Event<AuthenticationProviderInformation> = this._onDidRegisterAuthenticationProvider.event;\n\n\tprivate _onDidUnregisterAuthenticationProvider: Emitter<AuthenticationProviderInformation> = this._register(new Emitter<AuthenticationProviderInformation>());\n\treadonly onDidUnregisterAuthenticationProvider: Event<AuthenticationProviderInformation> = this._onDidUnregisterAuthenticationProvider.event;\n\n\tprivate _onDidChangeSessions: Emitter<{ providerId: string; label: string; event: AuthenticationSessionsChangeEvent }> = this._register(new Emitter<{ providerId: string; label: string; event: AuthenticationSessionsChangeEvent }>());\n\treadonly onDidChangeSessions: Event<{ providerId: string; label: string; event: AuthenticationSessionsChangeEvent }> = this._onDidChangeSessions.event;\n\n\tprivate _onDidChangeDeclaredProviders: Emitter<AuthenticationProviderInformation[]> = this._register(new Emitter<AuthenticationProviderInformation[]>());\n\treadonly onDidChangeDeclaredProviders: Event<AuthenticationProviderInformation[]> = this._onDidChangeDeclaredProviders.event;\n\n\tconstructor(\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IProductService private readonly productService: IProductService,\n\t) {\n\t\tsuper();\n\n\t\tauthenticationExtPoint.setHandler((extensions, { added, removed }) => {\n\t\t\tadded.forEach(point => {\n\t\t\t\tfor (const provider of point.value) {\n\t\t\t\t\tif (isFalsyOrWhitespace(provider.id)) {\n\t\t\t\t\t\tpoint.collector.error(nls.localize('authentication.missingId', 'An authentication contribution must specify an id.'));\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isFalsyOrWhitespace(provider.label)) {\n\t\t\t\t\t\tpoint.collector.error(nls.localize('authentication.missingLabel', 'An authentication contribution must specify a label.'));\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!this.declaredProviders.some(p => p.id === provider.id)) {\n\t\t\t\t\t\tthis.declaredProviders.push(provider);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tpoint.collector.error(nls.localize('authentication.idConflict', \"This authentication id '{0}' has already been registered\", provider.id));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tconst removedExtPoints = flatten(removed.map(r => r.value));\n\t\t\tremovedExtPoints.forEach(point => {\n\t\t\t\tconst index = this.declaredProviders.findIndex(provider => provider.id === point.id);\n\t\t\t\tif (index > -1) {\n\t\t\t\t\tthis.declaredProviders.splice(index, 1);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis._onDidChangeDeclaredProviders.fire(this.declaredProviders);\n\t\t});\n\t}\n\n\tgetProviderIds(): string[] {\n\t\tconst providerIds: string[] = [];\n\t\tthis._authenticationProviders.forEach(provider => {\n\t\t\tproviderIds.push(provider.id);\n\t\t});\n\t\treturn providerIds;\n\t}\n\n\tisAuthenticationProviderRegistered(id: string): boolean {\n\t\treturn this._authenticationProviders.has(id);\n\t}\n\n\tregisterAuthenticationProvider(id: string, authenticationProvider: IAuthenticationProvider): void {\n\t\tthis._authenticationProviders.set(id, authenticationProvider);\n\t\tthis._onDidRegisterAuthenticationProvider.fire({ id, label: authenticationProvider.label });\n\n\t\tif (placeholderMenuItem) {\n\t\t\tplaceholderMenuItem.dispose();\n\t\t\tplaceholderMenuItem = undefined;\n\t\t}\n\t}\n\n\tunregisterAuthenticationProvider(id: string): void {\n\t\tconst provider = this._authenticationProviders.get(id);\n\t\tif (provider) {\n\t\t\tprovider.dispose();\n\t\t\tthis._authenticationProviders.delete(id);\n\t\t\tthis._onDidUnregisterAuthenticationProvider.fire({ id, label: provider.label });\n\n\t\t\tconst accessRequests = this._sessionAccessRequestItems.get(id) || {};\n\t\t\tObject.keys(accessRequests).forEach(extensionId => {\n\t\t\t\tthis.removeAccessRequest(id, extensionId);\n\t\t\t});\n\t\t}\n\n\t\tif (!this._authenticationProviders.size) {\n\t\t\tplaceholderMenuItem = MenuRegistry.appendMenuItem(MenuId.AccountsContext, {\n\t\t\t\tcommand: {\n\t\t\t\t\tid: 'noAuthenticationProviders',\n\t\t\t\t\ttitle: nls.localize('loading', \"Loading...\"),\n\t\t\t\t\tprecondition: ContextKeyExpr.false()\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\t}\n\n\tasync sessionsUpdate(id: string, event: AuthenticationSessionsChangeEvent): Promise<void> {\n\t\tconst provider = this._authenticationProviders.get(id);\n\t\tif (provider) {\n\t\t\tthis._onDidChangeSessions.fire({ providerId: id, label: provider.label, event: event });\n\n\t\t\tif (event.added) {\n\t\t\t\tawait this.updateNewSessionRequests(provider, event.added);\n\t\t\t}\n\n\t\t\tif (event.removed) {\n\t\t\t\tawait this.updateAccessRequests(id, event.removed);\n\t\t\t}\n\n\t\t\tthis.updateBadgeCount();\n\t\t}\n\t}\n\n\tprivate async updateNewSessionRequests(provider: IAuthenticationProvider, addedSessions: readonly AuthenticationSession[]): Promise<void> {\n\t\tconst existingRequestsForProvider = this._signInRequestItems.get(provider.id);\n\t\tif (!existingRequestsForProvider) {\n\t\t\treturn;\n\t\t}\n\n\t\tObject.keys(existingRequestsForProvider).forEach(requestedScopes => {\n\t\t\tif (addedSessions.some(session => session.scopes.slice().join(SCOPESLIST_SEPARATOR) === requestedScopes)) {\n\t\t\t\tconst sessionRequest = existingRequestsForProvider[requestedScopes];\n\t\t\t\tsessionRequest?.disposables.forEach(item => item.dispose());\n\n\t\t\t\tdelete existingRequestsForProvider[requestedScopes];\n\t\t\t\tif (Object.keys(existingRequestsForProvider).length === 0) {\n\t\t\t\t\tthis._signInRequestItems.delete(provider.id);\n\t\t\t\t} else {\n\t\t\t\t\tthis._signInRequestItems.set(provider.id, existingRequestsForProvider);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async updateAccessRequests(providerId: string, removedSessions: readonly AuthenticationSession[]) {\n\t\tconst providerRequests = this._sessionAccessRequestItems.get(providerId);\n\t\tif (providerRequests) {\n\t\t\tObject.keys(providerRequests).forEach(extensionId => {\n\t\t\t\tremovedSessions.forEach(removed => {\n\t\t\t\t\tconst indexOfSession = providerRequests[extensionId].possibleSessions.findIndex(session => session.id === removed.id);\n\t\t\t\t\tif (indexOfSession) {\n\t\t\t\t\t\tproviderRequests[extensionId].possibleSessions.splice(indexOfSession, 1);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (!providerRequests[extensionId].possibleSessions.length) {\n\t\t\t\t\tthis.removeAccessRequest(providerId, extensionId);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate updateBadgeCount(): void {\n\t\tthis._accountBadgeDisposable.clear();\n\n\t\tlet numberOfRequests = 0;\n\t\tthis._signInRequestItems.forEach(providerRequests => {\n\t\t\tObject.keys(providerRequests).forEach(request => {\n\t\t\t\tnumberOfRequests += providerRequests[request].requestingExtensionIds.length;\n\t\t\t});\n\t\t});\n\n\t\tthis._sessionAccessRequestItems.forEach(accessRequest => {\n\t\t\tnumberOfRequests += Object.keys(accessRequest).length;\n\t\t});\n\n\t\tif (numberOfRequests > 0) {\n\t\t\tconst badge = new NumberBadge(numberOfRequests, () => nls.localize('sign in', \"Sign in requested\"));\n\t\t\tthis._accountBadgeDisposable.value = this.activityService.showAccountsActivity({ badge });\n\t\t}\n\t}\n\n\tprivate removeAccessRequest(providerId: string, extensionId: string): void {\n\t\tconst providerRequests = this._sessionAccessRequestItems.get(providerId) || {};\n\t\tif (providerRequests[extensionId]) {\n\t\t\tdispose(providerRequests[extensionId].disposables);\n\t\t\tdelete providerRequests[extensionId];\n\t\t\tthis.updateBadgeCount();\n\t\t}\n\t}\n\n\t/**\n\t * Check extension access to an account\n\t * @param providerId The id of the authentication provider\n\t * @param accountName The account name that access is checked for\n\t * @param extensionId The id of the extension requesting access\n\t * @returns Returns true or false if the user has opted to permanently grant or disallow access, and undefined\n\t * if they haven't made a choice yet\n\t */\n\tisAccessAllowed(providerId: string, accountName: string, extensionId: string): boolean | undefined {\n\t\tconst allowList = readAllowedExtensions(this.storageService, providerId, accountName);\n\t\tconst extensionData = allowList.find(extension => extension.id === extensionId);\n\t\tif (extensionData) {\n\t\t\t// This property didn't exist on this data previously, inclusion in the list at all indicates allowance\n\t\t\treturn extensionData.allowed !== undefined\n\t\t\t\t? extensionData.allowed\n\t\t\t\t: true;\n\t\t}\n\n\t\tif (this.productService.trustedExtensionAuthAccess?.includes(extensionId)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tupdateAllowedExtension(providerId: string, accountName: string, extensionId: string, extensionName: string, isAllowed: boolean): void {\n\t\tconst allowList = readAllowedExtensions(this.storageService, providerId, accountName);\n\t\tconst index = allowList.findIndex(extension => extension.id === extensionId);\n\t\tif (index === -1) {\n\t\t\tallowList.push({ id: extensionId, name: extensionName, allowed: isAllowed });\n\t\t} else {\n\t\t\tallowList[index].allowed = isAllowed;\n\t\t}\n\n\t\tthis.storageService.store(`${providerId}-${accountName}`, JSON.stringify(allowList), StorageScope.APPLICATION, StorageTarget.USER);\n\t}\n\n\t//#region Session Preference\n\n\tupdateSessionPreference(providerId: string, extensionId: string, session: AuthenticationSession): void {\n\t\t// The 3 parts of this key are important:\n\t\t// * Extension id: The extension that has a preference\n\t\t// * Provider id: The provider that the preference is for\n\t\t// * The scopes: The subset of sessions that the preference applies to\n\t\tconst key = `${extensionId}-${providerId}-${session.scopes.join(' ')}`;\n\n\t\t// Store the preference in the workspace and application storage. This allows new workspaces to\n\t\t// have a preference set already to limit the number of prompts that are shown... but also allows\n\t\t// a specific workspace to override the global preference.\n\t\tthis.storageService.store(key, session.id, StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\tthis.storageService.store(key, session.id, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t}\n\n\tgetSessionPreference(providerId: string, extensionId: string, scopes: string[]): string | undefined {\n\t\t// The 3 parts of this key are important:\n\t\t// * Extension id: The extension that has a preference\n\t\t// * Provider id: The provider that the preference is for\n\t\t// * The scopes: The subset of sessions that the preference applies to\n\t\tconst key = `${extensionId}-${providerId}-${scopes.join(' ')}`;\n\n\t\t// If a preference is set in the workspace, use that. Otherwise, use the global preference.\n\t\treturn this.storageService.get(key, StorageScope.WORKSPACE) ?? this.storageService.get(key, StorageScope.APPLICATION);\n\t}\n\n\tremoveSessionPreference(providerId: string, extensionId: string, scopes: string[]): void {\n\t\t// The 3 parts of this key are important:\n\t\t// * Extension id: The extension that has a preference\n\t\t// * Provider id: The provider that the preference is for\n\t\t// * The scopes: The subset of sessions that the preference applies to\n\t\tconst key = `${extensionId}-${providerId}-${scopes.join(' ')}`;\n\n\t\t// This won't affect any other workspaces that have a preference set, but it will remove the preference\n\t\t// for this workspace and the global preference. This is only paired with a call to updateSessionPreference...\n\t\t// so we really don't _need_ to remove them as they are about to be overridden anyway... but it's more correct\n\t\t// to remove them first... and in case this gets called from somewhere else in the future.\n\t\tthis.storageService.remove(key, StorageScope.WORKSPACE);\n\t\tthis.storageService.remove(key, StorageScope.APPLICATION);\n\t}\n\n\t//#endregion\n\n\tasync showGetSessionPrompt(providerId: string, accountName: string, extensionId: string, extensionName: string): Promise<boolean> {\n\t\tconst providerName = this.getLabel(providerId);\n\t\tenum SessionPromptChoice {\n\t\t\tAllow = 0,\n\t\t\tDeny = 1,\n\t\t\tCancel = 2\n\t\t}\n\t\tconst { result } = await this.dialogService.prompt<SessionPromptChoice>({\n\t\t\ttype: Severity.Info,\n\t\t\tmessage: nls.localize('confirmAuthenticationAccess', \"The extension '{0}' wants to access the {1} account '{2}'.\", extensionName, providerName, accountName),\n\t\t\tbuttons: [\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize({ key: 'allow', comment: ['&& denotes a mnemonic'] }, \"&&Allow\"),\n\t\t\t\t\trun: () => SessionPromptChoice.Allow\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: nls.localize({ key: 'deny', comment: ['&& denotes a mnemonic'] }, \"&&Deny\"),\n\t\t\t\t\trun: () => SessionPromptChoice.Deny\n\t\t\t\t}\n\t\t\t],\n\t\t\tcancelButton: {\n\t\t\t\trun: () => SessionPromptChoice.Cancel\n\t\t\t}\n\t\t});\n\n\t\tif (result !== SessionPromptChoice.Cancel) {\n\t\t\tthis.updateAllowedExtension(providerId, accountName, extensionId, extensionName, result === SessionPromptChoice.Allow);\n\t\t\tthis.removeAccessRequest(providerId, extensionId);\n\t\t}\n\n\t\treturn result === SessionPromptChoice.Allow;\n\t}\n\n\tasync selectSession(providerId: string, extensionId: string, extensionName: string, scopes: string[], availableSessions: AuthenticationSession[]): Promise<AuthenticationSession> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t// This function should be used only when there are sessions to disambiguate.\n\t\t\tif (!availableSessions.length) {\n\t\t\t\treject('No available sessions');\n\t\t\t}\n\n\t\t\tconst quickPick = this.quickInputService.createQuickPick<{ label: string; session?: AuthenticationSession }>();\n\t\t\tquickPick.ignoreFocusOut = true;\n\t\t\tconst items: { label: string; session?: AuthenticationSession }[] = availableSessions.map(session => {\n\t\t\t\treturn {\n\t\t\t\t\tlabel: session.account.label,\n\t\t\t\t\tsession: session\n\t\t\t\t};\n\t\t\t});\n\n\t\t\titems.push({\n\t\t\t\tlabel: nls.localize('useOtherAccount', \"Sign in to another account\")\n\t\t\t});\n\n\t\t\tconst providerName = this.getLabel(providerId);\n\n\t\t\tquickPick.items = items;\n\n\t\t\tquickPick.title = nls.localize(\n\t\t\t\t{\n\t\t\t\t\tkey: 'selectAccount',\n\t\t\t\t\tcomment: ['The placeholder {0} is the name of an extension. {1} is the name of the type of account, such as Microsoft or GitHub.']\n\t\t\t\t},\n\t\t\t\t\"The extension '{0}' wants to access a {1} account\",\n\t\t\t\textensionName,\n\t\t\t\tproviderName);\n\t\t\tquickPick.placeholder = nls.localize('getSessionPlateholder', \"Select an account for '{0}' to use or Esc to cancel\", extensionName);\n\n\t\t\tquickPick.onDidAccept(async _ => {\n\t\t\t\tconst session = quickPick.selectedItems[0].session ?? await this.createSession(providerId, scopes);\n\t\t\t\tconst accountName = session.account.label;\n\n\t\t\t\tthis.updateAllowedExtension(providerId, accountName, extensionId, extensionName, true);\n\t\t\t\tthis.updateSessionPreference(providerId, extensionId, session);\n\t\t\t\tthis.removeAccessRequest(providerId, extensionId);\n\n\t\t\t\tquickPick.dispose();\n\t\t\t\tresolve(session);\n\t\t\t});\n\n\t\t\tquickPick.onDidHide(_ => {\n\t\t\t\tif (!quickPick.selectedItems[0]) {\n\t\t\t\t\treject('User did not consent to account access');\n\t\t\t\t}\n\n\t\t\t\tquickPick.dispose();\n\t\t\t});\n\n\t\t\tquickPick.show();\n\t\t});\n\t}\n\n\tasync completeSessionAccessRequest(providerId: string, extensionId: string, extensionName: string, scopes: string[]): Promise<void> {\n\t\tconst providerRequests = this._sessionAccessRequestItems.get(providerId) || {};\n\t\tconst existingRequest = providerRequests[extensionId];\n\t\tif (!existingRequest) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst possibleSessions = existingRequest.possibleSessions;\n\t\tconst supportsMultipleAccounts = this.supportsMultipleAccounts(providerId);\n\n\t\tlet session: AuthenticationSession | undefined;\n\t\tif (supportsMultipleAccounts) {\n\t\t\ttry {\n\t\t\t\tsession = await this.selectSession(providerId, extensionId, extensionName, scopes, possibleSessions);\n\t\t\t} catch (_) {\n\t\t\t\t// ignore cancel\n\t\t\t}\n\t\t} else {\n\t\t\tconst approved = await this.showGetSessionPrompt(providerId, possibleSessions[0].account.label, extensionId, extensionName);\n\t\t\tif (approved) {\n\t\t\t\tsession = possibleSessions[0];\n\t\t\t}\n\t\t}\n\n\t\tif (session) {\n\t\t\taddAccountUsage(this.storageService, providerId, session.account.label, extensionId, extensionName);\n\t\t\tconst providerName = this.getLabel(providerId);\n\t\t\tthis._onDidChangeSessions.fire({ providerId, label: providerName, event: { added: [], removed: [], changed: [session] } });\n\t\t}\n\t}\n\n\trequestSessionAccess(providerId: string, extensionId: string, extensionName: string, scopes: string[], possibleSessions: AuthenticationSession[]): void {\n\t\tconst providerRequests = this._sessionAccessRequestItems.get(providerId) || {};\n\t\tconst hasExistingRequest = providerRequests[extensionId];\n\t\tif (hasExistingRequest) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst menuItem = MenuRegistry.appendMenuItem(MenuId.AccountsContext, {\n\t\t\tgroup: '3_accessRequests',\n\t\t\tcommand: {\n\t\t\t\tid: `${providerId}${extensionId}Access`,\n\t\t\t\ttitle: nls.localize({\n\t\t\t\t\tkey: 'accessRequest',\n\t\t\t\t\tcomment: [`The placeholder {0} will be replaced with an authentication provider''s label. {1} will be replaced with an extension name. (1) is to indicate that this menu item contributes to a badge count`]\n\t\t\t\t},\n\t\t\t\t\t\"Grant access to {0} for {1}... (1)\",\n\t\t\t\t\tthis.getLabel(providerId),\n\t\t\t\t\textensionName)\n\t\t\t}\n\t\t});\n\n\t\tconst accessCommand = CommandsRegistry.registerCommand({\n\t\t\tid: `${providerId}${extensionId}Access`,\n\t\t\thandler: async (accessor) => {\n\t\t\t\tconst authenticationService = accessor.get(IAuthenticationService);\n\t\t\t\tauthenticationService.completeSessionAccessRequest(providerId, extensionId, extensionName, scopes);\n\t\t\t}\n\t\t});\n\n\t\tproviderRequests[extensionId] = { possibleSessions, disposables: [menuItem, accessCommand] };\n\t\tthis._sessionAccessRequestItems.set(providerId, providerRequests);\n\t\tthis.updateBadgeCount();\n\t}\n\n\tasync requestNewSession(providerId: string, scopes: string[], extensionId: string, extensionName: string): Promise<void> {\n\t\tlet provider = this._authenticationProviders.get(providerId);\n\t\tif (!provider) {\n\t\t\t// Activate has already been called for the authentication provider, but it cannot block on registering itself\n\t\t\t// since this is sync and returns a disposable. So, wait for registration event to fire that indicates the\n\t\t\t// provider is now in the map.\n\t\t\tawait new Promise<void>((resolve, _) => {\n\t\t\t\tconst dispose = this.onDidRegisterAuthenticationProvider(e => {\n\t\t\t\t\tif (e.id === providerId) {\n\t\t\t\t\t\tprovider = this._authenticationProviders.get(providerId);\n\t\t\t\t\t\tdispose.dispose();\n\t\t\t\t\t\tresolve();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (!provider) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst providerRequests = this._signInRequestItems.get(providerId);\n\t\tconst scopesList = scopes.join(SCOPESLIST_SEPARATOR);\n\t\tconst extensionHasExistingRequest = providerRequests\n\t\t\t&& providerRequests[scopesList]\n\t\t\t&& providerRequests[scopesList].requestingExtensionIds.includes(extensionId);\n\n\t\tif (extensionHasExistingRequest) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Construct a commandId that won't clash with others generated here, nor likely with an extension's command\n\t\tconst commandId = `${providerId}:${extensionId}:signIn${Object.keys(providerRequests || []).length}`;\n\t\tconst menuItem = MenuRegistry.appendMenuItem(MenuId.AccountsContext, {\n\t\t\tgroup: '2_signInRequests',\n\t\t\tcommand: {\n\t\t\t\tid: commandId,\n\t\t\t\ttitle: nls.localize({\n\t\t\t\t\tkey: 'signInRequest',\n\t\t\t\t\tcomment: [`The placeholder {0} will be replaced with an authentication provider's label. {1} will be replaced with an extension name. (1) is to indicate that this menu item contributes to a badge count.`]\n\t\t\t\t},\n\t\t\t\t\t\"Sign in with {0} to use {1} (1)\",\n\t\t\t\t\tprovider.label,\n\t\t\t\t\textensionName)\n\t\t\t}\n\t\t});\n\n\t\tconst signInCommand = CommandsRegistry.registerCommand({\n\t\t\tid: commandId,\n\t\t\thandler: async (accessor) => {\n\t\t\t\tconst authenticationService = accessor.get(IAuthenticationService);\n\t\t\t\tconst session = await authenticationService.createSession(providerId, scopes);\n\n\t\t\t\tthis.updateAllowedExtension(providerId, session.account.label, extensionId, extensionName, true);\n\t\t\t\tthis.updateSessionPreference(providerId, extensionId, session);\n\t\t\t}\n\t\t});\n\n\n\t\tif (providerRequests) {\n\t\t\tconst existingRequest = providerRequests[scopesList] || { disposables: [], requestingExtensionIds: [] };\n\n\t\t\tproviderRequests[scopesList] = {\n\t\t\t\tdisposables: [...existingRequest.disposables, menuItem, signInCommand],\n\t\t\t\trequestingExtensionIds: [...existingRequest.requestingExtensionIds, extensionId]\n\t\t\t};\n\t\t\tthis._signInRequestItems.set(providerId, providerRequests);\n\t\t} else {\n\t\t\tthis._signInRequestItems.set(providerId, {\n\t\t\t\t[scopesList]: {\n\t\t\t\t\tdisposables: [menuItem, signInCommand],\n\t\t\t\t\trequestingExtensionIds: [extensionId]\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tthis.updateBadgeCount();\n\t}\n\tgetLabel(id: string): string {\n\t\tconst authProvider = this._authenticationProviders.get(id);\n\t\tif (authProvider) {\n\t\t\treturn authProvider.label;\n\t\t} else {\n\t\t\tthrow new Error(`No authentication provider '${id}' is currently registered.`);\n\t\t}\n\t}\n\n\tsupportsMultipleAccounts(id: string): boolean {\n\t\tconst authProvider = this._authenticationProviders.get(id);\n\t\tif (authProvider) {\n\t\t\treturn authProvider.supportsMultipleAccounts;\n\t\t} else {\n\t\t\tthrow new Error(`No authentication provider '${id}' is currently registered.`);\n\t\t}\n\t}\n\n\tprivate async tryActivateProvider(providerId: string, activateImmediate: boolean): Promise<IAuthenticationProvider> {\n\t\tawait this.extensionService.activateByEvent(getAuthenticationProviderActivationEvent(providerId), activateImmediate ? ActivationKind.Immediate : ActivationKind.Normal);\n\t\tlet provider = this._authenticationProviders.get(providerId);\n\t\tif (provider) {\n\t\t\treturn provider;\n\t\t}\n\n\t\t// When activate has completed, the extension has made the call to `registerAuthenticationProvider`.\n\t\t// However, activate cannot block on this, so the renderer may not have gotten the event yet.\n\t\tconst didRegister: Promise<IAuthenticationProvider> = new Promise((resolve, _) => {\n\t\t\tthis.onDidRegisterAuthenticationProvider(e => {\n\t\t\t\tif (e.id === providerId) {\n\t\t\t\t\tprovider = this._authenticationProviders.get(providerId);\n\t\t\t\t\tif (provider) {\n\t\t\t\t\t\tresolve(provider);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow new Error(`No authentication provider '${providerId}' is currently registered.`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tconst didTimeout: Promise<IAuthenticationProvider> = new Promise((_, reject) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\treject('Timed out waiting for authentication provider to register');\n\t\t\t}, 5000);\n\t\t});\n\n\t\treturn Promise.race([didRegister, didTimeout]);\n\t}\n\n\tasync getSessions(id: string, scopes?: string[], activateImmediate: boolean = false): Promise<ReadonlyArray<AuthenticationSession>> {\n\t\tconst authProvider = this._authenticationProviders.get(id) || await this.tryActivateProvider(id, activateImmediate);\n\t\tif (authProvider) {\n\t\t\treturn await authProvider.getSessions(scopes);\n\t\t} else {\n\t\t\tthrow new Error(`No authentication provider '${id}' is currently registered.`);\n\t\t}\n\t}\n\n\tasync createSession(id: string, scopes: string[], options?: IAuthenticationCreateSessionOptions): Promise<AuthenticationSession> {\n\t\tconst authProvider = this._authenticationProviders.get(id) || await this.tryActivateProvider(id, !!options?.activateImmediate);\n\t\tif (authProvider) {\n\t\t\treturn await authProvider.createSession(scopes, {\n\t\t\t\tsessionToRecreate: options?.sessionToRecreate\n\t\t\t});\n\t\t} else {\n\t\t\tthrow new Error(`No authentication provider '${id}' is currently registered.`);\n\t\t}\n\t}\n\n\tasync removeSession(id: string, sessionId: string): Promise<void> {\n\t\tconst authProvider = this._authenticationProviders.get(id);\n\t\tif (authProvider) {\n\t\t\treturn authProvider.removeSession(sessionId);\n\t\t} else {\n\t\t\tthrow new Error(`No authentication provider '${id}' is currently registered.`);\n\t\t}\n\t}\n\n\tasync manageTrustedExtensionsForAccount(id: string, accountName: string): Promise<void> {\n\t\tconst authProvider = this._authenticationProviders.get(id);\n\t\tif (authProvider) {\n\t\t\treturn authProvider.manageTrustedExtensions(accountName);\n\t\t} else {\n\t\t\tthrow new Error(`No authentication provider '${id}' is currently registered.`);\n\t\t}\n\t}\n\n\tasync removeAccountSessions(id: string, accountName: string, sessions: AuthenticationSession[]): Promise<void> {\n\t\tconst authProvider = this._authenticationProviders.get(id);\n\t\tif (authProvider) {\n\t\t\treturn authProvider.removeAccountSessions(accountName, sessions);\n\t\t} else {\n\t\t\tthrow new Error(`No authentication provider '${id}' is currently registered.`);\n\t\t}\n\t}\n}\n\nregisterSingleton(IAuthenticationService, AuthenticationService, InstantiationType.Delayed);\n"]}