{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/authentication/common/authentication.ts"],"names":[],"mappings":";;;;IAoCa,QAAA,GAAG,GAAsB,IAAA,mBAAG,EAAqC,wBAAwB,CAAC,CAAC","file":"authentication.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Event } from 'vs/base/common/event';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport interface AuthenticationSessionAccount {\n\tlabel: string;\n\tid: string;\n}\n\nexport interface AuthenticationSession {\n\tid: string;\n\taccessToken: string;\n\taccount: AuthenticationSessionAccount;\n\tscopes: ReadonlyArray<string>;\n\tidToken?: string;\n}\n\nexport interface AuthenticationSessionsChangeEvent {\n\tadded: ReadonlyArray<AuthenticationSession>;\n\tremoved: ReadonlyArray<AuthenticationSession>;\n\tchanged: ReadonlyArray<AuthenticationSession>;\n}\n\nexport interface AuthenticationProviderInformation {\n\tid: string;\n\tlabel: string;\n}\n\nexport interface IAuthenticationCreateSessionOptions {\n\tsessionToRecreate?: AuthenticationSession;\n\tactivateImmediate?: boolean;\n}\n\nexport const IAuthenticationService = createDecorator<IAuthenticationService>('IAuthenticationService');\n\nexport interface IAuthenticationService {\n\treadonly _serviceBrand: undefined;\n\n\tisAuthenticationProviderRegistered(id: string): boolean;\n\tgetProviderIds(): string[];\n\tregisterAuthenticationProvider(id: string, provider: IAuthenticationProvider): void;\n\tunregisterAuthenticationProvider(id: string): void;\n\tisAccessAllowed(providerId: string, accountName: string, extensionId: string): boolean | undefined;\n\tupdateAllowedExtension(providerId: string, accountName: string, extensionId: string, extensionName: string, isAllowed: boolean): void;\n\tupdateSessionPreference(providerId: string, extensionId: string, session: AuthenticationSession): void;\n\tgetSessionPreference(providerId: string, extensionId: string, scopes: string[]): string | undefined;\n\tremoveSessionPreference(providerId: string, extensionId: string, scopes: string[]): void;\n\tshowGetSessionPrompt(providerId: string, accountName: string, extensionId: string, extensionName: string): Promise<boolean>;\n\tselectSession(providerId: string, extensionId: string, extensionName: string, scopes: string[], possibleSessions: readonly AuthenticationSession[]): Promise<AuthenticationSession>;\n\trequestSessionAccess(providerId: string, extensionId: string, extensionName: string, scopes: string[], possibleSessions: readonly AuthenticationSession[]): void;\n\tcompleteSessionAccessRequest(providerId: string, extensionId: string, extensionName: string, scopes: string[]): Promise<void>;\n\trequestNewSession(providerId: string, scopes: string[], extensionId: string, extensionName: string): Promise<void>;\n\tsessionsUpdate(providerId: string, event: AuthenticationSessionsChangeEvent): void;\n\n\treadonly onDidRegisterAuthenticationProvider: Event<AuthenticationProviderInformation>;\n\treadonly onDidUnregisterAuthenticationProvider: Event<AuthenticationProviderInformation>;\n\n\treadonly onDidChangeSessions: Event<{ providerId: string; label: string; event: AuthenticationSessionsChangeEvent }>;\n\n\t// TODO completely remove this property\n\tdeclaredProviders: AuthenticationProviderInformation[];\n\treadonly onDidChangeDeclaredProviders: Event<AuthenticationProviderInformation[]>;\n\n\tgetSessions(id: string, scopes?: string[], activateImmediate?: boolean): Promise<ReadonlyArray<AuthenticationSession>>;\n\tgetLabel(providerId: string): string;\n\tsupportsMultipleAccounts(providerId: string): boolean;\n\tcreateSession(providerId: string, scopes: string[], options?: IAuthenticationCreateSessionOptions): Promise<AuthenticationSession>;\n\tremoveSession(providerId: string, sessionId: string): Promise<void>;\n\n\tmanageTrustedExtensionsForAccount(providerId: string, accountName: string): Promise<void>;\n\tremoveAccountSessions(providerId: string, accountName: string, sessions: AuthenticationSession[]): Promise<void>;\n}\n\nexport interface IAuthenticationProviderCreateSessionOptions {\n\tsessionToRecreate?: AuthenticationSession;\n}\n\nexport interface IAuthenticationProvider {\n\treadonly id: string;\n\treadonly label: string;\n\treadonly supportsMultipleAccounts: boolean;\n\tdispose(): void;\n\tmanageTrustedExtensions(accountName: string): void;\n\tremoveAccountSessions(accountName: string, sessions: AuthenticationSession[]): Promise<void>;\n\tgetSessions(scopes?: string[]): Promise<readonly AuthenticationSession[]>;\n\tcreateSession(scopes: string[], options: IAuthenticationProviderCreateSessionOptions): Promise<AuthenticationSession>;\n\tremoveSession(sessionId: string): Promise<void>;\n}\n"]}