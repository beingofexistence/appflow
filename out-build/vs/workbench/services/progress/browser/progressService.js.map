{"version":3,"sources":["vs/workbench/services/progress/browser/progressService.ts"],"names":[],"mappings":"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","file":"progressService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport 'vs/css!./media/progressService';\n\nimport { localize } from 'vs/nls';\nimport { IDisposable, dispose, DisposableStore, Disposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { IProgressService, IProgressOptions, IProgressStep, ProgressLocation, IProgress, Progress, IProgressCompositeOptions, IProgressNotificationOptions, IProgressRunner, IProgressIndicator, IProgressWindowOptions, IProgressDialogOptions } from 'vs/platform/progress/common/progress';\nimport { StatusbarAlignment, IStatusbarService, IStatusbarEntryAccessor, IStatusbarEntry } from 'vs/workbench/services/statusbar/browser/statusbar';\nimport { DeferredPromise, RunOnceScheduler, timeout } from 'vs/base/common/async';\nimport { ProgressBadge, IActivityService } from 'vs/workbench/services/activity/common/activity';\nimport { INotificationService, Severity, INotificationHandle, NotificationPriority } from 'vs/platform/notification/common/notification';\nimport { Action } from 'vs/base/common/actions';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ILayoutService } from 'vs/platform/layout/browser/layoutService';\nimport { Dialog } from 'vs/base/browser/ui/dialog/dialog';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { StandardKeyboardEvent } from 'vs/base/browser/keyboardEvent';\nimport { EventHelper } from 'vs/base/browser/dom';\nimport { parseLinkedText } from 'vs/base/common/linkedText';\nimport { IViewsService, IViewDescriptorService, ViewContainerLocation } from 'vs/workbench/common/views';\nimport { IPaneCompositePartService } from 'vs/workbench/services/panecomposite/browser/panecomposite';\nimport { stripIcons } from 'vs/base/common/iconLabels';\nimport { defaultButtonStyles, defaultCheckboxStyles, defaultDialogStyles, defaultInputBoxStyles } from 'vs/platform/theme/browser/defaultStyles';\nimport { ResultKind } from 'vs/platform/keybinding/common/keybindingResolver';\n\nexport class ProgressService extends Disposable implements IProgressService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IActivityService private readonly activityService: IActivityService,\n\t\t@IPaneCompositePartService private readonly paneCompositeService: IPaneCompositePartService,\n\t\t@IViewDescriptorService private readonly viewDescriptorService: IViewDescriptorService,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IStatusbarService private readonly statusbarService: IStatusbarService,\n\t\t@ILayoutService private readonly layoutService: ILayoutService,\n\t\t@IKeybindingService private readonly keybindingService: IKeybindingService\n\t) {\n\t\tsuper();\n\t}\n\n\tasync withProgress<R = unknown>(options: IProgressOptions, task: (progress: IProgress<IProgressStep>) => Promise<R>, onDidCancel?: (choice?: number) => void): Promise<R> {\n\t\tconst { location } = options;\n\n\t\tconst handleStringLocation = (location: string) => {\n\t\t\tconst viewContainer = this.viewDescriptorService.getViewContainerById(location);\n\t\t\tif (viewContainer) {\n\t\t\t\tconst viewContainerLocation = this.viewDescriptorService.getViewContainerLocation(viewContainer);\n\t\t\t\tif (viewContainerLocation !== null) {\n\t\t\t\t\treturn this.withPaneCompositeProgress(location, viewContainerLocation, task, { ...options, location });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.viewDescriptorService.getViewDescriptorById(location) !== null) {\n\t\t\t\treturn this.withViewProgress(location, task, { ...options, location });\n\t\t\t}\n\n\t\t\tthrow new Error(`Bad progress location: ${location}`);\n\t\t};\n\n\t\tif (typeof location === 'string') {\n\t\t\treturn handleStringLocation(location);\n\t\t}\n\n\t\tswitch (location) {\n\t\t\tcase ProgressLocation.Notification:\n\t\t\t\treturn this.withNotificationProgress({ ...options, location, priority: this.notificationService.doNotDisturbMode ? NotificationPriority.SILENT : undefined }, task, onDidCancel);\n\t\t\tcase ProgressLocation.Window: {\n\t\t\t\tconst type = (options as IProgressWindowOptions).type;\n\t\t\t\tif ((options as IProgressWindowOptions).command) {\n\t\t\t\t\t// Window progress with command get's shown in the status bar\n\t\t\t\t\treturn this.withWindowProgress({ ...options, location, type }, task);\n\t\t\t\t}\n\t\t\t\t// Window progress without command can be shown as silent notification\n\t\t\t\t// which will first appear in the status bar and can then be brought to\n\t\t\t\t// the front when clicking.\n\t\t\t\treturn this.withNotificationProgress({ delay: 150 /* default for ProgressLocation.Window */, ...options, priority: NotificationPriority.SILENT, location: ProgressLocation.Notification, type }, task, onDidCancel);\n\t\t\t}\n\t\t\tcase ProgressLocation.Explorer:\n\t\t\t\treturn this.withPaneCompositeProgress('workbench.view.explorer', ViewContainerLocation.Sidebar, task, { ...options, location });\n\t\t\tcase ProgressLocation.Scm:\n\t\t\t\treturn handleStringLocation('workbench.scm');\n\t\t\tcase ProgressLocation.Extensions:\n\t\t\t\treturn this.withPaneCompositeProgress('workbench.view.extensions', ViewContainerLocation.Sidebar, task, { ...options, location });\n\t\t\tcase ProgressLocation.Dialog:\n\t\t\t\treturn this.withDialogProgress(options, task, onDidCancel);\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Bad progress location: ${location}`);\n\t\t}\n\t}\n\n\tprivate readonly windowProgressStack: [IProgressWindowOptions, Progress<IProgressStep>][] = [];\n\tprivate windowProgressStatusEntry: IStatusbarEntryAccessor | undefined = undefined;\n\n\tprivate withWindowProgress<R = unknown>(options: IProgressWindowOptions, callback: (progress: IProgress<{ message?: string }>) => Promise<R>): Promise<R> {\n\t\tconst task: [IProgressWindowOptions, Progress<IProgressStep>] = [options, new Progress<IProgressStep>(() => this.updateWindowProgress())];\n\n\t\tconst promise = callback(task[1]);\n\n\t\tlet delayHandle: any = setTimeout(() => {\n\t\t\tdelayHandle = undefined;\n\t\t\tthis.windowProgressStack.unshift(task);\n\t\t\tthis.updateWindowProgress();\n\n\t\t\t// show progress for at least 150ms\n\t\t\tPromise.all([\n\t\t\t\ttimeout(150),\n\t\t\t\tpromise\n\t\t\t]).finally(() => {\n\t\t\t\tconst idx = this.windowProgressStack.indexOf(task);\n\t\t\t\tthis.windowProgressStack.splice(idx, 1);\n\t\t\t\tthis.updateWindowProgress();\n\t\t\t});\n\t\t}, 150);\n\n\t\t// cancel delay if promise finishes below 150ms\n\t\treturn promise.finally(() => clearTimeout(delayHandle));\n\t}\n\n\tprivate updateWindowProgress(idx: number = 0) {\n\n\t\t// We still have progress to show\n\t\tif (idx < this.windowProgressStack.length) {\n\t\t\tconst [options, progress] = this.windowProgressStack[idx];\n\n\t\t\tconst progressTitle = options.title;\n\t\t\tconst progressMessage = progress.value && progress.value.message;\n\t\t\tconst progressCommand = (<IProgressWindowOptions>options).command;\n\t\t\tlet text: string;\n\t\t\tlet title: string;\n\t\t\tconst source = options.source && typeof options.source !== 'string' ? options.source.label : options.source;\n\n\t\t\tif (progressTitle && progressMessage) {\n\t\t\t\t// <title>: <message>\n\t\t\t\ttext = localize('progress.text2', \"{0}: {1}\", progressTitle, progressMessage);\n\t\t\t\ttitle = source ? localize('progress.title3', \"[{0}] {1}: {2}\", source, progressTitle, progressMessage) : text;\n\n\t\t\t} else if (progressTitle) {\n\t\t\t\t// <title>\n\t\t\t\ttext = progressTitle;\n\t\t\t\ttitle = source ? localize('progress.title2', \"[{0}]: {1}\", source, progressTitle) : text;\n\n\t\t\t} else if (progressMessage) {\n\t\t\t\t// <message>\n\t\t\t\ttext = progressMessage;\n\t\t\t\ttitle = source ? localize('progress.title2', \"[{0}]: {1}\", source, progressMessage) : text;\n\n\t\t\t} else {\n\t\t\t\t// no title, no message -> no progress. try with next on stack\n\t\t\t\tthis.updateWindowProgress(idx + 1);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst statusEntryProperties: IStatusbarEntry = {\n\t\t\t\tname: localize('status.progress', \"Progress Message\"),\n\t\t\t\ttext,\n\t\t\t\tshowProgress: options.type || true,\n\t\t\t\tariaLabel: text,\n\t\t\t\ttooltip: title,\n\t\t\t\tcommand: progressCommand\n\t\t\t};\n\n\t\t\tif (this.windowProgressStatusEntry) {\n\t\t\t\tthis.windowProgressStatusEntry.update(statusEntryProperties);\n\t\t\t} else {\n\t\t\t\tthis.windowProgressStatusEntry = this.statusbarService.addEntry(statusEntryProperties, 'status.progress', StatusbarAlignment.LEFT);\n\t\t\t}\n\t\t}\n\n\t\t// Progress is done so we remove the status entry\n\t\telse {\n\t\t\tthis.windowProgressStatusEntry?.dispose();\n\t\t\tthis.windowProgressStatusEntry = undefined;\n\t\t}\n\t}\n\n\tprivate withNotificationProgress<P extends Promise<R>, R = unknown>(options: IProgressNotificationOptions, callback: (progress: IProgress<IProgressStep>) => P, onDidCancel?: (choice?: number) => void): P {\n\n\t\tconst progressStateModel = new class extends Disposable {\n\n\t\t\tprivate readonly _onDidReport = this._register(new Emitter<IProgressStep>());\n\t\t\treadonly onDidReport = this._onDidReport.event;\n\n\t\t\tprivate readonly _onWillDispose = this._register(new Emitter<void>());\n\t\t\treadonly onWillDispose = this._onWillDispose.event;\n\n\t\t\tprivate _step: IProgressStep | undefined = undefined;\n\t\t\tget step() { return this._step; }\n\n\t\t\tprivate _done = false;\n\t\t\tget done() { return this._done; }\n\n\t\t\treadonly promise: P;\n\n\t\t\tconstructor() {\n\t\t\t\tsuper();\n\n\t\t\t\tthis.promise = callback(this);\n\n\t\t\t\tthis.promise.finally(() => {\n\t\t\t\t\tthis.dispose();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treport(step: IProgressStep): void {\n\t\t\t\tthis._step = step;\n\n\t\t\t\tthis._onDidReport.fire(step);\n\t\t\t}\n\n\t\t\tcancel(choice?: number): void {\n\t\t\t\tonDidCancel?.(choice);\n\n\t\t\t\tthis.dispose();\n\t\t\t}\n\n\t\t\toverride dispose(): void {\n\t\t\t\tthis._done = true;\n\t\t\t\tthis._onWillDispose.fire();\n\n\t\t\t\tsuper.dispose();\n\t\t\t}\n\t\t};\n\n\t\tconst createWindowProgress = () => {\n\n\t\t\t// Create a promise that we can resolve as needed\n\t\t\t// when the outside calls dispose on us\n\t\t\tconst promise = new DeferredPromise<void>();\n\n\t\t\tthis.withWindowProgress({\n\t\t\t\tlocation: ProgressLocation.Window,\n\t\t\t\ttitle: options.title ? parseLinkedText(options.title).toString() : undefined, // convert markdown links => string\n\t\t\t\tcommand: 'notifications.showList',\n\t\t\t\ttype: options.type\n\t\t\t}, progress => {\n\n\t\t\t\tfunction reportProgress(step: IProgressStep) {\n\t\t\t\t\tif (step.message) {\n\t\t\t\t\t\tprogress.report({\n\t\t\t\t\t\t\tmessage: parseLinkedText(step.message).toString()  // convert markdown links => string\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Apply any progress that was made already\n\t\t\t\tif (progressStateModel.step) {\n\t\t\t\t\treportProgress(progressStateModel.step);\n\t\t\t\t}\n\n\t\t\t\t// Continue to report progress as it happens\n\t\t\t\tconst onDidReportListener = progressStateModel.onDidReport(step => reportProgress(step));\n\t\t\t\tpromise.p.finally(() => onDidReportListener.dispose());\n\n\t\t\t\t// When the progress model gets disposed, we are done as well\n\t\t\t\tEvent.once(progressStateModel.onWillDispose)(() => promise.complete());\n\n\t\t\t\treturn promise.p;\n\t\t\t});\n\n\t\t\t// Dispose means completing our promise\n\t\t\treturn toDisposable(() => promise.complete());\n\t\t};\n\n\t\tconst createNotification = (message: string, priority?: NotificationPriority, increment?: number): INotificationHandle => {\n\t\t\tconst notificationDisposables = new DisposableStore();\n\n\t\t\tconst primaryActions = options.primaryActions ? Array.from(options.primaryActions) : [];\n\t\t\tconst secondaryActions = options.secondaryActions ? Array.from(options.secondaryActions) : [];\n\n\t\t\tif (options.buttons) {\n\t\t\t\toptions.buttons.forEach((button, index) => {\n\t\t\t\t\tconst buttonAction = new class extends Action {\n\t\t\t\t\t\tconstructor() {\n\t\t\t\t\t\t\tsuper(`progress.button.${button}`, button, undefined, true);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\toverride async run(): Promise<void> {\n\t\t\t\t\t\t\tprogressStateModel.cancel(index);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tnotificationDisposables.add(buttonAction);\n\n\t\t\t\t\tprimaryActions.push(buttonAction);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tif (options.cancellable) {\n\t\t\t\tconst cancelAction = new class extends Action {\n\t\t\t\t\tconstructor() {\n\t\t\t\t\t\tsuper('progress.cancel', localize('cancel', \"Cancel\"), undefined, true);\n\t\t\t\t\t}\n\n\t\t\t\t\toverride async run(): Promise<void> {\n\t\t\t\t\t\tprogressStateModel.cancel();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tnotificationDisposables.add(cancelAction);\n\n\t\t\t\tprimaryActions.push(cancelAction);\n\t\t\t}\n\n\t\t\tconst notification = this.notificationService.notify({\n\t\t\t\tseverity: Severity.Info,\n\t\t\t\tmessage: stripIcons(message), // status entries support codicons, but notifications do not (https://github.com/microsoft/vscode/issues/145722)\n\t\t\t\tsource: options.source,\n\t\t\t\tactions: { primary: primaryActions, secondary: secondaryActions },\n\t\t\t\tprogress: typeof increment === 'number' && increment >= 0 ? { total: 100, worked: increment } : { infinite: true },\n\t\t\t\tpriority\n\t\t\t});\n\n\t\t\t// Switch to window based progress once the notification\n\t\t\t// changes visibility to hidden and is still ongoing.\n\t\t\t// Remove that window based progress once the notification\n\t\t\t// shows again.\n\t\t\tlet windowProgressDisposable: IDisposable | undefined = undefined;\n\t\t\tconst onVisibilityChange = (visible: boolean) => {\n\t\t\t\t// Clear any previous running window progress\n\t\t\t\tdispose(windowProgressDisposable);\n\n\t\t\t\t// Create new window progress if notification got hidden\n\t\t\t\tif (!visible && !progressStateModel.done) {\n\t\t\t\t\twindowProgressDisposable = createWindowProgress();\n\t\t\t\t}\n\t\t\t};\n\t\t\tnotificationDisposables.add(notification.onDidChangeVisibility(onVisibilityChange));\n\t\t\tif (priority === NotificationPriority.SILENT) {\n\t\t\t\tonVisibilityChange(false);\n\t\t\t}\n\n\t\t\t// Clear upon dispose\n\t\t\tEvent.once(notification.onDidClose)(() => notificationDisposables.dispose());\n\n\t\t\treturn notification;\n\t\t};\n\n\t\tconst updateProgress = (notification: INotificationHandle, increment?: number): void => {\n\t\t\tif (typeof increment === 'number' && increment >= 0) {\n\t\t\t\tnotification.progress.total(100); // always percentage based\n\t\t\t\tnotification.progress.worked(increment);\n\t\t\t} else {\n\t\t\t\tnotification.progress.infinite();\n\t\t\t}\n\t\t};\n\n\t\tlet notificationHandle: INotificationHandle | undefined;\n\t\tlet notificationTimeout: any | undefined;\n\t\tlet titleAndMessage: string | undefined; // hoisted to make sure a delayed notification shows the most recent message\n\n\t\tconst updateNotification = (step?: IProgressStep): void => {\n\n\t\t\t// full message (inital or update)\n\t\t\tif (step?.message && options.title) {\n\t\t\t\ttitleAndMessage = `${options.title}: ${step.message}`; // always prefix with overall title if we have it (https://github.com/microsoft/vscode/issues/50932)\n\t\t\t} else {\n\t\t\t\ttitleAndMessage = options.title || step?.message;\n\t\t\t}\n\n\t\t\tif (!notificationHandle && titleAndMessage) {\n\n\t\t\t\t// create notification now or after a delay\n\t\t\t\tif (typeof options.delay === 'number' && options.delay > 0) {\n\t\t\t\t\tif (typeof notificationTimeout !== 'number') {\n\t\t\t\t\t\tnotificationTimeout = setTimeout(() => notificationHandle = createNotification(titleAndMessage!, options.priority, step?.increment), options.delay);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tnotificationHandle = createNotification(titleAndMessage, options.priority, step?.increment);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (notificationHandle) {\n\t\t\t\tif (titleAndMessage) {\n\t\t\t\t\tnotificationHandle.updateMessage(titleAndMessage);\n\t\t\t\t}\n\n\t\t\t\tif (typeof step?.increment === 'number') {\n\t\t\t\t\tupdateProgress(notificationHandle, step.increment);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Show initially\n\t\tupdateNotification(progressStateModel.step);\n\t\tconst listener = progressStateModel.onDidReport(step => updateNotification(step));\n\t\tEvent.once(progressStateModel.onWillDispose)(() => listener.dispose());\n\n\t\t// Clean up eventually\n\t\t(async () => {\n\t\t\ttry {\n\n\t\t\t\t// with a delay we only wait for the finish of the promise\n\t\t\t\tif (typeof options.delay === 'number' && options.delay > 0) {\n\t\t\t\t\tawait progressStateModel.promise;\n\t\t\t\t}\n\n\t\t\t\t// without a delay we show the notification for at least 800ms\n\t\t\t\t// to reduce the chance of the notification flashing up and hiding\n\t\t\t\telse {\n\t\t\t\t\tawait Promise.all([timeout(800), progressStateModel.promise]);\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tclearTimeout(notificationTimeout);\n\t\t\t\tnotificationHandle?.close();\n\t\t\t}\n\t\t})();\n\n\t\treturn progressStateModel.promise;\n\t}\n\n\tprivate withPaneCompositeProgress<P extends Promise<R>, R = unknown>(paneCompositeId: string, viewContainerLocation: ViewContainerLocation, task: (progress: IProgress<IProgressStep>) => P, options: IProgressCompositeOptions): P {\n\n\t\t// show in viewlet\n\t\tconst progressIndicator = this.paneCompositeService.getProgressIndicator(paneCompositeId, viewContainerLocation);\n\t\tconst promise = progressIndicator ? this.withCompositeProgress(progressIndicator, task, options) : task({ report: () => { } });\n\n\t\t// show on activity bar\n\t\tif (viewContainerLocation === ViewContainerLocation.Sidebar) {\n\t\t\tthis.showOnActivityBar<P, R>(paneCompositeId, options, promise);\n\t\t}\n\n\t\treturn promise;\n\t}\n\n\tprivate withViewProgress<P extends Promise<R>, R = unknown>(viewId: string, task: (progress: IProgress<IProgressStep>) => P, options: IProgressCompositeOptions): P {\n\n\t\t// show in viewlet\n\t\tconst progressIndicator = this.viewsService.getViewProgressIndicator(viewId);\n\t\tconst promise = progressIndicator ? this.withCompositeProgress(progressIndicator, task, options) : task({ report: () => { } });\n\n\t\tconst location = this.viewDescriptorService.getViewLocationById(viewId);\n\t\tif (location !== ViewContainerLocation.Sidebar) {\n\t\t\treturn promise;\n\t\t}\n\n\t\tconst viewletId = this.viewDescriptorService.getViewContainerByViewId(viewId)?.id;\n\t\tif (viewletId === undefined) {\n\t\t\treturn promise;\n\t\t}\n\n\t\t// show on activity bar\n\t\tthis.showOnActivityBar(viewletId, options, promise);\n\n\t\treturn promise;\n\t}\n\n\tprivate showOnActivityBar<P extends Promise<R>, R = unknown>(viewletId: string, options: IProgressCompositeOptions, promise: P): void {\n\t\tlet activityProgress: IDisposable;\n\t\tlet delayHandle: any = setTimeout(() => {\n\t\t\tdelayHandle = undefined;\n\t\t\tconst handle = this.activityService.showViewContainerActivity(viewletId, { badge: new ProgressBadge(() => ''), clazz: 'progress-badge', priority: 100 });\n\t\t\tconst startTimeVisible = Date.now();\n\t\t\tconst minTimeVisible = 300;\n\t\t\tactivityProgress = {\n\t\t\t\tdispose() {\n\t\t\t\t\tconst d = Date.now() - startTimeVisible;\n\t\t\t\t\tif (d < minTimeVisible) {\n\t\t\t\t\t\t// should at least show for Nms\n\t\t\t\t\t\tsetTimeout(() => handle.dispose(), minTimeVisible - d);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// shown long enough\n\t\t\t\t\t\thandle.dispose();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t}, options.delay || 300);\n\t\tpromise.finally(() => {\n\t\t\tclearTimeout(delayHandle);\n\t\t\tdispose(activityProgress);\n\t\t});\n\t}\n\n\tprivate withCompositeProgress<P extends Promise<R>, R = unknown>(progressIndicator: IProgressIndicator, task: (progress: IProgress<IProgressStep>) => P, options: IProgressCompositeOptions): P {\n\t\tlet discreteProgressRunner: IProgressRunner | undefined = undefined;\n\n\t\tfunction updateProgress(stepOrTotal: IProgressStep | number | undefined): IProgressRunner | undefined {\n\n\t\t\t// Figure out whether discrete progress applies\n\t\t\t// by figuring out the \"total\" progress to show\n\t\t\t// and the increment if any.\n\t\t\tlet total: number | undefined = undefined;\n\t\t\tlet increment: number | undefined = undefined;\n\t\t\tif (typeof stepOrTotal !== 'undefined') {\n\t\t\t\tif (typeof stepOrTotal === 'number') {\n\t\t\t\t\ttotal = stepOrTotal;\n\t\t\t\t} else if (typeof stepOrTotal.increment === 'number') {\n\t\t\t\t\ttotal = stepOrTotal.total ?? 100; // always percentage based\n\t\t\t\t\tincrement = stepOrTotal.increment;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Discrete\n\t\t\tif (typeof total === 'number') {\n\t\t\t\tif (!discreteProgressRunner) {\n\t\t\t\t\tdiscreteProgressRunner = progressIndicator.show(total, options.delay);\n\t\t\t\t\tpromise.catch(() => undefined /* ignore */).finally(() => discreteProgressRunner?.done());\n\t\t\t\t}\n\n\t\t\t\tif (typeof increment === 'number') {\n\t\t\t\t\tdiscreteProgressRunner.worked(increment);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Infinite\n\t\t\telse {\n\t\t\t\tdiscreteProgressRunner?.done();\n\t\t\t\tprogressIndicator.showWhile(promise, options.delay);\n\t\t\t}\n\n\t\t\treturn discreteProgressRunner;\n\t\t}\n\n\t\tconst promise = task({\n\t\t\treport: progress => {\n\t\t\t\tupdateProgress(progress);\n\t\t\t}\n\t\t});\n\n\t\tupdateProgress(options.total);\n\n\t\treturn promise;\n\t}\n\n\tprivate withDialogProgress<P extends Promise<R>, R = unknown>(options: IProgressDialogOptions, task: (progress: IProgress<IProgressStep>) => P, onDidCancel?: (choice?: number) => void): P {\n\t\tconst disposables = new DisposableStore();\n\n\t\tconst allowableCommands = [\n\t\t\t'workbench.action.quit',\n\t\t\t'workbench.action.reloadWindow',\n\t\t\t'copy',\n\t\t\t'cut',\n\t\t\t'editor.action.clipboardCopyAction',\n\t\t\t'editor.action.clipboardCutAction'\n\t\t];\n\n\t\tlet dialog: Dialog;\n\n\t\tconst createDialog = (message: string) => {\n\t\t\tconst buttons = options.buttons || [];\n\t\t\tif (!options.sticky) {\n\t\t\t\tbuttons.push(options.cancellable ? localize('cancel', \"Cancel\") : localize('dismiss', \"Dismiss\"));\n\t\t\t}\n\n\t\t\tdialog = new Dialog(\n\t\t\t\tthis.layoutService.container,\n\t\t\t\tmessage,\n\t\t\t\tbuttons,\n\t\t\t\t{\n\t\t\t\t\ttype: 'pending',\n\t\t\t\t\tdetail: options.detail,\n\t\t\t\t\tcancelId: buttons.length - 1,\n\t\t\t\t\tdisableCloseAction: options.sticky,\n\t\t\t\t\tdisableDefaultAction: options.sticky,\n\t\t\t\t\tkeyEventProcessor: (event: StandardKeyboardEvent) => {\n\t\t\t\t\t\tconst resolved = this.keybindingService.softDispatch(event, this.layoutService.container);\n\t\t\t\t\t\tif (resolved.kind === ResultKind.KbFound && resolved.commandId) {\n\t\t\t\t\t\t\tif (!allowableCommands.includes(resolved.commandId)) {\n\t\t\t\t\t\t\t\tEventHelper.stop(event, true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tbuttonStyles: defaultButtonStyles,\n\t\t\t\t\tcheckboxStyles: defaultCheckboxStyles,\n\t\t\t\t\tinputBoxStyles: defaultInputBoxStyles,\n\t\t\t\t\tdialogStyles: defaultDialogStyles\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tdisposables.add(dialog);\n\n\t\t\tdialog.show().then(dialogResult => {\n\t\t\t\tonDidCancel?.(dialogResult.button);\n\n\t\t\t\tdispose(dialog);\n\t\t\t});\n\n\t\t\treturn dialog;\n\t\t};\n\n\t\t// In order to support the `delay` option, we use a scheduler\n\t\t// that will guard each access to the dialog behind a delay\n\t\t// that is either the original delay for one invocation and\n\t\t// otherwise runs without delay.\n\t\tlet delay = options.delay ?? 0;\n\t\tlet latestMessage: string | undefined = undefined;\n\t\tconst scheduler = disposables.add(new RunOnceScheduler(() => {\n\t\t\tdelay = 0; // since we have run once, we reset the delay\n\n\t\t\tif (latestMessage && !dialog) {\n\t\t\t\tdialog = createDialog(latestMessage);\n\t\t\t} else if (latestMessage) {\n\t\t\t\tdialog.updateMessage(latestMessage);\n\t\t\t}\n\t\t}, 0));\n\n\t\tconst updateDialog = function (message?: string): void {\n\t\t\tlatestMessage = message;\n\n\t\t\t// Make sure to only run one dialog update and not multiple\n\t\t\tif (!scheduler.isScheduled()) {\n\t\t\t\tscheduler.schedule(delay);\n\t\t\t}\n\t\t};\n\n\t\tconst promise = task({\n\t\t\treport: progress => {\n\t\t\t\tupdateDialog(progress.message);\n\t\t\t}\n\t\t});\n\n\t\tpromise.finally(() => {\n\t\t\tdispose(disposables);\n\t\t});\n\n\t\tif (options.title) {\n\t\t\tupdateDialog(options.title);\n\t\t}\n\n\t\treturn promise;\n\t}\n}\n\nregisterSingleton(IProgressService, ProgressService, InstantiationType.Delayed);\n"]}