{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/progress/browser/progressIndicator.ts"],"names":[],"mappings":"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","file":"progressIndicator.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ProgressBar } from 'vs/base/browser/ui/progressbar/progressbar';\nimport { IProgressRunner, IProgressIndicator, emptyProgressRunner } from 'vs/platform/progress/common/progress';\nimport { IEditorGroupView } from 'vs/workbench/browser/parts/editor/editor';\nimport { GroupModelChangeKind } from 'vs/workbench/common/editor';\n\nexport class EditorProgressIndicator extends Disposable implements IProgressIndicator {\n\n\tconstructor(\n\t\tprivate readonly progressBar: ProgressBar,\n\t\tprivate readonly group: IEditorGroupView\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners() {\n\n\t\t// Stop any running progress when the active editor changes or\n\t\t// the group becomes empty.\n\t\t// In contrast to the composite progress indicator, we do not\n\t\t// track active editor progress and replay it later (yet).\n\t\tthis._register(this.group.onDidModelChange(e => {\n\t\t\tif (\n\t\t\t\te.kind === GroupModelChangeKind.EDITOR_ACTIVE ||\n\t\t\t\t(e.kind === GroupModelChangeKind.EDITOR_CLOSE && this.group.isEmpty)\n\t\t\t) {\n\t\t\t\tthis.progressBar.stop().hide();\n\t\t\t}\n\t\t}));\n\t}\n\n\tshow(infinite: true, delay?: number): IProgressRunner;\n\tshow(total: number, delay?: number): IProgressRunner;\n\tshow(infiniteOrTotal: true | number, delay?: number): IProgressRunner {\n\n\t\t// No editor open: ignore any progress reporting\n\t\tif (this.group.isEmpty) {\n\t\t\treturn emptyProgressRunner;\n\t\t}\n\n\t\tif (infiniteOrTotal === true) {\n\t\t\treturn this.doShow(true, delay);\n\t\t}\n\n\t\treturn this.doShow(infiniteOrTotal, delay);\n\t}\n\n\tprivate doShow(infinite: true, delay?: number): IProgressRunner;\n\tprivate doShow(total: number, delay?: number): IProgressRunner;\n\tprivate doShow(infiniteOrTotal: true | number, delay?: number): IProgressRunner {\n\t\tif (typeof infiniteOrTotal === 'boolean') {\n\t\t\tthis.progressBar.infinite().show(delay);\n\t\t} else {\n\t\t\tthis.progressBar.total(infiniteOrTotal).show(delay);\n\t\t}\n\n\t\treturn {\n\t\t\ttotal: (total: number) => {\n\t\t\t\tthis.progressBar.total(total);\n\t\t\t},\n\n\t\t\tworked: (worked: number) => {\n\t\t\t\tif (this.progressBar.hasTotal()) {\n\t\t\t\t\tthis.progressBar.worked(worked);\n\t\t\t\t} else {\n\t\t\t\t\tthis.progressBar.infinite().show();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tdone: () => {\n\t\t\t\tthis.progressBar.stop().hide();\n\t\t\t}\n\t\t};\n\t}\n\n\tasync showWhile(promise: Promise<unknown>, delay?: number): Promise<void> {\n\n\t\t// No editor open: ignore any progress reporting\n\t\tif (this.group.isEmpty) {\n\t\t\ttry {\n\t\t\t\tawait promise;\n\t\t\t} catch (error) {\n\t\t\t\t// ignore\n\t\t\t}\n\t\t}\n\n\t\treturn this.doShowWhile(promise, delay);\n\t}\n\n\tprivate async doShowWhile(promise: Promise<unknown>, delay?: number): Promise<void> {\n\t\ttry {\n\t\t\tthis.progressBar.infinite().show(delay);\n\n\t\t\tawait promise;\n\t\t} catch (error) {\n\t\t\t// ignore\n\t\t} finally {\n\t\t\tthis.progressBar.stop().hide();\n\t\t}\n\t}\n}\n\nnamespace ProgressIndicatorState {\n\n\texport const enum Type {\n\t\tNone,\n\t\tDone,\n\t\tInfinite,\n\t\tWhile,\n\t\tWork\n\t}\n\n\texport const None = { type: Type.None } as const;\n\texport const Done = { type: Type.Done } as const;\n\texport const Infinite = { type: Type.Infinite } as const;\n\n\texport class While {\n\n\t\treadonly type = Type.While;\n\n\t\tconstructor(\n\t\t\treadonly whilePromise: Promise<unknown>,\n\t\t\treadonly whileStart: number,\n\t\t\treadonly whileDelay: number,\n\t\t) { }\n\t}\n\n\texport class Work {\n\n\t\treadonly type = Type.Work;\n\n\t\tconstructor(\n\t\t\treadonly total: number | undefined,\n\t\t\treadonly worked: number | undefined\n\t\t) { }\n\t}\n\n\texport type State =\n\t\ttypeof None\n\t\t| typeof Done\n\t\t| typeof Infinite\n\t\t| While\n\t\t| Work;\n}\n\nexport interface IProgressScope {\n\n\t/**\n\t * Fired whenever `isActive` value changed.\n\t */\n\treadonly onDidChangeActive: Event<void>;\n\n\t/**\n\t * Whether progress should be active or not.\n\t */\n\treadonly isActive: boolean;\n}\n\nexport class ScopedProgressIndicator extends Disposable implements IProgressIndicator {\n\n\tprivate progressState: ProgressIndicatorState.State = ProgressIndicatorState.None;\n\n\tconstructor(\n\t\tprivate readonly progressBar: ProgressBar,\n\t\tprivate readonly scope: IProgressScope\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tregisterListeners() {\n\t\tthis._register(this.scope.onDidChangeActive(() => {\n\t\t\tif (this.scope.isActive) {\n\t\t\t\tthis.onDidScopeActivate();\n\t\t\t} else {\n\t\t\t\tthis.onDidScopeDeactivate();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate onDidScopeActivate(): void {\n\n\t\t// Return early if progress state indicates that progress is done\n\t\tif (this.progressState.type === ProgressIndicatorState.Done.type) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Replay Infinite Progress from Promise\n\t\tif (this.progressState.type === ProgressIndicatorState.Type.While) {\n\t\t\tlet delay: number | undefined;\n\t\t\tif (this.progressState.whileDelay > 0) {\n\t\t\t\tconst remainingDelay = this.progressState.whileDelay - (Date.now() - this.progressState.whileStart);\n\t\t\t\tif (remainingDelay > 0) {\n\t\t\t\t\tdelay = remainingDelay;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.doShowWhile(delay);\n\t\t}\n\n\t\t// Replay Infinite Progress\n\t\telse if (this.progressState.type === ProgressIndicatorState.Type.Infinite) {\n\t\t\tthis.progressBar.infinite().show();\n\t\t}\n\n\t\t// Replay Finite Progress (Total & Worked)\n\t\telse if (this.progressState.type === ProgressIndicatorState.Type.Work) {\n\t\t\tif (this.progressState.total) {\n\t\t\t\tthis.progressBar.total(this.progressState.total).show();\n\t\t\t}\n\n\t\t\tif (this.progressState.worked) {\n\t\t\t\tthis.progressBar.worked(this.progressState.worked).show();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate onDidScopeDeactivate(): void {\n\t\tthis.progressBar.stop().hide();\n\t}\n\n\tshow(infinite: true, delay?: number): IProgressRunner;\n\tshow(total: number, delay?: number): IProgressRunner;\n\tshow(infiniteOrTotal: true | number, delay?: number): IProgressRunner {\n\n\t\t// Sort out Arguments\n\t\tif (typeof infiniteOrTotal === 'boolean') {\n\t\t\tthis.progressState = ProgressIndicatorState.Infinite;\n\t\t} else {\n\t\t\tthis.progressState = new ProgressIndicatorState.Work(infiniteOrTotal, undefined);\n\t\t}\n\n\t\t// Active: Show Progress\n\t\tif (this.scope.isActive) {\n\n\t\t\t// Infinite: Start Progressbar and Show after Delay\n\t\t\tif (this.progressState.type === ProgressIndicatorState.Type.Infinite) {\n\t\t\t\tthis.progressBar.infinite().show(delay);\n\t\t\t}\n\n\t\t\t// Finite: Start Progressbar and Show after Delay\n\t\t\telse if (this.progressState.type === ProgressIndicatorState.Type.Work && typeof this.progressState.total === 'number') {\n\t\t\t\tthis.progressBar.total(this.progressState.total).show(delay);\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\ttotal: (total: number) => {\n\t\t\t\tthis.progressState = new ProgressIndicatorState.Work(\n\t\t\t\t\ttotal,\n\t\t\t\t\tthis.progressState.type === ProgressIndicatorState.Type.Work ? this.progressState.worked : undefined);\n\n\t\t\t\tif (this.scope.isActive) {\n\t\t\t\t\tthis.progressBar.total(total);\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tworked: (worked: number) => {\n\n\t\t\t\t// Verify first that we are either not active or the progressbar has a total set\n\t\t\t\tif (!this.scope.isActive || this.progressBar.hasTotal()) {\n\t\t\t\t\tthis.progressState = new ProgressIndicatorState.Work(\n\t\t\t\t\t\tthis.progressState.type === ProgressIndicatorState.Type.Work ? this.progressState.total : undefined,\n\t\t\t\t\t\tthis.progressState.type === ProgressIndicatorState.Type.Work && typeof this.progressState.worked === 'number' ? this.progressState.worked + worked : worked);\n\n\t\t\t\t\tif (this.scope.isActive) {\n\t\t\t\t\t\tthis.progressBar.worked(worked);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Otherwise the progress bar does not support worked(), we fallback to infinite() progress\n\t\t\t\telse {\n\t\t\t\t\tthis.progressState = ProgressIndicatorState.Infinite;\n\t\t\t\t\tthis.progressBar.infinite().show();\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tdone: () => {\n\t\t\t\tthis.progressState = ProgressIndicatorState.Done;\n\n\t\t\t\tif (this.scope.isActive) {\n\t\t\t\t\tthis.progressBar.stop().hide();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tasync showWhile(promise: Promise<unknown>, delay?: number): Promise<void> {\n\n\t\t// Join with existing running promise to ensure progress is accurate\n\t\tif (this.progressState.type === ProgressIndicatorState.Type.While) {\n\t\t\tpromise = Promise.all([promise, this.progressState.whilePromise]);\n\t\t}\n\n\t\t// Keep Promise in State\n\t\tthis.progressState = new ProgressIndicatorState.While(promise, delay || 0, Date.now());\n\n\t\ttry {\n\t\t\tthis.doShowWhile(delay);\n\n\t\t\tawait promise;\n\t\t} catch (error) {\n\t\t\t// ignore\n\t\t} finally {\n\n\t\t\t// If this is not the last promise in the list of joined promises, skip this\n\t\t\tif (this.progressState.type !== ProgressIndicatorState.Type.While || this.progressState.whilePromise === promise) {\n\n\t\t\t\t// The while promise is either null or equal the promise we last hooked on\n\t\t\t\tthis.progressState = ProgressIndicatorState.None;\n\n\t\t\t\tif (this.scope.isActive) {\n\t\t\t\t\tthis.progressBar.stop().hide();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate doShowWhile(delay?: number): void {\n\n\t\t// Show Progress when active\n\t\tif (this.scope.isActive) {\n\t\t\tthis.progressBar.infinite().show(delay);\n\t\t}\n\t}\n}\n\nexport abstract class AbstractProgressScope extends Disposable implements IProgressScope {\n\n\tprivate readonly _onDidChangeActive = this._register(new Emitter<void>());\n\treadonly onDidChangeActive = this._onDidChangeActive.event;\n\n\tget isActive() { return this._isActive; }\n\n\tconstructor(\n\t\tprivate scopeId: string,\n\t\tprivate _isActive: boolean\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected onScopeOpened(scopeId: string) {\n\t\tif (scopeId === this.scopeId) {\n\t\t\tif (!this._isActive) {\n\t\t\t\tthis._isActive = true;\n\n\t\t\t\tthis._onDidChangeActive.fire();\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected onScopeClosed(scopeId: string) {\n\t\tif (scopeId === this.scopeId) {\n\t\t\tif (this._isActive) {\n\t\t\t\tthis._isActive = false;\n\n\t\t\t\tthis._onDidChangeActive.fire();\n\t\t\t}\n\t\t}\n\t}\n}\n"]}