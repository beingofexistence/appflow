{"version":3,"sources":["vs/workbench/services/userDataSync/common/userDataSync.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAkBnF,QAAA,IAAI,GAA4B,IAAA,mBAAG,EAA4C,+BAA+B,CAAC,CAAC;IA6B7H,SAAgB,IAAI,CAAa,MAAoB;QACpD,QAAQ,MAAM,EAAE;YACf,2CAA0B,CAAC,CAAC,OAAO,IAAA,cAAQ,EAAC,CAAU,EAAE,IAAU,CAAC,CAAC;YACpE,iDAA6B,CAAC,CAAC,OAAO,IAAA,cAAQ,EAAC,CAAa,EAAE,IAAoB,CAAC,CAAC;YACpF,2CAA0B,CAAC,CAAC,OAAO,IAAA,cAAQ,EAAC,CAAU,EAAE,IAAe,CAAC,CAAC;YACzE,qCAAuB,CAAC,CAAC,OAAO,IAAA,cAAQ,EAAC,CAAO,EAAE,IAAY,CAAC,CAAC;YAChE,+CAA4B,CAAC,CAAC,OAAO,IAAA,cAAQ,EAAC,CAAY,EAAE,IAAY,CAAC,CAAC;YAC1E,iDAA6B,CAAC,CAAC,OAAO,IAAA,cAAQ,EAAC,CAAgB,EAAE,IAAU,CAAC,CAAC;YAC7E,2CAA0B,CAAC,CAAC,OAAO,IAAA,cAAQ,EAAC,CAAU,EAAE,IAAU,CAAC,CAAC;YACpE,uDAAgC,CAAC,CAAC,OAAO,IAAA,cAAQ,EAAC,CAAuB,EAAE,IAAiB,CAAC,CAAC;SAC9F;IACF,CAAC;IAXD,oBAWC;IAED,IAAkB,aAGjB;IAHD,WAAkB,aAAa;QAC9B,4CAA2B,CAAA;QAC3B,wCAAuB,CAAA;IACxB,CAAC,EAHiB,aAAa,6BAAb,aAAa,QAG9B;IAMY,QAAA,IAAI,GAAkB,eAAe,CAAC;IACtC,QAAA,IAAI,GAAS,IAAA,cAAQ,EAAC,CAAe,EAAE,IAAe,CAAC,CAAC;IAExD,QAAA,IAAI,GAAa,IAAA,kBAAG,EAAU,yBAAyB,EAAE,cAAG,CAAK,IAAI,EAAE,IAAA,cAAQ,EAAC,CAAc,EAAE,IAAsC,CAAC,CAAC,CAAC;IAEtJ,WAAW;IACE,QAAA,IAAI,GAAiB,IAAI,gBAAG,CAAmB,YAAY,iDAA2B,CAAC;IACvF,QAAA,IAAI,GAAsB,IAAI,gBAAG,CAAoB,aAAa,EAAE,KAAK,CAAC,CAAC;IAC3E,QAAA,IAAI,GAAoB,IAAI,gBAAG,CAAmB,2BAA2B,gDAA4B,CAAC;IAC1G,QAAA,IAAI,GAA4B,IAAI,gBAAG,CAAoB,yBAAyB,EAAE,KAAK,CAAC,CAAC;IAC7F,QAAA,IAAI,GAAiC,IAAI,gBAAG,CAAoB,yBAAyB,EAAE,KAAK,CAAC,CAAC;IAClG,QAAA,IAAI,GAAoB,IAAI,gBAAG,CAAoB,cAAc,EAAE,KAAK,CAAC,CAAC;IAEvF,WAAW;IACE,QAAA,IAAI,GAAwB,0CAA0C,CAAC;IACvE,QAAA,IAAI,GAAuB,wCAAwC,CAAC;IAEjF,QAAQ;IACK,QAAA,IAAI,GAAqB,qBAAqB,CAAC;IAC/C,QAAA,IAAI,GAAqB,gCAAgC,CAAC","file":"userDataSync.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IAuthenticationProvider, SyncStatus, SyncResource, IUserDataSyncResource, IResourcePreview } from 'vs/platform/userDataSync/common/userDataSync';\nimport { Event } from 'vs/base/common/event';\nimport { RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { localize } from 'vs/nls';\nimport { URI } from 'vs/base/common/uri';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { registerIcon } from 'vs/platform/theme/common/iconRegistry';\nimport { IView } from 'vs/workbench/common/views';\n\nexport interface IUserDataSyncAccount {\n\treadonly authenticationProviderId: string;\n\treadonly accountName: string;\n\treadonly accountId: string;\n}\n\nexport const IUserDataSyncWorkbenchService = createDecorator<IUserDataSyncWorkbenchService>('IUserDataSyncWorkbenchService');\nexport interface IUserDataSyncWorkbenchService {\n\t_serviceBrand: any;\n\n\treadonly enabled: boolean;\n\treadonly authenticationProviders: IAuthenticationProvider[];\n\n\treadonly current: IUserDataSyncAccount | undefined;\n\n\treadonly accountStatus: AccountStatus;\n\treadonly onDidChangeAccountStatus: Event<AccountStatus>;\n\n\tturnOn(): Promise<void>;\n\tturnoff(everyWhere: boolean): Promise<void>;\n\tsignIn(): Promise<void>;\n\n\tresetSyncedData(): Promise<void>;\n\tshowSyncActivity(): Promise<void>;\n\tsyncNow(): Promise<void>;\n\n\tsynchroniseUserDataSyncStoreType(): Promise<void>;\n\n\tshowConflicts(conflictToOpen?: IResourcePreview): Promise<void>;\n\taccept(resource: IUserDataSyncResource, conflictResource: URI, content: string | null | undefined, apply: boolean): Promise<void>;\n\n\tgetAllLogResources(): Promise<URI[]>;\n\tdownloadSyncActivity(location: URI): Promise<void>;\n}\n\nexport function getSyncAreaLabel(source: SyncResource): string {\n\tswitch (source) {\n\t\tcase SyncResource.Settings: return localize('settings', \"Settings\");\n\t\tcase SyncResource.Keybindings: return localize('keybindings', \"Keyboard Shortcuts\");\n\t\tcase SyncResource.Snippets: return localize('snippets', \"User Snippets\");\n\t\tcase SyncResource.Tasks: return localize('tasks', \"User Tasks\");\n\t\tcase SyncResource.Extensions: return localize('extensions', \"Extensions\");\n\t\tcase SyncResource.GlobalState: return localize('ui state label', \"UI State\");\n\t\tcase SyncResource.Profiles: return localize('profiles', \"Profiles\");\n\t\tcase SyncResource.WorkspaceState: return localize('workspace state label', \"Workspace State\");\n\t}\n}\n\nexport const enum AccountStatus {\n\tUnavailable = 'unavailable',\n\tAvailable = 'available',\n}\n\nexport interface IUserDataSyncConflictsView extends IView {\n\topen(conflict: IResourcePreview): Promise<void>;\n}\n\nexport const SYNC_ORIGINAL_TITLE = 'Settings Sync';\nexport const SYNC_TITLE = localize('sync category', \"Settings Sync\");\n\nexport const SYNC_VIEW_ICON = registerIcon('settings-sync-view-icon', Codicon.sync, localize('syncViewIcon', 'View icon of the Settings Sync view.'));\n\n// Contexts\nexport const CONTEXT_SYNC_STATE = new RawContextKey<string>('syncStatus', SyncStatus.Uninitialized);\nexport const CONTEXT_SYNC_ENABLEMENT = new RawContextKey<boolean>('syncEnabled', false);\nexport const CONTEXT_ACCOUNT_STATE = new RawContextKey<string>('userDataSyncAccountStatus', AccountStatus.Unavailable);\nexport const CONTEXT_ENABLE_ACTIVITY_VIEWS = new RawContextKey<boolean>(`enableSyncActivityViews`, false);\nexport const CONTEXT_ENABLE_SYNC_CONFLICTS_VIEW = new RawContextKey<boolean>(`enableSyncConflictsView`, false);\nexport const CONTEXT_HAS_CONFLICTS = new RawContextKey<boolean>('hasConflicts', false);\n\n// Commands\nexport const CONFIGURE_SYNC_COMMAND_ID = 'workbench.userDataSync.actions.configure';\nexport const SHOW_SYNC_LOG_COMMAND_ID = 'workbench.userDataSync.actions.showLog';\n\n// VIEWS\nexport const SYNC_VIEW_CONTAINER_ID = 'workbench.view.sync';\nexport const SYNC_CONFLICTS_VIEW_ID = 'workbench.views.sync.conflicts';\n"]}