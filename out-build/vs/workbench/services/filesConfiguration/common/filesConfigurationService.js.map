{"version":3,"sources":["vs/workbench/services/filesConfiguration/common/filesConfigurationService.ts"],"names":[],"mappings":"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","file":"filesConfigurationService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { RawContextKey, IContextKey, IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IFilesConfiguration, AutoSaveConfiguration, HotExitConfiguration, FILES_READONLY_INCLUDE_CONFIG, FILES_READONLY_EXCLUDE_CONFIG, IFileStatWithMetadata, IFileService, IBaseFileStat, hasReadonlyCapability } from 'vs/platform/files/common/files';\nimport { equals } from 'vs/base/common/objects';\nimport { URI } from 'vs/base/common/uri';\nimport { isWeb } from 'vs/base/common/platform';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { ResourceGlobMatcher } from 'vs/workbench/common/resources';\nimport { IdleValue } from 'vs/base/common/async';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { ResourceMap } from 'vs/base/common/map';\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\n\nexport const AutoSaveAfterShortDelayContext = new RawContextKey<boolean>('autoSaveAfterShortDelayContext', false, true);\n\nexport interface IAutoSaveConfiguration {\n\treadonly autoSaveDelay?: number;\n\treadonly autoSaveFocusChange: boolean;\n\treadonly autoSaveApplicationChange: boolean;\n}\n\nexport const enum AutoSaveMode {\n\tOFF,\n\tAFTER_SHORT_DELAY,\n\tAFTER_LONG_DELAY,\n\tON_FOCUS_CHANGE,\n\tON_WINDOW_CHANGE\n}\n\nexport const IFilesConfigurationService = createDecorator<IFilesConfigurationService>('filesConfigurationService');\n\nexport interface IFilesConfigurationService {\n\n\treadonly _serviceBrand: undefined;\n\n\t//#region Auto Save\n\n\treadonly onAutoSaveConfigurationChange: Event<IAutoSaveConfiguration>;\n\n\tgetAutoSaveConfiguration(): IAutoSaveConfiguration;\n\n\tgetAutoSaveMode(): AutoSaveMode;\n\n\ttoggleAutoSave(): Promise<void>;\n\n\t//#endregion\n\n\t//#region Configured Readonly\n\n\treadonly onReadonlyChange: Event<void>;\n\n\tisReadonly(resource: URI, stat?: IBaseFileStat): boolean | IMarkdownString;\n\n\tupdateReadonly(resource: URI, readonly: true | false | 'toggle' | 'reset'): Promise<void>;\n\n\t//#endregion\n\n\treadonly onFilesAssociationChange: Event<void>;\n\n\treadonly isHotExitEnabled: boolean;\n\n\treadonly hotExitConfiguration: string | undefined;\n\n\tpreventSaveConflicts(resource: URI, language?: string): boolean;\n}\n\nexport class FilesConfigurationService extends Disposable implements IFilesConfigurationService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static readonly DEFAULT_AUTO_SAVE_MODE = isWeb ? AutoSaveConfiguration.AFTER_DELAY : AutoSaveConfiguration.OFF;\n\n\tprivate static readonly READONLY_MESSAGES = {\n\t\tproviderReadonly: { value: localize('providerReadonly', \"Editor is read-only because the file system of the file is read-only.\"), isTrusted: true },\n\t\tsessionReadonly: { value: localize({ key: 'sessionReadonly', comment: ['Please do not translate the word \"command\", it is part of our internal syntax which must not change', '{Locked=\"](command:{0})\"}'] }, \"Editor is read-only because the file was set read-only in this session. [Click here](command:{0}) to set writeable.\", 'workbench.action.files.setActiveEditorWriteableInSession'), isTrusted: true },\n\t\tconfiguredReadonly: { value: localize({ key: 'configuredReadonly', comment: ['Please do not translate the word \"command\", it is part of our internal syntax which must not change', '{Locked=\"](command:{0})\"}'] }, \"Editor is read-only because the file was set read-only via settings. [Click here](command:{0}) to configure.\", `workbench.action.openSettings?${encodeURIComponent('[\"files.readonly\"]')}`), isTrusted: true },\n\t\tfileLocked: { value: localize({ key: 'fileLocked', comment: ['Please do not translate the word \"command\", it is part of our internal syntax which must not change', '{Locked=\"](command:{0})\"}'] }, \"Editor is read-only because of file permissions. [Click here](command:{0}) to set writeable anyway.\", 'workbench.action.files.setActiveEditorWriteableInSession'), isTrusted: true },\n\t\tfileReadonly: { value: localize('fileReadonly', \"Editor is read-only because the file is read-only.\"), isTrusted: true }\n\t};\n\n\tprivate readonly _onAutoSaveConfigurationChange = this._register(new Emitter<IAutoSaveConfiguration>());\n\treadonly onAutoSaveConfigurationChange = this._onAutoSaveConfigurationChange.event;\n\n\tprivate readonly _onFilesAssociationChange = this._register(new Emitter<void>());\n\treadonly onFilesAssociationChange = this._onFilesAssociationChange.event;\n\n\tprivate readonly _onReadonlyConfigurationChange = this._register(new Emitter<void>());\n\treadonly onReadonlyChange = this._onReadonlyConfigurationChange.event;\n\n\tprivate configuredAutoSaveDelay?: number;\n\tprivate configuredAutoSaveOnFocusChange: boolean | undefined;\n\tprivate configuredAutoSaveOnWindowChange: boolean | undefined;\n\n\tprivate autoSaveAfterShortDelayContext: IContextKey<boolean>;\n\n\tprivate currentFilesAssociationConfig: { [key: string]: string };\n\n\tprivate currentHotExitConfig: string;\n\n\tprivate readonly readonlyIncludeMatcher = this._register(new IdleValue(() => this.createReadonlyMatcher(FILES_READONLY_INCLUDE_CONFIG)));\n\tprivate readonly readonlyExcludeMatcher = this._register(new IdleValue(() => this.createReadonlyMatcher(FILES_READONLY_EXCLUDE_CONFIG)));\n\tprivate configuredReadonlyFromPermissions: boolean | undefined;\n\n\tprivate readonly sessionReadonlyOverrides = new ResourceMap<boolean>(resource => this.uriIdentityService.extUri.getComparisonKey(resource));\n\n\tconstructor(\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IFileService private readonly fileService: IFileService\n\t) {\n\t\tsuper();\n\n\t\tthis.autoSaveAfterShortDelayContext = AutoSaveAfterShortDelayContext.bindTo(contextKeyService);\n\n\t\tconst configuration = configurationService.getValue<IFilesConfiguration>();\n\n\t\tthis.currentFilesAssociationConfig = configuration?.files?.associations;\n\t\tthis.currentHotExitConfig = configuration?.files?.hotExit || HotExitConfiguration.ON_EXIT;\n\n\t\tthis.onFilesConfigurationChange(configuration);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate createReadonlyMatcher(config: string) {\n\t\tconst matcher = this._register(new ResourceGlobMatcher(\n\t\t\tresource => this.configurationService.getValue(config, { resource }),\n\t\t\tevent => event.affectsConfiguration(config),\n\t\t\tthis.contextService,\n\t\t\tthis.configurationService\n\t\t));\n\n\t\tthis._register(matcher.onExpressionChange(() => this._onReadonlyConfigurationChange.fire()));\n\n\t\treturn matcher;\n\t}\n\n\tisReadonly(resource: URI, stat?: IBaseFileStat): boolean | IMarkdownString {\n\n\t\t// if the entire file system provider is readonly, we respect that\n\t\t// and do not allow to change readonly. we take this as a hint that\n\t\t// the provider has no capabilities of writing.\n\t\tconst provider = this.fileService.getProvider(resource.scheme);\n\t\tif (provider && hasReadonlyCapability(provider)) {\n\t\t\treturn provider.readOnlyMessage ?? FilesConfigurationService.READONLY_MESSAGES.providerReadonly;\n\t\t}\n\n\t\t// session override always wins over the others\n\t\tconst sessionReadonlyOverride = this.sessionReadonlyOverrides.get(resource);\n\t\tif (typeof sessionReadonlyOverride === 'boolean') {\n\t\t\treturn sessionReadonlyOverride === true ? FilesConfigurationService.READONLY_MESSAGES.sessionReadonly : false;\n\t\t}\n\n\t\tif (\n\t\t\tthis.uriIdentityService.extUri.isEqualOrParent(resource, this.environmentService.userRoamingDataHome) ||\n\t\t\tthis.uriIdentityService.extUri.isEqual(resource, this.contextService.getWorkspace().configuration ?? undefined)\n\t\t) {\n\t\t\treturn false; // explicitly exclude some paths from readonly that we need for configuration\n\t\t}\n\n\t\t// configured glob patterns win over stat information\n\t\tif (this.readonlyIncludeMatcher.value.matches(resource)) {\n\t\t\treturn !this.readonlyExcludeMatcher.value.matches(resource) ? FilesConfigurationService.READONLY_MESSAGES.configuredReadonly : false;\n\t\t}\n\n\t\t// check if file is locked and configured to treat as readonly\n\t\tif (this.configuredReadonlyFromPermissions && stat?.locked) {\n\t\t\treturn FilesConfigurationService.READONLY_MESSAGES.fileLocked;\n\t\t}\n\n\t\t// check if file is marked readonly from the file system provider\n\t\tif (stat?.readonly) {\n\t\t\treturn FilesConfigurationService.READONLY_MESSAGES.fileReadonly;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tasync updateReadonly(resource: URI, readonly: true | false | 'toggle' | 'reset'): Promise<void> {\n\t\tif (readonly === 'toggle') {\n\t\t\tlet stat: IFileStatWithMetadata | undefined = undefined;\n\t\t\ttry {\n\t\t\t\tstat = await this.fileService.resolve(resource, { resolveMetadata: true });\n\t\t\t} catch (error) {\n\t\t\t\t// ignore\n\t\t\t}\n\n\t\t\treadonly = !this.isReadonly(resource, stat);\n\t\t}\n\n\t\tif (readonly === 'reset') {\n\t\t\tthis.sessionReadonlyOverrides.delete(resource);\n\t\t} else {\n\t\t\tthis.sessionReadonlyOverrides.set(resource, readonly);\n\t\t}\n\n\t\tthis._onReadonlyConfigurationChange.fire();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Files configuration changes\n\t\tthis._register(this.configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('files')) {\n\t\t\t\tthis.onFilesConfigurationChange(this.configurationService.getValue<IFilesConfiguration>());\n\t\t\t}\n\t\t}));\n\t}\n\n\tprotected onFilesConfigurationChange(configuration: IFilesConfiguration): void {\n\n\t\t// Auto Save\n\t\tconst autoSaveMode = configuration?.files?.autoSave || FilesConfigurationService.DEFAULT_AUTO_SAVE_MODE;\n\t\tswitch (autoSaveMode) {\n\t\t\tcase AutoSaveConfiguration.AFTER_DELAY:\n\t\t\t\tthis.configuredAutoSaveDelay = configuration?.files?.autoSaveDelay;\n\t\t\t\tthis.configuredAutoSaveOnFocusChange = false;\n\t\t\t\tthis.configuredAutoSaveOnWindowChange = false;\n\t\t\t\tbreak;\n\n\t\t\tcase AutoSaveConfiguration.ON_FOCUS_CHANGE:\n\t\t\t\tthis.configuredAutoSaveDelay = undefined;\n\t\t\t\tthis.configuredAutoSaveOnFocusChange = true;\n\t\t\t\tthis.configuredAutoSaveOnWindowChange = false;\n\t\t\t\tbreak;\n\n\t\t\tcase AutoSaveConfiguration.ON_WINDOW_CHANGE:\n\t\t\t\tthis.configuredAutoSaveDelay = undefined;\n\t\t\t\tthis.configuredAutoSaveOnFocusChange = false;\n\t\t\t\tthis.configuredAutoSaveOnWindowChange = true;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthis.configuredAutoSaveDelay = undefined;\n\t\t\t\tthis.configuredAutoSaveOnFocusChange = false;\n\t\t\t\tthis.configuredAutoSaveOnWindowChange = false;\n\t\t\t\tbreak;\n\t\t}\n\n\t\tthis.autoSaveAfterShortDelayContext.set(this.getAutoSaveMode() === AutoSaveMode.AFTER_SHORT_DELAY);\n\t\tthis._onAutoSaveConfigurationChange.fire(this.getAutoSaveConfiguration());\n\n\t\t// Check for change in files associations\n\t\tconst filesAssociation = configuration?.files?.associations;\n\t\tif (!equals(this.currentFilesAssociationConfig, filesAssociation)) {\n\t\t\tthis.currentFilesAssociationConfig = filesAssociation;\n\t\t\tthis._onFilesAssociationChange.fire();\n\t\t}\n\n\t\t// Hot exit\n\t\tconst hotExitMode = configuration?.files?.hotExit;\n\t\tif (hotExitMode === HotExitConfiguration.OFF || hotExitMode === HotExitConfiguration.ON_EXIT_AND_WINDOW_CLOSE) {\n\t\t\tthis.currentHotExitConfig = hotExitMode;\n\t\t} else {\n\t\t\tthis.currentHotExitConfig = HotExitConfiguration.ON_EXIT;\n\t\t}\n\n\t\t// Readonly\n\t\tconst readonlyFromPermissions = Boolean(configuration?.files?.readonlyFromPermissions);\n\t\tif (readonlyFromPermissions !== Boolean(this.configuredReadonlyFromPermissions)) {\n\t\t\tthis.configuredReadonlyFromPermissions = readonlyFromPermissions;\n\t\t\tthis._onReadonlyConfigurationChange.fire();\n\t\t}\n\t}\n\n\tgetAutoSaveMode(): AutoSaveMode {\n\t\tif (this.configuredAutoSaveOnFocusChange) {\n\t\t\treturn AutoSaveMode.ON_FOCUS_CHANGE;\n\t\t}\n\n\t\tif (this.configuredAutoSaveOnWindowChange) {\n\t\t\treturn AutoSaveMode.ON_WINDOW_CHANGE;\n\t\t}\n\n\t\tif (typeof this.configuredAutoSaveDelay === 'number' && this.configuredAutoSaveDelay >= 0) {\n\t\t\treturn this.configuredAutoSaveDelay <= 1000 ? AutoSaveMode.AFTER_SHORT_DELAY : AutoSaveMode.AFTER_LONG_DELAY;\n\t\t}\n\n\t\treturn AutoSaveMode.OFF;\n\t}\n\n\tgetAutoSaveConfiguration(): IAutoSaveConfiguration {\n\t\treturn {\n\t\t\tautoSaveDelay: typeof this.configuredAutoSaveDelay === 'number' && this.configuredAutoSaveDelay >= 0 ? this.configuredAutoSaveDelay : undefined,\n\t\t\tautoSaveFocusChange: !!this.configuredAutoSaveOnFocusChange,\n\t\t\tautoSaveApplicationChange: !!this.configuredAutoSaveOnWindowChange\n\t\t};\n\t}\n\n\tasync toggleAutoSave(): Promise<void> {\n\t\tconst currentSetting = this.configurationService.getValue('files.autoSave');\n\n\t\tlet newAutoSaveValue: string;\n\t\tif ([AutoSaveConfiguration.AFTER_DELAY, AutoSaveConfiguration.ON_FOCUS_CHANGE, AutoSaveConfiguration.ON_WINDOW_CHANGE].some(setting => setting === currentSetting)) {\n\t\t\tnewAutoSaveValue = AutoSaveConfiguration.OFF;\n\t\t} else {\n\t\t\tnewAutoSaveValue = AutoSaveConfiguration.AFTER_DELAY;\n\t\t}\n\n\t\treturn this.configurationService.updateValue('files.autoSave', newAutoSaveValue);\n\t}\n\n\tget isHotExitEnabled(): boolean {\n\t\tif (this.contextService.getWorkspace().transient) {\n\t\t\t// Transient workspace: hot exit is disabled because\n\t\t\t// transient workspaces are not restored upon restart\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this.currentHotExitConfig !== HotExitConfiguration.OFF;\n\t}\n\n\tget hotExitConfiguration(): string {\n\t\treturn this.currentHotExitConfig;\n\t}\n\n\tpreventSaveConflicts(resource: URI, language?: string): boolean {\n\t\treturn this.configurationService.getValue('files.saveConflictResolution', { resource, overrideIdentifier: language }) !== 'overwriteFileOnDisk';\n\t}\n}\n\nregisterSingleton(IFilesConfigurationService, FilesConfigurationService, InstantiationType.Eager);\n"]}