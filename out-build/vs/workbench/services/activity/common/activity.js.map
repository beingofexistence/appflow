{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/activity/common/activity.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAYnF,QAAA,GAAG,GAAgB,IAAA,mBAAG,EAA+B,iBAAiB,CAAC,CAAC;IA+BrF,MAAM,SAAS;QAEd,YAAqB,YAAkC;YAAlC,iBAAY,GAAZ,YAAY,CAAsB;YACtD,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;QAClC,CAAC;QAED,cAAc;YACb,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC;KACD;IAED,MAAa,GAAY,SAAQ,SAAS;QAEzC,YAAqB,MAAc,EAAE,YAAqC;YACzE,KAAK,CAAC,YAAY,CAAC,CAAC;YADA,WAAM,GAAN,MAAM,CAAQ;YAGlC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACtB,CAAC;QAEQ,cAAc;YACtB,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACvC,CAAC;KACD;IAXD,kBAWC;IAED,MAAa,GAAU,SAAQ,SAAS;QAEvC,YAAqB,IAAY,EAAE,YAA0B;YAC5D,KAAK,CAAC,YAAY,CAAC,CAAC;YADA,SAAI,GAAJ,IAAI,CAAQ;QAEjC,CAAC;KACD;IALD,kBAKC;IAED,MAAa,GAAU,SAAQ,SAAS;QACvC,YAAqB,IAAe,EAAE,YAA0B;YAC/D,KAAK,CAAC,YAAY,CAAC,CAAC;YADA,SAAI,GAAJ,IAAI,CAAW;QAEpC,CAAC;KACD;IAJD,kBAIC;IAED,MAAa,GAAc,SAAQ,SAAS;KAAI;IAAhD,kBAAgD","file":"activity.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { ThemeIcon } from 'vs/base/common/themables';\n\nexport interface IActivity {\n\treadonly badge: IBadge;\n\treadonly clazz?: string;\n\treadonly priority?: number;\n}\n\nexport const IActivityService = createDecorator<IActivityService>('activityService');\n\nexport interface IActivityService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Show activity for the given view container\n\t */\n\tshowViewContainerActivity(viewContainerId: string, badge: IActivity): IDisposable;\n\n\t/**\n\t * Show activity for the given view\n\t */\n\tshowViewActivity(viewId: string, badge: IActivity): IDisposable;\n\n\t/**\n\t * Show accounts activity\n\t */\n\tshowAccountsActivity(activity: IActivity): IDisposable;\n\n\t/**\n\t * Show global activity\n\t */\n\tshowGlobalActivity(activity: IActivity): IDisposable;\n}\n\nexport interface IBadge {\n\tgetDescription(): string;\n}\n\nclass BaseBadge implements IBadge {\n\n\tconstructor(readonly descriptorFn: (arg: any) => string) {\n\t\tthis.descriptorFn = descriptorFn;\n\t}\n\n\tgetDescription(): string {\n\t\treturn this.descriptorFn(null);\n\t}\n}\n\nexport class NumberBadge extends BaseBadge {\n\n\tconstructor(readonly number: number, descriptorFn: (num: number) => string) {\n\t\tsuper(descriptorFn);\n\n\t\tthis.number = number;\n\t}\n\n\toverride getDescription(): string {\n\t\treturn this.descriptorFn(this.number);\n\t}\n}\n\nexport class TextBadge extends BaseBadge {\n\n\tconstructor(readonly text: string, descriptorFn: () => string) {\n\t\tsuper(descriptorFn);\n\t}\n}\n\nexport class IconBadge extends BaseBadge {\n\tconstructor(readonly icon: ThemeIcon, descriptorFn: () => string) {\n\t\tsuper(descriptorFn);\n\t}\n}\n\nexport class ProgressBadge extends BaseBadge { }\n"]}