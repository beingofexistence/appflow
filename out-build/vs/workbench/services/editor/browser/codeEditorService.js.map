{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/editor/browser/codeEditorService.ts"],"names":[],"mappings":"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","file":"codeEditorService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ICodeEditor, isCodeEditor, isDiffEditor, isCompositeEditor, getCodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { AbstractCodeEditorService } from 'vs/editor/browser/services/abstractCodeEditorService';\nimport { ScrollType } from 'vs/editor/common/editorCommon';\nimport { IResourceEditorInput } from 'vs/platform/editor/common/editor';\nimport { IThemeService } from 'vs/platform/theme/common/themeService';\nimport { IWorkbenchEditorConfiguration } from 'vs/workbench/common/editor';\nimport { ACTIVE_GROUP, IEditorService, SIDE_GROUP } from 'vs/workbench/services/editor/common/editorService';\nimport { ICodeEditorService } from 'vs/editor/browser/services/codeEditorService';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { isEqual } from 'vs/base/common/resources';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { applyTextEditorOptions } from 'vs/workbench/common/editor/editorOptions';\n\nexport class CodeEditorService extends AbstractCodeEditorService {\n\n\tconstructor(\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IThemeService themeService: IThemeService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t) {\n\t\tsuper(themeService);\n\n\t\tthis._register(this.registerCodeEditorOpenHandler(this.doOpenCodeEditor.bind(this)));\n\t\tthis._register(this.registerCodeEditorOpenHandler(this.doOpenCodeEditorFromDiff.bind(this)));\n\t}\n\n\tgetActiveCodeEditor(): ICodeEditor | null {\n\t\tconst activeTextEditorControl = this.editorService.activeTextEditorControl;\n\t\tif (isCodeEditor(activeTextEditorControl)) {\n\t\t\treturn activeTextEditorControl;\n\t\t}\n\n\t\tif (isDiffEditor(activeTextEditorControl)) {\n\t\t\treturn activeTextEditorControl.getModifiedEditor();\n\t\t}\n\n\t\tconst activeControl = this.editorService.activeEditorPane?.getControl();\n\t\tif (isCompositeEditor(activeControl) && isCodeEditor(activeControl.activeCodeEditor)) {\n\t\t\treturn activeControl.activeCodeEditor;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate async doOpenCodeEditorFromDiff(input: IResourceEditorInput, source: ICodeEditor | null, sideBySide?: boolean): Promise<ICodeEditor | null> {\n\n\t\t// Special case: If the active editor is a diff editor and the request to open originates and\n\t\t// targets the modified side of it, we just apply the request there to prevent opening the modified\n\t\t// side as separate editor.\n\t\tconst activeTextEditorControl = this.editorService.activeTextEditorControl;\n\t\tif (\n\t\t\t!sideBySide &&\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// we need the current active group to be the target\n\t\t\tisDiffEditor(activeTextEditorControl) && \t\t\t\t\t\t\t\t\t// we only support this for active text diff editors\n\t\t\tinput.options &&\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// we need options to apply\n\t\t\tinput.resource &&\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// we need a request resource to compare with\n\t\t\tsource === activeTextEditorControl.getModifiedEditor() && \t\t\t\t\t// we need the source of this request to be the modified side of the diff editor\n\t\t\tactiveTextEditorControl.getModel() &&\t\t\t\t\t\t\t\t\t\t// we need a target model to compare with\n\t\t\tisEqual(input.resource, activeTextEditorControl.getModel()?.modified.uri) \t// we need the input resources to match with modified side\n\t\t) {\n\t\t\tconst targetEditor = activeTextEditorControl.getModifiedEditor();\n\n\t\t\tapplyTextEditorOptions(input.options, targetEditor, ScrollType.Smooth);\n\n\t\t\treturn targetEditor;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t// Open using our normal editor service\n\tprivate async doOpenCodeEditor(input: IResourceEditorInput, source: ICodeEditor | null, sideBySide?: boolean): Promise<ICodeEditor | null> {\n\n\t\t// Special case: we want to detect the request to open an editor that\n\t\t// is different from the current one to decide whether the current editor\n\t\t// should be pinned or not. This ensures that the source of a navigation\n\t\t// is not being replaced by the target. An example is \"Goto definition\"\n\t\t// that otherwise would replace the editor everytime the user navigates.\n\t\tconst enablePreviewFromCodeNavigation = this.configurationService.getValue<IWorkbenchEditorConfiguration>().workbench?.editor?.enablePreviewFromCodeNavigation;\n\t\tif (\n\t\t\t!enablePreviewFromCodeNavigation &&              \t// we only need to do this if the configuration requires it\n\t\t\tsource &&\t\t\t\t\t\t\t\t\t\t\t// we need to know the origin of the navigation\n\t\t\t!input.options?.pinned &&\t\t\t\t\t\t\t// we only need to look at preview editors that open\n\t\t\t!sideBySide &&\t\t\t\t\t\t\t\t\t\t// we only need to care if editor opens in same group\n\t\t\t!isEqual(source.getModel()?.uri, input.resource)\t// we only need to do this if the editor is about to change\n\t\t) {\n\t\t\tfor (const visiblePane of this.editorService.visibleEditorPanes) {\n\t\t\t\tif (getCodeEditor(visiblePane.getControl()) === source) {\n\t\t\t\t\tvisiblePane.group.pinEditor();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Open as editor\n\t\tconst control = await this.editorService.openEditor(input, sideBySide ? SIDE_GROUP : ACTIVE_GROUP);\n\t\tif (control) {\n\t\t\tconst widget = control.getControl();\n\t\t\tif (isCodeEditor(widget)) {\n\t\t\t\treturn widget;\n\t\t\t}\n\n\t\t\tif (isCompositeEditor(widget) && isCodeEditor(widget.activeCodeEditor)) {\n\t\t\t\treturn widget.activeCodeEditor;\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n}\n\nregisterSingleton(ICodeEditorService, CodeEditorService, InstantiationType.Delayed);\n"]}