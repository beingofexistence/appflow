{"version":3,"sources":["vs/workbench/services/editor/browser/editorResolverService.ts"],"names":[],"mappings":"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","file":"editorResolverService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as glob from 'vs/base/common/glob';\nimport { distinct, firstOrDefault, flatten, insert } from 'vs/base/common/arrays';\nimport { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { basename, extname, isEqual } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { EditorActivation, EditorResolution, IEditorOptions } from 'vs/platform/editor/common/editor';\nimport { DEFAULT_EDITOR_ASSOCIATION, EditorResourceAccessor, EditorInputWithOptions, IResourceSideBySideEditorInput, isEditorInputWithOptions, isEditorInputWithOptionsAndGroup, isResourceDiffEditorInput, isResourceSideBySideEditorInput, isUntitledResourceEditorInput, isResourceMergeEditorInput, IUntypedEditorInput, SideBySideEditor } from 'vs/workbench/common/editor';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { IEditorGroup, IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { Schemas } from 'vs/base/common/network';\nimport { RegisteredEditorInfo, RegisteredEditorPriority, RegisteredEditorOptions, EditorAssociation, EditorAssociations, editorsAssociationsSettingId, globMatchesResource, IEditorResolverService, priorityToRank, ResolvedEditor, ResolvedStatus, EditorInputFactoryObject } from 'vs/workbench/services/editor/common/editorResolverService';\nimport { QuickPickItem, IKeyMods, IQuickInputService, IQuickPickItem, IQuickPickSeparator } from 'vs/platform/quickinput/common/quickInput';\nimport { localize } from 'vs/nls';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { findGroup } from 'vs/workbench/services/editor/common/editorGroupFinder';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { PreferredGroup } from 'vs/workbench/services/editor/common/editorService';\nimport { SideBySideEditorInput } from 'vs/workbench/common/editor/sideBySideEditorInput';\nimport { PauseableEmitter } from 'vs/base/common/event';\n\ninterface RegisteredEditor {\n\tglobPattern: string | glob.IRelativePattern;\n\teditorInfo: RegisteredEditorInfo;\n\toptions?: RegisteredEditorOptions;\n\teditorFactoryObject: EditorInputFactoryObject;\n}\n\ntype RegisteredEditors = Array<RegisteredEditor>;\n\nexport class EditorResolverService extends Disposable implements IEditorResolverService {\n\treadonly _serviceBrand: undefined;\n\n\t// Events\n\tprivate readonly _onDidChangeEditorRegistrations = this._register(new PauseableEmitter<void>());\n\treadonly onDidChangeEditorRegistrations = this._onDidChangeEditorRegistrations.event;\n\n\t// Constants\n\tprivate static readonly configureDefaultID = 'promptOpenWith.configureDefault';\n\tprivate static readonly cacheStorageID = 'editorOverrideService.cache';\n\tprivate static readonly conflictingDefaultsStorageID = 'editorOverrideService.conflictingDefaults';\n\n\t// Data Stores\n\tprivate _editors: Map<string | glob.IRelativePattern, Map<string, RegisteredEditors>> = new Map<string | glob.IRelativePattern, Map<string, RegisteredEditors>>();\n\tprivate _flattenedEditors: Map<string | glob.IRelativePattern, RegisteredEditors> = new Map();\n\tprivate _shouldReFlattenEditors: boolean = true;\n\tprivate cache: Set<string> | undefined;\n\n\tconstructor(\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t\t// Read in the cache on statup\n\t\tthis.cache = new Set<string>(JSON.parse(this.storageService.get(EditorResolverService.cacheStorageID, StorageScope.PROFILE, JSON.stringify([]))));\n\t\tthis.storageService.remove(EditorResolverService.cacheStorageID, StorageScope.PROFILE);\n\n\t\tthis._register(this.storageService.onWillSaveState(() => {\n\t\t\t// We want to store the glob patterns we would activate on, this allows us to know if we need to await the ext host on startup for opening a resource\n\t\t\tthis.cacheEditors();\n\t\t}));\n\n\t\t// When extensions have registered we no longer need the cache\n\t\tthis.extensionService.onDidRegisterExtensions(() => {\n\t\t\tthis.cache = undefined;\n\t\t});\n\t}\n\n\tprivate resolveUntypedInputAndGroup(editor: IUntypedEditorInput, preferredGroup: PreferredGroup | undefined): [IUntypedEditorInput, IEditorGroup, EditorActivation | undefined] | undefined {\n\t\tconst untypedEditor = editor;\n\n\t\t// Use the untyped editor to find a group\n\t\tconst [group, activation] = this.instantiationService.invokeFunction(findGroup, untypedEditor, preferredGroup);\n\n\t\treturn [untypedEditor, group, activation];\n\t}\n\n\tasync resolveEditor(editor: IUntypedEditorInput, preferredGroup: PreferredGroup | undefined): Promise<ResolvedEditor> {\n\t\t// Update the flattened editors\n\t\tthis._flattenedEditors = this._flattenEditorsMap();\n\n\t\t// Special case: side by side editors requires us to\n\t\t// independently resolve both sides and then build\n\t\t// a side by side editor with the result\n\t\tif (isResourceSideBySideEditorInput(editor)) {\n\t\t\treturn this.doResolveSideBySideEditor(editor, preferredGroup);\n\t\t}\n\n\t\tconst resolvedUntypedAndGroup = this.resolveUntypedInputAndGroup(editor, preferredGroup);\n\t\tif (!resolvedUntypedAndGroup) {\n\t\t\treturn ResolvedStatus.NONE;\n\t\t}\n\t\t// Get the resolved untyped editor, group, and activation\n\t\tconst [untypedEditor, group, activation] = resolvedUntypedAndGroup;\n\t\tif (activation) {\n\t\t\tuntypedEditor.options = { ...untypedEditor.options, activation };\n\t\t}\n\n\t\tlet resource = EditorResourceAccessor.getCanonicalUri(untypedEditor, { supportSideBySide: SideBySideEditor.PRIMARY });\n\n\t\t// If it was resolved before we await for the extensions to activate and then proceed with resolution or else the backing extensions won't be registered\n\t\tif (this.cache && resource && this.resourceMatchesCache(resource)) {\n\t\t\tawait this.extensionService.whenInstalledExtensionsRegistered();\n\t\t}\n\n\t\t// Undefined resource -> untilted. Other malformed URI's are unresolvable\n\t\tif (resource === undefined) {\n\t\t\tresource = URI.from({ scheme: Schemas.untitled });\n\t\t} else if (resource.scheme === undefined || resource === null) {\n\t\t\treturn ResolvedStatus.NONE;\n\t\t}\n\n\t\tif (untypedEditor.options?.override === EditorResolution.PICK) {\n\t\t\tconst picked = await this.doPickEditor(untypedEditor);\n\t\t\t// If the picker was cancelled we will stop resolving the editor\n\t\t\tif (!picked) {\n\t\t\t\treturn ResolvedStatus.ABORT;\n\t\t\t}\n\t\t\t// Populate the options with the new ones\n\t\t\tuntypedEditor.options = picked;\n\t\t}\n\n\t\t// Resolved the editor ID as much as possible, now find a given editor (cast here is ok because we resolve down to a string above)\n\t\tlet { editor: selectedEditor, conflictingDefault } = this.getEditor(resource, untypedEditor.options?.override as (string | EditorResolution.EXCLUSIVE_ONLY | undefined));\n\t\t// If no editor was found and this was a typed editor or an editor with an explicit override we could not resolve it\n\t\tif (!selectedEditor && (untypedEditor.options?.override || isEditorInputWithOptions(editor))) {\n\t\t\treturn ResolvedStatus.NONE;\n\t\t} else if (!selectedEditor) {\n\t\t\t// Simple untyped editors that we could not resolve will be resolved to the default editor\n\t\t\tconst resolvedEditor = this.getEditor(resource, DEFAULT_EDITOR_ASSOCIATION.id);\n\t\t\tselectedEditor = resolvedEditor?.editor;\n\t\t\tconflictingDefault = resolvedEditor?.conflictingDefault;\n\t\t\tif (!selectedEditor) {\n\t\t\t\treturn ResolvedStatus.NONE;\n\t\t\t}\n\t\t}\n\n\t\t// In the special case of diff editors we do some more work to determine the correct editor for both sides\n\t\tif (isResourceDiffEditorInput(untypedEditor) && untypedEditor.options?.override === undefined) {\n\t\t\tlet resource2 = EditorResourceAccessor.getCanonicalUri(untypedEditor, { supportSideBySide: SideBySideEditor.SECONDARY });\n\t\t\tif (!resource2) {\n\t\t\t\tresource2 = URI.from({ scheme: Schemas.untitled });\n\t\t\t}\n\t\t\tconst { editor: selectedEditor2 } = this.getEditor(resource2, undefined);\n\t\t\tif (!selectedEditor2 || selectedEditor.editorInfo.id !== selectedEditor2.editorInfo.id) {\n\t\t\t\tconst { editor: selectedDiff, conflictingDefault: conflictingDefaultDiff } = this.getEditor(resource, DEFAULT_EDITOR_ASSOCIATION.id);\n\t\t\t\tselectedEditor = selectedDiff;\n\t\t\t\tconflictingDefault = conflictingDefaultDiff;\n\t\t\t}\n\t\t\tif (!selectedEditor) {\n\t\t\t\treturn ResolvedStatus.NONE;\n\t\t\t}\n\t\t}\n\n\t\t// If no override we take the selected editor id so that matches works with the isActive check\n\t\tuntypedEditor.options = { override: selectedEditor.editorInfo.id, ...untypedEditor.options };\n\n\t\t// Check if diff can be created based on prescene of factory function\n\t\tif (selectedEditor.editorFactoryObject.createDiffEditorInput === undefined && isResourceDiffEditorInput(untypedEditor)) {\n\t\t\treturn ResolvedStatus.NONE;\n\t\t}\n\n\t\tconst input = await this.doResolveEditor(untypedEditor, group, selectedEditor);\n\t\tif (conflictingDefault && input) {\n\t\t\t// Show the conflicting default dialog\n\t\t\tawait this.doHandleConflictingDefaults(resource, selectedEditor.editorInfo.label, untypedEditor, input.editor, group);\n\t\t}\n\n\t\tif (input) {\n\t\t\tthis.sendEditorResolutionTelemetry(input.editor);\n\t\t\tif (input.editor.editorId !== selectedEditor.editorInfo.id) {\n\t\t\t\tthis.logService.warn(`Editor ID Mismatch: ${input.editor.editorId} !== ${selectedEditor.editorInfo.id}. This will cause bugs. Please ensure editorInput.editorId matches the registered id`);\n\t\t\t}\n\t\t\treturn { ...input, group };\n\t\t}\n\t\treturn ResolvedStatus.ABORT;\n\t}\n\n\tprivate async doResolveSideBySideEditor(editor: IResourceSideBySideEditorInput, preferredGroup: PreferredGroup | undefined): Promise<ResolvedEditor> {\n\t\tconst primaryResolvedEditor = await this.resolveEditor(editor.primary, preferredGroup);\n\t\tif (!isEditorInputWithOptionsAndGroup(primaryResolvedEditor)) {\n\t\t\treturn ResolvedStatus.NONE;\n\t\t}\n\t\tconst secondaryResolvedEditor = await this.resolveEditor(editor.secondary, primaryResolvedEditor.group ?? preferredGroup);\n\t\tif (!isEditorInputWithOptionsAndGroup(secondaryResolvedEditor)) {\n\t\t\treturn ResolvedStatus.NONE;\n\t\t}\n\t\treturn {\n\t\t\tgroup: primaryResolvedEditor.group ?? secondaryResolvedEditor.group,\n\t\t\teditor: this.instantiationService.createInstance(SideBySideEditorInput, editor.label, editor.description, secondaryResolvedEditor.editor, primaryResolvedEditor.editor),\n\t\t\toptions: editor.options\n\t\t};\n\t}\n\n\tbufferChangeEvents(callback: Function): void {\n\t\tthis._onDidChangeEditorRegistrations.pause();\n\t\ttry {\n\t\t\tcallback();\n\t\t} finally {\n\t\t\tthis._onDidChangeEditorRegistrations.resume();\n\t\t}\n\t}\n\n\tregisterEditor(\n\t\tglobPattern: string | glob.IRelativePattern,\n\t\teditorInfo: RegisteredEditorInfo,\n\t\toptions: RegisteredEditorOptions,\n\t\teditorFactoryObject: EditorInputFactoryObject\n\t): IDisposable {\n\t\tlet registeredEditor = this._editors.get(globPattern);\n\t\tif (registeredEditor === undefined) {\n\t\t\tregisteredEditor = new Map<string, RegisteredEditors>();\n\t\t\tthis._editors.set(globPattern, registeredEditor);\n\t\t}\n\n\t\tlet editorsWithId = registeredEditor.get(editorInfo.id);\n\t\tif (editorsWithId === undefined) {\n\t\t\teditorsWithId = [];\n\t\t}\n\t\tconst remove = insert(editorsWithId, {\n\t\t\tglobPattern,\n\t\t\teditorInfo,\n\t\t\toptions,\n\t\t\teditorFactoryObject\n\t\t});\n\t\tregisteredEditor.set(editorInfo.id, editorsWithId);\n\t\tthis._shouldReFlattenEditors = true;\n\t\tthis._onDidChangeEditorRegistrations.fire();\n\t\treturn toDisposable(() => {\n\t\t\tremove();\n\t\t\tif (editorsWithId && editorsWithId.length === 0) {\n\t\t\t\tregisteredEditor?.delete(editorInfo.id);\n\t\t\t}\n\t\t\tthis._shouldReFlattenEditors = true;\n\t\t\tthis._onDidChangeEditorRegistrations.fire();\n\t\t});\n\t}\n\n\tgetAssociationsForResource(resource: URI): EditorAssociations {\n\t\tconst associations = this.getAllUserAssociations();\n\t\tlet matchingAssociations = associations.filter(association => association.filenamePattern && globMatchesResource(association.filenamePattern, resource));\n\t\t// Sort matching associations based on glob length as a longer glob will be more specific\n\t\tmatchingAssociations = matchingAssociations.sort((a, b) => (b.filenamePattern?.length ?? 0) - (a.filenamePattern?.length ?? 0));\n\t\tconst allEditors: RegisteredEditors = this._registeredEditors;\n\t\t// Ensure that the settings are valid editors\n\t\treturn matchingAssociations.filter(association => allEditors.find(c => c.editorInfo.id === association.viewType));\n\t}\n\n\tprivate getAllUserAssociations(): EditorAssociations {\n\t\tconst inspectedEditorAssociations = this.configurationService.inspect<{ [fileNamePattern: string]: string }>(editorsAssociationsSettingId) || {};\n\t\tconst workspaceAssociations = inspectedEditorAssociations.workspaceValue ?? {};\n\t\tconst userAssociations = inspectedEditorAssociations.userValue ?? {};\n\t\tconst rawAssociations: { [fileNamePattern: string]: string } = { ...workspaceAssociations };\n\t\t// We want to apply the user associations on top of the workspace associations but ignore duplicate keys.\n\t\tfor (const [key, value] of Object.entries(userAssociations)) {\n\t\t\tif (rawAssociations[key] === undefined) {\n\t\t\t\trawAssociations[key] = value;\n\t\t\t}\n\t\t}\n\t\tconst associations = [];\n\t\tfor (const [key, value] of Object.entries(rawAssociations)) {\n\t\t\tconst association: EditorAssociation = {\n\t\t\t\tfilenamePattern: key,\n\t\t\t\tviewType: value\n\t\t\t};\n\t\t\tassociations.push(association);\n\t\t}\n\t\treturn associations;\n\t}\n\n\t/**\n\t * Given the nested nature of the editors map, we merge factories of the same glob and id to make it flat\n\t * and easier to work with\n\t */\n\tprivate _flattenEditorsMap() {\n\t\t// If we shouldn't be re-flattening (due to lack of update) then return early\n\t\tif (!this._shouldReFlattenEditors) {\n\t\t\treturn this._flattenedEditors;\n\t\t}\n\t\tthis._shouldReFlattenEditors = false;\n\t\tconst editors = new Map<string | glob.IRelativePattern, RegisteredEditors>();\n\t\tfor (const [glob, value] of this._editors) {\n\t\t\tconst registeredEditors: RegisteredEditors = [];\n\t\t\tfor (const editors of value.values()) {\n\t\t\t\tlet registeredEditor: RegisteredEditor | undefined = undefined;\n\t\t\t\t// Merge all editors with the same id and glob pattern together\n\t\t\t\tfor (const editor of editors) {\n\t\t\t\t\tif (!registeredEditor) {\n\t\t\t\t\t\tregisteredEditor = {\n\t\t\t\t\t\t\teditorInfo: editor.editorInfo,\n\t\t\t\t\t\t\tglobPattern: editor.globPattern,\n\t\t\t\t\t\t\toptions: {},\n\t\t\t\t\t\t\teditorFactoryObject: {}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\t// Merge options and factories\n\t\t\t\t\tregisteredEditor.options = { ...registeredEditor.options, ...editor.options };\n\t\t\t\t\tregisteredEditor.editorFactoryObject = { ...registeredEditor.editorFactoryObject, ...editor.editorFactoryObject };\n\t\t\t\t}\n\t\t\t\tif (registeredEditor) {\n\t\t\t\t\tregisteredEditors.push(registeredEditor);\n\t\t\t\t}\n\t\t\t}\n\t\t\teditors.set(glob, registeredEditors);\n\t\t}\n\t\treturn editors;\n\t}\n\n\t/**\n\t * Returns all editors as an array. Possible to contain duplicates\n\t */\n\tprivate get _registeredEditors(): RegisteredEditors {\n\t\treturn flatten(Array.from(this._flattenedEditors.values()));\n\t}\n\n\tupdateUserAssociations(globPattern: string, editorID: string): void {\n\t\tconst newAssociation: EditorAssociation = { viewType: editorID, filenamePattern: globPattern };\n\t\tconst currentAssociations = this.getAllUserAssociations();\n\t\tconst newSettingObject = Object.create(null);\n\t\t// Form the new setting object including the newest associations\n\t\tfor (const association of [...currentAssociations, newAssociation]) {\n\t\t\tif (association.filenamePattern) {\n\t\t\t\tnewSettingObject[association.filenamePattern] = association.viewType;\n\t\t\t}\n\t\t}\n\t\tthis.configurationService.updateValue(editorsAssociationsSettingId, newSettingObject);\n\t}\n\n\tprivate findMatchingEditors(resource: URI): RegisteredEditor[] {\n\t\t// The user setting should be respected even if the editor doesn't specify that resource in package.json\n\t\tconst userSettings = this.getAssociationsForResource(resource);\n\t\tconst matchingEditors: RegisteredEditor[] = [];\n\t\t// Then all glob patterns\n\t\tfor (const [key, editors] of this._flattenedEditors) {\n\t\t\tfor (const editor of editors) {\n\t\t\t\tconst foundInSettings = userSettings.find(setting => setting.viewType === editor.editorInfo.id);\n\t\t\t\tif ((foundInSettings && editor.editorInfo.priority !== RegisteredEditorPriority.exclusive) || globMatchesResource(key, resource)) {\n\t\t\t\t\tmatchingEditors.push(editor);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Return the editors sorted by their priority\n\t\treturn matchingEditors.sort((a, b) => {\n\t\t\t// Very crude if priorities match longer glob wins as longer globs are normally more specific\n\t\t\tif (priorityToRank(b.editorInfo.priority) === priorityToRank(a.editorInfo.priority) && typeof b.globPattern === 'string' && typeof a.globPattern === 'string') {\n\t\t\t\treturn b.globPattern.length - a.globPattern.length;\n\t\t\t}\n\t\t\treturn priorityToRank(b.editorInfo.priority) - priorityToRank(a.editorInfo.priority);\n\t\t});\n\t}\n\n\tpublic getEditors(resource?: URI): RegisteredEditorInfo[] {\n\t\tthis._flattenedEditors = this._flattenEditorsMap();\n\n\t\t// By resource\n\t\tif (URI.isUri(resource)) {\n\t\t\tconst editors = this.findMatchingEditors(resource);\n\t\t\tif (editors.find(e => e.editorInfo.priority === RegisteredEditorPriority.exclusive)) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\treturn editors.map(editor => editor.editorInfo);\n\t\t}\n\n\t\t// All\n\t\treturn distinct(this._registeredEditors.map(editor => editor.editorInfo), editor => editor.id);\n\t}\n\n\t/**\n\t * Given a resource and an editorId selects the best possible editor\n\t * @returns The editor and whether there was another default which conflicted with it\n\t */\n\tprivate getEditor(resource: URI, editorId: string | EditorResolution.EXCLUSIVE_ONLY | undefined): { editor: RegisteredEditor | undefined; conflictingDefault: boolean } {\n\n\t\tconst findMatchingEditor = (editors: RegisteredEditors, viewType: string) => {\n\t\t\treturn editors.find((editor) => {\n\t\t\t\tif (editor.options && editor.options.canSupportResource !== undefined) {\n\t\t\t\t\treturn editor.editorInfo.id === viewType && editor.options.canSupportResource(resource);\n\t\t\t\t}\n\t\t\t\treturn editor.editorInfo.id === viewType;\n\t\t\t});\n\t\t};\n\n\t\tif (editorId && editorId !== EditorResolution.EXCLUSIVE_ONLY) {\n\t\t\t// Specific id passed in doesn't have to match the resource, it can be anything\n\t\t\tconst registeredEditors = this._registeredEditors;\n\t\t\treturn {\n\t\t\t\teditor: findMatchingEditor(registeredEditors, editorId),\n\t\t\t\tconflictingDefault: false\n\t\t\t};\n\t\t}\n\n\t\tconst editors = this.findMatchingEditors(resource);\n\n\t\tconst associationsFromSetting = this.getAssociationsForResource(resource);\n\t\t// We only want minPriority+ if no user defined setting is found, else we won't resolve an editor\n\t\tconst minPriority = editorId === EditorResolution.EXCLUSIVE_ONLY ? RegisteredEditorPriority.exclusive : RegisteredEditorPriority.builtin;\n\t\tlet possibleEditors = editors.filter(editor => priorityToRank(editor.editorInfo.priority) >= priorityToRank(minPriority) && editor.editorInfo.id !== DEFAULT_EDITOR_ASSOCIATION.id);\n\t\tif (possibleEditors.length === 0) {\n\t\t\treturn {\n\t\t\t\teditor: associationsFromSetting[0] && minPriority !== RegisteredEditorPriority.exclusive ? findMatchingEditor(editors, associationsFromSetting[0].viewType) : undefined,\n\t\t\t\tconflictingDefault: false\n\t\t\t};\n\t\t}\n\t\t// If the editor is exclusive we use that, else use the user setting, else use the built-in+ editor\n\t\tconst selectedViewType = possibleEditors[0].editorInfo.priority === RegisteredEditorPriority.exclusive ?\n\t\t\tpossibleEditors[0].editorInfo.id :\n\t\t\tassociationsFromSetting[0]?.viewType || possibleEditors[0].editorInfo.id;\n\n\t\tlet conflictingDefault = false;\n\n\t\t// Filter out exclusive before we check for conflicts as exclusive editors cannot be manually chosen\n\t\tpossibleEditors = possibleEditors.filter(editor => editor.editorInfo.priority !== RegisteredEditorPriority.exclusive);\n\t\tif (associationsFromSetting.length === 0 && possibleEditors.length > 1) {\n\t\t\tconflictingDefault = true;\n\t\t}\n\n\t\treturn {\n\t\t\teditor: findMatchingEditor(editors, selectedViewType),\n\t\t\tconflictingDefault\n\t\t};\n\t}\n\n\tprivate async doResolveEditor(editor: IUntypedEditorInput, group: IEditorGroup, selectedEditor: RegisteredEditor): Promise<EditorInputWithOptions | undefined> {\n\t\tlet options = editor.options;\n\t\tconst resource = EditorResourceAccessor.getCanonicalUri(editor, { supportSideBySide: SideBySideEditor.PRIMARY });\n\t\t// If no activation option is provided, populate it.\n\t\tif (options && typeof options.activation === 'undefined') {\n\t\t\toptions = { ...options, activation: options.preserveFocus ? EditorActivation.RESTORE : undefined };\n\t\t}\n\n\t\t// If it's a merge editor we trigger the create merge editor input\n\t\tif (isResourceMergeEditorInput(editor)) {\n\t\t\tif (!selectedEditor.editorFactoryObject.createMergeEditorInput) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst inputWithOptions = await selectedEditor.editorFactoryObject.createMergeEditorInput(editor, group);\n\t\t\treturn { editor: inputWithOptions.editor, options: inputWithOptions.options ?? options };\n\t\t}\n\n\t\t// If it's a diff editor we trigger the create diff editor input\n\t\tif (isResourceDiffEditorInput(editor)) {\n\t\t\tif (!selectedEditor.editorFactoryObject.createDiffEditorInput) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst inputWithOptions = await selectedEditor.editorFactoryObject.createDiffEditorInput(editor, group);\n\t\t\treturn { editor: inputWithOptions.editor, options: inputWithOptions.options ?? options };\n\t\t}\n\n\t\tif (isResourceSideBySideEditorInput(editor)) {\n\t\t\tthrow new Error(`Untyped side by side editor input not supported here.`);\n\t\t}\n\n\t\tif (isUntitledResourceEditorInput(editor)) {\n\t\t\tif (!selectedEditor.editorFactoryObject.createUntitledEditorInput) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst inputWithOptions = await selectedEditor.editorFactoryObject.createUntitledEditorInput(editor, group);\n\t\t\treturn { editor: inputWithOptions.editor, options: inputWithOptions.options ?? options };\n\t\t}\n\n\t\t// Should no longer have an undefined resource so lets throw an error if that's somehow the case\n\t\tif (resource === undefined) {\n\t\t\tthrow new Error(`Undefined resource on non untitled editor input.`);\n\t\t}\n\n\t\t// If the editor states it can only be opened once per resource we must close all existing ones except one and move the new one into the group\n\t\tconst singleEditorPerResource = typeof selectedEditor.options?.singlePerResource === 'function' ? selectedEditor.options.singlePerResource() : selectedEditor.options?.singlePerResource;\n\t\tif (singleEditorPerResource) {\n\t\t\tconst foundInput = await this.moveExistingEditorForResource(resource, selectedEditor.editorInfo.id, group);\n\t\t\tif (foundInput) {\n\t\t\t\treturn { editor: foundInput, options };\n\t\t\t}\n\t\t}\n\n\t\t// If no factory is above, return flow back to caller letting them know we could not resolve it\n\t\tif (!selectedEditor.editorFactoryObject.createEditorInput) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Respect options passed back\n\t\tconst inputWithOptions = await selectedEditor.editorFactoryObject.createEditorInput(editor, group);\n\t\toptions = inputWithOptions.options ?? options;\n\t\tconst input = inputWithOptions.editor;\n\n\t\treturn { editor: input, options };\n\t}\n\n\t/**\n\t * Moves an editor with the resource and viewtype to target group if one exists\n\t * Additionally will close any other editors that are open for that resource and viewtype besides the first one found\n\t * @param resource The resource of the editor\n\t * @param viewType the viewtype of the editor\n\t * @param targetGroup The group to move it to\n\t * @returns An editor input if one exists, else undefined\n\t */\n\tprivate async moveExistingEditorForResource(\n\t\tresource: URI,\n\t\tviewType: string,\n\t\ttargetGroup: IEditorGroup,\n\t): Promise<EditorInput | undefined> {\n\t\tconst editorInfoForResource = this.findExistingEditorsForResource(resource, viewType);\n\t\tif (!editorInfoForResource.length) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst editorToUse = editorInfoForResource[0];\n\n\t\t// We should only have one editor but if there are multiple we close the others\n\t\tfor (const { editor, group } of editorInfoForResource) {\n\t\t\tif (editor !== editorToUse.editor) {\n\t\t\t\tconst closed = await group.closeEditor(editor);\n\t\t\t\tif (!closed) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Move the editor already opened to the target group\n\t\tif (targetGroup.id !== editorToUse.group.id) {\n\t\t\teditorToUse.group.moveEditor(editorToUse.editor, targetGroup);\n\t\t\treturn editorToUse.editor;\n\t\t}\n\t\treturn;\n\t}\n\n\t/**\n\t * Given a resource and an editorId, returns all editors open for that resource and editorId.\n\t * @param resource The resource specified\n\t * @param editorId The editorID\n\t * @returns A list of editors\n\t */\n\tprivate findExistingEditorsForResource(\n\t\tresource: URI,\n\t\teditorId: string,\n\t): Array<{ editor: EditorInput; group: IEditorGroup }> {\n\t\tconst out: Array<{ editor: EditorInput; group: IEditorGroup }> = [];\n\t\tconst orderedGroups = distinct([\n\t\t\t...this.editorGroupService.groups,\n\t\t]);\n\n\t\tfor (const group of orderedGroups) {\n\t\t\tfor (const editor of group.editors) {\n\t\t\t\tif (isEqual(editor.resource, resource) && editor.editorId === editorId) {\n\t\t\t\t\tout.push({ editor, group });\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn out;\n\t}\n\n\tprivate async doHandleConflictingDefaults(resource: URI, editorName: string, untypedInput: IUntypedEditorInput, currentEditor: EditorInput, group: IEditorGroup) {\n\t\ttype StoredChoice = {\n\t\t\t[key: string]: string[];\n\t\t};\n\t\tconst editors = this.findMatchingEditors(resource);\n\t\tconst storedChoices: StoredChoice = JSON.parse(this.storageService.get(EditorResolverService.conflictingDefaultsStorageID, StorageScope.PROFILE, '{}'));\n\t\tconst globForResource = `*${extname(resource)}`;\n\t\t// Writes to the storage service that a choice has been made for the currently installed editors\n\t\tconst writeCurrentEditorsToStorage = () => {\n\t\t\tstoredChoices[globForResource] = [];\n\t\t\teditors.forEach(editor => storedChoices[globForResource].push(editor.editorInfo.id));\n\t\t\tthis.storageService.store(EditorResolverService.conflictingDefaultsStorageID, JSON.stringify(storedChoices), StorageScope.PROFILE, StorageTarget.MACHINE);\n\t\t};\n\n\t\t// If the user has already made a choice for this editor we don't want to ask them again\n\t\tif (storedChoices[globForResource] && storedChoices[globForResource].find(editorID => editorID === currentEditor.editorId)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst handle = this.notificationService.prompt(Severity.Warning,\n\t\t\tlocalize('editorResolver.conflictingDefaults', 'There are multiple default editors available for the resource.'),\n\t\t\t[{\n\t\t\t\tlabel: localize('editorResolver.configureDefault', 'Configure Default'),\n\t\t\t\trun: async () => {\n\t\t\t\t\t// Show the picker and tell it to update the setting to whatever the user selected\n\t\t\t\t\tconst picked = await this.doPickEditor(untypedInput, true);\n\t\t\t\t\tif (!picked) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tuntypedInput.options = picked;\n\t\t\t\t\tconst replacementEditor = await this.resolveEditor(untypedInput, group);\n\t\t\t\t\tif (replacementEditor === ResolvedStatus.ABORT || replacementEditor === ResolvedStatus.NONE) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\t// Replace the current editor with the picked one\n\t\t\t\t\tgroup.replaceEditors([\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\teditor: currentEditor,\n\t\t\t\t\t\t\treplacement: replacementEditor.editor,\n\t\t\t\t\t\t\toptions: replacementEditor.options ?? picked,\n\t\t\t\t\t\t}\n\t\t\t\t\t]);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: localize('editorResolver.keepDefault', 'Keep {0}', editorName),\n\t\t\t\trun: writeCurrentEditorsToStorage\n\t\t\t}\n\t\t\t]);\n\t\t// If the user pressed X we assume they want to keep the current editor as default\n\t\tconst onCloseListener = handle.onDidClose(() => {\n\t\t\twriteCurrentEditorsToStorage();\n\t\t\tonCloseListener.dispose();\n\t\t});\n\t}\n\n\tprivate mapEditorsToQuickPickEntry(resource: URI, showDefaultPicker?: boolean) {\n\t\tconst currentEditor = firstOrDefault(this.editorGroupService.activeGroup.findEditors(resource));\n\t\t// If untitled, we want all registered editors\n\t\tlet registeredEditors = resource.scheme === Schemas.untitled ? this._registeredEditors.filter(e => e.editorInfo.priority !== RegisteredEditorPriority.exclusive) : this.findMatchingEditors(resource);\n\t\t// We don't want duplicate Id entries\n\t\tregisteredEditors = distinct(registeredEditors, c => c.editorInfo.id);\n\t\tconst defaultSetting = this.getAssociationsForResource(resource)[0]?.viewType;\n\t\t// Not the most efficient way to do this, but we want to ensure the text editor is at the top of the quickpick\n\t\tregisteredEditors = registeredEditors.sort((a, b) => {\n\t\t\tif (a.editorInfo.id === DEFAULT_EDITOR_ASSOCIATION.id) {\n\t\t\t\treturn -1;\n\t\t\t} else if (b.editorInfo.id === DEFAULT_EDITOR_ASSOCIATION.id) {\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn priorityToRank(b.editorInfo.priority) - priorityToRank(a.editorInfo.priority);\n\t\t\t}\n\t\t});\n\t\tconst quickPickEntries: Array<QuickPickItem> = [];\n\t\tconst currentlyActiveLabel = localize('promptOpenWith.currentlyActive', \"Active\");\n\t\tconst currentDefaultLabel = localize('promptOpenWith.currentDefault', \"Default\");\n\t\tconst currentDefaultAndActiveLabel = localize('promptOpenWith.currentDefaultAndActive', \"Active and Default\");\n\t\t// Default order = setting -> highest priority -> text\n\t\tlet defaultViewType = defaultSetting;\n\t\tif (!defaultViewType && registeredEditors.length > 2 && registeredEditors[1]?.editorInfo.priority !== RegisteredEditorPriority.option) {\n\t\t\tdefaultViewType = registeredEditors[1]?.editorInfo.id;\n\t\t}\n\t\tif (!defaultViewType) {\n\t\t\tdefaultViewType = DEFAULT_EDITOR_ASSOCIATION.id;\n\t\t}\n\t\t// Map the editors to quickpick entries\n\t\tregisteredEditors.forEach(editor => {\n\t\t\tconst currentViewType = currentEditor?.editorId ?? DEFAULT_EDITOR_ASSOCIATION.id;\n\t\t\tconst isActive = currentEditor ? editor.editorInfo.id === currentViewType : false;\n\t\t\tconst isDefault = editor.editorInfo.id === defaultViewType;\n\t\t\tconst quickPickEntry: IQuickPickItem = {\n\t\t\t\tid: editor.editorInfo.id,\n\t\t\t\tlabel: editor.editorInfo.label,\n\t\t\t\tdescription: isActive && isDefault ? currentDefaultAndActiveLabel : isActive ? currentlyActiveLabel : isDefault ? currentDefaultLabel : undefined,\n\t\t\t\tdetail: editor.editorInfo.detail ?? editor.editorInfo.priority,\n\t\t\t};\n\t\t\tquickPickEntries.push(quickPickEntry);\n\t\t});\n\t\tif (!showDefaultPicker && extname(resource) !== '') {\n\t\t\tconst separator: IQuickPickSeparator = { type: 'separator' };\n\t\t\tquickPickEntries.push(separator);\n\t\t\tconst configureDefaultEntry = {\n\t\t\t\tid: EditorResolverService.configureDefaultID,\n\t\t\t\tlabel: localize('promptOpenWith.configureDefault', \"Configure default editor for '{0}'...\", `*${extname(resource)}`),\n\t\t\t};\n\t\t\tquickPickEntries.push(configureDefaultEntry);\n\t\t}\n\t\treturn quickPickEntries;\n\t}\n\n\tprivate async doPickEditor(editor: IUntypedEditorInput, showDefaultPicker?: boolean): Promise<IEditorOptions | undefined> {\n\n\t\ttype EditorPick = {\n\t\t\treadonly item: IQuickPickItem;\n\t\t\treadonly keyMods?: IKeyMods;\n\t\t\treadonly openInBackground: boolean;\n\t\t};\n\n\t\tlet resource = EditorResourceAccessor.getOriginalUri(editor, { supportSideBySide: SideBySideEditor.PRIMARY });\n\n\t\tif (resource === undefined) {\n\t\t\tresource = URI.from({ scheme: Schemas.untitled });\n\t\t}\n\n\t\t// Get all the editors for the resource as quickpick entries\n\t\tconst editorPicks = this.mapEditorsToQuickPickEntry(resource, showDefaultPicker);\n\n\t\t// Create the editor picker\n\t\tconst editorPicker = this.quickInputService.createQuickPick<IQuickPickItem>();\n\t\tconst placeHolderMessage = showDefaultPicker ?\n\t\t\tlocalize('promptOpenWith.updateDefaultPlaceHolder', \"Select new default editor for '{0}'\", `*${extname(resource)}`) :\n\t\t\tlocalize('promptOpenWith.placeHolder', \"Select editor for '{0}'\", basename(resource));\n\t\teditorPicker.placeholder = placeHolderMessage;\n\t\teditorPicker.canAcceptInBackground = true;\n\t\teditorPicker.items = editorPicks;\n\t\tconst firstItem = editorPicker.items.find(item => item.type === 'item') as IQuickPickItem | undefined;\n\t\tif (firstItem) {\n\t\t\teditorPicker.selectedItems = [firstItem];\n\t\t}\n\n\t\t// Prompt the user to select an editor\n\t\tconst picked: EditorPick | undefined = await new Promise<EditorPick | undefined>(resolve => {\n\t\t\teditorPicker.onDidAccept(e => {\n\t\t\t\tlet result: EditorPick | undefined = undefined;\n\n\t\t\t\tif (editorPicker.selectedItems.length === 1) {\n\t\t\t\t\tresult = {\n\t\t\t\t\t\titem: editorPicker.selectedItems[0],\n\t\t\t\t\t\tkeyMods: editorPicker.keyMods,\n\t\t\t\t\t\topenInBackground: e.inBackground\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\t// If asked to always update the setting then update it even if the gear isn't clicked\n\t\t\t\tif (resource && showDefaultPicker && result?.item.id) {\n\t\t\t\t\tthis.updateUserAssociations(`*${extname(resource)}`, result.item.id,);\n\t\t\t\t}\n\n\t\t\t\tresolve(result);\n\t\t\t});\n\n\t\t\teditorPicker.onDidHide(() => resolve(undefined));\n\n\t\t\teditorPicker.onDidTriggerItemButton(e => {\n\n\t\t\t\t// Trigger opening and close picker\n\t\t\t\tresolve({ item: e.item, openInBackground: false });\n\n\t\t\t\t// Persist setting\n\t\t\t\tif (resource && e.item && e.item.id) {\n\t\t\t\t\tthis.updateUserAssociations(`*${extname(resource)}`, e.item.id,);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\teditorPicker.show();\n\t\t});\n\n\t\t// Close picker\n\t\teditorPicker.dispose();\n\n\t\t// If the user picked an editor, look at how the picker was\n\t\t// used (e.g. modifier keys, open in background) and create the\n\t\t// options and group to use accordingly\n\t\tif (picked) {\n\n\t\t\t// If the user selected to configure default we trigger this picker again and tell it to show the default picker\n\t\t\tif (picked.item.id === EditorResolverService.configureDefaultID) {\n\t\t\t\treturn this.doPickEditor(editor, true);\n\t\t\t}\n\n\t\t\t// Figure out options\n\t\t\tconst targetOptions: IEditorOptions = {\n\t\t\t\t...editor.options,\n\t\t\t\toverride: picked.item.id,\n\t\t\t\tpreserveFocus: picked.openInBackground || editor.options?.preserveFocus,\n\t\t\t};\n\n\t\t\treturn targetOptions;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate sendEditorResolutionTelemetry(chosenInput: EditorInput): void {\n\t\ttype editorResolutionClassification = {\n\t\t\tviewType: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'The id of the editor opened. Used to gain an understanding of what editors are most popular' };\n\t\t\towner: 'lramos15';\n\t\t\tcomment: 'An event that fires when an editor type is picked';\n\t\t};\n\t\ttype editorResolutionEvent = {\n\t\t\tviewType: string;\n\t\t};\n\t\tif (chosenInput.editorId) {\n\t\t\tthis.telemetryService.publicLog2<editorResolutionEvent, editorResolutionClassification>('override.viewType', { viewType: chosenInput.editorId });\n\t\t}\n\t}\n\n\tprivate cacheEditors() {\n\t\t// Create a set to store glob patterns\n\t\tconst cacheStorage: Set<string> = new Set<string>();\n\n\t\t// Store just the relative pattern pieces without any path info\n\t\tfor (const [globPattern, contribPoint] of this._flattenedEditors) {\n\t\t\tconst nonOptional = !!contribPoint.find(c => c.editorInfo.priority !== RegisteredEditorPriority.option && c.editorInfo.id !== DEFAULT_EDITOR_ASSOCIATION.id);\n\t\t\t// Don't keep a cache of the optional ones as those wouldn't be opened on start anyways\n\t\t\tif (!nonOptional) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (glob.isRelativePattern(globPattern)) {\n\t\t\t\tcacheStorage.add(`${globPattern.pattern}`);\n\t\t\t} else {\n\t\t\t\tcacheStorage.add(globPattern);\n\t\t\t}\n\t\t}\n\n\t\t// Also store the users settings as those would have to activate on startup as well\n\t\tconst userAssociations = this.getAllUserAssociations();\n\t\tfor (const association of userAssociations) {\n\t\t\tif (association.filenamePattern) {\n\t\t\t\tcacheStorage.add(association.filenamePattern);\n\t\t\t}\n\t\t}\n\t\tthis.storageService.store(EditorResolverService.cacheStorageID, JSON.stringify(Array.from(cacheStorage)), StorageScope.PROFILE, StorageTarget.MACHINE);\n\t}\n\n\tprivate resourceMatchesCache(resource: URI): boolean {\n\t\tif (!this.cache) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (const cacheEntry of this.cache) {\n\t\t\tif (globMatchesResource(cacheEntry, resource)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n\nregisterSingleton(IEditorResolverService, EditorResolverService, InstantiationType.Eager);\n"]}