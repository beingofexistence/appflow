{"version":3,"sources":["vs/workbench/services/editor/common/editorResolverService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAoBnF,QAAA,IAAI,GAAqB,IAAA,mBAAG,EAAqC,uBAAuB,CAAC,CAAC;IAa1F,QAAA,IAAI,GAA2B,8BAA8B,CAAC;IAE3E,MAAM,qBAAqB,GAAG,cAAG,CAAM,EAAE,CAAyB,2BAAuB,CAAC,aAAa,CAAC,CAAC;IAEzG,MAAM,mCAAmC,GAAuB;QAC/D,GAAG,mBAAG;QACN,UAAU,EAAE;YACX,8BAA8B,EAAE;gBAC/B,IAAI,EAAE,QAAQ;gBACd,mBAAmB,EAAE,IAAA,cAAQ,EAAC,CAA2B,EAAE,IAA8K,CAAC;gBAC1O,oBAAoB,EAAE;oBACrB,IAAI,EAAE,QAAQ;iBACd;aACD;SACD;KACD,CAAC;IAQF,qBAAqB,CAAC,qBAAqB,CAAC,mCAAmC,CAAC,CAAC;IACjF,YAAY;IAEZ,qCAAqC;IACrC,IAAY,wBAKX;IALD,WAAY,wBAAwB;QACnC,+CAAmB,CAAA;QACnB,6CAAiB,CAAA;QACjB,mDAAuB,CAAA;QACvB,+CAAmB,CAAA;IACpB,CAAC,EALW,wBAAwB,wCAAxB,wBAAwB,QAKnC;IAED;;;;OAIG;IACH,IAAkB,cAGjB;IAHD,WAAkB,cAAc;QAC/B,qDAAS,CAAA;QACT,mDAAQ,CAAA;IACT,CAAC,EAHiB,cAAc,8BAAd,cAAc,QAG/B;IAyGD,YAAY;IAEZ,wBAAwB;IACxB,SAAgB,IAAI,CAAW,QAAkC;QAChE,QAAQ,QAAQ,EAAE;YACjB,KAAK,wBAAwB,CAAC,SAAS;gBACtC,OAAO,CAAC,CAAC;YACV,KAAK,wBAAwB,CAAC,OAAO;gBACpC,OAAO,CAAC,CAAC;YACV,KAAK,wBAAwB,CAAC,OAAO;gBACpC,OAAO,CAAC,CAAC;YACV,4BAA4B;YAC5B,KAAK,wBAAwB,CAAC,MAAM,CAAC;YACrC;gBACC,OAAO,CAAC,CAAC;SACV;IACF,CAAC;IAbD,oBAaC;IAED,SAAgB,IAAI,CAAgB,WAA2C,EAAE,QAAa;QAC7F,MAAM,eAAe,GAAG,IAAI,GAAG,CAAC;YAC/B,iBAAO,CAAC,SAAS;YACjB,iBAAO,CAAC,YAAY;YACpB,iBAAO,CAAC,oBAAoB;YAC5B,iBAAO,CAAC,cAAc;SACtB,CAAC,CAAC;QACH,+DAA+D;QAC/D,IAAI,eAAe,CAAC,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;YACzC,OAAO,KAAK,CAAC;SACb;QACD,MAAM,WAAW,GAAG,OAAO,WAAW,KAAK,QAAQ,IAAI,WAAW,CAAC,OAAO,CAAC,UAAG,CAAG,GAAG,CAAC,IAAI,CAAC,CAAC;QAC3F,MAAM,MAAM,GAAG,WAAW,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,MAAM,IAAI,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,IAAA,eAAG,EAAM,QAAQ,CAAC,CAAC;QACxF,OAAO,IAAI,CAAC,GAAG,CAAG,OAAO,WAAW,KAAK,QAAQ,CAAC,CAAC,CAAC,WAAW,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,WAAW,EAAE,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC;IACpH,CAAC;IAdD,oBAcC;;AACD,YAAY","file":"editorResolverService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as glob from 'vs/base/common/glob';\nimport { Event } from 'vs/base/common/event';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport { posix } from 'vs/base/common/path';\nimport { basename } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { workbenchConfigurationNodeBase } from 'vs/workbench/common/configuration';\nimport { Extensions as ConfigurationExtensions, IConfigurationNode, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IResourceEditorInput, ITextResourceEditorInput } from 'vs/platform/editor/common/editor';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { EditorInputWithOptions, EditorInputWithOptionsAndGroup, IResourceDiffEditorInput, IResourceMergeEditorInput, IUntitledTextResourceEditorInput, IUntypedEditorInput } from 'vs/workbench/common/editor';\nimport { IEditorGroup } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { PreferredGroup } from 'vs/workbench/services/editor/common/editorService';\nimport { AtLeastOne } from 'vs/base/common/types';\n\nexport const IEditorResolverService = createDecorator<IEditorResolverService>('editorResolverService');\n\n//#region Editor Associations\n\n// Static values for registered editors\n\nexport type EditorAssociation = {\n\treadonly viewType: string;\n\treadonly filenamePattern?: string;\n};\n\nexport type EditorAssociations = readonly EditorAssociation[];\n\nexport const editorsAssociationsSettingId = 'workbench.editorAssociations';\n\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\nconst editorAssociationsConfigurationNode: IConfigurationNode = {\n\t...workbenchConfigurationNodeBase,\n\tproperties: {\n\t\t'workbench.editorAssociations': {\n\t\t\ttype: 'object',\n\t\t\tmarkdownDescription: localize('editor.editorAssociations', \"Configure [glob patterns](https://aka.ms/vscode-glob-patterns) to editors (for example `\\\"*.hex\\\": \\\"hexEditor.hexedit\\\"`). These have precedence over the default behavior.\"),\n\t\t\tadditionalProperties: {\n\t\t\t\ttype: 'string'\n\t\t\t}\n\t\t}\n\t}\n};\n\nexport interface IEditorType {\n\treadonly id: string;\n\treadonly displayName: string;\n\treadonly providerDisplayName: string;\n}\n\nconfigurationRegistry.registerConfiguration(editorAssociationsConfigurationNode);\n//#endregion\n\n//#region EditorResolverService types\nexport enum RegisteredEditorPriority {\n\tbuiltin = 'builtin',\n\toption = 'option',\n\texclusive = 'exclusive',\n\tdefault = 'default'\n}\n\n/**\n * If we didn't resolve an editor dictates what to do with the opening state\n * ABORT = Do not continue with opening the editor\n * NONE = Continue as if the resolution has been disabled as the service could not resolve one\n */\nexport const enum ResolvedStatus {\n\tABORT = 1,\n\tNONE = 2,\n}\n\nexport type ResolvedEditor = EditorInputWithOptionsAndGroup | ResolvedStatus;\n\nexport type RegisteredEditorOptions = {\n\t/**\n\t * If your editor cannot be opened in multiple groups for the same resource\n\t */\n\tsinglePerResource?: boolean | (() => boolean);\n\n\t/**\n\t * Whether or not you can support opening the given resource.\n\t * If omitted we assume you can open everything\n\t */\n\tcanSupportResource?: (resource: URI) => boolean;\n};\n\nexport type RegisteredEditorInfo = {\n\tid: string;\n\tlabel: string;\n\tdetail?: string;\n\tpriority: RegisteredEditorPriority;\n};\n\ntype EditorInputFactoryResult = EditorInputWithOptions | Promise<EditorInputWithOptions>;\n\nexport type EditorInputFactoryFunction = (editorInput: IResourceEditorInput | ITextResourceEditorInput, group: IEditorGroup) => EditorInputFactoryResult;\n\nexport type UntitledEditorInputFactoryFunction = (untitledEditorInput: IUntitledTextResourceEditorInput, group: IEditorGroup) => EditorInputFactoryResult;\n\nexport type DiffEditorInputFactoryFunction = (diffEditorInput: IResourceDiffEditorInput, group: IEditorGroup) => EditorInputFactoryResult;\n\nexport type MergeEditorInputFactoryFunction = (mergeEditorInput: IResourceMergeEditorInput, group: IEditorGroup) => EditorInputFactoryResult;\n\ntype EditorInputFactories = {\n\tcreateEditorInput?: EditorInputFactoryFunction;\n\tcreateUntitledEditorInput?: UntitledEditorInputFactoryFunction;\n\tcreateDiffEditorInput?: DiffEditorInputFactoryFunction;\n\tcreateMergeEditorInput?: MergeEditorInputFactoryFunction;\n};\n\nexport type EditorInputFactoryObject = AtLeastOne<EditorInputFactories>;\n\nexport interface IEditorResolverService {\n\treadonly _serviceBrand: undefined;\n\t/**\n\t * Given a resource finds the editor associations that match it from the user's settings\n\t * @param resource The resource to match\n\t * @return The matching associations\n\t */\n\tgetAssociationsForResource(resource: URI): EditorAssociations;\n\n\t/**\n\t * Updates the user's association to include a specific editor ID as a default for the given glob pattern\n\t * @param globPattern The glob pattern (must be a string as settings don't support relative glob)\n\t * @param editorID The ID of the editor to make a user default\n\t */\n\tupdateUserAssociations(globPattern: string, editorID: string): void;\n\n\t/**\n\t * Emitted when an editor is registered or unregistered.\n\t */\n\treadonly onDidChangeEditorRegistrations: Event<void>;\n\n\t/**\n\t * Given a callback, run the callback pausing the registration emitter\n\t */\n\tbufferChangeEvents(callback: Function): void;\n\n\t/**\n\t * Registers a specific editor. Editors with the same glob pattern and ID will be grouped together by the resolver.\n\t * This allows for registration of the factories in different locations\n\t * @param globPattern The glob pattern for this registration\n\t * @param editorInfo Information about the registration\n\t * @param options Specific options which apply to this registration\n\t * @param editorFactoryObject The editor input factory functions\n\t */\n\tregisterEditor(\n\t\tglobPattern: string | glob.IRelativePattern,\n\t\teditorInfo: RegisteredEditorInfo,\n\t\toptions: RegisteredEditorOptions,\n\t\teditorFactoryObject: EditorInputFactoryObject\n\t): IDisposable;\n\n\t/**\n\t * Given an editor resolves it to the suitable ResolvedEitor based on user extensions, settings, and built-in editors\n\t * @param editor The editor to resolve\n\t * @param preferredGroup The group you want to open the editor in\n\t * @returns An EditorInputWithOptionsAndGroup if there is an available editor or a status of how to proceed\n\t */\n\tresolveEditor(editor: IUntypedEditorInput, preferredGroup: PreferredGroup | undefined): Promise<ResolvedEditor>;\n\n\t/**\n\t * Given a resource returns all the editor ids that match that resource. If there is exclusive editor we return an empty array\n\t * @param resource The resource\n\t * @returns A list of editor ids\n\t */\n\tgetEditors(resource: URI): RegisteredEditorInfo[];\n\n\t/**\n\t * A set of all the editors that are registered to the editor resolver.\n\t */\n\tgetEditors(): RegisteredEditorInfo[];\n}\n\n//#endregion\n\n//#region Util functions\nexport function priorityToRank(priority: RegisteredEditorPriority): number {\n\tswitch (priority) {\n\t\tcase RegisteredEditorPriority.exclusive:\n\t\t\treturn 5;\n\t\tcase RegisteredEditorPriority.default:\n\t\t\treturn 4;\n\t\tcase RegisteredEditorPriority.builtin:\n\t\t\treturn 3;\n\t\t// Text editor is priority 2\n\t\tcase RegisteredEditorPriority.option:\n\t\tdefault:\n\t\t\treturn 1;\n\t}\n}\n\nexport function globMatchesResource(globPattern: string | glob.IRelativePattern, resource: URI): boolean {\n\tconst excludedSchemes = new Set([\n\t\tSchemas.extension,\n\t\tSchemas.webviewPanel,\n\t\tSchemas.vscodeWorkspaceTrust,\n\t\tSchemas.vscodeSettings\n\t]);\n\t// We want to say that the above schemes match no glob patterns\n\tif (excludedSchemes.has(resource.scheme)) {\n\t\treturn false;\n\t}\n\tconst matchOnPath = typeof globPattern === 'string' && globPattern.indexOf(posix.sep) >= 0;\n\tconst target = matchOnPath ? `${resource.scheme}:${resource.path}` : basename(resource);\n\treturn glob.match(typeof globPattern === 'string' ? globPattern.toLowerCase() : globPattern, target.toLowerCase());\n}\n//#endregion\n"]}