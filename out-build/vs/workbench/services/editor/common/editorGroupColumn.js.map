{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/editor/common/editorGroupColumn.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAchG,SAAgB,GAAG,CAAiB,kBAAuB,EAAmB,oBAAyB,EAAoB,MAAM,GAAG,mBAAG;QACtI,IAAI,MAAM,KAAK,mBAAG,IAAa,MAAM,KAAK,mBAAG,EAAS;YACrD,OAAO,MAAM,CAAC,CAAC,6CAA6C;SAC5D;QAED,IAAI,aAAa,GAAG,kBAAkB,CAAC,SAAS,qCAA6B,CAAC,MAAM,CAAC,CAAC;QAEtF,wFAAwF;QACxF,wEAAwE;QAExE,IAAI,CAAC,aAAa,IAAI,MAAM,GAAG,CAAC,EAAE;YACjC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,MAAM,EAAE,CAAC,EAAE,EAAE;gBACjC,MAAM,YAAY,GAAG,kBAAkB,CAAC,SAAS,qCAA6B,CAAC;gBAC/E,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE;oBACrB,kBAAkB,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,IAAA,yBAAG,EAA+B,oBAAoB,CAAC,CAAC,CAAC;iBAC1G;aACD;YAED,aAAa,GAAG,kBAAkB,CAAC,SAAS,qCAA6B,CAAC,MAAM,CAAC,CAAC;SAClF;QAED,OAAO,aAAa,EAAE,EAAE,IAAI,mBAAG,CAAQ,CAAC,gDAAgD;IACzF,CAAC;IAtBD,kBAsBC;IAED,SAAgB,GAAG,CAAiB,kBAAuB,EAAmB,WAA2C;QACxH,MAAM,KAAK,GAAG,CAAC,OAAO,WAAW,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC;QAEzG,OAAO,kBAAkB,CAAC,SAAS,qCAA6B,CAAC,OAAO,CAAC,KAAK,IAAI,kBAAkB,CAAC,WAAW,CAAC,CAAC;IACnH,CAAC;IAJD,kBAIC","file":"editorGroupColumn.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { GroupIdentifier } from 'vs/workbench/common/editor';\nimport { IEditorGroupsService, GroupsOrder, IEditorGroup, preferredSideBySideGroupDirection } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { ACTIVE_GROUP, ACTIVE_GROUP_TYPE, SIDE_GROUP, SIDE_GROUP_TYPE } from 'vs/workbench/services/editor/common/editorService';\n\n/**\n * A way to address editor groups through a column based system\n * where `0` is the first column. Will fallback to `SIDE_GROUP`\n * in case the column is invalid.\n */\nexport type EditorGroupColumn = number;\n\nexport function columnToEditorGroup(editorGroupService: IEditorGroupsService, configurationService: IConfigurationService, column = ACTIVE_GROUP): GroupIdentifier | ACTIVE_GROUP_TYPE | SIDE_GROUP_TYPE {\n\tif (column === ACTIVE_GROUP || column === SIDE_GROUP) {\n\t\treturn column; // return early for when column is well known\n\t}\n\n\tlet groupInColumn = editorGroupService.getGroups(GroupsOrder.GRID_APPEARANCE)[column];\n\n\t// If a column is asked for that does not exist, we create up to 9 columns in accordance\n\t// to what `ViewColumn` provides and otherwise fallback to `SIDE_GROUP`.\n\n\tif (!groupInColumn && column < 9) {\n\t\tfor (let i = 0; i <= column; i++) {\n\t\t\tconst editorGroups = editorGroupService.getGroups(GroupsOrder.GRID_APPEARANCE);\n\t\t\tif (!editorGroups[i]) {\n\t\t\t\teditorGroupService.addGroup(editorGroups[i - 1], preferredSideBySideGroupDirection(configurationService));\n\t\t\t}\n\t\t}\n\n\t\tgroupInColumn = editorGroupService.getGroups(GroupsOrder.GRID_APPEARANCE)[column];\n\t}\n\n\treturn groupInColumn?.id ?? SIDE_GROUP; // finally open to the side when group not found\n}\n\nexport function editorGroupToColumn(editorGroupService: IEditorGroupsService, editorGroup: IEditorGroup | GroupIdentifier): EditorGroupColumn {\n\tconst group = (typeof editorGroup === 'number') ? editorGroupService.getGroup(editorGroup) : editorGroup;\n\n\treturn editorGroupService.getGroups(GroupsOrder.GRID_APPEARANCE).indexOf(group ?? editorGroupService.activeGroup);\n}\n"]}