{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/configuration/common/configuration.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAUnF,QAAA,GAAG,GAAyB,SAAS,CAAC;IACtC,QAAA,GAAG,GAAoB,UAAU,CAAC;IAClC,QAAA,GAAG,GAAoB,GAAG,WAAG,IAA0B,WAAG,OAAwB,CAAC;IAEnF,QAAA,GAAG,GAAuB,mCAAmC,CAAC;IAC9D,QAAA,GAAG,GAAoB,gCAAgC,CAAC;IACxD,QAAA,GAAG,GAAuB,mCAAmC,CAAC;IAC9D,QAAA,GAAG,GAAuB,mCAAmC,CAAC;IAC9D,QAAA,GAAG,GAAyB,qCAAqC,CAAC;IAClE,QAAA,GAAG,GAAsB,kCAAkC,CAAC;IAC5D,QAAA,GAAG,GAAc,yBAAyB,CAAC;IAC3C,QAAA,GAAG,GAAa,wBAAwB,CAAC;IAEzC,QAAA,GAAG,GAAkB,wCAAgC,CAAC;IACtD,QAAA,GAAG,GAAc,6MAAqK,CAAC;IACvL,QAAA,GAAG,GAA4B,yHAAiG,CAAC;IACjI,QAAA,GAAG,GAAoB,yCAAiC,GAAG,WAAG,CAA0B,CAAC;IACzF,QAAA,GAAG,GAAqB,6MAAqK,CAAC;IAC9L,QAAA,GAAG,GAAgB,yKAAyI,CAAC;IAC7J,QAAA,GAAG,GAAa,sIAA8G,CAAC;IAE/H,QAAA,GAAG,GAAuB,OAAO,CAAC;IAClC,QAAA,GAAG,GAAwB,QAAQ,CAAC;IAEpC,QAAA,GAAG,GAAmC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACvE,WAAG,CAAiC,WAAG,CAAqB,GAAG,GAAG,WAAG,IAA0B,WAAG,OAA2B,CAAC;IAC9H,WAAG,CAAiC,WAAG,CAAsB,GAAG,GAAG,WAAG,IAA0B,WAAG,OAA4B,CAAC;IACnH,QAAA,GAAG,GAA8B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IAClE,WAAG,CAA4B,WAAG,CAAqB,GAAG,GAAG,WAAG,OAA2B,CAAC;IAsB/E,QAAA,GAAG,GAA8B,IAAA,mBAAG,EAA2E,mBAAG,CAAmB,CAAC;IA+BtI,QAAA,GAAG,GAAa,kDAAkD,CAAC;IAEnE,QAAA,GAAG,GAA0B,uCAAuC,CAAC","file":"configuration.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ConfigurationScope } from 'vs/platform/configuration/common/configurationRegistry';\nimport { URI } from 'vs/base/common/uri';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { refineServiceDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Event } from 'vs/base/common/event';\nimport { ResourceMap } from 'vs/base/common/map';\nimport { IAnyWorkspaceIdentifier } from 'vs/platform/workspace/common/workspace';\n\nexport const FOLDER_CONFIG_FOLDER_NAME = '.vscode';\nexport const FOLDER_SETTINGS_NAME = 'settings';\nexport const FOLDER_SETTINGS_PATH = `${FOLDER_CONFIG_FOLDER_NAME}/${FOLDER_SETTINGS_NAME}.json`;\n\nexport const defaultSettingsSchemaId = 'vscode://schemas/settings/default';\nexport const userSettingsSchemaId = 'vscode://schemas/settings/user';\nexport const profileSettingsSchemaId = 'vscode://schemas/settings/profile';\nexport const machineSettingsSchemaId = 'vscode://schemas/settings/machine';\nexport const workspaceSettingsSchemaId = 'vscode://schemas/settings/workspace';\nexport const folderSettingsSchemaId = 'vscode://schemas/settings/folder';\nexport const launchSchemaId = 'vscode://schemas/launch';\nexport const tasksSchemaId = 'vscode://schemas/tasks';\n\nexport const APPLICATION_SCOPES = [ConfigurationScope.APPLICATION];\nexport const PROFILE_SCOPES = [ConfigurationScope.MACHINE, ConfigurationScope.WINDOW, ConfigurationScope.RESOURCE, ConfigurationScope.LANGUAGE_OVERRIDABLE, ConfigurationScope.MACHINE_OVERRIDABLE];\nexport const LOCAL_MACHINE_PROFILE_SCOPES = [ConfigurationScope.WINDOW, ConfigurationScope.RESOURCE, ConfigurationScope.LANGUAGE_OVERRIDABLE];\nexport const LOCAL_MACHINE_SCOPES = [ConfigurationScope.APPLICATION, ...LOCAL_MACHINE_PROFILE_SCOPES];\nexport const REMOTE_MACHINE_SCOPES = [ConfigurationScope.MACHINE, ConfigurationScope.WINDOW, ConfigurationScope.RESOURCE, ConfigurationScope.LANGUAGE_OVERRIDABLE, ConfigurationScope.MACHINE_OVERRIDABLE];\nexport const WORKSPACE_SCOPES = [ConfigurationScope.WINDOW, ConfigurationScope.RESOURCE, ConfigurationScope.LANGUAGE_OVERRIDABLE, ConfigurationScope.MACHINE_OVERRIDABLE];\nexport const FOLDER_SCOPES = [ConfigurationScope.RESOURCE, ConfigurationScope.LANGUAGE_OVERRIDABLE, ConfigurationScope.MACHINE_OVERRIDABLE];\n\nexport const TASKS_CONFIGURATION_KEY = 'tasks';\nexport const LAUNCH_CONFIGURATION_KEY = 'launch';\n\nexport const WORKSPACE_STANDALONE_CONFIGURATIONS = Object.create(null);\nWORKSPACE_STANDALONE_CONFIGURATIONS[TASKS_CONFIGURATION_KEY] = `${FOLDER_CONFIG_FOLDER_NAME}/${TASKS_CONFIGURATION_KEY}.json`;\nWORKSPACE_STANDALONE_CONFIGURATIONS[LAUNCH_CONFIGURATION_KEY] = `${FOLDER_CONFIG_FOLDER_NAME}/${LAUNCH_CONFIGURATION_KEY}.json`;\nexport const USER_STANDALONE_CONFIGURATIONS = Object.create(null);\nUSER_STANDALONE_CONFIGURATIONS[TASKS_CONFIGURATION_KEY] = `${TASKS_CONFIGURATION_KEY}.json`;\n\nexport type ConfigurationKey = { type: 'defaults' | 'user' | 'workspaces' | 'folder'; key: string };\n\nexport interface IConfigurationCache {\n\n\tneedsCaching(resource: URI): boolean;\n\tread(key: ConfigurationKey): Promise<string>;\n\twrite(key: ConfigurationKey, content: string): Promise<void>;\n\tremove(key: ConfigurationKey): Promise<void>;\n\n}\n\nexport type RestrictedSettings = {\n\tdefault: ReadonlyArray<string>;\n\tapplication?: ReadonlyArray<string>;\n\tuserLocal?: ReadonlyArray<string>;\n\tuserRemote?: ReadonlyArray<string>;\n\tworkspace?: ReadonlyArray<string>;\n\tworkspaceFolder?: ResourceMap<ReadonlyArray<string>>;\n};\n\nexport const IWorkbenchConfigurationService = refineServiceDecorator<IConfigurationService, IWorkbenchConfigurationService>(IConfigurationService);\nexport interface IWorkbenchConfigurationService extends IConfigurationService {\n\t/**\n\t * Restricted settings defined in each configuration target\n\t */\n\treadonly restrictedSettings: RestrictedSettings;\n\n\t/**\n\t * Event that triggers when the restricted settings changes\n\t */\n\treadonly onDidChangeRestrictedSettings: Event<RestrictedSettings>;\n\n\t/**\n\t * A promise that resolves when the remote configuration is loaded in a remote window.\n\t * The promise is resolved immediately if the window is not remote.\n\t */\n\twhenRemoteConfigurationLoaded(): Promise<void>;\n\n\t/**\n\t * Initialize configuration service for the given workspace\n\t * @param arg workspace Identifier\n\t */\n\tinitialize(arg: IAnyWorkspaceIdentifier): Promise<void>;\n\n\t/**\n\t * Returns true if the setting can be applied for all profiles otherwise false.\n\t * @param setting\n\t */\n\tisSettingAppliedForAllProfiles(setting: string): boolean;\n}\n\nexport const TASKS_DEFAULT = '{\\n\\t\\\"version\\\": \\\"2.0.0\\\",\\n\\t\\\"tasks\\\": []\\n}';\n\nexport const APPLY_ALL_PROFILES_SETTING = 'workbench.settings.applyToAllProfiles';\n"]}