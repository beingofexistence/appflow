{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/configuration/common/configurationModels.ts"],"names":[],"mappings":"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","file":"configurationModels.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { equals } from 'vs/base/common/objects';\nimport { toValuesTree, IConfigurationModel, IConfigurationOverrides, IConfigurationValue, IConfigurationChange } from 'vs/platform/configuration/common/configuration';\nimport { Configuration as BaseConfiguration, ConfigurationModelParser, ConfigurationModel, ConfigurationParseOptions } from 'vs/platform/configuration/common/configurationModels';\nimport { IStoredWorkspaceFolder } from 'vs/platform/workspaces/common/workspaces';\nimport { Workspace } from 'vs/platform/workspace/common/workspace';\nimport { ResourceMap } from 'vs/base/common/map';\nimport { URI } from 'vs/base/common/uri';\nimport { isBoolean } from 'vs/base/common/types';\nimport { distinct } from 'vs/base/common/arrays';\n\nexport class WorkspaceConfigurationModelParser extends ConfigurationModelParser {\n\n\tprivate _folders: IStoredWorkspaceFolder[] = [];\n\tprivate _transient: boolean = false;\n\tprivate _settingsModelParser: ConfigurationModelParser;\n\tprivate _launchModel: ConfigurationModel;\n\tprivate _tasksModel: ConfigurationModel;\n\n\tconstructor(name: string) {\n\t\tsuper(name);\n\t\tthis._settingsModelParser = new ConfigurationModelParser(name);\n\t\tthis._launchModel = new ConfigurationModel();\n\t\tthis._tasksModel = new ConfigurationModel();\n\t}\n\n\tget folders(): IStoredWorkspaceFolder[] {\n\t\treturn this._folders;\n\t}\n\n\tget transient(): boolean {\n\t\treturn this._transient;\n\t}\n\n\tget settingsModel(): ConfigurationModel {\n\t\treturn this._settingsModelParser.configurationModel;\n\t}\n\n\tget launchModel(): ConfigurationModel {\n\t\treturn this._launchModel;\n\t}\n\n\tget tasksModel(): ConfigurationModel {\n\t\treturn this._tasksModel;\n\t}\n\n\treparseWorkspaceSettings(configurationParseOptions: ConfigurationParseOptions): void {\n\t\tthis._settingsModelParser.reparse(configurationParseOptions);\n\t}\n\n\tgetRestrictedWorkspaceSettings(): string[] {\n\t\treturn this._settingsModelParser.restrictedConfigurations;\n\t}\n\n\tprotected override doParseRaw(raw: any, configurationParseOptions?: ConfigurationParseOptions): IConfigurationModel {\n\t\tthis._folders = (raw['folders'] || []) as IStoredWorkspaceFolder[];\n\t\tthis._transient = isBoolean(raw['transient']) && raw['transient'];\n\t\tthis._settingsModelParser.parseRaw(raw['settings'], configurationParseOptions);\n\t\tthis._launchModel = this.createConfigurationModelFrom(raw, 'launch');\n\t\tthis._tasksModel = this.createConfigurationModelFrom(raw, 'tasks');\n\t\treturn super.doParseRaw(raw, configurationParseOptions);\n\t}\n\n\tprivate createConfigurationModelFrom(raw: any, key: string): ConfigurationModel {\n\t\tconst data = raw[key];\n\t\tif (data) {\n\t\t\tconst contents = toValuesTree(data, message => console.error(`Conflict in settings file ${this._name}: ${message}`));\n\t\t\tconst scopedContents = Object.create(null);\n\t\t\tscopedContents[key] = contents;\n\t\t\tconst keys = Object.keys(data).map(k => `${key}.${k}`);\n\t\t\treturn new ConfigurationModel(scopedContents, keys, []);\n\t\t}\n\t\treturn new ConfigurationModel();\n\t}\n}\n\nexport class StandaloneConfigurationModelParser extends ConfigurationModelParser {\n\n\tconstructor(name: string, private readonly scope: string) {\n\t\tsuper(name);\n\t}\n\n\tprotected override doParseRaw(raw: any, configurationParseOptions?: ConfigurationParseOptions): IConfigurationModel {\n\t\tconst contents = toValuesTree(raw, message => console.error(`Conflict in settings file ${this._name}: ${message}`));\n\t\tconst scopedContents = Object.create(null);\n\t\tscopedContents[this.scope] = contents;\n\t\tconst keys = Object.keys(raw).map(key => `${this.scope}.${key}`);\n\t\treturn { contents: scopedContents, keys, overrides: [] };\n\t}\n\n}\n\nexport class Configuration extends BaseConfiguration {\n\n\tconstructor(\n\t\tdefaults: ConfigurationModel,\n\t\tpolicy: ConfigurationModel,\n\t\tapplication: ConfigurationModel,\n\t\tlocalUser: ConfigurationModel,\n\t\tremoteUser: ConfigurationModel,\n\t\tworkspaceConfiguration: ConfigurationModel,\n\t\tfolders: ResourceMap<ConfigurationModel>,\n\t\tmemoryConfiguration: ConfigurationModel,\n\t\tmemoryConfigurationByResource: ResourceMap<ConfigurationModel>,\n\t\tprivate readonly _workspace?: Workspace) {\n\t\tsuper(defaults, policy, application, localUser, remoteUser, workspaceConfiguration, folders, memoryConfiguration, memoryConfigurationByResource);\n\t}\n\n\toverride getValue(key: string | undefined, overrides: IConfigurationOverrides = {}): any {\n\t\treturn super.getValue(key, overrides, this._workspace);\n\t}\n\n\toverride inspect<C>(key: string, overrides: IConfigurationOverrides = {}): IConfigurationValue<C> {\n\t\treturn super.inspect(key, overrides, this._workspace);\n\t}\n\n\toverride keys(): {\n\t\tdefault: string[];\n\t\tuser: string[];\n\t\tworkspace: string[];\n\t\tworkspaceFolder: string[];\n\t} {\n\t\treturn super.keys(this._workspace);\n\t}\n\n\toverride compareAndDeleteFolderConfiguration(folder: URI): IConfigurationChange {\n\t\tif (this._workspace && this._workspace.folders.length > 0 && this._workspace.folders[0].uri.toString() === folder.toString()) {\n\t\t\t// Do not remove workspace configuration\n\t\t\treturn { keys: [], overrides: [] };\n\t\t}\n\t\treturn super.compareAndDeleteFolderConfiguration(folder);\n\t}\n\n\tcompare(other: Configuration): IConfigurationChange {\n\t\tconst compare = (fromKeys: string[], toKeys: string[], overrideIdentifier?: string): string[] => {\n\t\t\tconst keys: string[] = [];\n\t\t\tkeys.push(...toKeys.filter(key => fromKeys.indexOf(key) === -1));\n\t\t\tkeys.push(...fromKeys.filter(key => toKeys.indexOf(key) === -1));\n\t\t\tkeys.push(...fromKeys.filter(key => {\n\t\t\t\t// Ignore if the key does not exist in both models\n\t\t\t\tif (toKeys.indexOf(key) === -1) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\t// Compare workspace value\n\t\t\t\tif (!equals(this.getValue(key, { overrideIdentifier }), other.getValue(key, { overrideIdentifier }))) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\t// Compare workspace folder value\n\t\t\t\treturn this._workspace && this._workspace.folders.some(folder => !equals(this.getValue(key, { resource: folder.uri, overrideIdentifier }), other.getValue(key, { resource: folder.uri, overrideIdentifier })));\n\t\t\t}));\n\t\t\treturn keys;\n\t\t};\n\t\tconst keys = compare(this.allKeys(), other.allKeys());\n\t\tconst overrides: [string, string[]][] = [];\n\t\tconst allOverrideIdentifiers = distinct([...this.allOverrideIdentifiers(), ...other.allOverrideIdentifiers()]);\n\t\tfor (const overrideIdentifier of allOverrideIdentifiers) {\n\t\t\tconst keys = compare(this.getAllKeysForOverrideIdentifier(overrideIdentifier), other.getAllKeysForOverrideIdentifier(overrideIdentifier), overrideIdentifier);\n\t\t\tif (keys.length) {\n\t\t\t\toverrides.push([overrideIdentifier, keys]);\n\t\t\t}\n\t\t}\n\t\treturn { keys, overrides };\n\t}\n\n}\n"]}