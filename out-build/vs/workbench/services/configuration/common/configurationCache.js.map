{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/configuration/common/configurationCache.ts"],"names":[],"mappings":"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","file":"configurationCache.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IConfigurationCache, ConfigurationKey } from 'vs/workbench/services/configuration/common/configuration';\nimport { URI } from 'vs/base/common/uri';\nimport { FileOperationError, FileOperationResult, IFileService } from 'vs/platform/files/common/files';\nimport { joinPath } from 'vs/base/common/resources';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { Queue } from 'vs/base/common/async';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\n\nexport class ConfigurationCache implements IConfigurationCache {\n\n\tprivate readonly cacheHome: URI;\n\tprivate readonly cachedConfigurations: Map<string, CachedConfiguration> = new Map<string, CachedConfiguration>();\n\n\tconstructor(\n\t\tprivate readonly donotCacheResourcesWithSchemes: string[],\n\t\tenvironmentService: IEnvironmentService,\n\t\tprivate readonly fileService: IFileService\n\t) {\n\t\tthis.cacheHome = environmentService.cacheHome;\n\t}\n\n\tneedsCaching(resource: URI): boolean {\n\t\t// Cache all non native resources\n\t\treturn !this.donotCacheResourcesWithSchemes.includes(resource.scheme);\n\t}\n\n\tread(key: ConfigurationKey): Promise<string> {\n\t\treturn this.getCachedConfiguration(key).read();\n\t}\n\n\twrite(key: ConfigurationKey, content: string): Promise<void> {\n\t\treturn this.getCachedConfiguration(key).save(content);\n\t}\n\n\tremove(key: ConfigurationKey): Promise<void> {\n\t\treturn this.getCachedConfiguration(key).remove();\n\t}\n\n\tprivate getCachedConfiguration({ type, key }: ConfigurationKey): CachedConfiguration {\n\t\tconst k = `${type}:${key}`;\n\t\tlet cachedConfiguration = this.cachedConfigurations.get(k);\n\t\tif (!cachedConfiguration) {\n\t\t\tcachedConfiguration = new CachedConfiguration({ type, key }, this.cacheHome, this.fileService);\n\t\t\tthis.cachedConfigurations.set(k, cachedConfiguration);\n\t\t}\n\t\treturn cachedConfiguration;\n\t}\n}\n\nclass CachedConfiguration {\n\n\tprivate queue: Queue<void>;\n\tprivate cachedConfigurationFolderResource: URI;\n\tprivate cachedConfigurationFileResource: URI;\n\n\tconstructor(\n\t\t{ type, key }: ConfigurationKey,\n\t\tcacheHome: URI,\n\t\tprivate readonly fileService: IFileService\n\t) {\n\t\tthis.cachedConfigurationFolderResource = joinPath(cacheHome, 'CachedConfigurations', type, key);\n\t\tthis.cachedConfigurationFileResource = joinPath(this.cachedConfigurationFolderResource, type === 'workspaces' ? 'workspace.json' : 'configuration.json');\n\t\tthis.queue = new Queue<void>();\n\t}\n\n\tasync read(): Promise<string> {\n\t\ttry {\n\t\t\tconst content = await this.fileService.readFile(this.cachedConfigurationFileResource);\n\t\t\treturn content.value.toString();\n\t\t} catch (e) {\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tasync save(content: string): Promise<void> {\n\t\tconst created = await this.createCachedFolder();\n\t\tif (created) {\n\t\t\tawait this.queue.queue(async () => {\n\t\t\t\tawait this.fileService.writeFile(this.cachedConfigurationFileResource, VSBuffer.fromString(content));\n\t\t\t});\n\t\t}\n\t}\n\n\tasync remove(): Promise<void> {\n\t\ttry {\n\t\t\tawait this.queue.queue(() => this.fileService.del(this.cachedConfigurationFolderResource, { recursive: true, useTrash: false }));\n\t\t} catch (error) {\n\t\t\tif ((<FileOperationError>error).fileOperationResult !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async createCachedFolder(): Promise<boolean> {\n\t\tif (await this.fileService.exists(this.cachedConfigurationFolderResource)) {\n\t\t\treturn true;\n\t\t}\n\t\ttry {\n\t\t\tawait this.fileService.createFolder(this.cachedConfigurationFolderResource);\n\t\t\treturn true;\n\t\t} catch (error) {\n\t\t\treturn false;\n\t\t}\n\t}\n}\n\n"]}