{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/configuration/test/browser/configuration.test.ts"],"names":[],"mappings":"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","file":"configuration.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Event } from 'vs/base/common/event';\nimport { joinPath } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { Extensions, IConfigurationRegistry } from 'vs/platform/configuration/common/configurationRegistry';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { DefaultConfiguration } from 'vs/workbench/services/configuration/browser/configuration';\nimport { ConfigurationKey, IConfigurationCache } from 'vs/workbench/services/configuration/common/configuration';\nimport { BrowserWorkbenchEnvironmentService } from 'vs/workbench/services/environment/browser/environmentService';\nimport { TestEnvironmentService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { TestProductService } from 'vs/workbench/test/common/workbenchTestServices';\n\nclass ConfigurationCache implements IConfigurationCache {\n\tprivate readonly cache = new Map<string, string>();\n\tneedsCaching(resource: URI): boolean { return false; }\n\tasync read({ type, key }: ConfigurationKey): Promise<string> { return this.cache.get(`${type}:${key}`) || ''; }\n\tasync write({ type, key }: ConfigurationKey, content: string): Promise<void> { this.cache.set(`${type}:${key}`, content); }\n\tasync remove({ type, key }: ConfigurationKey): Promise<void> { this.cache.delete(`${type}:${key}`); }\n}\n\nsuite('DefaultConfiguration', () => {\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(Extensions.Configuration);\n\tconst cacheKey: ConfigurationKey = { type: 'defaults', key: 'configurationDefaultsOverrides' };\n\tlet configurationCache: ConfigurationCache;\n\n\tsetup(() => {\n\t\tconfigurationCache = new ConfigurationCache();\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': 'test.configurationDefaultsOverride',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'test.configurationDefaultsOverride': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'defaultValue',\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\n\tteardown(() => {\n\t\tconfigurationRegistry.deregisterConfigurations(configurationRegistry.getConfigurations());\n\t\tconst configurationDefaultsOverrides = configurationRegistry.getConfigurationDefaultsOverrides();\n\t\tconfigurationRegistry.deregisterDefaultConfigurations([...configurationDefaultsOverrides.keys()].map(key => ({ extensionId: configurationDefaultsOverrides.get(key)?.source, overrides: { [key]: configurationDefaultsOverrides.get(key)?.value } })));\n\t});\n\n\ttest('configuration default overrides are read from environment', async () => {\n\t\tconst environmentService = new BrowserWorkbenchEnvironmentService('', joinPath(URI.file('tests').with({ scheme: 'vscode-tests' }), 'logs'), { configurationDefaults: { 'test.configurationDefaultsOverride': 'envOverrideValue' } }, TestProductService);\n\t\tconst testObject = disposables.add(new DefaultConfiguration(configurationCache, environmentService));\n\t\tawait testObject.initialize();\n\t\tassert.deepStrictEqual(testObject.configurationModel.getValue('test.configurationDefaultsOverride'), 'envOverrideValue');\n\t});\n\n\ttest('configuration default overrides are read from cache', async () => {\n\t\twindow.localStorage.setItem(DefaultConfiguration.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY, 'yes');\n\t\tawait configurationCache.write(cacheKey, JSON.stringify({ 'test.configurationDefaultsOverride': 'overrideValue' }));\n\t\tconst testObject = disposables.add(new DefaultConfiguration(configurationCache, TestEnvironmentService));\n\n\t\tconst actual = await testObject.initialize();\n\n\t\tassert.deepStrictEqual(actual.getValue('test.configurationDefaultsOverride'), 'overrideValue');\n\t\tassert.deepStrictEqual(testObject.configurationModel.getValue('test.configurationDefaultsOverride'), 'overrideValue');\n\t});\n\n\ttest('configuration default overrides are not read from cache when model is read before initialize', async () => {\n\t\twindow.localStorage.setItem(DefaultConfiguration.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY, 'yes');\n\t\tawait configurationCache.write(cacheKey, JSON.stringify({ 'test.configurationDefaultsOverride': 'overrideValue' }));\n\t\tconst testObject = disposables.add(new DefaultConfiguration(configurationCache, TestEnvironmentService));\n\t\tassert.deepStrictEqual(testObject.configurationModel.getValue('test.configurationDefaultsOverride'), undefined);\n\t});\n\n\ttest('configuration default overrides read from cache override environment', async () => {\n\t\tconst environmentService = new BrowserWorkbenchEnvironmentService('', joinPath(URI.file('tests').with({ scheme: 'vscode-tests' }), 'logs'), { configurationDefaults: { 'test.configurationDefaultsOverride': 'envOverrideValue' } }, TestProductService);\n\t\twindow.localStorage.setItem(DefaultConfiguration.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY, 'yes');\n\t\tawait configurationCache.write(cacheKey, JSON.stringify({ 'test.configurationDefaultsOverride': 'overrideValue' }));\n\t\tconst testObject = disposables.add(new DefaultConfiguration(configurationCache, environmentService));\n\n\t\tconst actual = await testObject.initialize();\n\n\t\tassert.deepStrictEqual(actual.getValue('test.configurationDefaultsOverride'), 'overrideValue');\n\t});\n\n\ttest('configuration default overrides are read from cache when default configuration changed', async () => {\n\t\twindow.localStorage.setItem(DefaultConfiguration.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY, 'yes');\n\t\tawait configurationCache.write(cacheKey, JSON.stringify({ 'test.configurationDefaultsOverride': 'overrideValue' }));\n\t\tconst testObject = disposables.add(new DefaultConfiguration(configurationCache, TestEnvironmentService));\n\t\tawait testObject.initialize();\n\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': 'test.configurationDefaultsOverride',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'test.configurationDefaultsOverride1': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'defaultValue',\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst { defaults: actual } = await promise;\n\t\tassert.deepStrictEqual(actual.getValue('test.configurationDefaultsOverride'), 'overrideValue');\n\t});\n\n\ttest('configuration default overrides are not read from cache after reload', async () => {\n\t\twindow.localStorage.setItem(DefaultConfiguration.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY, 'yes');\n\t\tawait configurationCache.write(cacheKey, JSON.stringify({ 'test.configurationDefaultsOverride': 'overrideValue' }));\n\t\tconst testObject = disposables.add(new DefaultConfiguration(configurationCache, TestEnvironmentService));\n\n\t\tawait testObject.initialize();\n\t\tconst actual = testObject.reload();\n\n\t\tassert.deepStrictEqual(actual.getValue('test.configurationDefaultsOverride'), 'defaultValue');\n\t});\n\n\ttest('cache is reset after reload', async () => {\n\t\twindow.localStorage.setItem(DefaultConfiguration.DEFAULT_OVERRIDES_CACHE_EXISTS_KEY, 'yes');\n\t\tawait configurationCache.write(cacheKey, JSON.stringify({ 'test.configurationDefaultsOverride': 'overrideValue' }));\n\t\tconst testObject = disposables.add(new DefaultConfiguration(configurationCache, TestEnvironmentService));\n\n\t\tawait testObject.initialize();\n\t\ttestObject.reload();\n\n\t\tassert.deepStrictEqual(await configurationCache.read(cacheKey), '');\n\t});\n\n\ttest('configuration default overrides are written in cache', async () => {\n\t\tconst testObject = disposables.add(new DefaultConfiguration(configurationCache, TestEnvironmentService));\n\t\tawait testObject.initialize();\n\t\ttestObject.reload();\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\tconfigurationRegistry.registerDefaultConfigurations([{ overrides: { 'test.configurationDefaultsOverride': 'newoverrideValue' } }]);\n\t\tawait promise;\n\n\t\tconst actual = JSON.parse(await configurationCache.read(cacheKey));\n\t\tassert.deepStrictEqual(actual, { 'test.configurationDefaultsOverride': 'newoverrideValue' });\n\t});\n\n\ttest('configuration default overrides are removed from cache if there are no overrides', async () => {\n\t\tconst testObject = disposables.add(new DefaultConfiguration(configurationCache, TestEnvironmentService));\n\t\tawait testObject.initialize();\n\t\tconst promise = Event.toPromise(testObject.onDidChangeConfiguration);\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': 'test.configurationDefaultsOverride',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'test.configurationDefaultsOverride1': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'defaultValue',\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tawait promise;\n\n\t\tassert.deepStrictEqual(await configurationCache.read(cacheKey), '');\n\t});\n\n});\n"]}