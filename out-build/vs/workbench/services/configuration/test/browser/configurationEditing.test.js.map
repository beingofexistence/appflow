{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/configuration/test/browser/configurationEditing.test.ts"],"names":[],"mappings":"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","file":"configurationEditing.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as sinon from 'sinon';\nimport * as assert from 'assert';\nimport * as json from 'vs/base/common/json';\nimport { Event } from 'vs/base/common/event';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { TestEnvironmentService, TestTextFileService, workbenchInstantiationService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport * as uuid from 'vs/base/common/uuid';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions } from 'vs/platform/configuration/common/configurationRegistry';\nimport { WorkspaceService } from 'vs/workbench/services/configuration/browser/configurationService';\nimport { ConfigurationEditing, ConfigurationEditingErrorCode, EditableConfigurationTarget } from 'vs/workbench/services/configuration/common/configurationEditing';\nimport { WORKSPACE_STANDALONE_CONFIGURATIONS, FOLDER_SETTINGS_PATH, USER_STANDALONE_CONFIGURATIONS, IConfigurationCache } from 'vs/workbench/services/configuration/common/configuration';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport { TextModelResolverService } from 'vs/workbench/services/textmodelResolver/common/textModelResolverService';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { CommandService } from 'vs/workbench/services/commands/common/commandService';\nimport { URI } from 'vs/base/common/uri';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { Schemas } from 'vs/base/common/network';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { KeybindingsEditingService, IKeybindingEditingService } from 'vs/workbench/services/keybinding/common/keybindingEditing';\nimport { FileUserDataProvider } from 'vs/platform/userData/common/fileUserDataProvider';\nimport { UriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentityService';\nimport { DisposableStore, toDisposable } from 'vs/base/common/lifecycle';\nimport { InMemoryFileSystemProvider } from 'vs/platform/files/common/inMemoryFilesystemProvider';\nimport { joinPath } from 'vs/base/common/resources';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { RemoteAgentService } from 'vs/workbench/services/remote/browser/remoteAgentService';\nimport { getSingleFolderWorkspaceIdentifier } from 'vs/workbench/services/workspaces/browser/workspaces';\nimport { IUserDataProfilesService, UserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { hash } from 'vs/base/common/hash';\nimport { FilePolicyService } from 'vs/platform/policy/common/filePolicyService';\nimport { runWithFakedTimers } from 'vs/base/test/common/timeTravelScheduler';\nimport { UserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfileService';\nimport { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\nimport { IBrowserWorkbenchEnvironmentService } from 'vs/workbench/services/environment/browser/environmentService';\n\nconst ROOT = URI.file('tests').with({ scheme: 'vscode-tests' });\n\nclass ConfigurationCache implements IConfigurationCache {\n\tneedsCaching(resource: URI): boolean { return false; }\n\tasync read(): Promise<string> { return ''; }\n\tasync write(): Promise<void> { }\n\tasync remove(): Promise<void> { }\n}\n\nsuite('ConfigurationEditing', () => {\n\n\tlet instantiationService: TestInstantiationService;\n\tlet userDataProfileService: IUserDataProfileService;\n\tlet environmentService: IBrowserWorkbenchEnvironmentService;\n\tlet fileService: IFileService;\n\tlet workspaceService: WorkspaceService;\n\tlet testObject: ConfigurationEditing;\n\n\tconst disposables = new DisposableStore();\n\n\tsuiteSetup(() => {\n\t\tconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\n\t\tconfigurationRegistry.registerConfiguration({\n\t\t\t'id': '_test',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'configurationEditing.service.testSetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet'\n\t\t\t\t},\n\t\t\t\t'configurationEditing.service.testSettingTwo': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet'\n\t\t\t\t},\n\t\t\t\t'configurationEditing.service.testSettingThree': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet'\n\t\t\t\t},\n\t\t\t\t'configurationEditing.service.policySetting': {\n\t\t\t\t\t'type': 'string',\n\t\t\t\t\t'default': 'isSet',\n\t\t\t\t\tpolicy: {\n\t\t\t\t\t\tname: 'configurationEditing.service.policySetting',\n\t\t\t\t\t\tminimumVersion: '1.0.0',\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\n\tsetup(async () => {\n\t\tdisposables.add(toDisposable(() => sinon.restore()));\n\t\tconst logService = new NullLogService();\n\t\tfileService = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(fileService.registerProvider(ROOT.scheme, fileSystemProvider));\n\n\t\tconst workspaceFolder = joinPath(ROOT, uuid.generateUuid());\n\t\tawait fileService.createFolder(workspaceFolder);\n\n\t\tinstantiationService = <TestInstantiationService>workbenchInstantiationService(undefined, disposables);\n\t\tenvironmentService = TestEnvironmentService;\n\t\tenvironmentService.policyFile = joinPath(workspaceFolder, 'policies.json');\n\t\tinstantiationService.stub(IEnvironmentService, environmentService);\n\t\tconst uriIdentityService = new UriIdentityService(fileService);\n\t\tconst userDataProfilesService = instantiationService.stub(IUserDataProfilesService, new UserDataProfilesService(environmentService, fileService, uriIdentityService, logService));\n\t\tuserDataProfileService = new UserDataProfileService(userDataProfilesService.defaultProfile);\n\t\tconst remoteAgentService = disposables.add(instantiationService.createInstance(RemoteAgentService));\n\t\tdisposables.add(fileService.registerProvider(Schemas.vscodeUserData, disposables.add(new FileUserDataProvider(ROOT.scheme, fileSystemProvider, Schemas.vscodeUserData, userDataProfilesService, uriIdentityService, logService))));\n\t\tinstantiationService.stub(IFileService, fileService);\n\t\tinstantiationService.stub(IRemoteAgentService, remoteAgentService);\n\t\tworkspaceService = disposables.add(new WorkspaceService({ configurationCache: new ConfigurationCache() }, environmentService, userDataProfileService, userDataProfilesService, fileService, remoteAgentService, uriIdentityService, new NullLogService(), new FilePolicyService(environmentService.policyFile, fileService, logService)));\n\t\tawait workspaceService.initialize({\n\t\t\tid: hash(workspaceFolder.toString()).toString(16),\n\t\t\turi: workspaceFolder\n\t\t});\n\t\tinstantiationService.stub(IWorkspaceContextService, workspaceService);\n\n\t\tawait workspaceService.initialize(getSingleFolderWorkspaceIdentifier(workspaceFolder));\n\t\tinstantiationService.stub(IConfigurationService, workspaceService);\n\t\tinstantiationService.stub(IKeybindingEditingService, disposables.add(instantiationService.createInstance(KeybindingsEditingService)));\n\t\tinstantiationService.stub(ITextFileService, disposables.add(instantiationService.createInstance(TestTextFileService)));\n\t\tinstantiationService.stub(ITextModelService, <ITextModelService>disposables.add(instantiationService.createInstance(TextModelResolverService)));\n\t\tinstantiationService.stub(ICommandService, CommandService);\n\t\ttestObject = instantiationService.createInstance(ConfigurationEditing, null);\n\t});\n\n\tteardown(() => disposables.clear());\n\n\ttest('errors cases - invalid key', async () => {\n\t\ttry {\n\t\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.WORKSPACE, { key: 'unknown.key', value: 'value' }, { donotNotifyError: true });\n\t\t} catch (error) {\n\t\t\tassert.strictEqual(error.code, ConfigurationEditingErrorCode.ERROR_UNKNOWN_KEY);\n\t\t\treturn;\n\t\t}\n\t\tassert.fail('Should fail with ERROR_UNKNOWN_KEY');\n\t});\n\n\ttest('errors cases - no workspace', async () => {\n\t\tawait workspaceService.initialize({ id: uuid.generateUuid() });\n\t\ttry {\n\t\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.WORKSPACE, { key: 'configurationEditing.service.testSetting', value: 'value' }, { donotNotifyError: true });\n\t\t} catch (error) {\n\t\t\tassert.strictEqual(error.code, ConfigurationEditingErrorCode.ERROR_NO_WORKSPACE_OPENED);\n\t\t\treturn;\n\t\t}\n\t\tassert.fail('Should fail with ERROR_NO_WORKSPACE_OPENED');\n\t});\n\n\ttest('errors cases - invalid configuration', async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString(',,,,,,,,,,,,,,'));\n\t\ttry {\n\t\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'configurationEditing.service.testSetting', value: 'value' }, { donotNotifyError: true });\n\t\t} catch (error) {\n\t\t\tassert.strictEqual(error.code, ConfigurationEditingErrorCode.ERROR_INVALID_CONFIGURATION);\n\t\t\treturn;\n\t\t}\n\t\tassert.fail('Should fail with ERROR_INVALID_CONFIGURATION');\n\t});\n\n\ttest('errors cases - invalid global tasks configuration', async () => {\n\t\tconst resource = joinPath(environmentService.userRoamingDataHome, USER_STANDALONE_CONFIGURATIONS['tasks']);\n\t\tawait fileService.writeFile(resource, VSBuffer.fromString(',,,,,,,,,,,,,,'));\n\t\ttry {\n\t\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'tasks.configurationEditing.service.testSetting', value: 'value' }, { donotNotifyError: true });\n\t\t} catch (error) {\n\t\t\tassert.strictEqual(error.code, ConfigurationEditingErrorCode.ERROR_INVALID_CONFIGURATION);\n\t\t\treturn;\n\t\t}\n\t\tassert.fail('Should fail with ERROR_INVALID_CONFIGURATION');\n\t});\n\n\ttest('errors cases - dirty', async () => {\n\t\tinstantiationService.stub(ITextFileService, 'isDirty', true);\n\t\ttry {\n\t\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'configurationEditing.service.testSetting', value: 'value' }, { donotNotifyError: true });\n\t\t} catch (error) {\n\t\t\tassert.strictEqual(error.code, ConfigurationEditingErrorCode.ERROR_CONFIGURATION_FILE_DIRTY);\n\t\t\treturn;\n\t\t}\n\t\tassert.fail('Should fail with ERROR_CONFIGURATION_FILE_DIRTY error.');\n\t});\n\n\ttest('do not notify error', async () => {\n\t\tinstantiationService.stub(ITextFileService, 'isDirty', true);\n\t\tconst target = sinon.stub();\n\t\tinstantiationService.stub(INotificationService, <INotificationService>{ prompt: target, _serviceBrand: undefined, doNotDisturbMode: false, onDidAddNotification: undefined!, onDidRemoveNotification: undefined!, onDidChangeDoNotDisturbMode: undefined!, notify: null!, error: null!, info: null!, warn: null!, status: null! });\n\t\ttry {\n\t\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'configurationEditing.service.testSetting', value: 'value' }, { donotNotifyError: true });\n\t\t} catch (error) {\n\t\t\tassert.strictEqual(false, target.calledOnce);\n\t\t\tassert.strictEqual(error.code, ConfigurationEditingErrorCode.ERROR_CONFIGURATION_FILE_DIRTY);\n\t\t\treturn;\n\t\t}\n\t\tassert.fail('Should fail with ERROR_CONFIGURATION_FILE_DIRTY error.');\n\t});\n\n\ttest('errors cases - ERROR_POLICY_CONFIGURATION', async () => {\n\t\tawait runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\t\tconst promise = Event.toPromise(instantiationService.get(IConfigurationService).onDidChangeConfiguration);\n\t\t\tawait fileService.writeFile(environmentService.policyFile!, VSBuffer.fromString('{ \"configurationEditing.service.policySetting\": \"policyValue\" }'));\n\t\t\tawait promise;\n\t\t});\n\t\ttry {\n\t\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'configurationEditing.service.policySetting', value: 'value' }, { donotNotifyError: true });\n\t\t} catch (error) {\n\t\t\tassert.strictEqual(error.code, ConfigurationEditingErrorCode.ERROR_POLICY_CONFIGURATION);\n\t\t\treturn;\n\t\t}\n\t\tassert.fail('Should fail with ERROR_POLICY_CONFIGURATION');\n\t});\n\n\ttest('write policy setting - when not set', async () => {\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'configurationEditing.service.policySetting', value: 'value' }, { donotNotifyError: true });\n\t\tconst contents = await fileService.readFile(userDataProfileService.currentProfile.settingsResource);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.strictEqual(parsed['configurationEditing.service.policySetting'], 'value');\n\t});\n\n\ttest('write one setting - empty file', async () => {\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'configurationEditing.service.testSetting', value: 'value' });\n\t\tconst contents = await fileService.readFile(userDataProfileService.currentProfile.settingsResource);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.strictEqual(parsed['configurationEditing.service.testSetting'], 'value');\n\t});\n\n\ttest('write one setting - existing file', async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"my.super.setting\": \"my.super.value\" }'));\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'configurationEditing.service.testSetting', value: 'value' });\n\n\t\tconst contents = await fileService.readFile(userDataProfileService.currentProfile.settingsResource);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.strictEqual(parsed['configurationEditing.service.testSetting'], 'value');\n\t\tassert.strictEqual(parsed['my.super.setting'], 'my.super.value');\n\t});\n\n\ttest('remove an existing setting - existing file', async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"my.super.setting\": \"my.super.value\", \"configurationEditing.service.testSetting\": \"value\" }'));\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'configurationEditing.service.testSetting', value: undefined });\n\n\t\tconst contents = await fileService.readFile(userDataProfileService.currentProfile.settingsResource);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.deepStrictEqual(Object.keys(parsed), ['my.super.setting']);\n\t\tassert.strictEqual(parsed['my.super.setting'], 'my.super.value');\n\t});\n\n\ttest('remove non existing setting - existing file', async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.settingsResource, VSBuffer.fromString('{ \"my.super.setting\": \"my.super.value\" }'));\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'configurationEditing.service.testSetting', value: undefined });\n\n\t\tconst contents = await fileService.readFile(userDataProfileService.currentProfile.settingsResource);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.deepStrictEqual(Object.keys(parsed), ['my.super.setting']);\n\t\tassert.strictEqual(parsed['my.super.setting'], 'my.super.value');\n\t});\n\n\ttest('write overridable settings to user settings', async () => {\n\t\tconst key = '[language]';\n\t\tconst value = { 'configurationEditing.service.testSetting': 'overridden value' };\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key, value });\n\n\t\tconst contents = await fileService.readFile(userDataProfileService.currentProfile.settingsResource);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.deepStrictEqual(parsed[key], value);\n\t});\n\n\ttest('write overridable settings to workspace settings', async () => {\n\t\tconst key = '[language]';\n\t\tconst value = { 'configurationEditing.service.testSetting': 'overridden value' };\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.WORKSPACE, { key, value });\n\n\t\tconst contents = await fileService.readFile(joinPath(workspaceService.getWorkspace().folders[0].uri, FOLDER_SETTINGS_PATH));\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.deepStrictEqual(parsed[key], value);\n\t});\n\n\ttest('write overridable settings to workspace folder settings', async () => {\n\t\tconst key = '[language]';\n\t\tconst value = { 'configurationEditing.service.testSetting': 'overridden value' };\n\t\tconst folderSettingsFile = joinPath(workspaceService.getWorkspace().folders[0].uri, FOLDER_SETTINGS_PATH);\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.WORKSPACE_FOLDER, { key, value }, { scopes: { resource: folderSettingsFile } });\n\n\t\tconst contents = await fileService.readFile(folderSettingsFile);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.deepStrictEqual(parsed[key], value);\n\t});\n\n\ttest('write workspace standalone setting - empty file', async () => {\n\t\tconst target = joinPath(workspaceService.getWorkspace().folders[0].uri, WORKSPACE_STANDALONE_CONFIGURATIONS['tasks']);\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.WORKSPACE, { key: 'tasks.service.testSetting', value: 'value' });\n\n\t\tconst contents = await fileService.readFile(target);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.strictEqual(parsed['service.testSetting'], 'value');\n\t});\n\n\ttest('write user standalone setting - empty file', async () => {\n\t\tconst target = joinPath(environmentService.userRoamingDataHome, USER_STANDALONE_CONFIGURATIONS['tasks']);\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'tasks.service.testSetting', value: 'value' });\n\n\t\tconst contents = await fileService.readFile(target);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.strictEqual(parsed['service.testSetting'], 'value');\n\t});\n\n\ttest('write workspace standalone setting - existing file', async () => {\n\t\tconst target = joinPath(workspaceService.getWorkspace().folders[0].uri, WORKSPACE_STANDALONE_CONFIGURATIONS['tasks']);\n\t\tawait fileService.writeFile(target, VSBuffer.fromString('{ \"my.super.setting\": \"my.super.value\" }'));\n\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.WORKSPACE, { key: 'tasks.service.testSetting', value: 'value' });\n\n\t\tconst contents = await fileService.readFile(target);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.strictEqual(parsed['service.testSetting'], 'value');\n\t\tassert.strictEqual(parsed['my.super.setting'], 'my.super.value');\n\t});\n\n\ttest('write user standalone setting - existing file', async () => {\n\t\tconst target = joinPath(environmentService.userRoamingDataHome, USER_STANDALONE_CONFIGURATIONS['tasks']);\n\t\tawait fileService.writeFile(target, VSBuffer.fromString('{ \"my.super.setting\": \"my.super.value\" }'));\n\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'tasks.service.testSetting', value: 'value' });\n\n\t\tconst contents = await fileService.readFile(target);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.strictEqual(parsed['service.testSetting'], 'value');\n\t\tassert.strictEqual(parsed['my.super.setting'], 'my.super.value');\n\t});\n\n\ttest('write workspace standalone setting - empty file - full JSON', async () => {\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.WORKSPACE, { key: 'tasks', value: { 'version': '1.0.0', tasks: [{ 'taskName': 'myTask' }] } });\n\n\t\tconst target = joinPath(workspaceService.getWorkspace().folders[0].uri, WORKSPACE_STANDALONE_CONFIGURATIONS['tasks']);\n\t\tconst contents = await fileService.readFile(target);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.strictEqual(parsed['version'], '1.0.0');\n\t\tassert.strictEqual(parsed['tasks'][0]['taskName'], 'myTask');\n\t});\n\n\ttest('write user standalone setting - empty file - full JSON', async () => {\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'tasks', value: { 'version': '1.0.0', tasks: [{ 'taskName': 'myTask' }] } });\n\n\t\tconst target = joinPath(environmentService.userRoamingDataHome, USER_STANDALONE_CONFIGURATIONS['tasks']);\n\t\tconst contents = await fileService.readFile(target);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.strictEqual(parsed['version'], '1.0.0');\n\t\tassert.strictEqual(parsed['tasks'][0]['taskName'], 'myTask');\n\t});\n\n\ttest('write workspace standalone setting - existing file - full JSON', async () => {\n\t\tconst target = joinPath(workspaceService.getWorkspace().folders[0].uri, WORKSPACE_STANDALONE_CONFIGURATIONS['tasks']);\n\t\tawait fileService.writeFile(target, VSBuffer.fromString('{ \"my.super.setting\": \"my.super.value\" }'));\n\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.WORKSPACE, { key: 'tasks', value: { 'version': '1.0.0', tasks: [{ 'taskName': 'myTask' }] } });\n\n\t\tconst contents = await fileService.readFile(target);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.strictEqual(parsed['version'], '1.0.0');\n\t\tassert.strictEqual(parsed['tasks'][0]['taskName'], 'myTask');\n\t});\n\n\ttest('write user standalone setting - existing file - full JSON', async () => {\n\t\tconst target = joinPath(environmentService.userRoamingDataHome, USER_STANDALONE_CONFIGURATIONS['tasks']);\n\t\tawait fileService.writeFile(target, VSBuffer.fromString('{ \"my.super.setting\": \"my.super.value\" }'));\n\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'tasks', value: { 'version': '1.0.0', tasks: [{ 'taskName': 'myTask' }] } });\n\n\t\tconst contents = await fileService.readFile(target);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.strictEqual(parsed['version'], '1.0.0');\n\t\tassert.strictEqual(parsed['tasks'][0]['taskName'], 'myTask');\n\t});\n\n\ttest('write workspace standalone setting - existing file with JSON errors - full JSON', async () => {\n\t\tconst target = joinPath(workspaceService.getWorkspace().folders[0].uri, WORKSPACE_STANDALONE_CONFIGURATIONS['tasks']);\n\t\tawait fileService.writeFile(target, VSBuffer.fromString('{ \"my.super.setting\": ')); // invalid JSON\n\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.WORKSPACE, { key: 'tasks', value: { 'version': '1.0.0', tasks: [{ 'taskName': 'myTask' }] } });\n\n\t\tconst contents = await fileService.readFile(target);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.strictEqual(parsed['version'], '1.0.0');\n\t\tassert.strictEqual(parsed['tasks'][0]['taskName'], 'myTask');\n\t});\n\n\ttest('write user standalone setting - existing file with JSON errors - full JSON', async () => {\n\t\tconst target = joinPath(environmentService.userRoamingDataHome, USER_STANDALONE_CONFIGURATIONS['tasks']);\n\t\tawait fileService.writeFile(target, VSBuffer.fromString('{ \"my.super.setting\": ')); // invalid JSON\n\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'tasks', value: { 'version': '1.0.0', tasks: [{ 'taskName': 'myTask' }] } });\n\n\t\tconst contents = await fileService.readFile(target);\n\t\tconst parsed = json.parse(contents.value.toString());\n\t\tassert.strictEqual(parsed['version'], '1.0.0');\n\t\tassert.strictEqual(parsed['tasks'][0]['taskName'], 'myTask');\n\t});\n\n\ttest('write workspace standalone setting should replace complete file', async () => {\n\t\tconst target = joinPath(workspaceService.getWorkspace().folders[0].uri, WORKSPACE_STANDALONE_CONFIGURATIONS['tasks']);\n\t\tawait fileService.writeFile(target, VSBuffer.fromString(`{\n\t\t\t\"version\": \"1.0.0\",\n\t\t\t\"tasks\": [\n\t\t\t\t{\n\t\t\t\t\t\"taskName\": \"myTask1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"taskName\": \"myTask2\"\n\t\t\t\t}\n\t\t\t]\n\t\t}`));\n\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.WORKSPACE, { key: 'tasks', value: { 'version': '1.0.0', tasks: [{ 'taskName': 'myTask1' }] } });\n\n\t\tconst actual = await fileService.readFile(target);\n\t\tconst expected = JSON.stringify({ 'version': '1.0.0', tasks: [{ 'taskName': 'myTask1' }] }, null, '\\t');\n\t\tassert.strictEqual(actual.value.toString(), expected);\n\t});\n\n\ttest('write user standalone setting should replace complete file', async () => {\n\t\tconst target = joinPath(environmentService.userRoamingDataHome, USER_STANDALONE_CONFIGURATIONS['tasks']);\n\t\tawait fileService.writeFile(target, VSBuffer.fromString(`{\n\t\t\t\"version\": \"1.0.0\",\n\t\t\t\"tasks\": [\n\t\t\t\t{\n\t\t\t\t\t\"taskName\": \"myTask1\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\t\"taskName\": \"myTask2\"\n\t\t\t\t}\n\t\t\t]\n\t\t}`));\n\n\t\tawait testObject.writeConfiguration(EditableConfigurationTarget.USER_LOCAL, { key: 'tasks', value: { 'version': '1.0.0', tasks: [{ 'taskName': 'myTask1' }] } });\n\n\t\tconst actual = await fileService.readFile(target);\n\t\tconst expected = JSON.stringify({ 'version': '1.0.0', tasks: [{ 'taskName': 'myTask1' }] }, null, '\\t');\n\t\tassert.strictEqual(actual.value.toString(), expected);\n\t});\n});\n"]}