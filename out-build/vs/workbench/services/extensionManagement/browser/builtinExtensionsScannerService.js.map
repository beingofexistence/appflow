{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/extensionManagement/browser/builtinExtensionsScannerService.ts"],"names":[],"mappings":"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","file":"builtinExtensionsScannerService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IBuiltinExtensionsScannerService, ExtensionType, IExtensionManifest, TargetPlatform, IExtension } from 'vs/platform/extensions/common/extensions';\nimport { isWeb, Language } from 'vs/base/common/platform';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { getGalleryExtensionId } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { builtinExtensionsPath, FileAccess } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { IExtensionResourceLoaderService } from 'vs/platform/extensionResourceLoader/common/extensionResourceLoader';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { ITranslations, localizeManifest } from 'vs/platform/extensionManagement/common/extensionNls';\nimport { ILogService } from 'vs/platform/log/common/log';\n\ninterface IBundledExtension {\n\textensionPath: string;\n\tpackageJSON: IExtensionManifest;\n\tpackageNLS?: any;\n\treadmePath?: string;\n\tchangelogPath?: string;\n}\n\nexport class BuiltinExtensionsScannerService implements IBuiltinExtensionsScannerService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly builtinExtensionsPromises: Promise<IExtension>[] = [];\n\n\tprivate nlsUrl: URI | undefined;\n\n\tconstructor(\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@IExtensionResourceLoaderService private readonly extensionResourceLoaderService: IExtensionResourceLoaderService,\n\t\t@IProductService productService: IProductService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tif (isWeb) {\n\t\t\tconst nlsBaseUrl = productService.extensionsGallery?.nlsBaseUrl;\n\t\t\t// Only use the nlsBaseUrl if we are using a language other than the default, English.\n\t\t\tif (nlsBaseUrl && productService.commit && !Language.isDefaultVariant()) {\n\t\t\t\tthis.nlsUrl = URI.joinPath(URI.parse(nlsBaseUrl), productService.commit, productService.version, Language.value());\n\t\t\t}\n\n\t\t\tconst builtinExtensionsServiceUrl = FileAccess.asBrowserUri(builtinExtensionsPath);\n\t\t\tif (builtinExtensionsServiceUrl) {\n\t\t\t\tlet bundledExtensions: IBundledExtension[] = [];\n\n\t\t\t\tif (environmentService.isBuilt) {\n\t\t\t\t\t// Built time configuration (do NOT modify)\n\t\t\t\t\tbundledExtensions = [/*BUILD->INSERT_BUILTIN_EXTENSIONS*/];\n\t\t\t\t} else {\n\t\t\t\t\t// Find builtin extensions by checking for DOM\n\t\t\t\t\tconst builtinExtensionsElement = document.getElementById('vscode-workbench-builtin-extensions');\n\t\t\t\t\tconst builtinExtensionsElementAttribute = builtinExtensionsElement ? builtinExtensionsElement.getAttribute('data-settings') : undefined;\n\t\t\t\t\tif (builtinExtensionsElementAttribute) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tbundledExtensions = JSON.parse(builtinExtensionsElementAttribute);\n\t\t\t\t\t\t} catch (error) { /* ignore error*/ }\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.builtinExtensionsPromises = bundledExtensions.map(async e => {\n\t\t\t\t\tconst id = getGalleryExtensionId(e.packageJSON.publisher, e.packageJSON.name);\n\t\t\t\t\treturn {\n\t\t\t\t\t\tidentifier: { id },\n\t\t\t\t\t\tlocation: uriIdentityService.extUri.joinPath(builtinExtensionsServiceUrl!, e.extensionPath),\n\t\t\t\t\t\ttype: ExtensionType.System,\n\t\t\t\t\t\tisBuiltin: true,\n\t\t\t\t\t\tmanifest: e.packageNLS ? await this.localizeManifest(id, e.packageJSON, e.packageNLS) : e.packageJSON,\n\t\t\t\t\t\treadmeUrl: e.readmePath ? uriIdentityService.extUri.joinPath(builtinExtensionsServiceUrl!, e.readmePath) : undefined,\n\t\t\t\t\t\tchangelogUrl: e.changelogPath ? uriIdentityService.extUri.joinPath(builtinExtensionsServiceUrl!, e.changelogPath) : undefined,\n\t\t\t\t\t\ttargetPlatform: TargetPlatform.WEB,\n\t\t\t\t\t\tvalidations: [],\n\t\t\t\t\t\tisValid: true\n\t\t\t\t\t};\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tasync scanBuiltinExtensions(): Promise<IExtension[]> {\n\t\treturn [...await Promise.all(this.builtinExtensionsPromises)];\n\t}\n\n\tprivate async localizeManifest(extensionId: string, manifest: IExtensionManifest, fallbackTranslations: ITranslations): Promise<IExtensionManifest> {\n\t\tif (!this.nlsUrl) {\n\t\t\treturn localizeManifest(this.logService, manifest, fallbackTranslations);\n\t\t}\n\t\t// the `package` endpoint returns the translations in a key-value format similar to the package.nls.json file.\n\t\tconst uri = URI.joinPath(this.nlsUrl, extensionId, 'package');\n\t\ttry {\n\t\t\tconst res = await this.extensionResourceLoaderService.readExtensionResource(uri);\n\t\t\tconst json = JSON.parse(res.toString());\n\t\t\treturn localizeManifest(this.logService, manifest, json, fallbackTranslations);\n\t\t} catch (e) {\n\t\t\tthis.logService.error(e);\n\t\t\treturn localizeManifest(this.logService, manifest, fallbackTranslations);\n\t\t}\n\t}\n}\n\nregisterSingleton(IBuiltinExtensionsScannerService, BuiltinExtensionsScannerService, InstantiationType.Delayed);\n"]}