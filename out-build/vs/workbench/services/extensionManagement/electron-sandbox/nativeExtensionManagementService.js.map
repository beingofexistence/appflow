{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/extensionManagement/electron-sandbox/nativeExtensionManagementService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAkBzF,IAAM,IAAI,GAAV,MAAM,IAAiC,SAAQ,uCAAI;QAEzD,YACC,OAAiB,EACQ,sBAA2B,EAC/B,kBAAuB,EACb,CAAgB,EACZ,CAAoB,EACF,CAA8B,EACrD,CAAe;YAE7C,KAAK,CAAC,OAAO,EAAE,sBAAsB,EAAE,kBAAkB,CAAC,CAAC;YAL5B,MAAC,GAAD,CAAC,CAAe;YACZ,MAAC,GAAD,CAAC,CAAmB;YACF,MAAC,GAAD,CAAC,CAA6B;YACrD,MAAC,GAAD,CAAC,CAAc;QAG9C,CAAC;QAES,CAAC,CAAW,EAAE,eAAe,EAAE,iBAAiB,EAA4E;YACrI,OAAO,iBAAiB,IAAI,IAAI,CAAC,CAAC,CAAkB,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAsB,cAAc,CAAC,kBAAkB,EAAE,eAAe,CAAC,CAAC;QACpJ,CAAC;QAEQ,KAAK,CAAC,OAAO,CAAC,IAAS,EAAE,OAA4B;YAC7D,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,GAAG,MAAM,IAAI,CAAC,CAAC,CAAY,IAAI,CAAC,CAAC;YAC5D,IAAI;gBACH,OAAO,MAAM,KAAK,CAAC,OAAO,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;aAC9C;oBAAS;gBACT,MAAM,OAAO,EAAE,CAAC;aAChB;QACF,CAAC;QAEO,KAAK,CAAC,CAAC,CAAY,IAAS;YACnC,IAAI,IAAI,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,EAAE;gBACjC,OAAO,EAAE,QAAQ,EAAE,IAAI,EAAE,KAAK,CAAC,OAAO,KAAK,CAAC,EAAE,CAAC;aAC/C;YACD,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,4BAA4B,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;YACrE,MAAM,QAAQ,GAAG,IAAA,eAAG,EAAM,IAAI,CAAC,CAAC,CAAwB,0BAA0B,EAAE,IAAA,UAAG,GAAW,CAAC,CAAC;YACpG,MAAM,IAAI,CAAC,CAAC,CAAe,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;YACpD,IAAI,CAAC,CAAC,CAAU,IAAI,CAAC,yBAAyB,EAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC,CAAC;YACrE,MAAM,OAAO,GAAG,KAAK,IAAI,EAAE;gBAC1B,IAAI;oBACH,MAAM,IAAI,CAAC,CAAC,CAAW,GAAG,CAAC,QAAQ,CAAC,CAAC;iBACrC;gBAAC,OAAO,KAAK,EAAE;oBACf,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,KAAK,CAAC,CAAC;iBAC7B;YACF,CAAC,CAAC;YACF,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,CAAC;QAC9B,CAAC;QAEkB,KAAK,CAAC,CAAC,CAAuB,uBAA4B,EAAE,sBAA2B,EAAE,kBAA0C;YACrJ,IAAI,IAAI,CAAC,CAAC,CAAwB,eAAe,EAAE;gBAClD,MAAM,2BAA2B,GAAG,MAAM,IAAI,CAAC,YAAY,6BAAqB,uBAAuB,CAAC,CAAC;gBACzG,MAAM,iBAAiB,GAAG,2BAA2B,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,IAAA,gBAAG,EAAiB,CAAC,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAwB,eAAe,CAAC,CAAC,CAAC;gBAChJ,IAAI,iBAAiB,EAAE;oBACtB,IAAI,CAAC,kBAAkB,EAAE;wBACxB,kBAAkB,GAAG,EAAE,CAAC;qBACxB;oBACD,kBAAkB,CAAC,IAAI,CAAC,IAAI,gBAAG,CAAiB,iBAAiB,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;iBAClF;aACD;YACD,OAAO,KAAK,CAAC,CAAC,CAAuB,uBAAuB,EAAE,sBAAsB,EAAE,kBAAkB,CAAC,CAAC;QAC3G,CAAC;KACD,CAAA;IA1DY,oBAAI;mBAAJ,IAAI;QAId,WAAA,qBAAG,CAAA;QACH,WAAA,iBAAG,CAAA;QACH,WAAA,WAAG,CAAA;QACH,WAAA,cAAG,CAAA;QACH,WAAA,yBAAI,CAAA;QACJ,WAAA,SAAG,CAAA;OATO,IAAI,CA0DhB","file":"nativeExtensionManagementService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { DidChangeProfileEvent, IProfileAwareExtensionManagementService } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { URI } from 'vs/base/common/uri';\nimport { ILocalExtension, InstallVSIXOptions } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\nimport { joinPath } from 'vs/base/common/resources';\nimport { Schemas } from 'vs/base/common/network';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IDownloadService } from 'vs/platform/download/common/download';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { ProfileAwareExtensionManagementChannelClient } from 'vs/workbench/services/extensionManagement/common/extensionManagementChannelClient';\nimport { ExtensionIdentifier, ExtensionType, isResolverExtension } from 'vs/platform/extensions/common/extensions';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\n\nexport class NativeExtensionManagementService extends ProfileAwareExtensionManagementChannelClient implements IProfileAwareExtensionManagementService {\n\n\tconstructor(\n\t\tchannel: IChannel,\n\t\t@IUserDataProfileService userDataProfileService: IUserDataProfileService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IDownloadService private readonly downloadService: IDownloadService,\n\t\t@INativeWorkbenchEnvironmentService private readonly nativeEnvironmentService: INativeWorkbenchEnvironmentService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper(channel, userDataProfileService, uriIdentityService);\n\t}\n\n\tprotected filterEvent({ profileLocation, applicationScoped }: { readonly profileLocation?: URI; readonly applicationScoped?: boolean }): boolean {\n\t\treturn applicationScoped || this.uriIdentityService.extUri.isEqual(this.userDataProfileService.currentProfile.extensionsResource, profileLocation);\n\t}\n\n\toverride async install(vsix: URI, options?: InstallVSIXOptions): Promise<ILocalExtension> {\n\t\tconst { location, cleanup } = await this.downloadVsix(vsix);\n\t\ttry {\n\t\t\treturn await super.install(location, options);\n\t\t} finally {\n\t\t\tawait cleanup();\n\t\t}\n\t}\n\n\tprivate async downloadVsix(vsix: URI): Promise<{ location: URI; cleanup: () => Promise<void> }> {\n\t\tif (vsix.scheme === Schemas.file) {\n\t\t\treturn { location: vsix, async cleanup() { } };\n\t\t}\n\t\tthis.logService.trace('Downloading extension from', vsix.toString());\n\t\tconst location = joinPath(this.nativeEnvironmentService.extensionsDownloadLocation, generateUuid());\n\t\tawait this.downloadService.download(vsix, location);\n\t\tthis.logService.info('Downloaded extension to', location.toString());\n\t\tconst cleanup = async () => {\n\t\t\ttry {\n\t\t\t\tawait this.fileService.del(location);\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t};\n\t\treturn { location, cleanup };\n\t}\n\n\tprotected override async switchExtensionsProfile(previousProfileLocation: URI, currentProfileLocation: URI, preserveExtensions?: ExtensionIdentifier[]): Promise<DidChangeProfileEvent> {\n\t\tif (this.nativeEnvironmentService.remoteAuthority) {\n\t\t\tconst previousInstalledExtensions = await this.getInstalled(ExtensionType.User, previousProfileLocation);\n\t\t\tconst resolverExtension = previousInstalledExtensions.find(e => isResolverExtension(e.manifest, this.nativeEnvironmentService.remoteAuthority));\n\t\t\tif (resolverExtension) {\n\t\t\t\tif (!preserveExtensions) {\n\t\t\t\t\tpreserveExtensions = [];\n\t\t\t\t}\n\t\t\t\tpreserveExtensions.push(new ExtensionIdentifier(resolverExtension.identifier.id));\n\t\t\t}\n\t\t}\n\t\treturn super.switchExtensionsProfile(previousProfileLocation, currentProfileLocation, preserveExtensions);\n\t}\n}\n"]}