{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/extensionManagement/electron-sandbox/extensionTipsService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;IAYhG,IAAM,0BAA0B,GAAhC,MAAM,0BAA2B,SAAQ,2BAAI;QAI5C,YACe,WAAgB,EACb,cAAmB,EACb,oBAA0B;YAEjD,KAAK,CAAC,WAAW,EAAE,cAAc,CAAC,CAAC;YACnC,IAAI,CAAC,CAAC,GAAS,oBAAoB,CAAC,UAAU,CAAC,sBAAsB,CAAC,CAAC;QACxE,CAAC;QAEQ,kBAAkB,CAAC,MAAW;YACtC,IAAI,MAAM,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,EAAE;gBACnC,OAAO,IAAI,CAAC,CAAC,CAAO,IAAI,CAA6B,oBAAoB,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;aACrF;YACD,OAAO,KAAK,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;QACzC,CAAC;QAEQ,+BAA+B;YACvC,OAAO,IAAI,CAAC,CAAC,CAAO,IAAI,CAAiC,iCAAiC,CAAC,CAAC;QAC7F,CAAC;QAEQ,2BAA2B;YACnC,OAAO,IAAI,CAAC,CAAC,CAAO,IAAI,CAAiC,6BAA6B,CAAC,CAAC;QACzF,CAAC;KAED,CAAA;IA5BK,0BAA0B;QAK7B,WAAA,WAAG,CAAA;QACH,WAAA,oBAAG,CAAA;QACH,WAAA,eAAI,CAAA;OAPD,0BAA0B,CA4B/B;IAED,IAAA,gBAAG,EAAe,yBAAG,EAAoB,0BAA0B,oCAA4B,CAAC","file":"extensionTipsService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ISharedProcessService } from 'vs/platform/ipc/electron-sandbox/services';\nimport { IChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { IExtensionTipsService, IExecutableBasedExtensionTip, IConfigBasedExtensionTip } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { URI } from 'vs/base/common/uri';\nimport { ExtensionTipsService } from 'vs/platform/extensionManagement/common/extensionTipsService';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { Schemas } from 'vs/base/common/network';\n\nclass NativeExtensionTipsService extends ExtensionTipsService implements IExtensionTipsService {\n\n\tprivate readonly channel: IChannel;\n\n\tconstructor(\n\t\t@IFileService fileService: IFileService,\n\t\t@IProductService productService: IProductService,\n\t\t@ISharedProcessService sharedProcessService: ISharedProcessService\n\t) {\n\t\tsuper(fileService, productService);\n\t\tthis.channel = sharedProcessService.getChannel('extensionTipsService');\n\t}\n\n\toverride getConfigBasedTips(folder: URI): Promise<IConfigBasedExtensionTip[]> {\n\t\tif (folder.scheme === Schemas.file) {\n\t\t\treturn this.channel.call<IConfigBasedExtensionTip[]>('getConfigBasedTips', [folder]);\n\t\t}\n\t\treturn super.getConfigBasedTips(folder);\n\t}\n\n\toverride getImportantExecutableBasedTips(): Promise<IExecutableBasedExtensionTip[]> {\n\t\treturn this.channel.call<IExecutableBasedExtensionTip[]>('getImportantExecutableBasedTips');\n\t}\n\n\toverride getOtherExecutableBasedTips(): Promise<IExecutableBasedExtensionTip[]> {\n\t\treturn this.channel.call<IExecutableBasedExtensionTip[]>('getOtherExecutableBasedTips');\n\t}\n\n}\n\nregisterSingleton(IExtensionTipsService, NativeExtensionTipsService, InstantiationType.Delayed);\n"]}