{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/extensionManagement/electron-sandbox/extensionManagementService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAuBzF,IAAM,IAAI,GAAV,MAAM,IAA2B,SAAQ,iCAA8B;QAE7E,YACsD,CAAwB,EAC1C,gCAAsC,EAC/C,uBAA4B,EAC7B,sBAA2B,EAC7B,oBAAyB,EAC/B,cAAmB,EAClB,eAAoB,EACN,6BAAmC,EACnD,aAAkB,EACH,4BAAiC,EAC3B,kCAAwC,EAC/D,WAAgB,EACjB,UAAe,EACL,oBAAyB;YAEhD,KAAK,CAAC,gCAAgC,EAAE,uBAAuB,EAAE,sBAAsB,EAAE,oBAAoB,EAAE,cAAc,EAAE,eAAe,EAAE,6BAA6B,EAAE,aAAa,EAAE,4BAA4B,EAAE,kCAAkC,EAAE,WAAW,EAAE,UAAU,EAAE,oBAAoB,CAAC,CAAC;YAf1P,MAAC,GAAD,CAAC,CAAuB;QAgB9E,CAAC;QAEkB,KAAK,CAAC,CAAC,CAAmB,IAAS,EAAE,MAAkC,EAAE,OAAuC;YAClI,IAAI,IAAI,CAAC,MAAM,KAAK,iBAAO,CAAC,YAAY,IAAI,MAAM,KAAK,IAAI,CAAC,CAAC,CAAgC,8BAA8B,EAAE;gBAC5H,MAAM,kBAAkB,GAAG,IAAA,eAAG,EAAM,IAAI,CAAC,CAAC,CAAkB,MAAM,EAAE,IAAA,UAAG,GAAW,CAAC,CAAC;gBACpF,MAAM,IAAI,CAAC,CAAC,CAAe,QAAQ,CAAC,IAAI,EAAE,kBAAkB,CAAC,CAAC;gBAC9D,IAAI,GAAG,kBAAkB,CAAC;aAC1B;YACD,OAAO,KAAK,CAAC,CAAC,CAAmB,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;QACzD,CAAC;KACD,CAAA;IA7BY,oBAAI;mBAAJ,IAAI;QAGd,WAAA,yBAAI,CAAA;QACJ,WAAA,0BAAI,CAAA;QACJ,WAAA,yBAAG,CAAA;QACH,WAAA,qBAAG,CAAA;QACH,WAAA,mBAAG,CAAA;QACH,WAAA,oBAAG,CAAA;QACH,WAAA,cAAG,CAAA;QACH,WAAA,mBAAI,CAAA;QACJ,WAAA,aAAG,CAAA;QACH,WAAA,oBAAG,CAAA;QACH,YAAA,yCAAI,CAAA;QACJ,YAAA,WAAG,CAAA;QACH,YAAA,SAAG,CAAA;QACH,YAAA,mBAAG,CAAA;OAhBO,IAAI,CA6BhB;IAED,IAAA,gBAAG,EAAe,0BAAI,EAAkC,IAAI,oCAAkD,CAAC","file":"extensionManagementService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { ILocalExtension, IExtensionGalleryService, InstallVSIXOptions } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { URI } from 'vs/base/common/uri';\nimport { ExtensionManagementService as BaseExtensionManagementService } from 'vs/workbench/services/extensionManagement/common/extensionManagementService';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IExtensionManagementServer, IExtensionManagementServerService, IWorkbenchExtensionManagementService } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { Schemas } from 'vs/base/common/network';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IDownloadService } from 'vs/platform/download/common/download';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { joinPath } from 'vs/base/common/resources';\nimport { IUserDataSyncEnablementService } from 'vs/platform/userDataSync/common/userDataSync';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IWorkspaceTrustRequestService } from 'vs/platform/workspace/common/workspaceTrust';\nimport { IExtensionManifestPropertiesService } from 'vs/workbench/services/extensions/common/extensionManifestPropertiesService';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\n\nexport class ExtensionManagementService extends BaseExtensionManagementService {\n\n\tconstructor(\n\t\t@INativeWorkbenchEnvironmentService private readonly environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IExtensionManagementServerService extensionManagementServerService: IExtensionManagementServerService,\n\t\t@IExtensionGalleryService extensionGalleryService: IExtensionGalleryService,\n\t\t@IUserDataProfileService userDataProfileService: IUserDataProfileService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IProductService productService: IProductService,\n\t\t@IDownloadService downloadService: IDownloadService,\n\t\t@IUserDataSyncEnablementService userDataSyncEnablementService: IUserDataSyncEnablementService,\n\t\t@IDialogService dialogService: IDialogService,\n\t\t@IWorkspaceTrustRequestService workspaceTrustRequestService: IWorkspaceTrustRequestService,\n\t\t@IExtensionManifestPropertiesService extensionManifestPropertiesService: IExtensionManifestPropertiesService,\n\t\t@IFileService fileService: IFileService,\n\t\t@ILogService logService: ILogService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper(extensionManagementServerService, extensionGalleryService, userDataProfileService, configurationService, productService, downloadService, userDataSyncEnablementService, dialogService, workspaceTrustRequestService, extensionManifestPropertiesService, fileService, logService, instantiationService);\n\t}\n\n\tprotected override async installVSIXInServer(vsix: URI, server: IExtensionManagementServer, options: InstallVSIXOptions | undefined): Promise<ILocalExtension> {\n\t\tif (vsix.scheme === Schemas.vscodeRemote && server === this.extensionManagementServerService.localExtensionManagementServer) {\n\t\t\tconst downloadedLocation = joinPath(this.environmentService.tmpDir, generateUuid());\n\t\t\tawait this.downloadService.download(vsix, downloadedLocation);\n\t\t\tvsix = downloadedLocation;\n\t\t}\n\t\treturn super.installVSIXInServer(vsix, server, options);\n\t}\n}\n\nregisterSingleton(IWorkbenchExtensionManagementService, ExtensionManagementService, InstantiationType.Delayed);\n"]}