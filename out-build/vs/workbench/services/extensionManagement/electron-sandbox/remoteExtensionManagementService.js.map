{"version":3,"sources":["vs/workbench/services/extensionManagement/electron-sandbox/remoteExtensionManagementService.ts"],"names":[],"mappings":"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","file":"remoteExtensionManagementService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { ILocalExtension, IGalleryExtension, IExtensionGalleryService, InstallOperation, InstallOptions, InstallVSIXOptions, ExtensionManagementError, ExtensionManagementErrorCode } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { URI } from 'vs/base/common/uri';\nimport { ExtensionType, IExtensionManifest } from 'vs/platform/extensions/common/extensions';\nimport { areSameExtensions } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { isNonEmptyArray } from 'vs/base/common/arrays';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { localize } from 'vs/nls';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IExtensionManagementServer } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { Promises } from 'vs/base/common/async';\nimport { IExtensionManifestPropertiesService } from 'vs/workbench/services/extensions/common/extensionManifestPropertiesService';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { RemoteExtensionManagementService } from 'vs/workbench/services/extensionManagement/common/remoteExtensionManagementService';\nimport { IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\nimport { IRemoteUserDataProfilesService } from 'vs/workbench/services/userDataProfile/common/remoteUserDataProfiles';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\n\nexport class NativeRemoteExtensionManagementService extends RemoteExtensionManagementService {\n\n\tconstructor(\n\t\tchannel: IChannel,\n\t\tprivate readonly localExtensionManagementServer: IExtensionManagementServer,\n\t\t@IUserDataProfileService userDataProfileService: IUserDataProfileService,\n\t\t@IUserDataProfilesService userDataProfilesService: IUserDataProfilesService,\n\t\t@IRemoteUserDataProfilesService remoteUserDataProfilesService: IRemoteUserDataProfilesService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IExtensionGalleryService private readonly galleryService: IExtensionGalleryService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IExtensionManifestPropertiesService private readonly extensionManifestPropertiesService: IExtensionManifestPropertiesService,\n\t) {\n\t\tsuper(channel, userDataProfileService, userDataProfilesService, remoteUserDataProfilesService, uriIdentityService);\n\t}\n\n\toverride async install(vsix: URI, options?: InstallVSIXOptions): Promise<ILocalExtension> {\n\t\tconst local = await super.install(vsix, options);\n\t\tawait this.installUIDependenciesAndPackedExtensions(local);\n\t\treturn local;\n\t}\n\n\toverride async installFromGallery(extension: IGalleryExtension, installOptions?: InstallOptions): Promise<ILocalExtension> {\n\t\tconst local = await this.doInstallFromGallery(extension, installOptions);\n\t\tawait this.installUIDependenciesAndPackedExtensions(local);\n\t\treturn local;\n\t}\n\n\tprivate async doInstallFromGallery(extension: IGalleryExtension, installOptions?: InstallOptions): Promise<ILocalExtension> {\n\t\tif (this.configurationService.getValue('remote.downloadExtensionsLocally')) {\n\t\t\treturn this.downloadAndInstall(extension, installOptions || {});\n\t\t}\n\t\ttry {\n\t\t\treturn await super.installFromGallery(extension, installOptions);\n\t\t} catch (error) {\n\t\t\tswitch (error.name) {\n\t\t\t\tcase ExtensionManagementErrorCode.Download:\n\t\t\t\tcase ExtensionManagementErrorCode.Internal:\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis.logService.error(`Error while installing '${extension.identifier.id}' extension in the remote server.`, toErrorMessage(error));\n\t\t\t\t\t\treturn await this.downloadAndInstall(extension, installOptions || {});\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tthis.logService.error(e);\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tthis.logService.debug('Remote Install Error Name', error.name);\n\t\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async downloadAndInstall(extension: IGalleryExtension, installOptions: InstallOptions): Promise<ILocalExtension> {\n\t\tthis.logService.info(`Downloading the '${extension.identifier.id}' extension locally and install`);\n\t\tconst compatible = await this.checkAndGetCompatible(extension, !!installOptions.installPreReleaseVersion);\n\t\tinstallOptions = { ...installOptions, donotIncludePackAndDependencies: true };\n\t\tconst installed = await this.getInstalled(ExtensionType.User);\n\t\tconst workspaceExtensions = await this.getAllWorkspaceDependenciesAndPackedExtensions(compatible, CancellationToken.None);\n\t\tif (workspaceExtensions.length) {\n\t\t\tthis.logService.info(`Downloading the workspace dependencies and packed extensions of '${compatible.identifier.id}' locally and install`);\n\t\t\tfor (const workspaceExtension of workspaceExtensions) {\n\t\t\t\tawait this.downloadCompatibleAndInstall(workspaceExtension, installed, installOptions);\n\t\t\t}\n\t\t}\n\t\treturn await this.downloadCompatibleAndInstall(compatible, installed, installOptions);\n\t}\n\n\tprivate async downloadCompatibleAndInstall(extension: IGalleryExtension, installed: ILocalExtension[], installOptions: InstallOptions): Promise<ILocalExtension> {\n\t\tconst compatible = await this.checkAndGetCompatible(extension, !!installOptions.installPreReleaseVersion);\n\t\tthis.logService.trace('Downloading extension:', compatible.identifier.id);\n\t\tconst location = await this.localExtensionManagementServer.extensionManagementService.download(compatible, installed.filter(i => areSameExtensions(i.identifier, compatible.identifier))[0] ? InstallOperation.Update : InstallOperation.Install, !!installOptions.donotVerifySignature);\n\t\tthis.logService.info('Downloaded extension:', compatible.identifier.id, location.path);\n\t\ttry {\n\t\t\tconst local = await super.install(location, installOptions);\n\t\t\tthis.logService.info(`Successfully installed '${compatible.identifier.id}' extension`);\n\t\t\treturn local;\n\t\t} finally {\n\t\t\ttry {\n\t\t\t\tawait this.fileService.del(location);\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async checkAndGetCompatible(extension: IGalleryExtension, includePreRelease: boolean): Promise<IGalleryExtension> {\n\t\tconst targetPlatform = await this.getTargetPlatform();\n\t\tlet compatibleExtension: IGalleryExtension | null = null;\n\n\t\tif (extension.hasPreReleaseVersion && extension.properties.isPreReleaseVersion !== includePreRelease) {\n\t\t\tcompatibleExtension = (await this.galleryService.getExtensions([{ ...extension.identifier, preRelease: includePreRelease }], { targetPlatform, compatible: true }, CancellationToken.None))[0] || null;\n\t\t}\n\n\t\tif (!compatibleExtension && await this.galleryService.isExtensionCompatible(extension, includePreRelease, targetPlatform)) {\n\t\t\tcompatibleExtension = extension;\n\t\t}\n\n\t\tif (!compatibleExtension) {\n\t\t\tcompatibleExtension = await this.galleryService.getCompatibleExtension(extension, includePreRelease, targetPlatform);\n\t\t}\n\n\t\tif (!compatibleExtension) {\n\t\t\t/** If no compatible release version is found, check if the extension has a release version or not and throw relevant error */\n\t\t\tif (!includePreRelease && extension.properties.isPreReleaseVersion && (await this.galleryService.getExtensions([extension.identifier], CancellationToken.None))[0]) {\n\t\t\t\tthrow new ExtensionManagementError(localize('notFoundReleaseExtension', \"Can't install release version of '{0}' extension because it has no release version.\", extension.identifier.id), ExtensionManagementErrorCode.ReleaseVersionNotFound);\n\t\t\t}\n\t\t\tthrow new ExtensionManagementError(localize('notFoundCompatibleDependency', \"Can't install '{0}' extension because it is not compatible with the current version of {1} (version {2}).\", extension.identifier.id, this.productService.nameLong, this.productService.version), ExtensionManagementErrorCode.Incompatible);\n\t\t}\n\n\t\treturn compatibleExtension;\n\t}\n\n\tprivate async installUIDependenciesAndPackedExtensions(local: ILocalExtension): Promise<void> {\n\t\tconst uiExtensions = await this.getAllUIDependenciesAndPackedExtensions(local.manifest, CancellationToken.None);\n\t\tconst installed = await this.localExtensionManagementServer.extensionManagementService.getInstalled();\n\t\tconst toInstall = uiExtensions.filter(e => installed.every(i => !areSameExtensions(i.identifier, e.identifier)));\n\t\tif (toInstall.length) {\n\t\t\tthis.logService.info(`Installing UI dependencies and packed extensions of '${local.identifier.id}' locally`);\n\t\t\tawait Promises.settled(toInstall.map(d => this.localExtensionManagementServer.extensionManagementService.installFromGallery(d)));\n\t\t}\n\t}\n\n\tprivate async getAllUIDependenciesAndPackedExtensions(manifest: IExtensionManifest, token: CancellationToken): Promise<IGalleryExtension[]> {\n\t\tconst result = new Map<string, IGalleryExtension>();\n\t\tconst extensions = [...(manifest.extensionPack || []), ...(manifest.extensionDependencies || [])];\n\t\tawait this.getDependenciesAndPackedExtensionsRecursively(extensions, result, true, token);\n\t\treturn [...result.values()];\n\t}\n\n\tprivate async getAllWorkspaceDependenciesAndPackedExtensions(extension: IGalleryExtension, token: CancellationToken): Promise<IGalleryExtension[]> {\n\t\tconst result = new Map<string, IGalleryExtension>();\n\t\tresult.set(extension.identifier.id.toLowerCase(), extension);\n\t\tconst manifest = await this.galleryService.getManifest(extension, token);\n\t\tif (manifest) {\n\t\t\tconst extensions = [...(manifest.extensionPack || []), ...(manifest.extensionDependencies || [])];\n\t\t\tawait this.getDependenciesAndPackedExtensionsRecursively(extensions, result, false, token);\n\t\t}\n\t\tresult.delete(extension.identifier.id);\n\t\treturn [...result.values()];\n\t}\n\n\tprivate async getDependenciesAndPackedExtensionsRecursively(toGet: string[], result: Map<string, IGalleryExtension>, uiExtension: boolean, token: CancellationToken): Promise<void> {\n\t\tif (toGet.length === 0) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tconst extensions = await this.galleryService.getExtensions(toGet.map(id => ({ id })), token);\n\t\tconst manifests = await Promise.all(extensions.map(e => this.galleryService.getManifest(e, token)));\n\t\tconst extensionsManifests: IExtensionManifest[] = [];\n\t\tfor (let idx = 0; idx < extensions.length; idx++) {\n\t\t\tconst extension = extensions[idx];\n\t\t\tconst manifest = manifests[idx];\n\t\t\tif (manifest && this.extensionManifestPropertiesService.prefersExecuteOnUI(manifest) === uiExtension) {\n\t\t\t\tresult.set(extension.identifier.id.toLowerCase(), extension);\n\t\t\t\textensionsManifests.push(manifest);\n\t\t\t}\n\t\t}\n\t\ttoGet = [];\n\t\tfor (const extensionManifest of extensionsManifests) {\n\t\t\tif (isNonEmptyArray(extensionManifest.extensionDependencies)) {\n\t\t\t\tfor (const id of extensionManifest.extensionDependencies) {\n\t\t\t\t\tif (!result.has(id.toLowerCase())) {\n\t\t\t\t\t\ttoGet.push(id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isNonEmptyArray(extensionManifest.extensionPack)) {\n\t\t\t\tfor (const id of extensionManifest.extensionPack) {\n\t\t\t\t\tif (!result.has(id.toLowerCase())) {\n\t\t\t\t\t\ttoGet.push(id);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn this.getDependenciesAndPackedExtensionsRecursively(toGet, result, uiExtension, token);\n\t}\n}\n"]}