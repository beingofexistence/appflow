{"version":3,"sources":["vs/workbench/services/extensionManagement/common/extensionManagementServerService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAezF,IAAM,IAAI,GAAV,MAAM,IAAI;QAQhB,YACsB,kBAAuB,EAC7B,YAAiB,EACT,oBAAyB;YAPxC,mCAA8B,GAAsC,IAAI,CAAC;YACzE,oCAA+B,GAAsC,IAAI,CAAC;YAC1E,iCAA4B,GAAsC,IAAI,CAAC;YAO/E,MAAM,qBAAqB,GAAG,kBAAkB,CAAC,aAAa,EAAE,CAAC;YACjE,IAAI,qBAAqB,EAAE;gBAC1B,MAAM,0BAA0B,GAAG,oBAAoB,CAAC,cAAc,CAAC,uCAAI,EAA8B,qBAAqB,CAAC,UAAU,CAAW,YAAY,CAAC,CAAC,CAAC;gBACnK,IAAI,CAAC,+BAA+B,GAAG;oBACtC,EAAE,EAAE,QAAQ;oBACZ,0BAA0B;oBAC1B,IAAI,KAAK,KAAK,OAAO,YAAY,CAAC,YAAY,CAAC,iBAAO,CAAC,YAAY,EAAE,qBAAsB,CAAC,eAAe,CAAC,IAAI,IAAA,cAAQ,EAAC,CAAQ,EAAE,IAAQ,CAAC,CAAC,CAAC,CAAC;iBAC/I,CAAC;aACF;YACD,IAAI,aAAE,EAAK;gBACV,MAAM,0BAA0B,GAAG,oBAAoB,CAAC,cAAc,CAAC,oCAAI,CAA0B,CAAC;gBACtG,IAAI,CAAC,4BAA4B,GAAG;oBACnC,EAAE,EAAE,KAAK;oBACT,0BAA0B;oBAC1B,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAS,EAAE,IAAS,CAAC;iBACrC,CAAC;aACF;QACF,CAAC;QAED,4BAA4B,CAAC,SAAqB;YACjD,IAAI,SAAS,CAAC,QAAQ,CAAC,MAAM,KAAK,iBAAO,CAAC,YAAY,EAAE;gBACvD,OAAO,IAAI,CAAC,+BAAgC,CAAC;aAC7C;YACD,IAAI,IAAI,CAAC,4BAA4B,EAAE;gBACtC,OAAO,IAAI,CAAC,4BAA4B,CAAC;aACzC;YACD,MAAM,IAAI,KAAK,CAAC,qBAAqB,SAAS,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC5D,CAAC;QAED,2BAA2B,CAAC,SAAqB;YAChD,MAAM,MAAM,GAAG,IAAI,CAAC,4BAA4B,CAAC,SAAS,CAAC,CAAC;YAC5D,OAAO,MAAM,KAAK,IAAI,CAAC,+BAA+B,CAAC,CAAC,yCAAiC,CAAC,qCAA6B,CAAC;QACzH,CAAC;KACD,CAAA;IA9CY,oBAAI;mBAAJ,IAAI;QASd,WAAA,wBAAG,CAAA;QACH,WAAA,WAAG,CAAA;QACH,WAAA,mBAAG,CAAA;OAXO,IAAI,CA8ChB;IAED,IAAA,gBAAG,EAAe,0BAAI,EAA+B,IAAI,oCAAwD,CAAC","file":"extensionManagementServerService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { ExtensionInstallLocation, IExtensionManagementServer, IExtensionManagementServerService } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { Schemas } from 'vs/base/common/network';\nimport { IChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { isWeb } from 'vs/base/common/platform';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { WebExtensionManagementService } from 'vs/workbench/services/extensionManagement/common/webExtensionManagementService';\nimport { IExtension } from 'vs/platform/extensions/common/extensions';\nimport { RemoteExtensionManagementService } from 'vs/workbench/services/extensionManagement/common/remoteExtensionManagementService';\n\nexport class ExtensionManagementServerService implements IExtensionManagementServerService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\treadonly localExtensionManagementServer: IExtensionManagementServer | null = null;\n\treadonly remoteExtensionManagementServer: IExtensionManagementServer | null = null;\n\treadonly webExtensionManagementServer: IExtensionManagementServer | null = null;\n\n\tconstructor(\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tconst remoteAgentConnection = remoteAgentService.getConnection();\n\t\tif (remoteAgentConnection) {\n\t\t\tconst extensionManagementService = instantiationService.createInstance(RemoteExtensionManagementService, remoteAgentConnection.getChannel<IChannel>('extensions'));\n\t\t\tthis.remoteExtensionManagementServer = {\n\t\t\t\tid: 'remote',\n\t\t\t\textensionManagementService,\n\t\t\t\tget label() { return labelService.getHostLabel(Schemas.vscodeRemote, remoteAgentConnection!.remoteAuthority) || localize('remote', \"Remote\"); },\n\t\t\t};\n\t\t}\n\t\tif (isWeb) {\n\t\t\tconst extensionManagementService = instantiationService.createInstance(WebExtensionManagementService);\n\t\t\tthis.webExtensionManagementServer = {\n\t\t\t\tid: 'web',\n\t\t\t\textensionManagementService,\n\t\t\t\tlabel: localize('browser', \"Browser\"),\n\t\t\t};\n\t\t}\n\t}\n\n\tgetExtensionManagementServer(extension: IExtension): IExtensionManagementServer {\n\t\tif (extension.location.scheme === Schemas.vscodeRemote) {\n\t\t\treturn this.remoteExtensionManagementServer!;\n\t\t}\n\t\tif (this.webExtensionManagementServer) {\n\t\t\treturn this.webExtensionManagementServer;\n\t\t}\n\t\tthrow new Error(`Invalid Extension ${extension.location}`);\n\t}\n\n\tgetExtensionInstallLocation(extension: IExtension): ExtensionInstallLocation | null {\n\t\tconst server = this.getExtensionManagementServer(extension);\n\t\treturn server === this.remoteExtensionManagementServer ? ExtensionInstallLocation.Remote : ExtensionInstallLocation.Web;\n\t}\n}\n\nregisterSingleton(IExtensionManagementServerService, ExtensionManagementServerService, InstantiationType.Delayed);\n"]}