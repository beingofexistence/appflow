{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/extensionManagement/common/webExtensionManagementService.ts"],"names":[],"mappings":"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","file":"webExtensionManagementService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ExtensionIdentifier, ExtensionType, IExtension, IExtensionIdentifier, IExtensionManifest, TargetPlatform } from 'vs/platform/extensions/common/extensions';\nimport { ILocalExtension, IGalleryExtension, InstallOperation, IExtensionGalleryService, Metadata, InstallOptions } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { URI } from 'vs/base/common/uri';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { areSameExtensions, getGalleryExtensionId } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { IProfileAwareExtensionManagementService, IScannedExtension, IWebExtensionsScannerService } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { AbstractExtensionManagementService, AbstractExtensionTask, IInstallExtensionTask, InstallExtensionTaskOptions, IUninstallExtensionTask, toExtensionManagementError, UninstallExtensionTaskOptions } from 'vs/platform/extensionManagement/common/abstractExtensionManagementService';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IExtensionManifestPropertiesService } from 'vs/workbench/services/extensions/common/extensionManifestPropertiesService';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { isBoolean, isUndefined } from 'vs/base/common/types';\nimport { DidChangeUserDataProfileEvent, IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\nimport { delta } from 'vs/base/common/arrays';\nimport { compare } from 'vs/base/common/strings';\nimport { IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\n\nexport class WebExtensionManagementService extends AbstractExtensionManagementService implements IProfileAwareExtensionManagementService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly disposables = this._register(new DisposableStore());\n\n\tget onProfileAwareInstallExtension() { return super.onInstallExtension; }\n\toverride get onInstallExtension() { return Event.filter(this.onProfileAwareInstallExtension, e => this.filterEvent(e), this.disposables); }\n\n\tget onProfileAwareDidInstallExtensions() { return super.onDidInstallExtensions; }\n\toverride get onDidInstallExtensions() {\n\t\treturn Event.filter(\n\t\t\tEvent.map(this.onProfileAwareDidInstallExtensions, results => results.filter(e => this.filterEvent(e)), this.disposables),\n\t\t\tresults => results.length > 0, this.disposables);\n\t}\n\n\tget onProfileAwareUninstallExtension() { return super.onUninstallExtension; }\n\toverride get onUninstallExtension() { return Event.filter(this.onProfileAwareUninstallExtension, e => this.filterEvent(e), this.disposables); }\n\n\tget onProfileAwareDidUninstallExtension() { return super.onDidUninstallExtension; }\n\toverride get onDidUninstallExtension() { return Event.filter(this.onProfileAwareDidUninstallExtension, e => this.filterEvent(e), this.disposables); }\n\n\tprivate readonly _onDidChangeProfile = this._register(new Emitter<{ readonly added: ILocalExtension[]; readonly removed: ILocalExtension[] }>());\n\treadonly onDidChangeProfile = this._onDidChangeProfile.event;\n\n\tconstructor(\n\t\t@IExtensionGalleryService extensionGalleryService: IExtensionGalleryService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@ILogService logService: ILogService,\n\t\t@IWebExtensionsScannerService private readonly webExtensionsScannerService: IWebExtensionsScannerService,\n\t\t@IExtensionManifestPropertiesService private readonly extensionManifestPropertiesService: IExtensionManifestPropertiesService,\n\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n\t\t@IProductService productService: IProductService,\n\t\t@IUserDataProfilesService userDataProfilesService: IUserDataProfilesService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper(extensionGalleryService, telemetryService, uriIdentityService, logService, productService, userDataProfilesService);\n\t\tthis._register(userDataProfileService.onDidChangeCurrentProfile(e => {\n\t\t\tif (!this.uriIdentityService.extUri.isEqual(e.previous.extensionsResource, e.profile.extensionsResource)) {\n\t\t\t\te.join(this.whenProfileChanged(e));\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate filterEvent({ profileLocation, applicationScoped }: { profileLocation?: URI; applicationScoped?: boolean }): boolean {\n\t\tprofileLocation = profileLocation ?? this.userDataProfileService.currentProfile.extensionsResource;\n\t\treturn applicationScoped || this.uriIdentityService.extUri.isEqual(this.userDataProfileService.currentProfile.extensionsResource, profileLocation);\n\t}\n\n\tasync getTargetPlatform(): Promise<TargetPlatform> {\n\t\treturn TargetPlatform.WEB;\n\t}\n\n\toverride async canInstall(gallery: IGalleryExtension): Promise<boolean> {\n\t\tif (await super.canInstall(gallery)) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this.isConfiguredToExecuteOnWeb(gallery)) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tasync getInstalled(type?: ExtensionType, profileLocation?: URI): Promise<ILocalExtension[]> {\n\t\tconst extensions = [];\n\t\tif (type === undefined || type === ExtensionType.System) {\n\t\t\tconst systemExtensions = await this.webExtensionsScannerService.scanSystemExtensions();\n\t\t\textensions.push(...systemExtensions);\n\t\t}\n\t\tif (type === undefined || type === ExtensionType.User) {\n\t\t\tconst userExtensions = await this.webExtensionsScannerService.scanUserExtensions(profileLocation ?? this.userDataProfileService.currentProfile.extensionsResource);\n\t\t\textensions.push(...userExtensions);\n\t\t}\n\t\treturn extensions.map(e => toLocalExtension(e));\n\t}\n\n\tasync install(location: URI, options: InstallOptions = {}): Promise<ILocalExtension> {\n\t\tthis.logService.trace('ExtensionManagementService#install', location.toString());\n\t\tconst manifest = await this.webExtensionsScannerService.scanExtensionManifest(location);\n\t\tif (!manifest) {\n\t\t\tthrow new Error(`Cannot find packageJSON from the location ${location.toString()}`);\n\t\t}\n\t\tconst result = await this.installExtensions([{ manifest, extension: location, options }]);\n\t\tif (result[0]?.local) {\n\t\t\treturn result[0]?.local;\n\t\t}\n\t\tif (result[0]?.error) {\n\t\t\tthrow result[0].error;\n\t\t}\n\t\tthrow toExtensionManagementError(new Error(`Unknown error while installing extension ${getGalleryExtensionId(manifest.publisher, manifest.name)}`));\n\t}\n\n\tinstallFromLocation(location: URI, profileLocation: URI): Promise<ILocalExtension> {\n\t\treturn this.install(location, { profileLocation });\n\t}\n\n\tprotected async copyExtension(extension: ILocalExtension, fromProfileLocation: URI, toProfileLocation: URI, metadata: Partial<Metadata>): Promise<ILocalExtension> {\n\t\tconst target = await this.webExtensionsScannerService.scanExistingExtension(extension.location, extension.type, toProfileLocation);\n\t\tconst source = await this.webExtensionsScannerService.scanExistingExtension(extension.location, extension.type, fromProfileLocation);\n\t\tmetadata = { ...source?.metadata, ...metadata };\n\n\t\tlet scanned;\n\t\tif (target) {\n\t\t\tscanned = await this.webExtensionsScannerService.updateMetadata(extension, { ...target.metadata, ...metadata }, toProfileLocation);\n\t\t} else {\n\t\t\tscanned = await this.webExtensionsScannerService.addExtension(extension.location, metadata, toProfileLocation);\n\t\t}\n\t\treturn toLocalExtension(scanned);\n\t}\n\n\tasync installExtensionsFromProfile(extensions: IExtensionIdentifier[], fromProfileLocation: URI, toProfileLocation: URI): Promise<ILocalExtension[]> {\n\t\tconst result: ILocalExtension[] = [];\n\t\tconst extensionsToInstall = (await this.webExtensionsScannerService.scanUserExtensions(fromProfileLocation))\n\t\t\t.filter(e => extensions.some(id => areSameExtensions(id, e.identifier)));\n\t\tif (extensionsToInstall.length) {\n\t\t\tawait Promise.allSettled(extensionsToInstall.map(async e => {\n\t\t\t\tlet local = await this.installFromLocation(e.location, toProfileLocation);\n\t\t\t\tif (e.metadata) {\n\t\t\t\t\tlocal = await this.updateMetadata(local, e.metadata, fromProfileLocation);\n\t\t\t\t}\n\t\t\t\tresult.push(local);\n\t\t\t}));\n\t\t}\n\t\treturn result;\n\t}\n\n\tasync updateMetadata(local: ILocalExtension, metadata: Partial<Metadata>, profileLocation?: URI): Promise<ILocalExtension> {\n\t\t// unset if false\n\t\tmetadata.isMachineScoped = metadata.isMachineScoped || undefined;\n\t\tmetadata.isBuiltin = metadata.isBuiltin || undefined;\n\t\tmetadata.pinned = metadata.pinned || undefined;\n\t\tconst updatedExtension = await this.webExtensionsScannerService.updateMetadata(local, metadata, profileLocation ?? this.userDataProfileService.currentProfile.extensionsResource);\n\t\tconst updatedLocalExtension = toLocalExtension(updatedExtension);\n\t\tthis._onDidUpdateExtensionMetadata.fire(updatedLocalExtension);\n\t\treturn updatedLocalExtension;\n\t}\n\n\toverride async copyExtensions(fromProfileLocation: URI, toProfileLocation: URI): Promise<void> {\n\t\tawait this.webExtensionsScannerService.copyExtensions(fromProfileLocation, toProfileLocation, e => !e.metadata?.isApplicationScoped);\n\t}\n\n\tprotected override async getCompatibleVersion(extension: IGalleryExtension, sameVersion: boolean, includePreRelease: boolean): Promise<IGalleryExtension | null> {\n\t\tconst compatibleExtension = await super.getCompatibleVersion(extension, sameVersion, includePreRelease);\n\t\tif (compatibleExtension) {\n\t\t\treturn compatibleExtension;\n\t\t}\n\t\tif (this.isConfiguredToExecuteOnWeb(extension)) {\n\t\t\treturn extension;\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate isConfiguredToExecuteOnWeb(gallery: IGalleryExtension): boolean {\n\t\tconst configuredExtensionKind = this.extensionManifestPropertiesService.getUserConfiguredExtensionKind(gallery.identifier);\n\t\treturn !!configuredExtensionKind && configuredExtensionKind.includes('web');\n\t}\n\n\tprotected getCurrentExtensionsManifestLocation(): URI {\n\t\treturn this.userDataProfileService.currentProfile.extensionsResource;\n\t}\n\n\tprotected createInstallExtensionTask(manifest: IExtensionManifest, extension: URI | IGalleryExtension, options: InstallExtensionTaskOptions): IInstallExtensionTask {\n\t\treturn new InstallExtensionTask(manifest, extension, options, this.webExtensionsScannerService, this.userDataProfilesService);\n\t}\n\n\tprotected createUninstallExtensionTask(extension: ILocalExtension, options: UninstallExtensionTaskOptions): IUninstallExtensionTask {\n\t\treturn new UninstallExtensionTask(extension, options, this.webExtensionsScannerService);\n\t}\n\n\tzip(extension: ILocalExtension): Promise<URI> { throw new Error('unsupported'); }\n\tunzip(zipLocation: URI): Promise<IExtensionIdentifier> { throw new Error('unsupported'); }\n\tgetManifest(vsix: URI): Promise<IExtensionManifest> { throw new Error('unsupported'); }\n\tdownload(): Promise<URI> { throw new Error('unsupported'); }\n\treinstallFromGallery(): Promise<ILocalExtension> { throw new Error('unsupported'); }\n\n\tasync cleanUp(): Promise<void> { }\n\n\tprivate async whenProfileChanged(e: DidChangeUserDataProfileEvent): Promise<void> {\n\t\tconst previousProfileLocation = e.previous.extensionsResource;\n\t\tconst currentProfileLocation = e.profile.extensionsResource;\n\t\tif (!previousProfileLocation || !currentProfileLocation) {\n\t\t\tthrow new Error('This should not happen');\n\t\t}\n\t\tconst oldExtensions = await this.webExtensionsScannerService.scanUserExtensions(previousProfileLocation);\n\t\tconst newExtensions = await this.webExtensionsScannerService.scanUserExtensions(currentProfileLocation);\n\t\tconst { added, removed } = delta(oldExtensions, newExtensions, (a, b) => compare(`${ExtensionIdentifier.toKey(a.identifier.id)}@${a.manifest.version}`, `${ExtensionIdentifier.toKey(b.identifier.id)}@${b.manifest.version}`));\n\t\tthis._onDidChangeProfile.fire({ added: added.map(e => toLocalExtension(e)), removed: removed.map(e => toLocalExtension(e)) });\n\t}\n}\n\nfunction toLocalExtension(extension: IExtension): ILocalExtension {\n\tconst metadata = getMetadata(undefined, extension);\n\treturn {\n\t\t...extension,\n\t\tidentifier: { id: extension.identifier.id, uuid: metadata.id ?? extension.identifier.uuid },\n\t\tisMachineScoped: !!metadata.isMachineScoped,\n\t\tisApplicationScoped: !!metadata.isApplicationScoped,\n\t\tpublisherId: metadata.publisherId || null,\n\t\tpublisherDisplayName: metadata.publisherDisplayName || null,\n\t\tinstalledTimestamp: metadata.installedTimestamp,\n\t\tisPreReleaseVersion: !!metadata.isPreReleaseVersion,\n\t\tpreRelease: !!metadata.preRelease,\n\t\ttargetPlatform: TargetPlatform.WEB,\n\t\tupdated: !!metadata.updated,\n\t\tpinned: !!metadata?.pinned,\n\t};\n}\n\nfunction getMetadata(options?: InstallOptions, existingExtension?: IExtension): Metadata {\n\tconst metadata: Metadata = { ...((<IScannedExtension>existingExtension)?.metadata || {}) };\n\tmetadata.isMachineScoped = options?.isMachineScoped || metadata.isMachineScoped;\n\treturn metadata;\n}\n\nclass InstallExtensionTask extends AbstractExtensionTask<ILocalExtension> implements IInstallExtensionTask {\n\n\treadonly identifier: IExtensionIdentifier;\n\treadonly source: URI | IGalleryExtension;\n\n\tprivate _profileLocation = this.options.profileLocation;\n\tget profileLocation() { return this._profileLocation; }\n\n\tprivate _operation = InstallOperation.Install;\n\tget operation() { return isUndefined(this.options.operation) ? this._operation : this.options.operation; }\n\n\tconstructor(\n\t\tmanifest: IExtensionManifest,\n\t\tprivate readonly extension: URI | IGalleryExtension,\n\t\treadonly options: InstallExtensionTaskOptions,\n\t\tprivate readonly webExtensionsScannerService: IWebExtensionsScannerService,\n\t\tprivate readonly userDataProfilesService: IUserDataProfilesService,\n\t) {\n\t\tsuper();\n\t\tthis.identifier = URI.isUri(extension) ? { id: getGalleryExtensionId(manifest.publisher, manifest.name) } : extension.identifier;\n\t\tthis.source = extension;\n\t}\n\n\tprotected async doRun(token: CancellationToken): Promise<ILocalExtension> {\n\t\tconst userExtensions = await this.webExtensionsScannerService.scanUserExtensions(this.options.profileLocation);\n\t\tconst existingExtension = userExtensions.find(e => areSameExtensions(e.identifier, this.identifier));\n\t\tif (existingExtension) {\n\t\t\tthis._operation = InstallOperation.Update;\n\t\t}\n\n\t\tconst metadata = getMetadata(this.options, existingExtension);\n\t\tif (!URI.isUri(this.extension)) {\n\t\t\tmetadata.id = this.extension.identifier.uuid;\n\t\t\tmetadata.publisherDisplayName = this.extension.publisherDisplayName;\n\t\t\tmetadata.publisherId = this.extension.publisherId;\n\t\t\tmetadata.installedTimestamp = Date.now();\n\t\t\tmetadata.isPreReleaseVersion = this.extension.properties.isPreReleaseVersion;\n\t\t\tmetadata.isBuiltin = this.options.isBuiltin || existingExtension?.isBuiltin;\n\t\t\tmetadata.isSystem = existingExtension?.type === ExtensionType.System ? true : undefined;\n\t\t\tmetadata.updated = !!existingExtension;\n\t\t\tmetadata.isApplicationScoped = this.options.isApplicationScoped || metadata.isApplicationScoped;\n\t\t\tmetadata.preRelease = this.extension.properties.isPreReleaseVersion ||\n\t\t\t\t(isBoolean(this.options.installPreReleaseVersion)\n\t\t\t\t\t? this.options.installPreReleaseVersion /* Respect the passed flag */\n\t\t\t\t\t: metadata?.preRelease /* Respect the existing pre-release flag if it was set */);\n\t\t}\n\t\tmetadata.pinned = this.options.installGivenVersion ? true : undefined;\n\n\t\tthis._profileLocation = metadata.isApplicationScoped ? this.userDataProfilesService.defaultProfile.extensionsResource : this.options.profileLocation;\n\t\tconst scannedExtension = URI.isUri(this.extension) ? await this.webExtensionsScannerService.addExtension(this.extension, metadata, this.profileLocation)\n\t\t\t: await this.webExtensionsScannerService.addExtensionFromGallery(this.extension, metadata, this.profileLocation);\n\t\treturn toLocalExtension(scannedExtension);\n\t}\n}\n\nclass UninstallExtensionTask extends AbstractExtensionTask<void> implements IUninstallExtensionTask {\n\n\tconstructor(\n\t\treadonly extension: ILocalExtension,\n\t\tprivate readonly options: UninstallExtensionTaskOptions,\n\t\tprivate readonly webExtensionsScannerService: IWebExtensionsScannerService,\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected doRun(token: CancellationToken): Promise<void> {\n\t\treturn this.webExtensionsScannerService.removeExtension(this.extension, this.options.profileLocation);\n\t}\n}\n"]}