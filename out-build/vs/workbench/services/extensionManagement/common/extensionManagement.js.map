{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/extensionManagement/common/extensionManagement.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAWnF,QAAA,IAAI,GAAsC,IAAA,mBAAG,EAA0F,yBAAG,CAAyB,CAAC;IAWjL,IAAkB,wBAIjB;IAJD,WAAkB,wBAAwB;QACzC,yEAAS,CAAA;QACT,2EAAM,CAAA;QACN,qEAAG,CAAA;IACJ,CAAC,EAJiB,wBAAwB,wCAAxB,wBAAwB,QAIzC;IAEY,QAAA,IAAI,GAAgC,IAAA,mBAAG,EAAgD,kCAAkC,CAAC,CAAC;IAU3H,QAAA,IAAI,GAAc,aAAG,CAAQ,YAAY,CAAC,wEAAwE,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAOnI,QAAA,IAAI,GAAmC,IAAA,mBAAG,EAAmG,YAAI,CAAoC,CAAC;IAenM,IAAkB,eAWjB;IAXD,WAAkB,eAAe;QAChC,iGAA0B,CAAA;QAC1B,2FAAuB,CAAA;QACvB,uFAAqB,CAAA;QACrB,qFAAoB,CAAA;QACpB,iGAA0B,CAAA;QAC1B,uGAA6B,CAAA;QAC7B,6EAAgB,CAAA;QAChB,+EAAiB,CAAA;QACjB,2EAAe,CAAA;QACf,6EAAgB,CAAA;IACjB,CAAC,EAXiB,eAAe,+BAAf,eAAe,QAWhC;IAEY,QAAA,IAAI,GAAmC,IAAA,mBAAG,EAAmD,4BAA4B,CAAC,CAAC;IA8E3H,QAAA,IAAI,GAA2B,IAAA,mBAAG,EAA2C,8BAA8B,CAAC,CAAC","file":"extensionManagement.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { createDecorator, refineServiceDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IExtension, ExtensionType, IExtensionManifest } from 'vs/platform/extensions/common/extensions';\nimport { IExtensionManagementService, IGalleryExtension, ILocalExtension, InstallOptions, InstallExtensionEvent, DidUninstallExtensionEvent, InstallExtensionResult, Metadata, InstallVSIXOptions, UninstallExtensionEvent } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { URI } from 'vs/base/common/uri';\nimport { FileAccess } from 'vs/base/common/network';\n\nexport type DidChangeProfileEvent = { readonly added: ILocalExtension[]; readonly removed: ILocalExtension[] };\n\nexport const IProfileAwareExtensionManagementService = refineServiceDecorator<IExtensionManagementService, IProfileAwareExtensionManagementService>(IExtensionManagementService);\nexport interface IProfileAwareExtensionManagementService extends IExtensionManagementService {\n\treadonly onDidChangeProfile: Event<DidChangeProfileEvent>;\n}\n\nexport interface IExtensionManagementServer {\n\treadonly id: string;\n\treadonly label: string;\n\treadonly extensionManagementService: IProfileAwareExtensionManagementService;\n}\n\nexport const enum ExtensionInstallLocation {\n\tLocal = 1,\n\tRemote,\n\tWeb\n}\n\nexport const IExtensionManagementServerService = createDecorator<IExtensionManagementServerService>('extensionManagementServerService');\nexport interface IExtensionManagementServerService {\n\treadonly _serviceBrand: undefined;\n\treadonly localExtensionManagementServer: IExtensionManagementServer | null;\n\treadonly remoteExtensionManagementServer: IExtensionManagementServer | null;\n\treadonly webExtensionManagementServer: IExtensionManagementServer | null;\n\tgetExtensionManagementServer(extension: IExtension): IExtensionManagementServer | null;\n\tgetExtensionInstallLocation(extension: IExtension): ExtensionInstallLocation | null;\n}\n\nexport const DefaultIconPath = FileAccess.asBrowserUri('vs/workbench/services/extensionManagement/common/media/defaultIcon.png').toString(true);\n\nexport type InstallExtensionOnServerEvent = InstallExtensionEvent & { server: IExtensionManagementServer };\nexport type UninstallExtensionOnServerEvent = UninstallExtensionEvent & { server: IExtensionManagementServer };\nexport type DidUninstallExtensionOnServerEvent = DidUninstallExtensionEvent & { server: IExtensionManagementServer };\nexport type DidChangeProfileForServerEvent = DidChangeProfileEvent & { server: IExtensionManagementServer };\n\nexport const IWorkbenchExtensionManagementService = refineServiceDecorator<IProfileAwareExtensionManagementService, IWorkbenchExtensionManagementService>(IProfileAwareExtensionManagementService);\nexport interface IWorkbenchExtensionManagementService extends IProfileAwareExtensionManagementService {\n\treadonly _serviceBrand: undefined;\n\n\tonInstallExtension: Event<InstallExtensionOnServerEvent>;\n\tonDidInstallExtensions: Event<readonly InstallExtensionResult[]>;\n\tonUninstallExtension: Event<UninstallExtensionOnServerEvent>;\n\tonDidUninstallExtension: Event<DidUninstallExtensionOnServerEvent>;\n\tonDidChangeProfile: Event<DidChangeProfileForServerEvent>;\n\n\tinstallVSIX(location: URI, manifest: IExtensionManifest, installOptions?: InstallVSIXOptions): Promise<ILocalExtension>;\n\tinstallFromLocation(location: URI): Promise<ILocalExtension>;\n\tupdateFromGallery(gallery: IGalleryExtension, extension: ILocalExtension, installOptions?: InstallOptions): Promise<ILocalExtension>;\n}\n\nexport const enum EnablementState {\n\tDisabledByTrustRequirement,\n\tDisabledByExtensionKind,\n\tDisabledByEnvironment,\n\tEnabledByEnvironment,\n\tDisabledByVirtualWorkspace,\n\tDisabledByExtensionDependency,\n\tDisabledGlobally,\n\tDisabledWorkspace,\n\tEnabledGlobally,\n\tEnabledWorkspace\n}\n\nexport const IWorkbenchExtensionEnablementService = createDecorator<IWorkbenchExtensionEnablementService>('extensionEnablementService');\n\nexport interface IWorkbenchExtensionEnablementService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Event to listen on for extension enablement changes\n\t */\n\treadonly onEnablementChanged: Event<readonly IExtension[]>;\n\n\t/**\n\t * Returns the enablement state for the given extension\n\t */\n\tgetEnablementState(extension: IExtension): EnablementState;\n\n\t/**\n\t * Returns the enablement states for the given extensions\n\t * @param extensions list of extensions\n\t * @param workspaceTypeOverrides Workspace type overrides\n\t */\n\tgetEnablementStates(extensions: IExtension[], workspaceTypeOverrides?: { trusted?: boolean }): EnablementState[];\n\n\t/**\n\t * Returns the enablement states for the dependencies of the given extension\n\t */\n\tgetDependenciesEnablementStates(extension: IExtension): [IExtension, EnablementState][];\n\n\t/**\n\t * Returns `true` if the enablement can be changed.\n\t */\n\tcanChangeEnablement(extension: IExtension): boolean;\n\n\t/**\n\t * Returns `true` if the enablement can be changed.\n\t */\n\tcanChangeWorkspaceEnablement(extension: IExtension): boolean;\n\n\t/**\n\t * Returns `true` if the given extension is enabled.\n\t */\n\tisEnabled(extension: IExtension): boolean;\n\n\t/**\n\t * Returns `true` if the given enablement state is enabled enablement state.\n\t */\n\tisEnabledEnablementState(enablementState: EnablementState): boolean;\n\n\t/**\n\t * Returns `true` if the given extension identifier is disabled globally.\n\t * Extensions can be disabled globally or in workspace or both.\n\t * If an extension is disabled in both then enablement state shows only workspace.\n\t * This will\n\t */\n\tisDisabledGlobally(extension: IExtension): boolean;\n\n\t/**\n\t * Enable or disable the given extension.\n\t * if `workspace` is `true` then enablement is done for workspace, otherwise globally.\n\t *\n\t * Returns a promise that resolves to boolean value.\n\t * if resolves to `true` then requires restart for the change to take effect.\n\t *\n\t * Throws error if enablement is requested for workspace and there is no workspace\n\t */\n\tsetEnablement(extensions: IExtension[], state: EnablementState): Promise<boolean[]>;\n\n\t/**\n\t * Updates the enablement state of the extensions when workspace trust changes.\n\t */\n\tupdateExtensionsEnablementsWhenWorkspaceTrustChanges(): Promise<void>;\n}\n\nexport interface IScannedExtension extends IExtension {\n\treadonly metadata?: Metadata;\n}\n\nexport type ScanOptions = { readonly skipInvalidExtensions?: boolean };\n\nexport const IWebExtensionsScannerService = createDecorator<IWebExtensionsScannerService>('IWebExtensionsScannerService');\nexport interface IWebExtensionsScannerService {\n\treadonly _serviceBrand: undefined;\n\n\tscanSystemExtensions(): Promise<IExtension[]>;\n\tscanUserExtensions(profileLocation: URI, options?: ScanOptions): Promise<IScannedExtension[]>;\n\tscanExtensionsUnderDevelopment(): Promise<IExtension[]>;\n\tscanExistingExtension(extensionLocation: URI, extensionType: ExtensionType, profileLocation: URI): Promise<IScannedExtension | null>;\n\n\taddExtension(location: URI, metadata: Metadata, profileLocation: URI): Promise<IScannedExtension>;\n\taddExtensionFromGallery(galleryExtension: IGalleryExtension, metadata: Metadata, profileLocation: URI): Promise<IScannedExtension>;\n\tremoveExtension(extension: IScannedExtension, profileLocation: URI): Promise<void>;\n\tcopyExtensions(fromProfileLocation: URI, toProfileLocation: URI, filter: (extension: IScannedExtension) => boolean): Promise<void>;\n\n\tupdateMetadata(extension: IScannedExtension, metaData: Partial<Metadata>, profileLocation: URI): Promise<IScannedExtension>;\n\n\tscanExtensionManifest(extensionLocation: URI): Promise<IExtensionManifest | null>;\n}\n"]}