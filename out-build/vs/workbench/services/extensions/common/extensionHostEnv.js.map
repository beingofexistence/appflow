{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/extensions/common/extensionHostEnv.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAIhG,IAAkB,qBAIjB;IAJD,WAAkB,qBAAqB;QACtC,+DAAO,CAAA;QACP,qEAAU,CAAA;QACV,+EAAe,CAAA;IAChB,CAAC,EAJiB,qBAAqB,qCAArB,qBAAqB,QAItC;IAED;;OAEG;IACH,MAAa,GAAG;iBACD,YAAO,GAAG,yBAAH,AAA4B,CAAC;QAIlD,YACiB,QAAgB;YAAhB,aAAQ,GAAR,QAAQ,CAAQ;YAHjB,SAAI,qCAA6B;QAI7C,CAAC;QAEE,SAAS,CAAC,GAAwB;YACxC,GAAG,CAAC,GAAG,CAAkB,OAAO,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC;QACnD,CAAC;;IAXF,kBAYC;IAED;;OAEG;IACH,MAAa,GAAG;QAAhB;YAGiB,SAAI,wCAAgC;QAKrD,CAAC;iBAPc,YAAO,GAAG,iCAAH,AAAoC,CAAC;QAInD,SAAS,CAAC,GAAwB;YACxC,GAAG,CAAC,GAAG,CAAqB,OAAO,CAAC,GAAG,GAAG,CAAC;QAC5C,CAAC;;IAPF,kBAQC;IAED;;OAEG;IACH,MAAa,GAAG;QAAhB;YAGiB,SAAI,6CAAqC;QAK1D,CAAC;iBAPc,YAAO,GAAG,+BAAH,AAAkC,CAAC;QAIjD,SAAS,CAAC,GAAwB;YACxC,GAAG,CAAC,GAAG,CAA0B,OAAO,CAAC,GAAG,GAAG,CAAC;QACjD,CAAC;;IAPF,kBAQC;IAID,SAAS,KAAK,CAAC,GAAwB;QACtC,OAAO,GAAG,CAAC,GAAG,CAAkB,OAAO,CAAC,CAAC;QACzC,OAAO,GAAG,CAAC,GAAG,CAAqB,OAAO,CAAC,CAAC;QAC5C,OAAO,GAAG,CAAC,GAAG,CAA0B,OAAO,CAAC,CAAC;IAClD,CAAC;IAED;;OAEG;IACH,SAAgB,GAAG,CAAoB,UAA6B,EAAE,GAAwB;QAC7F,6EAA6E;QAC7E,KAAK,CAAC,GAAG,CAAC,CAAC;QACX,UAAU,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC;IAJD,kBAIC;IAED;;OAEG;IACH,SAAgB,GAAG,CAAmB,GAAwB;QAC7D,IAAI,GAAG,CAAC,GAAG,CAAkB,OAAO,CAAC,EAAE;YACtC,OAAO,cAAc,CAAC,GAAG,EAAE,IAAI,GAAG,CAAkB,GAAG,CAAC,GAAG,CAAkB,OAAO,CAAE,CAAC,CAAC,CAAC;SACzF;QACD,IAAI,GAAG,CAAC,GAAG,CAAqB,OAAO,CAAC,EAAE;YACzC,OAAO,cAAc,CAAC,GAAG,EAAE,IAAI,GAAG,EAAsB,CAAC,CAAC;SAC1D;QACD,IAAI,GAAG,CAAC,GAAG,CAA0B,OAAO,CAAC,EAAE;YAC9C,OAAO,cAAc,CAAC,GAAG,EAAE,IAAI,GAAG,EAA2B,CAAC,CAAC;SAC/D;QACD,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;IACtE,CAAC;IAXD,kBAWC;IAED,SAAS,cAAc,CAAC,GAAwB,EAAE,MAAyB;QAC1E,KAAK,CAAC,GAAG,CAAC,CAAC;QACX,OAAO,MAAM,CAAC;IACf,CAAC","file":"extensionHostEnv.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IProcessEnvironment } from 'vs/base/common/platform';\n\nexport const enum ExtHostConnectionType {\n\tIPC = 1,\n\tSocket = 2,\n\tMessagePort = 3\n}\n\n/**\n * The extension host will connect via named pipe / domain socket to its renderer.\n */\nexport class IPCExtHostConnection {\n\tpublic static ENV_KEY = 'VSCODE_EXTHOST_IPC_HOOK';\n\n\tpublic readonly type = ExtHostConnectionType.IPC;\n\n\tconstructor(\n\t\tpublic readonly pipeName: string\n\t) { }\n\n\tpublic serialize(env: IProcessEnvironment): void {\n\t\tenv[IPCExtHostConnection.ENV_KEY] = this.pipeName;\n\t}\n}\n\n/**\n * The extension host will receive via nodejs IPC the socket to its renderer.\n */\nexport class SocketExtHostConnection {\n\tpublic static ENV_KEY = 'VSCODE_EXTHOST_WILL_SEND_SOCKET';\n\n\tpublic readonly type = ExtHostConnectionType.Socket;\n\n\tpublic serialize(env: IProcessEnvironment): void {\n\t\tenv[SocketExtHostConnection.ENV_KEY] = '1';\n\t}\n}\n\n/**\n * The extension host will receive via nodejs IPC the MessagePort to its renderer.\n */\nexport class MessagePortExtHostConnection {\n\tpublic static ENV_KEY = 'VSCODE_WILL_SEND_MESSAGE_PORT';\n\n\tpublic readonly type = ExtHostConnectionType.MessagePort;\n\n\tpublic serialize(env: IProcessEnvironment): void {\n\t\tenv[MessagePortExtHostConnection.ENV_KEY] = '1';\n\t}\n}\n\nexport type ExtHostConnection = IPCExtHostConnection | SocketExtHostConnection | MessagePortExtHostConnection;\n\nfunction clean(env: IProcessEnvironment): void {\n\tdelete env[IPCExtHostConnection.ENV_KEY];\n\tdelete env[SocketExtHostConnection.ENV_KEY];\n\tdelete env[MessagePortExtHostConnection.ENV_KEY];\n}\n\n/**\n * Write `connection` into `env` and clean up `env`.\n */\nexport function writeExtHostConnection(connection: ExtHostConnection, env: IProcessEnvironment): void {\n\t// Avoid having two different keys that might introduce amiguity or problems.\n\tclean(env);\n\tconnection.serialize(env);\n}\n\n/**\n * Read `connection` from `env` and clean up `env`.\n */\nexport function readExtHostConnection(env: IProcessEnvironment): ExtHostConnection {\n\tif (env[IPCExtHostConnection.ENV_KEY]) {\n\t\treturn cleanAndReturn(env, new IPCExtHostConnection(env[IPCExtHostConnection.ENV_KEY]!));\n\t}\n\tif (env[SocketExtHostConnection.ENV_KEY]) {\n\t\treturn cleanAndReturn(env, new SocketExtHostConnection());\n\t}\n\tif (env[MessagePortExtHostConnection.ENV_KEY]) {\n\t\treturn cleanAndReturn(env, new MessagePortExtHostConnection());\n\t}\n\tthrow new Error(`No connection information defined in environment!`);\n}\n\nfunction cleanAndReturn(env: IProcessEnvironment, result: ExtHostConnection): ExtHostConnection {\n\tclean(env);\n\treturn result;\n}\n"]}