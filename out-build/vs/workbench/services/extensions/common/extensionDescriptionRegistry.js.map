{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/extensions/common/extensionDescriptionRegistry.ts"],"names":[],"mappings":"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","file":"extensionDescriptionRegistry.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ExtensionIdentifier, ExtensionIdentifierMap, ExtensionIdentifierSet, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { Emitter } from 'vs/base/common/event';\nimport * as path from 'vs/base/common/path';\nimport { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\n\nexport class DeltaExtensionsResult {\n\tconstructor(\n\t\tpublic readonly versionId: number,\n\t\tpublic readonly removedDueToLooping: IExtensionDescription[]\n\t) { }\n}\n\nexport interface IReadOnlyExtensionDescriptionRegistry {\n\tcontainsActivationEvent(activationEvent: string): boolean;\n\tcontainsExtension(extensionId: ExtensionIdentifier): boolean;\n\tgetExtensionDescriptionsForActivationEvent(activationEvent: string): IExtensionDescription[];\n\tgetAllExtensionDescriptions(): IExtensionDescription[];\n\tgetExtensionDescription(extensionId: ExtensionIdentifier | string): IExtensionDescription | undefined;\n\tgetExtensionDescriptionByUUID(uuid: string): IExtensionDescription | undefined;\n\tgetExtensionDescriptionByIdOrUUID(extensionId: ExtensionIdentifier | string, uuid: string | undefined): IExtensionDescription | undefined;\n}\n\nexport class ExtensionDescriptionRegistry implements IReadOnlyExtensionDescriptionRegistry {\n\n\tpublic static isHostExtension(extensionId: ExtensionIdentifier | string, myRegistry: ExtensionDescriptionRegistry, globalRegistry: ExtensionDescriptionRegistry): boolean {\n\t\tif (myRegistry.getExtensionDescription(extensionId)) {\n\t\t\t// I have this extension\n\t\t\treturn false;\n\t\t}\n\t\tconst extensionDescription = globalRegistry.getExtensionDescription(extensionId);\n\t\tif (!extensionDescription) {\n\t\t\t// unknown extension\n\t\t\treturn false;\n\t\t}\n\t\tif ((extensionDescription.main || extensionDescription.browser) && extensionDescription.api === 'none') {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate readonly _onDidChange = new Emitter<void>();\n\tpublic readonly onDidChange = this._onDidChange.event;\n\n\tprivate _versionId: number = 0;\n\tprivate _extensionDescriptions: IExtensionDescription[];\n\tprivate _extensionsMap!: ExtensionIdentifierMap<IExtensionDescription>;\n\tprivate _extensionsArr!: IExtensionDescription[];\n\tprivate _activationMap!: Map<string, IExtensionDescription[]>;\n\n\tconstructor(\n\t\tprivate readonly _activationEventsReader: IActivationEventsReader,\n\t\textensionDescriptions: IExtensionDescription[]\n\t) {\n\t\tthis._extensionDescriptions = extensionDescriptions;\n\t\tthis._initialize();\n\t}\n\n\tprivate _initialize(): void {\n\t\t// Ensure extensions are stored in the order: builtin, user, under development\n\t\tthis._extensionDescriptions.sort(extensionCmp);\n\n\t\tthis._extensionsMap = new ExtensionIdentifierMap<IExtensionDescription>();\n\t\tthis._extensionsArr = [];\n\t\tthis._activationMap = new Map<string, IExtensionDescription[]>();\n\n\t\tfor (const extensionDescription of this._extensionDescriptions) {\n\t\t\tif (this._extensionsMap.has(extensionDescription.identifier)) {\n\t\t\t\t// No overwriting allowed!\n\t\t\t\tconsole.error('Extension `' + extensionDescription.identifier.value + '` is already registered');\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis._extensionsMap.set(extensionDescription.identifier, extensionDescription);\n\t\t\tthis._extensionsArr.push(extensionDescription);\n\n\t\t\tconst activationEvents = this._activationEventsReader.readActivationEvents(extensionDescription);\n\t\t\tif (Array.isArray(activationEvents)) {\n\t\t\t\tfor (let activationEvent of activationEvents) {\n\t\t\t\t\t// TODO@joao: there's no easy way to contribute this\n\t\t\t\t\tif (activationEvent === 'onUri') {\n\t\t\t\t\t\tactivationEvent = `onUri:${ExtensionIdentifier.toKey(extensionDescription.identifier)}`;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!this._activationMap.has(activationEvent)) {\n\t\t\t\t\t\tthis._activationMap.set(activationEvent, []);\n\t\t\t\t\t}\n\t\t\t\t\tthis._activationMap.get(activationEvent)!.push(extensionDescription);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic set(extensionDescriptions: IExtensionDescription[]): { versionId: number } {\n\t\tthis._extensionDescriptions = extensionDescriptions;\n\t\tthis._initialize();\n\t\tthis._versionId++;\n\t\tthis._onDidChange.fire(undefined);\n\t\treturn {\n\t\t\tversionId: this._versionId\n\t\t};\n\t}\n\n\tpublic deltaExtensions(toAdd: IExtensionDescription[], toRemove: ExtensionIdentifier[]): DeltaExtensionsResult {\n\t\t// It is possible that an extension is removed, only to be added again at a different version\n\t\t// so we will first handle removals\n\t\tthis._extensionDescriptions = removeExtensions(this._extensionDescriptions, toRemove);\n\n\t\t// Then, handle the extensions to add\n\t\tthis._extensionDescriptions = this._extensionDescriptions.concat(toAdd);\n\n\t\t// Immediately remove looping extensions!\n\t\tconst looping = ExtensionDescriptionRegistry._findLoopingExtensions(this._extensionDescriptions);\n\t\tthis._extensionDescriptions = removeExtensions(this._extensionDescriptions, looping.map(ext => ext.identifier));\n\n\t\tthis._initialize();\n\t\tthis._versionId++;\n\t\tthis._onDidChange.fire(undefined);\n\t\treturn new DeltaExtensionsResult(this._versionId, looping);\n\t}\n\n\tprivate static _findLoopingExtensions(extensionDescriptions: IExtensionDescription[]): IExtensionDescription[] {\n\t\tconst G = new class {\n\n\t\t\tprivate _arcs = new Map<string, string[]>();\n\t\t\tprivate _nodesSet = new Set<string>();\n\t\t\tprivate _nodesArr: string[] = [];\n\n\t\t\taddNode(id: string): void {\n\t\t\t\tif (!this._nodesSet.has(id)) {\n\t\t\t\t\tthis._nodesSet.add(id);\n\t\t\t\t\tthis._nodesArr.push(id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\taddArc(from: string, to: string): void {\n\t\t\t\tthis.addNode(from);\n\t\t\t\tthis.addNode(to);\n\t\t\t\tif (this._arcs.has(from)) {\n\t\t\t\t\tthis._arcs.get(from)!.push(to);\n\t\t\t\t} else {\n\t\t\t\t\tthis._arcs.set(from, [to]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tgetArcs(id: string): string[] {\n\t\t\t\tif (this._arcs.has(id)) {\n\t\t\t\t\treturn this._arcs.get(id)!;\n\t\t\t\t}\n\t\t\t\treturn [];\n\t\t\t}\n\n\t\t\thasOnlyGoodArcs(id: string, good: Set<string>): boolean {\n\t\t\t\tconst dependencies = G.getArcs(id);\n\t\t\t\tfor (let i = 0; i < dependencies.length; i++) {\n\t\t\t\t\tif (!good.has(dependencies[i])) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tgetNodes(): string[] {\n\t\t\t\treturn this._nodesArr;\n\t\t\t}\n\t\t};\n\n\t\tconst descs = new ExtensionIdentifierMap<IExtensionDescription>();\n\t\tfor (const extensionDescription of extensionDescriptions) {\n\t\t\tdescs.set(extensionDescription.identifier, extensionDescription);\n\t\t\tif (extensionDescription.extensionDependencies) {\n\t\t\t\tfor (const depId of extensionDescription.extensionDependencies) {\n\t\t\t\t\tG.addArc(ExtensionIdentifier.toKey(extensionDescription.identifier), ExtensionIdentifier.toKey(depId));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// initialize with all extensions with no dependencies.\n\t\tconst good = new Set<string>();\n\t\tG.getNodes().filter(id => G.getArcs(id).length === 0).forEach(id => good.add(id));\n\n\t\t// all other extensions will be processed below.\n\t\tconst nodes = G.getNodes().filter(id => !good.has(id));\n\n\t\tlet madeProgress: boolean;\n\t\tdo {\n\t\t\tmadeProgress = false;\n\n\t\t\t// find one extension which has only good deps\n\t\t\tfor (let i = 0; i < nodes.length; i++) {\n\t\t\t\tconst id = nodes[i];\n\n\t\t\t\tif (G.hasOnlyGoodArcs(id, good)) {\n\t\t\t\t\tnodes.splice(i, 1);\n\t\t\t\t\ti--;\n\t\t\t\t\tgood.add(id);\n\t\t\t\t\tmadeProgress = true;\n\t\t\t\t}\n\t\t\t}\n\t\t} while (madeProgress);\n\n\t\t// The remaining nodes are bad and have loops\n\t\treturn nodes.map(id => descs.get(id)!);\n\t}\n\n\tpublic containsActivationEvent(activationEvent: string): boolean {\n\t\treturn this._activationMap.has(activationEvent);\n\t}\n\n\tpublic containsExtension(extensionId: ExtensionIdentifier): boolean {\n\t\treturn this._extensionsMap.has(extensionId);\n\t}\n\n\tpublic getExtensionDescriptionsForActivationEvent(activationEvent: string): IExtensionDescription[] {\n\t\tconst extensions = this._activationMap.get(activationEvent);\n\t\treturn extensions ? extensions.slice(0) : [];\n\t}\n\n\tpublic getAllExtensionDescriptions(): IExtensionDescription[] {\n\t\treturn this._extensionsArr.slice(0);\n\t}\n\n\tpublic getSnapshot(): ExtensionDescriptionRegistrySnapshot {\n\t\treturn new ExtensionDescriptionRegistrySnapshot(\n\t\t\tthis._versionId,\n\t\t\tthis.getAllExtensionDescriptions()\n\t\t);\n\t}\n\n\tpublic getExtensionDescription(extensionId: ExtensionIdentifier | string): IExtensionDescription | undefined {\n\t\tconst extension = this._extensionsMap.get(extensionId);\n\t\treturn extension ? extension : undefined;\n\t}\n\n\tpublic getExtensionDescriptionByUUID(uuid: string): IExtensionDescription | undefined {\n\t\tfor (const extensionDescription of this._extensionsArr) {\n\t\t\tif (extensionDescription.uuid === uuid) {\n\t\t\t\treturn extensionDescription;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic getExtensionDescriptionByIdOrUUID(extensionId: ExtensionIdentifier | string, uuid: string | undefined): IExtensionDescription | undefined {\n\t\treturn (\n\t\t\tthis.getExtensionDescription(extensionId)\n\t\t\t?? (uuid ? this.getExtensionDescriptionByUUID(uuid) : undefined)\n\t\t);\n\t}\n}\n\nexport class ExtensionDescriptionRegistrySnapshot {\n\tconstructor(\n\t\tpublic readonly versionId: number,\n\t\tpublic readonly extensions: readonly IExtensionDescription[]\n\t) { }\n}\n\nexport interface IActivationEventsReader {\n\treadActivationEvents(extensionDescription: IExtensionDescription): string[] | undefined;\n}\n\nexport const basicActivationEventsReader: IActivationEventsReader = {\n\treadActivationEvents: (extensionDescription: IExtensionDescription): string[] | undefined => {\n\t\treturn extensionDescription.activationEvents;\n\t}\n};\n\nexport class LockableExtensionDescriptionRegistry implements IReadOnlyExtensionDescriptionRegistry {\n\n\tprivate readonly _actual: ExtensionDescriptionRegistry;\n\tprivate readonly _lock = new Lock();\n\n\tconstructor(activationEventsReader: IActivationEventsReader) {\n\t\tthis._actual = new ExtensionDescriptionRegistry(activationEventsReader, []);\n\t}\n\n\tpublic async acquireLock(customerName: string): Promise<ExtensionDescriptionRegistryLock> {\n\t\tconst lock = await this._lock.acquire(customerName);\n\t\treturn new ExtensionDescriptionRegistryLock(this, lock);\n\t}\n\n\tpublic deltaExtensions(acquiredLock: ExtensionDescriptionRegistryLock, toAdd: IExtensionDescription[], toRemove: ExtensionIdentifier[]): DeltaExtensionsResult {\n\t\tif (!acquiredLock.isAcquiredFor(this)) {\n\t\t\tthrow new Error('Lock is not held');\n\t\t}\n\t\treturn this._actual.deltaExtensions(toAdd, toRemove);\n\t}\n\n\tpublic containsActivationEvent(activationEvent: string): boolean {\n\t\treturn this._actual.containsActivationEvent(activationEvent);\n\t}\n\tpublic containsExtension(extensionId: ExtensionIdentifier): boolean {\n\t\treturn this._actual.containsExtension(extensionId);\n\t}\n\tpublic getExtensionDescriptionsForActivationEvent(activationEvent: string): IExtensionDescription[] {\n\t\treturn this._actual.getExtensionDescriptionsForActivationEvent(activationEvent);\n\t}\n\tpublic getAllExtensionDescriptions(): IExtensionDescription[] {\n\t\treturn this._actual.getAllExtensionDescriptions();\n\t}\n\tpublic getSnapshot(): ExtensionDescriptionRegistrySnapshot {\n\t\treturn this._actual.getSnapshot();\n\t}\n\tpublic getExtensionDescription(extensionId: ExtensionIdentifier | string): IExtensionDescription | undefined {\n\t\treturn this._actual.getExtensionDescription(extensionId);\n\t}\n\tpublic getExtensionDescriptionByUUID(uuid: string): IExtensionDescription | undefined {\n\t\treturn this._actual.getExtensionDescriptionByUUID(uuid);\n\t}\n\tpublic getExtensionDescriptionByIdOrUUID(extensionId: ExtensionIdentifier | string, uuid: string | undefined): IExtensionDescription | undefined {\n\t\treturn this._actual.getExtensionDescriptionByIdOrUUID(extensionId, uuid);\n\t}\n}\n\nexport class ExtensionDescriptionRegistryLock extends Disposable {\n\n\tprivate _isDisposed = false;\n\n\tconstructor(\n\t\tprivate readonly _registry: LockableExtensionDescriptionRegistry,\n\t\tlock: IDisposable\n\t) {\n\t\tsuper();\n\t\tthis._register(lock);\n\t}\n\n\tpublic isAcquiredFor(registry: LockableExtensionDescriptionRegistry): boolean {\n\t\treturn !this._isDisposed && this._registry === registry;\n\t}\n}\n\nclass LockCustomer {\n\tpublic readonly promise: Promise<IDisposable>;\n\tprivate _resolve!: (value: IDisposable) => void;\n\n\tconstructor(\n\t\tpublic readonly name: string\n\t) {\n\t\tthis.promise = new Promise<IDisposable>((resolve, reject) => {\n\t\t\tthis._resolve = resolve;\n\t\t});\n\t}\n\n\tresolve(value: IDisposable): void {\n\t\tthis._resolve(value);\n\t}\n}\n\nclass Lock {\n\tprivate readonly _pendingCustomers: LockCustomer[] = [];\n\tprivate _isLocked = false;\n\n\tpublic async acquire(customerName: string): Promise<IDisposable> {\n\t\tconst customer = new LockCustomer(customerName);\n\t\tthis._pendingCustomers.push(customer);\n\t\tthis._advance();\n\t\treturn customer.promise;\n\t}\n\n\tprivate _advance(): void {\n\t\tif (this._isLocked) {\n\t\t\t// cannot advance yet\n\t\t\treturn;\n\t\t}\n\t\tif (this._pendingCustomers.length === 0) {\n\t\t\t// no more waiting customers\n\t\t\treturn;\n\t\t}\n\n\t\tconst customer = this._pendingCustomers.shift()!;\n\n\t\tthis._isLocked = true;\n\t\tlet customerHoldsLock = true;\n\n\t\tconst logLongRunningCustomerTimeout = setTimeout(() => {\n\t\t\tif (customerHoldsLock) {\n\t\t\t\tconsole.warn(`The customer named ${customer.name} has been holding on to the lock for 30s. This might be a problem.`);\n\t\t\t}\n\t\t}, 30 * 1000 /* 30 seconds */);\n\n\t\tconst releaseLock = () => {\n\t\t\tif (!customerHoldsLock) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tclearTimeout(logLongRunningCustomerTimeout);\n\t\t\tcustomerHoldsLock = false;\n\t\t\tthis._isLocked = false;\n\t\t\tthis._advance();\n\t\t};\n\n\t\tcustomer.resolve(toDisposable(releaseLock));\n\t}\n}\n\nconst enum SortBucket {\n\tBuiltin = 0,\n\tUser = 1,\n\tDev = 2\n}\n\n/**\n * Ensure that:\n * - first are builtin extensions\n * - second are user extensions\n * - third are extensions under development\n *\n * In each bucket, extensions must be sorted alphabetically by their folder name.\n */\nfunction extensionCmp(a: IExtensionDescription, b: IExtensionDescription): number {\n\tconst aSortBucket = (a.isBuiltin ? SortBucket.Builtin : a.isUnderDevelopment ? SortBucket.Dev : SortBucket.User);\n\tconst bSortBucket = (b.isBuiltin ? SortBucket.Builtin : b.isUnderDevelopment ? SortBucket.Dev : SortBucket.User);\n\tif (aSortBucket !== bSortBucket) {\n\t\treturn aSortBucket - bSortBucket;\n\t}\n\tconst aLastSegment = path.posix.basename(a.extensionLocation.path);\n\tconst bLastSegment = path.posix.basename(b.extensionLocation.path);\n\tif (aLastSegment < bLastSegment) {\n\t\treturn -1;\n\t}\n\tif (aLastSegment > bLastSegment) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nfunction removeExtensions(arr: IExtensionDescription[], toRemove: ExtensionIdentifier[]): IExtensionDescription[] {\n\tconst toRemoveSet = new ExtensionIdentifierSet(toRemove);\n\treturn arr.filter(extension => !toRemoveSet.has(extension.identifier));\n}\n"]}