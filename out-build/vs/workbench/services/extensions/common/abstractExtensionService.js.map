{"version":3,"sources":["vs/workbench/services/extensions/common/abstractExtensionService.ts"],"names":[],"mappings":"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","file":"abstractExtensionService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Barrier } from 'vs/base/common/async';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport * as perf from 'vs/base/common/performance';\nimport { isCI } from 'vs/base/common/platform';\nimport { isEqualOrParent } from 'vs/base/common/resources';\nimport { StopWatch } from 'vs/base/common/stopwatch';\nimport { URI } from 'vs/base/common/uri';\nimport * as nls from 'vs/nls';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { InstallOperation } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { ImplicitActivationEvents } from 'vs/platform/extensionManagement/common/implicitActivationEvents';\nimport { ExtensionIdentifier, ExtensionIdentifierMap, IExtension, IExtensionContributions, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { handleVetos } from 'vs/platform/lifecycle/common/lifecycle';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IRemoteAuthorityResolverService, RemoteAuthorityResolverError, RemoteAuthorityResolverErrorCode, ResolverResult, getRemoteAuthorityPrefix } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { IRemoteExtensionsScannerService } from 'vs/platform/remote/common/remoteExtensionsScanner';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IWorkbenchExtensionEnablementService, IWorkbenchExtensionManagementService } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { ExtensionDescriptionRegistryLock, ExtensionDescriptionRegistrySnapshot, IActivationEventsReader, LockableExtensionDescriptionRegistry } from 'vs/workbench/services/extensions/common/extensionDescriptionRegistry';\nimport { parseExtensionDevOptions } from 'vs/workbench/services/extensions/common/extensionDevOptions';\nimport { ExtensionHostKind, ExtensionRunningPreference, IExtensionHostKindPicker, extensionHostKindToString } from 'vs/workbench/services/extensions/common/extensionHostKind';\nimport { IExtensionHostManager, createExtensionHostManager } from 'vs/workbench/services/extensions/common/extensionHostManager';\nimport { IResolveAuthorityErrorResult } from 'vs/workbench/services/extensions/common/extensionHostProxy';\nimport { IExtensionManifestPropertiesService } from 'vs/workbench/services/extensions/common/extensionManifestPropertiesService';\nimport { ExtensionRunningLocation, LocalProcessRunningLocation, LocalWebWorkerRunningLocation, RemoteRunningLocation } from 'vs/workbench/services/extensions/common/extensionRunningLocation';\nimport { ExtensionRunningLocationTracker, filterExtensionIdentifiers } from 'vs/workbench/services/extensions/common/extensionRunningLocationTracker';\nimport { ActivationKind, ActivationTimes, ExtensionActivationReason, ExtensionHostStartup, ExtensionPointContribution, IExtensionHost, IExtensionService, IExtensionsStatus, IInternalExtensionService, IMessage, IResponsiveStateChangeEvent, IWillActivateEvent, WillStopExtensionHostsEvent, toExtension } from 'vs/workbench/services/extensions/common/extensions';\nimport { ExtensionsProposedApi } from 'vs/workbench/services/extensions/common/extensionsProposedApi';\nimport { ExtensionMessageCollector, ExtensionPoint, ExtensionsRegistry, IExtensionPoint, IExtensionPointUser } from 'vs/workbench/services/extensions/common/extensionsRegistry';\nimport { ResponsiveState } from 'vs/workbench/services/extensions/common/rpcProtocol';\nimport { IExtensionActivationHost as IWorkspaceContainsActivationHost, checkActivateWorkspaceContainsExtension, checkGlobFileExists } from 'vs/workbench/services/extensions/common/workspaceContains';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IExtensionHostExitInfo, IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\n\nconst hasOwnProperty = Object.hasOwnProperty;\nconst NO_OP_VOID_PROMISE = Promise.resolve<void>(undefined);\n\nexport abstract class AbstractExtensionService extends Disposable implements IExtensionService {\n\n\tpublic _serviceBrand: undefined;\n\n\tprivate readonly _onDidRegisterExtensions = this._register(new Emitter<void>());\n\tpublic readonly onDidRegisterExtensions = this._onDidRegisterExtensions.event;\n\n\tprivate readonly _onDidChangeExtensionsStatus = this._register(new Emitter<ExtensionIdentifier[]>());\n\tpublic readonly onDidChangeExtensionsStatus = this._onDidChangeExtensionsStatus.event;\n\n\tprivate readonly _onDidChangeExtensions = this._register(new Emitter<{ readonly added: ReadonlyArray<IExtensionDescription>; readonly removed: ReadonlyArray<IExtensionDescription> }>({ leakWarningThreshold: 400 }));\n\tpublic readonly onDidChangeExtensions = this._onDidChangeExtensions.event;\n\n\tprivate readonly _onWillActivateByEvent = this._register(new Emitter<IWillActivateEvent>());\n\tpublic readonly onWillActivateByEvent = this._onWillActivateByEvent.event;\n\n\tprivate readonly _onDidChangeResponsiveChange = this._register(new Emitter<IResponsiveStateChangeEvent>());\n\tpublic readonly onDidChangeResponsiveChange = this._onDidChangeResponsiveChange.event;\n\n\tprivate readonly _onWillStop = this._register(new Emitter<WillStopExtensionHostsEvent>());\n\tpublic readonly onWillStop = this._onWillStop.event;\n\n\tprivate readonly _activationEventReader = new ImplicitActivationAwareReader();\n\tprivate readonly _registry = new LockableExtensionDescriptionRegistry(this._activationEventReader);\n\tprivate readonly _installedExtensionsReady = new Barrier();\n\tprivate readonly _extensionStatus = new ExtensionIdentifierMap<ExtensionStatus>();\n\tprivate readonly _allRequestedActivateEvents = new Set<string>();\n\tprivate readonly _runningLocations: ExtensionRunningLocationTracker;\n\tprivate readonly _remoteCrashTracker = new ExtensionHostCrashTracker();\n\n\tprivate _deltaExtensionsQueue: DeltaExtensionsQueueItem[] = [];\n\tprivate _inHandleDeltaExtensions = false;\n\n\tprivate _extensionHostManagers: IExtensionHostManager[] = [];\n\n\tprivate _resolveAuthorityAttempt: number = 0;\n\n\tconstructor(\n\t\tprivate readonly _extensionsProposedApi: ExtensionsProposedApi,\n\t\tprivate readonly _extensionHostFactory: IExtensionHostFactory,\n\t\tprivate readonly _extensionHostKindPicker: IExtensionHostKindPicker,\n\t\t@IInstantiationService protected readonly _instantiationService: IInstantiationService,\n\t\t@INotificationService protected readonly _notificationService: INotificationService,\n\t\t@IWorkbenchEnvironmentService protected readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ITelemetryService protected readonly _telemetryService: ITelemetryService,\n\t\t@IWorkbenchExtensionEnablementService protected readonly _extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@IFileService protected readonly _fileService: IFileService,\n\t\t@IProductService protected readonly _productService: IProductService,\n\t\t@IWorkbenchExtensionManagementService protected readonly _extensionManagementService: IWorkbenchExtensionManagementService,\n\t\t@IWorkspaceContextService private readonly _contextService: IWorkspaceContextService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IExtensionManifestPropertiesService private readonly _extensionManifestPropertiesService: IExtensionManifestPropertiesService,\n\t\t@ILogService protected readonly _logService: ILogService,\n\t\t@IRemoteAgentService protected readonly _remoteAgentService: IRemoteAgentService,\n\t\t@IRemoteExtensionsScannerService protected readonly _remoteExtensionsScannerService: IRemoteExtensionsScannerService,\n\t\t@ILifecycleService private readonly _lifecycleService: ILifecycleService,\n\t\t@IRemoteAuthorityResolverService protected readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t) {\n\t\tsuper();\n\n\t\t// help the file service to activate providers by activating extensions by file system event\n\t\tthis._register(this._fileService.onWillActivateFileSystemProvider(e => {\n\t\t\tif (e.scheme !== Schemas.vscodeRemote) {\n\t\t\t\te.join(this.activateByEvent(`onFileSystem:${e.scheme}`));\n\t\t\t}\n\t\t}));\n\n\t\tthis._runningLocations = new ExtensionRunningLocationTracker(\n\t\t\tthis._registry,\n\t\t\tthis._extensionHostKindPicker,\n\t\t\tthis._environmentService,\n\t\t\tthis._configurationService,\n\t\t\tthis._logService,\n\t\t\tthis._extensionManifestPropertiesService\n\t\t);\n\n\t\tthis._register(this._extensionEnablementService.onEnablementChanged((extensions) => {\n\t\t\tconst toAdd: IExtension[] = [];\n\t\t\tconst toRemove: IExtension[] = [];\n\t\t\tfor (const extension of extensions) {\n\t\t\t\tif (this._safeInvokeIsEnabled(extension)) {\n\t\t\t\t\t// an extension has been enabled\n\t\t\t\t\ttoAdd.push(extension);\n\t\t\t\t} else {\n\t\t\t\t\t// an extension has been disabled\n\t\t\t\t\ttoRemove.push(extension);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (isCI) {\n\t\t\t\tthis._logService.info(`AbstractExtensionService.onEnablementChanged fired for ${extensions.map(e => e.identifier.id).join(', ')}`);\n\t\t\t}\n\t\t\tthis._handleDeltaExtensions(new DeltaExtensionsQueueItem(toAdd, toRemove));\n\t\t}));\n\n\t\tthis._register(this._extensionManagementService.onDidChangeProfile(({ added, removed }) => {\n\t\t\tif (added.length || removed.length) {\n\t\t\t\tif (isCI) {\n\t\t\t\t\tthis._logService.info(`AbstractExtensionService.onDidChangeProfile fired`);\n\t\t\t\t}\n\t\t\t\tthis._handleDeltaExtensions(new DeltaExtensionsQueueItem(added, removed));\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._extensionManagementService.onDidInstallExtensions((result) => {\n\t\t\tconst extensions: IExtension[] = [];\n\t\t\tfor (const { local, operation } of result) {\n\t\t\t\tif (local && operation !== InstallOperation.Migrate && this._safeInvokeIsEnabled(local)) {\n\t\t\t\t\textensions.push(local);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (extensions.length) {\n\t\t\t\tif (isCI) {\n\t\t\t\t\tthis._logService.info(`AbstractExtensionService.onDidInstallExtensions fired for ${extensions.map(e => e.identifier.id).join(', ')}`);\n\t\t\t\t}\n\t\t\t\tthis._handleDeltaExtensions(new DeltaExtensionsQueueItem(extensions, []));\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._extensionManagementService.onDidUninstallExtension((event) => {\n\t\t\tif (!event.error) {\n\t\t\t\t// an extension has been uninstalled\n\t\t\t\tif (isCI) {\n\t\t\t\t\tthis._logService.info(`AbstractExtensionService.onDidUninstallExtension fired for ${event.identifier.id}`);\n\t\t\t\t}\n\t\t\t\tthis._handleDeltaExtensions(new DeltaExtensionsQueueItem([], [event.identifier.id]));\n\t\t\t}\n\t\t}));\n\n\t\tthis._register(this._lifecycleService.onDidShutdown(() => {\n\t\t\t// We need to disconnect the management connection before killing the local extension host.\n\t\t\t// Otherwise, the local extension host might terminate the underlying tunnel before the\n\t\t\t// management connection has a chance to send its disconnection message.\n\t\t\tconst connection = this._remoteAgentService.getConnection();\n\t\t\tconnection?.dispose();\n\n\t\t\tthis._doStopExtensionHosts();\n\t\t}));\n\t}\n\n\tprotected _getExtensionHostManagers(kind: ExtensionHostKind): IExtensionHostManager[] {\n\t\treturn this._extensionHostManagers.filter(extHostManager => extHostManager.kind === kind);\n\t}\n\n\tprivate _getExtensionHostManagerByRunningLocation(runningLocation: ExtensionRunningLocation): IExtensionHostManager | null {\n\t\tfor (const extensionHostManager of this._extensionHostManagers) {\n\t\t\tif (extensionHostManager.representsRunningLocation(runningLocation)) {\n\t\t\t\treturn extensionHostManager;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\t//#region deltaExtensions\n\n\tprivate async _handleDeltaExtensions(item: DeltaExtensionsQueueItem): Promise<void> {\n\t\tthis._deltaExtensionsQueue.push(item);\n\t\tif (this._inHandleDeltaExtensions) {\n\t\t\t// Let the current item finish, the new one will be picked up\n\t\t\treturn;\n\t\t}\n\n\t\tlet lock: ExtensionDescriptionRegistryLock | null = null;\n\t\ttry {\n\t\t\tthis._inHandleDeltaExtensions = true;\n\n\t\t\t// wait for _initialize to finish before hanlding any delta extension events\n\t\t\tawait this._installedExtensionsReady.wait();\n\n\t\t\tlock = await this._registry.acquireLock('handleDeltaExtensions');\n\t\t\twhile (this._deltaExtensionsQueue.length > 0) {\n\t\t\t\tconst item = this._deltaExtensionsQueue.shift()!;\n\t\t\t\tawait this._deltaExtensions(lock, item.toAdd, item.toRemove);\n\t\t\t}\n\t\t} finally {\n\t\t\tthis._inHandleDeltaExtensions = false;\n\t\t\tlock?.dispose();\n\t\t}\n\t}\n\n\tprivate async _deltaExtensions(lock: ExtensionDescriptionRegistryLock, _toAdd: IExtension[], _toRemove: string[] | IExtension[]): Promise<void> {\n\t\tif (isCI) {\n\t\t\tthis._logService.info(`AbstractExtensionService._deltaExtensions: toAdd: [${_toAdd.map(e => e.identifier.id).join(',')}] toRemove: [${_toRemove.map(e => typeof e === 'string' ? e : e.identifier.id).join(',')}]`);\n\t\t}\n\t\tlet toRemove: IExtensionDescription[] = [];\n\t\tfor (let i = 0, len = _toRemove.length; i < len; i++) {\n\t\t\tconst extensionOrId = _toRemove[i];\n\t\t\tconst extensionId = (typeof extensionOrId === 'string' ? extensionOrId : extensionOrId.identifier.id);\n\t\t\tconst extension = (typeof extensionOrId === 'string' ? null : extensionOrId);\n\t\t\tconst extensionDescription = this._registry.getExtensionDescription(extensionId);\n\t\t\tif (!extensionDescription) {\n\t\t\t\t// ignore disabling/uninstalling an extension which is not running\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (extension && extensionDescription.extensionLocation.scheme !== extension.location.scheme) {\n\t\t\t\t// this event is for a different extension than mine (maybe for the local extension, while I have the remote extension)\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!this.canRemoveExtension(extensionDescription)) {\n\t\t\t\t// uses non-dynamic extension point or is activated\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\ttoRemove.push(extensionDescription);\n\t\t}\n\n\t\tconst toAdd: IExtensionDescription[] = [];\n\t\tfor (let i = 0, len = _toAdd.length; i < len; i++) {\n\t\t\tconst extension = _toAdd[i];\n\n\t\t\tconst extensionDescription = await this._scanSingleExtension(extension);\n\t\t\tif (!extensionDescription) {\n\t\t\t\t// could not scan extension...\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (!this._canAddExtension(extensionDescription, toRemove)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\ttoAdd.push(extensionDescription);\n\t\t}\n\n\t\tif (toAdd.length === 0 && toRemove.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Update the local registry\n\t\tconst result = this._registry.deltaExtensions(lock, toAdd, toRemove.map(e => e.identifier));\n\t\tthis._onDidChangeExtensions.fire({ added: toAdd, removed: toRemove });\n\n\t\ttoRemove = toRemove.concat(result.removedDueToLooping);\n\t\tif (result.removedDueToLooping.length > 0) {\n\t\t\tthis._notificationService.notify({\n\t\t\t\tseverity: Severity.Error,\n\t\t\t\tmessage: nls.localize('looping', \"The following extensions contain dependency loops and have been disabled: {0}\", result.removedDueToLooping.map(e => `'${e.identifier.value}'`).join(', '))\n\t\t\t});\n\t\t}\n\n\t\t// enable or disable proposed API per extension\n\t\tthis._extensionsProposedApi.updateEnabledApiProposals(toAdd);\n\n\t\t// Update extension points\n\t\tthis._doHandleExtensionPoints((<IExtensionDescription[]>[]).concat(toAdd).concat(toRemove));\n\n\t\t// Update the extension host\n\t\tawait this._updateExtensionsOnExtHosts(result.versionId, toAdd, toRemove.map(e => e.identifier));\n\n\t\tfor (let i = 0; i < toAdd.length; i++) {\n\t\t\tthis._activateAddedExtensionIfNeeded(toAdd[i]);\n\t\t}\n\t}\n\n\tprivate async _updateExtensionsOnExtHosts(versionId: number, toAdd: IExtensionDescription[], toRemove: ExtensionIdentifier[]): Promise<void> {\n\t\tconst removedRunningLocation = this._runningLocations.deltaExtensions(toAdd, toRemove);\n\t\tconst promises = this._extensionHostManagers.map(\n\t\t\textHostManager => this._updateExtensionsOnExtHost(extHostManager, versionId, toAdd, toRemove, removedRunningLocation)\n\t\t);\n\t\tawait Promise.all(promises);\n\t}\n\n\tprivate async _updateExtensionsOnExtHost(extensionHostManager: IExtensionHostManager, versionId: number, toAdd: IExtensionDescription[], toRemove: ExtensionIdentifier[], removedRunningLocation: ExtensionIdentifierMap<ExtensionRunningLocation | null>): Promise<void> {\n\t\tconst myToAdd = this._runningLocations.filterByExtensionHostManager(toAdd, extensionHostManager);\n\t\tconst myToRemove = filterExtensionIdentifiers(toRemove, removedRunningLocation, extRunningLocation => extensionHostManager.representsRunningLocation(extRunningLocation));\n\t\tconst addActivationEvents = ImplicitActivationEvents.createActivationEventsMap(toAdd);\n\t\tif (isCI) {\n\t\t\tconst printExtIds = (extensions: IExtensionDescription[]) => extensions.map(e => e.identifier.value).join(',');\n\t\t\tconst printIds = (extensions: ExtensionIdentifier[]) => extensions.map(e => e.value).join(',');\n\t\t\tthis._logService.info(`AbstractExtensionService: Calling deltaExtensions: toRemove: [${printIds(toRemove)}], toAdd: [${printExtIds(toAdd)}], myToRemove: [${printIds(myToRemove)}], myToAdd: [${printExtIds(myToAdd)}],`);\n\t\t}\n\t\tawait extensionHostManager.deltaExtensions({ versionId, toRemove, toAdd, addActivationEvents, myToRemove, myToAdd: myToAdd.map(extension => extension.identifier) });\n\t}\n\n\tpublic canAddExtension(extension: IExtensionDescription): boolean {\n\t\treturn this._canAddExtension(extension, []);\n\t}\n\n\tprivate _canAddExtension(extension: IExtensionDescription, extensionsBeingRemoved: IExtensionDescription[]): boolean {\n\t\t// (Also check for renamed extensions)\n\t\tconst existing = this._registry.getExtensionDescriptionByIdOrUUID(extension.identifier, extension.id);\n\t\tif (existing) {\n\t\t\t// This extension is already known (most likely at a different version)\n\t\t\t// so it cannot be added again unless it is removed first\n\t\t\tconst isBeingRemoved = extensionsBeingRemoved.some((extensionDescription) => ExtensionIdentifier.equals(extension.identifier, extensionDescription.identifier));\n\t\t\tif (!isBeingRemoved) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tconst extensionKinds = this._runningLocations.readExtensionKinds(extension);\n\t\tconst isRemote = extension.extensionLocation.scheme === Schemas.vscodeRemote;\n\t\tconst extensionHostKind = this._extensionHostKindPicker.pickExtensionHostKind(extension.identifier, extensionKinds, !isRemote, isRemote, ExtensionRunningPreference.None);\n\t\tif (extensionHostKind === null) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tpublic canRemoveExtension(extension: IExtensionDescription): boolean {\n\t\tconst extensionDescription = this._registry.getExtensionDescription(extension.identifier);\n\t\tif (!extensionDescription) {\n\t\t\t// Can't remove an extension that is unknown!\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._extensionStatus.get(extensionDescription.identifier)?.activationStarted) {\n\t\t\t// Extension is running, cannot remove it safely\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate async _activateAddedExtensionIfNeeded(extensionDescription: IExtensionDescription): Promise<void> {\n\t\tlet shouldActivate = false;\n\t\tlet shouldActivateReason: string | null = null;\n\t\tlet hasWorkspaceContains = false;\n\t\tconst activationEvents = this._activationEventReader.readActivationEvents(extensionDescription);\n\t\tfor (let activationEvent of activationEvents) {\n\t\t\t// TODO@joao: there's no easy way to contribute this\n\t\t\tif (activationEvent === 'onUri') {\n\t\t\t\tactivationEvent = `onUri:${ExtensionIdentifier.toKey(extensionDescription.identifier)}`;\n\t\t\t}\n\n\t\t\tif (this._allRequestedActivateEvents.has(activationEvent)) {\n\t\t\t\t// This activation event was fired before the extension was added\n\t\t\t\tshouldActivate = true;\n\t\t\t\tshouldActivateReason = activationEvent;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (activationEvent === '*') {\n\t\t\t\tshouldActivate = true;\n\t\t\t\tshouldActivateReason = activationEvent;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (/^workspaceContains/.test(activationEvent)) {\n\t\t\t\thasWorkspaceContains = true;\n\t\t\t}\n\n\t\t\tif (activationEvent === 'onStartupFinished') {\n\t\t\t\tshouldActivate = true;\n\t\t\t\tshouldActivateReason = activationEvent;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (shouldActivate) {\n\t\t\tawait Promise.all(\n\t\t\t\tthis._extensionHostManagers.map(extHostManager => extHostManager.activate(extensionDescription.identifier, { startup: false, extensionId: extensionDescription.identifier, activationEvent: shouldActivateReason! }))\n\t\t\t).then(() => { });\n\t\t} else if (hasWorkspaceContains) {\n\t\t\tconst workspace = await this._contextService.getCompleteWorkspace();\n\t\t\tconst forceUsingSearch = !!this._environmentService.remoteAuthority;\n\t\t\tconst host: IWorkspaceContainsActivationHost = {\n\t\t\t\tlogService: this._logService,\n\t\t\t\tfolders: workspace.folders.map(folder => folder.uri),\n\t\t\t\tforceUsingSearch: forceUsingSearch,\n\t\t\t\texists: (uri) => this._fileService.exists(uri),\n\t\t\t\tcheckExists: (folders, includes, token) => this._instantiationService.invokeFunction((accessor) => checkGlobFileExists(accessor, folders, includes, token))\n\t\t\t};\n\n\t\t\tconst result = await checkActivateWorkspaceContainsExtension(host, extensionDescription);\n\t\t\tif (!result) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait Promise.all(\n\t\t\t\tthis._extensionHostManagers.map(extHostManager => extHostManager.activate(extensionDescription.identifier, { startup: false, extensionId: extensionDescription.identifier, activationEvent: result.activationEvent }))\n\t\t\t).then(() => { });\n\t\t}\n\t}\n\n\t//#endregion\n\n\tprotected async _initialize(): Promise<void> {\n\t\tperf.mark('code/willLoadExtensions');\n\t\tthis._startExtensionHostsIfNecessary(true, []);\n\n\t\tconst lock = await this._registry.acquireLock('_initialize');\n\t\ttry {\n\t\t\tconst resolvedExtensions = await this._resolveExtensions();\n\n\t\t\tthis._processExtensions(lock, resolvedExtensions);\n\n\t\t\t// Start extension hosts which are not automatically started\n\t\t\tconst snapshot = this._registry.getSnapshot();\n\t\t\tfor (const extHostManager of this._extensionHostManagers) {\n\t\t\t\tif (extHostManager.startup !== ExtensionHostStartup.EagerAutoStart) {\n\t\t\t\t\tconst extensions = this._runningLocations.filterByExtensionHostManager(snapshot.extensions, extHostManager);\n\t\t\t\t\textHostManager.start(snapshot.versionId, snapshot.extensions, extensions.map(extension => extension.identifier));\n\t\t\t\t}\n\t\t\t}\n\t\t} finally {\n\t\t\tlock.dispose();\n\t\t}\n\n\t\tthis._releaseBarrier();\n\t\tperf.mark('code/didLoadExtensions');\n\t\tawait this._handleExtensionTests();\n\t}\n\n\tprivate _processExtensions(lock: ExtensionDescriptionRegistryLock, resolvedExtensions: ResolvedExtensions): void {\n\t\tconst { allowRemoteExtensionsInLocalWebWorker, hasLocalProcess } = resolvedExtensions;\n\t\tconst localExtensions = checkEnabledAndProposedAPI(this._logService, this._extensionEnablementService, this._extensionsProposedApi, resolvedExtensions.local, false);\n\t\tlet remoteExtensions = checkEnabledAndProposedAPI(this._logService, this._extensionEnablementService, this._extensionsProposedApi, resolvedExtensions.remote, false);\n\n\t\t// `initializeRunningLocation` will look at the complete picture (e.g. an extension installed on both sides),\n\t\t// takes care of duplicates and picks a running location for each extension\n\t\tthis._runningLocations.initializeRunningLocation(localExtensions, remoteExtensions);\n\n\t\tthis._startExtensionHostsIfNecessary(true, []);\n\n\t\t// Some remote extensions could run locally in the web worker, so store them\n\t\tconst remoteExtensionsThatNeedToRunLocally = (allowRemoteExtensionsInLocalWebWorker ? this._runningLocations.filterByExtensionHostKind(remoteExtensions, ExtensionHostKind.LocalWebWorker) : []);\n\t\tconst localProcessExtensions = (hasLocalProcess ? this._runningLocations.filterByExtensionHostKind(localExtensions, ExtensionHostKind.LocalProcess) : []);\n\t\tconst localWebWorkerExtensions = this._runningLocations.filterByExtensionHostKind(localExtensions, ExtensionHostKind.LocalWebWorker);\n\t\tremoteExtensions = this._runningLocations.filterByExtensionHostKind(remoteExtensions, ExtensionHostKind.Remote);\n\n\t\t// Add locally the remote extensions that need to run locally in the web worker\n\t\tfor (const ext of remoteExtensionsThatNeedToRunLocally) {\n\t\t\tif (!includes(localWebWorkerExtensions, ext.identifier)) {\n\t\t\t\tlocalWebWorkerExtensions.push(ext);\n\t\t\t}\n\t\t}\n\n\t\tconst allExtensions = remoteExtensions.concat(localProcessExtensions).concat(localWebWorkerExtensions);\n\n\t\tconst result = this._registry.deltaExtensions(lock, allExtensions, []);\n\t\tif (result.removedDueToLooping.length > 0) {\n\t\t\tthis._notificationService.notify({\n\t\t\t\tseverity: Severity.Error,\n\t\t\t\tmessage: nls.localize('looping', \"The following extensions contain dependency loops and have been disabled: {0}\", result.removedDueToLooping.map(e => `'${e.identifier.value}'`).join(', '))\n\t\t\t});\n\t\t}\n\n\t\tthis._doHandleExtensionPoints(this._registry.getAllExtensionDescriptions());\n\t}\n\n\tprivate async _handleExtensionTests(): Promise<void> {\n\t\tif (!this._environmentService.isExtensionDevelopment || !this._environmentService.extensionTestsLocationURI) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst extensionHostManager = this.findTestExtensionHost(this._environmentService.extensionTestsLocationURI);\n\t\tif (!extensionHostManager) {\n\t\t\tconst msg = nls.localize('extensionTestError', \"No extension host found that can launch the test runner at {0}.\", this._environmentService.extensionTestsLocationURI.toString());\n\t\t\tconsole.error(msg);\n\t\t\tthis._notificationService.error(msg);\n\t\t\treturn;\n\t\t}\n\n\n\t\tlet exitCode: number;\n\t\ttry {\n\t\t\texitCode = await extensionHostManager.extensionTestsExecute();\n\t\t\tif (isCI) {\n\t\t\t\tthis._logService.info(`Extension host test runner exit code: ${exitCode}`);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (isCI) {\n\t\t\t\tthis._logService.error(`Extension host test runner error`, err);\n\t\t\t}\n\t\t\tconsole.error(err);\n\t\t\texitCode = 1 /* ERROR */;\n\t\t}\n\n\t\tthis._onExtensionHostExit(exitCode);\n\t}\n\n\tprivate findTestExtensionHost(testLocation: URI): IExtensionHostManager | null {\n\t\tlet runningLocation: ExtensionRunningLocation | null = null;\n\n\t\tfor (const extension of this._registry.getAllExtensionDescriptions()) {\n\t\t\tif (isEqualOrParent(testLocation, extension.extensionLocation)) {\n\t\t\t\trunningLocation = this._runningLocations.getRunningLocation(extension.identifier);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (runningLocation === null) {\n\t\t\t// not sure if we should support that, but it was possible to have an test outside an extension\n\n\t\t\tif (testLocation.scheme === Schemas.vscodeRemote) {\n\t\t\t\trunningLocation = new RemoteRunningLocation();\n\t\t\t} else {\n\t\t\t\t// When a debugger attaches to the extension host, it will surface all console.log messages from the extension host,\n\t\t\t\t// but not necessarily from the window. So it would be best if any errors get printed to the console of the extension host.\n\t\t\t\t// That is why here we use the local process extension host even for non-file URIs\n\t\t\t\trunningLocation = new LocalProcessRunningLocation(0);\n\t\t\t}\n\t\t}\n\t\tif (runningLocation !== null) {\n\t\t\treturn this._getExtensionHostManagerByRunningLocation(runningLocation);\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate _releaseBarrier(): void {\n\t\tthis._installedExtensionsReady.open();\n\t\tthis._onDidRegisterExtensions.fire(undefined);\n\t\tthis._onDidChangeExtensionsStatus.fire(this._registry.getAllExtensionDescriptions().map(e => e.identifier));\n\t}\n\n\t//#region remote authority resolving\n\n\tprotected async _resolveAuthorityInitial(remoteAuthority: string): Promise<ResolverResult> {\n\t\tconst MAX_ATTEMPTS = 5;\n\n\t\tfor (let attempt = 1; ; attempt++) {\n\t\t\ttry {\n\t\t\t\treturn this._resolveAuthorityWithLogging(remoteAuthority);\n\t\t\t} catch (err) {\n\t\t\t\tif (RemoteAuthorityResolverError.isNoResolverFound(err)) {\n\t\t\t\t\t// There is no point in retrying if there is no resolver found\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\n\t\t\t\tif (RemoteAuthorityResolverError.isNotAvailable(err)) {\n\t\t\t\t\t// The resolver is not available and asked us to not retry\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\n\t\t\t\tif (attempt >= MAX_ATTEMPTS) {\n\t\t\t\t\t// Too many failed attempts, give up\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected async _resolveAuthorityAgain(): Promise<void> {\n\t\tconst remoteAuthority = this._environmentService.remoteAuthority;\n\t\tif (!remoteAuthority) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._remoteAuthorityResolverService._clearResolvedAuthority(remoteAuthority);\n\t\ttry {\n\t\t\tconst result = await this._resolveAuthorityWithLogging(remoteAuthority);\n\t\t\tthis._remoteAuthorityResolverService._setResolvedAuthority(result.authority, result.options);\n\t\t} catch (err) {\n\t\t\tthis._remoteAuthorityResolverService._setResolvedAuthorityError(remoteAuthority, err);\n\t\t}\n\t}\n\n\tprivate async _resolveAuthorityWithLogging(remoteAuthority: string): Promise<ResolverResult> {\n\t\tconst authorityPrefix = getRemoteAuthorityPrefix(remoteAuthority);\n\t\tconst sw = StopWatch.create(false);\n\t\tthis._logService.info(`Invoking resolveAuthority(${authorityPrefix})...`);\n\t\ttry {\n\t\t\tperf.mark(`code/willResolveAuthority/${authorityPrefix}`);\n\t\t\tconst result = await this._resolveAuthority(remoteAuthority);\n\t\t\tperf.mark(`code/didResolveAuthorityOK/${authorityPrefix}`);\n\t\t\tthis._logService.info(`resolveAuthority(${authorityPrefix}) returned '${result.authority.connectTo}' after ${sw.elapsed()} ms`);\n\t\t\treturn result;\n\t\t} catch (err) {\n\t\t\tperf.mark(`code/didResolveAuthorityError/${authorityPrefix}`);\n\t\t\tthis._logService.error(`resolveAuthority(${authorityPrefix}) returned an error after ${sw.elapsed()} ms`, err);\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tprotected async _resolveAuthorityOnExtensionHosts(kind: ExtensionHostKind, remoteAuthority: string): Promise<ResolverResult> {\n\n\t\tconst extensionHosts = this._getExtensionHostManagers(kind);\n\t\tif (extensionHosts.length === 0) {\n\t\t\t// no local process extension hosts\n\t\t\tthrow new Error(`Cannot resolve authority`);\n\t\t}\n\n\t\tthis._resolveAuthorityAttempt++;\n\t\tconst results = await Promise.all(extensionHosts.map(extHost => extHost.resolveAuthority(remoteAuthority, this._resolveAuthorityAttempt)));\n\n\t\tlet bestErrorResult: IResolveAuthorityErrorResult | null = null;\n\t\tfor (const result of results) {\n\t\t\tif (result.type === 'ok') {\n\t\t\t\treturn result.value;\n\t\t\t}\n\t\t\tif (!bestErrorResult) {\n\t\t\t\tbestErrorResult = result;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst bestErrorIsUnknown = (bestErrorResult.error.code === RemoteAuthorityResolverErrorCode.Unknown);\n\t\t\tconst errorIsUnknown = (result.error.code === RemoteAuthorityResolverErrorCode.Unknown);\n\t\t\tif (bestErrorIsUnknown && !errorIsUnknown) {\n\t\t\t\tbestErrorResult = result;\n\t\t\t}\n\t\t}\n\n\t\t// we can only reach this if there is an error\n\t\tthrow new RemoteAuthorityResolverError(bestErrorResult!.error.message, bestErrorResult!.error.code, bestErrorResult!.error.detail);\n\t}\n\n\t//#endregion\n\n\t//#region Stopping / Starting / Restarting\n\n\tpublic stopExtensionHosts(reason: string): Promise<boolean> {\n\t\treturn this._doStopExtensionHostsWithVeto(reason);\n\t}\n\n\tprotected _doStopExtensionHosts(): void {\n\t\tconst previouslyActivatedExtensionIds: ExtensionIdentifier[] = [];\n\t\tfor (const extensionStatus of this._extensionStatus.values()) {\n\t\t\tif (extensionStatus.activationStarted) {\n\t\t\t\tpreviouslyActivatedExtensionIds.push(extensionStatus.id);\n\t\t\t}\n\t\t}\n\n\t\t// See https://github.com/microsoft/vscode/issues/152204\n\t\t// Dispose extension hosts in reverse creation order because the local extension host\n\t\t// might be critical in sustaining a connection to the remote extension host\n\t\tfor (let i = this._extensionHostManagers.length - 1; i >= 0; i--) {\n\t\t\tthis._extensionHostManagers[i].dispose();\n\t\t}\n\t\tthis._extensionHostManagers = [];\n\t\tfor (const extensionStatus of this._extensionStatus.values()) {\n\t\t\textensionStatus.clearRuntimeStatus();\n\t\t}\n\n\t\tif (previouslyActivatedExtensionIds.length > 0) {\n\t\t\tthis._onDidChangeExtensionsStatus.fire(previouslyActivatedExtensionIds);\n\t\t}\n\t}\n\n\tprivate async _doStopExtensionHostsWithVeto(reason: string): Promise<boolean> {\n\t\tconst vetos: (boolean | Promise<boolean>)[] = [];\n\t\tconst vetoReasons = new Set<string>();\n\n\t\tthis._onWillStop.fire({\n\t\t\treason,\n\t\t\tveto(value, reason) {\n\t\t\t\tvetos.push(value);\n\n\t\t\t\tif (typeof value === 'boolean') {\n\t\t\t\t\tif (value === true) {\n\t\t\t\t\t\tvetoReasons.add(reason);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvalue.then(value => {\n\t\t\t\t\t\tif (value) {\n\t\t\t\t\t\t\tvetoReasons.add(reason);\n\t\t\t\t\t\t}\n\t\t\t\t\t}).catch(error => {\n\t\t\t\t\t\tvetoReasons.add(nls.localize('extensionStopVetoError', \"{0} (Error: {1})\", reason, toErrorMessage(error)));\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst veto = await handleVetos(vetos, error => this._logService.error(error));\n\t\tif (!veto) {\n\t\t\tthis._doStopExtensionHosts();\n\t\t} else {\n\t\t\tconst vetoReasonsArray = Array.from(vetoReasons);\n\n\t\t\tthis._logService.warn(`Extension host was not stopped because of veto (stop reason: ${reason}, veto reason: ${vetoReasonsArray.join(', ')})`);\n\n\t\t\tawait this._dialogService.warn(\n\t\t\t\tnls.localize('extensionStopVetoMessage', \"The following operation was blocked: {0}\", reason),\n\t\t\t\tvetoReasonsArray.length === 1 ?\n\t\t\t\t\tnls.localize('extensionStopVetoDetailsOne', \"The reason for blocking the operation: {0}\", vetoReasonsArray[0]) :\n\t\t\t\t\tnls.localize('extensionStopVetoDetailsMany', \"The reasons for blocking the operation:\\n- {0}\", vetoReasonsArray.join('\\n -')),\n\t\t\t);\n\t\t}\n\n\t\treturn !veto;\n\t}\n\n\tprivate _startExtensionHostsIfNecessary(isInitialStart: boolean, initialActivationEvents: string[]): void {\n\t\tconst locations: ExtensionRunningLocation[] = [];\n\t\tfor (let affinity = 0; affinity <= this._runningLocations.maxLocalProcessAffinity; affinity++) {\n\t\t\tlocations.push(new LocalProcessRunningLocation(affinity));\n\t\t}\n\t\tfor (let affinity = 0; affinity <= this._runningLocations.maxLocalWebWorkerAffinity; affinity++) {\n\t\t\tlocations.push(new LocalWebWorkerRunningLocation(affinity));\n\t\t}\n\t\tlocations.push(new RemoteRunningLocation());\n\t\tfor (const location of locations) {\n\t\t\tif (this._getExtensionHostManagerByRunningLocation(location)) {\n\t\t\t\t// already running\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst extHostManager = this._createExtensionHostManager(location, isInitialStart, initialActivationEvents);\n\t\t\tif (extHostManager) {\n\t\t\t\tthis._extensionHostManagers.push(extHostManager);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _createExtensionHostManager(runningLocation: ExtensionRunningLocation, isInitialStart: boolean, initialActivationEvents: string[]): IExtensionHostManager | null {\n\t\tconst extensionHost = this._extensionHostFactory.createExtensionHost(this._runningLocations, runningLocation, isInitialStart);\n\t\tif (!extensionHost) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst processManager: IExtensionHostManager = this._doCreateExtensionHostManager(extensionHost, initialActivationEvents);\n\t\tprocessManager.onDidExit(([code, signal]) => this._onExtensionHostCrashOrExit(processManager, code, signal));\n\t\tprocessManager.onDidChangeResponsiveState((responsiveState) => {\n\t\t\tthis._onDidChangeResponsiveChange.fire({\n\t\t\t\textensionHostKind: processManager.kind,\n\t\t\t\tisResponsive: responsiveState === ResponsiveState.Responsive,\n\t\t\t\tgetInspectPort: (tryEnableInspector: boolean) => {\n\t\t\t\t\treturn processManager.getInspectPort(tryEnableInspector);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\treturn processManager;\n\t}\n\n\tprotected _doCreateExtensionHostManager(extensionHost: IExtensionHost, initialActivationEvents: string[]): IExtensionHostManager {\n\t\treturn createExtensionHostManager(this._instantiationService, extensionHost, initialActivationEvents, this._acquireInternalAPI(extensionHost));\n\t}\n\n\tprivate _onExtensionHostCrashOrExit(extensionHost: IExtensionHostManager, code: number, signal: string | null): void {\n\n\t\t// Unexpected termination\n\t\tconst isExtensionDevHost = parseExtensionDevOptions(this._environmentService).isExtensionDevHost;\n\t\tif (!isExtensionDevHost) {\n\t\t\tthis._onExtensionHostCrashed(extensionHost, code, signal);\n\t\t\treturn;\n\t\t}\n\n\t\tthis._onExtensionHostExit(code);\n\t}\n\n\tprotected _onExtensionHostCrashed(extensionHost: IExtensionHostManager, code: number, signal: string | null): void {\n\t\tconsole.error(`Extension host (${extensionHostKindToString(extensionHost.kind)}) terminated unexpectedly. Code: ${code}, Signal: ${signal}`);\n\t\tif (extensionHost.kind === ExtensionHostKind.LocalProcess) {\n\t\t\tthis._doStopExtensionHosts();\n\t\t} else if (extensionHost.kind === ExtensionHostKind.Remote) {\n\t\t\tif (signal) {\n\t\t\t\tthis._onRemoteExtensionHostCrashed(extensionHost, signal);\n\t\t\t}\n\t\t\tfor (let i = 0; i < this._extensionHostManagers.length; i++) {\n\t\t\t\tif (this._extensionHostManagers[i] === extensionHost) {\n\t\t\t\t\tthis._extensionHostManagers[i].dispose();\n\t\t\t\t\tthis._extensionHostManagers.splice(i, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _getExtensionHostExitInfoWithTimeout(reconnectionToken: string): Promise<IExtensionHostExitInfo | null> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst timeoutHandle = setTimeout(() => {\n\t\t\t\treject(new Error('getExtensionHostExitInfo timed out'));\n\t\t\t}, 2000);\n\t\t\tthis._remoteAgentService.getExtensionHostExitInfo(reconnectionToken).then(\n\t\t\t\t(r) => {\n\t\t\t\t\tclearTimeout(timeoutHandle);\n\t\t\t\t\tresolve(r);\n\t\t\t\t},\n\t\t\t\treject\n\t\t\t);\n\t\t});\n\t}\n\n\tprivate async _onRemoteExtensionHostCrashed(extensionHost: IExtensionHostManager, reconnectionToken: string): Promise<void> {\n\t\ttry {\n\t\t\tconst info = await this._getExtensionHostExitInfoWithTimeout(reconnectionToken);\n\t\t\tif (info) {\n\t\t\t\tthis._logService.error(`Extension host (${extensionHostKindToString(extensionHost.kind)}) terminated unexpectedly with code ${info.code}.`);\n\t\t\t}\n\n\t\t\tthis._logExtensionHostCrash(extensionHost);\n\t\t\tthis._remoteCrashTracker.registerCrash();\n\n\t\t\tif (this._remoteCrashTracker.shouldAutomaticallyRestart()) {\n\t\t\t\tthis._logService.info(`Automatically restarting the remote extension host.`);\n\t\t\t\tthis._notificationService.status(nls.localize('extensionService.autoRestart', \"The remote extension host terminated unexpectedly. Restarting...\"), { hideAfter: 5000 });\n\t\t\t\tthis._startExtensionHostsIfNecessary(false, Array.from(this._allRequestedActivateEvents.keys()));\n\t\t\t} else {\n\t\t\t\tthis._notificationService.prompt(Severity.Error, nls.localize('extensionService.crash', \"Remote Extension host terminated unexpectedly 3 times within the last 5 minutes.\"),\n\t\t\t\t\t[{\n\t\t\t\t\t\tlabel: nls.localize('restart', \"Restart Remote Extension Host\"),\n\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\tthis._startExtensionHostsIfNecessary(false, Array.from(this._allRequestedActivateEvents.keys()));\n\t\t\t\t\t\t}\n\t\t\t\t\t}]\n\t\t\t\t);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\t// maybe this wasn't an extension host crash and it was a permanent disconnection\n\t\t}\n\t}\n\n\tprotected _logExtensionHostCrash(extensionHost: IExtensionHostManager): void {\n\n\t\tconst activatedExtensions: ExtensionIdentifier[] = [];\n\t\tfor (const extensionStatus of this._extensionStatus.values()) {\n\t\t\tif (extensionStatus.activationStarted && extensionHost.containsExtension(extensionStatus.id)) {\n\t\t\t\tactivatedExtensions.push(extensionStatus.id);\n\t\t\t}\n\t\t}\n\n\t\tif (activatedExtensions.length > 0) {\n\t\t\tthis._logService.error(`Extension host (${extensionHostKindToString(extensionHost.kind)}) terminated unexpectedly. The following extensions were running: ${activatedExtensions.map(id => id.value).join(', ')}`);\n\t\t} else {\n\t\t\tthis._logService.error(`Extension host (${extensionHostKindToString(extensionHost.kind)}) terminated unexpectedly. No extensions were activated.`);\n\t\t}\n\t}\n\n\tpublic async startExtensionHosts(): Promise<void> {\n\t\tthis._doStopExtensionHosts();\n\n\t\tconst lock = await this._registry.acquireLock('startExtensionHosts');\n\t\ttry {\n\t\t\tthis._startExtensionHostsIfNecessary(false, Array.from(this._allRequestedActivateEvents.keys()));\n\n\t\t\tconst localProcessExtensionHosts = this._getExtensionHostManagers(ExtensionHostKind.LocalProcess);\n\t\t\tawait Promise.all(localProcessExtensionHosts.map(extHost => extHost.ready()));\n\t\t} finally {\n\t\t\tlock.dispose();\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region IExtensionService\n\n\tpublic activateByEvent(activationEvent: string, activationKind: ActivationKind = ActivationKind.Normal): Promise<void> {\n\t\tif (this._installedExtensionsReady.isOpen()) {\n\t\t\t// Extensions have been scanned and interpreted\n\n\t\t\t// Record the fact that this activationEvent was requested (in case of a restart)\n\t\t\tthis._allRequestedActivateEvents.add(activationEvent);\n\n\t\t\tif (!this._registry.containsActivationEvent(activationEvent)) {\n\t\t\t\t// There is no extension that is interested in this activation event\n\t\t\t\treturn NO_OP_VOID_PROMISE;\n\t\t\t}\n\n\t\t\treturn this._activateByEvent(activationEvent, activationKind);\n\t\t} else {\n\t\t\t// Extensions have not been scanned yet.\n\n\t\t\t// Record the fact that this activationEvent was requested (in case of a restart)\n\t\t\tthis._allRequestedActivateEvents.add(activationEvent);\n\n\t\t\tif (activationKind === ActivationKind.Immediate) {\n\t\t\t\t// Do not wait for the normal start-up of the extension host(s)\n\t\t\t\treturn this._activateByEvent(activationEvent, activationKind);\n\t\t\t}\n\n\t\t\treturn this._installedExtensionsReady.wait().then(() => this._activateByEvent(activationEvent, activationKind));\n\t\t}\n\t}\n\n\tprivate _activateByEvent(activationEvent: string, activationKind: ActivationKind): Promise<void> {\n\t\tconst result = Promise.all(\n\t\t\tthis._extensionHostManagers.map(extHostManager => extHostManager.activateByEvent(activationEvent, activationKind))\n\t\t).then(() => { });\n\t\tthis._onWillActivateByEvent.fire({\n\t\t\tevent: activationEvent,\n\t\t\tactivation: result\n\t\t});\n\t\treturn result;\n\t}\n\n\tpublic activationEventIsDone(activationEvent: string): boolean {\n\t\tif (!this._installedExtensionsReady.isOpen()) {\n\t\t\treturn false;\n\t\t}\n\t\tif (!this._registry.containsActivationEvent(activationEvent)) {\n\t\t\t// There is no extension that is interested in this activation event\n\t\t\treturn true;\n\t\t}\n\t\treturn this._extensionHostManagers.every(manager => manager.activationEventIsDone(activationEvent));\n\t}\n\n\tpublic whenInstalledExtensionsRegistered(): Promise<boolean> {\n\t\treturn this._installedExtensionsReady.wait();\n\t}\n\n\tget extensions(): IExtensionDescription[] {\n\t\treturn this._registry.getAllExtensionDescriptions();\n\t}\n\n\tprotected _getExtensionRegistrySnapshotWhenReady(): Promise<ExtensionDescriptionRegistrySnapshot> {\n\t\treturn this._installedExtensionsReady.wait().then(() => this._registry.getSnapshot());\n\t}\n\n\tpublic getExtension(id: string): Promise<IExtensionDescription | undefined> {\n\t\treturn this._installedExtensionsReady.wait().then(() => {\n\t\t\treturn this._registry.getExtensionDescription(id);\n\t\t});\n\t}\n\n\tpublic readExtensionPointContributions<T extends IExtensionContributions[keyof IExtensionContributions]>(extPoint: IExtensionPoint<T>): Promise<ExtensionPointContribution<T>[]> {\n\t\treturn this._installedExtensionsReady.wait().then(() => {\n\t\t\tconst availableExtensions = this._registry.getAllExtensionDescriptions();\n\n\t\t\tconst result: ExtensionPointContribution<T>[] = [];\n\t\t\tfor (const desc of availableExtensions) {\n\t\t\t\tif (desc.contributes && hasOwnProperty.call(desc.contributes, extPoint.name)) {\n\t\t\t\t\tresult.push(new ExtensionPointContribution<T>(desc, desc.contributes[extPoint.name as keyof typeof desc.contributes] as T));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tpublic getExtensionsStatus(): { [id: string]: IExtensionsStatus } {\n\t\tconst result: { [id: string]: IExtensionsStatus } = Object.create(null);\n\t\tif (this._registry) {\n\t\t\tconst extensions = this._registry.getAllExtensionDescriptions();\n\t\t\tfor (const extension of extensions) {\n\t\t\t\tconst extensionStatus = this._extensionStatus.get(extension.identifier);\n\t\t\t\tresult[extension.identifier.value] = {\n\t\t\t\t\tid: extension.identifier,\n\t\t\t\t\tmessages: extensionStatus?.messages ?? [],\n\t\t\t\t\tactivationStarted: extensionStatus?.activationStarted ?? false,\n\t\t\t\t\tactivationTimes: extensionStatus?.activationTimes ?? undefined,\n\t\t\t\t\truntimeErrors: extensionStatus?.runtimeErrors ?? [],\n\t\t\t\t\trunningLocation: this._runningLocations.getRunningLocation(extension.identifier),\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic async getInspectPorts(extensionHostKind: ExtensionHostKind, tryEnableInspector: boolean): Promise<number[]> {\n\t\tconst result = await Promise.all(\n\t\t\tthis._getExtensionHostManagers(extensionHostKind).map(extHost => extHost.getInspectPort(tryEnableInspector))\n\t\t);\n\t\t// remove 0s:\n\t\treturn result.filter(element => Boolean(element));\n\t}\n\n\tpublic async setRemoteEnvironment(env: { [key: string]: string | null }): Promise<void> {\n\t\tawait this._extensionHostManagers\n\t\t\t.map(manager => manager.setRemoteEnvironment(env));\n\t}\n\n\t//#endregion\n\n\t// --- impl\n\n\tprivate _safeInvokeIsEnabled(extension: IExtension): boolean {\n\t\ttry {\n\t\t\treturn this._extensionEnablementService.isEnabled(extension);\n\t\t} catch (err) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tprivate _doHandleExtensionPoints(affectedExtensions: IExtensionDescription[]): void {\n\t\tconst affectedExtensionPoints: { [extPointName: string]: boolean } = Object.create(null);\n\t\tfor (const extensionDescription of affectedExtensions) {\n\t\t\tif (extensionDescription.contributes) {\n\t\t\t\tfor (const extPointName in extensionDescription.contributes) {\n\t\t\t\t\tif (hasOwnProperty.call(extensionDescription.contributes, extPointName)) {\n\t\t\t\t\t\taffectedExtensionPoints[extPointName] = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst messageHandler = (msg: IMessage) => this._handleExtensionPointMessage(msg);\n\t\tconst availableExtensions = this._registry.getAllExtensionDescriptions();\n\t\tconst extensionPoints = ExtensionsRegistry.getExtensionPoints();\n\t\tperf.mark('code/willHandleExtensionPoints');\n\t\tfor (const extensionPoint of extensionPoints) {\n\t\t\tif (affectedExtensionPoints[extensionPoint.name]) {\n\t\t\t\tperf.mark(`code/willHandleExtensionPoint/${extensionPoint.name}`);\n\t\t\t\tAbstractExtensionService._handleExtensionPoint(extensionPoint, availableExtensions, messageHandler);\n\t\t\t\tperf.mark(`code/didHandleExtensionPoint/${extensionPoint.name}`);\n\t\t\t}\n\t\t}\n\t\tperf.mark('code/didHandleExtensionPoints');\n\t}\n\n\tprivate _getOrCreateExtensionStatus(extensionId: ExtensionIdentifier): ExtensionStatus {\n\t\tif (!this._extensionStatus.has(extensionId)) {\n\t\t\tthis._extensionStatus.set(extensionId, new ExtensionStatus(extensionId));\n\t\t}\n\t\treturn this._extensionStatus.get(extensionId)!;\n\t}\n\n\tprivate _handleExtensionPointMessage(msg: IMessage) {\n\t\tconst extensionStatus = this._getOrCreateExtensionStatus(msg.extensionId);\n\t\textensionStatus.addMessage(msg);\n\n\t\tconst extension = this._registry.getExtensionDescription(msg.extensionId);\n\t\tconst strMsg = `[${msg.extensionId.value}]: ${msg.message}`;\n\n\t\tif (msg.type === Severity.Error) {\n\t\t\tif (extension && extension.isUnderDevelopment) {\n\t\t\t\t// This message is about the extension currently being developed\n\t\t\t\tthis._notificationService.notify({ severity: Severity.Error, message: strMsg });\n\t\t\t}\n\t\t\tthis._logService.error(strMsg);\n\t\t} else if (msg.type === Severity.Warning) {\n\t\t\tif (extension && extension.isUnderDevelopment) {\n\t\t\t\t// This message is about the extension currently being developed\n\t\t\t\tthis._notificationService.notify({ severity: Severity.Warning, message: strMsg });\n\t\t\t}\n\t\t\tthis._logService.warn(strMsg);\n\t\t} else {\n\t\t\tthis._logService.info(strMsg);\n\t\t}\n\n\t\tif (msg.extensionId && this._environmentService.isBuilt && !this._environmentService.isExtensionDevelopment) {\n\t\t\tconst { type, extensionId, extensionPointId, message } = msg;\n\t\t\ttype ExtensionsMessageClassification = {\n\t\t\t\towner: 'alexdima';\n\t\t\t\tcomment: 'A validation message for an extension';\n\t\t\t\ttype: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Severity of problem.'; isMeasurement: true };\n\t\t\t\textensionId: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The identifier of the extension that has a problem.' };\n\t\t\t\textensionPointId: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The extension point that has a problem.' };\n\t\t\t\tmessage: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The message of the problem.' };\n\t\t\t};\n\t\t\ttype ExtensionsMessageEvent = {\n\t\t\t\ttype: Severity;\n\t\t\t\textensionId: string;\n\t\t\t\textensionPointId: string;\n\t\t\t\tmessage: string;\n\t\t\t};\n\t\t\tthis._telemetryService.publicLog2<ExtensionsMessageEvent, ExtensionsMessageClassification>('extensionsMessage', {\n\t\t\t\ttype, extensionId: extensionId.value, extensionPointId, message\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate static _handleExtensionPoint<T extends IExtensionContributions[keyof IExtensionContributions]>(extensionPoint: ExtensionPoint<T>, availableExtensions: IExtensionDescription[], messageHandler: (msg: IMessage) => void): void {\n\t\tconst users: IExtensionPointUser<T>[] = [];\n\t\tfor (const desc of availableExtensions) {\n\t\t\tif (desc.contributes && hasOwnProperty.call(desc.contributes, extensionPoint.name)) {\n\t\t\t\tusers.push({\n\t\t\t\t\tdescription: desc,\n\t\t\t\t\tvalue: desc.contributes[extensionPoint.name as keyof typeof desc.contributes] as T,\n\t\t\t\t\tcollector: new ExtensionMessageCollector(messageHandler, desc, extensionPoint.name)\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\textensionPoint.acceptUsers(users);\n\t}\n\n\t//#region Called by extension host\n\n\tprivate _acquireInternalAPI(extensionHost: IExtensionHost): IInternalExtensionService {\n\t\treturn {\n\t\t\t_activateById: (extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<void> => {\n\t\t\t\treturn this._activateById(extensionId, reason);\n\t\t\t},\n\t\t\t_onWillActivateExtension: (extensionId: ExtensionIdentifier): void => {\n\t\t\t\treturn this._onWillActivateExtension(extensionId, extensionHost.runningLocation);\n\t\t\t},\n\t\t\t_onDidActivateExtension: (extensionId: ExtensionIdentifier, codeLoadingTime: number, activateCallTime: number, activateResolvedTime: number, activationReason: ExtensionActivationReason): void => {\n\t\t\t\treturn this._onDidActivateExtension(extensionId, codeLoadingTime, activateCallTime, activateResolvedTime, activationReason);\n\t\t\t},\n\t\t\t_onDidActivateExtensionError: (extensionId: ExtensionIdentifier, error: Error): void => {\n\t\t\t\treturn this._onDidActivateExtensionError(extensionId, error);\n\t\t\t},\n\t\t\t_onExtensionRuntimeError: (extensionId: ExtensionIdentifier, err: Error): void => {\n\t\t\t\treturn this._onExtensionRuntimeError(extensionId, err);\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic async _activateById(extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<void> {\n\t\tconst results = await Promise.all(\n\t\t\tthis._extensionHostManagers.map(manager => manager.activate(extensionId, reason))\n\t\t);\n\t\tconst activated = results.some(e => e);\n\t\tif (!activated) {\n\t\t\tthrow new Error(`Unknown extension ${extensionId.value}`);\n\t\t}\n\t}\n\n\tprivate _onWillActivateExtension(extensionId: ExtensionIdentifier, runningLocation: ExtensionRunningLocation): void {\n\t\tthis._runningLocations.set(extensionId, runningLocation);\n\t\tconst extensionStatus = this._getOrCreateExtensionStatus(extensionId);\n\t\textensionStatus.onWillActivate();\n\t}\n\n\tprivate _onDidActivateExtension(extensionId: ExtensionIdentifier, codeLoadingTime: number, activateCallTime: number, activateResolvedTime: number, activationReason: ExtensionActivationReason): void {\n\t\tconst extensionStatus = this._getOrCreateExtensionStatus(extensionId);\n\t\textensionStatus.setActivationTimes(new ActivationTimes(codeLoadingTime, activateCallTime, activateResolvedTime, activationReason));\n\t\tthis._onDidChangeExtensionsStatus.fire([extensionId]);\n\t}\n\n\tprivate _onDidActivateExtensionError(extensionId: ExtensionIdentifier, error: Error): void {\n\t\ttype ExtensionActivationErrorClassification = {\n\t\t\towner: 'alexdima';\n\t\t\tcomment: 'An extension failed to activate';\n\t\t\textensionId: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The identifier of the extension.' };\n\t\t\terror: { classification: 'CallstackOrException'; purpose: 'PerformanceAndHealth'; comment: 'The error message.' };\n\t\t};\n\t\ttype ExtensionActivationErrorEvent = {\n\t\t\textensionId: string;\n\t\t\terror: string;\n\t\t};\n\t\tthis._telemetryService.publicLog2<ExtensionActivationErrorEvent, ExtensionActivationErrorClassification>('extensionActivationError', {\n\t\t\textensionId: extensionId.value,\n\t\t\terror: error.message\n\t\t});\n\t}\n\n\tprivate _onExtensionRuntimeError(extensionId: ExtensionIdentifier, err: Error): void {\n\t\tconst extensionStatus = this._getOrCreateExtensionStatus(extensionId);\n\t\textensionStatus.addRuntimeError(err);\n\t\tthis._onDidChangeExtensionsStatus.fire([extensionId]);\n\t}\n\n\t//#endregion\n\n\tprotected abstract _resolveExtensions(): Promise<ResolvedExtensions>;\n\tprotected abstract _scanSingleExtension(extension: IExtension): Promise<IExtensionDescription | null>;\n\tprotected abstract _onExtensionHostExit(code: number): void;\n\tprotected abstract _resolveAuthority(remoteAuthority: string): Promise<ResolverResult>;\n}\n\nexport class ResolvedExtensions {\n\tconstructor(\n\t\tpublic readonly local: IExtensionDescription[],\n\t\tpublic readonly remote: IExtensionDescription[],\n\t\tpublic readonly hasLocalProcess: boolean,\n\t\tpublic readonly allowRemoteExtensionsInLocalWebWorker: boolean\n\t) { }\n}\n\nexport interface IExtensionHostFactory {\n\tcreateExtensionHost(runningLocations: ExtensionRunningLocationTracker, runningLocation: ExtensionRunningLocation, isInitialStart: boolean): IExtensionHost | null;\n}\n\nclass DeltaExtensionsQueueItem {\n\tconstructor(\n\t\tpublic readonly toAdd: IExtension[],\n\t\tpublic readonly toRemove: string[] | IExtension[]\n\t) { }\n}\n\n/**\n * @argument extensions The extensions to be checked.\n * @argument ignoreWorkspaceTrust Do not take workspace trust into account.\n */\nexport function checkEnabledAndProposedAPI(logService: ILogService, extensionEnablementService: IWorkbenchExtensionEnablementService, extensionsProposedApi: ExtensionsProposedApi, extensions: IExtensionDescription[], ignoreWorkspaceTrust: boolean): IExtensionDescription[] {\n\t// enable or disable proposed API per extension\n\textensionsProposedApi.updateEnabledApiProposals(extensions);\n\n\t// keep only enabled extensions\n\treturn filterEnabledExtensions(logService, extensionEnablementService, extensions, ignoreWorkspaceTrust);\n}\n\n/**\n * Return the subset of extensions that are enabled.\n * @argument ignoreWorkspaceTrust Do not take workspace trust into account.\n */\nexport function filterEnabledExtensions(logService: ILogService, extensionEnablementService: IWorkbenchExtensionEnablementService, extensions: IExtensionDescription[], ignoreWorkspaceTrust: boolean): IExtensionDescription[] {\n\tconst enabledExtensions: IExtensionDescription[] = [], extensionsToCheck: IExtensionDescription[] = [], mappedExtensions: IExtension[] = [];\n\tfor (const extension of extensions) {\n\t\tif (extension.isUnderDevelopment) {\n\t\t\t// Never disable extensions under development\n\t\t\tenabledExtensions.push(extension);\n\t\t} else {\n\t\t\textensionsToCheck.push(extension);\n\t\t\tmappedExtensions.push(toExtension(extension));\n\t\t}\n\t}\n\n\tconst enablementStates = extensionEnablementService.getEnablementStates(mappedExtensions, ignoreWorkspaceTrust ? { trusted: true } : undefined);\n\tfor (let index = 0; index < enablementStates.length; index++) {\n\t\tif (extensionEnablementService.isEnabledEnablementState(enablementStates[index])) {\n\t\t\tenabledExtensions.push(extensionsToCheck[index]);\n\t\t} else {\n\t\t\tif (isCI) {\n\t\t\t\tlogService.info(`filterEnabledExtensions: extension '${extensionsToCheck[index].identifier.value}' is disabled`);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn enabledExtensions;\n}\n\n/**\n * @argument extension The extension to be checked.\n * @argument ignoreWorkspaceTrust Do not take workspace trust into account.\n */\nexport function extensionIsEnabled(logService: ILogService, extensionEnablementService: IWorkbenchExtensionEnablementService, extension: IExtensionDescription, ignoreWorkspaceTrust: boolean): boolean {\n\treturn filterEnabledExtensions(logService, extensionEnablementService, [extension], ignoreWorkspaceTrust).includes(extension);\n}\n\nfunction includes(extensions: IExtensionDescription[], identifier: ExtensionIdentifier): boolean {\n\tfor (const extension of extensions) {\n\t\tif (ExtensionIdentifier.equals(extension.identifier, identifier)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nexport class ExtensionStatus {\n\n\tprivate readonly _messages: IMessage[] = [];\n\tpublic get messages(): IMessage[] {\n\t\treturn this._messages;\n\t}\n\n\tprivate _activationTimes: ActivationTimes | null = null;\n\tpublic get activationTimes(): ActivationTimes | null {\n\t\treturn this._activationTimes;\n\t}\n\n\tprivate _runtimeErrors: Error[] = [];\n\tpublic get runtimeErrors(): Error[] {\n\t\treturn this._runtimeErrors;\n\t}\n\n\tprivate _activationStarted: boolean = false;\n\tpublic get activationStarted(): boolean {\n\t\treturn this._activationStarted;\n\t}\n\n\tconstructor(\n\t\tpublic readonly id: ExtensionIdentifier,\n\t) { }\n\n\tpublic clearRuntimeStatus(): void {\n\t\tthis._activationStarted = false;\n\t\tthis._activationTimes = null;\n\t\tthis._runtimeErrors = [];\n\t}\n\n\tpublic addMessage(msg: IMessage): void {\n\t\tthis._messages.push(msg);\n\t}\n\n\tpublic setActivationTimes(activationTimes: ActivationTimes) {\n\t\tthis._activationTimes = activationTimes;\n\t}\n\n\tpublic addRuntimeError(err: Error): void {\n\t\tthis._runtimeErrors.push(err);\n\t}\n\n\tpublic onWillActivate() {\n\t\tthis._activationStarted = true;\n\t}\n}\n\ninterface IExtensionHostCrashInfo {\n\ttimestamp: number;\n}\n\nexport class ExtensionHostCrashTracker {\n\n\tprivate static _TIME_LIMIT = 5 * 60 * 1000; // 5 minutes\n\tprivate static _CRASH_LIMIT = 3;\n\n\tprivate readonly _recentCrashes: IExtensionHostCrashInfo[] = [];\n\n\tprivate _removeOldCrashes(): void {\n\t\tconst limit = Date.now() - ExtensionHostCrashTracker._TIME_LIMIT;\n\t\twhile (this._recentCrashes.length > 0 && this._recentCrashes[0].timestamp < limit) {\n\t\t\tthis._recentCrashes.shift();\n\t\t}\n\t}\n\n\tpublic registerCrash(): void {\n\t\tthis._removeOldCrashes();\n\t\tthis._recentCrashes.push({ timestamp: Date.now() });\n\t}\n\n\tpublic shouldAutomaticallyRestart(): boolean {\n\t\tthis._removeOldCrashes();\n\t\treturn (this._recentCrashes.length < ExtensionHostCrashTracker._CRASH_LIMIT);\n\t}\n}\n\n/**\n * This can run correctly only on the renderer process because that is the only place\n * where all extension points and all implicit activation events generators are known.\n */\nclass ImplicitActivationAwareReader implements IActivationEventsReader {\n\tpublic readActivationEvents(extensionDescription: IExtensionDescription): string[] {\n\t\treturn ImplicitActivationEvents.readActivationEvents(extensionDescription);\n\t}\n}\n"]}