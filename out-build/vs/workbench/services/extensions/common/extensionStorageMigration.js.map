{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/extensions/common/extensionStorageMigration.ts"],"names":[],"mappings":"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","file":"extensionStorageMigration.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getErrorMessage } from 'vs/base/common/errors';\nimport { URI } from 'vs/base/common/uri';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IExtensionStorageService } from 'vs/platform/extensionManagement/common/extensionStorage';\nimport { FileSystemProviderError, FileSystemProviderErrorCode, IFileService } from 'vs/platform/files/common/files';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\n\n/**\n * An extension storage has following\n * \t- State: Stored using storage service with extension id as key and state as value.\n *  - Resources: Stored under a location scoped to the extension.\n */\nexport async function migrateExtensionStorage(fromExtensionId: string, toExtensionId: string, global: boolean, instantionService: IInstantiationService): Promise<void> {\n\treturn instantionService.invokeFunction(async serviceAccessor => {\n\t\tconst environmentService = serviceAccessor.get(IEnvironmentService);\n\t\tconst userDataProfilesService = serviceAccessor.get(IUserDataProfilesService);\n\t\tconst extensionStorageService = serviceAccessor.get(IExtensionStorageService);\n\t\tconst storageService = serviceAccessor.get(IStorageService);\n\t\tconst uriIdentityService = serviceAccessor.get(IUriIdentityService);\n\t\tconst fileService = serviceAccessor.get(IFileService);\n\t\tconst workspaceContextService = serviceAccessor.get(IWorkspaceContextService);\n\t\tconst logService = serviceAccessor.get(ILogService);\n\t\tconst storageMigratedKey = `extensionStorage.migrate.${fromExtensionId}-${toExtensionId}`;\n\t\tconst migrateLowerCaseStorageKey = fromExtensionId.toLowerCase() === toExtensionId.toLowerCase() ? `extension.storage.migrateFromLowerCaseKey.${fromExtensionId.toLowerCase()}` : undefined;\n\n\t\tif (fromExtensionId === toExtensionId) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst getExtensionStorageLocation = (extensionId: string, global: boolean): URI => {\n\t\t\tif (global) {\n\t\t\t\treturn uriIdentityService.extUri.joinPath(userDataProfilesService.defaultProfile.globalStorageHome, extensionId.toLowerCase() /* Extension id is lower cased for global storage */);\n\t\t\t}\n\t\t\treturn uriIdentityService.extUri.joinPath(environmentService.workspaceStorageHome, workspaceContextService.getWorkspace().id, extensionId);\n\t\t};\n\n\t\tconst storageScope = global ? StorageScope.PROFILE : StorageScope.WORKSPACE;\n\t\tif (!storageService.getBoolean(storageMigratedKey, storageScope, false) && !(migrateLowerCaseStorageKey && storageService.getBoolean(migrateLowerCaseStorageKey, storageScope, false))) {\n\t\t\tlogService.info(`Migrating ${global ? 'global' : 'workspace'} extension storage from ${fromExtensionId} to ${toExtensionId}...`);\n\t\t\t// Migrate state\n\t\t\tconst value = extensionStorageService.getExtensionState(fromExtensionId, global);\n\t\t\tif (value) {\n\t\t\t\textensionStorageService.setExtensionState(toExtensionId, value, global);\n\t\t\t\textensionStorageService.setExtensionState(fromExtensionId, undefined, global);\n\t\t\t}\n\n\t\t\t// Migrate stored files\n\t\t\tconst fromPath = getExtensionStorageLocation(fromExtensionId, global);\n\t\t\tconst toPath = getExtensionStorageLocation(toExtensionId, global);\n\t\t\tif (!uriIdentityService.extUri.isEqual(fromPath, toPath)) {\n\t\t\t\ttry {\n\t\t\t\t\tawait fileService.move(fromPath, toPath, true);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif ((<FileSystemProviderError>error).code !== FileSystemProviderErrorCode.FileNotFound) {\n\t\t\t\t\t\tlogService.info(`Error while migrating ${global ? 'global' : 'workspace'} file storage from '${fromExtensionId}' to '${toExtensionId}'`, getErrorMessage(error));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tlogService.info(`Migrated ${global ? 'global' : 'workspace'} extension storage from ${fromExtensionId} to ${toExtensionId}`);\n\t\t\tstorageService.store(storageMigratedKey, true, storageScope, StorageTarget.MACHINE);\n\t\t}\n\t});\n}\n"]}