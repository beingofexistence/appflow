{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/extensions/common/extensionsProposedApi.ts"],"names":[],"mappings":"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","file":"extensionsProposedApi.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isNonEmptyArray } from 'vs/base/common/arrays';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { ApiProposalName, allApiProposals } from 'vs/workbench/services/extensions/common/extensionsApiProposals';\n\nexport class ExtensionsProposedApi {\n\n\tprivate readonly _envEnablesProposedApiForAll: boolean;\n\tprivate readonly _envEnabledExtensions: Set<string>;\n\tprivate readonly _productEnabledExtensions: Map<string, string[]>;\n\n\tconstructor(\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IWorkbenchEnvironmentService private readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@IProductService productService: IProductService\n\t) {\n\n\t\tthis._envEnabledExtensions = new Set((_environmentService.extensionEnabledProposedApi ?? []).map(id => ExtensionIdentifier.toKey(id)));\n\n\t\tthis._envEnablesProposedApiForAll = true || // always enable proposed API\n\t\t\t!_environmentService.isBuilt || // always allow proposed API when running out of sources\n\t\t\t(_environmentService.isExtensionDevelopment && productService.quality !== 'stable') || // do not allow proposed API against stable builds when developing an extension\n\t\t\t(this._envEnabledExtensions.size === 0 && Array.isArray(_environmentService.extensionEnabledProposedApi)); // always allow proposed API if --enable-proposed-api is provided without extension ID\n\n\t\tthis._productEnabledExtensions = new Map<string, ApiProposalName[]>();\n\n\n\t\t// NEW world - product.json spells out what proposals each extension can use\n\t\tif (productService.extensionEnabledApiProposals) {\n\t\t\tfor (const [k, value] of Object.entries(productService.extensionEnabledApiProposals)) {\n\t\t\t\tconst key = ExtensionIdentifier.toKey(k);\n\t\t\t\tconst proposalNames = value.filter(name => {\n\t\t\t\t\tif (!allApiProposals[<ApiProposalName>name]) {\n\t\t\t\t\t\t_logService.warn(`Via 'product.json#extensionEnabledApiProposals' extension '${key}' wants API proposal '${name}' but that proposal DOES NOT EXIST. Likely, the proposal has been finalized (check 'vscode.d.ts') or was abandoned.`);\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t});\n\t\t\t\tthis._productEnabledExtensions.set(key, proposalNames);\n\t\t\t}\n\t\t}\n\t}\n\n\tupdateEnabledApiProposals(extensions: IExtensionDescription[]): void {\n\t\tfor (const extension of extensions) {\n\t\t\tthis.doUpdateEnabledApiProposals(extension);\n\t\t}\n\t}\n\n\tprivate doUpdateEnabledApiProposals(_extension: IExtensionDescription): void {\n\n\t\t// this is a trick to make the extension description writeable...\n\t\ttype Writeable<T> = { -readonly [P in keyof T]: Writeable<T[P]> };\n\t\tconst extension = <Writeable<IExtensionDescription>>_extension;\n\t\tconst key = ExtensionIdentifier.toKey(_extension.identifier);\n\n\t\t// warn about invalid proposal and remove them from the list\n\t\tif (isNonEmptyArray(extension.enabledApiProposals)) {\n\t\t\textension.enabledApiProposals = extension.enabledApiProposals.filter(name => {\n\t\t\t\tconst result = Boolean(allApiProposals[<ApiProposalName>name]);\n\t\t\t\tif (!result) {\n\t\t\t\t\tthis._logService.error(`Extension '${key}' wants API proposal '${name}' but that proposal DOES NOT EXIST. Likely, the proposal has been finalized (check 'vscode.d.ts') or was abandoned.`);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t});\n\t\t}\n\n\n\t\tif (this._productEnabledExtensions.has(key)) {\n\t\t\t// NOTE that proposals that are listed in product.json override whatever is declared in the extension\n\t\t\t// itself. This is needed for us to know what proposals are used \"in the wild\". Merging product.json-proposals\n\t\t\t// and extension-proposals would break that.\n\n\t\t\tconst productEnabledProposals = this._productEnabledExtensions.get(key)!;\n\n\t\t\t// check for difference between product.json-declaration and package.json-declaration\n\t\t\tconst productSet = new Set(productEnabledProposals);\n\t\t\tconst extensionSet = new Set(extension.enabledApiProposals);\n\t\t\tconst diff = new Set([...extensionSet].filter(a => !productSet.has(a)));\n\t\t\tif (diff.size > 0) {\n\t\t\t\tthis._logService.error(`Extension '${key}' appears in product.json but enables LESS API proposals than the extension wants.\\npackage.json (LOSES): ${[...extensionSet].join(', ')}\\nproduct.json (WINS): ${[...productSet].join(', ')}`);\n\n\t\t\t\tif (this._environmentService.isExtensionDevelopment) {\n\t\t\t\t\tthis._logService.error(`Proceeding with EXTRA proposals (${[...diff].join(', ')}) because extension is in development mode. Still, this EXTENSION WILL BE BROKEN unless product.json is updated.`);\n\t\t\t\t\tproductEnabledProposals.push(...diff);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\textension.enabledApiProposals = productEnabledProposals;\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._envEnablesProposedApiForAll || this._envEnabledExtensions.has(key)) {\n\t\t\t// proposed API usage is not restricted and allowed just like the extension\n\t\t\t// has declared it\n\t\t\treturn;\n\t\t}\n\n\t\tif (!extension.isBuiltin && isNonEmptyArray(extension.enabledApiProposals)) {\n\t\t\t// restrictive: extension cannot use proposed API in this context and its declaration is nulled\n\t\t\tthis._logService.error(`Extension '${extension.identifier.value} CANNOT USE these API proposals '${extension.enabledApiProposals?.join(', ') || '*'}'. You MUST start in extension development mode or use the --enable-proposed-api command line flag`);\n\t\t\textension.enabledApiProposals = [];\n\t\t}\n\t}\n}\n"]}