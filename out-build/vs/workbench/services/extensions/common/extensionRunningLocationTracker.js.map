{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/extensions/common/extensionRunningLocationTracker.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAczF,IAAM,IAAI,GAAV,MAAM,IAAI;QAMhB,IAAW,uBAAuB;YACjC,OAAO,IAAI,CAAC,CAAC,CAAwB;QACtC,CAAC;QAED,IAAW,yBAAyB;YACnC,OAAO,IAAI,CAAC,CAAC,CAA0B;QACxC,CAAC;QAED,YACkB,CAAgD,EAChD,CAAkD,EACrC,CAAyC,EAChD,CAA2C,EACrD,CAAiC,EACT,CAA0D;YAL9E,MAAC,GAAD,CAAC,CAA+C;YAChD,MAAC,GAAD,CAAC,CAAiD;YACpB,MAAC,GAAD,CAAC,CAAuB;YAC/B,MAAC,GAAD,CAAC,CAAyB;YACpC,MAAC,GAAD,CAAC,CAAe;YACQ,MAAC,GAAD,CAAC,CAAwC;YAlBxF,MAAC,GAAkB,IAAI,gBAAG,EAAsD,CAAC;YACjF,MAAC,GAAkC,CAAC,CAAC;YACrC,MAAC,GAAoC,CAAC,CAAC;QAiB3C,CAAC;QAEE,GAAG,CAAC,WAAgB,EAAkB,eAAyC;YACrF,IAAI,CAAC,CAAC,CAAgB,GAAG,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;QACzD,CAAC;QAEM,kBAAkB,CAAC,oBAA2C;YACpE,IAAI,oBAAoB,CAAC,kBAAkB,IAAI,IAAI,CAAC,CAAC,CAAmB,wBAAwB,EAAE;gBACjG,OAAO,IAAI,CAAC,CAAC,CAAmB,wBAAwB,CAAC;aACzD;YAED,OAAO,IAAI,CAAC,CAAC,CAAmC,gBAAgB,CAAC,oBAAoB,CAAC,CAAC;QACxF,CAAC;QAEM,kBAAkB,CAAC,WAAgB;YACzC,OAAO,IAAI,CAAC,CAAC,CAAgB,GAAG,CAAC,WAAW,CAAC,IAAI,IAAI,CAAC;QACvD,CAAC;QAEM,uBAAuB,CAAC,UAA4C,EAAE,sBAAgD;YAC5H,OAAO,IAAI,CAAwB,UAAU,EAAE,IAAI,CAAC,CAAC,EAAiB,kBAAkB,CAAC,EAAE,CAAC,sBAAsB,CAAC,MAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC;QAChJ,CAAC;QAEM,yBAAyB,CAAC,UAA4C,EAAE,wBAA2C;YACzH,OAAO,IAAI,CAAwB,UAAU,EAAE,IAAI,CAAC,CAAC,EAAiB,kBAAkB,CAAC,EAAE,CAAC,kBAAkB,CAAC,IAAI,KAAK,wBAAwB,CAAC,CAAC;QACnJ,CAAC;QAEM,4BAA4B,CAAC,UAA4C,EAAE,oBAA2C;YAC5H,OAAO,IAAI,CAAwB,UAAU,EAAE,IAAI,CAAC,CAAC,EAAiB,kBAAkB,CAAC,EAAE,CAAC,oBAAoB,CAAC,yBAAyB,CAAC,kBAAkB,CAAC,CAAC,CAAC;QACjK,CAAC;QAEO,CAAC,CAAgB,eAAwC,EAAE,iBAAoC,EAAE,mBAA4B;YACpI,2CAA2C;YAC3C,MAAM,UAAU,GAAG,IAAI,gBAAG,EAA4C,CAAC;YACvE,KAAK,MAAM,SAAS,IAAI,eAAe,EAAE;gBACxC,IAAI,SAAS,CAAC,IAAI,IAAI,SAAS,CAAC,OAAO,EAAE;oBACxC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;iBAChD;aACD;YACD,iEAAiE;YACjE,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,CAAC,CAAS,2BAA2B,EAAE,EAAE;gBACrE,IAAI,SAAS,CAAC,IAAI,IAAI,SAAS,CAAC,OAAO,EAAE;oBACxC,MAAM,eAAe,GAAG,IAAI,CAAC,CAAC,CAAgB,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;oBACxE,IAAI,eAAe,IAAI,eAAe,CAAC,IAAI,KAAK,iBAAiB,EAAE;wBAClE,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;qBAChD;iBACD;aACD;YAED,qDAAqD;YACrD,MAAM,MAAM,GAAG,IAAI,gBAAG,EAA6B,CAAC;YACpD,IAAI,WAAW,GAAG,CAAC,CAAC;YACpB,KAAK,MAAM,CAAC,CAAC,EAAE,SAAS,CAAC,IAAI,UAAU,EAAE;gBACxC,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,EAAE,EAAE,WAAW,CAAC,CAAC;aAChD;YAED,MAAM,WAAW,GAAG,CAAC,IAAY,EAAE,EAAU,EAAE,EAAE;gBAChD,KAAK,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,MAAM,EAAE;oBAClC,IAAI,KAAK,KAAK,IAAI,EAAE;wBACnB,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;qBACpB;iBACD;YACF,CAAC,CAAC;YAEF,4DAA4D;YAC5D,KAAK,MAAM,CAAC,CAAC,EAAE,SAAS,CAAC,IAAI,UAAU,EAAE;gBACxC,IAAI,CAAC,SAAS,CAAC,qBAAqB,EAAE;oBACrC,SAAS;iBACT;gBACD,MAAM,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,CAAE,CAAC;gBAClD,KAAK,MAAM,KAAK,IAAI,SAAS,CAAC,qBAAqB,EAAE;oBACpD,MAAM,QAAQ,GAAG,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;oBACnC,IAAI,CAAC,QAAQ,EAAE;wBACd,8CAA8C;wBAC9C,SAAS;qBACT;oBAED,IAAI,QAAQ,KAAK,OAAO,EAAE;wBACzB,4BAA4B;wBAC5B,SAAS;qBACT;oBAED,WAAW,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;iBAC/B;aACD;YAED,sCAAsC;YACtC,MAAM,mBAAmB,GAAG,IAAI,GAAG,EAAkB,CAAC;YACtD,IAAI,YAAY,GAAG,CAAC,CAAC;YACrB,KAAK,MAAM,CAAC,CAAC,EAAE,SAAS,CAAC,IAAI,UAAU,EAAE;gBACxC,MAAM,eAAe,GAAG,IAAI,CAAC,CAAC,CAAgB,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;gBACxE,IAAI,eAAe,EAAE;oBACpB,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,CAAE,CAAC;oBAChD,mBAAmB,CAAC,GAAG,CAAC,KAAK,EAAE,eAAe,CAAC,QAAQ,CAAC,CAAC;oBACzD,YAAY,GAAG,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,eAAe,CAAC,QAAQ,CAAC,CAAC;iBAChE;aACD;YAED,8EAA8E;YAC9E,yDAAyD;YACzD,IAAI,CAAC,IAAI,CAAC,CAAC,CAAmB,sBAAsB,EAAE;gBACrD,+DAA+D;gBAC/D,MAAM,oBAAoB,GAAG,IAAI,CAAC,CAAC,CAAqB,QAAQ,CAAgD,kCAAkC,CAAC,IAAI,EAAE,CAAC;gBAC1J,MAAM,sBAAsB,GAAG,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;gBACjE,MAAM,qCAAqC,GAAG,IAAI,GAAG,EAAkB,CAAC;gBACxE,KAAK,MAAM,WAAW,IAAI,sBAAsB,EAAE;oBACjD,MAAM,kBAAkB,GAAG,oBAAoB,CAAC,WAAW,CAAC,CAAC;oBAC7D,IAAI,OAAO,kBAAkB,KAAK,QAAQ,IAAI,kBAAkB,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,KAAK,kBAAkB,EAAE;wBAC/H,IAAI,CAAC,CAAC,CAAW,IAAI,CAAC,qCAAqC,WAAW,gDAAgD,CAAC,CAAC;wBACxH,SAAS;qBACT;oBACD,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;oBACtC,IAAI,CAAC,KAAK,EAAE;wBACX,4EAA4E;wBAC5E,SAAS;qBACT;oBAED,MAAM,SAAS,GAAG,mBAAmB,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;oBACjD,IAAI,SAAS,EAAE;wBACd,iDAAiD;wBACjD,qCAAqC,CAAC,GAAG,CAAC,kBAAkB,EAAE,SAAS,CAAC,CAAC;wBACzE,SAAS;qBACT;oBAED,MAAM,SAAS,GAAG,qCAAqC,CAAC,GAAG,CAAC,kBAAkB,CAAC,CAAC;oBAChF,IAAI,SAAS,EAAE;wBACd,yDAAyD;wBACzD,mBAAmB,CAAC,GAAG,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;wBAC1C,SAAS;qBACT;oBAED,IAAI,CAAC,mBAAmB,EAAE;wBACzB,IAAI,CAAC,CAAC,CAAW,IAAI,CAAC,qCAAqC,WAAW,iEAAiE,CAAC,CAAC;wBACzI,SAAS;qBACT;oBAED,MAAM,SAAS,GAAG,EAAE,YAAY,CAAC;oBACjC,qCAAqC,CAAC,GAAG,CAAC,kBAAkB,EAAE,SAAS,CAAC,CAAC;oBACzE,mBAAmB,CAAC,GAAG,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;iBAC1C;aACD;YAED,MAAM,MAAM,GAAG,IAAI,gBAAG,EAA6B,CAAC;YACpD,KAAK,MAAM,SAAS,IAAI,eAAe,EAAE;gBACxC,MAAM,KAAK,GAAG,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;gBACpD,MAAM,QAAQ,GAAG,mBAAmB,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBACrD,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;aAC3C;YAED,IAAI,YAAY,GAAG,CAAC,IAAI,mBAAmB,EAAE;gBAC5C,KAAK,IAAI,QAAQ,GAAG,CAAC,EAAE,QAAQ,IAAI,YAAY,EAAE,QAAQ,EAAE,EAAE;oBAC5D,MAAM,YAAY,GAA0B,EAAE,CAAC;oBAC/C,KAAK,MAAM,SAAS,IAAI,eAAe,EAAE;wBACxC,IAAI,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,KAAK,QAAQ,EAAE;4BAClD,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;yBACxC;qBACD;oBACD,IAAI,CAAC,CAAC,CAAW,IAAI,CAAC,wBAAwB,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAAC;iBACzH;aACD;YAED,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,WAAW,EAAE,YAAY,EAAE,CAAC;QAC1D,CAAC;QAEM,sBAAsB,CAAC,eAAwC,EAAE,gBAAyC,EAAE,mBAA4B;YAC9I,OAAO,IAAI,CAAC,CAAC,CAAyB,IAAI,CAAC,CAAC,EAAiB,eAAe,EAAE,gBAAgB,EAAE,mBAAmB,CAAC,CAAC,eAAe,CAAC;QACtI,CAAC;QAEO,CAAC,CAAyB,uBAAgF,EAAE,eAAwC,EAAE,gBAAyC,EAAE,mBAA4B;YACpO,yDAAyD;YACzD,eAAe,GAAG,eAAe,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,uBAAuB,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;YAC1G,gBAAgB,GAAG,gBAAgB,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,uBAAuB,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;YAE5G,MAAM,kBAAkB,GAAG,IAAA,uBAAG,EAC7B,eAAe,EACf,gBAAgB,EAChB,CAAC,SAAS,EAAE,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,EACjD,CAAC,WAAW,EAAE,cAAc,EAAE,kBAAkB,EAAE,mBAAmB,EAAE,UAAU,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAwB,qBAAqB,CAAC,WAAW,EAAE,cAAc,EAAE,kBAAkB,EAAE,mBAAmB,EAAE,UAAU,CAAC,CAC3N,CAAC;YAEF,MAAM,UAAU,GAAG,IAAI,gBAAG,EAA4C,CAAC;YACvE,KAAK,MAAM,SAAS,IAAI,eAAe,EAAE;gBACxC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;aAChD;YACD,KAAK,MAAM,SAAS,IAAI,gBAAgB,EAAE;gBACzC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC;aAChD;YAED,MAAM,MAAM,GAAG,IAAI,gBAAG,EAAsD,CAAC;YAC7E,MAAM,sBAAsB,GAA4B,EAAE,CAAC;YAC3D,MAAM,wBAAwB,GAA4B,EAAE,CAAC;YAC7D,KAAK,MAAM,CAAC,cAAc,EAAE,iBAAiB,CAAC,IAAI,kBAAkB,EAAE;gBACrE,IAAI,eAAe,GAAoC,IAAI,CAAC;gBAC5D,IAAI,iBAAiB,2CAAmC,EAAE;oBACzD,MAAM,oBAAoB,GAAG,UAAU,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;oBAC5D,IAAI,oBAAoB,EAAE;wBACzB,sBAAsB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;qBAClD;iBACD;qBAAM,IAAI,iBAAiB,6CAAqC,EAAE;oBAClE,MAAM,oBAAoB,GAAG,UAAU,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;oBAC5D,IAAI,oBAAoB,EAAE;wBACzB,wBAAwB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;qBACpD;iBACD;qBAAM,IAAI,iBAAiB,qCAA6B,EAAE;oBAC1D,eAAe,GAAG,IAAI,8BAAG,EAAoB,CAAC;iBAC9C;gBACD,MAAM,CAAC,GAAG,CAAC,cAAc,EAAE,eAAe,CAAC,CAAC;aAC5C;YAED,MAAM,EAAE,UAAU,EAAE,WAAW,EAAE,GAAG,IAAI,CAAC,CAAC,CAAgB,sBAAsB,0CAAkC,mBAAmB,CAAC,CAAC;YACvI,KAAK,MAAM,SAAS,IAAI,sBAAsB,EAAE;gBAC/C,MAAM,QAAQ,GAAG,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;gBAC3D,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,8BAAG,CAAyB,QAAQ,CAAC,CAAC,CAAC;aAC5E;YACD,MAAM,EAAE,UAAU,EAAE,wBAAwB,EAAE,WAAW,EAAE,yBAAyB,EAAE,GAAG,IAAI,CAAC,CAAC,CAAgB,wBAAwB,4CAAoC,mBAAmB,CAAC,CAAC;YAChM,KAAK,MAAM,SAAS,IAAI,wBAAwB,EAAE;gBACjD,MAAM,QAAQ,GAAG,wBAAwB,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;gBACzE,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,8BAAG,CAA2B,QAAQ,CAAC,CAAC,CAAC;aAC9E;YAED,gEAAgE;YAChE,KAAK,MAAM,CAAC,cAAc,EAAE,eAAe,CAAC,IAAI,uBAAuB,EAAE;gBACxE,IAAI,eAAe,EAAE;oBACpB,MAAM,CAAC,GAAG,CAAC,cAAc,EAAE,eAAe,CAAC,CAAC;iBAC5C;aACD;YAED,OAAO,EAAE,eAAe,EAAE,MAAM,EAAE,uBAAuB,EAAE,WAAW,EAAE,yBAAyB,EAAE,yBAAyB,EAAE,CAAC;QAChI,CAAC;QAEM,yBAAyB,CAAC,eAAwC,EAAE,gBAAyC;YACnH,MAAM,EAAE,eAAe,EAAE,uBAAuB,EAAE,yBAAyB,EAAE,GAAG,IAAI,CAAC,CAAC,CAAyB,IAAI,CAAC,CAAC,EAAiB,eAAe,EAAE,gBAAgB,EAAE,IAAI,CAAC,CAAC;YAC/K,IAAI,CAAC,CAAC,GAAkB,eAAe,CAAC;YACxC,IAAI,CAAC,CAAC,GAA0B,uBAAuB,CAAC;YACxD,IAAI,CAAC,CAAC,GAA4B,yBAAyB,CAAC;QAC7D,CAAC;QAED;;WAEG;QACI,eAAe,CAAC,KAA8B,EAAE,QAA+B;YACrF,8BAA8B;YAC9B,MAAM,sBAAsB,GAAG,IAAI,gBAAG,EAAsD,CAAC;YAC7F,KAAK,MAAM,WAAW,IAAI,QAAQ,EAAE;gBACnC,MAAM,YAAY,GAAG,WAAW,CAAC;gBACjC,sBAAsB,CAAC,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAgB,GAAG,CAAC,YAAY,CAAC,IAAI,IAAI,CAAC,CAAC;gBAC1F,IAAI,CAAC,CAAC,CAAgB,MAAM,CAAC,YAAY,CAAC,CAAC;aAC3C;YAED,iCAAiC;YACjC,IAAI,CAAC,CAAC,CAAwC,KAAK,CAAC,CAAC;YAErD,OAAO,sBAAsB,CAAC;QAC/B,CAAC;QAED;;WAEG;QACK,CAAC,CAAwC,KAA8B;YAC9E,iCAAiC;YACjC,MAAM,sBAAsB,GAA4B,EAAE,CAAC;YAC3D,MAAM,wBAAwB,GAA4B,EAAE,CAAC;YAC7D,KAAK,MAAM,SAAS,IAAI,KAAK,EAAE;gBAC9B,MAAM,aAAa,GAAG,IAAI,CAAC,kBAAkB,CAAC,SAAS,CAAC,CAAC;gBACzD,MAAM,QAAQ,GAAG,SAAS,CAAC,iBAAiB,CAAC,MAAM,KAAK,iBAAO,CAAC,YAAY,CAAC;gBAC7E,MAAM,iBAAiB,GAAG,IAAI,CAAC,CAAC,CAAwB,qBAAqB,CAAC,SAAS,CAAC,UAAU,EAAE,aAAa,EAAE,CAAC,QAAQ,EAAE,QAAQ,0CAAkC,CAAC;gBACzK,IAAI,eAAe,GAAoC,IAAI,CAAC;gBAC5D,IAAI,iBAAiB,2CAAmC,EAAE;oBACzD,sBAAsB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iBACvC;qBAAM,IAAI,iBAAiB,6CAAqC,EAAE;oBAClE,wBAAwB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iBACzC;qBAAM,IAAI,iBAAiB,qCAA6B,EAAE;oBAC1D,eAAe,GAAG,IAAI,8BAAG,EAAoB,CAAC;iBAC9C;gBACD,IAAI,CAAC,CAAC,CAAgB,GAAG,CAAC,SAAS,CAAC,UAAU,EAAE,eAAe,CAAC,CAAC;aACjE;YAED,MAAM,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,CAAC,CAAgB,sBAAsB,0CAAkC,KAAK,CAAC,CAAC;YAC5G,KAAK,MAAM,SAAS,IAAI,sBAAsB,EAAE;gBAC/C,MAAM,QAAQ,GAAG,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;gBAC3D,IAAI,CAAC,CAAC,CAAgB,GAAG,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,8BAAG,CAAyB,QAAQ,CAAC,CAAC,CAAC;aAC3F;YAED,MAAM,EAAE,UAAU,EAAE,6BAA6B,EAAE,GAAG,IAAI,CAAC,CAAC,CAAgB,wBAAwB,4CAAoC,KAAK,CAAC,CAAC;YAC/I,KAAK,MAAM,SAAS,IAAI,wBAAwB,EAAE;gBACjD,MAAM,QAAQ,GAAG,6BAA6B,CAAC,GAAG,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;gBAC9E,IAAI,CAAC,CAAC,CAAgB,GAAG,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,8BAAG,CAA2B,QAAQ,CAAC,CAAC,CAAC;aAC7F;QACF,CAAC;KACD,CAAA;IArTY,oBAAI;mBAAJ,IAAI;QAiBd,WAAA,wBAAG,CAAA;QACH,WAAA,mBAAG,CAAA;QACH,WAAA,SAAG,CAAA;QACH,WAAA,yCAAI,CAAA;OApBM,IAAI,CAqThB;IAED,SAAgB,IAAI,CAAwB,UAA4C,EAAE,eAAwE,EAAE,SAAoE;QACvO,OAAO,UAAU,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE;YAChC,MAAM,kBAAkB,GAAG,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAC/D,OAAO,kBAAkB,IAAI,SAAS,CAAC,kBAAkB,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;IACJ,CAAC;IALD,oBAKC;IAED,SAAgB,IAAI,CAAuB,UAA0C,EAAE,eAAwE,EAAE,SAAoE;QACpO,OAAO,UAAU,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE;YAChC,MAAM,kBAAkB,GAAG,eAAe,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YACpD,OAAO,kBAAkB,IAAI,SAAS,CAAC,kBAAkB,CAAC,CAAC;QAC5D,CAAC,CAAC,CAAC;IACJ,CAAC;IALD,oBAKC","file":"extensionRunningLocationTracker.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from 'vs/base/common/network';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ExtensionKind } from 'vs/platform/environment/common/environment';\nimport { ExtensionIdentifier, ExtensionIdentifierMap, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IReadOnlyExtensionDescriptionRegistry } from 'vs/workbench/services/extensions/common/extensionDescriptionRegistry';\nimport { ExtensionHostKind, ExtensionRunningPreference, IExtensionHostKindPicker, determineExtensionHostKinds } from 'vs/workbench/services/extensions/common/extensionHostKind';\nimport { IExtensionHostManager } from 'vs/workbench/services/extensions/common/extensionHostManager';\nimport { IExtensionManifestPropertiesService } from 'vs/workbench/services/extensions/common/extensionManifestPropertiesService';\nimport { ExtensionRunningLocation, LocalProcessRunningLocation, LocalWebWorkerRunningLocation, RemoteRunningLocation } from 'vs/workbench/services/extensions/common/extensionRunningLocation';\n\nexport class ExtensionRunningLocationTracker {\n\n\tprivate _runningLocation = new ExtensionIdentifierMap<ExtensionRunningLocation | null>();\n\tprivate _maxLocalProcessAffinity: number = 0;\n\tprivate _maxLocalWebWorkerAffinity: number = 0;\n\n\tpublic get maxLocalProcessAffinity(): number {\n\t\treturn this._maxLocalProcessAffinity;\n\t}\n\n\tpublic get maxLocalWebWorkerAffinity(): number {\n\t\treturn this._maxLocalWebWorkerAffinity;\n\t}\n\n\tconstructor(\n\t\tprivate readonly _registry: IReadOnlyExtensionDescriptionRegistry,\n\t\tprivate readonly _extensionHostKindPicker: IExtensionHostKindPicker,\n\t\t@IWorkbenchEnvironmentService private readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IExtensionManifestPropertiesService private readonly _extensionManifestPropertiesService: IExtensionManifestPropertiesService,\n\t) { }\n\n\tpublic set(extensionId: ExtensionIdentifier, runningLocation: ExtensionRunningLocation) {\n\t\tthis._runningLocation.set(extensionId, runningLocation);\n\t}\n\n\tpublic readExtensionKinds(extensionDescription: IExtensionDescription): ExtensionKind[] {\n\t\tif (extensionDescription.isUnderDevelopment && this._environmentService.extensionDevelopmentKind) {\n\t\t\treturn this._environmentService.extensionDevelopmentKind;\n\t\t}\n\n\t\treturn this._extensionManifestPropertiesService.getExtensionKind(extensionDescription);\n\t}\n\n\tpublic getRunningLocation(extensionId: ExtensionIdentifier): ExtensionRunningLocation | null {\n\t\treturn this._runningLocation.get(extensionId) || null;\n\t}\n\n\tpublic filterByRunningLocation(extensions: readonly IExtensionDescription[], desiredRunningLocation: ExtensionRunningLocation): IExtensionDescription[] {\n\t\treturn filterExtensionDescriptions(extensions, this._runningLocation, extRunningLocation => desiredRunningLocation.equals(extRunningLocation));\n\t}\n\n\tpublic filterByExtensionHostKind(extensions: readonly IExtensionDescription[], desiredExtensionHostKind: ExtensionHostKind): IExtensionDescription[] {\n\t\treturn filterExtensionDescriptions(extensions, this._runningLocation, extRunningLocation => extRunningLocation.kind === desiredExtensionHostKind);\n\t}\n\n\tpublic filterByExtensionHostManager(extensions: readonly IExtensionDescription[], extensionHostManager: IExtensionHostManager): IExtensionDescription[] {\n\t\treturn filterExtensionDescriptions(extensions, this._runningLocation, extRunningLocation => extensionHostManager.representsRunningLocation(extRunningLocation));\n\t}\n\n\tprivate _computeAffinity(inputExtensions: IExtensionDescription[], extensionHostKind: ExtensionHostKind, isInitialAllocation: boolean): { affinities: ExtensionIdentifierMap<number>; maxAffinity: number } {\n\t\t// Only analyze extensions that can execute\n\t\tconst extensions = new ExtensionIdentifierMap<IExtensionDescription>();\n\t\tfor (const extension of inputExtensions) {\n\t\t\tif (extension.main || extension.browser) {\n\t\t\t\textensions.set(extension.identifier, extension);\n\t\t\t}\n\t\t}\n\t\t// Also add existing extensions of the same kind that can execute\n\t\tfor (const extension of this._registry.getAllExtensionDescriptions()) {\n\t\t\tif (extension.main || extension.browser) {\n\t\t\t\tconst runningLocation = this._runningLocation.get(extension.identifier);\n\t\t\t\tif (runningLocation && runningLocation.kind === extensionHostKind) {\n\t\t\t\t\textensions.set(extension.identifier, extension);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Initially, each extension belongs to its own group\n\t\tconst groups = new ExtensionIdentifierMap<number>();\n\t\tlet groupNumber = 0;\n\t\tfor (const [_, extension] of extensions) {\n\t\t\tgroups.set(extension.identifier, ++groupNumber);\n\t\t}\n\n\t\tconst changeGroup = (from: number, to: number) => {\n\t\t\tfor (const [key, group] of groups) {\n\t\t\t\tif (group === from) {\n\t\t\t\t\tgroups.set(key, to);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// We will group things together when there are dependencies\n\t\tfor (const [_, extension] of extensions) {\n\t\t\tif (!extension.extensionDependencies) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst myGroup = groups.get(extension.identifier)!;\n\t\t\tfor (const depId of extension.extensionDependencies) {\n\t\t\t\tconst depGroup = groups.get(depId);\n\t\t\t\tif (!depGroup) {\n\t\t\t\t\t// probably can't execute, so it has no impact\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (depGroup === myGroup) {\n\t\t\t\t\t// already in the same group\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tchangeGroup(depGroup, myGroup);\n\t\t\t}\n\t\t}\n\n\t\t// Initialize with existing affinities\n\t\tconst resultingAffinities = new Map<number, number>();\n\t\tlet lastAffinity = 0;\n\t\tfor (const [_, extension] of extensions) {\n\t\t\tconst runningLocation = this._runningLocation.get(extension.identifier);\n\t\t\tif (runningLocation) {\n\t\t\t\tconst group = groups.get(extension.identifier)!;\n\t\t\t\tresultingAffinities.set(group, runningLocation.affinity);\n\t\t\t\tlastAffinity = Math.max(lastAffinity, runningLocation.affinity);\n\t\t\t}\n\t\t}\n\n\t\t// When doing extension host debugging, we will ignore the configured affinity\n\t\t// because we can currently debug a single extension host\n\t\tif (!this._environmentService.isExtensionDevelopment) {\n\t\t\t// Go through each configured affinity and try to accomodate it\n\t\t\tconst configuredAffinities = this._configurationService.getValue<{ [extensionId: string]: number } | undefined>('extensions.experimental.affinity') || {};\n\t\t\tconst configuredExtensionIds = Object.keys(configuredAffinities);\n\t\t\tconst configuredAffinityToResultingAffinity = new Map<number, number>();\n\t\t\tfor (const extensionId of configuredExtensionIds) {\n\t\t\t\tconst configuredAffinity = configuredAffinities[extensionId];\n\t\t\t\tif (typeof configuredAffinity !== 'number' || configuredAffinity <= 0 || Math.floor(configuredAffinity) !== configuredAffinity) {\n\t\t\t\t\tthis._logService.info(`Ignoring configured affinity for '${extensionId}' because the value is not a positive integer.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst group = groups.get(extensionId);\n\t\t\t\tif (!group) {\n\t\t\t\t\t// The extension is not known or cannot execute for this extension host kind\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst affinity1 = resultingAffinities.get(group);\n\t\t\t\tif (affinity1) {\n\t\t\t\t\t// Affinity for this group is already established\n\t\t\t\t\tconfiguredAffinityToResultingAffinity.set(configuredAffinity, affinity1);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst affinity2 = configuredAffinityToResultingAffinity.get(configuredAffinity);\n\t\t\t\tif (affinity2) {\n\t\t\t\t\t// Affinity for this configuration is already established\n\t\t\t\t\tresultingAffinities.set(group, affinity2);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (!isInitialAllocation) {\n\t\t\t\t\tthis._logService.info(`Ignoring configured affinity for '${extensionId}' because extension host(s) are already running. Reload window.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst affinity3 = ++lastAffinity;\n\t\t\t\tconfiguredAffinityToResultingAffinity.set(configuredAffinity, affinity3);\n\t\t\t\tresultingAffinities.set(group, affinity3);\n\t\t\t}\n\t\t}\n\n\t\tconst result = new ExtensionIdentifierMap<number>();\n\t\tfor (const extension of inputExtensions) {\n\t\t\tconst group = groups.get(extension.identifier) || 0;\n\t\t\tconst affinity = resultingAffinities.get(group) || 0;\n\t\t\tresult.set(extension.identifier, affinity);\n\t\t}\n\n\t\tif (lastAffinity > 0 && isInitialAllocation) {\n\t\t\tfor (let affinity = 1; affinity <= lastAffinity; affinity++) {\n\t\t\t\tconst extensionIds: ExtensionIdentifier[] = [];\n\t\t\t\tfor (const extension of inputExtensions) {\n\t\t\t\t\tif (result.get(extension.identifier) === affinity) {\n\t\t\t\t\t\textensionIds.push(extension.identifier);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._logService.info(`Placing extension(s) ${extensionIds.map(e => e.value).join(', ')} on a separate extension host.`);\n\t\t\t}\n\t\t}\n\n\t\treturn { affinities: result, maxAffinity: lastAffinity };\n\t}\n\n\tpublic computeRunningLocation(localExtensions: IExtensionDescription[], remoteExtensions: IExtensionDescription[], isInitialAllocation: boolean): ExtensionIdentifierMap<ExtensionRunningLocation | null> {\n\t\treturn this._doComputeRunningLocation(this._runningLocation, localExtensions, remoteExtensions, isInitialAllocation).runningLocation;\n\t}\n\n\tprivate _doComputeRunningLocation(existingRunningLocation: ExtensionIdentifierMap<ExtensionRunningLocation | null>, localExtensions: IExtensionDescription[], remoteExtensions: IExtensionDescription[], isInitialAllocation: boolean): { runningLocation: ExtensionIdentifierMap<ExtensionRunningLocation | null>; maxLocalProcessAffinity: number; maxLocalWebWorkerAffinity: number } {\n\t\t// Skip extensions that have an existing running location\n\t\tlocalExtensions = localExtensions.filter(extension => !existingRunningLocation.has(extension.identifier));\n\t\tremoteExtensions = remoteExtensions.filter(extension => !existingRunningLocation.has(extension.identifier));\n\n\t\tconst extensionHostKinds = determineExtensionHostKinds(\n\t\t\tlocalExtensions,\n\t\t\tremoteExtensions,\n\t\t\t(extension) => this.readExtensionKinds(extension),\n\t\t\t(extensionId, extensionKinds, isInstalledLocally, isInstalledRemotely, preference) => this._extensionHostKindPicker.pickExtensionHostKind(extensionId, extensionKinds, isInstalledLocally, isInstalledRemotely, preference)\n\t\t);\n\n\t\tconst extensions = new ExtensionIdentifierMap<IExtensionDescription>();\n\t\tfor (const extension of localExtensions) {\n\t\t\textensions.set(extension.identifier, extension);\n\t\t}\n\t\tfor (const extension of remoteExtensions) {\n\t\t\textensions.set(extension.identifier, extension);\n\t\t}\n\n\t\tconst result = new ExtensionIdentifierMap<ExtensionRunningLocation | null>();\n\t\tconst localProcessExtensions: IExtensionDescription[] = [];\n\t\tconst localWebWorkerExtensions: IExtensionDescription[] = [];\n\t\tfor (const [extensionIdKey, extensionHostKind] of extensionHostKinds) {\n\t\t\tlet runningLocation: ExtensionRunningLocation | null = null;\n\t\t\tif (extensionHostKind === ExtensionHostKind.LocalProcess) {\n\t\t\t\tconst extensionDescription = extensions.get(extensionIdKey);\n\t\t\t\tif (extensionDescription) {\n\t\t\t\t\tlocalProcessExtensions.push(extensionDescription);\n\t\t\t\t}\n\t\t\t} else if (extensionHostKind === ExtensionHostKind.LocalWebWorker) {\n\t\t\t\tconst extensionDescription = extensions.get(extensionIdKey);\n\t\t\t\tif (extensionDescription) {\n\t\t\t\t\tlocalWebWorkerExtensions.push(extensionDescription);\n\t\t\t\t}\n\t\t\t} else if (extensionHostKind === ExtensionHostKind.Remote) {\n\t\t\t\trunningLocation = new RemoteRunningLocation();\n\t\t\t}\n\t\t\tresult.set(extensionIdKey, runningLocation);\n\t\t}\n\n\t\tconst { affinities, maxAffinity } = this._computeAffinity(localProcessExtensions, ExtensionHostKind.LocalProcess, isInitialAllocation);\n\t\tfor (const extension of localProcessExtensions) {\n\t\t\tconst affinity = affinities.get(extension.identifier) || 0;\n\t\t\tresult.set(extension.identifier, new LocalProcessRunningLocation(affinity));\n\t\t}\n\t\tconst { affinities: localWebWorkerAffinities, maxAffinity: maxLocalWebWorkerAffinity } = this._computeAffinity(localWebWorkerExtensions, ExtensionHostKind.LocalWebWorker, isInitialAllocation);\n\t\tfor (const extension of localWebWorkerExtensions) {\n\t\t\tconst affinity = localWebWorkerAffinities.get(extension.identifier) || 0;\n\t\t\tresult.set(extension.identifier, new LocalWebWorkerRunningLocation(affinity));\n\t\t}\n\n\t\t// Add extensions that already have an existing running location\n\t\tfor (const [extensionIdKey, runningLocation] of existingRunningLocation) {\n\t\t\tif (runningLocation) {\n\t\t\t\tresult.set(extensionIdKey, runningLocation);\n\t\t\t}\n\t\t}\n\n\t\treturn { runningLocation: result, maxLocalProcessAffinity: maxAffinity, maxLocalWebWorkerAffinity: maxLocalWebWorkerAffinity };\n\t}\n\n\tpublic initializeRunningLocation(localExtensions: IExtensionDescription[], remoteExtensions: IExtensionDescription[]): void {\n\t\tconst { runningLocation, maxLocalProcessAffinity, maxLocalWebWorkerAffinity } = this._doComputeRunningLocation(this._runningLocation, localExtensions, remoteExtensions, true);\n\t\tthis._runningLocation = runningLocation;\n\t\tthis._maxLocalProcessAffinity = maxLocalProcessAffinity;\n\t\tthis._maxLocalWebWorkerAffinity = maxLocalWebWorkerAffinity;\n\t}\n\n\t/**\n\t * Returns the running locations for the removed extensions.\n\t */\n\tpublic deltaExtensions(toAdd: IExtensionDescription[], toRemove: ExtensionIdentifier[]): ExtensionIdentifierMap<ExtensionRunningLocation | null> {\n\t\t// Remove old running location\n\t\tconst removedRunningLocation = new ExtensionIdentifierMap<ExtensionRunningLocation | null>();\n\t\tfor (const extensionId of toRemove) {\n\t\t\tconst extensionKey = extensionId;\n\t\t\tremovedRunningLocation.set(extensionKey, this._runningLocation.get(extensionKey) || null);\n\t\t\tthis._runningLocation.delete(extensionKey);\n\t\t}\n\n\t\t// Determine new running location\n\t\tthis._updateRunningLocationForAddedExtensions(toAdd);\n\n\t\treturn removedRunningLocation;\n\t}\n\n\t/**\n\t * Update `this._runningLocation` with running locations for newly enabled/installed extensions.\n\t */\n\tprivate _updateRunningLocationForAddedExtensions(toAdd: IExtensionDescription[]): void {\n\t\t// Determine new running location\n\t\tconst localProcessExtensions: IExtensionDescription[] = [];\n\t\tconst localWebWorkerExtensions: IExtensionDescription[] = [];\n\t\tfor (const extension of toAdd) {\n\t\t\tconst extensionKind = this.readExtensionKinds(extension);\n\t\t\tconst isRemote = extension.extensionLocation.scheme === Schemas.vscodeRemote;\n\t\t\tconst extensionHostKind = this._extensionHostKindPicker.pickExtensionHostKind(extension.identifier, extensionKind, !isRemote, isRemote, ExtensionRunningPreference.None);\n\t\t\tlet runningLocation: ExtensionRunningLocation | null = null;\n\t\t\tif (extensionHostKind === ExtensionHostKind.LocalProcess) {\n\t\t\t\tlocalProcessExtensions.push(extension);\n\t\t\t} else if (extensionHostKind === ExtensionHostKind.LocalWebWorker) {\n\t\t\t\tlocalWebWorkerExtensions.push(extension);\n\t\t\t} else if (extensionHostKind === ExtensionHostKind.Remote) {\n\t\t\t\trunningLocation = new RemoteRunningLocation();\n\t\t\t}\n\t\t\tthis._runningLocation.set(extension.identifier, runningLocation);\n\t\t}\n\n\t\tconst { affinities } = this._computeAffinity(localProcessExtensions, ExtensionHostKind.LocalProcess, false);\n\t\tfor (const extension of localProcessExtensions) {\n\t\t\tconst affinity = affinities.get(extension.identifier) || 0;\n\t\t\tthis._runningLocation.set(extension.identifier, new LocalProcessRunningLocation(affinity));\n\t\t}\n\n\t\tconst { affinities: webWorkerExtensionsAffinities } = this._computeAffinity(localWebWorkerExtensions, ExtensionHostKind.LocalWebWorker, false);\n\t\tfor (const extension of localWebWorkerExtensions) {\n\t\t\tconst affinity = webWorkerExtensionsAffinities.get(extension.identifier) || 0;\n\t\t\tthis._runningLocation.set(extension.identifier, new LocalWebWorkerRunningLocation(affinity));\n\t\t}\n\t}\n}\n\nexport function filterExtensionDescriptions(extensions: readonly IExtensionDescription[], runningLocation: ExtensionIdentifierMap<ExtensionRunningLocation | null>, predicate: (extRunningLocation: ExtensionRunningLocation) => boolean): IExtensionDescription[] {\n\treturn extensions.filter((ext) => {\n\t\tconst extRunningLocation = runningLocation.get(ext.identifier);\n\t\treturn extRunningLocation && predicate(extRunningLocation);\n\t});\n}\n\nexport function filterExtensionIdentifiers(extensions: readonly ExtensionIdentifier[], runningLocation: ExtensionIdentifierMap<ExtensionRunningLocation | null>, predicate: (extRunningLocation: ExtensionRunningLocation) => boolean): ExtensionIdentifier[] {\n\treturn extensions.filter((ext) => {\n\t\tconst extRunningLocation = runningLocation.get(ext);\n\t\treturn extRunningLocation && predicate(extRunningLocation);\n\t});\n}\n"]}