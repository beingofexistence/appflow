{"version":3,"sources":["vs/workbench/services/extensions/common/extensionHostManager.ts"],"names":[],"mappings":"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","file":"extensionHostManager.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Barrier, IntervalTimer } from 'vs/base/common/async';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport * as errors from 'vs/base/common/errors';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { StopWatch } from 'vs/base/common/stopwatch';\nimport { URI } from 'vs/base/common/uri';\nimport { IMessagePassingProtocol } from 'vs/base/parts/ipc/common/ipc';\nimport * as nls from 'vs/nls';\nimport { Categories } from 'vs/platform/action/common/actionCommonCategories';\nimport { Action2, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { RemoteAuthorityResolverErrorCode, getRemoteAuthorityPrefix } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { ExtHostCustomersRegistry, IInternalExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport { ExtensionHostKind, extensionHostKindToString } from 'vs/workbench/services/extensions/common/extensionHostKind';\nimport { IExtensionDescriptionDelta } from 'vs/workbench/services/extensions/common/extensionHostProtocol';\nimport { IExtensionHostProxy, IResolveAuthorityResult } from 'vs/workbench/services/extensions/common/extensionHostProxy';\nimport { ExtensionRunningLocation } from 'vs/workbench/services/extensions/common/extensionRunningLocation';\nimport { ActivationKind, ExtensionActivationReason, ExtensionHostExtensions, ExtensionHostStartup, IExtensionHost, IInternalExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { Proxied, ProxyIdentifier } from 'vs/workbench/services/extensions/common/proxyIdentifier';\nimport { IRPCProtocolLogger, RPCProtocol, RequestInitiator, ResponsiveState } from 'vs/workbench/services/extensions/common/rpcProtocol';\n\n// Enable to see detailed message communication between window and extension host\nconst LOG_EXTENSION_HOST_COMMUNICATION = false;\nconst LOG_USE_COLORS = true;\n\nexport interface IExtensionHostManager {\n\treadonly kind: ExtensionHostKind;\n\treadonly startup: ExtensionHostStartup;\n\treadonly onDidExit: Event<[number, string | null]>;\n\treadonly onDidChangeResponsiveState: Event<ResponsiveState>;\n\tdispose(): void;\n\tready(): Promise<void>;\n\trepresentsRunningLocation(runningLocation: ExtensionRunningLocation): boolean;\n\tdeltaExtensions(extensionsDelta: IExtensionDescriptionDelta): Promise<void>;\n\tcontainsExtension(extensionId: ExtensionIdentifier): boolean;\n\tactivate(extension: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<boolean>;\n\tactivateByEvent(activationEvent: string, activationKind: ActivationKind): Promise<void>;\n\tactivationEventIsDone(activationEvent: string): boolean;\n\tgetInspectPort(tryEnableInspector: boolean): Promise<number>;\n\tresolveAuthority(remoteAuthority: string, resolveAttempt: number): Promise<IResolveAuthorityResult>;\n\t/**\n\t * Returns `null` if no resolver for `remoteAuthority` is found.\n\t */\n\tgetCanonicalURI(remoteAuthority: string, uri: URI): Promise<URI | null>;\n\tstart(extensionRegistryVersionId: number, allExtensions: readonly IExtensionDescription[], myExtensions: ExtensionIdentifier[]): Promise<void>;\n\textensionTestsExecute(): Promise<number>;\n\tsetRemoteEnvironment(env: { [key: string]: string | null }): Promise<void>;\n}\n\nexport function createExtensionHostManager(instantiationService: IInstantiationService, extensionHost: IExtensionHost, initialActivationEvents: string[], internalExtensionService: IInternalExtensionService): IExtensionHostManager {\n\tif (extensionHost.startup === ExtensionHostStartup.Lazy && initialActivationEvents.length === 0) {\n\t\treturn instantiationService.createInstance(LazyCreateExtensionHostManager, extensionHost, internalExtensionService);\n\t}\n\treturn instantiationService.createInstance(ExtensionHostManager, extensionHost, initialActivationEvents, internalExtensionService);\n}\n\ntype ExtensionHostStartupClassification = {\n\towner: 'alexdima';\n\tcomment: 'The startup state of the extension host';\n\ttime: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The time reported by Date.now().' };\n\taction: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The action: starting, success or error.' };\n\tkind: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The extension host kind: LocalProcess, LocalWebWorker or Remote.' };\n\terrorName?: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The error name.' };\n\terrorMessage?: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The error message.' };\n\terrorStack?: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The error stack.' };\n};\n\ntype ExtensionHostStartupEvent = {\n\ttime: number;\n\taction: 'starting' | 'success' | 'error';\n\tkind: string;\n\terrorName?: string;\n\terrorMessage?: string;\n\terrorStack?: string;\n};\n\nclass ExtensionHostManager extends Disposable implements IExtensionHostManager {\n\n\tpublic readonly onDidExit: Event<[number, string | null]>;\n\n\tprivate readonly _onDidChangeResponsiveState: Emitter<ResponsiveState> = this._register(new Emitter<ResponsiveState>());\n\tpublic readonly onDidChangeResponsiveState: Event<ResponsiveState> = this._onDidChangeResponsiveState.event;\n\n\t/**\n\t * A map of already requested activation events to speed things up if the same activation event is triggered multiple times.\n\t */\n\tprivate readonly _cachedActivationEvents: Map<string, Promise<void>>;\n\tprivate readonly _resolvedActivationEvents: Set<string>;\n\tprivate _rpcProtocol: RPCProtocol | null;\n\tprivate readonly _customers: IDisposable[];\n\tprivate readonly _extensionHost: IExtensionHost;\n\tprivate _proxy: Promise<IExtensionHostProxy | null> | null;\n\tprivate _hasStarted = false;\n\n\tpublic get kind(): ExtensionHostKind {\n\t\treturn this._extensionHost.runningLocation.kind;\n\t}\n\n\tpublic get startup(): ExtensionHostStartup {\n\t\treturn this._extensionHost.startup;\n\t}\n\n\tconstructor(\n\t\textensionHost: IExtensionHost,\n\t\tinitialActivationEvents: string[],\n\t\tprivate readonly _internalExtensionService: IInternalExtensionService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IWorkbenchEnvironmentService private readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis._cachedActivationEvents = new Map<string, Promise<void>>();\n\t\tthis._resolvedActivationEvents = new Set<string>();\n\t\tthis._rpcProtocol = null;\n\t\tthis._customers = [];\n\n\t\tthis._extensionHost = extensionHost;\n\t\tthis.onDidExit = this._extensionHost.onExit;\n\n\t\tconst startingTelemetryEvent: ExtensionHostStartupEvent = {\n\t\t\ttime: Date.now(),\n\t\t\taction: 'starting',\n\t\t\tkind: extensionHostKindToString(this.kind)\n\t\t};\n\t\tthis._telemetryService.publicLog2<ExtensionHostStartupEvent, ExtensionHostStartupClassification>('extensionHostStartup', startingTelemetryEvent);\n\n\t\tthis._proxy = this._extensionHost.start().then(\n\t\t\t(protocol) => {\n\t\t\t\tthis._hasStarted = true;\n\n\t\t\t\t// Track healthy extension host startup\n\t\t\t\tconst successTelemetryEvent: ExtensionHostStartupEvent = {\n\t\t\t\t\ttime: Date.now(),\n\t\t\t\t\taction: 'success',\n\t\t\t\t\tkind: extensionHostKindToString(this.kind)\n\t\t\t\t};\n\t\t\t\tthis._telemetryService.publicLog2<ExtensionHostStartupEvent, ExtensionHostStartupClassification>('extensionHostStartup', successTelemetryEvent);\n\n\t\t\t\treturn this._createExtensionHostCustomers(this.kind, protocol);\n\t\t\t},\n\t\t\t(err) => {\n\t\t\t\tthis._logService.error(`Error received from starting extension host (kind: ${extensionHostKindToString(this.kind)})`);\n\t\t\t\tthis._logService.error(err);\n\n\t\t\t\t// Track errors during extension host startup\n\t\t\t\tconst failureTelemetryEvent: ExtensionHostStartupEvent = {\n\t\t\t\t\ttime: Date.now(),\n\t\t\t\t\taction: 'error',\n\t\t\t\t\tkind: extensionHostKindToString(this.kind)\n\t\t\t\t};\n\n\t\t\t\tif (err && err.name) {\n\t\t\t\t\tfailureTelemetryEvent.errorName = err.name;\n\t\t\t\t}\n\t\t\t\tif (err && err.message) {\n\t\t\t\t\tfailureTelemetryEvent.errorMessage = err.message;\n\t\t\t\t}\n\t\t\t\tif (err && err.stack) {\n\t\t\t\t\tfailureTelemetryEvent.errorStack = err.stack;\n\t\t\t\t}\n\t\t\t\tthis._telemetryService.publicLog2<ExtensionHostStartupEvent, ExtensionHostStartupClassification>('extensionHostStartup', failureTelemetryEvent);\n\n\t\t\t\treturn null;\n\t\t\t}\n\t\t);\n\t\tthis._proxy.then(() => {\n\t\t\tinitialActivationEvents.forEach((activationEvent) => this.activateByEvent(activationEvent, ActivationKind.Normal));\n\t\t\tthis._register(registerLatencyTestProvider({\n\t\t\t\tmeasure: () => this.measure()\n\t\t\t}));\n\t\t});\n\t}\n\n\tpublic override dispose(): void {\n\t\tif (this._extensionHost) {\n\t\t\tthis._extensionHost.dispose();\n\t\t}\n\t\tif (this._rpcProtocol) {\n\t\t\tthis._rpcProtocol.dispose();\n\t\t}\n\t\tfor (let i = 0, len = this._customers.length; i < len; i++) {\n\t\t\tconst customer = this._customers[i];\n\t\t\ttry {\n\t\t\t\tcustomer.dispose();\n\t\t\t} catch (err) {\n\t\t\t\terrors.onUnexpectedError(err);\n\t\t\t}\n\t\t}\n\t\tthis._proxy = null;\n\n\t\tsuper.dispose();\n\t}\n\n\tprivate async measure(): Promise<ExtHostLatencyResult | null> {\n\t\tconst proxy = await this._proxy;\n\t\tif (!proxy) {\n\t\t\treturn null;\n\t\t}\n\t\tconst latency = await this._measureLatency(proxy);\n\t\tconst down = await this._measureDown(proxy);\n\t\tconst up = await this._measureUp(proxy);\n\t\treturn {\n\t\t\tremoteAuthority: this._extensionHost.remoteAuthority,\n\t\t\tlatency,\n\t\t\tdown,\n\t\t\tup\n\t\t};\n\t}\n\n\tpublic async ready(): Promise<void> {\n\t\tawait this._proxy;\n\t}\n\n\tprivate async _measureLatency(proxy: IExtensionHostProxy): Promise<number> {\n\t\tconst COUNT = 10;\n\n\t\tlet sum = 0;\n\t\tfor (let i = 0; i < COUNT; i++) {\n\t\t\tconst sw = StopWatch.create();\n\t\t\tawait proxy.test_latency(i);\n\t\t\tsw.stop();\n\t\t\tsum += sw.elapsed();\n\t\t}\n\t\treturn (sum / COUNT);\n\t}\n\n\tprivate static _convert(byteCount: number, elapsedMillis: number): number {\n\t\treturn (byteCount * 1000 * 8) / elapsedMillis;\n\t}\n\n\tprivate async _measureUp(proxy: IExtensionHostProxy): Promise<number> {\n\t\tconst SIZE = 10 * 1024 * 1024; // 10MB\n\n\t\tconst buff = VSBuffer.alloc(SIZE);\n\t\tconst value = Math.ceil(Math.random() * 256);\n\t\tfor (let i = 0; i < buff.byteLength; i++) {\n\t\t\tbuff.writeUInt8(i, value);\n\t\t}\n\t\tconst sw = StopWatch.create();\n\t\tawait proxy.test_up(buff);\n\t\tsw.stop();\n\t\treturn ExtensionHostManager._convert(SIZE, sw.elapsed());\n\t}\n\n\tprivate async _measureDown(proxy: IExtensionHostProxy): Promise<number> {\n\t\tconst SIZE = 10 * 1024 * 1024; // 10MB\n\n\t\tconst sw = StopWatch.create();\n\t\tawait proxy.test_down(SIZE);\n\t\tsw.stop();\n\t\treturn ExtensionHostManager._convert(SIZE, sw.elapsed());\n\t}\n\n\tprivate _createExtensionHostCustomers(kind: ExtensionHostKind, protocol: IMessagePassingProtocol): IExtensionHostProxy {\n\n\t\tlet logger: IRPCProtocolLogger | null = null;\n\t\tif (LOG_EXTENSION_HOST_COMMUNICATION || this._environmentService.logExtensionHostCommunication) {\n\t\t\tlogger = new RPCLogger(kind);\n\t\t} else if (TelemetryRPCLogger.isEnabled()) {\n\t\t\tlogger = new TelemetryRPCLogger(this._telemetryService);\n\t\t}\n\n\t\tthis._rpcProtocol = new RPCProtocol(protocol, logger);\n\t\tthis._register(this._rpcProtocol.onDidChangeResponsiveState((responsiveState: ResponsiveState) => this._onDidChangeResponsiveState.fire(responsiveState)));\n\t\tlet extensionHostProxy: IExtensionHostProxy | null = null as IExtensionHostProxy | null;\n\t\tlet mainProxyIdentifiers: ProxyIdentifier<any>[] = [];\n\t\tconst extHostContext: IInternalExtHostContext = {\n\t\t\tremoteAuthority: this._extensionHost.remoteAuthority,\n\t\t\textensionHostKind: this.kind,\n\t\t\tgetProxy: <T>(identifier: ProxyIdentifier<T>): Proxied<T> => this._rpcProtocol!.getProxy(identifier),\n\t\t\tset: <T, R extends T>(identifier: ProxyIdentifier<T>, instance: R): R => this._rpcProtocol!.set(identifier, instance),\n\t\t\tdispose: (): void => this._rpcProtocol!.dispose(),\n\t\t\tassertRegistered: (identifiers: ProxyIdentifier<any>[]): void => this._rpcProtocol!.assertRegistered(identifiers),\n\t\t\tdrain: (): Promise<void> => this._rpcProtocol!.drain(),\n\n\t\t\t//#region internal\n\t\t\tinternalExtensionService: this._internalExtensionService,\n\t\t\t_setExtensionHostProxy: (value: IExtensionHostProxy): void => {\n\t\t\t\textensionHostProxy = value;\n\t\t\t},\n\t\t\t_setAllMainProxyIdentifiers: (value: ProxyIdentifier<any>[]): void => {\n\t\t\t\tmainProxyIdentifiers = value;\n\t\t\t},\n\t\t\t//#endregion\n\t\t};\n\n\t\t// Named customers\n\t\tconst namedCustomers = ExtHostCustomersRegistry.getNamedCustomers();\n\t\tfor (let i = 0, len = namedCustomers.length; i < len; i++) {\n\t\t\tconst [id, ctor] = namedCustomers[i];\n\t\t\ttry {\n\t\t\t\tconst instance = this._instantiationService.createInstance(ctor, extHostContext);\n\t\t\t\tthis._customers.push(instance);\n\t\t\t\tthis._rpcProtocol.set(id, instance);\n\t\t\t} catch (err) {\n\t\t\t\tthis._logService.error(`Cannot instantiate named customer: '${id.sid}'`);\n\t\t\t\tthis._logService.error(err);\n\t\t\t\terrors.onUnexpectedError(err);\n\t\t\t}\n\t\t}\n\n\t\t// Customers\n\t\tconst customers = ExtHostCustomersRegistry.getCustomers();\n\t\tfor (const ctor of customers) {\n\t\t\ttry {\n\t\t\t\tconst instance = this._instantiationService.createInstance(ctor, extHostContext);\n\t\t\t\tthis._customers.push(instance);\n\t\t\t} catch (err) {\n\t\t\t\tthis._logService.error(err);\n\t\t\t\terrors.onUnexpectedError(err);\n\t\t\t}\n\t\t}\n\n\t\tif (!extensionHostProxy) {\n\t\t\tthrow new Error(`Missing IExtensionHostProxy!`);\n\t\t}\n\n\t\t// Check that no named customers are missing\n\t\tthis._rpcProtocol.assertRegistered(mainProxyIdentifiers);\n\n\t\treturn extensionHostProxy;\n\t}\n\n\tpublic async activate(extension: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<boolean> {\n\t\tconst proxy = await this._proxy;\n\t\tif (!proxy) {\n\t\t\treturn false;\n\t\t}\n\t\treturn proxy.activate(extension, reason);\n\t}\n\n\tpublic activateByEvent(activationEvent: string, activationKind: ActivationKind): Promise<void> {\n\t\tif (activationKind === ActivationKind.Immediate && !this._hasStarted) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\tif (!this._cachedActivationEvents.has(activationEvent)) {\n\t\t\tthis._cachedActivationEvents.set(activationEvent, this._activateByEvent(activationEvent, activationKind));\n\t\t}\n\t\treturn this._cachedActivationEvents.get(activationEvent)!;\n\t}\n\n\tpublic activationEventIsDone(activationEvent: string): boolean {\n\t\treturn this._resolvedActivationEvents.has(activationEvent);\n\t}\n\n\tprivate async _activateByEvent(activationEvent: string, activationKind: ActivationKind): Promise<void> {\n\t\tif (!this._proxy) {\n\t\t\treturn;\n\t\t}\n\t\tconst proxy = await this._proxy;\n\t\tif (!proxy) {\n\t\t\t// this case is already covered above and logged.\n\t\t\t// i.e. the extension host could not be started\n\t\t\treturn;\n\t\t}\n\t\tawait proxy.activateByEvent(activationEvent, activationKind);\n\t\tthis._resolvedActivationEvents.add(activationEvent);\n\t}\n\n\tpublic async getInspectPort(tryEnableInspector: boolean): Promise<number> {\n\t\tif (this._extensionHost) {\n\t\t\tif (tryEnableInspector) {\n\t\t\t\tawait this._extensionHost.enableInspectPort();\n\t\t\t}\n\t\t\tconst port = this._extensionHost.getInspectPort();\n\t\t\tif (port) {\n\t\t\t\treturn port;\n\t\t\t}\n\t\t}\n\t\treturn 0;\n\t}\n\n\tpublic async resolveAuthority(remoteAuthority: string, resolveAttempt: number): Promise<IResolveAuthorityResult> {\n\t\tconst sw = StopWatch.create(false);\n\t\tconst prefix = () => `[${extensionHostKindToString(this._extensionHost.runningLocation.kind)}${this._extensionHost.runningLocation.affinity}][resolveAuthority(${getRemoteAuthorityPrefix(remoteAuthority)},${resolveAttempt})][${sw.elapsed()}ms] `;\n\t\tconst logInfo = (msg: string) => this._logService.info(`${prefix()}${msg}`);\n\t\tconst logError = (msg: string, err: any = undefined) => this._logService.error(`${prefix()}${msg}`, err);\n\n\t\tlogInfo(`obtaining proxy...`);\n\t\tconst proxy = await this._proxy;\n\t\tif (!proxy) {\n\t\t\tlogError(`no proxy`);\n\t\t\treturn {\n\t\t\t\ttype: 'error',\n\t\t\t\terror: {\n\t\t\t\t\tmessage: `Cannot resolve authority`,\n\t\t\t\t\tcode: RemoteAuthorityResolverErrorCode.Unknown,\n\t\t\t\t\tdetail: undefined\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tlogInfo(`invoking...`);\n\t\tconst intervalLogger = new IntervalTimer();\n\t\ttry {\n\t\t\tintervalLogger.cancelAndSet(() => logInfo('waiting...'), 1000);\n\t\t\tconst resolverResult = await proxy.resolveAuthority(remoteAuthority, resolveAttempt);\n\t\t\tintervalLogger.dispose();\n\t\t\tif (resolverResult.type === 'ok') {\n\t\t\t\tlogInfo(`returned ${resolverResult.value.authority.connectTo}`);\n\t\t\t} else {\n\t\t\t\tlogError(`returned an error`, resolverResult.error);\n\t\t\t}\n\t\t\treturn resolverResult;\n\t\t} catch (err) {\n\t\t\tintervalLogger.dispose();\n\t\t\tlogError(`returned an error`, err);\n\t\t\treturn {\n\t\t\t\ttype: 'error',\n\t\t\t\terror: {\n\t\t\t\t\tmessage: err.message,\n\t\t\t\t\tcode: RemoteAuthorityResolverErrorCode.Unknown,\n\t\t\t\t\tdetail: err\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n\n\tpublic async getCanonicalURI(remoteAuthority: string, uri: URI): Promise<URI | null> {\n\t\tconst proxy = await this._proxy;\n\t\tif (!proxy) {\n\t\t\tthrow new Error(`Cannot resolve canonical URI`);\n\t\t}\n\t\treturn proxy.getCanonicalURI(remoteAuthority, uri);\n\t}\n\n\tpublic async start(extensionRegistryVersionId: number, allExtensions: IExtensionDescription[], myExtensions: ExtensionIdentifier[]): Promise<void> {\n\t\tconst proxy = await this._proxy;\n\t\tif (!proxy) {\n\t\t\treturn;\n\t\t}\n\t\tconst deltaExtensions = this._extensionHost.extensions!.set(extensionRegistryVersionId, allExtensions, myExtensions);\n\t\treturn proxy.startExtensionHost(deltaExtensions);\n\t}\n\n\tpublic async extensionTestsExecute(): Promise<number> {\n\t\tconst proxy = await this._proxy;\n\t\tif (!proxy) {\n\t\t\tthrow new Error('Could not obtain Extension Host Proxy');\n\t\t}\n\t\treturn proxy.extensionTestsExecute();\n\t}\n\n\tpublic representsRunningLocation(runningLocation: ExtensionRunningLocation): boolean {\n\t\treturn this._extensionHost.runningLocation.equals(runningLocation);\n\t}\n\n\tpublic async deltaExtensions(incomingExtensionsDelta: IExtensionDescriptionDelta): Promise<void> {\n\t\tconst proxy = await this._proxy;\n\t\tif (!proxy) {\n\t\t\treturn;\n\t\t}\n\t\tconst outgoingExtensionsDelta = this._extensionHost.extensions!.delta(incomingExtensionsDelta);\n\t\tif (!outgoingExtensionsDelta) {\n\t\t\t// The extension host already has this version of the extensions.\n\t\t\treturn;\n\t\t}\n\t\treturn proxy.deltaExtensions(outgoingExtensionsDelta);\n\t}\n\n\tpublic containsExtension(extensionId: ExtensionIdentifier): boolean {\n\t\treturn this._extensionHost.extensions?.containsExtension(extensionId) ?? false;\n\t}\n\n\tpublic async setRemoteEnvironment(env: { [key: string]: string | null }): Promise<void> {\n\t\tconst proxy = await this._proxy;\n\t\tif (!proxy) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn proxy.setRemoteEnvironment(env);\n\t}\n}\n\n/**\n * Waits until `start()` and only if it has extensions proceeds to really start.\n */\nclass LazyCreateExtensionHostManager extends Disposable implements IExtensionHostManager {\n\n\tpublic readonly onDidExit: Event<[number, string | null]>;\n\tprivate readonly _onDidChangeResponsiveState: Emitter<ResponsiveState> = this._register(new Emitter<ResponsiveState>());\n\tpublic readonly onDidChangeResponsiveState: Event<ResponsiveState> = this._onDidChangeResponsiveState.event;\n\n\tprivate readonly _extensionHost: IExtensionHost;\n\tprivate _startCalled: Barrier;\n\tprivate _actual: ExtensionHostManager | null;\n\tprivate _lazyStartExtensions: ExtensionHostExtensions | null;\n\n\tpublic get kind(): ExtensionHostKind {\n\t\treturn this._extensionHost.runningLocation.kind;\n\t}\n\n\tpublic get startup(): ExtensionHostStartup {\n\t\treturn this._extensionHost.startup;\n\t}\n\n\tconstructor(\n\t\textensionHost: IExtensionHost,\n\t\tprivate readonly _internalExtensionService: IInternalExtensionService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tsuper();\n\t\tthis._extensionHost = extensionHost;\n\t\tthis.onDidExit = extensionHost.onExit;\n\t\tthis._startCalled = new Barrier();\n\t\tthis._actual = null;\n\t\tthis._lazyStartExtensions = null;\n\t}\n\n\tprivate _createActual(reason: string): ExtensionHostManager {\n\t\tthis._logService.info(`Creating lazy extension host: ${reason}`);\n\t\tthis._actual = this._register(this._instantiationService.createInstance(ExtensionHostManager, this._extensionHost, [], this._internalExtensionService));\n\t\tthis._register(this._actual.onDidChangeResponsiveState((e) => this._onDidChangeResponsiveState.fire(e)));\n\t\treturn this._actual;\n\t}\n\n\tprivate async _getOrCreateActualAndStart(reason: string): Promise<ExtensionHostManager> {\n\t\tif (this._actual) {\n\t\t\t// already created/started\n\t\t\treturn this._actual;\n\t\t}\n\t\tconst actual = this._createActual(reason);\n\t\tawait actual.start(this._lazyStartExtensions!.versionId, this._lazyStartExtensions!.allExtensions, this._lazyStartExtensions!.myExtensions);\n\t\treturn actual;\n\t}\n\n\tpublic async ready(): Promise<void> {\n\t\tawait this._startCalled.wait();\n\t\tif (this._actual) {\n\t\t\tawait this._actual.ready();\n\t\t}\n\t}\n\tpublic representsRunningLocation(runningLocation: ExtensionRunningLocation): boolean {\n\t\treturn this._extensionHost.runningLocation.equals(runningLocation);\n\t}\n\tpublic async deltaExtensions(extensionsDelta: IExtensionDescriptionDelta): Promise<void> {\n\t\tawait this._startCalled.wait();\n\t\tif (this._actual) {\n\t\t\treturn this._actual.deltaExtensions(extensionsDelta);\n\t\t}\n\t\tthis._lazyStartExtensions!.delta(extensionsDelta);\n\t\tif (extensionsDelta.myToAdd.length > 0) {\n\t\t\tconst actual = this._createActual(`contains ${extensionsDelta.myToAdd.length} new extension(s) (installed or enabled): ${extensionsDelta.myToAdd.map(extId => extId.value)}`);\n\t\t\tawait actual.start(this._lazyStartExtensions!.versionId, this._lazyStartExtensions!.allExtensions, this._lazyStartExtensions!.myExtensions);\n\t\t\treturn;\n\t\t}\n\t}\n\tpublic containsExtension(extensionId: ExtensionIdentifier): boolean {\n\t\treturn this._extensionHost.extensions?.containsExtension(extensionId) ?? false;\n\t}\n\tpublic async activate(extension: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<boolean> {\n\t\tawait this._startCalled.wait();\n\t\tif (this._actual) {\n\t\t\treturn this._actual.activate(extension, reason);\n\t\t}\n\t\treturn false;\n\t}\n\tpublic async activateByEvent(activationEvent: string, activationKind: ActivationKind): Promise<void> {\n\t\tif (activationKind === ActivationKind.Immediate) {\n\t\t\t// this is an immediate request, so we cannot wait for start to be called\n\t\t\tif (this._actual) {\n\t\t\t\treturn this._actual.activateByEvent(activationEvent, activationKind);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tawait this._startCalled.wait();\n\t\tif (this._actual) {\n\t\t\treturn this._actual.activateByEvent(activationEvent, activationKind);\n\t\t}\n\t}\n\tpublic activationEventIsDone(activationEvent: string): boolean {\n\t\tif (!this._startCalled.isOpen()) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this._actual) {\n\t\t\treturn this._actual.activationEventIsDone(activationEvent);\n\t\t}\n\t\treturn true;\n\t}\n\tpublic async getInspectPort(tryEnableInspector: boolean): Promise<number> {\n\t\tawait this._startCalled.wait();\n\t\tif (this._actual) {\n\t\t\treturn this._actual.getInspectPort(tryEnableInspector);\n\t\t}\n\t\treturn 0;\n\t}\n\tpublic async resolveAuthority(remoteAuthority: string, resolveAttempt: number): Promise<IResolveAuthorityResult> {\n\t\tawait this._startCalled.wait();\n\t\tif (this._actual) {\n\t\t\treturn this._actual.resolveAuthority(remoteAuthority, resolveAttempt);\n\t\t}\n\t\treturn {\n\t\t\ttype: 'error',\n\t\t\terror: {\n\t\t\t\tmessage: `Cannot resolve authority`,\n\t\t\t\tcode: RemoteAuthorityResolverErrorCode.Unknown,\n\t\t\t\tdetail: undefined\n\t\t\t}\n\t\t};\n\t}\n\tpublic async getCanonicalURI(remoteAuthority: string, uri: URI): Promise<URI | null> {\n\t\tawait this._startCalled.wait();\n\t\tif (this._actual) {\n\t\t\treturn this._actual.getCanonicalURI(remoteAuthority, uri);\n\t\t}\n\t\tthrow new Error(`Cannot resolve canonical URI`);\n\t}\n\tpublic async start(extensionRegistryVersionId: number, allExtensions: IExtensionDescription[], myExtensions: ExtensionIdentifier[]): Promise<void> {\n\t\tif (myExtensions.length > 0) {\n\t\t\t// there are actual extensions, so let's launch the extension host\n\t\t\tconst actual = this._createActual(`contains ${myExtensions.length} extension(s): ${myExtensions.map(extId => extId.value)}.`);\n\t\t\tconst result = actual.start(extensionRegistryVersionId, allExtensions, myExtensions);\n\t\t\tthis._startCalled.open();\n\t\t\treturn result;\n\t\t}\n\t\t// there are no actual extensions running, store extensions in `this._lazyStartExtensions`\n\t\tthis._lazyStartExtensions = new ExtensionHostExtensions(extensionRegistryVersionId, allExtensions, myExtensions);\n\t\tthis._startCalled.open();\n\t}\n\tpublic async extensionTestsExecute(): Promise<number> {\n\t\tawait this._startCalled.wait();\n\t\tconst actual = await this._getOrCreateActualAndStart(`execute tests.`);\n\t\treturn actual.extensionTestsExecute();\n\t}\n\tpublic async setRemoteEnvironment(env: { [key: string]: string | null }): Promise<void> {\n\t\tawait this._startCalled.wait();\n\t\tif (this._actual) {\n\t\t\treturn this._actual.setRemoteEnvironment(env);\n\t\t}\n\t}\n}\n\nconst colorTables = [\n\t['#2977B1', '#FC802D', '#34A13A', '#D3282F', '#9366BA'],\n\t['#8B564C', '#E177C0', '#7F7F7F', '#BBBE3D', '#2EBECD']\n];\n\nfunction prettyWithoutArrays(data: any): any {\n\tif (Array.isArray(data)) {\n\t\treturn data;\n\t}\n\tif (data && typeof data === 'object' && typeof data.toString === 'function') {\n\t\tconst result = data.toString();\n\t\tif (result !== '[object Object]') {\n\t\t\treturn result;\n\t\t}\n\t}\n\treturn data;\n}\n\nfunction pretty(data: any): any {\n\tif (Array.isArray(data)) {\n\t\treturn data.map(prettyWithoutArrays);\n\t}\n\treturn prettyWithoutArrays(data);\n}\n\nclass RPCLogger implements IRPCProtocolLogger {\n\n\tprivate _totalIncoming = 0;\n\tprivate _totalOutgoing = 0;\n\n\tconstructor(\n\t\tprivate readonly _kind: ExtensionHostKind\n\t) { }\n\n\tprivate _log(direction: string, totalLength: number, msgLength: number, req: number, initiator: RequestInitiator, str: string, data: any): void {\n\t\tdata = pretty(data);\n\n\t\tconst colorTable = colorTables[initiator];\n\t\tconst color = LOG_USE_COLORS ? colorTable[req % colorTable.length] : '#000000';\n\t\tlet args = [`%c[${extensionHostKindToString(this._kind)}][${direction}]%c[${String(totalLength).padStart(7)}]%c[len: ${String(msgLength).padStart(5)}]%c${String(req).padStart(5)} - ${str}`, 'color: darkgreen', 'color: grey', 'color: grey', `color: ${color}`];\n\t\tif (/\\($/.test(str)) {\n\t\t\targs = args.concat(data);\n\t\t\targs.push(')');\n\t\t} else {\n\t\t\targs.push(data);\n\t\t}\n\t\tconsole.log.apply(console, args as [string, ...string[]]);\n\t}\n\n\tlogIncoming(msgLength: number, req: number, initiator: RequestInitiator, str: string, data?: any): void {\n\t\tthis._totalIncoming += msgLength;\n\t\tthis._log('Ext \\u2192 Win', this._totalIncoming, msgLength, req, initiator, str, data);\n\t}\n\n\tlogOutgoing(msgLength: number, req: number, initiator: RequestInitiator, str: string, data?: any): void {\n\t\tthis._totalOutgoing += msgLength;\n\t\tthis._log('Win \\u2192 Ext', this._totalOutgoing, msgLength, req, initiator, str, data);\n\t}\n}\n\ninterface RPCTelemetryData {\n\ttype: string;\n\tlength: number;\n}\n\ntype RPCTelemetryDataClassification = {\n\towner: 'jrieken';\n\tcomment: 'Insights about RPC message sizes';\n\ttype: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The type of the RPC message' };\n\tlength: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; isMeasurement: true; comment: 'The byte-length of the RPC message' };\n};\n\nclass TelemetryRPCLogger implements IRPCProtocolLogger {\n\n\tstatic isEnabled(): boolean {\n\t\t// this will be a very high frequency event, so we only log a small percentage of them\n\t\treturn Math.trunc(Math.random() * 1000) < 0.5;\n\t}\n\n\tprivate readonly _pendingRequests = new Map<number, string>();\n\n\tconstructor(@ITelemetryService private readonly _telemetryService: ITelemetryService) { }\n\n\tlogIncoming(msgLength: number, req: number, initiator: RequestInitiator, str: string): void {\n\n\t\tif (initiator === RequestInitiator.LocalSide && /^receiveReply(Err)?:/.test(str)) {\n\t\t\t// log the size of reply messages\n\t\t\tconst requestStr = this._pendingRequests.get(req) ?? 'unknown_reply';\n\t\t\tthis._pendingRequests.delete(req);\n\t\t\tthis._telemetryService.publicLog2<RPCTelemetryData, RPCTelemetryDataClassification>('extensionhost.incoming', {\n\t\t\t\ttype: `${str} ${requestStr}`,\n\t\t\t\tlength: msgLength\n\t\t\t});\n\t\t}\n\n\t\tif (initiator === RequestInitiator.OtherSide && /^receiveRequest /.test(str)) {\n\t\t\t// incoming request\n\t\t\tthis._telemetryService.publicLog2<RPCTelemetryData, RPCTelemetryDataClassification>('extensionhost.incoming', {\n\t\t\t\ttype: `${str}`,\n\t\t\t\tlength: msgLength\n\t\t\t});\n\t\t}\n\t}\n\n\tlogOutgoing(msgLength: number, req: number, initiator: RequestInitiator, str: string): void {\n\n\t\tif (initiator === RequestInitiator.LocalSide && str.startsWith('request: ')) {\n\t\t\tthis._pendingRequests.set(req, str);\n\t\t\tthis._telemetryService.publicLog2<RPCTelemetryData, RPCTelemetryDataClassification>('extensionhost.outgoing', {\n\t\t\t\ttype: str,\n\t\t\t\tlength: msgLength\n\t\t\t});\n\t\t}\n\t}\n}\n\ninterface ExtHostLatencyResult {\n\tremoteAuthority: string | null;\n\tup: number;\n\tdown: number;\n\tlatency: number;\n}\n\ninterface ExtHostLatencyProvider {\n\tmeasure(): Promise<ExtHostLatencyResult | null>;\n}\n\nconst providers: ExtHostLatencyProvider[] = [];\nfunction registerLatencyTestProvider(provider: ExtHostLatencyProvider): IDisposable {\n\tproviders.push(provider);\n\treturn {\n\t\tdispose: () => {\n\t\t\tfor (let i = 0; i < providers.length; i++) {\n\t\t\t\tif (providers[i] === provider) {\n\t\t\t\t\tproviders.splice(i, 1);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n}\n\nfunction getLatencyTestProviders(): ExtHostLatencyProvider[] {\n\treturn providers.slice(0);\n}\n\nregisterAction2(class MeasureExtHostLatencyAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'editor.action.measureExtHostLatency',\n\t\t\ttitle: {\n\t\t\t\tvalue: nls.localize('measureExtHostLatency', \"Measure Extension Host Latency\"),\n\t\t\t\toriginal: 'Measure Extension Host Latency'\n\t\t\t},\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor) {\n\n\t\tconst editorService = accessor.get(IEditorService);\n\n\t\tconst measurements = await Promise.all(getLatencyTestProviders().map(provider => provider.measure()));\n\t\teditorService.openEditor({ resource: undefined, contents: measurements.map(MeasureExtHostLatencyAction._print).join('\\n\\n'), options: { pinned: true } });\n\t}\n\n\tprivate static _print(m: ExtHostLatencyResult | null): string {\n\t\tif (!m) {\n\t\t\treturn '';\n\t\t}\n\t\treturn `${m.remoteAuthority ? `Authority: ${m.remoteAuthority}\\n` : ``}Roundtrip latency: ${m.latency.toFixed(3)}ms\\nUp: ${MeasureExtHostLatencyAction._printSpeed(m.up)}\\nDown: ${MeasureExtHostLatencyAction._printSpeed(m.down)}\\n`;\n\t}\n\n\tprivate static _printSpeed(n: number): string {\n\t\tif (n <= 1024) {\n\t\t\treturn `${n} bps`;\n\t\t}\n\t\tif (n < 1024 * 1024) {\n\t\t\treturn `${(n / 1024).toFixed(1)} kbps`;\n\t\t}\n\t\treturn `${(n / 1024 / 1024).toFixed(1)} Mbps`;\n\t}\n});\n"]}