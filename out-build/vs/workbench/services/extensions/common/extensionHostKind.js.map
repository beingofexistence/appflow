{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/extensions/common/extensionHostKind.ts"],"names":[],"mappings":"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","file":"extensionHostKind.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ExtensionKind } from 'vs/platform/environment/common/environment';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\n\nexport const enum ExtensionHostKind {\n\tLocalProcess = 1,\n\tLocalWebWorker = 2,\n\tRemote = 3\n}\n\nexport function extensionHostKindToString(kind: ExtensionHostKind | null): string {\n\tif (kind === null) {\n\t\treturn 'None';\n\t}\n\tswitch (kind) {\n\t\tcase ExtensionHostKind.LocalProcess: return 'LocalProcess';\n\t\tcase ExtensionHostKind.LocalWebWorker: return 'LocalWebWorker';\n\t\tcase ExtensionHostKind.Remote: return 'Remote';\n\t}\n}\n\nexport const enum ExtensionRunningPreference {\n\tNone,\n\tLocal,\n\tRemote\n}\n\nexport function extensionRunningPreferenceToString(preference: ExtensionRunningPreference) {\n\tswitch (preference) {\n\t\tcase ExtensionRunningPreference.None:\n\t\t\treturn 'None';\n\t\tcase ExtensionRunningPreference.Local:\n\t\t\treturn 'Local';\n\t\tcase ExtensionRunningPreference.Remote:\n\t\t\treturn 'Remote';\n\t}\n}\n\nexport interface IExtensionHostKindPicker {\n\tpickExtensionHostKind(extensionId: ExtensionIdentifier, extensionKinds: ExtensionKind[], isInstalledLocally: boolean, isInstalledRemotely: boolean, preference: ExtensionRunningPreference): ExtensionHostKind | null;\n}\n\nexport function determineExtensionHostKinds(\n\t_localExtensions: IExtensionDescription[],\n\t_remoteExtensions: IExtensionDescription[],\n\tgetExtensionKind: (extensionDescription: IExtensionDescription) => ExtensionKind[],\n\tpickExtensionHostKind: (extensionId: ExtensionIdentifier, extensionKinds: ExtensionKind[], isInstalledLocally: boolean, isInstalledRemotely: boolean, preference: ExtensionRunningPreference) => ExtensionHostKind | null\n): Map<string, ExtensionHostKind | null> {\n\tconst localExtensions = toExtensionWithKind(_localExtensions, getExtensionKind);\n\tconst remoteExtensions = toExtensionWithKind(_remoteExtensions, getExtensionKind);\n\n\tconst allExtensions = new Map<string, ExtensionInfo>();\n\tconst collectExtension = (ext: ExtensionWithKind) => {\n\t\tif (allExtensions.has(ext.key)) {\n\t\t\treturn;\n\t\t}\n\t\tconst local = localExtensions.get(ext.key) || null;\n\t\tconst remote = remoteExtensions.get(ext.key) || null;\n\t\tconst info = new ExtensionInfo(local, remote);\n\t\tallExtensions.set(info.key, info);\n\t};\n\tlocalExtensions.forEach((ext) => collectExtension(ext));\n\tremoteExtensions.forEach((ext) => collectExtension(ext));\n\n\tconst extensionHostKinds = new Map<string, ExtensionHostKind | null>();\n\tallExtensions.forEach((ext) => {\n\t\tconst isInstalledLocally = Boolean(ext.local);\n\t\tconst isInstalledRemotely = Boolean(ext.remote);\n\n\t\tconst isLocallyUnderDevelopment = Boolean(ext.local && ext.local.isUnderDevelopment);\n\t\tconst isRemotelyUnderDevelopment = Boolean(ext.remote && ext.remote.isUnderDevelopment);\n\n\t\tlet preference = ExtensionRunningPreference.None;\n\t\tif (isLocallyUnderDevelopment && !isRemotelyUnderDevelopment) {\n\t\t\tpreference = ExtensionRunningPreference.Local;\n\t\t} else if (isRemotelyUnderDevelopment && !isLocallyUnderDevelopment) {\n\t\t\tpreference = ExtensionRunningPreference.Remote;\n\t\t}\n\n\t\textensionHostKinds.set(ext.key, pickExtensionHostKind(ext.identifier, ext.kind, isInstalledLocally, isInstalledRemotely, preference));\n\t});\n\n\treturn extensionHostKinds;\n}\n\nfunction toExtensionWithKind(\n\textensions: IExtensionDescription[],\n\tgetExtensionKind: (extensionDescription: IExtensionDescription) => ExtensionKind[]\n): Map<string, ExtensionWithKind> {\n\tconst result = new Map<string, ExtensionWithKind>();\n\textensions.forEach((desc) => {\n\t\tconst ext = new ExtensionWithKind(desc, getExtensionKind(desc));\n\t\tresult.set(ext.key, ext);\n\t});\n\treturn result;\n}\n\nclass ExtensionWithKind {\n\n\tconstructor(\n\t\tpublic readonly desc: IExtensionDescription,\n\t\tpublic readonly kind: ExtensionKind[]\n\t) { }\n\n\tpublic get key(): string {\n\t\treturn ExtensionIdentifier.toKey(this.desc.identifier);\n\t}\n\n\tpublic get isUnderDevelopment(): boolean {\n\t\treturn this.desc.isUnderDevelopment;\n\t}\n}\n\nclass ExtensionInfo {\n\n\tconstructor(\n\t\tpublic readonly local: ExtensionWithKind | null,\n\t\tpublic readonly remote: ExtensionWithKind | null,\n\t) { }\n\n\tpublic get key(): string {\n\t\tif (this.local) {\n\t\t\treturn this.local.key;\n\t\t}\n\t\treturn this.remote!.key;\n\t}\n\n\tpublic get identifier(): ExtensionIdentifier {\n\t\tif (this.local) {\n\t\t\treturn this.local.desc.identifier;\n\t\t}\n\t\treturn this.remote!.desc.identifier;\n\t}\n\n\tpublic get kind(): ExtensionKind[] {\n\t\t// in case of disagreements between extension kinds, it is always\n\t\t// better to pick the local extension because it has a much higher\n\t\t// chance of being up-to-date\n\t\tif (this.local) {\n\t\t\treturn this.local.kind;\n\t\t}\n\t\treturn this.remote!.kind;\n\t}\n}\n"]}