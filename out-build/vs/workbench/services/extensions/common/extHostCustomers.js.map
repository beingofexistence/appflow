{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/extensions/common/extHostCustomers.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAwBhG,SAAgB,IAAI,CAAwC,EAAsB;QACjF,OAAO,UAA6C,IAAiE;YACpH,4BAA4B,CAAC,QAAQ,CAAC,qBAAqB,CAAC,EAAE,EAAE,IAA+B,CAAC,CAAC;QAClG,CAAC,CAAC;IACH,CAAC;IAJD,oBAIC;IAED,SAAgB,IAAI,CAAsE,IAAiE;QAC1J,4BAA4B,CAAC,QAAQ,CAAC,gBAAgB,CAAC,IAA+B,CAAC,CAAC;IACzF,CAAC;IAFD,oBAEC;IAED,IAAiB,wBAAwB,CASxC;IATD,WAAiB,wBAAwB;QAExC,SAAgB,iBAAiB;YAChC,OAAO,4BAA4B,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC;QAClE,CAAC;QAFe,0CAAiB,oBAEhC,CAAA;QAED,SAAgB,YAAY;YAC3B,OAAO,4BAA4B,CAAC,QAAQ,CAAC,YAAY,EAAE,CAAC;QAC7D,CAAC;QAFe,qCAAY,eAE3B,CAAA;IACF,CAAC,EATgB,wBAAwB,wCAAxB,wBAAwB,QASxC;IAED,MAAM,4BAA4B;iBAEV,aAAQ,GAAG,IAAI,4BAA4B,EAAE,CAAC;QAKrE;YACC,IAAI,CAAC,CAAC,GAAiB,EAAE,CAAC;YAC1B,IAAI,CAAC,CAAC,GAAY,EAAE,CAAC;QACtB,CAAC;QAEM,qBAAqB,CAAwB,EAAsB,EAAE,IAA6B;YACxG,MAAM,KAAK,GAA6B,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;YACnD,IAAI,CAAC,CAAC,CAAe,IAAI,CAAC,KAAK,CAAC,CAAC;QAClC,CAAC;QACM,iBAAiB;YACvB,OAAO,IAAI,CAAC,CAAC,CAAe;QAC7B,CAAC;QAEM,gBAAgB,CAAwB,IAA6B;YAC3E,IAAI,CAAC,CAAC,CAAU,IAAI,CAAC,IAAI,CAAC,CAAC;QAC5B,CAAC;QACM,YAAY;YAClB,OAAO,IAAI,CAAC,CAAC,CAAU;QACxB,CAAC","file":"extHostCustomers.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { BrandedService, IConstructorSignature } from 'vs/platform/instantiation/common/instantiation';\nimport { ExtensionHostKind } from 'vs/workbench/services/extensions/common/extensionHostKind';\nimport { IExtensionHostProxy } from 'vs/workbench/services/extensions/common/extensionHostProxy';\nimport { IInternalExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IRPCProtocol, ProxyIdentifier } from 'vs/workbench/services/extensions/common/proxyIdentifier';\n\nexport interface IExtHostContext extends IRPCProtocol {\n\treadonly remoteAuthority: string | null;\n\treadonly extensionHostKind: ExtensionHostKind;\n}\n\nexport interface IInternalExtHostContext extends IExtHostContext {\n\treadonly internalExtensionService: IInternalExtensionService;\n\t_setExtensionHostProxy(extensionHostProxy: IExtensionHostProxy): void;\n\t_setAllMainProxyIdentifiers(mainProxyIdentifiers: ProxyIdentifier<any>[]): void;\n}\n\nexport type IExtHostNamedCustomer<T extends IDisposable> = [ProxyIdentifier<T>, IExtHostCustomerCtor<T>];\n\nexport type IExtHostCustomerCtor<T extends IDisposable> = IConstructorSignature<T, [IExtHostContext]>;\n\nexport function extHostNamedCustomer<T extends IDisposable>(id: ProxyIdentifier<T>) {\n\treturn function <Services extends BrandedService[]>(ctor: { new(context: IExtHostContext, ...services: Services): T }): void {\n\t\tExtHostCustomersRegistryImpl.INSTANCE.registerNamedCustomer(id, ctor as IExtHostCustomerCtor<T>);\n\t};\n}\n\nexport function extHostCustomer<T extends IDisposable, Services extends BrandedService[]>(ctor: { new(context: IExtHostContext, ...services: Services): T }): void {\n\tExtHostCustomersRegistryImpl.INSTANCE.registerCustomer(ctor as IExtHostCustomerCtor<T>);\n}\n\nexport namespace ExtHostCustomersRegistry {\n\n\texport function getNamedCustomers(): IExtHostNamedCustomer<IDisposable>[] {\n\t\treturn ExtHostCustomersRegistryImpl.INSTANCE.getNamedCustomers();\n\t}\n\n\texport function getCustomers(): IExtHostCustomerCtor<IDisposable>[] {\n\t\treturn ExtHostCustomersRegistryImpl.INSTANCE.getCustomers();\n\t}\n}\n\nclass ExtHostCustomersRegistryImpl {\n\n\tpublic static readonly INSTANCE = new ExtHostCustomersRegistryImpl();\n\n\tprivate _namedCustomers: IExtHostNamedCustomer<any>[];\n\tprivate _customers: IExtHostCustomerCtor<any>[];\n\n\tconstructor() {\n\t\tthis._namedCustomers = [];\n\t\tthis._customers = [];\n\t}\n\n\tpublic registerNamedCustomer<T extends IDisposable>(id: ProxyIdentifier<T>, ctor: IExtHostCustomerCtor<T>): void {\n\t\tconst entry: IExtHostNamedCustomer<T> = [id, ctor];\n\t\tthis._namedCustomers.push(entry);\n\t}\n\tpublic getNamedCustomers(): IExtHostNamedCustomer<any>[] {\n\t\treturn this._namedCustomers;\n\t}\n\n\tpublic registerCustomer<T extends IDisposable>(ctor: IExtHostCustomerCtor<T>): void {\n\t\tthis._customers.push(ctor);\n\t}\n\tpublic getCustomers(): IExtHostCustomerCtor<any>[] {\n\t\treturn this._customers;\n\t}\n}\n"]}