{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/extensions/common/extensionHostProxy.ts"],"names":[],"mappings":"AAAA;;;gGAGgG","file":"extensionHostProxy.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { URI } from 'vs/base/common/uri';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { IRemoteConnectionData, RemoteAuthorityResolverErrorCode, ResolverResult } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { IExtensionDescriptionDelta } from 'vs/workbench/services/extensions/common/extensionHostProtocol';\nimport { ActivationKind, ExtensionActivationReason } from 'vs/workbench/services/extensions/common/extensions';\n\nexport interface IResolveAuthorityErrorResult {\n\ttype: 'error';\n\terror: {\n\t\tmessage: string | undefined;\n\t\tcode: RemoteAuthorityResolverErrorCode;\n\t\tdetail: any;\n\t};\n}\n\nexport interface IResolveAuthorityOKResult {\n\ttype: 'ok';\n\tvalue: ResolverResult;\n}\n\nexport type IResolveAuthorityResult = IResolveAuthorityErrorResult | IResolveAuthorityOKResult;\n\nexport interface IExtensionHostProxy {\n\tresolveAuthority(remoteAuthority: string, resolveAttempt: number): Promise<IResolveAuthorityResult>;\n\t/**\n\t * Returns `null` if no resolver for `remoteAuthority` is found.\n\t */\n\tgetCanonicalURI(remoteAuthority: string, uri: URI): Promise<URI | null>;\n\tstartExtensionHost(extensionsDelta: IExtensionDescriptionDelta): Promise<void>;\n\textensionTestsExecute(): Promise<number>;\n\tactivateByEvent(activationEvent: string, activationKind: ActivationKind): Promise<void>;\n\tactivate(extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<boolean>;\n\tsetRemoteEnvironment(env: { [key: string]: string | null }): Promise<void>;\n\tupdateRemoteConnectionData(connectionData: IRemoteConnectionData): Promise<void>;\n\tdeltaExtensions(extensionsDelta: IExtensionDescriptionDelta): Promise<void>;\n\ttest_latency(n: number): Promise<number>;\n\ttest_up(b: VSBuffer): Promise<number>;\n\ttest_down(size: number): Promise<VSBuffer>;\n}\n"]}