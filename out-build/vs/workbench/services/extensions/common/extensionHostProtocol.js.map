{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/extensions/common/extensionHostProtocol.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAqFhG,IAAY,MAGX;IAHD,WAAY,MAAM;QACjB,yCAAW,CAAA;QACX,iCAAO,CAAA;IACR,CAAC,EAHW,MAAM,sBAAN,MAAM,QAGjB;IAED,IAAkB,qBAIjB;IAJD,WAAkB,qBAAqB;QACtC,8DAA8D;QAC9D,wFAAoB,CAAA;QACpB,wFAAoB,CAAA;IACrB,CAAC,EAJiB,qBAAqB,qCAArB,qBAAqB,QAItC;IAkBD,IAAkB,WAIjB;IAJD,WAAkB,WAAW;QAC5B,2DAAW,CAAA;QACX,+CAAK,CAAA;QACL,uDAAS,CAAA;IACV,CAAC,EAJiB,WAAW,2BAAX,WAAW,QAI5B;IAED,SAAgB,GAAG,CAAiB,IAAiB;QACpD,MAAM,MAAM,GAAG,YAAG,CAAM,KAAK,CAAC,CAAC,CAAC,CAAC;QAEjC,QAAQ,IAAI,EAAE;YACb;gBAA8B,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAAC,MAAM;YAC7D;gBAAwB,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAAC,MAAM;YACvD;gBAA4B,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;gBAAC,MAAM;SAC3D;QAED,OAAO,MAAM,CAAC;IACf,CAAC;IAVD,kBAUC;IAED,SAAgB,GAAG,CAAa,OAAY,EAAO,IAAiB;QACnE,IAAI,OAAO,CAAC,UAAU,KAAK,CAAC,EAAE;YAC7B,OAAO,KAAK,CAAC;SACb;QAED,QAAQ,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE;YAC7B,KAAK,CAAC,CAAC,CAAC,OAAO,IAAI,oCAA4B,CAAC;YAChD,KAAK,CAAC,CAAC,CAAC,OAAO,IAAI,8BAAsB,CAAC;YAC1C,KAAK,CAAC,CAAC,CAAC,OAAO,IAAI,kCAA0B,CAAC;YAC9C,OAAO,CAAC,CAAC,OAAO,KAAK,CAAC;SACtB;IACF,CAAC;IAXD,kBAWC;IAED,IAAkB,gBAGjB;IAHD,WAAkB,gBAAgB;QACjC,8CAA0B,CAAA;QAC1B,0CAAsB,CAAA;IACvB,CAAC,EAHiB,gBAAgB,gCAAhB,gBAAgB,QAGjC","file":"extensionHostProtocol.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { URI, UriComponents, UriDto } from 'vs/base/common/uri';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { ILoggerResource, LogLevel } from 'vs/platform/log/common/log';\nimport { IRemoteConnectionData } from 'vs/platform/remote/common/remoteAuthorityResolver';\n\nexport interface IExtensionDescriptionSnapshot {\n\treadonly versionId: number;\n\treadonly allExtensions: IExtensionDescription[];\n\treadonly activationEvents: { [extensionId: string]: string[] };\n\treadonly myExtensions: ExtensionIdentifier[];\n}\n\nexport interface IExtensionDescriptionDelta {\n\treadonly versionId: number;\n\treadonly toRemove: ExtensionIdentifier[];\n\treadonly toAdd: IExtensionDescription[];\n\treadonly addActivationEvents: { [extensionId: string]: string[] };\n\treadonly myToRemove: ExtensionIdentifier[];\n\treadonly myToAdd: ExtensionIdentifier[];\n}\n\nexport interface IExtensionHostInitData {\n\tversion: string;\n\tquality: string | undefined;\n\tcommit?: string;\n\t/**\n\t * When set to `0`, no polling for the parent process still running will happen.\n\t */\n\tparentPid: number | 0;\n\tenvironment: IEnvironment;\n\tworkspace?: IStaticWorkspaceData | null;\n\textensions: IExtensionDescriptionSnapshot;\n\tnlsBaseUrl?: URI;\n\ttelemetryInfo: {\n\t\treadonly sessionId: string;\n\t\treadonly machineId: string;\n\t\treadonly firstSessionDate: string;\n\t\treadonly msftInternal?: boolean;\n\t};\n\tlogLevel: LogLevel;\n\tloggers: UriDto<ILoggerResource>[];\n\tlogsLocation: URI;\n\tautoStart: boolean;\n\tremote: { isRemote: boolean; authority: string | undefined; connectionData: IRemoteConnectionData | null };\n\tconsoleForward: { includeStack: boolean; logNative: boolean };\n\tuiKind: UIKind;\n\tmessagePorts?: ReadonlyMap<string, MessagePortLike>;\n}\n\nexport interface IEnvironment {\n\tisExtensionDevelopmentDebug: boolean;\n\tappName: string;\n\tappHost: string;\n\tappRoot?: URI;\n\tappLanguage: string;\n\textensionTelemetryLogResource: URI;\n\tisExtensionTelemetryLoggingOnly: boolean;\n\tappUriScheme: string;\n\textensionDevelopmentLocationURI?: URI[];\n\textensionTestsLocationURI?: URI;\n\tglobalStorageHome: URI;\n\tworkspaceStorageHome: URI;\n\tuseHostProxy?: boolean;\n\tskipWorkspaceStorageLock?: boolean;\n\textensionLogLevel?: [string, string][];\n}\n\nexport interface IStaticWorkspaceData {\n\tid: string;\n\tname: string;\n\ttransient?: boolean;\n\tconfiguration?: UriComponents | null;\n\tisUntitled?: boolean | null;\n}\n\nexport interface MessagePortLike {\n\tpostMessage(message: any, transfer?: any[]): void;\n\taddEventListener(type: 'message', listener: (e: any) => any): void;\n\tremoveEventListener(type: 'message', listener: (e: any) => any): void;\n\tstart(): void;\n}\n\nexport enum UIKind {\n\tDesktop = 1,\n\tWeb = 2\n}\n\nexport const enum ExtensionHostExitCode {\n\t// nodejs uses codes 1-13 and exit codes >128 are signal exits\n\tVersionMismatch = 55,\n\tUnexpectedError = 81,\n}\n\nexport interface IExtHostReadyMessage {\n\ttype: 'VSCODE_EXTHOST_IPC_READY';\n}\n\nexport interface IExtHostSocketMessage {\n\ttype: 'VSCODE_EXTHOST_IPC_SOCKET';\n\tinitialDataChunk: string;\n\tskipWebSocketFrames: boolean;\n\tpermessageDeflate: boolean;\n\tinflateBytes: string;\n}\n\nexport interface IExtHostReduceGraceTimeMessage {\n\ttype: 'VSCODE_EXTHOST_IPC_REDUCE_GRACE_TIME';\n}\n\nexport const enum MessageType {\n\tInitialized,\n\tReady,\n\tTerminate\n}\n\nexport function createMessageOfType(type: MessageType): VSBuffer {\n\tconst result = VSBuffer.alloc(1);\n\n\tswitch (type) {\n\t\tcase MessageType.Initialized: result.writeUInt8(1, 0); break;\n\t\tcase MessageType.Ready: result.writeUInt8(2, 0); break;\n\t\tcase MessageType.Terminate: result.writeUInt8(3, 0); break;\n\t}\n\n\treturn result;\n}\n\nexport function isMessageOfType(message: VSBuffer, type: MessageType): boolean {\n\tif (message.byteLength !== 1) {\n\t\treturn false;\n\t}\n\n\tswitch (message.readUInt8(0)) {\n\t\tcase 1: return type === MessageType.Initialized;\n\t\tcase 2: return type === MessageType.Ready;\n\t\tcase 3: return type === MessageType.Terminate;\n\t\tdefault: return false;\n\t}\n}\n\nexport const enum NativeLogMarkers {\n\tStart = 'START_NATIVE_LOG',\n\tEnd = 'END_NATIVE_LOG',\n}\n"]}