{"version":3,"sources":["vs/workbench/services/extensions/common/extensionsUtil.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOhG,0EAA0E;IAC1E,SAAgB,GAAG,CAAa,MAA+B,EAAE,IAA6B,EAAE,WAAoC,EAAE,UAAe;QACpJ,MAAM,MAAM,GAAG,IAAI,gBAAG,EAA4C,CAAC;QACnE,MAAM,CAAC,OAAO,CAAC,CAAC,eAAe,EAAE,EAAE;YAClC,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,UAAU,CAAC,CAAC;YACzD,IAAI,SAAS,EAAE;gBACd,UAAU,CAAC,IAAI,CAAC,IAAA,cAAQ,EAAC,CAAsB,EAAE,IAAqC,EAAE,SAAS,CAAC,iBAAiB,CAAC,MAAM,EAAE,eAAe,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;aACvK;YACD,MAAM,CAAC,GAAG,CAAC,eAAe,CAAC,UAAU,EAAE,eAAe,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,OAAO,CAAC,CAAC,aAAa,EAAE,EAAE;YAC9B,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;YACvD,IAAI,SAAS,EAAE;gBACd,IAAI,SAAS,CAAC,SAAS,EAAE;oBACxB,IAAI,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,OAAO,EAAE,aAAa,CAAC,OAAO,CAAC,EAAE;wBACzD,UAAU,CAAC,IAAI,CAAC,sBAAsB,aAAa,CAAC,iBAAiB,CAAC,IAAI,uCAAuC,SAAS,CAAC,iBAAiB,CAAC,IAAI,GAAG,CAAC,CAAC;wBACtJ,OAAO;qBACP;oBACD,kGAAkG;oBACnE,aAAc,CAAC,SAAS,GAAG,IAAI,CAAC;iBAC/D;qBAAM;oBACN,UAAU,CAAC,IAAI,CAAC,IAAA,cAAQ,EAAC,CAAsB,EAAE,IAAqC,EAAE,SAAS,CAAC,iBAAiB,CAAC,MAAM,EAAE,aAAa,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;iBACrK;aACD;iBAAM,IAAI,aAAa,CAAC,SAAS,EAAE;gBACnC,UAAU,CAAC,IAAI,CAAC,uCAAuC,aAAa,CAAC,iBAAiB,CAAC,IAAI,EAAE,CAAC,CAAC;gBAC/F,OAAO;aACP;YACD,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QACH,WAAW,CAAC,OAAO,CAAC,kBAAkB,CAAC,EAAE;YACxC,UAAU,CAAC,IAAI,CAAC,IAAA,cAAQ,EAAC,CAA2B,EAAE,IAAsC,EAAE,kBAAkB,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;YAC5I,MAAM,SAAS,GAAG,MAAM,CAAC,GAAG,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC;YAC5D,IAAI,SAAS,EAAE;gBACd,IAAI,SAAS,CAAC,SAAS,EAAE;oBACxB,oEAAoE;oBACrC,kBAAmB,CAAC,SAAS,GAAG,IAAI,CAAC;iBACpE;aACD;YACD,MAAM,CAAC,GAAG,CAAC,kBAAkB,CAAC,UAAU,EAAE,kBAAkB,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QACH,OAAO,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC,CAAC;IACpC,CAAC;IAxCD,kBAwCC","file":"extensionsUtil.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ExtensionIdentifierMap, IExtensionDescription, IRelaxedExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { localize } from 'vs/nls';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport * as semver from 'vs/base/common/semver/semver';\n\n// TODO: @sandy081 merge this with deduping in extensionsScannerService.ts\nexport function dedupExtensions(system: IExtensionDescription[], user: IExtensionDescription[], development: IExtensionDescription[], logService: ILogService): IExtensionDescription[] {\n\tconst result = new ExtensionIdentifierMap<IExtensionDescription>();\n\tsystem.forEach((systemExtension) => {\n\t\tconst extension = result.get(systemExtension.identifier);\n\t\tif (extension) {\n\t\t\tlogService.warn(localize('overwritingExtension', \"Overwriting extension {0} with {1}.\", extension.extensionLocation.fsPath, systemExtension.extensionLocation.fsPath));\n\t\t}\n\t\tresult.set(systemExtension.identifier, systemExtension);\n\t});\n\tuser.forEach((userExtension) => {\n\t\tconst extension = result.get(userExtension.identifier);\n\t\tif (extension) {\n\t\t\tif (extension.isBuiltin) {\n\t\t\t\tif (semver.gte(extension.version, userExtension.version)) {\n\t\t\t\t\tlogService.warn(`Skipping extension ${userExtension.extensionLocation.path} in favour of the builtin extension ${extension.extensionLocation.path}.`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// Overwriting a builtin extension inherits the `isBuiltin` property and it doesn't show a warning\n\t\t\t\t(<IRelaxedExtensionDescription>userExtension).isBuiltin = true;\n\t\t\t} else {\n\t\t\t\tlogService.warn(localize('overwritingExtension', \"Overwriting extension {0} with {1}.\", extension.extensionLocation.fsPath, userExtension.extensionLocation.fsPath));\n\t\t\t}\n\t\t} else if (userExtension.isBuiltin) {\n\t\t\tlogService.warn(`Skipping obsolete builtin extension ${userExtension.extensionLocation.path}`);\n\t\t\treturn;\n\t\t}\n\t\tresult.set(userExtension.identifier, userExtension);\n\t});\n\tdevelopment.forEach(developedExtension => {\n\t\tlogService.info(localize('extensionUnderDevelopment', \"Loading development extension at {0}\", developedExtension.extensionLocation.fsPath));\n\t\tconst extension = result.get(developedExtension.identifier);\n\t\tif (extension) {\n\t\t\tif (extension.isBuiltin) {\n\t\t\t\t// Overwriting a builtin extension inherits the `isBuiltin` property\n\t\t\t\t(<IRelaxedExtensionDescription>developedExtension).isBuiltin = true;\n\t\t\t}\n\t\t}\n\t\tresult.set(developedExtension.identifier, developedExtension);\n\t});\n\treturn Array.from(result.values());\n}\n"]}