{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/extensions/browser/webWorkerFileSystemProvider.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG,MAAa,IAAI;QAAjB;YAEU,iBAAY,GAAG,yGAAsF,8DAAmD,CAAC;YACzJ,4BAAuB,GAAG,aAAK,CAAC,IAAI,CAAC;YACrC,oBAAe,GAAG,aAAK,CAAC,IAAI,CAAC;QA6CvC,CAAC;QA3CA,0BAA0B;QAC1B,KAAK,CAAC,QAAQ,CAAC,QAAa;YAC3B,IAAI;gBACH,MAAM,GAAG,GAAG,MAAM,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;gBACjD,IAAI,GAAG,CAAC,MAAM,KAAK,GAAG,EAAE;oBACvB,OAAO,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;iBAC/C;gBACD,MAAM,IAAA,WAAG,EAA2B,GAAG,CAAC,UAAU,EAAE,mCAA2B,CAAC,OAAO,CAAC,CAAC;aACzF;YAAC,OAAO,GAAG,EAAE;gBACb,MAAM,IAAA,WAAG,EAA2B,GAAG,EAAE,mCAA2B,CAAC,OAAO,CAAC,CAAC;aAC9E;QACF,CAAC;QAED,uBAAuB;QACvB,KAAK,CAAC,IAAI,CAAC,SAAc;YACxB,OAAO;gBACN,IAAI,EAAE,gBAAQ,CAAC,IAAI;gBACnB,IAAI,EAAE,CAAC;gBACP,KAAK,EAAE,CAAC;gBACR,KAAK,EAAE,CAAC;aACR,CAAC;QACH,CAAC;QAED,KAAK;YACJ,OAAO,eAAG,CAAQ,IAAI,CAAC;QACxB,CAAC;QAED,wBAAwB;QACxB,SAAS,CAAC,SAAc,EAAE,QAAoB,EAAE,KAAwB;YACvE,MAAM,IAAI,WAAE,EAAiB,CAAC;QAC/B,CAAC;QACD,OAAO,CAAC,SAAc;YACrB,MAAM,IAAI,WAAE,EAAiB,CAAC;QAC/B,CAAC;QACD,KAAK,CAAC,SAAc;YACnB,MAAM,IAAI,WAAE,EAAiB,CAAC;QAC/B,CAAC;QACD,MAAM,CAAC,SAAc,EAAE,KAAyB;YAC/C,MAAM,IAAI,WAAE,EAAiB,CAAC;QAC/B,CAAC;QACD,MAAM,CAAC,KAAU,EAAE,GAAQ,EAAE,KAA4B;YACxD,MAAM,IAAI,WAAE,EAAiB,CAAC;QAC/B,CAAC;KACD;IAjDD,oBAiDC","file":"webWorkerFileSystemProvider.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { FileSystemProviderCapabilities, IStat, FileType, IFileDeleteOptions, IFileOverwriteOptions, IFileWriteOptions, FileSystemProviderErrorCode, IFileSystemProviderWithFileReadWriteCapability, createFileSystemProviderError } from 'vs/platform/files/common/files';\nimport { Event } from 'vs/base/common/event';\nimport { IDisposable, Disposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { NotSupportedError } from 'vs/base/common/errors';\n\nexport class FetchFileSystemProvider implements IFileSystemProviderWithFileReadWriteCapability {\n\n\treadonly capabilities = FileSystemProviderCapabilities.Readonly + FileSystemProviderCapabilities.FileReadWrite + FileSystemProviderCapabilities.PathCaseSensitive;\n\treadonly onDidChangeCapabilities = Event.None;\n\treadonly onDidChangeFile = Event.None;\n\n\t// working implementations\n\tasync readFile(resource: URI): Promise<Uint8Array> {\n\t\ttry {\n\t\t\tconst res = await fetch(resource.toString(true));\n\t\t\tif (res.status === 200) {\n\t\t\t\treturn new Uint8Array(await res.arrayBuffer());\n\t\t\t}\n\t\t\tthrow createFileSystemProviderError(res.statusText, FileSystemProviderErrorCode.Unknown);\n\t\t} catch (err) {\n\t\t\tthrow createFileSystemProviderError(err, FileSystemProviderErrorCode.Unknown);\n\t\t}\n\t}\n\n\t// fake implementations\n\tasync stat(_resource: URI): Promise<IStat> {\n\t\treturn {\n\t\t\ttype: FileType.File,\n\t\t\tsize: 0,\n\t\t\tmtime: 0,\n\t\t\tctime: 0\n\t\t};\n\t}\n\n\twatch(): IDisposable {\n\t\treturn Disposable.None;\n\t}\n\n\t// error implementations\n\twriteFile(_resource: URI, _content: Uint8Array, _opts: IFileWriteOptions): Promise<void> {\n\t\tthrow new NotSupportedError();\n\t}\n\treaddir(_resource: URI): Promise<[string, FileType][]> {\n\t\tthrow new NotSupportedError();\n\t}\n\tmkdir(_resource: URI): Promise<void> {\n\t\tthrow new NotSupportedError();\n\t}\n\tdelete(_resource: URI, _opts: IFileDeleteOptions): Promise<void> {\n\t\tthrow new NotSupportedError();\n\t}\n\trename(_from: URI, _to: URI, _opts: IFileOverwriteOptions): Promise<void> {\n\t\tthrow new NotSupportedError();\n\t}\n}\n"]}