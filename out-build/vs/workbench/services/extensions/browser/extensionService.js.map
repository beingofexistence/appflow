{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/extensions/browser/extensionService.ts"],"names":[],"mappings":"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","file":"extensionService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from 'vs/base/common/network';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { ExtensionKind } from 'vs/platform/environment/common/environment';\nimport { ExtensionIdentifier, ExtensionType, IExtension, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IAutomatedWindow, getLogs } from 'vs/platform/log/browser/log';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { PersistentConnectionEventType } from 'vs/platform/remote/common/remoteAgentConnection';\nimport { IRemoteAuthorityResolverService, RemoteAuthorityResolverError, ResolverResult } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { IRemoteExtensionsScannerService } from 'vs/platform/remote/common/remoteExtensionsScanner';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IWorkspaceTrustManagementService } from 'vs/platform/workspace/common/workspaceTrust';\nimport { IBrowserWorkbenchEnvironmentService } from 'vs/workbench/services/environment/browser/environmentService';\nimport { IWebExtensionsScannerService, IWorkbenchExtensionEnablementService, IWorkbenchExtensionManagementService } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { IWebWorkerExtensionHostDataProvider, IWebWorkerExtensionHostInitData, WebWorkerExtensionHost } from 'vs/workbench/services/extensions/browser/webWorkerExtensionHost';\nimport { FetchFileSystemProvider } from 'vs/workbench/services/extensions/browser/webWorkerFileSystemProvider';\nimport { AbstractExtensionService, IExtensionHostFactory, ResolvedExtensions, checkEnabledAndProposedAPI } from 'vs/workbench/services/extensions/common/abstractExtensionService';\nimport { ExtensionDescriptionRegistrySnapshot } from 'vs/workbench/services/extensions/common/extensionDescriptionRegistry';\nimport { ExtensionHostKind, ExtensionRunningPreference, IExtensionHostKindPicker, extensionHostKindToString, extensionRunningPreferenceToString } from 'vs/workbench/services/extensions/common/extensionHostKind';\nimport { IExtensionManifestPropertiesService } from 'vs/workbench/services/extensions/common/extensionManifestPropertiesService';\nimport { ExtensionRunningLocation } from 'vs/workbench/services/extensions/common/extensionRunningLocation';\nimport { ExtensionRunningLocationTracker, filterExtensionDescriptions } from 'vs/workbench/services/extensions/common/extensionRunningLocationTracker';\nimport { ExtensionHostExtensions, ExtensionHostStartup, IExtensionHost, IExtensionService, toExtensionDescription } from 'vs/workbench/services/extensions/common/extensions';\nimport { ExtensionsProposedApi } from 'vs/workbench/services/extensions/common/extensionsProposedApi';\nimport { dedupExtensions } from 'vs/workbench/services/extensions/common/extensionsUtil';\nimport { IRemoteExtensionHostDataProvider, IRemoteExtensionHostInitData, RemoteExtensionHost } from 'vs/workbench/services/extensions/common/remoteExtensionHost';\nimport { ILifecycleService, LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { IRemoteExplorerService } from 'vs/workbench/services/remote/common/remoteExplorerService';\nimport { IUserDataInitializationService } from 'vs/workbench/services/userData/browser/userDataInit';\nimport { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\n\nexport class ExtensionService extends AbstractExtensionService implements IExtensionService {\n\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IBrowserWorkbenchEnvironmentService private readonly _browserEnvironmentService: IBrowserWorkbenchEnvironmentService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IWorkbenchExtensionEnablementService extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IProductService productService: IProductService,\n\t\t@IWorkbenchExtensionManagementService extensionManagementService: IWorkbenchExtensionManagementService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IExtensionManifestPropertiesService extensionManifestPropertiesService: IExtensionManifestPropertiesService,\n\t\t@IWebExtensionsScannerService private readonly _webExtensionsScannerService: IWebExtensionsScannerService,\n\t\t@ILogService logService: ILogService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@IRemoteExtensionsScannerService remoteExtensionsScannerService: IRemoteExtensionsScannerService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IRemoteAuthorityResolverService remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@IUserDataInitializationService private readonly _userDataInitializationService: IUserDataInitializationService,\n\t\t@IUserDataProfileService private readonly _userDataProfileService: IUserDataProfileService,\n\t\t@IWorkspaceTrustManagementService private readonly _workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@IRemoteExplorerService private readonly _remoteExplorerService: IRemoteExplorerService,\n\t\t@IDialogService dialogService: IDialogService,\n\t) {\n\t\tconst extensionsProposedApi = instantiationService.createInstance(ExtensionsProposedApi);\n\t\tconst extensionHostFactory = new BrowserExtensionHostFactory(\n\t\t\textensionsProposedApi,\n\t\t\t() => this._scanWebExtensions(),\n\t\t\t() => this._getExtensionRegistrySnapshotWhenReady(),\n\t\t\tinstantiationService,\n\t\t\tremoteAgentService,\n\t\t\tremoteAuthorityResolverService,\n\t\t\textensionEnablementService,\n\t\t\tlogService\n\t\t);\n\t\tsuper(\n\t\t\textensionsProposedApi,\n\t\t\textensionHostFactory,\n\t\t\tnew BrowserExtensionHostKindPicker(logService),\n\t\t\tinstantiationService,\n\t\t\tnotificationService,\n\t\t\t_browserEnvironmentService,\n\t\t\ttelemetryService,\n\t\t\textensionEnablementService,\n\t\t\tfileService,\n\t\t\tproductService,\n\t\t\textensionManagementService,\n\t\t\tcontextService,\n\t\t\tconfigurationService,\n\t\t\textensionManifestPropertiesService,\n\t\t\tlogService,\n\t\t\tremoteAgentService,\n\t\t\tremoteExtensionsScannerService,\n\t\t\tlifecycleService,\n\t\t\tremoteAuthorityResolverService,\n\t\t\tdialogService\n\t\t);\n\n\t\t// Initialize installed extensions first and do it only after workbench is ready\n\t\tlifecycleService.when(LifecyclePhase.Ready).then(async () => {\n\t\t\tawait this._userDataInitializationService.initializeInstalledExtensions(this._instantiationService);\n\t\t\tthis._initialize();\n\t\t});\n\n\t\tthis._initFetchFileSystem();\n\t}\n\n\tprotected async _scanSingleExtension(extension: IExtension): Promise<IExtensionDescription | null> {\n\t\tif (extension.location.scheme === Schemas.vscodeRemote) {\n\t\t\treturn this._remoteExtensionsScannerService.scanSingleExtension(extension.location, extension.type === ExtensionType.System);\n\t\t}\n\n\t\tconst scannedExtension = await this._webExtensionsScannerService.scanExistingExtension(extension.location, extension.type, this._userDataProfileService.currentProfile.extensionsResource);\n\t\tif (scannedExtension) {\n\t\t\treturn toExtensionDescription(scannedExtension);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tprivate _initFetchFileSystem(): void {\n\t\tconst provider = new FetchFileSystemProvider();\n\t\tthis._register(this._fileService.registerProvider(Schemas.http, provider));\n\t\tthis._register(this._fileService.registerProvider(Schemas.https, provider));\n\t}\n\n\tprivate async _scanWebExtensions(): Promise<IExtensionDescription[]> {\n\t\tconst system: IExtensionDescription[] = [], user: IExtensionDescription[] = [], development: IExtensionDescription[] = [];\n\t\ttry {\n\t\t\tawait Promise.all([\n\t\t\t\tthis._webExtensionsScannerService.scanSystemExtensions().then(extensions => system.push(...extensions.map(e => toExtensionDescription(e)))),\n\t\t\t\tthis._webExtensionsScannerService.scanUserExtensions(this._userDataProfileService.currentProfile.extensionsResource, { skipInvalidExtensions: true }).then(extensions => user.push(...extensions.map(e => toExtensionDescription(e)))),\n\t\t\t\tthis._webExtensionsScannerService.scanExtensionsUnderDevelopment().then(extensions => development.push(...extensions.map(e => toExtensionDescription(e, true))))\n\t\t\t]);\n\t\t} catch (error) {\n\t\t\tthis._logService.error(error);\n\t\t}\n\t\treturn dedupExtensions(system, user, development, this._logService);\n\t}\n\n\tprotected async _resolveExtensionsDefault() {\n\t\tconst [localExtensions, remoteExtensions] = await Promise.all([\n\t\t\tthis._scanWebExtensions(),\n\t\t\tthis._remoteExtensionsScannerService.scanExtensions()\n\t\t]);\n\n\t\treturn new ResolvedExtensions(localExtensions, remoteExtensions, /*hasLocalProcess*/false, /*allowRemoteExtensionsInLocalWebWorker*/true);\n\t}\n\n\tprotected async _resolveExtensions(): Promise<ResolvedExtensions> {\n\t\tif (!this._browserEnvironmentService.expectsResolverExtension) {\n\t\t\treturn this._resolveExtensionsDefault();\n\t\t}\n\n\t\tconst remoteAuthority = this._environmentService.remoteAuthority!;\n\n\t\t// Now that the canonical URI provider has been registered, we need to wait for the trust state to be\n\t\t// calculated. The trust state will be used while resolving the authority, however the resolver can\n\t\t// override the trust state through the resolver result.\n\t\tawait this._workspaceTrustManagementService.workspaceResolved;\n\n\n\t\tlet resolverResult: ResolverResult;\n\t\ttry {\n\t\t\tresolverResult = await this._resolveAuthorityInitial(remoteAuthority);\n\t\t} catch (err) {\n\t\t\tif (RemoteAuthorityResolverError.isHandled(err)) {\n\t\t\t\tconsole.log(`Error handled: Not showing a notification for the error`);\n\t\t\t}\n\t\t\tthis._remoteAuthorityResolverService._setResolvedAuthorityError(remoteAuthority, err);\n\n\t\t\t// Proceed with the local extension host\n\t\t\treturn this._resolveExtensionsDefault();\n\t\t}\n\n\t\t// set the resolved authority\n\t\tthis._remoteAuthorityResolverService._setResolvedAuthority(resolverResult.authority, resolverResult.options);\n\t\tthis._remoteExplorerService.setTunnelInformation(resolverResult.tunnelInformation);\n\n\t\t// monitor for breakage\n\t\tconst connection = this._remoteAgentService.getConnection();\n\t\tif (connection) {\n\t\t\tconnection.onDidStateChange(async (e) => {\n\t\t\t\tif (e.type === PersistentConnectionEventType.ConnectionLost) {\n\t\t\t\t\tthis._remoteAuthorityResolverService._clearResolvedAuthority(remoteAuthority);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconnection.onReconnecting(() => this._resolveAuthorityAgain());\n\t\t}\n\n\t\treturn this._resolveExtensionsDefault();\n\t}\n\n\tprotected async _onExtensionHostExit(code: number): Promise<void> {\n\t\t// Dispose everything associated with the extension host\n\t\tthis._doStopExtensionHosts();\n\n\t\t// If we are running extension tests, forward logs and exit code\n\t\tconst automatedWindow = window as unknown as IAutomatedWindow;\n\t\tif (typeof automatedWindow.codeAutomationExit === 'function') {\n\t\t\tautomatedWindow.codeAutomationExit(code, await getLogs(this._fileService, this._environmentService));\n\t\t}\n\t}\n\n\tprotected async _resolveAuthority(remoteAuthority: string): Promise<ResolverResult> {\n\t\treturn this._resolveAuthorityOnExtensionHosts(ExtensionHostKind.LocalWebWorker, remoteAuthority);\n\t}\n}\n\nclass BrowserExtensionHostFactory implements IExtensionHostFactory {\n\n\tconstructor(\n\t\tprivate readonly _extensionsProposedApi: ExtensionsProposedApi,\n\t\tprivate readonly _scanWebExtensions: () => Promise<IExtensionDescription[]>,\n\t\tprivate readonly _getExtensionRegistrySnapshotWhenReady: () => Promise<ExtensionDescriptionRegistrySnapshot>,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IRemoteAgentService private readonly _remoteAgentService: IRemoteAgentService,\n\t\t@IRemoteAuthorityResolverService private readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@IWorkbenchExtensionEnablementService private readonly _extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) { }\n\n\tcreateExtensionHost(runningLocations: ExtensionRunningLocationTracker, runningLocation: ExtensionRunningLocation, isInitialStart: boolean): IExtensionHost | null {\n\t\tswitch (runningLocation.kind) {\n\t\t\tcase ExtensionHostKind.LocalProcess: {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tcase ExtensionHostKind.LocalWebWorker: {\n\t\t\t\tconst startup = (\n\t\t\t\t\tisInitialStart\n\t\t\t\t\t\t? ExtensionHostStartup.EagerManualStart\n\t\t\t\t\t\t: ExtensionHostStartup.EagerAutoStart\n\t\t\t\t);\n\t\t\t\treturn this._instantiationService.createInstance(WebWorkerExtensionHost, runningLocation, startup, this._createLocalExtensionHostDataProvider(runningLocations, runningLocation, isInitialStart));\n\t\t\t}\n\t\t\tcase ExtensionHostKind.Remote: {\n\t\t\t\tconst remoteAgentConnection = this._remoteAgentService.getConnection();\n\t\t\t\tif (remoteAgentConnection) {\n\t\t\t\t\treturn this._instantiationService.createInstance(RemoteExtensionHost, runningLocation, this._createRemoteExtensionHostDataProvider(runningLocations, remoteAgentConnection.remoteAuthority));\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _createLocalExtensionHostDataProvider(runningLocations: ExtensionRunningLocationTracker, desiredRunningLocation: ExtensionRunningLocation, isInitialStart: boolean): IWebWorkerExtensionHostDataProvider {\n\t\treturn {\n\t\t\tgetInitData: async (): Promise<IWebWorkerExtensionHostInitData> => {\n\t\t\t\tif (isInitialStart) {\n\t\t\t\t\t// Here we load even extensions that would be disabled by workspace trust\n\t\t\t\t\tconst localExtensions = checkEnabledAndProposedAPI(this._logService, this._extensionEnablementService, this._extensionsProposedApi, await this._scanWebExtensions(), /* ignore workspace trust */true);\n\t\t\t\t\tconst runningLocation = runningLocations.computeRunningLocation(localExtensions, [], false);\n\t\t\t\t\tconst myExtensions = filterExtensionDescriptions(localExtensions, runningLocation, extRunningLocation => desiredRunningLocation.equals(extRunningLocation));\n\t\t\t\t\tconst extensions = new ExtensionHostExtensions(0, localExtensions, myExtensions.map(extension => extension.identifier));\n\t\t\t\t\treturn { extensions };\n\t\t\t\t} else {\n\t\t\t\t\t// restart case\n\t\t\t\t\tconst snapshot = await this._getExtensionRegistrySnapshotWhenReady();\n\t\t\t\t\tconst myExtensions = runningLocations.filterByRunningLocation(snapshot.extensions, desiredRunningLocation);\n\t\t\t\t\tconst extensions = new ExtensionHostExtensions(snapshot.versionId, snapshot.extensions, myExtensions.map(extension => extension.identifier));\n\t\t\t\t\treturn { extensions };\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate _createRemoteExtensionHostDataProvider(runningLocations: ExtensionRunningLocationTracker, remoteAuthority: string): IRemoteExtensionHostDataProvider {\n\t\treturn {\n\t\t\tremoteAuthority: remoteAuthority,\n\t\t\tgetInitData: async (): Promise<IRemoteExtensionHostInitData> => {\n\t\t\t\tconst snapshot = await this._getExtensionRegistrySnapshotWhenReady();\n\n\t\t\t\tconst remoteEnv = await this._remoteAgentService.getEnvironment();\n\t\t\t\tif (!remoteEnv) {\n\t\t\t\t\tthrow new Error('Cannot provide init data for remote extension host!');\n\t\t\t\t}\n\n\t\t\t\tconst myExtensions = runningLocations.filterByExtensionHostKind(snapshot.extensions, ExtensionHostKind.Remote);\n\t\t\t\tconst extensions = new ExtensionHostExtensions(snapshot.versionId, snapshot.extensions, myExtensions.map(extension => extension.identifier));\n\n\t\t\t\treturn {\n\t\t\t\t\tconnectionData: this._remoteAuthorityResolverService.getConnectionData(remoteAuthority),\n\t\t\t\t\tpid: remoteEnv.pid,\n\t\t\t\t\tappRoot: remoteEnv.appRoot,\n\t\t\t\t\textensionHostLogsPath: remoteEnv.extensionHostLogsPath,\n\t\t\t\t\tglobalStorageHome: remoteEnv.globalStorageHome,\n\t\t\t\t\tworkspaceStorageHome: remoteEnv.workspaceStorageHome,\n\t\t\t\t\textensions,\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t}\n}\n\nexport class BrowserExtensionHostKindPicker implements IExtensionHostKindPicker {\n\n\tconstructor(\n\t\t@ILogService private readonly _logService: ILogService,\n\t) { }\n\n\tpickExtensionHostKind(extensionId: ExtensionIdentifier, extensionKinds: ExtensionKind[], isInstalledLocally: boolean, isInstalledRemotely: boolean, preference: ExtensionRunningPreference): ExtensionHostKind | null {\n\t\tconst result = BrowserExtensionHostKindPicker.pickRunningLocation(extensionKinds, isInstalledLocally, isInstalledRemotely, preference);\n\t\tthis._logService.trace(`pickRunningLocation for ${extensionId.value}, extension kinds: [${extensionKinds.join(', ')}], isInstalledLocally: ${isInstalledLocally}, isInstalledRemotely: ${isInstalledRemotely}, preference: ${extensionRunningPreferenceToString(preference)} => ${extensionHostKindToString(result)}`);\n\t\treturn result;\n\t}\n\n\tpublic static pickRunningLocation(extensionKinds: ExtensionKind[], isInstalledLocally: boolean, isInstalledRemotely: boolean, preference: ExtensionRunningPreference): ExtensionHostKind | null {\n\t\tconst result: ExtensionHostKind[] = [];\n\t\tlet canRunRemotely = false;\n\t\tfor (const extensionKind of extensionKinds) {\n\t\t\tif (extensionKind === 'ui' && isInstalledRemotely) {\n\t\t\t\t// ui extensions run remotely if possible (but only as a last resort)\n\t\t\t\tif (preference === ExtensionRunningPreference.Remote) {\n\t\t\t\t\treturn ExtensionHostKind.Remote;\n\t\t\t\t} else {\n\t\t\t\t\tcanRunRemotely = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (extensionKind === 'workspace' && isInstalledRemotely) {\n\t\t\t\t// workspace extensions run remotely if possible\n\t\t\t\tif (preference === ExtensionRunningPreference.None || preference === ExtensionRunningPreference.Remote) {\n\t\t\t\t\treturn ExtensionHostKind.Remote;\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(ExtensionHostKind.Remote);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (extensionKind === 'web' && (isInstalledLocally || isInstalledRemotely)) {\n\t\t\t\t// web worker extensions run in the local web worker if possible\n\t\t\t\tif (preference === ExtensionRunningPreference.None || preference === ExtensionRunningPreference.Local) {\n\t\t\t\t\treturn ExtensionHostKind.LocalWebWorker;\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(ExtensionHostKind.LocalWebWorker);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (canRunRemotely) {\n\t\t\tresult.push(ExtensionHostKind.Remote);\n\t\t}\n\t\treturn (result.length > 0 ? result[0] : null);\n\t}\n}\n\nregisterSingleton(IExtensionService, ExtensionService, InstantiationType.Eager);\n"]}