{"version":3,"sources":["vs/workbench/services/extensions/browser/extensionUrlHandler.ts"],"names":[],"mappings":"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","file":"extensionUrlHandler.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { IDisposable, toDisposable, combinedDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IExtensionGalleryService, IExtensionIdentifier, IExtensionManagementService, IGalleryExtension } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { IWorkbenchExtensionEnablementService, EnablementState } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { areSameExtensions } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { createDecorator, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IURLHandler, IURLService, IOpenURLOptions } from 'vs/platform/url/common/url';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { ActivationKind, IExtensionService, toExtensionDescription } from 'vs/workbench/services/extensions/common/extensions';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkbenchContribution, Extensions as WorkbenchExtensions, IWorkbenchContributionsRegistry } from 'vs/workbench/common/contributions';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { Action2, MenuId, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { IQuickInputService, IQuickPickItem } from 'vs/platform/quickinput/common/quickInput';\nimport { IProgressService, ProgressLocation } from 'vs/platform/progress/common/progress';\nimport { IsWebContext } from 'vs/platform/contextkey/common/contextkeys';\nimport { IExtensionUrlTrustService } from 'vs/platform/extensionManagement/common/extensionUrlTrust';\nimport { CancellationToken } from 'vs/base/common/cancellation';\n\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\n\nconst FIVE_MINUTES = 5 * 60 * 1000;\nconst THIRTY_SECONDS = 30 * 1000;\nconst URL_TO_HANDLE = 'extensionUrlHandler.urlToHandle';\nconst USER_TRUSTED_EXTENSIONS_CONFIGURATION_KEY = 'extensions.confirmedUriHandlerExtensionIds';\nconst USER_TRUSTED_EXTENSIONS_STORAGE_KEY = 'extensionUrlHandler.confirmedExtensions';\n\nfunction isExtensionId(value: string): boolean {\n\treturn /^[a-z0-9][a-z0-9\\-]*\\.[a-z0-9][a-z0-9\\-]*$/i.test(value);\n}\n\nclass UserTrustedExtensionIdStorage {\n\n\tget extensions(): string[] {\n\t\tconst userTrustedExtensionIdsJson = this.storageService.get(USER_TRUSTED_EXTENSIONS_STORAGE_KEY, StorageScope.PROFILE, '[]');\n\n\t\ttry {\n\t\t\treturn JSON.parse(userTrustedExtensionIdsJson);\n\t\t} catch {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tconstructor(private storageService: IStorageService) { }\n\n\thas(id: string): boolean {\n\t\treturn this.extensions.indexOf(id) > -1;\n\t}\n\n\tadd(id: string): void {\n\t\tthis.set([...this.extensions, id]);\n\t}\n\n\tset(ids: string[]): void {\n\t\tthis.storageService.store(USER_TRUSTED_EXTENSIONS_STORAGE_KEY, JSON.stringify(ids), StorageScope.PROFILE, StorageTarget.MACHINE);\n\t}\n}\n\nexport const IExtensionUrlHandler = createDecorator<IExtensionUrlHandler>('extensionUrlHandler');\n\nexport interface IExtensionContributedURLHandler extends IURLHandler {\n\textensionDisplayName: string;\n}\n\nexport interface IExtensionUrlHandler {\n\treadonly _serviceBrand: undefined;\n\tregisterExtensionHandler(extensionId: ExtensionIdentifier, handler: IExtensionContributedURLHandler): void;\n\tunregisterExtensionHandler(extensionId: ExtensionIdentifier): void;\n}\n\nexport interface ExtensionUrlHandlerEvent {\n\treadonly extensionId: string;\n}\n\ntype ExtensionUrlHandlerClassification = {\n\towner: 'joaomoreno';\n\treadonly extensionId: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'The ID of the extension that should handle the URI' };\n\tcomment: 'This is used to understand the drop funnel of extension URI handling by the OS & VS Code.';\n};\n\n/**\n * This class handles URLs which are directed towards extensions.\n * If a URL is directed towards an inactive extension, it buffers it,\n * activates the extension and re-opens the URL once the extension registers\n * a URL handler. If the extension never registers a URL handler, the urls\n * will eventually be garbage collected.\n *\n * It also makes sure the user confirms opening URLs directed towards extensions.\n */\nclass ExtensionUrlHandler implements IExtensionUrlHandler, IURLHandler {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate extensionHandlers = new Map<string, IExtensionContributedURLHandler>();\n\tprivate uriBuffer = new Map<string, { timestamp: number; uri: URI }[]>();\n\tprivate userTrustedExtensionsStorage: UserTrustedExtensionIdStorage;\n\tprivate disposable: IDisposable;\n\n\tconstructor(\n\t\t@IURLService urlService: IURLService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IExtensionManagementService private readonly extensionManagementService: IExtensionManagementService,\n\t\t@IWorkbenchExtensionEnablementService private readonly extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IExtensionGalleryService private readonly galleryService: IExtensionGalleryService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IExtensionUrlTrustService private readonly extensionUrlTrustService: IExtensionUrlTrustService\n\t) {\n\t\tthis.userTrustedExtensionsStorage = new UserTrustedExtensionIdStorage(storageService);\n\n\t\tconst interval = setInterval(() => this.garbageCollect(), THIRTY_SECONDS);\n\t\tconst urlToHandleValue = this.storageService.get(URL_TO_HANDLE, StorageScope.WORKSPACE);\n\t\tif (urlToHandleValue) {\n\t\t\tthis.storageService.remove(URL_TO_HANDLE, StorageScope.WORKSPACE);\n\t\t\tthis.handleURL(URI.revive(JSON.parse(urlToHandleValue)), { trusted: true });\n\t\t}\n\n\t\tthis.disposable = combinedDisposable(\n\t\t\turlService.registerHandler(this),\n\t\t\ttoDisposable(() => clearInterval(interval))\n\t\t);\n\n\t\tconst cache = ExtensionUrlBootstrapHandler.cache;\n\t\tsetTimeout(() => cache.forEach(([uri, option]) => this.handleURL(uri, option)));\n\t}\n\n\tasync handleURL(uri: URI, options?: IOpenURLOptions): Promise<boolean> {\n\t\tif (!isExtensionId(uri.authority)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst extensionId = uri.authority;\n\t\tthis.telemetryService.publicLog2<ExtensionUrlHandlerEvent, ExtensionUrlHandlerClassification>('uri_invoked/start', { extensionId });\n\n\t\tconst initialHandler = this.extensionHandlers.get(ExtensionIdentifier.toKey(extensionId));\n\t\tlet extensionDisplayName: string;\n\n\t\tif (!initialHandler) {\n\t\t\t// The extension is not yet activated, so let's check if it is installed and enabled\n\t\t\tconst extension = await this.extensionService.getExtension(extensionId);\n\t\t\tif (!extension) {\n\t\t\t\tawait this.handleUnhandledURL(uri, { id: extensionId }, options);\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\textensionDisplayName = extension.displayName || extension.name;\n\t\t\t}\n\t\t} else {\n\t\t\textensionDisplayName = initialHandler.extensionDisplayName;\n\t\t}\n\n\t\tconst trusted = options?.trusted\n\t\t\t|| (options?.originalUrl ? await this.extensionUrlTrustService.isExtensionUrlTrusted(extensionId, options.originalUrl) : false)\n\t\t\t|| this.didUserTrustExtension(ExtensionIdentifier.toKey(extensionId));\n\n\t\tif (!trusted) {\n\t\t\tlet uriString = uri.toString(false);\n\n\t\t\tif (uriString.length > 40) {\n\t\t\t\turiString = `${uriString.substring(0, 30)}...${uriString.substring(uriString.length - 5)}`;\n\t\t\t}\n\n\t\t\tconst result = await this.dialogService.confirm({\n\t\t\t\tmessage: localize('confirmUrl', \"Allow an extension to open this URI?\", extensionId),\n\t\t\t\tcheckbox: {\n\t\t\t\t\tlabel: localize('rememberConfirmUrl', \"Don't ask again for this extension.\"),\n\t\t\t\t},\n\t\t\t\tdetail: `${extensionDisplayName} (${extensionId}) wants to open a URI:\\n\\n${uriString}`,\n\t\t\t\tprimaryButton: localize({ key: 'open', comment: ['&& denotes a mnemonic'] }, \"&&Open\")\n\t\t\t});\n\n\t\t\tif (!result.confirmed) {\n\t\t\t\tthis.telemetryService.publicLog2<ExtensionUrlHandlerEvent, ExtensionUrlHandlerClassification>('uri_invoked/cancel', { extensionId });\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (result.checkboxChecked) {\n\t\t\t\tthis.userTrustedExtensionsStorage.add(ExtensionIdentifier.toKey(extensionId));\n\t\t\t}\n\t\t}\n\n\t\tconst handler = this.extensionHandlers.get(ExtensionIdentifier.toKey(extensionId));\n\n\t\tif (handler) {\n\t\t\tif (!initialHandler) {\n\t\t\t\t// forward it directly\n\t\t\t\treturn await this.handleURLByExtension(extensionId, handler, uri, options);\n\t\t\t}\n\n\t\t\t// let the ExtensionUrlHandler instance handle this\n\t\t\treturn false;\n\t\t}\n\n\t\t// collect URI for eventual extension activation\n\t\tconst timestamp = new Date().getTime();\n\t\tlet uris = this.uriBuffer.get(ExtensionIdentifier.toKey(extensionId));\n\n\t\tif (!uris) {\n\t\t\turis = [];\n\t\t\tthis.uriBuffer.set(ExtensionIdentifier.toKey(extensionId), uris);\n\t\t}\n\n\t\turis.push({ timestamp, uri });\n\n\t\t// activate the extension using ActivationKind.Immediate because URI handling might be part\n\t\t// of resolving authorities (via authentication extensions)\n\t\tawait this.extensionService.activateByEvent(`onUri:${ExtensionIdentifier.toKey(extensionId)}`, ActivationKind.Immediate);\n\t\treturn true;\n\t}\n\n\tregisterExtensionHandler(extensionId: ExtensionIdentifier, handler: IExtensionContributedURLHandler): void {\n\t\tthis.extensionHandlers.set(ExtensionIdentifier.toKey(extensionId), handler);\n\n\t\tconst uris = this.uriBuffer.get(ExtensionIdentifier.toKey(extensionId)) || [];\n\n\t\tfor (const { uri } of uris) {\n\t\t\tthis.handleURLByExtension(extensionId, handler, uri);\n\t\t}\n\n\t\tthis.uriBuffer.delete(ExtensionIdentifier.toKey(extensionId));\n\t}\n\n\tunregisterExtensionHandler(extensionId: ExtensionIdentifier): void {\n\t\tthis.extensionHandlers.delete(ExtensionIdentifier.toKey(extensionId));\n\t}\n\n\tprivate async handleURLByExtension(extensionId: ExtensionIdentifier | string, handler: IURLHandler, uri: URI, options?: IOpenURLOptions): Promise<boolean> {\n\t\tthis.telemetryService.publicLog2<ExtensionUrlHandlerEvent, ExtensionUrlHandlerClassification>('uri_invoked/end', { extensionId: ExtensionIdentifier.toKey(extensionId) });\n\t\treturn await handler.handleURL(uri, options);\n\t}\n\n\tprivate async handleUnhandledURL(uri: URI, extensionIdentifier: IExtensionIdentifier, options?: IOpenURLOptions): Promise<void> {\n\t\tconst installedExtensions = await this.extensionManagementService.getInstalled();\n\t\tlet extension = installedExtensions.find(e => areSameExtensions(e.identifier, extensionIdentifier));\n\n\t\t// Extension is not installed\n\t\tif (!extension) {\n\t\t\tlet galleryExtension: IGalleryExtension | undefined;\n\n\t\t\ttry {\n\t\t\t\tgalleryExtension = (await this.galleryService.getExtensions([extensionIdentifier], CancellationToken.None))[0] ?? undefined;\n\t\t\t} catch (err) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!galleryExtension) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.telemetryService.publicLog2<ExtensionUrlHandlerEvent, ExtensionUrlHandlerClassification>('uri_invoked/install_extension/start', { extensionId: extensionIdentifier.id });\n\n\t\t\t// Install the Extension and reload the window to handle.\n\t\t\tconst result = await this.dialogService.confirm({\n\t\t\t\tmessage: localize('installAndHandle', \"Extension '{0}' is not installed. Would you like to install the extension and open this URL?\", galleryExtension.displayName || galleryExtension.name),\n\t\t\t\tdetail: `${galleryExtension.displayName || galleryExtension.name} (${extensionIdentifier.id}) wants to open a URL:\\n\\n${uri.toString()}`,\n\t\t\t\tprimaryButton: localize({ key: 'install and open', comment: ['&& denotes a mnemonic'] }, \"&&Install and Open\")\n\t\t\t});\n\n\t\t\tif (!result.confirmed) {\n\t\t\t\tthis.telemetryService.publicLog2<ExtensionUrlHandlerEvent, ExtensionUrlHandlerClassification>('uri_invoked/install_extension/cancel', { extensionId: extensionIdentifier.id });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.telemetryService.publicLog2<ExtensionUrlHandlerEvent, ExtensionUrlHandlerClassification>('uri_invoked/install_extension/accept', { extensionId: extensionIdentifier.id });\n\n\t\t\ttry {\n\t\t\t\textension = await this.progressService.withProgress({\n\t\t\t\t\tlocation: ProgressLocation.Notification,\n\t\t\t\t\ttitle: localize('Installing', \"Installing Extension '{0}'...\", galleryExtension.displayName || galleryExtension.name)\n\t\t\t\t}, () => this.extensionManagementService.installFromGallery(galleryExtension!));\n\t\t\t} catch (error) {\n\t\t\t\tthis.notificationService.error(error);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Extension is installed but not enabled\n\t\tif (!this.extensionEnablementService.isEnabled(extension)) {\n\t\t\tthis.telemetryService.publicLog2<ExtensionUrlHandlerEvent, ExtensionUrlHandlerClassification>('uri_invoked/enable_extension/start', { extensionId: extensionIdentifier.id });\n\t\t\tconst result = await this.dialogService.confirm({\n\t\t\t\tmessage: localize('enableAndHandle', \"Extension '{0}' is disabled. Would you like to enable the extension and open the URL?\", extension.manifest.displayName || extension.manifest.name),\n\t\t\t\tdetail: `${extension.manifest.displayName || extension.manifest.name} (${extensionIdentifier.id}) wants to open a URL:\\n\\n${uri.toString()}`,\n\t\t\t\tprimaryButton: localize({ key: 'enableAndReload', comment: ['&& denotes a mnemonic'] }, \"&&Enable and Open\")\n\t\t\t});\n\n\t\t\tif (!result.confirmed) {\n\t\t\t\tthis.telemetryService.publicLog2<ExtensionUrlHandlerEvent, ExtensionUrlHandlerClassification>('uri_invoked/enable_extension/cancel', { extensionId: extensionIdentifier.id });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.telemetryService.publicLog2<ExtensionUrlHandlerEvent, ExtensionUrlHandlerClassification>('uri_invoked/enable_extension/accept', { extensionId: extensionIdentifier.id });\n\t\t\tawait this.extensionEnablementService.setEnablement([extension], EnablementState.EnabledGlobally);\n\t\t}\n\n\t\tif (this.extensionService.canAddExtension(toExtensionDescription(extension))) {\n\t\t\tawait this.waitUntilExtensionIsAdded(extensionIdentifier);\n\t\t\tawait this.handleURL(uri, { ...options, trusted: true });\n\t\t}\n\n\t\t/* Extension cannot be added and require window reload */\n\t\telse {\n\t\t\tthis.telemetryService.publicLog2<ExtensionUrlHandlerEvent, ExtensionUrlHandlerClassification>('uri_invoked/activate_extension/start', { extensionId: extensionIdentifier.id });\n\t\t\tconst result = await this.dialogService.confirm({\n\t\t\t\tmessage: localize('reloadAndHandle', \"Extension '{0}' is not loaded. Would you like to reload the window to load the extension and open the URL?\", extension.manifest.displayName || extension.manifest.name),\n\t\t\t\tdetail: `${extension.manifest.displayName || extension.manifest.name} (${extensionIdentifier.id}) wants to open a URL:\\n\\n${uri.toString()}`,\n\t\t\t\tprimaryButton: localize({ key: 'reloadAndOpen', comment: ['&& denotes a mnemonic'] }, \"&&Reload Window and Open\")\n\t\t\t});\n\n\t\t\tif (!result.confirmed) {\n\t\t\t\tthis.telemetryService.publicLog2<ExtensionUrlHandlerEvent, ExtensionUrlHandlerClassification>('uri_invoked/activate_extension/cancel', { extensionId: extensionIdentifier.id });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.telemetryService.publicLog2<ExtensionUrlHandlerEvent, ExtensionUrlHandlerClassification>('uri_invoked/activate_extension/accept', { extensionId: extensionIdentifier.id });\n\t\t\tthis.storageService.store(URL_TO_HANDLE, JSON.stringify(uri.toJSON()), StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t\tawait this.hostService.reload();\n\t\t}\n\t}\n\n\tprivate async waitUntilExtensionIsAdded(extensionId: IExtensionIdentifier): Promise<void> {\n\t\tif (!(await this.extensionService.getExtension(extensionId.id))) {\n\t\t\tawait new Promise<void>((c, e) => {\n\t\t\t\tconst disposable = this.extensionService.onDidChangeExtensions(async () => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (await this.extensionService.getExtension(extensionId.id)) {\n\t\t\t\t\t\t\tdisposable.dispose();\n\t\t\t\t\t\t\tc();\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\te(error);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\t// forget about all uris buffered more than 5 minutes ago\n\tprivate garbageCollect(): void {\n\t\tconst now = new Date().getTime();\n\t\tconst uriBuffer = new Map<string, { timestamp: number; uri: URI }[]>();\n\n\t\tthis.uriBuffer.forEach((uris, extensionId) => {\n\t\t\turis = uris.filter(({ timestamp }) => now - timestamp < FIVE_MINUTES);\n\n\t\t\tif (uris.length > 0) {\n\t\t\t\turiBuffer.set(extensionId, uris);\n\t\t\t}\n\t\t});\n\n\t\tthis.uriBuffer = uriBuffer;\n\t}\n\n\tprivate didUserTrustExtension(id: string): boolean {\n\t\tif (this.userTrustedExtensionsStorage.has(id)) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this.getConfirmedTrustedExtensionIdsFromConfiguration().indexOf(id) > -1;\n\t}\n\n\tprivate getConfirmedTrustedExtensionIdsFromConfiguration(): Array<string> {\n\t\tconst trustedExtensionIds = this.configurationService.getValue(USER_TRUSTED_EXTENSIONS_CONFIGURATION_KEY);\n\n\t\tif (!Array.isArray(trustedExtensionIds)) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn trustedExtensionIds;\n\t}\n\n\tdispose(): void {\n\t\tthis.disposable.dispose();\n\t\tthis.extensionHandlers.clear();\n\t\tthis.uriBuffer.clear();\n\t}\n}\n\nregisterSingleton(IExtensionUrlHandler, ExtensionUrlHandler, InstantiationType.Eager);\n\n/**\n * This class handles URLs before `ExtensionUrlHandler` is instantiated.\n * More info: https://github.com/microsoft/vscode/issues/73101\n */\nclass ExtensionUrlBootstrapHandler implements IWorkbenchContribution, IURLHandler {\n\n\tprivate static _cache: [URI, IOpenURLOptions | undefined][] = [];\n\tprivate static disposable: IDisposable;\n\n\tstatic get cache(): [URI, IOpenURLOptions | undefined][] {\n\t\tExtensionUrlBootstrapHandler.disposable.dispose();\n\n\t\tconst result = ExtensionUrlBootstrapHandler._cache;\n\t\tExtensionUrlBootstrapHandler._cache = [];\n\t\treturn result;\n\t}\n\n\tconstructor(@IURLService urlService: IURLService) {\n\t\tExtensionUrlBootstrapHandler.disposable = urlService.registerHandler(this);\n\t}\n\n\tasync handleURL(uri: URI, options?: IOpenURLOptions): Promise<boolean> {\n\t\tif (!isExtensionId(uri.authority)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tExtensionUrlBootstrapHandler._cache.push([uri, options]);\n\t\treturn true;\n\t}\n}\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(ExtensionUrlBootstrapHandler, LifecyclePhase.Ready);\n\nclass ManageAuthorizedExtensionURIsAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.extensions.action.manageAuthorizedExtensionURIs',\n\t\t\ttitle: { value: localize('manage', \"Manage Authorized Extension URIs...\"), original: 'Manage Authorized Extension URIs...' },\n\t\t\tcategory: { value: localize('extensions', \"Extensions\"), original: 'Extensions' },\n\t\t\tmenu: {\n\t\t\t\tid: MenuId.CommandPalette,\n\t\t\t\twhen: IsWebContext.toNegated()\n\t\t\t}\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst storageService = accessor.get(IStorageService);\n\t\tconst quickInputService = accessor.get(IQuickInputService);\n\t\tconst storage = new UserTrustedExtensionIdStorage(storageService);\n\t\tconst items = storage.extensions.map(label => ({ label, picked: true } as IQuickPickItem));\n\n\t\tif (items.length === 0) {\n\t\t\tawait quickInputService.pick([{ label: localize('no', 'There are currently no authorized extension URIs.') }]);\n\t\t\treturn;\n\t\t}\n\n\t\tconst result = await quickInputService.pick(items, { canPickMany: true });\n\n\t\tif (!result) {\n\t\t\treturn;\n\t\t}\n\n\t\tstorage.set(result.map(item => item.label));\n\t}\n}\n\nregisterAction2(ManageAuthorizedExtensionURIsAction);\n"]}