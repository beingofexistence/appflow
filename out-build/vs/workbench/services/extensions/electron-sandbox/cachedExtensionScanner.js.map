{"version":3,"sources":["vs/workbench/services/extensions/electron-sandbox/cachedExtensionScanner.ts"],"names":[],"mappings":"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","file":"cachedExtensionScanner.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as path from 'vs/base/common/path';\nimport * as platform from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { IExtensionDescription, ExtensionType } from 'vs/platform/extensions/common/extensions';\nimport { dedupExtensions } from 'vs/workbench/services/extensions/common/extensionsUtil';\nimport { IExtensionsScannerService, IScannedExtension, toExtensionDescription } from 'vs/platform/extensionManagement/common/extensionsScannerService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport Severity from 'vs/base/common/severity';\nimport { localize } from 'vs/nls';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { timeout } from 'vs/base/common/async';\nimport { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\nimport { getErrorMessage } from 'vs/base/common/errors';\n\nexport class CachedExtensionScanner {\n\n\tpublic readonly scannedExtensions: Promise<IExtensionDescription[]>;\n\tprivate _scannedExtensionsResolve!: (result: IExtensionDescription[]) => void;\n\tprivate _scannedExtensionsReject!: (err: any) => void;\n\n\tconstructor(\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@IHostService private readonly _hostService: IHostService,\n\t\t@IExtensionsScannerService private readonly _extensionsScannerService: IExtensionsScannerService,\n\t\t@IUserDataProfileService private readonly _userDataProfileService: IUserDataProfileService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tthis.scannedExtensions = new Promise<IExtensionDescription[]>((resolve, reject) => {\n\t\t\tthis._scannedExtensionsResolve = resolve;\n\t\t\tthis._scannedExtensionsReject = reject;\n\t\t});\n\t}\n\n\tpublic async scanSingleExtension(extensionPath: string, isBuiltin: boolean): Promise<IExtensionDescription | null> {\n\t\tconst scannedExtension = await this._extensionsScannerService.scanExistingExtension(URI.file(path.resolve(extensionPath)), isBuiltin ? ExtensionType.System : ExtensionType.User, { language: platform.language });\n\t\treturn scannedExtension ? toExtensionDescription(scannedExtension, false) : null;\n\t}\n\n\tpublic async startScanningExtensions(): Promise<void> {\n\t\ttry {\n\t\t\tconst extensions = await this._scanInstalledExtensions();\n\t\t\tthis._scannedExtensionsResolve(extensions);\n\t\t} catch (err) {\n\t\t\tthis._scannedExtensionsReject(err);\n\t\t}\n\t}\n\n\tprivate async _scanInstalledExtensions(): Promise<IExtensionDescription[]> {\n\t\ttry {\n\t\t\tconst language = platform.language;\n\t\t\tconst result = await Promise.allSettled([\n\t\t\t\tthis._extensionsScannerService.scanSystemExtensions({ language, useCache: true, checkControlFile: true }),\n\t\t\t\tthis._extensionsScannerService.scanUserExtensions({ language, profileLocation: this._userDataProfileService.currentProfile.extensionsResource, useCache: true })]);\n\n\t\t\tlet scannedSystemExtensions: IScannedExtension[] = [],\n\t\t\t\tscannedUserExtensions: IScannedExtension[] = [],\n\t\t\t\tscannedDevelopedExtensions: IScannedExtension[] = [],\n\t\t\t\thasErrors = false;\n\n\t\t\tif (result[0].status === 'fulfilled') {\n\t\t\t\tscannedSystemExtensions = result[0].value;\n\t\t\t} else {\n\t\t\t\thasErrors = true;\n\t\t\t\tthis._logService.error(`Error scanning system extensions:`, getErrorMessage(result[0].reason));\n\t\t\t}\n\n\t\t\tif (result[1].status === 'fulfilled') {\n\t\t\t\tscannedUserExtensions = result[1].value;\n\t\t\t} else {\n\t\t\t\thasErrors = true;\n\t\t\t\tthis._logService.error(`Error scanning user extensions:`, getErrorMessage(result[1].reason));\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tscannedDevelopedExtensions = await this._extensionsScannerService.scanExtensionsUnderDevelopment({ language }, [...scannedSystemExtensions, ...scannedUserExtensions]);\n\t\t\t} catch (error) {\n\t\t\t\tthis._logService.error(error);\n\t\t\t}\n\n\t\t\tconst system = scannedSystemExtensions.map(e => toExtensionDescription(e, false));\n\t\t\tconst user = scannedUserExtensions.map(e => toExtensionDescription(e, false));\n\t\t\tconst development = scannedDevelopedExtensions.map(e => toExtensionDescription(e, true));\n\t\t\tconst r = dedupExtensions(system, user, development, this._logService);\n\n\t\t\tif (!hasErrors) {\n\t\t\t\tconst disposable = this._extensionsScannerService.onDidChangeCache(() => {\n\t\t\t\t\tdisposable.dispose();\n\t\t\t\t\tthis._notificationService.prompt(\n\t\t\t\t\t\tSeverity.Error,\n\t\t\t\t\t\tlocalize('extensionCache.invalid', \"Extensions have been modified on disk. Please reload the window.\"),\n\t\t\t\t\t\t[{\n\t\t\t\t\t\t\tlabel: localize('reloadWindow', \"Reload Window\"),\n\t\t\t\t\t\t\trun: () => this._hostService.reload()\n\t\t\t\t\t\t}]\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t\ttimeout(5000).then(() => disposable.dispose());\n\t\t\t}\n\n\t\t\treturn r;\n\t\t} catch (err) {\n\t\t\tthis._logService.error(`Error scanning installed extensions:`);\n\t\t\tthis._logService.error(err);\n\t\t\treturn [];\n\t\t}\n\t}\n\n}\n"]}