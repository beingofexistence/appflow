{"version":3,"sources":["vs/workbench/services/extensions/electron-sandbox/nativeExtensionService.ts"],"names":[],"mappings":"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","file":"nativeExtensionService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { runWhenIdle } from 'vs/base/common/async';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Schemas } from 'vs/base/common/network';\nimport * as performance from 'vs/base/common/performance';\nimport { isCI } from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport * as nls from 'vs/nls';\nimport { Categories } from 'vs/platform/action/common/actionCommonCategories';\nimport { Action2, registerAction2 } from 'vs/platform/actions/common/actions';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ConfigurationScope } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { ExtensionKind } from 'vs/platform/environment/common/environment';\nimport { IExtensionGalleryService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { ExtensionIdentifier, ExtensionType, IExtension, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { INativeHostService } from 'vs/platform/native/common/native';\nimport { INotificationService, IPromptChoice, NotificationPriority, Severity } from 'vs/platform/notification/common/notification';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { PersistentConnectionEventType } from 'vs/platform/remote/common/remoteAgentConnection';\nimport { IRemoteAgentEnvironment } from 'vs/platform/remote/common/remoteAgentEnvironment';\nimport { IRemoteAuthorityResolverService, RemoteConnectionType, RemoteAuthorityResolverError, ResolverResult, getRemoteAuthorityPrefix } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { IRemoteExtensionsScannerService } from 'vs/platform/remote/common/remoteExtensionsScanner';\nimport { getRemoteName, parseAuthorityWithPort } from 'vs/platform/remote/common/remoteHosts';\nimport { updateProxyConfigurationsScope } from 'vs/platform/request/common/request';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IWorkspaceTrustManagementService } from 'vs/platform/workspace/common/workspaceTrust';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { EnablementState, IWorkbenchExtensionEnablementService, IWorkbenchExtensionManagementService } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { IWebWorkerExtensionHostDataProvider, IWebWorkerExtensionHostInitData, WebWorkerExtensionHost } from 'vs/workbench/services/extensions/browser/webWorkerExtensionHost';\nimport { AbstractExtensionService, ExtensionHostCrashTracker, IExtensionHostFactory, ResolvedExtensions, checkEnabledAndProposedAPI, extensionIsEnabled } from 'vs/workbench/services/extensions/common/abstractExtensionService';\nimport { ExtensionDescriptionRegistrySnapshot } from 'vs/workbench/services/extensions/common/extensionDescriptionRegistry';\nimport { parseExtensionDevOptions } from 'vs/workbench/services/extensions/common/extensionDevOptions';\nimport { ExtensionHostKind, ExtensionRunningPreference, IExtensionHostKindPicker, extensionHostKindToString, extensionRunningPreferenceToString } from 'vs/workbench/services/extensions/common/extensionHostKind';\nimport { IExtensionHostManager } from 'vs/workbench/services/extensions/common/extensionHostManager';\nimport { ExtensionHostExitCode } from 'vs/workbench/services/extensions/common/extensionHostProtocol';\nimport { IExtensionManifestPropertiesService } from 'vs/workbench/services/extensions/common/extensionManifestPropertiesService';\nimport { ExtensionRunningLocation, LocalProcessRunningLocation, LocalWebWorkerRunningLocation } from 'vs/workbench/services/extensions/common/extensionRunningLocation';\nimport { ExtensionRunningLocationTracker, filterExtensionDescriptions } from 'vs/workbench/services/extensions/common/extensionRunningLocationTracker';\nimport { ExtensionHostExtensions, ExtensionHostStartup, IExtensionHost, IExtensionService, WebWorkerExtHostConfigValue, toExtension, webWorkerExtHostConfig } from 'vs/workbench/services/extensions/common/extensions';\nimport { ExtensionsProposedApi } from 'vs/workbench/services/extensions/common/extensionsProposedApi';\nimport { IRemoteExtensionHostDataProvider, IRemoteExtensionHostInitData, RemoteExtensionHost } from 'vs/workbench/services/extensions/common/remoteExtensionHost';\nimport { CachedExtensionScanner } from 'vs/workbench/services/extensions/electron-sandbox/cachedExtensionScanner';\nimport { ILocalProcessExtensionHostDataProvider, ILocalProcessExtensionHostInitData, NativeLocalProcessExtensionHost } from 'vs/workbench/services/extensions/electron-sandbox/localProcessExtensionHost';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { ILifecycleService, LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { IRemoteExplorerService } from 'vs/workbench/services/remote/common/remoteExplorerService';\n\nexport class NativeExtensionService extends AbstractExtensionService implements IExtensionService {\n\n\tprivate readonly _extensionScanner: CachedExtensionScanner;\n\tprivate readonly _localCrashTracker = new ExtensionHostCrashTracker();\n\n\tconstructor(\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IWorkbenchExtensionEnablementService extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IProductService productService: IProductService,\n\t\t@IWorkbenchExtensionManagementService extensionManagementService: IWorkbenchExtensionManagementService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IExtensionManifestPropertiesService extensionManifestPropertiesService: IExtensionManifestPropertiesService,\n\t\t@ILogService logService: ILogService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@IRemoteExtensionsScannerService remoteExtensionsScannerService: IRemoteExtensionsScannerService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IRemoteAuthorityResolverService remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@INativeHostService private readonly _nativeHostService: INativeHostService,\n\t\t@IHostService private readonly _hostService: IHostService,\n\t\t@IRemoteExplorerService private readonly _remoteExplorerService: IRemoteExplorerService,\n\t\t@IExtensionGalleryService private readonly _extensionGalleryService: IExtensionGalleryService,\n\t\t@IWorkspaceTrustManagementService private readonly _workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@IDialogService dialogService: IDialogService,\n\t) {\n\t\tconst extensionsProposedApi = instantiationService.createInstance(ExtensionsProposedApi);\n\t\tconst extensionScanner = instantiationService.createInstance(CachedExtensionScanner);\n\t\tconst extensionHostFactory = new NativeExtensionHostFactory(\n\t\t\textensionsProposedApi,\n\t\t\textensionScanner,\n\t\t\t() => this._getExtensionRegistrySnapshotWhenReady(),\n\t\t\tinstantiationService,\n\t\t\tenvironmentService,\n\t\t\textensionEnablementService,\n\t\t\tconfigurationService,\n\t\t\tremoteAgentService,\n\t\t\tremoteAuthorityResolverService,\n\t\t\tlogService\n\t\t);\n\t\tsuper(\n\t\t\textensionsProposedApi,\n\t\t\textensionHostFactory,\n\t\t\tnew NativeExtensionHostKindPicker(environmentService, configurationService, logService),\n\t\t\tinstantiationService,\n\t\t\tnotificationService,\n\t\t\tenvironmentService,\n\t\t\ttelemetryService,\n\t\t\textensionEnablementService,\n\t\t\tfileService,\n\t\t\tproductService,\n\t\t\textensionManagementService,\n\t\t\tcontextService,\n\t\t\tconfigurationService,\n\t\t\textensionManifestPropertiesService,\n\t\t\tlogService,\n\t\t\tremoteAgentService,\n\t\t\tremoteExtensionsScannerService,\n\t\t\tlifecycleService,\n\t\t\tremoteAuthorityResolverService,\n\t\t\tdialogService\n\t\t);\n\n\t\tthis._extensionScanner = extensionScanner;\n\n\t\t// delay extension host creation and extension scanning\n\t\t// until the workbench is running. we cannot defer the\n\t\t// extension host more (LifecyclePhase.Restored) because\n\t\t// some editors require the extension host to restore\n\t\t// and this would result in a deadlock\n\t\t// see https://github.com/microsoft/vscode/issues/41322\n\t\tlifecycleService.when(LifecyclePhase.Ready).then(() => {\n\t\t\t// reschedule to ensure this runs after restoring viewlets, panels, and editors\n\t\t\trunWhenIdle(() => {\n\t\t\t\tthis._initialize();\n\t\t\t}, 50 /*max delay*/);\n\t\t});\n\t}\n\n\tprotected _scanSingleExtension(extension: IExtension): Promise<IExtensionDescription | null> {\n\t\tif (extension.location.scheme === Schemas.vscodeRemote) {\n\t\t\treturn this._remoteExtensionsScannerService.scanSingleExtension(extension.location, extension.type === ExtensionType.System);\n\t\t}\n\n\t\treturn this._extensionScanner.scanSingleExtension(extension.location.fsPath, extension.type === ExtensionType.System);\n\t}\n\n\tprivate async _scanAllLocalExtensions(): Promise<IExtensionDescription[]> {\n\t\treturn this._extensionScanner.scannedExtensions;\n\t}\n\n\tprotected override _onExtensionHostCrashed(extensionHost: IExtensionHostManager, code: number, signal: string | null): void {\n\n\t\tconst activatedExtensions: ExtensionIdentifier[] = [];\n\t\tconst extensionsStatus = this.getExtensionsStatus();\n\t\tfor (const key of Object.keys(extensionsStatus)) {\n\t\t\tconst extensionStatus = extensionsStatus[key];\n\t\t\tif (extensionStatus.activationStarted && extensionHost.containsExtension(extensionStatus.id)) {\n\t\t\t\tactivatedExtensions.push(extensionStatus.id);\n\t\t\t}\n\t\t}\n\n\t\tsuper._onExtensionHostCrashed(extensionHost, code, signal);\n\n\t\tif (extensionHost.kind === ExtensionHostKind.LocalProcess) {\n\t\t\tif (code === ExtensionHostExitCode.VersionMismatch) {\n\t\t\t\tthis._notificationService.prompt(\n\t\t\t\t\tSeverity.Error,\n\t\t\t\t\tnls.localize('extensionService.versionMismatchCrash', \"Extension host cannot start: version mismatch.\"),\n\t\t\t\t\t[{\n\t\t\t\t\t\tlabel: nls.localize('relaunch', \"Relaunch VS Code\"),\n\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\tthis._instantiationService.invokeFunction((accessor) => {\n\t\t\t\t\t\t\t\tconst hostService = accessor.get(IHostService);\n\t\t\t\t\t\t\t\thostService.restart();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}]\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._logExtensionHostCrash(extensionHost);\n\t\t\tthis._sendExtensionHostCrashTelemetry(code, signal, activatedExtensions);\n\n\t\t\tthis._localCrashTracker.registerCrash();\n\n\t\t\tif (this._localCrashTracker.shouldAutomaticallyRestart()) {\n\t\t\t\tthis._logService.info(`Automatically restarting the extension host.`);\n\t\t\t\tthis._notificationService.status(nls.localize('extensionService.autoRestart', \"The extension host terminated unexpectedly. Restarting...\"), { hideAfter: 5000 });\n\t\t\t\tthis.startExtensionHosts();\n\t\t\t} else {\n\t\t\t\tconst choices: IPromptChoice[] = [];\n\t\t\t\tif (this._environmentService.isBuilt) {\n\t\t\t\t\tchoices.push({\n\t\t\t\t\t\tlabel: nls.localize('startBisect', \"Start Extension Bisect\"),\n\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\tthis._instantiationService.invokeFunction(accessor => {\n\t\t\t\t\t\t\t\tconst commandService = accessor.get(ICommandService);\n\t\t\t\t\t\t\t\tcommandService.executeCommand('extension.bisect.start');\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tchoices.push({\n\t\t\t\t\t\tlabel: nls.localize('devTools', \"Open Developer Tools\"),\n\t\t\t\t\t\trun: () => this._nativeHostService.openDevTools()\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tchoices.push({\n\t\t\t\t\tlabel: nls.localize('restart', \"Restart Extension Host\"),\n\t\t\t\t\trun: () => this.startExtensionHosts()\n\t\t\t\t});\n\n\t\t\t\tif (this._environmentService.isBuilt) {\n\t\t\t\t\tchoices.push({\n\t\t\t\t\t\tlabel: nls.localize('learnMore', \"Learn More\"),\n\t\t\t\t\t\trun: () => {\n\t\t\t\t\t\t\tthis._instantiationService.invokeFunction(accessor => {\n\t\t\t\t\t\t\t\tconst openerService = accessor.get(IOpenerService);\n\t\t\t\t\t\t\t\topenerService.open('https://aka.ms/vscode-extension-bisect');\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis._notificationService.prompt(Severity.Error, nls.localize('extensionService.crash', \"Extension host terminated unexpectedly 3 times within the last 5 minutes.\"), choices);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _sendExtensionHostCrashTelemetry(code: number, signal: string | null, activatedExtensions: ExtensionIdentifier[]): void {\n\t\ttype ExtensionHostCrashClassification = {\n\t\t\towner: 'alexdima';\n\t\t\tcomment: 'The extension host has terminated unexpectedly';\n\t\t\tcode: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The exit code of the extension host process.' };\n\t\t\tsignal: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The signal that caused the extension host process to exit.' };\n\t\t\textensionIds: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The list of loaded extensions.' };\n\t\t};\n\t\ttype ExtensionHostCrashEvent = {\n\t\t\tcode: number;\n\t\t\tsignal: string | null;\n\t\t\textensionIds: string[];\n\t\t};\n\t\tthis._telemetryService.publicLog2<ExtensionHostCrashEvent, ExtensionHostCrashClassification>('extensionHostCrash', {\n\t\t\tcode,\n\t\t\tsignal,\n\t\t\textensionIds: activatedExtensions.map(e => e.value)\n\t\t});\n\n\t\tfor (const extensionId of activatedExtensions) {\n\t\t\ttype ExtensionHostCrashExtensionClassification = {\n\t\t\t\towner: 'alexdima';\n\t\t\t\tcomment: 'The extension host has terminated unexpectedly';\n\t\t\t\tcode: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The exit code of the extension host process.' };\n\t\t\t\tsignal: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The signal that caused the extension host process to exit.' };\n\t\t\t\textensionId: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The identifier of the extension.' };\n\t\t\t};\n\t\t\ttype ExtensionHostCrashExtensionEvent = {\n\t\t\t\tcode: number;\n\t\t\t\tsignal: string | null;\n\t\t\t\textensionId: string;\n\t\t\t};\n\t\t\tthis._telemetryService.publicLog2<ExtensionHostCrashExtensionEvent, ExtensionHostCrashExtensionClassification>('extensionHostCrashExtension', {\n\t\t\t\tcode,\n\t\t\t\tsignal,\n\t\t\t\textensionId: extensionId.value\n\t\t\t});\n\t\t}\n\t}\n\n\t// --- impl\n\n\tprotected async _resolveAuthority(remoteAuthority: string): Promise<ResolverResult> {\n\n\t\tconst authorityPlusIndex = remoteAuthority.indexOf('+');\n\t\tif (authorityPlusIndex === -1) {\n\t\t\t// This authority does not need to be resolved, simply parse the port number\n\t\t\tconst { host, port } = parseAuthorityWithPort(remoteAuthority);\n\t\t\treturn {\n\t\t\t\tauthority: {\n\t\t\t\t\tauthority: remoteAuthority,\n\t\t\t\t\tconnectTo: {\n\t\t\t\t\t\ttype: RemoteConnectionType.WebSocket,\n\t\t\t\t\t\thost,\n\t\t\t\t\t\tport\n\t\t\t\t\t},\n\t\t\t\t\tconnectionToken: undefined\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\treturn this._resolveAuthorityOnExtensionHosts(ExtensionHostKind.LocalProcess, remoteAuthority);\n\t}\n\n\tprivate async _getCanonicalURI(remoteAuthority: string, uri: URI): Promise<URI> {\n\n\t\tconst authorityPlusIndex = remoteAuthority.indexOf('+');\n\t\tif (authorityPlusIndex === -1) {\n\t\t\t// This authority does not use a resolver\n\t\t\treturn uri;\n\t\t}\n\n\t\tconst localProcessExtensionHosts = this._getExtensionHostManagers(ExtensionHostKind.LocalProcess);\n\t\tif (localProcessExtensionHosts.length === 0) {\n\t\t\t// no local process extension hosts\n\t\t\tthrow new Error(`Cannot resolve canonical URI`);\n\t\t}\n\n\t\tconst results = await Promise.all(localProcessExtensionHosts.map(extHost => extHost.getCanonicalURI(remoteAuthority, uri)));\n\n\t\tfor (const result of results) {\n\t\t\tif (result) {\n\t\t\t\treturn result;\n\t\t\t}\n\t\t}\n\n\t\t// we can only reach this if there was no resolver extension that can return the cannonical uri\n\t\tthrow new Error(`Cannot get canonical URI because no extension is installed to resolve ${getRemoteAuthorityPrefix(remoteAuthority)}`);\n\t}\n\n\tprotected async _resolveExtensions(): Promise<ResolvedExtensions> {\n\t\tthis._extensionScanner.startScanningExtensions();\n\n\t\tconst remoteAuthority = this._environmentService.remoteAuthority;\n\n\t\tlet remoteEnv: IRemoteAgentEnvironment | null = null;\n\t\tlet remoteExtensions: IExtensionDescription[] = [];\n\n\t\tif (remoteAuthority) {\n\n\t\t\tthis._remoteAuthorityResolverService._setCanonicalURIProvider(async (uri) => {\n\t\t\t\tif (uri.scheme !== Schemas.vscodeRemote || uri.authority !== remoteAuthority) {\n\t\t\t\t\t// The current remote authority resolver cannot give the canonical URI for this URI\n\t\t\t\t\treturn uri;\n\t\t\t\t}\n\t\t\t\tperformance.mark(`code/willGetCanonicalURI/${getRemoteAuthorityPrefix(remoteAuthority)}`);\n\t\t\t\tif (isCI) {\n\t\t\t\t\tthis._logService.info(`Invoking getCanonicalURI for authority ${getRemoteAuthorityPrefix(remoteAuthority)}...`);\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\treturn this._getCanonicalURI(remoteAuthority, uri);\n\t\t\t\t} finally {\n\t\t\t\t\tperformance.mark(`code/didGetCanonicalURI/${getRemoteAuthorityPrefix(remoteAuthority)}`);\n\t\t\t\t\tif (isCI) {\n\t\t\t\t\t\tthis._logService.info(`getCanonicalURI returned for authority ${getRemoteAuthorityPrefix(remoteAuthority)}.`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (isCI) {\n\t\t\t\tthis._logService.info(`Starting to wait on IWorkspaceTrustManagementService.workspaceResolved...`);\n\t\t\t}\n\n\t\t\t// Now that the canonical URI provider has been registered, we need to wait for the trust state to be\n\t\t\t// calculated. The trust state will be used while resolving the authority, however the resolver can\n\t\t\t// override the trust state through the resolver result.\n\t\t\tawait this._workspaceTrustManagementService.workspaceResolved;\n\n\t\t\tif (isCI) {\n\t\t\t\tthis._logService.info(`Finished waiting on IWorkspaceTrustManagementService.workspaceResolved.`);\n\t\t\t}\n\n\t\t\tlet resolverResult: ResolverResult;\n\t\t\ttry {\n\t\t\t\tresolverResult = await this._resolveAuthorityInitial(remoteAuthority);\n\t\t\t} catch (err) {\n\t\t\t\tif (RemoteAuthorityResolverError.isNoResolverFound(err)) {\n\t\t\t\t\terr.isHandled = await this._handleNoResolverFound(remoteAuthority);\n\t\t\t\t} else {\n\t\t\t\t\tif (RemoteAuthorityResolverError.isHandled(err)) {\n\t\t\t\t\t\tconsole.log(`Error handled: Not showing a notification for the error`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._remoteAuthorityResolverService._setResolvedAuthorityError(remoteAuthority, err);\n\n\t\t\t\t// Proceed with the local extension host\n\t\t\t\treturn this._startLocalExtensionHost();\n\t\t\t}\n\n\t\t\t// set the resolved authority\n\t\t\tthis._remoteAuthorityResolverService._setResolvedAuthority(resolverResult.authority, resolverResult.options);\n\t\t\tthis._remoteExplorerService.setTunnelInformation(resolverResult.tunnelInformation);\n\n\t\t\t// monitor for breakage\n\t\t\tconst connection = this._remoteAgentService.getConnection();\n\t\t\tif (connection) {\n\t\t\t\tconnection.onDidStateChange(async (e) => {\n\t\t\t\t\tif (e.type === PersistentConnectionEventType.ConnectionLost) {\n\t\t\t\t\t\tthis._remoteAuthorityResolverService._clearResolvedAuthority(remoteAuthority);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tconnection.onReconnecting(() => this._resolveAuthorityAgain());\n\t\t\t}\n\n\t\t\t// fetch the remote environment\n\t\t\t[remoteEnv, remoteExtensions] = await Promise.all([\n\t\t\t\tthis._remoteAgentService.getEnvironment(),\n\t\t\t\tthis._remoteExtensionsScannerService.scanExtensions()\n\t\t\t]);\n\n\t\t\tif (!remoteEnv) {\n\t\t\t\tthis._notificationService.notify({ severity: Severity.Error, message: nls.localize('getEnvironmentFailure', \"Could not fetch remote environment\") });\n\t\t\t\t// Proceed with the local extension host\n\t\t\t\treturn this._startLocalExtensionHost();\n\t\t\t}\n\n\t\t\tupdateProxyConfigurationsScope(remoteEnv.useHostProxy ? ConfigurationScope.APPLICATION : ConfigurationScope.MACHINE);\n\t\t} else {\n\n\t\t\tthis._remoteAuthorityResolverService._setCanonicalURIProvider(async (uri) => uri);\n\n\t\t}\n\n\t\treturn this._startLocalExtensionHost(remoteExtensions);\n\t}\n\n\tprivate async _startLocalExtensionHost(remoteExtensions: IExtensionDescription[] = []): Promise<ResolvedExtensions> {\n\t\t// Ensure that the workspace trust state has been fully initialized so\n\t\t// that the extension host can start with the correct set of extensions.\n\t\tawait this._workspaceTrustManagementService.workspaceTrustInitialized;\n\n\t\treturn new ResolvedExtensions(await this._scanAllLocalExtensions(), remoteExtensions, /*hasLocalProcess*/true, /*allowRemoteExtensionsInLocalWebWorker*/false);\n\t}\n\n\tprotected _onExtensionHostExit(code: number): void {\n\t\t// Dispose everything associated with the extension host\n\t\tthis._doStopExtensionHosts();\n\n\t\t// Dispose the management connection to avoid reconnecting after the extension host exits\n\t\tconst connection = this._remoteAgentService.getConnection();\n\t\tconnection?.dispose();\n\n\t\tif (parseExtensionDevOptions(this._environmentService).isExtensionDevTestFromCli) {\n\t\t\t// When CLI testing make sure to exit with proper exit code\n\t\t\tif (isCI) {\n\t\t\t\tthis._logService.info(`Asking native host service to exit with code ${code}.`);\n\t\t\t}\n\t\t\tthis._nativeHostService.exit(code);\n\t\t} else {\n\t\t\t// Expected development extension termination: When the extension host goes down we also shutdown the window\n\t\t\tthis._nativeHostService.closeWindow();\n\t\t}\n\t}\n\n\tprivate async _handleNoResolverFound(remoteAuthority: string): Promise<boolean> {\n\t\tconst remoteName = getRemoteName(remoteAuthority);\n\t\tconst recommendation = this._productService.remoteExtensionTips?.[remoteName];\n\t\tif (!recommendation) {\n\t\t\treturn false;\n\t\t}\n\t\tconst sendTelemetry = (userReaction: 'install' | 'enable' | 'cancel') => {\n\t\t\t/* __GDPR__\n\t\t\t\"remoteExtensionRecommendations:popup\" : {\n\t\t\t\t\"owner\": \"sandy081\",\n\t\t\t\t\"userReaction\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" },\n\t\t\t\t\"extensionId\": { \"classification\": \"PublicNonPersonalData\", \"purpose\": \"FeatureInsight\" }\n\t\t\t}\n\t\t\t*/\n\t\t\tthis._telemetryService.publicLog('remoteExtensionRecommendations:popup', { userReaction, extensionId: resolverExtensionId });\n\t\t};\n\n\t\tconst resolverExtensionId = recommendation.extensionId;\n\t\tconst allExtensions = await this._scanAllLocalExtensions();\n\t\tconst extension = allExtensions.filter(e => e.identifier.value === resolverExtensionId)[0];\n\t\tif (extension) {\n\t\t\tif (!extensionIsEnabled(this._logService, this._extensionEnablementService, extension, false)) {\n\t\t\t\tconst message = nls.localize('enableResolver', \"Extension '{0}' is required to open the remote window.\\nOK to enable?\", recommendation.friendlyName);\n\t\t\t\tthis._notificationService.prompt(Severity.Info, message,\n\t\t\t\t\t[{\n\t\t\t\t\t\tlabel: nls.localize('enable', 'Enable and Reload'),\n\t\t\t\t\t\trun: async () => {\n\t\t\t\t\t\t\tsendTelemetry('enable');\n\t\t\t\t\t\t\tawait this._extensionEnablementService.setEnablement([toExtension(extension)], EnablementState.EnabledGlobally);\n\t\t\t\t\t\t\tawait this._hostService.reload();\n\t\t\t\t\t\t}\n\t\t\t\t\t}],\n\t\t\t\t\t{\n\t\t\t\t\t\tsticky: true,\n\t\t\t\t\t\tpriority: NotificationPriority.URGENT\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\t// Install the Extension and reload the window to handle.\n\t\t\tconst message = nls.localize('installResolver', \"Extension '{0}' is required to open the remote window.\\nDo you want to install the extension?\", recommendation.friendlyName);\n\t\t\tthis._notificationService.prompt(Severity.Info, message,\n\t\t\t\t[{\n\t\t\t\t\tlabel: nls.localize('install', 'Install and Reload'),\n\t\t\t\t\trun: async () => {\n\t\t\t\t\t\tsendTelemetry('install');\n\t\t\t\t\t\tconst [galleryExtension] = await this._extensionGalleryService.getExtensions([{ id: resolverExtensionId }], CancellationToken.None);\n\t\t\t\t\t\tif (galleryExtension) {\n\t\t\t\t\t\t\tawait this._extensionManagementService.installFromGallery(galleryExtension);\n\t\t\t\t\t\t\tawait this._hostService.reload();\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._notificationService.error(nls.localize('resolverExtensionNotFound', \"`{0}` not found on marketplace\"));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t}],\n\t\t\t\t{\n\t\t\t\t\tsticky: true,\n\t\t\t\t\tpriority: NotificationPriority.URGENT,\n\t\t\t\t\tonCancel: () => sendTelemetry('cancel')\n\t\t\t\t}\n\t\t\t);\n\n\t\t}\n\t\treturn true;\n\t}\n}\n\nclass NativeExtensionHostFactory implements IExtensionHostFactory {\n\n\tprivate readonly _webWorkerExtHostEnablement: LocalWebWorkerExtHostEnablement;\n\n\tconstructor(\n\t\tprivate readonly _extensionsProposedApi: ExtensionsProposedApi,\n\t\tprivate readonly _extensionScanner: CachedExtensionScanner,\n\t\tprivate readonly _getExtensionRegistrySnapshotWhenReady: () => Promise<ExtensionDescriptionRegistrySnapshot>,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IWorkbenchExtensionEnablementService private readonly _extensionEnablementService: IWorkbenchExtensionEnablementService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IRemoteAgentService private readonly _remoteAgentService: IRemoteAgentService,\n\t\t@IRemoteAuthorityResolverService private readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tthis._webWorkerExtHostEnablement = determineLocalWebWorkerExtHostEnablement(environmentService, configurationService);\n\t}\n\n\tpublic createExtensionHost(runningLocations: ExtensionRunningLocationTracker, runningLocation: ExtensionRunningLocation, isInitialStart: boolean): IExtensionHost | null {\n\t\tswitch (runningLocation.kind) {\n\t\t\tcase ExtensionHostKind.LocalProcess: {\n\t\t\t\tconst startup = (\n\t\t\t\t\tisInitialStart\n\t\t\t\t\t\t? ExtensionHostStartup.EagerManualStart\n\t\t\t\t\t\t: ExtensionHostStartup.EagerAutoStart\n\t\t\t\t);\n\t\t\t\treturn this._instantiationService.createInstance(NativeLocalProcessExtensionHost, runningLocation, startup, this._createLocalProcessExtensionHostDataProvider(runningLocations, isInitialStart, runningLocation));\n\t\t\t}\n\t\t\tcase ExtensionHostKind.LocalWebWorker: {\n\t\t\t\tif (this._webWorkerExtHostEnablement !== LocalWebWorkerExtHostEnablement.Disabled) {\n\t\t\t\t\tconst startup = (\n\t\t\t\t\t\tisInitialStart\n\t\t\t\t\t\t\t? (this._webWorkerExtHostEnablement === LocalWebWorkerExtHostEnablement.Lazy ? ExtensionHostStartup.Lazy : ExtensionHostStartup.EagerManualStart)\n\t\t\t\t\t\t\t: ExtensionHostStartup.EagerAutoStart\n\t\t\t\t\t);\n\t\t\t\t\treturn this._instantiationService.createInstance(WebWorkerExtensionHost, runningLocation, startup, this._createWebWorkerExtensionHostDataProvider(runningLocations, runningLocation));\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tcase ExtensionHostKind.Remote: {\n\t\t\t\tconst remoteAgentConnection = this._remoteAgentService.getConnection();\n\t\t\t\tif (remoteAgentConnection) {\n\t\t\t\t\treturn this._instantiationService.createInstance(RemoteExtensionHost, runningLocation, this._createRemoteExtensionHostDataProvider(runningLocations, remoteAgentConnection.remoteAuthority));\n\t\t\t\t}\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _createLocalProcessExtensionHostDataProvider(runningLocations: ExtensionRunningLocationTracker, isInitialStart: boolean, desiredRunningLocation: LocalProcessRunningLocation): ILocalProcessExtensionHostDataProvider {\n\t\treturn {\n\t\t\tgetInitData: async (): Promise<ILocalProcessExtensionHostInitData> => {\n\t\t\t\tif (isInitialStart) {\n\t\t\t\t\t// Here we load even extensions that would be disabled by workspace trust\n\t\t\t\t\tconst scannedExtensions = await this._extensionScanner.scannedExtensions;\n\t\t\t\t\tif (isCI) {\n\t\t\t\t\t\tthis._logService.info(`NativeExtensionHostFactory._createLocalProcessExtensionHostDataProvider.scannedExtensions: ${scannedExtensions.map(ext => ext.identifier.value).join(',')}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst localExtensions = checkEnabledAndProposedAPI(this._logService, this._extensionEnablementService, this._extensionsProposedApi, scannedExtensions, /* ignore workspace trust */true);\n\t\t\t\t\tif (isCI) {\n\t\t\t\t\t\tthis._logService.info(`NativeExtensionHostFactory._createLocalProcessExtensionHostDataProvider.localExtensions: ${localExtensions.map(ext => ext.identifier.value).join(',')}`);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst runningLocation = runningLocations.computeRunningLocation(localExtensions, [], false);\n\t\t\t\t\tconst myExtensions = filterExtensionDescriptions(localExtensions, runningLocation, extRunningLocation => desiredRunningLocation.equals(extRunningLocation));\n\t\t\t\t\tconst extensions = new ExtensionHostExtensions(0, localExtensions, myExtensions.map(extension => extension.identifier));\n\t\t\t\t\tif (isCI) {\n\t\t\t\t\t\tthis._logService.info(`NativeExtensionHostFactory._createLocalProcessExtensionHostDataProvider.myExtensions: ${myExtensions.map(ext => ext.identifier.value).join(',')}`);\n\t\t\t\t\t}\n\t\t\t\t\treturn { extensions };\n\t\t\t\t} else {\n\t\t\t\t\t// restart case\n\t\t\t\t\tconst snapshot = await this._getExtensionRegistrySnapshotWhenReady();\n\t\t\t\t\tconst myExtensions = runningLocations.filterByRunningLocation(snapshot.extensions, desiredRunningLocation);\n\t\t\t\t\tconst extensions = new ExtensionHostExtensions(snapshot.versionId, snapshot.extensions, myExtensions.map(extension => extension.identifier));\n\t\t\t\t\treturn { extensions };\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate _createWebWorkerExtensionHostDataProvider(runningLocations: ExtensionRunningLocationTracker, desiredRunningLocation: LocalWebWorkerRunningLocation): IWebWorkerExtensionHostDataProvider {\n\t\treturn {\n\t\t\tgetInitData: async (): Promise<IWebWorkerExtensionHostInitData> => {\n\t\t\t\tconst snapshot = await this._getExtensionRegistrySnapshotWhenReady();\n\t\t\t\tconst myExtensions = runningLocations.filterByRunningLocation(snapshot.extensions, desiredRunningLocation);\n\t\t\t\tconst extensions = new ExtensionHostExtensions(snapshot.versionId, snapshot.extensions, myExtensions.map(extension => extension.identifier));\n\t\t\t\treturn { extensions };\n\t\t\t}\n\t\t};\n\t}\n\n\tprivate _createRemoteExtensionHostDataProvider(runningLocations: ExtensionRunningLocationTracker, remoteAuthority: string): IRemoteExtensionHostDataProvider {\n\t\treturn {\n\t\t\tremoteAuthority: remoteAuthority,\n\t\t\tgetInitData: async (): Promise<IRemoteExtensionHostInitData> => {\n\t\t\t\tconst snapshot = await this._getExtensionRegistrySnapshotWhenReady();\n\n\t\t\t\tconst remoteEnv = await this._remoteAgentService.getEnvironment();\n\t\t\t\tif (!remoteEnv) {\n\t\t\t\t\tthrow new Error('Cannot provide init data for remote extension host!');\n\t\t\t\t}\n\n\t\t\t\tconst myExtensions = runningLocations.filterByExtensionHostKind(snapshot.extensions, ExtensionHostKind.Remote);\n\t\t\t\tconst extensions = new ExtensionHostExtensions(snapshot.versionId, snapshot.extensions, myExtensions.map(extension => extension.identifier));\n\n\t\t\t\treturn {\n\t\t\t\t\tconnectionData: this._remoteAuthorityResolverService.getConnectionData(remoteAuthority),\n\t\t\t\t\tpid: remoteEnv.pid,\n\t\t\t\t\tappRoot: remoteEnv.appRoot,\n\t\t\t\t\textensionHostLogsPath: remoteEnv.extensionHostLogsPath,\n\t\t\t\t\tglobalStorageHome: remoteEnv.globalStorageHome,\n\t\t\t\t\tworkspaceStorageHome: remoteEnv.workspaceStorageHome,\n\t\t\t\t\textensions,\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\t}\n}\n\nfunction determineLocalWebWorkerExtHostEnablement(environmentService: IWorkbenchEnvironmentService, configurationService: IConfigurationService): LocalWebWorkerExtHostEnablement {\n\tif (environmentService.isExtensionDevelopment && environmentService.extensionDevelopmentKind?.some(k => k === 'web')) {\n\t\treturn LocalWebWorkerExtHostEnablement.Eager;\n\t} else {\n\t\tconst config = configurationService.getValue<WebWorkerExtHostConfigValue>(webWorkerExtHostConfig);\n\t\tif (config === true) {\n\t\t\treturn LocalWebWorkerExtHostEnablement.Eager;\n\t\t} else if (config === 'auto') {\n\t\t\treturn LocalWebWorkerExtHostEnablement.Lazy;\n\t\t} else {\n\t\t\treturn LocalWebWorkerExtHostEnablement.Disabled;\n\t\t}\n\t}\n}\n\nconst enum LocalWebWorkerExtHostEnablement {\n\tDisabled = 0,\n\tEager = 1,\n\tLazy = 2\n}\n\nexport class NativeExtensionHostKindPicker implements IExtensionHostKindPicker {\n\n\tprivate readonly _hasRemoteExtHost: boolean;\n\tprivate readonly _hasWebWorkerExtHost: boolean;\n\n\tconstructor(\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tthis._hasRemoteExtHost = Boolean(environmentService.remoteAuthority);\n\t\tconst webWorkerExtHostEnablement = determineLocalWebWorkerExtHostEnablement(environmentService, configurationService);\n\t\tthis._hasWebWorkerExtHost = (webWorkerExtHostEnablement !== LocalWebWorkerExtHostEnablement.Disabled);\n\t}\n\n\tpublic pickExtensionHostKind(extensionId: ExtensionIdentifier, extensionKinds: ExtensionKind[], isInstalledLocally: boolean, isInstalledRemotely: boolean, preference: ExtensionRunningPreference): ExtensionHostKind | null {\n\t\tconst result = NativeExtensionHostKindPicker.pickExtensionHostKind(extensionKinds, isInstalledLocally, isInstalledRemotely, preference, this._hasRemoteExtHost, this._hasWebWorkerExtHost);\n\t\tthis._logService.trace(`pickRunningLocation for ${extensionId.value}, extension kinds: [${extensionKinds.join(', ')}], isInstalledLocally: ${isInstalledLocally}, isInstalledRemotely: ${isInstalledRemotely}, preference: ${extensionRunningPreferenceToString(preference)} => ${extensionHostKindToString(result)}`);\n\t\treturn result;\n\t}\n\n\tpublic static pickExtensionHostKind(extensionKinds: ExtensionKind[], isInstalledLocally: boolean, isInstalledRemotely: boolean, preference: ExtensionRunningPreference, hasRemoteExtHost: boolean, hasWebWorkerExtHost: boolean): ExtensionHostKind | null {\n\t\tconst result: ExtensionHostKind[] = [];\n\t\tfor (const extensionKind of extensionKinds) {\n\t\t\tif (extensionKind === 'ui' && isInstalledLocally) {\n\t\t\t\t// ui extensions run locally if possible\n\t\t\t\tif (preference === ExtensionRunningPreference.None || preference === ExtensionRunningPreference.Local) {\n\t\t\t\t\treturn ExtensionHostKind.LocalProcess;\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(ExtensionHostKind.LocalProcess);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (extensionKind === 'workspace' && isInstalledRemotely) {\n\t\t\t\t// workspace extensions run remotely if possible\n\t\t\t\tif (preference === ExtensionRunningPreference.None || preference === ExtensionRunningPreference.Remote) {\n\t\t\t\t\treturn ExtensionHostKind.Remote;\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(ExtensionHostKind.Remote);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (extensionKind === 'workspace' && !hasRemoteExtHost) {\n\t\t\t\t// workspace extensions also run locally if there is no remote\n\t\t\t\tif (preference === ExtensionRunningPreference.None || preference === ExtensionRunningPreference.Local) {\n\t\t\t\t\treturn ExtensionHostKind.LocalProcess;\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(ExtensionHostKind.LocalProcess);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (extensionKind === 'web' && isInstalledLocally && hasWebWorkerExtHost) {\n\t\t\t\t// web worker extensions run in the local web worker if possible\n\t\t\t\tif (preference === ExtensionRunningPreference.None || preference === ExtensionRunningPreference.Local) {\n\t\t\t\t\treturn ExtensionHostKind.LocalWebWorker;\n\t\t\t\t} else {\n\t\t\t\t\tresult.push(ExtensionHostKind.LocalWebWorker);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn (result.length > 0 ? result[0] : null);\n\t}\n}\n\nclass RestartExtensionHostAction extends Action2 {\n\n\tconstructor() {\n\t\tsuper({\n\t\t\tid: 'workbench.action.restartExtensionHost',\n\t\t\ttitle: { value: nls.localize('restartExtensionHost', \"Restart Extension Host\"), original: 'Restart Extension Host' },\n\t\t\tcategory: Categories.Developer,\n\t\t\tf1: true\n\t\t});\n\t}\n\n\tasync run(accessor: ServicesAccessor): Promise<void> {\n\t\tconst extensionService = accessor.get(IExtensionService);\n\n\t\tconst stopped = await extensionService.stopExtensionHosts(nls.localize('restartExtensionHost.reason', \"Restarting extension host on explicit request.\"));\n\t\tif (stopped) {\n\t\t\textensionService.startExtensionHosts();\n\t\t}\n\t}\n}\n\nregisterAction2(RestartExtensionHostAction);\n\nregisterSingleton(IExtensionService, NativeExtensionService, InstantiationType.Eager);\n"]}