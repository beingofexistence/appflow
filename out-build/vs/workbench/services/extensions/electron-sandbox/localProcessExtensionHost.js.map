{"version":3,"sources":["vs/workbench/services/extensions/electron-sandbox/localProcessExtensionHost.ts"],"names":[],"mappings":"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","file":"localProcessExtensionHost.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { timeout } from 'vs/base/common/async';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { CancellationError } from 'vs/base/common/errors';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, DisposableStore, toDisposable } from 'vs/base/common/lifecycle';\nimport * as objects from 'vs/base/common/objects';\nimport * as platform from 'vs/base/common/platform';\nimport { removeDangerousEnvVariables } from 'vs/base/common/processes';\nimport { StopWatch } from 'vs/base/common/stopwatch';\nimport { URI } from 'vs/base/common/uri';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { IMessagePassingProtocol } from 'vs/base/parts/ipc/common/ipc';\nimport { BufferedEmitter } from 'vs/base/parts/ipc/common/ipc.net';\nimport { acquirePort } from 'vs/base/parts/ipc/electron-sandbox/ipc.mp';\nimport * as nls from 'vs/nls';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IExtensionHostDebugService } from 'vs/platform/debug/common/extensionHostDebug';\nimport { IExtensionHostProcessOptions, IExtensionHostStarter } from 'vs/platform/extensions/common/extensionHostStarter';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { ILogService, ILoggerService } from 'vs/platform/log/common/log';\nimport { INativeHostService } from 'vs/platform/native/common/native';\nimport { INotificationService, NotificationPriority, Severity } from 'vs/platform/notification/common/notification';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { isLoggingOnly } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { IWorkspaceContextService, WorkbenchState, isUntitledWorkspace } from 'vs/platform/workspace/common/workspace';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { IShellEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/shellEnvironmentService';\nimport { MessagePortExtHostConnection, writeExtHostConnection } from 'vs/workbench/services/extensions/common/extensionHostEnv';\nimport { IExtensionHostInitData, MessageType, NativeLogMarkers, UIKind, isMessageOfType } from 'vs/workbench/services/extensions/common/extensionHostProtocol';\nimport { LocalProcessRunningLocation } from 'vs/workbench/services/extensions/common/extensionRunningLocation';\nimport { ExtensionHostExtensions, ExtensionHostStartup, IExtensionHost } from 'vs/workbench/services/extensions/common/extensions';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { ILifecycleService, WillShutdownEvent } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { parseExtensionDevOptions } from '../common/extensionDevOptions';\n\nexport interface ILocalProcessExtensionHostInitData {\n\treadonly extensions: ExtensionHostExtensions;\n}\n\nexport interface ILocalProcessExtensionHostDataProvider {\n\tgetInitData(): Promise<ILocalProcessExtensionHostInitData>;\n}\n\nexport class ExtensionHostProcess {\n\n\tprivate readonly _id: string;\n\n\tpublic get onStdout(): Event<string> {\n\t\treturn this._extensionHostStarter.onDynamicStdout(this._id);\n\t}\n\n\tpublic get onStderr(): Event<string> {\n\t\treturn this._extensionHostStarter.onDynamicStderr(this._id);\n\t}\n\n\tpublic get onMessage(): Event<any> {\n\t\treturn this._extensionHostStarter.onDynamicMessage(this._id);\n\t}\n\n\tpublic get onExit(): Event<{ code: number; signal: string }> {\n\t\treturn this._extensionHostStarter.onDynamicExit(this._id);\n\t}\n\n\tconstructor(\n\t\tid: string,\n\t\tprivate readonly _extensionHostStarter: IExtensionHostStarter,\n\t) {\n\t\tthis._id = id;\n\t}\n\n\tpublic start(opts: IExtensionHostProcessOptions): Promise<void> {\n\t\treturn this._extensionHostStarter.start(this._id, opts);\n\t}\n\n\tpublic enableInspectPort(): Promise<boolean> {\n\t\treturn this._extensionHostStarter.enableInspectPort(this._id);\n\t}\n\n\tpublic kill(): Promise<void> {\n\t\treturn this._extensionHostStarter.kill(this._id);\n\t}\n}\n\nexport class NativeLocalProcessExtensionHost implements IExtensionHost {\n\n\tpublic readonly remoteAuthority = null;\n\tpublic extensions: ExtensionHostExtensions | null = null;\n\n\tprivate readonly _onExit: Emitter<[number, string]> = new Emitter<[number, string]>();\n\tpublic readonly onExit: Event<[number, string]> = this._onExit.event;\n\n\tprivate readonly _onDidSetInspectPort = new Emitter<void>();\n\n\tprotected readonly _toDispose = new DisposableStore();\n\n\tprivate readonly _isExtensionDevHost: boolean;\n\tprivate readonly _isExtensionDevDebug: boolean;\n\tprivate readonly _isExtensionDevDebugBrk: boolean;\n\tprivate readonly _isExtensionDevTestFromCli: boolean;\n\n\t// State\n\tprivate _terminating: boolean;\n\n\t// Resources, in order they get acquired/created when .start() is called:\n\tprivate _inspectPort: number | null;\n\tprivate _extensionHostProcess: ExtensionHostProcess | null;\n\tprivate _messageProtocol: Promise<IMessagePassingProtocol> | null;\n\n\tconstructor(\n\t\tpublic readonly runningLocation: LocalProcessRunningLocation,\n\t\tpublic readonly startup: ExtensionHostStartup.EagerAutoStart | ExtensionHostStartup.EagerManualStart,\n\t\tprivate readonly _initDataProvider: ILocalProcessExtensionHostDataProvider,\n\t\t@IWorkspaceContextService private readonly _contextService: IWorkspaceContextService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@INativeHostService private readonly _nativeHostService: INativeHostService,\n\t\t@ILifecycleService private readonly _lifecycleService: ILifecycleService,\n\t\t@INativeWorkbenchEnvironmentService private readonly _environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IUserDataProfilesService private readonly _userDataProfilesService: IUserDataProfilesService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@ILogService protected readonly _logService: ILogService,\n\t\t@ILoggerService protected readonly _loggerService: ILoggerService,\n\t\t@ILabelService private readonly _labelService: ILabelService,\n\t\t@IExtensionHostDebugService private readonly _extensionHostDebugService: IExtensionHostDebugService,\n\t\t@IHostService private readonly _hostService: IHostService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t\t@IShellEnvironmentService private readonly _shellEnvironmentService: IShellEnvironmentService,\n\t\t@IExtensionHostStarter protected readonly _extensionHostStarter: IExtensionHostStarter,\n\t\t@IConfigurationService protected readonly _configurationService: IConfigurationService,\n\t) {\n\t\tconst devOpts = parseExtensionDevOptions(this._environmentService);\n\t\tthis._isExtensionDevHost = devOpts.isExtensionDevHost;\n\t\tthis._isExtensionDevDebug = devOpts.isExtensionDevDebug;\n\t\tthis._isExtensionDevDebugBrk = devOpts.isExtensionDevDebugBrk;\n\t\tthis._isExtensionDevTestFromCli = devOpts.isExtensionDevTestFromCli;\n\n\t\tthis._terminating = false;\n\n\t\tthis._inspectPort = null;\n\t\tthis._extensionHostProcess = null;\n\t\tthis._messageProtocol = null;\n\n\t\tthis._toDispose.add(this._onExit);\n\t\tthis._toDispose.add(this._lifecycleService.onWillShutdown(e => this._onWillShutdown(e)));\n\t\tthis._toDispose.add(this._extensionHostDebugService.onClose(event => {\n\t\t\tif (this._isExtensionDevHost && this._environmentService.debugExtensionHost.debugId === event.sessionId) {\n\t\t\t\tthis._nativeHostService.closeWindow();\n\t\t\t}\n\t\t}));\n\t\tthis._toDispose.add(this._extensionHostDebugService.onReload(event => {\n\t\t\tif (this._isExtensionDevHost && this._environmentService.debugExtensionHost.debugId === event.sessionId) {\n\t\t\t\tthis._hostService.reload();\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic dispose(): void {\n\t\tif (this._terminating) {\n\t\t\treturn;\n\t\t}\n\t\tthis._terminating = true;\n\n\t\tthis._toDispose.dispose();\n\t}\n\n\tpublic start(): Promise<IMessagePassingProtocol> {\n\t\tif (this._terminating) {\n\t\t\t// .terminate() was called\n\t\t\tthrow new CancellationError();\n\t\t}\n\n\t\tif (!this._messageProtocol) {\n\t\t\tthis._messageProtocol = this._start();\n\t\t}\n\n\t\treturn this._messageProtocol;\n\t}\n\n\tprotected async _start(): Promise<IMessagePassingProtocol> {\n\t\tconst communication = this._toDispose.add(new ExtHostMessagePortCommunication(this._logService));\n\t\treturn this._startWithCommunication(communication);\n\t}\n\n\tprotected async _startWithCommunication<T>(communication: IExtHostCommunication<T>): Promise<IMessagePassingProtocol> {\n\n\t\tconst [extensionHostCreationResult, communicationPreparedData, portNumber, processEnv] = await Promise.all([\n\t\t\tthis._extensionHostStarter.createExtensionHost(),\n\t\t\tcommunication.prepare(),\n\t\t\tthis._tryFindDebugPort(),\n\t\t\tthis._shellEnvironmentService.getShellEnv(),\n\t\t]);\n\n\t\tthis._extensionHostProcess = new ExtensionHostProcess(extensionHostCreationResult.id, this._extensionHostStarter);\n\n\t\tconst env = objects.mixin(processEnv, {\n\t\t\tVSCODE_AMD_ENTRYPOINT: 'vs/workbench/api/node/extensionHostProcess',\n\t\t\tVSCODE_HANDLES_UNCAUGHT_ERRORS: true\n\t\t});\n\n\t\tif (this._environmentService.debugExtensionHost.env) {\n\t\t\tobjects.mixin(env, this._environmentService.debugExtensionHost.env);\n\t\t}\n\n\t\tremoveDangerousEnvVariables(env);\n\n\t\tif (this._isExtensionDevHost) {\n\t\t\t// Unset `VSCODE_CODE_CACHE_PATH` when developing extensions because it might\n\t\t\t// be that dependencies, that otherwise would be cached, get modified.\n\t\t\tdelete env['VSCODE_CODE_CACHE_PATH'];\n\t\t}\n\n\t\tconst opts: IExtensionHostProcessOptions = {\n\t\t\tresponseWindowId: this._environmentService.window.id,\n\t\t\tresponseChannel: 'vscode:startExtensionHostMessagePortResult',\n\t\t\tresponseNonce: generateUuid(),\n\t\t\tenv,\n\t\t\t// We only detach the extension host on windows. Linux and Mac orphan by default\n\t\t\t// and detach under Linux and Mac create another process group.\n\t\t\t// We detach because we have noticed that when the renderer exits, its child processes\n\t\t\t// (i.e. extension host) are taken down in a brutal fashion by the OS\n\t\t\tdetached: !!platform.isWindows,\n\t\t\texecArgv: undefined as string[] | undefined,\n\t\t\tsilent: true\n\t\t};\n\n\t\tif (portNumber !== 0) {\n\t\t\topts.execArgv = [\n\t\t\t\t'--nolazy',\n\t\t\t\t(this._isExtensionDevDebugBrk ? '--inspect-brk=' : '--inspect=') + portNumber\n\t\t\t];\n\t\t} else {\n\t\t\topts.execArgv = ['--inspect-port=0'];\n\t\t}\n\n\t\tif (this._environmentService.extensionTestsLocationURI) {\n\t\t\topts.execArgv.unshift('--expose-gc');\n\t\t}\n\n\t\tif (this._environmentService.args['prof-v8-extensions']) {\n\t\t\topts.execArgv.unshift('--prof');\n\t\t}\n\n\t\t// Refs https://github.com/microsoft/vscode/issues/189805\n\t\topts.execArgv.unshift('--dns-result-order=ipv4first');\n\n\t\t// Catch all output coming from the extension host process\n\t\ttype Output = { data: string; format: string[] };\n\t\tconst onStdout = this._handleProcessOutputStream(this._extensionHostProcess.onStdout);\n\t\tconst onStderr = this._handleProcessOutputStream(this._extensionHostProcess.onStderr);\n\t\tconst onOutput = Event.any(\n\t\t\tEvent.map(onStdout.event, o => ({ data: `%c${o}`, format: [''] })),\n\t\t\tEvent.map(onStderr.event, o => ({ data: `%c${o}`, format: ['color: red'] }))\n\t\t);\n\n\t\t// Debounce all output, so we can render it in the Chrome console as a group\n\t\tconst onDebouncedOutput = Event.debounce<Output>(onOutput, (r, o) => {\n\t\t\treturn r\n\t\t\t\t? { data: r.data + o.data, format: [...r.format, ...o.format] }\n\t\t\t\t: { data: o.data, format: o.format };\n\t\t}, 100);\n\n\t\t// Print out extension host output\n\t\tonDebouncedOutput(output => {\n\t\t\tconst inspectorUrlMatch = output.data && output.data.match(/ws:\\/\\/([^\\s]+:(\\d+)\\/[^\\s]+)/);\n\t\t\tif (inspectorUrlMatch) {\n\t\t\t\tif (!this._environmentService.isBuilt && !this._isExtensionDevTestFromCli) {\n\t\t\t\t\tconsole.log(`%c[Extension Host] %cdebugger inspector at devtools://devtools/bundled/inspector.html?experiments=true&v8only=true&ws=${inspectorUrlMatch[1]}`, 'color: blue', 'color:');\n\t\t\t\t}\n\t\t\t\tif (!this._inspectPort) {\n\t\t\t\t\tthis._inspectPort = Number(inspectorUrlMatch[2]);\n\t\t\t\t\tthis._onDidSetInspectPort.fire();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!this._isExtensionDevTestFromCli) {\n\t\t\t\t\tconsole.group('Extension Host');\n\t\t\t\t\tconsole.log(output.data, ...output.format);\n\t\t\t\t\tconsole.groupEnd();\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// Lifecycle\n\n\t\tthis._extensionHostProcess.onExit(({ code, signal }) => this._onExtHostProcessExit(code, signal));\n\n\t\t// Notify debugger that we are ready to attach to the process if we run a development extension\n\t\tif (portNumber) {\n\t\t\tif (this._isExtensionDevHost && portNumber && this._isExtensionDevDebug && this._environmentService.debugExtensionHost.debugId) {\n\t\t\t\tthis._extensionHostDebugService.attachSession(this._environmentService.debugExtensionHost.debugId, portNumber);\n\t\t\t}\n\t\t\tthis._inspectPort = portNumber;\n\t\t\tthis._onDidSetInspectPort.fire();\n\t\t}\n\n\t\t// Help in case we fail to start it\n\t\tlet startupTimeoutHandle: any;\n\t\tif (!this._environmentService.isBuilt && !this._environmentService.remoteAuthority || this._isExtensionDevHost) {\n\t\t\tstartupTimeoutHandle = setTimeout(() => {\n\t\t\t\tthis._logService.error(`[LocalProcessExtensionHost]: Extension host did not start in 10 seconds (debugBrk: ${this._isExtensionDevDebugBrk})`);\n\n\t\t\t\tconst msg = this._isExtensionDevDebugBrk\n\t\t\t\t\t? nls.localize('extensionHost.startupFailDebug', \"Extension host did not start in 10 seconds, it might be stopped on the first line and needs a debugger to continue.\")\n\t\t\t\t\t: nls.localize('extensionHost.startupFail', \"Extension host did not start in 10 seconds, that might be a problem.\");\n\n\t\t\t\tthis._notificationService.prompt(Severity.Warning, msg,\n\t\t\t\t\t[{\n\t\t\t\t\t\tlabel: nls.localize('reloadWindow', \"Reload Window\"),\n\t\t\t\t\t\trun: () => this._hostService.reload()\n\t\t\t\t\t}],\n\t\t\t\t\t{\n\t\t\t\t\t\tsticky: true,\n\t\t\t\t\t\tpriority: NotificationPriority.URGENT\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}, 10000);\n\t\t}\n\n\t\t// Initialize extension host process with hand shakes\n\t\tconst protocol = await communication.establishProtocol(communicationPreparedData, this._extensionHostProcess, opts);\n\t\tawait this._performHandshake(protocol);\n\t\tclearTimeout(startupTimeoutHandle);\n\t\treturn protocol;\n\t}\n\n\t/**\n\t * Find a free port if extension host debugging is enabled.\n\t */\n\tprivate async _tryFindDebugPort(): Promise<number> {\n\n\t\tif (typeof this._environmentService.debugExtensionHost.port !== 'number') {\n\t\t\treturn 0;\n\t\t}\n\n\t\tconst expected = this._environmentService.debugExtensionHost.port;\n\t\tconst port = await this._nativeHostService.findFreePort(expected, 10 /* try 10 ports */, 5000 /* try up to 5 seconds */, 2048 /* skip 2048 ports between attempts */);\n\n\t\tif (!this._isExtensionDevTestFromCli) {\n\t\t\tif (!port) {\n\t\t\t\tconsole.warn('%c[Extension Host] %cCould not find a free port for debugging', 'color: blue', 'color:');\n\t\t\t} else {\n\t\t\t\tif (port !== expected) {\n\t\t\t\t\tconsole.warn(`%c[Extension Host] %cProvided debugging port ${expected} is not free, using ${port} instead.`, 'color: blue', 'color:');\n\t\t\t\t}\n\t\t\t\tif (this._isExtensionDevDebugBrk) {\n\t\t\t\t\tconsole.warn(`%c[Extension Host] %cSTOPPED on first line for debugging on port ${port}`, 'color: blue', 'color:');\n\t\t\t\t} else {\n\t\t\t\t\tconsole.info(`%c[Extension Host] %cdebugger listening on port ${port}`, 'color: blue', 'color:');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn port || 0;\n\t}\n\n\tprivate _performHandshake(protocol: IMessagePassingProtocol): Promise<void> {\n\t\t// 1) wait for the incoming `ready` event and send the initialization data.\n\t\t// 2) wait for the incoming `initialized` event.\n\t\treturn new Promise<void>((resolve, reject) => {\n\n\t\t\tlet timeoutHandle: any;\n\t\t\tconst installTimeoutCheck = () => {\n\t\t\t\ttimeoutHandle = setTimeout(() => {\n\t\t\t\t\treject('The local extension host took longer than 60s to send its ready message.');\n\t\t\t\t}, 60 * 1000);\n\t\t\t};\n\t\t\tconst uninstallTimeoutCheck = () => {\n\t\t\t\tclearTimeout(timeoutHandle);\n\t\t\t};\n\n\t\t\t// Wait 60s for the ready message\n\t\t\tinstallTimeoutCheck();\n\n\t\t\tconst disposable = protocol.onMessage(msg => {\n\n\t\t\t\tif (isMessageOfType(msg, MessageType.Ready)) {\n\n\t\t\t\t\t// 1) Extension Host is ready to receive messages, initialize it\n\t\t\t\t\tuninstallTimeoutCheck();\n\n\t\t\t\t\tthis._createExtHostInitData().then(data => {\n\n\t\t\t\t\t\t// Wait 60s for the initialized message\n\t\t\t\t\t\tinstallTimeoutCheck();\n\n\t\t\t\t\t\tprotocol.send(VSBuffer.fromString(JSON.stringify(data)));\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (isMessageOfType(msg, MessageType.Initialized)) {\n\n\t\t\t\t\t// 2) Extension Host is initialized\n\t\t\t\t\tuninstallTimeoutCheck();\n\n\t\t\t\t\t// stop listening for messages here\n\t\t\t\t\tdisposable.dispose();\n\n\t\t\t\t\t// release this promise\n\t\t\t\t\tresolve();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconsole.error(`received unexpected message during handshake phase from the extension host: `, msg);\n\t\t\t});\n\n\t\t});\n\t}\n\n\tprivate async _createExtHostInitData(): Promise<IExtensionHostInitData> {\n\t\tconst initData = await this._initDataProvider.getInitData();\n\t\tthis.extensions = initData.extensions;\n\t\tconst workspace = this._contextService.getWorkspace();\n\t\treturn {\n\t\t\tcommit: this._productService.commit,\n\t\t\tversion: this._productService.version,\n\t\t\tquality: this._productService.quality,\n\t\t\tparentPid: 0,\n\t\t\tenvironment: {\n\t\t\t\tisExtensionDevelopmentDebug: this._isExtensionDevDebug,\n\t\t\t\tappRoot: this._environmentService.appRoot ? URI.file(this._environmentService.appRoot) : undefined,\n\t\t\t\tappName: this._productService.nameLong,\n\t\t\t\tappHost: this._productService.embedderIdentifier || 'desktop',\n\t\t\t\tappUriScheme: this._productService.urlProtocol,\n\t\t\t\textensionTelemetryLogResource: this._environmentService.extHostTelemetryLogFile,\n\t\t\t\tisExtensionTelemetryLoggingOnly: isLoggingOnly(this._productService, this._environmentService),\n\t\t\t\tappLanguage: platform.language,\n\t\t\t\textensionDevelopmentLocationURI: this._environmentService.extensionDevelopmentLocationURI,\n\t\t\t\textensionTestsLocationURI: this._environmentService.extensionTestsLocationURI,\n\t\t\t\tglobalStorageHome: this._userDataProfilesService.defaultProfile.globalStorageHome,\n\t\t\t\tworkspaceStorageHome: this._environmentService.workspaceStorageHome,\n\t\t\t\textensionLogLevel: this._environmentService.extensionLogLevel\n\t\t\t},\n\t\t\tworkspace: this._contextService.getWorkbenchState() === WorkbenchState.EMPTY ? undefined : {\n\t\t\t\tconfiguration: workspace.configuration ?? undefined,\n\t\t\t\tid: workspace.id,\n\t\t\t\tname: this._labelService.getWorkspaceLabel(workspace),\n\t\t\t\tisUntitled: workspace.configuration ? isUntitledWorkspace(workspace.configuration, this._environmentService) : false,\n\t\t\t\ttransient: workspace.transient\n\t\t\t},\n\t\t\tremote: {\n\t\t\t\tauthority: this._environmentService.remoteAuthority,\n\t\t\t\tconnectionData: null,\n\t\t\t\tisRemote: false\n\t\t\t},\n\t\t\tconsoleForward: {\n\t\t\t\tincludeStack: !this._isExtensionDevTestFromCli && (this._isExtensionDevHost || !this._environmentService.isBuilt || this._productService.quality !== 'stable' || this._environmentService.verbose),\n\t\t\t\tlogNative: !this._isExtensionDevTestFromCli && this._isExtensionDevHost\n\t\t\t},\n\t\t\textensions: this.extensions.toSnapshot(),\n\t\t\ttelemetryInfo: {\n\t\t\t\tsessionId: this._telemetryService.sessionId,\n\t\t\t\tmachineId: this._telemetryService.machineId,\n\t\t\t\tfirstSessionDate: this._telemetryService.firstSessionDate,\n\t\t\t\tmsftInternal: this._telemetryService.msftInternal\n\t\t\t},\n\t\t\tlogLevel: this._logService.getLevel(),\n\t\t\tloggers: [...this._loggerService.getRegisteredLoggers()],\n\t\t\tlogsLocation: this._environmentService.extHostLogsPath,\n\t\t\tautoStart: (this.startup === ExtensionHostStartup.EagerAutoStart),\n\t\t\tuiKind: UIKind.Desktop\n\t\t};\n\t}\n\n\tprivate _onExtHostProcessExit(code: number, signal: string): void {\n\t\tif (this._terminating) {\n\t\t\t// Expected termination path (we asked the process to terminate)\n\t\t\treturn;\n\t\t}\n\n\t\tthis._onExit.fire([code, signal]);\n\t}\n\n\tprivate _handleProcessOutputStream(stream: Event<string>) {\n\t\tlet last = '';\n\t\tlet isOmitting = false;\n\t\tconst event = new Emitter<string>();\n\t\tstream((chunk) => {\n\t\t\t// not a fancy approach, but this is the same approach used by the split2\n\t\t\t// module which is well-optimized (https://github.com/mcollina/split2)\n\t\t\tlast += chunk;\n\t\t\tconst lines = last.split(/\\r?\\n/g);\n\t\t\tlast = lines.pop()!;\n\n\t\t\t// protected against an extension spamming and leaking memory if no new line is written.\n\t\t\tif (last.length > 10_000) {\n\t\t\t\tlines.push(last);\n\t\t\t\tlast = '';\n\t\t\t}\n\n\t\t\tfor (const line of lines) {\n\t\t\t\tif (isOmitting) {\n\t\t\t\t\tif (line === NativeLogMarkers.End) {\n\t\t\t\t\t\tisOmitting = false;\n\t\t\t\t\t}\n\t\t\t\t} else if (line === NativeLogMarkers.Start) {\n\t\t\t\t\tisOmitting = true;\n\t\t\t\t} else if (line.length) {\n\t\t\t\t\tevent.fire(line + '\\n');\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn event;\n\t}\n\n\tpublic async enableInspectPort(): Promise<boolean> {\n\t\tif (typeof this._inspectPort === 'number') {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (!this._extensionHostProcess) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst result = await this._extensionHostProcess.enableInspectPort();\n\t\tif (!result) {\n\t\t\treturn false;\n\t\t}\n\n\t\tawait Promise.race([Event.toPromise(this._onDidSetInspectPort.event), timeout(1000)]);\n\t\treturn typeof this._inspectPort === 'number';\n\t}\n\n\tpublic getInspectPort(): number | undefined {\n\t\treturn this._inspectPort ?? undefined;\n\t}\n\n\tprivate _onWillShutdown(event: WillShutdownEvent): void {\n\t\t// If the extension development host was started without debugger attached we need\n\t\t// to communicate this back to the main side to terminate the debug session\n\t\tif (this._isExtensionDevHost && !this._isExtensionDevTestFromCli && !this._isExtensionDevDebug && this._environmentService.debugExtensionHost.debugId) {\n\t\t\tthis._extensionHostDebugService.terminateSession(this._environmentService.debugExtensionHost.debugId);\n\t\t\tevent.join(timeout(100 /* wait a bit for IPC to get delivered */), { id: 'join.extensionDevelopment', label: nls.localize('join.extensionDevelopment', \"Terminating extension debug session\") });\n\t\t}\n\t}\n}\n\nexport interface IExtHostCommunication<T> {\n\tprepare(): Promise<T>;\n\testablishProtocol(prepared: T, extensionHostProcess: ExtensionHostProcess, opts: IExtensionHostProcessOptions): Promise<IMessagePassingProtocol>;\n}\n\nexport class ExtHostMessagePortCommunication extends Disposable implements IExtHostCommunication<void> {\n\n\tconstructor(\n\t\t@ILogService private readonly _logService: ILogService\n\t) {\n\t\tsuper();\n\t}\n\n\tasync prepare(): Promise<void> {\n\t}\n\n\testablishProtocol(prepared: void, extensionHostProcess: ExtensionHostProcess, opts: IExtensionHostProcessOptions): Promise<IMessagePassingProtocol> {\n\n\t\twriteExtHostConnection(new MessagePortExtHostConnection(), opts.env);\n\n\t\t// Get ready to acquire the message port from the shared process worker\n\t\tconst portPromise = acquirePort(undefined /* we trigger the request via service call! */, opts.responseChannel, opts.responseNonce);\n\n\t\treturn new Promise<IMessagePassingProtocol>((resolve, reject) => {\n\n\t\t\tconst handle = setTimeout(() => {\n\t\t\t\treject('The local extension host took longer than 60s to connect.');\n\t\t\t}, 60 * 1000);\n\n\t\t\tportPromise.then((port) => {\n\t\t\t\tthis._register(toDisposable(() => {\n\t\t\t\t\t// Close the message port when the extension host is disposed\n\t\t\t\t\tport.close();\n\t\t\t\t}));\n\t\t\t\tclearTimeout(handle);\n\n\t\t\t\tconst onMessage = new BufferedEmitter<VSBuffer>();\n\t\t\t\tport.onmessage = ((e) => onMessage.fire(VSBuffer.wrap(e.data)));\n\t\t\t\tport.start();\n\n\t\t\t\tresolve({\n\t\t\t\t\tonMessage: onMessage.event,\n\t\t\t\t\tsend: message => port.postMessage(message.buffer),\n\t\t\t\t});\n\t\t\t});\n\n\t\t\t// Now that the message port listener is installed, start the ext host process\n\t\t\tconst sw = StopWatch.create(false);\n\t\t\textensionHostProcess.start(opts).then(() => {\n\t\t\t\tconst duration = sw.elapsed();\n\t\t\t\tif (platform.isCI) {\n\t\t\t\t\tthis._logService.info(`IExtensionHostStarter.start() took ${duration} ms.`);\n\t\t\t\t}\n\t\t\t}, (err) => {\n\t\t\t\t// Starting the ext host process resulted in an error\n\t\t\t\treject(err);\n\t\t\t});\n\t\t});\n\t}\n}\n"]}