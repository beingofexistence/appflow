{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/extensions/test/browser/extensionStorageMigration.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAuBhG,KAAK,CAAC,2BAA2B,EAAE,GAAG,EAAE;QAEvC,MAAM,WAAW,GAAG,IAAA,WAAG,GAAsC,CAAC;QAC9D,MAAM,IAAI,GAAG,SAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,cAAc,EAAE,CAAC,CAAC;QAChE,MAAM,oBAAoB,GAAG,IAAA,eAAG,EAAM,IAAI,EAAE,sBAAsB,CAAC,CAAC;QAEpE,IAAI,oBAA0B,CAAqB;QAEnD,KAAK,CAAC,GAAG,EAAE;YACV,oBAAoB,GAA6B,IAAA,4BAAI,EAA0B,SAAS,EAAE,WAAW,CAAC,CAAC;YAEvG,MAAM,WAAW,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,iBAAG,CAAS,IAAI,SAAG,EAAa,CAAC,CAAC,CAAC;YAC3E,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC,gBAAgB,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,CAAC,GAAG,CAAC,IAAI,iCAAI,EAAwB,CAAC,CAAC,CAAC,CAAC;YAC9G,oBAAoB,CAAC,IAAI,CAAC,WAAG,EAAW,WAAW,CAAC,CAAC;YACrD,MAAM,kBAAkB,GAAG,oBAAoB,CAAC,IAAI,CAAC,iBAAG,EAAgD,EAAE,mBAAmB,EAAE,IAAI,EAAE,oBAAoB,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;YAC9K,MAAM,uBAAuB,GAAG,oBAAoB,CAAC,IAAI,CAAC,qBAAG,EAAuB,WAAW,CAAC,GAAG,CAAC,IAAI,qBAAG,CAAqB,kBAAkB,EAAE,WAAW,EAAE,WAAW,CAAC,GAAG,CAAC,IAAI,wBAAG,CAAgB,WAAW,CAAC,CAAC,EAAE,IAAI,SAAG,EAAa,CAAC,CAAC,CAAC,CAAC;YAC/O,oBAAoB,CAAC,IAAI,CAAC,qBAAG,EAAsB,WAAW,CAAC,GAAG,CAAC,IAAI,6BAAI,CAAmB,uBAAuB,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC;YAExI,oBAAoB,CAAC,IAAI,CAAC,sBAAG,EAAuB,WAAW,CAAC,GAAG,CAAC,oBAAoB,CAAC,cAAc,CAAC,sBAAG,CAAqB,CAAC,CAAC,CAAC;QACpI,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;YAC5C,MAAM,eAAe,GAAG,UAAU,EAAE,aAAa,GAAG,QAAQ,EAAE,kBAAkB,GAAG,4BAA4B,eAAe,IAAI,aAAa,EAAE,CAAC;YAClJ,MAAM,uBAAuB,GAAG,oBAAoB,CAAC,GAAG,CAAC,sBAAG,CAAsB,EAAE,WAAW,GAAG,oBAAoB,CAAC,GAAG,CAAC,WAAG,CAAU,EAAE,cAAc,GAAG,oBAAoB,CAAC,GAAG,CAAC,aAAG,CAAa,EAAE,uBAAuB,GAAG,oBAAoB,CAAC,GAAG,CAAC,qBAAG,CAAsB,CAAC;YAEnR,uBAAuB,CAAC,iBAAiB,CAAC,eAAe,EAAE,EAAE,SAAS,EAAE,oBAAoB,EAAE,EAAE,IAAI,CAAC,CAAC;YACtG,uBAAuB,CAAC,iBAAiB,CAAC,eAAe,EAAE,EAAE,YAAY,EAAE,uBAAuB,EAAE,EAAE,KAAK,CAAC,CAAC;YAC7G,MAAM,WAAW,CAAC,SAAS,CAAC,IAAA,eAAG,EAAM,uBAAuB,CAAC,cAAc,CAAC,iBAAiB,EAAE,eAAe,CAAC,EAAE,YAAG,CAAM,UAAU,CAAC,sBAAsB,CAAC,CAAC,CAAC;YAC9J,MAAM,WAAW,CAAC,SAAS,CAAC,IAAA,eAAG,EAAM,oBAAoB,EAAE,oBAAI,CAAU,EAAE,EAAE,eAAe,CAAC,EAAE,YAAG,CAAM,UAAU,CAAC,yBAAyB,CAAC,CAAC,CAAC;YAE/I,MAAM,IAAA,gCAAI,EAAoB,eAAe,EAAE,aAAa,EAAE,IAAI,EAAE,oBAAoB,CAAC,CAAC;YAC1F,MAAM,IAAA,gCAAI,EAAoB,eAAe,EAAE,aAAa,EAAE,KAAK,EAAE,oBAAoB,CAAC,CAAC;YAE3F,MAAM,CAAC,eAAe,CAAC,uBAAuB,CAAC,iBAAiB,CAAC,eAAe,EAAE,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC;YACpG,MAAM,CAAC,eAAe,CAAC,uBAAuB,CAAC,iBAAiB,CAAC,eAAe,EAAE,KAAK,CAAC,EAAE,SAAS,CAAC,CAAC;YACrG,MAAM,CAAC,eAAe,CAAC,CAAC,MAAM,WAAW,CAAC,MAAM,CAAC,IAAA,eAAG,EAAM,uBAAuB,CAAC,cAAc,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAC/I,MAAM,CAAC,eAAe,CAAC,CAAC,MAAM,WAAW,CAAC,MAAM,CAAC,IAAA,eAAG,EAAM,oBAAoB,EAAE,oBAAI,CAAU,EAAE,EAAE,eAAe,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAE7H,MAAM,CAAC,eAAe,CAAC,uBAAuB,CAAC,iBAAiB,CAAC,aAAa,EAAE,IAAI,CAAC,EAAE,EAAE,SAAS,EAAE,oBAAoB,EAAE,CAAC,CAAC;YAC5H,MAAM,CAAC,eAAe,CAAC,uBAAuB,CAAC,iBAAiB,CAAC,aAAa,EAAE,KAAK,CAAC,EAAE,EAAE,YAAY,EAAE,uBAAuB,EAAE,CAAC,CAAC;YACnI,MAAM,CAAC,eAAe,CAAC,CAAC,MAAM,WAAW,CAAC,QAAQ,CAAC,IAAA,eAAG,EAAM,uBAAuB,CAAC,cAAc,CAAC,iBAAiB,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,sBAAsB,CAAC,CAAC;YACjL,MAAM,CAAC,eAAe,CAAC,CAAC,MAAM,WAAW,CAAC,QAAQ,CAAC,IAAA,eAAG,EAAM,oBAAoB,EAAE,oBAAI,CAAU,EAAE,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,EAAE,yBAAyB,CAAC,CAAC;YAElK,MAAM,CAAC,eAAe,CAAC,cAAc,CAAC,GAAG,CAAC,kBAAkB,+BAAuB,EAAE,MAAM,CAAC,CAAC;YAC7F,MAAM,CAAC,eAAe,CAAC,cAAc,CAAC,GAAG,CAAC,kBAAkB,iCAAyB,EAAE,MAAM,CAAC,CAAC;QAEhG,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAChE,MAAM,eAAe,GAAG,UAAU,EAAE,aAAa,GAAG,QAAQ,EAAE,kBAAkB,GAAG,4BAA4B,eAAe,IAAI,aAAa,EAAE,CAAC;YAClJ,MAAM,uBAAuB,GAAG,oBAAoB,CAAC,GAAG,CAAC,sBAAG,CAAsB,EAAE,WAAW,GAAG,oBAAoB,CAAC,GAAG,CAAC,WAAG,CAAU,EAAE,cAAc,GAAG,oBAAoB,CAAC,GAAG,CAAC,aAAG,CAAa,EAAE,uBAAuB,GAAG,oBAAoB,CAAC,GAAG,CAAC,qBAAG,CAAsB,CAAC;YAEnR,MAAM,IAAA,gCAAI,EAAoB,eAAe,EAAE,aAAa,EAAE,IAAI,EAAE,oBAAoB,CAAC,CAAC;YAC1F,MAAM,IAAA,gCAAI,EAAoB,eAAe,EAAE,aAAa,EAAE,KAAK,EAAE,oBAAoB,CAAC,CAAC;YAE3F,MAAM,CAAC,eAAe,CAAC,uBAAuB,CAAC,iBAAiB,CAAC,eAAe,EAAE,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC;YACpG,MAAM,CAAC,eAAe,CAAC,uBAAuB,CAAC,iBAAiB,CAAC,eAAe,EAAE,KAAK,CAAC,EAAE,SAAS,CAAC,CAAC;YACrG,MAAM,CAAC,eAAe,CAAC,CAAC,MAAM,WAAW,CAAC,MAAM,CAAC,IAAA,eAAG,EAAM,uBAAuB,CAAC,cAAc,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAC/I,MAAM,CAAC,eAAe,CAAC,CAAC,MAAM,WAAW,CAAC,MAAM,CAAC,IAAA,eAAG,EAAM,oBAAoB,EAAE,oBAAI,CAAU,EAAE,EAAE,eAAe,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAE7H,MAAM,CAAC,eAAe,CAAC,uBAAuB,CAAC,iBAAiB,CAAC,aAAa,EAAE,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC;YAClG,MAAM,CAAC,eAAe,CAAC,uBAAuB,CAAC,iBAAiB,CAAC,aAAa,EAAE,KAAK,CAAC,EAAE,SAAS,CAAC,CAAC;YACnG,MAAM,CAAC,eAAe,CAAC,CAAC,MAAM,WAAW,CAAC,MAAM,CAAC,IAAA,eAAG,EAAM,uBAAuB,CAAC,cAAc,CAAC,iBAAiB,EAAE,aAAa,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAC7I,MAAM,CAAC,eAAe,CAAC,CAAC,MAAM,WAAW,CAAC,MAAM,CAAC,IAAA,eAAG,EAAM,oBAAoB,EAAE,oBAAI,CAAU,EAAE,EAAE,aAAa,CAAC,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAE3H,MAAM,CAAC,eAAe,CAAC,cAAc,CAAC,GAAG,CAAC,kBAAkB,+BAAuB,EAAE,MAAM,CAAC,CAAC;YAC7F,MAAM,CAAC,eAAe,CAAC,cAAc,CAAC,GAAG,CAAC,kBAAkB,iCAAyB,EAAE,MAAM,CAAC,CAAC;QAEhG,CAAC,CAAC,CAAC;IAGJ,CAAC,CAAC,CAAC","file":"extensionStorageMigration.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { InMemoryFileSystemProvider } from 'vs/platform/files/common/inMemoryFilesystemProvider';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { workbenchInstantiationService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { IExtensionStorageService, ExtensionStorageService } from 'vs/platform/extensionManagement/common/extensionStorage';\nimport { URI } from 'vs/base/common/uri';\nimport { joinPath } from 'vs/base/common/resources';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { TestWorkspace } from 'vs/platform/workspace/test/common/testWorkspace';\nimport { migrateExtensionStorage } from 'vs/workbench/services/extensions/common/extensionStorageMigration';\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { IUserDataProfilesService, UserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { UserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfileService';\nimport { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\nimport { UriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentityService';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nsuite('ExtensionStorageMigration', () => {\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\tconst ROOT = URI.file('tests').with({ scheme: 'vscode-tests' });\n\tconst workspaceStorageHome = joinPath(ROOT, 'workspaceStorageHome');\n\n\tlet instantiationService: TestInstantiationService;\n\n\tsetup(() => {\n\t\tinstantiationService = <TestInstantiationService>workbenchInstantiationService(undefined, disposables);\n\n\t\tconst fileService = disposables.add(new FileService(new NullLogService()));\n\t\tdisposables.add(fileService.registerProvider(ROOT.scheme, disposables.add(new InMemoryFileSystemProvider())));\n\t\tinstantiationService.stub(IFileService, fileService);\n\t\tconst environmentService = instantiationService.stub(IEnvironmentService, <Partial<IEnvironmentService>>{ userRoamingDataHome: ROOT, workspaceStorageHome, cacheHome: ROOT });\n\t\tconst userDataProfilesService = instantiationService.stub(IUserDataProfilesService, disposables.add(new UserDataProfilesService(environmentService, fileService, disposables.add(new UriIdentityService(fileService)), new NullLogService())));\n\t\tinstantiationService.stub(IUserDataProfileService, disposables.add(new UserDataProfileService(userDataProfilesService.defaultProfile)));\n\n\t\tinstantiationService.stub(IExtensionStorageService, disposables.add(instantiationService.createInstance(ExtensionStorageService)));\n\t});\n\n\ttest('migrate extension storage', async () => {\n\t\tconst fromExtensionId = 'pub.from', toExtensionId = 'pub.to', storageMigratedKey = `extensionStorage.migrate.${fromExtensionId}-${toExtensionId}`;\n\t\tconst extensionStorageService = instantiationService.get(IExtensionStorageService), fileService = instantiationService.get(IFileService), storageService = instantiationService.get(IStorageService), userDataProfilesService = instantiationService.get(IUserDataProfilesService);\n\n\t\textensionStorageService.setExtensionState(fromExtensionId, { globalKey: 'hello global state' }, true);\n\t\textensionStorageService.setExtensionState(fromExtensionId, { workspaceKey: 'hello workspace state' }, false);\n\t\tawait fileService.writeFile(joinPath(userDataProfilesService.defaultProfile.globalStorageHome, fromExtensionId), VSBuffer.fromString('hello global storage'));\n\t\tawait fileService.writeFile(joinPath(workspaceStorageHome, TestWorkspace.id, fromExtensionId), VSBuffer.fromString('hello workspace storage'));\n\n\t\tawait migrateExtensionStorage(fromExtensionId, toExtensionId, true, instantiationService);\n\t\tawait migrateExtensionStorage(fromExtensionId, toExtensionId, false, instantiationService);\n\n\t\tassert.deepStrictEqual(extensionStorageService.getExtensionState(fromExtensionId, true), undefined);\n\t\tassert.deepStrictEqual(extensionStorageService.getExtensionState(fromExtensionId, false), undefined);\n\t\tassert.deepStrictEqual((await fileService.exists(joinPath(userDataProfilesService.defaultProfile.globalStorageHome, fromExtensionId))), false);\n\t\tassert.deepStrictEqual((await fileService.exists(joinPath(workspaceStorageHome, TestWorkspace.id, fromExtensionId))), false);\n\n\t\tassert.deepStrictEqual(extensionStorageService.getExtensionState(toExtensionId, true), { globalKey: 'hello global state' });\n\t\tassert.deepStrictEqual(extensionStorageService.getExtensionState(toExtensionId, false), { workspaceKey: 'hello workspace state' });\n\t\tassert.deepStrictEqual((await fileService.readFile(joinPath(userDataProfilesService.defaultProfile.globalStorageHome, toExtensionId))).value.toString(), 'hello global storage');\n\t\tassert.deepStrictEqual((await fileService.readFile(joinPath(workspaceStorageHome, TestWorkspace.id, toExtensionId))).value.toString(), 'hello workspace storage');\n\n\t\tassert.deepStrictEqual(storageService.get(storageMigratedKey, StorageScope.PROFILE), 'true');\n\t\tassert.deepStrictEqual(storageService.get(storageMigratedKey, StorageScope.WORKSPACE), 'true');\n\n\t});\n\n\ttest('migrate extension storage when does not exist', async () => {\n\t\tconst fromExtensionId = 'pub.from', toExtensionId = 'pub.to', storageMigratedKey = `extensionStorage.migrate.${fromExtensionId}-${toExtensionId}`;\n\t\tconst extensionStorageService = instantiationService.get(IExtensionStorageService), fileService = instantiationService.get(IFileService), storageService = instantiationService.get(IStorageService), userDataProfilesService = instantiationService.get(IUserDataProfilesService);\n\n\t\tawait migrateExtensionStorage(fromExtensionId, toExtensionId, true, instantiationService);\n\t\tawait migrateExtensionStorage(fromExtensionId, toExtensionId, false, instantiationService);\n\n\t\tassert.deepStrictEqual(extensionStorageService.getExtensionState(fromExtensionId, true), undefined);\n\t\tassert.deepStrictEqual(extensionStorageService.getExtensionState(fromExtensionId, false), undefined);\n\t\tassert.deepStrictEqual((await fileService.exists(joinPath(userDataProfilesService.defaultProfile.globalStorageHome, fromExtensionId))), false);\n\t\tassert.deepStrictEqual((await fileService.exists(joinPath(workspaceStorageHome, TestWorkspace.id, fromExtensionId))), false);\n\n\t\tassert.deepStrictEqual(extensionStorageService.getExtensionState(toExtensionId, true), undefined);\n\t\tassert.deepStrictEqual(extensionStorageService.getExtensionState(toExtensionId, false), undefined);\n\t\tassert.deepStrictEqual((await fileService.exists(joinPath(userDataProfilesService.defaultProfile.globalStorageHome, toExtensionId))), false);\n\t\tassert.deepStrictEqual((await fileService.exists(joinPath(workspaceStorageHome, TestWorkspace.id, toExtensionId))), false);\n\n\t\tassert.deepStrictEqual(storageService.get(storageMigratedKey, StorageScope.PROFILE), 'true');\n\t\tassert.deepStrictEqual(storageService.get(storageMigratedKey, StorageScope.WORKSPACE), 'true');\n\n\t});\n\n\n});\n"]}