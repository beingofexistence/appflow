{"version":3,"sources":["vs/workbench/services/assignment/common/assignmentService.ts"],"names":[],"mappings":"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","file":"assignmentService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport type { IKeyValueStorage, IExperimentationTelemetry } from 'tas-client-umd';\nimport { MementoObject, Memento } from 'vs/workbench/common/memento';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { ITelemetryData } from 'vs/base/common/actions';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IAssignmentService } from 'vs/platform/assignment/common/assignment';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { BaseAssignmentService } from 'vs/platform/assignment/common/assignmentService';\nimport { workbenchConfigurationNodeBase } from 'vs/workbench/common/configuration';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions, ConfigurationScope } from 'vs/platform/configuration/common/configurationRegistry';\n\nexport const IWorkbenchAssignmentService = createDecorator<IWorkbenchAssignmentService>('WorkbenchAssignmentService');\n\nexport interface IWorkbenchAssignmentService extends IAssignmentService {\n\tgetCurrentExperiments(): Promise<string[] | undefined>;\n}\n\nclass MementoKeyValueStorage implements IKeyValueStorage {\n\tprivate mementoObj: MementoObject;\n\tconstructor(private memento: Memento) {\n\t\tthis.mementoObj = memento.getMemento(StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t}\n\n\tasync getValue<T>(key: string, defaultValue?: T | undefined): Promise<T | undefined> {\n\t\tconst value = await this.mementoObj[key];\n\t\treturn value || defaultValue;\n\t}\n\n\tsetValue<T>(key: string, value: T): void {\n\t\tthis.mementoObj[key] = value;\n\t\tthis.memento.saveMemento();\n\t}\n}\n\nclass WorkbenchAssignmentServiceTelemetry implements IExperimentationTelemetry {\n\tprivate _lastAssignmentContext: string | undefined;\n\tconstructor(\n\t\tprivate telemetryService: ITelemetryService,\n\t\tprivate productService: IProductService\n\t) { }\n\n\tget assignmentContext(): string[] | undefined {\n\t\treturn this._lastAssignmentContext?.split(';');\n\t}\n\n\t// __GDPR__COMMON__ \"abexp.assignmentcontext\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\" }\n\tsetSharedProperty(name: string, value: string): void {\n\t\tif (name === this.productService.tasConfig?.assignmentContextTelemetryPropertyName) {\n\t\t\tthis._lastAssignmentContext = value;\n\t\t}\n\n\t\tthis.telemetryService.setExperimentProperty(name, value);\n\t}\n\n\tpostEvent(eventName: string, props: Map<string, string>): void {\n\t\tconst data: ITelemetryData = {};\n\t\tfor (const [key, value] of props.entries()) {\n\t\t\tdata[key] = value;\n\t\t}\n\n\t\t/* __GDPR__\n\t\t\t\"query-expfeature\" : {\n\t\t\t\t\"owner\": \"sbatten\",\n\t\t\t\t\"comment\": \"Logs queries to the experiment service by feature for metric calculations\",\n\t\t\t\t\"ABExp.queriedFeature\": { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"comment\": \"The experimental feature being queried\" }\n\t\t\t}\n\t\t*/\n\t\tthis.telemetryService.publicLog(eventName, data);\n\t}\n}\n\nexport class WorkbenchAssignmentService extends BaseAssignmentService {\n\tconstructor(\n\t\t@ITelemetryService private telemetryService: ITelemetryService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IProductService productService: IProductService\n\t) {\n\n\t\tsuper(\n\t\t\ttelemetryService.machineId,\n\t\t\tconfigurationService,\n\t\t\tproductService,\n\t\t\tnew WorkbenchAssignmentServiceTelemetry(telemetryService, productService),\n\t\t\tnew MementoKeyValueStorage(new Memento('experiment.service.memento', storageService))\n\t\t);\n\t}\n\n\tprotected override get experimentsEnabled(): boolean {\n\t\treturn this.configurationService.getValue('workbench.enableExperiments') === true;\n\t}\n\n\toverride async getTreatment<T extends string | number | boolean>(name: string): Promise<T | undefined> {\n\t\tconst result = await super.getTreatment<T>(name);\n\t\ttype TASClientReadTreatmentData = {\n\t\t\ttreatmentName: string;\n\t\t\ttreatmentValue: string;\n\t\t};\n\n\t\ttype TASClientReadTreatmentClassification = {\n\t\t\towner: 'sbatten';\n\t\t\tcomment: 'Logged when a treatment value is read from the experiment service';\n\t\t\ttreatmentValue: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The value of the read treatment' };\n\t\t\ttreatmentName: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The name of the treatment that was read' };\n\t\t};\n\n\t\tthis.telemetryService.publicLog2<TASClientReadTreatmentData, TASClientReadTreatmentClassification>('tasClientReadTreatmentComplete',\n\t\t\t{ treatmentName: name, treatmentValue: JSON.stringify(result) });\n\n\t\treturn result;\n\t}\n\n\tasync getCurrentExperiments(): Promise<string[] | undefined> {\n\t\tif (!this.tasClient) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (!this.experimentsEnabled) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tawait this.tasClient;\n\n\t\treturn (this.telemetry as WorkbenchAssignmentServiceTelemetry)?.assignmentContext;\n\t}\n}\n\nregisterSingleton(IWorkbenchAssignmentService, WorkbenchAssignmentService, InstantiationType.Delayed);\nconst registry = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration);\nregistry.registerConfiguration({\n\t...workbenchConfigurationNodeBase,\n\t'properties': {\n\t\t'workbench.enableExperiments': {\n\t\t\t'type': 'boolean',\n\t\t\t'description': localize('workbench.enableExperiments', \"Fetches experiments to run from a Microsoft online service.\"),\n\t\t\t'default': true,\n\t\t\t'scope': ConfigurationScope.APPLICATION,\n\t\t\t'restricted': true,\n\t\t\t'tags': ['usesOnlineServices']\n\t\t}\n\t}\n});\n"]}