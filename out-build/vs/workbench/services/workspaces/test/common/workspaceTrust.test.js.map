{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/workspaces/test/common/workspaceTrust.test.ts"],"names":[],"mappings":"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","file":"workspaceTrust.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { URI } from 'vs/base/common/uri';\nimport { mock } from 'vs/base/test/common/mock';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { IRemoteAuthorityResolverService } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IWorkspaceTrustEnablementService, IWorkspaceTrustInfo } from 'vs/platform/workspace/common/workspaceTrust';\nimport { Workspace } from 'vs/platform/workspace/test/common/testWorkspace';\nimport { Memento } from 'vs/workbench/common/memento';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { UriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentityService';\nimport { WorkspaceTrustEnablementService, WorkspaceTrustManagementService, WORKSPACE_TRUST_STORAGE_KEY } from 'vs/workbench/services/workspaces/common/workspaceTrust';\nimport { TestContextService, TestStorageService, TestWorkspaceTrustEnablementService } from 'vs/workbench/test/common/workbenchTestServices';\n\nsuite('Workspace Trust', () => {\n\tlet instantiationService: TestInstantiationService;\n\tlet configurationService: TestConfigurationService;\n\tlet environmentService: IWorkbenchEnvironmentService;\n\n\tsetup(async () => {\n\t\tinstantiationService = new TestInstantiationService();\n\n\t\tconfigurationService = new TestConfigurationService();\n\t\tinstantiationService.stub(IConfigurationService, configurationService);\n\n\t\tenvironmentService = {} as IWorkbenchEnvironmentService;\n\t\tinstantiationService.stub(IWorkbenchEnvironmentService, environmentService);\n\n\t\tinstantiationService.stub(IUriIdentityService, new UriIdentityService(new FileService(new NullLogService())));\n\t\tinstantiationService.stub(IRemoteAuthorityResolverService, new class extends mock<IRemoteAuthorityResolverService>() { });\n\t});\n\n\tteardown(() => {\n\t\tinstantiationService.dispose();\n\t});\n\n\tsuite('Enablement', () => {\n\t\tlet testObject: WorkspaceTrustEnablementService;\n\n\t\tteardown(() => testObject.dispose());\n\n\t\ttest('workspace trust enabled', async () => {\n\t\t\tawait configurationService.setUserConfiguration('security', getUserSettings(true, true));\n\t\t\ttestObject = instantiationService.createInstance(WorkspaceTrustEnablementService);\n\n\t\t\tassert.strictEqual(testObject.isWorkspaceTrustEnabled(), true);\n\t\t});\n\n\t\ttest('workspace trust disabled (user setting)', async () => {\n\t\t\tawait configurationService.setUserConfiguration('security', getUserSettings(false, true));\n\t\t\ttestObject = instantiationService.createInstance(WorkspaceTrustEnablementService);\n\n\t\t\tassert.strictEqual(testObject.isWorkspaceTrustEnabled(), false);\n\t\t});\n\n\t\ttest('workspace trust disabled (--disable-workspace-trust)', () => {\n\t\t\tinstantiationService.stub(IWorkbenchEnvironmentService, { ...environmentService, disableWorkspaceTrust: true });\n\t\t\ttestObject = instantiationService.createInstance(WorkspaceTrustEnablementService);\n\n\t\t\tassert.strictEqual(testObject.isWorkspaceTrustEnabled(), false);\n\t\t});\n\t});\n\n\tsuite('Management', () => {\n\t\tlet testObject: WorkspaceTrustManagementService;\n\n\t\tlet storageService: TestStorageService;\n\t\tlet workspaceService: TestContextService;\n\n\t\tsetup(() => {\n\t\t\tstorageService = new TestStorageService();\n\t\t\tinstantiationService.stub(IStorageService, storageService);\n\n\t\t\tworkspaceService = new TestContextService();\n\t\t\tinstantiationService.stub(IWorkspaceContextService, workspaceService);\n\n\t\t\tinstantiationService.stub(IWorkspaceTrustEnablementService, new TestWorkspaceTrustEnablementService());\n\t\t});\n\n\t\tteardown(() => {\n\t\t\ttestObject.dispose();\n\t\t\tMemento.clear(StorageScope.WORKSPACE);\n\t\t});\n\n\t\ttest('empty workspace - trusted', async () => {\n\t\t\tawait configurationService.setUserConfiguration('security', getUserSettings(true, true));\n\t\t\tworkspaceService.setWorkspace(new Workspace('empty-workspace'));\n\t\t\ttestObject = await initializeTestObject();\n\n\t\t\tassert.strictEqual(true, testObject.isWorkspaceTrusted());\n\t\t});\n\n\t\ttest('empty workspace - untrusted', async () => {\n\t\t\tawait configurationService.setUserConfiguration('security', getUserSettings(true, false));\n\t\t\tworkspaceService.setWorkspace(new Workspace('empty-workspace'));\n\t\t\ttestObject = await initializeTestObject();\n\n\t\t\tassert.strictEqual(false, testObject.isWorkspaceTrusted());\n\t\t});\n\n\t\ttest('empty workspace - trusted, open trusted file', async () => {\n\t\t\tawait configurationService.setUserConfiguration('security', getUserSettings(true, true));\n\t\t\tconst trustInfo: IWorkspaceTrustInfo = { uriTrustInfo: [{ uri: URI.parse('file:///Folder'), trusted: true }] };\n\t\t\tstorageService.store(WORKSPACE_TRUST_STORAGE_KEY, JSON.stringify(trustInfo), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\n\t\t\t(environmentService as any).filesToOpenOrCreate = [{ fileUri: URI.parse('file:///Folder/file.txt') }];\n\t\t\tinstantiationService.stub(IWorkbenchEnvironmentService, { ...environmentService });\n\n\t\t\tworkspaceService.setWorkspace(new Workspace('empty-workspace'));\n\t\t\ttestObject = await initializeTestObject();\n\n\t\t\tassert.strictEqual(true, testObject.isWorkspaceTrusted());\n\t\t});\n\n\t\ttest('empty workspace - trusted, open untrusted file', async () => {\n\t\t\tawait configurationService.setUserConfiguration('security', getUserSettings(true, true));\n\n\t\t\t(environmentService as any).filesToOpenOrCreate = [{ fileUri: URI.parse('file:///Folder/foo.txt') }];\n\t\t\tinstantiationService.stub(IWorkbenchEnvironmentService, { ...environmentService });\n\n\t\t\tworkspaceService.setWorkspace(new Workspace('empty-workspace'));\n\t\t\ttestObject = await initializeTestObject();\n\n\t\t\tassert.strictEqual(false, testObject.isWorkspaceTrusted());\n\t\t});\n\n\t\tasync function initializeTestObject(): Promise<WorkspaceTrustManagementService> {\n\t\t\tconst workspaceTrustManagementService = instantiationService.createInstance(WorkspaceTrustManagementService);\n\t\t\tawait workspaceTrustManagementService.workspaceTrustInitialized;\n\n\t\t\treturn workspaceTrustManagementService;\n\t\t}\n\t});\n\n\tfunction getUserSettings(enabled: boolean, emptyWindow: boolean) {\n\t\treturn { workspace: { trust: { emptyWindow, enabled } } };\n\t}\n});\n"]}