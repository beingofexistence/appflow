{"version":3,"sources":["vs/workbench/services/workspaces/electron-sandbox/workspaceEditingService.ts"],"names":[],"mappings":"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","file":"workspaceEditingService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { IWorkspaceEditingService } from 'vs/workbench/services/workspaces/common/workspaceEditing';\nimport { URI } from 'vs/base/common/uri';\nimport { hasWorkspaceFileExtension, isUntitledWorkspace, isWorkspaceIdentifier, IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IJSONEditingService } from 'vs/workbench/services/configuration/common/jsonEditing';\nimport { IWorkspacesService } from 'vs/platform/workspaces/common/workspaces';\nimport { WorkspaceService } from 'vs/workbench/services/configuration/browser/configurationService';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IWorkingCopyBackupService } from 'vs/workbench/services/workingCopy/common/workingCopyBackup';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { basename } from 'vs/base/common/resources';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { ILifecycleService, ShutdownReason } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IFileDialogService, IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ILabelService, Verbosity } from 'vs/platform/label/common/label';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { AbstractWorkspaceEditingService } from 'vs/workbench/services/workspaces/browser/abstractWorkspaceEditingService';\nimport { INativeHostService } from 'vs/platform/native/common/native';\nimport { isMacintosh } from 'vs/base/common/platform';\nimport { WorkingCopyBackupService } from 'vs/workbench/services/workingCopy/common/workingCopyBackupService';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { IWorkspaceTrustManagementService } from 'vs/platform/workspace/common/workspaceTrust';\nimport { IWorkbenchConfigurationService } from 'vs/workbench/services/configuration/common/configuration';\nimport { IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\n\nexport class NativeWorkspaceEditingService extends AbstractWorkspaceEditingService {\n\n\tconstructor(\n\t\t@IJSONEditingService jsonEditingService: IJSONEditingService,\n\t\t@IWorkspaceContextService contextService: WorkspaceService,\n\t\t@INativeHostService private nativeHostService: INativeHostService,\n\t\t@IWorkbenchConfigurationService configurationService: IWorkbenchConfigurationService,\n\t\t@IStorageService private storageService: IStorageService,\n\t\t@IExtensionService private extensionService: IExtensionService,\n\t\t@IWorkingCopyBackupService private workingCopyBackupService: IWorkingCopyBackupService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@IFileService fileService: IFileService,\n\t\t@ITextFileService textFileService: ITextFileService,\n\t\t@IWorkspacesService workspacesService: IWorkspacesService,\n\t\t@INativeWorkbenchEnvironmentService environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IFileDialogService fileDialogService: IFileDialogService,\n\t\t@IDialogService dialogService: IDialogService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IHostService hostService: IHostService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@IWorkspaceTrustManagementService workspaceTrustManagementService: IWorkspaceTrustManagementService,\n\t\t@IUserDataProfilesService userDataProfilesService: IUserDataProfilesService,\n\t\t@IUserDataProfileService userDataProfileService: IUserDataProfileService,\n\t) {\n\t\tsuper(jsonEditingService, contextService, configurationService, notificationService, commandService, fileService, textFileService, workspacesService, environmentService, fileDialogService, dialogService, hostService, uriIdentityService, workspaceTrustManagementService, userDataProfilesService, userDataProfileService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis.lifecycleService.onBeforeShutdown(e => {\n\t\t\tconst saveOperation = this.saveUntitledBeforeShutdown(e.reason);\n\t\t\te.veto(saveOperation, 'veto.untitledWorkspace');\n\t\t});\n\t}\n\n\tprivate async saveUntitledBeforeShutdown(reason: ShutdownReason): Promise<boolean> {\n\t\tif (reason !== ShutdownReason.LOAD && reason !== ShutdownReason.CLOSE) {\n\t\t\treturn false; // only interested when window is closing or loading\n\t\t}\n\n\t\tconst workspaceIdentifier = this.getCurrentWorkspaceIdentifier();\n\t\tif (!workspaceIdentifier || !isUntitledWorkspace(workspaceIdentifier.configPath, this.environmentService)) {\n\t\t\treturn false; // only care about untitled workspaces to ask for saving\n\t\t}\n\n\t\tconst windowCount = await this.nativeHostService.getWindowCount();\n\t\tif (reason === ShutdownReason.CLOSE && !isMacintosh && windowCount === 1) {\n\t\t\treturn false; // Windows/Linux: quits when last window is closed, so do not ask then\n\t\t}\n\n\t\tconst { result } = await this.dialogService.prompt<boolean>({\n\t\t\ttype: Severity.Warning,\n\t\t\tmessage: localize('saveWorkspaceMessage', \"Do you want to save your workspace configuration as a file?\"),\n\t\t\tdetail: localize('saveWorkspaceDetail', \"Save your workspace if you plan to open it again.\"),\n\t\t\tbuttons: [\n\t\t\t\t{\n\t\t\t\t\tlabel: localize({ key: 'save', comment: ['&& denotes a mnemonic'] }, \"&&Save\"),\n\t\t\t\t\trun: async () => {\n\t\t\t\t\t\tconst newWorkspacePath = await this.pickNewWorkspacePath();\n\t\t\t\t\t\tif (!newWorkspacePath || !hasWorkspaceFileExtension(newWorkspacePath)) {\n\t\t\t\t\t\t\treturn true; // keep veto if no target was provided\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait this.saveWorkspaceAs(workspaceIdentifier, newWorkspacePath);\n\n\t\t\t\t\t\t\t// Make sure to add the new workspace to the history to find it again\n\t\t\t\t\t\t\tconst newWorkspaceIdentifier = await this.workspacesService.getWorkspaceIdentifier(newWorkspacePath);\n\t\t\t\t\t\t\tawait this.workspacesService.addRecentlyOpened([{\n\t\t\t\t\t\t\t\tlabel: this.labelService.getWorkspaceLabel(newWorkspaceIdentifier, { verbose: Verbosity.LONG }),\n\t\t\t\t\t\t\t\tworkspace: newWorkspaceIdentifier,\n\t\t\t\t\t\t\t\tremoteAuthority: this.environmentService.remoteAuthority // remember whether this was a remote window\n\t\t\t\t\t\t\t}]);\n\n\t\t\t\t\t\t\t// Delete the untitled one\n\t\t\t\t\t\t\tawait this.workspacesService.deleteUntitledWorkspace(workspaceIdentifier);\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t// ignore\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: localize({ key: 'doNotSave', comment: ['&& denotes a mnemonic'] }, \"Do&&n't Save\"),\n\t\t\t\t\trun: async () => {\n\t\t\t\t\t\tawait this.workspacesService.deleteUntitledWorkspace(workspaceIdentifier);\n\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t],\n\t\t\tcancelButton: {\n\t\t\t\trun: () => true // veto\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}\n\n\toverride async isValidTargetWorkspacePath(workspaceUri: URI): Promise<boolean> {\n\t\tconst windows = await this.nativeHostService.getWindows();\n\n\t\t// Prevent overwriting a workspace that is currently opened in another window\n\t\tif (windows.some(window => isWorkspaceIdentifier(window.workspace) && this.uriIdentityService.extUri.isEqual(window.workspace.configPath, workspaceUri))) {\n\t\t\tawait this.dialogService.info(\n\t\t\t\tlocalize('workspaceOpenedMessage', \"Unable to save workspace '{0}'\", basename(workspaceUri)),\n\t\t\t\tlocalize('workspaceOpenedDetail', \"The workspace is already opened in another window. Please close that window first and then try again.\")\n\t\t\t);\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true; // OK\n\t}\n\n\tasync enterWorkspace(workspaceUri: URI): Promise<void> {\n\t\tconst stopped = await this.extensionService.stopExtensionHosts(localize('restartExtensionHost.reason', \"Opening a multi-root workspace.\"));\n\t\tif (!stopped) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst result = await this.doEnterWorkspace(workspaceUri);\n\t\tif (result) {\n\n\t\t\t// Migrate storage to new workspace\n\t\t\tawait this.storageService.switch(result.workspace, true /* preserve data */);\n\n\t\t\t// Reinitialize backup service\n\t\t\tif (this.workingCopyBackupService instanceof WorkingCopyBackupService) {\n\t\t\t\tconst newBackupWorkspaceHome = result.backupPath ? URI.file(result.backupPath).with({ scheme: this.environmentService.userRoamingDataHome.scheme }) : undefined;\n\t\t\t\tthis.workingCopyBackupService.reinitialize(newBackupWorkspaceHome);\n\t\t\t}\n\t\t}\n\n\t\t// TODO@aeschli: workaround until restarting works\n\t\tif (this.environmentService.remoteAuthority) {\n\t\t\tthis.hostService.reload();\n\t\t}\n\n\t\t// Restart the extension host: entering a workspace means a new location for\n\t\t// storage and potentially a change in the workspace.rootPath property.\n\t\telse {\n\t\t\tthis.extensionService.startExtensionHosts();\n\t\t}\n\t}\n}\n\nregisterSingleton(IWorkspaceEditingService, NativeWorkspaceEditingService, InstantiationType.Delayed);\n"]}