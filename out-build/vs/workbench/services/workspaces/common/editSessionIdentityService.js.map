{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/workspaces/common/editSessionIdentityService.ts"],"names":[],"mappings":"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","file":"editSessionIdentityService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { insert } from 'vs/base/common/arrays';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { EditSessionIdentityMatch, IEditSessionIdentityCreateParticipant, IEditSessionIdentityProvider, IEditSessionIdentityService } from 'vs/platform/workspace/common/editSessions';\nimport { IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\n\nexport class EditSessionIdentityService implements IEditSessionIdentityService {\n\treadonly _serviceBrand: undefined;\n\n\tprivate _editSessionIdentifierProviders = new Map<string, IEditSessionIdentityProvider>();\n\n\tconstructor(\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) { }\n\n\tregisterEditSessionIdentityProvider(provider: IEditSessionIdentityProvider): IDisposable {\n\t\tif (this._editSessionIdentifierProviders.get(provider.scheme)) {\n\t\t\tthrow new Error(`A provider has already been registered for scheme ${provider.scheme}`);\n\t\t}\n\n\t\tthis._editSessionIdentifierProviders.set(provider.scheme, provider);\n\t\treturn toDisposable(() => {\n\t\t\tthis._editSessionIdentifierProviders.delete(provider.scheme);\n\t\t});\n\t}\n\n\tasync getEditSessionIdentifier(workspaceFolder: IWorkspaceFolder, token: CancellationToken): Promise<string | undefined> {\n\t\tconst { scheme } = workspaceFolder.uri;\n\n\t\tconst provider = await this.activateProvider(scheme);\n\t\tthis._logService.trace(`EditSessionIdentityProvider for scheme ${scheme} available: ${!!provider}`);\n\n\t\treturn provider?.getEditSessionIdentifier(workspaceFolder, token);\n\t}\n\n\tasync provideEditSessionIdentityMatch(workspaceFolder: IWorkspaceFolder, identity1: string, identity2: string, cancellationToken: CancellationToken): Promise<EditSessionIdentityMatch | undefined> {\n\t\tconst { scheme } = workspaceFolder.uri;\n\n\t\tconst provider = await this.activateProvider(scheme);\n\t\tthis._logService.trace(`EditSessionIdentityProvider for scheme ${scheme} available: ${!!provider}`);\n\n\t\treturn provider?.provideEditSessionIdentityMatch?.(workspaceFolder, identity1, identity2, cancellationToken);\n\t}\n\n\tasync onWillCreateEditSessionIdentity(workspaceFolder: IWorkspaceFolder, cancellationToken: CancellationToken): Promise<void> {\n\t\tthis._logService.debug('Running onWillCreateEditSessionIdentity participants...');\n\n\t\t// TODO@joyceerhl show progress notification?\n\t\tfor (const participant of this._participants) {\n\t\t\tawait participant.participate(workspaceFolder, cancellationToken);\n\t\t}\n\n\t\tthis._logService.debug(`Done running ${this._participants.length} onWillCreateEditSessionIdentity participants.`);\n\t}\n\n\tprivate _participants: IEditSessionIdentityCreateParticipant[] = [];\n\n\taddEditSessionIdentityCreateParticipant(participant: IEditSessionIdentityCreateParticipant): IDisposable {\n\t\tconst dispose = insert(this._participants, participant);\n\n\t\treturn toDisposable(() => dispose());\n\t}\n\n\tprivate async activateProvider(scheme: string) {\n\t\tconst transformedScheme = scheme === 'vscode-remote' ? 'file' : scheme;\n\n\t\tconst provider = this._editSessionIdentifierProviders.get(scheme);\n\t\tif (provider) {\n\t\t\treturn provider;\n\t\t}\n\n\t\tawait this._extensionService.activateByEvent(`onEditSession:${transformedScheme}`);\n\t\treturn this._editSessionIdentifierProviders.get(scheme);\n\t}\n}\n\nregisterSingleton(IEditSessionIdentityService, EditSessionIdentityService, InstantiationType.Delayed);\n"]}