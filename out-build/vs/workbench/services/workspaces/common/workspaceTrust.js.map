{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/workspaces/common/workspaceTrust.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAuBnF,QAAA,IAAI,GAAsB,kCAAkC,CAAC;IAC7D,QAAA,IAAI,GAA6B,wCAAwC,CAAC;IAC1E,QAAA,IAAI,GAAqB,iCAAiC,CAAC;IAC3D,QAAA,IAAI,GAA8B,yCAAyC,CAAC;IAC5E,QAAA,IAAI,GAA2B,sCAAsC,CAAC;IACtE,QAAA,IAAI,GAAgC,uCAAuC,CAAC;IAC5E,QAAA,IAAI,GAA0B,yBAAyB,CAAC;IAErE,MAAa,IAAI;QAChB,YACkB,CAA6B,EAC7B,CAA0B,EAC1B,CAA8C;YAF9C,MAAC,GAAD,CAAC,CAA4B;YAC7B,MAAC,GAAD,CAAC,CAAyB;YAC1B,MAAC,GAAD,CAAC,CAA6C;QAC5D,CAAC;QAGL,IAAI,OAAO;YACV,OAAO,IAAI,CAAC,CAAC,CAAiB,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;gBAC3D,OAAO;oBACN,KAAK,EAAE,MAAM,CAAC,KAAK;oBACnB,IAAI,EAAE,MAAM,CAAC,IAAI;oBACjB,UAAU,EAAE,MAAM,CAAC,UAAU;oBAC7B,GAAG,EAAE,IAAI,CAAC,CAAC,CAAmB,KAAK,CAAC;iBACpC,CAAC;YACH,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,IAAI,SAAS;YACZ,OAAO,IAAI,CAAC,CAAC,CAAiB,SAAS,CAAC;QACzC,CAAC;QAED,IAAI,aAAa;YAChB,OAAO,IAAI,CAAC,CAAC,IAAyB,IAAI,CAAC,CAAC,CAAiB,aAAa,CAAC;QAC5E,CAAC;QAED,IAAI,EAAE;YACL,OAAO,IAAI,CAAC,CAAC,CAAiB,EAAE,CAAC;QAClC,CAAC;KACD;IA9BD,oBA8BC;IAEM,IAAM,IAAI,GAAV,MAAM,IAAgC,SAAQ,eAAG;QAIvD,YACyC,CAAyB,EAClB,CAAuB;YAEtE,KAAK,EAAE,CAAC;YAHgC,MAAC,GAAD,CAAC,CAAwB;YAClB,MAAC,GAAD,CAAC,CAAsB;QAGvE,CAAC;QAED,uBAAuB;YACtB,IAAI,IAAI,CAAC,CAAC,CAAkB,qBAAqB,EAAE;gBAClD,OAAO,KAAK,CAAC;aACb;YAED,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAoB,QAAQ,CAAC,YAAI,CAAoB,CAAC;QACtE,CAAC;KACD,CAAA;IAlBY,oBAAI;mBAAJ,IAAI;QAKd,WAAA,mBAAG,CAAA;QACH,WAAA,wBAAG,CAAA;OANO,IAAI,CAkBhB;IAEM,IAAM,IAAI,GAAV,MAAM,IAAgC,SAAQ,eAAG;QA4BvD,YACwB,CAA0C,EAChC,CAAoD,EACpE,CAAoC,EAChC,CAAwC,EAC/B,CAAwC,EAC5C,CAAsC,EAC9B,CAAqD,EACzE,CAAiC;YAE/C,KAAK,EAAE,CAAC;YATgC,MAAC,GAAD,CAAC,CAAwB;YACf,MAAC,GAAD,CAAC,CAAkC;YACnD,MAAC,GAAD,CAAC,CAAkB;YACf,MAAC,GAAD,CAAC,CAAsB;YACd,MAAC,GAAD,CAAC,CAAsB;YAC3B,MAAC,GAAD,CAAC,CAAoB;YACb,MAAC,GAAD,CAAC,CAAmC;YACxD,MAAC,GAAD,CAAC,CAAe;YAhC/B,MAAC,GAAY,YAAI,CAAwB;YAOzC,MAAC,GAAmB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAe,CAAC,CAAC;YACnE,qBAAgB,GAAG,IAAI,CAAC,CAAC,CAAiB,KAAK,CAAC;YAExC,MAAC,GAA4B,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAY,CAAC,CAAC;YACzE,8BAAyB,GAAG,IAAI,CAAC,CAAC,CAA0B,KAAK,CAAC;YAEnE,MAAC,GAA+B,EAAE,CAAC;YAuB1C,IAAI,CAAC,CAAC,GAAwB,KAAK,CAAC;YACpC,IAAI,CAAC,CAAC,GAAqB,IAAI,CAAC,CAAC,CAAgB,YAAY,EAAE,CAAC;YAEhE,IAAI,CAAC,CAAC,GAA2B,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;gBACxD,IAAI,CAAC,CAAC,GAAkC,OAAO,CAAC;YACjD,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,CAAC,GAAmC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE;gBAChE,IAAI,CAAC,CAAC,GAA0C,OAAO,CAAC;YACzD,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,CAAC,GAAmB,IAAI,qBAAqB,CAAC,aAAE,IAAO,IAAI,CAAC,EAAE,EAAgB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAc,CAAC;YACvH,IAAI,CAAC,CAAC,GAAyB,IAAI,CAAC,CAAC,CAAS,IAAI,+BAA+B,EAAE,CAAC,CAAC;YAErF,IAAI,CAAC,CAAC,GAAiB,IAAI,CAAC,CAAC,EAAc,CAAC;YAC5C,IAAI,CAAC,CAAC,GAAY,IAAI,CAAC,CAAC,EAAwB,CAAC;YAEjD,IAAI,CAAC,CAAC,EAAyB,CAAC;YAChC,IAAI,CAAC,CAAC,EAAkB,CAAC;QAC1B,CAAC;QAED,oBAAoB;QAEZ,CAAC;YACR,yBAAyB;YACzB,IAAI,CAAC,CAAC,EAAqB;iBACzB,IAAI,CAAC,KAAK,IAAI,EAAE;gBAChB,IAAI,CAAC,CAAC,GAAwB,IAAI,CAAC;gBACnC,MAAM,IAAI,CAAC,CAAC,EAAqB,CAAC;YACnC,CAAC,CAAC;iBACD,OAAO,CAAC,GAAG,EAAE;gBACb,IAAI,CAAC,CAAC,EAAiC,CAAC;gBAExC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAkB,eAAe,EAAE;oBAC7C,IAAI,CAAC,CAAC,EAAyC,CAAC;iBAChD;YACF,CAAC,CAAC,CAAC;YAEJ,oCAAoC;YACpC,IAAI,IAAI,CAAC,CAAC,CAAkB,eAAe,EAAE;gBAC5C,IAAI,CAAC,CAAC,CAA8B,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAkB,eAAe,CAAC;qBAC3F,IAAI,CAAC,KAAK,EAAC,MAAM,EAAC,EAAE;oBACpB,IAAI,CAAC,CAAC,GAAkB,MAAM,CAAC;oBAC/B,MAAM,IAAI,CAAC,CAAC,CAAW,gBAAgB,CAAC,iBAAO,CAAC,YAAY,CAAC,CAAC;oBAC9D,MAAM,IAAI,CAAC,CAAC,EAAqB,CAAC;gBACnC,CAAC,CAAC;qBACD,OAAO,CAAC,GAAG,EAAE;oBACb,IAAI,CAAC,CAAC,EAAyC,CAAC;gBACjD,CAAC,CAAC,CAAC;aACJ;YAED,kDAAkD;YAClD,IAAI,IAAI,CAAC,EAAE,EAAgB,EAAE;gBAC5B,IAAI,CAAC,CAAC,CAAiC,IAAI,CAAC,GAAG,EAAE;oBAChD,IAAI,IAAI,CAAC,CAAC,CAAiB,uBAAuB,KAAK,SAAS,EAAE;wBACjE,IAAI,CAAC,CAAC,CAAiB,uBAAuB,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;qBAC3E;gBACF,CAAC,CAAC,CAAC;aACH;QACF,CAAC;QAED,YAAY;QAEZ,2BAA2B;QAEnB,CAAC;YACR,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAgB,2BAA2B,CAAC,KAAK,IAAI,EAAE,CAAC,MAAM,IAAI,CAAC,CAAC,EAAqB,CAAC,CAAC,CAAC;YACjH,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAc,gBAAgB,oCAA2B,IAAI,CAAC,CAAC,EAAW,IAAI,CAAC,CAAC,CAAS,IAAI,eAAG,EAAc,CAAC,CAAC,CAAC,KAAK,IAAI,EAAE;gBAChJ,yFAAyF;gBACzF,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAe,KAAK,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,EAAc,CAAC,EAAE;oBAClF,IAAI,CAAC,CAAC,GAAiB,IAAI,CAAC,CAAC,EAAc,CAAC;oBAC5C,IAAI,CAAC,CAAC,CAA0B,IAAI,EAAE,CAAC;oBAEvC,MAAM,IAAI,CAAC,CAAC,EAAqB,CAAC;iBAClC;YACF,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAEO,KAAK,CAAC,CAAC,CAAe,GAAQ;YACrC,IAAI,YAAY,GAAG,GAAG,CAAC;YACvB,IAAI,IAAI,CAAC,CAAC,CAAkB,eAAe,IAAI,GAAG,CAAC,MAAM,KAAK,iBAAO,CAAC,YAAY,EAAE;gBACnF,YAAY,GAAG,MAAM,IAAI,CAAC,CAAC,CAA8B,eAAe,CAAC,GAAG,CAAC,CAAC;aAC9E;iBAAM,IAAI,GAAG,CAAC,MAAM,KAAK,YAAY,EAAE;gBACvC,MAAM,KAAK,GAAG,GAAG,CAAC,SAAS,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBACzC,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;oBACjB,YAAY,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,GAAG,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,EAAE,KAAK,CAAC,EAAE,CAAC,CAAC;iBACvE;aACD;YAED,kDAAkD;YAClD,OAAO,YAAY,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC;QAC3D,CAAC;QAEO,KAAK,CAAC,CAAC;YACd,eAAe;YACf,MAAM,WAAW,GAAY,EAAE,CAAC;YAChC,IAAI,IAAI,CAAC,CAAC,CAAkB,mBAAmB,EAAE;gBAChD,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAkB,mBAAmB,CAAC,CAAC;aACjE;YAED,IAAI,IAAI,CAAC,CAAC,CAAkB,WAAW,EAAE;gBACxC,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAkB,WAAW,CAAC,CAAC;aACzD;YAED,IAAI,IAAI,CAAC,CAAC,CAAkB,YAAY,EAAE;gBACzC,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAkB,YAAY,CAAC,CAAC;aAC1D;YAED,IAAI,WAAW,CAAC,MAAM,EAAE;gBACvB,MAAM,uBAAuB,GAAG,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAQ,CAAC,CAAC;gBAC1F,MAAM,oBAAoB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,uBAAuB,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAe,GAAG,CAAC,CAAC,CAAC,CAAC;gBAE9G,IAAI,CAAC,CAAC,CAAsB,IAAI,CAAC,GAAG,oBAAoB,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAsB,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAkB,MAAM,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACjK;YAED,YAAY;YACZ,MAAM,aAAa,GAAG,IAAI,CAAC,CAAC,CAAgB,YAAY,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YACnF,MAAM,yBAAyB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAe,GAAG,CAAC,CAAC,CAAC,CAAC;YAEzG,IAAI,+BAA+B,GAAG,IAAI,CAAC,CAAC,CAAgB,YAAY,EAAE,CAAC,aAAa,CAAC;YACzF,IAAI,+BAA+B,IAAI,IAAA,eAAG,EAAc,+BAA+B,EAAE,IAAI,CAAC,CAAC,CAAkB,EAAE;gBAClH,+BAA+B,GAAG,MAAM,IAAI,CAAC,CAAC,CAAe,+BAA+B,CAAC,CAAC;aAC9F;YAED,IAAI,CAAC,CAAC,GAAqB,IAAI,IAAI,CAAe,IAAI,CAAC,CAAC,CAAgB,YAAY,EAAE,EAAE,yBAAyB,EAAE,+BAA+B,CAAC,CAAC;QACrJ,CAAC;QAEO,CAAC;YACR,MAAM,YAAY,GAAG,IAAI,CAAC,CAAC,CAAc,GAAG,CAAC,IAAI,CAAC,CAAC,oCAAoC,CAAC;YAExF,IAAI,MAAuC,CAAC;YAC5C,IAAI;gBACH,IAAI,YAAY,EAAE;oBACjB,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;iBAClC;aACD;YAAC,MAAM,GAAG;YAEX,IAAI,CAAC,MAAM,EAAE;gBACZ,MAAM,GAAG;oBACR,YAAY,EAAE,EAAE;iBAChB,CAAC;aACF;YAED,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE;gBACzB,MAAM,CAAC,YAAY,GAAG,EAAE,CAAC;aACzB;YAED,MAAM,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,GAAG,OAAO,EAAE,GAAG,EAAE,SAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;YACxH,MAAM,CAAC,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;YAEvE,OAAO,MAAM,CAAC;QACf,CAAC;QAEO,KAAK,CAAC,CAAC;YACd,IAAI,CAAC,CAAC,CAAc,KAAK,CAAC,IAAI,CAAC,CAAC,EAAW,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAe,mEAAkD,CAAC;YAClI,IAAI,CAAC,CAAC,CAA0B,IAAI,EAAE,CAAC;YAEvC,MAAM,IAAI,CAAC,CAAC,EAAqB,CAAC;QACnC,CAAC;QAEO,CAAC;YACR,MAAM,aAAa,GAAG,IAAI,CAAC,CAAC,CAAmB,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YACvE,MAAM,sBAAsB,GAAG,IAAI,CAAC,CAAC,CAAmB,aAAa,CAAC;YACtE,IAAI,sBAAsB,IAAI,IAAA,eAAG,EAAc,sBAAsB,EAAE,IAAI,CAAC,CAAC,CAAkB,EAAE;gBAChG,aAAa,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;aAC3C;YAED,OAAO,aAAa,CAAC;QACtB,CAAC;QAEO,CAAC;YACR,sBAAsB;YACtB,IAAI,CAAC,IAAI,CAAC,CAAC,CAA+B,uBAAuB,EAAE,EAAE;gBACpE,OAAO,IAAI,CAAC;aACZ;YAED,kCAAkC;YAClC,IAAI,CAAC,IAAI,CAAC,CAAC,EAAuB;gBACjC,OAAO,KAAK,CAAC;aACb;YAED,4DAA4D;YAC5D,IAAI,IAAI,CAAC,CAAC,CAAkB,eAAe,IAAI,IAAI,CAAC,CAAC,EAAiB,OAAO,EAAE,SAAS,EAAE;gBACzF,OAAO,IAAI,CAAC,CAAC,CAAgB,OAAO,CAAC,SAAS,CAAC;aAC/C;YAED,8DAA8D;YAC9D,IAAI,IAAI,CAAC,EAAE,EAAgB,EAAE;gBAC5B,yBAAyB;gBACzB,IAAI,IAAI,CAAC,CAAC,CAAiB,uBAAuB,KAAK,SAAS,EAAE;oBACjE,OAAO,IAAI,CAAC,CAAC,CAAiB,uBAAuB,CAAC;iBACtD;gBAED,gBAAgB;gBAChB,IAAI,IAAI,CAAC,CAAC,CAAsB,MAAM,EAAE;oBACvC,OAAO,IAAI,CAAC,CAAC,CAAY,IAAI,CAAC,CAAC,CAAsB,CAAC;iBACtD;gBAED,eAAe;gBACf,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAoB,QAAQ,CAAC,YAAI,CAAyB,CAAC;aAC1E;YAED,OAAO,IAAI,CAAC,CAAC,CAAY,IAAI,CAAC,CAAC,EAAiB,CAAC,CAAC;QACnD,CAAC;QAEO,KAAK,CAAC,CAAC,CAAoB,OAAiB;YACnD,IAAI,CAAC,IAAI,CAAC,CAAC,CAA+B,uBAAuB,EAAE,EAAE;gBACpE,OAAO;aACP;YAED,IAAI,OAAO,KAAK,SAAS,EAAE;gBAC1B,MAAM,IAAI,CAAC,CAAC,EAAqB,CAAC;gBAClC,OAAO,GAAG,IAAI,CAAC,CAAC,EAAwB,CAAC;aACzC;YAED,IAAI,IAAI,CAAC,kBAAkB,EAAE,KAAK,OAAO,EAAE;gBAAE,OAAO;aAAE;YAEtD,yBAAyB;YACzB,IAAI,CAAC,EAAE,GAAU,OAAO,CAAC;YAEzB,8CAA8C;YAC9C,MAAM,IAAI,CAAC,CAAC,CAAuB,WAAW,CAAC,OAAO,CAAC,CAAC;YAExD,oCAAoC;YACpC,IAAI,CAAC,CAAC,CAAiB,IAAI,CAAC,OAAO,CAAC,CAAC;QACtC,CAAC;QAEO,CAAC,CAAY,IAAW;YAC/B,IAAI,KAAK,GAAG,IAAI,CAAC;YACjB,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;gBACvB,MAAM,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,CAAC,CAAiB,GAAG,CAAC,CAAC;gBAEhD,IAAI,CAAC,OAAO,EAAE;oBACb,KAAK,GAAG,OAAO,CAAC;oBAChB,OAAO,KAAK,CAAC;iBACb;aACD;YAED,OAAO,KAAK,CAAC;QACd,CAAC;QAEO,CAAC,CAAiB,GAAQ;YACjC,kDAAkD;YAClD,IAAI,CAAC,IAAI,CAAC,CAAC,CAA+B,uBAAuB,EAAE,EAAE;gBACpE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;aAC9B;YAED,IAAI,IAAI,CAAC,EAAE,CAAuB,GAAG,CAAC,EAAE;gBACvC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;aAC9B;YAED,IAAI,IAAI,CAAC,EAAE,CAAgB,GAAG,CAAC,EAAE;gBAChC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;aAC9B;YAED,IAAI,WAAW,GAAG,KAAK,CAAC;YACxB,IAAI,SAAS,GAAG,CAAC,CAAC,CAAC;YAEnB,IAAI,SAAS,GAAG,GAAG,CAAC;YAEpB,KAAK,MAAM,SAAS,IAAI,IAAI,CAAC,CAAC,CAAe,YAAY,EAAE;gBAC1D,IAAI,IAAI,CAAC,CAAC,CAAkB,MAAM,CAAC,eAAe,CAAC,GAAG,EAAE,SAAS,CAAC,GAAG,CAAC,EAAE;oBACvE,MAAM,MAAM,GAAG,SAAS,CAAC,GAAG,CAAC,MAAM,CAAC;oBACpC,IAAI,MAAM,CAAC,MAAM,GAAG,SAAS,EAAE;wBAC9B,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC;wBAC1B,WAAW,GAAG,SAAS,CAAC,OAAO,CAAC;wBAChC,SAAS,GAAG,SAAS,CAAC,GAAG,CAAC;qBAC1B;iBACD;aACD;YAED,OAAO,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG,EAAE,SAAS,EAAE,CAAC;QACjD,CAAC;QAEO,KAAK,CAAC,CAAC,CAAc,IAAW,EAAE,OAAgB;YACzD,IAAI,OAAO,GAAG,KAAK,CAAC;YAEpB,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;gBACvB,IAAI,OAAO,EAAE;oBACZ,IAAI,IAAI,CAAC,EAAE,CAAuB,GAAG,CAAC,EAAE;wBACvC,SAAS;qBACT;oBAED,IAAI,IAAI,CAAC,EAAE,CAAgB,GAAG,CAAC,EAAE;wBAChC,SAAS;qBACT;oBAED,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAe,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAkB,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;oBAClI,IAAI,CAAC,SAAS,EAAE;wBACf,IAAI,CAAC,CAAC,CAAe,YAAY,CAAC,IAAI,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;wBAC/D,OAAO,GAAG,IAAI,CAAC;qBACf;iBACD;qBAAM;oBACN,MAAM,cAAc,GAAG,IAAI,CAAC,CAAC,CAAe,YAAY,CAAC,MAAM,CAAC;oBAChE,IAAI,CAAC,CAAC,CAAe,YAAY,GAAG,IAAI,CAAC,CAAC,CAAe,YAAY,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAkB,MAAM,CAAC,OAAO,CAAC,SAAS,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC;oBACvJ,IAAI,cAAc,KAAK,IAAI,CAAC,CAAC,CAAe,YAAY,CAAC,MAAM,EAAE;wBAChE,OAAO,GAAG,IAAI,CAAC;qBACf;iBACD;aACD;YAED,IAAI,OAAO,EAAE;gBACZ,MAAM,IAAI,CAAC,CAAC,EAAc,CAAC;aAC3B;QACF,CAAC;QAEO,EAAE;YACT,IAAI,IAAI,CAAC,CAAC,CAAgB,iBAAiB,EAAE,iCAAyB,EAAE;gBACvE,OAAO,IAAI,CAAC;aACZ;YAED,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAgB,YAAY,EAAE,CAAC;YACvD,IAAI,SAAS,EAAE;gBACd,OAAO,IAAA,eAAG,EAAkB,IAAI,CAAC,CAAC,CAAgB,YAAY,EAAE,CAAC,IAAI,SAAS,CAAC,OAAO,CAAC,MAAM,KAAK,CAAC,CAAC;aACpG;YAED,OAAO,KAAK,CAAC;QACd,CAAC;QAEO,EAAE,CAAuB,GAAQ;YACxC,OAAO,IAAA,sBAAG,EAAe,GAAG,CAAC,IAAI,GAAG,CAAC,MAAM,KAAK,YAAY,CAAC;QAC9D,CAAC;QAEO,EAAE,CAAgB,GAAQ;YACjC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAkB,eAAe,EAAE;gBAC7C,OAAO,KAAK,CAAC;aACb;YAED,IAAI,CAAC,IAAI,CAAC,CAAC,EAAiB;gBAC3B,OAAO,KAAK,CAAC;aACb;YAED,OAAO,CAAC,IAAA,eAAG,EAAc,IAAA,iBAAG,EAAgB,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC,CAAgB,SAAS,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAgB,OAAO,EAAE,SAAS,CAAC;QAC7I,CAAC;QAED,IAAY,EAAE,CAAQ,KAAc;YACnC,IAAI,CAAC,CAAC,GAAY,KAAK,CAAC;YAExB,mCAAmC;YACnC,IAAI,CAAC,KAAK,EAAE;gBACX,IAAI,CAAC,CAAC,CAAiB,0BAA0B,GAAG,KAAK,CAAC;aAC1D;YAED,iCAAiC;YACjC,IAAI,IAAI,CAAC,EAAE,EAAgB,EAAE;gBAC5B,IAAI,CAAC,CAAC,CAAiB,uBAAuB,GAAG,KAAK,CAAC;aACvD;QACF,CAAC;QAED,YAAY;QAEZ,0BAA0B;QAE1B,IAAI,iBAAiB;YACpB,OAAO,IAAI,CAAC,CAAC,CAAyB;QACvC,CAAC;QAED,IAAI,yBAAyB;YAC5B,OAAO,IAAI,CAAC,CAAC,CAAiC;QAC/C,CAAC;QAED,IAAI,0BAA0B;YAC7B,OAAO,IAAI,CAAC,CAAC,CAAiB,0BAA0B,CAAC;QAC1D,CAAC;QAED,IAAI,0BAA0B,CAAC,KAAc;YAC5C,IAAI,CAAC,CAAC,CAAiB,0BAA0B,GAAG,KAAK,CAAC;QAC3D,CAAC;QAED,kBAAkB;YACjB,OAAO,IAAI,CAAC,CAAC,CAAU;QACxB,CAAC;QAED,sBAAsB;YACrB,4DAA4D;YAC5D,IAAI,IAAI,CAAC,CAAC,CAAkB,eAAe,IAAI,IAAI,CAAC,CAAC,IAAmB,IAAI,CAAC,CAAC,CAAgB,OAAO,EAAE,SAAS,KAAK,SAAS,EAAE;gBAC/H,OAAO,IAAI,CAAC;aACZ;YAED,+CAA+C;YAC/C,MAAM,aAAa,GAAG,IAAI,CAAC,CAAC,EAAiB,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAuB,GAAG,CAAC,CAAC,CAAC;YACjG,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC/B,OAAO,IAAI,CAAC;aACZ;YAED,OAAO,KAAK,CAAC;QACd,CAAC;QAED,uBAAuB;YACtB,MAAM,mBAAmB,GAAG,IAAA,eAAG,EAAmB,IAAI,CAAC,CAAC,CAAmB,CAAC;YAE5E,IAAI,CAAC,IAAA,eAAG,EAA+B,mBAAmB,CAAC,EAAE;gBAC5D,OAAO,KAAK,CAAC;aACb;YAED,IAAI,mBAAmB,CAAC,GAAG,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,IAAI,mBAAmB,CAAC,GAAG,CAAC,MAAM,KAAK,iBAAO,CAAC,YAAY,EAAE;gBAC/G,OAAO,KAAK,CAAC;aACb;YAED,MAAM,YAAY,GAAG,IAAI,CAAC,CAAC,CAAkB,MAAM,CAAC,OAAO,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;YACrF,IAAI,IAAI,CAAC,CAAC,CAAkB,MAAM,CAAC,OAAO,CAAC,mBAAmB,CAAC,GAAG,EAAE,YAAY,CAAC,EAAE;gBAClF,OAAO,KAAK,CAAC;aACb;YAED,OAAO,IAAI,CAAC;QACb,CAAC;QAED,KAAK,CAAC,oBAAoB,CAAC,OAAgB;YAC1C,IAAI,IAAI,CAAC,uBAAuB,EAAE,EAAE;gBACnC,MAAM,YAAY,GAAI,IAAA,eAAG,EAAmB,IAAI,CAAC,CAAC,CAAwD,CAAC,GAAG,CAAC;gBAC/G,MAAM,YAAY,GAAG,IAAI,CAAC,CAAC,CAAkB,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;gBAE1E,MAAM,IAAI,CAAC,YAAY,CAAC,CAAC,YAAY,CAAC,EAAE,OAAO,CAAC,CAAC;aACjD;QACF,CAAC;QAED,oBAAoB;YACnB,kGAAkG;YAClG,IAAI,IAAI,CAAC,CAAC,CAAkB,eAAe,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAmB,IAAI,CAAC,CAAC,CAAgB,OAAO,EAAE,SAAS,KAAK,SAAS,CAAC,EAAE;gBAClI,OAAO,KAAK,CAAC;aACb;YAED,kBAAkB;YAClB,IAAI,IAAI,CAAC,EAAE,EAAgB,EAAE;gBAC5B,OAAO,IAAI,CAAC;aACZ;YAED,+CAA+C;YAC/C,MAAM,aAAa,GAAG,IAAI,CAAC,CAAC,EAAiB,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,EAAE,CAAuB,GAAG,CAAC,CAAC,CAAC;YACjG,IAAI,aAAa,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC/B,OAAO,KAAK,CAAC;aACb;YAED,sBAAsB;YACtB,IAAI,CAAC,IAAI,CAAC,kBAAkB,EAAE,EAAE;gBAC/B,OAAO,IAAI,CAAC;aACZ;YAED,qBAAqB;YACrB,mDAAmD;YACnD,MAAM,mBAAmB,GAAG,IAAA,eAAG,EAAmB,IAAI,CAAC,CAAC,CAAmB,CAAC;YAC5E,IAAI,CAAC,IAAA,eAAG,EAA+B,mBAAmB,CAAC,EAAE;gBAC5D,OAAO,KAAK,CAAC;aACb;YAED,2CAA2C;YAC3C,IAAI,mBAAmB,CAAC,GAAG,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,IAAI,mBAAmB,CAAC,GAAG,CAAC,MAAM,KAAK,YAAY,EAAE;gBACvG,OAAO,KAAK,CAAC;aACb;YAED,6DAA6D;YAC7D,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAiB,mBAAmB,CAAC,GAAG,CAAC,CAAC;YAClE,IAAI,CAAC,SAAS,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAkB,MAAM,CAAC,OAAO,CAAC,mBAAmB,CAAC,GAAG,EAAE,SAAS,CAAC,GAAG,CAAC,EAAE;gBAC1G,OAAO,KAAK,CAAC;aACb;YAED,sCAAsC;YACtC,IAAI,IAAI,CAAC,uBAAuB,EAAE,EAAE;gBACnC,MAAM,YAAY,GAAG,IAAI,CAAC,CAAC,CAAkB,MAAM,CAAC,OAAO,CAAC,mBAAmB,CAAC,GAAG,CAAC,CAAC;gBACrF,MAAM,mBAAmB,GAAG,IAAI,CAAC,CAAC,CAAiB,YAAY,CAAC,CAAC;gBACjE,IAAI,mBAAmB,CAAC,OAAO,EAAE;oBAChC,OAAO,KAAK,CAAC;iBACb;aACD;YAED,OAAO,IAAI,CAAC;QACb,CAAC;QAED,KAAK,CAAC,iBAAiB,CAAC,OAAgB;YACvC,kBAAkB;YAClB,IAAI,IAAI,CAAC,EAAE,EAAgB,EAAE;gBAC5B,MAAM,IAAI,CAAC,CAAC,CAAoB,OAAO,CAAC,CAAC;gBACzC,OAAO;aACP;YAED,MAAM,gBAAgB,GAAG,IAAI,CAAC,CAAC,EAAiB,CAAC;YACjD,MAAM,IAAI,CAAC,YAAY,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;QACpD,CAAC;QAED,KAAK,CAAC,eAAe,CAAC,GAAQ;YAC7B,kDAAkD;YAClD,IAAI,CAAC,IAAI,CAAC,CAAC,CAA+B,uBAAuB,EAAE,EAAE;gBACpE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;aAC9B;YAED,6CAA6C;YAC7C,IAAI,IAAI,CAAC,EAAE,CAAgB,GAAG,CAAC,EAAE;gBAChC,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,CAAC;aAC9B;YAED,OAAO,IAAI,CAAC,CAAC,CAAiB,MAAM,IAAI,CAAC,CAAC,CAAe,GAAG,CAAC,CAAC,CAAC;QAChE,CAAC;QAED,KAAK,CAAC,YAAY,CAAC,IAAW,EAAE,OAAgB;YAC/C,IAAI,CAAC,CAAC,CAAc,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAe,GAAG,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;QAC7F,CAAC;QAED,cAAc;YACb,OAAO,IAAI,CAAC,CAAC,CAAe,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAChE,CAAC;QAED,KAAK,CAAC,cAAc,CAAC,IAAW;YAC/B,IAAI,CAAC,CAAC,CAAe,YAAY,GAAG,EAAE,CAAC;YACvC,KAAK,MAAM,GAAG,IAAI,IAAI,EAAE;gBACvB,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,CAAC,CAAe,GAAG,CAAC,CAAC;gBACrD,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAkB,MAAM,CAAC,2BAA2B,CAAC,YAAY,CAAC,CAAC;gBAC1F,IAAI,KAAK,GAAG,KAAK,CAAC;gBAClB,KAAK,MAAM,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAe,YAAY,EAAE;oBACzD,IAAI,IAAI,CAAC,CAAC,CAAkB,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,EAAE,QAAQ,CAAC,EAAE;wBACnE,KAAK,GAAG,IAAI,CAAC;wBACb,MAAM;qBACN;iBACD;gBAED,IAAI,KAAK,EAAE;oBACV,SAAS;iBACT;gBAED,IAAI,CAAC,CAAC,CAAe,YAAY,CAAC,IAAI,CAAC;oBACtC,OAAO,EAAE,IAAI;oBACb,GAAG,EAAE,QAAQ;iBACb,CAAC,CAAC;aACH;YAED,MAAM,IAAI,CAAC,CAAC,EAAc,CAAC;QAC5B,CAAC;QAED,sCAAsC,CAAC,WAAiD;YACvF,OAAO,IAAI,CAAC,CAAC,CAAuB,sCAAsC,CAAC,WAAW,CAAC,CAAC;QACzF,CAAC;KAGD,CAAA;IA3jBY,oBAAI;mBAAJ,IAAI;QA6Bd,WAAA,mBAAG,CAAA;QACH,WAAA,6BAAG,CAAA;QACH,WAAA,aAAG,CAAA;QACH,WAAA,iBAAG,CAAA;QACH,WAAA,wBAAG,CAAA;QACH,WAAA,eAAG,CAAA;QACH,WAAA,oBAAG,CAAA;QACH,WAAA,WAAG,CAAA;OApCO,IAAI,CA2jBhB;IAEM,IAAM,IAAI,GAAV,MAAM,IAA6B,SAAQ,eAAG;QAkBpD,YACwB,CAA0C,EAC/B,CAAqD;YAEvF,KAAK,EAAE,CAAC;YAHgC,MAAC,GAAD,CAAC,CAAwB;YACd,MAAC,GAAD,CAAC,CAAmC;YAXvE,MAAC,GAAqC,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAY,CAAC,CAAC;YAClF,uCAAkC,GAAG,IAAI,CAAC,CAAC,CAAmC,KAAK,CAAC;YAE5E,MAAC,GAAqC,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAgD,CAAC,CAAC;YACtH,uCAAkC,GAAG,IAAI,CAAC,CAAC,CAAmC,KAAK,CAAC;YAE5E,MAAC,GAA8C,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAY,CAAC,CAAC;YAC3F,gDAA2C,GAAG,IAAI,CAAC,CAAC,CAA4C,KAAK,CAAC;QAO/G,CAAC;QAED,oCAAoC;QAEpC,IAAY,CAAC;YACZ,OAAO,IAAI,CAAC,CAAC,CAAoB,QAAQ,CAAC,YAAI,CAA4B,CAAC;QAC5E,CAAC;QAED,IAAY,CAAC,CAAqB,KAAsC;YACvE,IAAI,CAAC,CAAC,CAAoB,WAAW,CAAC,YAAI,EAA6B,KAAK,CAAC,CAAC;QAC/E,CAAC;QAED,KAAK,CAAC,6BAA6B,CAAC,MAAiC,EAAE,YAAsB;YAC5F,IAAI,CAAC,IAAI,CAAC,CAAC,EAA+B;gBACzC,OAAO;aACP;YAED,iCAAiC;YACjC,IAAI,MAAM,2CAAmC,EAAE;gBAC9C,IAAI,CAAC,CAAC,CAA+B,0BAA0B,GAAG,IAAI,CAAC;aACvE;YAED,gBAAgB;YAChB,IAAI,YAAY,EAAE;gBACjB,IAAI,MAAM,2CAAmC,EAAE;oBAC9C,IAAI,CAAC,CAAC,GAAuB,MAAM,CAAC;iBACpC;gBAED,IAAI,MAAM,sDAA8C,EAAE;oBACzD,IAAI,CAAC,CAAC,GAAuB,WAAW,CAAC;iBACzC;aACD;YAED,kBAAkB;YAClB,IAAI,CAAC,CAAC,CAA8B,MAAM,CAAC,CAAC;YAE5C,IAAI,CAAC,CAAC,GAAgC,SAAS,CAAC;YAChD,IAAI,CAAC,CAAC,GAA+B,SAAS,CAAC;QAChD,CAAC;QAED,KAAK,CAAC,qBAAqB,CAAC,IAAW;YACtC,kDAAkD;YAClD,IAAI,CAAC,IAAI,CAAC,CAAC,CAA+B,kBAAkB,EAAE,EAAE;gBAC/D,8CAAsC;aACtC;YAED,MAAM,kBAAkB,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAA+B,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YAEzH,gDAAgD;YAChD,IAAI,kBAAkB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE;gBAC3E,8CAAsC;aACtC;YAED,yCAAyC;YACzC,IAAI,IAAI,CAAC,CAAC,KAAyB,QAAQ,EAAE;gBAC5C,IAAI,IAAI,CAAC,CAAC,KAAyB,WAAW,EAAE;oBAC/C,yDAAiD;iBACjD;gBAED,IAAI,IAAI,CAAC,CAAC,KAAyB,MAAM,EAAE;oBAC1C,8CAAsC;iBACtC;aACD;YAED,wDAAwD;YACxD,IAAI,IAAI,CAAC,CAAC,CAA+B,0BAA0B,EAAE;gBACpE,8CAAsC;aACtC;YAED,0BAA0B;YAC1B,IAAI,CAAC,IAAI,CAAC,CAAC,EAA8B;gBACxC,IAAI,CAAC,CAAC,GAA+B,IAAI,OAAO,CAA4B,OAAO,CAAC,EAAE;oBACrF,IAAI,CAAC,CAAC,GAAgC,OAAO,CAAC;gBAC/C,CAAC,CAAC,CAAC;aACH;iBAAM;gBACN,OAAO,IAAI,CAAC,CAAC,CAA6B;aAC1C;YAED,IAAI,CAAC,CAAC,CAAmC,IAAI,EAAE,CAAC;YAChD,OAAO,IAAI,CAAC,CAAC,CAA6B;QAC3C,CAAC;QAED,YAAY;QAEZ,iCAAiC;QAEzB,CAAC,CAA4B,OAAiB;YACrD,IAAI,IAAI,CAAC,CAAC,EAA+B;gBACxC,IAAI,CAAC,CAAC,CAA8B,OAAO,IAAI,IAAI,CAAC,CAAC,CAA+B,kBAAkB,EAAE,CAAC,CAAC;gBAE1G,IAAI,CAAC,CAAC,GAAgC,SAAS,CAAC;gBAChD,IAAI,CAAC,CAAC,GAA+B,SAAS,CAAC;aAC/C;QACF,CAAC;QAED,2BAA2B;YAC1B,IAAI,IAAI,CAAC,CAAC,EAA+B;gBACxC,IAAI,CAAC,CAAC,CAA8B,SAAS,CAAC,CAAC;gBAE/C,IAAI,CAAC,CAAC,GAAgC,SAAS,CAAC;gBAChD,IAAI,CAAC,CAAC,GAA+B,SAAS,CAAC;aAC/C;QACF,CAAC;QAED,KAAK,CAAC,6BAA6B,CAAC,OAAiB;YACpD,IAAI,OAAO,KAAK,SAAS,IAAI,OAAO,KAAK,IAAI,CAAC,CAAC,CAA+B,kBAAkB,EAAE,EAAE;gBACnG,IAAI,CAAC,CAAC,CAA4B,OAAO,CAAC,CAAC;gBAC3C,OAAO;aACP;YAED,sFAAsF;YACtF,aAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAA+B,gBAAgB,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAA4B,OAAO,CAAC,CAAC,CAAC;YAEzH,6CAA6C;YAC7C,MAAM,IAAI,CAAC,CAAC,CAA+B,iBAAiB,CAAC,OAAO,CAAC,CAAC;QACvE,CAAC;QAED,KAAK,CAAC,qBAAqB,CAAC,OAAsC;YACjE,oBAAoB;YACpB,IAAI,IAAI,CAAC,CAAC,CAA+B,kBAAkB,EAAE,EAAE;gBAC9D,OAAO,IAAI,CAAC,CAAC,CAA+B,kBAAkB,EAAE,CAAC;aACjE;YAED,gBAAgB;YAChB,IAAI,CAAC,IAAI,CAAC,CAAC,EAA8B;gBACxC,iBAAiB;gBACjB,IAAI,CAAC,CAAC,GAA+B,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;oBAC1D,IAAI,CAAC,CAAC,GAAgC,OAAO,CAAC;gBAC/C,CAAC,CAAC,CAAC;aACH;iBAAM;gBACN,0BAA0B;gBAC1B,OAAO,IAAI,CAAC,CAAC,CAA6B;aAC1C;YAED,IAAI,CAAC,CAAC,CAAmC,IAAI,CAAC,OAAO,CAAC,CAAC;YACvD,OAAO,IAAI,CAAC,CAAC,CAA6B;QAC3C,CAAC;QAED,8BAA8B;YAC7B,IAAI,CAAC,IAAI,CAAC,CAAC,EAA8B;gBACxC,iBAAiB;gBACjB,IAAI,CAAC,CAAC,GAA+B,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;oBAC1D,IAAI,CAAC,CAAC,GAAgC,OAAO,CAAC;gBAC/C,CAAC,CAAC,CAAC;aACH;YAED,IAAI,CAAC,CAAC,CAA4C,IAAI,EAAE,CAAC;QAC1D,CAAC;KAGD,CAAA;IA7KY,oBAAI;mBAAJ,IAAI;QAmBd,WAAA,mBAAG,CAAA;QACH,WAAA,oBAAG,CAAA;OApBO,IAAI,CA6KhB;IAED,MAAM,+BAAgC,SAAQ,eAAG;QAAjD;;YAEkB,MAAC,GAAc,IAAI,gBAAG,EAA+C,CAAC;QAgBxF,CAAC;QAdA,sCAAsC,CAAC,WAAiD;YACvF,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAY,IAAI,CAAC,WAAW,CAAC,CAAC;YACnD,OAAO,IAAA,eAAG,EAAU,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC;QACrC,CAAC;QAED,KAAK,CAAC,WAAW,CAAC,OAAgB;YACjC,KAAK,MAAM,WAAW,IAAI,IAAI,CAAC,CAAC,EAAa;gBAC5C,MAAM,WAAW,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;aACvC;QACF,CAAC;QAEQ,OAAO;YACf,IAAI,CAAC,CAAC,CAAY,KAAK,EAAE,CAAC;QAC3B,CAAC;KACD;IAED,MAAM,qBAAqB;QAQ1B,YAAY,cAAoB;YAHf,MAAC,GAAgC,4BAA4B,CAAC;YAC9D,MAAC,GAA6B,yBAAyB,CAAC;YAGxE,IAAI,cAAc,EAAE;gBACnB,IAAI,CAAC,CAAC,GAAU,IAAI,aAAG,CAAK,gBAAgB,EAAE,cAAc,CAAC,CAAC;gBAC9D,IAAI,CAAC,CAAC,GAAgB,IAAI,CAAC,CAAC,CAAQ,UAAU,+DAA+C,CAAC;aAC9F;iBAAM;gBACN,IAAI,CAAC,CAAC,GAAgB,EAAE,CAAC;aACzB;QACF,CAAC;QAED,IAAI,0BAA0B;YAC7B,OAAO,IAAI,CAAC,CAAC,CAAc,IAAI,CAAC,CAAC,CAA8B,IAAI,KAAK,CAAC;QAC1E,CAAC;QAED,IAAI,0BAA0B,CAAC,KAAc;YAC5C,IAAI,CAAC,CAAC,CAAc,IAAI,CAAC,CAAC,CAA8B,GAAG,KAAK,CAAC;YAEjE,IAAI,CAAC,CAAC,EAAS,WAAW,EAAE,CAAC;QAC9B,CAAC;QAED,IAAI,uBAAuB;YAC1B,OAAO,IAAI,CAAC,CAAC,CAAc,IAAI,CAAC,CAAC,CAA2B,CAAC;QAC9D,CAAC;QAED,IAAI,uBAAuB,CAAC,KAA0B;YACrD,IAAI,CAAC,CAAC,CAAc,IAAI,CAAC,CAAC,CAA2B,GAAG,KAAK,CAAC;YAE9D,IAAI,CAAC,CAAC,EAAS,WAAW,EAAE,CAAC;QAC9B,CAAC;KACD;IAED,IAAA,gBAAG,EAAe,oBAAG,EAA4B,IAAI,oCAAoD,CAAC","file":"workspaceTrust.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, DisposableStore, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { LinkedList } from 'vs/base/common/linkedList';\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { IPath } from 'vs/platform/window/common/window';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IRemoteAuthorityResolverService, ResolverResult } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { getRemoteAuthority } from 'vs/platform/remote/common/remoteHosts';\nimport { isVirtualResource } from 'vs/platform/workspace/common/virtualWorkspace';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { ISingleFolderWorkspaceIdentifier, isSavedWorkspace, isSingleFolderWorkspaceIdentifier, isTemporaryWorkspace, IWorkspace, IWorkspaceContextService, IWorkspaceFolder, toWorkspaceIdentifier, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { WorkspaceTrustRequestOptions, IWorkspaceTrustManagementService, IWorkspaceTrustInfo, IWorkspaceTrustUriInfo, IWorkspaceTrustRequestService, IWorkspaceTrustTransitionParticipant, WorkspaceTrustUriResponse, IWorkspaceTrustEnablementService } from 'vs/platform/workspace/common/workspaceTrust';\nimport { Memento, MementoObject } from 'vs/workbench/common/memento';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { isEqualAuthority } from 'vs/base/common/resources';\nimport { isWeb } from 'vs/base/common/platform';\nimport { IFileService } from 'vs/platform/files/common/files';\n\nexport const WORKSPACE_TRUST_ENABLED = 'security.workspace.trust.enabled';\nexport const WORKSPACE_TRUST_STARTUP_PROMPT = 'security.workspace.trust.startupPrompt';\nexport const WORKSPACE_TRUST_BANNER = 'security.workspace.trust.banner';\nexport const WORKSPACE_TRUST_UNTRUSTED_FILES = 'security.workspace.trust.untrustedFiles';\nexport const WORKSPACE_TRUST_EMPTY_WINDOW = 'security.workspace.trust.emptyWindow';\nexport const WORKSPACE_TRUST_EXTENSION_SUPPORT = 'extensions.supportUntrustedWorkspaces';\nexport const WORKSPACE_TRUST_STORAGE_KEY = 'content.trust.model.key';\n\nexport class CanonicalWorkspace implements IWorkspace {\n\tconstructor(\n\t\tprivate readonly originalWorkspace: IWorkspace,\n\t\tprivate readonly canonicalFolderUris: URI[],\n\t\tprivate readonly canonicalConfiguration: URI | null | undefined\n\t) { }\n\n\n\tget folders(): IWorkspaceFolder[] {\n\t\treturn this.originalWorkspace.folders.map((folder, index) => {\n\t\t\treturn {\n\t\t\t\tindex: folder.index,\n\t\t\t\tname: folder.name,\n\t\t\t\ttoResource: folder.toResource,\n\t\t\t\turi: this.canonicalFolderUris[index]\n\t\t\t};\n\t\t});\n\t}\n\n\tget transient(): boolean | undefined {\n\t\treturn this.originalWorkspace.transient;\n\t}\n\n\tget configuration(): URI | null | undefined {\n\t\treturn this.canonicalConfiguration ?? this.originalWorkspace.configuration;\n\t}\n\n\tget id(): string {\n\t\treturn this.originalWorkspace.id;\n\t}\n}\n\nexport class WorkspaceTrustEnablementService extends Disposable implements IWorkspaceTrustEnablementService {\n\n\t_serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService\n\t) {\n\t\tsuper();\n\t}\n\n\tisWorkspaceTrustEnabled(): boolean {\n\t\tif (this.environmentService.disableWorkspaceTrust) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn !!this.configurationService.getValue(WORKSPACE_TRUST_ENABLED);\n\t}\n}\n\nexport class WorkspaceTrustManagementService extends Disposable implements IWorkspaceTrustManagementService {\n\n\t_serviceBrand: undefined;\n\n\tprivate readonly storageKey = WORKSPACE_TRUST_STORAGE_KEY;\n\n\tprivate _workspaceResolvedPromise: Promise<void>;\n\tprivate _workspaceResolvedPromiseResolve!: () => void;\n\tprivate _workspaceTrustInitializedPromise: Promise<void>;\n\tprivate _workspaceTrustInitializedPromiseResolve!: () => void;\n\n\tprivate readonly _onDidChangeTrust = this._register(new Emitter<boolean>());\n\treadonly onDidChangeTrust = this._onDidChangeTrust.event;\n\n\tprivate readonly _onDidChangeTrustedFolders = this._register(new Emitter<void>());\n\treadonly onDidChangeTrustedFolders = this._onDidChangeTrustedFolders.event;\n\n\tprivate _canonicalStartupFiles: URI[] = [];\n\tprivate _canonicalWorkspace: IWorkspace;\n\tprivate _canonicalUrisResolved: boolean;\n\n\tprivate _isTrusted: boolean;\n\tprivate _trustStateInfo: IWorkspaceTrustInfo;\n\tprivate _remoteAuthority: ResolverResult | undefined;\n\n\tprivate readonly _storedTrustState: WorkspaceTrustMemento;\n\tprivate readonly _trustTransitionManager: WorkspaceTrustTransitionManager;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IRemoteAuthorityResolverService private readonly remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IWorkspaceContextService private readonly workspaceService: IWorkspaceContextService,\n\t\t@IWorkspaceTrustEnablementService private readonly workspaceTrustEnablementService: IWorkspaceTrustEnablementService,\n\t\t@IFileService private readonly fileService: IFileService\n\t) {\n\t\tsuper();\n\n\t\tthis._canonicalUrisResolved = false;\n\t\tthis._canonicalWorkspace = this.workspaceService.getWorkspace();\n\n\t\tthis._workspaceResolvedPromise = new Promise((resolve) => {\n\t\t\tthis._workspaceResolvedPromiseResolve = resolve;\n\t\t});\n\t\tthis._workspaceTrustInitializedPromise = new Promise((resolve) => {\n\t\t\tthis._workspaceTrustInitializedPromiseResolve = resolve;\n\t\t});\n\n\t\tthis._storedTrustState = new WorkspaceTrustMemento(isWeb && this.isEmptyWorkspace() ? undefined : this.storageService);\n\t\tthis._trustTransitionManager = this._register(new WorkspaceTrustTransitionManager());\n\n\t\tthis._trustStateInfo = this.loadTrustInfo();\n\t\tthis._isTrusted = this.calculateWorkspaceTrust();\n\n\t\tthis.initializeWorkspaceTrust();\n\t\tthis.registerListeners();\n\t}\n\n\t//#region initialize\n\n\tprivate initializeWorkspaceTrust(): void {\n\t\t// Resolve canonical Uris\n\t\tthis.resolveCanonicalUris()\n\t\t\t.then(async () => {\n\t\t\t\tthis._canonicalUrisResolved = true;\n\t\t\t\tawait this.updateWorkspaceTrust();\n\t\t\t})\n\t\t\t.finally(() => {\n\t\t\t\tthis._workspaceResolvedPromiseResolve();\n\n\t\t\t\tif (!this.environmentService.remoteAuthority) {\n\t\t\t\t\tthis._workspaceTrustInitializedPromiseResolve();\n\t\t\t\t}\n\t\t\t});\n\n\t\t// Remote - resolve remote authority\n\t\tif (this.environmentService.remoteAuthority) {\n\t\t\tthis.remoteAuthorityResolverService.resolveAuthority(this.environmentService.remoteAuthority)\n\t\t\t\t.then(async result => {\n\t\t\t\t\tthis._remoteAuthority = result;\n\t\t\t\t\tawait this.fileService.activateProvider(Schemas.vscodeRemote);\n\t\t\t\t\tawait this.updateWorkspaceTrust();\n\t\t\t\t})\n\t\t\t\t.finally(() => {\n\t\t\t\t\tthis._workspaceTrustInitializedPromiseResolve();\n\t\t\t\t});\n\t\t}\n\n\t\t// Empty workspace - save initial state to memento\n\t\tif (this.isEmptyWorkspace()) {\n\t\t\tthis._workspaceTrustInitializedPromise.then(() => {\n\t\t\t\tif (this._storedTrustState.isEmptyWorkspaceTrusted === undefined) {\n\t\t\t\t\tthis._storedTrustState.isEmptyWorkspaceTrusted = this.isWorkspaceTrusted();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region private interface\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.workspaceService.onDidChangeWorkspaceFolders(async () => await this.updateWorkspaceTrust()));\n\t\tthis._register(this.storageService.onDidChangeValue(StorageScope.APPLICATION, this.storageKey, this._register(new DisposableStore()))(async () => {\n\t\t\t/* This will only execute if storage was changed by a user action in a separate window */\n\t\t\tif (JSON.stringify(this._trustStateInfo) !== JSON.stringify(this.loadTrustInfo())) {\n\t\t\t\tthis._trustStateInfo = this.loadTrustInfo();\n\t\t\t\tthis._onDidChangeTrustedFolders.fire();\n\n\t\t\t\tawait this.updateWorkspaceTrust();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate async getCanonicalUri(uri: URI): Promise<URI> {\n\t\tlet canonicalUri = uri;\n\t\tif (this.environmentService.remoteAuthority && uri.scheme === Schemas.vscodeRemote) {\n\t\t\tcanonicalUri = await this.remoteAuthorityResolverService.getCanonicalURI(uri);\n\t\t} else if (uri.scheme === 'vscode-vfs') {\n\t\t\tconst index = uri.authority.indexOf('+');\n\t\t\tif (index !== -1) {\n\t\t\t\tcanonicalUri = uri.with({ authority: uri.authority.substr(0, index) });\n\t\t\t}\n\t\t}\n\n\t\t// ignore query and fragent section of uris always\n\t\treturn canonicalUri.with({ query: null, fragment: null });\n\t}\n\n\tprivate async resolveCanonicalUris(): Promise<void> {\n\t\t// Open editors\n\t\tconst filesToOpen: IPath[] = [];\n\t\tif (this.environmentService.filesToOpenOrCreate) {\n\t\t\tfilesToOpen.push(...this.environmentService.filesToOpenOrCreate);\n\t\t}\n\n\t\tif (this.environmentService.filesToDiff) {\n\t\t\tfilesToOpen.push(...this.environmentService.filesToDiff);\n\t\t}\n\n\t\tif (this.environmentService.filesToMerge) {\n\t\t\tfilesToOpen.push(...this.environmentService.filesToMerge);\n\t\t}\n\n\t\tif (filesToOpen.length) {\n\t\t\tconst filesToOpenOrCreateUris = filesToOpen.filter(f => !!f.fileUri).map(f => f.fileUri!);\n\t\t\tconst canonicalFilesToOpen = await Promise.all(filesToOpenOrCreateUris.map(uri => this.getCanonicalUri(uri)));\n\n\t\t\tthis._canonicalStartupFiles.push(...canonicalFilesToOpen.filter(uri => this._canonicalStartupFiles.every(u => !this.uriIdentityService.extUri.isEqual(uri, u))));\n\t\t}\n\n\t\t// Workspace\n\t\tconst workspaceUris = this.workspaceService.getWorkspace().folders.map(f => f.uri);\n\t\tconst canonicalWorkspaceFolders = await Promise.all(workspaceUris.map(uri => this.getCanonicalUri(uri)));\n\n\t\tlet canonicalWorkspaceConfiguration = this.workspaceService.getWorkspace().configuration;\n\t\tif (canonicalWorkspaceConfiguration && isSavedWorkspace(canonicalWorkspaceConfiguration, this.environmentService)) {\n\t\t\tcanonicalWorkspaceConfiguration = await this.getCanonicalUri(canonicalWorkspaceConfiguration);\n\t\t}\n\n\t\tthis._canonicalWorkspace = new CanonicalWorkspace(this.workspaceService.getWorkspace(), canonicalWorkspaceFolders, canonicalWorkspaceConfiguration);\n\t}\n\n\tprivate loadTrustInfo(): IWorkspaceTrustInfo {\n\t\tconst infoAsString = this.storageService.get(this.storageKey, StorageScope.APPLICATION);\n\n\t\tlet result: IWorkspaceTrustInfo | undefined;\n\t\ttry {\n\t\t\tif (infoAsString) {\n\t\t\t\tresult = JSON.parse(infoAsString);\n\t\t\t}\n\t\t} catch { }\n\n\t\tif (!result) {\n\t\t\tresult = {\n\t\t\t\turiTrustInfo: []\n\t\t\t};\n\t\t}\n\n\t\tif (!result.uriTrustInfo) {\n\t\t\tresult.uriTrustInfo = [];\n\t\t}\n\n\t\tresult.uriTrustInfo = result.uriTrustInfo.map(info => { return { uri: URI.revive(info.uri), trusted: info.trusted }; });\n\t\tresult.uriTrustInfo = result.uriTrustInfo.filter(info => info.trusted);\n\n\t\treturn result;\n\t}\n\n\tprivate async saveTrustInfo(): Promise<void> {\n\t\tthis.storageService.store(this.storageKey, JSON.stringify(this._trustStateInfo), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\tthis._onDidChangeTrustedFolders.fire();\n\n\t\tawait this.updateWorkspaceTrust();\n\t}\n\n\tprivate getWorkspaceUris(): URI[] {\n\t\tconst workspaceUris = this._canonicalWorkspace.folders.map(f => f.uri);\n\t\tconst workspaceConfiguration = this._canonicalWorkspace.configuration;\n\t\tif (workspaceConfiguration && isSavedWorkspace(workspaceConfiguration, this.environmentService)) {\n\t\t\tworkspaceUris.push(workspaceConfiguration);\n\t\t}\n\n\t\treturn workspaceUris;\n\t}\n\n\tprivate calculateWorkspaceTrust(): boolean {\n\t\t// Feature is disabled\n\t\tif (!this.workspaceTrustEnablementService.isWorkspaceTrustEnabled()) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Canonical Uris not yet resolved\n\t\tif (!this._canonicalUrisResolved) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remote - resolver explicitly sets workspace trust to TRUE\n\t\tif (this.environmentService.remoteAuthority && this._remoteAuthority?.options?.isTrusted) {\n\t\t\treturn this._remoteAuthority.options.isTrusted;\n\t\t}\n\n\t\t// Empty workspace - use memento, open ediors, or user setting\n\t\tif (this.isEmptyWorkspace()) {\n\t\t\t// Use memento if present\n\t\t\tif (this._storedTrustState.isEmptyWorkspaceTrusted !== undefined) {\n\t\t\t\treturn this._storedTrustState.isEmptyWorkspaceTrusted;\n\t\t\t}\n\n\t\t\t// Startup files\n\t\t\tif (this._canonicalStartupFiles.length) {\n\t\t\t\treturn this.getUrisTrust(this._canonicalStartupFiles);\n\t\t\t}\n\n\t\t\t// User setting\n\t\t\treturn !!this.configurationService.getValue(WORKSPACE_TRUST_EMPTY_WINDOW);\n\t\t}\n\n\t\treturn this.getUrisTrust(this.getWorkspaceUris());\n\t}\n\n\tprivate async updateWorkspaceTrust(trusted?: boolean): Promise<void> {\n\t\tif (!this.workspaceTrustEnablementService.isWorkspaceTrustEnabled()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (trusted === undefined) {\n\t\t\tawait this.resolveCanonicalUris();\n\t\t\ttrusted = this.calculateWorkspaceTrust();\n\t\t}\n\n\t\tif (this.isWorkspaceTrusted() === trusted) { return; }\n\n\t\t// Update workspace trust\n\t\tthis.isTrusted = trusted;\n\n\t\t// Run workspace trust transition participants\n\t\tawait this._trustTransitionManager.participate(trusted);\n\n\t\t// Fire workspace trust change event\n\t\tthis._onDidChangeTrust.fire(trusted);\n\t}\n\n\tprivate getUrisTrust(uris: URI[]): boolean {\n\t\tlet state = true;\n\t\tfor (const uri of uris) {\n\t\t\tconst { trusted } = this.doGetUriTrustInfo(uri);\n\n\t\t\tif (!trusted) {\n\t\t\t\tstate = trusted;\n\t\t\t\treturn state;\n\t\t\t}\n\t\t}\n\n\t\treturn state;\n\t}\n\n\tprivate doGetUriTrustInfo(uri: URI): IWorkspaceTrustUriInfo {\n\t\t// Return trusted when workspace trust is disabled\n\t\tif (!this.workspaceTrustEnablementService.isWorkspaceTrustEnabled()) {\n\t\t\treturn { trusted: true, uri };\n\t\t}\n\n\t\tif (this.isTrustedVirtualResource(uri)) {\n\t\t\treturn { trusted: true, uri };\n\t\t}\n\n\t\tif (this.isTrustedByRemote(uri)) {\n\t\t\treturn { trusted: true, uri };\n\t\t}\n\n\t\tlet resultState = false;\n\t\tlet maxLength = -1;\n\n\t\tlet resultUri = uri;\n\n\t\tfor (const trustInfo of this._trustStateInfo.uriTrustInfo) {\n\t\t\tif (this.uriIdentityService.extUri.isEqualOrParent(uri, trustInfo.uri)) {\n\t\t\t\tconst fsPath = trustInfo.uri.fsPath;\n\t\t\t\tif (fsPath.length > maxLength) {\n\t\t\t\t\tmaxLength = fsPath.length;\n\t\t\t\t\tresultState = trustInfo.trusted;\n\t\t\t\t\tresultUri = trustInfo.uri;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn { trusted: resultState, uri: resultUri };\n\t}\n\n\tprivate async doSetUrisTrust(uris: URI[], trusted: boolean): Promise<void> {\n\t\tlet changed = false;\n\n\t\tfor (const uri of uris) {\n\t\t\tif (trusted) {\n\t\t\t\tif (this.isTrustedVirtualResource(uri)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (this.isTrustedByRemote(uri)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst foundItem = this._trustStateInfo.uriTrustInfo.find(trustInfo => this.uriIdentityService.extUri.isEqual(trustInfo.uri, uri));\n\t\t\t\tif (!foundItem) {\n\t\t\t\t\tthis._trustStateInfo.uriTrustInfo.push({ uri, trusted: true });\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst previousLength = this._trustStateInfo.uriTrustInfo.length;\n\t\t\t\tthis._trustStateInfo.uriTrustInfo = this._trustStateInfo.uriTrustInfo.filter(trustInfo => !this.uriIdentityService.extUri.isEqual(trustInfo.uri, uri));\n\t\t\t\tif (previousLength !== this._trustStateInfo.uriTrustInfo.length) {\n\t\t\t\t\tchanged = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (changed) {\n\t\t\tawait this.saveTrustInfo();\n\t\t}\n\t}\n\n\tprivate isEmptyWorkspace(): boolean {\n\t\tif (this.workspaceService.getWorkbenchState() === WorkbenchState.EMPTY) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst workspace = this.workspaceService.getWorkspace();\n\t\tif (workspace) {\n\t\t\treturn isTemporaryWorkspace(this.workspaceService.getWorkspace()) && workspace.folders.length === 0;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tprivate isTrustedVirtualResource(uri: URI): boolean {\n\t\treturn isVirtualResource(uri) && uri.scheme !== 'vscode-vfs';\n\t}\n\n\tprivate isTrustedByRemote(uri: URI): boolean {\n\t\tif (!this.environmentService.remoteAuthority) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!this._remoteAuthority) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn (isEqualAuthority(getRemoteAuthority(uri), this._remoteAuthority.authority.authority)) && !!this._remoteAuthority.options?.isTrusted;\n\t}\n\n\tprivate set isTrusted(value: boolean) {\n\t\tthis._isTrusted = value;\n\n\t\t// Reset acceptsOutOfWorkspaceFiles\n\t\tif (!value) {\n\t\t\tthis._storedTrustState.acceptsOutOfWorkspaceFiles = false;\n\t\t}\n\n\t\t// Empty workspace - save memento\n\t\tif (this.isEmptyWorkspace()) {\n\t\t\tthis._storedTrustState.isEmptyWorkspaceTrusted = value;\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region public interface\n\n\tget workspaceResolved(): Promise<void> {\n\t\treturn this._workspaceResolvedPromise;\n\t}\n\n\tget workspaceTrustInitialized(): Promise<void> {\n\t\treturn this._workspaceTrustInitializedPromise;\n\t}\n\n\tget acceptsOutOfWorkspaceFiles(): boolean {\n\t\treturn this._storedTrustState.acceptsOutOfWorkspaceFiles;\n\t}\n\n\tset acceptsOutOfWorkspaceFiles(value: boolean) {\n\t\tthis._storedTrustState.acceptsOutOfWorkspaceFiles = value;\n\t}\n\n\tisWorkspaceTrusted(): boolean {\n\t\treturn this._isTrusted;\n\t}\n\n\tisWorkspaceTrustForced(): boolean {\n\t\t// Remote - remote authority explicitly sets workspace trust\n\t\tif (this.environmentService.remoteAuthority && this._remoteAuthority && this._remoteAuthority.options?.isTrusted !== undefined) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// All workspace uris are trusted automatically\n\t\tconst workspaceUris = this.getWorkspaceUris().filter(uri => !this.isTrustedVirtualResource(uri));\n\t\tif (workspaceUris.length === 0) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tcanSetParentFolderTrust(): boolean {\n\t\tconst workspaceIdentifier = toWorkspaceIdentifier(this._canonicalWorkspace);\n\n\t\tif (!isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (workspaceIdentifier.uri.scheme !== Schemas.file && workspaceIdentifier.uri.scheme !== Schemas.vscodeRemote) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst parentFolder = this.uriIdentityService.extUri.dirname(workspaceIdentifier.uri);\n\t\tif (this.uriIdentityService.extUri.isEqual(workspaceIdentifier.uri, parentFolder)) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync setParentFolderTrust(trusted: boolean): Promise<void> {\n\t\tif (this.canSetParentFolderTrust()) {\n\t\t\tconst workspaceUri = (toWorkspaceIdentifier(this._canonicalWorkspace) as ISingleFolderWorkspaceIdentifier).uri;\n\t\t\tconst parentFolder = this.uriIdentityService.extUri.dirname(workspaceUri);\n\n\t\t\tawait this.setUrisTrust([parentFolder], trusted);\n\t\t}\n\t}\n\n\tcanSetWorkspaceTrust(): boolean {\n\t\t// Remote - remote authority not yet resolved, or remote authority explicitly sets workspace trust\n\t\tif (this.environmentService.remoteAuthority && (!this._remoteAuthority || this._remoteAuthority.options?.isTrusted !== undefined)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Empty workspace\n\t\tif (this.isEmptyWorkspace()) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// All workspace uris are trusted automatically\n\t\tconst workspaceUris = this.getWorkspaceUris().filter(uri => !this.isTrustedVirtualResource(uri));\n\t\tif (workspaceUris.length === 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Untrusted workspace\n\t\tif (!this.isWorkspaceTrusted()) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Trusted workspaces\n\t\t// Can only untrusted in the single folder scenario\n\t\tconst workspaceIdentifier = toWorkspaceIdentifier(this._canonicalWorkspace);\n\t\tif (!isSingleFolderWorkspaceIdentifier(workspaceIdentifier)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Can only be untrusted in certain schemes\n\t\tif (workspaceIdentifier.uri.scheme !== Schemas.file && workspaceIdentifier.uri.scheme !== 'vscode-vfs') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If the current folder isn't trusted directly, return false\n\t\tconst trustInfo = this.doGetUriTrustInfo(workspaceIdentifier.uri);\n\t\tif (!trustInfo.trusted || !this.uriIdentityService.extUri.isEqual(workspaceIdentifier.uri, trustInfo.uri)) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Check if the parent is also trusted\n\t\tif (this.canSetParentFolderTrust()) {\n\t\t\tconst parentFolder = this.uriIdentityService.extUri.dirname(workspaceIdentifier.uri);\n\t\t\tconst parentPathTrustInfo = this.doGetUriTrustInfo(parentFolder);\n\t\t\tif (parentPathTrustInfo.trusted) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync setWorkspaceTrust(trusted: boolean): Promise<void> {\n\t\t// Empty workspace\n\t\tif (this.isEmptyWorkspace()) {\n\t\t\tawait this.updateWorkspaceTrust(trusted);\n\t\t\treturn;\n\t\t}\n\n\t\tconst workspaceFolders = this.getWorkspaceUris();\n\t\tawait this.setUrisTrust(workspaceFolders, trusted);\n\t}\n\n\tasync getUriTrustInfo(uri: URI): Promise<IWorkspaceTrustUriInfo> {\n\t\t// Return trusted when workspace trust is disabled\n\t\tif (!this.workspaceTrustEnablementService.isWorkspaceTrustEnabled()) {\n\t\t\treturn { trusted: true, uri };\n\t\t}\n\n\t\t// Uri is trusted automatically by the remote\n\t\tif (this.isTrustedByRemote(uri)) {\n\t\t\treturn { trusted: true, uri };\n\t\t}\n\n\t\treturn this.doGetUriTrustInfo(await this.getCanonicalUri(uri));\n\t}\n\n\tasync setUrisTrust(uris: URI[], trusted: boolean): Promise<void> {\n\t\tthis.doSetUrisTrust(await Promise.all(uris.map(uri => this.getCanonicalUri(uri))), trusted);\n\t}\n\n\tgetTrustedUris(): URI[] {\n\t\treturn this._trustStateInfo.uriTrustInfo.map(info => info.uri);\n\t}\n\n\tasync setTrustedUris(uris: URI[]): Promise<void> {\n\t\tthis._trustStateInfo.uriTrustInfo = [];\n\t\tfor (const uri of uris) {\n\t\t\tconst canonicalUri = await this.getCanonicalUri(uri);\n\t\t\tconst cleanUri = this.uriIdentityService.extUri.removeTrailingPathSeparator(canonicalUri);\n\t\t\tlet added = false;\n\t\t\tfor (const addedUri of this._trustStateInfo.uriTrustInfo) {\n\t\t\t\tif (this.uriIdentityService.extUri.isEqual(addedUri.uri, cleanUri)) {\n\t\t\t\t\tadded = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (added) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tthis._trustStateInfo.uriTrustInfo.push({\n\t\t\t\ttrusted: true,\n\t\t\t\turi: cleanUri\n\t\t\t});\n\t\t}\n\n\t\tawait this.saveTrustInfo();\n\t}\n\n\taddWorkspaceTrustTransitionParticipant(participant: IWorkspaceTrustTransitionParticipant): IDisposable {\n\t\treturn this._trustTransitionManager.addWorkspaceTrustTransitionParticipant(participant);\n\t}\n\n\t//#endregion\n}\n\nexport class WorkspaceTrustRequestService extends Disposable implements IWorkspaceTrustRequestService {\n\t_serviceBrand: undefined;\n\n\tprivate _openFilesTrustRequestPromise?: Promise<WorkspaceTrustUriResponse>;\n\tprivate _openFilesTrustRequestResolver?: (response: WorkspaceTrustUriResponse) => void;\n\n\tprivate _workspaceTrustRequestPromise?: Promise<boolean | undefined>;\n\tprivate _workspaceTrustRequestResolver?: (trusted: boolean | undefined) => void;\n\n\tprivate readonly _onDidInitiateOpenFilesTrustRequest = this._register(new Emitter<void>());\n\treadonly onDidInitiateOpenFilesTrustRequest = this._onDidInitiateOpenFilesTrustRequest.event;\n\n\tprivate readonly _onDidInitiateWorkspaceTrustRequest = this._register(new Emitter<WorkspaceTrustRequestOptions | undefined>());\n\treadonly onDidInitiateWorkspaceTrustRequest = this._onDidInitiateWorkspaceTrustRequest.event;\n\n\tprivate readonly _onDidInitiateWorkspaceTrustRequestOnStartup = this._register(new Emitter<void>());\n\treadonly onDidInitiateWorkspaceTrustRequestOnStartup = this._onDidInitiateWorkspaceTrustRequestOnStartup.event;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IWorkspaceTrustManagementService private readonly workspaceTrustManagementService: IWorkspaceTrustManagementService\n\t) {\n\t\tsuper();\n\t}\n\n\t//#region Open file(s) trust request\n\n\tprivate get untrustedFilesSetting(): 'prompt' | 'open' | 'newWindow' {\n\t\treturn this.configurationService.getValue(WORKSPACE_TRUST_UNTRUSTED_FILES);\n\t}\n\n\tprivate set untrustedFilesSetting(value: 'prompt' | 'open' | 'newWindow') {\n\t\tthis.configurationService.updateValue(WORKSPACE_TRUST_UNTRUSTED_FILES, value);\n\t}\n\n\tasync completeOpenFilesTrustRequest(result: WorkspaceTrustUriResponse, saveResponse?: boolean): Promise<void> {\n\t\tif (!this._openFilesTrustRequestResolver) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Set acceptsOutOfWorkspaceFiles\n\t\tif (result === WorkspaceTrustUriResponse.Open) {\n\t\t\tthis.workspaceTrustManagementService.acceptsOutOfWorkspaceFiles = true;\n\t\t}\n\n\t\t// Save response\n\t\tif (saveResponse) {\n\t\t\tif (result === WorkspaceTrustUriResponse.Open) {\n\t\t\t\tthis.untrustedFilesSetting = 'open';\n\t\t\t}\n\n\t\t\tif (result === WorkspaceTrustUriResponse.OpenInNewWindow) {\n\t\t\t\tthis.untrustedFilesSetting = 'newWindow';\n\t\t\t}\n\t\t}\n\n\t\t// Resolve promise\n\t\tthis._openFilesTrustRequestResolver(result);\n\n\t\tthis._openFilesTrustRequestResolver = undefined;\n\t\tthis._openFilesTrustRequestPromise = undefined;\n\t}\n\n\tasync requestOpenFilesTrust(uris: URI[]): Promise<WorkspaceTrustUriResponse> {\n\t\t// If workspace is untrusted, there is no conflict\n\t\tif (!this.workspaceTrustManagementService.isWorkspaceTrusted()) {\n\t\t\treturn WorkspaceTrustUriResponse.Open;\n\t\t}\n\n\t\tconst openFilesTrustInfo = await Promise.all(uris.map(uri => this.workspaceTrustManagementService.getUriTrustInfo(uri)));\n\n\t\t// If all uris are trusted, there is no conflict\n\t\tif (openFilesTrustInfo.map(info => info.trusted).every(trusted => trusted)) {\n\t\t\treturn WorkspaceTrustUriResponse.Open;\n\t\t}\n\n\t\t// If user has setting, don't need to ask\n\t\tif (this.untrustedFilesSetting !== 'prompt') {\n\t\t\tif (this.untrustedFilesSetting === 'newWindow') {\n\t\t\t\treturn WorkspaceTrustUriResponse.OpenInNewWindow;\n\t\t\t}\n\n\t\t\tif (this.untrustedFilesSetting === 'open') {\n\t\t\t\treturn WorkspaceTrustUriResponse.Open;\n\t\t\t}\n\t\t}\n\n\t\t// If we already asked the user, don't need to ask again\n\t\tif (this.workspaceTrustManagementService.acceptsOutOfWorkspaceFiles) {\n\t\t\treturn WorkspaceTrustUriResponse.Open;\n\t\t}\n\n\t\t// Create/return a promise\n\t\tif (!this._openFilesTrustRequestPromise) {\n\t\t\tthis._openFilesTrustRequestPromise = new Promise<WorkspaceTrustUriResponse>(resolve => {\n\t\t\t\tthis._openFilesTrustRequestResolver = resolve;\n\t\t\t});\n\t\t} else {\n\t\t\treturn this._openFilesTrustRequestPromise;\n\t\t}\n\n\t\tthis._onDidInitiateOpenFilesTrustRequest.fire();\n\t\treturn this._openFilesTrustRequestPromise;\n\t}\n\n\t//#endregion\n\n\t//#region Workspace trust request\n\n\tprivate resolveWorkspaceTrustRequest(trusted?: boolean): void {\n\t\tif (this._workspaceTrustRequestResolver) {\n\t\t\tthis._workspaceTrustRequestResolver(trusted ?? this.workspaceTrustManagementService.isWorkspaceTrusted());\n\n\t\t\tthis._workspaceTrustRequestResolver = undefined;\n\t\t\tthis._workspaceTrustRequestPromise = undefined;\n\t\t}\n\t}\n\n\tcancelWorkspaceTrustRequest(): void {\n\t\tif (this._workspaceTrustRequestResolver) {\n\t\t\tthis._workspaceTrustRequestResolver(undefined);\n\n\t\t\tthis._workspaceTrustRequestResolver = undefined;\n\t\t\tthis._workspaceTrustRequestPromise = undefined;\n\t\t}\n\t}\n\n\tasync completeWorkspaceTrustRequest(trusted?: boolean): Promise<void> {\n\t\tif (trusted === undefined || trusted === this.workspaceTrustManagementService.isWorkspaceTrusted()) {\n\t\t\tthis.resolveWorkspaceTrustRequest(trusted);\n\t\t\treturn;\n\t\t}\n\n\t\t// Register one-time event handler to resolve the promise when workspace trust changed\n\t\tEvent.once(this.workspaceTrustManagementService.onDidChangeTrust)(trusted => this.resolveWorkspaceTrustRequest(trusted));\n\n\t\t// Update storage, transition workspace state\n\t\tawait this.workspaceTrustManagementService.setWorkspaceTrust(trusted);\n\t}\n\n\tasync requestWorkspaceTrust(options?: WorkspaceTrustRequestOptions): Promise<boolean | undefined> {\n\t\t// Trusted workspace\n\t\tif (this.workspaceTrustManagementService.isWorkspaceTrusted()) {\n\t\t\treturn this.workspaceTrustManagementService.isWorkspaceTrusted();\n\t\t}\n\n\t\t// Modal request\n\t\tif (!this._workspaceTrustRequestPromise) {\n\t\t\t// Create promise\n\t\t\tthis._workspaceTrustRequestPromise = new Promise(resolve => {\n\t\t\t\tthis._workspaceTrustRequestResolver = resolve;\n\t\t\t});\n\t\t} else {\n\t\t\t// Return existing promise\n\t\t\treturn this._workspaceTrustRequestPromise;\n\t\t}\n\n\t\tthis._onDidInitiateWorkspaceTrustRequest.fire(options);\n\t\treturn this._workspaceTrustRequestPromise;\n\t}\n\n\trequestWorkspaceTrustOnStartup(): void {\n\t\tif (!this._workspaceTrustRequestPromise) {\n\t\t\t// Create promise\n\t\t\tthis._workspaceTrustRequestPromise = new Promise(resolve => {\n\t\t\t\tthis._workspaceTrustRequestResolver = resolve;\n\t\t\t});\n\t\t}\n\n\t\tthis._onDidInitiateWorkspaceTrustRequestOnStartup.fire();\n\t}\n\n\t//#endregion\n}\n\nclass WorkspaceTrustTransitionManager extends Disposable {\n\n\tprivate readonly participants = new LinkedList<IWorkspaceTrustTransitionParticipant>();\n\n\taddWorkspaceTrustTransitionParticipant(participant: IWorkspaceTrustTransitionParticipant): IDisposable {\n\t\tconst remove = this.participants.push(participant);\n\t\treturn toDisposable(() => remove());\n\t}\n\n\tasync participate(trusted: boolean): Promise<void> {\n\t\tfor (const participant of this.participants) {\n\t\t\tawait participant.participate(trusted);\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tthis.participants.clear();\n\t}\n}\n\nclass WorkspaceTrustMemento {\n\n\tprivate readonly _memento?: Memento;\n\tprivate readonly _mementoObject: MementoObject;\n\n\tprivate readonly _acceptsOutOfWorkspaceFilesKey = 'acceptsOutOfWorkspaceFiles';\n\tprivate readonly _isEmptyWorkspaceTrustedKey = 'isEmptyWorkspaceTrusted';\n\n\tconstructor(storageService?: IStorageService) {\n\t\tif (storageService) {\n\t\t\tthis._memento = new Memento('workspaceTrust', storageService);\n\t\t\tthis._mementoObject = this._memento.getMemento(StorageScope.WORKSPACE, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis._mementoObject = {};\n\t\t}\n\t}\n\n\tget acceptsOutOfWorkspaceFiles(): boolean {\n\t\treturn this._mementoObject[this._acceptsOutOfWorkspaceFilesKey] ?? false;\n\t}\n\n\tset acceptsOutOfWorkspaceFiles(value: boolean) {\n\t\tthis._mementoObject[this._acceptsOutOfWorkspaceFilesKey] = value;\n\n\t\tthis._memento?.saveMemento();\n\t}\n\n\tget isEmptyWorkspaceTrusted(): boolean | undefined {\n\t\treturn this._mementoObject[this._isEmptyWorkspaceTrustedKey];\n\t}\n\n\tset isEmptyWorkspaceTrusted(value: boolean | undefined) {\n\t\tthis._mementoObject[this._isEmptyWorkspaceTrustedKey] = value;\n\n\t\tthis._memento?.saveMemento();\n\t}\n}\n\nregisterSingleton(IWorkspaceTrustRequestService, WorkspaceTrustRequestService, InstantiationType.Delayed);\n"]}