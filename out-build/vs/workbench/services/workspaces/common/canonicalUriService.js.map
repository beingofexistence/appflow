{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/workspaces/common/canonicalUriService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG,MAAa,IAAI;QAAjB;YAGkB,MAAC,GAAY,IAAI,GAAG,EAAiC,CAAC;QAgBxE,CAAC;QAdA,4BAA4B,CAAC,QAA+B;YAC3D,IAAI,CAAC,CAAC,CAAU,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YAC/C,OAAO;gBACN,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAU,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC;aACtD,CAAC;QACH,CAAC;QAED,KAAK,CAAC,mBAAmB,CAAC,GAAQ,EAAE,YAAoB,EAAE,KAAwB;YACjF,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAU,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YACjD,IAAI,QAAQ,EAAE;gBACb,OAAO,QAAQ,CAAC,mBAAmB,CAAC,GAAG,EAAE,YAAY,EAAE,KAAK,CAAC,CAAC;aAC9D;YACD,OAAO,SAAS,CAAC;QAClB,CAAC;KACD;IAnBD,oBAmBC;IAED,IAAA,gBAAG,EAAe,mBAAI,EAAkB,IAAI,oCAA2C,CAAC","file":"canonicalUriService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ICanonicalUriService, ICanonicalUriProvider } from 'vs/platform/workspace/common/canonicalUri';\n\nexport class CanonicalUriService implements ICanonicalUriService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _providers = new Map<string, ICanonicalUriProvider>();\n\n\tregisterCanonicalUriProvider(provider: ICanonicalUriProvider): IDisposable {\n\t\tthis._providers.set(provider.scheme, provider);\n\t\treturn {\n\t\t\tdispose: () => this._providers.delete(provider.scheme)\n\t\t};\n\t}\n\n\tasync provideCanonicalUri(uri: URI, targetScheme: string, token: CancellationToken): Promise<URI | undefined> {\n\t\tconst provider = this._providers.get(uri.scheme);\n\t\tif (provider) {\n\t\t\treturn provider.provideCanonicalUri(uri, targetScheme, token);\n\t\t}\n\t\treturn undefined;\n\t}\n}\n\nregisterSingleton(ICanonicalUriService, CanonicalUriService, InstantiationType.Delayed);\n"]}