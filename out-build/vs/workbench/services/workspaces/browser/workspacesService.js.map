{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/workspaces/browser/workspacesService.ts"],"names":[],"mappings":"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","file":"workspacesService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IWorkspacesService, IWorkspaceFolderCreationData, IEnterWorkspaceResult, IRecentlyOpened, restoreRecentlyOpened, IRecent, isRecentFile, isRecentFolder, toStoreData, IStoredWorkspaceFolder, getStoredWorkspaceFolder, IStoredWorkspace, isRecentWorkspace } from 'vs/platform/workspaces/common/workspaces';\nimport { URI } from 'vs/base/common/uri';\nimport { Emitter } from 'vs/base/common/event';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { isTemporaryWorkspace, IWorkspaceContextService, IWorkspaceFoldersChangeEvent, IWorkspaceIdentifier, WorkbenchState, WORKSPACE_EXTENSION } from 'vs/platform/workspace/common/workspace';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { getWorkspaceIdentifier } from 'vs/workbench/services/workspaces/browser/workspaces';\nimport { IFileService, FileOperationError, FileOperationResult } from 'vs/platform/files/common/files';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { joinPath } from 'vs/base/common/resources';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { IWorkspaceBackupInfo, IFolderBackupInfo } from 'vs/platform/backup/common/backup';\nimport { Schemas } from 'vs/base/common/network';\n\nexport class BrowserWorkspacesService extends Disposable implements IWorkspacesService {\n\n\tstatic readonly RECENTLY_OPENED_KEY = 'recently.opened';\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onRecentlyOpenedChange = this._register(new Emitter<void>());\n\treadonly onDidChangeRecentlyOpened = this._onRecentlyOpenedChange.event;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper();\n\n\t\t// Opening a workspace should push it as most\n\t\t// recently used to the workspaces history\n\t\tthis.addWorkspaceToRecentlyOpened();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Storage\n\t\tthis._register(this.storageService.onDidChangeValue(StorageScope.APPLICATION, BrowserWorkspacesService.RECENTLY_OPENED_KEY, this._register(new DisposableStore()))(() => this._onRecentlyOpenedChange.fire()));\n\n\t\t// Workspace\n\t\tthis._register(this.contextService.onDidChangeWorkspaceFolders(e => this.onDidChangeWorkspaceFolders(e)));\n\t}\n\n\tprivate onDidChangeWorkspaceFolders(e: IWorkspaceFoldersChangeEvent): void {\n\t\tif (!isTemporaryWorkspace(this.contextService.getWorkspace())) {\n\t\t\treturn;\n\t\t}\n\n\t\t// When in a temporary workspace, make sure to track folder changes\n\t\t// in the history so that these can later be restored.\n\n\t\tfor (const folder of e.added) {\n\t\t\tthis.addRecentlyOpened([{ folderUri: folder.uri }]);\n\t\t}\n\t}\n\n\tprivate addWorkspaceToRecentlyOpened(): void {\n\t\tconst workspace = this.contextService.getWorkspace();\n\t\tconst remoteAuthority = this.environmentService.remoteAuthority;\n\t\tswitch (this.contextService.getWorkbenchState()) {\n\t\t\tcase WorkbenchState.FOLDER:\n\t\t\t\tthis.addRecentlyOpened([{ folderUri: workspace.folders[0].uri, remoteAuthority }]);\n\t\t\t\tbreak;\n\t\t\tcase WorkbenchState.WORKSPACE:\n\t\t\t\tthis.addRecentlyOpened([{ workspace: { id: workspace.id, configPath: workspace.configuration! }, remoteAuthority }]);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t//#region Workspaces History\n\n\tasync getRecentlyOpened(): Promise<IRecentlyOpened> {\n\t\tconst recentlyOpenedRaw = this.storageService.get(BrowserWorkspacesService.RECENTLY_OPENED_KEY, StorageScope.APPLICATION);\n\t\tif (recentlyOpenedRaw) {\n\t\t\tconst recentlyOpened = restoreRecentlyOpened(JSON.parse(recentlyOpenedRaw), this.logService);\n\t\t\trecentlyOpened.workspaces = recentlyOpened.workspaces.filter(recent => {\n\n\t\t\t\t// In web, unless we are in a temporary workspace, we cannot support\n\t\t\t\t// to switch to local folders because this would require a window\n\t\t\t\t// reload and local file access only works with explicit user gesture\n\t\t\t\t// from the current session.\n\t\t\t\tif (isRecentFolder(recent) && recent.folderUri.scheme === Schemas.file && !isTemporaryWorkspace(this.contextService.getWorkspace())) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// Never offer temporary workspaces in the history\n\t\t\t\tif (isRecentWorkspace(recent) && isTemporaryWorkspace(recent.workspace.configPath)) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\treturn true;\n\t\t\t});\n\n\t\t\treturn recentlyOpened;\n\t\t}\n\n\t\treturn { workspaces: [], files: [] };\n\t}\n\n\tasync addRecentlyOpened(recents: IRecent[]): Promise<void> {\n\t\tconst recentlyOpened = await this.getRecentlyOpened();\n\n\t\tfor (const recent of recents) {\n\t\t\tif (isRecentFile(recent)) {\n\t\t\t\tthis.doRemoveRecentlyOpened(recentlyOpened, [recent.fileUri]);\n\t\t\t\trecentlyOpened.files.unshift(recent);\n\t\t\t} else if (isRecentFolder(recent)) {\n\t\t\t\tthis.doRemoveRecentlyOpened(recentlyOpened, [recent.folderUri]);\n\t\t\t\trecentlyOpened.workspaces.unshift(recent);\n\t\t\t} else {\n\t\t\t\tthis.doRemoveRecentlyOpened(recentlyOpened, [recent.workspace.configPath]);\n\t\t\t\trecentlyOpened.workspaces.unshift(recent);\n\t\t\t}\n\t\t}\n\n\t\treturn this.saveRecentlyOpened(recentlyOpened);\n\t}\n\n\tasync removeRecentlyOpened(paths: URI[]): Promise<void> {\n\t\tconst recentlyOpened = await this.getRecentlyOpened();\n\n\t\tthis.doRemoveRecentlyOpened(recentlyOpened, paths);\n\n\t\treturn this.saveRecentlyOpened(recentlyOpened);\n\t}\n\n\tprivate doRemoveRecentlyOpened(recentlyOpened: IRecentlyOpened, paths: URI[]): void {\n\t\trecentlyOpened.files = recentlyOpened.files.filter(file => {\n\t\t\treturn !paths.some(path => path.toString() === file.fileUri.toString());\n\t\t});\n\n\t\trecentlyOpened.workspaces = recentlyOpened.workspaces.filter(workspace => {\n\t\t\treturn !paths.some(path => path.toString() === (isRecentFolder(workspace) ? workspace.folderUri.toString() : workspace.workspace.configPath.toString()));\n\t\t});\n\t}\n\n\tprivate async saveRecentlyOpened(data: IRecentlyOpened): Promise<void> {\n\t\treturn this.storageService.store(BrowserWorkspacesService.RECENTLY_OPENED_KEY, JSON.stringify(toStoreData(data)), StorageScope.APPLICATION, StorageTarget.USER);\n\t}\n\n\tasync clearRecentlyOpened(): Promise<void> {\n\t\tthis.storageService.remove(BrowserWorkspacesService.RECENTLY_OPENED_KEY, StorageScope.APPLICATION);\n\t}\n\n\t//#endregion\n\n\t//#region Workspace Management\n\n\tasync enterWorkspace(workspaceUri: URI): Promise<IEnterWorkspaceResult | undefined> {\n\t\treturn { workspace: await this.getWorkspaceIdentifier(workspaceUri) };\n\t}\n\n\tasync createUntitledWorkspace(folders?: IWorkspaceFolderCreationData[], remoteAuthority?: string): Promise<IWorkspaceIdentifier> {\n\t\tconst randomId = (Date.now() + Math.round(Math.random() * 1000)).toString();\n\t\tconst newUntitledWorkspacePath = joinPath(this.environmentService.untitledWorkspacesHome, `Untitled-${randomId}.${WORKSPACE_EXTENSION}`);\n\n\t\t// Build array of workspace folders to store\n\t\tconst storedWorkspaceFolder: IStoredWorkspaceFolder[] = [];\n\t\tif (folders) {\n\t\t\tfor (const folder of folders) {\n\t\t\t\tstoredWorkspaceFolder.push(getStoredWorkspaceFolder(folder.uri, true, folder.name, this.environmentService.untitledWorkspacesHome, this.uriIdentityService.extUri));\n\t\t\t}\n\t\t}\n\n\t\t// Store at untitled workspaces location\n\t\tconst storedWorkspace: IStoredWorkspace = { folders: storedWorkspaceFolder, remoteAuthority };\n\t\tawait this.fileService.writeFile(newUntitledWorkspacePath, VSBuffer.fromString(JSON.stringify(storedWorkspace, null, '\\t')));\n\n\t\treturn this.getWorkspaceIdentifier(newUntitledWorkspacePath);\n\t}\n\n\tasync deleteUntitledWorkspace(workspace: IWorkspaceIdentifier): Promise<void> {\n\t\ttry {\n\t\t\tawait this.fileService.del(workspace.configPath);\n\t\t} catch (error) {\n\t\t\tif ((<FileOperationError>error).fileOperationResult !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\tthrow error; // re-throw any other error than file not found which is OK\n\t\t\t}\n\t\t}\n\t}\n\n\tasync getWorkspaceIdentifier(workspaceUri: URI): Promise<IWorkspaceIdentifier> {\n\t\treturn getWorkspaceIdentifier(workspaceUri);\n\t}\n\n\t//#endregion\n\n\n\t//#region Dirty Workspaces\n\n\tasync getDirtyWorkspaces(): Promise<Array<IWorkspaceBackupInfo | IFolderBackupInfo>> {\n\t\treturn []; // Currently not supported in web\n\t}\n\n\t//#endregion\n}\n\nregisterSingleton(IWorkspacesService, BrowserWorkspacesService, InstantiationType.Delayed);\n"]}