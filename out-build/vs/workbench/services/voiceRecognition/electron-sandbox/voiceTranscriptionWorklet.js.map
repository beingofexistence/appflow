{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/voiceRecognition/electron-sandbox/voiceTranscriptionWorklet.ts"],"names":[],"mappings":"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","file":"voiceTranscriptionWorklet.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\ndeclare class AudioWorkletProcessor {\n\n\treadonly port: MessagePort;\n\n\tprocess(inputs: [Float32Array[]], outputs: [Float32Array[]]): boolean;\n}\n\ninterface IVoiceTranscriptionWorkletOptions extends AudioWorkletNodeOptions {\n\tprocessorOptions: {\n\t\treadonly bufferTimespan: number;\n\t\treadonly vadThreshold: number;\n\t};\n}\n\nclass VoiceTranscriptionWorklet extends AudioWorkletProcessor {\n\n\tprivate startTime: number | undefined = undefined;\n\tprivate stopped: boolean = false;\n\n\tprivate buffer: Float32Array[] = [];\n\n\tprivate sharedProcessConnection: MessagePort | undefined = undefined;\n\n\tconstructor(private readonly options: IVoiceTranscriptionWorkletOptions) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners() {\n\t\tthis.port.onmessage = event => {\n\t\t\tswitch (event.data) {\n\t\t\t\tcase 'vscode:startVoiceTranscription': {\n\t\t\t\t\tthis.sharedProcessConnection = event.ports[0];\n\n\t\t\t\t\tthis.sharedProcessConnection.onmessage = event => {\n\t\t\t\t\t\tif (this.stopped) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (typeof event.data === 'string') {\n\t\t\t\t\t\t\tthis.port.postMessage(event.data);\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tthis.sharedProcessConnection.start();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tcase 'vscode:stopVoiceTranscription': {\n\t\t\t\t\tthis.stopped = true;\n\n\t\t\t\t\tthis.sharedProcessConnection?.close();\n\t\t\t\t\tthis.sharedProcessConnection = undefined;\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n\n\toverride process(inputs: [Float32Array[]]): boolean {\n\t\tif (this.startTime === undefined) {\n\t\t\tthis.startTime = Date.now();\n\t\t}\n\n\t\tconst inputChannelData = inputs[0][0];\n\t\tif ((!(inputChannelData instanceof Float32Array))) {\n\t\t\treturn !this.stopped;\n\t\t}\n\n\t\tthis.buffer.push(inputChannelData.slice(0));\n\n\t\tif (Date.now() - this.startTime > this.options.processorOptions.bufferTimespan && this.sharedProcessConnection) {\n\t\t\tconst buffer = this.joinFloat32Arrays(this.buffer);\n\t\t\tthis.buffer = [];\n\n\t\t\t// Send buffer to shared process for transcription.\n\t\t\t// Send an empty buffer if it appears to be silence\n\t\t\t// so that we can still trigger the transcription\n\t\t\t// service and let it know about this.\n\n\t\t\tthis.sharedProcessConnection.postMessage(this.appearsToBeSilence(buffer) ? new Float32Array(0) : buffer);\n\n\t\t\tthis.startTime = Date.now();\n\t\t}\n\n\t\treturn !this.stopped;\n\t}\n\n\tprivate appearsToBeSilence(data: Float32Array): boolean {\n\n\t\t// This is the most simple Voice Activity Detection (VAD)\n\t\t// and it is based on the Root Mean Square (RMS) of the signal\n\t\t// with a certain threshold. Good for testing but probably\n\t\t// not suitable for shipping to stable (TODO@bpasero).\n\n\t\tlet sum = 0;\n\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\tsum += data[i] * data[i];\n\t\t}\n\n\t\tconst rms = Math.sqrt(sum / data.length);\n\n\t\treturn rms < this.options.processorOptions.vadThreshold;\n\t}\n\n\tprivate joinFloat32Arrays(float32Arrays: Float32Array[]): Float32Array {\n\t\tconst result = new Float32Array(float32Arrays.reduce((prev, curr) => prev + curr.length, 0));\n\n\t\tlet offset = 0;\n\t\tfor (const float32Array of float32Arrays) {\n\t\t\tresult.set(float32Array, offset);\n\t\t\toffset += float32Array.length;\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\n// @ts-ignore\nregisterProcessor('voice-transcription-worklet', VoiceTranscriptionWorklet);\n"]}