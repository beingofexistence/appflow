{"version":3,"sources":["vs/workbench/services/voiceRecognition/electron-sandbox/workbenchVoiceRecognitionService.ts"],"names":[],"mappings":"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","file":"workbenchVoiceRecognitionService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IProgressService, ProgressLocation } from 'vs/platform/progress/common/progress';\nimport { DeferredPromise } from 'vs/base/common/async';\nimport { FileAccess } from 'vs/base/common/network';\nimport { ISharedProcessService } from 'vs/platform/ipc/electron-sandbox/services';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\n\nexport const IWorkbenchVoiceRecognitionService = createDecorator<IWorkbenchVoiceRecognitionService>('workbenchVoiceRecognitionService');\n\nexport interface IWorkbenchVoiceRecognitionOptions {\n\n\t/**\n\t * Optional event that is fired when the user cancels the voice recognition.\n\t */\n\treadonly onDidCancel?: () => void;\n}\n\nexport interface IWorkbenchVoiceRecognitionService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Starts listening to the microphone transcribing the voice to text. Microphone\n\t * recording starts when the returned promise is resolved.\n\t *\n\t * @param cancellation a cancellation token to stop transcribing and\n\t * listening to the microphone.\n\t */\n\ttranscribe(cancellation: CancellationToken, options?: IWorkbenchVoiceRecognitionOptions): Promise<Event<string>>;\n}\n\ninterface IVoiceTranscriptionWorkletOptions extends AudioWorkletNodeOptions {\n\tprocessorOptions: {\n\t\treadonly bufferTimespan: number;\n\t\treadonly vadThreshold: number;\n\t};\n}\n\nclass VoiceTranscriptionWorkletNode extends AudioWorkletNode {\n\n\tconstructor(\n\t\tcontext: BaseAudioContext,\n\t\toptions: IVoiceTranscriptionWorkletOptions,\n\t\tprivate readonly onDidTranscribe: Emitter<string>,\n\t\tprivate readonly sharedProcessService: ISharedProcessService\n\t) {\n\t\tsuper(context, 'voice-transcription-worklet', options);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis.port.onmessage = e => {\n\t\t\tif (typeof e.data === 'string') {\n\t\t\t\tthis.onDidTranscribe.fire(e.data);\n\t\t\t}\n\t\t};\n\t}\n\n\tasync start(token: CancellationToken): Promise<void> {\n\t\ttoken.onCancellationRequested(() => this.stop());\n\n\t\tconst sharedProcessConnection = await this.sharedProcessService.createRawConnection();\n\n\t\tif (token.isCancellationRequested) {\n\t\t\tthis.stop();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.port.postMessage('vscode:startVoiceTranscription', [sharedProcessConnection]);\n\t}\n\n\tprivate stop(): void {\n\t\tthis.port.postMessage('vscode:stopVoiceTranscription');\n\t\tthis.disconnect();\n\t}\n}\n\nexport class WorkbenchVoiceRecognitionService implements IWorkbenchVoiceRecognitionService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static readonly AUDIO_SAMPLING_RATE = 16000;\n\tprivate static readonly AUDIO_BIT_DEPTH = 16;\n\tprivate static readonly AUDIO_CHANNELS = 1;\n\n\tprivate static readonly BUFFER_TIMESPAN = 1000;\n\tprivate static readonly VAD_THRESHOLD = 0.02;\n\n\tconstructor(\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t\t@ISharedProcessService private readonly sharedProcessService: ISharedProcessService,\n\t\t@INotificationService private readonly notificationService: INotificationService\n\t) { }\n\n\tasync transcribe(cancellation: CancellationToken, options?: IWorkbenchVoiceRecognitionOptions): Promise<Event<string>> {\n\t\tconst cts = new CancellationTokenSource(cancellation);\n\n\t\tconst onDidTranscribe = new Emitter<string>();\n\t\tcts.token.onCancellationRequested(() => {\n\t\t\tonDidTranscribe.dispose();\n\t\t\toptions?.onDidCancel?.();\n\t\t});\n\n\t\tawait this.doTranscribe(onDidTranscribe, cts);\n\n\t\treturn onDidTranscribe.event;\n\t}\n\n\tprivate doTranscribe(onDidTranscribe: Emitter<string>, cts: CancellationTokenSource): Promise<void> {\n\t\tconst recordingReady = new DeferredPromise<void>();\n\t\tcts.token.onCancellationRequested(() => recordingReady.complete());\n\n\t\tthis.progressService.withProgress({\n\t\t\tlocation: ProgressLocation.Window,\n\t\t\ttitle: localize('voiceTranscription', \"Voice Transcription\"),\n\t\t\tcancellable: true\n\t\t}, async progress => {\n\t\t\tconst recordingDone = new DeferredPromise<void>();\n\t\t\ttry {\n\t\t\t\tprogress.report({ message: localize('voiceTranscriptionGettingReady', \"Getting microphone ready...\") });\n\n\t\t\t\tconst microphoneDevice = await navigator.mediaDevices.getUserMedia({\n\t\t\t\t\taudio: {\n\t\t\t\t\t\tsampleRate: WorkbenchVoiceRecognitionService.AUDIO_SAMPLING_RATE,\n\t\t\t\t\t\tsampleSize: WorkbenchVoiceRecognitionService.AUDIO_BIT_DEPTH,\n\t\t\t\t\t\tchannelCount: WorkbenchVoiceRecognitionService.AUDIO_CHANNELS,\n\t\t\t\t\t\tautoGainControl: true,\n\t\t\t\t\t\tnoiseSuppression: true,\n\t\t\t\t\t\techoCancellation: false\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst audioContext = new AudioContext({\n\t\t\t\t\tsampleRate: WorkbenchVoiceRecognitionService.AUDIO_SAMPLING_RATE,\n\t\t\t\t\tlatencyHint: 'interactive'\n\t\t\t\t});\n\n\t\t\t\tconst microphoneSource = audioContext.createMediaStreamSource(microphoneDevice);\n\n\t\t\t\tcts.token.onCancellationRequested(() => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfor (const track of microphoneDevice.getTracks()) {\n\t\t\t\t\t\t\ttrack.stop();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmicrophoneSource.disconnect();\n\t\t\t\t\t\taudioContext.close();\n\t\t\t\t\t} finally {\n\t\t\t\t\t\trecordingDone.complete();\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tawait audioContext.audioWorklet.addModule(FileAccess.asBrowserUri('vs/workbench/services/voiceRecognition/electron-sandbox/voiceTranscriptionWorklet.js').toString(true));\n\n\t\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst voiceTranscriptionTarget = new VoiceTranscriptionWorkletNode(audioContext, {\n\t\t\t\t\tchannelCount: WorkbenchVoiceRecognitionService.AUDIO_CHANNELS,\n\t\t\t\t\tchannelCountMode: 'explicit',\n\t\t\t\t\tprocessorOptions: {\n\t\t\t\t\t\tbufferTimespan: WorkbenchVoiceRecognitionService.BUFFER_TIMESPAN,\n\t\t\t\t\t\tvadThreshold: WorkbenchVoiceRecognitionService.VAD_THRESHOLD\n\t\t\t\t\t}\n\t\t\t\t}, onDidTranscribe, this.sharedProcessService);\n\t\t\t\tawait voiceTranscriptionTarget.start(cts.token);\n\n\t\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tmicrophoneSource.connect(voiceTranscriptionTarget);\n\n\t\t\t\tprogress.report({ message: localize('voiceTranscriptionRecording', \"Recording from microphone...\") });\n\t\t\t\trecordingReady.complete();\n\n\t\t\t\treturn recordingDone.p;\n\t\t\t} catch (error) {\n\t\t\t\tthis.notificationService.error(localize('voiceTranscriptionError', \"Voice transcription failed: {0}\", error.message));\n\n\t\t\t\trecordingReady.error(error);\n\t\t\t\trecordingDone.error(error);\n\t\t\t}\n\t\t}, () => {\n\t\t\tcts.cancel();\n\t\t});\n\n\t\treturn recordingReady.p;\n\t}\n}\n\n// Register Service\nregisterSingleton(IWorkbenchVoiceRecognitionService, WorkbenchVoiceRecognitionService, InstantiationType.Delayed);\n"]}