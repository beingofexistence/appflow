{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/userActivity/common/userActivityService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAiCnF,QAAA,IAAI,GAAmB,IAAA,mBAAG,EAAmC,sBAAsB,CAAC,CAAC;IAE3F,IAAM,IAAI,GAAV,MAAM,IAAoB,SAAQ,eAAG;QAsB3C,YAAmC,oBAAyB;YAC3D,KAAK,EAAE,CAAC;YArBQ,MAAC,GAAc,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,CAAc,GAAG,EAAE;gBACxE,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;gBACtB,IAAI,CAAC,CAAC,CAAa,IAAI,CAAC,KAAK,CAAC,CAAC;YAChC,CAAC,EAAE,KAAM,CAAC,CAAC,CAAC;YAEK,MAAC,GAAe,IAAI,CAAC,CAAC,CAAS,IAAI,WAAgB,CAAC,CAAC;YAC9D,MAAC,GAAQ,CAAC,CAAC;YAEnB;;;;;;eAMG;YACI,aAAQ,GAAG,IAAI,CAAC;YAEvB,kBAAkB;YAClB,wBAAmB,GAAmB,IAAI,CAAC,CAAC,CAAa,KAAK,CAAC;YAI9D,IAAI,CAAC,CAAC,CAAS,IAAA,WAAG,EAAS,GAAG,EAAE,CAAC,2BAAI,CAAiB,IAAI,CAAC,IAAI,EAAE,oBAAoB,CAAC,CAAC,CAAC,CAAC;QAC1F,CAAC;QAED,kBAAkB;QAClB,UAAU;YACT,IAAI,EAAE,IAAI,CAAC,CAAC,KAAU,CAAC,EAAE;gBACxB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;gBACrB,IAAI,CAAC,CAAC,CAAa,IAAI,CAAC,IAAI,CAAC,CAAC;gBAC9B,IAAI,CAAC,CAAC,CAAY,MAAM,EAAE,CAAC;aAC3B;YAED,OAAO,IAAA,eAAG,EAAU,GAAG,EAAE;gBACxB,IAAI,EAAE,IAAI,CAAC,CAAC,KAAU,CAAC,EAAE;oBACxB,IAAI,CAAC,CAAC,CAAY,QAAQ,EAAE,CAAC;iBAC7B;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;KACD,CAAA;IAzCY,oBAAI;mBAAJ,IAAI;QAsBH,WAAA,mBAAG,CAAA;OAtBJ,IAAI,CAyChB;IAED,IAAA,gBAAG,EAAe,YAAI,EAAkB,IAAI,oCAA2C,CAAC","file":"userActivityService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { RunOnceScheduler, runWhenIdle } from 'vs/base/common/async';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IInstantiationService, createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { userActivityRegistry } from 'vs/workbench/services/userActivity/common/userActivityRegistry';\n\n/**\n * Service that observes user activity in the window.\n */\nexport interface IUserActivityService {\n\t_serviceBrand: undefined;\n\n\t/**\n\t * Whether the user is currently active.\n\t */\n\treadonly isActive: boolean;\n\n\t/**\n\t * Fires when the activity state changes.\n\t */\n\treadonly onDidChangeIsActive: Event<boolean>;\n\n\t/**\n\t * Marks the user as being active until the Disposable is disposed of.\n\t * Multiple consumers call this method; the user will only be considered\n\t * inactive once all consumers have disposed of their Disposables.\n\t */\n\tmarkActive(): IDisposable;\n}\n\nexport const IUserActivityService = createDecorator<IUserActivityService>('IUserActivityService');\n\nexport class UserActivityService extends Disposable implements IUserActivityService {\n\tdeclare readonly _serviceBrand: undefined;\n\tprivate readonly markInactive = this._register(new RunOnceScheduler(() => {\n\t\tthis.isActive = false;\n\t\tthis.changeEmitter.fire(false);\n\t}, 10_000));\n\n\tprivate readonly changeEmitter = this._register(new Emitter<boolean>);\n\tprivate active = 0;\n\n\t/**\n\t * @inheritdoc\n\t *\n\t * Note: initialized to true, since the user just did something to open the\n\t * window. The bundled DomActivityTracker will initially assume activity\n\t * as well in order to unset this if the window gets abandoned.\n\t */\n\tpublic isActive = true;\n\n\t/** @inheritdoc */\n\tonDidChangeIsActive: Event<boolean> = this.changeEmitter.event;\n\n\tconstructor(@IInstantiationService instantiationService: IInstantiationService) {\n\t\tsuper();\n\t\tthis._register(runWhenIdle(() => userActivityRegistry.take(this, instantiationService)));\n\t}\n\n\t/** @inheritdoc */\n\tmarkActive(): IDisposable {\n\t\tif (++this.active === 1) {\n\t\t\tthis.isActive = true;\n\t\t\tthis.changeEmitter.fire(true);\n\t\t\tthis.markInactive.cancel();\n\t\t}\n\n\t\treturn toDisposable(() => {\n\t\t\tif (--this.active === 0) {\n\t\t\t\tthis.markInactive.schedule();\n\t\t\t}\n\t\t});\n\t}\n}\n\nregisterSingleton(IUserActivityService, UserActivityService, InstantiationType.Delayed);\n"]}