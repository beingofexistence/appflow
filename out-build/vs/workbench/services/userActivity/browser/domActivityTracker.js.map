{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/userActivity/browser/domActivityTracker.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOhG;;;;;;;;;OASG;IACH,MAAM,cAAc,GAAG,KAAM,CAAC;IAE9B,iCAAiC;IACjC,MAAM,8BAA8B,GAAG,CAAC,CAAC;IAEzC,MAAM,oBAAoB,GAA4B;QACrD,OAAO,EAAE,IAAI;QACb,OAAO,EAAE,IAAI,EAAE,8DAA8D;KAC7E,CAAC;IAEF,MAAa,IAAmB,SAAQ,eAAG;QAC1C,YAAY,mBAAyB;YACpC,KAAK,EAAE,CAAC;YAER,IAAI,wBAAwB,GAAG,8BAA8B,CAAC;YAC9D,MAAM,aAAa,GAAG,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAY,CAAC,CAAC;YAC1D,MAAM,WAAW,GAAG,IAAI,CAAC,CAAC,CAAS,IAAI,eAAG,EAAgB,CAAC,CAAC;YAC5D,WAAW,CAAC,KAAK,GAAG,mBAAmB,CAAC,UAAU,EAAE,CAAC;YAErD,MAAM,UAAU,GAAG,GAAG,EAAE;gBACvB,IAAI,EAAE,wBAAwB,KAAK,8BAA8B,EAAE;oBAClE,WAAW,CAAC,KAAK,EAAE,CAAC;oBACpB,aAAa,CAAC,MAAM,EAAE,CAAC;iBACvB;YACF,CAAC,CAAC;YAEF,MAAM,UAAU,GAAG,GAAG,EAAE;gBACvB,wCAAwC;gBACxC,IAAI,wBAAwB,KAAK,8BAA8B,EAAE;oBAChE,WAAW,CAAC,KAAK,GAAG,mBAAmB,CAAC,UAAU,EAAE,CAAC;oBACrD,aAAa,CAAC,YAAY,CAAC,UAAU,EAAE,cAAc,CAAC,CAAC;iBACvD;gBAED,wBAAwB,GAAG,CAAC,CAAC;YAC9B,CAAC,CAAC;YAEF,IAAI,CAAC,CAAC,CAAS,GAAG,CAAC,GAAG,CAAmB,QAAQ,EAAE,YAAY,EAAE,UAAU,EAAE,oBAAoB,CAAC,CAAC,CAAC;YACpG,IAAI,CAAC,CAAC,CAAS,GAAG,CAAC,GAAG,CAAmB,QAAQ,EAAE,WAAW,EAAE,UAAU,EAAE,oBAAoB,CAAC,CAAC,CAAC;YACnG,IAAI,CAAC,CAAC,CAAS,GAAG,CAAC,GAAG,CAAmB,QAAQ,EAAE,SAAS,EAAE,UAAU,EAAE,oBAAoB,CAAC,CAAC,CAAC;YAEjG,UAAU,EAAE,CAAC;QACd,CAAC;KACD;IAhCD,oBAgCC","file":"domActivityTracker.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from 'vs/base/browser/dom';\nimport { IntervalTimer } from 'vs/base/common/async';\nimport { Disposable, MutableDisposable } from 'vs/base/common/lifecycle';\nimport { IUserActivityService } from 'vs/workbench/services/userActivity/common/userActivityService';\n\n/**\n * This uses a time interval and checks whether there's any activity in that\n * interval. A naive approach might be to use a debounce whenever an event\n * happens, but this has some scheduling overhead. Instead, the tracker counts\n * how many intervals have elapsed since any activity happened.\n *\n * If there's more than `MIN_INTERVALS_WITHOUT_ACTIVITY`, then say the user is\n * inactive. Therefore the maximum time before an inactive user is detected\n * is `CHECK_INTERVAL * (MIN_INTERVALS_WITHOUT_ACTIVITY + 1)`.\n */\nconst CHECK_INTERVAL = 30_000;\n\n/** See {@link CHECK_INTERVAL} */\nconst MIN_INTERVALS_WITHOUT_ACTIVITY = 2;\n\nconst eventListenerOptions: AddEventListenerOptions = {\n\tpassive: true, /** does not preventDefault() */\n\tcapture: true, /** should dispatch first (before anyone stopPropagation()) */\n};\n\nexport class DomActivityTracker extends Disposable {\n\tconstructor(userActivityService: IUserActivityService) {\n\t\tsuper();\n\n\t\tlet intervalsWithoutActivity = MIN_INTERVALS_WITHOUT_ACTIVITY;\n\t\tconst intervalTimer = this._register(new IntervalTimer());\n\t\tconst activeMutex = this._register(new MutableDisposable());\n\t\tactiveMutex.value = userActivityService.markActive();\n\n\t\tconst onInterval = () => {\n\t\t\tif (++intervalsWithoutActivity === MIN_INTERVALS_WITHOUT_ACTIVITY) {\n\t\t\t\tactiveMutex.clear();\n\t\t\t\tintervalTimer.cancel();\n\t\t\t}\n\t\t};\n\n\t\tconst onActivity = () => {\n\t\t\t// if was inactive, they've now returned\n\t\t\tif (intervalsWithoutActivity === MIN_INTERVALS_WITHOUT_ACTIVITY) {\n\t\t\t\tactiveMutex.value = userActivityService.markActive();\n\t\t\t\tintervalTimer.cancelAndSet(onInterval, CHECK_INTERVAL);\n\t\t\t}\n\n\t\t\tintervalsWithoutActivity = 0;\n\t\t};\n\n\t\tthis._register(dom.addDisposableListener(document, 'touchstart', onActivity, eventListenerOptions));\n\t\tthis._register(dom.addDisposableListener(document, 'mousedown', onActivity, eventListenerOptions));\n\t\tthis._register(dom.addDisposableListener(document, 'keydown', onActivity, eventListenerOptions));\n\n\t\tonActivity();\n\t}\n}\n"]}