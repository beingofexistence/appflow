{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/issue/browser/issueService.ts"],"names":[],"mappings":"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","file":"issueService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from 'vs/base/browser/dom';\nimport { normalizeGitHubUrl } from 'vs/platform/issue/common/issueReporterUtil';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IIssueUriRequestHandler, IWorkbenchIssueService } from 'vs/workbench/services/issue/common/issue';\nimport { IssueReporterData } from 'vs/platform/issue/common/issue';\nimport { userAgent } from 'vs/base/common/platform';\nimport { IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { ILogService } from 'vs/platform/log/common/log';\n\nexport class WebIssueService implements IWorkbenchIssueService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _handlers = new Map<string, IIssueUriRequestHandler>();\n\n\tconstructor(\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@ILogService private readonly logService: ILogService\n\t) { }\n\n\t//TODO @TylerLeonhardt @Tyriar to implement a process explorer for the web\n\tasync openProcessExplorer(): Promise<void> {\n\t\tconsole.error('openProcessExplorer is not implemented in web');\n\t}\n\n\tasync openReporter(options: Partial<IssueReporterData>): Promise<void> {\n\t\tconst extensionId = options.extensionId;\n\t\t// If we don't have a extensionId, treat this as a Core issue\n\t\tif (!extensionId) {\n\t\t\tif (this.productService.reportIssueUrl) {\n\t\t\t\tconst uri = this.getIssueUriFromStaticContent(this.productService.reportIssueUrl);\n\t\t\t\tdom.windowOpenNoOpener(uri);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthrow new Error(`No issue reporting URL configured for ${this.productService.nameLong}.`);\n\t\t}\n\n\t\t// If we have a handler registered for this extension, use it instead of anything else\n\t\tif (this._handlers.has(extensionId)) {\n\t\t\ttry {\n\t\t\t\tconst uri = await this.getIssueUriFromHandler(extensionId, CancellationToken.None);\n\t\t\t\tdom.windowOpenNoOpener(uri);\n\t\t\t\treturn;\n\t\t\t} catch (e) {\n\t\t\t\tthis.logService.error(e);\n\t\t\t}\n\t\t}\n\n\t\t// if we don't have a handler, or the handler failed, try to get the extension's github url\n\t\tconst selectedExtension = this.extensionService.extensions.filter(ext => ext.identifier.value === options.extensionId)[0];\n\t\tconst extensionGitHubUrl = this.getExtensionGitHubUrl(selectedExtension);\n\t\tif (!extensionGitHubUrl) {\n\t\t\tthrow new Error(`Unable to find issue reporting url for ${extensionId}`);\n\t\t}\n\n\t\tconst uri = this.getIssueUriFromStaticContent(`${extensionGitHubUrl}/issues/new`, selectedExtension);\n\t\tdom.windowOpenNoOpener(uri);\n\t}\n\n\tregisterIssueUriRequestHandler(extensionId: string, handler: IIssueUriRequestHandler): IDisposable {\n\t\tthis._handlers.set(extensionId, handler);\n\t\treturn toDisposable(() => this._handlers.delete(extensionId));\n\t}\n\n\tprivate async getIssueUriFromHandler(extensionId: string, token: CancellationToken): Promise<string> {\n\t\tconst handler = this._handlers.get(extensionId);\n\t\tif (!handler) {\n\t\t\tthrow new Error(`No handler registered for extension ${extensionId}`);\n\t\t}\n\t\tconst result = await handler.provideIssueUrl(token);\n\t\treturn result.toString(true);\n\t}\n\n\tprivate getExtensionGitHubUrl(extension: IExtensionDescription): string {\n\t\tif (extension.isBuiltin && this.productService.reportIssueUrl) {\n\t\t\treturn normalizeGitHubUrl(this.productService.reportIssueUrl);\n\t\t}\n\n\t\tlet repositoryUrl = '';\n\n\t\tconst bugsUrl = extension?.bugs?.url;\n\t\tconst extensionUrl = extension?.repository?.url;\n\n\t\t// If given, try to match the extension's bug url\n\t\tif (bugsUrl && bugsUrl.match(/^https?:\\/\\/github\\.com\\/(.*)/)) {\n\t\t\trepositoryUrl = normalizeGitHubUrl(bugsUrl);\n\t\t} else if (extensionUrl && extensionUrl.match(/^https?:\\/\\/github\\.com\\/(.*)/)) {\n\t\t\trepositoryUrl = normalizeGitHubUrl(extensionUrl);\n\t\t}\n\n\t\treturn repositoryUrl;\n\t}\n\n\tprivate getIssueUriFromStaticContent(baseUri: string, extension?: IExtensionDescription): string {\n\t\tconst issueDescription = `ADD ISSUE DESCRIPTION HERE\n\nVersion: ${this.productService.version}\nCommit: ${this.productService.commit ?? 'unknown'}\nUser Agent: ${userAgent ?? 'unknown'}\nEmbedder: ${this.productService.embedderIdentifier ?? 'unknown'}\n${extension?.version ? `\\nExtension version: ${extension.version}` : ''}\n<!-- generated by web issue reporter -->`;\n\n\t\treturn `${baseUri}?body=${encodeURIComponent(issueDescription)}&labels=web`;\n\t}\n}\n"]}