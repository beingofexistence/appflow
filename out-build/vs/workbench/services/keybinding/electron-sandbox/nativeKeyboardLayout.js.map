{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/keybinding/electron-sandbox/nativeKeyboardLayout.ts"],"names":[],"mappings":"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","file":"nativeKeyboardLayout.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IKeyboardLayoutInfo, IKeyboardLayoutService, IKeyboardMapping, ILinuxKeyboardLayoutInfo, IMacKeyboardLayoutInfo, IMacLinuxKeyboardMapping, IWindowsKeyboardLayoutInfo, IWindowsKeyboardMapping } from 'vs/platform/keyboardLayout/common/keyboardLayout';\nimport { Emitter } from 'vs/base/common/event';\nimport { OperatingSystem, OS } from 'vs/base/common/platform';\nimport { CachedKeyboardMapper, IKeyboardMapper } from 'vs/platform/keyboardLayout/common/keyboardMapper';\nimport { WindowsKeyboardMapper } from 'vs/workbench/services/keybinding/common/windowsKeyboardMapper';\nimport { FallbackKeyboardMapper } from 'vs/workbench/services/keybinding/common/fallbackKeyboardMapper';\nimport { MacLinuxKeyboardMapper } from 'vs/workbench/services/keybinding/common/macLinuxKeyboardMapper';\nimport { DispatchConfig, readKeyboardConfig } from 'vs/platform/keyboardLayout/common/keyboardConfig';\nimport { IKeyboardEvent } from 'vs/platform/keybinding/common/keybinding';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { INativeKeyboardLayoutService } from 'vs/workbench/services/keybinding/electron-sandbox/nativeKeyboardLayoutService';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\n\nexport class KeyboardLayoutService extends Disposable implements IKeyboardLayoutService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeKeyboardLayout = this._register(new Emitter<void>());\n\treadonly onDidChangeKeyboardLayout = this._onDidChangeKeyboardLayout.event;\n\n\tprivate _keyboardMapper: IKeyboardMapper | null;\n\n\tconstructor(\n\t\t@INativeKeyboardLayoutService private readonly _nativeKeyboardLayoutService: INativeKeyboardLayoutService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\t\tthis._keyboardMapper = null;\n\n\t\tthis._register(this._nativeKeyboardLayoutService.onDidChangeKeyboardLayout(async () => {\n\t\t\tthis._keyboardMapper = null;\n\t\t\tthis._onDidChangeKeyboardLayout.fire();\n\t\t}));\n\n\t\tthis._register(_configurationService.onDidChangeConfiguration(async (e) => {\n\t\t\tif (e.affectsConfiguration('keyboard')) {\n\t\t\t\tthis._keyboardMapper = null;\n\t\t\t\tthis._onDidChangeKeyboardLayout.fire();\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic getRawKeyboardMapping(): IKeyboardMapping | null {\n\t\treturn this._nativeKeyboardLayoutService.getRawKeyboardMapping();\n\t}\n\n\tpublic getCurrentKeyboardLayout(): IKeyboardLayoutInfo | null {\n\t\treturn this._nativeKeyboardLayoutService.getCurrentKeyboardLayout();\n\t}\n\n\tpublic getAllKeyboardLayouts(): IKeyboardLayoutInfo[] {\n\t\treturn [];\n\t}\n\n\tpublic getKeyboardMapper(): IKeyboardMapper {\n\t\tconst config = readKeyboardConfig(this._configurationService);\n\t\tif (config.dispatch === DispatchConfig.KeyCode) {\n\t\t\t// Forcefully set to use keyCode\n\t\t\treturn new FallbackKeyboardMapper(config.mapAltGrToCtrlAlt, OS);\n\t\t}\n\t\tif (!this._keyboardMapper) {\n\t\t\tthis._keyboardMapper = new CachedKeyboardMapper(createKeyboardMapper(this.getCurrentKeyboardLayout(), this.getRawKeyboardMapping(), config.mapAltGrToCtrlAlt));\n\t\t}\n\t\treturn this._keyboardMapper;\n\t}\n\n\tpublic validateCurrentKeyboardMapping(keyboardEvent: IKeyboardEvent): void {\n\t\treturn;\n\t}\n}\n\nfunction createKeyboardMapper(layoutInfo: IKeyboardLayoutInfo | null, rawMapping: IKeyboardMapping | null, mapAltGrToCtrlAlt: boolean): IKeyboardMapper {\n\tconst _isUSStandard = isUSStandard(layoutInfo);\n\tif (OS === OperatingSystem.Windows) {\n\t\treturn new WindowsKeyboardMapper(_isUSStandard, <IWindowsKeyboardMapping>rawMapping, mapAltGrToCtrlAlt);\n\t}\n\n\tif (!rawMapping || Object.keys(rawMapping).length === 0) {\n\t\t// Looks like reading the mappings failed (most likely Mac + Japanese/Chinese keyboard layouts)\n\t\treturn new FallbackKeyboardMapper(mapAltGrToCtrlAlt, OS);\n\t}\n\n\tif (OS === OperatingSystem.Macintosh) {\n\t\tconst kbInfo = <IMacKeyboardLayoutInfo>layoutInfo;\n\t\tif (kbInfo.id === 'com.apple.keylayout.DVORAK-QWERTYCMD') {\n\t\t\t// Use keyCode based dispatching for DVORAK - QWERTY âŒ˜\n\t\t\treturn new FallbackKeyboardMapper(mapAltGrToCtrlAlt, OS);\n\t\t}\n\t}\n\n\treturn new MacLinuxKeyboardMapper(_isUSStandard, <IMacLinuxKeyboardMapping>rawMapping, mapAltGrToCtrlAlt, OS);\n}\n\nfunction isUSStandard(_kbInfo: IKeyboardLayoutInfo | null): boolean {\n\tif (!_kbInfo) {\n\t\treturn false;\n\t}\n\n\tif (OS === OperatingSystem.Linux) {\n\t\tconst kbInfo = <ILinuxKeyboardLayoutInfo>_kbInfo;\n\t\tconst layouts = kbInfo.layout.split(/,/g);\n\t\treturn (layouts[kbInfo.group] === 'us');\n\t}\n\n\tif (OS === OperatingSystem.Macintosh) {\n\t\tconst kbInfo = <IMacKeyboardLayoutInfo>_kbInfo;\n\t\treturn (kbInfo.id === 'com.apple.keylayout.US');\n\t}\n\n\tif (OS === OperatingSystem.Windows) {\n\t\tconst kbInfo = <IWindowsKeyboardLayoutInfo>_kbInfo;\n\t\treturn (kbInfo.name === '00000409');\n\t}\n\n\treturn false;\n}\n\nregisterSingleton(IKeyboardLayoutService, KeyboardLayoutService, InstantiationType.Delayed);\n"]}