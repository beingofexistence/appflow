{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/keybinding/electron-sandbox/nativeKeyboardLayoutService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAWnF,QAAA,IAAI,GAA2B,IAAA,mBAAG,EAA2C,6BAA6B,CAAC,CAAC;IASlH,IAAM,IAAI,GAAV,MAAM,IAA4B,SAAQ,eAAG;QAYnD,YACsB,kBAAwB;YAE7C,KAAK,EAAE,CAAC;YAXQ,MAAC,GAA4B,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAY,CAAC,CAAC;YACzE,8BAAyB,GAAG,IAAI,CAAC,CAAC,CAA0B,KAAK,CAAC;YAW1E,IAAI,CAAC,CAAC,GAAwB,kBAAY,CAAC,SAAS,CAAmC,kBAAkB,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC,CAAC;YACxI,IAAI,CAAC,CAAC,GAAc,IAAI,CAAC;YACzB,IAAI,CAAC,CAAC,GAAkB,IAAI,CAAC;YAC7B,IAAI,CAAC,CAAC,GAAqB,IAAI,CAAC;YAEhC,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAsB,yBAAyB,CAAC,KAAK,EAAE,EAAE,kBAAkB,EAAE,eAAe,EAAE,EAAE,EAAE;gBACtH,MAAM,IAAI,CAAC,UAAU,EAAE,CAAC;gBACxB,IAAI,qBAAqB,CAAC,IAAI,CAAC,CAAC,EAAiB,eAAe,CAAC,EAAE;oBAClE,yBAAyB;oBACzB,OAAO;iBACP;gBAED,IAAI,CAAC,CAAC,GAAkB,eAAe,CAAC;gBACxC,IAAI,CAAC,CAAC,GAAqB,kBAAkB,CAAC;gBAC9C,IAAI,CAAC,CAAC,CAA0B,IAAI,EAAE,CAAC;YACxC,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAEM,UAAU;YAChB,IAAI,CAAC,IAAI,CAAC,CAAC,EAAa;gBACvB,IAAI,CAAC,CAAC,GAAc,IAAI,CAAC,CAAC,EAAc,CAAC;aACzC;YACD,OAAO,IAAI,CAAC,CAAC,CAAY;QAC1B,CAAC;QAEO,KAAK,CAAC,CAAC;YACd,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,CAAC,CAAsB,qBAAqB,EAAE,CAAC;YACrF,MAAM,EAAE,kBAAkB,EAAE,eAAe,EAAE,GAAG,kBAAkB,CAAC;YACnE,IAAI,CAAC,CAAC,GAAkB,eAAe,CAAC;YACxC,IAAI,CAAC,CAAC,GAAqB,kBAAkB,CAAC;QAC/C,CAAC;QAEM,qBAAqB;YAC3B,OAAO,IAAI,CAAC,CAAC,CAAgB;QAC9B,CAAC;QAEM,wBAAwB;YAC9B,OAAO,IAAI,CAAC,CAAC,CAAmB;QACjC,CAAC;KACD,CAAA;IAvDY,oBAAI;mBAAJ,IAAI;QAad,WAAA,yBAAI,CAAA;OAbM,IAAI,CAuDhB;IAED,SAAS,qBAAqB,CAAC,CAA0B,EAAE,CAA0B;QACpF,IAAI,aAAE,oCAA4B,EAAE;YACnC,OAAO,IAAA,qBAAI,EAAyD,CAAC,EAAkC,CAAC,CAAC,CAAC;SAC1G;QAED,OAAO,IAAA,qBAAI,EAA2D,CAAC,EAAmC,CAAC,CAAC,CAAC;IAC9G,CAAC","file":"nativeKeyboardLayoutService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IKeyboardLayoutInfo, IKeyboardMapping, IMacLinuxKeyboardMapping, IWindowsKeyboardMapping, macLinuxKeyboardMappingEquals, windowsKeyboardMappingEquals } from 'vs/platform/keyboardLayout/common/keyboardLayout';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { OperatingSystem, OS } from 'vs/base/common/platform';\nimport { IMainProcessService } from 'vs/platform/ipc/common/mainProcessService';\nimport { INativeKeyboardLayoutService as IBaseNativeKeyboardLayoutService } from 'vs/platform/keyboardLayout/common/keyboardLayoutService';\nimport { ProxyChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport const INativeKeyboardLayoutService = createDecorator<INativeKeyboardLayoutService>('nativeKeyboardLayoutService');\n\nexport interface INativeKeyboardLayoutService {\n\treadonly _serviceBrand: undefined;\n\treadonly onDidChangeKeyboardLayout: Event<void>;\n\tgetRawKeyboardMapping(): IKeyboardMapping | null;\n\tgetCurrentKeyboardLayout(): IKeyboardLayoutInfo | null;\n}\n\nexport class NativeKeyboardLayoutService extends Disposable implements INativeKeyboardLayoutService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeKeyboardLayout = this._register(new Emitter<void>());\n\treadonly onDidChangeKeyboardLayout = this._onDidChangeKeyboardLayout.event;\n\n\tprivate readonly _keyboardLayoutService: IBaseNativeKeyboardLayoutService;\n\tprivate _initPromise: Promise<void> | null;\n\tprivate _keyboardMapping: IKeyboardMapping | null;\n\tprivate _keyboardLayoutInfo: IKeyboardLayoutInfo | null;\n\n\tconstructor(\n\t\t@IMainProcessService mainProcessService: IMainProcessService\n\t) {\n\t\tsuper();\n\t\tthis._keyboardLayoutService = ProxyChannel.toService<IBaseNativeKeyboardLayoutService>(mainProcessService.getChannel('keyboardLayout'));\n\t\tthis._initPromise = null;\n\t\tthis._keyboardMapping = null;\n\t\tthis._keyboardLayoutInfo = null;\n\n\t\tthis._register(this._keyboardLayoutService.onDidChangeKeyboardLayout(async ({ keyboardLayoutInfo, keyboardMapping }) => {\n\t\t\tawait this.initialize();\n\t\t\tif (keyboardMappingEquals(this._keyboardMapping, keyboardMapping)) {\n\t\t\t\t// the mappings are equal\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._keyboardMapping = keyboardMapping;\n\t\t\tthis._keyboardLayoutInfo = keyboardLayoutInfo;\n\t\t\tthis._onDidChangeKeyboardLayout.fire();\n\t\t}));\n\t}\n\n\tpublic initialize(): Promise<void> {\n\t\tif (!this._initPromise) {\n\t\t\tthis._initPromise = this._doInitialize();\n\t\t}\n\t\treturn this._initPromise;\n\t}\n\n\tprivate async _doInitialize(): Promise<void> {\n\t\tconst keyboardLayoutData = await this._keyboardLayoutService.getKeyboardLayoutData();\n\t\tconst { keyboardLayoutInfo, keyboardMapping } = keyboardLayoutData;\n\t\tthis._keyboardMapping = keyboardMapping;\n\t\tthis._keyboardLayoutInfo = keyboardLayoutInfo;\n\t}\n\n\tpublic getRawKeyboardMapping(): IKeyboardMapping | null {\n\t\treturn this._keyboardMapping;\n\t}\n\n\tpublic getCurrentKeyboardLayout(): IKeyboardLayoutInfo | null {\n\t\treturn this._keyboardLayoutInfo;\n\t}\n}\n\nfunction keyboardMappingEquals(a: IKeyboardMapping | null, b: IKeyboardMapping | null): boolean {\n\tif (OS === OperatingSystem.Windows) {\n\t\treturn windowsKeyboardMappingEquals(<IWindowsKeyboardMapping | null>a, <IWindowsKeyboardMapping | null>b);\n\t}\n\n\treturn macLinuxKeyboardMappingEquals(<IMacLinuxKeyboardMapping | null>a, <IMacLinuxKeyboardMapping | null>b);\n}\n"]}