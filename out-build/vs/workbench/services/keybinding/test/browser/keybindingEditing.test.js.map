{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/keybinding/test/browser/keybindingEditing.test.ts"],"names":[],"mappings":"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","file":"keybindingEditing.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as json from 'vs/base/common/json';\nimport { KeyCode } from 'vs/base/common/keyCodes';\nimport { KeyCodeChord } from 'vs/base/common/keybindings';\nimport { OS } from 'vs/base/common/platform';\nimport { ContextKeyExpr } from 'vs/platform/contextkey/common/contextkey';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { IUserFriendlyKeybinding } from 'vs/platform/keybinding/common/keybinding';\nimport { ResolvedKeybindingItem } from 'vs/platform/keybinding/common/resolvedKeybindingItem';\nimport { USLayoutResolvedKeybinding } from 'vs/platform/keybinding/common/usLayoutResolvedKeybinding';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { KeybindingsEditingService } from 'vs/workbench/services/keybinding/common/keybindingEditing';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { TestEnvironmentService, workbenchInstantiationService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { FileUserDataProvider } from 'vs/platform/userData/common/fileUserDataProvider';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { joinPath } from 'vs/base/common/resources';\nimport { InMemoryFileSystemProvider } from 'vs/platform/files/common/inMemoryFilesystemProvider';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { UserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { UserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfileService';\nimport { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\nimport { UriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentityService';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\ninterface Modifiers {\n\tmetaKey?: boolean;\n\tctrlKey?: boolean;\n\taltKey?: boolean;\n\tshiftKey?: boolean;\n}\n\nconst ROOT = URI.file('tests').with({ scheme: 'vscode-tests' });\n\nsuite('KeybindingsEditing', () => {\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\tlet instantiationService: TestInstantiationService;\n\tlet fileService: IFileService;\n\tlet environmentService: IEnvironmentService;\n\tlet userDataProfileService: IUserDataProfileService;\n\tlet testObject: KeybindingsEditingService;\n\n\tsetup(async () => {\n\n\t\tenvironmentService = TestEnvironmentService;\n\n\t\tconst logService = new NullLogService();\n\t\tfileService = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(fileService.registerProvider(ROOT.scheme, fileSystemProvider));\n\n\t\tconst userFolder = joinPath(ROOT, 'User');\n\t\tawait fileService.createFolder(userFolder);\n\n\t\tconst configService = new TestConfigurationService();\n\t\tconfigService.setUserConfiguration('files', { 'eol': '\\n' });\n\n\t\tconst uriIdentityService = disposables.add(new UriIdentityService(fileService));\n\t\tconst userDataProfilesService = disposables.add(new UserDataProfilesService(environmentService, fileService, uriIdentityService, logService));\n\t\tuserDataProfileService = disposables.add(new UserDataProfileService(userDataProfilesService.defaultProfile));\n\t\tdisposables.add(fileService.registerProvider(Schemas.vscodeUserData, disposables.add(new FileUserDataProvider(ROOT.scheme, fileSystemProvider, Schemas.vscodeUserData, userDataProfilesService, uriIdentityService, new NullLogService()))));\n\n\t\tinstantiationService = workbenchInstantiationService({\n\t\t\tfileService: () => fileService,\n\t\t\tconfigurationService: () => configService,\n\t\t\tenvironmentService: () => environmentService\n\t\t}, disposables);\n\n\t\ttestObject = disposables.add(instantiationService.createInstance(KeybindingsEditingService));\n\t});\n\n\ttest('errors cases - parse errors', async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.keybindingsResource, VSBuffer.fromString(',,,,,,,,,,,,,,'));\n\t\ttry {\n\t\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ firstChord: { keyCode: KeyCode.Escape } }), 'alt+c', undefined);\n\t\t\tassert.fail('Should fail with parse errors');\n\t\t} catch (error) {\n\t\t\tassert.strictEqual(error.message, 'Unable to write to the keybindings configuration file. Please open it to correct errors/warnings in the file and try again.');\n\t\t}\n\t});\n\n\ttest('errors cases - parse errors 2', async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.keybindingsResource, VSBuffer.fromString('[{\"key\": }]'));\n\t\ttry {\n\t\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ firstChord: { keyCode: KeyCode.Escape } }), 'alt+c', undefined);\n\t\t\tassert.fail('Should fail with parse errors');\n\t\t} catch (error) {\n\t\t\tassert.strictEqual(error.message, 'Unable to write to the keybindings configuration file. Please open it to correct errors/warnings in the file and try again.');\n\t\t}\n\t});\n\n\ttest('errors cases - dirty', () => {\n\t\tinstantiationService.stub(ITextFileService, 'isDirty', true);\n\t\treturn testObject.editKeybinding(aResolvedKeybindingItem({ firstChord: { keyCode: KeyCode.Escape } }), 'alt+c', undefined)\n\t\t\t.then(() => assert.fail('Should fail with dirty error'),\n\t\t\t\terror => assert.strictEqual(error.message, 'Unable to write because the keybindings configuration file has unsaved changes. Please save it first and then try again.'));\n\t});\n\n\ttest('errors cases - did not find an array', async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.keybindingsResource, VSBuffer.fromString('{\"key\": \"alt+c\", \"command\": \"hello\"}'));\n\t\ttry {\n\t\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ firstChord: { keyCode: KeyCode.Escape } }), 'alt+c', undefined);\n\t\t\tassert.fail('Should fail');\n\t\t} catch (error) {\n\t\t\tassert.strictEqual(error.message, 'Unable to write to the keybindings configuration file. It has an object which is not of type Array. Please open the file to clean up and try again.');\n\t\t}\n\t});\n\n\ttest('edit a default keybinding to an empty file', async () => {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.keybindingsResource, VSBuffer.fromString(''));\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: 'a' }, { key: 'escape', command: '-a' }];\n\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ firstChord: { keyCode: KeyCode.Escape }, command: 'a' }), 'alt+c', undefined);\n\t\tassert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('edit a default keybinding to an empty array', async () => {\n\t\tawait writeToKeybindingsFile();\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: 'a' }, { key: 'escape', command: '-a' }];\n\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ firstChord: { keyCode: KeyCode.Escape }, command: 'a' }), 'alt+c', undefined);\n\t\treturn assert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('edit a default keybinding in an existing array', async () => {\n\t\tawait writeToKeybindingsFile({ command: 'b', key: 'shift+c' });\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'shift+c', command: 'b' }, { key: 'alt+c', command: 'a' }, { key: 'escape', command: '-a' }];\n\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ firstChord: { keyCode: KeyCode.Escape }, command: 'a' }), 'alt+c', undefined);\n\t\treturn assert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('add another keybinding', async () => {\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: 'a' }];\n\t\tawait testObject.addKeybinding(aResolvedKeybindingItem({ firstChord: { keyCode: KeyCode.Escape }, command: 'a' }), 'alt+c', undefined);\n\t\treturn assert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('add a new default keybinding', async () => {\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: 'a' }];\n\t\tawait testObject.addKeybinding(aResolvedKeybindingItem({ command: 'a' }), 'alt+c', undefined);\n\t\treturn assert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('add a new default keybinding using edit', async () => {\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: 'a' }];\n\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ command: 'a' }), 'alt+c', undefined);\n\t\tassert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('edit an user keybinding', async () => {\n\t\tawait writeToKeybindingsFile({ key: 'escape', command: 'b' });\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: 'b' }];\n\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ firstChord: { keyCode: KeyCode.Escape }, command: 'b', isDefault: false }), 'alt+c', undefined);\n\t\tassert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('edit an user keybinding with more than one element', async () => {\n\t\tawait writeToKeybindingsFile({ key: 'escape', command: 'b' }, { key: 'alt+shift+g', command: 'c' });\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: 'b' }, { key: 'alt+shift+g', command: 'c' }];\n\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ firstChord: { keyCode: KeyCode.Escape }, command: 'b', isDefault: false }), 'alt+c', undefined);\n\t\tassert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('remove a default keybinding', async () => {\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: '-a' }];\n\t\tawait testObject.removeKeybinding(aResolvedKeybindingItem({ command: 'a', firstChord: { keyCode: KeyCode.KeyC, modifiers: { altKey: true } } }));\n\t\tassert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('remove a default keybinding should not ad duplicate entries', async () => {\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: '-a' }];\n\t\tawait testObject.removeKeybinding(aResolvedKeybindingItem({ command: 'a', firstChord: { keyCode: KeyCode.KeyC, modifiers: { altKey: true } } }));\n\t\tawait testObject.removeKeybinding(aResolvedKeybindingItem({ command: 'a', firstChord: { keyCode: KeyCode.KeyC, modifiers: { altKey: true } } }));\n\t\tawait testObject.removeKeybinding(aResolvedKeybindingItem({ command: 'a', firstChord: { keyCode: KeyCode.KeyC, modifiers: { altKey: true } } }));\n\t\tawait testObject.removeKeybinding(aResolvedKeybindingItem({ command: 'a', firstChord: { keyCode: KeyCode.KeyC, modifiers: { altKey: true } } }));\n\t\tawait testObject.removeKeybinding(aResolvedKeybindingItem({ command: 'a', firstChord: { keyCode: KeyCode.KeyC, modifiers: { altKey: true } } }));\n\t\tassert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('remove a user keybinding', async () => {\n\t\tawait writeToKeybindingsFile({ key: 'alt+c', command: 'b' });\n\t\tawait testObject.removeKeybinding(aResolvedKeybindingItem({ command: 'b', firstChord: { keyCode: KeyCode.KeyC, modifiers: { altKey: true } }, isDefault: false }));\n\t\tassert.deepStrictEqual(await getUserKeybindings(), []);\n\t});\n\n\ttest('reset an edited keybinding', async () => {\n\t\tawait writeToKeybindingsFile({ key: 'alt+c', command: 'b' });\n\t\tawait testObject.resetKeybinding(aResolvedKeybindingItem({ command: 'b', firstChord: { keyCode: KeyCode.KeyC, modifiers: { altKey: true } }, isDefault: false }));\n\t\tassert.deepStrictEqual(await getUserKeybindings(), []);\n\t});\n\n\ttest('reset a removed keybinding', async () => {\n\t\tawait writeToKeybindingsFile({ key: 'alt+c', command: '-b' });\n\t\tawait testObject.resetKeybinding(aResolvedKeybindingItem({ command: 'b', isDefault: false }));\n\t\tassert.deepStrictEqual(await getUserKeybindings(), []);\n\t});\n\n\ttest('reset multiple removed keybindings', async () => {\n\t\tawait writeToKeybindingsFile({ key: 'alt+c', command: '-b' });\n\t\tawait writeToKeybindingsFile({ key: 'alt+shift+c', command: '-b' });\n\t\tawait writeToKeybindingsFile({ key: 'escape', command: '-b' });\n\t\tawait testObject.resetKeybinding(aResolvedKeybindingItem({ command: 'b', isDefault: false }));\n\t\tassert.deepStrictEqual(await getUserKeybindings(), []);\n\t});\n\n\ttest('add a new keybinding to unassigned keybinding', async () => {\n\t\tawait writeToKeybindingsFile({ key: 'alt+c', command: '-a' });\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: '-a' }, { key: 'shift+alt+c', command: 'a' }];\n\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ command: 'a', isDefault: false }), 'shift+alt+c', undefined);\n\t\tassert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('add when expression', async () => {\n\t\tawait writeToKeybindingsFile({ key: 'alt+c', command: '-a' });\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: '-a' }, { key: 'shift+alt+c', command: 'a', when: 'editorTextFocus' }];\n\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ command: 'a', isDefault: false }), 'shift+alt+c', 'editorTextFocus');\n\t\tassert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('update command and when expression', async () => {\n\t\tawait writeToKeybindingsFile({ key: 'alt+c', command: '-a', when: 'editorTextFocus && !editorReadonly' });\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: '-a', when: 'editorTextFocus && !editorReadonly' }, { key: 'shift+alt+c', command: 'a', when: 'editorTextFocus' }];\n\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ command: 'a', isDefault: false }), 'shift+alt+c', 'editorTextFocus');\n\t\tassert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('update when expression', async () => {\n\t\tawait writeToKeybindingsFile({ key: 'alt+c', command: '-a', when: 'editorTextFocus && !editorReadonly' }, { key: 'shift+alt+c', command: 'a', when: 'editorTextFocus && !editorReadonly' });\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: '-a', when: 'editorTextFocus && !editorReadonly' }, { key: 'shift+alt+c', command: 'a', when: 'editorTextFocus' }];\n\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ command: 'a', isDefault: false, when: 'editorTextFocus && !editorReadonly' }), 'shift+alt+c', 'editorTextFocus');\n\t\tassert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\ttest('remove when expression', async () => {\n\t\tawait writeToKeybindingsFile({ key: 'alt+c', command: '-a', when: 'editorTextFocus && !editorReadonly' });\n\t\tconst expected: IUserFriendlyKeybinding[] = [{ key: 'alt+c', command: '-a', when: 'editorTextFocus && !editorReadonly' }, { key: 'shift+alt+c', command: 'a' }];\n\t\tawait testObject.editKeybinding(aResolvedKeybindingItem({ command: 'a', isDefault: false }), 'shift+alt+c', undefined);\n\t\tassert.deepStrictEqual(await getUserKeybindings(), expected);\n\t});\n\n\tasync function writeToKeybindingsFile(...keybindings: IUserFriendlyKeybinding[]): Promise<void> {\n\t\tawait fileService.writeFile(userDataProfileService.currentProfile.keybindingsResource, VSBuffer.fromString(JSON.stringify(keybindings || [])));\n\t}\n\n\tasync function getUserKeybindings(): Promise<IUserFriendlyKeybinding[]> {\n\t\treturn json.parse((await fileService.readFile(userDataProfileService.currentProfile.keybindingsResource)).value.toString());\n\t}\n\n\tfunction aResolvedKeybindingItem({ command, when, isDefault, firstChord, secondChord }: { command?: string; when?: string; isDefault?: boolean; firstChord?: { keyCode: KeyCode; modifiers?: Modifiers }; secondChord?: { keyCode: KeyCode; modifiers?: Modifiers } }): ResolvedKeybindingItem {\n\t\tconst aSimpleKeybinding = function (chord: { keyCode: KeyCode; modifiers?: Modifiers }): KeyCodeChord {\n\t\t\tconst { ctrlKey, shiftKey, altKey, metaKey } = chord.modifiers || { ctrlKey: false, shiftKey: false, altKey: false, metaKey: false };\n\t\t\treturn new KeyCodeChord(ctrlKey!, shiftKey!, altKey!, metaKey!, chord.keyCode);\n\t\t};\n\t\tconst chords: KeyCodeChord[] = [];\n\t\tif (firstChord) {\n\t\t\tchords.push(aSimpleKeybinding(firstChord));\n\t\t\tif (secondChord) {\n\t\t\t\tchords.push(aSimpleKeybinding(secondChord));\n\t\t\t}\n\t\t}\n\t\tconst keybinding = chords.length > 0 ? new USLayoutResolvedKeybinding(chords, OS) : undefined;\n\t\treturn new ResolvedKeybindingItem(keybinding, command || 'some command', null, when ? ContextKeyExpr.deserialize(when) : undefined, isDefault === undefined ? true : isDefault, null, false);\n\t}\n});\n"]}