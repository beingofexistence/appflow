{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/keybinding/test/node/keyboardMapperTestUtils.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAqBhG,SAAS,qBAAqB,CAAC,EAAO;QACrC,OAAO;YACN,KAAK,EAAE,EAAE,CAAC,QAAQ,EAAE;YACpB,SAAS,EAAE,EAAE,CAAC,YAAY,EAAE;YAC5B,mBAAmB,EAAE,EAAE,CAAC,sBAAsB,EAAE;YAChD,iBAAiB,EAAE,EAAE,CAAC,oBAAoB,EAAE;YAC5C,SAAS,EAAE,EAAE,CAAC,SAAS,EAAE;YACzB,YAAY,EAAE,EAAE,CAAC,iBAAiB,EAAE;YACpC,aAAa,EAAE,EAAE,CAAC,iBAAiB,EAAE;YACrC,2BAA2B,EAAE,EAAE,CAAC,+BAA+B,EAAE;SACjE,CAAC;IACH,CAAC;IAED,SAAgB,IAAI,CAAuB,MAAuB,EAAE,aAA6B,EAAE,QAA6B;QAC/H,MAAM,MAAM,GAAG,qBAAqB,CAAC,MAAM,CAAC,oBAAoB,CAAC,aAAa,CAAC,CAAC,CAAC;QACjF,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAHD,oBAGC;IAED,SAAgB,IAAI,CAAoB,MAAuB,EAAE,UAAe,EAAS,QAA+B;QACvH,MAAM,MAAM,GAA0B,MAAM,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,qBAAqB,CAAC,CAAC;QACtG,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC1C,CAAC;IAHD,oBAGC;IAED,SAAgB,IAAI,CAAc,IAAY;QAC7C,OAAO,cAAQ,CAAC,QAAQ,CAAC,aAAG,CAAQ,SAAS,CAAC,8CAA8C,IAAI,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;YAC5H,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;YACjC,MAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAA,0GAA0G;YACxJ,IAAI,WAAW,GAAa,IAAI,CAAC;YACjC,IAAI,CAAC,UAAU,KAAQ;gBACtB,WAAW,GAAG,KAAK,CAAC;YACrB,CAAC,CAAC,CAAC;YACH,OAAO,WAAY,CAAC;QACrB,CAAC,CAAC,CAAC;IACJ,CAAC;IAVD,oBAUC;IAED,SAAgB,IAAI,CAAU,oBAA6B,EAAE,MAAuB,EAAE,IAAY;QACjG,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAO,aAAG,CAAQ,SAAS,CAAC,8CAA8C,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;QAEnH,OAAO,cAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;YAChD,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YACxD,MAAM,MAAM,GAAG,MAAM,CAAC,aAAa,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAC7D,IAAI,MAAM,KAAK,QAAQ,IAAI,oBAAoB,EAAE;gBAChD,MAAM,QAAQ,GAAG,QAAQ,CAAC,OAAO,CAAC,kCAAkC,EAAE,mBAAmB,CAAC,CAAC;gBAC3F,cAAQ,CAAC,SAAS,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;aACrC;YACD,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;IACJ,CAAC;IAZD,oBAYC","file":"keyboardMapperTestUtils.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as path from 'vs/base/common/path';\nimport { SingleModifierChord, ResolvedKeybinding, Keybinding } from 'vs/base/common/keybindings';\nimport { Promises } from 'vs/base/node/pfs';\nimport { IKeyboardEvent } from 'vs/platform/keybinding/common/keybinding';\nimport { IKeyboardMapper } from 'vs/platform/keyboardLayout/common/keyboardMapper';\nimport { FileAccess } from 'vs/base/common/network';\n\nexport interface IResolvedKeybinding {\n\tlabel: string | null;\n\tariaLabel: string | null;\n\telectronAccelerator: string | null;\n\tuserSettingsLabel: string | null;\n\tisWYSIWYG: boolean;\n\tisMultiChord: boolean;\n\tdispatchParts: (string | null)[];\n\tsingleModifierDispatchParts: (SingleModifierChord | null)[];\n}\n\nfunction toIResolvedKeybinding(kb: ResolvedKeybinding): IResolvedKeybinding {\n\treturn {\n\t\tlabel: kb.getLabel(),\n\t\tariaLabel: kb.getAriaLabel(),\n\t\telectronAccelerator: kb.getElectronAccelerator(),\n\t\tuserSettingsLabel: kb.getUserSettingsLabel(),\n\t\tisWYSIWYG: kb.isWYSIWYG(),\n\t\tisMultiChord: kb.hasMultipleChords(),\n\t\tdispatchParts: kb.getDispatchChords(),\n\t\tsingleModifierDispatchParts: kb.getSingleModifierDispatchChords()\n\t};\n}\n\nexport function assertResolveKeyboardEvent(mapper: IKeyboardMapper, keyboardEvent: IKeyboardEvent, expected: IResolvedKeybinding): void {\n\tconst actual = toIResolvedKeybinding(mapper.resolveKeyboardEvent(keyboardEvent));\n\tassert.deepStrictEqual(actual, expected);\n}\n\nexport function assertResolveKeybinding(mapper: IKeyboardMapper, keybinding: Keybinding, expected: IResolvedKeybinding[]): void {\n\tconst actual: IResolvedKeybinding[] = mapper.resolveKeybinding(keybinding).map(toIResolvedKeybinding);\n\tassert.deepStrictEqual(actual, expected);\n}\n\nexport function readRawMapping<T>(file: string): Promise<T> {\n\treturn Promises.readFile(FileAccess.asFileUri(`vs/workbench/services/keybinding/test/node/${file}.js`).fsPath).then((buff) => {\n\t\tconst contents = buff.toString();\n\t\tconst func = new Function('define', contents);// CodeQL [SM01632] This is used in tests and we read the files as JS to avoid slowing down TS compilation\n\t\tlet rawMappings: T | null = null;\n\t\tfunc(function (value: T) {\n\t\t\trawMappings = value;\n\t\t});\n\t\treturn rawMappings!;\n\t});\n}\n\nexport function assertMapping(writeFileIfDifferent: boolean, mapper: IKeyboardMapper, file: string): Promise<void> {\n\tconst filePath = path.normalize(FileAccess.asFileUri(`vs/workbench/services/keybinding/test/node/${file}`).fsPath);\n\n\treturn Promises.readFile(filePath).then((buff) => {\n\t\tconst expected = buff.toString().replace(/\\r\\n/g, '\\n');\n\t\tconst actual = mapper.dumpDebugInfo().replace(/\\r\\n/g, '\\n');\n\t\tif (actual !== expected && writeFileIfDifferent) {\n\t\t\tconst destPath = filePath.replace(/[\\/\\\\]out[\\/\\\\]vs[\\/\\\\]workbench/, '/src/vs/workbench');\n\t\t\tPromises.writeFile(destPath, actual);\n\t\t}\n\t\tassert.deepStrictEqual(actual, expected);\n\t});\n}\n"]}