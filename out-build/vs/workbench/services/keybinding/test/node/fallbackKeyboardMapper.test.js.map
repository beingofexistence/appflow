{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/keybinding/test/node/fallbackKeyboardMapper.test.ts"],"names":[],"mappings":"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","file":"fallbackKeyboardMapper.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { KeyChord, KeyCode, KeyMod, ScanCode } from 'vs/base/common/keyCodes';\nimport { KeyCodeChord, decodeKeybinding, ScanCodeChord, Keybinding } from 'vs/base/common/keybindings';\nimport { OperatingSystem } from 'vs/base/common/platform';\nimport { FallbackKeyboardMapper } from 'vs/workbench/services/keybinding/common/fallbackKeyboardMapper';\nimport { IResolvedKeybinding, assertResolveKeyboardEvent, assertResolveKeybinding } from 'vs/workbench/services/keybinding/test/node/keyboardMapperTestUtils';\n\nsuite('keyboardMapper - MAC fallback', () => {\n\n\tconst mapper = new FallbackKeyboardMapper(false, OperatingSystem.Macintosh);\n\n\tfunction _assertResolveKeybinding(k: number, expected: IResolvedKeybinding[]): void {\n\t\tassertResolveKeybinding(mapper, decodeKeybinding(k, OperatingSystem.Macintosh)!, expected);\n\t}\n\n\ttest('resolveKeybinding Cmd+Z', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.KeyZ,\n\t\t\t[{\n\t\t\t\tlabel: '⌘Z',\n\t\t\t\tariaLabel: 'Command+Z',\n\t\t\t\telectronAccelerator: 'Cmd+Z',\n\t\t\t\tuserSettingsLabel: 'cmd+z',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['meta+Z'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Cmd+K Cmd+=', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.Equal),\n\t\t\t[{\n\t\t\t\tlabel: '⌘K ⌘=',\n\t\t\t\tariaLabel: 'Command+K Command+=',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'cmd+k cmd+=',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: true,\n\t\t\t\tdispatchParts: ['meta+K', 'meta+='],\n\t\t\t\tsingleModifierDispatchParts: [null, null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Cmd+Z', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: true,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: KeyCode.KeyZ,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: '⌘Z',\n\t\t\t\tariaLabel: 'Command+Z',\n\t\t\t\telectronAccelerator: 'Cmd+Z',\n\t\t\t\tuserSettingsLabel: 'cmd+z',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['meta+Z'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveUserBinding Cmd+[Comma] Cmd+/', () => {\n\t\tassertResolveKeybinding(\n\t\t\tmapper, new Keybinding([\n\t\t\t\tnew ScanCodeChord(false, false, false, true, ScanCode.Comma),\n\t\t\t\tnew KeyCodeChord(false, false, false, true, KeyCode.Slash),\n\t\t\t]),\n\t\t\t[{\n\t\t\t\tlabel: '⌘, ⌘/',\n\t\t\t\tariaLabel: 'Command+, Command+/',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'cmd+, cmd+/',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: true,\n\t\t\t\tdispatchParts: ['meta+,', 'meta+/'],\n\t\t\t\tsingleModifierDispatchParts: [null, null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier Meta+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: true,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: KeyCode.Meta,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: '⌘',\n\t\t\t\tariaLabel: 'Command',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'cmd',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['meta'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier Shift+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: true,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: KeyCode.Shift,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: '⇧',\n\t\t\t\tariaLabel: 'Shift',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'shift',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['shift'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier Alt+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: true,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: KeyCode.Alt,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: '⌥',\n\t\t\t\tariaLabel: 'Option',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'alt',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['alt'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Only Modifiers Ctrl+Shift+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: true,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: KeyCode.Shift,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: '⌃⇧',\n\t\t\t\tariaLabel: 'Control+Shift',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+shift',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent mapAltGrToCtrlAlt AltGr+Z', () => {\n\t\tconst mapper = new FallbackKeyboardMapper(true, OperatingSystem.Macintosh);\n\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: true,\n\t\t\t\tkeyCode: KeyCode.KeyZ,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: '⌃⌥Z',\n\t\t\t\tariaLabel: 'Control+Option+Z',\n\t\t\t\telectronAccelerator: 'Ctrl+Alt+Z',\n\t\t\t\tuserSettingsLabel: 'ctrl+alt+z',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+alt+Z'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n});\n\nsuite('keyboardMapper - LINUX fallback', () => {\n\n\tconst mapper = new FallbackKeyboardMapper(false, OperatingSystem.Linux);\n\n\tfunction _assertResolveKeybinding(k: number, expected: IResolvedKeybinding[]): void {\n\t\tassertResolveKeybinding(mapper, decodeKeybinding(k, OperatingSystem.Linux)!, expected);\n\t}\n\n\ttest('resolveKeybinding Ctrl+Z', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyMod.CtrlCmd | KeyCode.KeyZ,\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+Z',\n\t\t\t\tariaLabel: 'Control+Z',\n\t\t\t\telectronAccelerator: 'Ctrl+Z',\n\t\t\t\tuserSettingsLabel: 'ctrl+z',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+Z'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeybinding Ctrl+K Ctrl+=', () => {\n\t\t_assertResolveKeybinding(\n\t\t\tKeyChord(KeyMod.CtrlCmd | KeyCode.KeyK, KeyMod.CtrlCmd | KeyCode.Equal),\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+K Ctrl+=',\n\t\t\t\tariaLabel: 'Control+K Control+=',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+k ctrl+=',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: true,\n\t\t\t\tdispatchParts: ['ctrl+K', 'ctrl+='],\n\t\t\t\tsingleModifierDispatchParts: [null, null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Ctrl+Z', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: KeyCode.KeyZ,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl+Z',\n\t\t\t\tariaLabel: 'Control+Z',\n\t\t\t\telectronAccelerator: 'Ctrl+Z',\n\t\t\t\tuserSettingsLabel: 'ctrl+z',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+Z'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveUserBinding Ctrl+[Comma] Ctrl+/', () => {\n\t\tassertResolveKeybinding(\n\t\t\tmapper, new Keybinding([\n\t\t\t\tnew ScanCodeChord(true, false, false, false, ScanCode.Comma),\n\t\t\t\tnew KeyCodeChord(true, false, false, false, KeyCode.Slash),\n\t\t\t]),\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+, Ctrl+/',\n\t\t\t\tariaLabel: 'Control+, Control+/',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl+, ctrl+/',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: true,\n\t\t\t\tdispatchParts: ['ctrl+,', 'ctrl+/'],\n\t\t\t\tsingleModifierDispatchParts: [null, null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveUserBinding Ctrl+[Comma]', () => {\n\t\tassertResolveKeybinding(\n\t\t\tmapper, new Keybinding([\n\t\t\t\tnew ScanCodeChord(true, false, false, false, ScanCode.Comma),\n\t\t\t]),\n\t\t\t[{\n\t\t\t\tlabel: 'Ctrl+,',\n\t\t\t\tariaLabel: 'Control+,',\n\t\t\t\telectronAccelerator: 'Ctrl+,',\n\t\t\t\tuserSettingsLabel: 'ctrl+,',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+,'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}]\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent Single Modifier Ctrl+', () => {\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: true,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: false,\n\t\t\t\tkeyCode: KeyCode.Ctrl,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl',\n\t\t\t\tariaLabel: 'Control',\n\t\t\t\telectronAccelerator: null,\n\t\t\t\tuserSettingsLabel: 'ctrl',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: [null],\n\t\t\t\tsingleModifierDispatchParts: ['ctrl'],\n\t\t\t}\n\t\t);\n\t});\n\n\ttest('resolveKeyboardEvent mapAltGrToCtrlAlt AltGr+Z', () => {\n\t\tconst mapper = new FallbackKeyboardMapper(true, OperatingSystem.Linux);\n\n\t\tassertResolveKeyboardEvent(\n\t\t\tmapper,\n\t\t\t{\n\t\t\t\t_standardKeyboardEventBrand: true,\n\t\t\t\tctrlKey: false,\n\t\t\t\tshiftKey: false,\n\t\t\t\taltKey: false,\n\t\t\t\tmetaKey: false,\n\t\t\t\taltGraphKey: true,\n\t\t\t\tkeyCode: KeyCode.KeyZ,\n\t\t\t\tcode: null!\n\t\t\t},\n\t\t\t{\n\t\t\t\tlabel: 'Ctrl+Alt+Z',\n\t\t\t\tariaLabel: 'Control+Alt+Z',\n\t\t\t\telectronAccelerator: 'Ctrl+Alt+Z',\n\t\t\t\tuserSettingsLabel: 'ctrl+alt+z',\n\t\t\t\tisWYSIWYG: true,\n\t\t\t\tisMultiChord: false,\n\t\t\t\tdispatchParts: ['ctrl+alt+Z'],\n\t\t\t\tsingleModifierDispatchParts: [null],\n\t\t\t}\n\t\t);\n\t});\n});\n"]}