{"version":3,"sources":["vs/workbench/services/keybinding/browser/keyboardLayoutService.ts"],"names":[],"mappings":"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","file":"keyboardLayoutService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { KeymapInfo, IRawMixedKeyboardMapping, IKeymapInfo } from 'vs/workbench/services/keybinding/common/keymapInfo';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { DispatchConfig, readKeyboardConfig } from 'vs/platform/keyboardLayout/common/keyboardConfig';\nimport { IKeyboardMapper, CachedKeyboardMapper } from 'vs/platform/keyboardLayout/common/keyboardMapper';\nimport { OS, OperatingSystem, isMacintosh, isWindows } from 'vs/base/common/platform';\nimport { WindowsKeyboardMapper } from 'vs/workbench/services/keybinding/common/windowsKeyboardMapper';\nimport { FallbackKeyboardMapper } from 'vs/workbench/services/keybinding/common/fallbackKeyboardMapper';\nimport { IKeyboardEvent } from 'vs/platform/keybinding/common/keybinding';\nimport { MacLinuxKeyboardMapper } from 'vs/workbench/services/keybinding/common/macLinuxKeyboardMapper';\nimport { StandardKeyboardEvent } from 'vs/base/browser/keyboardEvent';\nimport { URI } from 'vs/base/common/uri';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { parse, getNodeType } from 'vs/base/common/json';\nimport * as objects from 'vs/base/common/objects';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Extensions as ConfigExtensions, IConfigurationRegistry, IConfigurationNode } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { INavigatorWithKeyboard } from 'vs/workbench/services/keybinding/browser/navigatorKeyboard';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { getKeyboardLayoutId, IKeyboardLayoutInfo, IKeyboardLayoutService, IKeyboardMapping, IMacLinuxKeyboardMapping, IWindowsKeyboardMapping } from 'vs/platform/keyboardLayout/common/keyboardLayout';\n\nexport class BrowserKeyboardMapperFactoryBase extends Disposable {\n\t// keyboard mapper\n\tprotected _initialized: boolean;\n\tprotected _keyboardMapper: IKeyboardMapper | null;\n\tprivate readonly _onDidChangeKeyboardMapper = new Emitter<void>();\n\tpublic readonly onDidChangeKeyboardMapper: Event<void> = this._onDidChangeKeyboardMapper.event;\n\n\t// keymap infos\n\tprotected _keymapInfos: KeymapInfo[];\n\tprotected _mru: KeymapInfo[];\n\tprivate _activeKeymapInfo: KeymapInfo | null;\n\n\tget activeKeymap(): KeymapInfo | null {\n\t\treturn this._activeKeymapInfo;\n\t}\n\n\tget keymapInfos(): KeymapInfo[] {\n\t\treturn this._keymapInfos;\n\t}\n\n\tget activeKeyboardLayout(): IKeyboardLayoutInfo | null {\n\t\tif (!this._initialized) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this._activeKeymapInfo?.layout ?? null;\n\t}\n\n\tget activeKeyMapping(): IKeyboardMapping | null {\n\t\tif (!this._initialized) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn this._activeKeymapInfo?.mapping ?? null;\n\t}\n\n\tget keyboardLayouts(): IKeyboardLayoutInfo[] {\n\t\treturn this._keymapInfos.map(keymapInfo => keymapInfo.layout);\n\t}\n\n\tprotected constructor(\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\t// private _notificationService: INotificationService,\n\t\t// private _storageService: IStorageService,\n\t\t// private _commandService: ICommandService\n\t) {\n\t\tsuper();\n\t\tthis._keyboardMapper = null;\n\t\tthis._initialized = false;\n\t\tthis._keymapInfos = [];\n\t\tthis._mru = [];\n\t\tthis._activeKeymapInfo = null;\n\n\t\tif ((<INavigatorWithKeyboard>navigator).keyboard && (<INavigatorWithKeyboard>navigator).keyboard.addEventListener) {\n\t\t\t(<INavigatorWithKeyboard>navigator).keyboard.addEventListener!('layoutchange', () => {\n\t\t\t\t// Update user keyboard map settings\n\t\t\t\tthis._getBrowserKeyMapping().then((mapping: IKeyboardMapping | null) => {\n\t\t\t\t\tif (this.isKeyMappingActive(mapping)) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.setLayoutFromBrowserAPI();\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tthis._register(this._configurationService.onDidChangeConfiguration((e) => {\n\t\t\tif (e.affectsConfiguration('keyboard')) {\n\t\t\t\tthis._keyboardMapper = null;\n\t\t\t\tthis._onDidChangeKeyboardMapper.fire();\n\t\t\t}\n\t\t}));\n\t}\n\n\tregisterKeyboardLayout(layout: KeymapInfo) {\n\t\tthis._keymapInfos.push(layout);\n\t\tthis._mru = this._keymapInfos;\n\t}\n\n\tremoveKeyboardLayout(layout: KeymapInfo): void {\n\t\tlet index = this._mru.indexOf(layout);\n\t\tthis._mru.splice(index, 1);\n\t\tindex = this._keymapInfos.indexOf(layout);\n\t\tthis._keymapInfos.splice(index, 1);\n\t}\n\n\tgetMatchedKeymapInfo(keyMapping: IKeyboardMapping | null): { result: KeymapInfo; score: number } | null {\n\t\tif (!keyMapping) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst usStandard = this.getUSStandardLayout();\n\n\t\tif (usStandard) {\n\t\t\tlet maxScore = usStandard.getScore(keyMapping);\n\t\t\tif (maxScore === 0) {\n\t\t\t\treturn {\n\t\t\t\t\tresult: usStandard,\n\t\t\t\t\tscore: 0\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tlet result = usStandard;\n\t\t\tfor (let i = 0; i < this._mru.length; i++) {\n\t\t\t\tconst score = this._mru[i].getScore(keyMapping);\n\t\t\t\tif (score > maxScore) {\n\t\t\t\t\tif (score === 0) {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tresult: this._mru[i],\n\t\t\t\t\t\t\tscore: 0\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\tmaxScore = score;\n\t\t\t\t\tresult = this._mru[i];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tresult,\n\t\t\t\tscore: maxScore\n\t\t\t};\n\t\t}\n\n\t\tfor (let i = 0; i < this._mru.length; i++) {\n\t\t\tif (this._mru[i].fuzzyEqual(keyMapping)) {\n\t\t\t\treturn {\n\t\t\t\t\tresult: this._mru[i],\n\t\t\t\t\tscore: 0\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tgetUSStandardLayout() {\n\t\tconst usStandardLayouts = this._mru.filter(layout => layout.layout.isUSStandard);\n\n\t\tif (usStandardLayouts.length) {\n\t\t\treturn usStandardLayouts[0];\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tisKeyMappingActive(keymap: IKeyboardMapping | null) {\n\t\treturn this._activeKeymapInfo && keymap && this._activeKeymapInfo.fuzzyEqual(keymap);\n\t}\n\n\tsetUSKeyboardLayout() {\n\t\tthis._activeKeymapInfo = this.getUSStandardLayout();\n\t}\n\n\tsetActiveKeyMapping(keymap: IKeyboardMapping | null) {\n\t\tlet keymapUpdated = false;\n\t\tconst matchedKeyboardLayout = this.getMatchedKeymapInfo(keymap);\n\t\tif (matchedKeyboardLayout) {\n\t\t\t// let score = matchedKeyboardLayout.score;\n\n\t\t\t// Due to https://bugs.chromium.org/p/chromium/issues/detail?id=977609, any key after a dead key will generate a wrong mapping,\n\t\t\t// we shoud avoid yielding the false error.\n\t\t\t// if (keymap && score < 0) {\n\t\t\t// const donotAskUpdateKey = 'missing.keyboardlayout.donotask';\n\t\t\t// if (this._storageService.getBoolean(donotAskUpdateKey, StorageScope.APPLICATION)) {\n\t\t\t// \treturn;\n\t\t\t// }\n\n\t\t\t// the keyboard layout doesn't actually match the key event or the keymap from chromium\n\t\t\t// this._notificationService.prompt(\n\t\t\t// \tSeverity.Info,\n\t\t\t// \tnls.localize('missing.keyboardlayout', 'Fail to find matching keyboard layout'),\n\t\t\t// \t[{\n\t\t\t// \t\tlabel: nls.localize('keyboardLayoutMissing.configure', \"Configure\"),\n\t\t\t// \t\trun: () => this._commandService.executeCommand('workbench.action.openKeyboardLayoutPicker')\n\t\t\t// \t}, {\n\t\t\t// \t\tlabel: nls.localize('neverAgain', \"Don't Show Again\"),\n\t\t\t// \t\tisSecondary: true,\n\t\t\t// \t\trun: () => this._storageService.store(donotAskUpdateKey, true, StorageScope.APPLICATION)\n\t\t\t// \t}]\n\t\t\t// );\n\n\t\t\t// console.warn('Active keymap/keyevent does not match current keyboard layout', JSON.stringify(keymap), this._activeKeymapInfo ? JSON.stringify(this._activeKeymapInfo.layout) : '');\n\n\t\t\t// return;\n\t\t\t// }\n\n\t\t\tif (!this._activeKeymapInfo) {\n\t\t\t\tthis._activeKeymapInfo = matchedKeyboardLayout.result;\n\t\t\t\tkeymapUpdated = true;\n\t\t\t} else if (keymap) {\n\t\t\t\tif (matchedKeyboardLayout.result.getScore(keymap) > this._activeKeymapInfo.getScore(keymap)) {\n\t\t\t\t\tthis._activeKeymapInfo = matchedKeyboardLayout.result;\n\t\t\t\t\tkeymapUpdated = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (!this._activeKeymapInfo) {\n\t\t\tthis._activeKeymapInfo = this.getUSStandardLayout();\n\t\t\tkeymapUpdated = true;\n\t\t}\n\n\t\tif (!this._activeKeymapInfo || !keymapUpdated) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst index = this._mru.indexOf(this._activeKeymapInfo);\n\n\t\tthis._mru.splice(index, 1);\n\t\tthis._mru.unshift(this._activeKeymapInfo);\n\n\t\tthis._setKeyboardData(this._activeKeymapInfo);\n\t}\n\n\tsetActiveKeymapInfo(keymapInfo: KeymapInfo) {\n\t\tthis._activeKeymapInfo = keymapInfo;\n\n\t\tconst index = this._mru.indexOf(this._activeKeymapInfo);\n\n\t\tif (index === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._mru.splice(index, 1);\n\t\tthis._mru.unshift(this._activeKeymapInfo);\n\n\t\tthis._setKeyboardData(this._activeKeymapInfo);\n\t}\n\n\tpublic setLayoutFromBrowserAPI(): void {\n\t\tthis._updateKeyboardLayoutAsync(this._initialized);\n\t}\n\n\tprivate _updateKeyboardLayoutAsync(initialized: boolean, keyboardEvent?: IKeyboardEvent) {\n\t\tif (!initialized) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._getBrowserKeyMapping(keyboardEvent).then(keyMap => {\n\t\t\t// might be false positive\n\t\t\tif (this.isKeyMappingActive(keyMap)) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis.setActiveKeyMapping(keyMap);\n\t\t});\n\t}\n\n\tpublic getKeyboardMapper(): IKeyboardMapper {\n\t\tconst config = readKeyboardConfig(this._configurationService);\n\t\tif (config.dispatch === DispatchConfig.KeyCode || !this._initialized || !this._activeKeymapInfo) {\n\t\t\t// Forcefully set to use keyCode\n\t\t\treturn new FallbackKeyboardMapper(config.mapAltGrToCtrlAlt, OS);\n\t\t}\n\t\tif (!this._keyboardMapper) {\n\t\t\tthis._keyboardMapper = new CachedKeyboardMapper(BrowserKeyboardMapperFactory._createKeyboardMapper(this._activeKeymapInfo, config.mapAltGrToCtrlAlt));\n\t\t}\n\t\treturn this._keyboardMapper;\n\t}\n\n\tpublic validateCurrentKeyboardMapping(keyboardEvent: IKeyboardEvent): void {\n\t\tif (!this._initialized) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isCurrentKeyboard = this._validateCurrentKeyboardMapping(keyboardEvent);\n\n\t\tif (isCurrentKeyboard) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._updateKeyboardLayoutAsync(true, keyboardEvent);\n\t}\n\n\tpublic setKeyboardLayout(layoutName: string) {\n\t\tconst matchedLayouts: KeymapInfo[] = this.keymapInfos.filter(keymapInfo => getKeyboardLayoutId(keymapInfo.layout) === layoutName);\n\n\t\tif (matchedLayouts.length > 0) {\n\t\t\tthis.setActiveKeymapInfo(matchedLayouts[0]);\n\t\t}\n\t}\n\n\tprivate _setKeyboardData(keymapInfo: KeymapInfo): void {\n\t\tthis._initialized = true;\n\n\t\tthis._keyboardMapper = null;\n\t\tthis._onDidChangeKeyboardMapper.fire();\n\t}\n\n\tprivate static _createKeyboardMapper(keymapInfo: KeymapInfo, mapAltGrToCtrlAlt: boolean): IKeyboardMapper {\n\t\tconst rawMapping = keymapInfo.mapping;\n\t\tconst isUSStandard = !!keymapInfo.layout.isUSStandard;\n\t\tif (OS === OperatingSystem.Windows) {\n\t\t\treturn new WindowsKeyboardMapper(isUSStandard, <IWindowsKeyboardMapping>rawMapping, mapAltGrToCtrlAlt);\n\t\t}\n\t\tif (Object.keys(rawMapping).length === 0) {\n\t\t\t// Looks like reading the mappings failed (most likely Mac + Japanese/Chinese keyboard layouts)\n\t\t\treturn new FallbackKeyboardMapper(mapAltGrToCtrlAlt, OS);\n\t\t}\n\n\t\treturn new MacLinuxKeyboardMapper(isUSStandard, <IMacLinuxKeyboardMapping>rawMapping, mapAltGrToCtrlAlt, OS);\n\t}\n\n\t//#region Browser API\n\tprivate _validateCurrentKeyboardMapping(keyboardEvent: IKeyboardEvent): boolean {\n\t\tif (!this._initialized) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst standardKeyboardEvent = keyboardEvent as StandardKeyboardEvent;\n\t\tconst currentKeymap = this._activeKeymapInfo;\n\t\tif (!currentKeymap) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (standardKeyboardEvent.browserEvent.key === 'Dead' || standardKeyboardEvent.browserEvent.isComposing) {\n\t\t\treturn true;\n\t\t}\n\n\t\tconst mapping = currentKeymap.mapping[standardKeyboardEvent.code];\n\n\t\tif (!mapping) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (mapping.value === '') {\n\t\t\t// The value is empty when the key is not a printable character, we skip validation.\n\t\t\tif (keyboardEvent.ctrlKey || keyboardEvent.metaKey) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis._getBrowserKeyMapping().then((keymap: IRawMixedKeyboardMapping | null) => {\n\t\t\t\t\t\tif (this.isKeyMappingActive(keymap)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.setLayoutFromBrowserAPI();\n\t\t\t\t\t});\n\t\t\t\t}, 350);\n\t\t\t}\n\t\t\treturn true;\n\t\t}\n\n\t\tconst expectedValue = standardKeyboardEvent.altKey && standardKeyboardEvent.shiftKey ? mapping.withShiftAltGr :\n\t\t\tstandardKeyboardEvent.altKey ? mapping.withAltGr :\n\t\t\t\tstandardKeyboardEvent.shiftKey ? mapping.withShift : mapping.value;\n\n\t\tconst isDead = (standardKeyboardEvent.altKey && standardKeyboardEvent.shiftKey && mapping.withShiftAltGrIsDeadKey) ||\n\t\t\t(standardKeyboardEvent.altKey && mapping.withAltGrIsDeadKey) ||\n\t\t\t(standardKeyboardEvent.shiftKey && mapping.withShiftIsDeadKey) ||\n\t\t\tmapping.valueIsDeadKey;\n\n\t\tif (isDead && standardKeyboardEvent.browserEvent.key !== 'Dead') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// TODO, this assumption is wrong as `browserEvent.key` doesn't necessarily equal expectedValue from real keymap\n\t\tif (!isDead && standardKeyboardEvent.browserEvent.key !== expectedValue) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate async _getBrowserKeyMapping(keyboardEvent?: IKeyboardEvent): Promise<IRawMixedKeyboardMapping | null> {\n\t\tif ((navigator as any).keyboard) {\n\t\t\ttry {\n\t\t\t\treturn (navigator as any).keyboard.getLayoutMap().then((e: any) => {\n\t\t\t\t\tconst ret: IKeyboardMapping = {};\n\t\t\t\t\tfor (const key of e) {\n\t\t\t\t\t\tret[key[0]] = {\n\t\t\t\t\t\t\t'value': key[1],\n\t\t\t\t\t\t\t'withShift': '',\n\t\t\t\t\t\t\t'withAltGr': '',\n\t\t\t\t\t\t\t'withShiftAltGr': ''\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn ret;\n\n\t\t\t\t\t// const matchedKeyboardLayout = this.getMatchedKeymapInfo(ret);\n\n\t\t\t\t\t// if (matchedKeyboardLayout) {\n\t\t\t\t\t// \treturn matchedKeyboardLayout.result.mapping;\n\t\t\t\t\t// }\n\n\t\t\t\t\t// return null;\n\t\t\t\t});\n\t\t\t} catch {\n\t\t\t\t// getLayoutMap can throw if invoked from a nested browsing context\n\t\t\t}\n\t\t} else if (keyboardEvent && !keyboardEvent.shiftKey && !keyboardEvent.altKey && !keyboardEvent.metaKey && !keyboardEvent.metaKey) {\n\t\t\tconst ret: IKeyboardMapping = {};\n\t\t\tconst standardKeyboardEvent = keyboardEvent as StandardKeyboardEvent;\n\t\t\tret[standardKeyboardEvent.browserEvent.code] = {\n\t\t\t\t'value': standardKeyboardEvent.browserEvent.key,\n\t\t\t\t'withShift': '',\n\t\t\t\t'withAltGr': '',\n\t\t\t\t'withShiftAltGr': ''\n\t\t\t};\n\n\t\t\tconst matchedKeyboardLayout = this.getMatchedKeymapInfo(ret);\n\n\t\t\tif (matchedKeyboardLayout) {\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t//#endregion\n}\n\nexport class BrowserKeyboardMapperFactory extends BrowserKeyboardMapperFactoryBase {\n\tconstructor(configurationService: IConfigurationService, notificationService: INotificationService, storageService: IStorageService, commandService: ICommandService) {\n\t\t// super(notificationService, storageService, commandService);\n\t\tsuper(configurationService);\n\n\t\tconst platform = isWindows ? 'win' : isMacintosh ? 'darwin' : 'linux';\n\n\t\timport('vs/workbench/services/keybinding/browser/keyboardLayouts/layout.contribution.' + platform).then((m) => {\n\t\t\tconst keymapInfos: IKeymapInfo[] = m.KeyboardLayoutContribution.INSTANCE.layoutInfos;\n\t\t\tthis._keymapInfos.push(...keymapInfos.map(info => (new KeymapInfo(info.layout, info.secondaryLayouts, info.mapping, info.isUserKeyboardLayout))));\n\t\t\tthis._mru = this._keymapInfos;\n\t\t\tthis._initialized = true;\n\t\t\tthis.setLayoutFromBrowserAPI();\n\t\t});\n\t}\n}\n\nclass UserKeyboardLayout extends Disposable {\n\n\tprivate readonly reloadConfigurationScheduler: RunOnceScheduler;\n\tprotected readonly _onDidChange: Emitter<void> = this._register(new Emitter<void>());\n\treadonly onDidChange: Event<void> = this._onDidChange.event;\n\n\tprivate _keyboardLayout: KeymapInfo | null;\n\tget keyboardLayout(): KeymapInfo | null { return this._keyboardLayout; }\n\n\tconstructor(\n\t\tprivate readonly keyboardLayoutResource: URI,\n\t\tprivate readonly fileService: IFileService\n\t) {\n\t\tsuper();\n\n\t\tthis._keyboardLayout = null;\n\n\t\tthis.reloadConfigurationScheduler = this._register(new RunOnceScheduler(() => this.reload().then(changed => {\n\t\t\tif (changed) {\n\t\t\t\tthis._onDidChange.fire();\n\t\t\t}\n\t\t}), 50));\n\n\t\tthis._register(Event.filter(this.fileService.onDidFilesChange, e => e.contains(this.keyboardLayoutResource))(() => this.reloadConfigurationScheduler.schedule()));\n\t}\n\n\tasync initialize(): Promise<void> {\n\t\tawait this.reload();\n\t}\n\n\tprivate async reload(): Promise<boolean> {\n\t\tconst existing = this._keyboardLayout;\n\t\ttry {\n\t\t\tconst content = await this.fileService.readFile(this.keyboardLayoutResource);\n\t\t\tconst value = parse(content.value.toString());\n\t\t\tif (getNodeType(value) === 'object') {\n\t\t\t\tconst layoutInfo = value.layout;\n\t\t\t\tconst mappings = value.rawMapping;\n\t\t\t\tthis._keyboardLayout = KeymapInfo.createKeyboardLayoutFromDebugInfo(layoutInfo, mappings, true);\n\t\t\t} else {\n\t\t\t\tthis._keyboardLayout = null;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis._keyboardLayout = null;\n\t\t}\n\n\t\treturn existing ? !objects.equals(existing, this._keyboardLayout) : true;\n\t}\n\n}\n\nexport class BrowserKeyboardLayoutService extends Disposable implements IKeyboardLayoutService {\n\tpublic _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeKeyboardLayout = new Emitter<void>();\n\tpublic readonly onDidChangeKeyboardLayout: Event<void> = this._onDidChangeKeyboardLayout.event;\n\n\tprivate _userKeyboardLayout: UserKeyboardLayout;\n\n\tprivate readonly _factory: BrowserKeyboardMapperFactory;\n\tprivate _keyboardLayoutMode: string;\n\n\tconstructor(\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IFileService fileService: IFileService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ICommandService commandService: ICommandService,\n\t\t@IConfigurationService private configurationService: IConfigurationService,\n\t) {\n\t\tsuper();\n\t\tconst keyboardConfig = configurationService.getValue<{ layout: string }>('keyboard');\n\t\tconst layout = keyboardConfig.layout;\n\t\tthis._keyboardLayoutMode = layout ?? 'autodetect';\n\t\tthis._factory = new BrowserKeyboardMapperFactory(configurationService, notificationService, storageService, commandService);\n\n\t\tthis._register(this._factory.onDidChangeKeyboardMapper(() => {\n\t\t\tthis._onDidChangeKeyboardLayout.fire();\n\t\t}));\n\n\t\tif (layout && layout !== 'autodetect') {\n\t\t\t// set keyboard layout\n\t\t\tthis._factory.setKeyboardLayout(layout);\n\t\t}\n\n\t\tthis._register(configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('keyboard.layout')) {\n\t\t\t\tconst keyboardConfig = configurationService.getValue<{ layout: string }>('keyboard');\n\t\t\t\tconst layout = keyboardConfig.layout;\n\t\t\t\tthis._keyboardLayoutMode = layout;\n\n\t\t\t\tif (layout === 'autodetect') {\n\t\t\t\t\tthis._factory.setLayoutFromBrowserAPI();\n\t\t\t\t} else {\n\t\t\t\t\tthis._factory.setKeyboardLayout(layout);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\tthis._userKeyboardLayout = new UserKeyboardLayout(environmentService.keyboardLayoutResource, fileService);\n\t\tthis._userKeyboardLayout.initialize().then(() => {\n\t\t\tif (this._userKeyboardLayout.keyboardLayout) {\n\t\t\t\tthis._factory.registerKeyboardLayout(this._userKeyboardLayout.keyboardLayout);\n\n\t\t\t\tthis.setUserKeyboardLayoutIfMatched();\n\t\t\t}\n\t\t});\n\n\t\tthis._register(this._userKeyboardLayout.onDidChange(() => {\n\t\t\tconst userKeyboardLayouts = this._factory.keymapInfos.filter(layout => layout.isUserKeyboardLayout);\n\n\t\t\tif (userKeyboardLayouts.length) {\n\t\t\t\tif (this._userKeyboardLayout.keyboardLayout) {\n\t\t\t\t\tuserKeyboardLayouts[0].update(this._userKeyboardLayout.keyboardLayout);\n\t\t\t\t} else {\n\t\t\t\t\tthis._factory.removeKeyboardLayout(userKeyboardLayouts[0]);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (this._userKeyboardLayout.keyboardLayout) {\n\t\t\t\t\tthis._factory.registerKeyboardLayout(this._userKeyboardLayout.keyboardLayout);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.setUserKeyboardLayoutIfMatched();\n\t\t}));\n\t}\n\n\tsetUserKeyboardLayoutIfMatched() {\n\t\tconst keyboardConfig = this.configurationService.getValue<{ layout: string }>('keyboard');\n\t\tconst layout = keyboardConfig.layout;\n\n\t\tif (layout && this._userKeyboardLayout.keyboardLayout) {\n\t\t\tif (getKeyboardLayoutId(this._userKeyboardLayout.keyboardLayout.layout) === layout && this._factory.activeKeymap) {\n\n\t\t\t\tif (!this._userKeyboardLayout.keyboardLayout.equal(this._factory.activeKeymap)) {\n\t\t\t\t\tthis._factory.setActiveKeymapInfo(this._userKeyboardLayout.keyboardLayout);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tgetKeyboardMapper(): IKeyboardMapper {\n\t\treturn this._factory.getKeyboardMapper();\n\t}\n\n\tpublic getCurrentKeyboardLayout(): IKeyboardLayoutInfo | null {\n\t\treturn this._factory.activeKeyboardLayout;\n\t}\n\n\tpublic getAllKeyboardLayouts(): IKeyboardLayoutInfo[] {\n\t\treturn this._factory.keyboardLayouts;\n\t}\n\n\tpublic getRawKeyboardMapping(): IKeyboardMapping | null {\n\t\treturn this._factory.activeKeyMapping;\n\t}\n\n\tpublic validateCurrentKeyboardMapping(keyboardEvent: IKeyboardEvent): void {\n\t\tif (this._keyboardLayoutMode !== 'autodetect') {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._factory.validateCurrentKeyboardMapping(keyboardEvent);\n\t}\n}\n\nregisterSingleton(IKeyboardLayoutService, BrowserKeyboardLayoutService, InstantiationType.Delayed);\n\n// Configuration\nconst configurationRegistry = Registry.as<IConfigurationRegistry>(ConfigExtensions.Configuration);\nconst keyboardConfiguration: IConfigurationNode = {\n\t'id': 'keyboard',\n\t'order': 15,\n\t'type': 'object',\n\t'title': nls.localize('keyboardConfigurationTitle', \"Keyboard\"),\n\t'properties': {\n\t\t'keyboard.layout': {\n\t\t\t'type': 'string',\n\t\t\t'default': 'autodetect',\n\t\t\t'description': nls.localize('keyboard.layout.config', \"Control the keyboard layout used in web.\")\n\t\t}\n\t}\n};\n\nconfigurationRegistry.registerConfiguration(keyboardConfiguration);\n"]}