{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/keybinding/common/windowsKeyboardMapper.ts"],"names":[],"mappings":"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","file":"windowsKeyboardMapper.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CharCode } from 'vs/base/common/charCode';\nimport { KeyCode, KeyCodeUtils, IMMUTABLE_CODE_TO_KEY_CODE, ScanCode, ScanCodeUtils, NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE } from 'vs/base/common/keyCodes';\nimport { ResolvedKeybinding, KeyCodeChord, SingleModifierChord, ScanCodeChord, Keybinding, Chord } from 'vs/base/common/keybindings';\nimport { UILabelProvider } from 'vs/base/common/keybindingLabels';\nimport { OperatingSystem } from 'vs/base/common/platform';\nimport { IKeyboardEvent } from 'vs/platform/keybinding/common/keybinding';\nimport { IKeyboardMapper } from 'vs/platform/keyboardLayout/common/keyboardMapper';\nimport { BaseResolvedKeybinding } from 'vs/platform/keybinding/common/baseResolvedKeybinding';\nimport { toEmptyArrayIfContainsNull } from 'vs/platform/keybinding/common/resolvedKeybindingItem';\nimport { IWindowsKeyboardMapping } from 'vs/platform/keyboardLayout/common/keyboardLayout';\n\nconst LOG = false;\nfunction log(str: string): void {\n\tif (LOG) {\n\t\tconsole.info(str);\n\t}\n}\n\n\nexport interface IScanCodeMapping {\n\tscanCode: ScanCode;\n\tkeyCode: KeyCode;\n\tvalue: string;\n\twithShift: string;\n\twithAltGr: string;\n\twithShiftAltGr: string;\n}\n\nexport class WindowsNativeResolvedKeybinding extends BaseResolvedKeybinding<KeyCodeChord> {\n\n\tprivate readonly _mapper: WindowsKeyboardMapper;\n\n\tconstructor(mapper: WindowsKeyboardMapper, chords: KeyCodeChord[]) {\n\t\tsuper(OperatingSystem.Windows, chords);\n\t\tthis._mapper = mapper;\n\t}\n\n\tprotected _getLabel(chord: KeyCodeChord): string | null {\n\t\tif (chord.isDuplicateModifierCase()) {\n\t\t\treturn '';\n\t\t}\n\t\treturn this._mapper.getUILabelForKeyCode(chord.keyCode);\n\t}\n\n\tprivate _getUSLabelForKeybinding(chord: KeyCodeChord): string | null {\n\t\tif (chord.isDuplicateModifierCase()) {\n\t\t\treturn '';\n\t\t}\n\t\treturn KeyCodeUtils.toString(chord.keyCode);\n\t}\n\n\tpublic getUSLabel(): string | null {\n\t\treturn UILabelProvider.toLabel(this._os, this._chords, (keybinding) => this._getUSLabelForKeybinding(keybinding));\n\t}\n\n\tprotected _getAriaLabel(chord: KeyCodeChord): string | null {\n\t\tif (chord.isDuplicateModifierCase()) {\n\t\t\treturn '';\n\t\t}\n\t\treturn this._mapper.getAriaLabelForKeyCode(chord.keyCode);\n\t}\n\n\tprotected _getElectronAccelerator(chord: KeyCodeChord): string | null {\n\t\treturn this._mapper.getElectronAcceleratorForKeyBinding(chord);\n\t}\n\n\tprotected _getUserSettingsLabel(chord: KeyCodeChord): string | null {\n\t\tif (chord.isDuplicateModifierCase()) {\n\t\t\treturn '';\n\t\t}\n\t\tconst result = this._mapper.getUserSettingsLabelForKeyCode(chord.keyCode);\n\t\treturn (result ? result.toLowerCase() : result);\n\t}\n\n\tprotected _isWYSIWYG(chord: KeyCodeChord): boolean {\n\t\treturn this.__isWYSIWYG(chord.keyCode);\n\t}\n\n\tprivate __isWYSIWYG(keyCode: KeyCode): boolean {\n\t\tif (\n\t\t\tkeyCode === KeyCode.LeftArrow\n\t\t\t|| keyCode === KeyCode.UpArrow\n\t\t\t|| keyCode === KeyCode.RightArrow\n\t\t\t|| keyCode === KeyCode.DownArrow\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t\tconst ariaLabel = this._mapper.getAriaLabelForKeyCode(keyCode);\n\t\tconst userSettingsLabel = this._mapper.getUserSettingsLabelForKeyCode(keyCode);\n\t\treturn (ariaLabel === userSettingsLabel);\n\t}\n\n\tprotected _getChordDispatch(chord: KeyCodeChord): string | null {\n\t\tif (chord.isModifierKey()) {\n\t\t\treturn null;\n\t\t}\n\t\tlet result = '';\n\n\t\tif (chord.ctrlKey) {\n\t\t\tresult += 'ctrl+';\n\t\t}\n\t\tif (chord.shiftKey) {\n\t\t\tresult += 'shift+';\n\t\t}\n\t\tif (chord.altKey) {\n\t\t\tresult += 'alt+';\n\t\t}\n\t\tif (chord.metaKey) {\n\t\t\tresult += 'meta+';\n\t\t}\n\t\tresult += KeyCodeUtils.toString(chord.keyCode);\n\n\t\treturn result;\n\t}\n\n\tprotected _getSingleModifierChordDispatch(chord: KeyCodeChord): SingleModifierChord | null {\n\t\tif (chord.keyCode === KeyCode.Ctrl && !chord.shiftKey && !chord.altKey && !chord.metaKey) {\n\t\t\treturn 'ctrl';\n\t\t}\n\t\tif (chord.keyCode === KeyCode.Shift && !chord.ctrlKey && !chord.altKey && !chord.metaKey) {\n\t\t\treturn 'shift';\n\t\t}\n\t\tif (chord.keyCode === KeyCode.Alt && !chord.ctrlKey && !chord.shiftKey && !chord.metaKey) {\n\t\t\treturn 'alt';\n\t\t}\n\t\tif (chord.keyCode === KeyCode.Meta && !chord.ctrlKey && !chord.shiftKey && !chord.altKey) {\n\t\t\treturn 'meta';\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate static getProducedCharCode(chord: ScanCodeChord, mapping: IScanCodeMapping): string | null {\n\t\tif (!mapping) {\n\t\t\treturn null;\n\t\t}\n\t\tif (chord.ctrlKey && chord.shiftKey && chord.altKey) {\n\t\t\treturn mapping.withShiftAltGr;\n\t\t}\n\t\tif (chord.ctrlKey && chord.altKey) {\n\t\t\treturn mapping.withAltGr;\n\t\t}\n\t\tif (chord.shiftKey) {\n\t\t\treturn mapping.withShift;\n\t\t}\n\t\treturn mapping.value;\n\t}\n\n\tpublic static getProducedChar(chord: ScanCodeChord, mapping: IScanCodeMapping): string {\n\t\tconst char = this.getProducedCharCode(chord, mapping);\n\t\tif (char === null || char.length === 0) {\n\t\t\treturn ' --- ';\n\t\t}\n\t\treturn '  ' + char + '  ';\n\t}\n}\n\nexport class WindowsKeyboardMapper implements IKeyboardMapper {\n\n\tprivate readonly _codeInfo: IScanCodeMapping[];\n\tprivate readonly _scanCodeToKeyCode: KeyCode[];\n\tprivate readonly _keyCodeToLabel: Array<string | null> = [];\n\tprivate readonly _keyCodeExists: boolean[];\n\n\tconstructor(\n\t\tprivate readonly _isUSStandard: boolean,\n\t\trawMappings: IWindowsKeyboardMapping,\n\t\tprivate readonly _mapAltGrToCtrlAlt: boolean\n\t) {\n\t\tthis._scanCodeToKeyCode = [];\n\t\tthis._keyCodeToLabel = [];\n\t\tthis._keyCodeExists = [];\n\t\tthis._keyCodeToLabel[KeyCode.Unknown] = KeyCodeUtils.toString(KeyCode.Unknown);\n\n\t\tfor (let scanCode = ScanCode.None; scanCode < ScanCode.MAX_VALUE; scanCode++) {\n\t\t\tconst immutableKeyCode = IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n\t\t\tif (immutableKeyCode !== KeyCode.DependsOnKbLayout) {\n\t\t\t\tthis._scanCodeToKeyCode[scanCode] = immutableKeyCode;\n\t\t\t\tthis._keyCodeToLabel[immutableKeyCode] = KeyCodeUtils.toString(immutableKeyCode);\n\t\t\t\tthis._keyCodeExists[immutableKeyCode] = true;\n\t\t\t}\n\t\t}\n\n\t\tconst producesLetter: boolean[] = [];\n\t\tlet producesLetters = false;\n\n\t\tthis._codeInfo = [];\n\t\tfor (const strCode in rawMappings) {\n\t\t\tif (rawMappings.hasOwnProperty(strCode)) {\n\t\t\t\tconst scanCode = ScanCodeUtils.toEnum(strCode);\n\t\t\t\tif (scanCode === ScanCode.None) {\n\t\t\t\t\tlog(`Unknown scanCode ${strCode} in mapping.`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tconst rawMapping = rawMappings[strCode];\n\n\t\t\t\tconst immutableKeyCode = IMMUTABLE_CODE_TO_KEY_CODE[scanCode];\n\t\t\t\tif (immutableKeyCode !== KeyCode.DependsOnKbLayout) {\n\t\t\t\t\tconst keyCode = NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE[rawMapping.vkey] || KeyCode.Unknown;\n\t\t\t\t\tif (keyCode === KeyCode.Unknown || immutableKeyCode === keyCode) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (scanCode !== ScanCode.NumpadComma) {\n\t\t\t\t\t\t// Looks like ScanCode.NumpadComma doesn't always map to KeyCode.NUMPAD_SEPARATOR\n\t\t\t\t\t\t// e.g. on POR - PTB\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst value = rawMapping.value;\n\t\t\t\tconst withShift = rawMapping.withShift;\n\t\t\t\tconst withAltGr = rawMapping.withAltGr;\n\t\t\t\tconst withShiftAltGr = rawMapping.withShiftAltGr;\n\t\t\t\tconst keyCode = NATIVE_WINDOWS_KEY_CODE_TO_KEY_CODE[rawMapping.vkey] || KeyCode.Unknown;\n\n\t\t\t\tconst mapping: IScanCodeMapping = {\n\t\t\t\t\tscanCode: scanCode,\n\t\t\t\t\tkeyCode: keyCode,\n\t\t\t\t\tvalue: value,\n\t\t\t\t\twithShift: withShift,\n\t\t\t\t\twithAltGr: withAltGr,\n\t\t\t\t\twithShiftAltGr: withShiftAltGr,\n\t\t\t\t};\n\t\t\t\tthis._codeInfo[scanCode] = mapping;\n\t\t\t\tthis._scanCodeToKeyCode[scanCode] = keyCode;\n\n\t\t\t\tif (keyCode === KeyCode.Unknown) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis._keyCodeExists[keyCode] = true;\n\n\t\t\t\tif (value.length === 0) {\n\t\t\t\t\t// This key does not produce strings\n\t\t\t\t\tthis._keyCodeToLabel[keyCode] = null;\n\t\t\t\t}\n\n\t\t\t\telse if (value.length > 1) {\n\t\t\t\t\t// This key produces a letter representable with multiple UTF-16 code units.\n\t\t\t\t\tthis._keyCodeToLabel[keyCode] = value;\n\t\t\t\t}\n\n\t\t\t\telse {\n\t\t\t\t\tconst charCode = value.charCodeAt(0);\n\n\t\t\t\t\tif (charCode >= CharCode.a && charCode <= CharCode.z) {\n\t\t\t\t\t\tconst upperCaseValue = CharCode.A + (charCode - CharCode.a);\n\t\t\t\t\t\tproducesLetter[upperCaseValue] = true;\n\t\t\t\t\t\tproducesLetters = true;\n\t\t\t\t\t\tthis._keyCodeToLabel[keyCode] = String.fromCharCode(CharCode.A + (charCode - CharCode.a));\n\t\t\t\t\t}\n\n\t\t\t\t\telse if (charCode >= CharCode.A && charCode <= CharCode.Z) {\n\t\t\t\t\t\tproducesLetter[charCode] = true;\n\t\t\t\t\t\tproducesLetters = true;\n\t\t\t\t\t\tthis._keyCodeToLabel[keyCode] = value;\n\t\t\t\t\t}\n\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis._keyCodeToLabel[keyCode] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Handle keyboard layouts where latin characters are not produced e.g. Cyrillic\n\t\tconst _registerLetterIfMissing = (charCode: CharCode, keyCode: KeyCode): void => {\n\t\t\tif (!producesLetter[charCode]) {\n\t\t\t\tthis._keyCodeToLabel[keyCode] = String.fromCharCode(charCode);\n\t\t\t}\n\t\t};\n\t\t_registerLetterIfMissing(CharCode.A, KeyCode.KeyA);\n\t\t_registerLetterIfMissing(CharCode.B, KeyCode.KeyB);\n\t\t_registerLetterIfMissing(CharCode.C, KeyCode.KeyC);\n\t\t_registerLetterIfMissing(CharCode.D, KeyCode.KeyD);\n\t\t_registerLetterIfMissing(CharCode.E, KeyCode.KeyE);\n\t\t_registerLetterIfMissing(CharCode.F, KeyCode.KeyF);\n\t\t_registerLetterIfMissing(CharCode.G, KeyCode.KeyG);\n\t\t_registerLetterIfMissing(CharCode.H, KeyCode.KeyH);\n\t\t_registerLetterIfMissing(CharCode.I, KeyCode.KeyI);\n\t\t_registerLetterIfMissing(CharCode.J, KeyCode.KeyJ);\n\t\t_registerLetterIfMissing(CharCode.K, KeyCode.KeyK);\n\t\t_registerLetterIfMissing(CharCode.L, KeyCode.KeyL);\n\t\t_registerLetterIfMissing(CharCode.M, KeyCode.KeyM);\n\t\t_registerLetterIfMissing(CharCode.N, KeyCode.KeyN);\n\t\t_registerLetterIfMissing(CharCode.O, KeyCode.KeyO);\n\t\t_registerLetterIfMissing(CharCode.P, KeyCode.KeyP);\n\t\t_registerLetterIfMissing(CharCode.Q, KeyCode.KeyQ);\n\t\t_registerLetterIfMissing(CharCode.R, KeyCode.KeyR);\n\t\t_registerLetterIfMissing(CharCode.S, KeyCode.KeyS);\n\t\t_registerLetterIfMissing(CharCode.T, KeyCode.KeyT);\n\t\t_registerLetterIfMissing(CharCode.U, KeyCode.KeyU);\n\t\t_registerLetterIfMissing(CharCode.V, KeyCode.KeyV);\n\t\t_registerLetterIfMissing(CharCode.W, KeyCode.KeyW);\n\t\t_registerLetterIfMissing(CharCode.X, KeyCode.KeyX);\n\t\t_registerLetterIfMissing(CharCode.Y, KeyCode.KeyY);\n\t\t_registerLetterIfMissing(CharCode.Z, KeyCode.KeyZ);\n\n\t\tif (!producesLetters) {\n\t\t\t// Since this keyboard layout produces no latin letters at all, most of the UI will use the\n\t\t\t// US kb layout equivalent for UI labels, so also try to render other keys with the US labels\n\t\t\t// for consistency...\n\t\t\tconst _registerLabel = (keyCode: KeyCode, charCode: CharCode): void => {\n\t\t\t\t// const existingLabel = this._keyCodeToLabel[keyCode];\n\t\t\t\t// const existingCharCode = (existingLabel ? existingLabel.charCodeAt(0) : CharCode.Null);\n\t\t\t\t// if (existingCharCode < 32 || existingCharCode > 126) {\n\t\t\t\tthis._keyCodeToLabel[keyCode] = String.fromCharCode(charCode);\n\t\t\t\t// }\n\t\t\t};\n\t\t\t_registerLabel(KeyCode.Semicolon, CharCode.Semicolon);\n\t\t\t_registerLabel(KeyCode.Equal, CharCode.Equals);\n\t\t\t_registerLabel(KeyCode.Comma, CharCode.Comma);\n\t\t\t_registerLabel(KeyCode.Minus, CharCode.Dash);\n\t\t\t_registerLabel(KeyCode.Period, CharCode.Period);\n\t\t\t_registerLabel(KeyCode.Slash, CharCode.Slash);\n\t\t\t_registerLabel(KeyCode.Backquote, CharCode.BackTick);\n\t\t\t_registerLabel(KeyCode.BracketLeft, CharCode.OpenSquareBracket);\n\t\t\t_registerLabel(KeyCode.Backslash, CharCode.Backslash);\n\t\t\t_registerLabel(KeyCode.BracketRight, CharCode.CloseSquareBracket);\n\t\t\t_registerLabel(KeyCode.Quote, CharCode.SingleQuote);\n\t\t}\n\t}\n\n\tpublic dumpDebugInfo(): string {\n\t\tconst result: string[] = [];\n\n\t\tconst immutableSamples = [\n\t\t\tScanCode.ArrowUp,\n\t\t\tScanCode.Numpad0\n\t\t];\n\n\t\tlet cnt = 0;\n\t\tresult.push(`-----------------------------------------------------------------------------------------------------------------------------------------`);\n\t\tfor (let scanCode = ScanCode.None; scanCode < ScanCode.MAX_VALUE; scanCode++) {\n\t\t\tif (IMMUTABLE_CODE_TO_KEY_CODE[scanCode] !== KeyCode.DependsOnKbLayout) {\n\t\t\t\tif (immutableSamples.indexOf(scanCode) === -1) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (cnt % 6 === 0) {\n\t\t\t\tresult.push(`|       HW Code combination      |  Key  |    KeyCode combination    |          UI label         |        User settings       | WYSIWYG |`);\n\t\t\t\tresult.push(`-----------------------------------------------------------------------------------------------------------------------------------------`);\n\t\t\t}\n\t\t\tcnt++;\n\n\t\t\tconst mapping = this._codeInfo[scanCode];\n\t\t\tconst strCode = ScanCodeUtils.toString(scanCode);\n\n\t\t\tconst mods = [0b000, 0b010, 0b101, 0b111];\n\t\t\tfor (const mod of mods) {\n\t\t\t\tconst ctrlKey = (mod & 0b001) ? true : false;\n\t\t\t\tconst shiftKey = (mod & 0b010) ? true : false;\n\t\t\t\tconst altKey = (mod & 0b100) ? true : false;\n\t\t\t\tconst scanCodeChord = new ScanCodeChord(ctrlKey, shiftKey, altKey, false, scanCode);\n\t\t\t\tconst keyCodeChord = this._resolveChord(scanCodeChord);\n\t\t\t\tconst strKeyCode = (keyCodeChord ? KeyCodeUtils.toString(keyCodeChord.keyCode) : null);\n\t\t\t\tconst resolvedKb = (keyCodeChord ? new WindowsNativeResolvedKeybinding(this, [keyCodeChord]) : null);\n\n\t\t\t\tconst outScanCode = `${ctrlKey ? 'Ctrl+' : ''}${shiftKey ? 'Shift+' : ''}${altKey ? 'Alt+' : ''}${strCode}`;\n\t\t\t\tconst ariaLabel = (resolvedKb ? resolvedKb.getAriaLabel() : null);\n\t\t\t\tconst outUILabel = (ariaLabel ? ariaLabel.replace(/Control\\+/, 'Ctrl+') : null);\n\t\t\t\tconst outUserSettings = (resolvedKb ? resolvedKb.getUserSettingsLabel() : null);\n\t\t\t\tconst outKey = WindowsNativeResolvedKeybinding.getProducedChar(scanCodeChord, mapping);\n\t\t\t\tconst outKb = (strKeyCode ? `${ctrlKey ? 'Ctrl+' : ''}${shiftKey ? 'Shift+' : ''}${altKey ? 'Alt+' : ''}${strKeyCode}` : null);\n\t\t\t\tconst isWYSIWYG = (resolvedKb ? resolvedKb.isWYSIWYG() : false);\n\t\t\t\tconst outWYSIWYG = (isWYSIWYG ? '       ' : '   NO  ');\n\t\t\t\tresult.push(`| ${this._leftPad(outScanCode, 30)} | ${outKey} | ${this._leftPad(outKb, 25)} | ${this._leftPad(outUILabel, 25)} |  ${this._leftPad(outUserSettings, 25)} | ${outWYSIWYG} |`);\n\t\t\t}\n\t\t\tresult.push(`-----------------------------------------------------------------------------------------------------------------------------------------`);\n\t\t}\n\n\n\t\treturn result.join('\\n');\n\t}\n\n\tprivate _leftPad(str: string | null, cnt: number): string {\n\t\tif (str === null) {\n\t\t\tstr = 'null';\n\t\t}\n\t\twhile (str.length < cnt) {\n\t\t\tstr = ' ' + str;\n\t\t}\n\t\treturn str;\n\t}\n\n\tpublic getUILabelForKeyCode(keyCode: KeyCode): string {\n\t\treturn this._getLabelForKeyCode(keyCode);\n\t}\n\n\tpublic getAriaLabelForKeyCode(keyCode: KeyCode): string {\n\t\treturn this._getLabelForKeyCode(keyCode);\n\t}\n\n\tpublic getUserSettingsLabelForKeyCode(keyCode: KeyCode): string {\n\t\tif (this._isUSStandard) {\n\t\t\treturn KeyCodeUtils.toUserSettingsUS(keyCode);\n\t\t}\n\t\treturn KeyCodeUtils.toUserSettingsGeneral(keyCode);\n\t}\n\n\tpublic getElectronAcceleratorForKeyBinding(chord: KeyCodeChord): string | null {\n\t\treturn KeyCodeUtils.toElectronAccelerator(chord.keyCode);\n\t}\n\n\tprivate _getLabelForKeyCode(keyCode: KeyCode): string {\n\t\treturn this._keyCodeToLabel[keyCode] || KeyCodeUtils.toString(KeyCode.Unknown);\n\t}\n\n\tpublic resolveKeyboardEvent(keyboardEvent: IKeyboardEvent): WindowsNativeResolvedKeybinding {\n\t\tconst ctrlKey = keyboardEvent.ctrlKey || (this._mapAltGrToCtrlAlt && keyboardEvent.altGraphKey);\n\t\tconst altKey = keyboardEvent.altKey || (this._mapAltGrToCtrlAlt && keyboardEvent.altGraphKey);\n\t\tconst chord = new KeyCodeChord(ctrlKey, keyboardEvent.shiftKey, altKey, keyboardEvent.metaKey, keyboardEvent.keyCode);\n\t\treturn new WindowsNativeResolvedKeybinding(this, [chord]);\n\t}\n\n\tprivate _resolveChord(chord: Chord | null): KeyCodeChord | null {\n\t\tif (!chord) {\n\t\t\treturn null;\n\t\t}\n\t\tif (chord instanceof KeyCodeChord) {\n\t\t\tif (!this._keyCodeExists[chord.keyCode]) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn chord;\n\t\t}\n\t\tconst keyCode = this._scanCodeToKeyCode[chord.scanCode] || KeyCode.Unknown;\n\t\tif (keyCode === KeyCode.Unknown || !this._keyCodeExists[keyCode]) {\n\t\t\treturn null;\n\t\t}\n\t\treturn new KeyCodeChord(chord.ctrlKey, chord.shiftKey, chord.altKey, chord.metaKey, keyCode);\n\t}\n\n\tpublic resolveKeybinding(keybinding: Keybinding): ResolvedKeybinding[] {\n\t\tconst chords: KeyCodeChord[] = toEmptyArrayIfContainsNull(keybinding.chords.map(chord => this._resolveChord(chord)));\n\t\tif (chords.length > 0) {\n\t\t\treturn [new WindowsNativeResolvedKeybinding(this, chords)];\n\t\t}\n\t\treturn [];\n\t}\n}\n"]}