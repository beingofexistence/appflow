{"version":3,"sources":["vs/workbench/services/remote/electron-sandbox/remoteAgentService.ts"],"names":[],"mappings":"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","file":"remoteAgentService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { IRemoteAuthorityResolverService, RemoteConnectionType, RemoteAuthorityResolverError } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { AbstractRemoteAgentService } from 'vs/workbench/services/remote/common/abstractRemoteAgentService';\nimport { ISignService } from 'vs/platform/sign/common/sign';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { INotificationService, IPromptChoice, Severity } from 'vs/platform/notification/common/notification';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkbenchContribution, IWorkbenchContributionsRegistry, Extensions } from 'vs/workbench/common/contributions';\nimport { LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { INativeHostService } from 'vs/platform/native/common/native';\nimport { URI } from 'vs/base/common/uri';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\nimport { IRemoteSocketFactoryService } from 'vs/platform/remote/common/remoteSocketFactoryService';\n\nexport class RemoteAgentService extends AbstractRemoteAgentService implements IRemoteAgentService {\n\tconstructor(\n\t\t@IRemoteSocketFactoryService remoteSocketFactoryService: IRemoteSocketFactoryService,\n\t\t@IUserDataProfileService userDataProfileService: IUserDataProfileService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IProductService productService: IProductService,\n\t\t@IRemoteAuthorityResolverService remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@ISignService signService: ISignService,\n\t\t@ILogService logService: ILogService,\n\t) {\n\t\tsuper(remoteSocketFactoryService, userDataProfileService, environmentService, productService, remoteAuthorityResolverService, signService, logService);\n\t}\n}\n\nclass RemoteConnectionFailureNotificationContribution implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IRemoteAgentService private readonly _remoteAgentService: IRemoteAgentService,\n\t\t@INotificationService notificationService: INotificationService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@INativeHostService nativeHostService: INativeHostService,\n\t\t@IRemoteAuthorityResolverService private readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t) {\n\t\t// Let's cover the case where connecting to fetch the remote extension info fails\n\t\tthis._remoteAgentService.getRawEnvironment()\n\t\t\t.then(undefined, err => {\n\n\t\t\t\tif (!RemoteAuthorityResolverError.isHandled(err)) {\n\t\t\t\t\tconst choices: IPromptChoice[] = [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: nls.localize('devTools', \"Open Developer Tools\"),\n\t\t\t\t\t\t\trun: () => nativeHostService.openDevTools()\n\t\t\t\t\t\t}\n\t\t\t\t\t];\n\t\t\t\t\tconst troubleshootingURL = this._getTroubleshootingURL();\n\t\t\t\t\tif (troubleshootingURL) {\n\t\t\t\t\t\tchoices.push({\n\t\t\t\t\t\t\tlabel: nls.localize('directUrl', \"Open in browser\"),\n\t\t\t\t\t\t\trun: () => openerService.open(troubleshootingURL, { openExternal: true })\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t\tnotificationService.prompt(\n\t\t\t\t\t\tSeverity.Error,\n\t\t\t\t\t\tnls.localize('connectionError', \"Failed to connect to the remote extension host server (Error: {0})\", err ? err.message : ''),\n\t\t\t\t\t\tchoices\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate _getTroubleshootingURL(): URI | null {\n\t\tconst remoteAgentConnection = this._remoteAgentService.getConnection();\n\t\tif (!remoteAgentConnection) {\n\t\t\treturn null;\n\t\t}\n\t\tconst connectionData = this._remoteAuthorityResolverService.getConnectionData(remoteAgentConnection.remoteAuthority);\n\t\tif (!connectionData || connectionData.connectTo.type !== RemoteConnectionType.WebSocket) {\n\t\t\treturn null;\n\t\t}\n\t\treturn URI.from({\n\t\t\tscheme: 'http',\n\t\t\tauthority: `${connectionData.connectTo.host}:${connectionData.connectTo.port}`,\n\t\t\tpath: `/version`\n\t\t});\n\t}\n\n}\n\nconst workbenchRegistry = Registry.as<IWorkbenchContributionsRegistry>(Extensions.Workbench);\nworkbenchRegistry.registerWorkbenchContribution(RemoteConnectionFailureNotificationContribution, LifecyclePhase.Ready);\n"]}