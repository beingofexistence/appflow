{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/remote/common/remoteAgentEnvironmentChannel.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IA4ChG,MAAa,GAAG;QAEf,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC,OAAiB,EAAE,eAAuB,EAAE,OAA2B;YACtG,MAAM,IAAI,GAAiC;gBAC1C,eAAe;gBACf,OAAO;aACP,CAAC;YAEF,MAAM,IAAI,GAAG,MAAM,OAAO,CAAC,IAAI,CAA6B,oBAAoB,EAAE,IAAI,CAAC,CAAC;YAExF,OAAO;gBACN,GAAG,EAAE,IAAI,CAAC,GAAG;gBACb,eAAe,EAAE,IAAI,CAAC,eAAe;gBACrC,OAAO,EAAE,SAAG,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;gBACjC,YAAY,EAAE,SAAG,CAAC,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC;gBAC3C,QAAQ,EAAE,SAAG,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;gBACnC,qBAAqB,EAAE,SAAG,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC;gBAC7D,iBAAiB,EAAE,SAAG,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;gBACrD,oBAAoB,EAAE,SAAG,CAAC,MAAM,CAAC,IAAI,CAAC,oBAAoB,CAAC;gBAC3D,gBAAgB,EAAE,SAAG,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC;gBACnD,QAAQ,EAAE,SAAG,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;gBACnC,EAAE,EAAE,IAAI,CAAC,EAAE;gBACX,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,YAAY,EAAE,IAAI,CAAC,YAAY;gBAC/B,QAAQ,EAAE,IAAA,iBAAG,EAAI,IAAI,CAAC,QAAQ,CAAC;aAC/B,CAAC;QACH,CAAC;QAED,MAAM,CAAC,KAAK,CAAC,wBAAwB,CAAC,OAAiB,EAAE,eAAuB,EAAE,iBAAyB;YAC1G,MAAM,IAAI,GAAuC;gBAChD,eAAe;gBACf,iBAAiB;aACjB,CAAC;YACF,OAAO,OAAO,CAAC,IAAI,CAAgC,0BAA0B,EAAE,IAAI,CAAC,CAAC;QACtF,CAAC;QAED,MAAM,CAAC,iBAAiB,CAAC,OAAiB,EAAE,OAA+B;YAC1E,OAAO,OAAO,CAAC,IAAI,CAAkB,mBAAmB,EAAE,OAAO,CAAC,CAAC;QACpE,CAAC;QAED,MAAM,CAAC,oBAAoB,CAAC,OAAiB,EAAE,cAA8B;YAC5E,OAAO,OAAO,CAAC,IAAI,CAAO,sBAAsB,EAAE,EAAE,cAAc,EAAE,CAAC,CAAC;QACvE,CAAC;QAED,MAAM,CAAC,YAAY,CAAC,OAAiB,EAAE,SAAiB,EAAE,IAAoB;YAC7E,OAAO,OAAO,CAAC,IAAI,CAAO,cAAc,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QAChE,CAAC;QAED,MAAM,CAAC,cAAc,CAAC,OAAiB;YACtC,OAAO,OAAO,CAAC,IAAI,CAAO,gBAAgB,CAAC,CAAC;QAC7C,CAAC;QAED,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,OAAiB;YAClC,MAAM,OAAO,CAAC,IAAI,CAAO,MAAM,CAAC,CAAC;QAClC,CAAC;KACD;IAxDD,kBAwDC","file":"remoteAgentEnvironmentChannel.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as platform from 'vs/base/common/platform';\nimport * as performance from 'vs/base/common/performance';\nimport { URI, UriComponents, UriDto } from 'vs/base/common/uri';\nimport { IChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { IRemoteAgentEnvironment } from 'vs/platform/remote/common/remoteAgentEnvironment';\nimport { IDiagnosticInfoOptions, IDiagnosticInfo } from 'vs/platform/diagnostics/common/diagnostics';\nimport { ITelemetryData, TelemetryLevel } from 'vs/platform/telemetry/common/telemetry';\nimport { IExtensionHostExitInfo } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { revive } from 'vs/base/common/marshalling';\nimport { IUserDataProfile } from 'vs/platform/userDataProfile/common/userDataProfile';\n\nexport interface IGetEnvironmentDataArguments {\n\tremoteAuthority: string;\n\tprofile?: string;\n}\n\nexport interface IGetExtensionHostExitInfoArguments {\n\tremoteAuthority: string;\n\treconnectionToken: string;\n}\n\nexport interface IRemoteAgentEnvironmentDTO {\n\tpid: number;\n\tconnectionToken: string;\n\tappRoot: UriComponents;\n\tsettingsPath: UriComponents;\n\tlogsPath: UriComponents;\n\textensionHostLogsPath: UriComponents;\n\tglobalStorageHome: UriComponents;\n\tworkspaceStorageHome: UriComponents;\n\tlocalHistoryHome: UriComponents;\n\tuserHome: UriComponents;\n\tos: platform.OperatingSystem;\n\tarch: string;\n\tmarks: performance.PerformanceMark[];\n\tuseHostProxy: boolean;\n\tprofiles: {\n\t\tall: UriDto<IUserDataProfile[]>;\n\t\thome: UriComponents;\n\t};\n}\n\nexport class RemoteExtensionEnvironmentChannelClient {\n\n\tstatic async getEnvironmentData(channel: IChannel, remoteAuthority: string, profile: string | undefined): Promise<IRemoteAgentEnvironment> {\n\t\tconst args: IGetEnvironmentDataArguments = {\n\t\t\tremoteAuthority,\n\t\t\tprofile\n\t\t};\n\n\t\tconst data = await channel.call<IRemoteAgentEnvironmentDTO>('getEnvironmentData', args);\n\n\t\treturn {\n\t\t\tpid: data.pid,\n\t\t\tconnectionToken: data.connectionToken,\n\t\t\tappRoot: URI.revive(data.appRoot),\n\t\t\tsettingsPath: URI.revive(data.settingsPath),\n\t\t\tlogsPath: URI.revive(data.logsPath),\n\t\t\textensionHostLogsPath: URI.revive(data.extensionHostLogsPath),\n\t\t\tglobalStorageHome: URI.revive(data.globalStorageHome),\n\t\t\tworkspaceStorageHome: URI.revive(data.workspaceStorageHome),\n\t\t\tlocalHistoryHome: URI.revive(data.localHistoryHome),\n\t\t\tuserHome: URI.revive(data.userHome),\n\t\t\tos: data.os,\n\t\t\tarch: data.arch,\n\t\t\tmarks: data.marks,\n\t\t\tuseHostProxy: data.useHostProxy,\n\t\t\tprofiles: revive(data.profiles)\n\t\t};\n\t}\n\n\tstatic async getExtensionHostExitInfo(channel: IChannel, remoteAuthority: string, reconnectionToken: string): Promise<IExtensionHostExitInfo | null> {\n\t\tconst args: IGetExtensionHostExitInfoArguments = {\n\t\t\tremoteAuthority,\n\t\t\treconnectionToken\n\t\t};\n\t\treturn channel.call<IExtensionHostExitInfo | null>('getExtensionHostExitInfo', args);\n\t}\n\n\tstatic getDiagnosticInfo(channel: IChannel, options: IDiagnosticInfoOptions): Promise<IDiagnosticInfo> {\n\t\treturn channel.call<IDiagnosticInfo>('getDiagnosticInfo', options);\n\t}\n\n\tstatic updateTelemetryLevel(channel: IChannel, telemetryLevel: TelemetryLevel): Promise<void> {\n\t\treturn channel.call<void>('updateTelemetryLevel', { telemetryLevel });\n\t}\n\n\tstatic logTelemetry(channel: IChannel, eventName: string, data: ITelemetryData): Promise<void> {\n\t\treturn channel.call<void>('logTelemetry', { eventName, data });\n\t}\n\n\tstatic flushTelemetry(channel: IChannel): Promise<void> {\n\t\treturn channel.call<void>('flushTelemetry');\n\t}\n\n\tstatic async ping(channel: IChannel): Promise<void> {\n\t\tawait channel.call<void>('ping');\n\t}\n}\n"]}