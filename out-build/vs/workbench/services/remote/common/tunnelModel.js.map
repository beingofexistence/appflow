{"version":3,"sources":["vs/workbench/services/remote/common/tunnelModel.ts"],"names":[],"mappings":"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","file":"tunnelModel.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport { flatten } from 'vs/base/common/arrays';\nimport { debounce } from 'vs/base/common/decorators';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { hash } from 'vs/base/common/hash';\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { ConfigurationTarget, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IAddressProvider } from 'vs/platform/remote/common/remoteAgentConnection';\nimport { IRemoteAuthorityResolverService, TunnelDescription } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { RemoteTunnel, ITunnelService, TunnelProtocol, TunnelPrivacyId, LOCALHOST_ADDRESSES, ProvidedPortAttributes, PortAttributesProvider, isLocalhost, isAllInterfaces, ProvidedOnAutoForward, ALL_INTERFACES_ADDRESSES } from 'vs/platform/tunnel/common/tunnel';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { isNumber, isObject, isString } from 'vs/base/common/types';\nimport { deepClone } from 'vs/base/common/objects';\nimport { IContextKeyService, RawContextKey } from 'vs/platform/contextkey/common/contextkey';\n\nconst MISMATCH_LOCAL_PORT_COOLDOWN = 10 * 1000; // 10 seconds\nconst TUNNELS_TO_RESTORE = 'remote.tunnels.toRestore';\nexport const ACTIVATION_EVENT = 'onTunnel';\nexport const forwardedPortsViewEnabled = new RawContextKey<boolean>('forwardedPortsViewEnabled', false, nls.localize('tunnel.forwardedPortsViewEnabled', \"Whether the Ports view is enabled.\"));\n\nexport interface Tunnel {\n\tremoteHost: string;\n\tremotePort: number;\n\tlocalAddress: string;\n\tlocalUri: URI;\n\tprotocol: TunnelProtocol;\n\tlocalPort?: number;\n\tname?: string;\n\tcloseable?: boolean;\n\tprivacy: TunnelPrivacyId | string;\n\trunningProcess: string | undefined;\n\thasRunningProcess?: boolean;\n\tpid: number | undefined;\n\tsource: {\n\t\tsource: TunnelSource;\n\t\tdescription: string;\n\t};\n}\n\nexport function parseAddress(address: string): { host: string; port: number } | undefined {\n\tconst matches = address.match(/^([a-zA-Z0-9_-]+(?:\\.[a-zA-Z0-9_-]+)*:)?([0-9]+)$/);\n\tif (!matches) {\n\t\treturn undefined;\n\t}\n\treturn { host: matches[1]?.substring(0, matches[1].length - 1) || 'localhost', port: Number(matches[2]) };\n}\n\nexport enum TunnelCloseReason {\n\tOther = 'Other',\n\tUser = 'User',\n\tAutoForwardEnd = 'AutoForwardEnd',\n}\n\nexport enum TunnelSource {\n\tUser,\n\tAuto,\n\tExtension\n}\n\nexport const UserTunnelSource = {\n\tsource: TunnelSource.User,\n\tdescription: nls.localize('tunnel.source.user', \"User Forwarded\")\n};\nexport const AutoTunnelSource = {\n\tsource: TunnelSource.Auto,\n\tdescription: nls.localize('tunnel.source.auto', \"Auto Forwarded\")\n};\n\nexport function mapHasAddress<T>(map: Map<string, T>, host: string, port: number): T | undefined {\n\tconst initialAddress = map.get(makeAddress(host, port));\n\tif (initialAddress) {\n\t\treturn initialAddress;\n\t}\n\n\tif (isLocalhost(host)) {\n\t\t// Do localhost checks\n\t\tfor (const testHost of LOCALHOST_ADDRESSES) {\n\t\t\tconst testAddress = makeAddress(testHost, port);\n\t\t\tif (map.has(testAddress)) {\n\t\t\t\treturn map.get(testAddress);\n\t\t\t}\n\t\t}\n\t} else if (isAllInterfaces(host)) {\n\t\t// Do all interfaces checks\n\t\tfor (const testHost of ALL_INTERFACES_ADDRESSES) {\n\t\t\tconst testAddress = makeAddress(testHost, port);\n\t\t\tif (map.has(testAddress)) {\n\t\t\t\treturn map.get(testAddress);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn undefined;\n}\n\nexport function mapHasAddressLocalhostOrAllInterfaces<T>(map: Map<string, T>, host: string, port: number): T | undefined {\n\tconst originalAddress = mapHasAddress(map, host, port);\n\tif (originalAddress) {\n\t\treturn originalAddress;\n\t}\n\tconst otherHost = isAllInterfaces(host) ? 'localhost' : (isLocalhost(host) ? '0.0.0.0' : undefined);\n\tif (otherHost) {\n\t\treturn mapHasAddress(map, otherHost, port);\n\t}\n\treturn undefined;\n}\n\n\nexport function makeAddress(host: string, port: number): string {\n\treturn host + ':' + port;\n}\n\nexport interface TunnelProperties {\n\tremote: { host: string; port: number };\n\tlocal?: number;\n\tname?: string;\n\tsource?: {\n\t\tsource: TunnelSource;\n\t\tdescription: string;\n\t};\n\televateIfNeeded?: boolean;\n\tprivacy?: string;\n}\n\nexport interface CandidatePort {\n\thost: string;\n\tport: number;\n\tdetail?: string;\n\tpid?: number;\n}\n\ninterface PortAttributes extends Attributes {\n\tkey: number | PortRange | RegExp | HostAndPort;\n}\n\nexport enum OnPortForward {\n\tNotify = 'notify',\n\tOpenBrowser = 'openBrowser',\n\tOpenBrowserOnce = 'openBrowserOnce',\n\tOpenPreview = 'openPreview',\n\tSilent = 'silent',\n\tIgnore = 'ignore'\n}\n\nexport interface Attributes {\n\tlabel: string | undefined;\n\tonAutoForward: OnPortForward | undefined;\n\televateIfNeeded: boolean | undefined;\n\trequireLocalPort: boolean | undefined;\n\tprotocol: TunnelProtocol | undefined;\n}\n\ninterface PortRange { start: number; end: number }\n\ninterface HostAndPort { host: string; port: number }\n\nexport function isCandidatePort(candidate: any): candidate is CandidatePort {\n\treturn candidate && 'host' in candidate && typeof candidate.host === 'string'\n\t\t&& 'port' in candidate && typeof candidate.port === 'number'\n\t\t&& (!('detail' in candidate) || typeof candidate.detail === 'string')\n\t\t&& (!('pid' in candidate) || typeof candidate.pid === 'string');\n}\n\nexport class PortsAttributes extends Disposable {\n\tprivate static SETTING = 'remote.portsAttributes';\n\tprivate static DEFAULTS = 'remote.otherPortsAttributes';\n\tprivate static RANGE = /^(\\d+)\\-(\\d+)$/;\n\tprivate static HOST_AND_PORT = /^([a-z0-9\\-]+):(\\d{1,5})$/;\n\tprivate portsAttributes: PortAttributes[] = [];\n\tprivate defaultPortAttributes: Attributes | undefined;\n\tprivate _onDidChangeAttributes = new Emitter<void>();\n\tpublic readonly onDidChangeAttributes = this._onDidChangeAttributes.event;\n\n\tconstructor(private readonly configurationService: IConfigurationService) {\n\t\tsuper();\n\t\tthis._register(configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(PortsAttributes.SETTING) || e.affectsConfiguration(PortsAttributes.DEFAULTS)) {\n\t\t\t\tthis.updateAttributes();\n\t\t\t}\n\t\t}));\n\t\tthis.updateAttributes();\n\t}\n\n\tprivate updateAttributes() {\n\t\tthis.portsAttributes = this.readSetting();\n\t\tthis._onDidChangeAttributes.fire();\n\t}\n\n\tgetAttributes(port: number, host: string, commandLine?: string): Attributes | undefined {\n\t\tlet index = this.findNextIndex(port, host, commandLine, this.portsAttributes, 0);\n\t\tconst attributes: Attributes = {\n\t\t\tlabel: undefined,\n\t\t\tonAutoForward: undefined,\n\t\t\televateIfNeeded: undefined,\n\t\t\trequireLocalPort: undefined,\n\t\t\tprotocol: undefined\n\t\t};\n\t\twhile (index >= 0) {\n\t\t\tconst found = this.portsAttributes[index];\n\t\t\tif (found.key === port) {\n\t\t\t\tattributes.onAutoForward = found.onAutoForward ?? attributes.onAutoForward;\n\t\t\t\tattributes.elevateIfNeeded = (found.elevateIfNeeded !== undefined) ? found.elevateIfNeeded : attributes.elevateIfNeeded;\n\t\t\t\tattributes.label = found.label ?? attributes.label;\n\t\t\t\tattributes.requireLocalPort = found.requireLocalPort;\n\t\t\t\tattributes.protocol = found.protocol;\n\t\t\t} else {\n\t\t\t\t// It's a range or regex, which means that if the attribute is already set, we keep it\n\t\t\t\tattributes.onAutoForward = attributes.onAutoForward ?? found.onAutoForward;\n\t\t\t\tattributes.elevateIfNeeded = (attributes.elevateIfNeeded !== undefined) ? attributes.elevateIfNeeded : found.elevateIfNeeded;\n\t\t\t\tattributes.label = attributes.label ?? found.label;\n\t\t\t\tattributes.requireLocalPort = (attributes.requireLocalPort !== undefined) ? attributes.requireLocalPort : undefined;\n\t\t\t\tattributes.protocol = attributes.protocol ?? found.protocol;\n\t\t\t}\n\t\t\tindex = this.findNextIndex(port, host, commandLine, this.portsAttributes, index + 1);\n\t\t}\n\t\tif (attributes.onAutoForward !== undefined || attributes.elevateIfNeeded !== undefined\n\t\t\t|| attributes.label !== undefined || attributes.requireLocalPort !== undefined\n\t\t\t|| attributes.protocol !== undefined) {\n\t\t\treturn attributes;\n\t\t}\n\n\t\t// If we find no matches, then use the other port attributes.\n\t\treturn this.getOtherAttributes();\n\t}\n\n\tprivate hasStartEnd(value: number | PortRange | RegExp | HostAndPort): value is PortRange {\n\t\treturn ((<any>value).start !== undefined) && ((<any>value).end !== undefined);\n\t}\n\n\tprivate hasHostAndPort(value: number | PortRange | RegExp | HostAndPort): value is HostAndPort {\n\t\treturn ((<any>value).host !== undefined) && ((<any>value).port !== undefined)\n\t\t\t&& isString((<any>value).host) && isNumber((<any>value).port);\n\t}\n\n\tprivate findNextIndex(port: number, host: string, commandLine: string | undefined, attributes: PortAttributes[], fromIndex: number): number {\n\t\tif (fromIndex >= attributes.length) {\n\t\t\treturn -1;\n\t\t}\n\t\tconst shouldUseHost = !isLocalhost(host) && !isAllInterfaces(host);\n\t\tconst sliced = attributes.slice(fromIndex);\n\t\tconst foundIndex = sliced.findIndex((value) => {\n\t\t\tif (isNumber(value.key)) {\n\t\t\t\treturn shouldUseHost ? false : value.key === port;\n\t\t\t} else if (this.hasStartEnd(value.key)) {\n\t\t\t\treturn shouldUseHost ? false : (port >= value.key.start && port <= value.key.end);\n\t\t\t} else if (this.hasHostAndPort(value.key)) {\n\t\t\t\treturn (port === value.key.port) && (host === value.key.host);\n\t\t\t} else {\n\t\t\t\treturn commandLine ? value.key.test(commandLine) : false;\n\t\t\t}\n\n\t\t});\n\t\treturn foundIndex >= 0 ? foundIndex + fromIndex : -1;\n\t}\n\n\tprivate readSetting(): PortAttributes[] {\n\t\tconst settingValue = this.configurationService.getValue(PortsAttributes.SETTING);\n\t\tif (!settingValue || !isObject(settingValue)) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst attributes: PortAttributes[] = [];\n\t\tfor (const attributesKey in settingValue) {\n\t\t\tif (attributesKey === undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst setting = (<any>settingValue)[attributesKey];\n\t\t\tlet key: number | PortRange | RegExp | HostAndPort | undefined = undefined;\n\t\t\tif (Number(attributesKey)) {\n\t\t\t\tkey = Number(attributesKey);\n\t\t\t} else if (isString(attributesKey)) {\n\t\t\t\tif (PortsAttributes.RANGE.test(attributesKey)) {\n\t\t\t\t\tconst match = attributesKey.match(PortsAttributes.RANGE);\n\t\t\t\t\tkey = { start: Number(match![1]), end: Number(match![2]) };\n\t\t\t\t} else if (PortsAttributes.HOST_AND_PORT.test(attributesKey)) {\n\t\t\t\t\tconst match = attributesKey.match(PortsAttributes.HOST_AND_PORT);\n\t\t\t\t\tkey = { host: match![1], port: Number(match![2]) };\n\t\t\t\t} else {\n\t\t\t\t\tlet regTest: RegExp | undefined = undefined;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tregTest = RegExp(attributesKey);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t// The user entered an invalid regular expression.\n\t\t\t\t\t}\n\t\t\t\t\tif (regTest) {\n\t\t\t\t\t\tkey = regTest;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!key) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tattributes.push({\n\t\t\t\tkey: key,\n\t\t\t\televateIfNeeded: setting.elevateIfNeeded,\n\t\t\t\tonAutoForward: setting.onAutoForward,\n\t\t\t\tlabel: setting.label,\n\t\t\t\trequireLocalPort: setting.requireLocalPort,\n\t\t\t\tprotocol: setting.protocol\n\t\t\t});\n\t\t}\n\n\t\tconst defaults = <any>this.configurationService.getValue(PortsAttributes.DEFAULTS);\n\t\tif (defaults) {\n\t\t\tthis.defaultPortAttributes = {\n\t\t\t\televateIfNeeded: defaults.elevateIfNeeded,\n\t\t\t\tlabel: defaults.label,\n\t\t\t\tonAutoForward: defaults.onAutoForward,\n\t\t\t\trequireLocalPort: defaults.requireLocalPort,\n\t\t\t\tprotocol: defaults.protocol\n\t\t\t};\n\t\t}\n\n\t\treturn this.sortAttributes(attributes);\n\t}\n\n\tprivate sortAttributes(attributes: PortAttributes[]): PortAttributes[] {\n\t\tfunction getVal(item: PortAttributes, thisRef: PortsAttributes) {\n\t\t\tif (isNumber(item.key)) {\n\t\t\t\treturn item.key;\n\t\t\t} else if (thisRef.hasStartEnd(item.key)) {\n\t\t\t\treturn item.key.start;\n\t\t\t} else if (thisRef.hasHostAndPort(item.key)) {\n\t\t\t\treturn item.key.port;\n\t\t\t} else {\n\t\t\t\treturn Number.MAX_VALUE;\n\t\t\t}\n\t\t}\n\n\t\treturn attributes.sort((a, b) => {\n\t\t\treturn getVal(a, this) - getVal(b, this);\n\t\t});\n\t}\n\n\tprivate getOtherAttributes() {\n\t\treturn this.defaultPortAttributes;\n\t}\n\n\tstatic providedActionToAction(providedAction: ProvidedOnAutoForward | undefined) {\n\t\tswitch (providedAction) {\n\t\t\tcase ProvidedOnAutoForward.Notify: return OnPortForward.Notify;\n\t\t\tcase ProvidedOnAutoForward.OpenBrowser: return OnPortForward.OpenBrowser;\n\t\t\tcase ProvidedOnAutoForward.OpenBrowserOnce: return OnPortForward.OpenBrowserOnce;\n\t\t\tcase ProvidedOnAutoForward.OpenPreview: return OnPortForward.OpenPreview;\n\t\t\tcase ProvidedOnAutoForward.Silent: return OnPortForward.Silent;\n\t\t\tcase ProvidedOnAutoForward.Ignore: return OnPortForward.Ignore;\n\t\t\tdefault: return undefined;\n\t\t}\n\t}\n\n\tpublic async addAttributes(port: number, attributes: Partial<Attributes>, target: ConfigurationTarget) {\n\t\tconst settingValue = this.configurationService.inspect(PortsAttributes.SETTING);\n\t\tconst remoteValue: any = settingValue.userRemoteValue;\n\t\tlet newRemoteValue: any;\n\t\tif (!remoteValue || !isObject(remoteValue)) {\n\t\t\tnewRemoteValue = {};\n\t\t} else {\n\t\t\tnewRemoteValue = deepClone(remoteValue);\n\t\t}\n\n\t\tif (!newRemoteValue[`${port}`]) {\n\t\t\tnewRemoteValue[`${port}`] = {};\n\t\t}\n\t\tfor (const attribute in attributes) {\n\t\t\tnewRemoteValue[`${port}`][attribute] = (<any>attributes)[attribute];\n\t\t}\n\n\t\treturn this.configurationService.updateValue(PortsAttributes.SETTING, newRemoteValue, target);\n\t}\n}\n\nexport class TunnelModel extends Disposable {\n\treadonly forwarded: Map<string, Tunnel>;\n\tprivate readonly inProgress: Map<string, true> = new Map();\n\treadonly detected: Map<string, Tunnel>;\n\tprivate remoteTunnels: Map<string, RemoteTunnel>;\n\tprivate _onForwardPort: Emitter<Tunnel | void> = new Emitter();\n\tpublic onForwardPort: Event<Tunnel | void> = this._onForwardPort.event;\n\tprivate _onClosePort: Emitter<{ host: string; port: number }> = new Emitter();\n\tpublic onClosePort: Event<{ host: string; port: number }> = this._onClosePort.event;\n\tprivate _onPortName: Emitter<{ host: string; port: number }> = new Emitter();\n\tpublic onPortName: Event<{ host: string; port: number }> = this._onPortName.event;\n\tprivate _candidates: Map<string, CandidatePort> | undefined;\n\tprivate _onCandidatesChanged: Emitter<Map<string, { host: string; port: number }>> = new Emitter();\n\t// onCandidateChanged returns the removed candidates\n\tpublic onCandidatesChanged: Event<Map<string, { host: string; port: number }>> = this._onCandidatesChanged.event;\n\tprivate _candidateFilter: ((candidates: CandidatePort[]) => Promise<CandidatePort[]>) | undefined;\n\tprivate tunnelRestoreValue: Promise<string | undefined>;\n\tprivate _onEnvironmentTunnelsSet: Emitter<void> = new Emitter();\n\tpublic onEnvironmentTunnelsSet: Event<void> = this._onEnvironmentTunnelsSet.event;\n\tprivate _environmentTunnelsSet: boolean = false;\n\tpublic readonly configPortsAttributes: PortsAttributes;\n\tprivate restoreListener: DisposableStore | undefined = undefined;\n\tprivate knownPortsRestoreValue: string | undefined;\n\tprivate restoreComplete = false;\n\tprivate onRestoreComplete: Emitter<void> = new Emitter();\n\tprivate unrestoredExtensionTunnels: Map<string, Tunnel> = new Map();\n\tprivate sessionCachedProperties: Map<string, Partial<TunnelProperties>> = new Map();\n\n\tprivate portAttributesProviders: PortAttributesProvider[] = [];\n\n\tconstructor(\n\t\t@ITunnelService private readonly tunnelService: ITunnelService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IRemoteAuthorityResolverService private readonly remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@IWorkspaceContextService private readonly workspaceContextService: IWorkspaceContextService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IContextKeyService private readonly contextKeyService: IContextKeyService\n\t) {\n\t\tsuper();\n\t\tthis.configPortsAttributes = new PortsAttributes(configurationService);\n\t\tthis.tunnelRestoreValue = this.getTunnelRestoreValue();\n\t\tthis._register(this.configPortsAttributes.onDidChangeAttributes(this.updateAttributes, this));\n\t\tthis.forwarded = new Map();\n\t\tthis.remoteTunnels = new Map();\n\t\tthis.tunnelService.tunnels.then(async (tunnels) => {\n\t\t\tconst attributes = await this.getAttributes(tunnels.map(tunnel => {\n\t\t\t\treturn { port: tunnel.tunnelRemotePort, host: tunnel.tunnelRemoteHost };\n\t\t\t}));\n\t\t\tfor (const tunnel of tunnels) {\n\t\t\t\tif (tunnel.localAddress) {\n\t\t\t\t\tconst key = makeAddress(tunnel.tunnelRemoteHost, tunnel.tunnelRemotePort);\n\t\t\t\t\tconst matchingCandidate = mapHasAddressLocalhostOrAllInterfaces(this._candidates ?? new Map(), tunnel.tunnelRemoteHost, tunnel.tunnelRemotePort);\n\t\t\t\t\tthis.forwarded.set(key, {\n\t\t\t\t\t\tremotePort: tunnel.tunnelRemotePort,\n\t\t\t\t\t\tremoteHost: tunnel.tunnelRemoteHost,\n\t\t\t\t\t\tlocalAddress: tunnel.localAddress,\n\t\t\t\t\t\tprotocol: attributes?.get(tunnel.tunnelRemotePort)?.protocol ?? TunnelProtocol.Http,\n\t\t\t\t\t\tlocalUri: await this.makeLocalUri(tunnel.localAddress, attributes?.get(tunnel.tunnelRemotePort)),\n\t\t\t\t\t\tlocalPort: tunnel.tunnelLocalPort,\n\t\t\t\t\t\trunningProcess: matchingCandidate?.detail,\n\t\t\t\t\t\thasRunningProcess: !!matchingCandidate,\n\t\t\t\t\t\tpid: matchingCandidate?.pid,\n\t\t\t\t\t\tprivacy: tunnel.privacy,\n\t\t\t\t\t\tsource: UserTunnelSource,\n\t\t\t\t\t});\n\t\t\t\t\tthis.remoteTunnels.set(key, tunnel);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tthis.detected = new Map();\n\t\tthis._register(this.tunnelService.onTunnelOpened(async (tunnel) => {\n\t\t\tconst key = makeAddress(tunnel.tunnelRemoteHost, tunnel.tunnelRemotePort);\n\t\t\tif (!mapHasAddressLocalhostOrAllInterfaces(this.forwarded, tunnel.tunnelRemoteHost, tunnel.tunnelRemotePort)\n\t\t\t\t&& !mapHasAddressLocalhostOrAllInterfaces(this.detected, tunnel.tunnelRemoteHost, tunnel.tunnelRemotePort)\n\t\t\t\t&& !mapHasAddressLocalhostOrAllInterfaces(this.inProgress, tunnel.tunnelRemoteHost, tunnel.tunnelRemotePort)\n\t\t\t\t&& tunnel.localAddress) {\n\t\t\t\tconst matchingCandidate = mapHasAddressLocalhostOrAllInterfaces(this._candidates ?? new Map(), tunnel.tunnelRemoteHost, tunnel.tunnelRemotePort);\n\t\t\t\tconst attributes = (await this.getAttributes([{ port: tunnel.tunnelRemotePort, host: tunnel.tunnelRemoteHost }]))?.get(tunnel.tunnelRemotePort);\n\t\t\t\tthis.forwarded.set(key, {\n\t\t\t\t\tremoteHost: tunnel.tunnelRemoteHost,\n\t\t\t\t\tremotePort: tunnel.tunnelRemotePort,\n\t\t\t\t\tlocalAddress: tunnel.localAddress,\n\t\t\t\t\tprotocol: attributes?.protocol ?? TunnelProtocol.Http,\n\t\t\t\t\tlocalUri: await this.makeLocalUri(tunnel.localAddress, attributes),\n\t\t\t\t\tlocalPort: tunnel.tunnelLocalPort,\n\t\t\t\t\tcloseable: true,\n\t\t\t\t\trunningProcess: matchingCandidate?.detail,\n\t\t\t\t\thasRunningProcess: !!matchingCandidate,\n\t\t\t\t\tpid: matchingCandidate?.pid,\n\t\t\t\t\tprivacy: tunnel.privacy,\n\t\t\t\t\tsource: UserTunnelSource,\n\t\t\t\t});\n\t\t\t}\n\t\t\tawait this.storeForwarded();\n\t\t\tthis.remoteTunnels.set(key, tunnel);\n\t\t\tthis._onForwardPort.fire(this.forwarded.get(key)!);\n\t\t}));\n\t\tthis._register(this.tunnelService.onTunnelClosed(address => {\n\t\t\treturn this.onTunnelClosed(address, TunnelCloseReason.Other);\n\t\t}));\n\t\tthis.checkExtensionActivationEvents();\n\t}\n\n\tprivate extensionHasActivationEvent() {\n\t\tif (this.extensionService.extensions.find(extension => extension.activationEvents?.includes(ACTIVATION_EVENT))) {\n\t\t\tthis.contextKeyService.createKey(forwardedPortsViewEnabled.key, true);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate checkExtensionActivationEvents() {\n\t\tif (this.extensionHasActivationEvent()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst activationDisposable = this._register(this.extensionService.onDidRegisterExtensions(() => {\n\t\t\tif (this.extensionHasActivationEvent()) {\n\t\t\t\tactivationDisposable.dispose();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate async onTunnelClosed(address: { host: string; port: number }, reason: TunnelCloseReason) {\n\t\tconst key = makeAddress(address.host, address.port);\n\t\tif (this.forwarded.has(key)) {\n\t\t\tthis.forwarded.delete(key);\n\t\t\tawait this.storeForwarded();\n\t\t\tthis._onClosePort.fire(address);\n\t\t}\n\t}\n\n\tprivate makeLocalUri(localAddress: string, attributes?: Attributes) {\n\t\tif (localAddress.startsWith('http')) {\n\t\t\treturn URI.parse(localAddress);\n\t\t}\n\t\tconst protocol = attributes?.protocol ?? 'http';\n\t\treturn URI.parse(`${protocol}://${localAddress}`);\n\t}\n\n\tprivate async getStorageKey(): Promise<string | undefined> {\n\t\tconst workspace = this.workspaceContextService.getWorkspace();\n\t\tconst workspaceHash = workspace.configuration ? hash(workspace.configuration.path) : (workspace.folders.length > 0 ? hash(workspace.folders[0].uri.path) : undefined);\n\t\tif (workspaceHash === undefined) {\n\t\t\tthis.logService.debug('Could not get workspace hash for forwarded ports storage key.');\n\t\t\treturn undefined;\n\t\t}\n\t\treturn `${TUNNELS_TO_RESTORE}.${this.environmentService.remoteAuthority}.${workspaceHash}`;\n\t}\n\n\tprivate async getTunnelRestoreValue(): Promise<string | undefined> {\n\t\tconst deprecatedValue = this.storageService.get(TUNNELS_TO_RESTORE, StorageScope.WORKSPACE);\n\t\tif (deprecatedValue) {\n\t\t\tthis.storageService.remove(TUNNELS_TO_RESTORE, StorageScope.WORKSPACE);\n\t\t\tawait this.storeForwarded();\n\t\t\treturn deprecatedValue;\n\t\t}\n\t\tconst storageKey = await this.getStorageKey();\n\t\tif (!storageKey) {\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this.storageService.get(storageKey, StorageScope.PROFILE);\n\t}\n\n\tasync restoreForwarded() {\n\t\tif (this.configurationService.getValue('remote.restoreForwardedPorts')) {\n\t\t\tconst tunnelRestoreValue = await this.tunnelRestoreValue;\n\t\t\tif (tunnelRestoreValue && (tunnelRestoreValue !== this.knownPortsRestoreValue)) {\n\t\t\t\tconst tunnels = <Tunnel[] | undefined>JSON.parse(tunnelRestoreValue) ?? [];\n\t\t\t\tthis.logService.trace(`ForwardedPorts: (TunnelModel) restoring ports ${tunnels.map(tunnel => tunnel.remotePort).join(', ')}`);\n\t\t\t\tfor (const tunnel of tunnels) {\n\t\t\t\t\tconst alreadyForwarded = mapHasAddressLocalhostOrAllInterfaces(this.detected, tunnel.remoteHost, tunnel.remotePort);\n\t\t\t\t\t// Extension forwarded ports should only be updated, not restored.\n\t\t\t\t\tif ((tunnel.source.source !== TunnelSource.Extension && !alreadyForwarded) || (tunnel.source.source === TunnelSource.Extension && alreadyForwarded)) {\n\t\t\t\t\t\tawait this.doForward({\n\t\t\t\t\t\t\tremote: { host: tunnel.remoteHost, port: tunnel.remotePort },\n\t\t\t\t\t\t\tlocal: tunnel.localPort,\n\t\t\t\t\t\t\tname: tunnel.name,\n\t\t\t\t\t\t\tprivacy: tunnel.privacy,\n\t\t\t\t\t\t\televateIfNeeded: true,\n\t\t\t\t\t\t\tsource: tunnel.source\n\t\t\t\t\t\t});\n\t\t\t\t\t} else if (tunnel.source.source === TunnelSource.Extension && !alreadyForwarded) {\n\t\t\t\t\t\tthis.unrestoredExtensionTunnels.set(makeAddress(tunnel.remoteHost, tunnel.remotePort), tunnel);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.restoreComplete = true;\n\t\tthis.onRestoreComplete.fire();\n\n\t\tif (!this.restoreListener) {\n\t\t\t// It's possible that at restore time the value hasn't synced.\n\t\t\tconst key = await this.getStorageKey();\n\t\t\tthis.restoreListener = this._register(new DisposableStore());\n\t\t\tthis.restoreListener.add(this.storageService.onDidChangeValue(StorageScope.PROFILE, undefined, this.restoreListener)(async (e) => {\n\t\t\t\tif (e.key === key) {\n\t\t\t\t\tthis.tunnelRestoreValue = Promise.resolve(this.storageService.get(key, StorageScope.PROFILE));\n\t\t\t\t\tawait this.restoreForwarded();\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t}\n\n\t@debounce(1000)\n\tprivate async storeForwarded() {\n\t\tif (this.configurationService.getValue('remote.restoreForwardedPorts')) {\n\t\t\tconst valueToStore = JSON.stringify(Array.from(this.forwarded.values()));\n\t\t\tif (valueToStore !== this.knownPortsRestoreValue) {\n\t\t\t\tthis.knownPortsRestoreValue = valueToStore;\n\t\t\t\tconst key = await this.getStorageKey();\n\t\t\t\tif (key) {\n\t\t\t\t\tthis.storageService.store(key, this.knownPortsRestoreValue, StorageScope.PROFILE, StorageTarget.USER);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate mismatchCooldown = new Date();\n\tprivate async showPortMismatchModalIfNeeded(tunnel: RemoteTunnel, expectedLocal: number, attributes: Attributes | undefined) {\n\t\tif (!tunnel.tunnelLocalPort || !attributes?.requireLocalPort) {\n\t\t\treturn;\n\t\t}\n\t\tif (tunnel.tunnelLocalPort === expectedLocal) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst newCooldown = new Date();\n\t\tif ((this.mismatchCooldown.getTime() + MISMATCH_LOCAL_PORT_COOLDOWN) > newCooldown.getTime()) {\n\t\t\treturn;\n\t\t}\n\t\tthis.mismatchCooldown = newCooldown;\n\t\tconst mismatchString = nls.localize('remote.localPortMismatch.single', \"Local port {0} could not be used for forwarding to remote port {1}.\\n\\nThis usually happens when there is already another process using local port {0}.\\n\\nPort number {2} has been used instead.\",\n\t\t\texpectedLocal, tunnel.tunnelRemotePort, tunnel.tunnelLocalPort);\n\t\treturn this.dialogService.info(mismatchString);\n\t}\n\n\tasync forward(tunnelProperties: TunnelProperties, attributes?: Attributes | null): Promise<RemoteTunnel | string | undefined> {\n\t\tif (!this.restoreComplete && this.environmentService.remoteAuthority) {\n\t\t\tawait Event.toPromise(this.onRestoreComplete.event);\n\t\t}\n\t\treturn this.doForward(tunnelProperties, attributes);\n\t}\n\n\tprivate async doForward(tunnelProperties: TunnelProperties, attributes?: Attributes | null): Promise<RemoteTunnel | string | undefined> {\n\t\tawait this.extensionService.activateByEvent(ACTIVATION_EVENT);\n\n\t\tconst existingTunnel = mapHasAddressLocalhostOrAllInterfaces(this.forwarded, tunnelProperties.remote.host, tunnelProperties.remote.port);\n\t\tattributes = attributes ??\n\t\t\t((attributes !== null)\n\t\t\t\t? (await this.getAttributes([tunnelProperties.remote]))?.get(tunnelProperties.remote.port)\n\t\t\t\t: undefined);\n\t\tconst localPort = (tunnelProperties.local !== undefined) ? tunnelProperties.local : tunnelProperties.remote.port;\n\t\tlet noTunnelValue: string | undefined;\n\t\tif (!existingTunnel) {\n\t\t\tconst authority = this.environmentService.remoteAuthority;\n\t\t\tconst addressProvider: IAddressProvider | undefined = authority ? {\n\t\t\t\tgetAddress: async () => { return (await this.remoteAuthorityResolverService.resolveAuthority(authority)).authority; }\n\t\t\t} : undefined;\n\n\t\t\tconst key = makeAddress(tunnelProperties.remote.host, tunnelProperties.remote.port);\n\t\t\tthis.inProgress.set(key, true);\n\t\t\ttunnelProperties = this.mergeCachedAndUnrestoredProperties(key, tunnelProperties);\n\n\t\t\tconst tunnel = await this.tunnelService.openTunnel(addressProvider, tunnelProperties.remote.host, tunnelProperties.remote.port, undefined, localPort, (!tunnelProperties.elevateIfNeeded) ? attributes?.elevateIfNeeded : tunnelProperties.elevateIfNeeded, tunnelProperties.privacy, attributes?.protocol);\n\t\t\tif (typeof tunnel === 'string') {\n\t\t\t\t// There was an error  while creating the tunnel.\n\t\t\t\tnoTunnelValue = tunnel;\n\t\t\t} else if (tunnel && tunnel.localAddress) {\n\t\t\t\tconst matchingCandidate = mapHasAddressLocalhostOrAllInterfaces<CandidatePort>(this._candidates ?? new Map(), tunnelProperties.remote.host, tunnelProperties.remote.port);\n\t\t\t\tconst protocol = (tunnel.protocol ?\n\t\t\t\t\t((tunnel.protocol === TunnelProtocol.Https) ? TunnelProtocol.Https : TunnelProtocol.Http)\n\t\t\t\t\t: (attributes?.protocol ?? TunnelProtocol.Http));\n\t\t\t\tconst newForward: Tunnel = {\n\t\t\t\t\tremoteHost: tunnel.tunnelRemoteHost,\n\t\t\t\t\tremotePort: tunnel.tunnelRemotePort,\n\t\t\t\t\tlocalPort: tunnel.tunnelLocalPort,\n\t\t\t\t\tname: attributes?.label ?? tunnelProperties.name,\n\t\t\t\t\tcloseable: true,\n\t\t\t\t\tlocalAddress: tunnel.localAddress,\n\t\t\t\t\tprotocol,\n\t\t\t\t\tlocalUri: await this.makeLocalUri(tunnel.localAddress, attributes),\n\t\t\t\t\trunningProcess: matchingCandidate?.detail,\n\t\t\t\t\thasRunningProcess: !!matchingCandidate,\n\t\t\t\t\tpid: matchingCandidate?.pid,\n\t\t\t\t\tsource: tunnelProperties.source ?? UserTunnelSource,\n\t\t\t\t\tprivacy: tunnel.privacy,\n\t\t\t\t};\n\t\t\t\tthis.forwarded.set(key, newForward);\n\t\t\t\tthis.remoteTunnels.set(key, tunnel);\n\t\t\t\tthis.inProgress.delete(key);\n\t\t\t\tawait this.storeForwarded();\n\t\t\t\tawait this.showPortMismatchModalIfNeeded(tunnel, localPort, attributes);\n\t\t\t\tthis._onForwardPort.fire(newForward);\n\t\t\t\treturn tunnel;\n\t\t\t}\n\t\t\tthis.inProgress.delete(key);\n\t\t} else {\n\t\t\treturn this.mergeAttributesIntoExistingTunnel(existingTunnel, tunnelProperties, attributes);\n\t\t}\n\n\t\treturn noTunnelValue;\n\t}\n\n\tprivate mergeCachedAndUnrestoredProperties(key: string, tunnelProperties: TunnelProperties): TunnelProperties {\n\t\tconst map = this.unrestoredExtensionTunnels.has(key) ? this.unrestoredExtensionTunnels : (this.sessionCachedProperties.has(key) ? this.sessionCachedProperties : undefined);\n\t\tif (map) {\n\t\t\tconst updateProps = map.get(key)!;\n\t\t\tmap.delete(key);\n\t\t\tif (updateProps) {\n\t\t\t\ttunnelProperties.name = updateProps.name ?? tunnelProperties.name;\n\t\t\t\ttunnelProperties.local = (('local' in updateProps) ? updateProps.local : (('localPort' in updateProps) ? updateProps.localPort : undefined)) ?? tunnelProperties.local;\n\t\t\t\ttunnelProperties.privacy = updateProps.privacy ?? tunnelProperties.privacy;\n\t\t\t}\n\t\t}\n\t\treturn tunnelProperties;\n\t}\n\n\tprivate async mergeAttributesIntoExistingTunnel(existingTunnel: Tunnel, tunnelProperties: TunnelProperties, attributes: Attributes | undefined) {\n\t\tconst newName = attributes?.label ?? tunnelProperties.name;\n\t\tenum MergedAttributeAction {\n\t\t\tNone = 0,\n\t\t\tFire = 1,\n\t\t\tReopen = 2\n\t\t}\n\t\tlet mergedAction = MergedAttributeAction.None;\n\t\tif (newName !== existingTunnel.name) {\n\t\t\texistingTunnel.name = newName;\n\t\t\tmergedAction = MergedAttributeAction.Fire;\n\t\t}\n\t\t// Source of existing tunnel wins so that original source is maintained\n\t\tif ((attributes?.protocol || (existingTunnel.protocol !== TunnelProtocol.Http)) && (attributes?.protocol !== existingTunnel.protocol)) {\n\t\t\ttunnelProperties.source = existingTunnel.source;\n\t\t\tmergedAction = MergedAttributeAction.Reopen;\n\t\t}\n\t\t// New privacy value wins\n\t\tif (tunnelProperties.privacy && (existingTunnel.privacy !== tunnelProperties.privacy)) {\n\t\t\tmergedAction = MergedAttributeAction.Reopen;\n\t\t}\n\t\tswitch (mergedAction) {\n\t\t\tcase MergedAttributeAction.Fire: {\n\t\t\t\tthis._onForwardPort.fire();\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase MergedAttributeAction.Reopen: {\n\t\t\t\tawait this.close(existingTunnel.remoteHost, existingTunnel.remotePort, TunnelCloseReason.User);\n\t\t\t\tawait this.doForward(tunnelProperties, attributes);\n\t\t\t}\n\t\t}\n\n\t\treturn mapHasAddressLocalhostOrAllInterfaces(this.remoteTunnels, tunnelProperties.remote.host, tunnelProperties.remote.port);\n\t}\n\n\tasync name(host: string, port: number, name: string) {\n\t\tconst existingForwarded = mapHasAddressLocalhostOrAllInterfaces(this.forwarded, host, port);\n\t\tconst key = makeAddress(host, port);\n\t\tif (existingForwarded) {\n\t\t\texistingForwarded.name = name;\n\t\t\tawait this.storeForwarded();\n\t\t\tthis._onPortName.fire({ host, port });\n\t\t\treturn;\n\t\t} else if (this.detected.has(key)) {\n\t\t\tthis.detected.get(key)!.name = name;\n\t\t\tthis._onPortName.fire({ host, port });\n\t\t}\n\t}\n\n\tasync close(host: string, port: number, reason: TunnelCloseReason): Promise<void> {\n\t\tconst key = makeAddress(host, port);\n\t\tconst oldTunnel = this.forwarded.get(key)!;\n\t\tif ((reason === TunnelCloseReason.AutoForwardEnd) && oldTunnel && (oldTunnel.source.source === TunnelSource.Auto)) {\n\t\t\tthis.sessionCachedProperties.set(key, {\n\t\t\t\tlocal: oldTunnel.localPort,\n\t\t\t\tname: oldTunnel.name,\n\t\t\t\tprivacy: oldTunnel.privacy,\n\t\t\t});\n\t\t}\n\t\tawait this.tunnelService.closeTunnel(host, port);\n\t\treturn this.onTunnelClosed({ host, port }, reason);\n\t}\n\n\taddress(host: string, port: number): string | undefined {\n\t\tconst key = makeAddress(host, port);\n\t\treturn (this.forwarded.get(key) || this.detected.get(key))?.localAddress;\n\t}\n\n\tpublic get environmentTunnelsSet(): boolean {\n\t\treturn this._environmentTunnelsSet;\n\t}\n\n\taddEnvironmentTunnels(tunnels: TunnelDescription[] | undefined): void {\n\t\tif (tunnels) {\n\t\t\tfor (const tunnel of tunnels) {\n\t\t\t\tconst matchingCandidate = mapHasAddressLocalhostOrAllInterfaces(this._candidates ?? new Map(), tunnel.remoteAddress.host, tunnel.remoteAddress.port);\n\t\t\t\tconst localAddress = typeof tunnel.localAddress === 'string' ? tunnel.localAddress : makeAddress(tunnel.localAddress.host, tunnel.localAddress.port);\n\t\t\t\tthis.detected.set(makeAddress(tunnel.remoteAddress.host, tunnel.remoteAddress.port), {\n\t\t\t\t\tremoteHost: tunnel.remoteAddress.host,\n\t\t\t\t\tremotePort: tunnel.remoteAddress.port,\n\t\t\t\t\tlocalAddress: localAddress,\n\t\t\t\t\tprotocol: TunnelProtocol.Http,\n\t\t\t\t\tlocalUri: this.makeLocalUri(localAddress),\n\t\t\t\t\tcloseable: false,\n\t\t\t\t\trunningProcess: matchingCandidate?.detail,\n\t\t\t\t\thasRunningProcess: !!matchingCandidate,\n\t\t\t\t\tpid: matchingCandidate?.pid,\n\t\t\t\t\tprivacy: TunnelPrivacyId.ConstantPrivate,\n\t\t\t\t\tsource: {\n\t\t\t\t\t\tsource: TunnelSource.Extension,\n\t\t\t\t\t\tdescription: nls.localize('tunnel.staticallyForwarded', \"Statically Forwarded\")\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tthis.tunnelService.setEnvironmentTunnel(tunnel.remoteAddress.host, tunnel.remoteAddress.port, localAddress, TunnelPrivacyId.ConstantPrivate, TunnelProtocol.Http);\n\t\t\t}\n\t\t}\n\t\tthis._environmentTunnelsSet = true;\n\t\tthis._onEnvironmentTunnelsSet.fire();\n\t\tthis._onForwardPort.fire();\n\t}\n\n\tsetCandidateFilter(filter: ((candidates: CandidatePort[]) => Promise<CandidatePort[]>) | undefined): void {\n\t\tthis._candidateFilter = filter;\n\t}\n\n\tasync setCandidates(candidates: CandidatePort[]) {\n\t\tlet processedCandidates = candidates;\n\t\tif (this._candidateFilter) {\n\t\t\t// When an extension provides a filter, we do the filtering on the extension host before the candidates are set here.\n\t\t\t// However, when the filter doesn't come from an extension we filter here.\n\t\t\tprocessedCandidates = await this._candidateFilter(candidates);\n\t\t}\n\t\tconst removedCandidates = this.updateInResponseToCandidates(processedCandidates);\n\t\tthis.logService.trace(`ForwardedPorts: (TunnelModel) removed candidates ${Array.from(removedCandidates.values()).map(candidate => candidate.port).join(', ')}`);\n\t\tthis._onCandidatesChanged.fire(removedCandidates);\n\t}\n\n\t// Returns removed candidates\n\tprivate updateInResponseToCandidates(candidates: CandidatePort[]): Map<string, { host: string; port: number }> {\n\t\tconst removedCandidates = this._candidates ?? new Map();\n\t\tconst candidatesMap = new Map();\n\t\tthis._candidates = candidatesMap;\n\t\tcandidates.forEach(value => {\n\t\t\tconst addressKey = makeAddress(value.host, value.port);\n\t\t\tcandidatesMap.set(addressKey, {\n\t\t\t\thost: value.host,\n\t\t\t\tport: value.port,\n\t\t\t\tdetail: value.detail,\n\t\t\t\tpid: value.pid\n\t\t\t});\n\t\t\tif (removedCandidates.has(addressKey)) {\n\t\t\t\tremovedCandidates.delete(addressKey);\n\t\t\t}\n\t\t\tconst forwardedValue = mapHasAddressLocalhostOrAllInterfaces(this.forwarded, value.host, value.port);\n\t\t\tif (forwardedValue) {\n\t\t\t\tforwardedValue.runningProcess = value.detail;\n\t\t\t\tforwardedValue.hasRunningProcess = true;\n\t\t\t\tforwardedValue.pid = value.pid;\n\t\t\t}\n\t\t});\n\t\tremovedCandidates.forEach((_value, key) => {\n\t\t\tconst parsedAddress = parseAddress(key);\n\t\t\tif (!parsedAddress) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst forwardedValue = mapHasAddressLocalhostOrAllInterfaces(this.forwarded, parsedAddress.host, parsedAddress.port);\n\t\t\tif (forwardedValue) {\n\t\t\t\tforwardedValue.runningProcess = undefined;\n\t\t\t\tforwardedValue.hasRunningProcess = false;\n\t\t\t\tforwardedValue.pid = undefined;\n\t\t\t}\n\t\t\tconst detectedValue = mapHasAddressLocalhostOrAllInterfaces(this.detected, parsedAddress.host, parsedAddress.port);\n\t\t\tif (detectedValue) {\n\t\t\t\tdetectedValue.runningProcess = undefined;\n\t\t\t\tdetectedValue.hasRunningProcess = false;\n\t\t\t\tdetectedValue.pid = undefined;\n\t\t\t}\n\t\t});\n\t\treturn removedCandidates;\n\t}\n\n\tget candidates(): CandidatePort[] {\n\t\treturn this._candidates ? Array.from(this._candidates.values()) : [];\n\t}\n\n\tget candidatesOrUndefined(): CandidatePort[] | undefined {\n\t\treturn this._candidates ? this.candidates : undefined;\n\t}\n\n\tprivate async updateAttributes() {\n\t\t// If the label changes in the attributes, we should update it.\n\t\tconst tunnels = Array.from(this.forwarded.values());\n\t\tconst allAttributes = await this.getAttributes(tunnels.map(tunnel => {\n\t\t\treturn { port: tunnel.remotePort, host: tunnel.remoteHost };\n\t\t}), false);\n\t\tif (!allAttributes) {\n\t\t\treturn;\n\t\t}\n\t\tfor (const forwarded of tunnels) {\n\t\t\tconst attributes = allAttributes.get(forwarded.remotePort);\n\t\t\tif ((attributes?.protocol || (forwarded.protocol !== TunnelProtocol.Http)) && (attributes?.protocol !== forwarded.protocol)) {\n\t\t\t\tawait this.doForward({\n\t\t\t\t\tremote: { host: forwarded.remoteHost, port: forwarded.remotePort },\n\t\t\t\t\tlocal: forwarded.localPort,\n\t\t\t\t\tname: forwarded.name,\n\t\t\t\t\tsource: forwarded.source\n\t\t\t\t}, attributes);\n\t\t\t}\n\n\t\t\tif (!attributes) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (attributes.label && attributes.label !== forwarded.name) {\n\t\t\t\tawait this.name(forwarded.remoteHost, forwarded.remotePort, attributes.label);\n\t\t\t}\n\n\t\t}\n\t}\n\n\tasync getAttributes(forwardedPorts: { host: string; port: number }[], checkProviders: boolean = true): Promise<Map<number, Attributes> | undefined> {\n\t\tconst matchingCandidates: Map<number, CandidatePort> = new Map();\n\t\tconst pidToPortsMapping: Map<number | undefined, number[]> = new Map();\n\t\tforwardedPorts.forEach(forwardedPort => {\n\t\t\tconst matchingCandidate = mapHasAddressLocalhostOrAllInterfaces<CandidatePort>(this._candidates ?? new Map(), LOCALHOST_ADDRESSES[0], forwardedPort.port) ?? forwardedPort;\n\t\t\tif (matchingCandidate) {\n\t\t\t\tmatchingCandidates.set(forwardedPort.port, matchingCandidate);\n\t\t\t\tconst pid = isCandidatePort(matchingCandidate) ? matchingCandidate.pid : undefined;\n\t\t\t\tif (!pidToPortsMapping.has(pid)) {\n\t\t\t\t\tpidToPortsMapping.set(pid, []);\n\t\t\t\t}\n\t\t\t\tpidToPortsMapping.get(pid)?.push(forwardedPort.port);\n\t\t\t}\n\t\t});\n\n\t\tconst configAttributes: Map<number, Attributes> = new Map();\n\t\tforwardedPorts.forEach(forwardedPort => {\n\t\t\tconst attributes = this.configPortsAttributes.getAttributes(forwardedPort.port, forwardedPort.host, matchingCandidates.get(forwardedPort.port)?.detail);\n\t\t\tif (attributes) {\n\t\t\t\tconfigAttributes.set(forwardedPort.port, attributes);\n\t\t\t}\n\t\t});\n\t\tif ((this.portAttributesProviders.length === 0) || !checkProviders) {\n\t\t\treturn (configAttributes.size > 0) ? configAttributes : undefined;\n\t\t}\n\n\t\t// Group calls to provide attributes by pid.\n\t\tconst allProviderResults = await Promise.all(flatten(this.portAttributesProviders.map(provider => {\n\t\t\treturn Array.from(pidToPortsMapping.entries()).map(entry => {\n\t\t\t\tconst portGroup = entry[1];\n\t\t\t\tconst matchingCandidate = matchingCandidates.get(portGroup[0]);\n\t\t\t\treturn provider.providePortAttributes(portGroup,\n\t\t\t\t\tmatchingCandidate?.pid, matchingCandidate?.detail, new CancellationTokenSource().token);\n\t\t\t});\n\t\t})));\n\t\tconst providedAttributes: Map<number, ProvidedPortAttributes> = new Map();\n\t\tallProviderResults.forEach(attributes => attributes.forEach(attribute => {\n\t\t\tif (attribute) {\n\t\t\t\tprovidedAttributes.set(attribute.port, attribute);\n\t\t\t}\n\t\t}));\n\n\t\tif (!configAttributes && !providedAttributes) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Merge. The config wins.\n\t\tconst mergedAttributes: Map<number, Attributes> = new Map();\n\t\tforwardedPorts.forEach(forwardedPorts => {\n\t\t\tconst config = configAttributes.get(forwardedPorts.port);\n\t\t\tconst provider = providedAttributes.get(forwardedPorts.port);\n\t\t\tmergedAttributes.set(forwardedPorts.port, {\n\t\t\t\televateIfNeeded: config?.elevateIfNeeded,\n\t\t\t\tlabel: config?.label,\n\t\t\t\tonAutoForward: config?.onAutoForward ?? PortsAttributes.providedActionToAction(provider?.autoForwardAction),\n\t\t\t\trequireLocalPort: config?.requireLocalPort,\n\t\t\t\tprotocol: config?.protocol\n\t\t\t});\n\t\t});\n\n\t\treturn mergedAttributes;\n\t}\n\n\taddAttributesProvider(provider: PortAttributesProvider) {\n\t\tthis.portAttributesProviders.push(provider);\n\t}\n}\n"]}