{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/remote/common/abstractRemoteAgentService.ts"],"names":[],"mappings":"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","file":"abstractRemoteAgentService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IChannel, IServerChannel, getDelayedChannel, IPCLogger } from 'vs/base/parts/ipc/common/ipc';\nimport { Client } from 'vs/base/parts/ipc/common/ipc.net';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { connectRemoteAgentManagement, IConnectionOptions, ManagementPersistentConnection, PersistentConnectionEvent } from 'vs/platform/remote/common/remoteAgentConnection';\nimport { IExtensionHostExitInfo, IRemoteAgentConnection, IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { IRemoteAuthorityResolverService } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { RemoteAgentConnectionContext, IRemoteAgentEnvironment } from 'vs/platform/remote/common/remoteAgentEnvironment';\nimport { RemoteExtensionEnvironmentChannelClient } from 'vs/workbench/services/remote/common/remoteAgentEnvironmentChannel';\nimport { IDiagnosticInfoOptions, IDiagnosticInfo } from 'vs/platform/diagnostics/common/diagnostics';\nimport { Emitter } from 'vs/base/common/event';\nimport { ISignService } from 'vs/platform/sign/common/sign';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ITelemetryData, TelemetryLevel } from 'vs/platform/telemetry/common/telemetry';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\nimport { IRemoteSocketFactoryService } from 'vs/platform/remote/common/remoteSocketFactoryService';\n\nexport abstract class AbstractRemoteAgentService extends Disposable implements IRemoteAgentService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _connection: IRemoteAgentConnection | null;\n\tprivate _environment: Promise<IRemoteAgentEnvironment | null> | null;\n\n\tconstructor(\n\t\t@IRemoteSocketFactoryService private readonly remoteSocketFactoryService: IRemoteSocketFactoryService,\n\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n\t\t@IWorkbenchEnvironmentService protected readonly _environmentService: IWorkbenchEnvironmentService,\n\t\t@IProductService productService: IProductService,\n\t\t@IRemoteAuthorityResolverService private readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\t@ISignService signService: ISignService,\n\t\t@ILogService logService: ILogService\n\t) {\n\t\tsuper();\n\t\tif (this._environmentService.remoteAuthority) {\n\t\t\tthis._connection = this._register(new RemoteAgentConnection(this._environmentService.remoteAuthority, productService.commit, productService.quality, this.remoteSocketFactoryService, this._remoteAuthorityResolverService, signService, logService));\n\t\t} else {\n\t\t\tthis._connection = null;\n\t\t}\n\t\tthis._environment = null;\n\t}\n\n\tgetConnection(): IRemoteAgentConnection | null {\n\t\treturn this._connection;\n\t}\n\n\tgetEnvironment(): Promise<IRemoteAgentEnvironment | null> {\n\t\treturn this.getRawEnvironment().then(undefined, () => null);\n\t}\n\n\tgetRawEnvironment(): Promise<IRemoteAgentEnvironment | null> {\n\t\tif (!this._environment) {\n\t\t\tthis._environment = this._withChannel(\n\t\t\t\tasync (channel, connection) => {\n\t\t\t\t\tconst env = await RemoteExtensionEnvironmentChannelClient.getEnvironmentData(channel, connection.remoteAuthority, this.userDataProfileService.currentProfile.isDefault ? undefined : this.userDataProfileService.currentProfile.id);\n\t\t\t\t\tthis._remoteAuthorityResolverService._setAuthorityConnectionToken(connection.remoteAuthority, env.connectionToken);\n\t\t\t\t\treturn env;\n\t\t\t\t},\n\t\t\t\tnull\n\t\t\t);\n\t\t}\n\t\treturn this._environment;\n\t}\n\n\tgetExtensionHostExitInfo(reconnectionToken: string): Promise<IExtensionHostExitInfo | null> {\n\t\treturn this._withChannel(\n\t\t\t(channel, connection) => RemoteExtensionEnvironmentChannelClient.getExtensionHostExitInfo(channel, connection.remoteAuthority, reconnectionToken),\n\t\t\tnull\n\t\t);\n\t}\n\n\tgetDiagnosticInfo(options: IDiagnosticInfoOptions): Promise<IDiagnosticInfo | undefined> {\n\t\treturn this._withChannel(\n\t\t\tchannel => RemoteExtensionEnvironmentChannelClient.getDiagnosticInfo(channel, options),\n\t\t\tundefined\n\t\t);\n\t}\n\n\tupdateTelemetryLevel(telemetryLevel: TelemetryLevel): Promise<void> {\n\t\treturn this._withTelemetryChannel(\n\t\t\tchannel => RemoteExtensionEnvironmentChannelClient.updateTelemetryLevel(channel, telemetryLevel),\n\t\t\tundefined\n\t\t);\n\t}\n\n\tlogTelemetry(eventName: string, data: ITelemetryData): Promise<void> {\n\t\treturn this._withTelemetryChannel(\n\t\t\tchannel => RemoteExtensionEnvironmentChannelClient.logTelemetry(channel, eventName, data),\n\t\t\tundefined\n\t\t);\n\t}\n\n\tflushTelemetry(): Promise<void> {\n\t\treturn this._withTelemetryChannel(\n\t\t\tchannel => RemoteExtensionEnvironmentChannelClient.flushTelemetry(channel),\n\t\t\tundefined\n\t\t);\n\t}\n\n\tgetRoundTripTime(): Promise<number | undefined> {\n\t\treturn this._withTelemetryChannel(\n\t\t\tasync channel => {\n\t\t\t\tconst start = Date.now();\n\t\t\t\tawait RemoteExtensionEnvironmentChannelClient.ping(channel);\n\t\t\t\treturn Date.now() - start;\n\t\t\t},\n\t\t\tundefined\n\t\t);\n\t}\n\n\tprivate _withChannel<R>(callback: (channel: IChannel, connection: IRemoteAgentConnection) => Promise<R>, fallback: R): Promise<R> {\n\t\tconst connection = this.getConnection();\n\t\tif (!connection) {\n\t\t\treturn Promise.resolve(fallback);\n\t\t}\n\t\treturn connection.withChannel('remoteextensionsenvironment', (channel) => callback(channel, connection));\n\t}\n\n\tprivate _withTelemetryChannel<R>(callback: (channel: IChannel, connection: IRemoteAgentConnection) => Promise<R>, fallback: R): Promise<R> {\n\t\tconst connection = this.getConnection();\n\t\tif (!connection) {\n\t\t\treturn Promise.resolve(fallback);\n\t\t}\n\t\treturn connection.withChannel('telemetry', (channel) => callback(channel, connection));\n\t}\n\n}\n\nclass RemoteAgentConnection extends Disposable implements IRemoteAgentConnection {\n\n\tprivate readonly _onReconnecting = this._register(new Emitter<void>());\n\tpublic readonly onReconnecting = this._onReconnecting.event;\n\n\tprivate readonly _onDidStateChange = this._register(new Emitter<PersistentConnectionEvent>());\n\tpublic readonly onDidStateChange = this._onDidStateChange.event;\n\n\treadonly remoteAuthority: string;\n\tprivate _connection: Promise<Client<RemoteAgentConnectionContext>> | null;\n\n\tprivate _initialConnectionMs: number | undefined;\n\n\tconstructor(\n\t\tremoteAuthority: string,\n\t\tprivate readonly _commit: string | undefined,\n\t\tprivate readonly _quality: string | undefined,\n\t\tprivate readonly _remoteSocketFactoryService: IRemoteSocketFactoryService,\n\t\tprivate readonly _remoteAuthorityResolverService: IRemoteAuthorityResolverService,\n\t\tprivate readonly _signService: ISignService,\n\t\tprivate readonly _logService: ILogService\n\t) {\n\t\tsuper();\n\t\tthis.remoteAuthority = remoteAuthority;\n\t\tthis._connection = null;\n\t}\n\n\tgetChannel<T extends IChannel>(channelName: string): T {\n\t\treturn <T>getDelayedChannel(this._getOrCreateConnection().then(c => c.getChannel(channelName)));\n\t}\n\n\twithChannel<T extends IChannel, R>(channelName: string, callback: (channel: T) => Promise<R>): Promise<R> {\n\t\tconst channel = this.getChannel<T>(channelName);\n\t\tconst result = callback(channel);\n\t\treturn result;\n\t}\n\n\tregisterChannel<T extends IServerChannel<RemoteAgentConnectionContext>>(channelName: string, channel: T): void {\n\t\tthis._getOrCreateConnection().then(client => client.registerChannel(channelName, channel));\n\t}\n\n\tasync getInitialConnectionTimeMs() {\n\t\ttry {\n\t\t\tawait this._getOrCreateConnection();\n\t\t} catch {\n\t\t\t// ignored -- time is measured even if connection fails\n\t\t}\n\n\t\treturn this._initialConnectionMs!;\n\t}\n\n\tprivate _getOrCreateConnection(): Promise<Client<RemoteAgentConnectionContext>> {\n\t\tif (!this._connection) {\n\t\t\tthis._connection = this._createConnection();\n\t\t}\n\t\treturn this._connection;\n\t}\n\n\tprivate async _createConnection(): Promise<Client<RemoteAgentConnectionContext>> {\n\t\tlet firstCall = true;\n\t\tconst options: IConnectionOptions = {\n\t\t\tcommit: this._commit,\n\t\t\tquality: this._quality,\n\t\t\taddressProvider: {\n\t\t\t\tgetAddress: async () => {\n\t\t\t\t\tif (firstCall) {\n\t\t\t\t\t\tfirstCall = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._onReconnecting.fire(undefined);\n\t\t\t\t\t}\n\t\t\t\t\tconst { authority } = await this._remoteAuthorityResolverService.resolveAuthority(this.remoteAuthority);\n\t\t\t\t\treturn { connectTo: authority.connectTo, connectionToken: authority.connectionToken };\n\t\t\t\t}\n\t\t\t},\n\t\t\tremoteSocketFactoryService: this._remoteSocketFactoryService,\n\t\t\tsignService: this._signService,\n\t\t\tlogService: this._logService,\n\t\t\tipcLogger: false ? new IPCLogger(`Local \\u2192 Remote`, `Remote \\u2192 Local`) : null\n\t\t};\n\t\tlet connection: ManagementPersistentConnection;\n\t\tconst start = Date.now();\n\t\ttry {\n\t\t\tconnection = this._register(await connectRemoteAgentManagement(options, this.remoteAuthority, `renderer`));\n\t\t} finally {\n\t\t\tthis._initialConnectionMs = Date.now() - start;\n\t\t}\n\n\t\tconnection.protocol.onDidDispose(() => {\n\t\t\tconnection.dispose();\n\t\t});\n\t\tthis._register(connection.onDidStateChange(e => this._onDidStateChange.fire(e)));\n\t\treturn connection.client;\n\t}\n}\n"]}