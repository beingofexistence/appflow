{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/remote/common/remoteFileSystemProviderClient.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAYnF,QAAA,GAAG,GAA+B,kBAAkB,CAAC;IAElE,MAAa,GAA+B,SAAQ,kCAAG;QAEtD,MAAM,CAAC,QAAQ,CAAC,kBAAuB,EAAkB,WAAgB,EAAW,UAAe;YAClG,MAAM,UAAU,GAAG,kBAAkB,CAAC,aAAa,EAAE,CAAC;YACtD,IAAI,CAAC,UAAU,EAAE;gBAChB,OAAO,eAAG,CAAQ,IAAI,CAAC;aACvB;YAED,MAAM,WAAW,GAAG,IAAI,eAAG,EAAc,CAAC;YAE1C,MAAM,kBAAkB,GAAG,CAAC,KAAK,IAAI,EAAE;gBACtC,IAAI;oBACH,MAAM,WAAW,GAAG,MAAM,kBAAkB,CAAC,iBAAiB,EAAE,CAAC;oBACjE,IAAI,WAAW,EAAE;wBAChB,0DAA0D;wBAC1D,sDAAsD;wBACtD,uCAAuC;wBACvC,WAAW,CAAC,gBAAgB,CAAC,iBAAO,CAAC,YAAY,EAAE,WAAW,CAAC,GAAG,CAAC,IAAI,GAAG,CAA4B,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;qBACjI;yBAAM;wBACN,UAAU,CAAC,KAAK,CAAC,+EAA+E,CAAC,CAAC;qBAClG;iBACD;gBAAC,OAAO,KAAK,EAAE;oBACf,UAAU,CAAC,KAAK,CAAC,sFAAsF,EAAE,IAAA,WAAE,EAAc,KAAK,CAAC,CAAC,CAAC;iBACjI;YACF,CAAC,CAAC,EAAE,CAAC;YAEL,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC,gCAAgC,CAAC,CAAC,CAAC,EAAE;gBAChE,IAAI,CAAC,CAAC,MAAM,KAAK,iBAAO,CAAC,YAAY,EAAE;oBACtC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;iBAC3B;YACF,CAAC,CAAC,CAAC,CAAC;YAEJ,OAAO,WAAW,CAAC;QACpB,CAAC;QAED,YAAoB,sBAA+C,EAAE,UAAkC;YACtG,KAAK,CAAC,UAAU,CAAC,UAAU,CAAC,WAAG,CAA6B,EAAE,EAAE,iBAAiB,EAAE,sBAAsB,CAAC,EAAE,kCAA0B,EAAE,CAAC,CAAC;QAC3I,CAAC;KACD;IAtCD,kBAsCC","file":"remoteFileSystemProviderClient.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getErrorMessage } from 'vs/base/common/errors';\nimport { Disposable, DisposableStore, IDisposable } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport { OperatingSystem } from 'vs/base/common/platform';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { DiskFileSystemProviderClient } from 'vs/platform/files/common/diskFileSystemProviderClient';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IRemoteAgentEnvironment } from 'vs/platform/remote/common/remoteAgentEnvironment';\nimport { IRemoteAgentConnection, IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\n\nexport const REMOTE_FILE_SYSTEM_CHANNEL_NAME = 'remoteFilesystem';\n\nexport class RemoteFileSystemProviderClient extends DiskFileSystemProviderClient {\n\n\tstatic register(remoteAgentService: IRemoteAgentService, fileService: IFileService, logService: ILogService): IDisposable {\n\t\tconst connection = remoteAgentService.getConnection();\n\t\tif (!connection) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\tconst disposables = new DisposableStore();\n\n\t\tconst environmentPromise = (async () => {\n\t\t\ttry {\n\t\t\t\tconst environment = await remoteAgentService.getRawEnvironment();\n\t\t\t\tif (environment) {\n\t\t\t\t\t// Register remote fsp even before it is asked to activate\n\t\t\t\t\t// because, some features (configuration) wait for its\n\t\t\t\t\t// registration before making fs calls.\n\t\t\t\t\tfileService.registerProvider(Schemas.vscodeRemote, disposables.add(new RemoteFileSystemProviderClient(environment, connection)));\n\t\t\t\t} else {\n\t\t\t\t\tlogService.error('Cannot register remote filesystem provider. Remote environment doesnot exist.');\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tlogService.error('Cannot register remote filesystem provider. Error while fetching remote environment.', getErrorMessage(error));\n\t\t\t}\n\t\t})();\n\n\t\tdisposables.add(fileService.onWillActivateFileSystemProvider(e => {\n\t\t\tif (e.scheme === Schemas.vscodeRemote) {\n\t\t\t\te.join(environmentPromise);\n\t\t\t}\n\t\t}));\n\n\t\treturn disposables;\n\t}\n\n\tprivate constructor(remoteAgentEnvironment: IRemoteAgentEnvironment, connection: IRemoteAgentConnection) {\n\t\tsuper(connection.getChannel(REMOTE_FILE_SYSTEM_CHANNEL_NAME), { pathCaseSensitive: remoteAgentEnvironment.os === OperatingSystem.Linux });\n\t}\n}\n"]}