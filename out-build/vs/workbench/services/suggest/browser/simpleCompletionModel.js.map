{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/suggest/browser/simpleCompletionModel.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAWhG,MAAa,IAAI;QAChB,YACU,kBAA0B,EAC1B,mBAA2B;YAD3B,uBAAkB,GAAlB,kBAAkB,CAAQ;YAC1B,wBAAmB,GAAnB,mBAAmB,CAAQ;QACjC,CAAC;KACL;IALD,oBAKC;IAED,IAAW,QAIV;IAJD,WAAW,QAAQ;QAClB,6CAAW,CAAA;QACX,qCAAO,CAAA;QACP,uCAAQ,CAAA;IACT,CAAC,EAJU,QAAQ,KAAR,QAAQ,QAIlB;IAED,MAAa,IAAI;QAWhB,YACkB,CAA8B,EACvC,CAAkB,EACjB,gBAAwB,EACxB,iBAAyB;YAHjB,MAAC,GAAD,CAAC,CAA6B;YACvC,MAAC,GAAD,CAAC,CAAiB;YACjB,qBAAgB,GAAhB,gBAAgB,CAAQ;YACxB,sBAAiB,GAAjB,iBAAiB,CAAQ;YAZ3B,MAAC,wBAAsC;YACvC,MAAC,GAAmD,aAAG,CAAe,OAAO,CAAC;YAEtF,wBAAwB;YAChB,MAAC,GAEL,EAAE,CAAC;QAQP,CAAC;QAED,IAAI,KAAK;YACR,IAAI,CAAC,CAAC,EAAmB,CAAC;YAC1B,OAAO,IAAI,CAAC,CAAe,CAAC;QAC7B,CAAC;QAED,IAAI,KAAK;YACR,IAAI,CAAC,CAAC,EAAmB,CAAC;YAC1B,OAAO,IAAI,CAAC,CAAO,CAAC;QACrB,CAAC;QAGD,IAAI,WAAW;YACd,OAAO,IAAI,CAAC,CAAC,CAAY;QAC1B,CAAC;QAED,IAAI,WAAW,CAAC,KAAW;YAC1B,IAAI,IAAI,CAAC,CAAC,CAAY,kBAAkB,KAAK,KAAK,CAAC,kBAAkB;mBACjE,IAAI,CAAC,CAAC,CAAY,mBAAmB,KAAK,KAAK,CAAC,mBAAmB,EACrE;gBACD,IAAI,CAAC,CAAC,GAAe,IAAI,CAAC,CAAC,CAAY,mBAAmB,GAAG,KAAK,CAAC,mBAAmB,IAAI,IAAI,CAAC,CAAC,CAAc,CAAC,uBAAe,CAAC,qBAAa,CAAC;gBAC7I,IAAI,CAAC,CAAC,GAAc,KAAK,CAAC;aAC1B;QACF,CAAC;QAEO,CAAC;YACR,IAAI,IAAI,CAAC,CAAC,6BAAiC,EAAE;gBAC5C,IAAI,CAAC,CAAC,EAAmB,CAAC;aAC1B;QACF,CAAC;QACO,CAAC;YAER,kCAAkC;YAElC,MAAM,YAAY,GAAa,EAAE,CAAC;YAElC,MAAM,EAAE,kBAAkB,EAAE,mBAAmB,EAAE,GAAG,IAAI,CAAC,CAAC,CAAY;YACtE,IAAI,IAAI,GAAG,EAAE,CAAC;YACd,IAAI,OAAO,GAAG,EAAE,CAAC;YAEjB,4BAA4B;YAC5B,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,yBAA6B,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAM,CAAC,CAAC,IAAI,CAAC,CAAe,CAAC;YACxF,MAAM,MAAM,GAA2B,EAAE,CAAC;YAE1C,gDAAgD;YAChD,sDAAsD;YACtD,qBAAqB;YACrB,MAAM,OAAO,GAAgB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAQ,cAAc,IAAI,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC,aAAG,CAAQ,CAAC,CAAC,aAAG,CAA0B;YAEjI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBAEvC,MAAM,IAAI,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;gBAEvB,wBAAwB;gBACxB,mCAAmC;gBACnC,IAAI;gBAEJ,0DAA0D;gBAC1D,6EAA6E;gBAE7E,uDAAuD;gBACvD,6DAA6D;gBAC7D,4DAA4D;gBAC5D,YAAY;gBACZ,MAAM,eAAe,GAAG,IAAI,CAAC,iBAAiB,CAAC,CAAC,gDAAgD;gBAChG,MAAM,OAAO,GAAG,eAAe,GAAG,mBAAmB,CAAC,CAAC,2CAA2C;gBAClG,IAAI,IAAI,CAAC,MAAM,KAAK,OAAO,EAAE;oBAC5B,IAAI,GAAG,OAAO,KAAK,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC;oBAC/D,OAAO,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;iBAC7B;gBAED,gDAAgD;gBAChD,SAAS;gBACT,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;gBAEjB,IAAI,OAAO,KAAK,CAAC,EAAE;oBAClB,gDAAgD;oBAChD,gDAAgD;oBAChD,kDAAkD;oBAClD,mDAAmD;oBACnD,2CAA2C;oBAC3C,IAAI,CAAC,KAAK,GAAG,oBAAU,CAAC,OAAO,CAAC;iBAEhC;qBAAM;oBACN,iDAAiD;oBACjD,kDAAkD;oBAClD,IAAI,OAAO,GAAG,CAAC,CAAC;oBAChB,OAAO,OAAO,GAAG,eAAe,EAAE;wBACjC,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;wBACpC,IAAI,EAAE,4BAAmB,IAAI,EAAE,yBAAiB,EAAE;4BACjD,OAAO,IAAI,CAAC,CAAC;yBACb;6BAAM;4BACN,MAAM;yBACN;qBACD;oBAED,IAAI,OAAO,IAAI,OAAO,EAAE;wBACvB,wDAAwD;wBACxD,0DAA0D;wBAC1D,IAAI,CAAC,KAAK,GAAG,oBAAU,CAAC,OAAO,CAAC;wBAEhC,+DAA+D;wBAC/D,6DAA6D;wBAC7D,kEAAkE;wBAClE,gEAAgE;wBAChE,+BAA+B;wBAC/B,+HAA+H;wBAC/H,iBAAiB;wBACjB,0BAA0B;wBAC1B,KAAK;wBACL,8EAA8E;wBAC9E,yEAAyE;wBACzE,wBAAwB;wBACxB,YAAY;wBACZ,+EAA+E;wBAC/E,+BAA+B;wBAC/B,qFAAqF;wBACrF,2DAA2D;wBAC3D,KAAK;qBAEL;yBAAM;wBACN,8CAA8C;wBAC9C,MAAM,KAAK,GAAG,OAAO,CAAC,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC,CAAkB,CAAC;wBAChH,IAAI,CAAC,KAAK,EAAE;4BACX,SAAS,CAAC,WAAW;yBACrB;wBACD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;qBACnB;iBACD;gBAED,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC;gBACb,sBAAsB;gBACtB,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAA,8DAA8D;gBAChF,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAElB,eAAe;gBACf,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;aAChD;YAED,IAAI,CAAC,CAAC,GAAgB,MAAM,CAAC,CAAC,uCAAuC;YACrE,IAAI,CAAC,CAAC,2BAA+B,CAAC;YAEtC,IAAI,CAAC,CAAC,GAAQ;gBACb,SAAS,EAAE,YAAY,CAAC,MAAM,CAAC,CAAC;oBAC/B,IAAA,YAAG,EAAS,YAAY,CAAC,MAAM,GAAG,GAAG,EAAE,YAAY,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;oBACrE,CAAC,CAAC,CAAC;aACJ,CAAC;QACH,CAAC;KACD;IAtKD,oBAsKC","file":"simpleCompletionModel.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { SimpleCompletionItem } from 'vs/workbench/services/suggest/browser/simpleCompletionItem';\nimport { quickSelect } from 'vs/base/common/arrays';\nimport { CharCode } from 'vs/base/common/charCode';\nimport { FuzzyScore, fuzzyScore, fuzzyScoreGracefulAggressive, FuzzyScoreOptions, FuzzyScorer } from 'vs/base/common/filters';\n\nexport interface ISimpleCompletionStats {\n\tpLabelLen: number;\n}\n\nexport class LineContext {\n\tconstructor(\n\t\treadonly leadingLineContent: string,\n\t\treadonly characterCountDelta: number,\n\t) { }\n}\n\nconst enum Refilter {\n\tNothing = 0,\n\tAll = 1,\n\tIncr = 2\n}\n\nexport class SimpleCompletionModel {\n\tprivate _stats?: ISimpleCompletionStats;\n\tprivate _filteredItems?: SimpleCompletionItem[];\n\tprivate _refilterKind: Refilter = Refilter.All;\n\tprivate _fuzzyScoreOptions: FuzzyScoreOptions | undefined = FuzzyScoreOptions.default;\n\n\t// TODO: Pass in options\n\tprivate _options: {\n\t\tfilterGraceful?: boolean;\n\t} = {};\n\n\tconstructor(\n\t\tprivate readonly _items: SimpleCompletionItem[],\n\t\tprivate _lineContext: LineContext,\n\t\treadonly replacementIndex: number,\n\t\treadonly replacementLength: number\n\t) {\n\t}\n\n\tget items(): SimpleCompletionItem[] {\n\t\tthis._ensureCachedState();\n\t\treturn this._filteredItems!;\n\t}\n\n\tget stats(): ISimpleCompletionStats {\n\t\tthis._ensureCachedState();\n\t\treturn this._stats!;\n\t}\n\n\n\tget lineContext(): LineContext {\n\t\treturn this._lineContext;\n\t}\n\n\tset lineContext(value: LineContext) {\n\t\tif (this._lineContext.leadingLineContent !== value.leadingLineContent\n\t\t\t|| this._lineContext.characterCountDelta !== value.characterCountDelta\n\t\t) {\n\t\t\tthis._refilterKind = this._lineContext.characterCountDelta < value.characterCountDelta && this._filteredItems ? Refilter.Incr : Refilter.All;\n\t\t\tthis._lineContext = value;\n\t\t}\n\t}\n\n\tprivate _ensureCachedState(): void {\n\t\tif (this._refilterKind !== Refilter.Nothing) {\n\t\t\tthis._createCachedState();\n\t\t}\n\t}\n\tprivate _createCachedState(): void {\n\n\t\t// this._providerInfo = new Map();\n\n\t\tconst labelLengths: number[] = [];\n\n\t\tconst { leadingLineContent, characterCountDelta } = this._lineContext;\n\t\tlet word = '';\n\t\tlet wordLow = '';\n\n\t\t// incrementally filter less\n\t\tconst source = this._refilterKind === Refilter.All ? this._items : this._filteredItems!;\n\t\tconst target: SimpleCompletionItem[] = [];\n\n\t\t// picks a score function based on the number of\n\t\t// items that we have to score/filter and based on the\n\t\t// user-configuration\n\t\tconst scoreFn: FuzzyScorer = (!this._options.filterGraceful || source.length > 2000) ? fuzzyScore : fuzzyScoreGracefulAggressive;\n\n\t\tfor (let i = 0; i < source.length; i++) {\n\n\t\t\tconst item = source[i];\n\n\t\t\t// if (item.isInvalid) {\n\t\t\t// \tcontinue; // SKIP invalid items\n\t\t\t// }\n\n\t\t\t// collect all support, know if their result is incomplete\n\t\t\t// this._providerInfo.set(item.provider, Boolean(item.container.incomplete));\n\n\t\t\t// 'word' is that remainder of the current line that we\n\t\t\t// filter and score against. In theory each suggestion uses a\n\t\t\t// different word, but in practice not - that's why we cache\n\t\t\t// TODO: Fix\n\t\t\tconst overwriteBefore = this.replacementLength; // item.position.column - item.editStart.column;\n\t\t\tconst wordLen = overwriteBefore + characterCountDelta; // - (item.position.column - this._column);\n\t\t\tif (word.length !== wordLen) {\n\t\t\t\tword = wordLen === 0 ? '' : leadingLineContent.slice(-wordLen);\n\t\t\t\twordLow = word.toLowerCase();\n\t\t\t}\n\n\t\t\t// remember the word against which this item was\n\t\t\t// scored\n\t\t\titem.word = word;\n\n\t\t\tif (wordLen === 0) {\n\t\t\t\t// when there is nothing to score against, don't\n\t\t\t\t// event try to do. Use a const rank and rely on\n\t\t\t\t// the fallback-sort using the initial sort order.\n\t\t\t\t// use a score of `-100` because that is out of the\n\t\t\t\t// bound of values `fuzzyScore` will return\n\t\t\t\titem.score = FuzzyScore.Default;\n\n\t\t\t} else {\n\t\t\t\t// skip word characters that are whitespace until\n\t\t\t\t// we have hit the replace range (overwriteBefore)\n\t\t\t\tlet wordPos = 0;\n\t\t\t\twhile (wordPos < overwriteBefore) {\n\t\t\t\t\tconst ch = word.charCodeAt(wordPos);\n\t\t\t\t\tif (ch === CharCode.Space || ch === CharCode.Tab) {\n\t\t\t\t\t\twordPos += 1;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (wordPos >= wordLen) {\n\t\t\t\t\t// the wordPos at which scoring starts is the whole word\n\t\t\t\t\t// and therefore the same rules as not having a word apply\n\t\t\t\t\titem.score = FuzzyScore.Default;\n\n\t\t\t\t\t// } else if (typeof item.completion.filterText === 'string') {\n\t\t\t\t\t// \t// when there is a `filterText` it must match the `word`.\n\t\t\t\t\t// \t// if it matches we check with the label to compute highlights\n\t\t\t\t\t// \t// and if that doesn't yield a result we have no highlights,\n\t\t\t\t\t// \t// despite having the match\n\t\t\t\t\t// \tconst match = scoreFn(word, wordLow, wordPos, item.completion.filterText, item.filterTextLow!, 0, this._fuzzyScoreOptions);\n\t\t\t\t\t// \tif (!match) {\n\t\t\t\t\t// \t\tcontinue; // NO match\n\t\t\t\t\t// \t}\n\t\t\t\t\t// \tif (compareIgnoreCase(item.completion.filterText, item.textLabel) === 0) {\n\t\t\t\t\t// \t\t// filterText and label are actually the same -> use good highlights\n\t\t\t\t\t// \t\titem.score = match;\n\t\t\t\t\t// \t} else {\n\t\t\t\t\t// \t\t// re-run the scorer on the label in the hope of a result BUT use the rank\n\t\t\t\t\t// \t\t// of the filterText-match\n\t\t\t\t\t// \t\titem.score = anyScore(word, wordLow, wordPos, item.textLabel, item.labelLow, 0);\n\t\t\t\t\t// \t\titem.score[0] = match[0]; // use score from filterText\n\t\t\t\t\t// \t}\n\n\t\t\t\t} else {\n\t\t\t\t\t// by default match `word` against the `label`\n\t\t\t\t\tconst match = scoreFn(word, wordLow, wordPos, item.completion.label, item.labelLow, 0, this._fuzzyScoreOptions);\n\t\t\t\t\tif (!match) {\n\t\t\t\t\t\tcontinue; // NO match\n\t\t\t\t\t}\n\t\t\t\t\titem.score = match;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\titem.idx = i;\n\t\t\t// TODO: Word distance\n\t\t\titem.distance = 1;//this._wordDistance.distance(item.position, item.completion);\n\t\t\ttarget.push(item);\n\n\t\t\t// update stats\n\t\t\tlabelLengths.push(item.completion.label.length);\n\t\t}\n\n\t\tthis._filteredItems = target; // target.sort(this._snippetCompareFn);\n\t\tthis._refilterKind = Refilter.Nothing;\n\n\t\tthis._stats = {\n\t\t\tpLabelLen: labelLengths.length ?\n\t\t\t\tquickSelect(labelLengths.length - .85, labelLengths, (a, b) => a - b)\n\t\t\t\t: 0\n\t\t};\n\t}\n}\n"]}