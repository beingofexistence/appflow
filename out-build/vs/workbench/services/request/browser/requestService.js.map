{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/request/browser/requestService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAYzF,IAAM,IAAI,GAAV,MAAM,IAAsB,SAAQ,qBAAI;QAE9C,YACuC,CAAuB,EACtC,oBAAyB,EAChC,aAAkB;YAElC,KAAK,CAAC,oBAAoB,EAAE,aAAa,CAAC,CAAC;YAJL,MAAC,GAAD,CAAC,CAAsB;QAK9D,CAAC;QAEQ,KAAK,CAAC,OAAO,CAAC,OAAwB,EAAE,KAAwB;YACxE,IAAI;gBACH,MAAM,OAAO,GAAG,MAAM,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;gBACpD,MAAM,UAAU,GAAG,IAAI,CAAC,CAAC,CAAkB,aAAa,EAAE,CAAC;gBAC3D,IAAI,UAAU,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,KAAK,GAAG,EAAE;oBACjD,OAAO,IAAI,CAAC,CAAC,CAAkB,UAAU,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;iBAC3D;gBACD,OAAO,OAAO,CAAC;aACf;YAAC,OAAO,KAAK,EAAE;gBACf,MAAM,UAAU,GAAG,IAAI,CAAC,CAAC,CAAkB,aAAa,EAAE,CAAC;gBAC3D,IAAI,UAAU,EAAE;oBACf,OAAO,IAAI,CAAC,CAAC,CAAkB,UAAU,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;iBAC3D;gBACD,MAAM,KAAK,CAAC;aACZ;QACF,CAAC;QAEO,CAAC,CAAkB,UAAkC,EAAE,OAAwB,EAAE,KAAwB;YAChH,OAAO,UAAU,CAAC,WAAW,CAAC,SAAS,EAAE,OAAO,CAAC,EAAE,CAAC,IAAI,gBAAG,CAAkB,OAAO,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;QAChH,CAAC;KACD,CAAA;IA9BY,oBAAI;mBAAJ,IAAI;QAGd,WAAA,wBAAG,CAAA;QACH,WAAA,mBAAG,CAAA;QACH,WAAA,SAAG,CAAA;OALO,IAAI,CA8BhB;IAED,8DAA8D;IAE9D,cAAG,CAAc,eAAe,CAAC,sBAAsB,EAAE,KAAK,WAAW,QAA0B,EAAE,GAAW,EAAE,MAAc;QAC/H,MAAM,MAAM,GAAG,MAAM,KAAK,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,MAAM,EAAE,kBAAkB,EAAE,EAAE,CAAC,CAAC;QAErF,IAAI,MAAM,CAAC,EAAE,EAAE;YACd,OAAO,MAAM,CAAC,IAAI,EAAE,CAAC;SACrB;aAAM;YACN,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;SACnC;IACF,CAAC,CAAC,CAAC","file":"requestService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IRequestOptions, IRequestContext } from 'vs/base/parts/request/common/request';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ILoggerService } from 'vs/platform/log/common/log';\nimport { RequestChannelClient } from 'vs/platform/request/common/requestIpc';\nimport { IRemoteAgentService, IRemoteAgentConnection } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { RequestService } from 'vs/platform/request/browser/requestService';\nimport { ServicesAccessor } from 'vs/editor/browser/editorExtensions';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\n\nexport class BrowserRequestService extends RequestService {\n\n\tconstructor(\n\t\t@IRemoteAgentService private readonly remoteAgentService: IRemoteAgentService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ILoggerService loggerService: ILoggerService\n\t) {\n\t\tsuper(configurationService, loggerService);\n\t}\n\n\toverride async request(options: IRequestOptions, token: CancellationToken): Promise<IRequestContext> {\n\t\ttry {\n\t\t\tconst context = await super.request(options, token);\n\t\t\tconst connection = this.remoteAgentService.getConnection();\n\t\t\tif (connection && context.res.statusCode === 405) {\n\t\t\t\treturn this._makeRemoteRequest(connection, options, token);\n\t\t\t}\n\t\t\treturn context;\n\t\t} catch (error) {\n\t\t\tconst connection = this.remoteAgentService.getConnection();\n\t\t\tif (connection) {\n\t\t\t\treturn this._makeRemoteRequest(connection, options, token);\n\t\t\t}\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate _makeRemoteRequest(connection: IRemoteAgentConnection, options: IRequestOptions, token: CancellationToken): Promise<IRequestContext> {\n\t\treturn connection.withChannel('request', channel => new RequestChannelClient(channel).request(options, token));\n\t}\n}\n\n// --- Internal commands to help authentication for extensions\n\nCommandsRegistry.registerCommand('_workbench.fetchJSON', async function (accessor: ServicesAccessor, url: string, method: string) {\n\tconst result = await fetch(url, { method, headers: { Accept: 'application/json' } });\n\n\tif (result.ok) {\n\t\treturn result.json();\n\t} else {\n\t\tthrow new Error(result.statusText);\n\t}\n});\n"]}