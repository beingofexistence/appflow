{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/configurationResolver/test/electron-sandbox/configurationResolverService.test.ts"],"names":[],"mappings":"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","file":"configurationResolverService.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { stub } from 'sinon';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport { IPath, normalize } from 'vs/base/common/path';\nimport * as platform from 'vs/base/common/platform';\nimport { isObject } from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport { Selection } from 'vs/editor/common/core/selection';\nimport { EditorType } from 'vs/editor/common/editorCommon';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { IFormatterChangeEvent, ILabelService, ResourceLabelFormatter, Verbosity } from 'vs/platform/label/common/label';\nimport { IWorkspace, IWorkspaceFolder, IWorkspaceIdentifier, Workspace } from 'vs/platform/workspace/common/workspace';\nimport { testWorkspace } from 'vs/platform/workspace/test/common/testWorkspace';\nimport { BaseConfigurationResolverService } from 'vs/workbench/services/configurationResolver/browser/baseConfigurationResolverService';\nimport { IConfigurationResolverService } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IPathService } from 'vs/workbench/services/path/common/pathService';\nimport { TestEditorService, TestQuickInputService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { TestContextService, TestExtensionService } from 'vs/workbench/test/common/workbenchTestServices';\n\nconst mockLineNumber = 10;\nclass TestEditorServiceWithActiveEditor extends TestEditorService {\n\toverride get activeTextEditorControl(): any {\n\t\treturn {\n\t\t\tgetEditorType() {\n\t\t\t\treturn EditorType.ICodeEditor;\n\t\t\t},\n\t\t\tgetSelection() {\n\t\t\t\treturn new Selection(mockLineNumber, 1, mockLineNumber, 10);\n\t\t\t}\n\t\t};\n\t}\n\toverride get activeEditor(): any {\n\t\treturn {\n\t\t\tget resource(): any {\n\t\t\t\treturn URI.parse('file:///VSCode/workspaceLocation/file');\n\t\t\t}\n\t\t};\n\t}\n}\n\nclass TestConfigurationResolverService extends BaseConfigurationResolverService {\n\n}\n\nconst nullContext = {\n\tgetAppRoot: () => undefined,\n\tgetExecPath: () => undefined\n};\n\nsuite('Configuration Resolver Service', () => {\n\tlet configurationResolverService: IConfigurationResolverService | null;\n\tconst envVariables: { [key: string]: string } = { key1: 'Value for key1', key2: 'Value for key2' };\n\t// let environmentService: MockWorkbenchEnvironmentService;\n\tlet mockCommandService: MockCommandService;\n\tlet editorService: TestEditorServiceWithActiveEditor;\n\tlet containingWorkspace: Workspace;\n\tlet workspace: IWorkspaceFolder;\n\tlet quickInputService: TestQuickInputService;\n\tlet labelService: MockLabelService;\n\tlet pathService: MockPathService;\n\tlet extensionService: IExtensionService;\n\n\tsetup(() => {\n\t\tmockCommandService = new MockCommandService();\n\t\teditorService = new TestEditorServiceWithActiveEditor();\n\t\tquickInputService = new TestQuickInputService();\n\t\t// environmentService = new MockWorkbenchEnvironmentService(envVariables);\n\t\tlabelService = new MockLabelService();\n\t\tpathService = new MockPathService();\n\t\textensionService = new TestExtensionService();\n\t\tcontainingWorkspace = testWorkspace(URI.parse('file:///VSCode/workspaceLocation'));\n\t\tworkspace = containingWorkspace.folders[0];\n\t\tconfigurationResolverService = new TestConfigurationResolverService(nullContext, Promise.resolve(envVariables), editorService, new MockInputsConfigurationService(), mockCommandService, new TestContextService(containingWorkspace), quickInputService, labelService, pathService, extensionService);\n\t});\n\n\tteardown(() => {\n\t\tconfigurationResolverService = null;\n\t});\n\n\ttest('substitute one', async () => {\n\t\tif (platform.isWindows) {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, 'abc ${workspaceFolder} xyz'), 'abc \\\\VSCode\\\\workspaceLocation xyz');\n\t\t} else {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, 'abc ${workspaceFolder} xyz'), 'abc /VSCode/workspaceLocation xyz');\n\t\t}\n\t});\n\n\ttest('workspace folder with argument', async () => {\n\t\tif (platform.isWindows) {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, 'abc ${workspaceFolder:workspaceLocation} xyz'), 'abc \\\\VSCode\\\\workspaceLocation xyz');\n\t\t} else {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, 'abc ${workspaceFolder:workspaceLocation} xyz'), 'abc /VSCode/workspaceLocation xyz');\n\t\t}\n\t});\n\n\ttest('workspace folder with invalid argument', () => {\n\t\tassert.rejects(async () => await configurationResolverService!.resolveAsync(workspace, 'abc ${workspaceFolder:invalidLocation} xyz'));\n\t});\n\n\ttest('workspace folder with undefined workspace folder', () => {\n\t\tassert.rejects(async () => await configurationResolverService!.resolveAsync(undefined, 'abc ${workspaceFolder} xyz'));\n\t});\n\n\ttest('workspace folder with argument and undefined workspace folder', async () => {\n\t\tif (platform.isWindows) {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(undefined, 'abc ${workspaceFolder:workspaceLocation} xyz'), 'abc \\\\VSCode\\\\workspaceLocation xyz');\n\t\t} else {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(undefined, 'abc ${workspaceFolder:workspaceLocation} xyz'), 'abc /VSCode/workspaceLocation xyz');\n\t\t}\n\t});\n\n\ttest('workspace folder with invalid argument and undefined workspace folder', () => {\n\t\tassert.rejects(async () => await configurationResolverService!.resolveAsync(undefined, 'abc ${workspaceFolder:invalidLocation} xyz'));\n\t});\n\n\ttest('workspace root folder name', async () => {\n\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, 'abc ${workspaceRootFolderName} xyz'), 'abc workspaceLocation xyz');\n\t});\n\n\ttest('current selected line number', async () => {\n\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, 'abc ${lineNumber} xyz'), `abc ${mockLineNumber} xyz`);\n\t});\n\n\ttest('relative file', async () => {\n\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, 'abc ${relativeFile} xyz'), 'abc file xyz');\n\t});\n\n\ttest('relative file with argument', async () => {\n\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, 'abc ${relativeFile:workspaceLocation} xyz'), 'abc file xyz');\n\t});\n\n\ttest('relative file with invalid argument', () => {\n\t\tassert.rejects(async () => await configurationResolverService!.resolveAsync(workspace, 'abc ${relativeFile:invalidLocation} xyz'));\n\t});\n\n\ttest('relative file with undefined workspace folder', async () => {\n\t\tif (platform.isWindows) {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(undefined, 'abc ${relativeFile} xyz'), 'abc \\\\VSCode\\\\workspaceLocation\\\\file xyz');\n\t\t} else {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(undefined, 'abc ${relativeFile} xyz'), 'abc /VSCode/workspaceLocation/file xyz');\n\t\t}\n\t});\n\n\ttest('relative file with argument and undefined workspace folder', async () => {\n\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(undefined, 'abc ${relativeFile:workspaceLocation} xyz'), 'abc file xyz');\n\t});\n\n\ttest('relative file with invalid argument and undefined workspace folder', () => {\n\t\tassert.rejects(async () => await configurationResolverService!.resolveAsync(undefined, 'abc ${relativeFile:invalidLocation} xyz'));\n\t});\n\n\ttest('substitute many', async () => {\n\t\tif (platform.isWindows) {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, '${workspaceFolder} - ${workspaceFolder}'), '\\\\VSCode\\\\workspaceLocation - \\\\VSCode\\\\workspaceLocation');\n\t\t} else {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, '${workspaceFolder} - ${workspaceFolder}'), '/VSCode/workspaceLocation - /VSCode/workspaceLocation');\n\t\t}\n\t});\n\n\ttest('substitute one env variable', async () => {\n\t\tif (platform.isWindows) {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, 'abc ${workspaceFolder} ${env:key1} xyz'), 'abc \\\\VSCode\\\\workspaceLocation Value for key1 xyz');\n\t\t} else {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, 'abc ${workspaceFolder} ${env:key1} xyz'), 'abc /VSCode/workspaceLocation Value for key1 xyz');\n\t\t}\n\t});\n\n\ttest('substitute many env variable', async () => {\n\t\tif (platform.isWindows) {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, '${workspaceFolder} - ${workspaceFolder} ${env:key1} - ${env:key2}'), '\\\\VSCode\\\\workspaceLocation - \\\\VSCode\\\\workspaceLocation Value for key1 - Value for key2');\n\t\t} else {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, '${workspaceFolder} - ${workspaceFolder} ${env:key1} - ${env:key2}'), '/VSCode/workspaceLocation - /VSCode/workspaceLocation Value for key1 - Value for key2');\n\t\t}\n\t});\n\n\ttest('disallows nested keys (#77289)', async () => {\n\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, '${env:key1} ${env:key1${env:key2}}'), 'Value for key1 ${env:key1${env:key2}}');\n\t});\n\n\ttest('supports extensionDir', async () => {\n\t\tconst getExtension = stub(extensionService, 'getExtension');\n\t\tgetExtension.withArgs('publisher.extId').returns(Promise.resolve({ extensionLocation: URI.file('/some/path') } as IExtensionDescription));\n\n\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, '${extensionInstallFolder:publisher.extId}'), URI.file('/some/path').fsPath);\n\t});\n\n\t// test('substitute keys and values in object', () => {\n\t// \tconst myObject = {\n\t// \t\t'${workspaceRootFolderName}': '${lineNumber}',\n\t// \t\t'hey ${env:key1} ': '${workspaceRootFolderName}'\n\t// \t};\n\t// \tassert.deepStrictEqual(configurationResolverService!.resolveAsync(workspace, myObject), {\n\t// \t\t'workspaceLocation': `${editorService.mockLineNumber}`,\n\t// \t\t'hey Value for key1 ': 'workspaceLocation'\n\t// \t});\n\t// });\n\n\n\ttest('substitute one env variable using platform case sensitivity', async () => {\n\t\tif (platform.isWindows) {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, '${env:key1} - ${env:Key1}'), 'Value for key1 - Value for key1');\n\t\t} else {\n\t\t\tassert.strictEqual(await configurationResolverService!.resolveAsync(workspace, '${env:key1} - ${env:Key1}'), 'Value for key1 - ');\n\t\t}\n\t});\n\n\ttest('substitute one configuration variable', async () => {\n\t\tconst configurationService: IConfigurationService = new TestConfigurationService({\n\t\t\teditor: {\n\t\t\t\tfontFamily: 'foo'\n\t\t\t},\n\t\t\tterminal: {\n\t\t\t\tintegrated: {\n\t\t\t\t\tfontFamily: 'bar'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst service = new TestConfigurationResolverService(nullContext, Promise.resolve(envVariables), new TestEditorServiceWithActiveEditor(), configurationService, mockCommandService, new TestContextService(), quickInputService, labelService, pathService, extensionService);\n\t\tassert.strictEqual(await service.resolveAsync(workspace, 'abc ${config:editor.fontFamily} xyz'), 'abc foo xyz');\n\t});\n\n\ttest('substitute configuration variable with undefined workspace folder', async () => {\n\t\tconst configurationService: IConfigurationService = new TestConfigurationService({\n\t\t\teditor: {\n\t\t\t\tfontFamily: 'foo'\n\t\t\t}\n\t\t});\n\n\t\tconst service = new TestConfigurationResolverService(nullContext, Promise.resolve(envVariables), new TestEditorServiceWithActiveEditor(), configurationService, mockCommandService, new TestContextService(), quickInputService, labelService, pathService, extensionService);\n\t\tassert.strictEqual(await service.resolveAsync(undefined, 'abc ${config:editor.fontFamily} xyz'), 'abc foo xyz');\n\t});\n\n\ttest('substitute many configuration variables', async () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\teditor: {\n\t\t\t\tfontFamily: 'foo'\n\t\t\t},\n\t\t\tterminal: {\n\t\t\t\tintegrated: {\n\t\t\t\t\tfontFamily: 'bar'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst service = new TestConfigurationResolverService(nullContext, Promise.resolve(envVariables), new TestEditorServiceWithActiveEditor(), configurationService, mockCommandService, new TestContextService(), quickInputService, labelService, pathService, extensionService);\n\t\tassert.strictEqual(await service.resolveAsync(workspace, 'abc ${config:editor.fontFamily} ${config:terminal.integrated.fontFamily} xyz'), 'abc foo bar xyz');\n\t});\n\n\ttest('substitute one env variable and a configuration variable', async () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\teditor: {\n\t\t\t\tfontFamily: 'foo'\n\t\t\t},\n\t\t\tterminal: {\n\t\t\t\tintegrated: {\n\t\t\t\t\tfontFamily: 'bar'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst service = new TestConfigurationResolverService(nullContext, Promise.resolve(envVariables), new TestEditorServiceWithActiveEditor(), configurationService, mockCommandService, new TestContextService(), quickInputService, labelService, pathService, extensionService);\n\t\tif (platform.isWindows) {\n\t\t\tassert.strictEqual(await service.resolveAsync(workspace, 'abc ${config:editor.fontFamily} ${workspaceFolder} ${env:key1} xyz'), 'abc foo \\\\VSCode\\\\workspaceLocation Value for key1 xyz');\n\t\t} else {\n\t\t\tassert.strictEqual(await service.resolveAsync(workspace, 'abc ${config:editor.fontFamily} ${workspaceFolder} ${env:key1} xyz'), 'abc foo /VSCode/workspaceLocation Value for key1 xyz');\n\t\t}\n\t});\n\n\ttest('substitute many env variable and a configuration variable', async () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\teditor: {\n\t\t\t\tfontFamily: 'foo'\n\t\t\t},\n\t\t\tterminal: {\n\t\t\t\tintegrated: {\n\t\t\t\t\tfontFamily: 'bar'\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tconst service = new TestConfigurationResolverService(nullContext, Promise.resolve(envVariables), new TestEditorServiceWithActiveEditor(), configurationService, mockCommandService, new TestContextService(), quickInputService, labelService, pathService, extensionService);\n\t\tif (platform.isWindows) {\n\t\t\tassert.strictEqual(await service.resolveAsync(workspace, '${config:editor.fontFamily} ${config:terminal.integrated.fontFamily} ${workspaceFolder} - ${workspaceFolder} ${env:key1} - ${env:key2}'), 'foo bar \\\\VSCode\\\\workspaceLocation - \\\\VSCode\\\\workspaceLocation Value for key1 - Value for key2');\n\t\t} else {\n\t\t\tassert.strictEqual(await service.resolveAsync(workspace, '${config:editor.fontFamily} ${config:terminal.integrated.fontFamily} ${workspaceFolder} - ${workspaceFolder} ${env:key1} - ${env:key2}'), 'foo bar /VSCode/workspaceLocation - /VSCode/workspaceLocation Value for key1 - Value for key2');\n\t\t}\n\t});\n\n\ttest('mixed types of configuration variables', async () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\teditor: {\n\t\t\t\tfontFamily: 'foo',\n\t\t\t\tlineNumbers: 123,\n\t\t\t\tinsertSpaces: false\n\t\t\t},\n\t\t\tterminal: {\n\t\t\t\tintegrated: {\n\t\t\t\t\tfontFamily: 'bar'\n\t\t\t\t}\n\t\t\t},\n\t\t\tjson: {\n\t\t\t\tschemas: [\n\t\t\t\t\t{\n\t\t\t\t\t\tfileMatch: [\n\t\t\t\t\t\t\t'/myfile',\n\t\t\t\t\t\t\t'/myOtherfile'\n\t\t\t\t\t\t],\n\t\t\t\t\t\turl: 'schemaURL'\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t}\n\t\t});\n\n\t\tconst service = new TestConfigurationResolverService(nullContext, Promise.resolve(envVariables), new TestEditorServiceWithActiveEditor(), configurationService, mockCommandService, new TestContextService(), quickInputService, labelService, pathService, extensionService);\n\t\tassert.strictEqual(await service.resolveAsync(workspace, 'abc ${config:editor.fontFamily} ${config:editor.lineNumbers} ${config:editor.insertSpaces} xyz'), 'abc foo 123 false xyz');\n\t});\n\n\ttest('uses original variable as fallback', async () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\teditor: {}\n\t\t});\n\n\t\tconst service = new TestConfigurationResolverService(nullContext, Promise.resolve(envVariables), new TestEditorServiceWithActiveEditor(), configurationService, mockCommandService, new TestContextService(), quickInputService, labelService, pathService, extensionService);\n\t\tassert.strictEqual(await service.resolveAsync(workspace, 'abc ${unknownVariable} xyz'), 'abc ${unknownVariable} xyz');\n\t\tassert.strictEqual(await service.resolveAsync(workspace, 'abc ${env:unknownVariable} xyz'), 'abc  xyz');\n\t});\n\n\ttest('configuration variables with invalid accessor', () => {\n\t\tconst configurationService = new TestConfigurationService({\n\t\t\teditor: {\n\t\t\t\tfontFamily: 'foo'\n\t\t\t}\n\t\t});\n\n\t\tconst service = new TestConfigurationResolverService(nullContext, Promise.resolve(envVariables), new TestEditorServiceWithActiveEditor(), configurationService, mockCommandService, new TestContextService(), quickInputService, labelService, pathService, extensionService);\n\n\t\tassert.rejects(async () => await service.resolveAsync(workspace, 'abc ${env} xyz'));\n\t\tassert.rejects(async () => await service.resolveAsync(workspace, 'abc ${env:} xyz'));\n\t\tassert.rejects(async () => await service.resolveAsync(workspace, 'abc ${config} xyz'));\n\t\tassert.rejects(async () => await service.resolveAsync(workspace, 'abc ${config:} xyz'));\n\t\tassert.rejects(async () => await service.resolveAsync(workspace, 'abc ${config:editor} xyz'));\n\t\tassert.rejects(async () => await service.resolveAsync(workspace, 'abc ${config:editor..fontFamily} xyz'));\n\t\tassert.rejects(async () => await service.resolveAsync(workspace, 'abc ${config:editor.none.none2} xyz'));\n\t});\n\n\ttest('a single command variable', () => {\n\n\t\tconst configuration = {\n\t\t\t'name': 'Attach to Process',\n\t\t\t'type': 'node',\n\t\t\t'request': 'attach',\n\t\t\t'processId': '${command:command1}',\n\t\t\t'port': 5858,\n\t\t\t'sourceMaps': false,\n\t\t\t'outDir': null\n\t\t};\n\n\t\treturn configurationResolverService!.resolveWithInteractionReplace(undefined, configuration).then(result => {\n\t\t\tassert.deepStrictEqual({ ...result }, {\n\t\t\t\t'name': 'Attach to Process',\n\t\t\t\t'type': 'node',\n\t\t\t\t'request': 'attach',\n\t\t\t\t'processId': 'command1-result',\n\t\t\t\t'port': 5858,\n\t\t\t\t'sourceMaps': false,\n\t\t\t\t'outDir': null\n\t\t\t});\n\n\t\t\tassert.strictEqual(1, mockCommandService.callCount);\n\t\t});\n\t});\n\n\ttest('an old style command variable', () => {\n\t\tconst configuration = {\n\t\t\t'name': 'Attach to Process',\n\t\t\t'type': 'node',\n\t\t\t'request': 'attach',\n\t\t\t'processId': '${command:commandVariable1}',\n\t\t\t'port': 5858,\n\t\t\t'sourceMaps': false,\n\t\t\t'outDir': null\n\t\t};\n\t\tconst commandVariables = Object.create(null);\n\t\tcommandVariables['commandVariable1'] = 'command1';\n\n\t\treturn configurationResolverService!.resolveWithInteractionReplace(undefined, configuration, undefined, commandVariables).then(result => {\n\t\t\tassert.deepStrictEqual({ ...result }, {\n\t\t\t\t'name': 'Attach to Process',\n\t\t\t\t'type': 'node',\n\t\t\t\t'request': 'attach',\n\t\t\t\t'processId': 'command1-result',\n\t\t\t\t'port': 5858,\n\t\t\t\t'sourceMaps': false,\n\t\t\t\t'outDir': null\n\t\t\t});\n\n\t\t\tassert.strictEqual(1, mockCommandService.callCount);\n\t\t});\n\t});\n\n\ttest('multiple new and old-style command variables', () => {\n\n\t\tconst configuration = {\n\t\t\t'name': 'Attach to Process',\n\t\t\t'type': 'node',\n\t\t\t'request': 'attach',\n\t\t\t'processId': '${command:commandVariable1}',\n\t\t\t'pid': '${command:command2}',\n\t\t\t'sourceMaps': false,\n\t\t\t'outDir': 'src/${command:command2}',\n\t\t\t'env': {\n\t\t\t\t'processId': '__${command:command2}__',\n\t\t\t}\n\t\t};\n\t\tconst commandVariables = Object.create(null);\n\t\tcommandVariables['commandVariable1'] = 'command1';\n\n\t\treturn configurationResolverService!.resolveWithInteractionReplace(undefined, configuration, undefined, commandVariables).then(result => {\n\t\t\tconst expected = {\n\t\t\t\t'name': 'Attach to Process',\n\t\t\t\t'type': 'node',\n\t\t\t\t'request': 'attach',\n\t\t\t\t'processId': 'command1-result',\n\t\t\t\t'pid': 'command2-result',\n\t\t\t\t'sourceMaps': false,\n\t\t\t\t'outDir': 'src/command2-result',\n\t\t\t\t'env': {\n\t\t\t\t\t'processId': '__command2-result__',\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tassert.deepStrictEqual(Object.keys(result), Object.keys(expected));\n\t\t\tObject.keys(result).forEach(property => {\n\t\t\t\tconst expectedProperty = (<any>expected)[property];\n\t\t\t\tif (isObject(result[property])) {\n\t\t\t\t\tassert.deepStrictEqual({ ...result[property] }, expectedProperty);\n\t\t\t\t} else {\n\t\t\t\t\tassert.deepStrictEqual(result[property], expectedProperty);\n\t\t\t\t}\n\t\t\t});\n\t\t\tassert.strictEqual(2, mockCommandService.callCount);\n\t\t});\n\t});\n\n\ttest('a command variable that relies on resolved env vars', () => {\n\n\t\tconst configuration = {\n\t\t\t'name': 'Attach to Process',\n\t\t\t'type': 'node',\n\t\t\t'request': 'attach',\n\t\t\t'processId': '${command:commandVariable1}',\n\t\t\t'value': '${env:key1}'\n\t\t};\n\t\tconst commandVariables = Object.create(null);\n\t\tcommandVariables['commandVariable1'] = 'command1';\n\n\t\treturn configurationResolverService!.resolveWithInteractionReplace(undefined, configuration, undefined, commandVariables).then(result => {\n\n\t\t\tassert.deepStrictEqual({ ...result }, {\n\t\t\t\t'name': 'Attach to Process',\n\t\t\t\t'type': 'node',\n\t\t\t\t'request': 'attach',\n\t\t\t\t'processId': 'Value for key1',\n\t\t\t\t'value': 'Value for key1'\n\t\t\t});\n\n\t\t\tassert.strictEqual(1, mockCommandService.callCount);\n\t\t});\n\t});\n\n\ttest('a single prompt input variable', () => {\n\n\t\tconst configuration = {\n\t\t\t'name': 'Attach to Process',\n\t\t\t'type': 'node',\n\t\t\t'request': 'attach',\n\t\t\t'processId': '${input:input1}',\n\t\t\t'port': 5858,\n\t\t\t'sourceMaps': false,\n\t\t\t'outDir': null\n\t\t};\n\n\t\treturn configurationResolverService!.resolveWithInteractionReplace(workspace, configuration, 'tasks').then(result => {\n\n\t\t\tassert.deepStrictEqual({ ...result }, {\n\t\t\t\t'name': 'Attach to Process',\n\t\t\t\t'type': 'node',\n\t\t\t\t'request': 'attach',\n\t\t\t\t'processId': 'resolvedEnterinput1',\n\t\t\t\t'port': 5858,\n\t\t\t\t'sourceMaps': false,\n\t\t\t\t'outDir': null\n\t\t\t});\n\n\t\t\tassert.strictEqual(0, mockCommandService.callCount);\n\t\t});\n\t});\n\n\ttest('a single pick input variable', () => {\n\n\t\tconst configuration = {\n\t\t\t'name': 'Attach to Process',\n\t\t\t'type': 'node',\n\t\t\t'request': 'attach',\n\t\t\t'processId': '${input:input2}',\n\t\t\t'port': 5858,\n\t\t\t'sourceMaps': false,\n\t\t\t'outDir': null\n\t\t};\n\n\t\treturn configurationResolverService!.resolveWithInteractionReplace(workspace, configuration, 'tasks').then(result => {\n\n\t\t\tassert.deepStrictEqual({ ...result }, {\n\t\t\t\t'name': 'Attach to Process',\n\t\t\t\t'type': 'node',\n\t\t\t\t'request': 'attach',\n\t\t\t\t'processId': 'selectedPick',\n\t\t\t\t'port': 5858,\n\t\t\t\t'sourceMaps': false,\n\t\t\t\t'outDir': null\n\t\t\t});\n\n\t\t\tassert.strictEqual(0, mockCommandService.callCount);\n\t\t});\n\t});\n\n\ttest('a single command input variable', () => {\n\n\t\tconst configuration = {\n\t\t\t'name': 'Attach to Process',\n\t\t\t'type': 'node',\n\t\t\t'request': 'attach',\n\t\t\t'processId': '${input:input4}',\n\t\t\t'port': 5858,\n\t\t\t'sourceMaps': false,\n\t\t\t'outDir': null\n\t\t};\n\n\t\treturn configurationResolverService!.resolveWithInteractionReplace(workspace, configuration, 'tasks').then(result => {\n\n\t\t\tassert.deepStrictEqual({ ...result }, {\n\t\t\t\t'name': 'Attach to Process',\n\t\t\t\t'type': 'node',\n\t\t\t\t'request': 'attach',\n\t\t\t\t'processId': 'arg for command',\n\t\t\t\t'port': 5858,\n\t\t\t\t'sourceMaps': false,\n\t\t\t\t'outDir': null\n\t\t\t});\n\n\t\t\tassert.strictEqual(1, mockCommandService.callCount);\n\t\t});\n\t});\n\n\ttest('several input variables and command', () => {\n\n\t\tconst configuration = {\n\t\t\t'name': '${input:input3}',\n\t\t\t'type': '${command:command1}',\n\t\t\t'request': '${input:input1}',\n\t\t\t'processId': '${input:input2}',\n\t\t\t'command': '${input:input4}',\n\t\t\t'port': 5858,\n\t\t\t'sourceMaps': false,\n\t\t\t'outDir': null\n\t\t};\n\n\t\treturn configurationResolverService!.resolveWithInteractionReplace(workspace, configuration, 'tasks').then(result => {\n\n\t\t\tassert.deepStrictEqual({ ...result }, {\n\t\t\t\t'name': 'resolvedEnterinput3',\n\t\t\t\t'type': 'command1-result',\n\t\t\t\t'request': 'resolvedEnterinput1',\n\t\t\t\t'processId': 'selectedPick',\n\t\t\t\t'command': 'arg for command',\n\t\t\t\t'port': 5858,\n\t\t\t\t'sourceMaps': false,\n\t\t\t\t'outDir': null\n\t\t\t});\n\n\t\t\tassert.strictEqual(2, mockCommandService.callCount);\n\t\t});\n\t});\n\n\ttest('input variable with undefined workspace folder', () => {\n\n\t\tconst configuration = {\n\t\t\t'name': 'Attach to Process',\n\t\t\t'type': 'node',\n\t\t\t'request': 'attach',\n\t\t\t'processId': '${input:input1}',\n\t\t\t'port': 5858,\n\t\t\t'sourceMaps': false,\n\t\t\t'outDir': null\n\t\t};\n\n\t\treturn configurationResolverService!.resolveWithInteractionReplace(undefined, configuration, 'tasks').then(result => {\n\n\t\t\tassert.deepStrictEqual({ ...result }, {\n\t\t\t\t'name': 'Attach to Process',\n\t\t\t\t'type': 'node',\n\t\t\t\t'request': 'attach',\n\t\t\t\t'processId': 'resolvedEnterinput1',\n\t\t\t\t'port': 5858,\n\t\t\t\t'sourceMaps': false,\n\t\t\t\t'outDir': null\n\t\t\t});\n\n\t\t\tassert.strictEqual(0, mockCommandService.callCount);\n\t\t});\n\t});\n\n\ttest('contributed variable', () => {\n\t\tconst buildTask = 'npm: compile';\n\t\tconst variable = 'defaultBuildTask';\n\t\tconst configuration = {\n\t\t\t'name': '${' + variable + '}',\n\t\t};\n\t\tconfigurationResolverService!.contributeVariable(variable, async () => { return buildTask; });\n\t\treturn configurationResolverService!.resolveWithInteractionReplace(workspace, configuration).then(result => {\n\t\t\tassert.deepStrictEqual({ ...result }, {\n\t\t\t\t'name': `${buildTask}`\n\t\t\t});\n\t\t});\n\t});\n\n\ttest('resolveWithEnvironment', async () => {\n\t\tconst env = {\n\t\t\t'VAR_1': 'VAL_1',\n\t\t\t'VAR_2': 'VAL_2'\n\t\t};\n\t\tconst configuration = 'echo ${env:VAR_1}${env:VAR_2}';\n\t\tconst resolvedResult = await configurationResolverService!.resolveWithEnvironment({ ...env }, undefined, configuration);\n\t\tassert.deepStrictEqual(resolvedResult, 'echo VAL_1VAL_2');\n\t});\n});\n\n\nclass MockCommandService implements ICommandService {\n\n\tpublic _serviceBrand: undefined;\n\tpublic callCount = 0;\n\n\tonWillExecuteCommand = () => Disposable.None;\n\tonDidExecuteCommand = () => Disposable.None;\n\tpublic executeCommand(commandId: string, ...args: any[]): Promise<any> {\n\t\tthis.callCount++;\n\n\t\tlet result = `${commandId}-result`;\n\t\tif (args.length >= 1) {\n\t\t\tif (args[0] && args[0].value) {\n\t\t\t\tresult = args[0].value;\n\t\t\t}\n\t\t}\n\n\t\treturn Promise.resolve(result);\n\t}\n}\n\nclass MockLabelService implements ILabelService {\n\t_serviceBrand: undefined;\n\tgetUriLabel(resource: URI, options?: { relative?: boolean | undefined; noPrefix?: boolean | undefined }): string {\n\t\treturn normalize(resource.fsPath);\n\t}\n\tgetUriBasenameLabel(resource: URI): string {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tgetWorkspaceLabel(workspace: URI | IWorkspaceIdentifier | IWorkspace, options?: { verbose: Verbosity }): string {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tgetHostLabel(scheme: string, authority?: string): string {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tpublic getHostTooltip(): string | undefined {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tgetSeparator(scheme: string, authority?: string): '/' | '\\\\' {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tregisterFormatter(formatter: ResourceLabelFormatter): IDisposable {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tregisterCachedFormatter(formatter: ResourceLabelFormatter): IDisposable {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tonDidChangeFormatters: Event<IFormatterChangeEvent> = new Emitter<IFormatterChangeEvent>().event;\n}\n\nclass MockPathService implements IPathService {\n\t_serviceBrand: undefined;\n\tget path(): Promise<IPath> {\n\t\tthrow new Error('Property not implemented');\n\t}\n\tdefaultUriScheme: string = Schemas.file;\n\tfileURI(path: string): Promise<URI> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tuserHome(options?: { preferLocal: boolean }): Promise<URI>;\n\tuserHome(options: { preferLocal: true }): URI;\n\tuserHome(options?: { preferLocal: boolean }): Promise<URI> | URI {\n\t\tconst uri = URI.file('c:\\\\users\\\\username');\n\t\treturn options?.preferLocal ? uri : Promise.resolve(uri);\n\t}\n\thasValidBasename(resource: URI, basename?: string): Promise<boolean>;\n\thasValidBasename(resource: URI, os: platform.OperatingSystem, basename?: string): boolean;\n\thasValidBasename(resource: URI, arg2?: string | platform.OperatingSystem, name?: string): boolean | Promise<boolean> {\n\t\tthrow new Error('Method not implemented.');\n\t}\n\tresolvedUserHome: URI | undefined;\n}\n\nclass MockInputsConfigurationService extends TestConfigurationService {\n\tpublic override getValue(arg1?: any, arg2?: any): any {\n\t\tlet configuration;\n\t\tif (arg1 === 'tasks') {\n\t\t\tconfiguration = {\n\t\t\t\tinputs: [\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 'input1',\n\t\t\t\t\t\ttype: 'promptString',\n\t\t\t\t\t\tdescription: 'Enterinput1',\n\t\t\t\t\t\tdefault: 'default input1'\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 'input2',\n\t\t\t\t\t\ttype: 'pickString',\n\t\t\t\t\t\tdescription: 'Enterinput1',\n\t\t\t\t\t\tdefault: 'option2',\n\t\t\t\t\t\toptions: ['option1', 'option2', 'option3']\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 'input3',\n\t\t\t\t\t\ttype: 'promptString',\n\t\t\t\t\t\tdescription: 'Enterinput3',\n\t\t\t\t\t\tdefault: 'default input3',\n\t\t\t\t\t\tpassword: true\n\t\t\t\t\t},\n\t\t\t\t\t{\n\t\t\t\t\t\tid: 'input4',\n\t\t\t\t\t\ttype: 'command',\n\t\t\t\t\t\tcommand: 'command1',\n\t\t\t\t\t\targs: {\n\t\t\t\t\t\t\tvalue: 'arg for command'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t]\n\t\t\t};\n\t\t}\n\t\treturn configuration;\n\t}\n}\n"]}