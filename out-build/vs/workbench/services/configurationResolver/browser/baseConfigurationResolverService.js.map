{"version":3,"sources":["vs/workbench/services/configurationResolver/browser/baseConfigurationResolverService.ts"],"names":[],"mappings":"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","file":"baseConfigurationResolverService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Queue } from 'vs/base/common/async';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { Schemas } from 'vs/base/common/network';\nimport { IProcessEnvironment } from 'vs/base/common/platform';\nimport * as Types from 'vs/base/common/types';\nimport { URI as uri } from 'vs/base/common/uri';\nimport { ICodeEditor, isCodeEditor, isDiffEditor } from 'vs/editor/browser/editorBrowser';\nimport * as nls from 'vs/nls';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { ConfigurationTarget, IConfigurationOverrides, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { IInputOptions, IPickOptions, IQuickInputService, IQuickPickItem } from 'vs/platform/quickinput/common/quickInput';\nimport { IWorkspaceContextService, IWorkspaceFolder, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { EditorResourceAccessor, SideBySideEditor } from 'vs/workbench/common/editor';\nimport { ConfiguredInput } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\nimport { AbstractVariableResolverService } from 'vs/workbench/services/configurationResolver/common/variableResolver';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IPathService } from 'vs/workbench/services/path/common/pathService';\n\nexport abstract class BaseConfigurationResolverService extends AbstractVariableResolverService {\n\n\tstatic readonly INPUT_OR_COMMAND_VARIABLES_PATTERN = /\\${((input|command):(.*?))}/g;\n\n\tprivate userInputAccessQueue = new Queue<string | IQuickPickItem | undefined>();\n\n\tconstructor(\n\t\tcontext: {\n\t\t\tgetAppRoot: () => string | undefined;\n\t\t\tgetExecPath: () => string | undefined;\n\t\t},\n\t\tenvVariablesPromise: Promise<IProcessEnvironment>,\n\t\teditorService: IEditorService,\n\t\tprivate readonly configurationService: IConfigurationService,\n\t\tprivate readonly commandService: ICommandService,\n\t\tprivate readonly workspaceContextService: IWorkspaceContextService,\n\t\tprivate readonly quickInputService: IQuickInputService,\n\t\tprivate readonly labelService: ILabelService,\n\t\tprivate readonly pathService: IPathService,\n\t\textensionService: IExtensionService,\n\t) {\n\t\tsuper({\n\t\t\tgetFolderUri: (folderName: string): uri | undefined => {\n\t\t\t\tconst folder = workspaceContextService.getWorkspace().folders.filter(f => f.name === folderName).pop();\n\t\t\t\treturn folder ? folder.uri : undefined;\n\t\t\t},\n\t\t\tgetWorkspaceFolderCount: (): number => {\n\t\t\t\treturn workspaceContextService.getWorkspace().folders.length;\n\t\t\t},\n\t\t\tgetConfigurationValue: (folderUri: uri | undefined, suffix: string): string | undefined => {\n\t\t\t\treturn configurationService.getValue<string>(suffix, folderUri ? { resource: folderUri } : {});\n\t\t\t},\n\t\t\tgetAppRoot: (): string | undefined => {\n\t\t\t\treturn context.getAppRoot();\n\t\t\t},\n\t\t\tgetExecPath: (): string | undefined => {\n\t\t\t\treturn context.getExecPath();\n\t\t\t},\n\t\t\tgetFilePath: (): string | undefined => {\n\t\t\t\tconst fileResource = EditorResourceAccessor.getOriginalUri(editorService.activeEditor, {\n\t\t\t\t\tsupportSideBySide: SideBySideEditor.PRIMARY,\n\t\t\t\t\tfilterByScheme: [Schemas.file, Schemas.vscodeUserData, this.pathService.defaultUriScheme]\n\t\t\t\t});\n\t\t\t\tif (!fileResource) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn this.labelService.getUriLabel(fileResource, { noPrefix: true });\n\t\t\t},\n\t\t\tgetWorkspaceFolderPathForFile: (): string | undefined => {\n\t\t\t\tconst fileResource = EditorResourceAccessor.getOriginalUri(editorService.activeEditor, {\n\t\t\t\t\tsupportSideBySide: SideBySideEditor.PRIMARY,\n\t\t\t\t\tfilterByScheme: [Schemas.file, Schemas.vscodeUserData, this.pathService.defaultUriScheme]\n\t\t\t\t});\n\t\t\t\tif (!fileResource) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\tconst wsFolder = workspaceContextService.getWorkspaceFolder(fileResource);\n\t\t\t\tif (!wsFolder) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\t\t\t\treturn this.labelService.getUriLabel(wsFolder.uri, { noPrefix: true });\n\t\t\t},\n\t\t\tgetSelectedText: (): string | undefined => {\n\t\t\t\tconst activeTextEditorControl = editorService.activeTextEditorControl;\n\n\t\t\t\tlet activeControl: ICodeEditor | null = null;\n\n\t\t\t\tif (isCodeEditor(activeTextEditorControl)) {\n\t\t\t\t\tactiveControl = activeTextEditorControl;\n\t\t\t\t} else if (isDiffEditor(activeTextEditorControl)) {\n\t\t\t\t\tconst original = activeTextEditorControl.getOriginalEditor();\n\t\t\t\t\tconst modified = activeTextEditorControl.getModifiedEditor();\n\t\t\t\t\tactiveControl = original.hasWidgetFocus() ? original : modified;\n\t\t\t\t}\n\n\t\t\t\tconst activeModel = activeControl?.getModel();\n\t\t\t\tconst activeSelection = activeControl?.getSelection();\n\t\t\t\tif (activeModel && activeSelection) {\n\t\t\t\t\treturn activeModel.getValueInRange(activeSelection);\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tgetLineNumber: (): string | undefined => {\n\t\t\t\tconst activeTextEditorControl = editorService.activeTextEditorControl;\n\t\t\t\tif (isCodeEditor(activeTextEditorControl)) {\n\t\t\t\t\tconst selection = activeTextEditorControl.getSelection();\n\t\t\t\t\tif (selection) {\n\t\t\t\t\t\tconst lineNumber = selection.positionLineNumber;\n\t\t\t\t\t\treturn String(lineNumber);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t},\n\t\t\tgetExtension: id => {\n\t\t\t\treturn extensionService.getExtension(id);\n\t\t\t},\n\t\t}, labelService, pathService.userHome().then(home => home.path), envVariablesPromise);\n\t}\n\n\tpublic override async resolveWithInteractionReplace(folder: IWorkspaceFolder | undefined, config: any, section?: string, variables?: IStringDictionary<string>, target?: ConfigurationTarget): Promise<any> {\n\t\t// resolve any non-interactive variables and any contributed variables\n\t\tconfig = await this.resolveAnyAsync(folder, config);\n\n\t\t// resolve input variables in the order in which they are encountered\n\t\treturn this.resolveWithInteraction(folder, config, section, variables, target).then(mapping => {\n\t\t\t// finally substitute evaluated command variables (if there are any)\n\t\t\tif (!mapping) {\n\t\t\t\treturn null;\n\t\t\t} else if (mapping.size > 0) {\n\t\t\t\treturn this.resolveAnyAsync(folder, config, Object.fromEntries(mapping));\n\t\t\t} else {\n\t\t\t\treturn config;\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic override async resolveWithInteraction(folder: IWorkspaceFolder | undefined, config: any, section?: string, variables?: IStringDictionary<string>, target?: ConfigurationTarget): Promise<Map<string, string> | undefined> {\n\t\t// resolve any non-interactive variables and any contributed variables\n\t\tconst resolved = await this.resolveAnyMap(folder, config);\n\t\tconfig = resolved.newConfig;\n\t\tconst allVariableMapping: Map<string, string> = resolved.resolvedVariables;\n\n\t\t// resolve input and command variables in the order in which they are encountered\n\t\treturn this.resolveWithInputAndCommands(folder, config, variables, section, target).then(inputOrCommandMapping => {\n\t\t\tif (this.updateMapping(inputOrCommandMapping, allVariableMapping)) {\n\t\t\t\treturn allVariableMapping;\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\t/**\n\t * Add all items from newMapping to fullMapping. Returns false if newMapping is undefined.\n\t */\n\tprivate updateMapping(newMapping: IStringDictionary<string> | undefined, fullMapping: Map<string, string>): boolean {\n\t\tif (!newMapping) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (const [key, value] of Object.entries(newMapping)) {\n\t\t\tfullMapping.set(key, value);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Finds and executes all input and command variables in the given configuration and returns their values as a dictionary.\n\t * Please note: this method does not substitute the input or command variables (so the configuration is not modified).\n\t * The returned dictionary can be passed to \"resolvePlatform\" for the actual substitution.\n\t * See #6569.\n\t *\n\t * @param variableToCommandMap Aliases for commands\n\t */\n\tprivate async resolveWithInputAndCommands(folder: IWorkspaceFolder | undefined, configuration: any, variableToCommandMap?: IStringDictionary<string>, section?: string, target?: ConfigurationTarget): Promise<IStringDictionary<string> | undefined> {\n\n\t\tif (!configuration) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\t// get all \"inputs\"\n\t\tlet inputs: ConfiguredInput[] = [];\n\t\tif (this.workspaceContextService.getWorkbenchState() !== WorkbenchState.EMPTY && section) {\n\t\t\tconst overrides: IConfigurationOverrides = folder ? { resource: folder.uri } : {};\n\t\t\tconst result = this.configurationService.inspect(section, overrides);\n\t\t\tif (result && (result.userValue || result.workspaceValue || result.workspaceFolderValue)) {\n\t\t\t\tswitch (target) {\n\t\t\t\t\tcase ConfigurationTarget.USER: inputs = (<any>result.userValue)?.inputs; break;\n\t\t\t\t\tcase ConfigurationTarget.WORKSPACE: inputs = (<any>result.workspaceValue)?.inputs; break;\n\t\t\t\t\tdefault: inputs = (<any>result.workspaceFolderValue)?.inputs;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst valueResult = this.configurationService.getValue<any>(section, overrides);\n\t\t\t\tif (valueResult) {\n\t\t\t\t\tinputs = valueResult.inputs;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// extract and dedupe all \"input\" and \"command\" variables and preserve their order in an array\n\t\tconst variables: string[] = [];\n\t\tthis.findVariables(configuration, variables);\n\n\t\tconst variableValues: IStringDictionary<string> = Object.create(null);\n\n\t\tfor (const variable of variables) {\n\n\t\t\tconst [type, name] = variable.split(':', 2);\n\n\t\t\tlet result: string | undefined;\n\n\t\t\tswitch (type) {\n\n\t\t\t\tcase 'input':\n\t\t\t\t\tresult = await this.showUserInput(name, inputs);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'command': {\n\t\t\t\t\t// use the name as a command ID #12735\n\t\t\t\t\tconst commandId = (variableToCommandMap ? variableToCommandMap[name] : undefined) || name;\n\t\t\t\t\tresult = await this.commandService.executeCommand(commandId, configuration);\n\t\t\t\t\tif (typeof result !== 'string' && !Types.isUndefinedOrNull(result)) {\n\t\t\t\t\t\tthrow new Error(nls.localize('commandVariable.noStringType', \"Cannot substitute command variable '{0}' because command did not return a result of type string.\", commandId));\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\t// Try to resolve it as a contributed variable\n\t\t\t\t\tif (this._contributedVariables.has(variable)) {\n\t\t\t\t\t\tresult = await this._contributedVariables.get(variable)!();\n\t\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (typeof result === 'string') {\n\t\t\t\tvariableValues[variable] = result;\n\t\t\t} else {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\treturn variableValues;\n\t}\n\n\t/**\n\t * Recursively finds all command or input variables in object and pushes them into variables.\n\t * @param object object is searched for variables.\n\t * @param variables All found variables are returned in variables.\n\t */\n\tprivate findVariables(object: any, variables: string[]) {\n\t\tif (typeof object === 'string') {\n\t\t\tlet matches;\n\t\t\twhile ((matches = BaseConfigurationResolverService.INPUT_OR_COMMAND_VARIABLES_PATTERN.exec(object)) !== null) {\n\t\t\t\tif (matches.length === 4) {\n\t\t\t\t\tconst command = matches[1];\n\t\t\t\t\tif (variables.indexOf(command) < 0) {\n\t\t\t\t\t\tvariables.push(command);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (const contributed of this._contributedVariables.keys()) {\n\t\t\t\tif ((variables.indexOf(contributed) < 0) && (object.indexOf('${' + contributed + '}') >= 0)) {\n\t\t\t\t\tvariables.push(contributed);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (Array.isArray(object)) {\n\t\t\tfor (const value of object) {\n\t\t\t\tthis.findVariables(value, variables);\n\n\t\t\t}\n\t\t} else if (object) {\n\t\t\tfor (const value of Object.values(object)) {\n\t\t\t\tthis.findVariables(value, variables);\n\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Takes the provided input info and shows the quick pick so the user can provide the value for the input\n\t * @param variable Name of the input variable.\n\t * @param inputInfos Information about each possible input variable.\n\t */\n\tprivate showUserInput(variable: string, inputInfos: ConfiguredInput[]): Promise<string | undefined> {\n\n\t\tif (!inputInfos) {\n\t\t\treturn Promise.reject(new Error(nls.localize('inputVariable.noInputSection', \"Variable '{0}' must be defined in an '{1}' section of the debug or task configuration.\", variable, 'input')));\n\t\t}\n\n\t\t// find info for the given input variable\n\t\tconst info = inputInfos.filter(item => item.id === variable).pop();\n\t\tif (info) {\n\n\t\t\tconst missingAttribute = (attrName: string) => {\n\t\t\t\tthrow new Error(nls.localize('inputVariable.missingAttribute', \"Input variable '{0}' is of type '{1}' and must include '{2}'.\", variable, info.type, attrName));\n\t\t\t};\n\n\t\t\tswitch (info.type) {\n\n\t\t\t\tcase 'promptString': {\n\t\t\t\t\tif (!Types.isString(info.description)) {\n\t\t\t\t\t\tmissingAttribute('description');\n\t\t\t\t\t}\n\t\t\t\t\tconst inputOptions: IInputOptions = { prompt: info.description, ignoreFocusLost: true };\n\t\t\t\t\tif (info.default) {\n\t\t\t\t\t\tinputOptions.value = info.default;\n\t\t\t\t\t}\n\t\t\t\t\tif (info.password) {\n\t\t\t\t\t\tinputOptions.password = info.password;\n\t\t\t\t\t}\n\t\t\t\t\treturn this.userInputAccessQueue.queue(() => this.quickInputService.input(inputOptions)).then(resolvedInput => {\n\t\t\t\t\t\treturn resolvedInput as string;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tcase 'pickString': {\n\t\t\t\t\tif (!Types.isString(info.description)) {\n\t\t\t\t\t\tmissingAttribute('description');\n\t\t\t\t\t}\n\t\t\t\t\tif (Array.isArray(info.options)) {\n\t\t\t\t\t\tfor (const pickOption of info.options) {\n\t\t\t\t\t\t\tif (!Types.isString(pickOption) && !Types.isString(pickOption.value)) {\n\t\t\t\t\t\t\t\tmissingAttribute('value');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmissingAttribute('options');\n\t\t\t\t\t}\n\t\t\t\t\tinterface PickStringItem extends IQuickPickItem {\n\t\t\t\t\t\tvalue: string;\n\t\t\t\t\t}\n\t\t\t\t\tconst picks = new Array<PickStringItem>();\n\t\t\t\t\tfor (const pickOption of info.options) {\n\t\t\t\t\t\tconst value = Types.isString(pickOption) ? pickOption : pickOption.value;\n\t\t\t\t\t\tconst label = Types.isString(pickOption) ? undefined : pickOption.label;\n\n\t\t\t\t\t\t// If there is no label defined, use value as label\n\t\t\t\t\t\tconst item: PickStringItem = {\n\t\t\t\t\t\t\tlabel: label ? `${label}: ${value}` : value,\n\t\t\t\t\t\t\tvalue: value\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tif (value === info.default) {\n\t\t\t\t\t\t\titem.description = nls.localize('inputVariable.defaultInputValue', \"(Default)\");\n\t\t\t\t\t\t\tpicks.unshift(item);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpicks.push(item);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst pickOptions: IPickOptions<PickStringItem> = { placeHolder: info.description, matchOnDetail: true, ignoreFocusLost: true };\n\t\t\t\t\treturn this.userInputAccessQueue.queue(() => this.quickInputService.pick(picks, pickOptions, undefined)).then(resolvedInput => {\n\t\t\t\t\t\tif (resolvedInput) {\n\t\t\t\t\t\t\treturn (resolvedInput as PickStringItem).value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tcase 'command': {\n\t\t\t\t\tif (!Types.isString(info.command)) {\n\t\t\t\t\t\tmissingAttribute('command');\n\t\t\t\t\t}\n\t\t\t\t\treturn this.userInputAccessQueue.queue(() => this.commandService.executeCommand<string>(info.command, info.args)).then(result => {\n\t\t\t\t\t\tif (typeof result === 'string' || Types.isUndefinedOrNull(result)) {\n\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow new Error(nls.localize('inputVariable.command.noStringType', \"Cannot substitute input variable '{0}' because command '{1}' did not return a result of type string.\", variable, info.command));\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(nls.localize('inputVariable.unknownType', \"Input variable '{0}' can only be of type 'promptString', 'pickString', or 'command'.\", variable));\n\t\t\t}\n\t\t}\n\t\treturn Promise.reject(new Error(nls.localize('inputVariable.undefinedVariable', \"Undefined input variable '{0}' encountered. Remove or define '{0}' to continue.\", variable)));\n\t}\n}\n"]}