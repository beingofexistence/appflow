{"version":3,"sources":["vs/workbench/services/configurationResolver/common/variableResolver.ts"],"names":[],"mappings":"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","file":"variableResolver.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as paths from 'vs/base/common/path';\nimport * as process from 'vs/base/common/process';\nimport * as types from 'vs/base/common/types';\nimport * as objects from 'vs/base/common/objects';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { IProcessEnvironment, isWindows, isMacintosh, isLinux } from 'vs/base/common/platform';\nimport { normalizeDriveLetter } from 'vs/base/common/labels';\nimport { localize } from 'vs/nls';\nimport { URI as uri } from 'vs/base/common/uri';\nimport { IConfigurationResolverService, VariableError, VariableKind } from 'vs/workbench/services/configurationResolver/common/configurationResolver';\nimport { IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { replaceAsync } from 'vs/base/common/strings';\n\ninterface IVariableResolveContext {\n\tgetFolderUri(folderName: string): uri | undefined;\n\tgetWorkspaceFolderCount(): number;\n\tgetConfigurationValue(folderUri: uri | undefined, section: string): string | undefined;\n\tgetAppRoot(): string | undefined;\n\tgetExecPath(): string | undefined;\n\tgetFilePath(): string | undefined;\n\tgetWorkspaceFolderPathForFile?(): string | undefined;\n\tgetSelectedText(): string | undefined;\n\tgetLineNumber(): string | undefined;\n\tgetExtension(id: string): Promise<{ readonly extensionLocation: uri } | undefined>;\n}\n\ntype Environment = { env: IProcessEnvironment | undefined; userHome: string | undefined };\n\nexport class AbstractVariableResolverService implements IConfigurationResolverService {\n\n\tstatic readonly VARIABLE_LHS = '${';\n\tstatic readonly VARIABLE_REGEXP = /\\$\\{(.*?)\\}/g;\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate _context: IVariableResolveContext;\n\tprivate _labelService?: ILabelService;\n\tprivate _envVariablesPromise?: Promise<IProcessEnvironment>;\n\tprivate _userHomePromise?: Promise<string>;\n\tprotected _contributedVariables: Map<string, () => Promise<string | undefined>> = new Map();\n\n\tconstructor(_context: IVariableResolveContext, _labelService?: ILabelService, _userHomePromise?: Promise<string>, _envVariablesPromise?: Promise<IProcessEnvironment>) {\n\t\tthis._context = _context;\n\t\tthis._labelService = _labelService;\n\t\tthis._userHomePromise = _userHomePromise;\n\t\tif (_envVariablesPromise) {\n\t\t\tthis._envVariablesPromise = _envVariablesPromise.then(envVariables => {\n\t\t\t\treturn this.prepareEnv(envVariables);\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate prepareEnv(envVariables: IProcessEnvironment): IProcessEnvironment {\n\t\t// windows env variables are case insensitive\n\t\tif (isWindows) {\n\t\t\tconst ev: IProcessEnvironment = Object.create(null);\n\t\t\tObject.keys(envVariables).forEach(key => {\n\t\t\t\tev[key.toLowerCase()] = envVariables[key];\n\t\t\t});\n\t\t\treturn ev;\n\t\t}\n\t\treturn envVariables;\n\t}\n\n\tpublic resolveWithEnvironment(environment: IProcessEnvironment, root: IWorkspaceFolder | undefined, value: string): Promise<string> {\n\t\treturn this.recursiveResolve({ env: this.prepareEnv(environment), userHome: undefined }, root ? root.uri : undefined, value);\n\t}\n\n\tpublic async resolveAsync(root: IWorkspaceFolder | undefined, value: string): Promise<string>;\n\tpublic async resolveAsync(root: IWorkspaceFolder | undefined, value: string[]): Promise<string[]>;\n\tpublic async resolveAsync(root: IWorkspaceFolder | undefined, value: IStringDictionary<string>): Promise<IStringDictionary<string>>;\n\tpublic async resolveAsync(root: IWorkspaceFolder | undefined, value: any): Promise<any> {\n\t\tconst environment: Environment = {\n\t\t\tenv: await this._envVariablesPromise,\n\t\t\tuserHome: await this._userHomePromise\n\t\t};\n\t\treturn this.recursiveResolve(environment, root ? root.uri : undefined, value);\n\t}\n\n\tprivate async resolveAnyBase(workspaceFolder: IWorkspaceFolder | undefined, config: any, commandValueMapping?: IStringDictionary<string>, resolvedVariables?: Map<string, string>): Promise<any> {\n\n\t\tconst result = objects.deepClone(config);\n\n\t\t// hoist platform specific attributes to top level\n\t\tif (isWindows && result.windows) {\n\t\t\tObject.keys(result.windows).forEach(key => result[key] = result.windows[key]);\n\t\t} else if (isMacintosh && result.osx) {\n\t\t\tObject.keys(result.osx).forEach(key => result[key] = result.osx[key]);\n\t\t} else if (isLinux && result.linux) {\n\t\t\tObject.keys(result.linux).forEach(key => result[key] = result.linux[key]);\n\t\t}\n\n\t\t// delete all platform specific sections\n\t\tdelete result.windows;\n\t\tdelete result.osx;\n\t\tdelete result.linux;\n\n\t\t// substitute all variables recursively in string values\n\t\tconst environmentPromises: Environment = {\n\t\t\tenv: await this._envVariablesPromise,\n\t\t\tuserHome: await this._userHomePromise\n\t\t};\n\t\treturn this.recursiveResolve(environmentPromises, workspaceFolder ? workspaceFolder.uri : undefined, result, commandValueMapping, resolvedVariables);\n\t}\n\n\tpublic async resolveAnyAsync(workspaceFolder: IWorkspaceFolder | undefined, config: any, commandValueMapping?: IStringDictionary<string>): Promise<any> {\n\t\treturn this.resolveAnyBase(workspaceFolder, config, commandValueMapping);\n\t}\n\n\tpublic async resolveAnyMap(workspaceFolder: IWorkspaceFolder | undefined, config: any, commandValueMapping?: IStringDictionary<string>): Promise<{ newConfig: any; resolvedVariables: Map<string, string> }> {\n\t\tconst resolvedVariables = new Map<string, string>();\n\t\tconst newConfig = await this.resolveAnyBase(workspaceFolder, config, commandValueMapping, resolvedVariables);\n\t\treturn { newConfig, resolvedVariables };\n\t}\n\n\tpublic resolveWithInteractionReplace(folder: IWorkspaceFolder | undefined, config: any, section?: string, variables?: IStringDictionary<string>): Promise<any> {\n\t\tthrow new Error('resolveWithInteractionReplace not implemented.');\n\t}\n\n\tpublic resolveWithInteraction(folder: IWorkspaceFolder | undefined, config: any, section?: string, variables?: IStringDictionary<string>): Promise<Map<string, string> | undefined> {\n\t\tthrow new Error('resolveWithInteraction not implemented.');\n\t}\n\n\tpublic contributeVariable(variable: string, resolution: () => Promise<string | undefined>): void {\n\t\tif (this._contributedVariables.has(variable)) {\n\t\t\tthrow new Error('Variable ' + variable + ' is contributed twice.');\n\t\t} else {\n\t\t\tthis._contributedVariables.set(variable, resolution);\n\t\t}\n\t}\n\n\tprivate async recursiveResolve(environment: Environment, folderUri: uri | undefined, value: any, commandValueMapping?: IStringDictionary<string>, resolvedVariables?: Map<string, string>): Promise<any> {\n\t\tif (types.isString(value)) {\n\t\t\treturn this.resolveString(environment, folderUri, value, commandValueMapping, resolvedVariables);\n\t\t} else if (Array.isArray(value)) {\n\t\t\treturn Promise.all(value.map(s => this.recursiveResolve(environment, folderUri, s, commandValueMapping, resolvedVariables)));\n\t\t} else if (types.isObject(value)) {\n\t\t\tconst result: IStringDictionary<string | IStringDictionary<string> | string[]> = Object.create(null);\n\t\t\tconst replaced = await Promise.all(Object.keys(value).map(async key => {\n\t\t\t\tconst replaced = await this.resolveString(environment, folderUri, key, commandValueMapping, resolvedVariables);\n\t\t\t\treturn [replaced, await this.recursiveResolve(environment, folderUri, value[key], commandValueMapping, resolvedVariables)] as const;\n\t\t\t}));\n\t\t\t// two step process to preserve object key order\n\t\t\tfor (const [key, value] of replaced) {\n\t\t\t\tresult[key] = value;\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\treturn value;\n\t}\n\n\tprivate resolveString(environment: Environment, folderUri: uri | undefined, value: string, commandValueMapping: IStringDictionary<string> | undefined, resolvedVariables?: Map<string, string>): Promise<string> {\n\t\t// loop through all variables occurrences in 'value'\n\t\treturn replaceAsync(value, AbstractVariableResolverService.VARIABLE_REGEXP, async (match: string, variable: string) => {\n\t\t\t// disallow attempted nesting, see #77289. This doesn't exclude variables that resolve to other variables.\n\t\t\tif (variable.includes(AbstractVariableResolverService.VARIABLE_LHS)) {\n\t\t\t\treturn match;\n\t\t\t}\n\n\t\t\tlet resolvedValue = await this.evaluateSingleVariable(environment, match, variable, folderUri, commandValueMapping);\n\n\t\t\tresolvedVariables?.set(variable, resolvedValue);\n\n\t\t\tif ((resolvedValue !== match) && types.isString(resolvedValue) && resolvedValue.match(AbstractVariableResolverService.VARIABLE_REGEXP)) {\n\t\t\t\tresolvedValue = await this.resolveString(environment, folderUri, resolvedValue, commandValueMapping, resolvedVariables);\n\t\t\t}\n\n\t\t\treturn resolvedValue;\n\t\t});\n\t}\n\n\tprivate fsPath(displayUri: uri): string {\n\t\treturn this._labelService ? this._labelService.getUriLabel(displayUri, { noPrefix: true }) : displayUri.fsPath;\n\t}\n\n\tprivate async evaluateSingleVariable(environment: Environment, match: string, variable: string, folderUri: uri | undefined, commandValueMapping: IStringDictionary<string> | undefined): Promise<string> {\n\n\t\t// try to separate variable arguments from variable name\n\t\tlet argument: string | undefined;\n\t\tconst parts = variable.split(':');\n\t\tif (parts.length > 1) {\n\t\t\tvariable = parts[0];\n\t\t\targument = parts[1];\n\t\t}\n\n\t\t// common error handling for all variables that require an open editor\n\t\tconst getFilePath = (variableKind: VariableKind): string => {\n\n\t\t\tconst filePath = this._context.getFilePath();\n\t\t\tif (filePath) {\n\t\t\t\treturn normalizeDriveLetter(filePath);\n\t\t\t}\n\t\t\tthrow new VariableError(variableKind, (localize('canNotResolveFile', \"Variable {0} can not be resolved. Please open an editor.\", match)));\n\t\t};\n\n\t\t// common error handling for all variables that require an open editor\n\t\tconst getFolderPathForFile = (variableKind: VariableKind): string => {\n\n\t\t\tconst filePath = getFilePath(variableKind);\t\t// throws error if no editor open\n\t\t\tif (this._context.getWorkspaceFolderPathForFile) {\n\t\t\t\tconst folderPath = this._context.getWorkspaceFolderPathForFile();\n\t\t\t\tif (folderPath) {\n\t\t\t\t\treturn normalizeDriveLetter(folderPath);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow new VariableError(variableKind, localize('canNotResolveFolderForFile', \"Variable {0}: can not find workspace folder of '{1}'.\", match, paths.basename(filePath)));\n\t\t};\n\n\t\t// common error handling for all variables that require an open folder and accept a folder name argument\n\t\tconst getFolderUri = (variableKind: VariableKind): uri => {\n\n\t\t\tif (argument) {\n\t\t\t\tconst folder = this._context.getFolderUri(argument);\n\t\t\t\tif (folder) {\n\t\t\t\t\treturn folder;\n\t\t\t\t}\n\t\t\t\tthrow new VariableError(variableKind, localize('canNotFindFolder', \"Variable {0} can not be resolved. No such folder '{1}'.\", match, argument));\n\t\t\t}\n\n\t\t\tif (folderUri) {\n\t\t\t\treturn folderUri;\n\t\t\t}\n\n\t\t\tif (this._context.getWorkspaceFolderCount() > 1) {\n\t\t\t\tthrow new VariableError(variableKind, localize('canNotResolveWorkspaceFolderMultiRoot', \"Variable {0} can not be resolved in a multi folder workspace. Scope this variable using ':' and a workspace folder name.\", match));\n\t\t\t}\n\t\t\tthrow new VariableError(variableKind, localize('canNotResolveWorkspaceFolder', \"Variable {0} can not be resolved. Please open a folder.\", match));\n\t\t};\n\n\n\t\tswitch (variable) {\n\n\t\t\tcase 'env':\n\t\t\t\tif (argument) {\n\t\t\t\t\tif (environment.env) {\n\t\t\t\t\t\t// Depending on the source of the environment, on Windows, the values may all be lowercase.\n\t\t\t\t\t\tconst env = environment.env[isWindows ? argument.toLowerCase() : argument];\n\t\t\t\t\t\tif (types.isString(env)) {\n\t\t\t\t\t\t\treturn env;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// For `env` we should do the same as a normal shell does - evaluates undefined envs to an empty string #46436\n\t\t\t\t\treturn '';\n\t\t\t\t}\n\t\t\t\tthrow new VariableError(VariableKind.Env, localize('missingEnvVarName', \"Variable {0} can not be resolved because no environment variable name is given.\", match));\n\n\t\t\tcase 'config':\n\t\t\t\tif (argument) {\n\t\t\t\t\tconst config = this._context.getConfigurationValue(folderUri, argument);\n\t\t\t\t\tif (types.isUndefinedOrNull(config)) {\n\t\t\t\t\t\tthrow new VariableError(VariableKind.Config, localize('configNotFound', \"Variable {0} can not be resolved because setting '{1}' not found.\", match, argument));\n\t\t\t\t\t}\n\t\t\t\t\tif (types.isObject(config)) {\n\t\t\t\t\t\tthrow new VariableError(VariableKind.Config, localize('configNoString', \"Variable {0} can not be resolved because '{1}' is a structured value.\", match, argument));\n\t\t\t\t\t}\n\t\t\t\t\treturn config;\n\t\t\t\t}\n\t\t\t\tthrow new VariableError(VariableKind.Config, localize('missingConfigName', \"Variable {0} can not be resolved because no settings name is given.\", match));\n\n\t\t\tcase 'command':\n\t\t\t\treturn this.resolveFromMap(VariableKind.Command, match, argument, commandValueMapping, 'command');\n\n\t\t\tcase 'input':\n\t\t\t\treturn this.resolveFromMap(VariableKind.Input, match, argument, commandValueMapping, 'input');\n\n\t\t\tcase 'extensionInstallFolder':\n\t\t\t\tif (argument) {\n\t\t\t\t\tconst ext = await this._context.getExtension(argument);\n\t\t\t\t\tif (!ext) {\n\t\t\t\t\t\tthrow new VariableError(VariableKind.ExtensionInstallFolder, localize('extensionNotInstalled', \"Variable {0} can not be resolved because the extension {1} is not installed.\", match, argument));\n\t\t\t\t\t}\n\t\t\t\t\treturn this.fsPath(ext.extensionLocation);\n\t\t\t\t}\n\t\t\t\tthrow new VariableError(VariableKind.ExtensionInstallFolder, localize('missingExtensionName', \"Variable {0} can not be resolved because no extension name is given.\", match));\n\n\t\t\tdefault: {\n\n\t\t\t\tswitch (variable) {\n\t\t\t\t\tcase 'workspaceRoot':\n\t\t\t\t\tcase 'workspaceFolder':\n\t\t\t\t\t\treturn normalizeDriveLetter(this.fsPath(getFolderUri(VariableKind.WorkspaceFolder)));\n\n\t\t\t\t\tcase 'cwd':\n\t\t\t\t\t\treturn ((folderUri || argument) ? normalizeDriveLetter(this.fsPath(getFolderUri(VariableKind.Cwd))) : process.cwd());\n\n\t\t\t\t\tcase 'workspaceRootFolderName':\n\t\t\t\t\tcase 'workspaceFolderBasename':\n\t\t\t\t\t\treturn normalizeDriveLetter(paths.basename(this.fsPath(getFolderUri(VariableKind.WorkspaceFolderBasename))));\n\n\t\t\t\t\tcase 'userHome': {\n\t\t\t\t\t\tif (environment.userHome) {\n\t\t\t\t\t\t\treturn environment.userHome;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow new VariableError(VariableKind.UserHome, localize('canNotResolveUserHome', \"Variable {0} can not be resolved. UserHome path is not defined\", match));\n\t\t\t\t\t}\n\n\t\t\t\t\tcase 'lineNumber': {\n\t\t\t\t\t\tconst lineNumber = this._context.getLineNumber();\n\t\t\t\t\t\tif (lineNumber) {\n\t\t\t\t\t\t\treturn lineNumber;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow new VariableError(VariableKind.LineNumber, localize('canNotResolveLineNumber', \"Variable {0} can not be resolved. Make sure to have a line selected in the active editor.\", match));\n\t\t\t\t\t}\n\t\t\t\t\tcase 'selectedText': {\n\t\t\t\t\t\tconst selectedText = this._context.getSelectedText();\n\t\t\t\t\t\tif (selectedText) {\n\t\t\t\t\t\t\treturn selectedText;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthrow new VariableError(VariableKind.SelectedText, localize('canNotResolveSelectedText', \"Variable {0} can not be resolved. Make sure to have some text selected in the active editor.\", match));\n\t\t\t\t\t}\n\t\t\t\t\tcase 'file':\n\t\t\t\t\t\treturn getFilePath(VariableKind.File);\n\n\t\t\t\t\tcase 'fileWorkspaceFolder':\n\t\t\t\t\t\treturn getFolderPathForFile(VariableKind.FileWorkspaceFolder);\n\n\t\t\t\t\tcase 'relativeFile':\n\t\t\t\t\t\tif (folderUri || argument) {\n\t\t\t\t\t\t\treturn paths.relative(this.fsPath(getFolderUri(VariableKind.RelativeFile)), getFilePath(VariableKind.RelativeFile));\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn getFilePath(VariableKind.RelativeFile);\n\n\t\t\t\t\tcase 'relativeFileDirname': {\n\t\t\t\t\t\tconst dirname = paths.dirname(getFilePath(VariableKind.RelativeFileDirname));\n\t\t\t\t\t\tif (folderUri || argument) {\n\t\t\t\t\t\t\tconst relative = paths.relative(this.fsPath(getFolderUri(VariableKind.RelativeFileDirname)), dirname);\n\t\t\t\t\t\t\treturn relative.length === 0 ? '.' : relative;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn dirname;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'fileDirname':\n\t\t\t\t\t\treturn paths.dirname(getFilePath(VariableKind.FileDirname));\n\n\t\t\t\t\tcase 'fileExtname':\n\t\t\t\t\t\treturn paths.extname(getFilePath(VariableKind.FileExtname));\n\n\t\t\t\t\tcase 'fileBasename':\n\t\t\t\t\t\treturn paths.basename(getFilePath(VariableKind.FileBasename));\n\n\t\t\t\t\tcase 'fileBasenameNoExtension': {\n\t\t\t\t\t\tconst basename = paths.basename(getFilePath(VariableKind.FileBasenameNoExtension));\n\t\t\t\t\t\treturn (basename.slice(0, basename.length - paths.extname(basename).length));\n\t\t\t\t\t}\n\t\t\t\t\tcase 'fileDirnameBasename':\n\t\t\t\t\t\treturn paths.basename(paths.dirname(getFilePath(VariableKind.FileDirnameBasename)));\n\n\t\t\t\t\tcase 'execPath': {\n\t\t\t\t\t\tconst ep = this._context.getExecPath();\n\t\t\t\t\t\tif (ep) {\n\t\t\t\t\t\t\treturn ep;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn match;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'execInstallFolder': {\n\t\t\t\t\t\tconst ar = this._context.getAppRoot();\n\t\t\t\t\t\tif (ar) {\n\t\t\t\t\t\t\treturn ar;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn match;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'pathSeparator':\n\t\t\t\t\t\treturn paths.sep;\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst key = argument ? `${variable}:${argument}` : variable;\n\t\t\t\t\t\t\treturn this.resolveFromMap(VariableKind.Unknown, match, key, commandValueMapping, undefined);\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\treturn match;\n\t\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate resolveFromMap(variableKind: VariableKind, match: string, argument: string | undefined, commandValueMapping: IStringDictionary<string> | undefined, prefix: string | undefined): string {\n\t\tif (argument && commandValueMapping) {\n\t\t\tconst v = (prefix === undefined) ? commandValueMapping[argument] : commandValueMapping[prefix + ':' + argument];\n\t\t\tif (typeof v === 'string') {\n\t\t\t\treturn v;\n\t\t\t}\n\t\t\tthrow new VariableError(variableKind, localize('noValueForCommand', \"Variable {0} can not be resolved because the command has no value.\", match));\n\t\t}\n\t\treturn match;\n\t}\n}\n"]}