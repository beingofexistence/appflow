{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/aiRelatedInformation/test/common/aiRelatedInformationService.test.ts"],"names":[],"mappings":"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","file":"aiRelatedInformationService.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { AiRelatedInformationService } from 'vs/workbench/services/aiRelatedInformation/common/aiRelatedInformationService';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { CommandInformationResult, IAiRelatedInformationProvider, RelatedInformationType, SettingInformationResult } from 'vs/workbench/services/aiRelatedInformation/common/aiRelatedInformation';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nsuite('AiRelatedInformationService', () => {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\tlet service: AiRelatedInformationService;\n\n\tsetup(() => {\n\t\tservice = new AiRelatedInformationService(store.add(new NullLogService()));\n\t});\n\n\ttest('should check if providers are registered', () => {\n\t\tassert.equal(service.isEnabled(), false);\n\t\tstore.add(service.registerAiRelatedInformationProvider(RelatedInformationType.CommandInformation, { provideAiRelatedInformation: () => Promise.resolve([]) }));\n\t\tassert.equal(service.isEnabled(), true);\n\t});\n\n\ttest('should register and unregister providers', () => {\n\t\tconst provider: IAiRelatedInformationProvider = { provideAiRelatedInformation: () => Promise.resolve([]) };\n\t\tconst disposable = service.registerAiRelatedInformationProvider(RelatedInformationType.CommandInformation, provider);\n\t\tassert.strictEqual(service.isEnabled(), true);\n\t\tdisposable.dispose();\n\t\tassert.strictEqual(service.isEnabled(), false);\n\t});\n\n\ttest('should get related information', async () => {\n\t\tconst command = 'command';\n\t\tconst provider: IAiRelatedInformationProvider = {\n\t\t\tprovideAiRelatedInformation: () => Promise.resolve([{ type: RelatedInformationType.CommandInformation, command, weight: 1 }])\n\t\t};\n\t\tservice.registerAiRelatedInformationProvider(RelatedInformationType.CommandInformation, provider);\n\t\tconst result = await service.getRelatedInformation('query', [RelatedInformationType.CommandInformation], CancellationToken.None);\n\t\tassert.strictEqual(result.length, 1);\n\t\tassert.strictEqual((result[0] as CommandInformationResult).command, command);\n\t});\n\n\ttest('should get different types of related information', async () => {\n\t\tconst command = 'command';\n\t\tconst commandProvider: IAiRelatedInformationProvider = {\n\t\t\tprovideAiRelatedInformation: () => Promise.resolve([{ type: RelatedInformationType.CommandInformation, command, weight: 1 }])\n\t\t};\n\t\tservice.registerAiRelatedInformationProvider(RelatedInformationType.CommandInformation, commandProvider);\n\t\tconst setting = 'setting';\n\t\tconst settingProvider: IAiRelatedInformationProvider = {\n\t\t\tprovideAiRelatedInformation: () => Promise.resolve([{ type: RelatedInformationType.SettingInformation, setting, weight: 1 }])\n\t\t};\n\t\tservice.registerAiRelatedInformationProvider(RelatedInformationType.SettingInformation, settingProvider);\n\t\tconst result = await service.getRelatedInformation(\n\t\t\t'query',\n\t\t\t[\n\t\t\t\tRelatedInformationType.CommandInformation,\n\t\t\t\tRelatedInformationType.SettingInformation\n\t\t\t],\n\t\t\tCancellationToken.None\n\t\t);\n\t\tassert.strictEqual(result.length, 2);\n\t\tassert.strictEqual((result[0] as CommandInformationResult).command, command);\n\t\tassert.strictEqual((result[1] as SettingInformationResult).setting, setting);\n\t});\n});\n"]}