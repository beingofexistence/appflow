{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/dialogs/common/dialogService.ts"],"names":[],"mappings":"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","file":"dialogService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport Severity from 'vs/base/common/severity';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IConfirmation, IConfirmationResult, IDialogService, IInput, IInputResult, IPrompt, IPromptResult, IPromptResultWithCancel, IPromptWithCustomCancel, IPromptWithDefaultCancel } from 'vs/platform/dialogs/common/dialogs';\nimport { DialogsModel } from 'vs/workbench/common/dialogs';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { ILogService } from 'vs/platform/log/common/log';\n\nexport class DialogService extends Disposable implements IDialogService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\treadonly model = this._register(new DialogsModel());\n\n\treadonly onWillShowDialog = this.model.onWillShowDialog;\n\n\treadonly onDidShowDialog = this.model.onDidShowDialog;\n\n\tconstructor(\n\t\t@IWorkbenchEnvironmentService private readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t}\n\n\tprivate skipDialogs(): boolean {\n\t\tif (this.environmentService.isExtensionDevelopment && this.environmentService.extensionTestsLocationURI) {\n\t\t\treturn true; // integration tests\n\t\t}\n\n\t\treturn !!this.environmentService.enableSmokeTestDriver; // smoke tests\n\t}\n\n\tasync confirm(confirmation: IConfirmation): Promise<IConfirmationResult> {\n\t\tif (this.skipDialogs()) {\n\t\t\tthis.logService.trace('DialogService: refused to show confirmation dialog in tests.');\n\n\t\t\treturn { confirmed: true };\n\t\t}\n\n\t\tconst handle = this.model.show({ confirmArgs: { confirmation } });\n\n\t\treturn await handle.result as IConfirmationResult;\n\t}\n\n\tprompt<T>(prompt: IPromptWithCustomCancel<T>): Promise<IPromptResultWithCancel<T>>;\n\tprompt<T>(prompt: IPromptWithDefaultCancel<T>): Promise<IPromptResult<T>>;\n\tprompt<T>(prompt: IPrompt<T>): Promise<IPromptResult<T>>;\n\tasync prompt<T>(prompt: IPrompt<T> | IPromptWithCustomCancel<T> | IPromptWithDefaultCancel<T>): Promise<IPromptResult<T> | IPromptResultWithCancel<T>> {\n\t\tif (this.skipDialogs()) {\n\t\t\tthrow new Error(`DialogService: refused to show dialog in tests. Contents: ${prompt.message}`);\n\t\t}\n\n\t\tconst handle = this.model.show({ promptArgs: { prompt } });\n\n\t\treturn await handle.result as Promise<IPromptResult<T> | IPromptResultWithCancel<T>>;\n\t}\n\n\tasync input(input: IInput): Promise<IInputResult> {\n\t\tif (this.skipDialogs()) {\n\t\t\tthrow new Error('DialogService: refused to show input dialog in tests.');\n\t\t}\n\n\t\tconst handle = this.model.show({ inputArgs: { input } });\n\n\t\treturn await handle.result as IInputResult;\n\t}\n\n\tasync info(message: string, detail?: string): Promise<void> {\n\t\tawait this.prompt({ type: Severity.Info, message, detail });\n\t}\n\n\tasync warn(message: string, detail?: string): Promise<void> {\n\t\tawait this.prompt({ type: Severity.Warning, message, detail });\n\t}\n\n\tasync error(message: string, detail?: string): Promise<void> {\n\t\tawait this.prompt({ type: Severity.Error, message, detail });\n\t}\n\n\tasync about(): Promise<void> {\n\t\tif (this.skipDialogs()) {\n\t\t\tthrow new Error('DialogService: refused to show about dialog in tests.');\n\t\t}\n\n\t\tconst handle = this.model.show({});\n\t\tawait handle.result;\n\t}\n}\n\nregisterSingleton(IDialogService, DialogService, InstantiationType.Delayed);\n"]}