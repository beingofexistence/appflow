{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/textMate/browser/arrayOperation.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAIhG,MAAa,IAAI;QAGhB;QACC;;WAEG;QACH,KAAiC;YAEjC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,EAAE,CAAC,IAAI,CAAC,IAAA,YAAG,EAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,EAAE,YAAG,CAAc,CAAC,CAAC;QAC7E,CAAC;QAED,YAAY,CAAC,KAAY;YACxB,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;gBAChD,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACxB,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;aAC5D;QACF,CAAC;KACD;IAlBD,oBAkBC;IAED,MAAa,IAAI;QAChB,YACiB,MAAc,EACd,MAAc,EACd,SAAiB;YAFjB,WAAM,GAAN,MAAM,CAAQ;YACd,WAAM,GAAN,MAAM,CAAQ;YACd,cAAS,GAAT,SAAS,CAAQ;QAC9B,CAAC;QAEL,QAAQ;YACP,OAAO,IAAI,IAAI,CAAC,MAAM,MAAM,IAAI,CAAC,MAAM,SAAS,IAAI,CAAC,SAAS,GAAG,CAAC;QACnE,CAAC;KACD;IAVD,oBAUC;IAMD;;MAEE;IACF,MAAa,IAAI;QACT,MAAM,CAAC,QAAQ,CAAC,eAA4B;YAClD,8DAA8D;YAC9D,MAAM,YAAY,GAAG,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,IAAI,CAAuB,CAAC,CAAC,CAAC,CAAC;YACjF,OAAO,IAAI,IAAI,CAAqB,YAAY,CAAC,CAAC;QACnD,CAAC;QAKD,YAA6B,CAAoB;YAApB,MAAC,GAAD,CAAC,CAAmB;YAHzC,MAAC,GAAK,CAAC,CAAC;YACR,MAAC,GAAQ,CAAC,CAAC;QAGnB,CAAC;QAED;;WAEG;QACH,SAAS,CAAC,KAAa;YACtB,IAAI,UAAU,GAAG,IAAI,CAAC,CAAC,CAAc,KAAK,CAAC,IAAI,CAAC,CAAC,CAAkC,CAAC;YACpF,OAAO,UAAU,IAAI,UAAU,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,IAAI,KAAK,EAAE;gBACpE,IAAI,CAAC,CAAC,IAAS,UAAU,CAAC,SAAS,GAAG,UAAU,CAAC,MAAM,CAAC;gBACxD,IAAI,CAAC,CAAC,EAAI,CAAC;gBACX,UAAU,GAAG,IAAI,CAAC,CAAC,CAAc,KAAK,CAAC,IAAI,CAAC,CAAC,CAAG,CAAC;aACjD;YACD,mFAAmF;YAEnF,IAAI,UAAU,IAAI,UAAU,CAAC,MAAM,IAAI,KAAK,EAAE;gBAC7C,kCAAkC;gBAClC,OAAO,SAAS,CAAC;aACjB;YAED,OAAO,KAAK,GAAG,IAAI,CAAC,CAAC,CAAM;QAC5B,CAAC;KACD;IAhCD,oBAgCC;IAED,MAAa,IAAI;QAChB,YACkB,CAAiC;YAAjC,MAAC,GAAD,CAAC,CAAgC;QAC/C,CAAC;QAEL,SAAS,CAAC,KAAa;YACtB,KAAK,MAAM,WAAW,IAAI,IAAI,CAAC,CAAC,EAAa;gBAC5C,MAAM,MAAM,GAAG,WAAW,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBAC5C,IAAI,MAAM,KAAK,SAAS,EAAE;oBACzB,OAAO,SAAS,CAAC;iBACjB;gBACD,KAAK,GAAG,MAAM,CAAC;aACf;YACD,OAAO,KAAK,CAAC;QACd,CAAC;KACD;IAfD,oBAeC","file":"arrayOperation.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { compareBy, numberComparator } from 'vs/base/common/arrays';\n\nexport class ArrayEdit {\n\tpublic readonly edits: readonly SingleArrayEdit[];\n\n\tconstructor(\n\t\t/**\n\t\t * Disjoint edits that are applied in parallel\n\t\t */\n\t\tedits: readonly SingleArrayEdit[]\n\t) {\n\t\tthis.edits = edits.slice().sort(compareBy(c => c.offset, numberComparator));\n\t}\n\n\tapplyToArray(array: any[]): void {\n\t\tfor (let i = this.edits.length - 1; i >= 0; i--) {\n\t\t\tconst c = this.edits[i];\n\t\t\tarray.splice(c.offset, c.length, ...new Array(c.newLength));\n\t\t}\n\t}\n}\n\nexport class SingleArrayEdit {\n\tconstructor(\n\t\tpublic readonly offset: number,\n\t\tpublic readonly length: number,\n\t\tpublic readonly newLength: number,\n\t) { }\n\n\ttoString() {\n\t\treturn `[${this.offset}, +${this.length}) -> +${this.newLength}}`;\n\t}\n}\n\nexport interface IIndexTransformer {\n\ttransform(index: number): number | undefined;\n}\n\n/**\n * Can only be called with increasing values of `index`.\n*/\nexport class MonotonousIndexTransformer implements IIndexTransformer {\n\tpublic static fromMany(transformations: ArrayEdit[]): IIndexTransformer {\n\t\t// TODO improve performance by combining transformations first\n\t\tconst transformers = transformations.map(t => new MonotonousIndexTransformer(t));\n\t\treturn new CombinedIndexTransformer(transformers);\n\t}\n\n\tprivate idx = 0;\n\tprivate offset = 0;\n\n\tconstructor(private readonly transformation: ArrayEdit) {\n\t}\n\n\t/**\n\t * Precondition: index >= previous-value-of(index).\n\t */\n\ttransform(index: number): number | undefined {\n\t\tlet nextChange = this.transformation.edits[this.idx] as SingleArrayEdit | undefined;\n\t\twhile (nextChange && nextChange.offset + nextChange.length <= index) {\n\t\t\tthis.offset += nextChange.newLength - nextChange.length;\n\t\t\tthis.idx++;\n\t\t\tnextChange = this.transformation.edits[this.idx];\n\t\t}\n\t\t// assert nextChange === undefined || index < nextChange.offset + nextChange.length\n\n\t\tif (nextChange && nextChange.offset <= index) {\n\t\t\t// Offset is touched by the change\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn index + this.offset;\n\t}\n}\n\nexport class CombinedIndexTransformer implements IIndexTransformer {\n\tconstructor(\n\t\tprivate readonly transformers: IIndexTransformer[]\n\t) { }\n\n\ttransform(index: number): number | undefined {\n\t\tfor (const transformer of this.transformers) {\n\t\t\tconst result = transformer.transform(index);\n\t\t\tif (result === undefined) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tindex = result;\n\t\t}\n\t\treturn index;\n\t}\n}\n"]}