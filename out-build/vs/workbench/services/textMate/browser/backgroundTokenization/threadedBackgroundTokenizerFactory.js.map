{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/textMate/browser/backgroundTokenization/threadedBackgroundTokenizerFactory.ts"],"names":[],"mappings":"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","file":"threadedBackgroundTokenizerFactory.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { AppResourcePath, FileAccess, nodeModulesAsarPath, nodeModulesPath } from 'vs/base/common/network';\nimport { IObservable } from 'vs/base/common/observable';\nimport { isWeb } from 'vs/base/common/platform';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { MonacoWebWorker, createWebWorker } from 'vs/editor/browser/services/webWorker';\nimport { IBackgroundTokenizationStore, IBackgroundTokenizer } from 'vs/editor/common/languages';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { ILanguageConfigurationService } from 'vs/editor/common/languages/languageConfigurationRegistry';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IExtensionResourceLoaderService } from 'vs/platform/extensionResourceLoader/common/extensionResourceLoader';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { ICreateData, ITextMateWorkerHost, StateDeltas, TextMateTokenizationWorker } from 'vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateTokenizationWorker.worker';\nimport { TextMateWorkerTokenizerController } from 'vs/workbench/services/textMate/browser/backgroundTokenization/textMateWorkerTokenizerController';\nimport { IValidGrammarDefinition } from 'vs/workbench/services/textMate/common/TMScopeRegistry';\nimport type { IRawTheme } from 'vscode-textmate';\n\nexport class ThreadedBackgroundTokenizerFactory implements IDisposable {\n\tprivate static _reportedMismatchingTokens = false;\n\n\tprivate _workerProxyPromise: Promise<TextMateTokenizationWorker | null> | null = null;\n\tprivate _worker: MonacoWebWorker<TextMateTokenizationWorker> | null = null;\n\tprivate _workerProxy: TextMateTokenizationWorker | null = null;\n\tprivate readonly _workerTokenizerControllers = new Map</* backgroundTokenizerId */number, TextMateWorkerTokenizerController>();\n\n\tprivate _currentTheme: IRawTheme | null = null;\n\tprivate _currentTokenColorMap: string[] | null = null;\n\tprivate _grammarDefinitions: IValidGrammarDefinition[] = [];\n\n\tconstructor(\n\t\tprivate readonly _reportTokenizationTime: (timeMs: number, languageId: string, sourceExtensionId: string | undefined, lineLength: number, isRandomSample: boolean) => void,\n\t\tprivate readonly _shouldTokenizeAsync: () => boolean,\n\t\t@IExtensionResourceLoaderService private readonly _extensionResourceLoaderService: IExtensionResourceLoaderService,\n\t\t@IModelService private readonly _modelService: IModelService,\n\t\t@ILanguageConfigurationService private readonly _languageConfigurationService: ILanguageConfigurationService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ILanguageService private readonly _languageService: ILanguageService,\n\t\t@IEnvironmentService private readonly _environmentService: IEnvironmentService,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t) {\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._disposeWorker();\n\t}\n\n\t// Will be recreated after worker is disposed (because tokenizer is re-registered when languages change)\n\tpublic createBackgroundTokenizer(textModel: ITextModel, tokenStore: IBackgroundTokenizationStore, maxTokenizationLineLength: IObservable<number>): IBackgroundTokenizer | undefined {\n\t\t// fallback to default sync background tokenizer\n\t\tif (!this._shouldTokenizeAsync() || textModel.isTooLargeForSyncing()) { return undefined; }\n\n\t\tconst store = new DisposableStore();\n\t\tconst controllerContainer = this._getWorkerProxy().then((workerProxy) => {\n\t\t\tif (store.isDisposed || !workerProxy) { return undefined; }\n\n\t\t\tconst controllerContainer = { controller: undefined as undefined | TextMateWorkerTokenizerController, worker: this._worker };\n\t\t\tstore.add(keepAliveWhenAttached(textModel, () => {\n\t\t\t\tconst controller = new TextMateWorkerTokenizerController(textModel, workerProxy, this._languageService.languageIdCodec, tokenStore, this._configurationService, maxTokenizationLineLength);\n\t\t\t\tcontrollerContainer.controller = controller;\n\t\t\t\tthis._workerTokenizerControllers.set(controller.controllerId, controller);\n\t\t\t\treturn toDisposable(() => {\n\t\t\t\t\tcontrollerContainer.controller = undefined;\n\t\t\t\t\tthis._workerTokenizerControllers.delete(controller.controllerId);\n\t\t\t\t\tcontroller.dispose();\n\t\t\t\t});\n\t\t\t}));\n\t\t\treturn controllerContainer;\n\t\t});\n\n\t\treturn {\n\t\t\tdispose() {\n\t\t\t\tstore.dispose();\n\t\t\t},\n\t\t\trequestTokens: async (startLineNumber, endLineNumberExclusive) => {\n\t\t\t\tconst container = await controllerContainer;\n\n\t\t\t\t// If there is no controller, the model has been detached in the meantime.\n\t\t\t\t// Only request the proxy object if the worker is the same!\n\t\t\t\tif (container?.controller && container.worker === this._worker) {\n\t\t\t\t\tcontainer.controller.requestTokens(startLineNumber, endLineNumberExclusive);\n\t\t\t\t}\n\t\t\t},\n\t\t\treportMismatchingTokens: (lineNumber) => {\n\t\t\t\tif (ThreadedBackgroundTokenizerFactory._reportedMismatchingTokens) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tThreadedBackgroundTokenizerFactory._reportedMismatchingTokens = true;\n\n\t\t\t\tthis._notificationService.error({\n\t\t\t\t\tmessage: 'Async Tokenization Token Mismatch in line ' + lineNumber,\n\t\t\t\t\tname: 'Async Tokenization Token Mismatch',\n\t\t\t\t});\n\n\t\t\t\tthis._telemetryService.publicLog2<{}, { owner: 'hediet'; comment: 'Used to see if async tokenization is bug-free' }>('asyncTokenizationMismatchingTokens', {});\n\t\t\t},\n\t\t};\n\t}\n\n\tpublic setGrammarDefinitions(grammarDefinitions: IValidGrammarDefinition[]): void {\n\t\tthis._grammarDefinitions = grammarDefinitions;\n\t\tthis._disposeWorker();\n\t}\n\n\tpublic acceptTheme(theme: IRawTheme, colorMap: string[]): void {\n\t\tthis._currentTheme = theme;\n\t\tthis._currentTokenColorMap = colorMap;\n\t\tif (this._currentTheme && this._currentTokenColorMap && this._workerProxy) {\n\t\t\tthis._workerProxy.acceptTheme(this._currentTheme, this._currentTokenColorMap);\n\t\t}\n\t}\n\n\tprivate _getWorkerProxy(): Promise<TextMateTokenizationWorker | null> {\n\t\tif (!this._workerProxyPromise) {\n\t\t\tthis._workerProxyPromise = this._createWorkerProxy();\n\t\t}\n\t\treturn this._workerProxyPromise;\n\t}\n\n\tprivate async _createWorkerProxy(): Promise<TextMateTokenizationWorker | null> {\n\t\tconst textmateModuleLocation: AppResourcePath = `${nodeModulesPath}/vscode-textmate`;\n\t\tconst textmateModuleLocationAsar: AppResourcePath = `${nodeModulesAsarPath}/vscode-textmate`;\n\t\tconst onigurumaModuleLocation: AppResourcePath = `${nodeModulesPath}/vscode-oniguruma`;\n\t\tconst onigurumaModuleLocationAsar: AppResourcePath = `${nodeModulesAsarPath}/vscode-oniguruma`;\n\n\t\tconst useAsar = this._environmentService.isBuilt && !isWeb;\n\t\tconst textmateLocation: AppResourcePath = useAsar ? textmateModuleLocationAsar : textmateModuleLocation;\n\t\tconst onigurumaLocation: AppResourcePath = useAsar ? onigurumaModuleLocationAsar : onigurumaModuleLocation;\n\t\tconst textmateMain: AppResourcePath = `${textmateLocation}/release/main.js`;\n\t\tconst onigurumaMain: AppResourcePath = `${onigurumaLocation}/release/main.js`;\n\t\tconst onigurumaWASM: AppResourcePath = `${onigurumaLocation}/release/onig.wasm`;\n\t\tconst uri = FileAccess.asBrowserUri(textmateMain).toString(true);\n\n\t\tconst createData: ICreateData = {\n\t\t\tgrammarDefinitions: this._grammarDefinitions,\n\t\t\ttextmateMainUri: uri,\n\t\t\tonigurumaMainUri: FileAccess.asBrowserUri(onigurumaMain).toString(true),\n\t\t\tonigurumaWASMUri: FileAccess.asBrowserUri(onigurumaWASM).toString(true),\n\t\t};\n\t\tconst host: ITextMateWorkerHost = {\n\t\t\treadFile: async (_resource: UriComponents): Promise<string> => {\n\t\t\t\tconst resource = URI.revive(_resource);\n\t\t\t\treturn this._extensionResourceLoaderService.readExtensionResource(resource);\n\t\t\t},\n\t\t\tsetTokensAndStates: async (controllerId: number, versionId: number, tokens: Uint8Array, lineEndStateDeltas: StateDeltas[]): Promise<void> => {\n\t\t\t\tconst controller = this._workerTokenizerControllers.get(controllerId);\n\t\t\t\t// When a model detaches, it is removed synchronously from the map.\n\t\t\t\t// However, the worker might still be sending tokens for that model,\n\t\t\t\t// so we ignore the event when there is no controller.\n\t\t\t\tif (controller) {\n\t\t\t\t\tcontroller.setTokensAndStates(controllerId, versionId, tokens, lineEndStateDeltas);\n\t\t\t\t}\n\t\t\t},\n\t\t\treportTokenizationTime: (timeMs: number, languageId: string, sourceExtensionId: string | undefined, lineLength: number, isRandomSample: boolean): void => {\n\t\t\t\tthis._reportTokenizationTime(timeMs, languageId, sourceExtensionId, lineLength, isRandomSample);\n\t\t\t}\n\t\t};\n\t\tconst worker = this._worker = createWebWorker<TextMateTokenizationWorker>(this._modelService, this._languageConfigurationService, {\n\t\t\tcreateData,\n\t\t\tlabel: 'textMateWorker',\n\t\t\tmoduleId: 'vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateTokenizationWorker.worker',\n\t\t\thost,\n\t\t});\n\t\tconst proxy = await worker.getProxy();\n\n\t\tif (this._worker !== worker) {\n\t\t\t// disposed in the meantime\n\t\t\treturn null;\n\t\t}\n\t\tthis._workerProxy = proxy;\n\t\tif (this._currentTheme && this._currentTokenColorMap) {\n\t\t\tthis._workerProxy.acceptTheme(this._currentTheme, this._currentTokenColorMap);\n\t\t}\n\t\treturn proxy;\n\t}\n\n\tprivate _disposeWorker(): void {\n\t\tfor (const controller of this._workerTokenizerControllers.values()) {\n\t\t\tcontroller.dispose();\n\t\t}\n\t\tthis._workerTokenizerControllers.clear();\n\n\t\tif (this._worker) {\n\t\t\tthis._worker.dispose();\n\t\t\tthis._worker = null;\n\t\t}\n\t\tthis._workerProxy = null;\n\t\tthis._workerProxyPromise = null;\n\t}\n}\n\nfunction keepAliveWhenAttached(textModel: ITextModel, factory: () => IDisposable): IDisposable {\n\tconst disposableStore = new DisposableStore();\n\tconst subStore = disposableStore.add(new DisposableStore());\n\n\tfunction checkAttached() {\n\t\tif (textModel.isAttachedToEditor()) {\n\t\t\tsubStore.add(factory());\n\t\t} else {\n\t\t\tsubStore.clear();\n\t\t}\n\t}\n\n\tcheckAttached();\n\tdisposableStore.add(textModel.onDidChangeAttached(() => {\n\t\tcheckAttached();\n\t}));\n\treturn disposableStore;\n}\n"]}