{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateWorkerTokenizer.ts"],"names":[],"mappings":"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","file":"textMateWorkerTokenizer.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { importAMDNodeModule } from 'vs/amdX';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { observableValue } from 'vs/base/common/observable';\nimport { setTimeout0 } from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { LineRange } from 'vs/editor/common/core/lineRange';\nimport { LanguageId } from 'vs/editor/common/encodedTokenAttributes';\nimport { IModelChangedEvent, MirrorTextModel } from 'vs/editor/common/model/mirrorTextModel';\nimport { TokenizerWithStateStore } from 'vs/editor/common/model/textModelTokens';\nimport { ContiguousMultilineTokensBuilder } from 'vs/editor/common/tokens/contiguousMultilineTokensBuilder';\nimport { LineTokens } from 'vs/editor/common/tokens/lineTokens';\nimport { TextMateTokenizationSupport } from 'vs/workbench/services/textMate/browser/tokenizationSupport/textMateTokenizationSupport';\nimport { TokenizationSupportWithLineLimit } from 'vs/workbench/services/textMate/browser/tokenizationSupport/tokenizationSupportWithLineLimit';\nimport type { StackDiff, StateStack, diffStateStacksRefEq } from 'vscode-textmate';\nimport { ICreateGrammarResult } from 'vs/workbench/services/textMate/common/TMGrammarFactory';\nimport { StateDeltas } from 'vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateTokenizationWorker.worker';\n\nexport interface TextMateModelTokenizerHost {\n\tgetOrCreateGrammar(languageId: string, encodedLanguageId: LanguageId): Promise<ICreateGrammarResult | null>;\n\tsetTokensAndStates(versionId: number, tokens: Uint8Array, stateDeltas: StateDeltas[]): void;\n\treportTokenizationTime(timeMs: number, languageId: string, sourceExtensionId: string | undefined, lineLength: number, isRandomSample: boolean): void;\n}\n\nexport class TextMateWorkerTokenizer extends MirrorTextModel {\n\tprivate _tokenizerWithStateStore: TokenizerWithStateStore<StateStack> | null = null;\n\tprivate _isDisposed: boolean = false;\n\tprivate readonly _maxTokenizationLineLength = observableValue(this, -1);\n\tprivate _diffStateStacksRefEqFn?: typeof diffStateStacksRefEq;\n\tprivate readonly _tokenizeDebouncer = new RunOnceScheduler(() => this._tokenize(), 10);\n\n\tconstructor(\n\t\turi: URI,\n\t\tlines: string[],\n\t\teol: string,\n\t\tversionId: number,\n\t\tprivate readonly _host: TextMateModelTokenizerHost,\n\t\tprivate _languageId: string,\n\t\tprivate _encodedLanguageId: LanguageId,\n\t\tmaxTokenizationLineLength: number,\n\t) {\n\t\tsuper(uri, lines, eol, versionId);\n\t\tthis._maxTokenizationLineLength.set(maxTokenizationLineLength, undefined);\n\t\tthis._resetTokenization();\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._isDisposed = true;\n\t\tsuper.dispose();\n\t}\n\n\tpublic onLanguageId(languageId: string, encodedLanguageId: LanguageId): void {\n\t\tthis._languageId = languageId;\n\t\tthis._encodedLanguageId = encodedLanguageId;\n\t\tthis._resetTokenization();\n\t}\n\n\toverride onEvents(e: IModelChangedEvent): void {\n\t\tsuper.onEvents(e);\n\n\t\tthis._tokenizerWithStateStore?.store.acceptChanges(e.changes);\n\t\tthis._tokenizeDebouncer.schedule();\n\t}\n\n\tpublic acceptMaxTokenizationLineLength(maxTokenizationLineLength: number): void {\n\t\tthis._maxTokenizationLineLength.set(maxTokenizationLineLength, undefined);\n\t}\n\n\tpublic retokenize(startLineNumber: number, endLineNumberExclusive: number) {\n\t\tif (this._tokenizerWithStateStore) {\n\t\t\tthis._tokenizerWithStateStore.store.invalidateEndStateRange(new LineRange(startLineNumber, endLineNumberExclusive));\n\t\t\tthis._tokenizeDebouncer.schedule();\n\t\t}\n\t}\n\n\tprivate async _resetTokenization() {\n\t\tthis._tokenizerWithStateStore = null;\n\n\t\tconst languageId = this._languageId;\n\t\tconst encodedLanguageId = this._encodedLanguageId;\n\n\t\tconst r = await this._host.getOrCreateGrammar(languageId, encodedLanguageId);\n\n\t\tif (this._isDisposed || languageId !== this._languageId || encodedLanguageId !== this._encodedLanguageId || !r) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (r.grammar) {\n\t\t\tconst tokenizationSupport = new TokenizationSupportWithLineLimit(\n\t\t\t\tthis._encodedLanguageId,\n\t\t\t\tnew TextMateTokenizationSupport(r.grammar, r.initialState, false, undefined, () => false,\n\t\t\t\t\t(timeMs, lineLength, isRandomSample) => {\n\t\t\t\t\t\tthis._host.reportTokenizationTime(timeMs, languageId, r.sourceExtensionId, lineLength, isRandomSample);\n\t\t\t\t\t},\n\t\t\t\t\tfalse\n\t\t\t\t),\n\t\t\t\tthis._maxTokenizationLineLength\n\t\t\t);\n\t\t\tthis._tokenizerWithStateStore = new TokenizerWithStateStore(this._lines.length, tokenizationSupport);\n\t\t} else {\n\t\t\tthis._tokenizerWithStateStore = null;\n\t\t}\n\t\tthis._tokenize();\n\t}\n\n\tprivate async _tokenize(): Promise<void> {\n\t\tif (this._isDisposed || !this._tokenizerWithStateStore) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this._diffStateStacksRefEqFn) {\n\t\t\tconst { diffStateStacksRefEq } = await importAMDNodeModule<typeof import('vscode-textmate')>('vscode-textmate', 'release/main.js');\n\t\t\tthis._diffStateStacksRefEqFn = diffStateStacksRefEq;\n\t\t}\n\n\t\tconst startTime = new Date().getTime();\n\n\t\twhile (true) {\n\t\t\tlet tokenizedLines = 0;\n\t\t\tconst tokenBuilder = new ContiguousMultilineTokensBuilder();\n\t\t\tconst stateDeltaBuilder = new StateDeltaBuilder();\n\n\t\t\twhile (true) {\n\t\t\t\tconst lineToTokenize = this._tokenizerWithStateStore.getFirstInvalidLine();\n\t\t\t\tif (lineToTokenize === null || tokenizedLines > 200) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\ttokenizedLines++;\n\n\t\t\t\tconst text = this._lines[lineToTokenize.lineNumber - 1];\n\t\t\t\tconst r = this._tokenizerWithStateStore.tokenizationSupport.tokenizeEncoded(text, true, lineToTokenize.startState);\n\t\t\t\tif (this._tokenizerWithStateStore.store.setEndState(lineToTokenize.lineNumber, r.endState as StateStack)) {\n\t\t\t\t\tconst delta = this._diffStateStacksRefEqFn(lineToTokenize.startState, r.endState as StateStack);\n\t\t\t\t\tstateDeltaBuilder.setState(lineToTokenize.lineNumber, delta);\n\t\t\t\t} else {\n\t\t\t\t\tstateDeltaBuilder.setState(lineToTokenize.lineNumber, null);\n\t\t\t\t}\n\n\t\t\t\tLineTokens.convertToEndOffset(r.tokens, text.length);\n\t\t\t\ttokenBuilder.add(lineToTokenize.lineNumber, r.tokens);\n\n\t\t\t\tconst deltaMs = new Date().getTime() - startTime;\n\t\t\t\tif (deltaMs > 20) {\n\t\t\t\t\t// yield to check for changes\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (tokenizedLines === 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tconst stateDeltas = stateDeltaBuilder.getStateDeltas();\n\t\t\tthis._host.setTokensAndStates(\n\t\t\t\tthis._versionId,\n\t\t\t\ttokenBuilder.serialize(),\n\t\t\t\tstateDeltas\n\t\t\t);\n\n\t\t\tconst deltaMs = new Date().getTime() - startTime;\n\t\t\tif (deltaMs > 20) {\n\t\t\t\t// yield to check for changes\n\t\t\t\tsetTimeout0(() => this._tokenize());\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n}\n\nclass StateDeltaBuilder {\n\tprivate _lastStartLineNumber: number = -1;\n\tprivate _stateDeltas: StateDeltas[] = [];\n\n\tpublic setState(lineNumber: number, stackDiff: StackDiff | null): void {\n\t\tif (lineNumber === this._lastStartLineNumber + 1) {\n\t\t\tthis._stateDeltas[this._stateDeltas.length - 1].stateDeltas.push(stackDiff);\n\t\t} else {\n\t\t\tthis._stateDeltas.push({ startLineNumber: lineNumber, stateDeltas: [stackDiff] });\n\t\t}\n\t\tthis._lastStartLineNumber = lineNumber;\n\t}\n\n\tpublic getStateDeltas(): StateDeltas[] {\n\t\treturn this._stateDeltas;\n\t}\n}\n"]}