{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateTokenizationWorker.worker.ts"],"names":[],"mappings":"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","file":"textMateTokenizationWorker.worker.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { LanguageId } from 'vs/editor/common/encodedTokenAttributes';\nimport { IModelChangedEvent } from 'vs/editor/common/model/mirrorTextModel';\nimport { IWorkerContext } from 'vs/editor/common/services/editorSimpleWorker';\nimport { ICreateGrammarResult, TMGrammarFactory } from 'vs/workbench/services/textMate/common/TMGrammarFactory';\nimport { IValidEmbeddedLanguagesMap, IValidGrammarDefinition, IValidTokenTypeMap } from 'vs/workbench/services/textMate/common/TMScopeRegistry';\nimport type { IOnigLib, IRawTheme, StackDiff } from 'vscode-textmate';\nimport { TextMateWorkerTokenizer } from './textMateWorkerTokenizer';\n\n/**\n * Defines the worker entry point. Must be exported and named `create`.\n */\nexport function create(ctx: IWorkerContext<ITextMateWorkerHost>, createData: ICreateData): TextMateTokenizationWorker {\n\treturn new TextMateTokenizationWorker(ctx, createData);\n}\n\nexport interface ITextMateWorkerHost {\n\treadFile(_resource: UriComponents): Promise<string>;\n\tsetTokensAndStates(controllerId: number, versionId: number, tokens: Uint8Array, lineEndStateDeltas: StateDeltas[]): Promise<void>;\n\treportTokenizationTime(timeMs: number, languageId: string, sourceExtensionId: string | undefined, lineLength: number, isRandomSample: boolean): void;\n}\n\nexport interface ICreateData {\n\tgrammarDefinitions: IValidGrammarDefinitionDTO[];\n\ttextmateMainUri: string;\n\tonigurumaMainUri: string;\n\tonigurumaWASMUri: string;\n}\n\nexport interface IValidGrammarDefinitionDTO {\n\tlocation: UriComponents;\n\tlanguage?: string;\n\tscopeName: string;\n\tembeddedLanguages: IValidEmbeddedLanguagesMap;\n\ttokenTypes: IValidTokenTypeMap;\n\tinjectTo?: string[];\n\tbalancedBracketSelectors: string[];\n\tunbalancedBracketSelectors: string[];\n\tsourceExtensionId?: string;\n}\n\nexport interface StateDeltas {\n\tstartLineNumber: number;\n\t// null means the state for that line did not change\n\tstateDeltas: (StackDiff | null)[];\n}\n\nexport class TextMateTokenizationWorker {\n\tprivate readonly _host: ITextMateWorkerHost;\n\tprivate readonly _models = new Map</* controllerId */ number, TextMateWorkerTokenizer>();\n\tprivate readonly _grammarCache: Promise<ICreateGrammarResult>[] = [];\n\tprivate readonly _grammarFactory: Promise<TMGrammarFactory | null>;\n\n\tconstructor(\n\t\tctx: IWorkerContext<ITextMateWorkerHost>,\n\t\tprivate readonly _createData: ICreateData\n\t) {\n\t\tthis._host = ctx.host;\n\t\tconst grammarDefinitions = _createData.grammarDefinitions.map<IValidGrammarDefinition>((def) => {\n\t\t\treturn {\n\t\t\t\tlocation: URI.revive(def.location),\n\t\t\t\tlanguage: def.language,\n\t\t\t\tscopeName: def.scopeName,\n\t\t\t\tembeddedLanguages: def.embeddedLanguages,\n\t\t\t\ttokenTypes: def.tokenTypes,\n\t\t\t\tinjectTo: def.injectTo,\n\t\t\t\tbalancedBracketSelectors: def.balancedBracketSelectors,\n\t\t\t\tunbalancedBracketSelectors: def.unbalancedBracketSelectors,\n\t\t\t\tsourceExtensionId: def.sourceExtensionId,\n\t\t\t};\n\t\t});\n\t\tthis._grammarFactory = this._loadTMGrammarFactory(grammarDefinitions);\n\t}\n\n\tprivate async _loadTMGrammarFactory(grammarDefinitions: IValidGrammarDefinition[]): Promise<TMGrammarFactory> {\n\t\tconst uri = this._createData.textmateMainUri;\n\t\tconst vscodeTextmate = await import(uri);\n\t\tconst vscodeOniguruma = await import(this._createData.onigurumaMainUri);\n\t\tconst response = await fetch(this._createData.onigurumaWASMUri);\n\n\t\t// Using the response directly only works if the server sets the MIME type 'application/wasm'.\n\t\t// Otherwise, a TypeError is thrown when using the streaming compiler.\n\t\t// We therefore use the non-streaming compiler :(.\n\t\tconst bytes = await response.arrayBuffer();\n\t\tawait vscodeOniguruma.loadWASM(bytes);\n\n\t\tconst onigLib: Promise<IOnigLib> = Promise.resolve({\n\t\t\tcreateOnigScanner: (sources) => vscodeOniguruma.createOnigScanner(sources),\n\t\t\tcreateOnigString: (str) => vscodeOniguruma.createOnigString(str)\n\t\t});\n\n\t\treturn new TMGrammarFactory({\n\t\t\tlogTrace: (msg: string) => {/* console.log(msg) */ },\n\t\t\tlogError: (msg: string, err: any) => console.error(msg, err),\n\t\t\treadFile: (resource: URI) => this._host.readFile(resource)\n\t\t}, grammarDefinitions, vscodeTextmate, onigLib);\n\t}\n\n\t// These methods are called by the renderer\n\n\tpublic acceptNewModel(data: IRawModelData): void {\n\t\tconst uri = URI.revive(data.uri);\n\t\tconst that = this;\n\t\tthis._models.set(data.controllerId, new TextMateWorkerTokenizer(uri, data.lines, data.EOL, data.versionId, {\n\t\t\tasync getOrCreateGrammar(languageId: string, encodedLanguageId: LanguageId): Promise<ICreateGrammarResult | null> {\n\t\t\t\tconst grammarFactory = await that._grammarFactory;\n\t\t\t\tif (!grammarFactory) {\n\t\t\t\t\treturn Promise.resolve(null);\n\t\t\t\t}\n\t\t\t\tif (!that._grammarCache[encodedLanguageId]) {\n\t\t\t\t\tthat._grammarCache[encodedLanguageId] = grammarFactory.createGrammar(languageId, encodedLanguageId);\n\t\t\t\t}\n\t\t\t\treturn that._grammarCache[encodedLanguageId];\n\t\t\t},\n\t\t\tsetTokensAndStates(versionId: number, tokens: Uint8Array, stateDeltas: StateDeltas[]): void {\n\t\t\t\tthat._host.setTokensAndStates(data.controllerId, versionId, tokens, stateDeltas);\n\t\t\t},\n\t\t\treportTokenizationTime(timeMs: number, languageId: string, sourceExtensionId: string | undefined, lineLength: number, isRandomSample: boolean): void {\n\t\t\t\tthat._host.reportTokenizationTime(timeMs, languageId, sourceExtensionId, lineLength, isRandomSample);\n\t\t\t},\n\t\t}, data.languageId, data.encodedLanguageId, data.maxTokenizationLineLength));\n\t}\n\n\tpublic acceptModelChanged(controllerId: number, e: IModelChangedEvent): void {\n\t\tthis._models.get(controllerId)!.onEvents(e);\n\t}\n\n\tpublic retokenize(controllerId: number, startLineNumber: number, endLineNumberExclusive: number): void {\n\t\tthis._models.get(controllerId)!.retokenize(startLineNumber, endLineNumberExclusive);\n\t}\n\n\tpublic acceptModelLanguageChanged(controllerId: number, newLanguageId: string, newEncodedLanguageId: LanguageId): void {\n\t\tthis._models.get(controllerId)!.onLanguageId(newLanguageId, newEncodedLanguageId);\n\t}\n\n\tpublic acceptRemovedModel(controllerId: number): void {\n\t\tconst model = this._models.get(controllerId);\n\t\tif (model) {\n\t\t\tmodel.dispose();\n\t\t\tthis._models.delete(controllerId);\n\t\t}\n\t}\n\n\tpublic async acceptTheme(theme: IRawTheme, colorMap: string[]): Promise<void> {\n\t\tconst grammarFactory = await this._grammarFactory;\n\t\tgrammarFactory?.setTheme(theme, colorMap);\n\t}\n\n\tpublic acceptMaxTokenizationLineLength(controllerId: number, value: number): void {\n\t\tthis._models.get(controllerId)!.acceptMaxTokenizationLineLength(value);\n\t}\n}\n\nexport interface IRawModelData {\n\turi: UriComponents;\n\tversionId: number;\n\tlines: string[];\n\tEOL: string;\n\tlanguageId: string;\n\tencodedLanguageId: LanguageId;\n\tmaxTokenizationLineLength: number;\n\tcontrollerId: number;\n}\n"]}