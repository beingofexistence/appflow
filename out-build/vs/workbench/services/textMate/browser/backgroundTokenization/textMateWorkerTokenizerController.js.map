{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/textMate/browser/backgroundTokenization/textMateWorkerTokenizerController.ts"],"names":[],"mappings":"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","file":"textMateWorkerTokenizerController.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { importAMDNodeModule } from 'vs/amdX';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IObservable, autorun, keepObserved, observableFromEvent } from 'vs/base/common/observable';\nimport { countEOL } from 'vs/editor/common/core/eolCounter';\nimport { LineRange } from 'vs/editor/common/core/lineRange';\nimport { Range } from 'vs/editor/common/core/range';\nimport { IBackgroundTokenizationStore, ILanguageIdCodec } from 'vs/editor/common/languages';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { TokenizationStateStore } from 'vs/editor/common/model/textModelTokens';\nimport { IModelContentChange, IModelContentChangedEvent } from 'vs/editor/common/textModelEvents';\nimport { ContiguousMultilineTokensBuilder } from 'vs/editor/common/tokens/contiguousMultilineTokensBuilder';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ArrayEdit, MonotonousIndexTransformer, SingleArrayEdit } from 'vs/workbench/services/textMate/browser/arrayOperation';\nimport type { StateDeltas, TextMateTokenizationWorker } from 'vs/workbench/services/textMate/browser/backgroundTokenization/worker/textMateTokenizationWorker.worker';\nimport type { applyStateStackDiff, StateStack } from 'vscode-textmate';\n\nexport class TextMateWorkerTokenizerController extends Disposable {\n\tprivate static _id = 0;\n\n\tpublic readonly controllerId = TextMateWorkerTokenizerController._id++;\n\tprivate readonly _pendingChanges: IModelContentChangedEvent[] = [];\n\n\t/**\n\t * These states will eventually equal the worker states.\n\t * _states[i] stores the state at the end of line number i+1.\n\t */\n\tprivate readonly _states = new TokenizationStateStore<StateStack>();\n\n\tprivate readonly _loggingEnabled = observableConfigValue('editor.experimental.asyncTokenizationLogging', false, this._configurationService);\n\n\tprivate _applyStateStackDiffFn?: typeof applyStateStackDiff;\n\tprivate _initialState?: StateStack;\n\n\tconstructor(\n\t\tprivate readonly _model: ITextModel,\n\t\tprivate readonly _worker: TextMateTokenizationWorker,\n\t\tprivate readonly _languageIdCodec: ILanguageIdCodec,\n\t\tprivate readonly _backgroundTokenizationStore: IBackgroundTokenizationStore,\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t\tprivate readonly _maxTokenizationLineLength: IObservable<number>,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(keepObserved(this._loggingEnabled));\n\n\t\tthis._register(this._model.onDidChangeContent((e) => {\n\t\t\tif (this._shouldLog) {\n\t\t\t\tconsole.log('model change', {\n\t\t\t\t\tfileName: this._model.uri.fsPath.split('\\\\').pop(),\n\t\t\t\t\tchanges: changesToString(e.changes),\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis._worker.acceptModelChanged(this.controllerId, e);\n\t\t\tthis._pendingChanges.push(e);\n\t\t}));\n\n\t\tthis._register(this._model.onDidChangeLanguage((e) => {\n\t\t\tconst languageId = this._model.getLanguageId();\n\t\t\tconst encodedLanguageId =\n\t\t\t\tthis._languageIdCodec.encodeLanguageId(languageId);\n\t\t\tthis._worker.acceptModelLanguageChanged(\n\t\t\t\tthis.controllerId,\n\t\t\t\tlanguageId,\n\t\t\t\tencodedLanguageId\n\t\t\t);\n\t\t}));\n\n\t\tconst languageId = this._model.getLanguageId();\n\t\tconst encodedLanguageId = this._languageIdCodec.encodeLanguageId(languageId);\n\t\tthis._worker.acceptNewModel({\n\t\t\turi: this._model.uri,\n\t\t\tversionId: this._model.getVersionId(),\n\t\t\tlines: this._model.getLinesContent(),\n\t\t\tEOL: this._model.getEOL(),\n\t\t\tlanguageId,\n\t\t\tencodedLanguageId,\n\t\t\tmaxTokenizationLineLength: this._maxTokenizationLineLength.get(),\n\t\t\tcontrollerId: this.controllerId,\n\t\t});\n\n\t\tthis._register(autorun(reader => {\n\t\t\t/** @description update maxTokenizationLineLength */\n\t\t\tconst maxTokenizationLineLength = this._maxTokenizationLineLength.read(reader);\n\t\t\tthis._worker.acceptMaxTokenizationLineLength(this.controllerId, maxTokenizationLineLength);\n\t\t}));\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\t\tthis._worker.acceptRemovedModel(this.controllerId);\n\t}\n\n\tpublic requestTokens(startLineNumber: number, endLineNumberExclusive: number): void {\n\t\tthis._worker.retokenize(this.controllerId, startLineNumber, endLineNumberExclusive);\n\t}\n\n\t/**\n\t * This method is called from the worker through the worker host.\n\t */\n\tpublic async setTokensAndStates(controllerId: number, versionId: number, rawTokens: ArrayBuffer, stateDeltas: StateDeltas[]): Promise<void> {\n\t\tif (this.controllerId !== controllerId) {\n\t\t\t// This event is for an outdated controller (the worker didn't receive the delete/create messages yet), ignore the event.\n\t\t\treturn;\n\t\t}\n\n\t\t// _states state, change{k}, ..., change{versionId}, state delta base & rawTokens, change{j}, ..., change{m}, current renderer state\n\t\t//                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                ^^^^^^^^^^^^^^^^^^^^^^^^^\n\t\t//                | past changes                                                   | future states\n\n\t\tlet tokens = ContiguousMultilineTokensBuilder.deserialize(\n\t\t\tnew Uint8Array(rawTokens)\n\t\t);\n\n\t\tif (this._shouldLog) {\n\t\t\tconsole.log('received background tokenization result', {\n\t\t\t\tfileName: this._model.uri.fsPath.split('\\\\').pop(),\n\t\t\t\tupdatedTokenLines: tokens.map((t) => t.getLineRange()).join(' & '),\n\t\t\t\tupdatedStateLines: stateDeltas.map((s) => new LineRange(s.startLineNumber, s.startLineNumber + s.stateDeltas.length).toString()).join(' & '),\n\t\t\t});\n\t\t}\n\n\t\tif (this._shouldLog) {\n\t\t\tconst changes = this._pendingChanges.filter(c => c.versionId <= versionId).map(c => c.changes).map(c => changesToString(c)).join(' then ');\n\t\t\tconsole.log('Applying changes to local states', changes);\n\t\t}\n\n\t\t// Apply past changes to _states\n\t\twhile (\n\t\t\tthis._pendingChanges.length > 0 &&\n\t\t\tthis._pendingChanges[0].versionId <= versionId\n\t\t) {\n\t\t\tconst change = this._pendingChanges.shift()!;\n\t\t\tthis._states.acceptChanges(change.changes);\n\t\t}\n\n\t\tif (this._pendingChanges.length > 0) {\n\t\t\tif (this._shouldLog) {\n\t\t\t\tconst changes = this._pendingChanges.map(c => c.changes).map(c => changesToString(c)).join(' then ');\n\t\t\t\tconsole.log('Considering non-processed changes', changes);\n\t\t\t}\n\n\t\t\tconst curToFutureTransformerTokens = MonotonousIndexTransformer.fromMany(\n\t\t\t\tthis._pendingChanges.map((c) => fullLineArrayEditFromModelContentChange(c.changes))\n\t\t\t);\n\n\t\t\t// Filter tokens in lines that got changed in the future to prevent flickering\n\t\t\t// These tokens are recomputed anyway.\n\t\t\tconst b = new ContiguousMultilineTokensBuilder();\n\t\t\tfor (const t of tokens) {\n\t\t\t\tfor (let i = t.startLineNumber; i <= t.endLineNumber; i++) {\n\t\t\t\t\tconst result = curToFutureTransformerTokens.transform(i - 1);\n\t\t\t\t\t// If result is undefined, the current line got touched by an edit.\n\t\t\t\t\t// The webworker will send us new tokens for all the new/touched lines after it received the edits.\n\t\t\t\t\tif (result !== undefined) {\n\t\t\t\t\t\tb.add(i, t.getLineTokens(i) as Uint32Array);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\ttokens = b.finalize();\n\n\t\t\t// Apply future changes to tokens\n\t\t\tfor (const change of this._pendingChanges) {\n\t\t\t\tfor (const innerChanges of change.changes) {\n\t\t\t\t\tfor (let j = 0; j < tokens.length; j++) {\n\t\t\t\t\t\ttokens[j].applyEdit(innerChanges.range, innerChanges.text);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst curToFutureTransformerStates = MonotonousIndexTransformer.fromMany(\n\t\t\tthis._pendingChanges.map((c) => fullLineArrayEditFromModelContentChange(c.changes))\n\t\t);\n\n\t\tif (!this._applyStateStackDiffFn || !this._initialState) {\n\t\t\tconst { applyStateStackDiff, INITIAL } = await importAMDNodeModule<typeof import('vscode-textmate')>('vscode-textmate', 'release/main.js');\n\t\t\tthis._applyStateStackDiffFn = applyStateStackDiff;\n\t\t\tthis._initialState = INITIAL;\n\t\t}\n\n\n\t\t// Apply state deltas to _states and _backgroundTokenizationStore\n\t\tfor (const d of stateDeltas) {\n\t\t\tlet prevState = d.startLineNumber <= 1 ? this._initialState : this._states.getEndState(d.startLineNumber - 1);\n\t\t\tfor (let i = 0; i < d.stateDeltas.length; i++) {\n\t\t\t\tconst delta = d.stateDeltas[i];\n\t\t\t\tlet state: StateStack;\n\t\t\t\tif (delta) {\n\t\t\t\t\tstate = this._applyStateStackDiffFn(prevState, delta)!;\n\t\t\t\t\tthis._states.setEndState(d.startLineNumber + i, state);\n\t\t\t\t} else {\n\t\t\t\t\tstate = this._states.getEndState(d.startLineNumber + i)!;\n\t\t\t\t}\n\n\t\t\t\tconst offset = curToFutureTransformerStates.transform(d.startLineNumber + i - 1);\n\t\t\t\tif (offset !== undefined) {\n\t\t\t\t\t// Only set the state if there is no future change in this line,\n\t\t\t\t\t// as this might make consumers believe that the state/tokens are accurate\n\t\t\t\t\tthis._backgroundTokenizationStore.setEndState(offset + 1, state);\n\t\t\t\t}\n\n\t\t\t\tif (d.startLineNumber + i >= this._model.getLineCount() - 1) {\n\t\t\t\t\tthis._backgroundTokenizationStore.backgroundTokenizationFinished();\n\t\t\t\t}\n\n\t\t\t\tprevState = state;\n\t\t\t}\n\t\t}\n\t\t// First set states, then tokens, so that events fired from set tokens don't read invalid states\n\t\tthis._backgroundTokenizationStore.setTokens(tokens);\n\t}\n\n\tprivate get _shouldLog() { return this._loggingEnabled.get(); }\n\n}\n\nfunction fullLineArrayEditFromModelContentChange(c: IModelContentChange[]): ArrayEdit {\n\treturn new ArrayEdit(\n\t\tc.map(\n\t\t\t(c) =>\n\t\t\t\tnew SingleArrayEdit(\n\t\t\t\t\tc.range.startLineNumber - 1,\n\t\t\t\t\t// Expand the edit range to include the entire line\n\t\t\t\t\tc.range.endLineNumber - c.range.startLineNumber + 1,\n\t\t\t\t\tcountEOL(c.text)[0] + 1\n\t\t\t\t)\n\t\t)\n\t);\n}\n\nfunction changesToString(changes: IModelContentChange[]): string {\n\treturn changes.map(c => Range.lift(c.range).toString() + ' => ' + c.text).join(' & ');\n}\n\nfunction observableConfigValue<T>(key: string, defaultValue: T, configurationService: IConfigurationService): IObservable<T> {\n\treturn observableFromEvent(\n\t\t(handleChange) => configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration(key)) {\n\t\t\t\thandleChange(e);\n\t\t\t}\n\t\t}),\n\t\t() => configurationService.getValue<T>(key) ?? defaultValue,\n\t);\n}\n"]}