{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/textMate/browser/tokenizationSupport/tokenizationSupportWithLineLimit.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAShG,MAAa,IAAiC,SAAQ,eAAG;QACxD,IAAI,yCAAyC;YAC5C,OAAO,IAAI,CAAC,CAAC,CAAO,yCAAyC,CAAC;QAC/D,CAAC;QAED,YACkB,CAA8B,EAC9B,CAA6B,EAC7B,CAA+C;YAEhE,KAAK,EAAE,CAAC;YAJS,MAAC,GAAD,CAAC,CAA6B;YAC9B,MAAC,GAAD,CAAC,CAA4B;YAC7B,MAAC,GAAD,CAAC,CAA8C;YAIhE,IAAI,CAAC,CAAC,CAAS,IAAA,yBAAY,EAAC,IAAI,CAAC,CAAC,CAA0B,CAAC,CAAC;QAC/D,CAAC;QAED,eAAe;YACd,OAAO,IAAI,CAAC,CAAC,CAAO,eAAe,EAAE,CAAC;QACvC,CAAC;QAED,QAAQ,CAAC,IAAY,EAAE,MAAe,EAAE,KAAa;YACpD,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;QACnC,CAAC;QAED,eAAe,CAAC,IAAY,EAAE,MAAe,EAAE,KAAa;YAC3D,mDAAmD;YACnD,IAAI,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,CAAC,CAA0B,GAAG,EAAE,EAAE;gBACzD,OAAO,IAAA,kBAAG,EAAiB,IAAI,CAAC,CAAC,EAAmB,KAAK,CAAC,CAAC;aAC3D;YAED,OAAO,IAAI,CAAC,CAAC,CAAO,eAAe,CAAC,IAAI,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;QAC1D,CAAC;QAED,yBAAyB,CAAC,SAAqB,EAAE,KAAmC;YACnF,IAAI,IAAI,CAAC,CAAC,CAAO,yBAAyB,EAAE;gBAC3C,OAAO,IAAI,CAAC,CAAC,CAAO,yBAAyB,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;aAChE;iBAAM;gBACN,OAAO,SAAS,CAAC;aACjB;QACF,CAAC;KACD;IAvCD,oBAuCC","file":"tokenizationSupportWithLineLimit.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { LanguageId } from 'vs/editor/common/encodedTokenAttributes';\nimport { EncodedTokenizationResult, IBackgroundTokenizationStore, IBackgroundTokenizer, IState, ITokenizationSupport, TokenizationResult } from 'vs/editor/common/languages';\nimport { nullTokenizeEncoded } from 'vs/editor/common/languages/nullTokenize';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IObservable, keepObserved } from 'vs/base/common/observable';\n\nexport class TokenizationSupportWithLineLimit extends Disposable implements ITokenizationSupport {\n\tget backgroundTokenizerShouldOnlyVerifyTokens(): boolean | undefined {\n\t\treturn this._actual.backgroundTokenizerShouldOnlyVerifyTokens;\n\t}\n\n\tconstructor(\n\t\tprivate readonly _encodedLanguageId: LanguageId,\n\t\tprivate readonly _actual: ITokenizationSupport,\n\t\tprivate readonly _maxTokenizationLineLength: IObservable<number>,\n\t) {\n\t\tsuper();\n\n\t\tthis._register(keepObserved(this._maxTokenizationLineLength));\n\t}\n\n\tgetInitialState(): IState {\n\t\treturn this._actual.getInitialState();\n\t}\n\n\ttokenize(line: string, hasEOL: boolean, state: IState): TokenizationResult {\n\t\tthrow new Error('Not supported!');\n\t}\n\n\ttokenizeEncoded(line: string, hasEOL: boolean, state: IState): EncodedTokenizationResult {\n\t\t// Do not attempt to tokenize if a line is too long\n\t\tif (line.length >= this._maxTokenizationLineLength.get()) {\n\t\t\treturn nullTokenizeEncoded(this._encodedLanguageId, state);\n\t\t}\n\n\t\treturn this._actual.tokenizeEncoded(line, hasEOL, state);\n\t}\n\n\tcreateBackgroundTokenizer(textModel: ITextModel, store: IBackgroundTokenizationStore): IBackgroundTokenizer | undefined {\n\t\tif (this._actual.createBackgroundTokenizer) {\n\t\t\treturn this._actual.createBackgroundTokenizer(textModel, store);\n\t\t} else {\n\t\t\treturn undefined;\n\t\t}\n\t}\n}\n"]}