{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/textMate/browser/tokenizationSupport/textMateTokenizationSupport.ts"],"names":[],"mappings":"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","file":"textMateTokenizationSupport.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { StopWatch } from 'vs/base/common/stopwatch';\nimport { LanguageId, TokenMetadata } from 'vs/editor/common/encodedTokenAttributes';\nimport { EncodedTokenizationResult, IBackgroundTokenizationStore, IBackgroundTokenizer, IState, ITokenizationSupport, TokenizationResult } from 'vs/editor/common/languages';\nimport { ITextModel } from 'vs/editor/common/model';\nimport type { IGrammar, StateStack } from 'vscode-textmate';\n\nexport class TextMateTokenizationSupport extends Disposable implements ITokenizationSupport {\n\tprivate readonly _seenLanguages: boolean[] = [];\n\tprivate readonly _onDidEncounterLanguage: Emitter<LanguageId> = this._register(new Emitter<LanguageId>());\n\tpublic readonly onDidEncounterLanguage: Event<LanguageId> = this._onDidEncounterLanguage.event;\n\n\tconstructor(\n\t\tprivate readonly _grammar: IGrammar,\n\t\tprivate readonly _initialState: StateStack,\n\t\tprivate readonly _containsEmbeddedLanguages: boolean,\n\t\tprivate readonly _createBackgroundTokenizer: ((textModel: ITextModel, tokenStore: IBackgroundTokenizationStore) => IBackgroundTokenizer | undefined) | undefined,\n\t\tprivate readonly _backgroundTokenizerShouldOnlyVerifyTokens: () => boolean,\n\t\tprivate readonly _reportTokenizationTime: (timeMs: number, lineLength: number, isRandomSample: boolean) => void,\n\t\tprivate readonly _reportSlowTokenization: boolean,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic get backgroundTokenizerShouldOnlyVerifyTokens(): boolean | undefined {\n\t\treturn this._backgroundTokenizerShouldOnlyVerifyTokens();\n\t}\n\n\tpublic getInitialState(): IState {\n\t\treturn this._initialState;\n\t}\n\n\tpublic tokenize(line: string, hasEOL: boolean, state: IState): TokenizationResult {\n\t\tthrow new Error('Not supported!');\n\t}\n\n\tpublic createBackgroundTokenizer(textModel: ITextModel, store: IBackgroundTokenizationStore): IBackgroundTokenizer | undefined {\n\t\tif (this._createBackgroundTokenizer) {\n\t\t\treturn this._createBackgroundTokenizer(textModel, store);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic tokenizeEncoded(line: string, hasEOL: boolean, state: StateStack): EncodedTokenizationResult {\n\t\tconst isRandomSample = Math.random() * 10_000 < 1;\n\t\tconst shouldMeasure = this._reportSlowTokenization || isRandomSample;\n\t\tconst sw = shouldMeasure ? new StopWatch(true) : undefined;\n\t\tconst textMateResult = this._grammar.tokenizeLine2(line, state, 500);\n\t\tif (shouldMeasure) {\n\t\t\tconst timeMS = sw!.elapsed();\n\t\t\tif (isRandomSample || timeMS > 32) {\n\t\t\t\tthis._reportTokenizationTime!(timeMS, line.length, isRandomSample);\n\t\t\t}\n\t\t}\n\n\t\tif (textMateResult.stoppedEarly) {\n\t\t\tconsole.warn(`Time limit reached when tokenizing line: ${line.substring(0, 100)}`);\n\t\t\t// return the state at the beginning of the line\n\t\t\treturn new EncodedTokenizationResult(textMateResult.tokens, state);\n\t\t}\n\n\t\tif (this._containsEmbeddedLanguages) {\n\t\t\tconst seenLanguages = this._seenLanguages;\n\t\t\tconst tokens = textMateResult.tokens;\n\n\t\t\t// Must check if any of the embedded languages was hit\n\t\t\tfor (let i = 0, len = (tokens.length >>> 1); i < len; i++) {\n\t\t\t\tconst metadata = tokens[(i << 1) + 1];\n\t\t\t\tconst languageId = TokenMetadata.getLanguageId(metadata);\n\n\t\t\t\tif (!seenLanguages[languageId]) {\n\t\t\t\t\tseenLanguages[languageId] = true;\n\t\t\t\t\tthis._onDidEncounterLanguage.fire(languageId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet endState: StateStack;\n\t\t// try to save an object if possible\n\t\tif (state.equals(textMateResult.ruleStack)) {\n\t\t\tendState = state;\n\t\t} else {\n\t\t\tendState = textMateResult.ruleStack;\n\t\t}\n\n\t\treturn new EncodedTokenizationResult(textMateResult.tokens, endState);\n\t}\n}\n"]}