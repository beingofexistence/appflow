{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/preferences/test/browser/preferencesService.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAgBhG,KAAK,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAEhC,IAAI,WAAgB,CAAa;QACjC,IAAI,wBAAmD,CAAC;QACxD,IAAI,UAAgB,CAAe;QACnC,IAAI,aAAiC,CAAC;QAEtC,KAAK,CAAC,GAAG,EAAE;YACV,WAAW,GAAG,IAAI,eAAG,EAAc,CAAC;YACpC,aAAa,GAAG,IAAI,kBAAkB,EAAE,CAAC;YACzC,wBAAwB,GAAG,IAAA,4BAAI,EAA0B;gBACxD,aAAa,EAAE,GAAG,EAAE,CAAC,aAAa;aAClC,EAAE,WAAW,CAAC,CAAC;YAEhB,wBAAwB,CAAC,IAAI,CAAC,kBAAI,EAAiB,mBAAI,CAAmB,CAAC;YAC3E,wBAAwB,CAAC,IAAI,CAAC,wBAAG,EAAkB,4BAAI,CAAmB,CAAC;YAC3E,wBAAwB,CAAC,IAAI,CAAC,cAAG,EAAc,yBAAI,CAAe,CAAC;YAEnE,yHAAyH;YACzH,MAAM,UAAU,GAAG,IAAI,uBAAG,EAAgB,CAAC;YAC3C,UAAU,CAAC,GAAG,CAAC,iBAAG,EAAkB,IAAI,iBAAG,CAAY,yBAAI,CAAe,CAAC,CAAC;YAC5E,MAAM,oBAAoB,GAAG,wBAAwB,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;YAC9E,UAAU,GAAG,oBAAoB,CAAC,cAAc,CAAC,yBAAI,CAAe,CAAC;QACtE,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,GAAG,EAAE;YACb,WAAW,CAAC,OAAO,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+CAA+C,EAAE,KAAK,IAAI,EAAE;YAChE,UAAU,CAAC,YAAY,CAAC,EAAE,UAAU,EAAE,KAAK,EAAE,KAAK,EAAE,YAAY,EAAE,CAAC,CAAC;YACpE,MAAM,OAAO,GAAG,aAAa,CAAC,qBAA+C,CAAC;YAC9E,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;YAC9C,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,EAAE,YAAG,CAAwB,EAAE,CAAC,CAAC;YACpE,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,MAAM,kBAAmB,SAAQ,4BAAI;QAG3B,KAAK,CAAC,UAAU,CAAC,MAAW,EAAE,cAAoB;YAC1D,IAAI,CAAC,qBAAqB,GAAG,cAAc,CAAC;YAC5C,OAAO,SAAS,CAAC;QAClB,CAAC;KACD","file":"preferencesService.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { TestCommandService } from 'vs/editor/test/browser/editorTestServices';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { DEFAULT_EDITOR_ASSOCIATION } from 'vs/workbench/common/editor';\nimport { IJSONEditingService } from 'vs/workbench/services/configuration/common/jsonEditing';\nimport { TestJSONEditingService } from 'vs/workbench/services/configuration/test/common/testServices';\nimport { PreferencesService } from 'vs/workbench/services/preferences/browser/preferencesService';\nimport { IPreferencesService, ISettingsEditorOptions } from 'vs/workbench/services/preferences/common/preferences';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { TestRemoteAgentService, ITestInstantiationService, TestEditorService, workbenchInstantiationService } from 'vs/workbench/test/browser/workbenchTestServices';\n\nsuite('PreferencesService', () => {\n\n\tlet disposables: DisposableStore;\n\tlet testInstantiationService: ITestInstantiationService;\n\tlet testObject: PreferencesService;\n\tlet editorService: TestEditorService2;\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\teditorService = new TestEditorService2();\n\t\ttestInstantiationService = workbenchInstantiationService({\n\t\t\teditorService: () => editorService\n\t\t}, disposables);\n\n\t\ttestInstantiationService.stub(IJSONEditingService, TestJSONEditingService);\n\t\ttestInstantiationService.stub(IRemoteAgentService, TestRemoteAgentService);\n\t\ttestInstantiationService.stub(ICommandService, TestCommandService);\n\n\t\t// PreferencesService creates a PreferencesEditorInput which depends on IPreferencesService, add the real one, not a stub\n\t\tconst collection = new ServiceCollection();\n\t\tcollection.set(IPreferencesService, new SyncDescriptor(PreferencesService));\n\t\tconst instantiationService = testInstantiationService.createChild(collection);\n\t\ttestObject = instantiationService.createInstance(PreferencesService);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\ttest('options are preserved when calling openEditor', async () => {\n\t\ttestObject.openSettings({ jsonEditor: false, query: 'test query' });\n\t\tconst options = editorService.lastOpenEditorOptions as ISettingsEditorOptions;\n\t\tassert.strictEqual(options.focusSearch, true);\n\t\tassert.strictEqual(options.override, DEFAULT_EDITOR_ASSOCIATION.id);\n\t\tassert.strictEqual(options.query, 'test query');\n\t});\n});\n\nclass TestEditorService2 extends TestEditorService {\n\tlastOpenEditorOptions: any;\n\n\toverride async openEditor(editor: any, optionsOrGroup?: any): Promise<any | undefined> {\n\t\tthis.lastOpenEditorOptions = optionsOrGroup;\n\t\treturn undefined;\n\t}\n}\n"]}