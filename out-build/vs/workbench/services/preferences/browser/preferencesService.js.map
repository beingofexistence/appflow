{"version":3,"sources":["vs/workbench/services/preferences/browser/preferencesService.ts"],"names":[],"mappings":"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","file":"preferencesService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getErrorMessage } from 'vs/base/common/errors';\nimport { Emitter } from 'vs/base/common/event';\nimport { parse } from 'vs/base/common/json';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport * as network from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { CoreEditingCommands } from 'vs/editor/browser/coreCommands';\nimport { getCodeEditor, ICodeEditor } from 'vs/editor/browser/editorBrowser';\nimport { IPosition } from 'vs/editor/common/core/position';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { ILanguageService } from 'vs/editor/common/languages/language';\nimport { ITextModelService } from 'vs/editor/common/services/resolverService';\nimport * as nls from 'vs/nls';\nimport { ConfigurationTarget, IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { Extensions, getDefaultValue, IConfigurationRegistry, OVERRIDE_PROPERTY_REGEX } from 'vs/platform/configuration/common/configurationRegistry';\nimport { FileOperationError, FileOperationResult } from 'vs/platform/files/common/files';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { DEFAULT_EDITOR_ASSOCIATION, IEditorPane } from 'vs/workbench/common/editor';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { SideBySideEditorInput } from 'vs/workbench/common/editor/sideBySideEditorInput';\nimport { TextResourceEditorInput } from 'vs/workbench/common/editor/textResourceEditorInput';\nimport { IJSONEditingService } from 'vs/workbench/services/configuration/common/jsonEditing';\nimport { GroupDirection, IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IEditorService, SIDE_GROUP, SIDE_GROUP_TYPE } from 'vs/workbench/services/editor/common/editorService';\nimport { KeybindingsEditorInput } from 'vs/workbench/services/preferences/browser/keybindingsEditorInput';\nimport { DEFAULT_SETTINGS_EDITOR_SETTING, FOLDER_SETTINGS_PATH, IKeybindingsEditorOptions, IKeybindingsEditorPane, IOpenSettingsOptions, IPreferencesEditorModel, IPreferencesService, ISetting, ISettingsEditorOptions, USE_SPLIT_JSON_SETTING, validateSettingsEditorOptions } from 'vs/workbench/services/preferences/common/preferences';\nimport { SettingsEditor2Input } from 'vs/workbench/services/preferences/common/preferencesEditorInput';\nimport { defaultKeybindingsContents, DefaultKeybindingsEditorModel, DefaultRawSettingsEditorModel, DefaultSettings, DefaultSettingsEditorModel, Settings2EditorModel, SettingsEditorModel, WorkspaceConfigurationEditorModel } from 'vs/workbench/services/preferences/common/preferencesModels';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { ITextEditorService } from 'vs/workbench/services/textfile/common/textEditorService';\nimport { ITextFileService } from 'vs/workbench/services/textfile/common/textfiles';\nimport { isObject } from 'vs/base/common/types';\nimport { SuggestController } from 'vs/editor/contrib/suggest/browser/suggestController';\nimport { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\nimport { IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\n\nconst emptyEditableSettingsContent = '{\\n}';\n\nexport class PreferencesService extends Disposable implements IPreferencesService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDispose = this._register(new Emitter<void>());\n\n\tprivate _defaultUserSettingsContentModel: DefaultSettings | undefined;\n\tprivate _defaultWorkspaceSettingsContentModel: DefaultSettings | undefined;\n\tprivate _defaultFolderSettingsContentModel: DefaultSettings | undefined;\n\n\tconstructor(\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IEditorGroupsService private readonly editorGroupService: IEditorGroupsService,\n\t\t@ITextFileService private readonly textFileService: ITextFileService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IUserDataProfileService private readonly userDataProfileService: IUserDataProfileService,\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@ITextModelService private readonly textModelResolverService: ITextModelService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IJSONEditingService private readonly jsonEditingService: IJSONEditingService,\n\t\t@ILanguageService private readonly languageService: ILanguageService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@IRemoteAgentService private readonly remoteAgentService: IRemoteAgentService,\n\t\t@ITextEditorService private readonly textEditorService: ITextEditorService\n\t) {\n\t\tsuper();\n\t\t// The default keybindings.json updates based on keyboard layouts, so here we make sure\n\t\t// if a model has been given out we update it accordingly.\n\t\tthis._register(keybindingService.onDidUpdateKeybindings(() => {\n\t\t\tconst model = modelService.getModel(this.defaultKeybindingsResource);\n\t\t\tif (!model) {\n\t\t\t\t// model has not been given out => nothing to do\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tmodelService.updateModel(model, defaultKeybindingsContents(keybindingService));\n\t\t}));\n\t}\n\n\treadonly defaultKeybindingsResource = URI.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: '/keybindings.json' });\n\tprivate readonly defaultSettingsRawResource = URI.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: '/defaultSettings.json' });\n\n\tget userSettingsResource(): URI {\n\t\treturn this.userDataProfileService.currentProfile.settingsResource;\n\t}\n\n\tget workspaceSettingsResource(): URI | null {\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.EMPTY) {\n\t\t\treturn null;\n\t\t}\n\t\tconst workspace = this.contextService.getWorkspace();\n\t\treturn workspace.configuration || workspace.folders[0].toResource(FOLDER_SETTINGS_PATH);\n\t}\n\n\tget settingsEditor2Input(): SettingsEditor2Input {\n\t\treturn this.instantiationService.createInstance(SettingsEditor2Input);\n\t}\n\n\tgetFolderSettingsResource(resource: URI): URI | null {\n\t\tconst folder = this.contextService.getWorkspaceFolder(resource);\n\t\treturn folder ? folder.toResource(FOLDER_SETTINGS_PATH) : null;\n\t}\n\n\tresolveModel(uri: URI): ITextModel | null {\n\t\tif (this.isDefaultSettingsResource(uri)) {\n\t\t\t// We opened a split json editor in this case,\n\t\t\t// and this half shows the default settings.\n\t\t\tconst target = this.getConfigurationTargetFromDefaultSettingsResource(uri);\n\t\t\tconst languageSelection = this.languageService.createById('jsonc');\n\t\t\tconst model = this._register(this.modelService.createModel('', languageSelection, uri));\n\n\t\t\tlet defaultSettings: DefaultSettings | undefined;\n\t\t\tthis.configurationService.onDidChangeConfiguration(e => {\n\t\t\t\tif (e.source === ConfigurationTarget.DEFAULT) {\n\t\t\t\t\tconst model = this.modelService.getModel(uri);\n\t\t\t\t\tif (!model) {\n\t\t\t\t\t\t// model has not been given out => nothing to do\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tdefaultSettings = this.getDefaultSettings(target);\n\t\t\t\t\tthis.modelService.updateModel(model, defaultSettings.getContentWithoutMostCommonlyUsed(true));\n\t\t\t\t\tdefaultSettings._onDidChange.fire();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Check if Default settings is already created and updated in above promise\n\t\t\tif (!defaultSettings) {\n\t\t\t\tdefaultSettings = this.getDefaultSettings(target);\n\t\t\t\tthis.modelService.updateModel(model, defaultSettings.getContentWithoutMostCommonlyUsed(true));\n\t\t\t}\n\n\t\t\treturn model;\n\t\t}\n\n\t\tif (this.defaultSettingsRawResource.toString() === uri.toString()) {\n\t\t\tconst defaultRawSettingsEditorModel = this.instantiationService.createInstance(DefaultRawSettingsEditorModel, this.getDefaultSettings(ConfigurationTarget.USER_LOCAL));\n\t\t\tconst languageSelection = this.languageService.createById('jsonc');\n\t\t\tconst model = this._register(this.modelService.createModel(defaultRawSettingsEditorModel.content, languageSelection, uri));\n\t\t\treturn model;\n\t\t}\n\n\t\tif (this.defaultKeybindingsResource.toString() === uri.toString()) {\n\t\t\tconst defaultKeybindingsEditorModel = this.instantiationService.createInstance(DefaultKeybindingsEditorModel, uri);\n\t\t\tconst languageSelection = this.languageService.createById('jsonc');\n\t\t\tconst model = this._register(this.modelService.createModel(defaultKeybindingsEditorModel.content, languageSelection, uri));\n\t\t\treturn model;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\tpublic async createPreferencesEditorModel(uri: URI): Promise<IPreferencesEditorModel<ISetting> | null> {\n\t\tif (this.isDefaultSettingsResource(uri)) {\n\t\t\treturn this.createDefaultSettingsEditorModel(uri);\n\t\t}\n\n\t\tif (this.userSettingsResource.toString() === uri.toString() || this.userDataProfilesService.defaultProfile.settingsResource.toString() === uri.toString()) {\n\t\t\treturn this.createEditableSettingsEditorModel(ConfigurationTarget.USER_LOCAL, uri);\n\t\t}\n\n\t\tconst workspaceSettingsUri = await this.getEditableSettingsURI(ConfigurationTarget.WORKSPACE);\n\t\tif (workspaceSettingsUri && workspaceSettingsUri.toString() === uri.toString()) {\n\t\t\treturn this.createEditableSettingsEditorModel(ConfigurationTarget.WORKSPACE, workspaceSettingsUri);\n\t\t}\n\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE) {\n\t\t\tconst settingsUri = await this.getEditableSettingsURI(ConfigurationTarget.WORKSPACE_FOLDER, uri);\n\t\t\tif (settingsUri && settingsUri.toString() === uri.toString()) {\n\t\t\t\treturn this.createEditableSettingsEditorModel(ConfigurationTarget.WORKSPACE_FOLDER, uri);\n\t\t\t}\n\t\t}\n\n\t\tconst remoteEnvironment = await this.remoteAgentService.getEnvironment();\n\t\tconst remoteSettingsUri = remoteEnvironment ? remoteEnvironment.settingsPath : null;\n\t\tif (remoteSettingsUri && remoteSettingsUri.toString() === uri.toString()) {\n\t\t\treturn this.createEditableSettingsEditorModel(ConfigurationTarget.USER_REMOTE, uri);\n\t\t}\n\n\t\treturn null;\n\t}\n\n\topenRawDefaultSettings(): Promise<IEditorPane | undefined> {\n\t\treturn this.editorService.openEditor({ resource: this.defaultSettingsRawResource });\n\t}\n\n\topenRawUserSettings(): Promise<IEditorPane | undefined> {\n\t\treturn this.editorService.openEditor({ resource: this.userSettingsResource });\n\t}\n\n\tprivate shouldOpenJsonByDefault(): boolean {\n\t\treturn this.configurationService.getValue('workbench.settings.editor') === 'json';\n\t}\n\n\topenSettings(options: IOpenSettingsOptions = {}): Promise<IEditorPane | undefined> {\n\t\toptions = {\n\t\t\t...options,\n\t\t\ttarget: ConfigurationTarget.USER_LOCAL,\n\t\t};\n\t\tif (options.query) {\n\t\t\toptions.jsonEditor = false;\n\t\t}\n\n\t\treturn this.open(this.userSettingsResource, options);\n\t}\n\n\topenLanguageSpecificSettings(languageId: string, options: IOpenSettingsOptions = {}): Promise<IEditorPane | undefined> {\n\t\tif (this.shouldOpenJsonByDefault()) {\n\t\t\toptions.query = undefined;\n\t\t\toptions.revealSetting = { key: `[${languageId}]`, edit: true };\n\t\t} else {\n\t\t\toptions.query = `@lang:${languageId}${options.query ? ` ${options.query}` : ''}`;\n\t\t}\n\t\toptions.target = options.target ?? ConfigurationTarget.USER_LOCAL;\n\n\t\treturn this.open(this.userSettingsResource, options);\n\t}\n\n\tprivate open(settingsResource: URI, options: IOpenSettingsOptions): Promise<IEditorPane | undefined> {\n\t\toptions = {\n\t\t\t...options,\n\t\t\tjsonEditor: options.jsonEditor ?? this.shouldOpenJsonByDefault()\n\t\t};\n\n\t\treturn options.jsonEditor ?\n\t\t\tthis.openSettingsJson(settingsResource, options) :\n\t\t\tthis.openSettings2(options);\n\t}\n\n\tprivate async openSettings2(options: IOpenSettingsOptions): Promise<IEditorPane> {\n\t\tconst input = this.settingsEditor2Input;\n\t\toptions = {\n\t\t\t...options,\n\t\t\tfocusSearch: true\n\t\t};\n\t\tawait this.editorService.openEditor(input, validateSettingsEditorOptions(options), options.openToSide ? SIDE_GROUP : undefined);\n\t\treturn this.editorGroupService.activeGroup.activeEditorPane!;\n\t}\n\n\topenApplicationSettings(options: IOpenSettingsOptions = {}): Promise<IEditorPane | undefined> {\n\t\toptions = {\n\t\t\t...options,\n\t\t\ttarget: ConfigurationTarget.USER_LOCAL,\n\t\t};\n\t\treturn this.open(this.userDataProfilesService.defaultProfile.settingsResource, options);\n\t}\n\n\topenUserSettings(options: IOpenSettingsOptions = {}): Promise<IEditorPane | undefined> {\n\t\toptions = {\n\t\t\t...options,\n\t\t\ttarget: ConfigurationTarget.USER_LOCAL,\n\t\t};\n\t\treturn this.open(this.userSettingsResource, options);\n\t}\n\n\tasync openRemoteSettings(options: IOpenSettingsOptions = {}): Promise<IEditorPane | undefined> {\n\t\tconst environment = await this.remoteAgentService.getEnvironment();\n\t\tif (environment) {\n\t\t\toptions = {\n\t\t\t\t...options,\n\t\t\t\ttarget: ConfigurationTarget.USER_REMOTE,\n\t\t\t};\n\n\t\t\tthis.open(environment.settingsPath, options);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\topenWorkspaceSettings(options: IOpenSettingsOptions = {}): Promise<IEditorPane | undefined> {\n\t\tif (!this.workspaceSettingsResource) {\n\t\t\tthis.notificationService.info(nls.localize('openFolderFirst', \"Open a folder or workspace first to create workspace or folder settings.\"));\n\t\t\treturn Promise.reject(null);\n\t\t}\n\n\t\toptions = {\n\t\t\t...options,\n\t\t\ttarget: ConfigurationTarget.WORKSPACE\n\t\t};\n\t\treturn this.open(this.workspaceSettingsResource, options);\n\t}\n\n\tasync openFolderSettings(options: IOpenSettingsOptions = {}): Promise<IEditorPane | undefined> {\n\t\toptions = {\n\t\t\t...options,\n\t\t\ttarget: ConfigurationTarget.WORKSPACE_FOLDER\n\t\t};\n\n\t\tif (!options.folderUri) {\n\t\t\tthrow new Error(`Missing folder URI`);\n\t\t}\n\n\t\tconst folderSettingsUri = await this.getEditableSettingsURI(ConfigurationTarget.WORKSPACE_FOLDER, options.folderUri);\n\t\tif (!folderSettingsUri) {\n\t\t\tthrow new Error(`Invalid folder URI - ${options.folderUri.toString()}`);\n\t\t}\n\n\t\treturn this.open(folderSettingsUri, options);\n\t}\n\n\tasync openGlobalKeybindingSettings(textual: boolean, options?: IKeybindingsEditorOptions): Promise<void> {\n\t\toptions = { pinned: true, revealIfOpened: true, ...options };\n\t\tif (textual) {\n\t\t\tconst emptyContents = '// ' + nls.localize('emptyKeybindingsHeader', \"Place your key bindings in this file to override the defaults\") + '\\n[\\n]';\n\t\t\tconst editableKeybindings = this.userDataProfileService.currentProfile.keybindingsResource;\n\t\t\tconst openDefaultKeybindings = !!this.configurationService.getValue('workbench.settings.openDefaultKeybindings');\n\n\t\t\t// Create as needed and open in editor\n\t\t\tawait this.createIfNotExists(editableKeybindings, emptyContents);\n\t\t\tif (openDefaultKeybindings) {\n\t\t\t\tconst activeEditorGroup = this.editorGroupService.activeGroup;\n\t\t\t\tconst sideEditorGroup = this.editorGroupService.addGroup(activeEditorGroup.id, GroupDirection.RIGHT);\n\t\t\t\tawait Promise.all([\n\t\t\t\t\tthis.editorService.openEditor({ resource: this.defaultKeybindingsResource, options: { pinned: true, preserveFocus: true, revealIfOpened: true, override: DEFAULT_EDITOR_ASSOCIATION.id }, label: nls.localize('defaultKeybindings', \"Default Keybindings\"), description: '' }),\n\t\t\t\t\tthis.editorService.openEditor({ resource: editableKeybindings, options }, sideEditorGroup.id)\n\t\t\t\t]);\n\t\t\t} else {\n\t\t\t\tawait this.editorService.openEditor({ resource: editableKeybindings, options });\n\t\t\t}\n\n\t\t} else {\n\t\t\tconst editor = (await this.editorService.openEditor(this.instantiationService.createInstance(KeybindingsEditorInput), { ...options })) as IKeybindingsEditorPane;\n\t\t\tif (options.query) {\n\t\t\t\teditor.search(options.query);\n\t\t\t}\n\t\t}\n\n\t}\n\n\topenDefaultKeybindingsFile(): Promise<IEditorPane | undefined> {\n\t\treturn this.editorService.openEditor({ resource: this.defaultKeybindingsResource, label: nls.localize('defaultKeybindings', \"Default Keybindings\") });\n\t}\n\n\tprivate async openSettingsJson(resource: URI, options: IOpenSettingsOptions): Promise<IEditorPane | undefined> {\n\t\tconst group = options?.openToSide ? SIDE_GROUP : undefined;\n\t\tconst editor = await this.doOpenSettingsJson(resource, options, group);\n\t\tif (editor && options?.revealSetting) {\n\t\t\tawait this.revealSetting(options.revealSetting.key, !!options.revealSetting.edit, editor, resource);\n\t\t}\n\t\treturn editor;\n\t}\n\n\tprivate async doOpenSettingsJson(resource: URI, options: ISettingsEditorOptions, group?: SIDE_GROUP_TYPE): Promise<IEditorPane | undefined> {\n\t\tconst openSplitJSON = !!this.configurationService.getValue(USE_SPLIT_JSON_SETTING);\n\t\tconst openDefaultSettings = !!this.configurationService.getValue(DEFAULT_SETTINGS_EDITOR_SETTING);\n\t\tif (openSplitJSON || openDefaultSettings) {\n\t\t\treturn this.doOpenSplitJSON(resource, options, group);\n\t\t}\n\n\t\tconst configurationTarget = options?.target ?? ConfigurationTarget.USER;\n\t\tconst editableSettingsEditorInput = await this.getOrCreateEditableSettingsEditorInput(configurationTarget, resource);\n\t\toptions = { ...options, pinned: true };\n\t\treturn await this.editorService.openEditor(editableSettingsEditorInput, validateSettingsEditorOptions(options), group);\n\t}\n\n\tprivate async doOpenSplitJSON(resource: URI, options: ISettingsEditorOptions = {}, group?: SIDE_GROUP_TYPE): Promise<IEditorPane | undefined> {\n\t\tconst configurationTarget = options.target ?? ConfigurationTarget.USER;\n\t\tawait this.createSettingsIfNotExists(configurationTarget, resource);\n\t\tconst preferencesEditorInput = this.createSplitJsonEditorInput(configurationTarget, resource);\n\t\toptions = { ...options, pinned: true };\n\t\treturn this.editorService.openEditor(preferencesEditorInput, validateSettingsEditorOptions(options), group);\n\t}\n\n\tpublic createSplitJsonEditorInput(configurationTarget: ConfigurationTarget, resource: URI): EditorInput {\n\t\tconst editableSettingsEditorInput = this.textEditorService.createTextEditor({ resource });\n\t\tconst defaultPreferencesEditorInput = this.instantiationService.createInstance(TextResourceEditorInput, this.getDefaultSettingsResource(configurationTarget), undefined, undefined, undefined, undefined);\n\t\treturn this.instantiationService.createInstance(SideBySideEditorInput, editableSettingsEditorInput.getName(), undefined, defaultPreferencesEditorInput, editableSettingsEditorInput);\n\t}\n\n\tpublic createSettings2EditorModel(): Settings2EditorModel {\n\t\treturn this.instantiationService.createInstance(Settings2EditorModel, this.getDefaultSettings(ConfigurationTarget.USER_LOCAL));\n\t}\n\n\tprivate getConfigurationTargetFromDefaultSettingsResource(uri: URI) {\n\t\treturn this.isDefaultWorkspaceSettingsResource(uri) ?\n\t\t\tConfigurationTarget.WORKSPACE :\n\t\t\tthis.isDefaultFolderSettingsResource(uri) ?\n\t\t\t\tConfigurationTarget.WORKSPACE_FOLDER :\n\t\t\t\tConfigurationTarget.USER_LOCAL;\n\t}\n\n\tprivate isDefaultSettingsResource(uri: URI): boolean {\n\t\treturn this.isDefaultUserSettingsResource(uri) || this.isDefaultWorkspaceSettingsResource(uri) || this.isDefaultFolderSettingsResource(uri);\n\t}\n\n\tprivate isDefaultUserSettingsResource(uri: URI): boolean {\n\t\treturn uri.authority === 'defaultsettings' && uri.scheme === network.Schemas.vscode && !!uri.path.match(/\\/(\\d+\\/)?settings\\.json$/);\n\t}\n\n\tprivate isDefaultWorkspaceSettingsResource(uri: URI): boolean {\n\t\treturn uri.authority === 'defaultsettings' && uri.scheme === network.Schemas.vscode && !!uri.path.match(/\\/(\\d+\\/)?workspaceSettings\\.json$/);\n\t}\n\n\tprivate isDefaultFolderSettingsResource(uri: URI): boolean {\n\t\treturn uri.authority === 'defaultsettings' && uri.scheme === network.Schemas.vscode && !!uri.path.match(/\\/(\\d+\\/)?resourceSettings\\.json$/);\n\t}\n\n\tprivate getDefaultSettingsResource(configurationTarget: ConfigurationTarget): URI {\n\t\tswitch (configurationTarget) {\n\t\t\tcase ConfigurationTarget.WORKSPACE:\n\t\t\t\treturn URI.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: `/workspaceSettings.json` });\n\t\t\tcase ConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\t\treturn URI.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: `/resourceSettings.json` });\n\t\t}\n\t\treturn URI.from({ scheme: network.Schemas.vscode, authority: 'defaultsettings', path: `/settings.json` });\n\t}\n\n\tprivate async getOrCreateEditableSettingsEditorInput(target: ConfigurationTarget, resource: URI): Promise<EditorInput> {\n\t\tawait this.createSettingsIfNotExists(target, resource);\n\t\treturn this.textEditorService.createTextEditor({ resource });\n\t}\n\n\tprivate async createEditableSettingsEditorModel(configurationTarget: ConfigurationTarget, settingsUri: URI): Promise<SettingsEditorModel> {\n\t\tconst workspace = this.contextService.getWorkspace();\n\t\tif (workspace.configuration && workspace.configuration.toString() === settingsUri.toString()) {\n\t\t\tconst reference = await this.textModelResolverService.createModelReference(settingsUri);\n\t\t\treturn this.instantiationService.createInstance(WorkspaceConfigurationEditorModel, reference, configurationTarget);\n\t\t}\n\n\t\tconst reference = await this.textModelResolverService.createModelReference(settingsUri);\n\t\treturn this.instantiationService.createInstance(SettingsEditorModel, reference, configurationTarget);\n\t}\n\n\tprivate async createDefaultSettingsEditorModel(defaultSettingsUri: URI): Promise<DefaultSettingsEditorModel> {\n\t\tconst reference = await this.textModelResolverService.createModelReference(defaultSettingsUri);\n\t\tconst target = this.getConfigurationTargetFromDefaultSettingsResource(defaultSettingsUri);\n\t\treturn this.instantiationService.createInstance(DefaultSettingsEditorModel, defaultSettingsUri, reference, this.getDefaultSettings(target));\n\t}\n\n\tprivate getDefaultSettings(target: ConfigurationTarget): DefaultSettings {\n\t\tif (target === ConfigurationTarget.WORKSPACE) {\n\t\t\tif (!this._defaultWorkspaceSettingsContentModel) {\n\t\t\t\tthis._defaultWorkspaceSettingsContentModel = new DefaultSettings(this.getMostCommonlyUsedSettings(), target);\n\t\t\t}\n\t\t\treturn this._defaultWorkspaceSettingsContentModel;\n\t\t}\n\t\tif (target === ConfigurationTarget.WORKSPACE_FOLDER) {\n\t\t\tif (!this._defaultFolderSettingsContentModel) {\n\t\t\t\tthis._defaultFolderSettingsContentModel = new DefaultSettings(this.getMostCommonlyUsedSettings(), target);\n\t\t\t}\n\t\t\treturn this._defaultFolderSettingsContentModel;\n\t\t}\n\t\tif (!this._defaultUserSettingsContentModel) {\n\t\t\tthis._defaultUserSettingsContentModel = new DefaultSettings(this.getMostCommonlyUsedSettings(), target);\n\t\t}\n\t\treturn this._defaultUserSettingsContentModel;\n\t}\n\n\tpublic async getEditableSettingsURI(configurationTarget: ConfigurationTarget, resource?: URI): Promise<URI | null> {\n\t\tswitch (configurationTarget) {\n\t\t\tcase ConfigurationTarget.APPLICATION:\n\t\t\t\treturn this.userDataProfilesService.defaultProfile.settingsResource;\n\t\t\tcase ConfigurationTarget.USER:\n\t\t\tcase ConfigurationTarget.USER_LOCAL:\n\t\t\t\treturn this.userSettingsResource;\n\t\t\tcase ConfigurationTarget.USER_REMOTE: {\n\t\t\t\tconst remoteEnvironment = await this.remoteAgentService.getEnvironment();\n\t\t\t\treturn remoteEnvironment ? remoteEnvironment.settingsPath : null;\n\t\t\t}\n\t\t\tcase ConfigurationTarget.WORKSPACE:\n\t\t\t\treturn this.workspaceSettingsResource;\n\t\t\tcase ConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\t\tif (resource) {\n\t\t\t\t\treturn this.getFolderSettingsResource(resource);\n\t\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tprivate async createSettingsIfNotExists(target: ConfigurationTarget, resource: URI): Promise<void> {\n\t\tif (this.contextService.getWorkbenchState() === WorkbenchState.WORKSPACE && target === ConfigurationTarget.WORKSPACE) {\n\t\t\tconst workspaceConfig = this.contextService.getWorkspace().configuration;\n\t\t\tif (!workspaceConfig) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst content = await this.textFileService.read(workspaceConfig);\n\t\t\tif (Object.keys(parse(content.value)).indexOf('settings') === -1) {\n\t\t\t\tawait this.jsonEditingService.write(resource, [{ path: ['settings'], value: {} }], true);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t}\n\n\t\tawait this.createIfNotExists(resource, emptyEditableSettingsContent);\n\t}\n\n\tprivate async createIfNotExists(resource: URI, contents: string): Promise<void> {\n\t\ttry {\n\t\t\tawait this.textFileService.read(resource, { acceptTextOnly: true });\n\t\t} catch (error) {\n\t\t\tif ((<FileOperationError>error).fileOperationResult === FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\ttry {\n\t\t\t\t\tawait this.textFileService.write(resource, contents);\n\t\t\t\t\treturn;\n\t\t\t\t} catch (error2) {\n\t\t\t\t\tthrow new Error(nls.localize('fail.createSettings', \"Unable to create '{0}' ({1}).\", this.labelService.getUriLabel(resource, { relative: true }), getErrorMessage(error2)));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t}\n\t}\n\n\tprivate getMostCommonlyUsedSettings(): string[] {\n\t\treturn [\n\t\t\t'files.autoSave',\n\t\t\t'editor.fontSize',\n\t\t\t'editor.fontFamily',\n\t\t\t'editor.tabSize',\n\t\t\t'editor.renderWhitespace',\n\t\t\t'editor.cursorStyle',\n\t\t\t'editor.multiCursorModifier',\n\t\t\t'editor.insertSpaces',\n\t\t\t'editor.wordWrap',\n\t\t\t'files.exclude',\n\t\t\t'files.associations',\n\t\t\t'workbench.editor.enablePreview'\n\t\t];\n\t}\n\n\tprivate async revealSetting(settingKey: string, edit: boolean, editor: IEditorPane, settingsResource: URI): Promise<void> {\n\t\tconst codeEditor = editor ? getCodeEditor(editor.getControl()) : null;\n\t\tif (!codeEditor) {\n\t\t\treturn;\n\t\t}\n\t\tconst settingsModel = await this.createPreferencesEditorModel(settingsResource);\n\t\tif (!settingsModel) {\n\t\t\treturn;\n\t\t}\n\t\tconst position = await this.getPositionToReveal(settingKey, edit, settingsModel, codeEditor);\n\t\tif (position) {\n\t\t\tcodeEditor.setPosition(position);\n\t\t\tcodeEditor.revealPositionNearTop(position);\n\t\t\tcodeEditor.focus();\n\t\t\tif (edit) {\n\t\t\t\tSuggestController.get(codeEditor)?.triggerSuggest();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async getPositionToReveal(settingKey: string, edit: boolean, settingsModel: IPreferencesEditorModel<ISetting>, codeEditor: ICodeEditor): Promise<IPosition | null> {\n\t\tconst model = codeEditor.getModel();\n\t\tif (!model) {\n\t\t\treturn null;\n\t\t}\n\t\tconst schema = Registry.as<IConfigurationRegistry>(Extensions.Configuration).getConfigurationProperties()[settingKey];\n\t\tconst isOverrideProperty = OVERRIDE_PROPERTY_REGEX.test(settingKey);\n\t\tif (!schema && !isOverrideProperty) {\n\t\t\treturn null;\n\t\t}\n\n\t\tlet position = null;\n\t\tconst type = schema?.type ?? 'object' /* Type not defined or is an Override Identifier */;\n\t\tlet setting = settingsModel.getPreference(settingKey);\n\t\tif (!setting && edit) {\n\t\t\tlet defaultValue = (type === 'object' || type === 'array') ? this.configurationService.inspect(settingKey).defaultValue : getDefaultValue(type);\n\t\t\tdefaultValue = defaultValue === undefined && isOverrideProperty ? {} : defaultValue;\n\t\t\tif (defaultValue !== undefined) {\n\t\t\t\tconst key = settingsModel instanceof WorkspaceConfigurationEditorModel ? ['settings', settingKey] : [settingKey];\n\t\t\t\tawait this.jsonEditingService.write(settingsModel.uri!, [{ path: key, value: defaultValue }], false);\n\t\t\t\tsetting = settingsModel.getPreference(settingKey);\n\t\t\t}\n\t\t}\n\n\t\tif (setting) {\n\t\t\tif (edit) {\n\t\t\t\tif (isObject(setting.value) || Array.isArray(setting.value)) {\n\t\t\t\t\tposition = { lineNumber: setting.valueRange.startLineNumber, column: setting.valueRange.startColumn + 1 };\n\t\t\t\t\tcodeEditor.setPosition(position);\n\t\t\t\t\tawait CoreEditingCommands.LineBreakInsert.runEditorCommand(null, codeEditor, null);\n\t\t\t\t\tposition = { lineNumber: position.lineNumber + 1, column: model.getLineMaxColumn(position.lineNumber + 1) };\n\t\t\t\t\tconst firstNonWhiteSpaceColumn = model.getLineFirstNonWhitespaceColumn(position.lineNumber);\n\t\t\t\t\tif (firstNonWhiteSpaceColumn) {\n\t\t\t\t\t\t// Line has some text. Insert another new line.\n\t\t\t\t\t\tcodeEditor.setPosition({ lineNumber: position.lineNumber, column: firstNonWhiteSpaceColumn });\n\t\t\t\t\t\tawait CoreEditingCommands.LineBreakInsert.runEditorCommand(null, codeEditor, null);\n\t\t\t\t\t\tposition = { lineNumber: position.lineNumber, column: model.getLineMaxColumn(position.lineNumber) };\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tposition = { lineNumber: setting.valueRange.startLineNumber, column: setting.valueRange.endColumn };\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tposition = { lineNumber: setting.keyRange.startLineNumber, column: setting.keyRange.startColumn };\n\t\t\t}\n\t\t}\n\n\t\treturn position;\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis._onDispose.fire();\n\t\tsuper.dispose();\n\t}\n}\n\nregisterSingleton(IPreferencesService, PreferencesService, InstantiationType.Delayed);\n"]}