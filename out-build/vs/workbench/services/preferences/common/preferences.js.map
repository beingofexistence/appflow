{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/preferences/common/preferences.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAqBhG,IAAY,gBAkBX;IAlBD,WAAY,gBAAgB;QAC3B,iCAAa,CAAA;QACb,iCAAa,CAAA;QACb,qCAAiB,CAAA;QACjB,wDAAoC,CAAA;QACpC,uCAAmB,CAAA;QACnB,qCAAiB,CAAA;QACjB,uCAAmB,CAAA;QACnB,mCAAe,CAAA;QACf,uCAAmB,CAAA;QACnB,uCAAmB,CAAA;QACnB,uCAAmB,CAAA;QACnB,wDAAoC,CAAA;QACpC,sDAAkC,CAAA;QAClC,qCAAiB,CAAA;QACjB,oDAAgC,CAAA;QAChC,gDAA4B,CAAA;QAC5B,wDAAoC,CAAA;IACrC,CAAC,EAlBW,gBAAgB,gCAAhB,gBAAgB,QAkB3B;IA2FD;;;;OAIG;IACH,IAAY,gBAKX;IALD,WAAY,gBAAgB;QAC3B,uDAAQ,CAAA;QACR,qEAAoB,CAAA;QACpB,2EAAuB,CAAA;QACvB,+DAAiB,CAAA;IAClB,CAAC,EALW,gBAAgB,gCAAhB,gBAAgB,QAK3B;IAuED,SAAgB,GAAG,CAA2B,OAA+B;QAC5E,OAAO;YACN,2BAA2B;YAC3B,GAAG,OAAO;YAEV,iDAAiD;YACjD,QAAQ,EAAE,YAAG,CAAwB,EAAE;YACvC,MAAM,EAAE,IAAI;SACZ,CAAC;IACH,CAAC;IATD,kBASC;IASY,QAAA,GAAG,GAAmB,IAAA,mBAAG,EAAkC,oBAAoB,CAAC,CAAC;IAwFjF,QAAA,GAAG,GAAmC,iCAAiC,CAAC;IAKxE,QAAA,GAAG,GAAoB,uBAAuB,CAAC;IAC/C,QAAA,GAAG,GAA+B,wCAAwC,CAAC;IAC3E,QAAA,GAAG,GAAsB,iCAAiC,CAAC","file":"preferences.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { Event } from 'vs/base/common/event';\nimport { IMatch } from 'vs/base/common/filters';\nimport { IJSONSchema, IJSONSchemaMap } from 'vs/base/common/jsonSchema';\nimport { ResolvedKeybinding } from 'vs/base/common/keybindings';\nimport { URI } from 'vs/base/common/uri';\nimport { IRange } from 'vs/editor/common/core/range';\nimport { IEditorContribution } from 'vs/editor/common/editorCommon';\nimport { ITextModel } from 'vs/editor/common/model';\nimport { ConfigurationTarget } from 'vs/platform/configuration/common/configuration';\nimport { ConfigurationScope, EditPresentationTypes, IExtensionInfo } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IEditorOptions } from 'vs/platform/editor/common/editor';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { ResolvedKeybindingItem } from 'vs/platform/keybinding/common/resolvedKeybindingItem';\nimport { DEFAULT_EDITOR_ASSOCIATION, IEditorPane } from 'vs/workbench/common/editor';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { Settings2EditorModel } from 'vs/workbench/services/preferences/common/preferencesModels';\n\nexport enum SettingValueType {\n\tNull = 'null',\n\tEnum = 'enum',\n\tString = 'string',\n\tMultilineString = 'multiline-string',\n\tInteger = 'integer',\n\tNumber = 'number',\n\tBoolean = 'boolean',\n\tArray = 'array',\n\tExclude = 'exclude',\n\tInclude = 'include',\n\tComplex = 'complex',\n\tNullableInteger = 'nullable-integer',\n\tNullableNumber = 'nullable-number',\n\tObject = 'object',\n\tBooleanObject = 'boolean-object',\n\tLanguageTag = 'language-tag',\n\tExtensionToggle = 'extension-toggle'\n}\n\nexport interface ISettingsGroup {\n\tid: string;\n\trange: IRange;\n\ttitle: string;\n\ttitleRange: IRange;\n\tsections: ISettingsSection[];\n\torder?: number;\n\textensionInfo?: IExtensionInfo;\n}\n\nexport interface ISettingsSection {\n\ttitleRange?: IRange;\n\ttitle?: string;\n\tsettings: ISetting[];\n}\n\nexport interface ISetting {\n\trange: IRange;\n\tkey: string;\n\tkeyRange: IRange;\n\tvalue: any;\n\tvalueRange: IRange;\n\tdescription: string[];\n\tdescriptionIsMarkdown?: boolean;\n\tdescriptionRanges: IRange[];\n\toverrides?: ISetting[];\n\toverrideOf?: ISetting;\n\tdeprecationMessage?: string;\n\tdeprecationMessageIsMarkdown?: boolean;\n\n\tscope?: ConfigurationScope;\n\ttype?: string | string[];\n\torder?: number;\n\tarrayItemType?: string;\n\tobjectProperties?: IJSONSchemaMap;\n\tobjectPatternProperties?: IJSONSchemaMap;\n\tobjectAdditionalProperties?: boolean | IJSONSchema;\n\tenum?: string[];\n\tenumDescriptions?: string[];\n\tenumDescriptionsAreMarkdown?: boolean;\n\tuniqueItems?: boolean;\n\ttags?: string[];\n\tdisallowSyncIgnore?: boolean;\n\trestricted?: boolean;\n\textensionInfo?: IExtensionInfo;\n\tvalidator?: (value: any) => string | null;\n\tenumItemLabels?: string[];\n\tallKeysAreBoolean?: boolean;\n\teditPresentation?: EditPresentationTypes;\n\tnonLanguageSpecificDefaultValueSource?: string | IExtensionInfo;\n\tisLanguageTagSetting?: boolean;\n\tcategoryOrder?: number;\n\tcategoryLabel?: string;\n\n\t// For ExtensionToggle settings\n\tdisplayExtensionId?: string;\n\tstableExtensionId?: string;\n\tprereleaseExtensionId?: string;\n\ttitle?: string;\n\textensionGroupTitle?: string;\n}\n\nexport interface IExtensionSetting extends ISetting {\n\textensionName?: string;\n\textensionPublisher?: string;\n}\n\nexport interface ISearchResult {\n\tfilterMatches: ISettingMatch[];\n\texactMatch?: boolean;\n\tmetadata?: IFilterMetadata;\n}\n\nexport interface ISearchResultGroup {\n\tid: string;\n\tlabel: string;\n\tresult: ISearchResult;\n\torder: number;\n}\n\nexport interface IFilterResult {\n\tquery?: string;\n\tfilteredGroups: ISettingsGroup[];\n\tallGroups: ISettingsGroup[];\n\tmatches: IRange[];\n\tmetadata?: IStringDictionary<IFilterMetadata>;\n\texactMatch?: boolean;\n}\n\n/**\n * The ways a setting could match a query,\n * sorted in increasing order of relevance.\n * For now, ignore description and value matches.\n */\nexport enum SettingMatchType {\n\tNone = 0,\n\tRemoteMatch = 1 << 0,\n\tWholeWordMatch = 1 << 1,\n\tKeyMatch = 1 << 2\n}\n\nexport interface ISettingMatch {\n\tsetting: ISetting;\n\tmatches: IRange[] | null;\n\tmatchType: SettingMatchType;\n\tscore: number;\n}\n\nexport interface IScoredResults {\n\t[key: string]: IRemoteSetting;\n}\n\nexport interface IRemoteSetting {\n\tscore: number;\n\tkey: string;\n\tid: string;\n\tdefaultValue: string;\n\tdescription: string;\n\tpackageId: string;\n\textensionName?: string;\n\textensionPublisher?: string;\n}\n\nexport interface IFilterMetadata {\n\trequestUrl: string;\n\trequestBody: string;\n\ttimestamp: number;\n\tduration: number;\n\tscoredResults: IScoredResults;\n\n\t/** The number of requests made, since requests are split by number of filters */\n\trequestCount?: number;\n\n\t/** The name of the server that actually served the request */\n\tcontext: string;\n}\n\nexport interface IPreferencesEditorModel<T> {\n\turi?: URI;\n\tgetPreference(key: string): T | undefined;\n\tdispose(): void;\n}\n\nexport type IGroupFilter = (group: ISettingsGroup) => boolean | null;\nexport type ISettingMatcher = (setting: ISetting, group: ISettingsGroup) => { matches: IRange[]; matchType: SettingMatchType; score: number } | null;\n\nexport interface ISettingsEditorModel extends IPreferencesEditorModel<ISetting> {\n\treadonly onDidChangeGroups: Event<void>;\n\tsettingsGroups: ISettingsGroup[];\n\tfilterSettings(filter: string, groupFilter: IGroupFilter, settingMatcher: ISettingMatcher): ISettingMatch[];\n\tfindValueMatches(filter: string, setting: ISetting): IRange[];\n\tupdateResultGroup(id: string, resultGroup: ISearchResultGroup | undefined): IFilterResult | undefined;\n}\n\nexport interface ISettingsEditorOptions extends IEditorOptions {\n\ttarget?: ConfigurationTarget;\n\tfolderUri?: URI;\n\tquery?: string;\n\trevealSetting?: {\n\t\tkey: string;\n\t\tedit?: boolean;\n\t};\n\tfocusSearch?: boolean;\n}\n\nexport interface IOpenSettingsOptions extends ISettingsEditorOptions {\n\tjsonEditor?: boolean;\n\topenToSide?: boolean;\n}\n\nexport function validateSettingsEditorOptions(options: ISettingsEditorOptions): ISettingsEditorOptions {\n\treturn {\n\t\t// Inherit provided options\n\t\t...options,\n\n\t\t// Enforce some options for settings specifically\n\t\toverride: DEFAULT_EDITOR_ASSOCIATION.id,\n\t\tpinned: true\n\t};\n}\n\nexport interface IKeybindingsEditorModel<T> extends IPreferencesEditorModel<T> {\n}\n\nexport interface IKeybindingsEditorOptions extends IEditorOptions {\n\tquery?: string;\n}\n\nexport const IPreferencesService = createDecorator<IPreferencesService>('preferencesService');\n\nexport interface IPreferencesService {\n\treadonly _serviceBrand: undefined;\n\n\tuserSettingsResource: URI;\n\tworkspaceSettingsResource: URI | null;\n\tgetFolderSettingsResource(resource: URI): URI | null;\n\n\tcreatePreferencesEditorModel(uri: URI): Promise<IPreferencesEditorModel<ISetting> | null>;\n\tresolveModel(uri: URI): ITextModel | null;\n\tcreateSettings2EditorModel(): Settings2EditorModel; // TODO\n\n\topenRawDefaultSettings(): Promise<IEditorPane | undefined>;\n\topenSettings(options?: IOpenSettingsOptions): Promise<IEditorPane | undefined>;\n\topenApplicationSettings(options?: IOpenSettingsOptions): Promise<IEditorPane | undefined>;\n\topenUserSettings(options?: IOpenSettingsOptions): Promise<IEditorPane | undefined>;\n\topenRemoteSettings(options?: IOpenSettingsOptions): Promise<IEditorPane | undefined>;\n\topenWorkspaceSettings(options?: IOpenSettingsOptions): Promise<IEditorPane | undefined>;\n\topenFolderSettings(options: IOpenSettingsOptions & { folderUri: IOpenSettingsOptions['folderUri'] }): Promise<IEditorPane | undefined>;\n\topenGlobalKeybindingSettings(textual: boolean, options?: IKeybindingsEditorOptions): Promise<void>;\n\topenDefaultKeybindingsFile(): Promise<IEditorPane | undefined>;\n\topenLanguageSpecificSettings(languageId: string, options?: IOpenSettingsOptions): Promise<IEditorPane | undefined>;\n\tgetEditableSettingsURI(configurationTarget: ConfigurationTarget, resource?: URI): Promise<URI | null>;\n\n\tcreateSplitJsonEditorInput(configurationTarget: ConfigurationTarget, resource: URI): EditorInput;\n}\n\nexport interface KeybindingMatch {\n\tctrlKey?: boolean;\n\tshiftKey?: boolean;\n\taltKey?: boolean;\n\tmetaKey?: boolean;\n\tkeyCode?: boolean;\n}\n\nexport interface KeybindingMatches {\n\tfirstPart: KeybindingMatch;\n\tchordPart: KeybindingMatch;\n}\n\nexport interface IKeybindingItemEntry {\n\tid: string;\n\ttemplateId: string;\n\tkeybindingItem: IKeybindingItem;\n\tcommandIdMatches?: IMatch[];\n\tcommandLabelMatches?: IMatch[];\n\tcommandDefaultLabelMatches?: IMatch[];\n\tsourceMatches?: IMatch[];\n\textensionIdMatches?: IMatch[];\n\textensionLabelMatches?: IMatch[];\n\twhenMatches?: IMatch[];\n\tkeybindingMatches?: KeybindingMatches;\n}\n\nexport interface IKeybindingItem {\n\tkeybinding: ResolvedKeybinding;\n\tkeybindingItem: ResolvedKeybindingItem;\n\tcommandLabel: string;\n\tcommandDefaultLabel: string;\n\tcommand: string;\n\tsource: string | IExtensionDescription;\n\twhen: string;\n}\n\nexport interface IKeybindingsEditorPane extends IEditorPane {\n\n\treadonly activeKeybindingEntry: IKeybindingItemEntry | null;\n\treadonly onDefineWhenExpression: Event<IKeybindingItemEntry>;\n\treadonly onLayout: Event<void>;\n\n\tsearch(filter: string): void;\n\tfocusSearch(): void;\n\tclearSearchResults(): void;\n\tfocusKeybindings(): void;\n\trecordSearchKeys(): void;\n\ttoggleSortByPrecedence(): void;\n\tselectKeybinding(keybindingEntry: IKeybindingItemEntry): void;\n\tdefineKeybinding(keybindingEntry: IKeybindingItemEntry, add: boolean): Promise<void>;\n\tdefineWhenExpression(keybindingEntry: IKeybindingItemEntry): void;\n\tupdateKeybinding(keybindingEntry: IKeybindingItemEntry, key: string, when: string | undefined): Promise<any>;\n\tremoveKeybinding(keybindingEntry: IKeybindingItemEntry): Promise<any>;\n\tresetKeybinding(keybindingEntry: IKeybindingItemEntry): Promise<any>;\n\tcopyKeybinding(keybindingEntry: IKeybindingItemEntry): Promise<void>;\n\tcopyKeybindingCommand(keybindingEntry: IKeybindingItemEntry): Promise<void>;\n\tshowSimilarKeybindings(keybindingEntry: IKeybindingItemEntry): void;\n}\n\nexport const DEFINE_KEYBINDING_EDITOR_CONTRIB_ID = 'editor.contrib.defineKeybinding';\nexport interface IDefineKeybindingEditorContribution extends IEditorContribution {\n\tshowDefineKeybindingWidget(): void;\n}\n\nexport const FOLDER_SETTINGS_PATH = '.vscode/settings.json';\nexport const DEFAULT_SETTINGS_EDITOR_SETTING = 'workbench.settings.openDefaultSettings';\nexport const USE_SPLIT_JSON_SETTING = 'workbench.settings.useSplitJSON';\n"]}