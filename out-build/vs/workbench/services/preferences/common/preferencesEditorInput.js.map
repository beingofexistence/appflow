{"version":3,"sources":["vs/workbench/services/preferences/common/preferencesEditorInput.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;;IAUzF,IAAM,IAAI,GAAV,MAAM,IAAqB,SAAQ,iBAAG;;iBAE5B,OAAE,GAAW,2BAAX,AAAsC,CAAC;QAQzD,YACsB,mBAAwB;YAE7C,KAAK,EAAE,CAAC;YARA,aAAQ,GAAQ,SAAG,CAAC,IAAI,CAAC;gBACjC,MAAM,EAAE,iBAAO,CAAC,cAAc;gBAC9B,IAAI,EAAE,gBAAgB;aACtB,CAAC,CAAC;YAOF,IAAI,CAAC,CAAC,GAAgB,mBAAmB,CAAC,0BAA0B,EAAE,CAAC;QACxE,CAAC;QAEQ,OAAO,CAAC,UAA6C;YAC7D,OAAO,KAAK,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,UAAU,YAAY,MAAI,CAAiB;QAChF,CAAC;QAED,IAAa,MAAM;YAClB,OAAO,MAAI,CAAiB,EAAE,CAAC;QAChC,CAAC;QAEQ,OAAO;YACf,OAAO,GAAG,CAAC,QAAQ,CAAC,CAA0B,EAAE,IAAU,CAAC,CAAC;QAC7D,CAAC;QAEQ,KAAK,CAAC,OAAO;YACrB,OAAO,IAAI,CAAC,CAAC,CAAc;QAC5B,CAAC;QAEQ,OAAO;YACf,IAAI,CAAC,CAAC,CAAc,OAAO,EAAE,CAAC;YAE9B,KAAK,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC;;IAtCW,oBAAI;mBAAJ,IAAI;QAWd,WAAA,iBAAG,CAAA;OAXO,IAAI,CAuChB","file":"preferencesEditorInput.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport * as nls from 'vs/nls';\nimport { IUntypedEditorInput } from 'vs/workbench/common/editor';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { IPreferencesService } from 'vs/workbench/services/preferences/common/preferences';\nimport { Settings2EditorModel } from 'vs/workbench/services/preferences/common/preferencesModels';\n\nexport class SettingsEditor2Input extends EditorInput {\n\n\tstatic readonly ID: string = 'workbench.input.settings2';\n\tprivate readonly _settingsModel: Settings2EditorModel;\n\n\treadonly resource: URI = URI.from({\n\t\tscheme: Schemas.vscodeSettings,\n\t\tpath: `settingseditor`\n\t});\n\n\tconstructor(\n\t\t@IPreferencesService _preferencesService: IPreferencesService,\n\t) {\n\t\tsuper();\n\n\t\tthis._settingsModel = _preferencesService.createSettings2EditorModel();\n\t}\n\n\toverride matches(otherInput: EditorInput | IUntypedEditorInput): boolean {\n\t\treturn super.matches(otherInput) || otherInput instanceof SettingsEditor2Input;\n\t}\n\n\toverride get typeId(): string {\n\t\treturn SettingsEditor2Input.ID;\n\t}\n\n\toverride getName(): string {\n\t\treturn nls.localize('settingsEditor2InputName', \"Settings\");\n\t}\n\n\toverride async resolve(): Promise<Settings2EditorModel> {\n\t\treturn this._settingsModel;\n\t}\n\n\toverride dispose(): void {\n\t\tthis._settingsModel.dispose();\n\n\t\tsuper.dispose();\n\t}\n}\n"]}