{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/storage/browser/storageService.ts"],"names":[],"mappings":"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","file":"storageService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BroadcastDataChannel } from 'vs/base/browser/broadcast';\nimport { isSafari } from 'vs/base/browser/browser';\nimport { IndexedDB } from 'vs/base/browser/indexedDB';\nimport { DeferredPromise, Promises } from 'vs/base/common/async';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable, DisposableStore, IDisposable } from 'vs/base/common/lifecycle';\nimport { assertIsDefined } from 'vs/base/common/types';\nimport { InMemoryStorageDatabase, isStorageItemsChangeEvent, IStorage, IStorageDatabase, IStorageItemsChangeEvent, IUpdateRequest, Storage } from 'vs/base/parts/storage/common/storage';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { AbstractStorageService, isProfileUsingDefaultStorage, IS_NEW_KEY, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { isUserDataProfile, IUserDataProfile } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { IAnyWorkspaceIdentifier } from 'vs/platform/workspace/common/workspace';\nimport { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\n\nexport class BrowserStorageService extends AbstractStorageService {\n\n\tprivate static BROWSER_DEFAULT_FLUSH_INTERVAL = 5 * 1000; // every 5s because async operations are not permitted on shutdown\n\n\tprivate applicationStorage: IStorage | undefined;\n\tprivate applicationStorageDatabase: IIndexedDBStorageDatabase | undefined;\n\tprivate readonly applicationStoragePromise = new DeferredPromise<{ indexedDb: IIndexedDBStorageDatabase; storage: IStorage }>();\n\n\tprivate profileStorage: IStorage | undefined;\n\tprivate profileStorageDatabase: IIndexedDBStorageDatabase | undefined;\n\tprivate profileStorageProfile = this.userDataProfileService.currentProfile;\n\tprivate readonly profileStorageDisposables = this._register(new DisposableStore());\n\n\tprivate workspaceStorage: IStorage | undefined;\n\tprivate workspaceStorageDatabase: IIndexedDBStorageDatabase | undefined;\n\n\tget hasPendingUpdate(): boolean {\n\t\treturn Boolean(\n\t\t\tthis.applicationStorageDatabase?.hasPendingUpdate ||\n\t\t\tthis.profileStorageDatabase?.hasPendingUpdate ||\n\t\t\tthis.workspaceStorageDatabase?.hasPendingUpdate\n\t\t);\n\t}\n\n\tconstructor(\n\t\tprivate readonly workspace: IAnyWorkspaceIdentifier,\n\t\tprivate readonly userDataProfileService: IUserDataProfileService,\n\t\t@ILogService private readonly logService: ILogService,\n\t) {\n\t\tsuper({ flushInterval: BrowserStorageService.BROWSER_DEFAULT_FLUSH_INTERVAL });\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.userDataProfileService.onDidChangeCurrentProfile(e => e.join(this.switchToProfile(e.profile))));\n\t}\n\n\tprotected async doInitialize(): Promise<void> {\n\n\t\t// Init storages\n\t\tawait Promises.settled([\n\t\t\tthis.createApplicationStorage(),\n\t\t\tthis.createProfileStorage(this.profileStorageProfile),\n\t\t\tthis.createWorkspaceStorage()\n\t\t]);\n\t}\n\n\tprivate async createApplicationStorage(): Promise<void> {\n\t\tconst applicationStorageIndexedDB = await IndexedDBStorageDatabase.createApplicationStorage(this.logService);\n\n\t\tthis.applicationStorageDatabase = this._register(applicationStorageIndexedDB);\n\t\tthis.applicationStorage = this._register(new Storage(this.applicationStorageDatabase));\n\n\t\tthis._register(this.applicationStorage.onDidChangeStorage(e => this.emitDidChangeValue(StorageScope.APPLICATION, e)));\n\n\t\tawait this.applicationStorage.init();\n\n\t\tthis.updateIsNew(this.applicationStorage);\n\n\t\tthis.applicationStoragePromise.complete({ indexedDb: applicationStorageIndexedDB, storage: this.applicationStorage });\n\t}\n\n\tprivate async createProfileStorage(profile: IUserDataProfile): Promise<void> {\n\n\t\t// First clear any previously associated disposables\n\t\tthis.profileStorageDisposables.clear();\n\n\t\t// Remember profile associated to profile storage\n\t\tthis.profileStorageProfile = profile;\n\n\t\tif (isProfileUsingDefaultStorage(this.profileStorageProfile)) {\n\n\t\t\t// If we are using default profile storage, the profile storage is\n\t\t\t// actually the same as application storage. As such we\n\t\t\t// avoid creating the storage library a second time on\n\t\t\t// the same DB.\n\n\t\t\tconst { indexedDb: applicationStorageIndexedDB, storage: applicationStorage } = await this.applicationStoragePromise.p;\n\n\t\t\tthis.profileStorageDatabase = applicationStorageIndexedDB;\n\t\t\tthis.profileStorage = applicationStorage;\n\n\t\t\tthis.profileStorageDisposables.add(this.profileStorage.onDidChangeStorage(e => this.emitDidChangeValue(StorageScope.PROFILE, e)));\n\t\t} else {\n\t\t\tconst profileStorageIndexedDB = await IndexedDBStorageDatabase.createProfileStorage(this.profileStorageProfile, this.logService);\n\n\t\t\tthis.profileStorageDatabase = this.profileStorageDisposables.add(profileStorageIndexedDB);\n\t\t\tthis.profileStorage = this.profileStorageDisposables.add(new Storage(this.profileStorageDatabase));\n\n\t\t\tthis.profileStorageDisposables.add(this.profileStorage.onDidChangeStorage(e => this.emitDidChangeValue(StorageScope.PROFILE, e)));\n\n\t\t\tawait this.profileStorage.init();\n\n\t\t\tthis.updateIsNew(this.profileStorage);\n\t\t}\n\t}\n\n\tprivate async createWorkspaceStorage(): Promise<void> {\n\t\tconst workspaceStorageIndexedDB = await IndexedDBStorageDatabase.createWorkspaceStorage(this.workspace.id, this.logService);\n\n\t\tthis.workspaceStorageDatabase = this._register(workspaceStorageIndexedDB);\n\t\tthis.workspaceStorage = this._register(new Storage(this.workspaceStorageDatabase));\n\n\t\tthis._register(this.workspaceStorage.onDidChangeStorage(e => this.emitDidChangeValue(StorageScope.WORKSPACE, e)));\n\n\t\tawait this.workspaceStorage.init();\n\n\t\tthis.updateIsNew(this.workspaceStorage);\n\t}\n\n\tprivate updateIsNew(storage: IStorage): void {\n\t\tconst firstOpen = storage.getBoolean(IS_NEW_KEY);\n\t\tif (firstOpen === undefined) {\n\t\t\tstorage.set(IS_NEW_KEY, true);\n\t\t} else if (firstOpen) {\n\t\t\tstorage.set(IS_NEW_KEY, false);\n\t\t}\n\t}\n\n\tprotected getStorage(scope: StorageScope): IStorage | undefined {\n\t\tswitch (scope) {\n\t\t\tcase StorageScope.APPLICATION:\n\t\t\t\treturn this.applicationStorage;\n\t\t\tcase StorageScope.PROFILE:\n\t\t\t\treturn this.profileStorage;\n\t\t\tdefault:\n\t\t\t\treturn this.workspaceStorage;\n\t\t}\n\t}\n\n\tprotected getLogDetails(scope: StorageScope): string | undefined {\n\t\tswitch (scope) {\n\t\t\tcase StorageScope.APPLICATION:\n\t\t\t\treturn this.applicationStorageDatabase?.name;\n\t\t\tcase StorageScope.PROFILE:\n\t\t\t\treturn this.profileStorageDatabase?.name;\n\t\t\tdefault:\n\t\t\t\treturn this.workspaceStorageDatabase?.name;\n\t\t}\n\t}\n\n\tprotected async switchToProfile(toProfile: IUserDataProfile): Promise<void> {\n\t\tif (!this.canSwitchProfile(this.profileStorageProfile, toProfile)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst oldProfileStorage = assertIsDefined(this.profileStorage);\n\t\tconst oldItems = oldProfileStorage.items;\n\n\t\t// Close old profile storage but only if this is\n\t\t// different from application storage!\n\t\tif (oldProfileStorage !== this.applicationStorage) {\n\t\t\tawait oldProfileStorage.close();\n\t\t}\n\n\t\t// Create new profile storage & init\n\t\tawait this.createProfileStorage(toProfile);\n\n\t\t// Handle data switch and eventing\n\t\tthis.switchData(oldItems, assertIsDefined(this.profileStorage), StorageScope.PROFILE);\n\t}\n\n\tprotected async switchToWorkspace(toWorkspace: IAnyWorkspaceIdentifier, preserveData: boolean): Promise<void> {\n\t\tthrow new Error('Migrating storage is currently unsupported in Web');\n\t}\n\n\tprotected override shouldFlushWhenIdle(): boolean {\n\t\t// this flush() will potentially cause new state to be stored\n\t\t// since new state will only be created while the document\n\t\t// has focus, one optimization is to not run this when the\n\t\t// document has no focus, assuming that state has not changed\n\t\t//\n\t\t// another optimization is to not collect more state if we\n\t\t// have a pending update already running which indicates\n\t\t// that the connection is either slow or disconnected and\n\t\t// thus unhealthy.\n\t\treturn document.hasFocus() && !this.hasPendingUpdate;\n\t}\n\n\tclose(): void {\n\n\t\t// Safari: there is an issue where the page can hang on load when\n\t\t// a previous session has kept IndexedDB transactions running.\n\t\t// The only fix seems to be to cancel any pending transactions\n\t\t// (https://github.com/microsoft/vscode/issues/136295)\n\t\t//\n\t\t// On all other browsers, we keep the databases opened because\n\t\t// we expect data to be written when the unload happens.\n\t\tif (isSafari) {\n\t\t\tthis.applicationStorage?.close();\n\t\t\tthis.profileStorageDatabase?.close();\n\t\t\tthis.workspaceStorageDatabase?.close();\n\t\t}\n\n\t\t// Always dispose to ensure that no timeouts or callbacks\n\t\t// get triggered in this phase.\n\t\tthis.dispose();\n\t}\n\n\tasync clear(): Promise<void> {\n\n\t\t// Clear key/values\n\t\tfor (const scope of [StorageScope.APPLICATION, StorageScope.PROFILE, StorageScope.WORKSPACE]) {\n\t\t\tfor (const target of [StorageTarget.USER, StorageTarget.MACHINE]) {\n\t\t\t\tfor (const key of this.keys(scope, target)) {\n\t\t\t\t\tthis.remove(key, scope);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait this.getStorage(scope)?.whenFlushed();\n\t\t}\n\n\t\t// Clear databases\n\t\tawait Promises.settled([\n\t\t\tthis.applicationStorageDatabase?.clear() ?? Promise.resolve(),\n\t\t\tthis.profileStorageDatabase?.clear() ?? Promise.resolve(),\n\t\t\tthis.workspaceStorageDatabase?.clear() ?? Promise.resolve()\n\t\t]);\n\t}\n\n\thasScope(scope: IAnyWorkspaceIdentifier | IUserDataProfile): boolean {\n\t\tif (isUserDataProfile(scope)) {\n\t\t\treturn this.profileStorageProfile.id === scope.id;\n\t\t}\n\n\t\treturn this.workspace.id === scope.id;\n\t}\n}\n\ninterface IIndexedDBStorageDatabase extends IStorageDatabase, IDisposable {\n\n\t/**\n\t * Name of the database.\n\t */\n\treadonly name: string;\n\n\t/**\n\t * Whether an update in the DB is currently pending\n\t * (either update or delete operation).\n\t */\n\treadonly hasPendingUpdate: boolean;\n\n\t/**\n\t * For testing only.\n\t */\n\tclear(): Promise<void>;\n}\n\nclass InMemoryIndexedDBStorageDatabase extends InMemoryStorageDatabase implements IIndexedDBStorageDatabase {\n\n\treadonly hasPendingUpdate = false;\n\treadonly name = 'in-memory-indexedb-storage';\n\n\tasync clear(): Promise<void> {\n\t\t(await this.getItems()).clear();\n\t}\n\n\tdispose(): void {\n\t\t// No-op\n\t}\n}\n\ninterface IndexedDBStorageDatabaseOptions {\n\tid: string;\n\tbroadcastChanges?: boolean;\n}\n\nexport class IndexedDBStorageDatabase extends Disposable implements IIndexedDBStorageDatabase {\n\n\tstatic async createApplicationStorage(logService: ILogService): Promise<IIndexedDBStorageDatabase> {\n\t\treturn IndexedDBStorageDatabase.create({ id: 'global', broadcastChanges: true }, logService);\n\t}\n\n\tstatic async createProfileStorage(profile: IUserDataProfile, logService: ILogService): Promise<IIndexedDBStorageDatabase> {\n\t\treturn IndexedDBStorageDatabase.create({ id: `global-${profile.id}`, broadcastChanges: true }, logService);\n\t}\n\n\tstatic async createWorkspaceStorage(workspaceId: string, logService: ILogService): Promise<IIndexedDBStorageDatabase> {\n\t\treturn IndexedDBStorageDatabase.create({ id: workspaceId }, logService);\n\t}\n\n\tstatic async create(options: IndexedDBStorageDatabaseOptions, logService: ILogService): Promise<IIndexedDBStorageDatabase> {\n\t\ttry {\n\t\t\tconst database = new IndexedDBStorageDatabase(options, logService);\n\t\t\tawait database.whenConnected;\n\n\t\t\treturn database;\n\t\t} catch (error) {\n\t\t\tlogService.error(`[IndexedDB Storage ${options.id}] create(): ${toErrorMessage(error, true)}`);\n\n\t\t\treturn new InMemoryIndexedDBStorageDatabase();\n\t\t}\n\t}\n\n\tprivate static readonly STORAGE_DATABASE_PREFIX = 'vscode-web-state-db-';\n\tprivate static readonly STORAGE_OBJECT_STORE = 'ItemTable';\n\n\tprivate readonly _onDidChangeItemsExternal = this._register(new Emitter<IStorageItemsChangeEvent>());\n\treadonly onDidChangeItemsExternal = this._onDidChangeItemsExternal.event;\n\n\tprivate broadcastChannel: BroadcastDataChannel<IStorageItemsChangeEvent> | undefined;\n\n\tprivate pendingUpdate: Promise<boolean> | undefined = undefined;\n\tget hasPendingUpdate(): boolean { return !!this.pendingUpdate; }\n\n\treadonly name: string;\n\tprivate readonly whenConnected: Promise<IndexedDB>;\n\n\tprivate constructor(\n\t\toptions: IndexedDBStorageDatabaseOptions,\n\t\tprivate readonly logService: ILogService\n\t) {\n\t\tsuper();\n\n\t\tthis.name = `${IndexedDBStorageDatabase.STORAGE_DATABASE_PREFIX}${options.id}`;\n\t\tthis.broadcastChannel = options.broadcastChanges ? this._register(new BroadcastDataChannel<IStorageItemsChangeEvent>(this.name)) : undefined;\n\n\t\tthis.whenConnected = this.connect();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Check for storage change events from other\n\t\t// windows/tabs via `BroadcastChannel` mechanisms.\n\t\tif (this.broadcastChannel) {\n\t\t\tthis._register(this.broadcastChannel.onDidReceiveData(data => {\n\t\t\t\tif (isStorageItemsChangeEvent(data)) {\n\t\t\t\t\tthis._onDidChangeItemsExternal.fire(data);\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t}\n\n\tprivate async connect(): Promise<IndexedDB> {\n\t\ttry {\n\t\t\treturn await IndexedDB.create(this.name, undefined, [IndexedDBStorageDatabase.STORAGE_OBJECT_STORE]);\n\t\t} catch (error) {\n\t\t\tthis.logService.error(`[IndexedDB Storage ${this.name}] connect() error: ${toErrorMessage(error)}`);\n\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync getItems(): Promise<Map<string, string>> {\n\t\tconst db = await this.whenConnected;\n\n\t\tfunction isValid(value: unknown): value is string {\n\t\t\treturn typeof value === 'string';\n\t\t}\n\n\t\treturn db.getKeyValues<string>(IndexedDBStorageDatabase.STORAGE_OBJECT_STORE, isValid);\n\t}\n\n\tasync updateItems(request: IUpdateRequest): Promise<void> {\n\n\t\t// Run the update\n\t\tlet didUpdate = false;\n\t\tthis.pendingUpdate = this.doUpdateItems(request);\n\t\ttry {\n\t\t\tdidUpdate = await this.pendingUpdate;\n\t\t} finally {\n\t\t\tthis.pendingUpdate = undefined;\n\t\t}\n\n\t\t// Broadcast changes to other windows/tabs if enabled\n\t\t// and only if we actually did update storage items.\n\t\tif (this.broadcastChannel && didUpdate) {\n\t\t\tconst event: IStorageItemsChangeEvent = {\n\t\t\t\tchanged: request.insert,\n\t\t\t\tdeleted: request.delete\n\t\t\t};\n\n\t\t\tthis.broadcastChannel.postData(event);\n\t\t}\n\t}\n\n\tprivate async doUpdateItems(request: IUpdateRequest): Promise<boolean> {\n\n\t\t// Return early if the request is empty\n\t\tconst toInsert = request.insert;\n\t\tconst toDelete = request.delete;\n\t\tif ((!toInsert && !toDelete) || (toInsert?.size === 0 && toDelete?.size === 0)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst db = await this.whenConnected;\n\n\t\t// Update `ItemTable` with inserts and/or deletes\n\t\tawait db.runInTransaction(IndexedDBStorageDatabase.STORAGE_OBJECT_STORE, 'readwrite', objectStore => {\n\t\t\tconst requests: IDBRequest[] = [];\n\n\t\t\t// Inserts\n\t\t\tif (toInsert) {\n\t\t\t\tfor (const [key, value] of toInsert) {\n\t\t\t\t\trequests.push(objectStore.put(value, key));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Deletes\n\t\t\tif (toDelete) {\n\t\t\t\tfor (const key of toDelete) {\n\t\t\t\t\trequests.push(objectStore.delete(key));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn requests;\n\t\t});\n\n\t\treturn true;\n\t}\n\n\tasync optimize(): Promise<void> {\n\t\t// not suported in IndexedDB\n\t}\n\n\tasync close(): Promise<void> {\n\t\tconst db = await this.whenConnected;\n\n\t\t// Wait for pending updates to having finished\n\t\tawait this.pendingUpdate;\n\n\t\t// Finally, close IndexedDB\n\t\treturn db.close();\n\t}\n\n\tasync clear(): Promise<void> {\n\t\tconst db = await this.whenConnected;\n\n\t\tawait db.runInTransaction(IndexedDBStorageDatabase.STORAGE_OBJECT_STORE, 'readwrite', objectStore => objectStore.clear());\n\t}\n}\n"]}