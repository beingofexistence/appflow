{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/storage/electron-sandbox/storageService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAShG,MAAa,IAA8B,SAAQ,qBAAI;QAEtD,YACC,SAA8C,EAC7B,EAA2B,EAC5C,uBAA4B,EAC5B,kBAAwB,EACxB,kBAAuB;YAEvB,KAAK,CAAC,SAAS,EAAE,EAAE,cAAc,EAAE,EAAE,CAAqB,cAAc,EAAE,cAAc,EAAE,uBAAuB,CAAC,cAAc,EAAE,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,CAAC;YAL3J,OAAE,GAAF,EAAE,CAAyB;YAO5C,IAAI,CAAC,EAAE,EAAiB,CAAC;QAC1B,CAAC;QAEO,EAAE;YACT,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,EAAE,CAAqB,yBAAyB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAe,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QACrH,CAAC;KACD;IAjBD,oBAiBC","file":"storageService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IMainProcessService } from 'vs/platform/ipc/common/mainProcessService';\nimport { RemoteStorageService } from 'vs/platform/storage/common/storageService';\nimport { IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { IAnyWorkspaceIdentifier } from 'vs/platform/workspace/common/workspace';\nimport { IUserDataProfileService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\n\nexport class NativeWorkbenchStorageService extends RemoteStorageService {\n\n\tconstructor(\n\t\tworkspace: IAnyWorkspaceIdentifier | undefined,\n\t\tprivate readonly userDataProfileService: IUserDataProfileService,\n\t\tuserDataProfilesService: IUserDataProfilesService,\n\t\tmainProcessService: IMainProcessService,\n\t\tenvironmentService: IEnvironmentService\n\t) {\n\t\tsuper(workspace, { currentProfile: userDataProfileService.currentProfile, defaultProfile: userDataProfilesService.defaultProfile }, mainProcessService, environmentService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.userDataProfileService.onDidChangeCurrentProfile(e => e.join(this.switchToProfile(e.profile))));\n\t}\n}\n"]}