{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/search/node/fileSearch.ts"],"names":[],"mappings":"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","file":"fileSearch.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as childProcess from 'child_process';\nimport * as fs from 'fs';\nimport * as path from 'vs/base/common/path';\nimport { Readable } from 'stream';\nimport { StringDecoder } from 'string_decoder';\nimport * as arrays from 'vs/base/common/arrays';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport * as glob from 'vs/base/common/glob';\nimport * as normalization from 'vs/base/common/normalization';\nimport { isEqualOrParent } from 'vs/base/common/extpath';\nimport * as platform from 'vs/base/common/platform';\nimport { StopWatch } from 'vs/base/common/stopwatch';\nimport * as strings from 'vs/base/common/strings';\nimport * as types from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport { Promises } from 'vs/base/node/pfs';\nimport { IFileQuery, IFolderQuery, IProgressMessage, ISearchEngineStats, IRawFileMatch, ISearchEngine, ISearchEngineSuccess, isFilePatternMatch, hasSiblingFn } from 'vs/workbench/services/search/common/search';\nimport { spawnRipgrepCmd } from './ripgrepFileSearch';\nimport { prepareQuery } from 'vs/base/common/fuzzyScorer';\n\ninterface IDirectoryEntry extends IRawFileMatch {\n\tbase: string;\n\tbasename: string;\n}\n\ninterface IDirectoryTree {\n\trootEntries: IDirectoryEntry[];\n\tpathToEntries: { [relativePath: string]: IDirectoryEntry[] };\n}\n\nconst killCmds = new Set<() => void>();\nprocess.on('exit', () => {\n\tkillCmds.forEach(cmd => cmd());\n});\n\nexport class FileWalker {\n\tprivate config: IFileQuery;\n\tprivate filePattern: string;\n\tprivate normalizedFilePatternLowercase: string | null = null;\n\tprivate includePattern: glob.ParsedExpression | undefined;\n\tprivate maxResults: number | null;\n\tprivate exists: boolean;\n\tprivate maxFilesize: number | null = null;\n\tprivate isLimitHit: boolean;\n\tprivate resultCount: number;\n\tprivate isCanceled = false;\n\tprivate fileWalkSW: StopWatch | null = null;\n\tprivate directoriesWalked: number;\n\tprivate filesWalked: number;\n\tprivate errors: string[];\n\tprivate cmdSW: StopWatch | null = null;\n\tprivate cmdResultCount: number = 0;\n\n\tprivate folderExcludePatterns: Map<string, AbsoluteAndRelativeParsedExpression>;\n\tprivate globalExcludePattern: glob.ParsedExpression | undefined;\n\n\tprivate walkedPaths: { [path: string]: boolean };\n\n\tconstructor(config: IFileQuery) {\n\t\tthis.config = config;\n\t\tthis.filePattern = config.filePattern || '';\n\t\tthis.includePattern = config.includePattern && glob.parse(config.includePattern);\n\t\tthis.maxResults = config.maxResults || null;\n\t\tthis.exists = !!config.exists;\n\t\tthis.walkedPaths = Object.create(null);\n\t\tthis.resultCount = 0;\n\t\tthis.isLimitHit = false;\n\t\tthis.directoriesWalked = 0;\n\t\tthis.filesWalked = 0;\n\t\tthis.errors = [];\n\n\t\tif (this.filePattern) {\n\t\t\tthis.normalizedFilePatternLowercase = prepareQuery(this.filePattern).normalizedLowercase;\n\t\t}\n\n\t\tthis.globalExcludePattern = config.excludePattern && glob.parse(config.excludePattern);\n\t\tthis.folderExcludePatterns = new Map<string, AbsoluteAndRelativeParsedExpression>();\n\n\t\tconfig.folderQueries.forEach(folderQuery => {\n\t\t\tconst folderExcludeExpression: glob.IExpression = Object.assign({}, folderQuery.excludePattern || {}, this.config.excludePattern || {});\n\n\t\t\t// Add excludes for other root folders\n\t\t\tconst fqPath = folderQuery.folder.fsPath;\n\t\t\tconfig.folderQueries\n\t\t\t\t.map(rootFolderQuery => rootFolderQuery.folder.fsPath)\n\t\t\t\t.filter(rootFolder => rootFolder !== fqPath)\n\t\t\t\t.forEach(otherRootFolder => {\n\t\t\t\t\t// Exclude nested root folders\n\t\t\t\t\tif (isEqualOrParent(otherRootFolder, fqPath)) {\n\t\t\t\t\t\tfolderExcludeExpression[path.relative(fqPath, otherRootFolder)] = true;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\tthis.folderExcludePatterns.set(fqPath, new AbsoluteAndRelativeParsedExpression(folderExcludeExpression, fqPath));\n\t\t});\n\t}\n\n\tcancel(): void {\n\t\tthis.isCanceled = true;\n\t\tkillCmds.forEach(cmd => cmd());\n\t}\n\n\twalk(folderQueries: IFolderQuery[], extraFiles: URI[], onResult: (result: IRawFileMatch) => void, onMessage: (message: IProgressMessage) => void, done: (error: Error | null, isLimitHit: boolean) => void): void {\n\t\tthis.fileWalkSW = StopWatch.create(false);\n\n\t\t// Support that the file pattern is a full path to a file that exists\n\t\tif (this.isCanceled) {\n\t\t\treturn done(null, this.isLimitHit);\n\t\t}\n\n\t\t// For each extra file\n\t\textraFiles.forEach(extraFilePath => {\n\t\t\tconst basename = path.basename(extraFilePath.fsPath);\n\t\t\tif (this.globalExcludePattern && this.globalExcludePattern(extraFilePath.fsPath, basename)) {\n\t\t\t\treturn; // excluded\n\t\t\t}\n\n\t\t\t// File: Check for match on file pattern and include pattern\n\t\t\tthis.matchFile(onResult, { relativePath: extraFilePath.fsPath /* no workspace relative path */, searchPath: undefined });\n\t\t});\n\n\t\tthis.cmdSW = StopWatch.create(false);\n\n\t\t// For each root folder\n\t\tthis.parallel<IFolderQuery, void>(folderQueries, (folderQuery: IFolderQuery, rootFolderDone: (err: Error | null, result: void) => void) => {\n\t\t\tthis.call(this.cmdTraversal, this, folderQuery, onResult, onMessage, (err?: Error) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tconst errorMessage = toErrorMessage(err);\n\t\t\t\t\tconsole.error(errorMessage);\n\t\t\t\t\tthis.errors.push(errorMessage);\n\t\t\t\t\trootFolderDone(err, undefined);\n\t\t\t\t} else {\n\t\t\t\t\trootFolderDone(null, undefined);\n\t\t\t\t}\n\t\t\t});\n\t\t}, (errors, _result) => {\n\t\t\tthis.fileWalkSW!.stop();\n\t\t\tconst err = errors ? arrays.coalesce(errors)[0] : null;\n\t\t\tdone(err, this.isLimitHit);\n\t\t});\n\t}\n\n\tprivate parallel<T, E>(list: T[], fn: (item: T, callback: (err: Error | null, result: E | null) => void) => void, callback: (err: Array<Error | null> | null, result: E[]) => void): void {\n\t\tconst results = new Array(list.length);\n\t\tconst errors = new Array<Error | null>(list.length);\n\t\tlet didErrorOccur = false;\n\t\tlet doneCount = 0;\n\n\t\tif (list.length === 0) {\n\t\t\treturn callback(null, []);\n\t\t}\n\n\t\tlist.forEach((item, index) => {\n\t\t\tfn(item, (error, result) => {\n\t\t\t\tif (error) {\n\t\t\t\t\tdidErrorOccur = true;\n\t\t\t\t\tresults[index] = null;\n\t\t\t\t\terrors[index] = error;\n\t\t\t\t} else {\n\t\t\t\t\tresults[index] = result;\n\t\t\t\t\terrors[index] = null;\n\t\t\t\t}\n\n\t\t\t\tif (++doneCount === list.length) {\n\t\t\t\t\treturn callback(didErrorOccur ? errors : null, results);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate call<F extends Function>(fun: F, that: any, ...args: any[]): void {\n\t\ttry {\n\t\t\tfun.apply(that, args);\n\t\t} catch (e) {\n\t\t\targs[args.length - 1](e);\n\t\t}\n\t}\n\n\tprivate cmdTraversal(folderQuery: IFolderQuery, onResult: (result: IRawFileMatch) => void, onMessage: (message: IProgressMessage) => void, cb: (err?: Error) => void): void {\n\t\tconst rootFolder = folderQuery.folder.fsPath;\n\t\tconst isMac = platform.isMacintosh;\n\n\t\tconst killCmd = () => cmd && cmd.kill();\n\t\tkillCmds.add(killCmd);\n\n\t\tlet done = (err?: Error) => {\n\t\t\tkillCmds.delete(killCmd);\n\t\t\tdone = () => { };\n\t\t\tcb(err);\n\t\t};\n\t\tlet leftover = '';\n\t\tconst tree = this.initDirectoryTree();\n\n\t\tconst ripgrep = spawnRipgrepCmd(this.config, folderQuery, this.config.includePattern, this.folderExcludePatterns.get(folderQuery.folder.fsPath)!.expression);\n\t\tconst cmd = ripgrep.cmd;\n\t\tconst noSiblingsClauses = !Object.keys(ripgrep.siblingClauses).length;\n\n\t\tconst escapedArgs = ripgrep.rgArgs.args\n\t\t\t.map(arg => arg.match(/^-/) ? arg : `'${arg}'`)\n\t\t\t.join(' ');\n\n\t\tlet rgCmd = `${ripgrep.rgDiskPath} ${escapedArgs}\\n - cwd: ${ripgrep.cwd}`;\n\t\tif (ripgrep.rgArgs.siblingClauses) {\n\t\t\trgCmd += `\\n - Sibling clauses: ${JSON.stringify(ripgrep.rgArgs.siblingClauses)}`;\n\t\t}\n\t\tonMessage({ message: rgCmd });\n\n\t\tthis.cmdResultCount = 0;\n\t\tthis.collectStdout(cmd, 'utf8', onMessage, (err: Error | null, stdout?: string, last?: boolean) => {\n\t\t\tif (err) {\n\t\t\t\tdone(err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (this.isLimitHit) {\n\t\t\t\tdone();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Mac: uses NFD unicode form on disk, but we want NFC\n\t\t\tconst normalized = leftover + (isMac ? normalization.normalizeNFC(stdout || '') : stdout);\n\t\t\tconst relativeFiles = normalized.split('\\n');\n\n\t\t\tif (last) {\n\t\t\t\tconst n = relativeFiles.length;\n\t\t\t\trelativeFiles[n - 1] = relativeFiles[n - 1].trim();\n\t\t\t\tif (!relativeFiles[n - 1]) {\n\t\t\t\t\trelativeFiles.pop();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tleftover = relativeFiles.pop() || '';\n\t\t\t}\n\n\t\t\tif (relativeFiles.length && relativeFiles[0].indexOf('\\n') !== -1) {\n\t\t\t\tdone(new Error('Splitting up files failed'));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.cmdResultCount += relativeFiles.length;\n\n\t\t\tif (noSiblingsClauses) {\n\t\t\t\tfor (const relativePath of relativeFiles) {\n\t\t\t\t\tthis.matchFile(onResult, { base: rootFolder, relativePath, searchPath: this.getSearchPath(folderQuery, relativePath) });\n\t\t\t\t\tif (this.isLimitHit) {\n\t\t\t\t\t\tkillCmd();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (last || this.isLimitHit) {\n\t\t\t\t\tdone();\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// TODO: Optimize siblings clauses with ripgrep here.\n\t\t\tthis.addDirectoryEntries(folderQuery, tree, rootFolder, relativeFiles, onResult);\n\n\t\t\tif (last) {\n\t\t\t\tthis.matchDirectoryTree(tree, rootFolder, onResult);\n\t\t\t\tdone();\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Public for testing.\n\t */\n\tspawnFindCmd(folderQuery: IFolderQuery) {\n\t\tconst excludePattern = this.folderExcludePatterns.get(folderQuery.folder.fsPath)!;\n\t\tconst basenames = excludePattern.getBasenameTerms();\n\t\tconst pathTerms = excludePattern.getPathTerms();\n\t\tconst args = ['-L', '.'];\n\t\tif (basenames.length || pathTerms.length) {\n\t\t\targs.push('-not', '(', '(');\n\t\t\tfor (const basename of basenames) {\n\t\t\t\targs.push('-name', basename);\n\t\t\t\targs.push('-o');\n\t\t\t}\n\t\t\tfor (const path of pathTerms) {\n\t\t\t\targs.push('-path', path);\n\t\t\t\targs.push('-o');\n\t\t\t}\n\t\t\targs.pop();\n\t\t\targs.push(')', '-prune', ')');\n\t\t}\n\t\targs.push('-type', 'f');\n\t\treturn childProcess.spawn('find', args, { cwd: folderQuery.folder.fsPath });\n\t}\n\n\t/**\n\t * Public for testing.\n\t */\n\treadStdout(cmd: childProcess.ChildProcess, encoding: BufferEncoding, cb: (err: Error | null, stdout?: string) => void): void {\n\t\tlet all = '';\n\t\tthis.collectStdout(cmd, encoding, () => { }, (err: Error | null, stdout?: string, last?: boolean) => {\n\t\t\tif (err) {\n\t\t\t\tcb(err);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tall += stdout;\n\t\t\tif (last) {\n\t\t\t\tcb(null, all);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate collectStdout(cmd: childProcess.ChildProcess, encoding: BufferEncoding, onMessage: (message: IProgressMessage) => void, cb: (err: Error | null, stdout?: string, last?: boolean) => void): void {\n\t\tlet onData = (err: Error | null, stdout?: string, last?: boolean) => {\n\t\t\tif (err || last) {\n\t\t\t\tonData = () => { };\n\n\t\t\t\tthis.cmdSW?.stop();\n\t\t\t}\n\t\t\tcb(err, stdout, last);\n\t\t};\n\n\t\tlet gotData = false;\n\t\tif (cmd.stdout) {\n\t\t\t// Should be non-null, but #38195\n\t\t\tthis.forwardData(cmd.stdout, encoding, onData);\n\t\t\tcmd.stdout.once('data', () => gotData = true);\n\t\t} else {\n\t\t\tonMessage({ message: 'stdout is null' });\n\t\t}\n\n\t\tlet stderr: Buffer[];\n\t\tif (cmd.stderr) {\n\t\t\t// Should be non-null, but #38195\n\t\t\tstderr = this.collectData(cmd.stderr);\n\t\t} else {\n\t\t\tonMessage({ message: 'stderr is null' });\n\t\t}\n\n\t\tcmd.on('error', (err: Error) => {\n\t\t\tonData(err);\n\t\t});\n\n\t\tcmd.on('close', (code: number) => {\n\t\t\t// ripgrep returns code=1 when no results are found\n\t\t\tlet stderrText: string;\n\t\t\tif (!gotData && (stderrText = this.decodeData(stderr, encoding)) && rgErrorMsgForDisplay(stderrText)) {\n\t\t\t\tonData(new Error(`command failed with error code ${code}: ${this.decodeData(stderr, encoding)}`));\n\t\t\t} else {\n\t\t\t\tif (this.exists && code === 0) {\n\t\t\t\t\tthis.isLimitHit = true;\n\t\t\t\t}\n\t\t\t\tonData(null, '', true);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate forwardData(stream: Readable, encoding: BufferEncoding, cb: (err: Error | null, stdout?: string) => void): StringDecoder {\n\t\tconst decoder = new StringDecoder(encoding);\n\t\tstream.on('data', (data: Buffer) => {\n\t\t\tcb(null, decoder.write(data));\n\t\t});\n\t\treturn decoder;\n\t}\n\n\tprivate collectData(stream: Readable): Buffer[] {\n\t\tconst buffers: Buffer[] = [];\n\t\tstream.on('data', (data: Buffer) => {\n\t\t\tbuffers.push(data);\n\t\t});\n\t\treturn buffers;\n\t}\n\n\tprivate decodeData(buffers: Buffer[], encoding: BufferEncoding): string {\n\t\tconst decoder = new StringDecoder(encoding);\n\t\treturn buffers.map(buffer => decoder.write(buffer)).join('');\n\t}\n\n\tprivate initDirectoryTree(): IDirectoryTree {\n\t\tconst tree: IDirectoryTree = {\n\t\t\trootEntries: [],\n\t\t\tpathToEntries: Object.create(null)\n\t\t};\n\t\ttree.pathToEntries['.'] = tree.rootEntries;\n\t\treturn tree;\n\t}\n\n\tprivate addDirectoryEntries(folderQuery: IFolderQuery, { pathToEntries }: IDirectoryTree, base: string, relativeFiles: string[], onResult: (result: IRawFileMatch) => void) {\n\t\t// Support relative paths to files from a root resource (ignores excludes)\n\t\tif (relativeFiles.indexOf(this.filePattern) !== -1) {\n\t\t\tthis.matchFile(onResult, {\n\t\t\t\tbase,\n\t\t\t\trelativePath: this.filePattern,\n\t\t\t\tsearchPath: this.getSearchPath(folderQuery, this.filePattern)\n\t\t\t});\n\t\t}\n\n\t\tconst add = (relativePath: string) => {\n\t\t\tconst basename = path.basename(relativePath);\n\t\t\tconst dirname = path.dirname(relativePath);\n\t\t\tlet entries = pathToEntries[dirname];\n\t\t\tif (!entries) {\n\t\t\t\tentries = pathToEntries[dirname] = [];\n\t\t\t\tadd(dirname);\n\t\t\t}\n\t\t\tentries.push({\n\t\t\t\tbase,\n\t\t\t\trelativePath,\n\t\t\t\tbasename,\n\t\t\t\tsearchPath: this.getSearchPath(folderQuery, relativePath),\n\t\t\t});\n\t\t};\n\t\trelativeFiles.forEach(add);\n\t}\n\n\tprivate matchDirectoryTree({ rootEntries, pathToEntries }: IDirectoryTree, rootFolder: string, onResult: (result: IRawFileMatch) => void) {\n\t\tconst self = this;\n\t\tconst excludePattern = this.folderExcludePatterns.get(rootFolder)!;\n\t\tconst filePattern = this.filePattern;\n\t\tfunction matchDirectory(entries: IDirectoryEntry[]) {\n\t\t\tself.directoriesWalked++;\n\t\t\tconst hasSibling = hasSiblingFn(() => entries.map(entry => entry.basename));\n\t\t\tfor (let i = 0, n = entries.length; i < n; i++) {\n\t\t\t\tconst entry = entries[i];\n\t\t\t\tconst { relativePath, basename } = entry;\n\n\t\t\t\t// Check exclude pattern\n\t\t\t\t// If the user searches for the exact file name, we adjust the glob matching\n\t\t\t\t// to ignore filtering by siblings because the user seems to know what they\n\t\t\t\t// are searching for and we want to include the result in that case anyway\n\t\t\t\tif (excludePattern.test(relativePath, basename, filePattern !== basename ? hasSibling : undefined)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tconst sub = pathToEntries[relativePath];\n\t\t\t\tif (sub) {\n\t\t\t\t\tmatchDirectory(sub);\n\t\t\t\t} else {\n\t\t\t\t\tself.filesWalked++;\n\t\t\t\t\tif (relativePath === filePattern) {\n\t\t\t\t\t\tcontinue; // ignore file if its path matches with the file pattern because that is already matched above\n\t\t\t\t\t}\n\n\t\t\t\t\tself.matchFile(onResult, entry);\n\t\t\t\t}\n\n\t\t\t\tif (self.isLimitHit) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tmatchDirectory(rootEntries);\n\t}\n\n\tgetStats(): ISearchEngineStats {\n\t\treturn {\n\t\t\tcmdTime: this.cmdSW!.elapsed(),\n\t\t\tfileWalkTime: this.fileWalkSW!.elapsed(),\n\t\t\tdirectoriesWalked: this.directoriesWalked,\n\t\t\tfilesWalked: this.filesWalked,\n\t\t\tcmdResultCount: this.cmdResultCount\n\t\t};\n\t}\n\n\tprivate doWalk(folderQuery: IFolderQuery, relativeParentPath: string, files: string[], onResult: (result: IRawFileMatch) => void, done: (error?: Error) => void): void {\n\t\tconst rootFolder = folderQuery.folder;\n\n\t\t// Execute tasks on each file in parallel to optimize throughput\n\t\tconst hasSibling = hasSiblingFn(() => files);\n\t\tthis.parallel(files, (file: string, clb: (error: Error | null, _?: any) => void): void => {\n\n\t\t\t// Check canceled\n\t\t\tif (this.isCanceled || this.isLimitHit) {\n\t\t\t\treturn clb(null);\n\t\t\t}\n\n\t\t\t// Check exclude pattern\n\t\t\t// If the user searches for the exact file name, we adjust the glob matching\n\t\t\t// to ignore filtering by siblings because the user seems to know what they\n\t\t\t// are searching for and we want to include the result in that case anyway\n\t\t\tconst currentRelativePath = relativeParentPath ? [relativeParentPath, file].join(path.sep) : file;\n\t\t\tif (this.folderExcludePatterns.get(folderQuery.folder.fsPath)!.test(currentRelativePath, file, this.config.filePattern !== file ? hasSibling : undefined)) {\n\t\t\t\treturn clb(null);\n\t\t\t}\n\n\t\t\t// Use lstat to detect links\n\t\t\tconst currentAbsolutePath = [rootFolder.fsPath, currentRelativePath].join(path.sep);\n\t\t\tfs.lstat(currentAbsolutePath, (error, lstat) => {\n\t\t\t\tif (error || this.isCanceled || this.isLimitHit) {\n\t\t\t\t\treturn clb(null);\n\t\t\t\t}\n\n\t\t\t\t// If the path is a link, we must instead use fs.stat() to find out if the\n\t\t\t\t// link is a directory or not because lstat will always return the stat of\n\t\t\t\t// the link which is always a file.\n\t\t\t\tthis.statLinkIfNeeded(currentAbsolutePath, lstat, (error, stat) => {\n\t\t\t\t\tif (error || this.isCanceled || this.isLimitHit) {\n\t\t\t\t\t\treturn clb(null);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Directory: Follow directories\n\t\t\t\t\tif (stat.isDirectory()) {\n\t\t\t\t\t\tthis.directoriesWalked++;\n\n\t\t\t\t\t\t// to really prevent loops with links we need to resolve the real path of them\n\t\t\t\t\t\treturn this.realPathIfNeeded(currentAbsolutePath, lstat, (error, realpath) => {\n\t\t\t\t\t\t\tif (error || this.isCanceled || this.isLimitHit) {\n\t\t\t\t\t\t\t\treturn clb(null);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\trealpath = realpath || '';\n\t\t\t\t\t\t\tif (this.walkedPaths[realpath]) {\n\t\t\t\t\t\t\t\treturn clb(null); // escape when there are cycles (can happen with symlinks)\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.walkedPaths[realpath] = true; // remember as walked\n\n\t\t\t\t\t\t\t// Continue walking\n\t\t\t\t\t\t\treturn Promises.readdir(currentAbsolutePath).then(children => {\n\t\t\t\t\t\t\t\tif (this.isCanceled || this.isLimitHit) {\n\t\t\t\t\t\t\t\t\treturn clb(null);\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tthis.doWalk(folderQuery, currentRelativePath, children, onResult, err => clb(err || null));\n\t\t\t\t\t\t\t}, error => {\n\t\t\t\t\t\t\t\tclb(null);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t// File: Check for match on file pattern and include pattern\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.filesWalked++;\n\t\t\t\t\t\tif (currentRelativePath === this.filePattern) {\n\t\t\t\t\t\t\treturn clb(null, undefined); // ignore file if its path matches with the file pattern because checkFilePatternRelativeMatch() takes care of those\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (this.maxFilesize && types.isNumber(stat.size) && stat.size > this.maxFilesize) {\n\t\t\t\t\t\t\treturn clb(null, undefined); // ignore file if max file size is hit\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.matchFile(onResult, {\n\t\t\t\t\t\t\tbase: rootFolder.fsPath,\n\t\t\t\t\t\t\trelativePath: currentRelativePath,\n\t\t\t\t\t\t\tsearchPath: this.getSearchPath(folderQuery, currentRelativePath),\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\t// Unwind\n\t\t\t\t\treturn clb(null, undefined);\n\t\t\t\t});\n\t\t\t});\n\t\t}, (error: Array<Error | null> | null): void => {\n\t\t\tconst filteredErrors = error ? arrays.coalesce(error) : error; // find any error by removing null values first\n\t\t\treturn done(filteredErrors && filteredErrors.length > 0 ? filteredErrors[0] : undefined);\n\t\t});\n\t}\n\n\tprivate matchFile(onResult: (result: IRawFileMatch) => void, candidate: IRawFileMatch): void {\n\t\tif (this.isFileMatch(candidate) && (!this.includePattern || this.includePattern(candidate.relativePath, path.basename(candidate.relativePath)))) {\n\t\t\tthis.resultCount++;\n\n\t\t\tif (this.exists || (this.maxResults && this.resultCount > this.maxResults)) {\n\t\t\t\tthis.isLimitHit = true;\n\t\t\t}\n\n\t\t\tif (!this.isLimitHit) {\n\t\t\t\tonResult(candidate);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate isFileMatch(candidate: IRawFileMatch): boolean {\n\t\t// Check for search pattern\n\t\tif (this.filePattern) {\n\t\t\tif (this.filePattern === '*') {\n\t\t\t\treturn true; // support the all-matching wildcard\n\t\t\t}\n\n\t\t\tif (this.normalizedFilePatternLowercase) {\n\t\t\t\treturn isFilePatternMatch(candidate, this.normalizedFilePatternLowercase);\n\t\t\t}\n\t\t}\n\n\t\t// No patterns means we match all\n\t\treturn true;\n\t}\n\n\tprivate statLinkIfNeeded(path: string, lstat: fs.Stats, clb: (error: Error | null, stat: fs.Stats) => void): void {\n\t\tif (lstat.isSymbolicLink()) {\n\t\t\treturn fs.stat(path, clb); // stat the target the link points to\n\t\t}\n\n\t\treturn clb(null, lstat); // not a link, so the stat is already ok for us\n\t}\n\n\tprivate realPathIfNeeded(path: string, lstat: fs.Stats, clb: (error: Error | null, realpath?: string) => void): void {\n\t\tif (lstat.isSymbolicLink()) {\n\t\t\treturn fs.realpath(path, (error, realpath) => {\n\t\t\t\tif (error) {\n\t\t\t\t\treturn clb(error);\n\t\t\t\t}\n\n\t\t\t\treturn clb(null, realpath);\n\t\t\t});\n\t\t}\n\n\t\treturn clb(null, path);\n\t}\n\n\t/**\n\t * If we're searching for files in multiple workspace folders, then better prepend the\n\t * name of the workspace folder to the path of the file. This way we'll be able to\n\t * better filter files that are all on the top of a workspace folder and have all the\n\t * same name. A typical example are `package.json` or `README.md` files.\n\t */\n\tprivate getSearchPath(folderQuery: IFolderQuery, relativePath: string): string {\n\t\tif (folderQuery.folderName) {\n\t\t\treturn path.join(folderQuery.folderName, relativePath);\n\t\t}\n\t\treturn relativePath;\n\t}\n}\n\nexport class Engine implements ISearchEngine<IRawFileMatch> {\n\tprivate folderQueries: IFolderQuery[];\n\tprivate extraFiles: URI[];\n\tprivate walker: FileWalker;\n\n\tconstructor(config: IFileQuery) {\n\t\tthis.folderQueries = config.folderQueries;\n\t\tthis.extraFiles = config.extraFileResources || [];\n\n\t\tthis.walker = new FileWalker(config);\n\t}\n\n\tsearch(onResult: (result: IRawFileMatch) => void, onProgress: (progress: IProgressMessage) => void, done: (error: Error | null, complete: ISearchEngineSuccess) => void): void {\n\t\tthis.walker.walk(this.folderQueries, this.extraFiles, onResult, onProgress, (err: Error | null, isLimitHit: boolean) => {\n\t\t\tdone(err, {\n\t\t\t\tlimitHit: isLimitHit,\n\t\t\t\tstats: this.walker.getStats(),\n\t\t\t\tmessages: [],\n\t\t\t});\n\t\t});\n\t}\n\n\tcancel(): void {\n\t\tthis.walker.cancel();\n\t}\n}\n\n/**\n * This class exists to provide one interface on top of two ParsedExpressions, one for absolute expressions and one for relative expressions.\n * The absolute and relative expressions don't \"have\" to be kept separate, but this keeps us from having to path.join every single\n * file searched, it's only used for a text search with a searchPath\n */\nclass AbsoluteAndRelativeParsedExpression {\n\tprivate absoluteParsedExpr: glob.ParsedExpression | undefined;\n\tprivate relativeParsedExpr: glob.ParsedExpression | undefined;\n\n\tconstructor(public expression: glob.IExpression, private root: string) {\n\t\tthis.init(expression);\n\t}\n\n\t/**\n\t * Split the IExpression into its absolute and relative components, and glob.parse them separately.\n\t */\n\tprivate init(expr: glob.IExpression): void {\n\t\tlet absoluteGlobExpr: glob.IExpression | undefined;\n\t\tlet relativeGlobExpr: glob.IExpression | undefined;\n\t\tObject.keys(expr)\n\t\t\t.filter(key => expr[key])\n\t\t\t.forEach(key => {\n\t\t\t\tif (path.isAbsolute(key)) {\n\t\t\t\t\tabsoluteGlobExpr = absoluteGlobExpr || glob.getEmptyExpression();\n\t\t\t\t\tabsoluteGlobExpr[key] = expr[key];\n\t\t\t\t} else {\n\t\t\t\t\trelativeGlobExpr = relativeGlobExpr || glob.getEmptyExpression();\n\t\t\t\t\trelativeGlobExpr[key] = expr[key];\n\t\t\t\t}\n\t\t\t});\n\n\t\tthis.absoluteParsedExpr = absoluteGlobExpr && glob.parse(absoluteGlobExpr, { trimForExclusions: true });\n\t\tthis.relativeParsedExpr = relativeGlobExpr && glob.parse(relativeGlobExpr, { trimForExclusions: true });\n\t}\n\n\ttest(_path: string, basename?: string, hasSibling?: (name: string) => boolean | Promise<boolean>): string | Promise<string | null> | undefined | null {\n\t\treturn (this.relativeParsedExpr && this.relativeParsedExpr(_path, basename, hasSibling)) ||\n\t\t\t(this.absoluteParsedExpr && this.absoluteParsedExpr(path.join(this.root, _path), basename, hasSibling));\n\t}\n\n\tgetBasenameTerms(): string[] {\n\t\tconst basenameTerms: string[] = [];\n\t\tif (this.absoluteParsedExpr) {\n\t\t\tbasenameTerms.push(...glob.getBasenameTerms(this.absoluteParsedExpr));\n\t\t}\n\n\t\tif (this.relativeParsedExpr) {\n\t\t\tbasenameTerms.push(...glob.getBasenameTerms(this.relativeParsedExpr));\n\t\t}\n\n\t\treturn basenameTerms;\n\t}\n\n\tgetPathTerms(): string[] {\n\t\tconst pathTerms: string[] = [];\n\t\tif (this.absoluteParsedExpr) {\n\t\t\tpathTerms.push(...glob.getPathTerms(this.absoluteParsedExpr));\n\t\t}\n\n\t\tif (this.relativeParsedExpr) {\n\t\t\tpathTerms.push(...glob.getPathTerms(this.relativeParsedExpr));\n\t\t}\n\n\t\treturn pathTerms;\n\t}\n}\n\nfunction rgErrorMsgForDisplay(msg: string): string | undefined {\n\tconst lines = msg.trim().split('\\n');\n\tconst firstLine = lines[0].trim();\n\n\tif (firstLine.startsWith('Error parsing regex')) {\n\t\treturn firstLine;\n\t}\n\n\tif (firstLine.startsWith('regex parse error')) {\n\t\treturn strings.uppercaseFirstLetter(lines[lines.length - 1].trim());\n\t}\n\n\tif (firstLine.startsWith('error parsing glob') ||\n\t\tfirstLine.startsWith('unsupported encoding')) {\n\t\t// Uppercase first letter\n\t\treturn firstLine.charAt(0).toUpperCase() + firstLine.substr(1);\n\t}\n\n\tif (firstLine === `Literal '\\\\n' not allowed.`) {\n\t\t// I won't localize this because none of the Ripgrep error messages are localized\n\t\treturn `Literal '\\\\n' currently not supported`;\n\t}\n\n\tif (firstLine.startsWith('Literal ')) {\n\t\t// Other unsupported chars\n\t\treturn firstLine;\n\t}\n\n\treturn undefined;\n}\n"]}