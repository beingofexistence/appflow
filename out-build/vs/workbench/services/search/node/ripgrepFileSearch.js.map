{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/search/node/ripgrepFileSearch.ts"],"names":[],"mappings":"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","file":"ripgrepFileSearch.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as cp from 'child_process';\nimport * as path from 'vs/base/common/path';\nimport * as glob from 'vs/base/common/glob';\nimport { normalizeNFD } from 'vs/base/common/normalization';\nimport * as extpath from 'vs/base/common/extpath';\nimport { isMacintosh as isMac } from 'vs/base/common/platform';\nimport * as strings from 'vs/base/common/strings';\nimport { IFileQuery, IFolderQuery } from 'vs/workbench/services/search/common/search';\nimport { anchorGlob } from 'vs/workbench/services/search/node/ripgrepSearchUtils';\nimport { rgPath } from '@vscode/ripgrep';\n\n// If @vscode/ripgrep is in an .asar file, then the binary is unpacked.\nconst rgDiskPath = rgPath.replace(/\\bnode_modules\\.asar\\b/, 'node_modules.asar.unpacked');\n\nexport function spawnRipgrepCmd(config: IFileQuery, folderQuery: IFolderQuery, includePattern?: glob.IExpression, excludePattern?: glob.IExpression) {\n\tconst rgArgs = getRgArgs(config, folderQuery, includePattern, excludePattern);\n\tconst cwd = folderQuery.folder.fsPath;\n\treturn {\n\t\tcmd: cp.spawn(rgDiskPath, rgArgs.args, { cwd }),\n\t\trgDiskPath,\n\t\tsiblingClauses: rgArgs.siblingClauses,\n\t\trgArgs,\n\t\tcwd\n\t};\n}\n\nfunction getRgArgs(config: IFileQuery, folderQuery: IFolderQuery, includePattern?: glob.IExpression, excludePattern?: glob.IExpression) {\n\tconst args = ['--files', '--hidden', '--case-sensitive', '--no-require-git'];\n\n\t// includePattern can't have siblingClauses\n\tfoldersToIncludeGlobs([folderQuery], includePattern, false).forEach(globArg => {\n\t\tconst inclusion = anchorGlob(globArg);\n\t\targs.push('-g', inclusion);\n\t\tif (isMac) {\n\t\t\tconst normalized = normalizeNFD(inclusion);\n\t\t\tif (normalized !== inclusion) {\n\t\t\t\targs.push('-g', normalized);\n\t\t\t}\n\t\t}\n\t});\n\n\tconst rgGlobs = foldersToRgExcludeGlobs([folderQuery], excludePattern, undefined, false);\n\trgGlobs.globArgs.forEach(globArg => {\n\t\tconst exclusion = `!${anchorGlob(globArg)}`;\n\t\targs.push('-g', exclusion);\n\t\tif (isMac) {\n\t\t\tconst normalized = normalizeNFD(exclusion);\n\t\t\tif (normalized !== exclusion) {\n\t\t\t\targs.push('-g', normalized);\n\t\t\t}\n\t\t}\n\t});\n\tif (folderQuery.disregardIgnoreFiles !== false) {\n\t\t// Don't use .gitignore or .ignore\n\t\targs.push('--no-ignore');\n\t} else if (folderQuery.disregardParentIgnoreFiles !== false) {\n\t\targs.push('--no-ignore-parent');\n\t}\n\n\t// Follow symlinks\n\tif (!folderQuery.ignoreSymlinks) {\n\t\targs.push('--follow');\n\t}\n\n\tif (config.exists) {\n\t\targs.push('--quiet');\n\t}\n\n\targs.push('--no-config');\n\tif (folderQuery.disregardGlobalIgnoreFiles) {\n\t\targs.push('--no-ignore-global');\n\t}\n\n\treturn {\n\t\targs,\n\t\tsiblingClauses: rgGlobs.siblingClauses\n\t};\n}\n\ninterface IRgGlobResult {\n\tglobArgs: string[];\n\tsiblingClauses: glob.IExpression;\n}\n\nfunction foldersToRgExcludeGlobs(folderQueries: IFolderQuery[], globalExclude?: glob.IExpression, excludesToSkip?: Set<string>, absoluteGlobs = true): IRgGlobResult {\n\tconst globArgs: string[] = [];\n\tlet siblingClauses: glob.IExpression = {};\n\tfolderQueries.forEach(folderQuery => {\n\t\tconst totalExcludePattern = Object.assign({}, folderQuery.excludePattern || {}, globalExclude || {});\n\t\tconst result = globExprsToRgGlobs(totalExcludePattern, absoluteGlobs ? folderQuery.folder.fsPath : undefined, excludesToSkip);\n\t\tglobArgs.push(...result.globArgs);\n\t\tif (result.siblingClauses) {\n\t\t\tsiblingClauses = Object.assign(siblingClauses, result.siblingClauses);\n\t\t}\n\t});\n\n\treturn { globArgs, siblingClauses };\n}\n\nfunction foldersToIncludeGlobs(folderQueries: IFolderQuery[], globalInclude?: glob.IExpression, absoluteGlobs = true): string[] {\n\tconst globArgs: string[] = [];\n\tfolderQueries.forEach(folderQuery => {\n\t\tconst totalIncludePattern = Object.assign({}, globalInclude || {}, folderQuery.includePattern || {});\n\t\tconst result = globExprsToRgGlobs(totalIncludePattern, absoluteGlobs ? folderQuery.folder.fsPath : undefined);\n\t\tglobArgs.push(...result.globArgs);\n\t});\n\n\treturn globArgs;\n}\n\nfunction globExprsToRgGlobs(patterns: glob.IExpression, folder?: string, excludesToSkip?: Set<string>): IRgGlobResult {\n\tconst globArgs: string[] = [];\n\tconst siblingClauses: glob.IExpression = {};\n\tObject.keys(patterns)\n\t\t.forEach(key => {\n\t\t\tif (excludesToSkip && excludesToSkip.has(key)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (!key) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst value = patterns[key];\n\t\t\tkey = trimTrailingSlash(folder ? getAbsoluteGlob(folder, key) : key);\n\n\t\t\t// glob.ts requires forward slashes, but a UNC path still must start with \\\\\n\t\t\t// #38165 and #38151\n\t\t\tif (key.startsWith('\\\\\\\\')) {\n\t\t\t\tkey = '\\\\\\\\' + key.substr(2).replace(/\\\\/g, '/');\n\t\t\t} else {\n\t\t\t\tkey = key.replace(/\\\\/g, '/');\n\t\t\t}\n\n\t\t\tif (typeof value === 'boolean' && value) {\n\t\t\t\tif (key.startsWith('\\\\\\\\')) {\n\t\t\t\t\t// Absolute globs UNC paths don't work properly, see #58758\n\t\t\t\t\tkey += '**';\n\t\t\t\t}\n\n\t\t\t\tglobArgs.push(fixDriveC(key));\n\t\t\t} else if (value && value.when) {\n\t\t\t\tsiblingClauses[key] = value;\n\t\t\t}\n\t\t});\n\n\treturn { globArgs, siblingClauses };\n}\n\n/**\n * Resolves a glob like \"node_modules/**\" in \"/foo/bar\" to \"/foo/bar/node_modules/**\".\n * Special cases C:/foo paths to write the glob like /foo instead - see https://github.com/BurntSushi/ripgrep/issues/530.\n *\n * Exported for testing\n */\nexport function getAbsoluteGlob(folder: string, key: string): string {\n\treturn path.isAbsolute(key) ?\n\t\tkey :\n\t\tpath.join(folder, key);\n}\n\nfunction trimTrailingSlash(str: string): string {\n\tstr = strings.rtrim(str, '\\\\');\n\treturn strings.rtrim(str, '/');\n}\n\nexport function fixDriveC(path: string): string {\n\tconst root = extpath.getRoot(path);\n\treturn root.toLowerCase() === 'c:/' ?\n\t\tpath.replace(/^c:[/\\\\]/i, '/') :\n\t\tpath;\n}\n"]}