{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/search/test/common/replace.test.ts"],"names":[],"mappings":"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","file":"replace.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as assert from 'assert';\nimport { ReplacePattern } from 'vs/workbench/services/search/common/replace';\n\nsuite('Replace Pattern test', () => {\n\n\ttest('parse replace string', () => {\n\t\tconst testParse = (input: string, expected: string, expectedHasParameters: boolean) => {\n\t\t\tlet actual = new ReplacePattern(input, { pattern: 'somepattern', isRegExp: true });\n\t\t\tassert.strictEqual(expected, actual.pattern);\n\t\t\tassert.strictEqual(expectedHasParameters, actual.hasParameters);\n\n\t\t\tactual = new ReplacePattern('hello' + input + 'hi', { pattern: 'sonepattern', isRegExp: true });\n\t\t\tassert.strictEqual('hello' + expected + 'hi', actual.pattern);\n\t\t\tassert.strictEqual(expectedHasParameters, actual.hasParameters);\n\t\t};\n\n\t\t// no backslash => no treatment\n\t\ttestParse('hello', 'hello', false);\n\n\t\t// \\t => TAB\n\t\ttestParse('\\\\thello', '\\thello', false);\n\n\t\t// \\n => LF\n\t\ttestParse('\\\\nhello', '\\nhello', false);\n\n\t\t// \\\\t => \\t\n\t\ttestParse('\\\\\\\\thello', '\\\\thello', false);\n\n\t\t// \\\\\\t => \\TAB\n\t\ttestParse('\\\\\\\\\\\\thello', '\\\\\\thello', false);\n\n\t\t// \\\\\\\\t => \\\\t\n\t\ttestParse('\\\\\\\\\\\\\\\\thello', '\\\\\\\\thello', false);\n\n\t\t// \\ at the end => no treatment\n\t\ttestParse('hello\\\\', 'hello\\\\', false);\n\n\t\t// \\ with unknown char => no treatment\n\t\ttestParse('hello\\\\x', 'hello\\\\x', false);\n\n\t\t// \\ with back reference => no treatment\n\t\ttestParse('hello\\\\0', 'hello\\\\0', false);\n\n\n\n\t\t// $1 => no treatment\n\t\ttestParse('hello$1', 'hello$1', true);\n\t\t// $2 => no treatment\n\t\ttestParse('hello$2', 'hello$2', true);\n\t\t// $12 => no treatment\n\t\ttestParse('hello$12', 'hello$12', true);\n\t\t// $99 => no treatment\n\t\ttestParse('hello$99', 'hello$99', true);\n\t\t// $99a => no treatment\n\t\ttestParse('hello$99a', 'hello$99a', true);\n\t\t// $100 => no treatment\n\t\ttestParse('hello$100', 'hello$100', false);\n\t\t// $100a => no treatment\n\t\ttestParse('hello$100a', 'hello$100a', false);\n\t\t// $10a0 => no treatment\n\t\ttestParse('hello$10a0', 'hello$10a0', true);\n\t\t// $$ => no treatment\n\t\ttestParse('hello$$', 'hello$$', false);\n\t\t// $$0 => no treatment\n\t\ttestParse('hello$$0', 'hello$$0', false);\n\n\t\t// $0 => $&\n\t\ttestParse('hello$0', 'hello$&', true);\n\t\ttestParse('hello$02', 'hello$&2', true);\n\n\t\ttestParse('hello$`', 'hello$`', true);\n\t\ttestParse('hello$\\'', 'hello$\\'', true);\n\t});\n\n\ttest('create pattern by passing regExp', () => {\n\t\tlet expected = /abc/;\n\t\tlet actual = new ReplacePattern('hello', false, expected).regExp;\n\t\tassert.deepStrictEqual(actual, expected);\n\n\t\texpected = /abc/;\n\t\tactual = new ReplacePattern('hello', false, /abc/g).regExp;\n\t\tassert.deepStrictEqual(actual, expected);\n\n\t\tlet testObject = new ReplacePattern('hello$0', false, /abc/g);\n\t\tassert.strictEqual(testObject.hasParameters, false);\n\n\t\ttestObject = new ReplacePattern('hello$0', true, /abc/g);\n\t\tassert.strictEqual(testObject.hasParameters, true);\n\t});\n\n\ttest('get replace string if given text is a complete match', () => {\n\t\tlet testObject = new ReplacePattern('hello', { pattern: 'bla', isRegExp: true });\n\t\tlet actual = testObject.getReplaceString('bla');\n\t\tassert.strictEqual(actual, 'hello');\n\n\t\ttestObject = new ReplacePattern('hello', { pattern: 'bla', isRegExp: false });\n\t\tactual = testObject.getReplaceString('bla');\n\t\tassert.strictEqual(actual, 'hello');\n\n\t\ttestObject = new ReplacePattern('hello', { pattern: '(bla)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('bla');\n\t\tassert.strictEqual(actual, 'hello');\n\n\t\ttestObject = new ReplacePattern('hello$0', { pattern: '(bla)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('bla');\n\t\tassert.strictEqual(actual, 'hellobla');\n\n\t\ttestObject = new ReplacePattern('import * as $1 from \\'$2\\';', { pattern: 'let\\\\s+(\\\\w+)\\\\s*=\\\\s*require\\\\s*\\\\(\\\\s*[\\'\\\"]([\\\\w.\\\\-/]+)\\\\s*[\\'\\\"]\\\\s*\\\\)\\\\s*', isRegExp: true });\n\t\tactual = testObject.getReplaceString('let fs = require(\\'fs\\')');\n\t\tassert.strictEqual(actual, 'import * as fs from \\'fs\\';');\n\n\t\tactual = testObject.getReplaceString('let something = require(\\'fs\\')');\n\t\tassert.strictEqual(actual, 'import * as something from \\'fs\\';');\n\n\t\tactual = testObject.getReplaceString('let require(\\'fs\\')');\n\t\tassert.strictEqual(actual, null);\n\n\t\ttestObject = new ReplacePattern('import * as $1 from \\'$1\\';', { pattern: 'let\\\\s+(\\\\w+)\\\\s*=\\\\s*require\\\\s*\\\\(\\\\s*[\\'\\\"]([\\\\w.\\\\-/]+)\\\\s*[\\'\\\"]\\\\s*\\\\)\\\\s*', isRegExp: true });\n\t\tactual = testObject.getReplaceString('let something = require(\\'fs\\')');\n\t\tassert.strictEqual(actual, 'import * as something from \\'something\\';');\n\n\t\ttestObject = new ReplacePattern('import * as $2 from \\'$1\\';', { pattern: 'let\\\\s+(\\\\w+)\\\\s*=\\\\s*require\\\\s*\\\\(\\\\s*[\\'\\\"]([\\\\w.\\\\-/]+)\\\\s*[\\'\\\"]\\\\s*\\\\)\\\\s*', isRegExp: true });\n\t\tactual = testObject.getReplaceString('let something = require(\\'fs\\')');\n\t\tassert.strictEqual(actual, 'import * as fs from \\'something\\';');\n\n\t\ttestObject = new ReplacePattern('import * as $0 from \\'$0\\';', { pattern: 'let\\\\s+(\\\\w+)\\\\s*=\\\\s*require\\\\s*\\\\(\\\\s*[\\'\\\"]([\\\\w.\\\\-/]+)\\\\s*[\\'\\\"]\\\\s*\\\\)\\\\s*', isRegExp: true });\n\t\tactual = testObject.getReplaceString('let something = require(\\'fs\\');');\n\t\tassert.strictEqual(actual, 'import * as let something = require(\\'fs\\') from \\'let something = require(\\'fs\\')\\';');\n\n\t\ttestObject = new ReplacePattern('import * as $1 from \\'$2\\';', { pattern: 'let\\\\s+(\\\\w+)\\\\s*=\\\\s*require\\\\s*\\\\(\\\\s*[\\'\\\"]([\\\\w.\\\\-/]+)\\\\s*[\\'\\\"]\\\\s*\\\\)\\\\s*', isRegExp: false });\n\t\tactual = testObject.getReplaceString('let fs = require(\\'fs\\');');\n\t\tassert.strictEqual(actual, null);\n\n\t\ttestObject = new ReplacePattern('cat$1', { pattern: 'for(.*)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('for ()');\n\t\tassert.strictEqual(actual, 'cat ()');\n\t});\n\n\ttest('case operations', () => {\n\t\tconst testObject = new ReplacePattern('a\\\\u$1l\\\\u\\\\l\\\\U$2M$3n', { pattern: 'a(l)l(good)m(e)n', isRegExp: true });\n\t\tconst actual = testObject.getReplaceString('allgoodmen');\n\t\tassert.strictEqual(actual, 'aLlGoODMen');\n\t});\n\n\ttest('case operations - no false positive', () => {\n\t\tlet testObject = new ReplacePattern('\\\\left $1', { pattern: '(pattern)', isRegExp: true });\n\t\tlet actual = testObject.getReplaceString('pattern');\n\t\tassert.strictEqual(actual, '\\\\left pattern');\n\n\t\ttestObject = new ReplacePattern('\\\\hi \\\\left $1', { pattern: '(pattern)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('pattern');\n\t\tassert.strictEqual(actual, '\\\\hi \\\\left pattern');\n\n\t\ttestObject = new ReplacePattern('\\\\left \\\\L$1', { pattern: 'PATT(ERN)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('PATTERN');\n\t\tassert.strictEqual(actual, '\\\\left ern');\n\t});\n\n\ttest('case operations and newline', () => { // #140734\n\t\tconst testObject = new ReplacePattern('$1\\n\\\\U$2', { pattern: '(multi)(line)', isRegExp: true });\n\t\tconst actual = testObject.getReplaceString('multiline');\n\t\tassert.strictEqual(actual, 'multi\\nLINE');\n\t});\n\n\ttest('get replace string for no matches', () => {\n\t\tlet testObject = new ReplacePattern('hello', { pattern: 'bla', isRegExp: true });\n\t\tlet actual = testObject.getReplaceString('foo');\n\t\tassert.strictEqual(actual, null);\n\n\t\ttestObject = new ReplacePattern('hello', { pattern: 'bla', isRegExp: false });\n\t\tactual = testObject.getReplaceString('foo');\n\t\tassert.strictEqual(actual, null);\n\t});\n\n\ttest('get replace string if match is sub-string of the text', () => {\n\t\tlet testObject = new ReplacePattern('hello', { pattern: 'bla', isRegExp: true });\n\t\tlet actual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'hello');\n\n\t\ttestObject = new ReplacePattern('hello', { pattern: 'bla', isRegExp: false });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'hello');\n\n\t\ttestObject = new ReplacePattern('that', { pattern: 'this(?=.*bla)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'that');\n\n\t\ttestObject = new ReplacePattern('$1at', { pattern: '(th)is(?=.*bla)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'that');\n\n\t\ttestObject = new ReplacePattern('$1e', { pattern: '(th)is(?=.*bla)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'the');\n\n\t\ttestObject = new ReplacePattern('$1ere', { pattern: '(th)is(?=.*bla)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'there');\n\n\t\ttestObject = new ReplacePattern('$1', { pattern: '(th)is(?=.*bla)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'th');\n\n\t\ttestObject = new ReplacePattern('ma$1', { pattern: '(th)is(?=.*bla)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'math');\n\n\t\ttestObject = new ReplacePattern('ma$1s', { pattern: '(th)is(?=.*bla)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'maths');\n\n\t\ttestObject = new ReplacePattern('ma$1s', { pattern: '(th)is(?=.*bla)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'maths');\n\n\t\ttestObject = new ReplacePattern('$0', { pattern: '(th)is(?=.*bla)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'this');\n\n\t\ttestObject = new ReplacePattern('$0$1', { pattern: '(th)is(?=.*bla)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'thisth');\n\n\t\ttestObject = new ReplacePattern('foo', { pattern: 'bla(?=\\\\stext$)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'foo');\n\n\t\ttestObject = new ReplacePattern('f$1', { pattern: 'b(la)(?=\\\\stext$)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'fla');\n\n\t\ttestObject = new ReplacePattern('f$0', { pattern: 'b(la)(?=\\\\stext$)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'fbla');\n\n\t\ttestObject = new ReplacePattern('$0ah', { pattern: 'b(la)(?=\\\\stext$)', isRegExp: true });\n\t\tactual = testObject.getReplaceString('this is a bla text');\n\t\tassert.strictEqual(actual, 'blaah');\n\n\t\ttestObject = new ReplacePattern('newrege$1', true, /Testrege(\\w*)/);\n\t\tactual = testObject.getReplaceString('Testregex', true);\n\t\tassert.strictEqual(actual, 'Newregex');\n\n\t\ttestObject = new ReplacePattern('newrege$1', true, /TESTREGE(\\w*)/);\n\t\tactual = testObject.getReplaceString('TESTREGEX', true);\n\t\tassert.strictEqual(actual, 'NEWREGEX');\n\n\t\ttestObject = new ReplacePattern('new_rege$1', true, /Test_Rege(\\w*)/);\n\t\tactual = testObject.getReplaceString('Test_Regex', true);\n\t\tassert.strictEqual(actual, 'New_Regex');\n\n\t\ttestObject = new ReplacePattern('new-rege$1', true, /Test-Rege(\\w*)/);\n\t\tactual = testObject.getReplaceString('Test-Regex', true);\n\t\tassert.strictEqual(actual, 'New-Regex');\n\t});\n});\n"]}