{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/search/test/common/searchHelpers.test.ts"],"names":[],"mappings":"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","file":"searchHelpers.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Range } from 'vs/editor/common/core/range';\nimport { FindMatch, ITextModel } from 'vs/editor/common/model';\nimport { ISearchRange, ITextQuery, ITextSearchContext, QueryType } from 'vs/workbench/services/search/common/search';\nimport { addContextToEditorMatches, editorMatchesToTextSearchResults } from 'vs/workbench/services/search/common/searchHelpers';\n\nsuite('SearchHelpers', () => {\n\tsuite('editorMatchesToTextSearchResults', () => {\n\t\tconst mockTextModel: ITextModel = <ITextModel>{\n\t\t\tgetLineContent(lineNumber: number): string {\n\t\t\t\treturn '' + lineNumber;\n\t\t\t}\n\t\t};\n\n\t\tfunction assertRangesEqual(actual: ISearchRange | ISearchRange[], expected: ISearchRange[]) {\n\t\t\tif (!Array.isArray(actual)) {\n\t\t\t\t// All of these tests are for arrays...\n\t\t\t\tthrow new Error('Expected array of ranges');\n\t\t\t}\n\n\t\t\tassert.strictEqual(actual.length, expected.length);\n\n\t\t\t// These are sometimes Range, sometimes SearchRange\n\t\t\tactual.forEach((r, i) => {\n\t\t\t\tconst expectedRange = expected[i];\n\t\t\t\tassert.deepStrictEqual(\n\t\t\t\t\t{ startLineNumber: r.startLineNumber, startColumn: r.startColumn, endLineNumber: r.endLineNumber, endColumn: r.endColumn },\n\t\t\t\t\t{ startLineNumber: expectedRange.startLineNumber, startColumn: expectedRange.startColumn, endLineNumber: expectedRange.endLineNumber, endColumn: expectedRange.endColumn });\n\t\t\t});\n\t\t}\n\n\t\ttest('simple', () => {\n\t\t\tconst results = editorMatchesToTextSearchResults([new FindMatch(new Range(6, 1, 6, 2), null)], mockTextModel);\n\t\t\tassert.strictEqual(results.length, 1);\n\t\t\tassert.strictEqual(results[0].preview.text, '6\\n');\n\t\t\tassertRangesEqual(results[0].preview.matches, [new Range(0, 0, 0, 1)]);\n\t\t\tassertRangesEqual(results[0].ranges, [new Range(5, 0, 5, 1)]);\n\t\t});\n\n\t\ttest('multiple', () => {\n\t\t\tconst results = editorMatchesToTextSearchResults(\n\t\t\t\t[\n\t\t\t\t\tnew FindMatch(new Range(6, 1, 6, 2), null),\n\t\t\t\t\tnew FindMatch(new Range(6, 4, 8, 2), null),\n\t\t\t\t\tnew FindMatch(new Range(9, 1, 10, 3), null),\n\t\t\t\t],\n\t\t\t\tmockTextModel);\n\t\t\tassert.strictEqual(results.length, 2);\n\t\t\tassertRangesEqual(results[0].preview.matches, [\n\t\t\t\tnew Range(0, 0, 0, 1),\n\t\t\t\tnew Range(0, 3, 2, 1),\n\t\t\t]);\n\t\t\tassertRangesEqual(results[0].ranges, [\n\t\t\t\tnew Range(5, 0, 5, 1),\n\t\t\t\tnew Range(5, 3, 7, 1),\n\t\t\t]);\n\t\t\tassert.strictEqual(results[0].preview.text, '6\\n7\\n8\\n');\n\n\t\t\tassertRangesEqual(results[1].preview.matches, [\n\t\t\t\tnew Range(0, 0, 1, 2),\n\t\t\t]);\n\t\t\tassertRangesEqual(results[1].ranges, [\n\t\t\t\tnew Range(8, 0, 9, 2),\n\t\t\t]);\n\t\t\tassert.strictEqual(results[1].preview.text, '9\\n10\\n');\n\t\t});\n\t});\n\n\tsuite('addContextToEditorMatches', () => {\n\t\tconst MOCK_LINE_COUNT = 100;\n\n\t\tconst mockTextModel: ITextModel = <ITextModel>{\n\t\t\tgetLineContent(lineNumber: number): string {\n\t\t\t\tif (lineNumber < 1 || lineNumber > MOCK_LINE_COUNT) {\n\t\t\t\t\tthrow new Error(`invalid line count: ${lineNumber}`);\n\t\t\t\t}\n\n\t\t\t\treturn '' + lineNumber;\n\t\t\t},\n\n\t\t\tgetLineCount(): number {\n\t\t\t\treturn MOCK_LINE_COUNT;\n\t\t\t}\n\t\t};\n\n\t\tfunction getQuery(beforeContext?: number, afterContext?: number): ITextQuery {\n\t\t\treturn {\n\t\t\t\tfolderQueries: [],\n\t\t\t\ttype: QueryType.Text,\n\t\t\t\tcontentPattern: { pattern: 'test' },\n\t\t\t\tbeforeContext,\n\t\t\t\tafterContext\n\t\t\t};\n\t\t}\n\n\t\ttest('no context', () => {\n\t\t\tconst matches = [{\n\t\t\t\tpreview: {\n\t\t\t\t\ttext: 'foo',\n\t\t\t\t\tmatches: new Range(0, 0, 0, 10)\n\t\t\t\t},\n\t\t\t\tranges: new Range(0, 0, 0, 10)\n\t\t\t}];\n\n\t\t\tassert.deepStrictEqual(addContextToEditorMatches(matches, mockTextModel, getQuery()), matches);\n\t\t});\n\n\t\ttest('simple', () => {\n\t\t\tconst matches = [{\n\t\t\t\tpreview: {\n\t\t\t\t\ttext: 'foo',\n\t\t\t\t\tmatches: new Range(0, 0, 0, 10)\n\t\t\t\t},\n\t\t\t\tranges: new Range(1, 0, 1, 10)\n\t\t\t}];\n\n\t\t\tassert.deepStrictEqual(addContextToEditorMatches(matches, mockTextModel, getQuery(1, 2)), [\n\t\t\t\t<ITextSearchContext>{\n\t\t\t\t\ttext: '1',\n\t\t\t\t\tlineNumber: 0\n\t\t\t\t},\n\t\t\t\t...matches,\n\t\t\t\t<ITextSearchContext>{\n\t\t\t\t\ttext: '3',\n\t\t\t\t\tlineNumber: 2\n\t\t\t\t},\n\t\t\t\t<ITextSearchContext>{\n\t\t\t\t\ttext: '4',\n\t\t\t\t\tlineNumber: 3\n\t\t\t\t},\n\t\t\t]);\n\t\t});\n\n\t\ttest('multiple matches next to each other', () => {\n\t\t\tconst matches = [\n\t\t\t\t{\n\t\t\t\t\tpreview: {\n\t\t\t\t\t\ttext: 'foo',\n\t\t\t\t\t\tmatches: new Range(0, 0, 0, 10)\n\t\t\t\t\t},\n\t\t\t\t\tranges: new Range(1, 0, 1, 10)\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpreview: {\n\t\t\t\t\t\ttext: 'bar',\n\t\t\t\t\t\tmatches: new Range(0, 0, 0, 10)\n\t\t\t\t\t},\n\t\t\t\t\tranges: new Range(2, 0, 2, 10)\n\t\t\t\t}];\n\n\t\t\tassert.deepStrictEqual(addContextToEditorMatches(matches, mockTextModel, getQuery(1, 2)), [\n\t\t\t\t<ITextSearchContext>{\n\t\t\t\t\ttext: '1',\n\t\t\t\t\tlineNumber: 0\n\t\t\t\t},\n\t\t\t\t...matches,\n\t\t\t\t<ITextSearchContext>{\n\t\t\t\t\ttext: '4',\n\t\t\t\t\tlineNumber: 3\n\t\t\t\t},\n\t\t\t\t<ITextSearchContext>{\n\t\t\t\t\ttext: '5',\n\t\t\t\t\tlineNumber: 4\n\t\t\t\t},\n\t\t\t]);\n\t\t});\n\n\t\ttest('boundaries', () => {\n\t\t\tconst matches = [\n\t\t\t\t{\n\t\t\t\t\tpreview: {\n\t\t\t\t\t\ttext: 'foo',\n\t\t\t\t\t\tmatches: new Range(0, 0, 0, 10)\n\t\t\t\t\t},\n\t\t\t\t\tranges: new Range(0, 0, 0, 10)\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tpreview: {\n\t\t\t\t\t\ttext: 'bar',\n\t\t\t\t\t\tmatches: new Range(0, 0, 0, 10)\n\t\t\t\t\t},\n\t\t\t\t\tranges: new Range(MOCK_LINE_COUNT - 1, 0, MOCK_LINE_COUNT - 1, 10)\n\t\t\t\t}];\n\n\t\t\tassert.deepStrictEqual(addContextToEditorMatches(matches, mockTextModel, getQuery(1, 2)), [\n\t\t\t\tmatches[0],\n\t\t\t\t<ITextSearchContext>{\n\t\t\t\t\ttext: '2',\n\t\t\t\t\tlineNumber: 1\n\t\t\t\t},\n\t\t\t\t<ITextSearchContext>{\n\t\t\t\t\ttext: '3',\n\t\t\t\t\tlineNumber: 2\n\t\t\t\t},\n\t\t\t\t<ITextSearchContext>{\n\t\t\t\t\ttext: '' + (MOCK_LINE_COUNT - 1),\n\t\t\t\t\tlineNumber: MOCK_LINE_COUNT - 2\n\t\t\t\t},\n\t\t\t\tmatches[1]\n\t\t\t]);\n\t\t});\n\t});\n});\n"]}