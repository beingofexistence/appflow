{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/search/test/common/queryBuilder.test.ts"],"names":[],"mappings":";;;IAYA,KAAK,CAAC,oBAAoB,EAAE,GAAG,EAAE;QAChC,IAAI,OAAY,CAAsB;QAEtC,KAAK,CAAC,GAAG,EAAE;YACV,MAAM,SAAS,GAAG,IAAA,oBAAI,EAAU,SAAG,CAAC,IAAI,CAAC,aAAE,CAAQ,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC;YAC9F,OAAO,GAAG,IAAI,4BAAI,CAAe,SAAS,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wFAAwF,EAAE,GAAG,EAAE;YACnG,MAAM,MAAM,GAAG,IAAA,kBAAG,EAA+B,CAAC,SAAG,CAAC,IAAI,CAAC,aAAE,CAAQ,CAAC,CAAC,gCAAgC,CAAC,CAAC,CAAC,2BAA2B,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;YAClJ,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,yEAAyE,EAAE,GAAG,EAAE;YACpF,MAAM,MAAM,GAAG,IAAA,kBAAG,EAA+B,CAAC,SAAG,CAAC,IAAI,CAAC,aAAE,CAAQ,CAAC,CAAC,0CAA0C,CAAC,CAAC,CAAC,oCAAoC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;YACrK,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,2BAA2B,CAAC,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"queryBuilder.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as assert from 'assert';\nimport { isWindows } from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { testWorkspace } from 'vs/platform/workspace/test/common/testWorkspace';\nimport { resolveResourcesForSearchIncludes } from 'vs/workbench/services/search/common/queryBuilder';\nimport { TestContextService } from 'vs/workbench/test/common/workbenchTestServices';\n\nsuite('QueryBuilderCommon', () => {\n\tlet context: IWorkspaceContextService;\n\n\tsetup(() => {\n\t\tconst workspace = testWorkspace(URI.file(isWindows ? 'C:\\\\testWorkspace' : '/testWorkspace'));\n\t\tcontext = new TestContextService(workspace);\n\t});\n\n\ttest('resolveResourcesForSearchIncludes passes through paths without special glob characters', () => {\n\t\tconst actual = resolveResourcesForSearchIncludes([URI.file(isWindows ? \"C:\\\\testWorkspace\\\\pages\\\\blog\" : \"/testWorkspace/pages/blog\")], context);\n\t\tassert.deepStrictEqual(actual, [\"./pages/blog\"]);\n\t});\n\n\ttest('resolveResourcesForSearchIncludes escapes paths with special characters', () => {\n\t\tconst actual = resolveResourcesForSearchIncludes([URI.file(isWindows ? \"C:\\\\testWorkspace\\\\pages\\\\blog\\\\[postId]\" : \"/testWorkspace/pages/blog/[postId]\")], context);\n\t\tassert.deepStrictEqual(actual, [\"./pages/blog/[[]postId[]]\"]);\n\t});\n});\n"]}