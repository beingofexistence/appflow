{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/search/test/node/textSearchManager.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAUhG,KAAK,CAAC,yBAAyB,EAAE,GAAG,EAAE;QACrC,IAAI,CAAC,gBAAgB,EAAE,KAAK,IAAI,EAAE;YACjC,IAAI,eAAe,GAAG,KAAK,CAAC;YAC5B,MAAM,QAAQ,GAAuB;gBACpC,wBAAwB,CAAC,KAAsB,EAAE,OAA0B,EAAE,QAAoC,EAAE,KAAwB;oBAC1I,eAAe,GAAG,OAAO,CAAC,QAAQ,KAAK,cAAc,CAAC;oBAEtD,OAAO,IAAI,CAAC;gBACb,CAAC;aACD,CAAC;YAEF,MAAM,KAAK,GAAe;gBACzB,IAAI,wBAAgB;gBACpB,cAAc,EAAE;oBACf,OAAO,EAAE,GAAG;iBACZ;gBACD,aAAa,EAAE,CAAC;wBACf,MAAM,EAAE,SAAG,CAAC,IAAI,CAAC,cAAc,CAAC;wBAChC,YAAY,EAAE,aAAa;qBAC3B,CAAC;aACF,CAAC;YAEF,MAAM,CAAC,GAAG,IAAI,wBAAI,CAAoB,KAAK,EAAE,QAAQ,CAAC,CAAC;YACvD,MAAM,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE,IAAI,kBAAG,EAAsB,CAAC,KAAK,CAAC,CAAC;YAE/D,MAAM,CAAC,EAAE,CAAC,eAAe,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"textSearchManager.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { URI } from 'vs/base/common/uri';\nimport { Progress } from 'vs/platform/progress/common/progress';\nimport { ITextQuery, QueryType } from 'vs/workbench/services/search/common/search';\nimport { ProviderResult, TextSearchComplete, TextSearchOptions, TextSearchProvider, TextSearchQuery, TextSearchResult } from 'vs/workbench/services/search/common/searchExtTypes';\nimport { NativeTextSearchManager } from 'vs/workbench/services/search/node/textSearchManager';\n\nsuite('NativeTextSearchManager', () => {\n\ttest('fixes encoding', async () => {\n\t\tlet correctEncoding = false;\n\t\tconst provider: TextSearchProvider = {\n\t\t\tprovideTextSearchResults(query: TextSearchQuery, options: TextSearchOptions, progress: Progress<TextSearchResult>, token: CancellationToken): ProviderResult<TextSearchComplete> {\n\t\t\t\tcorrectEncoding = options.encoding === 'windows-1252';\n\n\t\t\t\treturn null;\n\t\t\t}\n\t\t};\n\n\t\tconst query: ITextQuery = {\n\t\t\ttype: QueryType.Text,\n\t\t\tcontentPattern: {\n\t\t\t\tpattern: 'a'\n\t\t\t},\n\t\t\tfolderQueries: [{\n\t\t\t\tfolder: URI.file('/some/folder'),\n\t\t\t\tfileEncoding: 'windows1252'\n\t\t\t}]\n\t\t};\n\n\t\tconst m = new NativeTextSearchManager(query, provider);\n\t\tawait m.search(() => { }, new CancellationTokenSource().token);\n\n\t\tassert.ok(correctEncoding);\n\t});\n});\n"]}