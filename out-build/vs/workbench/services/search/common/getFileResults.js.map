{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/search/common/getFileResults.ts"],"names":[],"mappings":"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","file":"getFileResults.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ITextSearchResult } from 'vs/workbench/services/search/common/search';\nimport { TextSearchPreviewOptions } from 'vs/workbench/services/search/common/searchExtTypes';\nimport { Range } from 'vs/editor/common/core/range';\n\nexport const getFileResults = (\n\tbytes: Uint8Array,\n\tpattern: RegExp,\n\toptions: {\n\t\tbeforeContext: number;\n\t\tafterContext: number;\n\t\tpreviewOptions: TextSearchPreviewOptions | undefined;\n\t\tremainingResultQuota: number;\n\t}\n): ITextSearchResult[] => {\n\n\tlet text: string;\n\tif (bytes[0] === 0xff && bytes[1] === 0xfe) {\n\t\ttext = new TextDecoder('utf-16le').decode(bytes);\n\t} else if (bytes[0] === 0xfe && bytes[1] === 0xff) {\n\t\ttext = new TextDecoder('utf-16be').decode(bytes);\n\t} else {\n\t\ttext = new TextDecoder('utf8').decode(bytes);\n\t\tif (text.slice(0, 1000).includes('\\uFFFD') && bytes.includes(0)) {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tconst results: ITextSearchResult[] = [];\n\n\tconst patternIndecies: { matchStartIndex: number; matchedText: string }[] = [];\n\n\tlet patternMatch: RegExpExecArray | null = null;\n\tlet remainingResultQuota = options.remainingResultQuota;\n\twhile (remainingResultQuota >= 0 && (patternMatch = pattern.exec(text))) {\n\t\tpatternIndecies.push({ matchStartIndex: patternMatch.index, matchedText: patternMatch[0] });\n\t\tremainingResultQuota--;\n\t}\n\n\tif (patternIndecies.length) {\n\t\tconst contextLinesNeeded = new Set<number>();\n\t\tconst resultLines = new Set<number>();\n\n\t\tconst lineRanges: { start: number; end: number }[] = [];\n\t\tconst readLine = (lineNumber: number) => text.slice(lineRanges[lineNumber].start, lineRanges[lineNumber].end);\n\n\t\tlet prevLineEnd = 0;\n\t\tlet lineEndingMatch: RegExpExecArray | null = null;\n\t\tconst lineEndRegex = /\\r?\\n/g;\n\t\twhile ((lineEndingMatch = lineEndRegex.exec(text))) {\n\t\t\tlineRanges.push({ start: prevLineEnd, end: lineEndingMatch.index });\n\t\t\tprevLineEnd = lineEndingMatch.index + lineEndingMatch[0].length;\n\t\t}\n\t\tif (prevLineEnd < text.length) { lineRanges.push({ start: prevLineEnd, end: text.length }); }\n\n\t\tlet startLine = 0;\n\t\tfor (const { matchStartIndex, matchedText } of patternIndecies) {\n\t\t\tif (remainingResultQuota < 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\twhile (Boolean(lineRanges[startLine + 1]) && matchStartIndex > lineRanges[startLine].end) {\n\t\t\t\tstartLine++;\n\t\t\t}\n\t\t\tlet endLine = startLine;\n\t\t\twhile (Boolean(lineRanges[endLine + 1]) && matchStartIndex + matchedText.length > lineRanges[endLine].end) {\n\t\t\t\tendLine++;\n\t\t\t}\n\n\t\t\tif (options.beforeContext) {\n\t\t\t\tfor (let contextLine = Math.max(0, startLine - options.beforeContext); contextLine < startLine; contextLine++) {\n\t\t\t\t\tcontextLinesNeeded.add(contextLine);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet previewText = '';\n\t\t\tlet offset = 0;\n\t\t\tfor (let matchLine = startLine; matchLine <= endLine; matchLine++) {\n\t\t\t\tlet previewLine = readLine(matchLine);\n\t\t\t\tif (options.previewOptions?.charsPerLine && previewLine.length > options.previewOptions.charsPerLine) {\n\t\t\t\t\toffset = Math.max(matchStartIndex - lineRanges[startLine].start - 20, 0);\n\t\t\t\t\tpreviewLine = previewLine.substr(offset, options.previewOptions.charsPerLine);\n\t\t\t\t}\n\t\t\t\tpreviewText += `${previewLine}\\n`;\n\t\t\t\tresultLines.add(matchLine);\n\t\t\t}\n\n\t\t\tconst fileRange = new Range(\n\t\t\t\tstartLine,\n\t\t\t\tmatchStartIndex - lineRanges[startLine].start,\n\t\t\t\tendLine,\n\t\t\t\tmatchStartIndex + matchedText.length - lineRanges[endLine].start\n\t\t\t);\n\t\t\tconst previewRange = new Range(\n\t\t\t\t0,\n\t\t\t\tmatchStartIndex - lineRanges[startLine].start - offset,\n\t\t\t\tendLine - startLine,\n\t\t\t\tmatchStartIndex + matchedText.length - lineRanges[endLine].start - (endLine === startLine ? offset : 0)\n\t\t\t);\n\n\t\t\tconst match: ITextSearchResult = {\n\t\t\t\tranges: fileRange,\n\t\t\t\tpreview: { text: previewText, matches: previewRange },\n\t\t\t};\n\t\t\tresults.push(match);\n\n\t\t\tif (options.afterContext) {\n\t\t\t\tfor (let contextLine = endLine + 1; contextLine <= Math.min(endLine + options.afterContext, lineRanges.length - 1); contextLine++) {\n\t\t\t\t\tcontextLinesNeeded.add(contextLine);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (const contextLine of contextLinesNeeded) {\n\t\t\tif (!resultLines.has(contextLine)) {\n\n\t\t\t\tresults.push({\n\t\t\t\t\ttext: readLine(contextLine),\n\t\t\t\t\tlineNumber: contextLine + 1,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\treturn results;\n};\n"]}