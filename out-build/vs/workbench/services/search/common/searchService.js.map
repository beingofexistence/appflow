{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/search/common/searchService.ts"],"names":[],"mappings":"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","file":"searchService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from 'vs/base/common/arrays';\nimport { DeferredPromise } from 'vs/base/common/async';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { CancellationError } from 'vs/base/common/errors';\nimport { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { ResourceMap, ResourceSet } from 'vs/base/common/map';\nimport { Schemas } from 'vs/base/common/network';\nimport { StopWatch } from 'vs/base/common/stopwatch';\nimport { isNumber } from 'vs/base/common/types';\nimport { URI, URI as uri } from 'vs/base/common/uri';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { EditorResourceAccessor, SideBySideEditor } from 'vs/workbench/common/editor';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { deserializeSearchError, FileMatch, ICachedSearchStats, IFileMatch, IFileQuery, IFileSearchStats, IFolderQuery, IProgressMessage, ISearchComplete, ISearchEngineStats, ISearchProgressItem, ISearchQuery, ISearchResultProvider, ISearchService, isFileMatch, isProgressMessage, ITextQuery, pathIncludedInQuery, QueryType, SEARCH_RESULT_LANGUAGE_ID, SearchError, SearchErrorCode, SearchProviderType } from 'vs/workbench/services/search/common/search';\nimport { addContextToEditorMatches, editorMatchesToTextSearchResults } from 'vs/workbench/services/search/common/searchHelpers';\n\nexport class SearchService extends Disposable implements ISearchService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly fileSearchProviders = new Map<string, ISearchResultProvider>();\n\tprivate readonly textSearchProviders = new Map<string, ISearchResultProvider>();\n\n\tprivate deferredFileSearchesByScheme = new Map<string, DeferredPromise<ISearchResultProvider>>();\n\tprivate deferredTextSearchesByScheme = new Map<string, DeferredPromise<ISearchResultProvider>>();\n\n\tprivate loggedSchemesMissingProviders = new Set<string>();\n\n\tconstructor(\n\t\t@IModelService private readonly modelService: IModelService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper();\n\t}\n\n\tregisterSearchResultProvider(scheme: string, type: SearchProviderType, provider: ISearchResultProvider): IDisposable {\n\t\tlet list: Map<string, ISearchResultProvider>;\n\t\tlet deferredMap: Map<string, DeferredPromise<ISearchResultProvider>>;\n\t\tif (type === SearchProviderType.file) {\n\t\t\tlist = this.fileSearchProviders;\n\t\t\tdeferredMap = this.deferredFileSearchesByScheme;\n\t\t} else if (type === SearchProviderType.text) {\n\t\t\tlist = this.textSearchProviders;\n\t\t\tdeferredMap = this.deferredTextSearchesByScheme;\n\t\t} else {\n\t\t\tthrow new Error('Unknown SearchProviderType');\n\t\t}\n\n\t\tlist.set(scheme, provider);\n\n\t\tif (deferredMap.has(scheme)) {\n\t\t\tdeferredMap.get(scheme)!.complete(provider);\n\t\t\tdeferredMap.delete(scheme);\n\t\t}\n\n\t\treturn toDisposable(() => {\n\t\t\tlist.delete(scheme);\n\t\t});\n\t}\n\n\tasync textSearch(query: ITextQuery, token?: CancellationToken, onProgress?: (item: ISearchProgressItem) => void): Promise<ISearchComplete> {\n\t\tconst results = this.textSearchSplitSyncAsync(query, token, onProgress);\n\t\tconst openEditorResults = results.syncResults;\n\t\tconst otherResults = await results.asyncResults;\n\t\treturn {\n\t\t\tlimitHit: otherResults.limitHit || openEditorResults.limitHit,\n\t\t\tresults: [...otherResults.results, ...openEditorResults.results],\n\t\t\tmessages: [...otherResults.messages, ...openEditorResults.messages]\n\t\t};\n\t}\n\n\ttextSearchSplitSyncAsync(\n\t\tquery: ITextQuery,\n\t\ttoken?: CancellationToken | undefined,\n\t\tonProgress?: ((result: ISearchProgressItem) => void) | undefined,\n\t\tnotebookFilesToIgnore?: ResourceSet,\n\t\tasyncNotebookFilesToIgnore?: Promise<ResourceSet>\n\t): {\n\t\tsyncResults: ISearchComplete;\n\t\tasyncResults: Promise<ISearchComplete>;\n\t} {\n\t\t// Get open editor results from dirty/untitled\n\t\tconst openEditorResults = this.getOpenEditorResults(query);\n\n\t\tif (onProgress) {\n\t\t\tarrays.coalesce([...openEditorResults.results.values()]).filter(e => !(notebookFilesToIgnore && notebookFilesToIgnore.has(e.resource))).forEach(onProgress);\n\t\t}\n\n\t\tconst syncResults: ISearchComplete = {\n\t\t\tresults: arrays.coalesce([...openEditorResults.results.values()]),\n\t\t\tlimitHit: openEditorResults.limitHit ?? false,\n\t\t\tmessages: []\n\t\t};\n\n\t\tconst getAsyncResults = async () => {\n\t\t\tconst resolvedAsyncNotebookFilesToIgnore = await asyncNotebookFilesToIgnore ?? new ResourceSet();\n\t\t\tconst onProviderProgress = (progress: ISearchProgressItem) => {\n\t\t\t\tif (isFileMatch(progress)) {\n\t\t\t\t\t// Match\n\t\t\t\t\tif (!openEditorResults.results.has(progress.resource) && !resolvedAsyncNotebookFilesToIgnore.has(progress.resource) && onProgress) { // don't override open editor results\n\t\t\t\t\t\tonProgress(progress);\n\t\t\t\t\t}\n\t\t\t\t} else if (onProgress) {\n\t\t\t\t\t// Progress\n\t\t\t\t\tonProgress(<IProgressMessage>progress);\n\t\t\t\t}\n\n\t\t\t\tif (isProgressMessage(progress)) {\n\t\t\t\t\tthis.logService.debug('SearchService#search', progress.message);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn await this.doSearch(query, token, onProviderProgress);\n\t\t};\n\n\t\treturn {\n\t\t\tsyncResults,\n\t\t\tasyncResults: getAsyncResults()\n\t\t};\n\t}\n\n\tfileSearch(query: IFileQuery, token?: CancellationToken): Promise<ISearchComplete> {\n\t\treturn this.doSearch(query, token);\n\t}\n\n\tprivate doSearch(query: ISearchQuery, token?: CancellationToken, onProgress?: (item: ISearchProgressItem) => void): Promise<ISearchComplete> {\n\t\tthis.logService.trace('SearchService#search', JSON.stringify(query));\n\n\t\tconst schemesInQuery = this.getSchemesInQuery(query);\n\n\t\tconst providerActivations: Promise<any>[] = [Promise.resolve(null)];\n\t\tschemesInQuery.forEach(scheme => providerActivations.push(this.extensionService.activateByEvent(`onSearch:${scheme}`)));\n\t\tproviderActivations.push(this.extensionService.activateByEvent('onSearch:file'));\n\n\t\tconst providerPromise = (async () => {\n\t\t\tawait Promise.all(providerActivations);\n\t\t\tawait this.extensionService.whenInstalledExtensionsRegistered();\n\n\t\t\t// Cancel faster if search was canceled while waiting for extensions\n\t\t\tif (token && token.isCancellationRequested) {\n\t\t\t\treturn Promise.reject(new CancellationError());\n\t\t\t}\n\n\t\t\tconst progressCallback = (item: ISearchProgressItem) => {\n\t\t\t\tif (token && token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tonProgress?.(item);\n\t\t\t};\n\n\t\t\tconst exists = await Promise.all(query.folderQueries.map(query => this.fileService.exists(query.folder)));\n\t\t\tquery.folderQueries = query.folderQueries.filter((_, i) => exists[i]);\n\n\t\t\tlet completes = await this.searchWithProviders(query, progressCallback, token);\n\t\t\tcompletes = arrays.coalesce(completes);\n\t\t\tif (!completes.length) {\n\t\t\t\treturn {\n\t\t\t\t\tlimitHit: false,\n\t\t\t\t\tresults: [],\n\t\t\t\t\tmessages: [],\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tlimitHit: completes[0] && completes[0].limitHit,\n\t\t\t\tstats: completes[0].stats,\n\t\t\t\tmessages: arrays.coalesce(arrays.flatten(completes.map(i => i.messages))).filter(arrays.uniqueFilter(message => message.type + message.text + message.trusted)),\n\t\t\t\tresults: arrays.flatten(completes.map((c: ISearchComplete) => c.results))\n\t\t\t};\n\t\t})();\n\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (token) {\n\t\t\t\ttoken.onCancellationRequested(() => {\n\t\t\t\t\treject(new CancellationError());\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tproviderPromise.then(resolve, reject);\n\t\t});\n\t}\n\n\tprivate getSchemesInQuery(query: ISearchQuery): Set<string> {\n\t\tconst schemes = new Set<string>();\n\t\tquery.folderQueries?.forEach(fq => schemes.add(fq.folder.scheme));\n\n\t\tquery.extraFileResources?.forEach(extraFile => schemes.add(extraFile.scheme));\n\n\t\treturn schemes;\n\t}\n\n\tprivate async waitForProvider(queryType: QueryType, scheme: string): Promise<ISearchResultProvider> {\n\t\tconst deferredMap: Map<string, DeferredPromise<ISearchResultProvider>> = queryType === QueryType.File ?\n\t\t\tthis.deferredFileSearchesByScheme :\n\t\t\tthis.deferredTextSearchesByScheme;\n\n\t\tif (deferredMap.has(scheme)) {\n\t\t\treturn deferredMap.get(scheme)!.p;\n\t\t} else {\n\t\t\tconst deferred = new DeferredPromise<ISearchResultProvider>();\n\t\t\tdeferredMap.set(scheme, deferred);\n\t\t\treturn deferred.p;\n\t\t}\n\t}\n\n\tprivate async searchWithProviders(query: ISearchQuery, onProviderProgress: (progress: ISearchProgressItem) => void, token?: CancellationToken) {\n\t\tconst e2eSW = StopWatch.create(false);\n\n\t\tconst searchPs: Promise<ISearchComplete>[] = [];\n\n\t\tconst fqs = this.groupFolderQueriesByScheme(query);\n\t\tconst someSchemeHasProvider = [...fqs.keys()].some(scheme => {\n\t\t\treturn query.type === QueryType.File ?\n\t\t\t\tthis.fileSearchProviders.has(scheme) :\n\t\t\t\tthis.textSearchProviders.has(scheme);\n\t\t});\n\n\t\tawait Promise.all([...fqs.keys()].map(async scheme => {\n\t\t\tconst schemeFQs = fqs.get(scheme)!;\n\t\t\tlet provider = query.type === QueryType.File ?\n\t\t\t\tthis.fileSearchProviders.get(scheme) :\n\t\t\t\tthis.textSearchProviders.get(scheme);\n\n\t\t\tif (!provider) {\n\t\t\t\tif (someSchemeHasProvider) {\n\t\t\t\t\tif (!this.loggedSchemesMissingProviders.has(scheme)) {\n\t\t\t\t\t\tthis.logService.warn(`No search provider registered for scheme: ${scheme}. Another scheme has a provider, not waiting for ${scheme}`);\n\t\t\t\t\t\tthis.loggedSchemesMissingProviders.add(scheme);\n\t\t\t\t\t}\n\t\t\t\t\treturn;\n\t\t\t\t} else {\n\t\t\t\t\tif (!this.loggedSchemesMissingProviders.has(scheme)) {\n\t\t\t\t\t\tthis.logService.warn(`No search provider registered for scheme: ${scheme}, waiting`);\n\t\t\t\t\t\tthis.loggedSchemesMissingProviders.add(scheme);\n\t\t\t\t\t}\n\t\t\t\t\tprovider = await this.waitForProvider(query.type, scheme);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst oneSchemeQuery: ISearchQuery = {\n\t\t\t\t...query,\n\t\t\t\t...{\n\t\t\t\t\tfolderQueries: schemeFQs\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tsearchPs.push(query.type === QueryType.File ?\n\t\t\t\tprovider.fileSearch(<IFileQuery>oneSchemeQuery, token) :\n\t\t\t\tprovider.textSearch(<ITextQuery>oneSchemeQuery, onProviderProgress, token));\n\t\t}));\n\n\t\treturn Promise.all(searchPs).then(completes => {\n\t\t\tconst endToEndTime = e2eSW.elapsed();\n\t\t\tthis.logService.trace(`SearchService#search: ${endToEndTime}ms`);\n\t\t\tcompletes.forEach(complete => {\n\t\t\t\tthis.sendTelemetry(query, endToEndTime, complete);\n\t\t\t});\n\t\t\treturn completes;\n\t\t}, err => {\n\t\t\tconst endToEndTime = e2eSW.elapsed();\n\t\t\tthis.logService.trace(`SearchService#search: ${endToEndTime}ms`);\n\t\t\tconst searchError = deserializeSearchError(err);\n\t\t\tthis.logService.trace(`SearchService#searchError: ${searchError.message}`);\n\t\t\tthis.sendTelemetry(query, endToEndTime, undefined, searchError);\n\n\t\t\tthrow searchError;\n\t\t});\n\t}\n\n\tprivate groupFolderQueriesByScheme(query: ISearchQuery): Map<string, IFolderQuery[]> {\n\t\tconst queries = new Map<string, IFolderQuery[]>();\n\n\t\tquery.folderQueries.forEach(fq => {\n\t\t\tconst schemeFQs = queries.get(fq.folder.scheme) || [];\n\t\t\tschemeFQs.push(fq);\n\n\t\t\tqueries.set(fq.folder.scheme, schemeFQs);\n\t\t});\n\n\t\treturn queries;\n\t}\n\n\tprivate sendTelemetry(query: ISearchQuery, endToEndTime: number, complete?: ISearchComplete, err?: SearchError): void {\n\t\tconst fileSchemeOnly = query.folderQueries.every(fq => fq.folder.scheme === Schemas.file);\n\t\tconst otherSchemeOnly = query.folderQueries.every(fq => fq.folder.scheme !== Schemas.file);\n\t\tconst scheme = fileSchemeOnly ? Schemas.file :\n\t\t\totherSchemeOnly ? 'other' :\n\t\t\t\t'mixed';\n\n\t\tif (query.type === QueryType.File && complete && complete.stats) {\n\t\t\tconst fileSearchStats = complete.stats as IFileSearchStats;\n\t\t\tif (fileSearchStats.fromCache) {\n\t\t\t\tconst cacheStats: ICachedSearchStats = fileSearchStats.detailStats as ICachedSearchStats;\n\n\t\t\t\ttype CachedSearchCompleteClassifcation = {\n\t\t\t\t\towner: 'roblourens';\n\t\t\t\t\tcomment: 'Fired when a file search is completed from previously cached results';\n\t\t\t\t\treason?: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Indicates which extension or UI feature triggered this search' };\n\t\t\t\t\tresultCount: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; isMeasurement: true; comment: 'The number of search results' };\n\t\t\t\t\tworkspaceFolderCount: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; isMeasurement: true; comment: 'The number of folders in the workspace' };\n\t\t\t\t\tendToEndTime: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; isMeasurement: true; comment: 'The total search time' };\n\t\t\t\t\tsortingTime?: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; isMeasurement: true; comment: 'The amount of time spent sorting results' };\n\t\t\t\t\tcacheWasResolved: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Whether the cache was already resolved when the search began' };\n\t\t\t\t\tcacheLookupTime: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; isMeasurement: true; comment: 'The amount of time spent looking up the cache to use for the search' };\n\t\t\t\t\tcacheFilterTime: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; isMeasurement: true; comment: 'The amount of time spent searching within the cache' };\n\t\t\t\t\tcacheEntryCount: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; isMeasurement: true; comment: 'The number of entries in the searched-in cache' };\n\t\t\t\t\tscheme: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The uri scheme of the folder searched in' };\n\t\t\t\t};\n\t\t\t\ttype CachedSearchCompleteEvent = {\n\t\t\t\t\treason?: string;\n\t\t\t\t\tresultCount: number;\n\t\t\t\t\tworkspaceFolderCount: number;\n\t\t\t\t\tendToEndTime: number;\n\t\t\t\t\tsortingTime?: number;\n\t\t\t\t\tcacheWasResolved: boolean;\n\t\t\t\t\tcacheLookupTime: number;\n\t\t\t\t\tcacheFilterTime: number;\n\t\t\t\t\tcacheEntryCount: number;\n\t\t\t\t\tscheme: string;\n\t\t\t\t};\n\t\t\t\tthis.telemetryService.publicLog2<CachedSearchCompleteEvent, CachedSearchCompleteClassifcation>('cachedSearchComplete', {\n\t\t\t\t\treason: query._reason,\n\t\t\t\t\tresultCount: fileSearchStats.resultCount,\n\t\t\t\t\tworkspaceFolderCount: query.folderQueries.length,\n\t\t\t\t\tendToEndTime: endToEndTime,\n\t\t\t\t\tsortingTime: fileSearchStats.sortingTime,\n\t\t\t\t\tcacheWasResolved: cacheStats.cacheWasResolved,\n\t\t\t\t\tcacheLookupTime: cacheStats.cacheLookupTime,\n\t\t\t\t\tcacheFilterTime: cacheStats.cacheFilterTime,\n\t\t\t\t\tcacheEntryCount: cacheStats.cacheEntryCount,\n\t\t\t\t\tscheme\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst searchEngineStats: ISearchEngineStats = fileSearchStats.detailStats as ISearchEngineStats;\n\n\t\t\t\ttype SearchCompleteClassification = {\n\t\t\t\t\towner: 'roblourens';\n\t\t\t\t\tcomment: 'Fired when a file search is completed';\n\t\t\t\t\treason?: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Indicates which extension or UI feature triggered this search' };\n\t\t\t\t\tresultCount: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; isMeasurement: true; comment: 'The number of search results' };\n\t\t\t\t\tworkspaceFolderCount: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; isMeasurement: true; comment: 'The number of folders in the workspace' };\n\t\t\t\t\tendToEndTime: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; isMeasurement: true; comment: 'The total search time' };\n\t\t\t\t\tsortingTime?: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; isMeasurement: true; comment: 'The amount of time spent sorting results' };\n\t\t\t\t\tfileWalkTime: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; isMeasurement: true; comment: 'The amount of time spent walking file system' };\n\t\t\t\t\tdirectoriesWalked: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; isMeasurement: true; comment: 'The number of directories walked' };\n\t\t\t\t\tfilesWalked: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; isMeasurement: true; comment: 'The number of files walked' };\n\t\t\t\t\tcmdTime: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; isMeasurement: true; comment: 'The amount of time spent running the search command' };\n\t\t\t\t\tcmdResultCount?: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; isMeasurement: true; comment: 'The number of results returned from the search command' };\n\t\t\t\t\tscheme: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The uri scheme of the folder searched in' };\n\t\t\t\t};\n\t\t\t\ttype SearchCompleteEvent = {\n\t\t\t\t\treason?: string;\n\t\t\t\t\tresultCount: number;\n\t\t\t\t\tworkspaceFolderCount: number;\n\t\t\t\t\tendToEndTime: number;\n\t\t\t\t\tsortingTime?: number;\n\t\t\t\t\tfileWalkTime: number;\n\t\t\t\t\tdirectoriesWalked: number;\n\t\t\t\t\tfilesWalked: number;\n\t\t\t\t\tcmdTime: number;\n\t\t\t\t\tcmdResultCount?: number;\n\t\t\t\t\tscheme: string;\n\n\t\t\t\t};\n\n\t\t\t\tthis.telemetryService.publicLog2<SearchCompleteEvent, SearchCompleteClassification>('searchComplete', {\n\t\t\t\t\treason: query._reason,\n\t\t\t\t\tresultCount: fileSearchStats.resultCount,\n\t\t\t\t\tworkspaceFolderCount: query.folderQueries.length,\n\t\t\t\t\tendToEndTime: endToEndTime,\n\t\t\t\t\tsortingTime: fileSearchStats.sortingTime,\n\t\t\t\t\tfileWalkTime: searchEngineStats.fileWalkTime,\n\t\t\t\t\tdirectoriesWalked: searchEngineStats.directoriesWalked,\n\t\t\t\t\tfilesWalked: searchEngineStats.filesWalked,\n\t\t\t\t\tcmdTime: searchEngineStats.cmdTime,\n\t\t\t\t\tcmdResultCount: searchEngineStats.cmdResultCount,\n\t\t\t\t\tscheme\n\t\t\t\t});\n\t\t\t}\n\t\t} else if (query.type === QueryType.Text) {\n\t\t\tlet errorType: string | undefined;\n\t\t\tif (err) {\n\t\t\t\terrorType = err.code === SearchErrorCode.regexParseError ? 'regex' :\n\t\t\t\t\terr.code === SearchErrorCode.unknownEncoding ? 'encoding' :\n\t\t\t\t\t\terr.code === SearchErrorCode.globParseError ? 'glob' :\n\t\t\t\t\t\t\terr.code === SearchErrorCode.invalidLiteral ? 'literal' :\n\t\t\t\t\t\t\t\terr.code === SearchErrorCode.other ? 'other' :\n\t\t\t\t\t\t\t\t\terr.code === SearchErrorCode.canceled ? 'canceled' :\n\t\t\t\t\t\t\t\t\t\t'unknown';\n\t\t\t}\n\n\t\t\ttype TextSearchCompleteClassification = {\n\t\t\t\towner: 'roblourens';\n\t\t\t\tcomment: 'Fired when a text search is completed';\n\t\t\t\treason?: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'Indicates which extension or UI feature triggered this search' };\n\t\t\t\tworkspaceFolderCount: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; isMeasurement: true; comment: 'The number of folders in the workspace' };\n\t\t\t\tendToEndTime: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; isMeasurement: true; comment: 'The total search time' };\n\t\t\t\tscheme: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The uri scheme of the folder searched in' };\n\t\t\t\terror?: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'The type of the error, if any' };\n\t\t\t};\n\t\t\ttype TextSearchCompleteEvent = {\n\t\t\t\treason?: string;\n\t\t\t\tworkspaceFolderCount: number;\n\t\t\t\tendToEndTime: number;\n\t\t\t\tscheme: string;\n\t\t\t\terror?: string;\n\t\t\t};\n\t\t\tthis.telemetryService.publicLog2<TextSearchCompleteEvent, TextSearchCompleteClassification>('textSearchComplete', {\n\t\t\t\treason: query._reason,\n\t\t\t\tworkspaceFolderCount: query.folderQueries.length,\n\t\t\t\tendToEndTime: endToEndTime,\n\t\t\t\tscheme,\n\t\t\t\terror: errorType,\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate getOpenEditorResults(query: ITextQuery): { results: ResourceMap<IFileMatch | null>; limitHit: boolean } {\n\t\tconst openEditorResults = new ResourceMap<IFileMatch | null>(uri => this.uriIdentityService.extUri.getComparisonKey(uri));\n\t\tlet limitHit = false;\n\n\t\tif (query.type === QueryType.Text) {\n\t\t\tconst canonicalToOriginalResources = new ResourceMap<URI>();\n\t\t\tfor (const editorInput of this.editorService.editors) {\n\t\t\t\tconst canonical = EditorResourceAccessor.getCanonicalUri(editorInput, { supportSideBySide: SideBySideEditor.PRIMARY });\n\t\t\t\tconst original = EditorResourceAccessor.getOriginalUri(editorInput, { supportSideBySide: SideBySideEditor.PRIMARY });\n\n\t\t\t\tif (canonical) {\n\t\t\t\t\tcanonicalToOriginalResources.set(canonical, original ?? canonical);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst models = this.modelService.getModels();\n\t\t\tmodels.forEach((model) => {\n\t\t\t\tconst resource = model.uri;\n\t\t\t\tif (!resource) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (limitHit) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst originalResource = canonicalToOriginalResources.get(resource);\n\t\t\t\tif (!originalResource) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Skip search results\n\t\t\t\tif (model.getLanguageId() === SEARCH_RESULT_LANGUAGE_ID && !(query.includePattern && query.includePattern['**/*.code-search'])) {\n\t\t\t\t\t// TODO: untitled search editors will be excluded from search even when include *.code-search is specified\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Block walkthrough, webview, etc.\n\t\t\t\tif (originalResource.scheme !== Schemas.untitled && !this.fileService.hasProvider(originalResource)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Exclude files from the git FileSystemProvider, e.g. to prevent open staged files from showing in search results\n\t\t\t\tif (originalResource.scheme === 'git') {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!this.matches(originalResource, query)) {\n\t\t\t\t\treturn; // respect user filters\n\t\t\t\t}\n\n\t\t\t\t// Use editor API to find matches\n\t\t\t\tconst askMax = isNumber(query.maxResults) ? query.maxResults + 1 : Number.MAX_SAFE_INTEGER;\n\t\t\t\tlet matches = model.findMatches(query.contentPattern.pattern, false, !!query.contentPattern.isRegExp, !!query.contentPattern.isCaseSensitive, query.contentPattern.isWordMatch ? query.contentPattern.wordSeparators! : null, false, askMax);\n\t\t\t\tif (matches.length) {\n\t\t\t\t\tif (askMax && matches.length >= askMax) {\n\t\t\t\t\t\tlimitHit = true;\n\t\t\t\t\t\tmatches = matches.slice(0, askMax - 1);\n\t\t\t\t\t}\n\n\t\t\t\t\tconst fileMatch = new FileMatch(originalResource);\n\t\t\t\t\topenEditorResults.set(originalResource, fileMatch);\n\n\t\t\t\t\tconst textSearchResults = editorMatchesToTextSearchResults(matches, model, query.previewOptions);\n\t\t\t\t\tfileMatch.results = addContextToEditorMatches(textSearchResults, model, query);\n\t\t\t\t} else {\n\t\t\t\t\topenEditorResults.set(originalResource, null);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\tresults: openEditorResults,\n\t\t\tlimitHit\n\t\t};\n\t}\n\n\tprivate matches(resource: uri, query: ITextQuery): boolean {\n\t\treturn pathIncludedInQuery(query, resource.fsPath);\n\t}\n\n\tasync clearCache(cacheKey: string): Promise<void> {\n\t\tconst clearPs = Array.from(this.fileSearchProviders.values())\n\t\t\t.map(provider => provider && provider.clearCache(cacheKey));\n\t\tawait Promise.all(clearPs);\n\t}\n}\n"]}