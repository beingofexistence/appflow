{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/search/common/ignoreFile.ts"],"names":[],"mappings":"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","file":"ignoreFile.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as glob from 'vs/base/common/glob';\n\n\nexport class IgnoreFile {\n\n\tprivate isPathIgnored: (path: string, isDir: boolean, parent?: IgnoreFile) => boolean;\n\n\tconstructor(\n\t\tcontents: string,\n\t\tprivate readonly location: string,\n\t\tprivate readonly parent?: IgnoreFile) {\n\t\tif (location[location.length - 1] === '\\\\') {\n\t\t\tthrow Error('Unexpected path format, do not use trailing backslashes');\n\t\t}\n\t\tif (location[location.length - 1] !== '/') {\n\t\t\tlocation += '/';\n\t\t}\n\t\tthis.isPathIgnored = this.parseIgnoreFile(contents, this.location, this.parent);\n\t}\n\n\t/**\n\t * Updates the contents of the ignorefile. Preservering the location and parent\n\t * @param contents The new contents of the gitignore file\n\t */\n\tupdateContents(contents: string) {\n\t\tthis.isPathIgnored = this.parseIgnoreFile(contents, this.location, this.parent);\n\t}\n\n\t/**\n\t * Returns true if a path in a traversable directory has not been ignored.\n\t *\n\t * Note: For performance reasons this does not check if the parent directories have been ignored,\n\t * so it should always be used in tandem with `shouldTraverseDir` when walking a directory.\n\t *\n\t * In cases where a path must be tested in isolation, `isArbitraryPathIncluded` should be used.\n\t */\n\tisPathIncludedInTraversal(path: string, isDir: boolean): boolean {\n\t\tif (path[0] !== '/' || path[path.length - 1] === '/') {\n\t\t\tthrow Error('Unexpected path format, expectred to begin with slash and end without. got:' + path);\n\t\t}\n\n\t\tconst ignored = this.isPathIgnored(path, isDir);\n\n\t\treturn !ignored;\n\t}\n\n\t/**\n\t * Returns true if an arbitrary path has not been ignored.\n\t * This is an expensive operation and should only be used ouside of traversals.\n\t */\n\tisArbitraryPathIgnored(path: string, isDir: boolean): boolean {\n\t\tif (path[0] !== '/' || path[path.length - 1] === '/') {\n\t\t\tthrow Error('Unexpected path format, expectred to begin with slash and end without. got:' + path);\n\t\t}\n\n\t\tconst segments = path.split('/').filter(x => x);\n\t\tlet ignored = false;\n\n\t\tlet walkingPath = '';\n\n\t\tfor (let i = 0; i < segments.length; i++) {\n\t\t\tconst isLast = i === segments.length - 1;\n\t\t\tconst segment = segments[i];\n\n\t\t\twalkingPath = walkingPath + '/' + segment;\n\n\t\t\tif (!this.isPathIncludedInTraversal(walkingPath, isLast ? isDir : true)) {\n\t\t\t\tignored = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn ignored;\n\t}\n\n\tprivate gitignoreLinesToExpression(lines: string[], dirPath: string, trimForExclusions: boolean): glob.ParsedExpression {\n\t\tconst includeLines = lines.map(line => this.gitignoreLineToGlob(line, dirPath));\n\n\t\tconst includeExpression: glob.IExpression = Object.create(null);\n\t\tfor (const line of includeLines) {\n\t\t\tincludeExpression[line] = true;\n\t\t}\n\n\t\treturn glob.parse(includeExpression, { trimForExclusions });\n\t}\n\n\n\tprivate parseIgnoreFile(ignoreContents: string, dirPath: string, parent: IgnoreFile | undefined): (path: string, isDir: boolean) => boolean {\n\t\tconst contentLines = ignoreContents\n\t\t\t.split('\\n')\n\t\t\t.map(line => line.trim())\n\t\t\t.filter(line => line && line[0] !== '#');\n\n\t\t// Pull out all the lines that end with `/`, those only apply to directories\n\t\tconst fileLines = contentLines.filter(line => !line.endsWith('/'));\n\n\t\tconst fileIgnoreLines = fileLines.filter(line => !line.includes('!'));\n\t\tconst isFileIgnored = this.gitignoreLinesToExpression(fileIgnoreLines, dirPath, true);\n\n\t\t// TODO: Slight hack... this naieve approach may reintroduce too many files in cases of weirdly complex .gitignores\n\t\tconst fileIncludeLines = fileLines.filter(line => line.includes('!')).map(line => line.replace(/!/g, ''));\n\t\tconst isFileIncluded = this.gitignoreLinesToExpression(fileIncludeLines, dirPath, false);\n\n\t\t// When checking if a dir is ignored we can use all lines\n\t\tconst dirIgnoreLines = contentLines.filter(line => !line.includes('!'));\n\t\tconst isDirIgnored = this.gitignoreLinesToExpression(dirIgnoreLines, dirPath, true);\n\n\t\t// Same hack.\n\t\tconst dirIncludeLines = contentLines.filter(line => line.includes('!')).map(line => line.replace(/!/g, ''));\n\t\tconst isDirIncluded = this.gitignoreLinesToExpression(dirIncludeLines, dirPath, false);\n\n\t\tconst isPathIgnored = (path: string, isDir: boolean) => {\n\t\t\tif (!path.startsWith(dirPath)) { return false; }\n\t\t\tif (isDir && isDirIgnored(path) && !isDirIncluded(path)) { return true; }\n\t\t\tif (isFileIgnored(path) && !isFileIncluded(path)) { return true; }\n\n\t\t\tif (parent) { return parent.isPathIgnored(path, isDir); }\n\n\t\t\treturn false;\n\t\t};\n\n\t\treturn isPathIgnored;\n\t}\n\n\tprivate gitignoreLineToGlob(line: string, dirPath: string): string {\n\t\tconst firstSep = line.indexOf('/');\n\t\tif (firstSep === -1 || firstSep === line.length - 1) {\n\t\t\tline = '**/' + line;\n\t\t} else {\n\t\t\tif (firstSep === 0) {\n\t\t\t\tif (dirPath.slice(-1) === '/') {\n\t\t\t\t\tline = line.slice(1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (dirPath.slice(-1) !== '/') {\n\t\t\t\t\tline = '/' + line;\n\t\t\t\t}\n\t\t\t}\n\t\t\tline = dirPath + line;\n\t\t}\n\n\t\treturn line;\n\t}\n}\n"]}