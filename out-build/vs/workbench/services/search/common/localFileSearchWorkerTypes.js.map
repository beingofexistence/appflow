{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/search/common/localFileSearchWorkerTypes.ts","vs/workbench/services/search/common/localFileSearchWorkerTypes.ts"],"names":[],"mappings":"AAAA;;;gGAGgG","file":"localFileSearchWorkerTypes.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { UriComponents } from 'vs/base/common/uri';\nimport { IFileMatch, IFileQueryProps, IFolderQuery, ITextQueryProps } from 'vs/workbench/services/search/common/search';\n\nexport interface IWorkerTextSearchComplete {\n\tresults: IFileMatch<UriComponents>[];\n\tlimitHit?: boolean;\n}\n\nexport interface IWorkerFileSearchComplete {\n\tresults: string[];\n\tlimitHit?: boolean;\n}\n\n// Copied from lib.dom.ts, which is not available in this layer.\ntype IWorkerFileSystemHandleKind = 'directory' | 'file';\n\nexport interface IWorkerFileSystemHandle {\n\treadonly kind: IWorkerFileSystemHandleKind;\n\treadonly name: string;\n\tisSameEntry(other: IWorkerFileSystemHandle): Promise<boolean>;\n}\n\nexport interface IWorkerFileSystemDirectoryHandle extends IWorkerFileSystemHandle {\n\treadonly kind: 'directory';\n\tgetDirectoryHandle(name: string): Promise<IWorkerFileSystemDirectoryHandle>;\n\tgetFileHandle(name: string): Promise<IWorkerFileSystemFileHandle>;\n\tresolve(possibleDescendant: IWorkerFileSystemHandle): Promise<string[] | null>;\n\tentries(): AsyncIterableIterator<[string, IWorkerFileSystemDirectoryHandle | IWorkerFileSystemFileHandle]>;\n}\n\nexport interface IWorkerFileSystemFileHandle extends IWorkerFileSystemHandle {\n\treadonly kind: 'file';\n\tgetFile(): Promise<{ arrayBuffer(): Promise<ArrayBuffer> }>;\n}\n\nexport interface ILocalFileSearchSimpleWorker {\n\t_requestHandlerBrand: any;\n\n\tcancelQuery(queryId: number): void;\n\n\tlistDirectory(handle: IWorkerFileSystemDirectoryHandle, queryProps: IFileQueryProps<UriComponents>, folderQuery: IFolderQuery, ignorePathCasing: boolean, queryId: number): Promise<IWorkerFileSearchComplete>;\n\tsearchDirectory(handle: IWorkerFileSystemDirectoryHandle, queryProps: ITextQueryProps<UriComponents>, folderQuery: IFolderQuery, ignorePathCasing: boolean, queryId: number): Promise<IWorkerTextSearchComplete>;\n}\n\nexport interface ILocalFileSearchSimpleWorkerHost {\n\tsendTextSearchMatch(match: IFileMatch<UriComponents>, queryId: number): void;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { UriComponents } from 'vs/base/common/uri';\nimport { IFileMatch, IFileQueryProps, IFolderQuery, ITextQueryProps } from 'vs/workbench/services/search/common/search';\n\nexport interface IWorkerTextSearchComplete {\n\tresults: IFileMatch<UriComponents>[];\n\tlimitHit?: boolean;\n}\n\nexport interface IWorkerFileSearchComplete {\n\tresults: string[];\n\tlimitHit?: boolean;\n}\n\n// Copied from lib.dom.ts, which is not available in this layer.\ntype IWorkerFileSystemHandleKind = 'directory' | 'file';\n\nexport interface IWorkerFileSystemHandle {\n\treadonly kind: IWorkerFileSystemHandleKind;\n\treadonly name: string;\n\tisSameEntry(other: IWorkerFileSystemHandle): Promise<boolean>;\n}\n\nexport interface IWorkerFileSystemDirectoryHandle extends IWorkerFileSystemHandle {\n\treadonly kind: 'directory';\n\tgetDirectoryHandle(name: string): Promise<IWorkerFileSystemDirectoryHandle>;\n\tgetFileHandle(name: string): Promise<IWorkerFileSystemFileHandle>;\n\tresolve(possibleDescendant: IWorkerFileSystemHandle): Promise<string[] | null>;\n\tentries(): AsyncIterableIterator<[string, IWorkerFileSystemDirectoryHandle | IWorkerFileSystemFileHandle]>;\n}\n\nexport interface IWorkerFileSystemFileHandle extends IWorkerFileSystemHandle {\n\treadonly kind: 'file';\n\tgetFile(): Promise<{ arrayBuffer(): Promise<ArrayBuffer> }>;\n}\n\nexport interface ILocalFileSearchSimpleWorker {\n\t_requestHandlerBrand: any;\n\n\tcancelQuery(queryId: number): void;\n\n\tlistDirectory(handle: IWorkerFileSystemDirectoryHandle, queryProps: IFileQueryProps<UriComponents>, folderQuery: IFolderQuery, ignorePathCasing: boolean, queryId: number): Promise<IWorkerFileSearchComplete>;\n\tsearchDirectory(handle: IWorkerFileSystemDirectoryHandle, queryProps: ITextQueryProps<UriComponents>, folderQuery: IFolderQuery, ignorePathCasing: boolean, queryId: number): Promise<IWorkerTextSearchComplete>;\n}\n\nexport interface ILocalFileSearchSimpleWorkerHost {\n\tsendTextSearchMatch(match: IFileMatch<UriComponents>, queryId: number): void;\n}\n"]}