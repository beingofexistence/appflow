{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/search/worker/localFileSearch.ts"],"names":[],"mappings":"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","file":"localFileSearch.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as glob from 'vs/base/common/glob';\nimport { UriComponents, URI } from 'vs/base/common/uri';\nimport { IRequestHandler } from 'vs/base/common/worker/simpleWorker';\nimport { ILocalFileSearchSimpleWorker, ILocalFileSearchSimpleWorkerHost, IWorkerFileSearchComplete, IWorkerFileSystemDirectoryHandle, IWorkerFileSystemHandle, IWorkerTextSearchComplete } from 'vs/workbench/services/search/common/localFileSearchWorkerTypes';\nimport { ICommonQueryProps, IFileMatch, IFileQueryProps, IFolderQuery, IPatternInfo, ITextQueryProps, } from 'vs/workbench/services/search/common/search';\nimport * as paths from 'vs/base/common/path';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { getFileResults } from 'vs/workbench/services/search/common/getFileResults';\nimport { IgnoreFile } from 'vs/workbench/services/search/common/ignoreFile';\nimport { createRegExp } from 'vs/base/common/strings';\nimport { Promises } from 'vs/base/common/async';\nimport { ExtUri } from 'vs/base/common/resources';\n\nconst PERF = false;\n\ntype FileNode = {\n\ttype: 'file';\n\tname: string;\n\tpath: string;\n\tresolve: () => Promise<ArrayBuffer>;\n};\n\ntype DirNode = {\n\ttype: 'dir';\n\tname: string;\n\tentries: Promise<(DirNode | FileNode)[]>;\n};\n\nconst globalStart = +new Date();\nconst itrcount: Record<string, number> = {};\nconst time = async <T>(name: string, task: () => Promise<T> | T) => {\n\tif (!PERF) { return task(); }\n\n\tconst start = Date.now();\n\tconst itr = (itrcount[name] ?? 0) + 1;\n\tconsole.info(name, itr, 'starting', Math.round((start - globalStart) * 10) / 10000);\n\n\titrcount[name] = itr;\n\tconst r = await task();\n\tconst end = Date.now();\n\tconsole.info(name, itr, 'took', end - start);\n\treturn r;\n};\n\n/**\n * Called on the worker side\n * @internal\n */\nexport function create(host: ILocalFileSearchSimpleWorkerHost): IRequestHandler {\n\treturn new LocalFileSearchSimpleWorker(host);\n}\n\nexport class LocalFileSearchSimpleWorker implements ILocalFileSearchSimpleWorker, IRequestHandler {\n\t_requestHandlerBrand: any;\n\n\tcancellationTokens: Map<number, CancellationTokenSource> = new Map();\n\n\tconstructor(private host: ILocalFileSearchSimpleWorkerHost) { }\n\n\tcancelQuery(queryId: number): void {\n\t\tthis.cancellationTokens.get(queryId)?.cancel();\n\t}\n\n\tprivate registerCancellationToken(queryId: number): CancellationTokenSource {\n\t\tconst source = new CancellationTokenSource();\n\t\tthis.cancellationTokens.set(queryId, source);\n\t\treturn source;\n\t}\n\n\tasync listDirectory(handle: IWorkerFileSystemDirectoryHandle, query: IFileQueryProps<UriComponents>, folderQuery: IFolderQuery<UriComponents>, ignorePathCasing: boolean, queryId: number): Promise<IWorkerFileSearchComplete> {\n\t\tconst revivedFolderQuery = reviveFolderQuery(folderQuery);\n\t\tconst extUri = new ExtUri(() => ignorePathCasing);\n\n\t\tconst token = this.registerCancellationToken(queryId);\n\t\tconst entries: string[] = [];\n\t\tlet limitHit = false;\n\t\tlet count = 0;\n\n\t\tconst max = query.maxResults || 512;\n\n\t\tconst filePatternMatcher = query.filePattern\n\t\t\t? (name: string) => query.filePattern!.split('').every(c => name.includes(c))\n\t\t\t: (name: string) => true;\n\n\t\tawait time('listDirectory', () => this.walkFolderQuery(handle, reviveQueryProps(query), revivedFolderQuery, extUri, file => {\n\t\t\tif (!filePatternMatcher(file.name)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tcount++;\n\n\t\t\tif (max && count > max) {\n\t\t\t\tlimitHit = true;\n\t\t\t\ttoken.cancel();\n\t\t\t}\n\t\t\treturn entries.push(file.path);\n\t\t}, token.token));\n\n\t\treturn {\n\t\t\tresults: entries,\n\t\t\tlimitHit\n\t\t};\n\t}\n\n\tasync searchDirectory(handle: IWorkerFileSystemDirectoryHandle, query: ITextQueryProps<UriComponents>, folderQuery: IFolderQuery<UriComponents>, ignorePathCasing: boolean, queryId: number): Promise<IWorkerTextSearchComplete> {\n\t\tconst revivedQuery = reviveFolderQuery(folderQuery);\n\t\tconst extUri = new ExtUri(() => ignorePathCasing);\n\n\t\treturn time('searchInFiles', async () => {\n\t\t\tconst token = this.registerCancellationToken(queryId);\n\n\t\t\tconst results: IFileMatch[] = [];\n\n\t\t\tconst pattern = createSearchRegExp(query.contentPattern);\n\n\t\t\tconst onGoingProcesses: Promise<void>[] = [];\n\n\t\t\tlet fileCount = 0;\n\t\t\tlet resultCount = 0;\n\t\t\tconst limitHit = false;\n\n\t\t\tconst processFile = async (file: FileNode) => {\n\t\t\t\tif (token.token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfileCount++;\n\n\t\t\t\tconst contents = await file.resolve();\n\t\t\t\tif (token.token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst bytes = new Uint8Array(contents);\n\t\t\t\tconst fileResults = getFileResults(bytes, pattern, {\n\t\t\t\t\tafterContext: query.afterContext ?? 0,\n\t\t\t\t\tbeforeContext: query.beforeContext ?? 0,\n\t\t\t\t\tpreviewOptions: query.previewOptions,\n\t\t\t\t\tremainingResultQuota: query.maxResults ? (query.maxResults - resultCount) : 10000,\n\t\t\t\t});\n\n\t\t\t\tif (fileResults.length) {\n\t\t\t\t\tresultCount += fileResults.length;\n\t\t\t\t\tif (query.maxResults && resultCount > query.maxResults) {\n\t\t\t\t\t\ttoken.cancel();\n\t\t\t\t\t}\n\t\t\t\t\tconst match = {\n\t\t\t\t\t\tresource: URI.joinPath(revivedQuery.folder, file.path),\n\t\t\t\t\t\tresults: fileResults,\n\t\t\t\t\t};\n\t\t\t\t\tthis.host.sendTextSearchMatch(match, queryId);\n\t\t\t\t\tresults.push(match);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tawait time('walkFolderToResolve', () =>\n\t\t\t\tthis.walkFolderQuery(handle, reviveQueryProps(query), revivedQuery, extUri, async file => onGoingProcesses.push(processFile(file)), token.token)\n\t\t\t);\n\n\t\t\tawait time('resolveOngoingProcesses', () => Promise.all(onGoingProcesses));\n\n\t\t\tif (PERF) { console.log('Searched in', fileCount, 'files'); }\n\n\t\t\treturn {\n\t\t\t\tresults,\n\t\t\t\tlimitHit,\n\t\t\t};\n\t\t});\n\n\t}\n\n\tprivate async walkFolderQuery(handle: IWorkerFileSystemDirectoryHandle, queryProps: ICommonQueryProps<URI>, folderQuery: IFolderQuery<URI>, extUri: ExtUri, onFile: (file: FileNode) => any, token: CancellationToken): Promise<void> {\n\n\t\tconst folderExcludes = glob.parse(folderQuery.excludePattern ?? {}, { trimForExclusions: true }) as glob.ParsedExpression;\n\n\t\t// For folders, only check if the folder is explicitly excluded so walking continues.\n\t\tconst isFolderExcluded = (path: string, basename: string, hasSibling: (query: string) => boolean) => {\n\t\t\tpath = path.slice(1);\n\t\t\tif (folderExcludes(path, basename, hasSibling)) { return true; }\n\t\t\tif (pathExcludedInQuery(queryProps, path)) { return true; }\n\t\t\treturn false;\n\t\t};\n\n\t\t// For files ensure the full check takes place.\n\t\tconst isFileIncluded = (path: string, basename: string, hasSibling: (query: string) => boolean) => {\n\t\t\tpath = path.slice(1);\n\t\t\tif (folderExcludes(path, basename, hasSibling)) { return false; }\n\t\t\tif (!pathIncludedInQuery(queryProps, path, extUri)) { return false; }\n\t\t\treturn true;\n\t\t};\n\n\t\tconst processFile = (file: FileSystemFileHandle, prior: string): FileNode => {\n\n\t\t\tconst resolved: FileNode = {\n\t\t\t\ttype: 'file',\n\t\t\t\tname: file.name,\n\t\t\t\tpath: prior,\n\t\t\t\tresolve: () => file.getFile().then(r => r.arrayBuffer())\n\t\t\t} as const;\n\n\t\t\treturn resolved;\n\t\t};\n\n\t\tconst isFileSystemDirectoryHandle = (handle: IWorkerFileSystemHandle): handle is FileSystemDirectoryHandle => {\n\t\t\treturn handle.kind === 'directory';\n\t\t};\n\n\t\tconst isFileSystemFileHandle = (handle: IWorkerFileSystemHandle): handle is FileSystemFileHandle => {\n\t\t\treturn handle.kind === 'file';\n\t\t};\n\n\t\tconst processDirectory = async (directory: IWorkerFileSystemDirectoryHandle, prior: string, ignoreFile?: IgnoreFile): Promise<DirNode> => {\n\n\t\t\tif (!folderQuery.disregardIgnoreFiles) {\n\t\t\t\tconst ignoreFiles = await Promise.all([\n\t\t\t\t\tdirectory.getFileHandle('.gitignore').catch(e => undefined),\n\t\t\t\t\tdirectory.getFileHandle('.ignore').catch(e => undefined),\n\t\t\t\t]);\n\n\t\t\t\tawait Promise.all(ignoreFiles.map(async file => {\n\t\t\t\t\tif (!file) { return; }\n\n\t\t\t\t\tconst ignoreContents = new TextDecoder('utf8').decode(new Uint8Array(await (await file.getFile()).arrayBuffer()));\n\t\t\t\t\tignoreFile = new IgnoreFile(ignoreContents, prior, ignoreFile);\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\tconst entries = Promises.withAsyncBody<(FileNode | DirNode)[]>(async c => {\n\t\t\t\tconst files: FileNode[] = [];\n\t\t\t\tconst dirs: Promise<DirNode>[] = [];\n\n\t\t\t\tconst entries: [string, IWorkerFileSystemHandle][] = [];\n\t\t\t\tconst sibilings = new Set<string>();\n\n\t\t\t\tfor await (const entry of directory.entries()) {\n\t\t\t\t\tentries.push(entry);\n\t\t\t\t\tsibilings.add(entry[0]);\n\t\t\t\t}\n\n\t\t\t\tfor (const [basename, handle] of entries) {\n\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst path = prior + basename;\n\n\t\t\t\t\tif (ignoreFile && !ignoreFile.isPathIncludedInTraversal(path, handle.kind === 'directory')) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tconst hasSibling = (query: string) => sibilings.has(query);\n\n\t\t\t\t\tif (isFileSystemDirectoryHandle(handle) && !isFolderExcluded(path, basename, hasSibling)) {\n\t\t\t\t\t\tdirs.push(processDirectory(handle, path + '/', ignoreFile));\n\t\t\t\t\t} else if (isFileSystemFileHandle(handle) && isFileIncluded(path, basename, hasSibling)) {\n\t\t\t\t\t\tfiles.push(processFile(handle, path));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tc([...await Promise.all(dirs), ...files]);\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\ttype: 'dir',\n\t\t\t\tname: directory.name,\n\t\t\t\tentries\n\t\t\t};\n\t\t};\n\n\t\tconst resolveDirectory = async (directory: DirNode, onFile: (f: FileNode) => any) => {\n\t\t\tif (token.isCancellationRequested) { return; }\n\n\t\t\tawait Promise.all(\n\t\t\t\t(await directory.entries)\n\t\t\t\t\t.sort((a, b) => -(a.type === 'dir' ? 0 : 1) + (b.type === 'dir' ? 0 : 1))\n\t\t\t\t\t.map(async entry => {\n\t\t\t\t\t\tif (entry.type === 'dir') {\n\t\t\t\t\t\t\treturn resolveDirectory(entry, onFile);\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\treturn onFile(entry);\n\t\t\t\t\t\t}\n\t\t\t\t\t}));\n\t\t};\n\n\t\tconst processed = await time('process', () => processDirectory(handle, '/'));\n\t\tawait time('resolve', () => resolveDirectory(processed, onFile));\n\t}\n}\n\nfunction createSearchRegExp(options: IPatternInfo): RegExp {\n\treturn createRegExp(options.pattern, !!options.isRegExp, {\n\t\twholeWord: options.isWordMatch,\n\t\tglobal: true,\n\t\tmatchCase: options.isCaseSensitive,\n\t\tmultiline: true,\n\t\tunicode: true,\n\t});\n}\n\nfunction reviveFolderQuery(folderQuery: IFolderQuery<UriComponents>): IFolderQuery<URI> {\n\treturn {\n\t\t...folderQuery,\n\t\tfolder: URI.revive(folderQuery.folder),\n\t};\n}\n\nfunction reviveQueryProps(queryProps: ICommonQueryProps<UriComponents>): ICommonQueryProps<URI> {\n\treturn {\n\t\t...queryProps,\n\t\textraFileResources: queryProps.extraFileResources?.map(r => URI.revive(r)),\n\t\tfolderQueries: queryProps.folderQueries.map(fq => reviveFolderQuery(fq)),\n\t};\n}\n\n\nfunction pathExcludedInQuery(queryProps: ICommonQueryProps<URI>, fsPath: string): boolean {\n\tif (queryProps.excludePattern && glob.match(queryProps.excludePattern, fsPath)) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nfunction pathIncludedInQuery(queryProps: ICommonQueryProps<URI>, path: string, extUri: ExtUri): boolean {\n\tif (queryProps.excludePattern && glob.match(queryProps.excludePattern, path)) {\n\t\treturn false;\n\t}\n\n\tif (queryProps.includePattern || queryProps.usingSearchPaths) {\n\t\tif (queryProps.includePattern && glob.match(queryProps.includePattern, path)) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// If searchPaths are being used, the extra file must be in a subfolder and match the pattern, if present\n\t\tif (queryProps.usingSearchPaths) {\n\n\t\t\treturn !!queryProps.folderQueries && queryProps.folderQueries.some(fq => {\n\t\t\t\tconst searchPath = fq.folder;\n\t\t\t\tconst uri = URI.file(path);\n\t\t\t\tif (extUri.isEqualOrParent(uri, searchPath)) {\n\t\t\t\t\tconst relPath = paths.relative(searchPath.path, uri.path);\n\t\t\t\t\treturn !fq.includePattern || !!glob.match(fq.includePattern, relPath);\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\treturn false;\n\t}\n\n\treturn true;\n}\n"]}