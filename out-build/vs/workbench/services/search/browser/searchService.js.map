{"version":3,"sources":["vs/workbench/services/search/browser/searchService.ts"],"names":[],"mappings":"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","file":"searchService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IModelService } from 'vs/editor/common/services/model';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IFileMatch, IFileQuery, ISearchComplete, ISearchProgressItem, ISearchResultProvider, ISearchService, ITextQuery, SearchProviderType, TextSearchCompleteMessageType } from 'vs/workbench/services/search/common/search';\nimport { SearchService } from 'vs/workbench/services/search/common/searchService';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { IWorkerClient, logOnceWebWorkerWarning, SimpleWorkerClient } from 'vs/base/common/worker/simpleWorker';\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { DefaultWorkerFactory } from 'vs/base/browser/defaultWorkerFactory';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ILocalFileSearchSimpleWorker, ILocalFileSearchSimpleWorkerHost } from 'vs/workbench/services/search/common/localFileSearchWorkerTypes';\nimport { memoize } from 'vs/base/common/decorators';\nimport { HTMLFileSystemProvider } from 'vs/platform/files/browser/htmlFileSystemProvider';\nimport { Schemas } from 'vs/base/common/network';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { localize } from 'vs/nls';\nimport { WebFileSystemAccess } from 'vs/platform/files/browser/webFileSystemAccess';\n\nexport class RemoteSearchService extends SearchService {\n\tconstructor(\n\t\t@IModelService modelService: IModelService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@ILogService logService: ILogService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IFileService fileService: IFileService,\n\t\t@IInstantiationService private readonly instantiationService: IInstantiationService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper(modelService, editorService, telemetryService, logService, extensionService, fileService, uriIdentityService);\n\t\tconst searchProvider = this.instantiationService.createInstance(LocalFileSearchWorkerClient);\n\t\tthis.registerSearchResultProvider(Schemas.file, SearchProviderType.file, searchProvider);\n\t\tthis.registerSearchResultProvider(Schemas.file, SearchProviderType.text, searchProvider);\n\t}\n}\n\nexport class LocalFileSearchWorkerClient extends Disposable implements ISearchResultProvider, ILocalFileSearchSimpleWorkerHost {\n\n\tprotected _worker: IWorkerClient<ILocalFileSearchSimpleWorker> | null;\n\tprotected readonly _workerFactory: DefaultWorkerFactory;\n\n\tprivate readonly _onDidReceiveTextSearchMatch = new Emitter<{ match: IFileMatch<UriComponents>; queryId: number }>();\n\treadonly onDidReceiveTextSearchMatch: Event<{ match: IFileMatch<UriComponents>; queryId: number }> = this._onDidReceiveTextSearchMatch.event;\n\n\tprivate cache: { key: string; cache: ISearchComplete } | undefined;\n\n\tprivate queryId: number = 0;\n\n\tconstructor(\n\t\t@IFileService private fileService: IFileService,\n\t\t@IUriIdentityService private uriIdentityService: IUriIdentityService,\n\t) {\n\t\tsuper();\n\t\tthis._worker = null;\n\t\tthis._workerFactory = new DefaultWorkerFactory('localFileSearchWorker');\n\t}\n\n\tsendTextSearchMatch(match: IFileMatch<UriComponents>, queryId: number): void {\n\t\tthis._onDidReceiveTextSearchMatch.fire({ match, queryId });\n\t}\n\n\t@memoize\n\tprivate get fileSystemProvider(): HTMLFileSystemProvider {\n\t\treturn this.fileService.getProvider(Schemas.file) as HTMLFileSystemProvider;\n\t}\n\n\tprivate async cancelQuery(queryId: number) {\n\t\tconst proxy = await this._getOrCreateWorker().getProxyObject();\n\t\tproxy.cancelQuery(queryId);\n\t}\n\n\tasync textSearch(query: ITextQuery, onProgress?: (p: ISearchProgressItem) => void, token?: CancellationToken): Promise<ISearchComplete> {\n\t\ttry {\n\t\t\tconst queryDisposables = new DisposableStore();\n\n\t\t\tconst proxy = await this._getOrCreateWorker().getProxyObject();\n\t\t\tconst results: IFileMatch[] = [];\n\n\t\t\tlet limitHit = false;\n\n\t\t\tawait Promise.all(query.folderQueries.map(async fq => {\n\t\t\t\tconst queryId = this.queryId++;\n\t\t\t\tqueryDisposables.add(token?.onCancellationRequested(e => this.cancelQuery(queryId)) || Disposable.None);\n\n\t\t\t\tconst handle: FileSystemHandle | undefined = await this.fileSystemProvider.getHandle(fq.folder);\n\t\t\t\tif (!handle || !WebFileSystemAccess.isFileSystemDirectoryHandle(handle)) {\n\t\t\t\t\tconsole.error('Could not get directory handle for ', fq);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst reviveMatch = (result: IFileMatch<UriComponents>): IFileMatch => ({\n\t\t\t\t\tresource: URI.revive(result.resource),\n\t\t\t\t\tresults: result.results\n\t\t\t\t});\n\n\t\t\t\tqueryDisposables.add(this.onDidReceiveTextSearchMatch(e => {\n\t\t\t\t\tif (e.queryId === queryId) {\n\t\t\t\t\t\tonProgress?.(reviveMatch(e.match));\n\t\t\t\t\t}\n\t\t\t\t}));\n\n\t\t\t\tconst ignorePathCasing = this.uriIdentityService.extUri.ignorePathCasing(fq.folder);\n\t\t\t\tconst folderResults = await proxy.searchDirectory(handle, query, fq, ignorePathCasing, queryId);\n\t\t\t\tfor (const folderResult of folderResults.results) {\n\t\t\t\t\tresults.push(reviveMatch(folderResult));\n\t\t\t\t}\n\n\t\t\t\tif (folderResults.limitHit) {\n\t\t\t\t\tlimitHit = true;\n\t\t\t\t}\n\n\t\t\t}));\n\n\t\t\tqueryDisposables.dispose();\n\t\t\tconst result = { messages: [], results, limitHit };\n\t\t\treturn result;\n\t\t} catch (e) {\n\t\t\tconsole.error('Error performing web worker text search', e);\n\t\t\treturn {\n\t\t\t\tresults: [],\n\t\t\t\tmessages: [{\n\t\t\t\t\ttext: localize('errorSearchText', \"Unable to search with Web Worker text searcher\"), type: TextSearchCompleteMessageType.Warning\n\t\t\t\t}],\n\t\t\t};\n\t\t}\n\t}\n\n\tasync fileSearch(query: IFileQuery, token?: CancellationToken): Promise<ISearchComplete> {\n\t\ttry {\n\t\t\tconst queryDisposables = new DisposableStore();\n\t\t\tlet limitHit = false;\n\n\t\t\tconst proxy = await this._getOrCreateWorker().getProxyObject();\n\t\t\tconst results: IFileMatch[] = [];\n\t\t\tawait Promise.all(query.folderQueries.map(async fq => {\n\t\t\t\tconst queryId = this.queryId++;\n\t\t\t\tqueryDisposables.add(token?.onCancellationRequested(e => this.cancelQuery(queryId)) || Disposable.None);\n\n\t\t\t\tconst handle: FileSystemHandle | undefined = await this.fileSystemProvider.getHandle(fq.folder);\n\t\t\t\tif (!handle || !WebFileSystemAccess.isFileSystemDirectoryHandle(handle)) {\n\t\t\t\t\tconsole.error('Could not get directory handle for ', fq);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst caseSensitive = this.uriIdentityService.extUri.ignorePathCasing(fq.folder);\n\t\t\t\tconst folderResults = await proxy.listDirectory(handle, query, fq, caseSensitive, queryId);\n\t\t\t\tfor (const folderResult of folderResults.results) {\n\t\t\t\t\tresults.push({ resource: URI.joinPath(fq.folder, folderResult) });\n\t\t\t\t}\n\t\t\t\tif (folderResults.limitHit) { limitHit = true; }\n\t\t\t}));\n\n\t\t\tqueryDisposables.dispose();\n\n\t\t\tconst result = { messages: [], results, limitHit };\n\t\t\treturn result;\n\t\t} catch (e) {\n\t\t\tconsole.error('Error performing web worker file search', e);\n\t\t\treturn {\n\t\t\t\tresults: [],\n\t\t\t\tmessages: [{\n\t\t\t\t\ttext: localize('errorSearchFile', \"Unable to search with Web Worker file searcher\"), type: TextSearchCompleteMessageType.Warning\n\t\t\t\t}],\n\t\t\t};\n\t\t}\n\t}\n\n\tasync clearCache(cacheKey: string): Promise<void> {\n\t\tif (this.cache?.key === cacheKey) { this.cache = undefined; }\n\t}\n\n\tprivate _getOrCreateWorker(): IWorkerClient<ILocalFileSearchSimpleWorker> {\n\t\tif (!this._worker) {\n\t\t\ttry {\n\t\t\t\tthis._worker = this._register(new SimpleWorkerClient<ILocalFileSearchSimpleWorker, ILocalFileSearchSimpleWorkerHost>(\n\t\t\t\t\tthis._workerFactory,\n\t\t\t\t\t'vs/workbench/services/search/worker/localFileSearch',\n\t\t\t\t\tthis,\n\t\t\t\t));\n\t\t\t} catch (err) {\n\t\t\t\tlogOnceWebWorkerWarning(err);\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\treturn this._worker;\n\t}\n}\n\nregisterSingleton(ISearchService, RemoteSearchService, InstantiationType.Delayed);\n"]}