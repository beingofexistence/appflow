{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/url/browser/urlService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAqChG,MAAM,gBAAgB;QAErB,YACS,CAAe,EACf,CAAmB;YADnB,MAAC,GAAD,CAAC,CAAc;YACf,MAAC,GAAD,CAAC,CAAkB;QACxB,CAAC;QAEL,KAAK,CAAC,IAAI,CAAC,QAAsB,EAAE,OAAmD;YACrF,IAAK,OAA2C,EAAE,YAAY,EAAE;gBAC/D,OAAO,KAAK,CAAC;aACb;YAED,IAAI,CAAC,IAAA,YAAG,EAAW,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAc,WAAW,CAAC,EAAE;gBAC9D,OAAO,KAAK,CAAC;aACb;YAED,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;gBACjC,QAAQ,GAAG,SAAG,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;aAC/B;YAED,OAAO,IAAI,CAAC,CAAC,CAAU,IAAI,CAAC,QAAQ,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;QAC1D,CAAC;KACD;IAEM,IAAM,GAAG,GAAT,MAAM,GAAkB,SAAQ,gBAAG;QAIzC,YACsC,kBAAuB,EAC5C,aAAkB,EACjB,cAAmB;YAEpC,KAAK,EAAE,CAAC;YAER,IAAI,CAAC,CAAC,GAAU,kBAAkB,CAAC,OAAO,EAAE,mBAAmB,CAAC;YAEhE,IAAI,IAAI,CAAC,CAAC,EAAS;gBAClB,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAQ,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;aACnF;YAED,IAAI,CAAC,CAAC,CAAS,aAAa,CAAC,cAAc,CAAC,IAAI,gBAAgB,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC,CAAC,CAAC;QAC1F,CAAC;QAED,MAAM,CAAC,OAAgC;YACtC,IAAI,IAAI,CAAC,CAAC,EAAS;gBAClB,OAAO,IAAI,CAAC,CAAC,CAAQ,MAAM,CAAC,OAAO,CAAC,CAAC;aACrC;YAED,OAAO,SAAG,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC;QACpC,CAAC;KACD,CAAA;IA3BY,kBAAG;kBAAH,GAAG;QAKb,WAAA,wBAAG,CAAA;QACH,WAAA,YAAG,CAAA;QACH,WAAA,oBAAG,CAAA;OAPO,GAAG,CA2Bf;IAED,IAAA,gBAAG,EAAe,SAAG,EAAU,GAAG,oCAA0C,CAAC","file":"urlService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IURLService } from 'vs/platform/url/common/url';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { AbstractURLService } from 'vs/platform/url/common/urlService';\nimport { Event } from 'vs/base/common/event';\nimport { IBrowserWorkbenchEnvironmentService } from 'vs/workbench/services/environment/browser/environmentService';\nimport { IOpenerService, IOpener, OpenExternalOptions, OpenInternalOptions, matchesScheme } from 'vs/platform/opener/common/opener';\nimport { IProductService } from 'vs/platform/product/common/productService';\n\nexport interface IURLCallbackProvider {\n\n\t/**\n\t * Indicates that a Uri has been opened outside of VSCode. The Uri\n\t * will be forwarded to all installed Uri handlers in the system.\n\t */\n\treadonly onCallback: Event<URI>;\n\n\t/**\n\t * Creates a Uri that - if opened in a browser - must result in\n\t * the `onCallback` to fire.\n\t *\n\t * The optional `Partial<UriComponents>` must be properly restored for\n\t * the Uri passed to the `onCallback` handler.\n\t *\n\t * For example: if a Uri is to be created with `scheme:\"vscode\"`,\n\t * `authority:\"foo\"` and `path:\"bar\"` the `onCallback` should fire\n\t * with a Uri `vscode://foo/bar`.\n\t *\n\t * If there are additional `query` values in the Uri, they should\n\t * be added to the list of provided `query` arguments from the\n\t * `Partial<UriComponents>`.\n\t */\n\tcreate(options?: Partial<UriComponents>): URI;\n}\n\nclass BrowserURLOpener implements IOpener {\n\n\tconstructor(\n\t\tprivate urlService: IURLService,\n\t\tprivate productService: IProductService\n\t) { }\n\n\tasync open(resource: string | URI, options?: OpenInternalOptions | OpenExternalOptions): Promise<boolean> {\n\t\tif ((options as OpenExternalOptions | undefined)?.openExternal) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (!matchesScheme(resource, this.productService.urlProtocol)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (typeof resource === 'string') {\n\t\t\tresource = URI.parse(resource);\n\t\t}\n\n\t\treturn this.urlService.open(resource, { trusted: true });\n\t}\n}\n\nexport class BrowserURLService extends AbstractURLService {\n\n\tprivate provider: IURLCallbackProvider | undefined;\n\n\tconstructor(\n\t\t@IBrowserWorkbenchEnvironmentService environmentService: IBrowserWorkbenchEnvironmentService,\n\t\t@IOpenerService openerService: IOpenerService,\n\t\t@IProductService productService: IProductService\n\t) {\n\t\tsuper();\n\n\t\tthis.provider = environmentService.options?.urlCallbackProvider;\n\n\t\tif (this.provider) {\n\t\t\tthis._register(this.provider.onCallback(uri => this.open(uri, { trusted: true })));\n\t\t}\n\n\t\tthis._register(openerService.registerOpener(new BrowserURLOpener(this, productService)));\n\t}\n\n\tcreate(options?: Partial<UriComponents>): URI {\n\t\tif (this.provider) {\n\t\t\treturn this.provider.create(options);\n\t\t}\n\n\t\treturn URI.parse('unsupported://');\n\t}\n}\n\nregisterSingleton(IURLService, BrowserURLService, InstantiationType.Delayed);\n"]}