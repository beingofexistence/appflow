{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/secrets/browser/secretStorageService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUzF,IAAM,IAAI,GAAV,MAAM,IAA4B,SAAQ,aAAG;QAKnD,YACkB,cAAmB,EAChB,iBAAsB,EACL,kBAAuB,EAC/C,UAAe;YAE5B,gEAAgE;YAChE,+CAA+C;YAC/C,KAAK,CAAC,IAAI,EAAE,cAAc,EAAE,iBAAiB,EAAE,UAAU,CAAC,CAAC;YAE3D,IAAI,kBAAkB,CAAC,OAAO,EAAE,qBAAqB,EAAE;gBACtD,IAAI,CAAC,CAAC,GAAwB,kBAAkB,CAAC,OAAO,CAAC,qBAAqB,CAAC;gBAC/E,IAAI,CAAC,CAAC,GAAoB,IAAI,WAAG,EAAqB,CAAC;aACvD;QACF,CAAC;QAEQ,GAAG,CAAC,GAAW;YACvB,IAAI,IAAI,CAAC,CAAC,EAAuB;gBAChC,OAAO,IAAI,CAAC,CAAmB,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,CAAuB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC;aACxF;YAED,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACvB,CAAC;QAEQ,GAAG,CAAC,GAAW,EAAE,KAAa;YACtC,IAAI,IAAI,CAAC,CAAC,EAAuB;gBAChC,OAAO,IAAI,CAAC,CAAmB,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,IAAI,EAAE;oBACrD,MAAM,IAAI,CAAC,CAAuB,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;oBACnD,IAAI,CAAC,CAAC,CAAwB,IAAI,CAAC,GAAG,CAAC,CAAC;gBACzC,CAAC,CAAC,CAAC;aACH;YAED,OAAO,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAC9B,CAAC;QAEQ,MAAM,CAAC,GAAW;YAC1B,IAAI,IAAI,CAAC,CAAC,EAAuB;gBAChC,OAAO,IAAI,CAAC,CAAmB,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,IAAI,EAAE;oBACrD,MAAM,IAAI,CAAC,CAAuB,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;oBAC/C,IAAI,CAAC,CAAC,CAAwB,IAAI,CAAC,GAAG,CAAC,CAAC;gBACzC,CAAC,CAAC,CAAC;aACH;YAED,OAAO,KAAK,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAC1B,CAAC;QAED,IAAa,IAAI;YAChB,IAAI,IAAI,CAAC,CAAC,EAAuB;gBAChC,OAAO,IAAI,CAAC,CAAC,CAAsB,IAAI,CAAC;aACxC;YAED,OAAO,KAAK,CAAC,IAAI,CAAC;QACnB,CAAC;KACD,CAAA;IA1DY,oBAAI;mBAAJ,IAAI;QAMd,WAAA,aAAG,CAAA;QACH,WAAA,uBAAG,CAAA;QACH,WAAA,wBAAG,CAAA;QACH,WAAA,SAAG,CAAA;OATO,IAAI,CA0DhB;IAED,IAAA,gBAAG,EAAe,aAAG,EAAoB,IAAI,oCAAmD,CAAC","file":"secretStorageService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { SequencerByKey } from 'vs/base/common/async';\nimport { IEncryptionService } from 'vs/platform/encryption/common/encryptionService';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ISecretStorageProvider, ISecretStorageService, BaseSecretStorageService } from 'vs/platform/secrets/common/secrets';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { IBrowserWorkbenchEnvironmentService } from 'vs/workbench/services/environment/browser/environmentService';\n\nexport class BrowserSecretStorageService extends BaseSecretStorageService {\n\n\tprivate readonly _secretStorageProvider: ISecretStorageProvider | undefined;\n\tprivate readonly _embedderSequencer: SequencerByKey<string> | undefined;\n\n\tconstructor(\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IEncryptionService encryptionService: IEncryptionService,\n\t\t@IBrowserWorkbenchEnvironmentService environmentService: IBrowserWorkbenchEnvironmentService,\n\t\t@ILogService logService: ILogService\n\t) {\n\t\t// We don't have encryption in the browser so instead we use the\n\t\t// in-memory base class implementation instead.\n\t\tsuper(true, storageService, encryptionService, logService);\n\n\t\tif (environmentService.options?.secretStorageProvider) {\n\t\t\tthis._secretStorageProvider = environmentService.options.secretStorageProvider;\n\t\t\tthis._embedderSequencer = new SequencerByKey<string>();\n\t\t}\n\t}\n\n\toverride get(key: string): Promise<string | undefined> {\n\t\tif (this._secretStorageProvider) {\n\t\t\treturn this._embedderSequencer!.queue(key, () => this._secretStorageProvider!.get(key));\n\t\t}\n\n\t\treturn super.get(key);\n\t}\n\n\toverride set(key: string, value: string): Promise<void> {\n\t\tif (this._secretStorageProvider) {\n\t\t\treturn this._embedderSequencer!.queue(key, async () => {\n\t\t\t\tawait this._secretStorageProvider!.set(key, value);\n\t\t\t\tthis.onDidChangeSecretEmitter.fire(key);\n\t\t\t});\n\t\t}\n\n\t\treturn super.set(key, value);\n\t}\n\n\toverride delete(key: string): Promise<void> {\n\t\tif (this._secretStorageProvider) {\n\t\t\treturn this._embedderSequencer!.queue(key, async () => {\n\t\t\t\tawait this._secretStorageProvider!.delete(key);\n\t\t\t\tthis.onDidChangeSecretEmitter.fire(key);\n\t\t\t});\n\t\t}\n\n\t\treturn super.delete(key);\n\t}\n\n\toverride get type() {\n\t\tif (this._secretStorageProvider) {\n\t\t\treturn this._secretStorageProvider.type;\n\t\t}\n\n\t\treturn super.type;\n\t}\n}\n\nregisterSingleton(ISecretStorageService, BrowserSecretStorageService, InstantiationType.Delayed);\n"]}