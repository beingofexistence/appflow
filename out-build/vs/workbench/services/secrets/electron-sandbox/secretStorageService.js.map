{"version":3,"sources":["vs/workbench/services/secrets/electron-sandbox/secretStorageService.ts"],"names":[],"mappings":"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","file":"secretStorageService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { once } from 'vs/base/common/functional';\nimport { isLinux } from 'vs/base/common/platform';\nimport Severity from 'vs/base/common/severity';\nimport { localize } from 'vs/nls';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IEncryptionService, KnownStorageProvider, PasswordStoreCLIOption, isGnome, isKwallet } from 'vs/platform/encryption/common/encryptionService';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { INotificationService, IPromptChoice } from 'vs/platform/notification/common/notification';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { BaseSecretStorageService, ISecretStorageService } from 'vs/platform/secrets/common/secrets';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { IJSONEditingService } from 'vs/workbench/services/configuration/common/jsonEditing';\n\nexport class NativeSecretStorageService extends BaseSecretStorageService {\n\n\tconstructor(\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@IDialogService private readonly _dialogService: IDialogService,\n\t\t@IOpenerService private readonly _openerService: IOpenerService,\n\t\t@IJSONEditingService private readonly _jsonEditingService: IJSONEditingService,\n\t\t@INativeEnvironmentService private readonly _environmentService: INativeEnvironmentService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IEncryptionService encryptionService: IEncryptionService,\n\t\t@ILogService logService: ILogService\n\t) {\n\t\tsuper(\n\t\t\t!!_environmentService.useInMemorySecretStorage,\n\t\t\tstorageService,\n\t\t\tencryptionService,\n\t\t\tlogService\n\t\t);\n\t}\n\n\toverride set(key: string, value: string): Promise<void> {\n\t\tthis._sequencer.queue(key, async () => {\n\t\t\tawait this.resolvedStorageService;\n\n\t\t\tif (this.type !== 'persisted' && !this._environmentService.useInMemorySecretStorage) {\n\t\t\t\tthis._logService.trace('[NativeSecretStorageService] Notifying user that secrets are not being stored on disk.');\n\t\t\t\tawait this.notifyOfNoEncryptionOnce();\n\t\t\t}\n\n\t\t});\n\n\t\treturn super.set(key, value);\n\t}\n\n\tprivate notifyOfNoEncryptionOnce = once(() => this.notifyOfNoEncryption());\n\tprivate async notifyOfNoEncryption(): Promise<void> {\n\t\tconst buttons: IPromptChoice[] = [];\n\t\tconst troubleshootingButton: IPromptChoice = {\n\t\t\tlabel: localize('troubleshootingButton', \"Open troubleshooting guide\"),\n\t\t\trun: () => this._openerService.open('https://go.microsoft.com/fwlink/?linkid=2239490'),\n\t\t\t// doesn't close dialogs\n\t\t\tkeepOpen: true\n\t\t};\n\t\tbuttons.push(troubleshootingButton);\n\n\t\tlet errorMessage = localize('encryptionNotAvailableJustTroubleshootingGuide', \"An OS keyring couldn't be identified for storing the encryption related data in your current desktop environment.\");\n\n\t\tif (!isLinux) {\n\t\t\tthis._notificationService.prompt(Severity.Error, errorMessage, buttons);\n\t\t\treturn;\n\t\t}\n\n\t\tconst provider = await this._encryptionService.getKeyStorageProvider();\n\t\tif (provider === KnownStorageProvider.basicText) {\n\t\t\tconst detail = localize('usePlainTextExtraSentence', \"Open the troubleshooting guide to address this or you can use weaker encryption that doesn't use the OS keyring.\");\n\t\t\tconst usePlainTextButton: IPromptChoice = {\n\t\t\t\tlabel: localize('usePlainText', \"Use weaker encryption\"),\n\t\t\t\trun: async () => {\n\t\t\t\t\tawait this._encryptionService.setUsePlainTextEncryption();\n\t\t\t\t\tawait this._jsonEditingService.write(this._environmentService.argvResource, [{ path: ['password-store'], value: PasswordStoreCLIOption.basic }], true);\n\t\t\t\t\tthis.reinitialize();\n\t\t\t\t}\n\t\t\t};\n\t\t\tbuttons.unshift(usePlainTextButton);\n\n\t\t\tawait this._dialogService.prompt({\n\t\t\t\ttype: 'error',\n\t\t\t\tbuttons,\n\t\t\t\tmessage: errorMessage,\n\t\t\t\tdetail\n\t\t\t});\n\t\t\treturn;\n\t\t}\n\n\t\tif (isGnome(provider)) {\n\t\t\terrorMessage = localize('isGnome', \"You're running in a GNOME environment but the OS keyring is not available for encryption. Ensure you have gnome-keyring or another libsecret compatible implementation installed and running.\");\n\t\t} else if (isKwallet(provider)) {\n\t\t\terrorMessage = localize('isKwallet', \"You're running in a KDE environment but the OS keyring is not available for encryption. Ensure you have kwallet running.\");\n\t\t}\n\n\t\tthis._notificationService.prompt(Severity.Error, errorMessage, buttons);\n\t}\n}\n\nregisterSingleton(ISecretStorageService, NativeSecretStorageService, InstantiationType.Delayed);\n"]}