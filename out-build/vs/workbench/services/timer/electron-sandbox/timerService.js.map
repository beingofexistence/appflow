{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/timer/electron-sandbox/timerService.ts"],"names":[],"mappings":"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","file":"timerService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { INativeHostService } from 'vs/platform/native/common/native';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IUpdateService } from 'vs/platform/update/common/update';\nimport { ILifecycleService } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IAccessibilityService } from 'vs/platform/accessibility/common/accessibility';\nimport { IStartupMetrics, AbstractTimerService, Writeable, ITimerService } from 'vs/workbench/services/timer/browser/timerService';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { process } from 'vs/base/parts/sandbox/electron-sandbox/globals';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IWorkbenchLayoutService } from 'vs/workbench/services/layout/browser/layoutService';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { IPaneCompositePartService } from 'vs/workbench/services/panecomposite/browser/panecomposite';\n\nexport class TimerService extends AbstractTimerService {\n\n\tconstructor(\n\t\t@INativeHostService private readonly _nativeHostService: INativeHostService,\n\t\t@INativeWorkbenchEnvironmentService private readonly _environmentService: INativeWorkbenchEnvironmentService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IWorkspaceContextService contextService: IWorkspaceContextService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IUpdateService updateService: IUpdateService,\n\t\t@IPaneCompositePartService paneCompositeService: IPaneCompositePartService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IAccessibilityService accessibilityService: IAccessibilityService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IWorkbenchLayoutService layoutService: IWorkbenchLayoutService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t\t@IStorageService private readonly _storageService: IStorageService\n\t) {\n\t\tsuper(lifecycleService, contextService, extensionService, updateService, paneCompositeService, editorService, accessibilityService, telemetryService, layoutService);\n\t\tthis.setPerformanceMarks('main', _environmentService.window.perfMarks);\n\t}\n\n\tprotected _isInitialStartup(): boolean {\n\t\treturn Boolean(this._environmentService.window.isInitialStartup);\n\t}\n\tprotected _didUseCachedData(): boolean {\n\t\treturn didUseCachedData(this._productService, this._storageService, this._environmentService);\n\t}\n\tprotected _getWindowCount(): Promise<number> {\n\t\treturn this._nativeHostService.getWindowCount();\n\t}\n\n\tprotected async _extendStartupInfo(info: Writeable<IStartupMetrics>): Promise<void> {\n\t\ttry {\n\t\t\tconst [osProperties, osStatistics, virtualMachineHint, isARM64Emulated] = await Promise.all([\n\t\t\t\tthis._nativeHostService.getOSProperties(),\n\t\t\t\tthis._nativeHostService.getOSStatistics(),\n\t\t\t\tthis._nativeHostService.getOSVirtualMachineHint(),\n\t\t\t\tthis._nativeHostService.isRunningUnderARM64Translation()\n\t\t\t]);\n\n\t\t\tinfo.totalmem = osStatistics.totalmem;\n\t\t\tinfo.freemem = osStatistics.freemem;\n\t\t\tinfo.platform = osProperties.platform;\n\t\t\tinfo.release = osProperties.release;\n\t\t\tinfo.arch = osProperties.arch;\n\t\t\tinfo.loadavg = osStatistics.loadavg;\n\t\t\tinfo.isARM64Emulated = isARM64Emulated;\n\n\t\t\tconst processMemoryInfo = await process.getProcessMemoryInfo();\n\t\t\tinfo.meminfo = {\n\t\t\t\tworkingSetSize: processMemoryInfo.residentSet,\n\t\t\t\tprivateBytes: processMemoryInfo.private,\n\t\t\t\tsharedBytes: processMemoryInfo.shared\n\t\t\t};\n\n\t\t\tinfo.isVMLikelyhood = Math.round((virtualMachineHint * 100));\n\n\t\t\tconst rawCpus = osProperties.cpus;\n\t\t\tif (rawCpus && rawCpus.length > 0) {\n\t\t\t\tinfo.cpus = { count: rawCpus.length, speed: rawCpus[0].speed, model: rawCpus[0].model };\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// ignore, be on the safe side with these hardware method calls\n\t\t}\n\t}\n\n\tprotected override _shouldReportPerfMarks(): boolean {\n\t\t// always send when running with the prof-append-timers flag\n\t\treturn super._shouldReportPerfMarks() || Boolean(this._environmentService.args['prof-append-timers']);\n\t}\n}\n\nregisterSingleton(ITimerService, TimerService, InstantiationType.Delayed);\n\n//#region cached data logic\n\nconst lastRunningCommitStorageKey = 'perf/lastRunningCommit';\nlet _didUseCachedData: boolean | undefined = undefined;\n\nexport function didUseCachedData(productService: IProductService, storageService: IStorageService, environmentService: INativeWorkbenchEnvironmentService): boolean {\n\t// browser code loading: only a guess based on\n\t// this being the first start with the commit\n\t// or subsequent\n\tif (typeof _didUseCachedData !== 'boolean') {\n\t\tif (!environmentService.window.isCodeCaching || !productService.commit) {\n\t\t\t_didUseCachedData = false; // we only produce cached data whith commit and code cache path\n\t\t} else if (storageService.get(lastRunningCommitStorageKey, StorageScope.APPLICATION) === productService.commit) {\n\t\t\t_didUseCachedData = true; // subsequent start on same commit, assume cached data is there\n\t\t} else {\n\t\t\tstorageService.store(lastRunningCommitStorageKey, productService.commit, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t\t_didUseCachedData = false; // first time start on commit, assume cached data is not yet there\n\t\t}\n\t}\n\treturn _didUseCachedData;\n}\n\n//#endregion\n"]}