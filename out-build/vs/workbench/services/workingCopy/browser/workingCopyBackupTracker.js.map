{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/workingCopy/browser/workingCopyBackupTracker.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAazF,IAAM,IAAI,GAAV,MAAM,IAAgC,SAAQ,+BAAI;QAExD,YAC4B,wBAA6B,EAC5B,yBAA8B,EACrC,kBAAuB,EACzB,gBAAqB,EAC3B,UAAe,EACD,wBAA6B,EACxC,aAAkB,EACZ,kBAAuB;YAE7C,KAAK,CAAC,wBAAwB,EAAE,kBAAkB,EAAE,UAAU,EAAE,gBAAgB,EAAE,yBAAyB,EAAE,wBAAwB,EAAE,aAAa,EAAE,kBAAkB,CAAC,CAAC;QAC3K,CAAC;QAES,CAAC,CAAqB,MAAsB;YAErD,4DAA4D;YAC5D,kEAAkE;YAClE,+DAA+D;YAC/D,gCAAgC;YAEhC,MAAM,qBAAqB,GAAG,IAAI,CAAC,CAAC,CAAkB,qBAAqB,CAAC;YAC5E,IAAI,CAAC,qBAAqB,CAAC,MAAM,EAAE;gBAClC,OAAO,KAAK,CAAC,CAAC,4BAA4B;aAC1C;YAED,IAAI,CAAC,IAAI,CAAC,CAAC,CAAyB,gBAAgB,EAAE;gBACrD,OAAO,IAAI,CAAC,CAAC,gCAAgC;aAC7C;YAED,KAAK,MAAM,mBAAmB,IAAI,qBAAqB,EAAE;gBACxD,IAAI,CAAC,IAAI,CAAC,CAAC,CAAwB,aAAa,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC,CAAiB,mBAAmB,CAAC,CAAC,EAAE;oBACnH,IAAI,CAAC,CAAC,CAAU,IAAI,CAAC,8BAA8B,CAAC,CAAC;oBAErD,OAAO,IAAI,CAAC,CAAC,gCAAgC;iBAC7C;aACD;YAED,OAAO,KAAK,CAAC,CAAC,kCAAkC;QACjD,CAAC;KACD,CAAA;IAzCY,oBAAI;mBAAJ,IAAI;QAGd,WAAA,uBAAG,CAAA;QACH,WAAA,+BAAG,CAAA;QACH,WAAA,wBAAG,CAAA;QACH,WAAA,eAAG,CAAA;QACH,WAAA,SAAG,CAAA;QACH,WAAA,8BAAG,CAAA;QACH,WAAA,mBAAG,CAAA;QACH,WAAA,yBAAG,CAAA;OAVO,IAAI,CAyChB","file":"workingCopyBackupTracker.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IWorkingCopyBackupService } from 'vs/workbench/services/workingCopy/common/workingCopyBackup';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IFilesConfigurationService } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\nimport { IWorkingCopyService } from 'vs/workbench/services/workingCopy/common/workingCopyService';\nimport { ILifecycleService, ShutdownReason } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { WorkingCopyBackupTracker } from 'vs/workbench/services/workingCopy/common/workingCopyBackupTracker';\nimport { IWorkingCopyEditorService } from 'vs/workbench/services/workingCopy/common/workingCopyEditorService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\n\nexport class BrowserWorkingCopyBackupTracker extends WorkingCopyBackupTracker implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IWorkingCopyBackupService workingCopyBackupService: IWorkingCopyBackupService,\n\t\t@IFilesConfigurationService filesConfigurationService: IFilesConfigurationService,\n\t\t@IWorkingCopyService workingCopyService: IWorkingCopyService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@ILogService logService: ILogService,\n\t\t@IWorkingCopyEditorService workingCopyEditorService: IWorkingCopyEditorService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService\n\t) {\n\t\tsuper(workingCopyBackupService, workingCopyService, logService, lifecycleService, filesConfigurationService, workingCopyEditorService, editorService, editorGroupService);\n\t}\n\n\tprotected onFinalBeforeShutdown(reason: ShutdownReason): boolean {\n\n\t\t// Web: we cannot perform long running in the shutdown phase\n\t\t// As such we need to check sync if there are any modified working\n\t\t// copies that have not been backed up yet and then prevent the\n\t\t// shutdown if that is the case.\n\n\t\tconst modifiedWorkingCopies = this.workingCopyService.modifiedWorkingCopies;\n\t\tif (!modifiedWorkingCopies.length) {\n\t\t\treturn false; // nothing modified: no veto\n\t\t}\n\n\t\tif (!this.filesConfigurationService.isHotExitEnabled) {\n\t\t\treturn true; // modified without backup: veto\n\t\t}\n\n\t\tfor (const modifiedWorkingCopy of modifiedWorkingCopies) {\n\t\t\tif (!this.workingCopyBackupService.hasBackupSync(modifiedWorkingCopy, this.getContentVersion(modifiedWorkingCopy))) {\n\t\t\t\tthis.logService.warn('Unload veto: pending backups');\n\n\t\t\t\treturn true; // modified without backup: veto\n\t\t\t}\n\t\t}\n\n\t\treturn false; // modified and backed up: no veto\n\t}\n}\n"]}