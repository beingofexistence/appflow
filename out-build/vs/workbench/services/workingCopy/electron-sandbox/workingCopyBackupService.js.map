{"version":3,"sources":["vs/workbench/services/workingCopy/electron-sandbox/workingCopyBackupService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAezF,IAAM,IAAI,GAAV,MAAM,IAA+B,SAAQ,+BAAI;QAEvD,YACqC,kBAAwB,EAC9C,WAAgB,EACjB,UAAe,EACQ,CAAqB;YAEzD,KAAK,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC,CAAC,SAAG,CAAC,IAAI,CAAC,kBAAkB,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,kBAAkB,CAAC,mBAAmB,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;YAFhJ,MAAC,GAAD,CAAC,CAAoB;YAIzD,IAAI,CAAC,CAAC,EAAkB,CAAC;QAC1B,CAAC;QAEO,CAAC;YAER,wDAAwD;YACxD,sDAAsD;YACtD,sDAAsD;YACtD,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAgB,cAAc,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,EAAE,EAAE,EAAE,EAAE,yBAAyB,EAAE,KAAK,EAAE,IAAA,cAAQ,EAAC,CAAyB,EAAE,IAAuB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACvM,CAAC;KACD,CAAA;IApBY,oBAAI;mBAAJ,IAAI;QAGd,WAAA,yBAAI,CAAA;QACJ,WAAA,WAAG,CAAA;QACH,WAAA,SAAG,CAAA;QACH,WAAA,eAAG,CAAA;OANO,IAAI,CAoBhB;IAED,mBAAmB;IACnB,IAAA,gBAAG,EAAe,uBAAG,EAAwB,IAAI,kCAAoD,CAAC;IAEtG,0BAA0B;IAC1B,cAAG,CAAM,EAAE,CAAkC,0BAAmB,CAAC,SAAS,CAAC,CAAC,6BAA6B,CAAC,+BAAI,kCAAoD,CAAC","file":"workingCopyBackupService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { WorkingCopyBackupService } from 'vs/workbench/services/workingCopy/common/workingCopyBackupService';\nimport { URI } from 'vs/base/common/uri';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IWorkingCopyBackupService } from 'vs/workbench/services/workingCopy/common/workingCopyBackup';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { INativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { ILifecycleService, LifecyclePhase } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { NativeWorkingCopyBackupTracker } from 'vs/workbench/services/workingCopy/electron-sandbox/workingCopyBackupTracker';\n\nexport class NativeWorkingCopyBackupService extends WorkingCopyBackupService {\n\n\tconstructor(\n\t\t@INativeWorkbenchEnvironmentService environmentService: INativeWorkbenchEnvironmentService,\n\t\t@IFileService fileService: IFileService,\n\t\t@ILogService logService: ILogService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService\n\t) {\n\t\tsuper(environmentService.backupPath ? URI.file(environmentService.backupPath).with({ scheme: environmentService.userRoamingDataHome.scheme }) : undefined, fileService, logService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Lifecycle: ensure to prolong the shutdown for as long\n\t\t// as pending backup operations have not finished yet.\n\t\t// Otherwise, we risk writing partial backups to disk.\n\t\tthis._register(this.lifecycleService.onWillShutdown(event => event.join(this.joinBackups(), { id: 'join.workingCopyBackups', label: localize('join.workingCopyBackups', \"Backup working copies\") })));\n\t}\n}\n\n// Register Service\nregisterSingleton(IWorkingCopyBackupService, NativeWorkingCopyBackupService, InstantiationType.Eager);\n\n// Register Backup Tracker\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(NativeWorkingCopyBackupTracker, LifecyclePhase.Starting);\n"]}