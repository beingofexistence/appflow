{"version":3,"sources":["vs/workbench/services/workingCopy/electron-sandbox/workingCopyBackupTracker.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAyBzF,IAAM,IAAI,GAAV,MAAM,IAA+B,SAAQ,+BAAI;QAEvD,YAC4B,wBAA6B,EAC5B,yBAA8B,EACrC,kBAAuB,EACzB,gBAAqB,EACH,CAAsB,EAC1B,CAAkB,EACR,CAAmB,EACzB,EAAuB,EAC/C,UAAe,EACU,EAAuB,EAC1B,EAAoB,EAC5B,wBAA6B,EACxC,aAAkB,EACZ,kBAAuB;YAE7C,KAAK,CAAC,wBAAwB,EAAE,kBAAkB,EAAE,UAAU,EAAE,gBAAgB,EAAE,yBAAyB,EAAE,wBAAwB,EAAE,aAAa,EAAE,kBAAkB,CAAC,CAAC;YAXrI,MAAC,GAAD,CAAC,CAAqB;YAC1B,MAAC,GAAD,CAAC,CAAiB;YACR,MAAC,GAAD,CAAC,CAAkB;YACzB,OAAE,GAAF,EAAE,CAAqB;YAEtB,OAAE,GAAF,EAAE,CAAqB;YAC1B,OAAE,GAAF,EAAE,CAAkB;QAMxD,CAAC;QAES,KAAK,CAAC,CAAC,CAAqB,MAAsB;YAE3D,yEAAyE;YACzE,sEAAsE;YACtE,yEAAyE;YACzE,sEAAsE;YACtE,kEAAkE;YAClE,sDAAsD;YAEtD,IAAI,CAAC,CAAC,EAAuB,CAAC;YAE9B,uEAAuE;YACvE,sEAAsE;YACtE,sEAAsE;YACtE,oDAAoD;YAEpD,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,CAAC,EAAwB,CAAC;YAElD,IAAI;gBAEH,qDAAqD;gBACrD,MAAM,qBAAqB,GAAG,IAAI,CAAC,CAAC,CAAkB,qBAAqB,CAAC;gBAC5E,IAAI,qBAAqB,CAAC,MAAM,EAAE;oBACjC,OAAO,MAAM,IAAI,CAAC,EAAE,CAA2B,MAAM,EAAE,qBAAqB,CAAC,CAAC;iBAC9E;gBAED,6BAA6B;qBACxB;oBACJ,OAAO,MAAM,IAAI,CAAC,EAAE,EAA+B,CAAC;iBACpD;aACD;oBAAS;gBACT,MAAM,EAAE,CAAC;aACT;QACF,CAAC;QAES,KAAK,CAAC,EAAE,CAA2B,MAAsB,EAAE,qBAA8C;YAElH,gEAAgE;YAChE,2CAA2C;YAE3C,IAAI,IAAI,CAAC,CAAC,CAAyB,eAAe,EAAE,6BAAqB,EAAE;gBAE1E,0DAA0D;gBAC1D,IAAI;oBACH,MAAM,mBAAmB,GAAG,qBAAqB,CAAC,MAAM,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,YAAY,2CAAmC,CAAC,CAAC,CAAC;oBACtH,MAAM,IAAI,CAAC,EAAE,CAAsB,mBAAmB,0BAAkB,CAAC;iBACzE;gBAAC,OAAO,KAAK,EAAE;oBACf,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,0DAA0D,KAAK,EAAE,CAAC,CAAC,CAAC,sEAAsE;iBAChK;gBAED,gHAAgH;gBAChH,MAAM,8BAA8B,GAAG,IAAI,CAAC,CAAC,CAAkB,qBAAqB,CAAC;gBACrF,IAAI,8BAA8B,CAAC,MAAM,EAAE;oBAC1C,OAAO,IAAI,CAAC,EAAE,CAA2B,8BAA8B,EAAE,MAAM,CAAC,CAAC;iBACjF;gBAED,OAAO,IAAI,CAAC,EAAE,CAAK,CAAC,GAAG,qBAAqB,CAAC,CAAC,CAAC,CAAC,gCAAgC;aAChF;YAED,2BAA2B;YAC3B,OAAO,IAAI,CAAC,EAAE,CAA2B,qBAAqB,EAAE,MAAM,CAAC,CAAC;QACzE,CAAC;QAEO,KAAK,CAAC,EAAE,CAA2B,qBAA8C,EAAE,MAAsB;YAEhH,+DAA+D;YAC/D,IAAI,OAAO,GAAmB,EAAE,CAAC;YACjC,IAAI,WAAW,GAAsB,SAAS,CAAC;YAC/C,MAAM,6BAA6B,GAAG,MAAM,IAAI,CAAC,EAAE,CAAyB,MAAM,EAAE,qBAAqB,CAAC,CAAC;YAC3G,IAAI,6BAA6B,CAAC,MAAM,GAAG,CAAC,EAAE;gBAC7C,IAAI;oBACH,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,EAAE,CAAmB,6BAA6B,CAAC,CAAC;oBACpF,OAAO,GAAG,YAAY,CAAC,OAAO,CAAC;oBAC/B,WAAW,GAAG,YAAY,CAAC,KAAK,CAAC;oBAEjC,IAAI,OAAO,CAAC,MAAM,KAAK,qBAAqB,CAAC,MAAM,EAAE;wBACpD,OAAO,KAAK,CAAC,CAAC,yDAAyD;qBACvE;iBACD;gBAAC,OAAO,KAAK,EAAE;oBACf,WAAW,GAAG,KAAK,CAAC;iBACpB;aACD;YAED,MAAM,8BAA8B,GAAG,qBAAqB,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;YAEnH,iEAAiE;YACjE,IAAI,WAAW,EAAE;gBAChB,IAAI,IAAI,CAAC,EAAE,CAAiB,sBAAsB,EAAE;oBACnD,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,4CAA4C,WAAW,EAAE,CAAC,CAAC;oBAEjF,OAAO,KAAK,CAAC,CAAC,yGAAyG;iBACvH;gBAED,IAAI,CAAC,EAAE,CAAc,IAAA,cAAQ,EAAC,CAA2B,EAAE,IAAwF,CAAC,EAAE,8BAA8B,EAAE,WAAW,CAAC,CAAC;gBAEnM,OAAO,IAAI,CAAC,CAAC,2BAA2B;aACxC;YAED,wDAAwD;YACxD,sDAAsD;YAEtD,IAAI;gBACH,OAAO,MAAM,IAAI,CAAC,EAAE,CAAoB,8BAA8B,CAAC,CAAC;aACxE;YAAC,OAAO,KAAK,EAAE;gBACf,IAAI,IAAI,CAAC,EAAE,CAAiB,sBAAsB,EAAE;oBACnD,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,uEAAuE,KAAK,EAAE,CAAC,CAAC;oBAEtG,OAAO,KAAK,CAAC,CAAC,yGAAyG;iBACvH;gBAED,IAAI,CAAC,EAAE,CAAc,IAAA,cAAQ,EAAC,CAA4B,EAAE,IAA4E,CAAC,EAAE,8BAA8B,EAAE,KAAK,CAAC,CAAC;gBAElL,OAAO,IAAI,CAAC,CAAC,+BAA+B;aAC5C;QACF,CAAC;QAEO,KAAK,CAAC,EAAE,CAAyB,MAAsB,EAAE,qBAA8C;YAC9G,IAAI,CAAC,IAAI,CAAC,CAAC,CAAyB,gBAAgB,EAAE;gBACrD,OAAO,EAAE,CAAC,CAAC,sDAAsD;aACjE;YAED,IAAI,IAAI,CAAC,EAAE,CAAiB,sBAAsB,EAAE;gBACnD,OAAO,qBAAqB,CAAC,CAAC,0FAA0F;aACxH;YAED,QAAQ,MAAM,EAAE;gBAEf,eAAe;gBACf;oBACC,IAAI,IAAI,CAAC,CAAC,CAAc,iBAAiB,EAAE,iCAAyB,IAAI,IAAI,CAAC,CAAC,CAAyB,oBAAoB,KAAK,WAAG,CAAkB,wBAAwB,EAAE;wBAC9K,OAAO,qBAAqB,CAAC,CAAC,8EAA8E;qBAC5G;oBAED,IAAI,aAAE,IAAa,MAAM,IAAI,CAAC,EAAE,CAAgB,cAAc,EAAE,GAAG,CAAC,EAAE;wBACrE,IAAI,IAAI,CAAC,CAAC,CAAc,iBAAiB,EAAE,iCAAyB,EAAE;4BACrE,OAAO,qBAAqB,CAAC,MAAM,CAAC,mBAAmB,CAAC,EAAE,CAAC,mBAAmB,CAAC,YAAY,6CAAqC,CAAC,CAAC,CAAC,8DAA8D;yBACjM;wBAED,OAAO,EAAE,CAAC,CAAC,sFAAsF;qBACjG;oBAED,OAAO,qBAAqB,CAAC,CAAC,uFAAuF;gBAEtH,mBAAmB;gBACnB;oBACC,OAAO,qBAAqB,CAAC,CAAC,mDAAmD;gBAElF,gBAAgB;gBAChB;oBACC,OAAO,qBAAqB,CAAC,CAAC,sDAAsD;gBAErF,mBAAmB;gBACnB;oBACC,IAAI,IAAI,CAAC,CAAC,CAAc,iBAAiB,EAAE,iCAAyB,EAAE;wBACrE,IAAI,IAAI,CAAC,CAAC,CAAyB,oBAAoB,KAAK,WAAG,CAAkB,wBAAwB,EAAE;4BAC1G,OAAO,qBAAqB,CAAC,CAAC,8EAA8E;yBAC5G;wBAED,OAAO,qBAAqB,CAAC,MAAM,CAAC,mBAAmB,CAAC,EAAE,CAAC,mBAAmB,CAAC,YAAY,6CAAqC,CAAC,CAAC,CAAC,8DAA8D;qBACjM;oBAED,OAAO,EAAE,CAAC,CAAC,gFAAgF;aAC5F;QACF,CAAC;QAEO,EAAE,CAAc,GAAW,EAAE,aAAsC,EAAE,KAAa;YACzF,MAAM,qBAAqB,GAAG,aAAa,CAAC,MAAM,CAAC,WAAW,CAAC,EAAE,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC,CAAC;YAE5F,MAAM,MAAM,GAAG,IAAA,cAAQ,EAAC,CAAoB,EAAE,IAAoF,CAAC,CAAC;YACpI,MAAM,MAAM,GAAG,qBAAqB,CAAC,MAAM;gBAC1C,CAAC,CAAC,IAAA,aAAG,EAAiB,qBAAqB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,GAAG,MAAM;gBAC7E,CAAC,CAAC,MAAM,CAAC;YAEV,IAAI,CAAC,CAAC,CAAa,KAAK,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;YAEtC,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,oBAAoB,GAAG,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC,oBAAoB,GAAG,EAAE,CAAC,CAAC;QAChG,CAAC;QAEO,KAAK,CAAC,EAAE,CAAmB,qBAA8C;YAChF,MAAM,OAAO,GAAmB,EAAE,CAAC;YACnC,IAAI,KAAK,GAAsB,SAAS,CAAC;YAEzC,MAAM,IAAI,CAAC,EAAE,CAA0B,KAAK,EAAC,KAAK,EAAC,EAAE;gBAEpD,iFAAiF;gBACjF,IAAI;oBACH,MAAM,gBAAQ,CAAC,OAAO,CAAC,qBAAqB,CAAC,GAAG,CAAC,KAAK,EAAC,WAAW,EAAC,EAAE;wBAEpE,gBAAgB;wBAChB,MAAM,cAAc,GAAG,IAAI,CAAC,CAAC,CAAiB,WAAW,CAAC,CAAC;wBAC3D,IAAI,IAAI,CAAC,CAAC,CAAwB,aAAa,CAAC,WAAW,EAAE,cAAc,CAAC,EAAE;4BAC7E,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;yBAC1B;wBAED,wBAAwB;6BACnB;4BACJ,MAAM,MAAM,GAAG,MAAM,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;4BAC/C,IAAI,KAAK,CAAC,uBAAuB,EAAE;gCAClC,OAAO;6BACP;4BAED,MAAM,IAAI,CAAC,CAAC,CAAwB,MAAM,CAAC,WAAW,EAAE,MAAM,CAAC,OAAO,EAAE,cAAc,EAAE,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;4BAC5G,IAAI,KAAK,CAAC,uBAAuB,EAAE;gCAClC,OAAO;6BACP;4BAED,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;yBAC1B;oBACF,CAAC,CAAC,CAAC,CAAC;iBACJ;gBAAC,OAAO,WAAW,EAAE;oBACrB,KAAK,GAAG,WAAW,CAAC;iBACpB;YACF,CAAC,EACA,IAAA,cAAQ,EAAC,CAA6B,EAAE,IAAmE,CAAC,EAC5G,IAAA,cAAQ,EAAC,CAA4B,EAAE,IAAoF,CAAC,CAC5H,CAAC;YAEF,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;QAC3B,CAAC;QAEO,KAAK,CAAC,EAAE,CAAoB,qBAAqC;YAExE,OAAO;YACP,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,CAAC,CAAiB,eAAe,CAAC,qBAAqB,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;YACzH,IAAI,OAAO,+BAAuB,EAAE;gBACnC,MAAM,uBAAuB,GAAG,IAAI,CAAC,CAAC,CAAkB,aAAa,CAAC;gBAEtE,IAAI;oBACH,MAAM,IAAI,CAAC,EAAE,CAAsB,qBAAqB,8BAAsB,CAAC;iBAC/E;gBAAC,OAAO,KAAK,EAAE;oBACf,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,0DAA0D,KAAK,EAAE,CAAC,CAAC,CAAC,sEAAsE;iBAChK;gBAED,MAAM,kBAAkB,GAAG,uBAAuB,GAAG,IAAI,CAAC,CAAC,CAAkB,aAAa,CAAC;gBAC3F,IAAI,kBAAkB,GAAG,qBAAqB,CAAC,MAAM,EAAE;oBACtD,OAAO,IAAI,CAAC,CAAC,qCAAqC;iBAClD;gBAED,OAAO,IAAI,CAAC,EAAE,CAAK,qBAAqB,CAAC,CAAC,CAAC,2BAA2B;aACtE;YAED,aAAa;iBACR,IAAI,OAAO,oCAA4B,EAAE;gBAC7C,IAAI;oBACH,MAAM,IAAI,CAAC,EAAE,CAAwB,qBAAqB,CAAC,CAAC;iBAC5D;gBAAC,OAAO,KAAK,EAAE;oBACf,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,6DAA6D,KAAK,EAAE,CAAC,CAAC,CAAC,kDAAkD;iBAC/I;gBAED,OAAO,IAAI,CAAC,EAAE,CAAK,qBAAqB,CAAC,CAAC,CAAC,8BAA8B;aACzE;YAED,SAAS;YACT,OAAO,IAAI,CAAC,CAAC,uBAAuB;QACrC,CAAC;QAEO,EAAE,CAAsB,aAA6B,EAAE,MAAkB;YAChF,OAAO,IAAI,CAAC,EAAE,CAA0B,KAAK,IAAI,EAAE;gBAElD,6DAA6D;gBAC7D,MAAM,WAAW,GAAG,EAAE,oBAAoB,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;gBAE3D,kEAAkE;gBAClE,8EAA8E;gBAC9E,IAAI,MAAM,GAAwB,SAAS,CAAC;gBAC5C,IAAI,aAAa,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAkB,aAAa,EAAE;oBACnE,MAAM,GAAG,CAAC,MAAM,IAAI,CAAC,CAAC,CAAa,OAAO,CAAC;wBAC1C,eAAe,EAAE,EAAE,iBAAiB,EAAE,IAAI,EAAE;wBAC5C,GAAG,WAAW;qBACd,CAAC,CAAC,CAAC,OAAO,CAAC;iBACZ;gBAED,gEAAgE;gBAChE,sDAAsD;gBACtD,IAAI,MAAM,KAAK,KAAK,EAAE;oBACrB,MAAM,gBAAQ,CAAC,OAAO,CAAC,aAAa,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBAC3I;YACF,CAAC,EAAE,IAAA,cAAQ,EAAC,CAAoB,EAAE,IAA+D,CAAC,CAAC,CAAC;QACrG,CAAC;QAEO,EAAE,CAAwB,qBAAqC;YACtE,OAAO,IAAI,CAAC,EAAE,CAA0B,KAAK,IAAI,EAAE;gBAElD,yCAAyC;gBACzC,MAAM,aAAa,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;gBAErC,2DAA2D;gBAC3D,IAAI,qBAAqB,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAkB,aAAa,EAAE;oBAC3E,MAAM,IAAI,CAAC,CAAC,CAAa,SAAS,CAAC,aAAa,CAAC,CAAC;iBAClD;gBAED,kEAAkE;gBAClE,MAAM,gBAAQ,CAAC,OAAO,CAAC,qBAAqB,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,WAAW,CAAC,UAAU,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;YACpJ,CAAC,EAAE,IAAA,cAAQ,EAAC,CAAsB,EAAE,IAAkE,CAAC,CAAC,CAAC;QAC1G,CAAC;QAEO,EAAE;YAET,oDAAoD;YACpD,8CAA8C;YAC9C,8CAA8C;YAC9C,uBAAuB;YACvB,EAAE;YACF,mDAAmD;YACnD,mDAAmD;YACnD,mDAAmD;YACnD,oDAAoD;YACpD,kDAAkD;YAClD,qDAAqD;YACrD,EAAE;YACF,qDAAqD;YACrD,kDAAkD;YAClD,mDAAmD;YACnD,sCAAsC;YAEtC,OAAO,IAAI,CAAC,EAAE,CAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,CAAc,iBAAiB,EAAE,iCAAyB,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAiB,EAAE,CAAC,CAAC;QAC5I,CAAC;QAIO,KAAK,CAAC,EAAE,CAAK,IAAqE;YAEzF,0CAA0C;YAC1C,gCAAgC;YAEhC,MAAM,IAAI,CAAC,EAAE,CAA2B,IAAI,CAAC,CAAC;YAE9C,OAAO,KAAK,CAAC,CAAC,wBAAwB;QACvC,CAAC;QAKO,KAAK,CAAC,EAAE,CAA2B,IAAqE;YAE/G,mDAAmD;YACnD,iDAAiD;YACjD,kDAAkD;YAClD,gBAAgB;YAEhB,IAAI,CAAC,IAAI,CAAC,CAAC,EAAQ;gBAClB,OAAO;aACP;YAED,MAAM,IAAI,CAAC,EAAE,CAA0B,KAAK,IAAI,EAAE;gBAEjD,+DAA+D;gBAC/D,0DAA0D;gBAC1D,0DAA0D;gBAC1D,kEAAkE;gBAClE,EAAE;gBACF,yDAAyD;gBACzD,oCAAoC;gBAEpC,IAAI;oBACH,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;wBACxB,MAAM,gBAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAwB,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;qBAC1G;yBAAM;wBACN,MAAM,IAAI,CAAC,CAAC,CAAwB,cAAc,CAAC,IAAI,CAAC,CAAC;qBACzD;iBACD;gBAAC,OAAO,KAAK,EAAE;oBACf,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,8CAA8C,KAAK,EAAE,CAAC,CAAC;iBAC7E;YACF,CAAC,EAAE,IAAA,cAAQ,EAAC,CAA8B,EAAE,IAA8C,CAAC,CAAC,CAAC;QAC9F,CAAC;QAEO,EAAE,CAA0B,cAA2D,EAAE,KAAa,EAAE,MAAe;YAC9H,MAAM,GAAG,GAAG,IAAI,kBAAG,EAAsB,CAAC;YAE1C,OAAO,IAAI,CAAC,EAAE,CAAc,YAAY,CAAC;gBACxC,QAAQ,kCAAyB;gBACjC,WAAW,EAAE,IAAI;gBACjB,KAAK,EAAE,GAAG;gBACV,KAAK;gBACL,MAAM;aACN,EAAE,GAAG,EAAE,CAAC,IAAA,WAAG,EAAc,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,GAAG,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3F,CAAC;KACD,CAAA;IA9YY,oBAAI;mBAAJ,IAAI;QAGd,WAAA,uBAAG,CAAA;QACH,WAAA,+BAAG,CAAA;QACH,WAAA,wBAAG,CAAA;QACH,WAAA,eAAG,CAAA;QACH,WAAA,aAAG,CAAA;QACH,WAAA,aAAG,CAAA;QACH,WAAA,eAAG,CAAA;QACH,WAAA,aAAI,CAAA;QACJ,WAAA,SAAG,CAAA;QACH,WAAA,iBAAG,CAAA;QACH,YAAA,cAAG,CAAA;QACH,YAAA,8BAAG,CAAA;QACH,YAAA,mBAAG,CAAA;QACH,YAAA,yBAAG,CAAA;OAhBO,IAAI,CA8YhB","file":"workingCopyBackupTracker.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { IWorkingCopyBackupService } from 'vs/workbench/services/workingCopy/common/workingCopyBackup';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { IFilesConfigurationService, AutoSaveMode } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\nimport { IWorkingCopyService } from 'vs/workbench/services/workingCopy/common/workingCopyService';\nimport { IWorkingCopy, IWorkingCopyIdentifier, WorkingCopyCapabilities } from 'vs/workbench/services/workingCopy/common/workingCopy';\nimport { ILifecycleService, ShutdownReason } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { ConfirmResult, IFileDialogService, IDialogService, getFileNamesMessage } from 'vs/platform/dialogs/common/dialogs';\nimport { WorkbenchState, IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { isMacintosh } from 'vs/base/common/platform';\nimport { HotExitConfiguration } from 'vs/platform/files/common/files';\nimport { INativeHostService } from 'vs/platform/native/common/native';\nimport { WorkingCopyBackupTracker } from 'vs/workbench/services/workingCopy/common/workingCopyBackupTracker';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { SaveReason } from 'vs/workbench/common/editor';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { IProgressService, ProgressLocation } from 'vs/platform/progress/common/progress';\nimport { Promises, raceCancellation } from 'vs/base/common/async';\nimport { IWorkingCopyEditorService } from 'vs/workbench/services/workingCopy/common/workingCopyEditorService';\nimport { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';\n\nexport class NativeWorkingCopyBackupTracker extends WorkingCopyBackupTracker implements IWorkbenchContribution {\n\n\tconstructor(\n\t\t@IWorkingCopyBackupService workingCopyBackupService: IWorkingCopyBackupService,\n\t\t@IFilesConfigurationService filesConfigurationService: IFilesConfigurationService,\n\t\t@IWorkingCopyService workingCopyService: IWorkingCopyService,\n\t\t@ILifecycleService lifecycleService: ILifecycleService,\n\t\t@IFileDialogService private readonly fileDialogService: IFileDialogService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@INativeHostService private readonly nativeHostService: INativeHostService,\n\t\t@ILogService logService: ILogService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IProgressService private readonly progressService: IProgressService,\n\t\t@IWorkingCopyEditorService workingCopyEditorService: IWorkingCopyEditorService,\n\t\t@IEditorService editorService: IEditorService,\n\t\t@IEditorGroupsService editorGroupService: IEditorGroupsService\n\t) {\n\t\tsuper(workingCopyBackupService, workingCopyService, logService, lifecycleService, filesConfigurationService, workingCopyEditorService, editorService, editorGroupService);\n\t}\n\n\tprotected async onFinalBeforeShutdown(reason: ShutdownReason): Promise<boolean> {\n\n\t\t// Important: we are about to shutdown and handle modified working copies\n\t\t// and backups. We do not want any pending backup ops to interfer with\n\t\t// this because there is a risk of a backup being scheduled after we have\n\t\t// acknowledged to shutdown and then might end up with partial backups\n\t\t// written to disk, or even empty backups or deletes after writes.\n\t\t// (https://github.com/microsoft/vscode/issues/138055)\n\n\t\tthis.cancelBackupOperations();\n\n\t\t// For the duration of the shutdown handling, suspend backup operations\n\t\t// and only resume after we have handled backups. Similar to above, we\n\t\t// do not want to trigger backup tracking during our shutdown handling\n\t\t// but we must resume, in case of a veto afterwards.\n\n\t\tconst { resume } = this.suspendBackupOperations();\n\n\t\ttry {\n\n\t\t\t// Modified working copies need treatment on shutdown\n\t\t\tconst modifiedWorkingCopies = this.workingCopyService.modifiedWorkingCopies;\n\t\t\tif (modifiedWorkingCopies.length) {\n\t\t\t\treturn await this.onBeforeShutdownWithModified(reason, modifiedWorkingCopies);\n\t\t\t}\n\n\t\t\t// No modified working copies\n\t\t\telse {\n\t\t\t\treturn await this.onBeforeShutdownWithoutModified();\n\t\t\t}\n\t\t} finally {\n\t\t\tresume();\n\t\t}\n\t}\n\n\tprotected async onBeforeShutdownWithModified(reason: ShutdownReason, modifiedWorkingCopies: readonly IWorkingCopy[]): Promise<boolean> {\n\n\t\t// If auto save is enabled, save all non-untitled working copies\n\t\t// and then check again for modified copies\n\n\t\tif (this.filesConfigurationService.getAutoSaveMode() !== AutoSaveMode.OFF) {\n\n\t\t\t// Save all modified working copies that can be auto-saved\n\t\t\ttry {\n\t\t\t\tconst workingCopiesToSave = modifiedWorkingCopies.filter(wc => !(wc.capabilities & WorkingCopyCapabilities.Untitled));\n\t\t\t\tawait this.doSaveAllBeforeShutdown(workingCopiesToSave, SaveReason.AUTO);\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(`[backup tracker] error saving modified working copies: ${error}`); // guard against misbehaving saves, we handle remaining modified below\n\t\t\t}\n\n\t\t\t// If we still have modified working copies, we either have untitled ones or working copies that cannot be saved\n\t\t\tconst remainingModifiedWorkingCopies = this.workingCopyService.modifiedWorkingCopies;\n\t\t\tif (remainingModifiedWorkingCopies.length) {\n\t\t\t\treturn this.handleModifiedBeforeShutdown(remainingModifiedWorkingCopies, reason);\n\t\t\t}\n\n\t\t\treturn this.noVeto([...modifiedWorkingCopies]); // no veto (modified auto-saved)\n\t\t}\n\n\t\t// Auto save is not enabled\n\t\treturn this.handleModifiedBeforeShutdown(modifiedWorkingCopies, reason);\n\t}\n\n\tprivate async handleModifiedBeforeShutdown(modifiedWorkingCopies: readonly IWorkingCopy[], reason: ShutdownReason): Promise<boolean> {\n\n\t\t// Trigger backup if configured and enabled for shutdown reason\n\t\tlet backups: IWorkingCopy[] = [];\n\t\tlet backupError: Error | undefined = undefined;\n\t\tconst modifiedWorkingCopiesToBackup = await this.shouldBackupBeforeShutdown(reason, modifiedWorkingCopies);\n\t\tif (modifiedWorkingCopiesToBackup.length > 0) {\n\t\t\ttry {\n\t\t\t\tconst backupResult = await this.backupBeforeShutdown(modifiedWorkingCopiesToBackup);\n\t\t\t\tbackups = backupResult.backups;\n\t\t\t\tbackupError = backupResult.error;\n\n\t\t\t\tif (backups.length === modifiedWorkingCopies.length) {\n\t\t\t\t\treturn false; // no veto (backup was successful for all working copies)\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tbackupError = error;\n\t\t\t}\n\t\t}\n\n\t\tconst remainingModifiedWorkingCopies = modifiedWorkingCopies.filter(workingCopy => !backups.includes(workingCopy));\n\n\t\t// We ran a backup but received an error that we show to the user\n\t\tif (backupError) {\n\t\t\tif (this.environmentService.isExtensionDevelopment) {\n\t\t\t\tthis.logService.error(`[backup tracker] error creating backups: ${backupError}`);\n\n\t\t\t\treturn false; // do not block shutdown during extension development (https://github.com/microsoft/vscode/issues/115028)\n\t\t\t}\n\n\t\t\tthis.showErrorDialog(localize('backupTrackerBackupFailed', \"The following editors with unsaved changes could not be saved to the back up location.\"), remainingModifiedWorkingCopies, backupError);\n\n\t\t\treturn true; // veto (the backup failed)\n\t\t}\n\n\t\t// Since a backup did not happen, we have to confirm for\n\t\t// the working copies that did not successfully backup\n\n\t\ttry {\n\t\t\treturn await this.confirmBeforeShutdown(remainingModifiedWorkingCopies);\n\t\t} catch (error) {\n\t\t\tif (this.environmentService.isExtensionDevelopment) {\n\t\t\t\tthis.logService.error(`[backup tracker] error saving or reverting modified working copies: ${error}`);\n\n\t\t\t\treturn false; // do not block shutdown during extension development (https://github.com/microsoft/vscode/issues/115028)\n\t\t\t}\n\n\t\t\tthis.showErrorDialog(localize('backupTrackerConfirmFailed', \"The following editors with unsaved changes could not be saved or reverted.\"), remainingModifiedWorkingCopies, error);\n\n\t\t\treturn true; // veto (save or revert failed)\n\t\t}\n\t}\n\n\tprivate async shouldBackupBeforeShutdown(reason: ShutdownReason, modifiedWorkingCopies: readonly IWorkingCopy[]): Promise<readonly IWorkingCopy[]> {\n\t\tif (!this.filesConfigurationService.isHotExitEnabled) {\n\t\t\treturn []; // never backup when hot exit is disabled via settings\n\t\t}\n\n\t\tif (this.environmentService.isExtensionDevelopment) {\n\t\t\treturn modifiedWorkingCopies; // always backup closing extension development window without asking to speed up debugging\n\t\t}\n\n\t\tswitch (reason) {\n\n\t\t\t// Window Close\n\t\t\tcase ShutdownReason.CLOSE:\n\t\t\t\tif (this.contextService.getWorkbenchState() !== WorkbenchState.EMPTY && this.filesConfigurationService.hotExitConfiguration === HotExitConfiguration.ON_EXIT_AND_WINDOW_CLOSE) {\n\t\t\t\t\treturn modifiedWorkingCopies; // backup if a workspace/folder is open and onExitAndWindowClose is configured\n\t\t\t\t}\n\n\t\t\t\tif (isMacintosh || await this.nativeHostService.getWindowCount() > 1) {\n\t\t\t\t\tif (this.contextService.getWorkbenchState() !== WorkbenchState.EMPTY) {\n\t\t\t\t\t\treturn modifiedWorkingCopies.filter(modifiedWorkingCopy => modifiedWorkingCopy.capabilities & WorkingCopyCapabilities.Scratchpad); // backup scratchpads automatically to avoid user confirmation\n\t\t\t\t\t}\n\n\t\t\t\t\treturn []; // do not backup if a window is closed that does not cause quitting of the application\n\t\t\t\t}\n\n\t\t\t\treturn modifiedWorkingCopies; // backup if last window is closed on win/linux where the application quits right after\n\n\t\t\t// Application Quit\n\t\t\tcase ShutdownReason.QUIT:\n\t\t\t\treturn modifiedWorkingCopies; // backup because next start we restore all backups\n\n\t\t\t// Window Reload\n\t\t\tcase ShutdownReason.RELOAD:\n\t\t\t\treturn modifiedWorkingCopies; // backup because after window reload, backups restore\n\n\t\t\t// Workspace Change\n\t\t\tcase ShutdownReason.LOAD:\n\t\t\t\tif (this.contextService.getWorkbenchState() !== WorkbenchState.EMPTY) {\n\t\t\t\t\tif (this.filesConfigurationService.hotExitConfiguration === HotExitConfiguration.ON_EXIT_AND_WINDOW_CLOSE) {\n\t\t\t\t\t\treturn modifiedWorkingCopies; // backup if a workspace/folder is open and onExitAndWindowClose is configured\n\t\t\t\t\t}\n\n\t\t\t\t\treturn modifiedWorkingCopies.filter(modifiedWorkingCopy => modifiedWorkingCopy.capabilities & WorkingCopyCapabilities.Scratchpad); // backup scratchpads automatically to avoid user confirmation\n\t\t\t\t}\n\n\t\t\t\treturn []; // do not backup because we are switching contexts with no workspace/folder open\n\t\t}\n\t}\n\n\tprivate showErrorDialog(msg: string, workingCopies: readonly IWorkingCopy[], error?: Error): void {\n\t\tconst modifiedWorkingCopies = workingCopies.filter(workingCopy => workingCopy.isModified());\n\n\t\tconst advice = localize('backupErrorDetails', \"Try saving or reverting the editors with unsaved changes first and then try again.\");\n\t\tconst detail = modifiedWorkingCopies.length\n\t\t\t? getFileNamesMessage(modifiedWorkingCopies.map(x => x.name)) + '\\n' + advice\n\t\t\t: advice;\n\n\t\tthis.dialogService.error(msg, detail);\n\n\t\tthis.logService.error(error ? `[backup tracker] ${msg}: ${error}` : `[backup tracker] ${msg}`);\n\t}\n\n\tprivate async backupBeforeShutdown(modifiedWorkingCopies: readonly IWorkingCopy[]): Promise<{ backups: IWorkingCopy[]; error?: Error }> {\n\t\tconst backups: IWorkingCopy[] = [];\n\t\tlet error: Error | undefined = undefined;\n\n\t\tawait this.withProgressAndCancellation(async token => {\n\n\t\t\t// Perform a backup of all modified working copies unless a backup already exists\n\t\t\ttry {\n\t\t\t\tawait Promises.settled(modifiedWorkingCopies.map(async workingCopy => {\n\n\t\t\t\t\t// Backup exists\n\t\t\t\t\tconst contentVersion = this.getContentVersion(workingCopy);\n\t\t\t\t\tif (this.workingCopyBackupService.hasBackupSync(workingCopy, contentVersion)) {\n\t\t\t\t\t\tbackups.push(workingCopy);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Backup does not exist\n\t\t\t\t\telse {\n\t\t\t\t\t\tconst backup = await workingCopy.backup(token);\n\t\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tawait this.workingCopyBackupService.backup(workingCopy, backup.content, contentVersion, backup.meta, token);\n\t\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbackups.push(workingCopy);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t} catch (backupError) {\n\t\t\t\terror = backupError;\n\t\t\t}\n\t\t},\n\t\t\tlocalize('backupBeforeShutdownMessage', \"Backing up editors with unsaved changes is taking a bit longer...\"),\n\t\t\tlocalize('backupBeforeShutdownDetail', \"Click 'Cancel' to stop waiting and to save or revert editors with unsaved changes.\")\n\t\t);\n\n\t\treturn { backups, error };\n\t}\n\n\tprivate async confirmBeforeShutdown(modifiedWorkingCopies: IWorkingCopy[]): Promise<boolean> {\n\n\t\t// Save\n\t\tconst confirm = await this.fileDialogService.showSaveConfirm(modifiedWorkingCopies.map(workingCopy => workingCopy.name));\n\t\tif (confirm === ConfirmResult.SAVE) {\n\t\t\tconst modifiedCountBeforeSave = this.workingCopyService.modifiedCount;\n\n\t\t\ttry {\n\t\t\t\tawait this.doSaveAllBeforeShutdown(modifiedWorkingCopies, SaveReason.EXPLICIT);\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(`[backup tracker] error saving modified working copies: ${error}`); // guard against misbehaving saves, we handle remaining modified below\n\t\t\t}\n\n\t\t\tconst savedWorkingCopies = modifiedCountBeforeSave - this.workingCopyService.modifiedCount;\n\t\t\tif (savedWorkingCopies < modifiedWorkingCopies.length) {\n\t\t\t\treturn true; // veto (save failed or was canceled)\n\t\t\t}\n\n\t\t\treturn this.noVeto(modifiedWorkingCopies); // no veto (modified saved)\n\t\t}\n\n\t\t// Don't Save\n\t\telse if (confirm === ConfirmResult.DONT_SAVE) {\n\t\t\ttry {\n\t\t\t\tawait this.doRevertAllBeforeShutdown(modifiedWorkingCopies);\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(`[backup tracker] error reverting modified working copies: ${error}`); // do not block the shutdown on errors from revert\n\t\t\t}\n\n\t\t\treturn this.noVeto(modifiedWorkingCopies); // no veto (modified reverted)\n\t\t}\n\n\t\t// Cancel\n\t\treturn true; // veto (user canceled)\n\t}\n\n\tprivate doSaveAllBeforeShutdown(workingCopies: IWorkingCopy[], reason: SaveReason): Promise<void> {\n\t\treturn this.withProgressAndCancellation(async () => {\n\n\t\t\t// Skip save participants on shutdown for performance reasons\n\t\t\tconst saveOptions = { skipSaveParticipants: true, reason };\n\n\t\t\t// First save through the editor service if we save all to benefit\n\t\t\t// from some extras like switching to untitled modified editors before saving.\n\t\t\tlet result: boolean | undefined = undefined;\n\t\t\tif (workingCopies.length === this.workingCopyService.modifiedCount) {\n\t\t\t\tresult = (await this.editorService.saveAll({\n\t\t\t\t\tincludeUntitled: { includeScratchpad: true },\n\t\t\t\t\t...saveOptions\n\t\t\t\t})).success;\n\t\t\t}\n\n\t\t\t// If we still have modified working copies, save those directly\n\t\t\t// unless the save was not successful (e.g. cancelled)\n\t\t\tif (result !== false) {\n\t\t\t\tawait Promises.settled(workingCopies.map(workingCopy => workingCopy.isModified() ? workingCopy.save(saveOptions) : Promise.resolve(true)));\n\t\t\t}\n\t\t}, localize('saveBeforeShutdown', \"Saving editors with unsaved changes is taking a bit longer...\"));\n\t}\n\n\tprivate doRevertAllBeforeShutdown(modifiedWorkingCopies: IWorkingCopy[]): Promise<void> {\n\t\treturn this.withProgressAndCancellation(async () => {\n\n\t\t\t// Soft revert is good enough on shutdown\n\t\t\tconst revertOptions = { soft: true };\n\n\t\t\t// First revert through the editor service if we revert all\n\t\t\tif (modifiedWorkingCopies.length === this.workingCopyService.modifiedCount) {\n\t\t\t\tawait this.editorService.revertAll(revertOptions);\n\t\t\t}\n\n\t\t\t// If we still have modified working copies, revert those directly\n\t\t\tawait Promises.settled(modifiedWorkingCopies.map(workingCopy => workingCopy.isModified() ? workingCopy.revert(revertOptions) : Promise.resolve()));\n\t\t}, localize('revertBeforeShutdown', \"Reverting editors with unsaved changes is taking a bit longer...\"));\n\t}\n\n\tprivate onBeforeShutdownWithoutModified(): Promise<boolean> {\n\n\t\t// We are about to shutdown without modified editors\n\t\t// and will discard any backups that are still\n\t\t// around that have not been handled depending\n\t\t// on the window state.\n\t\t//\n\t\t// Empty window: discard even unrestored backups to\n\t\t// prevent empty windows from restoring that cannot\n\t\t// be closed (workaround for not having implemented\n\t\t// https://github.com/microsoft/vscode/issues/127163\n\t\t// and a fix for what users have reported in issue\n\t\t// https://github.com/microsoft/vscode/issues/126725)\n\t\t//\n\t\t// Workspace/Folder window: do not discard unrestored\n\t\t// backups to give a chance to restore them in the\n\t\t// future. Since we do not restore workspace/folder\n\t\t// windows with backups, this is fine.\n\n\t\treturn this.noVeto({ except: this.contextService.getWorkbenchState() === WorkbenchState.EMPTY ? [] : Array.from(this.unrestoredBackups) });\n\t}\n\n\tprivate noVeto(backupsToDiscard: IWorkingCopyIdentifier[]): Promise<boolean>;\n\tprivate noVeto(backupsToKeep: { except: IWorkingCopyIdentifier[] }): Promise<boolean>;\n\tprivate async noVeto(arg1: IWorkingCopyIdentifier[] | { except: IWorkingCopyIdentifier[] }): Promise<boolean> {\n\n\t\t// Discard backups from working copies the\n\t\t// user either saved or reverted\n\n\t\tawait this.discardBackupsBeforeShutdown(arg1);\n\n\t\treturn false; // no veto (no modified)\n\t}\n\n\tprivate discardBackupsBeforeShutdown(backupsToDiscard: IWorkingCopyIdentifier[]): Promise<void>;\n\tprivate discardBackupsBeforeShutdown(backupsToKeep: { except: IWorkingCopyIdentifier[] }): Promise<void>;\n\tprivate discardBackupsBeforeShutdown(backupsToDiscardOrKeep: IWorkingCopyIdentifier[] | { except: IWorkingCopyIdentifier[] }): Promise<void>;\n\tprivate async discardBackupsBeforeShutdown(arg1: IWorkingCopyIdentifier[] | { except: IWorkingCopyIdentifier[] }): Promise<void> {\n\n\t\t// We never discard any backups before we are ready\n\t\t// and have resolved all backups that exist. This\n\t\t// is important to not loose backups that have not\n\t\t// been handled.\n\n\t\tif (!this.isReady) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.withProgressAndCancellation(async () => {\n\n\t\t\t// When we shutdown either with no modified working copies left\n\t\t\t// or with some handled, we start to discard these backups\n\t\t\t// to free them up. This helps to get rid of stale backups\n\t\t\t// as reported in https://github.com/microsoft/vscode/issues/92962\n\t\t\t//\n\t\t\t// However, we never want to discard backups that we know\n\t\t\t// were not restored in the session.\n\n\t\t\ttry {\n\t\t\t\tif (Array.isArray(arg1)) {\n\t\t\t\t\tawait Promises.settled(arg1.map(workingCopy => this.workingCopyBackupService.discardBackup(workingCopy)));\n\t\t\t\t} else {\n\t\t\t\t\tawait this.workingCopyBackupService.discardBackups(arg1);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(`[backup tracker] error discarding backups: ${error}`);\n\t\t\t}\n\t\t}, localize('discardBackupsBeforeShutdown', \"Discarding backups is taking a bit longer...\"));\n\t}\n\n\tprivate withProgressAndCancellation(promiseFactory: (token: CancellationToken) => Promise<void>, title: string, detail?: string): Promise<void> {\n\t\tconst cts = new CancellationTokenSource();\n\n\t\treturn this.progressService.withProgress({\n\t\t\tlocation: ProgressLocation.Dialog, \t// use a dialog to prevent the user from making any more changes now (https://github.com/microsoft/vscode/issues/122774)\n\t\t\tcancellable: true, \t\t\t\t\t// allow to cancel (https://github.com/microsoft/vscode/issues/112278)\n\t\t\tdelay: 800, \t\t\t\t\t\t// delay so that it only appears when operation takes a long time\n\t\t\ttitle,\n\t\t\tdetail\n\t\t}, () => raceCancellation(promiseFactory(cts.token), cts.token), () => cts.dispose(true));\n\t}\n}\n"]}