{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/workingCopy/test/electron-sandbox/workingCopyBackupService.test.ts"],"names":[],"mappings":"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","file":"workingCopyBackupService.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { isWindows } from 'vs/base/common/platform';\nimport { insert } from 'vs/base/common/arrays';\nimport { hash } from 'vs/base/common/hash';\nimport { isEqual, joinPath, dirname } from 'vs/base/common/resources';\nimport { join } from 'vs/base/common/path';\nimport { URI } from 'vs/base/common/uri';\nimport { WorkingCopyBackupsModel, hashIdentifier } from 'vs/workbench/services/workingCopy/common/workingCopyBackupService';\nimport { createTextModel } from 'vs/editor/test/common/testTextModel';\nimport { Schemas } from 'vs/base/common/network';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { LogLevel, NullLogService } from 'vs/platform/log/common/log';\nimport { NativeWorkbenchEnvironmentService } from 'vs/workbench/services/environment/electron-sandbox/environmentService';\nimport { toBufferOrReadable } from 'vs/workbench/services/textfile/common/textfiles';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { NativeWorkingCopyBackupService } from 'vs/workbench/services/workingCopy/electron-sandbox/workingCopyBackupService';\nimport { FileUserDataProvider } from 'vs/platform/userData/common/fileUserDataProvider';\nimport { bufferToReadable, bufferToStream, streamToBuffer, VSBuffer, VSBufferReadable, VSBufferReadableStream } from 'vs/base/common/buffer';\nimport { TestLifecycleService, toTypedWorkingCopyId, toUntypedWorkingCopyId } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { IWorkingCopyBackupMeta, IWorkingCopyIdentifier } from 'vs/workbench/services/workingCopy/common/workingCopy';\nimport { consumeStream } from 'vs/base/common/stream';\nimport { TestProductService } from 'vs/workbench/test/common/workbenchTestServices';\nimport { InMemoryFileSystemProvider } from 'vs/platform/files/common/inMemoryFilesystemProvider';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { INativeWindowConfiguration } from 'vs/platform/window/common/window';\nimport product from 'vs/platform/product/common/product';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { UserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { UriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentityService';\n\nconst homeDir = URI.file('home').with({ scheme: Schemas.inMemory });\nconst tmpDir = URI.file('tmp').with({ scheme: Schemas.inMemory });\nconst NULL_PROFILE = {\n\tname: '',\n\tid: '',\n\tshortName: '',\n\tisDefault: false,\n\tlocation: homeDir,\n\tsettingsResource: joinPath(homeDir, 'settings.json'),\n\tglobalStorageHome: joinPath(homeDir, 'globalStorage'),\n\tkeybindingsResource: joinPath(homeDir, 'keybindings.json'),\n\ttasksResource: joinPath(homeDir, 'tasks.json'),\n\tsnippetsHome: joinPath(homeDir, 'snippets'),\n\textensionsResource: joinPath(homeDir, 'extensions.json'),\n\tcacheHome: joinPath(homeDir, 'cache')\n};\n\nconst TestNativeWindowConfiguration: INativeWindowConfiguration = {\n\twindowId: 0,\n\tmachineId: 'testMachineId',\n\tlogLevel: LogLevel.Error,\n\tloggers: { global: [], window: [] },\n\tmainPid: 0,\n\tappRoot: '',\n\tuserEnv: {},\n\texecPath: process.execPath,\n\tperfMarks: [],\n\tcolorScheme: { dark: true, highContrast: false },\n\tos: { release: 'unknown', hostname: 'unknown', arch: 'unknown' },\n\tproduct,\n\thomeDir: homeDir.fsPath,\n\ttmpDir: tmpDir.fsPath,\n\tuserDataDir: joinPath(homeDir, product.nameShort).fsPath,\n\tprofiles: { profile: NULL_PROFILE, all: [NULL_PROFILE], home: homeDir },\n\t_: []\n};\n\nexport class TestNativeWorkbenchEnvironmentService extends NativeWorkbenchEnvironmentService {\n\n\tconstructor(testDir: URI, backupPath: URI) {\n\t\tsuper({ ...TestNativeWindowConfiguration, backupPath: backupPath.fsPath, 'user-data-dir': testDir.fsPath }, TestProductService);\n\t}\n}\n\nexport class NodeTestWorkingCopyBackupService extends NativeWorkingCopyBackupService {\n\n\tprivate backupResourceJoiners: Function[];\n\tprivate discardBackupJoiners: Function[];\n\tdiscardedBackups: IWorkingCopyIdentifier[];\n\tdiscardedAllBackups: boolean;\n\tprivate pendingBackupsArr: Promise<void>[];\n\n\treadonly _fileService: IFileService;\n\n\tconstructor(testDir: URI, workspaceBackupPath: URI) {\n\t\tconst environmentService = new TestNativeWorkbenchEnvironmentService(testDir, workspaceBackupPath);\n\t\tconst logService = new NullLogService();\n\t\tconst fileService = new FileService(logService);\n\t\tconst lifecycleService = new TestLifecycleService();\n\t\tsuper(environmentService, fileService, logService, lifecycleService);\n\n\t\tconst fsp = new InMemoryFileSystemProvider();\n\t\tfileService.registerProvider(Schemas.inMemory, fsp);\n\t\tconst uriIdentityService = new UriIdentityService(fileService);\n\t\tconst userDataProfilesService = new UserDataProfilesService(environmentService, fileService, uriIdentityService, logService);\n\t\tfileService.registerProvider(Schemas.vscodeUserData, new FileUserDataProvider(Schemas.file, fsp, Schemas.vscodeUserData, userDataProfilesService, uriIdentityService, logService));\n\n\t\tthis._fileService = fileService;\n\n\t\tthis.backupResourceJoiners = [];\n\t\tthis.discardBackupJoiners = [];\n\t\tthis.discardedBackups = [];\n\t\tthis.pendingBackupsArr = [];\n\t\tthis.discardedAllBackups = false;\n\t}\n\n\ttestGetFileService(): IFileService {\n\t\treturn this.fileService;\n\t}\n\n\tasync waitForAllBackups(): Promise<void> {\n\t\tawait Promise.all(this.pendingBackupsArr);\n\t}\n\n\tjoinBackupResource(): Promise<void> {\n\t\treturn new Promise(resolve => this.backupResourceJoiners.push(resolve));\n\t}\n\n\toverride async backup(identifier: IWorkingCopyIdentifier, content?: VSBufferReadableStream | VSBufferReadable, versionId?: number, meta?: any, token?: CancellationToken): Promise<void> {\n\t\tconst p = super.backup(identifier, content, versionId, meta, token);\n\t\tconst removeFromPendingBackups = insert(this.pendingBackupsArr, p.then(undefined, undefined));\n\n\t\ttry {\n\t\t\tawait p;\n\t\t} finally {\n\t\t\tremoveFromPendingBackups();\n\t\t}\n\n\t\twhile (this.backupResourceJoiners.length) {\n\t\t\tthis.backupResourceJoiners.pop()!();\n\t\t}\n\t}\n\n\tjoinDiscardBackup(): Promise<void> {\n\t\treturn new Promise(resolve => this.discardBackupJoiners.push(resolve));\n\t}\n\n\toverride async discardBackup(identifier: IWorkingCopyIdentifier): Promise<void> {\n\t\tawait super.discardBackup(identifier);\n\t\tthis.discardedBackups.push(identifier);\n\n\t\twhile (this.discardBackupJoiners.length) {\n\t\t\tthis.discardBackupJoiners.pop()!();\n\t\t}\n\t}\n\n\toverride async discardBackups(filter?: { except: IWorkingCopyIdentifier[] }): Promise<void> {\n\t\tthis.discardedAllBackups = true;\n\n\t\treturn super.discardBackups(filter);\n\t}\n\n\tasync getBackupContents(identifier: IWorkingCopyIdentifier): Promise<string> {\n\t\tconst backupResource = this.toBackupResource(identifier);\n\n\t\tconst fileContents = await this.fileService.readFile(backupResource);\n\n\t\treturn fileContents.value.toString();\n\t}\n}\n\nsuite('WorkingCopyBackupService', () => {\n\n\tlet testDir: URI;\n\tlet backupHome: URI;\n\tlet workspacesJsonPath: URI;\n\tlet workspaceBackupPath: URI;\n\n\tlet service: NodeTestWorkingCopyBackupService;\n\tlet fileService: IFileService;\n\n\tconst disposables = new DisposableStore();\n\n\tconst workspaceResource = URI.file(isWindows ? 'c:\\\\workspace' : '/workspace');\n\tconst fooFile = URI.file(isWindows ? 'c:\\\\Foo' : '/Foo');\n\tconst customFile = URI.parse('customScheme://some/path');\n\tconst customFileWithFragment = URI.parse('customScheme2://some/path#fragment');\n\tconst barFile = URI.file(isWindows ? 'c:\\\\Bar' : '/Bar');\n\tconst fooBarFile = URI.file(isWindows ? 'c:\\\\Foo Bar' : '/Foo Bar');\n\tconst untitledFile = URI.from({ scheme: Schemas.untitled, path: 'Untitled-1' });\n\n\tsetup(async () => {\n\t\ttestDir = URI.file(join(generateUuid(), 'vsctests', 'workingcopybackupservice')).with({ scheme: Schemas.inMemory });\n\t\tbackupHome = joinPath(testDir, 'Backups');\n\t\tworkspacesJsonPath = joinPath(backupHome, 'workspaces.json');\n\t\tworkspaceBackupPath = joinPath(backupHome, hash(workspaceResource.fsPath).toString(16));\n\n\t\tservice = disposables.add(new NodeTestWorkingCopyBackupService(testDir, workspaceBackupPath));\n\t\tfileService = service._fileService;\n\n\t\tawait fileService.createFolder(backupHome);\n\n\t\treturn fileService.writeFile(workspacesJsonPath, VSBuffer.fromString(''));\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\tsuite('hashIdentifier', () => {\n\t\ttest('should correctly hash the identifier for untitled scheme URIs', () => {\n\t\t\tconst uri = URI.from({ scheme: Schemas.untitled, path: 'Untitled-1' });\n\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t\t// If these hashes change people will lose their backed up files\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t\tconst untypedBackupHash = hashIdentifier(toUntypedWorkingCopyId(uri));\n\t\t\tassert.strictEqual(untypedBackupHash, '-7f9c1a2e');\n\t\t\tassert.strictEqual(untypedBackupHash, hash(uri.fsPath).toString(16));\n\n\t\t\tconst typedBackupHash = hashIdentifier({ typeId: 'hashTest', resource: uri });\n\t\t\tif (isWindows) {\n\t\t\t\tassert.strictEqual(typedBackupHash, '-17c47cdc');\n\t\t\t} else {\n\t\t\t\tassert.strictEqual(typedBackupHash, '-8ad5f4f');\n\t\t\t}\n\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t\t// If these hashes collide people will lose their backed up files\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t\tassert.notStrictEqual(untypedBackupHash, typedBackupHash);\n\t\t});\n\n\t\ttest('should correctly hash the identifier for file scheme URIs', () => {\n\t\t\tconst uri = URI.file('/foo');\n\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t\t// If these hashes change people will lose their backed up files\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t\tconst untypedBackupHash = hashIdentifier(toUntypedWorkingCopyId(uri));\n\t\t\tif (isWindows) {\n\t\t\t\tassert.strictEqual(untypedBackupHash, '20ffaa13');\n\t\t\t} else {\n\t\t\t\tassert.strictEqual(untypedBackupHash, '20eb3560');\n\t\t\t}\n\t\t\tassert.strictEqual(untypedBackupHash, hash(uri.fsPath).toString(16));\n\n\t\t\tconst typedBackupHash = hashIdentifier({ typeId: 'hashTest', resource: uri });\n\t\t\tif (isWindows) {\n\t\t\t\tassert.strictEqual(typedBackupHash, '-55fc55db');\n\t\t\t} else {\n\t\t\t\tassert.strictEqual(typedBackupHash, '51e56bf');\n\t\t\t}\n\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t\t// If these hashes collide people will lose their backed up files\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t\tassert.notStrictEqual(untypedBackupHash, typedBackupHash);\n\t\t});\n\n\t\ttest('should correctly hash the identifier for custom scheme URIs', () => {\n\t\t\tconst uri = URI.from({\n\t\t\t\tscheme: 'vscode-custom',\n\t\t\t\tpath: 'somePath'\n\t\t\t});\n\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t\t// If these hashes change people will lose their backed up files\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t\tconst untypedBackupHash = hashIdentifier(toUntypedWorkingCopyId(uri));\n\t\t\tassert.strictEqual(untypedBackupHash, '-44972d98');\n\t\t\tassert.strictEqual(untypedBackupHash, hash(uri.toString()).toString(16));\n\n\t\t\tconst typedBackupHash = hashIdentifier({ typeId: 'hashTest', resource: uri });\n\t\t\tassert.strictEqual(typedBackupHash, '502149c7');\n\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t\t// If these hashes collide people will lose their backed up files\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t\tassert.notStrictEqual(untypedBackupHash, typedBackupHash);\n\t\t});\n\n\t\ttest('should not fail for URIs without path', () => {\n\t\t\tconst uri = URI.from({\n\t\t\t\tscheme: 'vscode-fragment',\n\t\t\t\tfragment: 'frag'\n\t\t\t});\n\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t\t// If these hashes change people will lose their backed up files\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t\tconst untypedBackupHash = hashIdentifier(toUntypedWorkingCopyId(uri));\n\t\t\tassert.strictEqual(untypedBackupHash, '-2f6b2f1b');\n\t\t\tassert.strictEqual(untypedBackupHash, hash(uri.toString()).toString(16));\n\n\t\t\tconst typedBackupHash = hashIdentifier({ typeId: 'hashTest', resource: uri });\n\t\t\tassert.strictEqual(typedBackupHash, '6e82ca57');\n\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t\t\t// If these hashes collide people will lose their backed up files\n\t\t\t// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n\t\t\tassert.notStrictEqual(untypedBackupHash, typedBackupHash);\n\t\t});\n\t});\n\n\tsuite('getBackupResource', () => {\n\t\ttest('should get the correct backup path for text files', () => {\n\n\t\t\t// Format should be: <backupHome>/<workspaceHash>/<scheme>/<filePathHash>\n\t\t\tconst backupResource = fooFile;\n\t\t\tconst workspaceHash = hash(workspaceResource.fsPath).toString(16);\n\n\t\t\t// No Type ID\n\t\t\tlet backupId = toUntypedWorkingCopyId(backupResource);\n\t\t\tlet filePathHash = hashIdentifier(backupId);\n\t\t\tlet expectedPath = joinPath(backupHome, workspaceHash, Schemas.file, filePathHash).with({ scheme: Schemas.vscodeUserData }).toString();\n\t\t\tassert.strictEqual(service.toBackupResource(backupId).toString(), expectedPath);\n\n\t\t\t// With Type ID\n\t\t\tbackupId = toTypedWorkingCopyId(backupResource);\n\t\t\tfilePathHash = hashIdentifier(backupId);\n\t\t\texpectedPath = joinPath(backupHome, workspaceHash, Schemas.file, filePathHash).with({ scheme: Schemas.vscodeUserData }).toString();\n\t\t\tassert.strictEqual(service.toBackupResource(backupId).toString(), expectedPath);\n\t\t});\n\n\t\ttest('should get the correct backup path for untitled files', () => {\n\n\t\t\t// Format should be: <backupHome>/<workspaceHash>/<scheme>/<filePathHash>\n\t\t\tconst backupResource = URI.from({ scheme: Schemas.untitled, path: 'Untitled-1' });\n\t\t\tconst workspaceHash = hash(workspaceResource.fsPath).toString(16);\n\n\t\t\t// No Type ID\n\t\t\tlet backupId = toUntypedWorkingCopyId(backupResource);\n\t\t\tlet filePathHash = hashIdentifier(backupId);\n\t\t\tlet expectedPath = joinPath(backupHome, workspaceHash, Schemas.untitled, filePathHash).with({ scheme: Schemas.vscodeUserData }).toString();\n\t\t\tassert.strictEqual(service.toBackupResource(backupId).toString(), expectedPath);\n\n\t\t\t// With Type ID\n\t\t\tbackupId = toTypedWorkingCopyId(backupResource);\n\t\t\tfilePathHash = hashIdentifier(backupId);\n\t\t\texpectedPath = joinPath(backupHome, workspaceHash, Schemas.untitled, filePathHash).with({ scheme: Schemas.vscodeUserData }).toString();\n\t\t\tassert.strictEqual(service.toBackupResource(backupId).toString(), expectedPath);\n\t\t});\n\n\t\ttest('should get the correct backup path for custom files', () => {\n\n\t\t\t// Format should be: <backupHome>/<workspaceHash>/<scheme>/<filePathHash>\n\t\t\tconst backupResource = URI.from({ scheme: 'custom', path: 'custom/file.txt' });\n\t\t\tconst workspaceHash = hash(workspaceResource.fsPath).toString(16);\n\n\t\t\t// No Type ID\n\t\t\tlet backupId = toUntypedWorkingCopyId(backupResource);\n\t\t\tlet filePathHash = hashIdentifier(backupId);\n\t\t\tlet expectedPath = joinPath(backupHome, workspaceHash, 'custom', filePathHash).with({ scheme: Schemas.vscodeUserData }).toString();\n\t\t\tassert.strictEqual(service.toBackupResource(backupId).toString(), expectedPath);\n\n\t\t\t// With Type ID\n\t\t\tbackupId = toTypedWorkingCopyId(backupResource);\n\t\t\tfilePathHash = hashIdentifier(backupId);\n\t\t\texpectedPath = joinPath(backupHome, workspaceHash, 'custom', filePathHash).with({ scheme: Schemas.vscodeUserData }).toString();\n\t\t\tassert.strictEqual(service.toBackupResource(backupId).toString(), expectedPath);\n\t\t});\n\t});\n\n\tsuite('backup', () => {\n\n\t\tfunction toExpectedPreamble(identifier: IWorkingCopyIdentifier, content = '', meta?: object): string {\n\t\t\treturn `${identifier.resource.toString()} ${JSON.stringify({ ...meta, typeId: identifier.typeId })}\\n${content}`;\n\t\t}\n\n\t\ttest('joining', async () => {\n\t\t\tlet backupJoined = false;\n\t\t\tconst joinBackupsPromise = service.joinBackups();\n\t\t\tjoinBackupsPromise.then(() => backupJoined = true);\n\t\t\tawait joinBackupsPromise;\n\t\t\tassert.strictEqual(backupJoined, true);\n\n\t\t\tbackupJoined = false;\n\t\t\tservice.joinBackups().then(() => backupJoined = true);\n\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tconst backupPromise = service.backup(identifier);\n\t\t\tassert.strictEqual(backupJoined, false);\n\t\t\tawait backupPromise;\n\t\t\tassert.strictEqual(backupJoined, true);\n\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.readFile(backupPath)).value.toString(), toExpectedPreamble(identifier));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('no text', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tawait service.backup(identifier);\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.readFile(backupPath)).value.toString(), toExpectedPreamble(identifier));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('text file', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.readFile(backupPath)).value.toString(), toExpectedPreamble(identifier, 'test'));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('text file (with version)', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString('test')), 666);\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.readFile(backupPath)).value.toString(), toExpectedPreamble(identifier, 'test'));\n\t\t\tassert.ok(!service.hasBackupSync(identifier, 555));\n\t\t\tassert.ok(service.hasBackupSync(identifier, 666));\n\t\t});\n\n\t\ttest('text file (with meta)', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\t\t\tconst meta = { etag: '678', orphaned: true };\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString('test')), undefined, meta);\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.readFile(backupPath)).value.toString(), toExpectedPreamble(identifier, 'test', meta));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('text file with whitespace in name and type (with meta)', async () => {\n\t\t\tconst fileWithSpace = URI.file(isWindows ? 'c:\\\\Foo \\n Bar' : '/Foo \\n Bar');\n\t\t\tconst identifier = toTypedWorkingCopyId(fileWithSpace, ' test id \\n');\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\t\t\tconst meta = { etag: '678 \\n k', orphaned: true };\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString('test')), undefined, meta);\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.readFile(backupPath)).value.toString(), toExpectedPreamble(identifier, 'test', meta));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('text file with unicode character in name and type (with meta)', async () => {\n\t\t\tconst fileWithUnicode = URI.file(isWindows ? 'c:\\\\so𒀅meࠄ' : '/so𒀅meࠄ');\n\t\t\tconst identifier = toTypedWorkingCopyId(fileWithUnicode, ' test so𒀅meࠄ id \\n');\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\t\t\tconst meta = { etag: '678so𒀅meࠄ', orphaned: true };\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString('test')), undefined, meta);\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.readFile(backupPath)).value.toString(), toExpectedPreamble(identifier, 'test', meta));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('untitled file', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(untitledFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'untitled'))).children?.length, 1);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.readFile(backupPath)).value.toString(), toExpectedPreamble(identifier, 'test'));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('text file (readable)', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\t\t\tconst model = createTextModel('test');\n\n\t\t\tawait service.backup(identifier, toBufferOrReadable(model.createSnapshot()));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.readFile(backupPath)).value.toString(), toExpectedPreamble(identifier, 'test'));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\n\t\t\tmodel.dispose();\n\t\t});\n\n\t\ttest('untitled file (readable)', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(untitledFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\t\t\tconst model = createTextModel('test');\n\n\t\t\tawait service.backup(identifier, toBufferOrReadable(model.createSnapshot()));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'untitled'))).children?.length, 1);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.readFile(backupPath)).value.toString(), toExpectedPreamble(identifier, 'test'));\n\n\t\t\tmodel.dispose();\n\t\t});\n\n\t\ttest('text file (large file, stream)', () => {\n\t\t\tconst largeString = (new Array(30 * 1024)).join('Large String\\n');\n\n\t\t\treturn testLargeTextFile(largeString, bufferToStream(VSBuffer.fromString(largeString)));\n\t\t});\n\n\t\ttest('text file (large file, readable)', async () => {\n\t\t\tconst largeString = (new Array(30 * 1024)).join('Large String\\n');\n\t\t\tconst model = createTextModel(largeString);\n\n\t\t\tawait testLargeTextFile(largeString, toBufferOrReadable(model.createSnapshot()));\n\n\t\t\tmodel.dispose();\n\t\t});\n\n\t\tasync function testLargeTextFile(largeString: string, buffer: VSBufferReadable | VSBufferReadableStream) {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tawait service.backup(identifier, buffer, undefined, { largeTest: true });\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.readFile(backupPath)).value.toString(), toExpectedPreamble(identifier, largeString, { largeTest: true }));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\t\t}\n\n\t\ttest('untitled file (large file, readable)', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(untitledFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\t\t\tconst largeString = (new Array(30 * 1024)).join('Large String\\n');\n\t\t\tconst model = createTextModel(largeString);\n\n\t\t\tawait service.backup(identifier, toBufferOrReadable(model.createSnapshot()));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'untitled'))).children?.length, 1);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.readFile(backupPath)).value.toString(), toExpectedPreamble(identifier, largeString));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\n\t\t\tmodel.dispose();\n\t\t});\n\n\t\ttest('cancellation', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tconst cts = new CancellationTokenSource();\n\t\t\tconst promise = service.backup(identifier, undefined, undefined, undefined, cts.token);\n\t\t\tcts.cancel();\n\t\t\tawait promise;\n\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), false);\n\t\t\tassert.ok(!service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('multiple', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tawait Promise.all([\n\t\t\t\tservice.backup(identifier),\n\t\t\t\tservice.backup(identifier),\n\t\t\t\tservice.backup(identifier),\n\t\t\t\tservice.backup(identifier)\n\t\t\t]);\n\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.readFile(backupPath)).value.toString(), toExpectedPreamble(identifier));\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('multiple same resource, different type id', async () => {\n\t\t\tconst backupId1 = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupId2 = toTypedWorkingCopyId(fooFile, 'type1');\n\t\t\tconst backupId3 = toTypedWorkingCopyId(fooFile, 'type2');\n\n\t\t\tawait Promise.all([\n\t\t\t\tservice.backup(backupId1),\n\t\t\t\tservice.backup(backupId2),\n\t\t\t\tservice.backup(backupId3)\n\t\t\t]);\n\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 3);\n\n\t\t\tfor (const backupId of [backupId1, backupId2, backupId3]) {\n\t\t\t\tconst fooBackupPath = joinPath(workspaceBackupPath, backupId.resource.scheme, hashIdentifier(backupId));\n\t\t\t\tassert.strictEqual((await fileService.exists(fooBackupPath)), true);\n\t\t\t\tassert.strictEqual((await fileService.readFile(fooBackupPath)).value.toString(), toExpectedPreamble(backupId));\n\t\t\t\tassert.ok(service.hasBackupSync(backupId));\n\t\t\t}\n\t\t});\n\t});\n\n\tsuite('discardBackup', () => {\n\n\t\ttest('joining', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\n\t\t\tlet backupJoined = false;\n\t\t\tservice.joinBackups().then(() => backupJoined = true);\n\n\t\t\tconst discardBackupPromise = service.discardBackup(identifier);\n\t\t\tassert.strictEqual(backupJoined, false);\n\t\t\tawait discardBackupPromise;\n\t\t\tassert.strictEqual(backupJoined, true);\n\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), false);\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 0);\n\t\t\tassert.ok(!service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('text file', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\t\t\tassert.ok(service.hasBackupSync(identifier));\n\n\t\t\tawait service.discardBackup(identifier);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), false);\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 0);\n\t\t\tassert.ok(!service.hasBackupSync(identifier));\n\t\t});\n\n\t\ttest('untitled file', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(untitledFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'untitled'))).children?.length, 1);\n\n\t\t\tawait service.discardBackup(identifier);\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), false);\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'untitled'))).children?.length, 0);\n\t\t});\n\n\t\ttest('multiple same resource, different type id', async () => {\n\t\t\tconst backupId1 = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupId2 = toTypedWorkingCopyId(fooFile, 'type1');\n\t\t\tconst backupId3 = toTypedWorkingCopyId(fooFile, 'type2');\n\n\t\t\tawait Promise.all([\n\t\t\t\tservice.backup(backupId1),\n\t\t\t\tservice.backup(backupId2),\n\t\t\t\tservice.backup(backupId3)\n\t\t\t]);\n\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 3);\n\n\t\t\tfor (const backupId of [backupId1, backupId2, backupId3]) {\n\t\t\t\tconst backupPath = joinPath(workspaceBackupPath, backupId.resource.scheme, hashIdentifier(backupId));\n\t\t\t\tawait service.discardBackup(backupId);\n\t\t\t\tassert.strictEqual((await fileService.exists(backupPath)), false);\n\t\t\t}\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 0);\n\t\t});\n\t});\n\n\tsuite('discardBackups (all)', () => {\n\t\ttest('text file', async () => {\n\t\t\tconst backupId1 = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupId2 = toUntypedWorkingCopyId(barFile);\n\t\t\tconst backupId3 = toTypedWorkingCopyId(barFile);\n\n\t\t\tawait service.backup(backupId1, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\n\t\t\tawait service.backup(backupId2, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 2);\n\n\t\t\tawait service.backup(backupId3, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 3);\n\n\t\t\tawait service.discardBackups();\n\t\t\tfor (const backupId of [backupId1, backupId2, backupId3]) {\n\t\t\t\tconst backupPath = joinPath(workspaceBackupPath, backupId.resource.scheme, hashIdentifier(backupId));\n\t\t\t\tassert.strictEqual((await fileService.exists(backupPath)), false);\n\t\t\t}\n\n\t\t\tassert.strictEqual((await fileService.exists(joinPath(workspaceBackupPath, 'file'))), false);\n\t\t});\n\n\t\ttest('untitled file', async () => {\n\t\t\tconst backupId = toUntypedWorkingCopyId(untitledFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, backupId.resource.scheme, hashIdentifier(backupId));\n\n\t\t\tawait service.backup(backupId, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'untitled'))).children?.length, 1);\n\n\t\t\tawait service.discardBackups();\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), false);\n\t\t\tassert.strictEqual((await fileService.exists(joinPath(workspaceBackupPath, 'untitled'))), false);\n\t\t});\n\n\t\ttest('can backup after discarding all', async () => {\n\t\t\tawait service.discardBackups();\n\t\t\tawait service.backup(toUntypedWorkingCopyId(untitledFile), bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.exists(workspaceBackupPath)), true);\n\t\t});\n\t});\n\n\tsuite('discardBackups (except some)', () => {\n\t\ttest('text file', async () => {\n\t\t\tconst backupId1 = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst backupId2 = toUntypedWorkingCopyId(barFile);\n\t\t\tconst backupId3 = toTypedWorkingCopyId(barFile);\n\n\t\t\tawait service.backup(backupId1, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 1);\n\n\t\t\tawait service.backup(backupId2, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 2);\n\n\t\t\tawait service.backup(backupId3, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'file'))).children?.length, 3);\n\n\t\t\tawait service.discardBackups({ except: [backupId2, backupId3] });\n\n\t\t\tlet backupPath = joinPath(workspaceBackupPath, backupId1.resource.scheme, hashIdentifier(backupId1));\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), false);\n\n\t\t\tbackupPath = joinPath(workspaceBackupPath, backupId2.resource.scheme, hashIdentifier(backupId2));\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\n\t\t\tbackupPath = joinPath(workspaceBackupPath, backupId3.resource.scheme, hashIdentifier(backupId3));\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\n\t\t\tawait service.discardBackups({ except: [backupId1] });\n\n\t\t\tfor (const backupId of [backupId1, backupId2, backupId3]) {\n\t\t\t\tconst backupPath = joinPath(workspaceBackupPath, backupId.resource.scheme, hashIdentifier(backupId));\n\t\t\t\tassert.strictEqual((await fileService.exists(backupPath)), false);\n\t\t\t}\n\t\t});\n\n\t\ttest('untitled file', async () => {\n\t\t\tconst backupId = toUntypedWorkingCopyId(untitledFile);\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, backupId.resource.scheme, hashIdentifier(backupId));\n\n\t\t\tawait service.backup(backupId, bufferToReadable(VSBuffer.fromString('test')));\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t\tassert.strictEqual((await fileService.resolve(joinPath(workspaceBackupPath, 'untitled'))).children?.length, 1);\n\n\t\t\tawait service.discardBackups({ except: [backupId] });\n\t\t\tassert.strictEqual((await fileService.exists(backupPath)), true);\n\t\t});\n\t});\n\n\tsuite('getBackups', () => {\n\t\ttest('text file', async () => {\n\t\t\tawait Promise.all([\n\t\t\t\tservice.backup(toUntypedWorkingCopyId(fooFile), bufferToReadable(VSBuffer.fromString('test'))),\n\t\t\t\tservice.backup(toTypedWorkingCopyId(fooFile, 'type1'), bufferToReadable(VSBuffer.fromString('test'))),\n\t\t\t\tservice.backup(toTypedWorkingCopyId(fooFile, 'type2'), bufferToReadable(VSBuffer.fromString('test')))\n\t\t\t]);\n\n\t\t\tlet backups = await service.getBackups();\n\t\t\tassert.strictEqual(backups.length, 3);\n\n\t\t\tfor (const backup of backups) {\n\t\t\t\tif (backup.typeId === '') {\n\t\t\t\t\tassert.strictEqual(backup.resource.toString(), fooFile.toString());\n\t\t\t\t} else if (backup.typeId === 'type1') {\n\t\t\t\t\tassert.strictEqual(backup.resource.toString(), fooFile.toString());\n\t\t\t\t} else if (backup.typeId === 'type2') {\n\t\t\t\t\tassert.strictEqual(backup.resource.toString(), fooFile.toString());\n\t\t\t\t} else {\n\t\t\t\t\tassert.fail('Unexpected backup');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tawait service.backup(toUntypedWorkingCopyId(barFile), bufferToReadable(VSBuffer.fromString('test')));\n\n\t\t\tbackups = await service.getBackups();\n\t\t\tassert.strictEqual(backups.length, 4);\n\t\t});\n\n\t\ttest('untitled file', async () => {\n\t\t\tawait Promise.all([\n\t\t\t\tservice.backup(toUntypedWorkingCopyId(untitledFile), bufferToReadable(VSBuffer.fromString('test'))),\n\t\t\t\tservice.backup(toTypedWorkingCopyId(untitledFile, 'type1'), bufferToReadable(VSBuffer.fromString('test'))),\n\t\t\t\tservice.backup(toTypedWorkingCopyId(untitledFile, 'type2'), bufferToReadable(VSBuffer.fromString('test')))\n\t\t\t]);\n\n\t\t\tconst backups = await service.getBackups();\n\t\t\tassert.strictEqual(backups.length, 3);\n\n\t\t\tfor (const backup of backups) {\n\t\t\t\tif (backup.typeId === '') {\n\t\t\t\t\tassert.strictEqual(backup.resource.toString(), untitledFile.toString());\n\t\t\t\t} else if (backup.typeId === 'type1') {\n\t\t\t\t\tassert.strictEqual(backup.resource.toString(), untitledFile.toString());\n\t\t\t\t} else if (backup.typeId === 'type2') {\n\t\t\t\t\tassert.strictEqual(backup.resource.toString(), untitledFile.toString());\n\t\t\t\t} else {\n\t\t\t\t\tassert.fail('Unexpected backup');\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\n\tsuite('resolve', () => {\n\n\t\tinterface IBackupTestMetaData extends IWorkingCopyBackupMeta {\n\t\t\tmtime?: number;\n\t\t\tsize?: number;\n\t\t\tetag?: string;\n\t\t\torphaned?: boolean;\n\t\t}\n\n\t\ttest('should restore the original contents (untitled file)', async () => {\n\t\t\tconst contents = 'test\\nand more stuff';\n\n\t\t\tawait testResolveBackup(untitledFile, contents);\n\t\t});\n\n\t\ttest('should restore the original contents (untitled file with metadata)', async () => {\n\t\t\tconst contents = 'test\\nand more stuff';\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'the Etag',\n\t\t\t\tsize: 666,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: true\n\t\t\t};\n\n\t\t\tawait testResolveBackup(untitledFile, contents, meta);\n\t\t});\n\n\t\ttest('should restore the original contents (untitled file empty with metadata)', async () => {\n\t\t\tconst contents = '';\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'the Etag',\n\t\t\t\tsize: 666,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: true\n\t\t\t};\n\n\t\t\tawait testResolveBackup(untitledFile, contents, meta);\n\t\t});\n\n\t\ttest('should restore the original contents (untitled large file with metadata)', async () => {\n\t\t\tconst contents = (new Array(30 * 1024)).join('Large String\\n');\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'the Etag',\n\t\t\t\tsize: 666,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: true\n\t\t\t};\n\n\t\t\tawait testResolveBackup(untitledFile, contents, meta);\n\t\t});\n\n\t\ttest('should restore the original contents (text file)', async () => {\n\t\t\tconst contents = [\n\t\t\t\t'Lorem ipsum ',\n\t\t\t\t'dolor öäü sit amet ',\n\t\t\t\t'consectetur ',\n\t\t\t\t'adipiscing ßß elit'\n\t\t\t].join('');\n\n\t\t\tawait testResolveBackup(fooFile, contents);\n\t\t});\n\n\t\ttest('should restore the original contents (text file - custom scheme)', async () => {\n\t\t\tconst contents = [\n\t\t\t\t'Lorem ipsum ',\n\t\t\t\t'dolor öäü sit amet ',\n\t\t\t\t'consectetur ',\n\t\t\t\t'adipiscing ßß elit'\n\t\t\t].join('');\n\n\t\t\tawait testResolveBackup(customFile, contents);\n\t\t});\n\n\t\ttest('should restore the original contents (text file with metadata)', async () => {\n\t\t\tconst contents = [\n\t\t\t\t'Lorem ipsum ',\n\t\t\t\t'dolor öäü sit amet ',\n\t\t\t\t'adipiscing ßß elit',\n\t\t\t\t'consectetur '\n\t\t\t].join('');\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'theEtag',\n\t\t\t\tsize: 888,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: false\n\t\t\t};\n\n\t\t\tawait testResolveBackup(fooFile, contents, meta);\n\t\t});\n\n\t\ttest('should restore the original contents (empty text file with metadata)', async () => {\n\t\t\tconst contents = '';\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'theEtag',\n\t\t\t\tsize: 888,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: false\n\t\t\t};\n\n\t\t\tawait testResolveBackup(fooFile, contents, meta);\n\t\t});\n\n\t\ttest('should restore the original contents (large text file with metadata)', async () => {\n\t\t\tconst contents = (new Array(30 * 1024)).join('Large String\\n');\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'theEtag',\n\t\t\t\tsize: 888,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: false\n\t\t\t};\n\n\t\t\tawait testResolveBackup(fooFile, contents, meta);\n\t\t});\n\n\t\ttest('should restore the original contents (text file with metadata changed once)', async () => {\n\t\t\tconst contents = [\n\t\t\t\t'Lorem ipsum ',\n\t\t\t\t'dolor öäü sit amet ',\n\t\t\t\t'adipiscing ßß elit',\n\t\t\t\t'consectetur '\n\t\t\t].join('');\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'theEtag',\n\t\t\t\tsize: 888,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: false\n\t\t\t};\n\n\t\t\tawait testResolveBackup(fooFile, contents, meta);\n\n\t\t\t// Change meta and test again\n\t\t\tmeta.size = 999;\n\t\t\tawait testResolveBackup(fooFile, contents, meta);\n\t\t});\n\n\t\ttest('should restore the original contents (text file with metadata and fragment URI)', async () => {\n\t\t\tconst contents = [\n\t\t\t\t'Lorem ipsum ',\n\t\t\t\t'dolor öäü sit amet ',\n\t\t\t\t'adipiscing ßß elit',\n\t\t\t\t'consectetur '\n\t\t\t].join('');\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'theEtag',\n\t\t\t\tsize: 888,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: false\n\t\t\t};\n\n\t\t\tawait testResolveBackup(customFileWithFragment, contents, meta);\n\t\t});\n\n\t\ttest('should restore the original contents (text file with space in name with metadata)', async () => {\n\t\t\tconst contents = [\n\t\t\t\t'Lorem ipsum ',\n\t\t\t\t'dolor öäü sit amet ',\n\t\t\t\t'adipiscing ßß elit',\n\t\t\t\t'consectetur '\n\t\t\t].join('');\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'theEtag',\n\t\t\t\tsize: 888,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: false\n\t\t\t};\n\n\t\t\tawait testResolveBackup(fooBarFile, contents, meta);\n\t\t});\n\n\t\ttest('should restore the original contents (text file with too large metadata to persist)', async () => {\n\t\t\tconst contents = [\n\t\t\t\t'Lorem ipsum ',\n\t\t\t\t'dolor öäü sit amet ',\n\t\t\t\t'adipiscing ßß elit',\n\t\t\t\t'consectetur '\n\t\t\t].join('');\n\n\t\t\tconst meta = {\n\t\t\t\tetag: (new Array(100 * 1024)).join('Large String'),\n\t\t\t\tsize: 888,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: false\n\t\t\t};\n\n\t\t\tawait testResolveBackup(fooFile, contents, meta, true);\n\t\t});\n\n\t\tasync function testResolveBackup(resource: URI, contents: string, meta?: IBackupTestMetaData, expectNoMeta?: boolean) {\n\t\t\tawait doTestResolveBackup(toUntypedWorkingCopyId(resource), contents, meta, expectNoMeta);\n\t\t\tawait doTestResolveBackup(toTypedWorkingCopyId(resource), contents, meta, expectNoMeta);\n\t\t}\n\n\t\tasync function doTestResolveBackup(identifier: IWorkingCopyIdentifier, contents: string, meta?: IBackupTestMetaData, expectNoMeta?: boolean) {\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString(contents)), 1, meta);\n\n\t\t\tconst backup = await service.resolve<IBackupTestMetaData>(identifier);\n\t\t\tassert.ok(backup);\n\t\t\tassert.strictEqual(contents, (await streamToBuffer(backup.value)).toString());\n\n\t\t\tif (expectNoMeta || !meta) {\n\t\t\t\tassert.strictEqual(backup.meta, undefined);\n\t\t\t} else {\n\t\t\t\tassert.ok(backup.meta);\n\t\t\t\tassert.strictEqual(backup.meta.etag, meta.etag);\n\t\t\t\tassert.strictEqual(backup.meta.size, meta.size);\n\t\t\t\tassert.strictEqual(backup.meta.mtime, meta.mtime);\n\t\t\t\tassert.strictEqual(backup.meta.orphaned, meta.orphaned);\n\n\t\t\t\tassert.strictEqual(Object.keys(meta).length, Object.keys(backup.meta).length);\n\t\t\t}\n\t\t}\n\n\t\ttest('should restore the original contents (text file with broken metadata)', async () => {\n\t\t\tawait testShouldRestoreOriginalContentsWithBrokenBackup(toUntypedWorkingCopyId(fooFile));\n\t\t\tawait testShouldRestoreOriginalContentsWithBrokenBackup(toTypedWorkingCopyId(fooFile));\n\t\t});\n\n\t\tasync function testShouldRestoreOriginalContentsWithBrokenBackup(identifier: IWorkingCopyIdentifier): Promise<void> {\n\t\t\tconst contents = [\n\t\t\t\t'Lorem ipsum ',\n\t\t\t\t'dolor öäü sit amet ',\n\t\t\t\t'adipiscing ßß elit',\n\t\t\t\t'consectetur '\n\t\t\t].join('');\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'theEtag',\n\t\t\t\tsize: 888,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: false\n\t\t\t};\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString(contents)), 1, meta);\n\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\tconst fileContents = (await fileService.readFile(backupPath)).value.toString();\n\t\t\tassert.strictEqual(fileContents.indexOf(identifier.resource.toString()), 0);\n\n\t\t\tconst metaIndex = fileContents.indexOf('{');\n\t\t\tconst newFileContents = fileContents.substring(0, metaIndex) + '{{' + fileContents.substr(metaIndex);\n\t\t\tawait fileService.writeFile(backupPath, VSBuffer.fromString(newFileContents));\n\n\t\t\tconst backup = await service.resolve(identifier);\n\t\t\tassert.ok(backup);\n\t\t\tassert.strictEqual(contents, (await streamToBuffer(backup.value)).toString());\n\t\t\tassert.strictEqual(backup.meta, undefined);\n\t\t}\n\n\t\ttest('should update metadata from file into model when resolving', async () => {\n\t\t\tawait testShouldUpdateMetaFromFileWhenResolving(toUntypedWorkingCopyId(fooFile));\n\t\t\tawait testShouldUpdateMetaFromFileWhenResolving(toTypedWorkingCopyId(fooFile));\n\t\t});\n\n\t\tasync function testShouldUpdateMetaFromFileWhenResolving(identifier: IWorkingCopyIdentifier): Promise<void> {\n\t\t\tconst contents = 'Foo Bar';\n\n\t\t\tconst meta = {\n\t\t\t\tetag: 'theEtagForThisMetadataTest',\n\t\t\t\tsize: 888,\n\t\t\t\tmtime: Date.now(),\n\t\t\t\torphaned: false\n\t\t\t};\n\n\t\t\tconst updatedMeta = {\n\t\t\t\t...meta,\n\t\t\t\tetag: meta.etag + meta.etag\n\t\t\t};\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.fromString(contents)), 1, meta);\n\n\t\t\tconst backupPath = joinPath(workspaceBackupPath, identifier.resource.scheme, hashIdentifier(identifier));\n\n\t\t\t// Simulate the condition of the backups model loading initially without\n\t\t\t// meta data information and then getting the meta data updated on the\n\t\t\t// first call to resolve the backup. We simulate this by explicitly changing\n\t\t\t// the meta data in the file and then verifying that the updated meta data\n\t\t\t// is persisted back into the model (verified via `hasBackupSync`).\n\t\t\t// This is not really something that would happen in real life because any\n\t\t\t// backup that is made via backup service will update the model accordingly.\n\n\t\t\tconst originalFileContents = (await fileService.readFile(backupPath)).value.toString();\n\t\t\tawait fileService.writeFile(backupPath, VSBuffer.fromString(originalFileContents.replace(meta.etag, updatedMeta.etag)));\n\n\t\t\tawait service.resolve(identifier);\n\n\t\t\tassert.strictEqual(service.hasBackupSync(identifier, undefined, meta), false);\n\t\t\tassert.strictEqual(service.hasBackupSync(identifier, undefined, updatedMeta), true);\n\n\t\t\tawait fileService.writeFile(backupPath, VSBuffer.fromString(originalFileContents));\n\n\t\t\tawait service.getBackups();\n\n\t\t\tassert.strictEqual(service.hasBackupSync(identifier, undefined, meta), true);\n\t\t\tassert.strictEqual(service.hasBackupSync(identifier, undefined, updatedMeta), false);\n\t\t}\n\n\t\ttest('should ignore invalid backups (empty file)', async () => {\n\t\t\tconst contents = 'test\\nand more stuff';\n\n\t\t\tawait service.backup(toUntypedWorkingCopyId(fooFile), bufferToReadable(VSBuffer.fromString(contents)), 1);\n\n\t\t\tlet backup = await service.resolve(toUntypedWorkingCopyId(fooFile));\n\t\t\tassert.ok(backup);\n\n\t\t\tawait service.testGetFileService().writeFile(service.toBackupResource(toUntypedWorkingCopyId(fooFile)), VSBuffer.fromString(''));\n\n\t\t\tbackup = await service.resolve<IBackupTestMetaData>(toUntypedWorkingCopyId(fooFile));\n\t\t\tassert.ok(!backup);\n\t\t});\n\n\t\ttest('should ignore invalid backups (no preamble)', async () => {\n\t\t\tconst contents = 'testand more stuff';\n\n\t\t\tawait service.backup(toUntypedWorkingCopyId(fooFile), bufferToReadable(VSBuffer.fromString(contents)), 1);\n\n\t\t\tlet backup = await service.resolve(toUntypedWorkingCopyId(fooFile));\n\t\t\tassert.ok(backup);\n\n\t\t\tawait service.testGetFileService().writeFile(service.toBackupResource(toUntypedWorkingCopyId(fooFile)), VSBuffer.fromString(contents));\n\n\t\t\tbackup = await service.resolve<IBackupTestMetaData>(toUntypedWorkingCopyId(fooFile));\n\t\t\tassert.ok(!backup);\n\t\t});\n\n\t\ttest('file with binary data', async () => {\n\t\t\tconst identifier = toUntypedWorkingCopyId(fooFile);\n\n\t\t\tconst buffer = Uint8Array.from([\n\t\t\t\t137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 73, 0, 0, 0, 67, 8, 2, 0, 0, 0, 95, 138, 191, 237, 0, 0, 0, 1, 115, 82, 71, 66, 0, 174, 206, 28, 233, 0, 0, 0, 4, 103, 65, 77, 65, 0, 0, 177, 143, 11, 252, 97, 5, 0, 0, 0, 9, 112, 72, 89, 115, 0, 0, 14, 195, 0, 0, 14, 195, 1, 199, 111, 168, 100, 0, 0, 0, 71, 116, 69, 88, 116, 83, 111, 117, 114, 99, 101, 0, 83, 104, 111, 116, 116, 121, 32, 118, 50, 46, 48, 46, 50, 46, 50, 49, 54, 32, 40, 67, 41, 32, 84, 104, 111, 109, 97, 115, 32, 66, 97, 117, 109, 97, 110, 110, 32, 45, 32, 104, 116, 116, 112, 58, 47, 47, 115, 104, 111, 116, 116, 121, 46, 100, 101, 118, 115, 45, 111, 110, 46, 110, 101, 116, 44, 132, 21, 213, 0, 0, 0, 84, 73, 68, 65, 84, 120, 218, 237, 207, 65, 17, 0, 0, 12, 2, 32, 211, 217, 63, 146, 37, 246, 218, 65, 3, 210, 191, 226, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 118, 100, 169, 4, 173, 8, 44, 248, 184, 40, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130\n\t\t\t]);\n\n\t\t\tawait service.backup(identifier, bufferToReadable(VSBuffer.wrap(buffer)), undefined, { binaryTest: 'true' });\n\n\t\t\tconst backup = await service.resolve(toUntypedWorkingCopyId(fooFile));\n\t\t\tassert.ok(backup);\n\n\t\t\tconst backupBuffer = await consumeStream(backup.value, chunks => VSBuffer.concat(chunks));\n\t\t\tassert.strictEqual(backupBuffer.buffer.byteLength, buffer.byteLength);\n\t\t});\n\t});\n\n\tsuite('WorkingCopyBackupsModel', () => {\n\n\t\ttest('simple', async () => {\n\t\t\tconst model = await WorkingCopyBackupsModel.create(workspaceBackupPath, service.testGetFileService());\n\n\t\t\tconst resource1 = URI.file('test.html');\n\n\t\t\tassert.strictEqual(model.has(resource1), false);\n\n\t\t\tmodel.add(resource1);\n\n\t\t\tassert.strictEqual(model.has(resource1), true);\n\t\t\tassert.strictEqual(model.has(resource1, 0), true);\n\t\t\tassert.strictEqual(model.has(resource1, 1), false);\n\t\t\tassert.strictEqual(model.has(resource1, 1, { foo: 'bar' }), false);\n\n\t\t\tmodel.remove(resource1);\n\n\t\t\tassert.strictEqual(model.has(resource1), false);\n\n\t\t\tmodel.add(resource1);\n\n\t\t\tassert.strictEqual(model.has(resource1), true);\n\t\t\tassert.strictEqual(model.has(resource1, 0), true);\n\t\t\tassert.strictEqual(model.has(resource1, 1), false);\n\n\t\t\tmodel.clear();\n\n\t\t\tassert.strictEqual(model.has(resource1), false);\n\n\t\t\tmodel.add(resource1, 1);\n\n\t\t\tassert.strictEqual(model.has(resource1), true);\n\t\t\tassert.strictEqual(model.has(resource1, 0), false);\n\t\t\tassert.strictEqual(model.has(resource1, 1), true);\n\n\t\t\tconst resource2 = URI.file('test1.html');\n\t\t\tconst resource3 = URI.file('test2.html');\n\t\t\tconst resource4 = URI.file('test3.html');\n\n\t\t\tmodel.add(resource2);\n\t\t\tmodel.add(resource3);\n\t\t\tmodel.add(resource4, undefined, { foo: 'bar' });\n\n\t\t\tassert.strictEqual(model.has(resource1), true);\n\t\t\tassert.strictEqual(model.has(resource2), true);\n\t\t\tassert.strictEqual(model.has(resource3), true);\n\n\t\t\tassert.strictEqual(model.has(resource4), true);\n\t\t\tassert.strictEqual(model.has(resource4, undefined, { foo: 'bar' }), true);\n\t\t\tassert.strictEqual(model.has(resource4, undefined, { bar: 'foo' }), false);\n\n\t\t\tmodel.update(resource4, { foo: 'nothing' });\n\t\t\tassert.strictEqual(model.has(resource4, undefined, { foo: 'nothing' }), true);\n\t\t\tassert.strictEqual(model.has(resource4, undefined, { foo: 'bar' }), false);\n\n\t\t\tmodel.update(resource4);\n\t\t\tassert.strictEqual(model.has(resource4), true);\n\t\t\tassert.strictEqual(model.has(resource4, undefined, { foo: 'nothing' }), false);\n\t\t});\n\n\t\ttest('create', async () => {\n\t\t\tconst fooBackupPath = joinPath(workspaceBackupPath, fooFile.scheme, hashIdentifier(toUntypedWorkingCopyId(fooFile)));\n\t\t\tawait fileService.createFolder(dirname(fooBackupPath));\n\t\t\tawait fileService.writeFile(fooBackupPath, VSBuffer.fromString('foo'));\n\t\t\tconst model = await WorkingCopyBackupsModel.create(workspaceBackupPath, service.testGetFileService());\n\n\t\t\tassert.strictEqual(model.has(fooBackupPath), true);\n\t\t});\n\n\t\ttest('get', async () => {\n\t\t\tconst model = await WorkingCopyBackupsModel.create(workspaceBackupPath, service.testGetFileService());\n\n\t\t\tassert.deepStrictEqual(model.get(), []);\n\n\t\t\tconst file1 = URI.file('/root/file/foo.html');\n\t\t\tconst file2 = URI.file('/root/file/bar.html');\n\t\t\tconst untitled = URI.file('/root/untitled/bar.html');\n\n\t\t\tmodel.add(file1);\n\t\t\tmodel.add(file2);\n\t\t\tmodel.add(untitled);\n\n\t\t\tassert.deepStrictEqual(model.get().map(f => f.fsPath), [file1.fsPath, file2.fsPath, untitled.fsPath]);\n\t\t});\n\t});\n\n\tsuite('typeId migration', () => {\n\n\t\ttest('works (when meta is missing)', async () => {\n\t\t\tconst fooBackupId = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst untitledBackupId = toUntypedWorkingCopyId(untitledFile);\n\t\t\tconst customBackupId = toUntypedWorkingCopyId(customFile);\n\n\t\t\tconst fooBackupPath = joinPath(workspaceBackupPath, fooFile.scheme, hashIdentifier(fooBackupId));\n\t\t\tconst untitledBackupPath = joinPath(workspaceBackupPath, untitledFile.scheme, hashIdentifier(untitledBackupId));\n\t\t\tconst customFileBackupPath = joinPath(workspaceBackupPath, customFile.scheme, hashIdentifier(customBackupId));\n\n\t\t\t// Prepare backups of the old format without meta\n\t\t\tawait fileService.createFolder(joinPath(workspaceBackupPath, fooFile.scheme));\n\t\t\tawait fileService.createFolder(joinPath(workspaceBackupPath, untitledFile.scheme));\n\t\t\tawait fileService.createFolder(joinPath(workspaceBackupPath, customFile.scheme));\n\t\t\tawait fileService.writeFile(fooBackupPath, VSBuffer.fromString(`${fooFile.toString()}\\ntest file`));\n\t\t\tawait fileService.writeFile(untitledBackupPath, VSBuffer.fromString(`${untitledFile.toString()}\\ntest untitled`));\n\t\t\tawait fileService.writeFile(customFileBackupPath, VSBuffer.fromString(`${customFile.toString()}\\ntest custom`));\n\n\t\t\tservice.reinitialize(workspaceBackupPath);\n\n\t\t\tconst backups = await service.getBackups();\n\t\t\tassert.strictEqual(backups.length, 3);\n\t\t\tassert.ok(backups.some(backup => isEqual(backup.resource, fooFile)));\n\t\t\tassert.ok(backups.some(backup => isEqual(backup.resource, untitledFile)));\n\t\t\tassert.ok(backups.some(backup => isEqual(backup.resource, customFile)));\n\t\t\tassert.ok(backups.every(backup => backup.typeId === ''));\n\t\t});\n\n\t\ttest('works (when typeId in meta is missing)', async () => {\n\t\t\tconst fooBackupId = toUntypedWorkingCopyId(fooFile);\n\t\t\tconst untitledBackupId = toUntypedWorkingCopyId(untitledFile);\n\t\t\tconst customBackupId = toUntypedWorkingCopyId(customFile);\n\n\t\t\tconst fooBackupPath = joinPath(workspaceBackupPath, fooFile.scheme, hashIdentifier(fooBackupId));\n\t\t\tconst untitledBackupPath = joinPath(workspaceBackupPath, untitledFile.scheme, hashIdentifier(untitledBackupId));\n\t\t\tconst customFileBackupPath = joinPath(workspaceBackupPath, customFile.scheme, hashIdentifier(customBackupId));\n\n\t\t\t// Prepare backups of the old format without meta\n\t\t\tawait fileService.createFolder(joinPath(workspaceBackupPath, fooFile.scheme));\n\t\t\tawait fileService.createFolder(joinPath(workspaceBackupPath, untitledFile.scheme));\n\t\t\tawait fileService.createFolder(joinPath(workspaceBackupPath, customFile.scheme));\n\t\t\tawait fileService.writeFile(fooBackupPath, VSBuffer.fromString(`${fooFile.toString()} ${JSON.stringify({ foo: 'bar' })}\\ntest file`));\n\t\t\tawait fileService.writeFile(untitledBackupPath, VSBuffer.fromString(`${untitledFile.toString()} ${JSON.stringify({ foo: 'bar' })}\\ntest untitled`));\n\t\t\tawait fileService.writeFile(customFileBackupPath, VSBuffer.fromString(`${customFile.toString()} ${JSON.stringify({ foo: 'bar' })}\\ntest custom`));\n\n\t\t\tservice.reinitialize(workspaceBackupPath);\n\n\t\t\tconst backups = await service.getBackups();\n\t\t\tassert.strictEqual(backups.length, 3);\n\t\t\tassert.ok(backups.some(backup => isEqual(backup.resource, fooFile)));\n\t\t\tassert.ok(backups.some(backup => isEqual(backup.resource, untitledFile)));\n\t\t\tassert.ok(backups.some(backup => isEqual(backup.resource, customFile)));\n\t\t\tassert.ok(backups.every(backup => backup.typeId === ''));\n\t\t});\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"]}