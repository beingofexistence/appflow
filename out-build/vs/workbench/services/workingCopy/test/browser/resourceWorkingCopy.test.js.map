{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/workingCopy/test/browser/resourceWorkingCopy.test.ts"],"names":[],"mappings":"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","file":"resourceWorkingCopy.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Event } from 'vs/base/common/event';\nimport { URI } from 'vs/base/common/uri';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { TestServiceAccessor, workbenchInstantiationService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { FileChangesEvent, FileChangeType } from 'vs/platform/files/common/files';\nimport { IRevertOptions, ISaveOptions } from 'vs/workbench/common/editor';\nimport { ResourceWorkingCopy } from 'vs/workbench/services/workingCopy/common/resourceWorkingCopy';\nimport { WorkingCopyCapabilities, IWorkingCopyBackup } from 'vs/workbench/services/workingCopy/common/workingCopy';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { runWithFakedTimers } from 'vs/base/test/common/timeTravelScheduler';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nsuite('ResourceWorkingCopy', function () {\n\n\tclass TestResourceWorkingCopy extends ResourceWorkingCopy {\n\t\tname = 'testName';\n\t\ttypeId = 'testTypeId';\n\t\tcapabilities = WorkingCopyCapabilities.None;\n\t\tonDidChangeDirty = Event.None;\n\t\tonDidChangeContent = Event.None;\n\t\tonDidSave = Event.None;\n\t\tisDirty(): boolean { return false; }\n\t\tasync backup(token: CancellationToken): Promise<IWorkingCopyBackup> { throw new Error('Method not implemented.'); }\n\t\tasync save(options?: ISaveOptions): Promise<boolean> { return false; }\n\t\tasync revert(options?: IRevertOptions): Promise<void> { }\n\n\t}\n\n\tconst disposables = new DisposableStore();\n\tconst resource = URI.file('test/resource');\n\tlet instantiationService: IInstantiationService;\n\tlet accessor: TestServiceAccessor;\n\tlet workingCopy: TestResourceWorkingCopy;\n\n\tfunction createWorkingCopy(uri: URI = resource) {\n\t\treturn new TestResourceWorkingCopy(uri, accessor.fileService);\n\t}\n\n\tsetup(() => {\n\t\tinstantiationService = workbenchInstantiationService(undefined, disposables);\n\t\taccessor = instantiationService.createInstance(TestServiceAccessor);\n\n\t\tworkingCopy = disposables.add(createWorkingCopy());\n\t});\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\ttest('orphaned tracking', async () => {\n\t\treturn runWithFakedTimers({}, async () => {\n\t\t\tassert.strictEqual(workingCopy.isOrphaned(), false);\n\n\t\t\tlet onDidChangeOrphanedPromise = Event.toPromise(workingCopy.onDidChangeOrphaned);\n\t\t\taccessor.fileService.notExistsSet.set(resource, true);\n\t\t\taccessor.fileService.fireFileChanges(new FileChangesEvent([{ resource, type: FileChangeType.DELETED }], false));\n\n\t\t\tawait onDidChangeOrphanedPromise;\n\t\t\tassert.strictEqual(workingCopy.isOrphaned(), true);\n\n\t\t\tonDidChangeOrphanedPromise = Event.toPromise(workingCopy.onDidChangeOrphaned);\n\t\t\taccessor.fileService.notExistsSet.delete(resource);\n\t\t\taccessor.fileService.fireFileChanges(new FileChangesEvent([{ resource, type: FileChangeType.ADDED }], false));\n\n\t\t\tawait onDidChangeOrphanedPromise;\n\t\t\tassert.strictEqual(workingCopy.isOrphaned(), false);\n\t\t});\n\t});\n\n\ttest('dispose, isDisposed', async () => {\n\t\tassert.strictEqual(workingCopy.isDisposed(), false);\n\n\t\tlet disposedEvent = false;\n\t\tdisposables.add(workingCopy.onWillDispose(() => {\n\t\t\tdisposedEvent = true;\n\t\t}));\n\n\t\tworkingCopy.dispose();\n\n\t\tassert.strictEqual(workingCopy.isDisposed(), true);\n\t\tassert.strictEqual(disposedEvent, true);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"]}