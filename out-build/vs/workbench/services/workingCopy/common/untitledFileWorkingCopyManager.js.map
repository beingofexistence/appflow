{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/workingCopy/common/untitledFileWorkingCopyManager.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAoGzF,IAAM,IAAI,GAAV,MAAM,IAAwE,SAAQ,qCAA0D;QActJ,YACkB,CAAyB,EACzB,CAAqD,EACrD,CAAqD,EACxD,WAAgB,EACf,CAAkC,EACpC,UAAe,EACD,wBAA6B,EACnC,CAAwC;YAE7D,KAAK,CAAC,WAAW,EAAE,UAAU,EAAE,wBAAwB,CAAC,CAAC;YATxC,MAAC,GAAD,CAAC,CAAwB;YACzB,MAAC,GAAD,CAAC,CAAoD;YACrD,MAAC,GAAD,CAAC,CAAoD;YAEtC,MAAC,GAAD,CAAC,CAAgB;YAGX,MAAC,GAAD,CAAC,CAAsB;YApB9D,gBAAgB;YAEC,MAAC,GAAmB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAmC,CAAC,CAAC;YACvF,qBAAgB,GAAG,IAAI,CAAC,CAAC,CAAiB,KAAK,CAAC;YAExC,MAAC,GAAgB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAmC,CAAC,CAAC;YACpF,kBAAa,GAAG,IAAI,CAAC,CAAC,CAAc,KAAK,CAAC;YAEnD,YAAY;YAEK,MAAC,GAAmC,IAAI,SAAG,EAAuB,CAAC;QAapF,CAAC;QAOD,KAAK,CAAC,OAAO,CAAC,OAAiD;YAC9D,MAAM,WAAW,GAAG,IAAI,CAAC,CAAC,CAAa,OAAO,CAAC,CAAC;YAChD,MAAM,WAAW,CAAC,OAAO,EAAE,CAAC;YAE5B,OAAO,WAAW,CAAC;QACpB,CAAC;QAEO,CAAC,CAAa,UAAmD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;YAC3F,MAAM,eAAe,GAAG,IAAI,CAAC,CAAC,CAAc,OAAO,CAAC,CAAC;YAErD,2CAA2C;YAC3C,IAAI,eAAe,CAAC,gBAAgB,EAAE;gBACrC,MAAM,mBAAmB,GAAG,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC;gBACvE,IAAI,mBAAmB,EAAE;oBACxB,OAAO,mBAAmB,CAAC;iBAC3B;aACD;YAED,gCAAgC;YAChC,OAAO,IAAI,CAAC,CAAC,CAAQ,eAAe,CAAC,CAAC;QACvC,CAAC;QAEO,CAAC,CAAc,OAAgD;YACtE,MAAM,eAAe,GAA4C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAErF,6BAA6B;YAC7B,IAAI,OAAO,CAAC,kBAAkB,EAAE;gBAC/B,eAAe,CAAC,gBAAgB,GAAG,SAAG,CAAC,IAAI,CAAC;oBAC3C,MAAM,EAAE,iBAAO,CAAC,QAAQ;oBACxB,SAAS,EAAE,OAAO,CAAC,kBAAkB,CAAC,SAAS;oBAC/C,QAAQ,EAAE,OAAO,CAAC,kBAAkB,CAAC,QAAQ;oBAC7C,IAAI,EAAE,OAAO,CAAC,kBAAkB,CAAC,IAAI;oBACrC,KAAK,EAAE,OAAO,CAAC,kBAAkB,CAAC,KAAK;iBACvC,CAAC,CAAC;gBACH,eAAe,CAAC,kBAAkB,GAAG,OAAO,CAAC,kBAAkB,CAAC;aAChE;YAED,2BAA2B;iBACtB;gBACJ,IAAI,OAAO,CAAC,gBAAgB,EAAE,MAAM,KAAK,iBAAO,CAAC,QAAQ,EAAE;oBAC1D,eAAe,CAAC,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,CAAC;iBAC5D;gBACD,eAAe,CAAC,YAAY,GAAG,OAAO,CAAC,YAAY,CAAC;aACpD;YAED,0BAA0B;YAC1B,eAAe,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;YAE5C,OAAO,eAAe,CAAC;QACxB,CAAC;QAEO,CAAC,CAAQ,OAAgD;YAEhE,qDAAqD;YACrD,IAAI,gBAAgB,GAAG,OAAO,CAAC,gBAAgB,CAAC;YAChD,IAAI,CAAC,gBAAgB,EAAE;gBACtB,IAAI,OAAO,GAAG,CAAC,CAAC;gBAChB,GAAG;oBACF,gBAAgB,GAAG,SAAG,CAAC,IAAI,CAAC;wBAC3B,MAAM,EAAE,iBAAO,CAAC,QAAQ;wBACxB,IAAI,EAAE,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,cAAc,OAAO,EAAE,CAAC,CAAC,CAAC,YAAY,OAAO,EAAE;wBAC5E,KAAK,EAAE,IAAI,CAAC,CAAC,CAAiB,CAAC;4BAC9B,UAAU,IAAI,CAAC,CAAC,EAAkB,CAAC,CAAC,CAAC,sFAAsF;4BAC3H,SAAS,CAAQ,4EAA4E;qBAC9F,CAAC,CAAC;oBACH,OAAO,EAAE,CAAC;iBACV,QAAQ,IAAI,CAAC,CAAC,CAAG,gBAAgB,CAAC,EAAE;aACrC;YAED,gDAAgD;YAChD,MAAM,WAAW,GAAG,IAAI,8BAAI,CAC3B,IAAI,CAAC,CAAC,EACN,gBAAgB,EAChB,IAAI,CAAC,CAAC,CAAY,mBAAmB,CAAC,gBAAgB,CAAC,EACvD,CAAC,CAAC,OAAO,CAAC,kBAAkB,EAC5B,CAAC,CAAC,OAAO,CAAC,YAAY,EACtB,OAAO,CAAC,QAAQ,EAChB,IAAI,CAAC,CAAC,EACN,IAAI,CAAC,CAAC,EACN,IAAI,CAAC,CAAC,EACN,IAAI,CAAC,CAAC,EACN,IAAI,CAAC,CAAC,CACN,CAAC;YAEF,WAAW;YACX,IAAI,CAAC,CAAC,CAAmB,WAAW,CAAC,CAAC;YAEtC,OAAO,WAAW,CAAC;QACpB,CAAC;QAEO,CAAC,CAAmB,WAAwC;YAEnE,iCAAiC;YACjC,MAAM,oBAAoB,GAAG,IAAI,eAAG,EAAc,CAAC;YACnD,oBAAoB,CAAC,GAAG,CAAC,WAAW,CAAC,gBAAgB,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAiB,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YACvG,oBAAoB,CAAC,GAAG,CAAC,WAAW,CAAC,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAc,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;YAEjG,oBAAoB;YACpB,IAAI,CAAC,CAAC,CAAiC,GAAG,CAAC,WAAW,CAAC,QAAQ,EAAE,oBAAoB,CAAC,CAAC;YAEvF,eAAe;YACf,IAAI,CAAC,CAAC,CAAG,WAAW,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;YAE5C,yDAAyD;YACzD,qCAAqC;YACrC,IAAI,WAAW,CAAC,OAAO,EAAE,EAAE;gBAC1B,IAAI,CAAC,CAAC,CAAiB,IAAI,CAAC,WAAW,CAAC,CAAC;aACzC;QACF,CAAC;QAEkB,CAAC,CAAM,QAAa;YACtC,MAAM,OAAO,GAAG,KAAK,CAAC,CAAC,CAAM,QAAQ,CAAC,CAAC;YAEvC,8CAA8C;YAC9C,MAAM,mBAAmB,GAAG,IAAI,CAAC,CAAC,CAAiC,GAAG,CAAC,QAAQ,CAAC,CAAC;YACjF,IAAI,mBAAmB,EAAE;gBACxB,IAAA,eAAG,EAAK,mBAAmB,CAAC,CAAC;gBAC7B,IAAI,CAAC,CAAC,CAAiC,MAAM,CAAC,QAAQ,CAAC,CAAC;aACxD;YAED,OAAO,OAAO,CAAC;QAChB,CAAC;QAED,YAAY;QAEZ,mBAAmB;QAEV,OAAO;YACf,KAAK,CAAC,OAAO,EAAE,CAAC;YAEhB,4CAA4C;YAC5C,IAAA,eAAG,EAAK,IAAI,CAAC,CAAC,CAAiC,MAAM,EAAE,CAAC,CAAC;YACzD,IAAI,CAAC,CAAC,CAAiC,KAAK,EAAE,CAAC;QAChD,CAAC;KAGD,CAAA;IAxKY,oBAAI;mBAAJ,IAAI;QAkBd,WAAA,WAAG,CAAA;QACH,WAAA,WAAG,CAAA;QACH,WAAA,SAAG,CAAA;QACH,WAAA,uBAAG,CAAA;QACH,WAAA,wBAAG,CAAA;OAtBO,IAAI,CAwKhB","file":"untitledFileWorkingCopyManager.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore, dispose, IDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { IUntitledFileWorkingCopy, IUntitledFileWorkingCopyInitialContents, IUntitledFileWorkingCopyModel, IUntitledFileWorkingCopyModelFactory, IUntitledFileWorkingCopySaveDelegate, UntitledFileWorkingCopy } from 'vs/workbench/services/workingCopy/common/untitledFileWorkingCopy';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { Schemas } from 'vs/base/common/network';\nimport { IWorkingCopyService } from 'vs/workbench/services/workingCopy/common/workingCopyService';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IWorkingCopyBackupService } from 'vs/workbench/services/workingCopy/common/workingCopyBackup';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { BaseFileWorkingCopyManager, IBaseFileWorkingCopyManager } from 'vs/workbench/services/workingCopy/common/abstractFileWorkingCopyManager';\nimport { ResourceMap } from 'vs/base/common/map';\n\n/**\n * The only one that should be dealing with `IUntitledFileWorkingCopy` and\n * handle all operations that are working copy related, such as save/revert,\n * backup and resolving.\n */\nexport interface IUntitledFileWorkingCopyManager<M extends IUntitledFileWorkingCopyModel> extends IBaseFileWorkingCopyManager<M, IUntitledFileWorkingCopy<M>> {\n\n\t/**\n\t * An event for when a untitled file working copy changed it's dirty state.\n\t */\n\treadonly onDidChangeDirty: Event<IUntitledFileWorkingCopy<M>>;\n\n\t/**\n\t * An event for when a untitled file working copy is about to be disposed.\n\t */\n\treadonly onWillDispose: Event<IUntitledFileWorkingCopy<M>>;\n\n\t/**\n\t * Create a new untitled file working copy with optional initial contents.\n\t *\n\t * Note: Callers must `dispose` the working copy when no longer needed.\n\t */\n\tresolve(options?: INewUntitledFileWorkingCopyOptions): Promise<IUntitledFileWorkingCopy<M>>;\n\n\t/**\n\t * Create a new untitled file working copy with optional initial contents\n\t * and associated resource. The associated resource will be used when\n\t * saving and will not require to ask the user for a file path.\n\t *\n\t * Note: Callers must `dispose` the working copy when no longer needed.\n\t */\n\tresolve(options?: INewUntitledFileWorkingCopyWithAssociatedResourceOptions): Promise<IUntitledFileWorkingCopy<M>>;\n\n\t/**\n\t * Creates a new untitled file working copy with optional initial contents\n\t * with the provided resource or return an existing untitled file working\n\t * copy otherwise.\n\t *\n\t * Note: Callers must `dispose` the working copy when no longer needed.\n\t */\n\tresolve(options?: INewOrExistingUntitledFileWorkingCopyOptions): Promise<IUntitledFileWorkingCopy<M>>;\n}\n\nexport interface INewUntitledFileWorkingCopyOptions {\n\n\t/**\n\t * Initial value of the untitled file working copy\n\t * with support to indicate whether this should turn\n\t * the working copy dirty or not.\n\t */\n\tcontents?: IUntitledFileWorkingCopyInitialContents;\n}\n\nexport interface INewUntitledFileWorkingCopyWithAssociatedResourceOptions extends INewUntitledFileWorkingCopyOptions {\n\n\t/**\n\t * Resource components to associate with the untitled file working copy.\n\t * When saving, the associated components will be used and the user\n\t * is not being asked to provide a file path.\n\t *\n\t * Note: currently it is not possible to specify the `scheme` to use. The\n\t * untitled file working copy will saved to the default local or remote resource.\n\t */\n\tassociatedResource: { authority?: string; path?: string; query?: string; fragment?: string };\n}\n\nexport interface INewOrExistingUntitledFileWorkingCopyOptions extends INewUntitledFileWorkingCopyOptions {\n\n\t/**\n\t * A resource to identify the untitled file working copy\n\t * to create or return if already existing.\n\t *\n\t * Note: the resource will not be used unless the scheme is `untitled`.\n\t */\n\tuntitledResource: URI;\n\n\t/**\n\t * A flag that will prevent the working copy from appearing dirty in the UI\n\t * and not show a confirmation dialog when closed with unsaved content.\n\t */\n\tisScratchpad?: boolean;\n}\n\ntype IInternalUntitledFileWorkingCopyOptions = INewUntitledFileWorkingCopyOptions & INewUntitledFileWorkingCopyWithAssociatedResourceOptions & INewOrExistingUntitledFileWorkingCopyOptions;\n\nexport class UntitledFileWorkingCopyManager<M extends IUntitledFileWorkingCopyModel> extends BaseFileWorkingCopyManager<M, IUntitledFileWorkingCopy<M>> implements IUntitledFileWorkingCopyManager<M> {\n\n\t//#region Events\n\n\tprivate readonly _onDidChangeDirty = this._register(new Emitter<IUntitledFileWorkingCopy<M>>());\n\treadonly onDidChangeDirty = this._onDidChangeDirty.event;\n\n\tprivate readonly _onWillDispose = this._register(new Emitter<IUntitledFileWorkingCopy<M>>());\n\treadonly onWillDispose = this._onWillDispose.event;\n\n\t//#endregion\n\n\tprivate readonly mapResourceToWorkingCopyListeners = new ResourceMap<IDisposable>();\n\n\tconstructor(\n\t\tprivate readonly workingCopyTypeId: string,\n\t\tprivate readonly modelFactory: IUntitledFileWorkingCopyModelFactory<M>,\n\t\tprivate readonly saveDelegate: IUntitledFileWorkingCopySaveDelegate<M>,\n\t\t@IFileService fileService: IFileService,\n\t\t@ILabelService private readonly labelService: ILabelService,\n\t\t@ILogService logService: ILogService,\n\t\t@IWorkingCopyBackupService workingCopyBackupService: IWorkingCopyBackupService,\n\t\t@IWorkingCopyService private readonly workingCopyService: IWorkingCopyService\n\t) {\n\t\tsuper(fileService, logService, workingCopyBackupService);\n\t}\n\n\t//#region Resolve\n\n\tresolve(options?: INewUntitledFileWorkingCopyOptions): Promise<IUntitledFileWorkingCopy<M>>;\n\tresolve(options?: INewUntitledFileWorkingCopyWithAssociatedResourceOptions): Promise<IUntitledFileWorkingCopy<M>>;\n\tresolve(options?: INewOrExistingUntitledFileWorkingCopyOptions): Promise<IUntitledFileWorkingCopy<M>>;\n\tasync resolve(options?: IInternalUntitledFileWorkingCopyOptions): Promise<IUntitledFileWorkingCopy<M>> {\n\t\tconst workingCopy = this.doCreateOrGet(options);\n\t\tawait workingCopy.resolve();\n\n\t\treturn workingCopy;\n\t}\n\n\tprivate doCreateOrGet(options: IInternalUntitledFileWorkingCopyOptions = Object.create(null)): IUntitledFileWorkingCopy<M> {\n\t\tconst massagedOptions = this.massageOptions(options);\n\n\t\t// Return existing instance if asked for it\n\t\tif (massagedOptions.untitledResource) {\n\t\t\tconst existingWorkingCopy = this.get(massagedOptions.untitledResource);\n\t\t\tif (existingWorkingCopy) {\n\t\t\t\treturn existingWorkingCopy;\n\t\t\t}\n\t\t}\n\n\t\t// Create new instance otherwise\n\t\treturn this.doCreate(massagedOptions);\n\t}\n\n\tprivate massageOptions(options: IInternalUntitledFileWorkingCopyOptions): IInternalUntitledFileWorkingCopyOptions {\n\t\tconst massagedOptions: IInternalUntitledFileWorkingCopyOptions = Object.create(null);\n\n\t\t// Handle associated resource\n\t\tif (options.associatedResource) {\n\t\t\tmassagedOptions.untitledResource = URI.from({\n\t\t\t\tscheme: Schemas.untitled,\n\t\t\t\tauthority: options.associatedResource.authority,\n\t\t\t\tfragment: options.associatedResource.fragment,\n\t\t\t\tpath: options.associatedResource.path,\n\t\t\t\tquery: options.associatedResource.query\n\t\t\t});\n\t\t\tmassagedOptions.associatedResource = options.associatedResource;\n\t\t}\n\n\t\t// Handle untitled resource\n\t\telse {\n\t\t\tif (options.untitledResource?.scheme === Schemas.untitled) {\n\t\t\t\tmassagedOptions.untitledResource = options.untitledResource;\n\t\t\t}\n\t\t\tmassagedOptions.isScratchpad = options.isScratchpad;\n\t\t}\n\n\t\t// Take over initial value\n\t\tmassagedOptions.contents = options.contents;\n\n\t\treturn massagedOptions;\n\t}\n\n\tprivate doCreate(options: IInternalUntitledFileWorkingCopyOptions): IUntitledFileWorkingCopy<M> {\n\n\t\t// Create a new untitled resource if none is provided\n\t\tlet untitledResource = options.untitledResource;\n\t\tif (!untitledResource) {\n\t\t\tlet counter = 1;\n\t\t\tdo {\n\t\t\t\tuntitledResource = URI.from({\n\t\t\t\t\tscheme: Schemas.untitled,\n\t\t\t\t\tpath: options.isScratchpad ? `Scratchpad-${counter}` : `Untitled-${counter}`,\n\t\t\t\t\tquery: this.workingCopyTypeId ?\n\t\t\t\t\t\t`typeId=${this.workingCopyTypeId}` : // distinguish untitled resources among others by encoding the `typeId` as query param\n\t\t\t\t\t\tundefined\t\t\t\t\t\t\t // keep untitled resources for text files as they are (when `typeId === ''`)\n\t\t\t\t});\n\t\t\t\tcounter++;\n\t\t\t} while (this.has(untitledResource));\n\t\t}\n\n\t\t// Create new working copy with provided options\n\t\tconst workingCopy = new UntitledFileWorkingCopy(\n\t\t\tthis.workingCopyTypeId,\n\t\t\tuntitledResource,\n\t\t\tthis.labelService.getUriBasenameLabel(untitledResource),\n\t\t\t!!options.associatedResource,\n\t\t\t!!options.isScratchpad,\n\t\t\toptions.contents,\n\t\t\tthis.modelFactory,\n\t\t\tthis.saveDelegate,\n\t\t\tthis.workingCopyService,\n\t\t\tthis.workingCopyBackupService,\n\t\t\tthis.logService\n\t\t);\n\n\t\t// Register\n\t\tthis.registerWorkingCopy(workingCopy);\n\n\t\treturn workingCopy;\n\t}\n\n\tprivate registerWorkingCopy(workingCopy: IUntitledFileWorkingCopy<M>): void {\n\n\t\t// Install working copy listeners\n\t\tconst workingCopyListeners = new DisposableStore();\n\t\tworkingCopyListeners.add(workingCopy.onDidChangeDirty(() => this._onDidChangeDirty.fire(workingCopy)));\n\t\tworkingCopyListeners.add(workingCopy.onWillDispose(() => this._onWillDispose.fire(workingCopy)));\n\n\t\t// Keep for disposal\n\t\tthis.mapResourceToWorkingCopyListeners.set(workingCopy.resource, workingCopyListeners);\n\n\t\t// Add to cache\n\t\tthis.add(workingCopy.resource, workingCopy);\n\n\t\t// If the working copy is dirty right from the beginning,\n\t\t// make sure to emit this as an event\n\t\tif (workingCopy.isDirty()) {\n\t\t\tthis._onDidChangeDirty.fire(workingCopy);\n\t\t}\n\t}\n\n\tprotected override remove(resource: URI): boolean {\n\t\tconst removed = super.remove(resource);\n\n\t\t// Dispose any existing working copy listeners\n\t\tconst workingCopyListener = this.mapResourceToWorkingCopyListeners.get(resource);\n\t\tif (workingCopyListener) {\n\t\t\tdispose(workingCopyListener);\n\t\t\tthis.mapResourceToWorkingCopyListeners.delete(resource);\n\t\t}\n\n\t\treturn removed;\n\t}\n\n\t//#endregion\n\n\t//#region Lifecycle\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\t// Dispose the working copy change listeners\n\t\tdispose(this.mapResourceToWorkingCopyListeners.values());\n\t\tthis.mapResourceToWorkingCopyListeners.clear();\n\t}\n\n\t//#endregion\n}\n"]}