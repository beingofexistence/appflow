{"version":3,"sources":["vs/workbench/services/workingCopy/common/workingCopyHistoryTracker.ts"],"names":[],"mappings":"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","file":"workingCopyHistoryTracker.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { URI } from 'vs/base/common/uri';\nimport { IdleValue, Limiter } from 'vs/base/common/async';\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ResourceMap } from 'vs/base/common/map';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IUndoRedoService } from 'vs/platform/undoRedo/common/undoRedo';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { IWorkbenchContribution } from 'vs/workbench/common/contributions';\nimport { SaveSource, SaveSourceRegistry } from 'vs/workbench/common/editor';\nimport { IPathService } from 'vs/workbench/services/path/common/pathService';\nimport { isStoredFileWorkingCopySaveEvent, IStoredFileWorkingCopyModel } from 'vs/workbench/services/workingCopy/common/storedFileWorkingCopy';\nimport { IStoredFileWorkingCopySaveEvent } from 'vs/workbench/services/workingCopy/common/storedFileWorkingCopyManager';\nimport { IWorkingCopy } from 'vs/workbench/services/workingCopy/common/workingCopy';\nimport { IWorkingCopyHistoryService, MAX_PARALLEL_HISTORY_IO_OPS } from 'vs/workbench/services/workingCopy/common/workingCopyHistory';\nimport { IWorkingCopySaveEvent, IWorkingCopyService } from 'vs/workbench/services/workingCopy/common/workingCopyService';\nimport { Schemas } from 'vs/base/common/network';\nimport { ResourceGlobMatcher } from 'vs/workbench/common/resources';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { FileOperation, FileOperationEvent, IFileOperationEventWithMetadata, IFileService, IFileStatWithMetadata } from 'vs/platform/files/common/files';\n\nexport class WorkingCopyHistoryTracker extends Disposable implements IWorkbenchContribution {\n\n\tprivate static readonly SETTINGS = {\n\t\tENABLED: 'workbench.localHistory.enabled',\n\t\tSIZE_LIMIT: 'workbench.localHistory.maxFileSize',\n\t\tEXCLUDES: 'workbench.localHistory.exclude'\n\t};\n\n\tprivate static readonly UNDO_REDO_SAVE_SOURCE = SaveSourceRegistry.registerSource('undoRedo.source', localize('undoRedo.source', \"Undo / Redo\"));\n\n\tprivate readonly limiter = this._register(new Limiter(MAX_PARALLEL_HISTORY_IO_OPS));\n\n\tprivate readonly resourceExcludeMatcher = this._register(new IdleValue(() => {\n\t\tconst matcher = this._register(new ResourceGlobMatcher(\n\t\t\troot => this.configurationService.getValue(WorkingCopyHistoryTracker.SETTINGS.EXCLUDES, { resource: root }),\n\t\t\tevent => event.affectsConfiguration(WorkingCopyHistoryTracker.SETTINGS.EXCLUDES),\n\t\t\tthis.contextService,\n\t\t\tthis.configurationService\n\t\t));\n\n\t\treturn matcher;\n\t}));\n\n\tprivate readonly pendingAddHistoryEntryOperations = new ResourceMap<CancellationTokenSource>(resource => this.uriIdentityService.extUri.getComparisonKey(resource));\n\n\tprivate readonly workingCopyContentVersion = new ResourceMap<number>(resource => this.uriIdentityService.extUri.getComparisonKey(resource));\n\tprivate readonly historyEntryContentVersion = new ResourceMap<number>(resource => this.uriIdentityService.extUri.getComparisonKey(resource));\n\n\tconstructor(\n\t\t@IWorkingCopyService private readonly workingCopyService: IWorkingCopyService,\n\t\t@IWorkingCopyHistoryService private readonly workingCopyHistoryService: IWorkingCopyHistoryService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService,\n\t\t@IPathService private readonly pathService: IPathService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IUndoRedoService private readonly undoRedoService: IUndoRedoService,\n\t\t@IWorkspaceContextService private readonly contextService: IWorkspaceContextService,\n\t\t@IFileService private readonly fileService: IFileService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners() {\n\n\t\t// File Events\n\t\tthis._register(this.fileService.onDidRunOperation(e => this.onDidRunFileOperation(e)));\n\n\t\t// Working Copy Events\n\t\tthis._register(this.workingCopyService.onDidChangeContent(workingCopy => this.onDidChangeContent(workingCopy)));\n\t\tthis._register(this.workingCopyService.onDidSave(e => this.onDidSave(e)));\n\t}\n\n\tprivate async onDidRunFileOperation(e: FileOperationEvent): Promise<void> {\n\t\tif (!this.shouldTrackHistoryFromFileOperationEvent(e)) {\n\t\t\treturn; // return early for working copies we are not interested in\n\t\t}\n\n\t\tconst source = e.resource;\n\t\tconst target = e.target.resource;\n\n\t\t// Move working copy history entries for this file move event\n\t\tconst resources = await this.workingCopyHistoryService.moveEntries(source, target);\n\n\t\t// Make sure to track the content version of each entry that\n\t\t// was moved in our map. This ensures that a subsequent save\n\t\t// without a content change does not add a redundant entry\n\t\t// (https://github.com/microsoft/vscode/issues/145881)\n\t\tfor (const resource of resources) {\n\t\t\tconst contentVersion = this.getContentVersion(resource);\n\t\t\tthis.historyEntryContentVersion.set(resource, contentVersion);\n\t\t}\n\t}\n\n\tprivate onDidChangeContent(workingCopy: IWorkingCopy): void {\n\n\t\t// Increment content version ID for resource\n\t\tconst contentVersionId = this.getContentVersion(workingCopy.resource);\n\t\tthis.workingCopyContentVersion.set(workingCopy.resource, contentVersionId + 1);\n\t}\n\n\tprivate getContentVersion(resource: URI): number {\n\t\treturn this.workingCopyContentVersion.get(resource) || 0;\n\t}\n\n\tprivate onDidSave(e: IWorkingCopySaveEvent): void {\n\t\tif (!this.shouldTrackHistoryFromSaveEvent(e)) {\n\t\t\treturn; // return early for working copies we are not interested in\n\t\t}\n\n\t\tconst contentVersion = this.getContentVersion(e.workingCopy.resource);\n\t\tif (this.historyEntryContentVersion.get(e.workingCopy.resource) === contentVersion) {\n\t\t\treturn; // return early when content version already has associated history entry\n\t\t}\n\n\t\t// Cancel any previous operation for this resource\n\t\tthis.pendingAddHistoryEntryOperations.get(e.workingCopy.resource)?.dispose(true);\n\n\t\t// Create new cancellation token support and remember\n\t\tconst cts = new CancellationTokenSource();\n\t\tthis.pendingAddHistoryEntryOperations.set(e.workingCopy.resource, cts);\n\n\t\t// Queue new operation to add to history\n\t\tthis.limiter.queue(async () => {\n\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst contentVersion = this.getContentVersion(e.workingCopy.resource);\n\n\t\t\t// Figure out source of save operation if not provided already\n\t\t\tlet source = e.source;\n\t\t\tif (!e.source) {\n\t\t\t\tsource = this.resolveSourceFromUndoRedo(e);\n\t\t\t}\n\n\t\t\t// Add entry\n\t\t\tawait this.workingCopyHistoryService.addEntry({ resource: e.workingCopy.resource, source, timestamp: e.stat.mtime }, cts.token);\n\n\t\t\t// Remember content version as being added to history\n\t\t\tthis.historyEntryContentVersion.set(e.workingCopy.resource, contentVersion);\n\n\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Finally remove from pending operations\n\t\t\tthis.pendingAddHistoryEntryOperations.delete(e.workingCopy.resource);\n\t\t});\n\t}\n\n\tprivate resolveSourceFromUndoRedo(e: IWorkingCopySaveEvent): SaveSource | undefined {\n\t\tconst lastStackElement = this.undoRedoService.getLastElement(e.workingCopy.resource);\n\t\tif (lastStackElement) {\n\t\t\tif (lastStackElement.code === 'undoredo.textBufferEdit') {\n\t\t\t\treturn undefined; // ignore any unspecific stack element that resulted just from typing\n\t\t\t}\n\n\t\t\treturn lastStackElement.label;\n\t\t}\n\n\t\tconst allStackElements = this.undoRedoService.getElements(e.workingCopy.resource);\n\t\tif (allStackElements.future.length > 0 || allStackElements.past.length > 0) {\n\t\t\treturn WorkingCopyHistoryTracker.UNDO_REDO_SAVE_SOURCE;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprivate shouldTrackHistoryFromSaveEvent(e: IWorkingCopySaveEvent): e is IStoredFileWorkingCopySaveEvent<IStoredFileWorkingCopyModel> {\n\t\tif (!isStoredFileWorkingCopySaveEvent(e)) {\n\t\t\treturn false; // only support working copies that are backed by stored files\n\t\t}\n\n\t\treturn this.shouldTrackHistory(e.workingCopy.resource, e.stat);\n\t}\n\n\tprivate shouldTrackHistoryFromFileOperationEvent(e: FileOperationEvent): e is IFileOperationEventWithMetadata {\n\t\tif (!e.isOperation(FileOperation.MOVE)) {\n\t\t\treturn false; // only interested in move operations\n\t\t}\n\n\t\treturn this.shouldTrackHistory(e.target.resource, e.target);\n\t}\n\n\tprivate shouldTrackHistory(resource: URI, stat: IFileStatWithMetadata): boolean {\n\t\tif (\n\t\t\tresource.scheme !== this.pathService.defaultUriScheme && \t// track history for all workspace resources\n\t\t\tresource.scheme !== Schemas.vscodeUserData &&\t\t\t\t// track history for all settings\n\t\t\tresource.scheme !== Schemas.inMemory\t \t\t\t\t\t// track history for tests that use in-memory\n\t\t) {\n\t\t\treturn false; // do not support unknown resources\n\t\t}\n\n\t\tconst configuredMaxFileSizeInBytes = 1024 * this.configurationService.getValue<number>(WorkingCopyHistoryTracker.SETTINGS.SIZE_LIMIT, { resource });\n\t\tif (stat.size > configuredMaxFileSizeInBytes) {\n\t\t\treturn false; // only track files that are not too large\n\t\t}\n\n\t\tif (this.configurationService.getValue(WorkingCopyHistoryTracker.SETTINGS.ENABLED, { resource }) === false) {\n\t\t\treturn false; // do not track when history is disabled\n\t\t}\n\n\t\t// Finally check for exclude setting\n\t\treturn !this.resourceExcludeMatcher.value.matches(resource);\n\t}\n}\n"]}