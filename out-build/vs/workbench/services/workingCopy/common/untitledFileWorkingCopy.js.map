{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/workingCopy/common/untitledFileWorkingCopy.ts"],"names":[],"mappings":"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","file":"untitledFileWorkingCopy.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { VSBufferReadableStream } from 'vs/base/common/buffer';\nimport { IWorkingCopyBackup, IWorkingCopySaveEvent, WorkingCopyCapabilities } from 'vs/workbench/services/workingCopy/common/workingCopy';\nimport { IFileWorkingCopy, IFileWorkingCopyModel, IFileWorkingCopyModelFactory } from 'vs/workbench/services/workingCopy/common/fileWorkingCopy';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { IWorkingCopyService } from 'vs/workbench/services/workingCopy/common/workingCopyService';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { ISaveOptions } from 'vs/workbench/common/editor';\nimport { raceCancellation } from 'vs/base/common/async';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IWorkingCopyBackupService } from 'vs/workbench/services/workingCopy/common/workingCopyBackup';\nimport { emptyStream } from 'vs/base/common/stream';\n\n/**\n * Untitled file specific working copy model factory.\n */\nexport interface IUntitledFileWorkingCopyModelFactory<M extends IUntitledFileWorkingCopyModel> extends IFileWorkingCopyModelFactory<M> { }\n\n/**\n * The underlying model of a untitled file working copy provides\n * some methods for the untitled file working copy to function.\n * The model is typically only available after the working copy\n * has been resolved via it's `resolve()` method.\n */\nexport interface IUntitledFileWorkingCopyModel extends IFileWorkingCopyModel {\n\n\treadonly onDidChangeContent: Event<IUntitledFileWorkingCopyModelContentChangedEvent>;\n}\n\nexport interface IUntitledFileWorkingCopyModelContentChangedEvent {\n\n\t/**\n\t * Flag that indicates that the content change should\n\t * clear the dirty/modified flags, e.g. because the contents are\n\t * back to being empty or back to an initial state that\n\t * should not be considered as modified.\n\t */\n\treadonly isInitial: boolean;\n}\n\nexport interface IUntitledFileWorkingCopy<M extends IUntitledFileWorkingCopyModel> extends IFileWorkingCopy<M> {\n\n\t/**\n\t * Whether this untitled file working copy model has an associated file path.\n\t */\n\treadonly hasAssociatedFilePath: boolean;\n\n\t/**\n\t * Whether we have a resolved model or not.\n\t */\n\tisResolved(): this is IResolvedUntitledFileWorkingCopy<M>;\n}\n\nexport interface IResolvedUntitledFileWorkingCopy<M extends IUntitledFileWorkingCopyModel> extends IUntitledFileWorkingCopy<M> {\n\n\t/**\n\t * A resolved untitled file working copy has a resolved model.\n\t */\n\treadonly model: M;\n}\n\nexport interface IUntitledFileWorkingCopySaveDelegate<M extends IUntitledFileWorkingCopyModel> {\n\n\t/**\n\t * A delegate to enable saving of untitled file working copies.\n\t */\n\t(workingCopy: IUntitledFileWorkingCopy<M>, options?: ISaveOptions): Promise<boolean>;\n}\n\nexport interface IUntitledFileWorkingCopyInitialContents {\n\n\t/**\n\t * The initial contents of the untitled file working copy.\n\t */\n\treadonly value: VSBufferReadableStream;\n\n\t/**\n\t * If not provided, the untitled file working copy will be marked\n\t * modified by default given initial contents are provided.\n\t *\n\t * Note: if the untitled file working copy has an associated path\n\t * the modified state will always be set.\n\t */\n\treadonly markModified?: boolean;\n}\n\nexport class UntitledFileWorkingCopy<M extends IUntitledFileWorkingCopyModel> extends Disposable implements IUntitledFileWorkingCopy<M>  {\n\n\treadonly capabilities = this.isScratchpad ? WorkingCopyCapabilities.Untitled | WorkingCopyCapabilities.Scratchpad : WorkingCopyCapabilities.Untitled;\n\n\tprivate _model: M | undefined = undefined;\n\tget model(): M | undefined { return this._model; }\n\n\t//#region Events\n\n\tprivate readonly _onDidChangeContent = this._register(new Emitter<void>());\n\treadonly onDidChangeContent = this._onDidChangeContent.event;\n\n\tprivate readonly _onDidChangeDirty = this._register(new Emitter<void>());\n\treadonly onDidChangeDirty = this._onDidChangeDirty.event;\n\n\tprivate readonly _onDidSave = this._register(new Emitter<IWorkingCopySaveEvent>());\n\treadonly onDidSave = this._onDidSave.event;\n\n\tprivate readonly _onDidRevert = this._register(new Emitter<void>());\n\treadonly onDidRevert = this._onDidRevert.event;\n\n\tprivate readonly _onWillDispose = this._register(new Emitter<void>());\n\treadonly onWillDispose = this._onWillDispose.event;\n\n\t//#endregion\n\n\tconstructor(\n\t\treadonly typeId: string,\n\t\treadonly resource: URI,\n\t\treadonly name: string,\n\t\treadonly hasAssociatedFilePath: boolean,\n\t\tprivate readonly isScratchpad: boolean,\n\t\tprivate readonly initialContents: IUntitledFileWorkingCopyInitialContents | undefined,\n\t\tprivate readonly modelFactory: IUntitledFileWorkingCopyModelFactory<M>,\n\t\tprivate readonly saveDelegate: IUntitledFileWorkingCopySaveDelegate<M>,\n\t\t@IWorkingCopyService workingCopyService: IWorkingCopyService,\n\t\t@IWorkingCopyBackupService private readonly workingCopyBackupService: IWorkingCopyBackupService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\n\t\t// Make known to working copy service\n\t\tthis._register(workingCopyService.registerWorkingCopy(this));\n\t}\n\n\t//#region Dirty/Modified\n\n\tprivate modified = this.hasAssociatedFilePath || Boolean(this.initialContents && this.initialContents.markModified !== false);\n\n\tisDirty(): boolean {\n\t\treturn this.modified && !this.isScratchpad; // Scratchpad working copies are never dirty\n\t}\n\n\tisModified(): boolean {\n\t\treturn this.modified;\n\t}\n\n\tprivate setModified(modified: boolean): void {\n\t\tif (this.modified === modified) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.modified = modified;\n\t\tif (!this.isScratchpad) {\n\t\t\tthis._onDidChangeDirty.fire();\n\t\t}\n\t}\n\n\t//#endregion\n\n\n\t//#region Resolve\n\n\tasync resolve(): Promise<void> {\n\t\tthis.trace('resolve()');\n\n\t\tif (this.isResolved()) {\n\t\t\tthis.trace('resolve() - exit (already resolved)');\n\n\t\t\t// return early if the untitled file working copy is already\n\t\t\t// resolved assuming that the contents have meanwhile changed\n\t\t\t// in the underlying model. we only resolve untitled once.\n\t\t\treturn;\n\t\t}\n\n\t\tlet untitledContents: VSBufferReadableStream;\n\n\t\t// Check for backups or use initial value or empty\n\t\tconst backup = await this.workingCopyBackupService.resolve(this);\n\t\tif (backup) {\n\t\t\tthis.trace('resolve() - with backup');\n\n\t\t\tuntitledContents = backup.value;\n\t\t} else if (this.initialContents?.value) {\n\t\t\tthis.trace('resolve() - with initial contents');\n\n\t\t\tuntitledContents = this.initialContents.value;\n\t\t} else {\n\t\t\tthis.trace('resolve() - empty');\n\n\t\t\tuntitledContents = emptyStream();\n\t\t}\n\n\t\t// Create model\n\t\tawait this.doCreateModel(untitledContents);\n\n\t\t// Untitled associated to file path are modified right away as well as untitled with content\n\t\tthis.setModified(this.hasAssociatedFilePath || !!backup || Boolean(this.initialContents && this.initialContents.markModified !== false));\n\n\t\t// If we have initial contents, make sure to emit this\n\t\t// as the appropriate events to the outside.\n\t\tif (!!backup || this.initialContents) {\n\t\t\tthis._onDidChangeContent.fire();\n\t\t}\n\t}\n\n\tprivate async doCreateModel(contents: VSBufferReadableStream): Promise<void> {\n\t\tthis.trace('doCreateModel()');\n\n\t\t// Create model and dispose it when we get disposed\n\t\tthis._model = this._register(await this.modelFactory.createModel(this.resource, contents, CancellationToken.None));\n\n\t\t// Model listeners\n\t\tthis.installModelListeners(this._model);\n\t}\n\n\tprivate installModelListeners(model: M): void {\n\n\t\t// Content Change\n\t\tthis._register(model.onDidChangeContent(e => this.onModelContentChanged(e)));\n\n\t\t// Lifecycle\n\t\tthis._register(model.onWillDispose(() => this.dispose()));\n\t}\n\n\tprivate onModelContentChanged(e: IUntitledFileWorkingCopyModelContentChangedEvent): void {\n\n\t\t// Mark the untitled file working copy as non-modified once its\n\t\t// in case provided by the change event and in case we do not\n\t\t// have an associated path set\n\t\tif (!this.hasAssociatedFilePath && e.isInitial) {\n\t\t\tthis.setModified(false);\n\t\t}\n\n\t\t// Turn modified otherwise\n\t\telse {\n\t\t\tthis.setModified(true);\n\t\t}\n\n\t\t// Emit as general content change event\n\t\tthis._onDidChangeContent.fire();\n\t}\n\n\tisResolved(): this is IResolvedUntitledFileWorkingCopy<M> {\n\t\treturn !!this.model;\n\t}\n\n\t//#endregion\n\n\n\t//#region Backup\n\n\tget backupDelay(): number | undefined {\n\t\treturn this.model?.configuration?.backupDelay;\n\t}\n\n\tasync backup(token: CancellationToken): Promise<IWorkingCopyBackup> {\n\t\tlet content: VSBufferReadableStream | undefined = undefined;\n\n\t\t// Make sure to check whether this working copy has been\n\t\t// resolved or not and fallback to the initial value -\n\t\t// if any - to prevent backing up an unresolved working\n\t\t// copy and loosing the initial value.\n\t\tif (this.isResolved()) {\n\t\t\tcontent = await raceCancellation(this.model.snapshot(token), token);\n\t\t} else if (this.initialContents) {\n\t\t\tcontent = this.initialContents.value;\n\t\t}\n\n\t\treturn { content };\n\t}\n\n\t//#endregion\n\n\n\t//#region Save\n\n\tasync save(options?: ISaveOptions): Promise<boolean> {\n\t\tthis.trace('save()');\n\n\t\tconst result = await this.saveDelegate(this, options);\n\n\t\t// Emit Save Event\n\t\tif (result) {\n\t\t\tthis._onDidSave.fire({ reason: options?.reason, source: options?.source });\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t//#endregion\n\n\n\t//#region Revert\n\n\tasync revert(): Promise<void> {\n\t\tthis.trace('revert()');\n\n\t\t// No longer modified\n\t\tthis.setModified(false);\n\n\t\t// Emit as event\n\t\tthis._onDidRevert.fire();\n\n\t\t// A reverted untitled file working copy is invalid\n\t\t// because it has no actual source on disk to revert to.\n\t\t// As such we dispose the model.\n\t\tthis.dispose();\n\t}\n\n\t//#endregion\n\n\toverride dispose(): void {\n\t\tthis.trace('dispose()');\n\n\t\tthis._onWillDispose.fire();\n\n\t\tsuper.dispose();\n\t}\n\n\tprivate trace(msg: string): void {\n\t\tthis.logService.trace(`[untitled file working copy] ${msg}`, this.resource.toString(), this.typeId);\n\t}\n}\n"]}