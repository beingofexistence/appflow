{"version":3,"sources":["vs/workbench/services/workingCopy/common/workingCopyHistoryService.ts"],"names":[],"mappings":"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","file":"workingCopyHistoryService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { assertIsDefined } from 'vs/base/common/types';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IWorkbenchContributionsRegistry, Extensions as WorkbenchExtensions } from 'vs/workbench/common/contributions';\nimport { ILifecycleService, LifecyclePhase, WillShutdownEvent } from 'vs/workbench/services/lifecycle/common/lifecycle';\nimport { WorkingCopyHistoryTracker } from 'vs/workbench/services/workingCopy/common/workingCopyHistoryTracker';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IWorkingCopyHistoryEntry, IWorkingCopyHistoryEntryDescriptor, IWorkingCopyHistoryEvent, IWorkingCopyHistoryService, MAX_PARALLEL_HISTORY_IO_OPS } from 'vs/workbench/services/workingCopy/common/workingCopyHistory';\nimport { FileOperationError, FileOperationResult, IFileService, IFileStatWithMetadata } from 'vs/platform/files/common/files';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { URI } from 'vs/base/common/uri';\nimport { DeferredPromise, Limiter, RunOnceScheduler } from 'vs/base/common/async';\nimport { dirname, extname, isEqual, joinPath } from 'vs/base/common/resources';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { hash } from 'vs/base/common/hash';\nimport { indexOfPath, randomPath } from 'vs/base/common/extpath';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { ResourceMap } from 'vs/base/common/map';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { SaveSource, SaveSourceRegistry } from 'vs/workbench/common/editor';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { lastOrDefault } from 'vs/base/common/arrays';\nimport { escapeRegExpCharacters } from 'vs/base/common/strings';\n\ninterface ISerializedWorkingCopyHistoryModel {\n\treadonly version: number;\n\treadonly resource: string;\n\treadonly entries: ISerializedWorkingCopyHistoryModelEntry[];\n}\n\ninterface ISerializedWorkingCopyHistoryModelEntry {\n\treadonly id: string;\n\treadonly timestamp: number;\n\treadonly source?: SaveSource;\n}\n\n\nexport interface IWorkingCopyHistoryModelOptions {\n\n\t/**\n\t * Whether to flush when the model changes. If not\n\t * configured, `model.store()` has to be called\n\t * explicitly.\n\t */\n\tflushOnChange: boolean;\n}\n\nexport class WorkingCopyHistoryModel {\n\n\tstatic readonly ENTRIES_FILE = 'entries.json';\n\n\tprivate static readonly FILE_SAVED_SOURCE = SaveSourceRegistry.registerSource('default.source', localize('default.source', \"File Saved\"));\n\n\tprivate static readonly SETTINGS = {\n\t\tMAX_ENTRIES: 'workbench.localHistory.maxFileEntries',\n\t\tMERGE_PERIOD: 'workbench.localHistory.mergeWindow'\n\t};\n\n\tprivate entries: IWorkingCopyHistoryEntry[] = [];\n\n\tprivate whenResolved: Promise<void> | undefined = undefined;\n\n\tprivate workingCopyResource: URI | undefined = undefined;\n\tprivate workingCopyName: string | undefined = undefined;\n\n\tprivate historyEntriesFolder: URI | undefined = undefined;\n\tprivate historyEntriesListingFile: URI | undefined = undefined;\n\n\tprivate historyEntriesNameMatcher: RegExp | undefined = undefined;\n\n\tprivate versionId = 0;\n\tprivate storedVersionId = this.versionId;\n\n\tprivate readonly storeLimiter = new Limiter(1);\n\n\tconstructor(\n\t\tworkingCopyResource: URI,\n\t\tprivate readonly historyHome: URI,\n\t\tprivate readonly entryAddedEmitter: Emitter<IWorkingCopyHistoryEvent>,\n\t\tprivate readonly entryChangedEmitter: Emitter<IWorkingCopyHistoryEvent>,\n\t\tprivate readonly entryReplacedEmitter: Emitter<IWorkingCopyHistoryEvent>,\n\t\tprivate readonly entryRemovedEmitter: Emitter<IWorkingCopyHistoryEvent>,\n\t\tprivate readonly options: IWorkingCopyHistoryModelOptions,\n\t\tprivate readonly fileService: IFileService,\n\t\tprivate readonly labelService: ILabelService,\n\t\tprivate readonly logService: ILogService,\n\t\tprivate readonly configurationService: IConfigurationService\n\t) {\n\t\tthis.setWorkingCopy(workingCopyResource);\n\t}\n\n\tprivate setWorkingCopy(workingCopyResource: URI): void {\n\n\t\t// Update working copy\n\t\tthis.workingCopyResource = workingCopyResource;\n\t\tthis.workingCopyName = this.labelService.getUriBasenameLabel(workingCopyResource);\n\n\t\tthis.historyEntriesNameMatcher = new RegExp(`[A-Za-z0-9]{4}${escapeRegExpCharacters(extname(workingCopyResource))}`);\n\n\t\t// Update locations\n\t\tthis.historyEntriesFolder = this.toHistoryEntriesFolder(this.historyHome, workingCopyResource);\n\t\tthis.historyEntriesListingFile = joinPath(this.historyEntriesFolder, WorkingCopyHistoryModel.ENTRIES_FILE);\n\n\t\t// Reset entries and resolved cache\n\t\tthis.entries = [];\n\t\tthis.whenResolved = undefined;\n\t}\n\n\tprivate toHistoryEntriesFolder(historyHome: URI, workingCopyResource: URI): URI {\n\t\treturn joinPath(historyHome, hash(workingCopyResource.toString()).toString(16));\n\t}\n\n\tasync addEntry(source = WorkingCopyHistoryModel.FILE_SAVED_SOURCE, timestamp = Date.now(), token: CancellationToken): Promise<IWorkingCopyHistoryEntry> {\n\t\tlet entryToReplace: IWorkingCopyHistoryEntry | undefined = undefined;\n\n\t\t// Figure out if the last entry should be replaced based\n\t\t// on settings that can define a interval for when an\n\t\t// entry is not added as new entry but should replace.\n\t\t// However, when save source is different, never replace.\n\t\tconst lastEntry = lastOrDefault(this.entries);\n\t\tif (lastEntry && lastEntry.source === source) {\n\t\t\tconst configuredReplaceInterval = this.configurationService.getValue<number>(WorkingCopyHistoryModel.SETTINGS.MERGE_PERIOD, { resource: this.workingCopyResource });\n\t\t\tif (timestamp - lastEntry.timestamp <= (configuredReplaceInterval * 1000 /* convert to millies */)) {\n\t\t\t\tentryToReplace = lastEntry;\n\t\t\t}\n\t\t}\n\n\t\tlet entry: IWorkingCopyHistoryEntry;\n\n\t\t// Replace lastest entry in history\n\t\tif (entryToReplace) {\n\t\t\tentry = await this.doReplaceEntry(entryToReplace, timestamp, token);\n\t\t}\n\n\t\t// Add entry to history\n\t\telse {\n\t\t\tentry = await this.doAddEntry(source, timestamp, token);\n\t\t}\n\n\t\t// Flush now if configured\n\t\tif (this.options.flushOnChange && !token.isCancellationRequested) {\n\t\t\tawait this.store(token);\n\t\t}\n\n\t\treturn entry;\n\t}\n\n\tprivate async doAddEntry(source: SaveSource, timestamp: number, token: CancellationToken): Promise<IWorkingCopyHistoryEntry> {\n\t\tconst workingCopyResource = assertIsDefined(this.workingCopyResource);\n\t\tconst workingCopyName = assertIsDefined(this.workingCopyName);\n\t\tconst historyEntriesFolder = assertIsDefined(this.historyEntriesFolder);\n\n\t\t// Perform a fast clone operation with minimal overhead to a new random location\n\t\tconst id = `${randomPath(undefined, undefined, 4)}${extname(workingCopyResource)}`;\n\t\tconst location = joinPath(historyEntriesFolder, id);\n\t\tawait this.fileService.cloneFile(workingCopyResource, location);\n\n\t\t// Add to list of entries\n\t\tconst entry: IWorkingCopyHistoryEntry = {\n\t\t\tid,\n\t\t\tworkingCopy: { resource: workingCopyResource, name: workingCopyName },\n\t\t\tlocation,\n\t\t\ttimestamp,\n\t\t\tsource\n\t\t};\n\t\tthis.entries.push(entry);\n\n\t\t// Update version ID of model to use for storing later\n\t\tthis.versionId++;\n\n\t\t// Events\n\t\tthis.entryAddedEmitter.fire({ entry });\n\n\t\treturn entry;\n\t}\n\n\tprivate async doReplaceEntry(entry: IWorkingCopyHistoryEntry, timestamp: number, token: CancellationToken): Promise<IWorkingCopyHistoryEntry> {\n\t\tconst workingCopyResource = assertIsDefined(this.workingCopyResource);\n\n\t\t// Perform a fast clone operation with minimal overhead to the existing location\n\t\tawait this.fileService.cloneFile(workingCopyResource, entry.location);\n\n\t\t// Update entry\n\t\tentry.timestamp = timestamp;\n\n\t\t// Update version ID of model to use for storing later\n\t\tthis.versionId++;\n\n\t\t// Events\n\t\tthis.entryReplacedEmitter.fire({ entry });\n\n\t\treturn entry;\n\t}\n\n\tasync removeEntry(entry: IWorkingCopyHistoryEntry, token: CancellationToken): Promise<boolean> {\n\n\t\t// Make sure to await resolving when removing entries\n\t\tawait this.resolveEntriesOnce();\n\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst index = this.entries.indexOf(entry);\n\t\tif (index === -1) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Delete from disk\n\t\tawait this.deleteEntry(entry);\n\n\t\t// Remove from model\n\t\tthis.entries.splice(index, 1);\n\n\t\t// Update version ID of model to use for storing later\n\t\tthis.versionId++;\n\n\t\t// Events\n\t\tthis.entryRemovedEmitter.fire({ entry });\n\n\t\t// Flush now if configured\n\t\tif (this.options.flushOnChange && !token.isCancellationRequested) {\n\t\t\tawait this.store(token);\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tasync updateEntry(entry: IWorkingCopyHistoryEntry, properties: { source: SaveSource }, token: CancellationToken): Promise<void> {\n\n\t\t// Make sure to await resolving when updating entries\n\t\tawait this.resolveEntriesOnce();\n\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst index = this.entries.indexOf(entry);\n\t\tif (index === -1) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Update entry\n\t\tentry.source = properties.source;\n\n\t\t// Update version ID of model to use for storing later\n\t\tthis.versionId++;\n\n\t\t// Events\n\t\tthis.entryChangedEmitter.fire({ entry });\n\n\t\t// Flush now if configured\n\t\tif (this.options.flushOnChange && !token.isCancellationRequested) {\n\t\t\tawait this.store(token);\n\t\t}\n\t}\n\n\tasync getEntries(): Promise<readonly IWorkingCopyHistoryEntry[]> {\n\n\t\t// Make sure to await resolving when all entries are asked for\n\t\tawait this.resolveEntriesOnce();\n\n\t\t// Return as many entries as configured by user settings\n\t\tconst configuredMaxEntries = this.configurationService.getValue<number>(WorkingCopyHistoryModel.SETTINGS.MAX_ENTRIES, { resource: this.workingCopyResource });\n\t\tif (this.entries.length > configuredMaxEntries) {\n\t\t\treturn this.entries.slice(this.entries.length - configuredMaxEntries);\n\t\t}\n\n\t\treturn this.entries;\n\t}\n\n\tasync hasEntries(skipResolve: boolean): Promise<boolean> {\n\n\t\t// Make sure to await resolving unless explicitly skipped\n\t\tif (!skipResolve) {\n\t\t\tawait this.resolveEntriesOnce();\n\t\t}\n\n\t\treturn this.entries.length > 0;\n\t}\n\n\tprivate resolveEntriesOnce(): Promise<void> {\n\t\tif (!this.whenResolved) {\n\t\t\tthis.whenResolved = this.doResolveEntries();\n\t\t}\n\n\t\treturn this.whenResolved;\n\t}\n\n\tprivate async doResolveEntries(): Promise<void> {\n\n\t\t// Resolve from disk\n\t\tconst entries = await this.resolveEntriesFromDisk();\n\n\t\t// We now need to merge our in-memory entries with the\n\t\t// entries we have found on disk because it is possible\n\t\t// that new entries have been added before the entries\n\t\t// listing file was updated\n\t\tfor (const entry of this.entries) {\n\t\t\tentries.set(entry.id, entry);\n\t\t}\n\n\t\t// Set as entries, sorted by timestamp\n\t\tthis.entries = Array.from(entries.values()).sort((entryA, entryB) => entryA.timestamp - entryB.timestamp);\n\t}\n\n\tprivate async resolveEntriesFromDisk(): Promise<Map<string /* ID */, IWorkingCopyHistoryEntry>> {\n\t\tconst workingCopyResource = assertIsDefined(this.workingCopyResource);\n\t\tconst workingCopyName = assertIsDefined(this.workingCopyName);\n\n\t\tconst [entryListing, entryStats] = await Promise.all([\n\n\t\t\t// Resolve entries listing file\n\t\t\tthis.readEntriesFile(),\n\n\t\t\t// Resolve children of history folder\n\t\t\tthis.readEntriesFolder()\n\t\t]);\n\n\t\t// Add from raw folder children\n\t\tconst entries = new Map<string, IWorkingCopyHistoryEntry>();\n\t\tif (entryStats) {\n\t\t\tfor (const entryStat of entryStats) {\n\t\t\t\tentries.set(entryStat.name, {\n\t\t\t\t\tid: entryStat.name,\n\t\t\t\t\tworkingCopy: { resource: workingCopyResource, name: workingCopyName },\n\t\t\t\t\tlocation: entryStat.resource,\n\t\t\t\t\ttimestamp: entryStat.mtime,\n\t\t\t\t\tsource: WorkingCopyHistoryModel.FILE_SAVED_SOURCE\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\t// Update from listing (to have more specific metadata)\n\t\tif (entryListing) {\n\t\t\tfor (const entry of entryListing.entries) {\n\t\t\t\tconst existingEntry = entries.get(entry.id);\n\t\t\t\tif (existingEntry) {\n\t\t\t\t\tentries.set(entry.id, {\n\t\t\t\t\t\t...existingEntry,\n\t\t\t\t\t\ttimestamp: entry.timestamp,\n\t\t\t\t\t\tsource: entry.source ?? existingEntry.source\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn entries;\n\t}\n\n\tasync moveEntries(targetWorkingCopyResource: URI, source: SaveSource, token: CancellationToken): Promise<void> {\n\n\t\t// Ensure model stored so that any pending data is flushed\n\t\tawait this.store(token);\n\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Rename existing entries folder\n\t\tconst sourceHistoryEntriesFolder = assertIsDefined(this.historyEntriesFolder);\n\t\tconst targetHistoryFolder = this.toHistoryEntriesFolder(this.historyHome, targetWorkingCopyResource);\n\t\ttry {\n\t\t\tawait this.fileService.move(sourceHistoryEntriesFolder, targetHistoryFolder, true);\n\t\t} catch (error) {\n\t\t\tif (!(error instanceof FileOperationError && error.fileOperationResult === FileOperationResult.FILE_NOT_FOUND)) {\n\t\t\t\tthis.traceError(error);\n\t\t\t}\n\t\t}\n\n\t\t// Update our associated working copy\n\t\tthis.setWorkingCopy(targetWorkingCopyResource);\n\n\t\t// Add entry for the move\n\t\tawait this.addEntry(source, undefined, token);\n\n\t\t// Store model again to updated location\n\t\tawait this.store(token);\n\t}\n\n\tasync store(token: CancellationToken): Promise<void> {\n\t\tif (!this.shouldStore()) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Use a `Limiter` to prevent multiple `store` operations\n\t\t// potentially running at the same time\n\n\t\tawait this.storeLimiter.queue(async () => {\n\t\t\tif (token.isCancellationRequested || !this.shouldStore()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\treturn this.doStore(token);\n\t\t});\n\t}\n\n\tprivate shouldStore(): boolean {\n\t\treturn this.storedVersionId !== this.versionId;\n\t}\n\n\tprivate async doStore(token: CancellationToken): Promise<void> {\n\t\tconst historyEntriesFolder = assertIsDefined(this.historyEntriesFolder);\n\n\t\t// Make sure to await resolving when persisting\n\t\tawait this.resolveEntriesOnce();\n\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Cleanup based on max-entries setting\n\t\tawait this.cleanUpEntries();\n\n\t\t// Without entries, remove the history folder\n\t\tconst storedVersion = this.versionId;\n\t\tif (this.entries.length === 0) {\n\t\t\ttry {\n\t\t\t\tawait this.fileService.del(historyEntriesFolder, { recursive: true });\n\t\t\t} catch (error) {\n\t\t\t\tthis.traceError(error);\n\t\t\t}\n\t\t}\n\n\t\t// If we still have entries, update the entries meta file\n\t\telse {\n\t\t\tawait this.writeEntriesFile();\n\t\t}\n\n\t\t// Mark as stored version\n\t\tthis.storedVersionId = storedVersion;\n\t}\n\n\tprivate async cleanUpEntries(): Promise<void> {\n\t\tconst configuredMaxEntries = this.configurationService.getValue<number>(WorkingCopyHistoryModel.SETTINGS.MAX_ENTRIES, { resource: this.workingCopyResource });\n\t\tif (this.entries.length <= configuredMaxEntries) {\n\t\t\treturn; // nothing to cleanup\n\t\t}\n\n\t\tconst entriesToDelete = this.entries.slice(0, this.entries.length - configuredMaxEntries);\n\t\tconst entriesToKeep = this.entries.slice(this.entries.length - configuredMaxEntries);\n\n\t\t// Delete entries from disk as instructed\n\t\tfor (const entryToDelete of entriesToDelete) {\n\t\t\tawait this.deleteEntry(entryToDelete);\n\t\t}\n\n\t\t// Make sure to update our in-memory model as well\n\t\t// because it will be persisted right after\n\t\tthis.entries = entriesToKeep;\n\n\t\t// Events\n\t\tfor (const entry of entriesToDelete) {\n\t\t\tthis.entryRemovedEmitter.fire({ entry });\n\t\t}\n\t}\n\n\tprivate async deleteEntry(entry: IWorkingCopyHistoryEntry): Promise<void> {\n\t\ttry {\n\t\t\tawait this.fileService.del(entry.location);\n\t\t} catch (error) {\n\t\t\tthis.traceError(error);\n\t\t}\n\t}\n\n\tprivate async writeEntriesFile(): Promise<void> {\n\t\tconst workingCopyResource = assertIsDefined(this.workingCopyResource);\n\t\tconst historyEntriesListingFile = assertIsDefined(this.historyEntriesListingFile);\n\n\t\tconst serializedModel: ISerializedWorkingCopyHistoryModel = {\n\t\t\tversion: 1,\n\t\t\tresource: workingCopyResource.toString(),\n\t\t\tentries: this.entries.map(entry => {\n\t\t\t\treturn {\n\t\t\t\t\tid: entry.id,\n\t\t\t\t\tsource: entry.source !== WorkingCopyHistoryModel.FILE_SAVED_SOURCE ? entry.source : undefined,\n\t\t\t\t\ttimestamp: entry.timestamp\n\t\t\t\t};\n\t\t\t})\n\t\t};\n\n\t\tawait this.fileService.writeFile(historyEntriesListingFile, VSBuffer.fromString(JSON.stringify(serializedModel)));\n\t}\n\n\tprivate async readEntriesFile(): Promise<ISerializedWorkingCopyHistoryModel | undefined> {\n\t\tconst historyEntriesListingFile = assertIsDefined(this.historyEntriesListingFile);\n\n\t\tlet serializedModel: ISerializedWorkingCopyHistoryModel | undefined = undefined;\n\t\ttry {\n\t\t\tserializedModel = JSON.parse((await this.fileService.readFile(historyEntriesListingFile)).value.toString());\n\t\t} catch (error) {\n\t\t\tif (!(error instanceof FileOperationError && error.fileOperationResult === FileOperationResult.FILE_NOT_FOUND)) {\n\t\t\t\tthis.traceError(error);\n\t\t\t}\n\t\t}\n\n\t\treturn serializedModel;\n\t}\n\n\tprivate async readEntriesFolder(): Promise<IFileStatWithMetadata[] | undefined> {\n\t\tconst historyEntriesFolder = assertIsDefined(this.historyEntriesFolder);\n\t\tconst historyEntriesNameMatcher = assertIsDefined(this.historyEntriesNameMatcher);\n\n\t\tlet rawEntries: IFileStatWithMetadata[] | undefined = undefined;\n\n\t\t// Resolve children of folder on disk\n\t\ttry {\n\t\t\trawEntries = (await this.fileService.resolve(historyEntriesFolder, { resolveMetadata: true })).children;\n\t\t} catch (error) {\n\t\t\tif (!(error instanceof FileOperationError && error.fileOperationResult === FileOperationResult.FILE_NOT_FOUND)) {\n\t\t\t\tthis.traceError(error);\n\t\t\t}\n\t\t}\n\n\t\tif (!rawEntries) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Skip entries that do not seem to have valid file name\n\t\treturn rawEntries.filter(entry =>\n\t\t\t!isEqual(entry.resource, this.historyEntriesListingFile) && // not the listings file\n\t\t\thistoryEntriesNameMatcher.test(entry.name)\t\t\t\t\t// matching our expected file pattern for entries\n\t\t);\n\t}\n\n\tprivate traceError(error: Error): void {\n\t\tthis.logService.trace('[Working Copy History Service]', error);\n\t}\n}\n\nexport abstract class WorkingCopyHistoryService extends Disposable implements IWorkingCopyHistoryService {\n\n\tprivate static readonly FILE_MOVED_SOURCE = SaveSourceRegistry.registerSource('moved.source', localize('moved.source', \"File Moved\"));\n\tprivate static readonly FILE_RENAMED_SOURCE = SaveSourceRegistry.registerSource('renamed.source', localize('renamed.source', \"File Renamed\"));\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprotected readonly _onDidAddEntry = this._register(new Emitter<IWorkingCopyHistoryEvent>());\n\treadonly onDidAddEntry = this._onDidAddEntry.event;\n\n\tprotected readonly _onDidChangeEntry = this._register(new Emitter<IWorkingCopyHistoryEvent>());\n\treadonly onDidChangeEntry = this._onDidChangeEntry.event;\n\n\tprotected readonly _onDidReplaceEntry = this._register(new Emitter<IWorkingCopyHistoryEvent>());\n\treadonly onDidReplaceEntry = this._onDidReplaceEntry.event;\n\n\tprivate readonly _onDidMoveEntries = this._register(new Emitter<void>());\n\treadonly onDidMoveEntries = this._onDidMoveEntries.event;\n\n\tprotected readonly _onDidRemoveEntry = this._register(new Emitter<IWorkingCopyHistoryEvent>());\n\treadonly onDidRemoveEntry = this._onDidRemoveEntry.event;\n\n\tprivate readonly _onDidRemoveEntries = this._register(new Emitter<void>());\n\treadonly onDidRemoveEntries = this._onDidRemoveEntries.event;\n\n\tprivate readonly localHistoryHome = new DeferredPromise<URI>();\n\n\tprotected readonly models = new ResourceMap<WorkingCopyHistoryModel>(resource => this.uriIdentityService.extUri.getComparisonKey(resource));\n\n\tconstructor(\n\t\t@IFileService protected readonly fileService: IFileService,\n\t\t@IRemoteAgentService protected readonly remoteAgentService: IRemoteAgentService,\n\t\t@IWorkbenchEnvironmentService protected readonly environmentService: IWorkbenchEnvironmentService,\n\t\t@IUriIdentityService protected readonly uriIdentityService: IUriIdentityService,\n\t\t@ILabelService protected readonly labelService: ILabelService,\n\t\t@ILogService protected readonly logService: ILogService,\n\t\t@IConfigurationService protected readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\n\t\tthis.resolveLocalHistoryHome();\n\t}\n\n\tprivate async resolveLocalHistoryHome(): Promise<void> {\n\t\tlet historyHome: URI | undefined = undefined;\n\n\t\t// Prefer history to be stored in the remote if we are connected to a remote\n\t\ttry {\n\t\t\tconst remoteEnv = await this.remoteAgentService.getEnvironment();\n\t\t\tif (remoteEnv) {\n\t\t\t\thistoryHome = remoteEnv.localHistoryHome;\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.trace(error); // ignore and fallback to local\n\t\t}\n\n\t\t// But fallback to local if there is no remote\n\t\tif (!historyHome) {\n\t\t\thistoryHome = this.environmentService.localHistoryHome;\n\t\t}\n\n\t\tthis.localHistoryHome.complete(historyHome);\n\t}\n\n\tasync moveEntries(source: URI, target: URI): Promise<URI[]> {\n\t\tconst limiter = new Limiter<URI>(MAX_PARALLEL_HISTORY_IO_OPS);\n\t\tconst promises: Promise<URI>[] = [];\n\n\t\tfor (const [resource, model] of this.models) {\n\t\t\tif (!this.uriIdentityService.extUri.isEqualOrParent(resource, source)) {\n\t\t\t\tcontinue; // model does not match moved resource\n\t\t\t}\n\n\t\t\t// Determine new resulting target resource\n\t\t\tlet targetResource: URI;\n\t\t\tif (this.uriIdentityService.extUri.isEqual(source, resource)) {\n\t\t\t\ttargetResource = target; // file got moved\n\t\t\t} else {\n\t\t\t\tconst index = indexOfPath(resource.path, source.path);\n\t\t\t\ttargetResource = joinPath(target, resource.path.substr(index + source.path.length + 1)); // parent folder got moved\n\t\t\t}\n\n\t\t\t// Figure out save source\n\t\t\tlet saveSource: SaveSource;\n\t\t\tif (this.uriIdentityService.extUri.isEqual(dirname(resource), dirname(targetResource))) {\n\t\t\t\tsaveSource = WorkingCopyHistoryService.FILE_RENAMED_SOURCE;\n\t\t\t} else {\n\t\t\t\tsaveSource = WorkingCopyHistoryService.FILE_MOVED_SOURCE;\n\t\t\t}\n\n\t\t\t// Move entries to target queued\n\t\t\tpromises.push(limiter.queue(() => this.doMoveEntries(model, saveSource, resource, targetResource)));\n\t\t}\n\n\t\tif (!promises.length) {\n\t\t\treturn [];\n\t\t}\n\n\t\t// Await move operations\n\t\tconst resources = await Promise.all(promises);\n\n\t\t// Events\n\t\tthis._onDidMoveEntries.fire();\n\n\t\treturn resources;\n\t}\n\n\tprivate async doMoveEntries(model: WorkingCopyHistoryModel, source: SaveSource, sourceWorkingCopyResource: URI, targetWorkingCopyResource: URI): Promise<URI> {\n\n\t\t// Move to target via model\n\t\tawait model.moveEntries(targetWorkingCopyResource, source, CancellationToken.None);\n\n\t\t// Update model in our map\n\t\tthis.models.delete(sourceWorkingCopyResource);\n\t\tthis.models.set(targetWorkingCopyResource, model);\n\n\t\treturn targetWorkingCopyResource;\n\t}\n\n\tasync addEntry({ resource, source, timestamp }: IWorkingCopyHistoryEntryDescriptor, token: CancellationToken): Promise<IWorkingCopyHistoryEntry | undefined> {\n\t\tif (!this.fileService.hasProvider(resource)) {\n\t\t\treturn undefined; // we require the working copy resource to be file service accessible\n\t\t}\n\n\t\t// Resolve history model for working copy\n\t\tconst model = await this.getModel(resource);\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Add to model\n\t\treturn model.addEntry(source, timestamp, token);\n\t}\n\n\tasync updateEntry(entry: IWorkingCopyHistoryEntry, properties: { source: SaveSource }, token: CancellationToken): Promise<void> {\n\n\t\t// Resolve history model for working copy\n\t\tconst model = await this.getModel(entry.workingCopy.resource);\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Rename in model\n\t\treturn model.updateEntry(entry, properties, token);\n\t}\n\n\tasync removeEntry(entry: IWorkingCopyHistoryEntry, token: CancellationToken): Promise<boolean> {\n\n\t\t// Resolve history model for working copy\n\t\tconst model = await this.getModel(entry.workingCopy.resource);\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Remove from model\n\t\treturn model.removeEntry(entry, token);\n\t}\n\n\tasync removeAll(token: CancellationToken): Promise<void> {\n\t\tconst historyHome = await this.localHistoryHome.p;\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Clear models\n\t\tthis.models.clear();\n\n\t\t// Remove from disk\n\t\tawait this.fileService.del(historyHome, { recursive: true });\n\n\t\t// Events\n\t\tthis._onDidRemoveEntries.fire();\n\t}\n\n\tasync getEntries(resource: URI, token: CancellationToken): Promise<readonly IWorkingCopyHistoryEntry[]> {\n\t\tconst model = await this.getModel(resource);\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst entries = await model.getEntries();\n\t\treturn entries ?? [];\n\t}\n\n\tasync getAll(token: CancellationToken): Promise<readonly URI[]> {\n\t\tconst historyHome = await this.localHistoryHome.p;\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn [];\n\t\t}\n\n\t\tconst all = new ResourceMap<true>();\n\n\t\t// Fill in all known model resources (they might not have yet persisted to disk)\n\t\tfor (const [resource, model] of this.models) {\n\t\t\tconst hasInMemoryEntries = await model.hasEntries(true /* skip resolving because we resolve below from disk */);\n\t\t\tif (hasInMemoryEntries) {\n\t\t\t\tall.set(resource, true);\n\t\t\t}\n\t\t}\n\n\t\t// Resolve all other resources by iterating the history home folder\n\t\ttry {\n\t\t\tconst resolvedHistoryHome = await this.fileService.resolve(historyHome);\n\t\t\tif (resolvedHistoryHome.children) {\n\t\t\t\tconst limiter = new Limiter(MAX_PARALLEL_HISTORY_IO_OPS);\n\t\t\t\tconst promises = [];\n\n\t\t\t\tfor (const child of resolvedHistoryHome.children) {\n\t\t\t\t\tpromises.push(limiter.queue(async () => {\n\t\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tconst serializedModel: ISerializedWorkingCopyHistoryModel = JSON.parse((await this.fileService.readFile(joinPath(child.resource, WorkingCopyHistoryModel.ENTRIES_FILE))).value.toString());\n\t\t\t\t\t\t\tif (serializedModel.entries.length > 0) {\n\t\t\t\t\t\t\t\tall.set(URI.parse(serializedModel.resource), true);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t\t// ignore - model might be missing or corrupt, but we need it\n\t\t\t\t\t\t}\n\t\t\t\t\t}));\n\t\t\t\t}\n\n\t\t\t\tawait Promise.all(promises);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// ignore - history might be entirely empty\n\t\t}\n\n\t\treturn Array.from(all.keys());\n\t}\n\n\tprivate async getModel(resource: URI): Promise<WorkingCopyHistoryModel> {\n\t\tconst historyHome = await this.localHistoryHome.p;\n\n\t\tlet model = this.models.get(resource);\n\t\tif (!model) {\n\t\t\tmodel = new WorkingCopyHistoryModel(resource, historyHome, this._onDidAddEntry, this._onDidChangeEntry, this._onDidReplaceEntry, this._onDidRemoveEntry, this.getModelOptions(), this.fileService, this.labelService, this.logService, this.configurationService);\n\t\t\tthis.models.set(resource, model);\n\t\t}\n\n\t\treturn model;\n\t}\n\n\tprotected abstract getModelOptions(): IWorkingCopyHistoryModelOptions;\n\n}\n\nexport class NativeWorkingCopyHistoryService extends WorkingCopyHistoryService {\n\n\tprivate static readonly STORE_ALL_INTERVAL = 5 * 60 * 1000; // 5min\n\n\tprivate readonly isRemotelyStored = typeof this.environmentService.remoteAuthority === 'string';\n\n\tprivate readonly storeAllCts = this._register(new CancellationTokenSource());\n\tprivate readonly storeAllScheduler = this._register(new RunOnceScheduler(() => this.storeAll(this.storeAllCts.token), NativeWorkingCopyHistoryService.STORE_ALL_INTERVAL));\n\n\tconstructor(\n\t\t@IFileService fileService: IFileService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@IWorkbenchEnvironmentService environmentService: IWorkbenchEnvironmentService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@ILifecycleService private readonly lifecycleService: ILifecycleService,\n\t\t@ILogService logService: ILogService,\n\t\t@IConfigurationService configurationService: IConfigurationService\n\t) {\n\t\tsuper(fileService, remoteAgentService, environmentService, uriIdentityService, labelService, logService, configurationService);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tif (!this.isRemotelyStored) {\n\n\t\t\t// Local: persist all on shutdown\n\t\t\tthis._register(this.lifecycleService.onWillShutdown(e => this.onWillShutdown(e)));\n\n\t\t\t// Local: schedule persist on change\n\t\t\tthis._register(Event.any(this.onDidAddEntry, this.onDidChangeEntry, this.onDidReplaceEntry, this.onDidRemoveEntry)(() => this.onDidChangeModels()));\n\t\t}\n\t}\n\n\tprotected getModelOptions(): IWorkingCopyHistoryModelOptions {\n\t\treturn { flushOnChange: this.isRemotelyStored /* because the connection might drop anytime */ };\n\t}\n\n\tprivate onWillShutdown(e: WillShutdownEvent): void {\n\n\t\t// Dispose the scheduler...\n\t\tthis.storeAllScheduler.dispose();\n\t\tthis.storeAllCts.dispose(true);\n\n\t\t// ...because we now explicitly store all models\n\t\te.join(this.storeAll(e.token), { id: 'join.workingCopyHistory', label: localize('join.workingCopyHistory', \"Saving local history\") });\n\t}\n\n\tprivate onDidChangeModels(): void {\n\t\tif (!this.storeAllScheduler.isScheduled()) {\n\t\t\tthis.storeAllScheduler.schedule();\n\t\t}\n\t}\n\n\tprivate async storeAll(token: CancellationToken): Promise<void> {\n\t\tconst limiter = new Limiter(MAX_PARALLEL_HISTORY_IO_OPS);\n\t\tconst promises = [];\n\n\t\tconst models = Array.from(this.models.values());\n\t\tfor (const model of models) {\n\t\t\tpromises.push(limiter.queue(async () => {\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait model.store(token);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.trace(error);\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\n\t\tawait Promise.all(promises);\n\t}\n}\n\n// Register History Tracker\nRegistry.as<IWorkbenchContributionsRegistry>(WorkbenchExtensions.Workbench).registerWorkbenchContribution(WorkingCopyHistoryTracker, LifecyclePhase.Restored);\n"]}