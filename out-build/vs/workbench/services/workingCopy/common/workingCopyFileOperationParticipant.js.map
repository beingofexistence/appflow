{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/workingCopy/common/workingCopyFileOperationParticipant.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUzF,IAAM,GAAG,GAAT,MAAM,GAAoC,SAAQ,eAAG;QAI3D,YACc,CAAgC,EACtB,CAA0C;YAEjE,KAAK,EAAE,CAAC;YAHsB,MAAC,GAAD,CAAC,CAAc;YACL,MAAC,GAAD,CAAC,CAAwB;YAJjD,MAAC,GAAc,IAAI,gBAAG,EAA+C,CAAC;QAOvF,CAAC;QAED,2BAA2B,CAAC,WAAiD;YAC5E,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAY,IAAI,CAAC,WAAW,CAAC,CAAC;YAEnD,OAAO,IAAA,eAAG,EAAU,GAAG,EAAE,CAAC,MAAM,EAAE,CAAC,CAAC;QACrC,CAAC;QAED,KAAK,CAAC,WAAW,CAAC,KAAyB,EAAE,SAAwB,EAAE,QAAgD,EAAE,KAAwB;YAChJ,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAoB,QAAQ,CAAS,4BAA4B,CAAC,CAAC;YACzF,IAAI,OAAO,OAAO,KAAK,QAAQ,IAAI,OAAO,IAAI,CAAC,EAAE;gBAChD,OAAO,CAAC,WAAW;aACnB;YAED,uBAAuB;YACvB,KAAK,MAAM,WAAW,IAAI,IAAI,CAAC,CAAC,EAAa;gBAC5C,IAAI;oBACH,MAAM,WAAW,CAAC,WAAW,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;iBAC1E;gBAAC,OAAO,GAAG,EAAE;oBACb,IAAI,CAAC,CAAC,CAAU,IAAI,CAAC,GAAG,CAAC,CAAC;iBAC1B;aACD;QACF,CAAC;QAEQ,OAAO;YACf,IAAI,CAAC,CAAC,CAAY,KAAK,EAAE,CAAC;YAE1B,KAAK,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC;KACD,CAAA;IAtCY,kBAAG;kBAAH,GAAG;QAKb,WAAA,SAAG,CAAA;QACH,WAAA,mBAAG,CAAA;OANO,GAAG,CAsCf","file":"workingCopyFileOperationParticipant.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IDisposable, Disposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { IWorkingCopyFileOperationParticipant, SourceTargetPair, IFileOperationUndoRedoInfo } from 'vs/workbench/services/workingCopy/common/workingCopyFileService';\nimport { FileOperation } from 'vs/platform/files/common/files';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { LinkedList } from 'vs/base/common/linkedList';\n\nexport class WorkingCopyFileOperationParticipant extends Disposable {\n\n\tprivate readonly participants = new LinkedList<IWorkingCopyFileOperationParticipant>();\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService\n\t) {\n\t\tsuper();\n\t}\n\n\taddFileOperationParticipant(participant: IWorkingCopyFileOperationParticipant): IDisposable {\n\t\tconst remove = this.participants.push(participant);\n\n\t\treturn toDisposable(() => remove());\n\t}\n\n\tasync participate(files: SourceTargetPair[], operation: FileOperation, undoInfo: IFileOperationUndoRedoInfo | undefined, token: CancellationToken): Promise<void> {\n\t\tconst timeout = this.configurationService.getValue<number>('files.participants.timeout');\n\t\tif (typeof timeout !== 'number' || timeout <= 0) {\n\t\t\treturn; // disabled\n\t\t}\n\n\t\t// For each participant\n\t\tfor (const participant of this.participants) {\n\t\t\ttry {\n\t\t\t\tawait participant.participate(files, operation, undoInfo, timeout, token);\n\t\t\t} catch (err) {\n\t\t\t\tthis.logService.warn(err);\n\t\t\t}\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tthis.participants.clear();\n\n\t\tsuper.dispose();\n\t}\n}\n"]}