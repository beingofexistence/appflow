{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/services/workingCopy/common/resourceWorkingCopy.ts"],"names":[],"mappings":"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","file":"resourceWorkingCopy.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { timeout } from 'vs/base/common/async';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { FileChangesEvent, FileChangeType, IFileService } from 'vs/platform/files/common/files';\nimport { ISaveOptions, IRevertOptions } from 'vs/workbench/common/editor';\nimport { IWorkingCopy, IWorkingCopyBackup, IWorkingCopySaveEvent, WorkingCopyCapabilities } from 'vs/workbench/services/workingCopy/common/workingCopy';\n\n/**\n * A resource based `IWorkingCopy` is backed by a `URI` from a\n * known file system provider.\n */\nexport interface IResourceWorkingCopy extends IWorkingCopy, IDisposable {\n\n\t/**\n\t * An event for when the orphaned state of the resource working copy changes.\n\t */\n\treadonly onDidChangeOrphaned: Event<void>;\n\n\t/**\n\t * Whether the resource working copy is orphaned or not.\n\t */\n\tisOrphaned(): boolean;\n\n\t/**\n\t * An event for when the file working copy has been disposed.\n\t */\n\treadonly onWillDispose: Event<void>;\n\n\t/**\n\t * Whether the file working copy has been disposed or not.\n\t */\n\tisDisposed(): boolean;\n}\n\nexport abstract class ResourceWorkingCopy extends Disposable implements IResourceWorkingCopy {\n\n\tconstructor(\n\t\treadonly resource: URI,\n\t\t@IFileService protected readonly fileService: IFileService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(this.fileService.onDidFilesChange(e => this.onDidFilesChange(e)));\n\t}\n\n\t//#region Orphaned Tracking\n\n\tprivate readonly _onDidChangeOrphaned = this._register(new Emitter<void>());\n\treadonly onDidChangeOrphaned = this._onDidChangeOrphaned.event;\n\n\tprivate orphaned = false;\n\n\tisOrphaned(): boolean {\n\t\treturn this.orphaned;\n\t}\n\n\tprivate async onDidFilesChange(e: FileChangesEvent): Promise<void> {\n\t\tlet fileEventImpactsUs = false;\n\t\tlet newInOrphanModeGuess: boolean | undefined;\n\n\t\t// If we are currently orphaned, we check if the file was added back\n\t\tif (this.orphaned) {\n\t\t\tconst fileWorkingCopyResourceAdded = e.contains(this.resource, FileChangeType.ADDED);\n\t\t\tif (fileWorkingCopyResourceAdded) {\n\t\t\t\tnewInOrphanModeGuess = false;\n\t\t\t\tfileEventImpactsUs = true;\n\t\t\t}\n\t\t}\n\n\t\t// Otherwise we check if the file was deleted\n\t\telse {\n\t\t\tconst fileWorkingCopyResourceDeleted = e.contains(this.resource, FileChangeType.DELETED);\n\t\t\tif (fileWorkingCopyResourceDeleted) {\n\t\t\t\tnewInOrphanModeGuess = true;\n\t\t\t\tfileEventImpactsUs = true;\n\t\t\t}\n\t\t}\n\n\t\tif (fileEventImpactsUs && this.orphaned !== newInOrphanModeGuess) {\n\t\t\tlet newInOrphanModeValidated: boolean = false;\n\t\t\tif (newInOrphanModeGuess) {\n\n\t\t\t\t// We have received reports of users seeing delete events even though the file still\n\t\t\t\t// exists (network shares issue: https://github.com/microsoft/vscode/issues/13665).\n\t\t\t\t// Since we do not want to mark the working copy as orphaned, we have to check if the\n\t\t\t\t// file is really gone and not just a faulty file event.\n\t\t\t\tawait timeout(100, CancellationToken.None);\n\n\t\t\t\tif (this.isDisposed()) {\n\t\t\t\t\tnewInOrphanModeValidated = true;\n\t\t\t\t} else {\n\t\t\t\t\tconst exists = await this.fileService.exists(this.resource);\n\t\t\t\t\tnewInOrphanModeValidated = !exists;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (this.orphaned !== newInOrphanModeValidated && !this.isDisposed()) {\n\t\t\t\tthis.setOrphaned(newInOrphanModeValidated);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected setOrphaned(orphaned: boolean): void {\n\t\tif (this.orphaned !== orphaned) {\n\t\t\tthis.orphaned = orphaned;\n\n\t\t\tthis._onDidChangeOrphaned.fire();\n\t\t}\n\t}\n\n\t//#endregion\n\n\n\t//#region Dispose\n\n\tprivate readonly _onWillDispose = this._register(new Emitter<void>());\n\treadonly onWillDispose = this._onWillDispose.event;\n\n\tprivate disposed = false;\n\n\tisDisposed(): boolean {\n\t\treturn this.disposed;\n\t}\n\n\toverride dispose(): void {\n\n\t\t// State\n\t\tthis.disposed = true;\n\t\tthis.orphaned = false;\n\n\t\t// Event\n\t\tthis._onWillDispose.fire();\n\n\t\tsuper.dispose();\n\t}\n\n\t//#endregion\n\n\t//#region Modified Tracking\n\n\tisModified(): boolean {\n\t\treturn this.isDirty();\n\t}\n\n\t//#endregion\n\n\t//#region Abstract\n\n\tabstract typeId: string;\n\tabstract name: string;\n\tabstract capabilities: WorkingCopyCapabilities;\n\n\tabstract onDidChangeDirty: Event<void>;\n\tabstract onDidChangeContent: Event<void>;\n\tabstract onDidSave: Event<IWorkingCopySaveEvent>;\n\n\tabstract isDirty(): boolean;\n\n\tabstract backup(token: CancellationToken): Promise<IWorkingCopyBackup>;\n\tabstract save(options?: ISaveOptions): Promise<boolean>;\n\tabstract revert(options?: IRevertOptions): Promise<void>;\n\n\t//#endregion\n}\n"]}