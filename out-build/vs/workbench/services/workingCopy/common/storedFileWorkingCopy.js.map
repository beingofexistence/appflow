{"version":3,"sources":["vs/workbench/services/workingCopy/common/storedFileWorkingCopy.ts"],"names":[],"mappings":"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","file":"storedFileWorkingCopy.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { URI } from 'vs/base/common/uri';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { ETAG_DISABLED, FileOperationError, FileOperationResult, IFileService, IFileStatWithMetadata, IFileStreamContent, IWriteFileOptions, NotModifiedSinceFileOperationError } from 'vs/platform/files/common/files';\nimport { ISaveOptions, IRevertOptions, SaveReason } from 'vs/workbench/common/editor';\nimport { IWorkingCopyService } from 'vs/workbench/services/workingCopy/common/workingCopyService';\nimport { IWorkingCopyBackup, IWorkingCopyBackupMeta, IWorkingCopySaveEvent, WorkingCopyCapabilities } from 'vs/workbench/services/workingCopy/common/workingCopy';\nimport { raceCancellation, TaskSequentializer, timeout } from 'vs/base/common/async';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { assertIsDefined } from 'vs/base/common/types';\nimport { IWorkingCopyFileService } from 'vs/workbench/services/workingCopy/common/workingCopyFileService';\nimport { VSBufferReadableStream } from 'vs/base/common/buffer';\nimport { IFilesConfigurationService } from 'vs/workbench/services/filesConfiguration/common/filesConfigurationService';\nimport { IWorkingCopyBackupService, IResolvedWorkingCopyBackup } from 'vs/workbench/services/workingCopy/common/workingCopyBackup';\nimport { INotificationService, Severity } from 'vs/platform/notification/common/notification';\nimport { hash } from 'vs/base/common/hash';\nimport { isErrorWithActions, toErrorMessage } from 'vs/base/common/errorMessage';\nimport { IAction, toAction } from 'vs/base/common/actions';\nimport { isWindows } from 'vs/base/common/platform';\nimport { IWorkingCopyEditorService } from 'vs/workbench/services/workingCopy/common/workingCopyEditorService';\nimport { IEditorService } from 'vs/workbench/services/editor/common/editorService';\nimport { IElevatedFileService } from 'vs/workbench/services/files/common/elevatedFileService';\nimport { IResourceWorkingCopy, ResourceWorkingCopy } from 'vs/workbench/services/workingCopy/common/resourceWorkingCopy';\nimport { IFileWorkingCopy, IFileWorkingCopyModel, IFileWorkingCopyModelFactory } from 'vs/workbench/services/workingCopy/common/fileWorkingCopy';\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\n\n/**\n * Stored file specific working copy model factory.\n */\nexport interface IStoredFileWorkingCopyModelFactory<M extends IStoredFileWorkingCopyModel> extends IFileWorkingCopyModelFactory<M> { }\n\n/**\n * The underlying model of a stored file working copy provides some\n * methods for the stored file working copy to function. The model is\n * typically only available after the working copy has been\n * resolved via it's `resolve()` method.\n */\nexport interface IStoredFileWorkingCopyModel extends IFileWorkingCopyModel {\n\n\treadonly onDidChangeContent: Event<IStoredFileWorkingCopyModelContentChangedEvent>;\n\n\t/**\n\t * A version ID of the model. If a `onDidChangeContent` is fired\n\t * from the model and the last known saved `versionId` matches\n\t * with the `model.versionId`, the stored file working copy will\n\t * discard any dirty state.\n\t *\n\t * A use case is the following:\n\t * - a stored file working copy gets edited and thus dirty\n\t * - the user triggers undo to revert the changes\n\t * - at this point the `versionId` should match the one we had saved\n\t *\n\t * This requires the model to be aware of undo/redo operations.\n\t */\n\treadonly versionId: unknown;\n\n\t/**\n\t * Close the current undo-redo element. This offers a way\n\t * to create an undo/redo stop point.\n\t *\n\t * This method may for example be called right before the\n\t * save is triggered so that the user can always undo back\n\t * to the state before saving.\n\t */\n\tpushStackElement(): void;\n\n\t/**\n\t * Optionally allows a stored file working copy model to\n\t * implement the `save` method. This allows to implement\n\t * a more efficient save logic compared to the default\n\t * which is to ask the model for a `snapshot` and then\n\t * writing that to the model's resource.\n\t */\n\tsave?(options: IWriteFileOptions, token: CancellationToken): Promise<IFileStatWithMetadata>;\n}\n\nexport interface IStoredFileWorkingCopyModelContentChangedEvent {\n\n\t/**\n\t * Flag that indicates that this event was generated while undoing.\n\t */\n\treadonly isUndoing: boolean;\n\n\t/**\n\t * Flag that indicates that this event was generated while redoing.\n\t */\n\treadonly isRedoing: boolean;\n}\n\n/**\n * A stored file based `IWorkingCopy` is backed by a `URI` from a\n * known file system provider. Given this assumption, a lot\n * of functionality can be built on top, such as saving in\n * a secure way to prevent data loss.\n */\nexport interface IStoredFileWorkingCopy<M extends IStoredFileWorkingCopyModel> extends IResourceWorkingCopy, IFileWorkingCopy<M> {\n\n\t/**\n\t * An event for when a stored file working copy was resolved.\n\t */\n\treadonly onDidResolve: Event<void>;\n\n\t/**\n\t * An event for when a stored file working copy was saved successfully.\n\t */\n\treadonly onDidSave: Event<IStoredFileWorkingCopySaveEvent>;\n\n\t/**\n\t * An event indicating that a stored file working copy save operation failed.\n\t */\n\treadonly onDidSaveError: Event<void>;\n\n\t/**\n\t * An event for when the readonly state of the stored file working copy changes.\n\t */\n\treadonly onDidChangeReadonly: Event<void>;\n\n\t/**\n\t * Resolves a stored file working copy.\n\t */\n\tresolve(options?: IStoredFileWorkingCopyResolveOptions): Promise<void>;\n\n\t/**\n\t * Explicitly sets the working copy to be modified.\n\t */\n\tmarkModified(): void;\n\n\t/**\n\t * Whether the stored file working copy is in the provided `state`\n\t * or not.\n\t *\n\t * @param state the `FileWorkingCopyState` to check on.\n\t */\n\thasState(state: StoredFileWorkingCopyState): boolean;\n\n\t/**\n\t * Allows to join a state change away from the provided `state`.\n\t *\n\t * @param state currently only `FileWorkingCopyState.PENDING_SAVE`\n\t * can be awaited on to resolve.\n\t */\n\tjoinState(state: StoredFileWorkingCopyState.PENDING_SAVE): Promise<void>;\n\n\t/**\n\t * Whether we have a resolved model or not.\n\t */\n\tisResolved(): this is IResolvedStoredFileWorkingCopy<M>;\n\n\t/**\n\t * Whether the stored file working copy is readonly or not.\n\t */\n\tisReadonly(): boolean | IMarkdownString;\n}\n\nexport interface IResolvedStoredFileWorkingCopy<M extends IStoredFileWorkingCopyModel> extends IStoredFileWorkingCopy<M> {\n\n\t/**\n\t * A resolved stored file working copy has a resolved model.\n\t */\n\treadonly model: M;\n}\n\n/**\n * States the stored file working copy can be in.\n */\nexport const enum StoredFileWorkingCopyState {\n\n\t/**\n\t * A stored file working copy is saved.\n\t */\n\tSAVED,\n\n\t/**\n\t * A stored file working copy is dirty.\n\t */\n\tDIRTY,\n\n\t/**\n\t * A stored file working copy is currently being saved but\n\t * this operation has not completed yet.\n\t */\n\tPENDING_SAVE,\n\n\t/**\n\t * A stored file working copy is in conflict mode when changes\n\t * cannot be saved because the underlying file has changed.\n\t * Stored file working copies in conflict mode are always dirty.\n\t */\n\tCONFLICT,\n\n\t/**\n\t * A stored file working copy is in orphan state when the underlying\n\t * file has been deleted.\n\t */\n\tORPHAN,\n\n\t/**\n\t * Any error that happens during a save that is not causing\n\t * the `StoredFileWorkingCopyState.CONFLICT` state.\n\t * Stored file working copies in error mode are always dirty.\n\t */\n\tERROR\n}\n\nexport interface IStoredFileWorkingCopySaveOptions extends ISaveOptions {\n\n\t/**\n\t * Save the stored file working copy with an attempt to unlock it.\n\t */\n\treadonly writeUnlock?: boolean;\n\n\t/**\n\t * Save the stored file working copy with elevated privileges.\n\t *\n\t * Note: This may not be supported in all environments.\n\t */\n\treadonly writeElevated?: boolean;\n\n\t/**\n\t * Allows to write to a stored file working copy even if it has been\n\t * modified on disk. This should only be triggered from an\n\t * explicit user action.\n\t */\n\treadonly ignoreModifiedSince?: boolean;\n\n\t/**\n\t * If set, will bubble up the stored file working copy save error to\n\t * the caller instead of handling it.\n\t */\n\treadonly ignoreErrorHandler?: boolean;\n}\n\nexport interface IStoredFileWorkingCopyResolver {\n\n\t/**\n\t * Resolves the working copy in a safe way from an external\n\t * working copy manager that can make sure multiple parallel\n\t * resolves execute properly.\n\t */\n\t(options?: IStoredFileWorkingCopyResolveOptions): Promise<void>;\n}\n\nexport interface IStoredFileWorkingCopyResolveOptions {\n\n\t/**\n\t * The contents to use for the stored file working copy if known. If not\n\t * provided, the contents will be retrieved from the underlying\n\t * resource or backup if present.\n\t *\n\t * If contents are provided, the stored file working copy will be marked\n\t * as dirty right from the beginning.\n\t */\n\treadonly contents?: VSBufferReadableStream;\n\n\t/**\n\t * Go to disk bypassing any cache of the stored file working copy if any.\n\t */\n\treadonly forceReadFromFile?: boolean;\n}\n\n/**\n * Metadata associated with a stored file working copy backup.\n */\ninterface IStoredFileWorkingCopyBackupMetaData extends IWorkingCopyBackupMeta {\n\treadonly mtime: number;\n\treadonly ctime: number;\n\treadonly size: number;\n\treadonly etag: string;\n\treadonly orphaned: boolean;\n}\n\nexport interface IStoredFileWorkingCopySaveEvent extends IWorkingCopySaveEvent {\n\n\t/**\n\t * The resolved stat from the save operation.\n\t */\n\treadonly stat: IFileStatWithMetadata;\n}\n\nexport function isStoredFileWorkingCopySaveEvent(e: IWorkingCopySaveEvent): e is IStoredFileWorkingCopySaveEvent {\n\tconst candidate = e as IStoredFileWorkingCopySaveEvent;\n\n\treturn !!candidate.stat;\n}\n\nexport class StoredFileWorkingCopy<M extends IStoredFileWorkingCopyModel> extends ResourceWorkingCopy implements IStoredFileWorkingCopy<M>  {\n\n\treadonly capabilities: WorkingCopyCapabilities = WorkingCopyCapabilities.None;\n\n\tprivate _model: M | undefined = undefined;\n\tget model(): M | undefined { return this._model; }\n\n\t//#region events\n\n\tprivate readonly _onDidChangeContent = this._register(new Emitter<void>());\n\treadonly onDidChangeContent = this._onDidChangeContent.event;\n\n\tprivate readonly _onDidResolve = this._register(new Emitter<void>());\n\treadonly onDidResolve = this._onDidResolve.event;\n\n\tprivate readonly _onDidChangeDirty = this._register(new Emitter<void>());\n\treadonly onDidChangeDirty = this._onDidChangeDirty.event;\n\n\tprivate readonly _onDidSaveError = this._register(new Emitter<void>());\n\treadonly onDidSaveError = this._onDidSaveError.event;\n\n\tprivate readonly _onDidSave = this._register(new Emitter<IStoredFileWorkingCopySaveEvent>());\n\treadonly onDidSave = this._onDidSave.event;\n\n\tprivate readonly _onDidRevert = this._register(new Emitter<void>());\n\treadonly onDidRevert = this._onDidRevert.event;\n\n\tprivate readonly _onDidChangeReadonly = this._register(new Emitter<void>());\n\treadonly onDidChangeReadonly = this._onDidChangeReadonly.event;\n\n\t//#endregion\n\n\tconstructor(\n\t\treadonly typeId: string,\n\t\tresource: URI,\n\t\treadonly name: string,\n\t\tprivate readonly modelFactory: IStoredFileWorkingCopyModelFactory<M>,\n\t\tprivate readonly externalResolver: IStoredFileWorkingCopyResolver,\n\t\t@IFileService fileService: IFileService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IWorkingCopyFileService private readonly workingCopyFileService: IWorkingCopyFileService,\n\t\t@IFilesConfigurationService private readonly filesConfigurationService: IFilesConfigurationService,\n\t\t@IWorkingCopyBackupService private readonly workingCopyBackupService: IWorkingCopyBackupService,\n\t\t@IWorkingCopyService workingCopyService: IWorkingCopyService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IWorkingCopyEditorService private readonly workingCopyEditorService: IWorkingCopyEditorService,\n\t\t@IEditorService private readonly editorService: IEditorService,\n\t\t@IElevatedFileService private readonly elevatedFileService: IElevatedFileService\n\t) {\n\t\tsuper(resource, fileService);\n\n\t\t// Make known to working copy service\n\t\tthis._register(workingCopyService.registerWorkingCopy(this));\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.filesConfigurationService.onReadonlyChange(() => this._onDidChangeReadonly.fire()));\n\t}\n\n\t//#region Dirty\n\n\tprivate dirty = false;\n\tprivate savedVersionId: unknown;\n\n\tisDirty(): this is IResolvedStoredFileWorkingCopy<M> {\n\t\treturn this.dirty;\n\t}\n\n\tmarkModified(): void {\n\t\tthis.setDirty(true); // stored file working copy tracks modified via dirty\n\t}\n\n\tprivate setDirty(dirty: boolean): void {\n\t\tif (!this.isResolved()) {\n\t\t\treturn; // only resolved working copies can be marked dirty\n\t\t}\n\n\t\t// Track dirty state and version id\n\t\tconst wasDirty = this.dirty;\n\t\tthis.doSetDirty(dirty);\n\n\t\t// Emit as Event if dirty changed\n\t\tif (dirty !== wasDirty) {\n\t\t\tthis._onDidChangeDirty.fire();\n\t\t}\n\t}\n\n\tprivate doSetDirty(dirty: boolean): () => void {\n\t\tconst wasDirty = this.dirty;\n\t\tconst wasInConflictMode = this.inConflictMode;\n\t\tconst wasInErrorMode = this.inErrorMode;\n\t\tconst oldSavedVersionId = this.savedVersionId;\n\n\t\tif (!dirty) {\n\t\t\tthis.dirty = false;\n\t\t\tthis.inConflictMode = false;\n\t\t\tthis.inErrorMode = false;\n\n\t\t\t// we remember the models alternate version id to remember when the version\n\t\t\t// of the model matches with the saved version on disk. we need to keep this\n\t\t\t// in order to find out if the model changed back to a saved version (e.g.\n\t\t\t// when undoing long enough to reach to a version that is saved and then to\n\t\t\t// clear the dirty flag)\n\t\t\tif (this.isResolved()) {\n\t\t\t\tthis.savedVersionId = this.model.versionId;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.dirty = true;\n\t\t}\n\n\t\t// Return function to revert this call\n\t\treturn () => {\n\t\t\tthis.dirty = wasDirty;\n\t\t\tthis.inConflictMode = wasInConflictMode;\n\t\t\tthis.inErrorMode = wasInErrorMode;\n\t\t\tthis.savedVersionId = oldSavedVersionId;\n\t\t};\n\t}\n\n\t//#endregion\n\n\t//#region Resolve\n\n\tprivate lastResolvedFileStat: IFileStatWithMetadata | undefined;\n\n\tisResolved(): this is IResolvedStoredFileWorkingCopy<M> {\n\t\treturn !!this.model;\n\t}\n\n\tasync resolve(options?: IStoredFileWorkingCopyResolveOptions): Promise<void> {\n\t\tthis.trace('resolve() - enter');\n\n\t\t// Return early if we are disposed\n\t\tif (this.isDisposed()) {\n\t\t\tthis.trace('resolve() - exit - without resolving because file working copy is disposed');\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Unless there are explicit contents provided, it is important that we do not\n\t\t// resolve a working copy that is dirty or is in the process of saving to prevent\n\t\t// data loss.\n\t\tif (!options?.contents && (this.dirty || this.saveSequentializer.isRunning())) {\n\t\t\tthis.trace('resolve() - exit - without resolving because file working copy is dirty or being saved');\n\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.doResolve(options);\n\t}\n\n\tprivate async doResolve(options?: IStoredFileWorkingCopyResolveOptions): Promise<void> {\n\n\t\t// First check if we have contents to use for the working copy\n\t\tif (options?.contents) {\n\t\t\treturn this.resolveFromBuffer(options.contents);\n\t\t}\n\n\t\t// Second, check if we have a backup to resolve from (only for new working copies)\n\t\tconst isNew = !this.isResolved();\n\t\tif (isNew) {\n\t\t\tconst resolvedFromBackup = await this.resolveFromBackup();\n\t\t\tif (resolvedFromBackup) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\t// Finally, resolve from file resource\n\t\treturn this.resolveFromFile(options);\n\t}\n\n\tprivate async resolveFromBuffer(buffer: VSBufferReadableStream): Promise<void> {\n\t\tthis.trace('resolveFromBuffer()');\n\n\t\t// Try to resolve metdata from disk\n\t\tlet mtime: number;\n\t\tlet ctime: number;\n\t\tlet size: number;\n\t\tlet etag: string;\n\t\ttry {\n\t\t\tconst metadata = await this.fileService.stat(this.resource);\n\t\t\tmtime = metadata.mtime;\n\t\t\tctime = metadata.ctime;\n\t\t\tsize = metadata.size;\n\t\t\tetag = metadata.etag;\n\n\t\t\t// Clear orphaned state when resolving was successful\n\t\t\tthis.setOrphaned(false);\n\t\t} catch (error) {\n\n\t\t\t// Put some fallback values in error case\n\t\t\tmtime = Date.now();\n\t\t\tctime = Date.now();\n\t\t\tsize = 0;\n\t\t\tetag = ETAG_DISABLED;\n\n\t\t\t// Apply orphaned state based on error code\n\t\t\tthis.setOrphaned(error.fileOperationResult === FileOperationResult.FILE_NOT_FOUND);\n\t\t}\n\n\t\t// Resolve with buffer\n\t\treturn this.resolveFromContent({\n\t\t\tresource: this.resource,\n\t\t\tname: this.name,\n\t\t\tmtime,\n\t\t\tctime,\n\t\t\tsize,\n\t\t\tetag,\n\t\t\tvalue: buffer,\n\t\t\treadonly: false,\n\t\t\tlocked: false\n\t\t}, true /* dirty (resolved from buffer) */);\n\t}\n\n\tprivate async resolveFromBackup(): Promise<boolean> {\n\n\t\t// Resolve backup if any\n\t\tconst backup = await this.workingCopyBackupService.resolve<IStoredFileWorkingCopyBackupMetaData>(this);\n\n\t\t// Abort if someone else managed to resolve the working copy by now\n\t\tconst isNew = !this.isResolved();\n\t\tif (!isNew) {\n\t\t\tthis.trace('resolveFromBackup() - exit - withoutresolving because previously new file working copy got created meanwhile');\n\n\t\t\treturn true; // imply that resolving has happened in another operation\n\t\t}\n\n\t\t// Try to resolve from backup if we have any\n\t\tif (backup) {\n\t\t\tawait this.doResolveFromBackup(backup);\n\n\t\t\treturn true;\n\t\t}\n\n\t\t// Otherwise signal back that resolving did not happen\n\t\treturn false;\n\t}\n\n\tprivate async doResolveFromBackup(backup: IResolvedWorkingCopyBackup<IStoredFileWorkingCopyBackupMetaData>): Promise<void> {\n\t\tthis.trace('doResolveFromBackup()');\n\n\t\t// Resolve with backup\n\t\tawait this.resolveFromContent({\n\t\t\tresource: this.resource,\n\t\t\tname: this.name,\n\t\t\tmtime: backup.meta ? backup.meta.mtime : Date.now(),\n\t\t\tctime: backup.meta ? backup.meta.ctime : Date.now(),\n\t\t\tsize: backup.meta ? backup.meta.size : 0,\n\t\t\tetag: backup.meta ? backup.meta.etag : ETAG_DISABLED, // etag disabled if unknown!\n\t\t\tvalue: backup.value,\n\t\t\treadonly: false,\n\t\t\tlocked: false\n\t\t}, true /* dirty (resolved from backup) */);\n\n\t\t// Restore orphaned flag based on state\n\t\tif (backup.meta && backup.meta.orphaned) {\n\t\t\tthis.setOrphaned(true);\n\t\t}\n\t}\n\n\tprivate async resolveFromFile(options?: IStoredFileWorkingCopyResolveOptions): Promise<void> {\n\t\tthis.trace('resolveFromFile()');\n\n\t\tconst forceReadFromFile = options?.forceReadFromFile;\n\n\t\t// Decide on etag\n\t\tlet etag: string | undefined;\n\t\tif (forceReadFromFile) {\n\t\t\tetag = ETAG_DISABLED; // disable ETag if we enforce to read from disk\n\t\t} else if (this.lastResolvedFileStat) {\n\t\t\tetag = this.lastResolvedFileStat.etag; // otherwise respect etag to support caching\n\t\t}\n\n\t\t// Remember current version before doing any long running operation\n\t\t// to ensure we are not changing a working copy that was changed\n\t\t// meanwhile\n\t\tconst currentVersionId = this.versionId;\n\n\t\t// Resolve Content\n\t\ttry {\n\t\t\tconst content = await this.fileService.readFileStream(this.resource, { etag });\n\n\t\t\t// Clear orphaned state when resolving was successful\n\t\t\tthis.setOrphaned(false);\n\n\t\t\t// Return early if the working copy content has changed\n\t\t\t// meanwhile to prevent loosing any changes\n\t\t\tif (currentVersionId !== this.versionId) {\n\t\t\t\tthis.trace('resolveFromFile() - exit - without resolving because file working copy content changed');\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tawait this.resolveFromContent(content, false /* not dirty (resolved from file) */);\n\t\t} catch (error) {\n\t\t\tconst result = error.fileOperationResult;\n\n\t\t\t// Apply orphaned state based on error code\n\t\t\tthis.setOrphaned(result === FileOperationResult.FILE_NOT_FOUND);\n\n\t\t\t// NotModified status is expected and can be handled gracefully\n\t\t\t// if we are resolved. We still want to update our last resolved\n\t\t\t// stat to e.g. detect changes to the file's readonly state\n\t\t\tif (this.isResolved() && result === FileOperationResult.FILE_NOT_MODIFIED_SINCE) {\n\t\t\t\tif (error instanceof NotModifiedSinceFileOperationError) {\n\t\t\t\t\tthis.updateLastResolvedFileStat(error.stat);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Unless we are forced to read from the file, ignore when a working copy has\n\t\t\t// been resolved once and the file was deleted meanwhile. Since we already have\n\t\t\t// the working copy resolved, we can return to this state and update the orphaned\n\t\t\t// flag to indicate that this working copy has no version on disk anymore.\n\t\t\tif (this.isResolved() && result === FileOperationResult.FILE_NOT_FOUND && !forceReadFromFile) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Otherwise bubble up the error\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async resolveFromContent(content: IFileStreamContent, dirty: boolean): Promise<void> {\n\t\tthis.trace('resolveFromContent() - enter');\n\n\t\t// Return early if we are disposed\n\t\tif (this.isDisposed()) {\n\t\t\tthis.trace('resolveFromContent() - exit - because working copy is disposed');\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Update our resolved disk stat\n\t\tthis.updateLastResolvedFileStat({\n\t\t\tresource: this.resource,\n\t\t\tname: content.name,\n\t\t\tmtime: content.mtime,\n\t\t\tctime: content.ctime,\n\t\t\tsize: content.size,\n\t\t\tetag: content.etag,\n\t\t\treadonly: content.readonly,\n\t\t\tlocked: content.locked,\n\t\t\tisFile: true,\n\t\t\tisDirectory: false,\n\t\t\tisSymbolicLink: false,\n\t\t\tchildren: undefined\n\t\t});\n\n\t\t// Update existing model if we had been resolved\n\t\tif (this.isResolved()) {\n\t\t\tawait this.doUpdateModel(content.value);\n\t\t}\n\n\t\t// Create new model otherwise\n\t\telse {\n\t\t\tawait this.doCreateModel(content.value);\n\t\t}\n\n\t\t// Update working copy dirty flag. This is very important to call\n\t\t// in both cases of dirty or not because it conditionally updates\n\t\t// the `savedVersionId` to determine the version when to consider\n\t\t// the working copy as saved again (e.g. when undoing back to the\n\t\t// saved state)\n\t\tthis.setDirty(!!dirty);\n\n\t\t// Emit as event\n\t\tthis._onDidResolve.fire();\n\t}\n\n\tprivate async doCreateModel(contents: VSBufferReadableStream): Promise<void> {\n\t\tthis.trace('doCreateModel()');\n\n\t\t// Create model and dispose it when we get disposed\n\t\tthis._model = this._register(await this.modelFactory.createModel(this.resource, contents, CancellationToken.None));\n\n\t\t// Model listeners\n\t\tthis.installModelListeners(this._model);\n\t}\n\n\tprivate ignoreDirtyOnModelContentChange = false;\n\n\tprivate async doUpdateModel(contents: VSBufferReadableStream): Promise<void> {\n\t\tthis.trace('doUpdateModel()');\n\n\t\t// Update model value in a block that ignores content change events for dirty tracking\n\t\tthis.ignoreDirtyOnModelContentChange = true;\n\t\ttry {\n\t\t\tawait this.model?.update(contents, CancellationToken.None);\n\t\t} finally {\n\t\t\tthis.ignoreDirtyOnModelContentChange = false;\n\t\t}\n\t}\n\n\tprivate installModelListeners(model: M): void {\n\n\t\t// See https://github.com/microsoft/vscode/issues/30189\n\t\t// This code has been extracted to a different method because it caused a memory leak\n\t\t// where `value` was captured in the content change listener closure scope.\n\n\t\t// Content Change\n\t\tthis._register(model.onDidChangeContent(e => this.onModelContentChanged(model, e.isUndoing || e.isRedoing)));\n\n\t\t// Lifecycle\n\t\tthis._register(model.onWillDispose(() => this.dispose()));\n\t}\n\n\tprivate onModelContentChanged(model: M, isUndoingOrRedoing: boolean): void {\n\t\tthis.trace(`onModelContentChanged() - enter`);\n\n\t\t// In any case increment the version id because it tracks the content state of the model at all times\n\t\tthis.versionId++;\n\t\tthis.trace(`onModelContentChanged() - new versionId ${this.versionId}`);\n\n\t\t// Remember when the user changed the model through a undo/redo operation.\n\t\t// We need this information to throttle save participants to fix\n\t\t// https://github.com/microsoft/vscode/issues/102542\n\t\tif (isUndoingOrRedoing) {\n\t\t\tthis.lastContentChangeFromUndoRedo = Date.now();\n\t\t}\n\n\t\t// We mark check for a dirty-state change upon model content change, unless:\n\t\t// - explicitly instructed to ignore it (e.g. from model.resolve())\n\t\t// - the model is readonly (in that case we never assume the change was done by the user)\n\t\tif (!this.ignoreDirtyOnModelContentChange && !this.isReadonly()) {\n\n\t\t\t// The contents changed as a matter of Undo and the version reached matches the saved one\n\t\t\t// In this case we clear the dirty flag and emit a SAVED event to indicate this state.\n\t\t\tif (model.versionId === this.savedVersionId) {\n\t\t\t\tthis.trace('onModelContentChanged() - model content changed back to last saved version');\n\n\t\t\t\t// Clear flags\n\t\t\t\tconst wasDirty = this.dirty;\n\t\t\t\tthis.setDirty(false);\n\n\t\t\t\t// Emit revert event if we were dirty\n\t\t\t\tif (wasDirty) {\n\t\t\t\t\tthis._onDidRevert.fire();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Otherwise the content has changed and we signal this as becoming dirty\n\t\t\telse {\n\t\t\t\tthis.trace('onModelContentChanged() - model content changed and marked as dirty');\n\n\t\t\t\t// Mark as dirty\n\t\t\t\tthis.setDirty(true);\n\t\t\t}\n\t\t}\n\n\t\t// Emit as event\n\t\tthis._onDidChangeContent.fire();\n\t}\n\n\tprivate async forceResolveFromFile(): Promise<void> {\n\t\tif (this.isDisposed()) {\n\t\t\treturn; // return early when the working copy is invalid\n\t\t}\n\n\t\t// We go through the resolver to make\n\t\t// sure this kind of `resolve` is properly\n\t\t// running in sequence with any other running\n\t\t// `resolve` if any, including subsequent runs\n\t\t// that are triggered right after.\n\n\t\tawait this.externalResolver({\n\t\t\tforceReadFromFile: true\n\t\t});\n\t}\n\n\t//#endregion\n\n\t//#region Backup\n\n\tget backupDelay(): number | undefined {\n\t\treturn this.model?.configuration?.backupDelay;\n\t}\n\n\tasync backup(token: CancellationToken): Promise<IWorkingCopyBackup> {\n\n\t\t// Fill in metadata if we are resolved\n\t\tlet meta: IStoredFileWorkingCopyBackupMetaData | undefined = undefined;\n\t\tif (this.lastResolvedFileStat) {\n\t\t\tmeta = {\n\t\t\t\tmtime: this.lastResolvedFileStat.mtime,\n\t\t\t\tctime: this.lastResolvedFileStat.ctime,\n\t\t\t\tsize: this.lastResolvedFileStat.size,\n\t\t\t\tetag: this.lastResolvedFileStat.etag,\n\t\t\t\torphaned: this.isOrphaned()\n\t\t\t};\n\t\t}\n\n\t\t// Fill in content if we are resolved\n\t\tlet content: VSBufferReadableStream | undefined = undefined;\n\t\tif (this.isResolved()) {\n\t\t\tcontent = await raceCancellation(this.model.snapshot(token), token);\n\t\t}\n\n\t\treturn { meta, content };\n\t}\n\n\t//#endregion\n\n\t//#region Save\n\n\tprivate versionId = 0;\n\n\tprivate static readonly UNDO_REDO_SAVE_PARTICIPANTS_AUTO_SAVE_THROTTLE_THRESHOLD = 500;\n\tprivate lastContentChangeFromUndoRedo: number | undefined = undefined;\n\n\tprivate readonly saveSequentializer = new TaskSequentializer();\n\n\tprivate ignoreSaveFromSaveParticipants = false;\n\n\tasync save(options: IStoredFileWorkingCopySaveOptions = Object.create(null)): Promise<boolean> {\n\t\tif (!this.isResolved()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.isReadonly()) {\n\t\t\tthis.trace('save() - ignoring request for readonly resource');\n\n\t\t\treturn false; // if working copy is readonly we do not attempt to save at all\n\t\t}\n\n\t\tif (\n\t\t\t(this.hasState(StoredFileWorkingCopyState.CONFLICT) || this.hasState(StoredFileWorkingCopyState.ERROR)) &&\n\t\t\t(options.reason === SaveReason.AUTO || options.reason === SaveReason.FOCUS_CHANGE || options.reason === SaveReason.WINDOW_CHANGE)\n\t\t) {\n\t\t\tthis.trace('save() - ignoring auto save request for file working copy that is in conflict or error');\n\n\t\t\treturn false; // if working copy is in save conflict or error, do not save unless save reason is explicit\n\t\t}\n\n\t\t// Actually do save\n\t\tthis.trace('save() - enter');\n\t\tawait this.doSave(options);\n\t\tthis.trace('save() - exit');\n\n\t\treturn this.hasState(StoredFileWorkingCopyState.SAVED);\n\t}\n\n\tprivate async doSave(options: IStoredFileWorkingCopySaveOptions): Promise<void> {\n\t\tif (typeof options.reason !== 'number') {\n\t\t\toptions.reason = SaveReason.EXPLICIT;\n\t\t}\n\n\t\tlet versionId = this.versionId;\n\t\tthis.trace(`doSave(${versionId}) - enter with versionId ${versionId}`);\n\n\t\t// Return early if saved from within save participant to break recursion\n\t\t//\n\t\t// Scenario: a save participant triggers a save() on the working copy\n\t\tif (this.ignoreSaveFromSaveParticipants) {\n\t\t\tthis.trace(`doSave(${versionId}) - exit - refusing to save() recursively from save participant`);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Lookup any running save for this versionId and return it if found\n\t\t//\n\t\t// Scenario: user invoked the save action multiple times quickly for the same contents\n\t\t//           while the save was not yet finished to disk\n\t\t//\n\t\tif (this.saveSequentializer.isRunning(versionId)) {\n\t\t\tthis.trace(`doSave(${versionId}) - exit - found a running save for versionId ${versionId}`);\n\n\t\t\treturn this.saveSequentializer.running;\n\t\t}\n\n\t\t// Return early if not dirty (unless forced)\n\t\t//\n\t\t// Scenario: user invoked save action even though the working copy is not dirty\n\t\tif (!options.force && !this.dirty) {\n\t\t\tthis.trace(`doSave(${versionId}) - exit - because not dirty and/or versionId is different (this.isDirty: ${this.dirty}, this.versionId: ${this.versionId})`);\n\n\t\t\treturn;\n\t\t}\n\n\t\t// Return if currently saving by storing this save request as the next save that should happen.\n\t\t// Never ever must 2 saves execute at the same time because this can lead to dirty writes and race conditions.\n\t\t//\n\t\t// Scenario A: auto save was triggered and is currently busy saving to disk. this takes long enough that another auto save\n\t\t//             kicks in.\n\t\t// Scenario B: save is very slow (e.g. network share) and the user manages to change the working copy and trigger another save\n\t\t//             while the first save has not returned yet.\n\t\t//\n\t\tif (this.saveSequentializer.isRunning()) {\n\t\t\tthis.trace(`doSave(${versionId}) - exit - because busy saving`);\n\n\t\t\t// Indicate to the save sequentializer that we want to\n\t\t\t// cancel the running operation so that ours can run\n\t\t\t// before the running one finishes.\n\t\t\t// Currently this will try to cancel running save\n\t\t\t// participants and running snapshots from the\n\t\t\t// save operation, but not the actual save which does\n\t\t\t// not support cancellation yet.\n\t\t\tthis.saveSequentializer.cancelRunning();\n\n\t\t\t// Queue this as the upcoming save and return\n\t\t\treturn this.saveSequentializer.queue(() => this.doSave(options));\n\t\t}\n\n\t\t// Push all edit operations to the undo stack so that the user has a chance to\n\t\t// Ctrl+Z back to the saved version.\n\t\tif (this.isResolved()) {\n\t\t\tthis.model.pushStackElement();\n\t\t}\n\n\t\tconst saveCancellation = new CancellationTokenSource();\n\n\t\treturn this.saveSequentializer.run(versionId, (async () => {\n\n\t\t\t// A save participant can still change the working copy now\n\t\t\t// and since we are so close to saving we do not want to trigger\n\t\t\t// another auto save or similar, so we block this\n\t\t\t// In addition we update our version right after in case it changed\n\t\t\t// because of a working copy change\n\t\t\t// Save participants can also be skipped through API.\n\t\t\tif (this.isResolved() && !options.skipSaveParticipants && this.workingCopyFileService.hasSaveParticipants) {\n\t\t\t\ttry {\n\n\t\t\t\t\t// Measure the time it took from the last undo/redo operation to this save. If this\n\t\t\t\t\t// time is below `UNDO_REDO_SAVE_PARTICIPANTS_THROTTLE_THRESHOLD`, we make sure to\n\t\t\t\t\t// delay the save participant for the remaining time if the reason is auto save.\n\t\t\t\t\t//\n\t\t\t\t\t// This fixes the following issue:\n\t\t\t\t\t// - the user has configured auto save with delay of 100ms or shorter\n\t\t\t\t\t// - the user has a save participant enabled that modifies the file on each save\n\t\t\t\t\t// - the user types into the file and the file gets saved\n\t\t\t\t\t// - the user triggers undo operation\n\t\t\t\t\t// - this will undo the save participant change but trigger the save participant right after\n\t\t\t\t\t// - the user has no chance to undo over the save participant\n\t\t\t\t\t//\n\t\t\t\t\t// Reported as: https://github.com/microsoft/vscode/issues/102542\n\t\t\t\t\tif (options.reason === SaveReason.AUTO && typeof this.lastContentChangeFromUndoRedo === 'number') {\n\t\t\t\t\t\tconst timeFromUndoRedoToSave = Date.now() - this.lastContentChangeFromUndoRedo;\n\t\t\t\t\t\tif (timeFromUndoRedoToSave < StoredFileWorkingCopy.UNDO_REDO_SAVE_PARTICIPANTS_AUTO_SAVE_THROTTLE_THRESHOLD) {\n\t\t\t\t\t\t\tawait timeout(StoredFileWorkingCopy.UNDO_REDO_SAVE_PARTICIPANTS_AUTO_SAVE_THROTTLE_THRESHOLD - timeFromUndoRedoToSave);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Run save participants unless save was cancelled meanwhile\n\t\t\t\t\tif (!saveCancellation.token.isCancellationRequested) {\n\t\t\t\t\t\tthis.ignoreSaveFromSaveParticipants = true;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait this.workingCopyFileService.runSaveParticipants(this, { reason: options.reason ?? SaveReason.EXPLICIT }, saveCancellation.token);\n\t\t\t\t\t\t} finally {\n\t\t\t\t\t\t\tthis.ignoreSaveFromSaveParticipants = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.error(`[stored file working copy] runSaveParticipants(${versionId}) - resulted in an error: ${error.toString()}`, this.resource.toString(), this.typeId);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// It is possible that a subsequent save is cancelling this\n\t\t\t// running save. As such we return early when we detect that.\n\t\t\tif (saveCancellation.token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// We have to protect against being disposed at this point. It could be that the save() operation\n\t\t\t// was triggerd followed by a dispose() operation right after without waiting. Typically we cannot\n\t\t\t// be disposed if we are dirty, but if we are not dirty, save() and dispose() can still be triggered\n\t\t\t// one after the other without waiting for the save() to complete. If we are disposed(), we risk\n\t\t\t// saving contents to disk that are stale (see https://github.com/microsoft/vscode/issues/50942).\n\t\t\t// To fix this issue, we will not store the contents to disk when we got disposed.\n\t\t\tif (this.isDisposed()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// We require a resolved working copy from this point on, since we are about to write data to disk.\n\t\t\tif (!this.isResolved()) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// update versionId with its new value (if pre-save changes happened)\n\t\t\tversionId = this.versionId;\n\n\t\t\t// Clear error flag since we are trying to save again\n\t\t\tthis.inErrorMode = false;\n\n\t\t\t// Save to Disk. We mark the save operation as currently running with\n\t\t\t// the latest versionId because it might have changed from a save\n\t\t\t// participant triggering\n\t\t\tthis.trace(`doSave(${versionId}) - before write()`);\n\t\t\tconst lastResolvedFileStat = assertIsDefined(this.lastResolvedFileStat);\n\t\t\tconst resolvedFileWorkingCopy = this;\n\t\t\treturn this.saveSequentializer.run(versionId, (async () => {\n\t\t\t\ttry {\n\t\t\t\t\tconst writeFileOptions: IWriteFileOptions = {\n\t\t\t\t\t\tmtime: lastResolvedFileStat.mtime,\n\t\t\t\t\t\tetag: (options.ignoreModifiedSince || !this.filesConfigurationService.preventSaveConflicts(lastResolvedFileStat.resource)) ? ETAG_DISABLED : lastResolvedFileStat.etag,\n\t\t\t\t\t\tunlock: options.writeUnlock\n\t\t\t\t\t};\n\n\t\t\t\t\tlet stat: IFileStatWithMetadata;\n\n\t\t\t\t\t// Delegate to working copy model save method if any\n\t\t\t\t\tif (typeof resolvedFileWorkingCopy.model.save === 'function') {\n\t\t\t\t\t\tstat = await resolvedFileWorkingCopy.model.save(writeFileOptions, saveCancellation.token);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Otherwise ask for a snapshot and save via file services\n\t\t\t\t\telse {\n\n\t\t\t\t\t\t// Snapshot working copy model contents\n\t\t\t\t\t\tconst snapshot = await raceCancellation(resolvedFileWorkingCopy.model.snapshot(saveCancellation.token), saveCancellation.token);\n\n\t\t\t\t\t\t// It is possible that a subsequent save is cancelling this\n\t\t\t\t\t\t// running save. As such we return early when we detect that\n\t\t\t\t\t\t// However, we do not pass the token into the file service\n\t\t\t\t\t\t// because that is an atomic operation currently without\n\t\t\t\t\t\t// cancellation support, so we dispose the cancellation if\n\t\t\t\t\t\t// it was not cancelled yet.\n\t\t\t\t\t\tif (saveCancellation.token.isCancellationRequested) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsaveCancellation.dispose();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Write them to disk\n\t\t\t\t\t\tif (options?.writeElevated && this.elevatedFileService.isSupported(lastResolvedFileStat.resource)) {\n\t\t\t\t\t\t\tstat = await this.elevatedFileService.writeFileElevated(lastResolvedFileStat.resource, assertIsDefined(snapshot), writeFileOptions);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstat = await this.fileService.writeFile(lastResolvedFileStat.resource, assertIsDefined(snapshot), writeFileOptions);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.handleSaveSuccess(stat, versionId, options);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.handleSaveError(error, versionId, options);\n\t\t\t\t}\n\t\t\t})(), () => saveCancellation.cancel());\n\t\t})(), () => saveCancellation.cancel());\n\t}\n\n\tprivate handleSaveSuccess(stat: IFileStatWithMetadata, versionId: number, options: IStoredFileWorkingCopySaveOptions): void {\n\n\t\t// Updated resolved stat with updated stat\n\t\tthis.updateLastResolvedFileStat(stat);\n\n\t\t// Update dirty state unless working copy has changed meanwhile\n\t\tif (versionId === this.versionId) {\n\t\t\tthis.trace(`handleSaveSuccess(${versionId}) - setting dirty to false because versionId did not change`);\n\t\t\tthis.setDirty(false);\n\t\t} else {\n\t\t\tthis.trace(`handleSaveSuccess(${versionId}) - not setting dirty to false because versionId did change meanwhile`);\n\t\t}\n\n\t\t// Update orphan state given save was successful\n\t\tthis.setOrphaned(false);\n\n\t\t// Emit Save Event\n\t\tthis._onDidSave.fire({ reason: options.reason, stat, source: options.source });\n\t}\n\n\tprivate handleSaveError(error: Error, versionId: number, options: IStoredFileWorkingCopySaveOptions): void {\n\t\t(options.ignoreErrorHandler ? this.logService.trace : this.logService.error).apply(this.logService, [`[stored file working copy] handleSaveError(${versionId}) - exit - resulted in a save error: ${error.toString()}`, this.resource.toString(), this.typeId]);\n\n\t\t// Return early if the save() call was made asking to\n\t\t// handle the save error itself.\n\t\tif (options.ignoreErrorHandler) {\n\t\t\tthrow error;\n\t\t}\n\n\t\t// In any case of an error, we mark the working copy as dirty to prevent data loss\n\t\t// It could be possible that the write corrupted the file on disk (e.g. when\n\t\t// an error happened after truncating the file) and as such we want to preserve\n\t\t// the working copy contents to prevent data loss.\n\t\tthis.setDirty(true);\n\n\t\t// Flag as error state\n\t\tthis.inErrorMode = true;\n\n\t\t// Look out for a save conflict\n\t\tif ((error as FileOperationError).fileOperationResult === FileOperationResult.FILE_MODIFIED_SINCE) {\n\t\t\tthis.inConflictMode = true;\n\t\t}\n\n\t\t// Show save error to user for handling\n\t\tthis.doHandleSaveError(error);\n\n\t\t// Emit as event\n\t\tthis._onDidSaveError.fire();\n\t}\n\n\tprivate doHandleSaveError(error: Error): void {\n\t\tconst fileOperationError = error as FileOperationError;\n\t\tconst primaryActions: IAction[] = [];\n\n\t\tlet message: string;\n\n\t\t// Dirty write prevention\n\t\tif (fileOperationError.fileOperationResult === FileOperationResult.FILE_MODIFIED_SINCE) {\n\t\t\tmessage = localize('staleSaveError', \"Failed to save '{0}': The content of the file is newer. Do you want to overwrite the file with your changes?\", this.name);\n\n\t\t\tprimaryActions.push(toAction({ id: 'fileWorkingCopy.overwrite', label: localize('overwrite', \"Overwrite\"), run: () => this.save({ ignoreModifiedSince: true }) }));\n\t\t\tprimaryActions.push(toAction({ id: 'fileWorkingCopy.revert', label: localize('discard', \"Discard\"), run: () => this.revert() }));\n\t\t}\n\n\t\t// Any other save error\n\t\telse {\n\t\t\tconst isWriteLocked = fileOperationError.fileOperationResult === FileOperationResult.FILE_WRITE_LOCKED;\n\t\t\tconst triedToUnlock = isWriteLocked && (fileOperationError.options as IWriteFileOptions | undefined)?.unlock;\n\t\t\tconst isPermissionDenied = fileOperationError.fileOperationResult === FileOperationResult.FILE_PERMISSION_DENIED;\n\t\t\tconst canSaveElevated = this.elevatedFileService.isSupported(this.resource);\n\n\t\t\t// Error with Actions\n\t\t\tif (isErrorWithActions(error)) {\n\t\t\t\tprimaryActions.push(...error.actions);\n\t\t\t}\n\n\t\t\t// Save Elevated\n\t\t\tif (canSaveElevated && (isPermissionDenied || triedToUnlock)) {\n\t\t\t\tprimaryActions.push(toAction({\n\t\t\t\t\tid: 'fileWorkingCopy.saveElevated',\n\t\t\t\t\tlabel: triedToUnlock ?\n\t\t\t\t\t\tisWindows ? localize('overwriteElevated', \"Overwrite as Admin...\") : localize('overwriteElevatedSudo', \"Overwrite as Sudo...\") :\n\t\t\t\t\t\tisWindows ? localize('saveElevated', \"Retry as Admin...\") : localize('saveElevatedSudo', \"Retry as Sudo...\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\tthis.save({ writeElevated: true, writeUnlock: triedToUnlock, reason: SaveReason.EXPLICIT });\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\t// Unlock\n\t\t\telse if (isWriteLocked) {\n\t\t\t\tprimaryActions.push(toAction({ id: 'fileWorkingCopy.unlock', label: localize('overwrite', \"Overwrite\"), run: () => this.save({ writeUnlock: true, reason: SaveReason.EXPLICIT }) }));\n\t\t\t}\n\n\t\t\t// Retry\n\t\t\telse {\n\t\t\t\tprimaryActions.push(toAction({ id: 'fileWorkingCopy.retry', label: localize('retry', \"Retry\"), run: () => this.save({ reason: SaveReason.EXPLICIT }) }));\n\t\t\t}\n\n\t\t\t// Save As\n\t\t\tprimaryActions.push(toAction({\n\t\t\t\tid: 'fileWorkingCopy.saveAs',\n\t\t\t\tlabel: localize('saveAs', \"Save As...\"),\n\t\t\t\trun: async () => {\n\t\t\t\t\tconst editor = this.workingCopyEditorService.findEditor(this);\n\t\t\t\t\tif (editor) {\n\t\t\t\t\t\tconst result = await this.editorService.save(editor, { saveAs: true, reason: SaveReason.EXPLICIT });\n\t\t\t\t\t\tif (!result.success) {\n\t\t\t\t\t\t\tthis.doHandleSaveError(error); // show error again given the operation failed\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\t// Discard\n\t\t\tprimaryActions.push(toAction({ id: 'fileWorkingCopy.revert', label: localize('discard', \"Discard\"), run: () => this.revert() }));\n\n\t\t\t// Message\n\t\t\tif (isWriteLocked) {\n\t\t\t\tif (triedToUnlock && canSaveElevated) {\n\t\t\t\t\tmessage = isWindows ?\n\t\t\t\t\t\tlocalize('readonlySaveErrorAdmin', \"Failed to save '{0}': File is read-only. Select 'Overwrite as Admin' to retry as administrator.\", this.name) :\n\t\t\t\t\t\tlocalize('readonlySaveErrorSudo', \"Failed to save '{0}': File is read-only. Select 'Overwrite as Sudo' to retry as superuser.\", this.name);\n\t\t\t\t} else {\n\t\t\t\t\tmessage = localize('readonlySaveError', \"Failed to save '{0}': File is read-only. Select 'Overwrite' to attempt to make it writeable.\", this.name);\n\t\t\t\t}\n\t\t\t} else if (canSaveElevated && isPermissionDenied) {\n\t\t\t\tmessage = isWindows ?\n\t\t\t\t\tlocalize('permissionDeniedSaveError', \"Failed to save '{0}': Insufficient permissions. Select 'Retry as Admin' to retry as administrator.\", this.name) :\n\t\t\t\t\tlocalize('permissionDeniedSaveErrorSudo', \"Failed to save '{0}': Insufficient permissions. Select 'Retry as Sudo' to retry as superuser.\", this.name);\n\t\t\t} else {\n\t\t\t\tmessage = localize({ key: 'genericSaveError', comment: ['{0} is the resource that failed to save and {1} the error message'] }, \"Failed to save '{0}': {1}\", this.name, toErrorMessage(error, false));\n\t\t\t}\n\t\t}\n\n\t\t// Show to the user as notification\n\t\tconst handle = this.notificationService.notify({ id: `${hash(this.resource.toString())}`, severity: Severity.Error, message, actions: { primary: primaryActions } });\n\n\t\t// Remove automatically when we get saved/reverted\n\t\tconst listener = this._register(Event.once(Event.any(this.onDidSave, this.onDidRevert))(() => handle.close()));\n\t\tthis._register(Event.once(handle.onDidClose)(() => listener.dispose()));\n\t}\n\n\tprivate updateLastResolvedFileStat(newFileStat: IFileStatWithMetadata): void {\n\t\tconst oldReadonly = this.isReadonly();\n\n\t\t// First resolve - just take\n\t\tif (!this.lastResolvedFileStat) {\n\t\t\tthis.lastResolvedFileStat = newFileStat;\n\t\t}\n\n\t\t// Subsequent resolve - make sure that we only assign it if the mtime\n\t\t// is equal or has advanced.\n\t\t// This prevents race conditions from resolving and saving. If a save\n\t\t// comes in late after a revert was called, the mtime could be out of\n\t\t// sync.\n\t\telse if (this.lastResolvedFileStat.mtime <= newFileStat.mtime) {\n\t\t\tthis.lastResolvedFileStat = newFileStat;\n\t\t}\n\n\t\t// Signal that the readonly state changed\n\t\tif (this.isReadonly() !== oldReadonly) {\n\t\t\tthis._onDidChangeReadonly.fire();\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region Revert\n\n\tasync revert(options?: IRevertOptions): Promise<void> {\n\t\tif (!this.isResolved() || (!this.dirty && !options?.force)) {\n\t\t\treturn; // ignore if not resolved or not dirty and not enforced\n\t\t}\n\n\t\tthis.trace('revert()');\n\n\t\t// Unset flags\n\t\tconst wasDirty = this.dirty;\n\t\tconst undoSetDirty = this.doSetDirty(false);\n\n\t\t// Force read from disk unless reverting soft\n\t\tconst softUndo = options?.soft;\n\t\tif (!softUndo) {\n\t\t\ttry {\n\t\t\t\tawait this.forceResolveFromFile();\n\t\t\t} catch (error) {\n\n\t\t\t\t// FileNotFound means the file got deleted meanwhile, so ignore it\n\t\t\t\tif ((error as FileOperationError).fileOperationResult !== FileOperationResult.FILE_NOT_FOUND) {\n\n\t\t\t\t\t// Set flags back to previous values, we are still dirty if revert failed\n\t\t\t\t\tundoSetDirty();\n\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Emit file change event\n\t\tthis._onDidRevert.fire();\n\n\t\t// Emit dirty change event\n\t\tif (wasDirty) {\n\t\t\tthis._onDidChangeDirty.fire();\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region State\n\n\tprivate inConflictMode = false;\n\tprivate inErrorMode = false;\n\n\thasState(state: StoredFileWorkingCopyState): boolean {\n\t\tswitch (state) {\n\t\t\tcase StoredFileWorkingCopyState.CONFLICT:\n\t\t\t\treturn this.inConflictMode;\n\t\t\tcase StoredFileWorkingCopyState.DIRTY:\n\t\t\t\treturn this.dirty;\n\t\t\tcase StoredFileWorkingCopyState.ERROR:\n\t\t\t\treturn this.inErrorMode;\n\t\t\tcase StoredFileWorkingCopyState.ORPHAN:\n\t\t\t\treturn this.isOrphaned();\n\t\t\tcase StoredFileWorkingCopyState.PENDING_SAVE:\n\t\t\t\treturn this.saveSequentializer.isRunning();\n\t\t\tcase StoredFileWorkingCopyState.SAVED:\n\t\t\t\treturn !this.dirty;\n\t\t}\n\t}\n\n\tasync joinState(state: StoredFileWorkingCopyState.PENDING_SAVE): Promise<void> {\n\t\treturn this.saveSequentializer.running;\n\t}\n\n\t//#endregion\n\n\t//#region Utilities\n\n\tisReadonly(): boolean | IMarkdownString {\n\t\treturn this.filesConfigurationService.isReadonly(this.resource, this.lastResolvedFileStat);\n\t}\n\n\tprivate trace(msg: string): void {\n\t\tthis.logService.trace(`[stored file working copy] ${msg}`, this.resource.toString(), this.typeId);\n\t}\n\n\t//#endregion\n\n\t//#region Dispose\n\n\toverride dispose(): void {\n\t\tthis.trace('dispose()');\n\n\t\t// State\n\t\tthis.inConflictMode = false;\n\t\tthis.inErrorMode = false;\n\n\t\t// Free up model for GC\n\t\tthis._model = undefined;\n\n\t\tsuper.dispose();\n\t}\n\n\t//#endregion\n}\n"]}