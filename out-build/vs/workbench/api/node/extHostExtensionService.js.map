{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/node/extHostExtensionService.ts"],"names":[],"mappings":"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","file":"extHostExtensionService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as performance from 'vs/base/common/performance';\nimport { createApiFactoryAndRegisterActors } from 'vs/workbench/api/common/extHost.api.impl';\nimport { RequireInterceptor } from 'vs/workbench/api/common/extHostRequireInterceptor';\nimport { ExtensionActivationTimesBuilder } from 'vs/workbench/api/common/extHostExtensionActivator';\nimport { connectProxyResolver } from 'vs/workbench/api/node/proxyResolver';\nimport { AbstractExtHostExtensionService } from 'vs/workbench/api/common/extHostExtensionService';\nimport { ExtHostDownloadService } from 'vs/workbench/api/node/extHostDownloadService';\nimport { URI } from 'vs/base/common/uri';\nimport { Schemas } from 'vs/base/common/network';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { ExtensionRuntime } from 'vs/workbench/api/common/extHostTypes';\nimport { CLIServer } from 'vs/workbench/api/node/extHostCLIServer';\nimport { realpathSync } from 'vs/base/node/extpath';\nimport { ExtHostConsoleForwarder } from 'vs/workbench/api/node/extHostConsoleForwarder';\nimport { ExtHostDiskFileSystemProvider } from 'vs/workbench/api/node/extHostDiskFileSystemProvider';\n\nclass NodeModuleRequireInterceptor extends RequireInterceptor {\n\n\tprotected _installInterceptor(): void {\n\t\tconst that = this;\n\t\tconst node_module = <any>globalThis._VSCODE_NODE_MODULES.module;\n\t\tconst originalLoad = node_module._load;\n\t\tnode_module._load = function load(request: string, parent: { filename: string }, isMain: boolean) {\n\t\t\trequest = applyAlternatives(request);\n\t\t\tif (!that._factories.has(request)) {\n\t\t\t\treturn originalLoad.apply(this, arguments);\n\t\t\t}\n\t\t\treturn that._factories.get(request)!.load(\n\t\t\t\trequest,\n\t\t\t\tURI.file(realpathSync(parent.filename)),\n\t\t\t\trequest => originalLoad.apply(this, [request, parent, isMain])\n\t\t\t);\n\t\t};\n\n\t\tconst originalLookup = node_module._resolveLookupPaths;\n\t\tnode_module._resolveLookupPaths = (request: string, parent: unknown) => {\n\t\t\treturn originalLookup.call(this, applyAlternatives(request), parent);\n\t\t};\n\n\t\tconst applyAlternatives = (request: string) => {\n\t\t\tfor (const alternativeModuleName of that._alternatives) {\n\t\t\t\tconst alternative = alternativeModuleName(request);\n\t\t\t\tif (alternative) {\n\t\t\t\t\trequest = alternative;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn request;\n\t\t};\n\t}\n}\n\nexport class ExtHostExtensionService extends AbstractExtHostExtensionService {\n\n\treadonly extensionRuntime = ExtensionRuntime.Node;\n\n\tprotected async _beforeAlmostReadyToRunExtensions(): Promise<void> {\n\t\t// make sure console.log calls make it to the render\n\t\tthis._instaService.createInstance(ExtHostConsoleForwarder);\n\n\t\t// initialize API and register actors\n\t\tconst extensionApiFactory = this._instaService.invokeFunction(createApiFactoryAndRegisterActors);\n\n\t\t// Register Download command\n\t\tthis._instaService.createInstance(ExtHostDownloadService);\n\n\t\t// Register CLI Server for ipc\n\t\tif (this._initData.remote.isRemote && this._initData.remote.authority) {\n\t\t\tconst cliServer = this._instaService.createInstance(CLIServer);\n\t\t\tprocess.env['VSCODE_IPC_HOOK_CLI'] = cliServer.ipcHandlePath;\n\t\t}\n\n\t\t// Register local file system shortcut\n\t\tthis._instaService.createInstance(ExtHostDiskFileSystemProvider);\n\n\t\t// Module loading tricks\n\t\tconst interceptor = this._instaService.createInstance(NodeModuleRequireInterceptor, extensionApiFactory, { mine: this._myRegistry, all: this._globalRegistry });\n\t\tawait interceptor.install();\n\t\tperformance.mark('code/extHost/didInitAPI');\n\n\t\t// Do this when extension service exists, but extensions are not being activated yet.\n\t\tconst configProvider = await this._extHostConfiguration.getConfigProvider();\n\t\tawait connectProxyResolver(this._extHostWorkspace, configProvider, this, this._logService, this._mainThreadTelemetryProxy, this._initData);\n\t\tperformance.mark('code/extHost/didInitProxyResolver');\n\t}\n\n\tprotected _getEntryPoint(extensionDescription: IExtensionDescription): string | undefined {\n\t\treturn extensionDescription.main;\n\t}\n\n\tprotected async _loadCommonJSModule<T>(extension: IExtensionDescription | null, module: URI, activationTimesBuilder: ExtensionActivationTimesBuilder): Promise<T> {\n\t\tif (module.scheme !== Schemas.file) {\n\t\t\tthrow new Error(`Cannot load URI: '${module}', must be of file-scheme`);\n\t\t}\n\t\tlet r: T | null = null;\n\t\tactivationTimesBuilder.codeLoadingStart();\n\t\tthis._logService.trace(`ExtensionService#loadCommonJSModule ${module.toString(true)}`);\n\t\tthis._logService.flush();\n\t\tconst extensionId = extension?.identifier.value;\n\t\tif (extension) {\n\t\t\tawait this._extHostLocalizationService.initializeLocalizedMessages(extension);\n\t\t}\n\t\ttry {\n\t\t\tif (extensionId) {\n\t\t\t\tperformance.mark(`code/extHost/willLoadExtensionCode/${extensionId}`);\n\t\t\t}\n\t\t\tr = require.__$__nodeRequire<T>(module.fsPath);\n\t\t} finally {\n\t\t\tif (extensionId) {\n\t\t\t\tperformance.mark(`code/extHost/didLoadExtensionCode/${extensionId}`);\n\t\t\t}\n\t\t\tactivationTimesBuilder.codeLoadingStop();\n\t\t}\n\t\treturn r;\n\t}\n\n\tpublic async $setRemoteEnvironment(env: { [key: string]: string | null }): Promise<void> {\n\t\tif (!this._initData.remote.isRemote) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const key in env) {\n\t\t\tconst value = env[key];\n\t\t\tif (value === null) {\n\t\t\t\tdelete process.env[key];\n\t\t\t} else {\n\t\t\t\tprocess.env[key] = value;\n\t\t\t}\n\t\t}\n\t}\n}\n"]}