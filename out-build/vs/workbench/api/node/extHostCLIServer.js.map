{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/node/extHostCLIServer.ts"],"names":[],"mappings":"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","file":"extHostCLIServer.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createRandomIPCHandle } from 'vs/base/parts/ipc/node/ipc.net';\nimport * as http from 'http';\nimport * as fs from 'fs';\nimport { IExtHostCommands } from 'vs/workbench/api/common/extHostCommands';\nimport { IWindowOpenable, IOpenWindowOptions } from 'vs/platform/window/common/window';\nimport { URI } from 'vs/base/common/uri';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { hasWorkspaceFileExtension } from 'vs/platform/workspace/common/workspace';\n\nexport interface OpenCommandPipeArgs {\n\ttype: 'open';\n\tfileURIs?: string[];\n\tfolderURIs?: string[];\n\tforceNewWindow?: boolean;\n\tdiffMode?: boolean;\n\tmergeMode?: boolean;\n\taddMode?: boolean;\n\tgotoLineMode?: boolean;\n\tforceReuseWindow?: boolean;\n\twaitMarkerFilePath?: string;\n\tremoteAuthority?: string | null;\n}\n\nexport interface OpenExternalCommandPipeArgs {\n\ttype: 'openExternal';\n\turis: string[];\n}\n\nexport interface StatusPipeArgs {\n\ttype: 'status';\n}\n\nexport interface ExtensionManagementPipeArgs {\n\ttype: 'extensionManagement';\n\tlist?: { showVersions?: boolean; category?: string };\n\tinstall?: string[];\n\tuninstall?: string[];\n\tforce?: boolean;\n}\n\nexport type PipeCommand = OpenCommandPipeArgs | StatusPipeArgs | OpenExternalCommandPipeArgs | ExtensionManagementPipeArgs;\n\nexport interface ICommandsExecuter {\n\texecuteCommand<T>(id: string, ...args: any[]): Promise<T>;\n}\n\nexport class CLIServerBase {\n\tprivate readonly _server: http.Server;\n\n\tconstructor(\n\t\tprivate readonly _commands: ICommandsExecuter,\n\t\tprivate readonly logService: ILogService,\n\t\tprivate readonly _ipcHandlePath: string,\n\t) {\n\t\tthis._server = http.createServer((req, res) => this.onRequest(req, res));\n\t\tthis.setup().catch(err => {\n\t\t\tlogService.error(err);\n\t\t\treturn '';\n\t\t});\n\t}\n\n\tpublic get ipcHandlePath() {\n\t\treturn this._ipcHandlePath;\n\t}\n\n\tprivate async setup(): Promise<string> {\n\t\ttry {\n\t\t\tthis._server.listen(this.ipcHandlePath);\n\t\t\tthis._server.on('error', err => this.logService.error(err));\n\t\t} catch (err) {\n\t\t\tthis.logService.error('Could not start open from terminal server.');\n\t\t}\n\n\t\treturn this._ipcHandlePath;\n\t}\n\n\tprivate onRequest(req: http.IncomingMessage, res: http.ServerResponse): void {\n\t\tconst sendResponse = (statusCode: number, returnObj: string | undefined) => {\n\t\t\tres.writeHead(statusCode, { 'content-type': 'application/json' });\n\t\t\tres.end(JSON.stringify(returnObj || null), (err?: any) => err && this.logService.error(err)); // CodeQL [SM01524] Only the message portion of errors are passed in.\n\t\t};\n\n\t\tconst chunks: string[] = [];\n\t\treq.setEncoding('utf8');\n\t\treq.on('data', (d: string) => chunks.push(d));\n\t\treq.on('end', async () => {\n\t\t\ttry {\n\t\t\t\tconst data: PipeCommand | any = JSON.parse(chunks.join(''));\n\t\t\t\tlet returnObj: string | undefined;\n\t\t\t\tswitch (data.type) {\n\t\t\t\t\tcase 'open':\n\t\t\t\t\t\treturnObj = await this.open(data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'openExternal':\n\t\t\t\t\t\treturnObj = await this.openExternal(data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'status':\n\t\t\t\t\t\treturnObj = await this.getStatus(data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'extensionManagement':\n\t\t\t\t\t\treturnObj = await this.manageExtensions(data);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tsendResponse(404, `Unknown message type: ${data.type}`);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tsendResponse(200, returnObj);\n\t\t\t} catch (e) {\n\t\t\t\tconst message = e instanceof Error ? e.message : JSON.stringify(e);\n\t\t\t\tsendResponse(500, message);\n\t\t\t\tthis.logService.error('Error while processing pipe request', e);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async open(data: OpenCommandPipeArgs): Promise<undefined> {\n\t\tconst { fileURIs, folderURIs, forceNewWindow, diffMode, mergeMode, addMode, forceReuseWindow, gotoLineMode, waitMarkerFilePath, remoteAuthority } = data;\n\t\tconst urisToOpen: IWindowOpenable[] = [];\n\t\tif (Array.isArray(folderURIs)) {\n\t\t\tfor (const s of folderURIs) {\n\t\t\t\ttry {\n\t\t\t\t\turisToOpen.push({ folderUri: URI.parse(s) });\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (Array.isArray(fileURIs)) {\n\t\t\tfor (const s of fileURIs) {\n\t\t\t\ttry {\n\t\t\t\t\tif (hasWorkspaceFileExtension(s)) {\n\t\t\t\t\t\turisToOpen.push({ workspaceUri: URI.parse(s) });\n\t\t\t\t\t} else {\n\t\t\t\t\t\turisToOpen.push({ fileUri: URI.parse(s) });\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// ignore\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst waitMarkerFileURI = waitMarkerFilePath ? URI.file(waitMarkerFilePath) : undefined;\n\t\tconst preferNewWindow = !forceReuseWindow && !waitMarkerFileURI && !addMode;\n\t\tconst windowOpenArgs: IOpenWindowOptions = { forceNewWindow, diffMode, mergeMode, addMode, gotoLineMode, forceReuseWindow, preferNewWindow, waitMarkerFileURI, remoteAuthority };\n\t\tthis._commands.executeCommand('_remoteCLI.windowOpen', urisToOpen, windowOpenArgs);\n\t}\n\n\tprivate async openExternal(data: OpenExternalCommandPipeArgs): Promise<undefined> {\n\t\tfor (const uriString of data.uris) {\n\t\t\tconst uri = URI.parse(uriString);\n\t\t\tconst urioOpen = uri.scheme === 'file' ? uri : uriString; // workaround for #112577\n\t\t\tawait this._commands.executeCommand('_remoteCLI.openExternal', urioOpen);\n\t\t}\n\t}\n\n\tprivate async manageExtensions(data: ExtensionManagementPipeArgs): Promise<string | undefined> {\n\t\tconst toExtOrVSIX = (inputs: string[] | undefined) => inputs?.map(input => /\\.vsix$/i.test(input) ? URI.parse(input) : input);\n\t\tconst commandArgs = {\n\t\t\tlist: data.list,\n\t\t\tinstall: toExtOrVSIX(data.install),\n\t\t\tuninstall: toExtOrVSIX(data.uninstall),\n\t\t\tforce: data.force\n\t\t};\n\t\treturn await this._commands.executeCommand<string | undefined>('_remoteCLI.manageExtensions', commandArgs);\n\t}\n\n\tprivate async getStatus(data: StatusPipeArgs): Promise<string | undefined> {\n\t\treturn await this._commands.executeCommand<string | undefined>('_remoteCLI.getSystemStatus');\n\t}\n\n\tdispose(): void {\n\t\tthis._server.close();\n\n\t\tif (this._ipcHandlePath && process.platform !== 'win32' && fs.existsSync(this._ipcHandlePath)) {\n\t\t\tfs.unlinkSync(this._ipcHandlePath);\n\t\t}\n\t}\n}\n\nexport class CLIServer extends CLIServerBase {\n\tconstructor(\n\t\t@IExtHostCommands commands: IExtHostCommands,\n\t\t@ILogService logService: ILogService\n\t) {\n\t\tsuper(commands, logService, createRandomIPCHandle());\n\t}\n}\n"]}