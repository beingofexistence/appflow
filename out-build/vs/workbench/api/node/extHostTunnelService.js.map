{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/node/extHostTunnelService.ts"],"names":[],"mappings":"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","file":"extHostTunnelService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { exec } from 'child_process';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { Emitter } from 'vs/base/common/event';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { MovingAverage } from 'vs/base/common/numbers';\nimport { isLinux } from 'vs/base/common/platform';\nimport * as resources from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport * as pfs from 'vs/base/node/pfs';\nimport { ISocket, SocketCloseEventType } from 'vs/base/parts/ipc/common/ipc.net';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ManagedSocket, RemoteSocketHalf, connectManagedSocket } from 'vs/platform/remote/common/managedSocket';\nimport { ManagedRemoteConnection } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { ISignService } from 'vs/platform/sign/common/sign';\nimport { isAllInterfaces, isLocalhost } from 'vs/platform/tunnel/common/tunnel';\nimport { NodeRemoteTunnel } from 'vs/platform/tunnel/node/tunnelService';\nimport { IExtHostInitDataService } from 'vs/workbench/api/common/extHostInitDataService';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { ExtHostTunnelService } from 'vs/workbench/api/common/extHostTunnelService';\nimport { CandidatePort, parseAddress } from 'vs/workbench/services/remote/common/tunnelModel';\nimport * as vscode from 'vscode';\n\nexport function getSockets(stdout: string): Record<string, { pid: number; socket: number }> {\n\tconst lines = stdout.trim().split('\\n');\n\tconst mapped: { pid: number; socket: number }[] = [];\n\tlines.forEach(line => {\n\t\tconst match = /\\/proc\\/(\\d+)\\/fd\\/\\d+ -> socket:\\[(\\d+)\\]/.exec(line)!;\n\t\tif (match && match.length >= 3) {\n\t\t\tmapped.push({\n\t\t\t\tpid: parseInt(match[1], 10),\n\t\t\t\tsocket: parseInt(match[2], 10)\n\t\t\t});\n\t\t}\n\t});\n\tconst socketMap = mapped.reduce((m, socket) => {\n\t\tm[socket.socket] = socket;\n\t\treturn m;\n\t}, {} as Record<string, typeof mapped[0]>);\n\treturn socketMap;\n}\n\nexport function loadListeningPorts(...stdouts: string[]): { socket: number; ip: string; port: number }[] {\n\tconst table = ([] as Record<string, string>[]).concat(...stdouts.map(loadConnectionTable));\n\treturn [\n\t\t...new Map(\n\t\t\ttable.filter(row => row.st === '0A')\n\t\t\t\t.map(row => {\n\t\t\t\t\tconst address = row.local_address.split(':');\n\t\t\t\t\treturn {\n\t\t\t\t\t\tsocket: parseInt(row.inode, 10),\n\t\t\t\t\t\tip: parseIpAddress(address[0]),\n\t\t\t\t\t\tport: parseInt(address[1], 16)\n\t\t\t\t\t};\n\t\t\t\t}).map(port => [port.ip + ':' + port.port, port])\n\t\t).values()\n\t];\n}\n\nexport function parseIpAddress(hex: string): string {\n\tlet result = '';\n\tif (hex.length === 8) {\n\t\tfor (let i = hex.length - 2; i >= 0; i -= 2) {\n\t\t\tresult += parseInt(hex.substr(i, 2), 16);\n\t\t\tif (i !== 0) {\n\t\t\t\tresult += '.';\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// Nice explanation of host format in tcp6 file: https://serverfault.com/questions/592574/why-does-proc-net-tcp6-represents-1-as-1000\n\t\tfor (let i = 0; i < hex.length; i += 8) {\n\t\t\tconst word = hex.substring(i, i + 8);\n\t\t\tlet subWord = '';\n\t\t\tfor (let j = 8; j >= 2; j -= 2) {\n\t\t\t\tsubWord += word.substring(j - 2, j);\n\t\t\t\tif ((j === 6) || (j === 2)) {\n\t\t\t\t\t// Trim leading zeros\n\t\t\t\t\tsubWord = parseInt(subWord, 16).toString(16);\n\t\t\t\t\tresult += `${subWord}`;\n\t\t\t\t\tsubWord = '';\n\t\t\t\t\tif (i + j !== hex.length - 6) {\n\t\t\t\t\t\tresult += ':';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn result;\n}\n\nexport function loadConnectionTable(stdout: string): Record<string, string>[] {\n\tconst lines = stdout.trim().split('\\n');\n\tconst names = lines.shift()!.trim().split(/\\s+/)\n\t\t.filter(name => name !== 'rx_queue' && name !== 'tm->when');\n\tconst table = lines.map(line => line.trim().split(/\\s+/).reduce((obj, value, i) => {\n\t\tobj[names[i] || i] = value;\n\t\treturn obj;\n\t}, {} as Record<string, string>));\n\treturn table;\n}\n\nfunction knownExcludeCmdline(command: string): boolean {\n\treturn !!command.match(/.*\\.vscode-server-[a-zA-Z]+\\/bin.*/)\n\t\t|| (command.indexOf('out/server-main.js') !== -1)\n\t\t|| (command.indexOf('_productName=VSCode') !== -1);\n}\n\nexport function getRootProcesses(stdout: string) {\n\tconst lines = stdout.trim().split('\\n');\n\tconst mapped: { pid: number; cmd: string; ppid: number }[] = [];\n\tlines.forEach(line => {\n\t\tconst match = /^\\d+\\s+\\D+\\s+root\\s+(\\d+)\\s+(\\d+).+\\d+\\:\\d+\\:\\d+\\s+(.+)$/.exec(line)!;\n\t\tif (match && match.length >= 4) {\n\t\t\tmapped.push({\n\t\t\t\tpid: parseInt(match[1], 10),\n\t\t\t\tppid: parseInt(match[2]),\n\t\t\t\tcmd: match[3]\n\t\t\t});\n\t\t}\n\t});\n\treturn mapped;\n}\n\nexport async function findPorts(connections: { socket: number; ip: string; port: number }[], socketMap: Record<string, { pid: number; socket: number }>, processes: { pid: number; cwd: string; cmd: string }[]): Promise<CandidatePort[]> {\n\tconst processMap = processes.reduce((m, process) => {\n\t\tm[process.pid] = process;\n\t\treturn m;\n\t}, {} as Record<string, typeof processes[0]>);\n\n\tconst ports: CandidatePort[] = [];\n\tconnections.forEach(({ socket, ip, port }) => {\n\t\tconst pid = socketMap[socket] ? socketMap[socket].pid : undefined;\n\t\tconst command: string | undefined = pid ? processMap[pid]?.cmd : undefined;\n\t\tif (pid && command && !knownExcludeCmdline(command)) {\n\t\t\tports.push({ host: ip, port, detail: command, pid });\n\t\t}\n\t});\n\treturn ports;\n}\n\nexport function tryFindRootPorts(connections: { socket: number; ip: string; port: number }[], rootProcessesStdout: string, previousPorts: Map<number, CandidatePort & { ppid: number }>): Map<number, CandidatePort & { ppid: number }> {\n\tconst ports: Map<number, CandidatePort & { ppid: number }> = new Map();\n\tconst rootProcesses = getRootProcesses(rootProcessesStdout);\n\n\tfor (const connection of connections) {\n\t\tconst previousPort = previousPorts.get(connection.port);\n\t\tif (previousPort) {\n\t\t\tports.set(connection.port, previousPort);\n\t\t\tcontinue;\n\t\t}\n\t\tconst rootProcessMatch = rootProcesses.find((value) => value.cmd.includes(`${connection.port}`));\n\t\tif (rootProcessMatch) {\n\t\t\tlet bestMatch = rootProcessMatch;\n\t\t\t// There are often several processes that \"look\" like they could match the port.\n\t\t\t// The one we want is usually the child of the other. Find the most child process.\n\t\t\tlet mostChild: { pid: number; cmd: string; ppid: number } | undefined;\n\t\t\tdo {\n\t\t\t\tmostChild = rootProcesses.find(value => value.ppid === bestMatch.pid);\n\t\t\t\tif (mostChild) {\n\t\t\t\t\tbestMatch = mostChild;\n\t\t\t\t}\n\t\t\t} while (mostChild);\n\t\t\tports.set(connection.port, { host: connection.ip, port: connection.port, pid: bestMatch.pid, detail: bestMatch.cmd, ppid: bestMatch.ppid });\n\t\t} else {\n\t\t\tports.set(connection.port, { host: connection.ip, port: connection.port, ppid: Number.MAX_VALUE });\n\t\t}\n\t}\n\n\treturn ports;\n}\n\nexport class NodeExtHostTunnelService extends ExtHostTunnelService {\n\tprivate _initialCandidates: CandidatePort[] | undefined = undefined;\n\tprivate _foundRootPorts: Map<number, CandidatePort & { ppid: number }> = new Map();\n\tprivate _candidateFindingEnabled: boolean = false;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@IExtHostInitDataService private readonly initData: IExtHostInitDataService,\n\t\t@ILogService logService: ILogService,\n\t\t@ISignService private readonly signService: ISignService,\n\t) {\n\t\tsuper(extHostRpc, initData, logService);\n\t\tif (isLinux && initData.remote.isRemote && initData.remote.authority) {\n\t\t\tthis._proxy.$setRemoteTunnelService(process.pid);\n\t\t\tthis.setInitialCandidates();\n\t\t}\n\t}\n\n\toverride async $registerCandidateFinder(enable: boolean): Promise<void> {\n\t\tif (enable && this._candidateFindingEnabled) {\n\t\t\t// already enabled\n\t\t\treturn;\n\t\t}\n\n\t\tthis._candidateFindingEnabled = enable;\n\t\tlet oldPorts: { host: string; port: number; detail?: string }[] | undefined = undefined;\n\n\t\t// If we already have found initial candidates send those immediately.\n\t\tif (this._initialCandidates) {\n\t\t\toldPorts = this._initialCandidates;\n\t\t\tawait this._proxy.$onFoundNewCandidates(this._initialCandidates);\n\t\t}\n\n\t\t// Regularly scan to see if the candidate ports have changed.\n\t\tconst movingAverage = new MovingAverage();\n\t\tlet scanCount = 0;\n\t\twhile (this._candidateFindingEnabled) {\n\t\t\tconst startTime = new Date().getTime();\n\t\t\tconst newPorts = (await this.findCandidatePorts()).filter(candidate => (isLocalhost(candidate.host) || isAllInterfaces(candidate.host)));\n\t\t\tthis.logService.trace(`ForwardedPorts: (ExtHostTunnelService) found candidate ports ${newPorts.map(port => port.port).join(', ')}`);\n\t\t\tconst timeTaken = new Date().getTime() - startTime;\n\t\t\tthis.logService.trace(`ForwardedPorts: (ExtHostTunnelService) candidate port scan took ${timeTaken} ms.`);\n\t\t\t// Do not count the first few scans towards the moving average as they are likely to be slower.\n\t\t\tif (scanCount++ > 3) {\n\t\t\t\tmovingAverage.update(timeTaken);\n\t\t\t}\n\t\t\tif (!oldPorts || (JSON.stringify(oldPorts) !== JSON.stringify(newPorts))) {\n\t\t\t\toldPorts = newPorts;\n\t\t\t\tawait this._proxy.$onFoundNewCandidates(oldPorts);\n\t\t\t}\n\t\t\tconst delay = this.calculateDelay(movingAverage.value);\n\t\t\tthis.logService.trace(`ForwardedPorts: (ExtHostTunnelService) next candidate port scan in ${delay} ms.`);\n\t\t\tawait (new Promise<void>(resolve => setTimeout(() => resolve(), delay)));\n\t\t}\n\t}\n\n\tprivate calculateDelay(movingAverage: number) {\n\t\t// Some local testing indicated that the moving average might be between 50-100 ms.\n\t\treturn Math.max(movingAverage * 20, 2000);\n\t}\n\n\tprivate async setInitialCandidates(): Promise<void> {\n\t\tthis._initialCandidates = await this.findCandidatePorts();\n\t\tthis.logService.trace(`ForwardedPorts: (ExtHostTunnelService) Initial candidates found: ${this._initialCandidates.map(c => c.port).join(', ')}`);\n\t}\n\n\tprivate async findCandidatePorts(): Promise<CandidatePort[]> {\n\t\tlet tcp: string = '';\n\t\tlet tcp6: string = '';\n\t\ttry {\n\t\t\ttcp = await pfs.Promises.readFile('/proc/net/tcp', 'utf8');\n\t\t\ttcp6 = await pfs.Promises.readFile('/proc/net/tcp6', 'utf8');\n\t\t} catch (e) {\n\t\t\t// File reading error. No additional handling needed.\n\t\t}\n\t\tconst connections: { socket: number; ip: string; port: number }[] = loadListeningPorts(tcp, tcp6);\n\n\t\tconst procSockets: string = await (new Promise(resolve => {\n\t\t\texec('ls -l /proc/[0-9]*/fd/[0-9]* | grep socket:', (error, stdout, stderr) => {\n\t\t\t\tresolve(stdout);\n\t\t\t});\n\t\t}));\n\t\tconst socketMap = getSockets(procSockets);\n\n\t\tconst procChildren = await pfs.Promises.readdir('/proc');\n\t\tconst processes: {\n\t\t\tpid: number; cwd: string; cmd: string;\n\t\t}[] = [];\n\t\tfor (const childName of procChildren) {\n\t\t\ttry {\n\t\t\t\tconst pid: number = Number(childName);\n\t\t\t\tconst childUri = resources.joinPath(URI.file('/proc'), childName);\n\t\t\t\tconst childStat = await pfs.Promises.stat(childUri.fsPath);\n\t\t\t\tif (childStat.isDirectory() && !isNaN(pid)) {\n\t\t\t\t\tconst cwd = await pfs.Promises.readlink(resources.joinPath(childUri, 'cwd').fsPath);\n\t\t\t\t\tconst cmd = await pfs.Promises.readFile(resources.joinPath(childUri, 'cmdline').fsPath, 'utf8');\n\t\t\t\t\tprocesses.push({ pid, cwd, cmd });\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t//\n\t\t\t}\n\t\t}\n\n\t\tconst unFoundConnections: { socket: number; ip: string; port: number }[] = [];\n\t\tconst filteredConnections = connections.filter((connection => {\n\t\t\tconst foundConnection = socketMap[connection.socket];\n\t\t\tif (!foundConnection) {\n\t\t\t\tunFoundConnections.push(connection);\n\t\t\t}\n\t\t\treturn foundConnection;\n\t\t}));\n\n\t\tconst foundPorts = findPorts(filteredConnections, socketMap, processes);\n\t\tlet heuristicPorts: CandidatePort[] | undefined;\n\t\tthis.logService.trace(`ForwardedPorts: (ExtHostTunnelService) number of possible root ports ${unFoundConnections.length}`);\n\t\tif (unFoundConnections.length > 0) {\n\t\t\tconst rootProcesses: string = await (new Promise(resolve => {\n\t\t\t\texec('ps -F -A -l | grep root', (error, stdout, stderr) => {\n\t\t\t\t\tresolve(stdout);\n\t\t\t\t});\n\t\t\t}));\n\t\t\tthis._foundRootPorts = tryFindRootPorts(unFoundConnections, rootProcesses, this._foundRootPorts);\n\t\t\theuristicPorts = Array.from(this._foundRootPorts.values());\n\t\t\tthis.logService.trace(`ForwardedPorts: (ExtHostTunnelService) heuristic ports ${heuristicPorts.map(heuristicPort => heuristicPort.port).join(', ')}`);\n\n\t\t}\n\t\treturn foundPorts.then(foundCandidates => {\n\t\t\tif (heuristicPorts) {\n\t\t\t\treturn foundCandidates.concat(heuristicPorts);\n\t\t\t} else {\n\t\t\t\treturn foundCandidates;\n\t\t\t}\n\t\t});\n\t}\n\n\tprotected override makeManagedTunnelFactory(authority: vscode.ManagedResolvedAuthority): vscode.RemoteAuthorityResolver['tunnelFactory'] {\n\t\treturn async (tunnelOptions) => {\n\t\t\tconst t = new NodeRemoteTunnel(\n\t\t\t\t{\n\t\t\t\t\tcommit: this.initData.commit,\n\t\t\t\t\tquality: this.initData.quality,\n\t\t\t\t\tlogService: this.logService,\n\t\t\t\t\tipcLogger: null,\n\t\t\t\t\t// services and address providers have stubs since we don't need\n\t\t\t\t\t// the connection identification that the renderer process uses\n\t\t\t\t\tremoteSocketFactoryService: {\n\t\t\t\t\t\t_serviceBrand: undefined,\n\t\t\t\t\t\tasync connect(_connectTo: ManagedRemoteConnection, path: string, query: string, debugLabel: string): Promise<ISocket> {\n\t\t\t\t\t\t\tconst result = await authority.makeConnection();\n\t\t\t\t\t\t\treturn ExtHostManagedSocket.connect(result, path, query, debugLabel);\n\t\t\t\t\t\t},\n\t\t\t\t\t\tregister() {\n\t\t\t\t\t\t\tthrow new Error('not implemented');\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\taddressProvider: {\n\t\t\t\t\t\tgetAddress() {\n\t\t\t\t\t\t\treturn Promise.resolve({\n\t\t\t\t\t\t\t\tconnectTo: new ManagedRemoteConnection(0),\n\t\t\t\t\t\t\t\tconnectionToken: authority.connectionToken,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t\tsignService: this.signService,\n\t\t\t\t},\n\t\t\t\t'localhost',\n\t\t\t\ttunnelOptions.remoteAddress.host || 'localhost',\n\t\t\t\ttunnelOptions.remoteAddress.port,\n\t\t\t\ttunnelOptions.localAddressPort,\n\t\t\t);\n\n\t\t\tawait t.waitForReady();\n\n\t\t\tconst disposeEmitter = new Emitter<void>();\n\n\t\t\treturn {\n\t\t\t\tlocalAddress: parseAddress(t.localAddress) ?? t.localAddress,\n\t\t\t\tremoteAddress: { port: t.tunnelRemotePort, host: t.tunnelRemoteHost },\n\t\t\t\tonDidDispose: disposeEmitter.event,\n\t\t\t\tdispose: () => {\n\t\t\t\t\tt.dispose();\n\t\t\t\t\tdisposeEmitter.fire();\n\t\t\t\t\tdisposeEmitter.dispose();\n\t\t\t\t},\n\t\t\t};\n\t\t};\n\t}\n}\n\nclass ExtHostManagedSocket extends ManagedSocket {\n\tpublic static connect(\n\t\tpassing: vscode.ManagedMessagePassing,\n\t\tpath: string, query: string, debugLabel: string,\n\t): Promise<ExtHostManagedSocket> {\n\t\tconst d = new DisposableStore();\n\t\tconst half: RemoteSocketHalf = {\n\t\t\tonClose: d.add(new Emitter()),\n\t\t\tonData: d.add(new Emitter()),\n\t\t\tonEnd: d.add(new Emitter()),\n\t\t};\n\n\t\td.add(passing.onDidReceiveMessage(d => half.onData.fire(VSBuffer.wrap(d))));\n\t\td.add(passing.onDidEnd(() => half.onEnd.fire()));\n\t\td.add(passing.onDidClose(error => half.onClose.fire({\n\t\t\ttype: SocketCloseEventType.NodeSocketCloseEvent,\n\t\t\terror,\n\t\t\thadError: !!error\n\t\t})));\n\n\t\tconst socket = new ExtHostManagedSocket(passing, debugLabel, half);\n\t\tsocket._register(d);\n\t\treturn connectManagedSocket(socket, path, query, debugLabel, half);\n\t}\n\n\tconstructor(\n\t\tprivate readonly passing: vscode.ManagedMessagePassing,\n\t\tdebugLabel: string,\n\t\thalf: RemoteSocketHalf,\n\t) {\n\t\tsuper(debugLabel, half);\n\t}\n\n\tpublic override write(buffer: VSBuffer): void {\n\t\tthis.passing.send(buffer.buffer);\n\t}\n\tprotected override closeRemote(): void {\n\t\tthis.passing.end();\n\t}\n\n\tpublic override async drain(): Promise<void> {\n\t\tawait this.passing.drain?.();\n\t}\n}\n"]}