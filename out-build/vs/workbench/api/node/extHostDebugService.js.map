{"version":3,"sources":["vs/workbench/api/node/extHostDebugService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IA0BzF,IAAM,IAAI,GAAV,MAAM,IAAoB,SAAQ,0BAAI;QAO5C,YACqB,iBAAsB,EACvB,gBAAsB,EACf,gBAAsB,EACzB,oBAA0B,EACxB,CAA8B,EACnC,UAAgB,EACF,gBAAsB;YAExD,KAAK,CAAC,iBAAiB,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,oBAAoB,EAAE,UAAU,EAAE,gBAAgB,CAAC,CAAC;YAJhF,MAAC,GAAD,CAAC,CAAqB;YARhD,MAAC,GAA8B,IAAI,uBAAuB,EAAE,CAAC;QAarE,CAAC;QAEkB,CAAC,CAAkB,OAA2B,EAAE,OAAa;YAC/E,QAAQ,OAAO,CAAC,IAAI,EAAE;gBACrB,KAAK,QAAQ;oBACZ,OAAO,IAAI,mBAAI,CAAe,OAAO,CAAC,CAAC;gBACxC,KAAK,YAAY;oBAChB,OAAO,IAAI,mBAAI,CAAkB,OAAO,CAAC,CAAC;gBAC3C,KAAK,YAAY;oBAChB,OAAO,IAAI,mBAAI,CAAmB,OAAO,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;aAC1D;YACD,OAAO,KAAK,CAAC,CAAC,CAAkB,OAAO,EAAE,OAAO,CAAC,CAAC;QACnD,CAAC;QAEkB,CAAC,CAAuB,OAAa,EAAiB,iBAAuB;YAC/F,MAAM,GAAG,GAAG,mBAAI,CAAmB,yBAAyB,CAAC,iBAAiB,CAAC,2BAA2B,EAAE,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;YAC5H,IAAI,GAAG,EAAE;gBACR,OAAO,IAAI,kBAAG,CAAoB,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,IAAI,EAAE,GAAG,CAAC,OAAO,CAAC,CAAC;aACtE;YACD,OAAO,SAAS,CAAC;QAClB,CAAC;QAEkB,CAAC;YACnB,OAAO,IAAI,kBAAI,EAAS,CAAC;QAC1B,CAAC;QAEe,KAAK,CAAC,cAAc,CAAC,IAAiD,EAAE,SAAiB;YAExG,IAAI,IAAI,CAAC,IAAI,KAAK,YAAY,EAAE;gBAE/B,IAAI,CAAC,IAAI,CAAC,CAAC,EAA0B;oBACpC,4EAA4E;oBAC5E,IAAI,CAAC,CAAC,GAA2B,IAAI,CAAC,CAAC,CAAgB,kBAAkB,CAAC,QAAQ,CAAC,EAAE;wBACpF,IAAI,CAAC,CAAC,CAA4B,gBAAgB,CAAC,QAAQ,CAAC,CAAC;oBAC9D,CAAC,CAAC,CAAC;iBACH;gBAED,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,CAAC,CAAqB,iBAAiB,EAAE,CAAC;gBAC5E,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAgB,eAAe,CAAC,IAAI,CAAC,CAAC;gBAC1D,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAgB,mBAAmB,CAAC,IAAI,CAAC,CAAC;gBAElE,MAAM,YAAY,GAAG,IAAI,CAAC,KAAK,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAsB,EAAE,IAAe,CAAC,CAAC;gBAEzF,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC;gBACzD,IAAI,QAAQ,GAAG,MAAM,IAAI,CAAC,CAAC,CAA4B,QAAQ,CAAC,WAAW,EAAE,YAAY,CAAC,CAAC;gBAE3F,IAAI,oBAAwC,CAAC;gBAC7C,IAAI,yBAAyB,GAAG,KAAK,CAAC;gBAEtC,IAAI,CAAC,QAAQ,EAAE;oBACd,MAAM,OAAO,GAA2B;wBACvC,SAAS,EAAE,KAAK;wBAChB,SAAS,EAAE,SAAS;wBACpB,GAAG,EAAE,IAAI,CAAC,GAAG;wBACb,IAAI,EAAE,YAAY;wBAClB,QAAQ,EAAE,IAAI,kBAAG,CAAO,OAAO,CAAC;qBAChC,CAAC;oBACF,yBAAyB,GAAG,IAAI,CAAC;oBACjC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAgB,yBAAyB,CAAC,OAAO,EAAE;wBACnE,iBAAiB,EAAE,IAAI;wBACvB,mBAAmB,EAAE,IAAI;qBACzB,CAAC,CAAC;oBACH,IAAI,CAAC,CAAC,CAA4B,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;iBAEhE;qBAAM;oBACN,oBAAoB,GAAG,IAAI,CAAC,GAAG,CAAC;iBAChC;gBAED,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAEpB,MAAM,cAAc,GAAG,MAAM,QAAQ,CAAC,SAAS,CAAC;gBAEhD,IAAI,yBAAyB,EAAE;oBAC9B,wDAAwD;oBACxD,MAAM,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;iBACxD;qBAAM;oBACN,IAAI,cAAc,CAAC,gBAAgB,CAAC,gBAAgB,CAAC,CAAC,GAAG,CAAU,oBAAoB,CAAC,EAAE;wBACzF,mCAAmC;wBACnC,IAAI,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;4BACpG,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;yBACzB;6BAAM,IAAI,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE;4BACtC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;yBAC3B;6BAAM,IAAI,QAAQ,CAAC,EAAE,EAAS;4BAC9B,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;yBACzB;6BAAM;4BACN,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;yBAC3B;qBACD;iBACD;gBAED,MAAM,OAAO,GAAG,IAAA,gBAAI,EAAW,KAAK,EAAE,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,2BAA2B,EAAE,oBAAoB,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC;gBACrH,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;gBAE3B,6DAA6D;gBAC7D,MAAM,eAAe,GAAG,IAAI,CAAC,0BAA0B,CAAC,CAAC,CAAC,EAAE;oBAC3D,IAAI,CAAC,CAAC,EAAE,KAAK,SAAS,EAAE;wBACvB,IAAI,CAAC,CAAC,CAA4B,IAAI,CAAC,QAAS,CAAC,CAAC;wBAClD,eAAe,CAAC,OAAO,EAAE,CAAC;qBAC1B;gBACF,CAAC,CAAC,CAAC;gBAEH,OAAO,cAAc,CAAC;aAEtB;iBAAM,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,EAAE;gBACpC,OAAO,qBAAqB,CAAC,IAAI,EAAE,MAAM,IAAI,CAAC,CAAC,CAAqB,iBAAiB,EAAE,CAAC,CAAC;aACzF;YACD,OAAO,KAAK,CAAC,cAAc,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QAC9C,CAAC;KACD,CAAA;IA7HY,oBAAI;mBAAJ,IAAI;QAQd,WAAA,uBAAG,CAAA;QACH,WAAA,uBAAI,CAAA;QACJ,WAAA,8BAAI,CAAA;QACJ,WAAA,2BAAI,CAAA;QACJ,WAAA,6BAAI,CAAA;QACJ,WAAA,wBAAI,CAAA;QACJ,WAAA,qCAAI,CAAA;OAdM,IAAI,CA6HhB;IAED,IAAI,uBAAuB,GAAyC,SAAS,CAAC;IAE9E,SAAS,qBAAqB,CAAC,IAAiD,EAAE,cAAoB;QACrG,IAAI,CAAC,uBAAuB,EAAE;YAC7B,IAAI,QAAQ,CAAC,EAAE,EAAS;gBACvB,uBAAuB,GAAG,IAAI,8BAAI,EAA4B,CAAC;aAC/D;iBAAM,IAAI,QAAQ,CAAC,EAAE,EAAW;gBAChC,uBAAuB,GAAG,IAAI,8BAAI,EAAwB,CAAC;aAC3D;iBAAM,IAAI,QAAQ,CAAC,EAAE,EAAO;gBAC5B,uBAAuB,GAAG,IAAI,8BAAI,EAA0B,CAAC;aAC7D;iBAAM;gBACN,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;aACrE;SACD;QACD,MAAM,MAAM,GAAG,cAAc,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC;QAC3D,OAAO,uBAAuB,CAAC,aAAa,CAAC,IAAI,CAAC,KAAM,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,GAAG,IAAI,EAAE,EAAE,MAAM,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC;IACvH,CAAC;IAED,MAAM,uBAAuB;QAA7B;YAMS,MAAC,GAAoB,IAAI,GAAG,EAA2D,CAAC;QA8CjG,CAAC;QAnDA;;WAEG;iBACY,MAAC,GAAa,IAAb,AAAiB,CAAC;QAI3B,KAAK,CAAC,QAAQ,CAAC,MAAc,EAAE,IAAY;YACjD,MAAM,OAAO,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAkB,OAAO,EAAE,CAAC,CAAC;YACvD,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE,EAAE,CAAC,IAAA,WAAG,EAAqB,KAAK,EAAC,EAAE,EAAC,EAAE;gBAEzF,0DAA0D;gBAC1D,IAAI,QAAQ,CAAC,IAAI,KAAK,IAAI,EAAE;oBAC3B,OAAO,IAAI,CAAC;iBACZ;gBAED,IAAI,QAAQ,CAAC,UAAU,KAAK,CAAC,CAAC,IAAI,MAAM,IAAA,gBAAI,EAAc,MAAM,QAAQ,CAAC,SAAS,CAAC,EAAE;oBACpF,OAAO,IAAI,CAAC;iBACZ;gBAED,+DAA+D;gBAC/D,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;gBACvB,IAAI,QAAQ,CAAC,UAAU,GAAG,uBAAuB,CAAC,CAAC,GAAa,GAAG,IAAI,EAAE,CAAC,uBAAuB,EAAE;oBAClG,OAAO,IAAI,CAAC;iBACZ;gBAED,IAAI,QAAQ,CAAC,MAAM,KAAK,MAAM,EAAE;oBAC/B,OAAO,IAAI,CAAC;iBACZ;gBAED,QAAQ,CAAC,UAAU,GAAG,GAAG,CAAC;gBAC1B,OAAO,QAAQ,CAAC;YACjB,CAAC,CAAC,CAAC,CAAC;YAEJ,OAAO,MAAM,IAAA,WAAG,EAAW,QAAQ,EAAE,CAAC,CAAC,EAAwB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACxE,CAAC;QAEM,MAAM,CAAC,QAAyB,EAAE,UAAkB;YAC1D,IAAI,CAAC,CAAC,CAAkB,GAAG,CAAC,QAAQ,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,CAAC,CAAC;QACvF,CAAC;QAEM,IAAI,CAAC,QAAyB;YACpC,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAkB,GAAG,CAAC,QAAQ,CAAC,CAAC;YACnD,IAAI,IAAI,EAAE;gBACT,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,CAAC;aACrB;QACF,CAAC;QAEM,gBAAgB,CAAC,QAAyB;YAChD,IAAI,CAAC,CAAC,CAAkB,MAAM,CAAC,QAAQ,CAAC,CAAC;QAC1C,CAAC","file":"extHostDebugService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createCancelablePromise, firstParallel } from 'vs/base/common/async';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport * as platform from 'vs/base/common/platform';\nimport * as nls from 'vs/nls';\nimport { IExternalTerminalService } from 'vs/platform/externalTerminal/common/externalTerminal';\nimport { LinuxExternalTerminalService, MacExternalTerminalService, WindowsExternalTerminalService } from 'vs/platform/externalTerminal/node/externalTerminalService';\nimport { ISignService } from 'vs/platform/sign/common/sign';\nimport { SignService } from 'vs/platform/sign/node/signService';\nimport { ExtHostDebugServiceBase, ExtHostDebugSession } from 'vs/workbench/api/common/extHostDebugService';\nimport { IExtHostEditorTabs } from 'vs/workbench/api/common/extHostEditorTabs';\nimport { IExtHostExtensionService } from 'vs/workbench/api/common/extHostExtensionService';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { IExtHostTerminalService } from 'vs/workbench/api/common/extHostTerminalService';\nimport { DebugAdapterExecutable, ThemeIcon } from 'vs/workbench/api/common/extHostTypes';\nimport { IExtHostVariableResolverProvider } from 'vs/workbench/api/common/extHostVariableResolverService';\nimport { IExtHostWorkspace } from 'vs/workbench/api/common/extHostWorkspace';\nimport { AbstractDebugAdapter } from 'vs/workbench/contrib/debug/common/abstractDebugAdapter';\nimport { IAdapterDescriptor } from 'vs/workbench/contrib/debug/common/debug';\nimport { ExecutableDebugAdapter, NamedPipeDebugAdapter, SocketDebugAdapter } from 'vs/workbench/contrib/debug/node/debugAdapter';\nimport { hasChildProcesses, prepareCommand } from 'vs/workbench/contrib/debug/node/terminals';\nimport { ExtensionDescriptionRegistry } from 'vs/workbench/services/extensions/common/extensionDescriptionRegistry';\nimport type * as vscode from 'vscode';\nimport { ExtHostConfigProvider, IExtHostConfiguration } from '../common/extHostConfiguration';\n\nexport class ExtHostDebugService extends ExtHostDebugServiceBase {\n\n\toverride readonly _serviceBrand: undefined;\n\n\tprivate _integratedTerminalInstances = new DebugTerminalCollection();\n\tprivate _terminalDisposedListener: IDisposable | undefined;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpcService: IExtHostRpcService,\n\t\t@IExtHostWorkspace workspaceService: IExtHostWorkspace,\n\t\t@IExtHostExtensionService extensionService: IExtHostExtensionService,\n\t\t@IExtHostConfiguration configurationService: IExtHostConfiguration,\n\t\t@IExtHostTerminalService private _terminalService: IExtHostTerminalService,\n\t\t@IExtHostEditorTabs editorTabs: IExtHostEditorTabs,\n\t\t@IExtHostVariableResolverProvider variableResolver: IExtHostVariableResolverProvider,\n\t) {\n\t\tsuper(extHostRpcService, workspaceService, extensionService, configurationService, editorTabs, variableResolver);\n\t}\n\n\tprotected override createDebugAdapter(adapter: IAdapterDescriptor, session: ExtHostDebugSession): AbstractDebugAdapter | undefined {\n\t\tswitch (adapter.type) {\n\t\t\tcase 'server':\n\t\t\t\treturn new SocketDebugAdapter(adapter);\n\t\t\tcase 'pipeServer':\n\t\t\t\treturn new NamedPipeDebugAdapter(adapter);\n\t\t\tcase 'executable':\n\t\t\t\treturn new ExecutableDebugAdapter(adapter, session.type);\n\t\t}\n\t\treturn super.createDebugAdapter(adapter, session);\n\t}\n\n\tprotected override daExecutableFromPackage(session: ExtHostDebugSession, extensionRegistry: ExtensionDescriptionRegistry): DebugAdapterExecutable | undefined {\n\t\tconst dae = ExecutableDebugAdapter.platformAdapterExecutable(extensionRegistry.getAllExtensionDescriptions(), session.type);\n\t\tif (dae) {\n\t\t\treturn new DebugAdapterExecutable(dae.command, dae.args, dae.options);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprotected override createSignService(): ISignService | undefined {\n\t\treturn new SignService();\n\t}\n\n\tpublic override async $runInTerminal(args: DebugProtocol.RunInTerminalRequestArguments, sessionId: string): Promise<number | undefined> {\n\n\t\tif (args.kind === 'integrated') {\n\n\t\t\tif (!this._terminalDisposedListener) {\n\t\t\t\t// React on terminal disposed and check if that is the debug terminal #12956\n\t\t\t\tthis._terminalDisposedListener = this._terminalService.onDidCloseTerminal(terminal => {\n\t\t\t\t\tthis._integratedTerminalInstances.onTerminalClosed(terminal);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tconst configProvider = await this._configurationService.getConfigProvider();\n\t\t\tconst shell = this._terminalService.getDefaultShell(true);\n\t\t\tconst shellArgs = this._terminalService.getDefaultShellArgs(true);\n\n\t\t\tconst terminalName = args.title || nls.localize('debug.terminal.title', \"Debug Process\");\n\n\t\t\tconst shellConfig = JSON.stringify({ shell, shellArgs });\n\t\t\tlet terminal = await this._integratedTerminalInstances.checkout(shellConfig, terminalName);\n\n\t\t\tlet cwdForPrepareCommand: string | undefined;\n\t\t\tlet giveShellTimeToInitialize = false;\n\n\t\t\tif (!terminal) {\n\t\t\t\tconst options: vscode.TerminalOptions = {\n\t\t\t\t\tshellPath: shell,\n\t\t\t\t\tshellArgs: shellArgs,\n\t\t\t\t\tcwd: args.cwd,\n\t\t\t\t\tname: terminalName,\n\t\t\t\t\ticonPath: new ThemeIcon('debug'),\n\t\t\t\t};\n\t\t\t\tgiveShellTimeToInitialize = true;\n\t\t\t\tterminal = this._terminalService.createTerminalFromOptions(options, {\n\t\t\t\t\tisFeatureTerminal: true,\n\t\t\t\t\tuseShellEnvironment: true\n\t\t\t\t});\n\t\t\t\tthis._integratedTerminalInstances.insert(terminal, shellConfig);\n\n\t\t\t} else {\n\t\t\t\tcwdForPrepareCommand = args.cwd;\n\t\t\t}\n\n\t\t\tterminal.show(true);\n\n\t\t\tconst shellProcessId = await terminal.processId;\n\n\t\t\tif (giveShellTimeToInitialize) {\n\t\t\t\t// give a new terminal some time to initialize the shell\n\t\t\t\tawait new Promise(resolve => setTimeout(resolve, 1000));\n\t\t\t} else {\n\t\t\t\tif (configProvider.getConfiguration('debug.terminal').get<boolean>('clearBeforeReusing')) {\n\t\t\t\t\t// clear terminal before reusing it\n\t\t\t\t\tif (shell.indexOf('powershell') >= 0 || shell.indexOf('pwsh') >= 0 || shell.indexOf('cmd.exe') >= 0) {\n\t\t\t\t\t\tterminal.sendText('cls');\n\t\t\t\t\t} else if (shell.indexOf('bash') >= 0) {\n\t\t\t\t\t\tterminal.sendText('clear');\n\t\t\t\t\t} else if (platform.isWindows) {\n\t\t\t\t\t\tterminal.sendText('cls');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tterminal.sendText('clear');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst command = prepareCommand(shell, args.args, !!args.argsCanBeInterpretedByShell, cwdForPrepareCommand, args.env);\n\t\t\tterminal.sendText(command);\n\n\t\t\t// Mark terminal as unused when its session ends, see #112055\n\t\t\tconst sessionListener = this.onDidTerminateDebugSession(s => {\n\t\t\t\tif (s.id === sessionId) {\n\t\t\t\t\tthis._integratedTerminalInstances.free(terminal!);\n\t\t\t\t\tsessionListener.dispose();\n\t\t\t\t}\n\t\t\t});\n\n\t\t\treturn shellProcessId;\n\n\t\t} else if (args.kind === 'external') {\n\t\t\treturn runInExternalTerminal(args, await this._configurationService.getConfigProvider());\n\t\t}\n\t\treturn super.$runInTerminal(args, sessionId);\n\t}\n}\n\nlet externalTerminalService: IExternalTerminalService | undefined = undefined;\n\nfunction runInExternalTerminal(args: DebugProtocol.RunInTerminalRequestArguments, configProvider: ExtHostConfigProvider): Promise<number | undefined> {\n\tif (!externalTerminalService) {\n\t\tif (platform.isWindows) {\n\t\t\texternalTerminalService = new WindowsExternalTerminalService();\n\t\t} else if (platform.isMacintosh) {\n\t\t\texternalTerminalService = new MacExternalTerminalService();\n\t\t} else if (platform.isLinux) {\n\t\t\texternalTerminalService = new LinuxExternalTerminalService();\n\t\t} else {\n\t\t\tthrow new Error('external terminals not supported on this platform');\n\t\t}\n\t}\n\tconst config = configProvider.getConfiguration('terminal');\n\treturn externalTerminalService.runInTerminal(args.title!, args.cwd, args.args, args.env || {}, config.external || {});\n}\n\nclass DebugTerminalCollection {\n\t/**\n\t * Delay before a new terminal is a candidate for reuse. See #71850\n\t */\n\tprivate static minUseDelay = 1000;\n\n\tprivate _terminalInstances = new Map<vscode.Terminal, { lastUsedAt: number; config: string }>();\n\n\tpublic async checkout(config: string, name: string) {\n\t\tconst entries = [...this._terminalInstances.entries()];\n\t\tconst promises = entries.map(([terminal, termInfo]) => createCancelablePromise(async ct => {\n\n\t\t\t// Only allow terminals that match the title.  See #123189\n\t\t\tif (terminal.name !== name) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif (termInfo.lastUsedAt !== -1 && await hasChildProcesses(await terminal.processId)) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// important: date check and map operations must be synchronous\n\t\t\tconst now = Date.now();\n\t\t\tif (termInfo.lastUsedAt + DebugTerminalCollection.minUseDelay > now || ct.isCancellationRequested) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif (termInfo.config !== config) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\ttermInfo.lastUsedAt = now;\n\t\t\treturn terminal;\n\t\t}));\n\n\t\treturn await firstParallel(promises, (t): t is vscode.Terminal => !!t);\n\t}\n\n\tpublic insert(terminal: vscode.Terminal, termConfig: string) {\n\t\tthis._terminalInstances.set(terminal, { lastUsedAt: Date.now(), config: termConfig });\n\t}\n\n\tpublic free(terminal: vscode.Terminal) {\n\t\tconst info = this._terminalInstances.get(terminal);\n\t\tif (info) {\n\t\t\tinfo.lastUsedAt = -1;\n\t\t}\n\t}\n\n\tpublic onTerminalClosed(terminal: vscode.Terminal) {\n\t\tthis._terminalInstances.delete(terminal);\n\t}\n}\n"]}