{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/node/proxyResolver.ts"],"names":[],"mappings":"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","file":"proxyResolver.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as http from 'http';\nimport * as https from 'https';\nimport * as tls from 'tls';\nimport * as net from 'net';\n\nimport { IExtHostWorkspaceProvider } from 'vs/workbench/api/common/extHostWorkspace';\nimport { ExtHostConfigProvider } from 'vs/workbench/api/common/extHostConfiguration';\nimport { MainThreadTelemetryShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { IExtensionHostInitData } from 'vs/workbench/services/extensions/common/extensionHostProtocol';\nimport { ExtHostExtensionService } from 'vs/workbench/api/node/extHostExtensionService';\nimport { URI } from 'vs/base/common/uri';\nimport { ILogService, LogLevel as LogServiceLevel } from 'vs/platform/log/common/log';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { LogLevel, createHttpPatch, createProxyResolver, createTlsPatch, ProxySupportSetting, ProxyAgentParams, createNetPatch } from '@vscode/proxy-agent';\n\nconst systemCertificatesV2Default = true;\n\nexport function connectProxyResolver(\n\textHostWorkspace: IExtHostWorkspaceProvider,\n\tconfigProvider: ExtHostConfigProvider,\n\textensionService: ExtHostExtensionService,\n\textHostLogService: ILogService,\n\tmainThreadTelemetry: MainThreadTelemetryShape,\n\tinitData: IExtensionHostInitData,\n) {\n\tconst useHostProxy = initData.environment.useHostProxy;\n\tconst doUseHostProxy = typeof useHostProxy === 'boolean' ? useHostProxy : !initData.remote.isRemote;\n\tconst params: ProxyAgentParams = {\n\t\tresolveProxy: url => extHostWorkspace.resolveProxy(url),\n\t\tlookupProxyAuthorization: lookupProxyAuthorization.bind(undefined, extHostLogService, mainThreadTelemetry, configProvider, {}, initData.remote.isRemote),\n\t\tgetProxyURL: () => configProvider.getConfiguration('http').get('proxy'),\n\t\tgetProxySupport: () => configProvider.getConfiguration('http').get<ProxySupportSetting>('proxySupport') || 'off',\n\t\tgetSystemCertificatesV1: () => certSettingV1(configProvider),\n\t\tgetSystemCertificatesV2: () => certSettingV2(configProvider),\n\t\tlog: (level, message, ...args) => {\n\t\t\tswitch (level) {\n\t\t\t\tcase LogLevel.Trace: extHostLogService.trace(message, ...args); break;\n\t\t\t\tcase LogLevel.Debug: extHostLogService.debug(message, ...args); break;\n\t\t\t\tcase LogLevel.Info: extHostLogService.info(message, ...args); break;\n\t\t\t\tcase LogLevel.Warning: extHostLogService.warn(message, ...args); break;\n\t\t\t\tcase LogLevel.Error: extHostLogService.error(message, ...args); break;\n\t\t\t\tcase LogLevel.Critical: extHostLogService.error(message, ...args); break;\n\t\t\t\tcase LogLevel.Off: break;\n\t\t\t\tdefault: never(level, message, args); break;\n\t\t\t}\n\t\t\tfunction never(level: never, message: string, ...args: any[]) {\n\t\t\t\textHostLogService.error('Unknown log level', level);\n\t\t\t\textHostLogService.error(message, ...args);\n\t\t\t}\n\t\t},\n\t\tgetLogLevel: () => {\n\t\t\tconst level = extHostLogService.getLevel();\n\t\t\tswitch (level) {\n\t\t\t\tcase LogServiceLevel.Trace: return LogLevel.Trace;\n\t\t\t\tcase LogServiceLevel.Debug: return LogLevel.Debug;\n\t\t\t\tcase LogServiceLevel.Info: return LogLevel.Info;\n\t\t\t\tcase LogServiceLevel.Warning: return LogLevel.Warning;\n\t\t\t\tcase LogServiceLevel.Error: return LogLevel.Error;\n\t\t\t\tcase LogServiceLevel.Off: return LogLevel.Off;\n\t\t\t\tdefault: return never(level);\n\t\t\t}\n\t\t\tfunction never(level: never) {\n\t\t\t\textHostLogService.error('Unknown log level', level);\n\t\t\t\treturn LogLevel.Debug;\n\t\t\t}\n\t\t},\n\t\tproxyResolveTelemetry: () => { },\n\t\tuseHostProxy: doUseHostProxy,\n\t\taddCertificates: [],\n\t\tenv: process.env,\n\t};\n\tconst resolveProxy = createProxyResolver(params);\n\tconst lookup = createPatchedModules(params, resolveProxy);\n\treturn configureModuleLoading(extensionService, lookup);\n}\n\nfunction createPatchedModules(params: ProxyAgentParams, resolveProxy: ReturnType<typeof createProxyResolver>) {\n\treturn {\n\t\thttp: Object.assign(http, createHttpPatch(params, http, resolveProxy)),\n\t\thttps: Object.assign(https, createHttpPatch(params, https, resolveProxy)),\n\t\tnet: Object.assign(net, createNetPatch(params, net)),\n\t\ttls: Object.assign(tls, createTlsPatch(params, tls))\n\t};\n}\n\nfunction certSettingV1(configProvider: ExtHostConfigProvider) {\n\tconst http = configProvider.getConfiguration('http');\n\treturn !http.get<boolean>('experimental.systemCertificatesV2', systemCertificatesV2Default) && !!http.get<boolean>('systemCertificates');\n}\n\nfunction certSettingV2(configProvider: ExtHostConfigProvider) {\n\tconst http = configProvider.getConfiguration('http');\n\treturn !!http.get<boolean>('experimental.systemCertificatesV2', systemCertificatesV2Default) && !!http.get<boolean>('systemCertificates');\n}\n\nconst modulesCache = new Map<IExtensionDescription | undefined, { http?: typeof http; https?: typeof https }>();\nfunction configureModuleLoading(extensionService: ExtHostExtensionService, lookup: ReturnType<typeof createPatchedModules>): Promise<void> {\n\treturn extensionService.getExtensionPathIndex()\n\t\t.then(extensionPaths => {\n\t\t\tconst node_module = <any>globalThis._VSCODE_NODE_MODULES.module;\n\t\t\tconst original = node_module._load;\n\t\t\tnode_module._load = function load(request: string, parent: { filename: string }, isMain: boolean) {\n\t\t\t\tif (request === 'net') {\n\t\t\t\t\treturn lookup.net;\n\t\t\t\t}\n\n\t\t\t\tif (request === 'tls') {\n\t\t\t\t\treturn lookup.tls;\n\t\t\t\t}\n\n\t\t\t\tif (request !== 'http' && request !== 'https') {\n\t\t\t\t\treturn original.apply(this, arguments);\n\t\t\t\t}\n\n\t\t\t\tconst ext = extensionPaths.findSubstr(URI.file(parent.filename));\n\t\t\t\tlet cache = modulesCache.get(ext);\n\t\t\t\tif (!cache) {\n\t\t\t\t\tmodulesCache.set(ext, cache = {});\n\t\t\t\t}\n\t\t\t\tif (!cache[request]) {\n\t\t\t\t\tconst mod = lookup[request];\n\t\t\t\t\tcache[request] = <any>{ ...mod }; // Copy to work around #93167.\n\t\t\t\t}\n\t\t\t\treturn cache[request];\n\t\t\t};\n\t\t});\n}\n\nasync function lookupProxyAuthorization(\n\textHostLogService: ILogService,\n\tmainThreadTelemetry: MainThreadTelemetryShape,\n\tconfigProvider: ExtHostConfigProvider,\n\tproxyAuthenticateCache: Record<string, string | string[] | undefined>,\n\tisRemote: boolean,\n\tproxyURL: string,\n\tproxyAuthenticate: string | string[] | undefined,\n\tstate: { kerberosRequested?: boolean }\n): Promise<string | undefined> {\n\tconst cached = proxyAuthenticateCache[proxyURL];\n\tif (proxyAuthenticate) {\n\t\tproxyAuthenticateCache[proxyURL] = proxyAuthenticate;\n\t}\n\textHostLogService.trace('ProxyResolver#lookupProxyAuthorization callback', `proxyURL:${proxyURL}`, `proxyAuthenticate:${proxyAuthenticate}`, `proxyAuthenticateCache:${cached}`);\n\tconst header = proxyAuthenticate || cached;\n\tconst authenticate = Array.isArray(header) ? header : typeof header === 'string' ? [header] : [];\n\tsendTelemetry(mainThreadTelemetry, authenticate, isRemote);\n\tif (authenticate.some(a => /^(Negotiate|Kerberos)( |$)/i.test(a)) && !state.kerberosRequested) {\n\t\ttry {\n\t\t\tstate.kerberosRequested = true;\n\t\t\tconst kerberos = await import('kerberos');\n\t\t\tconst url = new URL(proxyURL);\n\t\t\tconst spn = configProvider.getConfiguration('http').get<string>('proxyKerberosServicePrincipal')\n\t\t\t\t|| (process.platform === 'win32' ? `HTTP/${url.hostname}` : `HTTP@${url.hostname}`);\n\t\t\textHostLogService.debug('ProxyResolver#lookupProxyAuthorization Kerberos authentication lookup', `proxyURL:${proxyURL}`, `spn:${spn}`);\n\t\t\tconst client = await kerberos.initializeClient(spn);\n\t\t\tconst response = await client.step('');\n\t\t\treturn 'Negotiate ' + response;\n\t\t} catch (err) {\n\t\t\textHostLogService.error('ProxyResolver#lookupProxyAuthorization Kerberos authentication failed', err);\n\t\t}\n\t}\n\treturn undefined;\n}\n\ntype ProxyAuthenticationClassification = {\n\towner: 'chrmarti';\n\tcomment: 'Data about proxy authentication requests';\n\tauthenticationType: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'Type of the authentication requested' };\n\textensionHostType: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Type of the extension host' };\n};\n\ntype ProxyAuthenticationEvent = {\n\tauthenticationType: string;\n\textensionHostType: string;\n};\n\nlet telemetrySent = false;\n\nfunction sendTelemetry(mainThreadTelemetry: MainThreadTelemetryShape, authenticate: string[], isRemote: boolean) {\n\tif (telemetrySent || !authenticate.length) {\n\t\treturn;\n\t}\n\ttelemetrySent = true;\n\n\tmainThreadTelemetry.$publicLog2<ProxyAuthenticationEvent, ProxyAuthenticationClassification>('proxyAuthenticationRequest', {\n\t\tauthenticationType: authenticate.map(a => a.split(' ')[0]).join(','),\n\t\textensionHostType: isRemote ? 'remote' : 'local',\n\t});\n}\n"]}