{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/node/extHostLoggerService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAShG,MAAa,IAAqB,SAAQ,2BAAwB;QAE9C,CAAC,CAAc,QAAa,EAAE,QAAkB,EAAE,OAAwB;YAC5F,IAAI,QAAQ,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,EAAE;gBACrC,oHAAoH;gBACpH,OAAO,IAAI,eAAG,CAAU,OAAO,EAAE,IAAI,IAAI,IAAA,UAAG,GAAW,EAAE,QAAQ,CAAC,MAAM,EAAE,CAAC,OAAO,EAAE,WAAW,EAAE,CAAC,CAAC,OAAO,EAAE,kBAAkB,EAAE,QAAQ,CAAC,CAAC;aAC1I;YACD,OAAO,KAAK,CAAC,CAAC,CAAc,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;QAC1D,CAAC;QAEQ,cAAc,CAAC,QAAyB;YAChD,KAAK,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;YAC/B,IAAI,CAAC,CAAC,CAAM,eAAe,CAAC,QAAQ,CAAC,CAAC;QACvC,CAAC;QAEQ,gBAAgB,CAAC,QAAa;YACtC,KAAK,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YACjC,IAAI,CAAC,CAAC,CAAM,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QACzC,CAAC;KAED;IApBD,oBAoBC","file":"extHostLoggerService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ILogger, ILoggerOptions, ILoggerResource, LogLevel } from 'vs/platform/log/common/log';\nimport { URI } from 'vs/base/common/uri';\nimport { ExtHostLoggerService as BaseExtHostLoggerService } from 'vs/workbench/api/common/extHostLoggerService';\nimport { Schemas } from 'vs/base/common/network';\nimport { SpdLogLogger } from 'vs/platform/log/node/spdlogLog';\nimport { generateUuid } from 'vs/base/common/uuid';\n\nexport class ExtHostLoggerService extends BaseExtHostLoggerService {\n\n\tprotected override doCreateLogger(resource: URI, logLevel: LogLevel, options?: ILoggerOptions): ILogger {\n\t\tif (resource.scheme === Schemas.file) {\n\t\t\t/* Create the logger in the Extension Host process to prevent loggers (log, output channels...) traffic  over IPC */\n\t\t\treturn new SpdLogLogger(options?.name || generateUuid(), resource.fsPath, !options?.donotRotate, !!options?.donotUseFormatters, logLevel);\n\t\t}\n\t\treturn super.doCreateLogger(resource, logLevel, options);\n\t}\n\n\toverride registerLogger(resource: ILoggerResource): void {\n\t\tsuper.registerLogger(resource);\n\t\tthis._proxy.$registerLogger(resource);\n\t}\n\n\toverride deregisterLogger(resource: URI): void {\n\t\tsuper.deregisterLogger(resource);\n\t\tthis._proxy.$deregisterLogger(resource);\n\t}\n\n}\n"]}