{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/node/extensionHostProcess.ts"],"names":[],"mappings":"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","file":"extensionHostProcess.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nativeWatchdog from 'native-watchdog';\nimport * as net from 'net';\nimport * as minimist from 'minimist';\nimport * as performance from 'vs/base/common/performance';\nimport type { MessagePortMain } from 'vs/base/parts/sandbox/node/electronTypes';\nimport { isCancellationError, isSigPipeError, onUnexpectedError } from 'vs/base/common/errors';\nimport { Event } from 'vs/base/common/event';\nimport { IMessagePassingProtocol } from 'vs/base/parts/ipc/common/ipc';\nimport { PersistentProtocol, ProtocolConstants, BufferedEmitter } from 'vs/base/parts/ipc/common/ipc.net';\nimport { NodeSocket, WebSocketNodeSocket } from 'vs/base/parts/ipc/node/ipc.net';\nimport product from 'vs/platform/product/common/product';\nimport { MessageType, createMessageOfType, isMessageOfType, IExtHostSocketMessage, IExtHostReadyMessage, IExtHostReduceGraceTimeMessage, ExtensionHostExitCode, IExtensionHostInitData } from 'vs/workbench/services/extensions/common/extensionHostProtocol';\nimport { ExtensionHostMain, IExitFn } from 'vs/workbench/api/common/extensionHostMain';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { IURITransformer } from 'vs/base/common/uriIpc';\nimport { Promises } from 'vs/base/node/pfs';\nimport { realpath } from 'vs/base/node/extpath';\nimport { IHostUtils } from 'vs/workbench/api/common/extHostExtensionService';\nimport { ProcessTimeRunOnceScheduler } from 'vs/base/common/async';\nimport { boolean } from 'vs/editor/common/config/editorOptions';\nimport { createURITransformer } from 'vs/workbench/api/node/uriTransformer';\nimport { ExtHostConnectionType, readExtHostConnection } from 'vs/workbench/services/extensions/common/extensionHostEnv';\n\nimport 'vs/workbench/api/common/extHost.common.services';\nimport 'vs/workbench/api/node/extHost.node.services';\n\ninterface ParsedExtHostArgs {\n\ttransformURIs?: boolean;\n\tskipWorkspaceStorageLock?: boolean;\n\tuseHostProxy?: 'true' | 'false'; // use a string, as undefined is also a valid value\n}\n\n// workaround for https://github.com/microsoft/vscode/issues/85490\n// remove --inspect-port=0 after start so that it doesn't trigger LSP debugging\n(function removeInspectPort() {\n\tfor (let i = 0; i < process.execArgv.length; i++) {\n\t\tif (process.execArgv[i] === '--inspect-port=0') {\n\t\t\tprocess.execArgv.splice(i, 1);\n\t\t\ti--;\n\t\t}\n\t}\n})();\n\nconst args = minimist(process.argv.slice(2), {\n\tboolean: [\n\t\t'transformURIs',\n\t\t'skipWorkspaceStorageLock'\n\t],\n\tstring: [\n\t\t'useHostProxy' // 'true' | 'false' | undefined\n\t]\n}) as ParsedExtHostArgs;\n\n// With Electron 2.x and node.js 8.x the \"natives\" module\n// can cause a native crash (see https://github.com/nodejs/node/issues/19891 and\n// https://github.com/electron/electron/issues/10905). To prevent this from\n// happening we essentially blocklist this module from getting loaded in any\n// extension by patching the node require() function.\n(function () {\n\tconst Module = globalThis._VSCODE_NODE_MODULES.module as any;\n\tconst originalLoad = Module._load;\n\n\tModule._load = function (request: string) {\n\t\tif (request === 'natives') {\n\t\t\tthrow new Error('Either the extension or an NPM dependency is using the [unsupported \"natives\" node module](https://go.microsoft.com/fwlink/?linkid=871887).');\n\t\t}\n\n\t\treturn originalLoad.apply(this, arguments);\n\t};\n})();\n\n// custom process.exit logic...\nconst nativeExit: IExitFn = process.exit.bind(process);\nfunction patchProcess(allowExit: boolean) {\n\tprocess.exit = function (code?: number) {\n\t\tif (allowExit) {\n\t\t\tnativeExit(code);\n\t\t} else {\n\t\t\tconst err = new Error('An extension called process.exit() and this was prevented.');\n\t\t\tconsole.warn(err.stack);\n\t\t}\n\t} as (code?: number) => never;\n\n\t// override Electron's process.crash() method\n\tprocess.crash = function () {\n\t\tconst err = new Error('An extension called process.crash() and this was prevented.');\n\t\tconsole.warn(err.stack);\n\t};\n\n\t// Set ELECTRON_RUN_AS_NODE environment variable for extensions that use\n\t// child_process.spawn with process.execPath and expect to run as node process\n\t// on the desktop.\n\t// Refs https://github.com/microsoft/vscode/issues/151012#issuecomment-1156593228\n\tprocess.env['ELECTRON_RUN_AS_NODE'] = '1';\n}\n\ninterface IRendererConnection {\n\tprotocol: IMessagePassingProtocol;\n\tinitData: IExtensionHostInitData;\n}\n\n// This calls exit directly in case the initialization is not finished and we need to exit\n// Otherwise, if initialization completed we go to extensionHostMain.terminate()\nlet onTerminate = function (reason: string) {\n\tnativeExit();\n};\n\nfunction _createExtHostProtocol(): Promise<IMessagePassingProtocol> {\n\tconst extHostConnection = readExtHostConnection(process.env);\n\n\tif (extHostConnection.type === ExtHostConnectionType.MessagePort) {\n\n\t\treturn new Promise<IMessagePassingProtocol>((resolve, reject) => {\n\n\t\t\tconst withPorts = (ports: MessagePortMain[]) => {\n\t\t\t\tconst port = ports[0];\n\t\t\t\tconst onMessage = new BufferedEmitter<VSBuffer>();\n\t\t\t\tport.on('message', (e) => onMessage.fire(VSBuffer.wrap(e.data)));\n\t\t\t\tport.on('close', () => {\n\t\t\t\t\tonTerminate('renderer closed the MessagePort');\n\t\t\t\t});\n\t\t\t\tport.start();\n\n\t\t\t\tresolve({\n\t\t\t\t\tonMessage: onMessage.event,\n\t\t\t\t\tsend: message => port.postMessage(message.buffer)\n\t\t\t\t});\n\t\t\t};\n\n\t\t\tprocess.parentPort.on('message', (e: Electron.MessageEvent) => withPorts(e.ports));\n\t\t});\n\n\t} else if (extHostConnection.type === ExtHostConnectionType.Socket) {\n\n\t\treturn new Promise<PersistentProtocol>((resolve, reject) => {\n\n\t\t\tlet protocol: PersistentProtocol | null = null;\n\n\t\t\tconst timer = setTimeout(() => {\n\t\t\t\tonTerminate('VSCODE_EXTHOST_IPC_SOCKET timeout');\n\t\t\t}, 60000);\n\n\t\t\tconst reconnectionGraceTime = ProtocolConstants.ReconnectionGraceTime;\n\t\t\tconst reconnectionShortGraceTime = ProtocolConstants.ReconnectionShortGraceTime;\n\t\t\tconst disconnectRunner1 = new ProcessTimeRunOnceScheduler(() => onTerminate('renderer disconnected for too long (1)'), reconnectionGraceTime);\n\t\t\tconst disconnectRunner2 = new ProcessTimeRunOnceScheduler(() => onTerminate('renderer disconnected for too long (2)'), reconnectionShortGraceTime);\n\n\t\t\tprocess.on('message', (msg: IExtHostSocketMessage | IExtHostReduceGraceTimeMessage, handle: net.Socket) => {\n\t\t\t\tif (msg && msg.type === 'VSCODE_EXTHOST_IPC_SOCKET') {\n\t\t\t\t\t// Disable Nagle's algorithm. We also do this on the server process,\n\t\t\t\t\t// but nodejs doesn't document if this option is transferred with the socket\n\t\t\t\t\thandle.setNoDelay(true);\n\n\t\t\t\t\tconst initialDataChunk = VSBuffer.wrap(Buffer.from(msg.initialDataChunk, 'base64'));\n\t\t\t\t\tlet socket: NodeSocket | WebSocketNodeSocket;\n\t\t\t\t\tif (msg.skipWebSocketFrames) {\n\t\t\t\t\t\tsocket = new NodeSocket(handle, 'extHost-socket');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst inflateBytes = VSBuffer.wrap(Buffer.from(msg.inflateBytes, 'base64'));\n\t\t\t\t\t\tsocket = new WebSocketNodeSocket(new NodeSocket(handle, 'extHost-socket'), msg.permessageDeflate, inflateBytes, false);\n\t\t\t\t\t}\n\t\t\t\t\tif (protocol) {\n\t\t\t\t\t\t// reconnection case\n\t\t\t\t\t\tdisconnectRunner1.cancel();\n\t\t\t\t\t\tdisconnectRunner2.cancel();\n\t\t\t\t\t\tprotocol.beginAcceptReconnection(socket, initialDataChunk);\n\t\t\t\t\t\tprotocol.endAcceptReconnection();\n\t\t\t\t\t\tprotocol.sendResume();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tclearTimeout(timer);\n\t\t\t\t\t\tprotocol = new PersistentProtocol({ socket, initialChunk: initialDataChunk });\n\t\t\t\t\t\tprotocol.sendResume();\n\t\t\t\t\t\tprotocol.onDidDispose(() => onTerminate('renderer disconnected'));\n\t\t\t\t\t\tresolve(protocol);\n\n\t\t\t\t\t\t// Wait for rich client to reconnect\n\t\t\t\t\t\tprotocol.onSocketClose(() => {\n\t\t\t\t\t\t\t// The socket has closed, let's give the renderer a certain amount of time to reconnect\n\t\t\t\t\t\t\tdisconnectRunner1.schedule();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (msg && msg.type === 'VSCODE_EXTHOST_IPC_REDUCE_GRACE_TIME') {\n\t\t\t\t\tif (disconnectRunner2.isScheduled()) {\n\t\t\t\t\t\t// we are disconnected and already running the short reconnection timer\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\tif (disconnectRunner1.isScheduled()) {\n\t\t\t\t\t\t// we are disconnected and running the long reconnection timer\n\t\t\t\t\t\tdisconnectRunner2.schedule();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Now that we have managed to install a message listener, ask the other side to send us the socket\n\t\t\tconst req: IExtHostReadyMessage = { type: 'VSCODE_EXTHOST_IPC_READY' };\n\t\t\tprocess.send?.(req);\n\t\t});\n\n\t} else {\n\n\t\tconst pipeName = extHostConnection.pipeName;\n\n\t\treturn new Promise<PersistentProtocol>((resolve, reject) => {\n\n\t\t\tconst socket = net.createConnection(pipeName, () => {\n\t\t\t\tsocket.removeListener('error', reject);\n\t\t\t\tconst protocol = new PersistentProtocol({ socket: new NodeSocket(socket, 'extHost-renderer') });\n\t\t\t\tprotocol.sendResume();\n\t\t\t\tresolve(protocol);\n\t\t\t});\n\t\t\tsocket.once('error', reject);\n\n\t\t\tsocket.on('close', () => {\n\t\t\t\tonTerminate('renderer closed the socket');\n\t\t\t});\n\t\t});\n\t}\n}\n\nasync function createExtHostProtocol(): Promise<IMessagePassingProtocol> {\n\n\tconst protocol = await _createExtHostProtocol();\n\n\treturn new class implements IMessagePassingProtocol {\n\n\t\tprivate readonly _onMessage = new BufferedEmitter<VSBuffer>();\n\t\treadonly onMessage: Event<VSBuffer> = this._onMessage.event;\n\n\t\tprivate _terminating: boolean;\n\n\t\tconstructor() {\n\t\t\tthis._terminating = false;\n\t\t\tprotocol.onMessage((msg) => {\n\t\t\t\tif (isMessageOfType(msg, MessageType.Terminate)) {\n\t\t\t\t\tthis._terminating = true;\n\t\t\t\t\tonTerminate('received terminate message from renderer');\n\t\t\t\t} else {\n\t\t\t\t\tthis._onMessage.fire(msg);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tsend(msg: any): void {\n\t\t\tif (!this._terminating) {\n\t\t\t\tprotocol.send(msg);\n\t\t\t}\n\t\t}\n\n\t\tasync drain(): Promise<void> {\n\t\t\tif (protocol.drain) {\n\t\t\t\treturn protocol.drain();\n\t\t\t}\n\t\t}\n\t};\n}\n\nfunction connectToRenderer(protocol: IMessagePassingProtocol): Promise<IRendererConnection> {\n\treturn new Promise<IRendererConnection>((c) => {\n\n\t\t// Listen init data message\n\t\tconst first = protocol.onMessage(raw => {\n\t\t\tfirst.dispose();\n\n\t\t\tconst initData = <IExtensionHostInitData>JSON.parse(raw.toString());\n\n\t\t\tconst rendererCommit = initData.commit;\n\t\t\tconst myCommit = product.commit;\n\n\t\t\tif (rendererCommit && myCommit) {\n\t\t\t\t// Running in the built version where commits are defined\n\t\t\t\tif (rendererCommit !== myCommit) {\n\t\t\t\t\tnativeExit(ExtensionHostExitCode.VersionMismatch);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (initData.parentPid) {\n\t\t\t\t// Kill oneself if one's parent dies. Much drama.\n\t\t\t\tlet epermErrors = 0;\n\t\t\t\tsetInterval(function () {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tprocess.kill(initData.parentPid, 0); // throws an exception if the main process doesn't exist anymore.\n\t\t\t\t\t\tepermErrors = 0;\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tif (e && e.code === 'EPERM') {\n\t\t\t\t\t\t\t// Even if the parent process is still alive,\n\t\t\t\t\t\t\t// some antivirus software can lead to an EPERM error to be thrown here.\n\t\t\t\t\t\t\t// Let's terminate only if we get 3 consecutive EPERM errors.\n\t\t\t\t\t\t\tepermErrors++;\n\t\t\t\t\t\t\tif (epermErrors >= 3) {\n\t\t\t\t\t\t\t\tonTerminate(`parent process ${initData.parentPid} does not exist anymore (3 x EPERM): ${e.message} (code: ${e.code}) (errno: ${e.errno})`);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tonTerminate(`parent process ${initData.parentPid} does not exist anymore: ${e.message} (code: ${e.code}) (errno: ${e.errno})`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}, 1000);\n\n\t\t\t\t// In certain cases, the event loop can become busy and never yield\n\t\t\t\t// e.g. while-true or process.nextTick endless loops\n\t\t\t\t// So also use the native node module to do it from a separate thread\n\t\t\t\tlet watchdog: typeof nativeWatchdog;\n\t\t\t\ttry {\n\t\t\t\t\twatchdog = globalThis._VSCODE_NODE_MODULES['native-watchdog'];\n\t\t\t\t\twatchdog.start(initData.parentPid);\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// no problem...\n\t\t\t\t\tonUnexpectedError(err);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Tell the outside that we are initialized\n\t\t\tprotocol.send(createMessageOfType(MessageType.Initialized));\n\n\t\t\tc({ protocol, initData });\n\t\t});\n\n\t\t// Tell the outside that we are ready to receive messages\n\t\tprotocol.send(createMessageOfType(MessageType.Ready));\n\t});\n}\n\nasync function startExtensionHostProcess(): Promise<void> {\n\n\t// Print a console message when rejection isn't handled within N seconds. For details:\n\t// see https://nodejs.org/api/process.html#process_event_unhandledrejection\n\t// and https://nodejs.org/api/process.html#process_event_rejectionhandled\n\tconst unhandledPromises: Promise<any>[] = [];\n\tprocess.on('unhandledRejection', (reason: any, promise: Promise<any>) => {\n\t\tunhandledPromises.push(promise);\n\t\tsetTimeout(() => {\n\t\t\tconst idx = unhandledPromises.indexOf(promise);\n\t\t\tif (idx >= 0) {\n\t\t\t\tpromise.catch(e => {\n\t\t\t\t\tunhandledPromises.splice(idx, 1);\n\t\t\t\t\tif (!isCancellationError(e)) {\n\t\t\t\t\t\tconsole.warn(`rejected promise not handled within 1 second: ${e}`);\n\t\t\t\t\t\tif (e && e.stack) {\n\t\t\t\t\t\t\tconsole.warn(`stack trace: ${e.stack}`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (reason) {\n\t\t\t\t\t\t\tonUnexpectedError(reason);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}, 1000);\n\t});\n\n\tprocess.on('rejectionHandled', (promise: Promise<any>) => {\n\t\tconst idx = unhandledPromises.indexOf(promise);\n\t\tif (idx >= 0) {\n\t\t\tunhandledPromises.splice(idx, 1);\n\t\t}\n\t});\n\n\t// Print a console message when an exception isn't handled.\n\tprocess.on('uncaughtException', function (err: Error) {\n\t\tif (!isSigPipeError(err)) {\n\t\t\tonUnexpectedError(err);\n\t\t}\n\t});\n\n\tperformance.mark(`code/extHost/willConnectToRenderer`);\n\tconst protocol = await createExtHostProtocol();\n\tperformance.mark(`code/extHost/didConnectToRenderer`);\n\tconst renderer = await connectToRenderer(protocol);\n\tperformance.mark(`code/extHost/didWaitForInitData`);\n\tconst { initData } = renderer;\n\t// setup things\n\tpatchProcess(!!initData.environment.extensionTestsLocationURI); // to support other test frameworks like Jasmin that use process.exit (https://github.com/microsoft/vscode/issues/37708)\n\tinitData.environment.useHostProxy = args.useHostProxy !== undefined ? args.useHostProxy !== 'false' : undefined;\n\tinitData.environment.skipWorkspaceStorageLock = boolean(args.skipWorkspaceStorageLock, false);\n\n\t// host abstraction\n\tconst hostUtils = new class NodeHost implements IHostUtils {\n\t\tdeclare readonly _serviceBrand: undefined;\n\t\tpublic readonly pid = process.pid;\n\t\texit(code: number) { nativeExit(code); }\n\t\tfsExists(path: string) { return Promises.exists(path); }\n\t\tfsRealpath(path: string) { return realpath(path); }\n\t};\n\n\t// Attempt to load uri transformer\n\tlet uriTransformer: IURITransformer | null = null;\n\tif (initData.remote.authority && args.transformURIs) {\n\t\turiTransformer = createURITransformer(initData.remote.authority);\n\t}\n\n\tconst extensionHostMain = new ExtensionHostMain(\n\t\trenderer.protocol,\n\t\tinitData,\n\t\thostUtils,\n\t\turiTransformer\n\t);\n\n\t// rewrite onTerminate-function to be a proper shutdown\n\tonTerminate = (reason: string) => extensionHostMain.terminate(reason);\n}\n\nstartExtensionHostProcess().catch((err) => console.log(err));\n"]}