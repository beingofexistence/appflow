{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/node/extHostConsoleForwarder.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAOhG,MAAM,wBAAwB,GAAG,IAAI,GAAG,IAAI,CAAC;IAEtC,IAAM,IAAI,GAAV,MAAM,IAAwB,SAAQ,8BAAI;QAIhD,YACqB,UAAe,EACV,QAAa;YAEtC,KAAK,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;YANrB,MAAC,GAA+B,KAAK,CAAC;YAQ7C,IAAI,CAAC,CAAC,CAAW,QAAQ,EAAE,OAAO,CAAC,CAAC;YACpC,IAAI,CAAC,CAAC,CAAW,QAAQ,EAAE,KAAK,CAAC,CAAC;QACnC,CAAC;QAEkB,CAAC,CAAwB,MAAyC,EAAE,QAAkC,EAAE,IAAgB;YAC1I,MAAM,MAAM,GAAG,MAAM,KAAK,OAAO,IAAI,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC;YACzF,IAAI,CAAC,CAAC,GAAsB,IAAI,CAAC;YACjC,MAAM,CAAC,KAAK,CAAC,KAAK,+CAAsB,IAAI,CAAC,CAAC;YAC9C,QAAQ,CAAC,KAAK,CAAC,OAAO,EAAE,IAAW,CAAC,CAAC;YACrC,MAAM,CAAC,KAAK,CAAC,KAAK,2CAAoB,IAAI,CAAC,CAAC;YAC5C,IAAI,CAAC,CAAC,GAAsB,KAAK,CAAC;QACnC,CAAC;QAED;;;;;WAKG;QACK,CAAC,CAAW,UAA+B,EAAE,QAAkC;YACtF,MAAM,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;YACnC,MAAM,QAAQ,GAAG,MAAM,CAAC,KAAK,CAAC;YAE9B,IAAI,GAAG,GAAG,EAAE,CAAC;YAEb,MAAM,CAAC,cAAc,CAAC,MAAM,EAAE,OAAO,EAAE;gBACtC,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;gBACd,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,KAA0B,EAAE,QAAyB,EAAE,QAAgC,EAAE,EAAE;oBACtG,IAAI,CAAC,IAAI,CAAC,CAAC,EAAqB;wBAC/B,GAAG,IAAK,KAAa,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;wBACzC,MAAM,GAAG,GAAG,GAAG,CAAC,MAAM,GAAG,wBAAwB,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC;wBACvF,IAAI,GAAG,KAAK,CAAC,CAAC,EAAE;4BACf,OAAO,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;4BACrC,GAAG,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;yBACzB;qBACD;oBAED,QAAQ,CAAC,IAAI,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC;gBAClD,CAAC;aACD,CAAC,CAAC;QACJ,CAAC;KACD,CAAA;IAnDY,oBAAI;mBAAJ,IAAI;QAKd,WAAA,uBAAG,CAAA;QACH,WAAA,4BAAG,CAAA;OANO,IAAI,CAmDhB","file":"extHostConsoleForwarder.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { AbstractExtHostConsoleForwarder } from 'vs/workbench/api/common/extHostConsoleForwarder';\nimport { IExtHostInitDataService } from 'vs/workbench/api/common/extHostInitDataService';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { NativeLogMarkers } from 'vs/workbench/services/extensions/common/extensionHostProtocol';\n\nconst MAX_STREAM_BUFFER_LENGTH = 1024 * 1024;\n\nexport class ExtHostConsoleForwarder extends AbstractExtHostConsoleForwarder {\n\n\tprivate _isMakingConsoleCall: boolean = false;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n\t) {\n\t\tsuper(extHostRpc, initData);\n\n\t\tthis._wrapStream('stderr', 'error');\n\t\tthis._wrapStream('stdout', 'log');\n\t}\n\n\tprotected override _nativeConsoleLogMessage(method: 'log' | 'info' | 'warn' | 'error', original: (...args: any[]) => void, args: IArguments) {\n\t\tconst stream = method === 'error' || method === 'warn' ? process.stderr : process.stdout;\n\t\tthis._isMakingConsoleCall = true;\n\t\tstream.write(`\\n${NativeLogMarkers.Start}\\n`);\n\t\toriginal.apply(console, args as any);\n\t\tstream.write(`\\n${NativeLogMarkers.End}\\n`);\n\t\tthis._isMakingConsoleCall = false;\n\t}\n\n\t/**\n\t * Wraps process.stderr/stdout.write() so that it is transmitted to the\n\t * renderer or CLI. It both calls through to the original method as well\n\t * as to console.log with complete lines so that they're made available\n\t * to the debugger/CLI.\n\t */\n\tprivate _wrapStream(streamName: 'stdout' | 'stderr', severity: 'log' | 'warn' | 'error') {\n\t\tconst stream = process[streamName];\n\t\tconst original = stream.write;\n\n\t\tlet buf = '';\n\n\t\tObject.defineProperty(stream, 'write', {\n\t\t\tset: () => { },\n\t\t\tget: () => (chunk: Uint8Array | string, encoding?: BufferEncoding, callback?: (err?: Error) => void) => {\n\t\t\t\tif (!this._isMakingConsoleCall) {\n\t\t\t\t\tbuf += (chunk as any).toString(encoding);\n\t\t\t\t\tconst eol = buf.length > MAX_STREAM_BUFFER_LENGTH ? buf.length : buf.lastIndexOf('\\n');\n\t\t\t\t\tif (eol !== -1) {\n\t\t\t\t\t\tconsole[severity](buf.slice(0, eol));\n\t\t\t\t\t\tbuf = buf.slice(eol + 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\toriginal.call(stream, chunk, encoding, callback);\n\t\t\t},\n\t\t});\n\t}\n}\n"]}