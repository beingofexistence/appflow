{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/node/extHostDiskFileSystemProvider.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUzF,IAAM,IAAI,GAAV,MAAM,IAAI;QAEhB,YAC6B,yBAA+B,EAC9C,UAAe;YAG5B,qDAAqD;YACrD,wDAAwD;YACxD,8BAA8B;YAC9B,yBAAyB,CAAC,qBAAqB,CAAC,iBAAO,CAAC,IAAI,EAAE,IAAI,6BAA6B,CAAC,UAAU,CAAC,EAAE,EAAE,eAAe,EAAE,aAAE,EAAO,CAAC,CAAC;QAC5I,CAAC;KACD,CAAA;IAZY,oBAAI;mBAAJ,IAAI;QAGd,WAAA,gCAAI,CAAA;QACJ,WAAA,SAAG,CAAA;OAJO,IAAI,CAYhB;IAED,MAAM,6BAA6B;QAIlC,YAA6B,CAAe;YAAf,MAAC,GAAD,CAAC,CAAc;YAF3B,MAAC,GAAM,IAAI,4BAAG,CAAoB,IAAI,CAAC,CAAC,CAAU,CAAC;QAEZ,CAAC;QAEzD,KAAK,CAAC,IAAI,CAAC,GAAe;YACzB,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,CAAC,CAAI,IAAI,CAAC,GAAG,CAAC,CAAC;YAEvC,OAAO;gBACN,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,KAAK,EAAE,IAAI,CAAC,KAAK;gBACjB,IAAI,EAAE,IAAI,CAAC,IAAI;gBACf,WAAW,EAAE,IAAI,CAAC,WAAW,KAAK,sBAAc,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS;aACzE,CAAC;QACH,CAAC;QAED,aAAa,CAAC,GAAe;YAC5B,OAAO,IAAI,CAAC,CAAC,CAAI,OAAO,CAAC,GAAG,CAAC,CAAC;QAC/B,CAAC;QAED,eAAe,CAAC,GAAe;YAC9B,OAAO,IAAI,CAAC,CAAC,CAAI,KAAK,CAAC,GAAG,CAAC,CAAC;QAC7B,CAAC;QAED,QAAQ,CAAC,GAAe;YACvB,OAAO,IAAI,CAAC,CAAC,CAAI,QAAQ,CAAC,GAAG,CAAC,CAAC;QAChC,CAAC;QAED,SAAS,CAAC,GAAe,EAAE,OAAmB,EAAE,OAAkE;YACjH,OAAO,IAAI,CAAC,CAAC,CAAI,SAAS,CAAC,GAAG,EAAE,OAAO,EAAE,EAAE,GAAG,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;QACxF,CAAC;QAED,MAAM,CAAC,GAAe,EAAE,OAAwC;YAC/D,OAAO,IAAI,CAAC,CAAC,CAAI,MAAM,CAAC,GAAG,EAAE,EAAE,GAAG,OAAO,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC;QAC9E,CAAC;QAED,MAAM,CAAC,MAAkB,EAAE,MAAkB,EAAE,OAAwC;YACtF,OAAO,IAAI,CAAC,CAAC,CAAI,MAAM,CAAC,MAAM,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;QAClD,CAAC;QAED,IAAI,CAAC,MAAkB,EAAE,WAAuB,EAAE,OAAwC;YACzF,OAAO,IAAI,CAAC,CAAC,CAAI,IAAI,CAAC,MAAM,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;QACrD,CAAC;QAED,0BAA0B;QAE1B,IAAI,eAAe,KAAY,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC,CAAC,CAAC;QAC5E,KAAK,CAAC,GAAe,EAAE,OAA8E,IAAuB,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC,CAAC,CAAC;KACzK","file":"extHostDiskFileSystemProvider.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from 'vscode';\nimport { IExtHostConsumerFileSystem } from 'vs/workbench/api/common/extHostFileSystemConsumer';\nimport { Schemas } from 'vs/base/common/network';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { DiskFileSystemProvider } from 'vs/platform/files/node/diskFileSystemProvider';\nimport { FilePermission } from 'vs/platform/files/common/files';\nimport { isLinux } from 'vs/base/common/platform';\n\nexport class ExtHostDiskFileSystemProvider {\n\n\tconstructor(\n\t\t@IExtHostConsumerFileSystem extHostConsumerFileSystem: IExtHostConsumerFileSystem,\n\t\t@ILogService logService: ILogService\n\t) {\n\n\t\t// Register disk file system provider so that certain\n\t\t// file operations can execute fast within the extension\n\t\t// host without roundtripping.\n\t\textHostConsumerFileSystem.addFileSystemProvider(Schemas.file, new DiskFileSystemProviderAdapter(logService), { isCaseSensitive: isLinux });\n\t}\n}\n\nclass DiskFileSystemProviderAdapter implements vscode.FileSystemProvider {\n\n\tprivate readonly impl = new DiskFileSystemProvider(this.logService);\n\n\tconstructor(private readonly logService: ILogService) { }\n\n\tasync stat(uri: vscode.Uri): Promise<vscode.FileStat> {\n\t\tconst stat = await this.impl.stat(uri);\n\n\t\treturn {\n\t\t\ttype: stat.type,\n\t\t\tctime: stat.ctime,\n\t\t\tmtime: stat.mtime,\n\t\t\tsize: stat.size,\n\t\t\tpermissions: stat.permissions === FilePermission.Readonly ? 1 : undefined\n\t\t};\n\t}\n\n\treadDirectory(uri: vscode.Uri): Promise<[string, vscode.FileType][]> {\n\t\treturn this.impl.readdir(uri);\n\t}\n\n\tcreateDirectory(uri: vscode.Uri): Promise<void> {\n\t\treturn this.impl.mkdir(uri);\n\t}\n\n\treadFile(uri: vscode.Uri): Promise<Uint8Array> {\n\t\treturn this.impl.readFile(uri);\n\t}\n\n\twriteFile(uri: vscode.Uri, content: Uint8Array, options: { readonly create: boolean; readonly overwrite: boolean }): Promise<void> {\n\t\treturn this.impl.writeFile(uri, content, { ...options, unlock: false, atomic: false });\n\t}\n\n\tdelete(uri: vscode.Uri, options: { readonly recursive: boolean }): Promise<void> {\n\t\treturn this.impl.delete(uri, { ...options, useTrash: false, atomic: false });\n\t}\n\n\trename(oldUri: vscode.Uri, newUri: vscode.Uri, options: { readonly overwrite: boolean }): Promise<void> {\n\t\treturn this.impl.rename(oldUri, newUri, options);\n\t}\n\n\tcopy(source: vscode.Uri, destination: vscode.Uri, options: { readonly overwrite: boolean }): Promise<void> {\n\t\treturn this.impl.copy(source, destination, options);\n\t}\n\n\t// --- Not Implemented ---\n\n\tget onDidChangeFile(): never { throw new Error('Method not implemented.'); }\n\twatch(uri: vscode.Uri, options: { readonly recursive: boolean; readonly excludes: readonly string[] }): vscode.Disposable { throw new Error('Method not implemented.'); }\n}\n"]}