{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/test/common/extensionHostMain.test.ts"],"names":[],"mappings":"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","file":"extensionHostMain.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { SerializedError, errorHandler, onUnexpectedError } from 'vs/base/common/errors';\nimport { isFirefox, isSafari } from 'vs/base/common/platform';\nimport { TernarySearchTree } from 'vs/base/common/ternarySearchTree';\nimport { URI } from 'vs/base/common/uri';\nimport { mock } from 'vs/base/test/common/mock';\nimport { ExtensionIdentifier, IExtensionDescription, IRelaxedExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { InstantiationService } from 'vs/platform/instantiation/common/instantiationService';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { ILogService, NullLogService } from 'vs/platform/log/common/log';\nimport { MainThreadExtensionServiceShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { ExtensionPaths, IExtHostExtensionService } from 'vs/workbench/api/common/extHostExtensionService';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { IExtHostTelemetry } from 'vs/workbench/api/common/extHostTelemetry';\nimport { ErrorHandler } from 'vs/workbench/api/common/extensionHostMain';\nimport { nullExtensionDescription } from 'vs/workbench/services/extensions/common/extensions';\nimport { ProxyIdentifier, Proxied } from 'vs/workbench/services/extensions/common/proxyIdentifier';\n\n\nsuite('ExtensionHostMain#ErrorHandler - Wrapping prepareStackTrace can cause slowdown and eventual stack overflow #184926 ', function () {\n\n\tif (isFirefox || isSafari) {\n\t\treturn;\n\t}\n\n\tconst extensionsIndex = TernarySearchTree.forUris<IExtensionDescription>();\n\tconst mainThreadExtensionsService = new class extends mock<MainThreadExtensionServiceShape>() {\n\t\toverride $onExtensionRuntimeError(extensionId: ExtensionIdentifier, data: SerializedError): void {\n\n\t\t}\n\t};\n\n\tconst collection = new ServiceCollection(\n\t\t[ILogService, new NullLogService()],\n\t\t[IExtHostTelemetry, new class extends mock<IExtHostTelemetry>() {\n\t\t\tdeclare readonly _serviceBrand: undefined;\n\t\t\toverride onExtensionError(extension: ExtensionIdentifier, error: Error): boolean {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}],\n\t\t[IExtHostExtensionService, new class extends mock<IExtHostExtensionService & any>() {\n\t\t\tdeclare readonly _serviceBrand: undefined;\n\t\t\tgetExtensionPathIndex() {\n\t\t\t\treturn new class extends ExtensionPaths {\n\t\t\t\t\toverride findSubstr(key: URI): Readonly<IRelaxedExtensionDescription> | undefined {\n\t\t\t\t\t\tfindSubstrCount++;\n\t\t\t\t\t\treturn nullExtensionDescription;\n\t\t\t\t\t}\n\n\t\t\t\t}(extensionsIndex);\n\t\t\t}\n\t\t}],\n\t\t[IExtHostRpcService, new class extends mock<IExtHostRpcService>() {\n\t\t\tdeclare readonly _serviceBrand: undefined;\n\t\t\toverride getProxy<T>(identifier: ProxyIdentifier<T>): Proxied<T> {\n\t\t\t\treturn <any>mainThreadExtensionsService;\n\t\t\t}\n\t\t}]\n\t);\n\n\tconst originalPrepareStackTrace = Error.prepareStackTrace;\n\tconst insta = new InstantiationService(collection, false);\n\n\tlet existingErrorHandler: (e: any) => void;\n\tlet findSubstrCount = 0;\n\n\tsuiteSetup(async function () {\n\t\texistingErrorHandler = errorHandler.getUnexpectedErrorHandler();\n\t\tawait insta.invokeFunction(ErrorHandler.installFullHandler);\n\t});\n\n\tsuiteTeardown(function () {\n\t\terrorHandler.setUnexpectedErrorHandler(existingErrorHandler);\n\t});\n\n\tsetup(async function () {\n\t\tfindSubstrCount = 0;\n\t});\n\n\tteardown(() => {\n\t\tError.prepareStackTrace = originalPrepareStackTrace;\n\t});\n\n\ttest('basics', function () {\n\n\t\tconst err = new Error('test1');\n\n\t\tonUnexpectedError(err);\n\n\t\tassert.strictEqual(findSubstrCount, 1);\n\n\t});\n\n\ttest('set/reset prepareStackTrace-callback', function () {\n\n\t\tconst original = Error.prepareStackTrace;\n\t\tError.prepareStackTrace = (_error, _stack) => 'stack';\n\t\tconst probeErr = new Error();\n\t\tconst stack = probeErr.stack;\n\t\tassert.ok(stack);\n\t\tError.prepareStackTrace = original;\n\t\tassert.strictEqual(findSubstrCount, 1);\n\n\t\t// already checked\n\t\tonUnexpectedError(probeErr);\n\t\tassert.strictEqual(findSubstrCount, 1);\n\n\t\t// one more error\n\t\tconst err = new Error('test2');\n\t\tonUnexpectedError(err);\n\n\t\tassert.strictEqual(findSubstrCount, 2);\n\t});\n\n\ttest('wrap prepareStackTrace-callback', function () {\n\n\t\tfunction do_something_else(params: string) {\n\t\t\treturn params;\n\t\t}\n\n\t\tconst original = Error.prepareStackTrace;\n\t\tError.prepareStackTrace = (...args) => {\n\t\t\treturn do_something_else(original?.(...args));\n\t\t};\n\t\tconst probeErr = new Error();\n\t\tconst stack = probeErr.stack;\n\t\tassert.ok(stack);\n\n\n\t\tonUnexpectedError(probeErr);\n\t\tassert.strictEqual(findSubstrCount, 1);\n\t});\n\n\ttest('prevent rewrapping', function () {\n\n\t\tlet do_something_count = 0;\n\t\tfunction do_something(params: any) {\n\t\t\tdo_something_count++;\n\t\t}\n\n\t\tError.prepareStackTrace = (result, stack) => {\n\t\t\tdo_something(stack);\n\t\t\treturn 'fakestack';\n\t\t};\n\n\t\tfor (let i = 0; i < 2_500; ++i) {\n\t\t\tError.prepareStackTrace = Error.prepareStackTrace;\n\t\t}\n\n\t\tconst probeErr = new Error();\n\t\tconst stack = probeErr.stack;\n\t\tassert.strictEqual(stack, 'fakestack');\n\n\t\tonUnexpectedError(probeErr);\n\t\tassert.strictEqual(findSubstrCount, 1);\n\n\t\tconst probeErr2 = new Error();\n\t\tonUnexpectedError(probeErr2);\n\t\tassert.strictEqual(findSubstrCount, 2);\n\t\tassert.strictEqual(do_something_count, 2);\n\t});\n\n\n\tsuite('https://gist.github.com/thecrypticace/f0f2e182082072efdaf0f8e1537d2cce', function () {\n\n\t\ttest(\"Restored, separate operations\", () => {\n\t\t\t// Actual Test\n\t\t\tlet original;\n\n\t\t\t// Operation 1\n\t\t\toriginal = Error.prepareStackTrace;\n\t\t\tfor (let i = 0; i < 12_500; ++i) { Error.prepareStackTrace = Error.prepareStackTrace; }\n\t\t\tconst err1 = new Error();\n\t\t\tassert.ok(err1.stack);\n\t\t\tassert.strictEqual(findSubstrCount, 1);\n\t\t\tError.prepareStackTrace = original;\n\n\t\t\t// Operation 2\n\t\t\toriginal = Error.prepareStackTrace;\n\t\t\tfor (let i = 0; i < 12_500; ++i) { Error.prepareStackTrace = Error.prepareStackTrace; }\n\t\t\tassert.ok(new Error().stack);\n\t\t\tassert.strictEqual(findSubstrCount, 2);\n\t\t\tError.prepareStackTrace = original;\n\n\t\t\t// Operation 3\n\t\t\toriginal = Error.prepareStackTrace;\n\t\t\tfor (let i = 0; i < 12_500; ++i) { Error.prepareStackTrace = Error.prepareStackTrace; }\n\t\t\tassert.ok(new Error().stack);\n\t\t\tassert.strictEqual(findSubstrCount, 3);\n\t\t\tError.prepareStackTrace = original;\n\n\t\t\t// Operation 4\n\t\t\toriginal = Error.prepareStackTrace;\n\t\t\tfor (let i = 0; i < 12_500; ++i) { Error.prepareStackTrace = Error.prepareStackTrace; }\n\t\t\tassert.ok(new Error().stack);\n\t\t\tassert.strictEqual(findSubstrCount, 4);\n\t\t\tError.prepareStackTrace = original;\n\n\t\t\t// Back to Operation 1\n\t\t\tassert.ok(err1.stack);\n\t\t\tassert.strictEqual(findSubstrCount, 4);\n\t\t});\n\n\t\ttest(\"Never restored, separate operations\", () => {\n\t\t\t// Operation 1\n\t\t\tfor (let i = 0; i < 12_500; ++i) { Error.prepareStackTrace = Error.prepareStackTrace; }\n\t\t\tassert.ok(new Error().stack);\n\n\t\t\t// Operation 2\n\t\t\tfor (let i = 0; i < 12_500; ++i) { Error.prepareStackTrace = Error.prepareStackTrace; }\n\t\t\tassert.ok(new Error().stack);\n\n\t\t\t// Operation 3\n\t\t\tfor (let i = 0; i < 12_500; ++i) { Error.prepareStackTrace = Error.prepareStackTrace; }\n\t\t\tassert.ok(new Error().stack);\n\n\t\t\t// Operation 4\n\t\t\tfor (let i = 0; i < 12_500; ++i) { Error.prepareStackTrace = Error.prepareStackTrace; }\n\t\t\tassert.ok(new Error().stack);\n\t\t});\n\n\t\ttest(\"Restored, too many uses before restoration\", async () => {\n\t\t\tconst original = Error.prepareStackTrace;\n\t\t\tError.prepareStackTrace = (_, stack) => stack;\n\n\t\t\t// Operation 1 — more uses of `prepareStackTrace`\n\t\t\tfor (let i = 0; i < 10_000; ++i) { Error.prepareStackTrace = Error.prepareStackTrace; }\n\t\t\tassert.ok(new Error().stack);\n\n\t\t\tError.prepareStackTrace = original;\n\t\t});\n\t});\n});\n"]}