{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/test/browser/extHostTelemetry.test.ts"],"names":[],"mappings":"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","file":"extHostTelemetry.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { URI } from 'vs/base/common/uri';\nimport { ExtensionIdentifier, IExtensionDescription, TargetPlatform } from 'vs/platform/extensions/common/extensions';\nimport { DEFAULT_LOG_LEVEL, LogLevel } from 'vs/platform/log/common/log';\nimport { TelemetryLevel } from 'vs/platform/telemetry/common/telemetry';\nimport { TestTelemetryLoggerService } from 'vs/platform/telemetry/test/common/telemetryLogAppender.test';\nimport { IExtHostInitDataService } from 'vs/workbench/api/common/extHostInitDataService';\nimport { ExtHostTelemetry, ExtHostTelemetryLogger } from 'vs/workbench/api/common/extHostTelemetry';\nimport { IEnvironment } from 'vs/workbench/services/extensions/common/extensionHostProtocol';\nimport { mock } from 'vs/workbench/test/common/workbenchTestServices';\nimport type { TelemetryLoggerOptions, TelemetrySender } from 'vscode';\n\ninterface TelemetryLoggerSpy {\n\tdataArr: any[];\n\texceptionArr: any[];\n\tflushCalled: boolean;\n}\n\nsuite('ExtHostTelemetry', function () {\n\n\tconst mockEnvironment: IEnvironment = {\n\t\tisExtensionDevelopmentDebug: false,\n\t\textensionDevelopmentLocationURI: undefined,\n\t\textensionTestsLocationURI: undefined,\n\t\tappRoot: undefined,\n\t\tappName: 'test',\n\t\textensionTelemetryLogResource: URI.parse('fake'),\n\t\tisExtensionTelemetryLoggingOnly: false,\n\t\tappHost: 'test',\n\t\tappLanguage: 'en',\n\t\tglobalStorageHome: URI.parse('fake'),\n\t\tworkspaceStorageHome: URI.parse('fake'),\n\t\tappUriScheme: 'test',\n\t};\n\n\tconst mockTelemetryInfo = {\n\t\tfirstSessionDate: '2020-01-01T00:00:00.000Z',\n\t\tsessionId: 'test',\n\t\tmachineId: 'test',\n\t};\n\n\tconst mockRemote = {\n\t\tauthority: 'test',\n\t\tisRemote: false,\n\t\tconnectionData: null\n\t};\n\n\tconst mockExtensionIdentifier: IExtensionDescription = {\n\t\tidentifier: new ExtensionIdentifier('test-extension'),\n\t\ttargetPlatform: TargetPlatform.UNIVERSAL,\n\t\tisBuiltin: true,\n\t\tisUserBuiltin: true,\n\t\tisUnderDevelopment: true,\n\t\tname: 'test-extension',\n\t\tpublisher: 'vscode',\n\t\tversion: '1.0.0',\n\t\tengines: { vscode: '*' },\n\t\textensionLocation: URI.parse('fake')\n\t};\n\n\tconst createExtHostTelemetry = () => {\n\t\tconst extensionTelemetry = new ExtHostTelemetry(new class extends mock<IExtHostInitDataService>() {\n\t\t\toverride environment: IEnvironment = mockEnvironment;\n\t\t\toverride telemetryInfo = mockTelemetryInfo;\n\t\t\toverride remote = mockRemote;\n\t\t}, new TestTelemetryLoggerService(DEFAULT_LOG_LEVEL));\n\t\textensionTelemetry.$initializeTelemetryLevel(TelemetryLevel.USAGE, true, { usage: true, error: true });\n\t\treturn extensionTelemetry;\n\t};\n\n\tconst createLogger = (functionSpy: TelemetryLoggerSpy, extHostTelemetry?: ExtHostTelemetry, options?: TelemetryLoggerOptions) => {\n\t\tconst extensionTelemetry = extHostTelemetry ?? createExtHostTelemetry();\n\t\t// This is the appender which the extension would contribute\n\t\tconst appender: TelemetrySender = {\n\t\t\tsendEventData: (eventName: string, data) => {\n\t\t\t\tfunctionSpy.dataArr.push({ eventName, data });\n\t\t\t},\n\t\t\tsendErrorData: (exception, data) => {\n\t\t\t\tfunctionSpy.exceptionArr.push({ exception, data });\n\t\t\t},\n\t\t\tflush: () => {\n\t\t\t\tfunctionSpy.flushCalled = true;\n\t\t\t}\n\t\t};\n\n\t\tconst logger = extensionTelemetry.instantiateLogger(mockExtensionIdentifier, appender, options);\n\t\treturn logger;\n\t};\n\n\ttest('Validate sender instances', function () {\n\t\tassert.throws(() => ExtHostTelemetryLogger.validateSender(<any>null));\n\t\tassert.throws(() => ExtHostTelemetryLogger.validateSender(<any>1));\n\t\tassert.throws(() => ExtHostTelemetryLogger.validateSender(<any>{}));\n\t\tassert.throws(() => {\n\t\t\tExtHostTelemetryLogger.validateSender(<any>{\n\t\t\t\tsendErrorData: () => { },\n\t\t\t\tsendEventData: true\n\t\t\t});\n\t\t});\n\t\tassert.throws(() => {\n\t\t\tExtHostTelemetryLogger.validateSender(<any>{\n\t\t\t\tsendErrorData: 123,\n\t\t\t\tsendEventData: () => { },\n\t\t\t});\n\t\t});\n\t\tassert.throws(() => {\n\t\t\tExtHostTelemetryLogger.validateSender(<any>{\n\t\t\t\tsendErrorData: () => { },\n\t\t\t\tsendEventData: () => { },\n\t\t\t\tflush: true\n\t\t\t});\n\t\t});\n\t});\n\n\ttest('Ensure logger gets proper telemetry level during initialization', function () {\n\t\tconst extensionTelemetry = createExtHostTelemetry();\n\t\tlet config = extensionTelemetry.getTelemetryDetails();\n\t\tassert.strictEqual(config.isCrashEnabled, true);\n\t\tassert.strictEqual(config.isUsageEnabled, true);\n\t\tassert.strictEqual(config.isErrorsEnabled, true);\n\n\t\t// Initialize would never be called twice, but this is just for testing\n\t\textensionTelemetry.$initializeTelemetryLevel(TelemetryLevel.ERROR, true, { usage: true, error: true });\n\t\tconfig = extensionTelemetry.getTelemetryDetails();\n\t\tassert.strictEqual(config.isCrashEnabled, true);\n\t\tassert.strictEqual(config.isUsageEnabled, false);\n\t\tassert.strictEqual(config.isErrorsEnabled, true);\n\n\t\textensionTelemetry.$initializeTelemetryLevel(TelemetryLevel.CRASH, true, { usage: true, error: true });\n\t\tconfig = extensionTelemetry.getTelemetryDetails();\n\t\tassert.strictEqual(config.isCrashEnabled, true);\n\t\tassert.strictEqual(config.isUsageEnabled, false);\n\t\tassert.strictEqual(config.isErrorsEnabled, false);\n\n\t\textensionTelemetry.$initializeTelemetryLevel(TelemetryLevel.USAGE, true, { usage: false, error: true });\n\t\tconfig = extensionTelemetry.getTelemetryDetails();\n\t\tassert.strictEqual(config.isCrashEnabled, true);\n\t\tassert.strictEqual(config.isUsageEnabled, false);\n\t\tassert.strictEqual(config.isErrorsEnabled, true);\n\t});\n\n\ttest('Simple log event to TelemetryLogger', function () {\n\t\tconst functionSpy: TelemetryLoggerSpy = { dataArr: [], exceptionArr: [], flushCalled: false };\n\n\t\tconst logger = createLogger(functionSpy);\n\n\t\tlogger.logUsage('test-event', { 'test-data': 'test-data' });\n\t\tassert.strictEqual(functionSpy.dataArr.length, 1);\n\t\tassert.strictEqual(functionSpy.dataArr[0].eventName, `${mockExtensionIdentifier.name}/test-event`);\n\t\tassert.strictEqual(functionSpy.dataArr[0].data['test-data'], 'test-data');\n\n\t\tlogger.logUsage('test-event', { 'test-data': 'test-data' });\n\t\tassert.strictEqual(functionSpy.dataArr.length, 2);\n\n\t\tlogger.logError('test-event', { 'test-data': 'test-data' });\n\t\tassert.strictEqual(functionSpy.dataArr.length, 3);\n\n\t\tlogger.logError(new Error('test-error'), { 'test-data': 'test-data' });\n\t\tassert.strictEqual(functionSpy.dataArr.length, 3);\n\t\tassert.strictEqual(functionSpy.exceptionArr.length, 1);\n\n\n\t\t// Assert not flushed\n\t\tassert.strictEqual(functionSpy.flushCalled, false);\n\n\t\t// Call flush and assert that flush occurs\n\t\tlogger.dispose();\n\t\tassert.strictEqual(functionSpy.flushCalled, true);\n\n\t});\n\n\ttest('Simple log event to TelemetryLogger with options', function () {\n\t\tconst functionSpy: TelemetryLoggerSpy = { dataArr: [], exceptionArr: [], flushCalled: false };\n\n\t\tconst logger = createLogger(functionSpy, undefined, { additionalCommonProperties: { 'common.foo': 'bar' } });\n\n\t\tlogger.logUsage('test-event', { 'test-data': 'test-data' });\n\t\tassert.strictEqual(functionSpy.dataArr.length, 1);\n\t\tassert.strictEqual(functionSpy.dataArr[0].eventName, `${mockExtensionIdentifier.name}/test-event`);\n\t\tassert.strictEqual(functionSpy.dataArr[0].data['test-data'], 'test-data');\n\t\tassert.strictEqual(functionSpy.dataArr[0].data['common.foo'], 'bar');\n\n\t\tlogger.logUsage('test-event', { 'test-data': 'test-data' });\n\t\tassert.strictEqual(functionSpy.dataArr.length, 2);\n\n\t\tlogger.logError('test-event', { 'test-data': 'test-data' });\n\t\tassert.strictEqual(functionSpy.dataArr.length, 3);\n\n\t\tlogger.logError(new Error('test-error'), { 'test-data': 'test-data' });\n\t\tassert.strictEqual(functionSpy.dataArr.length, 3);\n\t\tassert.strictEqual(functionSpy.exceptionArr.length, 1);\n\n\n\t\t// Assert not flushed\n\t\tassert.strictEqual(functionSpy.flushCalled, false);\n\n\t\t// Call flush and assert that flush occurs\n\t\tlogger.dispose();\n\t\tassert.strictEqual(functionSpy.flushCalled, true);\n\n\t});\n\n\n\ttest('Ensure logger properly cleans PII', function () {\n\t\tconst functionSpy: TelemetryLoggerSpy = { dataArr: [], exceptionArr: [], flushCalled: false };\n\n\t\tconst logger = createLogger(functionSpy);\n\n\t\t// Log an event with a bunch of PII, this should all get cleaned out\n\t\tlogger.logUsage('test-event', {\n\t\t\t'fake-password': 'pwd=123',\n\t\t\t'fake-email': 'no-reply@example.com',\n\t\t\t'fake-token': 'token=123',\n\t\t\t'fake-slack-token': 'xoxp-123',\n\t\t\t'fake-path': '/Users/username/.vscode/extensions',\n\t\t});\n\n\t\tassert.strictEqual(functionSpy.dataArr.length, 1);\n\t\tassert.strictEqual(functionSpy.dataArr[0].eventName, `${mockExtensionIdentifier.name}/test-event`);\n\t\tassert.strictEqual(functionSpy.dataArr[0].data['fake-password'], '<REDACTED: Generic Secret>');\n\t\tassert.strictEqual(functionSpy.dataArr[0].data['fake-email'], '<REDACTED: Email>');\n\t\tassert.strictEqual(functionSpy.dataArr[0].data['fake-token'], '<REDACTED: Generic Secret>');\n\t\tassert.strictEqual(functionSpy.dataArr[0].data['fake-slack-token'], '<REDACTED: Slack Token>');\n\t\tassert.strictEqual(functionSpy.dataArr[0].data['fake-path'], '<REDACTED: user-file-path>');\n\t});\n\n\ttest('Ensure output channel is logged to', function () {\n\n\t\t// Have to re-duplicate code here because I the logger service isn't exposed in the simple setup functions\n\t\tconst loggerService = new TestTelemetryLoggerService(LogLevel.Trace);\n\t\tconst extensionTelemetry = new ExtHostTelemetry(new class extends mock<IExtHostInitDataService>() {\n\t\t\toverride environment: IEnvironment = mockEnvironment;\n\t\t\toverride telemetryInfo = mockTelemetryInfo;\n\t\t\toverride remote = mockRemote;\n\t\t}, loggerService);\n\t\textensionTelemetry.$initializeTelemetryLevel(TelemetryLevel.USAGE, true, { usage: true, error: true });\n\n\t\tconst functionSpy: TelemetryLoggerSpy = { dataArr: [], exceptionArr: [], flushCalled: false };\n\n\t\tconst logger = createLogger(functionSpy, extensionTelemetry);\n\n\t\t// Ensure headers are logged on instantiation\n\t\tassert.strictEqual(loggerService.createLogger().logs.length, 2);\n\n\t\tlogger.logUsage('test-event', { 'test-data': 'test-data' });\n\t\t// Initial header is logged then the event\n\t\tconst logs = loggerService.createLogger().logs;\n\t\tconsole.log(logs[0]);\n\t\tassert.strictEqual(loggerService.createLogger().logs.length, 3);\n\t\tassert.ok(loggerService.createLogger().logs[2].startsWith('test-extension/test-event'));\n\t});\n});\n"]}