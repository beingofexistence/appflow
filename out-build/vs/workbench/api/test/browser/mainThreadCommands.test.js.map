{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/test/browser/mainThreadCommands.test.ts"],"names":[],"mappings":"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","file":"mainThreadCommands.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { MainThreadCommands } from 'vs/workbench/api/browser/mainThreadCommands';\nimport { CommandsRegistry, ICommandService } from 'vs/platform/commands/common/commands';\nimport { SingleProxyRPCProtocol } from 'vs/workbench/api/test/common/testRPCProtocol';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { mock } from 'vs/base/test/common/mock';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nsuite('MainThreadCommands', function () {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('dispose on unregister', function () {\n\n\t\tconst commands = new MainThreadCommands(SingleProxyRPCProtocol(null), undefined!, new class extends mock<IExtensionService>() { });\n\t\tassert.strictEqual(CommandsRegistry.getCommand('foo'), undefined);\n\n\t\t// register\n\t\tcommands.$registerCommand('foo');\n\t\tassert.ok(CommandsRegistry.getCommand('foo'));\n\n\t\t// unregister\n\t\tcommands.$unregisterCommand('foo');\n\t\tassert.strictEqual(CommandsRegistry.getCommand('foo'), undefined);\n\n\t\tcommands.dispose();\n\n\t});\n\n\ttest('unregister all on dispose', function () {\n\n\t\tconst commands = new MainThreadCommands(SingleProxyRPCProtocol(null), undefined!, new class extends mock<IExtensionService>() { });\n\t\tassert.strictEqual(CommandsRegistry.getCommand('foo'), undefined);\n\n\t\tcommands.$registerCommand('foo');\n\t\tcommands.$registerCommand('bar');\n\n\t\tassert.ok(CommandsRegistry.getCommand('foo'));\n\t\tassert.ok(CommandsRegistry.getCommand('bar'));\n\n\t\tcommands.dispose();\n\n\t\tassert.strictEqual(CommandsRegistry.getCommand('foo'), undefined);\n\t\tassert.strictEqual(CommandsRegistry.getCommand('bar'), undefined);\n\t});\n\n\ttest('activate and throw when needed', async function () {\n\n\t\tconst activations: string[] = [];\n\t\tconst runs: string[] = [];\n\n\t\tconst commands = new MainThreadCommands(\n\t\t\tSingleProxyRPCProtocol(null),\n\t\t\tnew class extends mock<ICommandService>() {\n\t\t\t\toverride executeCommand<T>(id: string): Promise<T | undefined> {\n\t\t\t\t\truns.push(id);\n\t\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t\t}\n\t\t\t},\n\t\t\tnew class extends mock<IExtensionService>() {\n\t\t\t\toverride activateByEvent(id: string) {\n\t\t\t\t\tactivations.push(id);\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\n\t\t// case 1: arguments and retry\n\t\ttry {\n\t\t\tactivations.length = 0;\n\t\t\tawait commands.$executeCommand('bazz', [1, 2, { n: 3 }], true);\n\t\t\tassert.ok(false);\n\t\t} catch (e) {\n\t\t\tassert.deepStrictEqual(activations, ['onCommand:bazz']);\n\t\t\tassert.strictEqual((<Error>e).message, '$executeCommand:retry');\n\t\t}\n\n\t\t// case 2: no arguments and retry\n\t\truns.length = 0;\n\t\tawait commands.$executeCommand('bazz', [], true);\n\t\tassert.deepStrictEqual(runs, ['bazz']);\n\n\t\t// case 3: arguments and no retry\n\t\truns.length = 0;\n\t\tawait commands.$executeCommand('bazz', [1, 2, true], false);\n\t\tassert.deepStrictEqual(runs, ['bazz']);\n\n\t\tcommands.dispose();\n\t});\n});\n"]}