{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/test/browser/mainThreadManagedSockets.test.ts"],"names":[],"mappings":"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","file":"mainThreadManagedSockets.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { disposableTimeout, timeout } from 'vs/base/common/async';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { Emitter } from 'vs/base/common/event';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { SocketCloseEvent } from 'vs/base/parts/ipc/common/ipc.net';\nimport { mock } from 'vs/base/test/common/mock';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { RemoteSocketHalf } from 'vs/platform/remote/common/managedSocket';\nimport { MainThreadManagedSocket } from 'vs/workbench/api/browser/mainThreadManagedSockets';\nimport { ExtHostManagedSocketsShape } from 'vs/workbench/api/common/extHost.protocol';\n\nsuite('MainThreadManagedSockets', () => {\n\n\tconst ds = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('ManagedSocket', () => {\n\t\tlet extHost: ExtHostMock;\n\t\tlet half: RemoteSocketHalf;\n\n\t\tclass ExtHostMock extends mock<ExtHostManagedSocketsShape>() {\n\t\t\tprivate onDidFire = new Emitter<void>();\n\t\t\tpublic readonly events: any[] = [];\n\n\t\t\toverride $remoteSocketWrite(socketId: number, buffer: VSBuffer): void {\n\t\t\t\tthis.events.push({ socketId, data: buffer.toString() });\n\t\t\t\tthis.onDidFire.fire();\n\t\t\t}\n\n\t\t\toverride $remoteSocketDrain(socketId: number) {\n\t\t\t\tthis.events.push({ socketId, event: 'drain' });\n\t\t\t\tthis.onDidFire.fire();\n\t\t\t\treturn Promise.resolve();\n\t\t\t}\n\n\t\t\toverride $remoteSocketEnd(socketId: number) {\n\t\t\t\tthis.events.push({ socketId, event: 'end' });\n\t\t\t\tthis.onDidFire.fire();\n\t\t\t}\n\n\t\t\texpectEvent(test: (evt: any) => void, message: string) {\n\t\t\t\tif (this.events.some(test)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst d = new DisposableStore();\n\t\t\t\treturn new Promise<void>(resolve => {\n\t\t\t\t\td.add(this.onDidFire.event(() => {\n\t\t\t\t\t\tif (this.events.some(test)) {\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}));\n\t\t\t\t\td.add(disposableTimeout(() => {\n\t\t\t\t\t\tthrow new Error(`Expected ${message} but only had ${JSON.stringify(this.events, null, 2)}`);\n\t\t\t\t\t}, 1000));\n\t\t\t\t}).finally(() => d.dispose());\n\t\t\t}\n\t\t}\n\n\t\tsetup(() => {\n\t\t\textHost = new ExtHostMock();\n\t\t\thalf = {\n\t\t\t\tonClose: new Emitter<SocketCloseEvent>(),\n\t\t\t\tonData: new Emitter<VSBuffer>(),\n\t\t\t\tonEnd: new Emitter<void>(),\n\t\t\t};\n\t\t});\n\n\t\tasync function doConnect() {\n\t\t\tconst socket = MainThreadManagedSocket.connect(1, extHost, '/hello', 'world=true', '', half);\n\t\t\tawait extHost.expectEvent(evt => evt.data && evt.data.startsWith('GET ws://localhost/hello?world=true&skipWebSocketFrames=true HTTP/1.1\\r\\nConnection: Upgrade\\r\\nUpgrade: websocket\\r\\nSec-WebSocket-Key:'), 'websocket open event');\n\t\t\thalf.onData.fire(VSBuffer.fromString('Opened successfully ;)\\r\\n\\r\\n'));\n\t\t\treturn ds.add(await socket);\n\t\t}\n\n\t\ttest('connects', async () => {\n\t\t\tawait doConnect();\n\t\t});\n\n\t\ttest('includes trailing connection data', async () => {\n\t\t\tconst socketProm = MainThreadManagedSocket.connect(1, extHost, '/hello', 'world=true', '', half);\n\t\t\tawait extHost.expectEvent(evt => evt.data && evt.data.includes('GET ws://localhost'), 'websocket open event');\n\t\t\thalf.onData.fire(VSBuffer.fromString('Opened successfully ;)\\r\\n\\r\\nSome trailing data'));\n\t\t\tconst socket = ds.add(await socketProm);\n\n\t\t\tconst data: string[] = [];\n\t\t\tds.add(socket.onData(d => data.push(d.toString())));\n\t\t\tawait timeout(1); // allow microtasks to flush\n\t\t\tassert.deepStrictEqual(data, ['Some trailing data']);\n\t\t});\n\n\t\ttest('round trips data', async () => {\n\t\t\tconst socket = await doConnect();\n\t\t\tconst data: string[] = [];\n\t\t\tds.add(socket.onData(d => data.push(d.toString())));\n\n\t\t\tsocket.write(VSBuffer.fromString('ping'));\n\t\t\tawait extHost.expectEvent(evt => evt.data === 'ping', 'expected ping');\n\t\t\thalf.onData.fire(VSBuffer.fromString(\"pong\"));\n\t\t\tassert.deepStrictEqual(data, ['pong']);\n\t\t});\n\t});\n});\n"]}