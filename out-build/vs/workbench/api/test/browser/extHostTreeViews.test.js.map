{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/test/browser/extHostTreeViews.test.ts"],"names":[],"mappings":"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","file":"extHostTreeViews.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as sinon from 'sinon';\nimport { Emitter } from 'vs/base/common/event';\nimport { ExtHostTreeViews } from 'vs/workbench/api/common/extHostTreeViews';\nimport { ExtHostCommands } from 'vs/workbench/api/common/extHostCommands';\nimport { MainThreadTreeViewsShape, MainContext, MainThreadCommandsShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { TreeDataProvider, TreeItem } from 'vscode';\nimport { TestRPCProtocol } from 'vs/workbench/api/test/common/testRPCProtocol';\nimport { mock } from 'vs/base/test/common/mock';\nimport { TreeItemCollapsibleState, ITreeItem, IRevealOptions } from 'vs/workbench/common/views';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport type { IDisposable } from 'vs/base/common/lifecycle';\nimport { nullExtensionDescription as extensionsDescription } from 'vs/workbench/services/extensions/common/extensions';\nimport { runWithFakedTimers } from 'vs/base/test/common/timeTravelScheduler';\nimport { IExtHostTelemetry } from 'vs/workbench/api/common/extHostTelemetry';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nsuite('ExtHostTreeView', function () {\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tclass RecordingShape extends mock<MainThreadTreeViewsShape>() {\n\n\t\tonRefresh = new Emitter<{ [treeItemHandle: string]: ITreeItem }>();\n\n\t\toverride async $registerTreeViewDataProvider(treeViewId: string): Promise<void> {\n\t\t}\n\n\t\toverride $refresh(viewId: string, itemsToRefresh: { [treeItemHandle: string]: ITreeItem }): Promise<void> {\n\t\t\treturn Promise.resolve(null).then(() => {\n\t\t\t\tthis.onRefresh.fire(itemsToRefresh);\n\t\t\t});\n\t\t}\n\n\t\toverride $reveal(treeViewId: string, itemInfo: { item: ITreeItem; parentChain: ITreeItem[] } | undefined, options: IRevealOptions): Promise<void> {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\toverride $disposeTree(treeViewId: string): Promise<void> {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t}\n\n\tlet testObject: ExtHostTreeViews;\n\tlet target: RecordingShape;\n\tlet onDidChangeTreeNode: Emitter<{ key: string } | undefined>;\n\tlet onDidChangeTreeNodeWithId: Emitter<{ key: string }>;\n\tlet tree: { [key: string]: any };\n\tlet labels: { [key: string]: string };\n\tlet nodes: { [key: string]: { key: string } };\n\n\tsetup(() => {\n\t\ttree = {\n\t\t\t'a': {\n\t\t\t\t'aa': {},\n\t\t\t\t'ab': {}\n\t\t\t},\n\t\t\t'b': {\n\t\t\t\t'ba': {},\n\t\t\t\t'bb': {}\n\t\t\t}\n\t\t};\n\n\t\tlabels = {};\n\t\tnodes = {};\n\n\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\trpcProtocol.set(MainContext.MainThreadCommands, new class extends mock<MainThreadCommandsShape>() {\n\t\t\toverride $registerCommand() { }\n\t\t});\n\t\ttarget = new RecordingShape();\n\t\ttestObject = store.add(new ExtHostTreeViews(target, new ExtHostCommands(\n\t\t\trpcProtocol,\n\t\t\tnew NullLogService(),\n\t\t\tnew class extends mock<IExtHostTelemetry>() {\n\t\t\t\toverride onExtensionError(): boolean {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t), new NullLogService()));\n\t\tonDidChangeTreeNode = new Emitter<{ key: string } | undefined>();\n\t\tonDidChangeTreeNodeWithId = new Emitter<{ key: string }>();\n\t\ttestObject.createTreeView('testNodeTreeProvider', { treeDataProvider: aNodeTreeDataProvider() }, extensionsDescription);\n\t\ttestObject.createTreeView('testNodeWithIdTreeProvider', { treeDataProvider: aNodeWithIdTreeDataProvider() }, extensionsDescription);\n\t\ttestObject.createTreeView('testNodeWithHighlightsTreeProvider', { treeDataProvider: aNodeWithHighlightedLabelTreeDataProvider() }, extensionsDescription);\n\n\t\treturn loadCompleteTree('testNodeTreeProvider');\n\t});\n\n\ttest('construct node tree', () => {\n\t\treturn testObject.$getChildren('testNodeTreeProvider')\n\t\t\t.then(elements => {\n\t\t\t\tconst actuals = elements?.map(e => e.handle);\n\t\t\t\tassert.deepStrictEqual(actuals, ['0/0:a', '0/0:b']);\n\t\t\t\treturn Promise.all([\n\t\t\t\t\ttestObject.$getChildren('testNodeTreeProvider', '0/0:a')\n\t\t\t\t\t\t.then(children => {\n\t\t\t\t\t\t\tconst actuals = children?.map(e => e.handle);\n\t\t\t\t\t\t\tassert.deepStrictEqual(actuals, ['0/0:a/0:aa', '0/0:a/0:ab']);\n\t\t\t\t\t\t\treturn Promise.all([\n\t\t\t\t\t\t\t\ttestObject.$getChildren('testNodeTreeProvider', '0/0:a/0:aa').then(children => assert.strictEqual(children?.length, 0)),\n\t\t\t\t\t\t\t\ttestObject.$getChildren('testNodeTreeProvider', '0/0:a/0:ab').then(children => assert.strictEqual(children?.length, 0))\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t}),\n\t\t\t\t\ttestObject.$getChildren('testNodeTreeProvider', '0/0:b')\n\t\t\t\t\t\t.then(children => {\n\t\t\t\t\t\t\tconst actuals = children?.map(e => e.handle);\n\t\t\t\t\t\t\tassert.deepStrictEqual(actuals, ['0/0:b/0:ba', '0/0:b/0:bb']);\n\t\t\t\t\t\t\treturn Promise.all([\n\t\t\t\t\t\t\t\ttestObject.$getChildren('testNodeTreeProvider', '0/0:b/0:ba').then(children => assert.strictEqual(children?.length, 0)),\n\t\t\t\t\t\t\t\ttestObject.$getChildren('testNodeTreeProvider', '0/0:b/0:bb').then(children => assert.strictEqual(children?.length, 0))\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t})\n\t\t\t\t]);\n\t\t\t});\n\t});\n\n\ttest('construct id tree', () => {\n\t\treturn testObject.$getChildren('testNodeWithIdTreeProvider')\n\t\t\t.then(elements => {\n\t\t\t\tconst actuals = elements?.map(e => e.handle);\n\t\t\t\tassert.deepStrictEqual(actuals, ['1/a', '1/b']);\n\t\t\t\treturn Promise.all([\n\t\t\t\t\ttestObject.$getChildren('testNodeWithIdTreeProvider', '1/a')\n\t\t\t\t\t\t.then(children => {\n\t\t\t\t\t\t\tconst actuals = children?.map(e => e.handle);\n\t\t\t\t\t\t\tassert.deepStrictEqual(actuals, ['1/aa', '1/ab']);\n\t\t\t\t\t\t\treturn Promise.all([\n\t\t\t\t\t\t\t\ttestObject.$getChildren('testNodeWithIdTreeProvider', '1/aa').then(children => assert.strictEqual(children?.length, 0)),\n\t\t\t\t\t\t\t\ttestObject.$getChildren('testNodeWithIdTreeProvider', '1/ab').then(children => assert.strictEqual(children?.length, 0))\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t}),\n\t\t\t\t\ttestObject.$getChildren('testNodeWithIdTreeProvider', '1/b')\n\t\t\t\t\t\t.then(children => {\n\t\t\t\t\t\t\tconst actuals = children?.map(e => e.handle);\n\t\t\t\t\t\t\tassert.deepStrictEqual(actuals, ['1/ba', '1/bb']);\n\t\t\t\t\t\t\treturn Promise.all([\n\t\t\t\t\t\t\t\ttestObject.$getChildren('testNodeWithIdTreeProvider', '1/ba').then(children => assert.strictEqual(children?.length, 0)),\n\t\t\t\t\t\t\t\ttestObject.$getChildren('testNodeWithIdTreeProvider', '1/bb').then(children => assert.strictEqual(children?.length, 0))\n\t\t\t\t\t\t\t]);\n\t\t\t\t\t\t})\n\t\t\t\t]);\n\t\t\t});\n\t});\n\n\ttest('construct highlights tree', () => {\n\t\treturn testObject.$getChildren('testNodeWithHighlightsTreeProvider')\n\t\t\t.then(elements => {\n\t\t\t\tassert.deepStrictEqual(removeUnsetKeys(elements), [{\n\t\t\t\t\thandle: '1/a',\n\t\t\t\t\tlabel: { label: 'a', highlights: [[0, 2], [3, 5]] },\n\t\t\t\t\tcollapsibleState: TreeItemCollapsibleState.Collapsed\n\t\t\t\t}, {\n\t\t\t\t\thandle: '1/b',\n\t\t\t\t\tlabel: { label: 'b', highlights: [[0, 2], [3, 5]] },\n\t\t\t\t\tcollapsibleState: TreeItemCollapsibleState.Collapsed\n\t\t\t\t}]);\n\t\t\t\treturn Promise.all([\n\t\t\t\t\ttestObject.$getChildren('testNodeWithHighlightsTreeProvider', '1/a')\n\t\t\t\t\t\t.then(children => {\n\t\t\t\t\t\t\tassert.deepStrictEqual(removeUnsetKeys(children), [{\n\t\t\t\t\t\t\t\thandle: '1/aa',\n\t\t\t\t\t\t\t\tparentHandle: '1/a',\n\t\t\t\t\t\t\t\tlabel: { label: 'aa', highlights: [[0, 2], [3, 5]] },\n\t\t\t\t\t\t\t\tcollapsibleState: TreeItemCollapsibleState.None\n\t\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\t\thandle: '1/ab',\n\t\t\t\t\t\t\t\tparentHandle: '1/a',\n\t\t\t\t\t\t\t\tlabel: { label: 'ab', highlights: [[0, 2], [3, 5]] },\n\t\t\t\t\t\t\t\tcollapsibleState: TreeItemCollapsibleState.None\n\t\t\t\t\t\t\t}]);\n\t\t\t\t\t\t}),\n\t\t\t\t\ttestObject.$getChildren('testNodeWithHighlightsTreeProvider', '1/b')\n\t\t\t\t\t\t.then(children => {\n\t\t\t\t\t\t\tassert.deepStrictEqual(removeUnsetKeys(children), [{\n\t\t\t\t\t\t\t\thandle: '1/ba',\n\t\t\t\t\t\t\t\tparentHandle: '1/b',\n\t\t\t\t\t\t\t\tlabel: { label: 'ba', highlights: [[0, 2], [3, 5]] },\n\t\t\t\t\t\t\t\tcollapsibleState: TreeItemCollapsibleState.None\n\t\t\t\t\t\t\t}, {\n\t\t\t\t\t\t\t\thandle: '1/bb',\n\t\t\t\t\t\t\t\tparentHandle: '1/b',\n\t\t\t\t\t\t\t\tlabel: { label: 'bb', highlights: [[0, 2], [3, 5]] },\n\t\t\t\t\t\t\t\tcollapsibleState: TreeItemCollapsibleState.None\n\t\t\t\t\t\t\t}]);\n\t\t\t\t\t\t})\n\t\t\t\t]);\n\t\t\t});\n\t});\n\n\ttest('error is thrown if id is not unique', (done) => {\n\t\ttree['a'] = {\n\t\t\t'aa': {},\n\t\t};\n\t\ttree['b'] = {\n\t\t\t'aa': {},\n\t\t\t'ba': {}\n\t\t};\n\t\tlet caughtExpectedError = false;\n\t\tstore.add(target.onRefresh.event(() => {\n\t\t\ttestObject.$getChildren('testNodeWithIdTreeProvider')\n\t\t\t\t.then(elements => {\n\t\t\t\t\tconst actuals = elements?.map(e => e.handle);\n\t\t\t\t\tassert.deepStrictEqual(actuals, ['1/a', '1/b']);\n\t\t\t\t\treturn testObject.$getChildren('testNodeWithIdTreeProvider', '1/a')\n\t\t\t\t\t\t.then(() => testObject.$getChildren('testNodeWithIdTreeProvider', '1/b'))\n\t\t\t\t\t\t.then(() => assert.fail('Should fail with duplicate id'))\n\t\t\t\t\t\t.catch(() => caughtExpectedError = true)\n\t\t\t\t\t\t.finally(() => caughtExpectedError ? done() : assert.fail('Expected duplicate id error not thrown.'));\n\t\t\t\t});\n\t\t}));\n\t\tonDidChangeTreeNode.fire(undefined);\n\t});\n\n\ttest('refresh root', function (done) {\n\t\tstore.add(target.onRefresh.event(actuals => {\n\t\t\tassert.strictEqual(undefined, actuals);\n\t\t\tdone();\n\t\t}));\n\t\tonDidChangeTreeNode.fire(undefined);\n\t});\n\n\ttest('refresh a parent node', () => {\n\t\treturn new Promise((c, e) => {\n\t\t\tstore.add(target.onRefresh.event(actuals => {\n\t\t\t\tassert.deepStrictEqual(['0/0:b'], Object.keys(actuals));\n\t\t\t\tassert.deepStrictEqual(removeUnsetKeys(actuals['0/0:b']), {\n\t\t\t\t\thandle: '0/0:b',\n\t\t\t\t\tlabel: { label: 'b' },\n\t\t\t\t\tcollapsibleState: TreeItemCollapsibleState.Collapsed\n\t\t\t\t});\n\t\t\t\tc(undefined);\n\t\t\t}));\n\t\t\tonDidChangeTreeNode.fire(getNode('b'));\n\t\t});\n\t});\n\n\ttest('refresh a leaf node', function (done) {\n\t\tstore.add(target.onRefresh.event(actuals => {\n\t\t\tassert.deepStrictEqual(['0/0:b/0:bb'], Object.keys(actuals));\n\t\t\tassert.deepStrictEqual(removeUnsetKeys(actuals['0/0:b/0:bb']), {\n\t\t\t\thandle: '0/0:b/0:bb',\n\t\t\t\tparentHandle: '0/0:b',\n\t\t\t\tlabel: { label: 'bb' },\n\t\t\t\tcollapsibleState: TreeItemCollapsibleState.None\n\t\t\t});\n\t\t\tdone();\n\t\t}));\n\t\tonDidChangeTreeNode.fire(getNode('bb'));\n\t});\n\n\tasync function runWithEventMerging(action: (resolve: () => void) => void) {\n\t\tawait runWithFakedTimers({}, async () => {\n\t\t\tawait new Promise<void>((resolve) => {\n\t\t\t\tlet subscription: IDisposable | undefined = undefined;\n\t\t\t\tsubscription = target.onRefresh.event(() => {\n\t\t\t\t\tsubscription!.dispose();\n\t\t\t\t\tresolve();\n\t\t\t\t});\n\t\t\t\tonDidChangeTreeNode.fire(getNode('b'));\n\t\t\t});\n\t\t\tawait new Promise<void>(action);\n\t\t});\n\t}\n\n\ttest('refresh parent and child node trigger refresh only on parent - scenario 1', async () => {\n\t\treturn runWithEventMerging((resolve) => {\n\t\t\tstore.add(target.onRefresh.event(actuals => {\n\t\t\t\tassert.deepStrictEqual(['0/0:b', '0/0:a/0:aa'], Object.keys(actuals));\n\t\t\t\tassert.deepStrictEqual(removeUnsetKeys(actuals['0/0:b']), {\n\t\t\t\t\thandle: '0/0:b',\n\t\t\t\t\tlabel: { label: 'b' },\n\t\t\t\t\tcollapsibleState: TreeItemCollapsibleState.Collapsed\n\t\t\t\t});\n\t\t\t\tassert.deepStrictEqual(removeUnsetKeys(actuals['0/0:a/0:aa']), {\n\t\t\t\t\thandle: '0/0:a/0:aa',\n\t\t\t\t\tparentHandle: '0/0:a',\n\t\t\t\t\tlabel: { label: 'aa' },\n\t\t\t\t\tcollapsibleState: TreeItemCollapsibleState.None\n\t\t\t\t});\n\t\t\t\tresolve();\n\t\t\t}));\n\t\t\tonDidChangeTreeNode.fire(getNode('b'));\n\t\t\tonDidChangeTreeNode.fire(getNode('aa'));\n\t\t\tonDidChangeTreeNode.fire(getNode('bb'));\n\t\t});\n\t});\n\n\ttest('refresh parent and child node trigger refresh only on parent - scenario 2', async () => {\n\t\treturn runWithEventMerging((resolve) => {\n\t\t\tstore.add(target.onRefresh.event(actuals => {\n\t\t\t\tassert.deepStrictEqual(['0/0:a/0:aa', '0/0:b'], Object.keys(actuals));\n\t\t\t\tassert.deepStrictEqual(removeUnsetKeys(actuals['0/0:b']), {\n\t\t\t\t\thandle: '0/0:b',\n\t\t\t\t\tlabel: { label: 'b' },\n\t\t\t\t\tcollapsibleState: TreeItemCollapsibleState.Collapsed\n\t\t\t\t});\n\t\t\t\tassert.deepStrictEqual(removeUnsetKeys(actuals['0/0:a/0:aa']), {\n\t\t\t\t\thandle: '0/0:a/0:aa',\n\t\t\t\t\tparentHandle: '0/0:a',\n\t\t\t\t\tlabel: { label: 'aa' },\n\t\t\t\t\tcollapsibleState: TreeItemCollapsibleState.None\n\t\t\t\t});\n\t\t\t\tresolve();\n\t\t\t}));\n\t\t\tonDidChangeTreeNode.fire(getNode('bb'));\n\t\t\tonDidChangeTreeNode.fire(getNode('aa'));\n\t\t\tonDidChangeTreeNode.fire(getNode('b'));\n\t\t});\n\t});\n\n\ttest('refresh an element for label change', function (done) {\n\t\tlabels['a'] = 'aa';\n\t\tstore.add(target.onRefresh.event(actuals => {\n\t\t\tassert.deepStrictEqual(['0/0:a'], Object.keys(actuals));\n\t\t\tassert.deepStrictEqual(removeUnsetKeys(actuals['0/0:a']), {\n\t\t\t\thandle: '0/0:aa',\n\t\t\t\tlabel: { label: 'aa' },\n\t\t\t\tcollapsibleState: TreeItemCollapsibleState.Collapsed\n\t\t\t});\n\t\t\tdone();\n\t\t}));\n\t\tonDidChangeTreeNode.fire(getNode('a'));\n\t});\n\n\ttest('refresh calls are throttled on roots', () => {\n\t\treturn runWithEventMerging((resolve) => {\n\t\t\tstore.add(target.onRefresh.event(actuals => {\n\t\t\t\tassert.strictEqual(undefined, actuals);\n\t\t\t\tresolve();\n\t\t\t}));\n\t\t\tonDidChangeTreeNode.fire(undefined);\n\t\t\tonDidChangeTreeNode.fire(undefined);\n\t\t\tonDidChangeTreeNode.fire(undefined);\n\t\t\tonDidChangeTreeNode.fire(undefined);\n\t\t});\n\t});\n\n\ttest('refresh calls are throttled on elements', () => {\n\t\treturn runWithEventMerging((resolve) => {\n\t\t\tstore.add(target.onRefresh.event(actuals => {\n\t\t\t\tassert.deepStrictEqual(['0/0:a', '0/0:b'], Object.keys(actuals));\n\t\t\t\tresolve();\n\t\t\t}));\n\n\t\t\tonDidChangeTreeNode.fire(getNode('a'));\n\t\t\tonDidChangeTreeNode.fire(getNode('b'));\n\t\t\tonDidChangeTreeNode.fire(getNode('b'));\n\t\t\tonDidChangeTreeNode.fire(getNode('a'));\n\t\t});\n\t});\n\n\ttest('refresh calls are throttled on unknown elements', () => {\n\t\treturn runWithEventMerging((resolve) => {\n\t\t\tstore.add(target.onRefresh.event(actuals => {\n\t\t\t\tassert.deepStrictEqual(['0/0:a', '0/0:b'], Object.keys(actuals));\n\t\t\t\tresolve();\n\t\t\t}));\n\n\t\t\tonDidChangeTreeNode.fire(getNode('a'));\n\t\t\tonDidChangeTreeNode.fire(getNode('b'));\n\t\t\tonDidChangeTreeNode.fire(getNode('g'));\n\t\t\tonDidChangeTreeNode.fire(getNode('a'));\n\t\t});\n\t});\n\n\ttest('refresh calls are throttled on unknown elements and root', () => {\n\t\treturn runWithEventMerging((resolve) => {\n\t\t\tstore.add(target.onRefresh.event(actuals => {\n\t\t\t\tassert.strictEqual(undefined, actuals);\n\t\t\t\tresolve();\n\t\t\t}));\n\n\t\t\tonDidChangeTreeNode.fire(getNode('a'));\n\t\t\tonDidChangeTreeNode.fire(getNode('b'));\n\t\t\tonDidChangeTreeNode.fire(getNode('g'));\n\t\t\tonDidChangeTreeNode.fire(undefined);\n\t\t});\n\t});\n\n\ttest('refresh calls are throttled on elements and root', () => {\n\t\treturn runWithEventMerging((resolve) => {\n\t\t\tstore.add(target.onRefresh.event(actuals => {\n\t\t\t\tassert.strictEqual(undefined, actuals);\n\t\t\t\tresolve();\n\t\t\t}));\n\n\t\t\tonDidChangeTreeNode.fire(getNode('a'));\n\t\t\tonDidChangeTreeNode.fire(getNode('b'));\n\t\t\tonDidChangeTreeNode.fire(undefined);\n\t\t\tonDidChangeTreeNode.fire(getNode('a'));\n\t\t});\n\t});\n\n\ttest('generate unique handles from labels by escaping them', (done) => {\n\t\ttree = {\n\t\t\t'a/0:b': {}\n\t\t};\n\n\t\tstore.add(target.onRefresh.event(() => {\n\t\t\ttestObject.$getChildren('testNodeTreeProvider')\n\t\t\t\t.then(elements => {\n\t\t\t\t\tassert.deepStrictEqual(elements?.map(e => e.handle), ['0/0:a//0:b']);\n\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t}));\n\t\tonDidChangeTreeNode.fire(undefined);\n\t});\n\n\ttest('tree with duplicate labels', (done) => {\n\n\t\tconst dupItems = {\n\t\t\t'adup1': 'c',\n\t\t\t'adup2': 'g',\n\t\t\t'bdup1': 'e',\n\t\t\t'hdup1': 'i',\n\t\t\t'hdup2': 'l',\n\t\t\t'jdup1': 'k'\n\t\t};\n\n\t\tlabels['c'] = 'a';\n\t\tlabels['e'] = 'b';\n\t\tlabels['g'] = 'a';\n\t\tlabels['i'] = 'h';\n\t\tlabels['l'] = 'h';\n\t\tlabels['k'] = 'j';\n\n\t\ttree[dupItems['adup1']] = {};\n\t\ttree['d'] = {};\n\n\t\tconst bdup1Tree: { [key: string]: any } = {};\n\t\tbdup1Tree['h'] = {};\n\t\tbdup1Tree[dupItems['hdup1']] = {};\n\t\tbdup1Tree['j'] = {};\n\t\tbdup1Tree[dupItems['jdup1']] = {};\n\t\tbdup1Tree[dupItems['hdup2']] = {};\n\n\t\ttree[dupItems['bdup1']] = bdup1Tree;\n\t\ttree['f'] = {};\n\t\ttree[dupItems['adup2']] = {};\n\n\t\tstore.add(target.onRefresh.event(() => {\n\t\t\ttestObject.$getChildren('testNodeTreeProvider')\n\t\t\t\t.then(elements => {\n\t\t\t\t\tconst actuals = elements?.map(e => e.handle);\n\t\t\t\t\tassert.deepStrictEqual(actuals, ['0/0:a', '0/0:b', '0/1:a', '0/0:d', '0/1:b', '0/0:f', '0/2:a']);\n\t\t\t\t\treturn testObject.$getChildren('testNodeTreeProvider', '0/1:b')\n\t\t\t\t\t\t.then(elements => {\n\t\t\t\t\t\t\tconst actuals = elements?.map(e => e.handle);\n\t\t\t\t\t\t\tassert.deepStrictEqual(actuals, ['0/1:b/0:h', '0/1:b/1:h', '0/1:b/0:j', '0/1:b/1:j', '0/1:b/2:h']);\n\t\t\t\t\t\t\tdone();\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t}));\n\n\t\tonDidChangeTreeNode.fire(undefined);\n\t});\n\n\ttest('getChildren is not returned from cache if refreshed', (done) => {\n\t\ttree = {\n\t\t\t'c': {}\n\t\t};\n\n\t\tstore.add(target.onRefresh.event(() => {\n\t\t\ttestObject.$getChildren('testNodeTreeProvider')\n\t\t\t\t.then(elements => {\n\t\t\t\t\tassert.deepStrictEqual(elements?.map(e => e.handle), ['0/0:c']);\n\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t}));\n\n\t\tonDidChangeTreeNode.fire(undefined);\n\t});\n\n\ttest('getChildren is returned from cache if not refreshed', () => {\n\t\ttree = {\n\t\t\t'c': {}\n\t\t};\n\n\t\treturn testObject.$getChildren('testNodeTreeProvider')\n\t\t\t.then(elements => {\n\t\t\t\tassert.deepStrictEqual(elements?.map(e => e.handle), ['0/0:a', '0/0:b']);\n\t\t\t});\n\t});\n\n\ttest('reveal will throw an error if getParent is not implemented', () => {\n\t\tconst treeView = testObject.createTreeView('treeDataProvider', { treeDataProvider: aNodeTreeDataProvider() }, extensionsDescription);\n\t\treturn treeView.reveal({ key: 'a' })\n\t\t\t.then(() => assert.fail('Reveal should throw an error as getParent is not implemented'), () => null);\n\t});\n\n\ttest('reveal will return empty array for root element', () => {\n\t\tconst revealTarget = sinon.spy(target, '$reveal');\n\t\tconst treeView = testObject.createTreeView('treeDataProvider', { treeDataProvider: aCompleteNodeTreeDataProvider() }, extensionsDescription);\n\t\tconst expected = {\n\t\t\titem:\n\t\t\t\t{ handle: '0/0:a', label: { label: 'a' }, collapsibleState: TreeItemCollapsibleState.Collapsed },\n\t\t\tparentChain: []\n\t\t};\n\t\treturn treeView.reveal({ key: 'a' })\n\t\t\t.then(() => {\n\t\t\t\tassert.ok(revealTarget.calledOnce);\n\t\t\t\tassert.deepStrictEqual('treeDataProvider', revealTarget.args[0][0]);\n\t\t\t\tassert.deepStrictEqual(expected, removeUnsetKeys(revealTarget.args[0][1]));\n\t\t\t\tassert.deepStrictEqual({ select: true, focus: false, expand: false }, revealTarget.args[0][2]);\n\t\t\t});\n\t});\n\n\ttest('reveal will return parents array for an element when hierarchy is not loaded', () => {\n\t\tconst revealTarget = sinon.spy(target, '$reveal');\n\t\tconst treeView = testObject.createTreeView('treeDataProvider', { treeDataProvider: aCompleteNodeTreeDataProvider() }, extensionsDescription);\n\t\tconst expected = {\n\t\t\titem: { handle: '0/0:a/0:aa', label: { label: 'aa' }, collapsibleState: TreeItemCollapsibleState.None, parentHandle: '0/0:a' },\n\t\t\tparentChain: [{ handle: '0/0:a', label: { label: 'a' }, collapsibleState: TreeItemCollapsibleState.Collapsed }]\n\t\t};\n\t\treturn treeView.reveal({ key: 'aa' })\n\t\t\t.then(() => {\n\t\t\t\tassert.ok(revealTarget.calledOnce);\n\t\t\t\tassert.deepStrictEqual('treeDataProvider', revealTarget.args[0][0]);\n\t\t\t\tassert.deepStrictEqual(expected.item, removeUnsetKeys(revealTarget.args[0][1]!.item));\n\t\t\t\tassert.deepStrictEqual(expected.parentChain, (<Array<any>>(revealTarget.args[0][1]!.parentChain)).map(arg => removeUnsetKeys(arg)));\n\t\t\t\tassert.deepStrictEqual({ select: true, focus: false, expand: false }, revealTarget.args[0][2]);\n\t\t\t});\n\t});\n\n\ttest('reveal will return parents array for an element when hierarchy is loaded', () => {\n\t\tconst revealTarget = sinon.spy(target, '$reveal');\n\t\tconst treeView = testObject.createTreeView('treeDataProvider', { treeDataProvider: aCompleteNodeTreeDataProvider() }, extensionsDescription);\n\t\tconst expected = {\n\t\t\titem: { handle: '0/0:a/0:aa', label: { label: 'aa' }, collapsibleState: TreeItemCollapsibleState.None, parentHandle: '0/0:a' },\n\t\t\tparentChain: [{ handle: '0/0:a', label: { label: 'a' }, collapsibleState: TreeItemCollapsibleState.Collapsed }]\n\t\t};\n\t\treturn testObject.$getChildren('treeDataProvider')\n\t\t\t.then(() => testObject.$getChildren('treeDataProvider', '0/0:a'))\n\t\t\t.then(() => treeView.reveal({ key: 'aa' })\n\t\t\t\t.then(() => {\n\t\t\t\t\tassert.ok(revealTarget.calledOnce);\n\t\t\t\t\tassert.deepStrictEqual('treeDataProvider', revealTarget.args[0][0]);\n\t\t\t\t\tassert.deepStrictEqual(expected.item, removeUnsetKeys(revealTarget.args[0][1]!.item));\n\t\t\t\t\tassert.deepStrictEqual(expected.parentChain, (<Array<any>>(revealTarget.args[0][1]!.parentChain)).map(arg => removeUnsetKeys(arg)));\n\t\t\t\t\tassert.deepStrictEqual({ select: true, focus: false, expand: false }, revealTarget.args[0][2]);\n\t\t\t\t}));\n\t});\n\n\ttest('reveal will return parents array for deeper element with no selection', () => {\n\t\ttree = {\n\t\t\t'b': {\n\t\t\t\t'ba': {\n\t\t\t\t\t'bac': {}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tconst revealTarget = sinon.spy(target, '$reveal');\n\t\tconst treeView = testObject.createTreeView('treeDataProvider', { treeDataProvider: aCompleteNodeTreeDataProvider() }, extensionsDescription);\n\t\tconst expected = {\n\t\t\titem: { handle: '0/0:b/0:ba/0:bac', label: { label: 'bac' }, collapsibleState: TreeItemCollapsibleState.None, parentHandle: '0/0:b/0:ba' },\n\t\t\tparentChain: [\n\t\t\t\t{ handle: '0/0:b', label: { label: 'b' }, collapsibleState: TreeItemCollapsibleState.Collapsed },\n\t\t\t\t{ handle: '0/0:b/0:ba', label: { label: 'ba' }, collapsibleState: TreeItemCollapsibleState.Collapsed, parentHandle: '0/0:b' }\n\t\t\t]\n\t\t};\n\t\treturn treeView.reveal({ key: 'bac' }, { select: false, focus: false, expand: false })\n\t\t\t.then(() => {\n\t\t\t\tassert.ok(revealTarget.calledOnce);\n\t\t\t\tassert.deepStrictEqual('treeDataProvider', revealTarget.args[0][0]);\n\t\t\t\tassert.deepStrictEqual(expected.item, removeUnsetKeys(revealTarget.args[0][1]!.item));\n\t\t\t\tassert.deepStrictEqual(expected.parentChain, (<Array<any>>(revealTarget.args[0][1]!.parentChain)).map(arg => removeUnsetKeys(arg)));\n\t\t\t\tassert.deepStrictEqual({ select: false, focus: false, expand: false }, revealTarget.args[0][2]);\n\t\t\t});\n\t});\n\n\ttest('reveal after first udpate', () => {\n\t\tconst revealTarget = sinon.spy(target, '$reveal');\n\t\tconst treeView = testObject.createTreeView('treeDataProvider', { treeDataProvider: aCompleteNodeTreeDataProvider() }, extensionsDescription);\n\t\tconst expected = {\n\t\t\titem: { handle: '0/0:a/0:ac', label: { label: 'ac' }, collapsibleState: TreeItemCollapsibleState.None, parentHandle: '0/0:a' },\n\t\t\tparentChain: [{ handle: '0/0:a', label: { label: 'a' }, collapsibleState: TreeItemCollapsibleState.Collapsed }]\n\t\t};\n\t\treturn loadCompleteTree('treeDataProvider')\n\t\t\t.then(() => {\n\t\t\t\ttree = {\n\t\t\t\t\t'a': {\n\t\t\t\t\t\t'aa': {},\n\t\t\t\t\t\t'ac': {}\n\t\t\t\t\t},\n\t\t\t\t\t'b': {\n\t\t\t\t\t\t'ba': {},\n\t\t\t\t\t\t'bb': {}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tonDidChangeTreeNode.fire(getNode('a'));\n\n\t\t\t\treturn treeView.reveal({ key: 'ac' })\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tassert.ok(revealTarget.calledOnce);\n\t\t\t\t\t\tassert.deepStrictEqual('treeDataProvider', revealTarget.args[0][0]);\n\t\t\t\t\t\tassert.deepStrictEqual(expected.item, removeUnsetKeys(revealTarget.args[0][1]!.item));\n\t\t\t\t\t\tassert.deepStrictEqual(expected.parentChain, (<Array<any>>(revealTarget.args[0][1]!.parentChain)).map(arg => removeUnsetKeys(arg)));\n\t\t\t\t\t\tassert.deepStrictEqual({ select: true, focus: false, expand: false }, revealTarget.args[0][2]);\n\t\t\t\t\t});\n\t\t\t});\n\t});\n\n\ttest('reveal after second udpate', () => {\n\t\tconst revealTarget = sinon.spy(target, '$reveal');\n\t\tconst treeView = testObject.createTreeView('treeDataProvider', { treeDataProvider: aCompleteNodeTreeDataProvider() }, extensionsDescription);\n\t\treturn loadCompleteTree('treeDataProvider')\n\t\t\t.then(() => {\n\t\t\t\treturn runWithEventMerging((resolve) => {\n\t\t\t\t\ttree = {\n\t\t\t\t\t\t'a': {\n\t\t\t\t\t\t\t'aa': {},\n\t\t\t\t\t\t\t'ac': {}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'b': {\n\t\t\t\t\t\t\t'ba': {},\n\t\t\t\t\t\t\t'bb': {}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tonDidChangeTreeNode.fire(getNode('a'));\n\t\t\t\t\ttree = {\n\t\t\t\t\t\t'a': {\n\t\t\t\t\t\t\t'aa': {},\n\t\t\t\t\t\t\t'ac': {}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t'b': {\n\t\t\t\t\t\t\t'ba': {},\n\t\t\t\t\t\t\t'bc': {}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tonDidChangeTreeNode.fire(getNode('b'));\n\t\t\t\t\tresolve();\n\t\t\t\t}).then(() => {\n\t\t\t\t\treturn treeView.reveal({ key: 'bc' })\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\tassert.ok(revealTarget.calledOnce);\n\t\t\t\t\t\t\tassert.deepStrictEqual('treeDataProvider', revealTarget.args[0][0]);\n\t\t\t\t\t\t\tassert.deepStrictEqual({ handle: '0/0:b/0:bc', label: { label: 'bc' }, collapsibleState: TreeItemCollapsibleState.None, parentHandle: '0/0:b' }, removeUnsetKeys(revealTarget.args[0][1]!.item));\n\t\t\t\t\t\t\tassert.deepStrictEqual([{ handle: '0/0:b', label: { label: 'b' }, collapsibleState: TreeItemCollapsibleState.Collapsed }], (<Array<any>>revealTarget.args[0][1]!.parentChain).map(arg => removeUnsetKeys(arg)));\n\t\t\t\t\t\t\tassert.deepStrictEqual({ select: true, focus: false, expand: false }, revealTarget.args[0][2]);\n\t\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t});\n\t});\n\n\tfunction loadCompleteTree(treeId: string, element?: string): Promise<null> {\n\t\treturn testObject.$getChildren(treeId, element)\n\t\t\t.then(elements => elements?.map(e => loadCompleteTree(treeId, e.handle)))\n\t\t\t.then(() => null);\n\t}\n\n\tfunction removeUnsetKeys(obj: any): any {\n\t\tif (Array.isArray(obj)) {\n\t\t\treturn obj.map(o => removeUnsetKeys(o));\n\t\t}\n\n\t\tif (typeof obj === 'object') {\n\t\t\tconst result: { [key: string]: any } = {};\n\t\t\tfor (const key of Object.keys(obj)) {\n\t\t\t\tif (obj[key] !== undefined) {\n\t\t\t\t\tresult[key] = removeUnsetKeys(obj[key]);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\t\treturn obj;\n\t}\n\n\tfunction aNodeTreeDataProvider(): TreeDataProvider<{ key: string }> {\n\t\treturn {\n\t\t\tgetChildren: (element: { key: string }): { key: string }[] => {\n\t\t\t\treturn getChildren(element ? element.key : undefined).map(key => getNode(key));\n\t\t\t},\n\t\t\tgetTreeItem: (element: { key: string }): TreeItem => {\n\t\t\t\treturn getTreeItem(element.key);\n\t\t\t},\n\t\t\tonDidChangeTreeData: onDidChangeTreeNode.event\n\t\t};\n\t}\n\n\tfunction aCompleteNodeTreeDataProvider(): TreeDataProvider<{ key: string }> {\n\t\treturn {\n\t\t\tgetChildren: (element: { key: string }): { key: string }[] => {\n\t\t\t\treturn getChildren(element ? element.key : undefined).map(key => getNode(key));\n\t\t\t},\n\t\t\tgetTreeItem: (element: { key: string }): TreeItem => {\n\t\t\t\treturn getTreeItem(element.key);\n\t\t\t},\n\t\t\tgetParent: ({ key }: { key: string }): { key: string } | undefined => {\n\t\t\t\tconst parentKey = key.substring(0, key.length - 1);\n\t\t\t\treturn parentKey ? new Key(parentKey) : undefined;\n\t\t\t},\n\t\t\tonDidChangeTreeData: onDidChangeTreeNode.event\n\t\t};\n\t}\n\n\tfunction aNodeWithIdTreeDataProvider(): TreeDataProvider<{ key: string }> {\n\t\treturn {\n\t\t\tgetChildren: (element: { key: string }): { key: string }[] => {\n\t\t\t\treturn getChildren(element ? element.key : undefined).map(key => getNode(key));\n\t\t\t},\n\t\t\tgetTreeItem: (element: { key: string }): TreeItem => {\n\t\t\t\tconst treeItem = getTreeItem(element.key);\n\t\t\t\ttreeItem.id = element.key;\n\t\t\t\treturn treeItem;\n\t\t\t},\n\t\t\tonDidChangeTreeData: onDidChangeTreeNodeWithId.event\n\t\t};\n\t}\n\n\tfunction aNodeWithHighlightedLabelTreeDataProvider(): TreeDataProvider<{ key: string }> {\n\t\treturn {\n\t\t\tgetChildren: (element: { key: string }): { key: string }[] => {\n\t\t\t\treturn getChildren(element ? element.key : undefined).map(key => getNode(key));\n\t\t\t},\n\t\t\tgetTreeItem: (element: { key: string }): TreeItem => {\n\t\t\t\tconst treeItem = getTreeItem(element.key, [[0, 2], [3, 5]]);\n\t\t\t\ttreeItem.id = element.key;\n\t\t\t\treturn treeItem;\n\t\t\t},\n\t\t\tonDidChangeTreeData: onDidChangeTreeNodeWithId.event\n\t\t};\n\t}\n\n\tfunction getTreeElement(element: string): any {\n\t\tlet parent = tree;\n\t\tfor (let i = 0; i < element.length; i++) {\n\t\t\tparent = parent[element.substring(0, i + 1)];\n\t\t\tif (!parent) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\treturn parent;\n\t}\n\n\tfunction getChildren(key: string | undefined): string[] {\n\t\tif (!key) {\n\t\t\treturn Object.keys(tree);\n\t\t}\n\t\tconst treeElement = getTreeElement(key);\n\t\tif (treeElement) {\n\t\t\treturn Object.keys(treeElement);\n\t\t}\n\t\treturn [];\n\t}\n\n\tfunction getTreeItem(key: string, highlights?: [number, number][]): TreeItem {\n\t\tconst treeElement = getTreeElement(key);\n\t\treturn {\n\t\t\tlabel: <any>{ label: labels[key] || key, highlights },\n\t\t\tcollapsibleState: treeElement && Object.keys(treeElement).length ? TreeItemCollapsibleState.Collapsed : TreeItemCollapsibleState.None\n\t\t};\n\t}\n\n\tfunction getNode(key: string): { key: string } {\n\t\tif (!nodes[key]) {\n\t\t\tnodes[key] = new Key(key);\n\t\t}\n\t\treturn nodes[key];\n\t}\n\n\tclass Key {\n\t\tconstructor(readonly key: string) { }\n\t}\n\n});\n"]}