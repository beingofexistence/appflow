{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/test/browser/extHostWebview.test.ts"],"names":[],"mappings":"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","file":"extHostWebview.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { mock } from 'vs/base/test/common/mock';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { MainThreadWebviewManager } from 'vs/workbench/api/browser/mainThreadWebviewManager';\nimport { NullApiDeprecationService } from 'vs/workbench/api/common/extHostApiDeprecationService';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { ExtHostWebviews } from 'vs/workbench/api/common/extHostWebview';\nimport { ExtHostWebviewPanels } from 'vs/workbench/api/common/extHostWebviewPanels';\nimport { SingleProxyRPCProtocol } from 'vs/workbench/api/test/common/testRPCProtocol';\nimport { decodeAuthority, webviewResourceBaseHost } from 'vs/workbench/contrib/webview/common/webview';\nimport { EditorGroupColumn } from 'vs/workbench/services/editor/common/editorGroupColumn';\nimport { IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport type * as vscode from 'vscode';\n\nsuite('ExtHostWebview', () => {\n\tlet disposables: DisposableStore;\n\tlet rpcProtocol: (IExtHostRpcService & IExtHostContext) | undefined;\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\n\t\tconst shape = createNoopMainThreadWebviews();\n\t\trpcProtocol = SingleProxyRPCProtocol(shape);\n\t});\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tfunction createWebview(rpcProtocol: (IExtHostRpcService & IExtHostContext) | undefined, remoteAuthority: string | undefined) {\n\t\tconst extHostWebviews = disposables.add(new ExtHostWebviews(rpcProtocol!, {\n\t\t\tauthority: remoteAuthority,\n\t\t\tisRemote: !!remoteAuthority,\n\t\t}, undefined, new NullLogService(), NullApiDeprecationService));\n\n\t\tconst extHostWebviewPanels = disposables.add(new ExtHostWebviewPanels(rpcProtocol!, extHostWebviews, undefined));\n\n\t\treturn disposables.add(extHostWebviewPanels.createWebviewPanel({\n\t\t\textensionLocation: URI.from({\n\t\t\t\tscheme: remoteAuthority ? Schemas.vscodeRemote : Schemas.file,\n\t\t\t\tauthority: remoteAuthority,\n\t\t\t\tpath: '/ext/path',\n\t\t\t})\n\t\t} as IExtensionDescription, 'type', 'title', 1, {}));\n\t}\n\n\ttest('Cannot register multiple serializers for the same view type', async () => {\n\t\tconst viewType = 'view.type';\n\n\t\tconst extHostWebviews = disposables.add(new ExtHostWebviews(rpcProtocol!, { authority: undefined, isRemote: false }, undefined, new NullLogService(), NullApiDeprecationService));\n\n\t\tconst extHostWebviewPanels = disposables.add(new ExtHostWebviewPanels(rpcProtocol!, extHostWebviews, undefined));\n\n\t\tlet lastInvokedDeserializer: vscode.WebviewPanelSerializer | undefined = undefined;\n\n\t\tclass NoopSerializer implements vscode.WebviewPanelSerializer {\n\t\t\tasync deserializeWebviewPanel(webview: vscode.WebviewPanel, _state: any): Promise<void> {\n\t\t\t\tlastInvokedDeserializer = this;\n\t\t\t\tdisposables.add(webview);\n\t\t\t}\n\t\t}\n\n\t\tconst extension = {} as IExtensionDescription;\n\n\t\tconst serializerA = new NoopSerializer();\n\t\tconst serializerB = new NoopSerializer();\n\n\t\tconst serializerARegistration = extHostWebviewPanels.registerWebviewPanelSerializer(extension, viewType, serializerA);\n\n\t\tawait extHostWebviewPanels.$deserializeWebviewPanel('x', viewType, {\n\t\t\ttitle: 'title',\n\t\t\tstate: {},\n\t\t\tpanelOptions: {},\n\t\t\twebviewOptions: {},\n\t\t\tactive: true,\n\t\t}, 0 as EditorGroupColumn);\n\t\tassert.strictEqual(lastInvokedDeserializer, serializerA);\n\n\t\tassert.throws(\n\t\t\t() => disposables.add(extHostWebviewPanels.registerWebviewPanelSerializer(extension, viewType, serializerB)),\n\t\t\t'Should throw when registering two serializers for the same view');\n\n\t\tserializerARegistration.dispose();\n\n\t\tdisposables.add(extHostWebviewPanels.registerWebviewPanelSerializer(extension, viewType, serializerB));\n\n\t\tawait extHostWebviewPanels.$deserializeWebviewPanel('x', viewType, {\n\t\t\ttitle: 'title',\n\t\t\tstate: {},\n\t\t\tpanelOptions: {},\n\t\t\twebviewOptions: {},\n\t\t\tactive: true,\n\t\t}, 0 as EditorGroupColumn);\n\t\tassert.strictEqual(lastInvokedDeserializer, serializerB);\n\t});\n\n\ttest('asWebviewUri for local file paths', () => {\n\t\tconst webview = createWebview(rpcProtocol, /* remoteAuthority */undefined);\n\n\t\tassert.strictEqual(\n\t\t\t(webview.webview.asWebviewUri(URI.parse('file:///Users/codey/file.html')).toString()),\n\t\t\t`https://file%2B.vscode-resource.${webviewResourceBaseHost}/Users/codey/file.html`,\n\t\t\t'Unix basic'\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\t(webview.webview.asWebviewUri(URI.parse('file:///Users/codey/file.html#frag')).toString()),\n\t\t\t`https://file%2B.vscode-resource.${webviewResourceBaseHost}/Users/codey/file.html#frag`,\n\t\t\t'Unix should preserve fragment'\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\t(webview.webview.asWebviewUri(URI.parse('file:///Users/codey/f%20ile.html')).toString()),\n\t\t\t`https://file%2B.vscode-resource.${webviewResourceBaseHost}/Users/codey/f%20ile.html`,\n\t\t\t'Unix with encoding'\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\t(webview.webview.asWebviewUri(URI.parse('file://localhost/Users/codey/file.html')).toString()),\n\t\t\t`https://file%2Blocalhost.vscode-resource.${webviewResourceBaseHost}/Users/codey/file.html`,\n\t\t\t'Unix should preserve authority'\n\t\t);\n\n\t\tassert.strictEqual(\n\t\t\t(webview.webview.asWebviewUri(URI.parse('file:///c:/codey/file.txt')).toString()),\n\t\t\t`https://file%2B.vscode-resource.${webviewResourceBaseHost}/c%3A/codey/file.txt`,\n\t\t\t'Windows C drive'\n\t\t);\n\t});\n\n\ttest('asWebviewUri for remote file paths', () => {\n\t\tconst webview = createWebview(rpcProtocol, /* remoteAuthority */ 'remote');\n\n\t\tassert.strictEqual(\n\t\t\t(webview.webview.asWebviewUri(URI.parse('file:///Users/codey/file.html')).toString()),\n\t\t\t`https://vscode-remote%2Bremote.vscode-resource.${webviewResourceBaseHost}/Users/codey/file.html`,\n\t\t\t'Unix basic'\n\t\t);\n\t});\n\n\ttest('asWebviewUri for remote with / and + in name', () => {\n\t\tconst webview = createWebview(rpcProtocol, /* remoteAuthority */ 'remote');\n\t\tconst authority = 'ssh-remote+localhost=foo/bar';\n\n\t\tconst sourceUri = URI.from({\n\t\t\tscheme: 'vscode-remote',\n\t\t\tauthority: authority,\n\t\t\tpath: '/Users/cody/x.png'\n\t\t});\n\n\t\tconst webviewUri = webview.webview.asWebviewUri(sourceUri);\n\t\tassert.strictEqual(\n\t\t\twebviewUri.toString(),\n\t\t\t`https://vscode-remote%2Bssh-002dremote-002blocalhost-003dfoo-002fbar.vscode-resource.vscode-cdn.net/Users/cody/x.png`,\n\t\t\t'Check transform');\n\n\t\tassert.strictEqual(\n\t\t\tdecodeAuthority(webviewUri.authority),\n\t\t\t`vscode-remote+${authority}.vscode-resource.vscode-cdn.net`,\n\t\t\t'Check decoded authority'\n\t\t);\n\t});\n\n\ttest('asWebviewUri for remote with port in name', () => {\n\t\tconst webview = createWebview(rpcProtocol, /* remoteAuthority */ 'remote');\n\t\tconst authority = 'localhost:8080';\n\n\t\tconst sourceUri = URI.from({\n\t\t\tscheme: 'vscode-remote',\n\t\t\tauthority: authority,\n\t\t\tpath: '/Users/cody/x.png'\n\t\t});\n\n\t\tconst webviewUri = webview.webview.asWebviewUri(sourceUri);\n\t\tassert.strictEqual(\n\t\t\twebviewUri.toString(),\n\t\t\t`https://vscode-remote%2Blocalhost-003a8080.vscode-resource.vscode-cdn.net/Users/cody/x.png`,\n\t\t\t'Check transform');\n\n\t\tassert.strictEqual(\n\t\t\tdecodeAuthority(webviewUri.authority),\n\t\t\t`vscode-remote+${authority}.vscode-resource.vscode-cdn.net`,\n\t\t\t'Check decoded authority'\n\t\t);\n\t});\n});\n\n\nfunction createNoopMainThreadWebviews() {\n\treturn new class extends mock<MainThreadWebviewManager>() {\n\t\t$disposeWebview() { /* noop */ }\n\t\t$createWebviewPanel() { /* noop */ }\n\t\t$registerSerializer() { /* noop */ }\n\t\t$unregisterSerializer() { /* noop */ }\n\t};\n}\n"]}