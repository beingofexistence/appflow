{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/test/browser/mainThreadTreeViews.test.ts"],"names":[],"mappings":"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","file":"mainThreadTreeViews.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { mock } from 'vs/base/test/common/mock';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { TestNotificationService } from 'vs/platform/notification/test/common/testNotificationService';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { MainThreadTreeViews } from 'vs/workbench/api/browser/mainThreadTreeViews';\nimport { ExtHostTreeViewsShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { CustomTreeView } from 'vs/workbench/browser/parts/views/treeView';\nimport { Extensions, ITreeItem, ITreeView, ITreeViewDescriptor, IViewContainersRegistry, IViewDescriptorService, IViewsRegistry, TreeItemCollapsibleState, ViewContainer, ViewContainerLocation } from 'vs/workbench/common/views';\nimport { IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport { ExtensionHostKind } from 'vs/workbench/services/extensions/common/extensionHostKind';\nimport { ViewDescriptorService } from 'vs/workbench/services/views/browser/viewDescriptorService';\nimport { TestViewsService, workbenchInstantiationService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { TestExtensionService } from 'vs/workbench/test/common/workbenchTestServices';\n\nsuite('MainThreadHostTreeView', function () {\n\tconst testTreeViewId = 'testTreeView';\n\tconst customValue = 'customValue';\n\tconst ViewsRegistry = Registry.as<IViewsRegistry>(Extensions.ViewsRegistry);\n\n\tinterface CustomTreeItem extends ITreeItem {\n\t\tcustomProp: string;\n\t}\n\n\tclass MockExtHostTreeViewsShape extends mock<ExtHostTreeViewsShape>() {\n\t\toverride async $getChildren(treeViewId: string, treeItemHandle?: string): Promise<ITreeItem[]> {\n\t\t\treturn [<CustomTreeItem>{ handle: 'testItem1', collapsibleState: TreeItemCollapsibleState.Expanded, customProp: customValue }];\n\t\t}\n\n\t\toverride async $hasResolve(): Promise<boolean> {\n\t\t\treturn false;\n\t\t}\n\n\t\toverride $setVisible(): void { }\n\t}\n\n\tlet container: ViewContainer;\n\tlet mainThreadTreeViews: MainThreadTreeViews;\n\tlet extHostTreeViewsShape: MockExtHostTreeViewsShape;\n\n\tteardown(() => {\n\t\tViewsRegistry.deregisterViews(ViewsRegistry.getViews(container), container);\n\t});\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(async () => {\n\t\tconst instantiationService: TestInstantiationService = <TestInstantiationService>workbenchInstantiationService(undefined, disposables);\n\t\tconst viewDescriptorService = disposables.add(instantiationService.createInstance(ViewDescriptorService));\n\t\tinstantiationService.stub(IViewDescriptorService, viewDescriptorService);\n\t\tcontainer = Registry.as<IViewContainersRegistry>(Extensions.ViewContainersRegistry).registerViewContainer({ id: 'testContainer', title: { value: 'test', original: 'test' }, ctorDescriptor: new SyncDescriptor(<any>{}) }, ViewContainerLocation.Sidebar);\n\t\tconst viewDescriptor: ITreeViewDescriptor = {\n\t\t\tid: testTreeViewId,\n\t\t\tctorDescriptor: null!,\n\t\t\tname: 'Test View 1',\n\t\t\ttreeView: disposables.add(instantiationService.createInstance(CustomTreeView, 'testTree', 'Test Title', 'extension.id')),\n\t\t};\n\t\tViewsRegistry.registerViews([viewDescriptor], container);\n\n\t\tconst testExtensionService = new TestExtensionService();\n\t\textHostTreeViewsShape = new MockExtHostTreeViewsShape();\n\t\tmainThreadTreeViews = disposables.add(new MainThreadTreeViews(\n\t\t\tnew class implements IExtHostContext {\n\t\t\t\tremoteAuthority = '';\n\t\t\t\textensionHostKind = ExtensionHostKind.LocalProcess;\n\t\t\t\tdispose() { }\n\t\t\t\tassertRegistered() { }\n\t\t\t\tset(v: any): any { return null; }\n\t\t\t\tgetProxy(): any {\n\t\t\t\t\treturn extHostTreeViewsShape;\n\t\t\t\t}\n\t\t\t\tdrain(): any { return null; }\n\t\t\t}, new TestViewsService(), new TestNotificationService(), testExtensionService, new NullLogService()));\n\t\tmainThreadTreeViews.$registerTreeViewDataProvider(testTreeViewId, { showCollapseAll: false, canSelectMany: false, dropMimeTypes: [], dragMimeTypes: [], hasHandleDrag: false, hasHandleDrop: false, manuallyManageCheckboxes: false });\n\t\tawait testExtensionService.whenInstalledExtensionsRegistered();\n\t});\n\n\ttest('getChildren keeps custom properties', async () => {\n\t\tconst treeView: ITreeView = (<ITreeViewDescriptor>ViewsRegistry.getView(testTreeViewId)).treeView;\n\t\tconst children = await treeView.dataProvider?.getChildren({ handle: 'root', collapsibleState: TreeItemCollapsibleState.Expanded });\n\t\tassert(children!.length === 1, 'Exactly one child should be returned');\n\t\tassert((<CustomTreeItem>children![0]).customProp === customValue, 'Tree Items should keep custom properties');\n\t});\n\n\n});\n"]}