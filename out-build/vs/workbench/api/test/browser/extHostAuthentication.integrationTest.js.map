{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/test/browser/extHostAuthentication.integrationTest.ts"],"names":[],"mappings":"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","file":"extHostAuthentication.integrationTest.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { TestDialogService } from 'vs/platform/dialogs/test/common/testDialogService';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { TestNotificationService } from 'vs/platform/notification/test/common/testNotificationService';\nimport { IQuickInputHideEvent, IQuickInputService, IQuickPickDidAcceptEvent } from 'vs/platform/quickinput/common/quickInput';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { NullTelemetryService } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { MainThreadAuthentication } from 'vs/workbench/api/browser/mainThreadAuthentication';\nimport { ExtHostContext, MainContext } from 'vs/workbench/api/common/extHost.protocol';\nimport { ExtHostAuthentication } from 'vs/workbench/api/common/extHostAuthentication';\nimport { IActivityService } from 'vs/workbench/services/activity/common/activity';\nimport { AuthenticationService } from 'vs/workbench/services/authentication/browser/authenticationService';\nimport { IAuthenticationService } from 'vs/workbench/services/authentication/common/authentication';\nimport { IExtensionService, nullExtensionDescription as extensionDescription } from 'vs/workbench/services/extensions/common/extensions';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { TestRPCProtocol } from 'vs/workbench/api/test/common/testRPCProtocol';\nimport { TestQuickInputService, TestRemoteAgentService } from 'vs/workbench/test/browser/workbenchTestServices';\nimport { TestActivityService, TestExtensionService, TestStorageService } from 'vs/workbench/test/common/workbenchTestServices';\nimport type { AuthenticationProvider, AuthenticationSession } from 'vscode';\n\nclass AuthQuickPick {\n\tprivate listener: ((e: IQuickPickDidAcceptEvent) => any) | undefined;\n\tpublic items = [];\n\tpublic get selectedItems(): string[] {\n\t\treturn this.items;\n\t}\n\n\tonDidAccept(listener: (e: IQuickPickDidAcceptEvent) => any) {\n\t\tthis.listener = listener;\n\t}\n\tonDidHide(listener: (e: IQuickInputHideEvent) => any) {\n\n\t}\n\tdispose() {\n\n\t}\n\tshow() {\n\t\tthis.listener!({\n\t\t\tinBackground: false\n\t\t});\n\t}\n}\nclass AuthTestQuickInputService extends TestQuickInputService {\n\toverride createQuickPick() {\n\t\treturn <any>new AuthQuickPick();\n\t}\n}\n\nclass TestAuthProvider implements AuthenticationProvider {\n\tprivate id = 1;\n\tprivate sessions = new Map<string, AuthenticationSession>();\n\tonDidChangeSessions = () => { return { dispose() { } }; };\n\tconstructor(private readonly authProviderName: string) { }\n\tasync getSessions(scopes?: readonly string[]): Promise<AuthenticationSession[]> {\n\t\tif (!scopes) {\n\t\t\treturn [...this.sessions.values()];\n\t\t}\n\n\t\tif (scopes[0] === 'return multiple') {\n\t\t\treturn [...this.sessions.values()];\n\t\t}\n\t\tconst sessions = this.sessions.get(scopes.join(' '));\n\t\treturn sessions ? [sessions] : [];\n\t}\n\tasync createSession(scopes: readonly string[]): Promise<AuthenticationSession> {\n\t\tconst scopesStr = scopes.join(' ');\n\t\tconst session = {\n\t\t\tscopes,\n\t\t\tid: `${this.id}`,\n\t\t\taccount: {\n\t\t\t\tlabel: this.authProviderName,\n\t\t\t\tid: `${this.id}`,\n\t\t\t},\n\t\t\taccessToken: Math.random() + '',\n\t\t};\n\t\tthis.sessions.set(scopesStr, session);\n\t\tthis.id++;\n\t\treturn session;\n\t}\n\tasync removeSession(sessionId: string): Promise<void> {\n\t\tthis.sessions.delete(sessionId);\n\t}\n\n}\n\nsuite('ExtHostAuthentication', () => {\n\tlet disposables: DisposableStore;\n\n\tlet extHostAuthentication: ExtHostAuthentication;\n\tlet instantiationService: TestInstantiationService;\n\n\tsuiteSetup(async () => {\n\t\tinstantiationService = new TestInstantiationService();\n\t\tinstantiationService.stub(IDialogService, new TestDialogService({ confirmed: true }));\n\t\tinstantiationService.stub(IStorageService, new TestStorageService());\n\t\tinstantiationService.stub(IQuickInputService, new AuthTestQuickInputService());\n\t\tinstantiationService.stub(IExtensionService, new TestExtensionService());\n\n\t\tinstantiationService.stub(IActivityService, new TestActivityService());\n\t\tinstantiationService.stub(IRemoteAgentService, new TestRemoteAgentService());\n\t\tinstantiationService.stub(INotificationService, new TestNotificationService());\n\t\tinstantiationService.stub(ITelemetryService, NullTelemetryService);\n\t\tconst rpcProtocol = new TestRPCProtocol();\n\n\t\tinstantiationService.stub(IAuthenticationService, instantiationService.createInstance(AuthenticationService));\n\t\trpcProtocol.set(MainContext.MainThreadAuthentication, instantiationService.createInstance(MainThreadAuthentication, rpcProtocol));\n\t\textHostAuthentication = new ExtHostAuthentication(rpcProtocol);\n\t\trpcProtocol.set(ExtHostContext.ExtHostAuthentication, extHostAuthentication);\n\t});\n\n\tsetup(async () => {\n\t\tdisposables = new DisposableStore();\n\t\tdisposables.add(extHostAuthentication.registerAuthenticationProvider('test', 'test provider', new TestAuthProvider('test')));\n\t\tdisposables.add(extHostAuthentication.registerAuthenticationProvider(\n\t\t\t'test-multiple',\n\t\t\t'test multiple provider',\n\t\t\tnew TestAuthProvider('test-multiple'),\n\t\t\t{ supportsMultipleAccounts: true }));\n\t});\n\n\tsuiteTeardown(() => {\n\t\tinstantiationService.dispose();\n\t});\n\n\tteardown(() => {\n\t\tdisposables.dispose();\n\t});\n\n\ttest('createIfNone - true', async () => {\n\t\tconst scopes = ['foo'];\n\t\tconst session = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\tscopes,\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\t\tassert.strictEqual(session?.id, '1');\n\t\tassert.strictEqual(session?.scopes[0], 'foo');\n\t});\n\n\ttest('createIfNone - false', async () => {\n\t\tconst scopes = ['foo'];\n\t\tconst nosession = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\tscopes,\n\t\t\t{});\n\t\tassert.strictEqual(nosession, undefined);\n\n\t\t// Now create the session\n\t\tconst session = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\tscopes,\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\n\t\tassert.strictEqual(session?.id, '1');\n\t\tassert.strictEqual(session?.scopes[0], 'foo');\n\n\t\tconst session2 = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\tscopes,\n\t\t\t{});\n\n\t\tassert.strictEqual(session2?.id, session.id);\n\t\tassert.strictEqual(session2?.scopes[0], session.scopes[0]);\n\t\tassert.strictEqual(session2?.accessToken, session.accessToken);\n\t});\n\n\t// should behave the same as createIfNone: false\n\ttest('silent - true', async () => {\n\t\tconst scopes = ['foo'];\n\t\tconst nosession = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\tscopes,\n\t\t\t{\n\t\t\t\tsilent: true\n\t\t\t});\n\t\tassert.strictEqual(nosession, undefined);\n\n\t\t// Now create the session\n\t\tconst session = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\tscopes,\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\n\t\tassert.strictEqual(session?.id, '1');\n\t\tassert.strictEqual(session?.scopes[0], 'foo');\n\n\t\tconst session2 = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\tscopes,\n\t\t\t{\n\t\t\t\tsilent: true\n\t\t\t});\n\n\t\tassert.strictEqual(session.id, session2?.id);\n\t\tassert.strictEqual(session.scopes[0], session2?.scopes[0]);\n\t});\n\n\ttest('forceNewSession - true - existing session', async () => {\n\t\tconst scopes = ['foo'];\n\t\tconst session1 = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\tscopes,\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\n\t\t// Now create the session\n\t\tconst session2 = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\tscopes,\n\t\t\t{\n\t\t\t\tforceNewSession: true\n\t\t\t});\n\n\t\tassert.strictEqual(session2?.id, '2');\n\t\tassert.strictEqual(session2?.scopes[0], 'foo');\n\t\tassert.notStrictEqual(session1.accessToken, session2?.accessToken);\n\t});\n\n\t// Should behave like createIfNone: true\n\ttest('forceNewSession - true - no existing session', async () => {\n\t\tconst scopes = ['foo'];\n\t\tconst session = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\tscopes,\n\t\t\t{\n\t\t\t\tforceNewSession: true\n\t\t\t});\n\t\tassert.strictEqual(session?.id, '1');\n\t\tassert.strictEqual(session?.scopes[0], 'foo');\n\t});\n\n\ttest('forceNewSession - detail', async () => {\n\t\tconst scopes = ['foo'];\n\t\tconst session1 = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\tscopes,\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\n\t\t// Now create the session\n\t\tconst session2 = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\tscopes,\n\t\t\t{\n\t\t\t\tforceNewSession: { detail: 'bar' }\n\t\t\t});\n\n\t\tassert.strictEqual(session2?.id, '2');\n\t\tassert.strictEqual(session2?.scopes[0], 'foo');\n\t\tassert.notStrictEqual(session1.accessToken, session2?.accessToken);\n\t});\n\n\t//#region Multi-Account AuthProvider\n\n\ttest('clearSessionPreference - true', async () => {\n\t\tconst scopes = ['foo'];\n\t\t// Now create the session\n\t\tconst session = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test-multiple',\n\t\t\tscopes,\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\n\t\tassert.strictEqual(session?.id, '1');\n\t\tassert.strictEqual(session?.scopes[0], scopes[0]);\n\n\t\tconst scopes2 = ['bar'];\n\t\tconst session2 = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test-multiple',\n\t\t\tscopes2,\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\t\tassert.strictEqual(session2?.id, '2');\n\t\tassert.strictEqual(session2?.scopes[0], scopes2[0]);\n\n\t\tconst session3 = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test-multiple',\n\t\t\t['return multiple'],\n\t\t\t{\n\t\t\t\tclearSessionPreference: true,\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\n\t\t// clearing session preference causes us to get the first session\n\t\t// because it would normally show a quick pick for the user to choose\n\t\tassert.strictEqual(session3?.id, session.id);\n\t\tassert.strictEqual(session3?.scopes[0], session.scopes[0]);\n\t\tassert.strictEqual(session3?.accessToken, session.accessToken);\n\t});\n\n\ttest('silently getting session should return a session (if any) regardless of preference - fixes #137819', async () => {\n\t\tconst scopes = ['foo'];\n\t\t// Now create the session\n\t\tconst session = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test-multiple',\n\t\t\tscopes,\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\n\t\tassert.strictEqual(session?.id, '1');\n\t\tassert.strictEqual(session?.scopes[0], scopes[0]);\n\n\t\tconst scopes2 = ['bar'];\n\t\tconst session2 = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test-multiple',\n\t\t\tscopes2,\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\t\tassert.strictEqual(session2?.id, '2');\n\t\tassert.strictEqual(session2?.scopes[0], scopes2[0]);\n\n\t\tconst shouldBeSession1 = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test-multiple',\n\t\t\tscopes,\n\t\t\t{});\n\t\tassert.strictEqual(shouldBeSession1?.id, session.id);\n\t\tassert.strictEqual(shouldBeSession1?.scopes[0], session.scopes[0]);\n\t\tassert.strictEqual(shouldBeSession1?.accessToken, session.accessToken);\n\n\t\tconst shouldBeSession2 = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test-multiple',\n\t\t\tscopes2,\n\t\t\t{});\n\t\tassert.strictEqual(shouldBeSession2?.id, session2.id);\n\t\tassert.strictEqual(shouldBeSession2?.scopes[0], session2.scopes[0]);\n\t\tassert.strictEqual(shouldBeSession2?.accessToken, session2.accessToken);\n\t});\n\n\t//#endregion\n\n\t//#region error cases\n\n\ttest('createIfNone and forceNewSession', async () => {\n\t\ttry {\n\t\t\tawait extHostAuthentication.getSession(\n\t\t\t\textensionDescription,\n\t\t\t\t'test',\n\t\t\t\t['foo'],\n\t\t\t\t{\n\t\t\t\t\tcreateIfNone: true,\n\t\t\t\t\tforceNewSession: true\n\t\t\t\t});\n\t\t\tassert.fail('should have thrown an Error.');\n\t\t} catch (e) {\n\t\t\tassert.ok(e);\n\t\t}\n\t});\n\n\ttest('forceNewSession and silent', async () => {\n\t\ttry {\n\t\t\tawait extHostAuthentication.getSession(\n\t\t\t\textensionDescription,\n\t\t\t\t'test',\n\t\t\t\t['foo'],\n\t\t\t\t{\n\t\t\t\t\tforceNewSession: true,\n\t\t\t\t\tsilent: true\n\t\t\t\t});\n\t\t\tassert.fail('should have thrown an Error.');\n\t\t} catch (e) {\n\t\t\tassert.ok(e);\n\t\t}\n\t});\n\n\ttest('createIfNone and silent', async () => {\n\t\ttry {\n\t\t\tawait extHostAuthentication.getSession(\n\t\t\t\textensionDescription,\n\t\t\t\t'test',\n\t\t\t\t['foo'],\n\t\t\t\t{\n\t\t\t\t\tcreateIfNone: true,\n\t\t\t\t\tsilent: true\n\t\t\t\t});\n\t\t\tassert.fail('should have thrown an Error.');\n\t\t} catch (e) {\n\t\t\tassert.ok(e);\n\t\t}\n\t});\n\n\ttest('Can get multiple sessions (with different scopes) in one extension', async () => {\n\t\tlet session: AuthenticationSession | undefined = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test-multiple',\n\t\t\t['foo'],\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\t\tsession = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test-multiple',\n\t\t\t['bar'],\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\t\tassert.strictEqual(session?.id, '2');\n\t\tassert.strictEqual(session?.scopes[0], 'bar');\n\n\t\tsession = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test-multiple',\n\t\t\t['foo'],\n\t\t\t{\n\t\t\t\tcreateIfNone: false\n\t\t\t});\n\t\tassert.strictEqual(session?.id, '1');\n\t\tassert.strictEqual(session?.scopes[0], 'foo');\n\t});\n\n\ttest('Can get multiple sessions (from different providers) in one extension', async () => {\n\t\tlet session: AuthenticationSession | undefined = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test-multiple',\n\t\t\t['foo'],\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\t\tsession = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\t['foo'],\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\t\tassert.strictEqual(session?.id, '1');\n\t\tassert.strictEqual(session?.scopes[0], 'foo');\n\t\tassert.strictEqual(session?.account.label, 'test');\n\n\t\tconst session2 = await extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test-multiple',\n\t\t\t['foo'],\n\t\t\t{\n\t\t\t\tcreateIfNone: false\n\t\t\t});\n\t\tassert.strictEqual(session2?.id, '1');\n\t\tassert.strictEqual(session2?.scopes[0], 'foo');\n\t\tassert.strictEqual(session2?.account.label, 'test-multiple');\n\t});\n\n\ttest('Can get multiple sessions (from different providers) in one extension at the same time', async () => {\n\t\tconst sessionP: Promise<AuthenticationSession | undefined> = extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test',\n\t\t\t['foo'],\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\t\tconst session2P: Promise<AuthenticationSession | undefined> = extHostAuthentication.getSession(\n\t\t\textensionDescription,\n\t\t\t'test-multiple',\n\t\t\t['foo'],\n\t\t\t{\n\t\t\t\tcreateIfNone: true\n\t\t\t});\n\t\tconst session = await sessionP;\n\t\tassert.strictEqual(session?.id, '1');\n\t\tassert.strictEqual(session?.scopes[0], 'foo');\n\t\tassert.strictEqual(session?.account.label, 'test');\n\n\t\tconst session2 = await session2P;\n\t\tassert.strictEqual(session2?.id, '1');\n\t\tassert.strictEqual(session2?.scopes[0], 'foo');\n\t\tassert.strictEqual(session2?.account.label, 'test-multiple');\n\t});\n\n\n\t//#endregion\n});\n"]}