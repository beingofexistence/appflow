{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/test/browser/extHostTesting.test.ts"],"names":[],"mappings":"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","file":"extHostTesting.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as sinon from 'sinon';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { Iterable } from 'vs/base/common/iterator';\nimport { URI } from 'vs/base/common/uri';\nimport { mockObject, MockObject } from 'vs/base/test/common/mock';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport * as editorRange from 'vs/editor/common/core/range';\nimport { IRelaxedExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { MainThreadTestingShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { ExtHostDocumentsAndEditors } from 'vs/workbench/api/common/extHostDocumentsAndEditors';\nimport { TestRunCoordinator, TestRunDto, TestRunProfileImpl } from 'vs/workbench/api/common/extHostTesting';\nimport { ExtHostTestItemCollection, TestItemImpl } from 'vs/workbench/api/common/extHostTestItem';\nimport * as convert from 'vs/workbench/api/common/extHostTypeConverters';\nimport { Location, Position, Range, TestMessage, TestResultState, TestRunProfileKind, TestRunRequest as TestRunRequestImpl, TestTag } from 'vs/workbench/api/common/extHostTypes';\nimport { TestId } from 'vs/workbench/contrib/testing/common/testId';\nimport { TestDiffOpType, TestItemExpandState, TestMessageType, TestsDiff } from 'vs/workbench/contrib/testing/common/testTypes';\nimport type { TestItem, TestRunRequest } from 'vscode';\n\nconst simplify = (item: TestItem) => ({\n\tid: item.id,\n\tlabel: item.label,\n\turi: item.uri,\n\trange: item.range,\n});\n\nconst assertTreesEqual = (a: TestItemImpl | undefined, b: TestItemImpl | undefined) => {\n\tif (!a) {\n\t\tthrow new assert.AssertionError({ message: 'Expected a to be defined', actual: a });\n\t}\n\n\tif (!b) {\n\t\tthrow new assert.AssertionError({ message: 'Expected b to be defined', actual: b });\n\t}\n\n\tassert.deepStrictEqual(simplify(a), simplify(b));\n\n\tconst aChildren = [...a.children].map(([_, c]) => c.id).sort();\n\tconst bChildren = [...b.children].map(([_, c]) => c.id).sort();\n\tassert.strictEqual(aChildren.length, bChildren.length, `expected ${a.label}.children.length == ${b.label}.children.length`);\n\taChildren.forEach(key => assertTreesEqual(a.children.get(key) as TestItemImpl, b.children.get(key) as TestItemImpl));\n};\n\n// const assertTreeListEqual = (a: ReadonlyArray<TestItem>, b: ReadonlyArray<TestItem>) => {\n// \tassert.strictEqual(a.length, b.length, `expected a.length == n.length`);\n// \ta.forEach((_, i) => assertTreesEqual(a[i], b[i]));\n// };\n\n// class TestMirroredCollection extends MirroredTestCollection {\n// \tpublic changeEvent!: TestChangeEvent;\n\n// \tconstructor() {\n// \t\tsuper();\n// \t\tthis.onDidChangeTests(evt => this.changeEvent = evt);\n// \t}\n\n// \tpublic get length() {\n// \t\treturn this.items.size;\n// \t}\n// }\n\nsuite('ExtHost Testing', () => {\n\tclass TestExtHostTestItemCollection extends ExtHostTestItemCollection {\n\t\tpublic setDiff(diff: TestsDiff) {\n\t\t\tthis.diff = diff;\n\t\t}\n\t}\n\n\tteardown(() => {\n\t\tsinon.restore();\n\t});\n\n\tconst ds = ensureNoDisposablesAreLeakedInTestSuite();\n\n\tlet single: TestExtHostTestItemCollection;\n\tsetup(() => {\n\t\tsingle = ds.add(new TestExtHostTestItemCollection('ctrlId', 'root', {\n\t\t\tgetDocument: () => undefined,\n\t\t} as Partial<ExtHostDocumentsAndEditors> as ExtHostDocumentsAndEditors));\n\t\tsingle.resolveHandler = item => {\n\t\t\tif (item === undefined) {\n\t\t\t\tconst a = new TestItemImpl('ctrlId', 'id-a', 'a', URI.file('/'));\n\t\t\t\ta.canResolveChildren = true;\n\t\t\t\tconst b = new TestItemImpl('ctrlId', 'id-b', 'b', URI.file('/'));\n\t\t\t\tsingle.root.children.add(a);\n\t\t\t\tsingle.root.children.add(b);\n\t\t\t} else if (item.id === 'id-a') {\n\t\t\t\titem.children.add(new TestItemImpl('ctrlId', 'id-aa', 'aa', URI.file('/')));\n\t\t\t\titem.children.add(new TestItemImpl('ctrlId', 'id-ab', 'ab', URI.file('/')));\n\t\t\t}\n\t\t};\n\n\t\tds.add(single.onDidGenerateDiff(d => single.setDiff(d /* don't clear during testing */)));\n\t});\n\n\tsuite('OwnedTestCollection', () => {\n\t\ttest('adds a root recursively', async () => {\n\t\t\tawait single.expand(single.root.id, Infinity);\n\t\t\tconst a = single.root.children.get('id-a') as TestItemImpl;\n\t\t\tconst b = single.root.children.get('id-b') as TestItemImpl;\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Add,\n\t\t\t\t\titem: { controllerId: 'ctrlId', expand: TestItemExpandState.BusyExpanding, item: { ...convert.TestItem.from(single.root) } }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Add,\n\t\t\t\t\titem: { controllerId: 'ctrlId', expand: TestItemExpandState.BusyExpanding, item: { ...convert.TestItem.from(a) } }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Add,\n\t\t\t\t\titem: { controllerId: 'ctrlId', expand: TestItemExpandState.NotExpandable, item: convert.TestItem.from(a.children.get('id-aa') as TestItemImpl) }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Add,\n\t\t\t\t\titem: { controllerId: 'ctrlId', expand: TestItemExpandState.NotExpandable, item: convert.TestItem.from(a.children.get('id-ab') as TestItemImpl) }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Update,\n\t\t\t\t\titem: { extId: new TestId(['ctrlId', 'id-a']).toString(), expand: TestItemExpandState.Expanded }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Add,\n\t\t\t\t\titem: { controllerId: 'ctrlId', expand: TestItemExpandState.NotExpandable, item: convert.TestItem.from(b) }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Update,\n\t\t\t\t\titem: { extId: single.root.id, expand: TestItemExpandState.Expanded }\n\t\t\t\t},\n\t\t\t]);\n\t\t});\n\n\t\ttest('parents are set correctly', () => {\n\t\t\tsingle.expand(single.root.id, Infinity);\n\t\t\tsingle.collectDiff();\n\n\t\t\tconst a = single.root.children.get('id-a')!;\n\t\t\tconst ab = a.children.get('id-ab')!;\n\t\t\tassert.strictEqual(a.parent, undefined);\n\t\t\tassert.strictEqual(ab.parent, a);\n\t\t});\n\n\t\ttest('can add an item with same ID as root', () => {\n\t\t\tsingle.collectDiff();\n\n\t\t\tconst child = new TestItemImpl('ctrlId', 'ctrlId', 'c', undefined);\n\t\t\tsingle.root.children.add(child);\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Add,\n\t\t\t\t\titem: { controllerId: 'ctrlId', expand: TestItemExpandState.NotExpandable, item: convert.TestItem.from(child) },\n\t\t\t\t}\n\t\t\t]);\n\t\t});\n\n\t\ttest('no-ops if items not changed', () => {\n\t\t\tsingle.collectDiff();\n\t\t\tassert.deepStrictEqual(single.collectDiff(), []);\n\t\t});\n\n\t\ttest('watches property mutations', () => {\n\t\t\tsingle.expand(single.root.id, Infinity);\n\t\t\tsingle.collectDiff();\n\t\t\tsingle.root.children.get('id-a')!.description = 'Hello world'; /* item a */\n\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Update,\n\t\t\t\t\titem: { extId: new TestId(['ctrlId', 'id-a']).toString(), item: { description: 'Hello world' } },\n\t\t\t\t}\n\t\t\t]);\n\t\t});\n\n\t\ttest('removes children', () => {\n\t\t\tsingle.expand(single.root.id, Infinity);\n\t\t\tsingle.collectDiff();\n\t\t\tsingle.root.children.delete('id-a');\n\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{ op: TestDiffOpType.Remove, itemId: new TestId(['ctrlId', 'id-a']).toString() },\n\t\t\t]);\n\t\t\tassert.deepStrictEqual(\n\t\t\t\t[...single.tree.keys()].sort(),\n\t\t\t\t[single.root.id, new TestId(['ctrlId', 'id-b']).toString()],\n\t\t\t);\n\t\t\tassert.strictEqual(single.tree.size, 2);\n\t\t});\n\n\t\ttest('adds new children', () => {\n\t\t\tsingle.expand(single.root.id, Infinity);\n\t\t\tsingle.collectDiff();\n\t\t\tconst child = new TestItemImpl('ctrlId', 'id-ac', 'c', undefined);\n\t\t\tsingle.root.children.get('id-a')!.children.add(child);\n\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Add, item: {\n\t\t\t\t\t\tcontrollerId: 'ctrlId',\n\t\t\t\t\t\texpand: TestItemExpandState.NotExpandable,\n\t\t\t\t\t\titem: convert.TestItem.from(child),\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t]);\n\t\t\tassert.deepStrictEqual(\n\t\t\t\t[...single.tree.values()].map(n => n.actual.id).sort(),\n\t\t\t\t[single.root.id, 'id-a', 'id-aa', 'id-ab', 'id-ac', 'id-b'],\n\t\t\t);\n\t\t\tassert.strictEqual(single.tree.size, 6);\n\t\t});\n\n\t\ttest('manages tags correctly', () => {\n\t\t\tsingle.expand(single.root.id, Infinity);\n\t\t\tsingle.collectDiff();\n\t\t\tconst tag1 = new TestTag('tag1');\n\t\t\tconst tag2 = new TestTag('tag2');\n\t\t\tconst tag3 = new TestTag('tag3');\n\t\t\tconst child = new TestItemImpl('ctrlId', 'id-ac', 'c', undefined);\n\t\t\tchild.tags = [tag1, tag2];\n\t\t\tsingle.root.children.get('id-a')!.children.add(child);\n\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{ op: TestDiffOpType.AddTag, tag: { id: 'ctrlId\\0tag1' } },\n\t\t\t\t{ op: TestDiffOpType.AddTag, tag: { id: 'ctrlId\\0tag2' } },\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Add, item: {\n\t\t\t\t\t\tcontrollerId: 'ctrlId',\n\t\t\t\t\t\texpand: TestItemExpandState.NotExpandable,\n\t\t\t\t\t\titem: convert.TestItem.from(child),\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t]);\n\n\t\t\tchild.tags = [tag2, tag3];\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{ op: TestDiffOpType.AddTag, tag: { id: 'ctrlId\\0tag3' } },\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Update, item: {\n\t\t\t\t\t\textId: new TestId(['ctrlId', 'id-a', 'id-ac']).toString(),\n\t\t\t\t\t\titem: { tags: ['ctrlId\\0tag2', 'ctrlId\\0tag3'] }\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{ op: TestDiffOpType.RemoveTag, id: 'ctrlId\\0tag1' },\n\t\t\t]);\n\n\t\t\tconst a = single.root.children.get('id-a')!;\n\t\t\ta.tags = [tag2];\n\t\t\ta.children.replace([]);\n\t\t\tassert.deepStrictEqual(single.collectDiff().filter(t => t.op === TestDiffOpType.RemoveTag), [\n\t\t\t\t{ op: TestDiffOpType.RemoveTag, id: 'ctrlId\\0tag3' },\n\t\t\t]);\n\t\t});\n\n\t\ttest('replaces on uri change', () => {\n\t\t\tsingle.expand(single.root.id, Infinity);\n\t\t\tsingle.collectDiff();\n\n\t\t\tconst oldA = single.root.children.get('id-a') as TestItemImpl;\n\t\t\tconst uri = single.root.children.get('id-a')!.uri?.with({ path: '/different' });\n\t\t\tconst newA = new TestItemImpl('ctrlId', 'id-a', 'Hello world', uri);\n\t\t\tnewA.children.replace([...oldA.children].map(([_, item]) => item));\n\t\t\tsingle.root.children.replace([...single.root.children].map(([id, i]) => id === 'id-a' ? newA : i));\n\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{ op: TestDiffOpType.Remove, itemId: new TestId(['ctrlId', 'id-a']).toString() },\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Add,\n\t\t\t\t\titem: { controllerId: 'ctrlId', expand: TestItemExpandState.NotExpandable, item: { ...convert.TestItem.from(newA) } }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Add,\n\t\t\t\t\titem: { controllerId: 'ctrlId', expand: TestItemExpandState.NotExpandable, item: convert.TestItem.from(newA.children.get('id-aa') as TestItemImpl) }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Add,\n\t\t\t\t\titem: { controllerId: 'ctrlId', expand: TestItemExpandState.NotExpandable, item: convert.TestItem.from(newA.children.get('id-ab') as TestItemImpl) }\n\t\t\t\t},\n\t\t\t]);\n\t\t});\n\n\t\ttest('treats in-place replacement as mutation', () => {\n\t\t\tsingle.expand(single.root.id, Infinity);\n\t\t\tsingle.collectDiff();\n\n\t\t\tconst oldA = single.root.children.get('id-a') as TestItemImpl;\n\t\t\tconst uri = single.root.children.get('id-a')!.uri;\n\t\t\tconst newA = new TestItemImpl('ctrlId', 'id-a', 'Hello world', uri);\n\t\t\tnewA.children.replace([...oldA.children].map(([_, item]) => item));\n\t\t\tsingle.root.children.replace([\n\t\t\t\tnewA,\n\t\t\t\tnew TestItemImpl('ctrlId', 'id-b', single.root.children.get('id-b')!.label, uri),\n\t\t\t]);\n\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Update,\n\t\t\t\t\titem: { extId: new TestId(['ctrlId', 'id-a']).toString(), expand: TestItemExpandState.Expanded, item: { label: 'Hello world' } },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.DocumentSynced,\n\t\t\t\t\tdocv: undefined,\n\t\t\t\t\turi: uri\n\t\t\t\t}\n\t\t\t]);\n\n\t\t\tnewA.label = 'still connected';\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Update,\n\t\t\t\t\titem: { extId: new TestId(['ctrlId', 'id-a']).toString(), item: { label: 'still connected' } }\n\t\t\t\t},\n\t\t\t]);\n\n\t\t\toldA.label = 'no longer connected';\n\t\t\tassert.deepStrictEqual(single.collectDiff(), []);\n\t\t});\n\n\t\ttest('treats in-place replacement as mutation deeply', () => {\n\t\t\tsingle.expand(single.root.id, Infinity);\n\t\t\tsingle.collectDiff();\n\n\t\t\tconst oldA = single.root.children.get('id-a')!;\n\t\t\tconst uri = oldA.uri;\n\t\t\tconst newA = new TestItemImpl('ctrlId', 'id-a', single.root.children.get('id-a')!.label, uri);\n\t\t\tconst oldAA = oldA.children.get('id-aa')!;\n\t\t\tconst oldAB = oldA.children.get('id-ab')!;\n\t\t\tconst newAB = new TestItemImpl('ctrlId', 'id-ab', 'Hello world', uri);\n\t\t\tnewA.children.replace([oldAA, newAB]);\n\t\t\tsingle.root.children.replace([newA, single.root.children.get('id-b')!]);\n\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Update,\n\t\t\t\t\titem: { extId: new TestId(['ctrlId', 'id-a']).toString(), expand: TestItemExpandState.Expanded },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Update,\n\t\t\t\t\titem: { extId: TestId.fromExtHostTestItem(oldAB, 'ctrlId').toString(), item: { label: 'Hello world' } },\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.DocumentSynced,\n\t\t\t\t\tdocv: undefined,\n\t\t\t\t\turi: uri\n\t\t\t\t}\n\t\t\t]);\n\n\t\t\toldAA.label = 'still connected1';\n\t\t\tnewAB.label = 'still connected2';\n\t\t\toldAB.label = 'not connected3';\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Update,\n\t\t\t\t\titem: { extId: new TestId(['ctrlId', 'id-a', 'id-aa']).toString(), item: { label: 'still connected1' } }\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Update,\n\t\t\t\t\titem: { extId: new TestId(['ctrlId', 'id-a', 'id-ab']).toString(), item: { label: 'still connected2' } }\n\t\t\t\t},\n\t\t\t]);\n\n\t\t\tassert.strictEqual(newAB.parent, newA);\n\t\t\tassert.strictEqual(oldAA.parent, newA);\n\t\t\tassert.deepStrictEqual(newA.parent, undefined);\n\t\t});\n\n\t\ttest('moves an item to be a new child', async () => {\n\t\t\tawait single.expand(single.root.id, 0);\n\t\t\tsingle.collectDiff();\n\t\t\tconst b = single.root.children.get('id-b') as TestItemImpl;\n\t\t\tconst a = single.root.children.get('id-a') as TestItemImpl;\n\t\t\ta.children.add(b);\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Remove,\n\t\t\t\t\titemId: new TestId(['ctrlId', 'id-b']).toString(),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Add,\n\t\t\t\t\titem: { controllerId: 'ctrlId', expand: TestItemExpandState.NotExpandable, item: convert.TestItem.from(b) }\n\t\t\t\t},\n\t\t\t]);\n\n\t\t\tb.label = 'still connected';\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Update,\n\t\t\t\t\titem: { extId: new TestId(['ctrlId', 'id-a', 'id-b']).toString(), item: { label: 'still connected' } }\n\t\t\t\t},\n\t\t\t]);\n\n\t\t\tassert.deepStrictEqual([...single.root.children].map(([_, item]) => item), [single.root.children.get('id-a')]);\n\t\t\tassert.deepStrictEqual(b.parent, a);\n\t\t});\n\n\t\ttest('sends document sync events', async () => {\n\t\t\tawait single.expand(single.root.id, 0);\n\t\t\tsingle.collectDiff();\n\n\t\t\tconst a = single.root.children.get('id-a') as TestItemImpl;\n\t\t\ta.range = new Range(new Position(0, 0), new Position(1, 0));\n\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.DocumentSynced,\n\t\t\t\t\tdocv: undefined,\n\t\t\t\t\turi: URI.file('/')\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.Update,\n\t\t\t\t\titem: {\n\t\t\t\t\t\textId: new TestId(['ctrlId', 'id-a']).toString(),\n\t\t\t\t\t\titem: {\n\t\t\t\t\t\t\trange: editorRange.Range.lift({\n\t\t\t\t\t\t\t\tendColumn: 1,\n\t\t\t\t\t\t\t\tendLineNumber: 2,\n\t\t\t\t\t\t\t\tstartColumn: 1,\n\t\t\t\t\t\t\t\tstartLineNumber: 1\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t]);\n\n\t\t\t// sends on replace even if it's a no-op\n\t\t\ta.range = a.range;\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.DocumentSynced,\n\t\t\t\t\tdocv: undefined,\n\t\t\t\t\turi: URI.file('/')\n\t\t\t\t},\n\t\t\t]);\n\n\t\t\t// sends on a child replacement\n\t\t\tconst uri = URI.file('/');\n\t\t\tconst a2 = new TestItemImpl('ctrlId', 'id-a', 'a', uri);\n\t\t\ta2.range = a.range;\n\t\t\tsingle.root.children.replace([a2, single.root.children.get('id-b')!]);\n\t\t\tassert.deepStrictEqual(single.collectDiff(), [\n\t\t\t\t{\n\t\t\t\t\top: TestDiffOpType.DocumentSynced,\n\t\t\t\t\tdocv: undefined,\n\t\t\t\t\turi\n\t\t\t\t},\n\t\t\t]);\n\t\t});\n\t});\n\n\n\tsuite('MirroredTestCollection', () => {\n\t\t// todo@connor4312: re-renable when we figure out what observing looks like we async children\n\t\t// \tlet m: TestMirroredCollection;\n\t\t// \tsetup(() => m = new TestMirroredCollection());\n\n\t\t// \ttest('mirrors creation of the root', () => {\n\t\t// \t\tconst tests = testStubs.nested();\n\t\t// \t\tsingle.addRoot(tests, 'pid');\n\t\t// \t\tsingle.expand(single.root.id, Infinity);\n\t\t// \t\tm.apply(single.collectDiff());\n\t\t// \t\tassertTreesEqual(m.rootTestItems[0], owned.getTestById(single.root.id)![1].actual);\n\t\t// \t\tassert.strictEqual(m.length, single.itemToInternal.size);\n\t\t// \t});\n\n\t\t// \ttest('mirrors node deletion', () => {\n\t\t// \t\tconst tests = testStubs.nested();\n\t\t// \t\tsingle.addRoot(tests, 'pid');\n\t\t// \t\tm.apply(single.collectDiff());\n\t\t// \t\tsingle.expand(single.root.id, Infinity);\n\t\t// \t\ttests.children!.splice(0, 1);\n\t\t// \t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\tsingle.expand(single.root.id, Infinity);\n\t\t// \t\tm.apply(single.collectDiff());\n\n\t\t// \t\tassertTreesEqual(m.rootTestItems[0], owned.getTestById(single.root.id)![1].actual);\n\t\t// \t\tassert.strictEqual(m.length, single.itemToInternal.size);\n\t\t// \t});\n\n\t\t// \ttest('mirrors node addition', () => {\n\t\t// \t\tconst tests = testStubs.nested();\n\t\t// \t\tsingle.addRoot(tests, 'pid');\n\t\t// \t\tm.apply(single.collectDiff());\n\t\t// \t\ttests.children![0].children!.push(stubTest('ac'));\n\t\t// \t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\tm.apply(single.collectDiff());\n\n\t\t// \t\tassertTreesEqual(m.rootTestItems[0], owned.getTestById(single.root.id)![1].actual);\n\t\t// \t\tassert.strictEqual(m.length, single.itemToInternal.size);\n\t\t// \t});\n\n\t\t// \ttest('mirrors node update', () => {\n\t\t// \t\tconst tests = testStubs.nested();\n\t\t// \t\tsingle.addRoot(tests, 'pid');\n\t\t// \t\tm.apply(single.collectDiff());\n\t\t// \t\ttests.children![0].description = 'Hello world'; /* item a */\n\t\t// \t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\tm.apply(single.collectDiff());\n\n\t\t// \t\tassertTreesEqual(m.rootTestItems[0], owned.getTestById(single.root.id)![1].actual);\n\t\t// \t});\n\n\t\t// \tsuite('MirroredChangeCollector', () => {\n\t\t// \t\tlet tests = testStubs.nested();\n\t\t// \t\tsetup(() => {\n\t\t// \t\t\ttests = testStubs.nested();\n\t\t// \t\t\tsingle.addRoot(tests, 'pid');\n\t\t// \t\t\tm.apply(single.collectDiff());\n\t\t// \t\t});\n\n\t\t// \t\ttest('creates change for root', () => {\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.added, [\n\t\t// \t\t\t\ttests,\n\t\t// \t\t\t\ttests.children[0],\n\t\t// \t\t\t\ttests.children![0].children![0],\n\t\t// \t\t\t\ttests.children![0].children![1],\n\t\t// \t\t\t\ttests.children[1],\n\t\t// \t\t\t]);\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.removed, []);\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.updated, []);\n\t\t// \t\t});\n\n\t\t// \t\ttest('creates change for delete', () => {\n\t\t// \t\t\tconst rm = tests.children.shift()!;\n\t\t// \t\t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\t\tm.apply(single.collectDiff());\n\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.added, []);\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.removed, [\n\t\t// \t\t\t\t{ ...rm },\n\t\t// \t\t\t\t{ ...rm.children![0] },\n\t\t// \t\t\t\t{ ...rm.children![1] },\n\t\t// \t\t\t]);\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.updated, []);\n\t\t// \t\t});\n\n\t\t// \t\ttest('creates change for update', () => {\n\t\t// \t\t\ttests.children[0].label = 'updated!';\n\t\t// \t\t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\t\tm.apply(single.collectDiff());\n\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.added, []);\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.removed, []);\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.updated, [tests.children[0]]);\n\t\t// \t\t});\n\n\t\t// \t\ttest('is a no-op if a node is added and removed', () => {\n\t\t// \t\t\tconst nested = testStubs.nested('id2-');\n\t\t// \t\t\ttests.children.push(nested);\n\t\t// \t\t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\t\ttests.children.pop();\n\t\t// \t\t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\t\tconst previousEvent = m.changeEvent;\n\t\t// \t\t\tm.apply(single.collectDiff());\n\t\t// \t\t\tassert.strictEqual(m.changeEvent, previousEvent);\n\t\t// \t\t});\n\n\t\t// \t\ttest('is a single-op if a node is added and changed', () => {\n\t\t// \t\t\tconst child = stubTest('c');\n\t\t// \t\t\ttests.children.push(child);\n\t\t// \t\t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\t\tchild.label = 'd';\n\t\t// \t\t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\t\tm.apply(single.collectDiff());\n\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.added, [child]);\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.removed, []);\n\t\t// \t\t\tassertTreeListEqual(m.changeEvent.updated, []);\n\t\t// \t\t});\n\n\t\t// \t\ttest('gets the common ancestor (1)', () => {\n\t\t// \t\t\ttests.children![0].children![0].label = 'za';\n\t\t// \t\t\ttests.children![0].children![1].label = 'zb';\n\t\t// \t\t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\t\tm.apply(single.collectDiff());\n\n\t\t// \t\t});\n\n\t\t// \t\ttest('gets the common ancestor (2)', () => {\n\t\t// \t\t\ttests.children![0].children![0].label = 'za';\n\t\t// \t\t\ttests.children![1].label = 'ab';\n\t\t// \t\t\tsingle.onItemChange(tests, 'pid');\n\t\t// \t\t\tm.apply(single.collectDiff());\n\t\t// \t\t});\n\t\t// \t});\n\t});\n\n\tsuite('TestRunTracker', () => {\n\t\tlet proxy: MockObject<MainThreadTestingShape>;\n\t\tlet c: TestRunCoordinator;\n\t\tlet cts: CancellationTokenSource;\n\t\tlet configuration: TestRunProfileImpl;\n\n\t\tlet req: TestRunRequest;\n\n\t\tlet dto: TestRunDto;\n\t\tconst ext: IRelaxedExtensionDescription = {} as any;\n\n\t\tsetup(async () => {\n\t\t\tproxy = mockObject<MainThreadTestingShape>()();\n\t\t\tcts = new CancellationTokenSource();\n\t\t\tc = new TestRunCoordinator(proxy);\n\n\t\t\tconfiguration = new TestRunProfileImpl(mockObject<MainThreadTestingShape>()(), new Map(), 'ctrlId', 42, 'Do Run', TestRunProfileKind.Run, () => { }, false);\n\n\t\t\tawait single.expand(single.root.id, Infinity);\n\t\t\tsingle.collectDiff();\n\n\t\t\treq = {\n\t\t\t\tinclude: undefined,\n\t\t\t\texclude: [single.root.children.get('id-b')!],\n\t\t\t\tprofile: configuration,\n\t\t\t};\n\n\t\t\tdto = TestRunDto.fromInternal({\n\t\t\t\tcontrollerId: 'ctrl',\n\t\t\t\tprofileId: configuration.profileId,\n\t\t\t\texcludeExtIds: ['id-b'],\n\t\t\t\trunId: 'run-id',\n\t\t\t\ttestIds: [single.root.id],\n\t\t\t}, single);\n\t\t});\n\n\t\ttest('tracks a run started from a main thread request', () => {\n\t\t\tconst tracker = ds.add(c.prepareForMainThreadTestRun(req, dto, ext, cts.token));\n\t\t\tassert.strictEqual(tracker.hasRunningTasks, false);\n\n\t\t\tconst task1 = c.createTestRun(ext, 'ctrl', single, req, 'run1', true);\n\t\t\tconst task2 = c.createTestRun(ext, 'ctrl', single, req, 'run2', true);\n\t\t\tassert.strictEqual(proxy.$startedExtensionTestRun.called, false);\n\t\t\tassert.strictEqual(tracker.hasRunningTasks, true);\n\n\t\t\ttask1.appendOutput('hello');\n\t\t\tconst taskId = proxy.$appendOutputToRun.args[0]?.[1];\n\t\t\tassert.deepStrictEqual([['run-id', taskId, VSBuffer.fromString('hello'), undefined, undefined]], proxy.$appendOutputToRun.args);\n\t\t\ttask1.end();\n\n\t\t\tassert.strictEqual(proxy.$finishedExtensionTestRun.called, false);\n\t\t\tassert.strictEqual(tracker.hasRunningTasks, true);\n\n\t\t\ttask2.end();\n\n\t\t\tassert.strictEqual(proxy.$finishedExtensionTestRun.called, false);\n\t\t\tassert.strictEqual(tracker.hasRunningTasks, false);\n\t\t});\n\n\t\ttest('run cancel force ends after a timeout', () => {\n\t\t\tconst clock = sinon.useFakeTimers();\n\t\t\ttry {\n\t\t\t\tconst tracker = ds.add(c.prepareForMainThreadTestRun(req, dto, ext, cts.token));\n\t\t\t\tconst task = c.createTestRun(ext, 'ctrl', single, req, 'run1', true);\n\t\t\t\tconst onEnded = sinon.stub();\n\t\t\t\tds.add(tracker.onEnd(onEnded));\n\n\t\t\t\tassert.strictEqual(task.token.isCancellationRequested, false);\n\t\t\t\tassert.strictEqual(tracker.hasRunningTasks, true);\n\t\t\t\ttracker.cancel();\n\n\t\t\t\tassert.strictEqual(task.token.isCancellationRequested, true);\n\t\t\t\tassert.strictEqual(tracker.hasRunningTasks, true);\n\n\t\t\t\tclock.tick(9999);\n\t\t\t\tassert.strictEqual(tracker.hasRunningTasks, true);\n\t\t\t\tassert.strictEqual(onEnded.called, false);\n\n\t\t\t\tclock.tick(1);\n\t\t\t\tassert.strictEqual(onEnded.called, true);\n\t\t\t\tassert.strictEqual(tracker.hasRunningTasks, false);\n\t\t\t} finally {\n\t\t\t\tclock.restore();\n\t\t\t}\n\t\t});\n\n\t\ttest('run cancel force ends on second cancellation request', () => {\n\t\t\tconst tracker = ds.add(c.prepareForMainThreadTestRun(req, dto, ext, cts.token));\n\t\t\tconst task = c.createTestRun(ext, 'ctrl', single, req, 'run1', true);\n\t\t\tconst onEnded = sinon.stub();\n\t\t\tds.add(tracker.onEnd(onEnded));\n\n\t\t\tassert.strictEqual(task.token.isCancellationRequested, false);\n\t\t\tassert.strictEqual(tracker.hasRunningTasks, true);\n\t\t\ttracker.cancel();\n\n\t\t\tassert.strictEqual(task.token.isCancellationRequested, true);\n\t\t\tassert.strictEqual(tracker.hasRunningTasks, true);\n\t\t\tassert.strictEqual(onEnded.called, false);\n\t\t\ttracker.cancel();\n\n\t\t\tassert.strictEqual(tracker.hasRunningTasks, false);\n\t\t\tassert.strictEqual(onEnded.called, true);\n\t\t});\n\n\t\ttest('tracks a run started from an extension request', () => {\n\t\t\tconst task1 = c.createTestRun(ext, 'ctrl', single, req, 'hello world', false);\n\n\t\t\tconst tracker = Iterable.first(c.trackers)!;\n\t\t\tassert.strictEqual(tracker.hasRunningTasks, true);\n\t\t\tassert.deepStrictEqual(proxy.$startedExtensionTestRun.args, [\n\t\t\t\t[{\n\t\t\t\t\tprofile: { group: 2, id: 42 },\n\t\t\t\t\tcontrollerId: 'ctrl',\n\t\t\t\t\tid: tracker.id,\n\t\t\t\t\tinclude: [single.root.id],\n\t\t\t\t\texclude: [new TestId(['ctrlId', 'id-b']).toString()],\n\t\t\t\t\tpersist: false,\n\t\t\t\t\tcontinuous: false,\n\t\t\t\t}]\n\t\t\t]);\n\n\t\t\tconst task2 = c.createTestRun(ext, 'ctrl', single, req, 'run2', true);\n\t\t\tconst task3Detached = c.createTestRun(ext, 'ctrl', single, { ...req }, 'task3Detached', true);\n\n\t\t\ttask1.end();\n\t\t\tassert.strictEqual(proxy.$finishedExtensionTestRun.called, false);\n\t\t\tassert.strictEqual(tracker.hasRunningTasks, true);\n\n\t\t\ttask2.end();\n\t\t\tassert.deepStrictEqual(proxy.$finishedExtensionTestRun.args, [[tracker.id]]);\n\t\t\tassert.strictEqual(tracker.hasRunningTasks, false);\n\n\t\t\ttask3Detached.end();\n\t\t});\n\n\t\ttest('adds tests to run smartly', () => {\n\t\t\tconst task1 = c.createTestRun(ext, 'ctrlId', single, req, 'hello world', false);\n\t\t\tconst tracker = Iterable.first(c.trackers)!;\n\t\t\tconst expectedArgs: unknown[][] = [];\n\t\t\tassert.deepStrictEqual(proxy.$addTestsToRun.args, expectedArgs);\n\n\t\t\ttask1.passed(single.root.children.get('id-a')!.children.get('id-aa')!);\n\t\t\texpectedArgs.push([\n\t\t\t\t'ctrlId',\n\t\t\t\ttracker.id,\n\t\t\t\t[\n\t\t\t\t\tconvert.TestItem.from(single.root),\n\t\t\t\t\tconvert.TestItem.from(single.root.children.get('id-a') as TestItemImpl),\n\t\t\t\t\tconvert.TestItem.from(single.root.children.get('id-a')!.children.get('id-aa') as TestItemImpl),\n\t\t\t\t]\n\t\t\t]);\n\t\t\tassert.deepStrictEqual(proxy.$addTestsToRun.args, expectedArgs);\n\n\t\t\ttask1.enqueued(single.root.children.get('id-a')!.children.get('id-ab')!);\n\t\t\texpectedArgs.push([\n\t\t\t\t'ctrlId',\n\t\t\t\ttracker.id,\n\t\t\t\t[\n\t\t\t\t\tconvert.TestItem.from(single.root.children.get('id-a') as TestItemImpl),\n\t\t\t\t\tconvert.TestItem.from(single.root.children.get('id-a')!.children.get('id-ab') as TestItemImpl),\n\t\t\t\t],\n\t\t\t]);\n\t\t\tassert.deepStrictEqual(proxy.$addTestsToRun.args, expectedArgs);\n\n\t\t\ttask1.passed(single.root.children.get('id-a')!.children.get('id-ab')!);\n\t\t\tassert.deepStrictEqual(proxy.$addTestsToRun.args, expectedArgs);\n\n\t\t\ttask1.end();\n\t\t});\n\n\t\ttest('adds test messages to run', () => {\n\t\t\tconst test1 = new TestItemImpl('ctrlId', 'id-c', 'test c', URI.file('/testc.txt'));\n\t\t\tconst test2 = new TestItemImpl('ctrlId', 'id-d', 'test d', URI.file('/testd.txt'));\n\t\t\ttest1.range = test2.range = new Range(new Position(0, 0), new Position(1, 0));\n\t\t\tsingle.root.children.replace([test1, test2]);\n\t\t\tconst task = c.createTestRun(ext, 'ctrlId', single, req, 'hello world', false);\n\n\t\t\tconst message1 = new TestMessage('some message');\n\t\t\tmessage1.location = new Location(URI.file('/a.txt'), new Position(0, 0));\n\t\t\ttask.failed(test1, message1);\n\n\t\t\tconst args = proxy.$appendTestMessagesInRun.args[0];\n\t\t\tassert.deepStrictEqual(proxy.$appendTestMessagesInRun.args[0], [\n\t\t\t\targs[0],\n\t\t\t\targs[1],\n\t\t\t\tnew TestId(['ctrlId', 'id-c']).toString(),\n\t\t\t\t[{\n\t\t\t\t\tmessage: 'some message',\n\t\t\t\t\ttype: TestMessageType.Error,\n\t\t\t\t\texpected: undefined,\n\t\t\t\t\tcontextValue: undefined,\n\t\t\t\t\tactual: undefined,\n\t\t\t\t\tlocation: convert.location.from(message1.location)\n\t\t\t\t}]\n\t\t\t]);\n\n\t\t\t// should use test location as default\n\t\t\ttask.failed(test2, new TestMessage('some message'));\n\t\t\tassert.deepStrictEqual(proxy.$appendTestMessagesInRun.args[1], [\n\t\t\t\targs[0],\n\t\t\t\targs[1],\n\t\t\t\tnew TestId(['ctrlId', 'id-d']).toString(),\n\t\t\t\t[{\n\t\t\t\t\tmessage: 'some message',\n\t\t\t\t\ttype: TestMessageType.Error,\n\t\t\t\t\tcontextValue: undefined,\n\t\t\t\t\texpected: undefined,\n\t\t\t\t\tactual: undefined,\n\t\t\t\t\tlocation: convert.location.from({ uri: test2.uri!, range: test2.range! }),\n\t\t\t\t}]\n\t\t\t]);\n\n\t\t\ttask.end();\n\t\t});\n\n\t\ttest('guards calls after runs are ended', () => {\n\t\t\tconst task = c.createTestRun(ext, 'ctrl', single, req, 'hello world', false);\n\t\t\ttask.end();\n\n\t\t\ttask.failed(single.root, new TestMessage('some message'));\n\t\t\ttask.appendOutput('output');\n\n\t\t\tassert.strictEqual(proxy.$addTestsToRun.called, false);\n\t\t\tassert.strictEqual(proxy.$appendOutputToRun.called, false);\n\t\t\tassert.strictEqual(proxy.$appendTestMessagesInRun.called, false);\n\t\t});\n\n\t\ttest('excludes tests outside tree or explicitly excluded', () => {\n\t\t\tconst task = c.createTestRun(ext, 'ctrlId', single, {\n\t\t\t\tprofile: configuration,\n\t\t\t\tinclude: [single.root.children.get('id-a')!],\n\t\t\t\texclude: [single.root.children.get('id-a')!.children.get('id-aa')!],\n\t\t\t}, 'hello world', false);\n\n\t\t\ttask.passed(single.root.children.get('id-a')!.children.get('id-aa')!);\n\t\t\ttask.passed(single.root.children.get('id-a')!.children.get('id-ab')!);\n\n\t\t\tassert.deepStrictEqual(proxy.$updateTestStateInRun.args.length, 1);\n\t\t\tconst args = proxy.$updateTestStateInRun.args[0];\n\t\t\tassert.deepStrictEqual(proxy.$updateTestStateInRun.args, [[\n\t\t\t\targs[0],\n\t\t\t\targs[1],\n\t\t\t\tnew TestId(['ctrlId', 'id-a', 'id-ab']).toString(),\n\t\t\t\tTestResultState.Passed,\n\t\t\t\tundefined,\n\t\t\t]]);\n\t\t\ttask.end();\n\t\t});\n\n\t\ttest('sets state of test with identical local IDs (#131827)', () => {\n\t\t\tconst testA = single.root.children.get('id-a');\n\t\t\tconst testB = single.root.children.get('id-b');\n\t\t\tconst childA = new TestItemImpl('ctrlId', 'id-child', 'child', undefined);\n\t\t\ttestA!.children.replace([childA]);\n\t\t\tconst childB = new TestItemImpl('ctrlId', 'id-child', 'child', undefined);\n\t\t\ttestB!.children.replace([childB]);\n\n\t\t\tconst task1 = c.createTestRun(ext, 'ctrl', single, new TestRunRequestImpl(), 'hello world', false);\n\t\t\tconst tracker = Iterable.first(c.trackers)!;\n\n\t\t\ttask1.passed(childA);\n\t\t\ttask1.passed(childB);\n\t\t\tassert.deepStrictEqual(proxy.$addTestsToRun.args, [\n\t\t\t\t[\n\t\t\t\t\t'ctrl',\n\t\t\t\t\ttracker.id,\n\t\t\t\t\t[single.root, testA, childA].map(t => convert.TestItem.from(t as TestItemImpl)),\n\t\t\t\t],\n\t\t\t\t[\n\t\t\t\t\t'ctrl',\n\t\t\t\t\ttracker.id,\n\t\t\t\t\t[single.root, testB, childB].map(t => convert.TestItem.from(t as TestItemImpl)),\n\t\t\t\t],\n\t\t\t]);\n\n\t\t\ttask1.end();\n\t\t});\n\t});\n});\n"]}