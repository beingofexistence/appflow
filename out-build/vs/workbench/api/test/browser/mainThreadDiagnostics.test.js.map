{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/test/browser/mainThreadDiagnostics.test.ts"],"names":[],"mappings":"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","file":"mainThreadDiagnostics.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { timeout } from 'vs/base/common/async';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { runWithFakedTimers } from 'vs/base/test/common/timeTravelScheduler';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { MarkerService } from 'vs/platform/markers/common/markerService';\nimport { IMarkerData } from 'vs/platform/markers/common/markers';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { MainThreadDiagnostics } from 'vs/workbench/api/browser/mainThreadDiagnostics';\nimport { IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport { ExtensionHostKind } from 'vs/workbench/services/extensions/common/extensionHostKind';\nimport { mock } from 'vs/workbench/test/common/workbenchTestServices';\n\n\nsuite('MainThreadDiagnostics', function () {\n\n\tlet markerService: MarkerService;\n\n\tsetup(function () {\n\t\tmarkerService = new MarkerService();\n\t});\n\n\tteardown(function () {\n\t\tmarkerService.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('clear markers on dispose', function () {\n\n\t\tconst diag = new MainThreadDiagnostics(\n\t\t\tnew class implements IExtHostContext {\n\t\t\t\tremoteAuthority = '';\n\t\t\t\textensionHostKind = ExtensionHostKind.LocalProcess;\n\t\t\t\tdispose() { }\n\t\t\t\tassertRegistered() { }\n\t\t\t\tset(v: any): any { return null; }\n\t\t\t\tgetProxy(): any {\n\t\t\t\t\treturn {\n\t\t\t\t\t\t$acceptMarkersChange() { }\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tdrain(): any { return null; }\n\t\t\t},\n\t\t\tmarkerService,\n\t\t\tnew class extends mock<IUriIdentityService>() {\n\t\t\t\toverride asCanonicalUri(uri: URI) { return uri; }\n\t\t\t}\n\t\t);\n\n\t\tdiag.$changeMany('foo', [[URI.file('a'), [{\n\t\t\tcode: '666',\n\t\t\tstartLineNumber: 1,\n\t\t\tstartColumn: 1,\n\t\t\tendLineNumber: 1,\n\t\t\tendColumn: 1,\n\t\t\tmessage: 'fffff',\n\t\t\tseverity: 1,\n\t\t\tsource: 'me'\n\t\t}]]]);\n\n\t\tassert.strictEqual(markerService.read().length, 1);\n\t\tdiag.dispose();\n\t\tassert.strictEqual(markerService.read().length, 0);\n\t});\n\n\ttest('OnDidChangeDiagnostics triggers twice on same diagnostics #136434', function () {\n\n\t\treturn runWithFakedTimers({}, async () => {\n\n\t\t\tconst changedData: [UriComponents, IMarkerData[]][][] = [];\n\n\t\t\tconst diag = new MainThreadDiagnostics(\n\t\t\t\tnew class implements IExtHostContext {\n\t\t\t\t\tremoteAuthority = '';\n\t\t\t\t\textensionHostKind = ExtensionHostKind.LocalProcess;\n\t\t\t\t\tdispose() { }\n\t\t\t\t\tassertRegistered() { }\n\t\t\t\t\tset(v: any): any { return null; }\n\t\t\t\t\tgetProxy(): any {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t$acceptMarkersChange(data: [UriComponents, IMarkerData[]][]) {\n\t\t\t\t\t\t\t\tchangedData.push(data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tdrain(): any { return null; }\n\t\t\t\t},\n\t\t\t\tmarkerService,\n\t\t\t\tnew class extends mock<IUriIdentityService>() {\n\t\t\t\t\toverride asCanonicalUri(uri: URI) { return uri; }\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tconst markerDataStub = {\n\t\t\t\tcode: '666',\n\t\t\t\tstartLineNumber: 1,\n\t\t\t\tstartColumn: 1,\n\t\t\t\tendLineNumber: 1,\n\t\t\t\tendColumn: 1,\n\t\t\t\tseverity: 1,\n\t\t\t\tsource: 'me'\n\t\t\t};\n\t\t\tconst target = URI.file('a');\n\t\t\tdiag.$changeMany('foo', [[target, [{ ...markerDataStub, message: 'same_owner' }]]]);\n\t\t\tmarkerService.changeOne('bar', target, [{ ...markerDataStub, message: 'forgein_owner' }]);\n\n\t\t\t// added one marker via the API and one via the ext host. the latter must not\n\t\t\t// trigger an event to the extension host\n\n\t\t\tawait timeout(0);\n\t\t\tassert.strictEqual(markerService.read().length, 2);\n\t\t\tassert.strictEqual(changedData.length, 1);\n\t\t\tassert.strictEqual(changedData[0].length, 1);\n\t\t\tassert.strictEqual(changedData[0][0][1][0].message, 'forgein_owner');\n\n\t\t\tdiag.dispose();\n\t\t});\n\t});\n\n\ttest('onDidChangeDiagnostics different behavior when \"extensionKind\" ui running on remote workspace #136955', function () {\n\t\treturn runWithFakedTimers({}, async () => {\n\n\t\t\tconst markerData: IMarkerData = {\n\t\t\t\tcode: '666',\n\t\t\t\tstartLineNumber: 1,\n\t\t\t\tstartColumn: 1,\n\t\t\t\tendLineNumber: 1,\n\t\t\t\tendColumn: 1,\n\t\t\t\tseverity: 1,\n\t\t\t\tsource: 'me',\n\t\t\t\tmessage: 'message'\n\t\t\t};\n\t\t\tconst target = URI.file('a');\n\t\t\tmarkerService.changeOne('bar', target, [markerData]);\n\n\t\t\tconst changedData: [UriComponents, IMarkerData[]][][] = [];\n\n\t\t\tconst diag = new MainThreadDiagnostics(\n\t\t\t\tnew class implements IExtHostContext {\n\t\t\t\t\tremoteAuthority = '';\n\t\t\t\t\textensionHostKind = ExtensionHostKind.LocalProcess;\n\t\t\t\t\tdispose() { }\n\t\t\t\t\tassertRegistered() { }\n\t\t\t\t\tset(v: any): any { return null; }\n\t\t\t\t\tgetProxy(): any {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t$acceptMarkersChange(data: [UriComponents, IMarkerData[]][]) {\n\t\t\t\t\t\t\t\tchangedData.push(data);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tdrain(): any { return null; }\n\t\t\t\t},\n\t\t\t\tmarkerService,\n\t\t\t\tnew class extends mock<IUriIdentityService>() {\n\t\t\t\t\toverride asCanonicalUri(uri: URI) { return uri; }\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tdiag.$clear('bar');\n\t\t\tawait timeout(0);\n\t\t\tassert.strictEqual(markerService.read().length, 0);\n\t\t\tassert.strictEqual(changedData.length, 1);\n\n\t\t\tdiag.dispose();\n\t\t});\n\t});\n});\n"]}