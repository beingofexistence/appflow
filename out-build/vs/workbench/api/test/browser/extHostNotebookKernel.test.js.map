{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/test/browser/extHostNotebookKernel.test.ts"],"names":[],"mappings":"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","file":"extHostNotebookKernel.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Barrier } from 'vs/base/common/async';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { ICellExecuteUpdateDto, ICellExecutionCompleteDto, INotebookKernelDto2, MainContext, MainThreadCommandsShape, MainThreadNotebookDocumentsShape, MainThreadNotebookKernelsShape, MainThreadNotebookShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { ExtHostCommands } from 'vs/workbench/api/common/extHostCommands';\nimport { ExtHostDocuments } from 'vs/workbench/api/common/extHostDocuments';\nimport { ExtHostDocumentsAndEditors } from 'vs/workbench/api/common/extHostDocumentsAndEditors';\nimport { IExtHostInitDataService } from 'vs/workbench/api/common/extHostInitDataService';\nimport { ExtHostNotebookController } from 'vs/workbench/api/common/extHostNotebook';\nimport { ExtHostNotebookDocument } from 'vs/workbench/api/common/extHostNotebookDocument';\nimport { ExtHostNotebookDocuments } from 'vs/workbench/api/common/extHostNotebookDocuments';\nimport { ExtHostNotebookKernels } from 'vs/workbench/api/common/extHostNotebookKernels';\nimport { NotebookCellOutput, NotebookCellOutputItem } from 'vs/workbench/api/common/extHostTypes';\nimport { CellKind, CellUri, NotebookCellsChangeType } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { CellExecutionUpdateType } from 'vs/workbench/contrib/notebook/common/notebookExecutionService';\nimport { nullExtensionDescription } from 'vs/workbench/services/extensions/common/extensions';\nimport { SerializableObjectWithBuffers } from 'vs/workbench/services/extensions/common/proxyIdentifier';\nimport { TestRPCProtocol } from 'vs/workbench/api/test/common/testRPCProtocol';\nimport { mock } from 'vs/workbench/test/common/workbenchTestServices';\nimport { IExtHostTelemetry } from 'vs/workbench/api/common/extHostTelemetry';\nimport { ExtHostConsumerFileSystem } from 'vs/workbench/api/common/extHostFileSystemConsumer';\nimport { ExtHostFileSystemInfo } from 'vs/workbench/api/common/extHostFileSystemInfo';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nsuite('NotebookKernel', function () {\n\tlet rpcProtocol: TestRPCProtocol;\n\tlet extHostNotebookKernels: ExtHostNotebookKernels;\n\tlet notebook: ExtHostNotebookDocument;\n\tlet extHostDocumentsAndEditors: ExtHostDocumentsAndEditors;\n\tlet extHostDocuments: ExtHostDocuments;\n\tlet extHostNotebooks: ExtHostNotebookController;\n\tlet extHostNotebookDocuments: ExtHostNotebookDocuments;\n\tlet extHostCommands: ExtHostCommands;\n\tlet extHostConsumerFileSystem: ExtHostConsumerFileSystem;\n\n\tconst notebookUri = URI.parse('test:///notebook.file');\n\tconst kernelData = new Map<number, INotebookKernelDto2>();\n\tconst disposables = new DisposableStore();\n\n\tconst cellExecuteCreate: { notebook: UriComponents; cell: number }[] = [];\n\tconst cellExecuteUpdates: ICellExecuteUpdateDto[] = [];\n\tconst cellExecuteComplete: ICellExecutionCompleteDto[] = [];\n\n\tteardown(function () {\n\t\tdisposables.clear();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsetup(async function () {\n\t\tcellExecuteCreate.length = 0;\n\t\tcellExecuteUpdates.length = 0;\n\t\tcellExecuteComplete.length = 0;\n\t\tkernelData.clear();\n\n\t\trpcProtocol = new TestRPCProtocol();\n\t\trpcProtocol.set(MainContext.MainThreadCommands, new class extends mock<MainThreadCommandsShape>() {\n\t\t\toverride $registerCommand() { }\n\t\t});\n\t\trpcProtocol.set(MainContext.MainThreadNotebookKernels, new class extends mock<MainThreadNotebookKernelsShape>() {\n\t\t\toverride async $addKernel(handle: number, data: INotebookKernelDto2): Promise<void> {\n\t\t\t\tkernelData.set(handle, data);\n\t\t\t}\n\t\t\toverride $removeKernel(handle: number) {\n\t\t\t\tkernelData.delete(handle);\n\t\t\t}\n\t\t\toverride $updateKernel(handle: number, data: Partial<INotebookKernelDto2>) {\n\t\t\t\tassert.strictEqual(kernelData.has(handle), true);\n\t\t\t\tkernelData.set(handle, { ...kernelData.get(handle)!, ...data, });\n\t\t\t}\n\t\t\toverride $createExecution(handle: number, controllerId: string, uri: UriComponents, cellHandle: number): void {\n\t\t\t\tcellExecuteCreate.push({ notebook: uri, cell: cellHandle });\n\t\t\t}\n\t\t\toverride $updateExecution(handle: number, data: SerializableObjectWithBuffers<ICellExecuteUpdateDto[]>): void {\n\t\t\t\tcellExecuteUpdates.push(...data.value);\n\t\t\t}\n\t\t\toverride $completeExecution(handle: number, data: SerializableObjectWithBuffers<ICellExecutionCompleteDto>): void {\n\t\t\t\tcellExecuteComplete.push(data.value);\n\t\t\t}\n\t\t});\n\t\trpcProtocol.set(MainContext.MainThreadNotebookDocuments, new class extends mock<MainThreadNotebookDocumentsShape>() {\n\n\t\t});\n\t\trpcProtocol.set(MainContext.MainThreadNotebook, new class extends mock<MainThreadNotebookShape>() {\n\t\t\toverride async $registerNotebookSerializer() { }\n\t\t\toverride async $unregisterNotebookSerializer() { }\n\t\t});\n\t\textHostDocumentsAndEditors = new ExtHostDocumentsAndEditors(rpcProtocol, new NullLogService());\n\t\textHostDocuments = disposables.add(new ExtHostDocuments(rpcProtocol, extHostDocumentsAndEditors));\n\t\textHostCommands = new ExtHostCommands(rpcProtocol, new NullLogService(), new class extends mock<IExtHostTelemetry>() {\n\t\t\toverride onExtensionError(): boolean {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t});\n\t\textHostConsumerFileSystem = new ExtHostConsumerFileSystem(rpcProtocol, new ExtHostFileSystemInfo());\n\t\textHostNotebooks = new ExtHostNotebookController(rpcProtocol, extHostCommands, extHostDocumentsAndEditors, extHostDocuments, extHostConsumerFileSystem);\n\n\t\textHostNotebookDocuments = new ExtHostNotebookDocuments(extHostNotebooks);\n\n\t\textHostNotebooks.$acceptDocumentAndEditorsDelta(new SerializableObjectWithBuffers({\n\t\t\taddedDocuments: [{\n\t\t\t\turi: notebookUri,\n\t\t\t\tviewType: 'test',\n\t\t\t\tversionId: 0,\n\t\t\t\tcells: [{\n\t\t\t\t\thandle: 0,\n\t\t\t\t\turi: CellUri.generate(notebookUri, 0),\n\t\t\t\t\tsource: ['### Heading'],\n\t\t\t\t\teol: '\\n',\n\t\t\t\t\tlanguage: 'markdown',\n\t\t\t\t\tcellKind: CellKind.Markup,\n\t\t\t\t\toutputs: [],\n\t\t\t\t}, {\n\t\t\t\t\thandle: 1,\n\t\t\t\t\turi: CellUri.generate(notebookUri, 1),\n\t\t\t\t\tsource: ['console.log(\"aaa\")', 'console.log(\"bbb\")'],\n\t\t\t\t\teol: '\\n',\n\t\t\t\t\tlanguage: 'javascript',\n\t\t\t\t\tcellKind: CellKind.Code,\n\t\t\t\t\toutputs: [],\n\t\t\t\t}],\n\t\t\t}],\n\t\t\taddedEditors: [{\n\t\t\t\tdocumentUri: notebookUri,\n\t\t\t\tid: '_notebook_editor_0',\n\t\t\t\tselections: [{ start: 0, end: 1 }],\n\t\t\t\tvisibleRanges: []\n\t\t\t}]\n\t\t}));\n\t\textHostNotebooks.$acceptDocumentAndEditorsDelta(new SerializableObjectWithBuffers({ newActiveEditor: '_notebook_editor_0' }));\n\n\t\tnotebook = extHostNotebooks.notebookDocuments[0]!;\n\n\t\tdisposables.add(notebook);\n\t\tdisposables.add(extHostDocuments);\n\n\n\t\textHostNotebookKernels = new ExtHostNotebookKernels(\n\t\t\trpcProtocol,\n\t\t\tnew class extends mock<IExtHostInitDataService>() { },\n\t\t\textHostNotebooks,\n\t\t\textHostCommands,\n\t\t\tnew NullLogService()\n\t\t);\n\t});\n\n\ttest('create/dispose kernel', async function () {\n\n\t\tconst kernel = extHostNotebookKernels.createNotebookController(nullExtensionDescription, 'foo', '*', 'Foo');\n\n\t\tassert.throws(() => (<any>kernel).id = 'dd');\n\t\tassert.throws(() => (<any>kernel).notebookType = 'dd');\n\n\t\tassert.ok(kernel);\n\t\tassert.strictEqual(kernel.id, 'foo');\n\t\tassert.strictEqual(kernel.label, 'Foo');\n\t\tassert.strictEqual(kernel.notebookType, '*');\n\n\t\tawait rpcProtocol.sync();\n\t\tassert.strictEqual(kernelData.size, 1);\n\n\t\tconst [first] = kernelData.values();\n\t\tassert.strictEqual(first.id, 'nullExtensionDescription/foo');\n\t\tassert.strictEqual(ExtensionIdentifier.equals(first.extensionId, nullExtensionDescription.identifier), true);\n\t\tassert.strictEqual(first.label, 'Foo');\n\t\tassert.strictEqual(first.notebookType, '*');\n\n\t\tkernel.dispose();\n\t\tawait rpcProtocol.sync();\n\t\tassert.strictEqual(kernelData.size, 0);\n\t});\n\n\ttest('update kernel', async function () {\n\n\t\tconst kernel = disposables.add(extHostNotebookKernels.createNotebookController(nullExtensionDescription, 'foo', '*', 'Foo'));\n\n\t\tawait rpcProtocol.sync();\n\t\tassert.ok(kernel);\n\n\t\tlet [first] = kernelData.values();\n\t\tassert.strictEqual(first.id, 'nullExtensionDescription/foo');\n\t\tassert.strictEqual(first.label, 'Foo');\n\n\t\tkernel.label = 'Far';\n\t\tassert.strictEqual(kernel.label, 'Far');\n\n\t\tawait rpcProtocol.sync();\n\t\t[first] = kernelData.values();\n\t\tassert.strictEqual(first.id, 'nullExtensionDescription/foo');\n\t\tassert.strictEqual(first.label, 'Far');\n\t});\n\n\ttest('execute - simple createNotebookCellExecution', function () {\n\t\tconst kernel = disposables.add(extHostNotebookKernels.createNotebookController(nullExtensionDescription, 'foo', '*', 'Foo'));\n\n\t\textHostNotebookKernels.$acceptNotebookAssociation(0, notebook.uri, true);\n\n\t\tconst cell1 = notebook.apiNotebook.cellAt(0);\n\t\tconst task = kernel.createNotebookCellExecution(cell1);\n\t\ttask.start();\n\t\ttask.end(undefined);\n\t});\n\n\ttest('createNotebookCellExecution, must be selected/associated', function () {\n\t\tconst kernel = disposables.add(extHostNotebookKernels.createNotebookController(nullExtensionDescription, 'foo', '*', 'Foo'));\n\t\tassert.throws(() => {\n\t\t\tkernel.createNotebookCellExecution(notebook.apiNotebook.cellAt(0));\n\t\t});\n\n\t\textHostNotebookKernels.$acceptNotebookAssociation(0, notebook.uri, true);\n\t\tconst execution = kernel.createNotebookCellExecution(notebook.apiNotebook.cellAt(0));\n\t\texecution.end(true);\n\t});\n\n\ttest('createNotebookCellExecution, cell must be alive', function () {\n\t\tconst kernel = disposables.add(extHostNotebookKernels.createNotebookController(nullExtensionDescription, 'foo', '*', 'Foo'));\n\n\t\tconst cell1 = notebook.apiNotebook.cellAt(0);\n\n\t\textHostNotebookKernels.$acceptNotebookAssociation(0, notebook.uri, true);\n\t\textHostNotebookDocuments.$acceptModelChanged(notebook.uri, new SerializableObjectWithBuffers({\n\t\t\tversionId: 12,\n\t\t\trawEvents: [{\n\t\t\t\tkind: NotebookCellsChangeType.ModelChange,\n\t\t\t\tchanges: [[0, notebook.apiNotebook.cellCount, []]]\n\t\t\t}]\n\t\t}), true);\n\n\t\tassert.strictEqual(cell1.index, -1);\n\n\t\tassert.throws(() => {\n\t\t\tkernel.createNotebookCellExecution(cell1);\n\t\t});\n\t});\n\n\ttest('interrupt handler, cancellation', async function () {\n\n\t\tlet interruptCallCount = 0;\n\t\tlet tokenCancelCount = 0;\n\n\t\tconst kernel = disposables.add(extHostNotebookKernels.createNotebookController(nullExtensionDescription, 'foo', '*', 'Foo'));\n\t\tkernel.interruptHandler = () => { interruptCallCount += 1; };\n\t\textHostNotebookKernels.$acceptNotebookAssociation(0, notebook.uri, true);\n\n\t\tconst cell1 = notebook.apiNotebook.cellAt(0);\n\n\t\tconst task = kernel.createNotebookCellExecution(cell1);\n\t\tdisposables.add(task.token.onCancellationRequested(() => tokenCancelCount += 1));\n\n\t\tawait extHostNotebookKernels.$cancelCells(0, notebook.uri, [0]);\n\t\tassert.strictEqual(interruptCallCount, 1);\n\t\tassert.strictEqual(tokenCancelCount, 0);\n\n\t\tawait extHostNotebookKernels.$cancelCells(0, notebook.uri, [0]);\n\t\tassert.strictEqual(interruptCallCount, 2);\n\t\tassert.strictEqual(tokenCancelCount, 0);\n\n\t\t// should cancelling the cells end the execution task?\n\t\ttask.end(false);\n\t});\n\n\ttest('set outputs on cancel', async function () {\n\n\t\tconst kernel = disposables.add(extHostNotebookKernels.createNotebookController(nullExtensionDescription, 'foo', '*', 'Foo'));\n\t\textHostNotebookKernels.$acceptNotebookAssociation(0, notebook.uri, true);\n\n\t\tconst cell1 = notebook.apiNotebook.cellAt(0);\n\t\tconst task = kernel.createNotebookCellExecution(cell1);\n\t\ttask.start();\n\n\t\tconst b = new Barrier();\n\n\t\tdisposables.add(\n\t\t\ttask.token.onCancellationRequested(async () => {\n\t\t\t\tawait task.replaceOutput(new NotebookCellOutput([NotebookCellOutputItem.text('canceled')]));\n\t\t\t\ttask.end(true);\n\t\t\t\tb.open(); // use barrier to signal that cancellation has happened\n\t\t\t})\n\t\t);\n\n\t\tcellExecuteUpdates.length = 0;\n\t\tawait extHostNotebookKernels.$cancelCells(0, notebook.uri, [0]);\n\n\t\tawait b.wait();\n\n\t\tassert.strictEqual(cellExecuteUpdates.length > 0, true);\n\n\t\tlet found = false;\n\t\tfor (const edit of cellExecuteUpdates) {\n\t\t\tif (edit.editType === CellExecutionUpdateType.Output) {\n\t\t\t\tassert.strictEqual(edit.append, false);\n\t\t\t\tassert.strictEqual(edit.outputs.length, 1);\n\t\t\t\tassert.strictEqual(edit.outputs[0].items.length, 1);\n\t\t\t\tassert.deepStrictEqual(Array.from(edit.outputs[0].items[0].valueBytes.buffer), Array.from(new TextEncoder().encode('canceled')));\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t\tassert.ok(found);\n\t});\n\n\ttest('set outputs on interrupt', async function () {\n\n\t\tconst kernel = extHostNotebookKernels.createNotebookController(nullExtensionDescription, 'foo', '*', 'Foo');\n\t\textHostNotebookKernels.$acceptNotebookAssociation(0, notebook.uri, true);\n\n\n\t\tconst cell1 = notebook.apiNotebook.cellAt(0);\n\t\tconst task = kernel.createNotebookCellExecution(cell1);\n\t\ttask.start();\n\n\t\tkernel.interruptHandler = async _notebook => {\n\t\t\tassert.ok(notebook.apiNotebook === _notebook);\n\t\t\tawait task.replaceOutput(new NotebookCellOutput([NotebookCellOutputItem.text('interrupted')]));\n\t\t\ttask.end(true);\n\t\t};\n\n\t\tcellExecuteUpdates.length = 0;\n\t\tawait extHostNotebookKernels.$cancelCells(0, notebook.uri, [0]);\n\n\t\tassert.strictEqual(cellExecuteUpdates.length > 0, true);\n\n\t\tlet found = false;\n\t\tfor (const edit of cellExecuteUpdates) {\n\t\t\tif (edit.editType === CellExecutionUpdateType.Output) {\n\t\t\t\tassert.strictEqual(edit.append, false);\n\t\t\t\tassert.strictEqual(edit.outputs.length, 1);\n\t\t\t\tassert.strictEqual(edit.outputs[0].items.length, 1);\n\t\t\t\tassert.deepStrictEqual(Array.from(edit.outputs[0].items[0].valueBytes.buffer), Array.from(new TextEncoder().encode('interrupted')));\n\t\t\t\tfound = true;\n\t\t\t}\n\t\t}\n\t\tassert.ok(found);\n\t});\n});\n\n"]}