{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/test/browser/extHostEditorTabs.test.ts"],"names":[],"mappings":"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","file":"extHostEditorTabs.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from 'vscode';\nimport * as assert from 'assert';\nimport { URI } from 'vs/base/common/uri';\nimport { mock } from 'vs/base/test/common/mock';\nimport { IEditorTabDto, IEditorTabGroupDto, MainThreadEditorTabsShape, TabInputKind, TabModelOperationKind, TextInputDto } from 'vs/workbench/api/common/extHost.protocol';\nimport { ExtHostEditorTabs } from 'vs/workbench/api/common/extHostEditorTabs';\nimport { SingleProxyRPCProtocol } from 'vs/workbench/api/test/common/testRPCProtocol';\nimport { TextMergeTabInput, TextTabInput } from 'vs/workbench/api/common/extHostTypes';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nsuite('ExtHostEditorTabs', function () {\n\n\tconst defaultTabDto: IEditorTabDto = {\n\t\tid: 'uniquestring',\n\t\tinput: { kind: TabInputKind.TextInput, uri: URI.parse('file://abc/def.txt') },\n\t\tisActive: true,\n\t\tisDirty: true,\n\t\tisPinned: true,\n\t\tisPreview: false,\n\t\tlabel: 'label1',\n\t};\n\n\tfunction createTabDto(dto?: Partial<IEditorTabDto>): IEditorTabDto {\n\t\treturn { ...defaultTabDto, ...dto };\n\t}\n\n\tconst store = ensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('Ensure empty model throws when accessing active group', function () {\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t})\n\t\t);\n\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 0);\n\t\t// Active group should never be undefined (there is always an active group). Ensure accessing it undefined throws.\n\t\t// TODO @lramos15 Add a throw on the main side when a model is sent without an active group\n\t\tassert.throws(() => extHostEditorTabs.tabGroups.activeTabGroup);\n\t});\n\n\ttest('single tab', function () {\n\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t})\n\t\t);\n\n\t\tconst tab: IEditorTabDto = createTabDto({\n\t\t\tid: 'uniquestring',\n\t\t\tisActive: true,\n\t\t\tisDirty: true,\n\t\t\tisPinned: true,\n\t\t\tlabel: 'label1',\n\t\t});\n\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: [tab]\n\t\t}]);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tconst [first] = extHostEditorTabs.tabGroups.all;\n\t\tassert.ok(first.activeTab);\n\t\tassert.strictEqual(first.tabs.indexOf(first.activeTab), 0);\n\n\t\t{\n\t\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\t\tisActive: true,\n\t\t\t\tviewColumn: 0,\n\t\t\t\tgroupId: 12,\n\t\t\t\ttabs: [tab]\n\t\t\t}]);\n\t\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\t\tconst [first] = extHostEditorTabs.tabGroups.all;\n\t\t\tassert.ok(first.activeTab);\n\t\t\tassert.strictEqual(first.tabs.indexOf(first.activeTab), 0);\n\t\t}\n\t});\n\n\ttest('Empty tab group', function () {\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t})\n\t\t);\n\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: []\n\t\t}]);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tconst [first] = extHostEditorTabs.tabGroups.all;\n\t\tassert.strictEqual(first.activeTab, undefined);\n\t\tassert.strictEqual(first.tabs.length, 0);\n\t});\n\n\ttest('Ensure tabGroup change events fires', function () {\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t})\n\t\t);\n\n\t\tlet count = 0;\n\t\tstore.add(extHostEditorTabs.tabGroups.onDidChangeTabGroups(() => count++));\n\n\t\tassert.strictEqual(count, 0);\n\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: []\n\t\t}]);\n\t\tassert.ok(extHostEditorTabs.tabGroups.activeTabGroup);\n\t\tconst activeTabGroup: vscode.TabGroup = extHostEditorTabs.tabGroups.activeTabGroup;\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tassert.strictEqual(activeTabGroup.tabs.length, 0);\n\t\tassert.strictEqual(count, 1);\n\t});\n\n\ttest('Check TabGroupChangeEvent properties', function () {\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t})\n\t\t);\n\n\t\tconst group1Data: IEditorTabGroupDto = {\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: []\n\t\t};\n\t\tconst group2Data: IEditorTabGroupDto = { ...group1Data, groupId: 13 };\n\n\t\tconst events: vscode.TabGroupChangeEvent[] = [];\n\t\tstore.add(extHostEditorTabs.tabGroups.onDidChangeTabGroups(e => events.push(e)));\n\t\t// OPEN\n\t\textHostEditorTabs.$acceptEditorTabModel([group1Data]);\n\t\tassert.deepStrictEqual(events, [{\n\t\t\tchanged: [],\n\t\t\tclosed: [],\n\t\t\topened: [extHostEditorTabs.tabGroups.activeTabGroup]\n\t\t}]);\n\n\t\t// OPEN, CHANGE\n\t\tevents.length = 0;\n\t\textHostEditorTabs.$acceptEditorTabModel([{ ...group1Data, isActive: false }, group2Data]);\n\t\tassert.deepStrictEqual(events, [{\n\t\t\tchanged: [extHostEditorTabs.tabGroups.all[0]],\n\t\t\tclosed: [],\n\t\t\topened: [extHostEditorTabs.tabGroups.all[1]]\n\t\t}]);\n\n\t\t// CHANGE\n\t\tevents.length = 0;\n\t\textHostEditorTabs.$acceptEditorTabModel([group1Data, { ...group2Data, isActive: false }]);\n\t\tassert.deepStrictEqual(events, [{\n\t\t\tchanged: extHostEditorTabs.tabGroups.all,\n\t\t\tclosed: [],\n\t\t\topened: []\n\t\t}]);\n\n\t\t// CLOSE, CHANGE\n\t\tevents.length = 0;\n\t\tconst oldActiveGroup = extHostEditorTabs.tabGroups.activeTabGroup;\n\t\textHostEditorTabs.$acceptEditorTabModel([group2Data]);\n\t\tassert.deepStrictEqual(events, [{\n\t\t\tchanged: extHostEditorTabs.tabGroups.all,\n\t\t\tclosed: [oldActiveGroup],\n\t\t\topened: []\n\t\t}]);\n\t});\n\n\ttest('Ensure reference equality for activeTab and activeGroup', function () {\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t})\n\t\t);\n\t\tconst tab = createTabDto({\n\t\t\tid: 'uniquestring',\n\t\t\tisActive: true,\n\t\t\tisDirty: true,\n\t\t\tisPinned: true,\n\t\t\tlabel: 'label1',\n\t\t\teditorId: 'default',\n\t\t});\n\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: [tab]\n\t\t}]);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tconst [first] = extHostEditorTabs.tabGroups.all;\n\t\tassert.ok(first.activeTab);\n\t\tassert.strictEqual(first.tabs.indexOf(first.activeTab), 0);\n\t\tassert.strictEqual(first.activeTab, first.tabs[0]);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.activeTabGroup, first);\n\t});\n\n\ttest('TextMergeTabInput surfaces in the UI', function () {\n\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t})\n\t\t);\n\n\t\tconst tab: IEditorTabDto = createTabDto({\n\t\t\tinput: {\n\t\t\t\tkind: TabInputKind.TextMergeInput,\n\t\t\t\tbase: URI.from({ scheme: 'test', path: 'base' }),\n\t\t\t\tinput1: URI.from({ scheme: 'test', path: 'input1' }),\n\t\t\t\tinput2: URI.from({ scheme: 'test', path: 'input2' }),\n\t\t\t\tresult: URI.from({ scheme: 'test', path: 'result' }),\n\t\t\t}\n\t\t});\n\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: [tab]\n\t\t}]);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tconst [first] = extHostEditorTabs.tabGroups.all;\n\t\tassert.ok(first.activeTab);\n\t\tassert.strictEqual(first.tabs.indexOf(first.activeTab), 0);\n\t\tassert.ok(first.activeTab.input instanceof TextMergeTabInput);\n\t});\n\n\ttest('Ensure reference stability', function () {\n\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t})\n\t\t);\n\t\tconst tabDto = createTabDto();\n\n\t\t// single dirty tab\n\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: [tabDto]\n\t\t}]);\n\t\tlet all = extHostEditorTabs.tabGroups.all.map(group => group.tabs).flat();\n\t\tassert.strictEqual(all.length, 1);\n\t\tconst apiTab1 = all[0];\n\t\tassert.ok(apiTab1.input instanceof TextTabInput);\n\t\tassert.strictEqual(tabDto.input.kind, TabInputKind.TextInput);\n\t\tconst dtoResource = (tabDto.input as TextInputDto).uri;\n\t\tassert.strictEqual(apiTab1.input.uri.toString(), URI.revive(dtoResource).toString());\n\t\tassert.strictEqual(apiTab1.isDirty, true);\n\n\n\t\t// NOT DIRTY anymore\n\n\t\tconst tabDto2: IEditorTabDto = { ...tabDto, isDirty: false };\n\t\t// Accept a simple update\n\t\textHostEditorTabs.$acceptTabOperation({\n\t\t\tkind: TabModelOperationKind.TAB_UPDATE,\n\t\t\tindex: 0,\n\t\t\ttabDto: tabDto2,\n\t\t\tgroupId: 12\n\t\t});\n\n\t\tall = extHostEditorTabs.tabGroups.all.map(group => group.tabs).flat();\n\t\tassert.strictEqual(all.length, 1);\n\t\tconst apiTab2 = all[0];\n\t\tassert.ok(apiTab1.input instanceof TextTabInput);\n\t\tassert.strictEqual(apiTab1.input.uri.toString(), URI.revive(dtoResource).toString());\n\t\tassert.strictEqual(apiTab2.isDirty, false);\n\n\t\tassert.strictEqual(apiTab1 === apiTab2, true);\n\t});\n\n\ttest('Tab.isActive working', function () {\n\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t})\n\t\t);\n\t\tconst tabDtoAAA = createTabDto({\n\t\t\tid: 'AAA',\n\t\t\tisActive: true,\n\t\t\tisDirty: true,\n\t\t\tisPinned: true,\n\t\t\tlabel: 'label1',\n\t\t\tinput: { kind: TabInputKind.TextInput, uri: URI.parse('file://abc/AAA.txt') },\n\t\t\teditorId: 'default'\n\t\t});\n\n\t\tconst tabDtoBBB = createTabDto({\n\t\t\tid: 'BBB',\n\t\t\tisActive: false,\n\t\t\tisDirty: true,\n\t\t\tisPinned: true,\n\t\t\tlabel: 'label1',\n\t\t\tinput: { kind: TabInputKind.TextInput, uri: URI.parse('file://abc/BBB.txt') },\n\t\t\teditorId: 'default'\n\t\t});\n\n\t\t// single dirty tab\n\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: [tabDtoAAA, tabDtoBBB]\n\t\t}]);\n\n\t\tconst all = extHostEditorTabs.tabGroups.all.map(group => group.tabs).flat();\n\t\tassert.strictEqual(all.length, 2);\n\n\t\tconst activeTab1 = extHostEditorTabs.tabGroups.activeTabGroup?.activeTab;\n\t\tassert.ok(activeTab1?.input instanceof TextTabInput);\n\t\tassert.strictEqual(tabDtoAAA.input.kind, TabInputKind.TextInput);\n\t\tconst dtoAAAResource = (tabDtoAAA.input as TextInputDto).uri;\n\t\tassert.strictEqual(activeTab1?.input?.uri.toString(), URI.revive(dtoAAAResource)?.toString());\n\t\tassert.strictEqual(activeTab1?.isActive, true);\n\n\t\textHostEditorTabs.$acceptTabOperation({\n\t\t\tgroupId: 12,\n\t\t\tindex: 1,\n\t\t\tkind: TabModelOperationKind.TAB_UPDATE,\n\t\t\ttabDto: { ...tabDtoBBB, isActive: true } /// BBB is now active\n\t\t});\n\n\t\tconst activeTab2 = extHostEditorTabs.tabGroups.activeTabGroup?.activeTab;\n\t\tassert.ok(activeTab2?.input instanceof TextTabInput);\n\t\tassert.strictEqual(tabDtoBBB.input.kind, TabInputKind.TextInput);\n\t\tconst dtoBBBResource = (tabDtoBBB.input as TextInputDto).uri;\n\t\tassert.strictEqual(activeTab2?.input?.uri.toString(), URI.revive(dtoBBBResource)?.toString());\n\t\tassert.strictEqual(activeTab2?.isActive, true);\n\t\tassert.strictEqual(activeTab1?.isActive, false);\n\t});\n\n\ttest('vscode.window.tagGroups is immutable', function () {\n\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t})\n\t\t);\n\n\t\tassert.throws(() => {\n\t\t\t// @ts-expect-error write to readonly prop\n\t\t\textHostEditorTabs.tabGroups.activeTabGroup = undefined;\n\t\t});\n\t\tassert.throws(() => {\n\t\t\t// @ts-expect-error write to readonly prop\n\t\t\textHostEditorTabs.tabGroups.all.length = 0;\n\t\t});\n\t\tassert.throws(() => {\n\t\t\t// @ts-expect-error write to readonly prop\n\t\t\textHostEditorTabs.tabGroups.onDidChangeActiveTabGroup = undefined;\n\t\t});\n\t\tassert.throws(() => {\n\t\t\t// @ts-expect-error write to readonly prop\n\t\t\textHostEditorTabs.tabGroups.onDidChangeTabGroups = undefined;\n\t\t});\n\t});\n\n\ttest('Ensure close is called with all tab ids', function () {\n\t\tconst closedTabIds: string[][] = [];\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t\toverride async $closeTab(tabIds: string[], preserveFocus?: boolean) {\n\t\t\t\t\tclosedTabIds.push(tabIds);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\tconst tab: IEditorTabDto = createTabDto({\n\t\t\tid: 'uniquestring',\n\t\t\tisActive: true,\n\t\t\tisDirty: true,\n\t\t\tisPinned: true,\n\t\t\tlabel: 'label1',\n\t\t\teditorId: 'default'\n\t\t});\n\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: [tab]\n\t\t}]);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tconst activeTab = extHostEditorTabs.tabGroups.activeTabGroup?.activeTab;\n\t\tassert.ok(activeTab);\n\t\textHostEditorTabs.tabGroups.close(activeTab, false);\n\t\tassert.strictEqual(closedTabIds.length, 1);\n\t\tassert.deepStrictEqual(closedTabIds[0], ['uniquestring']);\n\t\t// Close with array\n\t\textHostEditorTabs.tabGroups.close([activeTab], false);\n\t\tassert.strictEqual(closedTabIds.length, 2);\n\t\tassert.deepStrictEqual(closedTabIds[1], ['uniquestring']);\n\t});\n\n\ttest('Update tab only sends tab change event', async function () {\n\t\tconst closedTabIds: string[][] = [];\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t\toverride async $closeTab(tabIds: string[], preserveFocus?: boolean) {\n\t\t\t\t\tclosedTabIds.push(tabIds);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t\tconst tabDto: IEditorTabDto = createTabDto({\n\t\t\tid: 'uniquestring',\n\t\t\tisActive: true,\n\t\t\tisDirty: true,\n\t\t\tisPinned: true,\n\t\t\tlabel: 'label1',\n\t\t\teditorId: 'default'\n\t\t});\n\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: [tabDto]\n\t\t}]);\n\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.map(g => g.tabs).flat().length, 1);\n\n\t\tconst tab = extHostEditorTabs.tabGroups.all[0].tabs[0];\n\n\n\t\tconst p = new Promise<vscode.TabChangeEvent>(resolve => store.add(extHostEditorTabs.tabGroups.onDidChangeTabs(resolve)));\n\n\t\textHostEditorTabs.$acceptTabOperation({\n\t\t\tgroupId: 12,\n\t\t\tindex: 0,\n\t\t\tkind: TabModelOperationKind.TAB_UPDATE,\n\t\t\ttabDto: { ...tabDto, label: 'NEW LABEL' }\n\t\t});\n\n\t\tconst changedTab = (await p).changed[0];\n\n\t\tassert.ok(tab === changedTab);\n\t\tassert.strictEqual(changedTab.label, 'NEW LABEL');\n\n\t});\n\n\ttest('Active tab', function () {\n\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t})\n\t\t);\n\n\t\tconst tab1: IEditorTabDto = createTabDto({\n\t\t\tid: 'uniquestring',\n\t\t\tisActive: true,\n\t\t\tisDirty: true,\n\t\t\tisPinned: true,\n\t\t\tlabel: 'label1',\n\t\t});\n\n\t\tconst tab2: IEditorTabDto = createTabDto({\n\t\t\tisActive: false,\n\t\t\tid: 'uniquestring2',\n\t\t});\n\n\t\tconst tab3: IEditorTabDto = createTabDto({\n\t\t\tisActive: false,\n\t\t\tid: 'uniquestring3',\n\t\t});\n\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: [tab1, tab2, tab3]\n\t\t}]);\n\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.map(g => g.tabs).flat().length, 3);\n\n\t\t// Active tab is correct\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.activeTabGroup?.activeTab, extHostEditorTabs.tabGroups.activeTabGroup?.tabs[0]);\n\n\t\t// Switching active tab works\n\t\ttab1.isActive = false;\n\t\ttab2.isActive = true;\n\t\textHostEditorTabs.$acceptTabOperation({\n\t\t\tgroupId: 12,\n\t\t\tindex: 0,\n\t\t\tkind: TabModelOperationKind.TAB_UPDATE,\n\t\t\ttabDto: tab1\n\t\t});\n\t\textHostEditorTabs.$acceptTabOperation({\n\t\t\tgroupId: 12,\n\t\t\tindex: 1,\n\t\t\tkind: TabModelOperationKind.TAB_UPDATE,\n\t\t\ttabDto: tab2\n\t\t});\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.activeTabGroup?.activeTab, extHostEditorTabs.tabGroups.activeTabGroup?.tabs[1]);\n\n\t\t//Closing tabs out works\n\t\ttab3.isActive = true;\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: [tab3]\n\t\t}]);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.map(g => g.tabs).flat().length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.activeTabGroup?.activeTab, extHostEditorTabs.tabGroups.activeTabGroup?.tabs[0]);\n\n\t\t// Closing out all tabs returns undefine active tab\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: []\n\t\t}]);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.map(g => g.tabs).flat().length, 0);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.activeTabGroup?.activeTab, undefined);\n\t});\n\n\ttest('Tab operations patches open and close correctly', function () {\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t})\n\t\t);\n\n\t\tconst tab1: IEditorTabDto = createTabDto({\n\t\t\tid: 'uniquestring',\n\t\t\tisActive: true,\n\t\t\tlabel: 'label1',\n\t\t});\n\n\t\tconst tab2: IEditorTabDto = createTabDto({\n\t\t\tisActive: false,\n\t\t\tid: 'uniquestring2',\n\t\t\tlabel: 'label2',\n\t\t});\n\n\t\tconst tab3: IEditorTabDto = createTabDto({\n\t\t\tisActive: false,\n\t\t\tid: 'uniquestring3',\n\t\t\tlabel: 'label3',\n\t\t});\n\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: [tab1, tab2, tab3]\n\t\t}]);\n\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.map(g => g.tabs).flat().length, 3);\n\n\t\t// Close tab 2\n\t\textHostEditorTabs.$acceptTabOperation({\n\t\t\tgroupId: 12,\n\t\t\tindex: 1,\n\t\t\tkind: TabModelOperationKind.TAB_CLOSE,\n\t\t\ttabDto: tab2\n\t\t});\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.map(g => g.tabs).flat().length, 2);\n\n\t\t// Close active tab and update tab 3 to be active\n\t\textHostEditorTabs.$acceptTabOperation({\n\t\t\tgroupId: 12,\n\t\t\tindex: 0,\n\t\t\tkind: TabModelOperationKind.TAB_CLOSE,\n\t\t\ttabDto: tab1\n\t\t});\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.map(g => g.tabs).flat().length, 1);\n\t\ttab3.isActive = true;\n\t\textHostEditorTabs.$acceptTabOperation({\n\t\t\tgroupId: 12,\n\t\t\tindex: 0,\n\t\t\tkind: TabModelOperationKind.TAB_UPDATE,\n\t\t\ttabDto: tab3\n\t\t});\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.map(g => g.tabs).flat().length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all[0]?.activeTab?.label, 'label3');\n\n\t\t// Open tab 2 back\n\t\textHostEditorTabs.$acceptTabOperation({\n\t\t\tgroupId: 12,\n\t\t\tindex: 1,\n\t\t\tkind: TabModelOperationKind.TAB_OPEN,\n\t\t\ttabDto: tab2\n\t\t});\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.map(g => g.tabs).flat().length, 2);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all[0]?.tabs[1]?.label, 'label2');\n\t});\n\n\ttest('Tab operations patches move correctly', function () {\n\t\tconst extHostEditorTabs = new ExtHostEditorTabs(\n\t\t\tSingleProxyRPCProtocol(new class extends mock<MainThreadEditorTabsShape>() {\n\t\t\t\t// override/implement $moveTab or $closeTab\n\t\t\t})\n\t\t);\n\n\t\tconst tab1: IEditorTabDto = createTabDto({\n\t\t\tid: 'uniquestring',\n\t\t\tisActive: true,\n\t\t\tlabel: 'label1',\n\t\t});\n\n\t\tconst tab2: IEditorTabDto = createTabDto({\n\t\t\tisActive: false,\n\t\t\tid: 'uniquestring2',\n\t\t\tlabel: 'label2',\n\t\t});\n\n\t\tconst tab3: IEditorTabDto = createTabDto({\n\t\t\tisActive: false,\n\t\t\tid: 'uniquestring3',\n\t\t\tlabel: 'label3',\n\t\t});\n\n\t\textHostEditorTabs.$acceptEditorTabModel([{\n\t\t\tisActive: true,\n\t\t\tviewColumn: 0,\n\t\t\tgroupId: 12,\n\t\t\ttabs: [tab1, tab2, tab3]\n\t\t}]);\n\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.map(g => g.tabs).flat().length, 3);\n\n\t\t// Move tab 2 to index 0\n\t\textHostEditorTabs.$acceptTabOperation({\n\t\t\tgroupId: 12,\n\t\t\tindex: 0,\n\t\t\toldIndex: 1,\n\t\t\tkind: TabModelOperationKind.TAB_MOVE,\n\t\t\ttabDto: tab2\n\t\t});\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.map(g => g.tabs).flat().length, 3);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all[0]?.tabs[0]?.label, 'label2');\n\n\t\t// Move tab 3 to index 1\n\t\textHostEditorTabs.$acceptTabOperation({\n\t\t\tgroupId: 12,\n\t\t\tindex: 1,\n\t\t\toldIndex: 2,\n\t\t\tkind: TabModelOperationKind.TAB_MOVE,\n\t\t\ttabDto: tab3\n\t\t});\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.length, 1);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all.map(g => g.tabs).flat().length, 3);\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all[0]?.tabs[1]?.label, 'label3');\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all[0]?.tabs[0]?.label, 'label2');\n\t\tassert.strictEqual(extHostEditorTabs.tabGroups.all[0]?.tabs[2]?.label, 'label1');\n\t});\n});\n"]}