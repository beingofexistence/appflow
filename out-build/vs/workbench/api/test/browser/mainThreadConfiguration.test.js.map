{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/test/browser/mainThreadConfiguration.test.ts"],"names":[],"mappings":"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","file":"mainThreadConfiguration.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as sinon from 'sinon';\nimport { URI } from 'vs/base/common/uri';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Extensions, IConfigurationRegistry, ConfigurationScope } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { MainThreadConfiguration } from 'vs/workbench/api/browser/mainThreadConfiguration';\nimport { SingleProxyRPCProtocol } from 'vs/workbench/api/test/common/testRPCProtocol';\nimport { IConfigurationService, ConfigurationTarget } from 'vs/platform/configuration/common/configuration';\nimport { WorkspaceService } from 'vs/workbench/services/configuration/browser/configurationService';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\n\nsuite('MainThreadConfiguration', function () {\n\n\tconst proxy = {\n\t\t$initializeConfiguration: () => { }\n\t};\n\tlet instantiationService: TestInstantiationService;\n\tlet target: sinon.SinonSpy;\n\n\tsuiteSetup(() => {\n\t\tRegistry.as<IConfigurationRegistry>(Extensions.Configuration).registerConfiguration({\n\t\t\t'id': 'extHostConfiguration',\n\t\t\t'title': 'a',\n\t\t\t'type': 'object',\n\t\t\t'properties': {\n\t\t\t\t'extHostConfiguration.resource': {\n\t\t\t\t\t'description': 'extHostConfiguration.resource',\n\t\t\t\t\t'type': 'boolean',\n\t\t\t\t\t'default': true,\n\t\t\t\t\t'scope': ConfigurationScope.RESOURCE\n\t\t\t\t},\n\t\t\t\t'extHostConfiguration.window': {\n\t\t\t\t\t'description': 'extHostConfiguration.resource',\n\t\t\t\t\t'type': 'boolean',\n\t\t\t\t\t'default': true,\n\t\t\t\t\t'scope': ConfigurationScope.WINDOW\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\n\tsetup(() => {\n\t\ttarget = sinon.spy();\n\n\t\tinstantiationService = new TestInstantiationService();\n\t\tinstantiationService.stub(IConfigurationService, WorkspaceService);\n\t\tinstantiationService.stub(IConfigurationService, 'onDidUpdateConfiguration', sinon.mock());\n\t\tinstantiationService.stub(IConfigurationService, 'onDidChangeConfiguration', sinon.mock());\n\t\tinstantiationService.stub(IConfigurationService, 'updateValue', target);\n\t\tinstantiationService.stub(IEnvironmentService, {\n\t\t\tisBuilt: false\n\t\t});\n\t});\n\n\tteardown(() => {\n\t\tinstantiationService.dispose();\n\t});\n\n\ttest('update resource configuration without configuration target defaults to workspace in multi root workspace when no resource is provided', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.WORKSPACE });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$updateConfigurationOption(null, 'extHostConfiguration.resource', 'value', undefined, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('update resource configuration without configuration target defaults to workspace in folder workspace when resource is provider', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.FOLDER });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$updateConfigurationOption(null, 'extHostConfiguration.resource', 'value', { resource: URI.file('abc') }, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('update resource configuration without configuration target defaults to workspace in folder workspace when no resource is provider', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.FOLDER });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$updateConfigurationOption(null, 'extHostConfiguration.resource', 'value', undefined, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('update window configuration without configuration target defaults to workspace in multi root workspace when no resource is provided', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.WORKSPACE });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$updateConfigurationOption(null, 'extHostConfiguration.window', 'value', undefined, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('update window configuration without configuration target defaults to workspace in multi root workspace when resource is provided', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.WORKSPACE });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$updateConfigurationOption(null, 'extHostConfiguration.window', 'value', { resource: URI.file('abc') }, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('update window configuration without configuration target defaults to workspace in folder workspace when resource is provider', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.FOLDER });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$updateConfigurationOption(null, 'extHostConfiguration.window', 'value', { resource: URI.file('abc') }, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('update window configuration without configuration target defaults to workspace in folder workspace when no resource is provider', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.FOLDER });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$updateConfigurationOption(null, 'extHostConfiguration.window', 'value', undefined, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('update resource configuration without configuration target defaults to folder', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.WORKSPACE });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$updateConfigurationOption(null, 'extHostConfiguration.resource', 'value', { resource: URI.file('abc') }, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE_FOLDER, target.args[0][3]);\n\t});\n\n\ttest('update configuration with user configuration target', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.FOLDER });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$updateConfigurationOption(ConfigurationTarget.USER, 'extHostConfiguration.window', 'value', { resource: URI.file('abc') }, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.USER, target.args[0][3]);\n\t});\n\n\ttest('update configuration with workspace configuration target', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.FOLDER });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$updateConfigurationOption(ConfigurationTarget.WORKSPACE, 'extHostConfiguration.window', 'value', { resource: URI.file('abc') }, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('update configuration with folder configuration target', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.FOLDER });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$updateConfigurationOption(ConfigurationTarget.WORKSPACE_FOLDER, 'extHostConfiguration.window', 'value', { resource: URI.file('abc') }, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE_FOLDER, target.args[0][3]);\n\t});\n\n\ttest('remove resource configuration without configuration target defaults to workspace in multi root workspace when no resource is provided', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.WORKSPACE });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$removeConfigurationOption(null, 'extHostConfiguration.resource', undefined, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('remove resource configuration without configuration target defaults to workspace in folder workspace when resource is provider', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.FOLDER });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$removeConfigurationOption(null, 'extHostConfiguration.resource', { resource: URI.file('abc') }, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('remove resource configuration without configuration target defaults to workspace in folder workspace when no resource is provider', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.FOLDER });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$removeConfigurationOption(null, 'extHostConfiguration.resource', undefined, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('remove window configuration without configuration target defaults to workspace in multi root workspace when no resource is provided', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.WORKSPACE });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$removeConfigurationOption(null, 'extHostConfiguration.window', undefined, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('remove window configuration without configuration target defaults to workspace in multi root workspace when resource is provided', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.WORKSPACE });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$removeConfigurationOption(null, 'extHostConfiguration.window', { resource: URI.file('abc') }, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('remove window configuration without configuration target defaults to workspace in folder workspace when resource is provider', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.FOLDER });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$removeConfigurationOption(null, 'extHostConfiguration.window', { resource: URI.file('abc') }, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('remove window configuration without configuration target defaults to workspace in folder workspace when no resource is provider', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.FOLDER });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$removeConfigurationOption(null, 'extHostConfiguration.window', undefined, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE, target.args[0][3]);\n\t});\n\n\ttest('remove configuration without configuration target defaults to folder', function () {\n\t\tinstantiationService.stub(IWorkspaceContextService, <IWorkspaceContextService>{ getWorkbenchState: () => WorkbenchState.WORKSPACE });\n\t\tconst testObject: MainThreadConfiguration = instantiationService.createInstance(MainThreadConfiguration, SingleProxyRPCProtocol(proxy));\n\n\t\ttestObject.$removeConfigurationOption(null, 'extHostConfiguration.resource', { resource: URI.file('abc') }, undefined);\n\n\t\tassert.strictEqual(ConfigurationTarget.WORKSPACE_FOLDER, target.args[0][3]);\n\t});\n});\n"]}