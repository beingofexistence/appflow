{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostWebviewPanels.ts"],"names":[],"mappings":"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","file":"extHostWebviewPanels.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/* eslint-disable local/code-no-native-private */\n\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport * as typeConverters from 'vs/workbench/api/common/extHostTypeConverters';\nimport { serializeWebviewOptions, ExtHostWebview, ExtHostWebviews, toExtensionData, shouldSerializeBuffersForPostMessage } from 'vs/workbench/api/common/extHostWebview';\nimport { IExtHostWorkspace } from 'vs/workbench/api/common/extHostWorkspace';\nimport { EditorGroupColumn } from 'vs/workbench/services/editor/common/editorGroupColumn';\nimport type * as vscode from 'vscode';\nimport * as extHostProtocol from './extHost.protocol';\nimport * as extHostTypes from './extHostTypes';\n\n\ntype IconPath = URI | { readonly light: URI; readonly dark: URI };\n\nclass ExtHostWebviewPanel extends Disposable implements vscode.WebviewPanel {\n\n\treadonly #handle: extHostProtocol.WebviewHandle;\n\treadonly #proxy: extHostProtocol.MainThreadWebviewPanelsShape;\n\treadonly #viewType: string;\n\n\treadonly #webview: ExtHostWebview;\n\treadonly #options: vscode.WebviewPanelOptions;\n\n\t#title: string;\n\t#iconPath?: IconPath;\n\t#viewColumn: vscode.ViewColumn | undefined = undefined;\n\t#visible: boolean = true;\n\t#active: boolean;\n\t#isDisposed: boolean = false;\n\n\treadonly #onDidDispose = this._register(new Emitter<void>());\n\tpublic readonly onDidDispose = this.#onDidDispose.event;\n\n\treadonly #onDidChangeViewState = this._register(new Emitter<vscode.WebviewPanelOnDidChangeViewStateEvent>());\n\tpublic readonly onDidChangeViewState = this.#onDidChangeViewState.event;\n\n\tconstructor(\n\t\thandle: extHostProtocol.WebviewHandle,\n\t\tproxy: extHostProtocol.MainThreadWebviewPanelsShape,\n\t\twebview: ExtHostWebview,\n\t\tparams: {\n\t\t\tviewType: string;\n\t\t\ttitle: string;\n\t\t\tviewColumn: vscode.ViewColumn | undefined;\n\t\t\tpanelOptions: vscode.WebviewPanelOptions;\n\t\t\tactive: boolean;\n\t\t}\n\t) {\n\t\tsuper();\n\t\tthis.#handle = handle;\n\t\tthis.#proxy = proxy;\n\t\tthis.#webview = webview;\n\t\tthis.#viewType = params.viewType;\n\t\tthis.#options = params.panelOptions;\n\t\tthis.#viewColumn = params.viewColumn;\n\t\tthis.#title = params.title;\n\t\tthis.#active = params.active;\n\t}\n\n\tpublic override dispose() {\n\t\tif (this.#isDisposed) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.#isDisposed = true;\n\t\tthis.#onDidDispose.fire();\n\n\t\tthis.#proxy.$disposeWebview(this.#handle);\n\t\tthis.#webview.dispose();\n\n\t\tsuper.dispose();\n\t}\n\n\tget webview() {\n\t\tthis.assertNotDisposed();\n\t\treturn this.#webview;\n\t}\n\n\tget viewType(): string {\n\t\tthis.assertNotDisposed();\n\t\treturn this.#viewType;\n\t}\n\n\tget title(): string {\n\t\tthis.assertNotDisposed();\n\t\treturn this.#title;\n\t}\n\n\tset title(value: string) {\n\t\tthis.assertNotDisposed();\n\t\tif (this.#title !== value) {\n\t\t\tthis.#title = value;\n\t\t\tthis.#proxy.$setTitle(this.#handle, value);\n\t\t}\n\t}\n\n\tget iconPath(): IconPath | undefined {\n\t\tthis.assertNotDisposed();\n\t\treturn this.#iconPath;\n\t}\n\n\tset iconPath(value: IconPath | undefined) {\n\t\tthis.assertNotDisposed();\n\t\tif (this.#iconPath !== value) {\n\t\t\tthis.#iconPath = value;\n\n\t\t\tthis.#proxy.$setIconPath(this.#handle, URI.isUri(value) ? { light: value, dark: value } : value);\n\t\t}\n\t}\n\n\tget options() {\n\t\treturn this.#options;\n\t}\n\n\tget viewColumn(): vscode.ViewColumn | undefined {\n\t\tthis.assertNotDisposed();\n\t\tif (typeof this.#viewColumn === 'number' && this.#viewColumn < 0) {\n\t\t\t// We are using a symbolic view column\n\t\t\t// Return undefined instead to indicate that the real view column is currently unknown but will be resolved.\n\t\t\treturn undefined;\n\t\t}\n\t\treturn this.#viewColumn;\n\t}\n\n\tpublic get active(): boolean {\n\t\tthis.assertNotDisposed();\n\t\treturn this.#active;\n\t}\n\n\tpublic get visible(): boolean {\n\t\tthis.assertNotDisposed();\n\t\treturn this.#visible;\n\t}\n\n\t_updateViewState(newState: { active: boolean; visible: boolean; viewColumn: vscode.ViewColumn }) {\n\t\tif (this.#isDisposed) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.active !== newState.active || this.visible !== newState.visible || this.viewColumn !== newState.viewColumn) {\n\t\t\tthis.#active = newState.active;\n\t\t\tthis.#visible = newState.visible;\n\t\t\tthis.#viewColumn = newState.viewColumn;\n\t\t\tthis.#onDidChangeViewState.fire({ webviewPanel: this });\n\t\t}\n\t}\n\n\tpublic reveal(viewColumn?: vscode.ViewColumn, preserveFocus?: boolean): void {\n\t\tthis.assertNotDisposed();\n\t\tthis.#proxy.$reveal(this.#handle, {\n\t\t\tviewColumn: typeof viewColumn === 'undefined' ? undefined : typeConverters.ViewColumn.from(viewColumn),\n\t\t\tpreserveFocus: !!preserveFocus\n\t\t});\n\t}\n\n\tprivate assertNotDisposed() {\n\t\tif (this.#isDisposed) {\n\t\t\tthrow new Error('Webview is disposed');\n\t\t}\n\t}\n}\n\nexport class ExtHostWebviewPanels extends Disposable implements extHostProtocol.ExtHostWebviewPanelsShape {\n\n\tprivate static newHandle(): extHostProtocol.WebviewHandle {\n\t\treturn generateUuid();\n\t}\n\n\tprivate readonly _proxy: extHostProtocol.MainThreadWebviewPanelsShape;\n\n\tprivate readonly _webviewPanels = new Map<extHostProtocol.WebviewHandle, ExtHostWebviewPanel>();\n\n\tprivate readonly _serializers = new Map<string, {\n\t\treadonly serializer: vscode.WebviewPanelSerializer;\n\t\treadonly extension: IExtensionDescription;\n\t}>();\n\n\tconstructor(\n\t\tmainContext: extHostProtocol.IMainContext,\n\t\tprivate readonly webviews: ExtHostWebviews,\n\t\tprivate readonly workspace: IExtHostWorkspace | undefined,\n\t) {\n\t\tsuper();\n\t\tthis._proxy = mainContext.getProxy(extHostProtocol.MainContext.MainThreadWebviewPanels);\n\t}\n\n\tpublic override dispose(): void {\n\t\tsuper.dispose();\n\n\t\tthis._webviewPanels.forEach(value => value.dispose());\n\t\tthis._webviewPanels.clear();\n\t}\n\n\tpublic createWebviewPanel(\n\t\textension: IExtensionDescription,\n\t\tviewType: string,\n\t\ttitle: string,\n\t\tshowOptions: vscode.ViewColumn | { viewColumn: vscode.ViewColumn; preserveFocus?: boolean },\n\t\toptions: (vscode.WebviewPanelOptions & vscode.WebviewOptions) = {},\n\t): vscode.WebviewPanel {\n\t\tconst viewColumn = typeof showOptions === 'object' ? showOptions.viewColumn : showOptions;\n\t\tconst webviewShowOptions = {\n\t\t\tviewColumn: typeConverters.ViewColumn.from(viewColumn),\n\t\t\tpreserveFocus: typeof showOptions === 'object' && !!showOptions.preserveFocus\n\t\t};\n\n\t\tconst serializeBuffersForPostMessage = shouldSerializeBuffersForPostMessage(extension);\n\t\tconst handle = ExtHostWebviewPanels.newHandle();\n\t\tthis._proxy.$createWebviewPanel(toExtensionData(extension), handle, viewType, {\n\t\t\ttitle,\n\t\t\tpanelOptions: serializeWebviewPanelOptions(options),\n\t\t\twebviewOptions: serializeWebviewOptions(extension, this.workspace, options),\n\t\t\tserializeBuffersForPostMessage,\n\t\t}, webviewShowOptions);\n\n\t\tconst webview = this.webviews.createNewWebview(handle, options, extension);\n\t\tconst panel = this.createNewWebviewPanel(handle, viewType, title, viewColumn, options, webview, true);\n\n\t\treturn panel;\n\t}\n\n\tpublic $onDidChangeWebviewPanelViewStates(newStates: extHostProtocol.WebviewPanelViewStateData): void {\n\t\tconst handles = Object.keys(newStates);\n\t\t// Notify webviews of state changes in the following order:\n\t\t// - Non-visible\n\t\t// - Visible\n\t\t// - Active\n\t\thandles.sort((a, b) => {\n\t\t\tconst stateA = newStates[a];\n\t\t\tconst stateB = newStates[b];\n\t\t\tif (stateA.active) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\tif (stateB.active) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\treturn (+stateA.visible) - (+stateB.visible);\n\t\t});\n\n\t\tfor (const handle of handles) {\n\t\t\tconst panel = this.getWebviewPanel(handle);\n\t\t\tif (!panel) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst newState = newStates[handle];\n\t\t\tpanel._updateViewState({\n\t\t\t\tactive: newState.active,\n\t\t\t\tvisible: newState.visible,\n\t\t\t\tviewColumn: typeConverters.ViewColumn.to(newState.position),\n\t\t\t});\n\t\t}\n\t}\n\n\tasync $onDidDisposeWebviewPanel(handle: extHostProtocol.WebviewHandle): Promise<void> {\n\t\tconst panel = this.getWebviewPanel(handle);\n\t\tpanel?.dispose();\n\n\t\tthis._webviewPanels.delete(handle);\n\t\tthis.webviews.deleteWebview(handle);\n\t}\n\n\tpublic registerWebviewPanelSerializer(\n\t\textension: IExtensionDescription,\n\t\tviewType: string,\n\t\tserializer: vscode.WebviewPanelSerializer\n\t): vscode.Disposable {\n\t\tif (this._serializers.has(viewType)) {\n\t\t\tthrow new Error(`Serializer for '${viewType}' already registered`);\n\t\t}\n\n\t\tthis._serializers.set(viewType, { serializer, extension });\n\t\tthis._proxy.$registerSerializer(viewType, {\n\t\t\tserializeBuffersForPostMessage: shouldSerializeBuffersForPostMessage(extension)\n\t\t});\n\n\t\treturn new extHostTypes.Disposable(() => {\n\t\t\tthis._serializers.delete(viewType);\n\t\t\tthis._proxy.$unregisterSerializer(viewType);\n\t\t});\n\t}\n\n\tasync $deserializeWebviewPanel(\n\t\twebviewHandle: extHostProtocol.WebviewHandle,\n\t\tviewType: string,\n\t\tinitData: {\n\t\t\ttitle: string;\n\t\t\tstate: any;\n\t\t\twebviewOptions: extHostProtocol.IWebviewContentOptions;\n\t\t\tpanelOptions: extHostProtocol.IWebviewPanelOptions;\n\t\t\tactive: boolean;\n\t\t},\n\t\tposition: EditorGroupColumn\n\t): Promise<void> {\n\t\tconst entry = this._serializers.get(viewType);\n\t\tif (!entry) {\n\t\t\tthrow new Error(`No serializer found for '${viewType}'`);\n\t\t}\n\t\tconst { serializer, extension } = entry;\n\n\t\tconst webview = this.webviews.createNewWebview(webviewHandle, initData.webviewOptions, extension);\n\t\tconst revivedPanel = this.createNewWebviewPanel(webviewHandle, viewType, initData.title, position, initData.panelOptions, webview, initData.active);\n\t\tawait serializer.deserializeWebviewPanel(revivedPanel, initData.state);\n\t}\n\n\tpublic createNewWebviewPanel(webviewHandle: string, viewType: string, title: string, position: vscode.ViewColumn, options: extHostProtocol.IWebviewPanelOptions, webview: ExtHostWebview, active: boolean) {\n\t\tconst panel = new ExtHostWebviewPanel(webviewHandle, this._proxy, webview, { viewType, title, viewColumn: position, panelOptions: options, active });\n\t\tthis._webviewPanels.set(webviewHandle, panel);\n\t\treturn panel;\n\t}\n\n\tpublic getWebviewPanel(handle: extHostProtocol.WebviewHandle): ExtHostWebviewPanel | undefined {\n\t\treturn this._webviewPanels.get(handle);\n\t}\n}\n\nfunction serializeWebviewPanelOptions(options: vscode.WebviewPanelOptions): extHostProtocol.IWebviewPanelOptions {\n\treturn {\n\t\tenableFindWidget: options.enableFindWidget,\n\t\tretainContextWhenHidden: options.retainContextWhenHidden,\n\t};\n}\n"]}