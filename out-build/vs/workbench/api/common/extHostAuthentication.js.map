{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostAuthentication.ts"],"names":[],"mappings":"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","file":"extHostAuthentication.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from 'vscode';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IMainContext, MainContext, MainThreadAuthenticationShape, ExtHostAuthenticationShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { Disposable } from 'vs/workbench/api/common/extHostTypes';\nimport { IExtensionDescription, ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\n\ninterface ProviderWithMetadata {\n\tlabel: string;\n\tprovider: vscode.AuthenticationProvider;\n\toptions: vscode.AuthenticationProviderOptions;\n}\n\nexport class ExtHostAuthentication implements ExtHostAuthenticationShape {\n\tprivate _proxy: MainThreadAuthenticationShape;\n\tprivate _authenticationProviders: Map<string, ProviderWithMetadata> = new Map<string, ProviderWithMetadata>();\n\n\tprivate _providers: vscode.AuthenticationProviderInformation[] = [];\n\n\tprivate _onDidChangeSessions = new Emitter<vscode.AuthenticationSessionsChangeEvent>();\n\treadonly onDidChangeSessions: Event<vscode.AuthenticationSessionsChangeEvent> = this._onDidChangeSessions.event;\n\n\tprivate _getSessionTaskSingler = new TaskSingler<vscode.AuthenticationSession | undefined>();\n\tprivate _getSessionsTaskSingler = new TaskSingler<ReadonlyArray<vscode.AuthenticationSession>>();\n\n\tconstructor(mainContext: IMainContext) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadAuthentication);\n\t}\n\n\t$setProviders(providers: vscode.AuthenticationProviderInformation[]): Promise<void> {\n\t\tthis._providers = providers;\n\t\treturn Promise.resolve();\n\t}\n\n\tasync getSession(requestingExtension: IExtensionDescription, providerId: string, scopes: readonly string[], options: vscode.AuthenticationGetSessionOptions & ({ createIfNone: true } | { forceNewSession: true } | { forceNewSession: vscode.AuthenticationForceNewSessionOptions })): Promise<vscode.AuthenticationSession>;\n\tasync getSession(requestingExtension: IExtensionDescription, providerId: string, scopes: readonly string[], options: vscode.AuthenticationGetSessionOptions & { forceNewSession: true }): Promise<vscode.AuthenticationSession>;\n\tasync getSession(requestingExtension: IExtensionDescription, providerId: string, scopes: readonly string[], options: vscode.AuthenticationGetSessionOptions & { forceNewSession: vscode.AuthenticationForceNewSessionOptions }): Promise<vscode.AuthenticationSession>;\n\tasync getSession(requestingExtension: IExtensionDescription, providerId: string, scopes: readonly string[], options: vscode.AuthenticationGetSessionOptions): Promise<vscode.AuthenticationSession | undefined>;\n\tasync getSession(requestingExtension: IExtensionDescription, providerId: string, scopes: readonly string[], options: vscode.AuthenticationGetSessionOptions = {}): Promise<vscode.AuthenticationSession | undefined> {\n\t\tconst extensionId = ExtensionIdentifier.toKey(requestingExtension.identifier);\n\t\tconst sortedScopes = [...scopes].sort().join(' ');\n\t\treturn await this._getSessionTaskSingler.getOrCreate(`${extensionId} ${providerId} ${sortedScopes}`, async () => {\n\t\t\tawait this._proxy.$ensureProvider(providerId);\n\t\t\tconst extensionName = requestingExtension.displayName || requestingExtension.name;\n\t\t\treturn this._proxy.$getSession(providerId, scopes, extensionId, extensionName, options);\n\t\t});\n\t}\n\n\tasync getSessions(requestingExtension: IExtensionDescription, providerId: string, scopes: readonly string[]): Promise<ReadonlyArray<vscode.AuthenticationSession>> {\n\t\tconst extensionId = ExtensionIdentifier.toKey(requestingExtension.identifier);\n\t\tconst sortedScopes = [...scopes].sort().join(' ');\n\t\treturn await this._getSessionsTaskSingler.getOrCreate(`${extensionId} ${sortedScopes}`, async () => {\n\t\t\tawait this._proxy.$ensureProvider(providerId);\n\t\t\tconst extensionName = requestingExtension.displayName || requestingExtension.name;\n\t\t\treturn this._proxy.$getSessions(providerId, scopes, extensionId, extensionName);\n\t\t});\n\t}\n\n\tasync removeSession(providerId: string, sessionId: string): Promise<void> {\n\t\tconst providerData = this._authenticationProviders.get(providerId);\n\t\tif (!providerData) {\n\t\t\treturn this._proxy.$removeSession(providerId, sessionId);\n\t\t}\n\n\t\treturn providerData.provider.removeSession(sessionId);\n\t}\n\n\tregisterAuthenticationProvider(id: string, label: string, provider: vscode.AuthenticationProvider, options?: vscode.AuthenticationProviderOptions): vscode.Disposable {\n\t\tif (this._authenticationProviders.get(id)) {\n\t\t\tthrow new Error(`An authentication provider with id '${id}' is already registered.`);\n\t\t}\n\n\t\tthis._authenticationProviders.set(id, { label, provider, options: options ?? { supportsMultipleAccounts: false } });\n\n\t\tif (!this._providers.find(p => p.id === id)) {\n\t\t\tthis._providers.push({\n\t\t\t\tid: id,\n\t\t\t\tlabel: label\n\t\t\t});\n\t\t}\n\n\t\tconst listener = provider.onDidChangeSessions(e => {\n\t\t\tthis._proxy.$sendDidChangeSessions(id, {\n\t\t\t\tadded: e.added ?? [],\n\t\t\t\tchanged: e.changed ?? [],\n\t\t\t\tremoved: e.removed ?? []\n\t\t\t});\n\t\t});\n\n\t\tthis._proxy.$registerAuthenticationProvider(id, label, options?.supportsMultipleAccounts ?? false);\n\n\t\treturn new Disposable(() => {\n\t\t\tlistener.dispose();\n\t\t\tthis._authenticationProviders.delete(id);\n\n\t\t\tconst i = this._providers.findIndex(p => p.id === id);\n\t\t\tif (i > -1) {\n\t\t\t\tthis._providers.splice(i);\n\t\t\t}\n\n\t\t\tthis._proxy.$unregisterAuthenticationProvider(id);\n\t\t});\n\t}\n\n\t$createSession(providerId: string, scopes: string[], options: vscode.AuthenticationProviderCreateSessionOptions): Promise<vscode.AuthenticationSession> {\n\t\tconst providerData = this._authenticationProviders.get(providerId);\n\t\tif (providerData) {\n\t\t\treturn Promise.resolve(providerData.provider.createSession(scopes, options));\n\t\t}\n\n\t\tthrow new Error(`Unable to find authentication provider with handle: ${providerId}`);\n\t}\n\n\t$removeSession(providerId: string, sessionId: string): Promise<void> {\n\t\tconst providerData = this._authenticationProviders.get(providerId);\n\t\tif (providerData) {\n\t\t\treturn Promise.resolve(providerData.provider.removeSession(sessionId));\n\t\t}\n\n\t\tthrow new Error(`Unable to find authentication provider with handle: ${providerId}`);\n\t}\n\n\t$getSessions(providerId: string, scopes?: string[]): Promise<ReadonlyArray<vscode.AuthenticationSession>> {\n\t\tconst providerData = this._authenticationProviders.get(providerId);\n\t\tif (providerData) {\n\t\t\treturn Promise.resolve(providerData.provider.getSessions(scopes));\n\t\t}\n\n\t\tthrow new Error(`Unable to find authentication provider with handle: ${providerId}`);\n\t}\n\n\t$onDidChangeAuthenticationSessions(id: string, label: string) {\n\t\tthis._onDidChangeSessions.fire({ provider: { id, label } });\n\t\treturn Promise.resolve();\n\t}\n}\n\nclass TaskSingler<T> {\n\tprivate _inFlightPromises = new Map<string, Promise<T>>();\n\tgetOrCreate(key: string, promiseFactory: () => Promise<T>) {\n\t\tconst inFlight = this._inFlightPromises.get(key);\n\t\tif (inFlight) {\n\t\t\treturn inFlight;\n\t\t}\n\n\t\tconst promise = promiseFactory().finally(() => this._inFlightPromises.delete(key));\n\t\tthis._inFlightPromises.set(key, promise);\n\n\t\treturn promise;\n\t}\n}\n"]}