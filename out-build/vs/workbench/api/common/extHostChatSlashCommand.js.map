{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostChatSlashCommand.ts"],"names":[],"mappings":"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","file":"extHostChatSlashCommand.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ExtHostChatSlashCommandsShape, IMainContext, MainContext, MainThreadChatSlashCommandsShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { ExtHostChatProvider } from 'vs/workbench/api/common/extHostChatProvider';\nimport { ChatMessageRole } from 'vs/workbench/api/common/extHostTypes';\nimport * as typeConvert from 'vs/workbench/api/common/extHostTypeConverters';\nimport type * as vscode from 'vscode';\nimport { Progress } from 'vs/platform/progress/common/progress';\nimport { IChatMessage } from 'vs/workbench/contrib/chat/common/chatProvider';\nimport { DeferredPromise, raceCancellation } from 'vs/base/common/async';\n\nexport class ExtHostChatSlashCommands implements ExtHostChatSlashCommandsShape {\n\n\tprivate static _idPool = 0;\n\n\tprivate readonly _commands = new Map<number, { extension: ExtensionIdentifier; command: vscode.SlashCommand }>();\n\tprivate readonly _proxy: MainThreadChatSlashCommandsShape;\n\n\tconstructor(\n\t\tmainContext: IMainContext,\n\t\tprivate readonly _extHostChatProvider: ExtHostChatProvider,\n\t\tprivate readonly _logService: ILogService,\n\t) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadChatSlashCommands);\n\t}\n\n\tregisterCommand(extension: ExtensionIdentifier, name: string, command: vscode.SlashCommand, metadata: vscode.SlashCommandMetadata): IDisposable {\n\n\t\tconst handle = ExtHostChatSlashCommands._idPool++;\n\t\tthis._commands.set(handle, { extension, command });\n\t\tthis._proxy.$registerCommand(handle, name, metadata.description);\n\n\t\treturn toDisposable(() => {\n\t\t\tthis._proxy.$unregisterCommand(handle);\n\t\t\tthis._commands.delete(handle);\n\t\t});\n\t}\n\n\tasync $executeCommand(handle: number, requestId: number, prompt: string, context: { history: IChatMessage[] }, token: CancellationToken): Promise<any> {\n\t\tconst data = this._commands.get(handle);\n\t\tif (!data) {\n\t\t\tthis._logService.warn(`[CHAT](${handle}) CANNOT execute command because the command is not registered`);\n\t\t\treturn;\n\t\t}\n\n\t\tlet done = false;\n\t\tfunction throwIfDone() {\n\t\t\tif (done) {\n\t\t\t\tthrow new Error('Only valid while executing the command');\n\t\t\t}\n\t\t}\n\n\t\tconst commandExecution = new DeferredPromise<void>();\n\t\ttoken.onCancellationRequested(() => commandExecution.complete());\n\t\tsetTimeout(() => commandExecution.complete(), 3 * 1000);\n\t\tthis._extHostChatProvider.allowListExtensionWhile(data.extension, commandExecution.p);\n\n\t\tconst task = data.command(\n\t\t\t{ role: ChatMessageRole.User, content: prompt },\n\t\t\t{ history: context.history.map(typeConvert.ChatMessage.to) },\n\t\t\tnew Progress<vscode.SlashResponse>(p => {\n\t\t\t\tthrowIfDone();\n\t\t\t\tthis._proxy.$handleProgressChunk(requestId, { content: isInteractiveProgressFileTree(p.message) ? p.message : p.message.value });\n\t\t\t}),\n\t\t\ttoken\n\t\t);\n\n\t\ttry {\n\t\t\treturn await raceCancellation(Promise.resolve(task).then((v) => {\n\t\t\t\tif (v && 'followUp' in v) {\n\t\t\t\t\tconst convertedFollowup = v?.followUp?.map(f => typeConvert.ChatFollowup.from(f));\n\t\t\t\t\treturn { followUp: convertedFollowup };\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t}), token);\n\t\t} finally {\n\t\t\tdone = true;\n\t\t\tcommandExecution.complete();\n\t\t}\n\t}\n}\n\nfunction isInteractiveProgressFileTree(thing: unknown): thing is vscode.InteractiveProgressFileTree {\n\treturn !!thing && typeof thing === 'object' && 'treeData' in thing;\n}\n"]}