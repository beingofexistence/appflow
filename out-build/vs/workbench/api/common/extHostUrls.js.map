{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostUrls.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAShG,MAAa,IAAI;iBAED,MAAC,GAAY,CAAZ,AAAa,CAAC;QAM9B,YACC,WAAyB;YAJlB,MAAC,GAAS,IAAI,gBAAG,EAAqB,CAAC;YACvC,MAAC,GAAU,IAAI,GAAG,EAA6B,CAAC;YAKvD,IAAI,CAAC,CAAC,GAAQ,WAAW,CAAC,QAAQ,CAAC,sBAAG,CAAS,cAAc,CAAC,CAAC;QAChE,CAAC;QAED,kBAAkB,CAAC,SAAgC,EAAE,OAA0B;YAC9E,MAAM,WAAW,GAAG,SAAS,CAAC,UAAU,CAAC;YACzC,IAAI,IAAI,CAAC,CAAC,CAAO,GAAG,CAAC,WAAW,CAAC,EAAE;gBAClC,MAAM,IAAI,KAAK,CAAC,qDAAqD,WAAW,EAAE,CAAC,CAAC;aACpF;YAED,MAAM,MAAM,GAAG,IAAI,CAAQ,CAAC,EAAW,CAAC;YACxC,IAAI,CAAC,CAAC,CAAO,GAAG,CAAC,WAAW,CAAC,CAAC;YAC9B,IAAI,CAAC,CAAC,CAAQ,GAAG,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;YACnC,IAAI,CAAC,CAAC,CAAM,mBAAmB,CAAC,MAAM,EAAE,WAAW,EAAE,SAAS,CAAC,WAAW,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC;YAE9F,OAAO,IAAA,eAAG,EAAU,GAAG,EAAE;gBACxB,IAAI,CAAC,CAAC,CAAO,MAAM,CAAC,WAAW,CAAC,CAAC;gBACjC,IAAI,CAAC,CAAC,CAAQ,MAAM,CAAC,MAAM,CAAC,CAAC;gBAC7B,IAAI,CAAC,CAAC,CAAM,qBAAqB,CAAC,MAAM,CAAC,CAAC;YAC3C,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,kBAAkB,CAAC,MAAc,EAAE,GAAkB;YACpD,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAQ,GAAG,CAAC,MAAM,CAAC,CAAC;YAE1C,IAAI,CAAC,OAAO,EAAE;gBACb,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;aAClC;YACD,IAAI;gBACH,OAAO,CAAC,SAAS,CAAC,SAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;aACnC;YAAC,OAAO,GAAG,EAAE;gBACb,IAAA,WAAE,EAAgB,GAAG,CAAC,CAAC;aACvB;YAED,OAAO,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QACnC,CAAC;QAED,KAAK,CAAC,YAAY,CAAC,GAAQ;YAC1B,OAAO,SAAG,CAAC,MAAM,CAAC,MAAM,IAAI,CAAC,CAAC,CAAM,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC;QACzD,CAAC;;IAjDF,oBAkDC","file":"extHostUrls.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from 'vscode';\nimport { MainContext, IMainContext, ExtHostUrlsShape, MainThreadUrlsShape } from './extHost.protocol';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { toDisposable } from 'vs/base/common/lifecycle';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { ExtensionIdentifierSet, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\n\nexport class ExtHostUrls implements ExtHostUrlsShape {\n\n\tprivate static HandlePool = 0;\n\tprivate readonly _proxy: MainThreadUrlsShape;\n\n\tprivate handles = new ExtensionIdentifierSet();\n\tprivate handlers = new Map<number, vscode.UriHandler>();\n\n\tconstructor(\n\t\tmainContext: IMainContext\n\t) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadUrls);\n\t}\n\n\tregisterUriHandler(extension: IExtensionDescription, handler: vscode.UriHandler): vscode.Disposable {\n\t\tconst extensionId = extension.identifier;\n\t\tif (this.handles.has(extensionId)) {\n\t\t\tthrow new Error(`Protocol handler already registered for extension ${extensionId}`);\n\t\t}\n\n\t\tconst handle = ExtHostUrls.HandlePool++;\n\t\tthis.handles.add(extensionId);\n\t\tthis.handlers.set(handle, handler);\n\t\tthis._proxy.$registerUriHandler(handle, extensionId, extension.displayName || extension.name);\n\n\t\treturn toDisposable(() => {\n\t\t\tthis.handles.delete(extensionId);\n\t\t\tthis.handlers.delete(handle);\n\t\t\tthis._proxy.$unregisterUriHandler(handle);\n\t\t});\n\t}\n\n\t$handleExternalUri(handle: number, uri: UriComponents): Promise<void> {\n\t\tconst handler = this.handlers.get(handle);\n\n\t\tif (!handler) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\ttry {\n\t\t\thandler.handleUri(URI.revive(uri));\n\t\t} catch (err) {\n\t\t\tonUnexpectedError(err);\n\t\t}\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tasync createAppUri(uri: URI): Promise<vscode.Uri> {\n\t\treturn URI.revive(await this._proxy.$createAppUri(uri));\n\t}\n}\n"]}