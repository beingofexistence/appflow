{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/shared/dataTransferCache.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,MAAa,IAAI;QAAjB;YAES,MAAC,GAAe,CAAC,CAAC;YACT,MAAC,GAAmB,IAAI,GAAG,EAA4D,CAAC;QA8B1G,CAAC;QA5BO,GAAG,CAAC,YAAqC;YAC/C,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,EAAc,CAAC;YACvC,IAAI,CAAC,CAAC,CAAiB,GAAG,CAAC,SAAS,EAAE,IAAA,YAAG,EAAM,KAAK,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC,EAAE,IAAI,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;YACvG,OAAO;gBACN,EAAE,EAAE,SAAS;gBACb,OAAO,EAAE,GAAG,EAAE;oBACb,IAAI,CAAC,CAAC,CAAiB,MAAM,CAAC,SAAS,CAAC,CAAC;gBAC1C,CAAC;aACD,CAAC;QACH,CAAC;QAED,KAAK,CAAC,eAAe,CAAC,SAAiB,EAAE,UAAkB;YAC1D,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAiB,GAAG,CAAC,SAAS,CAAC,CAAC;YACpD,IAAI,CAAC,KAAK,EAAE;gBACX,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;aAC1C;YAED,MAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,UAAU,CAAC,CAAC;YACxD,IAAI,CAAC,IAAI,EAAE;gBACV,MAAM,IAAI,KAAK,CAAC,yCAAyC,CAAC,CAAC;aAC3D;YAED,OAAO,YAAG,CAAM,IAAI,CAAC,MAAM,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC;QACzC,CAAC;QAED,OAAO;YACN,IAAI,CAAC,CAAC,CAAiB,KAAK,EAAE,CAAC;QAChC,CAAC;KACD;IAjCD,oBAiCC","file":"dataTransferCache.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { coalesce } from 'vs/base/common/arrays';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { IDataTransferFile, IReadonlyVSDataTransfer } from 'vs/base/common/dataTransfer';\n\nexport class DataTransferFileCache {\n\n\tprivate requestIdPool = 0;\n\tprivate readonly dataTransferFiles = new Map</* requestId */ number, ReadonlyArray<IDataTransferFile>>();\n\n\tpublic add(dataTransfer: IReadonlyVSDataTransfer): { id: number; dispose: () => void } {\n\t\tconst requestId = this.requestIdPool++;\n\t\tthis.dataTransferFiles.set(requestId, coalesce(Array.from(dataTransfer, ([, item]) => item.asFile())));\n\t\treturn {\n\t\t\tid: requestId,\n\t\t\tdispose: () => {\n\t\t\t\tthis.dataTransferFiles.delete(requestId);\n\t\t\t}\n\t\t};\n\t}\n\n\tasync resolveFileData(requestId: number, dataItemId: string): Promise<VSBuffer> {\n\t\tconst files = this.dataTransferFiles.get(requestId);\n\t\tif (!files) {\n\t\t\tthrow new Error('No data transfer found');\n\t\t}\n\n\t\tconst file = files.find(file => file.id === dataItemId);\n\t\tif (!file) {\n\t\t\tthrow new Error('No matching file found in data transfer');\n\t\t}\n\n\t\treturn VSBuffer.wrap(await file.data());\n\t}\n\n\tdispose() {\n\t\tthis.dataTransferFiles.clear();\n\t}\n}\n"]}