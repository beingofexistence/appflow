{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostConsoleForwarder.ts"],"names":[],"mappings":"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","file":"extHostConsoleForwarder.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStackArgument } from 'vs/base/common/console';\nimport { safeStringify } from 'vs/base/common/objects';\nimport { MainContext, MainThreadConsoleShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { IExtHostInitDataService } from 'vs/workbench/api/common/extHostInitDataService';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\n\nexport abstract class AbstractExtHostConsoleForwarder {\n\n\tprivate readonly _mainThreadConsole: MainThreadConsoleShape;\n\tprivate readonly _includeStack: boolean;\n\tprivate readonly _logNative: boolean;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n\t) {\n\t\tthis._mainThreadConsole = extHostRpc.getProxy(MainContext.MainThreadConsole);\n\t\tthis._includeStack = initData.consoleForward.includeStack;\n\t\tthis._logNative = initData.consoleForward.logNative;\n\n\t\t// Pass console logging to the outside so that we have it in the main side if told so\n\t\tthis._wrapConsoleMethod('info', 'log');\n\t\tthis._wrapConsoleMethod('log', 'log');\n\t\tthis._wrapConsoleMethod('warn', 'warn');\n\t\tthis._wrapConsoleMethod('error', 'error');\n\t}\n\n\t/**\n\t * Wraps a console message so that it is transmitted to the renderer. If\n\t * native logging is turned on, the original console message will be written\n\t * as well. This is needed since the console methods are \"magic\" in V8 and\n\t * are the only methods that allow later introspection of logged variables.\n\t *\n\t * The wrapped property is not defined with `writable: false` to avoid\n\t * throwing errors, but rather a no-op setting. See https://github.com/microsoft/vscode-extension-telemetry/issues/88\n\t */\n\tprivate _wrapConsoleMethod(method: 'log' | 'info' | 'warn' | 'error', severity: 'log' | 'warn' | 'error') {\n\t\tconst that = this;\n\t\tconst original = console[method];\n\n\t\tObject.defineProperty(console, method, {\n\t\t\tset: () => { },\n\t\t\tget: () => function () {\n\t\t\t\tthat._handleConsoleCall(method, severity, original, arguments);\n\t\t\t},\n\t\t});\n\t}\n\n\tprivate _handleConsoleCall(method: 'log' | 'info' | 'warn' | 'error', severity: 'log' | 'warn' | 'error', original: (...args: any[]) => void, args: IArguments): void {\n\t\tthis._mainThreadConsole.$logExtensionHostMessage({\n\t\t\ttype: '__$console',\n\t\t\tseverity,\n\t\t\targuments: safeStringifyArgumentsToArray(args, this._includeStack)\n\t\t});\n\t\tif (this._logNative) {\n\t\t\tthis._nativeConsoleLogMessage(method, original, args);\n\t\t}\n\t}\n\n\tprotected abstract _nativeConsoleLogMessage(method: 'log' | 'info' | 'warn' | 'error', original: (...args: any[]) => void, args: IArguments): void;\n\n}\n\nconst MAX_LENGTH = 100000;\n\n/**\n * Prevent circular stringify and convert arguments to real array\n */\nfunction safeStringifyArgumentsToArray(args: IArguments, includeStack: boolean): string {\n\tconst argsArray = [];\n\n\t// Massage some arguments with special treatment\n\tif (args.length) {\n\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\tlet arg = args[i];\n\n\t\t\t// Any argument of type 'undefined' needs to be specially treated because\n\t\t\t// JSON.stringify will simply ignore those. We replace them with the string\n\t\t\t// 'undefined' which is not 100% right, but good enough to be logged to console\n\t\t\tif (typeof arg === 'undefined') {\n\t\t\t\targ = 'undefined';\n\t\t\t}\n\n\t\t\t// Any argument that is an Error will be changed to be just the error stack/message\n\t\t\t// itself because currently cannot serialize the error over entirely.\n\t\t\telse if (arg instanceof Error) {\n\t\t\t\tconst errorObj = arg;\n\t\t\t\tif (errorObj.stack) {\n\t\t\t\t\targ = errorObj.stack;\n\t\t\t\t} else {\n\t\t\t\t\targ = errorObj.toString();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\targsArray.push(arg);\n\t\t}\n\t}\n\n\t// Add the stack trace as payload if we are told so. We remove the message and the 2 top frames\n\t// to start the stacktrace where the console message was being written\n\tif (includeStack) {\n\t\tconst stack = new Error().stack;\n\t\tif (stack) {\n\t\t\targsArray.push({ __$stack: stack.split('\\n').slice(3).join('\\n') } as IStackArgument);\n\t\t}\n\t}\n\n\ttry {\n\t\tconst res = safeStringify(argsArray);\n\n\t\tif (res.length > MAX_LENGTH) {\n\t\t\treturn 'Output omitted for a large object that exceeds the limits';\n\t\t}\n\n\t\treturn res;\n\t} catch (error) {\n\t\treturn `Output omitted for an object that cannot be inspected ('${error.toString()}')`;\n\t}\n}\n"]}