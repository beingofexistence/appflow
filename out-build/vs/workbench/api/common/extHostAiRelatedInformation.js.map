{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostAiRelatedInformation.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOhG,MAAa,IAAI;QAMhB,YAAY,WAAyB;YAL7B,MAAC,GAAuE,IAAI,GAAG,EAAE,CAAC;YAClF,MAAC,GAAa,CAAC,CAAC;YAKvB,IAAI,CAAC,CAAC,GAAQ,WAAW,CAAC,QAAQ,CAAC,sBAAG,CAAS,8BAA8B,CAAC,CAAC;QAChF,CAAC;QAED,KAAK,CAAC,4BAA4B,CAAC,MAAc,EAAE,KAAa,EAAE,KAAwB;YACzF,IAAI,IAAI,CAAC,CAAC,CAA4B,IAAI,KAAK,CAAC,EAAE;gBACjD,MAAM,IAAI,KAAK,CAAC,6CAA6C,CAAC,CAAC;aAC/D;YAED,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAA4B,GAAG,CAAC,MAAM,CAAC,CAAC;YAC/D,IAAI,CAAC,QAAQ,EAAE;gBACd,MAAM,IAAI,KAAK,CAAC,wCAAwC,CAAC,CAAC;aAC1D;YAED,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,yBAAyB,CAAC,KAAK,EAAE,KAAK,CAAC,IAAI,EAAE,CAAC;YAC5E,OAAO,MAAM,CAAC;QACf,CAAC;QAED,qBAAqB,CAAC,SAAgC,EAAE,KAAa,EAAE,KAA+B;YACrG,OAAO,IAAI,CAAC,CAAC,CAAM,wBAAwB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAC3D,CAAC;QAED,kCAAkC,CAAC,SAAgC,EAAE,IAA4B,EAAE,QAAoC;YACtI,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAW;YAChC,IAAI,CAAC,CAAC,EAAY,CAAC;YACnB,IAAI,CAAC,CAAC,CAA4B,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YACxD,IAAI,CAAC,CAAC,CAAM,qCAAqC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAChE,OAAO,IAAI,kBAAG,CAAQ,GAAG,EAAE;gBAC1B,IAAI,CAAC,CAAC,CAAM,uCAAuC,CAAC,MAAM,CAAC,CAAC;gBAC5D,IAAI,CAAC,CAAC,CAA4B,MAAM,CAAC,MAAM,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC;QACJ,CAAC;KACD;IAtCD,oBAsCC","file":"extHostAiRelatedInformation.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { ExtHostAiRelatedInformationShape, IMainContext, MainContext, MainThreadAiRelatedInformationShape } from 'vs/workbench/api/common/extHost.protocol';\nimport type { CancellationToken, RelatedInformationProvider, RelatedInformationType, RelatedInformationResult } from 'vscode';\nimport { Disposable } from 'vs/workbench/api/common/extHostTypes';\n\nexport class ExtHostRelatedInformation implements ExtHostAiRelatedInformationShape {\n\tprivate _relatedInformationProviders: Map<number, RelatedInformationProvider> = new Map();\n\tprivate _nextHandle = 0;\n\n\tprivate readonly _proxy: MainThreadAiRelatedInformationShape;\n\n\tconstructor(mainContext: IMainContext) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadAiRelatedInformation);\n\t}\n\n\tasync $provideAiRelatedInformation(handle: number, query: string, token: CancellationToken): Promise<RelatedInformationResult[]> {\n\t\tif (this._relatedInformationProviders.size === 0) {\n\t\t\tthrow new Error('No related information providers registered');\n\t\t}\n\n\t\tconst provider = this._relatedInformationProviders.get(handle);\n\t\tif (!provider) {\n\t\t\tthrow new Error('related information provider not found');\n\t\t}\n\n\t\tconst result = await provider.provideRelatedInformation(query, token) ?? [];\n\t\treturn result;\n\t}\n\n\tgetRelatedInformation(extension: IExtensionDescription, query: string, types: RelatedInformationType[]): Promise<RelatedInformationResult[]> {\n\t\treturn this._proxy.$getAiRelatedInformation(query, types);\n\t}\n\n\tregisterRelatedInformationProvider(extension: IExtensionDescription, type: RelatedInformationType, provider: RelatedInformationProvider): Disposable {\n\t\tconst handle = this._nextHandle;\n\t\tthis._nextHandle++;\n\t\tthis._relatedInformationProviders.set(handle, provider);\n\t\tthis._proxy.$registerAiRelatedInformationProvider(handle, type);\n\t\treturn new Disposable(() => {\n\t\t\tthis._proxy.$unregisterAiRelatedInformationProvider(handle);\n\t\t\tthis._relatedInformationProviders.delete(handle);\n\t\t});\n\t}\n}\n"]}