{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostMemento.ts"],"names":[],"mappings":"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","file":"extHostMemento.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from 'vscode';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { ExtHostStorage } from 'vs/workbench/api/common/extHostStorage';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { DeferredPromise, RunOnceScheduler } from 'vs/base/common/async';\n\nexport class ExtensionMemento implements vscode.Memento {\n\n\tprotected readonly _id: string;\n\tprivate readonly _shared: boolean;\n\tprotected readonly _storage: ExtHostStorage;\n\n\tprivate readonly _init: Promise<ExtensionMemento>;\n\tprivate _value?: { [n: string]: any };\n\tprivate readonly _storageListener: IDisposable;\n\n\tprivate _deferredPromises: Map<string, DeferredPromise<void>> = new Map();\n\tprivate _scheduler: RunOnceScheduler;\n\n\tconstructor(id: string, global: boolean, storage: ExtHostStorage) {\n\t\tthis._id = id;\n\t\tthis._shared = global;\n\t\tthis._storage = storage;\n\n\t\tthis._init = this._storage.initializeExtensionStorage(this._shared, this._id, Object.create(null)).then(value => {\n\t\t\tthis._value = value;\n\t\t\treturn this;\n\t\t});\n\n\t\tthis._storageListener = this._storage.onDidChangeStorage(e => {\n\t\t\tif (e.shared === this._shared && e.key === this._id) {\n\t\t\t\tthis._value = e.value;\n\t\t\t}\n\t\t});\n\n\t\tthis._scheduler = new RunOnceScheduler(() => {\n\t\t\tconst records = this._deferredPromises;\n\t\t\tthis._deferredPromises = new Map();\n\t\t\t(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tawait this._storage.setValue(this._shared, this._id, this._value!);\n\t\t\t\t\tfor (const value of records.values()) {\n\t\t\t\t\t\tvalue.complete();\n\t\t\t\t\t}\n\t\t\t\t} catch (e) {\n\t\t\t\t\tfor (const value of records.values()) {\n\t\t\t\t\t\tvalue.error(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})();\n\t\t}, 0);\n\t}\n\n\tkeys(): readonly string[] {\n\t\t// Filter out `undefined` values, as they can stick around in the `_value` until the `onDidChangeStorage` event runs\n\t\treturn Object.entries(this._value ?? {}).filter(([, value]) => value !== undefined).map(([key]) => key);\n\t}\n\n\tget whenReady(): Promise<ExtensionMemento> {\n\t\treturn this._init;\n\t}\n\n\tget<T>(key: string): T | undefined;\n\tget<T>(key: string, defaultValue: T): T;\n\tget<T>(key: string, defaultValue?: T): T {\n\t\tlet value = this._value![key];\n\t\tif (typeof value === 'undefined') {\n\t\t\tvalue = defaultValue;\n\t\t}\n\t\treturn value;\n\t}\n\n\tupdate(key: string, value: any): Promise<void> {\n\t\tthis._value![key] = value;\n\n\t\tconst record = this._deferredPromises.get(key);\n\t\tif (record !== undefined) {\n\t\t\treturn record.p;\n\t\t}\n\n\t\tconst promise = new DeferredPromise<void>();\n\t\tthis._deferredPromises.set(key, promise);\n\n\t\tif (!this._scheduler.isScheduled()) {\n\t\t\tthis._scheduler.schedule();\n\t\t}\n\n\t\treturn promise.p;\n\t}\n\n\tdispose(): void {\n\t\tthis._storageListener.dispose();\n\t}\n}\n\nexport class ExtensionGlobalMemento extends ExtensionMemento {\n\n\tprivate readonly _extension: IExtensionDescription;\n\n\tsetKeysForSync(keys: string[]): void {\n\t\tthis._storage.registerExtensionStorageKeysToSync({ id: this._id, version: this._extension.version }, keys);\n\t}\n\n\tconstructor(extensionDescription: IExtensionDescription, storage: ExtHostStorage) {\n\t\tsuper(extensionDescription.identifier.value, true, storage);\n\t\tthis._extension = extensionDescription;\n\t}\n\n}\n"]}