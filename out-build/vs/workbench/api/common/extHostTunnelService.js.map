{"version":3,"sources":["vs/workbench/api/common/extHostTunnelService.ts"],"names":[],"mappings":"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","file":"extHostTunnelService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport * as nls from 'vs/nls';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { DisposableTunnel, ProvidedOnAutoForward, ProvidedPortAttributes, RemoteTunnel, TunnelCreationOptions, TunnelOptions, TunnelPrivacyId } from 'vs/platform/tunnel/common/tunnel';\nimport { ExtHostTunnelServiceShape, MainContext, MainThreadTunnelServiceShape, PortAttributesSelector, TunnelDto } from 'vs/workbench/api/common/extHost.protocol';\nimport { IExtHostInitDataService } from 'vs/workbench/api/common/extHostInitDataService';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport * as types from 'vs/workbench/api/common/extHostTypes';\nimport { CandidatePort } from 'vs/workbench/services/remote/common/tunnelModel';\nimport * as vscode from 'vscode';\n\nclass ExtensionTunnel extends DisposableTunnel implements vscode.Tunnel { }\n\nexport namespace TunnelDtoConverter {\n\texport function fromApiTunnel(tunnel: vscode.Tunnel): TunnelDto {\n\t\treturn {\n\t\t\tremoteAddress: tunnel.remoteAddress,\n\t\t\tlocalAddress: tunnel.localAddress,\n\t\t\tpublic: !!tunnel.public,\n\t\t\tprivacy: tunnel.privacy ?? (tunnel.public ? TunnelPrivacyId.Public : TunnelPrivacyId.Private),\n\t\t\tprotocol: tunnel.protocol\n\t\t};\n\t}\n\texport function fromServiceTunnel(tunnel: RemoteTunnel): TunnelDto {\n\t\treturn {\n\t\t\tremoteAddress: {\n\t\t\t\thost: tunnel.tunnelRemoteHost,\n\t\t\t\tport: tunnel.tunnelRemotePort\n\t\t\t},\n\t\t\tlocalAddress: tunnel.localAddress,\n\t\t\tpublic: tunnel.privacy !== TunnelPrivacyId.ConstantPrivate && tunnel.privacy !== TunnelPrivacyId.ConstantPrivate,\n\t\t\tprivacy: tunnel.privacy,\n\t\t\tprotocol: tunnel.protocol\n\t\t};\n\t}\n}\n\nexport interface Tunnel extends vscode.Disposable {\n\tremote: { port: number; host: string };\n\tlocalAddress: string;\n}\n\nexport interface IExtHostTunnelService extends ExtHostTunnelServiceShape {\n\treadonly _serviceBrand: undefined;\n\topenTunnel(extension: IExtensionDescription, forward: TunnelOptions): Promise<vscode.Tunnel | undefined>;\n\tgetTunnels(): Promise<vscode.TunnelDescription[]>;\n\tonDidChangeTunnels: vscode.Event<void>;\n\tsetTunnelFactory(provider: vscode.RemoteAuthorityResolver | undefined, managedRemoteAuthority: vscode.ManagedResolvedAuthority | undefined): Promise<IDisposable>;\n\tregisterPortsAttributesProvider(portSelector: PortAttributesSelector, provider: vscode.PortAttributesProvider): IDisposable;\n\tregisterTunnelProvider(provider: vscode.TunnelProvider, information: vscode.TunnelInformation): Promise<IDisposable>;\n}\n\nexport const IExtHostTunnelService = createDecorator<IExtHostTunnelService>('IExtHostTunnelService');\n\nexport class ExtHostTunnelService extends Disposable implements IExtHostTunnelService {\n\treadonly _serviceBrand: undefined;\n\tprotected readonly _proxy: MainThreadTunnelServiceShape;\n\tprivate _forwardPortProvider: ((tunnelOptions: TunnelOptions, tunnelCreationOptions: TunnelCreationOptions, token?: vscode.CancellationToken) => Thenable<vscode.Tunnel | undefined> | undefined) | undefined;\n\tprivate _showCandidatePort: (host: string, port: number, detail: string) => Thenable<boolean> = () => { return Promise.resolve(true); };\n\tprivate _extensionTunnels: Map<string, Map<number, { tunnel: vscode.Tunnel; disposeListener: IDisposable }>> = new Map();\n\tprivate _onDidChangeTunnels: Emitter<void> = new Emitter<void>();\n\tonDidChangeTunnels: vscode.Event<void> = this._onDidChangeTunnels.event;\n\n\tprivate _providerHandleCounter: number = 0;\n\tprivate _portAttributesProviders: Map<number, { provider: vscode.PortAttributesProvider; selector: PortAttributesSelector }> = new Map();\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n\t\t@ILogService protected readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostRpc.getProxy(MainContext.MainThreadTunnelService);\n\t}\n\n\tasync openTunnel(extension: IExtensionDescription, forward: TunnelOptions): Promise<vscode.Tunnel | undefined> {\n\t\tthis.logService.trace(`ForwardedPorts: (ExtHostTunnelService) ${extension.identifier.value} called openTunnel API for ${forward.remoteAddress.host}:${forward.remoteAddress.port}.`);\n\t\tconst tunnel = await this._proxy.$openTunnel(forward, extension.displayName);\n\t\tif (tunnel) {\n\t\t\tconst disposableTunnel: vscode.Tunnel = new ExtensionTunnel(tunnel.remoteAddress, tunnel.localAddress, () => {\n\t\t\t\treturn this._proxy.$closeTunnel(tunnel.remoteAddress);\n\t\t\t});\n\t\t\tthis._register(disposableTunnel);\n\t\t\treturn disposableTunnel;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync getTunnels(): Promise<vscode.TunnelDescription[]> {\n\t\treturn this._proxy.$getTunnels();\n\t}\n\tprivate nextPortAttributesProviderHandle(): number {\n\t\treturn this._providerHandleCounter++;\n\t}\n\n\tregisterPortsAttributesProvider(portSelector: PortAttributesSelector, provider: vscode.PortAttributesProvider): vscode.Disposable {\n\t\tconst providerHandle = this.nextPortAttributesProviderHandle();\n\t\tthis._portAttributesProviders.set(providerHandle, { selector: portSelector, provider });\n\n\t\tthis._proxy.$registerPortsAttributesProvider(portSelector, providerHandle);\n\t\treturn new types.Disposable(() => {\n\t\t\tthis._portAttributesProviders.delete(providerHandle);\n\t\t\tthis._proxy.$unregisterPortsAttributesProvider(providerHandle);\n\t\t});\n\t}\n\n\tasync $providePortAttributes(handles: number[], ports: number[], pid: number | undefined, commandLine: string | undefined, cancellationToken: vscode.CancellationToken): Promise<ProvidedPortAttributes[]> {\n\t\tconst providedAttributes: { providedAttributes: vscode.PortAttributes | null | undefined; port: number }[] = [];\n\t\tfor (const handle of handles) {\n\t\t\tconst provider = this._portAttributesProviders.get(handle);\n\t\t\tif (!provider) {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tprovidedAttributes.push(...(await Promise.all(ports.map(async (port) => {\n\t\t\t\tlet providedAttributes: vscode.PortAttributes | null | undefined;\n\t\t\t\ttry {\n\t\t\t\t\tprovidedAttributes = await provider.provider.providePortAttributes({ port, pid, commandLine }, cancellationToken);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t// Call with old signature for breaking API change\n\t\t\t\t\tprovidedAttributes = await (provider.provider.providePortAttributes as any as (port: number, pid: number | undefined, commandLine: string | undefined, token: vscode.CancellationToken) => vscode.ProviderResult<vscode.PortAttributes>)(port, pid, commandLine, cancellationToken);\n\t\t\t\t}\n\t\t\t\treturn { providedAttributes, port };\n\t\t\t}))));\n\t\t}\n\n\t\tconst allAttributes = <{ providedAttributes: vscode.PortAttributes; port: number }[]>providedAttributes.filter(attribute => !!attribute.providedAttributes);\n\n\t\treturn (allAttributes.length > 0) ? allAttributes.map(attributes => {\n\t\t\treturn {\n\t\t\t\tautoForwardAction: <ProvidedOnAutoForward><unknown>attributes.providedAttributes.autoForwardAction,\n\t\t\t\tport: attributes.port\n\t\t\t};\n\t\t}) : [];\n\t}\n\n\tasync $registerCandidateFinder(_enable: boolean): Promise<void> { }\n\n\tregisterTunnelProvider(provider: vscode.TunnelProvider, information: vscode.TunnelInformation): Promise<IDisposable> {\n\t\tif (this._forwardPortProvider) {\n\t\t\tthrow new Error('A tunnel provider has already been registered. Only the first tunnel provider to be registered will be used.');\n\t\t}\n\t\tthis._forwardPortProvider = async (tunnelOptions: TunnelOptions, tunnelCreationOptions: TunnelCreationOptions) => {\n\t\t\tconst result = await provider.provideTunnel(tunnelOptions, tunnelCreationOptions, new CancellationTokenSource().token);\n\t\t\treturn result ?? undefined;\n\t\t};\n\n\t\tconst tunnelFeatures = information.tunnelFeatures ? {\n\t\t\televation: !!information.tunnelFeatures?.elevation,\n\t\t\tprivacyOptions: information.tunnelFeatures?.privacyOptions\n\t\t} : undefined;\n\n\t\tthis._proxy.$setTunnelProvider(tunnelFeatures);\n\t\treturn Promise.resolve(toDisposable(() => {\n\t\t\tthis._forwardPortProvider = undefined;\n\t\t\tthis._proxy.$setTunnelProvider(undefined);\n\t\t}));\n\t}\n\n\t/**\n\t * Applies the tunnel metadata and factory found in the remote authority\n\t * resolver to the tunnel system.\n\t *\n\t * `managedRemoteAuthority` should be be passed if the resolver returned on.\n\t * If this is the case, the tunnel cannot be connected to via a websocket from\n\t * the share process, so a synethic tunnel factory is used as a default.\n\t */\n\tasync setTunnelFactory(provider: vscode.RemoteAuthorityResolver | undefined, managedRemoteAuthority: vscode.ManagedResolvedAuthority | undefined): Promise<IDisposable> {\n\t\t// Do not wait for any of the proxy promises here.\n\t\t// It will delay startup and there is nothing that needs to be waited for.\n\t\tif (provider) {\n\t\t\tif (provider.candidatePortSource !== undefined) {\n\t\t\t\tthis._proxy.$setCandidatePortSource(provider.candidatePortSource);\n\t\t\t}\n\t\t\tif (provider.showCandidatePort) {\n\t\t\t\tthis._showCandidatePort = provider.showCandidatePort;\n\t\t\t\tthis._proxy.$setCandidateFilter();\n\t\t\t}\n\t\t\tconst tunnelFactory = provider.tunnelFactory ?? (managedRemoteAuthority ? this.makeManagedTunnelFactory(managedRemoteAuthority) : undefined);\n\t\t\tif (tunnelFactory) {\n\t\t\t\tthis._forwardPortProvider = tunnelFactory;\n\t\t\t\tlet privacyOptions = provider.tunnelFeatures?.privacyOptions ?? [];\n\t\t\t\tif (provider.tunnelFeatures?.public && (privacyOptions.length === 0)) {\n\t\t\t\t\tprivacyOptions = [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: 'private',\n\t\t\t\t\t\t\tlabel: nls.localize('tunnelPrivacy.private', \"Private\"),\n\t\t\t\t\t\t\tthemeIcon: 'lock'\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tid: 'public',\n\t\t\t\t\t\t\tlabel: nls.localize('tunnelPrivacy.public', \"Public\"),\n\t\t\t\t\t\t\tthemeIcon: 'eye'\n\t\t\t\t\t\t}\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\tconst tunnelFeatures = provider.tunnelFeatures ? {\n\t\t\t\t\televation: !!provider.tunnelFeatures?.elevation,\n\t\t\t\t\tpublic: !!provider.tunnelFeatures?.public,\n\t\t\t\t\tprivacyOptions\n\t\t\t\t} : undefined;\n\n\t\t\t\tthis._proxy.$setTunnelProvider(tunnelFeatures);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._forwardPortProvider = undefined;\n\t\t}\n\t\treturn toDisposable(() => {\n\t\t\tthis._forwardPortProvider = undefined;\n\t\t});\n\t}\n\n\tprotected makeManagedTunnelFactory(_authority: vscode.ManagedResolvedAuthority): vscode.RemoteAuthorityResolver['tunnelFactory'] {\n\t\treturn undefined; // may be overridden\n\t}\n\n\tasync $closeTunnel(remote: { host: string; port: number }, silent?: boolean): Promise<void> {\n\t\tif (this._extensionTunnels.has(remote.host)) {\n\t\t\tconst hostMap = this._extensionTunnels.get(remote.host)!;\n\t\t\tif (hostMap.has(remote.port)) {\n\t\t\t\tif (silent) {\n\t\t\t\t\thostMap.get(remote.port)!.disposeListener.dispose();\n\t\t\t\t}\n\t\t\t\tawait hostMap.get(remote.port)!.tunnel.dispose();\n\t\t\t\thostMap.delete(remote.port);\n\t\t\t}\n\t\t}\n\t}\n\n\tasync $onDidTunnelsChange(): Promise<void> {\n\t\tthis._onDidChangeTunnels.fire();\n\t}\n\n\tasync $forwardPort(tunnelOptions: TunnelOptions, tunnelCreationOptions: TunnelCreationOptions): Promise<TunnelDto | string | undefined> {\n\t\tif (this._forwardPortProvider) {\n\t\t\ttry {\n\t\t\t\tthis.logService.trace('ForwardedPorts: (ExtHostTunnelService) Getting tunnel from provider.');\n\t\t\t\tconst providedPort = this._forwardPortProvider(tunnelOptions, tunnelCreationOptions,);\n\t\t\t\tthis.logService.trace('ForwardedPorts: (ExtHostTunnelService) Got tunnel promise from provider.');\n\t\t\t\tif (providedPort !== undefined) {\n\t\t\t\t\tconst tunnel = await providedPort;\n\t\t\t\t\tthis.logService.trace('ForwardedPorts: (ExtHostTunnelService) Successfully awaited tunnel from provider.');\n\t\t\t\t\tif (tunnel === undefined) {\n\t\t\t\t\t\tthis.logService.error('ForwardedPorts: (ExtHostTunnelService) Resolved tunnel is undefined');\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t\tif (!this._extensionTunnels.has(tunnelOptions.remoteAddress.host)) {\n\t\t\t\t\t\tthis._extensionTunnels.set(tunnelOptions.remoteAddress.host, new Map());\n\t\t\t\t\t}\n\t\t\t\t\tconst disposeListener = this._register(tunnel.onDidDispose(() => {\n\t\t\t\t\t\tthis.logService.trace('ForwardedPorts: (ExtHostTunnelService) Extension fired tunnel\\'s onDidDispose.');\n\t\t\t\t\t\treturn this._proxy.$closeTunnel(tunnel.remoteAddress);\n\t\t\t\t\t}));\n\t\t\t\t\tthis._extensionTunnels.get(tunnelOptions.remoteAddress.host)!.set(tunnelOptions.remoteAddress.port, { tunnel, disposeListener });\n\t\t\t\t\treturn TunnelDtoConverter.fromApiTunnel(tunnel);\n\t\t\t\t} else {\n\t\t\t\t\tthis.logService.trace('ForwardedPorts: (ExtHostTunnelService) Tunnel is undefined');\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis.logService.trace('ForwardedPorts: (ExtHostTunnelService) tunnel provider error');\n\t\t\t\tif (e instanceof Error) {\n\t\t\t\t\treturn e.message;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync $applyCandidateFilter(candidates: CandidatePort[]): Promise<CandidatePort[]> {\n\t\tconst filter = await Promise.all(candidates.map(candidate => this._showCandidatePort(candidate.host, candidate.port, candidate.detail ?? '')));\n\t\tconst result = candidates.filter((candidate, index) => filter[index]);\n\t\tthis.logService.trace(`ForwardedPorts: (ExtHostTunnelService) filtered from ${candidates.map(port => port.port).join(', ')} to ${result.map(port => port.port).join(', ')}`);\n\t\treturn result;\n\t}\n}\n"]}