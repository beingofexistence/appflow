{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostNotebookDocuments.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAUhG,MAAa,IAAI;QAQhB,YACkB,CAA0B;YAA1B,MAAC,GAAD,CAAC,CAAyB;YAP3B,MAAC,GAA4B,IAAI,WAAG,EAA+B,CAAC;YAC5E,8BAAyB,GAAG,IAAI,CAAC,CAAC,CAA0B,KAAK,CAAC;YAE1D,MAAC,GAA8B,IAAI,WAAG,EAA0C,CAAC;YACzF,gCAA2B,GAAG,IAAI,CAAC,CAAC,CAA4B,KAAK,CAAC;QAI3E,CAAC;QAEL,mBAAmB,CAAC,GAAkB,EAAE,KAAkF,EAAE,OAAgB,EAAE,WAAsC;YACnL,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAoB,mBAAmB,CAAC,SAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YAChF,MAAM,CAAC,GAAG,QAAQ,CAAC,kBAAkB,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;YACzE,IAAI,CAAC,CAAC,CAA4B,IAAI,CAAC,CAAC,CAAC,CAAC;QAC3C,CAAC;QAED,wBAAwB,CAAC,GAAkB,EAAE,OAAgB;YAC5D,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAoB,mBAAmB,CAAC,SAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YAChF,QAAQ,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QAC/B,CAAC;QAED,iBAAiB,CAAC,GAAkB;YACnC,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAoB,mBAAmB,CAAC,SAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YAChF,IAAI,CAAC,CAAC,CAA0B,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;QAC5D,CAAC;KACD;IA3BD,oBA2BC","file":"extHostNotebookDocuments.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport * as extHostProtocol from 'vs/workbench/api/common/extHost.protocol';\nimport { ExtHostNotebookController } from 'vs/workbench/api/common/extHostNotebook';\nimport { NotebookDocumentMetadata } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { SerializableObjectWithBuffers } from 'vs/workbench/services/extensions/common/proxyIdentifier';\nimport type * as vscode from 'vscode';\n\nexport class ExtHostNotebookDocuments implements extHostProtocol.ExtHostNotebookDocumentsShape {\n\n\tprivate readonly _onDidSaveNotebookDocument = new Emitter<vscode.NotebookDocument>();\n\treadonly onDidSaveNotebookDocument = this._onDidSaveNotebookDocument.event;\n\n\tprivate readonly _onDidChangeNotebookDocument = new Emitter<vscode.NotebookDocumentChangeEvent>();\n\treadonly onDidChangeNotebookDocument = this._onDidChangeNotebookDocument.event;\n\n\tconstructor(\n\t\tprivate readonly _notebooksAndEditors: ExtHostNotebookController,\n\t) { }\n\n\t$acceptModelChanged(uri: UriComponents, event: SerializableObjectWithBuffers<extHostProtocol.NotebookCellsChangedEventDto>, isDirty: boolean, newMetadata?: NotebookDocumentMetadata): void {\n\t\tconst document = this._notebooksAndEditors.getNotebookDocument(URI.revive(uri));\n\t\tconst e = document.acceptModelChanged(event.value, isDirty, newMetadata);\n\t\tthis._onDidChangeNotebookDocument.fire(e);\n\t}\n\n\t$acceptDirtyStateChanged(uri: UriComponents, isDirty: boolean): void {\n\t\tconst document = this._notebooksAndEditors.getNotebookDocument(URI.revive(uri));\n\t\tdocument.acceptDirty(isDirty);\n\t}\n\n\t$acceptModelSaved(uri: UriComponents): void {\n\t\tconst document = this._notebooksAndEditors.getNotebookDocument(URI.revive(uri));\n\t\tthis._onDidSaveNotebookDocument.fire(document.apiNotebook);\n\t}\n}\n"]}