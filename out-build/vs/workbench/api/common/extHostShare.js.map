{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostShare.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAShG,MAAa,IAAI;iBACD,MAAC,GAAoB,CAApB,AAAqB,CAAC;QAKtC,YACC,WAAyB,EACR,CAA2C;YAA3C,MAAC,GAAD,CAAC,CAA0C;YAJrD,MAAC,GAA8C,IAAI,GAAG,EAAE,CAAC;YAMhE,IAAI,CAAC,CAAC,GAAO,WAAW,CAAC,QAAQ,CAAC,sBAAG,CAAS,eAAe,CAAC,CAAC;QAChE,CAAC;QAED,KAAK,CAAC,aAAa,CAAC,MAAc,EAAE,aAAgC,EAAE,KAAwB;YAC7F,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAS,GAAG,CAAC,MAAM,CAAC,CAAC;YAC5C,MAAM,MAAM,GAAG,MAAM,QAAQ,EAAE,YAAY,CAAC,EAAE,SAAS,EAAE,6BAAK,CAAC,EAAE,CAAC,aAAa,CAAC,SAAS,CAAC,EAAE,WAAW,EAAE,SAAG,CAAC,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;YACzJ,OAAO,MAAM,IAAI,SAAS,CAAC;QAC5B,CAAC;QAED,qBAAqB,CAAC,QAAiC,EAAE,QAA8B;YACtF,MAAM,MAAM,GAAG,IAAI,CAAS,CAAC,EAAW,CAAC;YACzC,IAAI,CAAC,CAAC,CAAS,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YACrC,IAAI,CAAC,CAAC,CAAK,sBAAsB,CAAC,MAAM,EAAE,wCAAgB,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAc,EAAE,QAAQ,CAAC,EAAE,EAAE,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,QAAQ,CAAC,CAAC;YAChJ,OAAO;gBACN,OAAO,EAAE,GAAG,EAAE;oBACb,IAAI,CAAC,CAAC,CAAK,wBAAwB,CAAC,MAAM,CAAC,CAAC;oBAC5C,IAAI,CAAC,CAAC,CAAS,MAAM,CAAC,MAAM,CAAC,CAAC;gBAC/B,CAAC;aACD,CAAC;QACH,CAAC;;IA7BF,oBA8BC","file":"extHostShare.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from 'vscode';\nimport { ExtHostShareShape, IMainContext, IShareableItemDto, MainContext, MainThreadShareShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { DocumentSelector, Range } from 'vs/workbench/api/common/extHostTypeConverters';\nimport { IURITransformer } from 'vs/base/common/uriIpc';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { URI, UriComponents } from 'vs/base/common/uri';\n\nexport class ExtHostShare implements ExtHostShareShape {\n\tprivate static handlePool: number = 0;\n\n\tprivate proxy: MainThreadShareShape;\n\tprivate providers: Map<number, vscode.ShareProvider> = new Map();\n\n\tconstructor(\n\t\tmainContext: IMainContext,\n\t\tprivate readonly uriTransformer: IURITransformer | undefined\n\t) {\n\t\tthis.proxy = mainContext.getProxy(MainContext.MainThreadShare);\n\t}\n\n\tasync $provideShare(handle: number, shareableItem: IShareableItemDto, token: CancellationToken): Promise<UriComponents | string | undefined> {\n\t\tconst provider = this.providers.get(handle);\n\t\tconst result = await provider?.provideShare({ selection: Range.to(shareableItem.selection), resourceUri: URI.revive(shareableItem.resourceUri) }, token);\n\t\treturn result ?? undefined;\n\t}\n\n\tregisterShareProvider(selector: vscode.DocumentSelector, provider: vscode.ShareProvider): vscode.Disposable {\n\t\tconst handle = ExtHostShare.handlePool++;\n\t\tthis.providers.set(handle, provider);\n\t\tthis.proxy.$registerShareProvider(handle, DocumentSelector.from(selector, this.uriTransformer), provider.id, provider.label, provider.priority);\n\t\treturn {\n\t\t\tdispose: () => {\n\t\t\t\tthis.proxy.$unregisterShareProvider(handle);\n\t\t\t\tthis.providers.delete(handle);\n\t\t\t}\n\t\t};\n\t}\n}\n"]}