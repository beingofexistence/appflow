{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostProfileContentHandler.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAahG,MAAa,IAAI;QAMhB,YACC,WAAyB;YAHT,MAAC,GAAU,IAAI,GAAG,EAAwC,CAAC;YAK3E,IAAI,CAAC,CAAC,GAAO,WAAW,CAAC,QAAQ,CAAC,sBAAG,CAAS,gCAAgC,CAAC,CAAC;QACjF,CAAC;QAED,4BAA4B,CAC3B,SAAgC,EAChC,EAAU,EACV,OAAqC;YAErC,IAAA,gBAAG,EAAqB,SAAS,EAAE,wBAAwB,CAAC,CAAC;YAC7D,IAAI,IAAI,CAAC,CAAC,CAAQ,GAAG,CAAC,EAAE,CAAC,EAAE;gBAC1B,MAAM,IAAI,KAAK,CAAC,oBAAoB,EAAE,sBAAsB,CAAC,CAAC;aAC9D;YAED,IAAI,CAAC,CAAC,CAAQ,GAAG,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;YAC/B,IAAI,CAAC,CAAC,CAAK,8BAA8B,CAAC,EAAE,EAAE,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,WAAW,EAAE,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;YAE7G,OAAO,IAAA,eAAG,EAAU,GAAG,EAAE;gBACxB,IAAI,CAAC,CAAC,CAAQ,MAAM,CAAC,EAAE,CAAC,CAAC;gBACzB,IAAI,CAAC,CAAC,CAAK,gCAAgC,CAAC,EAAE,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,KAAK,CAAC,YAAY,CAAC,EAAU,EAAE,IAAY,EAAE,OAAe,EAAE,KAAwB;YACrF,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAQ,GAAG,CAAC,EAAE,CAAC,CAAC;YACtC,IAAI,CAAC,OAAO,EAAE;gBACb,MAAM,IAAI,KAAK,CAAC,4BAA4B,EAAE,EAAE,CAAC,CAAC;aAClD;YAED,OAAO,OAAO,CAAC,WAAW,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;QAClD,CAAC;QAED,KAAK,CAAC,YAAY,CAAC,EAAU,EAAE,OAA+B,EAAE,KAAwB;YACvF,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAQ,GAAG,CAAC,EAAE,CAAC,CAAC;YACtC,IAAI,CAAC,OAAO,EAAE;gBACb,MAAM,IAAI,KAAK,CAAC,4BAA4B,EAAE,EAAE,CAAC,CAAC;aAClD;YAED,OAAO,OAAO,CAAC,WAAW,CAAC,IAAA,WAAG,EAAM,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,SAAG,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,KAAK,CAAC,CAAC;QACtF,CAAC;KACD;IAhDD,oBAgDC","file":"extHostProfileContentHandler.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { toDisposable } from 'vs/base/common/lifecycle';\nimport { isString } from 'vs/base/common/types';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { checkProposedApiEnabled } from 'vs/workbench/services/extensions/common/extensions';\nimport { ISaveProfileResult } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\nimport type * as vscode from 'vscode';\nimport { ExtHostProfileContentHandlersShape, IMainContext, MainContext, MainThreadProfileContentHandlersShape } from './extHost.protocol';\n\n\nexport class ExtHostProfileContentHandlers implements ExtHostProfileContentHandlersShape {\n\n\tprivate readonly proxy: MainThreadProfileContentHandlersShape;\n\n\tprivate readonly handlers = new Map<string, vscode.ProfileContentHandler>();\n\n\tconstructor(\n\t\tmainContext: IMainContext,\n\t) {\n\t\tthis.proxy = mainContext.getProxy(MainContext.MainThreadProfileContentHandlers);\n\t}\n\n\tregistrProfileContentHandler(\n\t\textension: IExtensionDescription,\n\t\tid: string,\n\t\thandler: vscode.ProfileContentHandler,\n\t): vscode.Disposable {\n\t\tcheckProposedApiEnabled(extension, 'profileContentHandlers');\n\t\tif (this.handlers.has(id)) {\n\t\t\tthrow new Error(`Handler with id '${id}' already registered`);\n\t\t}\n\n\t\tthis.handlers.set(id, handler);\n\t\tthis.proxy.$registerProfileContentHandler(id, handler.name, handler.description, extension.identifier.value);\n\n\t\treturn toDisposable(() => {\n\t\t\tthis.handlers.delete(id);\n\t\t\tthis.proxy.$unregisterProfileContentHandler(id);\n\t\t});\n\t}\n\n\tasync $saveProfile(id: string, name: string, content: string, token: CancellationToken): Promise<ISaveProfileResult | null> {\n\t\tconst handler = this.handlers.get(id);\n\t\tif (!handler) {\n\t\t\tthrow new Error(`Unknown handler with id: ${id}`);\n\t\t}\n\n\t\treturn handler.saveProfile(name, content, token);\n\t}\n\n\tasync $readProfile(id: string, idOrUri: string | UriComponents, token: CancellationToken): Promise<string | null> {\n\t\tconst handler = this.handlers.get(id);\n\t\tif (!handler) {\n\t\t\tthrow new Error(`Unknown handler with id: ${id}`);\n\t\t}\n\n\t\treturn handler.readProfile(isString(idOrUri) ? idOrUri : URI.revive(idOrUri), token);\n\t}\n}\n"]}