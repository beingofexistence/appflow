{"version":3,"sources":["vs/workbench/api/common/extHostStatusBar.ts"],"names":[],"mappings":"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","file":"extHostStatusBar.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/* eslint-disable local/code-no-native-private */\n\nimport { StatusBarAlignment as ExtHostStatusBarAlignment, Disposable, ThemeColor, asStatusBarItemIdentifier } from './extHostTypes';\nimport type * as vscode from 'vscode';\nimport { MainContext, MainThreadStatusBarShape, IMainContext, ICommandDto, ExtHostStatusBarShape, StatusBarItemDto } from './extHost.protocol';\nimport { localize } from 'vs/nls';\nimport { CommandsConverter } from 'vs/workbench/api/common/extHostCommands';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { MarkdownString } from 'vs/workbench/api/common/extHostTypeConverters';\nimport { isNumber } from 'vs/base/common/types';\n\n\nexport class ExtHostStatusBarEntry implements vscode.StatusBarItem {\n\n\tprivate static ID_GEN = 0;\n\n\tprivate static ALLOWED_BACKGROUND_COLORS = new Map<string, ThemeColor>(\n\t\t[\n\t\t\t['statusBarItem.errorBackground', new ThemeColor('statusBarItem.errorForeground')],\n\t\t\t['statusBarItem.warningBackground', new ThemeColor('statusBarItem.warningForeground')]\n\t\t]\n\t);\n\n\t#proxy: MainThreadStatusBarShape;\n\t#commands: CommandsConverter;\n\n\tprivate readonly _entryId: string;\n\n\tprivate _extension?: IExtensionDescription;\n\n\tprivate _id?: string;\n\tprivate _alignment: number;\n\tprivate _priority?: number;\n\n\tprivate _disposed: boolean = false;\n\tprivate _visible?: boolean;\n\n\tprivate _text: string = '';\n\tprivate _tooltip?: string | vscode.MarkdownString;\n\tprivate _name?: string;\n\tprivate _color?: string | ThemeColor;\n\tprivate _backgroundColor?: ThemeColor;\n\tprivate _latestCommandRegistration?: DisposableStore;\n\tprivate readonly _staleCommandRegistrations = new DisposableStore();\n\tprivate _command?: {\n\t\treadonly fromApi: string | vscode.Command;\n\t\treadonly internal: ICommandDto;\n\t};\n\n\tprivate _timeoutHandle: any;\n\tprivate _accessibilityInformation?: vscode.AccessibilityInformation;\n\n\tconstructor(proxy: MainThreadStatusBarShape, commands: CommandsConverter, staticItems: ReadonlyMap<string, StatusBarItemDto>, extension: IExtensionDescription, id?: string, alignment?: ExtHostStatusBarAlignment, priority?: number);\n\tconstructor(proxy: MainThreadStatusBarShape, commands: CommandsConverter, staticItems: ReadonlyMap<string, StatusBarItemDto>, extension: IExtensionDescription | undefined, id: string, alignment?: ExtHostStatusBarAlignment, priority?: number);\n\tconstructor(proxy: MainThreadStatusBarShape, commands: CommandsConverter, staticItems: ReadonlyMap<string, StatusBarItemDto>, extension?: IExtensionDescription, id?: string, alignment: ExtHostStatusBarAlignment = ExtHostStatusBarAlignment.Left, priority?: number) {\n\t\tthis.#proxy = proxy;\n\t\tthis.#commands = commands;\n\n\t\tif (id && extension) {\n\t\t\tthis._entryId = asStatusBarItemIdentifier(extension.identifier, id);\n\t\t\t// if new item already exists mark it as visible and copy properties\n\t\t\t// this can only happen when an item was contributed by an extension\n\t\t\tconst item = staticItems.get(this._entryId);\n\t\t\tif (item) {\n\t\t\t\talignment = item.alignLeft ? ExtHostStatusBarAlignment.Left : ExtHostStatusBarAlignment.Right;\n\t\t\t\tpriority = item.priority;\n\t\t\t\tthis._visible = true;\n\t\t\t\tthis.name = item.name;\n\t\t\t\tthis.text = item.text;\n\t\t\t\tthis.tooltip = item.tooltip;\n\t\t\t\tthis.command = item.command;\n\t\t\t\tthis.accessibilityInformation = item.accessibilityInformation;\n\t\t\t}\n\t\t} else {\n\t\t\tthis._entryId = String(ExtHostStatusBarEntry.ID_GEN++);\n\t\t}\n\t\tthis._extension = extension;\n\n\t\tthis._id = id;\n\t\tthis._alignment = alignment;\n\t\tthis._priority = this.validatePriority(priority);\n\t}\n\n\tprivate validatePriority(priority?: number): number | undefined {\n\t\tif (!isNumber(priority)) {\n\t\t\treturn undefined; // using this method to catch `NaN` too!\n\t\t}\n\n\t\t// Our RPC mechanism use JSON to serialize data which does\n\t\t// not support `Infinity` so we need to fill in the number\n\t\t// equivalent as close as possible.\n\t\t// https://github.com/microsoft/vscode/issues/133317\n\n\t\tif (priority === Number.POSITIVE_INFINITY) {\n\t\t\treturn Number.MAX_VALUE;\n\t\t}\n\n\t\tif (priority === Number.NEGATIVE_INFINITY) {\n\t\t\treturn -Number.MAX_VALUE;\n\t\t}\n\n\t\treturn priority;\n\t}\n\n\tpublic get id(): string {\n\t\treturn this._id ?? this._extension!.identifier.value;\n\t}\n\n\tpublic get alignment(): vscode.StatusBarAlignment {\n\t\treturn this._alignment;\n\t}\n\n\tpublic get priority(): number | undefined {\n\t\treturn this._priority;\n\t}\n\n\tpublic get text(): string {\n\t\treturn this._text;\n\t}\n\n\tpublic get name(): string | undefined {\n\t\treturn this._name;\n\t}\n\n\tpublic get tooltip(): vscode.MarkdownString | string | undefined {\n\t\treturn this._tooltip;\n\t}\n\n\tpublic get color(): string | ThemeColor | undefined {\n\t\treturn this._color;\n\t}\n\n\tpublic get backgroundColor(): ThemeColor | undefined {\n\t\treturn this._backgroundColor;\n\t}\n\n\tpublic get command(): string | vscode.Command | undefined {\n\t\treturn this._command?.fromApi;\n\t}\n\n\tpublic get accessibilityInformation(): vscode.AccessibilityInformation | undefined {\n\t\treturn this._accessibilityInformation;\n\t}\n\n\tpublic set text(text: string) {\n\t\tthis._text = text;\n\t\tthis.update();\n\t}\n\n\tpublic set name(name: string | undefined) {\n\t\tthis._name = name;\n\t\tthis.update();\n\t}\n\n\tpublic set tooltip(tooltip: vscode.MarkdownString | string | undefined) {\n\t\tthis._tooltip = tooltip;\n\t\tthis.update();\n\t}\n\n\tpublic set color(color: string | ThemeColor | undefined) {\n\t\tthis._color = color;\n\t\tthis.update();\n\t}\n\n\tpublic set backgroundColor(color: ThemeColor | undefined) {\n\t\tif (color && !ExtHostStatusBarEntry.ALLOWED_BACKGROUND_COLORS.has(color.id)) {\n\t\t\tcolor = undefined;\n\t\t}\n\n\t\tthis._backgroundColor = color;\n\t\tthis.update();\n\t}\n\n\tpublic set command(command: string | vscode.Command | undefined) {\n\t\tif (this._command?.fromApi === command) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._latestCommandRegistration) {\n\t\t\tthis._staleCommandRegistrations.add(this._latestCommandRegistration);\n\t\t}\n\t\tthis._latestCommandRegistration = new DisposableStore();\n\t\tif (typeof command === 'string') {\n\t\t\tthis._command = {\n\t\t\t\tfromApi: command,\n\t\t\t\tinternal: this.#commands.toInternal({ title: '', command }, this._latestCommandRegistration),\n\t\t\t};\n\t\t} else if (command) {\n\t\t\tthis._command = {\n\t\t\t\tfromApi: command,\n\t\t\t\tinternal: this.#commands.toInternal(command, this._latestCommandRegistration),\n\t\t\t};\n\t\t} else {\n\t\t\tthis._command = undefined;\n\t\t}\n\t\tthis.update();\n\t}\n\n\tpublic set accessibilityInformation(accessibilityInformation: vscode.AccessibilityInformation | undefined) {\n\t\tthis._accessibilityInformation = accessibilityInformation;\n\t\tthis.update();\n\t}\n\n\tpublic show(): void {\n\t\tthis._visible = true;\n\t\tthis.update();\n\t}\n\n\tpublic hide(): void {\n\t\tclearTimeout(this._timeoutHandle);\n\t\tthis._visible = false;\n\t\tthis.#proxy.$disposeEntry(this._entryId);\n\t}\n\n\tprivate update(): void {\n\t\tif (this._disposed || !this._visible) {\n\t\t\treturn;\n\t\t}\n\n\t\tclearTimeout(this._timeoutHandle);\n\n\t\t// Defer the update so that multiple changes to setters dont cause a redraw each\n\t\tthis._timeoutHandle = setTimeout(() => {\n\t\t\tthis._timeoutHandle = undefined;\n\n\t\t\t// If the id is not set, derive it from the extension identifier,\n\t\t\t// otherwise make sure to prefix it with the extension identifier\n\t\t\t// to get a more unique value across extensions.\n\t\t\tlet id: string;\n\t\t\tif (this._extension) {\n\t\t\t\tif (this._id) {\n\t\t\t\t\tid = `${this._extension.identifier.value}.${this._id}`;\n\t\t\t\t} else {\n\t\t\t\t\tid = this._extension.identifier.value;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tid = this._id!;\n\t\t\t}\n\n\t\t\t// If the name is not set, derive it from the extension descriptor\n\t\t\tlet name: string;\n\t\t\tif (this._name) {\n\t\t\t\tname = this._name;\n\t\t\t} else {\n\t\t\t\tname = localize('extensionLabel', \"{0} (Extension)\", this._extension!.displayName || this._extension!.name);\n\t\t\t}\n\n\t\t\t// If a background color is set, the foreground is determined\n\t\t\tlet color = this._color;\n\t\t\tif (this._backgroundColor) {\n\t\t\t\tcolor = ExtHostStatusBarEntry.ALLOWED_BACKGROUND_COLORS.get(this._backgroundColor.id);\n\t\t\t}\n\n\t\t\tconst tooltip = MarkdownString.fromStrict(this._tooltip);\n\n\t\t\t// Set to status bar\n\t\t\tthis.#proxy.$setEntry(this._entryId, id, this._extension?.identifier.value, name, this._text, tooltip, this._command?.internal, color,\n\t\t\t\tthis._backgroundColor, this._alignment === ExtHostStatusBarAlignment.Left,\n\t\t\t\tthis._priority, this._accessibilityInformation);\n\n\t\t\t// clean-up state commands _after_ updating the UI\n\t\t\tthis._staleCommandRegistrations.clear();\n\t\t}, 0);\n\t}\n\n\tpublic dispose(): void {\n\t\tthis.hide();\n\t\tthis._disposed = true;\n\t}\n}\n\nclass StatusBarMessage {\n\n\tprivate readonly _item: vscode.StatusBarItem;\n\tprivate readonly _messages: { message: string }[] = [];\n\n\tconstructor(statusBar: ExtHostStatusBar) {\n\t\tthis._item = statusBar.createStatusBarEntry(undefined, 'status.extensionMessage', ExtHostStatusBarAlignment.Left, Number.MIN_VALUE);\n\t\tthis._item.name = localize('status.extensionMessage', \"Extension Status\");\n\t}\n\n\tdispose() {\n\t\tthis._messages.length = 0;\n\t\tthis._item.dispose();\n\t}\n\n\tsetMessage(message: string): Disposable {\n\t\tconst data: { message: string } = { message }; // use object to not confuse equal strings\n\t\tthis._messages.unshift(data);\n\t\tthis._update();\n\n\t\treturn new Disposable(() => {\n\t\t\tconst idx = this._messages.indexOf(data);\n\t\t\tif (idx >= 0) {\n\t\t\t\tthis._messages.splice(idx, 1);\n\t\t\t\tthis._update();\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _update() {\n\t\tif (this._messages.length > 0) {\n\t\t\tthis._item.text = this._messages[0].message;\n\t\t\tthis._item.show();\n\t\t} else {\n\t\t\tthis._item.hide();\n\t\t}\n\t}\n}\n\nexport class ExtHostStatusBar implements ExtHostStatusBarShape {\n\n\tprivate readonly _proxy: MainThreadStatusBarShape;\n\tprivate readonly _commands: CommandsConverter;\n\tprivate readonly _statusMessage: StatusBarMessage;\n\tprivate readonly _existingItems = new Map<string, StatusBarItemDto>();\n\n\tconstructor(mainContext: IMainContext, commands: CommandsConverter) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadStatusBar);\n\t\tthis._commands = commands;\n\t\tthis._statusMessage = new StatusBarMessage(this);\n\t}\n\n\t$acceptStaticEntries(added: StatusBarItemDto[]): void {\n\t\tfor (const item of added) {\n\t\t\tthis._existingItems.set(item.entryId, item);\n\t\t}\n\t}\n\n\tcreateStatusBarEntry(extension: IExtensionDescription | undefined, id: string, alignment?: ExtHostStatusBarAlignment, priority?: number): vscode.StatusBarItem;\n\tcreateStatusBarEntry(extension: IExtensionDescription, id?: string, alignment?: ExtHostStatusBarAlignment, priority?: number): vscode.StatusBarItem;\n\tcreateStatusBarEntry(extension: IExtensionDescription, id: string, alignment?: ExtHostStatusBarAlignment, priority?: number): vscode.StatusBarItem {\n\t\treturn new ExtHostStatusBarEntry(this._proxy, this._commands, this._existingItems, extension, id, alignment, priority);\n\t}\n\n\tsetStatusBarMessage(text: string, timeoutOrThenable?: number | Thenable<any>): Disposable {\n\t\tconst d = this._statusMessage.setMessage(text);\n\t\tlet handle: any;\n\n\t\tif (typeof timeoutOrThenable === 'number') {\n\t\t\thandle = setTimeout(() => d.dispose(), timeoutOrThenable);\n\t\t} else if (typeof timeoutOrThenable !== 'undefined') {\n\t\t\ttimeoutOrThenable.then(() => d.dispose(), () => d.dispose());\n\t\t}\n\n\t\treturn new Disposable(() => {\n\t\t\td.dispose();\n\t\t\tclearTimeout(handle);\n\t\t});\n\t}\n}\n"]}