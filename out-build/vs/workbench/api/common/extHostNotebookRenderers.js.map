{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostNotebookRenderers.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAUhG,MAAa,IAAI;QAIhB,YAAY,WAAyB,EAAmB,CAAsB;YAAtB,MAAC,GAAD,CAAC,CAAqB;YAH7D,MAAC,GAA0B,IAAI,GAAG,EAAqF,CAAC;YAIxI,IAAI,CAAC,CAAC,GAAO,WAAW,CAAC,QAAQ,CAAC,sBAAG,CAAS,2BAA2B,CAAC,CAAC;QAC5E,CAAC;QAEM,oBAAoB,CAAC,QAAgB,EAAE,UAAkB,EAAE,OAAgB;YACjF,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAgB,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC7D,IAAI,CAAC,CAAC,CAAwB,GAAG,CAAC,UAAU,CAAC,EAAE,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,CAAC,SAAS,EAAE,OAAO,EAAE,CAAC,CAAC;QAC5F,CAAC;QAEM,uBAAuB,CAAC,QAA+B,EAAE,UAAkB;YACjF,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,gBAAgB,EAAE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,UAAU,CAAC,EAAE;gBAC5E,MAAM,IAAI,KAAK,CAAC,yFAAyF,UAAU,GAAG,CAAC,CAAC;aACxH;YAED,MAAM,SAAS,GAAqC;gBACnD,mBAAmB,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAE,EAAE;oBACvD,OAAO,IAAI,CAAC,CAAC,CAAqB,UAAU,CAAC,CAAC,KAAK,CAAC,QAAQ,EAAE,OAAO,EAAE,WAAW,CAAC,CAAC;gBACrF,CAAC;gBACD,WAAW,EAAE,CAAC,OAAO,EAAE,aAAa,EAAE,EAAE;oBACvC,IAAI,4BAAI,CAAkB,mBAAmB,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE,EAAE,+BAA+B;wBAC5F,CAAC,OAAO,EAAE,aAAa,CAAC,GAAG,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;qBACpD;oBAED,MAAM,aAAa,GAAG,aAAa,IAAI,4BAAI,CAAkB,mBAAmB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;oBACpG,OAAO,IAAI,CAAC,CAAC,CAAK,YAAY,CAAC,aAAa,EAAE,EAAE,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;gBACxE,CAAC;aACD,CAAC;YAEF,OAAO,SAAS,CAAC;QAClB,CAAC;QAEO,CAAC,CAAqB,UAAkB;YAC/C,IAAI,OAAO,GAAG,IAAI,CAAC,CAAC,CAAwB,GAAG,CAAC,UAAU,CAAC,CAAC;YAC5D,IAAI,OAAO,EAAE;gBACZ,OAAO,OAAO,CAAC;aACf;YAED,OAAO,GAAG,IAAI,WAAG,CAAK;gBACrB,uBAAuB,EAAE,GAAG,EAAE;oBAC7B,OAAO,EAAE,OAAO,EAAE,CAAC;oBACnB,IAAI,CAAC,CAAC,CAAwB,MAAM,CAAC,UAAU,CAAC,CAAC;gBAClD,CAAC;aACD,CAAC,CAAC;YAEH,IAAI,CAAC,CAAC,CAAwB,GAAG,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;YAEvD,OAAO,OAAO,CAAC;QAChB,CAAC;KACD;IApDD,oBAoDC","file":"extHostNotebookRenderers.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { ExtHostNotebookRenderersShape, IMainContext, MainContext, MainThreadNotebookRenderersShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { ExtHostNotebookController } from 'vs/workbench/api/common/extHostNotebook';\nimport { ExtHostNotebookEditor } from 'vs/workbench/api/common/extHostNotebookEditor';\nimport * as vscode from 'vscode';\n\n\nexport class ExtHostNotebookRenderers implements ExtHostNotebookRenderersShape {\n\tprivate readonly _rendererMessageEmitters = new Map<string /* rendererId */, Emitter<{ editor: vscode.NotebookEditor; message: any }>>();\n\tprivate readonly proxy: MainThreadNotebookRenderersShape;\n\n\tconstructor(mainContext: IMainContext, private readonly _extHostNotebook: ExtHostNotebookController) {\n\t\tthis.proxy = mainContext.getProxy(MainContext.MainThreadNotebookRenderers);\n\t}\n\n\tpublic $postRendererMessage(editorId: string, rendererId: string, message: unknown): void {\n\t\tconst editor = this._extHostNotebook.getEditorById(editorId);\n\t\tthis._rendererMessageEmitters.get(rendererId)?.fire({ editor: editor.apiEditor, message });\n\t}\n\n\tpublic createRendererMessaging(manifest: IExtensionDescription, rendererId: string): vscode.NotebookRendererMessaging {\n\t\tif (!manifest.contributes?.notebookRenderer?.some(r => r.id === rendererId)) {\n\t\t\tthrow new Error(`Extensions may only call createRendererMessaging() for renderers they contribute (got ${rendererId})`);\n\t\t}\n\n\t\tconst messaging: vscode.NotebookRendererMessaging = {\n\t\t\tonDidReceiveMessage: (listener, thisArg, disposables) => {\n\t\t\t\treturn this.getOrCreateEmitterFor(rendererId).event(listener, thisArg, disposables);\n\t\t\t},\n\t\t\tpostMessage: (message, editorOrAlias) => {\n\t\t\t\tif (ExtHostNotebookEditor.apiEditorsToExtHost.has(message)) { // back compat for swapped args\n\t\t\t\t\t[message, editorOrAlias] = [editorOrAlias, message];\n\t\t\t\t}\n\n\t\t\t\tconst extHostEditor = editorOrAlias && ExtHostNotebookEditor.apiEditorsToExtHost.get(editorOrAlias);\n\t\t\t\treturn this.proxy.$postMessage(extHostEditor?.id, rendererId, message);\n\t\t\t},\n\t\t};\n\n\t\treturn messaging;\n\t}\n\n\tprivate getOrCreateEmitterFor(rendererId: string) {\n\t\tlet emitter = this._rendererMessageEmitters.get(rendererId);\n\t\tif (emitter) {\n\t\t\treturn emitter;\n\t\t}\n\n\t\temitter = new Emitter({\n\t\t\tonDidRemoveLastListener: () => {\n\t\t\t\temitter?.dispose();\n\t\t\t\tthis._rendererMessageEmitters.delete(rendererId);\n\t\t\t}\n\t\t});\n\n\t\tthis._rendererMessageEmitters.set(rendererId, emitter);\n\n\t\treturn emitter;\n\t}\n}\n"]}