{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostTesting.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAsCzF,IAAM,IAAI,GAAV,MAAM,IAAI;QAUhB,YACqB,GAAQ,EAC5B,QAAa,EACI,CAAY;YAAZ,MAAC,GAAD,CAAC,CAAW;YAZb,MAAC,GAAuB,IAAI,WAAG,EAAY,CAAC;YAC5C,MAAC,GAAa,IAAI,GAAG,EAA8C,CAAC;YAK9E,qBAAgB,GAAG,IAAI,CAAC,CAAC,CAAqB,KAAK,CAAC;YACpD,YAAO,GAAwC,EAAE,CAAC;YAOxD,IAAI,CAAC,CAAC,GAAO,GAAG,CAAC,QAAQ,CAAC,sBAAG,CAAS,iBAAiB,CAAC,CAAC;YACzD,IAAI,CAAC,CAAC,GAAU,IAAI,aAAa,CAAC,IAAI,CAAC,CAAC,CAAK,CAAC;YAC9C,IAAI,CAAC,CAAC,GAAY,IAAI,IAAI,CAAe,IAAI,CAAC,CAAC,CAAK,CAAC;YAErD,QAAQ,CAAC,yBAAyB,CAAC;gBAClC,eAAe,EAAE,GAAG,CAAC,EAAE;oBACtB,QAAQ,GAAG,EAAE,IAAI,EAAE;wBAClB,0CAAiC,CAAC,CAAC;4BAClC,MAAM,IAAI,GAAG,GAAuB,CAAC;4BACrC,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;4BAChE,MAAM,UAAU,GAAG,IAAI,CAAC,CAAC,CAAW,GAAG,CAAC,YAAG,CAAI,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;4BACjE,OAAO,UAAU,EAAE,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,EAAE,MAAM,IAAI,IAAA,qBAAG,EAAe,GAAG,CAAC,CAAC;yBACrF;wBACD,8CAAqC,CAAC,CAAC;4BACtC,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,GAA2B,CAAC;4BACvD,OAAO;gCACN,IAAI,EAAE,IAAI,CAAC,CAAC,CAAW,GAAG,CAAC,YAAG,CAAI,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,MAAM;gCAClF,OAAO,EAAE,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC,OAAuC,CAAC;6BACxE,CAAC;yBACF;wBACD,OAAO,CAAC,CAAC,OAAO,GAAG,CAAC;qBACpB;gBACF,CAAC;aACD,CAAC,CAAC;YAEH,QAAQ,CAAC,eAAe,CAAC,KAAK,EAAE,8BAA8B,EAAE,KAAK,IAAkB,EAAE;gBACxF,MAAM,KAAK,GAAG,MAAM,QAAQ,CAAC,cAAc,0EAGL,CAAC;gBAEvC,MAAM,MAAM,GAAG,CAAC,CAAS,EAAE,EAAE;oBAC5B,MAAM,UAAU,GAAG,IAAI,CAAC,CAAC,CAAW,GAAG,CAAC,YAAG,CAAI,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;oBACxD,IAAI,CAAC,UAAU,EAAE;wBAAE,OAAO,SAAS,CAAC;qBAAE;oBACtC,OAAO,YAAG,CAAI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC;gBAC7F,CAAC,CAAC;gBAEF,OAAO;oBACN,OAAO,EAAE,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,WAAG,CAAO,IAAI,EAAE;oBAC3D,OAAO,EAAE,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,WAAG,CAAO,IAAI,EAAE;iBAC3D,CAAC;YACH,CAAC,CAAC,CAAC;QACJ,CAAC;QAED;;WAEG;QACI,oBAAoB,CAAC,SAAgC,EAAE,YAAoB,EAAE,KAAa,EAAE,cAAoE;YACtK,IAAI,IAAI,CAAC,CAAC,CAAW,GAAG,CAAC,YAAY,CAAC,EAAE;gBACvC,MAAM,IAAI,KAAK,CAAC,qDAAqD,YAAY,GAAG,CAAC,CAAC;aACtF;YAED,MAAM,UAAU,GAAG,IAAI,eAAG,EAAc,CAAC;YACzC,MAAM,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,IAAI,qBAAG,CAAuB,YAAY,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAO,CAAC,CAAC;YACpG,UAAU,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YAE9B,MAAM,QAAQ,GAAG,IAAI,GAAG,EAAiC,CAAC;YAC1D,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAK;YAEzB,MAAM,UAAU,GAA0B;gBACzC,KAAK,EAAE,UAAU,CAAC,IAAI,CAAC,QAAQ;gBAC/B,IAAI,KAAK;oBACR,OAAO,KAAK,CAAC;gBACd,CAAC;gBACD,IAAI,KAAK,CAAC,KAAa;oBACtB,KAAK,GAAG,KAAK,CAAC;oBACd,UAAU,CAAC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;oBAC9B,KAAK,CAAC,iBAAiB,CAAC,YAAY,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;gBAClD,CAAC;gBACD,IAAI,cAAc;oBACjB,OAAO,cAAc,CAAC;gBACvB,CAAC;gBACD,IAAI,cAAc,CAAC,KAAwE;oBAC1F,cAAc,GAAG,KAAK,CAAC;oBACvB,KAAK,CAAC,iBAAiB,CAAC,YAAY,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;gBAChE,CAAC;gBACD,IAAI,EAAE;oBACL,OAAO,YAAY,CAAC;gBACrB,CAAC;gBACD,gBAAgB,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,SAAS,EAAE,GAAgC,EAAE,qBAA+B,EAAE,EAAE;oBAC5H,uEAAuE;oBACvE,4EAA4E;oBAC5E,IAAI,SAAS,GAAG,IAAA,UAAG,EAAE,KAAK,CAAC,CAAC;oBAC5B,OAAO,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;wBAC/B,SAAS,EAAE,CAAC;qBACZ;oBAED,OAAO,IAAI,IAAI,CAAe,IAAI,CAAC,CAAC,EAAM,QAAQ,EAAE,YAAY,EAAE,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,UAAU,EAAE,SAAS,EAAE,GAAG,EAAE,qBAAqB,CAAC,CAAC;gBAC/I,CAAC;gBACD,cAAc,CAAC,EAAE,EAAE,KAAK,EAAE,GAAG;oBAC5B,OAAO,IAAI,qBAAG,CAAU,YAAY,EAAE,EAAE,EAAE,KAAK,EAAE,GAAG,CAAC,CAAC;gBACvD,CAAC;gBACD,aAAa,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,OAAO,GAAG,IAAI,EAAE,EAAE;oBAChD,OAAO,IAAI,CAAC,CAAC,CAAU,aAAa,CAAC,SAAS,EAAE,YAAY,EAAE,UAAU,EAAE,OAAO,EAAE,IAAI,EAAE,OAAO,CAAC,CAAC;gBACnG,CAAC;gBACD,qBAAqB,EAAE,KAAK,CAAC,EAAE;oBAC9B,IAAI,KAAK,KAAK,SAAS,EAAE;wBACxB,IAAI,CAAC,CAAC,CAAK,gBAAgB,CAAC,SAAS,CAAC,CAAC;qBACvC;yBAAM;wBACN,MAAM,QAAQ,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;wBAC1D,IAAI,CAAC,CAAC,CAAK,gBAAgB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,YAAG,CAAI,mBAAmB,CAAC,CAAE,EAAE,YAAY,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;qBACxG;gBACF,CAAC;gBACD,IAAI,cAAc,CAAC,EAAE;oBACpB,UAAU,CAAC,cAAc,GAAG,EAAE,CAAC;gBAChC,CAAC;gBACD,IAAI,cAAc;oBACjB,OAAO,UAAU,CAAC,cAAgE,CAAC;gBACpF,CAAC;gBACD,OAAO,EAAE,GAAG,EAAE;oBACb,UAAU,CAAC,OAAO,EAAE,CAAC;gBACtB,CAAC;aACD,CAAC;YAEF,KAAK,CAAC,uBAAuB,CAAC,YAAY,EAAE,KAAK,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC;YACrE,UAAU,CAAC,GAAG,CAAC,IAAA,eAAG,EAAU,GAAG,EAAE,CAAC,KAAK,CAAC,yBAAyB,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAElF,MAAM,IAAI,GAAmB,EAAE,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC;YACvF,IAAI,CAAC,CAAC,CAAW,GAAG,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;YACzC,UAAU,CAAC,GAAG,CAAC,IAAA,eAAG,EAAU,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAW,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;YAE1E,UAAU,CAAC,GAAG,CAAC,UAAU,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,YAAY,CAAC,YAAY,EAAE,IAAI,CAAC,GAAG,CAAC,uBAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAExH,OAAO,UAAU,CAAC;QACnB,CAAC;QAED;;WAEG;QACI,kBAAkB;YACxB,OAAO,IAAI,CAAC,CAAC,CAAQ,QAAQ,EAAE,CAAC;QACjC,CAAC;QAGD;;WAEG;QACI,KAAK,CAAC,QAAQ,CAAC,GAA0B,EAAE,KAAK,GAAG,gCAAiB,CAAC,IAAI;YAC/E,MAAM,OAAO,GAAG,2BAA2B,CAAC,GAAG,CAAC,CAAC;YACjD,IAAI,CAAC,OAAO,EAAE;gBACb,MAAM,IAAI,KAAK,CAAC,qEAAqE,CAAC,CAAC;aACvF;YAED,MAAM,UAAU,GAAG,IAAI,CAAC,CAAC,CAAW,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YAC9D,IAAI,CAAC,UAAU,EAAE;gBAChB,MAAM,IAAI,KAAK,CAAC,sBAAsB,CAAC,CAAC;aACxC;YAED,MAAM,IAAI,CAAC,CAAC,CAAK,SAAS,CAAC;gBAC1B,aAAa,EAAE,KAAK;gBACpB,OAAO,EAAE,CAAC;wBACT,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,YAAG,CAAI,mBAAmB,CAAC,CAAC,EAAE,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC;wBAC1I,YAAY,EAAE,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAAC;wBAChD,SAAS,EAAE,OAAO,CAAC,SAAS;wBAC5B,YAAY,EAAE,OAAO,CAAC,YAAY;qBAClC,CAAC;gBACF,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;aACpC,EAAE,KAAK,CAAC,CAAC;QACX,CAAC;QAED;;WAEG;QACH,UAAU;YACT,KAAK,MAAM,EAAE,UAAU,EAAE,IAAI,IAAI,CAAC,CAAC,CAAW,MAAM,EAAE,EAAE;gBACvD,UAAU,CAAC,SAAS,EAAE,CAAC;aACvB;YAED,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;QAC1B,CAAC;QAED;;WAEG;QACH,oBAAoB,CAAC,KAAa,EAAE,MAAc,EAAE,KAAwB;YAC3E,MAAM,QAAQ,GAAG,IAAA,gBAAG,EAAU,IAAI,CAAC,CAAC,CAAU,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;YACjH,OAAO,QAAQ,EAAE,mBAAmB,CAAC,KAAK,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACpE,CAAC;QAED;;WAEG;QACH,oBAAoB,CAAC,KAAa,EAAE,MAAc,EAAE,SAAiB,EAAE,KAAwB;YAC9F,MAAM,QAAQ,GAAG,IAAA,gBAAG,EAAU,IAAI,CAAC,CAAC,CAAU,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;YACjH,OAAO,QAAQ,EAAE,mBAAmB,CAAC,SAAS,EAAE,KAAK,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QAC/E,CAAC;QAED,kBAAkB;QAClB,oBAAoB,CAAC,YAAoB,EAAE,SAAiB;YAC3D,IAAI,CAAC,CAAC,CAAW,GAAG,CAAC,YAAY,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,gBAAgB,EAAE,EAAE,CAAC;QACnF,CAAC;QAED,kBAAkB;QAClB,KAAK,CAAC,aAAa,CAAC,YAAoB,EAAE,KAAwB;YACjE,MAAM,IAAI,CAAC,CAAC,CAAW,GAAG,CAAC,YAAY,CAAC,EAAE,UAAU,CAAC,cAAc,EAAE,CAAC,KAAK,CAAC,CAAC;QAC9E,CAAC;QAED;;;WAGG;QACI,mBAAmB,CAAC,OAAiC;YAC3D,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,MAAM,CAC3B,OAAO;iBACL,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,IAAA,aAAG,EAAQ,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC/C,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;iBACpB,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,WAAW,GAAG,CAAC,CAAC,WAAW,CAAC;iBAC7C,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CACd,CAAC;YAEF,IAAI,CAAC,CAAC,CAAqB,IAAI,EAAE,CAAC;QACnC,CAAC;QAED;;;WAGG;QACI,KAAK,CAAC,WAAW,CAAC,MAAc,EAAE,MAAc;YACtD,MAAM,UAAU,GAAG,IAAI,CAAC,CAAC,CAAW,GAAG,CAAC,YAAG,CAAI,UAAU,CAAC,MAAM,CAAC,CAAC,YAAY,CAAC,EAAE,UAAU,CAAC;YAC5F,IAAI,UAAU,EAAE;gBACf,MAAM,UAAU,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;gBAChE,UAAU,CAAC,SAAS,EAAE,CAAC;aACvB;QACF,CAAC;QAED;;;WAGG;QACI,WAAW,CAAC,IAA8B;YAChD,IAAI,CAAC,CAAC,CAAQ,SAAS,CAAC,IAAI,CAAC,GAAG,CAAC,uBAAW,CAAC,WAAW,CAAC,CAAC,CAAC;QAC5D,CAAC;QAED;;;;WAIG;QACI,KAAK,CAAC,mBAAmB,CAAC,IAA6B,EAAE,KAAwB;YACvF,OAAO,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAwB,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QACvF,CAAC;QAED;;;;WAIG;QACI,KAAK,CAAC,mBAAmB,CAAC,IAA6B,EAAE,KAAwB;YACvF,MAAM,GAAG,GAAG,IAAI,kBAAG,CAAqB,KAAK,CAAC,CAAC;YAC/C,MAAM,GAAG,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAwB,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;YAEpG,uFAAuF;YACvF,IAAI,CAAC,KAAK,CAAC,uBAAuB,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,EAAE;gBAC9D,MAAM,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,uBAAuB,CAAC,CAAC,CAAC,CAAC,CAAC;aACzD;YAED,GAAG,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAClB,OAAO,GAAG,CAAC;QACZ,CAAC;QAEO,KAAK,CAAC,CAAC,CAAwB,GAAoD,EAAE,YAAqB,EAAE,KAAwB;YAC3I,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAW,GAAG,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;YACtD,IAAI,CAAC,MAAM,EAAE;gBACZ,OAAO,EAAE,CAAC;aACV;YAED,MAAM,EAAE,UAAU,EAAE,QAAQ,EAAE,SAAS,EAAE,GAAG,MAAM,CAAC;YACnD,MAAM,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;YAC5C,IAAI,CAAC,OAAO,EAAE;gBACb,OAAO,EAAE,CAAC;aACV;YAED,MAAM,YAAY,GAAG,GAAG,CAAC,OAAO;iBAC9B,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;iBAC5C,MAAM,CAAC,WAAG,CAAO,CAAC;YAEpB,MAAM,YAAY,GAAG,GAAG,CAAC,aAAa;iBACpC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;iBACzC,MAAM,CAAC,WAAG,CAAO;iBACjB,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,YAAY,CAAC,IAAI,CACnC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,iCAAyB,CAC1E,CAAC,CAAC;YAEJ,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;gBACzB,OAAO,EAAE,CAAC;aACV;YAED,MAAM,SAAS,GAAG,IAAI,kBAAG,CACxB,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,YAAY,qBAAG,CAAc,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,EAC1G,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,EAC/B,OAAO,EACP,YAAY,CACZ,CAAC;YAEF,MAAM,OAAO,GAAG,IAAA,eAAG,EAAoB,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC,CAAU,2BAA2B,CACzF,SAAS,EACT,IAAI,CAAO,YAAY,CAAC,GAAG,EAAE,MAAM,CAAC,UAAU,CAAC,EAC/C,SAAS,EACT,KAAK,CACL,CAAC;YAEF,IAAI;gBACH,MAAM,OAAO,CAAC,UAAU,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;gBAC3C,OAAO,EAAE,CAAC;aACV;YAAC,OAAO,CAAC,EAAE;gBACX,OAAO,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;aAC5B;oBAAS;gBACT,IAAI,OAAO,EAAE;oBACZ,IAAI,OAAO,CAAC,eAAe,IAAI,CAAC,KAAK,CAAC,uBAAuB,EAAE;wBAC9D,MAAM,aAAK,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;qBACrC;oBAED,OAAO,CAAC,OAAO,EAAE,CAAC;iBAClB;aACD;QACF,CAAC;QAED;;WAEG;QACI,uBAAuB,CAAC,KAAyB;YACvD,IAAI,KAAK,KAAK,SAAS,EAAE;gBACxB,IAAI,CAAC,CAAC,CAAU,aAAa,EAAE,CAAC;aAChC;iBAAM;gBACN,IAAI,CAAC,CAAC,CAAU,aAAa,CAAC,KAAK,CAAC,CAAC;aACrC;QACF,CAAC;KACD,CAAA;IAtVY,oBAAI;mBAAJ,IAAI;QAWd,WAAA,uBAAG,CAAA;OAXO,IAAI,CAsVhB;IAED,kFAAkF;IAClF,MAAM,mBAAmB,GAAG,KAAM,CAAC;IAEnC,IAAW,mBAOV;IAPD,WAAW,mBAAmB;QAC7B,gBAAgB;QAChB,mEAAO,CAAA;QACP,yDAAyD;QACzD,yEAAU,CAAA;QACV,uBAAuB;QACvB,+DAAK,CAAA;IACN,CAAC,EAPU,mBAAmB,KAAnB,mBAAmB,QAO7B;IAED,MAAM,cAAe,SAAQ,eAAG;QAY/B;;WAEG;QACH,IAAW,eAAe;YACzB,OAAO,IAAI,CAAC,CAAC,CAAK,IAAI,GAAG,CAAC,CAAC;QAC5B,CAAC;QAED;;WAEG;QACH,IAAW,EAAE;YACZ,OAAO,IAAI,CAAC,CAAC,CAAG,EAAE,CAAC;QACpB,CAAC;QAED,YACkB,CAAS,EACT,CAA6B,EAC7B,CAAiD,EAClE,WAA+B;YAE/B,KAAK,EAAE,CAAC;YALS,MAAC,GAAD,CAAC,CAAQ;YACT,MAAC,GAAD,CAAC,CAA4B;YAC7B,MAAC,GAAD,CAAC,CAAgD;YA5B3D,MAAC,uCAAmC;YAC3B,MAAC,GAAO,IAAI,GAAG,EAAiF,CAAC;YACjG,MAAC,GAAe,IAAI,GAAG,EAAU,CAAC;YAElC,MAAC,GAAY,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAY,CAAC,CAAC;YAElE;;eAEG;YACa,UAAK,GAAG,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC;YAuB7C,IAAI,CAAC,CAAC,GAAK,IAAI,CAAC,CAAC,CAAS,IAAI,kBAAG,CAAqB,WAAW,CAAC,CAAC,CAAC;YAEpE,MAAM,WAAW,GAAG,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,CAAc,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,EAAiB,EAAE,mBAAmB,CAAC,CAAC,CAAC;YAC7G,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAG,KAAK,CAAC,uBAAuB,CAAC,GAAG,EAAE,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;QACtF,CAAC;QAED,iFAAiF;QAC1E,MAAM;YACZ,IAAI,IAAI,CAAC,CAAC,wCAAoC,EAAE;gBAC/C,IAAI,CAAC,CAAC,CAAG,MAAM,EAAE,CAAC;gBAClB,IAAI,CAAC,CAAC,yCAAqC,CAAC;aAC5C;iBAAM,IAAI,IAAI,CAAC,CAAC,2CAAuC,EAAE;gBACzD,IAAI,CAAC,CAAC,EAAiB,CAAC;aACxB;QACF,CAAC;QAED,mCAAmC;QAC5B,WAAW,CAAC,MAAc;YAChC,OAAO,IAAI,CAAC,CAAC,CAAK,GAAG,CAAC,MAAM,CAAC,EAAE,QAAQ,CAAC;QACzC,CAAC;QAED,mEAAmE;QAC5D,SAAS,CAAC,IAAwB;YACxC,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAG,EAAE,CAAC;YAC1B,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAG,YAAY,CAAC;YACrC,MAAM,MAAM,GAAG,IAAA,UAAG,GAAW,CAAC;YAC9B,MAAM,QAAQ,GAAG,IAAI,qBAAqB,CAAC,IAAI,CAAC,CAAC,EAAM,KAAK,EAAE,MAAM,CAAC,CAAC;YAEtE,MAAM,iBAAiB,GAAG,CAAyB,EAAkD,EAAE,EAAE,CACxG,CAAC,IAAqB,EAAE,GAAG,IAAU,EAAE,EAAE;gBACxC,IAAI,KAAK,EAAE;oBACV,OAAO,CAAC,IAAI,CAAC,8BAA8B,IAAI,CAAC,EAAE,kCAAkC,CAAC,CAAC;oBACtF,OAAO;iBACP;gBAED,IAAI,CAAC,IAAI,CAAC,CAAC,CAAG,UAAU,CAAC,IAAI,CAAC,EAAE;oBAC/B,OAAO;iBACP;gBAED,IAAI,CAAC,CAAC,CAAiB,IAAI,CAAC,CAAC;gBAC7B,EAAE,CAAC,IAAI,EAAE,GAAG,IAAI,CAAC,CAAC;YACnB,CAAC,CAAC;YAEH,MAAM,cAAc,GAAG,CAAC,IAAqB,EAAE,QAA4D,EAAE,EAAE;gBAC9G,MAAM,SAAS,GAAG,QAAQ,YAAY,KAAK;oBAC1C,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC;oBACxC,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;gBAExC,IAAI,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,YAAY,KAAK,SAAS,CAAC,EAAE;oBACtD,IAAA,gBAAG,EAAqB,IAAI,CAAC,CAAC,EAAU,yBAAyB,CAAC,CAAC;iBACnE;gBAED,IAAI,IAAI,CAAC,GAAG,IAAI,IAAI,CAAC,KAAK,EAAE;oBAC3B,MAAM,eAAe,GAAiB,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE,GAAG,EAAE,IAAI,CAAC,GAAG,EAAE,CAAC;oBAC/F,KAAK,MAAM,OAAO,IAAI,SAAS,EAAE;wBAChC,OAAO,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,IAAI,eAAe,CAAC;qBACvD;iBACD;gBAED,IAAI,CAAC,CAAC,CAAK,wBAAwB,CAAC,KAAK,EAAE,MAAM,EAAE,YAAG,CAAI,mBAAmB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,QAAQ,EAAE,EAAE,SAAS,CAAC,CAAC;YACpH,CAAC,CAAC;YAEF,IAAI,KAAK,GAAG,KAAK,CAAC;YAClB,MAAM,GAAG,GAAmB;gBAC3B,WAAW,EAAE,IAAI,CAAC,CAAC,CAAG,WAAW;gBACjC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAG,KAAK;gBACrB,IAAI;gBACJ,IAAI,gBAAgB;oBACnB,OAAO,QAAQ,CAAC,gBAAgB,CAAC;gBAClC,CAAC;gBACD,IAAI,gBAAgB,CAAC,QAAQ;oBAC5B,QAAQ,CAAC,gBAAgB,GAAG,QAAQ,CAAC;gBACtC,CAAC;gBACD,wBAAwB;gBACxB,QAAQ,EAAE,iBAAiB,CAAC,IAAI,CAAC,EAAE;oBAClC,IAAI,CAAC,CAAC,CAAK,qBAAqB,CAAC,KAAK,EAAE,MAAM,EAAE,YAAG,CAAI,mBAAmB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,QAAQ,EAAE,iCAAyB,CAAC;gBAC9H,CAAC,CAAC;gBACF,OAAO,EAAE,iBAAiB,CAAC,IAAI,CAAC,EAAE;oBACjC,IAAI,CAAC,CAAC,CAAK,qBAAqB,CAAC,KAAK,EAAE,MAAM,EAAE,YAAG,CAAI,mBAAmB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,QAAQ,EAAE,kCAA0B,CAAC;gBAC/H,CAAC,CAAC;gBACF,OAAO,EAAE,iBAAiB,CAAC,IAAI,CAAC,EAAE;oBACjC,IAAI,CAAC,CAAC,CAAK,qBAAqB,CAAC,KAAK,EAAE,MAAM,EAAE,YAAG,CAAI,mBAAmB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,QAAQ,EAAE,kCAA0B,CAAC;gBAC/H,CAAC,CAAC;gBACF,OAAO,EAAE,iBAAiB,CAAC,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE;oBACvD,cAAc,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;oBAC/B,IAAI,CAAC,CAAC,CAAK,qBAAqB,CAAC,KAAK,EAAE,MAAM,EAAE,YAAG,CAAI,mBAAmB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,QAAQ,EAAE,mCAA2B,QAAQ,CAAC,CAAC;gBACzI,CAAC,CAAC;gBACF,MAAM,EAAE,iBAAiB,CAAC,CAAC,IAAI,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE;oBACtD,cAAc,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;oBAC/B,IAAI,CAAC,CAAC,CAAK,qBAAqB,CAAC,KAAK,EAAE,MAAM,EAAE,YAAG,CAAI,mBAAmB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,QAAQ,EAAE,kCAA0B,QAAQ,CAAC,CAAC;gBACxI,CAAC,CAAC;gBACF,MAAM,EAAE,iBAAiB,CAAC,CAAC,IAAI,EAAE,QAAQ,EAAE,EAAE;oBAC5C,IAAI,CAAC,CAAC,CAAK,qBAAqB,CAAC,KAAK,EAAE,MAAM,EAAE,YAAG,CAAI,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAG,YAAY,CAAC,CAAC,QAAQ,EAAE,kCAA0B,QAAQ,CAAC,CAAC;gBACvJ,CAAC,CAAC;gBACF,YAAY;gBACZ,YAAY,EAAE,CAAC,MAAM,EAAE,QAA0B,EAAE,IAAsB,EAAE,EAAE;oBAC5E,IAAI,KAAK,EAAE;wBACV,OAAO;qBACP;oBAED,IAAI,IAAI,EAAE;wBACT,IAAI,IAAI,CAAC,CAAC,CAAG,UAAU,CAAC,IAAI,CAAC,EAAE;4BAC9B,IAAI,CAAC,CAAC,CAAiB,IAAI,CAAC,CAAC;yBAC7B;6BAAM;4BACN,IAAI,GAAG,SAAS,CAAC;yBACjB;qBACD;oBAED,IAAI,CAAC,CAAC,CAAK,kBAAkB,CAC5B,KAAK,EACL,MAAM,EACN,YAAG,CAAM,UAAU,CAAC,MAAM,CAAC,EAC3B,QAAQ,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,EAC3C,IAAI,IAAI,YAAG,CAAI,mBAAmB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,QAAQ,EAAE,CAC3D,CAAC;gBACH,CAAC;gBACD,GAAG,EAAE,GAAG,EAAE;oBACT,IAAI,KAAK,EAAE;wBACV,OAAO;qBACP;oBAED,KAAK,GAAG,IAAI,CAAC;oBACb,IAAI,CAAC,CAAC,CAAK,oBAAoB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;oBAC/C,IAAI,CAAC,CAAC,CAAK,MAAM,CAAC,MAAM,CAAC,CAAC;oBAC1B,IAAI,CAAC,IAAI,CAAC,CAAC,CAAK,IAAI,EAAE;wBACrB,IAAI,CAAC,CAAC,EAAU,CAAC;qBACjB;gBACF,CAAC;aACD,CAAC;YAEF,IAAI,CAAC,CAAC,CAAK,GAAG,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE,QAAQ,EAAE,CAAC,CAAC;YAC1C,IAAI,CAAC,CAAC,CAAK,mBAAmB,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;YAE3E,OAAO,GAAG,CAAC;QACZ,CAAC;QAEO,CAAC;YACR,KAAK,MAAM,EAAE,GAAG,EAAE,IAAI,IAAI,CAAC,CAAC,CAAK,MAAM,EAAE,EAAE;gBAC1C,GAAG,CAAC,GAAG,EAAE,CAAC;aACV;QACF,CAAC;QAEO,CAAC;YACR,IAAI,IAAI,CAAC,CAAC,sCAAkC,EAAE;gBAC7C,IAAI,CAAC,CAAC,oCAAgC,CAAC;gBACvC,IAAI,CAAC,CAAC,CAAU,IAAI,EAAE,CAAC;aACvB;QACF,CAAC;QAEO,CAAC,CAAiB,IAAqB;YAC9C,IAAI,CAAC,CAAC,IAAI,YAAY,qBAAG,CAAU,EAAE;gBACpC,MAAM,IAAI,wBAAG,CAAkB,IAAI,CAAC,EAAE,CAAC,CAAC;aACxC;YAED,IAAI,IAAI,CAAC,CAAC,CAAa,GAAG,CAAC,YAAG,CAAI,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAG,YAAY,CAAC,CAAC,QAAQ,EAAE,CAAC,EAAE;gBAC/F,OAAO;aACP;YAED,MAAM,KAAK,GAA2B,EAAE,CAAC;YACzC,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAG,WAAW,CAAC,IAAI,CAAC;YACvC,OAAO,IAAI,EAAE;gBACZ,MAAM,SAAS,GAAG,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAW,CAAU,CAAC;gBAC9D,KAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;gBAEzB,IAAI,IAAI,CAAC,CAAC,CAAa,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE;oBAC5C,MAAM;iBACN;gBAED,IAAI,CAAC,CAAC,CAAa,GAAG,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;gBACxC,IAAI,IAAI,KAAK,IAAI,EAAE;oBAClB,MAAM;iBACN;gBAED,IAAI,GAAG,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC;aAC3B;YAED,IAAI,CAAC,CAAC,CAAK,cAAc,CAAC,IAAI,CAAC,CAAC,CAAG,YAAY,EAAE,IAAI,CAAC,CAAC,CAAG,EAAE,EAAE,KAAK,CAAC,CAAC;QACtE,CAAC;QAEe,OAAO;YACtB,IAAI,CAAC,CAAC,EAAU,CAAC;YACjB,KAAK,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC;KACD;IAED;;;OAGG;IACH,MAAa,IAAI;QAGhB,IAAW,QAAQ;YAClB,OAAO,IAAI,CAAC,CAAC,CAAO,MAAM,EAAE,CAAC;QAC9B,CAAC;QAED,YAA6B,CAA6B;YAA7B,MAAC,GAAD,CAAC,CAA4B;YANlD,MAAC,GAAS,IAAI,GAAG,EAAyC,CAAC;QAML,CAAC;QAE/D;;;;WAIG;QACI,2BAA2B,CAAC,GAA0B,EAAE,GAAS,EAAQ,SAAiD,EAAE,KAAwB;YAC1J,OAAO,IAAI,CAAC,CAAC,CAAU,GAAG,EAAE,GAAG,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC;QACpD,CAAC;QAED;;WAEG;QACI,aAAa,CAAC,KAAa;YACjC,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,CAAC,CAAO,MAAM,EAAE,EAAE;gBAC5C,IAAI,OAAO,CAAC,EAAE,KAAK,KAAK,EAAE;oBACzB,OAAO,CAAC,MAAM,EAAE,CAAC;oBACjB,OAAO;iBACP;aACD;QACF,CAAC;QAED;;WAEG;QACI,aAAa;YACnB,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,CAAC,CAAO,MAAM,EAAE,EAAE;gBAC5C,OAAO,CAAC,MAAM,EAAE,CAAC;aACjB;QACF,CAAC;QAGD;;WAEG;QACI,aAAa,CAAC,SAAuC,EAAE,YAAoB,EAAE,UAAe,EAAwB,OAA8B,EAAE,IAAwB,EAAE,OAAgB;YACpM,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAO,GAAG,CAAC,OAAO,CAAC,CAAC;YAC3C,IAAI,QAAQ,EAAE;gBACb,OAAO,QAAQ,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;aAChC;YAED,uEAAuE;YACvE,2BAA2B;YAC3B,MAAM,GAAG,GAAG,IAAI,CAAO,UAAU,CAAC,YAAY,EAAE,UAAU,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;YAC9E,MAAM,OAAO,GAAG,2BAA2B,CAAC,OAAO,CAAC,CAAC;YACrD,IAAI,CAAC,CAAC,CAAK,wBAAwB,CAAC;gBACnC,YAAY;gBACZ,UAAU,EAAE,CAAC,CAAC,OAAO,CAAC,UAAU;gBAChC,OAAO,EAAE,OAAO,IAAI,EAAE,KAAK,EAAE,oBAAoB,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,OAAO,CAAC,SAAS,EAAE;gBACxF,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,YAAG,CAAI,mBAAmB,CAAC,CAAC,EAAE,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE;gBACtG,EAAE,EAAE,GAAG,CAAC,EAAE;gBACV,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,YAAG,CAAI,mBAAmB,CAAC,CAAC,EAAE,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC;gBACxH,OAAO;aACP,CAAC,CAAC;YAEH,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAU,OAAO,EAAE,GAAG,EAAE,SAAS,CAAC,CAAC;YACzD,aAAK,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE;gBAC9B,IAAI,CAAC,CAAC,CAAK,yBAAyB,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;gBAC7C,OAAO,CAAC,OAAO,EAAE,CAAC;YACnB,CAAC,CAAC,CAAC;YAEH,OAAO,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAChC,CAAC;QAEO,CAAC,CAAU,GAA0B,EAAE,GAAS,EAAQ,SAAuC,EAAE,KAAyB;YACjI,MAAM,OAAO,GAAG,IAAI,cAAc,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,EAAM,SAAS,EAAE,KAAK,CAAC,CAAC;YACtE,IAAI,CAAC,CAAC,CAAO,GAAG,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;YAC/B,aAAK,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAO,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;YAC1D,OAAO,OAAO,CAAC;QAChB,CAAC;KACD;IA9ED,oBA8EC;IAED,MAAM,2BAA2B,GAAG,CAAC,OAA8B,EAAE,EAAE;QACtE,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE;YACrB,OAAO,SAAS,CAAC;SACjB;QAED,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,YAAY,IAAI,CAAe,EAAE;YACrD,MAAM,IAAI,KAAK,CAAC,wFAAwF,CAAC,CAAC;SAC1G;QAED,OAAO,OAAO,CAAC,OAAO,CAAC;IACxB,CAAC,CAAC;IAEF,MAAa,IAAI;QAIT,MAAM,CAAC,UAAU,CAAC,YAAoB,EAAE,UAAe,EAAwB,OAA8B,EAAE,OAAgB;YACrI,OAAO,IAAI,IAAI,CACd,YAAY,EACZ,IAAA,UAAG,GAAW,EACd,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,YAAG,CAAI,mBAAmB,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,EACnG,OAAO,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,YAAG,CAAI,mBAAmB,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC,QAAQ,EAAE,CAAC,IAAI,EAAE,EACvF,OAAO,EACP,UAAU,CACV,CAAC;QACH,CAAC;QAEM,MAAM,CAAC,YAAY,CAAC,OAA8B,EAAE,UAAe;YACzE,OAAO,IAAI,IAAI,CACd,OAAO,CAAC,YAAY,EACpB,OAAO,CAAC,KAAK,EACb,OAAO,CAAC,OAAO,EACf,OAAO,CAAC,aAAa,EACrB,IAAI,EACJ,UAAU,CACV,CAAC;QACH,CAAC;QAED,YACiB,YAAoB,EACpB,EAAU,EAC1B,OAAiB,EACjB,OAAiB,EACD,WAAoB,EACpB,WAAgB;YALhB,iBAAY,GAAZ,YAAY,CAAQ;YACpB,OAAE,GAAF,EAAE,CAAQ;YAGV,gBAAW,GAAX,WAAW,CAAS;YACpB,gBAAW,GAAX,WAAW,CAAK;YAEhC,IAAI,CAAC,CAAC,GAAe,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,uCAA4B,CAAC,CAAC;YACvE,IAAI,CAAC,CAAC,GAAe,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,uCAA4B,CAAC,CAAC;QACxE,CAAC;QAEM,UAAU,CAAC,IAAqB;YACtC,MAAM,EAAE,GAAG,YAAG,CAAI,mBAAmB,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC,QAAQ,EAAE,uCAA4B,CAAC;YACtG,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,CAAC,EAAc;gBACxC,IAAI,EAAE,KAAK,MAAM,IAAI,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;oBAC3C,OAAO,KAAK,CAAC;iBACb;aACD;YAED,KAAK,MAAM,MAAM,IAAI,IAAI,CAAC,CAAC,EAAc;gBACxC,IAAI,EAAE,KAAK,MAAM,IAAI,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,EAAE;oBAC3C,OAAO,IAAI,CAAC;iBACZ;aACD;YAED,OAAO,KAAK,CAAC;QACd,CAAC;KACD;IAtDD,oBAsDC;IAED,MAAM,qBAAqB;QAI1B,IAAW,gBAAgB,CAAC,QAAiD;YAC5E,IAAI,IAAI,CAAC,CAAC,EAAkB;gBAC3B,MAAM,IAAI,KAAK,CAAC,kEAAkE,CAAC,CAAC;aACpF;YAED,IAAI,CAAC,QAAQ,EAAE;gBACd,OAAO;aACP;YAED,IAAI,CAAC,CAAC,GAAmB,QAAQ,CAAC;YAClC,IAAI,CAAC,CAAC,CAAK,wBAAwB,CAAC,IAAI,CAAC,CAAC,EAAM,IAAI,CAAC,CAAC,CAAM,CAAC;QAC9D,CAAC;QAED,IAAW,gBAAgB;YAC1B,OAAO,IAAI,CAAC,CAAC,CAAiB;QAC/B,CAAC;QAED,YACkB,CAA6B,EAC7B,CAAa,EACb,CAAc;YAFd,MAAC,GAAD,CAAC,CAA4B;YAC7B,MAAC,GAAD,CAAC,CAAY;YACb,MAAC,GAAD,CAAC,CAAa;QAEhC,CAAC;QAEM,KAAK,CAAC,mBAAmB,CAAC,KAAwB;YACxD,IAAI,CAAC,IAAI,CAAC,CAAC,EAAkB;gBAC5B,OAAO,EAAE,CAAC;aACV;YAED,IAAI,CAAC,IAAI,CAAC,CAAC,EAAa;gBACvB,IAAI,CAAC,CAAC,GAAc,CAAC,KAAK,IAAI,EAAE,CAAC,IAAI,CAAC,CAAkB,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;aACvF;YAED,IAAI;gBACH,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,CAAC,CAAY;gBACzC,OAAO,QAAQ,EAAE,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;aAC1D;YAAC,OAAO,CAAC,EAAE;gBACX,IAAI,CAAC,CAAC,GAAc,SAAS,CAAC;gBAC9B,MAAM,CAAC,CAAC;aACR;QACF,CAAC;QAEM,KAAK,CAAC,mBAAmB,CAAC,KAAa,EAAE,KAAwB;YACvE,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,CAAC,CAAY;YAC7C,IAAI,IAAI,GAAG,YAAY,EAAE,CAAC,KAAK,CAAC,CAAC;YACjC,IAAI,CAAC,IAAI,CAAC,CAAC,IAAoB,CAAC,YAAY,IAAI,CAAC,IAAI,EAAE;gBACtD,OAAO,EAAE,CAAC;aACV;YAED,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE;gBAC3B,IAAI,GAAG,YAAY,CAAC,KAAK,CAAC,GAAG,MAAM,IAAI,CAAC,CAAC,CAAiB,mBAAmB,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,IAAI,CAAC;aACrG;YAED,OAAO,IAAI,CAAC,gBAAgB,EAAE,GAAG,CAAC,OAAO,CAAC,YAAY,CAAC,YAAY,CAAC,IAAI,EAAE,CAAC;QAC5E,CAAC;KACD;IAUD,MAAM,uBAAuB;QAO5B,IAAW,OAAO;YACjB,OAAO,IAAI,CAAC,CAAC,CAAK,IAAI,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,CAAO,IAAI,KAAK,CAAC,IAAI,IAAI,CAAC,CAAC,CAAO,IAAI,KAAK,CAAC,CAAC;QACpF,CAAC;QAED,YAA6B,CAAyC;YAAzC,MAAC,GAAD,CAAC,CAAwC;YAVrD,MAAC,GAAO,IAAI,GAAG,EAA8B,CAAC;YAC9C,MAAC,GAAS,IAAI,GAAG,EAA8B,CAAC;YAChD,MAAC,GAAS,IAAI,GAAG,EAA8B,CAAC;YAEhD,MAAC,GAAgB,IAAI,GAAG,EAAU,CAAC;QAOpD,CAAC;QAED;;WAEG;QACI,GAAG,CAAC,IAAgC;YAC1C,IAAI,CAAC,CAAC,CAAK,GAAG,CAAC,IAAI,CAAC,CAAC;QACtB,CAAC;QAED;;WAEG;QACI,MAAM,CAAC,IAAgC;YAC7C,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;YACjE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAK,GAAG,CAAC,IAAI,CAAC,EAAE;gBAC1B,IAAI,CAAC,CAAC,CAAO,GAAG,CAAC,IAAI,CAAC,CAAC;aACvB;QACF,CAAC;QAED;;WAEG;QACI,MAAM,CAAC,IAAgC;YAC7C,IAAI,IAAI,CAAC,CAAC,CAAK,GAAG,CAAC,IAAI,CAAC,EAAE;gBACzB,IAAI,CAAC,CAAC,CAAK,MAAM,CAAC,IAAI,CAAC,CAAC;gBACxB,OAAO;aACP;YAED,IAAI,CAAC,CAAC,CAAO,MAAM,CAAC,IAAI,CAAC,CAAC;YAE1B,MAAM,QAAQ,GAAG,YAAG,CAAI,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;YAClD,IAAI,QAAQ,IAAI,IAAI,CAAC,CAAC,CAAc,GAAG,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,EAAE;gBAC7D,IAAI,CAAC,CAAC,CAAc,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACzC,OAAO;aACP;YAED,IAAI,CAAC,CAAC,CAAO,GAAG,CAAC,IAAI,CAAC,CAAC;QACxB,CAAC;QAED;;WAEG;QACI,cAAc;YACpB,MAAM,EAAE,CAAC,EAAE,KAAK,EAAD,CAAC,EAAE,OAAO,EAAD,CAAC,EAAE,OAAO,EAAD,GAAG,IAAI,CAAC;YACzC,OAAO;gBACN,IAAI,KAAK,KAAK,OAAO,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACtD,IAAI,OAAO,KAAK,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBAC1D,IAAI,OAAO,KAAK,OAAO,CAAC,GAAG,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;aAC1D,CAAC;QACH,CAAC;QAEM,QAAQ;YACd,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;gBAClB,IAAI,CAAC,CAAC,CAAO,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;aACzC;QACF,CAAC;KACD;IAED;;;OAGG;IACH,MAAM,sBAAuB,SAAQ,eAA6D;QAAlG;;YACS,MAAC,GAAe,IAAI,WAAG,EAA+B,CAAC;YAE/D;;eAEG;YACa,qBAAgB,GAAG,IAAI,CAAC,CAAC,CAAa,KAAK,CAAC;QA2C7D,CAAC;QAzCA;;WAEG;QACH,IAAW,SAAS;YACnB,OAAO,KAAK,CAAC,CAAC,CAAK;QACpB,CAAC;QAED;;;WAGG;QACI,uBAAuB,CAAC,MAAc;YAC5C,OAAO,IAAI,CAAC,CAAC,CAAK,GAAG,CAAC,MAAM,CAAC,CAAC;QAC/B,CAAC;QAED;;WAEG;QACI,8BAA8B,CAAC,IAAqB;YAC1D,OAAO,IAAI,CAAC,CAAC,CAAK,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;QAChC,CAAC;QAED;;WAEG;QACO,CAAC,CAAU,IAAsB,EAAE,MAAmC;YAC/E,OAAO;gBACN,GAAG,IAAI;gBACP,2DAA2D;gBAC3D,OAAO,EAAE,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAoB;gBAC/D,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;gBACpC,QAAQ,EAAE,IAAI,GAAG,EAAE;aACnB,CAAC;QACH,CAAC;QAED;;WAEG;QACgB,CAAC;YACnB,OAAO,IAAI,uBAAuB,CAAC,IAAI,CAAC,CAAC,CAAa,CAAC;QACxD,CAAC;KACD;IAED,MAAM,aAAa;QAMlB,YAA6B,CAA6B;YAA7B,MAAC,GAAD,CAAC,CAA4B;QAC1D,CAAC;QAEM,QAAQ;YACd,IAAI,CAAC,IAAI,CAAC,CAAC,EAAQ;gBAClB,IAAI,CAAC,CAAC,GAAS,IAAI,CAAC,CAAC,EAAmB,CAAC;aACzC;YAED,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAO;YAC7B,OAAO,CAAC,SAAS,EAAE,CAAC;YAEpB,OAAO;gBACN,eAAe,EAAE,OAAO,CAAC,KAAK,CAAC,gBAAgB;gBAC/C,IAAI,KAAK,KAAK,OAAO,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;gBACxE,OAAO,EAAE,IAAA,gBAAG,EAAE,GAAG,EAAE;oBAClB,IAAI,EAAE,OAAO,CAAC,SAAS,KAAK,CAAC,EAAE;wBAC9B,IAAI,CAAC,CAAC,CAAK,qBAAqB,EAAE,CAAC;wBACnC,IAAI,CAAC,CAAC,GAAS,SAAS,CAAC;qBACzB;gBACF,CAAC,CAAC;aACF,CAAC;QACH,CAAC;QAED;;WAEG;QACI,8BAA8B,CAAC,GAAoB;YACzD,OAAO,IAAI,CAAC,CAAC,EAAQ,KAAK,CAAC,8BAA8B,CAAC,GAAG,CAAC,CAAC;QAChE,CAAC;QAED;;WAEG;QACI,SAAS,CAAC,IAAe;YAC/B,IAAI,CAAC,CAAC,EAAQ,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACjC,CAAC;QAEO,CAAC;YACR,MAAM,KAAK,GAAG,IAAI,sBAAsB,EAAE,CAAC;YAC3C,IAAI,CAAC,CAAC,CAAK,iBAAiB,EAAE,CAAC;YAC/B,OAAO,EAAE,SAAS,EAAE,CAAC,EAAE,KAAK,GAAG,CAAC;QACjC,CAAC;KACD;IAED,MAAa,IAAI;QACP,MAAM,CAAyB;QACxC,SAAS,CAAsC;QAG/C,IAAW,KAAK;YACf,OAAO,IAAI,CAAC,CAAC,CAAM;QACpB,CAAC;QAED,IAAW,KAAK,CAAC,KAAa;YAC7B,IAAI,KAAK,KAAK,IAAI,CAAC,CAAC,EAAO;gBAC1B,IAAI,CAAC,CAAC,GAAQ,KAAK,CAAC;gBACpB,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;aAC/E;QACF,CAAC;QAED,IAAW,qBAAqB;YAC/B,OAAO,IAAI,CAAC,CAAC,CAAsB;QACpC,CAAC;QAED,IAAW,qBAAqB,CAAC,QAAiB;YACjD,IAAI,QAAQ,KAAK,IAAI,CAAC,CAAC,EAAuB;gBAC7C,IAAI,CAAC,CAAC,GAAwB,QAAQ,CAAC;gBACvC,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,EAAE,EAAE,qBAAqB,EAAE,QAAQ,EAAE,CAAC,CAAC;aACzG;QACF,CAAC;QAED,IAAW,SAAS;YACnB,OAAO,IAAI,CAAC,CAAC,CAAU;QACxB,CAAC;QAED,IAAW,SAAS,CAAC,SAAkB;YACtC,IAAI,SAAS,KAAK,IAAI,CAAC,CAAC,EAAW;gBAClC,IAAI,CAAC,CAAC,GAAY,SAAS,CAAC;gBAC5B,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC;aACnF;QACF,CAAC;QAED,IAAW,GAAG;YACb,OAAO,IAAI,CAAC,IAAI,CAAC;QAClB,CAAC;QAED,IAAW,GAAG,CAAC,GAA+B;YAC7C,IAAI,GAAG,EAAE,EAAE,KAAK,IAAI,CAAC,IAAI,EAAE,EAAE,EAAE;gBAC9B,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;gBAChB,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,EAAE;oBACnE,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI;iBACtE,CAAC,CAAC;aACH;QACF,CAAC;QAED,IAAW,gBAAgB;YAC1B,OAAO,IAAI,CAAC,CAAC,CAAiB;QAC/B,CAAC;QAED,IAAW,gBAAgB,CAAC,OAAiC;YAC5D,IAAI,OAAO,KAAK,IAAI,CAAC,CAAC,EAAkB;gBACvC,IAAI,CAAC,CAAC,GAAmB,OAAO,CAAC;gBACjC,IAAI,CAAC,MAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,EAAE,EAAE,uBAAuB,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;aAC5G;QACF,CAAC;QAED,YACC,KAA6B,EAC7B,QAA4C,EAC5B,YAAoB,EACpB,SAAiB,EACzB,CAAc,EACN,IAA+B,EACxC,UAAsG,EACrG,IAAa,KAAK,EACnB,OAAmC,SAAS,EAC3C,IAAyB,KAAK;YAPtB,iBAAY,GAAZ,YAAY,CAAQ;YACpB,cAAS,GAAT,SAAS,CAAQ;YACzB,MAAC,GAAD,CAAC,CAAa;YACN,SAAI,GAAJ,IAAI,CAA2B;YACxC,eAAU,GAAV,UAAU,CAA4F;YACrG,MAAC,GAAD,CAAC,CAAiB;YACnB,SAAI,GAAJ,IAAI,CAAwC;YAC3C,MAAC,GAAD,CAAC,CAA6B;YAEtC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACpB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;YAC1B,QAAQ,CAAC,GAAG,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;YAE9B,MAAM,WAAW,GAAG,oBAAoB,CAAC,IAAI,CAAC,CAAC;YAC/C,IAAI,OAAO,WAAW,KAAK,QAAQ,EAAE;gBACpC,MAAM,IAAI,KAAK,CAAC,gCAAgC,IAAI,EAAE,CAAC,CAAC;aACxD;YAED,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC;gBAClC,SAAS,EAAE,SAAS;gBACpB,YAAY;gBACZ,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI;gBACxE,KAAK,EAAE,CAAC;gBACR,KAAK,EAAE,WAAW;gBAClB,SAAS,EAAE,CAAC;gBACZ,uBAAuB,EAAE,KAAK;gBAC9B,qBAAqB,EAAE,CAAC;aACxB,CAAC,CAAC;QACJ,CAAC;QAED,OAAO;YACN,IAAI,IAAI,CAAC,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE;gBAC3C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;gBAC3B,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;aAClE;QACF,CAAC;KACD;IArGD,oBAqGC;IAED,MAAM,oBAAoB,GAAwD;QACjF,CAAC,iCAAkB,CAAC,QAAQ,CAAC,uCAA+B;QAC5D,CAAC,iCAAkB,CAAC,KAAK,CAAC,oCAA4B;QACtD,CAAC,iCAAkB,CAAC,GAAG,CAAC,kCAA0B;KAClD,CAAC","file":"extHostTesting.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/* eslint-disable local/code-no-native-private */\n\nimport { mapFindFirst } from 'vs/base/common/arraysFind';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { once } from 'vs/base/common/functional';\nimport { hash } from 'vs/base/common/hash';\nimport { Disposable, DisposableStore, toDisposable } from 'vs/base/common/lifecycle';\nimport { MarshalledId } from 'vs/base/common/marshallingIds';\nimport { deepFreeze } from 'vs/base/common/objects';\nimport { isDefined } from 'vs/base/common/types';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { IExtensionDescription, IRelaxedExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { ExtHostTestingShape, ILocationDto, MainContext, MainThreadTestingShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { ExtHostCommands } from 'vs/workbench/api/common/extHostCommands';\nimport { ExtHostDocumentsAndEditors } from 'vs/workbench/api/common/extHostDocumentsAndEditors';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { ExtHostTestItemCollection, TestItemImpl, TestItemRootImpl, toItemFromContext } from 'vs/workbench/api/common/extHostTestItem';\nimport * as Convert from 'vs/workbench/api/common/extHostTypeConverters';\nimport { TestRunProfileKind, TestRunRequest } from 'vs/workbench/api/common/extHostTypes';\nimport { TestCommandId } from 'vs/workbench/contrib/testing/common/constants';\nimport { TestId, TestIdPathParts, TestPosition } from 'vs/workbench/contrib/testing/common/testId';\nimport { InvalidTestItemError } from 'vs/workbench/contrib/testing/common/testItemCollection';\nimport { AbstractIncrementalTestCollection, CoverageDetails, ICallProfileRunHandler, IFileCoverage, ISerializedTestResults, IStartControllerTests, IStartControllerTestsResult, ITestErrorMessage, ITestItem, ITestItemContext, ITestMessageMenuArgs, IncrementalChangeCollector, IncrementalTestCollectionItem, InternalTestItem, TestResultState, TestRunProfileBitset, TestsDiff, TestsDiffOp, isStartControllerTests } from 'vs/workbench/contrib/testing/common/testTypes';\nimport { checkProposedApiEnabled } from 'vs/workbench/services/extensions/common/extensions';\nimport type * as vscode from 'vscode';\n\ninterface ControllerInfo {\n\tcontroller: vscode.TestController;\n\tprofiles: Map<number, vscode.TestRunProfile>;\n\tcollection: ExtHostTestItemCollection;\n\textension: Readonly<IRelaxedExtensionDescription>;\n}\n\nexport class ExtHostTesting implements ExtHostTestingShape {\n\tprivate readonly resultsChangedEmitter = new Emitter<void>();\n\tprivate readonly controllers = new Map</* controller ID */ string, ControllerInfo>();\n\tprivate readonly proxy: MainThreadTestingShape;\n\tprivate readonly runTracker: TestRunCoordinator;\n\tprivate readonly observer: TestObservers;\n\n\tpublic onResultsChanged = this.resultsChangedEmitter.event;\n\tpublic results: ReadonlyArray<vscode.TestRunResult> = [];\n\n\tconstructor(\n\t\t@IExtHostRpcService rpc: IExtHostRpcService,\n\t\tcommands: ExtHostCommands,\n\t\tprivate readonly editors: ExtHostDocumentsAndEditors,\n\t) {\n\t\tthis.proxy = rpc.getProxy(MainContext.MainThreadTesting);\n\t\tthis.observer = new TestObservers(this.proxy);\n\t\tthis.runTracker = new TestRunCoordinator(this.proxy);\n\n\t\tcommands.registerArgumentProcessor({\n\t\t\tprocessArgument: arg => {\n\t\t\t\tswitch (arg?.$mid) {\n\t\t\t\t\tcase MarshalledId.TestItemContext: {\n\t\t\t\t\t\tconst cast = arg as ITestItemContext;\n\t\t\t\t\t\tconst targetTest = cast.tests[cast.tests.length - 1].item.extId;\n\t\t\t\t\t\tconst controller = this.controllers.get(TestId.root(targetTest));\n\t\t\t\t\t\treturn controller?.collection.tree.get(targetTest)?.actual ?? toItemFromContext(arg);\n\t\t\t\t\t}\n\t\t\t\t\tcase MarshalledId.TestMessageMenuArgs: {\n\t\t\t\t\t\tconst { extId, message } = arg as ITestMessageMenuArgs;\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttest: this.controllers.get(TestId.root(extId))?.collection.tree.get(extId)?.actual,\n\t\t\t\t\t\t\tmessage: Convert.TestMessage.to(message as ITestErrorMessage.Serialized),\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\t\t\t\t\tdefault: return arg;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tcommands.registerCommand(false, 'testing.getExplorerSelection', async (): Promise<any> => {\n\t\t\tconst inner = await commands.executeCommand<{\n\t\t\t\tinclude: string[];\n\t\t\t\texclude: string[];\n\t\t\t}>(TestCommandId.GetExplorerSelection);\n\n\t\t\tconst lookup = (i: string) => {\n\t\t\t\tconst controller = this.controllers.get(TestId.root(i));\n\t\t\t\tif (!controller) { return undefined; }\n\t\t\t\treturn TestId.isRoot(i) ? controller.controller : controller.collection.tree.get(i)?.actual;\n\t\t\t};\n\n\t\t\treturn {\n\t\t\t\tinclude: inner?.include.map(lookup).filter(isDefined) || [],\n\t\t\t\texclude: inner?.exclude.map(lookup).filter(isDefined) || [],\n\t\t\t};\n\t\t});\n\t}\n\n\t/**\n\t * Implements vscode.test.registerTestProvider\n\t */\n\tpublic createTestController(extension: IExtensionDescription, controllerId: string, label: string, refreshHandler?: (token: CancellationToken) => Thenable<void> | void): vscode.TestController {\n\t\tif (this.controllers.has(controllerId)) {\n\t\t\tthrow new Error(`Attempt to insert a duplicate controller with ID \"${controllerId}\"`);\n\t\t}\n\n\t\tconst disposable = new DisposableStore();\n\t\tconst collection = disposable.add(new ExtHostTestItemCollection(controllerId, label, this.editors));\n\t\tcollection.root.label = label;\n\n\t\tconst profiles = new Map<number, vscode.TestRunProfile>();\n\t\tconst proxy = this.proxy;\n\n\t\tconst controller: vscode.TestController = {\n\t\t\titems: collection.root.children,\n\t\t\tget label() {\n\t\t\t\treturn label;\n\t\t\t},\n\t\t\tset label(value: string) {\n\t\t\t\tlabel = value;\n\t\t\t\tcollection.root.label = value;\n\t\t\t\tproxy.$updateController(controllerId, { label });\n\t\t\t},\n\t\t\tget refreshHandler() {\n\t\t\t\treturn refreshHandler;\n\t\t\t},\n\t\t\tset refreshHandler(value: ((token: CancellationToken) => Thenable<void> | void) | undefined) {\n\t\t\t\trefreshHandler = value;\n\t\t\t\tproxy.$updateController(controllerId, { canRefresh: !!value });\n\t\t\t},\n\t\t\tget id() {\n\t\t\t\treturn controllerId;\n\t\t\t},\n\t\t\tcreateRunProfile: (label, group, runHandler, isDefault, tag?: vscode.TestTag | undefined, supportsContinuousRun?: boolean) => {\n\t\t\t\t// Derive the profile ID from a hash so that the same profile will tend\n\t\t\t\t// to have the same hashes, allowing re-run requests to work across reloads.\n\t\t\t\tlet profileId = hash(label);\n\t\t\t\twhile (profiles.has(profileId)) {\n\t\t\t\t\tprofileId++;\n\t\t\t\t}\n\n\t\t\t\treturn new TestRunProfileImpl(this.proxy, profiles, controllerId, profileId, label, group, runHandler, isDefault, tag, supportsContinuousRun);\n\t\t\t},\n\t\t\tcreateTestItem(id, label, uri) {\n\t\t\t\treturn new TestItemImpl(controllerId, id, label, uri);\n\t\t\t},\n\t\t\tcreateTestRun: (request, name, persist = true) => {\n\t\t\t\treturn this.runTracker.createTestRun(extension, controllerId, collection, request, name, persist);\n\t\t\t},\n\t\t\tinvalidateTestResults: items => {\n\t\t\t\tif (items === undefined) {\n\t\t\t\t\tthis.proxy.$markTestRetired(undefined);\n\t\t\t\t} else {\n\t\t\t\t\tconst itemsArr = items instanceof Array ? items : [items];\n\t\t\t\t\tthis.proxy.$markTestRetired(itemsArr.map(i => TestId.fromExtHostTestItem(i!, controllerId).toString()));\n\t\t\t\t}\n\t\t\t},\n\t\t\tset resolveHandler(fn) {\n\t\t\t\tcollection.resolveHandler = fn;\n\t\t\t},\n\t\t\tget resolveHandler() {\n\t\t\t\treturn collection.resolveHandler as undefined | ((item?: vscode.TestItem) => void);\n\t\t\t},\n\t\t\tdispose: () => {\n\t\t\t\tdisposable.dispose();\n\t\t\t},\n\t\t};\n\n\t\tproxy.$registerTestController(controllerId, label, !!refreshHandler);\n\t\tdisposable.add(toDisposable(() => proxy.$unregisterTestController(controllerId)));\n\n\t\tconst info: ControllerInfo = { controller, collection, profiles: profiles, extension };\n\t\tthis.controllers.set(controllerId, info);\n\t\tdisposable.add(toDisposable(() => this.controllers.delete(controllerId)));\n\n\t\tdisposable.add(collection.onDidGenerateDiff(diff => proxy.$publishDiff(controllerId, diff.map(TestsDiffOp.serialize))));\n\n\t\treturn controller;\n\t}\n\n\t/**\n\t * Implements vscode.test.createTestObserver\n\t */\n\tpublic createTestObserver() {\n\t\treturn this.observer.checkout();\n\t}\n\n\n\t/**\n\t * Implements vscode.test.runTests\n\t */\n\tpublic async runTests(req: vscode.TestRunRequest, token = CancellationToken.None) {\n\t\tconst profile = tryGetProfileFromTestRunReq(req);\n\t\tif (!profile) {\n\t\t\tthrow new Error('The request passed to `vscode.test.runTests` must include a profile');\n\t\t}\n\n\t\tconst controller = this.controllers.get(profile.controllerId);\n\t\tif (!controller) {\n\t\t\tthrow new Error('Controller not found');\n\t\t}\n\n\t\tawait this.proxy.$runTests({\n\t\t\tisUiTriggered: false,\n\t\t\ttargets: [{\n\t\t\t\ttestIds: req.include?.map(t => TestId.fromExtHostTestItem(t, controller.collection.root.id).toString()) ?? [controller.collection.root.id],\n\t\t\t\tprofileGroup: profileGroupToBitset[profile.kind],\n\t\t\t\tprofileId: profile.profileId,\n\t\t\t\tcontrollerId: profile.controllerId,\n\t\t\t}],\n\t\t\texclude: req.exclude?.map(t => t.id),\n\t\t}, token);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$syncTests(): Promise<void> {\n\t\tfor (const { collection } of this.controllers.values()) {\n\t\t\tcollection.flushDiff();\n\t\t}\n\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$provideFileCoverage(runId: string, taskId: string, token: CancellationToken): Promise<IFileCoverage[]> {\n\t\tconst coverage = mapFindFirst(this.runTracker.trackers, t => t.id === runId ? t.getCoverage(taskId) : undefined);\n\t\treturn coverage?.provideFileCoverage(token) ?? Promise.resolve([]);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$resolveFileCoverage(runId: string, taskId: string, fileIndex: number, token: CancellationToken): Promise<CoverageDetails[]> {\n\t\tconst coverage = mapFindFirst(this.runTracker.trackers, t => t.id === runId ? t.getCoverage(taskId) : undefined);\n\t\treturn coverage?.resolveFileCoverage(fileIndex, token) ?? Promise.resolve([]);\n\t}\n\n\t/** @inheritdoc */\n\t$configureRunProfile(controllerId: string, profileId: number) {\n\t\tthis.controllers.get(controllerId)?.profiles.get(profileId)?.configureHandler?.();\n\t}\n\n\t/** @inheritdoc */\n\tasync $refreshTests(controllerId: string, token: CancellationToken) {\n\t\tawait this.controllers.get(controllerId)?.controller.refreshHandler?.(token);\n\t}\n\n\t/**\n\t * Updates test results shown to extensions.\n\t * @override\n\t */\n\tpublic $publishTestResults(results: ISerializedTestResults[]): void {\n\t\tthis.results = Object.freeze(\n\t\t\tresults\n\t\t\t\t.map(r => deepFreeze(Convert.TestResults.to(r)))\n\t\t\t\t.concat(this.results)\n\t\t\t\t.sort((a, b) => b.completedAt - a.completedAt)\n\t\t\t\t.slice(0, 32),\n\t\t);\n\n\t\tthis.resultsChangedEmitter.fire();\n\t}\n\n\t/**\n\t * Expands the nodes in the test tree. If levels is less than zero, it will\n\t * be treated as infinite.\n\t */\n\tpublic async $expandTest(testId: string, levels: number) {\n\t\tconst collection = this.controllers.get(TestId.fromString(testId).controllerId)?.collection;\n\t\tif (collection) {\n\t\t\tawait collection.expand(testId, levels < 0 ? Infinity : levels);\n\t\t\tcollection.flushDiff();\n\t\t}\n\t}\n\n\t/**\n\t * Receives a test update from the main thread. Called (eventually) whenever\n\t * tests change.\n\t */\n\tpublic $acceptDiff(diff: TestsDiffOp.Serialized[]): void {\n\t\tthis.observer.applyDiff(diff.map(TestsDiffOp.deserialize));\n\t}\n\n\t/**\n\t * Runs tests with the given set of IDs. Allows for test from multiple\n\t * providers to be run.\n\t * @inheritdoc\n\t */\n\tpublic async $runControllerTests(reqs: IStartControllerTests[], token: CancellationToken): Promise<IStartControllerTestsResult[]> {\n\t\treturn Promise.all(reqs.map(req => this.runControllerTestRequest(req, false, token)));\n\t}\n\n\t/**\n\t * Starts continuous test runs with the given set of IDs. Allows for test from\n\t * multiple providers to be run.\n\t * @inheritdoc\n\t */\n\tpublic async $startContinuousRun(reqs: IStartControllerTests[], token: CancellationToken): Promise<IStartControllerTestsResult[]> {\n\t\tconst cts = new CancellationTokenSource(token);\n\t\tconst res = await Promise.all(reqs.map(req => this.runControllerTestRequest(req, true, cts.token)));\n\n\t\t// avoid returning until cancellation is requested, otherwise ipc disposes of the token\n\t\tif (!token.isCancellationRequested && !res.some(r => r.error)) {\n\t\t\tawait new Promise(r => token.onCancellationRequested(r));\n\t\t}\n\n\t\tcts.dispose(true);\n\t\treturn res;\n\t}\n\n\tprivate async runControllerTestRequest(req: ICallProfileRunHandler | ICallProfileRunHandler, isContinuous: boolean, token: CancellationToken): Promise<IStartControllerTestsResult> {\n\t\tconst lookup = this.controllers.get(req.controllerId);\n\t\tif (!lookup) {\n\t\t\treturn {};\n\t\t}\n\n\t\tconst { collection, profiles, extension } = lookup;\n\t\tconst profile = profiles.get(req.profileId);\n\t\tif (!profile) {\n\t\t\treturn {};\n\t\t}\n\n\t\tconst includeTests = req.testIds\n\t\t\t.map((testId) => collection.tree.get(testId))\n\t\t\t.filter(isDefined);\n\n\t\tconst excludeTests = req.excludeExtIds\n\t\t\t.map(id => lookup.collection.tree.get(id))\n\t\t\t.filter(isDefined)\n\t\t\t.filter(exclude => includeTests.some(\n\t\t\t\tinclude => include.fullId.compare(exclude.fullId) === TestPosition.IsChild,\n\t\t\t));\n\n\t\tif (!includeTests.length) {\n\t\t\treturn {};\n\t\t}\n\n\t\tconst publicReq = new TestRunRequest(\n\t\t\tincludeTests.some(i => i.actual instanceof TestItemRootImpl) ? undefined : includeTests.map(t => t.actual),\n\t\t\texcludeTests.map(t => t.actual),\n\t\t\tprofile,\n\t\t\tisContinuous,\n\t\t);\n\n\t\tconst tracker = isStartControllerTests(req) && this.runTracker.prepareForMainThreadTestRun(\n\t\t\tpublicReq,\n\t\t\tTestRunDto.fromInternal(req, lookup.collection),\n\t\t\textension,\n\t\t\ttoken,\n\t\t);\n\n\t\ttry {\n\t\t\tawait profile.runHandler(publicReq, token);\n\t\t\treturn {};\n\t\t} catch (e) {\n\t\t\treturn { error: String(e) };\n\t\t} finally {\n\t\t\tif (tracker) {\n\t\t\t\tif (tracker.hasRunningTasks && !token.isCancellationRequested) {\n\t\t\t\t\tawait Event.toPromise(tracker.onEnd);\n\t\t\t\t}\n\n\t\t\t\ttracker.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Cancels an ongoing test run.\n\t */\n\tpublic $cancelExtensionTestRun(runId: string | undefined) {\n\t\tif (runId === undefined) {\n\t\t\tthis.runTracker.cancelAllRuns();\n\t\t} else {\n\t\t\tthis.runTracker.cancelRunById(runId);\n\t\t}\n\t}\n}\n\n// Deadline after being requested by a user that a test run is forcibly cancelled.\nconst RUN_CANCEL_DEADLINE = 10_000;\n\nconst enum TestRunTrackerState {\n\t// Default state\n\tRunning,\n\t// Cancellation is requested, but the run is still going.\n\tCancelling,\n\t// All tasks have ended\n\tEnded,\n}\n\nclass TestRunTracker extends Disposable {\n\tprivate state = TestRunTrackerState.Running;\n\tprivate readonly tasks = new Map</* task ID */string, { run: vscode.TestRun; coverage: TestRunCoverageBearer }>();\n\tprivate readonly sharedTestIds = new Set<string>();\n\tprivate readonly cts: CancellationTokenSource;\n\tprivate readonly endEmitter = this._register(new Emitter<void>());\n\n\t/**\n\t * Fires when a test ends, and no more tests are left running.\n\t */\n\tpublic readonly onEnd = this.endEmitter.event;\n\n\t/**\n\t * Gets whether there are any tests running.\n\t */\n\tpublic get hasRunningTasks() {\n\t\treturn this.tasks.size > 0;\n\t}\n\n\t/**\n\t * Gets the run ID.\n\t */\n\tpublic get id() {\n\t\treturn this.dto.id;\n\t}\n\n\tconstructor(\n\t\tprivate readonly dto: TestRunDto,\n\t\tprivate readonly proxy: MainThreadTestingShape,\n\t\tprivate readonly extension: Readonly<IRelaxedExtensionDescription>,\n\t\tparentToken?: CancellationToken,\n\t) {\n\t\tsuper();\n\t\tthis.cts = this._register(new CancellationTokenSource(parentToken));\n\n\t\tconst forciblyEnd = this._register(new RunOnceScheduler(() => this.forciblyEndTasks(), RUN_CANCEL_DEADLINE));\n\t\tthis._register(this.cts.token.onCancellationRequested(() => forciblyEnd.schedule()));\n\t}\n\n\t/** Requests cancellation of the run. On the second call, forces cancellation. */\n\tpublic cancel() {\n\t\tif (this.state === TestRunTrackerState.Running) {\n\t\t\tthis.cts.cancel();\n\t\t\tthis.state = TestRunTrackerState.Cancelling;\n\t\t} else if (this.state === TestRunTrackerState.Cancelling) {\n\t\t\tthis.forciblyEndTasks();\n\t\t}\n\t}\n\n\t/** Gets coverage for a task ID. */\n\tpublic getCoverage(taskId: string) {\n\t\treturn this.tasks.get(taskId)?.coverage;\n\t}\n\n\t/** Creates the public test run interface to give to extensions. */\n\tpublic createRun(name: string | undefined): vscode.TestRun {\n\t\tconst runId = this.dto.id;\n\t\tconst ctrlId = this.dto.controllerId;\n\t\tconst taskId = generateUuid();\n\t\tconst coverage = new TestRunCoverageBearer(this.proxy, runId, taskId);\n\n\t\tconst guardTestMutation = <Args extends unknown[]>(fn: (test: vscode.TestItem, ...args: Args) => void) =>\n\t\t\t(test: vscode.TestItem, ...args: Args) => {\n\t\t\t\tif (ended) {\n\t\t\t\t\tconsole.warn(`Setting the state of test \"${test.id}\" is a no-op after the run ends.`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!this.dto.isIncluded(test)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tthis.ensureTestIsKnown(test);\n\t\t\t\tfn(test, ...args);\n\t\t\t};\n\n\t\tconst appendMessages = (test: vscode.TestItem, messages: vscode.TestMessage | readonly vscode.TestMessage[]) => {\n\t\t\tconst converted = messages instanceof Array\n\t\t\t\t? messages.map(Convert.TestMessage.from)\n\t\t\t\t: [Convert.TestMessage.from(messages)];\n\n\t\t\tif (converted.some(c => c.contextValue !== undefined)) {\n\t\t\t\tcheckProposedApiEnabled(this.extension, 'testMessageContextValue');\n\t\t\t}\n\n\t\t\tif (test.uri && test.range) {\n\t\t\t\tconst defaultLocation: ILocationDto = { range: Convert.Range.from(test.range), uri: test.uri };\n\t\t\t\tfor (const message of converted) {\n\t\t\t\t\tmessage.location = message.location || defaultLocation;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.proxy.$appendTestMessagesInRun(runId, taskId, TestId.fromExtHostTestItem(test, ctrlId).toString(), converted);\n\t\t};\n\n\t\tlet ended = false;\n\t\tconst run: vscode.TestRun = {\n\t\t\tisPersisted: this.dto.isPersisted,\n\t\t\ttoken: this.cts.token,\n\t\t\tname,\n\t\t\tget coverageProvider() {\n\t\t\t\treturn coverage.coverageProvider;\n\t\t\t},\n\t\t\tset coverageProvider(provider) {\n\t\t\t\tcoverage.coverageProvider = provider;\n\t\t\t},\n\t\t\t//#region state mutation\n\t\t\tenqueued: guardTestMutation(test => {\n\t\t\t\tthis.proxy.$updateTestStateInRun(runId, taskId, TestId.fromExtHostTestItem(test, ctrlId).toString(), TestResultState.Queued);\n\t\t\t}),\n\t\t\tskipped: guardTestMutation(test => {\n\t\t\t\tthis.proxy.$updateTestStateInRun(runId, taskId, TestId.fromExtHostTestItem(test, ctrlId).toString(), TestResultState.Skipped);\n\t\t\t}),\n\t\t\tstarted: guardTestMutation(test => {\n\t\t\t\tthis.proxy.$updateTestStateInRun(runId, taskId, TestId.fromExtHostTestItem(test, ctrlId).toString(), TestResultState.Running);\n\t\t\t}),\n\t\t\terrored: guardTestMutation((test, messages, duration) => {\n\t\t\t\tappendMessages(test, messages);\n\t\t\t\tthis.proxy.$updateTestStateInRun(runId, taskId, TestId.fromExtHostTestItem(test, ctrlId).toString(), TestResultState.Errored, duration);\n\t\t\t}),\n\t\t\tfailed: guardTestMutation((test, messages, duration) => {\n\t\t\t\tappendMessages(test, messages);\n\t\t\t\tthis.proxy.$updateTestStateInRun(runId, taskId, TestId.fromExtHostTestItem(test, ctrlId).toString(), TestResultState.Failed, duration);\n\t\t\t}),\n\t\t\tpassed: guardTestMutation((test, duration) => {\n\t\t\t\tthis.proxy.$updateTestStateInRun(runId, taskId, TestId.fromExtHostTestItem(test, this.dto.controllerId).toString(), TestResultState.Passed, duration);\n\t\t\t}),\n\t\t\t//#endregion\n\t\t\tappendOutput: (output, location?: vscode.Location, test?: vscode.TestItem) => {\n\t\t\t\tif (ended) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (test) {\n\t\t\t\t\tif (this.dto.isIncluded(test)) {\n\t\t\t\t\t\tthis.ensureTestIsKnown(test);\n\t\t\t\t\t} else {\n\t\t\t\t\t\ttest = undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.proxy.$appendOutputToRun(\n\t\t\t\t\trunId,\n\t\t\t\t\ttaskId,\n\t\t\t\t\tVSBuffer.fromString(output),\n\t\t\t\t\tlocation && Convert.location.from(location),\n\t\t\t\t\ttest && TestId.fromExtHostTestItem(test, ctrlId).toString(),\n\t\t\t\t);\n\t\t\t},\n\t\t\tend: () => {\n\t\t\t\tif (ended) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tended = true;\n\t\t\t\tthis.proxy.$finishedTestRunTask(runId, taskId);\n\t\t\t\tthis.tasks.delete(taskId);\n\t\t\t\tif (!this.tasks.size) {\n\t\t\t\t\tthis.markEnded();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.tasks.set(taskId, { run, coverage });\n\t\tthis.proxy.$startedTestRunTask(runId, { id: taskId, name, running: true });\n\n\t\treturn run;\n\t}\n\n\tprivate forciblyEndTasks() {\n\t\tfor (const { run } of this.tasks.values()) {\n\t\t\trun.end();\n\t\t}\n\t}\n\n\tprivate markEnded() {\n\t\tif (this.state !== TestRunTrackerState.Ended) {\n\t\t\tthis.state = TestRunTrackerState.Ended;\n\t\t\tthis.endEmitter.fire();\n\t\t}\n\t}\n\n\tprivate ensureTestIsKnown(test: vscode.TestItem) {\n\t\tif (!(test instanceof TestItemImpl)) {\n\t\t\tthrow new InvalidTestItemError(test.id);\n\t\t}\n\n\t\tif (this.sharedTestIds.has(TestId.fromExtHostTestItem(test, this.dto.controllerId).toString())) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst chain: ITestItem.Serialized[] = [];\n\t\tconst root = this.dto.colllection.root;\n\t\twhile (true) {\n\t\t\tconst converted = Convert.TestItem.from(test as TestItemImpl);\n\t\t\tchain.unshift(converted);\n\n\t\t\tif (this.sharedTestIds.has(converted.extId)) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tthis.sharedTestIds.add(converted.extId);\n\t\t\tif (test === root) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\ttest = test.parent || root;\n\t\t}\n\n\t\tthis.proxy.$addTestsToRun(this.dto.controllerId, this.dto.id, chain);\n\t}\n\n\tpublic override dispose(): void {\n\t\tthis.markEnded();\n\t\tsuper.dispose();\n\t}\n}\n\n/**\n * Queues runs for a single extension and provides the currently-executing\n * run so that `createTestRun` can be properly correlated.\n */\nexport class TestRunCoordinator {\n\tprivate tracked = new Map<vscode.TestRunRequest, TestRunTracker>();\n\n\tpublic get trackers() {\n\t\treturn this.tracked.values();\n\t}\n\n\tconstructor(private readonly proxy: MainThreadTestingShape) { }\n\n\t/**\n\t * Registers a request as being invoked by the main thread, so\n\t * `$startedExtensionTestRun` is not invoked. The run must eventually\n\t * be cancelled manually.\n\t */\n\tpublic prepareForMainThreadTestRun(req: vscode.TestRunRequest, dto: TestRunDto, extension: Readonly<IRelaxedExtensionDescription>, token: CancellationToken) {\n\t\treturn this.getTracker(req, dto, extension, token);\n\t}\n\n\t/**\n\t * Cancels an existing test run via its cancellation token.\n\t */\n\tpublic cancelRunById(runId: string) {\n\t\tfor (const tracker of this.tracked.values()) {\n\t\t\tif (tracker.id === runId) {\n\t\t\t\ttracker.cancel();\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Cancels an existing test run via its cancellation token.\n\t */\n\tpublic cancelAllRuns() {\n\t\tfor (const tracker of this.tracked.values()) {\n\t\t\ttracker.cancel();\n\t\t}\n\t}\n\n\n\t/**\n\t * Implements the public `createTestRun` API.\n\t */\n\tpublic createTestRun(extension: IRelaxedExtensionDescription, controllerId: string, collection: ExtHostTestItemCollection, request: vscode.TestRunRequest, name: string | undefined, persist: boolean): vscode.TestRun {\n\t\tconst existing = this.tracked.get(request);\n\t\tif (existing) {\n\t\t\treturn existing.createRun(name);\n\t\t}\n\n\t\t// If there is not an existing tracked extension for the request, start\n\t\t// a new, detached session.\n\t\tconst dto = TestRunDto.fromPublic(controllerId, collection, request, persist);\n\t\tconst profile = tryGetProfileFromTestRunReq(request);\n\t\tthis.proxy.$startedExtensionTestRun({\n\t\t\tcontrollerId,\n\t\t\tcontinuous: !!request.continuous,\n\t\t\tprofile: profile && { group: profileGroupToBitset[profile.kind], id: profile.profileId },\n\t\t\texclude: request.exclude?.map(t => TestId.fromExtHostTestItem(t, collection.root.id).toString()) ?? [],\n\t\t\tid: dto.id,\n\t\t\tinclude: request.include?.map(t => TestId.fromExtHostTestItem(t, collection.root.id).toString()) ?? [collection.root.id],\n\t\t\tpersist\n\t\t});\n\n\t\tconst tracker = this.getTracker(request, dto, extension);\n\t\tEvent.once(tracker.onEnd)(() => {\n\t\t\tthis.proxy.$finishedExtensionTestRun(dto.id);\n\t\t\ttracker.dispose();\n\t\t});\n\n\t\treturn tracker.createRun(name);\n\t}\n\n\tprivate getTracker(req: vscode.TestRunRequest, dto: TestRunDto, extension: IRelaxedExtensionDescription, token?: CancellationToken) {\n\t\tconst tracker = new TestRunTracker(dto, this.proxy, extension, token);\n\t\tthis.tracked.set(req, tracker);\n\t\tEvent.once(tracker.onEnd)(() => this.tracked.delete(req));\n\t\treturn tracker;\n\t}\n}\n\nconst tryGetProfileFromTestRunReq = (request: vscode.TestRunRequest) => {\n\tif (!request.profile) {\n\t\treturn undefined;\n\t}\n\n\tif (!(request.profile instanceof TestRunProfileImpl)) {\n\t\tthrow new Error(`TestRunRequest.profile is not an instance created from TestController.createRunProfile`);\n\t}\n\n\treturn request.profile;\n};\n\nexport class TestRunDto {\n\tprivate readonly includePrefix: string[];\n\tprivate readonly excludePrefix: string[];\n\n\tpublic static fromPublic(controllerId: string, collection: ExtHostTestItemCollection, request: vscode.TestRunRequest, persist: boolean) {\n\t\treturn new TestRunDto(\n\t\t\tcontrollerId,\n\t\t\tgenerateUuid(),\n\t\t\trequest.include?.map(t => TestId.fromExtHostTestItem(t, controllerId).toString()) ?? [controllerId],\n\t\t\trequest.exclude?.map(t => TestId.fromExtHostTestItem(t, controllerId).toString()) ?? [],\n\t\t\tpersist,\n\t\t\tcollection,\n\t\t);\n\t}\n\n\tpublic static fromInternal(request: IStartControllerTests, collection: ExtHostTestItemCollection) {\n\t\treturn new TestRunDto(\n\t\t\trequest.controllerId,\n\t\t\trequest.runId,\n\t\t\trequest.testIds,\n\t\t\trequest.excludeExtIds,\n\t\t\ttrue,\n\t\t\tcollection,\n\t\t);\n\t}\n\n\tconstructor(\n\t\tpublic readonly controllerId: string,\n\t\tpublic readonly id: string,\n\t\tinclude: string[],\n\t\texclude: string[],\n\t\tpublic readonly isPersisted: boolean,\n\t\tpublic readonly colllection: ExtHostTestItemCollection,\n\t) {\n\t\tthis.includePrefix = include.map(id => id + TestIdPathParts.Delimiter);\n\t\tthis.excludePrefix = exclude.map(id => id + TestIdPathParts.Delimiter);\n\t}\n\n\tpublic isIncluded(test: vscode.TestItem) {\n\t\tconst id = TestId.fromExtHostTestItem(test, this.controllerId).toString() + TestIdPathParts.Delimiter;\n\t\tfor (const prefix of this.excludePrefix) {\n\t\t\tif (id === prefix || id.startsWith(prefix)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (const prefix of this.includePrefix) {\n\t\t\tif (id === prefix || id.startsWith(prefix)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\nclass TestRunCoverageBearer {\n\tprivate _coverageProvider?: vscode.TestCoverageProvider;\n\tprivate fileCoverage?: Promise<vscode.FileCoverage[] | null | undefined>;\n\n\tpublic set coverageProvider(provider: vscode.TestCoverageProvider | undefined) {\n\t\tif (this._coverageProvider) {\n\t\t\tthrow new Error('The TestCoverageProvider cannot be replaced after being provided');\n\t\t}\n\n\t\tif (!provider) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._coverageProvider = provider;\n\t\tthis.proxy.$signalCoverageAvailable(this.runId, this.taskId);\n\t}\n\n\tpublic get coverageProvider() {\n\t\treturn this._coverageProvider;\n\t}\n\n\tconstructor(\n\t\tprivate readonly proxy: MainThreadTestingShape,\n\t\tprivate readonly runId: string,\n\t\tprivate readonly taskId: string,\n\t) {\n\t}\n\n\tpublic async provideFileCoverage(token: CancellationToken): Promise<IFileCoverage[]> {\n\t\tif (!this._coverageProvider) {\n\t\t\treturn [];\n\t\t}\n\n\t\tif (!this.fileCoverage) {\n\t\t\tthis.fileCoverage = (async () => this._coverageProvider!.provideFileCoverage(token))();\n\t\t}\n\n\t\ttry {\n\t\t\tconst coverage = await this.fileCoverage;\n\t\t\treturn coverage?.map(Convert.TestCoverage.fromFile) ?? [];\n\t\t} catch (e) {\n\t\t\tthis.fileCoverage = undefined;\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tpublic async resolveFileCoverage(index: number, token: CancellationToken): Promise<CoverageDetails[]> {\n\t\tconst fileCoverage = await this.fileCoverage;\n\t\tlet file = fileCoverage?.[index];\n\t\tif (!this._coverageProvider || !fileCoverage || !file) {\n\t\t\treturn [];\n\t\t}\n\n\t\tif (!file.detailedCoverage) {\n\t\t\tfile = fileCoverage[index] = await this._coverageProvider.resolveFileCoverage?.(file, token) ?? file;\n\t\t}\n\n\t\treturn file.detailedCoverage?.map(Convert.TestCoverage.fromDetailed) ?? [];\n\t}\n}\n\n/**\n * @private\n */\ninterface MirroredCollectionTestItem extends IncrementalTestCollectionItem {\n\trevived: vscode.TestItem;\n\tdepth: number;\n}\n\nclass MirroredChangeCollector implements IncrementalChangeCollector<MirroredCollectionTestItem> {\n\tprivate readonly added = new Set<MirroredCollectionTestItem>();\n\tprivate readonly updated = new Set<MirroredCollectionTestItem>();\n\tprivate readonly removed = new Set<MirroredCollectionTestItem>();\n\n\tprivate readonly alreadyRemoved = new Set<string>();\n\n\tpublic get isEmpty() {\n\t\treturn this.added.size === 0 && this.removed.size === 0 && this.updated.size === 0;\n\t}\n\n\tconstructor(private readonly emitter: Emitter<vscode.TestsChangeEvent>) {\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic add(node: MirroredCollectionTestItem): void {\n\t\tthis.added.add(node);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic update(node: MirroredCollectionTestItem): void {\n\t\tObject.assign(node.revived, Convert.TestItem.toPlain(node.item));\n\t\tif (!this.added.has(node)) {\n\t\t\tthis.updated.add(node);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic remove(node: MirroredCollectionTestItem): void {\n\t\tif (this.added.has(node)) {\n\t\t\tthis.added.delete(node);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.updated.delete(node);\n\n\t\tconst parentId = TestId.parentId(node.item.extId);\n\t\tif (parentId && this.alreadyRemoved.has(parentId.toString())) {\n\t\t\tthis.alreadyRemoved.add(node.item.extId);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.removed.add(node);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic getChangeEvent(): vscode.TestsChangeEvent {\n\t\tconst { added, updated, removed } = this;\n\t\treturn {\n\t\t\tget added() { return [...added].map(n => n.revived); },\n\t\t\tget updated() { return [...updated].map(n => n.revived); },\n\t\t\tget removed() { return [...removed].map(n => n.revived); },\n\t\t};\n\t}\n\n\tpublic complete() {\n\t\tif (!this.isEmpty) {\n\t\t\tthis.emitter.fire(this.getChangeEvent());\n\t\t}\n\t}\n}\n\n/**\n * Maintains tests in this extension host sent from the main thread.\n * @private\n */\nclass MirroredTestCollection extends AbstractIncrementalTestCollection<MirroredCollectionTestItem> {\n\tprivate changeEmitter = new Emitter<vscode.TestsChangeEvent>();\n\n\t/**\n\t * Change emitter that fires with the same semantics as `TestObserver.onDidChangeTests`.\n\t */\n\tpublic readonly onDidChangeTests = this.changeEmitter.event;\n\n\t/**\n\t * Gets a list of root test items.\n\t */\n\tpublic get rootTests() {\n\t\treturn super.roots;\n\t}\n\n\t/**\n\t *\n\t * If the test ID exists, returns its underlying ID.\n\t */\n\tpublic getMirroredTestDataById(itemId: string) {\n\t\treturn this.items.get(itemId);\n\t}\n\n\t/**\n\t * If the test item is a mirrored test item, returns its underlying ID.\n\t */\n\tpublic getMirroredTestDataByReference(item: vscode.TestItem) {\n\t\treturn this.items.get(item.id);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected createItem(item: InternalTestItem, parent?: MirroredCollectionTestItem): MirroredCollectionTestItem {\n\t\treturn {\n\t\t\t...item,\n\t\t\t// todo@connor4312: make this work well again with children\n\t\t\trevived: Convert.TestItem.toPlain(item.item) as vscode.TestItem,\n\t\t\tdepth: parent ? parent.depth + 1 : 0,\n\t\t\tchildren: new Set(),\n\t\t};\n\t}\n\n\t/**\n\t * @override\n\t */\n\tprotected override createChangeCollector() {\n\t\treturn new MirroredChangeCollector(this.changeEmitter);\n\t}\n}\n\nclass TestObservers {\n\tprivate current?: {\n\t\tobservers: number;\n\t\ttests: MirroredTestCollection;\n\t};\n\n\tconstructor(private readonly proxy: MainThreadTestingShape) {\n\t}\n\n\tpublic checkout(): vscode.TestObserver {\n\t\tif (!this.current) {\n\t\t\tthis.current = this.createObserverData();\n\t\t}\n\n\t\tconst current = this.current;\n\t\tcurrent.observers++;\n\n\t\treturn {\n\t\t\tonDidChangeTest: current.tests.onDidChangeTests,\n\t\t\tget tests() { return [...current.tests.rootTests].map(t => t.revived); },\n\t\t\tdispose: once(() => {\n\t\t\t\tif (--current.observers === 0) {\n\t\t\t\t\tthis.proxy.$unsubscribeFromDiffs();\n\t\t\t\t\tthis.current = undefined;\n\t\t\t\t}\n\t\t\t}),\n\t\t};\n\t}\n\n\t/**\n\t * Gets the internal test data by its reference.\n\t */\n\tpublic getMirroredTestDataByReference(ref: vscode.TestItem) {\n\t\treturn this.current?.tests.getMirroredTestDataByReference(ref);\n\t}\n\n\t/**\n\t * Applies test diffs to the current set of observed tests.\n\t */\n\tpublic applyDiff(diff: TestsDiff) {\n\t\tthis.current?.tests.apply(diff);\n\t}\n\n\tprivate createObserverData() {\n\t\tconst tests = new MirroredTestCollection();\n\t\tthis.proxy.$subscribeToDiffs();\n\t\treturn { observers: 0, tests, };\n\t}\n}\n\nexport class TestRunProfileImpl implements vscode.TestRunProfile {\n\treadonly #proxy: MainThreadTestingShape;\n\t#profiles?: Map<number, vscode.TestRunProfile>;\n\tprivate _configureHandler?: (() => void);\n\n\tpublic get label() {\n\t\treturn this._label;\n\t}\n\n\tpublic set label(label: string) {\n\t\tif (label !== this._label) {\n\t\t\tthis._label = label;\n\t\t\tthis.#proxy.$updateTestRunConfig(this.controllerId, this.profileId, { label });\n\t\t}\n\t}\n\n\tpublic get supportsContinuousRun() {\n\t\treturn this._supportsContinuousRun;\n\t}\n\n\tpublic set supportsContinuousRun(supports: boolean) {\n\t\tif (supports !== this._supportsContinuousRun) {\n\t\t\tthis._supportsContinuousRun = supports;\n\t\t\tthis.#proxy.$updateTestRunConfig(this.controllerId, this.profileId, { supportsContinuousRun: supports });\n\t\t}\n\t}\n\n\tpublic get isDefault() {\n\t\treturn this._isDefault;\n\t}\n\n\tpublic set isDefault(isDefault: boolean) {\n\t\tif (isDefault !== this._isDefault) {\n\t\t\tthis._isDefault = isDefault;\n\t\t\tthis.#proxy.$updateTestRunConfig(this.controllerId, this.profileId, { isDefault });\n\t\t}\n\t}\n\n\tpublic get tag() {\n\t\treturn this._tag;\n\t}\n\n\tpublic set tag(tag: vscode.TestTag | undefined) {\n\t\tif (tag?.id !== this._tag?.id) {\n\t\t\tthis._tag = tag;\n\t\t\tthis.#proxy.$updateTestRunConfig(this.controllerId, this.profileId, {\n\t\t\t\ttag: tag ? Convert.TestTag.namespace(this.controllerId, tag.id) : null,\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic get configureHandler() {\n\t\treturn this._configureHandler;\n\t}\n\n\tpublic set configureHandler(handler: undefined | (() => void)) {\n\t\tif (handler !== this._configureHandler) {\n\t\t\tthis._configureHandler = handler;\n\t\t\tthis.#proxy.$updateTestRunConfig(this.controllerId, this.profileId, { hasConfigurationHandler: !!handler });\n\t\t}\n\t}\n\n\tconstructor(\n\t\tproxy: MainThreadTestingShape,\n\t\tprofiles: Map<number, vscode.TestRunProfile>,\n\t\tpublic readonly controllerId: string,\n\t\tpublic readonly profileId: number,\n\t\tprivate _label: string,\n\t\tpublic readonly kind: vscode.TestRunProfileKind,\n\t\tpublic runHandler: (request: vscode.TestRunRequest, token: vscode.CancellationToken) => Thenable<void> | void,\n\t\tprivate _isDefault = false,\n\t\tpublic _tag: vscode.TestTag | undefined = undefined,\n\t\tprivate _supportsContinuousRun = false,\n\t) {\n\t\tthis.#proxy = proxy;\n\t\tthis.#profiles = profiles;\n\t\tprofiles.set(profileId, this);\n\n\t\tconst groupBitset = profileGroupToBitset[kind];\n\t\tif (typeof groupBitset !== 'number') {\n\t\t\tthrow new Error(`Unknown TestRunProfile.group ${kind}`);\n\t\t}\n\n\t\tthis.#proxy.$publishTestRunProfile({\n\t\t\tprofileId: profileId,\n\t\t\tcontrollerId,\n\t\t\ttag: _tag ? Convert.TestTag.namespace(this.controllerId, _tag.id) : null,\n\t\t\tlabel: _label,\n\t\t\tgroup: groupBitset,\n\t\t\tisDefault: _isDefault,\n\t\t\thasConfigurationHandler: false,\n\t\t\tsupportsContinuousRun: _supportsContinuousRun,\n\t\t});\n\t}\n\n\tdispose(): void {\n\t\tif (this.#profiles?.delete(this.profileId)) {\n\t\t\tthis.#profiles = undefined;\n\t\t\tthis.#proxy.$removeTestProfile(this.controllerId, this.profileId);\n\t\t}\n\t}\n}\n\nconst profileGroupToBitset: { [K in TestRunProfileKind]: TestRunProfileBitset } = {\n\t[TestRunProfileKind.Coverage]: TestRunProfileBitset.Coverage,\n\t[TestRunProfileKind.Debug]: TestRunProfileBitset.Debug,\n\t[TestRunProfileKind.Run]: TestRunProfileBitset.Run,\n};\n"]}