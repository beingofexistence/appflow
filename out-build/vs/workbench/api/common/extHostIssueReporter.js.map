{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostIssueReporter.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAShG,MAAa,IAAI;QAKhB,YACC,WAAyB;YALlB,MAAC,GAA+D,IAAI,GAAG,EAAE,CAAC;YAOjF,IAAI,CAAC,CAAC,GAAQ,WAAW,CAAC,QAAQ,CAAC,sBAAG,CAAS,uBAAuB,CAAC,CAAC;QACzE,CAAC;QAED,KAAK,CAAC,oBAAoB,CAAC,WAAmB,EAAE,KAAwB;YACvE,IAAI,IAAI,CAAC,CAAC,CAAwB,IAAI,KAAK,CAAC,EAAE;gBAC7C,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;aACxD;YAED,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAwB,GAAG,CAAC,WAAW,CAAC,CAAC;YAChE,IAAI,CAAC,QAAQ,EAAE;gBACd,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC;aACnD;YAED,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,qBAAqB,EAAE,CAAC;YACtD,IAAI,CAAC,MAAM,EAAE;gBACZ,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;aAC5D;YACD,OAAO,MAAM,CAAC;QACf,CAAC;QAED,8BAA8B,CAAC,SAAgC,EAAE,QAAgC;YAChG,MAAM,WAAW,GAAG,SAAS,CAAC,UAAU,CAAC,KAAK,CAAC;YAC/C,IAAI,CAAC,CAAC,CAAwB,GAAG,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;YACzD,IAAI,CAAC,CAAC,CAAM,+BAA+B,CAAC,WAAW,CAAC,CAAC;YACzD,OAAO,IAAI,kBAAG,CAAQ,GAAG,EAAE;gBAC1B,IAAI,CAAC,CAAC,CAAM,iCAAiC,CAAC,WAAW,CAAC,CAAC;gBAC3D,IAAI,CAAC,CAAC,CAAwB,MAAM,CAAC,WAAW,CAAC,CAAC;YACnD,CAAC,CAAC,CAAC;QACJ,CAAC;KACD;IArCD,oBAqCC","file":"extHostIssueReporter.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IssueUriRequestHandler } from 'vscode';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { UriComponents } from 'vs/base/common/uri';\nimport { ExtHostIssueReporterShape, IMainContext, MainContext, MainThreadIssueReporterShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { Disposable } from 'vs/workbench/api/common/extHostTypes';\n\nexport class ExtHostIssueReporter implements ExtHostIssueReporterShape {\n\tprivate _IssueUriRequestHandlers: Map<string, IssueUriRequestHandler> = new Map();\n\n\tprivate readonly _proxy: MainThreadIssueReporterShape;\n\n\tconstructor(\n\t\tmainContext: IMainContext\n\t) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadIssueReporter);\n\t}\n\n\tasync $getIssueReporterUri(extensionId: string, token: CancellationToken): Promise<UriComponents> {\n\t\tif (this._IssueUriRequestHandlers.size === 0) {\n\t\t\tthrow new Error('No issue request handlers registered');\n\t\t}\n\n\t\tconst provider = this._IssueUriRequestHandlers.get(extensionId);\n\t\tif (!provider) {\n\t\t\tthrow new Error('Issue request handler not found');\n\t\t}\n\n\t\tconst result = await provider.handleIssueUrlRequest();\n\t\tif (!result) {\n\t\t\tthrow new Error('Issue request handler returned no result');\n\t\t}\n\t\treturn result;\n\t}\n\n\tregisterIssueUriRequestHandler(extension: IExtensionDescription, provider: IssueUriRequestHandler): Disposable {\n\t\tconst extensionId = extension.identifier.value;\n\t\tthis._IssueUriRequestHandlers.set(extensionId, provider);\n\t\tthis._proxy.$registerIssueUriRequestHandler(extensionId);\n\t\treturn new Disposable(() => {\n\t\t\tthis._proxy.$unregisterIssueUriRequestHandler(extensionId);\n\t\t\tthis._IssueUriRequestHandlers.delete(extensionId);\n\t\t});\n\t}\n}\n"]}