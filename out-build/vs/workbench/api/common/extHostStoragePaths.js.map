{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostStoragePaths.ts"],"names":[],"mappings":"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","file":"extHostStoragePaths.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IExtHostInitDataService } from 'vs/workbench/api/common/extHostInitDataService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IEnvironment, IStaticWorkspaceData } from 'vs/workbench/services/extensions/common/extensionHostProtocol';\nimport { IExtHostConsumerFileSystem } from 'vs/workbench/api/common/extHostFileSystemConsumer';\nimport { URI } from 'vs/base/common/uri';\n\nexport const IExtensionStoragePaths = createDecorator<IExtensionStoragePaths>('IExtensionStoragePaths');\n\nexport interface IExtensionStoragePaths {\n\treadonly _serviceBrand: undefined;\n\twhenReady: Promise<any>;\n\tworkspaceValue(extension: IExtensionDescription): URI | undefined;\n\tglobalValue(extension: IExtensionDescription): URI;\n\tonWillDeactivateAll(): void;\n}\n\nexport class ExtensionStoragePaths implements IExtensionStoragePaths {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly _workspace?: IStaticWorkspaceData;\n\tprotected readonly _environment: IEnvironment;\n\n\treadonly whenReady: Promise<URI | undefined>;\n\tprivate _value?: URI;\n\n\tconstructor(\n\t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n\t\t@ILogService protected readonly _logService: ILogService,\n\t\t@IExtHostConsumerFileSystem private readonly _extHostFileSystem: IExtHostConsumerFileSystem\n\t) {\n\t\tthis._workspace = initData.workspace ?? undefined;\n\t\tthis._environment = initData.environment;\n\t\tthis.whenReady = this._getOrCreateWorkspaceStoragePath().then(value => this._value = value);\n\t}\n\n\tprotected async _getWorkspaceStorageURI(storageName: string): Promise<URI> {\n\t\treturn URI.joinPath(this._environment.workspaceStorageHome, storageName);\n\t}\n\n\tprivate async _getOrCreateWorkspaceStoragePath(): Promise<URI | undefined> {\n\t\tif (!this._workspace) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\t\tconst storageName = this._workspace.id;\n\t\tconst storageUri = await this._getWorkspaceStorageURI(storageName);\n\n\t\ttry {\n\t\t\tawait this._extHostFileSystem.value.stat(storageUri);\n\t\t\tthis._logService.trace('[ExtHostStorage] storage dir already exists', storageUri);\n\t\t\treturn storageUri;\n\t\t} catch {\n\t\t\t// doesn't exist, that's OK\n\t\t}\n\n\t\ttry {\n\t\t\tthis._logService.trace('[ExtHostStorage] creating dir and metadata-file', storageUri);\n\t\t\tawait this._extHostFileSystem.value.createDirectory(storageUri);\n\t\t\tawait this._extHostFileSystem.value.writeFile(\n\t\t\t\tURI.joinPath(storageUri, 'meta.json'),\n\t\t\t\tnew TextEncoder().encode(JSON.stringify({\n\t\t\t\t\tid: this._workspace.id,\n\t\t\t\t\tconfiguration: URI.revive(this._workspace.configuration)?.toString(),\n\t\t\t\t\tname: this._workspace.name\n\t\t\t\t}, undefined, 2))\n\t\t\t);\n\t\t\treturn storageUri;\n\n\t\t} catch (e) {\n\t\t\tthis._logService.error('[ExtHostStorage]', e);\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tworkspaceValue(extension: IExtensionDescription): URI | undefined {\n\t\tif (this._value) {\n\t\t\treturn URI.joinPath(this._value, extension.identifier.value);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tglobalValue(extension: IExtensionDescription): URI {\n\t\treturn URI.joinPath(this._environment.globalStorageHome, extension.identifier.value.toLowerCase());\n\t}\n\n\tonWillDeactivateAll(): void {\n\t}\n}\n"]}