{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostLocalizationService.ts"],"names":[],"mappings":"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","file":"extHostLocalizationService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { LANGUAGE_DEFAULT } from 'vs/base/common/platform';\nimport { format2 } from 'vs/base/common/strings';\nimport { URI } from 'vs/base/common/uri';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ExtHostLocalizationShape, IStringDetails, MainContext, MainThreadLocalizationShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { IExtHostInitDataService } from 'vs/workbench/api/common/extHostInitDataService';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\n\nexport class ExtHostLocalizationService implements ExtHostLocalizationShape {\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly _proxy: MainThreadLocalizationShape;\n\tprivate readonly currentLanguage: string;\n\tprivate readonly isDefaultLanguage: boolean;\n\n\tprivate readonly bundleCache: Map<string, { contents: { [key: string]: string }; uri: URI }> = new Map();\n\n\tconstructor(\n\t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n\t\t@IExtHostRpcService rpc: IExtHostRpcService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tthis._proxy = rpc.getProxy(MainContext.MainThreadLocalization);\n\t\tthis.currentLanguage = initData.environment.appLanguage;\n\t\tthis.isDefaultLanguage = this.currentLanguage === LANGUAGE_DEFAULT;\n\t}\n\n\tgetMessage(extensionId: string, details: IStringDetails): string {\n\t\tconst { message, args, comment } = details;\n\t\tif (this.isDefaultLanguage) {\n\t\t\treturn format2(message, (args ?? {}));\n\t\t}\n\n\t\tlet key = message;\n\t\tif (comment && comment.length > 0) {\n\t\t\tkey += `/${Array.isArray(comment) ? comment.join('') : comment}`;\n\t\t}\n\t\tconst str = this.bundleCache.get(extensionId)?.contents[key];\n\t\tif (!str) {\n\t\t\tthis.logService.warn(`Using default string since no string found in i18n bundle that has the key: ${key}`);\n\t\t}\n\t\treturn format2(str ?? message, (args ?? {}));\n\t}\n\n\tgetBundle(extensionId: string): { [key: string]: string } | undefined {\n\t\treturn this.bundleCache.get(extensionId)?.contents;\n\t}\n\n\tgetBundleUri(extensionId: string): URI | undefined {\n\t\treturn this.bundleCache.get(extensionId)?.uri;\n\t}\n\n\tasync initializeLocalizedMessages(extension: IExtensionDescription): Promise<void> {\n\t\tif (this.isDefaultLanguage\n\t\t\t|| (!extension.l10n && !extension.isBuiltin)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.bundleCache.has(extension.identifier.value)) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet contents: { [key: string]: string } | undefined;\n\t\tconst bundleUri = await this.getBundleLocation(extension);\n\t\tif (!bundleUri) {\n\t\t\tthis.logService.error(`No bundle location found for extension ${extension.identifier.value}`);\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst response = await this._proxy.$fetchBundleContents(bundleUri);\n\t\t\tconst result = JSON.parse(response);\n\t\t\t// 'contents.bundle' is a well-known key in the language pack json file that contains the _code_ translations for the extension\n\t\t\tcontents = extension.isBuiltin ? result.contents?.bundle : result;\n\t\t} catch (e) {\n\t\t\tthis.logService.error(`Failed to load translations for ${extension.identifier.value} from ${bundleUri}: ${e.message}`);\n\t\t\treturn;\n\t\t}\n\n\t\tif (contents) {\n\t\t\tthis.bundleCache.set(extension.identifier.value, {\n\t\t\t\tcontents,\n\t\t\t\turi: bundleUri\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate async getBundleLocation(extension: IExtensionDescription): Promise<URI | undefined> {\n\t\tif (extension.isBuiltin) {\n\t\t\tconst uri = await this._proxy.$fetchBuiltInBundleUri(extension.identifier.value, this.currentLanguage);\n\t\t\treturn URI.revive(uri);\n\t\t}\n\n\t\treturn extension.l10n\n\t\t\t? URI.joinPath(extension.extensionLocation, extension.l10n, `bundle.l10n.${this.currentLanguage}.json`)\n\t\t\t: undefined;\n\t}\n}\n\nexport const IExtHostLocalizationService = createDecorator<IExtHostLocalizationService>('IExtHostLocalizationService');\nexport interface IExtHostLocalizationService extends ExtHostLocalizationService { }\n"]}