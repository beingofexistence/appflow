{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostEmbeddingVector.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAOhG,MAAa,IAAI;QAMhB,YACC,WAAyB;YANlB,MAAC,GAAmE,IAAI,GAAG,EAAE,CAAC;YAC9E,MAAC,GAAa,CAAC,CAAC;YAOvB,IAAI,CAAC,CAAC,GAAQ,WAAW,CAAC,QAAQ,CAAC,sBAAG,CAAS,2BAA2B,CAAC,CAAC;QAC7E,CAAC;QAED,KAAK,CAAC,yBAAyB,CAAC,MAAc,EAAE,OAAiB,EAAE,KAAwB;YAC1F,IAAI,IAAI,CAAC,CAAC,CAA2B,IAAI,KAAK,CAAC,EAAE;gBAChD,MAAM,IAAI,KAAK,CAAC,0CAA0C,CAAC,CAAC;aAC5D;YAED,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAA2B,GAAG,CAAC,MAAM,CAAC,CAAC;YAC9D,IAAI,CAAC,QAAQ,EAAE;gBACd,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,CAAC;aACvD;YAED,MAAM,MAAM,GAAG,MAAM,QAAQ,CAAC,sBAAsB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;YACrE,IAAI,CAAC,MAAM,EAAE;gBACZ,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;aAChE;YACD,OAAO,MAAM,CAAC;QACf,CAAC;QAED,+BAA+B,CAAC,SAAgC,EAAE,KAAa,EAAE,QAAiC;YACjH,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAW;YAChC,IAAI,CAAC,CAAC,EAAY,CAAC;YACnB,IAAI,CAAC,CAAC,CAA2B,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YACvD,IAAI,CAAC,CAAC,CAAM,kCAAkC,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YAC9D,OAAO,IAAI,kBAAG,CAAQ,GAAG,EAAE;gBAC1B,IAAI,CAAC,CAAC,CAAM,oCAAoC,CAAC,MAAM,CAAC,CAAC;gBACzD,IAAI,CAAC,CAAC,CAA2B,MAAM,CAAC,MAAM,CAAC,CAAC;YACjD,CAAC,CAAC,CAAC;QACJ,CAAC;KACD;IAvCD,oBAuCC","file":"extHostEmbeddingVector.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { ExtHostAiEmbeddingVectorShape, IMainContext, MainContext, MainThreadAiEmbeddingVectorShape } from 'vs/workbench/api/common/extHost.protocol';\nimport type { CancellationToken, EmbeddingVectorProvider } from 'vscode';\nimport { Disposable } from 'vs/workbench/api/common/extHostTypes';\n\nexport class ExtHostAiEmbeddingVector implements ExtHostAiEmbeddingVectorShape {\n\tprivate _AiEmbeddingVectorProviders: Map<number, EmbeddingVectorProvider> = new Map();\n\tprivate _nextHandle = 0;\n\n\tprivate readonly _proxy: MainThreadAiEmbeddingVectorShape;\n\n\tconstructor(\n\t\tmainContext: IMainContext\n\t) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadAiEmbeddingVector);\n\t}\n\n\tasync $provideAiEmbeddingVector(handle: number, strings: string[], token: CancellationToken): Promise<number[][]> {\n\t\tif (this._AiEmbeddingVectorProviders.size === 0) {\n\t\t\tthrow new Error('No embedding vector providers registered');\n\t\t}\n\n\t\tconst provider = this._AiEmbeddingVectorProviders.get(handle);\n\t\tif (!provider) {\n\t\t\tthrow new Error('Embedding vector provider not found');\n\t\t}\n\n\t\tconst result = await provider.provideEmbeddingVector(strings, token);\n\t\tif (!result) {\n\t\t\tthrow new Error('Embedding vector provider returned undefined');\n\t\t}\n\t\treturn result;\n\t}\n\n\tregisterEmbeddingVectorProvider(extension: IExtensionDescription, model: string, provider: EmbeddingVectorProvider): Disposable {\n\t\tconst handle = this._nextHandle;\n\t\tthis._nextHandle++;\n\t\tthis._AiEmbeddingVectorProviders.set(handle, provider);\n\t\tthis._proxy.$registerAiEmbeddingVectorProvider(model, handle);\n\t\treturn new Disposable(() => {\n\t\t\tthis._proxy.$unregisterAiEmbeddingVectorProvider(handle);\n\t\t\tthis._AiEmbeddingVectorProviders.delete(handle);\n\t\t});\n\t}\n}\n"]}