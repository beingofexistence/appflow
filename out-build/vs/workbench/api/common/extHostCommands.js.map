{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostCommands.ts"],"names":[],"mappings":"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","file":"extHostCommands.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/* eslint-disable local/code-no-native-private */\n\nimport { validateConstraint } from 'vs/base/common/types';\nimport { ICommandHandlerDescription } from 'vs/platform/commands/common/commands';\nimport * as extHostTypes from 'vs/workbench/api/common/extHostTypes';\nimport * as extHostTypeConverter from 'vs/workbench/api/common/extHostTypeConverters';\nimport { cloneAndChange } from 'vs/base/common/objects';\nimport { MainContext, MainThreadCommandsShape, ExtHostCommandsShape, ICommandDto, ICommandHandlerDescriptionDto, MainThreadTelemetryShape } from './extHost.protocol';\nimport { isNonEmptyArray } from 'vs/base/common/arrays';\nimport * as languages from 'vs/editor/common/languages';\nimport type * as vscode from 'vscode';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { revive } from 'vs/base/common/marshalling';\nimport { IRange, Range } from 'vs/editor/common/core/range';\nimport { IPosition, Position } from 'vs/editor/common/core/position';\nimport { URI } from 'vs/base/common/uri';\nimport { DisposableStore, toDisposable } from 'vs/base/common/lifecycle';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { ISelection } from 'vs/editor/common/core/selection';\nimport { TestItemImpl } from 'vs/workbench/api/common/extHostTestItem';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { SerializableObjectWithBuffers } from 'vs/workbench/services/extensions/common/proxyIdentifier';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { StopWatch } from 'vs/base/common/stopwatch';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { TelemetryTrustedValue } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { IExtHostTelemetry } from 'vs/workbench/api/common/extHostTelemetry';\n\ninterface CommandHandler {\n\tcallback: Function;\n\tthisArg: any;\n\tdescription?: ICommandHandlerDescription;\n\textension?: IExtensionDescription;\n}\n\nexport interface ArgumentProcessor {\n\tprocessArgument(arg: any, extensionId: ExtensionIdentifier | undefined): any;\n}\n\nexport class ExtHostCommands implements ExtHostCommandsShape {\n\n\treadonly _serviceBrand: undefined;\n\n\t#proxy: MainThreadCommandsShape;\n\n\tprivate readonly _commands = new Map<string, CommandHandler>();\n\tprivate readonly _apiCommands = new Map<string, ApiCommand>();\n\t#telemetry: MainThreadTelemetryShape;\n\n\tprivate readonly _logService: ILogService;\n\treadonly #extHostTelemetry: IExtHostTelemetry;\n\tprivate readonly _argumentProcessors: ArgumentProcessor[];\n\n\treadonly converter: CommandsConverter;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@ILogService logService: ILogService,\n\t\t@IExtHostTelemetry extHostTelemetry: IExtHostTelemetry\n\t) {\n\t\tthis.#proxy = extHostRpc.getProxy(MainContext.MainThreadCommands);\n\t\tthis._logService = logService;\n\t\tthis.#extHostTelemetry = extHostTelemetry;\n\t\tthis.#telemetry = extHostRpc.getProxy(MainContext.MainThreadTelemetry);\n\t\tthis.converter = new CommandsConverter(\n\t\t\tthis,\n\t\t\tid => {\n\t\t\t\t// API commands that have no return type (void) can be\n\t\t\t\t// converted to their internal command and don't need\n\t\t\t\t// any indirection commands\n\t\t\t\tconst candidate = this._apiCommands.get(id);\n\t\t\t\treturn candidate?.result === ApiCommandResult.Void\n\t\t\t\t\t? candidate : undefined;\n\t\t\t},\n\t\t\tlogService\n\t\t);\n\t\tthis._argumentProcessors = [\n\t\t\t{\n\t\t\t\tprocessArgument(a) {\n\t\t\t\t\t// URI, Regex\n\t\t\t\t\treturn revive(a);\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tprocessArgument(arg) {\n\t\t\t\t\treturn cloneAndChange(arg, function (obj) {\n\t\t\t\t\t\t// Reverse of https://github.com/microsoft/vscode/blob/1f28c5fc681f4c01226460b6d1c7e91b8acb4a5b/src/vs/workbench/api/node/extHostCommands.ts#L112-L127\n\t\t\t\t\t\tif (Range.isIRange(obj)) {\n\t\t\t\t\t\t\treturn extHostTypeConverter.Range.to(obj);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (Position.isIPosition(obj)) {\n\t\t\t\t\t\t\treturn extHostTypeConverter.Position.to(obj);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (Range.isIRange((obj as languages.Location).range) && URI.isUri((obj as languages.Location).uri)) {\n\t\t\t\t\t\t\treturn extHostTypeConverter.location.to(obj);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (obj instanceof VSBuffer) {\n\t\t\t\t\t\t\treturn obj.buffer.buffer;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!Array.isArray(obj)) {\n\t\t\t\t\t\t\treturn obj;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t}\n\n\tregisterArgumentProcessor(processor: ArgumentProcessor): void {\n\t\tthis._argumentProcessors.push(processor);\n\t}\n\n\tregisterApiCommand(apiCommand: ApiCommand): extHostTypes.Disposable {\n\n\n\t\tconst registration = this.registerCommand(false, apiCommand.id, async (...apiArgs) => {\n\n\t\t\tconst internalArgs = apiCommand.args.map((arg, i) => {\n\t\t\t\tif (!arg.validate(apiArgs[i])) {\n\t\t\t\t\tthrow new Error(`Invalid argument '${arg.name}' when running '${apiCommand.id}', received: ${apiArgs[i]}`);\n\t\t\t\t}\n\t\t\t\treturn arg.convert(apiArgs[i]);\n\t\t\t});\n\n\t\t\tconst internalResult = await this.executeCommand(apiCommand.internalId, ...internalArgs);\n\t\t\treturn apiCommand.result.convert(internalResult, apiArgs, this.converter);\n\t\t}, undefined, {\n\t\t\tdescription: apiCommand.description,\n\t\t\targs: apiCommand.args,\n\t\t\treturns: apiCommand.result.description\n\t\t});\n\n\t\tthis._apiCommands.set(apiCommand.id, apiCommand);\n\n\t\treturn new extHostTypes.Disposable(() => {\n\t\t\tregistration.dispose();\n\t\t\tthis._apiCommands.delete(apiCommand.id);\n\t\t});\n\t}\n\n\tregisterCommand(global: boolean, id: string, callback: <T>(...args: any[]) => T | Thenable<T>, thisArg?: any, description?: ICommandHandlerDescription, extension?: IExtensionDescription): extHostTypes.Disposable {\n\t\tthis._logService.trace('ExtHostCommands#registerCommand', id);\n\n\t\tif (!id.trim().length) {\n\t\t\tthrow new Error('invalid id');\n\t\t}\n\n\t\tif (this._commands.has(id)) {\n\t\t\tthrow new Error(`command '${id}' already exists`);\n\t\t}\n\n\t\tthis._commands.set(id, { callback, thisArg, description, extension });\n\t\tif (global) {\n\t\t\tthis.#proxy.$registerCommand(id);\n\t\t}\n\n\t\treturn new extHostTypes.Disposable(() => {\n\t\t\tif (this._commands.delete(id)) {\n\t\t\t\tif (global) {\n\t\t\t\t\tthis.#proxy.$unregisterCommand(id);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\texecuteCommand<T>(id: string, ...args: any[]): Promise<T> {\n\t\tthis._logService.trace('ExtHostCommands#executeCommand', id);\n\t\treturn this._doExecuteCommand(id, args, true);\n\t}\n\n\tprivate async _doExecuteCommand<T>(id: string, args: any[], retry: boolean): Promise<T> {\n\n\t\tif (this._commands.has(id)) {\n\t\t\t// - We stay inside the extension host and support\n\t\t\t// \t to pass any kind of parameters around.\n\t\t\t// - We still emit the corresponding activation event\n\t\t\t//   BUT we don't await that event\n\t\t\tthis.#proxy.$fireCommandActivationEvent(id);\n\t\t\treturn this._executeContributedCommand<T>(id, args, false);\n\n\t\t} else {\n\t\t\t// automagically convert some argument types\n\t\t\tlet hasBuffers = false;\n\t\t\tconst toArgs = cloneAndChange(args, function (value) {\n\t\t\t\tif (value instanceof extHostTypes.Position) {\n\t\t\t\t\treturn extHostTypeConverter.Position.from(value);\n\t\t\t\t} else if (value instanceof extHostTypes.Range) {\n\t\t\t\t\treturn extHostTypeConverter.Range.from(value);\n\t\t\t\t} else if (value instanceof extHostTypes.Location) {\n\t\t\t\t\treturn extHostTypeConverter.location.from(value);\n\t\t\t\t} else if (extHostTypes.NotebookRange.isNotebookRange(value)) {\n\t\t\t\t\treturn extHostTypeConverter.NotebookRange.from(value);\n\t\t\t\t} else if (value instanceof ArrayBuffer) {\n\t\t\t\t\thasBuffers = true;\n\t\t\t\t\treturn VSBuffer.wrap(new Uint8Array(value));\n\t\t\t\t} else if (value instanceof Uint8Array) {\n\t\t\t\t\thasBuffers = true;\n\t\t\t\t\treturn VSBuffer.wrap(value);\n\t\t\t\t} else if (value instanceof VSBuffer) {\n\t\t\t\t\thasBuffers = true;\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t\tif (!Array.isArray(value)) {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\ttry {\n\t\t\t\tconst result = await this.#proxy.$executeCommand(id, hasBuffers ? new SerializableObjectWithBuffers(toArgs) : toArgs, retry);\n\t\t\t\treturn revive<any>(result);\n\t\t\t} catch (e) {\n\t\t\t\t// Rerun the command when it wasn't known, had arguments, and when retry\n\t\t\t\t// is enabled. We do this because the command might be registered inside\n\t\t\t\t// the extension host now and can therefore accept the arguments as-is.\n\t\t\t\tif (e instanceof Error && e.message === '$executeCommand:retry') {\n\t\t\t\t\treturn this._doExecuteCommand(id, args, false);\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async _executeContributedCommand<T = unknown>(id: string, args: any[], annotateError: boolean): Promise<T> {\n\t\tconst command = this._commands.get(id);\n\t\tif (!command) {\n\t\t\tthrow new Error('Unknown command');\n\t\t}\n\t\tconst { callback, thisArg, description } = command;\n\t\tif (description) {\n\t\t\tfor (let i = 0; i < description.args.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tvalidateConstraint(args[i], description.args[i].constraint);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tthrow new Error(`Running the contributed command: '${id}' failed. Illegal argument '${description.args[i].name}' - ${description.args[i].description}`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst stopWatch = StopWatch.create();\n\t\ttry {\n\t\t\treturn await callback.apply(thisArg, args);\n\t\t} catch (err) {\n\t\t\t// The indirection-command from the converter can fail when invoking the actual\n\t\t\t// command and in that case it is better to blame the correct command\n\t\t\tif (id === this.converter.delegatingCommandId) {\n\t\t\t\tconst actual = this.converter.getActualCommand(...args);\n\t\t\t\tif (actual) {\n\t\t\t\t\tid = actual.command;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._logService.error(err, id, command.extension?.identifier);\n\n\t\t\tif (!annotateError) {\n\t\t\t\tthrow err;\n\t\t\t}\n\n\t\t\tif (command.extension?.identifier) {\n\t\t\t\tconst reported = this.#extHostTelemetry.onExtensionError(command.extension.identifier, err);\n\t\t\t\tthis._logService.trace('forwarded error to extension?', reported, command.extension?.identifier);\n\t\t\t}\n\n\t\t\tthrow new class CommandError extends Error {\n\t\t\t\treadonly id = id;\n\t\t\t\treadonly source = command!.extension?.displayName ?? command!.extension?.name;\n\t\t\t\tconstructor() {\n\t\t\t\t\tsuper(toErrorMessage(err));\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t\tfinally {\n\t\t\tthis._reportTelemetry(command, id, stopWatch.elapsed());\n\t\t}\n\t}\n\n\tprivate _reportTelemetry(command: CommandHandler, id: string, duration: number) {\n\t\tif (!command.extension) {\n\t\t\treturn;\n\t\t}\n\t\ttype ExtensionActionTelemetry = {\n\t\t\textensionId: string;\n\t\t\tid: TelemetryTrustedValue<string>;\n\t\t\tduration: number;\n\t\t};\n\t\ttype ExtensionActionTelemetryMeta = {\n\t\t\textensionId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The id of the extension handling the command, informing which extensions provide most-used functionality.' };\n\t\t\tid: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The id of the command, to understand which specific extension features are most popular.' };\n\t\t\tduration: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'The duration of the command execution, to detect performance issues' };\n\t\t\towner: 'digitarald';\n\t\t\tcomment: 'Used to gain insight on the most popular commands used from extensions';\n\t\t};\n\t\tthis.#telemetry.$publicLog2<ExtensionActionTelemetry, ExtensionActionTelemetryMeta>('Extension:ActionExecuted', {\n\t\t\textensionId: command.extension.identifier.value,\n\t\t\tid: new TelemetryTrustedValue(id),\n\t\t\tduration: duration,\n\t\t});\n\t}\n\n\t$executeContributedCommand(id: string, ...args: any[]): Promise<unknown> {\n\t\tthis._logService.trace('ExtHostCommands#$executeContributedCommand', id);\n\n\t\tconst cmdHandler = this._commands.get(id);\n\t\tif (!cmdHandler) {\n\t\t\treturn Promise.reject(new Error(`Contributed command '${id}' does not exist.`));\n\t\t} else {\n\t\t\targs = args.map(arg => this._argumentProcessors.reduce((r, p) => p.processArgument(r, cmdHandler.extension?.identifier), arg));\n\t\t\treturn this._executeContributedCommand(id, args, true);\n\t\t}\n\t}\n\n\tgetCommands(filterUnderscoreCommands: boolean = false): Promise<string[]> {\n\t\tthis._logService.trace('ExtHostCommands#getCommands', filterUnderscoreCommands);\n\n\t\treturn this.#proxy.$getCommands().then(result => {\n\t\t\tif (filterUnderscoreCommands) {\n\t\t\t\tresult = result.filter(command => command[0] !== '_');\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\t}\n\n\t$getContributedCommandHandlerDescriptions(): Promise<{ [id: string]: string | ICommandHandlerDescriptionDto }> {\n\t\tconst result: { [id: string]: string | ICommandHandlerDescription } = Object.create(null);\n\t\tfor (const [id, command] of this._commands) {\n\t\t\tconst { description } = command;\n\t\t\tif (description) {\n\t\t\t\tresult[id] = description;\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve(result);\n\t}\n}\n\nexport interface IExtHostCommands extends ExtHostCommands { }\nexport const IExtHostCommands = createDecorator<IExtHostCommands>('IExtHostCommands');\n\nexport class CommandsConverter implements extHostTypeConverter.Command.ICommandsConverter {\n\n\treadonly delegatingCommandId: string = `__vsc${Date.now().toString(36)}`;\n\tprivate readonly _cache = new Map<string, vscode.Command>();\n\tprivate _cachIdPool = 0;\n\n\t// --- conversion between internal and api commands\n\tconstructor(\n\t\tprivate readonly _commands: ExtHostCommands,\n\t\tprivate readonly _lookupApiCommand: (id: string) => ApiCommand | undefined,\n\t\tprivate readonly _logService: ILogService\n\t) {\n\t\tthis._commands.registerCommand(true, this.delegatingCommandId, this._executeConvertedCommand, this);\n\t}\n\n\ttoInternal(command: vscode.Command, disposables: DisposableStore): ICommandDto;\n\ttoInternal(command: vscode.Command | undefined, disposables: DisposableStore): ICommandDto | undefined;\n\ttoInternal(command: vscode.Command | undefined, disposables: DisposableStore): ICommandDto | undefined {\n\n\t\tif (!command) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst result: ICommandDto = {\n\t\t\t$ident: undefined,\n\t\t\tid: command.command,\n\t\t\ttitle: command.title,\n\t\t\ttooltip: command.tooltip\n\t\t};\n\n\t\tif (!command.command) {\n\t\t\t// falsy command id -> return converted command but don't attempt any\n\t\t\t// argument or API-command dance since this command won't run anyways\n\t\t\treturn result;\n\t\t}\n\n\t\tconst apiCommand = this._lookupApiCommand(command.command);\n\t\tif (apiCommand) {\n\t\t\t// API command with return-value can be converted inplace\n\t\t\tresult.id = apiCommand.internalId;\n\t\t\tresult.arguments = apiCommand.args.map((arg, i) => arg.convert(command.arguments && command.arguments[i]));\n\n\n\t\t} else if (isNonEmptyArray(command.arguments)) {\n\t\t\t// we have a contributed command with arguments. that\n\t\t\t// means we don't want to send the arguments around\n\n\t\t\tconst id = `${command.command}/${++this._cachIdPool}`;\n\t\t\tthis._cache.set(id, command);\n\t\t\tdisposables.add(toDisposable(() => {\n\t\t\t\tthis._cache.delete(id);\n\t\t\t\tthis._logService.trace('CommandsConverter#DISPOSE', id);\n\t\t\t}));\n\t\t\tresult.$ident = id;\n\n\t\t\tresult.id = this.delegatingCommandId;\n\t\t\tresult.arguments = [id];\n\n\t\t\tthis._logService.trace('CommandsConverter#CREATE', command.command, id);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tfromInternal(command: ICommandDto): vscode.Command | undefined {\n\n\t\tif (typeof command.$ident === 'string') {\n\t\t\treturn this._cache.get(command.$ident);\n\n\t\t} else {\n\t\t\treturn {\n\t\t\t\tcommand: command.id,\n\t\t\t\ttitle: command.title,\n\t\t\t\targuments: command.arguments\n\t\t\t};\n\t\t}\n\t}\n\n\n\tgetActualCommand(...args: any[]): vscode.Command | undefined {\n\t\treturn this._cache.get(args[0]);\n\t}\n\n\tprivate _executeConvertedCommand<R>(...args: any[]): Promise<R> {\n\t\tconst actualCmd = this.getActualCommand(...args);\n\t\tthis._logService.trace('CommandsConverter#EXECUTE', args[0], actualCmd ? actualCmd.command : 'MISSING');\n\n\t\tif (!actualCmd) {\n\t\t\treturn Promise.reject(`Actual command not found, wanted to execute ${args[0]}`);\n\t\t}\n\t\treturn this._commands.executeCommand(actualCmd.command, ...(actualCmd.arguments || []));\n\t}\n\n}\n\n\nexport class ApiCommandArgument<V, O = V> {\n\n\tstatic readonly Uri = new ApiCommandArgument<URI>('uri', 'Uri of a text document', v => URI.isUri(v), v => v);\n\tstatic readonly Position = new ApiCommandArgument<extHostTypes.Position, IPosition>('position', 'A position in a text document', v => extHostTypes.Position.isPosition(v), extHostTypeConverter.Position.from);\n\tstatic readonly Range = new ApiCommandArgument<extHostTypes.Range, IRange>('range', 'A range in a text document', v => extHostTypes.Range.isRange(v), extHostTypeConverter.Range.from);\n\tstatic readonly Selection = new ApiCommandArgument<extHostTypes.Selection, ISelection>('selection', 'A selection in a text document', v => extHostTypes.Selection.isSelection(v), extHostTypeConverter.Selection.from);\n\tstatic readonly Number = new ApiCommandArgument<number>('number', '', v => typeof v === 'number', v => v);\n\tstatic readonly String = new ApiCommandArgument<string>('string', '', v => typeof v === 'string', v => v);\n\tstatic readonly StringArray = ApiCommandArgument.Arr(ApiCommandArgument.String);\n\n\tstatic Arr<T, K = T>(element: ApiCommandArgument<T, K>) {\n\t\treturn new ApiCommandArgument(\n\t\t\t`${element.name}_array`,\n\t\t\t`Array of ${element.name}, ${element.description}`,\n\t\t\t(v: unknown) => Array.isArray(v) && v.every(e => element.validate(e)),\n\t\t\t(v: T[]) => v.map(e => element.convert(e))\n\t\t);\n\t}\n\n\tstatic readonly CallHierarchyItem = new ApiCommandArgument('item', 'A call hierarchy item', v => v instanceof extHostTypes.CallHierarchyItem, extHostTypeConverter.CallHierarchyItem.from);\n\tstatic readonly TypeHierarchyItem = new ApiCommandArgument('item', 'A type hierarchy item', v => v instanceof extHostTypes.TypeHierarchyItem, extHostTypeConverter.TypeHierarchyItem.from);\n\tstatic readonly TestItem = new ApiCommandArgument('testItem', 'A VS Code TestItem', v => v instanceof TestItemImpl, extHostTypeConverter.TestItem.from);\n\n\tconstructor(\n\t\treadonly name: string,\n\t\treadonly description: string,\n\t\treadonly validate: (v: V) => boolean,\n\t\treadonly convert: (v: V) => O\n\t) { }\n\n\toptional(): ApiCommandArgument<V | undefined | null, O | undefined | null> {\n\t\treturn new ApiCommandArgument(\n\t\t\tthis.name, `(optional) ${this.description}`,\n\t\t\tvalue => value === undefined || value === null || this.validate(value),\n\t\t\tvalue => value === undefined ? undefined : value === null ? null : this.convert(value)\n\t\t);\n\t}\n\n\twith(name: string | undefined, description: string | undefined): ApiCommandArgument<V, O> {\n\t\treturn new ApiCommandArgument(name ?? this.name, description ?? this.description, this.validate, this.convert);\n\t}\n}\n\nexport class ApiCommandResult<V, O = V> {\n\n\tstatic readonly Void = new ApiCommandResult<void, void>('no result', v => v);\n\n\tconstructor(\n\t\treadonly description: string,\n\t\treadonly convert: (v: V, apiArgs: any[], cmdConverter: CommandsConverter) => O\n\t) { }\n}\n\nexport class ApiCommand {\n\n\tconstructor(\n\t\treadonly id: string,\n\t\treadonly internalId: string,\n\t\treadonly description: string,\n\t\treadonly args: ApiCommandArgument<any, any>[],\n\t\treadonly result: ApiCommandResult<any, any>\n\t) { }\n}\n"]}