{"version":3,"sources":["vs/workbench/api/common/extHostTelemetry.ts"],"names":[],"mappings":"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","file":"extHostTelemetry.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from 'vscode';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { ExtHostTelemetryShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { ICommonProperties, TelemetryLevel } from 'vs/platform/telemetry/common/telemetry';\nimport { ILogger, ILoggerService, LogLevel, isLogLevel } from 'vs/platform/log/common/log';\nimport { IExtHostInitDataService } from 'vs/workbench/api/common/extHostInitDataService';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { UIKind } from 'vs/workbench/services/extensions/common/extensionHostProtocol';\nimport { getRemoteName } from 'vs/platform/remote/common/remoteHosts';\nimport { cleanData, cleanRemoteAuthority, extensionTelemetryLogChannelId } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { mixin } from 'vs/base/common/objects';\nimport { URI } from 'vs/base/common/uri';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { localize } from 'vs/nls';\n\nexport class ExtHostTelemetry extends Disposable implements ExtHostTelemetryShape {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeTelemetryEnabled = this._register(new Emitter<boolean>());\n\treadonly onDidChangeTelemetryEnabled: Event<boolean> = this._onDidChangeTelemetryEnabled.event;\n\n\tprivate readonly _onDidChangeTelemetryConfiguration = this._register(new Emitter<vscode.TelemetryConfiguration>());\n\treadonly onDidChangeTelemetryConfiguration: Event<vscode.TelemetryConfiguration> = this._onDidChangeTelemetryConfiguration.event;\n\n\tprivate _productConfig: { usage: boolean; error: boolean } = { usage: true, error: true };\n\tprivate _level: TelemetryLevel = TelemetryLevel.NONE;\n\t// This holds whether or not we're running with --disable-telemetry, etc. Usings supportsTelemtry() from the main thread\n\tprivate _telemetryIsSupported: boolean = false;\n\tprivate _oldTelemetryEnablement: boolean | undefined;\n\tprivate readonly _inLoggingOnlyMode: boolean = false;\n\tprivate readonly extHostTelemetryLogFile: URI;\n\tprivate readonly _outputLogger: ILogger;\n\tprivate readonly _telemetryLoggers = new Map<string, ExtHostTelemetryLogger[]>();\n\n\tconstructor(\n\t\t@IExtHostInitDataService private readonly initData: IExtHostInitDataService,\n\t\t@ILoggerService private readonly loggerService: ILoggerService,\n\t) {\n\t\tsuper();\n\t\tthis.extHostTelemetryLogFile = URI.revive(this.initData.environment.extensionTelemetryLogResource);\n\t\tthis._inLoggingOnlyMode = this.initData.environment.isExtensionTelemetryLoggingOnly;\n\t\tthis._outputLogger = loggerService.createLogger(this.extHostTelemetryLogFile, { id: extensionTelemetryLogChannelId, name: localize('extensionTelemetryLog', \"Extension Telemetry{0}\", this._inLoggingOnlyMode ? ' (Not Sent)' : ''), hidden: true });\n\t\tthis._register(loggerService.onDidChangeLogLevel(arg => {\n\t\t\tif (isLogLevel(arg)) {\n\t\t\t\tthis.updateLoggerVisibility();\n\t\t\t}\n\t\t}));\n\t\tthis._outputLogger.info('Below are logs for extension telemetry events sent to the telemetry output channel API once the log level is set to trace.');\n\t\tthis._outputLogger.info('===========================================================');\n\t}\n\n\tprivate updateLoggerVisibility(): void {\n\t\tthis.loggerService.setVisibility(this.extHostTelemetryLogFile, this._telemetryIsSupported && this.loggerService.getLogLevel() === LogLevel.Trace);\n\t}\n\n\tgetTelemetryConfiguration(): boolean {\n\t\treturn this._level === TelemetryLevel.USAGE;\n\t}\n\n\tgetTelemetryDetails(): vscode.TelemetryConfiguration {\n\t\treturn {\n\t\t\tisCrashEnabled: this._level >= TelemetryLevel.CRASH,\n\t\t\tisErrorsEnabled: this._productConfig.error ? this._level >= TelemetryLevel.ERROR : false,\n\t\t\tisUsageEnabled: this._productConfig.usage ? this._level >= TelemetryLevel.USAGE : false\n\t\t};\n\t}\n\n\tinstantiateLogger(extension: IExtensionDescription, sender: vscode.TelemetrySender, options?: vscode.TelemetryLoggerOptions) {\n\t\tconst telemetryDetails = this.getTelemetryDetails();\n\t\tconst logger = new ExtHostTelemetryLogger(\n\t\t\tsender,\n\t\t\toptions,\n\t\t\textension,\n\t\t\tthis._outputLogger,\n\t\t\tthis._inLoggingOnlyMode,\n\t\t\tthis.getBuiltInCommonProperties(extension),\n\t\t\t{ isUsageEnabled: telemetryDetails.isUsageEnabled, isErrorsEnabled: telemetryDetails.isErrorsEnabled }\n\t\t);\n\t\tconst loggers = this._telemetryLoggers.get(extension.identifier.value) ?? [];\n\t\tthis._telemetryLoggers.set(extension.identifier.value, [...loggers, logger]);\n\t\treturn logger.apiTelemetryLogger;\n\t}\n\n\t$initializeTelemetryLevel(level: TelemetryLevel, supportsTelemetry: boolean, productConfig?: { usage: boolean; error: boolean }): void {\n\t\tthis._level = level;\n\t\tthis._telemetryIsSupported = supportsTelemetry;\n\t\tthis._productConfig = productConfig ?? { usage: true, error: true };\n\t\tthis.updateLoggerVisibility();\n\t}\n\n\tgetBuiltInCommonProperties(extension: IExtensionDescription): ICommonProperties {\n\t\tconst commonProperties: ICommonProperties = Object.create(null);\n\t\t// TODO @lramos15, does os info like node arch, platform version, etc exist here.\n\t\t// Or will first party extensions just mix this in\n\t\tcommonProperties['common.extname'] = `${extension.publisher}.${extension.name}`;\n\t\tcommonProperties['common.extversion'] = extension.version;\n\t\tcommonProperties['common.vscodemachineid'] = this.initData.telemetryInfo.machineId;\n\t\tcommonProperties['common.vscodesessionid'] = this.initData.telemetryInfo.sessionId;\n\t\tcommonProperties['common.vscodeversion'] = this.initData.version;\n\t\tcommonProperties['common.isnewappinstall'] = isNewAppInstall(this.initData.telemetryInfo.firstSessionDate);\n\t\tcommonProperties['common.product'] = this.initData.environment.appHost;\n\n\t\tswitch (this.initData.uiKind) {\n\t\t\tcase UIKind.Web:\n\t\t\t\tcommonProperties['common.uikind'] = 'web';\n\t\t\t\tbreak;\n\t\t\tcase UIKind.Desktop:\n\t\t\t\tcommonProperties['common.uikind'] = 'desktop';\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tcommonProperties['common.uikind'] = 'unknown';\n\t\t}\n\n\t\tcommonProperties['common.remotename'] = getRemoteName(cleanRemoteAuthority(this.initData.remote.authority));\n\n\t\treturn commonProperties;\n\t}\n\n\t$onDidChangeTelemetryLevel(level: TelemetryLevel): void {\n\t\tthis._oldTelemetryEnablement = this.getTelemetryConfiguration();\n\t\tthis._level = level;\n\t\tconst telemetryDetails = this.getTelemetryDetails();\n\t\t// Remove all disposed loggers\n\t\tthis._telemetryLoggers.forEach((loggers, key) => {\n\t\t\tconst newLoggers = loggers.filter(l => !l.isDisposed);\n\t\t\tif (newLoggers.length === 0) {\n\t\t\t\tthis._telemetryLoggers.delete(key);\n\t\t\t} else {\n\t\t\t\tthis._telemetryLoggers.set(key, newLoggers);\n\t\t\t}\n\t\t});\n\t\t// Loop through all loggers and update their level\n\t\tthis._telemetryLoggers.forEach(loggers => {\n\t\t\tfor (const logger of loggers) {\n\t\t\t\tlogger.updateTelemetryEnablements(telemetryDetails.isUsageEnabled, telemetryDetails.isErrorsEnabled);\n\t\t\t}\n\t\t});\n\n\t\tif (this._oldTelemetryEnablement !== this.getTelemetryConfiguration()) {\n\t\t\tthis._onDidChangeTelemetryEnabled.fire(this.getTelemetryConfiguration());\n\t\t}\n\t\tthis._onDidChangeTelemetryConfiguration.fire(this.getTelemetryDetails());\n\t\tthis.updateLoggerVisibility();\n\t}\n\n\tonExtensionError(extension: ExtensionIdentifier, error: Error): boolean {\n\t\tconst loggers = this._telemetryLoggers.get(extension.value);\n\t\tconst nonDisposedLoggers = loggers?.filter(l => !l.isDisposed);\n\t\tif (!nonDisposedLoggers) {\n\t\t\tthis._telemetryLoggers.delete(extension.value);\n\t\t\treturn false;\n\t\t}\n\t\tlet errorEmitted = false;\n\t\tfor (const logger of nonDisposedLoggers) {\n\t\t\tif (logger.ignoreUnhandledExtHostErrors) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tlogger.logError(error);\n\t\t\terrorEmitted = true;\n\t\t}\n\t\treturn errorEmitted;\n\t}\n}\n\nexport class ExtHostTelemetryLogger {\n\n\tstatic validateSender(sender: vscode.TelemetrySender): void {\n\t\tif (typeof sender !== 'object') {\n\t\t\tthrow new TypeError('TelemetrySender argument is invalid');\n\t\t}\n\t\tif (typeof sender.sendEventData !== 'function') {\n\t\t\tthrow new TypeError('TelemetrySender.sendEventData must be a function');\n\t\t}\n\t\tif (typeof sender.sendErrorData !== 'function') {\n\t\t\tthrow new TypeError('TelemetrySender.sendErrorData must be a function');\n\t\t}\n\t\tif (typeof sender.flush !== 'undefined' && typeof sender.flush !== 'function') {\n\t\t\tthrow new TypeError('TelemetrySender.flush must be a function or undefined');\n\t\t}\n\t}\n\n\tprivate readonly _onDidChangeEnableStates = new Emitter<vscode.TelemetryLogger>();\n\tprivate readonly _ignoreBuiltinCommonProperties: boolean;\n\tprivate readonly _additionalCommonProperties: Record<string, any> | undefined;\n\tpublic readonly ignoreUnhandledExtHostErrors: boolean;\n\n\tprivate _telemetryEnablements: { isUsageEnabled: boolean; isErrorsEnabled: boolean };\n\tprivate _apiObject: vscode.TelemetryLogger | undefined;\n\tprivate _sender: vscode.TelemetrySender | undefined;\n\n\tconstructor(\n\t\tsender: vscode.TelemetrySender,\n\t\toptions: vscode.TelemetryLoggerOptions | undefined,\n\t\tprivate readonly _extension: IExtensionDescription,\n\t\tprivate readonly _logger: ILogger,\n\t\tprivate readonly _inLoggingOnlyMode: boolean,\n\t\tprivate readonly _commonProperties: Record<string, any>,\n\t\ttelemetryEnablements: { isUsageEnabled: boolean; isErrorsEnabled: boolean }\n\t) {\n\t\tthis.ignoreUnhandledExtHostErrors = options?.ignoreUnhandledErrors ?? false;\n\t\tthis._ignoreBuiltinCommonProperties = options?.ignoreBuiltInCommonProperties ?? false;\n\t\tthis._additionalCommonProperties = options?.additionalCommonProperties;\n\t\tthis._sender = sender;\n\t\tthis._telemetryEnablements = { isUsageEnabled: telemetryEnablements.isUsageEnabled, isErrorsEnabled: telemetryEnablements.isErrorsEnabled };\n\t}\n\n\tupdateTelemetryEnablements(isUsageEnabled: boolean, isErrorsEnabled: boolean): void {\n\t\tif (this._apiObject) {\n\t\t\tthis._telemetryEnablements = { isUsageEnabled, isErrorsEnabled };\n\t\t\tthis._onDidChangeEnableStates.fire(this._apiObject);\n\t\t}\n\t}\n\n\tmixInCommonPropsAndCleanData(data: Record<string, any>): Record<string, any> {\n\t\t// Some telemetry modules prefer to break properties and measurmements up\n\t\t// We mix common properties into the properties tab.\n\t\tlet updatedData = 'properties' in data ? (data.properties ?? {}) : data;\n\n\t\t// We don't clean measurements since they are just numbers\n\t\tupdatedData = cleanData(updatedData, []);\n\n\t\tif (this._additionalCommonProperties) {\n\t\t\tupdatedData = mixin(updatedData, this._additionalCommonProperties);\n\t\t}\n\n\t\tif (!this._ignoreBuiltinCommonProperties) {\n\t\t\tupdatedData = mixin(updatedData, this._commonProperties);\n\t\t}\n\n\t\tif ('properties' in data) {\n\t\t\tdata.properties = updatedData;\n\t\t} else {\n\t\t\tdata = updatedData;\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tprivate logEvent(eventName: string, data?: Record<string, any>): void {\n\t\t// No sender means likely disposed of, we should no-op\n\t\tif (!this._sender) {\n\t\t\treturn;\n\t\t}\n\t\t// If it's a built-in extension (vscode publisher) we don't prefix the publisher and only the ext name\n\t\tif (this._extension.publisher === 'vscode') {\n\t\t\teventName = this._extension.name + '/' + eventName;\n\t\t} else {\n\t\t\teventName = this._extension.identifier.value + '/' + eventName;\n\t\t}\n\t\tdata = this.mixInCommonPropsAndCleanData(data || {});\n\t\tif (!this._inLoggingOnlyMode) {\n\t\t\tthis._sender?.sendEventData(eventName, data);\n\t\t}\n\t\tthis._logger.trace(eventName, data);\n\t}\n\n\tlogUsage(eventName: string, data?: Record<string, any>): void {\n\t\tif (!this._telemetryEnablements.isUsageEnabled) {\n\t\t\treturn;\n\t\t}\n\t\tthis.logEvent(eventName, data);\n\t}\n\n\tlogError(eventNameOrException: Error | string, data?: Record<string, any>): void {\n\t\tif (!this._telemetryEnablements.isErrorsEnabled || !this._sender) {\n\t\t\treturn;\n\t\t}\n\t\tif (typeof eventNameOrException === 'string') {\n\t\t\tthis.logEvent(eventNameOrException, data);\n\t\t} else {\n\t\t\tconst errorData = {\n\t\t\t\tname: eventNameOrException.name,\n\t\t\t\tmessage: eventNameOrException.message,\n\t\t\t\tstack: eventNameOrException.stack,\n\t\t\t\tcause: eventNameOrException.cause\n\t\t\t};\n\t\t\tconst cleanedErrorData = cleanData(errorData, []);\n\t\t\t// Reconstruct the error object with the cleaned data\n\t\t\tconst cleanedError = new Error(cleanedErrorData.message, {\n\t\t\t\tcause: cleanedErrorData.cause\n\t\t\t});\n\t\t\tcleanedError.stack = cleanedErrorData.stack;\n\t\t\tcleanedError.name = cleanedErrorData.name;\n\t\t\tdata = this.mixInCommonPropsAndCleanData(data || {});\n\t\t\tif (!this._inLoggingOnlyMode) {\n\t\t\t\tthis._sender.sendErrorData(cleanedError, data);\n\t\t\t}\n\t\t\tthis._logger.trace('exception', data);\n\t\t}\n\t}\n\n\tget apiTelemetryLogger(): vscode.TelemetryLogger {\n\t\tif (!this._apiObject) {\n\t\t\tconst that = this;\n\t\t\tconst obj: vscode.TelemetryLogger = {\n\t\t\t\tlogUsage: that.logUsage.bind(that),\n\t\t\t\tget isUsageEnabled() {\n\t\t\t\t\treturn that._telemetryEnablements.isUsageEnabled;\n\t\t\t\t},\n\t\t\t\tget isErrorsEnabled() {\n\t\t\t\t\treturn that._telemetryEnablements.isErrorsEnabled;\n\t\t\t\t},\n\t\t\t\tlogError: that.logError.bind(that),\n\t\t\t\tdispose: that.dispose.bind(that),\n\t\t\t\tonDidChangeEnableStates: that._onDidChangeEnableStates.event.bind(that)\n\t\t\t};\n\t\t\tthis._apiObject = Object.freeze(obj);\n\t\t}\n\t\treturn this._apiObject;\n\t}\n\n\tget isDisposed(): boolean {\n\t\treturn !this._sender;\n\t}\n\n\tdispose(): void {\n\t\tif (this._sender?.flush) {\n\t\t\tlet tempSender: vscode.TelemetrySender | undefined = this._sender;\n\t\t\tthis._sender = undefined;\n\t\t\tPromise.resolve(tempSender.flush!()).then(tempSender = undefined);\n\t\t\tthis._apiObject = undefined;\n\t\t} else {\n\t\t\tthis._sender = undefined;\n\t\t}\n\t}\n}\n\nexport function isNewAppInstall(firstSessionDate: string): boolean {\n\tconst installAge = Date.now() - new Date(firstSessionDate).getTime();\n\treturn isNaN(installAge) ? false : installAge < 1000 * 60 * 60 * 24; // install age is less than a day\n}\n\nexport const IExtHostTelemetry = createDecorator<IExtHostTelemetry>('IExtHostTelemetry');\nexport interface IExtHostTelemetry extends ExtHostTelemetry, ExtHostTelemetryShape { }\n"]}