{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostNotebookEditors.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAWzF,IAAM,IAAI,GAAV,MAAM,IAAI;QAQhB,YACc,CAAiC,EAC7B,CAA0B;YADb,MAAC,GAAD,CAAC,CAAe;YAC7B,MAAC,GAAD,CAAC,CAAyB;YAR3B,MAAC,GAAqC,IAAI,WAAG,CAAgD,EAAE,eAAe,EAAE,WAAE,EAAyB,CAAC,CAAC;YAC7I,MAAC,GAAyC,IAAI,WAAG,CAAoD,EAAE,eAAe,EAAE,WAAE,EAAyB,CAAC,CAAC;YAE7J,uCAAkC,GAAG,IAAI,CAAC,CAAC,CAAmC,KAAK,CAAC;YACpF,2CAAsC,GAAG,IAAI,CAAC,CAAC,CAAuC,KAAK,CAAC;QAKjG,CAAC;QAEL,8BAA8B,CAAC,EAAU,EAAE,IAAyC;YACnF,IAAI,CAAC,CAAC,CAAW,KAAK,CAAC,gDAAgD,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;YACnF,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAoB,aAAa,CAAC,EAAE,CAAC,CAAC;YAC3D,8BAA8B;YAC9B,IAAI,IAAI,CAAC,aAAa,EAAE;gBACvB,MAAM,CAAC,oBAAoB,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;aAC5F;YACD,IAAI,IAAI,CAAC,UAAU,EAAE;gBACpB,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,cAAc,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC;aAC1F;YAED,sDAAsD;YACtD,IAAI,IAAI,CAAC,aAAa,EAAE;gBACvB,IAAI,CAAC,CAAC,CAAuC,IAAI,CAAC;oBACjD,cAAc,EAAE,MAAM,CAAC,SAAS;oBAChC,aAAa,EAAE,MAAM,CAAC,SAAS,CAAC,aAAa;iBAC7C,CAAC,CAAC;aACH;YACD,IAAI,IAAI,CAAC,UAAU,EAAE;gBACpB,IAAI,CAAC,CAAC,CAAmC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;oBAC3D,cAAc,EAAE,MAAM,CAAC,SAAS;oBAChC,UAAU,EAAE,MAAM,CAAC,SAAS,CAAC,UAAU;iBACvC,CAAC,CAAC,CAAC;aACJ;QACF,CAAC;QAED,wBAAwB,CAAC,IAAmC;YAC3D,KAAK,MAAM,EAAE,IAAI,IAAI,EAAE;gBACtB,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAoB,aAAa,CAAC,EAAE,CAAC,CAAC;gBAC3D,MAAM,CAAC,iBAAiB,CAAC,cAAc,CAAC,UAAU,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;aACjE;QACF,CAAC;KACD,CAAA;IA7CY,oBAAI;mBAAJ,IAAI;QASd,WAAA,SAAG,CAAA;OATO,IAAI,CA6ChB","file":"extHostNotebookEditors.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { onUnexpectedExternalError } from 'vs/base/common/errors';\nimport { Emitter } from 'vs/base/common/event';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ExtHostNotebookEditorsShape, INotebookEditorPropertiesChangeData, INotebookEditorViewColumnInfo } from 'vs/workbench/api/common/extHost.protocol';\nimport { ExtHostNotebookController } from 'vs/workbench/api/common/extHostNotebook';\nimport * as typeConverters from 'vs/workbench/api/common/extHostTypeConverters';\nimport type * as vscode from 'vscode';\n\n\nexport class ExtHostNotebookEditors implements ExtHostNotebookEditorsShape {\n\n\tprivate readonly _onDidChangeNotebookEditorSelection = new Emitter<vscode.NotebookEditorSelectionChangeEvent>({ onListenerError: onUnexpectedExternalError });\n\tprivate readonly _onDidChangeNotebookEditorVisibleRanges = new Emitter<vscode.NotebookEditorVisibleRangesChangeEvent>({ onListenerError: onUnexpectedExternalError });\n\n\treadonly onDidChangeNotebookEditorSelection = this._onDidChangeNotebookEditorSelection.event;\n\treadonly onDidChangeNotebookEditorVisibleRanges = this._onDidChangeNotebookEditorVisibleRanges.event;\n\n\tconstructor(\n\t\t@ILogService private readonly _logService: ILogService,\n\t\tprivate readonly _notebooksAndEditors: ExtHostNotebookController,\n\t) { }\n\n\t$acceptEditorPropertiesChanged(id: string, data: INotebookEditorPropertiesChangeData): void {\n\t\tthis._logService.debug('ExtHostNotebook#$acceptEditorPropertiesChanged', id, data);\n\t\tconst editor = this._notebooksAndEditors.getEditorById(id);\n\t\t// ONE: make all state updates\n\t\tif (data.visibleRanges) {\n\t\t\teditor._acceptVisibleRanges(data.visibleRanges.ranges.map(typeConverters.NotebookRange.to));\n\t\t}\n\t\tif (data.selections) {\n\t\t\teditor._acceptSelections(data.selections.selections.map(typeConverters.NotebookRange.to));\n\t\t}\n\n\t\t// TWO: send all events after states have been updated\n\t\tif (data.visibleRanges) {\n\t\t\tthis._onDidChangeNotebookEditorVisibleRanges.fire({\n\t\t\t\tnotebookEditor: editor.apiEditor,\n\t\t\t\tvisibleRanges: editor.apiEditor.visibleRanges\n\t\t\t});\n\t\t}\n\t\tif (data.selections) {\n\t\t\tthis._onDidChangeNotebookEditorSelection.fire(Object.freeze({\n\t\t\t\tnotebookEditor: editor.apiEditor,\n\t\t\t\tselections: editor.apiEditor.selections\n\t\t\t}));\n\t\t}\n\t}\n\n\t$acceptEditorViewColumns(data: INotebookEditorViewColumnInfo): void {\n\t\tfor (const id in data) {\n\t\t\tconst editor = this._notebooksAndEditors.getEditorById(id);\n\t\t\teditor._acceptViewColumn(typeConverters.ViewColumn.to(data[id]));\n\t\t}\n\t}\n}\n"]}