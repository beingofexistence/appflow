{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostChatVariables.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAWhG,MAAa,IAAI;iBAED,MAAC,GAAS,CAAT,AAAU,CAAC;QAK3B,YAAY,WAAyB;YAHpB,MAAC,GAAW,IAAI,GAAG,EAA8G,CAAC;YAIlJ,IAAI,CAAC,CAAC,GAAQ,WAAW,CAAC,QAAQ,CAAC,sBAAG,CAAS,uBAAuB,CAAC,CAAC;QACzE,CAAC;QAED,KAAK,CAAC,gBAAgB,CAAC,MAAc,EAAE,WAAmB,EAAE,KAAwB;YACnF,MAAM,IAAI,GAAG,IAAI,CAAC,CAAC,CAAS,GAAG,CAAC,MAAM,CAAC,CAAC;YACxC,IAAI,CAAC,IAAI,EAAE;gBACV,OAAO,SAAS,CAAC;aACjB;YACD,IAAI;gBACH,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,EAAE,EAAE,OAAO,EAAE,WAAW,EAAE,EAAE,KAAK,CAAC,CAAC;gBAC3F,IAAI,KAAK,EAAE;oBACV,OAAO,KAAK,CAAC,GAAG,CAAC,oCAAY,CAAC,IAAI,CAAC,CAAC;iBACpC;aACD;YAAC,OAAO,GAAG,EAAE;gBACb,IAAA,WAAE,EAAwB,GAAG,CAAC,CAAC;aAC/B;YACD,OAAO,SAAS,CAAC;QAClB,CAAC;QAED,wBAAwB,CAAC,SAAgC,EAAE,IAAY,EAAE,WAAmB,EAAE,QAAqC;YAClI,MAAM,MAAM,GAAG,IAAI,CAAiB,CAAC,EAAQ,CAAC;YAC9C,IAAI,CAAC,CAAC,CAAS,GAAG,CAAC,MAAM,EAAE,EAAE,SAAS,EAAE,SAAS,CAAC,UAAU,EAAE,IAAI,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC;YACjH,IAAI,CAAC,CAAC,CAAM,iBAAiB,CAAC,MAAM,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,CAAC;YAE7D,OAAO,IAAA,eAAG,EAAU,GAAG,EAAE;gBACxB,IAAI,CAAC,CAAC,CAAS,MAAM,CAAC,MAAM,CAAC,CAAC;gBAC9B,IAAI,CAAC,CAAC,CAAM,mBAAmB,CAAC,MAAM,CAAC,CAAC;YACzC,CAAC,CAAC,CAAC;QACJ,CAAC;;IApCF,oBAqCC","file":"extHostChatVariables.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from 'vscode';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { ExtHostChatVariablesShape, IMainContext, MainContext, MainThreadChatVariablesShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { IChatRequestVariableValue, IChatVariableData } from 'vs/workbench/contrib/chat/common/chatVariables';\nimport { onUnexpectedExternalError } from 'vs/base/common/errors';\nimport { ChatVariable } from 'vs/workbench/api/common/extHostTypeConverters';\n\nexport class ExtHostChatVariables implements ExtHostChatVariablesShape {\n\n\tprivate static _idPool = 0;\n\n\tprivate readonly _resolver = new Map<number, { extension: ExtensionIdentifier; data: IChatVariableData; resolver: vscode.ChatVariableResolver }>();\n\tprivate readonly _proxy: MainThreadChatVariablesShape;\n\n\tconstructor(mainContext: IMainContext) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadChatVariables);\n\t}\n\n\tasync $resolveVariable(handle: number, messageText: string, token: CancellationToken): Promise<IChatRequestVariableValue[] | undefined> {\n\t\tconst item = this._resolver.get(handle);\n\t\tif (!item) {\n\t\t\treturn undefined;\n\t\t}\n\t\ttry {\n\t\t\tconst value = await item.resolver.resolve(item.data.name, { message: messageText }, token);\n\t\t\tif (value) {\n\t\t\t\treturn value.map(ChatVariable.from);\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tonUnexpectedExternalError(err);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tregisterVariableResolver(extension: IExtensionDescription, name: string, description: string, resolver: vscode.ChatVariableResolver): IDisposable {\n\t\tconst handle = ExtHostChatVariables._idPool++;\n\t\tthis._resolver.set(handle, { extension: extension.identifier, data: { name, description }, resolver: resolver });\n\t\tthis._proxy.$registerVariable(handle, { name, description });\n\n\t\treturn toDisposable(() => {\n\t\t\tthis._resolver.delete(handle);\n\t\t\tthis._proxy.$unregisterVariable(handle);\n\t\t});\n\t}\n}\n"]}