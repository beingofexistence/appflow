{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostRequireInterceptor.ts"],"names":[],"mappings":"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","file":"extHostRequireInterceptor.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as performance from 'vs/base/common/performance';\nimport { URI } from 'vs/base/common/uri';\nimport { MainThreadTelemetryShape, MainContext } from 'vs/workbench/api/common/extHost.protocol';\nimport { ExtHostConfigProvider, IExtHostConfiguration } from 'vs/workbench/api/common/extHostConfiguration';\nimport { nullExtensionDescription } from 'vs/workbench/services/extensions/common/extensions';\nimport * as vscode from 'vscode';\nimport { ExtensionIdentifierMap } from 'vs/platform/extensions/common/extensions';\nimport { IExtensionApiFactory, IExtensionRegistries } from 'vs/workbench/api/common/extHost.api.impl';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { IExtHostInitDataService } from 'vs/workbench/api/common/extHostInitDataService';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ExtensionPaths, IExtHostExtensionService } from 'vs/workbench/api/common/extHostExtensionService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { escapeRegExpCharacters } from 'vs/base/common/strings';\n\n\ninterface LoadFunction {\n\t(request: string): any;\n}\n\ninterface IAlternativeModuleProvider {\n\talternativeModuleName(name: string): string | undefined;\n}\n\ninterface INodeModuleFactory extends Partial<IAlternativeModuleProvider> {\n\treadonly nodeModuleName: string | string[];\n\tload(request: string, parent: URI, original: LoadFunction): any;\n}\n\nexport abstract class RequireInterceptor {\n\n\tprotected readonly _factories: Map<string, INodeModuleFactory>;\n\tprotected readonly _alternatives: ((moduleName: string) => string | undefined)[];\n\n\tconstructor(\n\t\tprivate _apiFactory: IExtensionApiFactory,\n\t\tprivate _extensionRegistry: IExtensionRegistries,\n\t\t@IInstantiationService private readonly _instaService: IInstantiationService,\n\t\t@IExtHostConfiguration private readonly _extHostConfiguration: IExtHostConfiguration,\n\t\t@IExtHostExtensionService private readonly _extHostExtensionService: IExtHostExtensionService,\n\t\t@IExtHostInitDataService private readonly _initData: IExtHostInitDataService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tthis._factories = new Map<string, INodeModuleFactory>();\n\t\tthis._alternatives = [];\n\t}\n\n\tasync install(): Promise<void> {\n\n\t\tthis._installInterceptor();\n\n\t\tperformance.mark('code/extHost/willWaitForConfig');\n\t\tconst configProvider = await this._extHostConfiguration.getConfigProvider();\n\t\tperformance.mark('code/extHost/didWaitForConfig');\n\t\tconst extensionPaths = await this._extHostExtensionService.getExtensionPathIndex();\n\n\t\tthis.register(new VSCodeNodeModuleFactory(this._apiFactory, extensionPaths, this._extensionRegistry, configProvider, this._logService));\n\t\tthis.register(this._instaService.createInstance(NodeModuleAliasingModuleFactory));\n\t\tif (this._initData.remote.isRemote) {\n\t\t\tthis.register(this._instaService.createInstance(OpenNodeModuleFactory, extensionPaths, this._initData.environment.appUriScheme));\n\t\t}\n\t}\n\n\tprotected abstract _installInterceptor(): void;\n\n\tpublic register(interceptor: INodeModuleFactory | IAlternativeModuleProvider): void {\n\t\tif ('nodeModuleName' in interceptor) {\n\t\t\tif (Array.isArray(interceptor.nodeModuleName)) {\n\t\t\t\tfor (const moduleName of interceptor.nodeModuleName) {\n\t\t\t\t\tthis._factories.set(moduleName, interceptor);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._factories.set(interceptor.nodeModuleName, interceptor);\n\t\t\t}\n\t\t}\n\n\t\tif (typeof interceptor.alternativeModuleName === 'function') {\n\t\t\tthis._alternatives.push((moduleName) => {\n\t\t\t\treturn interceptor.alternativeModuleName!(moduleName);\n\t\t\t});\n\t\t}\n\t}\n}\n\n//#region --- module renames\n\nclass NodeModuleAliasingModuleFactory implements IAlternativeModuleProvider {\n\t/**\n\t * Map of aliased internal node_modules, used to allow for modules to be\n\t * renamed without breaking extensions. In the form \"original -> new name\".\n\t */\n\tprivate static readonly aliased: ReadonlyMap<string, string> = new Map([\n\t\t['vscode-ripgrep', '@vscode/ripgrep'],\n\t\t['vscode-windows-registry', '@vscode/windows-registry'],\n\t]);\n\n\tprivate readonly re?: RegExp;\n\n\tconstructor(@IExtHostInitDataService initData: IExtHostInitDataService) {\n\t\tif (initData.environment.appRoot && NodeModuleAliasingModuleFactory.aliased.size) {\n\t\t\tconst root = escapeRegExpCharacters(this.forceForwardSlashes(initData.environment.appRoot.fsPath));\n\t\t\t// decompose ${appRoot}/node_modules/foo/bin to ['${appRoot}/node_modules/', 'foo', '/bin'],\n\t\t\t// and likewise the more complex form ${appRoot}/node_modules.asar.unpacked/@vcode/foo/bin\n\t\t\t// to ['${appRoot}/node_modules.asar.unpacked/',' @vscode/foo', '/bin'].\n\t\t\tconst npmIdChrs = `[a-z0-9_.-]`;\n\t\t\tconst npmModuleName = `@${npmIdChrs}+\\\\/${npmIdChrs}+|${npmIdChrs}+`;\n\t\t\tconst moduleFolders = 'node_modules|node_modules\\\\.asar(?:\\\\.unpacked)?';\n\t\t\tthis.re = new RegExp(`^(${root}/${moduleFolders}\\\\/)(${npmModuleName})(.*)$`, 'i');\n\t\t}\n\t}\n\n\tpublic alternativeModuleName(name: string): string | undefined {\n\t\tif (!this.re) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst result = this.re.exec(this.forceForwardSlashes(name));\n\t\tif (!result) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [, prefix, moduleName, suffix] = result;\n\t\tconst dealiased = NodeModuleAliasingModuleFactory.aliased.get(moduleName);\n\t\tif (dealiased === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\tconsole.warn(`${moduleName} as been renamed to ${dealiased}, please update your imports`);\n\n\t\treturn prefix + dealiased + suffix;\n\t}\n\n\tprivate forceForwardSlashes(str: string) {\n\t\treturn str.replace(/\\\\/g, '/');\n\t}\n}\n\n//#endregion\n\n//#region --- vscode-module\n\nclass VSCodeNodeModuleFactory implements INodeModuleFactory {\n\tpublic readonly nodeModuleName = 'vscode';\n\n\tprivate readonly _extApiImpl = new ExtensionIdentifierMap<typeof vscode>();\n\tprivate _defaultApiImpl?: typeof vscode;\n\n\tconstructor(\n\t\tprivate readonly _apiFactory: IExtensionApiFactory,\n\t\tprivate readonly _extensionPaths: ExtensionPaths,\n\t\tprivate readonly _extensionRegistry: IExtensionRegistries,\n\t\tprivate readonly _configProvider: ExtHostConfigProvider,\n\t\tprivate readonly _logService: ILogService,\n\t) {\n\t}\n\n\tpublic load(_request: string, parent: URI): any {\n\n\t\t// get extension id from filename and api for extension\n\t\tconst ext = this._extensionPaths.findSubstr(parent);\n\t\tif (ext) {\n\t\t\tlet apiImpl = this._extApiImpl.get(ext.identifier);\n\t\t\tif (!apiImpl) {\n\t\t\t\tapiImpl = this._apiFactory(ext, this._extensionRegistry, this._configProvider);\n\t\t\t\tthis._extApiImpl.set(ext.identifier, apiImpl);\n\t\t\t}\n\t\t\treturn apiImpl;\n\t\t}\n\n\t\t// fall back to a default implementation\n\t\tif (!this._defaultApiImpl) {\n\t\t\tlet extensionPathsPretty = '';\n\t\t\tthis._extensionPaths.forEach((value, index) => extensionPathsPretty += `\\t${index} -> ${value.identifier.value}\\n`);\n\t\t\tthis._logService.warn(`Could not identify extension for 'vscode' require call from ${parent}. These are the extension path mappings: \\n${extensionPathsPretty}`);\n\t\t\tthis._defaultApiImpl = this._apiFactory(nullExtensionDescription, this._extensionRegistry, this._configProvider);\n\t\t}\n\t\treturn this._defaultApiImpl;\n\t}\n}\n\n//#endregion\n\n//#region --- opn/open-module\n\ninterface OpenOptions {\n\twait: boolean;\n\tapp: string | string[];\n}\n\ninterface IOriginalOpen {\n\t(target: string, options?: OpenOptions): Thenable<any>;\n}\n\ninterface IOpenModule {\n\t(target: string, options?: OpenOptions): Thenable<void>;\n}\n\nclass OpenNodeModuleFactory implements INodeModuleFactory {\n\n\tpublic readonly nodeModuleName: string[] = ['open', 'opn'];\n\n\tprivate _extensionId: string | undefined;\n\tprivate _original?: IOriginalOpen;\n\tprivate _impl: IOpenModule;\n\tprivate _mainThreadTelemetry: MainThreadTelemetryShape;\n\n\tconstructor(\n\t\tprivate readonly _extensionPaths: ExtensionPaths,\n\t\tprivate readonly _appUriScheme: string,\n\t\t@IExtHostRpcService rpcService: IExtHostRpcService,\n\t) {\n\n\t\tthis._mainThreadTelemetry = rpcService.getProxy(MainContext.MainThreadTelemetry);\n\t\tconst mainThreadWindow = rpcService.getProxy(MainContext.MainThreadWindow);\n\n\t\tthis._impl = (target, options) => {\n\t\t\tconst uri: URI = URI.parse(target);\n\t\t\t// If we have options use the original method.\n\t\t\tif (options) {\n\t\t\t\treturn this.callOriginal(target, options);\n\t\t\t}\n\t\t\tif (uri.scheme === 'http' || uri.scheme === 'https') {\n\t\t\t\treturn mainThreadWindow.$openUri(uri, target, { allowTunneling: true });\n\t\t\t} else if (uri.scheme === 'mailto' || uri.scheme === this._appUriScheme) {\n\t\t\t\treturn mainThreadWindow.$openUri(uri, target, {});\n\t\t\t}\n\t\t\treturn this.callOriginal(target, options);\n\t\t};\n\t}\n\n\tpublic load(request: string, parent: URI, original: LoadFunction): any {\n\t\t// get extension id from filename and api for extension\n\t\tconst extension = this._extensionPaths.findSubstr(parent);\n\t\tif (extension) {\n\t\t\tthis._extensionId = extension.identifier.value;\n\t\t\tthis.sendShimmingTelemetry();\n\t\t}\n\n\t\tthis._original = original(request);\n\t\treturn this._impl;\n\t}\n\n\tprivate callOriginal(target: string, options: OpenOptions | undefined): Thenable<any> {\n\t\tthis.sendNoForwardTelemetry();\n\t\treturn this._original!(target, options);\n\t}\n\n\tprivate sendShimmingTelemetry(): void {\n\t\tif (!this._extensionId) {\n\t\t\treturn;\n\t\t}\n\t\ttype ShimmingOpenClassification = {\n\t\t\towner: 'jrieken';\n\t\t\tcomment: 'Know when the open-shim was used';\n\t\t\textension: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The extension is question' };\n\t\t};\n\t\tthis._mainThreadTelemetry.$publicLog2<{ extension: string }, ShimmingOpenClassification>('shimming.open', { extension: this._extensionId });\n\t}\n\n\tprivate sendNoForwardTelemetry(): void {\n\t\tif (!this._extensionId) {\n\t\t\treturn;\n\t\t}\n\t\ttype ShimmingOpenCallNoForwardClassification = {\n\t\t\towner: 'jrieken';\n\t\t\tcomment: 'Know when the open-shim was used';\n\t\t\textension: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The extension is question' };\n\t\t};\n\t\tthis._mainThreadTelemetry.$publicLog2<{ extension: string }, ShimmingOpenCallNoForwardClassification>('shimming.open.call.noForward', { extension: this._extensionId });\n\t}\n}\n\n//#endregion\n"]}