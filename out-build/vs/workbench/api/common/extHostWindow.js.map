{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostWindow.ts"],"names":[],"mappings":"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","file":"extHostWindow.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { ExtHostWindowShape, MainContext, MainThreadWindowShape, IOpenUriOptions } from './extHost.protocol';\nimport { WindowState } from 'vscode';\nimport { URI } from 'vs/base/common/uri';\nimport { Schemas } from 'vs/base/common/network';\nimport { isFalsyOrWhitespace } from 'vs/base/common/strings';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { IRelaxedExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { checkProposedApiEnabled } from 'vs/workbench/services/extensions/common/extensions';\n\nexport class ExtHostWindow implements ExtHostWindowShape {\n\n\tprivate static InitialState: WindowState = {\n\t\tfocused: true,\n\t\tactive: true,\n\t};\n\n\tprivate _proxy: MainThreadWindowShape;\n\n\tprivate readonly _onDidChangeWindowState = new Emitter<WindowState>();\n\treadonly onDidChangeWindowState: Event<WindowState> = this._onDidChangeWindowState.event;\n\n\tprivate _state = ExtHostWindow.InitialState;\n\n\tgetState(extension: Readonly<IRelaxedExtensionDescription>): WindowState {\n\t\t// todo@connor4312: this can be changed to just return this._state after proposed api is finalized\n\t\tconst state = this._state;\n\n\t\treturn {\n\t\t\tget focused() {\n\t\t\t\treturn state.focused;\n\t\t\t},\n\t\t\tget active() {\n\t\t\t\tcheckProposedApiEnabled(extension, 'windowActivity');\n\t\t\t\treturn state.active;\n\t\t\t},\n\t\t};\n\t}\n\n\tconstructor(@IExtHostRpcService extHostRpc: IExtHostRpcService) {\n\t\tthis._proxy = extHostRpc.getProxy(MainContext.MainThreadWindow);\n\t\tthis._proxy.$getInitialState().then(({ isFocused, isActive }) => {\n\t\t\tthis.onDidChangeWindowProperty('focused', isFocused);\n\t\t\tthis.onDidChangeWindowProperty('active', isActive);\n\t\t});\n\t}\n\n\t$onDidChangeWindowFocus(value: boolean) {\n\t\tthis.onDidChangeWindowProperty('focused', value);\n\t}\n\n\t$onDidChangeWindowActive(value: boolean) {\n\t\tthis.onDidChangeWindowProperty('active', value);\n\t}\n\n\tonDidChangeWindowProperty(property: keyof WindowState, value: boolean): void {\n\t\tif (value === this._state[property]) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._state = { ...this._state, [property]: value };\n\t\tthis._onDidChangeWindowState.fire(this._state);\n\t}\n\n\topenUri(stringOrUri: string | URI, options: IOpenUriOptions): Promise<boolean> {\n\t\tlet uriAsString: string | undefined;\n\t\tif (typeof stringOrUri === 'string') {\n\t\t\turiAsString = stringOrUri;\n\t\t\ttry {\n\t\t\t\tstringOrUri = URI.parse(stringOrUri);\n\t\t\t} catch (e) {\n\t\t\t\treturn Promise.reject(`Invalid uri - '${stringOrUri}'`);\n\t\t\t}\n\t\t}\n\t\tif (isFalsyOrWhitespace(stringOrUri.scheme)) {\n\t\t\treturn Promise.reject('Invalid scheme - cannot be empty');\n\t\t} else if (stringOrUri.scheme === Schemas.command) {\n\t\t\treturn Promise.reject(`Invalid scheme '${stringOrUri.scheme}'`);\n\t\t}\n\t\treturn this._proxy.$openUri(stringOrUri, uriAsString, options);\n\t}\n\n\tasync asExternalUri(uri: URI, options: IOpenUriOptions): Promise<URI> {\n\t\tif (isFalsyOrWhitespace(uri.scheme)) {\n\t\t\treturn Promise.reject('Invalid scheme - cannot be empty');\n\t\t}\n\n\t\tconst result = await this._proxy.$asExternalUri(uri, options);\n\t\treturn URI.from(result);\n\t}\n}\n\nexport const IExtHostWindow = createDecorator<IExtHostWindow>('IExtHostWindow');\nexport interface IExtHostWindow extends ExtHostWindow, ExtHostWindowShape { }\n"]}