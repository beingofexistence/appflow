{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostDecorations.ts"],"names":[],"mappings":"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","file":"extHostDecorations.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type * as vscode from 'vscode';\nimport { URI } from 'vs/base/common/uri';\nimport { MainContext, ExtHostDecorationsShape, MainThreadDecorationsShape, DecorationData, DecorationRequest, DecorationReply } from 'vs/workbench/api/common/extHost.protocol';\nimport { Disposable, FileDecoration } from 'vs/workbench/api/common/extHostTypes';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { asArray, groupBy } from 'vs/base/common/arrays';\nimport { compare, count } from 'vs/base/common/strings';\nimport { dirname } from 'vs/base/common/path';\nimport { checkProposedApiEnabled } from 'vs/workbench/services/extensions/common/extensions';\n\ninterface ProviderData {\n\tprovider: vscode.FileDecorationProvider;\n\textensionDescription: IExtensionDescription;\n}\n\nexport class ExtHostDecorations implements ExtHostDecorationsShape {\n\n\tprivate static _handlePool = 0;\n\tprivate static _maxEventSize = 250;\n\n\treadonly _serviceBrand: undefined;\n\tprivate readonly _provider = new Map<number, ProviderData>();\n\tprivate readonly _proxy: MainThreadDecorationsShape;\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tthis._proxy = extHostRpc.getProxy(MainContext.MainThreadDecorations);\n\t}\n\n\tregisterFileDecorationProvider(provider: vscode.FileDecorationProvider, extensionDescription: IExtensionDescription): vscode.Disposable {\n\t\tconst handle = ExtHostDecorations._handlePool++;\n\t\tthis._provider.set(handle, { provider, extensionDescription });\n\t\tthis._proxy.$registerDecorationProvider(handle, extensionDescription.identifier.value);\n\n\t\tconst listener = provider.onDidChangeFileDecorations && provider.onDidChangeFileDecorations(e => {\n\t\t\tif (!e) {\n\t\t\t\tthis._proxy.$onDidChange(handle, null);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst array = asArray(e);\n\t\t\tif (array.length <= ExtHostDecorations._maxEventSize) {\n\t\t\t\tthis._proxy.$onDidChange(handle, array);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// too many resources per event. pick one resource per folder, starting\n\t\t\t// with parent folders\n\t\t\tthis._logService.warn('[Decorations] CAPPING events from decorations provider', extensionDescription.identifier.value, array.length);\n\t\t\tconst mapped = array.map(uri => ({ uri, rank: count(uri.path, '/') }));\n\t\t\tconst groups = groupBy(mapped, (a, b) => a.rank - b.rank || compare(a.uri.path, b.uri.path));\n\t\t\tconst picked: URI[] = [];\n\t\t\touter: for (const uris of groups) {\n\t\t\t\tlet lastDirname: string | undefined;\n\t\t\t\tfor (const obj of uris) {\n\t\t\t\t\tconst myDirname = dirname(obj.uri.path);\n\t\t\t\t\tif (lastDirname !== myDirname) {\n\t\t\t\t\t\tlastDirname = myDirname;\n\t\t\t\t\t\tif (picked.push(obj.uri) >= ExtHostDecorations._maxEventSize) {\n\t\t\t\t\t\t\tbreak outer;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._proxy.$onDidChange(handle, picked);\n\t\t});\n\n\t\treturn new Disposable(() => {\n\t\t\tlistener?.dispose();\n\t\t\tthis._proxy.$unregisterDecorationProvider(handle);\n\t\t\tthis._provider.delete(handle);\n\t\t});\n\t}\n\n\tasync $provideDecorations(handle: number, requests: DecorationRequest[], token: CancellationToken): Promise<DecorationReply> {\n\n\t\tif (!this._provider.has(handle)) {\n\t\t\t// might have been unregistered in the meantime\n\t\t\treturn Object.create(null);\n\t\t}\n\n\t\tconst result: DecorationReply = Object.create(null);\n\t\tconst { provider, extensionDescription: extensionId } = this._provider.get(handle)!;\n\n\t\tawait Promise.all(requests.map(async request => {\n\t\t\ttry {\n\t\t\t\tconst { uri, id } = request;\n\t\t\t\tconst data = await Promise.resolve(provider.provideFileDecoration(URI.revive(uri), token));\n\t\t\t\tif (!data) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tFileDecoration.validate(data);\n\t\t\t\t\tif (data.badge && typeof data.badge !== 'string') {\n\t\t\t\t\t\tcheckProposedApiEnabled(extensionId, 'codiconDecoration');\n\t\t\t\t\t}\n\t\t\t\t\tresult[id] = <DecorationData>[data.propagate, data.tooltip, data.badge, data.color];\n\t\t\t\t} catch (e) {\n\t\t\t\t\tthis._logService.warn(`INVALID decoration from extension '${extensionId.identifier.value}': ${e}`);\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tthis._logService.error(err);\n\t\t\t}\n\t\t}));\n\n\t\treturn result;\n\t}\n}\n\nexport const IExtHostDecorations = createDecorator<IExtHostDecorations>('IExtHostDecorations');\nexport interface IExtHostDecorations extends ExtHostDecorations { }\n"]}