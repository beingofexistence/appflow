{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostTheming.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAOzF,IAAM,IAAI,GAAV,MAAM,IAAI;QAOhB,YACqB,WAAgB;YAEpC,IAAI,CAAC,CAAC,GAAS,IAAI,kBAAG,CAAQ,6BAAc,CAAC,IAAI,CAAC,CAAC;YACnD,IAAI,CAAC,CAAC,GAA8B,IAAI,WAAG,EAAkB,CAAC;QAC/D,CAAC;QAED,IAAW,gBAAgB;YAC1B,OAAO,IAAI,CAAC,CAAC,CAAO;QACrB,CAAC;QAED,mBAAmB,CAAC,IAAY;YAC/B,IAAI,IAAI,CAAC;YACT,QAAQ,IAAI,EAAE;gBACb,KAAK,OAAO;oBAAE,IAAI,GAAG,6BAAc,CAAC,KAAK,CAAC;oBAAC,MAAM;gBACjD,KAAK,QAAQ;oBAAE,IAAI,GAAG,6BAAc,CAAC,YAAY,CAAC;oBAAC,MAAM;gBACzD,KAAK,SAAS;oBAAE,IAAI,GAAG,6BAAc,CAAC,iBAAiB,CAAC;oBAAC,MAAM;gBAC/D;oBACC,IAAI,GAAG,6BAAc,CAAC,IAAI,CAAC;aAC5B;YACD,IAAI,CAAC,CAAC,GAAS,IAAI,kBAAG,CAAQ,IAAI,CAAC,CAAC;YACpC,IAAI,CAAC,CAAC,CAA4B,IAAI,CAAC,IAAI,CAAC,CAAC,CAAO,CAAC;QACtD,CAAC;QAED,IAAW,2BAA2B;YACrC,OAAO,IAAI,CAAC,CAAC,CAA4B,KAAK,CAAC;QAChD,CAAC;KACD,CAAA;IAlCY,oBAAI;mBAAJ,IAAI;QAQd,WAAA,uBAAG,CAAA;OARO,IAAI,CAkChB","file":"extHostTheming.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ColorTheme, ColorThemeKind } from './extHostTypes';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { ExtHostThemingShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { Emitter, Event } from 'vs/base/common/event';\n\nexport class ExtHostTheming implements ExtHostThemingShape {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate _actual: ColorTheme;\n\tprivate _onDidChangeActiveColorTheme: Emitter<ColorTheme>;\n\n\tconstructor(\n\t\t@IExtHostRpcService _extHostRpc: IExtHostRpcService\n\t) {\n\t\tthis._actual = new ColorTheme(ColorThemeKind.Dark);\n\t\tthis._onDidChangeActiveColorTheme = new Emitter<ColorTheme>();\n\t}\n\n\tpublic get activeColorTheme(): ColorTheme {\n\t\treturn this._actual;\n\t}\n\n\t$onColorThemeChange(type: string): void {\n\t\tlet kind;\n\t\tswitch (type) {\n\t\t\tcase 'light': kind = ColorThemeKind.Light; break;\n\t\t\tcase 'hcDark': kind = ColorThemeKind.HighContrast; break;\n\t\t\tcase 'hcLight': kind = ColorThemeKind.HighContrastLight; break;\n\t\t\tdefault:\n\t\t\t\tkind = ColorThemeKind.Dark;\n\t\t}\n\t\tthis._actual = new ColorTheme(kind);\n\t\tthis._onDidChangeActiveColorTheme.fire(this._actual);\n\t}\n\n\tpublic get onDidChangeActiveColorTheme(): Event<ColorTheme> {\n\t\treturn this._onDidChangeActiveColorTheme.event;\n\t}\n}\n"]}