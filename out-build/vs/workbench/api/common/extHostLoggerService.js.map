{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostLoggerService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IASzF,IAAM,IAAI,GAAV,MAAM,IAAqB,SAAQ,SAAG;QAK5C,YACqB,GAAQ,EACH,QAAa;YAEtC,KAAK,CAAC,QAAQ,CAAC,QAAQ,EAAE,QAAQ,CAAC,YAAY,EAAE,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,IAAA,iBAAG,EAAI,MAAM,CAAC,CAAC,CAAC,CAAC;YAChG,IAAI,CAAC,CAAC,GAAQ,GAAG,CAAC,QAAQ,CAAC,sBAAG,CAAS,gBAAgB,CAAC,CAAC;QAC1D,CAAC;QAED,YAAY,CAAC,QAAkB,EAAE,QAAwB;YACxD,IAAI,QAAQ,EAAE;gBACb,IAAI,CAAC,WAAW,CAAC,SAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,QAAQ,CAAC,CAAC;aACjD;iBAAM;gBACN,IAAI,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;aAC3B;QACF,CAAC;QAEQ,aAAa,CAAC,QAAa,EAAE,UAAmB;YACxD,KAAK,CAAC,aAAa,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;YAC1C,IAAI,CAAC,CAAC,CAAM,cAAc,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QAClD,CAAC;QAES,CAAC,CAAc,QAAa,EAAE,QAAkB,EAAE,OAAwB;YACnF,OAAO,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,EAAO,QAAQ,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC;QAC7D,CAAC;KACD,CAAA;IA7BY,oBAAI;mBAAJ,IAAI;QAMd,WAAA,uBAAG,CAAA;QACH,WAAA,4BAAG,CAAA;OAPO,IAAI,CA6BhB;IAED,MAAM,MAAO,SAAQ,SAAG;QAKvB,YACkB,CAA4B,EAC5B,CAAS,EAC1B,QAAkB,EAClB,aAA8B;YAE9B,KAAK,CAAC,aAAa,EAAE,QAAQ,KAAK,QAAQ,CAAC,CAAC;YAL3B,MAAC,GAAD,CAAC,CAA2B;YAC5B,MAAC,GAAD,CAAC,CAAQ;YALnB,MAAC,GAA0B,KAAK,CAAC;YACjC,MAAC,GAA8B,EAAE,CAAC;YASzC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;YACxB,IAAI,CAAC,CAAC,CAAK,aAAa,CAAC,CAAC,EAAK,aAAa,CAAC;iBAC3C,IAAI,CAAC,GAAG,EAAE;gBACV,IAAI,CAAC,CAAC,CAAK,IAAI,CAAC,CAAC,CAAM,CAAC;gBACxB,IAAI,CAAC,CAAC,GAAiB,IAAI,CAAC;YAC7B,CAAC,CAAC,CAAC;QACL,CAAC;QAES,CAAC,CAAG,KAAe,EAAE,OAAe;YAC7C,MAAM,QAAQ,GAAyB,CAAC,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC;YAC1D,IAAI,IAAI,CAAC,CAAC,EAAgB;gBACzB,IAAI,CAAC,CAAC,CAAK,QAAQ,CAAC,CAAC;aACrB;iBAAM;gBACN,IAAI,CAAC,CAAC,CAAM,IAAI,CAAC,GAAG,QAAQ,CAAC,CAAC;aAC9B;QACF,CAAC;QAEO,CAAC,CAAK,QAA8B;YAC3C,IAAI,CAAC,CAAC,CAAK,IAAI,CAAC,IAAI,CAAC,CAAC,EAAK,QAAQ,CAAC,CAAC;QACtC,CAAC;QAEQ,KAAK;YACb,IAAI,CAAC,CAAC,CAAK,MAAM,CAAC,IAAI,CAAC,CAAC,CAAI,CAAC;QAC9B,CAAC;KACD","file":"extHostLoggerService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ILogger, ILoggerOptions, AbstractMessageLogger, LogLevel, AbstractLoggerService } from 'vs/platform/log/common/log';\nimport { MainThreadLoggerShape, MainContext, ExtHostLogLevelServiceShape as ExtHostLogLevelServiceShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { IExtHostInitDataService } from 'vs/workbench/api/common/extHostInitDataService';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { revive } from 'vs/base/common/marshalling';\n\nexport class ExtHostLoggerService extends AbstractLoggerService implements ExtHostLogLevelServiceShape {\n\n\tdeclare readonly _serviceBrand: undefined;\n\tprotected readonly _proxy: MainThreadLoggerShape;\n\n\tconstructor(\n\t\t@IExtHostRpcService rpc: IExtHostRpcService,\n\t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n\t) {\n\t\tsuper(initData.logLevel, initData.logsLocation, initData.loggers.map(logger => revive(logger)));\n\t\tthis._proxy = rpc.getProxy(MainContext.MainThreadLogger);\n\t}\n\n\t$setLogLevel(logLevel: LogLevel, resource?: UriComponents): void {\n\t\tif (resource) {\n\t\t\tthis.setLogLevel(URI.revive(resource), logLevel);\n\t\t} else {\n\t\t\tthis.setLogLevel(logLevel);\n\t\t}\n\t}\n\n\toverride setVisibility(resource: URI, visibility: boolean): void {\n\t\tsuper.setVisibility(resource, visibility);\n\t\tthis._proxy.$setVisibility(resource, visibility);\n\t}\n\n\tprotected doCreateLogger(resource: URI, logLevel: LogLevel, options?: ILoggerOptions): ILogger {\n\t\treturn new Logger(this._proxy, resource, logLevel, options);\n\t}\n}\n\nclass Logger extends AbstractMessageLogger {\n\n\tprivate isLoggerCreated: boolean = false;\n\tprivate buffer: [LogLevel, string][] = [];\n\n\tconstructor(\n\t\tprivate readonly proxy: MainThreadLoggerShape,\n\t\tprivate readonly file: URI,\n\t\tlogLevel: LogLevel,\n\t\tloggerOptions?: ILoggerOptions,\n\t) {\n\t\tsuper(loggerOptions?.logLevel === 'always');\n\t\tthis.setLevel(logLevel);\n\t\tthis.proxy.$createLogger(file, loggerOptions)\n\t\t\t.then(() => {\n\t\t\t\tthis.doLog(this.buffer);\n\t\t\t\tthis.isLoggerCreated = true;\n\t\t\t});\n\t}\n\n\tprotected log(level: LogLevel, message: string) {\n\t\tconst messages: [LogLevel, string][] = [[level, message]];\n\t\tif (this.isLoggerCreated) {\n\t\t\tthis.doLog(messages);\n\t\t} else {\n\t\t\tthis.buffer.push(...messages);\n\t\t}\n\t}\n\n\tprivate doLog(messages: [LogLevel, string][]) {\n\t\tthis.proxy.$log(this.file, messages);\n\t}\n\n\toverride flush(): void {\n\t\tthis.proxy.$flush(this.file);\n\t}\n}\n"]}