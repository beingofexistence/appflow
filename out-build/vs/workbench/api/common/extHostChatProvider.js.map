{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostChatProvider.ts"],"names":[],"mappings":"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","file":"extHostChatProvider.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ExtHostChatProviderShape, IMainContext, MainContext, MainThreadChatProviderShape } from 'vs/workbench/api/common/extHost.protocol';\nimport * as typeConvert from 'vs/workbench/api/common/extHostTypeConverters';\nimport type * as vscode from 'vscode';\nimport { Progress } from 'vs/platform/progress/common/progress';\nimport { IChatMessage, IChatResponseFragment } from 'vs/workbench/contrib/chat/common/chatProvider';\nimport { ExtensionIdentifier, ExtensionIdentifierMap } from 'vs/platform/extensions/common/extensions';\n\ntype ProviderData = {\n\treadonly extension: ExtensionIdentifier;\n\treadonly provider: vscode.ChatResponseProvider;\n};\n\nexport class ExtHostChatProvider implements ExtHostChatProviderShape {\n\n\tprivate static _idPool = 1;\n\n\tprivate readonly _proxy: MainThreadChatProviderShape;\n\tprivate readonly _providers = new Map<number, ProviderData>();\n\n\tconstructor(\n\t\tmainContext: IMainContext,\n\t\tprivate readonly _logService: ILogService,\n\t) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadChatProvider);\n\t}\n\n\tregisterProvider(extension: ExtensionIdentifier, identifier: string, provider: vscode.ChatResponseProvider, metadata: vscode.ChatResponseProviderMetadata): IDisposable {\n\n\t\tconst handle = ExtHostChatProvider._idPool++;\n\t\tthis._providers.set(handle, { extension, provider });\n\t\tthis._proxy.$registerProvider(handle, identifier, { extension, displayName: metadata.name ?? extension.value });\n\n\t\treturn toDisposable(() => {\n\t\t\tthis._proxy.$unregisterProvider(handle);\n\t\t\tthis._providers.delete(handle);\n\t\t});\n\t}\n\n\tasync $provideChatResponse(handle: number, requestId: number, messages: IChatMessage[], options: { [name: string]: any }, token: CancellationToken): Promise<any> {\n\t\tconst data = this._providers.get(handle);\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\tconst progress = new Progress<vscode.ChatResponseFragment>(async fragment => {\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\tthis._logService.warn(`[CHAT](${data.extension.value}) CANNOT send progress because the REQUEST IS CANCELLED`);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tawait this._proxy.$handleProgressChunk(requestId, { index: fragment.index, part: fragment.part });\n\t\t}, { async: true });\n\n\t\treturn data.provider.provideChatResponse(messages.map(typeConvert.ChatMessage.to), options, progress, token);\n\t}\n\n\t//#region --- making request\n\n\tprivate readonly _pendingRequest = new Map<number, vscode.Progress<vscode.ChatResponseFragment>>();\n\n\tprivate readonly _chatAccessAllowList = new ExtensionIdentifierMap<Promise<unknown>>();\n\n\tallowListExtensionWhile(extension: ExtensionIdentifier, promise: Promise<unknown>): void {\n\t\tthis._chatAccessAllowList.set(extension, promise);\n\t\tpromise.finally(() => this._chatAccessAllowList.delete(extension));\n\t}\n\n\tasync requestChatResponseProvider(from: ExtensionIdentifier, identifier: string): Promise<vscode.ChatAccess> {\n\t\t// check if a UI command is running/active\n\n\t\tif (!this._chatAccessAllowList.has(from)) {\n\t\t\tthrow new Error('Extension is NOT allowed to make chat requests');\n\t\t}\n\n\t\tconst that = this;\n\n\t\treturn {\n\t\t\tget isRevoked() {\n\t\t\t\treturn !that._chatAccessAllowList.has(from);\n\t\t\t},\n\t\t\tasync makeRequest(messages, options, progress, token) {\n\n\t\t\t\tif (!that._chatAccessAllowList.has(from)) {\n\t\t\t\t\tthrow new Error('Access to chat has been revoked');\n\t\t\t\t}\n\n\t\t\t\tconst requestId = (Math.random() * 1e6) | 0;\n\t\t\t\tthat._pendingRequest.set(requestId, progress);\n\t\t\t\ttry {\n\t\t\t\t\tawait that._proxy.$fetchResponse(from, identifier, requestId, messages.map(typeConvert.ChatMessage.from), options, token);\n\t\t\t\t} finally {\n\t\t\t\t\tthat._pendingRequest.delete(requestId);\n\t\t\t\t}\n\t\t\t},\n\t\t};\n\t}\n\n\tasync $handleResponseFragment(requestId: number, chunk: IChatResponseFragment): Promise<void> {\n\t\tthis._pendingRequest.get(requestId)?.report(chunk);\n\t}\n}\n"]}