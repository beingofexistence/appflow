{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extensionHostMain.ts"],"names":[],"mappings":"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","file":"extensionHostMain.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as errors from 'vs/base/common/errors';\nimport * as performance from 'vs/base/common/performance';\nimport { URI } from 'vs/base/common/uri';\nimport { IURITransformer } from 'vs/base/common/uriIpc';\nimport { IMessagePassingProtocol } from 'vs/base/parts/ipc/common/ipc';\nimport { MainContext, MainThreadConsoleShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { IExtensionHostInitData } from 'vs/workbench/services/extensions/common/extensionHostProtocol';\nimport { RPCProtocol } from 'vs/workbench/services/extensions/common/rpcProtocol';\nimport { ExtensionIdentifier, IExtensionDescription, IRelaxedExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { getSingletonServiceDescriptors } from 'vs/platform/instantiation/common/extensions';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { IExtHostInitDataService } from 'vs/workbench/api/common/extHostInitDataService';\nimport { InstantiationService } from 'vs/platform/instantiation/common/instantiationService';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { IExtHostRpcService, ExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { IURITransformerService, URITransformerService } from 'vs/workbench/api/common/extHostUriTransformerService';\nimport { IExtHostExtensionService, IHostUtils } from 'vs/workbench/api/common/extHostExtensionService';\nimport { IExtHostTelemetry } from 'vs/workbench/api/common/extHostTelemetry';\nimport { Mutable } from 'vs/base/common/types';\n\nexport interface IExitFn {\n\t(code?: number): any;\n}\n\nexport interface IConsolePatchFn {\n\t(mainThreadConsole: MainThreadConsoleShape): any;\n}\n\nexport abstract class ErrorHandler {\n\n\tstatic async installEarlyHandler(accessor: ServicesAccessor): Promise<void> {\n\n\t\t// increase number of stack frames (from 10, https://github.com/v8/v8/wiki/Stack-Trace-API)\n\t\tError.stackTraceLimit = 100;\n\n\t\t// does NOT dependent of extension information, can be installed immediately, and simply forwards\n\t\t// to the log service and main thread errors\n\t\tconst logService = accessor.get(ILogService);\n\t\tconst rpcService = accessor.get(IExtHostRpcService);\n\t\tconst mainThreadErrors = rpcService.getProxy(MainContext.MainThreadErrors);\n\n\t\terrors.setUnexpectedErrorHandler(err => {\n\t\t\tlogService.error(err);\n\t\t\tconst data = errors.transformErrorForSerialization(err);\n\t\t\tmainThreadErrors.$onUnexpectedError(data);\n\t\t});\n\t}\n\n\tstatic async installFullHandler(accessor: ServicesAccessor): Promise<void> {\n\t\t// uses extension knowledges to correlate errors with extensions\n\n\t\tconst logService = accessor.get(ILogService);\n\t\tconst rpcService = accessor.get(IExtHostRpcService);\n\t\tconst extensionService = accessor.get(IExtHostExtensionService);\n\t\tconst extensionTelemetry = accessor.get(IExtHostTelemetry);\n\n\t\tconst mainThreadExtensions = rpcService.getProxy(MainContext.MainThreadExtensionService);\n\t\tconst mainThreadErrors = rpcService.getProxy(MainContext.MainThreadErrors);\n\n\t\tconst map = await extensionService.getExtensionPathIndex();\n\t\tconst extensionErrors = new WeakMap<Error, { extensionIdentifier: ExtensionIdentifier | undefined; stack: string }>();\n\n\t\t// PART 1\n\t\t// set the prepareStackTrace-handle and use it as a side-effect to associate errors\n\t\t// with extensions - this works by looking up callsites in the extension path index\n\t\tfunction prepareStackTraceAndFindExtension(error: Error, stackTrace: errors.V8CallSite[]) {\n\t\t\tif (extensionErrors.has(error)) {\n\t\t\t\treturn extensionErrors.get(error)!.stack;\n\t\t\t}\n\t\t\tlet stackTraceMessage = '';\n\t\t\tlet extension: IExtensionDescription | undefined;\n\t\t\tlet fileName: string | null;\n\t\t\tfor (const call of stackTrace) {\n\t\t\t\tstackTraceMessage += `\\n\\tat ${call.toString()}`;\n\t\t\t\tfileName = call.getFileName();\n\t\t\t\tif (!extension && fileName) {\n\t\t\t\t\textension = map.findSubstr(URI.file(fileName));\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst result = `${error.name || 'Error'}: ${error.message || ''}${stackTraceMessage}`;\n\t\t\textensionErrors.set(error, { extensionIdentifier: extension?.identifier, stack: result });\n\t\t\treturn result;\n\t\t}\n\n\t\tconst _wasWrapped = Symbol('prepareStackTrace wrapped');\n\t\tlet _prepareStackTrace = prepareStackTraceAndFindExtension;\n\n\t\tObject.defineProperty(Error, 'prepareStackTrace', {\n\t\t\tconfigurable: false,\n\t\t\tget() {\n\t\t\t\treturn _prepareStackTrace;\n\t\t\t},\n\t\t\tset(v) {\n\t\t\t\tif (v === prepareStackTraceAndFindExtension || !v || v[_wasWrapped]) {\n\t\t\t\t\t_prepareStackTrace = v || prepareStackTraceAndFindExtension;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t_prepareStackTrace = function (error, stackTrace) {\n\t\t\t\t\tprepareStackTraceAndFindExtension(error, stackTrace);\n\t\t\t\t\treturn v.call(Error, error, stackTrace);\n\t\t\t\t};\n\n\t\t\t\tObject.assign(_prepareStackTrace, { [_wasWrapped]: true });\n\t\t\t},\n\t\t});\n\n\t\t// PART 2\n\t\t// set the unexpectedErrorHandler and check for extensions that have been identified as\n\t\t// having caused the error. Note that the runtime order is actually reversed, the code\n\t\t// below accesses the stack-property which triggers the code above\n\t\terrors.setUnexpectedErrorHandler(err => {\n\t\t\tlogService.error(err);\n\n\t\t\tconst errorData = errors.transformErrorForSerialization(err);\n\t\t\tconst stackData = extensionErrors.get(err);\n\t\t\tif (!stackData?.extensionIdentifier) {\n\t\t\t\tmainThreadErrors.$onUnexpectedError(errorData);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmainThreadExtensions.$onExtensionRuntimeError(stackData.extensionIdentifier, errorData);\n\t\t\tconst reported = extensionTelemetry.onExtensionError(stackData.extensionIdentifier, err);\n\t\t\tlogService.trace('forwarded error to extension?', reported, stackData);\n\t\t});\n\t}\n}\n\nexport class ExtensionHostMain {\n\n\tprivate readonly _hostUtils: IHostUtils;\n\tprivate readonly _rpcProtocol: RPCProtocol;\n\tprivate readonly _extensionService: IExtHostExtensionService;\n\tprivate readonly _logService: ILogService;\n\n\tconstructor(\n\t\tprotocol: IMessagePassingProtocol,\n\t\tinitData: IExtensionHostInitData,\n\t\thostUtils: IHostUtils,\n\t\turiTransformer: IURITransformer | null,\n\t\tmessagePorts?: ReadonlyMap<string, MessagePort>\n\t) {\n\t\tthis._hostUtils = hostUtils;\n\t\tthis._rpcProtocol = new RPCProtocol(protocol, null, uriTransformer);\n\n\t\t// ensure URIs are transformed and revived\n\t\tinitData = ExtensionHostMain._transform(initData, this._rpcProtocol);\n\n\t\t// bootstrap services\n\t\tconst services = new ServiceCollection(...getSingletonServiceDescriptors());\n\t\tservices.set(IExtHostInitDataService, { _serviceBrand: undefined, ...initData, messagePorts });\n\t\tservices.set(IExtHostRpcService, new ExtHostRpcService(this._rpcProtocol));\n\t\tservices.set(IURITransformerService, new URITransformerService(uriTransformer));\n\t\tservices.set(IHostUtils, hostUtils);\n\n\t\tconst instaService: IInstantiationService = new InstantiationService(services, true);\n\n\t\tinstaService.invokeFunction(ErrorHandler.installEarlyHandler);\n\n\t\t// ugly self - inject\n\t\tthis._logService = instaService.invokeFunction(accessor => accessor.get(ILogService));\n\n\t\tperformance.mark(`code/extHost/didCreateServices`);\n\t\tif (this._hostUtils.pid) {\n\t\t\tthis._logService.info(`Extension host with pid ${this._hostUtils.pid} started`);\n\t\t} else {\n\t\t\tthis._logService.info(`Extension host started`);\n\t\t}\n\t\tthis._logService.trace('initData', initData);\n\n\t\t// ugly self - inject\n\t\t// must call initialize *after* creating the extension service\n\t\t// because `initialize` itself creates instances that depend on it\n\t\tthis._extensionService = instaService.invokeFunction(accessor => accessor.get(IExtHostExtensionService));\n\t\tthis._extensionService.initialize();\n\n\t\t// install error handler that is extension-aware\n\t\tinstaService.invokeFunction(ErrorHandler.installFullHandler);\n\t}\n\n\tasync asBrowserUri(uri: URI): Promise<URI> {\n\t\tconst mainThreadExtensionsProxy = this._rpcProtocol.getProxy(MainContext.MainThreadExtensionService);\n\t\treturn URI.revive(await mainThreadExtensionsProxy.$asBrowserUri(uri));\n\t}\n\n\tterminate(reason: string): void {\n\t\tthis._extensionService.terminate(reason);\n\t}\n\n\tprivate static _transform(initData: IExtensionHostInitData, rpcProtocol: RPCProtocol): IExtensionHostInitData {\n\t\tinitData.extensions.allExtensions.forEach((ext) => {\n\t\t\t(<Mutable<IRelaxedExtensionDescription>>ext).extensionLocation = URI.revive(rpcProtocol.transformIncomingURIs(ext.extensionLocation));\n\t\t});\n\t\tinitData.environment.appRoot = URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.appRoot));\n\t\tconst extDevLocs = initData.environment.extensionDevelopmentLocationURI;\n\t\tif (extDevLocs) {\n\t\t\tinitData.environment.extensionDevelopmentLocationURI = extDevLocs.map(url => URI.revive(rpcProtocol.transformIncomingURIs(url)));\n\t\t}\n\t\tinitData.environment.extensionTestsLocationURI = URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.extensionTestsLocationURI));\n\t\tinitData.environment.globalStorageHome = URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.globalStorageHome));\n\t\tinitData.environment.workspaceStorageHome = URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.workspaceStorageHome));\n\t\tinitData.environment.extensionTelemetryLogResource = URI.revive(rpcProtocol.transformIncomingURIs(initData.environment.extensionTelemetryLogResource));\n\t\tinitData.nlsBaseUrl = URI.revive(rpcProtocol.transformIncomingURIs(initData.nlsBaseUrl));\n\t\tinitData.logsLocation = URI.revive(rpcProtocol.transformIncomingURIs(initData.logsLocation));\n\t\tinitData.workspace = rpcProtocol.transformIncomingURIs(initData.workspace);\n\t\treturn initData;\n\t}\n}\n"]}