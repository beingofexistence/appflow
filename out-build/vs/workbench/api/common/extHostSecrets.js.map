{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostSecrets.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAUhG,MAAa,IAAI;QAGP,YAAY,CAAqB;QAM1C,YAAY,oBAA2C,EAAE,WAAiB;YAJlE,MAAC,GAAc,IAAI,WAAG,EAAuC,CAAC;YAC7D,gBAAW,GAA2C,IAAI,CAAC,CAAC,CAAY,KAAK,CAAC;YAItF,IAAI,CAAC,CAAC,GAAK,gBAAG,CAAiB,KAAK,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC;YACtE,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;YAEhC,IAAI,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC,CAAC,EAAE;gBACzC,IAAI,CAAC,CAAC,WAAW,KAAK,IAAI,CAAC,CAAC,EAAI;oBAC/B,IAAI,CAAC,CAAC,CAAY,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;iBACvC;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,GAAG,CAAC,GAAW;YACd,OAAO,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,EAAI,GAAG,CAAC,CAAC;QAC7C,CAAC;QAED,KAAK,CAAC,GAAW,EAAE,KAAa;YAC/B,OAAO,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,EAAI,GAAG,EAAE,KAAK,CAAC,CAAC;QACtD,CAAC;QAED,MAAM,CAAC,GAAW;YACjB,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,EAAI,GAAG,CAAC,CAAC;QAChD,CAAC;KACD;IA/BD,oBA+BC","file":"extHostSecrets.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/* eslint-disable local/code-no-native-private */\n\nimport type * as vscode from 'vscode';\n\nimport { ExtHostSecretState } from 'vs/workbench/api/common/extHostSecretState';\nimport { ExtensionIdentifier, IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { Emitter, Event } from 'vs/base/common/event';\n\nexport class ExtensionSecrets implements vscode.SecretStorage {\n\n\tprotected readonly _id: string;\n\treadonly #secretState: ExtHostSecretState;\n\n\tprivate _onDidChange = new Emitter<vscode.SecretStorageChangeEvent>();\n\treadonly onDidChange: Event<vscode.SecretStorageChangeEvent> = this._onDidChange.event;\n\n\n\tconstructor(extensionDescription: IExtensionDescription, secretState: ExtHostSecretState) {\n\t\tthis._id = ExtensionIdentifier.toKey(extensionDescription.identifier);\n\t\tthis.#secretState = secretState;\n\n\t\tthis.#secretState.onDidChangePassword(e => {\n\t\t\tif (e.extensionId === this._id) {\n\t\t\t\tthis._onDidChange.fire({ key: e.key });\n\t\t\t}\n\t\t});\n\t}\n\n\tget(key: string): Promise<string | undefined> {\n\t\treturn this.#secretState.get(this._id, key);\n\t}\n\n\tstore(key: string, value: string): Promise<void> {\n\t\treturn this.#secretState.store(this._id, key, value);\n\t}\n\n\tdelete(key: string): Promise<void> {\n\t\treturn this.#secretState.delete(this._id, key);\n\t}\n}\n"]}