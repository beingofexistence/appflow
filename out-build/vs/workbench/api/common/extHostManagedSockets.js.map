{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostManagedSockets.ts"],"names":[],"mappings":"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","file":"extHostManagedSockets.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ExtHostManagedSocketsShape, MainContext, MainThreadManagedSocketsShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport * as vscode from 'vscode';\nimport { Disposable, DisposableStore, toDisposable } from 'vs/base/common/lifecycle';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { VSBuffer } from 'vs/base/common/buffer';\n\nexport interface IExtHostManagedSockets extends ExtHostManagedSocketsShape {\n\tsetFactory(socketFactoryId: number, makeConnection: () => Thenable<vscode.ManagedMessagePassing>): void;\n\treadonly _serviceBrand: undefined;\n}\n\nexport const IExtHostManagedSockets = createDecorator<IExtHostManagedSockets>('IExtHostManagedSockets');\n\nexport class ExtHostManagedSockets implements IExtHostManagedSockets {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _proxy: MainThreadManagedSocketsShape;\n\tprivate _remoteSocketIdCounter = 0;\n\tprivate _factory: ManagedSocketFactory | null = null;\n\tprivate readonly _managedRemoteSockets: Map<number, ManagedSocket> = new Map();\n\n\tconstructor(\n\t\t@IExtHostRpcService extHostRpc: IExtHostRpcService,\n\t) {\n\t\tthis._proxy = extHostRpc.getProxy(MainContext.MainThreadManagedSockets);\n\t}\n\n\tsetFactory(socketFactoryId: number, makeConnection: () => Thenable<vscode.ManagedMessagePassing>): void {\n\t\t// Terminate all previous sockets\n\t\tfor (const socket of this._managedRemoteSockets.values()) {\n\t\t\t// calling dispose() will lead to it removing itself from the map\n\t\t\tsocket.dispose();\n\t\t}\n\t\t// Unregister previous factory\n\t\tif (this._factory) {\n\t\t\tthis._proxy.$unregisterSocketFactory(this._factory.socketFactoryId);\n\t\t}\n\n\t\tthis._factory = new ManagedSocketFactory(socketFactoryId, makeConnection);\n\t\tthis._proxy.$registerSocketFactory(this._factory.socketFactoryId);\n\t}\n\n\tasync $openRemoteSocket(socketFactoryId: number): Promise<number> {\n\t\tif (!this._factory || this._factory.socketFactoryId !== socketFactoryId) {\n\t\t\tthrow new Error(`No socket factory with id ${socketFactoryId}`);\n\t\t}\n\n\t\tconst id = (++this._remoteSocketIdCounter);\n\t\tconst socket = await this._factory.makeConnection();\n\t\tconst disposable = new DisposableStore();\n\t\tthis._managedRemoteSockets.set(id, new ManagedSocket(id, socket, disposable));\n\n\t\tdisposable.add(toDisposable(() => this._managedRemoteSockets.delete(id)));\n\t\tdisposable.add(socket.onDidEnd(() => {\n\t\t\tthis._proxy.$onDidManagedSocketEnd(id);\n\t\t\tdisposable.dispose();\n\t\t}));\n\t\tdisposable.add(socket.onDidClose(e => {\n\t\t\tthis._proxy.$onDidManagedSocketClose(id, e?.stack ?? e?.message);\n\t\t\tdisposable.dispose();\n\t\t}));\n\t\tdisposable.add(socket.onDidReceiveMessage(e => this._proxy.$onDidManagedSocketHaveData(id, VSBuffer.wrap(e))));\n\n\t\treturn id;\n\t}\n\n\t$remoteSocketWrite(socketId: number, buffer: VSBuffer): void {\n\t\tthis._managedRemoteSockets.get(socketId)?.actual.send(buffer.buffer);\n\t}\n\n\t$remoteSocketEnd(socketId: number): void {\n\t\tconst socket = this._managedRemoteSockets.get(socketId);\n\t\tif (socket) {\n\t\t\tsocket.actual.end();\n\t\t\tsocket.dispose();\n\t\t}\n\t}\n\n\tasync $remoteSocketDrain(socketId: number): Promise<void> {\n\t\tawait this._managedRemoteSockets.get(socketId)?.actual.drain?.();\n\t}\n}\n\nclass ManagedSocketFactory {\n\tconstructor(\n\t\tpublic readonly socketFactoryId: number,\n\t\tpublic readonly makeConnection: () => Thenable<vscode.ManagedMessagePassing>,\n\t) { }\n}\n\nclass ManagedSocket extends Disposable {\n\tconstructor(\n\t\tpublic readonly socketId: number,\n\t\tpublic readonly actual: vscode.ManagedMessagePassing,\n\t\tdisposer: DisposableStore,\n\t) {\n\t\tsuper();\n\t\tthis._register(disposer);\n\t}\n}\n"]}