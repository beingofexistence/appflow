{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostStorage.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAehG,MAAa,IAAI;QAShB,YACC,WAAgB,EACC,CAAgB;YAAhB,MAAC,GAAD,CAAC,CAAe;YALjB,MAAC,GAAqB,IAAI,WAAG,EAA2B,CAAC;YACjE,uBAAkB,GAAG,IAAI,CAAC,CAAC,CAAmB,KAAK,CAAC;YAM5D,IAAI,CAAC,CAAC,GAAQ,WAAW,CAAC,QAAQ,CAAC,sBAAG,CAAS,iBAAiB,CAAC,CAAC;QACnE,CAAC;QAED,kCAAkC,CAAC,SAAkC,EAAE,IAAc;YACpF,IAAI,CAAC,CAAC,CAAM,mCAAmC,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QAClE,CAAC;QAED,KAAK,CAAC,0BAA0B,CAAC,MAAe,EAAE,GAAW,EAAE,YAAqB;YACnF,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,CAAC,CAAM,2BAA2B,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;YAEzE,IAAI,WAA+B,CAAC;YACpC,IAAI,KAAK,EAAE;gBACV,WAAW,GAAG,IAAI,CAAC,CAAC,CAAc,MAAM,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;aACtD;YAED,OAAO,WAAW,IAAI,YAAY,CAAC;QACpC,CAAC;QAED,QAAQ,CAAC,MAAe,EAAE,GAAW,EAAE,KAAa;YACnD,OAAO,IAAI,CAAC,CAAC,CAAM,SAAS,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;QAClD,CAAC;QAED,YAAY,CAAC,MAAe,EAAE,GAAW,EAAE,KAAa;YACvD,MAAM,WAAW,GAAG,IAAI,CAAC,CAAC,CAAc,MAAM,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;YAC5D,IAAI,WAAW,EAAE;gBAChB,IAAI,CAAC,CAAC,CAAmB,IAAI,CAAC,EAAE,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC,CAAC;aACnE;QACF,CAAC;QAEO,CAAC,CAAc,MAAe,EAAE,GAAW,EAAE,KAAa;YACjE,IAAI;gBACH,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aACzB;YAAC,OAAO,KAAK,EAAE;gBACf,mDAAmD;gBACnD,oDAAoD;gBACpD,IAAI,CAAC,CAAC,CAAW,KAAK,CAAC,4EAA4E,GAAG,aAAa,MAAM,MAAM,KAAK,EAAE,CAAC,CAAC;aACxI;YAED,OAAO,SAAS,CAAC;QAClB,CAAC;KACD;IArDD,oBAqDC;IAGY,QAAA,IAAI,GAAc,IAAA,mBAAG,EAA8B,iBAAiB,CAAC,CAAC","file":"extHostStorage.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MainContext, MainThreadStorageShape, ExtHostStorageShape } from './extHost.protocol';\nimport { Emitter } from 'vs/base/common/event';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IExtensionIdWithVersion } from 'vs/platform/extensionManagement/common/extensionStorage';\nimport { ILogService } from 'vs/platform/log/common/log';\n\nexport interface IStorageChangeEvent {\n\tshared: boolean;\n\tkey: string;\n\tvalue: object;\n}\n\nexport class ExtHostStorage implements ExtHostStorageShape {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate _proxy: MainThreadStorageShape;\n\n\tprivate readonly _onDidChangeStorage = new Emitter<IStorageChangeEvent>();\n\treadonly onDidChangeStorage = this._onDidChangeStorage.event;\n\n\tconstructor(\n\t\tmainContext: IExtHostRpcService,\n\t\tprivate readonly _logService: ILogService\n\t) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadStorage);\n\t}\n\n\tregisterExtensionStorageKeysToSync(extension: IExtensionIdWithVersion, keys: string[]): void {\n\t\tthis._proxy.$registerExtensionStorageKeysToSync(extension, keys);\n\t}\n\n\tasync initializeExtensionStorage(shared: boolean, key: string, defaultValue?: object): Promise<object | undefined> {\n\t\tconst value = await this._proxy.$initializeExtensionStorage(shared, key);\n\n\t\tlet parsedValue: object | undefined;\n\t\tif (value) {\n\t\t\tparsedValue = this.safeParseValue(shared, key, value);\n\t\t}\n\n\t\treturn parsedValue || defaultValue;\n\t}\n\n\tsetValue(shared: boolean, key: string, value: object): Promise<void> {\n\t\treturn this._proxy.$setValue(shared, key, value);\n\t}\n\n\t$acceptValue(shared: boolean, key: string, value: string): void {\n\t\tconst parsedValue = this.safeParseValue(shared, key, value);\n\t\tif (parsedValue) {\n\t\t\tthis._onDidChangeStorage.fire({ shared, key, value: parsedValue });\n\t\t}\n\t}\n\n\tprivate safeParseValue(shared: boolean, key: string, value: string): object | undefined {\n\t\ttry {\n\t\t\treturn JSON.parse(value);\n\t\t} catch (error) {\n\t\t\t// Do not fail this call but log it for diagnostics\n\t\t\t// https://github.com/microsoft/vscode/issues/132777\n\t\t\tthis._logService.error(`[extHostStorage] unexpected error parsing storage contents (extensionId: ${key}, global: ${shared}): ${error}`);\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n\nexport interface IExtHostStorage extends ExtHostStorage { }\nexport const IExtHostStorage = createDecorator<IExtHostStorage>('IExtHostStorage');\n"]}