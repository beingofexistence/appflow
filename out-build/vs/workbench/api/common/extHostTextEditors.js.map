{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/common/extHostTextEditors.ts"],"names":[],"mappings":"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","file":"extHostTextEditors.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from 'vs/base/common/arrays';\nimport { onUnexpectedExternalError } from 'vs/base/common/errors';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { ExtHostEditorsShape, IEditorPropertiesChangeData, IMainContext, ITextDocumentShowOptions, ITextEditorPositionData, MainContext, MainThreadTextEditorsShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { ExtHostDocumentsAndEditors } from 'vs/workbench/api/common/extHostDocumentsAndEditors';\nimport { ExtHostTextEditor, TextEditorDecorationType } from 'vs/workbench/api/common/extHostTextEditor';\nimport * as TypeConverters from 'vs/workbench/api/common/extHostTypeConverters';\nimport { TextEditorSelectionChangeKind } from 'vs/workbench/api/common/extHostTypes';\nimport * as vscode from 'vscode';\n\nexport class ExtHostEditors implements ExtHostEditorsShape {\n\n\tprivate readonly _onDidChangeTextEditorSelection = new Emitter<vscode.TextEditorSelectionChangeEvent>({ onListenerError: onUnexpectedExternalError });\n\tprivate readonly _onDidChangeTextEditorOptions = new Emitter<vscode.TextEditorOptionsChangeEvent>({ onListenerError: onUnexpectedExternalError });\n\tprivate readonly _onDidChangeTextEditorVisibleRanges = new Emitter<vscode.TextEditorVisibleRangesChangeEvent>({ onListenerError: onUnexpectedExternalError });\n\tprivate readonly _onDidChangeTextEditorViewColumn = new Emitter<vscode.TextEditorViewColumnChangeEvent>({ onListenerError: onUnexpectedExternalError });\n\tprivate readonly _onDidChangeActiveTextEditor = new Emitter<vscode.TextEditor | undefined>({ onListenerError: onUnexpectedExternalError });\n\tprivate readonly _onDidChangeVisibleTextEditors = new Emitter<readonly vscode.TextEditor[]>({ onListenerError: onUnexpectedExternalError });\n\n\treadonly onDidChangeTextEditorSelection: Event<vscode.TextEditorSelectionChangeEvent> = this._onDidChangeTextEditorSelection.event;\n\treadonly onDidChangeTextEditorOptions: Event<vscode.TextEditorOptionsChangeEvent> = this._onDidChangeTextEditorOptions.event;\n\treadonly onDidChangeTextEditorVisibleRanges: Event<vscode.TextEditorVisibleRangesChangeEvent> = this._onDidChangeTextEditorVisibleRanges.event;\n\treadonly onDidChangeTextEditorViewColumn: Event<vscode.TextEditorViewColumnChangeEvent> = this._onDidChangeTextEditorViewColumn.event;\n\treadonly onDidChangeActiveTextEditor: Event<vscode.TextEditor | undefined> = this._onDidChangeActiveTextEditor.event;\n\treadonly onDidChangeVisibleTextEditors: Event<readonly vscode.TextEditor[]> = this._onDidChangeVisibleTextEditors.event;\n\n\tprivate readonly _proxy: MainThreadTextEditorsShape;\n\n\tconstructor(\n\t\tmainContext: IMainContext,\n\t\tprivate readonly _extHostDocumentsAndEditors: ExtHostDocumentsAndEditors,\n\t) {\n\t\tthis._proxy = mainContext.getProxy(MainContext.MainThreadTextEditors);\n\n\n\t\tthis._extHostDocumentsAndEditors.onDidChangeVisibleTextEditors(e => this._onDidChangeVisibleTextEditors.fire(e));\n\t\tthis._extHostDocumentsAndEditors.onDidChangeActiveTextEditor(e => this._onDidChangeActiveTextEditor.fire(e));\n\t}\n\n\tgetActiveTextEditor(): vscode.TextEditor | undefined {\n\t\treturn this._extHostDocumentsAndEditors.activeEditor();\n\t}\n\n\tgetVisibleTextEditors(): vscode.TextEditor[];\n\tgetVisibleTextEditors(internal: true): ExtHostTextEditor[];\n\tgetVisibleTextEditors(internal?: true): ExtHostTextEditor[] | vscode.TextEditor[] {\n\t\tconst editors = this._extHostDocumentsAndEditors.allEditors();\n\t\treturn internal\n\t\t\t? editors\n\t\t\t: editors.map(editor => editor.value);\n\t}\n\n\tshowTextDocument(document: vscode.TextDocument, column: vscode.ViewColumn, preserveFocus: boolean): Promise<vscode.TextEditor>;\n\tshowTextDocument(document: vscode.TextDocument, options: { column: vscode.ViewColumn; preserveFocus: boolean; pinned: boolean }): Promise<vscode.TextEditor>;\n\tshowTextDocument(document: vscode.TextDocument, columnOrOptions: vscode.ViewColumn | vscode.TextDocumentShowOptions | undefined, preserveFocus?: boolean): Promise<vscode.TextEditor>;\n\tasync showTextDocument(document: vscode.TextDocument, columnOrOptions: vscode.ViewColumn | vscode.TextDocumentShowOptions | undefined, preserveFocus?: boolean): Promise<vscode.TextEditor> {\n\t\tlet options: ITextDocumentShowOptions;\n\t\tif (typeof columnOrOptions === 'number') {\n\t\t\toptions = {\n\t\t\t\tposition: TypeConverters.ViewColumn.from(columnOrOptions),\n\t\t\t\tpreserveFocus\n\t\t\t};\n\t\t} else if (typeof columnOrOptions === 'object') {\n\t\t\toptions = {\n\t\t\t\tposition: TypeConverters.ViewColumn.from(columnOrOptions.viewColumn),\n\t\t\t\tpreserveFocus: columnOrOptions.preserveFocus,\n\t\t\t\tselection: typeof columnOrOptions.selection === 'object' ? TypeConverters.Range.from(columnOrOptions.selection) : undefined,\n\t\t\t\tpinned: typeof columnOrOptions.preview === 'boolean' ? !columnOrOptions.preview : undefined\n\t\t\t};\n\t\t} else {\n\t\t\toptions = {\n\t\t\t\tpreserveFocus: false\n\t\t\t};\n\t\t}\n\n\t\tconst editorId = await this._proxy.$tryShowTextDocument(document.uri, options);\n\t\tconst editor = editorId && this._extHostDocumentsAndEditors.getEditor(editorId);\n\t\tif (editor) {\n\t\t\treturn editor.value;\n\t\t}\n\t\t// we have no editor... having an id means that we had an editor\n\t\t// on the main side and that it isn't the current editor anymore...\n\t\tif (editorId) {\n\t\t\tthrow new Error(`Could NOT open editor for \"${document.uri.toString()}\" because another editor opened in the meantime.`);\n\t\t} else {\n\t\t\tthrow new Error(`Could NOT open editor for \"${document.uri.toString()}\".`);\n\t\t}\n\t}\n\n\tcreateTextEditorDecorationType(extension: IExtensionDescription, options: vscode.DecorationRenderOptions): vscode.TextEditorDecorationType {\n\t\treturn new TextEditorDecorationType(this._proxy, extension, options).value;\n\t}\n\n\t// --- called from main thread\n\n\t$acceptEditorPropertiesChanged(id: string, data: IEditorPropertiesChangeData): void {\n\t\tconst textEditor = this._extHostDocumentsAndEditors.getEditor(id);\n\t\tif (!textEditor) {\n\t\t\tthrow new Error('unknown text editor');\n\t\t}\n\n\t\t// (1) set all properties\n\t\tif (data.options) {\n\t\t\ttextEditor._acceptOptions(data.options);\n\t\t}\n\t\tif (data.selections) {\n\t\t\tconst selections = data.selections.selections.map(TypeConverters.Selection.to);\n\t\t\ttextEditor._acceptSelections(selections);\n\t\t}\n\t\tif (data.visibleRanges) {\n\t\t\tconst visibleRanges = arrays.coalesce(data.visibleRanges.map(TypeConverters.Range.to));\n\t\t\ttextEditor._acceptVisibleRanges(visibleRanges);\n\t\t}\n\n\t\t// (2) fire change events\n\t\tif (data.options) {\n\t\t\tthis._onDidChangeTextEditorOptions.fire({\n\t\t\t\ttextEditor: textEditor.value,\n\t\t\t\toptions: { ...data.options, lineNumbers: TypeConverters.TextEditorLineNumbersStyle.to(data.options.lineNumbers) }\n\t\t\t});\n\t\t}\n\t\tif (data.selections) {\n\t\t\tconst kind = TextEditorSelectionChangeKind.fromValue(data.selections.source);\n\t\t\tconst selections = data.selections.selections.map(TypeConverters.Selection.to);\n\t\t\tthis._onDidChangeTextEditorSelection.fire({\n\t\t\t\ttextEditor: textEditor.value,\n\t\t\t\tselections,\n\t\t\t\tkind\n\t\t\t});\n\t\t}\n\t\tif (data.visibleRanges) {\n\t\t\tconst visibleRanges = arrays.coalesce(data.visibleRanges.map(TypeConverters.Range.to));\n\t\t\tthis._onDidChangeTextEditorVisibleRanges.fire({\n\t\t\t\ttextEditor: textEditor.value,\n\t\t\t\tvisibleRanges\n\t\t\t});\n\t\t}\n\t}\n\n\t$acceptEditorPositionData(data: ITextEditorPositionData): void {\n\t\tfor (const id in data) {\n\t\t\tconst textEditor = this._extHostDocumentsAndEditors.getEditor(id);\n\t\t\tif (!textEditor) {\n\t\t\t\tthrow new Error('Unknown text editor');\n\t\t\t}\n\t\t\tconst viewColumn = TypeConverters.ViewColumn.to(data[id]);\n\t\t\tif (textEditor.value.viewColumn !== viewColumn) {\n\t\t\t\ttextEditor._acceptViewColumn(viewColumn);\n\t\t\t\tthis._onDidChangeTextEditorViewColumn.fire({ textEditor: textEditor.value, viewColumn });\n\t\t\t}\n\t\t}\n\t}\n\n\tgetDiffInformation(id: string): Promise<vscode.LineChange[]> {\n\t\treturn Promise.resolve(this._proxy.$getDiffInformation(id));\n\t}\n}\n"]}