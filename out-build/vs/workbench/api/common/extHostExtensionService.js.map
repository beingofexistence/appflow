{"version":3,"sources":["vs/workbench/api/common/extHostExtensionService.ts"],"names":[],"mappings":"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","file":"extHostExtensionService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/* eslint-disable local/code-no-native-private */\n\nimport * as nls from 'vs/nls';\nimport * as path from 'vs/base/common/path';\nimport * as performance from 'vs/base/common/performance';\nimport { originalFSPath, joinPath, extUriBiasedIgnorePathCase } from 'vs/base/common/resources';\nimport { asPromise, Barrier, IntervalTimer, timeout } from 'vs/base/common/async';\nimport { dispose, toDisposable, Disposable } from 'vs/base/common/lifecycle';\nimport { TernarySearchTree } from 'vs/base/common/ternarySearchTree';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ExtHostExtensionServiceShape, MainContext, MainThreadExtensionServiceShape, MainThreadTelemetryShape, MainThreadWorkspaceShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { IExtensionDescriptionDelta, IExtensionHostInitData } from 'vs/workbench/services/extensions/common/extensionHostProtocol';\nimport { ExtHostConfiguration, IExtHostConfiguration } from 'vs/workbench/api/common/extHostConfiguration';\nimport { ActivatedExtension, EmptyExtension, ExtensionActivationTimes, ExtensionActivationTimesBuilder, ExtensionsActivator, IExtensionAPI, IExtensionModule, HostExtension, ExtensionActivationTimesFragment } from 'vs/workbench/api/common/extHostExtensionActivator';\nimport { ExtHostStorage, IExtHostStorage } from 'vs/workbench/api/common/extHostStorage';\nimport { ExtHostWorkspace, IExtHostWorkspace } from 'vs/workbench/api/common/extHostWorkspace';\nimport { MissingExtensionDependency, ActivationKind, checkProposedApiEnabled, isProposedApiEnabled, ExtensionActivationReason } from 'vs/workbench/services/extensions/common/extensions';\nimport { ExtensionDescriptionRegistry, IActivationEventsReader } from 'vs/workbench/services/extensions/common/extensionDescriptionRegistry';\nimport * as errors from 'vs/base/common/errors';\nimport type * as vscode from 'vscode';\nimport { ExtensionIdentifier, ExtensionIdentifierMap, ExtensionIdentifierSet, IExtensionDescription, IRelaxedExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { ExtensionGlobalMemento, ExtensionMemento } from 'vs/workbench/api/common/extHostMemento';\nimport { RemoteAuthorityResolverError, ExtensionKind, ExtensionMode, ExtensionRuntime, ManagedResolvedAuthority as ExtHostManagedResolvedAuthority } from 'vs/workbench/api/common/extHostTypes';\nimport { ResolvedAuthority, ResolvedOptions, RemoteAuthorityResolverErrorCode, IRemoteConnectionData, getRemoteAuthorityPrefix, TunnelInformation, ManagedRemoteConnection, WebSocketRemoteConnection } from 'vs/platform/remote/common/remoteAuthorityResolver';\nimport { IInstantiationService, createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IExtHostInitDataService } from 'vs/workbench/api/common/extHostInitDataService';\nimport { IExtensionStoragePaths } from 'vs/workbench/api/common/extHostStoragePaths';\nimport { IExtHostRpcService } from 'vs/workbench/api/common/extHostRpcService';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { IExtHostTunnelService } from 'vs/workbench/api/common/extHostTunnelService';\nimport { IExtHostTerminalService } from 'vs/workbench/api/common/extHostTerminalService';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IExtensionActivationHost, checkActivateWorkspaceContainsExtension } from 'vs/workbench/services/extensions/common/workspaceContains';\nimport { ExtHostSecretState, IExtHostSecretState } from 'vs/workbench/api/common/extHostSecretState';\nimport { ExtensionSecrets } from 'vs/workbench/api/common/extHostSecrets';\nimport { Schemas } from 'vs/base/common/network';\nimport { IResolveAuthorityResult } from 'vs/workbench/services/extensions/common/extensionHostProxy';\nimport { IExtHostLocalizationService } from 'vs/workbench/api/common/extHostLocalizationService';\nimport { StopWatch } from 'vs/base/common/stopwatch';\nimport { isCI, setTimeout0 } from 'vs/base/common/platform';\nimport { IExtHostManagedSockets } from 'vs/workbench/api/common/extHostManagedSockets';\nimport { Dto } from 'vs/workbench/services/extensions/common/proxyIdentifier';\n\ninterface ITestRunner {\n\t/** Old test runner API, as exported from `vscode/lib/testrunner` */\n\trun(testsRoot: string, clb: (error: Error, failures?: number) => void): void;\n}\n\ninterface INewTestRunner {\n\t/** New test runner API, as explained in the extension test doc */\n\trun(): Promise<void>;\n}\n\nexport const IHostUtils = createDecorator<IHostUtils>('IHostUtils');\n\nexport interface IHostUtils {\n\treadonly _serviceBrand: undefined;\n\treadonly pid: number | undefined;\n\texit(code: number): void;\n\tfsExists?(path: string): Promise<boolean>;\n\tfsRealpath?(path: string): Promise<string>;\n}\n\ntype TelemetryActivationEventFragment = {\n\tid: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'The identifier of an extension' };\n\tname: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'The name of the extension' };\n\textensionVersion: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'The version of the extension' };\n\tpublisherDisplayName: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The publisher of the extension' };\n\tactivationEvents: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'All activation events of the extension' };\n\tisBuiltin: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'If the extension is builtin or git installed' };\n\treason: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The activation event' };\n\treasonId: { classification: 'PublicNonPersonalData'; purpose: 'FeatureInsight'; comment: 'The identifier of the activation event' };\n};\n\nexport abstract class AbstractExtHostExtensionService extends Disposable implements ExtHostExtensionServiceShape {\n\n\treadonly _serviceBrand: undefined;\n\n\tabstract readonly extensionRuntime: ExtensionRuntime;\n\n\tprivate readonly _onDidChangeRemoteConnectionData = this._register(new Emitter<void>());\n\tpublic readonly onDidChangeRemoteConnectionData = this._onDidChangeRemoteConnectionData.event;\n\n\tprotected readonly _hostUtils: IHostUtils;\n\tprotected readonly _initData: IExtensionHostInitData;\n\tprotected readonly _extHostContext: IExtHostRpcService;\n\tprotected readonly _instaService: IInstantiationService;\n\tprotected readonly _extHostWorkspace: ExtHostWorkspace;\n\tprotected readonly _extHostConfiguration: ExtHostConfiguration;\n\tprotected readonly _logService: ILogService;\n\tprotected readonly _extHostTunnelService: IExtHostTunnelService;\n\tprotected readonly _extHostTerminalService: IExtHostTerminalService;\n\tprotected readonly _extHostLocalizationService: IExtHostLocalizationService;\n\n\tprotected readonly _mainThreadWorkspaceProxy: MainThreadWorkspaceShape;\n\tprotected readonly _mainThreadTelemetryProxy: MainThreadTelemetryShape;\n\tprotected readonly _mainThreadExtensionsProxy: MainThreadExtensionServiceShape;\n\n\tprivate readonly _almostReadyToRunExtensions: Barrier;\n\tprivate readonly _readyToStartExtensionHost: Barrier;\n\tprivate readonly _readyToRunExtensions: Barrier;\n\tprivate readonly _eagerExtensionsActivated: Barrier;\n\n\tprivate readonly _activationEventsReader: SyncedActivationEventsReader;\n\tprotected readonly _myRegistry: ExtensionDescriptionRegistry;\n\tprotected readonly _globalRegistry: ExtensionDescriptionRegistry;\n\tprivate readonly _storage: ExtHostStorage;\n\tprivate readonly _secretState: ExtHostSecretState;\n\tprivate readonly _storagePath: IExtensionStoragePaths;\n\tprivate readonly _activator: ExtensionsActivator;\n\tprivate _extensionPathIndex: Promise<ExtensionPaths> | null;\n\n\tprivate readonly _resolvers: { [authorityPrefix: string]: vscode.RemoteAuthorityResolver };\n\n\tprivate _started: boolean;\n\tprivate _isTerminating: boolean = false;\n\tprivate _remoteConnectionData: IRemoteConnectionData | null;\n\n\tconstructor(\n\t\t@IInstantiationService instaService: IInstantiationService,\n\t\t@IHostUtils hostUtils: IHostUtils,\n\t\t@IExtHostRpcService extHostContext: IExtHostRpcService,\n\t\t@IExtHostWorkspace extHostWorkspace: IExtHostWorkspace,\n\t\t@IExtHostConfiguration extHostConfiguration: IExtHostConfiguration,\n\t\t@ILogService logService: ILogService,\n\t\t@IExtHostInitDataService initData: IExtHostInitDataService,\n\t\t@IExtensionStoragePaths storagePath: IExtensionStoragePaths,\n\t\t@IExtHostTunnelService extHostTunnelService: IExtHostTunnelService,\n\t\t@IExtHostTerminalService extHostTerminalService: IExtHostTerminalService,\n\t\t@IExtHostLocalizationService extHostLocalizationService: IExtHostLocalizationService,\n\t\t@IExtHostManagedSockets private readonly _extHostManagedSockets: IExtHostManagedSockets,\n\t) {\n\t\tsuper();\n\t\tthis._hostUtils = hostUtils;\n\t\tthis._extHostContext = extHostContext;\n\t\tthis._initData = initData;\n\n\t\tthis._extHostWorkspace = extHostWorkspace;\n\t\tthis._extHostConfiguration = extHostConfiguration;\n\t\tthis._logService = logService;\n\t\tthis._extHostTunnelService = extHostTunnelService;\n\t\tthis._extHostTerminalService = extHostTerminalService;\n\t\tthis._extHostLocalizationService = extHostLocalizationService;\n\n\t\tthis._mainThreadWorkspaceProxy = this._extHostContext.getProxy(MainContext.MainThreadWorkspace);\n\t\tthis._mainThreadTelemetryProxy = this._extHostContext.getProxy(MainContext.MainThreadTelemetry);\n\t\tthis._mainThreadExtensionsProxy = this._extHostContext.getProxy(MainContext.MainThreadExtensionService);\n\n\t\tthis._almostReadyToRunExtensions = new Barrier();\n\t\tthis._readyToStartExtensionHost = new Barrier();\n\t\tthis._readyToRunExtensions = new Barrier();\n\t\tthis._eagerExtensionsActivated = new Barrier();\n\t\tthis._activationEventsReader = new SyncedActivationEventsReader(this._initData.extensions.activationEvents);\n\t\tthis._globalRegistry = new ExtensionDescriptionRegistry(this._activationEventsReader, this._initData.extensions.allExtensions);\n\t\tconst myExtensionsSet = new ExtensionIdentifierSet(this._initData.extensions.myExtensions);\n\t\tthis._myRegistry = new ExtensionDescriptionRegistry(\n\t\t\tthis._activationEventsReader,\n\t\t\tfilterExtensions(this._globalRegistry, myExtensionsSet)\n\t\t);\n\n\t\tif (isCI) {\n\t\t\tthis._logService.info(`Creating extension host with the following global extensions: ${printExtIds(this._globalRegistry)}`);\n\t\t\tthis._logService.info(`Creating extension host with the following local extensions: ${printExtIds(this._myRegistry)}`);\n\t\t}\n\n\t\tthis._storage = new ExtHostStorage(this._extHostContext, this._logService);\n\t\tthis._secretState = new ExtHostSecretState(this._extHostContext);\n\t\tthis._storagePath = storagePath;\n\n\t\tthis._instaService = instaService.createChild(new ServiceCollection(\n\t\t\t[IExtHostStorage, this._storage],\n\t\t\t[IExtHostSecretState, this._secretState]\n\t\t));\n\n\t\tthis._activator = this._register(new ExtensionsActivator(\n\t\t\tthis._myRegistry,\n\t\t\tthis._globalRegistry,\n\t\t\t{\n\t\t\t\tonExtensionActivationError: (extensionId: ExtensionIdentifier, error: Error, missingExtensionDependency: MissingExtensionDependency | null): void => {\n\t\t\t\t\tthis._mainThreadExtensionsProxy.$onExtensionActivationError(extensionId, errors.transformErrorForSerialization(error), missingExtensionDependency);\n\t\t\t\t},\n\n\t\t\t\tactualActivateExtension: async (extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<ActivatedExtension> => {\n\t\t\t\t\tif (ExtensionDescriptionRegistry.isHostExtension(extensionId, this._myRegistry, this._globalRegistry)) {\n\t\t\t\t\t\tawait this._mainThreadExtensionsProxy.$activateExtension(extensionId, reason);\n\t\t\t\t\t\treturn new HostExtension();\n\t\t\t\t\t}\n\t\t\t\t\tconst extensionDescription = this._myRegistry.getExtensionDescription(extensionId)!;\n\t\t\t\t\treturn this._activateExtension(extensionDescription, reason);\n\t\t\t\t}\n\t\t\t},\n\t\t\tthis._logService\n\t\t));\n\t\tthis._extensionPathIndex = null;\n\t\tthis._resolvers = Object.create(null);\n\t\tthis._started = false;\n\t\tthis._remoteConnectionData = this._initData.remote.connectionData;\n\t}\n\n\tpublic getRemoteConnectionData(): IRemoteConnectionData | null {\n\t\treturn this._remoteConnectionData;\n\t}\n\n\tpublic async initialize(): Promise<void> {\n\t\ttry {\n\n\t\t\tawait this._beforeAlmostReadyToRunExtensions();\n\t\t\tthis._almostReadyToRunExtensions.open();\n\n\t\t\tawait this._extHostWorkspace.waitForInitializeCall();\n\t\t\tperformance.mark('code/extHost/ready');\n\t\t\tthis._readyToStartExtensionHost.open();\n\n\t\t\tif (this._initData.autoStart) {\n\t\t\t\tthis._startExtensionHost();\n\t\t\t}\n\t\t} catch (err) {\n\t\t\terrors.onUnexpectedError(err);\n\t\t}\n\t}\n\n\tprivate async _deactivateAll(): Promise<void> {\n\t\tthis._storagePath.onWillDeactivateAll();\n\n\t\tlet allPromises: Promise<void>[] = [];\n\t\ttry {\n\t\t\tconst allExtensions = this._myRegistry.getAllExtensionDescriptions();\n\t\t\tconst allExtensionsIds = allExtensions.map(ext => ext.identifier);\n\t\t\tconst activatedExtensions = allExtensionsIds.filter(id => this.isActivated(id));\n\n\t\t\tallPromises = activatedExtensions.map((extensionId) => {\n\t\t\t\treturn this._deactivate(extensionId);\n\t\t\t});\n\t\t} catch (err) {\n\t\t\t// TODO: write to log once we have one\n\t\t}\n\t\tawait Promise.all(allPromises);\n\t}\n\n\tpublic terminate(reason: string, code: number = 0): void {\n\t\tif (this._isTerminating) {\n\t\t\t// we are already shutting down...\n\t\t\treturn;\n\t\t}\n\t\tthis._isTerminating = true;\n\t\tthis._logService.info(`Extension host terminating: ${reason}`);\n\t\tthis._logService.flush();\n\n\t\tthis._extHostTerminalService.dispose();\n\t\tthis._activator.dispose();\n\n\t\terrors.setUnexpectedErrorHandler((err) => {\n\t\t\tthis._logService.error(err);\n\t\t});\n\n\t\t// Invalidate all proxies\n\t\tthis._extHostContext.dispose();\n\n\t\tconst extensionsDeactivated = this._deactivateAll();\n\n\t\t// Give extensions at most 5 seconds to wrap up any async deactivate, then exit\n\t\tPromise.race([timeout(5000), extensionsDeactivated]).finally(() => {\n\t\t\tif (this._hostUtils.pid) {\n\t\t\t\tthis._logService.info(`Extension host with pid ${this._hostUtils.pid} exiting with code ${code}`);\n\t\t\t} else {\n\t\t\t\tthis._logService.info(`Extension host exiting with code ${code}`);\n\t\t\t}\n\t\t\tthis._logService.flush();\n\t\t\tthis._logService.dispose();\n\t\t\tthis._hostUtils.exit(code);\n\t\t});\n\t}\n\n\tpublic isActivated(extensionId: ExtensionIdentifier): boolean {\n\t\tif (this._readyToRunExtensions.isOpen()) {\n\t\t\treturn this._activator.isActivated(extensionId);\n\t\t}\n\t\treturn false;\n\t}\n\n\tpublic async getExtension(extensionId: string): Promise<IExtensionDescription | undefined> {\n\t\tconst ext = await this._mainThreadExtensionsProxy.$getExtension(extensionId);\n\t\treturn ext && {\n\t\t\t...ext,\n\t\t\tidentifier: new ExtensionIdentifier(ext.identifier.value),\n\t\t\textensionLocation: URI.revive(ext.extensionLocation)\n\t\t};\n\t}\n\n\tprivate _activateByEvent(activationEvent: string, startup: boolean): Promise<void> {\n\t\treturn this._activator.activateByEvent(activationEvent, startup);\n\t}\n\n\tprivate _activateById(extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<void> {\n\t\treturn this._activator.activateById(extensionId, reason);\n\t}\n\n\tpublic activateByIdWithErrors(extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<void> {\n\t\treturn this._activateById(extensionId, reason).then(() => {\n\t\t\tconst extension = this._activator.getActivatedExtension(extensionId);\n\t\t\tif (extension.activationFailed) {\n\t\t\t\t// activation failed => bubble up the error as the promise result\n\t\t\t\treturn Promise.reject(extension.activationFailedError);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t}\n\n\tpublic getExtensionRegistry(): Promise<ExtensionDescriptionRegistry> {\n\t\treturn this._readyToRunExtensions.wait().then(_ => this._myRegistry);\n\t}\n\n\tpublic getExtensionExports(extensionId: ExtensionIdentifier): IExtensionAPI | null | undefined {\n\t\tif (this._readyToRunExtensions.isOpen()) {\n\t\t\treturn this._activator.getActivatedExtension(extensionId).exports;\n\t\t} else {\n\t\t\ttry {\n\t\t\t\treturn this._activator.getActivatedExtension(extensionId).exports;\n\t\t\t} catch (err) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Applies realpath to file-uris and returns all others uris unmodified\n\t */\n\tprivate async _realPathExtensionUri(uri: URI): Promise<URI> {\n\t\tif (uri.scheme === Schemas.file && this._hostUtils.fsRealpath) {\n\t\t\tconst realpathValue = await this._hostUtils.fsRealpath(uri.fsPath);\n\t\t\treturn URI.file(realpathValue);\n\t\t}\n\t\treturn uri;\n\t}\n\n\t// create trie to enable fast 'filename -> extension id' look up\n\tpublic async getExtensionPathIndex(): Promise<ExtensionPaths> {\n\t\tif (!this._extensionPathIndex) {\n\t\t\tthis._extensionPathIndex = this._createExtensionPathIndex(this._myRegistry.getAllExtensionDescriptions()).then((searchTree) => {\n\t\t\t\treturn new ExtensionPaths(searchTree);\n\t\t\t});\n\t\t}\n\t\treturn this._extensionPathIndex;\n\t}\n\n\t/**\n\t * create trie to enable fast 'filename -> extension id' look up\n\t */\n\tprivate async _createExtensionPathIndex(extensions: IExtensionDescription[]): Promise<TernarySearchTree<URI, IExtensionDescription>> {\n\t\tconst tst = TernarySearchTree.forUris<IExtensionDescription>(key => {\n\t\t\t// using the default/biased extUri-util because the IExtHostFileSystemInfo-service\n\t\t\t// isn't ready to be used yet, e.g the knowledge about `file` protocol and others\n\t\t\t// comes in while this code runs\n\t\t\treturn extUriBiasedIgnorePathCase.ignorePathCasing(key);\n\t\t});\n\t\t// const tst = TernarySearchTree.forUris<IExtensionDescription>(key => true);\n\t\tawait Promise.all(extensions.map(async (ext) => {\n\t\t\tif (this._getEntryPoint(ext)) {\n\t\t\t\tconst uri = await this._realPathExtensionUri(ext.extensionLocation);\n\t\t\t\ttst.set(uri, ext);\n\t\t\t}\n\t\t}));\n\t\treturn tst;\n\t}\n\n\tprivate _deactivate(extensionId: ExtensionIdentifier): Promise<void> {\n\t\tlet result = Promise.resolve(undefined);\n\n\t\tif (!this._readyToRunExtensions.isOpen()) {\n\t\t\treturn result;\n\t\t}\n\n\t\tif (!this._activator.isActivated(extensionId)) {\n\t\t\treturn result;\n\t\t}\n\n\t\tconst extension = this._activator.getActivatedExtension(extensionId);\n\t\tif (!extension) {\n\t\t\treturn result;\n\t\t}\n\n\t\t// call deactivate if available\n\t\ttry {\n\t\t\tif (typeof extension.module.deactivate === 'function') {\n\t\t\t\tresult = Promise.resolve(extension.module.deactivate()).then(undefined, (err) => {\n\t\t\t\t\tthis._logService.error(err);\n\t\t\t\t\treturn Promise.resolve(undefined);\n\t\t\t\t});\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tthis._logService.error(`An error occurred when deactivating the extension '${extensionId.value}':`);\n\t\t\tthis._logService.error(err);\n\t\t}\n\n\t\t// clean up subscriptions\n\t\ttry {\n\t\t\tdispose(extension.subscriptions);\n\t\t} catch (err) {\n\t\t\tthis._logService.error(`An error occurred when deactivating the subscriptions for extension '${extensionId.value}':`);\n\t\t\tthis._logService.error(err);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t// --- impl\n\n\tprivate async _activateExtension(extensionDescription: IExtensionDescription, reason: ExtensionActivationReason): Promise<ActivatedExtension> {\n\t\tif (!this._initData.remote.isRemote) {\n\t\t\t// local extension host process\n\t\t\tawait this._mainThreadExtensionsProxy.$onWillActivateExtension(extensionDescription.identifier);\n\t\t} else {\n\t\t\t// remote extension host process\n\t\t\t// do not wait for renderer confirmation\n\t\t\tthis._mainThreadExtensionsProxy.$onWillActivateExtension(extensionDescription.identifier);\n\t\t}\n\t\treturn this._doActivateExtension(extensionDescription, reason).then((activatedExtension) => {\n\t\t\tconst activationTimes = activatedExtension.activationTimes;\n\t\t\tthis._mainThreadExtensionsProxy.$onDidActivateExtension(extensionDescription.identifier, activationTimes.codeLoadingTime, activationTimes.activateCallTime, activationTimes.activateResolvedTime, reason);\n\t\t\tthis._logExtensionActivationTimes(extensionDescription, reason, 'success', activationTimes);\n\t\t\treturn activatedExtension;\n\t\t}, (err) => {\n\t\t\tthis._logExtensionActivationTimes(extensionDescription, reason, 'failure');\n\t\t\tthrow err;\n\t\t});\n\t}\n\n\tprivate _logExtensionActivationTimes(extensionDescription: IExtensionDescription, reason: ExtensionActivationReason, outcome: string, activationTimes?: ExtensionActivationTimes) {\n\t\tconst event = getTelemetryActivationEvent(extensionDescription, reason);\n\t\ttype ExtensionActivationTimesClassification = {\n\t\t\towner: 'jrieken';\n\t\t\tcomment: 'Timestamps for extension activation';\n\t\t\toutcome: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Did extension activation succeed or fail' };\n\t\t} & TelemetryActivationEventFragment & ExtensionActivationTimesFragment;\n\n\t\ttype ExtensionActivationTimesEvent = {\n\t\t\toutcome: string;\n\t\t} & ActivationTimesEvent & TelemetryActivationEvent;\n\n\t\ttype ActivationTimesEvent = {\n\t\t\tstartup?: boolean;\n\t\t\tcodeLoadingTime?: number;\n\t\t\tactivateCallTime?: number;\n\t\t\tactivateResolvedTime?: number;\n\t\t};\n\n\t\tthis._mainThreadTelemetryProxy.$publicLog2<ExtensionActivationTimesEvent, ExtensionActivationTimesClassification>('extensionActivationTimes', {\n\t\t\t...event,\n\t\t\t...(activationTimes || {}),\n\t\t\toutcome\n\t\t});\n\t}\n\n\tprivate _doActivateExtension(extensionDescription: IExtensionDescription, reason: ExtensionActivationReason): Promise<ActivatedExtension> {\n\t\tconst event = getTelemetryActivationEvent(extensionDescription, reason);\n\t\ttype ActivatePluginClassification = {\n\t\t\towner: 'jrieken';\n\t\t\tcomment: 'Data about how/why an extension was activated';\n\t\t} & TelemetryActivationEventFragment;\n\t\tthis._mainThreadTelemetryProxy.$publicLog2<TelemetryActivationEvent, ActivatePluginClassification>('activatePlugin', event);\n\t\tconst entryPoint = this._getEntryPoint(extensionDescription);\n\t\tif (!entryPoint) {\n\t\t\t// Treat the extension as being empty => NOT AN ERROR CASE\n\t\t\treturn Promise.resolve(new EmptyExtension(ExtensionActivationTimes.NONE));\n\t\t}\n\n\t\tthis._logService.info(`ExtensionService#_doActivateExtension ${extensionDescription.identifier.value}, startup: ${reason.startup}, activationEvent: '${reason.activationEvent}'${extensionDescription.identifier.value !== reason.extensionId.value ? `, root cause: ${reason.extensionId.value}` : ``}`);\n\t\tthis._logService.flush();\n\n\t\tconst activationTimesBuilder = new ExtensionActivationTimesBuilder(reason.startup);\n\t\treturn Promise.all([\n\t\t\tthis._loadCommonJSModule<IExtensionModule>(extensionDescription, joinPath(extensionDescription.extensionLocation, entryPoint), activationTimesBuilder),\n\t\t\tthis._loadExtensionContext(extensionDescription)\n\t\t]).then(values => {\n\t\t\tperformance.mark(`code/extHost/willActivateExtension/${extensionDescription.identifier.value}`);\n\t\t\treturn AbstractExtHostExtensionService._callActivate(this._logService, extensionDescription.identifier, values[0], values[1], activationTimesBuilder);\n\t\t}).then((activatedExtension) => {\n\t\t\tperformance.mark(`code/extHost/didActivateExtension/${extensionDescription.identifier.value}`);\n\t\t\treturn activatedExtension;\n\t\t});\n\t}\n\n\tprivate _loadExtensionContext(extensionDescription: IExtensionDescription): Promise<vscode.ExtensionContext> {\n\n\t\tconst globalState = new ExtensionGlobalMemento(extensionDescription, this._storage);\n\t\tconst workspaceState = new ExtensionMemento(extensionDescription.identifier.value, false, this._storage);\n\t\tconst secrets = new ExtensionSecrets(extensionDescription, this._secretState);\n\t\tconst extensionMode = extensionDescription.isUnderDevelopment\n\t\t\t? (this._initData.environment.extensionTestsLocationURI ? ExtensionMode.Test : ExtensionMode.Development)\n\t\t\t: ExtensionMode.Production;\n\t\tconst extensionKind = this._initData.remote.isRemote ? ExtensionKind.Workspace : ExtensionKind.UI;\n\n\t\tthis._logService.trace(`ExtensionService#loadExtensionContext ${extensionDescription.identifier.value}`);\n\n\t\treturn Promise.all([\n\t\t\tglobalState.whenReady,\n\t\t\tworkspaceState.whenReady,\n\t\t\tthis._storagePath.whenReady\n\t\t]).then(() => {\n\t\t\tconst that = this;\n\t\t\tlet extension: vscode.Extension<any> | undefined;\n\n\t\t\tlet messagePassingProtocol: vscode.MessagePassingProtocol | undefined;\n\t\t\tconst messagePort = isProposedApiEnabled(extensionDescription, 'ipc')\n\t\t\t\t? this._initData.messagePorts?.get(ExtensionIdentifier.toKey(extensionDescription.identifier))\n\t\t\t\t: undefined;\n\n\t\t\treturn Object.freeze<vscode.ExtensionContext>({\n\t\t\t\tglobalState,\n\t\t\t\tworkspaceState,\n\t\t\t\tsecrets,\n\t\t\t\tsubscriptions: [],\n\t\t\t\tget extensionUri() { return extensionDescription.extensionLocation; },\n\t\t\t\tget extensionPath() { return extensionDescription.extensionLocation.fsPath; },\n\t\t\t\tasAbsolutePath(relativePath: string) { return path.join(extensionDescription.extensionLocation.fsPath, relativePath); },\n\t\t\t\tget storagePath() { return that._storagePath.workspaceValue(extensionDescription)?.fsPath; },\n\t\t\t\tget globalStoragePath() { return that._storagePath.globalValue(extensionDescription).fsPath; },\n\t\t\t\tget logPath() { return path.join(that._initData.logsLocation.fsPath, extensionDescription.identifier.value); },\n\t\t\t\tget logUri() { return URI.joinPath(that._initData.logsLocation, extensionDescription.identifier.value); },\n\t\t\t\tget storageUri() { return that._storagePath.workspaceValue(extensionDescription); },\n\t\t\t\tget globalStorageUri() { return that._storagePath.globalValue(extensionDescription); },\n\t\t\t\tget extensionMode() { return extensionMode; },\n\t\t\t\tget extension() {\n\t\t\t\t\tif (extension === undefined) {\n\t\t\t\t\t\textension = new Extension(that, extensionDescription.identifier, extensionDescription, extensionKind, false);\n\t\t\t\t\t}\n\t\t\t\t\treturn extension;\n\t\t\t\t},\n\t\t\t\tget extensionRuntime() {\n\t\t\t\t\tcheckProposedApiEnabled(extensionDescription, 'extensionRuntime');\n\t\t\t\t\treturn that.extensionRuntime;\n\t\t\t\t},\n\t\t\t\tget environmentVariableCollection() { return that._extHostTerminalService.getEnvironmentVariableCollection(extensionDescription); },\n\t\t\t\tget messagePassingProtocol() {\n\t\t\t\t\tif (!messagePassingProtocol) {\n\t\t\t\t\t\tif (!messagePort) {\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tconst onDidReceiveMessage = Event.buffer(Event.fromDOMEventEmitter(messagePort, 'message', e => e.data));\n\t\t\t\t\t\tmessagePort.start();\n\t\t\t\t\t\tmessagePassingProtocol = {\n\t\t\t\t\t\t\tonDidReceiveMessage,\n\t\t\t\t\t\t\tpostMessage: messagePort.postMessage.bind(messagePort) as any\n\t\t\t\t\t\t};\n\t\t\t\t\t}\n\n\t\t\t\t\treturn messagePassingProtocol;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate static _callActivate(logService: ILogService, extensionId: ExtensionIdentifier, extensionModule: IExtensionModule, context: vscode.ExtensionContext, activationTimesBuilder: ExtensionActivationTimesBuilder): Promise<ActivatedExtension> {\n\t\t// Make sure the extension's surface is not undefined\n\t\textensionModule = extensionModule || {\n\t\t\tactivate: undefined,\n\t\t\tdeactivate: undefined\n\t\t};\n\n\t\treturn this._callActivateOptional(logService, extensionId, extensionModule, context, activationTimesBuilder).then((extensionExports) => {\n\t\t\treturn new ActivatedExtension(false, null, activationTimesBuilder.build(), extensionModule, extensionExports, context.subscriptions);\n\t\t});\n\t}\n\n\tprivate static _callActivateOptional(logService: ILogService, extensionId: ExtensionIdentifier, extensionModule: IExtensionModule, context: vscode.ExtensionContext, activationTimesBuilder: ExtensionActivationTimesBuilder): Promise<IExtensionAPI> {\n\t\tif (typeof extensionModule.activate === 'function') {\n\t\t\ttry {\n\t\t\t\tactivationTimesBuilder.activateCallStart();\n\t\t\t\tlogService.trace(`ExtensionService#_callActivateOptional ${extensionId.value}`);\n\t\t\t\tconst scope = typeof global === 'object' ? global : self; // `global` is nodejs while `self` is for workers\n\t\t\t\tconst activateResult: Promise<IExtensionAPI> = extensionModule.activate.apply(scope, [context]);\n\t\t\t\tactivationTimesBuilder.activateCallStop();\n\n\t\t\t\tactivationTimesBuilder.activateResolveStart();\n\t\t\t\treturn Promise.resolve(activateResult).then((value) => {\n\t\t\t\t\tactivationTimesBuilder.activateResolveStop();\n\t\t\t\t\treturn value;\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\treturn Promise.reject(err);\n\t\t\t}\n\t\t} else {\n\t\t\t// No activate found => the module is the extension's exports\n\t\t\treturn Promise.resolve<IExtensionAPI>(extensionModule);\n\t\t}\n\t}\n\n\t// -- eager activation\n\n\tprivate _activateOneStartupFinished(desc: IExtensionDescription, activationEvent: string): void {\n\t\tthis._activateById(desc.identifier, {\n\t\t\tstartup: false,\n\t\t\textensionId: desc.identifier,\n\t\t\tactivationEvent: activationEvent\n\t\t}).then(undefined, (err) => {\n\t\t\tthis._logService.error(err);\n\t\t});\n\t}\n\n\tprivate _activateAllStartupFinishedDeferred(extensions: Readonly<IRelaxedExtensionDescription>[], start: number = 0): void {\n\t\tconst timeBudget = 50; // 50 milliseconds\n\t\tconst startTime = Date.now();\n\n\t\tsetTimeout0(() => {\n\t\t\tfor (let i = start; i < extensions.length; i += 1) {\n\t\t\t\tconst desc = extensions[i];\n\t\t\t\tfor (const activationEvent of (desc.activationEvents ?? [])) {\n\t\t\t\t\tif (activationEvent === 'onStartupFinished') {\n\t\t\t\t\t\tif (Date.now() - startTime > timeBudget) {\n\t\t\t\t\t\t\t// time budget for current task has been exceeded\n\t\t\t\t\t\t\t// set a new task to activate current and remaining extensions\n\t\t\t\t\t\t\tthis._activateAllStartupFinishedDeferred(extensions, i);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._activateOneStartupFinished(desc, activationEvent);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _activateAllStartupFinished(): void {\n\t\t// startup is considered finished\n\t\tthis._mainThreadExtensionsProxy.$setPerformanceMarks(performance.getMarks());\n\n\t\tthis._extHostConfiguration.getConfigProvider().then((configProvider) => {\n\t\t\tconst shouldDeferActivation = configProvider.getConfiguration('extensions.experimental').get<boolean>('deferredStartupFinishedActivation');\n\t\t\tconst allExtensionDescriptions = this._myRegistry.getAllExtensionDescriptions();\n\t\t\tif (shouldDeferActivation) {\n\t\t\t\tthis._activateAllStartupFinishedDeferred(allExtensionDescriptions);\n\t\t\t} else {\n\t\t\t\tfor (const desc of allExtensionDescriptions) {\n\t\t\t\t\tif (desc.activationEvents) {\n\t\t\t\t\t\tfor (const activationEvent of desc.activationEvents) {\n\t\t\t\t\t\t\tif (activationEvent === 'onStartupFinished') {\n\t\t\t\t\t\t\t\tthis._activateOneStartupFinished(desc, activationEvent);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t// Handle \"eager\" activation extensions\n\tprivate _handleEagerExtensions(): Promise<void> {\n\t\tconst starActivation = this._activateByEvent('*', true).then(undefined, (err) => {\n\t\t\tthis._logService.error(err);\n\t\t});\n\n\t\tthis._register(this._extHostWorkspace.onDidChangeWorkspace((e) => this._handleWorkspaceContainsEagerExtensions(e.added)));\n\t\tconst folders = this._extHostWorkspace.workspace ? this._extHostWorkspace.workspace.folders : [];\n\t\tconst workspaceContainsActivation = this._handleWorkspaceContainsEagerExtensions(folders);\n\t\tconst remoteResolverActivation = this._handleRemoteResolverEagerExtensions();\n\t\tconst eagerExtensionsActivation = Promise.all([remoteResolverActivation, starActivation, workspaceContainsActivation]).then(() => { });\n\n\t\tPromise.race([eagerExtensionsActivation, timeout(10000)]).then(() => {\n\t\t\tthis._activateAllStartupFinished();\n\t\t});\n\n\t\treturn eagerExtensionsActivation;\n\t}\n\n\tprivate _handleWorkspaceContainsEagerExtensions(folders: ReadonlyArray<vscode.WorkspaceFolder>): Promise<void> {\n\t\tif (folders.length === 0) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\treturn Promise.all(\n\t\t\tthis._myRegistry.getAllExtensionDescriptions().map((desc) => {\n\t\t\t\treturn this._handleWorkspaceContainsEagerExtension(folders, desc);\n\t\t\t})\n\t\t).then(() => { });\n\t}\n\n\tprivate async _handleWorkspaceContainsEagerExtension(folders: ReadonlyArray<vscode.WorkspaceFolder>, desc: IExtensionDescription): Promise<void> {\n\t\tif (this.isActivated(desc.identifier)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst localWithRemote = !this._initData.remote.isRemote && !!this._initData.remote.authority;\n\t\tconst host: IExtensionActivationHost = {\n\t\t\tlogService: this._logService,\n\t\t\tfolders: folders.map(folder => folder.uri),\n\t\t\tforceUsingSearch: localWithRemote || !this._hostUtils.fsExists,\n\t\t\texists: (uri) => this._hostUtils.fsExists!(uri.fsPath),\n\t\t\tcheckExists: (folders, includes, token) => this._mainThreadWorkspaceProxy.$checkExists(folders, includes, token)\n\t\t};\n\n\t\tconst result = await checkActivateWorkspaceContainsExtension(host, desc);\n\t\tif (!result) {\n\t\t\treturn;\n\t\t}\n\n\t\treturn (\n\t\t\tthis._activateById(desc.identifier, { startup: true, extensionId: desc.identifier, activationEvent: result.activationEvent })\n\t\t\t\t.then(undefined, err => this._logService.error(err))\n\t\t);\n\t}\n\n\tprivate async _handleRemoteResolverEagerExtensions(): Promise<void> {\n\t\tif (this._initData.remote.authority) {\n\t\t\treturn this._activateByEvent(`onResolveRemoteAuthority:${this._initData.remote.authority}`, false);\n\t\t}\n\t}\n\n\tpublic async $extensionTestsExecute(): Promise<number> {\n\t\tawait this._eagerExtensionsActivated.wait();\n\t\ttry {\n\t\t\treturn await this._doHandleExtensionTests();\n\t\t} catch (error) {\n\t\t\tconsole.error(error); // ensure any error message makes it onto the console\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tprivate async _doHandleExtensionTests(): Promise<number> {\n\t\tconst { extensionDevelopmentLocationURI, extensionTestsLocationURI } = this._initData.environment;\n\t\tif (!extensionDevelopmentLocationURI || !extensionTestsLocationURI) {\n\t\t\tthrow new Error(nls.localize('extensionTestError1', \"Cannot load test runner.\"));\n\t\t}\n\n\t\t// Require the test runner via node require from the provided path\n\t\tconst testRunner = await this._loadCommonJSModule<ITestRunner | INewTestRunner | undefined>(null, extensionTestsLocationURI, new ExtensionActivationTimesBuilder(false));\n\n\t\tif (!testRunner || typeof testRunner.run !== 'function') {\n\t\t\tthrow new Error(nls.localize('extensionTestError', \"Path {0} does not point to a valid extension test runner.\", extensionTestsLocationURI.toString()));\n\t\t}\n\n\t\t// Execute the runner if it follows the old `run` spec\n\t\treturn new Promise<number>((resolve, reject) => {\n\t\t\tconst oldTestRunnerCallback = (error: Error, failures: number | undefined) => {\n\t\t\t\tif (error) {\n\t\t\t\t\tif (isCI) {\n\t\t\t\t\t\tthis._logService.error(`Test runner called back with error`, error);\n\t\t\t\t\t}\n\t\t\t\t\treject(error);\n\t\t\t\t} else {\n\t\t\t\t\tif (isCI) {\n\t\t\t\t\t\tif (failures) {\n\t\t\t\t\t\t\tthis._logService.info(`Test runner called back with ${failures} failures.`);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis._logService.info(`Test runner called back with successful outcome.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tresolve((typeof failures === 'number' && failures > 0) ? 1 /* ERROR */ : 0 /* OK */);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconst extensionTestsPath = originalFSPath(extensionTestsLocationURI); // for the old test runner API\n\n\t\t\tconst runResult = testRunner.run(extensionTestsPath, oldTestRunnerCallback);\n\n\t\t\t// Using the new API `run(): Promise<void>`\n\t\t\tif (runResult && runResult.then) {\n\t\t\t\trunResult\n\t\t\t\t\t.then(() => {\n\t\t\t\t\t\tif (isCI) {\n\t\t\t\t\t\t\tthis._logService.info(`Test runner finished successfully.`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(0);\n\t\t\t\t\t})\n\t\t\t\t\t.catch((err: unknown) => {\n\t\t\t\t\t\tif (isCI) {\n\t\t\t\t\t\t\tthis._logService.error(`Test runner finished with error`, err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treject(err instanceof Error && err.stack ? err.stack : String(err));\n\t\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _startExtensionHost(): Promise<void> {\n\t\tif (this._started) {\n\t\t\tthrow new Error(`Extension host is already started!`);\n\t\t}\n\t\tthis._started = true;\n\n\t\treturn this._readyToStartExtensionHost.wait()\n\t\t\t.then(() => this._readyToRunExtensions.open())\n\t\t\t.then(() => {\n\t\t\t\t// wait for all activation events that came in during workbench startup, but at maximum 1s\n\t\t\t\treturn Promise.race([this._activator.waitForActivatingExtensions(), timeout(1000)]);\n\t\t\t})\n\t\t\t.then(() => this._handleEagerExtensions())\n\t\t\t.then(() => {\n\t\t\t\tthis._eagerExtensionsActivated.open();\n\t\t\t\tthis._logService.info(`Eager extensions activated`);\n\t\t\t});\n\t}\n\n\t// -- called by extensions\n\n\tpublic registerRemoteAuthorityResolver(authorityPrefix: string, resolver: vscode.RemoteAuthorityResolver): vscode.Disposable {\n\t\tthis._resolvers[authorityPrefix] = resolver;\n\t\treturn toDisposable(() => {\n\t\t\tdelete this._resolvers[authorityPrefix];\n\t\t});\n\t}\n\n\tpublic async getRemoteExecServer(remoteAuthority: string): Promise<vscode.ExecServer | undefined> {\n\t\tconst { resolver } = await this._activateAndGetResolver(remoteAuthority);\n\t\treturn resolver?.resolveExecServer?.(remoteAuthority, { resolveAttempt: 0 });\n\t}\n\n\t// -- called by main thread\n\n\tprivate async _activateAndGetResolver(remoteAuthority: string): Promise<{ authorityPrefix: string; resolver: vscode.RemoteAuthorityResolver | undefined }> {\n\t\tconst authorityPlusIndex = remoteAuthority.indexOf('+');\n\t\tif (authorityPlusIndex === -1) {\n\t\t\tthrow new RemoteAuthorityResolverError(`Not an authority that can be resolved!`, RemoteAuthorityResolverErrorCode.InvalidAuthority);\n\t\t}\n\t\tconst authorityPrefix = remoteAuthority.substr(0, authorityPlusIndex);\n\n\t\tawait this._almostReadyToRunExtensions.wait();\n\t\tawait this._activateByEvent(`onResolveRemoteAuthority:${authorityPrefix}`, false);\n\n\t\treturn { authorityPrefix, resolver: this._resolvers[authorityPrefix] };\n\t}\n\n\tpublic async $resolveAuthority(remoteAuthorityChain: string, resolveAttempt: number): Promise<Dto<IResolveAuthorityResult>> {\n\t\tconst sw = StopWatch.create(false);\n\t\tconst prefix = () => `[resolveAuthority(${getRemoteAuthorityPrefix(remoteAuthorityChain)},${resolveAttempt})][${sw.elapsed()}ms] `;\n\t\tconst logInfo = (msg: string) => this._logService.info(`${prefix()}${msg}`);\n\t\tconst logWarning = (msg: string) => this._logService.warn(`${prefix()}${msg}`);\n\t\tconst logError = (msg: string, err: any = undefined) => this._logService.error(`${prefix()}${msg}`, err);\n\t\tconst normalizeError = (err: unknown) => {\n\t\t\tif (err instanceof RemoteAuthorityResolverError) {\n\t\t\t\treturn {\n\t\t\t\t\ttype: 'error' as const,\n\t\t\t\t\terror: {\n\t\t\t\t\t\tcode: err._code,\n\t\t\t\t\t\tmessage: err._message,\n\t\t\t\t\t\tdetail: err._detail\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t\tthrow err;\n\t\t};\n\n\t\tconst getResolver = async (remoteAuthority: string) => {\n\t\t\tlogInfo(`activating resolver for ${remoteAuthority}...`);\n\t\t\tconst { resolver, authorityPrefix } = await this._activateAndGetResolver(remoteAuthority);\n\t\t\tif (!resolver) {\n\t\t\t\tlogError(`no resolver for ${authorityPrefix}`);\n\t\t\t\tthrow new RemoteAuthorityResolverError(`No remote extension installed to resolve ${authorityPrefix}.`, RemoteAuthorityResolverErrorCode.NoResolverFound);\n\t\t\t}\n\t\t\treturn { resolver, authorityPrefix, remoteAuthority };\n\t\t};\n\n\t\tconst chain = remoteAuthorityChain.split(/@|%40/g).reverse();\n\t\tlogInfo(`activating remote resolvers ${chain.join(' -> ')}`);\n\n\t\tlet resolvers;\n\t\ttry {\n\t\t\tresolvers = await Promise.all(chain.map(getResolver)).catch(async (e: Error) => {\n\t\t\t\tif (!(e instanceof RemoteAuthorityResolverError) || e._code !== RemoteAuthorityResolverErrorCode.InvalidAuthority) { throw e; }\n\t\t\t\tlogWarning(`resolving nested authorities failed: ${e.message}`);\n\t\t\t\treturn [await getResolver(remoteAuthorityChain)];\n\t\t\t});\n\t\t} catch (e) {\n\t\t\treturn normalizeError(e);\n\t\t}\n\n\t\tconst intervalLogger = new IntervalTimer();\n\t\tintervalLogger.cancelAndSet(() => logInfo('waiting...'), 1000);\n\n\t\tlet result!: vscode.ResolverResult;\n\t\tlet execServer: vscode.ExecServer | undefined;\n\t\tfor (const [i, { authorityPrefix, resolver, remoteAuthority }] of resolvers.entries()) {\n\t\t\ttry {\n\t\t\t\tif (i === resolvers.length - 1) {\n\t\t\t\t\tlogInfo(`invoking final resolve()...`);\n\t\t\t\t\tperformance.mark(`code/extHost/willResolveAuthority/${authorityPrefix}`);\n\t\t\t\t\tresult = await resolver.resolve(remoteAuthority, { resolveAttempt, execServer });\n\t\t\t\t\tperformance.mark(`code/extHost/didResolveAuthorityOK/${authorityPrefix}`);\n\t\t\t\t\tlogInfo(`setting tunnel factory...`);\n\t\t\t\t\tthis._register(await this._extHostTunnelService.setTunnelFactory(\n\t\t\t\t\t\tresolver,\n\t\t\t\t\t\tExtHostManagedResolvedAuthority.isManagedResolvedAuthority(result) ? result : undefined\n\t\t\t\t\t));\n\t\t\t\t} else {\n\t\t\t\t\tlogInfo(`invoking resolveExecServer() for ${remoteAuthority}`);\n\t\t\t\t\tperformance.mark(`code/extHost/willResolveExecServer/${authorityPrefix}`);\n\t\t\t\t\texecServer = await resolver.resolveExecServer?.(remoteAuthority, { resolveAttempt, execServer });\n\t\t\t\t\tif (!execServer) {\n\t\t\t\t\t\tthrow new RemoteAuthorityResolverError(`Exec server was not available for ${remoteAuthority}`, RemoteAuthorityResolverErrorCode.NoResolverFound); // we did, in fact, break the chain :(\n\t\t\t\t\t}\n\t\t\t\t\tperformance.mark(`code/extHost/didResolveExecServerOK/${authorityPrefix}`);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tperformance.mark(`code/extHost/didResolveAuthorityError/${authorityPrefix}`);\n\t\t\t\tlogError(`returned an error`, e);\n\t\t\t\tintervalLogger.dispose();\n\t\t\t\treturn normalizeError(e);\n\t\t\t}\n\t\t}\n\n\t\tintervalLogger.dispose();\n\n\t\tconst tunnelInformation: TunnelInformation = {\n\t\t\tenvironmentTunnels: result.environmentTunnels,\n\t\t\tfeatures: result.tunnelFeatures\n\t\t};\n\n\t\t// Split merged API result into separate authority/options\n\t\tconst options: ResolvedOptions = {\n\t\t\textensionHostEnv: result.extensionHostEnv,\n\t\t\tisTrusted: result.isTrusted,\n\t\t\tauthenticationSession: result.authenticationSessionForInitializingExtensions ? { id: result.authenticationSessionForInitializingExtensions.id, providerId: result.authenticationSessionForInitializingExtensions.providerId } : undefined\n\t\t};\n\n\t\t// extension are not required to return an instance of ResolvedAuthority or ManagedResolvedAuthority, so don't use `instanceof`\n\t\tlogInfo(`returned ${ExtHostManagedResolvedAuthority.isManagedResolvedAuthority(result) ? 'managed authority' : `${result.host}:${result.port}`}`);\n\n\t\tlet authority: ResolvedAuthority;\n\t\tif (ExtHostManagedResolvedAuthority.isManagedResolvedAuthority(result)) {\n\t\t\t// The socket factory is identified by the `resolveAttempt`, since that is a number which\n\t\t\t// always increments and is unique over all resolve() calls in a workbench session.\n\t\t\tconst socketFactoryId = resolveAttempt;\n\n\t\t\t// There is only on managed socket factory at a time, so we can just overwrite the old one.\n\t\t\tthis._extHostManagedSockets.setFactory(socketFactoryId, result.makeConnection);\n\n\t\t\tauthority = {\n\t\t\t\tauthority: remoteAuthorityChain,\n\t\t\t\tconnectTo: new ManagedRemoteConnection(socketFactoryId),\n\t\t\t\tconnectionToken: result.connectionToken\n\t\t\t};\n\t\t} else {\n\t\t\tauthority = {\n\t\t\t\tauthority: remoteAuthorityChain,\n\t\t\t\tconnectTo: new WebSocketRemoteConnection(result.host, result.port),\n\t\t\t\tconnectionToken: result.connectionToken\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\ttype: 'ok',\n\t\t\tvalue: {\n\t\t\t\tauthority: authority as Dto<ResolvedAuthority>,\n\t\t\t\toptions,\n\t\t\t\ttunnelInformation,\n\t\t\t}\n\t\t};\n\t}\n\n\tpublic async $getCanonicalURI(remoteAuthority: string, uriComponents: UriComponents): Promise<UriComponents | null> {\n\t\tthis._logService.info(`$getCanonicalURI invoked for authority (${getRemoteAuthorityPrefix(remoteAuthority)})`);\n\n\t\tconst { resolver } = await this._activateAndGetResolver(remoteAuthority);\n\t\tif (!resolver) {\n\t\t\t// Return `null` if no resolver for `remoteAuthority` is found.\n\t\t\treturn null;\n\t\t}\n\n\t\tconst uri = URI.revive(uriComponents);\n\n\t\tif (typeof resolver.getCanonicalURI === 'undefined') {\n\t\t\t// resolver cannot compute canonical URI\n\t\t\treturn uri;\n\t\t}\n\n\t\tconst result = await asPromise(() => resolver.getCanonicalURI!(uri));\n\t\tif (!result) {\n\t\t\treturn uri;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tpublic $startExtensionHost(extensionsDelta: IExtensionDescriptionDelta): Promise<void> {\n\t\textensionsDelta.toAdd.forEach((extension) => (<any>extension).extensionLocation = URI.revive(extension.extensionLocation));\n\n\t\tconst { globalRegistry, myExtensions } = applyExtensionsDelta(this._activationEventsReader, this._globalRegistry, this._myRegistry, extensionsDelta);\n\t\tthis._globalRegistry.set(globalRegistry.getAllExtensionDescriptions());\n\t\tthis._myRegistry.set(myExtensions);\n\n\t\tif (isCI) {\n\t\t\tthis._logService.info(`$startExtensionHost: global extensions: ${printExtIds(this._globalRegistry)}`);\n\t\t\tthis._logService.info(`$startExtensionHost: local extensions: ${printExtIds(this._myRegistry)}`);\n\t\t}\n\n\t\treturn this._startExtensionHost();\n\t}\n\n\tpublic $activateByEvent(activationEvent: string, activationKind: ActivationKind): Promise<void> {\n\t\tif (activationKind === ActivationKind.Immediate) {\n\t\t\treturn this._almostReadyToRunExtensions.wait()\n\t\t\t\t.then(_ => this._activateByEvent(activationEvent, false));\n\t\t}\n\n\t\treturn (\n\t\t\tthis._readyToRunExtensions.wait()\n\t\t\t\t.then(_ => this._activateByEvent(activationEvent, false))\n\t\t);\n\t}\n\n\tpublic async $activate(extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<boolean> {\n\t\tawait this._readyToRunExtensions.wait();\n\t\tif (!this._myRegistry.getExtensionDescription(extensionId)) {\n\t\t\t// unknown extension => ignore\n\t\t\treturn false;\n\t\t}\n\t\tawait this._activateById(extensionId, reason);\n\t\treturn true;\n\t}\n\n\tpublic async $deltaExtensions(extensionsDelta: IExtensionDescriptionDelta): Promise<void> {\n\t\textensionsDelta.toAdd.forEach((extension) => (<any>extension).extensionLocation = URI.revive(extension.extensionLocation));\n\n\t\t// First build up and update the trie and only afterwards apply the delta\n\t\tconst { globalRegistry, myExtensions } = applyExtensionsDelta(this._activationEventsReader, this._globalRegistry, this._myRegistry, extensionsDelta);\n\t\tconst newSearchTree = await this._createExtensionPathIndex(myExtensions);\n\t\tconst extensionsPaths = await this.getExtensionPathIndex();\n\t\textensionsPaths.setSearchTree(newSearchTree);\n\t\tthis._globalRegistry.set(globalRegistry.getAllExtensionDescriptions());\n\t\tthis._myRegistry.set(myExtensions);\n\n\t\tif (isCI) {\n\t\t\tthis._logService.info(`$deltaExtensions: global extensions: ${printExtIds(this._globalRegistry)}`);\n\t\t\tthis._logService.info(`$deltaExtensions: local extensions: ${printExtIds(this._myRegistry)}`);\n\t\t}\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tpublic async $test_latency(n: number): Promise<number> {\n\t\treturn n;\n\t}\n\n\tpublic async $test_up(b: VSBuffer): Promise<number> {\n\t\treturn b.byteLength;\n\t}\n\n\tpublic async $test_down(size: number): Promise<VSBuffer> {\n\t\tconst buff = VSBuffer.alloc(size);\n\t\tconst value = Math.random() % 256;\n\t\tfor (let i = 0; i < size; i++) {\n\t\t\tbuff.writeUInt8(value, i);\n\t\t}\n\t\treturn buff;\n\t}\n\n\tpublic async $updateRemoteConnectionData(connectionData: IRemoteConnectionData): Promise<void> {\n\t\tthis._remoteConnectionData = connectionData;\n\t\tthis._onDidChangeRemoteConnectionData.fire();\n\t}\n\n\tprotected abstract _beforeAlmostReadyToRunExtensions(): Promise<void>;\n\tprotected abstract _getEntryPoint(extensionDescription: IExtensionDescription): string | undefined;\n\tprotected abstract _loadCommonJSModule<T extends object | undefined>(extensionId: IExtensionDescription | null, module: URI, activationTimesBuilder: ExtensionActivationTimesBuilder): Promise<T>;\n\tpublic abstract $setRemoteEnvironment(env: { [key: string]: string | null }): Promise<void>;\n}\n\nfunction applyExtensionsDelta(activationEventsReader: SyncedActivationEventsReader, oldGlobalRegistry: ExtensionDescriptionRegistry, oldMyRegistry: ExtensionDescriptionRegistry, extensionsDelta: IExtensionDescriptionDelta) {\n\tactivationEventsReader.addActivationEvents(extensionsDelta.addActivationEvents);\n\tconst globalRegistry = new ExtensionDescriptionRegistry(activationEventsReader, oldGlobalRegistry.getAllExtensionDescriptions());\n\tglobalRegistry.deltaExtensions(extensionsDelta.toAdd, extensionsDelta.toRemove);\n\n\tconst myExtensionsSet = new ExtensionIdentifierSet(oldMyRegistry.getAllExtensionDescriptions().map(extension => extension.identifier));\n\tfor (const extensionId of extensionsDelta.myToRemove) {\n\t\tmyExtensionsSet.delete(extensionId);\n\t}\n\tfor (const extensionId of extensionsDelta.myToAdd) {\n\t\tmyExtensionsSet.add(extensionId);\n\t}\n\tconst myExtensions = filterExtensions(globalRegistry, myExtensionsSet);\n\n\treturn { globalRegistry, myExtensions };\n}\n\ntype TelemetryActivationEvent = {\n\tid: string;\n\tname: string;\n\textensionVersion: string;\n\tpublisherDisplayName: string;\n\tactivationEvents: string | null;\n\tisBuiltin: boolean;\n\treason: string;\n\treasonId: string;\n};\n\nfunction getTelemetryActivationEvent(extensionDescription: IExtensionDescription, reason: ExtensionActivationReason): TelemetryActivationEvent {\n\tconst event = {\n\t\tid: extensionDescription.identifier.value,\n\t\tname: extensionDescription.name,\n\t\textensionVersion: extensionDescription.version,\n\t\tpublisherDisplayName: extensionDescription.publisher,\n\t\tactivationEvents: extensionDescription.activationEvents ? extensionDescription.activationEvents.join(',') : null,\n\t\tisBuiltin: extensionDescription.isBuiltin,\n\t\treason: reason.activationEvent,\n\t\treasonId: reason.extensionId.value,\n\t};\n\n\treturn event;\n}\n\nfunction printExtIds(registry: ExtensionDescriptionRegistry) {\n\treturn registry.getAllExtensionDescriptions().map(ext => ext.identifier.value).join(',');\n}\n\nexport const IExtHostExtensionService = createDecorator<IExtHostExtensionService>('IExtHostExtensionService');\n\nexport interface IExtHostExtensionService extends AbstractExtHostExtensionService {\n\treadonly _serviceBrand: undefined;\n\tinitialize(): Promise<void>;\n\tterminate(reason: string): void;\n\tgetExtension(extensionId: string): Promise<IExtensionDescription | undefined>;\n\tisActivated(extensionId: ExtensionIdentifier): boolean;\n\tactivateByIdWithErrors(extensionId: ExtensionIdentifier, reason: ExtensionActivationReason): Promise<void>;\n\tgetExtensionExports(extensionId: ExtensionIdentifier): IExtensionAPI | null | undefined;\n\tgetExtensionRegistry(): Promise<ExtensionDescriptionRegistry>;\n\tgetExtensionPathIndex(): Promise<ExtensionPaths>;\n\tregisterRemoteAuthorityResolver(authorityPrefix: string, resolver: vscode.RemoteAuthorityResolver): vscode.Disposable;\n\tgetRemoteExecServer(authority: string): Promise<vscode.ExecServer | undefined>;\n\n\tonDidChangeRemoteConnectionData: Event<void>;\n\tgetRemoteConnectionData(): IRemoteConnectionData | null;\n}\n\nexport class Extension<T extends object | null | undefined> implements vscode.Extension<T> {\n\n\t#extensionService: IExtHostExtensionService;\n\t#originExtensionId: ExtensionIdentifier;\n\t#identifier: ExtensionIdentifier;\n\n\treadonly id: string;\n\treadonly extensionUri: URI;\n\treadonly extensionPath: string;\n\treadonly packageJSON: IExtensionDescription;\n\treadonly extensionKind: vscode.ExtensionKind;\n\treadonly isFromDifferentExtensionHost: boolean;\n\n\tconstructor(extensionService: IExtHostExtensionService, originExtensionId: ExtensionIdentifier, description: IExtensionDescription, kind: ExtensionKind, isFromDifferentExtensionHost: boolean) {\n\t\tthis.#extensionService = extensionService;\n\t\tthis.#originExtensionId = originExtensionId;\n\t\tthis.#identifier = description.identifier;\n\t\tthis.id = description.identifier.value;\n\t\tthis.extensionUri = description.extensionLocation;\n\t\tthis.extensionPath = path.normalize(originalFSPath(description.extensionLocation));\n\t\tthis.packageJSON = description;\n\t\tthis.extensionKind = kind;\n\t\tthis.isFromDifferentExtensionHost = isFromDifferentExtensionHost;\n\t}\n\n\tget isActive(): boolean {\n\t\t// TODO@alexdima support this\n\t\treturn this.#extensionService.isActivated(this.#identifier);\n\t}\n\n\tget exports(): T {\n\t\tif (this.packageJSON.api === 'none' || this.isFromDifferentExtensionHost) {\n\t\t\treturn undefined!; // Strict nulloverride - Public api\n\t\t}\n\t\treturn <T>this.#extensionService.getExtensionExports(this.#identifier);\n\t}\n\n\tasync activate(): Promise<T> {\n\t\tif (this.isFromDifferentExtensionHost) {\n\t\t\tthrow new Error('Cannot activate foreign extension'); // TODO@alexdima support this\n\t\t}\n\t\tawait this.#extensionService.activateByIdWithErrors(this.#identifier, { startup: false, extensionId: this.#originExtensionId, activationEvent: 'api' });\n\t\treturn this.exports;\n\t}\n}\n\nfunction filterExtensions(globalRegistry: ExtensionDescriptionRegistry, desiredExtensions: ExtensionIdentifierSet): IExtensionDescription[] {\n\treturn globalRegistry.getAllExtensionDescriptions().filter(\n\t\textension => desiredExtensions.has(extension.identifier)\n\t);\n}\n\nexport class ExtensionPaths {\n\n\tconstructor(\n\t\tprivate _searchTree: TernarySearchTree<URI, IExtensionDescription>\n\t) { }\n\n\tsetSearchTree(searchTree: TernarySearchTree<URI, IExtensionDescription>): void {\n\t\tthis._searchTree = searchTree;\n\t}\n\n\tfindSubstr(key: URI): IExtensionDescription | undefined {\n\t\treturn this._searchTree.findSubstr(key);\n\t}\n\n\tforEach(callback: (value: IExtensionDescription, index: URI) => any): void {\n\t\treturn this._searchTree.forEach(callback);\n\t}\n}\n\n/**\n * This mirrors the activation events as seen by the renderer. The renderer\n * is the only one which can have a reliable view of activation events because\n * implicit activation events are generated via extension points, and they\n * are registered only on the renderer side.\n */\nclass SyncedActivationEventsReader implements IActivationEventsReader {\n\n\tprivate readonly _map = new ExtensionIdentifierMap<string[]>();\n\n\tconstructor(activationEvents: { [extensionId: string]: string[] }) {\n\t\tthis.addActivationEvents(activationEvents);\n\t}\n\n\tpublic readActivationEvents(extensionDescription: Readonly<IRelaxedExtensionDescription>): string[] | undefined {\n\t\treturn this._map.get(extensionDescription.identifier);\n\t}\n\n\tpublic addActivationEvents(activationEvents: { [extensionId: string]: string[] }): void {\n\t\tfor (const extensionId of Object.keys(activationEvents)) {\n\t\t\tthis._map.set(extensionId, activationEvents[extensionId]);\n\t\t}\n\t}\n}\n"]}