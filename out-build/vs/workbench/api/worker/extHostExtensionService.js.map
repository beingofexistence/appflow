{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/worker/extHostExtensionService.ts"],"names":[],"mappings":"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","file":"extHostExtensionService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createApiFactoryAndRegisterActors } from 'vs/workbench/api/common/extHost.api.impl';\nimport { ExtensionActivationTimesBuilder } from 'vs/workbench/api/common/extHostExtensionActivator';\nimport { AbstractExtHostExtensionService } from 'vs/workbench/api/common/extHostExtensionService';\nimport { URI } from 'vs/base/common/uri';\nimport { RequireInterceptor } from 'vs/workbench/api/common/extHostRequireInterceptor';\nimport { IExtensionDescription } from 'vs/platform/extensions/common/extensions';\nimport { ExtensionRuntime } from 'vs/workbench/api/common/extHostTypes';\nimport { timeout } from 'vs/base/common/async';\nimport { ExtHostConsoleForwarder } from 'vs/workbench/api/worker/extHostConsoleForwarder';\n\nclass WorkerRequireInterceptor extends RequireInterceptor {\n\n\tprotected _installInterceptor() { }\n\n\tgetModule(request: string, parent: URI): undefined | any {\n\t\tfor (const alternativeModuleName of this._alternatives) {\n\t\t\tconst alternative = alternativeModuleName(request);\n\t\t\tif (alternative) {\n\t\t\t\trequest = alternative;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (this._factories.has(request)) {\n\t\t\treturn this._factories.get(request)!.load(request, parent, () => { throw new Error('CANNOT LOAD MODULE from here.'); });\n\t\t}\n\t\treturn undefined;\n\t}\n}\n\nexport class ExtHostExtensionService extends AbstractExtHostExtensionService {\n\treadonly extensionRuntime = ExtensionRuntime.Webworker;\n\n\tprivate _fakeModules?: WorkerRequireInterceptor;\n\n\tprotected async _beforeAlmostReadyToRunExtensions(): Promise<void> {\n\t\t// make sure console.log calls make it to the render\n\t\tthis._instaService.createInstance(ExtHostConsoleForwarder);\n\n\t\t// initialize API and register actors\n\t\tconst apiFactory = this._instaService.invokeFunction(createApiFactoryAndRegisterActors);\n\t\tthis._fakeModules = this._instaService.createInstance(WorkerRequireInterceptor, apiFactory, { mine: this._myRegistry, all: this._globalRegistry });\n\t\tawait this._fakeModules.install();\n\t\tperformance.mark('code/extHost/didInitAPI');\n\n\t\tawait this._waitForDebuggerAttachment();\n\t}\n\n\tprotected _getEntryPoint(extensionDescription: IExtensionDescription): string | undefined {\n\t\treturn extensionDescription.browser;\n\t}\n\n\tprotected async _loadCommonJSModule<T extends object | undefined>(extension: IExtensionDescription | null, module: URI, activationTimesBuilder: ExtensionActivationTimesBuilder): Promise<T> {\n\t\tmodule = module.with({ path: ensureSuffix(module.path, '.js') });\n\t\tconst extensionId = extension?.identifier.value;\n\t\tif (extensionId) {\n\t\t\tperformance.mark(`code/extHost/willFetchExtensionCode/${extensionId}`);\n\t\t}\n\n\t\t// First resolve the extension entry point URI to something we can load using `fetch`\n\t\t// This needs to be done on the main thread due to a potential `resourceUriProvider` (workbench api)\n\t\t// which is only available in the main thread\n\t\tconst browserUri = URI.revive(await this._mainThreadExtensionsProxy.$asBrowserUri(module));\n\t\tconst response = await fetch(browserUri.toString(true));\n\t\tif (extensionId) {\n\t\t\tperformance.mark(`code/extHost/didFetchExtensionCode/${extensionId}`);\n\t\t}\n\n\t\tif (response.status !== 200) {\n\t\t\tthrow new Error(response.statusText);\n\t\t}\n\n\t\t// fetch JS sources as text and create a new function around it\n\t\tconst source = await response.text();\n\t\t// Here we append #vscode-extension to serve as a marker, such that source maps\n\t\t// can be adjusted for the extra wrapping function.\n\t\tconst sourceURL = `${module.toString(true)}#vscode-extension`;\n\t\tconst fullSource = `${source}\\n//# sourceURL=${sourceURL}`;\n\t\tlet initFn: Function;\n\t\ttry {\n\t\t\tinitFn = new Function('module', 'exports', 'require', fullSource); // CodeQL [SM01632] js/eval-call there is no alternative until we move to ESM\n\t\t} catch (err) {\n\t\t\tif (extensionId) {\n\t\t\t\tconsole.error(`Loading code for extension ${extensionId} failed: ${err.message}`);\n\t\t\t} else {\n\t\t\t\tconsole.error(`Loading code failed: ${err.message}`);\n\t\t\t}\n\t\t\tconsole.error(`${module.toString(true)}${typeof err.line === 'number' ? ` line ${err.line}` : ''}${typeof err.column === 'number' ? ` column ${err.column}` : ''}`);\n\t\t\tconsole.error(err);\n\t\t\tthrow err;\n\t\t}\n\n\t\tif (extension) {\n\t\t\tawait this._extHostLocalizationService.initializeLocalizedMessages(extension);\n\t\t}\n\n\t\t// define commonjs globals: `module`, `exports`, and `require`\n\t\tconst _exports = {};\n\t\tconst _module = { exports: _exports };\n\t\tconst _require = (request: string) => {\n\t\t\tconst result = this._fakeModules!.getModule(request, module);\n\t\t\tif (result === undefined) {\n\t\t\t\tthrow new Error(`Cannot load module '${request}'`);\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\n\t\ttry {\n\t\t\tactivationTimesBuilder.codeLoadingStart();\n\t\t\tif (extensionId) {\n\t\t\t\tperformance.mark(`code/extHost/willLoadExtensionCode/${extensionId}`);\n\t\t\t}\n\t\t\tinitFn(_module, _exports, _require);\n\t\t\treturn <T>(_module.exports !== _exports ? _module.exports : _exports);\n\t\t} finally {\n\t\t\tif (extensionId) {\n\t\t\t\tperformance.mark(`code/extHost/didLoadExtensionCode/${extensionId}`);\n\t\t\t}\n\t\t\tactivationTimesBuilder.codeLoadingStop();\n\t\t}\n\t}\n\n\tasync $setRemoteEnvironment(_env: { [key: string]: string | null }): Promise<void> {\n\t\treturn;\n\t}\n\n\tprivate async _waitForDebuggerAttachment(waitTimeout = 5000) {\n\t\t// debugger attaches async, waiting for it fixes #106698 and #99222\n\t\tif (!this._initData.environment.isExtensionDevelopmentDebug) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst deadline = Date.now() + waitTimeout;\n\t\twhile (Date.now() < deadline && !('__jsDebugIsReady' in globalThis)) {\n\t\t\tawait timeout(10);\n\t\t}\n\t}\n}\n\nfunction ensureSuffix(path: string, suffix: string): string {\n\treturn path.endsWith(suffix) ? path : path + suffix;\n}\n"]}