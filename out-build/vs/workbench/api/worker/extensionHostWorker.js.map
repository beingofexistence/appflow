{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/worker/extensionHostWorker.ts"],"names":[],"mappings":"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","file":"extensionHostWorker.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IMessagePassingProtocol } from 'vs/base/parts/ipc/common/ipc';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { Emitter } from 'vs/base/common/event';\nimport { isMessageOfType, MessageType, createMessageOfType, IExtensionHostInitData } from 'vs/workbench/services/extensions/common/extensionHostProtocol';\nimport { ExtensionHostMain } from 'vs/workbench/api/common/extensionHostMain';\nimport { IHostUtils } from 'vs/workbench/api/common/extHostExtensionService';\nimport { NestedWorker } from 'vs/workbench/services/extensions/worker/polyfillNestedWorker';\nimport * as path from 'vs/base/common/path';\nimport * as performance from 'vs/base/common/performance';\n\nimport 'vs/workbench/api/common/extHost.common.services';\nimport 'vs/workbench/api/worker/extHost.worker.services';\nimport { FileAccess } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\n\n//#region --- Define, capture, and override some globals\n\ndeclare function postMessage(data: any, transferables?: Transferable[]): void;\n\ndeclare type _Fetch = typeof fetch;\n\ndeclare namespace self {\n\tlet close: any;\n\tlet postMessage: any;\n\tlet addEventListener: any;\n\tlet removeEventListener: any;\n\tlet dispatchEvent: any;\n\tlet indexedDB: { open: any;[k: string]: any };\n\tlet caches: { open: any;[k: string]: any };\n\tlet importScripts: any;\n\tlet fetch: _Fetch;\n\tlet XMLHttpRequest: any;\n}\n\nconst nativeClose = self.close.bind(self);\nself.close = () => console.trace(`'close' has been blocked`);\n\nconst nativePostMessage = postMessage.bind(self);\nself.postMessage = () => console.trace(`'postMessage' has been blocked`);\n\nfunction shouldTransformUri(uri: string): boolean {\n\t// In principle, we could convert any URI, but we have concerns\n\t// that parsing https URIs might end up decoding escape characters\n\t// and result in an unintended transformation\n\treturn /^(file|vscode-remote):/i.test(uri);\n}\n\nconst nativeFetch = fetch.bind(self);\nfunction patchFetching(asBrowserUri: (uri: URI) => Promise<URI>) {\n\tself.fetch = async function (input, init) {\n\t\tif (input instanceof Request) {\n\t\t\t// Request object - massage not supported\n\t\t\treturn nativeFetch(input, init);\n\t\t}\n\t\tif (shouldTransformUri(String(input))) {\n\t\t\tinput = (await asBrowserUri(URI.parse(String(input)))).toString(true);\n\t\t}\n\t\treturn nativeFetch(input, init);\n\t};\n\n\tself.XMLHttpRequest = class extends XMLHttpRequest {\n\t\toverride open(method: string, url: string | URL, async?: boolean, username?: string | null, password?: string | null): void {\n\t\t\t(async () => {\n\t\t\t\tif (shouldTransformUri(url.toString())) {\n\t\t\t\t\turl = (await asBrowserUri(URI.parse(url.toString()))).toString(true);\n\t\t\t\t}\n\t\t\t\tsuper.open(method, url, async ?? true, username, password);\n\t\t\t})();\n\t\t}\n\t};\n}\n\nself.importScripts = () => { throw new Error(`'importScripts' has been blocked`); };\n\n// const nativeAddEventListener = addEventListener.bind(self);\nself.addEventListener = () => console.trace(`'addEventListener' has been blocked`);\n\n(<any>self)['AMDLoader'] = undefined;\n(<any>self)['NLSLoaderPlugin'] = undefined;\n(<any>self)['define'] = undefined;\n(<any>self)['require'] = undefined;\n(<any>self)['webkitRequestFileSystem'] = undefined;\n(<any>self)['webkitRequestFileSystemSync'] = undefined;\n(<any>self)['webkitResolveLocalFileSystemSyncURL'] = undefined;\n(<any>self)['webkitResolveLocalFileSystemURL'] = undefined;\n\nif ((<any>self).Worker) {\n\n\t// make sure new Worker(...) always uses blob: (to maintain current origin)\n\tconst _Worker = (<any>self).Worker;\n\tWorker = <any>function (stringUrl: string | URL, options?: WorkerOptions) {\n\t\tif (/^file:/i.test(stringUrl.toString())) {\n\t\t\tstringUrl = FileAccess.uriToBrowserUri(URI.parse(stringUrl.toString())).toString(true);\n\t\t} else if (/^vscode-remote:/i.test(stringUrl.toString())) {\n\t\t\t// Supporting transformation of vscode-remote URIs requires an async call to the main thread,\n\t\t\t// but we cannot do this call from within the embedded Worker, and the only way out would be\n\t\t\t// to use templating instead of a function in the web api (`resourceUriProvider`)\n\t\t\tthrow new Error(`Creating workers from remote extensions is currently not supported.`);\n\t\t}\n\n\t\t// IMPORTANT: bootstrapFn is stringified and injected as worker blob-url. Because of that it CANNOT\n\t\t// have dependencies on other functions or variables. Only constant values are supported. Due to\n\t\t// that logic of FileAccess.asBrowserUri had to be copied, see `asWorkerBrowserUrl` (below).\n\t\tconst bootstrapFnSource = (function bootstrapFn(workerUrl: string) {\n\t\t\tfunction asWorkerBrowserUrl(url: string | URL | TrustedScriptURL): any {\n\t\t\t\tif (typeof url === 'string' || url instanceof URL) {\n\t\t\t\t\treturn String(url).replace(/^file:\\/\\//i, 'vscode-file://vscode-app');\n\t\t\t\t}\n\t\t\t\treturn url;\n\t\t\t}\n\n\t\t\tconst nativeFetch = fetch.bind(self);\n\t\t\tself.fetch = function (input, init) {\n\t\t\t\tif (input instanceof Request) {\n\t\t\t\t\t// Request object - massage not supported\n\t\t\t\t\treturn nativeFetch(input, init);\n\t\t\t\t}\n\t\t\t\treturn nativeFetch(asWorkerBrowserUrl(input), init);\n\t\t\t};\n\t\t\tself.XMLHttpRequest = class extends XMLHttpRequest {\n\t\t\t\toverride open(method: string, url: string | URL, async?: boolean, username?: string | null, password?: string | null): void {\n\t\t\t\t\treturn super.open(method, asWorkerBrowserUrl(url), async ?? true, username, password);\n\t\t\t\t}\n\t\t\t};\n\t\t\tconst nativeImportScripts = importScripts.bind(self);\n\t\t\tself.importScripts = (...urls: string[]) => {\n\t\t\t\tnativeImportScripts(...urls.map(asWorkerBrowserUrl));\n\t\t\t};\n\n\t\t\tnativeImportScripts(workerUrl);\n\t\t}).toString();\n\n\t\tconst js = `(${bootstrapFnSource}('${stringUrl}'))`;\n\t\toptions = options || {};\n\t\toptions.name = options.name || path.basename(stringUrl.toString());\n\t\tconst blob = new Blob([js], { type: 'application/javascript' });\n\t\tconst blobUrl = URL.createObjectURL(blob);\n\t\treturn new _Worker(blobUrl, options);\n\t};\n\n} else {\n\t(<any>self).Worker = class extends NestedWorker {\n\t\tconstructor(stringOrUrl: string | URL, options?: WorkerOptions) {\n\t\t\tsuper(nativePostMessage, stringOrUrl, { name: path.basename(stringOrUrl.toString()), ...options });\n\t\t}\n\t};\n}\n\n//#endregion ---\n\nconst hostUtil = new class implements IHostUtils {\n\tdeclare readonly _serviceBrand: undefined;\n\tpublic readonly pid = undefined;\n\texit(_code?: number | undefined): void {\n\t\tnativeClose();\n\t}\n};\n\n\nclass ExtensionWorker {\n\n\t// protocol\n\treadonly protocol: IMessagePassingProtocol;\n\n\tconstructor() {\n\n\t\tconst channel = new MessageChannel();\n\t\tconst emitter = new Emitter<VSBuffer>();\n\t\tlet terminating = false;\n\n\t\t// send over port2, keep port1\n\t\tnativePostMessage(channel.port2, [channel.port2]);\n\n\t\tchannel.port1.onmessage = event => {\n\t\t\tconst { data } = event;\n\t\t\tif (!(data instanceof ArrayBuffer)) {\n\t\t\t\tconsole.warn('UNKNOWN data received', data);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst msg = VSBuffer.wrap(new Uint8Array(data, 0, data.byteLength));\n\t\t\tif (isMessageOfType(msg, MessageType.Terminate)) {\n\t\t\t\t// handle terminate-message right here\n\t\t\t\tterminating = true;\n\t\t\t\tonTerminate('received terminate message from renderer');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// emit non-terminate messages to the outside\n\t\t\temitter.fire(msg);\n\t\t};\n\n\t\tthis.protocol = {\n\t\t\tonMessage: emitter.event,\n\t\t\tsend: vsbuf => {\n\t\t\t\tif (!terminating) {\n\t\t\t\t\tconst data = vsbuf.buffer.buffer.slice(vsbuf.buffer.byteOffset, vsbuf.buffer.byteOffset + vsbuf.buffer.byteLength);\n\t\t\t\t\tchannel.port1.postMessage(data, [data]);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n}\n\ninterface IRendererConnection {\n\tprotocol: IMessagePassingProtocol;\n\tinitData: IExtensionHostInitData;\n}\nfunction connectToRenderer(protocol: IMessagePassingProtocol): Promise<IRendererConnection> {\n\treturn new Promise<IRendererConnection>(resolve => {\n\t\tconst once = protocol.onMessage(raw => {\n\t\t\tonce.dispose();\n\t\t\tconst initData = <IExtensionHostInitData>JSON.parse(raw.toString());\n\t\t\tprotocol.send(createMessageOfType(MessageType.Initialized));\n\t\t\tresolve({ protocol, initData });\n\t\t});\n\t\tprotocol.send(createMessageOfType(MessageType.Ready));\n\t});\n}\n\nlet onTerminate = (reason: string) => nativeClose();\n\ninterface IInitMessage {\n\treadonly type: 'vscode.init';\n\treadonly data: ReadonlyMap<string, MessagePort>;\n}\n\nfunction isInitMessage(a: any): a is IInitMessage {\n\treturn !!a && typeof a === 'object' && a.type === 'vscode.init' && a.data instanceof Map;\n}\n\nexport function create(): { onmessage: (message: any) => void } {\n\tperformance.mark(`code/extHost/willConnectToRenderer`);\n\tconst res = new ExtensionWorker();\n\n\treturn {\n\t\tonmessage(message: any) {\n\t\t\tif (!isInitMessage(message)) {\n\t\t\t\treturn; // silently ignore foreign messages\n\t\t\t}\n\n\t\t\tconnectToRenderer(res.protocol).then(data => {\n\t\t\t\tperformance.mark(`code/extHost/didWaitForInitData`);\n\t\t\t\tconst extHostMain = new ExtensionHostMain(\n\t\t\t\t\tdata.protocol,\n\t\t\t\t\tdata.initData,\n\t\t\t\t\thostUtil,\n\t\t\t\t\tnull,\n\t\t\t\t\tmessage.data\n\t\t\t\t);\n\n\t\t\t\tpatchFetching(uri => extHostMain.asBrowserUri(uri));\n\n\t\t\t\tonTerminate = (reason: string) => extHostMain.terminate(reason);\n\t\t\t});\n\t\t}\n\t};\n}\n"]}