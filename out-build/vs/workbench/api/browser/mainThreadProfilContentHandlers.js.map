{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadProfilContentHandlers.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAWzF,IAAM,IAAI,GAAV,MAAM,IAAiC,SAAQ,eAAG;QAMxD,YACC,OAAwB,EACa,CAAwD;YAE7F,KAAK,EAAE,CAAC;YAF8C,MAAC,GAAD,CAAC,CAAsC;YAJ7E,MAAC,GAAoB,IAAI,CAAC,CAAC,CAAS,IAAI,eAAG,EAAiC,CAAC,CAAC;YAO9F,IAAI,CAAC,CAAC,GAAO,OAAO,CAAC,QAAQ,CAAC,sBAAG,CAAY,6BAA6B,CAAC,CAAC;QAC7E,CAAC;QAED,KAAK,CAAC,8BAA8B,CAAC,EAAU,EAAE,IAAY,EAAE,WAA+B,EAAE,WAAmB;YAClH,IAAI,CAAC,CAAC,CAAkB,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAkC,6BAA6B,CAAC,EAAE,EAAE;gBACzG,IAAI;gBACJ,WAAW;gBACX,WAAW;gBACX,WAAW,EAAE,KAAK,EAAE,IAAY,EAAE,OAAe,EAAE,KAAwB,EAAE,EAAE;oBAC9E,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,CAAC,CAAK,YAAY,CAAC,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;oBACvE,OAAO,MAAM,CAAC,CAAC,CAAC,IAAA,iBAAG,EAAwB,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;gBAC3D,CAAC;gBACD,WAAW,EAAE,KAAK,EAAE,GAAQ,EAAE,KAAwB,EAAE,EAAE;oBACzD,OAAO,IAAI,CAAC,CAAC,CAAK,YAAY,CAAC,EAAE,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;gBAChD,CAAC;aACD,CAAC,CAAC,CAAC;QACL,CAAC;QAED,KAAK,CAAC,gCAAgC,CAAC,EAAU;YAChD,IAAI,CAAC,CAAC,CAAkB,gBAAgB,CAAC,EAAE,CAAC,CAAC;QAC9C,CAAC;KAED,CAAA;IAjCY,oBAAI;mBAAJ,IAAI;QADhB,IAAA,uBAAI,EAAiB,sBAAG,CAAS,gCAAgC,CAAC;QAShE,WAAA,qBAAG,CAAA;OARO,IAAI,CAiChB","file":"mainThreadProfilContentHandlers.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Disposable, DisposableMap, IDisposable } from 'vs/base/common/lifecycle';\nimport { revive } from 'vs/base/common/marshalling';\nimport { URI } from 'vs/base/common/uri';\nimport { ExtHostContext, ExtHostProfileContentHandlersShape, MainContext, MainThreadProfileContentHandlersShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { extHostNamedCustomer, IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport { ISaveProfileResult, IUserDataProfileImportExportService } from 'vs/workbench/services/userDataProfile/common/userDataProfile';\n\n@extHostNamedCustomer(MainContext.MainThreadProfileContentHandlers)\nexport class MainThreadProfileContentHandlers extends Disposable implements MainThreadProfileContentHandlersShape {\n\n\tprivate readonly proxy: ExtHostProfileContentHandlersShape;\n\n\tprivate readonly registeredHandlers = this._register(new DisposableMap<string, IDisposable>());\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\t@IUserDataProfileImportExportService private readonly userDataProfileImportExportService: IUserDataProfileImportExportService,\n\t) {\n\t\tsuper();\n\t\tthis.proxy = context.getProxy(ExtHostContext.ExtHostProfileContentHandlers);\n\t}\n\n\tasync $registerProfileContentHandler(id: string, name: string, description: string | undefined, extensionId: string): Promise<void> {\n\t\tthis.registeredHandlers.set(id, this.userDataProfileImportExportService.registerProfileContentHandler(id, {\n\t\t\tname,\n\t\t\tdescription,\n\t\t\textensionId,\n\t\t\tsaveProfile: async (name: string, content: string, token: CancellationToken) => {\n\t\t\t\tconst result = await this.proxy.$saveProfile(id, name, content, token);\n\t\t\t\treturn result ? revive<ISaveProfileResult>(result) : null;\n\t\t\t},\n\t\t\treadProfile: async (uri: URI, token: CancellationToken) => {\n\t\t\t\treturn this.proxy.$readProfile(id, uri, token);\n\t\t\t},\n\t\t}));\n\t}\n\n\tasync $unregisterProfileContentHandler(id: string): Promise<void> {\n\t\tthis.registeredHandlers.deleteAndDispose(id);\n\t}\n\n}\n"]}