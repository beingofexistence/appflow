{"version":3,"sources":["vs/workbench/api/browser/mainThreadEditSessionIdentityParticipant.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAYhG,MAAM,2CAA2C;QAKhD,YAAY,cAA+B;YAF1B,MAAC,GAAS,KAAK,CAAC;YAGhC,IAAI,CAAC,CAAC,GAAQ,cAAc,CAAC,QAAQ,CAAC,sBAAG,CAAY,gBAAgB,CAAC,CAAC;QACxE,CAAC;QAED,KAAK,CAAC,WAAW,CAAC,eAAoB,EAAc,KAAwB;YAC3E,MAAM,CAAC,GAAG,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAE9C,UAAU,CACT,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,IAAA,cAAQ,EAAC,CAAyC,EAAE,IAA6D,CAAC,CAAC,CAAC,EAC3I,IAAI,CAAC,CAAC,CACN,CAAC;gBACF,IAAI,CAAC,CAAC,CAAM,gCAAgC,CAAC,eAAe,CAAC,GAAG,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAO,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAC9G,CAAC,CAAC,CAAC;YAEH,OAAO,IAAA,WAAG,EAAmB,CAAC,EAAE,KAAK,CAAC,CAAC;QACxC,CAAC;KACD;IAGM,IAAM,IAAI,GAAV,MAAM,IAAI;QAIhB,YACC,cAA+B,EACR,oBAAyB,EACF,CAAgC;YAAhC,MAAC,GAAD,CAAC,CAA+B;YAE9E,IAAI,CAAC,CAAC,GAA4B,IAAI,CAAC,CAAC,CAA2B,uCAAuC,CAAC,oBAAoB,CAAC,cAAc,CAAC,2CAA2C,EAAE,cAAc,CAAC,CAAC,CAAC;QAC9M,CAAC;QAED,OAAO;YACN,IAAI,CAAC,CAAC,CAA0B,OAAO,EAAE,CAAC;QAC3C,CAAC;KACD,CAAA;IAfY,oBAAI;mBAAJ,IAAI;QADhB,uBAAI;QAOF,WAAA,mBAAG,CAAA;QACH,WAAA,kBAAG,CAAA;OAPO,IAAI,CAehB","file":"mainThreadEditSessionIdentityParticipant.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { localize } from 'vs/nls';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { extHostCustomer, IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { raceCancellationError } from 'vs/base/common/async';\nimport { IEditSessionIdentityCreateParticipant, IEditSessionIdentityService } from 'vs/platform/workspace/common/editSessions';\nimport { ExtHostContext, ExtHostWorkspaceShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { WorkspaceFolder } from 'vs/platform/workspace/common/workspace';\n\nclass ExtHostEditSessionIdentityCreateParticipant implements IEditSessionIdentityCreateParticipant {\n\n\tprivate readonly _proxy: ExtHostWorkspaceShape;\n\tprivate readonly timeout = 10000;\n\n\tconstructor(extHostContext: IExtHostContext) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostWorkspace);\n\t}\n\n\tasync participate(workspaceFolder: WorkspaceFolder, token: CancellationToken): Promise<void> {\n\t\tconst p = new Promise<any>((resolve, reject) => {\n\n\t\t\tsetTimeout(\n\t\t\t\t() => reject(new Error(localize('timeout.onWillCreateEditSessionIdentity', \"Aborted onWillCreateEditSessionIdentity-event after 10000ms\"))),\n\t\t\t\tthis.timeout\n\t\t\t);\n\t\t\tthis._proxy.$onWillCreateEditSessionIdentity(workspaceFolder.uri, token, this.timeout).then(resolve, reject);\n\t\t});\n\n\t\treturn raceCancellationError(p, token);\n\t}\n}\n\n@extHostCustomer\nexport class EditSessionIdentityCreateParticipant {\n\n\tprivate _saveParticipantDisposable: IDisposable;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IEditSessionIdentityService private readonly _editSessionIdentityService: IEditSessionIdentityService\n\t) {\n\t\tthis._saveParticipantDisposable = this._editSessionIdentityService.addEditSessionIdentityCreateParticipant(instantiationService.createInstance(ExtHostEditSessionIdentityCreateParticipant, extHostContext));\n\t}\n\n\tdispose(): void {\n\t\tthis._saveParticipantDisposable.dispose();\n\t}\n}\n"]}