{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadNotebookDocuments.ts"],"names":[],"mappings":"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","file":"mainThreadNotebookDocuments.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore, dispose } from 'vs/base/common/lifecycle';\nimport { ResourceMap } from 'vs/base/common/map';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { BoundModelReferenceCollection } from 'vs/workbench/api/browser/mainThreadDocuments';\nimport { NotebookTextModel } from 'vs/workbench/contrib/notebook/common/model/notebookTextModel';\nimport { NotebookCellsChangeType } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { INotebookEditorModelResolverService } from 'vs/workbench/contrib/notebook/common/notebookEditorModelResolverService';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { ExtHostContext, ExtHostNotebookDocumentsShape, MainThreadNotebookDocumentsShape, NotebookCellDto, NotebookCellsChangedEventDto, NotebookDataDto } from '../common/extHost.protocol';\nimport { NotebookDto } from 'vs/workbench/api/browser/mainThreadNotebookDto';\nimport { SerializableObjectWithBuffers } from 'vs/workbench/services/extensions/common/proxyIdentifier';\nimport { IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\n\nexport class MainThreadNotebookDocuments implements MainThreadNotebookDocumentsShape {\n\n\tprivate readonly _disposables = new DisposableStore();\n\n\tprivate readonly _proxy: ExtHostNotebookDocumentsShape;\n\tprivate readonly _documentEventListenersMapping = new ResourceMap<DisposableStore>();\n\tprivate readonly _modelReferenceCollection: BoundModelReferenceCollection;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@INotebookEditorModelResolverService private readonly _notebookEditorModelResolverService: INotebookEditorModelResolverService,\n\t\t@IUriIdentityService private readonly _uriIdentityService: IUriIdentityService\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostNotebookDocuments);\n\t\tthis._modelReferenceCollection = new BoundModelReferenceCollection(this._uriIdentityService.extUri);\n\n\t\t// forward dirty and save events\n\t\tthis._disposables.add(this._notebookEditorModelResolverService.onDidChangeDirty(model => this._proxy.$acceptDirtyStateChanged(model.resource, model.isDirty())));\n\t\tthis._disposables.add(this._notebookEditorModelResolverService.onDidSaveNotebook(e => this._proxy.$acceptModelSaved(e)));\n\n\t\t// when a conflict is going to happen RELEASE references that are held by extensions\n\t\tthis._disposables.add(_notebookEditorModelResolverService.onWillFailWithConflict(e => {\n\t\t\tthis._modelReferenceCollection.remove(e.resource);\n\t\t}));\n\t}\n\n\tdispose(): void {\n\t\tthis._disposables.dispose();\n\t\tthis._modelReferenceCollection.dispose();\n\t\tdispose(this._documentEventListenersMapping.values());\n\t}\n\n\thandleNotebooksAdded(notebooks: readonly NotebookTextModel[]): void {\n\n\t\tfor (const textModel of notebooks) {\n\t\t\tconst disposableStore = new DisposableStore();\n\t\t\tdisposableStore.add(textModel.onDidChangeContent(event => {\n\n\t\t\t\tconst eventDto: NotebookCellsChangedEventDto = {\n\t\t\t\t\tversionId: event.versionId,\n\t\t\t\t\trawEvents: []\n\t\t\t\t};\n\n\t\t\t\tfor (const e of event.rawEvents) {\n\n\t\t\t\t\tswitch (e.kind) {\n\t\t\t\t\t\tcase NotebookCellsChangeType.ModelChange:\n\t\t\t\t\t\t\teventDto.rawEvents.push({\n\t\t\t\t\t\t\t\tkind: e.kind,\n\t\t\t\t\t\t\t\tchanges: e.changes.map(diff => [diff[0], diff[1], diff[2].map(cell => NotebookDto.toNotebookCellDto(cell))] as [number, number, NotebookCellDto[]])\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase NotebookCellsChangeType.Move:\n\t\t\t\t\t\t\teventDto.rawEvents.push({\n\t\t\t\t\t\t\t\tkind: e.kind,\n\t\t\t\t\t\t\t\tindex: e.index,\n\t\t\t\t\t\t\t\tlength: e.length,\n\t\t\t\t\t\t\t\tnewIdx: e.newIdx,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase NotebookCellsChangeType.Output:\n\t\t\t\t\t\t\teventDto.rawEvents.push({\n\t\t\t\t\t\t\t\tkind: e.kind,\n\t\t\t\t\t\t\t\tindex: e.index,\n\t\t\t\t\t\t\t\toutputs: e.outputs.map(NotebookDto.toNotebookOutputDto)\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase NotebookCellsChangeType.OutputItem:\n\t\t\t\t\t\t\teventDto.rawEvents.push({\n\t\t\t\t\t\t\t\tkind: e.kind,\n\t\t\t\t\t\t\t\tindex: e.index,\n\t\t\t\t\t\t\t\toutputId: e.outputId,\n\t\t\t\t\t\t\t\toutputItems: e.outputItems.map(NotebookDto.toNotebookOutputItemDto),\n\t\t\t\t\t\t\t\tappend: e.append\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase NotebookCellsChangeType.ChangeCellLanguage:\n\t\t\t\t\t\tcase NotebookCellsChangeType.ChangeCellContent:\n\t\t\t\t\t\tcase NotebookCellsChangeType.ChangeCellMetadata:\n\t\t\t\t\t\tcase NotebookCellsChangeType.ChangeCellInternalMetadata:\n\t\t\t\t\t\t\teventDto.rawEvents.push(e);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tconst hasDocumentMetadataChangeEvent = event.rawEvents.find(e => e.kind === NotebookCellsChangeType.ChangeDocumentMetadata);\n\n\t\t\t\t// using the model resolver service to know if the model is dirty or not.\n\t\t\t\t// assuming this is the first listener it can mean that at first the model\n\t\t\t\t// is marked as dirty and that another event is fired\n\t\t\t\tthis._proxy.$acceptModelChanged(\n\t\t\t\t\ttextModel.uri,\n\t\t\t\t\tnew SerializableObjectWithBuffers(eventDto),\n\t\t\t\t\tthis._notebookEditorModelResolverService.isDirty(textModel.uri),\n\t\t\t\t\thasDocumentMetadataChangeEvent ? textModel.metadata : undefined\n\t\t\t\t);\n\t\t\t}));\n\n\t\t\tthis._documentEventListenersMapping.set(textModel.uri, disposableStore);\n\t\t}\n\t}\n\n\thandleNotebooksRemoved(uris: URI[]): void {\n\t\tfor (const uri of uris) {\n\t\t\tthis._documentEventListenersMapping.get(uri)?.dispose();\n\t\t\tthis._documentEventListenersMapping.delete(uri);\n\t\t}\n\t}\n\n\n\tasync $tryCreateNotebook(options: { viewType: string; content?: NotebookDataDto }): Promise<UriComponents> {\n\t\tconst ref = await this._notebookEditorModelResolverService.resolve({ untitledResource: undefined }, options.viewType);\n\n\t\t// untitled notebooks are disposed when they get saved. we should not hold a reference\n\t\t// to such a disposed notebook and therefore dispose the reference as well\n\t\tref.object.notebook.onWillDispose(() => {\n\t\t\tref.dispose();\n\t\t});\n\n\t\t// untitled notebooks are dirty by default\n\t\tthis._proxy.$acceptDirtyStateChanged(ref.object.resource, true);\n\n\t\t// apply content changes... slightly HACKY -> this triggers a change event\n\t\tif (options.content) {\n\t\t\tconst data = NotebookDto.fromNotebookDataDto(options.content);\n\t\t\tref.object.notebook.reset(data.cells, data.metadata, ref.object.notebook.transientOptions);\n\t\t}\n\t\treturn ref.object.resource;\n\t}\n\n\tasync $tryOpenNotebook(uriComponents: UriComponents): Promise<URI> {\n\t\tconst uri = URI.revive(uriComponents);\n\t\tconst ref = await this._notebookEditorModelResolverService.resolve(uri, undefined);\n\t\tthis._modelReferenceCollection.add(uri, ref);\n\t\treturn uri;\n\t}\n\n\tasync $trySaveNotebook(uriComponents: UriComponents) {\n\t\tconst uri = URI.revive(uriComponents);\n\n\t\tconst ref = await this._notebookEditorModelResolverService.resolve(uri);\n\t\tconst saveResult = await ref.object.save();\n\t\tref.dispose();\n\t\treturn saveResult;\n\t}\n}\n"]}