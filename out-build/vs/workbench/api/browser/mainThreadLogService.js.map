{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadLogService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAYzF,IAAM,IAAI,GAAV,MAAM,IAAI;QAIhB,YACC,cAA+B,EACf,CAAmC;YAAlB,MAAC,GAAD,CAAC,CAAiB;YAJnC,MAAC,GAAa,IAAI,eAAG,EAAc,CAAC;YAMpD,MAAM,KAAK,GAAG,cAAc,CAAC,QAAQ,CAAC,sBAAG,CAAY,2BAA2B,CAAC,CAAC;YAClF,IAAI,CAAC,CAAC,CAAW,GAAG,CAAC,CAAC,CAAa,mBAAmB,CAAC,GAAG,CAAC,EAAE;gBAC5D,IAAI,IAAA,SAAG,EAAQ,GAAG,CAAC,EAAE;oBACpB,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;iBACxB;qBAAM;oBACN,KAAK,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;iBACnC;YACF,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAED,IAAI,CAAC,IAAmB,EAAE,QAA8B;YACvD,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAa,SAAS,CAAC,SAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;YAC9D,IAAI,CAAC,MAAM,EAAE;gBACZ,MAAM,IAAI,KAAK,CAAC,kCAAkC,CAAC,CAAC;aACpD;YACD,KAAK,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,IAAI,QAAQ,EAAE;gBACxC,IAAA,SAAG,EAAC,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;aAC5B;QACF,CAAC;QAED,KAAK,CAAC,aAAa,CAAC,IAAmB,EAAE,OAAwB;YAChE,IAAI,CAAC,CAAC,CAAa,YAAY,CAAC,SAAG,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC;QAC5D,CAAC;QAED,KAAK,CAAC,eAAe,CAAC,WAAoC;YACzD,IAAI,CAAC,CAAC,CAAa,cAAc,CAAC;gBACjC,GAAG,WAAW;gBACd,QAAQ,EAAE,SAAG,CAAC,MAAM,CAAC,WAAW,CAAC,QAAQ,CAAC;aAC1C,CAAC,CAAC;QACJ,CAAC;QAED,KAAK,CAAC,iBAAiB,CAAC,QAAuB;YAC9C,IAAI,CAAC,CAAC,CAAa,gBAAgB,CAAC,SAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC3D,CAAC;QAED,KAAK,CAAC,cAAc,CAAC,QAAuB,EAAE,OAAgB;YAC7D,IAAI,CAAC,CAAC,CAAa,aAAa,CAAC,SAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,OAAO,CAAC,CAAC;QACjE,CAAC;QAED,MAAM,CAAC,IAAmB;YACzB,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAa,SAAS,CAAC,SAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;YAC9D,IAAI,CAAC,MAAM,EAAE;gBACZ,MAAM,IAAI,KAAK,CAAC,mCAAmC,CAAC,CAAC;aACrD;YACD,MAAM,CAAC,KAAK,EAAE,CAAC;QAChB,CAAC;QAED,OAAO;YACN,IAAI,CAAC,CAAC,CAAW,OAAO,EAAE,CAAC;QAC5B,CAAC;KACD,CAAA;IA1DY,oBAAI;mBAAJ,IAAI;QADhB,IAAA,uBAAI,EAAiB,sBAAG,CAAS,gBAAgB,CAAC;QAOhD,WAAA,SAAG,CAAA;OANO,IAAI,CA0DhB;IAED,uDAAuD;IAEvD,cAAG,CAAc,eAAe,CAAC,6BAA6B,EAAE,UAAU,QAA0B,EAAE,KAAa;QAClH,MAAM,aAAa,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAG,CAAY,CAAC;QACnD,MAAM,kBAAkB,GAAG,QAAQ,CAAC,GAAG,CAAC,iBAAG,CAAiB,CAAC;QAE7D,IAAI,kBAAkB,CAAC,sBAAsB,IAAI,CAAC,CAAC,kBAAkB,CAAC,yBAAyB,EAAE;YAChG,MAAM,QAAQ,GAAG,IAAA,SAAG,EAAW,KAAK,CAAC,CAAC;YACtC,IAAI,QAAQ,KAAK,SAAS,EAAE;gBAC3B,aAAa,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;aACpC;SACD;IACF,CAAC,CAAC,CAAC;IAEH,cAAG,CAAc,eAAe,CAAC,6BAA6B,EAAE,UAAU,QAA0B;QACnG,MAAM,UAAU,GAAG,QAAQ,CAAC,GAAG,CAAC,SAAG,CAAS,CAAC;QAE7C,OAAO,IAAA,SAAG,EAAc,UAAU,CAAC,QAAQ,EAAE,CAAC,CAAC;IAChD,CAAC,CAAC,CAAC","file":"mainThreadLogService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { extHostNamedCustomer, IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport { ILoggerOptions, ILoggerResource, ILoggerService, ILogService, isLogLevel, log, LogLevel, LogLevelToString, parseLogLevel } from 'vs/platform/log/common/log';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ExtHostContext, MainThreadLoggerShape, MainContext } from 'vs/workbench/api/common/extHost.protocol';\nimport { UriComponents, URI, UriDto } from 'vs/base/common/uri';\nimport { ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\n\n@extHostNamedCustomer(MainContext.MainThreadLogger)\nexport class MainThreadLoggerService implements MainThreadLoggerShape {\n\n\tprivate readonly disposables = new DisposableStore();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ILoggerService private readonly loggerService: ILoggerService,\n\t) {\n\t\tconst proxy = extHostContext.getProxy(ExtHostContext.ExtHostLogLevelServiceShape);\n\t\tthis.disposables.add(loggerService.onDidChangeLogLevel(arg => {\n\t\t\tif (isLogLevel(arg)) {\n\t\t\t\tproxy.$setLogLevel(arg);\n\t\t\t} else {\n\t\t\t\tproxy.$setLogLevel(arg[1], arg[0]);\n\t\t\t}\n\t\t}));\n\t}\n\n\t$log(file: UriComponents, messages: [LogLevel, string][]): void {\n\t\tconst logger = this.loggerService.getLogger(URI.revive(file));\n\t\tif (!logger) {\n\t\t\tthrow new Error('Create the logger before logging');\n\t\t}\n\t\tfor (const [level, message] of messages) {\n\t\t\tlog(logger, level, message);\n\t\t}\n\t}\n\n\tasync $createLogger(file: UriComponents, options?: ILoggerOptions): Promise<void> {\n\t\tthis.loggerService.createLogger(URI.revive(file), options);\n\t}\n\n\tasync $registerLogger(logResource: UriDto<ILoggerResource>): Promise<void> {\n\t\tthis.loggerService.registerLogger({\n\t\t\t...logResource,\n\t\t\tresource: URI.revive(logResource.resource)\n\t\t});\n\t}\n\n\tasync $deregisterLogger(resource: UriComponents): Promise<void> {\n\t\tthis.loggerService.deregisterLogger(URI.revive(resource));\n\t}\n\n\tasync $setVisibility(resource: UriComponents, visible: boolean): Promise<void> {\n\t\tthis.loggerService.setVisibility(URI.revive(resource), visible);\n\t}\n\n\t$flush(file: UriComponents): void {\n\t\tconst logger = this.loggerService.getLogger(URI.revive(file));\n\t\tif (!logger) {\n\t\t\tthrow new Error('Create the logger before flushing');\n\t\t}\n\t\tlogger.flush();\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables.dispose();\n\t}\n}\n\n// --- Internal commands to improve extension test runs\n\nCommandsRegistry.registerCommand('_extensionTests.setLogLevel', function (accessor: ServicesAccessor, level: string) {\n\tconst loggerService = accessor.get(ILoggerService);\n\tconst environmentService = accessor.get(IEnvironmentService);\n\n\tif (environmentService.isExtensionDevelopment && !!environmentService.extensionTestsLocationURI) {\n\t\tconst logLevel = parseLogLevel(level);\n\t\tif (logLevel !== undefined) {\n\t\t\tloggerService.setLogLevel(logLevel);\n\t\t}\n\t}\n});\n\nCommandsRegistry.registerCommand('_extensionTests.getLogLevel', function (accessor: ServicesAccessor) {\n\tconst logService = accessor.get(ILogService);\n\n\treturn LogLevelToString(logService.getLevel());\n});\n"]}