{"version":3,"sources":["vs/workbench/api/browser/mainThreadCLICommands.ts"],"names":[],"mappings":"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","file":"mainThreadCLICommands.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Schemas } from 'vs/base/common/network';\nimport { isWeb } from 'vs/base/common/platform';\nimport { isString } from 'vs/base/common/types';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { CommandsRegistry, ICommandService } from 'vs/platform/commands/common/commands';\nimport { IExtensionGalleryService, IExtensionManagementService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { ExtensionManagementCLI } from 'vs/platform/extensionManagement/common/extensionManagementCLI';\nimport { getExtensionId } from 'vs/platform/extensionManagement/common/extensionManagementUtil';\nimport { IExtensionManifest } from 'vs/platform/extensions/common/extensions';\nimport { IInstantiationService, ServicesAccessor } from 'vs/platform/instantiation/common/instantiation';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { ILabelService } from 'vs/platform/label/common/label';\nimport { AbstractMessageLogger, ILogger, LogLevel } from 'vs/platform/log/common/log';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { IOpenWindowOptions, IWindowOpenable } from 'vs/platform/window/common/window';\nimport { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';\nimport { IExtensionManagementServerService } from 'vs/workbench/services/extensionManagement/common/extensionManagement';\nimport { IExtensionManifestPropertiesService } from 'vs/workbench/services/extensions/common/extensionManifestPropertiesService';\n\n\n// this class contains the commands that the CLI server is reying on\n\nCommandsRegistry.registerCommand('_remoteCLI.openExternal', function (accessor: ServicesAccessor, uri: UriComponents | string): Promise<boolean> {\n\tconst openerService = accessor.get(IOpenerService);\n\treturn openerService.open(isString(uri) ? uri : URI.revive(uri), { openExternal: true, allowTunneling: true });\n});\n\nCommandsRegistry.registerCommand('_remoteCLI.windowOpen', function (accessor: ServicesAccessor, toOpen: IWindowOpenable[], options: IOpenWindowOptions) {\n\tconst commandService = accessor.get(ICommandService);\n\tif (!toOpen.length) {\n\t\treturn commandService.executeCommand('_files.newWindow', options);\n\t}\n\treturn commandService.executeCommand('_files.windowOpen', toOpen, options);\n});\n\nCommandsRegistry.registerCommand('_remoteCLI.getSystemStatus', function (accessor: ServicesAccessor): Promise<string | undefined> {\n\tconst commandService = accessor.get(ICommandService);\n\treturn commandService.executeCommand<string>('_issues.getSystemStatus');\n});\n\ninterface ManageExtensionsArgs {\n\tlist?: { showVersions?: boolean; category?: string };\n\tinstall?: (string | URI)[];\n\tuninstall?: string[];\n\tforce?: boolean;\n}\n\nCommandsRegistry.registerCommand('_remoteCLI.manageExtensions', async function (accessor: ServicesAccessor, args: ManageExtensionsArgs): Promise<string | undefined> {\n\tconst instantiationService = accessor.get(IInstantiationService);\n\tconst extensionManagementServerService = accessor.get(IExtensionManagementServerService);\n\tconst remoteExtensionManagementService = extensionManagementServerService.remoteExtensionManagementServer?.extensionManagementService;\n\tif (!remoteExtensionManagementService) {\n\t\treturn;\n\t}\n\n\tconst lines: string[] = [];\n\tconst logger = new class extends AbstractMessageLogger {\n\t\tprotected override log(level: LogLevel, message: string): void {\n\t\t\tlines.push(message);\n\t\t}\n\t}();\n\tconst cliService = instantiationService.createChild(new ServiceCollection([IExtensionManagementService, remoteExtensionManagementService])).createInstance(RemoteExtensionManagementCLI, logger);\n\n\tif (args.list) {\n\t\tawait cliService.listExtensions(!!args.list.showVersions, args.list.category, undefined);\n\t} else {\n\t\tconst revive = (inputs: (string | UriComponents)[]) => inputs.map(input => isString(input) ? input : URI.revive(input));\n\t\tif (Array.isArray(args.install) && args.install.length) {\n\t\t\ttry {\n\t\t\t\tawait cliService.installExtensions(revive(args.install), [], { isMachineScoped: true }, !!args.force);\n\t\t\t} catch (e) {\n\t\t\t\tlines.push(e.message);\n\t\t\t}\n\t\t}\n\t\tif (Array.isArray(args.uninstall) && args.uninstall.length) {\n\t\t\ttry {\n\t\t\t\tawait cliService.uninstallExtensions(revive(args.uninstall), !!args.force, undefined);\n\t\t\t} catch (e) {\n\t\t\t\tlines.push(e.message);\n\t\t\t}\n\t\t}\n\t}\n\treturn lines.join('\\n');\n});\n\nclass RemoteExtensionManagementCLI extends ExtensionManagementCLI {\n\n\tprivate _location: string | undefined;\n\n\tconstructor(\n\t\tlogger: ILogger,\n\t\t@IExtensionManagementService extensionManagementService: IExtensionManagementService,\n\t\t@IExtensionGalleryService extensionGalleryService: IExtensionGalleryService,\n\t\t@ILabelService labelService: ILabelService,\n\t\t@IWorkbenchEnvironmentService envService: IWorkbenchEnvironmentService,\n\t\t@IExtensionManifestPropertiesService private readonly _extensionManifestPropertiesService: IExtensionManifestPropertiesService,\n\t) {\n\t\tsuper(logger, extensionManagementService, extensionGalleryService);\n\n\t\tconst remoteAuthority = envService.remoteAuthority;\n\t\tthis._location = remoteAuthority ? labelService.getHostLabel(Schemas.vscodeRemote, remoteAuthority) : undefined;\n\t}\n\n\tprotected override get location(): string | undefined {\n\t\treturn this._location;\n\t}\n\n\tprotected override validateExtensionKind(manifest: IExtensionManifest): boolean {\n\t\tif (!this._extensionManifestPropertiesService.canExecuteOnWorkspace(manifest)\n\t\t\t// Web extensions installed on remote can be run in web worker extension host\n\t\t\t&& !(isWeb && this._extensionManifestPropertiesService.canExecuteOnWeb(manifest))) {\n\t\t\tthis.logger.info(localize('cannot be installed', \"Cannot install the '{0}' extension because it is declared to not run in this setup.\", getExtensionId(manifest.publisher, manifest.name)));\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n}\n"]}