{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadConsole.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAWzF,IAAM,IAAI,GAAV,MAAM,IAAI;QAIhB,YACC,eAAgC,EACM,CAAwB,EAChC,CAAgB;YADR,MAAC,GAAD,CAAC,CAAuB;YAChC,MAAC,GAAD,CAAC,CAAe;YAE9C,MAAM,OAAO,GAAG,IAAA,0BAAI,EAAqB,IAAI,CAAC,CAAC,CAAmB,CAAC;YACnE,IAAI,CAAC,CAAC,GAA4B,OAAO,CAAC,yBAAyB,CAAC;QACrE,CAAC;QAED,OAAO;YACN,EAAE;QACH,CAAC;QAED,wBAAwB,CAAC,KAAwB;YAChD,IAAI,IAAI,CAAC,CAAC,EAA2B;gBACpC,+DAA+D;gBAC/D,IAAA,wBAAI,EAAW,IAAI,CAAC,CAAC,EAAY,KAAK,CAAC,CAAC;aACxC;iBAAM;gBACN,yEAAyE;gBACzE,IAAA,wBAAI,EAAkB,IAAI,CAAC,CAAC,EAAY,KAAK,EAAE,gBAAgB,CAAC,CAAC;gBACjE,IAAA,aAAG,EAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC;aAC7B;QACF,CAAC;KACD,CAAA;IA3BY,oBAAI;mBAAJ,IAAI;QADhB,IAAA,uBAAI,EAAiB,sBAAG,CAAS,iBAAiB,CAAC;QAOjD,WAAA,iBAAG,CAAA;QACH,WAAA,SAAG,CAAA;OAPO,IAAI,CA2BhB","file":"mainThreadConsole.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { extHostNamedCustomer, IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport { MainContext, MainThreadConsoleShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IRemoteConsoleLog, log } from 'vs/base/common/console';\nimport { logRemoteEntry, logRemoteEntryIfError } from 'vs/workbench/services/extensions/common/remoteConsoleUtil';\nimport { parseExtensionDevOptions } from 'vs/workbench/services/extensions/common/extensionDevOptions';\nimport { ILogService } from 'vs/platform/log/common/log';\n\n@extHostNamedCustomer(MainContext.MainThreadConsole)\nexport class MainThreadConsole implements MainThreadConsoleShape {\n\n\tprivate readonly _isExtensionDevTestFromCli: boolean;\n\n\tconstructor(\n\t\t_extHostContext: IExtHostContext,\n\t\t@IEnvironmentService private readonly _environmentService: IEnvironmentService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tconst devOpts = parseExtensionDevOptions(this._environmentService);\n\t\tthis._isExtensionDevTestFromCli = devOpts.isExtensionDevTestFromCli;\n\t}\n\n\tdispose(): void {\n\t\t//\n\t}\n\n\t$logExtensionHostMessage(entry: IRemoteConsoleLog): void {\n\t\tif (this._isExtensionDevTestFromCli) {\n\t\t\t// If running tests from cli, log to the log service everything\n\t\t\tlogRemoteEntry(this._logService, entry);\n\t\t} else {\n\t\t\t// Log to the log service only errors and log everything to local console\n\t\t\tlogRemoteEntryIfError(this._logService, entry, 'Extension Host');\n\t\t\tlog(entry, 'Extension Host');\n\t\t}\n\t}\n}\n"]}