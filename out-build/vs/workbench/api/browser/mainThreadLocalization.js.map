{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadLocalization.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUzF,IAAM,IAAI,GAAV,MAAM,IAAuB,SAAQ,eAAG;QAE9C,YACC,cAA+B,EACA,CAAgB,EACR,CAAwB;YAE/D,KAAK,EAAE,CAAC;YAHuB,MAAC,GAAD,CAAC,CAAe;YACR,MAAC,GAAD,CAAC,CAAuB;QAGhE,CAAC;QAED,KAAK,CAAC,sBAAsB,CAAC,EAAU,EAAE,QAAgB;YACxD,IAAI;gBACH,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,CAAC,CAAmB,kCAAkC,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;gBAC5F,OAAO,GAAG,CAAC;aACX;YAAC,OAAO,CAAC,EAAE;gBACX,OAAO,SAAS,CAAC;aACjB;QACF,CAAC;QAED,KAAK,CAAC,oBAAoB,CAAC,aAA4B;YACtD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,CAAC,CAAW,QAAQ,CAAC,SAAG,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC;YAC5E,OAAO,QAAQ,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QAClC,CAAC;KACD,CAAA;IAvBY,oBAAI;mBAAJ,IAAI;QADhB,IAAA,uBAAI,EAAiB,sBAAG,CAAS,sBAAsB,CAAC;QAKtD,WAAA,WAAG,CAAA;QACH,WAAA,mBAAG,CAAA;OALO,IAAI,CAuBhB","file":"mainThreadLocalization.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { MainContext, MainThreadLocalizationShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { extHostNamedCustomer, IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ILanguagePackService } from 'vs/platform/languagePacks/common/languagePacks';\n\n@extHostNamedCustomer(MainContext.MainThreadLocalization)\nexport class MainThreadLocalization extends Disposable implements MainThreadLocalizationShape {\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@ILanguagePackService private readonly languagePackService: ILanguagePackService\n\t) {\n\t\tsuper();\n\t}\n\n\tasync $fetchBuiltInBundleUri(id: string, language: string): Promise<URI | undefined> {\n\t\ttry {\n\t\t\tconst uri = await this.languagePackService.getBuiltInExtensionTranslationsUri(id, language);\n\t\t\treturn uri;\n\t\t} catch (e) {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tasync $fetchBundleContents(uriComponents: UriComponents): Promise<string> {\n\t\tconst contents = await this.fileService.readFile(URI.revive(uriComponents));\n\t\treturn contents.value.toString();\n\t}\n}\n"]}