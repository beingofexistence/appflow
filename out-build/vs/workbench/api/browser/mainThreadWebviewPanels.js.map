{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadWebviewPanels.ts"],"names":[],"mappings":"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","file":"mainThreadWebviewPanels.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { Event } from 'vs/base/common/event';\nimport { Disposable, DisposableMap } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { MainThreadWebviews, reviveWebviewContentOptions, reviveWebviewExtension } from 'vs/workbench/api/browser/mainThreadWebviews';\nimport * as extHostProtocol from 'vs/workbench/api/common/extHost.protocol';\nimport { DiffEditorInput } from 'vs/workbench/common/editor/diffEditorInput';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { ExtensionKeyedWebviewOriginStore, WebviewOptions } from 'vs/workbench/contrib/webview/browser/webview';\nimport { WebviewInput } from 'vs/workbench/contrib/webviewPanel/browser/webviewEditorInput';\nimport { WebviewIcons } from 'vs/workbench/contrib/webviewPanel/browser/webviewIconManager';\nimport { IWebViewShowOptions, IWebviewWorkbenchService } from 'vs/workbench/contrib/webviewPanel/browser/webviewWorkbenchService';\nimport { editorGroupToColumn } from 'vs/workbench/services/editor/common/editorGroupColumn';\nimport { GroupLocation, GroupsOrder, IEditorGroup, IEditorGroupsService, preferredSideBySideGroupDirection } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { ACTIVE_GROUP, IEditorService, PreferredGroup, SIDE_GROUP } from 'vs/workbench/services/editor/common/editorService';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\n\n/**\n * Bi-directional map between webview handles and inputs.\n */\nclass WebviewInputStore {\n\tprivate readonly _handlesToInputs = new Map<string, WebviewInput>();\n\tprivate readonly _inputsToHandles = new Map<WebviewInput, string>();\n\n\tpublic add(handle: string, input: WebviewInput): void {\n\t\tthis._handlesToInputs.set(handle, input);\n\t\tthis._inputsToHandles.set(input, handle);\n\t}\n\n\tpublic getHandleForInput(input: WebviewInput): string | undefined {\n\t\treturn this._inputsToHandles.get(input);\n\t}\n\n\tpublic getInputForHandle(handle: string): WebviewInput | undefined {\n\t\treturn this._handlesToInputs.get(handle);\n\t}\n\n\tpublic delete(handle: string): void {\n\t\tconst input = this.getInputForHandle(handle);\n\t\tthis._handlesToInputs.delete(handle);\n\t\tif (input) {\n\t\t\tthis._inputsToHandles.delete(input);\n\t\t}\n\t}\n\n\tpublic get size(): number {\n\t\treturn this._handlesToInputs.size;\n\t}\n\n\t[Symbol.iterator](): Iterator<WebviewInput> {\n\t\treturn this._handlesToInputs.values();\n\t}\n}\n\nclass WebviewViewTypeTransformer {\n\tpublic constructor(\n\t\tpublic readonly prefix: string,\n\t) { }\n\n\tpublic fromExternal(viewType: string): string {\n\t\treturn this.prefix + viewType;\n\t}\n\n\tpublic toExternal(viewType: string): string | undefined {\n\t\treturn viewType.startsWith(this.prefix)\n\t\t\t? viewType.substr(this.prefix.length)\n\t\t\t: undefined;\n\t}\n}\n\nexport class MainThreadWebviewPanels extends Disposable implements extHostProtocol.MainThreadWebviewPanelsShape {\n\n\tprivate readonly webviewPanelViewType = new WebviewViewTypeTransformer('mainThreadWebview-');\n\n\tprivate readonly _proxy: extHostProtocol.ExtHostWebviewPanelsShape;\n\n\tprivate readonly _webviewInputs = new WebviewInputStore();\n\n\tprivate readonly _revivers = this._register(new DisposableMap<string>());\n\n\tprivate readonly webviewOriginStore: ExtensionKeyedWebviewOriginStore;\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\tprivate readonly _mainThreadWebviews: MainThreadWebviews,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IEditorGroupsService private readonly _editorGroupService: IEditorGroupsService,\n\t\t@IEditorService private readonly _editorService: IEditorService,\n\t\t@IExtensionService extensionService: IExtensionService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@IWebviewWorkbenchService private readonly _webviewWorkbenchService: IWebviewWorkbenchService,\n\t) {\n\t\tsuper();\n\n\t\tthis.webviewOriginStore = new ExtensionKeyedWebviewOriginStore('mainThreadWebviewPanel.origins', storageService);\n\n\t\tthis._proxy = context.getProxy(extHostProtocol.ExtHostContext.ExtHostWebviewPanels);\n\n\t\tthis._register(Event.any(\n\t\t\t_editorService.onDidActiveEditorChange,\n\t\t\t_editorService.onDidVisibleEditorsChange,\n\t\t\t_editorGroupService.onDidAddGroup,\n\t\t\t_editorGroupService.onDidRemoveGroup,\n\t\t\t_editorGroupService.onDidMoveGroup,\n\t\t)(() => {\n\t\t\tthis.updateWebviewViewStates(this._editorService.activeEditor);\n\t\t}));\n\n\t\tthis._register(_webviewWorkbenchService.onDidChangeActiveWebviewEditor(input => {\n\t\t\tthis.updateWebviewViewStates(input);\n\t\t}));\n\n\t\t// This reviver's only job is to activate extensions.\n\t\t// This should trigger the real reviver to be registered from the extension host side.\n\t\tthis._register(_webviewWorkbenchService.registerResolver({\n\t\t\tcanResolve: (webview: WebviewInput) => {\n\t\t\t\tconst viewType = this.webviewPanelViewType.toExternal(webview.viewType);\n\t\t\t\tif (typeof viewType === 'string') {\n\t\t\t\t\textensionService.activateByEvent(`onWebviewPanel:${viewType}`);\n\t\t\t\t}\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\tresolveWebview: () => { throw new Error('not implemented'); }\n\t\t}));\n\t}\n\n\tpublic get webviewInputs(): Iterable<WebviewInput> { return this._webviewInputs; }\n\n\tpublic addWebviewInput(handle: extHostProtocol.WebviewHandle, input: WebviewInput, options: { serializeBuffersForPostMessage: boolean }): void {\n\t\tthis._webviewInputs.add(handle, input);\n\t\tthis._mainThreadWebviews.addWebview(handle, input.webview, options);\n\n\t\tinput.webview.onDidDispose(() => {\n\t\t\tthis._proxy.$onDidDisposeWebviewPanel(handle).finally(() => {\n\t\t\t\tthis._webviewInputs.delete(handle);\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic $createWebviewPanel(\n\t\textensionData: extHostProtocol.WebviewExtensionDescription,\n\t\thandle: extHostProtocol.WebviewHandle,\n\t\tviewType: string,\n\t\tinitData: extHostProtocol.IWebviewInitData,\n\t\tshowOptions: extHostProtocol.WebviewPanelShowOptions,\n\t): void {\n\t\tconst targetGroup = this.getTargetGroupFromShowOptions(showOptions);\n\t\tconst mainThreadShowOptions: IWebViewShowOptions = showOptions ? {\n\t\t\tpreserveFocus: !!showOptions.preserveFocus,\n\t\t\tgroup: targetGroup\n\t\t} : {};\n\n\t\tconst extension = reviveWebviewExtension(extensionData);\n\t\tconst origin = this.webviewOriginStore.getOrigin(viewType, extension.id);\n\n\t\tconst webview = this._webviewWorkbenchService.openWebview({\n\t\t\torigin,\n\t\t\tprovidedViewType: viewType,\n\t\t\ttitle: initData.title,\n\t\t\toptions: reviveWebviewOptions(initData.panelOptions),\n\t\t\tcontentOptions: reviveWebviewContentOptions(initData.webviewOptions),\n\t\t\textension\n\t\t}, this.webviewPanelViewType.fromExternal(viewType), initData.title, mainThreadShowOptions);\n\n\t\tthis.addWebviewInput(handle, webview, { serializeBuffersForPostMessage: initData.serializeBuffersForPostMessage });\n\n\t\tconst payload = {\n\t\t\textensionId: extension.id.value,\n\t\t\tviewType\n\t\t} as const;\n\n\t\ttype Classification = {\n\t\t\textensionId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Id of the extension that created the webview panel' };\n\t\t\tviewType: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Id of the webview' };\n\t\t\towner: 'mjbvz';\n\t\t\tcomment: 'Triggered when a webview is created. Records the type of webview and the extension which created it';\n\t\t};\n\n\t\tthis._telemetryService.publicLog2<typeof payload, Classification>('webviews:createWebviewPanel', payload);\n\t}\n\n\tpublic $disposeWebview(handle: extHostProtocol.WebviewHandle): void {\n\t\tconst webview = this.tryGetWebviewInput(handle);\n\t\tif (!webview) {\n\t\t\treturn;\n\t\t}\n\t\twebview.dispose();\n\t}\n\n\tpublic $setTitle(handle: extHostProtocol.WebviewHandle, value: string): void {\n\t\tthis.tryGetWebviewInput(handle)?.setName(value);\n\t}\n\n\tpublic $setIconPath(handle: extHostProtocol.WebviewHandle, value: extHostProtocol.IWebviewIconPath | undefined): void {\n\t\tconst webview = this.tryGetWebviewInput(handle);\n\t\tif (webview) {\n\t\t\twebview.iconPath = reviveWebviewIcon(value);\n\t\t}\n\t}\n\n\tpublic $reveal(handle: extHostProtocol.WebviewHandle, showOptions: extHostProtocol.WebviewPanelShowOptions): void {\n\t\tconst webview = this.tryGetWebviewInput(handle);\n\t\tif (!webview || webview.isDisposed()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst targetGroup = this.getTargetGroupFromShowOptions(showOptions);\n\t\tthis._webviewWorkbenchService.revealWebview(webview, targetGroup, !!showOptions.preserveFocus);\n\t}\n\n\tprivate getTargetGroupFromShowOptions(showOptions: extHostProtocol.WebviewPanelShowOptions): PreferredGroup {\n\t\tif (typeof showOptions.viewColumn === 'undefined'\n\t\t\t|| showOptions.viewColumn === ACTIVE_GROUP\n\t\t\t|| (this._editorGroupService.count === 1 && this._editorGroupService.activeGroup.isEmpty)\n\t\t) {\n\t\t\treturn ACTIVE_GROUP;\n\t\t}\n\n\t\tif (showOptions.viewColumn === SIDE_GROUP) {\n\t\t\treturn SIDE_GROUP;\n\t\t}\n\n\t\tif (showOptions.viewColumn >= 0) {\n\t\t\t// First check to see if an existing group exists\n\t\t\tconst groupInColumn = this._editorGroupService.getGroups(GroupsOrder.GRID_APPEARANCE)[showOptions.viewColumn];\n\t\t\tif (groupInColumn) {\n\t\t\t\treturn groupInColumn.id;\n\t\t\t}\n\n\t\t\t// We are dealing with an unknown group and therefore need a new group.\n\t\t\t// Note that the new group's id may not match the one requested. We only allow\n\t\t\t// creating a single new group, so if someone passes in `showOptions.viewColumn = 99`\n\t\t\t// and there are two editor groups open, we simply create a third editor group instead\n\t\t\t// of creating all the groups up to 99.\n\t\t\tconst newGroup = this._editorGroupService.findGroup({ location: GroupLocation.LAST });\n\t\t\tif (newGroup) {\n\t\t\t\tconst direction = preferredSideBySideGroupDirection(this._configurationService);\n\t\t\t\treturn this._editorGroupService.addGroup(newGroup, direction);\n\t\t\t}\n\t\t}\n\n\t\treturn ACTIVE_GROUP;\n\t}\n\n\tpublic $registerSerializer(viewType: string, options: { serializeBuffersForPostMessage: boolean }): void {\n\t\tif (this._revivers.has(viewType)) {\n\t\t\tthrow new Error(`Reviver for ${viewType} already registered`);\n\t\t}\n\n\t\tthis._revivers.set(viewType, this._webviewWorkbenchService.registerResolver({\n\t\t\tcanResolve: (webviewInput) => {\n\t\t\t\treturn webviewInput.viewType === this.webviewPanelViewType.fromExternal(viewType);\n\t\t\t},\n\t\t\tresolveWebview: async (webviewInput): Promise<void> => {\n\t\t\t\tconst viewType = this.webviewPanelViewType.toExternal(webviewInput.viewType);\n\t\t\t\tif (!viewType) {\n\t\t\t\t\twebviewInput.webview.setHtml(this._mainThreadWebviews.getWebviewResolvedFailedContent(webviewInput.viewType));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst handle = generateUuid();\n\n\t\t\t\tthis.addWebviewInput(handle, webviewInput, options);\n\n\t\t\t\tlet state = undefined;\n\t\t\t\tif (webviewInput.webview.state) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tstate = JSON.parse(webviewInput.webview.state);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.error('Could not load webview state', e, webviewInput.webview.state);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tawait this._proxy.$deserializeWebviewPanel(handle, viewType, {\n\t\t\t\t\t\ttitle: webviewInput.getTitle(),\n\t\t\t\t\t\tstate,\n\t\t\t\t\t\tpanelOptions: webviewInput.webview.options,\n\t\t\t\t\t\twebviewOptions: webviewInput.webview.contentOptions,\n\t\t\t\t\t\tactive: webviewInput === this._editorService.activeEditor,\n\t\t\t\t\t}, editorGroupToColumn(this._editorGroupService, webviewInput.group || 0));\n\t\t\t\t} catch (error) {\n\t\t\t\t\tonUnexpectedError(error);\n\t\t\t\t\twebviewInput.webview.setHtml(this._mainThreadWebviews.getWebviewResolvedFailedContent(viewType));\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic $unregisterSerializer(viewType: string): void {\n\t\tif (!this._revivers.has(viewType)) {\n\t\t\tthrow new Error(`No reviver for ${viewType} registered`);\n\t\t}\n\n\t\tthis._revivers.deleteAndDispose(viewType);\n\t}\n\n\tprivate updateWebviewViewStates(activeEditorInput: EditorInput | undefined) {\n\t\tif (!this._webviewInputs.size) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst viewStates: extHostProtocol.WebviewPanelViewStateData = {};\n\n\t\tconst updateViewStatesForInput = (group: IEditorGroup, topLevelInput: EditorInput, editorInput: EditorInput) => {\n\t\t\tif (!(editorInput instanceof WebviewInput)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\teditorInput.updateGroup(group.id);\n\n\t\t\tconst handle = this._webviewInputs.getHandleForInput(editorInput);\n\t\t\tif (handle) {\n\t\t\t\tviewStates[handle] = {\n\t\t\t\t\tvisible: topLevelInput === group.activeEditor,\n\t\t\t\t\tactive: editorInput === activeEditorInput,\n\t\t\t\t\tposition: editorGroupToColumn(this._editorGroupService, group.id),\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\tfor (const group of this._editorGroupService.groups) {\n\t\t\tfor (const input of group.editors) {\n\t\t\t\tif (input instanceof DiffEditorInput) {\n\t\t\t\t\tupdateViewStatesForInput(group, input, input.primary);\n\t\t\t\t\tupdateViewStatesForInput(group, input, input.secondary);\n\t\t\t\t} else {\n\t\t\t\t\tupdateViewStatesForInput(group, input, input);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (Object.keys(viewStates).length) {\n\t\t\tthis._proxy.$onDidChangeWebviewPanelViewStates(viewStates);\n\t\t}\n\t}\n\n\tprivate tryGetWebviewInput(handle: extHostProtocol.WebviewHandle): WebviewInput | undefined {\n\t\treturn this._webviewInputs.getInputForHandle(handle);\n\t}\n}\n\nfunction reviveWebviewIcon(value: extHostProtocol.IWebviewIconPath | undefined): WebviewIcons | undefined {\n\tif (!value) {\n\t\treturn undefined;\n\t}\n\treturn {\n\t\tlight: URI.revive(value.light),\n\t\tdark: URI.revive(value.dark),\n\t};\n}\n\nfunction reviveWebviewOptions(panelOptions: extHostProtocol.IWebviewPanelOptions): WebviewOptions {\n\treturn {\n\t\tenableFindWidget: panelOptions.enableFindWidget,\n\t\tretainContextWhenHidden: panelOptions.retainContextWhenHidden,\n\t};\n}\n"]}