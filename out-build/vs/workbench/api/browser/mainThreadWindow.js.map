{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadWindow.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAYzF,IAAM,IAAI,GAAV,MAAM,IAAI;QAKhB,YACC,cAA+B,EACjB,CAAiC,EAC/B,CAAmC,EAC7B,CAA0C;YAFjC,MAAC,GAAD,CAAC,CAAe;YACd,MAAC,GAAD,CAAC,CAAiB;YACZ,MAAC,GAAD,CAAC,CAAwB;YANhD,MAAC,GAAa,IAAI,eAAG,EAAc,CAAC;YAQpD,IAAI,CAAC,CAAC,GAAO,cAAc,CAAC,QAAQ,CAAC,sBAAG,CAAY,aAAa,CAAC,CAAC;YAEnE,aAAK,CAAC,KAAK,CAAC,CAAC,CAAW,gBAAgB,CAAC,CACvC,IAAI,CAAC,CAAC,CAAK,uBAAuB,EAAE,IAAI,CAAC,CAAC,EAAM,IAAI,CAAC,CAAC,CAAW,CAAC;YACpE,CAAC,CAAmB,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAK,wBAAwB,EAAE,IAAI,CAAC,CAAC,EAAM,IAAI,CAAC,CAAC,CAAW,CAAC;QAC5G,CAAC;QAED,OAAO;YACN,IAAI,CAAC,CAAC,CAAW,OAAO,EAAE,CAAC;QAC5B,CAAC;QAED,gBAAgB;YACf,OAAO,OAAO,CAAC,OAAO,CAAC;gBACtB,SAAS,EAAE,IAAI,CAAC,CAAC,CAAW,QAAQ;gBACpC,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAmB,QAAQ;aAC3C,CAAC,CAAC;QACJ,CAAC;QAED,KAAK,CAAC,QAAQ,CAAC,aAA4B,EAAE,SAA6B,EAAE,OAAwB;YACnG,MAAM,GAAG,GAAG,SAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;YACpC,IAAI,MAAoB,CAAC;YACzB,IAAI,SAAS,IAAI,SAAG,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,QAAQ,EAAE,KAAK,GAAG,CAAC,QAAQ,EAAE,EAAE;gBACpE,mEAAmE;gBACnE,MAAM,GAAG,SAAS,CAAC;aACnB;iBAAM;gBACN,4CAA4C;gBAC5C,MAAM,GAAG,GAAG,CAAC;aACb;YACD,OAAO,IAAI,CAAC,CAAC,CAAa,IAAI,CAAC,MAAM,EAAE;gBACtC,YAAY,EAAE,IAAI;gBAClB,cAAc,EAAE,OAAO,CAAC,cAAc;gBACtC,uBAAuB,EAAE,OAAO,CAAC,uBAAuB;aACxD,CAAC,CAAC;QACJ,CAAC;QAED,KAAK,CAAC,cAAc,CAAC,aAA4B,EAAE,OAAwB;YAC1E,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,CAAC,CAAa,kBAAkB,CAAC,SAAG,CAAC,MAAM,CAAC,aAAa,CAAC,EAAE,OAAO,CAAC,CAAC;YAC/F,OAAO,MAAM,CAAC,QAAQ,CAAC;QACxB,CAAC;KACD,CAAA;IAlDY,oBAAI;mBAAJ,IAAI;QADhB,IAAA,uBAAI,EAAiB,sBAAG,CAAS,gBAAgB,CAAC;QAQhD,WAAA,UAAG,CAAA;QACH,WAAA,YAAG,CAAA;QACH,WAAA,0BAAI,CAAA;OATM,IAAI,CAkDhB","file":"mainThreadWindow.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { IOpenerService } from 'vs/platform/opener/common/opener';\nimport { extHostNamedCustomer, IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport { ExtHostContext, ExtHostWindowShape, IOpenUriOptions, MainContext, MainThreadWindowShape } from '../common/extHost.protocol';\nimport { IHostService } from 'vs/workbench/services/host/browser/host';\nimport { IUserActivityService } from 'vs/workbench/services/userActivity/common/userActivityService';\n\n@extHostNamedCustomer(MainContext.MainThreadWindow)\nexport class MainThreadWindow implements MainThreadWindowShape {\n\n\tprivate readonly proxy: ExtHostWindowShape;\n\tprivate readonly disposables = new DisposableStore();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IHostService private readonly hostService: IHostService,\n\t\t@IOpenerService private readonly openerService: IOpenerService,\n\t\t@IUserActivityService private readonly userActivityService: IUserActivityService,\n\t) {\n\t\tthis.proxy = extHostContext.getProxy(ExtHostContext.ExtHostWindow);\n\n\t\tEvent.latch(hostService.onDidChangeFocus)\n\t\t\t(this.proxy.$onDidChangeWindowFocus, this.proxy, this.disposables);\n\t\tuserActivityService.onDidChangeIsActive(this.proxy.$onDidChangeWindowActive, this.proxy, this.disposables);\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables.dispose();\n\t}\n\n\t$getInitialState() {\n\t\treturn Promise.resolve({\n\t\t\tisFocused: this.hostService.hasFocus,\n\t\t\tisActive: this.userActivityService.isActive,\n\t\t});\n\t}\n\n\tasync $openUri(uriComponents: UriComponents, uriString: string | undefined, options: IOpenUriOptions): Promise<boolean> {\n\t\tconst uri = URI.from(uriComponents);\n\t\tlet target: URI | string;\n\t\tif (uriString && URI.parse(uriString).toString() === uri.toString()) {\n\t\t\t// called with string and no transformation happened -> keep string\n\t\t\ttarget = uriString;\n\t\t} else {\n\t\t\t// called with URI or transformed -> use uri\n\t\t\ttarget = uri;\n\t\t}\n\t\treturn this.openerService.open(target, {\n\t\t\topenExternal: true,\n\t\t\tallowTunneling: options.allowTunneling,\n\t\t\tallowContributedOpeners: options.allowContributedOpeners,\n\t\t});\n\t}\n\n\tasync $asExternalUri(uriComponents: UriComponents, options: IOpenUriOptions): Promise<UriComponents> {\n\t\tconst result = await this.openerService.resolveExternalUri(URI.revive(uriComponents), options);\n\t\treturn result.resolved;\n\t}\n}\n"]}