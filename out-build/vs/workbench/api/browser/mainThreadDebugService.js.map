{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadDebugService.ts"],"names":[],"mappings":"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","file":"mainThreadDebugService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableMap, DisposableStore, toDisposable } from 'vs/base/common/lifecycle';\nimport { URI as uri, UriComponents } from 'vs/base/common/uri';\nimport { IDebugService, IConfig, IDebugConfigurationProvider, IBreakpoint, IFunctionBreakpoint, IBreakpointData, IDebugAdapter, IDebugAdapterDescriptorFactory, IDebugSession, IDebugAdapterFactory, IDataBreakpoint, IDebugSessionOptions, IInstructionBreakpoint, DebugConfigurationProviderTriggerKind } from 'vs/workbench/contrib/debug/common/debug';\nimport {\n\tExtHostContext, ExtHostDebugServiceShape, MainThreadDebugServiceShape, DebugSessionUUID, MainContext,\n\tIBreakpointsDeltaDto, ISourceMultiBreakpointDto, ISourceBreakpointDto, IFunctionBreakpointDto, IDebugSessionDto, IDataBreakpointDto, IStartDebuggingOptions, IDebugConfiguration, IThreadFocusDto, IStackFrameFocusDto\n} from 'vs/workbench/api/common/extHost.protocol';\nimport { extHostNamedCustomer, IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport severity from 'vs/base/common/severity';\nimport { AbstractDebugAdapter } from 'vs/workbench/contrib/debug/common/abstractDebugAdapter';\nimport { IWorkspaceFolder } from 'vs/platform/workspace/common/workspace';\nimport { convertToVSCPaths, convertToDAPaths, isSessionAttach } from 'vs/workbench/contrib/debug/common/debugUtils';\nimport { ErrorNoTelemetry } from 'vs/base/common/errors';\n\n@extHostNamedCustomer(MainContext.MainThreadDebugService)\nexport class MainThreadDebugService implements MainThreadDebugServiceShape, IDebugAdapterFactory {\n\n\tprivate readonly _proxy: ExtHostDebugServiceShape;\n\tprivate readonly _toDispose = new DisposableStore();\n\tprivate readonly _debugAdapters: Map<number, ExtensionHostDebugAdapter>;\n\tprivate _debugAdaptersHandleCounter = 1;\n\tprivate readonly _debugConfigurationProviders: Map<number, IDebugConfigurationProvider>;\n\tprivate readonly _debugAdapterDescriptorFactories: Map<number, IDebugAdapterDescriptorFactory>;\n\tprivate readonly _sessions: Set<DebugSessionUUID>;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IDebugService private readonly debugService: IDebugService\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostDebugService);\n\n\t\tconst sessionListeners = new DisposableMap<IDebugSession, DisposableStore>();\n\t\tthis._toDispose.add(sessionListeners);\n\t\tthis._toDispose.add(debugService.onDidNewSession(session => {\n\t\t\tthis._proxy.$acceptDebugSessionStarted(this.getSessionDto(session));\n\t\t\tconst store = sessionListeners.get(session);\n\t\t\tstore!.add(session.onDidChangeName(name => {\n\t\t\t\tthis._proxy.$acceptDebugSessionNameChanged(this.getSessionDto(session), name);\n\t\t\t}));\n\t\t}));\n\t\t// Need to start listening early to new session events because a custom event can come while a session is initialising\n\t\tthis._toDispose.add(debugService.onWillNewSession(session => {\n\t\t\tlet store = sessionListeners.get(session);\n\t\t\tif (!store) {\n\t\t\t\tstore = new DisposableStore();\n\t\t\t\tsessionListeners.set(session, store);\n\t\t\t}\n\t\t\tstore.add(session.onDidCustomEvent(event => this._proxy.$acceptDebugSessionCustomEvent(this.getSessionDto(session), event)));\n\t\t}));\n\t\tthis._toDispose.add(debugService.onDidEndSession(session => {\n\t\t\tthis._proxy.$acceptDebugSessionTerminated(this.getSessionDto(session));\n\t\t\tthis._sessions.delete(session.getId());\n\t\t\tfor (const [handle, value] of this._debugAdapters) {\n\t\t\t\tif (value.session === session) {\n\t\t\t\t\tthis._debugAdapters.delete(handle);\n\t\t\t\t\t// break;\n\t\t\t\t}\n\t\t\t}\n\t\t\tsessionListeners.deleteAndDispose(session);\n\t\t}));\n\t\tthis._toDispose.add(debugService.getViewModel().onDidFocusSession(session => {\n\t\t\tthis._proxy.$acceptDebugSessionActiveChanged(this.getSessionDto(session));\n\t\t}));\n\t\tthis._toDispose.add(toDisposable(() => {\n\t\t\tfor (const [handle, da] of this._debugAdapters) {\n\t\t\t\tda.fireError(handle, new Error('Extension host shut down'));\n\t\t\t}\n\t\t}));\n\n\t\tthis._debugAdapters = new Map();\n\t\tthis._debugConfigurationProviders = new Map();\n\t\tthis._debugAdapterDescriptorFactories = new Map();\n\t\tthis._sessions = new Set();\n\n\t\tthis._toDispose.add(this.debugService.getViewModel().onDidFocusThread(({ thread, explicit, session }) => {\n\t\t\tif (session) {\n\t\t\t\tconst dto: IThreadFocusDto = {\n\t\t\t\t\tkind: 'thread',\n\t\t\t\t\tthreadId: thread?.threadId,\n\t\t\t\t\tsessionId: session!.getId(),\n\t\t\t\t};\n\t\t\t\tthis._proxy.$acceptStackFrameFocus(dto);\n\t\t\t}\n\t\t}));\n\n\t\tthis._toDispose.add(this.debugService.getViewModel().onDidFocusStackFrame(({ stackFrame, explicit, session }) => {\n\t\t\tif (session) {\n\t\t\t\tconst dto: IStackFrameFocusDto = {\n\t\t\t\t\tkind: 'stackFrame',\n\t\t\t\t\tthreadId: stackFrame?.thread.threadId,\n\t\t\t\t\tframeId: stackFrame?.frameId,\n\t\t\t\t\tsessionId: session.getId(),\n\t\t\t\t};\n\t\t\t\tthis._proxy.$acceptStackFrameFocus(dto);\n\t\t\t}\n\t\t}));\n\t\tthis.sendBreakpointsAndListen();\n\t}\n\n\tprivate sendBreakpointsAndListen(): void {\n\t\t// set up a handler to send more\n\t\tthis._toDispose.add(this.debugService.getModel().onDidChangeBreakpoints(e => {\n\t\t\t// Ignore session only breakpoint events since they should only reflect in the UI\n\t\t\tif (e && !e.sessionOnly) {\n\t\t\t\tconst delta: IBreakpointsDeltaDto = {};\n\t\t\t\tif (e.added) {\n\t\t\t\t\tdelta.added = this.convertToDto(e.added);\n\t\t\t\t}\n\t\t\t\tif (e.removed) {\n\t\t\t\t\tdelta.removed = e.removed.map(x => x.getId());\n\t\t\t\t}\n\t\t\t\tif (e.changed) {\n\t\t\t\t\tdelta.changed = this.convertToDto(e.changed);\n\t\t\t\t}\n\n\t\t\t\tif (delta.added || delta.removed || delta.changed) {\n\t\t\t\t\tthis._proxy.$acceptBreakpointsDelta(delta);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\t// send all breakpoints\n\t\tconst bps = this.debugService.getModel().getBreakpoints();\n\t\tconst fbps = this.debugService.getModel().getFunctionBreakpoints();\n\t\tconst dbps = this.debugService.getModel().getDataBreakpoints();\n\t\tif (bps.length > 0 || fbps.length > 0) {\n\t\t\tthis._proxy.$acceptBreakpointsDelta({\n\t\t\t\tadded: this.convertToDto(bps).concat(this.convertToDto(fbps)).concat(this.convertToDto(dbps))\n\t\t\t});\n\t\t}\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._toDispose.dispose();\n\t}\n\n\t// interface IDebugAdapterProvider\n\n\tcreateDebugAdapter(session: IDebugSession): IDebugAdapter {\n\t\tconst handle = this._debugAdaptersHandleCounter++;\n\t\tconst da = new ExtensionHostDebugAdapter(this, handle, this._proxy, session);\n\t\tthis._debugAdapters.set(handle, da);\n\t\treturn da;\n\t}\n\n\tsubstituteVariables(folder: IWorkspaceFolder | undefined, config: IConfig): Promise<IConfig> {\n\t\treturn Promise.resolve(this._proxy.$substituteVariables(folder ? folder.uri : undefined, config));\n\t}\n\n\trunInTerminal(args: DebugProtocol.RunInTerminalRequestArguments, sessionId: string): Promise<number | undefined> {\n\t\treturn this._proxy.$runInTerminal(args, sessionId);\n\t}\n\n\t// RPC methods (MainThreadDebugServiceShape)\n\n\tpublic $registerDebugTypes(debugTypes: string[]) {\n\t\tthis._toDispose.add(this.debugService.getAdapterManager().registerDebugAdapterFactory(debugTypes, this));\n\t}\n\n\tpublic $registerBreakpoints(DTOs: Array<ISourceMultiBreakpointDto | IFunctionBreakpointDto | IDataBreakpointDto>): Promise<void> {\n\n\t\tfor (const dto of DTOs) {\n\t\t\tif (dto.type === 'sourceMulti') {\n\t\t\t\tconst rawbps = dto.lines.map(l =>\n\t\t\t\t\t<IBreakpointData>{\n\t\t\t\t\t\tid: l.id,\n\t\t\t\t\t\tenabled: l.enabled,\n\t\t\t\t\t\tlineNumber: l.line + 1,\n\t\t\t\t\t\tcolumn: l.character > 0 ? l.character + 1 : undefined, // a column value of 0 results in an omitted column attribute; see #46784\n\t\t\t\t\t\tcondition: l.condition,\n\t\t\t\t\t\thitCondition: l.hitCondition,\n\t\t\t\t\t\tlogMessage: l.logMessage\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t\tthis.debugService.addBreakpoints(uri.revive(dto.uri), rawbps);\n\t\t\t} else if (dto.type === 'function') {\n\t\t\t\tthis.debugService.addFunctionBreakpoint(dto.functionName, dto.id);\n\t\t\t} else if (dto.type === 'data') {\n\t\t\t\tthis.debugService.addDataBreakpoint(dto.label, dto.dataId, dto.canPersist, dto.accessTypes, dto.accessType);\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\tpublic $unregisterBreakpoints(breakpointIds: string[], functionBreakpointIds: string[], dataBreakpointIds: string[]): Promise<void> {\n\t\tbreakpointIds.forEach(id => this.debugService.removeBreakpoints(id));\n\t\tfunctionBreakpointIds.forEach(id => this.debugService.removeFunctionBreakpoints(id));\n\t\tdataBreakpointIds.forEach(id => this.debugService.removeDataBreakpoints(id));\n\t\treturn Promise.resolve();\n\t}\n\n\tpublic $registerDebugConfigurationProvider(debugType: string, providerTriggerKind: DebugConfigurationProviderTriggerKind, hasProvide: boolean, hasResolve: boolean, hasResolve2: boolean, handle: number): Promise<void> {\n\n\t\tconst provider = <IDebugConfigurationProvider>{\n\t\t\ttype: debugType,\n\t\t\ttriggerKind: providerTriggerKind\n\t\t};\n\t\tif (hasProvide) {\n\t\t\tprovider.provideDebugConfigurations = (folder, token) => {\n\t\t\t\treturn this._proxy.$provideDebugConfigurations(handle, folder, token);\n\t\t\t};\n\t\t}\n\t\tif (hasResolve) {\n\t\t\tprovider.resolveDebugConfiguration = (folder, config, token) => {\n\t\t\t\treturn this._proxy.$resolveDebugConfiguration(handle, folder, config, token);\n\t\t\t};\n\t\t}\n\t\tif (hasResolve2) {\n\t\t\tprovider.resolveDebugConfigurationWithSubstitutedVariables = (folder, config, token) => {\n\t\t\t\treturn this._proxy.$resolveDebugConfigurationWithSubstitutedVariables(handle, folder, config, token);\n\t\t\t};\n\t\t}\n\t\tthis._debugConfigurationProviders.set(handle, provider);\n\t\tthis._toDispose.add(this.debugService.getConfigurationManager().registerDebugConfigurationProvider(provider));\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tpublic $unregisterDebugConfigurationProvider(handle: number): void {\n\t\tconst provider = this._debugConfigurationProviders.get(handle);\n\t\tif (provider) {\n\t\t\tthis._debugConfigurationProviders.delete(handle);\n\t\t\tthis.debugService.getConfigurationManager().unregisterDebugConfigurationProvider(provider);\n\t\t}\n\t}\n\n\tpublic $registerDebugAdapterDescriptorFactory(debugType: string, handle: number): Promise<void> {\n\n\t\tconst provider = <IDebugAdapterDescriptorFactory>{\n\t\t\ttype: debugType,\n\t\t\tcreateDebugAdapterDescriptor: session => {\n\t\t\t\treturn Promise.resolve(this._proxy.$provideDebugAdapter(handle, this.getSessionDto(session)));\n\t\t\t}\n\t\t};\n\t\tthis._debugAdapterDescriptorFactories.set(handle, provider);\n\t\tthis._toDispose.add(this.debugService.getAdapterManager().registerDebugAdapterDescriptorFactory(provider));\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tpublic $unregisterDebugAdapterDescriptorFactory(handle: number): void {\n\t\tconst provider = this._debugAdapterDescriptorFactories.get(handle);\n\t\tif (provider) {\n\t\t\tthis._debugAdapterDescriptorFactories.delete(handle);\n\t\t\tthis.debugService.getAdapterManager().unregisterDebugAdapterDescriptorFactory(provider);\n\t\t}\n\t}\n\n\tprivate getSession(sessionId: DebugSessionUUID | undefined): IDebugSession | undefined {\n\t\tif (sessionId) {\n\t\t\treturn this.debugService.getModel().getSession(sessionId, true);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic async $startDebugging(folder: UriComponents | undefined, nameOrConfig: string | IDebugConfiguration, options: IStartDebuggingOptions): Promise<boolean> {\n\t\tconst folderUri = folder ? uri.revive(folder) : undefined;\n\t\tconst launch = this.debugService.getConfigurationManager().getLaunch(folderUri);\n\t\tconst parentSession = this.getSession(options.parentSessionID);\n\t\tconst saveBeforeStart = typeof options.suppressSaveBeforeStart === 'boolean' ? !options.suppressSaveBeforeStart : undefined;\n\t\tconst debugOptions: IDebugSessionOptions = {\n\t\t\tnoDebug: options.noDebug,\n\t\t\tparentSession,\n\t\t\tlifecycleManagedByParent: options.lifecycleManagedByParent,\n\t\t\trepl: options.repl,\n\t\t\tcompact: options.compact,\n\t\t\tcompoundRoot: parentSession?.compoundRoot,\n\t\t\tsaveBeforeRestart: saveBeforeStart,\n\n\t\t\tsuppressDebugStatusbar: options.suppressDebugStatusbar,\n\t\t\tsuppressDebugToolbar: options.suppressDebugToolbar,\n\t\t\tsuppressDebugView: options.suppressDebugView,\n\t\t};\n\t\ttry {\n\t\t\treturn this.debugService.startDebugging(launch, nameOrConfig, debugOptions, saveBeforeStart);\n\t\t} catch (err) {\n\t\t\tthrow new ErrorNoTelemetry(err && err.message ? err.message : 'cannot start debugging');\n\t\t}\n\t}\n\n\tpublic $setDebugSessionName(sessionId: DebugSessionUUID, name: string): void {\n\t\tconst session = this.debugService.getModel().getSession(sessionId);\n\t\tsession?.setName(name);\n\t}\n\n\tpublic $customDebugAdapterRequest(sessionId: DebugSessionUUID, request: string, args: any): Promise<any> {\n\t\tconst session = this.debugService.getModel().getSession(sessionId, true);\n\t\tif (session) {\n\t\t\treturn session.customRequest(request, args).then(response => {\n\t\t\t\tif (response && response.success) {\n\t\t\t\t\treturn response.body;\n\t\t\t\t} else {\n\t\t\t\t\treturn Promise.reject(new ErrorNoTelemetry(response ? response.message : 'custom request failed'));\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\treturn Promise.reject(new ErrorNoTelemetry('debug session not found'));\n\t}\n\n\tpublic $getDebugProtocolBreakpoint(sessionId: DebugSessionUUID, breakpoinId: string): Promise<DebugProtocol.Breakpoint | undefined> {\n\t\tconst session = this.debugService.getModel().getSession(sessionId, true);\n\t\tif (session) {\n\t\t\treturn Promise.resolve(session.getDebugProtocolBreakpoint(breakpoinId));\n\t\t}\n\t\treturn Promise.reject(new ErrorNoTelemetry('debug session not found'));\n\t}\n\n\tpublic $stopDebugging(sessionId: DebugSessionUUID | undefined): Promise<void> {\n\t\tif (sessionId) {\n\t\t\tconst session = this.debugService.getModel().getSession(sessionId, true);\n\t\t\tif (session) {\n\t\t\t\treturn this.debugService.stopSession(session, isSessionAttach(session));\n\t\t\t}\n\t\t} else {\t// stop all\n\t\t\treturn this.debugService.stopSession(undefined);\n\t\t}\n\t\treturn Promise.reject(new ErrorNoTelemetry('debug session not found'));\n\t}\n\n\tpublic $appendDebugConsole(value: string): void {\n\t\t// Use warning as severity to get the orange color for messages coming from the debug extension\n\t\tconst session = this.debugService.getViewModel().focusedSession;\n\t\tsession?.appendToRepl({ output: value, sev: severity.Warning });\n\t}\n\n\tpublic $acceptDAMessage(handle: number, message: DebugProtocol.ProtocolMessage) {\n\t\tthis.getDebugAdapter(handle).acceptMessage(convertToVSCPaths(message, false));\n\t}\n\n\tpublic $acceptDAError(handle: number, name: string, message: string, stack: string) {\n\t\tthis.getDebugAdapter(handle).fireError(handle, new Error(`${name}: ${message}\\n${stack}`));\n\t}\n\n\tpublic $acceptDAExit(handle: number, code: number, signal: string) {\n\t\tthis.getDebugAdapter(handle).fireExit(handle, code, signal);\n\t}\n\n\tprivate getDebugAdapter(handle: number): ExtensionHostDebugAdapter {\n\t\tconst adapter = this._debugAdapters.get(handle);\n\t\tif (!adapter) {\n\t\t\tthrow new Error('Invalid debug adapter');\n\t\t}\n\t\treturn adapter;\n\t}\n\n\t// dto helpers\n\n\tpublic $sessionCached(sessionID: string) {\n\t\t// remember that the EH has cached the session and we do not have to send it again\n\t\tthis._sessions.add(sessionID);\n\t}\n\n\n\tgetSessionDto(session: undefined): undefined;\n\tgetSessionDto(session: IDebugSession): IDebugSessionDto;\n\tgetSessionDto(session: IDebugSession | undefined): IDebugSessionDto | undefined;\n\tgetSessionDto(session: IDebugSession | undefined): IDebugSessionDto | undefined {\n\t\tif (session) {\n\t\t\tconst sessionID = <DebugSessionUUID>session.getId();\n\t\t\tif (this._sessions.has(sessionID)) {\n\t\t\t\treturn sessionID;\n\t\t\t} else {\n\t\t\t\t// this._sessions.add(sessionID); \t// #69534: see $sessionCached above\n\t\t\t\treturn {\n\t\t\t\t\tid: sessionID,\n\t\t\t\t\ttype: session.configuration.type,\n\t\t\t\t\tname: session.name,\n\t\t\t\t\tfolderUri: session.root ? session.root.uri : undefined,\n\t\t\t\t\tconfiguration: session.configuration,\n\t\t\t\t\tparent: session.parentSession?.getId(),\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate convertToDto(bps: (ReadonlyArray<IBreakpoint | IFunctionBreakpoint | IDataBreakpoint | IInstructionBreakpoint>)): Array<ISourceBreakpointDto | IFunctionBreakpointDto | IDataBreakpointDto> {\n\t\treturn bps.map(bp => {\n\t\t\tif ('name' in bp) {\n\t\t\t\tconst fbp = <IFunctionBreakpoint>bp;\n\t\t\t\treturn <IFunctionBreakpointDto>{\n\t\t\t\t\ttype: 'function',\n\t\t\t\t\tid: fbp.getId(),\n\t\t\t\t\tenabled: fbp.enabled,\n\t\t\t\t\tcondition: fbp.condition,\n\t\t\t\t\thitCondition: fbp.hitCondition,\n\t\t\t\t\tlogMessage: fbp.logMessage,\n\t\t\t\t\tfunctionName: fbp.name\n\t\t\t\t};\n\t\t\t} else if ('dataId' in bp) {\n\t\t\t\tconst dbp = <IDataBreakpoint>bp;\n\t\t\t\treturn <IDataBreakpointDto>{\n\t\t\t\t\ttype: 'data',\n\t\t\t\t\tid: dbp.getId(),\n\t\t\t\t\tdataId: dbp.dataId,\n\t\t\t\t\tenabled: dbp.enabled,\n\t\t\t\t\tcondition: dbp.condition,\n\t\t\t\t\thitCondition: dbp.hitCondition,\n\t\t\t\t\tlogMessage: dbp.logMessage,\n\t\t\t\t\tlabel: dbp.description,\n\t\t\t\t\tcanPersist: dbp.canPersist\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tconst sbp = <IBreakpoint>bp;\n\t\t\t\treturn <ISourceBreakpointDto>{\n\t\t\t\t\ttype: 'source',\n\t\t\t\t\tid: sbp.getId(),\n\t\t\t\t\tenabled: sbp.enabled,\n\t\t\t\t\tcondition: sbp.condition,\n\t\t\t\t\thitCondition: sbp.hitCondition,\n\t\t\t\t\tlogMessage: sbp.logMessage,\n\t\t\t\t\turi: sbp.uri,\n\t\t\t\t\tline: sbp.lineNumber > 0 ? sbp.lineNumber - 1 : 0,\n\t\t\t\t\tcharacter: (typeof sbp.column === 'number' && sbp.column > 0) ? sbp.column - 1 : 0,\n\t\t\t\t};\n\t\t\t}\n\t\t});\n\t}\n}\n\n/**\n * DebugAdapter that communicates via extension protocol with another debug adapter.\n */\nclass ExtensionHostDebugAdapter extends AbstractDebugAdapter {\n\n\tconstructor(private readonly _ds: MainThreadDebugService, private _handle: number, private _proxy: ExtHostDebugServiceShape, readonly session: IDebugSession) {\n\t\tsuper();\n\t}\n\n\tfireError(handle: number, err: Error) {\n\t\tthis._onError.fire(err);\n\t}\n\n\tfireExit(handle: number, code: number, signal: string) {\n\t\tthis._onExit.fire(code);\n\t}\n\n\tstartSession(): Promise<void> {\n\t\treturn Promise.resolve(this._proxy.$startDASession(this._handle, this._ds.getSessionDto(this.session)));\n\t}\n\n\tsendMessage(message: DebugProtocol.ProtocolMessage): void {\n\t\tthis._proxy.$sendDAMessage(this._handle, convertToDAPaths(message, true));\n\t}\n\n\tasync stopSession(): Promise<void> {\n\t\tawait this.cancelPendingRequests();\n\t\treturn Promise.resolve(this._proxy.$stopDASession(this._handle));\n\t}\n}\n"]}