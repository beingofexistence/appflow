{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadLabelService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAQzF,IAAM,IAAI,GAAV,MAAM,IAAuB,SAAQ,eAAG;QAI9C,YACC,CAAkB,EACH,CAAmC;YAElD,KAAK,EAAE,CAAC;YAFwB,MAAC,GAAD,CAAC,CAAiB;YAJlC,MAAC,GAA0B,IAAI,CAAC,CAAC,CAAS,IAAI,eAAG,EAAoB,CAAC,CAAC;QAOxF,CAAC;QAED,+BAA+B,CAAC,MAAc,EAAE,SAAiC;YAChF,gGAAgG;YAChG,SAAS,CAAC,QAAQ,GAAG,IAAI,CAAC;YAC1B,MAAM,UAAU,GAAG,IAAI,CAAC,CAAC,CAAa,uBAAuB,CAAC,SAAS,CAAC,CAAC;YACzE,IAAI,CAAC,CAAC,CAAwB,GAAG,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;QACvD,CAAC;QAED,iCAAiC,CAAC,MAAc;YAC/C,IAAI,CAAC,CAAC,CAAwB,gBAAgB,CAAC,MAAM,CAAC,CAAC;QACxD,CAAC;KACD,CAAA;IArBY,oBAAI;mBAAJ,IAAI;QADhB,IAAA,uBAAI,EAAiB,sBAAG,CAAS,sBAAsB,CAAC;QAOtD,WAAA,WAAG,CAAA;OANO,IAAI,CAqBhB","file":"mainThreadLabelService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, DisposableMap } from 'vs/base/common/lifecycle';\nimport { ILabelService, ResourceLabelFormatter } from 'vs/platform/label/common/label';\nimport { MainContext, MainThreadLabelServiceShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { extHostNamedCustomer, IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\n\n@extHostNamedCustomer(MainContext.MainThreadLabelService)\nexport class MainThreadLabelService extends Disposable implements MainThreadLabelServiceShape {\n\n\tprivate readonly _resourceLabelFormatters = this._register(new DisposableMap<number>());\n\n\tconstructor(\n\t\t_: IExtHostContext,\n\t\t@ILabelService private readonly _labelService: ILabelService\n\t) {\n\t\tsuper();\n\t}\n\n\t$registerResourceLabelFormatter(handle: number, formatter: ResourceLabelFormatter): void {\n\t\t// Dynamicily registered formatters should have priority over those contributed via package.json\n\t\tformatter.priority = true;\n\t\tconst disposable = this._labelService.registerCachedFormatter(formatter);\n\t\tthis._resourceLabelFormatters.set(handle, disposable);\n\t}\n\n\t$unregisterResourceLabelFormatter(handle: number): void {\n\t\tthis._resourceLabelFormatters.deleteAndDispose(handle);\n\t}\n}\n"]}