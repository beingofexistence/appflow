{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadAiRelatedInformation.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUzF,IAAM,IAAI,GAAV,MAAM,IAA+B,SAAQ,eAAG;QAItD,YACC,OAAwB,EACM,CAAkD;YAEhF,KAAK,EAAE,CAAC;YAFuC,MAAC,GAAD,CAAC,CAAgC;YAJhE,MAAC,GAAgB,IAAI,CAAC,CAAC,CAAS,IAAI,eAAG,EAAoB,CAAC,CAAC;YAO7E,IAAI,CAAC,CAAC,GAAQ,OAAO,CAAC,QAAQ,CAAC,sBAAG,CAAY,2BAA2B,CAAC,CAAC;QAC5E,CAAC;QAED,wBAAwB,CAAC,KAAa,EAAE,KAA+B;YACtE,sCAAsC;YACtC,OAAO,IAAI,CAAC,CAAC,CAA4B,qBAAqB,CAAC,KAAK,EAAE,KAAK,EAAE,gCAAiB,CAAC,IAAI,CAAC,CAAC;QACtG,CAAC;QAED,qCAAqC,CAAC,MAAc,EAAE,IAA4B;YACjF,MAAM,QAAQ,GAAkC;gBAC/C,2BAA2B,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;oBAC7C,OAAO,IAAI,CAAC,CAAC,CAAM,4BAA4B,CAAC,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;gBACvE,CAAC;aACD,CAAC;YACF,IAAI,CAAC,CAAC,CAAc,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAA4B,oCAAoC,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;QACzH,CAAC;QAED,uCAAuC,CAAC,MAAc;YACrD,IAAI,CAAC,CAAC,CAAc,gBAAgB,CAAC,MAAM,CAAC,CAAC;QAC9C,CAAC;KACD,CAAA;IA7BY,oBAAI;mBAAJ,IAAI;QADhB,IAAA,uBAAI,EAAiB,sBAAG,CAAS,8BAA8B,CAAC;QAO9D,WAAA,0BAAG,CAAA;OANO,IAAI,CA6BhB","file":"mainThreadAiRelatedInformation.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Disposable, DisposableMap } from 'vs/base/common/lifecycle';\nimport { ExtHostAiRelatedInformationShape, ExtHostContext, MainContext, MainThreadAiRelatedInformationShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { RelatedInformationType } from 'vs/workbench/api/common/extHostTypes';\nimport { IAiRelatedInformationProvider, IAiRelatedInformationService, RelatedInformationResult } from 'vs/workbench/services/aiRelatedInformation/common/aiRelatedInformation';\nimport { IExtHostContext, extHostNamedCustomer } from 'vs/workbench/services/extensions/common/extHostCustomers';\n\n@extHostNamedCustomer(MainContext.MainThreadAiRelatedInformation)\nexport class MainThreadAiRelatedInformation extends Disposable implements MainThreadAiRelatedInformationShape {\n\tprivate readonly _proxy: ExtHostAiRelatedInformationShape;\n\tprivate readonly _registrations = this._register(new DisposableMap<number>());\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\t@IAiRelatedInformationService private readonly _aiRelatedInformationService: IAiRelatedInformationService,\n\t) {\n\t\tsuper();\n\t\tthis._proxy = context.getProxy(ExtHostContext.ExtHostAiRelatedInformation);\n\t}\n\n\t$getAiRelatedInformation(query: string, types: RelatedInformationType[]): Promise<RelatedInformationResult[]> {\n\t\t// TODO: use a real cancellation token\n\t\treturn this._aiRelatedInformationService.getRelatedInformation(query, types, CancellationToken.None);\n\t}\n\n\t$registerAiRelatedInformationProvider(handle: number, type: RelatedInformationType): void {\n\t\tconst provider: IAiRelatedInformationProvider = {\n\t\t\tprovideAiRelatedInformation: (query, token) => {\n\t\t\t\treturn this._proxy.$provideAiRelatedInformation(handle, query, token);\n\t\t\t},\n\t\t};\n\t\tthis._registrations.set(handle, this._aiRelatedInformationService.registerAiRelatedInformationProvider(type, provider));\n\t}\n\n\t$unregisterAiRelatedInformationProvider(handle: number): void {\n\t\tthis._registrations.deleteAndDispose(handle);\n\t}\n}\n"]}