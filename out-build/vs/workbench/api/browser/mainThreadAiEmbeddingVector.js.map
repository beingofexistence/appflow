{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadAiEmbeddingVector.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IASzF,IAAM,IAAI,GAAV,MAAM,IAA4B,SAAQ,eAAG;QAInD,YACC,OAAwB,EACG,CAAgD;YAE3E,KAAK,EAAE,CAAC;YAFoC,MAAC,GAAD,CAAC,CAA8B;YAJ3D,MAAC,GAAgB,IAAI,CAAC,CAAC,CAAS,IAAI,eAAG,EAAoB,CAAC,CAAC;YAO7E,IAAI,CAAC,CAAC,GAAQ,OAAO,CAAC,QAAQ,CAAC,sBAAG,CAAY,wBAAwB,CAAC,CAAC;QACzE,CAAC;QAED,kCAAkC,CAAC,KAAa,EAAE,MAAc;YAC/D,MAAM,QAAQ,GAA+B;gBAC5C,wBAAwB,EAAE,CAAC,OAAiB,EAAE,KAAwB,EAAE,EAAE;oBACzE,OAAO,IAAI,CAAC,CAAC,CAAM,yBAAyB,CAC3C,MAAM,EACN,OAAO,EACP,KAAK,CACL,CAAC;gBACH,CAAC;aACD,CAAC;YACF,IAAI,CAAC,CAAC,CAAc,GAAG,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAyB,iCAAiC,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;QACpH,CAAC;QAED,oCAAoC,CAAC,MAAc;YAClD,IAAI,CAAC,CAAC,CAAc,gBAAgB,CAAC,MAAM,CAAC,CAAC;QAC9C,CAAC;KACD,CAAA;IA5BY,oBAAI;mBAAJ,IAAI;QADhB,IAAA,uBAAI,EAAiB,sBAAG,CAAS,2BAA2B,CAAC;QAO3D,WAAA,+BAAI,CAAA;OANM,IAAI,CA4BhB","file":"mainThreadAiEmbeddingVector.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Disposable, DisposableMap } from 'vs/base/common/lifecycle';\nimport { ExtHostAiEmbeddingVectorShape, ExtHostContext, MainContext, MainThreadAiEmbeddingVectorShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { IAiEmbeddingVectorProvider, IAiEmbeddingVectorService } from 'vs/workbench/services/aiEmbeddingVector/common/aiEmbeddingVectorService';\nimport { IExtHostContext, extHostNamedCustomer } from 'vs/workbench/services/extensions/common/extHostCustomers';\n\n@extHostNamedCustomer(MainContext.MainThreadAiEmbeddingVector)\nexport class MainThreadAiEmbeddingVector extends Disposable implements MainThreadAiEmbeddingVectorShape {\n\tprivate readonly _proxy: ExtHostAiEmbeddingVectorShape;\n\tprivate readonly _registrations = this._register(new DisposableMap<number>());\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\t@IAiEmbeddingVectorService private readonly _AiEmbeddingVectorService: IAiEmbeddingVectorService,\n\t) {\n\t\tsuper();\n\t\tthis._proxy = context.getProxy(ExtHostContext.ExtHostAiEmbeddingVector);\n\t}\n\n\t$registerAiEmbeddingVectorProvider(model: string, handle: number): void {\n\t\tconst provider: IAiEmbeddingVectorProvider = {\n\t\t\tprovideAiEmbeddingVector: (strings: string[], token: CancellationToken) => {\n\t\t\t\treturn this._proxy.$provideAiEmbeddingVector(\n\t\t\t\t\thandle,\n\t\t\t\t\tstrings,\n\t\t\t\t\ttoken\n\t\t\t\t);\n\t\t\t},\n\t\t};\n\t\tthis._registrations.set(handle, this._AiEmbeddingVectorService.registerAiEmbeddingVectorProvider(model, provider));\n\t}\n\n\t$unregisterAiEmbeddingVectorProvider(handle: number): void {\n\t\tthis._registrations.deleteAndDispose(handle);\n\t}\n}\n"]}