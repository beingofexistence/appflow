{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadChatProvider.ts"],"names":[],"mappings":"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","file":"mainThreadChatProvider.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { DisposableMap } from 'vs/base/common/lifecycle';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IProgress, Progress } from 'vs/platform/progress/common/progress';\nimport { ExtHostChatProviderShape, ExtHostContext, MainContext, MainThreadChatProviderShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { IChatResponseProviderMetadata, IChatResponseFragment, IChatProviderService, IChatMessage } from 'vs/workbench/contrib/chat/common/chatProvider';\nimport { IExtHostContext, extHostNamedCustomer } from 'vs/workbench/services/extensions/common/extHostCustomers';\n\n@extHostNamedCustomer(MainContext.MainThreadChatProvider)\nexport class MainThreadChatProvider implements MainThreadChatProviderShape {\n\n\tprivate readonly _proxy: ExtHostChatProviderShape;\n\tprivate readonly _providerRegistrations = new DisposableMap<number>();\n\tprivate readonly _pendingProgress = new Map<number, IProgress<IChatResponseFragment>>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IChatProviderService private readonly _chatProviderService: IChatProviderService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostChatProvider);\n\t}\n\n\tdispose(): void {\n\t\tthis._providerRegistrations.dispose();\n\t}\n\n\t$registerProvider(handle: number, identifier: string, metadata: IChatResponseProviderMetadata): void {\n\t\tconst registration = this._chatProviderService.registerChatResponseProvider(identifier, {\n\t\t\tmetadata,\n\t\t\tprovideChatResponse: async (messages, options, progress, token) => {\n\t\t\t\tconst requestId = (Math.random() * 1e6) | 0;\n\t\t\t\tthis._pendingProgress.set(requestId, progress);\n\t\t\t\ttry {\n\t\t\t\t\tawait this._proxy.$provideChatResponse(handle, requestId, messages, options, token);\n\t\t\t\t} finally {\n\t\t\t\t\tthis._pendingProgress.delete(requestId);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis._providerRegistrations.set(handle, registration);\n\t}\n\n\tasync $handleProgressChunk(requestId: number, chunk: IChatResponseFragment): Promise<void> {\n\t\tthis._pendingProgress.get(requestId)?.report(chunk);\n\t}\n\n\t$unregisterProvider(handle: number): void {\n\t\tthis._providerRegistrations.deleteAndDispose(handle);\n\t}\n\n\tasync $fetchResponse(extension: ExtensionIdentifier, providerId: string, requestId: number, messages: IChatMessage[], options: {}, token: CancellationToken): Promise<any> {\n\t\tthis._logService.debug('[CHAT] extension request STARTED', extension.value, requestId);\n\n\t\tconst task = this._chatProviderService.fetchChatResponse(providerId, messages, options, new Progress(value => {\n\t\t\tthis._proxy.$handleResponseFragment(requestId, value);\n\t\t}), token);\n\n\t\ttask.catch(err => {\n\t\t\tthis._logService.error('[CHAT] extension request ERRORED', err, extension.value, requestId);\n\t\t}).finally(() => {\n\t\t\tthis._logService.debug('[CHAT] extension request DONE', extension.value, requestId);\n\t\t});\n\n\t\treturn task;\n\t}\n}\n"]}