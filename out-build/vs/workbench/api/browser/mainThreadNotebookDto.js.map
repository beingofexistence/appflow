{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadNotebookDto.ts","vs/workbench/api/browser/mainThreadNotebookDto.ts"],"names":[],"mappings":"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","file":"mainThreadNotebookDto.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as extHostProtocol from 'vs/workbench/api/common/extHost.protocol';\nimport * as notebookCommon from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { CellExecutionUpdateType } from 'vs/workbench/contrib/notebook/common/notebookExecutionService';\nimport { ICellExecuteUpdate, ICellExecutionComplete } from 'vs/workbench/contrib/notebook/common/notebookExecutionStateService';\n\nexport namespace NotebookDto {\n\n\texport function toNotebookOutputItemDto(item: notebookCommon.IOutputItemDto): extHostProtocol.NotebookOutputItemDto {\n\t\treturn {\n\t\t\tmime: item.mime,\n\t\t\tvalueBytes: item.data\n\t\t};\n\t}\n\n\texport function toNotebookOutputDto(output: notebookCommon.IOutputDto): extHostProtocol.NotebookOutputDto {\n\t\treturn {\n\t\t\toutputId: output.outputId,\n\t\t\tmetadata: output.metadata,\n\t\t\titems: output.outputs.map(toNotebookOutputItemDto)\n\t\t};\n\t}\n\n\texport function toNotebookCellDataDto(cell: notebookCommon.ICellDto2): extHostProtocol.NotebookCellDataDto {\n\t\treturn {\n\t\t\tcellKind: cell.cellKind,\n\t\t\tlanguage: cell.language,\n\t\t\tmime: cell.mime,\n\t\t\tsource: cell.source,\n\t\t\tinternalMetadata: cell.internalMetadata,\n\t\t\tmetadata: cell.metadata,\n\t\t\toutputs: cell.outputs.map(toNotebookOutputDto)\n\t\t};\n\t}\n\n\texport function toNotebookDataDto(data: notebookCommon.NotebookData): extHostProtocol.NotebookDataDto {\n\t\treturn {\n\t\t\tmetadata: data.metadata,\n\t\t\tcells: data.cells.map(toNotebookCellDataDto)\n\t\t};\n\t}\n\n\texport function fromNotebookOutputItemDto(item: extHostProtocol.NotebookOutputItemDto): notebookCommon.IOutputItemDto {\n\t\treturn {\n\t\t\tmime: item.mime,\n\t\t\tdata: item.valueBytes\n\t\t};\n\t}\n\n\texport function fromNotebookOutputDto(output: extHostProtocol.NotebookOutputDto): notebookCommon.IOutputDto {\n\t\treturn {\n\t\t\toutputId: output.outputId,\n\t\t\tmetadata: output.metadata,\n\t\t\toutputs: output.items.map(fromNotebookOutputItemDto)\n\t\t};\n\t}\n\n\texport function fromNotebookCellDataDto(cell: extHostProtocol.NotebookCellDataDto): notebookCommon.ICellDto2 {\n\t\treturn {\n\t\t\tcellKind: cell.cellKind,\n\t\t\tlanguage: cell.language,\n\t\t\tmime: cell.mime,\n\t\t\tsource: cell.source,\n\t\t\toutputs: cell.outputs.map(fromNotebookOutputDto),\n\t\t\tmetadata: cell.metadata,\n\t\t\tinternalMetadata: cell.internalMetadata\n\t\t};\n\t}\n\n\texport function fromNotebookDataDto(data: extHostProtocol.NotebookDataDto): notebookCommon.NotebookData {\n\t\treturn {\n\t\t\tmetadata: data.metadata,\n\t\t\tcells: data.cells.map(fromNotebookCellDataDto)\n\t\t};\n\t}\n\n\texport function toNotebookCellDto(cell: notebookCommon.ICell): extHostProtocol.NotebookCellDto {\n\t\treturn {\n\t\t\thandle: cell.handle,\n\t\t\turi: cell.uri,\n\t\t\tsource: cell.textBuffer.getLinesContent(),\n\t\t\teol: cell.textBuffer.getEOL(),\n\t\t\tlanguage: cell.language,\n\t\t\tcellKind: cell.cellKind,\n\t\t\toutputs: cell.outputs.map(toNotebookOutputDto),\n\t\t\tmetadata: cell.metadata,\n\t\t\tinternalMetadata: cell.internalMetadata,\n\t\t};\n\t}\n\n\texport function fromCellExecuteUpdateDto(data: extHostProtocol.ICellExecuteUpdateDto): ICellExecuteUpdate {\n\t\tif (data.editType === CellExecutionUpdateType.Output) {\n\t\t\treturn {\n\t\t\t\teditType: data.editType,\n\t\t\t\tcellHandle: data.cellHandle,\n\t\t\t\tappend: data.append,\n\t\t\t\toutputs: data.outputs.map(fromNotebookOutputDto)\n\t\t\t};\n\t\t} else if (data.editType === CellExecutionUpdateType.OutputItems) {\n\t\t\treturn {\n\t\t\t\teditType: data.editType,\n\t\t\t\tappend: data.append,\n\t\t\t\toutputId: data.outputId,\n\t\t\t\titems: data.items.map(fromNotebookOutputItemDto)\n\t\t\t};\n\t\t} else {\n\t\t\treturn data;\n\t\t}\n\t}\n\n\texport function fromCellExecuteCompleteDto(data: extHostProtocol.ICellExecutionCompleteDto): ICellExecutionComplete {\n\t\treturn data;\n\t}\n\n\texport function fromCellEditOperationDto(edit: extHostProtocol.ICellEditOperationDto): notebookCommon.ICellEditOperation {\n\t\tif (edit.editType === notebookCommon.CellEditType.Replace) {\n\t\t\treturn {\n\t\t\t\teditType: edit.editType,\n\t\t\t\tindex: edit.index,\n\t\t\t\tcount: edit.count,\n\t\t\t\tcells: edit.cells.map(fromNotebookCellDataDto)\n\t\t\t};\n\t\t} else {\n\t\t\treturn edit;\n\t\t}\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as extHostProtocol from 'vs/workbench/api/common/extHost.protocol';\nimport * as notebookCommon from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { CellExecutionUpdateType } from 'vs/workbench/contrib/notebook/common/notebookExecutionService';\nimport { ICellExecuteUpdate, ICellExecutionComplete } from 'vs/workbench/contrib/notebook/common/notebookExecutionStateService';\n\nexport namespace NotebookDto {\n\n\texport function toNotebookOutputItemDto(item: notebookCommon.IOutputItemDto): extHostProtocol.NotebookOutputItemDto {\n\t\treturn {\n\t\t\tmime: item.mime,\n\t\t\tvalueBytes: item.data\n\t\t};\n\t}\n\n\texport function toNotebookOutputDto(output: notebookCommon.IOutputDto): extHostProtocol.NotebookOutputDto {\n\t\treturn {\n\t\t\toutputId: output.outputId,\n\t\t\tmetadata: output.metadata,\n\t\t\titems: output.outputs.map(toNotebookOutputItemDto)\n\t\t};\n\t}\n\n\texport function toNotebookCellDataDto(cell: notebookCommon.ICellDto2): extHostProtocol.NotebookCellDataDto {\n\t\treturn {\n\t\t\tcellKind: cell.cellKind,\n\t\t\tlanguage: cell.language,\n\t\t\tmime: cell.mime,\n\t\t\tsource: cell.source,\n\t\t\tinternalMetadata: cell.internalMetadata,\n\t\t\tmetadata: cell.metadata,\n\t\t\toutputs: cell.outputs.map(toNotebookOutputDto)\n\t\t};\n\t}\n\n\texport function toNotebookDataDto(data: notebookCommon.NotebookData): extHostProtocol.NotebookDataDto {\n\t\treturn {\n\t\t\tmetadata: data.metadata,\n\t\t\tcells: data.cells.map(toNotebookCellDataDto)\n\t\t};\n\t}\n\n\texport function fromNotebookOutputItemDto(item: extHostProtocol.NotebookOutputItemDto): notebookCommon.IOutputItemDto {\n\t\treturn {\n\t\t\tmime: item.mime,\n\t\t\tdata: item.valueBytes\n\t\t};\n\t}\n\n\texport function fromNotebookOutputDto(output: extHostProtocol.NotebookOutputDto): notebookCommon.IOutputDto {\n\t\treturn {\n\t\t\toutputId: output.outputId,\n\t\t\tmetadata: output.metadata,\n\t\t\toutputs: output.items.map(fromNotebookOutputItemDto)\n\t\t};\n\t}\n\n\texport function fromNotebookCellDataDto(cell: extHostProtocol.NotebookCellDataDto): notebookCommon.ICellDto2 {\n\t\treturn {\n\t\t\tcellKind: cell.cellKind,\n\t\t\tlanguage: cell.language,\n\t\t\tmime: cell.mime,\n\t\t\tsource: cell.source,\n\t\t\toutputs: cell.outputs.map(fromNotebookOutputDto),\n\t\t\tmetadata: cell.metadata,\n\t\t\tinternalMetadata: cell.internalMetadata\n\t\t};\n\t}\n\n\texport function fromNotebookDataDto(data: extHostProtocol.NotebookDataDto): notebookCommon.NotebookData {\n\t\treturn {\n\t\t\tmetadata: data.metadata,\n\t\t\tcells: data.cells.map(fromNotebookCellDataDto)\n\t\t};\n\t}\n\n\texport function toNotebookCellDto(cell: notebookCommon.ICell): extHostProtocol.NotebookCellDto {\n\t\treturn {\n\t\t\thandle: cell.handle,\n\t\t\turi: cell.uri,\n\t\t\tsource: cell.textBuffer.getLinesContent(),\n\t\t\teol: cell.textBuffer.getEOL(),\n\t\t\tlanguage: cell.language,\n\t\t\tcellKind: cell.cellKind,\n\t\t\toutputs: cell.outputs.map(toNotebookOutputDto),\n\t\t\tmetadata: cell.metadata,\n\t\t\tinternalMetadata: cell.internalMetadata,\n\t\t};\n\t}\n\n\texport function fromCellExecuteUpdateDto(data: extHostProtocol.ICellExecuteUpdateDto): ICellExecuteUpdate {\n\t\tif (data.editType === CellExecutionUpdateType.Output) {\n\t\t\treturn {\n\t\t\t\teditType: data.editType,\n\t\t\t\tcellHandle: data.cellHandle,\n\t\t\t\tappend: data.append,\n\t\t\t\toutputs: data.outputs.map(fromNotebookOutputDto)\n\t\t\t};\n\t\t} else if (data.editType === CellExecutionUpdateType.OutputItems) {\n\t\t\treturn {\n\t\t\t\teditType: data.editType,\n\t\t\t\tappend: data.append,\n\t\t\t\toutputId: data.outputId,\n\t\t\t\titems: data.items.map(fromNotebookOutputItemDto)\n\t\t\t};\n\t\t} else {\n\t\t\treturn data;\n\t\t}\n\t}\n\n\texport function fromCellExecuteCompleteDto(data: extHostProtocol.ICellExecutionCompleteDto): ICellExecutionComplete {\n\t\treturn data;\n\t}\n\n\texport function fromCellEditOperationDto(edit: extHostProtocol.ICellEditOperationDto): notebookCommon.ICellEditOperation {\n\t\tif (edit.editType === notebookCommon.CellEditType.Replace) {\n\t\t\treturn {\n\t\t\t\teditType: edit.editType,\n\t\t\t\tindex: edit.index,\n\t\t\t\tcount: edit.count,\n\t\t\t\tcells: edit.cells.map(fromNotebookCellDataDto)\n\t\t\t};\n\t\t} else {\n\t\t\treturn edit;\n\t\t}\n\t}\n}\n"]}