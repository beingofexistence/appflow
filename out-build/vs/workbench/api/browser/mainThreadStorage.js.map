{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadStorage.ts"],"names":[],"mappings":"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","file":"mainThreadStorage.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IStorageService, StorageScope } from 'vs/platform/storage/common/storage';\nimport { MainThreadStorageShape, MainContext, ExtHostStorageShape, ExtHostContext } from '../common/extHost.protocol';\nimport { extHostNamedCustomer, IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { isWeb } from 'vs/base/common/platform';\nimport { IExtensionIdWithVersion, IExtensionStorageService } from 'vs/platform/extensionManagement/common/extensionStorage';\nimport { migrateExtensionStorage } from 'vs/workbench/services/extensions/common/extensionStorageMigration';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\n\n@extHostNamedCustomer(MainContext.MainThreadStorage)\nexport class MainThreadStorage implements MainThreadStorageShape {\n\n\tprivate readonly _proxy: ExtHostStorageShape;\n\tprivate readonly _storageListener = new DisposableStore();\n\tprivate readonly _sharedStorageKeysToWatch: Map<string, boolean> = new Map<string, boolean>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IExtensionStorageService private readonly _extensionStorageService: IExtensionStorageService,\n\t\t@IStorageService private readonly _storageService: IStorageService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostStorage);\n\n\t\tthis._storageListener.add(this._storageService.onDidChangeValue(StorageScope.PROFILE, undefined, this._storageListener)(e => {\n\t\t\tif (this._sharedStorageKeysToWatch.has(e.key)) {\n\t\t\t\tconst rawState = this._extensionStorageService.getExtensionStateRaw(e.key, true);\n\t\t\t\tif (typeof rawState === 'string') {\n\t\t\t\t\tthis._proxy.$acceptValue(true, e.key, rawState);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tdispose(): void {\n\t\tthis._storageListener.dispose();\n\t}\n\n\tasync $initializeExtensionStorage(shared: boolean, extensionId: string): Promise<string | undefined> {\n\n\t\tawait this.checkAndMigrateExtensionStorage(extensionId, shared);\n\n\t\tif (shared) {\n\t\t\tthis._sharedStorageKeysToWatch.set(extensionId, true);\n\t\t}\n\t\treturn this._extensionStorageService.getExtensionStateRaw(extensionId, shared);\n\t}\n\n\tasync $setValue(shared: boolean, key: string, value: object): Promise<void> {\n\t\tthis._extensionStorageService.setExtensionState(key, value, shared);\n\t}\n\n\t$registerExtensionStorageKeysToSync(extension: IExtensionIdWithVersion, keys: string[]): void {\n\t\tthis._extensionStorageService.setKeysForSync(extension, keys);\n\t}\n\n\tprivate async checkAndMigrateExtensionStorage(extensionId: string, shared: boolean): Promise<void> {\n\t\ttry {\n\t\t\tlet sourceExtensionId = this._extensionStorageService.getSourceExtensionToMigrate(extensionId);\n\n\t\t\t// TODO: @sandy081 - Remove it after 6 months\n\t\t\t// If current extension does not have any migration requested\n\t\t\t// Then check if the extension has to be migrated for using lower case in web\n\t\t\t// If so, migrate the extension state from lower case id to its normal id.\n\t\t\tif (!sourceExtensionId && isWeb && extensionId !== extensionId.toLowerCase()) {\n\t\t\t\tsourceExtensionId = extensionId.toLowerCase();\n\t\t\t}\n\n\t\t\tif (sourceExtensionId) {\n\t\t\t\t// TODO: @sandy081 - Remove it after 6 months\n\t\t\t\t// In Web, extension state was used to be stored in lower case extension id.\n\t\t\t\t// Hence check that if the lower cased source extension was not yet migrated in web\n\t\t\t\t// If not take the lower cased source extension id for migration\n\t\t\t\tif (isWeb && sourceExtensionId !== sourceExtensionId.toLowerCase() && this._extensionStorageService.getExtensionState(sourceExtensionId.toLowerCase(), shared) && !this._extensionStorageService.getExtensionState(sourceExtensionId, shared)) {\n\t\t\t\t\tsourceExtensionId = sourceExtensionId.toLowerCase();\n\t\t\t\t}\n\t\t\t\tawait migrateExtensionStorage(sourceExtensionId, extensionId, shared, this._instantiationService);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis._logService.error(error);\n\t\t}\n\t}\n}\n"]}