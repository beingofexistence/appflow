{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadChatSlashCommands.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAWzF,IAAM,IAAI,GAAV,MAAM,IAAI;QAMhB,YACC,cAA+B,EACL,CAA8C;YAA7B,MAAC,GAAD,CAAC,CAA4B;YANxD,MAAC,GAAW,IAAI,eAAqB,CAAC;YACtC,MAAC,GAAkB,IAAI,GAAG,EAAyC,CAAC;YAOpF,IAAI,CAAC,CAAC,GAAQ,cAAc,CAAC,QAAQ,CAAC,sBAAG,CAAY,wBAAwB,CAAC,CAAC;QAChF,CAAC;QAED,OAAO;YACN,IAAI,CAAC,CAAC,CAAS,kBAAkB,EAAE,CAAC;QACrC,CAAC;QAED,gBAAgB,CAAC,MAAc,EAAE,IAAY,EAAE,MAAc;YAE5D,IAAI,CAAC,IAAI,CAAC,CAAC,CAAwB,UAAU,CAAC,IAAI,CAAC,EAAE;gBACpD,0BAA0B;gBAC1B,IAAI,CAAC,CAAC,CAAwB,iBAAiB,CAAC;oBAC/C,OAAO,EAAE,IAAI;oBACb,MAAM;iBACN,CAAC,CAAC;aACH;YAED,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAwB,qBAAqB,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;gBAC9G,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;gBAChC,IAAI,CAAC,CAAC,CAAgB,GAAG,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;gBAC/C,IAAI;oBACH,OAAO,MAAM,IAAI,CAAC,CAAC,CAAM,eAAe,CAAC,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,EAAE,OAAO,EAAE,EAAE,KAAK,CAAC,CAAC;iBACxF;wBAAS;oBACT,IAAI,CAAC,CAAC,CAAgB,MAAM,CAAC,SAAS,CAAC,CAAC;iBACxC;YACF,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,CAAC,CAAS,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC/B,CAAC;QAED,KAAK,CAAC,oBAAoB,CAAC,SAAiB,EAAE,KAAyB;YACtE,IAAI,CAAC,CAAC,CAAgB,GAAG,CAAC,SAAS,CAAC,EAAE,MAAM,CAAC,IAAA,iBAAG,EAAI,KAAK,CAAC,CAAC,CAAC;QAC7D,CAAC;QAED,kBAAkB,CAAC,MAAc;YAChC,IAAI,CAAC,CAAC,CAAS,gBAAgB,CAAC,MAAM,CAAC,CAAC;QACzC,CAAC;KACD,CAAA;IA9CY,oBAAI;mBAAJ,IAAI;QADhB,IAAA,uBAAI,EAAiB,sBAAG,CAAS,2BAA2B,CAAC;QAS3D,WAAA,uBAAG,CAAA;OARO,IAAI,CA8ChB","file":"mainThreadChatSlashCommands.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableMap } from 'vs/base/common/lifecycle';\nimport { revive } from 'vs/base/common/marshalling';\nimport { IProgress } from 'vs/platform/progress/common/progress';\nimport { ExtHostChatSlashCommandsShape, ExtHostContext, MainContext, MainThreadChatSlashCommandsShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { IChatSlashCommandService, IChatSlashFragment } from 'vs/workbench/contrib/chat/common/chatSlashCommands';\nimport { IExtHostContext, extHostNamedCustomer } from 'vs/workbench/services/extensions/common/extHostCustomers';\n\n\n@extHostNamedCustomer(MainContext.MainThreadChatSlashCommands)\nexport class MainThreadChatSlashCommands implements MainThreadChatSlashCommandsShape {\n\n\tprivate readonly _commands = new DisposableMap<number>;\n\tprivate readonly _pendingProgress = new Map<number, IProgress<IChatSlashFragment>>();\n\tprivate readonly _proxy: ExtHostChatSlashCommandsShape;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IChatSlashCommandService private readonly _chatSlashCommandService: IChatSlashCommandService\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostChatSlashCommands);\n\t}\n\n\tdispose(): void {\n\t\tthis._commands.clearAndDisposeAll();\n\t}\n\n\t$registerCommand(handle: number, name: string, detail: string): void {\n\n\t\tif (!this._chatSlashCommandService.hasCommand(name)) {\n\t\t\t// dynamic slash commands!\n\t\t\tthis._chatSlashCommandService.registerSlashData({\n\t\t\t\tcommand: name,\n\t\t\t\tdetail\n\t\t\t});\n\t\t}\n\n\t\tconst d = this._chatSlashCommandService.registerSlashCallback(name, async (prompt, progress, history, token) => {\n\t\t\tconst requestId = Math.random();\n\t\t\tthis._pendingProgress.set(requestId, progress);\n\t\t\ttry {\n\t\t\t\treturn await this._proxy.$executeCommand(handle, requestId, prompt, { history }, token);\n\t\t\t} finally {\n\t\t\t\tthis._pendingProgress.delete(requestId);\n\t\t\t}\n\t\t});\n\t\tthis._commands.set(handle, d);\n\t}\n\n\tasync $handleProgressChunk(requestId: number, chunk: IChatSlashFragment): Promise<void> {\n\t\tthis._pendingProgress.get(requestId)?.report(revive(chunk));\n\t}\n\n\t$unregisterCommand(handle: number): void {\n\t\tthis._commands.deleteAndDispose(handle);\n\t}\n}\n"]}