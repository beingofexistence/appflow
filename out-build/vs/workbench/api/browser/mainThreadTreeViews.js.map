{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadTreeViews.ts"],"names":[],"mappings":"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","file":"mainThreadTreeViews.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { ExtHostContext, MainThreadTreeViewsShape, ExtHostTreeViewsShape, MainContext, CheckboxUpdate } from 'vs/workbench/api/common/extHost.protocol';\nimport { ITreeViewDataProvider, ITreeItem, IViewsService, ITreeView, IViewsRegistry, ITreeViewDescriptor, IRevealOptions, Extensions, ResolvableTreeItem, ITreeViewDragAndDropController, IViewBadge, NoTreeViewError } from 'vs/workbench/common/views';\nimport { extHostNamedCustomer, IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport { distinct } from 'vs/base/common/arrays';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { isUndefinedOrNull, isNumber } from 'vs/base/common/types';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { createStringDataTransferItem, VSDataTransfer } from 'vs/base/common/dataTransfer';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { DataTransferFileCache } from 'vs/workbench/api/common/shared/dataTransferCache';\nimport * as typeConvert from 'vs/workbench/api/common/extHostTypeConverters';\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\n\n@extHostNamedCustomer(MainContext.MainThreadTreeViews)\nexport class MainThreadTreeViews extends Disposable implements MainThreadTreeViewsShape {\n\n\tprivate readonly _proxy: ExtHostTreeViewsShape;\n\tprivate readonly _dataProviders: Map<string, { dataProvider: TreeViewDataProvider; disposables: DisposableStore }> = new Map<string, { dataProvider: TreeViewDataProvider; disposables: DisposableStore }>();\n\tprivate readonly _dndControllers = new Map<string, TreeViewDragAndDropController>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IViewsService private readonly viewsService: IViewsService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostTreeViews);\n\t}\n\n\tasync $registerTreeViewDataProvider(treeViewId: string, options: { showCollapseAll: boolean; canSelectMany: boolean; dropMimeTypes: string[]; dragMimeTypes: string[]; hasHandleDrag: boolean; hasHandleDrop: boolean; manuallyManageCheckboxes: boolean }): Promise<void> {\n\t\tthis.logService.trace('MainThreadTreeViews#$registerTreeViewDataProvider', treeViewId, options);\n\n\t\tthis.extensionService.whenInstalledExtensionsRegistered().then(() => {\n\t\t\tconst dataProvider = new TreeViewDataProvider(treeViewId, this._proxy, this.notificationService);\n\t\t\tconst disposables = new DisposableStore();\n\t\t\tthis._register(disposables);\n\t\t\tthis._dataProviders.set(treeViewId, { dataProvider, disposables });\n\t\t\tconst dndController = (options.hasHandleDrag || options.hasHandleDrop)\n\t\t\t\t? new TreeViewDragAndDropController(treeViewId, options.dropMimeTypes, options.dragMimeTypes, options.hasHandleDrag, this._proxy) : undefined;\n\t\t\tconst viewer = this.getTreeView(treeViewId);\n\t\t\tif (viewer) {\n\t\t\t\t// Order is important here. The internal tree isn't created until the dataProvider is set.\n\t\t\t\t// Set all other properties first!\n\t\t\t\tviewer.showCollapseAllAction = options.showCollapseAll;\n\t\t\t\tviewer.canSelectMany = options.canSelectMany;\n\t\t\t\tviewer.manuallyManageCheckboxes = options.manuallyManageCheckboxes;\n\t\t\t\tviewer.dragAndDropController = dndController;\n\t\t\t\tif (dndController) {\n\t\t\t\t\tthis._dndControllers.set(treeViewId, dndController);\n\t\t\t\t}\n\t\t\t\tviewer.dataProvider = dataProvider;\n\t\t\t\tthis.registerListeners(treeViewId, viewer, disposables);\n\t\t\t\tthis._proxy.$setVisible(treeViewId, viewer.visible);\n\t\t\t} else {\n\t\t\t\tthis.notificationService.error('No view is registered with id: ' + treeViewId);\n\t\t\t}\n\t\t});\n\t}\n\n\t$reveal(treeViewId: string, itemInfo: { item: ITreeItem; parentChain: ITreeItem[] } | undefined, options: IRevealOptions): Promise<void> {\n\t\tthis.logService.trace('MainThreadTreeViews#$reveal', treeViewId, itemInfo?.item, itemInfo?.parentChain, options);\n\n\t\treturn this.viewsService.openView(treeViewId, options.focus)\n\t\t\t.then(() => {\n\t\t\t\tconst viewer = this.getTreeView(treeViewId);\n\t\t\t\tif (viewer && itemInfo) {\n\t\t\t\t\treturn this.reveal(viewer, this._dataProviders.get(treeViewId)!.dataProvider, itemInfo.item, itemInfo.parentChain, options);\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t});\n\t}\n\n\t$refresh(treeViewId: string, itemsToRefreshByHandle: { [treeItemHandle: string]: ITreeItem }): Promise<void> {\n\t\tthis.logService.trace('MainThreadTreeViews#$refresh', treeViewId, itemsToRefreshByHandle);\n\n\t\tconst viewer = this.getTreeView(treeViewId);\n\t\tconst dataProvider = this._dataProviders.get(treeViewId);\n\t\tif (viewer && dataProvider) {\n\t\t\tconst itemsToRefresh = dataProvider.dataProvider.getItemsToRefresh(itemsToRefreshByHandle);\n\t\t\treturn viewer.refresh(itemsToRefresh.length ? itemsToRefresh : undefined);\n\t\t}\n\t\treturn Promise.resolve();\n\t}\n\n\t$setMessage(treeViewId: string, message: string | IMarkdownString): void {\n\t\tthis.logService.trace('MainThreadTreeViews#$setMessage', treeViewId, message.toString());\n\n\t\tconst viewer = this.getTreeView(treeViewId);\n\t\tif (viewer) {\n\t\t\tviewer.message = message;\n\t\t}\n\t}\n\n\t$setTitle(treeViewId: string, title: string, description: string | undefined): void {\n\t\tthis.logService.trace('MainThreadTreeViews#$setTitle', treeViewId, title, description);\n\n\t\tconst viewer = this.getTreeView(treeViewId);\n\t\tif (viewer) {\n\t\t\tviewer.title = title;\n\t\t\tviewer.description = description;\n\t\t}\n\t}\n\n\t$setBadge(treeViewId: string, badge: IViewBadge | undefined): void {\n\t\tthis.logService.trace('MainThreadTreeViews#$setBadge', treeViewId, badge?.value, badge?.tooltip);\n\n\t\tconst viewer = this.getTreeView(treeViewId);\n\t\tif (viewer) {\n\t\t\tviewer.badge = badge;\n\t\t}\n\t}\n\n\t$resolveDropFileData(destinationViewId: string, requestId: number, dataItemId: string): Promise<VSBuffer> {\n\t\tconst controller = this._dndControllers.get(destinationViewId);\n\t\tif (!controller) {\n\t\t\tthrow new Error('Unknown tree');\n\t\t}\n\t\treturn controller.resolveDropFileData(requestId, dataItemId);\n\t}\n\n\tpublic async $disposeTree(treeViewId: string): Promise<void> {\n\t\tconst viewer = this.getTreeView(treeViewId);\n\t\tif (viewer) {\n\t\t\tviewer.dataProvider = undefined;\n\t\t}\n\t\tconst dataProvider = this._dataProviders.get(treeViewId);\n\t\tif (dataProvider) {\n\t\t\tdataProvider.disposables.dispose();\n\t\t\tthis._dataProviders.delete(treeViewId);\n\t\t}\n\t}\n\n\tprivate async reveal(treeView: ITreeView, dataProvider: TreeViewDataProvider, itemIn: ITreeItem, parentChain: ITreeItem[], options: IRevealOptions): Promise<void> {\n\t\toptions = options ? options : { select: false, focus: false };\n\t\tconst select = isUndefinedOrNull(options.select) ? false : options.select;\n\t\tconst focus = isUndefinedOrNull(options.focus) ? false : options.focus;\n\t\tlet expand = Math.min(isNumber(options.expand) ? options.expand : options.expand === true ? 1 : 0, 3);\n\n\t\tif (dataProvider.isEmpty()) {\n\t\t\t// Refresh if empty\n\t\t\tawait treeView.refresh();\n\t\t}\n\t\tfor (const parent of parentChain) {\n\t\t\tconst parentItem = dataProvider.getItem(parent.handle);\n\t\t\tif (parentItem) {\n\t\t\t\tawait treeView.expand(parentItem);\n\t\t\t}\n\t\t}\n\t\tconst item = dataProvider.getItem(itemIn.handle);\n\t\tif (item) {\n\t\t\tawait treeView.reveal(item);\n\t\t\tif (select) {\n\t\t\t\ttreeView.setSelection([item]);\n\t\t\t}\n\t\t\tif (focus === false) {\n\t\t\t\ttreeView.setFocus();\n\t\t\t} else if (focus) {\n\t\t\t\ttreeView.setFocus(item);\n\t\t\t}\n\t\t\tlet itemsToExpand = [item];\n\t\t\tfor (; itemsToExpand.length > 0 && expand > 0; expand--) {\n\t\t\t\tawait treeView.expand(itemsToExpand);\n\t\t\t\titemsToExpand = itemsToExpand.reduce((result, itemValue) => {\n\t\t\t\t\tconst item = dataProvider.getItem(itemValue.handle);\n\t\t\t\t\tif (item && item.children && item.children.length) {\n\t\t\t\t\t\tresult.push(...item.children);\n\t\t\t\t\t}\n\t\t\t\t\treturn result;\n\t\t\t\t}, [] as ITreeItem[]);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate registerListeners(treeViewId: string, treeView: ITreeView, disposables: DisposableStore): void {\n\t\tdisposables.add(treeView.onDidExpandItem(item => this._proxy.$setExpanded(treeViewId, item.handle, true)));\n\t\tdisposables.add(treeView.onDidCollapseItem(item => this._proxy.$setExpanded(treeViewId, item.handle, false)));\n\t\tdisposables.add(treeView.onDidChangeSelectionAndFocus(items => this._proxy.$setSelectionAndFocus(treeViewId, items.selection.map(({ handle }) => handle), items.focus.handle)));\n\t\tdisposables.add(treeView.onDidChangeVisibility(isVisible => this._proxy.$setVisible(treeViewId, isVisible)));\n\t\tdisposables.add(treeView.onDidChangeCheckboxState(items => {\n\t\t\tthis._proxy.$changeCheckboxState(treeViewId, <CheckboxUpdate[]>items.map(item => {\n\t\t\t\treturn { treeItemHandle: item.handle, newState: item.checkbox?.isChecked ?? false };\n\t\t\t}));\n\t\t}));\n\t}\n\n\tprivate getTreeView(treeViewId: string): ITreeView | null {\n\t\tconst viewDescriptor: ITreeViewDescriptor = <ITreeViewDescriptor>Registry.as<IViewsRegistry>(Extensions.ViewsRegistry).getView(treeViewId);\n\t\treturn viewDescriptor ? viewDescriptor.treeView : null;\n\t}\n\n\toverride dispose(): void {\n\t\tthis._dataProviders.forEach((dataProvider, treeViewId) => {\n\t\t\tconst treeView = this.getTreeView(treeViewId);\n\t\t\tif (treeView) {\n\t\t\t\ttreeView.dataProvider = undefined;\n\t\t\t}\n\t\t});\n\t\tthis._dataProviders.clear();\n\n\t\tthis._dndControllers.clear();\n\n\t\tsuper.dispose();\n\t}\n}\n\ntype TreeItemHandle = string;\n\nclass TreeViewDragAndDropController implements ITreeViewDragAndDropController {\n\n\tprivate readonly dataTransfersCache = new DataTransferFileCache();\n\n\tconstructor(private readonly treeViewId: string,\n\t\treadonly dropMimeTypes: string[],\n\t\treadonly dragMimeTypes: string[],\n\t\treadonly hasWillDrop: boolean,\n\t\tprivate readonly _proxy: ExtHostTreeViewsShape) { }\n\n\tasync handleDrop(dataTransfer: VSDataTransfer, targetTreeItem: ITreeItem | undefined, token: CancellationToken,\n\t\toperationUuid?: string, sourceTreeId?: string, sourceTreeItemHandles?: string[]): Promise<void> {\n\t\tconst request = this.dataTransfersCache.add(dataTransfer);\n\t\ttry {\n\t\t\tconst dataTransferDto = await typeConvert.DataTransfer.from(dataTransfer);\n\t\t\tif (token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn await this._proxy.$handleDrop(this.treeViewId, request.id, dataTransferDto, targetTreeItem?.handle, token, operationUuid, sourceTreeId, sourceTreeItemHandles);\n\t\t} finally {\n\t\t\trequest.dispose();\n\t\t}\n\t}\n\n\tasync handleDrag(sourceTreeItemHandles: string[], operationUuid: string, token: CancellationToken): Promise<VSDataTransfer | undefined> {\n\t\tif (!this.hasWillDrop) {\n\t\t\treturn;\n\t\t}\n\t\tconst additionalDataTransferDTO = await this._proxy.$handleDrag(this.treeViewId, sourceTreeItemHandles, operationUuid, token);\n\t\tif (!additionalDataTransferDTO) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst additionalDataTransfer = new VSDataTransfer();\n\t\tadditionalDataTransferDTO.items.forEach(([type, item]) => {\n\t\t\tadditionalDataTransfer.replace(type, createStringDataTransferItem(item.asString));\n\t\t});\n\t\treturn additionalDataTransfer;\n\t}\n\n\tpublic resolveDropFileData(requestId: number, dataItemId: string): Promise<VSBuffer> {\n\t\treturn this.dataTransfersCache.resolveFileData(requestId, dataItemId);\n\t}\n}\n\nclass TreeViewDataProvider implements ITreeViewDataProvider {\n\n\tprivate readonly itemsMap: Map<TreeItemHandle, ITreeItem> = new Map<TreeItemHandle, ITreeItem>();\n\tprivate hasResolve: Promise<boolean>;\n\n\tconstructor(private readonly treeViewId: string,\n\t\tprivate readonly _proxy: ExtHostTreeViewsShape,\n\t\tprivate readonly notificationService: INotificationService\n\t) {\n\t\tthis.hasResolve = this._proxy.$hasResolve(this.treeViewId);\n\t}\n\n\tgetChildren(treeItem?: ITreeItem): Promise<ITreeItem[] | undefined> {\n\t\treturn this._proxy.$getChildren(this.treeViewId, treeItem ? treeItem.handle : undefined)\n\t\t\t.then(\n\t\t\t\tchildren => this.postGetChildren(children),\n\t\t\t\terr => {\n\t\t\t\t\t// It can happen that a tree view is disposed right as `getChildren` is called. This results in an error because the data provider gets removed.\n\t\t\t\t\t// The tree will shortly get cleaned up in this case. We just need to handle the error here.\n\t\t\t\t\tif (!NoTreeViewError.is(err)) {\n\t\t\t\t\t\tthis.notificationService.error(err);\n\t\t\t\t\t}\n\t\t\t\t\treturn [];\n\t\t\t\t});\n\t}\n\n\tgetItemsToRefresh(itemsToRefreshByHandle: { [treeItemHandle: string]: ITreeItem }): ITreeItem[] {\n\t\tconst itemsToRefresh: ITreeItem[] = [];\n\t\tif (itemsToRefreshByHandle) {\n\t\t\tfor (const treeItemHandle of Object.keys(itemsToRefreshByHandle)) {\n\t\t\t\tconst currentTreeItem = this.getItem(treeItemHandle);\n\t\t\t\tif (currentTreeItem) { // Refresh only if the item exists\n\t\t\t\t\tconst treeItem = itemsToRefreshByHandle[treeItemHandle];\n\t\t\t\t\t// Update the current item with refreshed item\n\t\t\t\t\tthis.updateTreeItem(currentTreeItem, treeItem);\n\t\t\t\t\tif (treeItemHandle === treeItem.handle) {\n\t\t\t\t\t\titemsToRefresh.push(currentTreeItem);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Update maps when handle is changed and refresh parent\n\t\t\t\t\t\tthis.itemsMap.delete(treeItemHandle);\n\t\t\t\t\t\tthis.itemsMap.set(currentTreeItem.handle, currentTreeItem);\n\t\t\t\t\t\tconst parent = treeItem.parentHandle ? this.itemsMap.get(treeItem.parentHandle) : null;\n\t\t\t\t\t\tif (parent) {\n\t\t\t\t\t\t\titemsToRefresh.push(parent);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn itemsToRefresh;\n\t}\n\n\tgetItem(treeItemHandle: string): ITreeItem | undefined {\n\t\treturn this.itemsMap.get(treeItemHandle);\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn this.itemsMap.size === 0;\n\t}\n\n\tprivate async postGetChildren(elements: ITreeItem[] | undefined): Promise<ResolvableTreeItem[] | undefined> {\n\t\tif (elements === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst result: ResolvableTreeItem[] = [];\n\t\tconst hasResolve = await this.hasResolve;\n\t\tif (elements) {\n\t\t\tfor (const element of elements) {\n\t\t\t\tconst resolvable = new ResolvableTreeItem(element, hasResolve ? (token) => {\n\t\t\t\t\treturn this._proxy.$resolve(this.treeViewId, element.handle, token);\n\t\t\t\t} : undefined);\n\t\t\t\tthis.itemsMap.set(element.handle, resolvable);\n\t\t\t\tresult.push(resolvable);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate updateTreeItem(current: ITreeItem, treeItem: ITreeItem): void {\n\t\ttreeItem.children = treeItem.children ? treeItem.children : undefined;\n\t\tif (current) {\n\t\t\tconst properties = distinct([...Object.keys(current instanceof ResolvableTreeItem ? current.asTreeItem() : current),\n\t\t\t...Object.keys(treeItem)]);\n\t\t\tfor (const property of properties) {\n\t\t\t\t(<any>current)[property] = (<any>treeItem)[property];\n\t\t\t}\n\t\t\tif (current instanceof ResolvableTreeItem) {\n\t\t\t\tcurrent.resetResolve();\n\t\t\t}\n\t\t}\n\t}\n}\n"]}