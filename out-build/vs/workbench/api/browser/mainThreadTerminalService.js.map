{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadTerminalService.ts"],"names":[],"mappings":"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","file":"mainThreadTerminalService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore, Disposable, IDisposable, MutableDisposable } from 'vs/base/common/lifecycle';\nimport { ExtHostContext, ExtHostTerminalServiceShape, MainThreadTerminalServiceShape, MainContext, TerminalLaunchConfig, ITerminalDimensionsDto, ExtHostTerminalIdentifier, TerminalQuickFix, ITerminalCommandDto } from 'vs/workbench/api/common/extHost.protocol';\nimport { extHostNamedCustomer, IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport { URI } from 'vs/base/common/uri';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IProcessProperty, IProcessReadyWindowsPty, IShellLaunchConfig, IShellLaunchConfigDto, ITerminalOutputMatch, ITerminalOutputMatcher, ProcessPropertyType, TerminalExitReason, TerminalLocation } from 'vs/platform/terminal/common/terminal';\nimport { TerminalDataBufferer } from 'vs/platform/terminal/common/terminalDataBuffering';\nimport { ITerminalEditorService, ITerminalExternalLinkProvider, ITerminalGroupService, ITerminalInstance, ITerminalLink, ITerminalService } from 'vs/workbench/contrib/terminal/browser/terminal';\nimport { TerminalProcessExtHostProxy } from 'vs/workbench/contrib/terminal/browser/terminalProcessExtHostProxy';\nimport { IEnvironmentVariableService } from 'vs/workbench/contrib/terminal/common/environmentVariable';\nimport { deserializeEnvironmentDescriptionMap, deserializeEnvironmentVariableCollection, serializeEnvironmentVariableCollection } from 'vs/platform/terminal/common/environmentVariableShared';\nimport { IStartExtensionTerminalRequest, ITerminalProcessExtHostProxy, ITerminalProfileResolverService, ITerminalProfileService } from 'vs/workbench/contrib/terminal/common/terminal';\nimport { IRemoteAgentService } from 'vs/workbench/services/remote/common/remoteAgentService';\nimport { OperatingSystem, OS } from 'vs/base/common/platform';\nimport { TerminalEditorLocationOptions } from 'vscode';\nimport { Promises } from 'vs/base/common/async';\nimport { ISerializableEnvironmentDescriptionMap, ISerializableEnvironmentVariableCollection } from 'vs/platform/terminal/common/environmentVariable';\nimport { ITerminalLinkProviderService } from 'vs/workbench/contrib/terminalContrib/links/browser/links';\nimport { ITerminalQuickFixService, ITerminalQuickFix, TerminalQuickFixType } from 'vs/workbench/contrib/terminalContrib/quickFix/browser/quickFix';\nimport { TerminalCapability } from 'vs/platform/terminal/common/capabilities/capabilities';\n\n\n@extHostNamedCustomer(MainContext.MainThreadTerminalService)\nexport class MainThreadTerminalService implements MainThreadTerminalServiceShape {\n\n\tprivate readonly _store = new DisposableStore();\n\tprivate readonly _proxy: ExtHostTerminalServiceShape;\n\n\t/**\n\t * Stores a map from a temporary terminal id (a UUID generated on the extension host side)\n\t * to a numeric terminal id (an id generated on the renderer side)\n\t * This comes in play only when dealing with terminals created on the extension host side\n\t */\n\tprivate readonly _extHostTerminals = new Map<string, Promise<ITerminalInstance>>();\n\tprivate readonly _terminalProcessProxies = new Map<number, ITerminalProcessExtHostProxy>();\n\tprivate readonly _profileProviders = new Map<string, IDisposable>();\n\tprivate readonly _quickFixProviders = new Map<string, IDisposable>();\n\tprivate readonly _dataEventTracker = new MutableDisposable<TerminalDataEventTracker>();\n\tprivate readonly _sendCommandEventListener = new MutableDisposable();\n\t/**\n\t * A single shared terminal link provider for the exthost. When an ext registers a link\n\t * provider, this is registered with the terminal on the renderer side and all links are\n\t * provided through this, even from multiple ext link providers. Xterm should remove lower\n\t * priority intersecting links itself.\n\t */\n\tprivate _linkProvider: IDisposable | undefined;\n\n\tprivate _os: OperatingSystem = OS;\n\n\tconstructor(\n\t\tprivate readonly _extHostContext: IExtHostContext,\n\t\t@ITerminalService private readonly _terminalService: ITerminalService,\n\t\t@ITerminalLinkProviderService private readonly _terminalLinkProviderService: ITerminalLinkProviderService,\n\t\t@ITerminalQuickFixService private readonly _terminalQuickFixService: ITerminalQuickFixService,\n\t\t@IInstantiationService private readonly _instantiationService: IInstantiationService,\n\t\t@IEnvironmentVariableService private readonly _environmentVariableService: IEnvironmentVariableService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@ITerminalProfileResolverService private readonly _terminalProfileResolverService: ITerminalProfileResolverService,\n\t\t@IRemoteAgentService remoteAgentService: IRemoteAgentService,\n\t\t@ITerminalGroupService private readonly _terminalGroupService: ITerminalGroupService,\n\t\t@ITerminalEditorService private readonly _terminalEditorService: ITerminalEditorService,\n\t\t@ITerminalProfileService private readonly _terminalProfileService: ITerminalProfileService\n\t) {\n\t\tthis._proxy = _extHostContext.getProxy(ExtHostContext.ExtHostTerminalService);\n\n\t\t// ITerminalService listeners\n\t\tthis._store.add(_terminalService.onDidCreateInstance((instance) => {\n\t\t\tthis._onTerminalOpened(instance);\n\t\t\tthis._onInstanceDimensionsChanged(instance);\n\t\t}));\n\n\t\tthis._store.add(_terminalService.onDidDisposeInstance(instance => this._onTerminalDisposed(instance)));\n\t\tthis._store.add(_terminalService.onDidReceiveProcessId(instance => this._onTerminalProcessIdReady(instance)));\n\t\tthis._store.add(_terminalService.onDidChangeInstanceDimensions(instance => this._onInstanceDimensionsChanged(instance)));\n\t\tthis._store.add(_terminalService.onDidMaximumDimensionsChange(instance => this._onInstanceMaximumDimensionsChanged(instance)));\n\t\tthis._store.add(_terminalService.onDidRequestStartExtensionTerminal(e => this._onRequestStartExtensionTerminal(e)));\n\t\tthis._store.add(_terminalService.onDidChangeActiveInstance(instance => this._onActiveTerminalChanged(instance ? instance.instanceId : null)));\n\t\tthis._store.add(_terminalService.onDidChangeInstanceTitle(instance => instance && this._onTitleChanged(instance.instanceId, instance.title)));\n\t\tthis._store.add(_terminalService.onDidInputInstanceData(instance => this._proxy.$acceptTerminalInteraction(instance.instanceId)));\n\t\tthis._store.add(_terminalService.onDidChangeSelection(instance => this._proxy.$acceptTerminalSelection(instance.instanceId, instance.selection)));\n\n\t\t// Set initial ext host state\n\t\tfor (const instance of this._terminalService.instances) {\n\t\t\tthis._onTerminalOpened(instance);\n\t\t\tinstance.processReady.then(() => this._onTerminalProcessIdReady(instance));\n\t\t}\n\t\tconst activeInstance = this._terminalService.activeInstance;\n\t\tif (activeInstance) {\n\t\t\tthis._proxy.$acceptActiveTerminalChanged(activeInstance.instanceId);\n\t\t}\n\t\tif (this._environmentVariableService.collections.size > 0) {\n\t\t\tconst collectionAsArray = [...this._environmentVariableService.collections.entries()];\n\t\t\tconst serializedCollections: [string, ISerializableEnvironmentVariableCollection][] = collectionAsArray.map(e => {\n\t\t\t\treturn [e[0], serializeEnvironmentVariableCollection(e[1].map)];\n\t\t\t});\n\t\t\tthis._proxy.$initEnvironmentVariableCollections(serializedCollections);\n\t\t}\n\n\t\tremoteAgentService.getEnvironment().then(async env => {\n\t\t\tthis._os = env?.os || OS;\n\t\t\tthis._updateDefaultProfile();\n\t\t});\n\t\tthis._store.add(this._terminalProfileService.onDidChangeAvailableProfiles(() => this._updateDefaultProfile()));\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._store.dispose();\n\t\tthis._linkProvider?.dispose();\n\t\tfor (const provider of this._profileProviders.values()) {\n\t\t\tprovider.dispose();\n\t\t}\n\t\tfor (const provider of this._quickFixProviders.values()) {\n\t\t\tprovider.dispose();\n\t\t}\n\t}\n\n\tprivate async _updateDefaultProfile() {\n\t\tconst remoteAuthority = this._extHostContext.remoteAuthority ?? undefined;\n\t\tconst defaultProfile = this._terminalProfileResolverService.getDefaultProfile({ remoteAuthority, os: this._os });\n\t\tconst defaultAutomationProfile = this._terminalProfileResolverService.getDefaultProfile({ remoteAuthority, os: this._os, allowAutomationShell: true });\n\t\tthis._proxy.$acceptDefaultProfile(...await Promise.all([defaultProfile, defaultAutomationProfile]));\n\t}\n\n\tprivate async _getTerminalInstance(id: ExtHostTerminalIdentifier): Promise<ITerminalInstance | undefined> {\n\t\tif (typeof id === 'string') {\n\t\t\treturn this._extHostTerminals.get(id);\n\t\t}\n\t\treturn this._terminalService.getInstanceFromId(id);\n\t}\n\n\tpublic async $createTerminal(extHostTerminalId: string, launchConfig: TerminalLaunchConfig): Promise<void> {\n\t\tconst shellLaunchConfig: IShellLaunchConfig = {\n\t\t\tname: launchConfig.name,\n\t\t\texecutable: launchConfig.shellPath,\n\t\t\targs: launchConfig.shellArgs,\n\t\t\tcwd: typeof launchConfig.cwd === 'string' ? launchConfig.cwd : URI.revive(launchConfig.cwd),\n\t\t\ticon: launchConfig.icon,\n\t\t\tcolor: launchConfig.color,\n\t\t\tinitialText: launchConfig.initialText,\n\t\t\twaitOnExit: launchConfig.waitOnExit,\n\t\t\tignoreConfigurationCwd: true,\n\t\t\tenv: launchConfig.env,\n\t\t\tstrictEnv: launchConfig.strictEnv,\n\t\t\thideFromUser: launchConfig.hideFromUser,\n\t\t\tcustomPtyImplementation: launchConfig.isExtensionCustomPtyTerminal\n\t\t\t\t? (id, cols, rows) => new TerminalProcessExtHostProxy(id, cols, rows, this._terminalService)\n\t\t\t\t: undefined,\n\t\t\textHostTerminalId,\n\t\t\tisFeatureTerminal: launchConfig.isFeatureTerminal,\n\t\t\tisExtensionOwnedTerminal: launchConfig.isExtensionOwnedTerminal,\n\t\t\tuseShellEnvironment: launchConfig.useShellEnvironment,\n\t\t\tisTransient: launchConfig.isTransient\n\t\t};\n\t\tconst terminal = Promises.withAsyncBody<ITerminalInstance>(async r => {\n\t\t\tconst terminal = await this._terminalService.createTerminal({\n\t\t\t\tconfig: shellLaunchConfig,\n\t\t\t\tlocation: await this._deserializeParentTerminal(launchConfig.location)\n\t\t\t});\n\t\t\tr(terminal);\n\t\t});\n\t\tthis._extHostTerminals.set(extHostTerminalId, terminal);\n\t\tconst terminalInstance = await terminal;\n\t\tthis._store.add(terminalInstance.onDisposed(() => {\n\t\t\tthis._extHostTerminals.delete(extHostTerminalId);\n\t\t}));\n\t}\n\n\tprivate async _deserializeParentTerminal(location?: TerminalLocation | TerminalEditorLocationOptions | { parentTerminal: ExtHostTerminalIdentifier } | { splitActiveTerminal: boolean; location?: TerminalLocation }): Promise<TerminalLocation | TerminalEditorLocationOptions | { parentTerminal: ITerminalInstance } | { splitActiveTerminal: boolean } | undefined> {\n\t\tif (typeof location === 'object' && 'parentTerminal' in location) {\n\t\t\tconst parentTerminal = await this._extHostTerminals.get(location.parentTerminal.toString());\n\t\t\treturn parentTerminal ? { parentTerminal } : undefined;\n\t\t}\n\t\treturn location;\n\t}\n\n\tpublic async $show(id: ExtHostTerminalIdentifier, preserveFocus: boolean): Promise<void> {\n\t\tconst terminalInstance = await this._getTerminalInstance(id);\n\t\tif (terminalInstance) {\n\t\t\tthis._terminalService.setActiveInstance(terminalInstance);\n\t\t\tif (terminalInstance.target === TerminalLocation.Editor) {\n\t\t\t\tawait this._terminalEditorService.revealActiveEditor(preserveFocus);\n\t\t\t} else {\n\t\t\t\tawait this._terminalGroupService.showPanel(!preserveFocus);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async $hide(id: ExtHostTerminalIdentifier): Promise<void> {\n\t\tconst instanceToHide = await this._getTerminalInstance(id);\n\t\tconst activeInstance = this._terminalService.activeInstance;\n\t\tif (activeInstance && activeInstance.instanceId === instanceToHide?.instanceId && activeInstance.target !== TerminalLocation.Editor) {\n\t\t\tthis._terminalGroupService.hidePanel();\n\t\t}\n\t}\n\n\tpublic async $dispose(id: ExtHostTerminalIdentifier): Promise<void> {\n\t\t(await this._getTerminalInstance(id))?.dispose(TerminalExitReason.Extension);\n\t}\n\n\tpublic async $sendText(id: ExtHostTerminalIdentifier, text: string, addNewLine: boolean): Promise<void> {\n\t\tconst instance = await this._getTerminalInstance(id);\n\t\tawait instance?.sendText(text, addNewLine);\n\t}\n\n\tpublic $sendProcessExit(terminalId: number, exitCode: number | undefined): void {\n\t\tthis._terminalProcessProxies.get(terminalId)?.emitExit(exitCode);\n\t}\n\n\tpublic $startSendingDataEvents(): void {\n\t\tif (!this._dataEventTracker.value) {\n\t\t\tthis._dataEventTracker.value = this._instantiationService.createInstance(TerminalDataEventTracker, (id, data) => {\n\t\t\t\tthis._onTerminalData(id, data);\n\t\t\t});\n\t\t\t// Send initial events if they exist\n\t\t\tfor (const instance of this._terminalService.instances) {\n\t\t\t\tfor (const data of instance.initialDataEvents || []) {\n\t\t\t\t\tthis._onTerminalData(instance.instanceId, data);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic $stopSendingDataEvents(): void {\n\t\tthis._dataEventTracker.clear();\n\t}\n\n\tpublic $startSendingCommandEvents(): void {\n\t\tthis._logService.info('$startSendingCommandEvents');\n\t\tif (this._sendCommandEventListener.value) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst multiplexer = this._terminalService.onInstanceCapabilityEvent(TerminalCapability.CommandDetection, capability => capability.onCommandFinished);\n\t\tmultiplexer.event(e => {\n\t\t\tthis._onDidExecuteCommand(e.instance.instanceId, {\n\t\t\t\tcommandLine: e.data.command,\n\t\t\t\t// TODO: Convert to URI if possible\n\t\t\t\tcwd: e.data.cwd,\n\t\t\t\texitCode: e.data.exitCode,\n\t\t\t\toutput: e.data.getOutput()\n\t\t\t});\n\t\t});\n\t\tthis._sendCommandEventListener.value = multiplexer;\n\t}\n\n\tpublic $stopSendingCommandEvents(): void {\n\t\tthis._logService.info('$stopSendingCommandEvents');\n\t\tthis._sendCommandEventListener.clear();\n\t}\n\n\tpublic $startLinkProvider(): void {\n\t\tthis._linkProvider?.dispose();\n\t\tthis._linkProvider = this._terminalLinkProviderService.registerLinkProvider(new ExtensionTerminalLinkProvider(this._proxy));\n\t}\n\n\tpublic $stopLinkProvider(): void {\n\t\tthis._linkProvider?.dispose();\n\t\tthis._linkProvider = undefined;\n\t}\n\n\tpublic $registerProcessSupport(isSupported: boolean): void {\n\t\tthis._terminalService.registerProcessSupport(isSupported);\n\t}\n\n\tpublic $registerProfileProvider(id: string, extensionIdentifier: string): void {\n\t\t// Proxy profile provider requests through the extension host\n\t\tthis._profileProviders.set(id, this._terminalProfileService.registerTerminalProfileProvider(extensionIdentifier, id, {\n\t\t\tcreateContributedTerminalProfile: async (options) => {\n\t\t\t\treturn this._proxy.$createContributedProfileTerminal(id, options);\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic $unregisterProfileProvider(id: string): void {\n\t\tthis._profileProviders.get(id)?.dispose();\n\t\tthis._profileProviders.delete(id);\n\t}\n\n\tpublic async $registerQuickFixProvider(id: string, extensionId: string): Promise<void> {\n\t\tthis._quickFixProviders.set(id, this._terminalQuickFixService.registerQuickFixProvider(id, {\n\t\t\tprovideTerminalQuickFixes: async (terminalCommand, lines, options, token) => {\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (options.outputMatcher?.length && options.outputMatcher.length > 40) {\n\t\t\t\t\toptions.outputMatcher.length = 40;\n\t\t\t\t\tthis._logService.warn('Cannot exceed output matcher length of 40');\n\t\t\t\t}\n\t\t\t\tconst commandLineMatch = terminalCommand.command.match(options.commandLineMatcher);\n\t\t\t\tif (!commandLineMatch || !lines) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst outputMatcher = options.outputMatcher;\n\t\t\t\tlet outputMatch;\n\t\t\t\tif (outputMatcher) {\n\t\t\t\t\toutputMatch = getOutputMatchForLines(lines, outputMatcher);\n\t\t\t\t}\n\t\t\t\tif (!outputMatch) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconst matchResult = { commandLineMatch, outputMatch, commandLine: terminalCommand.command };\n\n\t\t\t\tif (matchResult) {\n\t\t\t\t\tconst result = await this._proxy.$provideTerminalQuickFixes(id, matchResult, token);\n\t\t\t\t\tif (result && Array.isArray(result)) {\n\t\t\t\t\t\treturn result.map(r => parseQuickFix(id, extensionId, r));\n\t\t\t\t\t} else if (result) {\n\t\t\t\t\t\treturn parseQuickFix(id, extensionId, result);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}));\n\t}\n\n\tpublic $unregisterQuickFixProvider(id: string): void {\n\t\tthis._quickFixProviders.get(id)?.dispose();\n\t\tthis._quickFixProviders.delete(id);\n\t}\n\n\tprivate _onActiveTerminalChanged(terminalId: number | null): void {\n\t\tthis._proxy.$acceptActiveTerminalChanged(terminalId);\n\t}\n\n\tprivate _onTerminalData(terminalId: number, data: string): void {\n\t\tthis._proxy.$acceptTerminalProcessData(terminalId, data);\n\t}\n\n\tprivate _onDidExecuteCommand(terminalId: number, command: ITerminalCommandDto): void {\n\t\tthis._proxy.$acceptDidExecuteCommand(terminalId, command);\n\t}\n\n\tprivate _onTitleChanged(terminalId: number, name: string): void {\n\t\tthis._proxy.$acceptTerminalTitleChange(terminalId, name);\n\t}\n\n\tprivate _onTerminalDisposed(terminalInstance: ITerminalInstance): void {\n\t\tthis._proxy.$acceptTerminalClosed(terminalInstance.instanceId, terminalInstance.exitCode, terminalInstance.exitReason ?? TerminalExitReason.Unknown);\n\t}\n\n\tprivate _onTerminalOpened(terminalInstance: ITerminalInstance): void {\n\t\tconst extHostTerminalId = terminalInstance.shellLaunchConfig.extHostTerminalId;\n\t\tconst shellLaunchConfigDto: IShellLaunchConfigDto = {\n\t\t\tname: terminalInstance.shellLaunchConfig.name,\n\t\t\texecutable: terminalInstance.shellLaunchConfig.executable,\n\t\t\targs: terminalInstance.shellLaunchConfig.args,\n\t\t\tcwd: terminalInstance.shellLaunchConfig.cwd,\n\t\t\tenv: terminalInstance.shellLaunchConfig.env,\n\t\t\thideFromUser: terminalInstance.shellLaunchConfig.hideFromUser\n\t\t};\n\t\tthis._proxy.$acceptTerminalOpened(terminalInstance.instanceId, extHostTerminalId, terminalInstance.title, shellLaunchConfigDto);\n\t}\n\n\tprivate _onTerminalProcessIdReady(terminalInstance: ITerminalInstance): void {\n\t\tif (terminalInstance.processId === undefined) {\n\t\t\treturn;\n\t\t}\n\t\tthis._proxy.$acceptTerminalProcessId(terminalInstance.instanceId, terminalInstance.processId);\n\t}\n\n\tprivate _onInstanceDimensionsChanged(instance: ITerminalInstance): void {\n\t\tthis._proxy.$acceptTerminalDimensions(instance.instanceId, instance.cols, instance.rows);\n\t}\n\n\tprivate _onInstanceMaximumDimensionsChanged(instance: ITerminalInstance): void {\n\t\tthis._proxy.$acceptTerminalMaximumDimensions(instance.instanceId, instance.maxCols, instance.maxRows);\n\t}\n\n\tprivate _onRequestStartExtensionTerminal(request: IStartExtensionTerminalRequest): void {\n\t\tconst proxy = request.proxy;\n\t\tthis._terminalProcessProxies.set(proxy.instanceId, proxy);\n\n\t\t// Note that onResize is not being listened to here as it needs to fire when max dimensions\n\t\t// change, excluding the dimension override\n\t\tconst initialDimensions: ITerminalDimensionsDto | undefined = request.cols && request.rows ? {\n\t\t\tcolumns: request.cols,\n\t\t\trows: request.rows\n\t\t} : undefined;\n\n\t\tthis._proxy.$startExtensionTerminal(\n\t\t\tproxy.instanceId,\n\t\t\tinitialDimensions\n\t\t).then(request.callback);\n\n\t\tproxy.onInput(data => this._proxy.$acceptProcessInput(proxy.instanceId, data));\n\t\tproxy.onShutdown(immediate => this._proxy.$acceptProcessShutdown(proxy.instanceId, immediate));\n\t\tproxy.onRequestCwd(() => this._proxy.$acceptProcessRequestCwd(proxy.instanceId));\n\t\tproxy.onRequestInitialCwd(() => this._proxy.$acceptProcessRequestInitialCwd(proxy.instanceId));\n\t}\n\n\tpublic $sendProcessData(terminalId: number, data: string): void {\n\t\tthis._terminalProcessProxies.get(terminalId)?.emitData(data);\n\t}\n\n\tpublic $sendProcessReady(terminalId: number, pid: number, cwd: string, windowsPty: IProcessReadyWindowsPty | undefined): void {\n\t\tthis._terminalProcessProxies.get(terminalId)?.emitReady(pid, cwd, windowsPty);\n\t}\n\n\tpublic $sendProcessProperty(terminalId: number, property: IProcessProperty<any>): void {\n\t\tif (property.type === ProcessPropertyType.Title) {\n\t\t\tconst instance = this._terminalService.getInstanceFromId(terminalId);\n\t\t\tinstance?.rename(property.value);\n\t\t}\n\t\tthis._terminalProcessProxies.get(terminalId)?.emitProcessProperty(property);\n\t}\n\n\t$setEnvironmentVariableCollection(extensionIdentifier: string, persistent: boolean, collection: ISerializableEnvironmentVariableCollection | undefined, descriptionMap: ISerializableEnvironmentDescriptionMap): void {\n\t\tif (collection) {\n\t\t\tconst translatedCollection = {\n\t\t\t\tpersistent,\n\t\t\t\tmap: deserializeEnvironmentVariableCollection(collection),\n\t\t\t\tdescriptionMap: deserializeEnvironmentDescriptionMap(descriptionMap)\n\t\t\t};\n\t\t\tthis._environmentVariableService.set(extensionIdentifier, translatedCollection);\n\t\t} else {\n\t\t\tthis._environmentVariableService.delete(extensionIdentifier);\n\t\t}\n\t}\n}\n\n/**\n * Encapsulates temporary tracking of data events from terminal instances, once disposed all\n * listeners are removed.\n */\nclass TerminalDataEventTracker extends Disposable {\n\tprivate readonly _bufferer: TerminalDataBufferer;\n\n\tconstructor(\n\t\tprivate readonly _callback: (id: number, data: string) => void,\n\t\t@ITerminalService private readonly _terminalService: ITerminalService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(this._bufferer = new TerminalDataBufferer(this._callback));\n\n\t\tfor (const instance of this._terminalService.instances) {\n\t\t\tthis._registerInstance(instance);\n\t\t}\n\t\tthis._register(this._terminalService.onDidCreateInstance(instance => this._registerInstance(instance)));\n\t\tthis._register(this._terminalService.onDidDisposeInstance(instance => this._bufferer.stopBuffering(instance.instanceId)));\n\t}\n\n\tprivate _registerInstance(instance: ITerminalInstance): void {\n\t\t// Buffer data events to reduce the amount of messages going to the extension host\n\t\tthis._register(this._bufferer.startBuffering(instance.instanceId, instance.onData));\n\t}\n}\n\nclass ExtensionTerminalLinkProvider implements ITerminalExternalLinkProvider {\n\tconstructor(\n\t\tprivate readonly _proxy: ExtHostTerminalServiceShape\n\t) {\n\t}\n\n\tasync provideLinks(instance: ITerminalInstance, line: string): Promise<ITerminalLink[] | undefined> {\n\t\tconst proxy = this._proxy;\n\t\tconst extHostLinks = await proxy.$provideLinks(instance.instanceId, line);\n\t\treturn extHostLinks.map(dto => ({\n\t\t\tid: dto.id,\n\t\t\tstartIndex: dto.startIndex,\n\t\t\tlength: dto.length,\n\t\t\tlabel: dto.label,\n\t\t\tactivate: () => proxy.$activateLink(instance.instanceId, dto.id)\n\t\t}));\n\t}\n}\n\nexport function getOutputMatchForLines(lines: string[], outputMatcher: ITerminalOutputMatcher): ITerminalOutputMatch | undefined {\n\tconst match: RegExpMatchArray | null | undefined = lines.join('\\n').match(outputMatcher.lineMatcher);\n\treturn match ? { regexMatch: match, outputLines: lines } : undefined;\n}\n\nfunction parseQuickFix(id: string, source: string, fix: TerminalQuickFix): ITerminalQuickFix {\n\tlet type = TerminalQuickFixType.TerminalCommand;\n\tif ('uri' in fix) {\n\t\tfix.uri = URI.revive(fix.uri);\n\t\ttype = TerminalQuickFixType.Opener;\n\t} else if ('id' in fix) {\n\t\ttype = TerminalQuickFixType.VscodeCommand;\n\t}\n\treturn { id, type, source, ...fix };\n}\n"]}