{"version":3,"sources":["vs/workbench/api/browser/mainThreadNotebookSaveParticipant.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAehG,MAAM,sCAAsC;QAI3C,YAAY,cAA+B;YAC1C,IAAI,CAAC,CAAC,GAAQ,cAAc,CAAC,QAAQ,CAAC,sBAAG,CAAY,sCAAsC,CAAC,CAAC;QAC9F,CAAC;QAED,KAAK,CAAC,WAAW,CAAC,WAAgE,EAAE,GAA2B,EAAE,SAAmC,EAAE,KAAwB;YAE7K,IAAI,CAAC,WAAW,CAAC,KAAK,IAAI,CAAC,CAAC,WAAW,CAAC,KAAK,YAAY,0BAAI,CAAyB,EAAE;gBACvF,OAAO,SAAS,CAAC;aACjB;YAED,IAAI,eAAoB,CAAC;YAEzB,MAAM,CAAC,GAAG,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAE9C,eAAe,GAAG,UAAU,CAC3B,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,IAAA,cAAQ,EAAC,CAAoB,EAAE,IAAuD,CAAC,CAAC,CAAC,EAChH,IAAI,CACJ,CAAC;gBACF,IAAI,CAAC,CAAC,CAAM,kBAAkB,CAAC,WAAW,CAAC,QAAQ,EAAE,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;oBAChF,YAAY,CAAC,eAAe,CAAC,CAAC;oBAC9B,OAAO,SAAS,CAAC;gBAClB,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC;YAEH,OAAO,IAAA,WAAG,EAAmB,CAAC,EAAE,KAAK,CAAC,CAAC;QACxC,CAAC;KACD;IAGM,IAAM,IAAI,GAAV,MAAM,IAAI;QAIhB,YACC,cAA+B,EACR,oBAAyB,EACN,CAA2B;YAA3B,MAAC,GAAD,CAAC,CAA0B;YAErE,IAAI,CAAC,CAAC,GAA4B,IAAI,CAAC,CAAC,CAAsB,kBAAkB,CAAC,oBAAoB,CAAC,cAAc,CAAC,sCAAsC,EAAE,cAAc,CAAC,CAAC,CAAC;QAC/K,CAAC;QAED,OAAO;YACN,IAAI,CAAC,CAAC,CAA0B,OAAO,EAAE,CAAC;QAC3C,CAAC;KACD,CAAA;IAfY,oBAAI;mBAAJ,IAAI;QADhB,uBAAI;QAOF,WAAA,mBAAG,CAAA;QACH,WAAA,4BAAG,CAAA;OAPO,IAAI,CAehB","file":"mainThreadNotebookSaveParticipant.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { localize } from 'vs/nls';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IProgressStep, IProgress } from 'vs/platform/progress/common/progress';\nimport { extHostCustomer, IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport { SaveReason } from 'vs/workbench/common/editor';\nimport { ExtHostContext, ExtHostNotebookDocumentSaveParticipantShape } from '../common/extHost.protocol';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { raceCancellationError } from 'vs/base/common/async';\nimport { IStoredFileWorkingCopySaveParticipant, IWorkingCopyFileService } from 'vs/workbench/services/workingCopy/common/workingCopyFileService';\nimport { IStoredFileWorkingCopy, IStoredFileWorkingCopyModel } from 'vs/workbench/services/workingCopy/common/storedFileWorkingCopy';\nimport { NotebookFileWorkingCopyModel } from 'vs/workbench/contrib/notebook/common/notebookEditorModel';\n\nclass ExtHostNotebookDocumentSaveParticipant implements IStoredFileWorkingCopySaveParticipant {\n\n\tprivate readonly _proxy: ExtHostNotebookDocumentSaveParticipantShape;\n\n\tconstructor(extHostContext: IExtHostContext) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostNotebookDocumentSaveParticipant);\n\t}\n\n\tasync participate(workingCopy: IStoredFileWorkingCopy<IStoredFileWorkingCopyModel>, env: { reason: SaveReason }, _progress: IProgress<IProgressStep>, token: CancellationToken): Promise<void> {\n\n\t\tif (!workingCopy.model || !(workingCopy.model instanceof NotebookFileWorkingCopyModel)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet _warningTimeout: any;\n\n\t\tconst p = new Promise<any>((resolve, reject) => {\n\n\t\t\t_warningTimeout = setTimeout(\n\t\t\t\t() => reject(new Error(localize('timeout.onWillSave', \"Aborted onWillSaveNotebookDocument-event after 1750ms\"))),\n\t\t\t\t1750\n\t\t\t);\n\t\t\tthis._proxy.$participateInSave(workingCopy.resource, env.reason, token).then(_ => {\n\t\t\t\tclearTimeout(_warningTimeout);\n\t\t\t\treturn undefined;\n\t\t\t}).then(resolve, reject);\n\t\t});\n\n\t\treturn raceCancellationError(p, token);\n\t}\n}\n\n@extHostCustomer\nexport class SaveParticipant {\n\n\tprivate _saveParticipantDisposable: IDisposable;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@IWorkingCopyFileService private readonly workingCopyFileService: IWorkingCopyFileService\n\t) {\n\t\tthis._saveParticipantDisposable = this.workingCopyFileService.addSaveParticipant(instantiationService.createInstance(ExtHostNotebookDocumentSaveParticipant, extHostContext));\n\t}\n\n\tdispose(): void {\n\t\tthis._saveParticipantDisposable.dispose();\n\t}\n}\n"]}