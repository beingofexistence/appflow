{"version":3,"sources":["vs/workbench/api/browser/mainThreadMessageService.ts"],"names":[],"mappings":"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","file":"mainThreadMessageService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\nimport Severity from 'vs/base/common/severity';\nimport { IAction, toAction } from 'vs/base/common/actions';\nimport { MainThreadMessageServiceShape, MainContext, MainThreadMessageOptions } from '../common/extHost.protocol';\nimport { extHostNamedCustomer, IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport { IDialogService, IPromptButton } from 'vs/platform/dialogs/common/dialogs';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { Event } from 'vs/base/common/event';\nimport { ICommandService } from 'vs/platform/commands/common/commands';\n\n@extHostNamedCustomer(MainContext.MainThreadMessageService)\nexport class MainThreadMessageService implements MainThreadMessageServiceShape {\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@INotificationService private readonly _notificationService: INotificationService,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IDialogService private readonly _dialogService: IDialogService\n\t) {\n\t\t//\n\t}\n\n\tdispose(): void {\n\t\t//\n\t}\n\n\t$showMessage(severity: Severity, message: string, options: MainThreadMessageOptions, commands: { title: string; isCloseAffordance: boolean; handle: number }[]): Promise<number | undefined> {\n\t\tif (options.modal) {\n\t\t\treturn this._showModalMessage(severity, message, options.detail, commands, options.useCustom);\n\t\t} else {\n\t\t\treturn this._showMessage(severity, message, commands, options);\n\t\t}\n\t}\n\n\tprivate _showMessage(severity: Severity, message: string, commands: { title: string; isCloseAffordance: boolean; handle: number }[], options: MainThreadMessageOptions): Promise<number | undefined> {\n\n\t\treturn new Promise<number | undefined>(resolve => {\n\n\t\t\tconst primaryActions: IAction[] = commands.map(command => toAction({\n\t\t\t\tid: `_extension_message_handle_${command.handle}`,\n\t\t\t\tlabel: command.title,\n\t\t\t\tenabled: true,\n\t\t\t\trun: () => {\n\t\t\t\t\tresolve(command.handle);\n\t\t\t\t\treturn Promise.resolve();\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tlet source: string | { label: string; id: string } | undefined;\n\t\t\tif (options.source) {\n\t\t\t\tsource = {\n\t\t\t\t\tlabel: nls.localize('extensionSource', \"{0} (Extension)\", options.source.label),\n\t\t\t\t\tid: options.source.identifier.value\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tif (!source) {\n\t\t\t\tsource = nls.localize('defaultSource', \"Extension\");\n\t\t\t}\n\n\t\t\tconst secondaryActions: IAction[] = [];\n\t\t\tif (options.source) {\n\t\t\t\tsecondaryActions.push(toAction({\n\t\t\t\t\tid: options.source.identifier.value,\n\t\t\t\t\tlabel: nls.localize('manageExtension', \"Manage Extension\"),\n\t\t\t\t\trun: () => {\n\t\t\t\t\t\treturn this._commandService.executeCommand('_extensions.manage', options.source!.identifier.value);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\n\t\t\tconst messageHandle = this._notificationService.notify({\n\t\t\t\tseverity,\n\t\t\t\tmessage,\n\t\t\t\tactions: { primary: primaryActions, secondary: secondaryActions },\n\t\t\t\tsource\n\t\t\t});\n\n\t\t\t// if promise has not been resolved yet, now is the time to ensure a return value\n\t\t\t// otherwise if already resolved it means the user clicked one of the buttons\n\t\t\tEvent.once(messageHandle.onDidClose)(() => {\n\t\t\t\tresolve(undefined);\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate async _showModalMessage(severity: Severity, message: string, detail: string | undefined, commands: { title: string; isCloseAffordance: boolean; handle: number }[], useCustom?: boolean): Promise<number | undefined> {\n\t\tconst buttons: IPromptButton<number>[] = [];\n\t\tlet cancelButton: IPromptButton<number | undefined> | undefined = undefined;\n\n\t\tfor (const command of commands) {\n\t\t\tconst button: IPromptButton<number> = {\n\t\t\t\tlabel: command.title,\n\t\t\t\trun: () => command.handle\n\t\t\t};\n\n\t\t\tif (command.isCloseAffordance) {\n\t\t\t\tcancelButton = button;\n\t\t\t} else {\n\t\t\t\tbuttons.push(button);\n\t\t\t}\n\t\t}\n\n\t\tif (!cancelButton) {\n\t\t\tif (buttons.length > 0) {\n\t\t\t\tcancelButton = {\n\t\t\t\t\tlabel: nls.localize('cancel', \"Cancel\"),\n\t\t\t\t\trun: () => undefined\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tcancelButton = {\n\t\t\t\t\tlabel: nls.localize({ key: 'ok', comment: ['&& denotes a mnemonic'] }, \"&&OK\"),\n\t\t\t\t\trun: () => undefined\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tconst { result } = await this._dialogService.prompt({\n\t\t\ttype: severity,\n\t\t\tmessage,\n\t\t\tdetail,\n\t\t\tbuttons,\n\t\t\tcancelButton,\n\t\t\tcustom: useCustom\n\t\t});\n\n\t\treturn result;\n\t}\n}\n"]}