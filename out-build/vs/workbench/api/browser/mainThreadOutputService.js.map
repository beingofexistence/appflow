{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadOutputService.ts"],"names":[],"mappings":"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","file":"mainThreadOutputService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { Extensions, IOutputChannelRegistry, IOutputService, IOutputChannel, OUTPUT_VIEW_ID, OutputChannelUpdateMode } from 'vs/workbench/services/output/common/output';\nimport { MainThreadOutputServiceShape, MainContext, ExtHostOutputServiceShape, ExtHostContext } from '../common/extHost.protocol';\nimport { extHostNamedCustomer, IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport { UriComponents, URI } from 'vs/base/common/uri';\nimport { Disposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { Event } from 'vs/base/common/event';\nimport { IViewsService } from 'vs/workbench/common/views';\nimport { isNumber } from 'vs/base/common/types';\n\n@extHostNamedCustomer(MainContext.MainThreadOutputService)\nexport class MainThreadOutputService extends Disposable implements MainThreadOutputServiceShape {\n\n\tprivate static _extensionIdPool = new Map<string, number>();\n\n\tprivate readonly _proxy: ExtHostOutputServiceShape;\n\tprivate readonly _outputService: IOutputService;\n\tprivate readonly _viewsService: IViewsService;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IOutputService outputService: IOutputService,\n\t\t@IViewsService viewsService: IViewsService,\n\t) {\n\t\tsuper();\n\t\tthis._outputService = outputService;\n\t\tthis._viewsService = viewsService;\n\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostOutputService);\n\n\t\tconst setVisibleChannel = () => {\n\t\t\tconst visibleChannel = this._viewsService.isViewVisible(OUTPUT_VIEW_ID) ? this._outputService.getActiveChannel() : undefined;\n\t\t\tthis._proxy.$setVisibleChannel(visibleChannel ? visibleChannel.id : null);\n\t\t};\n\t\tthis._register(Event.any<any>(this._outputService.onActiveOutputChannel, Event.filter(this._viewsService.onDidChangeViewVisibility, ({ id }) => id === OUTPUT_VIEW_ID))(() => setVisibleChannel()));\n\t\tsetVisibleChannel();\n\t}\n\n\tpublic async $register(label: string, file: UriComponents, languageId: string | undefined, extensionId: string): Promise<string> {\n\t\tconst idCounter = (MainThreadOutputService._extensionIdPool.get(extensionId) || 0) + 1;\n\t\tMainThreadOutputService._extensionIdPool.set(extensionId, idCounter);\n\t\tconst id = `extension-output-${extensionId}-#${idCounter}-${label}`;\n\t\tconst resource = URI.revive(file);\n\n\t\tRegistry.as<IOutputChannelRegistry>(Extensions.OutputChannels).registerChannel({ id, label, file: resource, log: false, languageId, extensionId });\n\t\tthis._register(toDisposable(() => this.$dispose(id)));\n\t\treturn id;\n\t}\n\n\tpublic async $update(channelId: string, mode: OutputChannelUpdateMode, till?: number): Promise<void> {\n\t\tconst channel = this._getChannel(channelId);\n\t\tif (channel) {\n\t\t\tif (mode === OutputChannelUpdateMode.Append) {\n\t\t\t\tchannel.update(mode);\n\t\t\t} else if (isNumber(till)) {\n\t\t\t\tchannel.update(mode, till);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async $reveal(channelId: string, preserveFocus: boolean): Promise<void> {\n\t\tconst channel = this._getChannel(channelId);\n\t\tif (channel) {\n\t\t\tthis._outputService.showChannel(channel.id, preserveFocus);\n\t\t}\n\t}\n\n\tpublic async $close(channelId: string): Promise<void> {\n\t\tif (this._viewsService.isViewVisible(OUTPUT_VIEW_ID)) {\n\t\t\tconst activeChannel = this._outputService.getActiveChannel();\n\t\t\tif (activeChannel && channelId === activeChannel.id) {\n\t\t\t\tthis._viewsService.closeView(OUTPUT_VIEW_ID);\n\t\t\t}\n\t\t}\n\t}\n\n\tpublic async $dispose(channelId: string): Promise<void> {\n\t\tconst channel = this._getChannel(channelId);\n\t\tchannel?.dispose();\n\t}\n\n\tprivate _getChannel(channelId: string): IOutputChannel | undefined {\n\t\treturn this._outputService.getChannel(channelId);\n\t}\n}\n"]}