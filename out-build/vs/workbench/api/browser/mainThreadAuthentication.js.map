{"version":3,"sources":["vs/workbench/api/browser/mainThreadAuthentication.ts"],"names":[],"mappings":"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","file":"mainThreadAuthentication.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport * as nls from 'vs/nls';\nimport { extHostNamedCustomer, IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport { AllowedExtension, readAllowedExtensions, getAuthenticationProviderActivationEvent, addAccountUsage, readAccountUsages, removeAccountUsage } from 'vs/workbench/services/authentication/browser/authenticationService';\nimport { IAuthenticationCreateSessionOptions, AuthenticationSession, AuthenticationSessionsChangeEvent, IAuthenticationProvider, IAuthenticationService } from 'vs/workbench/services/authentication/common/authentication';\nimport { ExtHostAuthenticationShape, ExtHostContext, MainContext, MainThreadAuthenticationShape } from '../common/extHost.protocol';\nimport { IDialogService } from 'vs/platform/dialogs/common/dialogs';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport Severity from 'vs/base/common/severity';\nimport { IQuickInputService } from 'vs/platform/quickinput/common/quickInput';\nimport { INotificationService } from 'vs/platform/notification/common/notification';\nimport { fromNow } from 'vs/base/common/date';\nimport { ActivationKind, IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport type { AuthenticationGetSessionOptions } from 'vscode';\n\ninterface TrustedExtensionsQuickPickItem {\n\tlabel: string;\n\tdescription: string;\n\textension: AllowedExtension;\n}\n\nexport class MainThreadAuthenticationProvider extends Disposable implements IAuthenticationProvider {\n\tconstructor(\n\t\tprivate readonly _proxy: ExtHostAuthenticationShape,\n\t\tpublic readonly id: string,\n\t\tpublic readonly label: string,\n\t\tpublic readonly supportsMultipleAccounts: boolean,\n\t\tprivate readonly notificationService: INotificationService,\n\t\tprivate readonly storageService: IStorageService,\n\t\tprivate readonly quickInputService: IQuickInputService,\n\t\tprivate readonly dialogService: IDialogService\n\t) {\n\t\tsuper();\n\t}\n\tpublic manageTrustedExtensions(accountName: string) {\n\t\tconst allowedExtensions = readAllowedExtensions(this.storageService, this.id, accountName);\n\n\t\tif (!allowedExtensions.length) {\n\t\t\tthis.dialogService.info(nls.localize('noTrustedExtensions', \"This account has not been used by any extensions.\"));\n\t\t\treturn;\n\t\t}\n\n\t\tconst quickPick = this.quickInputService.createQuickPick<TrustedExtensionsQuickPickItem>();\n\t\tquickPick.canSelectMany = true;\n\t\tquickPick.customButton = true;\n\t\tquickPick.customLabel = nls.localize('manageTrustedExtensions.cancel', 'Cancel');\n\t\tconst usages = readAccountUsages(this.storageService, this.id, accountName);\n\t\tconst items = allowedExtensions.map(extension => {\n\t\t\tconst usage = usages.find(usage => extension.id === usage.extensionId);\n\t\t\treturn {\n\t\t\t\tlabel: extension.name,\n\t\t\t\tdescription: usage\n\t\t\t\t\t? nls.localize({ key: 'accountLastUsedDate', comment: ['The placeholder {0} is a string with time information, such as \"3 days ago\"'] }, \"Last used this account {0}\", fromNow(usage.lastUsed, true))\n\t\t\t\t\t: nls.localize('notUsed', \"Has not used this account\"),\n\t\t\t\textension\n\t\t\t};\n\t\t});\n\n\t\tquickPick.items = items;\n\t\tquickPick.selectedItems = items.filter(item => item.extension.allowed === undefined || item.extension.allowed);\n\t\tquickPick.title = nls.localize('manageTrustedExtensions', \"Manage Trusted Extensions\");\n\t\tquickPick.placeholder = nls.localize('manageExtensions', \"Choose which extensions can access this account\");\n\n\t\tquickPick.onDidAccept(() => {\n\t\t\tconst updatedAllowedList = quickPick.items\n\t\t\t\t.map(i => (i as TrustedExtensionsQuickPickItem).extension);\n\t\t\tthis.storageService.store(`${this.id}-${accountName}`, JSON.stringify(updatedAllowedList), StorageScope.APPLICATION, StorageTarget.USER);\n\n\t\t\tquickPick.dispose();\n\t\t});\n\n\t\tquickPick.onDidChangeSelection((changed) => {\n\t\t\tquickPick.items.forEach(item => {\n\t\t\t\tif ((item as TrustedExtensionsQuickPickItem).extension) {\n\t\t\t\t\t(item as TrustedExtensionsQuickPickItem).extension.allowed = false;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tchanged.forEach((item) => item.extension.allowed = true);\n\t\t});\n\n\t\tquickPick.onDidHide(() => {\n\t\t\tquickPick.dispose();\n\t\t});\n\n\t\tquickPick.onDidCustom(() => {\n\t\t\tquickPick.hide();\n\t\t});\n\n\t\tquickPick.show();\n\t}\n\n\tasync removeAccountSessions(accountName: string, sessions: AuthenticationSession[]): Promise<void> {\n\t\tconst accountUsages = readAccountUsages(this.storageService, this.id, accountName);\n\n\t\tconst { confirmed } = await this.dialogService.confirm({\n\t\t\ttype: Severity.Info,\n\t\t\tmessage: accountUsages.length\n\t\t\t\t? nls.localize('signOutMessage', \"The account '{0}' has been used by: \\n\\n{1}\\n\\n Sign out from these extensions?\", accountName, accountUsages.map(usage => usage.extensionName).join('\\n'))\n\t\t\t\t: nls.localize('signOutMessageSimple', \"Sign out of '{0}'?\", accountName),\n\t\t\tprimaryButton: nls.localize({ key: 'signOut', comment: ['&& denotes a mnemonic'] }, \"&&Sign Out\")\n\t\t});\n\n\t\tif (confirmed) {\n\t\t\tconst removeSessionPromises = sessions.map(session => this.removeSession(session.id));\n\t\t\tawait Promise.all(removeSessionPromises);\n\t\t\tremoveAccountUsage(this.storageService, this.id, accountName);\n\t\t\tthis.storageService.remove(`${this.id}-${accountName}`, StorageScope.APPLICATION);\n\t\t}\n\t}\n\n\tasync getSessions(scopes?: string[]) {\n\t\treturn this._proxy.$getSessions(this.id, scopes);\n\t}\n\n\tcreateSession(scopes: string[], options: IAuthenticationCreateSessionOptions): Promise<AuthenticationSession> {\n\t\treturn this._proxy.$createSession(this.id, scopes, options);\n\t}\n\n\tasync removeSession(sessionId: string): Promise<void> {\n\t\tawait this._proxy.$removeSession(this.id, sessionId);\n\t\tthis.notificationService.info(nls.localize('signedOut', \"Successfully signed out.\"));\n\t}\n}\n\n@extHostNamedCustomer(MainContext.MainThreadAuthentication)\nexport class MainThreadAuthentication extends Disposable implements MainThreadAuthenticationShape {\n\tprivate readonly _proxy: ExtHostAuthenticationShape;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IAuthenticationService private readonly authenticationService: IAuthenticationService,\n\t\t@IDialogService private readonly dialogService: IDialogService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@INotificationService private readonly notificationService: INotificationService,\n\t\t@IQuickInputService private readonly quickInputService: IQuickInputService,\n\t\t@IExtensionService private readonly extensionService: IExtensionService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostAuthentication);\n\n\t\tthis._register(this.authenticationService.onDidChangeSessions(e => {\n\t\t\tthis._proxy.$onDidChangeAuthenticationSessions(e.providerId, e.label);\n\t\t}));\n\n\t\tthis._proxy.$setProviders(this.authenticationService.declaredProviders);\n\n\t\tthis._register(this.authenticationService.onDidChangeDeclaredProviders(e => {\n\t\t\tthis._proxy.$setProviders(e);\n\t\t}));\n\t}\n\n\tasync $registerAuthenticationProvider(id: string, label: string, supportsMultipleAccounts: boolean): Promise<void> {\n\t\tconst provider = new MainThreadAuthenticationProvider(this._proxy, id, label, supportsMultipleAccounts, this.notificationService, this.storageService, this.quickInputService, this.dialogService);\n\t\tthis.authenticationService.registerAuthenticationProvider(id, provider);\n\t}\n\n\t$unregisterAuthenticationProvider(id: string): void {\n\t\tthis.authenticationService.unregisterAuthenticationProvider(id);\n\t}\n\n\t$ensureProvider(id: string): Promise<void> {\n\t\treturn this.extensionService.activateByEvent(getAuthenticationProviderActivationEvent(id), ActivationKind.Immediate);\n\t}\n\n\t$sendDidChangeSessions(id: string, event: AuthenticationSessionsChangeEvent): void {\n\t\tthis.authenticationService.sessionsUpdate(id, event);\n\t}\n\n\t$removeSession(providerId: string, sessionId: string): Promise<void> {\n\t\treturn this.authenticationService.removeSession(providerId, sessionId);\n\t}\n\tprivate async loginPrompt(providerName: string, extensionName: string, recreatingSession: boolean, detail?: string): Promise<boolean> {\n\t\tconst message = recreatingSession\n\t\t\t? nls.localize('confirmRelogin', \"The extension '{0}' wants you to sign in again using {1}.\", extensionName, providerName)\n\t\t\t: nls.localize('confirmLogin', \"The extension '{0}' wants to sign in using {1}.\", extensionName, providerName);\n\t\tconst { confirmed } = await this.dialogService.confirm({\n\t\t\ttype: Severity.Info,\n\t\t\tmessage,\n\t\t\tdetail,\n\t\t\tprimaryButton: nls.localize({ key: 'allow', comment: ['&& denotes a mnemonic'] }, \"&&Allow\")\n\t\t});\n\n\t\treturn confirmed;\n\t}\n\n\tprivate async doGetSession(providerId: string, scopes: string[], extensionId: string, extensionName: string, options: AuthenticationGetSessionOptions): Promise<AuthenticationSession | undefined> {\n\t\tconst sessions = await this.authenticationService.getSessions(providerId, scopes, true);\n\t\tconst supportsMultipleAccounts = this.authenticationService.supportsMultipleAccounts(providerId);\n\n\t\t// Error cases\n\t\tif (options.forceNewSession && options.createIfNone) {\n\t\t\tthrow new Error('Invalid combination of options. Please remove one of the following: forceNewSession, createIfNone');\n\t\t}\n\t\tif (options.forceNewSession && options.silent) {\n\t\t\tthrow new Error('Invalid combination of options. Please remove one of the following: forceNewSession, silent');\n\t\t}\n\t\tif (options.createIfNone && options.silent) {\n\t\t\tthrow new Error('Invalid combination of options. Please remove one of the following: createIfNone, silent');\n\t\t}\n\n\t\t// Check if the sessions we have are valid\n\t\tif (!options.forceNewSession && sessions.length) {\n\t\t\tif (supportsMultipleAccounts) {\n\t\t\t\tif (options.clearSessionPreference) {\n\t\t\t\t\t// Clearing the session preference is usually paired with createIfNone, so just remove the preference and\n\t\t\t\t\t// defer to the rest of the logic in this function to choose the session.\n\t\t\t\t\tthis.authenticationService.removeSessionPreference(providerId, extensionId, scopes);\n\t\t\t\t} else {\n\t\t\t\t\t// If we have an existing session preference, use that. If not, we'll return any valid session at the end of this function.\n\t\t\t\t\tconst existingSessionPreference = this.authenticationService.getSessionPreference(providerId, extensionId, scopes);\n\t\t\t\t\tif (existingSessionPreference) {\n\t\t\t\t\t\tconst matchingSession = sessions.find(session => session.id === existingSessionPreference);\n\t\t\t\t\t\tif (matchingSession && this.authenticationService.isAccessAllowed(providerId, matchingSession.account.label, extensionId)) {\n\t\t\t\t\t\t\treturn matchingSession;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (this.authenticationService.isAccessAllowed(providerId, sessions[0].account.label, extensionId)) {\n\t\t\t\treturn sessions[0];\n\t\t\t}\n\t\t}\n\n\t\t// We may need to prompt because we don't have a valid session\n\t\t// modal flows\n\t\tif (options.createIfNone || options.forceNewSession) {\n\t\t\tconst providerName = this.authenticationService.getLabel(providerId);\n\t\t\tconst detail = (typeof options.forceNewSession === 'object') ? options.forceNewSession!.detail : undefined;\n\n\t\t\t// We only want to show the \"recreating session\" prompt if we are using forceNewSession & there are sessions\n\t\t\t// that we will be \"forcing through\".\n\t\t\tconst recreatingSession = !!(options.forceNewSession && sessions.length);\n\t\t\tconst isAllowed = await this.loginPrompt(providerName, extensionName, recreatingSession, detail);\n\t\t\tif (!isAllowed) {\n\t\t\t\tthrow new Error('User did not consent to login.');\n\t\t\t}\n\n\t\t\tlet session;\n\t\t\tif (sessions?.length && !options.forceNewSession && supportsMultipleAccounts) {\n\t\t\t\tsession = await this.authenticationService.selectSession(providerId, extensionId, extensionName, scopes, sessions);\n\t\t\t} else {\n\t\t\t\tlet sessionToRecreate: AuthenticationSession | undefined;\n\t\t\t\tif (typeof options.forceNewSession === 'object' && options.forceNewSession.sessionToRecreate) {\n\t\t\t\t\tsessionToRecreate = options.forceNewSession.sessionToRecreate as AuthenticationSession;\n\t\t\t\t} else {\n\t\t\t\t\tconst sessionIdToRecreate = this.authenticationService.getSessionPreference(providerId, extensionId, scopes);\n\t\t\t\t\tsessionToRecreate = sessionIdToRecreate ? sessions.find(session => session.id === sessionIdToRecreate) : undefined;\n\t\t\t\t}\n\t\t\t\tsession = await this.authenticationService.createSession(providerId, scopes, { activateImmediate: true, sessionToRecreate });\n\t\t\t}\n\n\t\t\tthis.authenticationService.updateAllowedExtension(providerId, session.account.label, extensionId, extensionName, true);\n\t\t\tthis.authenticationService.updateSessionPreference(providerId, extensionId, session);\n\t\t\treturn session;\n\t\t}\n\n\t\t// For the silent flows, if we have a session, even though it may not be the user's preference, we'll return it anyway because it might be for a specific\n\t\t// set of scopes.\n\t\tconst validSession = sessions.find(session => this.authenticationService.isAccessAllowed(providerId, session.account.label, extensionId));\n\t\tif (validSession) {\n\t\t\t// Migration. If we have a valid session, but no preference, we'll set the preference to the valid session.\n\t\t\t// TODO: Remove this after in a few releases.\n\t\t\tif (!this.authenticationService.getSessionPreference(providerId, extensionId, scopes)) {\n\t\t\t\tif (this.storageService.get(`${extensionName}-${providerId}`, StorageScope.APPLICATION)) {\n\t\t\t\t\tthis.storageService.remove(`${extensionName}-${providerId}`, StorageScope.APPLICATION);\n\t\t\t\t}\n\t\t\t\tthis.authenticationService.updateAllowedExtension(providerId, validSession.account.label, extensionId, extensionName, true);\n\t\t\t\tthis.authenticationService.updateSessionPreference(providerId, extensionId, validSession);\n\t\t\t}\n\t\t\treturn validSession;\n\t\t}\n\n\t\t// passive flows (silent or default)\n\t\tif (!options.silent) {\n\t\t\t// If there is a potential session, but the extension doesn't have access to it, use the \"grant access\" flow,\n\t\t\t// otherwise request a new one.\n\t\t\tsessions.length\n\t\t\t\t? this.authenticationService.requestSessionAccess(providerId, extensionId, extensionName, scopes, sessions)\n\t\t\t\t: await this.authenticationService.requestNewSession(providerId, scopes, extensionId, extensionName);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tasync $getSession(providerId: string, scopes: string[], extensionId: string, extensionName: string, options: AuthenticationGetSessionOptions): Promise<AuthenticationSession | undefined> {\n\t\tconst session = await this.doGetSession(providerId, scopes, extensionId, extensionName, options);\n\n\t\tif (session) {\n\t\t\tthis.sendProviderUsageTelemetry(extensionId, providerId);\n\t\t\taddAccountUsage(this.storageService, providerId, session.account.label, extensionId, extensionName);\n\t\t}\n\n\t\treturn session;\n\t}\n\n\tasync $getSessions(providerId: string, scopes: readonly string[], extensionId: string, extensionName: string): Promise<AuthenticationSession[]> {\n\t\tconst sessions = await this.authenticationService.getSessions(providerId, [...scopes], true);\n\t\tconst accessibleSessions = sessions.filter(s => this.authenticationService.isAccessAllowed(providerId, s.account.label, extensionId));\n\t\tif (accessibleSessions.length) {\n\t\t\tthis.sendProviderUsageTelemetry(extensionId, providerId);\n\t\t\tfor (const session of accessibleSessions) {\n\t\t\t\taddAccountUsage(this.storageService, providerId, session.account.label, extensionId, extensionName);\n\t\t\t}\n\t\t}\n\t\treturn accessibleSessions;\n\t}\n\n\tprivate sendProviderUsageTelemetry(extensionId: string, providerId: string): void {\n\t\ttype AuthProviderUsageClassification = {\n\t\t\towner: 'TylerLeonhardt';\n\t\t\tcomment: 'Used to see which extensions are using which providers';\n\t\t\textensionId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The extension id.' };\n\t\t\tproviderId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The provider id.' };\n\t\t};\n\t\tthis.telemetryService.publicLog2<{ extensionId: string; providerId: string }, AuthProviderUsageClassification>('authentication.providerUsage', { providerId, extensionId });\n\t}\n}\n"]}