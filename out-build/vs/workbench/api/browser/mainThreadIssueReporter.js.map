{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadIssueReporter.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUzF,IAAM,IAAI,GAAV,MAAM,IAAwB,SAAQ,eAAG;QAI/C,YACC,OAAwB,EACA,CAAoC;YAE5D,KAAK,EAAE,CAAC;YAFiC,MAAC,GAAD,CAAC,CAAkB;YAJ5C,MAAC,GAAgB,IAAI,CAAC,CAAC,CAAS,IAAI,eAAG,EAAoB,CAAC,CAAC;YAO7E,IAAI,CAAC,CAAC,GAAQ,OAAO,CAAC,QAAQ,CAAC,sBAAG,CAAY,oBAAoB,CAAC,CAAC;QACrE,CAAC;QAED,+BAA+B,CAAC,WAAmB;YAClD,MAAM,OAAO,GAA4B;gBACxC,eAAe,EAAE,KAAK,EAAE,KAAwB,EAAE,EAAE;oBACnD,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,CAAC,CAAM,oBAAoB,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;oBACzE,OAAO,SAAG,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBACxB,CAAC;aACD,CAAC;YACF,IAAI,CAAC,CAAC,CAAc,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,CAAa,8BAA8B,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC,CAAC;QAC/G,CAAC;QAED,iCAAiC,CAAC,WAAmB;YACpD,IAAI,CAAC,CAAC,CAAc,gBAAgB,CAAC,WAAW,CAAC,CAAC;QACnD,CAAC;KACD,CAAA;IAzBY,oBAAI;mBAAJ,IAAI;QADhB,IAAA,uBAAI,EAAiB,sBAAG,CAAS,uBAAuB,CAAC;QAOvD,WAAA,YAAI,CAAA;OANM,IAAI,CAyBhB","file":"mainThreadIssueReporter.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Disposable, DisposableMap } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { ExtHostContext, ExtHostIssueReporterShape, MainContext, MainThreadIssueReporterShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { IExtHostContext, extHostNamedCustomer } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport { IIssueUriRequestHandler, IWorkbenchIssueService } from 'vs/workbench/services/issue/common/issue';\n\n@extHostNamedCustomer(MainContext.MainThreadIssueReporter)\nexport class MainThreadIssueReporter extends Disposable implements MainThreadIssueReporterShape {\n\tprivate readonly _proxy: ExtHostIssueReporterShape;\n\tprivate readonly _registrations = this._register(new DisposableMap<string>());\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\t@IWorkbenchIssueService private readonly _issueService: IWorkbenchIssueService\n\t) {\n\t\tsuper();\n\t\tthis._proxy = context.getProxy(ExtHostContext.ExtHostIssueReporter);\n\t}\n\n\t$registerIssueUriRequestHandler(extensionId: string): void {\n\t\tconst handler: IIssueUriRequestHandler = {\n\t\t\tprovideIssueUrl: async (token: CancellationToken) => {\n\t\t\t\tconst parts = await this._proxy.$getIssueReporterUri(extensionId, token);\n\t\t\t\treturn URI.from(parts);\n\t\t\t}\n\t\t};\n\t\tthis._registrations.set(extensionId, this._issueService.registerIssueUriRequestHandler(extensionId, handler));\n\t}\n\n\t$unregisterIssueUriRequestHandler(extensionId: string): void {\n\t\tthis._registrations.deleteAndDispose(extensionId);\n\t}\n}\n"]}