{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadTelemetry.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;;IAazF,IAAM,IAAI,GAAV,MAAM,IAAoB,SAAQ,eAAG;;iBAGnB,MAAC,GAAO,qBAAP,AAA4B,CAAC;QAEtD,YACC,cAA+B,EACK,CAAsB,EAClB,CAA0B,EAC5B,CAAwB,EAC5B,CAAoB;YAEtD,KAAK,EAAE,CAAC;YAL4B,MAAC,GAAD,CAAC,CAAqB;YAClB,MAAC,GAAD,CAAC,CAAyB;YAC5B,MAAC,GAAD,CAAC,CAAuB;YAC5B,MAAC,GAAD,CAAC,CAAmB;YAItD,IAAI,CAAC,CAAC,GAAQ,cAAc,CAAC,QAAQ,CAAC,sBAAG,CAAY,gBAAgB,CAAC,CAAC;YAEvE,IAAI,IAAA,oBAAG,EAAe,IAAI,CAAC,CAAC,EAAgB,IAAI,CAAC,CAAC,CAAmB,EAAE;gBACtE,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAqB,wBAAwB,CAAC,CAAC,CAAC,EAAE;oBACtE,IAAI,CAAC,CAAC,oBAAoB,CAAC,eAAG,CAAkB,IAAI,CAAC,CAAC,oBAAoB,CAAC,eAAG,CAAsB,EAAE;wBACrG,IAAI,CAAC,CAAC,CAAM,0BAA0B,CAAC,IAAI,CAAC,CAAC,CAAc,CAAC;qBAC5D;gBACF,CAAC,CAAC,CAAC,CAAC;aACJ;YACD,IAAI,CAAC,CAAC,CAAM,yBAAyB,CAAC,IAAI,CAAC,CAAC,EAAe,IAAA,oBAAG,EAAe,IAAI,CAAC,CAAC,EAAgB,IAAI,CAAC,CAAC,CAAmB,EAAE,IAAI,CAAC,CAAC,CAAe,sBAAsB,CAAC,CAAC;QAC5K,CAAC;QAED,IAAY,CAAC;YACZ,IAAI,CAAC,IAAA,oBAAG,EAAe,IAAI,CAAC,CAAC,EAAgB,IAAI,CAAC,CAAC,CAAmB,EAAE;gBACvE,mCAA2B;aAC3B;YAED,OAAO,IAAI,CAAC,CAAC,CAAiB,cAAc,CAAC;QAC9C,CAAC;QAED,UAAU,CAAC,SAAiB,EAAE,OAAY,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;YAC5D,sIAAsI;YACtI,IAAI,CAAC,MAAI,CAAgB,CAAC,CAAK,GAAG,IAAI,CAAC;YACvC,IAAI,CAAC,CAAC,CAAiB,SAAS,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC;QACnD,CAAC;QAED,WAAW,CAAsF,SAAiB,EAAE,IAAgC;YACnJ,IAAI,CAAC,UAAU,CAAC,SAAS,EAAE,IAAW,CAAC,CAAC;QACzC,CAAC;;IA1CW,oBAAI;mBAAJ,IAAI;QADhB,IAAA,uBAAI,EAAiB,sBAAG,CAAS,mBAAmB,CAAC;QAQnD,WAAA,eAAG,CAAA;QACH,WAAA,mBAAG,CAAA;QACH,WAAA,iBAAG,CAAA;QACH,WAAA,oBAAG,CAAA;OAVO,IAAI,CA2ChB","file":"mainThreadTelemetry.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { ClassifiedEvent, IGDPRProperty, OmitMetadata, StrictPropertyCheck } from 'vs/platform/telemetry/common/gdprTypings';\nimport { ITelemetryService, TelemetryLevel, TELEMETRY_OLD_SETTING_ID, TELEMETRY_SETTING_ID } from 'vs/platform/telemetry/common/telemetry';\nimport { supportsTelemetry } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { extHostNamedCustomer, IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport { ExtHostContext, ExtHostTelemetryShape, MainContext, MainThreadTelemetryShape } from '../common/extHost.protocol';\n\n@extHostNamedCustomer(MainContext.MainThreadTelemetry)\nexport class MainThreadTelemetry extends Disposable implements MainThreadTelemetryShape {\n\tprivate readonly _proxy: ExtHostTelemetryShape;\n\n\tprivate static readonly _name = 'pluginHostTelemetry';\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ITelemetryService private readonly _telemetryService: ITelemetryService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IEnvironmentService private readonly _environmentService: IEnvironmentService,\n\t\t@IProductService private readonly _productService: IProductService,\n\t) {\n\t\tsuper();\n\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostTelemetry);\n\n\t\tif (supportsTelemetry(this._productService, this._environmentService)) {\n\t\t\tthis._register(this._configurationService.onDidChangeConfiguration(e => {\n\t\t\t\tif (e.affectsConfiguration(TELEMETRY_SETTING_ID) || e.affectsConfiguration(TELEMETRY_OLD_SETTING_ID)) {\n\t\t\t\t\tthis._proxy.$onDidChangeTelemetryLevel(this.telemetryLevel);\n\t\t\t\t}\n\t\t\t}));\n\t\t}\n\t\tthis._proxy.$initializeTelemetryLevel(this.telemetryLevel, supportsTelemetry(this._productService, this._environmentService), this._productService.enabledTelemetryLevels);\n\t}\n\n\tprivate get telemetryLevel(): TelemetryLevel {\n\t\tif (!supportsTelemetry(this._productService, this._environmentService)) {\n\t\t\treturn TelemetryLevel.NONE;\n\t\t}\n\n\t\treturn this._telemetryService.telemetryLevel;\n\t}\n\n\t$publicLog(eventName: string, data: any = Object.create(null)): void {\n\t\t// __GDPR__COMMON__ \"pluginHostTelemetry\" : { \"classification\": \"SystemMetaData\", \"purpose\": \"FeatureInsight\", \"isMeasurement\": true }\n\t\tdata[MainThreadTelemetry._name] = true;\n\t\tthis._telemetryService.publicLog(eventName, data);\n\t}\n\n\t$publicLog2<E extends ClassifiedEvent<OmitMetadata<T>> = never, T extends IGDPRProperty = never>(eventName: string, data?: StrictPropertyCheck<T, E>): void {\n\t\tthis.$publicLog(eventName, data as any);\n\t}\n}\n\n\n"]}