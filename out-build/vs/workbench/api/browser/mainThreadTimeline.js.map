{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadTimeline.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAYzF,IAAM,IAAI,GAAV,MAAM,IAAI;QAIhB,YACC,OAAwB,EACX,CAAgC,EAC3B,CAAsC;YAD1B,MAAC,GAAD,CAAC,CAAc;YACV,MAAC,GAAD,CAAC,CAAoB;YALxC,MAAC,GAAmB,IAAI,GAAG,EAAwC,CAAC;YAOpF,IAAI,CAAC,CAAC,GAAQ,OAAO,CAAC,QAAQ,CAAC,sBAAG,CAAY,eAAe,CAAC,CAAC;QAChE,CAAC;QAED,yBAAyB,CAAC,QAAoC;YAC7D,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,mDAAmD,QAAQ,CAAC,EAAE,EAAE,CAAC,CAAC;YAExF,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAM;YAE1B,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAiB;YACxC,IAAI,WAAW,GAAG,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YAC5C,IAAI,WAAW,KAAK,SAAS,EAAE;gBAC9B,WAAW,GAAG,IAAI,WAAG,EAA2B,CAAC;gBACjD,QAAQ,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC;aACvC;YAED,IAAI,CAAC,CAAC,CAAgB,wBAAwB,CAAC;gBAC9C,GAAG,QAAQ;gBACX,WAAW,EAAE,WAAW,CAAC,KAAK;gBAC9B,KAAK,CAAC,eAAe,CAAC,GAAQ,EAAE,OAAwB,EAAE,KAAwB;oBACjF,OAAO,IAAA,iBAAG,EAAc,MAAM,KAAK,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;gBACrF,CAAC;gBACD,OAAO;oBACN,QAAQ,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;oBAC7B,WAAW,EAAE,OAAO,EAAE,CAAC;gBACxB,CAAC;aACD,CAAC,CAAC;QACJ,CAAC;QAED,2BAA2B,CAAC,EAAU;YACrC,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,qDAAqD,EAAE,EAAE,CAAC,CAAC;YAEjF,IAAI,CAAC,CAAC,CAAgB,0BAA0B,CAAC,EAAE,CAAC,CAAC;QACtD,CAAC;QAED,wBAAwB,CAAC,CAAsB;YAC9C,IAAI,CAAC,CAAC,CAAU,KAAK,CAAC,0CAA0C,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC,GAAG,EAAE,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;YAEtG,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAiB,GAAG,CAAC,CAAC,CAAC,EAAG,CAAC,CAAC;YAClD,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;QAClB,CAAC;QAED,OAAO;YACN,OAAO;QACR,CAAC;KACD,CAAA;IArDY,oBAAI;mBAAJ,IAAI;QADhB,IAAA,uBAAI,EAAiB,sBAAG,CAAS,kBAAkB,CAAC;QAOlD,WAAA,SAAG,CAAA;QACH,WAAA,cAAG,CAAA;OAPO,IAAI,CAqDhB","file":"mainThreadTimeline.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { URI } from 'vs/base/common/uri';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { MainContext, MainThreadTimelineShape, ExtHostTimelineShape, ExtHostContext } from 'vs/workbench/api/common/extHost.protocol';\nimport { extHostNamedCustomer, IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport { TimelineChangeEvent, TimelineOptions, TimelineProviderDescriptor, ITimelineService, Timeline } from 'vs/workbench/contrib/timeline/common/timeline';\nimport { revive } from 'vs/base/common/marshalling';\n\n@extHostNamedCustomer(MainContext.MainThreadTimeline)\nexport class MainThreadTimeline implements MainThreadTimelineShape {\n\tprivate readonly _proxy: ExtHostTimelineShape;\n\tprivate readonly _providerEmitters = new Map<string, Emitter<TimelineChangeEvent>>();\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ITimelineService private readonly _timelineService: ITimelineService\n\t) {\n\t\tthis._proxy = context.getProxy(ExtHostContext.ExtHostTimeline);\n\t}\n\n\t$registerTimelineProvider(provider: TimelineProviderDescriptor): void {\n\t\tthis.logService.trace(`MainThreadTimeline#registerTimelineProvider: id=${provider.id}`);\n\n\t\tconst proxy = this._proxy;\n\n\t\tconst emitters = this._providerEmitters;\n\t\tlet onDidChange = emitters.get(provider.id);\n\t\tif (onDidChange === undefined) {\n\t\t\tonDidChange = new Emitter<TimelineChangeEvent>();\n\t\t\temitters.set(provider.id, onDidChange);\n\t\t}\n\n\t\tthis._timelineService.registerTimelineProvider({\n\t\t\t...provider,\n\t\t\tonDidChange: onDidChange.event,\n\t\t\tasync provideTimeline(uri: URI, options: TimelineOptions, token: CancellationToken) {\n\t\t\t\treturn revive<Timeline>(await proxy.$getTimeline(provider.id, uri, options, token));\n\t\t\t},\n\t\t\tdispose() {\n\t\t\t\temitters.delete(provider.id);\n\t\t\t\tonDidChange?.dispose();\n\t\t\t}\n\t\t});\n\t}\n\n\t$unregisterTimelineProvider(id: string): void {\n\t\tthis.logService.trace(`MainThreadTimeline#unregisterTimelineProvider: id=${id}`);\n\n\t\tthis._timelineService.unregisterTimelineProvider(id);\n\t}\n\n\t$emitTimelineChangeEvent(e: TimelineChangeEvent): void {\n\t\tthis.logService.trace(`MainThreadTimeline#emitChangeEvent: id=${e.id}, uri=${e.uri?.toString(true)}`);\n\n\t\tconst emitter = this._providerEmitters.get(e.id!);\n\t\temitter?.fire(e);\n\t}\n\n\tdispose(): void {\n\t\t// noop\n\t}\n}\n"]}