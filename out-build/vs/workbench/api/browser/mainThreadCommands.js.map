{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadCommands.ts"],"names":[],"mappings":"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","file":"mainThreadCommands.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableMap, IDisposable } from 'vs/base/common/lifecycle';\nimport { revive } from 'vs/base/common/marshalling';\nimport { CommandsRegistry, ICommandHandlerDescription, ICommandService } from 'vs/platform/commands/common/commands';\nimport { IExtHostContext, extHostNamedCustomer } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport { IExtensionService } from 'vs/workbench/services/extensions/common/extensions';\nimport { Dto, SerializableObjectWithBuffers } from 'vs/workbench/services/extensions/common/proxyIdentifier';\nimport { ExtHostCommandsShape, ExtHostContext, MainContext, MainThreadCommandsShape } from '../common/extHost.protocol';\n\n\n@extHostNamedCustomer(MainContext.MainThreadCommands)\nexport class MainThreadCommands implements MainThreadCommandsShape {\n\n\tprivate readonly _commandRegistrations = new DisposableMap<string>();\n\tprivate readonly _generateCommandsDocumentationRegistration: IDisposable;\n\tprivate readonly _proxy: ExtHostCommandsShape;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ICommandService private readonly _commandService: ICommandService,\n\t\t@IExtensionService private readonly _extensionService: IExtensionService,\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostCommands);\n\n\t\tthis._generateCommandsDocumentationRegistration = CommandsRegistry.registerCommand('_generateCommandsDocumentation', () => this._generateCommandsDocumentation());\n\t}\n\n\tdispose() {\n\t\tthis._commandRegistrations.dispose();\n\t\tthis._generateCommandsDocumentationRegistration.dispose();\n\t}\n\n\tprivate async _generateCommandsDocumentation(): Promise<void> {\n\t\tconst result = await this._proxy.$getContributedCommandHandlerDescriptions();\n\n\t\t// add local commands\n\t\tconst commands = CommandsRegistry.getCommands();\n\t\tfor (const [id, command] of commands) {\n\t\t\tif (command.description) {\n\t\t\t\tresult[id] = command.description;\n\t\t\t}\n\t\t}\n\n\t\t// print all as markdown\n\t\tconst all: string[] = [];\n\t\tfor (const id in result) {\n\t\t\tall.push('`' + id + '` - ' + _generateMarkdown(result[id]));\n\t\t}\n\t\tconsole.log(all.join('\\n'));\n\t}\n\n\t$registerCommand(id: string): void {\n\t\tthis._commandRegistrations.set(\n\t\t\tid,\n\t\t\tCommandsRegistry.registerCommand(id, (accessor, ...args) => {\n\t\t\t\treturn this._proxy.$executeContributedCommand(id, ...args).then(result => {\n\t\t\t\t\treturn revive(result);\n\t\t\t\t});\n\t\t\t})\n\t\t);\n\t}\n\n\t$unregisterCommand(id: string): void {\n\t\tthis._commandRegistrations.deleteAndDispose(id);\n\t}\n\n\t$fireCommandActivationEvent(id: string): void {\n\t\tconst activationEvent = `onCommand:${id}`;\n\t\tif (!this._extensionService.activationEventIsDone(activationEvent)) {\n\t\t\t// this is NOT awaited because we only use it as drive-by-activation\n\t\t\t// for commands that are already known inside the extension host\n\t\t\tthis._extensionService.activateByEvent(activationEvent);\n\t\t}\n\t}\n\n\tasync $executeCommand<T>(id: string, args: any[] | SerializableObjectWithBuffers<any[]>, retry: boolean): Promise<T | undefined> {\n\t\tif (args instanceof SerializableObjectWithBuffers) {\n\t\t\targs = args.value;\n\t\t}\n\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\targs[i] = revive(args[i]);\n\t\t}\n\t\tif (retry && args.length > 0 && !CommandsRegistry.getCommand(id)) {\n\t\t\tawait this._extensionService.activateByEvent(`onCommand:${id}`);\n\t\t\tthrow new Error('$executeCommand:retry');\n\t\t}\n\t\treturn this._commandService.executeCommand<T>(id, ...args);\n\t}\n\n\t$getCommands(): Promise<string[]> {\n\t\treturn Promise.resolve([...CommandsRegistry.getCommands().keys()]);\n\t}\n}\n\n// --- command doc\n\nfunction _generateMarkdown(description: string | Dto<ICommandHandlerDescription> | ICommandHandlerDescription): string {\n\tif (typeof description === 'string') {\n\t\treturn description;\n\t} else {\n\t\tconst parts = [description.description];\n\t\tparts.push('\\n\\n');\n\t\tif (description.args) {\n\t\t\tfor (const arg of description.args) {\n\t\t\t\tparts.push(`* _${arg.name}_ - ${arg.description || ''}\\n`);\n\t\t\t}\n\t\t}\n\t\tif (description.returns) {\n\t\t\tparts.push(`* _(returns)_ - ${description.returns}`);\n\t\t}\n\t\tparts.push('\\n\\n');\n\t\treturn parts.join('');\n\t}\n}\n"]}