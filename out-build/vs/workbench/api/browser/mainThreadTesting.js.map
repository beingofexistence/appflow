{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadTesting.ts"],"names":[],"mappings":"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","file":"mainThreadTesting.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Disposable, DisposableStore, IDisposable, MutableDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { revive } from 'vs/base/common/marshalling';\nimport { URI } from 'vs/base/common/uri';\nimport { Range } from 'vs/editor/common/core/range';\nimport { MutableObservableValue } from 'vs/workbench/contrib/testing/common/observableValue';\nimport { ExtensionRunTestsRequest, IFileCoverage, ITestItem, ITestMessage, ITestRunProfile, ITestRunTask, ResolvedTestRunRequest, TestResultState, TestsDiffOp } from 'vs/workbench/contrib/testing/common/testTypes';\nimport { TestCoverage } from 'vs/workbench/contrib/testing/common/testCoverage';\nimport { ITestProfileService } from 'vs/workbench/contrib/testing/common/testProfileService';\nimport { LiveTestResult } from 'vs/workbench/contrib/testing/common/testResult';\nimport { ITestResultService } from 'vs/workbench/contrib/testing/common/testResultService';\nimport { IMainThreadTestController, ITestRootProvider, ITestService } from 'vs/workbench/contrib/testing/common/testService';\nimport { extHostNamedCustomer, IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport { ExtHostContext, ExtHostTestingShape, ILocationDto, ITestControllerPatch, MainContext, MainThreadTestingShape } from '../common/extHost.protocol';\nimport { WellDefinedPrefixTree } from 'vs/base/common/prefixTree';\nimport { TestId } from 'vs/workbench/contrib/testing/common/testId';\n\n@extHostNamedCustomer(MainContext.MainThreadTesting)\nexport class MainThreadTesting extends Disposable implements MainThreadTestingShape, ITestRootProvider {\n\tprivate readonly proxy: ExtHostTestingShape;\n\tprivate readonly diffListener = this._register(new MutableDisposable());\n\tprivate readonly testProviderRegistrations = new Map<string, {\n\t\tinstance: IMainThreadTestController;\n\t\tlabel: MutableObservableValue<string>;\n\t\tcanRefresh: MutableObservableValue<boolean>;\n\t\tdisposable: IDisposable;\n\t}>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ITestService private readonly testService: ITestService,\n\t\t@ITestProfileService private readonly testProfiles: ITestProfileService,\n\t\t@ITestResultService private readonly resultService: ITestResultService,\n\t) {\n\t\tsuper();\n\t\tthis.proxy = extHostContext.getProxy(ExtHostContext.ExtHostTesting);\n\n\t\tthis._register(this.testService.onDidCancelTestRun(({ runId }) => {\n\t\t\tthis.proxy.$cancelExtensionTestRun(runId);\n\t\t}));\n\n\t\tthis._register(resultService.onResultsChanged(evt => {\n\t\t\tconst results = 'completed' in evt ? evt.completed : ('inserted' in evt ? evt.inserted : undefined);\n\t\t\tconst serialized = results?.toJSONWithMessages();\n\t\t\tif (serialized) {\n\t\t\t\tthis.proxy.$publishTestResults([serialized]);\n\t\t\t}\n\t\t}));\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$markTestRetired(testIds: string[] | undefined): void {\n\t\tlet tree: WellDefinedPrefixTree<undefined> | undefined;\n\t\tif (testIds) {\n\t\t\ttree = new WellDefinedPrefixTree();\n\t\t\tfor (const id of testIds) {\n\t\t\t\ttree.insert(TestId.fromString(id).path, undefined);\n\t\t\t}\n\t\t}\n\n\t\tfor (const result of this.resultService.results) {\n\t\t\t// all non-live results are already entirely outdated\n\t\t\tif (result instanceof LiveTestResult) {\n\t\t\t\tresult.markRetired(tree);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$publishTestRunProfile(profile: ITestRunProfile): void {\n\t\tconst controller = this.testProviderRegistrations.get(profile.controllerId);\n\t\tif (controller) {\n\t\t\tthis.testProfiles.addProfile(controller.instance, profile);\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$updateTestRunConfig(controllerId: string, profileId: number, update: Partial<ITestRunProfile>): void {\n\t\tthis.testProfiles.updateProfile(controllerId, profileId, update);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$removeTestProfile(controllerId: string, profileId: number): void {\n\t\tthis.testProfiles.removeProfile(controllerId, profileId);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$addTestsToRun(controllerId: string, runId: string, tests: ITestItem.Serialized[]): void {\n\t\tthis.withLiveRun(runId, r => r.addTestChainToRun(controllerId, tests.map(ITestItem.deserialize)));\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$signalCoverageAvailable(runId: string, taskId: string): void {\n\t\tthis.withLiveRun(runId, run => {\n\t\t\tconst task = run.tasks.find(t => t.id === taskId);\n\t\t\tif (!task) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t(task.coverage as MutableObservableValue<TestCoverage>).value = new TestCoverage({\n\t\t\t\tprovideFileCoverage: async token => revive<IFileCoverage[]>(await this.proxy.$provideFileCoverage(runId, taskId, token)),\n\t\t\t\tresolveFileCoverage: (i, token) => this.proxy.$resolveFileCoverage(runId, taskId, i, token),\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$startedExtensionTestRun(req: ExtensionRunTestsRequest): void {\n\t\tthis.resultService.createLiveResult(req);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$startedTestRunTask(runId: string, task: ITestRunTask): void {\n\t\tthis.withLiveRun(runId, r => r.addTask(task));\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$finishedTestRunTask(runId: string, taskId: string): void {\n\t\tthis.withLiveRun(runId, r => r.markTaskComplete(taskId));\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\t$finishedExtensionTestRun(runId: string): void {\n\t\tthis.withLiveRun(runId, r => r.markComplete());\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $updateTestStateInRun(runId: string, taskId: string, testId: string, state: TestResultState, duration?: number): void {\n\t\tthis.withLiveRun(runId, r => r.updateState(testId, taskId, state, duration));\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $appendOutputToRun(runId: string, taskId: string, output: VSBuffer, locationDto?: ILocationDto, testId?: string): void {\n\t\tconst location = locationDto && {\n\t\t\turi: URI.revive(locationDto.uri),\n\t\t\trange: Range.lift(locationDto.range)\n\t\t};\n\n\t\tthis.withLiveRun(runId, r => r.appendOutput(output, taskId, location, testId));\n\t}\n\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $appendTestMessagesInRun(runId: string, taskId: string, testId: string, messages: ITestMessage.Serialized[]): void {\n\t\tconst r = this.resultService.getResult(runId);\n\t\tif (r && r instanceof LiveTestResult) {\n\t\t\tfor (const message of messages) {\n\t\t\t\tr.appendMessage(testId, taskId, ITestMessage.deserialize(message));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $registerTestController(controllerId: string, labelStr: string, canRefreshValue: boolean) {\n\t\tconst disposable = new DisposableStore();\n\t\tconst label = disposable.add(new MutableObservableValue(labelStr));\n\t\tconst canRefresh = disposable.add(new MutableObservableValue(canRefreshValue));\n\t\tconst controller: IMainThreadTestController = {\n\t\t\tid: controllerId,\n\t\t\tlabel,\n\t\t\tcanRefresh,\n\t\t\tsyncTests: () => this.proxy.$syncTests(),\n\t\t\trefreshTests: token => this.proxy.$refreshTests(controllerId, token),\n\t\t\tconfigureRunProfile: id => this.proxy.$configureRunProfile(controllerId, id),\n\t\t\trunTests: (reqs, token) => this.proxy.$runControllerTests(reqs, token),\n\t\t\tstartContinuousRun: (reqs, token) => this.proxy.$startContinuousRun(reqs, token),\n\t\t\texpandTest: (testId, levels) => this.proxy.$expandTest(testId, isFinite(levels) ? levels : -1),\n\t\t};\n\n\t\tdisposable.add(toDisposable(() => this.testProfiles.removeProfile(controllerId)));\n\t\tdisposable.add(this.testService.registerTestController(controllerId, controller));\n\n\t\tthis.testProviderRegistrations.set(controllerId, {\n\t\t\tinstance: controller,\n\t\t\tlabel,\n\t\t\tcanRefresh,\n\t\t\tdisposable\n\t\t});\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $updateController(controllerId: string, patch: ITestControllerPatch) {\n\t\tconst controller = this.testProviderRegistrations.get(controllerId);\n\t\tif (!controller) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (patch.label !== undefined) {\n\t\t\tcontroller.label.value = patch.label;\n\t\t}\n\n\t\tif (patch.canRefresh !== undefined) {\n\t\t\tcontroller.canRefresh.value = patch.canRefresh;\n\t\t}\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $unregisterTestController(controllerId: string) {\n\t\tthis.testProviderRegistrations.get(controllerId)?.disposable.dispose();\n\t\tthis.testProviderRegistrations.delete(controllerId);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $subscribeToDiffs(): void {\n\t\tthis.proxy.$acceptDiff(this.testService.collection.getReviverDiff().map(TestsDiffOp.serialize));\n\t\tthis.diffListener.value = this.testService.onDidProcessDiff(this.proxy.$acceptDiff, this.proxy);\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $unsubscribeFromDiffs(): void {\n\t\tthis.diffListener.clear();\n\t}\n\n\t/**\n\t * @inheritdoc\n\t */\n\tpublic $publishDiff(controllerId: string, diff: TestsDiffOp.Serialized[]): void {\n\t\tthis.testService.publishDiff(controllerId, diff.map(TestsDiffOp.deserialize));\n\t}\n\n\tpublic async $runTests(req: ResolvedTestRunRequest, token: CancellationToken): Promise<string> {\n\t\tconst result = await this.testService.runResolvedTests(req, token);\n\t\treturn result.id;\n\t}\n\n\tpublic override dispose() {\n\t\tsuper.dispose();\n\t\tfor (const subscription of this.testProviderRegistrations.values()) {\n\t\t\tsubscription.disposable.dispose();\n\t\t}\n\t\tthis.testProviderRegistrations.clear();\n\t}\n\n\tprivate withLiveRun<T>(runId: string, fn: (run: LiveTestResult) => T): T | undefined {\n\t\tconst r = this.resultService.getResult(runId);\n\t\treturn r && r instanceof LiveTestResult ? fn(r) : undefined;\n\t}\n}\n"]}