{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadNotebook.ts"],"names":[],"mappings":"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","file":"mainThreadNotebook.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Emitter } from 'vs/base/common/event';\nimport { DisposableStore, dispose, IDisposable } from 'vs/base/common/lifecycle';\nimport { StopWatch } from 'vs/base/common/stopwatch';\nimport { assertType } from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { NotebookDto } from 'vs/workbench/api/browser/mainThreadNotebookDto';\nimport { INotebookCellStatusBarService } from 'vs/workbench/contrib/notebook/common/notebookCellStatusBarService';\nimport { INotebookCellStatusBarItemProvider, INotebookContributionData, NotebookData, NotebookExtensionDescription, TransientOptions } from 'vs/workbench/contrib/notebook/common/notebookCommon';\nimport { INotebookService, SimpleNotebookProviderInfo } from 'vs/workbench/contrib/notebook/common/notebookService';\nimport { extHostNamedCustomer, IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport { SerializableObjectWithBuffers } from 'vs/workbench/services/extensions/common/proxyIdentifier';\nimport { ExtHostContext, ExtHostNotebookShape, MainContext, MainThreadNotebookShape } from '../common/extHost.protocol';\n\n@extHostNamedCustomer(MainContext.MainThreadNotebook)\nexport class MainThreadNotebooks implements MainThreadNotebookShape {\n\n\tprivate readonly _disposables = new DisposableStore();\n\n\tprivate readonly _proxy: ExtHostNotebookShape;\n\tprivate readonly _notebookSerializer = new Map<number, IDisposable>();\n\tprivate readonly _notebookCellStatusBarRegistrations = new Map<number, IDisposable>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@INotebookService private readonly _notebookService: INotebookService,\n\t\t@INotebookCellStatusBarService private readonly _cellStatusBarService: INotebookCellStatusBarService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostNotebook);\n\t}\n\n\tdispose(): void {\n\t\tthis._disposables.dispose();\n\t\tdispose(this._notebookSerializer.values());\n\t}\n\n\t$registerNotebookSerializer(handle: number, extension: NotebookExtensionDescription, viewType: string, options: TransientOptions, data: INotebookContributionData | undefined): void {\n\t\tconst disposables = new DisposableStore();\n\n\t\tdisposables.add(this._notebookService.registerNotebookSerializer(viewType, extension, {\n\t\t\toptions,\n\t\t\tdataToNotebook: async (data: VSBuffer): Promise<NotebookData> => {\n\t\t\t\tconst sw = new StopWatch();\n\t\t\t\tlet result: NotebookData;\n\t\t\t\tif (data.byteLength === 0 && viewType === 'interactive') {\n\t\t\t\t\t// we don't want any starting cells for an empty interactive window.\n\t\t\t\t\tresult = NotebookDto.fromNotebookDataDto({ cells: [], metadata: {} });\n\t\t\t\t} else {\n\t\t\t\t\tconst dto = await this._proxy.$dataToNotebook(handle, data, CancellationToken.None);\n\t\t\t\t\tresult = NotebookDto.fromNotebookDataDto(dto.value);\n\t\t\t\t}\n\t\t\t\tthis._logService.trace(`[NotebookSerializer] dataToNotebook DONE after ${sw.elapsed()}ms`, {\n\t\t\t\t\tviewType,\n\t\t\t\t\textensionId: extension.id.value,\n\t\t\t\t});\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\tnotebookToData: (data: NotebookData): Promise<VSBuffer> => {\n\t\t\t\tconst sw = new StopWatch();\n\t\t\t\tconst result = this._proxy.$notebookToData(handle, new SerializableObjectWithBuffers(NotebookDto.toNotebookDataDto(data)), CancellationToken.None);\n\t\t\t\tthis._logService.trace(`[NotebookSerializer] notebookToData DONE after ${sw.elapsed()}`, {\n\t\t\t\t\tviewType,\n\t\t\t\t\textensionId: extension.id.value,\n\t\t\t\t});\n\t\t\t\treturn result;\n\t\t\t},\n\t\t\tsave: async (uri, versionId, options, token) => {\n\t\t\t\tconst stat = await this._proxy.$saveNotebook(handle, uri, versionId, options, token);\n\t\t\t\treturn {\n\t\t\t\t\t...stat,\n\t\t\t\t\tchildren: undefined,\n\t\t\t\t\tresource: uri\n\t\t\t\t};\n\t\t\t},\n\t\t}));\n\n\t\tif (data) {\n\t\t\tdisposables.add(this._notebookService.registerContributedNotebookType(viewType, data));\n\t\t}\n\t\tthis._notebookSerializer.set(handle, disposables);\n\n\t\tthis._logService.trace('[NotebookSerializer] registered notebook serializer', {\n\t\t\tviewType,\n\t\t\textensionId: extension.id.value,\n\t\t});\n\t}\n\n\t$unregisterNotebookSerializer(handle: number): void {\n\t\tthis._notebookSerializer.get(handle)?.dispose();\n\t\tthis._notebookSerializer.delete(handle);\n\t}\n\n\t$emitCellStatusBarEvent(eventHandle: number): void {\n\t\tconst emitter = this._notebookCellStatusBarRegistrations.get(eventHandle);\n\t\tif (emitter instanceof Emitter) {\n\t\t\temitter.fire(undefined);\n\t\t}\n\t}\n\n\tasync $registerNotebookCellStatusBarItemProvider(handle: number, eventHandle: number | undefined, viewType: string): Promise<void> {\n\t\tconst that = this;\n\t\tconst provider: INotebookCellStatusBarItemProvider = {\n\t\t\tasync provideCellStatusBarItems(uri: URI, index: number, token: CancellationToken) {\n\t\t\t\tconst result = await that._proxy.$provideNotebookCellStatusBarItems(handle, uri, index, token);\n\t\t\t\treturn {\n\t\t\t\t\titems: result?.items ?? [],\n\t\t\t\t\tdispose() {\n\t\t\t\t\t\tif (result) {\n\t\t\t\t\t\t\tthat._proxy.$releaseNotebookCellStatusBarItems(result.cacheId);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t},\n\t\t\tviewType\n\t\t};\n\n\t\tif (typeof eventHandle === 'number') {\n\t\t\tconst emitter = new Emitter<void>();\n\t\t\tthis._notebookCellStatusBarRegistrations.set(eventHandle, emitter);\n\t\t\tprovider.onDidChangeStatusBarItems = emitter.event;\n\t\t}\n\n\t\tconst disposable = this._cellStatusBarService.registerCellStatusBarItemProvider(provider);\n\t\tthis._notebookCellStatusBarRegistrations.set(handle, disposable);\n\t}\n\n\tasync $unregisterNotebookCellStatusBarItemProvider(handle: number, eventHandle: number | undefined): Promise<void> {\n\t\tconst unregisterThing = (handle: number) => {\n\t\t\tconst entry = this._notebookCellStatusBarRegistrations.get(handle);\n\t\t\tif (entry) {\n\t\t\t\tthis._notebookCellStatusBarRegistrations.get(handle)?.dispose();\n\t\t\t\tthis._notebookCellStatusBarRegistrations.delete(handle);\n\t\t\t}\n\t\t};\n\t\tunregisterThing(handle);\n\t\tif (typeof eventHandle === 'number') {\n\t\t\tunregisterThing(eventHandle);\n\t\t}\n\t}\n}\n\nCommandsRegistry.registerCommand('_executeDataToNotebook', async (accessor, ...args) => {\n\n\tconst [notebookType, bytes] = args;\n\tassertType(typeof notebookType === 'string', 'string');\n\tassertType(bytes instanceof VSBuffer, 'VSBuffer');\n\n\tconst notebookService = accessor.get(INotebookService);\n\tconst info = await notebookService.withNotebookDataProvider(notebookType);\n\tif (!(info instanceof SimpleNotebookProviderInfo)) {\n\t\treturn;\n\t}\n\n\tconst dto = await info.serializer.dataToNotebook(bytes);\n\treturn new SerializableObjectWithBuffers(NotebookDto.toNotebookDataDto(dto));\n});\n\nCommandsRegistry.registerCommand('_executeNotebookToData', async (accessor, ...args) => {\n\n\tconst [notebookType, dto] = args;\n\tassertType(typeof notebookType === 'string', 'string');\n\tassertType(typeof dto === 'object');\n\n\tconst notebookService = accessor.get(INotebookService);\n\tconst info = await notebookService.withNotebookDataProvider(notebookType);\n\tif (!(info instanceof SimpleNotebookProviderInfo)) {\n\t\treturn;\n\t}\n\n\tconst data = NotebookDto.fromNotebookDataDto(dto.value);\n\tconst bytes = await info.serializer.notebookToData(data);\n\treturn bytes;\n});\n"]}