{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadUrls.ts"],"names":[],"mappings":"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","file":"mainThreadUrls.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ExtHostContext, MainContext, MainThreadUrlsShape, ExtHostUrlsShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { extHostNamedCustomer, IExtHostContext } from '../../services/extensions/common/extHostCustomers';\nimport { IURLService, IOpenURLOptions } from 'vs/platform/url/common/url';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { IExtensionContributedURLHandler, IExtensionUrlHandler } from 'vs/workbench/services/extensions/browser/extensionUrlHandler';\nimport { ExtensionIdentifier } from 'vs/platform/extensions/common/extensions';\n\nclass ExtensionUrlHandler implements IExtensionContributedURLHandler {\n\n\tconstructor(\n\t\tprivate readonly proxy: ExtHostUrlsShape,\n\t\tprivate readonly handle: number,\n\t\treadonly extensionId: ExtensionIdentifier,\n\t\treadonly extensionDisplayName: string\n\t) { }\n\n\thandleURL(uri: URI, options?: IOpenURLOptions): Promise<boolean> {\n\t\tif (!ExtensionIdentifier.equals(this.extensionId, uri.authority)) {\n\t\t\treturn Promise.resolve(false);\n\t\t}\n\n\t\treturn Promise.resolve(this.proxy.$handleExternalUri(this.handle, uri)).then(() => true);\n\t}\n}\n\n@extHostNamedCustomer(MainContext.MainThreadUrls)\nexport class MainThreadUrls implements MainThreadUrlsShape {\n\n\tprivate readonly proxy: ExtHostUrlsShape;\n\tprivate handlers = new Map<number, { extensionId: ExtensionIdentifier; disposable: IDisposable }>();\n\n\tconstructor(\n\t\tcontext: IExtHostContext,\n\t\t@IURLService private readonly urlService: IURLService,\n\t\t@IExtensionUrlHandler private readonly extensionUrlHandler: IExtensionUrlHandler\n\t) {\n\t\tthis.proxy = context.getProxy(ExtHostContext.ExtHostUrls);\n\t}\n\n\t$registerUriHandler(handle: number, extensionId: ExtensionIdentifier, extensionDisplayName: string): Promise<void> {\n\t\tconst handler = new ExtensionUrlHandler(this.proxy, handle, extensionId, extensionDisplayName);\n\t\tconst disposable = this.urlService.registerHandler(handler);\n\n\t\tthis.handlers.set(handle, { extensionId, disposable });\n\t\tthis.extensionUrlHandler.registerExtensionHandler(extensionId, handler);\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\t$unregisterUriHandler(handle: number): Promise<void> {\n\t\tconst tuple = this.handlers.get(handle);\n\n\t\tif (!tuple) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tconst { extensionId, disposable } = tuple;\n\n\t\tthis.extensionUrlHandler.unregisterExtensionHandler(extensionId);\n\t\tthis.handlers.delete(handle);\n\t\tdisposable.dispose();\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tasync $createAppUri(uri: UriComponents): Promise<URI> {\n\t\treturn this.urlService.create(uri);\n\t}\n\n\tdispose(): void {\n\t\tthis.handlers.forEach(({ disposable }) => disposable.dispose());\n\t\tthis.handlers.clear();\n\t}\n}\n"]}