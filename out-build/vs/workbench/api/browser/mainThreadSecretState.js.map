{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadSecretState.ts"],"names":[],"mappings":"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","file":"mainThreadSecretState.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { extHostNamedCustomer, IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport { ExtHostContext, ExtHostSecretStateShape, MainContext, MainThreadSecretStateShape } from '../common/extHost.protocol';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { SequencerByKey } from 'vs/base/common/async';\nimport { ISecretStorageService } from 'vs/platform/secrets/common/secrets';\nimport { IBrowserWorkbenchEnvironmentService } from 'vs/workbench/services/environment/browser/environmentService';\n\n@extHostNamedCustomer(MainContext.MainThreadSecretState)\nexport class MainThreadSecretState extends Disposable implements MainThreadSecretStateShape {\n\tprivate readonly _proxy: ExtHostSecretStateShape;\n\n\tprivate readonly _sequencer = new SequencerByKey<string>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@ISecretStorageService private readonly secretStorageService: ISecretStorageService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IBrowserWorkbenchEnvironmentService environmentService: IBrowserWorkbenchEnvironmentService\n\t) {\n\t\tsuper();\n\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostSecretState);\n\n\t\tthis._register(this.secretStorageService.onDidChangeSecret((e: string) => {\n\t\t\ttry {\n\t\t\t\tconst { extensionId, key } = this.parseKey(e);\n\t\t\t\tif (extensionId && key) {\n\t\t\t\t\tthis._proxy.$onDidChangePassword({ extensionId, key });\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t// Core can use non-JSON values as keys, so we may not be able to parse them.\n\t\t\t}\n\t\t}));\n\t}\n\n\t$getPassword(extensionId: string, key: string): Promise<string | undefined> {\n\t\tthis.logService.trace(`[mainThreadSecretState] Getting password for ${extensionId} extension: `, key);\n\t\treturn this._sequencer.queue(extensionId, () => this.doGetPassword(extensionId, key));\n\t}\n\n\tprivate async doGetPassword(extensionId: string, key: string): Promise<string | undefined> {\n\t\tconst fullKey = this.getKey(extensionId, key);\n\t\tconst password = await this.secretStorageService.get(fullKey);\n\t\tthis.logService.trace(`[mainThreadSecretState] ${password ? 'P' : 'No p'}assword found for: `, extensionId, key);\n\t\treturn password;\n\t}\n\n\t$setPassword(extensionId: string, key: string, value: string): Promise<void> {\n\t\tthis.logService.trace(`[mainThreadSecretState] Setting password for ${extensionId} extension: `, key);\n\t\treturn this._sequencer.queue(extensionId, () => this.doSetPassword(extensionId, key, value));\n\t}\n\n\tprivate async doSetPassword(extensionId: string, key: string, value: string): Promise<void> {\n\t\tconst fullKey = this.getKey(extensionId, key);\n\t\tawait this.secretStorageService.set(fullKey, value);\n\t\tthis.logService.trace('[mainThreadSecretState] Password set for: ', extensionId, key);\n\t}\n\n\t$deletePassword(extensionId: string, key: string): Promise<void> {\n\t\tthis.logService.trace(`[mainThreadSecretState] Deleting password for ${extensionId} extension: `, key);\n\t\treturn this._sequencer.queue(extensionId, () => this.doDeletePassword(extensionId, key));\n\t}\n\n\tprivate async doDeletePassword(extensionId: string, key: string): Promise<void> {\n\t\tconst fullKey = this.getKey(extensionId, key);\n\t\tawait this.secretStorageService.delete(fullKey);\n\t\tthis.logService.trace('[mainThreadSecretState] Password deleted for: ', extensionId, key);\n\t}\n\n\tprivate getKey(extensionId: string, key: string): string {\n\t\treturn JSON.stringify({ extensionId, key });\n\t}\n\n\tprivate parseKey(key: string): { extensionId: string; key: string } {\n\t\treturn JSON.parse(key);\n\t}\n}\n"]}