{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadConfiguration.ts"],"names":[],"mappings":"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","file":"mainThreadConfiguration.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { Registry } from 'vs/platform/registry/common/platform';\nimport { IConfigurationRegistry, Extensions as ConfigurationExtensions, ConfigurationScope, getScopes } from 'vs/platform/configuration/common/configurationRegistry';\nimport { IWorkspaceContextService, WorkbenchState } from 'vs/platform/workspace/common/workspace';\nimport { MainThreadConfigurationShape, MainContext, ExtHostContext, IConfigurationInitData } from '../common/extHost.protocol';\nimport { extHostNamedCustomer, IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport { ConfigurationTarget, IConfigurationService, IConfigurationOverrides } from 'vs/platform/configuration/common/configuration';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\n\n@extHostNamedCustomer(MainContext.MainThreadConfiguration)\nexport class MainThreadConfiguration implements MainThreadConfigurationShape {\n\n\tprivate readonly _configurationListener: IDisposable;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IWorkspaceContextService private readonly _workspaceContextService: IWorkspaceContextService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IEnvironmentService private readonly _environmentService: IEnvironmentService,\n\t) {\n\t\tconst proxy = extHostContext.getProxy(ExtHostContext.ExtHostConfiguration);\n\n\t\tproxy.$initializeConfiguration(this._getConfigurationData());\n\t\tthis._configurationListener = configurationService.onDidChangeConfiguration(e => {\n\t\t\tproxy.$acceptConfigurationChanged(this._getConfigurationData(), e.change);\n\t\t});\n\t}\n\n\tprivate _getConfigurationData(): IConfigurationInitData {\n\t\tconst configurationData: IConfigurationInitData = { ...(this.configurationService.getConfigurationData()!), configurationScopes: [] };\n\t\t// Send configurations scopes only in development mode.\n\t\tif (!this._environmentService.isBuilt || this._environmentService.isExtensionDevelopment) {\n\t\t\tconfigurationData.configurationScopes = getScopes();\n\t\t}\n\t\treturn configurationData;\n\t}\n\n\tpublic dispose(): void {\n\t\tthis._configurationListener.dispose();\n\t}\n\n\t$updateConfigurationOption(target: ConfigurationTarget | null, key: string, value: any, overrides: IConfigurationOverrides | undefined, scopeToLanguage: boolean | undefined): Promise<void> {\n\t\toverrides = { resource: overrides?.resource ? URI.revive(overrides.resource) : undefined, overrideIdentifier: overrides?.overrideIdentifier };\n\t\treturn this.writeConfiguration(target, key, value, overrides, scopeToLanguage);\n\t}\n\n\t$removeConfigurationOption(target: ConfigurationTarget | null, key: string, overrides: IConfigurationOverrides | undefined, scopeToLanguage: boolean | undefined): Promise<void> {\n\t\toverrides = { resource: overrides?.resource ? URI.revive(overrides.resource) : undefined, overrideIdentifier: overrides?.overrideIdentifier };\n\t\treturn this.writeConfiguration(target, key, undefined, overrides, scopeToLanguage);\n\t}\n\n\tprivate writeConfiguration(target: ConfigurationTarget | null, key: string, value: any, overrides: IConfigurationOverrides, scopeToLanguage: boolean | undefined): Promise<void> {\n\t\ttarget = target !== null && target !== undefined ? target : this.deriveConfigurationTarget(key, overrides);\n\t\tconst configurationValue = this.configurationService.inspect(key, overrides);\n\t\tswitch (target) {\n\t\t\tcase ConfigurationTarget.MEMORY:\n\t\t\t\treturn this._updateValue(key, value, target, configurationValue?.memory?.override, overrides, scopeToLanguage);\n\t\t\tcase ConfigurationTarget.WORKSPACE_FOLDER:\n\t\t\t\treturn this._updateValue(key, value, target, configurationValue?.workspaceFolder?.override, overrides, scopeToLanguage);\n\t\t\tcase ConfigurationTarget.WORKSPACE:\n\t\t\t\treturn this._updateValue(key, value, target, configurationValue?.workspace?.override, overrides, scopeToLanguage);\n\t\t\tcase ConfigurationTarget.USER_REMOTE:\n\t\t\t\treturn this._updateValue(key, value, target, configurationValue?.userRemote?.override, overrides, scopeToLanguage);\n\t\t\tdefault:\n\t\t\t\treturn this._updateValue(key, value, target, configurationValue?.userLocal?.override, overrides, scopeToLanguage);\n\t\t}\n\t}\n\n\tprivate _updateValue(key: string, value: any, configurationTarget: ConfigurationTarget, overriddenValue: any | undefined, overrides: IConfigurationOverrides, scopeToLanguage: boolean | undefined): Promise<void> {\n\t\toverrides = scopeToLanguage === true ? overrides\n\t\t\t: scopeToLanguage === false ? { resource: overrides.resource }\n\t\t\t\t: overrides.overrideIdentifier && overriddenValue !== undefined ? overrides\n\t\t\t\t\t: { resource: overrides.resource };\n\t\treturn this.configurationService.updateValue(key, value, overrides, configurationTarget, { donotNotifyError: true });\n\t}\n\n\tprivate deriveConfigurationTarget(key: string, overrides: IConfigurationOverrides): ConfigurationTarget {\n\t\tif (overrides.resource && this._workspaceContextService.getWorkbenchState() === WorkbenchState.WORKSPACE) {\n\t\t\tconst configurationProperties = Registry.as<IConfigurationRegistry>(ConfigurationExtensions.Configuration).getConfigurationProperties();\n\t\t\tif (configurationProperties[key] && (configurationProperties[key].scope === ConfigurationScope.RESOURCE || configurationProperties[key].scope === ConfigurationScope.LANGUAGE_OVERRIDABLE)) {\n\t\t\t\treturn ConfigurationTarget.WORKSPACE_FOLDER;\n\t\t\t}\n\t\t}\n\t\treturn ConfigurationTarget.WORKSPACE;\n\t}\n}\n"]}