{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadChatAgents.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAYzF,IAAM,IAAI,GAAV,MAAM,IAAI;QAMhB,YACC,cAA+B,EACZ,CAAuC;YAAtB,MAAC,GAAD,CAAC,CAAqB;YAN1C,MAAC,GAAS,IAAI,eAAqB,CAAC;YACpC,MAAC,GAAkB,IAAI,GAAG,EAAyC,CAAC;YAOpF,IAAI,CAAC,CAAC,GAAQ,cAAc,CAAC,QAAQ,CAAC,sBAAG,CAAY,iBAAiB,CAAC,CAAC;QACzE,CAAC;QAED,gBAAgB,CAAC,MAAc;YAC9B,IAAI,CAAC,CAAC,CAAO,gBAAgB,CAAC,MAAM,CAAC,CAAC;QACvC,CAAC;QAED,OAAO;YACN,IAAI,CAAC,CAAC,CAAO,kBAAkB,EAAE,CAAC;QACnC,CAAC;QAED,cAAc,CAAC,MAAc,EAAE,IAAY,EAAE,QAA4B;YACxE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAiB,QAAQ,CAAC,IAAI,CAAC,EAAE;gBAC3C,WAAW;gBACX,IAAI,CAAC,CAAC,CAAiB,iBAAiB,CAAC;oBACxC,EAAE,EAAE,IAAI;oBACR,QAAQ,EAAE,IAAA,iBAAG,EAAI,QAAQ,CAAC;iBAC1B,CAAC,CAAC;aACH;YAED,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAiB,qBAAqB,CAAC,IAAI,EAAE,KAAK,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;gBACvG,MAAM,SAAS,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;gBAChC,IAAI,CAAC,CAAC,CAAgB,GAAG,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;gBAC/C,IAAI;oBACH,OAAO,MAAM,IAAI,CAAC,CAAC,CAAM,YAAY,CAAC,MAAM,EAAE,SAAS,EAAE,MAAM,EAAE,EAAE,OAAO,EAAE,EAAE,KAAK,CAAC,CAAC;iBACrF;wBAAS;oBACT,IAAI,CAAC,CAAC,CAAgB,MAAM,CAAC,SAAS,CAAC,CAAC;iBACxC;YACF,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,CAAC,CAAO,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QAC7B,CAAC;QAED,KAAK,CAAC,oBAAoB,CAAC,SAAiB,EAAE,KAAyB;YACtE,IAAI,CAAC,CAAC,CAAgB,GAAG,CAAC,SAAS,CAAC,EAAE,MAAM,CAAC,IAAA,iBAAG,EAAI,KAAK,CAAC,CAAC,CAAC;QAC7D,CAAC;QAED,kBAAkB,CAAC,MAAc;YAChC,IAAI,CAAC,CAAC,CAAO,gBAAgB,CAAC,MAAM,CAAC,CAAC;QACvC,CAAC;KACD,CAAA;IAjDY,oBAAI;mBAAJ,IAAI;QADhB,IAAA,uBAAI,EAAiB,sBAAG,CAAS,oBAAoB,CAAC;QASpD,WAAA,gBAAG,CAAA;OARO,IAAI,CAiDhB","file":"mainThreadChatAgents.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableMap } from 'vs/base/common/lifecycle';\nimport { revive } from 'vs/base/common/marshalling';\nimport { IProgress } from 'vs/platform/progress/common/progress';\nimport { ExtHostChatAgentsShape, ExtHostContext, MainContext, MainThreadChatAgentsShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { IChatAgentMetadata, IChatAgentService } from 'vs/workbench/contrib/chat/common/chatAgents';\nimport { IChatSlashFragment } from 'vs/workbench/contrib/chat/common/chatSlashCommands';\nimport { IExtHostContext, extHostNamedCustomer } from 'vs/workbench/services/extensions/common/extHostCustomers';\n\n\n@extHostNamedCustomer(MainContext.MainThreadChatAgents)\nexport class MainThreadChatAgents implements MainThreadChatAgentsShape {\n\n\tprivate readonly _agents = new DisposableMap<number>;\n\tprivate readonly _pendingProgress = new Map<number, IProgress<IChatSlashFragment>>();\n\tprivate readonly _proxy: ExtHostChatAgentsShape;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IChatAgentService private readonly _chatAgentService: IChatAgentService\n\t) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostChatAgents);\n\t}\n\n\t$unregisterAgent(handle: number): void {\n\t\tthis._agents.deleteAndDispose(handle);\n\t}\n\n\tdispose(): void {\n\t\tthis._agents.clearAndDisposeAll();\n\t}\n\n\t$registerAgent(handle: number, name: string, metadata: IChatAgentMetadata): void {\n\t\tif (!this._chatAgentService.hasAgent(name)) {\n\t\t\t// dynamic!\n\t\t\tthis._chatAgentService.registerAgentData({\n\t\t\t\tid: name,\n\t\t\t\tmetadata: revive(metadata)\n\t\t\t});\n\t\t}\n\n\t\tconst d = this._chatAgentService.registerAgentCallback(name, async (prompt, progress, history, token) => {\n\t\t\tconst requestId = Math.random();\n\t\t\tthis._pendingProgress.set(requestId, progress);\n\t\t\ttry {\n\t\t\t\treturn await this._proxy.$invokeAgent(handle, requestId, prompt, { history }, token);\n\t\t\t} finally {\n\t\t\t\tthis._pendingProgress.delete(requestId);\n\t\t\t}\n\t\t});\n\t\tthis._agents.set(handle, d);\n\t}\n\n\tasync $handleProgressChunk(requestId: number, chunk: IChatSlashFragment): Promise<void> {\n\t\tthis._pendingProgress.get(requestId)?.report(revive(chunk));\n\t}\n\n\t$unregisterCommand(handle: number): void {\n\t\tthis._agents.deleteAndDispose(handle);\n\t}\n}\n"]}