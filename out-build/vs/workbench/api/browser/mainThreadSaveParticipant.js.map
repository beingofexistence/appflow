{"version":3,"sources":["vs/workbench/api/browser/mainThreadSaveParticipant.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAchG,MAAM,sBAAsB;QAI3B,YAAY,cAA+B;YAC1C,IAAI,CAAC,CAAC,GAAQ,cAAc,CAAC,QAAQ,CAAC,sBAAG,CAAY,8BAA8B,CAAC,CAAC;QACtF,CAAC;QAED,KAAK,CAAC,WAAW,CAAC,WAAiC,EAAE,GAA2B,EAAE,SAAmC,EAAE,KAAwB;YAE9I,IAAI,CAAC,WAAW,CAAC,eAAe,IAAI,CAAC,IAAA,WAAG,EAAoB,WAAW,CAAC,eAAe,CAAC,EAAE;gBACzF,2CAA2C;gBAC3C,iDAAiD;gBACjD,OAAO,SAAS,CAAC;aACjB;YAED,MAAM,CAAC,GAAG,IAAI,OAAO,CAAM,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBAE9C,UAAU,CACT,GAAG,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,IAAA,cAAQ,EAAC,CAAoB,EAAE,IAAmD,CAAC,CAAC,CAAC,EAC5G,IAAI,CACJ,CAAC;gBACF,IAAI,CAAC,CAAC,CAAM,kBAAkB,CAAC,WAAW,CAAC,QAAQ,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE;oBAC9E,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,EAAE;wBACtC,OAAO,OAAO,CAAC,MAAM,CAAC,IAAI,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;qBACpD;oBACD,OAAO,SAAS,CAAC;gBAClB,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAC1B,CAAC,CAAC,CAAC;YAEH,OAAO,IAAA,WAAG,EAAmB,CAAC,EAAE,KAAK,CAAC,CAAC;QACxC,CAAC;KACD;IAED,0HAA0H;IAEnH,IAAM,IAAI,GAAV,MAAM,IAAI;QAIhB,YACC,cAA+B,EACR,oBAAyB,EACb,CAAqB;YAArB,MAAC,GAAD,CAAC,CAAoB;YAExD,IAAI,CAAC,CAAC,GAA4B,IAAI,CAAC,CAAC,CAAgB,KAAK,CAAC,kBAAkB,CAAC,oBAAoB,CAAC,cAAc,CAAC,sBAAsB,EAAE,cAAc,CAAC,CAAC,CAAC;QAC/J,CAAC;QAED,OAAO;YACN,IAAI,CAAC,CAAC,CAA0B,OAAO,EAAE,CAAC;QAC3C,CAAC;KACD,CAAA;IAfY,oBAAI;mBAAJ,IAAI;QADhB,uBAAI;QAOF,WAAA,mBAAG,CAAA;QACH,WAAA,eAAG,CAAA;OAPO,IAAI,CAehB","file":"mainThreadSaveParticipant.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { shouldSynchronizeModel } from 'vs/editor/common/model';\nimport { localize } from 'vs/nls';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { IProgressStep, IProgress } from 'vs/platform/progress/common/progress';\nimport { extHostCustomer, IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport { ITextFileSaveParticipant, ITextFileService, ITextFileEditorModel } from 'vs/workbench/services/textfile/common/textfiles';\nimport { SaveReason } from 'vs/workbench/common/editor';\nimport { ExtHostContext, ExtHostDocumentSaveParticipantShape } from '../common/extHost.protocol';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { raceCancellationError } from 'vs/base/common/async';\n\nclass ExtHostSaveParticipant implements ITextFileSaveParticipant {\n\n\tprivate readonly _proxy: ExtHostDocumentSaveParticipantShape;\n\n\tconstructor(extHostContext: IExtHostContext) {\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostDocumentSaveParticipant);\n\t}\n\n\tasync participate(editorModel: ITextFileEditorModel, env: { reason: SaveReason }, _progress: IProgress<IProgressStep>, token: CancellationToken): Promise<void> {\n\n\t\tif (!editorModel.textEditorModel || !shouldSynchronizeModel(editorModel.textEditorModel)) {\n\t\t\t// the model never made it to the extension\n\t\t\t// host meaning we cannot participate in its save\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst p = new Promise<any>((resolve, reject) => {\n\n\t\t\tsetTimeout(\n\t\t\t\t() => reject(new Error(localize('timeout.onWillSave', \"Aborted onWillSaveTextDocument-event after 1750ms\"))),\n\t\t\t\t1750\n\t\t\t);\n\t\t\tthis._proxy.$participateInSave(editorModel.resource, env.reason).then(values => {\n\t\t\t\tif (!values.every(success => success)) {\n\t\t\t\t\treturn Promise.reject(new Error('listener failed'));\n\t\t\t\t}\n\t\t\t\treturn undefined;\n\t\t\t}).then(resolve, reject);\n\t\t});\n\n\t\treturn raceCancellationError(p, token);\n\t}\n}\n\n// The save participant can change a model before its saved to support various scenarios like trimming trailing whitespace\n@extHostCustomer\nexport class SaveParticipant {\n\n\tprivate _saveParticipantDisposable: IDisposable;\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t\t@ITextFileService private readonly _textFileService: ITextFileService\n\t) {\n\t\tthis._saveParticipantDisposable = this._textFileService.files.addSaveParticipant(instantiationService.createInstance(ExtHostSaveParticipant, extHostContext));\n\t}\n\n\tdispose(): void {\n\t\tthis._saveParticipantDisposable.dispose();\n\t}\n}\n"]}