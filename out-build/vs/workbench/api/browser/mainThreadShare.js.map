{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadShare.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUzF,IAAM,IAAI,GAAV,MAAM,IAAI;QAMhB,YACC,cAA+B,EAChB,CAAmC;YAAlB,MAAC,GAAD,CAAC,CAAiB;YAL3C,MAAC,GAAW,IAAI,GAAG,EAA0B,CAAC;YAC9C,MAAC,GAAqB,IAAI,GAAG,EAAuB,CAAC;YAM5D,IAAI,CAAC,CAAC,GAAO,cAAc,CAAC,QAAQ,CAAC,sBAAG,CAAY,YAAY,CAAC,CAAC;QACnE,CAAC;QAED,sBAAsB,CAAC,MAAc,EAAE,QAA8B,EAAE,EAAU,EAAE,KAAa,EAAE,QAAgB;YACjH,MAAM,QAAQ,GAAmB;gBAChC,EAAE;gBACF,KAAK;gBACL,QAAQ;gBACR,QAAQ;gBACR,YAAY,EAAE,KAAK,EAAE,IAAoB,EAAE,EAAE;oBAC5C,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,CAAC,CAAK,aAAa,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,kBAAG,EAAsB,CAAC,KAAK,CAAC,CAAC;oBACjG,OAAO,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAG,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;gBACjE,CAAC;aACD,CAAC;YACF,IAAI,CAAC,CAAC,CAAS,GAAG,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;YACrC,MAAM,UAAU,GAAG,IAAI,CAAC,CAAC,CAAY,qBAAqB,CAAC,QAAQ,CAAC,CAAC;YACrE,IAAI,CAAC,CAAC,CAAmB,GAAG,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;QAClD,CAAC;QAED,wBAAwB,CAAC,MAAc;YACtC,IAAI,IAAI,CAAC,CAAC,CAAS,GAAG,CAAC,MAAM,CAAC,EAAE;gBAC/B,IAAI,CAAC,CAAC,CAAS,MAAM,CAAC,MAAM,CAAC,CAAC;aAC9B;YACD,IAAI,IAAI,CAAC,CAAC,CAAmB,GAAG,CAAC,MAAM,CAAC,EAAE;gBACzC,IAAI,CAAC,CAAC,CAAmB,MAAM,CAAC,MAAM,CAAC,CAAC;aACxC;QACF,CAAC;QAED,OAAO;YACN,IAAI,CAAC,CAAC,CAAS,KAAK,EAAE,CAAC;YACvB,IAAA,eAAG,EAAK,IAAI,CAAC,CAAC,CAAmB,MAAM,EAAE,CAAC,CAAC;YAC3C,IAAI,CAAC,CAAC,CAAmB,KAAK,EAAE,CAAC;QAClC,CAAC;KACD,CAAA;IA3CY,oBAAI;mBAAJ,IAAI;QADhB,IAAA,uBAAI,EAAiB,sBAAG,CAAS,eAAe,CAAC;QAS/C,WAAA,YAAI,CAAA;OARM,IAAI,CA2ChB","file":"mainThreadShare.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { IDisposable, dispose } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { ExtHostContext, ExtHostShareShape, IDocumentFilterDto, MainContext, MainThreadShareShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { IShareProvider, IShareService, IShareableItem } from 'vs/workbench/contrib/share/common/share';\nimport { IExtHostContext, extHostNamedCustomer } from 'vs/workbench/services/extensions/common/extHostCustomers';\n\n@extHostNamedCustomer(MainContext.MainThreadShare)\nexport class MainThreadShare implements MainThreadShareShape {\n\n\tprivate readonly proxy: ExtHostShareShape;\n\tprivate providers = new Map<number, IShareProvider>();\n\tprivate providerDisposables = new Map<number, IDisposable>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IShareService private readonly shareService: IShareService\n\t) {\n\t\tthis.proxy = extHostContext.getProxy(ExtHostContext.ExtHostShare);\n\t}\n\n\t$registerShareProvider(handle: number, selector: IDocumentFilterDto[], id: string, label: string, priority: number): void {\n\t\tconst provider: IShareProvider = {\n\t\t\tid,\n\t\t\tlabel,\n\t\t\tselector,\n\t\t\tpriority,\n\t\t\tprovideShare: async (item: IShareableItem) => {\n\t\t\t\tconst result = await this.proxy.$provideShare(handle, item, new CancellationTokenSource().token);\n\t\t\t\treturn typeof result === 'string' ? result : URI.revive(result);\n\t\t\t}\n\t\t};\n\t\tthis.providers.set(handle, provider);\n\t\tconst disposable = this.shareService.registerShareProvider(provider);\n\t\tthis.providerDisposables.set(handle, disposable);\n\t}\n\n\t$unregisterShareProvider(handle: number): void {\n\t\tif (this.providers.has(handle)) {\n\t\t\tthis.providers.delete(handle);\n\t\t}\n\t\tif (this.providerDisposables.has(handle)) {\n\t\t\tthis.providerDisposables.delete(handle);\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.providers.clear();\n\t\tdispose(this.providerDisposables.values());\n\t\tthis.providerDisposables.clear();\n\t}\n}\n"]}