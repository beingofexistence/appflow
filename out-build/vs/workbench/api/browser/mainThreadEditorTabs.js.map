{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadEditorTabs.ts"],"names":[],"mappings":"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","file":"mainThreadEditorTabs.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ExtHostContext, IExtHostEditorTabsShape, MainContext, IEditorTabDto, IEditorTabGroupDto, MainThreadEditorTabsShape, AnyInputDto, TabInputKind, TabModelOperationKind } from 'vs/workbench/api/common/extHost.protocol';\nimport { extHostNamedCustomer, IExtHostContext } from 'vs/workbench/services/extensions/common/extHostCustomers';\nimport { EditorResourceAccessor, GroupModelChangeKind, SideBySideEditor } from 'vs/workbench/common/editor';\nimport { DiffEditorInput } from 'vs/workbench/common/editor/diffEditorInput';\nimport { EditorInput } from 'vs/workbench/common/editor/editorInput';\nimport { columnToEditorGroup, EditorGroupColumn, editorGroupToColumn } from 'vs/workbench/services/editor/common/editorGroupColumn';\nimport { GroupDirection, IEditorGroup, IEditorGroupsService, preferredSideBySideGroupDirection } from 'vs/workbench/services/editor/common/editorGroupsService';\nimport { IEditorsChangeEvent, IEditorService, SIDE_GROUP } from 'vs/workbench/services/editor/common/editorService';\nimport { AbstractTextResourceEditorInput } from 'vs/workbench/common/editor/textResourceEditorInput';\nimport { NotebookEditorInput } from 'vs/workbench/contrib/notebook/common/notebookEditorInput';\nimport { CustomEditorInput } from 'vs/workbench/contrib/customEditor/browser/customEditorInput';\nimport { URI } from 'vs/base/common/uri';\nimport { WebviewInput } from 'vs/workbench/contrib/webviewPanel/browser/webviewEditorInput';\nimport { TerminalEditorInput } from 'vs/workbench/contrib/terminal/browser/terminalEditorInput';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { SideBySideEditorInput } from 'vs/workbench/common/editor/sideBySideEditorInput';\nimport { isEqual } from 'vs/base/common/resources';\nimport { isGroupEditorMoveEvent } from 'vs/workbench/common/editor/editorGroupModel';\nimport { InteractiveEditorInput } from 'vs/workbench/contrib/interactive/browser/interactiveEditorInput';\nimport { MergeEditorInput } from 'vs/workbench/contrib/mergeEditor/browser/mergeEditorInput';\nimport { ILogService } from 'vs/platform/log/common/log';\n\ninterface TabInfo {\n\ttab: IEditorTabDto;\n\tgroup: IEditorGroup;\n\teditorInput: EditorInput;\n}\n@extHostNamedCustomer(MainContext.MainThreadEditorTabs)\nexport class MainThreadEditorTabs implements MainThreadEditorTabsShape {\n\n\tprivate readonly _dispoables = new DisposableStore();\n\tprivate readonly _proxy: IExtHostEditorTabsShape;\n\t// List of all groups and their corresponding tabs, this is **the** model\n\tprivate _tabGroupModel: IEditorTabGroupDto[] = [];\n\t// Lookup table for finding group by id\n\tprivate readonly _groupLookup: Map<number, IEditorTabGroupDto> = new Map();\n\t// Lookup table for finding tab by id\n\tprivate readonly _tabInfoLookup: Map<string, TabInfo> = new Map();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IEditorGroupsService private readonly _editorGroupsService: IEditorGroupsService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IEditorService editorService: IEditorService\n\t) {\n\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostEditorTabs);\n\n\t\t// Main listener which responds to events from the editor service\n\t\tthis._dispoables.add(editorService.onDidEditorsChange((event) => {\n\t\t\ttry {\n\t\t\t\tthis._updateTabsModel(event);\n\t\t\t} catch {\n\t\t\t\tthis._logService.error('Failed to update model, rebuilding');\n\t\t\t\tthis._createTabsModel();\n\t\t\t}\n\t\t}));\n\n\t\t// Structural group changes (add, remove, move, etc) are difficult to patch.\n\t\t// Since they happen infrequently we just rebuild the entire model\n\t\tthis._dispoables.add(this._editorGroupsService.onDidAddGroup(() => this._createTabsModel()));\n\t\tthis._dispoables.add(this._editorGroupsService.onDidRemoveGroup(() => this._createTabsModel()));\n\n\t\t// Once everything is read go ahead and initialize the model\n\t\tthis._editorGroupsService.whenReady.then(() => this._createTabsModel());\n\t}\n\n\tdispose(): void {\n\t\tthis._groupLookup.clear();\n\t\tthis._tabInfoLookup.clear();\n\t\tthis._dispoables.dispose();\n\t}\n\n\t/**\n\t * Creates a tab object with the correct properties\n\t * @param editor The editor input represented by the tab\n\t * @param group The group the tab is in\n\t * @returns A tab object\n\t */\n\tprivate _buildTabObject(group: IEditorGroup, editor: EditorInput, editorIndex: number): IEditorTabDto {\n\t\tconst editorId = editor.editorId;\n\t\tconst tab: IEditorTabDto = {\n\t\t\tid: this._generateTabId(editor, group.id),\n\t\t\tlabel: editor.getName(),\n\t\t\teditorId,\n\t\t\tinput: this._editorInputToDto(editor),\n\t\t\tisPinned: group.isSticky(editorIndex),\n\t\t\tisPreview: !group.isPinned(editorIndex),\n\t\t\tisActive: group.isActive(editor),\n\t\t\tisDirty: editor.isDirty()\n\t\t};\n\t\treturn tab;\n\t}\n\n\tprivate _editorInputToDto(editor: EditorInput): AnyInputDto {\n\n\t\tif (editor instanceof MergeEditorInput) {\n\t\t\treturn {\n\t\t\t\tkind: TabInputKind.TextMergeInput,\n\t\t\t\tbase: editor.base,\n\t\t\t\tinput1: editor.input1.uri,\n\t\t\t\tinput2: editor.input2.uri,\n\t\t\t\tresult: editor.resource\n\t\t\t};\n\t\t}\n\n\t\tif (editor instanceof AbstractTextResourceEditorInput) {\n\t\t\treturn {\n\t\t\t\tkind: TabInputKind.TextInput,\n\t\t\t\turi: editor.resource\n\t\t\t};\n\t\t}\n\n\t\tif (editor instanceof SideBySideEditorInput && !(editor instanceof DiffEditorInput)) {\n\t\t\tconst primaryResource = editor.primary.resource;\n\t\t\tconst secondaryResource = editor.secondary.resource;\n\t\t\t// If side by side editor with same resource on both sides treat it as a singular tab kind\n\t\t\tif (editor.primary instanceof AbstractTextResourceEditorInput\n\t\t\t\t&& editor.secondary instanceof AbstractTextResourceEditorInput\n\t\t\t\t&& isEqual(primaryResource, secondaryResource)\n\t\t\t\t&& primaryResource\n\t\t\t\t&& secondaryResource\n\t\t\t) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: TabInputKind.TextInput,\n\t\t\t\t\turi: primaryResource\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn { kind: TabInputKind.UnknownInput };\n\t\t}\n\n\t\tif (editor instanceof NotebookEditorInput) {\n\t\t\treturn {\n\t\t\t\tkind: TabInputKind.NotebookInput,\n\t\t\t\tnotebookType: editor.viewType,\n\t\t\t\turi: editor.resource\n\t\t\t};\n\t\t}\n\n\t\tif (editor instanceof CustomEditorInput) {\n\t\t\treturn {\n\t\t\t\tkind: TabInputKind.CustomEditorInput,\n\t\t\t\tviewType: editor.viewType,\n\t\t\t\turi: editor.resource,\n\t\t\t};\n\t\t}\n\n\t\tif (editor instanceof WebviewInput) {\n\t\t\treturn {\n\t\t\t\tkind: TabInputKind.WebviewEditorInput,\n\t\t\t\tviewType: editor.viewType\n\t\t\t};\n\t\t}\n\n\t\tif (editor instanceof TerminalEditorInput) {\n\t\t\treturn {\n\t\t\t\tkind: TabInputKind.TerminalEditorInput\n\t\t\t};\n\t\t}\n\n\t\tif (editor instanceof DiffEditorInput) {\n\t\t\tif (editor.modified instanceof AbstractTextResourceEditorInput && editor.original instanceof AbstractTextResourceEditorInput) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: TabInputKind.TextDiffInput,\n\t\t\t\t\tmodified: editor.modified.resource,\n\t\t\t\t\toriginal: editor.original.resource\n\t\t\t\t};\n\t\t\t}\n\t\t\tif (editor.modified instanceof NotebookEditorInput && editor.original instanceof NotebookEditorInput) {\n\t\t\t\treturn {\n\t\t\t\t\tkind: TabInputKind.NotebookDiffInput,\n\t\t\t\t\tnotebookType: editor.original.viewType,\n\t\t\t\t\tmodified: editor.modified.resource,\n\t\t\t\t\toriginal: editor.original.resource\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\n\t\tif (editor instanceof InteractiveEditorInput) {\n\t\t\treturn {\n\t\t\t\tkind: TabInputKind.InteractiveEditorInput,\n\t\t\t\turi: editor.resource,\n\t\t\t\tinputBoxUri: editor.inputResource\n\t\t\t};\n\t\t}\n\n\t\treturn { kind: TabInputKind.UnknownInput };\n\t}\n\n\t/**\n\t * Generates a unique id for a tab\n\t * @param editor The editor input\n\t * @param groupId The group id\n\t * @returns A unique identifier for a specific tab\n\t */\n\tprivate _generateTabId(editor: EditorInput, groupId: number) {\n\t\tlet resourceString: string | undefined;\n\t\t// Properly get the resource and account for side by side editors\n\t\tconst resource = EditorResourceAccessor.getCanonicalUri(editor, { supportSideBySide: SideBySideEditor.BOTH });\n\t\tif (resource instanceof URI) {\n\t\t\tresourceString = resource.toString();\n\t\t} else {\n\t\t\tresourceString = `${resource?.primary?.toString()}-${resource?.secondary?.toString()}`;\n\t\t}\n\t\treturn `${groupId}~${editor.editorId}-${editor.typeId}-${resourceString} `;\n\t}\n\n\t/**\n\t * Called whenever a group activates, updates the model by marking the group as active an notifies the extension host\n\t */\n\tprivate _onDidGroupActivate() {\n\t\tconst activeGroupId = this._editorGroupsService.activeGroup.id;\n\t\tconst activeGroup = this._groupLookup.get(activeGroupId);\n\t\tif (activeGroup) {\n\t\t\t// Ok not to loop as exthost accepts last active group\n\t\t\tactiveGroup.isActive = true;\n\t\t\tthis._proxy.$acceptTabGroupUpdate(activeGroup);\n\t\t}\n\t}\n\n\t/**\n\t * Called when the tab label changes\n\t * @param groupId The id of the group the tab exists in\n\t * @param editorInput The editor input represented by the tab\n\t */\n\tprivate _onDidTabLabelChange(groupId: number, editorInput: EditorInput, editorIndex: number) {\n\t\tconst tabId = this._generateTabId(editorInput, groupId);\n\t\tconst tabInfo = this._tabInfoLookup.get(tabId);\n\t\t// If tab is found patch, else rebuild\n\t\tif (tabInfo) {\n\t\t\ttabInfo.tab.label = editorInput.getName();\n\t\t\tthis._proxy.$acceptTabOperation({\n\t\t\t\tgroupId,\n\t\t\t\tindex: editorIndex,\n\t\t\t\ttabDto: tabInfo.tab,\n\t\t\t\tkind: TabModelOperationKind.TAB_UPDATE\n\t\t\t});\n\t\t} else {\n\t\t\tthis._logService.error('Invalid model for label change, rebuilding');\n\t\t\tthis._createTabsModel();\n\t\t}\n\t}\n\n\t/**\n\t * Called when a new tab is opened\n\t * @param groupId The id of the group the tab is being created in\n\t * @param editorInput The editor input being opened\n\t * @param editorIndex The index of the editor within that group\n\t */\n\tprivate _onDidTabOpen(groupId: number, editorInput: EditorInput, editorIndex: number) {\n\t\tconst group = this._editorGroupsService.getGroup(groupId);\n\t\t// Even if the editor service knows about the group the group might not exist yet in our model\n\t\tconst groupInModel = this._groupLookup.get(groupId) !== undefined;\n\t\t// Means a new group was likely created so we rebuild the model\n\t\tif (!group || !groupInModel) {\n\t\t\tthis._createTabsModel();\n\t\t\treturn;\n\t\t}\n\t\tconst tabs = this._groupLookup.get(groupId)?.tabs;\n\t\tif (!tabs) {\n\t\t\treturn;\n\t\t}\n\t\t// Splice tab into group at index editorIndex\n\t\tconst tabObject = this._buildTabObject(group, editorInput, editorIndex);\n\t\ttabs.splice(editorIndex, 0, tabObject);\n\t\t// Update lookup\n\t\tthis._tabInfoLookup.set(this._generateTabId(editorInput, groupId), { group, editorInput, tab: tabObject });\n\n\t\tthis._proxy.$acceptTabOperation({\n\t\t\tgroupId,\n\t\t\tindex: editorIndex,\n\t\t\ttabDto: tabObject,\n\t\t\tkind: TabModelOperationKind.TAB_OPEN\n\t\t});\n\t}\n\n\t/**\n\t * Called when a tab is closed\n\t * @param groupId The id of the group the tab is being removed from\n\t * @param editorIndex The index of the editor within that group\n\t */\n\tprivate _onDidTabClose(groupId: number, editorIndex: number) {\n\t\tconst group = this._editorGroupsService.getGroup(groupId);\n\t\tconst tabs = this._groupLookup.get(groupId)?.tabs;\n\t\t// Something is wrong with the model state so we rebuild\n\t\tif (!group || !tabs) {\n\t\t\tthis._createTabsModel();\n\t\t\treturn;\n\t\t}\n\t\t// Splice tab into group at index editorIndex\n\t\tconst removedTab = tabs.splice(editorIndex, 1);\n\n\t\t// Index must no longer be valid so we return prematurely\n\t\tif (removedTab.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Update lookup\n\t\tthis._tabInfoLookup.delete(removedTab[0]?.id ?? '');\n\n\t\tthis._proxy.$acceptTabOperation({\n\t\t\tgroupId,\n\t\t\tindex: editorIndex,\n\t\t\ttabDto: removedTab[0],\n\t\t\tkind: TabModelOperationKind.TAB_CLOSE\n\t\t});\n\t}\n\n\t/**\n\t * Called when the active tab changes\n\t * @param groupId The id of the group the tab is contained in\n\t * @param editorIndex The index of the tab\n\t */\n\tprivate _onDidTabActiveChange(groupId: number, editorIndex: number) {\n\t\t// TODO @lramos15 use the tab lookup here if possible. Do we have an editor input?!\n\t\tconst tabs = this._groupLookup.get(groupId)?.tabs;\n\t\tif (!tabs) {\n\t\t\treturn;\n\t\t}\n\t\tconst activeTab = tabs[editorIndex];\n\t\t// No need to loop over as the exthost uses the most recently marked active tab\n\t\tactiveTab.isActive = true;\n\t\t// Send DTO update to the exthost\n\t\tthis._proxy.$acceptTabOperation({\n\t\t\tgroupId,\n\t\t\tindex: editorIndex,\n\t\t\ttabDto: activeTab,\n\t\t\tkind: TabModelOperationKind.TAB_UPDATE\n\t\t});\n\n\t}\n\n\t/**\n\t * Called when the dirty indicator on the tab changes\n\t * @param groupId The id of the group the tab is in\n\t * @param editorIndex The index of the tab\n\t * @param editor The editor input represented by the tab\n\t */\n\tprivate _onDidTabDirty(groupId: number, editorIndex: number, editor: EditorInput) {\n\t\tconst tabId = this._generateTabId(editor, groupId);\n\t\tconst tabInfo = this._tabInfoLookup.get(tabId);\n\t\t// Something wrong with the model state so we rebuild\n\t\tif (!tabInfo) {\n\t\t\tthis._logService.error('Invalid model for dirty change, rebuilding');\n\t\t\tthis._createTabsModel();\n\t\t\treturn;\n\t\t}\n\t\ttabInfo.tab.isDirty = editor.isDirty();\n\t\tthis._proxy.$acceptTabOperation({\n\t\t\tgroupId,\n\t\t\tindex: editorIndex,\n\t\t\ttabDto: tabInfo.tab,\n\t\t\tkind: TabModelOperationKind.TAB_UPDATE\n\t\t});\n\t}\n\n\t/**\n\t * Called when the tab is pinned/unpinned\n\t * @param groupId The id of the group the tab is in\n\t * @param editorIndex The index of the tab\n\t * @param editor The editor input represented by the tab\n\t */\n\tprivate _onDidTabPinChange(groupId: number, editorIndex: number, editor: EditorInput) {\n\t\tconst tabId = this._generateTabId(editor, groupId);\n\t\tconst tabInfo = this._tabInfoLookup.get(tabId);\n\t\tconst group = tabInfo?.group;\n\t\tconst tab = tabInfo?.tab;\n\t\t// Something wrong with the model state so we rebuild\n\t\tif (!group || !tab) {\n\t\t\tthis._logService.error('Invalid model for sticky change, rebuilding');\n\t\t\tthis._createTabsModel();\n\t\t\treturn;\n\t\t}\n\t\t// Whether or not the tab has the pin icon (internally it's called sticky)\n\t\ttab.isPinned = group.isSticky(editorIndex);\n\t\tthis._proxy.$acceptTabOperation({\n\t\t\tgroupId,\n\t\t\tindex: editorIndex,\n\t\t\ttabDto: tab,\n\t\t\tkind: TabModelOperationKind.TAB_UPDATE\n\t\t});\n\t}\n\n\t/**\n * Called when the tab is preview / unpreviewed\n * @param groupId The id of the group the tab is in\n * @param editorIndex The index of the tab\n * @param editor The editor input represented by the tab\n */\n\tprivate _onDidTabPreviewChange(groupId: number, editorIndex: number, editor: EditorInput) {\n\t\tconst tabId = this._generateTabId(editor, groupId);\n\t\tconst tabInfo = this._tabInfoLookup.get(tabId);\n\t\tconst group = tabInfo?.group;\n\t\tconst tab = tabInfo?.tab;\n\t\t// Something wrong with the model state so we rebuild\n\t\tif (!group || !tab) {\n\t\t\tthis._logService.error('Invalid model for sticky change, rebuilding');\n\t\t\tthis._createTabsModel();\n\t\t\treturn;\n\t\t}\n\t\t// Whether or not the tab has the pin icon (internally it's called pinned)\n\t\ttab.isPreview = !group.isPinned(editorIndex);\n\t\tthis._proxy.$acceptTabOperation({\n\t\t\tkind: TabModelOperationKind.TAB_UPDATE,\n\t\t\tgroupId,\n\t\t\ttabDto: tab,\n\t\t\tindex: editorIndex\n\t\t});\n\t}\n\n\tprivate _onDidTabMove(groupId: number, editorIndex: number, oldEditorIndex: number, editor: EditorInput) {\n\t\tconst tabs = this._groupLookup.get(groupId)?.tabs;\n\t\t// Something wrong with the model state so we rebuild\n\t\tif (!tabs) {\n\t\t\tthis._logService.error('Invalid model for move change, rebuilding');\n\t\t\tthis._createTabsModel();\n\t\t\treturn;\n\t\t}\n\n\t\t// Move tab from old index to new index\n\t\tconst removedTab = tabs.splice(oldEditorIndex, 1);\n\t\tif (removedTab.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\ttabs.splice(editorIndex, 0, removedTab[0]);\n\n\t\t// Notify exthost of move\n\t\tthis._proxy.$acceptTabOperation({\n\t\t\tkind: TabModelOperationKind.TAB_MOVE,\n\t\t\tgroupId,\n\t\t\ttabDto: removedTab[0],\n\t\t\tindex: editorIndex,\n\t\t\toldIndex: oldEditorIndex\n\t\t});\n\t}\n\n\t/**\n\t * Builds the model from scratch based on the current state of the editor service.\n\t */\n\tprivate _createTabsModel(): void {\n\t\tthis._tabGroupModel = [];\n\t\tthis._groupLookup.clear();\n\t\tthis._tabInfoLookup.clear();\n\t\tlet tabs: IEditorTabDto[] = [];\n\t\tfor (const group of this._editorGroupsService.groups) {\n\t\t\tconst currentTabGroupModel: IEditorTabGroupDto = {\n\t\t\t\tgroupId: group.id,\n\t\t\t\tisActive: group.id === this._editorGroupsService.activeGroup.id,\n\t\t\t\tviewColumn: editorGroupToColumn(this._editorGroupsService, group),\n\t\t\t\ttabs: []\n\t\t\t};\n\t\t\tgroup.editors.forEach((editor, editorIndex) => {\n\t\t\t\tconst tab = this._buildTabObject(group, editor, editorIndex);\n\t\t\t\ttabs.push(tab);\n\t\t\t\t// Add information about the tab to the lookup\n\t\t\t\tthis._tabInfoLookup.set(this._generateTabId(editor, group.id), {\n\t\t\t\t\tgroup,\n\t\t\t\t\ttab,\n\t\t\t\t\teditorInput: editor\n\t\t\t\t});\n\t\t\t});\n\t\t\tcurrentTabGroupModel.tabs = tabs;\n\t\t\tthis._tabGroupModel.push(currentTabGroupModel);\n\t\t\tthis._groupLookup.set(group.id, currentTabGroupModel);\n\t\t\ttabs = [];\n\t\t}\n\t\t// notify the ext host of the new model\n\t\tthis._proxy.$acceptEditorTabModel(this._tabGroupModel);\n\t}\n\n\t// TODOD @lramos15 Remove this after done finishing the tab model code\n\t// private _eventToString(event: IEditorsChangeEvent | IEditorsMoveEvent): string {\n\t// \tlet eventString = '';\n\t// \tswitch (event.kind) {\n\t// \t\tcase GroupModelChangeKind.GROUP_INDEX: eventString += 'GROUP_INDEX'; break;\n\t// \t\tcase GroupModelChangeKind.EDITOR_ACTIVE: eventString += 'EDITOR_ACTIVE'; break;\n\t// \t\tcase GroupModelChangeKind.EDITOR_PIN: eventString += 'EDITOR_PIN'; break;\n\t// \t\tcase GroupModelChangeKind.EDITOR_OPEN: eventString += 'EDITOR_OPEN'; break;\n\t// \t\tcase GroupModelChangeKind.EDITOR_CLOSE: eventString += 'EDITOR_CLOSE'; break;\n\t// \t\tcase GroupModelChangeKind.EDITOR_MOVE: eventString += 'EDITOR_MOVE'; break;\n\t// \t\tcase GroupModelChangeKind.EDITOR_LABEL: eventString += 'EDITOR_LABEL'; break;\n\t// \t\tcase GroupModelChangeKind.GROUP_ACTIVE: eventString += 'GROUP_ACTIVE'; break;\n\t// \t\tcase GroupModelChangeKind.GROUP_LOCKED: eventString += 'GROUP_LOCKED'; break;\n\t// \t\tcase GroupModelChangeKind.EDITOR_DIRTY: eventString += 'EDITOR_DIRTY'; break;\n\t// \t\tcase GroupModelChangeKind.EDITOR_STICKY: eventString += 'EDITOR_STICKY'; break;\n\t// \t\tdefault: eventString += `UNKNOWN: ${event.kind}`; break;\n\t// \t}\n\t// \treturn eventString;\n\t// }\n\n\t/**\n\t * The main handler for the tab events\n\t * @param events The list of events to process\n\t */\n\tprivate _updateTabsModel(changeEvent: IEditorsChangeEvent): void {\n\t\tconst event = changeEvent.event;\n\t\tconst groupId = changeEvent.groupId;\n\t\tswitch (event.kind) {\n\t\t\tcase GroupModelChangeKind.GROUP_ACTIVE:\n\t\t\t\tif (groupId === this._editorGroupsService.activeGroup.id) {\n\t\t\t\t\tthis._onDidGroupActivate();\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\tcase GroupModelChangeKind.EDITOR_LABEL:\n\t\t\t\tif (event.editor !== undefined && event.editorIndex !== undefined) {\n\t\t\t\t\tthis._onDidTabLabelChange(groupId, event.editor, event.editorIndex);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase GroupModelChangeKind.EDITOR_OPEN:\n\t\t\t\tif (event.editor !== undefined && event.editorIndex !== undefined) {\n\t\t\t\t\tthis._onDidTabOpen(groupId, event.editor, event.editorIndex);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase GroupModelChangeKind.EDITOR_CLOSE:\n\t\t\t\tif (event.editorIndex !== undefined) {\n\t\t\t\t\tthis._onDidTabClose(groupId, event.editorIndex);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase GroupModelChangeKind.EDITOR_ACTIVE:\n\t\t\t\tif (event.editorIndex !== undefined) {\n\t\t\t\t\tthis._onDidTabActiveChange(groupId, event.editorIndex);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase GroupModelChangeKind.EDITOR_DIRTY:\n\t\t\t\tif (event.editorIndex !== undefined && event.editor !== undefined) {\n\t\t\t\t\tthis._onDidTabDirty(groupId, event.editorIndex, event.editor);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase GroupModelChangeKind.EDITOR_STICKY:\n\t\t\t\tif (event.editorIndex !== undefined && event.editor !== undefined) {\n\t\t\t\t\tthis._onDidTabPinChange(groupId, event.editorIndex, event.editor);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase GroupModelChangeKind.EDITOR_PIN:\n\t\t\t\tif (event.editorIndex !== undefined && event.editor !== undefined) {\n\t\t\t\t\tthis._onDidTabPreviewChange(groupId, event.editorIndex, event.editor);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tcase GroupModelChangeKind.EDITOR_MOVE:\n\t\t\t\tif (isGroupEditorMoveEvent(event) && event.editor && event.editorIndex !== undefined && event.oldEditorIndex !== undefined) {\n\t\t\t\t\tthis._onDidTabMove(groupId, event.editorIndex, event.oldEditorIndex, event.editor);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\tdefault:\n\t\t\t\t// If it's not an optimized case we rebuild the tabs model from scratch\n\t\t\t\tthis._createTabsModel();\n\t\t}\n\t}\n\t//#region Messages received from Ext Host\n\t$moveTab(tabId: string, index: number, viewColumn: EditorGroupColumn, preserveFocus?: boolean): void {\n\t\tconst groupId = columnToEditorGroup(this._editorGroupsService, this._configurationService, viewColumn);\n\t\tconst tabInfo = this._tabInfoLookup.get(tabId);\n\t\tconst tab = tabInfo?.tab;\n\t\tif (!tab) {\n\t\t\tthrow new Error(`Attempted to close tab with id ${tabId} which does not exist`);\n\t\t}\n\t\tlet targetGroup: IEditorGroup | undefined;\n\t\tconst sourceGroup = this._editorGroupsService.getGroup(tabInfo.group.id);\n\t\tif (!sourceGroup) {\n\t\t\treturn;\n\t\t}\n\t\t// If group index is out of bounds then we make a new one that's to the right of the last group\n\t\tif (this._groupLookup.get(groupId) === undefined) {\n\t\t\tlet direction = GroupDirection.RIGHT;\n\t\t\t// Make sure we respect the user's preferred side direction\n\t\t\tif (viewColumn === SIDE_GROUP) {\n\t\t\t\tdirection = preferredSideBySideGroupDirection(this._configurationService);\n\t\t\t}\n\t\t\ttargetGroup = this._editorGroupsService.addGroup(this._editorGroupsService.groups[this._editorGroupsService.groups.length - 1], direction);\n\t\t} else {\n\t\t\ttargetGroup = this._editorGroupsService.getGroup(groupId);\n\t\t}\n\t\tif (!targetGroup) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Similar logic to if index is out of bounds we place it at the end\n\t\tif (index < 0 || index > targetGroup.editors.length) {\n\t\t\tindex = targetGroup.editors.length;\n\t\t}\n\t\t// Find the correct EditorInput using the tab info\n\t\tconst editorInput = tabInfo?.editorInput;\n\t\tif (!editorInput) {\n\t\t\treturn;\n\t\t}\n\t\t// Move the editor to the target group\n\t\tsourceGroup.moveEditor(editorInput, targetGroup, { index, preserveFocus });\n\t\treturn;\n\t}\n\n\tasync $closeTab(tabIds: string[], preserveFocus?: boolean): Promise<boolean> {\n\t\tconst groups: Map<IEditorGroup, EditorInput[]> = new Map();\n\t\tfor (const tabId of tabIds) {\n\t\t\tconst tabInfo = this._tabInfoLookup.get(tabId);\n\t\t\tconst tab = tabInfo?.tab;\n\t\t\tconst group = tabInfo?.group;\n\t\t\tconst editorTab = tabInfo?.editorInput;\n\t\t\t// If not found skip\n\t\t\tif (!group || !tab || !tabInfo || !editorTab) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst groupEditors = groups.get(group);\n\t\t\tif (!groupEditors) {\n\t\t\t\tgroups.set(group, [editorTab]);\n\t\t\t} else {\n\t\t\t\tgroupEditors.push(editorTab);\n\t\t\t}\n\t\t}\n\t\t// Loop over keys of the groups map and call closeEditors\n\t\tconst results: boolean[] = [];\n\t\tfor (const [group, editors] of groups) {\n\t\t\tresults.push(await group.closeEditors(editors, { preserveFocus }));\n\t\t}\n\t\t// TODO @jrieken This isn't quite right how can we say true for some but not others?\n\t\treturn results.every(result => result);\n\t}\n\n\tasync $closeGroup(groupIds: number[], preserveFocus?: boolean): Promise<boolean> {\n\t\tconst groupCloseResults: boolean[] = [];\n\t\tfor (const groupId of groupIds) {\n\t\t\tconst group = this._editorGroupsService.getGroup(groupId);\n\t\t\tif (group) {\n\t\t\t\tgroupCloseResults.push(await group.closeAllEditors());\n\t\t\t\t// Make sure group is empty but still there before removing it\n\t\t\t\tif (group.count === 0 && this._editorGroupsService.getGroup(group.id)) {\n\t\t\t\t\tthis._editorGroupsService.removeGroup(group);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn groupCloseResults.every(result => result);\n\t}\n\t//#endregion\n}\n"]}