{"version":3,"sources":["file:///workspace/appflow/src/vs/workbench/api/browser/mainThreadChat.ts"],"names":[],"mappings":"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","file":"mainThreadChat.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DeferredPromise } from 'vs/base/common/async';\nimport { Emitter } from 'vs/base/common/event';\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\nimport { Disposable, DisposableMap } from 'vs/base/common/lifecycle';\nimport { revive } from 'vs/base/common/marshalling';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { ExtHostChatShape, ExtHostContext, IChatRequestDto, IChatResponseProgressDto, MainContext, MainThreadChatShape } from 'vs/workbench/api/common/extHost.protocol';\nimport { IChatWidgetService } from 'vs/workbench/contrib/chat/browser/chat';\nimport { IChatContributionService } from 'vs/workbench/contrib/chat/common/chatContributionService';\nimport { isCompleteInteractiveProgressTreeData } from 'vs/workbench/contrib/chat/common/chatModel';\nimport { IChat, IChatDynamicRequest, IChatProgress, IChatRequest, IChatResponse, IChatResponseProgressFileTreeData, IChatService } from 'vs/workbench/contrib/chat/common/chatService';\nimport { IExtHostContext, extHostNamedCustomer } from 'vs/workbench/services/extensions/common/extHostCustomers';\n\n@extHostNamedCustomer(MainContext.MainThreadChat)\nexport class MainThreadChat extends Disposable implements MainThreadChatShape {\n\n\tprivate readonly _providerRegistrations = this._register(new DisposableMap<number>());\n\tprivate readonly _activeRequestProgressCallbacks = new Map<string, (progress: IChatProgress) => (DeferredPromise<string | IMarkdownString> | void)>();\n\tprivate readonly _stateEmitters = new Map<number, Emitter<any>>();\n\n\tprivate readonly _proxy: ExtHostChatShape;\n\n\tprivate _responsePartHandlePool = 0;\n\tprivate readonly _activeResponsePartPromises = new Map<string, DeferredPromise<string | IMarkdownString | { treeData: IChatResponseProgressFileTreeData }>>();\n\n\tconstructor(\n\t\textHostContext: IExtHostContext,\n\t\t@IChatService private readonly _chatService: IChatService,\n\t\t@IChatWidgetService private readonly _chatWidgetService: IChatWidgetService,\n\t\t@IChatContributionService private readonly chatContribService: IChatContributionService,\n\t) {\n\t\tsuper();\n\t\tthis._proxy = extHostContext.getProxy(ExtHostContext.ExtHostChat);\n\n\t\tthis._register(this._chatService.onDidPerformUserAction(e => {\n\t\t\tthis._proxy.$onDidPerformUserAction(e);\n\t\t}));\n\t}\n\n\t$transferChatSession(sessionId: number, toWorkspace: UriComponents): void {\n\t\tconst sessionIdStr = this._chatService.getSessionId(sessionId);\n\t\tif (!sessionIdStr) {\n\t\t\tthrow new Error(`Failed to transfer session. Unknown session provider ID: ${sessionId}`);\n\t\t}\n\n\t\tconst widget = this._chatWidgetService.getWidgetBySessionId(sessionIdStr);\n\t\tconst inputValue = widget?.inputEditor.getValue() ?? '';\n\t\tthis._chatService.transferChatSession({ sessionId: sessionIdStr, inputValue: inputValue }, URI.revive(toWorkspace));\n\t}\n\n\tasync $registerChatProvider(handle: number, id: string): Promise<void> {\n\t\tconst registration = this.chatContribService.registeredProviders.find(staticProvider => staticProvider.id === id);\n\t\tif (!registration) {\n\t\t\tthrow new Error(`Provider ${id} must be declared in the package.json.`);\n\t\t}\n\n\t\tconst unreg = this._chatService.registerProvider({\n\t\t\tid,\n\t\t\tdisplayName: registration.label,\n\t\t\tprepareSession: async (initialState, token) => {\n\t\t\t\tconst session = await this._proxy.$prepareChat(handle, initialState, token);\n\t\t\t\tif (!session) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\tconst responderAvatarIconUri = session.responderAvatarIconUri ?\n\t\t\t\t\tURI.revive(session.responderAvatarIconUri) :\n\t\t\t\t\tregistration.extensionIcon;\n\n\t\t\t\tconst emitter = new Emitter<any>();\n\t\t\t\tthis._stateEmitters.set(session.id, emitter);\n\t\t\t\treturn <IChat>{\n\t\t\t\t\tid: session.id,\n\t\t\t\t\trequesterUsername: session.requesterUsername,\n\t\t\t\t\trequesterAvatarIconUri: URI.revive(session.requesterAvatarIconUri),\n\t\t\t\t\tresponderUsername: session.responderUsername,\n\t\t\t\t\tresponderAvatarIconUri,\n\t\t\t\t\tinputPlaceholder: session.inputPlaceholder,\n\t\t\t\t\tonDidChangeState: emitter.event,\n\t\t\t\t\tdispose: () => {\n\t\t\t\t\t\temitter.dispose();\n\t\t\t\t\t\tthis._stateEmitters.delete(session.id);\n\t\t\t\t\t\tthis._proxy.$releaseSession(session.id);\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t},\n\t\t\tresolveRequest: async (session, context, token) => {\n\t\t\t\tconst dto = await this._proxy.$resolveRequest(handle, session.id, context, token);\n\t\t\t\treturn <IChatRequest>{\n\t\t\t\t\tsession,\n\t\t\t\t\t...dto\n\t\t\t\t};\n\t\t\t},\n\t\t\tprovideReply: async (request, progress, token) => {\n\t\t\t\tconst id = `${handle}_${request.session.id}`;\n\t\t\t\tthis._activeRequestProgressCallbacks.set(id, progress);\n\t\t\t\ttry {\n\t\t\t\t\tconst requestDto: IChatRequestDto = {\n\t\t\t\t\t\tmessage: request.message,\n\t\t\t\t\t\tvariables: request.variables\n\t\t\t\t\t};\n\t\t\t\t\tconst dto = await this._proxy.$provideReply(handle, request.session.id, requestDto, token);\n\t\t\t\t\treturn <IChatResponse>{\n\t\t\t\t\t\tsession: request.session,\n\t\t\t\t\t\t...dto\n\t\t\t\t\t};\n\t\t\t\t} finally {\n\t\t\t\t\tthis._activeRequestProgressCallbacks.delete(id);\n\t\t\t\t}\n\t\t\t},\n\t\t\tprovideWelcomeMessage: (token) => {\n\t\t\t\treturn this._proxy.$provideWelcomeMessage(handle, token);\n\t\t\t},\n\t\t\tprovideSlashCommands: (session, token) => {\n\t\t\t\treturn this._proxy.$provideSlashCommands(handle, session.id, token);\n\t\t\t},\n\t\t\tprovideFollowups: (session, token) => {\n\t\t\t\treturn this._proxy.$provideFollowups(handle, session.id, token);\n\t\t\t},\n\t\t\tremoveRequest: (session, requestId) => {\n\t\t\t\treturn this._proxy.$removeRequest(handle, session.id, requestId);\n\t\t\t}\n\t\t});\n\n\t\tthis._providerRegistrations.set(handle, unreg);\n\t}\n\n\tasync $acceptResponseProgress(handle: number, sessionId: number, progress: IChatResponseProgressDto, responsePartHandle?: number): Promise<number | void> {\n\t\tconst id = `${handle}_${sessionId}`;\n\n\t\tif ('placeholder' in progress) {\n\t\t\tconst responsePartId = `${id}_${++this._responsePartHandlePool}`;\n\t\t\tconst deferredContentPromise = new DeferredPromise<string | IMarkdownString | { treeData: IChatResponseProgressFileTreeData }>();\n\t\t\tthis._activeResponsePartPromises.set(responsePartId, deferredContentPromise);\n\t\t\tthis._activeRequestProgressCallbacks.get(id)?.({ ...progress, resolvedContent: deferredContentPromise.p });\n\t\t\treturn this._responsePartHandlePool;\n\t\t} else if (responsePartHandle) {\n\t\t\t// Complete an existing deferred promise with resolved content\n\t\t\tconst responsePartId = `${id}_${responsePartHandle}`;\n\t\t\tconst deferredContentPromise = this._activeResponsePartPromises.get(responsePartId);\n\t\t\tif (deferredContentPromise && isCompleteInteractiveProgressTreeData(progress)) {\n\t\t\t\tconst withRevivedUris = revive<{ treeData: IChatResponseProgressFileTreeData }>(progress);\n\t\t\t\tdeferredContentPromise.complete(withRevivedUris);\n\t\t\t\tthis._activeResponsePartPromises.delete(responsePartId);\n\t\t\t} else if (deferredContentPromise && 'content' in progress) {\n\t\t\t\tdeferredContentPromise.complete(progress.content);\n\t\t\t\tthis._activeResponsePartPromises.delete(responsePartId);\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// No need to support standalone tree data that's not attached to a placeholder in API\n\t\tif (isCompleteInteractiveProgressTreeData(progress)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._activeRequestProgressCallbacks.get(id)?.(progress);\n\t}\n\n\tasync $acceptChatState(sessionId: number, state: any): Promise<void> {\n\t\tthis._stateEmitters.get(sessionId)?.fire(state);\n\t}\n\n\t$addRequest(context: any): void {\n\t\tthis._chatService.addRequest(context);\n\t}\n\n\tasync $sendRequestToProvider(providerId: string, message: IChatDynamicRequest): Promise<void> {\n\t\tconst widget = await this._chatWidgetService.revealViewForProvider(providerId);\n\t\tif (widget && widget.viewModel) {\n\t\t\tthis._chatService.sendRequestToProvider(widget.viewModel.sessionId, message);\n\t\t}\n\t}\n\n\tasync $unregisterChatProvider(handle: number): Promise<void> {\n\t\tthis._providerRegistrations.deleteAndDispose(handle);\n\t}\n}\n"]}