{"version":3,"sources":["file:///workspace/appflow/src/vs/nls.ts","vs/nls.ts"],"names":[],"mappings":"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","file":"nls.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nlet isPseudo = (typeof document !== 'undefined' && document.location && document.location.hash.indexOf('pseudo=true') >= 0);\nconst DEFAULT_TAG = 'i-default';\n\ninterface INLSPluginConfig {\n\tavailableLanguages?: INLSPluginConfigAvailableLanguages;\n\tloadBundle?: BundleLoader;\n\ttranslationServiceUrl?: string;\n}\n\nexport interface INLSPluginConfigAvailableLanguages {\n\t'*'?: string;\n\t[module: string]: string | undefined;\n}\n\ninterface BundleLoader {\n\t(bundle: string, locale: string | null, cb: (err: Error, messages: string[] | IBundledStrings) => void): void;\n}\n\ninterface IBundledStrings {\n\t[moduleId: string]: string[];\n}\n\nexport interface ILocalizeInfo {\n\tkey: string;\n\tcomment: string[];\n}\n\ninterface ILocalizeFunc {\n\t(info: ILocalizeInfo, message: string, ...args: (string | number | boolean | undefined | null)[]): string;\n\t(key: string, message: string, ...args: (string | number | boolean | undefined | null)[]): string;\n}\n\ninterface IBoundLocalizeFunc {\n\t(idx: number, defaultValue: null): string;\n}\n\ninterface IConsumerAPI {\n\tlocalize: ILocalizeFunc | IBoundLocalizeFunc;\n\tgetConfiguredDefaultLocale(stringFromLocalizeCall: string): string | undefined;\n}\n\nfunction _format(message: string, args: (string | number | boolean | undefined | null)[]): string {\n\tlet result: string;\n\n\tif (args.length === 0) {\n\t\tresult = message;\n\t} else {\n\t\tresult = message.replace(/\\{(\\d+)\\}/g, (match, rest) => {\n\t\t\tconst index = rest[0];\n\t\t\tconst arg = args[index];\n\t\t\tlet result = match;\n\t\t\tif (typeof arg === 'string') {\n\t\t\t\tresult = arg;\n\t\t\t} else if (typeof arg === 'number' || typeof arg === 'boolean' || arg === void 0 || arg === null) {\n\t\t\t\tresult = String(arg);\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tif (isPseudo) {\n\t\t// FF3B and FF3D is the Unicode zenkaku representation for [ and ]\n\t\tresult = '\\uFF3B' + result.replace(/[aouei]/g, '$&$&') + '\\uFF3D';\n\t}\n\n\treturn result;\n}\n\nfunction findLanguageForModule(config: INLSPluginConfigAvailableLanguages, name: string) {\n\tlet result = config[name];\n\tif (result) {\n\t\treturn result;\n\t}\n\tresult = config['*'];\n\tif (result) {\n\t\treturn result;\n\t}\n\treturn null;\n}\n\nfunction endWithSlash(path: string): string {\n\tif (path.charAt(path.length - 1) === '/') {\n\t\treturn path;\n\t}\n\treturn path + '/';\n}\n\nasync function getMessagesFromTranslationsService(translationServiceUrl: string, language: string, name: string): Promise<string[] | IBundledStrings> {\n\tconst url = endWithSlash(translationServiceUrl) + endWithSlash(language) + 'vscode/' + endWithSlash(name);\n\tconst res = await fetch(url);\n\tif (res.ok) {\n\t\tconst messages = await res.json() as string[] | IBundledStrings;\n\t\treturn messages;\n\t}\n\tthrow new Error(`${res.status} - ${res.statusText}`);\n}\n\nfunction createScopedLocalize(scope: string[]): IBoundLocalizeFunc {\n\treturn function (idx: number, defaultValue: null) {\n\t\tconst restArgs = Array.prototype.slice.call(arguments, 2);\n\t\treturn _format(scope[idx], restArgs);\n\t};\n}\n\n/**\n * Localize a message.\n *\n * `message` can contain `{n}` notation where it is replaced by the nth value in `...args`\n * For example, `localize({ key: 'sayHello', comment: ['Welcomes user'] }, 'hello {0}', name)`\n */\nexport function localize(info: ILocalizeInfo, message: string, ...args: (string | number | boolean | undefined | null)[]): string;\n\n/**\n * Localize a message.\n *\n * `message` can contain `{n}` notation where it is replaced by the nth value in `...args`\n * For example, `localize('sayHello', 'hello {0}', name)`\n */\nexport function localize(key: string, message: string, ...args: (string | number | boolean | undefined | null)[]): string;\n\n/**\n * @skipMangle\n */\nexport function localize(data: ILocalizeInfo | string, message: string, ...args: (string | number | boolean | undefined | null)[]): string {\n\treturn _format(message, args);\n}\n\n/**\n *\n * @param stringFromLocalizeCall You must pass in a string that was returned from a `nls.localize()` call\n * in order to ensure the loader plugin has been initialized before this function is called.\n */\nexport function getConfiguredDefaultLocale(stringFromLocalizeCall: string): string | undefined;\n/**\n * @skipMangle\n */\nexport function getConfiguredDefaultLocale(_: string): string | undefined {\n\t// This returns undefined because this implementation isn't used and is overwritten by the loader\n\t// when loaded.\n\treturn undefined;\n}\n\n/**\n * @skipMangle\n */\nexport function setPseudoTranslation(value: boolean) {\n\tisPseudo = value;\n}\n\n/**\n * Invoked in a built product at run-time\n * @skipMangle\n */\nexport function create(key: string, data: IBundledStrings & IConsumerAPI): IConsumerAPI {\n\treturn {\n\t\tlocalize: createScopedLocalize(data[key]),\n\t\tgetConfiguredDefaultLocale: data.getConfiguredDefaultLocale ?? ((_: string) => undefined)\n\t};\n}\n\n/**\n * Invoked by the loader at run-time\n * @skipMangle\n */\nexport function load(name: string, req: AMDLoader.IRelativeRequire, load: AMDLoader.IPluginLoadCallback, config: AMDLoader.IConfigurationOptions): void {\n\tconst pluginConfig: INLSPluginConfig = config['vs/nls'] ?? {};\n\tif (!name || name.length === 0) {\n\t\t// TODO: We need to give back the mangled names here\n\t\treturn load({\n\t\t\tlocalize: localize,\n\t\t\tgetConfiguredDefaultLocale: () => pluginConfig.availableLanguages?.['*']\n\t\t});\n\t}\n\tconst language = pluginConfig.availableLanguages ? findLanguageForModule(pluginConfig.availableLanguages, name) : null;\n\tconst useDefaultLanguage = language === null || language === DEFAULT_TAG;\n\tlet suffix = '.nls';\n\tif (!useDefaultLanguage) {\n\t\tsuffix = suffix + '.' + language;\n\t}\n\tconst messagesLoaded = (messages: string[] | IBundledStrings) => {\n\t\tif (Array.isArray(messages)) {\n\t\t\t(messages as any as IConsumerAPI).localize = createScopedLocalize(messages);\n\t\t} else {\n\t\t\t(messages as any as IConsumerAPI).localize = createScopedLocalize(messages[name]);\n\t\t}\n\t\t(messages as any as IConsumerAPI).getConfiguredDefaultLocale = () => pluginConfig.availableLanguages?.['*'];\n\t\tload(messages);\n\t};\n\tif (typeof pluginConfig.loadBundle === 'function') {\n\t\t(pluginConfig.loadBundle as BundleLoader)(name, language, (err: Error, messages) => {\n\t\t\t// We have an error. Load the English default strings to not fail\n\t\t\tif (err) {\n\t\t\t\treq([name + '.nls'], messagesLoaded);\n\t\t\t} else {\n\t\t\t\tmessagesLoaded(messages);\n\t\t\t}\n\t\t});\n\t} else if (pluginConfig.translationServiceUrl && !useDefaultLanguage) {\n\t\t(async () => {\n\t\t\ttry {\n\t\t\t\tconst messages = await getMessagesFromTranslationsService(pluginConfig.translationServiceUrl!, language, name);\n\t\t\t\treturn messagesLoaded(messages);\n\t\t\t} catch (err) {\n\t\t\t\t// Language is already as generic as it gets, so require default messages\n\t\t\t\tif (!language.includes('-')) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\treturn req([name + '.nls'], messagesLoaded);\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\t// Since there is a dash, the language configured is a specific sub-language of the same generic language.\n\t\t\t\t\t// Since we were unable to load the specific language, try to load the generic language. Ex. we failed to find a\n\t\t\t\t\t// Swiss German (de-CH), so try to load the generic German (de) messages instead.\n\t\t\t\t\tconst genericLanguage = language.split('-')[0];\n\t\t\t\t\tconst messages = await getMessagesFromTranslationsService(pluginConfig.translationServiceUrl!, genericLanguage, name);\n\t\t\t\t\t// We got some messages, so we configure the configuration to use the generic language for this session.\n\t\t\t\t\tpluginConfig.availableLanguages ??= {};\n\t\t\t\t\tpluginConfig.availableLanguages['*'] = genericLanguage;\n\t\t\t\t\treturn messagesLoaded(messages);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\treturn req([name + '.nls'], messagesLoaded);\n\t\t\t\t}\n\t\t\t}\n\t\t})();\n\t} else {\n\t\treq([name + suffix], messagesLoaded, (err: Error) => {\n\t\t\tif (suffix === '.nls') {\n\t\t\t\tconsole.error('Failed trying to load default language strings', err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconsole.error(`Failed to load message bundle for language ${language}. Falling back to the default language:`, err);\n\t\t\treq([name + '.nls'], messagesLoaded);\n\t\t});\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nlet isPseudo = (typeof document !== 'undefined' && document.location && document.location.hash.indexOf('pseudo=true') >= 0);\nconst DEFAULT_TAG = 'i-default';\n\ninterface INLSPluginConfig {\n\tavailableLanguages?: INLSPluginConfigAvailableLanguages;\n\tloadBundle?: BundleLoader;\n\ttranslationServiceUrl?: string;\n}\n\nexport interface INLSPluginConfigAvailableLanguages {\n\t'*'?: string;\n\t[module: string]: string | undefined;\n}\n\ninterface BundleLoader {\n\t(bundle: string, locale: string | null, cb: (err: Error, messages: string[] | IBundledStrings) => void): void;\n}\n\ninterface IBundledStrings {\n\t[moduleId: string]: string[];\n}\n\nexport interface ILocalizeInfo {\n\tkey: string;\n\tcomment: string[];\n}\n\ninterface ILocalizeFunc {\n\t(info: ILocalizeInfo, message: string, ...args: (string | number | boolean | undefined | null)[]): string;\n\t(key: string, message: string, ...args: (string | number | boolean | undefined | null)[]): string;\n}\n\ninterface IBoundLocalizeFunc {\n\t(idx: number, defaultValue: null): string;\n}\n\ninterface IConsumerAPI {\n\tlocalize: ILocalizeFunc | IBoundLocalizeFunc;\n\tgetConfiguredDefaultLocale(stringFromLocalizeCall: string): string | undefined;\n}\n\nfunction _format(message: string, args: (string | number | boolean | undefined | null)[]): string {\n\tlet result: string;\n\n\tif (args.length === 0) {\n\t\tresult = message;\n\t} else {\n\t\tresult = message.replace(/\\{(\\d+)\\}/g, (match, rest) => {\n\t\t\tconst index = rest[0];\n\t\t\tconst arg = args[index];\n\t\t\tlet result = match;\n\t\t\tif (typeof arg === 'string') {\n\t\t\t\tresult = arg;\n\t\t\t} else if (typeof arg === 'number' || typeof arg === 'boolean' || arg === void 0 || arg === null) {\n\t\t\t\tresult = String(arg);\n\t\t\t}\n\t\t\treturn result;\n\t\t});\n\t}\n\n\tif (isPseudo) {\n\t\t// FF3B and FF3D is the Unicode zenkaku representation for [ and ]\n\t\tresult = '\\uFF3B' + result.replace(/[aouei]/g, '$&$&') + '\\uFF3D';\n\t}\n\n\treturn result;\n}\n\nfunction findLanguageForModule(config: INLSPluginConfigAvailableLanguages, name: string) {\n\tlet result = config[name];\n\tif (result) {\n\t\treturn result;\n\t}\n\tresult = config['*'];\n\tif (result) {\n\t\treturn result;\n\t}\n\treturn null;\n}\n\nfunction endWithSlash(path: string): string {\n\tif (path.charAt(path.length - 1) === '/') {\n\t\treturn path;\n\t}\n\treturn path + '/';\n}\n\nasync function getMessagesFromTranslationsService(translationServiceUrl: string, language: string, name: string): Promise<string[] | IBundledStrings> {\n\tconst url = endWithSlash(translationServiceUrl) + endWithSlash(language) + 'vscode/' + endWithSlash(name);\n\tconst res = await fetch(url);\n\tif (res.ok) {\n\t\tconst messages = await res.json() as string[] | IBundledStrings;\n\t\treturn messages;\n\t}\n\tthrow new Error(`${res.status} - ${res.statusText}`);\n}\n\nfunction createScopedLocalize(scope: string[]): IBoundLocalizeFunc {\n\treturn function (idx: number, defaultValue: null) {\n\t\tconst restArgs = Array.prototype.slice.call(arguments, 2);\n\t\treturn _format(scope[idx], restArgs);\n\t};\n}\n\n/**\n * Localize a message.\n *\n * `message` can contain `{n}` notation where it is replaced by the nth value in `...args`\n * For example, `localize({ key: 'sayHello', comment: ['Welcomes user'] }, 'hello {0}', name)`\n */\nexport function localize(info: ILocalizeInfo, message: string, ...args: (string | number | boolean | undefined | null)[]): string;\n\n/**\n * Localize a message.\n *\n * `message` can contain `{n}` notation where it is replaced by the nth value in `...args`\n * For example, `localize('sayHello', 'hello {0}', name)`\n */\nexport function localize(key: string, message: string, ...args: (string | number | boolean | undefined | null)[]): string;\n\n/**\n * @skipMangle\n */\nexport function localize(data: ILocalizeInfo | string, message: string, ...args: (string | number | boolean | undefined | null)[]): string {\n\treturn _format(message, args);\n}\n\n/**\n *\n * @param stringFromLocalizeCall You must pass in a string that was returned from a `nls.localize()` call\n * in order to ensure the loader plugin has been initialized before this function is called.\n */\nexport function getConfiguredDefaultLocale(stringFromLocalizeCall: string): string | undefined;\n/**\n * @skipMangle\n */\nexport function getConfiguredDefaultLocale(_: string): string | undefined {\n\t// This returns undefined because this implementation isn't used and is overwritten by the loader\n\t// when loaded.\n\treturn undefined;\n}\n\n/**\n * @skipMangle\n */\nexport function setPseudoTranslation(value: boolean) {\n\tisPseudo = value;\n}\n\n/**\n * Invoked in a built product at run-time\n * @skipMangle\n */\nexport function create(key: string, data: IBundledStrings & IConsumerAPI): IConsumerAPI {\n\treturn {\n\t\tlocalize: createScopedLocalize(data[key]),\n\t\tgetConfiguredDefaultLocale: data.getConfiguredDefaultLocale ?? ((_: string) => undefined)\n\t};\n}\n\n/**\n * Invoked by the loader at run-time\n * @skipMangle\n */\nexport function load(name: string, req: AMDLoader.IRelativeRequire, load: AMDLoader.IPluginLoadCallback, config: AMDLoader.IConfigurationOptions): void {\n\tconst pluginConfig: INLSPluginConfig = config['vs/nls'] ?? {};\n\tif (!name || name.length === 0) {\n\t\t// TODO: We need to give back the mangled names here\n\t\treturn load({\n\t\t\tlocalize: localize,\n\t\t\tgetConfiguredDefaultLocale: () => pluginConfig.availableLanguages?.['*']\n\t\t});\n\t}\n\tconst language = pluginConfig.availableLanguages ? findLanguageForModule(pluginConfig.availableLanguages, name) : null;\n\tconst useDefaultLanguage = language === null || language === DEFAULT_TAG;\n\tlet suffix = '.nls';\n\tif (!useDefaultLanguage) {\n\t\tsuffix = suffix + '.' + language;\n\t}\n\tconst messagesLoaded = (messages: string[] | IBundledStrings) => {\n\t\tif (Array.isArray(messages)) {\n\t\t\t(messages as any as IConsumerAPI).localize = createScopedLocalize(messages);\n\t\t} else {\n\t\t\t(messages as any as IConsumerAPI).localize = createScopedLocalize(messages[name]);\n\t\t}\n\t\t(messages as any as IConsumerAPI).getConfiguredDefaultLocale = () => pluginConfig.availableLanguages?.['*'];\n\t\tload(messages);\n\t};\n\tif (typeof pluginConfig.loadBundle === 'function') {\n\t\t(pluginConfig.loadBundle as BundleLoader)(name, language, (err: Error, messages) => {\n\t\t\t// We have an error. Load the English default strings to not fail\n\t\t\tif (err) {\n\t\t\t\treq([name + '.nls'], messagesLoaded);\n\t\t\t} else {\n\t\t\t\tmessagesLoaded(messages);\n\t\t\t}\n\t\t});\n\t} else if (pluginConfig.translationServiceUrl && !useDefaultLanguage) {\n\t\t(async () => {\n\t\t\ttry {\n\t\t\t\tconst messages = await getMessagesFromTranslationsService(pluginConfig.translationServiceUrl!, language, name);\n\t\t\t\treturn messagesLoaded(messages);\n\t\t\t} catch (err) {\n\t\t\t\t// Language is already as generic as it gets, so require default messages\n\t\t\t\tif (!language.includes('-')) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\treturn req([name + '.nls'], messagesLoaded);\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\t// Since there is a dash, the language configured is a specific sub-language of the same generic language.\n\t\t\t\t\t// Since we were unable to load the specific language, try to load the generic language. Ex. we failed to find a\n\t\t\t\t\t// Swiss German (de-CH), so try to load the generic German (de) messages instead.\n\t\t\t\t\tconst genericLanguage = language.split('-')[0];\n\t\t\t\t\tconst messages = await getMessagesFromTranslationsService(pluginConfig.translationServiceUrl!, genericLanguage, name);\n\t\t\t\t\t// We got some messages, so we configure the configuration to use the generic language for this session.\n\t\t\t\t\tpluginConfig.availableLanguages ??= {};\n\t\t\t\t\tpluginConfig.availableLanguages['*'] = genericLanguage;\n\t\t\t\t\treturn messagesLoaded(messages);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.error(err);\n\t\t\t\t\treturn req([name + '.nls'], messagesLoaded);\n\t\t\t\t}\n\t\t\t}\n\t\t})();\n\t} else {\n\t\treq([name + suffix], messagesLoaded, (err: Error) => {\n\t\t\tif (suffix === '.nls') {\n\t\t\t\tconsole.error('Failed trying to load default language strings', err);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconsole.error(`Failed to load message bundle for language ${language}. Falling back to the default language:`, err);\n\t\t\treq([name + '.nls'], messagesLoaded);\n\t\t});\n\t}\n}\n"]}