{"version":3,"sources":["file:///workspace/appflow/src/vs/server/node/extensionsScannerService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAezF,IAAM,GAAG,GAAT,MAAM,GAAyB,SAAQ,8BAAG;QAEhD,YAC2B,uBAA4B,EACpB,+BAAoC,EACxD,WAAgB,EACjB,UAAe,EACgB,CAA6B,EACxD,cAAmB,EACf,kBAAuB,EACrB,oBAAyB;YAEhD,KAAK,CACJ,SAAG,CAAC,IAAI,CAAC,CAAC,CAAwB,qBAAqB,CAAC,EACxD,SAAG,CAAC,IAAI,CAAC,CAAC,CAAwB,cAAc,CAAC,EACjD,IAAA,eAAG,EAAM,CAAC,CAAwB,QAAQ,EAAE,iBAAiB,EAAE,YAAY,EAAE,cAAc,CAAC,EAC5F,uBAAuB,CAAC,cAAc,EACtC,uBAAuB,EAAE,+BAA+B,EAAE,WAAW,EAAE,UAAU,EAAE,CAAC,EAAyB,cAAc,EAAE,kBAAkB,EAAE,oBAAoB,CAAC,CAAC;YAV5H,MAAC,GAAD,CAAC,CAA4B;QAW1E,CAAC;QAES,KAAK,CAAC,CAAC,CAAe,QAAgB;YAC/C,MAAM,MAAM,GAAG,MAAM,IAAA,yBAAG,EAAiB,QAAQ,EAAE,IAAI,CAAC,CAAC,CAAwB,YAAY,CAAC,CAAC;YAC/F,IAAI,8CAAwB,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE;gBACxC,IAAI;oBACH,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,CAAC,CAAW,QAAQ,CAAC,SAAG,CAAC,IAAI,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC,CAAC;oBAC1F,OAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;iBAC5C;gBAAC,OAAO,GAAG,EAAE,EAAE,kBAAkB,EAAE;aACpC;YACD,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QAC5B,CAAC;KAED,CAAA;IA/BY,kBAAG;kBAAH,GAAG;QAGb,WAAA,qBAAG,CAAA;QACH,WAAA,qCAAG,CAAA;QACH,WAAA,WAAG,CAAA;QACH,WAAA,SAAG,CAAA;QACH,WAAA,iBAAG,CAAA;QACH,WAAA,oBAAG,CAAA;QACH,WAAA,iBAAG,CAAA;QACH,WAAA,mBAAG,CAAA;OAVO,GAAG,CA+Bf","file":"extensionsScannerService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { joinPath } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IExtensionsProfileScannerService } from 'vs/platform/extensionManagement/common/extensionsProfileScannerService';\nimport { AbstractExtensionsScannerService, IExtensionsScannerService, Translations } from 'vs/platform/extensionManagement/common/extensionsScannerService';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { getNLSConfiguration, InternalNLSConfiguration } from 'vs/server/node/remoteLanguagePacks';\n\nexport class ExtensionsScannerService extends AbstractExtensionsScannerService implements IExtensionsScannerService {\n\n\tconstructor(\n\t\t@IUserDataProfilesService userDataProfilesService: IUserDataProfilesService,\n\t\t@IExtensionsProfileScannerService extensionsProfileScannerService: IExtensionsProfileScannerService,\n\t\t@IFileService fileService: IFileService,\n\t\t@ILogService logService: ILogService,\n\t\t@INativeEnvironmentService private readonly nativeEnvironmentService: INativeEnvironmentService,\n\t\t@IProductService productService: IProductService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@IInstantiationService instantiationService: IInstantiationService,\n\t) {\n\t\tsuper(\n\t\t\tURI.file(nativeEnvironmentService.builtinExtensionsPath),\n\t\t\tURI.file(nativeEnvironmentService.extensionsPath),\n\t\t\tjoinPath(nativeEnvironmentService.userHome, '.vscode-oss-dev', 'extensions', 'control.json'),\n\t\t\tuserDataProfilesService.defaultProfile,\n\t\t\tuserDataProfilesService, extensionsProfileScannerService, fileService, logService, nativeEnvironmentService, productService, uriIdentityService, instantiationService);\n\t}\n\n\tprotected async getTranslations(language: string): Promise<Translations> {\n\t\tconst config = await getNLSConfiguration(language, this.nativeEnvironmentService.userDataPath);\n\t\tif (InternalNLSConfiguration.is(config)) {\n\t\t\ttry {\n\t\t\t\tconst content = await this.fileService.readFile(URI.file(config._translationsConfigFile));\n\t\t\t\treturn JSON.parse(content.value.toString());\n\t\t\t} catch (err) { /* Ignore error */ }\n\t\t}\n\t\treturn Object.create(null);\n\t}\n\n}\n"]}