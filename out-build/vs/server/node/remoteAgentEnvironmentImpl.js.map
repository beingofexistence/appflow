{"version":3,"sources":["file:///workspace/appflow/src/vs/server/node/remoteAgentEnvironmentImpl.ts"],"names":[],"mappings":"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","file":"remoteAgentEnvironmentImpl.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport * as platform from 'vs/base/common/platform';\nimport * as performance from 'vs/base/common/performance';\nimport { URI } from 'vs/base/common/uri';\nimport { createURITransformer } from 'vs/workbench/api/node/uriTransformer';\nimport { IRemoteAgentEnvironmentDTO, IGetEnvironmentDataArguments, IGetExtensionHostExitInfoArguments } from 'vs/workbench/services/remote/common/remoteAgentEnvironmentChannel';\nimport { IServerEnvironmentService } from 'vs/server/node/serverEnvironmentService';\nimport { IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { transformOutgoingURIs } from 'vs/base/common/uriIpc';\nimport { listProcesses } from 'vs/base/node/ps';\nimport { getMachineInfo, collectWorkspaceStats } from 'vs/platform/diagnostics/node/diagnosticsService';\nimport { IDiagnosticInfoOptions, IDiagnosticInfo } from 'vs/platform/diagnostics/common/diagnostics';\nimport { basename } from 'vs/base/common/path';\nimport { ProcessItem } from 'vs/base/common/processes';\nimport { ServerConnectionToken, ServerConnectionTokenType } from 'vs/server/node/serverConnectionToken';\nimport { IExtensionHostStatusService } from 'vs/server/node/extensionHostStatusService';\nimport { IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { joinPath } from 'vs/base/common/resources';\n\nexport class RemoteAgentEnvironmentChannel implements IServerChannel {\n\n\tprivate static _namePool = 1;\n\n\tconstructor(\n\t\tprivate readonly _connectionToken: ServerConnectionToken,\n\t\tprivate readonly _environmentService: IServerEnvironmentService,\n\t\tprivate readonly _userDataProfilesService: IUserDataProfilesService,\n\t\tprivate readonly _extensionHostStatusService: IExtensionHostStatusService,\n\t) {\n\t}\n\n\tasync call(_: any, command: string, arg?: any): Promise<any> {\n\t\tswitch (command) {\n\n\t\t\tcase 'getEnvironmentData': {\n\t\t\t\tconst args = <IGetEnvironmentDataArguments>arg;\n\t\t\t\tconst uriTransformer = createURITransformer(args.remoteAuthority);\n\n\t\t\t\tlet environmentData = await this._getEnvironmentData(args.profile);\n\t\t\t\tenvironmentData = transformOutgoingURIs(environmentData, uriTransformer);\n\n\t\t\t\treturn environmentData;\n\t\t\t}\n\n\t\t\tcase 'getExtensionHostExitInfo': {\n\t\t\t\tconst args = <IGetExtensionHostExitInfoArguments>arg;\n\t\t\t\treturn this._extensionHostStatusService.getExitInfo(args.reconnectionToken);\n\t\t\t}\n\n\t\t\tcase 'getDiagnosticInfo': {\n\t\t\t\tconst options = <IDiagnosticInfoOptions>arg;\n\t\t\t\tconst diagnosticInfo: IDiagnosticInfo = {\n\t\t\t\t\tmachineInfo: getMachineInfo()\n\t\t\t\t};\n\n\t\t\t\tconst processesPromise: Promise<ProcessItem | void> = options.includeProcesses ? listProcesses(process.pid) : Promise.resolve();\n\n\t\t\t\tlet workspaceMetadataPromises: Promise<void>[] = [];\n\t\t\t\tconst workspaceMetadata: { [key: string]: any } = {};\n\t\t\t\tif (options.folders) {\n\t\t\t\t\t// only incoming paths are transformed, so remote authority is unneeded.\n\t\t\t\t\tconst uriTransformer = createURITransformer('');\n\t\t\t\t\tconst folderPaths = options.folders\n\t\t\t\t\t\t.map(folder => URI.revive(uriTransformer.transformIncoming(folder)))\n\t\t\t\t\t\t.filter(uri => uri.scheme === 'file');\n\n\t\t\t\t\tworkspaceMetadataPromises = folderPaths.map(folder => {\n\t\t\t\t\t\treturn collectWorkspaceStats(folder.fsPath, ['node_modules', '.git'])\n\t\t\t\t\t\t\t.then(stats => {\n\t\t\t\t\t\t\t\tworkspaceMetadata[basename(folder.fsPath)] = stats;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn Promise.all([processesPromise, ...workspaceMetadataPromises]).then(([processes, _]) => {\n\t\t\t\t\tdiagnosticInfo.processes = processes || undefined;\n\t\t\t\t\tdiagnosticInfo.workspaceMetadata = options.folders ? workspaceMetadata : undefined;\n\t\t\t\t\treturn diagnosticInfo;\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(`IPC Command ${command} not found`);\n\t}\n\n\tlisten(_: any, event: string, arg: any): Event<any> {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tprivate async _getEnvironmentData(profile?: string): Promise<IRemoteAgentEnvironmentDTO> {\n\t\tif (profile && !this._userDataProfilesService.profiles.some(p => p.id === profile)) {\n\t\t\tawait this._userDataProfilesService.createProfile(profile, profile);\n\t\t}\n\t\treturn {\n\t\t\tpid: process.pid,\n\t\t\tconnectionToken: (this._connectionToken.type !== ServerConnectionTokenType.None ? this._connectionToken.value : ''),\n\t\t\tappRoot: URI.file(this._environmentService.appRoot),\n\t\t\tsettingsPath: this._environmentService.machineSettingsResource,\n\t\t\tlogsPath: this._environmentService.logsHome,\n\t\t\textensionHostLogsPath: joinPath(this._environmentService.logsHome, `exthost${RemoteAgentEnvironmentChannel._namePool++}`),\n\t\t\tglobalStorageHome: this._userDataProfilesService.defaultProfile.globalStorageHome,\n\t\t\tworkspaceStorageHome: this._environmentService.workspaceStorageHome,\n\t\t\tlocalHistoryHome: this._environmentService.localHistoryHome,\n\t\t\tuserHome: this._environmentService.userHome,\n\t\t\tos: platform.OS,\n\t\t\tarch: process.arch,\n\t\t\tmarks: performance.getMarks(),\n\t\t\tuseHostProxy: !!this._environmentService.args['use-host-proxy'],\n\t\t\tprofiles: {\n\t\t\t\thome: this._userDataProfilesService.profilesHome,\n\t\t\t\tall: [...this._userDataProfilesService.profiles].map(profile => ({ ...profile }))\n\t\t\t}\n\t\t};\n\t}\n\n}\n"]}