{"version":3,"sources":["file:///workspace/appflow/src/vs/server/node/server.main.ts"],"names":[],"mappings":"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","file":"server.main.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as os from 'os';\nimport * as fs from 'fs';\nimport * as net from 'net';\nimport { FileAccess } from 'vs/base/common/network';\nimport { run as runCli } from 'vs/server/node/remoteExtensionHostAgentCli';\nimport { createServer as doCreateServer, IServerAPI } from 'vs/server/node/remoteExtensionHostAgentServer';\nimport { parseArgs, ErrorReporter } from 'vs/platform/environment/node/argv';\nimport { join, dirname } from 'vs/base/common/path';\nimport { performance } from 'perf_hooks';\nimport { serverOptions } from 'vs/server/node/serverEnvironmentService';\nimport product from 'vs/platform/product/common/product';\nimport * as perf from 'vs/base/common/performance';\n\nperf.mark('code/server/codeLoaded');\n(<any>global).vscodeServerCodeLoadedTime = performance.now();\n\nconst errorReporter: ErrorReporter = {\n\tonMultipleValues: (id: string, usedValue: string) => {\n\t\tconsole.error(`Option '${id}' can only be defined once. Using value ${usedValue}.`);\n\t},\n\tonEmptyValue: (id) => {\n\t\tconsole.error(`Ignoring option '${id}': Value must not be empty.`);\n\t},\n\tonUnknownOption: (id: string) => {\n\t\tconsole.error(`Ignoring option '${id}': not supported for server.`);\n\t},\n\tonDeprecatedOption: (deprecatedOption: string, message) => {\n\t\tconsole.warn(`Option '${deprecatedOption}' is deprecated: ${message}`);\n\t}\n};\n\nconst args = parseArgs(process.argv.slice(2), serverOptions, errorReporter);\n\nconst REMOTE_DATA_FOLDER = args['server-data-dir'] || process.env['VSCODE_AGENT_FOLDER'] || join(os.homedir(), product.serverDataFolderName || '.vscode-remote');\nconst USER_DATA_PATH = args['user-data-dir'] || join(REMOTE_DATA_FOLDER, 'data');\nconst APP_SETTINGS_HOME = join(USER_DATA_PATH, 'User');\nconst GLOBAL_STORAGE_HOME = join(APP_SETTINGS_HOME, 'globalStorage');\nconst LOCAL_HISTORY_HOME = join(APP_SETTINGS_HOME, 'History');\nconst MACHINE_SETTINGS_HOME = join(USER_DATA_PATH, 'Machine');\nconst APP_ROOT = dirname(FileAccess.asFileUri('').fsPath);\nconst BUILTIN_EXTENSIONS_FOLDER_PATH = join(APP_ROOT, 'extensions');\nargs['user-data-dir'] = USER_DATA_PATH;\nargs['builtin-extensions-dir'] = BUILTIN_EXTENSIONS_FOLDER_PATH;\nargs['extensions-dir'] = args['extensions-dir'] || join(REMOTE_DATA_FOLDER, 'extensions');\n\n[REMOTE_DATA_FOLDER, args['extensions-dir'], USER_DATA_PATH, APP_SETTINGS_HOME, MACHINE_SETTINGS_HOME, GLOBAL_STORAGE_HOME, LOCAL_HISTORY_HOME].forEach(f => {\n\ttry {\n\t\tif (!fs.existsSync(f)) {\n\t\t\tfs.mkdirSync(f, { mode: 0o700 });\n\t\t}\n\t} catch (err) { console.error(err); }\n});\n\n/**\n * invoked by server-main.js\n */\nexport function spawnCli() {\n\trunCli(args, REMOTE_DATA_FOLDER, serverOptions);\n}\n\n/**\n * invoked by server-main.js\n */\nexport function createServer(address: string | net.AddressInfo | null): Promise<IServerAPI> {\n\treturn doCreateServer(address, args, REMOTE_DATA_FOLDER);\n}\n"]}