{"version":3,"sources":["vs/server/node/serverServices.ts"],"names":[],"mappings":"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","file":"serverServices.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { hostname, release } from 'os';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { DisposableStore, toDisposable } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport * as path from 'vs/base/common/path';\nimport { IURITransformer } from 'vs/base/common/uriIpc';\nimport { getMachineId } from 'vs/base/node/id';\nimport { Promises } from 'vs/base/node/pfs';\nimport { ClientConnectionEvent, IMessagePassingProtocol, IPCServer, StaticRouter } from 'vs/base/parts/ipc/common/ipc';\nimport { ProtocolConstants } from 'vs/base/parts/ipc/common/ipc.net';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ConfigurationService } from 'vs/platform/configuration/common/configurationService';\nimport { ExtensionHostDebugBroadcastChannel } from 'vs/platform/debug/common/extensionHostDebugIpc';\nimport { IDownloadService } from 'vs/platform/download/common/download';\nimport { DownloadServiceChannelClient } from 'vs/platform/download/common/downloadIpc';\nimport { IEnvironmentService, INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { ExtensionGalleryServiceWithNoStorageService } from 'vs/platform/extensionManagement/common/extensionGalleryService';\nimport { IExtensionGalleryService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { ExtensionSignatureVerificationService, IExtensionSignatureVerificationService } from 'vs/platform/extensionManagement/node/extensionSignatureVerificationService';\nimport { ExtensionManagementCLI } from 'vs/platform/extensionManagement/common/extensionManagementCLI';\nimport { ExtensionManagementChannel } from 'vs/platform/extensionManagement/common/extensionManagementIpc';\nimport { ExtensionManagementService, INativeServerExtensionManagementService } from 'vs/platform/extensionManagement/node/extensionManagementService';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { DiskFileSystemProvider } from 'vs/platform/files/node/diskFileSystemProvider';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport { InstantiationService } from 'vs/platform/instantiation/common/instantiationService';\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { ILanguagePackService } from 'vs/platform/languagePacks/common/languagePacks';\nimport { NativeLanguagePackService } from 'vs/platform/languagePacks/node/languagePacks';\nimport { AbstractLogger, DEFAULT_LOG_LEVEL, getLogLevel, ILoggerService, ILogService, log, LogLevel, LogLevelToString } from 'vs/platform/log/common/log';\nimport product from 'vs/platform/product/common/product';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { RemoteAgentConnectionContext } from 'vs/platform/remote/common/remoteAgentEnvironment';\nimport { IRequestService } from 'vs/platform/request/common/request';\nimport { RequestChannel } from 'vs/platform/request/common/requestIpc';\nimport { RequestService } from 'vs/platform/request/node/requestService';\nimport { resolveCommonProperties } from 'vs/platform/telemetry/common/commonProperties';\nimport { ITelemetryService, TelemetryLevel } from 'vs/platform/telemetry/common/telemetry';\nimport { ITelemetryServiceConfig } from 'vs/platform/telemetry/common/telemetryService';\nimport { getPiiPathsFromEnvironment, isInternalTelemetry, ITelemetryAppender, NullAppender, supportsTelemetry } from 'vs/platform/telemetry/common/telemetryUtils';\nimport ErrorTelemetry from 'vs/platform/telemetry/node/errorTelemetry';\nimport { IPtyService, TerminalSettingId } from 'vs/platform/terminal/common/terminal';\nimport { PtyHostService } from 'vs/platform/terminal/node/ptyHostService';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { UriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentityService';\nimport { RemoteAgentEnvironmentChannel } from 'vs/server/node/remoteAgentEnvironmentImpl';\nimport { RemoteAgentFileSystemProviderChannel } from 'vs/server/node/remoteFileSystemProviderServer';\nimport { ServerTelemetryChannel } from 'vs/platform/telemetry/common/remoteTelemetryChannel';\nimport { IServerTelemetryService, ServerNullTelemetryService, ServerTelemetryService } from 'vs/platform/telemetry/common/serverTelemetryService';\nimport { RemoteTerminalChannel } from 'vs/server/node/remoteTerminalChannel';\nimport { createURITransformer } from 'vs/workbench/api/node/uriTransformer';\nimport { ServerConnectionToken } from 'vs/server/node/serverConnectionToken';\nimport { ServerEnvironmentService, ServerParsedArgs } from 'vs/server/node/serverEnvironmentService';\nimport { REMOTE_TERMINAL_CHANNEL_NAME } from 'vs/workbench/contrib/terminal/common/remote/remoteTerminalChannel';\nimport { REMOTE_FILE_SYSTEM_CHANNEL_NAME } from 'vs/workbench/services/remote/common/remoteFileSystemProviderClient';\nimport { ExtensionHostStatusService, IExtensionHostStatusService } from 'vs/server/node/extensionHostStatusService';\nimport { IExtensionsScannerService } from 'vs/platform/extensionManagement/common/extensionsScannerService';\nimport { ExtensionsScannerService } from 'vs/server/node/extensionsScannerService';\nimport { IExtensionsProfileScannerService } from 'vs/platform/extensionManagement/common/extensionsProfileScannerService';\nimport { IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { NullPolicyService } from 'vs/platform/policy/common/policy';\nimport { OneDataSystemAppender } from 'vs/platform/telemetry/node/1dsAppender';\nimport { LoggerService } from 'vs/platform/log/node/loggerService';\nimport { ServerUserDataProfilesService } from 'vs/platform/userDataProfile/node/userDataProfile';\nimport { ExtensionsProfileScannerService } from 'vs/platform/extensionManagement/node/extensionsProfileScannerService';\nimport { LogService } from 'vs/platform/log/common/logService';\nimport { LoggerChannel } from 'vs/platform/log/common/logIpc';\nimport { localize } from 'vs/nls';\nimport { RemoteExtensionsScannerChannel, RemoteExtensionsScannerService } from 'vs/server/node/remoteExtensionsScanner';\nimport { RemoteExtensionsScannerChannelName } from 'vs/platform/remote/common/remoteExtensionsScanner';\nimport { RemoteUserDataProfilesServiceChannel } from 'vs/platform/userDataProfile/common/userDataProfileIpc';\nimport { NodePtyHostStarter } from 'vs/platform/terminal/node/nodePtyHostStarter';\n\nconst eventPrefix = 'monacoworkbench';\n\nexport async function setupServerServices(connectionToken: ServerConnectionToken, args: ServerParsedArgs, REMOTE_DATA_FOLDER: string, disposables: DisposableStore) {\n\tconst services = new ServiceCollection();\n\tconst socketServer = new SocketServer<RemoteAgentConnectionContext>();\n\n\tconst productService: IProductService = { _serviceBrand: undefined, ...product };\n\tservices.set(IProductService, productService);\n\n\tconst environmentService = new ServerEnvironmentService(args, productService);\n\tservices.set(IEnvironmentService, environmentService);\n\tservices.set(INativeEnvironmentService, environmentService);\n\n\tconst loggerService = new LoggerService(getLogLevel(environmentService), environmentService.logsHome);\n\tservices.set(ILoggerService, loggerService);\n\tsocketServer.registerChannel('logger', new LoggerChannel(loggerService, (ctx: RemoteAgentConnectionContext) => getUriTransformer(ctx.remoteAuthority)));\n\n\tconst logger = loggerService.createLogger('remoteagent', { name: localize('remoteExtensionLog', \"Server\") });\n\tconst logService = new LogService(logger, [new ServerLogger(getLogLevel(environmentService))]);\n\tservices.set(ILogService, logService);\n\tsetTimeout(() => cleanupOlderLogs(environmentService.logsHome.with({ scheme: Schemas.file }).fsPath).then(null, err => logService.error(err)), 10000);\n\tlogService.onDidChangeLogLevel(logLevel => log(logService, logLevel, `Log level changed to ${LogLevelToString(logService.getLevel())}`));\n\n\tlogService.trace(`Remote configuration data at ${REMOTE_DATA_FOLDER}`);\n\tlogService.trace('process arguments:', environmentService.args);\n\tif (Array.isArray(productService.serverGreeting)) {\n\t\tlogService.info(`\\n\\n${productService.serverGreeting.join('\\n')}\\n\\n`);\n\t}\n\n\t// ExtensionHost Debug broadcast service\n\tsocketServer.registerChannel(ExtensionHostDebugBroadcastChannel.ChannelName, new ExtensionHostDebugBroadcastChannel());\n\n\t// TODO: @Sandy @Joao need dynamic context based router\n\tconst router = new StaticRouter<RemoteAgentConnectionContext>(ctx => ctx.clientId === 'renderer');\n\n\t// Files\n\tconst fileService = disposables.add(new FileService(logService));\n\tservices.set(IFileService, fileService);\n\tfileService.registerProvider(Schemas.file, disposables.add(new DiskFileSystemProvider(logService)));\n\n\t// URI Identity\n\tconst uriIdentityService = new UriIdentityService(fileService);\n\tservices.set(IUriIdentityService, uriIdentityService);\n\n\t// Configuration\n\tconst configurationService = new ConfigurationService(environmentService.machineSettingsResource, fileService, new NullPolicyService(), logService);\n\tservices.set(IConfigurationService, configurationService);\n\n\t// User Data Profiles\n\tconst userDataProfilesService = new ServerUserDataProfilesService(uriIdentityService, environmentService, fileService, logService);\n\tservices.set(IUserDataProfilesService, userDataProfilesService);\n\tsocketServer.registerChannel('userDataProfiles', new RemoteUserDataProfilesServiceChannel(userDataProfilesService, (ctx: RemoteAgentConnectionContext) => getUriTransformer(ctx.remoteAuthority)));\n\n\t// Initialize\n\tconst [, , machineId] = await Promise.all([\n\t\tconfigurationService.initialize(),\n\t\tuserDataProfilesService.init(),\n\t\tgetMachineId(logService.error.bind(logService))\n\t]);\n\n\tconst extensionHostStatusService = new ExtensionHostStatusService();\n\tservices.set(IExtensionHostStatusService, extensionHostStatusService);\n\n\t// Request\n\tconst requestService = new RequestService(configurationService, environmentService, logService, loggerService);\n\tservices.set(IRequestService, requestService);\n\n\tlet oneDsAppender: ITelemetryAppender = NullAppender;\n\tconst isInternal = isInternalTelemetry(productService, configurationService);\n\tif (supportsTelemetry(productService, environmentService)) {\n\t\tif (productService.aiConfig && productService.aiConfig.ariaKey) {\n\t\t\toneDsAppender = new OneDataSystemAppender(requestService, isInternal, eventPrefix, null, productService.aiConfig.ariaKey);\n\t\t\tdisposables.add(toDisposable(() => oneDsAppender?.flush())); // Ensure the AI appender is disposed so that it flushes remaining data\n\t\t}\n\n\t\tconst config: ITelemetryServiceConfig = {\n\t\t\tappenders: [oneDsAppender],\n\t\t\tcommonProperties: resolveCommonProperties(release(), hostname(), process.arch, productService.commit, productService.version + '-remote', machineId, isInternal, 'remoteAgent'),\n\t\t\tpiiPaths: getPiiPathsFromEnvironment(environmentService)\n\t\t};\n\t\tconst initialTelemetryLevelArg = environmentService.args['telemetry-level'];\n\t\tlet injectedTelemetryLevel: TelemetryLevel = TelemetryLevel.USAGE;\n\t\t// Convert the passed in CLI argument into a telemetry level for the telemetry service\n\t\tif (initialTelemetryLevelArg === 'all') {\n\t\t\tinjectedTelemetryLevel = TelemetryLevel.USAGE;\n\t\t} else if (initialTelemetryLevelArg === 'error') {\n\t\t\tinjectedTelemetryLevel = TelemetryLevel.ERROR;\n\t\t} else if (initialTelemetryLevelArg === 'crash') {\n\t\t\tinjectedTelemetryLevel = TelemetryLevel.CRASH;\n\t\t} else if (initialTelemetryLevelArg !== undefined) {\n\t\t\tinjectedTelemetryLevel = TelemetryLevel.NONE;\n\t\t}\n\t\tservices.set(IServerTelemetryService, new SyncDescriptor(ServerTelemetryService, [config, injectedTelemetryLevel]));\n\t} else {\n\t\tservices.set(IServerTelemetryService, ServerNullTelemetryService);\n\t}\n\n\tservices.set(IExtensionGalleryService, new SyncDescriptor(ExtensionGalleryServiceWithNoStorageService));\n\n\tconst downloadChannel = socketServer.getChannel('download', router);\n\tservices.set(IDownloadService, new DownloadServiceChannelClient(downloadChannel, () => getUriTransformer('renderer') /* TODO: @Sandy @Joao need dynamic context based router */));\n\n\tservices.set(IExtensionsProfileScannerService, new SyncDescriptor(ExtensionsProfileScannerService));\n\tservices.set(IExtensionsScannerService, new SyncDescriptor(ExtensionsScannerService));\n\tservices.set(IExtensionSignatureVerificationService, new SyncDescriptor(ExtensionSignatureVerificationService));\n\tservices.set(INativeServerExtensionManagementService, new SyncDescriptor(ExtensionManagementService));\n\n\tconst instantiationService: IInstantiationService = new InstantiationService(services);\n\tservices.set(ILanguagePackService, instantiationService.createInstance(NativeLanguagePackService));\n\n\tconst ptyHostStarter = instantiationService.createInstance(\n\t\tNodePtyHostStarter,\n\t\t{\n\t\t\tgraceTime: ProtocolConstants.ReconnectionGraceTime,\n\t\t\tshortGraceTime: ProtocolConstants.ReconnectionShortGraceTime,\n\t\t\tscrollback: configurationService.getValue<number>(TerminalSettingId.PersistentSessionScrollback) ?? 100\n\t\t}\n\t);\n\tconst ptyHostService = instantiationService.createInstance(PtyHostService, ptyHostStarter);\n\tservices.set(IPtyService, ptyHostService);\n\n\tinstantiationService.invokeFunction(accessor => {\n\t\tconst extensionManagementService = accessor.get(INativeServerExtensionManagementService);\n\t\tconst extensionsScannerService = accessor.get(IExtensionsScannerService);\n\t\tconst extensionGalleryService = accessor.get(IExtensionGalleryService);\n\t\tconst languagePackService = accessor.get(ILanguagePackService);\n\t\tconst remoteExtensionEnvironmentChannel = new RemoteAgentEnvironmentChannel(connectionToken, environmentService, userDataProfilesService, extensionHostStatusService);\n\t\tsocketServer.registerChannel('remoteextensionsenvironment', remoteExtensionEnvironmentChannel);\n\n\t\tconst telemetryChannel = new ServerTelemetryChannel(accessor.get(IServerTelemetryService), oneDsAppender);\n\t\tsocketServer.registerChannel('telemetry', telemetryChannel);\n\n\t\tsocketServer.registerChannel(REMOTE_TERMINAL_CHANNEL_NAME, new RemoteTerminalChannel(environmentService, logService, ptyHostService, productService, extensionManagementService, configurationService));\n\n\t\tconst remoteExtensionsScanner = new RemoteExtensionsScannerService(instantiationService.createInstance(ExtensionManagementCLI, logService), environmentService, userDataProfilesService, extensionsScannerService, logService, extensionGalleryService, languagePackService);\n\t\tsocketServer.registerChannel(RemoteExtensionsScannerChannelName, new RemoteExtensionsScannerChannel(remoteExtensionsScanner, (ctx: RemoteAgentConnectionContext) => getUriTransformer(ctx.remoteAuthority)));\n\n\t\tconst remoteFileSystemChannel = new RemoteAgentFileSystemProviderChannel(logService, environmentService);\n\t\tsocketServer.registerChannel(REMOTE_FILE_SYSTEM_CHANNEL_NAME, remoteFileSystemChannel);\n\n\t\tsocketServer.registerChannel('request', new RequestChannel(accessor.get(IRequestService)));\n\n\t\tconst channel = new ExtensionManagementChannel(extensionManagementService, (ctx: RemoteAgentConnectionContext) => getUriTransformer(ctx.remoteAuthority));\n\t\tsocketServer.registerChannel('extensions', channel);\n\n\t\t// clean up extensions folder\n\t\tremoteExtensionsScanner.whenExtensionsReady().then(() => extensionManagementService.cleanUp());\n\n\t\tdisposables.add(new ErrorTelemetry(accessor.get(ITelemetryService)));\n\n\t\treturn {\n\t\t\ttelemetryService: accessor.get(ITelemetryService)\n\t\t};\n\t});\n\n\treturn { socketServer, instantiationService };\n}\n\nconst _uriTransformerCache: { [remoteAuthority: string]: IURITransformer } = Object.create(null);\n\nfunction getUriTransformer(remoteAuthority: string): IURITransformer {\n\tif (!_uriTransformerCache[remoteAuthority]) {\n\t\t_uriTransformerCache[remoteAuthority] = createURITransformer(remoteAuthority);\n\t}\n\treturn _uriTransformerCache[remoteAuthority];\n}\n\nexport class SocketServer<TContext = string> extends IPCServer<TContext> {\n\n\tprivate _onDidConnectEmitter: Emitter<ClientConnectionEvent>;\n\n\tconstructor() {\n\t\tconst emitter = new Emitter<ClientConnectionEvent>();\n\t\tsuper(emitter.event);\n\t\tthis._onDidConnectEmitter = emitter;\n\t}\n\n\tpublic acceptConnection(protocol: IMessagePassingProtocol, onDidClientDisconnect: Event<void>): void {\n\t\tthis._onDidConnectEmitter.fire({ protocol, onDidClientDisconnect });\n\t}\n}\n\nclass ServerLogger extends AbstractLogger {\n\tprivate useColors: boolean;\n\n\tconstructor(logLevel: LogLevel = DEFAULT_LOG_LEVEL) {\n\t\tsuper();\n\t\tthis.setLevel(logLevel);\n\t\tthis.useColors = Boolean(process.stdout.isTTY);\n\t}\n\n\ttrace(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Trace)) {\n\t\t\tif (this.useColors) {\n\t\t\t\tconsole.log(`\\x1b[90m[${now()}]\\x1b[0m`, message, ...args);\n\t\t\t} else {\n\t\t\t\tconsole.log(`[${now()}]`, message, ...args);\n\t\t\t}\n\t\t}\n\t}\n\n\tdebug(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Debug)) {\n\t\t\tif (this.useColors) {\n\t\t\t\tconsole.log(`\\x1b[90m[${now()}]\\x1b[0m`, message, ...args);\n\t\t\t} else {\n\t\t\t\tconsole.log(`[${now()}]`, message, ...args);\n\t\t\t}\n\t\t}\n\t}\n\n\tinfo(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Info)) {\n\t\t\tif (this.useColors) {\n\t\t\t\tconsole.log(`\\x1b[90m[${now()}]\\x1b[0m`, message, ...args);\n\t\t\t} else {\n\t\t\t\tconsole.log(`[${now()}]`, message, ...args);\n\t\t\t}\n\t\t}\n\t}\n\n\twarn(message: string | Error, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Warning)) {\n\t\t\tif (this.useColors) {\n\t\t\t\tconsole.warn(`\\x1b[93m[${now()}]\\x1b[0m`, message, ...args);\n\t\t\t} else {\n\t\t\t\tconsole.warn(`[${now()}]`, message, ...args);\n\t\t\t}\n\t\t}\n\t}\n\n\terror(message: string, ...args: any[]): void {\n\t\tif (this.checkLogLevel(LogLevel.Error)) {\n\t\t\tif (this.useColors) {\n\t\t\t\tconsole.error(`\\x1b[91m[${now()}]\\x1b[0m`, message, ...args);\n\t\t\t} else {\n\t\t\t\tconsole.error(`[${now()}]`, message, ...args);\n\t\t\t}\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\t// noop\n\t}\n\n\tflush(): void {\n\t\t// noop\n\t}\n}\n\nfunction now(): string {\n\tconst date = new Date();\n\treturn `${twodigits(date.getHours())}:${twodigits(date.getMinutes())}:${twodigits(date.getSeconds())}`;\n}\n\nfunction twodigits(n: number): string {\n\tif (n < 10) {\n\t\treturn `0${n}`;\n\t}\n\treturn String(n);\n}\n\n/**\n * Cleans up older logs, while keeping the 10 most recent ones.\n */\nasync function cleanupOlderLogs(logsPath: string): Promise<void> {\n\tconst currentLog = path.basename(logsPath);\n\tconst logsRoot = path.dirname(logsPath);\n\tconst children = await Promises.readdir(logsRoot);\n\tconst allSessions = children.filter(name => /^\\d{8}T\\d{6}$/.test(name));\n\tconst oldSessions = allSessions.sort().filter((d) => d !== currentLog);\n\tconst toDelete = oldSessions.slice(0, Math.max(0, oldSessions.length - 9));\n\n\tawait Promise.all(toDelete.map(name => Promises.rm(path.join(logsRoot, name))));\n}\n"]}