{"version":3,"sources":["file:///workspace/appflow/src/vs/server/node/remoteLanguagePacks.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAShG,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAE,aAAG,CAAQ,SAAS,CAAC,EAAE,CAAC,CAAC,MAAM,EAAE,mBAAmB,CAAC,CAAC;IACjF,MAAM,MAAM,GAA8C,IAAI,GAAG,EAAE,CAAC;IAEpE,SAAS,MAAM,CAAC,IAAY;QAC3B,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAC7C,CAAC;IAED,SAAgB,GAAG,CAAiB,QAAgB,EAAE,YAAoB;QACzE,OAAO,MAAM,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE;YAC3C,IAAI,CAAC,UAAU,IAAI,CAAC,iBAAO,CAAC,MAAM,EAAE;gBACnC,0EAA0E;gBAC1E,0FAA0F;gBAC1F,OAAO,OAAO,CAAC,OAAO,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,kBAAkB,EAAE,EAAE,EAAE,CAAC,CAAC;aACjF;YACD,MAAM,GAAG,GAAG,GAAG,QAAQ,KAAK,YAAY,EAAE,CAAC;YAC3C,IAAI,MAAM,GAAG,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC7B,IAAI,CAAC,MAAM,EAAE;gBACZ,0FAA0F;gBAC1F,MAAM,GAAG,EAAE,CAAC,mBAAmB,CAAC,iBAAO,CAAC,MAAM,EAAE,YAAY,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;oBACxG,IAAI,wBAAwB,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE;wBACvC,KAAK,CAAC,oBAAoB,GAAG,IAAI,CAAC;qBAClC;oBACD,OAAO,KAAK,CAAC;gBACd,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,MAAM,CAAC,CAAC;aACxB;YACD,OAAO,MAAM,CAAC;QACf,CAAC,CAAC,CAAC;IACJ,CAAC;IArBD,kBAqBC;IAED,IAAiB,wBAAwB,CAKxC;IALD,WAAiB,wBAAwB;QACxC,SAAgB,EAAE,CAAC,KAA0B;YAC5C,MAAM,SAAS,GAAgC,KAAoC,CAAC;YACpF,OAAO,SAAS,IAAI,OAAO,SAAS,CAAC,eAAe,KAAK,QAAQ,CAAC;QACnE,CAAC;QAHe,2BAAE,KAGjB,CAAA;IACF,CAAC,EALgB,wBAAwB,wCAAxB,wBAAwB,QAKxC","file":"remoteLanguagePacks.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport { FileAccess } from 'vs/base/common/network';\nimport * as path from 'vs/base/common/path';\n\nimport * as lp from 'vs/base/node/languagePacks';\nimport product from 'vs/platform/product/common/product';\n\nconst metaData = path.join(FileAccess.asFileUri('').fsPath, 'nls.metadata.json');\nconst _cache: Map<string, Promise<lp.NLSConfiguration>> = new Map();\n\nfunction exists(file: string) {\n\treturn new Promise(c => fs.exists(file, c));\n}\n\nexport function getNLSConfiguration(language: string, userDataPath: string): Promise<lp.NLSConfiguration> {\n\treturn exists(metaData).then((fileExists) => {\n\t\tif (!fileExists || !product.commit) {\n\t\t\t// console.log(`==> MetaData or commit unknown. Using default language.`);\n\t\t\t// The OS Locale on the remote side really doesn't matter, so we return the default locale\n\t\t\treturn Promise.resolve({ locale: 'en', osLocale: 'en', availableLanguages: {} });\n\t\t}\n\t\tconst key = `${language}||${userDataPath}`;\n\t\tlet result = _cache.get(key);\n\t\tif (!result) {\n\t\t\t// The OS Locale on the remote side really doesn't matter, so we pass in the same language\n\t\t\tresult = lp.getNLSConfiguration(product.commit, userDataPath, metaData, language, language).then(value => {\n\t\t\t\tif (InternalNLSConfiguration.is(value)) {\n\t\t\t\t\tvalue._languagePackSupport = true;\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t});\n\t\t\t_cache.set(key, result);\n\t\t}\n\t\treturn result;\n\t});\n}\n\nexport namespace InternalNLSConfiguration {\n\texport function is(value: lp.NLSConfiguration): value is lp.InternalNLSConfiguration {\n\t\tconst candidate: lp.InternalNLSConfiguration = value as lp.InternalNLSConfiguration;\n\t\treturn candidate && typeof candidate._languagePackId === 'string';\n\t}\n}\n"]}