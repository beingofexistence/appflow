{"version":3,"sources":["vs/server/node/serverEnvironmentService.ts"],"names":[],"mappings":"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","file":"serverEnvironmentService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as nls from 'vs/nls';\n\nimport { NativeEnvironmentService } from 'vs/platform/environment/node/environmentService';\nimport { OPTIONS, OptionDescriptions } from 'vs/platform/environment/node/argv';\nimport { refineServiceDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IEnvironmentService, INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { memoize } from 'vs/base/common/decorators';\nimport { URI } from 'vs/base/common/uri';\n\nexport const serverOptions: OptionDescriptions<Required<ServerParsedArgs>> = {\n\n\t/* ----- server setup ----- */\n\n\t'host': { type: 'string', cat: 'o', args: 'ip-address', description: nls.localize('host', \"The host name or IP address the server should listen to. If not set, defaults to 'localhost'.\") },\n\t'port': { type: 'string', cat: 'o', args: 'port | port range', description: nls.localize('port', \"The port the server should listen to. If 0 is passed a random free port is picked. If a range in the format num-num is passed, a free port from the range (end inclusive) is selected.\") },\n\t'socket-path': { type: 'string', cat: 'o', args: 'path', description: nls.localize('socket-path', \"The path to a socket file for the server to listen to.\") },\n\t'connection-token': { type: 'string', cat: 'o', args: 'token', deprecates: ['connectionToken'], description: nls.localize('connection-token', \"A secret that must be included with all requests.\") },\n\t'connection-token-file': { type: 'string', cat: 'o', args: 'path', deprecates: ['connection-secret', 'connectionTokenFile'], description: nls.localize('connection-token-file', \"Path to a file that contains the connection token.\") },\n\t'without-connection-token': { type: 'boolean', cat: 'o', description: nls.localize('without-connection-token', \"Run without a connection token. Only use this if the connection is secured by other means.\") },\n\t'disable-websocket-compression': { type: 'boolean' },\n\t'print-startup-performance': { type: 'boolean' },\n\t'print-ip-address': { type: 'boolean' },\n\t'accept-server-license-terms': { type: 'boolean', cat: 'o', description: nls.localize('acceptLicenseTerms', \"If set, the user accepts the server license terms and the server will be started without a user prompt.\") },\n\t'server-data-dir': { type: 'string', cat: 'o', description: nls.localize('serverDataDir', \"Specifies the directory that server data is kept in.\") },\n\t'telemetry-level': { type: 'string', cat: 'o', args: 'level', description: nls.localize('telemetry-level', \"Sets the initial telemetry level. Valid levels are: 'off', 'crash', 'error' and 'all'. If not specified, the server will send telemetry until a client connects, it will then use the clients telemetry setting. Setting this to 'off' is equivalent to --disable-telemetry\") },\n\n\t/* ----- vs code options ---\t-- */\n\n\t'user-data-dir': OPTIONS['user-data-dir'],\n\t'enable-smoke-test-driver': OPTIONS['enable-smoke-test-driver'],\n\t'disable-telemetry': OPTIONS['disable-telemetry'],\n\t'disable-workspace-trust': OPTIONS['disable-workspace-trust'],\n\t'file-watcher-polling': { type: 'string', deprecates: ['fileWatcherPolling'] },\n\t'log': OPTIONS['log'],\n\t'logsPath': OPTIONS['logsPath'],\n\t'force-disable-user-env': OPTIONS['force-disable-user-env'],\n\n\t/* ----- vs code web options ----- */\n\n\t'folder': { type: 'string', deprecationMessage: 'No longer supported. Folder needs to be provided in the browser URL or with `default-folder`.' },\n\t'workspace': { type: 'string', deprecationMessage: 'No longer supported. Workspace needs to be provided in the browser URL or with `default-workspace`.' },\n\n\t'default-folder': { type: 'string', description: nls.localize('default-folder', 'The workspace folder to open when no input is specified in the browser URL. A relative or absolute path resolved against the current working directory.') },\n\t'default-workspace': { type: 'string', description: nls.localize('default-workspace', 'The workspace to open when no input is specified in the browser URL. A relative or absolute path resolved against the current working directory.') },\n\n\t'enable-sync': { type: 'boolean' },\n\t'github-auth': { type: 'string' },\n\t'use-test-resolver': { type: 'boolean' },\n\n\t/* ----- extension management ----- */\n\n\t'extensions-dir': OPTIONS['extensions-dir'],\n\t'extensions-download-dir': OPTIONS['extensions-download-dir'],\n\t'builtin-extensions-dir': OPTIONS['builtin-extensions-dir'],\n\t'install-extension': OPTIONS['install-extension'],\n\t'install-builtin-extension': OPTIONS['install-builtin-extension'],\n\t'uninstall-extension': OPTIONS['uninstall-extension'],\n\t'list-extensions': OPTIONS['list-extensions'],\n\t'locate-extension': OPTIONS['locate-extension'],\n\n\t'show-versions': OPTIONS['show-versions'],\n\t'category': OPTIONS['category'],\n\t'force': OPTIONS['force'],\n\t'do-not-sync': OPTIONS['do-not-sync'],\n\t'pre-release': OPTIONS['pre-release'],\n\t'start-server': { type: 'boolean', cat: 'e', description: nls.localize('start-server', \"Start the server when installing or uninstalling extensions. To be used in combination with 'install-extension', 'install-builtin-extension' and 'uninstall-extension'.\") },\n\n\n\t/* ----- remote development options ----- */\n\n\t'enable-remote-auto-shutdown': { type: 'boolean' },\n\t'remote-auto-shutdown-without-delay': { type: 'boolean' },\n\n\t'use-host-proxy': { type: 'boolean' },\n\t'without-browser-env-var': { type: 'boolean' },\n\n\t/* ----- server cli ----- */\n\n\t'help': OPTIONS['help'],\n\t'version': OPTIONS['version'],\n\t'locate-shell-integration-path': OPTIONS['locate-shell-integration-path'],\n\n\t'compatibility': { type: 'string' },\n\n\t_: OPTIONS['_']\n};\n\nexport interface ServerParsedArgs {\n\n\t/* ----- server setup ----- */\n\n\thost?: string;\n\t/**\n\t * A port or a port range\n\t */\n\tport?: string;\n\t'socket-path'?: string;\n\n\t/**\n\t * A secret token that must be provided by the web client with all requests.\n\t * Use only `[0-9A-Za-z\\-]`.\n\t *\n\t * By default, a UUID will be generated every time the server starts up.\n\t *\n\t * If the server is running on a multi-user system, then consider\n\t * using `--connection-token-file` which has the advantage that the token cannot\n\t * be seen by other users using `ps` or similar commands.\n\t */\n\t'connection-token'?: string;\n\t/**\n\t * A path to a filename which will be read on startup.\n\t * Consider placing this file in a folder readable only by the same user (a `chmod 0700` directory).\n\t *\n\t * The contents of the file will be used as the connection token. Use only `[0-9A-Z\\-]` as contents in the file.\n\t * The file can optionally end in a `\\n` which will be ignored.\n\t *\n\t * This secret must be communicated to any vscode instance via the resolver or embedder API.\n\t */\n\t'connection-token-file'?: string;\n\n\t/**\n\t * Run the server without a connection token\n\t */\n\t'without-connection-token'?: boolean;\n\n\t'disable-websocket-compression'?: boolean;\n\n\t'print-startup-performance'?: boolean;\n\t'print-ip-address'?: boolean;\n\n\t'accept-server-license-terms': boolean;\n\n\t'server-data-dir'?: string;\n\n\t'telemetry-level'?: string;\n\n\t'disable-workspace-trust'?: boolean;\n\n\t/* ----- vs code options ----- */\n\n\t'user-data-dir'?: string;\n\n\t'enable-smoke-test-driver'?: boolean;\n\n\t'disable-telemetry'?: boolean;\n\t'file-watcher-polling'?: string;\n\n\t'log'?: string[];\n\t'logsPath'?: string;\n\n\t'force-disable-user-env'?: boolean;\n\n\t/* ----- vs code web options ----- */\n\n\t'default-workspace'?: string;\n\t'default-folder'?: string;\n\n\t/** @deprecated, use default-workspace instead */\n\tworkspace: string;\n\t/** @deprecated, use default-folder instead */\n\tfolder: string;\n\n\n\t'enable-sync'?: boolean;\n\t'github-auth'?: string;\n\t'use-test-resolver'?: boolean;\n\n\t/* ----- extension management ----- */\n\n\t'extensions-dir'?: string;\n\t'extensions-download-dir'?: string;\n\t'builtin-extensions-dir'?: string;\n\t'install-extension'?: string[];\n\t'install-builtin-extension'?: string[];\n\t'uninstall-extension'?: string[];\n\t'list-extensions'?: boolean;\n\t'locate-extension'?: string[];\n\t'show-versions'?: boolean;\n\t'category'?: string;\n\tforce?: boolean; // used by install-extension\n\t'do-not-sync'?: boolean; // used by install-extension\n\t'pre-release'?: boolean; // used by install-extension\n\n\t'start-server'?: boolean;\n\n\t/* ----- remote development options ----- */\n\n\t'enable-remote-auto-shutdown'?: boolean;\n\t'remote-auto-shutdown-without-delay'?: boolean;\n\n\t'use-host-proxy'?: boolean;\n\t'without-browser-env-var'?: boolean;\n\n\t/* ----- server cli ----- */\n\thelp: boolean;\n\tversion: boolean;\n\t'locate-shell-integration-path'?: string;\n\n\tcompatibility: string;\n\n\t_: string[];\n}\n\nexport const IServerEnvironmentService = refineServiceDecorator<IEnvironmentService, IServerEnvironmentService>(IEnvironmentService);\n\nexport interface IServerEnvironmentService extends INativeEnvironmentService {\n\treadonly args: ServerParsedArgs;\n}\n\nexport class ServerEnvironmentService extends NativeEnvironmentService implements IServerEnvironmentService {\n\t@memoize\n\toverride get userRoamingDataHome(): URI { return this.appSettingsHome; }\n\toverride get args(): ServerParsedArgs { return super.args as ServerParsedArgs; }\n}\n"]}