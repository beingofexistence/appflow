{"version":3,"sources":["file:///workspace/appflow/src/vs/server/node/remoteFileSystemProviderServer.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAehG,MAAa,GAAqC,SAAQ,kCAAmE;QAI5H,YACC,UAAe,EACE,CAAuB;YAExC,KAAK,CAAC,IAAI,4BAAG,CAAoB,UAAU,CAAC,EAAE,UAAU,CAAC,CAAC;YAFzC,MAAC,GAAD,CAAC,CAAsB;YAJxB,MAAC,GAAqB,IAAI,GAAG,EAA2B,CAAC;YAQzE,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAQ,CAAC;QAC/B,CAAC;QAEkB,CAAC,CAAiB,GAAiC;YACrE,IAAI,WAAW,GAAG,IAAI,CAAC,CAAC,CAAmB,GAAG,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;YACpE,IAAI,CAAC,WAAW,EAAE;gBACjB,WAAW,GAAG,IAAA,oBAAG,EAAkB,GAAG,CAAC,eAAe,CAAC,CAAC;gBACxD,IAAI,CAAC,CAAC,CAAmB,GAAG,CAAC,GAAG,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;aAC/D;YAED,OAAO,WAAW,CAAC;QACpB,CAAC;QAEkB,CAAC,CAAiB,cAA+B,EAAE,SAAwB,EAAE,qBAAqB,GAAG,KAAK;YAC5H,IAAI,qBAAqB,IAAI,SAAS,CAAC,IAAI,KAAK,kBAAkB,IAAI,SAAS,CAAC,KAAK,EAAE;gBACtF,MAAM,mBAAmB,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,mBAAmB,CAAC;gBAE5E,OAAO,SAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,mBAAmB,EAAE,CAAC,CAAC;aAC/D;YAED,OAAO,SAAG,CAAC,MAAM,CAAC,cAAc,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC,CAAC;QAChE,CAAC;QAED,uBAAuB;QAEb,CAAC,CAAwB,cAA+B,EAAE,OAAwC;YAC3G,OAAO,IAAI,kBAAkB,CAAC,cAAc,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC,EAAW,IAAI,CAAC,CAAC,CAAkB,CAAC;QAClG,CAAC;KAGD;IAxCD,kBAwCC;IAED,MAAM,kBAAmB,SAAQ,kCAAG;QAEnC,YACC,cAA+B,EAC/B,cAA+C,EAC/C,UAAe,EACf,kBAAuB;YAEvB,KAAK,CAAC,cAAc,EAAE,cAAc,EAAE,UAAU,EAAE,kBAAkB,CAAC,CAAC;QACvE,CAAC;QAEkB,CAAC,CAA0B,kBAAuB;YACpE,MAAM,kBAAkB,GAAG,kBAAkB,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;YAC3E,IAAI,kBAAkB,EAAE;gBACvB,MAAM,QAAQ,GAAG,kBAAkB,CAAC,KAAK,CAAC,UAAG,CAAO,CAAC;gBACrD,MAAM,eAAe,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC5C,IAAI,eAAe,GAAG,CAAC,EAAE;oBACxB,MAAM,UAAU,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;oBAClE,OAAO,EAAE,UAAU,EAAE,eAAe,EAAE,CAAC;iBACvC;aACD;YAED,OAAO,SAAS,CAAC;QAClB,CAAC;QAEkB,CAAC,CAAgB,kBAAuB;YAC1D,IAAI,kBAAkB,CAAC,cAAc,EAAE;gBACtC,yEAAyE;gBACzE,mDAAmD;gBACnD,OAAO,CAAC,UAAG,CAAG,IAAI,CAAC,kBAAkB,CAAC,cAAc,EAAE,IAAI,CAAC,CAAC,CAAC;aAC7D;YAED,OAAO,SAAS,CAAC;QAClB,CAAC;KACD","file":"remoteFileSystemProviderServer.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { IURITransformer } from 'vs/base/common/uriIpc';\nimport { IFileChange } from 'vs/platform/files/common/files';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { createURITransformer } from 'vs/workbench/api/node/uriTransformer';\nimport { RemoteAgentConnectionContext } from 'vs/platform/remote/common/remoteAgentEnvironment';\nimport { DiskFileSystemProvider } from 'vs/platform/files/node/diskFileSystemProvider';\nimport { posix, delimiter } from 'vs/base/common/path';\nimport { IServerEnvironmentService } from 'vs/server/node/serverEnvironmentService';\nimport { AbstractDiskFileSystemProviderChannel, AbstractSessionFileWatcher, ISessionFileWatcher } from 'vs/platform/files/node/diskFileSystemProviderServer';\nimport { IRecursiveWatcherOptions } from 'vs/platform/files/common/watcher';\n\nexport class RemoteAgentFileSystemProviderChannel extends AbstractDiskFileSystemProviderChannel<RemoteAgentConnectionContext> {\n\n\tprivate readonly uriTransformerCache = new Map<string, IURITransformer>();\n\n\tconstructor(\n\t\tlogService: ILogService,\n\t\tprivate readonly environmentService: IServerEnvironmentService\n\t) {\n\t\tsuper(new DiskFileSystemProvider(logService), logService);\n\n\t\tthis._register(this.provider);\n\t}\n\n\tprotected override getUriTransformer(ctx: RemoteAgentConnectionContext): IURITransformer {\n\t\tlet transformer = this.uriTransformerCache.get(ctx.remoteAuthority);\n\t\tif (!transformer) {\n\t\t\ttransformer = createURITransformer(ctx.remoteAuthority);\n\t\t\tthis.uriTransformerCache.set(ctx.remoteAuthority, transformer);\n\t\t}\n\n\t\treturn transformer;\n\t}\n\n\tprotected override transformIncoming(uriTransformer: IURITransformer, _resource: UriComponents, supportVSCodeResource = false): URI {\n\t\tif (supportVSCodeResource && _resource.path === '/vscode-resource' && _resource.query) {\n\t\t\tconst requestResourcePath = JSON.parse(_resource.query).requestResourcePath;\n\n\t\t\treturn URI.from({ scheme: 'file', path: requestResourcePath });\n\t\t}\n\n\t\treturn URI.revive(uriTransformer.transformIncoming(_resource));\n\t}\n\n\t//#region File Watching\n\n\tprotected createSessionFileWatcher(uriTransformer: IURITransformer, emitter: Emitter<IFileChange[] | string>): ISessionFileWatcher {\n\t\treturn new SessionFileWatcher(uriTransformer, emitter, this.logService, this.environmentService);\n\t}\n\n\t//#endregion\n}\n\nclass SessionFileWatcher extends AbstractSessionFileWatcher {\n\n\tconstructor(\n\t\turiTransformer: IURITransformer,\n\t\tsessionEmitter: Emitter<IFileChange[] | string>,\n\t\tlogService: ILogService,\n\t\tenvironmentService: IServerEnvironmentService\n\t) {\n\t\tsuper(uriTransformer, sessionEmitter, logService, environmentService);\n\t}\n\n\tprotected override getRecursiveWatcherOptions(environmentService: IServerEnvironmentService): IRecursiveWatcherOptions | undefined {\n\t\tconst fileWatcherPolling = environmentService.args['file-watcher-polling'];\n\t\tif (fileWatcherPolling) {\n\t\t\tconst segments = fileWatcherPolling.split(delimiter);\n\t\t\tconst pollingInterval = Number(segments[0]);\n\t\t\tif (pollingInterval > 0) {\n\t\t\t\tconst usePolling = segments.length > 1 ? segments.slice(1) : true;\n\t\t\t\treturn { usePolling, pollingInterval };\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tprotected override getExtraExcludes(environmentService: IServerEnvironmentService): string[] | undefined {\n\t\tif (environmentService.extensionsPath) {\n\t\t\t// when opening the $HOME folder, we end up watching the extension folder\n\t\t\t// so simply exclude watching the extensions folder\n\t\t\treturn [posix.join(environmentService.extensionsPath, '**')];\n\t\t}\n\n\t\treturn undefined;\n\t}\n}\n"]}