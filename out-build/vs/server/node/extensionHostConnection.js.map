{"version":3,"sources":["file:///workspace/appflow/src/vs/server/node/extensionHostConnection.ts"],"names":[],"mappings":"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","file":"extensionHostConnection.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as cp from 'child_process';\nimport * as net from 'net';\nimport { getNLSConfiguration } from 'vs/server/node/remoteLanguagePacks';\nimport { FileAccess } from 'vs/base/common/network';\nimport { join, delimiter } from 'vs/base/common/path';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { createRandomIPCHandle, NodeSocket, WebSocketNodeSocket } from 'vs/base/parts/ipc/node/ipc.net';\nimport { getResolvedShellEnv } from 'vs/platform/shell/node/shellEnv';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IRemoteExtensionHostStartParams } from 'vs/platform/remote/common/remoteAgentConnection';\nimport { IExtHostReadyMessage, IExtHostSocketMessage, IExtHostReduceGraceTimeMessage } from 'vs/workbench/services/extensions/common/extensionHostProtocol';\nimport { IServerEnvironmentService } from 'vs/server/node/serverEnvironmentService';\nimport { IProcessEnvironment, isWindows } from 'vs/base/common/platform';\nimport { removeDangerousEnvVariables } from 'vs/base/common/processes';\nimport { IExtensionHostStatusService } from 'vs/server/node/extensionHostStatusService';\nimport { DisposableStore, toDisposable } from 'vs/base/common/lifecycle';\nimport { IPCExtHostConnection, writeExtHostConnection, SocketExtHostConnection } from 'vs/workbench/services/extensions/common/extensionHostEnv';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\n\nexport async function buildUserEnvironment(startParamsEnv: { [key: string]: string | null } = {}, withUserShellEnvironment: boolean, language: string, environmentService: IServerEnvironmentService, logService: ILogService, configurationService: IConfigurationService): Promise<IProcessEnvironment> {\n\tconst nlsConfig = await getNLSConfiguration(language, environmentService.userDataPath);\n\n\tlet userShellEnv: typeof process.env = {};\n\tif (withUserShellEnvironment) {\n\t\ttry {\n\t\t\tuserShellEnv = await getResolvedShellEnv(configurationService, logService, environmentService.args, process.env);\n\t\t} catch (error) {\n\t\t\tlogService.error('ExtensionHostConnection#buildUserEnvironment resolving shell environment failed', error);\n\t\t}\n\t}\n\n\tconst processEnv = process.env;\n\n\tconst env: IProcessEnvironment = {\n\t\t...processEnv,\n\t\t...userShellEnv,\n\t\t...{\n\t\t\tVSCODE_AMD_ENTRYPOINT: 'vs/workbench/api/node/extensionHostProcess',\n\t\t\tVSCODE_HANDLES_UNCAUGHT_ERRORS: 'true',\n\t\t\tVSCODE_NLS_CONFIG: JSON.stringify(nlsConfig, undefined, 0)\n\t\t},\n\t\t...startParamsEnv\n\t};\n\n\tconst binFolder = environmentService.isBuilt ? join(environmentService.appRoot, 'bin') : join(environmentService.appRoot, 'resources', 'server', 'bin-dev');\n\tconst remoteCliBinFolder = join(binFolder, 'remote-cli'); // contains the `code` command that can talk to the remote server\n\n\tlet PATH = readCaseInsensitive(env, 'PATH');\n\tif (PATH) {\n\t\tPATH = remoteCliBinFolder + delimiter + PATH;\n\t} else {\n\t\tPATH = remoteCliBinFolder;\n\t}\n\tsetCaseInsensitive(env, 'PATH', PATH);\n\n\tif (!environmentService.args['without-browser-env-var']) {\n\t\tenv.BROWSER = join(binFolder, 'helpers', isWindows ? 'browser.cmd' : 'browser.sh'); // a command that opens a browser on the local machine\n\t}\n\n\tremoveNulls(env);\n\treturn env;\n}\n\nclass ConnectionData {\n\tconstructor(\n\t\tpublic readonly socket: NodeSocket | WebSocketNodeSocket,\n\t\tpublic readonly initialDataChunk: VSBuffer\n\t) { }\n\n\tpublic socketDrain(): Promise<void> {\n\t\treturn this.socket.drain();\n\t}\n\n\tpublic toIExtHostSocketMessage(): IExtHostSocketMessage {\n\n\t\tlet skipWebSocketFrames: boolean;\n\t\tlet permessageDeflate: boolean;\n\t\tlet inflateBytes: VSBuffer;\n\n\t\tif (this.socket instanceof NodeSocket) {\n\t\t\tskipWebSocketFrames = true;\n\t\t\tpermessageDeflate = false;\n\t\t\tinflateBytes = VSBuffer.alloc(0);\n\t\t} else {\n\t\t\tskipWebSocketFrames = false;\n\t\t\tpermessageDeflate = this.socket.permessageDeflate;\n\t\t\tinflateBytes = this.socket.recordedInflateBytes;\n\t\t}\n\n\t\treturn {\n\t\t\ttype: 'VSCODE_EXTHOST_IPC_SOCKET',\n\t\t\tinitialDataChunk: (<Buffer>this.initialDataChunk.buffer).toString('base64'),\n\t\t\tskipWebSocketFrames: skipWebSocketFrames,\n\t\t\tpermessageDeflate: permessageDeflate,\n\t\t\tinflateBytes: (<Buffer>inflateBytes.buffer).toString('base64'),\n\t\t};\n\t}\n}\n\nexport class ExtensionHostConnection {\n\n\tprivate _onClose = new Emitter<void>();\n\treadonly onClose: Event<void> = this._onClose.event;\n\n\tprivate readonly _canSendSocket: boolean;\n\tprivate _disposed: boolean;\n\tprivate _remoteAddress: string;\n\tprivate _extensionHostProcess: cp.ChildProcess | null;\n\tprivate _connectionData: ConnectionData | null;\n\n\tconstructor(\n\t\tprivate readonly _reconnectionToken: string,\n\t\tremoteAddress: string,\n\t\tsocket: NodeSocket | WebSocketNodeSocket,\n\t\tinitialDataChunk: VSBuffer,\n\t\t@IServerEnvironmentService private readonly _environmentService: IServerEnvironmentService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IExtensionHostStatusService private readonly _extensionHostStatusService: IExtensionHostStatusService,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService\n\t) {\n\t\tthis._canSendSocket = (!isWindows || !this._environmentService.args['socket-path']);\n\t\tthis._disposed = false;\n\t\tthis._remoteAddress = remoteAddress;\n\t\tthis._extensionHostProcess = null;\n\t\tthis._connectionData = new ConnectionData(socket, initialDataChunk);\n\n\t\tthis._log(`New connection established.`);\n\t}\n\n\tprivate get _logPrefix(): string {\n\t\treturn `[${this._remoteAddress}][${this._reconnectionToken.substr(0, 8)}][ExtensionHostConnection] `;\n\t}\n\n\tprivate _log(_str: string): void {\n\t\tthis._logService.info(`${this._logPrefix}${_str}`);\n\t}\n\n\tprivate _logError(_str: string): void {\n\t\tthis._logService.error(`${this._logPrefix}${_str}`);\n\t}\n\n\tprivate async _pipeSockets(extHostSocket: net.Socket, connectionData: ConnectionData): Promise<void> {\n\n\t\tconst disposables = new DisposableStore();\n\t\tdisposables.add(connectionData.socket);\n\t\tdisposables.add(toDisposable(() => {\n\t\t\textHostSocket.destroy();\n\t\t}));\n\n\t\tconst stopAndCleanup = () => {\n\t\t\tdisposables.dispose();\n\t\t};\n\n\t\tdisposables.add(connectionData.socket.onEnd(stopAndCleanup));\n\t\tdisposables.add(connectionData.socket.onClose(stopAndCleanup));\n\n\t\tdisposables.add(Event.fromNodeEventEmitter<void>(extHostSocket, 'end')(stopAndCleanup));\n\t\tdisposables.add(Event.fromNodeEventEmitter<void>(extHostSocket, 'close')(stopAndCleanup));\n\t\tdisposables.add(Event.fromNodeEventEmitter<void>(extHostSocket, 'error')(stopAndCleanup));\n\n\t\tdisposables.add(connectionData.socket.onData((e) => extHostSocket.write(e.buffer)));\n\t\tdisposables.add(Event.fromNodeEventEmitter<Buffer>(extHostSocket, 'data')((e) => {\n\t\t\tconnectionData.socket.write(VSBuffer.wrap(e));\n\t\t}));\n\n\t\tif (connectionData.initialDataChunk.byteLength > 0) {\n\t\t\textHostSocket.write(connectionData.initialDataChunk.buffer);\n\t\t}\n\t}\n\n\tprivate async _sendSocketToExtensionHost(extensionHostProcess: cp.ChildProcess, connectionData: ConnectionData): Promise<void> {\n\t\t// Make sure all outstanding writes have been drained before sending the socket\n\t\tawait connectionData.socketDrain();\n\t\tconst msg = connectionData.toIExtHostSocketMessage();\n\t\tlet socket: net.Socket;\n\t\tif (connectionData.socket instanceof NodeSocket) {\n\t\t\tsocket = connectionData.socket.socket;\n\t\t} else {\n\t\t\tsocket = connectionData.socket.socket.socket;\n\t\t}\n\t\textensionHostProcess.send(msg, socket);\n\t}\n\n\tpublic shortenReconnectionGraceTimeIfNecessary(): void {\n\t\tif (!this._extensionHostProcess) {\n\t\t\treturn;\n\t\t}\n\t\tconst msg: IExtHostReduceGraceTimeMessage = {\n\t\t\ttype: 'VSCODE_EXTHOST_IPC_REDUCE_GRACE_TIME'\n\t\t};\n\t\tthis._extensionHostProcess.send(msg);\n\t}\n\n\tpublic acceptReconnection(remoteAddress: string, _socket: NodeSocket | WebSocketNodeSocket, initialDataChunk: VSBuffer): void {\n\t\tthis._remoteAddress = remoteAddress;\n\t\tthis._log(`The client has reconnected.`);\n\t\tconst connectionData = new ConnectionData(_socket, initialDataChunk);\n\n\t\tif (!this._extensionHostProcess) {\n\t\t\t// The extension host didn't even start up yet\n\t\t\tthis._connectionData = connectionData;\n\t\t\treturn;\n\t\t}\n\n\t\tthis._sendSocketToExtensionHost(this._extensionHostProcess, connectionData);\n\t}\n\n\tprivate _cleanResources(): void {\n\t\tif (this._disposed) {\n\t\t\t// already called\n\t\t\treturn;\n\t\t}\n\t\tthis._disposed = true;\n\t\tif (this._connectionData) {\n\t\t\tthis._connectionData.socket.end();\n\t\t\tthis._connectionData = null;\n\t\t}\n\t\tif (this._extensionHostProcess) {\n\t\t\tthis._extensionHostProcess.kill();\n\t\t\tthis._extensionHostProcess = null;\n\t\t}\n\t\tthis._onClose.fire(undefined);\n\t}\n\n\tpublic async start(startParams: IRemoteExtensionHostStartParams): Promise<void> {\n\t\ttry {\n\t\t\tlet execArgv: string[] = process.execArgv ? process.execArgv.filter(a => !/^--inspect(-brk)?=/.test(a)) : [];\n\t\t\tif (startParams.port && !(<any>process).pkg) {\n\t\t\t\texecArgv = [`--inspect${startParams.break ? '-brk' : ''}=${startParams.port}`];\n\t\t\t}\n\n\t\t\tconst env = await buildUserEnvironment(startParams.env, true, startParams.language, this._environmentService, this._logService, this._configurationService);\n\t\t\tremoveDangerousEnvVariables(env);\n\n\t\t\tlet extHostNamedPipeServer: net.Server | null;\n\n\t\t\tif (this._canSendSocket) {\n\t\t\t\twriteExtHostConnection(new SocketExtHostConnection(), env);\n\t\t\t\textHostNamedPipeServer = null;\n\t\t\t} else {\n\t\t\t\tconst { namedPipeServer, pipeName } = await this._listenOnPipe();\n\t\t\t\twriteExtHostConnection(new IPCExtHostConnection(pipeName), env);\n\t\t\t\textHostNamedPipeServer = namedPipeServer;\n\t\t\t}\n\n\t\t\tconst opts = {\n\t\t\t\tenv,\n\t\t\t\texecArgv,\n\t\t\t\tsilent: true\n\t\t\t};\n\n\t\t\t// Refs https://github.com/microsoft/vscode/issues/189805\n\t\t\topts.execArgv.unshift('--dns-result-order=ipv4first');\n\n\t\t\t// Run Extension Host as fork of current process\n\t\t\tconst args = ['--type=extensionHost', `--transformURIs`];\n\t\t\tconst useHostProxy = this._environmentService.args['use-host-proxy'];\n\t\t\targs.push(`--useHostProxy=${useHostProxy ? 'true' : 'false'}`);\n\t\t\tthis._extensionHostProcess = cp.fork(FileAccess.asFileUri('bootstrap-fork').fsPath, args, opts);\n\t\t\tconst pid = this._extensionHostProcess.pid;\n\t\t\tthis._log(`<${pid}> Launched Extension Host Process.`);\n\n\t\t\t// Catch all output coming from the extension host process\n\t\t\tthis._extensionHostProcess.stdout!.setEncoding('utf8');\n\t\t\tthis._extensionHostProcess.stderr!.setEncoding('utf8');\n\t\t\tconst onStdout = Event.fromNodeEventEmitter<string>(this._extensionHostProcess.stdout!, 'data');\n\t\t\tconst onStderr = Event.fromNodeEventEmitter<string>(this._extensionHostProcess.stderr!, 'data');\n\t\t\tonStdout((e) => this._log(`<${pid}> ${e}`));\n\t\t\tonStderr((e) => this._log(`<${pid}><stderr> ${e}`));\n\n\t\t\t// Lifecycle\n\t\t\tthis._extensionHostProcess.on('error', (err) => {\n\t\t\t\tthis._logError(`<${pid}> Extension Host Process had an error`);\n\t\t\t\tthis._logService.error(err);\n\t\t\t\tthis._cleanResources();\n\t\t\t});\n\n\t\t\tthis._extensionHostProcess.on('exit', (code: number, signal: string) => {\n\t\t\t\tthis._extensionHostStatusService.setExitInfo(this._reconnectionToken, { code, signal });\n\t\t\t\tthis._log(`<${pid}> Extension Host Process exited with code: ${code}, signal: ${signal}.`);\n\t\t\t\tthis._cleanResources();\n\t\t\t});\n\n\t\t\tif (extHostNamedPipeServer) {\n\t\t\t\textHostNamedPipeServer.on('connection', (socket) => {\n\t\t\t\t\textHostNamedPipeServer!.close();\n\t\t\t\t\tthis._pipeSockets(socket, this._connectionData!);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst messageListener = (msg: IExtHostReadyMessage) => {\n\t\t\t\t\tif (msg.type === 'VSCODE_EXTHOST_IPC_READY') {\n\t\t\t\t\t\tthis._extensionHostProcess!.removeListener('message', messageListener);\n\t\t\t\t\t\tthis._sendSocketToExtensionHost(this._extensionHostProcess!, this._connectionData!);\n\t\t\t\t\t\tthis._connectionData = null;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tthis._extensionHostProcess.on('message', messageListener);\n\t\t\t}\n\n\t\t} catch (error) {\n\t\t\tconsole.error('ExtensionHostConnection errored');\n\t\t\tif (error) {\n\t\t\t\tconsole.error(error);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _listenOnPipe(): Promise<{ pipeName: string; namedPipeServer: net.Server }> {\n\t\treturn new Promise<{ pipeName: string; namedPipeServer: net.Server }>((resolve, reject) => {\n\t\t\tconst pipeName = createRandomIPCHandle();\n\n\t\t\tconst namedPipeServer = net.createServer();\n\t\t\tnamedPipeServer.on('error', reject);\n\t\t\tnamedPipeServer.listen(pipeName, () => {\n\t\t\t\tnamedPipeServer?.removeListener('error', reject);\n\t\t\t\tresolve({ pipeName, namedPipeServer });\n\t\t\t});\n\t\t});\n\t}\n}\n\nfunction readCaseInsensitive(env: { [key: string]: string | undefined }, key: string): string | undefined {\n\tconst pathKeys = Object.keys(env).filter(k => k.toLowerCase() === key.toLowerCase());\n\tconst pathKey = pathKeys.length > 0 ? pathKeys[0] : key;\n\treturn env[pathKey];\n}\n\nfunction setCaseInsensitive(env: { [key: string]: unknown }, key: string, value: string): void {\n\tconst pathKeys = Object.keys(env).filter(k => k.toLowerCase() === key.toLowerCase());\n\tconst pathKey = pathKeys.length > 0 ? pathKeys[0] : key;\n\tenv[pathKey] = value;\n}\n\nfunction removeNulls(env: { [key: string]: unknown | null }): void {\n\t// Don't delete while iterating the object itself\n\tfor (const key of Object.keys(env)) {\n\t\tif (env[key] === null) {\n\t\t\tdelete env[key];\n\t\t}\n\t}\n}\n"]}