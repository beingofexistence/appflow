{"version":3,"sources":["vs/server/node/remoteExtensionHostAgentCli.ts"],"names":[],"mappings":"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","file":"remoteExtensionHostAgentCli.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ServiceCollection } from 'vs/platform/instantiation/common/serviceCollection';\nimport { ConsoleLogger, getLogLevel, ILoggerService, ILogService } from 'vs/platform/log/common/log';\nimport { SyncDescriptor } from 'vs/platform/instantiation/common/descriptors';\nimport { ConfigurationService } from 'vs/platform/configuration/common/configurationService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IRequestService } from 'vs/platform/request/common/request';\nimport { RequestService } from 'vs/platform/request/node/requestService';\nimport { NullTelemetryService } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IExtensionGalleryService, InstallOptions } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { ExtensionGalleryServiceWithNoStorageService } from 'vs/platform/extensionManagement/common/extensionGalleryService';\nimport { ExtensionManagementService, INativeServerExtensionManagementService } from 'vs/platform/extensionManagement/node/extensionManagementService';\nimport { ExtensionSignatureVerificationService, IExtensionSignatureVerificationService } from 'vs/platform/extensionManagement/node/extensionSignatureVerificationService';\nimport { InstantiationService } from 'vs/platform/instantiation/common/instantiationService';\nimport { IInstantiationService } from 'vs/platform/instantiation/common/instantiation';\nimport product from 'vs/platform/product/common/product';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { DiskFileSystemProvider } from 'vs/platform/files/node/diskFileSystemProvider';\nimport { Schemas } from 'vs/base/common/network';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IServerEnvironmentService, ServerEnvironmentService, ServerParsedArgs } from 'vs/server/node/serverEnvironmentService';\nimport { ExtensionManagementCLI } from 'vs/platform/extensionManagement/common/extensionManagementCLI';\nimport { ILanguagePackService } from 'vs/platform/languagePacks/common/languagePacks';\nimport { NativeLanguagePackService } from 'vs/platform/languagePacks/node/languagePacks';\nimport { getErrorMessage } from 'vs/base/common/errors';\nimport { URI } from 'vs/base/common/uri';\nimport { isAbsolute, join } from 'vs/base/common/path';\nimport { cwd } from 'vs/base/common/process';\nimport { DownloadService } from 'vs/platform/download/common/downloadService';\nimport { IDownloadService } from 'vs/platform/download/common/download';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { UriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentityService';\nimport { buildHelpMessage, buildVersionMessage, OptionDescriptions } from 'vs/platform/environment/node/argv';\nimport { isWindows } from 'vs/base/common/platform';\nimport { IExtensionsScannerService } from 'vs/platform/extensionManagement/common/extensionsScannerService';\nimport { ExtensionsScannerService } from 'vs/server/node/extensionsScannerService';\nimport { IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { IExtensionsProfileScannerService } from 'vs/platform/extensionManagement/common/extensionsProfileScannerService';\nimport { NullPolicyService } from 'vs/platform/policy/common/policy';\nimport { ServerUserDataProfilesService } from 'vs/platform/userDataProfile/node/userDataProfile';\nimport { ExtensionsProfileScannerService } from 'vs/platform/extensionManagement/node/extensionsProfileScannerService';\nimport { LogService } from 'vs/platform/log/common/logService';\nimport { LoggerService } from 'vs/platform/log/node/loggerService';\nimport { localize } from 'vs/nls';\nimport { addUNCHostToAllowlist, disableUNCAccessRestrictions } from 'vs/base/node/unc';\n\nclass CliMain extends Disposable {\n\n\tconstructor(private readonly args: ServerParsedArgs, private readonly remoteDataFolder: string) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\t// Dispose on exit\n\t\tprocess.once('exit', () => this.dispose());\n\t}\n\n\tasync run(): Promise<void> {\n\t\tconst instantiationService = await this.initServices();\n\t\tawait instantiationService.invokeFunction(async accessor => {\n\t\t\tconst configurationService = accessor.get(IConfigurationService);\n\t\t\tconst logService = accessor.get(ILogService);\n\n\t\t\t// On Windows, configure the UNC allow list based on settings\n\t\t\tif (isWindows) {\n\t\t\t\tif (configurationService.getValue('security.restrictUNCAccess') === false) {\n\t\t\t\t\tdisableUNCAccessRestrictions();\n\t\t\t\t} else {\n\t\t\t\t\taddUNCHostToAllowlist(configurationService.getValue('security.allowedUNCHosts'));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tawait this.doRun(instantiationService.createInstance(ExtensionManagementCLI, new ConsoleLogger(logService.getLevel(), false)));\n\t\t\t} catch (error) {\n\t\t\t\tlogService.error(error);\n\t\t\t\tconsole.error(getErrorMessage(error));\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async initServices(): Promise<IInstantiationService> {\n\t\tconst services = new ServiceCollection();\n\n\t\tconst productService = { _serviceBrand: undefined, ...product };\n\t\tservices.set(IProductService, productService);\n\n\t\tconst environmentService = new ServerEnvironmentService(this.args, productService);\n\t\tservices.set(IServerEnvironmentService, environmentService);\n\n\t\tconst loggerService = new LoggerService(getLogLevel(environmentService), environmentService.logsHome);\n\t\tservices.set(ILoggerService, loggerService);\n\n\t\tconst logService = new LogService(this._register(loggerService.createLogger('remoteCLI', { name: localize('remotecli', \"Remote CLI\") })));\n\t\tservices.set(ILogService, logService);\n\t\tlogService.trace(`Remote configuration data at ${this.remoteDataFolder}`);\n\t\tlogService.trace('process arguments:', this.args);\n\n\t\t// Files\n\t\tconst fileService = this._register(new FileService(logService));\n\t\tservices.set(IFileService, fileService);\n\t\tfileService.registerProvider(Schemas.file, this._register(new DiskFileSystemProvider(logService)));\n\n\t\tconst uriIdentityService = new UriIdentityService(fileService);\n\t\tservices.set(IUriIdentityService, uriIdentityService);\n\n\t\t// User Data Profiles\n\t\tconst userDataProfilesService = this._register(new ServerUserDataProfilesService(uriIdentityService, environmentService, fileService, logService));\n\t\tservices.set(IUserDataProfilesService, userDataProfilesService);\n\n\t\t// Configuration\n\t\tconst configurationService = this._register(new ConfigurationService(userDataProfilesService.defaultProfile.settingsResource, fileService, new NullPolicyService(), logService));\n\t\tservices.set(IConfigurationService, configurationService);\n\n\t\t// Initialize\n\t\tawait Promise.all([\n\t\t\tconfigurationService.initialize(),\n\t\t\tuserDataProfilesService.init()\n\t\t]);\n\n\t\tservices.set(IRequestService, new SyncDescriptor(RequestService));\n\t\tservices.set(IDownloadService, new SyncDescriptor(DownloadService));\n\t\tservices.set(ITelemetryService, NullTelemetryService);\n\t\tservices.set(IExtensionGalleryService, new SyncDescriptor(ExtensionGalleryServiceWithNoStorageService));\n\t\tservices.set(IExtensionsProfileScannerService, new SyncDescriptor(ExtensionsProfileScannerService));\n\t\tservices.set(IExtensionsScannerService, new SyncDescriptor(ExtensionsScannerService));\n\t\tservices.set(IExtensionSignatureVerificationService, new SyncDescriptor(ExtensionSignatureVerificationService));\n\t\tservices.set(INativeServerExtensionManagementService, new SyncDescriptor(ExtensionManagementService));\n\t\tservices.set(ILanguagePackService, new SyncDescriptor(NativeLanguagePackService));\n\n\t\treturn new InstantiationService(services);\n\t}\n\n\tprivate async doRun(extensionManagementCLI: ExtensionManagementCLI): Promise<void> {\n\n\t\t// List Extensions\n\t\tif (this.args['list-extensions']) {\n\t\t\treturn extensionManagementCLI.listExtensions(!!this.args['show-versions'], this.args['category']);\n\t\t}\n\n\t\t// Install Extension\n\t\telse if (this.args['install-extension'] || this.args['install-builtin-extension']) {\n\t\t\tconst installOptions: InstallOptions = { isMachineScoped: !!this.args['do-not-sync'], installPreReleaseVersion: !!this.args['pre-release'] };\n\t\t\treturn extensionManagementCLI.installExtensions(this.asExtensionIdOrVSIX(this.args['install-extension'] || []), this.asExtensionIdOrVSIX(this.args['install-builtin-extension'] || []), installOptions, !!this.args['force']);\n\t\t}\n\n\t\t// Uninstall Extension\n\t\telse if (this.args['uninstall-extension']) {\n\t\t\treturn extensionManagementCLI.uninstallExtensions(this.asExtensionIdOrVSIX(this.args['uninstall-extension']), !!this.args['force']);\n\t\t}\n\n\t\t// Locate Extension\n\t\telse if (this.args['locate-extension']) {\n\t\t\treturn extensionManagementCLI.locateExtension(this.args['locate-extension']);\n\t\t}\n\t}\n\n\tprivate asExtensionIdOrVSIX(inputs: string[]): (string | URI)[] {\n\t\treturn inputs.map(input => /\\.vsix$/i.test(input) ? URI.file(isAbsolute(input) ? input : join(cwd(), input)) : input);\n\t}\n}\n\nfunction eventuallyExit(code: number): void {\n\tsetTimeout(() => process.exit(code), 0);\n}\n\nexport async function run(args: ServerParsedArgs, REMOTE_DATA_FOLDER: string, optionDescriptions: OptionDescriptions<ServerParsedArgs>): Promise<void> {\n\tif (args.help) {\n\t\tconst executable = product.serverApplicationName + (isWindows ? '.cmd' : '');\n\t\tconsole.log(buildHelpMessage(product.nameLong, executable, product.version, optionDescriptions, { noInputFiles: true, noPipe: true }));\n\t\treturn;\n\t}\n\t// Version Info\n\tif (args.version) {\n\t\tconsole.log(buildVersionMessage(product.version, product.commit));\n\t\treturn;\n\t}\n\n\n\tconst cliMain = new CliMain(args, REMOTE_DATA_FOLDER);\n\ttry {\n\t\tawait cliMain.run();\n\t\teventuallyExit(0);\n\t} catch (err) {\n\t\teventuallyExit(1);\n\t} finally {\n\t\tcliMain.dispose();\n\t}\n}\n"]}