{"version":3,"sources":["file:///workspace/appflow/src/vs/server/test/node/serverConnectionToken.test.ts"],"names":[],"mappings":"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","file":"serverConnectionToken.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as fs from 'fs';\nimport * as os from 'os';\nimport * as path from 'path';\nimport { getRandomTestPath } from 'vs/base/test/node/testUtils';\nimport { parseServerConnectionToken, ServerConnectionToken, ServerConnectionTokenParseError, ServerConnectionTokenType } from 'vs/server/node/serverConnectionToken';\nimport { ServerParsedArgs } from 'vs/server/node/serverEnvironmentService';\n\nsuite('parseServerConnectionToken', () => {\n\n\tfunction isError(r: ServerConnectionToken | ServerConnectionTokenParseError): r is ServerConnectionTokenParseError {\n\t\treturn (r instanceof ServerConnectionTokenParseError);\n\t}\n\n\tfunction assertIsError(r: ServerConnectionToken | ServerConnectionTokenParseError): void {\n\t\tassert.strictEqual(isError(r), true);\n\t}\n\n\ttest('no arguments generates a token that is mandatory', async () => {\n\t\tconst result = await parseServerConnectionToken({} as ServerParsedArgs, async () => 'defaultTokenValue');\n\t\tassert.ok(!(result instanceof ServerConnectionTokenParseError));\n\t\tassert.ok(result.type === ServerConnectionTokenType.Mandatory);\n\t});\n\n\ttest('--without-connection-token', async () => {\n\t\tconst result = await parseServerConnectionToken({ 'without-connection-token': true } as ServerParsedArgs, async () => 'defaultTokenValue');\n\t\tassert.ok(!(result instanceof ServerConnectionTokenParseError));\n\t\tassert.ok(result.type === ServerConnectionTokenType.None);\n\t});\n\n\ttest('--without-connection-token --connection-token results in error', async () => {\n\t\tassertIsError(await parseServerConnectionToken({ 'without-connection-token': true, 'connection-token': '0' } as ServerParsedArgs, async () => 'defaultTokenValue'));\n\t});\n\n\ttest('--without-connection-token --connection-token-file results in error', async () => {\n\t\tassertIsError(await parseServerConnectionToken({ 'without-connection-token': true, 'connection-token-file': '0' } as ServerParsedArgs, async () => 'defaultTokenValue'));\n\t});\n\n\ttest('--connection-token-file --connection-token results in error', async () => {\n\t\tassertIsError(await parseServerConnectionToken({ 'connection-token-file': '0', 'connection-token': '0' } as ServerParsedArgs, async () => 'defaultTokenValue'));\n\t});\n\n\ttest('--connection-token-file', async function () {\n\t\tthis.timeout(10000);\n\t\tconst testDir = getRandomTestPath(os.tmpdir(), 'vsctests', 'server-connection-token');\n\t\tfs.mkdirSync(testDir, { recursive: true });\n\t\tconst filename = path.join(testDir, 'connection-token-file');\n\t\tconst connectionToken = `12345-123-abc`;\n\t\tfs.writeFileSync(filename, connectionToken);\n\t\tconst result = await parseServerConnectionToken({ 'connection-token-file': filename } as ServerParsedArgs, async () => 'defaultTokenValue');\n\t\tassert.ok(!(result instanceof ServerConnectionTokenParseError));\n\t\tassert.ok(result.type === ServerConnectionTokenType.Mandatory);\n\t\tassert.strictEqual(result.value, connectionToken);\n\t\tfs.rmSync(testDir, { recursive: true, force: true });\n\t});\n\n\ttest('--connection-token', async () => {\n\t\tconst connectionToken = `12345-123-abc`;\n\t\tconst result = await parseServerConnectionToken({ 'connection-token': connectionToken } as ServerParsedArgs, async () => 'defaultTokenValue');\n\t\tassert.ok(!(result instanceof ServerConnectionTokenParseError));\n\t\tassert.ok(result.type === ServerConnectionTokenType.Mandatory);\n\t\tassert.strictEqual(result.value, connectionToken);\n\t});\n\n});\n"]}