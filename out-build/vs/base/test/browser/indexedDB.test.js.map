{"version":3,"sources":["file:///workspace/appflow/src/vs/base/test/browser/indexedDB.test.ts"],"names":[],"mappings":"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","file":"indexedDB.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as assert from 'assert';\nimport { IndexedDB } from 'vs/base/browser/indexedDB';\nimport { flakySuite } from 'vs/base/test/common/testUtils';\n\nflakySuite('IndexedDB', () => {\n\n\tlet indexedDB: IndexedDB;\n\n\tsetup(async () => {\n\t\tindexedDB = await IndexedDB.create('vscode-indexeddb-test', 1, ['test-store']);\n\t\tawait indexedDB.runInTransaction('test-store', 'readwrite', store => store.clear());\n\t});\n\n\tteardown(() => {\n\t\tindexedDB?.close();\n\t});\n\n\ttest('runInTransaction', async () => {\n\t\tawait indexedDB.runInTransaction('test-store', 'readwrite', store => store.add('hello1', 'key1'));\n\t\tconst value = await indexedDB.runInTransaction('test-store', 'readonly', store => store.get('key1'));\n\t\tassert.deepStrictEqual(value, 'hello1');\n\t});\n\n\ttest('getKeyValues', async () => {\n\t\tawait indexedDB.runInTransaction('test-store', 'readwrite', store => {\n\t\t\tconst requests: IDBRequest[] = [];\n\t\t\trequests.push(store.add('hello1', 'key1'));\n\t\t\trequests.push(store.add('hello2', 'key2'));\n\t\t\trequests.push(store.add(true, 'key3'));\n\n\t\t\treturn requests;\n\t\t});\n\t\tfunction isValid(value: unknown): value is string {\n\t\t\treturn typeof value === 'string';\n\t\t}\n\t\tconst keyValues = await indexedDB.getKeyValues('test-store', isValid);\n\t\tassert.strictEqual(keyValues.size, 2);\n\t\tassert.strictEqual(keyValues.get('key1'), 'hello1');\n\t\tassert.strictEqual(keyValues.get('key2'), 'hello2');\n\t});\n\n\ttest('hasPendingTransactions', async () => {\n\t\tconst promise = indexedDB.runInTransaction('test-store', 'readwrite', store => store.add('hello2', 'key2'));\n\t\tassert.deepStrictEqual(indexedDB.hasPendingTransactions(), true);\n\t\tawait promise;\n\t\tassert.deepStrictEqual(indexedDB.hasPendingTransactions(), false);\n\t});\n\n\ttest('close', async () => {\n\t\tconst promise = indexedDB.runInTransaction('test-store', 'readwrite', store => store.add('hello3', 'key3'));\n\t\tindexedDB.close();\n\t\tassert.deepStrictEqual(indexedDB.hasPendingTransactions(), false);\n\t\ttry {\n\t\t\tawait promise;\n\t\t\tassert.fail('Transaction should be aborted');\n\t\t} catch (error) { }\n\t});\n\n});\n"]}