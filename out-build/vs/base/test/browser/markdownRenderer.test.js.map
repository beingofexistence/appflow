{"version":3,"sources":["file:///workspace/appflow/src/vs/base/test/browser/markdownRenderer.test.ts"],"names":[],"mappings":"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","file":"markdownRenderer.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { fillInIncompleteTokens, renderMarkdown, renderMarkdownAsPlaintext } from 'vs/base/browser/markdownRenderer';\nimport { IMarkdownString, MarkdownString } from 'vs/base/common/htmlContent';\nimport { marked } from 'vs/base/common/marked/marked';\nimport { parse } from 'vs/base/common/marshalling';\nimport { isWeb } from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\n\nfunction strToNode(str: string): HTMLElement {\n\treturn new DOMParser().parseFromString(str, 'text/html').body.firstChild as HTMLElement;\n}\n\nfunction assertNodeEquals(actualNode: HTMLElement, expectedHtml: string) {\n\tconst expectedNode = strToNode(expectedHtml);\n\tassert.ok(\n\t\tactualNode.isEqualNode(expectedNode),\n\t\t`Expected: ${expectedNode.outerHTML}\\nActual: ${actualNode.outerHTML}`);\n}\n\nsuite('MarkdownRenderer', () => {\n\tsuite('Sanitization', () => {\n\t\ttest('Should not render images with unknown schemes', () => {\n\t\t\tconst markdown = { value: `![image](no-such://example.com/cat.gif)` };\n\t\t\tconst result: HTMLElement = renderMarkdown(markdown).element;\n\t\t\tassert.strictEqual(result.innerHTML, '<p><img alt=\"image\"></p>');\n\t\t});\n\t});\n\n\tsuite('Images', () => {\n\t\ttest('image rendering conforms to default', () => {\n\t\t\tconst markdown = { value: `![image](http://example.com/cat.gif 'caption')` };\n\t\t\tconst result: HTMLElement = renderMarkdown(markdown).element;\n\t\t\tassertNodeEquals(result, '<div><p><img title=\"caption\" alt=\"image\" src=\"http://example.com/cat.gif\"></p></div>');\n\t\t});\n\n\t\ttest('image rendering conforms to default without title', () => {\n\t\t\tconst markdown = { value: `![image](http://example.com/cat.gif)` };\n\t\t\tconst result: HTMLElement = renderMarkdown(markdown).element;\n\t\t\tassertNodeEquals(result, '<div><p><img alt=\"image\" src=\"http://example.com/cat.gif\"></p></div>');\n\t\t});\n\n\t\ttest('image width from title params', () => {\n\t\t\tconst result: HTMLElement = renderMarkdown({ value: `![image](http://example.com/cat.gif|width=100px 'caption')` }).element;\n\t\t\tassertNodeEquals(result, `<div><p><img width=\"100\" title=\"caption\" alt=\"image\" src=\"http://example.com/cat.gif\"></p></div>`);\n\t\t});\n\n\t\ttest('image height from title params', () => {\n\t\t\tconst result: HTMLElement = renderMarkdown({ value: `![image](http://example.com/cat.gif|height=100 'caption')` }).element;\n\t\t\tassertNodeEquals(result, `<div><p><img height=\"100\" title=\"caption\" alt=\"image\" src=\"http://example.com/cat.gif\"></p></div>`);\n\t\t});\n\n\t\ttest('image width and height from title params', () => {\n\t\t\tconst result: HTMLElement = renderMarkdown({ value: `![image](http://example.com/cat.gif|height=200,width=100 'caption')` }).element;\n\t\t\tassertNodeEquals(result, `<div><p><img height=\"200\" width=\"100\" title=\"caption\" alt=\"image\" src=\"http://example.com/cat.gif\"></p></div>`);\n\t\t});\n\n\t\ttest('image with file uri should render as same origin uri', () => {\n\t\t\tif (isWeb) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst result: HTMLElement = renderMarkdown({ value: `![image](file:///images/cat.gif)` }).element;\n\t\t\tassertNodeEquals(result, '<div><p><img src=\"vscode-file://vscode-app/images/cat.gif\" alt=\"image\"></p></div>');\n\t\t});\n\t});\n\n\tsuite('Code block renderer', () => {\n\t\tconst simpleCodeBlockRenderer = (lang: string, code: string): Promise<HTMLElement> => {\n\t\t\tconst element = document.createElement('code');\n\t\t\telement.textContent = code;\n\t\t\treturn Promise.resolve(element);\n\t\t};\n\n\t\ttest('asyncRenderCallback should be invoked for code blocks', () => {\n\t\t\tconst markdown = { value: '```js\\n1 + 1;\\n```' };\n\t\t\treturn new Promise<void>(resolve => {\n\t\t\t\trenderMarkdown(markdown, {\n\t\t\t\t\tasyncRenderCallback: resolve,\n\t\t\t\t\tcodeBlockRenderer: simpleCodeBlockRenderer\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\ttest('asyncRenderCallback should not be invoked if result is immediately disposed', () => {\n\t\t\tconst markdown = { value: '```js\\n1 + 1;\\n```' };\n\t\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\t\tconst result = renderMarkdown(markdown, {\n\t\t\t\t\tasyncRenderCallback: reject,\n\t\t\t\t\tcodeBlockRenderer: simpleCodeBlockRenderer\n\t\t\t\t});\n\t\t\t\tresult.dispose();\n\t\t\t\tsetTimeout(resolve, 50);\n\t\t\t});\n\t\t});\n\n\t\ttest('asyncRenderCallback should not be invoked if dispose is called before code block is rendered', () => {\n\t\t\tconst markdown = { value: '```js\\n1 + 1;\\n```' };\n\t\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\t\tlet resolveCodeBlockRendering: (x: HTMLElement) => void;\n\t\t\t\tconst result = renderMarkdown(markdown, {\n\t\t\t\t\tasyncRenderCallback: reject,\n\t\t\t\t\tcodeBlockRenderer: () => {\n\t\t\t\t\t\treturn new Promise(resolve => {\n\t\t\t\t\t\t\tresolveCodeBlockRendering = resolve;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tresult.dispose();\n\t\t\t\t\tresolveCodeBlockRendering(document.createElement('code'));\n\t\t\t\t\tsetTimeout(resolve, 50);\n\t\t\t\t}, 50);\n\t\t\t});\n\t\t});\n\n\t\ttest('Code blocks should use leading language id (#157793)', async () => {\n\t\t\tconst markdown = { value: '```js some other stuff\\n1 + 1;\\n```' };\n\t\t\tconst lang = await new Promise<string>(resolve => {\n\t\t\t\trenderMarkdown(markdown, {\n\t\t\t\t\tcodeBlockRenderer: async (lang, value) => {\n\t\t\t\t\t\tresolve(lang);\n\t\t\t\t\t\treturn simpleCodeBlockRenderer(lang, value);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t\tassert.strictEqual(lang, 'js');\n\t\t});\n\t});\n\n\tsuite('ThemeIcons Support On', () => {\n\n\t\ttest('render appendText', () => {\n\t\t\tconst mds = new MarkdownString(undefined, { supportThemeIcons: true });\n\t\t\tmds.appendText('$(zap) $(not a theme icon) $(add)');\n\n\t\t\tconst result: HTMLElement = renderMarkdown(mds).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<p>$(zap)&nbsp;$(not&nbsp;a&nbsp;theme&nbsp;icon)&nbsp;$(add)</p>`);\n\t\t});\n\n\t\ttest('render appendMarkdown', () => {\n\t\t\tconst mds = new MarkdownString(undefined, { supportThemeIcons: true });\n\t\t\tmds.appendMarkdown('$(zap) $(not a theme icon) $(add)');\n\n\t\t\tconst result: HTMLElement = renderMarkdown(mds).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<p><span class=\"codicon codicon-zap\"></span> $(not a theme icon) <span class=\"codicon codicon-add\"></span></p>`);\n\t\t});\n\n\t\ttest('render appendMarkdown with escaped icon', () => {\n\t\t\tconst mds = new MarkdownString(undefined, { supportThemeIcons: true });\n\t\t\tmds.appendMarkdown('\\\\$(zap) $(not a theme icon) $(add)');\n\n\t\t\tconst result: HTMLElement = renderMarkdown(mds).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<p>$(zap) $(not a theme icon) <span class=\"codicon codicon-add\"></span></p>`);\n\t\t});\n\n\t\ttest('render icon in link', () => {\n\t\t\tconst mds = new MarkdownString(undefined, { supportThemeIcons: true });\n\t\t\tmds.appendMarkdown(`[$(zap)-link](#link)`);\n\n\t\t\tconst result: HTMLElement = renderMarkdown(mds).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<p><a data-href=\"#link\" href=\"\" title=\"#link\"><span class=\"codicon codicon-zap\"></span>-link</a></p>`);\n\t\t});\n\n\t\ttest('render icon in table', () => {\n\t\t\tconst mds = new MarkdownString(undefined, { supportThemeIcons: true });\n\t\t\tmds.appendMarkdown(`\n| text   | text                 |\n|--------|----------------------|\n| $(zap) | [$(zap)-link](#link) |`);\n\n\t\t\tconst result: HTMLElement = renderMarkdown(mds).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<table>\n<thead>\n<tr>\n<th>text</th>\n<th>text</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><span class=\"codicon codicon-zap\"></span></td>\n<td><a data-href=\"#link\" href=\"\" title=\"#link\"><span class=\"codicon codicon-zap\"></span>-link</a></td>\n</tr>\n</tbody></table>\n`);\n\t\t});\n\n\t\ttest('render icon in <a> without href (#152170)', () => {\n\t\t\tconst mds = new MarkdownString(undefined, { supportThemeIcons: true, supportHtml: true });\n\t\t\tmds.appendMarkdown(`<a>$(sync)</a>`);\n\n\t\t\tconst result: HTMLElement = renderMarkdown(mds).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<p><span class=\"codicon codicon-sync\"></span></p>`);\n\t\t});\n\t});\n\n\tsuite('ThemeIcons Support Off', () => {\n\n\t\ttest('render appendText', () => {\n\t\t\tconst mds = new MarkdownString(undefined, { supportThemeIcons: false });\n\t\t\tmds.appendText('$(zap) $(not a theme icon) $(add)');\n\n\t\t\tconst result: HTMLElement = renderMarkdown(mds).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<p>$(zap)&nbsp;$(not&nbsp;a&nbsp;theme&nbsp;icon)&nbsp;$(add)</p>`);\n\t\t});\n\n\t\ttest('render appendMarkdown with escaped icon', () => {\n\t\t\tconst mds = new MarkdownString(undefined, { supportThemeIcons: false });\n\t\t\tmds.appendMarkdown('\\\\$(zap) $(not a theme icon) $(add)');\n\n\t\t\tconst result: HTMLElement = renderMarkdown(mds).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<p>$(zap) $(not a theme icon) $(add)</p>`);\n\t\t});\n\t});\n\n\ttest('npm Hover Run Script not working #90855', function () {\n\n\t\tconst md: IMarkdownString = JSON.parse('{\"value\":\"[Run Script](command:npm.runScriptFromHover?%7B%22documentUri%22%3A%7B%22%24mid%22%3A1%2C%22fsPath%22%3A%22c%3A%5C%5CUsers%5C%5Cjrieken%5C%5CCode%5C%5C_sample%5C%5Cfoo%5C%5Cpackage.json%22%2C%22_sep%22%3A1%2C%22external%22%3A%22file%3A%2F%2F%2Fc%253A%2FUsers%2Fjrieken%2FCode%2F_sample%2Ffoo%2Fpackage.json%22%2C%22path%22%3A%22%2Fc%3A%2FUsers%2Fjrieken%2FCode%2F_sample%2Ffoo%2Fpackage.json%22%2C%22scheme%22%3A%22file%22%7D%2C%22script%22%3A%22echo%22%7D \\\\\"Run the script as a task\\\\\")\",\"supportThemeIcons\":false,\"isTrusted\":true,\"uris\":{\"__uri_e49443\":{\"$mid\":1,\"fsPath\":\"c:\\\\\\\\Users\\\\\\\\jrieken\\\\\\\\Code\\\\\\\\_sample\\\\\\\\foo\\\\\\\\package.json\",\"_sep\":1,\"external\":\"file:///c%3A/Users/jrieken/Code/_sample/foo/package.json\",\"path\":\"/c:/Users/jrieken/Code/_sample/foo/package.json\",\"scheme\":\"file\"},\"command:npm.runScriptFromHover?%7B%22documentUri%22%3A%7B%22%24mid%22%3A1%2C%22fsPath%22%3A%22c%3A%5C%5CUsers%5C%5Cjrieken%5C%5CCode%5C%5C_sample%5C%5Cfoo%5C%5Cpackage.json%22%2C%22_sep%22%3A1%2C%22external%22%3A%22file%3A%2F%2F%2Fc%253A%2FUsers%2Fjrieken%2FCode%2F_sample%2Ffoo%2Fpackage.json%22%2C%22path%22%3A%22%2Fc%3A%2FUsers%2Fjrieken%2FCode%2F_sample%2Ffoo%2Fpackage.json%22%2C%22scheme%22%3A%22file%22%7D%2C%22script%22%3A%22echo%22%7D\":{\"$mid\":1,\"path\":\"npm.runScriptFromHover\",\"scheme\":\"command\",\"query\":\"{\\\\\"documentUri\\\\\":\\\\\"__uri_e49443\\\\\",\\\\\"script\\\\\":\\\\\"echo\\\\\"}\"}}}');\n\t\tconst element = renderMarkdown(md).element;\n\n\t\tconst anchor = element.querySelector('a')!;\n\t\tassert.ok(anchor);\n\t\tassert.ok(anchor.dataset['href']);\n\n\t\tconst uri = URI.parse(anchor.dataset['href']!);\n\n\t\tconst data = <{ script: string; documentUri: URI }>parse(decodeURIComponent(uri.query));\n\t\tassert.ok(data);\n\t\tassert.strictEqual(data.script, 'echo');\n\t\tassert.ok(data.documentUri.toString().startsWith('file:///c%3A/'));\n\t});\n\n\ttest('Should not render command links by default', () => {\n\t\tconst md = new MarkdownString(`[command1](command:doFoo) <a href=\"command:doFoo\">command2</a>`, {\n\t\t\tsupportHtml: true\n\t\t});\n\n\t\tconst result: HTMLElement = renderMarkdown(md).element;\n\t\tassert.strictEqual(result.innerHTML, `<p>command1 command2</p>`);\n\t});\n\n\ttest('Should render command links in trusted strings', () => {\n\t\tconst md = new MarkdownString(`[command1](command:doFoo) <a href=\"command:doFoo\">command2</a>`, {\n\t\t\tisTrusted: true,\n\t\t\tsupportHtml: true,\n\t\t});\n\n\t\tconst result: HTMLElement = renderMarkdown(md).element;\n\t\tassert.strictEqual(result.innerHTML, `<p><a data-href=\"command:doFoo\" href=\"\" title=\"command:doFoo\">command1</a> <a data-href=\"command:doFoo\" href=\"\">command2</a></p>`);\n\t});\n\n\tsuite('PlaintextMarkdownRender', () => {\n\n\t\ttest('test code, blockquote, heading, list, listitem, paragraph, table, tablerow, tablecell, strong, em, br, del, text are rendered plaintext', () => {\n\t\t\tconst markdown = { value: '`code`\\n>quote\\n# heading\\n- list\\n\\n\\ntable | table2\\n--- | --- \\none | two\\n\\n\\nbo**ld**\\n_italic_\\n~~del~~\\nsome text' };\n\t\t\tconst expected = 'code\\nquote\\nheading\\nlist\\ntable table2 one two \\nbold\\nitalic\\ndel\\nsome text\\n';\n\t\t\tconst result: string = renderMarkdownAsPlaintext(markdown);\n\t\t\tassert.strictEqual(result, expected);\n\t\t});\n\n\t\ttest('test html, hr, image, link are rendered plaintext', () => {\n\t\t\tconst markdown = { value: '<div>html</div>\\n\\n---\\n![image](imageLink)\\n[text](textLink)' };\n\t\t\tconst expected = '\\ntext\\n';\n\t\t\tconst result: string = renderMarkdownAsPlaintext(markdown);\n\t\t\tassert.strictEqual(result, expected);\n\t\t});\n\t});\n\n\tsuite('supportHtml', () => {\n\t\ttest('supportHtml is disabled by default', () => {\n\t\t\tconst mds = new MarkdownString(undefined, {});\n\t\t\tmds.appendMarkdown('a<b>b</b>c');\n\n\t\t\tconst result = renderMarkdown(mds).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<p>abc</p>`);\n\t\t});\n\n\t\ttest('Renders html when supportHtml=true', () => {\n\t\t\tconst mds = new MarkdownString(undefined, { supportHtml: true });\n\t\t\tmds.appendMarkdown('a<b>b</b>c');\n\n\t\t\tconst result = renderMarkdown(mds).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<p>a<b>b</b>c</p>`);\n\t\t});\n\n\t\ttest('Should not include scripts even when supportHtml=true', () => {\n\t\t\tconst mds = new MarkdownString(undefined, { supportHtml: true });\n\t\t\tmds.appendMarkdown('a<b onclick=\"alert(1)\">b</b><script>alert(2)</script>c');\n\n\t\t\tconst result = renderMarkdown(mds).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<p>a<b>b</b>c</p>`);\n\t\t});\n\n\t\ttest('Should not render html appended as text', () => {\n\t\t\tconst mds = new MarkdownString(undefined, { supportHtml: true });\n\t\t\tmds.appendText('a<b>b</b>c');\n\n\t\t\tconst result = renderMarkdown(mds).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<p>a&lt;b&gt;b&lt;/b&gt;c</p>`);\n\t\t});\n\n\t\ttest('Should render html images', () => {\n\t\t\tif (isWeb) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst mds = new MarkdownString(undefined, { supportHtml: true });\n\t\t\tmds.appendMarkdown(`<img src=\"http://example.com/cat.gif\">`);\n\n\t\t\tconst result = renderMarkdown(mds).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<img src=\"http://example.com/cat.gif\">`);\n\t\t});\n\n\t\ttest('Should render html images with file uri as same origin uri', () => {\n\t\t\tif (isWeb) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst mds = new MarkdownString(undefined, { supportHtml: true });\n\t\t\tmds.appendMarkdown(`<img src=\"file:///images/cat.gif\">`);\n\n\t\t\tconst result = renderMarkdown(mds).element;\n\t\t\tassert.strictEqual(result.innerHTML, `<img src=\"vscode-file://vscode-app/images/cat.gif\">`);\n\t\t});\n\t});\n\n\tsuite('fillInIncompleteTokens', () => {\n\t\tfunction ignoreRaw(...tokenLists: marked.Token[][]): void {\n\t\t\ttokenLists.forEach(tokens => {\n\t\t\t\ttokens.forEach(t => t.raw = '');\n\t\t\t});\n\t\t}\n\n\t\tconst completeTable = '| a | b |\\n| --- | --- |';\n\n\t\tsuite('table', () => {\n\t\t\ttest('complete table', () => {\n\t\t\t\tconst tokens = marked.lexer(completeTable);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\t\t\t\tassert.equal(newTokens, tokens);\n\t\t\t});\n\n\t\t\ttest('full header only', () => {\n\t\t\t\tconst incompleteTable = '| a | b |';\n\t\t\t\tconst tokens = marked.lexer(incompleteTable);\n\t\t\t\tconst completeTableTokens = marked.lexer(completeTable);\n\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTableTokens);\n\t\t\t});\n\n\t\t\ttest('full header only with trailing space', () => {\n\t\t\t\tconst incompleteTable = '| a | b | ';\n\t\t\t\tconst tokens = marked.lexer(incompleteTable);\n\t\t\t\tconst completeTableTokens = marked.lexer(completeTable);\n\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\t\t\t\tignoreRaw(newTokens, completeTableTokens);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTableTokens);\n\t\t\t});\n\n\t\t\ttest('incomplete header', () => {\n\t\t\t\tconst incompleteTable = '| a | b';\n\t\t\t\tconst tokens = marked.lexer(incompleteTable);\n\t\t\t\tconst completeTableTokens = marked.lexer(completeTable);\n\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tignoreRaw(newTokens, completeTableTokens);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTableTokens);\n\t\t\t});\n\n\t\t\ttest('incomplete header one column', () => {\n\t\t\t\tconst incompleteTable = '| a ';\n\t\t\t\tconst tokens = marked.lexer(incompleteTable);\n\t\t\t\tconst completeTableTokens = marked.lexer(incompleteTable + '|\\n| --- |');\n\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tignoreRaw(newTokens, completeTableTokens);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTableTokens);\n\t\t\t});\n\n\t\t\ttest('full header with extras', () => {\n\t\t\t\tconst incompleteTable = '| a **bold** | b _italics_ |';\n\t\t\t\tconst tokens = marked.lexer(incompleteTable);\n\t\t\t\tconst completeTableTokens = marked.lexer(incompleteTable + '\\n| --- | --- |');\n\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTableTokens);\n\t\t\t});\n\n\t\t\ttest('full header with leading text', () => {\n\t\t\t\t// Parsing this gives one token and one 'text' subtoken\n\t\t\t\tconst incompleteTable = 'here is a table\\n| a | b |';\n\t\t\t\tconst tokens = marked.lexer(incompleteTable);\n\t\t\t\tconst completeTableTokens = marked.lexer(incompleteTable + '\\n| --- | --- |');\n\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTableTokens);\n\t\t\t});\n\n\t\t\ttest('full header with leading other stuff', () => {\n\t\t\t\t// Parsing this gives one token and one 'text' subtoken\n\t\t\t\tconst incompleteTable = '```js\\nconst xyz = 123;\\n```\\n| a | b |';\n\t\t\t\tconst tokens = marked.lexer(incompleteTable);\n\t\t\t\tconst completeTableTokens = marked.lexer(incompleteTable + '\\n| --- | --- |');\n\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTableTokens);\n\t\t\t});\n\n\t\t\ttest('full header with incomplete separator', () => {\n\t\t\t\tconst incompleteTable = '| a | b |\\n| ---';\n\t\t\t\tconst tokens = marked.lexer(incompleteTable);\n\t\t\t\tconst completeTableTokens = marked.lexer(completeTable);\n\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTableTokens);\n\t\t\t});\n\n\t\t\ttest('full header with incomplete separator 2', () => {\n\t\t\t\tconst incompleteTable = '| a | b |\\n| --- |';\n\t\t\t\tconst tokens = marked.lexer(incompleteTable);\n\t\t\t\tconst completeTableTokens = marked.lexer(completeTable);\n\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTableTokens);\n\t\t\t});\n\n\t\t\ttest('full header with incomplete separator 3', () => {\n\t\t\t\tconst incompleteTable = '| a | b |\\n|';\n\t\t\t\tconst tokens = marked.lexer(incompleteTable);\n\t\t\t\tconst completeTableTokens = marked.lexer(completeTable);\n\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTableTokens);\n\t\t\t});\n\n\t\t\ttest('not a table', () => {\n\t\t\t\tconst incompleteTable = '| a | b |\\nsome text';\n\t\t\t\tconst tokens = marked.lexer(incompleteTable);\n\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\t\t\t\tassert.deepStrictEqual(newTokens, tokens);\n\t\t\t});\n\n\t\t\ttest('not a table 2', () => {\n\t\t\t\tconst incompleteTable = '| a | b |\\n| --- |\\nsome text';\n\t\t\t\tconst tokens = marked.lexer(incompleteTable);\n\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\t\t\t\tassert.deepStrictEqual(newTokens, tokens);\n\t\t\t});\n\t\t});\n\n\t\tsuite('codeblock', () => {\n\t\t\ttest('complete code block', () => {\n\t\t\t\tconst completeCodeblock = '```js\\nconst xyz = 123;\\n```';\n\t\t\t\tconst tokens = marked.lexer(completeCodeblock);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\t\t\t\tassert.equal(newTokens, tokens);\n\t\t\t});\n\n\t\t\ttest('code block header only', () => {\n\t\t\t\tconst incompleteCodeblock = '```js';\n\t\t\t\tconst tokens = marked.lexer(incompleteCodeblock);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeCodeblockTokens = marked.lexer(incompleteCodeblock + '\\n```');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeCodeblockTokens);\n\t\t\t});\n\n\t\t\ttest('code block header no lang', () => {\n\t\t\t\tconst incompleteCodeblock = '```';\n\t\t\t\tconst tokens = marked.lexer(incompleteCodeblock);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeCodeblockTokens = marked.lexer(incompleteCodeblock + '\\n```');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeCodeblockTokens);\n\t\t\t});\n\n\t\t\ttest('code block header and some code', () => {\n\t\t\t\tconst incompleteCodeblock = '```js\\nconst';\n\t\t\t\tconst tokens = marked.lexer(incompleteCodeblock);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeCodeblockTokens = marked.lexer(incompleteCodeblock + '\\n```');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeCodeblockTokens);\n\t\t\t});\n\n\t\t\ttest('code block header with leading text', () => {\n\t\t\t\tconst incompleteCodeblock = 'some text\\n```js';\n\t\t\t\tconst tokens = marked.lexer(incompleteCodeblock);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeCodeblockTokens = marked.lexer(incompleteCodeblock + '\\n```');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeCodeblockTokens);\n\t\t\t});\n\n\t\t\ttest('code block header with leading text and some code', () => {\n\t\t\t\tconst incompleteCodeblock = 'some text\\n```js\\nconst';\n\t\t\t\tconst tokens = marked.lexer(incompleteCodeblock);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeCodeblockTokens = marked.lexer(incompleteCodeblock + '\\n```');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeCodeblockTokens);\n\t\t\t});\n\t\t});\n\n\t\tfunction simpleMarkdownTestSuite(name: string, delimiter: string): void {\n\t\t\ttest(`incomplete ${name}`, () => {\n\t\t\t\tconst incomplete = `${delimiter}code`;\n\t\t\t\tconst tokens = marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.lexer(incomplete + delimiter);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest(`complete ${name}`, () => {\n\t\t\t\tconst text = `leading text ${delimiter}code${delimiter} trailing text`;\n\t\t\t\tconst tokens = marked.lexer(text);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tassert.deepStrictEqual(newTokens, tokens);\n\t\t\t});\n\n\t\t\ttest(`${name} with leading text`, () => {\n\t\t\t\tconst incomplete = `some text and ${delimiter}some code`;\n\t\t\t\tconst tokens = marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.lexer(incomplete + delimiter);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest(`single loose \"${delimiter}\"`, () => {\n\t\t\t\tconst text = `some text and ${delimiter}by itself\\nmore text here`;\n\t\t\t\tconst tokens = marked.lexer(text);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tassert.deepStrictEqual(newTokens, tokens);\n\t\t\t});\n\n\t\t\ttest(`incomplete ${name} after newline`, () => {\n\t\t\t\tconst text = `some text\\nmore text here and ${delimiter}text`;\n\t\t\t\tconst tokens = marked.lexer(text);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.lexer(text + delimiter);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest(`incomplete after complete ${name}`, () => {\n\t\t\t\tconst text = `leading text ${delimiter}code${delimiter} trailing text and ${delimiter}another`;\n\t\t\t\tconst tokens = marked.lexer(text);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.lexer(text + delimiter);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest.skip(`incomplete ${name} in list`, () => {\n\t\t\t\tconst text = `- list item one\\n- list item two and ${delimiter}text`;\n\t\t\t\tconst tokens = marked.lexer(text);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.lexer(text + delimiter);\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\t\t}\n\n\t\tsuite('codespan', () => {\n\t\t\tsimpleMarkdownTestSuite('codespan', '`');\n\n\t\t\ttest(`backtick between letters`, () => {\n\t\t\t\tconst text = 'a`b';\n\t\t\t\tconst tokens = marked.lexer(text);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeCodespanTokens = marked.lexer(text + '`');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeCodespanTokens);\n\t\t\t});\n\n\t\t\ttest(`nested pattern`, () => {\n\t\t\t\tconst text = 'sldkfjsd `abc __def__ ghi';\n\t\t\t\tconst tokens = marked.lexer(text);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.lexer(text + '`');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\t\t});\n\n\t\tsuite('star', () => {\n\t\t\tsimpleMarkdownTestSuite('star', '*');\n\n\t\t\ttest(`star between letters`, () => {\n\t\t\t\tconst text = 'sldkfjsd a*b';\n\t\t\t\tconst tokens = marked.lexer(text);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.lexer(text + '*');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest(`nested pattern`, () => {\n\t\t\t\tconst text = 'sldkfjsd *abc __def__ ghi';\n\t\t\t\tconst tokens = marked.lexer(text);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.lexer(text + '*');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\t\t});\n\n\t\tsuite('double star', () => {\n\t\t\tsimpleMarkdownTestSuite('double star', '**');\n\n\t\t\ttest(`double star between letters`, () => {\n\t\t\t\tconst text = 'a**b';\n\t\t\t\tconst tokens = marked.lexer(text);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.lexer(text + '**');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\t\t});\n\n\t\tsuite('underscore', () => {\n\t\t\tsimpleMarkdownTestSuite('underscore', '_');\n\n\t\t\ttest(`underscore between letters`, () => {\n\t\t\t\tconst text = `this_not_italics`;\n\t\t\t\tconst tokens = marked.lexer(text);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tassert.deepStrictEqual(newTokens, tokens);\n\t\t\t});\n\t\t});\n\n\t\tsuite('double underscore', () => {\n\t\t\tsimpleMarkdownTestSuite('double underscore', '__');\n\n\t\t\ttest(`double underscore between letters`, () => {\n\t\t\t\tconst text = `this__not__bold`;\n\t\t\t\tconst tokens = marked.lexer(text);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tassert.deepStrictEqual(newTokens, tokens);\n\t\t\t});\n\t\t});\n\n\t\tsuite('link', () => {\n\t\t\ttest('incomplete link text', () => {\n\t\t\t\tconst incomplete = 'abc [text';\n\t\t\t\tconst tokens = marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.lexer(incomplete + '](about:blank)');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest('incomplete link target', () => {\n\t\t\t\tconst incomplete = 'foo [text](http://microsoft';\n\t\t\t\tconst tokens = marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.lexer(incomplete + ')');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest.skip('incomplete link in list', () => {\n\t\t\t\tconst incomplete = '- [text';\n\t\t\t\tconst tokens = marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tconst completeTokens = marked.lexer(incomplete + '](about:blank)');\n\t\t\t\tassert.deepStrictEqual(newTokens, completeTokens);\n\t\t\t});\n\n\t\t\ttest('square brace between letters', () => {\n\t\t\t\tconst incomplete = 'a[b';\n\t\t\t\tconst tokens = marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tassert.deepStrictEqual(newTokens, tokens);\n\t\t\t});\n\n\t\t\ttest('square brace on previous line', () => {\n\t\t\t\tconst incomplete = 'text[\\nmore text';\n\t\t\t\tconst tokens = marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tassert.deepStrictEqual(newTokens, tokens);\n\t\t\t});\n\n\t\t\ttest('complete link', () => {\n\t\t\t\tconst incomplete = 'text [link](http://microsoft.com)';\n\t\t\t\tconst tokens = marked.lexer(incomplete);\n\t\t\t\tconst newTokens = fillInIncompleteTokens(tokens);\n\n\t\t\t\tassert.deepStrictEqual(newTokens, tokens);\n\t\t\t});\n\t\t});\n\t});\n});\n"]}