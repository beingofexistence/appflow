{"version":3,"sources":["file:///workspace/appflow/src/vs/base/test/browser/ui/grid/util.ts"],"names":[],"mappings":"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","file":"util.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { IView } from 'vs/base/browser/ui/grid/grid';\nimport { GridNode, isGridBranchNode } from 'vs/base/browser/ui/grid/gridview';\nimport { Emitter, Event } from 'vs/base/common/event';\n\nexport class TestView implements IView {\n\n\tprivate readonly _onDidChange = new Emitter<{ width: number; height: number } | undefined>();\n\treadonly onDidChange = this._onDidChange.event;\n\n\tget minimumWidth(): number { return this._minimumWidth; }\n\tset minimumWidth(size: number) { this._minimumWidth = size; this._onDidChange.fire(undefined); }\n\n\tget maximumWidth(): number { return this._maximumWidth; }\n\tset maximumWidth(size: number) { this._maximumWidth = size; this._onDidChange.fire(undefined); }\n\n\tget minimumHeight(): number { return this._minimumHeight; }\n\tset minimumHeight(size: number) { this._minimumHeight = size; this._onDidChange.fire(undefined); }\n\n\tget maximumHeight(): number { return this._maximumHeight; }\n\tset maximumHeight(size: number) { this._maximumHeight = size; this._onDidChange.fire(undefined); }\n\n\tprivate _element: HTMLElement = document.createElement('div');\n\tget element(): HTMLElement { this._onDidGetElement.fire(); return this._element; }\n\n\tprivate readonly _onDidGetElement = new Emitter<void>();\n\treadonly onDidGetElement = this._onDidGetElement.event;\n\n\tprivate _width = 0;\n\tget width(): number { return this._width; }\n\n\tprivate _height = 0;\n\tget height(): number { return this._height; }\n\n\tprivate _top = 0;\n\tget top(): number { return this._top; }\n\n\tprivate _left = 0;\n\tget left(): number { return this._left; }\n\n\tget size(): [number, number] { return [this.width, this.height]; }\n\n\tprivate readonly _onDidLayout = new Emitter<{ width: number; height: number; top: number; left: number }>();\n\treadonly onDidLayout: Event<{ width: number; height: number; top: number; left: number }> = this._onDidLayout.event;\n\n\tprivate readonly _onDidFocus = new Emitter<void>();\n\treadonly onDidFocus: Event<void> = this._onDidFocus.event;\n\n\tconstructor(\n\t\tprivate _minimumWidth: number,\n\t\tprivate _maximumWidth: number,\n\t\tprivate _minimumHeight: number,\n\t\tprivate _maximumHeight: number\n\t) {\n\t\tassert(_minimumWidth <= _maximumWidth, 'gridview view minimum width must be <= maximum width');\n\t\tassert(_minimumHeight <= _maximumHeight, 'gridview view minimum height must be <= maximum height');\n\t}\n\n\tlayout(width: number, height: number, top: number, left: number): void {\n\t\tthis._width = width;\n\t\tthis._height = height;\n\t\tthis._top = top;\n\t\tthis._left = left;\n\t\tthis._onDidLayout.fire({ width, height, top, left });\n\t}\n\n\tfocus(): void {\n\t\tthis._onDidFocus.fire();\n\t}\n\n\tdispose(): void {\n\t\tthis._onDidChange.dispose();\n\t\tthis._onDidGetElement.dispose();\n\t\tthis._onDidLayout.dispose();\n\t\tthis._onDidFocus.dispose();\n\t}\n}\n\nexport function nodesToArrays(node: GridNode): any {\n\tif (isGridBranchNode(node)) {\n\t\treturn node.children.map(nodesToArrays);\n\t} else {\n\t\treturn node.view;\n\t}\n}\n"]}