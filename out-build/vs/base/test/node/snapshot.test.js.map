{"version":3,"sources":["file:///workspace/appflow/src/vs/base/test/node/snapshot.test.ts"],"names":[],"mappings":"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","file":"snapshot.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { tmpdir } from 'os';\nimport { getRandomTestPath } from 'vs/base/test/node/testUtils';\nimport { Promises } from 'vs/base/node/pfs';\nimport { SnapshotContext, assertSnapshot } from 'vs/base/test/common/snapshot';\nimport { URI } from 'vs/base/common/uri';\nimport * as path from 'path';\nimport { assertThrowsAsync } from 'vs/base/test/common/utils';\n\n// tests for snapshot are in Node so that we can use native FS operations to\n// set up and validate things.\n//\n// Uses snapshots for testing snapshots. It's snapception!\n\nsuite('snapshot', () => {\n\tlet testDir: string;\n\n\tsetup(function () {\n\t\ttestDir = getRandomTestPath(tmpdir(), 'vsctests', 'snapshot');\n\t\treturn Promises.mkdir(testDir, { recursive: true });\n\t});\n\n\tteardown(function () {\n\t\treturn Promises.rm(testDir);\n\t});\n\n\tconst makeContext = (test: Partial<Mocha.Test> | undefined) => {\n\t\treturn new class extends SnapshotContext {\n\t\t\tconstructor() {\n\t\t\t\tsuper(test as Mocha.Test);\n\t\t\t\tthis.snapshotsDir = URI.file(testDir);\n\t\t\t}\n\t\t};\n\t};\n\n\tconst snapshotFileTree = async () => {\n\t\tlet str = '';\n\n\t\tconst printDir = async (dir: string, indent: number) => {\n\t\t\tconst children = await Promises.readdir(dir);\n\t\t\tfor (const child of children) {\n\t\t\t\tconst p = path.join(dir, child);\n\t\t\t\tif ((await Promises.stat(p)).isFile()) {\n\t\t\t\t\tconst content = await Promises.readFile(p, 'utf-8');\n\t\t\t\t\tstr += `${' '.repeat(indent)}${child}:\\n`;\n\t\t\t\t\tfor (const line of content.split('\\n')) {\n\t\t\t\t\t\tstr += `${' '.repeat(indent + 2)}${line}\\n`;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstr += `${' '.repeat(indent)}${child}/\\n`;\n\t\t\t\t\tawait printDir(p, indent + 2);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tawait printDir(testDir, 0);\n\t\tawait assertSnapshot(str);\n\t};\n\n\ttest('creates a snapshot', async () => {\n\t\tconst ctx = makeContext({\n\t\t\tfile: 'foo/bar',\n\t\t\tfullTitle: () => 'hello world!'\n\t\t});\n\n\t\tawait ctx.assert({ cool: true });\n\t\tawait snapshotFileTree();\n\t});\n\n\ttest('validates a snapshot', async () => {\n\t\tconst ctx1 = makeContext({\n\t\t\tfile: 'foo/bar',\n\t\t\tfullTitle: () => 'hello world!'\n\t\t});\n\n\t\tawait ctx1.assert({ cool: true });\n\n\t\tconst ctx2 = makeContext({\n\t\t\tfile: 'foo/bar',\n\t\t\tfullTitle: () => 'hello world!'\n\t\t});\n\n\t\t// should pass:\n\t\tawait ctx2.assert({ cool: true });\n\n\t\tconst ctx3 = makeContext({\n\t\t\tfile: 'foo/bar',\n\t\t\tfullTitle: () => 'hello world!'\n\t\t});\n\n\t\t// should fail:\n\t\tawait assertThrowsAsync(() => ctx3.assert({ cool: false }));\n\t});\n\n\ttest('cleans up old snapshots', async () => {\n\t\tconst ctx1 = makeContext({\n\t\t\tfile: 'foo/bar',\n\t\t\tfullTitle: () => 'hello world!'\n\t\t});\n\n\t\tawait ctx1.assert({ cool: true });\n\t\tawait ctx1.assert({ nifty: true });\n\t\tawait ctx1.assert({ customName: 1 }, { name: 'thirdTest', extension: 'txt' });\n\t\tawait ctx1.assert({ customName: 2 }, { name: 'fourthTest' });\n\n\t\tawait snapshotFileTree();\n\n\t\tconst ctx2 = makeContext({\n\t\t\tfile: 'foo/bar',\n\t\t\tfullTitle: () => 'hello world!'\n\t\t});\n\n\t\tawait ctx2.assert({ cool: true });\n\t\tawait ctx2.assert({ customName: 1 }, { name: 'thirdTest' });\n\t\tawait ctx2.removeOldSnapshots();\n\n\t\tawait snapshotFileTree();\n\t});\n\n\ttest('formats object nicely', async () => {\n\t\tconst circular: any = {};\n\t\tcircular.a = circular;\n\n\t\tawait assertSnapshot([\n\t\t\t1,\n\t\t\ttrue,\n\t\t\tundefined,\n\t\t\tnull,\n\t\t\t123n,\n\t\t\tSymbol('heyo'),\n\t\t\t'hello',\n\t\t\t{ hello: 'world' },\n\t\t\tcircular,\n\t\t\tnew Map([['hello', 1], ['goodbye', 2]]),\n\t\t\tnew Set([1, 2, 3]),\n\t\t\tfunction helloWorld() { },\n\t\t\t/hello/g,\n\t\t\tnew Array(10).fill('long string'.repeat(10)),\n\t\t\t{ [Symbol.for('debug.description')]() { return `Range [1 -> 5]`; } },\n\t\t]);\n\t});\n});\n"]}