{"version":3,"sources":["file:///workspace/appflow/src/vs/base/test/node/zip/zip.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAYhG,KAAK,CAAC,KAAK,EAAE,GAAG,EAAE;QAEjB,IAAA,WAAG,GAAsC,CAAC;QAE1C,IAAI,CAAC,mCAAmC,EAAE,KAAK,IAAI,EAAE;YACpD,MAAM,OAAO,GAAG,IAAA,eAAG,EAAe,IAAA,WAAM,GAAE,EAAE,UAAU,EAAE,KAAK,CAAC,CAAC;YAC/D,MAAM,cAAQ,CAAC,KAAK,CAAC,OAAO,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;YAEnD,MAAM,QAAQ,GAAG,aAAG,CAAQ,SAAS,CAAC,gCAAgC,CAAC,CAAC,MAAM,CAAC;YAC/E,MAAM,OAAO,GAAG,IAAI,CAAC,GAAG,CAAE,QAAQ,EAAE,aAAa,CAAC,CAAC;YAEnD,MAAM,IAAA,WAAG,EAAqB,KAAK,CAAC,EAAE,CAAC,IAAA,SAAG,EAAK,OAAO,EAAE,OAAO,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC;YAC7E,MAAM,SAAS,GAAG,MAAM,cAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAE,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC;YACzE,MAAM,CAAC,SAAS,CAAC,CAAC;YAElB,MAAM,cAAQ,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"zip.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { tmpdir } from 'os';\nimport { createCancelablePromise } from 'vs/base/common/async';\nimport { FileAccess } from 'vs/base/common/network';\nimport * as path from 'vs/base/common/path';\nimport { Promises } from 'vs/base/node/pfs';\nimport { extract } from 'vs/base/node/zip';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { getRandomTestPath } from 'vs/base/test/node/testUtils';\n\nsuite('Zip', () => {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('extract should handle directories', async () => {\n\t\tconst testDir = getRandomTestPath(tmpdir(), 'vsctests', 'zip');\n\t\tawait Promises.mkdir(testDir, { recursive: true });\n\n\t\tconst fixtures = FileAccess.asFileUri('vs/base/test/node/zip/fixtures').fsPath;\n\t\tconst fixture = path.join(fixtures, 'extract.zip');\n\n\t\tawait createCancelablePromise(token => extract(fixture, testDir, {}, token));\n\t\tconst doesExist = await Promises.exists(path.join(testDir, 'extension'));\n\t\tassert(doesExist);\n\n\t\tawait Promises.rm(testDir);\n\t});\n});\n"]}