{"version":3,"sources":["file:///workspace/appflow/src/vs/base/test/node/powershell.test.ts"],"names":[],"mappings":";;;IASA,SAAS,SAAS,CAAC,OAAe;QACjC,kCAAkC;QAClC,IAAI,eAAe,GAAG,KAAK,CAAC;QAC5B,IAAI;YACH,MAAM,IAAI,GAAG,EAAE,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;YAClC,eAAe,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;SAChC;QAAC,MAAM;YACP,uDAAuD;YACvD,oDAAoD;YACpD,IAAI;gBACH,eAAe,GAAG,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,EAAE,CAAC;aACjE;YAAC,MAAM;aAEP;SACD;QAED,MAAM,CAAC,WAAW,CAAC,eAAe,EAAE,IAAI,CAAC,CAAC;IAC3C,CAAC;IAED,IAAI,QAAQ,CAAC,EAAE,EAAS;QACvB,KAAK,CAAC,mBAAmB,EAAE,GAAG,EAAE;YAE/B,IAAI,CAAC,qCAAqC,EAAE,KAAK,IAAI,EAAE;gBACtD,MAAM,OAAO,GAAG,MAAM,IAAA,gBAAG,GAAsC,CAAC;gBAChE,MAAM,OAAO,GAAG,OAAO,EAAE,OAAO,CAAC;gBACjC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;gBACrC,MAAM,CAAC,cAAc,CAAC,OAAO,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;gBAElD,SAAS,CAAC,OAAQ,CAAC,CAAC;YACrB,CAAC,CAAC,CAAC;YAEH,IAAI,CAAC,2BAA2B,EAAE,KAAK,IAAI,EAAE;gBAC5C,MAAM,KAAK,GAAG,IAAI,KAAK,EAAyB,CAAC;gBACjD,IAAI,KAAK,EAAE,MAAM,CAAC,IAAI,IAAA,gBAAG,GAA+B,EAAE;oBACzD,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACd;gBAED,MAAM,aAAa,GAAG,4BAA4B,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC,WAAW,KAAK,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACjH,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE,IAAI,EAAE,aAAa,CAAC,CAAC;gBAE3D,KAAK,MAAM,IAAI,IAAI,KAAK,EAAE;oBACzB,SAAS,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBACxB;gBAED,oDAAoD;gBACpD,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,WAAW,EAAE,oBAAoB,EAAE,aAAa,CAAC,CAAC;YAC9F,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;KACH","file":"powershell.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as assert from 'assert';\nimport * as fs from 'fs';\nimport * as platform from 'vs/base/common/platform';\nimport { enumeratePowerShellInstallations, getFirstAvailablePowerShellInstallation, IPowerShellExeDetails } from 'vs/base/node/powershell';\n\nfunction checkPath(exePath: string) {\n\t// Check to see if the path exists\n\tlet pathCheckResult = false;\n\ttry {\n\t\tconst stat = fs.statSync(exePath);\n\t\tpathCheckResult = stat.isFile();\n\t} catch {\n\t\t// fs.exists throws on Windows with SymbolicLinks so we\n\t\t// also use lstat to try and see if the file exists.\n\t\ttry {\n\t\t\tpathCheckResult = fs.statSync(fs.readlinkSync(exePath)).isFile();\n\t\t} catch {\n\n\t\t}\n\t}\n\n\tassert.strictEqual(pathCheckResult, true);\n}\n\nif (platform.isWindows) {\n\tsuite('PowerShell finder', () => {\n\n\t\ttest('Can find first available PowerShell', async () => {\n\t\t\tconst pwshExe = await getFirstAvailablePowerShellInstallation();\n\t\t\tconst exePath = pwshExe?.exePath;\n\t\t\tassert.notStrictEqual(exePath, null);\n\t\t\tassert.notStrictEqual(pwshExe?.displayName, null);\n\n\t\t\tcheckPath(exePath!);\n\t\t});\n\n\t\ttest('Can enumerate PowerShells', async () => {\n\t\t\tconst pwshs = new Array<IPowerShellExeDetails>();\n\t\t\tfor await (const p of enumeratePowerShellInstallations()) {\n\t\t\t\tpwshs.push(p);\n\t\t\t}\n\n\t\t\tconst powershellLog = 'Found these PowerShells:\\n' + pwshs.map(p => `${p.displayName}: ${p.exePath}`).join('\\n');\n\t\t\tassert.strictEqual(pwshs.length >= 1, true, powershellLog);\n\n\t\t\tfor (const pwsh of pwshs) {\n\t\t\t\tcheckPath(pwsh.exePath);\n\t\t\t}\n\n\t\t\t// The last one should always be Windows PowerShell.\n\t\t\tassert.strictEqual(pwshs[pwshs.length - 1].displayName, 'Windows PowerShell', powershellLog);\n\t\t});\n\t});\n}\n"]}