{"version":3,"sources":["file:///workspace/appflow/src/vs/base/test/node/extpath.test.ts"],"names":[],"mappings":"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","file":"extpath.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { tmpdir } from 'os';\nimport { realcase, realcaseSync, realpath, realpathSync } from 'vs/base/node/extpath';\nimport { Promises } from 'vs/base/node/pfs';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { flakySuite, getRandomTestPath } from 'vs/base/test/node/testUtils';\n\nflakySuite('Extpath', () => {\n\tlet testDir: string;\n\n\tsetup(() => {\n\t\ttestDir = getRandomTestPath(tmpdir(), 'vsctests', 'extpath');\n\n\t\treturn Promises.mkdir(testDir, { recursive: true });\n\t});\n\n\tteardown(() => {\n\t\treturn Promises.rm(testDir);\n\t});\n\n\ttest('realcaseSync', async () => {\n\n\t\t// assume case insensitive file system\n\t\tif (process.platform === 'win32' || process.platform === 'darwin') {\n\t\t\tconst upper = testDir.toUpperCase();\n\t\t\tconst real = realcaseSync(upper);\n\n\t\t\tif (real) { // can be null in case of permission errors\n\t\t\t\tassert.notStrictEqual(real, upper);\n\t\t\t\tassert.strictEqual(real.toUpperCase(), upper);\n\t\t\t\tassert.strictEqual(real, testDir);\n\t\t\t}\n\t\t}\n\n\t\t// linux, unix, etc. -> assume case sensitive file system\n\t\telse {\n\t\t\tlet real = realcaseSync(testDir);\n\t\t\tassert.strictEqual(real, testDir);\n\n\t\t\treal = realcaseSync(testDir.toUpperCase());\n\t\t\tassert.strictEqual(real, testDir.toUpperCase());\n\t\t}\n\t});\n\n\ttest('realcase', async () => {\n\n\t\t// assume case insensitive file system\n\t\tif (process.platform === 'win32' || process.platform === 'darwin') {\n\t\t\tconst upper = testDir.toUpperCase();\n\t\t\tconst real = await realcase(upper);\n\n\t\t\tif (real) { // can be null in case of permission errors\n\t\t\t\tassert.notStrictEqual(real, upper);\n\t\t\t\tassert.strictEqual(real.toUpperCase(), upper);\n\t\t\t\tassert.strictEqual(real, testDir);\n\t\t\t}\n\t\t}\n\n\t\t// linux, unix, etc. -> assume case sensitive file system\n\t\telse {\n\t\t\tlet real = await realcase(testDir);\n\t\t\tassert.strictEqual(real, testDir);\n\n\t\t\treal = await realcase(testDir.toUpperCase());\n\t\t\tassert.strictEqual(real, testDir.toUpperCase());\n\t\t}\n\t});\n\n\ttest('realpath', async () => {\n\t\tconst realpathVal = await realpath(testDir);\n\t\tassert.ok(realpathVal);\n\t});\n\n\ttest('realpathSync', () => {\n\t\tconst realpath = realpathSync(testDir);\n\t\tassert.ok(realpath);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"]}