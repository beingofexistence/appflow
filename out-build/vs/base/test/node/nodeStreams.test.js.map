{"version":3,"sources":["file:///workspace/appflow/src/vs/base/test/node/nodeStreams.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAOhG,KAAK,CAAC,gBAAgB,EAAE,GAAG,EAAE;QAC5B,IAAI,CAAC,sDAAsD,EAAE,CAAC,IAAI,EAAE,EAAE;YACrE,MAAM,MAAM,GAAa,EAAE,CAAC;YAC5B,MAAM,QAAQ,GAAG,IAAI,iBAAG,CAAY,IAAI,CAAC,CAAC;YAC1C,MAAM,QAAQ,GAAG,IAAI,iBAAQ,CAAC;gBAC7B,KAAK,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ;oBAC/B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;oBAC9B,QAAQ,EAAE,CAAC;gBACZ,CAAC;aACD,CAAC,CAAC;YAEH,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxB,QAAQ,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;YAC7B,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACvB,QAAQ,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAC9B,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE;gBACjB,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC;gBAC9E,IAAI,EAAE,CAAC;YACR,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qDAAqD,EAAE,CAAC,IAAI,EAAE,EAAE;YACpE,MAAM,MAAM,GAAa,EAAE,CAAC;YAC5B,MAAM,QAAQ,GAAG,IAAI,iBAAG,CAAY,KAAK,CAAC,CAAC;YAC3C,MAAM,QAAQ,GAAG,IAAI,iBAAQ,CAAC;gBAC7B,KAAK,CAAC,KAAK,EAAE,SAAS,EAAE,QAAQ;oBAC/B,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;oBAC9B,QAAQ,EAAE,CAAC;gBACZ,CAAC;aACD,CAAC,CAAC;YAEH,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACxB,QAAQ,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAC9B,QAAQ,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;YACxB,QAAQ,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;YAChC,QAAQ,CAAC,GAAG,CAAC,GAAG,EAAE;gBACjB,MAAM,CAAC,eAAe,CAAC,MAAM,EAAE,CAAC,UAAU,EAAE,UAAU,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC;gBAClF,IAAI,EAAE,CAAC;YACR,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"nodeStreams.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\nimport { Writable } from 'stream';\nimport * as assert from 'assert';\nimport { StreamSplitter } from 'vs/base/node/nodeStreams';\n\nsuite('StreamSplitter', () => {\n\ttest('should split a stream on a single character splitter', (done) => {\n\t\tconst chunks: string[] = [];\n\t\tconst splitter = new StreamSplitter('\\n');\n\t\tconst writable = new Writable({\n\t\t\twrite(chunk, _encoding, callback) {\n\t\t\t\tchunks.push(chunk.toString());\n\t\t\t\tcallback();\n\t\t\t},\n\t\t});\n\n\t\tsplitter.pipe(writable);\n\t\tsplitter.write('hello\\nwor');\n\t\tsplitter.write('ld\\n');\n\t\tsplitter.write('foo\\nbar\\nz');\n\t\tsplitter.end(() => {\n\t\t\tassert.deepStrictEqual(chunks, ['hello\\n', 'world\\n', 'foo\\n', 'bar\\n', 'z']);\n\t\t\tdone();\n\t\t});\n\t});\n\n\ttest('should split a stream on a multi-character splitter', (done) => {\n\t\tconst chunks: string[] = [];\n\t\tconst splitter = new StreamSplitter('---');\n\t\tconst writable = new Writable({\n\t\t\twrite(chunk, _encoding, callback) {\n\t\t\t\tchunks.push(chunk.toString());\n\t\t\t\tcallback();\n\t\t\t},\n\t\t});\n\n\t\tsplitter.pipe(writable);\n\t\tsplitter.write('hello---wor');\n\t\tsplitter.write('ld---');\n\t\tsplitter.write('foo---bar---z');\n\t\tsplitter.end(() => {\n\t\t\tassert.deepStrictEqual(chunks, ['hello---', 'world---', 'foo---', 'bar---', 'z']);\n\t\t\tdone();\n\t\t});\n\t});\n});\n"]}