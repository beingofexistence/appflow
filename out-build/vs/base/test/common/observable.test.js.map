{"version":3,"sources":["file:///workspace/appflow/src/vs/base/test/common/observable.test.ts"],"names":[],"mappings":"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","file":"observable.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { ISettableObservable, autorun, derived, ITransaction, observableFromEvent, observableValue, transaction, keepObserved } from 'vs/base/common/observable';\nimport { BaseObservable, IObservable, IObserver } from 'vs/base/common/observableInternal/base';\n\nsuite('observables', () => {\n\t/**\n\t * Reads these tests to understand how to use observables.\n\t */\n\tsuite('tutorial', () => {\n\t\ttest('observable + autorun', () => {\n\t\t\tconst log = new Log();\n\t\t\tconst myObservable = observableValue('myObservable', 0);\n\n\t\t\tautorun(reader => {\n\t\t\t\t/** @description myAutorun */\n\t\t\t\tlog.log(`myAutorun.run(myObservable: ${myObservable.read(reader)})`);\n\t\t\t});\n\t\t\t// The autorun runs immediately\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ['myAutorun.run(myObservable: 0)']);\n\n\t\t\tmyObservable.set(1, undefined);\n\t\t\t// The autorun runs again when any read observable changed\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ['myAutorun.run(myObservable: 1)']);\n\n\t\t\tmyObservable.set(1, undefined);\n\t\t\t// But only if the value changed\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\n\t\t\t// Transactions batch autorun runs\n\t\t\ttransaction((tx) => {\n\t\t\t\tmyObservable.set(2, tx);\n\t\t\t\t// No auto-run ran yet, even though the value changed\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\n\t\t\t\tmyObservable.set(3, tx);\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\t\t\t});\n\t\t\t// Only at the end of the transaction the autorun re-runs\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ['myAutorun.run(myObservable: 3)']);\n\t\t});\n\n\t\ttest('computed + autorun', () => {\n\t\t\tconst log = new Log();\n\t\t\tconst observable1 = observableValue('myObservable1', 0);\n\t\t\tconst observable2 = observableValue('myObservable2', 0);\n\n\t\t\tconst myDerived = derived(reader => {\n\t\t\t\t/** @description myDerived */\n\t\t\t\tconst value1 = observable1.read(reader);\n\t\t\t\tconst value2 = observable2.read(reader);\n\t\t\t\tconst sum = value1 + value2;\n\t\t\t\tlog.log(`myDerived.recompute: ${value1} + ${value2} = ${sum}`);\n\t\t\t\treturn sum;\n\t\t\t});\n\n\t\t\tautorun(reader => {\n\t\t\t\t/** @description myAutorun */\n\t\t\t\tlog.log(`myAutorun(myDerived: ${myDerived.read(reader)})`);\n\t\t\t});\n\t\t\t// autorun runs immediately\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myDerived.recompute: 0 + 0 = 0\",\n\t\t\t\t\"myAutorun(myDerived: 0)\",\n\t\t\t]);\n\n\t\t\tobservable1.set(1, undefined);\n\t\t\t// and on changes...\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myDerived.recompute: 1 + 0 = 1\",\n\t\t\t\t\"myAutorun(myDerived: 1)\",\n\t\t\t]);\n\n\t\t\tobservable2.set(1, undefined);\n\t\t\t// ... of any dependency.\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myDerived.recompute: 1 + 1 = 2\",\n\t\t\t\t\"myAutorun(myDerived: 2)\",\n\t\t\t]);\n\n\t\t\ttransaction((tx) => {\n\t\t\t\tobservable1.set(5, tx);\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\n\t\t\t\tobservable2.set(5, tx);\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\t\t\t});\n\t\t\t// When changing multiple observables in a transaction,\n\t\t\t// deriveds are only recomputed on demand.\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myDerived.recompute: 5 + 5 = 10\",\n\t\t\t\t\"myAutorun(myDerived: 10)\",\n\t\t\t]);\n\n\t\t\ttransaction((tx) => {\n\t\t\t\tobservable1.set(6, tx);\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\n\t\t\t\tobservable2.set(4, tx);\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\t\t\t});\n\t\t\t// Now the autorun didn't run again, because its dependency changed from 10 to 10 (= no change).\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ([\"myDerived.recompute: 6 + 4 = 10\"]));\n\t\t});\n\n\t\ttest('read during transaction', () => {\n\t\t\tconst log = new Log();\n\t\t\tconst observable1 = observableValue('myObservable1', 0);\n\t\t\tconst observable2 = observableValue('myObservable2', 0);\n\n\t\t\tconst myDerived = derived((reader) => {\n\t\t\t\t/** @description myDerived */\n\t\t\t\tconst value1 = observable1.read(reader);\n\t\t\t\tconst value2 = observable2.read(reader);\n\t\t\t\tconst sum = value1 + value2;\n\t\t\t\tlog.log(`myDerived.recompute: ${value1} + ${value2} = ${sum}`);\n\t\t\t\treturn sum;\n\t\t\t});\n\n\t\t\tautorun(reader => {\n\t\t\t\t/** @description myAutorun */\n\t\t\t\tlog.log(`myAutorun(myDerived: ${myDerived.read(reader)})`);\n\t\t\t});\n\t\t\t// autorun runs immediately\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myDerived.recompute: 0 + 0 = 0\",\n\t\t\t\t\"myAutorun(myDerived: 0)\",\n\t\t\t]);\n\n\t\t\ttransaction((tx) => {\n\t\t\t\tobservable1.set(-10, tx);\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\n\t\t\t\tmyDerived.get(); // This forces a (sync) recomputation of the current value\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ([\"myDerived.recompute: -10 + 0 = -10\"]));\n\n\t\t\t\tobservable2.set(10, tx);\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\t\t\t});\n\t\t\t// This autorun runs again, because its dependency changed from 0 to -10 and then back to 0.\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myDerived.recompute: -10 + 10 = 0\",\n\t\t\t\t\"myAutorun(myDerived: 0)\",\n\t\t\t]);\n\t\t});\n\n\t\ttest('get without observers', () => {\n\t\t\tconst log = new Log();\n\t\t\tconst observable1 = observableValue('myObservableValue1', 0);\n\t\t\tconst computed1 = derived((reader) => {\n\t\t\t\t/** @description computed */\n\t\t\t\tconst value1 = observable1.read(reader);\n\t\t\t\tconst result = value1 % 3;\n\t\t\t\tlog.log(`recompute1: ${value1} % 3 = ${result}`);\n\t\t\t\treturn result;\n\t\t\t});\n\t\t\tconst computed2 = derived((reader) => {\n\t\t\t\t/** @description computed */\n\t\t\t\tconst value1 = computed1.read(reader);\n\t\t\t\tconst result = value1 * 2;\n\t\t\t\tlog.log(`recompute2: ${value1} * 2 = ${result}`);\n\t\t\t\treturn result;\n\t\t\t});\n\t\t\tconst computed3 = derived((reader) => {\n\t\t\t\t/** @description computed */\n\t\t\t\tconst value1 = computed1.read(reader);\n\t\t\t\tconst result = value1 * 3;\n\t\t\t\tlog.log(`recompute3: ${value1} * 3 = ${result}`);\n\t\t\t\treturn result;\n\t\t\t});\n\t\t\tconst computedSum = derived((reader) => {\n\t\t\t\t/** @description computed */\n\t\t\t\tconst value1 = computed2.read(reader);\n\t\t\t\tconst value2 = computed3.read(reader);\n\t\t\t\tconst result = value1 + value2;\n\t\t\t\tlog.log(`recompute4: ${value1} + ${value2} = ${result}`);\n\t\t\t\treturn result;\n\t\t\t});\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\n\t\t\tobservable1.set(1, undefined);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\n\t\t\tlog.log(`value: ${computedSum.get()}`);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'recompute1: 1 % 3 = 1',\n\t\t\t\t'recompute2: 1 * 2 = 2',\n\t\t\t\t'recompute3: 1 * 3 = 3',\n\t\t\t\t'recompute4: 2 + 3 = 5',\n\t\t\t\t'value: 5',\n\t\t\t]);\n\n\t\t\tlog.log(`value: ${computedSum.get()}`);\n\t\t\t// Because there are no observers, the derived values are not cached, but computed from scratch.\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'recompute1: 1 % 3 = 1',\n\t\t\t\t'recompute2: 1 * 2 = 2',\n\t\t\t\t'recompute3: 1 * 3 = 3',\n\t\t\t\t'recompute4: 2 + 3 = 5',\n\t\t\t\t'value: 5',\n\t\t\t]);\n\n\t\t\tconst disposable = keepObserved(computedSum); // Use keepAlive to keep the cache\n\t\t\tlog.log(`value: ${computedSum.get()}`);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'recompute1: 1 % 3 = 1',\n\t\t\t\t'recompute2: 1 * 2 = 2',\n\t\t\t\t'recompute3: 1 * 3 = 3',\n\t\t\t\t'recompute4: 2 + 3 = 5',\n\t\t\t\t'value: 5',\n\t\t\t]);\n\n\t\t\tlog.log(`value: ${computedSum.get()}`);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'value: 5',\n\t\t\t]);\n\n\t\t\tobservable1.set(2, undefined);\n\t\t\t// The keep alive does not force deriveds to be recomputed\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ([]));\n\n\t\t\tlog.log(`value: ${computedSum.get()}`);\n\t\t\t// Those deriveds are recomputed on demand\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"recompute1: 2 % 3 = 2\",\n\t\t\t\t\"recompute2: 2 * 2 = 4\",\n\t\t\t\t\"recompute3: 2 * 3 = 6\",\n\t\t\t\t\"recompute4: 4 + 6 = 10\",\n\t\t\t\t\"value: 10\",\n\t\t\t]);\n\t\t\tlog.log(`value: ${computedSum.get()}`);\n\t\t\t// ... and then cached again\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ([\"value: 10\"]));\n\n\t\t\tdisposable.dispose(); // Don't forget to dispose the keepAlive to prevent memory leaks\n\n\t\t\tlog.log(`value: ${computedSum.get()}`);\n\t\t\t// Which disables the cache again\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"recompute1: 2 % 3 = 2\",\n\t\t\t\t\"recompute2: 2 * 2 = 4\",\n\t\t\t\t\"recompute3: 2 * 3 = 6\",\n\t\t\t\t\"recompute4: 4 + 6 = 10\",\n\t\t\t\t\"value: 10\",\n\t\t\t]);\n\n\t\t\tlog.log(`value: ${computedSum.get()}`);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"recompute1: 2 % 3 = 2\",\n\t\t\t\t\"recompute2: 2 * 2 = 4\",\n\t\t\t\t\"recompute3: 2 * 3 = 6\",\n\t\t\t\t\"recompute4: 4 + 6 = 10\",\n\t\t\t\t\"value: 10\",\n\t\t\t]);\n\t\t});\n\t});\n\n\ttest('topological order', () => {\n\t\tconst log = new Log();\n\t\tconst myObservable1 = observableValue('myObservable1', 0);\n\t\tconst myObservable2 = observableValue('myObservable2', 0);\n\n\t\tconst myComputed1 = derived(reader => {\n\t\t\t/** @description myComputed1 */\n\t\t\tconst value1 = myObservable1.read(reader);\n\t\t\tconst value2 = myObservable2.read(reader);\n\t\t\tconst sum = value1 + value2;\n\t\t\tlog.log(`myComputed1.recompute(myObservable1: ${value1} + myObservable2: ${value2} = ${sum})`);\n\t\t\treturn sum;\n\t\t});\n\n\t\tconst myComputed2 = derived(reader => {\n\t\t\t/** @description myComputed2 */\n\t\t\tconst value1 = myComputed1.read(reader);\n\t\t\tconst value2 = myObservable1.read(reader);\n\t\t\tconst value3 = myObservable2.read(reader);\n\t\t\tconst sum = value1 + value2 + value3;\n\t\t\tlog.log(`myComputed2.recompute(myComputed1: ${value1} + myObservable1: ${value2} + myObservable2: ${value3} = ${sum})`);\n\t\t\treturn sum;\n\t\t});\n\n\t\tconst myComputed3 = derived(reader => {\n\t\t\t/** @description myComputed3 */\n\t\t\tconst value1 = myComputed2.read(reader);\n\t\t\tconst value2 = myObservable1.read(reader);\n\t\t\tconst value3 = myObservable2.read(reader);\n\t\t\tconst sum = value1 + value2 + value3;\n\t\t\tlog.log(`myComputed3.recompute(myComputed2: ${value1} + myObservable1: ${value2} + myObservable2: ${value3} = ${sum})`);\n\t\t\treturn sum;\n\t\t});\n\n\t\tautorun(reader => {\n\t\t\t/** @description myAutorun */\n\t\t\tlog.log(`myAutorun.run(myComputed3: ${myComputed3.read(reader)})`);\n\t\t});\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myComputed1.recompute(myObservable1: 0 + myObservable2: 0 = 0)\",\n\t\t\t\"myComputed2.recompute(myComputed1: 0 + myObservable1: 0 + myObservable2: 0 = 0)\",\n\t\t\t\"myComputed3.recompute(myComputed2: 0 + myObservable1: 0 + myObservable2: 0 = 0)\",\n\t\t\t\"myAutorun.run(myComputed3: 0)\",\n\t\t]);\n\n\t\tmyObservable1.set(1, undefined);\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myComputed1.recompute(myObservable1: 1 + myObservable2: 0 = 1)\",\n\t\t\t\"myComputed2.recompute(myComputed1: 1 + myObservable1: 1 + myObservable2: 0 = 2)\",\n\t\t\t\"myComputed3.recompute(myComputed2: 2 + myObservable1: 1 + myObservable2: 0 = 3)\",\n\t\t\t\"myAutorun.run(myComputed3: 3)\",\n\t\t]);\n\n\t\ttransaction((tx) => {\n\t\t\tmyObservable1.set(2, tx);\n\t\t\tmyComputed2.get();\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myComputed1.recompute(myObservable1: 2 + myObservable2: 0 = 2)\",\n\t\t\t\t\"myComputed2.recompute(myComputed1: 2 + myObservable1: 2 + myObservable2: 0 = 4)\",\n\t\t\t]);\n\n\t\t\tmyObservable1.set(3, tx);\n\t\t\tmyComputed2.get();\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myComputed1.recompute(myObservable1: 3 + myObservable2: 0 = 3)\",\n\t\t\t\t\"myComputed2.recompute(myComputed1: 3 + myObservable1: 3 + myObservable2: 0 = 6)\",\n\t\t\t]);\n\t\t});\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myComputed3.recompute(myComputed2: 6 + myObservable1: 3 + myObservable2: 0 = 9)\",\n\t\t\t\"myAutorun.run(myComputed3: 9)\",\n\t\t]);\n\t});\n\n\tsuite('from event', () => {\n\n\t\tfunction init(): { log: Log; setValue: (value: number | undefined) => void; observable: IObservable<number | undefined> } {\n\t\t\tconst log = new Log();\n\n\t\t\tlet value: number | undefined = 0;\n\t\t\tconst eventEmitter = new Emitter<void>();\n\n\t\t\tlet id = 0;\n\t\t\tconst observable = observableFromEvent(\n\t\t\t\t(handler) => {\n\t\t\t\t\tconst curId = id++;\n\t\t\t\t\tlog.log(`subscribed handler ${curId}`);\n\t\t\t\t\tconst disposable = eventEmitter.event(handler);\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdispose: () => {\n\t\t\t\t\t\t\tlog.log(`unsubscribed handler ${curId}`);\n\t\t\t\t\t\t\tdisposable.dispose();\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t},\n\t\t\t\t() => {\n\t\t\t\t\tlog.log(`compute value ${value}`);\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\tlog,\n\t\t\t\tsetValue: (newValue) => {\n\t\t\t\t\tvalue = newValue;\n\t\t\t\t\teventEmitter.fire();\n\t\t\t\t},\n\t\t\t\tobservable,\n\t\t\t};\n\t\t}\n\n\t\ttest('Handle undefined', () => {\n\t\t\tconst { log, setValue, observable } = init();\n\n\t\t\tsetValue(undefined);\n\n\t\t\tconst autorunDisposable = autorun(reader => {\n\t\t\t\t/** @description MyAutorun */\n\t\t\t\tobservable.read(reader);\n\t\t\t\tlog.log(\n\t\t\t\t\t`autorun, value: ${observable.read(reader)}`\n\t\t\t\t);\n\t\t\t});\n\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"subscribed handler 0\",\n\t\t\t\t\"compute value undefined\",\n\t\t\t\t\"autorun, value: undefined\",\n\t\t\t]);\n\n\t\t\tsetValue(1);\n\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"compute value 1\",\n\t\t\t\t\"autorun, value: 1\"\n\t\t\t]);\n\n\t\t\tautorunDisposable.dispose();\n\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"unsubscribed handler 0\"\n\t\t\t]);\n\t\t});\n\n\t\ttest('basic', () => {\n\t\t\tconst { log, setValue, observable } = init();\n\n\t\t\tconst shouldReadObservable = observableValue('shouldReadObservable', true);\n\n\t\t\tconst autorunDisposable = autorun(reader => {\n\t\t\t\t/** @description MyAutorun */\n\t\t\t\tif (shouldReadObservable.read(reader)) {\n\t\t\t\t\tobservable.read(reader);\n\t\t\t\t\tlog.log(\n\t\t\t\t\t\t`autorun, should read: true, value: ${observable.read(reader)}`\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tlog.log(`autorun, should read: false`);\n\t\t\t\t}\n\t\t\t});\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'subscribed handler 0',\n\t\t\t\t'compute value 0',\n\t\t\t\t'autorun, should read: true, value: 0',\n\t\t\t]);\n\n\t\t\t// Cached get\n\t\t\tlog.log(`get value: ${observable.get()}`);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ['get value: 0']);\n\n\t\t\tsetValue(1);\n\t\t\t// Trigger autorun, no unsub/sub\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'compute value 1',\n\t\t\t\t'autorun, should read: true, value: 1',\n\t\t\t]);\n\n\t\t\t// Unsubscribe when not read\n\t\t\tshouldReadObservable.set(false, undefined);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'autorun, should read: false',\n\t\t\t\t'unsubscribed handler 0',\n\t\t\t]);\n\n\t\t\tshouldReadObservable.set(true, undefined);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'subscribed handler 1',\n\t\t\t\t'compute value 1',\n\t\t\t\t'autorun, should read: true, value: 1',\n\t\t\t]);\n\n\t\t\tautorunDisposable.dispose();\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'unsubscribed handler 1',\n\t\t\t]);\n\t\t});\n\n\t\ttest('get without observers', () => {\n\t\t\tconst { log, observable } = init();\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\n\t\t\tlog.log(`get value: ${observable.get()}`);\n\t\t\t// Not cached or subscribed\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'compute value 0',\n\t\t\t\t'get value: 0',\n\t\t\t]);\n\n\t\t\tlog.log(`get value: ${observable.get()}`);\n\t\t\t// Still not cached or subscribed\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t'compute value 0',\n\t\t\t\t'get value: 0',\n\t\t\t]);\n\t\t});\n\t});\n\n\ttest('reading derived in transaction unsubscribes unnecessary observables', () => {\n\t\tconst log = new Log();\n\n\t\tconst shouldReadObservable = observableValue('shouldReadMyObs1', true);\n\t\tconst myObs1 = new LoggingObservableValue('myObs1', 0, log);\n\t\tconst myComputed = derived(reader => {\n\t\t\t/** @description myComputed */\n\t\t\tlog.log('myComputed.recompute');\n\t\t\tif (shouldReadObservable.read(reader)) {\n\t\t\t\treturn myObs1.read(reader);\n\t\t\t}\n\t\t\treturn 1;\n\t\t});\n\t\tautorun(reader => {\n\t\t\t/** @description myAutorun */\n\t\t\tconst value = myComputed.read(reader);\n\t\t\tlog.log(`myAutorun: ${value}`);\n\t\t});\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myComputed.recompute\",\n\t\t\t\"myObs1.firstObserverAdded\",\n\t\t\t\"myObs1.get\",\n\t\t\t\"myAutorun: 0\",\n\t\t]);\n\n\t\ttransaction(tx => {\n\t\t\tmyObs1.set(1, tx);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ([\"myObs1.set (value 1)\"]));\n\n\t\t\tshouldReadObservable.set(false, tx);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ([]));\n\n\t\t\tmyComputed.get();\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myComputed.recompute\",\n\t\t\t\t\"myObs1.lastObserverRemoved\",\n\t\t\t]);\n\t\t});\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), ([\"myAutorun: 1\"]));\n\t});\n\n\ttest('avoid recomputation of deriveds that are no longer read', () => {\n\t\tconst log = new Log();\n\n\t\tconst myObsShouldRead = new LoggingObservableValue('myObsShouldRead', true, log);\n\t\tconst myObs1 = new LoggingObservableValue('myObs1', 0, log);\n\n\t\tconst myComputed1 = derived(reader => {\n\t\t\t/** @description myComputed1 */\n\t\t\tconst myObs1Val = myObs1.read(reader);\n\t\t\tconst result = myObs1Val % 10;\n\t\t\tlog.log(`myComputed1(myObs1: ${myObs1Val}): Computed ${result}`);\n\t\t\treturn myObs1Val;\n\t\t});\n\n\t\tautorun(reader => {\n\t\t\t/** @description myAutorun */\n\t\t\tconst shouldRead = myObsShouldRead.read(reader);\n\t\t\tif (shouldRead) {\n\t\t\t\tconst v = myComputed1.read(reader);\n\t\t\t\tlog.log(`myAutorun(shouldRead: true, myComputed1: ${v}): run`);\n\t\t\t} else {\n\t\t\t\tlog.log(`myAutorun(shouldRead: false): run`);\n\t\t\t}\n\t\t});\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myObsShouldRead.firstObserverAdded\",\n\t\t\t\"myObsShouldRead.get\",\n\t\t\t\"myObs1.firstObserverAdded\",\n\t\t\t\"myObs1.get\",\n\t\t\t\"myComputed1(myObs1: 0): Computed 0\",\n\t\t\t\"myAutorun(shouldRead: true, myComputed1: 0): run\",\n\t\t]);\n\n\t\ttransaction(tx => {\n\t\t\tmyObsShouldRead.set(false, tx);\n\t\t\tmyObs1.set(1, tx);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myObsShouldRead.set (value false)\",\n\t\t\t\t\"myObs1.set (value 1)\",\n\t\t\t]);\n\t\t});\n\t\t// myComputed1 should not be recomputed here, even though its dependency myObs1 changed!\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myObsShouldRead.get\",\n\t\t\t\"myAutorun(shouldRead: false): run\",\n\t\t\t\"myObs1.lastObserverRemoved\",\n\t\t]);\n\n\t\ttransaction(tx => {\n\t\t\tmyObsShouldRead.set(true, tx);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myObsShouldRead.set (value true)\",\n\t\t\t]);\n\t\t});\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myObsShouldRead.get\",\n\t\t\t\"myObs1.firstObserverAdded\",\n\t\t\t\"myObs1.get\",\n\t\t\t\"myComputed1(myObs1: 1): Computed 1\",\n\t\t\t\"myAutorun(shouldRead: true, myComputed1: 1): run\",\n\t\t]);\n\t});\n\n\tsuite('autorun rerun on neutral change', () => {\n\t\ttest('autorun reruns on neutral observable double change', () => {\n\t\t\tconst log = new Log();\n\t\t\tconst myObservable = observableValue('myObservable', 0);\n\n\t\t\tautorun(reader => {\n\t\t\t\t/** @description myAutorun */\n\t\t\t\tlog.log(`myAutorun.run(myObservable: ${myObservable.read(reader)})`);\n\t\t\t});\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ['myAutorun.run(myObservable: 0)']);\n\n\n\t\t\ttransaction((tx) => {\n\t\t\t\tmyObservable.set(2, tx);\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\n\t\t\t\tmyObservable.set(0, tx);\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\t\t\t});\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), ['myAutorun.run(myObservable: 0)']);\n\t\t});\n\n\t\ttest('autorun does not rerun on indirect neutral observable double change', () => {\n\t\t\tconst log = new Log();\n\t\t\tconst myObservable = observableValue('myObservable', 0);\n\t\t\tconst myDerived = derived(reader => {\n\t\t\t\t/** @description myDerived */\n\t\t\t\tconst val = myObservable.read(reader);\n\t\t\t\tlog.log(`myDerived.read(myObservable: ${val})`);\n\t\t\t\treturn val;\n\t\t\t});\n\n\t\t\tautorun(reader => {\n\t\t\t\t/** @description myAutorun */\n\t\t\t\tlog.log(`myAutorun.run(myDerived: ${myDerived.read(reader)})`);\n\t\t\t});\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myDerived.read(myObservable: 0)\",\n\t\t\t\t\"myAutorun.run(myDerived: 0)\"\n\t\t\t]);\n\n\t\t\ttransaction((tx) => {\n\t\t\t\tmyObservable.set(2, tx);\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\n\t\t\t\tmyObservable.set(0, tx);\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\t\t\t});\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myDerived.read(myObservable: 0)\"\n\t\t\t]);\n\t\t});\n\n\t\ttest('autorun reruns on indirect neutral observable double change when changes propagate', () => {\n\t\t\tconst log = new Log();\n\t\t\tconst myObservable = observableValue('myObservable', 0);\n\t\t\tconst myDerived = derived(reader => {\n\t\t\t\t/** @description myDerived */\n\t\t\t\tconst val = myObservable.read(reader);\n\t\t\t\tlog.log(`myDerived.read(myObservable: ${val})`);\n\t\t\t\treturn val;\n\t\t\t});\n\n\t\t\tautorun(reader => {\n\t\t\t\t/** @description myAutorun */\n\t\t\t\tlog.log(`myAutorun.run(myDerived: ${myDerived.read(reader)})`);\n\t\t\t});\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myDerived.read(myObservable: 0)\",\n\t\t\t\t\"myAutorun.run(myDerived: 0)\"\n\t\t\t]);\n\n\t\t\ttransaction((tx) => {\n\t\t\t\tmyObservable.set(2, tx);\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\n\t\t\t\tmyDerived.get(); // This marks the auto-run as changed\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\t\"myDerived.read(myObservable: 2)\"\n\t\t\t\t]);\n\n\t\t\t\tmyObservable.set(0, tx);\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), []);\n\t\t\t});\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myDerived.read(myObservable: 0)\",\n\t\t\t\t\"myAutorun.run(myDerived: 0)\"\n\t\t\t]);\n\t\t});\n\t});\n\n\ttest('self-disposing autorun', () => {\n\t\tconst log = new Log();\n\n\t\tconst observable1 = new LoggingObservableValue('myObservable1', 0, log);\n\t\tconst myObservable2 = new LoggingObservableValue('myObservable2', 0, log);\n\t\tconst myObservable3 = new LoggingObservableValue('myObservable3', 0, log);\n\n\t\tconst d = autorun(reader => {\n\t\t\t/** @description autorun */\n\t\t\tif (observable1.read(reader) >= 2) {\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\t\"myObservable1.set (value 2)\",\n\t\t\t\t\t\"myObservable1.get\",\n\t\t\t\t]);\n\n\t\t\t\tmyObservable2.read(reader);\n\t\t\t\t// First time this observable is read\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\t\"myObservable2.firstObserverAdded\",\n\t\t\t\t\t\"myObservable2.get\",\n\t\t\t\t]);\n\n\t\t\t\td.dispose();\n\t\t\t\t// Disposing removes all observers\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\t\"myObservable1.lastObserverRemoved\",\n\t\t\t\t\t\"myObservable2.lastObserverRemoved\",\n\t\t\t\t]);\n\n\t\t\t\tmyObservable3.read(reader);\n\t\t\t\t// This does not subscribe the observable, because the autorun is disposed\n\t\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\t\"myObservable3.get\",\n\t\t\t\t]);\n\t\t\t}\n\t\t});\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t'myObservable1.firstObserverAdded',\n\t\t\t'myObservable1.get',\n\t\t]);\n\n\t\tobservable1.set(1, undefined);\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t'myObservable1.set (value 1)',\n\t\t\t'myObservable1.get',\n\t\t]);\n\n\t\tobservable1.set(2, undefined);\n\t\t// See asserts in the autorun\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), ([]));\n\t});\n\n\ttest('changing observables in endUpdate', () => {\n\t\tconst log = new Log();\n\n\t\tconst myObservable1 = new LoggingObservableValue('myObservable1', 0, log);\n\t\tconst myObservable2 = new LoggingObservableValue('myObservable2', 0, log);\n\n\t\tconst myDerived1 = derived(reader => {\n\t\t\t/** @description myDerived1 */\n\t\t\tconst val = myObservable1.read(reader);\n\t\t\tlog.log(`myDerived1.read(myObservable: ${val})`);\n\t\t\treturn val;\n\t\t});\n\n\t\tconst myDerived2 = derived(reader => {\n\t\t\t/** @description myDerived2 */\n\t\t\tconst val = myObservable2.read(reader);\n\t\t\tif (val === 1) {\n\t\t\t\tmyDerived1.read(reader);\n\t\t\t}\n\t\t\tlog.log(`myDerived2.read(myObservable: ${val})`);\n\t\t\treturn val;\n\t\t});\n\n\t\tautorun(reader => {\n\t\t\t/** @description myAutorun */\n\t\t\tconst myDerived1Val = myDerived1.read(reader);\n\t\t\tconst myDerived2Val = myDerived2.read(reader);\n\t\t\tlog.log(`myAutorun.run(myDerived1: ${myDerived1Val}, myDerived2: ${myDerived2Val})`);\n\t\t});\n\n\t\ttransaction(tx => {\n\t\t\tmyObservable2.set(1, tx);\n\t\t\t// end update of this observable will trigger endUpdate of myDerived1 and\n\t\t\t// the autorun and the autorun will add myDerived2 as observer to myDerived1\n\t\t\tmyObservable1.set(1, tx);\n\t\t});\n\t});\n\n\ttest('set dependency in derived', () => {\n\t\tconst log = new Log();\n\n\t\tconst myObservable = new LoggingObservableValue('myObservable', 0, log);\n\t\tconst myComputed = derived(reader => {\n\t\t\t/** @description myComputed */\n\t\t\tlet value = myObservable.read(reader);\n\t\t\tconst origValue = value;\n\t\t\tlog.log(`myComputed(myObservable: ${origValue}): start computing`);\n\t\t\tif (value % 3 !== 0) {\n\t\t\t\tvalue++;\n\t\t\t\tmyObservable.set(value, undefined);\n\t\t\t}\n\t\t\tlog.log(`myComputed(myObservable: ${origValue}): finished computing`);\n\t\t\treturn value;\n\t\t});\n\n\t\tautorun(reader => {\n\t\t\t/** @description myAutorun */\n\t\t\tconst value = myComputed.read(reader);\n\t\t\tlog.log(`myAutorun(myComputed: ${value})`);\n\t\t});\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myObservable.firstObserverAdded\",\n\t\t\t\"myObservable.get\",\n\t\t\t\"myComputed(myObservable: 0): start computing\",\n\t\t\t\"myComputed(myObservable: 0): finished computing\",\n\t\t\t\"myAutorun(myComputed: 0)\"\n\t\t]);\n\n\t\tmyObservable.set(1, undefined);\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myObservable.set (value 1)\",\n\t\t\t\"myObservable.get\",\n\t\t\t\"myComputed(myObservable: 1): start computing\",\n\t\t\t\"myObservable.set (value 2)\",\n\t\t\t\"myComputed(myObservable: 1): finished computing\",\n\t\t\t\"myObservable.get\",\n\t\t\t\"myComputed(myObservable: 2): start computing\",\n\t\t\t\"myObservable.set (value 3)\",\n\t\t\t\"myComputed(myObservable: 2): finished computing\",\n\t\t\t\"myObservable.get\",\n\t\t\t\"myComputed(myObservable: 3): start computing\",\n\t\t\t\"myComputed(myObservable: 3): finished computing\",\n\t\t\t\"myAutorun(myComputed: 3)\",\n\t\t]);\n\t});\n\n\ttest('set dependency in autorun', () => {\n\t\tconst log = new Log();\n\t\tconst myObservable = new LoggingObservableValue('myObservable', 0, log);\n\n\t\tautorun(reader => {\n\t\t\t/** @description myAutorun */\n\t\t\tconst value = myObservable.read(reader);\n\t\t\tlog.log(`myAutorun(myObservable: ${value}): start`);\n\t\t\tif (value !== 0 && value < 4) {\n\t\t\t\tmyObservable.set(value + 1, undefined);\n\t\t\t}\n\t\t\tlog.log(`myAutorun(myObservable: ${value}): end`);\n\t\t});\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myObservable.firstObserverAdded\",\n\t\t\t\"myObservable.get\",\n\t\t\t\"myAutorun(myObservable: 0): start\",\n\t\t\t\"myAutorun(myObservable: 0): end\",\n\t\t]);\n\n\t\tmyObservable.set(1, undefined);\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myObservable.set (value 1)\",\n\t\t\t\"myObservable.get\",\n\t\t\t\"myAutorun(myObservable: 1): start\",\n\t\t\t\"myObservable.set (value 2)\",\n\t\t\t\"myAutorun(myObservable: 1): end\",\n\t\t\t\"myObservable.get\",\n\t\t\t\"myAutorun(myObservable: 2): start\",\n\t\t\t\"myObservable.set (value 3)\",\n\t\t\t\"myAutorun(myObservable: 2): end\",\n\t\t\t\"myObservable.get\",\n\t\t\t\"myAutorun(myObservable: 3): start\",\n\t\t\t\"myObservable.set (value 4)\",\n\t\t\t\"myAutorun(myObservable: 3): end\",\n\t\t\t\"myObservable.get\",\n\t\t\t\"myAutorun(myObservable: 4): start\",\n\t\t\t\"myAutorun(myObservable: 4): end\",\n\t\t]);\n\t});\n\n\ttest('get in transaction between sets', () => {\n\t\tconst log = new Log();\n\t\tconst myObservable = new LoggingObservableValue('myObservable', 0, log);\n\n\t\tconst myDerived1 = derived(reader => {\n\t\t\t/** @description myDerived1 */\n\t\t\tconst value = myObservable.read(reader);\n\t\t\tlog.log(`myDerived1(myObservable: ${value}): start computing`);\n\t\t\treturn value;\n\t\t});\n\n\t\tconst myDerived2 = derived(reader => {\n\t\t\t/** @description myDerived2 */\n\t\t\tconst value = myDerived1.read(reader);\n\t\t\tlog.log(`myDerived2(myDerived1: ${value}): start computing`);\n\t\t\treturn value;\n\t\t});\n\n\t\tautorun(reader => {\n\t\t\t/** @description myAutorun */\n\t\t\tconst value = myDerived2.read(reader);\n\t\t\tlog.log(`myAutorun(myDerived2: ${value})`);\n\t\t});\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myObservable.firstObserverAdded\",\n\t\t\t\"myObservable.get\",\n\t\t\t\"myDerived1(myObservable: 0): start computing\",\n\t\t\t\"myDerived2(myDerived1: 0): start computing\",\n\t\t\t\"myAutorun(myDerived2: 0)\",\n\t\t]);\n\n\t\ttransaction(tx => {\n\t\t\tmyObservable.set(1, tx);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myObservable.set (value 1)\",\n\t\t\t]);\n\n\t\t\tmyDerived2.get();\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myObservable.get\",\n\t\t\t\t\"myDerived1(myObservable: 1): start computing\",\n\t\t\t\t\"myDerived2(myDerived1: 1): start computing\",\n\t\t\t]);\n\n\t\t\tmyObservable.set(2, tx);\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myObservable.set (value 2)\",\n\t\t\t]);\n\t\t});\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myObservable.get\",\n\t\t\t\"myDerived1(myObservable: 2): start computing\",\n\t\t\t\"myDerived2(myDerived1: 2): start computing\",\n\t\t\t\"myAutorun(myDerived2: 2)\",\n\t\t]);\n\t});\n\n\ttest('bug: Dont reset states', () => {\n\t\tconst log = new Log();\n\t\tconst myObservable1 = new LoggingObservableValue('myObservable1', 0, log);\n\n\t\tconst myObservable2 = new LoggingObservableValue('myObservable2', 0, log);\n\t\tconst myDerived2 = derived(reader => {\n\t\t\t/** @description myDerived2 */\n\t\t\tconst val = myObservable2.read(reader);\n\t\t\tlog.log(`myDerived2.computed(myObservable2: ${val})`);\n\t\t\treturn val % 10;\n\t\t});\n\n\t\tconst myDerived3 = derived(reader => {\n\t\t\t/** @description myDerived3 */\n\t\t\tconst val1 = myObservable1.read(reader);\n\t\t\tconst val2 = myDerived2.read(reader);\n\t\t\tlog.log(`myDerived3.computed(myDerived1: ${val1}, myDerived2: ${val2})`);\n\t\t\treturn `${val1} + ${val2}`;\n\t\t});\n\n\t\tautorun(reader => {\n\t\t\t/** @description myAutorun */\n\t\t\tconst val = myDerived3.read(reader);\n\t\t\tlog.log(`myAutorun(myDerived3: ${val})`);\n\t\t});\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myObservable1.firstObserverAdded\",\n\t\t\t\"myObservable1.get\",\n\t\t\t\"myObservable2.firstObserverAdded\",\n\t\t\t\"myObservable2.get\",\n\t\t\t\"myDerived2.computed(myObservable2: 0)\",\n\t\t\t\"myDerived3.computed(myDerived1: 0, myDerived2: 0)\",\n\t\t\t\"myAutorun(myDerived3: 0 + 0)\",\n\t\t]);\n\n\t\ttransaction(tx => {\n\t\t\tmyObservable1.set(1, tx); // Mark myDerived 3 as stale\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myObservable1.set (value 1)\",\n\t\t\t]);\n\n\t\t\tmyObservable2.set(10, tx); // This is a non-change. myDerived3 should not be marked as possibly-depedency-changed!\n\t\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\t\"myObservable2.set (value 10)\",\n\t\t\t]);\n\t\t});\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t\"myObservable1.get\",\n\t\t\t\"myObservable2.get\",\n\t\t\t\"myDerived2.computed(myObservable2: 10)\",\n\t\t\t'myDerived3.computed(myDerived1: 1, myDerived2: 0)',\n\t\t\t'myAutorun(myDerived3: 1 + 0)',\n\t\t]);\n\t});\n\n\ttest('bug: Add observable in endUpdate', () => {\n\t\tconst myObservable1 = observableValue('myObservable1', 0);\n\t\tconst myObservable2 = observableValue('myObservable2', 0);\n\n\t\tconst myDerived1 = derived(reader => {\n\t\t\t/** @description myDerived1 */\n\t\t\treturn myObservable1.read(reader);\n\t\t});\n\n\t\tconst myDerived2 = derived(reader => {\n\t\t\t/** @description myDerived2 */\n\t\t\treturn myObservable2.read(reader);\n\t\t});\n\n\t\tconst myDerivedA1 = derived(reader => /** @description myDerivedA1 */ {\n\t\t\tconst d1 = myDerived1.read(reader);\n\t\t\tif (d1 === 1) {\n\t\t\t\t// This adds an observer while myDerived is still in update mode.\n\t\t\t\t// When myDerived exits update mode, the observer shouldn't receive\n\t\t\t\t// more endUpdate than beginUpdate calls.\n\t\t\t\tmyDerived2.read(reader);\n\t\t\t}\n\t\t});\n\n\t\tautorun(reader => {\n\t\t\t/** @description myAutorun1 */\n\t\t\tmyDerivedA1.read(reader);\n\t\t});\n\n\t\tautorun(reader => {\n\t\t\t/** @description myAutorun2 */\n\t\t\tmyDerived2.read(reader);\n\t\t});\n\n\t\ttransaction(tx => {\n\t\t\tmyObservable1.set(1, tx);\n\t\t\tmyObservable2.set(1, tx);\n\t\t});\n\t});\n\n\ttest('bug: fromObservableLight doesnt subscribe', () => {\n\t\tconst log = new Log();\n\t\tconst myObservable = new LoggingObservableValue('myObservable', 0, log);\n\n\t\tconst myDerived = derived(reader => /** @description myDerived */ {\n\t\t\tconst val = myObservable.read(reader);\n\t\t\tlog.log(`myDerived.computed(myObservable2: ${val})`);\n\t\t\treturn val % 10;\n\t\t});\n\n\t\tconst e = Event.fromObservableLight(myDerived);\n\t\tlog.log('event created');\n\t\te(() => {\n\t\t\tlog.log('event fired');\n\t\t});\n\n\t\tmyObservable.set(1, undefined);\n\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t'event created',\n\t\t\t'myObservable.firstObserverAdded',\n\t\t\t'myObservable.get',\n\t\t\t'myDerived.computed(myObservable2: 0)',\n\t\t\t'myObservable.set (value 1)',\n\t\t\t'myObservable.get',\n\t\t\t'myDerived.computed(myObservable2: 1)',\n\t\t\t'event fired',\n\t\t]);\n\t});\n\n\ttest('dont run autorun after dispose', () => {\n\t\tconst log = new Log();\n\t\tconst myObservable = new LoggingObservableValue('myObservable', 0, log);\n\n\t\tconst d = autorun(reader => {\n\t\t\t/** @description update */\n\t\t\tconst v = myObservable.read(reader);\n\t\t\tlog.log('autorun, myObservable:' + v);\n\t\t});\n\n\t\ttransaction(tx => {\n\t\t\tmyObservable.set(1, tx);\n\t\t\td.dispose();\n\t\t});\n\n\t\tassert.deepStrictEqual(log.getAndClearEntries(), [\n\t\t\t'myObservable.firstObserverAdded',\n\t\t\t'myObservable.get',\n\t\t\t'autorun, myObservable:0',\n\t\t\t'myObservable.set (value 1)',\n\t\t\t'myObservable.lastObserverRemoved',\n\t\t]);\n\t});\n});\n\nexport class LoggingObserver implements IObserver {\n\tprivate count = 0;\n\n\tconstructor(public readonly debugName: string, private readonly log: Log) {\n\t}\n\n\tbeginUpdate<T>(observable: IObservable<T, void>): void {\n\t\tthis.count++;\n\t\tthis.log.log(`${this.debugName}.beginUpdate (count ${this.count})`);\n\t}\n\tendUpdate<T>(observable: IObservable<T, void>): void {\n\t\tthis.log.log(`${this.debugName}.endUpdate (count ${this.count})`);\n\t\tthis.count--;\n\t}\n\thandleChange<T, TChange>(observable: IObservable<T, TChange>, change: TChange): void {\n\t\tthis.log.log(`${this.debugName}.handleChange (count ${this.count})`);\n\t}\n\thandlePossibleChange<T>(observable: IObservable<T, unknown>): void {\n\t\tthis.log.log(`${this.debugName}.handlePossibleChange`);\n\t}\n}\n\nexport class LoggingObservableValue<T, TChange = void>\n\textends BaseObservable<T, TChange>\n\timplements ISettableObservable<T, TChange>\n{\n\tprivate value: T;\n\n\tconstructor(public readonly debugName: string, initialValue: T, private readonly log: Log) {\n\t\tsuper();\n\t\tthis.value = initialValue;\n\t}\n\n\tprotected override onFirstObserverAdded(): void {\n\t\tthis.log.log(`${this.debugName}.firstObserverAdded`);\n\t}\n\n\tprotected override onLastObserverRemoved(): void {\n\t\tthis.log.log(`${this.debugName}.lastObserverRemoved`);\n\t}\n\n\tpublic get(): T {\n\t\tthis.log.log(`${this.debugName}.get`);\n\t\treturn this.value;\n\t}\n\n\tpublic set(value: T, tx: ITransaction | undefined, change: TChange): void {\n\t\tif (this.value === value) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (!tx) {\n\t\t\ttransaction((tx) => {\n\t\t\t\tthis.set(value, tx, change);\n\t\t\t}, () => `Setting ${this.debugName}`);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.log.log(`${this.debugName}.set (value ${value})`);\n\n\t\tthis.value = value;\n\n\t\tfor (const observer of this.observers) {\n\t\t\ttx.updateObserver(observer, this);\n\t\t\tobserver.handleChange(this, change);\n\t\t}\n\t}\n\n\toverride toString(): string {\n\t\treturn `${this.debugName}: ${this.value}`;\n\t}\n}\n\nclass Log {\n\tprivate readonly entries: string[] = [];\n\tpublic log(message: string): void {\n\t\tthis.entries.push(message);\n\t}\n\n\tpublic getAndClearEntries(): string[] {\n\t\tconst entries = [...this.entries];\n\t\tthis.entries.length = 0;\n\t\treturn entries;\n\t}\n}\n"]}