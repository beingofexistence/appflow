{"version":3,"sources":["file:///workspace/appflow/src/vs/base/test/common/snapshot.ts"],"names":[],"mappings":"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","file":"snapshot.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Lazy } from 'vs/base/common/lazy';\nimport { FileAccess } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\n\ndeclare const __readFileInTests: (path: string) => Promise<string>;\ndeclare const __writeFileInTests: (path: string, contents: string) => Promise<void>;\ndeclare const __readDirInTests: (path: string) => Promise<string[]>;\ndeclare const __unlinkInTests: (path: string) => Promise<void>;\ndeclare const __mkdirPInTests: (path: string) => Promise<void>;\n\n// setup on import so assertSnapshot has the current context without explicit passing\nlet context: Lazy<SnapshotContext> | undefined;\nconst sanitizeName = (name: string) => name.replace(/[^a-z0-9_-]/gi, '_');\nconst normalizeCrlf = (str: string) => str.replace(/\\r\\n/g, '\\n');\n\nexport interface ISnapshotOptions {\n\t/** Name for snapshot file, rather than an incremented number */\n\tname?: string;\n\t/** Extension name of the snapshot file, defaults to `.snap` */\n\textension?: string;\n}\n\n/**\n * This is exported only for tests against the snapshotting itself! Use\n * {@link assertSnapshot} as a consumer!\n */\nexport class SnapshotContext {\n\tprivate nextIndex = 0;\n\tprotected snapshotsDir: URI;\n\tprivate readonly namePrefix: string;\n\tprivate readonly usedNames = new Set();\n\n\tconstructor(private readonly test: Mocha.Test | undefined) {\n\t\tif (!test) {\n\t\t\tthrow new Error('assertSnapshot can only be used in a test');\n\t\t}\n\n\t\tif (!test.file) {\n\t\t\tthrow new Error('currentTest.file is not set, please open an issue with the test you\\'re trying to run');\n\t\t}\n\n\t\tconst src = FileAccess.asFileUri('');\n\t\tconst parts = test.file.split(/[/\\\\]/g);\n\n\t\tthis.namePrefix = sanitizeName(test.fullTitle()) + '_';\n\t\tthis.snapshotsDir = URI.joinPath(src, ...[...parts.slice(0, -1), '__snapshots__']);\n\t}\n\n\tpublic async assert(value: any, options?: ISnapshotOptions) {\n\t\tconst originalStack = new Error().stack!; // save to make the stack nicer on failure\n\t\tconst nameOrIndex = (options?.name ? sanitizeName(options.name) : this.nextIndex++);\n\t\tconst fileName = this.namePrefix + nameOrIndex + '.' + (options?.extension || 'snap');\n\t\tthis.usedNames.add(fileName);\n\n\t\tconst fpath = URI.joinPath(this.snapshotsDir, fileName).fsPath;\n\t\tconst actual = formatValue(value);\n\t\tlet expected: string;\n\t\ttry {\n\t\t\texpected = await __readFileInTests(fpath);\n\t\t} catch {\n\t\t\tconsole.info(`Creating new snapshot in: ${fpath}`);\n\t\t\tawait __mkdirPInTests(this.snapshotsDir.fsPath);\n\t\t\tawait __writeFileInTests(fpath, actual);\n\t\t\treturn;\n\t\t}\n\n\t\tif (normalizeCrlf(expected) !== normalizeCrlf(actual)) {\n\t\t\tawait __writeFileInTests(fpath + '.actual', actual);\n\t\t\tconst err: any = new Error(`Snapshot #${nameOrIndex} does not match expected output`);\n\t\t\terr.expected = expected;\n\t\t\terr.actual = actual;\n\t\t\terr.snapshotPath = fpath;\n\t\t\terr.stack = (err.stack as string)\n\t\t\t\t.split('\\n')\n\t\t\t\t// remove all frames from the async stack and keep the original caller's frame\n\t\t\t\t.slice(0, 1)\n\t\t\t\t.concat(originalStack.split('\\n').slice(3))\n\t\t\t\t.join('\\n');\n\t\t\tthrow err;\n\t\t}\n\t}\n\n\tpublic async removeOldSnapshots() {\n\t\tconst contents = await __readDirInTests(this.snapshotsDir.fsPath);\n\t\tconst toDelete = contents.filter(f => f.startsWith(this.namePrefix) && !this.usedNames.has(f));\n\t\tif (toDelete.length) {\n\t\t\tconsole.info(`Deleting ${toDelete.length} old snapshots for ${this.test?.fullTitle()}`);\n\t\t}\n\n\t\tawait Promise.all(toDelete.map(f => __unlinkInTests(URI.joinPath(this.snapshotsDir, f).fsPath)));\n\t}\n}\n\nconst debugDescriptionSymbol = Symbol.for('debug.description');\n\nfunction formatValue(value: unknown, level = 0, seen: unknown[] = []): string {\n\tswitch (typeof value) {\n\t\tcase 'bigint':\n\t\tcase 'boolean':\n\t\tcase 'number':\n\t\tcase 'symbol':\n\t\tcase 'undefined':\n\t\t\treturn String(value);\n\t\tcase 'string':\n\t\t\treturn level === 0 ? value : JSON.stringify(value);\n\t\tcase 'function':\n\t\t\treturn `[Function ${value.name}]`;\n\t\tcase 'object': {\n\t\t\tif (value === null) {\n\t\t\t\treturn 'null';\n\t\t\t}\n\t\t\tif (value instanceof RegExp) {\n\t\t\t\treturn String(value);\n\t\t\t}\n\t\t\tif (seen.includes(value)) {\n\t\t\t\treturn '[Circular]';\n\t\t\t}\n\t\t\tif (debugDescriptionSymbol in value && typeof (value as any)[debugDescriptionSymbol] === 'function') {\n\t\t\t\treturn (value as any)[debugDescriptionSymbol]();\n\t\t\t}\n\t\t\tconst oi = '  '.repeat(level);\n\t\t\tconst ci = '  '.repeat(level + 1);\n\t\t\tif (Array.isArray(value)) {\n\t\t\t\tconst children = value.map(v => formatValue(v, level + 1, [...seen, value]));\n\t\t\t\tconst multiline = children.some(c => c.includes('\\n')) || children.join(', ').length > 80;\n\t\t\t\treturn multiline ? `[\\n${ci}${children.join(`,\\n${ci}`)}\\n${oi}]` : `[ ${children.join(', ')} ]`;\n\t\t\t}\n\n\t\t\tlet entries;\n\t\t\tlet prefix = '';\n\t\t\tif (value instanceof Map) {\n\t\t\t\tprefix = 'Map ';\n\t\t\t\tentries = [...value.entries()];\n\t\t\t} else if (value instanceof Set) {\n\t\t\t\tprefix = 'Set ';\n\t\t\t\tentries = [...value.entries()];\n\t\t\t} else {\n\t\t\t\tentries = Object.entries(value);\n\t\t\t}\n\n\t\t\tconst lines = entries.map(([k, v]) => `${k}: ${formatValue(v, level + 1, [...seen, value])}`);\n\t\t\treturn prefix + (lines.length > 1\n\t\t\t\t? `{\\n${ci}${lines.join(`,\\n${ci}`)}\\n${oi}}`\n\t\t\t\t: `{ ${lines.join(',\\n')} }`);\n\t\t}\n\t\tdefault:\n\t\t\tthrow new Error(`Unknown type ${value}`);\n\t}\n}\n\nsetup(function () {\n\tconst currentTest = this.currentTest;\n\tcontext = new Lazy(() => new SnapshotContext(currentTest));\n});\nteardown(async function () {\n\tif (this.currentTest?.state === 'passed') {\n\t\tawait context?.rawValue?.removeOldSnapshots();\n\t}\n\tcontext = undefined;\n});\n\n/**\n * Implements a snapshot testing utility. ⚠️ This is async! ⚠️\n *\n * The first time a snapshot test is run, it'll record the value it's called\n * with as the expected value. Subsequent runs will fail if the value differs,\n * but the snapshot can be regenerated by hand or using the Selfhost Test\n * Provider Extension which'll offer to update it.\n *\n * The snapshot will be associated with the currently running test and stored\n * in a `__snapshots__` directory next to the test file, which is expected to\n * be the first `.test.js` file in the callstack.\n */\nexport function assertSnapshot(value: any, options?: ISnapshotOptions): Promise<void> {\n\tif (!context) {\n\t\tthrow new Error('assertSnapshot can only be used in a test');\n\t}\n\n\treturn context.value.assert(value, options);\n}\n"]}