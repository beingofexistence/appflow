{"version":3,"sources":["file:///workspace/appflow/src/vs/base/test/common/linkedText.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAKhG,KAAK,CAAC,YAAY,EAAE,GAAG,EAAE;QACxB,IAAI,CAAC,kBAAkB,EAAE,GAAG,EAAE;YAC7B,MAAM,CAAC,eAAe,CAAC,IAAA,gBAAG,EAAa,EAAE,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YACtD,MAAM,CAAC,eAAe,CAAC,IAAA,gBAAG,EAAa,OAAO,CAAC,CAAC,KAAK,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;YAClE,MAAM,CAAC,eAAe,CAAC,IAAA,gBAAG,EAAa,aAAa,CAAC,CAAC,KAAK,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;YAC9E,MAAM,CAAC,eAAe,CAAC,IAAA,gBAAG,EAAa,kDAAkD,CAAC,CAAC,KAAK,EAAE;gBACjG,oBAAoB;gBACpB,EAAE,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,kBAAkB,EAAE;gBAChD,GAAG;aACH,CAAC,CAAC;YACH,MAAM,CAAC,eAAe,CAAC,IAAA,gBAAG,EAAa,gEAAgE,CAAC,CAAC,KAAK,EAAE;gBAC/G,oBAAoB;gBACpB,EAAE,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,kBAAkB,EAAE,KAAK,EAAE,aAAa,EAAE;gBACtE,GAAG;aACH,CAAC,CAAC;YACH,MAAM,CAAC,eAAe,CAAC,IAAA,gBAAG,EAAa,kEAAkE,CAAC,CAAC,KAAK,EAAE;gBACjH,oBAAoB;gBACpB,EAAE,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,kBAAkB,EAAE,KAAK,EAAE,aAAa,EAAE;gBACtE,GAAG;aACH,CAAC,CAAC;YACH,MAAM,CAAC,eAAe,CAAC,IAAA,gBAAG,EAAa,oEAAoE,CAAC,CAAC,KAAK,EAAE;gBACnH,oBAAoB;gBACpB,EAAE,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,kBAAkB,EAAE,KAAK,EAAE,iBAAiB,EAAE;gBAC1E,GAAG;aACH,CAAC,CAAC;YACH,MAAM,CAAC,eAAe,CAAC,IAAA,gBAAG,EAAa,oEAAoE,CAAC,CAAC,KAAK,EAAE;gBACnH,oBAAoB;gBACpB,EAAE,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,kBAAkB,EAAE,KAAK,EAAE,eAAe,EAAE;gBACxE,GAAG;aACH,CAAC,CAAC;YACH,MAAM,CAAC,eAAe,CAAC,IAAA,gBAAG,EAAa,8CAA8C,CAAC,CAAC,KAAK,EAAE;gBAC7F,8CAA8C;aAC9C,CAAC,CAAC;YACH,MAAM,CAAC,eAAe,CAAC,IAAA,gBAAG,EAAa,oDAAoD,CAAC,CAAC,KAAK,EAAE;gBACnG,oBAAoB;gBACpB,EAAE,KAAK,EAAE,YAAY,EAAE,IAAI,EAAE,mBAAmB,EAAE;gBAClD,GAAG;aACH,CAAC,CAAC;YACH,MAAM,CAAC,eAAe,CAAC,IAAA,gBAAG,EAAa,yCAAyC,CAAC,CAAC,KAAK,EAAE;gBACxF,yCAAyC;aACzC,CAAC,CAAC;YACH,MAAM,CAAC,eAAe,CAAC,IAAA,gBAAG,EAAa,gDAAgD,CAAC,CAAC,KAAK,EAAE;gBAC/F,oBAAoB;gBACpB,EAAE,KAAK,EAAE,WAAW,EAAE,IAAI,EAAE,gBAAgB,EAAE;gBAC9C,GAAG;aACH,CAAC,CAAC;YACH,MAAM,CAAC,eAAe,CAAC,IAAA,gBAAG,EAAa,0CAA0C,CAAC,CAAC,KAAK,EAAE;gBACzF,0CAA0C;aAC1C,CAAC,CAAC;YACH,MAAM,CAAC,eAAe,CAAC,IAAA,gBAAG,EAAa,8DAA8D,CAAC,CAAC,KAAK,EAAE;gBAC7G,OAAO;gBACP,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,aAAa,EAAE,KAAK,EAAE,MAAM,EAAE;gBACpD,YAAY;gBACZ,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE;gBACpC,KAAK;aACL,CAAC,CAAC;YACH,MAAM,CAAC,eAAe,CAAC,IAAA,gBAAG,EAAa,gEAAgE,CAAC,CAAC,KAAK,EAAE;gBAC/G,QAAQ;gBACR,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,aAAa,EAAE,KAAK,EAAE,MAAM,EAAE;gBACpD,aAAa;gBACb,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,YAAY,EAAE;gBACpC,KAAK;aACL,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2BAA2B,EAAE,GAAG,EAAE;YACtC,MAAM,CAAC,eAAe,CAAC,IAAA,gBAAG,EAAa,yFAAyF,CAAC,CAAC,KAAK,EAAE;gBACxI,IAAI;gBACJ,EAAE,KAAK,EAAE,aAAa,EAAE,IAAI,EAAE,kBAAkB,EAAE,KAAK,EAAE,QAAQ,EAAE;gBACnE,KAAK;gBACL,EAAE,KAAK,EAAE,aAAa,EAAE,IAAI,EAAE,kBAAkB,EAAE,KAAK,EAAE,QAAQ,EAAE;gBACnE,IAAI;aACJ,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"linkedText.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { parseLinkedText } from 'vs/base/common/linkedText';\n\nsuite('LinkedText', () => {\n\ttest('parses correctly', () => {\n\t\tassert.deepStrictEqual(parseLinkedText('').nodes, []);\n\t\tassert.deepStrictEqual(parseLinkedText('hello').nodes, ['hello']);\n\t\tassert.deepStrictEqual(parseLinkedText('hello there').nodes, ['hello there']);\n\t\tassert.deepStrictEqual(parseLinkedText('Some message with [link text](http://link.href).').nodes, [\n\t\t\t'Some message with ',\n\t\t\t{ label: 'link text', href: 'http://link.href' },\n\t\t\t'.'\n\t\t]);\n\t\tassert.deepStrictEqual(parseLinkedText('Some message with [link text](http://link.href \"and a title\").').nodes, [\n\t\t\t'Some message with ',\n\t\t\t{ label: 'link text', href: 'http://link.href', title: 'and a title' },\n\t\t\t'.'\n\t\t]);\n\t\tassert.deepStrictEqual(parseLinkedText('Some message with [link text](http://link.href \\'and a title\\').').nodes, [\n\t\t\t'Some message with ',\n\t\t\t{ label: 'link text', href: 'http://link.href', title: 'and a title' },\n\t\t\t'.'\n\t\t]);\n\t\tassert.deepStrictEqual(parseLinkedText('Some message with [link text](http://link.href \"and a \\'title\\'\").').nodes, [\n\t\t\t'Some message with ',\n\t\t\t{ label: 'link text', href: 'http://link.href', title: 'and a \\'title\\'' },\n\t\t\t'.'\n\t\t]);\n\t\tassert.deepStrictEqual(parseLinkedText('Some message with [link text](http://link.href \\'and a \"title\"\\').').nodes, [\n\t\t\t'Some message with ',\n\t\t\t{ label: 'link text', href: 'http://link.href', title: 'and a \"title\"' },\n\t\t\t'.'\n\t\t]);\n\t\tassert.deepStrictEqual(parseLinkedText('Some message with [link text](random stuff).').nodes, [\n\t\t\t'Some message with [link text](random stuff).'\n\t\t]);\n\t\tassert.deepStrictEqual(parseLinkedText('Some message with [https link](https://link.href).').nodes, [\n\t\t\t'Some message with ',\n\t\t\t{ label: 'https link', href: 'https://link.href' },\n\t\t\t'.'\n\t\t]);\n\t\tassert.deepStrictEqual(parseLinkedText('Some message with [https link](https:).').nodes, [\n\t\t\t'Some message with [https link](https:).'\n\t\t]);\n\t\tassert.deepStrictEqual(parseLinkedText('Some message with [a command](command:foobar).').nodes, [\n\t\t\t'Some message with ',\n\t\t\t{ label: 'a command', href: 'command:foobar' },\n\t\t\t'.'\n\t\t]);\n\t\tassert.deepStrictEqual(parseLinkedText('Some message with [a command](command:).').nodes, [\n\t\t\t'Some message with [a command](command:).'\n\t\t]);\n\t\tassert.deepStrictEqual(parseLinkedText('link [one](command:foo \"nice\") and link [two](http://foo)...').nodes, [\n\t\t\t'link ',\n\t\t\t{ label: 'one', href: 'command:foo', title: 'nice' },\n\t\t\t' and link ',\n\t\t\t{ label: 'two', href: 'http://foo' },\n\t\t\t'...'\n\t\t]);\n\t\tassert.deepStrictEqual(parseLinkedText('link\\n[one](command:foo \"nice\")\\nand link [two](http://foo)...').nodes, [\n\t\t\t'link\\n',\n\t\t\t{ label: 'one', href: 'command:foo', title: 'nice' },\n\t\t\t'\\nand link ',\n\t\t\t{ label: 'two', href: 'http://foo' },\n\t\t\t'...'\n\t\t]);\n\t});\n\n\ttest('Should match non-greedily', () => {\n\t\tassert.deepStrictEqual(parseLinkedText('a [link text 1](http://link.href \"title1\") b [link text 2](http://link.href \"title2\") c').nodes, [\n\t\t\t'a ',\n\t\t\t{ label: 'link text 1', href: 'http://link.href', title: 'title1' },\n\t\t\t' b ',\n\t\t\t{ label: 'link text 2', href: 'http://link.href', title: 'title2' },\n\t\t\t' c',\n\t\t]);\n\t});\n});\n"]}