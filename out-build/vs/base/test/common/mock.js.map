{"version":3,"sources":["file:///workspace/appflow/src/vs/base/test/common/mock.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG,SAAgB,GAAG;QAClB,OAAO,cAAc,CAAQ,CAAC;IAC/B,CAAC;IAFD,kBAEC;IAID,mFAAmF;IACnF,yBAAyB;IAClB,MAAM,GAAG,GAAU,GAAqB,EAAE,CAAC,CAA6B,UAAe,EAA2B,EAAE;QAC1H,OAAO,IAAI,KAAK,CAAC,EAAE,GAAG,UAAU,EAAS,EAAE;YAC1C,GAAG,CAAC,MAAM,EAAE,GAAG;gBACd,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;oBAChC,MAAM,CAAC,GAAG,CAAC,GAAG,IAAA,YAAI,GAAE,CAAC;iBACrB;gBAED,OAAO,MAAM,CAAC,GAAG,CAAC,CAAC;YACpB,CAAC;YACD,GAAG,CAAC,MAAM,EAAE,GAAG,EAAE,KAAK;gBACrB,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;gBACpB,OAAO,IAAI,CAAC;YACb,CAAC;SACD,CAAC,CAAC;IACJ,CAAC,CAAC;IAdW,QAAA,GAAG,OAcd","file":"mock.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { SinonStub, stub } from 'sinon';\n\nexport interface Ctor<T> {\n\tnew(): T;\n}\n\nexport function mock<T>(): Ctor<T> {\n\treturn function () { } as any;\n}\n\nexport type MockObject<T, ExceptProps = never> = { [K in keyof T]: K extends ExceptProps ? T[K] : SinonStub };\n\n// Creates an object object that returns sinon mocks for every property. Optionally\n// takes base properties.\nexport const mockObject = <T extends object>() => <TP extends Partial<T> = {}>(properties?: TP): MockObject<T, keyof TP> => {\n\treturn new Proxy({ ...properties } as any, {\n\t\tget(target, key) {\n\t\t\tif (!target.hasOwnProperty(key)) {\n\t\t\t\ttarget[key] = stub();\n\t\t\t}\n\n\t\t\treturn target[key];\n\t\t},\n\t\tset(target, key, value) {\n\t\t\ttarget[key] = value;\n\t\t\treturn true;\n\t\t},\n\t});\n};\n"]}