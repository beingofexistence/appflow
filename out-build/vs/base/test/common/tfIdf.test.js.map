{"version":3,"sources":["file:///workspace/appflow/src/vs/base/test/common/tfIdf.test.ts"],"names":[],"mappings":"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","file":"tfIdf.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { TfIdfCalculator, TfIdfDocument, TfIdfScore } from 'vs/base/common/tfIdf';\n\n/**\n * Generates all permutations of an array.\n *\n * This is useful for testing to make sure order does not effect the result.\n */\nfunction permutate<T>(arr: T[]): T[][] {\n\tif (arr.length === 0) {\n\t\treturn [[]];\n\t}\n\n\tconst result: T[][] = [];\n\n\tfor (let i = 0; i < arr.length; i++) {\n\t\tconst rest = [...arr.slice(0, i), ...arr.slice(i + 1)];\n\t\tconst permutationsRest = permutate(rest);\n\t\tfor (let j = 0; j < permutationsRest.length; j++) {\n\t\t\tresult.push([arr[i], ...permutationsRest[j]]);\n\t\t}\n\t}\n\n\treturn result;\n}\n\nfunction assertScoreOrdersEqual(actualScores: TfIdfScore[], expectedScoreKeys: string[]): void {\n\tactualScores.sort((a, b) => (b.score - a.score) || a.key.localeCompare(b.key));\n\tassert.strictEqual(actualScores.length, expectedScoreKeys.length);\n\tfor (let i = 0; i < expectedScoreKeys.length; i++) {\n\t\tassert.strictEqual(actualScores[i].key, expectedScoreKeys[i]);\n\t}\n}\n\nsuite('TF-IDF Calculator', function () {\n\ttest('Should return no scores when no documents are given', () => {\n\t\tconst tfidf = new TfIdfCalculator();\n\t\tconst scores = tfidf.calculateScores('something', CancellationToken.None);\n\t\tassertScoreOrdersEqual(scores, []);\n\t});\n\n\ttest('Should return no scores for term not in document', () => {\n\t\tconst tfidf = new TfIdfCalculator().updateDocuments([\n\t\t\tmakeDocument('A', 'cat dog fish'),\n\t\t]);\n\t\tconst scores = tfidf.calculateScores('elepant', CancellationToken.None);\n\t\tassertScoreOrdersEqual(scores, []);\n\t});\n\n\ttest('Should return scores for document with exact match', () => {\n\t\tfor (const docs of permutate([\n\t\t\tmakeDocument('A', 'cat dog cat'),\n\t\t\tmakeDocument('B', 'cat fish'),\n\t\t])) {\n\t\t\tconst tfidf = new TfIdfCalculator().updateDocuments(docs);\n\t\t\tconst scores = tfidf.calculateScores('dog', CancellationToken.None);\n\t\t\tassertScoreOrdersEqual(scores, ['A']);\n\t\t}\n\t});\n\n\ttest('Should return document with more matches first', () => {\n\t\tfor (const docs of permutate([\n\t\t\tmakeDocument('/A', 'cat dog cat'),\n\t\t\tmakeDocument('/B', 'cat fish'),\n\t\t\tmakeDocument('/C', 'frog'),\n\t\t])) {\n\t\t\tconst tfidf = new TfIdfCalculator().updateDocuments(docs);\n\t\t\tconst scores = tfidf.calculateScores('cat', CancellationToken.None);\n\t\t\tassertScoreOrdersEqual(scores, ['/A', '/B']);\n\t\t}\n\t});\n\n\ttest('Should return document with more matches first when term appears in all documents', () => {\n\t\tfor (const docs of permutate([\n\t\t\tmakeDocument('/A', 'cat dog cat cat'),\n\t\t\tmakeDocument('/B', 'cat fish'),\n\t\t\tmakeDocument('/C', 'frog cat cat'),\n\t\t])) {\n\t\t\tconst tfidf = new TfIdfCalculator().updateDocuments(docs);\n\t\t\tconst scores = tfidf.calculateScores('cat', CancellationToken.None);\n\t\t\tassertScoreOrdersEqual(scores, ['/A', '/C', '/B']);\n\t\t}\n\t});\n\n\ttest('Should weigh less common term higher', () => {\n\t\tfor (const docs of permutate([\n\t\t\tmakeDocument('/A', 'cat dog cat'),\n\t\t\tmakeDocument('/B', 'fish'),\n\t\t\tmakeDocument('/C', 'cat cat cat cat'),\n\t\t\tmakeDocument('/D', 'cat fish')\n\t\t])) {\n\t\t\tconst tfidf = new TfIdfCalculator().updateDocuments(docs);\n\t\t\tconst scores = tfidf.calculateScores('cat the dog', CancellationToken.None);\n\t\t\tassertScoreOrdersEqual(scores, ['/A', '/C', '/D']);\n\t\t}\n\t});\n\n\ttest('Should weigh chunks with less common terms higher', () => {\n\t\tfor (const docs of permutate([\n\t\t\tmakeDocument('/A', ['cat dog cat', 'fish']),\n\t\t\tmakeDocument('/B', ['cat cat cat cat dog', 'dog'])\n\t\t])) {\n\t\t\tconst tfidf = new TfIdfCalculator().updateDocuments(docs);\n\t\t\tconst scores = tfidf.calculateScores('cat', CancellationToken.None);\n\t\t\tassertScoreOrdersEqual(scores, ['/B', '/A']);\n\t\t}\n\n\t\tfor (const docs of permutate([\n\t\t\tmakeDocument('/A', ['cat dog cat', 'fish']),\n\t\t\tmakeDocument('/B', ['cat cat cat cat dog', 'dog'])\n\t\t])) {\n\t\t\tconst tfidf = new TfIdfCalculator().updateDocuments(docs);\n\t\t\tconst scores = tfidf.calculateScores('dog', CancellationToken.None);\n\t\t\tassertScoreOrdersEqual(scores, ['/A', '/B', '/B']);\n\t\t}\n\n\t\tfor (const docs of permutate([\n\t\t\tmakeDocument('/A', ['cat dog cat', 'fish']),\n\t\t\tmakeDocument('/B', ['cat cat cat cat dog', 'dog'])\n\t\t])) {\n\t\t\tconst tfidf = new TfIdfCalculator().updateDocuments(docs);\n\t\t\tconst scores = tfidf.calculateScores('cat the dog', CancellationToken.None);\n\t\t\tassertScoreOrdersEqual(scores, ['/B', '/A', '/B']);\n\t\t}\n\n\t\tfor (const docs of permutate([\n\t\t\tmakeDocument('/A', ['cat dog cat', 'fish']),\n\t\t\tmakeDocument('/B', ['cat cat cat cat dog', 'dog'])\n\t\t])) {\n\t\t\tconst tfidf = new TfIdfCalculator().updateDocuments(docs);\n\t\t\tconst scores = tfidf.calculateScores('lake fish', CancellationToken.None);\n\t\t\tassertScoreOrdersEqual(scores, ['/A']);\n\t\t}\n\t});\n\n\ttest('Should ignore case and punctuation', () => {\n\t\tfor (const docs of permutate([\n\t\t\tmakeDocument('/A', 'Cat doG.cat'),\n\t\t\tmakeDocument('/B', 'cAt fiSH'),\n\t\t\tmakeDocument('/C', 'frOg'),\n\t\t])) {\n\t\t\tconst tfidf = new TfIdfCalculator().updateDocuments(docs);\n\t\t\tconst scores = tfidf.calculateScores('. ,CaT!  ', CancellationToken.None);\n\t\t\tassertScoreOrdersEqual(scores, ['/A', '/B']);\n\t\t}\n\t});\n\n\ttest('Should match on camelCase words', () => {\n\t\tfor (const docs of permutate([\n\t\t\tmakeDocument('/A', 'catDog cat'),\n\t\t\tmakeDocument('/B', 'fishCatFish'),\n\t\t\tmakeDocument('/C', 'frogcat'),\n\t\t])) {\n\t\t\tconst tfidf = new TfIdfCalculator().updateDocuments(docs);\n\t\t\tconst scores = tfidf.calculateScores('catDOG', CancellationToken.None);\n\t\t\tassertScoreOrdersEqual(scores, ['/A', '/B']);\n\t\t}\n\t});\n\n\ttest('Should not match document after delete', () => {\n\t\tconst docA = makeDocument('/A', 'cat dog cat');\n\t\tconst docB = makeDocument('/B', 'cat fish');\n\t\tconst docC = makeDocument('/C', 'frog');\n\n\t\tconst tfidf = new TfIdfCalculator().updateDocuments([docA, docB, docC]);\n\t\tlet scores = tfidf.calculateScores('cat', CancellationToken.None);\n\t\tassertScoreOrdersEqual(scores, ['/A', '/B']);\n\n\t\ttfidf.deleteDocument(docA.key);\n\t\tscores = tfidf.calculateScores('cat', CancellationToken.None);\n\t\tassertScoreOrdersEqual(scores, ['/B']);\n\n\t\ttfidf.deleteDocument(docC.key);\n\t\tscores = tfidf.calculateScores('cat', CancellationToken.None);\n\t\tassertScoreOrdersEqual(scores, ['/B']);\n\n\t\ttfidf.deleteDocument(docB.key);\n\t\tscores = tfidf.calculateScores('cat', CancellationToken.None);\n\t\tassertScoreOrdersEqual(scores, []);\n\t});\n});\n\nfunction makeDocument(key: string, content: string | string[]): TfIdfDocument {\n\treturn {\n\t\tkey,\n\t\ttextChunks: Array.isArray(content) ? content : [content],\n\t};\n}\n"]}