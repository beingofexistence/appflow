{"version":3,"sources":["file:///workspace/appflow/src/vs/base/test/common/collections.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAKhG,KAAK,CAAC,aAAa,EAAE,GAAG,EAAE;QAEzB,IAAI,CAAC,SAAS,EAAE,GAAG,EAAE;YAEpB,MAAM,MAAM,GAAG,GAAG,EAAE,MAAM,GAAG,GAAG,CAAC;YACjC,MAAM,MAAM,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC;YACzC,MAAM,MAAM,GAAG;gBACd,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE;gBAC9B,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE;gBAC9B,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE;aAC9B,CAAC;YAEF,MAAM,OAAO,GAAG,WAAW,CAAC,EAAE,CAAM,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;YAExD,UAAU;YACV,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC9C,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YACrD,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;YAErD,UAAU;YACV,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;YAC9C,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"collections.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport * as collections from 'vs/base/common/collections';\n\nsuite('Collections', () => {\n\n\ttest('groupBy', () => {\n\n\t\tconst group1 = 'a', group2 = 'b';\n\t\tconst value1 = 1, value2 = 2, value3 = 3;\n\t\tconst source = [\n\t\t\t{ key: group1, value: value1 },\n\t\t\t{ key: group1, value: value2 },\n\t\t\t{ key: group2, value: value3 },\n\t\t];\n\n\t\tconst grouped = collections.groupBy(source, x => x.key);\n\n\t\t// Group 1\n\t\tassert.strictEqual(grouped[group1].length, 2);\n\t\tassert.strictEqual(grouped[group1][0].value, value1);\n\t\tassert.strictEqual(grouped[group1][1].value, value2);\n\n\t\t// Group 2\n\t\tassert.strictEqual(grouped[group2].length, 1);\n\t\tassert.strictEqual(grouped[group2][0].value, value3);\n\t});\n});\n"]}