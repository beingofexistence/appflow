{"version":3,"sources":["file:///workspace/appflow/src/vs/base/test/common/lazy.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAKhG,KAAK,CAAC,MAAM,EAAE,GAAG,EAAE;QAElB,IAAI,CAAC,0CAA0C,EAAE,GAAG,EAAE;YACrD,IAAI,OAAO,GAAG,CAAC,CAAC;YAChB,MAAM,KAAK,GAAG,IAAI,SAAE,CAAG,GAAG,EAAE,CAAC,EAAE,OAAO,CAAC,CAAC;YAExC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YAC1C,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YACnC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YACzC,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,sCAAsC;QAC3E,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,+BAA+B,EAAE,GAAG,EAAE;YAC1C,IAAI,OAAO,GAAG,CAAC,CAAC;YAChB,MAAM,KAAK,GAAG,IAAI,SAAE,CAAG,GAAG,EAAE,GAAG,MAAM,IAAI,KAAK,CAAC,GAAG,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAEnE,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;YAC1C,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;YAC1C,MAAM,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YACzC,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAC3C,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"lazy.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Lazy } from 'vs/base/common/lazy';\n\nsuite('Lazy', () => {\n\n\ttest('lazy values should only be resolved once', () => {\n\t\tlet counter = 0;\n\t\tconst value = new Lazy(() => ++counter);\n\n\t\tassert.strictEqual(value.hasValue, false);\n\t\tassert.strictEqual(value.value, 1);\n\t\tassert.strictEqual(value.hasValue, true);\n\t\tassert.strictEqual(value.value, 1); // make sure we did not evaluate again\n\t});\n\n\ttest('lazy values handle error case', () => {\n\t\tlet counter = 0;\n\t\tconst value = new Lazy(() => { throw new Error(`${++counter}`); });\n\n\t\tassert.strictEqual(value.hasValue, false);\n\t\tassert.throws(() => value.value, /\\b1\\b/);\n\t\tassert.strictEqual(value.hasValue, true);\n\t\tassert.throws(() => value.value, /\\b1\\b/);\n\t});\n});\n"]}