{"version":3,"sources":["file:///workspace/appflow/src/vs/base/test/common/stripComments.test.ts","vs/base/test/common/stripComments.test.ts"],"names":[],"mappings":"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","file":"stripComments.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as assert from 'assert';\n\nimport { stripComments } from 'vs/base/common/stripComments';\n\n// We use this regular expression quite often to strip comments in JSON files.\n\nsuite('Strip Comments', () => {\n\ttest('Line comment', () => {\n\t\tconst content: string = [\n\t\t\t\"{\",\n\t\t\t\"  \\\"prop\\\": 10 // a comment\",\n\t\t\t\"}\",\n\t\t].join('\\n');\n\t\tconst expected = [\n\t\t\t\"{\",\n\t\t\t\"  \\\"prop\\\": 10 \",\n\t\t\t\"}\",\n\t\t].join('\\n');\n\t\tassert.strictEqual(stripComments(content), expected);\n\t});\n\ttest('Line comment - EOF', () => {\n\t\tconst content: string = [\n\t\t\t\"{\",\n\t\t\t\"}\",\n\t\t\t\"// a comment\"\n\t\t].join('\\n');\n\t\tconst expected = [\n\t\t\t\"{\",\n\t\t\t\"}\",\n\t\t\t\"\"\n\t\t].join('\\n');\n\t\tassert.strictEqual(stripComments(content), expected);\n\t});\n\ttest('Line comment - \\\\r\\\\n', () => {\n\t\tconst content: string = [\n\t\t\t\"{\",\n\t\t\t\"  \\\"prop\\\": 10 // a comment\",\n\t\t\t\"}\",\n\t\t].join('\\r\\n');\n\t\tconst expected = [\n\t\t\t\"{\",\n\t\t\t\"  \\\"prop\\\": 10 \",\n\t\t\t\"}\",\n\t\t].join('\\r\\n');\n\t\tassert.strictEqual(stripComments(content), expected);\n\t});\n\ttest('Line comment - EOF - \\\\r\\\\n', () => {\n\t\tconst content: string = [\n\t\t\t\"{\",\n\t\t\t\"}\",\n\t\t\t\"// a comment\"\n\t\t].join('\\r\\n');\n\t\tconst expected = [\n\t\t\t\"{\",\n\t\t\t\"}\",\n\t\t\t\"\"\n\t\t].join('\\r\\n');\n\t\tassert.strictEqual(stripComments(content), expected);\n\t});\n\ttest('Block comment - single line', () => {\n\t\tconst content: string = [\n\t\t\t\"{\",\n\t\t\t\"  /* before */\\\"prop\\\": 10/* after */\",\n\t\t\t\"}\",\n\t\t].join('\\n');\n\t\tconst expected = [\n\t\t\t\"{\",\n\t\t\t\"  \\\"prop\\\": 10\",\n\t\t\t\"}\",\n\t\t].join('\\n');\n\t\tassert.strictEqual(stripComments(content), expected);\n\t});\n\ttest('Block comment - multi line', () => {\n\t\tconst content: string = [\n\t\t\t\"{\",\n\t\t\t\"  /**\",\n\t\t\t\"   * Some comment\",\n\t\t\t\"   */\",\n\t\t\t\"  \\\"prop\\\": 10\",\n\t\t\t\"}\",\n\t\t].join('\\n');\n\t\tconst expected = [\n\t\t\t\"{\",\n\t\t\t\"  \",\n\t\t\t\"  \\\"prop\\\": 10\",\n\t\t\t\"}\",\n\t\t].join('\\n');\n\t\tassert.strictEqual(stripComments(content), expected);\n\t});\n\ttest('Block comment - shortest match', () => {\n\t\tconst content = \"/* abc */ */\";\n\t\tconst expected = \" */\";\n\t\tassert.strictEqual(stripComments(content), expected);\n\t});\n\ttest('No strings - double quote', () => {\n\t\tconst content: string = [\n\t\t\t\"{\",\n\t\t\t\"  \\\"/* */\\\": 10\",\n\t\t\t\"}\"\n\t\t].join('\\n');\n\t\tconst expected: string = [\n\t\t\t\"{\",\n\t\t\t\"  \\\"/* */\\\": 10\",\n\t\t\t\"}\"\n\t\t].join('\\n');\n\t\tassert.strictEqual(stripComments(content), expected);\n\t});\n\ttest('No strings - single quote', () => {\n\t\tconst content: string = [\n\t\t\t\"{\",\n\t\t\t\"  '/* */': 10\",\n\t\t\t\"}\"\n\t\t].join('\\n');\n\t\tconst expected: string = [\n\t\t\t\"{\",\n\t\t\t\"  '/* */': 10\",\n\t\t\t\"}\"\n\t\t].join('\\n');\n\t\tassert.strictEqual(stripComments(content), expected);\n\t});\n\ttest('Trailing comma in object', () => {\n\t\tconst content: string = [\n\t\t\t\"{\",\n\t\t\t`  \"a\": 10,`,\n\t\t\t\"}\"\n\t\t].join('\\n');\n\t\tconst expected: string = [\n\t\t\t\"{\",\n\t\t\t`  \"a\": 10`,\n\t\t\t\"}\"\n\t\t].join('\\n');\n\t\tassert.strictEqual(stripComments(content), expected);\n\t});\n\ttest('Trailing comma in array', () => {\n\t\tconst content: string = [\n\t\t\t`[ \"a\", \"b\", \"c\", ]`\n\t\t].join('\\n');\n\t\tconst expected: string = [\n\t\t\t`[ \"a\", \"b\", \"c\" ]`\n\t\t].join('\\n');\n\t\tassert.strictEqual(stripComments(content), expected);\n\t});\n});\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as assert from 'assert';\n\nimport { stripComments } from 'vs/base/common/stripComments';\n\n// We use this regular expression quite often to strip comments in JSON files.\n\nsuite('Strip Comments', () => {\n\ttest('Line comment', () => {\n\t\tconst content: string = [\n\t\t\t\"{\",\n\t\t\t\"  \\\"prop\\\": 10 // a comment\",\n\t\t\t\"}\",\n\t\t].join('\\n');\n\t\tconst expected = [\n\t\t\t\"{\",\n\t\t\t\"  \\\"prop\\\": 10 \",\n\t\t\t\"}\",\n\t\t].join('\\n');\n\t\tassert.strictEqual(stripComments(content), expected);\n\t});\n\ttest('Line comment - EOF', () => {\n\t\tconst content: string = [\n\t\t\t\"{\",\n\t\t\t\"}\",\n\t\t\t\"// a comment\"\n\t\t].join('\\n');\n\t\tconst expected = [\n\t\t\t\"{\",\n\t\t\t\"}\",\n\t\t\t\"\"\n\t\t].join('\\n');\n\t\tassert.strictEqual(stripComments(content), expected);\n\t});\n\ttest('Line comment - \\\\r\\\\n', () => {\n\t\tconst content: string = [\n\t\t\t\"{\",\n\t\t\t\"  \\\"prop\\\": 10 // a comment\",\n\t\t\t\"}\",\n\t\t].join('\\r\\n');\n\t\tconst expected = [\n\t\t\t\"{\",\n\t\t\t\"  \\\"prop\\\": 10 \",\n\t\t\t\"}\",\n\t\t].join('\\r\\n');\n\t\tassert.strictEqual(stripComments(content), expected);\n\t});\n\ttest('Line comment - EOF - \\\\r\\\\n', () => {\n\t\tconst content: string = [\n\t\t\t\"{\",\n\t\t\t\"}\",\n\t\t\t\"// a comment\"\n\t\t].join('\\r\\n');\n\t\tconst expected = [\n\t\t\t\"{\",\n\t\t\t\"}\",\n\t\t\t\"\"\n\t\t].join('\\r\\n');\n\t\tassert.strictEqual(stripComments(content), expected);\n\t});\n\ttest('Block comment - single line', () => {\n\t\tconst content: string = [\n\t\t\t\"{\",\n\t\t\t\"  /* before */\\\"prop\\\": 10/* after */\",\n\t\t\t\"}\",\n\t\t].join('\\n');\n\t\tconst expected = [\n\t\t\t\"{\",\n\t\t\t\"  \\\"prop\\\": 10\",\n\t\t\t\"}\",\n\t\t].join('\\n');\n\t\tassert.strictEqual(stripComments(content), expected);\n\t});\n\ttest('Block comment - multi line', () => {\n\t\tconst content: string = [\n\t\t\t\"{\",\n\t\t\t\"  /**\",\n\t\t\t\"   * Some comment\",\n\t\t\t\"   */\",\n\t\t\t\"  \\\"prop\\\": 10\",\n\t\t\t\"}\",\n\t\t].join('\\n');\n\t\tconst expected = [\n\t\t\t\"{\",\n\t\t\t\"  \",\n\t\t\t\"  \\\"prop\\\": 10\",\n\t\t\t\"}\",\n\t\t].join('\\n');\n\t\tassert.strictEqual(stripComments(content), expected);\n\t});\n\ttest('Block comment - shortest match', () => {\n\t\tconst content = \"/* abc */ */\";\n\t\tconst expected = \" */\";\n\t\tassert.strictEqual(stripComments(content), expected);\n\t});\n\ttest('No strings - double quote', () => {\n\t\tconst content: string = [\n\t\t\t\"{\",\n\t\t\t\"  \\\"/* */\\\": 10\",\n\t\t\t\"}\"\n\t\t].join('\\n');\n\t\tconst expected: string = [\n\t\t\t\"{\",\n\t\t\t\"  \\\"/* */\\\": 10\",\n\t\t\t\"}\"\n\t\t].join('\\n');\n\t\tassert.strictEqual(stripComments(content), expected);\n\t});\n\ttest('No strings - single quote', () => {\n\t\tconst content: string = [\n\t\t\t\"{\",\n\t\t\t\"  '/* */': 10\",\n\t\t\t\"}\"\n\t\t].join('\\n');\n\t\tconst expected: string = [\n\t\t\t\"{\",\n\t\t\t\"  '/* */': 10\",\n\t\t\t\"}\"\n\t\t].join('\\n');\n\t\tassert.strictEqual(stripComments(content), expected);\n\t});\n\ttest('Trailing comma in object', () => {\n\t\tconst content: string = [\n\t\t\t\"{\",\n\t\t\t`  \"a\": 10,`,\n\t\t\t\"}\"\n\t\t].join('\\n');\n\t\tconst expected: string = [\n\t\t\t\"{\",\n\t\t\t`  \"a\": 10`,\n\t\t\t\"}\"\n\t\t].join('\\n');\n\t\tassert.strictEqual(stripComments(content), expected);\n\t});\n\ttest('Trailing comma in array', () => {\n\t\tconst content: string = [\n\t\t\t`[ \"a\", \"b\", \"c\", ]`\n\t\t].join('\\n');\n\t\tconst expected: string = [\n\t\t\t`[ \"a\", \"b\", \"c\" ]`\n\t\t].join('\\n');\n\t\tassert.strictEqual(stripComments(content), expected);\n\t});\n});\n"]}