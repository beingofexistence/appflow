{"version":3,"sources":["file:///workspace/appflow/src/vs/base/test/common/prefixTree.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAKhG,KAAK,CAAC,uBAAuB,EAAE,GAAG,EAAE;QACnC,IAAI,IAAmC,CAAC;QAExC,KAAK,CAAC,GAAG,EAAE;YACV,IAAI,GAAG,IAAI,gBAAG,EAA4B,CAAC;QAC5C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE;YACjB,MAAM,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAC5B,MAAM,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAC5B,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YACtB,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YACtB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;YACxC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;YACxC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;YAChE,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,gBAAgB,EAAE,GAAG,EAAE;YAC3B,MAAM,GAAG,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAC3B,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;YAErB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACrE,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAC9D,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YACxD,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QACzD,CAAC,CAAC,CAAC;QAGH,IAAI,CAAC,kBAAkB,EAAE,GAAG,EAAE;YAC7B,MAAM,GAAG,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAC3B,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;YAErB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;YACpD,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YACzD,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;YAChE,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QACzE,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAE;YACnB,MAAM,GAAG,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAC3B,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;YAErB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;YAC3C,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;YAChD,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC;QAC/D,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE;YACjB,MAAM,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAC5B,MAAM,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAC5B,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YACtB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YACtB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YACjC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YACtB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAE;YACnB,MAAM,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAC5B,MAAM,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAC5B,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YACtB,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YACtB,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,EAAE;gBAC3B,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;gBAC9B,OAAO,EAAE,CAAC;YACX,CAAC,CAAC,CAAC;YACH,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;YACxC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAE;YACnB,MAAM,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAC5B,MAAM,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAC5B,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YACtB,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YACtB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAEjC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;YAC1C,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;YAExC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;YAC1C,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC;YAC/C,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC;YAE/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YAClB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,cAAc,EAAE,GAAG,EAAE;YACzB,MAAM,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAC5B,MAAM,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;YACnC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YACtB,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YACtB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAEjC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;YAC1C,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;YACxC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,iCAAiC,EAAE,GAAG,EAAE;YAC5C,MAAM,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAC5B,MAAM,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;YACnC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YACtB,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YAEjC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC;YACjD,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC;YACxC,MAAM,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAE;YACnB,MAAM,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAC5B,MAAM,IAAI,GAAG,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;YAC5B,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YACtB,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;YAEtB,MAAM,CAAC,eAAe,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"prefixTree.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { WellDefinedPrefixTree } from 'vs/base/common/prefixTree';\nimport * as assert from 'assert';\n\nsuite('WellDefinedPrefixTree', () => {\n\tlet tree: WellDefinedPrefixTree<number>;\n\n\tsetup(() => {\n\t\ttree = new WellDefinedPrefixTree<number>();\n\t});\n\n\ttest('find', () => {\n\t\tconst key1 = ['foo', 'bar'];\n\t\tconst key2 = ['foo', 'baz'];\n\t\ttree.insert(key1, 42);\n\t\ttree.insert(key2, 43);\n\t\tassert.strictEqual(tree.find(key1), 42);\n\t\tassert.strictEqual(tree.find(key2), 43);\n\t\tassert.strictEqual(tree.find(['foo', 'baz', 'bop']), undefined);\n\t\tassert.strictEqual(tree.find(['foo']), undefined);\n\t});\n\n\ttest('hasParentOfKey', () => {\n\t\tconst key = ['foo', 'bar'];\n\t\ttree.insert(key, 42);\n\n\t\tassert.strictEqual(tree.hasKeyOrParent(['foo', 'bar', 'baz']), true);\n\t\tassert.strictEqual(tree.hasKeyOrParent(['foo', 'bar']), true);\n\t\tassert.strictEqual(tree.hasKeyOrParent(['foo']), false);\n\t\tassert.strictEqual(tree.hasKeyOrParent(['baz']), false);\n\t});\n\n\n\ttest('hasKeyOrChildren', () => {\n\t\tconst key = ['foo', 'bar'];\n\t\ttree.insert(key, 42);\n\n\t\tassert.strictEqual(tree.hasKeyOrChildren([]), true);\n\t\tassert.strictEqual(tree.hasKeyOrChildren(['foo']), true);\n\t\tassert.strictEqual(tree.hasKeyOrChildren(['foo', 'bar']), true);\n\t\tassert.strictEqual(tree.hasKeyOrChildren(['foo', 'bar', 'baz']), false);\n\t});\n\n\ttest('hasKey', () => {\n\t\tconst key = ['foo', 'bar'];\n\t\ttree.insert(key, 42);\n\n\t\tassert.strictEqual(tree.hasKey(key), true);\n\t\tassert.strictEqual(tree.hasKey(['foo']), false);\n\t\tassert.strictEqual(tree.hasKey(['baz']), false);\n\t\tassert.strictEqual(tree.hasKey(['foo', 'bar', 'baz']), false);\n\t});\n\n\ttest('size', () => {\n\t\tconst key1 = ['foo', 'bar'];\n\t\tconst key2 = ['foo', 'baz'];\n\t\tassert.strictEqual(tree.size, 0);\n\t\ttree.insert(key1, 42);\n\t\tassert.strictEqual(tree.size, 1);\n\t\ttree.insert(key2, 43);\n\t\tassert.strictEqual(tree.size, 2);\n\t\ttree.insert(key2, 44);\n\t\tassert.strictEqual(tree.size, 2);\n\t});\n\n\ttest('mutate', () => {\n\t\tconst key1 = ['foo', 'bar'];\n\t\tconst key2 = ['foo', 'baz'];\n\t\ttree.insert(key1, 42);\n\t\ttree.insert(key2, 43);\n\t\ttree.mutate(key1, (value) => {\n\t\t\tassert.strictEqual(value, 42);\n\t\t\treturn 44;\n\t\t});\n\t\tassert.strictEqual(tree.find(key1), 44);\n\t\tassert.strictEqual(tree.find(key2), 43);\n\t});\n\n\ttest('delete', () => {\n\t\tconst key1 = ['foo', 'bar'];\n\t\tconst key2 = ['foo', 'baz'];\n\t\ttree.insert(key1, 42);\n\t\ttree.insert(key2, 43);\n\t\tassert.strictEqual(tree.size, 2);\n\n\t\tassert.strictEqual(tree.delete(key1), 42);\n\t\tassert.strictEqual(tree.size, 1);\n\t\tassert.strictEqual(tree.find(key1), undefined);\n\t\tassert.strictEqual(tree.find(key2), 43);\n\n\t\tassert.strictEqual(tree.delete(key2), 43);\n\t\tassert.strictEqual(tree.size, 0);\n\t\tassert.strictEqual(tree.find(key1), undefined);\n\t\tassert.strictEqual(tree.find(key2), undefined);\n\n\t\ttree.delete(key2);\n\t\tassert.strictEqual(tree.size, 0);\n\t});\n\n\ttest('delete child', () => {\n\t\tconst key1 = ['foo', 'bar'];\n\t\tconst key2 = ['foo', 'bar', 'baz'];\n\t\ttree.insert(key1, 42);\n\t\ttree.insert(key2, 43);\n\t\tassert.strictEqual(tree.size, 2);\n\n\t\tassert.strictEqual(tree.delete(key2), 43);\n\t\tassert.strictEqual(tree.size, 1);\n\t\tassert.strictEqual(tree.find(key1), 42);\n\t\tassert.strictEqual(tree.find(key2), undefined);\n\t});\n\n\ttest('delete noops if deleting parent', () => {\n\t\tconst key1 = ['foo', 'bar'];\n\t\tconst key2 = ['foo', 'bar', 'baz'];\n\t\ttree.insert(key2, 43);\n\t\tassert.strictEqual(tree.size, 1);\n\n\t\tassert.strictEqual(tree.delete(key1), undefined);\n\t\tassert.strictEqual(tree.size, 1);\n\t\tassert.strictEqual(tree.find(key2), 43);\n\t\tassert.strictEqual(tree.find(key1), undefined);\n\t});\n\n\ttest('values', () => {\n\t\tconst key1 = ['foo', 'bar'];\n\t\tconst key2 = ['foo', 'baz'];\n\t\ttree.insert(key1, 42);\n\t\ttree.insert(key2, 43);\n\n\t\tassert.deepStrictEqual([...tree.values()], [43, 42]);\n\t});\n});\n"]}