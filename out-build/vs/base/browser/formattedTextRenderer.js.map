{"version":3,"sources":["file:///workspace/appflow/src/vs/base/browser/formattedTextRenderer.ts"],"names":[],"mappings":"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","file":"formattedTextRenderer.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as DOM from 'vs/base/browser/dom';\nimport { IKeyboardEvent } from 'vs/base/browser/keyboardEvent';\nimport { IMouseEvent } from 'vs/base/browser/mouseEvent';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\n\nexport interface IContentActionHandler {\n\tcallback: (content: string, event: IMouseEvent | IKeyboardEvent) => void;\n\treadonly disposables: DisposableStore;\n}\n\nexport interface FormattedTextRenderOptions {\n\treadonly className?: string;\n\treadonly inline?: boolean;\n\treadonly actionHandler?: IContentActionHandler;\n\treadonly renderCodeSegments?: boolean;\n}\n\nexport function renderText(text: string, options: FormattedTextRenderOptions = {}): HTMLElement {\n\tconst element = createElement(options);\n\telement.textContent = text;\n\treturn element;\n}\n\nexport function renderFormattedText(formattedText: string, options: FormattedTextRenderOptions = {}): HTMLElement {\n\tconst element = createElement(options);\n\t_renderFormattedText(element, parseFormattedText(formattedText, !!options.renderCodeSegments), options.actionHandler, options.renderCodeSegments);\n\treturn element;\n}\n\nexport function createElement(options: FormattedTextRenderOptions): HTMLElement {\n\tconst tagName = options.inline ? 'span' : 'div';\n\tconst element = document.createElement(tagName);\n\tif (options.className) {\n\t\telement.className = options.className;\n\t}\n\treturn element;\n}\n\nclass StringStream {\n\tprivate source: string;\n\tprivate index: number;\n\n\tconstructor(source: string) {\n\t\tthis.source = source;\n\t\tthis.index = 0;\n\t}\n\n\tpublic eos(): boolean {\n\t\treturn this.index >= this.source.length;\n\t}\n\n\tpublic next(): string {\n\t\tconst next = this.peek();\n\t\tthis.advance();\n\t\treturn next;\n\t}\n\n\tpublic peek(): string {\n\t\treturn this.source[this.index];\n\t}\n\n\tpublic advance(): void {\n\t\tthis.index++;\n\t}\n}\n\nconst enum FormatType {\n\tInvalid,\n\tRoot,\n\tText,\n\tBold,\n\tItalics,\n\tAction,\n\tActionClose,\n\tCode,\n\tNewLine\n}\n\ninterface IFormatParseTree {\n\ttype: FormatType;\n\tcontent?: string;\n\tindex?: number;\n\tchildren?: IFormatParseTree[];\n}\n\nfunction _renderFormattedText(element: Node, treeNode: IFormatParseTree, actionHandler?: IContentActionHandler, renderCodeSegments?: boolean) {\n\tlet child: Node | undefined;\n\n\tif (treeNode.type === FormatType.Text) {\n\t\tchild = document.createTextNode(treeNode.content || '');\n\t} else if (treeNode.type === FormatType.Bold) {\n\t\tchild = document.createElement('b');\n\t} else if (treeNode.type === FormatType.Italics) {\n\t\tchild = document.createElement('i');\n\t} else if (treeNode.type === FormatType.Code && renderCodeSegments) {\n\t\tchild = document.createElement('code');\n\t} else if (treeNode.type === FormatType.Action && actionHandler) {\n\t\tconst a = document.createElement('a');\n\t\tactionHandler.disposables.add(DOM.addStandardDisposableListener(a, 'click', (event) => {\n\t\t\tactionHandler.callback(String(treeNode.index), event);\n\t\t}));\n\n\t\tchild = a;\n\t} else if (treeNode.type === FormatType.NewLine) {\n\t\tchild = document.createElement('br');\n\t} else if (treeNode.type === FormatType.Root) {\n\t\tchild = element;\n\t}\n\n\tif (child && element !== child) {\n\t\telement.appendChild(child);\n\t}\n\n\tif (child && Array.isArray(treeNode.children)) {\n\t\ttreeNode.children.forEach((nodeChild) => {\n\t\t\t_renderFormattedText(child!, nodeChild, actionHandler, renderCodeSegments);\n\t\t});\n\t}\n}\n\nfunction parseFormattedText(content: string, parseCodeSegments: boolean): IFormatParseTree {\n\n\tconst root: IFormatParseTree = {\n\t\ttype: FormatType.Root,\n\t\tchildren: []\n\t};\n\n\tlet actionViewItemIndex = 0;\n\tlet current = root;\n\tconst stack: IFormatParseTree[] = [];\n\tconst stream = new StringStream(content);\n\n\twhile (!stream.eos()) {\n\t\tlet next = stream.next();\n\n\t\tconst isEscapedFormatType = (next === '\\\\' && formatTagType(stream.peek(), parseCodeSegments) !== FormatType.Invalid);\n\t\tif (isEscapedFormatType) {\n\t\t\tnext = stream.next(); // unread the backslash if it escapes a format tag type\n\t\t}\n\n\t\tif (!isEscapedFormatType && isFormatTag(next, parseCodeSegments) && next === stream.peek()) {\n\t\t\tstream.advance();\n\n\t\t\tif (current.type === FormatType.Text) {\n\t\t\t\tcurrent = stack.pop()!;\n\t\t\t}\n\n\t\t\tconst type = formatTagType(next, parseCodeSegments);\n\t\t\tif (current.type === type || (current.type === FormatType.Action && type === FormatType.ActionClose)) {\n\t\t\t\tcurrent = stack.pop()!;\n\t\t\t} else {\n\t\t\t\tconst newCurrent: IFormatParseTree = {\n\t\t\t\t\ttype: type,\n\t\t\t\t\tchildren: []\n\t\t\t\t};\n\n\t\t\t\tif (type === FormatType.Action) {\n\t\t\t\t\tnewCurrent.index = actionViewItemIndex;\n\t\t\t\t\tactionViewItemIndex++;\n\t\t\t\t}\n\n\t\t\t\tcurrent.children!.push(newCurrent);\n\t\t\t\tstack.push(current);\n\t\t\t\tcurrent = newCurrent;\n\t\t\t}\n\t\t} else if (next === '\\n') {\n\t\t\tif (current.type === FormatType.Text) {\n\t\t\t\tcurrent = stack.pop()!;\n\t\t\t}\n\n\t\t\tcurrent.children!.push({\n\t\t\t\ttype: FormatType.NewLine\n\t\t\t});\n\n\t\t} else {\n\t\t\tif (current.type !== FormatType.Text) {\n\t\t\t\tconst textCurrent: IFormatParseTree = {\n\t\t\t\t\ttype: FormatType.Text,\n\t\t\t\t\tcontent: next\n\t\t\t\t};\n\t\t\t\tcurrent.children!.push(textCurrent);\n\t\t\t\tstack.push(current);\n\t\t\t\tcurrent = textCurrent;\n\n\t\t\t} else {\n\t\t\t\tcurrent.content += next;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (current.type === FormatType.Text) {\n\t\tcurrent = stack.pop()!;\n\t}\n\n\tif (stack.length) {\n\t\t// incorrectly formatted string literal\n\t}\n\n\treturn root;\n}\n\nfunction isFormatTag(char: string, supportCodeSegments: boolean): boolean {\n\treturn formatTagType(char, supportCodeSegments) !== FormatType.Invalid;\n}\n\nfunction formatTagType(char: string, supportCodeSegments: boolean): FormatType {\n\tswitch (char) {\n\t\tcase '*':\n\t\t\treturn FormatType.Bold;\n\t\tcase '_':\n\t\t\treturn FormatType.Italics;\n\t\tcase '[':\n\t\t\treturn FormatType.Action;\n\t\tcase ']':\n\t\t\treturn FormatType.ActionClose;\n\t\tcase '`':\n\t\t\treturn supportCodeSegments ? FormatType.Code : FormatType.Invalid;\n\t\tdefault:\n\t\t\treturn FormatType.Invalid;\n\t}\n}\n"]}