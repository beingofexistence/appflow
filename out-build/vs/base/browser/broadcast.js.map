{"version":3,"sources":["file:///workspace/appflow/src/vs/base/browser/broadcast.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,MAAa,GAAwB,SAAQ,eAAG;QAO/C,YAA6B,CAAmB;YAC/C,KAAK,EAAE,CAAC;YADoB,MAAC,GAAD,CAAC,CAAkB;YAH/B,MAAC,GAAmB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAS,CAAC,CAAC;YAC7D,qBAAgB,GAAG,IAAI,CAAC,CAAC,CAAiB,KAAK,CAAC;YAKxD,uBAAuB;YACvB,IAAI,kBAAkB,IAAI,MAAM,EAAE;gBACjC,IAAI;oBACH,IAAI,CAAC,CAAC,GAAkB,IAAI,gBAAgB,CAAC,CAAC,CAAW,CAAC;oBAC1D,MAAM,QAAQ,GAAG,CAAC,KAAmB,EAAE,EAAE;wBACxC,IAAI,CAAC,CAAC,CAAiB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;oBACzC,CAAC,CAAC;oBACF,IAAI,CAAC,CAAC,CAAgB,gBAAgB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;oBAC5D,IAAI,CAAC,CAAC,CAAS,IAAA,eAAG,EAAU,GAAG,EAAE;wBAChC,IAAI,IAAI,CAAC,CAAC,EAAiB;4BAC1B,IAAI,CAAC,CAAC,CAAgB,mBAAmB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;4BAC/D,IAAI,CAAC,CAAC,CAAgB,KAAK,EAAE,CAAC;yBAC9B;oBACF,CAAC,CAAC,CAAC,CAAC;iBACJ;gBAAC,OAAO,KAAK,EAAE;oBACf,OAAO,CAAC,IAAI,CAAC,uEAAuE,EAAE,IAAA,WAAE,EAAc,KAAK,CAAC,CAAC,CAAC;iBAC9G;aACD;YAED,kDAAkD;YAClD,IAAI,CAAC,IAAI,CAAC,CAAC,EAAiB;gBAC3B,IAAI,CAAC,CAAC,GAAa,wBAAwB,CAAC,EAAY,CAAC;gBACzD,IAAI,CAAC,CAAC,EAAuB,CAAC;aAC9B;QACF,CAAC;QAEO,CAAC;YACR,MAAM,QAAQ,GAAG,CAAC,KAAmB,EAAE,EAAE;gBACxC,IAAI,KAAK,CAAC,GAAG,KAAK,IAAI,CAAC,CAAC,IAAc,KAAK,CAAC,QAAQ,EAAE;oBACrD,IAAI,CAAC,CAAC,CAAiB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;iBACxD;YACF,CAAC,CAAC;YACF,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;YAC7C,IAAI,CAAC,CAAC,CAAS,IAAA,eAAG,EAAU,GAAG,EAAE,CAAC,MAAM,CAAC,mBAAmB,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC;QACrF,CAAC;QAED;;;WAGG;QACH,QAAQ,CAAC,IAAO;YACf,IAAI,IAAI,CAAC,CAAC,EAAiB;gBAC1B,IAAI,CAAC,CAAC,CAAgB,WAAW,CAAC,IAAI,CAAC,CAAC;aACxC;iBAAM;gBACN,iGAAiG;gBACjG,MAAM,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAW,CAAC;gBACjD,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,EAAY,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;aACpE;QACF,CAAC;KACD;IA3DD,kBA2DC","file":"broadcast.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { getErrorMessage } from 'vs/base/common/errors';\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable, toDisposable } from 'vs/base/common/lifecycle';\n\nexport class BroadcastDataChannel<T> extends Disposable {\n\n\tprivate broadcastChannel: BroadcastChannel | undefined;\n\n\tprivate readonly _onDidReceiveData = this._register(new Emitter<T>());\n\treadonly onDidReceiveData = this._onDidReceiveData.event;\n\n\tconstructor(private readonly channelName: string) {\n\t\tsuper();\n\n\t\t// Use BroadcastChannel\n\t\tif ('BroadcastChannel' in window) {\n\t\t\ttry {\n\t\t\t\tthis.broadcastChannel = new BroadcastChannel(channelName);\n\t\t\t\tconst listener = (event: MessageEvent) => {\n\t\t\t\t\tthis._onDidReceiveData.fire(event.data);\n\t\t\t\t};\n\t\t\t\tthis.broadcastChannel.addEventListener('message', listener);\n\t\t\t\tthis._register(toDisposable(() => {\n\t\t\t\t\tif (this.broadcastChannel) {\n\t\t\t\t\t\tthis.broadcastChannel.removeEventListener('message', listener);\n\t\t\t\t\t\tthis.broadcastChannel.close();\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t} catch (error) {\n\t\t\t\tconsole.warn('Error while creating broadcast channel. Falling back to localStorage.', getErrorMessage(error));\n\t\t\t}\n\t\t}\n\n\t\t// BroadcastChannel is not supported. Use storage.\n\t\tif (!this.broadcastChannel) {\n\t\t\tthis.channelName = `BroadcastDataChannel.${channelName}`;\n\t\t\tthis.createBroadcastChannel();\n\t\t}\n\t}\n\n\tprivate createBroadcastChannel(): void {\n\t\tconst listener = (event: StorageEvent) => {\n\t\t\tif (event.key === this.channelName && event.newValue) {\n\t\t\t\tthis._onDidReceiveData.fire(JSON.parse(event.newValue));\n\t\t\t}\n\t\t};\n\t\twindow.addEventListener('storage', listener);\n\t\tthis._register(toDisposable(() => window.removeEventListener('storage', listener)));\n\t}\n\n\t/**\n\t * Sends the data to other BroadcastChannel objects set up for this channel. Data can be structured objects, e.g. nested objects and arrays.\n\t * @param data data to broadcast\n\t */\n\tpostData(data: T): void {\n\t\tif (this.broadcastChannel) {\n\t\t\tthis.broadcastChannel.postMessage(data);\n\t\t} else {\n\t\t\t// remove previous changes so that event is triggered even if new changes are same as old changes\n\t\t\twindow.localStorage.removeItem(this.channelName);\n\t\t\twindow.localStorage.setItem(this.channelName, JSON.stringify(data));\n\t\t}\n\t}\n}\n"]}