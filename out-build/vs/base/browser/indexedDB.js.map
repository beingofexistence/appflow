{"version":3,"sources":["file:///workspace/appflow/src/vs/base/browser/indexedDB.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,MAAM,kBAAmB,SAAQ,KAAK;QACrC,YAAqB,EAAe;YACnC,KAAK,CAAC,gBAAgB,CAAC,CAAC;YADJ,OAAE,GAAF,EAAE,CAAa;QAEpC,CAAC;KACD;IAED,MAAa,GAAc,SAAQ,KAAK;QAEvC,YAAY,MAAc;YACzB,KAAK,CAAC,uBAAuB,MAAM,cAAc,CAAC,CAAC;YAF3C,SAAI,GAAG,UAAU,CAAC;QAG3B,CAAC;KACD;IALD,kBAKC;IAED,MAAa,GAAG;QAEf,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,IAAY,EAAE,OAA2B,EAAE,MAAgB;YAC9E,MAAM,QAAQ,GAAG,MAAM,GAAG,CAAO,CAAC,CAAY,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;YACrE,OAAO,IAAI,GAAG,CAAO,QAAQ,EAAE,IAAI,CAAC,CAAC;QACtC,CAAC;QAEO,MAAM,CAAC,KAAK,CAAC,CAAC,CAAY,IAAY,EAAE,OAA2B,EAAE,MAAgB;YAC5F,IAAA,kBAAI,EAAC,yBAAyB,IAAI,EAAE,CAAC,CAAC;YACtC,IAAI;gBACH,OAAO,MAAM,GAAG,CAAO,CAAC,CAAc,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;aAC7D;YAAC,OAAO,GAAG,EAAE;gBACb,IAAI,GAAG,YAAY,kBAAkB,EAAE;oBACtC,OAAO,CAAC,IAAI,CAAC,4CAA4C,EAAE,IAAI,CAAC,CAAC;oBAEjE,IAAI;wBACH,uBAAuB;wBACvB,MAAM,GAAG,CAAO,CAAC,CAAc,GAAG,CAAC,EAAE,CAAC,CAAC;qBACvC;oBAAC,OAAO,KAAK,EAAE;wBACf,OAAO,CAAC,KAAK,CAAC,oCAAoC,EAAE,IAAA,WAAE,EAAc,KAAK,CAAC,CAAC,CAAC;wBAC5E,MAAM,KAAK,CAAC;qBACZ;oBAED,OAAO,MAAM,GAAG,CAAO,CAAC,CAAc,IAAI,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;iBAC7D;gBAED,MAAM,GAAG,CAAC;aACV;oBAAS;gBACT,IAAA,kBAAI,EAAC,wBAAwB,IAAI,EAAE,CAAC,CAAC;aACrC;QACF,CAAC;QAEO,MAAM,CAAC,CAAC,CAAc,IAAY,EAAE,OAA2B,EAAE,MAAgB;YACxF,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC3B,MAAM,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;gBACrD,OAAO,CAAC,OAAO,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;gBACzC,OAAO,CAAC,SAAS,GAAG,GAAG,EAAE;oBACxB,MAAM,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC;oBAC1B,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;wBAC3B,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;4BACzC,OAAO,CAAC,KAAK,CAAC,kDAAkD,KAAK,iBAAiB,CAAC,CAAC;4BACxF,CAAC,CAAC,IAAI,kBAAkB,CAAC,EAAE,CAAC,CAAC,CAAC;4BAC9B,OAAO;yBACP;qBACD;oBACD,CAAC,CAAC,EAAE,CAAC,CAAC;gBACP,CAAC,CAAC;gBACF,OAAO,CAAC,eAAe,GAAG,GAAG,EAAE;oBAC9B,MAAM,EAAE,GAAG,OAAO,CAAC,MAAM,CAAC;oBAC1B,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;wBAC3B,IAAI,CAAC,EAAE,CAAC,gBAAgB,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;4BACzC,EAAE,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;yBAC5B;qBACD;gBACF,CAAC,CAAC;YACH,CAAC,CAAC,CAAC;QACJ,CAAC;QAEO,MAAM,CAAC,CAAC,CAAc,SAAsB;YACnD,OAAO,IAAI,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC3B,+BAA+B;gBAC/B,SAAS,CAAC,KAAK,EAAE,CAAC;gBAElB,gBAAgB;gBAChB,MAAM,aAAa,GAAG,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;gBACtE,aAAa,CAAC,OAAO,GAAG,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;gBACxD,aAAa,CAAC,SAAS,GAAG,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC;YACrC,CAAC,CAAC,CAAC;QACJ,CAAC;QAKD,YAAY,QAAqB,EAAmB,CAAY;YAAZ,MAAC,GAAD,CAAC,CAAW;YAHxD,MAAC,GAA8B,IAAI,CAAC;YAC3B,MAAC,GAAuC,EAAE,CAAC;YAG3D,IAAI,CAAC,CAAC,GAAU,QAAQ,CAAC;QAC1B,CAAC;QAED,sBAAsB;YACrB,OAAO,IAAI,CAAC,CAAC,CAAmB,MAAM,GAAG,CAAC,CAAC;QAC5C,CAAC;QAED,KAAK;YACJ,IAAI,IAAI,CAAC,CAAC,CAAmB,MAAM,EAAE;gBACpC,IAAI,CAAC,CAAC,CAAmB,MAAM,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAmB,MAAM,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC;aAChH;YACD,IAAI,CAAC,CAAC,EAAS,KAAK,EAAE,CAAC;YACvB,IAAI,CAAC,CAAC,GAAU,IAAI,CAAC;QACtB,CAAC;QAID,KAAK,CAAC,gBAAgB,CAAI,KAAa,EAAE,eAAmC,EAAE,WAAuE;YACpJ,IAAI,CAAC,IAAI,CAAC,CAAC,EAAS;gBACnB,MAAM,IAAI,GAAG,CAAW,IAAI,CAAC,CAAC,CAAI,CAAC;aACnC;YACD,MAAM,WAAW,GAAG,IAAI,CAAC,CAAC,CAAQ,WAAW,CAAC,KAAK,EAAE,eAAe,CAAC,CAAC;YACtE,IAAI,CAAC,CAAC,CAAmB,IAAI,CAAC,WAAW,CAAC,CAAC;YAC3C,OAAO,IAAI,OAAO,CAAU,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBACpC,WAAW,CAAC,UAAU,GAAG,GAAG,EAAE;oBAC7B,IAAI,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;wBAC3B,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;qBAC9B;yBAAM;wBACN,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;qBAClB;gBACF,CAAC,CAAC;gBACF,WAAW,CAAC,OAAO,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBACjD,WAAW,CAAC,OAAO,GAAG,GAAG,EAAE,CAAC,CAAC,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBACjD,MAAM,OAAO,GAAG,WAAW,CAAC,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;YAC7D,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAmB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAmB,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACrG,CAAC;QAED,KAAK,CAAC,YAAY,CAAI,KAAa,EAAE,OAAuC;YAC3E,IAAI,CAAC,IAAI,CAAC,CAAC,EAAS;gBACnB,MAAM,IAAI,GAAG,CAAW,IAAI,CAAC,CAAC,CAAI,CAAC;aACnC;YACD,MAAM,WAAW,GAAG,IAAI,CAAC,CAAC,CAAQ,WAAW,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;YACjE,IAAI,CAAC,CAAC,CAAmB,IAAI,CAAC,WAAW,CAAC,CAAC;YAC3C,OAAO,IAAI,OAAO,CAAiB,OAAO,CAAC,EAAE;gBAC5C,MAAM,KAAK,GAAG,IAAI,GAAG,EAAa,CAAC;gBAEnC,MAAM,WAAW,GAAG,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBAEnD,qDAAqD;gBACrD,MAAM,MAAM,GAAG,WAAW,CAAC,UAAU,EAAE,CAAC;gBACxC,IAAI,CAAC,MAAM,EAAE;oBACZ,OAAO,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,uCAAuC;iBAC9D;gBAED,iDAAiD;gBACjD,MAAM,CAAC,SAAS,GAAG,GAAG,EAAE;oBACvB,IAAI,MAAM,CAAC,MAAM,EAAE;wBAElB,mCAAmC;wBACnC,IAAI,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;4BACjC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;yBAC7D;wBAED,6BAA6B;wBAC7B,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;qBACzB;yBAAM;wBACN,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,uBAAuB;qBACvC;gBACF,CAAC,CAAC;gBAEF,iBAAiB;gBACjB,MAAM,OAAO,GAAG,CAAC,KAAmB,EAAE,EAAE;oBACvC,OAAO,CAAC,KAAK,CAAC,6BAA6B,IAAA,kBAAG,EAAY,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC;oBAE1E,OAAO,CAAC,KAAK,CAAC,CAAC;gBAChB,CAAC,CAAC;gBACF,MAAM,CAAC,OAAO,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;gBAC7C,WAAW,CAAC,OAAO,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YACxD,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAmB,MAAM,CAAC,IAAI,CAAC,CAAC,CAAmB,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACrG,CAAC;KACD;IA1JD,kBA0JC","file":"indexedDB.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { getErrorMessage } from 'vs/base/common/errors';\nimport { mark } from 'vs/base/common/performance';\n\nclass MissingStoresError extends Error {\n\tconstructor(readonly db: IDBDatabase) {\n\t\tsuper('Missing stores');\n\t}\n}\n\nexport class DBClosedError extends Error {\n\treadonly code = 'DBClosed';\n\tconstructor(dbName: string) {\n\t\tsuper(`IndexedDB database '${dbName}' is closed.`);\n\t}\n}\n\nexport class IndexedDB {\n\n\tstatic async create(name: string, version: number | undefined, stores: string[]): Promise<IndexedDB> {\n\t\tconst database = await IndexedDB.openDatabase(name, version, stores);\n\t\treturn new IndexedDB(database, name);\n\t}\n\n\tprivate static async openDatabase(name: string, version: number | undefined, stores: string[]): Promise<IDBDatabase> {\n\t\tmark(`code/willOpenDatabase/${name}`);\n\t\ttry {\n\t\t\treturn await IndexedDB.doOpenDatabase(name, version, stores);\n\t\t} catch (err) {\n\t\t\tif (err instanceof MissingStoresError) {\n\t\t\t\tconsole.info(`Attempting to recreate the IndexedDB once.`, name);\n\n\t\t\t\ttry {\n\t\t\t\t\t// Try to delete the db\n\t\t\t\t\tawait IndexedDB.deleteDatabase(err.db);\n\t\t\t\t} catch (error) {\n\t\t\t\t\tconsole.error(`Error while deleting the IndexedDB`, getErrorMessage(error));\n\t\t\t\t\tthrow error;\n\t\t\t\t}\n\n\t\t\t\treturn await IndexedDB.doOpenDatabase(name, version, stores);\n\t\t\t}\n\n\t\t\tthrow err;\n\t\t} finally {\n\t\t\tmark(`code/didOpenDatabase/${name}`);\n\t\t}\n\t}\n\n\tprivate static doOpenDatabase(name: string, version: number | undefined, stores: string[]): Promise<IDBDatabase> {\n\t\treturn new Promise((c, e) => {\n\t\t\tconst request = window.indexedDB.open(name, version);\n\t\t\trequest.onerror = () => e(request.error);\n\t\t\trequest.onsuccess = () => {\n\t\t\t\tconst db = request.result;\n\t\t\t\tfor (const store of stores) {\n\t\t\t\t\tif (!db.objectStoreNames.contains(store)) {\n\t\t\t\t\t\tconsole.error(`Error while opening IndexedDB. Could not find '${store}'' object store`);\n\t\t\t\t\t\te(new MissingStoresError(db));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tc(db);\n\t\t\t};\n\t\t\trequest.onupgradeneeded = () => {\n\t\t\t\tconst db = request.result;\n\t\t\t\tfor (const store of stores) {\n\t\t\t\t\tif (!db.objectStoreNames.contains(store)) {\n\t\t\t\t\t\tdb.createObjectStore(store);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t};\n\t\t});\n\t}\n\n\tprivate static deleteDatabase(indexedDB: IDBDatabase): Promise<void> {\n\t\treturn new Promise((c, e) => {\n\t\t\t// Close any opened connections\n\t\t\tindexedDB.close();\n\n\t\t\t// Delete the db\n\t\t\tconst deleteRequest = window.indexedDB.deleteDatabase(indexedDB.name);\n\t\t\tdeleteRequest.onerror = (err) => e(deleteRequest.error);\n\t\t\tdeleteRequest.onsuccess = () => c();\n\t\t});\n\t}\n\n\tprivate database: IDBDatabase | null = null;\n\tprivate readonly pendingTransactions: IDBTransaction[] = [];\n\n\tconstructor(database: IDBDatabase, private readonly name: string) {\n\t\tthis.database = database;\n\t}\n\n\thasPendingTransactions(): boolean {\n\t\treturn this.pendingTransactions.length > 0;\n\t}\n\n\tclose(): void {\n\t\tif (this.pendingTransactions.length) {\n\t\t\tthis.pendingTransactions.splice(0, this.pendingTransactions.length).forEach(transaction => transaction.abort());\n\t\t}\n\t\tthis.database?.close();\n\t\tthis.database = null;\n\t}\n\n\trunInTransaction<T>(store: string, transactionMode: IDBTransactionMode, dbRequestFn: (store: IDBObjectStore) => IDBRequest<T>[]): Promise<T[]>;\n\trunInTransaction<T>(store: string, transactionMode: IDBTransactionMode, dbRequestFn: (store: IDBObjectStore) => IDBRequest<T>): Promise<T>;\n\tasync runInTransaction<T>(store: string, transactionMode: IDBTransactionMode, dbRequestFn: (store: IDBObjectStore) => IDBRequest<T> | IDBRequest<T>[]): Promise<T | T[]> {\n\t\tif (!this.database) {\n\t\t\tthrow new DBClosedError(this.name);\n\t\t}\n\t\tconst transaction = this.database.transaction(store, transactionMode);\n\t\tthis.pendingTransactions.push(transaction);\n\t\treturn new Promise<T | T[]>((c, e) => {\n\t\t\ttransaction.oncomplete = () => {\n\t\t\t\tif (Array.isArray(request)) {\n\t\t\t\t\tc(request.map(r => r.result));\n\t\t\t\t} else {\n\t\t\t\t\tc(request.result);\n\t\t\t\t}\n\t\t\t};\n\t\t\ttransaction.onerror = () => e(transaction.error);\n\t\t\ttransaction.onabort = () => e(transaction.error);\n\t\t\tconst request = dbRequestFn(transaction.objectStore(store));\n\t\t}).finally(() => this.pendingTransactions.splice(this.pendingTransactions.indexOf(transaction), 1));\n\t}\n\n\tasync getKeyValues<V>(store: string, isValid: (value: unknown) => value is V): Promise<Map<string, V>> {\n\t\tif (!this.database) {\n\t\t\tthrow new DBClosedError(this.name);\n\t\t}\n\t\tconst transaction = this.database.transaction(store, 'readonly');\n\t\tthis.pendingTransactions.push(transaction);\n\t\treturn new Promise<Map<string, V>>(resolve => {\n\t\t\tconst items = new Map<string, V>();\n\n\t\t\tconst objectStore = transaction.objectStore(store);\n\n\t\t\t// Open a IndexedDB Cursor to iterate over key/values\n\t\t\tconst cursor = objectStore.openCursor();\n\t\t\tif (!cursor) {\n\t\t\t\treturn resolve(items); // this means the `ItemTable` was empty\n\t\t\t}\n\n\t\t\t// Iterate over rows of `ItemTable` until the end\n\t\t\tcursor.onsuccess = () => {\n\t\t\t\tif (cursor.result) {\n\n\t\t\t\t\t// Keep cursor key/value in our map\n\t\t\t\t\tif (isValid(cursor.result.value)) {\n\t\t\t\t\t\titems.set(cursor.result.key.toString(), cursor.result.value);\n\t\t\t\t\t}\n\n\t\t\t\t\t// Advance cursor to next row\n\t\t\t\t\tcursor.result.continue();\n\t\t\t\t} else {\n\t\t\t\t\tresolve(items); // reached end of table\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// Error handlers\n\t\t\tconst onError = (error: Error | null) => {\n\t\t\t\tconsole.error(`IndexedDB getKeyValues(): ${toErrorMessage(error, true)}`);\n\n\t\t\t\tresolve(items);\n\t\t\t};\n\t\t\tcursor.onerror = () => onError(cursor.error);\n\t\t\ttransaction.onerror = () => onError(transaction.error);\n\t\t}).finally(() => this.pendingTransactions.splice(this.pendingTransactions.indexOf(transaction), 1));\n\t}\n}\n"]}