{"version":3,"sources":["file:///workspace/appflow/src/vs/base/browser/ui/progressbar/progressbar.ts"],"names":[],"mappings":"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","file":"progressbar.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { hide, show } from 'vs/base/browser/dom';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { isNumber } from 'vs/base/common/types';\nimport 'vs/css!./progressbar';\n\nconst CSS_DONE = 'done';\nconst CSS_ACTIVE = 'active';\nconst CSS_INFINITE = 'infinite';\nconst CSS_INFINITE_LONG_RUNNING = 'infinite-long-running';\nconst CSS_DISCRETE = 'discrete';\n\nexport interface IProgressBarOptions extends IProgressBarStyles {\n}\n\nexport interface IProgressBarStyles {\n\tprogressBarBackground: string | undefined;\n}\n\nexport const unthemedProgressBarOptions: IProgressBarOptions = {\n\tprogressBarBackground: undefined\n};\n\n/**\n * A progress bar with support for infinite or discrete progress.\n */\nexport class ProgressBar extends Disposable {\n\n\t/**\n\t * After a certain time of showing the progress bar, switch\n\t * to long-running mode and throttle animations to reduce\n\t * the pressure on the GPU process.\n\t *\n\t * https://github.com/microsoft/vscode/issues/97900\n\t * https://github.com/microsoft/vscode/issues/138396\n\t */\n\tprivate static readonly LONG_RUNNING_INFINITE_THRESHOLD = 10000;\n\n\tprivate workedVal: number;\n\tprivate element!: HTMLElement;\n\tprivate bit!: HTMLElement;\n\tprivate totalWork: number | undefined;\n\tprivate showDelayedScheduler: RunOnceScheduler;\n\tprivate longRunningScheduler: RunOnceScheduler;\n\n\tconstructor(container: HTMLElement, options?: IProgressBarOptions) {\n\t\tsuper();\n\n\t\tthis.workedVal = 0;\n\n\t\tthis.showDelayedScheduler = this._register(new RunOnceScheduler(() => show(this.element), 0));\n\t\tthis.longRunningScheduler = this._register(new RunOnceScheduler(() => this.infiniteLongRunning(), ProgressBar.LONG_RUNNING_INFINITE_THRESHOLD));\n\n\t\tthis.create(container, options);\n\t}\n\n\tprivate create(container: HTMLElement, options?: IProgressBarOptions): void {\n\t\tthis.element = document.createElement('div');\n\t\tthis.element.classList.add('monaco-progress-container');\n\t\tthis.element.setAttribute('role', 'progressbar');\n\t\tthis.element.setAttribute('aria-valuemin', '0');\n\t\tcontainer.appendChild(this.element);\n\n\t\tthis.bit = document.createElement('div');\n\t\tthis.bit.classList.add('progress-bit');\n\t\tthis.bit.style.backgroundColor = options?.progressBarBackground || '#0E70C0';\n\t\tthis.element.appendChild(this.bit);\n\t}\n\n\tprivate off(): void {\n\t\tthis.bit.style.width = 'inherit';\n\t\tthis.bit.style.opacity = '1';\n\t\tthis.element.classList.remove(CSS_ACTIVE, CSS_INFINITE, CSS_INFINITE_LONG_RUNNING, CSS_DISCRETE);\n\n\t\tthis.workedVal = 0;\n\t\tthis.totalWork = undefined;\n\n\t\tthis.longRunningScheduler.cancel();\n\t}\n\n\t/**\n\t * Indicates to the progress bar that all work is done.\n\t */\n\tdone(): ProgressBar {\n\t\treturn this.doDone(true);\n\t}\n\n\t/**\n\t * Stops the progressbar from showing any progress instantly without fading out.\n\t */\n\tstop(): ProgressBar {\n\t\treturn this.doDone(false);\n\t}\n\n\tprivate doDone(delayed: boolean): ProgressBar {\n\t\tthis.element.classList.add(CSS_DONE);\n\n\t\t// discrete: let it grow to 100% width and hide afterwards\n\t\tif (!this.element.classList.contains(CSS_INFINITE)) {\n\t\t\tthis.bit.style.width = 'inherit';\n\n\t\t\tif (delayed) {\n\t\t\t\tsetTimeout(() => this.off(), 200);\n\t\t\t} else {\n\t\t\t\tthis.off();\n\t\t\t}\n\t\t}\n\n\t\t// infinite: let it fade out and hide afterwards\n\t\telse {\n\t\t\tthis.bit.style.opacity = '0';\n\t\t\tif (delayed) {\n\t\t\t\tsetTimeout(() => this.off(), 200);\n\t\t\t} else {\n\t\t\t\tthis.off();\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Use this mode to indicate progress that has no total number of work units.\n\t */\n\tinfinite(): ProgressBar {\n\t\tthis.bit.style.width = '2%';\n\t\tthis.bit.style.opacity = '1';\n\n\t\tthis.element.classList.remove(CSS_DISCRETE, CSS_DONE, CSS_INFINITE_LONG_RUNNING);\n\t\tthis.element.classList.add(CSS_ACTIVE, CSS_INFINITE);\n\n\t\tthis.longRunningScheduler.schedule();\n\n\t\treturn this;\n\t}\n\n\tprivate infiniteLongRunning(): void {\n\t\tthis.element.classList.add(CSS_INFINITE_LONG_RUNNING);\n\t}\n\n\t/**\n\t * Tells the progress bar the total number of work. Use in combination with workedVal() to let\n\t * the progress bar show the actual progress based on the work that is done.\n\t */\n\ttotal(value: number): ProgressBar {\n\t\tthis.workedVal = 0;\n\t\tthis.totalWork = value;\n\t\tthis.element.setAttribute('aria-valuemax', value.toString());\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Finds out if this progress bar is configured with total work\n\t */\n\thasTotal(): boolean {\n\t\treturn isNumber(this.totalWork);\n\t}\n\n\t/**\n\t * Tells the progress bar that an increment of work has been completed.\n\t */\n\tworked(value: number): ProgressBar {\n\t\tvalue = Math.max(1, Number(value));\n\n\t\treturn this.doSetWorked(this.workedVal + value);\n\t}\n\n\t/**\n\t * Tells the progress bar the total amount of work that has been completed.\n\t */\n\tsetWorked(value: number): ProgressBar {\n\t\tvalue = Math.max(1, Number(value));\n\n\t\treturn this.doSetWorked(value);\n\t}\n\n\tprivate doSetWorked(value: number): ProgressBar {\n\t\tconst totalWork = this.totalWork || 100;\n\n\t\tthis.workedVal = value;\n\t\tthis.workedVal = Math.min(totalWork, this.workedVal);\n\n\t\tthis.element.classList.remove(CSS_INFINITE, CSS_INFINITE_LONG_RUNNING, CSS_DONE);\n\t\tthis.element.classList.add(CSS_ACTIVE, CSS_DISCRETE);\n\t\tthis.element.setAttribute('aria-valuenow', value.toString());\n\n\t\tthis.bit.style.width = 100 * (this.workedVal / (totalWork)) + '%';\n\n\t\treturn this;\n\t}\n\n\tgetContainer(): HTMLElement {\n\t\treturn this.element;\n\t}\n\n\tshow(delay?: number): void {\n\t\tthis.showDelayedScheduler.cancel();\n\n\t\tif (typeof delay === 'number') {\n\t\t\tthis.showDelayedScheduler.schedule(delay);\n\t\t} else {\n\t\t\tshow(this.element);\n\t\t}\n\t}\n\n\thide(): void {\n\t\thide(this.element);\n\t\tthis.showDelayedScheduler.cancel();\n\t}\n}\n"]}