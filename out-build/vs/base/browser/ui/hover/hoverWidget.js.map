{"version":3,"sources":["vs/base/browser/ui/hover/hoverWidget.ts"],"names":[],"mappings":"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","file":"hoverWidget.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from 'vs/base/browser/dom';\nimport { StandardKeyboardEvent } from 'vs/base/browser/keyboardEvent';\nimport { DomScrollableElement } from 'vs/base/browser/ui/scrollbar/scrollableElement';\nimport { KeyCode } from 'vs/base/common/keyCodes';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport 'vs/css!./hover';\nimport { localize } from 'vs/nls';\n\nconst $ = dom.$;\n\nexport const enum HoverPosition {\n\tLEFT, RIGHT, BELOW, ABOVE\n}\n\nexport class HoverWidget extends Disposable {\n\n\tpublic readonly containerDomNode: HTMLElement;\n\tpublic readonly contentsDomNode: HTMLElement;\n\tpublic readonly scrollbar: DomScrollableElement;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.containerDomNode = document.createElement('div');\n\t\tthis.containerDomNode.className = 'monaco-hover';\n\t\tthis.containerDomNode.tabIndex = 0;\n\t\tthis.containerDomNode.setAttribute('role', 'tooltip');\n\n\t\tthis.contentsDomNode = document.createElement('div');\n\t\tthis.contentsDomNode.className = 'monaco-hover-content';\n\n\t\tthis.scrollbar = this._register(new DomScrollableElement(this.contentsDomNode, {\n\t\t\tconsumeMouseWheelIfScrollbarIsNeeded: true\n\t\t}));\n\t\tthis.containerDomNode.appendChild(this.scrollbar.getDomNode());\n\t}\n\n\tpublic onContentsChanged(): void {\n\t\tthis.scrollbar.scanDomNode();\n\t}\n}\n\nexport class HoverAction extends Disposable {\n\tpublic static render(parent: HTMLElement, actionOptions: { label: string; iconClass?: string; run: (target: HTMLElement) => void; commandId: string }, keybindingLabel: string | null) {\n\t\treturn new HoverAction(parent, actionOptions, keybindingLabel);\n\t}\n\n\tprivate readonly actionContainer: HTMLElement;\n\tprivate readonly action: HTMLElement;\n\n\tprivate constructor(parent: HTMLElement, actionOptions: { label: string; iconClass?: string; run: (target: HTMLElement) => void; commandId: string }, keybindingLabel: string | null) {\n\t\tsuper();\n\n\t\tthis.actionContainer = dom.append(parent, $('div.action-container'));\n\t\tthis.actionContainer.setAttribute('tabindex', '0');\n\n\t\tthis.action = dom.append(this.actionContainer, $('a.action'));\n\t\tthis.action.setAttribute('role', 'button');\n\t\tif (actionOptions.iconClass) {\n\t\t\tdom.append(this.action, $(`span.icon.${actionOptions.iconClass}`));\n\t\t}\n\t\tconst label = dom.append(this.action, $('span'));\n\t\tlabel.textContent = keybindingLabel ? `${actionOptions.label} (${keybindingLabel})` : actionOptions.label;\n\n\t\tthis._register(dom.addDisposableListener(this.actionContainer, dom.EventType.CLICK, e => {\n\t\t\te.stopPropagation();\n\t\t\te.preventDefault();\n\t\t\tactionOptions.run(this.actionContainer);\n\t\t}));\n\n\t\tthis._register(dom.addDisposableListener(this.actionContainer, dom.EventType.KEY_DOWN, e => {\n\t\t\tconst event = new StandardKeyboardEvent(e);\n\t\t\tif (event.equals(KeyCode.Enter) || event.equals(KeyCode.Space)) {\n\t\t\t\te.stopPropagation();\n\t\t\t\te.preventDefault();\n\t\t\t\tactionOptions.run(this.actionContainer);\n\t\t\t}\n\t\t}));\n\n\t\tthis.setEnabled(true);\n\t}\n\n\tpublic setEnabled(enabled: boolean): void {\n\t\tif (enabled) {\n\t\t\tthis.actionContainer.classList.remove('disabled');\n\t\t\tthis.actionContainer.removeAttribute('aria-disabled');\n\t\t} else {\n\t\t\tthis.actionContainer.classList.add('disabled');\n\t\t\tthis.actionContainer.setAttribute('aria-disabled', 'true');\n\t\t}\n\t}\n}\n\nexport function getHoverAccessibleViewHint(shouldHaveHint?: boolean, keybinding?: string | null): string | undefined {\n\treturn shouldHaveHint && keybinding ? localize('acessibleViewHint', \"Inspect this in the accessible view with {0}.\", keybinding) : shouldHaveHint ? localize('acessibleViewHintNoKbOpen', \"Inspect this in the accessible view via the command Open Accessible View which is currently not triggerable via keybinding.\") : '';\n}\n"]}