{"version":3,"sources":["file:///workspace/appflow/src/vs/base/browser/ui/selectBox/selectBox.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IA6DnF,QAAA,GAAG,GAAyC;QACxD,GAAG,gBAAG;QACN,gBAAgB,EAAE,SAAS;QAC3B,gBAAgB,EAAE,SAAS;QAC3B,YAAY,EAAE,SAAS;QACvB,wBAAwB,EAAE,SAAS;QACnC,oBAAoB,EAAE,SAAS;QAC/B,gBAAgB,EAAE,SAAS;QAC3B,WAAW,EAAE,SAAS;KACtB,CAAC;IAOF,MAAa,GAAU,SAAQ,YAAG;QAGjC,YAAY,OAA4B,EAAE,QAAgB,EAAE,mBAAyC,EAAE,MAAwB,EAAE,gBAAoC;YACpK,KAAK,EAAE,CAAC;YAER,wDAAwD;YACxD,IAAI,aAAE,IAAa,CAAC,gBAAgB,EAAE,cAAc,EAAE;gBACrD,IAAI,CAAC,CAAC,GAAmB,IAAI,qBAAG,CAAa,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,gBAAgB,CAAC,CAAC;aAC1F;iBAAM;gBACN,IAAI,CAAC,CAAC,GAAmB,IAAI,qBAAG,CAAW,OAAO,EAAE,QAAQ,EAAE,mBAAmB,EAAE,MAAM,EAAE,gBAAgB,CAAC,CAAC;aAC7G;YAED,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,CAAC,CAAiB,CAAC;QACxC,CAAC;QAED,+DAA+D;QAE/D,IAAI,WAAW;YACd,OAAO,IAAI,CAAC,CAAC,CAAiB,WAAW,CAAC;QAC3C,CAAC;QAED,UAAU,CAAC,OAA4B,EAAE,QAAiB;YACzD,IAAI,CAAC,CAAC,CAAiB,UAAU,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;QACtD,CAAC;QAED,MAAM,CAAC,KAAa;YACnB,IAAI,CAAC,CAAC,CAAiB,MAAM,CAAC,KAAK,CAAC,CAAC;QACtC,CAAC;QAED,YAAY,CAAC,KAAa;YACzB,IAAI,CAAC,CAAC,CAAiB,YAAY,CAAC,KAAK,CAAC,CAAC;QAC5C,CAAC;QAED,KAAK;YACJ,IAAI,CAAC,CAAC,CAAiB,KAAK,EAAE,CAAC;QAChC,CAAC;QAED,IAAI;YACH,IAAI,CAAC,CAAC,CAAiB,IAAI,EAAE,CAAC;QAC/B,CAAC;QAED,YAAY,CAAC,SAAkB;YAC9B,IAAI,CAAC,CAAC,CAAiB,YAAY,CAAC,SAAS,CAAC,CAAC;QAChD,CAAC;QAED,MAAM,CAAC,SAAsB;YAC5B,IAAI,CAAC,CAAC,CAAiB,MAAM,CAAC,SAAS,CAAC,CAAC;QAC1C,CAAC;KACD;IAjDD,kBAiDC","file":"selectBox.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IContentActionHandler } from 'vs/base/browser/formattedTextRenderer';\nimport { IContextViewProvider } from 'vs/base/browser/ui/contextview/contextview';\nimport { IListStyles, unthemedListStyles } from 'vs/base/browser/ui/list/listWidget';\nimport { SelectBoxList } from 'vs/base/browser/ui/selectBox/selectBoxCustom';\nimport { SelectBoxNative } from 'vs/base/browser/ui/selectBox/selectBoxNative';\nimport { Widget } from 'vs/base/browser/ui/widget';\nimport { Event } from 'vs/base/common/event';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { isMacintosh } from 'vs/base/common/platform';\nimport 'vs/css!./selectBox';\n\n\n\n// Public SelectBox interface - Calls routed to appropriate select implementation class\n\nexport interface ISelectBoxDelegate extends IDisposable {\n\n\t// Public SelectBox Interface\n\treadonly onDidSelect: Event<ISelectData>;\n\tsetOptions(options: ISelectOptionItem[], selected?: number): void;\n\tselect(index: number): void;\n\tsetAriaLabel(label: string): void;\n\tfocus(): void;\n\tblur(): void;\n\tsetFocusable(focus: boolean): void;\n\n\t// Delegated Widget interface\n\trender(container: HTMLElement): void;\n}\n\nexport interface ISelectBoxOptions {\n\tuseCustomDrawn?: boolean;\n\tariaLabel?: string;\n\tariaDescription?: string;\n\tminBottomMargin?: number;\n\toptionsAsChildren?: boolean;\n}\n\n// Utilize optionItem interface to capture all option parameters\nexport interface ISelectOptionItem {\n\ttext: string;\n\tdetail?: string;\n\tdecoratorRight?: string;\n\tdescription?: string;\n\tdescriptionIsMarkdown?: boolean;\n\tdescriptionMarkdownActionHandler?: IContentActionHandler;\n\tisDisabled?: boolean;\n}\n\nexport interface ISelectBoxStyles extends IListStyles {\n\treadonly selectBackground: string | undefined;\n\treadonly selectListBackground: string | undefined;\n\treadonly selectForeground: string | undefined;\n\treadonly decoratorRightForeground: string | undefined;\n\treadonly selectBorder: string | undefined;\n\treadonly selectListBorder: string | undefined;\n\treadonly focusBorder: string | undefined;\n}\n\nexport const unthemedSelectBoxStyles: ISelectBoxStyles = {\n\t...unthemedListStyles,\n\tselectBackground: '#3C3C3C',\n\tselectForeground: '#F0F0F0',\n\tselectBorder: '#3C3C3C',\n\tdecoratorRightForeground: undefined,\n\tselectListBackground: undefined,\n\tselectListBorder: undefined,\n\tfocusBorder: undefined,\n};\n\nexport interface ISelectData {\n\tselected: string;\n\tindex: number;\n}\n\nexport class SelectBox extends Widget implements ISelectBoxDelegate {\n\tprivate selectBoxDelegate: ISelectBoxDelegate;\n\n\tconstructor(options: ISelectOptionItem[], selected: number, contextViewProvider: IContextViewProvider, styles: ISelectBoxStyles, selectBoxOptions?: ISelectBoxOptions) {\n\t\tsuper();\n\n\t\t// Default to native SelectBox for OSX unless overridden\n\t\tif (isMacintosh && !selectBoxOptions?.useCustomDrawn) {\n\t\t\tthis.selectBoxDelegate = new SelectBoxNative(options, selected, styles, selectBoxOptions);\n\t\t} else {\n\t\t\tthis.selectBoxDelegate = new SelectBoxList(options, selected, contextViewProvider, styles, selectBoxOptions);\n\t\t}\n\n\t\tthis._register(this.selectBoxDelegate);\n\t}\n\n\t// Public SelectBox Methods - routed through delegate interface\n\n\tget onDidSelect(): Event<ISelectData> {\n\t\treturn this.selectBoxDelegate.onDidSelect;\n\t}\n\n\tsetOptions(options: ISelectOptionItem[], selected?: number): void {\n\t\tthis.selectBoxDelegate.setOptions(options, selected);\n\t}\n\n\tselect(index: number): void {\n\t\tthis.selectBoxDelegate.select(index);\n\t}\n\n\tsetAriaLabel(label: string): void {\n\t\tthis.selectBoxDelegate.setAriaLabel(label);\n\t}\n\n\tfocus(): void {\n\t\tthis.selectBoxDelegate.focus();\n\t}\n\n\tblur(): void {\n\t\tthis.selectBoxDelegate.blur();\n\t}\n\n\tsetFocusable(focusable: boolean): void {\n\t\tthis.selectBoxDelegate.setFocusable(focusable);\n\t}\n\n\trender(container: HTMLElement): void {\n\t\tthis.selectBoxDelegate.render(container);\n\t}\n}\n"]}