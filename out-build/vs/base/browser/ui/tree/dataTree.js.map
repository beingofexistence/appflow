{"version":3,"sources":["file:///workspace/appflow/src/vs/base/browser/ui/tree/dataTree.ts"],"names":[],"mappings":"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","file":"dataTree.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IIdentityProvider, IListVirtualDelegate } from 'vs/base/browser/ui/list/list';\nimport { AbstractTree, AbstractTreeViewState, IAbstractTreeOptions } from 'vs/base/browser/ui/tree/abstractTree';\nimport { IList } from 'vs/base/browser/ui/tree/indexTreeModel';\nimport { ObjectTreeModel } from 'vs/base/browser/ui/tree/objectTreeModel';\nimport { IDataSource, ITreeElement, ITreeModel, ITreeNode, ITreeRenderer, ITreeSorter, TreeError } from 'vs/base/browser/ui/tree/tree';\nimport { Iterable } from 'vs/base/common/iterator';\n\nexport interface IDataTreeOptions<T, TFilterData = void> extends IAbstractTreeOptions<T, TFilterData> {\n\treadonly sorter?: ITreeSorter<T>;\n}\n\nexport class DataTree<TInput, T, TFilterData = void> extends AbstractTree<T | null, TFilterData, T | null> {\n\n\tprotected declare model: ObjectTreeModel<T, TFilterData>;\n\tprivate input: TInput | undefined;\n\n\tprivate identityProvider: IIdentityProvider<T> | undefined;\n\tprivate nodesByIdentity = new Map<string, ITreeNode<T, TFilterData>>();\n\n\tconstructor(\n\t\tprivate user: string,\n\t\tcontainer: HTMLElement,\n\t\tdelegate: IListVirtualDelegate<T>,\n\t\trenderers: ITreeRenderer<T, TFilterData, any>[],\n\t\tprivate dataSource: IDataSource<TInput, T>,\n\t\toptions: IDataTreeOptions<T, TFilterData> = {}\n\t) {\n\t\tsuper(user, container, delegate, renderers, options as IDataTreeOptions<T | null, TFilterData>);\n\t\tthis.identityProvider = options.identityProvider;\n\t}\n\n\t// Model\n\n\tgetInput(): TInput | undefined {\n\t\treturn this.input;\n\t}\n\n\tsetInput(input: TInput | undefined, viewState?: AbstractTreeViewState): void {\n\t\tif (viewState && !this.identityProvider) {\n\t\t\tthrow new TreeError(this.user, 'Can\\'t restore tree view state without an identity provider');\n\t\t}\n\n\t\tthis.input = input;\n\n\t\tif (!input) {\n\t\t\tthis.nodesByIdentity.clear();\n\t\t\tthis.model.setChildren(null, Iterable.empty());\n\t\t\treturn;\n\t\t}\n\n\t\tif (!viewState) {\n\t\t\tthis._refresh(input);\n\t\t\treturn;\n\t\t}\n\n\t\tconst focus: T[] = [];\n\t\tconst selection: T[] = [];\n\n\t\tconst isCollapsed = (element: T) => {\n\t\t\tconst id = this.identityProvider!.getId(element).toString();\n\t\t\treturn !viewState.expanded[id];\n\t\t};\n\n\t\tconst onDidCreateNode = (node: ITreeNode<T, TFilterData>) => {\n\t\t\tconst id = this.identityProvider!.getId(node.element).toString();\n\n\t\t\tif (viewState.focus.has(id)) {\n\t\t\t\tfocus.push(node.element);\n\t\t\t}\n\n\t\t\tif (viewState.selection.has(id)) {\n\t\t\t\tselection.push(node.element);\n\t\t\t}\n\t\t};\n\n\t\tthis._refresh(input, isCollapsed, onDidCreateNode);\n\t\tthis.setFocus(focus);\n\t\tthis.setSelection(selection);\n\n\t\tif (viewState && typeof viewState.scrollTop === 'number') {\n\t\t\tthis.scrollTop = viewState.scrollTop;\n\t\t}\n\t}\n\n\tupdateChildren(element: TInput | T = this.input!): void {\n\t\tif (typeof this.input === 'undefined') {\n\t\t\tthrow new TreeError(this.user, 'Tree input not set');\n\t\t}\n\n\t\tlet isCollapsed: ((el: T) => boolean | undefined) | undefined;\n\n\t\tif (this.identityProvider) {\n\t\t\tisCollapsed = element => {\n\t\t\t\tconst id = this.identityProvider!.getId(element).toString();\n\t\t\t\tconst node = this.nodesByIdentity.get(id);\n\n\t\t\t\tif (!node) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\treturn node.collapsed;\n\t\t\t};\n\t\t}\n\n\t\tthis._refresh(element, isCollapsed);\n\t}\n\n\tresort(element: T | TInput = this.input!, recursive = true): void {\n\t\tthis.model.resort((element === this.input ? null : element) as T, recursive);\n\t}\n\n\t// View\n\n\trefresh(element?: T): void {\n\t\tif (element === undefined) {\n\t\t\tthis.view.rerender();\n\t\t\treturn;\n\t\t}\n\n\t\tthis.model.rerender(element);\n\t}\n\n\t// Implementation\n\n\tprivate _refresh(element: TInput | T, isCollapsed?: (el: T) => boolean | undefined, onDidCreateNode?: (node: ITreeNode<T, TFilterData>) => void): void {\n\t\tlet onDidDeleteNode: ((node: ITreeNode<T, TFilterData>) => void) | undefined;\n\n\t\tif (this.identityProvider) {\n\t\t\tconst insertedElements = new Set<string>();\n\n\t\t\tconst outerOnDidCreateNode = onDidCreateNode;\n\t\t\tonDidCreateNode = (node: ITreeNode<T, TFilterData>) => {\n\t\t\t\tconst id = this.identityProvider!.getId(node.element).toString();\n\n\t\t\t\tinsertedElements.add(id);\n\t\t\t\tthis.nodesByIdentity.set(id, node);\n\n\t\t\t\touterOnDidCreateNode?.(node);\n\t\t\t};\n\n\t\t\tonDidDeleteNode = (node: ITreeNode<T, TFilterData>) => {\n\t\t\t\tconst id = this.identityProvider!.getId(node.element).toString();\n\n\t\t\t\tif (!insertedElements.has(id)) {\n\t\t\t\t\tthis.nodesByIdentity.delete(id);\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tthis.model.setChildren((element === this.input ? null : element) as T, this.iterate(element, isCollapsed).elements, { onDidCreateNode, onDidDeleteNode });\n\t}\n\n\tprivate iterate(element: TInput | T, isCollapsed?: (el: T) => boolean | undefined): { elements: Iterable<ITreeElement<T>>; size: number } {\n\t\tconst children = [...this.dataSource.getChildren(element)];\n\t\tconst elements = Iterable.map(children, element => {\n\t\t\tconst { elements: children, size } = this.iterate(element, isCollapsed);\n\t\t\tconst collapsible = this.dataSource.hasChildren ? this.dataSource.hasChildren(element) : undefined;\n\t\t\tconst collapsed = size === 0 ? undefined : (isCollapsed && isCollapsed(element));\n\n\t\t\treturn { element, children, collapsible, collapsed };\n\t\t});\n\n\t\treturn { elements, size: children.length };\n\t}\n\n\tprotected createModel(user: string, view: IList<ITreeNode<T, TFilterData>>, options: IDataTreeOptions<T, TFilterData>): ITreeModel<T | null, TFilterData, T | null> {\n\t\treturn new ObjectTreeModel(user, view, options);\n\t}\n}\n"]}