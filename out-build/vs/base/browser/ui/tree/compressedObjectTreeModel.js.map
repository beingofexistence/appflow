{"version":3,"sources":["file:///workspace/appflow/src/vs/base/browser/ui/tree/compressedObjectTreeModel.ts"],"names":[],"mappings":"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","file":"compressedObjectTreeModel.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IIdentityProvider } from 'vs/base/browser/ui/list/list';\nimport { IIndexTreeModelSpliceOptions, IList } from 'vs/base/browser/ui/tree/indexTreeModel';\nimport { IObjectTreeModel, IObjectTreeModelOptions, IObjectTreeModelSetChildrenOptions, ObjectTreeModel } from 'vs/base/browser/ui/tree/objectTreeModel';\nimport { ICollapseStateChangeEvent, IObjectTreeElement, ITreeModel, ITreeModelSpliceEvent, ITreeNode, TreeError, TreeFilterResult, TreeVisibility, WeakMapper } from 'vs/base/browser/ui/tree/tree';\nimport { equals } from 'vs/base/common/arrays';\nimport { Event } from 'vs/base/common/event';\nimport { Iterable } from 'vs/base/common/iterator';\n\n// Exported only for test reasons, do not use directly\nexport interface ICompressedTreeElement<T> extends IObjectTreeElement<T> {\n\treadonly children?: Iterable<ICompressedTreeElement<T>>;\n\treadonly incompressible?: boolean;\n}\n\n// Exported only for test reasons, do not use directly\nexport interface ICompressedTreeNode<T> {\n\treadonly elements: T[];\n\treadonly incompressible: boolean;\n}\n\nfunction noCompress<T>(element: ICompressedTreeElement<T>): ICompressedTreeElement<ICompressedTreeNode<T>> {\n\tconst elements = [element.element];\n\tconst incompressible = element.incompressible || false;\n\n\treturn {\n\t\telement: { elements, incompressible },\n\t\tchildren: Iterable.map(Iterable.from(element.children), noCompress),\n\t\tcollapsible: element.collapsible,\n\t\tcollapsed: element.collapsed\n\t};\n}\n\n// Exported only for test reasons, do not use directly\nexport function compress<T>(element: ICompressedTreeElement<T>): ICompressedTreeElement<ICompressedTreeNode<T>> {\n\tconst elements = [element.element];\n\tconst incompressible = element.incompressible || false;\n\n\tlet childrenIterator: Iterable<ICompressedTreeElement<T>>;\n\tlet children: ICompressedTreeElement<T>[];\n\n\twhile (true) {\n\t\t[children, childrenIterator] = Iterable.consume(Iterable.from(element.children), 2);\n\n\t\tif (children.length !== 1) {\n\t\t\tbreak;\n\t\t}\n\n\t\tif (children[0].incompressible) {\n\t\t\tbreak;\n\t\t}\n\n\t\telement = children[0];\n\t\telements.push(element.element);\n\t}\n\n\treturn {\n\t\telement: { elements, incompressible },\n\t\tchildren: Iterable.map(Iterable.concat(children, childrenIterator), compress),\n\t\tcollapsible: element.collapsible,\n\t\tcollapsed: element.collapsed\n\t};\n}\n\nfunction _decompress<T>(element: ICompressedTreeElement<ICompressedTreeNode<T>>, index = 0): ICompressedTreeElement<T> {\n\tlet children: Iterable<ICompressedTreeElement<T>>;\n\n\tif (index < element.element.elements.length - 1) {\n\t\tchildren = [_decompress(element, index + 1)];\n\t} else {\n\t\tchildren = Iterable.map(Iterable.from(element.children), el => _decompress(el, 0));\n\t}\n\n\tif (index === 0 && element.element.incompressible) {\n\t\treturn {\n\t\t\telement: element.element.elements[index],\n\t\t\tchildren,\n\t\t\tincompressible: true,\n\t\t\tcollapsible: element.collapsible,\n\t\t\tcollapsed: element.collapsed\n\t\t};\n\t}\n\n\treturn {\n\t\telement: element.element.elements[index],\n\t\tchildren,\n\t\tcollapsible: element.collapsible,\n\t\tcollapsed: element.collapsed\n\t};\n}\n\n// Exported only for test reasons, do not use directly\nexport function decompress<T>(element: ICompressedTreeElement<ICompressedTreeNode<T>>): ICompressedTreeElement<T> {\n\treturn _decompress(element, 0);\n}\n\nfunction splice<T>(treeElement: ICompressedTreeElement<T>, element: T, children: Iterable<ICompressedTreeElement<T>>): ICompressedTreeElement<T> {\n\tif (treeElement.element === element) {\n\t\treturn { ...treeElement, children };\n\t}\n\n\treturn { ...treeElement, children: Iterable.map(Iterable.from(treeElement.children), e => splice(e, element, children)) };\n}\n\ninterface ICompressedObjectTreeModelOptions<T, TFilterData> extends IObjectTreeModelOptions<ICompressedTreeNode<T>, TFilterData> {\n\treadonly compressionEnabled?: boolean;\n}\n\nconst wrapIdentityProvider = <T>(base: IIdentityProvider<T>): IIdentityProvider<ICompressedTreeNode<T>> => ({\n\tgetId(node) {\n\t\treturn node.elements.map(e => base.getId(e).toString()).join('\\0');\n\t}\n});\n\n// Exported only for test reasons, do not use directly\nexport class CompressedObjectTreeModel<T extends NonNullable<any>, TFilterData extends NonNullable<any> = void> implements ITreeModel<ICompressedTreeNode<T> | null, TFilterData, T | null> {\n\n\treadonly rootRef = null;\n\n\tget onDidSplice(): Event<ITreeModelSpliceEvent<ICompressedTreeNode<T> | null, TFilterData>> { return this.model.onDidSplice; }\n\tget onDidChangeCollapseState(): Event<ICollapseStateChangeEvent<ICompressedTreeNode<T>, TFilterData>> { return this.model.onDidChangeCollapseState; }\n\tget onDidChangeRenderNodeCount(): Event<ITreeNode<ICompressedTreeNode<T>, TFilterData>> { return this.model.onDidChangeRenderNodeCount; }\n\n\tprivate model: ObjectTreeModel<ICompressedTreeNode<T>, TFilterData>;\n\tprivate nodes = new Map<T | null, ICompressedTreeNode<T>>();\n\tprivate enabled: boolean;\n\tprivate readonly identityProvider?: IIdentityProvider<ICompressedTreeNode<T>>;\n\n\tget size(): number { return this.nodes.size; }\n\n\tconstructor(\n\t\tprivate user: string,\n\t\tlist: IList<ITreeNode<ICompressedTreeNode<T>, TFilterData>>,\n\t\toptions: ICompressedObjectTreeModelOptions<T, TFilterData> = {}\n\t) {\n\t\tthis.model = new ObjectTreeModel(user, list, options);\n\t\tthis.enabled = typeof options.compressionEnabled === 'undefined' ? true : options.compressionEnabled;\n\t\tthis.identityProvider = options.identityProvider;\n\t}\n\n\tsetChildren(\n\t\telement: T | null,\n\t\tchildren: Iterable<ICompressedTreeElement<T>> = Iterable.empty(),\n\t\toptions: IObjectTreeModelSetChildrenOptions<T, TFilterData>,\n\t): void {\n\t\t// Diffs must be deep, since the compression can affect nested elements.\n\t\t// @see https://github.com/microsoft/vscode/pull/114237#issuecomment-759425034\n\n\t\tconst diffIdentityProvider = options.diffIdentityProvider && wrapIdentityProvider(options.diffIdentityProvider);\n\t\tif (element === null) {\n\t\t\tconst compressedChildren = Iterable.map(children, this.enabled ? compress : noCompress);\n\t\t\tthis._setChildren(null, compressedChildren, { diffIdentityProvider, diffDepth: Infinity });\n\t\t\treturn;\n\t\t}\n\n\t\tconst compressedNode = this.nodes.get(element);\n\n\t\tif (!compressedNode) {\n\t\t\tthrow new TreeError(this.user, 'Unknown compressed tree node');\n\t\t}\n\n\t\tconst node = this.model.getNode(compressedNode) as ITreeNode<ICompressedTreeNode<T>, TFilterData>;\n\t\tconst compressedParentNode = this.model.getParentNodeLocation(compressedNode);\n\t\tconst parent = this.model.getNode(compressedParentNode) as ITreeNode<ICompressedTreeNode<T>, TFilterData>;\n\n\t\tconst decompressedElement = decompress(node);\n\t\tconst splicedElement = splice(decompressedElement, element, children);\n\t\tconst recompressedElement = (this.enabled ? compress : noCompress)(splicedElement);\n\n\t\t// If the recompressed node is identical to the original, just set its children.\n\t\t// Saves work and churn diffing the parent element.\n\t\tconst elementComparator = options.diffIdentityProvider\n\t\t\t? ((a: T, b: T) => options.diffIdentityProvider!.getId(a) === options.diffIdentityProvider!.getId(b))\n\t\t\t: undefined;\n\t\tif (equals(recompressedElement.element.elements, node.element.elements, elementComparator)) {\n\t\t\tthis._setChildren(compressedNode, recompressedElement.children || Iterable.empty(), { diffIdentityProvider, diffDepth: 1 });\n\t\t\treturn;\n\t\t}\n\n\t\tconst parentChildren = parent.children\n\t\t\t.map(child => child === node ? recompressedElement : child);\n\n\t\tthis._setChildren(parent.element, parentChildren, {\n\t\t\tdiffIdentityProvider,\n\t\t\tdiffDepth: node.depth - parent.depth,\n\t\t});\n\t}\n\n\tisCompressionEnabled(): boolean {\n\t\treturn this.enabled;\n\t}\n\n\tsetCompressionEnabled(enabled: boolean): void {\n\t\tif (enabled === this.enabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.enabled = enabled;\n\n\t\tconst root = this.model.getNode();\n\t\tconst rootChildren = root.children as ITreeNode<ICompressedTreeNode<T>>[];\n\t\tconst decompressedRootChildren = Iterable.map(rootChildren, decompress);\n\t\tconst recompressedRootChildren = Iterable.map(decompressedRootChildren, enabled ? compress : noCompress);\n\n\t\t// it should be safe to always use deep diff mode here if an identity\n\t\t// provider is available, since we know the raw nodes are unchanged.\n\t\tthis._setChildren(null, recompressedRootChildren, {\n\t\t\tdiffIdentityProvider: this.identityProvider,\n\t\t\tdiffDepth: Infinity,\n\t\t});\n\t}\n\n\tprivate _setChildren(\n\t\tnode: ICompressedTreeNode<T> | null,\n\t\tchildren: Iterable<IObjectTreeElement<ICompressedTreeNode<T>>>,\n\t\toptions: IIndexTreeModelSpliceOptions<ICompressedTreeNode<T>, TFilterData>,\n\t): void {\n\t\tconst insertedElements = new Set<T | null>();\n\t\tconst onDidCreateNode = (node: ITreeNode<ICompressedTreeNode<T>, TFilterData>) => {\n\t\t\tfor (const element of node.element.elements) {\n\t\t\t\tinsertedElements.add(element);\n\t\t\t\tthis.nodes.set(element, node.element);\n\t\t\t}\n\t\t};\n\n\t\tconst onDidDeleteNode = (node: ITreeNode<ICompressedTreeNode<T>, TFilterData>) => {\n\t\t\tfor (const element of node.element.elements) {\n\t\t\t\tif (!insertedElements.has(element)) {\n\t\t\t\t\tthis.nodes.delete(element);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tthis.model.setChildren(node, children, { ...options, onDidCreateNode, onDidDeleteNode });\n\t}\n\n\thas(element: T | null): boolean {\n\t\treturn this.nodes.has(element);\n\t}\n\n\tgetListIndex(location: T | null): number {\n\t\tconst node = this.getCompressedNode(location);\n\t\treturn this.model.getListIndex(node);\n\t}\n\n\tgetListRenderCount(location: T | null): number {\n\t\tconst node = this.getCompressedNode(location);\n\t\treturn this.model.getListRenderCount(node);\n\t}\n\n\tgetNode(location?: T | null | undefined): ITreeNode<ICompressedTreeNode<T> | null, TFilterData> {\n\t\tif (typeof location === 'undefined') {\n\t\t\treturn this.model.getNode();\n\t\t}\n\n\t\tconst node = this.getCompressedNode(location);\n\t\treturn this.model.getNode(node);\n\t}\n\n\t// TODO: review this\n\tgetNodeLocation(node: ITreeNode<ICompressedTreeNode<T>, TFilterData>): T | null {\n\t\tconst compressedNode = this.model.getNodeLocation(node);\n\n\t\tif (compressedNode === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn compressedNode.elements[compressedNode.elements.length - 1];\n\t}\n\n\t// TODO: review this\n\tgetParentNodeLocation(location: T | null): T | null {\n\t\tconst compressedNode = this.getCompressedNode(location);\n\t\tconst parentNode = this.model.getParentNodeLocation(compressedNode);\n\n\t\tif (parentNode === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\treturn parentNode.elements[parentNode.elements.length - 1];\n\t}\n\n\tgetFirstElementChild(location: T | null): ICompressedTreeNode<T> | null | undefined {\n\t\tconst compressedNode = this.getCompressedNode(location);\n\t\treturn this.model.getFirstElementChild(compressedNode);\n\t}\n\n\tgetLastElementAncestor(location?: T | null | undefined): ICompressedTreeNode<T> | null | undefined {\n\t\tconst compressedNode = typeof location === 'undefined' ? undefined : this.getCompressedNode(location);\n\t\treturn this.model.getLastElementAncestor(compressedNode);\n\t}\n\n\tisCollapsible(location: T | null): boolean {\n\t\tconst compressedNode = this.getCompressedNode(location);\n\t\treturn this.model.isCollapsible(compressedNode);\n\t}\n\n\tsetCollapsible(location: T | null, collapsible?: boolean): boolean {\n\t\tconst compressedNode = this.getCompressedNode(location);\n\t\treturn this.model.setCollapsible(compressedNode, collapsible);\n\t}\n\n\tisCollapsed(location: T | null): boolean {\n\t\tconst compressedNode = this.getCompressedNode(location);\n\t\treturn this.model.isCollapsed(compressedNode);\n\t}\n\n\tsetCollapsed(location: T | null, collapsed?: boolean | undefined, recursive?: boolean | undefined): boolean {\n\t\tconst compressedNode = this.getCompressedNode(location);\n\t\treturn this.model.setCollapsed(compressedNode, collapsed, recursive);\n\t}\n\n\texpandTo(location: T | null): void {\n\t\tconst compressedNode = this.getCompressedNode(location);\n\t\tthis.model.expandTo(compressedNode);\n\t}\n\n\trerender(location: T | null): void {\n\t\tconst compressedNode = this.getCompressedNode(location);\n\t\tthis.model.rerender(compressedNode);\n\t}\n\n\tupdateElementHeight(element: T, height: number): void {\n\t\tconst compressedNode = this.getCompressedNode(element);\n\n\t\tif (!compressedNode) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.model.updateElementHeight(compressedNode, height);\n\t}\n\n\trefilter(): void {\n\t\tthis.model.refilter();\n\t}\n\n\tresort(location: T | null = null, recursive = true): void {\n\t\tconst compressedNode = this.getCompressedNode(location);\n\t\tthis.model.resort(compressedNode, recursive);\n\t}\n\n\tgetCompressedNode(element: T | null): ICompressedTreeNode<T> | null {\n\t\tif (element === null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst node = this.nodes.get(element);\n\n\t\tif (!node) {\n\t\t\tthrow new TreeError(this.user, `Tree element not found: ${element}`);\n\t\t}\n\n\t\treturn node;\n\t}\n}\n\n// Compressible Object Tree\n\nexport type ElementMapper<T> = (elements: T[]) => T;\nexport const DefaultElementMapper: ElementMapper<any> = elements => elements[elements.length - 1];\n\nexport type CompressedNodeUnwrapper<T> = (node: ICompressedTreeNode<T>) => T;\ntype CompressedNodeWeakMapper<T, TFilterData> = WeakMapper<ITreeNode<ICompressedTreeNode<T> | null, TFilterData>, ITreeNode<T | null, TFilterData>>;\n\nclass CompressedTreeNodeWrapper<T, TFilterData> implements ITreeNode<T | null, TFilterData> {\n\n\tget element(): T | null { return this.node.element === null ? null : this.unwrapper(this.node.element); }\n\tget children(): ITreeNode<T | null, TFilterData>[] { return this.node.children.map(node => new CompressedTreeNodeWrapper(this.unwrapper, node)); }\n\tget depth(): number { return this.node.depth; }\n\tget visibleChildrenCount(): number { return this.node.visibleChildrenCount; }\n\tget visibleChildIndex(): number { return this.node.visibleChildIndex; }\n\tget collapsible(): boolean { return this.node.collapsible; }\n\tget collapsed(): boolean { return this.node.collapsed; }\n\tget visible(): boolean { return this.node.visible; }\n\tget filterData(): TFilterData | undefined { return this.node.filterData; }\n\n\tconstructor(\n\t\tprivate unwrapper: CompressedNodeUnwrapper<T>,\n\t\tprivate node: ITreeNode<ICompressedTreeNode<T> | null, TFilterData>\n\t) { }\n}\n\nfunction mapList<T, TFilterData>(nodeMapper: CompressedNodeWeakMapper<T, TFilterData>, list: IList<ITreeNode<T, TFilterData>>): IList<ITreeNode<ICompressedTreeNode<T>, TFilterData>> {\n\treturn {\n\t\tsplice(start: number, deleteCount: number, toInsert: ITreeNode<ICompressedTreeNode<T>, TFilterData>[]): void {\n\t\t\tlist.splice(start, deleteCount, toInsert.map(node => nodeMapper.map(node)) as ITreeNode<T, TFilterData>[]);\n\t\t},\n\t\tupdateElementHeight(index: number, height: number): void {\n\t\t\tlist.updateElementHeight(index, height);\n\t\t}\n\t};\n}\n\nfunction mapOptions<T, TFilterData>(compressedNodeUnwrapper: CompressedNodeUnwrapper<T>, options: ICompressibleObjectTreeModelOptions<T, TFilterData>): ICompressedObjectTreeModelOptions<T, TFilterData> {\n\treturn {\n\t\t...options,\n\t\tidentityProvider: options.identityProvider && {\n\t\t\tgetId(node: ICompressedTreeNode<T>): { toString(): string } {\n\t\t\t\treturn options.identityProvider!.getId(compressedNodeUnwrapper(node));\n\t\t\t}\n\t\t},\n\t\tsorter: options.sorter && {\n\t\t\tcompare(node: ICompressedTreeNode<T>, otherNode: ICompressedTreeNode<T>): number {\n\t\t\t\treturn options.sorter!.compare(node.elements[0], otherNode.elements[0]);\n\t\t\t}\n\t\t},\n\t\tfilter: options.filter && {\n\t\t\tfilter(node: ICompressedTreeNode<T>, parentVisibility: TreeVisibility): TreeFilterResult<TFilterData> {\n\t\t\t\treturn options.filter!.filter(compressedNodeUnwrapper(node), parentVisibility);\n\t\t\t}\n\t\t}\n\t};\n}\n\nexport interface ICompressibleObjectTreeModelOptions<T, TFilterData> extends IObjectTreeModelOptions<T, TFilterData> {\n\treadonly compressionEnabled?: boolean;\n\treadonly elementMapper?: ElementMapper<T>;\n}\n\nexport class CompressibleObjectTreeModel<T extends NonNullable<any>, TFilterData extends NonNullable<any> = void> implements IObjectTreeModel<T, TFilterData> {\n\n\treadonly rootRef = null;\n\n\tget onDidSplice(): Event<ITreeModelSpliceEvent<T | null, TFilterData>> {\n\t\treturn Event.map(this.model.onDidSplice, ({ insertedNodes, deletedNodes }) => ({\n\t\t\tinsertedNodes: insertedNodes.map(node => this.nodeMapper.map(node)),\n\t\t\tdeletedNodes: deletedNodes.map(node => this.nodeMapper.map(node)),\n\t\t}));\n\t}\n\n\tget onDidChangeCollapseState(): Event<ICollapseStateChangeEvent<T | null, TFilterData>> {\n\t\treturn Event.map(this.model.onDidChangeCollapseState, ({ node, deep }) => ({\n\t\t\tnode: this.nodeMapper.map(node),\n\t\t\tdeep\n\t\t}));\n\t}\n\n\tget onDidChangeRenderNodeCount(): Event<ITreeNode<T | null, TFilterData>> {\n\t\treturn Event.map(this.model.onDidChangeRenderNodeCount, node => this.nodeMapper.map(node));\n\t}\n\n\tprivate elementMapper: ElementMapper<T>;\n\tprivate nodeMapper: CompressedNodeWeakMapper<T, TFilterData>;\n\tprivate model: CompressedObjectTreeModel<T, TFilterData>;\n\n\tconstructor(\n\t\tuser: string,\n\t\tlist: IList<ITreeNode<T, TFilterData>>,\n\t\toptions: ICompressibleObjectTreeModelOptions<T, TFilterData> = {}\n\t) {\n\t\tthis.elementMapper = options.elementMapper || DefaultElementMapper;\n\t\tconst compressedNodeUnwrapper: CompressedNodeUnwrapper<T> = node => this.elementMapper(node.elements);\n\t\tthis.nodeMapper = new WeakMapper(node => new CompressedTreeNodeWrapper(compressedNodeUnwrapper, node));\n\n\t\tthis.model = new CompressedObjectTreeModel(user, mapList(this.nodeMapper, list), mapOptions(compressedNodeUnwrapper, options));\n\t}\n\n\tsetChildren(\n\t\telement: T | null,\n\t\tchildren: Iterable<ICompressedTreeElement<T>> = Iterable.empty(),\n\t\toptions: IObjectTreeModelSetChildrenOptions<T, TFilterData> = {},\n\t): void {\n\t\tthis.model.setChildren(element, children, options);\n\t}\n\n\tisCompressionEnabled(): boolean {\n\t\treturn this.model.isCompressionEnabled();\n\t}\n\n\tsetCompressionEnabled(enabled: boolean): void {\n\t\tthis.model.setCompressionEnabled(enabled);\n\t}\n\n\thas(location: T | null): boolean {\n\t\treturn this.model.has(location);\n\t}\n\n\tgetListIndex(location: T | null): number {\n\t\treturn this.model.getListIndex(location);\n\t}\n\n\tgetListRenderCount(location: T | null): number {\n\t\treturn this.model.getListRenderCount(location);\n\t}\n\n\tgetNode(location?: T | null | undefined): ITreeNode<T | null, any> {\n\t\treturn this.nodeMapper.map(this.model.getNode(location));\n\t}\n\n\tgetNodeLocation(node: ITreeNode<T | null, any>): T | null {\n\t\treturn node.element;\n\t}\n\n\tgetParentNodeLocation(location: T | null): T | null {\n\t\treturn this.model.getParentNodeLocation(location);\n\t}\n\n\tgetFirstElementChild(location: T | null): T | null | undefined {\n\t\tconst result = this.model.getFirstElementChild(location);\n\n\t\tif (result === null || typeof result === 'undefined') {\n\t\t\treturn result;\n\t\t}\n\n\t\treturn this.elementMapper(result.elements);\n\t}\n\n\tgetLastElementAncestor(location?: T | null | undefined): T | null | undefined {\n\t\tconst result = this.model.getLastElementAncestor(location);\n\n\t\tif (result === null || typeof result === 'undefined') {\n\t\t\treturn result;\n\t\t}\n\n\t\treturn this.elementMapper(result.elements);\n\t}\n\n\tisCollapsible(location: T | null): boolean {\n\t\treturn this.model.isCollapsible(location);\n\t}\n\n\tsetCollapsible(location: T | null, collapsed?: boolean): boolean {\n\t\treturn this.model.setCollapsible(location, collapsed);\n\t}\n\n\tisCollapsed(location: T | null): boolean {\n\t\treturn this.model.isCollapsed(location);\n\t}\n\n\tsetCollapsed(location: T | null, collapsed?: boolean | undefined, recursive?: boolean | undefined): boolean {\n\t\treturn this.model.setCollapsed(location, collapsed, recursive);\n\t}\n\n\texpandTo(location: T | null): void {\n\t\treturn this.model.expandTo(location);\n\t}\n\n\trerender(location: T | null): void {\n\t\treturn this.model.rerender(location);\n\t}\n\n\tupdateElementHeight(element: T, height: number): void {\n\t\tthis.model.updateElementHeight(element, height);\n\t}\n\n\trefilter(): void {\n\t\treturn this.model.refilter();\n\t}\n\n\tresort(element: T | null = null, recursive = true): void {\n\t\treturn this.model.resort(element, recursive);\n\t}\n\n\tgetCompressedTreeNode(location: T | null = null): ITreeNode<ICompressedTreeNode<T> | null, TFilterData> {\n\t\treturn this.model.getNode(location);\n\t}\n}\n"]}