{"version":3,"sources":["file:///workspace/appflow/src/vs/base/browser/ui/grid/grid.ts"],"names":[],"mappings":"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","file":"grid.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IBoundarySashes, Orientation } from 'vs/base/browser/ui/sash/sash';\nimport { equals, tail2 as tail } from 'vs/base/common/arrays';\nimport { Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport 'vs/css!./gridview';\nimport { Box, GridView, IGridViewOptions, IGridViewStyles, IView as IGridViewView, IViewSize, orthogonal, Sizing as GridViewSizing, GridLocation } from './gridview';\nimport type { SplitView, AutoSizing as SplitViewAutoSizing } from 'vs/base/browser/ui/splitview/splitview';\n\nexport { IViewSize, LayoutPriority, Orientation, orthogonal } from './gridview';\n\nexport const enum Direction {\n\tUp,\n\tDown,\n\tLeft,\n\tRight\n}\n\nfunction oppositeDirection(direction: Direction): Direction {\n\tswitch (direction) {\n\t\tcase Direction.Up: return Direction.Down;\n\t\tcase Direction.Down: return Direction.Up;\n\t\tcase Direction.Left: return Direction.Right;\n\t\tcase Direction.Right: return Direction.Left;\n\t}\n}\n\n/**\n * The interface to implement for views within a {@link Grid}.\n */\nexport interface IView extends IGridViewView {\n\n\t/**\n\t * The preferred width for when the user double clicks a sash\n\t * adjacent to this view.\n\t */\n\treadonly preferredWidth?: number;\n\n\t/**\n\t * The preferred height for when the user double clicks a sash\n\t * adjacent to this view.\n\t */\n\treadonly preferredHeight?: number;\n}\n\nexport interface GridLeafNode<T extends IView> {\n\treadonly view: T;\n\treadonly box: Box;\n\treadonly cachedVisibleSize: number | undefined;\n}\n\nexport interface GridBranchNode<T extends IView> {\n\treadonly children: GridNode<T>[];\n\treadonly box: Box;\n}\n\nexport type GridNode<T extends IView> = GridLeafNode<T> | GridBranchNode<T>;\n\nexport function isGridBranchNode<T extends IView>(node: GridNode<T>): node is GridBranchNode<T> {\n\treturn !!(node as any).children;\n}\n\nfunction getGridNode<T extends IView>(node: GridNode<T>, location: GridLocation): GridNode<T> {\n\tif (location.length === 0) {\n\t\treturn node;\n\t}\n\n\tif (!isGridBranchNode(node)) {\n\t\tthrow new Error('Invalid location');\n\t}\n\n\tconst [index, ...rest] = location;\n\treturn getGridNode(node.children[index], rest);\n}\n\ninterface Range {\n\treadonly start: number;\n\treadonly end: number;\n}\n\nfunction intersects(one: Range, other: Range): boolean {\n\treturn !(one.start >= other.end || other.start >= one.end);\n}\n\ninterface Boundary {\n\treadonly offset: number;\n\treadonly range: Range;\n}\n\nfunction getBoxBoundary(box: Box, direction: Direction): Boundary {\n\tconst orientation = getDirectionOrientation(direction);\n\tconst offset = direction === Direction.Up ? box.top :\n\t\tdirection === Direction.Right ? box.left + box.width :\n\t\t\tdirection === Direction.Down ? box.top + box.height :\n\t\t\t\tbox.left;\n\n\tconst range = {\n\t\tstart: orientation === Orientation.HORIZONTAL ? box.top : box.left,\n\t\tend: orientation === Orientation.HORIZONTAL ? box.top + box.height : box.left + box.width\n\t};\n\n\treturn { offset, range };\n}\n\nfunction findAdjacentBoxLeafNodes<T extends IView>(boxNode: GridNode<T>, direction: Direction, boundary: Boundary): GridLeafNode<T>[] {\n\tconst result: GridLeafNode<T>[] = [];\n\n\tfunction _(boxNode: GridNode<T>, direction: Direction, boundary: Boundary): void {\n\t\tif (isGridBranchNode(boxNode)) {\n\t\t\tfor (const child of boxNode.children) {\n\t\t\t\t_(child, direction, boundary);\n\t\t\t}\n\t\t} else {\n\t\t\tconst { offset, range } = getBoxBoundary(boxNode.box, direction);\n\n\t\t\tif (offset === boundary.offset && intersects(range, boundary.range)) {\n\t\t\t\tresult.push(boxNode);\n\t\t\t}\n\t\t}\n\t}\n\n\t_(boxNode, direction, boundary);\n\treturn result;\n}\n\nfunction getLocationOrientation(rootOrientation: Orientation, location: GridLocation): Orientation {\n\treturn location.length % 2 === 0 ? orthogonal(rootOrientation) : rootOrientation;\n}\n\nfunction getDirectionOrientation(direction: Direction): Orientation {\n\treturn direction === Direction.Up || direction === Direction.Down ? Orientation.VERTICAL : Orientation.HORIZONTAL;\n}\n\nexport function getRelativeLocation(rootOrientation: Orientation, location: GridLocation, direction: Direction): GridLocation {\n\tconst orientation = getLocationOrientation(rootOrientation, location);\n\tconst directionOrientation = getDirectionOrientation(direction);\n\n\tif (orientation === directionOrientation) {\n\t\tlet [rest, index] = tail(location);\n\n\t\tif (direction === Direction.Right || direction === Direction.Down) {\n\t\t\tindex += 1;\n\t\t}\n\n\t\treturn [...rest, index];\n\t} else {\n\t\tconst index = (direction === Direction.Right || direction === Direction.Down) ? 1 : 0;\n\t\treturn [...location, index];\n\t}\n}\n\nfunction indexInParent(element: HTMLElement): number {\n\tconst parentElement = element.parentElement;\n\n\tif (!parentElement) {\n\t\tthrow new Error('Invalid grid element');\n\t}\n\n\tlet el = parentElement.firstElementChild;\n\tlet index = 0;\n\n\twhile (el !== element && el !== parentElement.lastElementChild && el) {\n\t\tel = el.nextElementSibling;\n\t\tindex++;\n\t}\n\n\treturn index;\n}\n\n/**\n * Find the grid location of a specific DOM element by traversing the parent\n * chain and finding each child index on the way.\n *\n * This will break as soon as DOM structures of the Splitview or Gridview change.\n */\nfunction getGridLocation(element: HTMLElement): GridLocation {\n\tconst parentElement = element.parentElement;\n\n\tif (!parentElement) {\n\t\tthrow new Error('Invalid grid element');\n\t}\n\n\tif (/\\bmonaco-grid-view\\b/.test(parentElement.className)) {\n\t\treturn [];\n\t}\n\n\tconst index = indexInParent(parentElement);\n\tconst ancestor = parentElement.parentElement!.parentElement!.parentElement!.parentElement!;\n\treturn [...getGridLocation(ancestor), index];\n}\n\nexport type DistributeSizing = { type: 'distribute' };\nexport type SplitSizing = { type: 'split' };\nexport type AutoSizing = { type: 'auto' };\nexport type InvisibleSizing = { type: 'invisible'; cachedVisibleSize: number };\nexport type Sizing = DistributeSizing | SplitSizing | AutoSizing | InvisibleSizing;\n\nexport namespace Sizing {\n\texport const Distribute: DistributeSizing = { type: 'distribute' };\n\texport const Split: SplitSizing = { type: 'split' };\n\texport const Auto: AutoSizing = { type: 'auto' };\n\texport function Invisible(cachedVisibleSize: number): InvisibleSizing { return { type: 'invisible', cachedVisibleSize }; }\n}\n\nexport interface IGridStyles extends IGridViewStyles { }\nexport interface IGridOptions extends IGridViewOptions { }\n\n/**\n * The {@link Grid} exposes a Grid widget in a friendlier API than the underlying\n * {@link GridView} widget. Namely, all mutation operations are addressed by the\n * model elements, rather than indexes.\n *\n * It support the same features as the {@link GridView}.\n */\nexport class Grid<T extends IView = IView> extends Disposable {\n\n\tprotected gridview: GridView;\n\tprivate views = new Map<T, HTMLElement>();\n\n\t/**\n\t * The orientation of the grid. Matches the orientation of the root\n\t * {@link SplitView} in the grid's {@link GridLocation} model.\n\t */\n\tget orientation(): Orientation { return this.gridview.orientation; }\n\tset orientation(orientation: Orientation) { this.gridview.orientation = orientation; }\n\n\t/**\n\t * The width of the grid.\n\t */\n\tget width(): number { return this.gridview.width; }\n\n\t/**\n\t * The height of the grid.\n\t */\n\tget height(): number { return this.gridview.height; }\n\n\t/**\n\t * The minimum width of the grid.\n\t */\n\tget minimumWidth(): number { return this.gridview.minimumWidth; }\n\n\t/**\n\t * The minimum height of the grid.\n\t */\n\tget minimumHeight(): number { return this.gridview.minimumHeight; }\n\n\t/**\n\t * The maximum width of the grid.\n\t */\n\tget maximumWidth(): number { return this.gridview.maximumWidth; }\n\n\t/**\n\t * The maximum height of the grid.\n\t */\n\tget maximumHeight(): number { return this.gridview.maximumHeight; }\n\n\t/**\n\t * Fires whenever a view within the grid changes its size constraints.\n\t */\n\treadonly onDidChange: Event<{ width: number; height: number } | undefined>;\n\n\t/**\n\t * Fires whenever the user scrolls a {@link SplitView} within\n\t * the grid.\n\t */\n\treadonly onDidScroll: Event<void>;\n\n\t/**\n\t * A collection of sashes perpendicular to each edge of the grid.\n\t * Corner sashes will be created for each intersection.\n\t */\n\tget boundarySashes(): IBoundarySashes { return this.gridview.boundarySashes; }\n\tset boundarySashes(boundarySashes: IBoundarySashes) { this.gridview.boundarySashes = boundarySashes; }\n\n\t/**\n\t * Enable/disable edge snapping across all grid views.\n\t */\n\tset edgeSnapping(edgeSnapping: boolean) { this.gridview.edgeSnapping = edgeSnapping; }\n\n\t/**\n\t * The DOM element for this view.\n\t */\n\tget element(): HTMLElement { return this.gridview.element; }\n\n\tprivate didLayout = false;\n\n\t/**\n\t * Create a new {@link Grid}. A grid must *always* have a view\n\t * inside.\n\t *\n\t * @param view An initial view for this Grid.\n\t */\n\tconstructor(view: T | GridView, options: IGridOptions = {}) {\n\t\tsuper();\n\n\t\tif (view instanceof GridView) {\n\t\t\tthis.gridview = view;\n\t\t\tthis.gridview.getViewMap(this.views);\n\t\t} else {\n\t\t\tthis.gridview = new GridView(options);\n\t\t}\n\n\t\tthis._register(this.gridview);\n\t\tthis._register(this.gridview.onDidSashReset(this.onDidSashReset, this));\n\n\t\tif (!(view instanceof GridView)) {\n\t\t\tthis._addView(view, 0, [0]);\n\t\t}\n\n\t\tthis.onDidChange = this.gridview.onDidChange;\n\t\tthis.onDidScroll = this.gridview.onDidScroll;\n\t}\n\n\tstyle(styles: IGridStyles): void {\n\t\tthis.gridview.style(styles);\n\t}\n\n\t/**\n\t * Layout the {@link Grid}.\n\t *\n\t * Optionally provide a `top` and `left` positions, those will propagate\n\t * as an origin for positions passed to {@link IView.layout}.\n\t *\n\t * @param width The width of the {@link Grid}.\n\t * @param height The height of the {@link Grid}.\n\t * @param top Optional, the top location of the {@link Grid}.\n\t * @param left Optional, the left location of the {@link Grid}.\n\t */\n\tlayout(width: number, height: number, top: number = 0, left: number = 0): void {\n\t\tthis.gridview.layout(width, height, top, left);\n\t\tthis.didLayout = true;\n\t}\n\n\t/**\n\t * Add a {@link IView view} to this {@link Grid}, based on another reference view.\n\t *\n\t * Take this grid as an example:\n\t *\n\t * ```\n\t *  +-----+---------------+\n\t *  |  A  |      B        |\n\t *  +-----+---------+-----+\n\t *  |        C      |     |\n\t *  +---------------+  D  |\n\t *  |        E      |     |\n\t *  +---------------+-----+\n\t * ```\n\t *\n\t * Calling `addView(X, Sizing.Distribute, C, Direction.Right)` will make the following\n\t * changes:\n\t *\n\t * ```\n\t *  +-----+---------------+\n\t *  |  A  |      B        |\n\t *  +-----+-+-------+-----+\n\t *  |   C   |   X   |     |\n\t *  +-------+-------+  D  |\n\t *  |        E      |     |\n\t *  +---------------+-----+\n\t * ```\n\t *\n\t * Or `addView(X, Sizing.Distribute, D, Direction.Down)`:\n\t *\n\t * ```\n\t *  +-----+---------------+\n\t *  |  A  |      B        |\n\t *  +-----+---------+-----+\n\t *  |        C      |  D  |\n\t *  +---------------+-----+\n\t *  |        E      |  X  |\n\t *  +---------------+-----+\n\t * ```\n\t *\n\t * @param newView The view to add.\n\t * @param size Either a fixed size, or a dynamic {@link Sizing} strategy.\n\t * @param referenceView Another view to place this new view next to.\n\t * @param direction The direction the new view should be placed next to the reference view.\n\t */\n\taddView(newView: T, size: number | Sizing, referenceView: T, direction: Direction): void {\n\t\tif (this.views.has(newView)) {\n\t\t\tthrow new Error('Can\\'t add same view twice');\n\t\t}\n\n\t\tconst orientation = getDirectionOrientation(direction);\n\n\t\tif (this.views.size === 1 && this.orientation !== orientation) {\n\t\t\tthis.orientation = orientation;\n\t\t}\n\n\t\tconst referenceLocation = this.getViewLocation(referenceView);\n\t\tconst location = getRelativeLocation(this.gridview.orientation, referenceLocation, direction);\n\n\t\tlet viewSize: number | GridViewSizing;\n\n\t\tif (typeof size === 'number') {\n\t\t\tviewSize = size;\n\t\t} else if (size.type === 'split') {\n\t\t\tconst [, index] = tail(referenceLocation);\n\t\t\tviewSize = GridViewSizing.Split(index);\n\t\t} else if (size.type === 'distribute') {\n\t\t\tviewSize = GridViewSizing.Distribute;\n\t\t} else if (size.type === 'auto') {\n\t\t\tconst [, index] = tail(referenceLocation);\n\t\t\tviewSize = GridViewSizing.Auto(index);\n\t\t} else {\n\t\t\tviewSize = size;\n\t\t}\n\n\t\tthis._addView(newView, viewSize, location);\n\t}\n\n\tprivate addViewAt(newView: T, size: number | DistributeSizing | InvisibleSizing, location: GridLocation): void {\n\t\tif (this.views.has(newView)) {\n\t\t\tthrow new Error('Can\\'t add same view twice');\n\t\t}\n\n\t\tlet viewSize: number | GridViewSizing;\n\n\t\tif (typeof size === 'number') {\n\t\t\tviewSize = size;\n\t\t} else if (size.type === 'distribute') {\n\t\t\tviewSize = GridViewSizing.Distribute;\n\t\t} else {\n\t\t\tviewSize = size;\n\t\t}\n\n\t\tthis._addView(newView, viewSize, location);\n\t}\n\n\tprotected _addView(newView: T, size: number | GridViewSizing, location: GridLocation): void {\n\t\tthis.views.set(newView, newView.element);\n\t\tthis.gridview.addView(newView, size, location);\n\t}\n\n\t/**\n\t * Remove a {@link IView view} from this {@link Grid}.\n\t *\n\t * @param view The {@link IView view} to remove.\n\t * @param sizing Whether to distribute other {@link IView view}'s sizes.\n\t */\n\tremoveView(view: T, sizing?: Sizing): void {\n\t\tif (this.views.size === 1) {\n\t\t\tthrow new Error('Can\\'t remove last view');\n\t\t}\n\n\t\tconst location = this.getViewLocation(view);\n\n\t\tlet gridViewSizing: DistributeSizing | SplitViewAutoSizing | undefined;\n\n\t\tif (sizing?.type === 'distribute') {\n\t\t\tgridViewSizing = GridViewSizing.Distribute;\n\t\t} else if (sizing?.type === 'auto') {\n\t\t\tconst index = location[location.length - 1];\n\t\t\tgridViewSizing = GridViewSizing.Auto(index === 0 ? 1 : index - 1);\n\t\t}\n\n\t\tthis.gridview.removeView(location, gridViewSizing);\n\t\tthis.views.delete(view);\n\t}\n\n\t/**\n\t * Move a {@link IView view} to another location in the grid.\n\t *\n\t * @remarks See {@link Grid.addView}.\n\t *\n\t * @param view The {@link IView view} to move.\n\t * @param sizing Either a fixed size, or a dynamic {@link Sizing} strategy.\n\t * @param referenceView Another view to place the view next to.\n\t * @param direction The direction the view should be placed next to the reference view.\n\t */\n\tmoveView(view: T, sizing: number | Sizing, referenceView: T, direction: Direction): void {\n\t\tconst sourceLocation = this.getViewLocation(view);\n\t\tconst [sourceParentLocation, from] = tail(sourceLocation);\n\n\t\tconst referenceLocation = this.getViewLocation(referenceView);\n\t\tconst targetLocation = getRelativeLocation(this.gridview.orientation, referenceLocation, direction);\n\t\tconst [targetParentLocation, to] = tail(targetLocation);\n\n\t\tif (equals(sourceParentLocation, targetParentLocation)) {\n\t\t\tthis.gridview.moveView(sourceParentLocation, from, to);\n\t\t} else {\n\t\t\tthis.removeView(view, typeof sizing === 'number' ? undefined : sizing);\n\t\t\tthis.addView(view, sizing, referenceView, direction);\n\t\t}\n\t}\n\n\t/**\n\t * Move a {@link IView view} to another location in the grid.\n\t *\n\t * @remarks Internal method, do not use without knowing what you're doing.\n\t * @remarks See {@link GridView.moveView}.\n\t *\n\t * @param view The {@link IView view} to move.\n\t * @param location The {@link GridLocation location} to insert the view on.\n\t */\n\tmoveViewTo(view: T, location: GridLocation): void {\n\t\tconst sourceLocation = this.getViewLocation(view);\n\t\tconst [sourceParentLocation, from] = tail(sourceLocation);\n\t\tconst [targetParentLocation, to] = tail(location);\n\n\t\tif (equals(sourceParentLocation, targetParentLocation)) {\n\t\t\tthis.gridview.moveView(sourceParentLocation, from, to);\n\t\t} else {\n\t\t\tconst size = this.getViewSize(view);\n\t\t\tconst orientation = getLocationOrientation(this.gridview.orientation, sourceLocation);\n\t\t\tconst cachedViewSize = this.getViewCachedVisibleSize(view);\n\t\t\tconst sizing = typeof cachedViewSize === 'undefined'\n\t\t\t\t? (orientation === Orientation.HORIZONTAL ? size.width : size.height)\n\t\t\t\t: Sizing.Invisible(cachedViewSize);\n\n\t\t\tthis.removeView(view);\n\t\t\tthis.addViewAt(view, sizing, location);\n\t\t}\n\t}\n\n\t/**\n\t * Swap two {@link IView views} within the {@link Grid}.\n\t *\n\t * @param from One {@link IView view}.\n\t * @param to Another {@link IView view}.\n\t */\n\tswapViews(from: T, to: T): void {\n\t\tconst fromLocation = this.getViewLocation(from);\n\t\tconst toLocation = this.getViewLocation(to);\n\t\treturn this.gridview.swapViews(fromLocation, toLocation);\n\t}\n\n\t/**\n\t * Resize a {@link IView view}.\n\t *\n\t * @param view The {@link IView view} to resize.\n\t * @param size The size the view should be.\n\t */\n\tresizeView(view: T, size: IViewSize): void {\n\t\tconst location = this.getViewLocation(view);\n\t\treturn this.gridview.resizeView(location, size);\n\t}\n\n\t/**\n\t * Returns whether all other {@link IView views} are at their minimum size.\n\t *\n\t * @param view The reference {@link IView view}.\n\t */\n\tisViewSizeMaximized(view: T): boolean {\n\t\tconst location = this.getViewLocation(view);\n\t\treturn this.gridview.isViewSizeMaximized(location);\n\t}\n\n\t/**\n\t * Get the size of a {@link IView view}.\n\t *\n\t * @param view The {@link IView view}. Provide `undefined` to get the size\n\t * of the grid itself.\n\t */\n\tgetViewSize(view?: T): IViewSize {\n\t\tif (!view) {\n\t\t\treturn this.gridview.getViewSize();\n\t\t}\n\n\t\tconst location = this.getViewLocation(view);\n\t\treturn this.gridview.getViewSize(location);\n\t}\n\n\t/**\n\t * Get the cached visible size of a {@link IView view}. This was the size\n\t * of the view at the moment it last became hidden.\n\t *\n\t * @param view The {@link IView view}.\n\t */\n\tgetViewCachedVisibleSize(view: T): number | undefined {\n\t\tconst location = this.getViewLocation(view);\n\t\treturn this.gridview.getViewCachedVisibleSize(location);\n\t}\n\n\t/**\n\t * Maximize the size of a {@link IView view} by collapsing all other views\n\t * to their minimum sizes.\n\t *\n\t * @param view The {@link IView view}.\n\t */\n\tmaximizeViewSize(view: T): void {\n\t\tconst location = this.getViewLocation(view);\n\t\tthis.gridview.maximizeViewSize(location);\n\t}\n\n\t/**\n\t * Distribute the size among all {@link IView views} within the entire\n\t * grid or within a single {@link SplitView}.\n\t */\n\tdistributeViewSizes(): void {\n\t\tthis.gridview.distributeViewSizes();\n\t}\n\n\t/**\n\t * Returns whether a {@link IView view} is visible.\n\t *\n\t * @param view The {@link IView view}.\n\t */\n\tisViewVisible(view: T): boolean {\n\t\tconst location = this.getViewLocation(view);\n\t\treturn this.gridview.isViewVisible(location);\n\t}\n\n\t/**\n\t * Set the visibility state of a {@link IView view}.\n\t *\n\t * @param view The {@link IView view}.\n\t */\n\tsetViewVisible(view: T, visible: boolean): void {\n\t\tconst location = this.getViewLocation(view);\n\t\tthis.gridview.setViewVisible(location, visible);\n\t}\n\n\t/**\n\t * Returns a descriptor for the entire grid.\n\t */\n\tgetViews(): GridBranchNode<T> {\n\t\treturn this.gridview.getView() as GridBranchNode<T>;\n\t}\n\n\t/**\n\t * Utility method to return the collection all views which intersect\n\t * a view's edge.\n\t *\n\t * @param view The {@link IView view}.\n\t * @param direction Which direction edge to be considered.\n\t * @param wrap Whether the grid wraps around (from right to left, from bottom to top).\n\t */\n\tgetNeighborViews(view: T, direction: Direction, wrap: boolean = false): T[] {\n\t\tif (!this.didLayout) {\n\t\t\tthrow new Error('Can\\'t call getNeighborViews before first layout');\n\t\t}\n\n\t\tconst location = this.getViewLocation(view);\n\t\tconst root = this.getViews();\n\t\tconst node = getGridNode(root, location);\n\t\tlet boundary = getBoxBoundary(node.box, direction);\n\n\t\tif (wrap) {\n\t\t\tif (direction === Direction.Up && node.box.top === 0) {\n\t\t\t\tboundary = { offset: root.box.top + root.box.height, range: boundary.range };\n\t\t\t} else if (direction === Direction.Right && node.box.left + node.box.width === root.box.width) {\n\t\t\t\tboundary = { offset: 0, range: boundary.range };\n\t\t\t} else if (direction === Direction.Down && node.box.top + node.box.height === root.box.height) {\n\t\t\t\tboundary = { offset: 0, range: boundary.range };\n\t\t\t} else if (direction === Direction.Left && node.box.left === 0) {\n\t\t\t\tboundary = { offset: root.box.left + root.box.width, range: boundary.range };\n\t\t\t}\n\t\t}\n\n\t\treturn findAdjacentBoxLeafNodes(root, oppositeDirection(direction), boundary)\n\t\t\t.map(node => node.view);\n\t}\n\n\tprivate getViewLocation(view: T): GridLocation {\n\t\tconst element = this.views.get(view);\n\n\t\tif (!element) {\n\t\t\tthrow new Error('View not found');\n\t\t}\n\n\t\treturn getGridLocation(element);\n\t}\n\n\tprivate onDidSashReset(location: GridLocation): void {\n\t\tconst resizeToPreferredSize = (location: GridLocation): boolean => {\n\t\t\tconst node = this.gridview.getView(location) as GridNode<T>;\n\n\t\t\tif (isGridBranchNode(node)) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst direction = getLocationOrientation(this.orientation, location);\n\t\t\tconst size = direction === Orientation.HORIZONTAL ? node.view.preferredWidth : node.view.preferredHeight;\n\n\t\t\tif (typeof size !== 'number') {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tconst viewSize = direction === Orientation.HORIZONTAL ? { width: Math.round(size) } : { height: Math.round(size) };\n\t\t\tthis.gridview.resizeView(location, viewSize);\n\t\t\treturn true;\n\t\t};\n\n\t\tif (resizeToPreferredSize(location)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [parentLocation, index] = tail(location);\n\n\t\tif (resizeToPreferredSize([...parentLocation, index + 1])) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.gridview.distributeViewSizes(parentLocation);\n\t}\n}\n\nexport interface ISerializableView extends IView {\n\ttoJSON(): object;\n}\n\nexport interface IViewDeserializer<T extends ISerializableView> {\n\tfromJSON(json: any): T;\n}\n\nexport interface ISerializedLeafNode {\n\ttype: 'leaf';\n\tdata: any;\n\tsize: number;\n\tvisible?: boolean;\n}\n\nexport interface ISerializedBranchNode {\n\ttype: 'branch';\n\tdata: ISerializedNode[];\n\tsize: number;\n}\n\nexport type ISerializedNode = ISerializedLeafNode | ISerializedBranchNode;\n\nexport interface ISerializedGrid {\n\troot: ISerializedNode;\n\torientation: Orientation;\n\twidth: number;\n\theight: number;\n}\n\n/**\n * A {@link Grid} which can serialize itself.\n */\nexport class SerializableGrid<T extends ISerializableView> extends Grid<T> {\n\n\tprivate static serializeNode<T extends ISerializableView>(node: GridNode<T>, orientation: Orientation): ISerializedNode {\n\t\tconst size = orientation === Orientation.VERTICAL ? node.box.width : node.box.height;\n\n\t\tif (!isGridBranchNode(node)) {\n\t\t\tif (typeof node.cachedVisibleSize === 'number') {\n\t\t\t\treturn { type: 'leaf', data: node.view.toJSON(), size: node.cachedVisibleSize, visible: false };\n\t\t\t}\n\n\t\t\treturn { type: 'leaf', data: node.view.toJSON(), size };\n\t\t}\n\n\t\treturn { type: 'branch', data: node.children.map(c => SerializableGrid.serializeNode(c, orthogonal(orientation))), size };\n\t}\n\n\t/**\n\t * Construct a new {@link SerializableGrid} from a JSON object.\n\t *\n\t * @param json The JSON object.\n\t * @param deserializer A deserializer which can revive each view.\n\t * @returns A new {@link SerializableGrid} instance.\n\t */\n\tstatic deserialize<T extends ISerializableView>(json: ISerializedGrid, deserializer: IViewDeserializer<T>, options: IGridOptions = {}): SerializableGrid<T> {\n\t\tif (typeof json.orientation !== 'number') {\n\t\t\tthrow new Error('Invalid JSON: \\'orientation\\' property must be a number.');\n\t\t} else if (typeof json.width !== 'number') {\n\t\t\tthrow new Error('Invalid JSON: \\'width\\' property must be a number.');\n\t\t} else if (typeof json.height !== 'number') {\n\t\t\tthrow new Error('Invalid JSON: \\'height\\' property must be a number.');\n\t\t}\n\n\t\tconst gridview = GridView.deserialize(json, deserializer, options);\n\t\tconst result = new SerializableGrid<T>(gridview, options);\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * Construct a new {@link SerializableGrid} from a grid descriptor.\n\t *\n\t * @param gridDescriptor A grid descriptor in which leaf nodes point to actual views.\n\t * @returns A new {@link SerializableGrid} instance.\n\t */\n\tstatic from<T extends ISerializableView>(gridDescriptor: GridDescriptor<T>, options: IGridOptions = {}): SerializableGrid<T> {\n\t\treturn SerializableGrid.deserialize(createSerializedGrid(gridDescriptor), { fromJSON: view => view }, options);\n\t}\n\n\t/**\n\t * Useful information in order to proportionally restore view sizes\n\t * upon the very first layout call.\n\t */\n\tprivate initialLayoutContext: boolean = true;\n\n\t/**\n\t * Serialize this grid into a JSON object.\n\t */\n\tserialize(): ISerializedGrid {\n\t\treturn {\n\t\t\troot: SerializableGrid.serializeNode(this.getViews(), this.orientation),\n\t\t\torientation: this.orientation,\n\t\t\twidth: this.width,\n\t\t\theight: this.height\n\t\t};\n\t}\n\n\toverride layout(width: number, height: number, top: number = 0, left: number = 0): void {\n\t\tsuper.layout(width, height, top, left);\n\n\t\tif (this.initialLayoutContext) {\n\t\t\tthis.initialLayoutContext = false;\n\t\t\tthis.gridview.trySet2x2();\n\t\t}\n\t}\n}\n\nexport type GridLeafNodeDescriptor<T> = { size?: number; data?: any };\nexport type GridBranchNodeDescriptor<T> = { size?: number; groups: GridNodeDescriptor<T>[] };\nexport type GridNodeDescriptor<T> = GridBranchNodeDescriptor<T> | GridLeafNodeDescriptor<T>;\nexport type GridDescriptor<T> = { orientation: Orientation } & GridBranchNodeDescriptor<T>;\n\nfunction isGridBranchNodeDescriptor<T>(nodeDescriptor: GridNodeDescriptor<T>): nodeDescriptor is GridBranchNodeDescriptor<T> {\n\treturn !!(nodeDescriptor as GridBranchNodeDescriptor<T>).groups;\n}\n\nexport function sanitizeGridNodeDescriptor<T>(nodeDescriptor: GridNodeDescriptor<T>, rootNode: boolean): void {\n\tif (!rootNode && (nodeDescriptor as any).groups && (nodeDescriptor as any).groups.length <= 1) {\n\t\t(nodeDescriptor as any).groups = undefined;\n\t}\n\n\tif (!isGridBranchNodeDescriptor(nodeDescriptor)) {\n\t\treturn;\n\t}\n\n\tlet totalDefinedSize = 0;\n\tlet totalDefinedSizeCount = 0;\n\n\tfor (const child of nodeDescriptor.groups) {\n\t\tsanitizeGridNodeDescriptor(child, false);\n\n\t\tif (child.size) {\n\t\t\ttotalDefinedSize += child.size;\n\t\t\ttotalDefinedSizeCount++;\n\t\t}\n\t}\n\n\tconst totalUndefinedSize = totalDefinedSizeCount > 0 ? totalDefinedSize : 1;\n\tconst totalUndefinedSizeCount = nodeDescriptor.groups.length - totalDefinedSizeCount;\n\tconst eachUndefinedSize = totalUndefinedSize / totalUndefinedSizeCount;\n\n\tfor (const child of nodeDescriptor.groups) {\n\t\tif (!child.size) {\n\t\t\tchild.size = eachUndefinedSize;\n\t\t}\n\t}\n}\n\nfunction createSerializedNode<T>(nodeDescriptor: GridNodeDescriptor<T>): ISerializedNode {\n\tif (isGridBranchNodeDescriptor(nodeDescriptor)) {\n\t\treturn { type: 'branch', data: nodeDescriptor.groups.map(c => createSerializedNode(c)), size: nodeDescriptor.size! };\n\t} else {\n\t\treturn { type: 'leaf', data: nodeDescriptor.data, size: nodeDescriptor.size! };\n\t}\n}\n\nfunction getDimensions(node: ISerializedNode, orientation: Orientation): { width?: number; height?: number } {\n\tif (node.type === 'branch') {\n\t\tconst childrenDimensions = node.data.map(c => getDimensions(c, orthogonal(orientation)));\n\n\t\tif (orientation === Orientation.VERTICAL) {\n\t\t\tconst width = node.size || (childrenDimensions.length === 0 ? undefined : Math.max(...childrenDimensions.map(d => d.width || 0)));\n\t\t\tconst height = childrenDimensions.length === 0 ? undefined : childrenDimensions.reduce((r, d) => r + (d.height || 0), 0);\n\t\t\treturn { width, height };\n\t\t} else {\n\t\t\tconst width = childrenDimensions.length === 0 ? undefined : childrenDimensions.reduce((r, d) => r + (d.width || 0), 0);\n\t\t\tconst height = node.size || (childrenDimensions.length === 0 ? undefined : Math.max(...childrenDimensions.map(d => d.height || 0)));\n\t\t\treturn { width, height };\n\t\t}\n\t} else {\n\t\tconst width = orientation === Orientation.VERTICAL ? node.size : undefined;\n\t\tconst height = orientation === Orientation.VERTICAL ? undefined : node.size;\n\t\treturn { width, height };\n\t}\n}\n\n/**\n * Creates a new JSON object from a {@link GridDescriptor}, which can\n * be deserialized by {@link SerializableGrid.deserialize}.\n */\nexport function createSerializedGrid<T>(gridDescriptor: GridDescriptor<T>): ISerializedGrid {\n\tsanitizeGridNodeDescriptor(gridDescriptor, true);\n\n\tconst root = createSerializedNode(gridDescriptor);\n\tconst { width, height } = getDimensions(root, gridDescriptor.orientation);\n\n\treturn {\n\t\troot,\n\t\torientation: gridDescriptor.orientation,\n\t\twidth: width || 1,\n\t\theight: height || 1\n\t};\n}\n"]}