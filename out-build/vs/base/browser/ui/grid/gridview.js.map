{"version":3,"sources":["file:///workspace/appflow/src/vs/base/browser/ui/grid/gridview.ts"],"names":[],"mappings":"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","file":"gridview.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { $ } from 'vs/base/browser/dom';\nimport { IBoundarySashes, Orientation, Sash } from 'vs/base/browser/ui/sash/sash';\nimport { DistributeSizing, ISplitViewStyles, IView as ISplitView, LayoutPriority, Sizing, AutoSizing, SplitView } from 'vs/base/browser/ui/splitview/splitview';\nimport { equals as arrayEquals, tail2 as tail } from 'vs/base/common/arrays';\nimport { Color } from 'vs/base/common/color';\nimport { Emitter, Event, Relay } from 'vs/base/common/event';\nimport { Disposable, DisposableStore, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { rot } from 'vs/base/common/numbers';\nimport { isUndefined } from 'vs/base/common/types';\nimport 'vs/css!./gridview';\n\nexport { Orientation } from 'vs/base/browser/ui/sash/sash';\nexport { LayoutPriority, Sizing } from 'vs/base/browser/ui/splitview/splitview';\n\nexport interface IGridViewStyles extends ISplitViewStyles { }\n\nconst defaultStyles: IGridViewStyles = {\n\tseparatorBorder: Color.transparent\n};\n\nexport interface IViewSize {\n\treadonly width: number;\n\treadonly height: number;\n}\n\ninterface IRelativeBoundarySashes {\n\treadonly start?: Sash;\n\treadonly end?: Sash;\n\treadonly orthogonalStart?: Sash;\n\treadonly orthogonalEnd?: Sash;\n}\n\n/**\n * The interface to implement for views within a {@link GridView}.\n */\nexport interface IView {\n\n\t/**\n\t * The DOM element for this view.\n\t */\n\treadonly element: HTMLElement;\n\n\t/**\n\t * A minimum width for this view.\n\t *\n\t * @remarks If none, set it to `0`.\n\t */\n\treadonly minimumWidth: number;\n\n\t/**\n\t * A minimum width for this view.\n\t *\n\t * @remarks If none, set it to `Number.POSITIVE_INFINITY`.\n\t */\n\treadonly maximumWidth: number;\n\n\t/**\n\t * A minimum height for this view.\n\t *\n\t * @remarks If none, set it to `0`.\n\t */\n\treadonly minimumHeight: number;\n\n\t/**\n\t * A minimum height for this view.\n\t *\n\t * @remarks If none, set it to `Number.POSITIVE_INFINITY`.\n\t */\n\treadonly maximumHeight: number;\n\n\t/**\n\t * The priority of the view when the {@link GridView} layout algorithm\n\t * runs. Views with higher priority will be resized first.\n\t *\n\t * @remarks Only used when `proportionalLayout` is false.\n\t */\n\treadonly priority?: LayoutPriority;\n\n\t/**\n\t * If the {@link GridView} supports proportional layout,\n\t * this property allows for finer control over the proportional layout algorithm, per view.\n\t *\n\t * @defaultValue `true`\n\t */\n\treadonly proportionalLayout?: boolean;\n\n\t/**\n\t * Whether the view will snap whenever the user reaches its minimum size or\n\t * attempts to grow it beyond the minimum size.\n\t *\n\t * @defaultValue `false`\n\t */\n\treadonly snap?: boolean;\n\n\t/**\n\t * View instances are supposed to fire this event whenever any of the constraint\n\t * properties have changed:\n\t *\n\t * - {@link IView.minimumWidth}\n\t * - {@link IView.maximumWidth}\n\t * - {@link IView.minimumHeight}\n\t * - {@link IView.maximumHeight}\n\t * - {@link IView.priority}\n\t * - {@link IView.snap}\n\t *\n\t * The {@link GridView} will relayout whenever that happens. The event can\n\t * optionally emit the view's preferred size for that relayout.\n\t */\n\treadonly onDidChange: Event<IViewSize | undefined>;\n\n\t/**\n\t * This will be called by the {@link GridView} during layout. A view meant to\n\t * pass along the layout information down to its descendants.\n\t */\n\tlayout(width: number, height: number, top: number, left: number): void;\n\n\t/**\n\t * This will be called by the {@link GridView} whenever this view is made\n\t * visible or hidden.\n\t *\n\t * @param visible Whether the view becomes visible.\n\t */\n\tsetVisible?(visible: boolean): void;\n\n\t/**\n\t * This will be called by the {@link GridView} whenever this view is on\n\t * an edge of the grid and the grid's\n\t * {@link GridView.boundarySashes boundary sashes} change.\n\t */\n\tsetBoundarySashes?(sashes: IBoundarySashes): void;\n}\n\nexport interface ISerializableView extends IView {\n\ttoJSON(): object;\n}\n\nexport interface IViewDeserializer<T extends ISerializableView> {\n\tfromJSON(json: any): T;\n}\n\nexport interface ISerializedLeafNode {\n\ttype: 'leaf';\n\tdata: any;\n\tsize: number;\n\tvisible?: boolean;\n}\n\nexport interface ISerializedBranchNode {\n\ttype: 'branch';\n\tdata: ISerializedNode[];\n\tsize: number;\n}\n\nexport type ISerializedNode = ISerializedLeafNode | ISerializedBranchNode;\n\nexport interface ISerializedGridView {\n\troot: ISerializedNode;\n\torientation: Orientation;\n\twidth: number;\n\theight: number;\n}\n\nexport function orthogonal(orientation: Orientation): Orientation {\n\treturn orientation === Orientation.VERTICAL ? Orientation.HORIZONTAL : Orientation.VERTICAL;\n}\n\nexport interface Box {\n\treadonly top: number;\n\treadonly left: number;\n\treadonly width: number;\n\treadonly height: number;\n}\n\nexport interface GridLeafNode {\n\treadonly view: IView;\n\treadonly box: Box;\n\treadonly cachedVisibleSize: number | undefined;\n}\n\nexport interface GridBranchNode {\n\treadonly children: GridNode[];\n\treadonly box: Box;\n}\n\nexport type GridNode = GridLeafNode | GridBranchNode;\n\nexport function isGridBranchNode(node: GridNode): node is GridBranchNode {\n\treturn !!(node as any).children;\n}\n\nclass LayoutController {\n\tconstructor(public isLayoutEnabled: boolean) { }\n}\n\nexport interface IGridViewOptions {\n\n\t/**\n\t * Styles overriding the {@link defaultStyles default ones}.\n\t */\n\treadonly styles?: IGridViewStyles;\n\n\t/**\n\t * Resize each view proportionally when resizing the {@link GridView}.\n\t *\n\t * @defaultValue `true`\n\t */\n\treadonly proportionalLayout?: boolean; // default true\n}\n\ninterface ILayoutContext {\n\treadonly orthogonalSize: number;\n\treadonly absoluteOffset: number;\n\treadonly absoluteOrthogonalOffset: number;\n\treadonly absoluteSize: number;\n\treadonly absoluteOrthogonalSize: number;\n}\n\nfunction toAbsoluteBoundarySashes(sashes: IRelativeBoundarySashes, orientation: Orientation): IBoundarySashes {\n\tif (orientation === Orientation.HORIZONTAL) {\n\t\treturn { left: sashes.start, right: sashes.end, top: sashes.orthogonalStart, bottom: sashes.orthogonalEnd };\n\t} else {\n\t\treturn { top: sashes.start, bottom: sashes.end, left: sashes.orthogonalStart, right: sashes.orthogonalEnd };\n\t}\n}\n\nfunction fromAbsoluteBoundarySashes(sashes: IBoundarySashes, orientation: Orientation): IRelativeBoundarySashes {\n\tif (orientation === Orientation.HORIZONTAL) {\n\t\treturn { start: sashes.left, end: sashes.right, orthogonalStart: sashes.top, orthogonalEnd: sashes.bottom };\n\t} else {\n\t\treturn { start: sashes.top, end: sashes.bottom, orthogonalStart: sashes.left, orthogonalEnd: sashes.right };\n\t}\n}\n\nfunction validateIndex(index: number, numChildren: number): number {\n\tif (Math.abs(index) > numChildren) {\n\t\tthrow new Error('Invalid index');\n\t}\n\n\treturn rot(index, numChildren + 1);\n}\n\nclass BranchNode implements ISplitView<ILayoutContext>, IDisposable {\n\n\treadonly element: HTMLElement;\n\treadonly children: Node[] = [];\n\tprivate splitview: SplitView<ILayoutContext, Node>;\n\n\tprivate _size: number;\n\tget size(): number { return this._size; }\n\n\tprivate _orthogonalSize: number;\n\tget orthogonalSize(): number { return this._orthogonalSize; }\n\n\tprivate _absoluteOffset: number = 0;\n\tget absoluteOffset(): number { return this._absoluteOffset; }\n\n\tprivate _absoluteOrthogonalOffset: number = 0;\n\tget absoluteOrthogonalOffset(): number { return this._absoluteOrthogonalOffset; }\n\n\tprivate absoluteOrthogonalSize: number = 0;\n\n\tprivate _styles: IGridViewStyles;\n\tget styles(): IGridViewStyles { return this._styles; }\n\n\tget width(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.size : this.orthogonalSize;\n\t}\n\n\tget height(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.orthogonalSize : this.size;\n\t}\n\n\tget top(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this._absoluteOffset : this._absoluteOrthogonalOffset;\n\t}\n\n\tget left(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this._absoluteOrthogonalOffset : this._absoluteOffset;\n\t}\n\n\tget minimumSize(): number {\n\t\treturn this.children.length === 0 ? 0 : Math.max(...this.children.map(c => c.minimumOrthogonalSize));\n\t}\n\n\tget maximumSize(): number {\n\t\treturn Math.min(...this.children.map(c => c.maximumOrthogonalSize));\n\t}\n\n\tget priority(): LayoutPriority {\n\t\tif (this.children.length === 0) {\n\t\t\treturn LayoutPriority.Normal;\n\t\t}\n\n\t\tconst priorities = this.children.map(c => typeof c.priority === 'undefined' ? LayoutPriority.Normal : c.priority);\n\n\t\tif (priorities.some(p => p === LayoutPriority.High)) {\n\t\t\treturn LayoutPriority.High;\n\t\t} else if (priorities.some(p => p === LayoutPriority.Low)) {\n\t\t\treturn LayoutPriority.Low;\n\t\t}\n\n\t\treturn LayoutPriority.Normal;\n\t}\n\n\tget proportionalLayout(): boolean {\n\t\tif (this.children.length === 0) {\n\t\t\treturn true;\n\t\t}\n\n\t\treturn this.children.every(c => c.proportionalLayout);\n\t}\n\n\tget minimumOrthogonalSize(): number {\n\t\treturn this.splitview.minimumSize;\n\t}\n\n\tget maximumOrthogonalSize(): number {\n\t\treturn this.splitview.maximumSize;\n\t}\n\n\tget minimumWidth(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.minimumOrthogonalSize : this.minimumSize;\n\t}\n\n\tget minimumHeight(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.minimumSize : this.minimumOrthogonalSize;\n\t}\n\n\tget maximumWidth(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.maximumOrthogonalSize : this.maximumSize;\n\t}\n\n\tget maximumHeight(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.maximumSize : this.maximumOrthogonalSize;\n\t}\n\n\tprivate readonly _onDidChange = new Emitter<number | undefined>();\n\treadonly onDidChange: Event<number | undefined> = this._onDidChange.event;\n\n\tprivate _onDidScroll = new Emitter<void>();\n\tprivate onDidScrollDisposable: IDisposable = Disposable.None;\n\treadonly onDidScroll: Event<void> = this._onDidScroll.event;\n\n\tprivate childrenChangeDisposable: IDisposable = Disposable.None;\n\n\tprivate readonly _onDidSashReset = new Emitter<GridLocation>();\n\treadonly onDidSashReset: Event<GridLocation> = this._onDidSashReset.event;\n\tprivate splitviewSashResetDisposable: IDisposable = Disposable.None;\n\tprivate childrenSashResetDisposable: IDisposable = Disposable.None;\n\n\tprivate _boundarySashes: IRelativeBoundarySashes = {};\n\tget boundarySashes(): IRelativeBoundarySashes { return this._boundarySashes; }\n\tset boundarySashes(boundarySashes: IRelativeBoundarySashes) {\n\t\tif (this._boundarySashes.start === boundarySashes.start\n\t\t\t&& this._boundarySashes.end === boundarySashes.end\n\t\t\t&& this._boundarySashes.orthogonalStart === boundarySashes.orthogonalStart\n\t\t\t&& this._boundarySashes.orthogonalEnd === boundarySashes.orthogonalEnd) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._boundarySashes = boundarySashes;\n\n\t\tthis.splitview.orthogonalStartSash = boundarySashes.orthogonalStart;\n\t\tthis.splitview.orthogonalEndSash = boundarySashes.orthogonalEnd;\n\n\t\tfor (let index = 0; index < this.children.length; index++) {\n\t\t\tconst child = this.children[index];\n\t\t\tconst first = index === 0;\n\t\t\tconst last = index === this.children.length - 1;\n\n\t\t\tchild.boundarySashes = {\n\t\t\t\tstart: boundarySashes.orthogonalStart,\n\t\t\t\tend: boundarySashes.orthogonalEnd,\n\t\t\t\torthogonalStart: first ? boundarySashes.start : child.boundarySashes.orthogonalStart,\n\t\t\t\torthogonalEnd: last ? boundarySashes.end : child.boundarySashes.orthogonalEnd,\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate _edgeSnapping = false;\n\tget edgeSnapping(): boolean { return this._edgeSnapping; }\n\tset edgeSnapping(edgeSnapping: boolean) {\n\t\tif (this._edgeSnapping === edgeSnapping) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._edgeSnapping = edgeSnapping;\n\n\t\tfor (const child of this.children) {\n\t\t\tif (child instanceof BranchNode) {\n\t\t\t\tchild.edgeSnapping = edgeSnapping;\n\t\t\t}\n\t\t}\n\n\t\tthis.updateSplitviewEdgeSnappingEnablement();\n\t}\n\n\tconstructor(\n\t\treadonly orientation: Orientation,\n\t\treadonly layoutController: LayoutController,\n\t\tstyles: IGridViewStyles,\n\t\treadonly splitviewProportionalLayout: boolean,\n\t\tsize: number = 0,\n\t\torthogonalSize: number = 0,\n\t\tedgeSnapping: boolean = false,\n\t\tchildDescriptors?: INodeDescriptor[]\n\t) {\n\t\tthis._styles = styles;\n\t\tthis._size = size;\n\t\tthis._orthogonalSize = orthogonalSize;\n\n\t\tthis.element = $('.monaco-grid-branch-node');\n\n\t\tif (!childDescriptors) {\n\t\t\t// Normal behavior, we have no children yet, just set up the splitview\n\t\t\tthis.splitview = new SplitView(this.element, { orientation, styles, proportionalLayout: splitviewProportionalLayout });\n\t\t\tthis.splitview.layout(size, { orthogonalSize, absoluteOffset: 0, absoluteOrthogonalOffset: 0, absoluteSize: size, absoluteOrthogonalSize: orthogonalSize });\n\t\t} else {\n\t\t\t// Reconstruction behavior, we want to reconstruct a splitview\n\t\t\tconst descriptor = {\n\t\t\t\tviews: childDescriptors.map(childDescriptor => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tview: childDescriptor.node,\n\t\t\t\t\t\tsize: childDescriptor.node.size,\n\t\t\t\t\t\tvisible: childDescriptor.node instanceof LeafNode && childDescriptor.visible !== undefined ? childDescriptor.visible : true\n\t\t\t\t\t};\n\t\t\t\t}),\n\t\t\t\tsize: this.orthogonalSize\n\t\t\t};\n\n\t\t\tconst options = { proportionalLayout: splitviewProportionalLayout, orientation, styles };\n\n\t\t\tthis.children = childDescriptors.map(c => c.node);\n\t\t\tthis.splitview = new SplitView(this.element, { ...options, descriptor });\n\n\t\t\tthis.children.forEach((node, index) => {\n\t\t\t\tconst first = index === 0;\n\t\t\t\tconst last = index === this.children.length;\n\n\t\t\t\tnode.boundarySashes = {\n\t\t\t\t\tstart: this.boundarySashes.orthogonalStart,\n\t\t\t\t\tend: this.boundarySashes.orthogonalEnd,\n\t\t\t\t\torthogonalStart: first ? this.boundarySashes.start : this.splitview.sashes[index - 1],\n\t\t\t\t\torthogonalEnd: last ? this.boundarySashes.end : this.splitview.sashes[index],\n\t\t\t\t};\n\t\t\t});\n\t\t}\n\n\t\tconst onDidSashReset = Event.map(this.splitview.onDidSashReset, i => [i]);\n\t\tthis.splitviewSashResetDisposable = onDidSashReset(this._onDidSashReset.fire, this._onDidSashReset);\n\n\t\tthis.updateChildrenEvents();\n\t}\n\n\tstyle(styles: IGridViewStyles): void {\n\t\tthis._styles = styles;\n\t\tthis.splitview.style(styles);\n\n\t\tfor (const child of this.children) {\n\t\t\tif (child instanceof BranchNode) {\n\t\t\t\tchild.style(styles);\n\t\t\t}\n\t\t}\n\t}\n\n\tlayout(size: number, offset: number, ctx: ILayoutContext | undefined): void {\n\t\tif (!this.layoutController.isLayoutEnabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (typeof ctx === 'undefined') {\n\t\t\tthrow new Error('Invalid state');\n\t\t}\n\n\t\t// branch nodes should flip the normal/orthogonal directions\n\t\tthis._size = ctx.orthogonalSize;\n\t\tthis._orthogonalSize = size;\n\t\tthis._absoluteOffset = ctx.absoluteOffset + offset;\n\t\tthis._absoluteOrthogonalOffset = ctx.absoluteOrthogonalOffset;\n\t\tthis.absoluteOrthogonalSize = ctx.absoluteOrthogonalSize;\n\n\t\tthis.splitview.layout(ctx.orthogonalSize, {\n\t\t\torthogonalSize: size,\n\t\t\tabsoluteOffset: this._absoluteOrthogonalOffset,\n\t\t\tabsoluteOrthogonalOffset: this._absoluteOffset,\n\t\t\tabsoluteSize: ctx.absoluteOrthogonalSize,\n\t\t\tabsoluteOrthogonalSize: ctx.absoluteSize\n\t\t});\n\n\t\tthis.updateSplitviewEdgeSnappingEnablement();\n\t}\n\n\tsetVisible(visible: boolean): void {\n\t\tfor (const child of this.children) {\n\t\t\tchild.setVisible(visible);\n\t\t}\n\t}\n\n\taddChild(node: Node, size: number | Sizing, index: number, skipLayout?: boolean): void {\n\t\tindex = validateIndex(index, this.children.length);\n\n\t\tthis.splitview.addView(node, size, index, skipLayout);\n\t\tthis.children.splice(index, 0, node);\n\n\t\tthis.updateBoundarySashes();\n\t\tthis.onDidChildrenChange();\n\t}\n\n\tremoveChild(index: number, sizing?: Sizing): Node {\n\t\tindex = validateIndex(index, this.children.length);\n\n\t\tconst result = this.splitview.removeView(index, sizing);\n\t\tthis.children.splice(index, 1);\n\n\t\tthis.updateBoundarySashes();\n\t\tthis.onDidChildrenChange();\n\n\t\treturn result;\n\t}\n\n\tremoveAllChildren(): Node[] {\n\t\tconst result = this.splitview.removeAllViews();\n\n\t\tthis.children.splice(0, this.children.length);\n\n\t\tthis.updateBoundarySashes();\n\t\tthis.onDidChildrenChange();\n\n\t\treturn result;\n\t}\n\n\tmoveChild(from: number, to: number): void {\n\t\tfrom = validateIndex(from, this.children.length);\n\t\tto = validateIndex(to, this.children.length);\n\n\t\tif (from === to) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (from < to) {\n\t\t\tto -= 1;\n\t\t}\n\n\t\tthis.splitview.moveView(from, to);\n\t\tthis.children.splice(to, 0, this.children.splice(from, 1)[0]);\n\n\t\tthis.updateBoundarySashes();\n\t\tthis.onDidChildrenChange();\n\t}\n\n\tswapChildren(from: number, to: number): void {\n\t\tfrom = validateIndex(from, this.children.length);\n\t\tto = validateIndex(to, this.children.length);\n\n\t\tif (from === to) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.splitview.swapViews(from, to);\n\n\t\t// swap boundary sashes\n\t\t[this.children[from].boundarySashes, this.children[to].boundarySashes]\n\t\t\t= [this.children[from].boundarySashes, this.children[to].boundarySashes];\n\n\t\t// swap children\n\t\t[this.children[from], this.children[to]] = [this.children[to], this.children[from]];\n\n\t\tthis.onDidChildrenChange();\n\t}\n\n\tresizeChild(index: number, size: number): void {\n\t\tindex = validateIndex(index, this.children.length);\n\n\t\tthis.splitview.resizeView(index, size);\n\t}\n\n\tisChildSizeMaximized(index: number): boolean {\n\t\treturn this.splitview.isViewSizeMaximized(index);\n\t}\n\n\tdistributeViewSizes(recursive = false): void {\n\t\tthis.splitview.distributeViewSizes();\n\n\t\tif (recursive) {\n\t\t\tfor (const child of this.children) {\n\t\t\t\tif (child instanceof BranchNode) {\n\t\t\t\t\tchild.distributeViewSizes(true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tgetChildSize(index: number): number {\n\t\tindex = validateIndex(index, this.children.length);\n\n\t\treturn this.splitview.getViewSize(index);\n\t}\n\n\tisChildVisible(index: number): boolean {\n\t\tindex = validateIndex(index, this.children.length);\n\n\t\treturn this.splitview.isViewVisible(index);\n\t}\n\n\tsetChildVisible(index: number, visible: boolean): void {\n\t\tindex = validateIndex(index, this.children.length);\n\n\t\tif (this.splitview.isViewVisible(index) === visible) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.splitview.setViewVisible(index, visible);\n\t}\n\n\tgetChildCachedVisibleSize(index: number): number | undefined {\n\t\tindex = validateIndex(index, this.children.length);\n\n\t\treturn this.splitview.getViewCachedVisibleSize(index);\n\t}\n\n\tprivate updateBoundarySashes(): void {\n\t\tfor (let i = 0; i < this.children.length; i++) {\n\t\t\tthis.children[i].boundarySashes = {\n\t\t\t\tstart: this.boundarySashes.orthogonalStart,\n\t\t\t\tend: this.boundarySashes.orthogonalEnd,\n\t\t\t\torthogonalStart: i === 0 ? this.boundarySashes.start : this.splitview.sashes[i - 1],\n\t\t\t\torthogonalEnd: i === this.children.length - 1 ? this.boundarySashes.end : this.splitview.sashes[i],\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate onDidChildrenChange(): void {\n\t\tthis.updateChildrenEvents();\n\t\tthis._onDidChange.fire(undefined);\n\t}\n\n\tprivate updateChildrenEvents(): void {\n\t\tconst onDidChildrenChange = Event.map(Event.any(...this.children.map(c => c.onDidChange)), () => undefined);\n\t\tthis.childrenChangeDisposable.dispose();\n\t\tthis.childrenChangeDisposable = onDidChildrenChange(this._onDidChange.fire, this._onDidChange);\n\n\t\tconst onDidChildrenSashReset = Event.any(...this.children.map((c, i) => Event.map(c.onDidSashReset, location => [i, ...location])));\n\t\tthis.childrenSashResetDisposable.dispose();\n\t\tthis.childrenSashResetDisposable = onDidChildrenSashReset(this._onDidSashReset.fire, this._onDidSashReset);\n\n\t\tconst onDidScroll = Event.any(Event.signal(this.splitview.onDidScroll), ...this.children.map(c => c.onDidScroll));\n\t\tthis.onDidScrollDisposable.dispose();\n\t\tthis.onDidScrollDisposable = onDidScroll(this._onDidScroll.fire, this._onDidScroll);\n\t}\n\n\ttrySet2x2(other: BranchNode): IDisposable {\n\t\tif (this.children.length !== 2 || other.children.length !== 2) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\tif (this.getChildSize(0) !== other.getChildSize(0)) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\tconst [firstChild, secondChild] = this.children;\n\t\tconst [otherFirstChild, otherSecondChild] = other.children;\n\n\t\tif (!(firstChild instanceof LeafNode) || !(secondChild instanceof LeafNode)) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\tif (!(otherFirstChild instanceof LeafNode) || !(otherSecondChild instanceof LeafNode)) {\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\tif (this.orientation === Orientation.VERTICAL) {\n\t\t\tsecondChild.linkedWidthNode = otherFirstChild.linkedHeightNode = firstChild;\n\t\t\tfirstChild.linkedWidthNode = otherSecondChild.linkedHeightNode = secondChild;\n\t\t\totherSecondChild.linkedWidthNode = firstChild.linkedHeightNode = otherFirstChild;\n\t\t\totherFirstChild.linkedWidthNode = secondChild.linkedHeightNode = otherSecondChild;\n\t\t} else {\n\t\t\totherFirstChild.linkedWidthNode = secondChild.linkedHeightNode = firstChild;\n\t\t\totherSecondChild.linkedWidthNode = firstChild.linkedHeightNode = secondChild;\n\t\t\tfirstChild.linkedWidthNode = otherSecondChild.linkedHeightNode = otherFirstChild;\n\t\t\tsecondChild.linkedWidthNode = otherFirstChild.linkedHeightNode = otherSecondChild;\n\t\t}\n\n\t\tconst mySash = this.splitview.sashes[0];\n\t\tconst otherSash = other.splitview.sashes[0];\n\t\tmySash.linkedSash = otherSash;\n\t\totherSash.linkedSash = mySash;\n\n\t\tthis._onDidChange.fire(undefined);\n\t\tother._onDidChange.fire(undefined);\n\n\t\treturn toDisposable(() => {\n\t\t\tmySash.linkedSash = otherSash.linkedSash = undefined;\n\t\t\tfirstChild.linkedHeightNode = firstChild.linkedWidthNode = undefined;\n\t\t\tsecondChild.linkedHeightNode = secondChild.linkedWidthNode = undefined;\n\t\t\totherFirstChild.linkedHeightNode = otherFirstChild.linkedWidthNode = undefined;\n\t\t\totherSecondChild.linkedHeightNode = otherSecondChild.linkedWidthNode = undefined;\n\t\t});\n\t}\n\n\tprivate updateSplitviewEdgeSnappingEnablement(): void {\n\t\tthis.splitview.startSnappingEnabled = this._edgeSnapping || this._absoluteOrthogonalOffset > 0;\n\t\tthis.splitview.endSnappingEnabled = this._edgeSnapping || this._absoluteOrthogonalOffset + this._size < this.absoluteOrthogonalSize;\n\t}\n\n\tdispose(): void {\n\t\tfor (const child of this.children) {\n\t\t\tchild.dispose();\n\t\t}\n\n\t\tthis._onDidChange.dispose();\n\t\tthis._onDidSashReset.dispose();\n\n\t\tthis.splitviewSashResetDisposable.dispose();\n\t\tthis.childrenSashResetDisposable.dispose();\n\t\tthis.childrenChangeDisposable.dispose();\n\t\tthis.onDidScrollDisposable.dispose();\n\t\tthis.splitview.dispose();\n\t}\n}\n\n/**\n * Creates a latched event that avoids being fired when the view\n * constraints do not change at all.\n */\nfunction createLatchedOnDidChangeViewEvent(view: IView): Event<IViewSize | undefined> {\n\tconst [onDidChangeViewConstraints, onDidSetViewSize] = Event.split<undefined, IViewSize>(view.onDidChange, isUndefined);\n\n\treturn Event.any(\n\t\tonDidSetViewSize,\n\t\tEvent.map(\n\t\t\tEvent.latch(\n\t\t\t\tEvent.map(onDidChangeViewConstraints, _ => ([view.minimumWidth, view.maximumWidth, view.minimumHeight, view.maximumHeight])),\n\t\t\t\tarrayEquals\n\t\t\t),\n\t\t\t_ => undefined\n\t\t)\n\t);\n}\n\nclass LeafNode implements ISplitView<ILayoutContext>, IDisposable {\n\n\tprivate _size: number = 0;\n\tget size(): number { return this._size; }\n\n\tprivate _orthogonalSize: number;\n\tget orthogonalSize(): number { return this._orthogonalSize; }\n\n\tprivate absoluteOffset: number = 0;\n\tprivate absoluteOrthogonalOffset: number = 0;\n\n\treadonly onDidScroll: Event<void> = Event.None;\n\treadonly onDidSashReset: Event<GridLocation> = Event.None;\n\n\tprivate _onDidLinkedWidthNodeChange = new Relay<number | undefined>();\n\tprivate _linkedWidthNode: LeafNode | undefined = undefined;\n\tget linkedWidthNode(): LeafNode | undefined { return this._linkedWidthNode; }\n\tset linkedWidthNode(node: LeafNode | undefined) {\n\t\tthis._onDidLinkedWidthNodeChange.input = node ? node._onDidViewChange : Event.None;\n\t\tthis._linkedWidthNode = node;\n\t\tthis._onDidSetLinkedNode.fire(undefined);\n\t}\n\n\tprivate _onDidLinkedHeightNodeChange = new Relay<number | undefined>();\n\tprivate _linkedHeightNode: LeafNode | undefined = undefined;\n\tget linkedHeightNode(): LeafNode | undefined { return this._linkedHeightNode; }\n\tset linkedHeightNode(node: LeafNode | undefined) {\n\t\tthis._onDidLinkedHeightNodeChange.input = node ? node._onDidViewChange : Event.None;\n\t\tthis._linkedHeightNode = node;\n\t\tthis._onDidSetLinkedNode.fire(undefined);\n\t}\n\n\tprivate readonly _onDidSetLinkedNode = new Emitter<number | undefined>();\n\tprivate _onDidViewChange: Event<number | undefined>;\n\treadonly onDidChange: Event<number | undefined>;\n\n\tprivate readonly disposables = new DisposableStore();\n\n\tconstructor(\n\t\treadonly view: IView,\n\t\treadonly orientation: Orientation,\n\t\treadonly layoutController: LayoutController,\n\t\torthogonalSize: number,\n\t\tsize: number = 0\n\t) {\n\t\tthis._orthogonalSize = orthogonalSize;\n\t\tthis._size = size;\n\n\t\tconst onDidChange = createLatchedOnDidChangeViewEvent(view);\n\t\tthis._onDidViewChange = Event.map(onDidChange, e => e && (this.orientation === Orientation.VERTICAL ? e.width : e.height), this.disposables);\n\t\tthis.onDidChange = Event.any(this._onDidViewChange, this._onDidSetLinkedNode.event, this._onDidLinkedWidthNodeChange.event, this._onDidLinkedHeightNodeChange.event);\n\t}\n\n\tget width(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.orthogonalSize : this.size;\n\t}\n\n\tget height(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.size : this.orthogonalSize;\n\t}\n\n\tget top(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.absoluteOffset : this.absoluteOrthogonalOffset;\n\t}\n\n\tget left(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.absoluteOrthogonalOffset : this.absoluteOffset;\n\t}\n\n\tget element(): HTMLElement {\n\t\treturn this.view.element;\n\t}\n\n\tprivate get minimumWidth(): number {\n\t\treturn this.linkedWidthNode ? Math.max(this.linkedWidthNode.view.minimumWidth, this.view.minimumWidth) : this.view.minimumWidth;\n\t}\n\n\tprivate get maximumWidth(): number {\n\t\treturn this.linkedWidthNode ? Math.min(this.linkedWidthNode.view.maximumWidth, this.view.maximumWidth) : this.view.maximumWidth;\n\t}\n\n\tprivate get minimumHeight(): number {\n\t\treturn this.linkedHeightNode ? Math.max(this.linkedHeightNode.view.minimumHeight, this.view.minimumHeight) : this.view.minimumHeight;\n\t}\n\n\tprivate get maximumHeight(): number {\n\t\treturn this.linkedHeightNode ? Math.min(this.linkedHeightNode.view.maximumHeight, this.view.maximumHeight) : this.view.maximumHeight;\n\t}\n\n\tget minimumSize(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.minimumHeight : this.minimumWidth;\n\t}\n\n\tget maximumSize(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.maximumHeight : this.maximumWidth;\n\t}\n\n\tget priority(): LayoutPriority | undefined {\n\t\treturn this.view.priority;\n\t}\n\n\tget proportionalLayout(): boolean {\n\t\treturn this.view.proportionalLayout ?? true;\n\t}\n\n\tget snap(): boolean | undefined {\n\t\treturn this.view.snap;\n\t}\n\n\tget minimumOrthogonalSize(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.minimumWidth : this.minimumHeight;\n\t}\n\n\tget maximumOrthogonalSize(): number {\n\t\treturn this.orientation === Orientation.HORIZONTAL ? this.maximumWidth : this.maximumHeight;\n\t}\n\n\tprivate _boundarySashes: IRelativeBoundarySashes = {};\n\tget boundarySashes(): IRelativeBoundarySashes { return this._boundarySashes; }\n\tset boundarySashes(boundarySashes: IRelativeBoundarySashes) {\n\t\tthis._boundarySashes = boundarySashes;\n\n\t\tthis.view.setBoundarySashes?.(toAbsoluteBoundarySashes(boundarySashes, this.orientation));\n\t}\n\n\tlayout(size: number, offset: number, ctx: ILayoutContext | undefined): void {\n\t\tif (!this.layoutController.isLayoutEnabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (typeof ctx === 'undefined') {\n\t\t\tthrow new Error('Invalid state');\n\t\t}\n\n\t\tthis._size = size;\n\t\tthis._orthogonalSize = ctx.orthogonalSize;\n\t\tthis.absoluteOffset = ctx.absoluteOffset + offset;\n\t\tthis.absoluteOrthogonalOffset = ctx.absoluteOrthogonalOffset;\n\n\t\tthis._layout(this.width, this.height, this.top, this.left);\n\t}\n\n\tprivate cachedWidth: number = 0;\n\tprivate cachedHeight: number = 0;\n\tprivate cachedTop: number = 0;\n\tprivate cachedLeft: number = 0;\n\n\tprivate _layout(width: number, height: number, top: number, left: number): void {\n\t\tif (this.cachedWidth === width && this.cachedHeight === height && this.cachedTop === top && this.cachedLeft === left) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.cachedWidth = width;\n\t\tthis.cachedHeight = height;\n\t\tthis.cachedTop = top;\n\t\tthis.cachedLeft = left;\n\t\tthis.view.layout(width, height, top, left);\n\t}\n\n\tsetVisible(visible: boolean): void {\n\t\tthis.view.setVisible?.(visible);\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables.dispose();\n\t}\n}\n\ntype Node = BranchNode | LeafNode;\n\nexport interface INodeDescriptor {\n\tnode: Node;\n\tvisible?: boolean;\n}\n\nfunction flipNode(node: BranchNode, size: number, orthogonalSize: number): BranchNode;\nfunction flipNode(node: LeafNode, size: number, orthogonalSize: number): LeafNode;\nfunction flipNode(node: Node, size: number, orthogonalSize: number): Node;\nfunction flipNode(node: Node, size: number, orthogonalSize: number): Node {\n\tif (node instanceof BranchNode) {\n\t\tconst result = new BranchNode(orthogonal(node.orientation), node.layoutController, node.styles, node.splitviewProportionalLayout, size, orthogonalSize, node.edgeSnapping);\n\n\t\tlet totalSize = 0;\n\n\t\tfor (let i = node.children.length - 1; i >= 0; i--) {\n\t\t\tconst child = node.children[i];\n\t\t\tconst childSize = child instanceof BranchNode ? child.orthogonalSize : child.size;\n\n\t\t\tlet newSize = node.size === 0 ? 0 : Math.round((size * childSize) / node.size);\n\t\t\ttotalSize += newSize;\n\n\t\t\t// The last view to add should adjust to rounding errors\n\t\t\tif (i === 0) {\n\t\t\t\tnewSize += size - totalSize;\n\t\t\t}\n\n\t\t\tresult.addChild(flipNode(child, orthogonalSize, newSize), newSize, 0, true);\n\t\t}\n\n\t\tnode.dispose();\n\t\treturn result;\n\t} else {\n\t\tconst result = new LeafNode(node.view, orthogonal(node.orientation), node.layoutController, orthogonalSize);\n\t\tnode.dispose();\n\t\treturn result;\n\t}\n}\n\n/**\n * The location of a {@link IView view} within a {@link GridView}.\n *\n * A GridView is a tree composition of multiple {@link SplitView} instances, orthogonal\n * between one another. Here's an example:\n *\n * ```\n *  +-----+---------------+\n *  |  A  |      B        |\n *  +-----+---------+-----+\n *  |        C      |     |\n *  +---------------+  D  |\n *  |        E      |     |\n *  +---------------+-----+\n * ```\n *\n * The above grid's tree structure is:\n *\n * ```\n *  Vertical SplitView\n *  +-Horizontal SplitView\n *  | +-A\n *  | +-B\n *  +- Horizontal SplitView\n *    +-Vertical SplitView\n *    | +-C\n *    | +-E\n *    +-D\n * ```\n *\n * So, {@link IView views} within a {@link GridView} can be referenced by\n * a sequence of indexes, each index referencing each SplitView. Here are\n * each view's locations, from the example above:\n *\n * - `A`: `[0,0]`\n * - `B`: `[0,1]`\n * - `C`: `[1,0,0]`\n * - `D`: `[1,1]`\n * - `E`: `[1,0,1]`\n */\nexport type GridLocation = number[];\n\n/**\n * The {@link GridView} is the UI component which implements a two dimensional\n * flex-like layout algorithm for a collection of {@link IView} instances, which\n * are mostly HTMLElement instances with size constraints. A {@link GridView} is a\n * tree composition of multiple {@link SplitView} instances, orthogonal between\n * one another. It will respect view's size contraints, just like the SplitView.\n *\n * It has a low-level index based API, allowing for fine grain performant operations.\n * Look into the {@link Grid} widget for a higher-level API.\n *\n * Features:\n * - flex-like layout algorithm\n * - snap support\n * - corner sash support\n * - Alt key modifier behavior, macOS style\n * - layout (de)serialization\n */\nexport class GridView implements IDisposable {\n\n\t/**\n\t * The DOM element for this view.\n\t */\n\treadonly element: HTMLElement;\n\n\tprivate styles: IGridViewStyles;\n\tprivate proportionalLayout: boolean;\n\tprivate _root!: BranchNode;\n\tprivate onDidSashResetRelay = new Relay<GridLocation>();\n\tprivate _onDidScroll = new Relay<void>();\n\tprivate _onDidChange = new Relay<IViewSize | undefined>();\n\tprivate _boundarySashes: IBoundarySashes = {};\n\n\t/**\n\t * The layout controller makes sure layout only propagates\n\t * to the views after the very first call to {@link GridView.layout}.\n\t */\n\tprivate layoutController: LayoutController;\n\tprivate disposable2x2: IDisposable = Disposable.None;\n\n\tprivate get root(): BranchNode { return this._root; }\n\n\tprivate set root(root: BranchNode) {\n\t\tconst oldRoot = this._root;\n\n\t\tif (oldRoot) {\n\t\t\tthis.element.removeChild(oldRoot.element);\n\t\t\toldRoot.dispose();\n\t\t}\n\n\t\tthis._root = root;\n\t\tthis.element.appendChild(root.element);\n\t\tthis.onDidSashResetRelay.input = root.onDidSashReset;\n\t\tthis._onDidChange.input = Event.map(root.onDidChange, () => undefined); // TODO\n\t\tthis._onDidScroll.input = root.onDidScroll;\n\t}\n\n\t/**\n\t * Fires whenever the user double clicks a {@link Sash sash}.\n\t */\n\treadonly onDidSashReset = this.onDidSashResetRelay.event;\n\n\t/**\n\t * Fires whenever the user scrolls a {@link SplitView} within\n\t * the grid.\n\t */\n\treadonly onDidScroll = this._onDidScroll.event;\n\n\t/**\n\t * Fires whenever a view within the grid changes its size constraints.\n\t */\n\treadonly onDidChange = this._onDidChange.event;\n\n\t/**\n\t * The width of the grid.\n\t */\n\tget width(): number { return this.root.width; }\n\n\t/**\n\t * The height of the grid.\n\t */\n\tget height(): number { return this.root.height; }\n\n\t/**\n\t * The minimum width of the grid.\n\t */\n\tget minimumWidth(): number { return this.root.minimumWidth; }\n\n\t/**\n\t * The minimum height of the grid.\n\t */\n\tget minimumHeight(): number { return this.root.minimumHeight; }\n\n\t/**\n\t * The maximum width of the grid.\n\t */\n\tget maximumWidth(): number { return this.root.maximumHeight; }\n\n\t/**\n\t * The maximum height of the grid.\n\t */\n\tget maximumHeight(): number { return this.root.maximumHeight; }\n\n\tget orientation(): Orientation { return this._root.orientation; }\n\tget boundarySashes(): IBoundarySashes { return this._boundarySashes; }\n\n\t/**\n\t * The orientation of the grid. Matches the orientation of the root\n\t * {@link SplitView} in the grid's tree model.\n\t */\n\tset orientation(orientation: Orientation) {\n\t\tif (this._root.orientation === orientation) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { size, orthogonalSize, absoluteOffset, absoluteOrthogonalOffset } = this._root;\n\t\tthis.root = flipNode(this._root, orthogonalSize, size);\n\t\tthis.root.layout(size, 0, { orthogonalSize, absoluteOffset: absoluteOrthogonalOffset, absoluteOrthogonalOffset: absoluteOffset, absoluteSize: size, absoluteOrthogonalSize: orthogonalSize });\n\t\tthis.boundarySashes = this.boundarySashes;\n\t}\n\n\t/**\n\t * A collection of sashes perpendicular to each edge of the grid.\n\t * Corner sashes will be created for each intersection.\n\t */\n\tset boundarySashes(boundarySashes: IBoundarySashes) {\n\t\tthis._boundarySashes = boundarySashes;\n\t\tthis.root.boundarySashes = fromAbsoluteBoundarySashes(boundarySashes, this.orientation);\n\t}\n\n\t/**\n\t * Enable/disable edge snapping across all grid views.\n\t */\n\tset edgeSnapping(edgeSnapping: boolean) {\n\t\tthis.root.edgeSnapping = edgeSnapping;\n\t}\n\n\t/**\n\t * Create a new {@link GridView} instance.\n\t *\n\t * @remarks It's the caller's responsibility to append the\n\t * {@link GridView.element} to the page's DOM.\n\t */\n\tconstructor(options: IGridViewOptions = {}) {\n\t\tthis.element = $('.monaco-grid-view');\n\t\tthis.styles = options.styles || defaultStyles;\n\t\tthis.proportionalLayout = typeof options.proportionalLayout !== 'undefined' ? !!options.proportionalLayout : true;\n\t\tthis.layoutController = new LayoutController(false);\n\t\tthis.root = new BranchNode(Orientation.VERTICAL, this.layoutController, this.styles, this.proportionalLayout);\n\t}\n\n\tstyle(styles: IGridViewStyles): void {\n\t\tthis.styles = styles;\n\t\tthis.root.style(styles);\n\t}\n\n\t/**\n\t * Layout the {@link GridView}.\n\t *\n\t * Optionally provide a `top` and `left` positions, those will propagate\n\t * as an origin for positions passed to {@link IView.layout}.\n\t *\n\t * @param width The width of the {@link GridView}.\n\t * @param height The height of the {@link GridView}.\n\t * @param top Optional, the top location of the {@link GridView}.\n\t * @param left Optional, the left location of the {@link GridView}.\n\t */\n\tlayout(width: number, height: number, top: number = 0, left: number = 0): void {\n\t\tthis.layoutController.isLayoutEnabled = true;\n\n\t\tconst [size, orthogonalSize, offset, orthogonalOffset] = this.root.orientation === Orientation.HORIZONTAL ? [height, width, top, left] : [width, height, left, top];\n\t\tthis.root.layout(size, 0, { orthogonalSize, absoluteOffset: offset, absoluteOrthogonalOffset: orthogonalOffset, absoluteSize: size, absoluteOrthogonalSize: orthogonalSize });\n\t}\n\n\t/**\n\t * Add a {@link IView view} to this {@link GridView}.\n\t *\n\t * @param view The view to add.\n\t * @param size Either a fixed size, or a dynamic {@link Sizing} strategy.\n\t * @param location The {@link GridLocation location} to insert the view on.\n\t */\n\taddView(view: IView, size: number | Sizing, location: GridLocation): void {\n\t\tthis.disposable2x2.dispose();\n\t\tthis.disposable2x2 = Disposable.None;\n\n\t\tconst [rest, index] = tail(location);\n\t\tconst [pathToParent, parent] = this.getNode(rest);\n\n\t\tif (parent instanceof BranchNode) {\n\t\t\tconst node = new LeafNode(view, orthogonal(parent.orientation), this.layoutController, parent.orthogonalSize);\n\n\t\t\ttry {\n\t\t\t\tparent.addChild(node, size, index);\n\t\t\t} catch (err) {\n\t\t\t\tnode.dispose();\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t} else {\n\t\t\tconst [, grandParent] = tail(pathToParent);\n\t\t\tconst [, parentIndex] = tail(rest);\n\n\t\t\tlet newSiblingSize: number | Sizing = 0;\n\n\t\t\tconst newSiblingCachedVisibleSize = grandParent.getChildCachedVisibleSize(parentIndex);\n\t\t\tif (typeof newSiblingCachedVisibleSize === 'number') {\n\t\t\t\tnewSiblingSize = Sizing.Invisible(newSiblingCachedVisibleSize);\n\t\t\t}\n\n\t\t\tconst oldChild = grandParent.removeChild(parentIndex);\n\t\t\toldChild.dispose();\n\n\t\t\tconst newParent = new BranchNode(parent.orientation, parent.layoutController, this.styles, this.proportionalLayout, parent.size, parent.orthogonalSize, grandParent.edgeSnapping);\n\t\t\tgrandParent.addChild(newParent, parent.size, parentIndex);\n\n\t\t\tconst newSibling = new LeafNode(parent.view, grandParent.orientation, this.layoutController, parent.size);\n\t\t\tnewParent.addChild(newSibling, newSiblingSize, 0);\n\n\t\t\tif (typeof size !== 'number' && size.type === 'split') {\n\t\t\t\tsize = Sizing.Split(0);\n\t\t\t}\n\n\t\t\tconst node = new LeafNode(view, grandParent.orientation, this.layoutController, parent.size);\n\t\t\tnewParent.addChild(node, size, index);\n\t\t}\n\n\t\tthis.trySet2x2();\n\t}\n\n\t/**\n\t * Remove a {@link IView view} from this {@link GridView}.\n\t *\n\t * @param location The {@link GridLocation location} of the {@link IView view}.\n\t * @param sizing Whether to distribute other {@link IView view}'s sizes.\n\t */\n\tremoveView(location: GridLocation, sizing?: DistributeSizing | AutoSizing): IView {\n\t\tthis.disposable2x2.dispose();\n\t\tthis.disposable2x2 = Disposable.None;\n\n\t\tconst [rest, index] = tail(location);\n\t\tconst [pathToParent, parent] = this.getNode(rest);\n\n\t\tif (!(parent instanceof BranchNode)) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\tconst node = parent.children[index];\n\n\t\tif (!(node instanceof LeafNode)) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\tparent.removeChild(index, sizing);\n\t\tnode.dispose();\n\n\t\tif (parent.children.length === 0) {\n\t\t\tthrow new Error('Invalid grid state');\n\t\t}\n\n\t\tif (parent.children.length > 1) {\n\t\t\tthis.trySet2x2();\n\t\t\treturn node.view;\n\t\t}\n\n\t\tif (pathToParent.length === 0) { // parent is root\n\t\t\tconst sibling = parent.children[0];\n\n\t\t\tif (sibling instanceof LeafNode) {\n\t\t\t\treturn node.view;\n\t\t\t}\n\n\t\t\t// we must promote sibling to be the new root\n\t\t\tparent.removeChild(0);\n\t\t\tparent.dispose();\n\t\t\tthis.root = sibling;\n\t\t\tthis.boundarySashes = this.boundarySashes;\n\t\t\tthis.trySet2x2();\n\t\t\treturn node.view;\n\t\t}\n\n\t\tconst [, grandParent] = tail(pathToParent);\n\t\tconst [, parentIndex] = tail(rest);\n\n\t\tconst isSiblingVisible = parent.isChildVisible(0);\n\t\tconst sibling = parent.removeChild(0);\n\n\t\tconst sizes = grandParent.children.map((_, i) => grandParent.getChildSize(i));\n\t\tgrandParent.removeChild(parentIndex, sizing);\n\t\tparent.dispose();\n\n\t\tif (sibling instanceof BranchNode) {\n\t\t\tsizes.splice(parentIndex, 1, ...sibling.children.map(c => c.size));\n\n\t\t\tconst siblingChildren = sibling.removeAllChildren();\n\n\t\t\tfor (let i = 0; i < siblingChildren.length; i++) {\n\t\t\t\tgrandParent.addChild(siblingChildren[i], siblingChildren[i].size, parentIndex + i);\n\t\t\t}\n\t\t} else {\n\t\t\tconst newSibling = new LeafNode(sibling.view, orthogonal(sibling.orientation), this.layoutController, sibling.size);\n\t\t\tconst sizing = isSiblingVisible ? sibling.orthogonalSize : Sizing.Invisible(sibling.orthogonalSize);\n\t\t\tgrandParent.addChild(newSibling, sizing, parentIndex);\n\t\t}\n\n\t\tsibling.dispose();\n\n\t\tfor (let i = 0; i < sizes.length; i++) {\n\t\t\tgrandParent.resizeChild(i, sizes[i]);\n\t\t}\n\n\t\tthis.trySet2x2();\n\t\treturn node.view;\n\t}\n\n\t/**\n\t * Move a {@link IView view} within its parent.\n\t *\n\t * @param parentLocation The {@link GridLocation location} of the {@link IView view}'s parent.\n\t * @param from The index of the {@link IView view} to move.\n\t * @param to The index where the {@link IView view} should move to.\n\t */\n\tmoveView(parentLocation: GridLocation, from: number, to: number): void {\n\t\tconst [, parent] = this.getNode(parentLocation);\n\n\t\tif (!(parent instanceof BranchNode)) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\tparent.moveChild(from, to);\n\n\t\tthis.trySet2x2();\n\t}\n\n\t/**\n\t * Swap two {@link IView views} within the {@link GridView}.\n\t *\n\t * @param from The {@link GridLocation location} of one view.\n\t * @param to The {@link GridLocation location} of another view.\n\t */\n\tswapViews(from: GridLocation, to: GridLocation): void {\n\t\tconst [fromRest, fromIndex] = tail(from);\n\t\tconst [, fromParent] = this.getNode(fromRest);\n\n\t\tif (!(fromParent instanceof BranchNode)) {\n\t\t\tthrow new Error('Invalid from location');\n\t\t}\n\n\t\tconst fromSize = fromParent.getChildSize(fromIndex);\n\t\tconst fromNode = fromParent.children[fromIndex];\n\n\t\tif (!(fromNode instanceof LeafNode)) {\n\t\t\tthrow new Error('Invalid from location');\n\t\t}\n\n\t\tconst [toRest, toIndex] = tail(to);\n\t\tconst [, toParent] = this.getNode(toRest);\n\n\t\tif (!(toParent instanceof BranchNode)) {\n\t\t\tthrow new Error('Invalid to location');\n\t\t}\n\n\t\tconst toSize = toParent.getChildSize(toIndex);\n\t\tconst toNode = toParent.children[toIndex];\n\n\t\tif (!(toNode instanceof LeafNode)) {\n\t\t\tthrow new Error('Invalid to location');\n\t\t}\n\n\t\tif (fromParent === toParent) {\n\t\t\tfromParent.swapChildren(fromIndex, toIndex);\n\t\t} else {\n\t\t\tfromParent.removeChild(fromIndex);\n\t\t\ttoParent.removeChild(toIndex);\n\n\t\t\tfromParent.addChild(toNode, fromSize, fromIndex);\n\t\t\ttoParent.addChild(fromNode, toSize, toIndex);\n\t\t}\n\n\t\tthis.trySet2x2();\n\t}\n\n\t/**\n\t * Resize a {@link IView view}.\n\t *\n\t * @param location The {@link GridLocation location} of the view.\n\t * @param size The size the view should be. Optionally provide a single dimension.\n\t */\n\tresizeView(location: GridLocation, size: Partial<IViewSize>): void {\n\t\tconst [rest, index] = tail(location);\n\t\tconst [pathToParent, parent] = this.getNode(rest);\n\n\t\tif (!(parent instanceof BranchNode)) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\tif (!size.width && !size.height) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [parentSize, grandParentSize] = parent.orientation === Orientation.HORIZONTAL ? [size.width, size.height] : [size.height, size.width];\n\n\t\tif (typeof grandParentSize === 'number' && pathToParent.length > 0) {\n\t\t\tconst [, grandParent] = tail(pathToParent);\n\t\t\tconst [, parentIndex] = tail(rest);\n\n\t\t\tgrandParent.resizeChild(parentIndex, grandParentSize);\n\t\t}\n\n\t\tif (typeof parentSize === 'number') {\n\t\t\tparent.resizeChild(index, parentSize);\n\t\t}\n\n\t\tthis.trySet2x2();\n\t}\n\n\t/**\n\t * Get the size of a {@link IView view}.\n\t *\n\t * @param location The {@link GridLocation location} of the view. Provide `undefined` to get\n\t * the size of the grid itself.\n\t */\n\tgetViewSize(location?: GridLocation): IViewSize {\n\t\tif (!location) {\n\t\t\treturn { width: this.root.width, height: this.root.height };\n\t\t}\n\n\t\tconst [, node] = this.getNode(location);\n\t\treturn { width: node.width, height: node.height };\n\t}\n\n\t/**\n\t * Get the cached visible size of a {@link IView view}. This was the size\n\t * of the view at the moment it last became hidden.\n\t *\n\t * @param location The {@link GridLocation location} of the view.\n\t */\n\tgetViewCachedVisibleSize(location: GridLocation): number | undefined {\n\t\tconst [rest, index] = tail(location);\n\t\tconst [, parent] = this.getNode(rest);\n\n\t\tif (!(parent instanceof BranchNode)) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\treturn parent.getChildCachedVisibleSize(index);\n\t}\n\n\t/**\n\t * Maximize the size of a {@link IView view} by collapsing all other views\n\t * to their minimum sizes.\n\t *\n\t * @param location The {@link GridLocation location} of the view.\n\t */\n\tmaximizeViewSize(location: GridLocation): void {\n\t\tconst [ancestors, node] = this.getNode(location);\n\n\t\tif (!(node instanceof LeafNode)) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\tfor (let i = 0; i < ancestors.length; i++) {\n\t\t\tancestors[i].resizeChild(location[i], Number.POSITIVE_INFINITY);\n\t\t}\n\t}\n\n\t/**\n\t * Returns whether all other {@link IView views} are at their minimum size.\n\t *\n\t * @param location The {@link GridLocation location} of the view.\n\t */\n\tisViewSizeMaximized(location: GridLocation): boolean {\n\t\tconst [ancestors, node] = this.getNode(location);\n\n\t\tif (!(node instanceof LeafNode)) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\tfor (let i = 0; i < ancestors.length; i++) {\n\t\t\tif (!ancestors[i].isChildSizeMaximized(location[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Distribute the size among all {@link IView views} within the entire\n\t * grid or within a single {@link SplitView}.\n\t *\n\t * @param location The {@link GridLocation location} of a view containing\n\t * children views, which will have their sizes distributed within the parent\n\t * view's size. Provide `undefined` to recursively distribute all views' sizes\n\t * in the entire grid.\n\t */\n\tdistributeViewSizes(location?: GridLocation): void {\n\t\tif (!location) {\n\t\t\tthis.root.distributeViewSizes(true);\n\t\t\treturn;\n\t\t}\n\n\t\tconst [, node] = this.getNode(location);\n\n\t\tif (!(node instanceof BranchNode)) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\tnode.distributeViewSizes();\n\t\tthis.trySet2x2();\n\t}\n\n\t/**\n\t * Returns whether a {@link IView view} is visible.\n\t *\n\t * @param location The {@link GridLocation location} of the view.\n\t */\n\tisViewVisible(location: GridLocation): boolean {\n\t\tconst [rest, index] = tail(location);\n\t\tconst [, parent] = this.getNode(rest);\n\n\t\tif (!(parent instanceof BranchNode)) {\n\t\t\tthrow new Error('Invalid from location');\n\t\t}\n\n\t\treturn parent.isChildVisible(index);\n\t}\n\n\t/**\n\t * Set the visibility state of a {@link IView view}.\n\t *\n\t * @param location The {@link GridLocation location} of the view.\n\t */\n\tsetViewVisible(location: GridLocation, visible: boolean): void {\n\t\tconst [rest, index] = tail(location);\n\t\tconst [, parent] = this.getNode(rest);\n\n\t\tif (!(parent instanceof BranchNode)) {\n\t\t\tthrow new Error('Invalid from location');\n\t\t}\n\n\t\tparent.setChildVisible(index, visible);\n\t}\n\n\t/**\n\t * Returns a descriptor for the entire grid.\n\t */\n\tgetView(): GridBranchNode;\n\n\t/**\n\t * Returns a descriptor for a {@link GridLocation subtree} within the\n\t * {@link GridView}.\n\t *\n\t * @param location The {@link GridLocation location} of the root of\n\t * the {@link GridLocation subtree}.\n\t */\n\tgetView(location: GridLocation): GridNode;\n\tgetView(location?: GridLocation): GridNode {\n\t\tconst node = location ? this.getNode(location)[1] : this._root;\n\t\treturn this._getViews(node, this.orientation);\n\t}\n\n\t/**\n\t * Construct a new {@link GridView} from a JSON object.\n\t *\n\t * @param json The JSON object.\n\t * @param deserializer A deserializer which can revive each view.\n\t * @returns A new {@link GridView} instance.\n\t */\n\tstatic deserialize<T extends ISerializableView>(json: ISerializedGridView, deserializer: IViewDeserializer<T>, options: IGridViewOptions = {}): GridView {\n\t\tif (typeof json.orientation !== 'number') {\n\t\t\tthrow new Error('Invalid JSON: \\'orientation\\' property must be a number.');\n\t\t} else if (typeof json.width !== 'number') {\n\t\t\tthrow new Error('Invalid JSON: \\'width\\' property must be a number.');\n\t\t} else if (typeof json.height !== 'number') {\n\t\t\tthrow new Error('Invalid JSON: \\'height\\' property must be a number.');\n\t\t} else if (json.root?.type !== 'branch') {\n\t\t\tthrow new Error('Invalid JSON: \\'root\\' property must have \\'type\\' value of branch.');\n\t\t}\n\n\t\tconst orientation = json.orientation;\n\t\tconst height = json.height;\n\n\t\tconst result = new GridView(options);\n\t\tresult._deserialize(json.root as ISerializedBranchNode, orientation, deserializer, height);\n\n\t\treturn result;\n\t}\n\n\tprivate _deserialize(root: ISerializedBranchNode, orientation: Orientation, deserializer: IViewDeserializer<ISerializableView>, orthogonalSize: number): void {\n\t\tthis.root = this._deserializeNode(root, orientation, deserializer, orthogonalSize) as BranchNode;\n\t}\n\n\tprivate _deserializeNode(node: ISerializedNode, orientation: Orientation, deserializer: IViewDeserializer<ISerializableView>, orthogonalSize: number): Node {\n\t\tlet result: Node;\n\t\tif (node.type === 'branch') {\n\t\t\tconst serializedChildren = node.data as ISerializedNode[];\n\t\t\tconst children = serializedChildren.map(serializedChild => {\n\t\t\t\treturn {\n\t\t\t\t\tnode: this._deserializeNode(serializedChild, orthogonal(orientation), deserializer, node.size),\n\t\t\t\t\tvisible: (serializedChild as { visible?: boolean }).visible\n\t\t\t\t} as INodeDescriptor;\n\t\t\t});\n\n\t\t\tresult = new BranchNode(orientation, this.layoutController, this.styles, this.proportionalLayout, node.size, orthogonalSize, undefined, children);\n\t\t} else {\n\t\t\tresult = new LeafNode(deserializer.fromJSON(node.data), orientation, this.layoutController, orthogonalSize, node.size);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate _getViews(node: Node, orientation: Orientation, cachedVisibleSize?: number): GridNode {\n\t\tconst box = { top: node.top, left: node.left, width: node.width, height: node.height };\n\n\t\tif (node instanceof LeafNode) {\n\t\t\treturn { view: node.view, box, cachedVisibleSize };\n\t\t}\n\n\t\tconst children: GridNode[] = [];\n\n\t\tfor (let i = 0; i < node.children.length; i++) {\n\t\t\tconst child = node.children[i];\n\t\t\tconst cachedVisibleSize = node.getChildCachedVisibleSize(i);\n\n\t\t\tchildren.push(this._getViews(child, orthogonal(orientation), cachedVisibleSize));\n\t\t}\n\n\t\treturn { children, box };\n\t}\n\n\tprivate getNode(location: GridLocation, node: Node = this.root, path: BranchNode[] = []): [BranchNode[], Node] {\n\t\tif (location.length === 0) {\n\t\t\treturn [path, node];\n\t\t}\n\n\t\tif (!(node instanceof BranchNode)) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\tconst [index, ...rest] = location;\n\n\t\tif (index < 0 || index >= node.children.length) {\n\t\t\tthrow new Error('Invalid location');\n\t\t}\n\n\t\tconst child = node.children[index];\n\t\tpath.push(node);\n\n\t\treturn this.getNode(rest, child, path);\n\t}\n\n\t/**\n\t * Attempt to lock the {@link Sash sashes} in this {@link GridView} so\n\t * the grid behaves as a 2x2 matrix, with a corner sash in the middle.\n\t *\n\t * In case the grid isn't a 2x2 grid _and_ all sashes are not aligned,\n\t * this method is a no-op.\n\t */\n\ttrySet2x2(): void {\n\t\tthis.disposable2x2.dispose();\n\t\tthis.disposable2x2 = Disposable.None;\n\n\t\tif (this.root.children.length !== 2) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst [first, second] = this.root.children;\n\n\t\tif (!(first instanceof BranchNode) || !(second instanceof BranchNode)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.disposable2x2 = first.trySet2x2(second);\n\t}\n\n\t/**\n\t * Populate a map with views to DOM nodes.\n\t * @remarks To be used internally only.\n\t */\n\tgetViewMap(map: Map<IView, HTMLElement>, node?: Node): void {\n\t\tif (!node) {\n\t\t\tnode = this.root;\n\t\t}\n\n\t\tif (node instanceof BranchNode) {\n\t\t\tnode.children.forEach(child => this.getViewMap(map, child));\n\t\t} else {\n\t\t\tmap.set(node.view, node.element);\n\t\t}\n\t}\n\n\tdispose(): void {\n\t\tthis.onDidSashResetRelay.dispose();\n\t\tthis.root.dispose();\n\t\tthis.element.parentElement?.removeChild(this.element);\n\t}\n}\n"]}