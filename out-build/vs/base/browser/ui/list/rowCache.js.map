{"version":3,"sources":["file:///workspace/appflow/src/vs/base/browser/ui/list/rowCache.ts"],"names":[],"mappings":"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","file":"rowCache.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { $ } from 'vs/base/browser/dom';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { IListRenderer } from './list';\n\nexport interface IRow {\n\tdomNode: HTMLElement;\n\ttemplateId: string;\n\ttemplateData: any;\n}\n\nfunction removeFromParent(element: HTMLElement): void {\n\ttry {\n\t\telement.parentElement?.removeChild(element);\n\t} catch (e) {\n\t\t// this will throw if this happens due to a blur event, nasty business\n\t}\n}\n\nexport class RowCache<T> implements IDisposable {\n\n\tprivate cache = new Map<string, IRow[]>();\n\n\tprivate readonly transactionNodesPendingRemoval = new Set<HTMLElement>();\n\tprivate inTransaction = false;\n\n\tconstructor(private renderers: Map<string, IListRenderer<T, any>>) { }\n\n\t/**\n\t * Returns a row either by creating a new one or reusing\n\t * a previously released row which shares the same templateId.\n\t *\n\t * @returns A row and `isReusingConnectedDomNode` if the row's node is already in the dom in a stale position.\n\t */\n\talloc(templateId: string): { row: IRow; isReusingConnectedDomNode: boolean } {\n\t\tlet result = this.getTemplateCache(templateId).pop();\n\n\t\tlet isStale = false;\n\t\tif (result) {\n\t\t\tisStale = this.transactionNodesPendingRemoval.has(result.domNode);\n\t\t\tif (isStale) {\n\t\t\t\tthis.transactionNodesPendingRemoval.delete(result.domNode);\n\t\t\t}\n\t\t} else {\n\t\t\tconst domNode = $('.monaco-list-row');\n\t\t\tconst renderer = this.getRenderer(templateId);\n\t\t\tconst templateData = renderer.renderTemplate(domNode);\n\t\t\tresult = { domNode, templateId, templateData };\n\t\t}\n\n\t\treturn { row: result, isReusingConnectedDomNode: isStale };\n\t}\n\n\t/**\n\t * Releases the row for eventual reuse.\n\t */\n\trelease(row: IRow): void {\n\t\tif (!row) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.releaseRow(row);\n\t}\n\n\t/**\n\t * Begin a set of changes that use the cache. This lets us skip work when a row is removed and then inserted again.\n\t */\n\ttransact(makeChanges: () => void) {\n\t\tif (this.inTransaction) {\n\t\t\tthrow new Error('Already in transaction');\n\t\t}\n\n\t\tthis.inTransaction = true;\n\n\t\ttry {\n\t\t\tmakeChanges();\n\t\t} finally {\n\t\t\tfor (const domNode of this.transactionNodesPendingRemoval) {\n\t\t\t\tthis.doRemoveNode(domNode);\n\t\t\t}\n\n\t\t\tthis.transactionNodesPendingRemoval.clear();\n\t\t\tthis.inTransaction = false;\n\t\t}\n\t}\n\n\tprivate releaseRow(row: IRow): void {\n\t\tconst { domNode, templateId } = row;\n\t\tif (domNode) {\n\t\t\tif (this.inTransaction) {\n\t\t\t\tthis.transactionNodesPendingRemoval.add(domNode);\n\t\t\t} else {\n\t\t\t\tthis.doRemoveNode(domNode);\n\t\t\t}\n\t\t}\n\n\t\tconst cache = this.getTemplateCache(templateId);\n\t\tcache.push(row);\n\t}\n\n\tprivate doRemoveNode(domNode: HTMLElement) {\n\t\tdomNode.classList.remove('scrolling');\n\t\tremoveFromParent(domNode);\n\t}\n\n\tprivate getTemplateCache(templateId: string): IRow[] {\n\t\tlet result = this.cache.get(templateId);\n\n\t\tif (!result) {\n\t\t\tresult = [];\n\t\t\tthis.cache.set(templateId, result);\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tdispose(): void {\n\t\tthis.cache.forEach((cachedRows, templateId) => {\n\t\t\tfor (const cachedRow of cachedRows) {\n\t\t\t\tconst renderer = this.getRenderer(templateId);\n\t\t\t\trenderer.disposeTemplate(cachedRow.templateData);\n\t\t\t\tcachedRow.templateData = null;\n\t\t\t}\n\t\t});\n\n\t\tthis.cache.clear();\n\t\tthis.transactionNodesPendingRemoval.clear();\n\t}\n\n\tprivate getRenderer(templateId: string): IListRenderer<T, any> {\n\t\tconst renderer = this.renderers.get(templateId);\n\t\tif (!renderer) {\n\t\t\tthrow new Error(`No renderer found for ${templateId}`);\n\t\t}\n\t\treturn renderer;\n\t}\n}\n"]}