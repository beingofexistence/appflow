{"version":3,"sources":["vs/base/browser/ui/findinput/findInputToggles.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAchG,MAAM,+BAA+B,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAiB,EAAE,IAAY,CAAC,CAAC;IACtF,MAAM,2BAA2B,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAkB,EAAE,IAAkB,CAAC,CAAC;IACzF,MAAM,sBAAsB,GAAG,GAAG,CAAC,QAAQ,CAAC,CAAkB,EAAE,IAAwB,CAAC,CAAC;IAE1F,MAAa,GAAoB,SAAQ,YAAG;QAC3C,YAAY,IAA0B;YACrC,KAAK,CAAC;gBACL,IAAI,EAAE,cAAG,CAAK,aAAa;gBAC3B,KAAK,EAAE,+BAA+B,GAAG,IAAI,CAAC,WAAW;gBACzD,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,uBAAuB,EAAE,IAAI,CAAC,uBAAuB;gBACrD,2BAA2B,EAAE,IAAI,CAAC,2BAA2B;gBAC7D,2BAA2B,EAAE,IAAI,CAAC,2BAA2B;aAC7D,CAAC,CAAC;QACJ,CAAC;KACD;IAXD,kBAWC;IAED,MAAa,GAAiB,SAAQ,YAAG;QACxC,YAAY,IAA0B;YACrC,KAAK,CAAC;gBACL,IAAI,EAAE,cAAG,CAAK,SAAS;gBACvB,KAAK,EAAE,2BAA2B,GAAG,IAAI,CAAC,WAAW;gBACrD,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,uBAAuB,EAAE,IAAI,CAAC,uBAAuB;gBACrD,2BAA2B,EAAE,IAAI,CAAC,2BAA2B;gBAC7D,2BAA2B,EAAE,IAAI,CAAC,2BAA2B;aAC7D,CAAC,CAAC;QACJ,CAAC;KACD;IAXD,kBAWC;IAED,MAAa,GAAY,SAAQ,YAAG;QACnC,YAAY,IAA0B;YACrC,KAAK,CAAC;gBACL,IAAI,EAAE,cAAG,CAAK,KAAK;gBACnB,KAAK,EAAE,sBAAsB,GAAG,IAAI,CAAC,WAAW;gBAChD,SAAS,EAAE,IAAI,CAAC,SAAS;gBACzB,uBAAuB,EAAE,IAAI,CAAC,uBAAuB;gBACrD,2BAA2B,EAAE,IAAI,CAAC,2BAA2B;gBAC7D,2BAA2B,EAAE,IAAI,CAAC,2BAA2B;aAC7D,CAAC,CAAC;QACJ,CAAC;KACD;IAXD,kBAWC","file":"findInputToggles.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Toggle } from 'vs/base/browser/ui/toggle/toggle';\nimport { Codicon } from 'vs/base/common/codicons';\nimport * as nls from 'vs/nls';\n\nexport interface IFindInputToggleOpts {\n\treadonly appendTitle: string;\n\treadonly isChecked: boolean;\n\treadonly inputActiveOptionBorder: string | undefined;\n\treadonly inputActiveOptionForeground: string | undefined;\n\treadonly inputActiveOptionBackground: string | undefined;\n}\n\nconst NLS_CASE_SENSITIVE_TOGGLE_LABEL = nls.localize('caseDescription', \"Match Case\");\nconst NLS_WHOLE_WORD_TOGGLE_LABEL = nls.localize('wordsDescription', \"Match Whole Word\");\nconst NLS_REGEX_TOGGLE_LABEL = nls.localize('regexDescription', \"Use Regular Expression\");\n\nexport class CaseSensitiveToggle extends Toggle {\n\tconstructor(opts: IFindInputToggleOpts) {\n\t\tsuper({\n\t\t\ticon: Codicon.caseSensitive,\n\t\t\ttitle: NLS_CASE_SENSITIVE_TOGGLE_LABEL + opts.appendTitle,\n\t\t\tisChecked: opts.isChecked,\n\t\t\tinputActiveOptionBorder: opts.inputActiveOptionBorder,\n\t\t\tinputActiveOptionForeground: opts.inputActiveOptionForeground,\n\t\t\tinputActiveOptionBackground: opts.inputActiveOptionBackground\n\t\t});\n\t}\n}\n\nexport class WholeWordsToggle extends Toggle {\n\tconstructor(opts: IFindInputToggleOpts) {\n\t\tsuper({\n\t\t\ticon: Codicon.wholeWord,\n\t\t\ttitle: NLS_WHOLE_WORD_TOGGLE_LABEL + opts.appendTitle,\n\t\t\tisChecked: opts.isChecked,\n\t\t\tinputActiveOptionBorder: opts.inputActiveOptionBorder,\n\t\t\tinputActiveOptionForeground: opts.inputActiveOptionForeground,\n\t\t\tinputActiveOptionBackground: opts.inputActiveOptionBackground\n\t\t});\n\t}\n}\n\nexport class RegexToggle extends Toggle {\n\tconstructor(opts: IFindInputToggleOpts) {\n\t\tsuper({\n\t\t\ticon: Codicon.regex,\n\t\t\ttitle: NLS_REGEX_TOGGLE_LABEL + opts.appendTitle,\n\t\t\tisChecked: opts.isChecked,\n\t\t\tinputActiveOptionBorder: opts.inputActiveOptionBorder,\n\t\t\tinputActiveOptionForeground: opts.inputActiveOptionForeground,\n\t\t\tinputActiveOptionBackground: opts.inputActiveOptionBackground\n\t\t});\n\t}\n}\n"]}