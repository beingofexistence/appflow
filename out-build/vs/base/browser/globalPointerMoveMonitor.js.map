{"version":3,"sources":["file:///workspace/appflow/src/vs/base/browser/globalPointerMoveMonitor.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAahG,MAAa,GAAG;QAAhB;YAEkB,MAAC,GAAQ,IAAI,eAAG,EAAc,CAAC;YACxC,MAAC,GAAmD,IAAI,CAAC;YACzD,MAAC,GAAyC,IAAI,CAAC;QA2FxD,CAAC;QAzFO,OAAO;YACb,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;YAC3B,IAAI,CAAC,CAAC,CAAM,OAAO,EAAE,CAAC;QACvB,CAAC;QAEM,cAAc,CAAC,kBAA2B,EAAE,YAA2C;YAC7F,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE;gBACzB,iBAAiB;gBACjB,OAAO;aACP;YAED,SAAS;YACT,IAAI,CAAC,CAAC,CAAM,KAAK,EAAE,CAAC;YACpB,IAAI,CAAC,CAAC,GAAsB,IAAI,CAAC;YACjC,MAAM,cAAc,GAAG,IAAI,CAAC,CAAC,CAAe;YAC5C,IAAI,CAAC,CAAC,GAAiB,IAAI,CAAC;YAE5B,IAAI,kBAAkB,IAAI,cAAc,EAAE;gBACzC,cAAc,CAAC,YAAY,CAAC,CAAC;aAC7B;QACF,CAAC;QAEM,YAAY;YAClB,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAoB;QACpC,CAAC;QAEM,eAAe,CACrB,cAAuB,EACvB,SAAiB,EACjB,cAAsB,EACtB,mBAAyC,EACzC,cAA+B;YAE/B,IAAI,IAAI,CAAC,YAAY,EAAE,EAAE;gBACxB,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;aAC3B;YACD,IAAI,CAAC,CAAC,GAAsB,mBAAmB,CAAC;YAChD,IAAI,CAAC,CAAC,GAAiB,cAAc,CAAC;YAEtC,IAAI,WAAW,GAAqB,cAAc,CAAC;YAEnD,IAAI;gBACH,cAAc,CAAC,iBAAiB,CAAC,SAAS,CAAC,CAAC;gBAC5C,IAAI,CAAC,CAAC,CAAM,GAAG,CAAC,IAAA,eAAG,EAAU,GAAG,EAAE;oBACjC,IAAI;wBACH,cAAc,CAAC,qBAAqB,CAAC,SAAS,CAAC,CAAC;qBAChD;oBAAC,OAAO,GAAG,EAAE;wBACb,wDAAwD;wBACxD,EAAE;wBACF,iFAAiF;wBACjF,4EAA4E;wBAC5E,oDAAoD;wBACpD,EAAE;wBACF,oDAAoD;qBACpD;gBACF,CAAC,CAAC,CAAC,CAAC;aACJ;YAAC,OAAO,GAAG,EAAE;gBACb,wDAAwD;gBACxD,wDAAwD;gBACxD,yDAAyD;gBACzD,mDAAmD;gBACnD,mDAAmD;gBACnD,wEAAwE;gBACxE,oDAAoD;gBACpD,0DAA0D;gBAC1D,WAAW,GAAG,MAAM,CAAC;aACrB;YAED,IAAI,CAAC,CAAC,CAAM,GAAG,CAAC,GAAG,CAAC,GAAG,CACtB,WAAW,EACX,GAAG,CAAC,GAAG,CAAO,YAAY,EAC1B,CAAC,CAAC,EAAE,EAAE;gBACL,IAAI,CAAC,CAAC,OAAO,KAAK,cAAc,EAAE;oBACjC,4CAA4C;oBAC5C,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;oBAC1B,OAAO;iBACP;gBAED,CAAC,CAAC,cAAc,EAAE,CAAC;gBACnB,IAAI,CAAC,CAAqB,CAAC,CAAC,CAAC,CAAC;YAC/B,CAAC,CACD,CAAC,CAAC;YAEH,IAAI,CAAC,CAAC,CAAM,GAAG,CAAC,GAAG,CAAC,GAAG,CACtB,WAAW,EACX,GAAG,CAAC,GAAG,CAAO,UAAU,EACxB,CAAC,CAAe,EAAE,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAC9C,CAAC,CAAC;QACJ,CAAC;KACD;IA/FD,kBA+FC","file":"globalPointerMoveMonitor.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as dom from 'vs/base/browser/dom';\nimport { DisposableStore, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\n\nexport interface IPointerMoveCallback {\n\t(event: PointerEvent): void;\n}\n\nexport interface IOnStopCallback {\n\t(browserEvent?: PointerEvent | KeyboardEvent): void;\n}\n\nexport class GlobalPointerMoveMonitor implements IDisposable {\n\n\tprivate readonly _hooks = new DisposableStore();\n\tprivate _pointerMoveCallback: IPointerMoveCallback | null = null;\n\tprivate _onStopCallback: IOnStopCallback | null = null;\n\n\tpublic dispose(): void {\n\t\tthis.stopMonitoring(false);\n\t\tthis._hooks.dispose();\n\t}\n\n\tpublic stopMonitoring(invokeStopCallback: boolean, browserEvent?: PointerEvent | KeyboardEvent): void {\n\t\tif (!this.isMonitoring()) {\n\t\t\t// Not monitoring\n\t\t\treturn;\n\t\t}\n\n\t\t// Unhook\n\t\tthis._hooks.clear();\n\t\tthis._pointerMoveCallback = null;\n\t\tconst onStopCallback = this._onStopCallback;\n\t\tthis._onStopCallback = null;\n\n\t\tif (invokeStopCallback && onStopCallback) {\n\t\t\tonStopCallback(browserEvent);\n\t\t}\n\t}\n\n\tpublic isMonitoring(): boolean {\n\t\treturn !!this._pointerMoveCallback;\n\t}\n\n\tpublic startMonitoring(\n\t\tinitialElement: Element,\n\t\tpointerId: number,\n\t\tinitialButtons: number,\n\t\tpointerMoveCallback: IPointerMoveCallback,\n\t\tonStopCallback: IOnStopCallback\n\t): void {\n\t\tif (this.isMonitoring()) {\n\t\t\tthis.stopMonitoring(false);\n\t\t}\n\t\tthis._pointerMoveCallback = pointerMoveCallback;\n\t\tthis._onStopCallback = onStopCallback;\n\n\t\tlet eventSource: Element | Window = initialElement;\n\n\t\ttry {\n\t\t\tinitialElement.setPointerCapture(pointerId);\n\t\t\tthis._hooks.add(toDisposable(() => {\n\t\t\t\ttry {\n\t\t\t\t\tinitialElement.releasePointerCapture(pointerId);\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// See https://github.com/microsoft/vscode/issues/161731\n\t\t\t\t\t//\n\t\t\t\t\t// `releasePointerCapture` sometimes fails when being invoked with the exception:\n\t\t\t\t\t//     DOMException: Failed to execute 'releasePointerCapture' on 'Element':\n\t\t\t\t\t//     No active pointer with the given id is found.\n\t\t\t\t\t//\n\t\t\t\t\t// There's no need to do anything in case of failure\n\t\t\t\t}\n\t\t\t}));\n\t\t} catch (err) {\n\t\t\t// See https://github.com/microsoft/vscode/issues/144584\n\t\t\t// See https://github.com/microsoft/vscode/issues/146947\n\t\t\t// `setPointerCapture` sometimes fails when being invoked\n\t\t\t// from a `mousedown` listener on macOS and Windows\n\t\t\t// and it always fails on Linux with the exception:\n\t\t\t//     DOMException: Failed to execute 'setPointerCapture' on 'Element':\n\t\t\t//     No active pointer with the given id is found.\n\t\t\t// In case of failure, we bind the listeners on the window\n\t\t\teventSource = window;\n\t\t}\n\n\t\tthis._hooks.add(dom.addDisposableListener(\n\t\t\teventSource,\n\t\t\tdom.EventType.POINTER_MOVE,\n\t\t\t(e) => {\n\t\t\t\tif (e.buttons !== initialButtons) {\n\t\t\t\t\t// Buttons state has changed in the meantime\n\t\t\t\t\tthis.stopMonitoring(true);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\te.preventDefault();\n\t\t\t\tthis._pointerMoveCallback!(e);\n\t\t\t}\n\t\t));\n\n\t\tthis._hooks.add(dom.addDisposableListener(\n\t\t\teventSource,\n\t\t\tdom.EventType.POINTER_UP,\n\t\t\t(e: PointerEvent) => this.stopMonitoring(true)\n\t\t));\n\t}\n}\n"]}