{"version":3,"sources":["file:///workspace/appflow/src/vs/base/common/sequence.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAmBhG,MAAa,GAAG;QAAhB;YAEU,aAAQ,GAAQ,EAAE,CAAC;YAEX,MAAC,GAAc,IAAI,WAAG,EAAkB,CAAC;YACjD,gBAAW,GAAsB,IAAI,CAAC,CAAC,CAAY,KAAK,CAAC;QAMnE,CAAC;QAJA,MAAM,CAAC,KAAa,EAAE,WAAmB,EAAE,WAAyB,EAAE;YACrE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,EAAE,WAAW,EAAE,GAAG,QAAQ,CAAC,CAAC;YACtD,IAAI,CAAC,CAAC,CAAY,IAAI,CAAC,EAAE,KAAK,EAAE,WAAW,EAAE,QAAQ,EAAE,CAAC,CAAC;QAC1D,CAAC;KACD;IAXD,kBAWC","file":"sequence.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\n\nexport interface ISplice<T> {\n\treadonly start: number;\n\treadonly deleteCount: number;\n\treadonly toInsert: readonly T[];\n}\n\nexport interface ISpliceable<T> {\n\tsplice(start: number, deleteCount: number, toInsert: readonly T[]): void;\n}\n\nexport interface ISequence<T> {\n\treadonly elements: T[];\n\treadonly onDidSplice: Event<ISplice<T>>;\n}\n\nexport class Sequence<T> implements ISequence<T>, ISpliceable<T> {\n\n\treadonly elements: T[] = [];\n\n\tprivate readonly _onDidSplice = new Emitter<ISplice<T>>();\n\treadonly onDidSplice: Event<ISplice<T>> = this._onDidSplice.event;\n\n\tsplice(start: number, deleteCount: number, toInsert: readonly T[] = []): void {\n\t\tthis.elements.splice(start, deleteCount, ...toInsert);\n\t\tthis._onDidSplice.fire({ start, deleteCount, toInsert });\n\t}\n}\n"]}