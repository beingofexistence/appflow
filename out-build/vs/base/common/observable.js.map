{"version":3,"sources":["file:///workspace/appflow/src/vs/base/common/observable.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAW/F,uGAAA,GAAG,OAAmB;IACtB,iHAAA,GAAG,OAA6B;IAChC,mGAAA,GAAG,OAAe;IAClB,sGAAA,GAAG,OAAkB;IAGrB,kGAAA,GAAG,OAAW;IACd,sGAAA,GAAG,OAAe;IAClB,+GAAA,GAAG,OAAwB;IAC3B,2GAAA,GAAG,OAAoB;IAGvB,kGAAA,GAAG,OAAW;IACd,uGAAA,GAAG,OAAgB;IACnB,+GAAA,GAAG,OAAwB;IAC3B,2GAAA,GAAG,OAAoB;IACvB,sGAAA,GAAG,OAAe;IAClB,wHAAA,GAAG,OAAiC;IAIpC,wGAAA,GAAG,OAAmB;IACtB,4GAAA,GAAG,OAAuB;IAC1B,mHAAA,GAAG,OAA8B;IACjC,2HAAA,GAAG,OAAsC;IACzC,qGAAA,GAAG,OAAgB;IACnB,sHAAA,GAAG,OAAiC;IACpC,4GAAA,GAAG,OAAuB;IAC1B,8GAAA,GAAG,OAAyB;IAC5B,yGAAA,GAAG,OAAoB;IACvB,kHAAA,GAAG,OAA6B;IAChC,qGAAA,GAAG,OAAgB;IACnB,kHAAA,GAAG,OAA6B;IAKjC,MAAM,aAAa,GAAG,KAAK,CAAC;IAC5B,IAAI,aAAa,EAAE;QAClB,IAAA,aAAG,EAAO,IAAI,aAAG,EAAsB,CAAC,CAAC;KACzC","file":"observable.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport {\n\tIObservable,\n\tIObserver,\n\tIReader,\n\tISettable,\n\tISettableObservable,\n\tITransaction,\n\tIChangeContext,\n\tIChangeTracker,\n\tobservableValue,\n\tdisposableObservableValue,\n\ttransaction,\n\tsubtransaction,\n} from 'vs/base/common/observableInternal/base';\nexport {\n\tderived,\n\tderivedOpts,\n\tderivedHandleChanges,\n\tderivedWithStore,\n} from 'vs/base/common/observableInternal/derived';\nexport {\n\tautorun,\n\tautorunDelta,\n\tautorunHandleChanges,\n\tautorunWithStore,\n\tautorunOpts,\n\tautorunWithStoreHandleChanges,\n} from 'vs/base/common/observableInternal/autorun';\nexport {\n\tIObservableSignal,\n\tconstObservable,\n\tdebouncedObservable,\n\tderivedObservableWithCache,\n\tderivedObservableWithWritableCache,\n\tkeepObserved,\n\trecomputeInitiallyAndOnChange,\n\tobservableFromEvent,\n\tobservableFromPromise,\n\tobservableSignal,\n\tobservableSignalFromEvent,\n\twaitForState,\n\twasEventTriggeredRecently,\n} from 'vs/base/common/observableInternal/utils';\n\nimport { ConsoleObservableLogger, setLogger } from 'vs/base/common/observableInternal/logging';\n\nconst enableLogging = false;\nif (enableLogging) {\n\tsetLogger(new ConsoleObservableLogger());\n}\n"]}