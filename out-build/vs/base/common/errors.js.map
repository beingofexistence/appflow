{"version":3,"sources":["file:///workspace/appflow/src/vs/base/common/errors.ts"],"names":[],"mappings":"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","file":"errors.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport interface ErrorListenerCallback {\n\t(error: any): void;\n}\n\nexport interface ErrorListenerUnbind {\n\t(): void;\n}\n\n// Avoid circular dependency on EventEmitter by implementing a subset of the interface.\nexport class ErrorHandler {\n\tprivate unexpectedErrorHandler: (e: any) => void;\n\tprivate listeners: ErrorListenerCallback[];\n\n\tconstructor() {\n\n\t\tthis.listeners = [];\n\n\t\tthis.unexpectedErrorHandler = function (e: any) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (e.stack) {\n\t\t\t\t\tif (ErrorNoTelemetry.isErrorNoTelemetry(e)) {\n\t\t\t\t\t\tthrow new ErrorNoTelemetry(e.message + '\\n\\n' + e.stack);\n\t\t\t\t\t}\n\n\t\t\t\t\tthrow new Error(e.message + '\\n\\n' + e.stack);\n\t\t\t\t}\n\n\t\t\t\tthrow e;\n\t\t\t}, 0);\n\t\t};\n\t}\n\n\taddListener(listener: ErrorListenerCallback): ErrorListenerUnbind {\n\t\tthis.listeners.push(listener);\n\n\t\treturn () => {\n\t\t\tthis._removeListener(listener);\n\t\t};\n\t}\n\n\tprivate emit(e: any): void {\n\t\tthis.listeners.forEach((listener) => {\n\t\t\tlistener(e);\n\t\t});\n\t}\n\n\tprivate _removeListener(listener: ErrorListenerCallback): void {\n\t\tthis.listeners.splice(this.listeners.indexOf(listener), 1);\n\t}\n\n\tsetUnexpectedErrorHandler(newUnexpectedErrorHandler: (e: any) => void): void {\n\t\tthis.unexpectedErrorHandler = newUnexpectedErrorHandler;\n\t}\n\n\tgetUnexpectedErrorHandler(): (e: any) => void {\n\t\treturn this.unexpectedErrorHandler;\n\t}\n\n\tonUnexpectedError(e: any): void {\n\t\tthis.unexpectedErrorHandler(e);\n\t\tthis.emit(e);\n\t}\n\n\t// For external errors, we don't want the listeners to be called\n\tonUnexpectedExternalError(e: any): void {\n\t\tthis.unexpectedErrorHandler(e);\n\t}\n}\n\nexport const errorHandler = new ErrorHandler();\n\n/** @skipMangle */\nexport function setUnexpectedErrorHandler(newUnexpectedErrorHandler: (e: any) => void): void {\n\terrorHandler.setUnexpectedErrorHandler(newUnexpectedErrorHandler);\n}\n\n/**\n * Returns if the error is a SIGPIPE error. SIGPIPE errors should generally be\n * logged at most once, to avoid a loop.\n *\n * @see https://github.com/microsoft/vscode-remote-release/issues/6481\n */\nexport function isSigPipeError(e: unknown): e is Error {\n\tif (!e || typeof e !== 'object') {\n\t\treturn false;\n\t}\n\n\tconst cast = e as Record<string, string | undefined>;\n\treturn cast.code === 'EPIPE' && cast.syscall?.toUpperCase() === 'WRITE';\n}\n\nexport function onUnexpectedError(e: any): undefined {\n\t// ignore errors from cancelled promises\n\tif (!isCancellationError(e)) {\n\t\terrorHandler.onUnexpectedError(e);\n\t}\n\treturn undefined;\n}\n\nexport function onUnexpectedExternalError(e: any): undefined {\n\t// ignore errors from cancelled promises\n\tif (!isCancellationError(e)) {\n\t\terrorHandler.onUnexpectedExternalError(e);\n\t}\n\treturn undefined;\n}\n\nexport interface SerializedError {\n\treadonly $isError: true;\n\treadonly name: string;\n\treadonly message: string;\n\treadonly stack: string;\n\treadonly noTelemetry: boolean;\n}\n\nexport function transformErrorForSerialization(error: Error): SerializedError;\nexport function transformErrorForSerialization(error: any): any;\nexport function transformErrorForSerialization(error: any): any {\n\tif (error instanceof Error) {\n\t\tconst { name, message } = error;\n\t\tconst stack: string = (<any>error).stacktrace || (<any>error).stack;\n\t\treturn {\n\t\t\t$isError: true,\n\t\t\tname,\n\t\t\tmessage,\n\t\t\tstack,\n\t\t\tnoTelemetry: ErrorNoTelemetry.isErrorNoTelemetry(error)\n\t\t};\n\t}\n\n\t// return as is\n\treturn error;\n}\n\n// see https://github.com/v8/v8/wiki/Stack%20Trace%20API#basic-stack-traces\nexport interface V8CallSite {\n\tgetThis(): unknown;\n\tgetTypeName(): string | null;\n\tgetFunction(): Function | undefined;\n\tgetFunctionName(): string | null;\n\tgetMethodName(): string | null;\n\tgetFileName(): string | null;\n\tgetLineNumber(): number | null;\n\tgetColumnNumber(): number | null;\n\tgetEvalOrigin(): string | undefined;\n\tisToplevel(): boolean;\n\tisEval(): boolean;\n\tisNative(): boolean;\n\tisConstructor(): boolean;\n\ttoString(): string;\n}\n\nconst canceledName = 'Canceled';\n\n/**\n * Checks if the given error is a promise in canceled state\n */\nexport function isCancellationError(error: any): boolean {\n\tif (error instanceof CancellationError) {\n\t\treturn true;\n\t}\n\treturn error instanceof Error && error.name === canceledName && error.message === canceledName;\n}\n\n// !!!IMPORTANT!!!\n// Do NOT change this class because it is also used as an API-type.\nexport class CancellationError extends Error {\n\tconstructor() {\n\t\tsuper(canceledName);\n\t\tthis.name = this.message;\n\t}\n}\n\n/**\n * @deprecated use {@link CancellationError `new CancellationError()`} instead\n */\nexport function canceled(): Error {\n\tconst error = new Error(canceledName);\n\terror.name = error.message;\n\treturn error;\n}\n\nexport function illegalArgument(name?: string): Error {\n\tif (name) {\n\t\treturn new Error(`Illegal argument: ${name}`);\n\t} else {\n\t\treturn new Error('Illegal argument');\n\t}\n}\n\nexport function illegalState(name?: string): Error {\n\tif (name) {\n\t\treturn new Error(`Illegal state: ${name}`);\n\t} else {\n\t\treturn new Error('Illegal state');\n\t}\n}\n\nexport class ReadonlyError extends TypeError {\n\tconstructor(name?: string) {\n\t\tsuper(name ? `${name} is read-only and cannot be changed` : 'Cannot change read-only property');\n\t}\n}\n\nexport function getErrorMessage(err: any): string {\n\tif (!err) {\n\t\treturn 'Error';\n\t}\n\n\tif (err.message) {\n\t\treturn err.message;\n\t}\n\n\tif (err.stack) {\n\t\treturn err.stack.split('\\n')[0];\n\t}\n\n\treturn String(err);\n}\n\nexport class NotImplementedError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper('NotImplemented');\n\t\tif (message) {\n\t\t\tthis.message = message;\n\t\t}\n\t}\n}\n\nexport class NotSupportedError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper('NotSupported');\n\t\tif (message) {\n\t\t\tthis.message = message;\n\t\t}\n\t}\n}\n\nexport class ExpectedError extends Error {\n\treadonly isExpected = true;\n}\n\n/**\n * Error that when thrown won't be logged in telemetry as an unhandled error.\n */\nexport class ErrorNoTelemetry extends Error {\n\toverride readonly name: string;\n\n\tconstructor(msg?: string) {\n\t\tsuper(msg);\n\t\tthis.name = 'CodeExpectedError';\n\t}\n\n\tpublic static fromError(err: Error): ErrorNoTelemetry {\n\t\tif (err instanceof ErrorNoTelemetry) {\n\t\t\treturn err;\n\t\t}\n\n\t\tconst result = new ErrorNoTelemetry();\n\t\tresult.message = err.message;\n\t\tresult.stack = err.stack;\n\t\treturn result;\n\t}\n\n\tpublic static isErrorNoTelemetry(err: Error): err is ErrorNoTelemetry {\n\t\treturn err.name === 'CodeExpectedError';\n\t}\n}\n\n/**\n * This error indicates a bug.\n * Do not throw this for invalid user input.\n * Only catch this error to recover gracefully from bugs.\n */\nexport class BugIndicatingError extends Error {\n\tconstructor(message?: string) {\n\t\tsuper(message || 'An unexpected bug occurred.');\n\t\tObject.setPrototypeOf(this, BugIndicatingError.prototype);\n\n\t\t// Because we know for sure only buggy code throws this,\n\t\t// we definitely want to break here and fix the bug.\n\t\t// eslint-disable-next-line no-debugger\n\t\t// debugger;\n\t}\n}\n"]}