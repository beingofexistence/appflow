{"version":3,"sources":["file:///workspace/appflow/src/vs/base/common/observableInternal/utils.ts"],"names":[],"mappings":"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","file":"utils.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { DisposableStore, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { autorun } from 'vs/base/common/observableInternal/autorun';\nimport { BaseObservable, ConvenientObservable, IObservable, IObserver, IReader, ITransaction, getDebugName, getFunctionName, observableValue, transaction } from 'vs/base/common/observableInternal/base';\nimport { derived } from 'vs/base/common/observableInternal/derived';\nimport { getLogger } from 'vs/base/common/observableInternal/logging';\n\n/**\n * Represents an efficient observable whose value never changes.\n */\nexport function constObservable<T>(value: T): IObservable<T> {\n\treturn new ConstObservable(value);\n}\n\nclass ConstObservable<T> extends ConvenientObservable<T, void> {\n\tconstructor(private readonly value: T) {\n\t\tsuper();\n\t}\n\n\tpublic override get debugName(): string {\n\t\treturn this.toString();\n\t}\n\n\tpublic get(): T {\n\t\treturn this.value;\n\t}\n\tpublic addObserver(observer: IObserver): void {\n\t\t// NO OP\n\t}\n\tpublic removeObserver(observer: IObserver): void {\n\t\t// NO OP\n\t}\n\n\toverride toString(): string {\n\t\treturn `Const: ${this.value}`;\n\t}\n}\n\n\nexport function observableFromPromise<T>(promise: Promise<T>): IObservable<{ value?: T }> {\n\tconst observable = observableValue<{ value?: T }>('promiseValue', {});\n\tpromise.then((value) => {\n\t\tobservable.set({ value }, undefined);\n\t});\n\treturn observable;\n}\n\nexport function waitForState<T, TState extends T>(observable: IObservable<T>, predicate: (state: T) => state is TState): Promise<TState>;\nexport function waitForState<T>(observable: IObservable<T>, predicate: (state: T) => boolean): Promise<T>;\nexport function waitForState<T>(observable: IObservable<T>, predicate: (state: T) => boolean): Promise<T> {\n\treturn new Promise(resolve => {\n\t\tlet didRun = false;\n\t\tlet shouldDispose = false;\n\t\tconst d = autorun(reader => {\n\t\t\t/** @description waitForState */\n\t\t\tconst currentState = observable.read(reader);\n\t\t\tif (predicate(currentState)) {\n\t\t\t\tif (!didRun) {\n\t\t\t\t\tshouldDispose = true;\n\t\t\t\t} else {\n\t\t\t\t\td.dispose();\n\t\t\t\t}\n\t\t\t\tresolve(currentState);\n\t\t\t}\n\t\t});\n\t\tdidRun = true;\n\t\tif (shouldDispose) {\n\t\t\td.dispose();\n\t\t}\n\t});\n}\n\nexport function observableFromEvent<T, TArgs = unknown>(\n\tevent: Event<TArgs>,\n\tgetValue: (args: TArgs | undefined) => T\n): IObservable<T> {\n\treturn new FromEventObservable(event, getValue);\n}\n\nexport class FromEventObservable<TArgs, T> extends BaseObservable<T> {\n\tprivate value: T | undefined;\n\tprivate hasValue = false;\n\tprivate subscription: IDisposable | undefined;\n\n\tconstructor(\n\t\tprivate readonly event: Event<TArgs>,\n\t\tpublic readonly _getValue: (args: TArgs | undefined) => T\n\t) {\n\t\tsuper();\n\t}\n\n\tprivate getDebugName(): string | undefined {\n\t\treturn getFunctionName(this._getValue);\n\t}\n\n\tpublic get debugName(): string {\n\t\tconst name = this.getDebugName();\n\t\treturn 'From Event' + (name ? `: ${name}` : '');\n\t}\n\n\tprotected override onFirstObserverAdded(): void {\n\t\tthis.subscription = this.event(this.handleEvent);\n\t}\n\n\tprivate readonly handleEvent = (args: TArgs | undefined) => {\n\t\tconst newValue = this._getValue(args);\n\n\t\tconst didChange = !this.hasValue || this.value !== newValue;\n\n\t\tgetLogger()?.handleFromEventObservableTriggered(this, { oldValue: this.value, newValue, change: undefined, didChange, hadValue: this.hasValue });\n\n\t\tif (didChange) {\n\t\t\tthis.value = newValue;\n\n\t\t\tif (this.hasValue) {\n\t\t\t\ttransaction(\n\t\t\t\t\t(tx) => {\n\t\t\t\t\t\tfor (const o of this.observers) {\n\t\t\t\t\t\t\ttx.updateObserver(o, this);\n\t\t\t\t\t\t\to.handleChange(this, undefined);\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\t() => {\n\t\t\t\t\t\tconst name = this.getDebugName();\n\t\t\t\t\t\treturn 'Event fired' + (name ? `: ${name}` : '');\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.hasValue = true;\n\t\t}\n\t};\n\n\tprotected override onLastObserverRemoved(): void {\n\t\tthis.subscription!.dispose();\n\t\tthis.subscription = undefined;\n\t\tthis.hasValue = false;\n\t\tthis.value = undefined;\n\t}\n\n\tpublic get(): T {\n\t\tif (this.subscription) {\n\t\t\tif (!this.hasValue) {\n\t\t\t\tthis.handleEvent(undefined);\n\t\t\t}\n\t\t\treturn this.value!;\n\t\t} else {\n\t\t\t// no cache, as there are no subscribers to keep it updated\n\t\t\treturn this._getValue(undefined);\n\t\t}\n\t}\n}\n\nexport namespace observableFromEvent {\n\texport const Observer = FromEventObservable;\n}\n\nexport function observableSignalFromEvent(\n\tdebugName: string,\n\tevent: Event<any>\n): IObservable<void> {\n\treturn new FromEventObservableSignal(debugName, event);\n}\n\nclass FromEventObservableSignal extends BaseObservable<void> {\n\tprivate subscription: IDisposable | undefined;\n\n\tconstructor(\n\t\tpublic readonly debugName: string,\n\t\tprivate readonly event: Event<any>,\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected override onFirstObserverAdded(): void {\n\t\tthis.subscription = this.event(this.handleEvent);\n\t}\n\n\tprivate readonly handleEvent = () => {\n\t\ttransaction(\n\t\t\t(tx) => {\n\t\t\t\tfor (const o of this.observers) {\n\t\t\t\t\ttx.updateObserver(o, this);\n\t\t\t\t\to.handleChange(this, undefined);\n\t\t\t\t}\n\t\t\t},\n\t\t\t() => this.debugName\n\t\t);\n\t};\n\n\tprotected override onLastObserverRemoved(): void {\n\t\tthis.subscription!.dispose();\n\t\tthis.subscription = undefined;\n\t}\n\n\tpublic override get(): void {\n\t\t// NO OP\n\t}\n}\n\n/**\n * Creates a signal that can be triggered to invalidate observers.\n * Signals don't have a value - when they are triggered they indicate a change.\n * However, signals can carry a delta that is passed to observers.\n */\nexport function observableSignal<TDelta = void>(debugName: string): IObservableSignal<TDelta>;\nexport function observableSignal<TDelta = void>(owner: object): IObservableSignal<TDelta>;\nexport function observableSignal<TDelta = void>(debugNameOrOwner: string | object): IObservableSignal<TDelta> {\n\tif (typeof debugNameOrOwner === 'string') {\n\t\treturn new ObservableSignal<TDelta>(debugNameOrOwner);\n\t} else {\n\t\treturn new ObservableSignal<TDelta>(undefined, debugNameOrOwner);\n\t}\n}\n\nexport interface IObservableSignal<TChange> extends IObservable<void, TChange> {\n\ttrigger(tx: ITransaction | undefined, change: TChange): void;\n}\n\nclass ObservableSignal<TChange> extends BaseObservable<void, TChange> implements IObservableSignal<TChange> {\n\tpublic get debugName() {\n\t\treturn getDebugName(this._debugName, undefined, this._owner, this) ?? 'Observable Signal';\n\t}\n\n\tconstructor(\n\t\tprivate readonly _debugName: string | undefined,\n\t\tprivate readonly _owner?: object,\n\t) {\n\t\tsuper();\n\t}\n\n\tpublic trigger(tx: ITransaction | undefined, change: TChange): void {\n\t\tif (!tx) {\n\t\t\ttransaction(tx => {\n\t\t\t\tthis.trigger(tx, change);\n\t\t\t}, () => `Trigger signal ${this.debugName}`);\n\t\t\treturn;\n\t\t}\n\n\t\tfor (const o of this.observers) {\n\t\t\ttx.updateObserver(o, this);\n\t\t\to.handleChange(this, change);\n\t\t}\n\t}\n\n\tpublic override get(): void {\n\t\t// NO OP\n\t}\n}\n\nexport function debouncedObservable<T>(observable: IObservable<T>, debounceMs: number, disposableStore: DisposableStore): IObservable<T | undefined> {\n\tconst debouncedObservable = observableValue<T | undefined>('debounced', undefined);\n\n\tlet timeout: any = undefined;\n\n\tdisposableStore.add(autorun(reader => {\n\t\t/** @description debounce */\n\t\tconst value = observable.read(reader);\n\n\t\tif (timeout) {\n\t\t\tclearTimeout(timeout);\n\t\t}\n\t\ttimeout = setTimeout(() => {\n\t\t\ttransaction(tx => {\n\t\t\t\tdebouncedObservable.set(value, tx);\n\t\t\t});\n\t\t}, debounceMs);\n\n\t}));\n\n\treturn debouncedObservable;\n}\n\nexport function wasEventTriggeredRecently(event: Event<any>, timeoutMs: number, disposableStore: DisposableStore): IObservable<boolean> {\n\tconst observable = observableValue('triggeredRecently', false);\n\n\tlet timeout: any = undefined;\n\n\tdisposableStore.add(event(() => {\n\t\tobservable.set(true, undefined);\n\n\t\tif (timeout) {\n\t\t\tclearTimeout(timeout);\n\t\t}\n\t\ttimeout = setTimeout(() => {\n\t\t\tobservable.set(false, undefined);\n\t\t}, timeoutMs);\n\t}));\n\n\treturn observable;\n}\n\n/**\n * This makes sure the observable is being observed and keeps its cache alive.\n */\nexport function keepObserved<T>(observable: IObservable<T>): IDisposable {\n\tconst o = new KeepAliveObserver(false);\n\tobservable.addObserver(o);\n\treturn toDisposable(() => {\n\t\tobservable.removeObserver(o);\n\t});\n}\n\n/**\n * This converts the given observable into an autorun.\n */\nexport function recomputeInitiallyAndOnChange<T>(observable: IObservable<T>): IDisposable {\n\tconst o = new KeepAliveObserver(true);\n\tobservable.addObserver(o);\n\tobservable.reportChanges();\n\n\treturn toDisposable(() => {\n\t\tobservable.removeObserver(o);\n\t});\n}\n\nclass KeepAliveObserver implements IObserver {\n\tprivate counter = 0;\n\n\tconstructor(private readonly forceRecompute: boolean) { }\n\n\tbeginUpdate<T>(observable: IObservable<T, void>): void {\n\t\tthis.counter++;\n\t}\n\n\tendUpdate<T>(observable: IObservable<T, void>): void {\n\t\tthis.counter--;\n\t\tif (this.counter === 0 && this.forceRecompute) {\n\t\t\tobservable.reportChanges();\n\t\t}\n\t}\n\n\thandlePossibleChange<T>(observable: IObservable<T, unknown>): void {\n\t\t// NO OP\n\t}\n\n\thandleChange<T, TChange>(observable: IObservable<T, TChange>, change: TChange): void {\n\t\t// NO OP\n\t}\n}\n\nexport function derivedObservableWithCache<T>(computeFn: (reader: IReader, lastValue: T | undefined) => T): IObservable<T> {\n\tlet lastValue: T | undefined = undefined;\n\tconst observable = derived(reader => {\n\t\tlastValue = computeFn(reader, lastValue);\n\t\treturn lastValue;\n\t});\n\treturn observable;\n}\n\nexport function derivedObservableWithWritableCache<T>(owner: object, computeFn: (reader: IReader, lastValue: T | undefined) => T): IObservable<T> & { clearCache(transaction: ITransaction): void } {\n\tlet lastValue: T | undefined = undefined;\n\tconst counter = observableValue('derivedObservableWithWritableCache.counter', 0);\n\tconst observable = derived(owner, reader => {\n\t\tcounter.read(reader);\n\t\tlastValue = computeFn(reader, lastValue);\n\t\treturn lastValue;\n\t});\n\treturn Object.assign(observable, {\n\t\tclearCache: (transaction: ITransaction) => {\n\t\t\tlastValue = undefined;\n\t\t\tcounter.set(counter.get() + 1, transaction);\n\t\t},\n\t});\n}\n"]}