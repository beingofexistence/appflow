{"version":3,"sources":["file:///workspace/appflow/src/vs/base/common/stopwatch.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAKhG,MAAM,iBAAiB,GAAG,CAAC,UAAU,CAAC,WAAW,IAAI,OAAO,UAAU,CAAC,WAAW,CAAC,GAAG,KAAK,UAAU,CAAC,CAAC;IAEvG,MAAa,GAAG;QAOR,MAAM,CAAC,MAAM,CAAC,cAAwB;YAC5C,OAAO,IAAI,GAAG,CAAO,cAAc,CAAC,CAAC;QACtC,CAAC;QAED,YAAY,cAAwB;YACnC,IAAI,CAAC,CAAC,GAAM,iBAAiB,IAAI,cAAc,KAAK,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,UAAU,CAAC,WAAY,CAAC,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;YAChI,IAAI,CAAC,CAAC,GAAY,IAAI,CAAC,CAAC,EAAK,CAAC;YAC9B,IAAI,CAAC,CAAC,GAAW,CAAC,CAAC,CAAC;QACrB,CAAC;QAEM,IAAI;YACV,IAAI,CAAC,CAAC,GAAW,IAAI,CAAC,CAAC,EAAK,CAAC;QAC9B,CAAC;QAEM,KAAK;YACX,IAAI,CAAC,CAAC,GAAY,IAAI,CAAC,CAAC,EAAK,CAAC;YAC9B,IAAI,CAAC,CAAC,GAAW,CAAC,CAAC,CAAC;QACrB,CAAC;QAEM,OAAO;YACb,IAAI,IAAI,CAAC,CAAC,KAAa,CAAC,CAAC,EAAE;gBAC1B,OAAO,IAAI,CAAC,CAAC,GAAW,IAAI,CAAC,CAAC,CAAU;aACxC;YACD,OAAO,IAAI,CAAC,CAAC,EAAK,GAAG,IAAI,CAAC,CAAC,CAAU;QACtC,CAAC;KACD;IAhCD,kBAgCC","file":"stopwatch.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// fake definition so that the valid layers check won't trip on this\ndeclare const globalThis: { performance?: { now(): number } };\n\nconst hasPerformanceNow = (globalThis.performance && typeof globalThis.performance.now === 'function');\n\nexport class StopWatch {\n\n\tprivate _startTime: number;\n\tprivate _stopTime: number;\n\n\tprivate readonly _now: () => number;\n\n\tpublic static create(highResolution?: boolean): StopWatch {\n\t\treturn new StopWatch(highResolution);\n\t}\n\n\tconstructor(highResolution?: boolean) {\n\t\tthis._now = hasPerformanceNow && highResolution === false ? Date.now : globalThis.performance!.now.bind(globalThis.performance);\n\t\tthis._startTime = this._now();\n\t\tthis._stopTime = -1;\n\t}\n\n\tpublic stop(): void {\n\t\tthis._stopTime = this._now();\n\t}\n\n\tpublic reset(): void {\n\t\tthis._startTime = this._now();\n\t\tthis._stopTime = -1;\n\t}\n\n\tpublic elapsed(): number {\n\t\tif (this._stopTime !== -1) {\n\t\t\treturn this._stopTime - this._startTime;\n\t\t}\n\t\treturn this._now() - this._startTime;\n\t}\n}\n"]}