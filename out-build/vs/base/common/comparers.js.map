{"version":3,"sources":["file:///workspace/appflow/src/vs/base/common/comparers.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAKhG,mFAAmF;IACnF,6EAA6E;IAC7E,qDAAqD;IAErD,8FAA8F;IAC9F,MAAM,+BAA+B,GAAkE,IAAI,SAAE,CAAG,GAAG,EAAE;QACpH,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,MAAM,EAAE,CAAC,CAAC;QACtF,OAAO;YACN,QAAQ;YACR,iBAAiB,EAAE,QAAQ,CAAC,eAAe,EAAE,CAAC,OAAO;SACrD,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,2CAA2C;IAC3C,MAAM,2BAA2B,GAAsC,IAAI,SAAE,CAAG,GAAG,EAAE;QACpF,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;QACjE,OAAO;YACN,QAAQ;SACR,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,mGAAmG;IACnG,MAAM,0CAA0C,GAAsC,IAAI,SAAE,CAAG,GAAG,EAAE;QACnG,MAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,QAAQ,EAAE,CAAC,CAAC;QACxF,OAAO;YACN,QAAQ;SACR,CAAC;IACH,CAAC,CAAC,CAAC;IAEH,kHAAkH;IAClH,SAAgB,GAAG,CAAc,GAAkB,EAAE,KAAoB,EAAE,aAAa,GAAG,KAAK;QAC/F,MAAM,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC;QACpB,MAAM,CAAC,GAAG,KAAK,IAAI,EAAE,CAAC;QACtB,MAAM,MAAM,GAAG,+BAA+B,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAE5E,mFAAmF;QACnF,IAAI,+BAA+B,CAAC,KAAK,CAAC,iBAAiB,IAAI,MAAM,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;YACvF,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACtB;QAED,OAAO,MAAM,CAAC;IACf,CAAC;IAXD,kBAWC;IAED,wDAAwD;IACxD,SAAgB,GAAG,CAAqB,GAAkB,EAAE,KAAoB;QAC/E,MAAM,eAAe,GAAG,2BAA2B,CAAC,KAAK,CAAC,QAAQ,CAAC;QACnE,GAAG,GAAG,GAAG,IAAI,EAAE,CAAC;QAChB,KAAK,GAAG,KAAK,IAAI,EAAE,CAAC;QAEpB,OAAO,8BAA8B,CAAC,eAAe,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;IACpE,CAAC;IAND,kBAMC;IAED,yEAAyE;IACzE,SAAgB,GAAG,CAAmB,GAAkB,EAAE,KAAoB;QAC7E,MAAM,eAAe,GAAG,2BAA2B,CAAC,KAAK,CAAC,QAAQ,CAAC;QACnE,GAAG,GAAG,GAAG,IAAI,EAAE,CAAC;QAChB,KAAK,GAAG,KAAK,IAAI,EAAE,CAAC;QAEpB,OAAO,qBAAqB,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,8BAA8B,CAAC,eAAe,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;IACzG,CAAC;IAND,kBAMC;IAED,yEAAyE;IACzE,SAAgB,GAAG,CAAmB,GAAkB,EAAE,KAAoB;QAC7E,MAAM,eAAe,GAAG,2BAA2B,CAAC,KAAK,CAAC,QAAQ,CAAC;QACnE,GAAG,GAAG,GAAG,IAAI,EAAE,CAAC;QAChB,KAAK,GAAG,KAAK,IAAI,EAAE,CAAC;QAEpB,OAAO,qBAAqB,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,8BAA8B,CAAC,eAAe,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;IACzG,CAAC;IAND,kBAMC;IAED,gDAAgD;IAChD,SAAgB,GAAG,CAAqB,GAAkB,EAAE,KAAoB;QAC/E,GAAG,GAAG,GAAG,IAAI,EAAE,CAAC;QAChB,KAAK,GAAG,KAAK,IAAI,EAAE,CAAC;QAEpB,IAAI,GAAG,KAAK,KAAK,EAAE;YAClB,OAAO,CAAC,CAAC;SACT;QAED,OAAO,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC;IATD,kBASC;IAED,0FAA0F;IAC1F,SAAgB,GAAG,CAAmB,GAAkB,EAAE,KAAoB;QAC7E,MAAM,CAAC,OAAO,EAAE,YAAY,CAAC,GAAG,uBAAuB,CAAC,GAAG,CAAC,CAAC;QAC7D,MAAM,CAAC,SAAS,EAAE,cAAc,CAAC,GAAG,uBAAuB,CAAC,KAAK,CAAC,CAAC;QAEnE,IAAI,MAAM,GAAG,+BAA+B,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;QAElG,IAAI,MAAM,KAAK,CAAC,EAAE;YACjB,oFAAoF;YACpF,IAAI,+BAA+B,CAAC,KAAK,CAAC,iBAAiB,IAAI,YAAY,KAAK,cAAc,EAAE;gBAC/F,OAAO,YAAY,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aAC9C;YAED,0CAA0C;YAC1C,MAAM,GAAG,+BAA+B,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;YAEpF,IAAI,+BAA+B,CAAC,KAAK,CAAC,iBAAiB,IAAI,MAAM,KAAK,CAAC,IAAI,OAAO,KAAK,SAAS,EAAE;gBACrG,OAAO,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACpC;SACD;QAED,OAAO,MAAM,CAAC;IACf,CAAC;IArBD,kBAqBC;IAED,4GAA4G;IAC5G,SAAgB,GAAG,CAA0B,GAAkB,EAAE,KAAoB;QACpF,GAAG,GAAG,GAAG,IAAI,EAAE,CAAC;QAChB,KAAK,GAAG,KAAK,IAAI,EAAE,CAAC;QACpB,MAAM,YAAY,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAC3C,MAAM,cAAc,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC/C,MAAM,eAAe,GAAG,2BAA2B,CAAC,KAAK,CAAC,QAAQ,CAAC;QACnE,MAAM,8BAA8B,GAAG,0CAA0C,CAAC,KAAK,CAAC,QAAQ,CAAC;QAEjG,OAAO,8BAA8B,CAAC,8BAA8B,EAAE,YAAY,EAAE,cAAc,CAAC;YAClG,8BAA8B,CAAC,eAAe,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;IAC9D,CAAC;IAVD,kBAUC;IAED,+GAA+G;IAC/G,SAAgB,GAAG,CAAwB,GAAkB,EAAE,KAAoB;QAClF,GAAG,GAAG,GAAG,IAAI,EAAE,CAAC;QAChB,KAAK,GAAG,KAAK,IAAI,EAAE,CAAC;QACpB,MAAM,YAAY,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAC3C,MAAM,cAAc,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC/C,MAAM,eAAe,GAAG,2BAA2B,CAAC,KAAK,CAAC,QAAQ,CAAC;QACnE,MAAM,8BAA8B,GAAG,0CAA0C,CAAC,KAAK,CAAC,QAAQ,CAAC;QAEjG,OAAO,8BAA8B,CAAC,8BAA8B,EAAE,YAAY,EAAE,cAAc,CAAC;YAClG,qBAAqB,CAAC,GAAG,EAAE,KAAK,CAAC;YACjC,8BAA8B,CAAC,eAAe,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;IAC9D,CAAC;IAXD,kBAWC;IAED,+GAA+G;IAC/G,SAAgB,GAAG,CAAwB,GAAkB,EAAE,KAAoB;QAClF,GAAG,GAAG,GAAG,IAAI,EAAE,CAAC;QAChB,KAAK,GAAG,KAAK,IAAI,EAAE,CAAC;QACpB,MAAM,YAAY,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC;QAC3C,MAAM,cAAc,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC/C,MAAM,eAAe,GAAG,2BAA2B,CAAC,KAAK,CAAC,QAAQ,CAAC;QACnE,MAAM,8BAA8B,GAAG,0CAA0C,CAAC,KAAK,CAAC,QAAQ,CAAC;QAEjG,OAAO,8BAA8B,CAAC,8BAA8B,EAAE,YAAY,EAAE,cAAc,CAAC;YAClG,qBAAqB,CAAC,GAAG,EAAE,KAAK,CAAC;YACjC,8BAA8B,CAAC,eAAe,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;IAC9D,CAAC;IAXD,kBAWC;IAED,2GAA2G;IAC3G,SAAgB,GAAG,CAA0B,GAAkB,EAAE,KAAoB;QACpF,GAAG,GAAG,GAAG,IAAI,EAAE,CAAC;QAChB,KAAK,GAAG,KAAK,IAAI,EAAE,CAAC;QACpB,MAAM,YAAY,GAAG,gBAAgB,CAAC,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;QACzD,MAAM,cAAc,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,CAAC;QAE7D,kCAAkC;QAClC,IAAI,YAAY,KAAK,cAAc,EAAE;YACpC,OAAO,YAAY,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAC9C;QAED,uCAAuC;QACvC,IAAI,GAAG,KAAK,KAAK,EAAE;YAClB,OAAO,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAC5B;QAED,OAAO,CAAC,CAAC;IACV,CAAC;IAjBD,kBAiBC;IAED,MAAM,aAAa,GAAG,qBAAqB,CAAC;IAE5C,wGAAwG;IACxG,SAAS,uBAAuB,CAAC,GAAmB,EAAE,eAAe,GAAG,KAAK;QAC5E,MAAM,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAkB,CAAC,CAAC,CAAE,EAAoB,CAAC;QAErF,IAAI,MAAM,GAAqB,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;QAEtF,uFAAuF;QACvF,0DAA0D;QAC1D,IAAI,eAAe,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,EAAE;YAC7F,MAAM,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;SAC3C;QAED,OAAO,MAAM,CAAC;IACf,CAAC;IAED,6FAA6F;IAC7F,SAAS,gBAAgB,CAAC,GAAmB;QAC5C,MAAM,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAkB,CAAC,CAAC,CAAE,EAAoB,CAAC;QAErF,OAAO,CAAC,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;IAC5E,CAAC;IAED,SAAS,8BAA8B,CAAC,QAAuB,EAAE,GAAW,EAAE,KAAa;QAC1F,wBAAwB;QACxB,MAAM,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QAC5C,IAAI,MAAM,KAAK,CAAC,EAAE;YACjB,OAAO,MAAM,CAAC;SACd;QAED,0EAA0E;QAC1E,oDAAoD;QACpD,IAAI,GAAG,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,EAAE;YAChC,OAAO,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SAC1C;QAED,OAAO,CAAC,CAAC;IACV,CAAC;IAED,2FAA2F;IAC3F,SAAS,eAAe,CAAC,MAAc;QACtC,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAEnC,OAAO,CAAC,SAAS,CAAC,iBAAiB,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;IACrE,CAAC;IAED,yFAAyF;IACzF,SAAS,eAAe,CAAC,MAAc;QACtC,MAAM,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QAEnC,OAAO,CAAC,SAAS,CAAC,iBAAiB,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;IACrE,CAAC;IAED;;;;;;;;;OASG;IACH,SAAS,qBAAqB,CAAC,GAAW,EAAE,KAAa;QACxD,IAAI,eAAe,CAAC,GAAG,CAAC,IAAI,eAAe,CAAC,KAAK,CAAC,EAAE;YACnD,OAAO,CAAC,CAAC,CAAC;SACV;QACD,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACjE,CAAC;IAED;;;;;;;;;OASG;IACH,SAAS,qBAAqB,CAAC,GAAW,EAAE,KAAa;QACxD,IAAI,eAAe,CAAC,GAAG,CAAC,IAAI,eAAe,CAAC,KAAK,CAAC,EAAE;YACnD,OAAO,CAAC,CAAC,CAAC;SACV;QACD,OAAO,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACjE,CAAC;IAED,SAAS,qBAAqB,CAAC,GAAW,EAAE,KAAa,EAAE,aAAa,GAAG,KAAK;QAC/E,IAAI,CAAC,aAAa,EAAE;YACnB,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC,WAAW,EAAE,CAAC;YAC/B,KAAK,GAAG,KAAK,IAAI,KAAK,CAAC,WAAW,EAAE,CAAC;SACrC;QAED,IAAI,GAAG,KAAK,KAAK,EAAE;YAClB,OAAO,CAAC,CAAC;SACT;QAED,OAAO,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC7B,CAAC;IAED,SAAgB,GAAG,CAAU,GAAW,EAAE,KAAa,EAAE,aAAa,GAAG,KAAK;QAC7E,MAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,UAAG,CAAC,CAAC;QAChC,MAAM,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,UAAG,CAAC,CAAC;QAEpC,MAAM,OAAO,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;QACpC,MAAM,SAAS,GAAG,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;QACxC,IAAI,MAAe,EAAE,QAAiB,CAAC;QAEvC,KAAK,IAAI,CAAC,GAAG,CAAC,GAAI,CAAC,EAAE,EAAE;YACtB,MAAM,GAAG,OAAO,KAAK,CAAC,CAAC;YACvB,QAAQ,GAAG,SAAS,KAAK,CAAC,CAAC;YAE3B,IAAI,MAAM,IAAI,QAAQ,EAAE;gBACvB,OAAO,GAAG,CAAc,QAAQ,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;aACnE;iBAAM,IAAI,MAAM,EAAE;gBAClB,OAAO,CAAC,CAAC,CAAC;aACV;iBAAM,IAAI,QAAQ,EAAE;gBACpB,OAAO,CAAC,CAAC;aACT;YAED,MAAM,MAAM,GAAG,qBAAqB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;YAEhF,IAAI,MAAM,KAAK,CAAC,EAAE;gBACjB,OAAO,MAAM,CAAC;aACd;SACD;IACF,CAAC;IA1BD,kBA0BC;IAED,SAAgB,GAAG,CAAa,GAAW,EAAE,KAAa,EAAE,OAAe;QAC1E,MAAM,YAAY,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;QACvC,MAAM,YAAY,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;QAEzC,8CAA8C;QAC9C,MAAM,aAAa,GAAG,GAAG,CAAa,GAAG,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;QAC3D,IAAI,aAAa,EAAE;YAClB,OAAO,aAAa,CAAC;SACrB;QAED,8CAA8C;QAC9C,MAAM,mBAAmB,GAAG,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC3D,MAAM,mBAAmB,GAAG,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAC3D,IAAI,mBAAmB,KAAK,mBAAmB,EAAE;YAChD,OAAO,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACpC;QAED,wBAAwB;QACxB,MAAM,CAAC,GAAG,GAAG,CAAc,YAAY,EAAE,YAAY,CAAC,CAAC;QACvD,IAAI,CAAC,KAAK,CAAC,EAAE;YACZ,OAAO,CAAC,CAAC;SACT;QAED,kBAAkB;QAClB,OAAO,YAAY,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;IACjD,CAAC;IAzBD,kBAyBC;IAED,SAAgB,GAAG,CAAa,GAAW,EAAE,KAAa,EAAE,OAAe;QAC1E,MAAM,YAAY,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;QACvC,MAAM,YAAY,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;QAEzC,8CAA8C;QAC9C,MAAM,mBAAmB,GAAG,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC7D,MAAM,mBAAmB,GAAG,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;QAC7D,IAAI,mBAAmB,KAAK,mBAAmB,EAAE;YAChD,OAAO,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACpC;QAED,8FAA8F;aACzF,IAAI,mBAAmB,IAAI,mBAAmB,EAAE;YACpD,IAAI,YAAY,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,EAAE;gBAC9C,OAAO,CAAC,CAAC,CAAC;aACV;YAED,IAAI,YAAY,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,EAAE;gBAC9C,OAAO,CAAC,CAAC;aACT;SACD;QAED,OAAO,CAAC,CAAC;IACV,CAAC;IAvBD,kBAuBC","file":"comparers.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Lazy } from 'vs/base/common/lazy';\nimport { sep } from 'vs/base/common/path';\n\n// When comparing large numbers of strings it's better for performance to create an\n// Intl.Collator object and use the function provided by its compare property\n// than it is to use String.prototype.localeCompare()\n\n// A collator with numeric sorting enabled, and no sensitivity to case, accents or diacritics.\nconst intlFileNameCollatorBaseNumeric: Lazy<{ collator: Intl.Collator; collatorIsNumeric: boolean }> = new Lazy(() => {\n\tconst collator = new Intl.Collator(undefined, { numeric: true, sensitivity: 'base' });\n\treturn {\n\t\tcollator,\n\t\tcollatorIsNumeric: collator.resolvedOptions().numeric\n\t};\n});\n\n// A collator with numeric sorting enabled.\nconst intlFileNameCollatorNumeric: Lazy<{ collator: Intl.Collator }> = new Lazy(() => {\n\tconst collator = new Intl.Collator(undefined, { numeric: true });\n\treturn {\n\t\tcollator\n\t};\n});\n\n// A collator with numeric sorting enabled, and sensitivity to accents and diacritics but not case.\nconst intlFileNameCollatorNumericCaseInsensitive: Lazy<{ collator: Intl.Collator }> = new Lazy(() => {\n\tconst collator = new Intl.Collator(undefined, { numeric: true, sensitivity: 'accent' });\n\treturn {\n\t\tcollator\n\t};\n});\n\n/** Compares filenames without distinguishing the name from the extension. Disambiguates by unicode comparison. */\nexport function compareFileNames(one: string | null, other: string | null, caseSensitive = false): number {\n\tconst a = one || '';\n\tconst b = other || '';\n\tconst result = intlFileNameCollatorBaseNumeric.value.collator.compare(a, b);\n\n\t// Using the numeric option will make compare(`foo1`, `foo01`) === 0. Disambiguate.\n\tif (intlFileNameCollatorBaseNumeric.value.collatorIsNumeric && result === 0 && a !== b) {\n\t\treturn a < b ? -1 : 1;\n\t}\n\n\treturn result;\n}\n\n/** Compares full filenames without grouping by case. */\nexport function compareFileNamesDefault(one: string | null, other: string | null): number {\n\tconst collatorNumeric = intlFileNameCollatorNumeric.value.collator;\n\tone = one || '';\n\tother = other || '';\n\n\treturn compareAndDisambiguateByLength(collatorNumeric, one, other);\n}\n\n/** Compares full filenames grouping uppercase names before lowercase. */\nexport function compareFileNamesUpper(one: string | null, other: string | null) {\n\tconst collatorNumeric = intlFileNameCollatorNumeric.value.collator;\n\tone = one || '';\n\tother = other || '';\n\n\treturn compareCaseUpperFirst(one, other) || compareAndDisambiguateByLength(collatorNumeric, one, other);\n}\n\n/** Compares full filenames grouping lowercase names before uppercase. */\nexport function compareFileNamesLower(one: string | null, other: string | null) {\n\tconst collatorNumeric = intlFileNameCollatorNumeric.value.collator;\n\tone = one || '';\n\tother = other || '';\n\n\treturn compareCaseLowerFirst(one, other) || compareAndDisambiguateByLength(collatorNumeric, one, other);\n}\n\n/** Compares full filenames by unicode value. */\nexport function compareFileNamesUnicode(one: string | null, other: string | null) {\n\tone = one || '';\n\tother = other || '';\n\n\tif (one === other) {\n\t\treturn 0;\n\t}\n\n\treturn one < other ? -1 : 1;\n}\n\n/** Compares filenames by extension, then by name. Disambiguates by unicode comparison. */\nexport function compareFileExtensions(one: string | null, other: string | null): number {\n\tconst [oneName, oneExtension] = extractNameAndExtension(one);\n\tconst [otherName, otherExtension] = extractNameAndExtension(other);\n\n\tlet result = intlFileNameCollatorBaseNumeric.value.collator.compare(oneExtension, otherExtension);\n\n\tif (result === 0) {\n\t\t// Using the numeric option will  make compare(`foo1`, `foo01`) === 0. Disambiguate.\n\t\tif (intlFileNameCollatorBaseNumeric.value.collatorIsNumeric && oneExtension !== otherExtension) {\n\t\t\treturn oneExtension < otherExtension ? -1 : 1;\n\t\t}\n\n\t\t// Extensions are equal, compare filenames\n\t\tresult = intlFileNameCollatorBaseNumeric.value.collator.compare(oneName, otherName);\n\n\t\tif (intlFileNameCollatorBaseNumeric.value.collatorIsNumeric && result === 0 && oneName !== otherName) {\n\t\t\treturn oneName < otherName ? -1 : 1;\n\t\t}\n\t}\n\n\treturn result;\n}\n\n/** Compares filenames by extension, then by full filename. Mixes uppercase and lowercase names together. */\nexport function compareFileExtensionsDefault(one: string | null, other: string | null): number {\n\tone = one || '';\n\tother = other || '';\n\tconst oneExtension = extractExtension(one);\n\tconst otherExtension = extractExtension(other);\n\tconst collatorNumeric = intlFileNameCollatorNumeric.value.collator;\n\tconst collatorNumericCaseInsensitive = intlFileNameCollatorNumericCaseInsensitive.value.collator;\n\n\treturn compareAndDisambiguateByLength(collatorNumericCaseInsensitive, oneExtension, otherExtension) ||\n\t\tcompareAndDisambiguateByLength(collatorNumeric, one, other);\n}\n\n/** Compares filenames by extension, then case, then full filename. Groups uppercase names before lowercase. */\nexport function compareFileExtensionsUpper(one: string | null, other: string | null): number {\n\tone = one || '';\n\tother = other || '';\n\tconst oneExtension = extractExtension(one);\n\tconst otherExtension = extractExtension(other);\n\tconst collatorNumeric = intlFileNameCollatorNumeric.value.collator;\n\tconst collatorNumericCaseInsensitive = intlFileNameCollatorNumericCaseInsensitive.value.collator;\n\n\treturn compareAndDisambiguateByLength(collatorNumericCaseInsensitive, oneExtension, otherExtension) ||\n\t\tcompareCaseUpperFirst(one, other) ||\n\t\tcompareAndDisambiguateByLength(collatorNumeric, one, other);\n}\n\n/** Compares filenames by extension, then case, then full filename. Groups lowercase names before uppercase. */\nexport function compareFileExtensionsLower(one: string | null, other: string | null): number {\n\tone = one || '';\n\tother = other || '';\n\tconst oneExtension = extractExtension(one);\n\tconst otherExtension = extractExtension(other);\n\tconst collatorNumeric = intlFileNameCollatorNumeric.value.collator;\n\tconst collatorNumericCaseInsensitive = intlFileNameCollatorNumericCaseInsensitive.value.collator;\n\n\treturn compareAndDisambiguateByLength(collatorNumericCaseInsensitive, oneExtension, otherExtension) ||\n\t\tcompareCaseLowerFirst(one, other) ||\n\t\tcompareAndDisambiguateByLength(collatorNumeric, one, other);\n}\n\n/** Compares filenames by case-insensitive extension unicode value, then by full filename unicode value. */\nexport function compareFileExtensionsUnicode(one: string | null, other: string | null) {\n\tone = one || '';\n\tother = other || '';\n\tconst oneExtension = extractExtension(one).toLowerCase();\n\tconst otherExtension = extractExtension(other).toLowerCase();\n\n\t// Check for extension differences\n\tif (oneExtension !== otherExtension) {\n\t\treturn oneExtension < otherExtension ? -1 : 1;\n\t}\n\n\t// Check for full filename differences.\n\tif (one !== other) {\n\t\treturn one < other ? -1 : 1;\n\t}\n\n\treturn 0;\n}\n\nconst FileNameMatch = /^(.*?)(\\.([^.]*))?$/;\n\n/** Extracts the name and extension from a full filename, with optional special handling for dotfiles */\nfunction extractNameAndExtension(str?: string | null, dotfilesAsNames = false): [string, string] {\n\tconst match = str ? FileNameMatch.exec(str) as Array<string> : ([] as Array<string>);\n\n\tlet result: [string, string] = [(match && match[1]) || '', (match && match[3]) || ''];\n\n\t// if the dotfilesAsNames option is selected, treat an empty filename with an extension\n\t// or a filename that starts with a dot, as a dotfile name\n\tif (dotfilesAsNames && (!result[0] && result[1] || result[0] && result[0].charAt(0) === '.')) {\n\t\tresult = [result[0] + '.' + result[1], ''];\n\t}\n\n\treturn result;\n}\n\n/** Extracts the extension from a full filename. Treats dotfiles as names, not extensions. */\nfunction extractExtension(str?: string | null): string {\n\tconst match = str ? FileNameMatch.exec(str) as Array<string> : ([] as Array<string>);\n\n\treturn (match && match[1] && match[1].charAt(0) !== '.' && match[3]) || '';\n}\n\nfunction compareAndDisambiguateByLength(collator: Intl.Collator, one: string, other: string) {\n\t// Check for differences\n\tconst result = collator.compare(one, other);\n\tif (result !== 0) {\n\t\treturn result;\n\t}\n\n\t// In a numeric comparison, `foo1` and `foo01` will compare as equivalent.\n\t// Disambiguate by sorting the shorter string first.\n\tif (one.length !== other.length) {\n\t\treturn one.length < other.length ? -1 : 1;\n\t}\n\n\treturn 0;\n}\n\n/** @returns `true` if the string is starts with a lowercase letter. Otherwise, `false`. */\nfunction startsWithLower(string: string) {\n\tconst character = string.charAt(0);\n\n\treturn (character.toLocaleUpperCase() !== character) ? true : false;\n}\n\n/** @returns `true` if the string starts with an uppercase letter. Otherwise, `false`. */\nfunction startsWithUpper(string: string) {\n\tconst character = string.charAt(0);\n\n\treturn (character.toLocaleLowerCase() !== character) ? true : false;\n}\n\n/**\n * Compares the case of the provided strings - lowercase before uppercase\n *\n * @returns\n * ```text\n *   -1 if one is lowercase and other is uppercase\n *    1 if one is uppercase and other is lowercase\n *    0 otherwise\n * ```\n */\nfunction compareCaseLowerFirst(one: string, other: string): number {\n\tif (startsWithLower(one) && startsWithUpper(other)) {\n\t\treturn -1;\n\t}\n\treturn (startsWithUpper(one) && startsWithLower(other)) ? 1 : 0;\n}\n\n/**\n * Compares the case of the provided strings - uppercase before lowercase\n *\n * @returns\n * ```text\n *   -1 if one is uppercase and other is lowercase\n *    1 if one is lowercase and other is uppercase\n *    0 otherwise\n * ```\n */\nfunction compareCaseUpperFirst(one: string, other: string): number {\n\tif (startsWithUpper(one) && startsWithLower(other)) {\n\t\treturn -1;\n\t}\n\treturn (startsWithLower(one) && startsWithUpper(other)) ? 1 : 0;\n}\n\nfunction comparePathComponents(one: string, other: string, caseSensitive = false): number {\n\tif (!caseSensitive) {\n\t\tone = one && one.toLowerCase();\n\t\tother = other && other.toLowerCase();\n\t}\n\n\tif (one === other) {\n\t\treturn 0;\n\t}\n\n\treturn one < other ? -1 : 1;\n}\n\nexport function comparePaths(one: string, other: string, caseSensitive = false): number {\n\tconst oneParts = one.split(sep);\n\tconst otherParts = other.split(sep);\n\n\tconst lastOne = oneParts.length - 1;\n\tconst lastOther = otherParts.length - 1;\n\tlet endOne: boolean, endOther: boolean;\n\n\tfor (let i = 0; ; i++) {\n\t\tendOne = lastOne === i;\n\t\tendOther = lastOther === i;\n\n\t\tif (endOne && endOther) {\n\t\t\treturn compareFileNames(oneParts[i], otherParts[i], caseSensitive);\n\t\t} else if (endOne) {\n\t\t\treturn -1;\n\t\t} else if (endOther) {\n\t\t\treturn 1;\n\t\t}\n\n\t\tconst result = comparePathComponents(oneParts[i], otherParts[i], caseSensitive);\n\n\t\tif (result !== 0) {\n\t\t\treturn result;\n\t\t}\n\t}\n}\n\nexport function compareAnything(one: string, other: string, lookFor: string): number {\n\tconst elementAName = one.toLowerCase();\n\tconst elementBName = other.toLowerCase();\n\n\t// Sort prefix matches over non prefix matches\n\tconst prefixCompare = compareByPrefix(one, other, lookFor);\n\tif (prefixCompare) {\n\t\treturn prefixCompare;\n\t}\n\n\t// Sort suffix matches over non suffix matches\n\tconst elementASuffixMatch = elementAName.endsWith(lookFor);\n\tconst elementBSuffixMatch = elementBName.endsWith(lookFor);\n\tif (elementASuffixMatch !== elementBSuffixMatch) {\n\t\treturn elementASuffixMatch ? -1 : 1;\n\t}\n\n\t// Understand file names\n\tconst r = compareFileNames(elementAName, elementBName);\n\tif (r !== 0) {\n\t\treturn r;\n\t}\n\n\t// Compare by name\n\treturn elementAName.localeCompare(elementBName);\n}\n\nexport function compareByPrefix(one: string, other: string, lookFor: string): number {\n\tconst elementAName = one.toLowerCase();\n\tconst elementBName = other.toLowerCase();\n\n\t// Sort prefix matches over non prefix matches\n\tconst elementAPrefixMatch = elementAName.startsWith(lookFor);\n\tconst elementBPrefixMatch = elementBName.startsWith(lookFor);\n\tif (elementAPrefixMatch !== elementBPrefixMatch) {\n\t\treturn elementAPrefixMatch ? -1 : 1;\n\t}\n\n\t// Same prefix: Sort shorter matches to the top to have those on top that match more precisely\n\telse if (elementAPrefixMatch && elementBPrefixMatch) {\n\t\tif (elementAName.length < elementBName.length) {\n\t\t\treturn -1;\n\t\t}\n\n\t\tif (elementAName.length > elementBName.length) {\n\t\t\treturn 1;\n\t\t}\n\t}\n\n\treturn 0;\n}\n"]}