{"version":3,"sources":["file:///workspace/appflow/src/vs/base/common/hotReload.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAKhG,SAAgB,GAAG;QAClB,OAAO,CAAC,CAAC,aAAG,CAAC,YAAY,CAAC,CAAC;IAC5B,CAAC;IAFD,kBAEC;IACD,SAAgB,GAAG,CAAsB,OAAyB;QACjE,IAAI,CAAC,GAAG,EAAiB,EAAE;YAC1B,OAAO,EAAE,OAAO,KAAK,CAAC,EAAE,CAAC;SACzB;aAAM;YACN,MAAM,QAAQ,GAAG,8BAA8B,EAAE,CAAC;YAElD,QAAQ,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACtB,OAAO;gBACN,OAAO,KAAK,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;aACvC,CAAC;SACF;IACF,CAAC;IAXD,kBAWC;IAWD,SAAS,8BAA8B;QACtC,IAAI,CAAC,iBAAiB,EAAE;YACvB,iBAAiB,GAAG,IAAI,GAAG,EAAE,CAAC;SAC9B;QAED,MAAM,CAAC,GAAG,UAA2C,CAAC;QACtD,IAAI,CAAC,CAAC,CAAC,0BAA0B,EAAE;YAClC,CAAC,CAAC,0BAA0B,GAAG,UAAU,CAAC,EAAE;gBAC3C,KAAK,MAAM,CAAC,IAAI,iBAAkB,EAAE;oBACnC,MAAM,MAAM,GAAG,CAAC,CAAC,UAAU,CAAC,CAAC;oBAC7B,IAAI,MAAM,EAAE;wBAAE,OAAO,MAAM,CAAC;qBAAE;iBAC9B;gBACD,OAAO,SAAS,CAAC;YAClB,CAAC,CAAC;SACF;QAED,OAAO,iBAAiB,CAAC;IAC1B,CAAC;IAED,IAAI,iBAAiB,GAA6F,SAAS,CAAC","file":"hotReload.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { env } from 'vs/base/common/process';\n\nexport function isHotReloadEnabled(): boolean {\n\treturn !!env['VSCODE_DEV'];\n}\nexport function registerHotReloadHandler(handler: HotReloadHandler): IDisposable {\n\tif (!isHotReloadEnabled()) {\n\t\treturn { dispose() { } };\n\t} else {\n\t\tconst handlers = registerGlobalHotReloadHandler();\n\n\t\thandlers.add(handler);\n\t\treturn {\n\t\t\tdispose() { handlers.delete(handler); }\n\t\t};\n\t}\n}\n\n/**\n * Takes the old exports of the module to reload and returns a function to apply the new exports.\n * If `undefined` is returned, this handler is not able to handle the module.\n *\n * If no handler can apply the new exports, the module will not be reloaded.\n */\nexport type HotReloadHandler = (oldExports: Record<string, unknown>) => AcceptNewExportsHandler | undefined;\nexport type AcceptNewExportsHandler = (newExports: Record<string, unknown>) => boolean;\n\nfunction registerGlobalHotReloadHandler() {\n\tif (!hotReloadHandlers) {\n\t\thotReloadHandlers = new Set();\n\t}\n\n\tconst g = globalThis as unknown as GlobalThisAddition;\n\tif (!g.$hotReload_applyNewExports) {\n\t\tg.$hotReload_applyNewExports = oldExports => {\n\t\t\tfor (const h of hotReloadHandlers!) {\n\t\t\t\tconst result = h(oldExports);\n\t\t\t\tif (result) { return result; }\n\t\t\t}\n\t\t\treturn undefined;\n\t\t};\n\t}\n\n\treturn hotReloadHandlers;\n}\n\nlet hotReloadHandlers: Set<(oldExports: Record<string, unknown>) => AcceptNewExportsFn | undefined> | undefined = undefined;\n\ninterface GlobalThisAddition {\n\t$hotReload_applyNewExports?(oldExports: Record<string, unknown>): AcceptNewExportsFn | undefined;\n}\n\ntype AcceptNewExportsFn = (newExports: Record<string, unknown>) => boolean;\n"]}