{"version":3,"sources":["file:///workspace/appflow/src/vs/base/common/ternarySearchTree.ts"],"names":[],"mappings":"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","file":"ternarySearchTree.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { shuffle } from 'vs/base/common/arrays';\nimport { CharCode } from 'vs/base/common/charCode';\nimport { compare, compareIgnoreCase, compareSubstring, compareSubstringIgnoreCase } from 'vs/base/common/strings';\nimport { URI } from 'vs/base/common/uri';\n\nexport interface IKeyIterator<K> {\n\treset(key: K): this;\n\tnext(): this;\n\n\thasNext(): boolean;\n\tcmp(a: string): number;\n\tvalue(): string;\n}\n\nexport class StringIterator implements IKeyIterator<string> {\n\n\tprivate _value: string = '';\n\tprivate _pos: number = 0;\n\n\treset(key: string): this {\n\t\tthis._value = key;\n\t\tthis._pos = 0;\n\t\treturn this;\n\t}\n\n\tnext(): this {\n\t\tthis._pos += 1;\n\t\treturn this;\n\t}\n\n\thasNext(): boolean {\n\t\treturn this._pos < this._value.length - 1;\n\t}\n\n\tcmp(a: string): number {\n\t\tconst aCode = a.charCodeAt(0);\n\t\tconst thisCode = this._value.charCodeAt(this._pos);\n\t\treturn aCode - thisCode;\n\t}\n\n\tvalue(): string {\n\t\treturn this._value[this._pos];\n\t}\n}\n\nexport class ConfigKeysIterator implements IKeyIterator<string> {\n\n\tprivate _value!: string;\n\tprivate _from!: number;\n\tprivate _to!: number;\n\n\tconstructor(\n\t\tprivate readonly _caseSensitive: boolean = true\n\t) { }\n\n\treset(key: string): this {\n\t\tthis._value = key;\n\t\tthis._from = 0;\n\t\tthis._to = 0;\n\t\treturn this.next();\n\t}\n\n\thasNext(): boolean {\n\t\treturn this._to < this._value.length;\n\t}\n\n\tnext(): this {\n\t\t// this._data = key.split(/[\\\\/]/).filter(s => !!s);\n\t\tthis._from = this._to;\n\t\tlet justSeps = true;\n\t\tfor (; this._to < this._value.length; this._to++) {\n\t\t\tconst ch = this._value.charCodeAt(this._to);\n\t\t\tif (ch === CharCode.Period) {\n\t\t\t\tif (justSeps) {\n\t\t\t\t\tthis._from++;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tjustSeps = false;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tcmp(a: string): number {\n\t\treturn this._caseSensitive\n\t\t\t? compareSubstring(a, this._value, 0, a.length, this._from, this._to)\n\t\t\t: compareSubstringIgnoreCase(a, this._value, 0, a.length, this._from, this._to);\n\t}\n\n\tvalue(): string {\n\t\treturn this._value.substring(this._from, this._to);\n\t}\n}\n\nexport class PathIterator implements IKeyIterator<string> {\n\n\tprivate _value!: string;\n\tprivate _valueLen!: number;\n\tprivate _from!: number;\n\tprivate _to!: number;\n\n\tconstructor(\n\t\tprivate readonly _splitOnBackslash: boolean = true,\n\t\tprivate readonly _caseSensitive: boolean = true\n\t) { }\n\n\treset(key: string): this {\n\t\tthis._from = 0;\n\t\tthis._to = 0;\n\t\tthis._value = key;\n\t\tthis._valueLen = key.length;\n\t\tfor (let pos = key.length - 1; pos >= 0; pos--, this._valueLen--) {\n\t\t\tconst ch = this._value.charCodeAt(pos);\n\t\t\tif (!(ch === CharCode.Slash || this._splitOnBackslash && ch === CharCode.Backslash)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn this.next();\n\t}\n\n\thasNext(): boolean {\n\t\treturn this._to < this._valueLen;\n\t}\n\n\tnext(): this {\n\t\t// this._data = key.split(/[\\\\/]/).filter(s => !!s);\n\t\tthis._from = this._to;\n\t\tlet justSeps = true;\n\t\tfor (; this._to < this._valueLen; this._to++) {\n\t\t\tconst ch = this._value.charCodeAt(this._to);\n\t\t\tif (ch === CharCode.Slash || this._splitOnBackslash && ch === CharCode.Backslash) {\n\t\t\t\tif (justSeps) {\n\t\t\t\t\tthis._from++;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tjustSeps = false;\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\tcmp(a: string): number {\n\t\treturn this._caseSensitive\n\t\t\t? compareSubstring(a, this._value, 0, a.length, this._from, this._to)\n\t\t\t: compareSubstringIgnoreCase(a, this._value, 0, a.length, this._from, this._to);\n\t}\n\n\tvalue(): string {\n\t\treturn this._value.substring(this._from, this._to);\n\t}\n}\n\nconst enum UriIteratorState {\n\tScheme = 1, Authority = 2, Path = 3, Query = 4, Fragment = 5\n}\n\nexport class UriIterator implements IKeyIterator<URI> {\n\n\tprivate _pathIterator!: PathIterator;\n\tprivate _value!: URI;\n\tprivate _states: UriIteratorState[] = [];\n\tprivate _stateIdx: number = 0;\n\n\tconstructor(\n\t\tprivate readonly _ignorePathCasing: (uri: URI) => boolean,\n\t\tprivate readonly _ignoreQueryAndFragment: (uri: URI) => boolean) { }\n\n\treset(key: URI): this {\n\t\tthis._value = key;\n\t\tthis._states = [];\n\t\tif (this._value.scheme) {\n\t\t\tthis._states.push(UriIteratorState.Scheme);\n\t\t}\n\t\tif (this._value.authority) {\n\t\t\tthis._states.push(UriIteratorState.Authority);\n\t\t}\n\t\tif (this._value.path) {\n\t\t\tthis._pathIterator = new PathIterator(false, !this._ignorePathCasing(key));\n\t\t\tthis._pathIterator.reset(key.path);\n\t\t\tif (this._pathIterator.value()) {\n\t\t\t\tthis._states.push(UriIteratorState.Path);\n\t\t\t}\n\t\t}\n\t\tif (!this._ignoreQueryAndFragment(key)) {\n\t\t\tif (this._value.query) {\n\t\t\t\tthis._states.push(UriIteratorState.Query);\n\t\t\t}\n\t\t\tif (this._value.fragment) {\n\t\t\t\tthis._states.push(UriIteratorState.Fragment);\n\t\t\t}\n\t\t}\n\t\tthis._stateIdx = 0;\n\t\treturn this;\n\t}\n\n\tnext(): this {\n\t\tif (this._states[this._stateIdx] === UriIteratorState.Path && this._pathIterator.hasNext()) {\n\t\t\tthis._pathIterator.next();\n\t\t} else {\n\t\t\tthis._stateIdx += 1;\n\t\t}\n\t\treturn this;\n\t}\n\n\thasNext(): boolean {\n\t\treturn (this._states[this._stateIdx] === UriIteratorState.Path && this._pathIterator.hasNext())\n\t\t\t|| this._stateIdx < this._states.length - 1;\n\t}\n\n\tcmp(a: string): number {\n\t\tif (this._states[this._stateIdx] === UriIteratorState.Scheme) {\n\t\t\treturn compareIgnoreCase(a, this._value.scheme);\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Authority) {\n\t\t\treturn compareIgnoreCase(a, this._value.authority);\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Path) {\n\t\t\treturn this._pathIterator.cmp(a);\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Query) {\n\t\t\treturn compare(a, this._value.query);\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Fragment) {\n\t\t\treturn compare(a, this._value.fragment);\n\t\t}\n\t\tthrow new Error();\n\t}\n\n\tvalue(): string {\n\t\tif (this._states[this._stateIdx] === UriIteratorState.Scheme) {\n\t\t\treturn this._value.scheme;\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Authority) {\n\t\t\treturn this._value.authority;\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Path) {\n\t\t\treturn this._pathIterator.value();\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Query) {\n\t\t\treturn this._value.query;\n\t\t} else if (this._states[this._stateIdx] === UriIteratorState.Fragment) {\n\t\t\treturn this._value.fragment;\n\t\t}\n\t\tthrow new Error();\n\t}\n}\nclass TernarySearchTreeNode<K, V> {\n\theight: number = 1;\n\tsegment!: string;\n\tvalue: V | undefined;\n\tkey: K | undefined;\n\tleft: TernarySearchTreeNode<K, V> | undefined;\n\tmid: TernarySearchTreeNode<K, V> | undefined;\n\tright: TernarySearchTreeNode<K, V> | undefined;\n\n\tisEmpty(): boolean {\n\t\treturn !this.left && !this.mid && !this.right && !this.value;\n\t}\n\n\trotateLeft() {\n\t\tconst tmp = this.right!;\n\t\tthis.right = tmp.left;\n\t\ttmp.left = this;\n\t\tthis.updateHeight();\n\t\ttmp.updateHeight();\n\t\treturn tmp;\n\t}\n\n\trotateRight() {\n\t\tconst tmp = this.left!;\n\t\tthis.left = tmp.right;\n\t\ttmp.right = this;\n\t\tthis.updateHeight();\n\t\ttmp.updateHeight();\n\t\treturn tmp;\n\t}\n\n\tupdateHeight() {\n\t\tthis.height = 1 + Math.max(this.heightLeft, this.heightRight);\n\t}\n\n\tbalanceFactor() {\n\t\treturn this.heightRight - this.heightLeft;\n\t}\n\n\tget heightLeft() {\n\t\treturn this.left?.height ?? 0;\n\t}\n\n\tget heightRight() {\n\t\treturn this.right?.height ?? 0;\n\t}\n}\n\nconst enum Dir {\n\tLeft = -1,\n\tMid = 0,\n\tRight = 1\n}\n\nexport class TernarySearchTree<K, V> {\n\n\tstatic forUris<E>(ignorePathCasing: (key: URI) => boolean = () => false, ignoreQueryAndFragment: (key: URI) => boolean = () => false): TernarySearchTree<URI, E> {\n\t\treturn new TernarySearchTree<URI, E>(new UriIterator(ignorePathCasing, ignoreQueryAndFragment));\n\t}\n\n\tstatic forPaths<E>(ignorePathCasing = false): TernarySearchTree<string, E> {\n\t\treturn new TernarySearchTree<string, E>(new PathIterator(undefined, !ignorePathCasing));\n\t}\n\n\tstatic forStrings<E>(): TernarySearchTree<string, E> {\n\t\treturn new TernarySearchTree<string, E>(new StringIterator());\n\t}\n\n\tstatic forConfigKeys<E>(): TernarySearchTree<string, E> {\n\t\treturn new TernarySearchTree<string, E>(new ConfigKeysIterator());\n\t}\n\n\tprivate _iter: IKeyIterator<K>;\n\tprivate _root: TernarySearchTreeNode<K, V> | undefined;\n\n\tconstructor(segments: IKeyIterator<K>) {\n\t\tthis._iter = segments;\n\t}\n\n\tclear(): void {\n\t\tthis._root = undefined;\n\t}\n\n\t/**\n\t * Fill the tree with the same value of the given keys\n\t */\n\tfill(element: V, keys: readonly K[]): void;\n\t/**\n\t * Fill the tree with given [key,value]-tuples\n\t */\n\tfill(values: readonly [K, V][]): void;\n\tfill(values: readonly [K, V][] | V, keys?: readonly K[]): void {\n\t\tif (keys) {\n\t\t\tconst arr = keys.slice(0);\n\t\t\tshuffle(arr);\n\t\t\tfor (const k of arr) {\n\t\t\t\tthis.set(k, (<V>values));\n\t\t\t}\n\t\t} else {\n\t\t\tconst arr = (<[K, V][]>values).slice(0);\n\t\t\tshuffle(arr);\n\t\t\tfor (const entry of arr) {\n\t\t\t\tthis.set(entry[0], entry[1]);\n\t\t\t}\n\t\t}\n\t}\n\n\tset(key: K, element: V): V | undefined {\n\t\tconst iter = this._iter.reset(key);\n\t\tlet node: TernarySearchTreeNode<K, V>;\n\n\t\tif (!this._root) {\n\t\t\tthis._root = new TernarySearchTreeNode<K, V>();\n\t\t\tthis._root.segment = iter.value();\n\t\t}\n\t\tconst stack: [Dir, TernarySearchTreeNode<K, V>][] = [];\n\n\t\t// find insert_node\n\t\tnode = this._root;\n\t\twhile (true) {\n\t\t\tconst val = iter.cmp(node.segment);\n\t\t\tif (val > 0) {\n\t\t\t\t// left\n\t\t\t\tif (!node.left) {\n\t\t\t\t\tnode.left = new TernarySearchTreeNode<K, V>();\n\t\t\t\t\tnode.left.segment = iter.value();\n\t\t\t\t}\n\t\t\t\tstack.push([Dir.Left, node]);\n\t\t\t\tnode = node.left;\n\n\t\t\t} else if (val < 0) {\n\t\t\t\t// right\n\t\t\t\tif (!node.right) {\n\t\t\t\t\tnode.right = new TernarySearchTreeNode<K, V>();\n\t\t\t\t\tnode.right.segment = iter.value();\n\t\t\t\t}\n\t\t\t\tstack.push([Dir.Right, node]);\n\t\t\t\tnode = node.right;\n\n\t\t\t} else if (iter.hasNext()) {\n\t\t\t\t// mid\n\t\t\t\titer.next();\n\t\t\t\tif (!node.mid) {\n\t\t\t\t\tnode.mid = new TernarySearchTreeNode<K, V>();\n\t\t\t\t\tnode.mid.segment = iter.value();\n\t\t\t\t}\n\t\t\t\tstack.push([Dir.Mid, node]);\n\t\t\t\tnode = node.mid;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// set value\n\t\tconst oldElement = node.value;\n\t\tnode.value = element;\n\t\tnode.key = key;\n\n\t\t// balance\n\t\tfor (let i = stack.length - 1; i >= 0; i--) {\n\t\t\tconst node = stack[i][1];\n\n\t\t\tnode.updateHeight();\n\t\t\tconst bf = node.balanceFactor();\n\n\t\t\tif (bf < -1 || bf > 1) {\n\t\t\t\t// needs rotate\n\t\t\t\tconst d1 = stack[i][0];\n\t\t\t\tconst d2 = stack[i + 1][0];\n\n\t\t\t\tif (d1 === Dir.Right && d2 === Dir.Right) {\n\t\t\t\t\t//right, right -> rotate left\n\t\t\t\t\tstack[i][1] = node.rotateLeft();\n\n\t\t\t\t} else if (d1 === Dir.Left && d2 === Dir.Left) {\n\t\t\t\t\t// left, left -> rotate right\n\t\t\t\t\tstack[i][1] = node.rotateRight();\n\n\t\t\t\t} else if (d1 === Dir.Right && d2 === Dir.Left) {\n\t\t\t\t\t// right, left -> double rotate right, left\n\t\t\t\t\tnode.right = stack[i + 1][1] = stack[i + 1][1].rotateRight();\n\t\t\t\t\tstack[i][1] = node.rotateLeft();\n\n\t\t\t\t} else if (d1 === Dir.Left && d2 === Dir.Right) {\n\t\t\t\t\t// left, right -> double rotate left, right\n\t\t\t\t\tnode.left = stack[i + 1][1] = stack[i + 1][1].rotateLeft();\n\t\t\t\t\tstack[i][1] = node.rotateRight();\n\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error();\n\t\t\t\t}\n\n\t\t\t\t// patch path to parent\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tswitch (stack[i - 1][0]) {\n\t\t\t\t\t\tcase Dir.Left:\n\t\t\t\t\t\t\tstack[i - 1][1].left = stack[i][1];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Dir.Right:\n\t\t\t\t\t\t\tstack[i - 1][1].right = stack[i][1];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase Dir.Mid:\n\t\t\t\t\t\t\tstack[i - 1][1].mid = stack[i][1];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis._root = stack[0][1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn oldElement;\n\t}\n\n\tget(key: K): V | undefined {\n\t\treturn this._getNode(key)?.value;\n\t}\n\n\tprivate _getNode(key: K) {\n\t\tconst iter = this._iter.reset(key);\n\t\tlet node = this._root;\n\t\twhile (node) {\n\t\t\tconst val = iter.cmp(node.segment);\n\t\t\tif (val > 0) {\n\t\t\t\t// left\n\t\t\t\tnode = node.left;\n\t\t\t} else if (val < 0) {\n\t\t\t\t// right\n\t\t\t\tnode = node.right;\n\t\t\t} else if (iter.hasNext()) {\n\t\t\t\t// mid\n\t\t\t\titer.next();\n\t\t\t\tnode = node.mid;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn node;\n\t}\n\n\thas(key: K): boolean {\n\t\tconst node = this._getNode(key);\n\t\treturn !(node?.value === undefined && node?.mid === undefined);\n\t}\n\n\tdelete(key: K): void {\n\t\treturn this._delete(key, false);\n\t}\n\n\tdeleteSuperstr(key: K): void {\n\t\treturn this._delete(key, true);\n\t}\n\n\tprivate _delete(key: K, superStr: boolean): void {\n\t\tconst iter = this._iter.reset(key);\n\t\tconst stack: [Dir, TernarySearchTreeNode<K, V>][] = [];\n\t\tlet node = this._root;\n\n\t\t// find node\n\t\twhile (node) {\n\t\t\tconst val = iter.cmp(node.segment);\n\t\t\tif (val > 0) {\n\t\t\t\t// left\n\t\t\t\tstack.push([Dir.Left, node]);\n\t\t\t\tnode = node.left;\n\t\t\t} else if (val < 0) {\n\t\t\t\t// right\n\t\t\t\tstack.push([Dir.Right, node]);\n\t\t\t\tnode = node.right;\n\t\t\t} else if (iter.hasNext()) {\n\t\t\t\t// mid\n\t\t\t\titer.next();\n\t\t\t\tstack.push([Dir.Mid, node]);\n\t\t\t\tnode = node.mid;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!node) {\n\t\t\t// node not found\n\t\t\treturn;\n\t\t}\n\n\t\tif (superStr) {\n\t\t\t// removing children, reset height\n\t\t\tnode.left = undefined;\n\t\t\tnode.mid = undefined;\n\t\t\tnode.right = undefined;\n\t\t\tnode.height = 1;\n\t\t} else {\n\t\t\t// removing element\n\t\t\tnode.key = undefined;\n\t\t\tnode.value = undefined;\n\t\t}\n\n\t\t// BST node removal\n\t\tif (!node.mid && !node.value) {\n\t\t\tif (node.left && node.right) {\n\t\t\t\t// full node\n\t\t\t\t// replace deleted-node with the min-node of the right branch.\n\t\t\t\t// If there is no true min-node leave things as they are\n\t\t\t\tconst min = this._min(node.right);\n\t\t\t\tif (min.key) {\n\t\t\t\t\tconst { key, value, segment } = min;\n\t\t\t\t\tthis._delete(min.key!, false);\n\t\t\t\t\tnode.key = key;\n\t\t\t\t\tnode.value = value;\n\t\t\t\t\tnode.segment = segment;\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\t// empty or half empty\n\t\t\t\tconst newChild = node.left ?? node.right;\n\t\t\t\tif (stack.length > 0) {\n\t\t\t\t\tconst [dir, parent] = stack[stack.length - 1];\n\t\t\t\t\tswitch (dir) {\n\t\t\t\t\t\tcase Dir.Left: parent.left = newChild; break;\n\t\t\t\t\t\tcase Dir.Mid: parent.mid = newChild; break;\n\t\t\t\t\t\tcase Dir.Right: parent.right = newChild; break;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis._root = newChild;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// AVL balance\n\t\tfor (let i = stack.length - 1; i >= 0; i--) {\n\t\t\tconst node = stack[i][1];\n\n\t\t\tnode.updateHeight();\n\t\t\tconst bf = node.balanceFactor();\n\t\t\tif (bf > 1) {\n\t\t\t\t// right heavy\n\t\t\t\tif (node.right!.balanceFactor() >= 0) {\n\t\t\t\t\t// right, right -> rotate left\n\t\t\t\t\tstack[i][1] = node.rotateLeft();\n\t\t\t\t} else {\n\t\t\t\t\t// right, left -> double rotate\n\t\t\t\t\tnode.right = node.right!.rotateRight();\n\t\t\t\t\tstack[i][1] = node.rotateLeft();\n\t\t\t\t}\n\n\t\t\t} else if (bf < -1) {\n\t\t\t\t// left heavy\n\t\t\t\tif (node.left!.balanceFactor() <= 0) {\n\t\t\t\t\t// left, left -> rotate right\n\t\t\t\t\tstack[i][1] = node.rotateRight();\n\t\t\t\t} else {\n\t\t\t\t\t// left, right -> double rotate\n\t\t\t\t\tnode.left = node.left!.rotateLeft();\n\t\t\t\t\tstack[i][1] = node.rotateRight();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// patch path to parent\n\t\t\tif (i > 0) {\n\t\t\t\tswitch (stack[i - 1][0]) {\n\t\t\t\t\tcase Dir.Left:\n\t\t\t\t\t\tstack[i - 1][1].left = stack[i][1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Dir.Right:\n\t\t\t\t\t\tstack[i - 1][1].right = stack[i][1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase Dir.Mid:\n\t\t\t\t\t\tstack[i - 1][1].mid = stack[i][1];\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._root = stack[0][1];\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _min(node: TernarySearchTreeNode<K, V>): TernarySearchTreeNode<K, V> {\n\t\twhile (node.left) {\n\t\t\tnode = node.left;\n\t\t}\n\t\treturn node;\n\t}\n\n\tfindSubstr(key: K): V | undefined {\n\t\tconst iter = this._iter.reset(key);\n\t\tlet node = this._root;\n\t\tlet candidate: V | undefined = undefined;\n\t\twhile (node) {\n\t\t\tconst val = iter.cmp(node.segment);\n\t\t\tif (val > 0) {\n\t\t\t\t// left\n\t\t\t\tnode = node.left;\n\t\t\t} else if (val < 0) {\n\t\t\t\t// right\n\t\t\t\tnode = node.right;\n\t\t\t} else if (iter.hasNext()) {\n\t\t\t\t// mid\n\t\t\t\titer.next();\n\t\t\t\tcandidate = node.value || candidate;\n\t\t\t\tnode = node.mid;\n\t\t\t} else {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn node && node.value || candidate;\n\t}\n\n\tfindSuperstr(key: K): IterableIterator<[K, V]> | undefined {\n\t\treturn this._findSuperstrOrElement(key, false);\n\t}\n\n\tprivate _findSuperstrOrElement(key: K, allowValue: true): IterableIterator<[K, V]> | V | undefined;\n\tprivate _findSuperstrOrElement(key: K, allowValue: false): IterableIterator<[K, V]> | undefined;\n\tprivate _findSuperstrOrElement(key: K, allowValue: boolean): IterableIterator<[K, V]> | V | undefined {\n\t\tconst iter = this._iter.reset(key);\n\t\tlet node = this._root;\n\t\twhile (node) {\n\t\t\tconst val = iter.cmp(node.segment);\n\t\t\tif (val > 0) {\n\t\t\t\t// left\n\t\t\t\tnode = node.left;\n\t\t\t} else if (val < 0) {\n\t\t\t\t// right\n\t\t\t\tnode = node.right;\n\t\t\t} else if (iter.hasNext()) {\n\t\t\t\t// mid\n\t\t\t\titer.next();\n\t\t\t\tnode = node.mid;\n\t\t\t} else {\n\t\t\t\t// collect\n\t\t\t\tif (!node.mid) {\n\t\t\t\t\tif (allowValue) {\n\t\t\t\t\t\treturn node.value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\treturn this._entries(node.mid);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\thasElementOrSubtree(key: K): boolean {\n\t\treturn this._findSuperstrOrElement(key, true) !== undefined;\n\t}\n\n\tforEach(callback: (value: V, index: K) => any): void {\n\t\tfor (const [key, value] of this) {\n\t\t\tcallback(value, key);\n\t\t}\n\t}\n\n\t*[Symbol.iterator](): IterableIterator<[K, V]> {\n\t\tyield* this._entries(this._root);\n\t}\n\n\tprivate _entries(node: TernarySearchTreeNode<K, V> | undefined): IterableIterator<[K, V]> {\n\t\tconst result: [K, V][] = [];\n\t\tthis._dfsEntries(node, result);\n\t\treturn result[Symbol.iterator]();\n\t}\n\n\tprivate _dfsEntries(node: TernarySearchTreeNode<K, V> | undefined, bucket: [K, V][]) {\n\t\t// DFS\n\t\tif (!node) {\n\t\t\treturn;\n\t\t}\n\t\tif (node.left) {\n\t\t\tthis._dfsEntries(node.left, bucket);\n\t\t}\n\t\tif (node.value) {\n\t\t\tbucket.push([node.key!, node.value]);\n\t\t}\n\t\tif (node.mid) {\n\t\t\tthis._dfsEntries(node.mid, bucket);\n\t\t}\n\t\tif (node.right) {\n\t\t\tthis._dfsEntries(node.right, bucket);\n\t\t}\n\t}\n\n\t// for debug/testing\n\t_isBalanced(): boolean {\n\t\tconst nodeIsBalanced = (node: TernarySearchTreeNode<any, any> | undefined): boolean => {\n\t\t\tif (!node) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tconst bf = node.balanceFactor();\n\t\t\tif (bf < -1 || bf > 1) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn nodeIsBalanced(node.left) && nodeIsBalanced(node.right);\n\t\t};\n\t\treturn nodeIsBalanced(this._root);\n\t}\n}\n"]}