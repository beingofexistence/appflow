{"version":3,"sources":["vs/base/common/errorMessage.ts"],"names":[],"mappings":"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","file":"errorMessage.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as arrays from 'vs/base/common/arrays';\nimport * as types from 'vs/base/common/types';\nimport * as nls from 'vs/nls';\nimport { IAction } from 'vs/base/common/actions';\n\nfunction exceptionToErrorMessage(exception: any, verbose: boolean): string {\n\tif (verbose && (exception.stack || exception.stacktrace)) {\n\t\treturn nls.localize('stackTrace.format', \"{0}: {1}\", detectSystemErrorMessage(exception), stackToString(exception.stack) || stackToString(exception.stacktrace));\n\t}\n\n\treturn detectSystemErrorMessage(exception);\n}\n\nfunction stackToString(stack: string[] | string | undefined): string | undefined {\n\tif (Array.isArray(stack)) {\n\t\treturn stack.join('\\n');\n\t}\n\n\treturn stack;\n}\n\nfunction detectSystemErrorMessage(exception: any): string {\n\n\t// Custom node.js error from us\n\tif (exception.code === 'ERR_UNC_HOST_NOT_ALLOWED') {\n\t\treturn `${exception.message}. Please update the 'security.allowedUNCHosts' setting if you want to allow this host.`;\n\t}\n\n\t// See https://nodejs.org/api/errors.html#errors_class_system_error\n\tif (typeof exception.code === 'string' && typeof exception.errno === 'number' && typeof exception.syscall === 'string') {\n\t\treturn nls.localize('nodeExceptionMessage', \"A system error occurred ({0})\", exception.message);\n\t}\n\n\treturn exception.message || nls.localize('error.defaultMessage', \"An unknown error occurred. Please consult the log for more details.\");\n}\n\n/**\n * Tries to generate a human readable error message out of the error. If the verbose parameter\n * is set to true, the error message will include stacktrace details if provided.\n *\n * @returns A string containing the error message.\n */\nexport function toErrorMessage(error: any = null, verbose: boolean = false): string {\n\tif (!error) {\n\t\treturn nls.localize('error.defaultMessage', \"An unknown error occurred. Please consult the log for more details.\");\n\t}\n\n\tif (Array.isArray(error)) {\n\t\tconst errors: any[] = arrays.coalesce(error);\n\t\tconst msg = toErrorMessage(errors[0], verbose);\n\n\t\tif (errors.length > 1) {\n\t\t\treturn nls.localize('error.moreErrors', \"{0} ({1} errors in total)\", msg, errors.length);\n\t\t}\n\n\t\treturn msg;\n\t}\n\n\tif (types.isString(error)) {\n\t\treturn error;\n\t}\n\n\tif (error.detail) {\n\t\tconst detail = error.detail;\n\n\t\tif (detail.error) {\n\t\t\treturn exceptionToErrorMessage(detail.error, verbose);\n\t\t}\n\n\t\tif (detail.exception) {\n\t\t\treturn exceptionToErrorMessage(detail.exception, verbose);\n\t\t}\n\t}\n\n\tif (error.stack) {\n\t\treturn exceptionToErrorMessage(error, verbose);\n\t}\n\n\tif (error.message) {\n\t\treturn error.message;\n\t}\n\n\treturn nls.localize('error.defaultMessage', \"An unknown error occurred. Please consult the log for more details.\");\n}\n\n\nexport interface IErrorWithActions extends Error {\n\tactions: IAction[];\n}\n\nexport function isErrorWithActions(obj: unknown): obj is IErrorWithActions {\n\tconst candidate = obj as IErrorWithActions | undefined;\n\n\treturn candidate instanceof Error && Array.isArray(candidate.actions);\n}\n\nexport function createErrorWithActions(messageOrError: string | Error, actions: IAction[]): IErrorWithActions {\n\tlet error: IErrorWithActions;\n\tif (typeof messageOrError === 'string') {\n\t\terror = new Error(messageOrError) as IErrorWithActions;\n\t} else {\n\t\terror = messageOrError as IErrorWithActions;\n\t}\n\n\terror.actions = actions;\n\n\treturn error;\n}\n"]}