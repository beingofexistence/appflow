{"version":3,"sources":["file:///workspace/appflow/src/vs/base/common/iterator.ts","vs/base/common/iterator.ts"],"names":[],"mappings":"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","file":"iterator.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport namespace Iterable {\n\n\texport function is<T = any>(thing: any): thing is Iterable<T> {\n\t\treturn thing && typeof thing === 'object' && typeof thing[Symbol.iterator] === 'function';\n\t}\n\n\tconst _empty: Iterable<any> = Object.freeze([]);\n\texport function empty<T = any>(): Iterable<T> {\n\t\treturn _empty;\n\t}\n\n\texport function* single<T>(element: T): Iterable<T> {\n\t\tyield element;\n\t}\n\n\texport function wrap<T>(iterableOrElement: Iterable<T> | T): Iterable<T> {\n\t\tif (is(iterableOrElement)) {\n\t\t\treturn iterableOrElement;\n\t\t} else {\n\t\t\treturn single(iterableOrElement);\n\t\t}\n\t}\n\n\texport function from<T>(iterable: Iterable<T> | undefined | null): Iterable<T> {\n\t\treturn iterable || _empty;\n\t}\n\n\texport function* reverse<T>(array: Array<T>): Iterable<T> {\n\t\tfor (let i = array.length - 1; i >= 0; i--) {\n\t\t\tyield array[i];\n\t\t}\n\t}\n\n\texport function isEmpty<T>(iterable: Iterable<T> | undefined | null): boolean {\n\t\treturn !iterable || iterable[Symbol.iterator]().next().done === true;\n\t}\n\n\texport function first<T>(iterable: Iterable<T>): T | undefined {\n\t\treturn iterable[Symbol.iterator]().next().value;\n\t}\n\n\texport function some<T>(iterable: Iterable<T>, predicate: (t: T) => unknown): boolean {\n\t\tfor (const element of iterable) {\n\t\t\tif (predicate(element)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\texport function find<T, R extends T>(iterable: Iterable<T>, predicate: (t: T) => t is R): R | undefined;\n\texport function find<T>(iterable: Iterable<T>, predicate: (t: T) => boolean): T | undefined;\n\texport function find<T>(iterable: Iterable<T>, predicate: (t: T) => boolean): T | undefined {\n\t\tfor (const element of iterable) {\n\t\t\tif (predicate(element)) {\n\t\t\t\treturn element;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\texport function filter<T, R extends T>(iterable: Iterable<T>, predicate: (t: T) => t is R): Iterable<R>;\n\texport function filter<T>(iterable: Iterable<T>, predicate: (t: T) => boolean): Iterable<T>;\n\texport function* filter<T>(iterable: Iterable<T>, predicate: (t: T) => boolean): Iterable<T> {\n\t\tfor (const element of iterable) {\n\t\t\tif (predicate(element)) {\n\t\t\t\tyield element;\n\t\t\t}\n\t\t}\n\t}\n\n\texport function* map<T, R>(iterable: Iterable<T>, fn: (t: T, index: number) => R): Iterable<R> {\n\t\tlet index = 0;\n\t\tfor (const element of iterable) {\n\t\t\tyield fn(element, index++);\n\t\t}\n\t}\n\n\texport function* concat<T>(...iterables: Iterable<T>[]): Iterable<T> {\n\t\tfor (const iterable of iterables) {\n\t\t\tfor (const element of iterable) {\n\t\t\t\tyield element;\n\t\t\t}\n\t\t}\n\t}\n\n\texport function reduce<T, R>(iterable: Iterable<T>, reducer: (previousValue: R, currentValue: T) => R, initialValue: R): R {\n\t\tlet value = initialValue;\n\t\tfor (const element of iterable) {\n\t\t\tvalue = reducer(value, element);\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * Returns an iterable slice of the array, with the same semantics as `array.slice()`.\n\t */\n\texport function* slice<T>(arr: ReadonlyArray<T>, from: number, to = arr.length): Iterable<T> {\n\t\tif (from < 0) {\n\t\t\tfrom += arr.length;\n\t\t}\n\n\t\tif (to < 0) {\n\t\t\tto += arr.length;\n\t\t} else if (to > arr.length) {\n\t\t\tto = arr.length;\n\t\t}\n\n\t\tfor (; from < to; from++) {\n\t\t\tyield arr[from];\n\t\t}\n\t}\n\n\t/**\n\t * Consumes `atMost` elements from iterable and returns the consumed elements,\n\t * and an iterable for the rest of the elements.\n\t */\n\texport function consume<T>(iterable: Iterable<T>, atMost: number = Number.POSITIVE_INFINITY): [T[], Iterable<T>] {\n\t\tconst consumed: T[] = [];\n\n\t\tif (atMost === 0) {\n\t\t\treturn [consumed, iterable];\n\t\t}\n\n\t\tconst iterator = iterable[Symbol.iterator]();\n\n\t\tfor (let i = 0; i < atMost; i++) {\n\t\t\tconst next = iterator.next();\n\n\t\t\tif (next.done) {\n\t\t\t\treturn [consumed, Iterable.empty()];\n\t\t\t}\n\n\t\t\tconsumed.push(next.value);\n\t\t}\n\n\t\treturn [consumed, { [Symbol.iterator]() { return iterator; } }];\n\t}\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nexport namespace Iterable {\n\n\texport function is<T = any>(thing: any): thing is Iterable<T> {\n\t\treturn thing && typeof thing === 'object' && typeof thing[Symbol.iterator] === 'function';\n\t}\n\n\tconst _empty: Iterable<any> = Object.freeze([]);\n\texport function empty<T = any>(): Iterable<T> {\n\t\treturn _empty;\n\t}\n\n\texport function* single<T>(element: T): Iterable<T> {\n\t\tyield element;\n\t}\n\n\texport function wrap<T>(iterableOrElement: Iterable<T> | T): Iterable<T> {\n\t\tif (is(iterableOrElement)) {\n\t\t\treturn iterableOrElement;\n\t\t} else {\n\t\t\treturn single(iterableOrElement);\n\t\t}\n\t}\n\n\texport function from<T>(iterable: Iterable<T> | undefined | null): Iterable<T> {\n\t\treturn iterable || _empty;\n\t}\n\n\texport function* reverse<T>(array: Array<T>): Iterable<T> {\n\t\tfor (let i = array.length - 1; i >= 0; i--) {\n\t\t\tyield array[i];\n\t\t}\n\t}\n\n\texport function isEmpty<T>(iterable: Iterable<T> | undefined | null): boolean {\n\t\treturn !iterable || iterable[Symbol.iterator]().next().done === true;\n\t}\n\n\texport function first<T>(iterable: Iterable<T>): T | undefined {\n\t\treturn iterable[Symbol.iterator]().next().value;\n\t}\n\n\texport function some<T>(iterable: Iterable<T>, predicate: (t: T) => unknown): boolean {\n\t\tfor (const element of iterable) {\n\t\t\tif (predicate(element)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\texport function find<T, R extends T>(iterable: Iterable<T>, predicate: (t: T) => t is R): R | undefined;\n\texport function find<T>(iterable: Iterable<T>, predicate: (t: T) => boolean): T | undefined;\n\texport function find<T>(iterable: Iterable<T>, predicate: (t: T) => boolean): T | undefined {\n\t\tfor (const element of iterable) {\n\t\t\tif (predicate(element)) {\n\t\t\t\treturn element;\n\t\t\t}\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\texport function filter<T, R extends T>(iterable: Iterable<T>, predicate: (t: T) => t is R): Iterable<R>;\n\texport function filter<T>(iterable: Iterable<T>, predicate: (t: T) => boolean): Iterable<T>;\n\texport function* filter<T>(iterable: Iterable<T>, predicate: (t: T) => boolean): Iterable<T> {\n\t\tfor (const element of iterable) {\n\t\t\tif (predicate(element)) {\n\t\t\t\tyield element;\n\t\t\t}\n\t\t}\n\t}\n\n\texport function* map<T, R>(iterable: Iterable<T>, fn: (t: T, index: number) => R): Iterable<R> {\n\t\tlet index = 0;\n\t\tfor (const element of iterable) {\n\t\t\tyield fn(element, index++);\n\t\t}\n\t}\n\n\texport function* concat<T>(...iterables: Iterable<T>[]): Iterable<T> {\n\t\tfor (const iterable of iterables) {\n\t\t\tfor (const element of iterable) {\n\t\t\t\tyield element;\n\t\t\t}\n\t\t}\n\t}\n\n\texport function reduce<T, R>(iterable: Iterable<T>, reducer: (previousValue: R, currentValue: T) => R, initialValue: R): R {\n\t\tlet value = initialValue;\n\t\tfor (const element of iterable) {\n\t\t\tvalue = reducer(value, element);\n\t\t}\n\t\treturn value;\n\t}\n\n\t/**\n\t * Returns an iterable slice of the array, with the same semantics as `array.slice()`.\n\t */\n\texport function* slice<T>(arr: ReadonlyArray<T>, from: number, to = arr.length): Iterable<T> {\n\t\tif (from < 0) {\n\t\t\tfrom += arr.length;\n\t\t}\n\n\t\tif (to < 0) {\n\t\t\tto += arr.length;\n\t\t} else if (to > arr.length) {\n\t\t\tto = arr.length;\n\t\t}\n\n\t\tfor (; from < to; from++) {\n\t\t\tyield arr[from];\n\t\t}\n\t}\n\n\t/**\n\t * Consumes `atMost` elements from iterable and returns the consumed elements,\n\t * and an iterable for the rest of the elements.\n\t */\n\texport function consume<T>(iterable: Iterable<T>, atMost: number = Number.POSITIVE_INFINITY): [T[], Iterable<T>] {\n\t\tconst consumed: T[] = [];\n\n\t\tif (atMost === 0) {\n\t\t\treturn [consumed, iterable];\n\t\t}\n\n\t\tconst iterator = iterable[Symbol.iterator]();\n\n\t\tfor (let i = 0; i < atMost; i++) {\n\t\t\tconst next = iterator.next();\n\n\t\t\tif (next.done) {\n\t\t\t\treturn [consumed, Iterable.empty()];\n\t\t\t}\n\n\t\t\tconsumed.push(next.value);\n\t\t}\n\n\t\treturn [consumed, { [Symbol.iterator]() { return iterator; } }];\n\t}\n}\n"]}