{"version":3,"sources":["file:///workspace/appflow/src/vs/base/common/keybindings.ts"],"names":[],"mappings":"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","file":"keybindings.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { illegalArgument } from 'vs/base/common/errors';\nimport { KeyCode, ScanCode } from 'vs/base/common/keyCodes';\nimport { OperatingSystem } from 'vs/base/common/platform';\n\n/**\n * Binary encoding strategy:\n * ```\n *    1111 11\n *    5432 1098 7654 3210\n *    ---- CSAW KKKK KKKK\n *  C = bit 11 = ctrlCmd flag\n *  S = bit 10 = shift flag\n *  A = bit 9 = alt flag\n *  W = bit 8 = winCtrl flag\n *  K = bits 0-7 = key code\n * ```\n */\nconst enum BinaryKeybindingsMask {\n\tCtrlCmd = (1 << 11) >>> 0,\n\tShift = (1 << 10) >>> 0,\n\tAlt = (1 << 9) >>> 0,\n\tWinCtrl = (1 << 8) >>> 0,\n\tKeyCode = 0x000000FF\n}\n\nexport function decodeKeybinding(keybinding: number | number[], OS: OperatingSystem): Keybinding | null {\n\tif (typeof keybinding === 'number') {\n\t\tif (keybinding === 0) {\n\t\t\treturn null;\n\t\t}\n\t\tconst firstChord = (keybinding & 0x0000FFFF) >>> 0;\n\t\tconst secondChord = (keybinding & 0xFFFF0000) >>> 16;\n\t\tif (secondChord !== 0) {\n\t\t\treturn new Keybinding([\n\t\t\t\tcreateSimpleKeybinding(firstChord, OS),\n\t\t\t\tcreateSimpleKeybinding(secondChord, OS)\n\t\t\t]);\n\t\t}\n\t\treturn new Keybinding([createSimpleKeybinding(firstChord, OS)]);\n\t} else {\n\t\tconst chords = [];\n\t\tfor (let i = 0; i < keybinding.length; i++) {\n\t\t\tchords.push(createSimpleKeybinding(keybinding[i], OS));\n\t\t}\n\t\treturn new Keybinding(chords);\n\t}\n}\n\nexport function createSimpleKeybinding(keybinding: number, OS: OperatingSystem): KeyCodeChord {\n\n\tconst ctrlCmd = (keybinding & BinaryKeybindingsMask.CtrlCmd ? true : false);\n\tconst winCtrl = (keybinding & BinaryKeybindingsMask.WinCtrl ? true : false);\n\n\tconst ctrlKey = (OS === OperatingSystem.Macintosh ? winCtrl : ctrlCmd);\n\tconst shiftKey = (keybinding & BinaryKeybindingsMask.Shift ? true : false);\n\tconst altKey = (keybinding & BinaryKeybindingsMask.Alt ? true : false);\n\tconst metaKey = (OS === OperatingSystem.Macintosh ? ctrlCmd : winCtrl);\n\tconst keyCode = (keybinding & BinaryKeybindingsMask.KeyCode);\n\n\treturn new KeyCodeChord(ctrlKey, shiftKey, altKey, metaKey, keyCode);\n}\n\nexport interface Modifiers {\n\treadonly ctrlKey: boolean;\n\treadonly shiftKey: boolean;\n\treadonly altKey: boolean;\n\treadonly metaKey: boolean;\n}\n\n/**\n * Represents a chord which uses the `keyCode` field of keyboard events.\n * A chord is a combination of keys pressed simultaneously.\n */\nexport class KeyCodeChord implements Modifiers {\n\n\tconstructor(\n\t\tpublic readonly ctrlKey: boolean,\n\t\tpublic readonly shiftKey: boolean,\n\t\tpublic readonly altKey: boolean,\n\t\tpublic readonly metaKey: boolean,\n\t\tpublic readonly keyCode: KeyCode\n\t) { }\n\n\tpublic equals(other: Chord): boolean {\n\t\treturn (\n\t\t\tother instanceof KeyCodeChord\n\t\t\t&& this.ctrlKey === other.ctrlKey\n\t\t\t&& this.shiftKey === other.shiftKey\n\t\t\t&& this.altKey === other.altKey\n\t\t\t&& this.metaKey === other.metaKey\n\t\t\t&& this.keyCode === other.keyCode\n\t\t);\n\t}\n\n\tpublic getHashCode(): string {\n\t\tconst ctrl = this.ctrlKey ? '1' : '0';\n\t\tconst shift = this.shiftKey ? '1' : '0';\n\t\tconst alt = this.altKey ? '1' : '0';\n\t\tconst meta = this.metaKey ? '1' : '0';\n\t\treturn `K${ctrl}${shift}${alt}${meta}${this.keyCode}`;\n\t}\n\n\tpublic isModifierKey(): boolean {\n\t\treturn (\n\t\t\tthis.keyCode === KeyCode.Unknown\n\t\t\t|| this.keyCode === KeyCode.Ctrl\n\t\t\t|| this.keyCode === KeyCode.Meta\n\t\t\t|| this.keyCode === KeyCode.Alt\n\t\t\t|| this.keyCode === KeyCode.Shift\n\t\t);\n\t}\n\n\tpublic toKeybinding(): Keybinding {\n\t\treturn new Keybinding([this]);\n\t}\n\n\t/**\n\t * Does this keybinding refer to the key code of a modifier and it also has the modifier flag?\n\t */\n\tpublic isDuplicateModifierCase(): boolean {\n\t\treturn (\n\t\t\t(this.ctrlKey && this.keyCode === KeyCode.Ctrl)\n\t\t\t|| (this.shiftKey && this.keyCode === KeyCode.Shift)\n\t\t\t|| (this.altKey && this.keyCode === KeyCode.Alt)\n\t\t\t|| (this.metaKey && this.keyCode === KeyCode.Meta)\n\t\t);\n\t}\n}\n\n/**\n * Represents a chord which uses the `code` field of keyboard events.\n * A chord is a combination of keys pressed simultaneously.\n */\nexport class ScanCodeChord implements Modifiers {\n\n\tconstructor(\n\t\tpublic readonly ctrlKey: boolean,\n\t\tpublic readonly shiftKey: boolean,\n\t\tpublic readonly altKey: boolean,\n\t\tpublic readonly metaKey: boolean,\n\t\tpublic readonly scanCode: ScanCode\n\t) { }\n\n\tpublic equals(other: Chord): boolean {\n\t\treturn (\n\t\t\tother instanceof ScanCodeChord\n\t\t\t&& this.ctrlKey === other.ctrlKey\n\t\t\t&& this.shiftKey === other.shiftKey\n\t\t\t&& this.altKey === other.altKey\n\t\t\t&& this.metaKey === other.metaKey\n\t\t\t&& this.scanCode === other.scanCode\n\t\t);\n\t}\n\n\tpublic getHashCode(): string {\n\t\tconst ctrl = this.ctrlKey ? '1' : '0';\n\t\tconst shift = this.shiftKey ? '1' : '0';\n\t\tconst alt = this.altKey ? '1' : '0';\n\t\tconst meta = this.metaKey ? '1' : '0';\n\t\treturn `S${ctrl}${shift}${alt}${meta}${this.scanCode}`;\n\t}\n\n\t/**\n\t * Does this keybinding refer to the key code of a modifier and it also has the modifier flag?\n\t */\n\tpublic isDuplicateModifierCase(): boolean {\n\t\treturn (\n\t\t\t(this.ctrlKey && (this.scanCode === ScanCode.ControlLeft || this.scanCode === ScanCode.ControlRight))\n\t\t\t|| (this.shiftKey && (this.scanCode === ScanCode.ShiftLeft || this.scanCode === ScanCode.ShiftRight))\n\t\t\t|| (this.altKey && (this.scanCode === ScanCode.AltLeft || this.scanCode === ScanCode.AltRight))\n\t\t\t|| (this.metaKey && (this.scanCode === ScanCode.MetaLeft || this.scanCode === ScanCode.MetaRight))\n\t\t);\n\t}\n}\n\nexport type Chord = KeyCodeChord | ScanCodeChord;\n\n/**\n * A keybinding is a sequence of chords.\n */\nexport class Keybinding {\n\n\tpublic readonly chords: Chord[];\n\n\tconstructor(chords: Chord[]) {\n\t\tif (chords.length === 0) {\n\t\t\tthrow illegalArgument(`chords`);\n\t\t}\n\t\tthis.chords = chords;\n\t}\n\n\tpublic getHashCode(): string {\n\t\tlet result = '';\n\t\tfor (let i = 0, len = this.chords.length; i < len; i++) {\n\t\t\tif (i !== 0) {\n\t\t\t\tresult += ';';\n\t\t\t}\n\t\t\tresult += this.chords[i].getHashCode();\n\t\t}\n\t\treturn result;\n\t}\n\n\tpublic equals(other: Keybinding | null): boolean {\n\t\tif (other === null) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this.chords.length !== other.chords.length) {\n\t\t\treturn false;\n\t\t}\n\t\tfor (let i = 0; i < this.chords.length; i++) {\n\t\t\tif (!this.chords[i].equals(other.chords[i])) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n}\n\nexport class ResolvedChord {\n\tconstructor(\n\t\tpublic readonly ctrlKey: boolean,\n\t\tpublic readonly shiftKey: boolean,\n\t\tpublic readonly altKey: boolean,\n\t\tpublic readonly metaKey: boolean,\n\t\tpublic readonly keyLabel: string | null,\n\t\tpublic readonly keyAriaLabel: string | null\n\t) { }\n}\n\nexport type SingleModifierChord = 'ctrl' | 'shift' | 'alt' | 'meta';\n\n/**\n * A resolved keybinding. Consists of one or multiple chords.\n */\nexport abstract class ResolvedKeybinding {\n\t/**\n\t * This prints the binding in a format suitable for displaying in the UI.\n\t */\n\tpublic abstract getLabel(): string | null;\n\t/**\n\t * This prints the binding in a format suitable for ARIA.\n\t */\n\tpublic abstract getAriaLabel(): string | null;\n\t/**\n\t * This prints the binding in a format suitable for electron's accelerators.\n\t * See https://github.com/electron/electron/blob/master/docs/api/accelerator.md\n\t */\n\tpublic abstract getElectronAccelerator(): string | null;\n\t/**\n\t * This prints the binding in a format suitable for user settings.\n\t */\n\tpublic abstract getUserSettingsLabel(): string | null;\n\t/**\n\t * Is the user settings label reflecting the label?\n\t */\n\tpublic abstract isWYSIWYG(): boolean;\n\t/**\n\t * Does the keybinding consist of more than one chord?\n\t */\n\tpublic abstract hasMultipleChords(): boolean;\n\t/**\n\t * Returns the chords that comprise of the keybinding.\n\t */\n\tpublic abstract getChords(): ResolvedChord[];\n\t/**\n\t * Returns the chords as strings useful for dispatching.\n\t * Returns null for modifier only chords.\n\t * @example keybinding \"Shift\" -> null\n\t * @example keybinding (\"D\" with shift == true) -> \"shift+D\"\n\t */\n\tpublic abstract getDispatchChords(): (string | null)[];\n\t/**\n\t * Returns the modifier only chords as strings useful for dispatching.\n\t * Returns null for chords that contain more than one modifier or a regular key.\n\t * @example keybinding \"Shift\" -> \"shift\"\n\t * @example keybinding (\"D\" with shift == true\") -> null\n\t */\n\tpublic abstract getSingleModifierDispatchChords(): (SingleModifierChord | null)[];\n}\n"]}