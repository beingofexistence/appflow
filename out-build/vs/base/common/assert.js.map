{"version":3,"sources":["file:///workspace/appflow/src/vs/base/common/assert.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAIhG;;;;;;;;;;;;;OAaG;IACH,SAAgB,EAAE,CAAC,KAAe,EAAE,OAAgB;QACnD,IAAI,CAAC,KAAK,EAAE;YACX,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,qBAAqB,OAAO,GAAG,CAAC,CAAC,CAAC,kBAAkB,CAAC,CAAC;SAChF;IACF,CAAC;IAJD,gBAIC;IAED,SAAgB,GAAG,CAAS,KAAY,EAAE,OAAO,GAAG,aAAa;QAChE,MAAM,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC;IAC1B,CAAC;IAFD,kBAEC;IAED,SAAgB,GAAG,CAAI,SAAkB;QACxC,IAAI,CAAC,SAAS,EAAE;YACf,MAAM,IAAI,YAAG,CAAgB,kBAAkB,CAAC,CAAC;SACjD;IACF,CAAC;IAJD,kBAIC;IAED;;OAEG;IACH,SAAgB,GAAG,CAAM,SAAwB;QAChD,IAAI,CAAC,SAAS,EAAE,EAAE;YACjB,uCAAuC;YACvC,QAAQ,CAAC;YACT,wDAAwD;YACxD,SAAS,EAAE,CAAC;YACZ,IAAA,WAAE,EAAgB,IAAI,YAAG,CAAgB,kBAAkB,CAAC,CAAC,CAAC;SAC9D;IACF,CAAC;IARD,kBAQC;IAED,SAAgB,GAAG,CAAmB,KAAmB,EAAE,SAA0C;QACpG,IAAI,CAAC,GAAG,CAAC,CAAC;QACV,OAAO,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YAC5B,MAAM,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;YACnB,MAAM,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;YACvB,IAAI,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;gBACrB,OAAO,KAAK,CAAC;aACb;YACD,CAAC,EAAE,CAAC;SACJ;QACD,OAAO,IAAI,CAAC;IACb,CAAC;IAXD,kBAWC","file":"assert.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BugIndicatingError, onUnexpectedError } from 'vs/base/common/errors';\n\n/**\n * Throws an error with the provided message if the provided value does not evaluate to a true Javascript value.\n *\n * @deprecated Use `assert(...)` instead.\n * This method is usually used like this:\n * ```ts\n * import * as assert from 'vs/base/common/assert';\n * assert.ok(...);\n * ```\n *\n * However, `assert` in that example is a user chosen name.\n * There is no tooling for generating such an import statement.\n * Thus, the `assert(...)` function should be used instead.\n */\nexport function ok(value?: unknown, message?: string) {\n\tif (!value) {\n\t\tthrow new Error(message ? `Assertion failed (${message})` : 'Assertion Failed');\n\t}\n}\n\nexport function assertNever(value: never, message = 'Unreachable'): never {\n\tthrow new Error(message);\n}\n\nexport function assert(condition: boolean): void {\n\tif (!condition) {\n\t\tthrow new BugIndicatingError('Assertion Failed');\n\t}\n}\n\n/**\n * condition must be side-effect free!\n */\nexport function assertFn(condition: () => boolean): void {\n\tif (!condition()) {\n\t\t// eslint-disable-next-line no-debugger\n\t\tdebugger;\n\t\t// Reevaluate `condition` again to make debugging easier\n\t\tcondition();\n\t\tonUnexpectedError(new BugIndicatingError('Assertion Failed'));\n\t}\n}\n\nexport function checkAdjacentItems<T>(items: readonly T[], predicate: (item1: T, item2: T) => boolean): boolean {\n\tlet i = 0;\n\twhile (i < items.length - 1) {\n\t\tconst a = items[i];\n\t\tconst b = items[i + 1];\n\t\tif (!predicate(a, b)) {\n\t\t\treturn false;\n\t\t}\n\t\ti++;\n\t}\n\treturn true;\n}\n"]}