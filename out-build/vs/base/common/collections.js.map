{"version":3,"sources":["file:///workspace/appflow/src/vs/base/common/collections.ts"],"names":[],"mappings":"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","file":"collections.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n/**\n * An interface for a JavaScript object that\n * acts a dictionary. The keys are strings.\n */\nexport type IStringDictionary<V> = Record<string, V>;\n\n/**\n * An interface for a JavaScript object that\n * acts a dictionary. The keys are numbers.\n */\nexport type INumberDictionary<V> = Record<number, V>;\n\n/**\n * Groups the collection into a dictionary based on the provided\n * group function.\n */\nexport function groupBy<K extends string | number | symbol, V>(data: V[], groupFn: (element: V) => K): Record<K, V[]> {\n\tconst result: Record<K, V[]> = Object.create(null);\n\tfor (const element of data) {\n\t\tconst key = groupFn(element);\n\t\tlet target = result[key];\n\t\tif (!target) {\n\t\t\ttarget = result[key] = [];\n\t\t}\n\t\ttarget.push(element);\n\t}\n\treturn result;\n}\n\nexport function diffSets<T>(before: Set<T>, after: Set<T>): { removed: T[]; added: T[] } {\n\tconst removed: T[] = [];\n\tconst added: T[] = [];\n\tfor (const element of before) {\n\t\tif (!after.has(element)) {\n\t\t\tremoved.push(element);\n\t\t}\n\t}\n\tfor (const element of after) {\n\t\tif (!before.has(element)) {\n\t\t\tadded.push(element);\n\t\t}\n\t}\n\treturn { removed, added };\n}\n\nexport function diffMaps<K, V>(before: Map<K, V>, after: Map<K, V>): { removed: V[]; added: V[] } {\n\tconst removed: V[] = [];\n\tconst added: V[] = [];\n\tfor (const [index, value] of before) {\n\t\tif (!after.has(index)) {\n\t\t\tremoved.push(value);\n\t\t}\n\t}\n\tfor (const [index, value] of after) {\n\t\tif (!before.has(index)) {\n\t\t\tadded.push(value);\n\t\t}\n\t}\n\treturn { removed, added };\n}\nexport class SetMap<K, V> {\n\n\tprivate map = new Map<K, Set<V>>();\n\n\tadd(key: K, value: V): void {\n\t\tlet values = this.map.get(key);\n\n\t\tif (!values) {\n\t\t\tvalues = new Set<V>();\n\t\t\tthis.map.set(key, values);\n\t\t}\n\n\t\tvalues.add(value);\n\t}\n\n\tdelete(key: K, value: V): void {\n\t\tconst values = this.map.get(key);\n\n\t\tif (!values) {\n\t\t\treturn;\n\t\t}\n\n\t\tvalues.delete(value);\n\n\t\tif (values.size === 0) {\n\t\t\tthis.map.delete(key);\n\t\t}\n\t}\n\n\tforEach(key: K, fn: (value: V) => void): void {\n\t\tconst values = this.map.get(key);\n\n\t\tif (!values) {\n\t\t\treturn;\n\t\t}\n\n\t\tvalues.forEach(fn);\n\t}\n\n\tget(key: K): ReadonlySet<V> {\n\t\tconst values = this.map.get(key);\n\t\tif (!values) {\n\t\t\treturn new Set<V>();\n\t\t}\n\t\treturn values;\n\t}\n}\n"]}