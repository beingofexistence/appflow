{"version":3,"sources":["file:///workspace/appflow/src/vs/base/worker/workerMain.ts","vs/base/worker/workerMain.ts"],"names":[],"mappings":"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","file":"workerMain.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n(function () {\n\n\tinterface IMonacoEnvironment {\n\t\tbaseUrl?: string;\n\t\tcreateTrustedTypesPolicy<Options extends TrustedTypePolicyOptions>(\n\t\t\tpolicyName: string,\n\t\t\tpolicyOptions?: Options,\n\t\t): undefined | Pick<TrustedTypePolicy<Options>, 'name' | Extract<keyof Options, keyof TrustedTypePolicyOptions>>;\n\t}\n\tconst monacoEnvironment: IMonacoEnvironment | undefined = (globalThis as any).MonacoEnvironment;\n\tconst monacoBaseUrl = monacoEnvironment && monacoEnvironment.baseUrl ? monacoEnvironment.baseUrl : '../../../';\n\n\tfunction createTrustedTypesPolicy<Options extends TrustedTypePolicyOptions>(\n\t\tpolicyName: string,\n\t\tpolicyOptions?: Options,\n\t): undefined | Pick<TrustedTypePolicy<Options>, 'name' | Extract<keyof Options, keyof TrustedTypePolicyOptions>> {\n\n\t\tif (monacoEnvironment?.createTrustedTypesPolicy) {\n\t\t\ttry {\n\t\t\t\treturn monacoEnvironment.createTrustedTypesPolicy(policyName, policyOptions);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.warn(err);\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\treturn self.trustedTypes?.createPolicy(policyName, policyOptions);\n\t\t} catch (err) {\n\t\t\tconsole.warn(err);\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tconst trustedTypesPolicy = createTrustedTypesPolicy('amdLoader', {\n\t\tcreateScriptURL: value => value,\n\t\tcreateScript: (_, ...args: string[]) => {\n\t\t\t// workaround a chrome issue not allowing to create new functions\n\t\t\t// see https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor\n\t\t\tconst fnArgs = args.slice(0, -1).join(',');\n\t\t\tconst fnBody = args.pop()!.toString();\n\t\t\t// Do not add a new line to fnBody, as this will confuse source maps.\n\t\t\tconst body = `(function anonymous(${fnArgs}) { ${fnBody}\\n})`;\n\t\t\treturn body;\n\t\t}\n\t});\n\n\tfunction canUseEval(): boolean {\n\t\ttry {\n\t\t\tconst func = (\n\t\t\t\ttrustedTypesPolicy\n\t\t\t\t\t? globalThis.eval(<any>trustedTypesPolicy.createScript('', 'true')) // CodeQL [SM01632] fetch + eval is used on the web worker instead of importScripts if possible because importScripts is synchronous and we observed deadlocks on Safari\n\t\t\t\t\t: new Function('true') // CodeQL [SM01632] fetch + eval is used on the web worker instead of importScripts if possible because importScripts is synchronous and we observed deadlocks on Safari\n\t\t\t);\n\t\t\tfunc.call(globalThis);\n\t\t\treturn true;\n\t\t} catch (err) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tfunction loadAMDLoader() {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tif (typeof (<any>globalThis).define === 'function' && (<any>globalThis).define.amd) {\n\t\t\t\treturn resolve();\n\t\t\t}\n\t\t\tconst loaderSrc: string | TrustedScriptURL = monacoBaseUrl + 'vs/loader.js';\n\n\t\t\tconst isCrossOrigin = (/^((http:)|(https:)|(file:))/.test(loaderSrc) && loaderSrc.substring(0, globalThis.origin.length) !== globalThis.origin);\n\t\t\tif (!isCrossOrigin && canUseEval()) {\n\t\t\t\t// use `fetch` if possible because `importScripts`\n\t\t\t\t// is synchronous and can lead to deadlocks on Safari\n\t\t\t\tfetch(loaderSrc).then((response) => {\n\t\t\t\t\tif (response.status !== 200) {\n\t\t\t\t\t\tthrow new Error(response.statusText);\n\t\t\t\t\t}\n\t\t\t\t\treturn response.text();\n\t\t\t\t}).then((text) => {\n\t\t\t\t\ttext = `${text}\\n//# sourceURL=${loaderSrc}`;\n\t\t\t\t\tconst func = (\n\t\t\t\t\t\ttrustedTypesPolicy\n\t\t\t\t\t\t\t? globalThis.eval(trustedTypesPolicy.createScript('', text) as unknown as string)\n\t\t\t\t\t\t\t: new Function(text) // CodeQL [SM01632] fetch + eval is used on the web worker instead of importScripts if possible because importScripts is synchronous and we observed deadlocks on Safari\n\t\t\t\t\t);\n\t\t\t\t\tfunc.call(globalThis);\n\t\t\t\t\tresolve();\n\t\t\t\t}).then(undefined, reject);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (trustedTypesPolicy) {\n\t\t\t\timportScripts(trustedTypesPolicy.createScriptURL(loaderSrc) as unknown as string);\n\t\t\t} else {\n\t\t\t\timportScripts(loaderSrc as string);\n\t\t\t}\n\t\t\tresolve();\n\t\t});\n\t}\n\n\tfunction configureAMDLoader() {\n\t\trequire.config({\n\t\t\tbaseUrl: monacoBaseUrl,\n\t\t\tcatchError: true,\n\t\t\ttrustedTypesPolicy,\n\t\t\tamdModulesPattern: /^vs\\//\n\t\t});\n\t}\n\n\tfunction loadCode(moduleId: string) {\n\t\tloadAMDLoader().then(() => {\n\t\t\tconfigureAMDLoader();\n\t\t\trequire([moduleId], function (ws) {\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tconst messageHandler = ws.create((msg: any, transfer?: Transferable[]) => {\n\t\t\t\t\t\t(<any>globalThis).postMessage(msg, transfer);\n\t\t\t\t\t}, null);\n\n\t\t\t\t\tglobalThis.onmessage = (e: MessageEvent) => messageHandler.onmessage(e.data, e.ports);\n\t\t\t\t\twhile (beforeReadyMessages.length > 0) {\n\t\t\t\t\t\tconst e = beforeReadyMessages.shift()!;\n\t\t\t\t\t\tmessageHandler.onmessage(e.data, e.ports);\n\t\t\t\t\t}\n\t\t\t\t}, 0);\n\t\t\t});\n\t\t});\n\t}\n\n\t// If the loader is already defined, configure it immediately\n\t// This helps in the bundled case, where we must load nls files\n\t// and they need a correct baseUrl to be loaded.\n\tif (typeof (<any>globalThis).define === 'function' && (<any>globalThis).define.amd) {\n\t\tconfigureAMDLoader();\n\t}\n\n\tlet isFirstMessage = true;\n\tconst beforeReadyMessages: MessageEvent[] = [];\n\tglobalThis.onmessage = (message: MessageEvent) => {\n\t\tif (!isFirstMessage) {\n\t\t\tbeforeReadyMessages.push(message);\n\t\t\treturn;\n\t\t}\n\n\t\tisFirstMessage = false;\n\t\tloadCode(message.data);\n\t};\n})();\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n(function () {\n\n\tinterface IMonacoEnvironment {\n\t\tbaseUrl?: string;\n\t\tcreateTrustedTypesPolicy<Options extends TrustedTypePolicyOptions>(\n\t\t\tpolicyName: string,\n\t\t\tpolicyOptions?: Options,\n\t\t): undefined | Pick<TrustedTypePolicy<Options>, 'name' | Extract<keyof Options, keyof TrustedTypePolicyOptions>>;\n\t}\n\tconst monacoEnvironment: IMonacoEnvironment | undefined = (globalThis as any).MonacoEnvironment;\n\tconst monacoBaseUrl = monacoEnvironment && monacoEnvironment.baseUrl ? monacoEnvironment.baseUrl : '../../../';\n\n\tfunction createTrustedTypesPolicy<Options extends TrustedTypePolicyOptions>(\n\t\tpolicyName: string,\n\t\tpolicyOptions?: Options,\n\t): undefined | Pick<TrustedTypePolicy<Options>, 'name' | Extract<keyof Options, keyof TrustedTypePolicyOptions>> {\n\n\t\tif (monacoEnvironment?.createTrustedTypesPolicy) {\n\t\t\ttry {\n\t\t\t\treturn monacoEnvironment.createTrustedTypesPolicy(policyName, policyOptions);\n\t\t\t} catch (err) {\n\t\t\t\tconsole.warn(err);\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\treturn self.trustedTypes?.createPolicy(policyName, policyOptions);\n\t\t} catch (err) {\n\t\t\tconsole.warn(err);\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tconst trustedTypesPolicy = createTrustedTypesPolicy('amdLoader', {\n\t\tcreateScriptURL: value => value,\n\t\tcreateScript: (_, ...args: string[]) => {\n\t\t\t// workaround a chrome issue not allowing to create new functions\n\t\t\t// see https://github.com/w3c/webappsec-trusted-types/wiki/Trusted-Types-for-function-constructor\n\t\t\tconst fnArgs = args.slice(0, -1).join(',');\n\t\t\tconst fnBody = args.pop()!.toString();\n\t\t\t// Do not add a new line to fnBody, as this will confuse source maps.\n\t\t\tconst body = `(function anonymous(${fnArgs}) { ${fnBody}\\n})`;\n\t\t\treturn body;\n\t\t}\n\t});\n\n\tfunction canUseEval(): boolean {\n\t\ttry {\n\t\t\tconst func = (\n\t\t\t\ttrustedTypesPolicy\n\t\t\t\t\t? globalThis.eval(<any>trustedTypesPolicy.createScript('', 'true')) // CodeQL [SM01632] fetch + eval is used on the web worker instead of importScripts if possible because importScripts is synchronous and we observed deadlocks on Safari\n\t\t\t\t\t: new Function('true') // CodeQL [SM01632] fetch + eval is used on the web worker instead of importScripts if possible because importScripts is synchronous and we observed deadlocks on Safari\n\t\t\t);\n\t\t\tfunc.call(globalThis);\n\t\t\treturn true;\n\t\t} catch (err) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tfunction loadAMDLoader() {\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tif (typeof (<any>globalThis).define === 'function' && (<any>globalThis).define.amd) {\n\t\t\t\treturn resolve();\n\t\t\t}\n\t\t\tconst loaderSrc: string | TrustedScriptURL = monacoBaseUrl + 'vs/loader.js';\n\n\t\t\tconst isCrossOrigin = (/^((http:)|(https:)|(file:))/.test(loaderSrc) && loaderSrc.substring(0, globalThis.origin.length) !== globalThis.origin);\n\t\t\tif (!isCrossOrigin && canUseEval()) {\n\t\t\t\t// use `fetch` if possible because `importScripts`\n\t\t\t\t// is synchronous and can lead to deadlocks on Safari\n\t\t\t\tfetch(loaderSrc).then((response) => {\n\t\t\t\t\tif (response.status !== 200) {\n\t\t\t\t\t\tthrow new Error(response.statusText);\n\t\t\t\t\t}\n\t\t\t\t\treturn response.text();\n\t\t\t\t}).then((text) => {\n\t\t\t\t\ttext = `${text}\\n//# sourceURL=${loaderSrc}`;\n\t\t\t\t\tconst func = (\n\t\t\t\t\t\ttrustedTypesPolicy\n\t\t\t\t\t\t\t? globalThis.eval(trustedTypesPolicy.createScript('', text) as unknown as string)\n\t\t\t\t\t\t\t: new Function(text) // CodeQL [SM01632] fetch + eval is used on the web worker instead of importScripts if possible because importScripts is synchronous and we observed deadlocks on Safari\n\t\t\t\t\t);\n\t\t\t\t\tfunc.call(globalThis);\n\t\t\t\t\tresolve();\n\t\t\t\t}).then(undefined, reject);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (trustedTypesPolicy) {\n\t\t\t\timportScripts(trustedTypesPolicy.createScriptURL(loaderSrc) as unknown as string);\n\t\t\t} else {\n\t\t\t\timportScripts(loaderSrc as string);\n\t\t\t}\n\t\t\tresolve();\n\t\t});\n\t}\n\n\tfunction configureAMDLoader() {\n\t\trequire.config({\n\t\t\tbaseUrl: monacoBaseUrl,\n\t\t\tcatchError: true,\n\t\t\ttrustedTypesPolicy,\n\t\t\tamdModulesPattern: /^vs\\//\n\t\t});\n\t}\n\n\tfunction loadCode(moduleId: string) {\n\t\tloadAMDLoader().then(() => {\n\t\t\tconfigureAMDLoader();\n\t\t\trequire([moduleId], function (ws) {\n\t\t\t\tsetTimeout(function () {\n\t\t\t\t\tconst messageHandler = ws.create((msg: any, transfer?: Transferable[]) => {\n\t\t\t\t\t\t(<any>globalThis).postMessage(msg, transfer);\n\t\t\t\t\t}, null);\n\n\t\t\t\t\tglobalThis.onmessage = (e: MessageEvent) => messageHandler.onmessage(e.data, e.ports);\n\t\t\t\t\twhile (beforeReadyMessages.length > 0) {\n\t\t\t\t\t\tconst e = beforeReadyMessages.shift()!;\n\t\t\t\t\t\tmessageHandler.onmessage(e.data, e.ports);\n\t\t\t\t\t}\n\t\t\t\t}, 0);\n\t\t\t});\n\t\t});\n\t}\n\n\t// If the loader is already defined, configure it immediately\n\t// This helps in the bundled case, where we must load nls files\n\t// and they need a correct baseUrl to be loaded.\n\tif (typeof (<any>globalThis).define === 'function' && (<any>globalThis).define.amd) {\n\t\tconfigureAMDLoader();\n\t}\n\n\tlet isFirstMessage = true;\n\tconst beforeReadyMessages: MessageEvent[] = [];\n\tglobalThis.onmessage = (message: MessageEvent) => {\n\t\tif (!isFirstMessage) {\n\t\t\tbeforeReadyMessages.push(message);\n\t\t\treturn;\n\t\t}\n\n\t\tisFirstMessage = false;\n\t\tloadCode(message.data);\n\t};\n})();\n"]}