{"version":3,"sources":["file:///workspace/appflow/src/vs/base/node/ps.ts"],"names":[],"mappings":"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","file":"ps.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { exec } from 'child_process';\nimport { FileAccess } from 'vs/base/common/network';\nimport { ProcessItem } from 'vs/base/common/processes';\n\nexport function listProcesses(rootPid: number): Promise<ProcessItem> {\n\n\treturn new Promise((resolve, reject) => {\n\n\t\tlet rootItem: ProcessItem | undefined;\n\t\tconst map = new Map<number, ProcessItem>();\n\n\n\t\tfunction addToTree(pid: number, ppid: number, cmd: string, load: number, mem: number) {\n\n\t\t\tconst parent = map.get(ppid);\n\t\t\tif (pid === rootPid || parent) {\n\n\t\t\t\tconst item: ProcessItem = {\n\t\t\t\t\tname: findName(cmd),\n\t\t\t\t\tcmd,\n\t\t\t\t\tpid,\n\t\t\t\t\tppid,\n\t\t\t\t\tload,\n\t\t\t\t\tmem\n\t\t\t\t};\n\t\t\t\tmap.set(pid, item);\n\n\t\t\t\tif (pid === rootPid) {\n\t\t\t\t\trootItem = item;\n\t\t\t\t}\n\n\t\t\t\tif (parent) {\n\t\t\t\t\tif (!parent.children) {\n\t\t\t\t\t\tparent.children = [];\n\t\t\t\t\t}\n\t\t\t\t\tparent.children.push(item);\n\t\t\t\t\tif (parent.children.length > 1) {\n\t\t\t\t\t\tparent.children = parent.children.sort((a, b) => a.pid - b.pid);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfunction findName(cmd: string): string {\n\n\t\t\tconst UTILITY_NETWORK_HINT = /--utility-sub-type=network/i;\n\t\t\tconst NODEJS_PROCESS_HINT = /--ms-enable-electron-run-as-node/i;\n\t\t\tconst WINDOWS_CRASH_REPORTER = /--crashes-directory/i;\n\t\t\tconst WINPTY = /\\\\pipe\\\\winpty-control/i;\n\t\t\tconst CONPTY = /conhost\\.exe.+--headless/i;\n\t\t\tconst TYPE = /--type=([a-zA-Z-]+)/;\n\n\t\t\t// find windows crash reporter\n\t\t\tif (WINDOWS_CRASH_REPORTER.exec(cmd)) {\n\t\t\t\treturn 'electron-crash-reporter';\n\t\t\t}\n\n\t\t\t// find winpty process\n\t\t\tif (WINPTY.exec(cmd)) {\n\t\t\t\treturn 'winpty-agent';\n\t\t\t}\n\n\t\t\t// find conpty process\n\t\t\tif (CONPTY.exec(cmd)) {\n\t\t\t\treturn 'conpty-agent';\n\t\t\t}\n\n\t\t\t// find \"--type=xxxx\"\n\t\t\tlet matches = TYPE.exec(cmd);\n\t\t\tif (matches && matches.length === 2) {\n\t\t\t\tif (matches[1] === 'renderer') {\n\t\t\t\t\treturn `window`;\n\t\t\t\t} else if (matches[1] === 'utility') {\n\t\t\t\t\tif (UTILITY_NETWORK_HINT.exec(cmd)) {\n\t\t\t\t\t\treturn 'utility-network-service';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn 'utility-process';\n\t\t\t\t} else if (matches[1] === 'extensionHost') {\n\t\t\t\t\treturn 'extension-host'; // normalize remote extension host type\n\t\t\t\t}\n\t\t\t\treturn matches[1];\n\t\t\t}\n\n\t\t\t// find all xxxx.js\n\t\t\tconst JS = /[a-zA-Z-]+\\.js/g;\n\t\t\tlet result = '';\n\t\t\tdo {\n\t\t\t\tmatches = JS.exec(cmd);\n\t\t\t\tif (matches) {\n\t\t\t\t\tresult += matches + ' ';\n\t\t\t\t}\n\t\t\t} while (matches);\n\n\t\t\tif (result) {\n\t\t\t\tif (cmd.indexOf('node ') < 0 && cmd.indexOf('node.exe') < 0) {\n\t\t\t\t\treturn `electron-nodejs (${result})`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// find Electron node.js processes\n\t\t\tif (NODEJS_PROCESS_HINT.exec(cmd)) {\n\t\t\t\treturn `electron-nodejs (${cmd})`;\n\t\t\t}\n\n\t\t\treturn cmd;\n\t\t}\n\n\t\tif (process.platform === 'win32') {\n\n\t\t\tconst cleanUNCPrefix = (value: string): string => {\n\t\t\t\tif (value.indexOf('\\\\\\\\?\\\\') === 0) {\n\t\t\t\t\treturn value.substring(4);\n\t\t\t\t} else if (value.indexOf('\\\\??\\\\') === 0) {\n\t\t\t\t\treturn value.substring(4);\n\t\t\t\t} else if (value.indexOf('\"\\\\\\\\?\\\\') === 0) {\n\t\t\t\t\treturn '\"' + value.substring(5);\n\t\t\t\t} else if (value.indexOf('\"\\\\??\\\\') === 0) {\n\t\t\t\t\treturn '\"' + value.substring(5);\n\t\t\t\t} else {\n\t\t\t\t\treturn value;\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t(import('@vscode/windows-process-tree')).then(windowsProcessTree => {\n\t\t\t\twindowsProcessTree.getProcessList(rootPid, (processList) => {\n\t\t\t\t\tif (!processList) {\n\t\t\t\t\t\treject(new Error(`Root process ${rootPid} not found`));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\twindowsProcessTree.getProcessCpuUsage(processList, (completeProcessList) => {\n\t\t\t\t\t\tconst processItems: Map<number, ProcessItem> = new Map();\n\t\t\t\t\t\tcompleteProcessList.forEach(process => {\n\t\t\t\t\t\t\tconst commandLine = cleanUNCPrefix(process.commandLine || '');\n\t\t\t\t\t\t\tprocessItems.set(process.pid, {\n\t\t\t\t\t\t\t\tname: findName(commandLine),\n\t\t\t\t\t\t\t\tcmd: commandLine,\n\t\t\t\t\t\t\t\tpid: process.pid,\n\t\t\t\t\t\t\t\tppid: process.ppid,\n\t\t\t\t\t\t\t\tload: process.cpu || 0,\n\t\t\t\t\t\t\t\tmem: process.memory || 0\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\trootItem = processItems.get(rootPid);\n\t\t\t\t\t\tif (rootItem) {\n\t\t\t\t\t\t\tprocessItems.forEach(item => {\n\t\t\t\t\t\t\t\tconst parent = processItems.get(item.ppid);\n\t\t\t\t\t\t\t\tif (parent) {\n\t\t\t\t\t\t\t\t\tif (!parent.children) {\n\t\t\t\t\t\t\t\t\t\tparent.children = [];\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tparent.children.push(item);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tprocessItems.forEach(item => {\n\t\t\t\t\t\t\t\tif (item.children) {\n\t\t\t\t\t\t\t\t\titem.children = item.children.sort((a, b) => a.pid - b.pid);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tresolve(rootItem);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treject(new Error(`Root process ${rootPid} not found`));\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}, windowsProcessTree.ProcessDataFlag.CommandLine | windowsProcessTree.ProcessDataFlag.Memory);\n\t\t\t});\n\t\t} else {\t// OS X & Linux\n\t\t\tfunction calculateLinuxCpuUsage() {\n\t\t\t\t// Flatten rootItem to get a list of all VSCode processes\n\t\t\t\tlet processes = [rootItem];\n\t\t\t\tconst pids: number[] = [];\n\t\t\t\twhile (processes.length) {\n\t\t\t\t\tconst process = processes.shift();\n\t\t\t\t\tif (process) {\n\t\t\t\t\t\tpids.push(process.pid);\n\t\t\t\t\t\tif (process.children) {\n\t\t\t\t\t\t\tprocesses = processes.concat(process.children);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// The cpu usage value reported on Linux is the average over the process lifetime,\n\t\t\t\t// recalculate the usage over a one second interval\n\t\t\t\t// JSON.stringify is needed to escape spaces, https://github.com/nodejs/node/issues/6803\n\t\t\t\tlet cmd = JSON.stringify(FileAccess.asFileUri('vs/base/node/cpuUsage.sh').fsPath);\n\t\t\t\tcmd += ' ' + pids.join(' ');\n\n\t\t\t\texec(cmd, {}, (err, stdout, stderr) => {\n\t\t\t\t\tif (err || stderr) {\n\t\t\t\t\t\treject(err || new Error(stderr.toString()));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst cpuUsage = stdout.toString().split('\\n');\n\t\t\t\t\t\tfor (let i = 0; i < pids.length; i++) {\n\t\t\t\t\t\t\tconst processInfo = map.get(pids[i])!;\n\t\t\t\t\t\t\tprocessInfo.load = parseFloat(cpuUsage[i]);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (!rootItem) {\n\t\t\t\t\t\t\treject(new Error(`Root process ${rootPid} not found`));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tresolve(rootItem);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\texec('which ps', {}, (err, stdout, stderr) => {\n\t\t\t\tif (err || stderr) {\n\t\t\t\t\tif (process.platform !== 'linux') {\n\t\t\t\t\t\treject(err || new Error(stderr.toString()));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst cmd = JSON.stringify(FileAccess.asFileUri('vs/base/node/ps.sh').fsPath);\n\t\t\t\t\t\texec(cmd, {}, (err, stdout, stderr) => {\n\t\t\t\t\t\t\tif (err || stderr) {\n\t\t\t\t\t\t\t\treject(err || new Error(stderr.toString()));\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tparsePsOutput(stdout, addToTree);\n\t\t\t\t\t\t\t\tcalculateLinuxCpuUsage();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst ps = stdout.toString().trim();\n\t\t\t\t\tconst args = '-ax -o pid=,ppid=,pcpu=,pmem=,command=';\n\n\t\t\t\t\t// Set numeric locale to ensure '.' is used as the decimal separator\n\t\t\t\t\texec(`${ps} ${args}`, { maxBuffer: 1000 * 1024, env: { LC_NUMERIC: 'en_US.UTF-8' } }, (err, stdout, stderr) => {\n\t\t\t\t\t\t// Silently ignoring the screen size is bogus error. See https://github.com/microsoft/vscode/issues/98590\n\t\t\t\t\t\tif (err || (stderr && !stderr.includes('screen size is bogus'))) {\n\t\t\t\t\t\t\treject(err || new Error(stderr.toString()));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tparsePsOutput(stdout, addToTree);\n\n\t\t\t\t\t\t\tif (process.platform === 'linux') {\n\t\t\t\t\t\t\t\tcalculateLinuxCpuUsage();\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif (!rootItem) {\n\t\t\t\t\t\t\t\t\treject(new Error(`Root process ${rootPid} not found`));\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\tresolve(rootItem);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}\n\nfunction parsePsOutput(stdout: string, addToTree: (pid: number, ppid: number, cmd: string, load: number, mem: number) => void): void {\n\tconst PID_CMD = /^\\s*([0-9]+)\\s+([0-9]+)\\s+([0-9]+\\.[0-9]+)\\s+([0-9]+\\.[0-9]+)\\s+(.+)$/;\n\tconst lines = stdout.toString().split('\\n');\n\tfor (const line of lines) {\n\t\tconst matches = PID_CMD.exec(line.trim());\n\t\tif (matches && matches.length === 6) {\n\t\t\taddToTree(parseInt(matches[1]), parseInt(matches[2]), matches[5], parseFloat(matches[3]), parseFloat(matches[4]));\n\t\t}\n\t}\n}\n"]}