{"version":3,"sources":["file:///workspace/appflow/src/vs/base/node/extpath.ts"],"names":[],"mappings":"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","file":"extpath.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as fs from 'fs';\nimport { basename, dirname, join, normalize, sep } from 'vs/base/common/path';\nimport { isLinux } from 'vs/base/common/platform';\nimport { rtrim } from 'vs/base/common/strings';\nimport { Promises, readdirSync } from 'vs/base/node/pfs';\n\n/**\n * Copied from: https://github.com/microsoft/vscode-node-debug/blob/master/src/node/pathUtilities.ts#L83\n *\n * Given an absolute, normalized, and existing file path 'realcase' returns the exact path that the file has on disk.\n * On a case insensitive file system, the returned path might differ from the original path by character casing.\n * On a case sensitive file system, the returned path will always be identical to the original path.\n * In case of errors, null is returned. But you cannot use this function to verify that a path exists.\n * realcaseSync does not handle '..' or '.' path segments and it does not take the locale into account.\n */\nexport function realcaseSync(path: string): string | null {\n\tif (isLinux) {\n\t\t// This method is unsupported on OS that have case sensitive\n\t\t// file system where the same path can exist in different forms\n\t\t// (see also https://github.com/microsoft/vscode/issues/139709)\n\t\treturn path;\n\t}\n\n\tconst dir = dirname(path);\n\tif (path === dir) {\t// end recursion\n\t\treturn path;\n\t}\n\n\tconst name = (basename(path) /* can be '' for windows drive letters */ || path).toLowerCase();\n\ttry {\n\t\tconst entries = readdirSync(dir);\n\t\tconst found = entries.filter(e => e.toLowerCase() === name);\t// use a case insensitive search\n\t\tif (found.length === 1) {\n\t\t\t// on a case sensitive filesystem we cannot determine here, whether the file exists or not, hence we need the 'file exists' precondition\n\t\t\tconst prefix = realcaseSync(dir);   // recurse\n\t\t\tif (prefix) {\n\t\t\t\treturn join(prefix, found[0]);\n\t\t\t}\n\t\t} else if (found.length > 1) {\n\t\t\t// must be a case sensitive $filesystem\n\t\t\tconst ix = found.indexOf(name);\n\t\t\tif (ix >= 0) {\t// case sensitive\n\t\t\t\tconst prefix = realcaseSync(dir);   // recurse\n\t\t\t\tif (prefix) {\n\t\t\t\t\treturn join(prefix, found[ix]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (error) {\n\t\t// silently ignore error\n\t}\n\n\treturn null;\n}\n\nexport async function realcase(path: string): Promise<string | null> {\n\tif (isLinux) {\n\t\t// This method is unsupported on OS that have case sensitive\n\t\t// file system where the same path can exist in different forms\n\t\t// (see also https://github.com/microsoft/vscode/issues/139709)\n\t\treturn path;\n\t}\n\n\tconst dir = dirname(path);\n\tif (path === dir) {\t// end recursion\n\t\treturn path;\n\t}\n\n\tconst name = (basename(path) /* can be '' for windows drive letters */ || path).toLowerCase();\n\ttry {\n\t\tconst entries = await Promises.readdir(dir);\n\t\tconst found = entries.filter(e => e.toLowerCase() === name);\t// use a case insensitive search\n\t\tif (found.length === 1) {\n\t\t\t// on a case sensitive filesystem we cannot determine here, whether the file exists or not, hence we need the 'file exists' precondition\n\t\t\tconst prefix = await realcase(dir);   // recurse\n\t\t\tif (prefix) {\n\t\t\t\treturn join(prefix, found[0]);\n\t\t\t}\n\t\t} else if (found.length > 1) {\n\t\t\t// must be a case sensitive $filesystem\n\t\t\tconst ix = found.indexOf(name);\n\t\t\tif (ix >= 0) {\t// case sensitive\n\t\t\t\tconst prefix = await realcase(dir);   // recurse\n\t\t\t\tif (prefix) {\n\t\t\t\t\treturn join(prefix, found[ix]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} catch (error) {\n\t\t// silently ignore error\n\t}\n\n\treturn null;\n}\n\nexport async function realpath(path: string): Promise<string> {\n\ttry {\n\t\t// DO NOT USE `fs.promises.realpath` here as it internally\n\t\t// calls `fs.native.realpath` which will result in subst\n\t\t// drives to be resolved to their target on Windows\n\t\t// https://github.com/microsoft/vscode/issues/118562\n\t\treturn await Promises.realpath(path);\n\t} catch (error) {\n\n\t\t// We hit an error calling fs.realpath(). Since fs.realpath() is doing some path normalization\n\t\t// we now do a similar normalization and then try again if we can access the path with read\n\t\t// permissions at least. If that succeeds, we return that path.\n\t\t// fs.realpath() is resolving symlinks and that can fail in certain cases. The workaround is\n\t\t// to not resolve links but to simply see if the path is read accessible or not.\n\t\tconst normalizedPath = normalizePath(path);\n\n\t\tawait Promises.access(normalizedPath, fs.constants.R_OK);\n\n\t\treturn normalizedPath;\n\t}\n}\n\nexport function realpathSync(path: string): string {\n\ttry {\n\t\treturn fs.realpathSync(path);\n\t} catch (error) {\n\n\t\t// We hit an error calling fs.realpathSync(). Since fs.realpathSync() is doing some path normalization\n\t\t// we now do a similar normalization and then try again if we can access the path with read\n\t\t// permissions at least. If that succeeds, we return that path.\n\t\t// fs.realpath() is resolving symlinks and that can fail in certain cases. The workaround is\n\t\t// to not resolve links but to simply see if the path is read accessible or not.\n\t\tconst normalizedPath = normalizePath(path);\n\n\t\tfs.accessSync(normalizedPath, fs.constants.R_OK); // throws in case of an error\n\n\t\treturn normalizedPath;\n\t}\n}\n\nfunction normalizePath(path: string): string {\n\treturn rtrim(normalize(path), sep);\n}\n"]}