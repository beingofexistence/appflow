{"version":3,"sources":["file:///workspace/appflow/src/vs/base/node/nodeStreams.ts"],"names":[],"mappings":";;;;IAOA;;;;;OAKG;IACH,MAAa,GAAe,SAAQ,kBAAS;QAK5C,YAAY,QAAkC;YAC7C,KAAK,EAAE,CAAC;YACR,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;gBACjC,IAAI,CAAC,CAAC,GAAU,QAAQ,CAAC;gBACzB,IAAI,CAAC,CAAC,GAAY,CAAC,CAAC;aACpB;iBAAM;gBACN,MAAM,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;gBACzE,IAAI,CAAC,CAAC,GAAU,GAAG,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC;gBAChD,IAAI,CAAC,CAAC,GAAY,GAAG,CAAC,MAAM,CAAC;aAC7B;QACF,CAAC;QAEQ,UAAU,CAAC,KAAa,EAAE,SAAiB,EAAE,QAAoD;YACzG,IAAI,CAAC,IAAI,CAAC,CAAC,EAAO;gBACjB,IAAI,CAAC,CAAC,GAAQ,KAAK,CAAC;aACpB;iBAAM;gBACN,IAAI,CAAC,CAAC,GAAQ,MAAM,CAAC,MAAM,CAAC,CAAC,IAAI,CAAC,CAAC,EAAO,KAAK,CAAC,CAAC,CAAC;aAClD;YAED,IAAI,MAAM,GAAG,CAAC,CAAC;YACf,OAAO,MAAM,GAAG,IAAI,CAAC,CAAC,CAAM,MAAM,EAAE;gBACnC,MAAM,KAAK,GAAG,OAAO,IAAI,CAAC,CAAC,KAAY,QAAQ;oBAC9C,CAAC,CAAC,IAAI,CAAC,CAAC,CAAM,OAAO,CAAC,IAAI,CAAC,CAAC,EAAS,MAAM,CAAC;oBAC5C,CAAC,CAAC,IAAA,YAAG,EAAW,IAAI,CAAC,CAAC,EAAO,IAAI,CAAC,CAAC,EAAS,MAAM,CAAC,CAAC;gBACrD,IAAI,KAAK,KAAK,CAAC,CAAC,EAAE;oBACjB,MAAM;iBACN;gBAED,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAM,KAAK,CAAC,MAAM,EAAE,KAAK,GAAG,IAAI,CAAC,CAAC,CAAU,CAAC,CAAC;gBAC9D,MAAM,GAAG,KAAK,GAAG,IAAI,CAAC,CAAC,CAAU;aACjC;YAED,IAAI,CAAC,CAAC,GAAQ,MAAM,KAAK,IAAI,CAAC,CAAC,CAAM,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAM,KAAK,CAAC,MAAM,CAAC,CAAC;YACpF,QAAQ,EAAE,CAAC;QACZ,CAAC;QAEQ,MAAM,CAAC,QAAoD;YACnE,IAAI,IAAI,CAAC,CAAC,EAAO;gBAChB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAM,CAAC;aACvB;YAED,QAAQ,EAAE,CAAC;QACZ,CAAC;KACD;IAhDD,kBAgDC","file":"nodeStreams.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport { Transform } from 'stream';\nimport { binaryIndexOf } from 'vs/base/common/buffer';\n\n/**\n * A Transform stream that splits the input on the \"splitter\" substring.\n * The resulting chunks will contain (and trail with) the splitter match.\n * The last chunk when the stream ends will be emitted even if a splitter\n * is not encountered.\n */\nexport class StreamSplitter extends Transform {\n\tprivate buffer: Buffer | undefined;\n\tprivate readonly splitter: Buffer | number;\n\tprivate readonly spitterLen: number;\n\n\tconstructor(splitter: string | number | Buffer) {\n\t\tsuper();\n\t\tif (typeof splitter === 'number') {\n\t\t\tthis.splitter = splitter;\n\t\t\tthis.spitterLen = 1;\n\t\t} else {\n\t\t\tconst buf = Buffer.isBuffer(splitter) ? splitter : Buffer.from(splitter);\n\t\t\tthis.splitter = buf.length === 1 ? buf[0] : buf;\n\t\t\tthis.spitterLen = buf.length;\n\t\t}\n\t}\n\n\toverride _transform(chunk: Buffer, _encoding: string, callback: (error?: Error | null, data?: any) => void): void {\n\t\tif (!this.buffer) {\n\t\t\tthis.buffer = chunk;\n\t\t} else {\n\t\t\tthis.buffer = Buffer.concat([this.buffer, chunk]);\n\t\t}\n\n\t\tlet offset = 0;\n\t\twhile (offset < this.buffer.length) {\n\t\t\tconst index = typeof this.splitter === 'number'\n\t\t\t\t? this.buffer.indexOf(this.splitter, offset)\n\t\t\t\t: binaryIndexOf(this.buffer, this.splitter, offset);\n\t\t\tif (index === -1) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tthis.push(this.buffer.slice(offset, index + this.spitterLen));\n\t\t\toffset = index + this.spitterLen;\n\t\t}\n\n\t\tthis.buffer = offset === this.buffer.length ? undefined : this.buffer.slice(offset);\n\t\tcallback();\n\t}\n\n\toverride _flush(callback: (error?: Error | null, data?: any) => void): void {\n\t\tif (this.buffer) {\n\t\t\tthis.push(this.buffer);\n\t\t}\n\n\t\tcallback();\n\t}\n}\n"]}