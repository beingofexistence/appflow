{"version":3,"sources":["file:///workspace/appflow/src/vs/base/node/ports.ts"],"names":[],"mappings":"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","file":"ports.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as net from 'net';\n\n/**\n * Given a start point and a max number of retries, will find a port that\n * is openable. Will return 0 in case no free port can be found.\n */\nexport function findFreePort(startPort: number, giveUpAfter: number, timeout: number, stride = 1): Promise<number> {\n\tlet done = false;\n\n\treturn new Promise(resolve => {\n\t\tconst timeoutHandle = setTimeout(() => {\n\t\t\tif (!done) {\n\t\t\t\tdone = true;\n\t\t\t\treturn resolve(0);\n\t\t\t}\n\t\t}, timeout);\n\n\t\tdoFindFreePort(startPort, giveUpAfter, stride, (port) => {\n\t\t\tif (!done) {\n\t\t\t\tdone = true;\n\t\t\t\tclearTimeout(timeoutHandle);\n\t\t\t\treturn resolve(port);\n\t\t\t}\n\t\t});\n\t});\n}\n\nfunction doFindFreePort(startPort: number, giveUpAfter: number, stride: number, clb: (port: number) => void): void {\n\tif (giveUpAfter === 0) {\n\t\treturn clb(0);\n\t}\n\n\tconst client = new net.Socket();\n\n\t// If we can connect to the port it means the port is already taken so we continue searching\n\tclient.once('connect', () => {\n\t\tdispose(client);\n\n\t\treturn doFindFreePort(startPort + stride, giveUpAfter - 1, stride, clb);\n\t});\n\n\tclient.once('data', () => {\n\t\t// this listener is required since node.js 8.x\n\t});\n\n\tclient.once('error', (err: Error & { code?: string }) => {\n\t\tdispose(client);\n\n\t\t// If we receive any non ECONNREFUSED error, it means the port is used but we cannot connect\n\t\tif (err.code !== 'ECONNREFUSED') {\n\t\t\treturn doFindFreePort(startPort + stride, giveUpAfter - 1, stride, clb);\n\t\t}\n\n\t\t// Otherwise it means the port is free to use!\n\t\treturn clb(startPort);\n\t});\n\n\tclient.connect(startPort, '127.0.0.1');\n}\n\n// Reference: https://chromium.googlesource.com/chromium/src.git/+/refs/heads/main/net/base/port_util.cc#56\nexport const BROWSER_RESTRICTED_PORTS: any = {\n\t1: true,      // tcpmux\n\t7: true,      // echo\n\t9: true,      // discard\n\t11: true,     // systat\n\t13: true,     // daytime\n\t15: true,     // netstat\n\t17: true,     // qotd\n\t19: true,     // chargen\n\t20: true,     // ftp data\n\t21: true,     // ftp access\n\t22: true,     // ssh\n\t23: true,     // telnet\n\t25: true,     // smtp\n\t37: true,     // time\n\t42: true,     // name\n\t43: true,     // nicname\n\t53: true,     // domain\n\t69: true,     // tftp\n\t77: true,     // priv-rjs\n\t79: true,     // finger\n\t87: true,     // ttylink\n\t95: true,     // supdup\n\t101: true,    // hostriame\n\t102: true,    // iso-tsap\n\t103: true,    // gppitnp\n\t104: true,    // acr-nema\n\t109: true,    // pop2\n\t110: true,    // pop3\n\t111: true,    // sunrpc\n\t113: true,    // auth\n\t115: true,    // sftp\n\t117: true,    // uucp-path\n\t119: true,    // nntp\n\t123: true,    // NTP\n\t135: true,    // loc-srv /epmap\n\t137: true,    // netbios\n\t139: true,    // netbios\n\t143: true,    // imap2\n\t161: true,    // snmp\n\t179: true,    // BGP\n\t389: true,    // ldap\n\t427: true,    // SLP (Also used by Apple Filing Protocol)\n\t465: true,    // smtp+ssl\n\t512: true,    // print / exec\n\t513: true,    // login\n\t514: true,    // shell\n\t515: true,    // printer\n\t526: true,    // tempo\n\t530: true,    // courier\n\t531: true,    // chat\n\t532: true,    // netnews\n\t540: true,    // uucp\n\t548: true,    // AFP (Apple Filing Protocol)\n\t554: true,    // rtsp\n\t556: true,    // remotefs\n\t563: true,    // nntp+ssl\n\t587: true,    // smtp (rfc6409)\n\t601: true,    // syslog-conn (rfc3195)\n\t636: true,    // ldap+ssl\n\t989: true,    // ftps-data\n\t990: true,    // ftps\n\t993: true,    // ldap+ssl\n\t995: true,    // pop3+ssl\n\t1719: true,   // h323gatestat\n\t1720: true,   // h323hostcall\n\t1723: true,   // pptp\n\t2049: true,   // nfs\n\t3659: true,   // apple-sasl / PasswordServer\n\t4045: true,   // lockd\n\t5060: true,   // sip\n\t5061: true,   // sips\n\t6000: true,   // X11\n\t6566: true,   // sane-port\n\t6665: true,   // Alternate IRC [Apple addition]\n\t6666: true,   // Alternate IRC [Apple addition]\n\t6667: true,   // Standard IRC [Apple addition]\n\t6668: true,   // Alternate IRC [Apple addition]\n\t6669: true,   // Alternate IRC [Apple addition]\n\t6697: true,   // IRC + TLS\n\t10080: true   // Amanda\n};\n\n/**\n * Uses listen instead of connect. Is faster, but if there is another listener on 0.0.0.0 then this will take 127.0.0.1 from that listener.\n */\nexport function findFreePortFaster(startPort: number, giveUpAfter: number, timeout: number, hostname: string = '127.0.0.1'): Promise<number> {\n\tlet resolved: boolean = false;\n\tlet timeoutHandle: NodeJS.Timeout | undefined = undefined;\n\tlet countTried: number = 1;\n\tconst server = net.createServer({ pauseOnConnect: true });\n\tfunction doResolve(port: number, resolve: (port: number) => void) {\n\t\tif (!resolved) {\n\t\t\tresolved = true;\n\t\t\tserver.removeAllListeners();\n\t\t\tserver.close();\n\t\t\tif (timeoutHandle) {\n\t\t\t\tclearTimeout(timeoutHandle);\n\t\t\t}\n\t\t\tresolve(port);\n\t\t}\n\t}\n\treturn new Promise<number>(resolve => {\n\t\ttimeoutHandle = setTimeout(() => {\n\t\t\tdoResolve(0, resolve);\n\t\t}, timeout);\n\n\t\tserver.on('listening', () => {\n\t\t\tdoResolve(startPort, resolve);\n\t\t});\n\t\tserver.on('error', err => {\n\t\t\tif (err && ((<any>err).code === 'EADDRINUSE' || (<any>err).code === 'EACCES') && (countTried < giveUpAfter)) {\n\t\t\t\tstartPort++;\n\t\t\t\tcountTried++;\n\t\t\t\tserver.listen(startPort, hostname);\n\t\t\t} else {\n\t\t\t\tdoResolve(0, resolve);\n\t\t\t}\n\t\t});\n\t\tserver.on('close', () => {\n\t\t\tdoResolve(0, resolve);\n\t\t});\n\t\tserver.listen(startPort, hostname);\n\t});\n}\n\nfunction dispose(socket: net.Socket): void {\n\ttry {\n\t\tsocket.removeAllListeners('connect');\n\t\tsocket.removeAllListeners('error');\n\t\tsocket.end();\n\t\tsocket.destroy();\n\t\tsocket.unref();\n\t} catch (error) {\n\t\tconsole.error(error); // otherwise this error would get lost in the callback chain\n\t}\n}\n"]}