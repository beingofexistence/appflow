{"version":3,"sources":["file:///workspace/appflow/src/vs/base/node/osReleaseInfo.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAazF,KAAK,UAAU,GAAG,CAAc,WAAiC;QACvE,IAAI,QAAQ,CAAC,EAAE,IAAa,QAAQ,CAAC,EAAE,EAAS;YAC/C,OAAO;SACP;QAED,qDAAqD;QACrD,qCAAqC;QACrC,mEAAmE;QACnE,IAAI,MAA8B,CAAC;QACnC,KAAK,MAAM,QAAQ,IAAI,CAAC,iBAAiB,EAAE,qBAAqB,EAAE,kBAAkB,CAAC,EAAE;YACtF,IAAI;gBACH,MAAM,GAAG,MAAM,IAAA,eAAI,EAAC,QAAQ,EAAE,cAAW,CAAC,IAAI,CAAC,CAAC;gBAChD,MAAM;aACN;YAAC,OAAO,GAAG,EAAE,GAAG;SACjB;QAED,IAAI,CAAC,MAAM,EAAE;YACZ,WAAW,CAAC,qEAAqE,CAAC,CAAC;YACnF,OAAO;SACP;QAED,IAAI;YACH,MAAM,aAAa,GAAG,IAAI,GAAG,CAAC;gBAC7B,IAAI;gBACJ,YAAY;gBACZ,SAAS;gBACT,YAAY;gBACZ,iBAAiB;aACjB,CAAC,CAAC;YACH,MAAM,WAAW,GAAgB;gBAChC,EAAE,EAAE,SAAS;aACb,CAAC;YAEF,IAAI,KAAK,EAAE,MAAM,IAAI,IAAI,IAAA,0BAAS,EAAC,EAAE,KAAK,EAAE,MAAM,CAAC,gBAAgB,EAAE,EAAE,SAAS,EAAE,QAAQ,EAAE,CAAC,EAAE;gBAC9F,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;oBACxB,SAAS;iBACT;gBACD,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,CAAC;gBACpD,IAAI,aAAa,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;oBAC3B,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,CAAC;oBACxE,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,YAAY,EAAE;wBACzC,WAAW,CAAC,EAAE,GAAG,KAAK,CAAC;qBACvB;yBAAM,IAAI,GAAG,KAAK,SAAS,EAAE;wBAC7B,WAAW,CAAC,OAAO,GAAG,KAAK,CAAC;qBAC5B;yBAAM,IAAI,GAAG,KAAK,YAAY,IAAI,GAAG,KAAK,iBAAiB,EAAE;wBAC7D,WAAW,CAAC,UAAU,GAAG,KAAK,CAAC;qBAC/B;iBACD;aACD;YAED,OAAO,WAAW,CAAC;SACnB;QAAC,OAAO,GAAG,EAAE;YACb,WAAW,CAAC,GAAG,CAAC,CAAC;SACjB;QAED,OAAO;IACR,CAAC;IAxDD,kBAwDC","file":"osReleaseInfo.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { constants as FSConstants } from 'fs';\nimport { open, FileHandle } from 'fs/promises';\nimport { createInterface as readLines } from 'readline';\nimport * as Platform from 'vs/base/common/platform';\n\ntype ReleaseInfo = {\n\tid: string;\n\tid_like?: string;\n\tversion_id?: string;\n};\n\nexport async function getOSReleaseInfo(errorLogger: (error: any) => void): Promise<ReleaseInfo | undefined> {\n\tif (Platform.isMacintosh || Platform.isWindows) {\n\t\treturn;\n\t}\n\n\t// Extract release information on linux based systems\n\t// using the identifiers specified in\n\t// https://www.freedesktop.org/software/systemd/man/os-release.html\n\tlet handle: FileHandle | undefined;\n\tfor (const filePath of ['/etc/os-release', '/usr/lib/os-release', '/etc/lsb-release']) {\n\t\ttry {\n\t\t\thandle = await open(filePath, FSConstants.R_OK);\n\t\t\tbreak;\n\t\t} catch (err) { }\n\t}\n\n\tif (!handle) {\n\t\terrorLogger('Unable to retrieve release information from known identifier paths.');\n\t\treturn;\n\t}\n\n\ttry {\n\t\tconst osReleaseKeys = new Set([\n\t\t\t'ID',\n\t\t\t'DISTRIB_ID',\n\t\t\t'ID_LIKE',\n\t\t\t'VERSION_ID',\n\t\t\t'DISTRIB_RELEASE',\n\t\t]);\n\t\tconst releaseInfo: ReleaseInfo = {\n\t\t\tid: 'unknown'\n\t\t};\n\n\t\tfor await (const line of readLines({ input: handle.createReadStream(), crlfDelay: Infinity })) {\n\t\t\tif (!line.includes('=')) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tconst key = line.split('=')[0].toUpperCase().trim();\n\t\t\tif (osReleaseKeys.has(key)) {\n\t\t\t\tconst value = line.split('=')[1].replace(/\"/g, '').toLowerCase().trim();\n\t\t\t\tif (key === 'ID' || key === 'DISTRIB_ID') {\n\t\t\t\t\treleaseInfo.id = value;\n\t\t\t\t} else if (key === 'ID_LIKE') {\n\t\t\t\t\treleaseInfo.id_like = value;\n\t\t\t\t} else if (key === 'VERSION_ID' || key === 'DISTRIB_RELEASE') {\n\t\t\t\t\treleaseInfo.version_id = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn releaseInfo;\n\t} catch (err) {\n\t\terrorLogger(err);\n\t}\n\n\treturn;\n}\n"]}