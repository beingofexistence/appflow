{"version":3,"sources":["file:///workspace/appflow/src/vs/base/parts/ipc/test/node/ipc.cp.integrationTest.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAShG,SAAS,YAAY;QACpB,OAAO,IAAI,YAAG,CAAI,aAAG,CAAQ,SAAS,CAAC,gBAAgB,CAAC,CAAC,MAAM,EAAE;YAChE,UAAU,EAAE,YAAY;YACxB,GAAG,EAAE,EAAE,qBAAqB,EAAE,qCAAqC,EAAE,OAAO,EAAE,IAAI,EAAE;SACpF,CAAC,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,oBAAoB,EAAE;QAC3B,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAChB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAEpB,IAAI,MAAW,CAAI;QACnB,IAAI,OAAiB,CAAC;QACtB,IAAI,OAAqB,CAAC;QAE1B,KAAK,CAAC,GAAG,EAAE;YACV,MAAM,GAAG,YAAY,EAAE,CAAC;YACxB,OAAO,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;YACpC,OAAO,GAAG,IAAI,iBAAG,CAAe,OAAO,CAAC,CAAC;QAC1C,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,GAAG,EAAE;YACb,MAAM,CAAC,OAAO,EAAE,CAAC;QAClB,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,eAAe,EAAE,KAAK,IAAI,EAAE;YAChC,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;YAC1C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YAC5C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QAC7C,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,QAAQ,EAAE,KAAK,IAAI,EAAE;YACzB,MAAM,KAAK,GAAG,aAAK,CAAC,SAAS,CAAC,aAAK,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;YAC3D,MAAM,OAAO,GAAG,OAAO,CAAC,KAAK,EAAE,CAAC;YAEhC,MAAM,CAAC,aAAa,EAAE,WAAW,CAAC,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;YAEzE,MAAM,CAAC,WAAW,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC;YAC1C,MAAM,CAAC,WAAW,CAAC,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,eAAe,EAAE,KAAK,IAAI,EAAE;YAChC,IAAI,KAAK,GAAG,CAAC,CAAC;YACd,MAAM,UAAU,GAAG,OAAO,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC;YAElD,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC;YACrC,MAAM,CAAC,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;YACnC,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAE7B,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC;YACvC,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YACrC,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;YAC7B,UAAU,CAAC,OAAO,EAAE,CAAC;YAErB,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,KAAK,EAAE,CAAC;YACvC,MAAM,CAAC,WAAW,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;YACrC,MAAM,CAAC,WAAW,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;QAC9B,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"ipc.cp.integrationTest.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Event } from 'vs/base/common/event';\nimport { IChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { Client } from 'vs/base/parts/ipc/node/ipc.cp';\nimport { ITestService, TestServiceClient } from './testService';\nimport { FileAccess } from 'vs/base/common/network';\n\nfunction createClient(): Client {\n\treturn new Client(FileAccess.asFileUri('bootstrap-fork').fsPath, {\n\t\tserverName: 'TestServer',\n\t\tenv: { VSCODE_AMD_ENTRYPOINT: 'vs/base/parts/ipc/test/node/testApp', verbose: true }\n\t});\n}\n\nsuite('IPC, Child Process', function () {\n\tthis.slow(2000);\n\tthis.timeout(10000);\n\n\tlet client: Client;\n\tlet channel: IChannel;\n\tlet service: ITestService;\n\n\tsetup(() => {\n\t\tclient = createClient();\n\t\tchannel = client.getChannel('test');\n\t\tservice = new TestServiceClient(channel);\n\t});\n\n\tteardown(() => {\n\t\tclient.dispose();\n\t});\n\n\ttest('createChannel', async () => {\n\t\tconst result = await service.pong('ping');\n\t\tassert.strictEqual(result.incoming, 'ping');\n\t\tassert.strictEqual(result.outgoing, 'pong');\n\t});\n\n\ttest('events', async () => {\n\t\tconst event = Event.toPromise(Event.once(service.onMarco));\n\t\tconst promise = service.marco();\n\n\t\tconst [promiseResult, eventResult] = await Promise.all([promise, event]);\n\n\t\tassert.strictEqual(promiseResult, 'polo');\n\t\tassert.strictEqual(eventResult.answer, 'polo');\n\t});\n\n\ttest('event dispose', async () => {\n\t\tlet count = 0;\n\t\tconst disposable = service.onMarco(() => count++);\n\n\t\tconst answer = await service.marco();\n\t\tassert.strictEqual(answer, 'polo');\n\t\tassert.strictEqual(count, 1);\n\n\t\tconst answer_1 = await service.marco();\n\t\tassert.strictEqual(answer_1, 'polo');\n\t\tassert.strictEqual(count, 2);\n\t\tdisposable.dispose();\n\n\t\tconst answer_2 = await service.marco();\n\t\tassert.strictEqual(answer_2, 'polo');\n\t\tassert.strictEqual(count, 2);\n\t});\n});\n"]}