{"version":3,"sources":["file:///workspace/appflow/src/vs/base/parts/ipc/common/ipc.electron.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAUhG;;;;OAIG;IACH,MAAa,GAAG;QAEf,YAAoB,CAAc,EAAW,SAA0B;YAAnD,MAAC,GAAD,CAAC,CAAa;YAAW,cAAS,GAAT,SAAS,CAAiB;QAAI,CAAC;QAE5E,IAAI,CAAC,OAAY;YAChB,IAAI;gBACH,IAAI,CAAC,CAAC,CAAM,IAAI,CAAC,gBAAgB,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;aACnD;YAAC,OAAO,CAAC,EAAE;gBACX,yBAAyB;aACzB;QACF,CAAC;QAED,UAAU;YACT,IAAI,CAAC,CAAC,CAAM,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;QAC7C,CAAC;KACD;IAfD,kBAeC","file":"ipc.electron.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { Event } from 'vs/base/common/event';\nimport { IMessagePassingProtocol } from 'vs/base/parts/ipc/common/ipc';\n\nexport interface Sender {\n\tsend(channel: string, msg: unknown): void;\n}\n\n/**\n * The Electron `Protocol` leverages Electron style IPC communication (`ipcRenderer`, `ipcMain`)\n * for the implementation of the `IMessagePassingProtocol`. That style of API requires a channel\n * name for sending data.\n */\nexport class Protocol implements IMessagePassingProtocol {\n\n\tconstructor(private sender: Sender, readonly onMessage: Event<VSBuffer>) { }\n\n\tsend(message: VSBuffer): void {\n\t\ttry {\n\t\t\tthis.sender.send('vscode:message', message.buffer);\n\t\t} catch (e) {\n\t\t\t// systems are going down\n\t\t}\n\t}\n\n\tdisconnect(): void {\n\t\tthis.sender.send('vscode:disconnect', null);\n\t}\n}\n"]}