{"version":3,"sources":["file:///workspace/appflow/src/vs/base/parts/ipc/common/ipc.mp.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAiChG;;;;OAIG;IACH,MAAa,GAAG;QAIf,YAAoB,CAAiB;YAAjB,MAAC,GAAD,CAAC,CAAgB;YAF5B,cAAS,GAAG,aAAK,CAAC,mBAAmB,CAAW,IAAI,CAAC,CAAC,EAAK,SAAS,EAAE,CAAC,CAAe,EAAE,EAAE,CAAC,YAAG,CAAM,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;YAI1H,sDAAsD;YACtD,CAAC,CAAI,KAAK,EAAE,CAAC;QACd,CAAC;QAED,IAAI,CAAC,OAAY;YAChB,IAAI,CAAC,CAAC,CAAI,WAAW,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACvC,CAAC;QAED,UAAU;YACT,IAAI,CAAC,CAAC,CAAI,KAAK,EAAE,CAAC;QACnB,CAAC;KACD;IAjBD,kBAiBC;IAED;;OAEG;IACH,MAAa,GAAO,SAAQ,SAAG;QAI9B,YAAY,IAAiB,EAAE,QAAgB;YAC9C,MAAM,QAAQ,GAAG,IAAI,GAAG,CAAM,IAAI,CAAC,CAAC;YACpC,KAAK,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;YAE1B,IAAI,CAAC,CAAC,GAAU,QAAQ,CAAC;QAC1B,CAAC;QAEQ,OAAO;YACf,IAAI,CAAC,CAAC,CAAQ,UAAU,EAAE,CAAC;YAE3B,KAAK,CAAC,OAAO,EAAE,CAAC;QACjB,CAAC;KACD;IAhBD,kBAgBC","file":"ipc.mp.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { Event } from 'vs/base/common/event';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { IMessagePassingProtocol, IPCClient } from 'vs/base/parts/ipc/common/ipc';\n\n/**\n * Declare minimal `MessageEvent` and `MessagePort` interfaces here\n * so that this utility can be used both from `browser` and\n * `electron-main` namespace where message ports are available.\n */\n\nexport interface MessageEvent {\n\n\t/**\n\t * For our use we only consider `Uint8Array` a valid data transfer\n\t * via message ports because our protocol implementation is buffer based.\n\t */\n\tdata: Uint8Array;\n}\n\nexport interface MessagePort {\n\n\taddEventListener(type: 'message', listener: (this: MessagePort, e: MessageEvent) => unknown): void;\n\tremoveEventListener(type: 'message', listener: (this: MessagePort, e: MessageEvent) => unknown): void;\n\n\tpostMessage(message: Uint8Array): void;\n\n\tstart(): void;\n\tclose(): void;\n}\n\n/**\n * The MessagePort `Protocol` leverages MessagePort style IPC communication\n * for the implementation of the `IMessagePassingProtocol`. That style of API\n * is a simple `onmessage` / `postMessage` pattern.\n */\nexport class Protocol implements IMessagePassingProtocol {\n\n\treadonly onMessage = Event.fromDOMEventEmitter<VSBuffer>(this.port, 'message', (e: MessageEvent) => VSBuffer.wrap(e.data));\n\n\tconstructor(private port: MessagePort) {\n\n\t\t// we must call start() to ensure messages are flowing\n\t\tport.start();\n\t}\n\n\tsend(message: VSBuffer): void {\n\t\tthis.port.postMessage(message.buffer);\n\t}\n\n\tdisconnect(): void {\n\t\tthis.port.close();\n\t}\n}\n\n/**\n * An implementation of a `IPCClient` on top of MessagePort style IPC communication.\n */\nexport class Client extends IPCClient implements IDisposable {\n\n\tprivate protocol: Protocol;\n\n\tconstructor(port: MessagePort, clientId: string) {\n\t\tconst protocol = new Protocol(port);\n\t\tsuper(protocol, clientId);\n\n\t\tthis.protocol = protocol;\n\t}\n\n\toverride dispose(): void {\n\t\tthis.protocol.disconnect();\n\n\t\tsuper.dispose();\n\t}\n}\n"]}