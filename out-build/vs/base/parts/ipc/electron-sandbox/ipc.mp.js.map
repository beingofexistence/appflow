{"version":3,"sources":["file:///workspace/appflow/src/vs/base/parts/ipc/electron-sandbox/ipc.mp.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAYzF,KAAK,UAAU,GAAG,CAAS,cAAkC,EAAE,eAAuB,EAAE,KAAK,GAAG,IAAA,UAAG,GAAW;QAEpH,iDAAiD;QACjD,iDAAiD;QACjD,YAAE,CAAa,OAAO,CAAC,eAAe,EAAE,KAAK,CAAC,CAAC;QAE/C,sDAAsD;QACtD,uDAAuD;QACvD,IAAI,OAAO,cAAc,KAAK,QAAQ,EAAE;YACvC,YAAE,CAAU,IAAI,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;SACxC;QAED,0DAA0D;QAC1D,uDAAuD;QACvD,yBAAyB;QACzB,MAAM,sBAAsB,GAAG,aAAK,CAAC,mBAAmB,CAAwB,MAAM,EAAE,SAAS,EAAE,CAAC,CAAe,EAAE,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;QACjL,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,aAAK,CAAC,SAAS,CAAC,aAAK,CAAC,IAAI,CAAC,aAAK,CAAC,MAAM,CAAC,sBAAsB,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,KAAK,IAAI,CAAC,CAAC,MAAM,KAAK,MAAM,CAAC,CAAC,CAAC,CAAC;QAExI,OAAO,IAAI,CAAC;IACb,CAAC;IAnBD,kBAmBC","file":"ipc.mp.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { ipcMessagePort, ipcRenderer } from 'vs/base/parts/sandbox/electron-sandbox/globals';\n\ninterface IMessageChannelResult {\n\tnonce: string;\n\tport: MessagePort;\n\tsource: unknown;\n}\n\nexport async function acquirePort(requestChannel: string | undefined, responseChannel: string, nonce = generateUuid()): Promise<MessagePort> {\n\n\t// Get ready to acquire the message port from the\n\t// provided `responseChannel` via preload helper.\n\tipcMessagePort.acquire(responseChannel, nonce);\n\n\t// If a `requestChannel` is provided, we are in charge\n\t// to trigger acquisition of the message port from main\n\tif (typeof requestChannel === 'string') {\n\t\tipcRenderer.send(requestChannel, nonce);\n\t}\n\n\t// Wait until the main side has returned the `MessagePort`\n\t// We need to filter by the `nonce` to ensure we listen\n\t// to the right response.\n\tconst onMessageChannelResult = Event.fromDOMEventEmitter<IMessageChannelResult>(window, 'message', (e: MessageEvent) => ({ nonce: e.data, port: e.ports[0], source: e.source }));\n\tconst { port } = await Event.toPromise(Event.once(Event.filter(onMessageChannelResult, e => e.nonce === nonce && e.source === window)));\n\n\treturn port;\n}\n"]}