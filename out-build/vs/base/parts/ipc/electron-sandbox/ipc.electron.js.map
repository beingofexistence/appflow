{"version":3,"sources":["file:///workspace/appflow/src/vs/base/parts/ipc/electron-sandbox/ipc.electron.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAShG;;;OAGG;IACH,MAAa,GAAO,SAAQ,SAAG;QAItB,MAAM,CAAC,CAAC;YACf,MAAM,SAAS,GAAG,aAAK,CAAC,oBAAoB,CAAW,YAAE,EAAW,gBAAgB,EAAE,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,CAAC,YAAG,CAAM,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAC9H,YAAE,CAAU,IAAI,CAAC,cAAc,CAAC,CAAC;YAEjC,OAAO,IAAI,kBAAgB,CAAC,YAAE,EAAW,SAAS,CAAC,CAAC;QACrD,CAAC;QAED,YAAY,EAAU;YACrB,MAAM,QAAQ,GAAG,GAAG,CAAI,CAAC,EAAe,CAAC;YACzC,KAAK,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC;YAEpB,IAAI,CAAC,CAAC,GAAU,QAAQ,CAAC;QAC1B,CAAC;QAEQ,OAAO;YACf,IAAI,CAAC,CAAC,CAAQ,UAAU,EAAE,CAAC;QAC5B,CAAC;KACD;IArBD,kBAqBC","file":"ipc.electron.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { Event } from 'vs/base/common/event';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { IPCClient } from 'vs/base/parts/ipc/common/ipc';\nimport { Protocol as ElectronProtocol } from 'vs/base/parts/ipc/common/ipc.electron';\nimport { ipcRenderer } from 'vs/base/parts/sandbox/electron-sandbox/globals';\n\n/**\n * An implementation of `IPCClient` on top of Electron `ipcRenderer` IPC communication\n * provided from sandbox globals (via preload script).\n */\nexport class Client extends IPCClient implements IDisposable {\n\n\tprivate protocol: ElectronProtocol;\n\n\tprivate static createProtocol(): ElectronProtocol {\n\t\tconst onMessage = Event.fromNodeEventEmitter<VSBuffer>(ipcRenderer, 'vscode:message', (_, message) => VSBuffer.wrap(message));\n\t\tipcRenderer.send('vscode:hello');\n\n\t\treturn new ElectronProtocol(ipcRenderer, onMessage);\n\t}\n\n\tconstructor(id: string) {\n\t\tconst protocol = Client.createProtocol();\n\t\tsuper(protocol, id);\n\n\t\tthis.protocol = protocol;\n\t}\n\n\toverride dispose(): void {\n\t\tthis.protocol.disconnect();\n\t}\n}\n"]}