{"version":3,"sources":["file:///workspace/appflow/src/vs/base/parts/ipc/electron-main/ipcMain.ts"],"names":[],"mappings":"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","file":"ipcMain.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ipcMain as unsafeIpcMain, IpcMainEvent, IpcMainInvokeEvent } from 'electron';\nimport { onUnexpectedError } from 'vs/base/common/errors';\nimport { Event } from 'vs/base/common/event';\n\ntype ipcMainListener = (event: IpcMainEvent, ...args: any[]) => void;\n\nclass ValidatedIpcMain implements Event.NodeEventEmitter {\n\n\t// We need to keep a map of original listener to the wrapped variant in order\n\t// to properly implement `removeListener`. We use a `WeakMap` because we do\n\t// not want to prevent the `key` of the map to get garbage collected.\n\tprivate readonly mapListenerToWrapper = new WeakMap<ipcMainListener, ipcMainListener>();\n\n\t/**\n\t * Listens to `channel`, when a new message arrives `listener` would be called with\n\t * `listener(event, args...)`.\n\t */\n\ton(channel: string, listener: ipcMainListener): this {\n\n\t\t// Remember the wrapped listener so that later we can\n\t\t// properly implement `removeListener`.\n\t\tconst wrappedListener = (event: IpcMainEvent, ...args: any[]) => {\n\t\t\tif (this.validateEvent(channel, event)) {\n\t\t\t\tlistener(event, ...args);\n\t\t\t}\n\t\t};\n\n\t\tthis.mapListenerToWrapper.set(listener, wrappedListener);\n\n\t\tunsafeIpcMain.on(channel, wrappedListener);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a one time `listener` function for the event. This `listener` is invoked\n\t * only the next time a message is sent to `channel`, after which it is removed.\n\t */\n\tonce(channel: string, listener: ipcMainListener): this {\n\t\tunsafeIpcMain.once(channel, (event: IpcMainEvent, ...args: any[]) => {\n\t\t\tif (this.validateEvent(channel, event)) {\n\t\t\t\tlistener(event, ...args);\n\t\t\t}\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds a handler for an `invoke`able IPC. This handler will be called whenever a\n\t * renderer calls `ipcRenderer.invoke(channel, ...args)`.\n\t *\n\t * If `listener` returns a Promise, the eventual result of the promise will be\n\t * returned as a reply to the remote caller. Otherwise, the return value of the\n\t * listener will be used as the value of the reply.\n\t *\n\t * The `event` that is passed as the first argument to the handler is the same as\n\t * that passed to a regular event listener. It includes information about which\n\t * WebContents is the source of the invoke request.\n\t *\n\t * Errors thrown through `handle` in the main process are not transparent as they\n\t * are serialized and only the `message` property from the original error is\n\t * provided to the renderer process. Please refer to #24427 for details.\n\t */\n\thandle(channel: string, listener: (event: IpcMainInvokeEvent, ...args: any[]) => Promise<unknown>): this {\n\t\tunsafeIpcMain.handle(channel, (event: IpcMainInvokeEvent, ...args: any[]) => {\n\t\t\tif (this.validateEvent(channel, event)) {\n\t\t\t\treturn listener(event, ...args);\n\t\t\t}\n\n\t\t\treturn Promise.reject(`Invalid channel '${channel}' or sender for ipcMain.handle() usage.`);\n\t\t});\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Removes any handler for `channel`, if present.\n\t */\n\tremoveHandler(channel: string): this {\n\t\tunsafeIpcMain.removeHandler(channel);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Removes the specified `listener` from the listener array for the specified\n\t * `channel`.\n\t */\n\tremoveListener(channel: string, listener: ipcMainListener): this {\n\t\tconst wrappedListener = this.mapListenerToWrapper.get(listener);\n\t\tif (wrappedListener) {\n\t\t\tunsafeIpcMain.removeListener(channel, wrappedListener);\n\t\t\tthis.mapListenerToWrapper.delete(listener);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\tprivate validateEvent(channel: string, event: IpcMainEvent | IpcMainInvokeEvent): boolean {\n\t\tif (!channel || !channel.startsWith('vscode:')) {\n\t\t\tonUnexpectedError(`Refused to handle ipcMain event for channel '${channel}' because the channel is unknown.`);\n\t\t\treturn false; // unexpected channel\n\t\t}\n\n\t\tconst sender = event.senderFrame;\n\n\t\tconst url = sender.url;\n\t\t// `url` can be `undefined` when running tests from playwright https://github.com/microsoft/vscode/issues/147301\n\t\t// and `url` can be `about:blank` when reloading the window\n\t\t// from performance tab of devtools https://github.com/electron/electron/issues/39427.\n\t\t// It is fine to skip the checks in these cases.\n\t\tif (!url || url === 'about:blank') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet host = 'unknown';\n\t\ttry {\n\t\t\thost = new URL(url).host;\n\t\t} catch (error) {\n\t\t\tonUnexpectedError(`Refused to handle ipcMain event for channel '${channel}' because of a malformed URL '${url}'.`);\n\t\t\treturn false; // unexpected URL\n\t\t}\n\n\t\tif (host !== 'vscode-app') {\n\t\t\tonUnexpectedError(`Refused to handle ipcMain event for channel '${channel}' because of a bad origin of '${host}'.`);\n\t\t\treturn false; // unexpected sender\n\t\t}\n\n\t\tif (sender.parent !== null) {\n\t\t\tonUnexpectedError(`Refused to handle ipcMain event for channel '${channel}' because sender of origin '${host}' is not a main frame.`);\n\t\t\treturn false; // unexpected frame\n\t\t}\n\n\t\treturn true;\n\t}\n}\n\n/**\n * A drop-in replacement of `ipcMain` that validates the sender of a message\n * according to https://github.com/electron/electron/blob/main/docs/tutorial/security.md\n *\n * @deprecated direct use of Electron IPC is not encouraged. We have utilities in place\n * to create services on top of IPC, see `ProxyChannel` for more information.\n */\nexport const validatedIpcMain = new ValidatedIpcMain();\n"]}