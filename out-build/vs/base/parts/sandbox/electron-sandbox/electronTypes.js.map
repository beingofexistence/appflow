{"version":3,"sources":["file:///workspace/appflow/src/vs/base/parts/sandbox/electron-sandbox/electronTypes.ts","vs/base/parts/sandbox/electron-sandbox/electronTypes.ts"],"names":[],"mappings":"AAAA;;;gGAGgG","file":"electronTypes.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n// #######################################################################\n// ###                                                                 ###\n// ###      electron.d.ts types we expose from electron-sandbox        ###\n// ###                    (copied from Electron 16.x)                  ###\n// ###                                                                 ###\n// #######################################################################\n\nexport interface IpcRendererEvent extends Event {\n\n\t// Docs: https://electronjs.org/docs/api/structures/ipc-renderer-event\n\n\t// Note: API with `Transferable` intentionally commented out because you\n\t// cannot transfer these when `contextIsolation: true`.\n\t// /**\n\t//  * A list of MessagePorts that were transferred with this message\n\t//  */\n\t// ports: MessagePort[];\n\t/**\n\t * The `IpcRenderer` instance that emitted the event originally\n\t */\n\tsender: IpcRenderer;\n\t/**\n\t * The `webContents.id` that sent the message, you can call\n\t * `event.sender.sendTo(event.senderId, ...)` to reply to the message, see\n\t * ipcRenderer.sendTo for more information. This only applies to messages sent from\n\t * a different renderer. Messages sent directly from the main process set\n\t * `event.senderId` to `0`.\n\t */\n\tsenderId: number;\n}\n\nexport interface IpcRenderer {\n\n\t// Docs: https://electronjs.org/docs/api/ipc-renderer\n\n\t/**\n\t * Listens to `channel`, when a new message arrives `listener` would be called with\n\t * `listener(event, args...)`.\n\t */\n\ton(channel: string, listener: (event: IpcRendererEvent, ...args: any[]) => void): this;\n\t/**\n\t * Adds a one time `listener` function for the event. This `listener` is invoked\n\t * only the next time a message is sent to `channel`, after which it is removed.\n\t */\n\tonce(channel: string, listener: (event: IpcRendererEvent, ...args: any[]) => void): this;\n\t/**\n\t * Removes the specified `listener` from the listener array for the specified\n\t * `channel`.\n\t */\n\tremoveListener(channel: string, listener: (...args: any[]) => void): this;\n\t/**\n\t * Send an asynchronous message to the main process via `channel`, along with\n\t * arguments. Arguments will be serialized with the Structured Clone Algorithm,\n\t * just like `window.postMessage`, so prototype chains will not be included.\n\t * Sending Functions, Promises, Symbols, WeakMaps, or WeakSets will throw an\n\t * exception.\n\t *\n\t * > **NOTE:** Sending non-standard JavaScript types such as DOM objects or special\n\t * Electron objects will throw an exception.\n\t *\n\t * Since the main process does not have support for DOM objects such as\n\t * `ImageBitmap`, `File`, `DOMMatrix` and so on, such objects cannot be sent over\n\t * Electron's IPC to the main process, as the main process would have no way to\n\t * decode them. Attempting to send such objects over IPC will result in an error.\n\t *\n\t * The main process handles it by listening for `channel` with the `ipcMain`\n\t * module.\n\t *\n\t * If you need to transfer a `MessagePort` to the main process, use\n\t * `ipcRenderer.postMessage`.\n\t *\n\t * If you want to receive a single response from the main process, like the result\n\t * of a method call, consider using `ipcRenderer.invoke`.\n\t */\n\tsend(channel: string, ...args: any[]): void;\n\t/**\n\t * Resolves with the response from the main process.\n\t *\n\t * Send a message to the main process via `channel` and expect a result\n\t * asynchronously. Arguments will be serialized with the Structured Clone\n\t * Algorithm, just like `window.postMessage`, so prototype chains will not be\n\t * included. Sending Functions, Promises, Symbols, WeakMaps, or WeakSets will throw\n\t * an exception.\n\t *\n\t * > **NOTE:** Sending non-standard JavaScript types such as DOM objects or special\n\t * Electron objects will throw an exception.\n\t *\n\t * Since the main process does not have support for DOM objects such as\n\t * `ImageBitmap`, `File`, `DOMMatrix` and so on, such objects cannot be sent over\n\t * Electron's IPC to the main process, as the main process would have no way to\n\t * decode them. Attempting to send such objects over IPC will result in an error.\n\t *\n\t * The main process should listen for `channel` with `ipcMain.handle()`.\n\t *\n\t * For example:\n\t *\n\t * If you need to transfer a `MessagePort` to the main process, use\n\t * `ipcRenderer.postMessage`.\n\t *\n\t * If you do not need a response to the message, consider using `ipcRenderer.send`.\n\t */\n\tinvoke(channel: string, ...args: any[]): Promise<any>;\n\n\t// Note: API with `Transferable` intentionally commented out because you\n\t// cannot transfer these when `contextIsolation: true`.\n\t// /**\n\t//  * Send a message to the main process, optionally transferring ownership of zero or\n\t//  * more `MessagePort` objects.\n\t//  *\n\t//  * The transferred `MessagePort` objects will be available in the main process as\n\t//  * `MessagePortMain` objects by accessing the `ports` property of the emitted\n\t//  * event.\n\t//  *\n\t//  * For example:\n\t//  *\n\t//  * For more information on using `MessagePort` and `MessageChannel`, see the MDN\n\t//  * documentation.\n\t//  */\n\t// postMessage(channel: string, message: any, transfer?: MessagePort[]): void;\n}\n\nexport interface WebFrame {\n\t/**\n\t * Changes the zoom level to the specified level. The original size is 0 and each\n\t * increment above or below represents zooming 20% larger or smaller to default\n\t * limits of 300% and 50% of original size, respectively.\n\t *\n\t * > **NOTE**: The zoom policy at the Chromium level is same-origin, meaning that\n\t * the zoom level for a specific domain propagates across all instances of windows\n\t * with the same domain. Differentiating the window URLs will make zoom work\n\t * per-window.\n\t */\n\tsetZoomLevel(level: number): void;\n}\n\nexport interface ProcessMemoryInfo {\n\n\t// Docs: https://electronjs.org/docs/api/structures/process-memory-info\n\n\t/**\n\t * The amount of memory not shared by other processes, such as JS heap or HTML\n\t * content in Kilobytes.\n\t */\n\tprivate: number;\n\t/**\n\t * The amount of memory currently pinned to actual physical RAM in Kilobytes.\n\t *\n\t * @platform linux,win32\n\t */\n\tresidentSet: number;\n\t/**\n\t * The amount of memory shared between processes, typically memory consumed by the\n\t * Electron code itself in Kilobytes.\n\t */\n\tshared: number;\n}\n\n/**\n * Additional information around a `app.on('login')` event.\n */\nexport interface AuthInfo {\n\tisProxy: boolean;\n\tscheme: string;\n\thost: string;\n\tport: number;\n\trealm: string;\n}\n","/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n\n// #######################################################################\n// ###                                                                 ###\n// ###      electron.d.ts types we expose from electron-sandbox        ###\n// ###                    (copied from Electron 16.x)                  ###\n// ###                                                                 ###\n// #######################################################################\n\nexport interface IpcRendererEvent extends Event {\n\n\t// Docs: https://electronjs.org/docs/api/structures/ipc-renderer-event\n\n\t// Note: API with `Transferable` intentionally commented out because you\n\t// cannot transfer these when `contextIsolation: true`.\n\t// /**\n\t//  * A list of MessagePorts that were transferred with this message\n\t//  */\n\t// ports: MessagePort[];\n\t/**\n\t * The `IpcRenderer` instance that emitted the event originally\n\t */\n\tsender: IpcRenderer;\n\t/**\n\t * The `webContents.id` that sent the message, you can call\n\t * `event.sender.sendTo(event.senderId, ...)` to reply to the message, see\n\t * ipcRenderer.sendTo for more information. This only applies to messages sent from\n\t * a different renderer. Messages sent directly from the main process set\n\t * `event.senderId` to `0`.\n\t */\n\tsenderId: number;\n}\n\nexport interface IpcRenderer {\n\n\t// Docs: https://electronjs.org/docs/api/ipc-renderer\n\n\t/**\n\t * Listens to `channel`, when a new message arrives `listener` would be called with\n\t * `listener(event, args...)`.\n\t */\n\ton(channel: string, listener: (event: IpcRendererEvent, ...args: any[]) => void): this;\n\t/**\n\t * Adds a one time `listener` function for the event. This `listener` is invoked\n\t * only the next time a message is sent to `channel`, after which it is removed.\n\t */\n\tonce(channel: string, listener: (event: IpcRendererEvent, ...args: any[]) => void): this;\n\t/**\n\t * Removes the specified `listener` from the listener array for the specified\n\t * `channel`.\n\t */\n\tremoveListener(channel: string, listener: (...args: any[]) => void): this;\n\t/**\n\t * Send an asynchronous message to the main process via `channel`, along with\n\t * arguments. Arguments will be serialized with the Structured Clone Algorithm,\n\t * just like `window.postMessage`, so prototype chains will not be included.\n\t * Sending Functions, Promises, Symbols, WeakMaps, or WeakSets will throw an\n\t * exception.\n\t *\n\t * > **NOTE:** Sending non-standard JavaScript types such as DOM objects or special\n\t * Electron objects will throw an exception.\n\t *\n\t * Since the main process does not have support for DOM objects such as\n\t * `ImageBitmap`, `File`, `DOMMatrix` and so on, such objects cannot be sent over\n\t * Electron's IPC to the main process, as the main process would have no way to\n\t * decode them. Attempting to send such objects over IPC will result in an error.\n\t *\n\t * The main process handles it by listening for `channel` with the `ipcMain`\n\t * module.\n\t *\n\t * If you need to transfer a `MessagePort` to the main process, use\n\t * `ipcRenderer.postMessage`.\n\t *\n\t * If you want to receive a single response from the main process, like the result\n\t * of a method call, consider using `ipcRenderer.invoke`.\n\t */\n\tsend(channel: string, ...args: any[]): void;\n\t/**\n\t * Resolves with the response from the main process.\n\t *\n\t * Send a message to the main process via `channel` and expect a result\n\t * asynchronously. Arguments will be serialized with the Structured Clone\n\t * Algorithm, just like `window.postMessage`, so prototype chains will not be\n\t * included. Sending Functions, Promises, Symbols, WeakMaps, or WeakSets will throw\n\t * an exception.\n\t *\n\t * > **NOTE:** Sending non-standard JavaScript types such as DOM objects or special\n\t * Electron objects will throw an exception.\n\t *\n\t * Since the main process does not have support for DOM objects such as\n\t * `ImageBitmap`, `File`, `DOMMatrix` and so on, such objects cannot be sent over\n\t * Electron's IPC to the main process, as the main process would have no way to\n\t * decode them. Attempting to send such objects over IPC will result in an error.\n\t *\n\t * The main process should listen for `channel` with `ipcMain.handle()`.\n\t *\n\t * For example:\n\t *\n\t * If you need to transfer a `MessagePort` to the main process, use\n\t * `ipcRenderer.postMessage`.\n\t *\n\t * If you do not need a response to the message, consider using `ipcRenderer.send`.\n\t */\n\tinvoke(channel: string, ...args: any[]): Promise<any>;\n\n\t// Note: API with `Transferable` intentionally commented out because you\n\t// cannot transfer these when `contextIsolation: true`.\n\t// /**\n\t//  * Send a message to the main process, optionally transferring ownership of zero or\n\t//  * more `MessagePort` objects.\n\t//  *\n\t//  * The transferred `MessagePort` objects will be available in the main process as\n\t//  * `MessagePortMain` objects by accessing the `ports` property of the emitted\n\t//  * event.\n\t//  *\n\t//  * For example:\n\t//  *\n\t//  * For more information on using `MessagePort` and `MessageChannel`, see the MDN\n\t//  * documentation.\n\t//  */\n\t// postMessage(channel: string, message: any, transfer?: MessagePort[]): void;\n}\n\nexport interface WebFrame {\n\t/**\n\t * Changes the zoom level to the specified level. The original size is 0 and each\n\t * increment above or below represents zooming 20% larger or smaller to default\n\t * limits of 300% and 50% of original size, respectively.\n\t *\n\t * > **NOTE**: The zoom policy at the Chromium level is same-origin, meaning that\n\t * the zoom level for a specific domain propagates across all instances of windows\n\t * with the same domain. Differentiating the window URLs will make zoom work\n\t * per-window.\n\t */\n\tsetZoomLevel(level: number): void;\n}\n\nexport interface ProcessMemoryInfo {\n\n\t// Docs: https://electronjs.org/docs/api/structures/process-memory-info\n\n\t/**\n\t * The amount of memory not shared by other processes, such as JS heap or HTML\n\t * content in Kilobytes.\n\t */\n\tprivate: number;\n\t/**\n\t * The amount of memory currently pinned to actual physical RAM in Kilobytes.\n\t *\n\t * @platform linux,win32\n\t */\n\tresidentSet: number;\n\t/**\n\t * The amount of memory shared between processes, typically memory consumed by the\n\t * Electron code itself in Kilobytes.\n\t */\n\tshared: number;\n}\n\n/**\n * Additional information around a `app.on('login')` event.\n */\nexport interface AuthInfo {\n\tisProxy: boolean;\n\tscheme: string;\n\thost: string;\n\tport: number;\n\trealm: string;\n}\n"]}