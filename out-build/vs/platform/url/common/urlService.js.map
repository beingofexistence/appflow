{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/url/common/urlService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAQhG,MAAsB,GAAmB,SAAQ,eAAG;QAApD;;YAIS,MAAC,GAAU,IAAI,GAAG,EAAe,CAAC;QAa3C,CAAC;QATA,IAAI,CAAC,GAAQ,EAAE,OAAyB;YACvC,MAAM,QAAQ,GAAG,CAAC,GAAG,IAAI,CAAC,CAAC,CAAQ,MAAM,EAAE,CAAC,CAAC;YAC7C,OAAO,IAAA,WAAG,EAAG,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,KAAK,CAAC,CAAC;QAC9G,CAAC;QAED,eAAe,CAAC,OAAoB;YACnC,IAAI,CAAC,CAAC,CAAQ,GAAG,CAAC,OAAO,CAAC,CAAC;YAC3B,OAAO,IAAA,eAAG,EAAU,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAQ,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;QAC1D,CAAC;KACD;IAjBD,kBAiBC;IAEM,IAAM,GAAG,GAAT,MAAM,GAAiB,SAAQ,GAAG;QAExC,YACqC,CAAmB;YAEvD,KAAK,EAAE,CAAC;YAF4B,MAAC,GAAD,CAAC,CAAkB;QAGxD,CAAC;QAED,MAAM,CAAC,OAAgC;YACtC,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,SAAS,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,SAAS,EAAE,CAAC;YAEhJ,IAAI,SAAS,IAAI,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;gBACjD,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC,CAAC,0DAA0D;aAC7E;YAED,OAAO,SAAG,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,CAAc,WAAW,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE,CAAC,CAAC;QAChG,CAAC;KACD,CAAA;IAjBY,kBAAG;kBAAH,GAAG;QAGb,WAAA,oBAAG,CAAA;OAHO,GAAG,CAiBf","file":"urlService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { first } from 'vs/base/common/async';\nimport { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IOpenURLOptions, IURLHandler, IURLService } from 'vs/platform/url/common/url';\n\nexport abstract class AbstractURLService extends Disposable implements IURLService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate handlers = new Set<IURLHandler>();\n\n\tabstract create(options?: Partial<UriComponents>): URI;\n\n\topen(uri: URI, options?: IOpenURLOptions): Promise<boolean> {\n\t\tconst handlers = [...this.handlers.values()];\n\t\treturn first(handlers.map(h => () => h.handleURL(uri, options)), undefined, false).then(val => val || false);\n\t}\n\n\tregisterHandler(handler: IURLHandler): IDisposable {\n\t\tthis.handlers.add(handler);\n\t\treturn toDisposable(() => this.handlers.delete(handler));\n\t}\n}\n\nexport class NativeURLService extends AbstractURLService {\n\n\tconstructor(\n\t\t@IProductService protected readonly productService: IProductService\n\t) {\n\t\tsuper();\n\t}\n\n\tcreate(options?: Partial<UriComponents>): URI {\n\t\tlet { authority, path, query, fragment } = options ? options : { authority: undefined, path: undefined, query: undefined, fragment: undefined };\n\n\t\tif (authority && path && path.indexOf('/') !== 0) {\n\t\t\tpath = `/${path}`; // URI validation requires a path if there is an authority\n\t\t}\n\n\t\treturn URI.from({ scheme: this.productService.urlProtocol, authority, path, query, fragment });\n\t}\n}\n"]}