{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/url/electron-main/electronUrlListener.ts"],"names":[],"mappings":"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","file":"electronUrlListener.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { app, Event as ElectronEvent } from 'electron';\nimport { disposableTimeout } from 'vs/base/common/async';\nimport { Event } from 'vs/base/common/event';\nimport { Disposable, DisposableStore, IDisposable } from 'vs/base/common/lifecycle';\nimport { isWindows } from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { IEnvironmentMainService } from 'vs/platform/environment/electron-main/environmentMainService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IURLService } from 'vs/platform/url/common/url';\nimport { IProtocolUrl } from 'vs/platform/url/electron-main/url';\nimport { IWindowsMainService } from 'vs/platform/windows/electron-main/windows';\n\n/**\n * A listener for URLs that are opened from the OS and handled by VSCode.\n * Depending on the platform, this works differently:\n * - Windows: we use `app.setAsDefaultProtocolClient()` to register VSCode with the OS\n *            and additionally add the `open-url` command line argument to identify.\n * - macOS:   we rely on `app.on('open-url')` to be called by the OS\n * - Linux:   we have a special shortcut installed (`resources/linux/code-url-handler.desktop`)\n *            that calls VSCode with the `open-url` command line argument\n *            (https://github.com/microsoft/vscode/pull/56727)\n */\nexport class ElectronURLListener {\n\n\tprivate uris: IProtocolUrl[] = [];\n\tprivate retryCount = 0;\n\tprivate flushDisposable: IDisposable = Disposable.None;\n\tprivate readonly disposables = new DisposableStore();\n\n\tconstructor(\n\t\tinitialProtocolUrls: IProtocolUrl[] | undefined,\n\t\tprivate readonly urlService: IURLService,\n\t\twindowsMainService: IWindowsMainService,\n\t\tenvironmentMainService: IEnvironmentMainService,\n\t\tproductService: IProductService,\n\t\tprivate readonly logService: ILogService\n\t) {\n\t\tif (initialProtocolUrls) {\n\t\t\tlogService.trace('ElectronURLListener initialUrisToHandle:', initialProtocolUrls.map(url => url.originalUrl));\n\n\t\t\t// the initial set of URIs we need to handle once the window is ready\n\t\t\tthis.uris = initialProtocolUrls;\n\t\t}\n\n\t\t// Windows: install as protocol handler\n\t\tif (isWindows) {\n\t\t\tconst windowsParameters = environmentMainService.isBuilt ? [] : [`\"${environmentMainService.appRoot}\"`];\n\t\t\twindowsParameters.push('--open-url', '--');\n\t\t\tapp.setAsDefaultProtocolClient(productService.urlProtocol, process.execPath, windowsParameters);\n\t\t}\n\n\t\t// macOS: listen to `open-url` events from here on to handle\n\t\tconst onOpenElectronUrl = Event.map(\n\t\t\tEvent.fromNodeEventEmitter(app, 'open-url', (event: ElectronEvent, url: string) => ({ event, url })),\n\t\t\t({ event, url }) => {\n\t\t\t\tevent.preventDefault(); // always prevent default and return the url as string\n\n\t\t\t\treturn url;\n\t\t\t});\n\n\t\tthis.disposables.add(onOpenElectronUrl(url => {\n\t\t\tconst uri = this.uriFromRawUrl(url);\n\t\t\tif (!uri) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.urlService.open(uri, { originalUrl: url });\n\t\t}));\n\n\t\t// Send initial links to the window once it has loaded\n\t\tconst isWindowReady = windowsMainService.getWindows()\n\t\t\t.filter(window => window.isReady)\n\t\t\t.length > 0;\n\n\t\tif (isWindowReady) {\n\t\t\tlogService.trace('ElectronURLListener: window is ready to handle URLs');\n\n\t\t\tthis.flush();\n\t\t} else {\n\t\t\tlogService.trace('ElectronURLListener: waiting for window to be ready to handle URLs...');\n\n\t\t\tEvent.once(windowsMainService.onDidSignalReadyWindow)(this.flush, this, this.disposables);\n\t\t}\n\t}\n\n\tprivate uriFromRawUrl(url: string): URI | undefined {\n\t\ttry {\n\t\t\treturn URI.parse(url);\n\t\t} catch (e) {\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tprivate async flush(): Promise<void> {\n\t\tif (this.retryCount++ > 10) {\n\t\t\tthis.logService.trace('ElectronURLListener#flush(): giving up after 10 retries');\n\n\t\t\treturn;\n\t\t}\n\n\t\tthis.logService.trace('ElectronURLListener#flush(): flushing URLs');\n\n\t\tconst uris: IProtocolUrl[] = [];\n\n\t\tfor (const obj of this.uris) {\n\t\t\tconst handled = await this.urlService.open(obj.uri, { originalUrl: obj.originalUrl });\n\t\t\tif (handled) {\n\t\t\t\tthis.logService.trace('ElectronURLListener#flush(): URL was handled', obj.originalUrl);\n\t\t\t} else {\n\t\t\t\tthis.logService.trace('ElectronURLListener#flush(): URL was not yet handled', obj.originalUrl);\n\n\t\t\t\turis.push(obj);\n\t\t\t}\n\t\t}\n\n\t\tif (uris.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.uris = uris;\n\t\tthis.flushDisposable = disposableTimeout(() => this.flush(), 500);\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables.dispose();\n\t\tthis.flushDisposable.dispose();\n\t}\n}\n"]}