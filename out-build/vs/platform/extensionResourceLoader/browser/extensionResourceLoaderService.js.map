{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/extensionResourceLoader/browser/extensionResourceLoaderService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;IAahG,IAAM,8BAA8B,GAApC,MAAM,8BAA+B,SAAQ,6BAAG;QAI/C,YACe,WAAgB,EACb,cAAmB,EACnB,cAAmB,EACf,kBAAuB,EACrB,oBAAyB,EAClB,CAAgB;YAE9C,KAAK,CAAC,WAAW,EAAE,cAAc,EAAE,cAAc,EAAE,kBAAkB,EAAE,oBAAoB,CAAC,CAAC;YAF/D,MAAC,GAAD,CAAC,CAAe;QAG/C,CAAC;QAED,KAAK,CAAC,qBAAqB,CAAC,GAAQ;YACnC,GAAG,GAAG,aAAG,CAAQ,eAAe,CAAC,GAAG,CAAC,CAAC;YAEtC,IAAI,GAAG,CAAC,MAAM,KAAK,iBAAO,CAAC,IAAI,IAAI,GAAG,CAAC,MAAM,KAAK,iBAAO,CAAC,KAAK,EAAE;gBAChE,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,CAAC,CAAY,QAAQ,CAAC,GAAG,CAAC,CAAC;gBACrD,OAAO,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;aAC/B;YAED,MAAM,WAAW,GAAgB,EAAE,CAAC;YACpC,IAAI,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,EAAE;gBACzC,WAAW,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,CAAC,EAAkC,CAAC;gBACrE,WAAW,CAAC,IAAI,GAAG,MAAM,CAAC,CAAC,8DAA8D;aACzF;YAED,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,WAAW,CAAC,CAAC;YAC9D,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE;gBAC5B,IAAI,CAAC,CAAC,CAAW,IAAI,CAAC,eAAe,GAAG,CAAC,QAAQ,CAAC,IAAI,CAAC,6BAA6B,QAAQ,CAAC,MAAM,EAAE,CAAC,CAAC;gBACvG,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;aACrC;YACD,OAAO,QAAQ,CAAC,IAAI,EAAE,CAAC;QACxB,CAAC;KACD,CAAA;IApCK,8BAA8B;QAKjC,WAAA,WAAG,CAAA;QACH,WAAA,aAAG,CAAA;QACH,WAAA,oBAAG,CAAA;QACH,WAAA,iBAAG,CAAA;QACH,WAAA,mBAAG,CAAA;QACH,WAAA,SAAG,CAAA;OAVA,8BAA8B,CAoCnC;IAED,IAAA,gBAAG,EAAe,6BAAG,EAA8B,8BAA8B,oCAA4B,CAAC","file":"extensionResourceLoaderService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { FileAccess, Schemas } from 'vs/base/common/network';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { AbstractExtensionResourceLoaderService, IExtensionResourceLoaderService } from 'vs/platform/extensionResourceLoader/common/extensionResourceLoader';\n\nclass ExtensionResourceLoaderService extends AbstractExtensionResourceLoaderService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IFileService fileService: IFileService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IProductService productService: IProductService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t) {\n\t\tsuper(fileService, storageService, productService, environmentService, configurationService);\n\t}\n\n\tasync readExtensionResource(uri: URI): Promise<string> {\n\t\turi = FileAccess.uriToBrowserUri(uri);\n\n\t\tif (uri.scheme !== Schemas.http && uri.scheme !== Schemas.https) {\n\t\t\tconst result = await this._fileService.readFile(uri);\n\t\t\treturn result.value.toString();\n\t\t}\n\n\t\tconst requestInit: RequestInit = {};\n\t\tif (this.isExtensionGalleryResource(uri)) {\n\t\t\trequestInit.headers = await this.getExtensionGalleryRequestHeaders();\n\t\t\trequestInit.mode = 'cors'; /* set mode to cors so that above headers are always passed */\n\t\t}\n\n\t\tconst response = await fetch(uri.toString(true), requestInit);\n\t\tif (response.status !== 200) {\n\t\t\tthis._logService.info(`Request to '${uri.toString(true)}' failed with status code ${response.status}`);\n\t\t\tthrow new Error(response.statusText);\n\t\t}\n\t\treturn response.text();\n\t}\n}\n\nregisterSingleton(IExtensionResourceLoaderService, ExtensionResourceLoaderService, InstantiationType.Delayed);\n"]}