{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/extensionResourceLoader/common/extensionResourceLoaderService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAazF,IAAM,IAAI,GAAV,MAAM,IAA+B,SAAQ,6BAAG;QAEtD,YACe,WAAgB,EACb,cAAmB,EACnB,cAAmB,EACf,kBAAuB,EACrB,oBAAyB,EACd,CAAoB;YAEtD,KAAK,CAAC,WAAW,EAAE,cAAc,EAAE,cAAc,EAAE,kBAAkB,EAAE,oBAAoB,CAAC,CAAC;YAF3D,MAAC,GAAD,CAAC,CAAmB;QAGvD,CAAC;QAED,KAAK,CAAC,qBAAqB,CAAC,GAAQ;YACnC,IAAI,IAAI,CAAC,0BAA0B,CAAC,GAAG,CAAC,EAAE;gBACzC,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,CAAC,EAAkC,CAAC;gBAC/D,MAAM,cAAc,GAAG,MAAM,IAAI,CAAC,CAAC,CAAe,OAAO,CAAC,EAAE,GAAG,EAAE,GAAG,CAAC,QAAQ,EAAE,EAAE,OAAO,EAAE,EAAE,gCAAiB,CAAC,IAAI,CAAC,CAAC;gBACpH,OAAO,CAAC,MAAM,IAAA,aAAG,EAAW,cAAc,CAAC,CAAC,IAAI,EAAE,CAAC;aACnD;YACD,MAAM,MAAM,GAAG,MAAM,IAAI,CAAC,CAAC,CAAY,QAAQ,CAAC,GAAG,CAAC,CAAC;YACrD,OAAO,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC;QAChC,CAAC;KAED,CAAA;IAvBY,oBAAI;mBAAJ,IAAI;QAGd,WAAA,WAAG,CAAA;QACH,WAAA,aAAG,CAAA;QACH,WAAA,oBAAG,CAAA;QACH,WAAA,iBAAG,CAAA;QACH,WAAA,mBAAG,CAAA;QACH,WAAA,aAAG,CAAA;OARO,IAAI,CAuBhB;IAED,IAAA,gBAAG,EAAe,6BAAG,EAA8B,IAAI,oCAAsD,CAAC","file":"extensionResourceLoaderService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { InstantiationType, registerSingleton } from 'vs/platform/instantiation/common/extensions';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { asTextOrError, IRequestService } from 'vs/platform/request/common/request';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { AbstractExtensionResourceLoaderService, IExtensionResourceLoaderService } from 'vs/platform/extensionResourceLoader/common/extensionResourceLoader';\n\nexport class ExtensionResourceLoaderService extends AbstractExtensionResourceLoaderService {\n\n\tconstructor(\n\t\t@IFileService fileService: IFileService,\n\t\t@IStorageService storageService: IStorageService,\n\t\t@IProductService productService: IProductService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@IRequestService private readonly _requestService: IRequestService,\n\t) {\n\t\tsuper(fileService, storageService, productService, environmentService, configurationService);\n\t}\n\n\tasync readExtensionResource(uri: URI): Promise<string> {\n\t\tif (this.isExtensionGalleryResource(uri)) {\n\t\t\tconst headers = await this.getExtensionGalleryRequestHeaders();\n\t\t\tconst requestContext = await this._requestService.request({ url: uri.toString(), headers }, CancellationToken.None);\n\t\t\treturn (await asTextOrError(requestContext)) || '';\n\t\t}\n\t\tconst result = await this._fileService.readFile(uri);\n\t\treturn result.value.toString();\n\t}\n\n}\n\nregisterSingleton(IExtensionResourceLoaderService, ExtensionResourceLoaderService, InstantiationType.Delayed);\n"]}