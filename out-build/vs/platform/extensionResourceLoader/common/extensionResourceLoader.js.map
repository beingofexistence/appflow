{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/extensionResourceLoader/common/extensionResourceLoader.ts"],"names":[],"mappings":"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","file":"extensionResourceLoader.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isWeb } from 'vs/base/common/platform';\nimport { format2 } from 'vs/base/common/strings';\nimport { URI } from 'vs/base/common/uri';\nimport { IHeaders } from 'vs/base/parts/request/common/request';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { getServiceMachineId } from 'vs/platform/externalServices/common/serviceMachineId';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { TelemetryLevel } from 'vs/platform/telemetry/common/telemetry';\nimport { getTelemetryLevel, supportsTelemetry } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { RemoteAuthorities } from 'vs/base/common/network';\nimport { getRemoteServerRootPath } from 'vs/platform/remote/common/remoteHosts';\nimport { TargetPlatform } from 'vs/platform/extensions/common/extensions';\n\nconst WEB_EXTENSION_RESOURCE_END_POINT = 'web-extension-resource';\n\nexport const IExtensionResourceLoaderService = createDecorator<IExtensionResourceLoaderService>('extensionResourceLoaderService');\n\n/**\n * A service useful for reading resources from within extensions.\n */\nexport interface IExtensionResourceLoaderService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Read a certain resource within an extension.\n\t */\n\treadExtensionResource(uri: URI): Promise<string>;\n\n\t/**\n\t * Returns whether the gallery provides extension resources.\n\t */\n\treadonly supportsExtensionGalleryResources: boolean;\n\n\t/**\n\t * Return true if the given URI is a extension gallery resource.\n\t */\n\tisExtensionGalleryResource(uri: URI): boolean;\n\n\t/**\n\t * Computes the URL of a extension gallery resource. Returns `undefined` if gallery does not provide extension resources.\n\t */\n\tgetExtensionGalleryResourceURL(galleryExtension: { publisher: string; name: string; version: string; targetPlatform?: TargetPlatform }, path?: string): URI | undefined;\n}\n\nexport function migratePlatformSpecificExtensionGalleryResourceURL(resource: URI, targetPlatform: TargetPlatform): URI | undefined {\n\tif (resource.query !== `target=${targetPlatform}`) {\n\t\treturn undefined;\n\t}\n\tconst paths = resource.path.split('/');\n\tif (!paths[3]) {\n\t\treturn undefined;\n\t}\n\tpaths[3] = `${paths[3]}+${targetPlatform}`;\n\treturn resource.with({ query: null, path: paths.join('/') });\n}\n\nexport abstract class AbstractExtensionResourceLoaderService implements IExtensionResourceLoaderService {\n\n\treadonly _serviceBrand: undefined;\n\n\tprivate readonly _webExtensionResourceEndPoint: string;\n\tprivate readonly _extensionGalleryResourceUrlTemplate: string | undefined;\n\tprivate readonly _extensionGalleryAuthority: string | undefined;\n\n\tconstructor(\n\t\tprotected readonly _fileService: IFileService,\n\t\tprivate readonly _storageService: IStorageService,\n\t\tprivate readonly _productService: IProductService,\n\t\tprivate readonly _environmentService: IEnvironmentService,\n\t\tprivate readonly _configurationService: IConfigurationService,\n\t) {\n\t\tthis._webExtensionResourceEndPoint = `${getRemoteServerRootPath(_productService)}/${WEB_EXTENSION_RESOURCE_END_POINT}/`;\n\t\tif (_productService.extensionsGallery) {\n\t\t\tthis._extensionGalleryResourceUrlTemplate = _productService.extensionsGallery.resourceUrlTemplate;\n\t\t\tthis._extensionGalleryAuthority = this._extensionGalleryResourceUrlTemplate ? this._getExtensionGalleryAuthority(URI.parse(this._extensionGalleryResourceUrlTemplate)) : undefined;\n\t\t}\n\t}\n\n\tpublic get supportsExtensionGalleryResources(): boolean {\n\t\treturn this._extensionGalleryResourceUrlTemplate !== undefined;\n\t}\n\n\tpublic getExtensionGalleryResourceURL({ publisher, name, version, targetPlatform }: { publisher: string; name: string; version: string; targetPlatform?: TargetPlatform }, path?: string): URI | undefined {\n\t\tif (this._extensionGalleryResourceUrlTemplate) {\n\t\t\tconst uri = URI.parse(format2(this._extensionGalleryResourceUrlTemplate, {\n\t\t\t\tpublisher,\n\t\t\t\tname,\n\t\t\t\tversion: targetPlatform !== undefined\n\t\t\t\t\t&& targetPlatform !== TargetPlatform.UNDEFINED\n\t\t\t\t\t&& targetPlatform !== TargetPlatform.UNKNOWN\n\t\t\t\t\t&& targetPlatform !== TargetPlatform.UNIVERSAL\n\t\t\t\t\t? `${version}+${targetPlatform}`\n\t\t\t\t\t: version,\n\t\t\t\tpath: 'extension'\n\t\t\t}));\n\t\t\treturn this._isWebExtensionResourceEndPoint(uri) ? uri.with({ scheme: RemoteAuthorities.getPreferredWebSchema() }) : uri;\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tpublic abstract readExtensionResource(uri: URI): Promise<string>;\n\n\tisExtensionGalleryResource(uri: URI): boolean {\n\t\treturn !!this._extensionGalleryAuthority && this._extensionGalleryAuthority === this._getExtensionGalleryAuthority(uri);\n\t}\n\n\tprotected async getExtensionGalleryRequestHeaders(): Promise<IHeaders> {\n\t\tconst headers: IHeaders = {\n\t\t\t'X-Client-Name': `${this._productService.applicationName}${isWeb ? '-web' : ''}`,\n\t\t\t'X-Client-Version': this._productService.version\n\t\t};\n\t\tif (supportsTelemetry(this._productService, this._environmentService) && getTelemetryLevel(this._configurationService) === TelemetryLevel.USAGE) {\n\t\t\theaders['X-Machine-Id'] = await this._getServiceMachineId();\n\t\t}\n\t\tif (this._productService.commit) {\n\t\t\theaders['X-Client-Commit'] = this._productService.commit;\n\t\t}\n\t\treturn headers;\n\t}\n\n\tprivate _serviceMachineIdPromise: Promise<string> | undefined;\n\tprivate _getServiceMachineId(): Promise<string> {\n\t\tif (!this._serviceMachineIdPromise) {\n\t\t\tthis._serviceMachineIdPromise = getServiceMachineId(this._environmentService, this._fileService, this._storageService);\n\t\t}\n\t\treturn this._serviceMachineIdPromise;\n\t}\n\n\tprivate _getExtensionGalleryAuthority(uri: URI): string | undefined {\n\t\tif (this._isWebExtensionResourceEndPoint(uri)) {\n\t\t\treturn uri.authority;\n\t\t}\n\t\tconst index = uri.authority.indexOf('.');\n\t\treturn index !== -1 ? uri.authority.substring(index + 1) : undefined;\n\t}\n\n\tprotected _isWebExtensionResourceEndPoint(uri: URI): boolean {\n\t\treturn uri.path.startsWith(this._webExtensionResourceEndPoint);\n\t}\n\n}\n"]}