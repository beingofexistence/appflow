{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/sharedProcess/electron-main/sharedProcess.ts"],"names":[],"mappings":"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","file":"sharedProcess.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IpcMainEvent, MessagePortMain } from 'electron';\nimport { validatedIpcMain } from 'vs/base/parts/ipc/electron-main/ipcMain';\nimport { Barrier, DeferredPromise } from 'vs/base/common/async';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IEnvironmentMainService } from 'vs/platform/environment/electron-main/environmentMainService';\nimport { ILifecycleMainService } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ISharedProcessConfiguration } from 'vs/platform/sharedProcess/node/sharedProcess';\nimport { IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { IPolicyService } from 'vs/platform/policy/common/policy';\nimport { ILoggerMainService } from 'vs/platform/log/electron-main/loggerService';\nimport { UtilityProcess } from 'vs/platform/utilityProcess/electron-main/utilityProcess';\nimport { NullTelemetryService } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { parseSharedProcessDebugPort } from 'vs/platform/environment/node/environmentService';\nimport { assertIsDefined } from 'vs/base/common/types';\nimport { SharedProcessChannelConnection, SharedProcessRawConnection, SharedProcessLifecycle } from 'vs/platform/sharedProcess/common/sharedProcess';\nimport { IProductService } from 'vs/platform/product/common/productService';\n\nexport class SharedProcess extends Disposable {\n\n\tprivate readonly firstWindowConnectionBarrier = new Barrier();\n\n\tprivate utilityProcess: UtilityProcess | undefined = undefined;\n\n\tconstructor(\n\t\tprivate readonly machineId: string,\n\t\t@IEnvironmentMainService private readonly environmentMainService: IEnvironmentMainService,\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ILoggerMainService private readonly loggerMainService: ILoggerMainService,\n\t\t@IPolicyService private readonly policyService: IPolicyService,\n\t\t@IProductService private readonly productService: IProductService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Shared process channel connections from workbench windows\n\t\tvalidatedIpcMain.on(SharedProcessChannelConnection.request, (e, nonce: string) => this.onWindowConnection(e, nonce, SharedProcessChannelConnection.response));\n\n\t\t// Shared process raw connections from workbench windows\n\t\tvalidatedIpcMain.on(SharedProcessRawConnection.request, (e, nonce: string) => this.onWindowConnection(e, nonce, SharedProcessRawConnection.response));\n\n\t\t// Lifecycle\n\t\tthis._register(this.lifecycleMainService.onWillShutdown(() => this.onWillShutdown()));\n\t}\n\n\tprivate async onWindowConnection(e: IpcMainEvent, nonce: string, responseChannel: string): Promise<void> {\n\t\tthis.logService.trace(`[SharedProcess] onWindowConnection for: ${responseChannel}`);\n\n\t\t// release barrier if this is the first window connection\n\t\tif (!this.firstWindowConnectionBarrier.isOpen()) {\n\t\t\tthis.firstWindowConnectionBarrier.open();\n\t\t}\n\n\t\t// await the shared process to be overall ready\n\t\t// we do not just wait for IPC ready because the\n\t\t// workbench window will communicate directly\n\n\t\tawait this.whenReady();\n\n\t\t// connect to the shared process passing the responseChannel\n\t\t// as payload to give a hint what the connection is about\n\n\t\tconst port = await this.connect(responseChannel);\n\n\t\t// Check back if the requesting window meanwhile closed\n\t\t// Since shared process is delayed on startup there is\n\t\t// a chance that the window close before the shared process\n\t\t// was ready for a connection.\n\n\t\tif (e.sender.isDestroyed()) {\n\t\t\treturn port.close();\n\t\t}\n\n\t\t// send the port back to the requesting window\n\t\te.sender.postMessage(responseChannel, nonce, [port]);\n\t}\n\n\tprivate onWillShutdown(): void {\n\t\tthis.logService.trace('[SharedProcess] onWillShutdown');\n\n\t\tthis.utilityProcess?.postMessage(SharedProcessLifecycle.exit);\n\t\tthis.utilityProcess = undefined;\n\t}\n\n\tprivate _whenReady: Promise<void> | undefined = undefined;\n\twhenReady(): Promise<void> {\n\t\tif (!this._whenReady) {\n\t\t\tthis._whenReady = (async () => {\n\n\t\t\t\t// Wait for shared process being ready to accept connection\n\t\t\t\tawait this.whenIpcReady;\n\n\t\t\t\t// Overall signal that the shared process was loaded and\n\t\t\t\t// all services within have been created.\n\n\t\t\t\tconst whenReady = new DeferredPromise<void>();\n\t\t\t\tif (this.utilityProcess) {\n\t\t\t\t\tthis.utilityProcess.once(SharedProcessLifecycle.initDone, () => whenReady.complete());\n\t\t\t\t} else {\n\t\t\t\t\tvalidatedIpcMain.once(SharedProcessLifecycle.initDone, () => whenReady.complete());\n\t\t\t\t}\n\n\t\t\t\tawait whenReady.p;\n\t\t\t\tthis.logService.trace('[SharedProcess] Overall ready');\n\t\t\t})();\n\t\t}\n\n\t\treturn this._whenReady;\n\t}\n\n\tprivate _whenIpcReady: Promise<void> | undefined = undefined;\n\tprivate get whenIpcReady() {\n\t\tif (!this._whenIpcReady) {\n\t\t\tthis._whenIpcReady = (async () => {\n\n\t\t\t\t// Always wait for first window asking for connection\n\t\t\t\tawait this.firstWindowConnectionBarrier.wait();\n\n\t\t\t\t// Spawn shared process\n\t\t\t\tthis.createUtilityProcess();\n\n\t\t\t\t// Wait for shared process indicating that IPC connections are accepted\n\t\t\t\tconst sharedProcessIpcReady = new DeferredPromise<void>();\n\t\t\t\tif (this.utilityProcess) {\n\t\t\t\t\tthis.utilityProcess.once(SharedProcessLifecycle.ipcReady, () => sharedProcessIpcReady.complete());\n\t\t\t\t} else {\n\t\t\t\t\tvalidatedIpcMain.once(SharedProcessLifecycle.ipcReady, () => sharedProcessIpcReady.complete());\n\t\t\t\t}\n\n\t\t\t\tawait sharedProcessIpcReady.p;\n\t\t\t\tthis.logService.trace('[SharedProcess] IPC ready');\n\t\t\t})();\n\t\t}\n\n\t\treturn this._whenIpcReady;\n\t}\n\n\tprivate createUtilityProcess(): void {\n\t\tthis.utilityProcess = this._register(new UtilityProcess(this.logService, NullTelemetryService, this.lifecycleMainService));\n\n\t\tconst inspectParams = parseSharedProcessDebugPort(this.environmentMainService.args, this.environmentMainService.isBuilt);\n\t\tlet execArgv: string[] | undefined = undefined;\n\t\tif (inspectParams.port) {\n\t\t\texecArgv = ['--nolazy'];\n\t\t\tif (inspectParams.break) {\n\t\t\t\texecArgv.push(`--inspect-brk=${inspectParams.port}`);\n\t\t\t} else {\n\t\t\t\texecArgv.push(`--inspect=${inspectParams.port}`);\n\t\t\t}\n\t\t}\n\n\t\tthis.utilityProcess.start({\n\t\t\ttype: 'shared-process',\n\t\t\tentryPoint: 'vs/code/node/sharedProcess/sharedProcessMain',\n\t\t\tpayload: this.createSharedProcessConfiguration(),\n\t\t\texecArgv,\n\t\t\tallowLoadingUnsignedLibraries: !!process.env.VSCODE_VOICE_MODULE_PATH && this.productService.quality !== 'stable' // TODO@bpasero package\n\t\t});\n\t}\n\n\tprivate createSharedProcessConfiguration(): ISharedProcessConfiguration {\n\t\treturn {\n\t\t\tmachineId: this.machineId,\n\t\t\tcodeCachePath: this.environmentMainService.codeCachePath,\n\t\t\tprofiles: {\n\t\t\t\thome: this.userDataProfilesService.profilesHome,\n\t\t\t\tall: this.userDataProfilesService.profiles,\n\t\t\t},\n\t\t\targs: this.environmentMainService.args,\n\t\t\tlogLevel: this.loggerMainService.getLogLevel(),\n\t\t\tloggers: this.loggerMainService.getRegisteredLoggers(),\n\t\t\tpoliciesData: this.policyService.serialize()\n\t\t};\n\t}\n\n\tasync connect(payload?: unknown): Promise<MessagePortMain> {\n\n\t\t// Wait for shared process being ready to accept connection\n\t\tawait this.whenIpcReady;\n\n\t\t// Connect and return message port\n\t\tconst utilityProcess = assertIsDefined(this.utilityProcess);\n\t\treturn utilityProcess.connect(payload);\n\t}\n}\n"]}