{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/files/node/diskFileSystemProviderServer.ts"],"names":[],"mappings":"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","file":"diskFileSystemProviderServer.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { DiskFileSystemProvider } from 'vs/platform/files/node/diskFileSystemProvider';\nimport { Disposable, dispose, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IURITransformer } from 'vs/base/common/uriIpc';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { ReadableStreamEventPayload, listenStream } from 'vs/base/common/stream';\nimport { IStat, IFileReadStreamOptions, IFileWriteOptions, IFileOpenOptions, IFileDeleteOptions, IFileOverwriteOptions, IFileChange, IWatchOptions, FileType, IFileAtomicReadOptions } from 'vs/platform/files/common/files';\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { IRecursiveWatcherOptions } from 'vs/platform/files/common/watcher';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\n\nexport interface ISessionFileWatcher extends IDisposable {\n\twatch(req: number, resource: URI, opts: IWatchOptions): IDisposable;\n}\n\n/**\n * A server implementation for a IPC based file system provider client.\n */\nexport abstract class AbstractDiskFileSystemProviderChannel<T> extends Disposable implements IServerChannel<T> {\n\n\tconstructor(\n\t\tprotected readonly provider: DiskFileSystemProvider,\n\t\tprotected readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t}\n\n\tcall(ctx: T, command: string, arg?: any): Promise<any> {\n\t\tconst uriTransformer = this.getUriTransformer(ctx);\n\n\t\tswitch (command) {\n\t\t\tcase 'stat': return this.stat(uriTransformer, arg[0]);\n\t\t\tcase 'readdir': return this.readdir(uriTransformer, arg[0]);\n\t\t\tcase 'open': return this.open(uriTransformer, arg[0], arg[1]);\n\t\t\tcase 'close': return this.close(arg[0]);\n\t\t\tcase 'read': return this.read(arg[0], arg[1], arg[2]);\n\t\t\tcase 'readFile': return this.readFile(uriTransformer, arg[0], arg[1]);\n\t\t\tcase 'write': return this.write(arg[0], arg[1], arg[2], arg[3], arg[4]);\n\t\t\tcase 'writeFile': return this.writeFile(uriTransformer, arg[0], arg[1], arg[2]);\n\t\t\tcase 'rename': return this.rename(uriTransformer, arg[0], arg[1], arg[2]);\n\t\t\tcase 'copy': return this.copy(uriTransformer, arg[0], arg[1], arg[2]);\n\t\t\tcase 'cloneFile': return this.cloneFile(uriTransformer, arg[0], arg[1]);\n\t\t\tcase 'mkdir': return this.mkdir(uriTransformer, arg[0]);\n\t\t\tcase 'delete': return this.delete(uriTransformer, arg[0], arg[1]);\n\t\t\tcase 'watch': return this.watch(uriTransformer, arg[0], arg[1], arg[2], arg[3]);\n\t\t\tcase 'unwatch': return this.unwatch(arg[0], arg[1]);\n\t\t}\n\n\t\tthrow new Error(`IPC Command ${command} not found`);\n\t}\n\n\tlisten(ctx: T, event: string, arg: any): Event<any> {\n\t\tconst uriTransformer = this.getUriTransformer(ctx);\n\n\t\tswitch (event) {\n\t\t\tcase 'fileChange': return this.onFileChange(uriTransformer, arg[0]);\n\t\t\tcase 'readFileStream': return this.onReadFileStream(uriTransformer, arg[0], arg[1]);\n\t\t}\n\n\t\tthrow new Error(`Unknown event ${event}`);\n\t}\n\n\tprotected abstract getUriTransformer(ctx: T): IURITransformer;\n\n\tprotected abstract transformIncoming(uriTransformer: IURITransformer, _resource: UriComponents, supportVSCodeResource?: boolean): URI;\n\n\t//#region File Metadata Resolving\n\n\tprivate stat(uriTransformer: IURITransformer, _resource: UriComponents): Promise<IStat> {\n\t\tconst resource = this.transformIncoming(uriTransformer, _resource, true);\n\n\t\treturn this.provider.stat(resource);\n\t}\n\n\tprivate readdir(uriTransformer: IURITransformer, _resource: UriComponents): Promise<[string, FileType][]> {\n\t\tconst resource = this.transformIncoming(uriTransformer, _resource);\n\n\t\treturn this.provider.readdir(resource);\n\t}\n\n\t//#endregion\n\n\t//#region File Reading/Writing\n\n\tprivate async readFile(uriTransformer: IURITransformer, _resource: UriComponents, opts?: IFileAtomicReadOptions): Promise<VSBuffer> {\n\t\tconst resource = this.transformIncoming(uriTransformer, _resource, true);\n\t\tconst buffer = await this.provider.readFile(resource, opts);\n\n\t\treturn VSBuffer.wrap(buffer);\n\t}\n\n\tprivate onReadFileStream(uriTransformer: IURITransformer, _resource: URI, opts: IFileReadStreamOptions): Event<ReadableStreamEventPayload<VSBuffer>> {\n\t\tconst resource = this.transformIncoming(uriTransformer, _resource, true);\n\t\tconst cts = new CancellationTokenSource();\n\n\t\tconst emitter = new Emitter<ReadableStreamEventPayload<VSBuffer>>({\n\t\t\tonDidRemoveLastListener: () => {\n\n\t\t\t\t// Ensure to cancel the read operation when there is no more\n\t\t\t\t// listener on the other side to prevent unneeded work.\n\t\t\t\tcts.cancel();\n\t\t\t}\n\t\t});\n\n\t\tconst fileStream = this.provider.readFileStream(resource, opts, cts.token);\n\t\tlistenStream(fileStream, {\n\t\t\tonData: chunk => emitter.fire(VSBuffer.wrap(chunk)),\n\t\t\tonError: error => emitter.fire(error),\n\t\t\tonEnd: () => {\n\n\t\t\t\t// Forward event\n\t\t\t\temitter.fire('end');\n\n\t\t\t\t// Cleanup\n\t\t\t\temitter.dispose();\n\t\t\t\tcts.dispose();\n\t\t\t}\n\t\t});\n\n\t\treturn emitter.event;\n\t}\n\n\tprivate writeFile(uriTransformer: IURITransformer, _resource: UriComponents, content: VSBuffer, opts: IFileWriteOptions): Promise<void> {\n\t\tconst resource = this.transformIncoming(uriTransformer, _resource);\n\n\t\treturn this.provider.writeFile(resource, content.buffer, opts);\n\t}\n\n\tprivate open(uriTransformer: IURITransformer, _resource: UriComponents, opts: IFileOpenOptions): Promise<number> {\n\t\tconst resource = this.transformIncoming(uriTransformer, _resource, true);\n\n\t\treturn this.provider.open(resource, opts);\n\t}\n\n\tprivate close(fd: number): Promise<void> {\n\t\treturn this.provider.close(fd);\n\t}\n\n\tprivate async read(fd: number, pos: number, length: number): Promise<[VSBuffer, number]> {\n\t\tconst buffer = VSBuffer.alloc(length);\n\t\tconst bufferOffset = 0; // offset is 0 because we create a buffer to read into for each call\n\t\tconst bytesRead = await this.provider.read(fd, pos, buffer.buffer, bufferOffset, length);\n\n\t\treturn [buffer, bytesRead];\n\t}\n\n\tprivate write(fd: number, pos: number, data: VSBuffer, offset: number, length: number): Promise<number> {\n\t\treturn this.provider.write(fd, pos, data.buffer, offset, length);\n\t}\n\n\t//#endregion\n\n\t//#region Move/Copy/Delete/Create Folder\n\n\tprivate mkdir(uriTransformer: IURITransformer, _resource: UriComponents): Promise<void> {\n\t\tconst resource = this.transformIncoming(uriTransformer, _resource);\n\n\t\treturn this.provider.mkdir(resource);\n\t}\n\n\tprotected delete(uriTransformer: IURITransformer, _resource: UriComponents, opts: IFileDeleteOptions): Promise<void> {\n\t\tconst resource = this.transformIncoming(uriTransformer, _resource);\n\n\t\treturn this.provider.delete(resource, opts);\n\t}\n\n\tprivate rename(uriTransformer: IURITransformer, _source: UriComponents, _target: UriComponents, opts: IFileOverwriteOptions): Promise<void> {\n\t\tconst source = this.transformIncoming(uriTransformer, _source);\n\t\tconst target = this.transformIncoming(uriTransformer, _target);\n\n\t\treturn this.provider.rename(source, target, opts);\n\t}\n\n\tprivate copy(uriTransformer: IURITransformer, _source: UriComponents, _target: UriComponents, opts: IFileOverwriteOptions): Promise<void> {\n\t\tconst source = this.transformIncoming(uriTransformer, _source);\n\t\tconst target = this.transformIncoming(uriTransformer, _target);\n\n\t\treturn this.provider.copy(source, target, opts);\n\t}\n\n\t//#endregion\n\n\t//#region Clone File\n\n\tprivate cloneFile(uriTransformer: IURITransformer, _source: UriComponents, _target: UriComponents): Promise<void> {\n\t\tconst source = this.transformIncoming(uriTransformer, _source);\n\t\tconst target = this.transformIncoming(uriTransformer, _target);\n\n\t\treturn this.provider.cloneFile(source, target);\n\t}\n\n\t//#endregion\n\n\t//#region File Watching\n\n\tprivate readonly sessionToWatcher = new Map<string /* session ID */, ISessionFileWatcher>();\n\tprivate readonly watchRequests = new Map<string /* session ID + request ID */, IDisposable>();\n\n\tprivate onFileChange(uriTransformer: IURITransformer, sessionId: string): Event<IFileChange[] | string> {\n\n\t\t// We want a specific emitter for the given session so that events\n\t\t// from the one session do not end up on the other session. As such\n\t\t// we create a `SessionFileWatcher` and a `Emitter` for that session.\n\n\t\tconst emitter = new Emitter<IFileChange[] | string>({\n\t\t\tonWillAddFirstListener: () => {\n\t\t\t\tthis.sessionToWatcher.set(sessionId, this.createSessionFileWatcher(uriTransformer, emitter));\n\t\t\t},\n\t\t\tonDidRemoveLastListener: () => {\n\t\t\t\tdispose(this.sessionToWatcher.get(sessionId));\n\t\t\t\tthis.sessionToWatcher.delete(sessionId);\n\t\t\t}\n\t\t});\n\n\t\treturn emitter.event;\n\t}\n\n\tprivate async watch(uriTransformer: IURITransformer, sessionId: string, req: number, _resource: UriComponents, opts: IWatchOptions): Promise<void> {\n\t\tconst watcher = this.sessionToWatcher.get(sessionId);\n\t\tif (watcher) {\n\t\t\tconst resource = this.transformIncoming(uriTransformer, _resource);\n\t\t\tconst disposable = watcher.watch(req, resource, opts);\n\t\t\tthis.watchRequests.set(sessionId + req, disposable);\n\t\t}\n\t}\n\n\tprivate async unwatch(sessionId: string, req: number): Promise<void> {\n\t\tconst id = sessionId + req;\n\t\tconst disposable = this.watchRequests.get(id);\n\t\tif (disposable) {\n\t\t\tdispose(disposable);\n\t\t\tthis.watchRequests.delete(id);\n\t\t}\n\t}\n\n\tprotected abstract createSessionFileWatcher(uriTransformer: IURITransformer, emitter: Emitter<IFileChange[] | string>): ISessionFileWatcher;\n\n\t//#endregion\n\n\toverride dispose(): void {\n\t\tsuper.dispose();\n\n\t\tfor (const [, disposable] of this.watchRequests) {\n\t\t\tdisposable.dispose();\n\t\t}\n\t\tthis.watchRequests.clear();\n\n\t\tfor (const [, disposable] of this.sessionToWatcher) {\n\t\t\tdisposable.dispose();\n\t\t}\n\t\tthis.sessionToWatcher.clear();\n\t}\n}\n\nexport abstract class AbstractSessionFileWatcher extends Disposable implements ISessionFileWatcher {\n\n\tprivate readonly watcherRequests = new Map<number, IDisposable>();\n\n\t// To ensure we use one file watcher per session, we keep a\n\t// disk file system provider instantiated for this session.\n\t// The provider is cheap and only stateful when file watching\n\t// starts.\n\t//\n\t// This is important because we want to ensure that we only\n\t// forward events from the watched paths for this session and\n\t// not other clients that asked to watch other paths.\n\tprivate readonly fileWatcher = this._register(new DiskFileSystemProvider(this.logService, { watcher: { recursive: this.getRecursiveWatcherOptions(this.environmentService) } }));\n\n\tconstructor(\n\t\tprivate readonly uriTransformer: IURITransformer,\n\t\tsessionEmitter: Emitter<IFileChange[] | string>,\n\t\tprivate readonly logService: ILogService,\n\t\tprivate readonly environmentService: IEnvironmentService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners(sessionEmitter);\n\t}\n\n\tprivate registerListeners(sessionEmitter: Emitter<IFileChange[] | string>): void {\n\t\tconst localChangeEmitter = this._register(new Emitter<readonly IFileChange[]>());\n\n\t\tthis._register(localChangeEmitter.event((events) => {\n\t\t\tsessionEmitter.fire(\n\t\t\t\tevents.map(e => ({\n\t\t\t\t\tresource: this.uriTransformer.transformOutgoingURI(e.resource),\n\t\t\t\t\ttype: e.type\n\t\t\t\t}))\n\t\t\t);\n\t\t}));\n\n\t\tthis._register(this.fileWatcher.onDidChangeFile(events => localChangeEmitter.fire(events)));\n\t\tthis._register(this.fileWatcher.onDidWatchError(error => sessionEmitter.fire(error)));\n\t}\n\n\tprotected getRecursiveWatcherOptions(environmentService: IEnvironmentService): IRecursiveWatcherOptions | undefined {\n\t\treturn undefined; // subclasses can override\n\t}\n\n\tprotected getExtraExcludes(environmentService: IEnvironmentService): string[] | undefined {\n\t\treturn undefined; // subclasses can override\n\t}\n\n\twatch(req: number, resource: URI, opts: IWatchOptions): IDisposable {\n\t\tconst extraExcludes = this.getExtraExcludes(this.environmentService);\n\t\tif (Array.isArray(extraExcludes)) {\n\t\t\topts.excludes = [...opts.excludes, ...extraExcludes];\n\t\t}\n\n\t\tthis.watcherRequests.set(req, this.fileWatcher.watch(resource, opts));\n\n\t\treturn toDisposable(() => {\n\t\t\tdispose(this.watcherRequests.get(req));\n\t\t\tthis.watcherRequests.delete(req);\n\t\t});\n\t}\n\n\toverride dispose(): void {\n\t\tfor (const [, disposable] of this.watcherRequests) {\n\t\t\tdisposable.dispose();\n\t\t}\n\t\tthis.watcherRequests.clear();\n\n\t\tsuper.dispose();\n\t}\n}\n"]}