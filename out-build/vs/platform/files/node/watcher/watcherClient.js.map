{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/files/node/watcher/watcherClient.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG,MAAa,GAAuB,SAAQ,aAAG;QAE9C,YACC,aAAmD,EACnD,YAAwC,EACxC,cAAuB;YAEvB,KAAK,CAAC,aAAa,EAAE,YAAY,EAAE,cAAc,CAAC,CAAC;YAEnD,IAAI,CAAC,CAAC,EAAK,CAAC;QACb,CAAC;QAEkB,CAAC,CAAa,WAAgB;YAEhD,4DAA4D;YAC5D,6DAA6D;YAC7D,MAAM,MAAM,GAAG,WAAW,CAAC,GAAG,CAAC,IAAI,YAAG,CACrC,aAAG,CAAQ,SAAS,CAAC,gBAAgB,CAAC,CAAC,MAAM,EAC7C;gBACC,UAAU,EAAE,cAAc;gBAC1B,IAAI,EAAE,CAAC,oBAAoB,CAAC;gBAC5B,GAAG,EAAE;oBACJ,qBAAqB,EAAE,4CAA4C;oBACnE,mBAAmB,EAAE,MAAM;oBAC3B,sBAAsB,EAAE,MAAM,CAAC,8CAA8C;iBAC7E;aACD,CACD,CAAC,CAAC;YAEH,yDAAyD;YACzD,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAO,kCAAkC,IAAI,aAAa,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;YAE1I,OAAO,kBAAY,CAAC,SAAS,CAAoB,IAAA,SAAG,EAAgB,MAAM,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;QACpG,CAAC;KACD;IAlCD,kBAkCC","file":"watcherClient.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { FileAccess } from 'vs/base/common/network';\nimport { getNextTickChannel, ProxyChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { Client } from 'vs/base/parts/ipc/node/ipc.cp';\nimport { AbstractUniversalWatcherClient, IDiskFileChange, ILogMessage, IUniversalWatcher } from 'vs/platform/files/common/watcher';\n\nexport class UniversalWatcherClient extends AbstractUniversalWatcherClient {\n\n\tconstructor(\n\t\tonFileChanges: (changes: IDiskFileChange[]) => void,\n\t\tonLogMessage: (msg: ILogMessage) => void,\n\t\tverboseLogging: boolean\n\t) {\n\t\tsuper(onFileChanges, onLogMessage, verboseLogging);\n\n\t\tthis.init();\n\t}\n\n\tprotected override createWatcher(disposables: DisposableStore): IUniversalWatcher {\n\n\t\t// Fork the universal file watcher and build a client around\n\t\t// its server for passing over requests and receiving events.\n\t\tconst client = disposables.add(new Client(\n\t\t\tFileAccess.asFileUri('bootstrap-fork').fsPath,\n\t\t\t{\n\t\t\t\tserverName: 'File Watcher',\n\t\t\t\targs: ['--type=fileWatcher'],\n\t\t\t\tenv: {\n\t\t\t\t\tVSCODE_AMD_ENTRYPOINT: 'vs/platform/files/node/watcher/watcherMain',\n\t\t\t\t\tVSCODE_PIPE_LOGGING: 'true',\n\t\t\t\t\tVSCODE_VERBOSE_LOGGING: 'true' // transmit console logs from server to client\n\t\t\t\t}\n\t\t\t}\n\t\t));\n\n\t\t// React on unexpected termination of the watcher process\n\t\tdisposables.add(client.onDidProcessExit(({ code, signal }) => this.onError(`terminated by itself with code ${code}, signal: ${signal}`)));\n\n\t\treturn ProxyChannel.toService<IUniversalWatcher>(getNextTickChannel(client.getChannel('watcher')));\n\t}\n}\n"]}