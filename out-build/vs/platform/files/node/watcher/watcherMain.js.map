{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/files/node/watcher/watcherMain.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAShG,IAAI,MAAyD,CAAC;IAC9D,IAAI,IAAA,mBAAG,EAAc,OAAO,CAAC,EAAE;QAC9B,MAAM,GAAG,IAAI,YAAoB,EAAE,CAAC;KACpC;SAAM;QACN,MAAM,GAAG,IAAI,YAAkB,CAAC,SAAS,CAAC,CAAC;KAC3C;IAED,MAAM,OAAO,GAAG,IAAI,cAAI,EAAc,CAAC;IACvC,MAAM,CAAC,eAAe,CAAC,SAAS,EAAE,kBAAY,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,eAAG,EAAc,CAAC,CAAC,CAAC","file":"watcherMain.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ProxyChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { Server as ChildProcessServer } from 'vs/base/parts/ipc/node/ipc.cp';\nimport { Server as UtilityProcessServer } from 'vs/base/parts/ipc/node/ipc.mp';\nimport { isUtilityProcess } from 'vs/base/parts/sandbox/node/electronTypes';\nimport { UniversalWatcher } from 'vs/platform/files/node/watcher/watcher';\n\nlet server: ChildProcessServer<string> | UtilityProcessServer;\nif (isUtilityProcess(process)) {\n\tserver = new UtilityProcessServer();\n} else {\n\tserver = new ChildProcessServer('watcher');\n}\n\nconst service = new UniversalWatcher();\nserver.registerChannel('watcher', ProxyChannel.fromService(service, new DisposableStore()));\n"]}