{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/files/node/watcher/parcel/parcelWatcher.ts"],"names":[],"mappings":"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","file":"parcelWatcher.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as parcelWatcher from '@parcel/watcher';\nimport { existsSync, statSync, unlinkSync } from 'fs';\nimport { tmpdir } from 'os';\nimport { DeferredPromise, RunOnceScheduler, RunOnceWorker, ThrottledWorker } from 'vs/base/common/async';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { Emitter } from 'vs/base/common/event';\nimport { randomPath } from 'vs/base/common/extpath';\nimport { GLOBSTAR, ParsedPattern, patternsEquals } from 'vs/base/common/glob';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { TernarySearchTree } from 'vs/base/common/ternarySearchTree';\nimport { normalizeNFC } from 'vs/base/common/normalization';\nimport { dirname, normalize } from 'vs/base/common/path';\nimport { isLinux, isMacintosh, isWindows } from 'vs/base/common/platform';\nimport { realcaseSync, realpathSync } from 'vs/base/node/extpath';\nimport { NodeJSFileWatcherLibrary } from 'vs/platform/files/node/watcher/nodejs/nodejsWatcherLib';\nimport { FileChangeType } from 'vs/platform/files/common/files';\nimport { IDiskFileChange, ILogMessage, coalesceEvents, IRecursiveWatchRequest, IRecursiveWatcher, parseWatcherPatterns } from 'vs/platform/files/common/watcher';\n\nexport interface IParcelWatcherInstance {\n\n\t/**\n\t * Signals when the watcher is ready to watch.\n\t */\n\treadonly ready: Promise<unknown>;\n\n\t/**\n\t * The watch request associated to the watcher.\n\t */\n\treadonly request: IRecursiveWatchRequest;\n\n\t/**\n\t * How often this watcher has been restarted in case of an unexpected\n\t * shutdown.\n\t */\n\treadonly restarts: number;\n\n\t/**\n\t * The cancellation token associated with the lifecycle of the watcher.\n\t */\n\treadonly token: CancellationToken;\n\n\t/**\n\t * An event aggregator to coalesce events and reduce duplicates.\n\t */\n\treadonly worker: RunOnceWorker<IDiskFileChange>;\n\n\t/**\n\t * Stops and disposes the watcher. This operation is async to await\n\t * unsubscribe call in Parcel.\n\t */\n\tstop(): Promise<void>;\n}\n\nexport class ParcelWatcher extends Disposable implements IRecursiveWatcher {\n\n\tprivate static readonly MAP_PARCEL_WATCHER_ACTION_TO_FILE_CHANGE = new Map<parcelWatcher.EventType, number>(\n\t\t[\n\t\t\t['create', FileChangeType.ADDED],\n\t\t\t['update', FileChangeType.UPDATED],\n\t\t\t['delete', FileChangeType.DELETED]\n\t\t]\n\t);\n\n\tprivate static readonly PARCEL_WATCHER_BACKEND = isWindows ? 'windows' : isLinux ? 'inotify' : 'fs-events';\n\n\tprivate readonly _onDidChangeFile = this._register(new Emitter<IDiskFileChange[]>());\n\treadonly onDidChangeFile = this._onDidChangeFile.event;\n\n\tprivate readonly _onDidLogMessage = this._register(new Emitter<ILogMessage>());\n\treadonly onDidLogMessage = this._onDidLogMessage.event;\n\n\tprivate readonly _onDidError = this._register(new Emitter<string>());\n\treadonly onDidError = this._onDidError.event;\n\n\tprotected readonly watchers = new Map<string, IParcelWatcherInstance>();\n\n\t// A delay for collecting file changes from Parcel\n\t// before collecting them for coalescing and emitting.\n\t// Parcel internally uses 50ms as delay, so we use 75ms,\n\t// to schedule sufficiently after Parcel.\n\t//\n\t// Note: since Parcel 2.0.7, the very first event is\n\t// emitted without delay if no events occured over a\n\t// duration of 500ms. But we always want to aggregate\n\t// events to apply our coleasing logic.\n\t//\n\tprivate static readonly FILE_CHANGES_HANDLER_DELAY = 75;\n\n\t// Reduce likelyhood of spam from file events via throttling.\n\t// (https://github.com/microsoft/vscode/issues/124723)\n\tprivate readonly throttledFileChangesEmitter = this._register(new ThrottledWorker<IDiskFileChange>(\n\t\t{\n\t\t\tmaxWorkChunkSize: 500,\t// only process up to 500 changes at once before...\n\t\t\tthrottleDelay: 200,\t  \t// ...resting for 200ms until we process events again...\n\t\t\tmaxBufferedWork: 30000 \t// ...but never buffering more than 30000 events in memory\n\t\t},\n\t\tevents => this._onDidChangeFile.fire(events)\n\t));\n\n\tprivate verboseLogging = false;\n\tprivate enospcErrorLogged = false;\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Error handling on process\n\t\tprocess.on('uncaughtException', error => this.onUnexpectedError(error));\n\t\tprocess.on('unhandledRejection', error => this.onUnexpectedError(error));\n\t}\n\n\tasync watch(requests: IRecursiveWatchRequest[]): Promise<void> {\n\n\t\t// Figure out duplicates to remove from the requests\n\t\tconst normalizedRequests = this.normalizeRequests(requests);\n\n\t\t// Gather paths that we should start watching\n\t\tconst requestsToStartWatching = normalizedRequests.filter(request => {\n\t\t\tconst watcher = this.watchers.get(request.path);\n\t\t\tif (!watcher) {\n\t\t\t\treturn true; // not yet watching that path\n\t\t\t}\n\n\t\t\t// Re-watch path if excludes/includes have changed or polling interval\n\t\t\treturn !patternsEquals(watcher.request.excludes, request.excludes) || !patternsEquals(watcher.request.includes, request.includes) || watcher.request.pollingInterval !== request.pollingInterval;\n\t\t});\n\n\t\t// Gather paths that we should stop watching\n\t\tconst pathsToStopWatching = Array.from(this.watchers.values()).filter(({ request }) => {\n\t\t\treturn !normalizedRequests.find(normalizedRequest => {\n\t\t\t\treturn normalizedRequest.path === request.path &&\n\t\t\t\t\tpatternsEquals(normalizedRequest.excludes, request.excludes) &&\n\t\t\t\t\tpatternsEquals(normalizedRequest.includes, request.includes) &&\n\t\t\t\t\tnormalizedRequest.pollingInterval === request.pollingInterval;\n\n\t\t\t});\n\t\t}).map(({ request }) => request.path);\n\n\t\t// Logging\n\n\t\tif (requestsToStartWatching.length) {\n\t\t\tthis.trace(`Request to start watching: ${requestsToStartWatching.map(request => `${request.path} (excludes: ${request.excludes.length > 0 ? request.excludes : '<none>'}, includes: ${request.includes && request.includes.length > 0 ? JSON.stringify(request.includes) : '<all>'})`).join(',')}`);\n\t\t}\n\n\t\tif (pathsToStopWatching.length) {\n\t\t\tthis.trace(`Request to stop watching: ${pathsToStopWatching.join(',')}`);\n\t\t}\n\n\t\t// Stop watching as instructed\n\t\tfor (const pathToStopWatching of pathsToStopWatching) {\n\t\t\tawait this.stopWatching(pathToStopWatching);\n\t\t}\n\n\t\t// Start watching as instructed\n\t\tfor (const request of requestsToStartWatching) {\n\t\t\tif (request.pollingInterval) {\n\t\t\t\tthis.startPolling(request, request.pollingInterval);\n\t\t\t} else {\n\t\t\t\tthis.startWatching(request);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate startPolling(request: IRecursiveWatchRequest, pollingInterval: number, restarts = 0): void {\n\t\tconst cts = new CancellationTokenSource();\n\n\t\tconst instance = new DeferredPromise<void>();\n\n\t\tconst snapshotFile = randomPath(tmpdir(), 'vscode-watcher-snapshot');\n\n\t\t// Remember as watcher instance\n\t\tconst watcher: IParcelWatcherInstance = {\n\t\t\trequest,\n\t\t\tready: instance.p,\n\t\t\trestarts,\n\t\t\ttoken: cts.token,\n\t\t\tworker: new RunOnceWorker<IDiskFileChange>(events => this.handleParcelEvents(events, watcher), ParcelWatcher.FILE_CHANGES_HANDLER_DELAY),\n\t\t\tstop: async () => {\n\t\t\t\tcts.dispose(true);\n\n\t\t\t\twatcher.worker.flush();\n\t\t\t\twatcher.worker.dispose();\n\n\t\t\t\tpollingWatcher.dispose();\n\t\t\t\tunlinkSync(snapshotFile);\n\t\t\t}\n\t\t};\n\t\tthis.watchers.set(request.path, watcher);\n\n\t\t// Path checks for symbolic links / wrong casing\n\t\tconst { realPath, realPathDiffers, realPathLength } = this.normalizePath(request);\n\n\t\t// Warm up include patterns for usage\n\t\tconst includePatterns = request.includes ? parseWatcherPatterns(request.path, request.includes) : undefined;\n\n\t\tthis.trace(`Started watching: '${realPath}' with polling interval '${pollingInterval}'`);\n\n\t\tlet counter = 0;\n\n\t\tconst pollingWatcher = new RunOnceScheduler(async () => {\n\t\t\tcounter++;\n\n\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// We already ran before, check for events since\n\t\t\tif (counter > 1) {\n\t\t\t\tconst parcelEvents = await parcelWatcher.getEventsSince(realPath, snapshotFile, { ignore: request.excludes, backend: ParcelWatcher.PARCEL_WATCHER_BACKEND });\n\n\t\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// Handle & emit events\n\t\t\t\tthis.onParcelEvents(parcelEvents, watcher, includePatterns, realPathDiffers, realPathLength);\n\t\t\t}\n\n\t\t\t// Store a snapshot of files to the snapshot file\n\t\t\tawait parcelWatcher.writeSnapshot(realPath, snapshotFile, { ignore: request.excludes, backend: ParcelWatcher.PARCEL_WATCHER_BACKEND });\n\n\t\t\t// Signal we are ready now when the first snapshot was written\n\t\t\tif (counter === 1) {\n\t\t\t\tinstance.complete();\n\t\t\t}\n\n\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Schedule again at the next interval\n\t\t\tpollingWatcher.schedule();\n\t\t}, pollingInterval);\n\t\tpollingWatcher.schedule(0);\n\t}\n\n\tprivate startWatching(request: IRecursiveWatchRequest, restarts = 0): void {\n\t\tconst cts = new CancellationTokenSource();\n\n\t\tconst instance = new DeferredPromise<parcelWatcher.AsyncSubscription | undefined>();\n\n\t\t// Remember as watcher instance\n\t\tconst watcher: IParcelWatcherInstance = {\n\t\t\trequest,\n\t\t\tready: instance.p,\n\t\t\trestarts,\n\t\t\ttoken: cts.token,\n\t\t\tworker: new RunOnceWorker<IDiskFileChange>(events => this.handleParcelEvents(events, watcher), ParcelWatcher.FILE_CHANGES_HANDLER_DELAY),\n\t\t\tstop: async () => {\n\t\t\t\tcts.dispose(true);\n\n\t\t\t\twatcher.worker.flush();\n\t\t\t\twatcher.worker.dispose();\n\n\t\t\t\tconst watcherInstance = await instance.p;\n\t\t\t\tawait watcherInstance?.unsubscribe();\n\t\t\t}\n\t\t};\n\t\tthis.watchers.set(request.path, watcher);\n\n\t\t// Path checks for symbolic links / wrong casing\n\t\tconst { realPath, realPathDiffers, realPathLength } = this.normalizePath(request);\n\n\t\t// Warm up include patterns for usage\n\t\tconst includePatterns = request.includes ? parseWatcherPatterns(request.path, request.includes) : undefined;\n\n\t\tparcelWatcher.subscribe(realPath, (error, parcelEvents) => {\n\t\t\tif (watcher.token.isCancellationRequested) {\n\t\t\t\treturn; // return early when disposed\n\t\t\t}\n\n\t\t\t// In any case of an error, treat this like a unhandled exception\n\t\t\t// that might require the watcher to restart. We do not really know\n\t\t\t// the state of parcel at this point and as such will try to restart\n\t\t\t// up to our maximum of restarts.\n\t\t\tif (error) {\n\t\t\t\tthis.onUnexpectedError(error, watcher);\n\t\t\t}\n\n\t\t\t// Handle & emit events\n\t\t\tthis.onParcelEvents(parcelEvents, watcher, includePatterns, realPathDiffers, realPathLength);\n\t\t}, {\n\t\t\tbackend: ParcelWatcher.PARCEL_WATCHER_BACKEND,\n\t\t\tignore: watcher.request.excludes\n\t\t}).then(parcelWatcher => {\n\t\t\tthis.trace(`Started watching: '${realPath}' with backend '${ParcelWatcher.PARCEL_WATCHER_BACKEND}'`);\n\n\t\t\tinstance.complete(parcelWatcher);\n\t\t}).catch(error => {\n\t\t\tthis.onUnexpectedError(error, watcher);\n\n\t\t\tinstance.complete(undefined);\n\t\t});\n\t}\n\n\tprivate onParcelEvents(parcelEvents: parcelWatcher.Event[], watcher: IParcelWatcherInstance, includes: ParsedPattern[] | undefined, realPathDiffers: boolean, realPathLength: number): void {\n\t\tif (parcelEvents.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Normalize events: handle NFC normalization and symlinks\n\t\t// It is important to do this before checking for includes\n\t\t// to check on the original path.\n\t\tthis.normalizeEvents(parcelEvents, watcher.request, realPathDiffers, realPathLength);\n\n\t\t// Check for includes\n\t\tconst includedEvents = this.handleIncludes(parcelEvents, includes);\n\n\t\t// Add to event aggregator for later processing\n\t\tfor (const includedEvent of includedEvents) {\n\t\t\twatcher.worker.work(includedEvent);\n\t\t}\n\t}\n\n\tprivate handleIncludes(parcelEvents: parcelWatcher.Event[], includes: ParsedPattern[] | undefined): IDiskFileChange[] {\n\t\tconst events: IDiskFileChange[] = [];\n\n\t\tfor (const { path, type: parcelEventType } of parcelEvents) {\n\t\t\tconst type = ParcelWatcher.MAP_PARCEL_WATCHER_ACTION_TO_FILE_CHANGE.get(parcelEventType)!;\n\t\t\tif (this.verboseLogging) {\n\t\t\t\tthis.trace(`${type === FileChangeType.ADDED ? '[ADDED]' : type === FileChangeType.DELETED ? '[DELETED]' : '[CHANGED]'} ${path}`);\n\t\t\t}\n\n\t\t\t// Apply include filter if any\n\t\t\tif (includes && includes.length > 0 && !includes.some(include => include(path))) {\n\t\t\t\tif (this.verboseLogging) {\n\t\t\t\t\tthis.trace(` >> ignored (not included) ${path}`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tevents.push({ type, path });\n\t\t\t}\n\t\t}\n\n\t\treturn events;\n\t}\n\n\tprivate handleParcelEvents(parcelEvents: IDiskFileChange[], watcher: IParcelWatcherInstance): void {\n\n\t\t// Coalesce events: merge events of same kind\n\t\tconst coalescedEvents = coalesceEvents(parcelEvents);\n\n\t\t// Filter events: check for specific events we want to exclude\n\t\tconst { events: filteredEvents, rootDeleted } = this.filterEvents(coalescedEvents, watcher);\n\n\t\t// Broadcast to clients\n\t\tthis.emitEvents(filteredEvents);\n\n\t\t// Handle root path deletes\n\t\tif (rootDeleted) {\n\t\t\tthis.onWatchedPathDeleted(watcher);\n\t\t}\n\t}\n\n\tprivate emitEvents(events: IDiskFileChange[]): void {\n\t\tif (events.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Logging\n\t\tif (this.verboseLogging) {\n\t\t\tfor (const event of events) {\n\t\t\t\tthis.trace(` >> normalized ${event.type === FileChangeType.ADDED ? '[ADDED]' : event.type === FileChangeType.DELETED ? '[DELETED]' : '[CHANGED]'} ${event.path}`);\n\t\t\t}\n\t\t}\n\n\t\t// Broadcast to clients via throttler\n\t\tconst worked = this.throttledFileChangesEmitter.work(events);\n\n\t\t// Logging\n\t\tif (!worked) {\n\t\t\tthis.warn(`started ignoring events due to too many file change events at once (incoming: ${events.length}, most recent change: ${events[0].path}). Use 'files.watcherExclude' setting to exclude folders with lots of changing files (e.g. compilation output).`);\n\t\t} else {\n\t\t\tif (this.throttledFileChangesEmitter.pending > 0) {\n\t\t\t\tthis.trace(`started throttling events due to large amount of file change events at once (pending: ${this.throttledFileChangesEmitter.pending}, most recent change: ${events[0].path}). Use 'files.watcherExclude' setting to exclude folders with lots of changing files (e.g. compilation output).`);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate normalizePath(request: IRecursiveWatchRequest): { realPath: string; realPathDiffers: boolean; realPathLength: number } {\n\t\tlet realPath = request.path;\n\t\tlet realPathDiffers = false;\n\t\tlet realPathLength = request.path.length;\n\n\t\ttry {\n\n\t\t\t// First check for symbolic link\n\t\t\trealPath = realpathSync(request.path);\n\n\t\t\t// Second check for casing difference\n\t\t\t// Note: this will be a no-op on Linux platforms\n\t\t\tif (request.path === realPath) {\n\t\t\t\trealPath = realcaseSync(request.path) ?? request.path;\n\t\t\t}\n\n\t\t\t// Correct watch path as needed\n\t\t\tif (request.path !== realPath) {\n\t\t\t\trealPathLength = realPath.length;\n\t\t\t\trealPathDiffers = true;\n\n\t\t\t\tthis.trace(`correcting a path to watch that seems to be a symbolic link or wrong casing (original: ${request.path}, real: ${realPath})`);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// ignore\n\t\t}\n\n\t\treturn { realPath, realPathDiffers, realPathLength };\n\t}\n\n\tprivate normalizeEvents(events: parcelWatcher.Event[], request: IRecursiveWatchRequest, realPathDiffers: boolean, realPathLength: number): void {\n\t\tfor (const event of events) {\n\n\t\t\t// Mac uses NFD unicode form on disk, but we want NFC\n\t\t\tif (isMacintosh) {\n\t\t\t\tevent.path = normalizeNFC(event.path);\n\t\t\t}\n\n\t\t\t// Workaround for https://github.com/parcel-bundler/watcher/issues/68\n\t\t\t// where watching root drive letter adds extra backslashes.\n\t\t\tif (isWindows) {\n\t\t\t\tif (request.path.length <= 3) { // for ex. c:, C:\\\n\t\t\t\t\tevent.path = normalize(event.path);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Convert paths back to original form in case it differs\n\t\t\tif (realPathDiffers) {\n\t\t\t\tevent.path = request.path + event.path.substr(realPathLength);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate filterEvents(events: IDiskFileChange[], watcher: IParcelWatcherInstance): { events: IDiskFileChange[]; rootDeleted?: boolean } {\n\t\tconst filteredEvents: IDiskFileChange[] = [];\n\t\tlet rootDeleted = false;\n\n\t\tfor (const event of events) {\n\t\t\tif (event.type === FileChangeType.DELETED && event.path === watcher.request.path) {\n\n\t\t\t\t// Explicitly exclude changes to root if we have any\n\t\t\t\t// to avoid VS Code closing all opened editors which\n\t\t\t\t// can happen e.g. in case of network connectivity\n\t\t\t\t// issues\n\t\t\t\t// (https://github.com/microsoft/vscode/issues/136673)\n\n\t\t\t\trootDeleted = true;\n\t\t\t} else {\n\t\t\t\tfilteredEvents.push(event);\n\t\t\t}\n\t\t}\n\n\t\treturn { events: filteredEvents, rootDeleted };\n\t}\n\n\tprivate onWatchedPathDeleted(watcher: IParcelWatcherInstance): void {\n\t\tthis.warn('Watcher shutdown because watched path got deleted', watcher);\n\n\t\tconst parentPath = dirname(watcher.request.path);\n\t\tif (existsSync(parentPath)) {\n\t\t\tconst nodeWatcher = new NodeJSFileWatcherLibrary({ path: parentPath, excludes: [], recursive: false }, changes => {\n\t\t\t\tif (watcher.token.isCancellationRequested) {\n\t\t\t\t\treturn; // return early when disposed\n\t\t\t\t}\n\n\t\t\t\t// Watcher path came back! Restart watching...\n\t\t\t\tfor (const { path, type } of changes) {\n\t\t\t\t\tif (path === watcher.request.path && (type === FileChangeType.ADDED || type === FileChangeType.UPDATED)) {\n\t\t\t\t\t\tthis.warn('Watcher restarts because watched path got created again', watcher);\n\n\t\t\t\t\t\t// Stop watching that parent folder\n\t\t\t\t\t\tnodeWatcher.dispose();\n\n\t\t\t\t\t\t// Restart the file watching\n\t\t\t\t\t\tthis.restartWatching(watcher);\n\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}, msg => this._onDidLogMessage.fire(msg), this.verboseLogging);\n\n\t\t\t// Make sure to stop watching when the watcher is disposed\n\t\t\twatcher.token.onCancellationRequested(() => nodeWatcher.dispose());\n\t\t}\n\t}\n\n\tprivate onUnexpectedError(error: unknown, watcher?: IParcelWatcherInstance): void {\n\t\tconst msg = toErrorMessage(error);\n\n\t\t// Specially handle ENOSPC errors that can happen when\n\t\t// the watcher consumes so many file descriptors that\n\t\t// we are running into a limit. We only want to warn\n\t\t// once in this case to avoid log spam.\n\t\t// See https://github.com/microsoft/vscode/issues/7950\n\t\tif (msg.indexOf('No space left on device') !== -1) {\n\t\t\tif (!this.enospcErrorLogged) {\n\t\t\t\tthis.error('Inotify limit reached (ENOSPC)', watcher);\n\n\t\t\t\tthis.enospcErrorLogged = true;\n\t\t\t}\n\t\t}\n\n\t\t// Any other error is unexpected and we should try to\n\t\t// restart the watcher as a result to get into healthy\n\t\t// state again if possible and if not attempted too much\n\t\telse {\n\t\t\tthis.error(`Unexpected error: ${msg} (EUNKNOWN)`, watcher);\n\n\t\t\tthis._onDidError.fire(msg);\n\t\t}\n\t}\n\n\tasync stop(): Promise<void> {\n\t\tfor (const [path] of this.watchers) {\n\t\t\tawait this.stopWatching(path);\n\t\t}\n\n\t\tthis.watchers.clear();\n\t}\n\n\tprotected restartWatching(watcher: IParcelWatcherInstance, delay = 800): void {\n\n\t\t// Restart watcher delayed to accomodate for\n\t\t// changes on disk that have triggered the\n\t\t// need for a restart in the first place.\n\t\tconst scheduler = new RunOnceScheduler(async () => {\n\t\t\tif (watcher.token.isCancellationRequested) {\n\t\t\t\treturn; // return early when disposed\n\t\t\t}\n\n\t\t\t// Await the watcher having stopped, as this is\n\t\t\t// needed to properly re-watch the same path\n\t\t\tawait this.stopWatching(watcher.request.path);\n\n\t\t\t// Start watcher again counting the restarts\n\t\t\tif (watcher.request.pollingInterval) {\n\t\t\t\tthis.startPolling(watcher.request, watcher.request.pollingInterval, watcher.restarts + 1);\n\t\t\t} else {\n\t\t\t\tthis.startWatching(watcher.request, watcher.restarts + 1);\n\t\t\t}\n\t\t}, delay);\n\n\t\tscheduler.schedule();\n\t\twatcher.token.onCancellationRequested(() => scheduler.dispose());\n\t}\n\n\tprivate async stopWatching(path: string): Promise<void> {\n\t\tconst watcher = this.watchers.get(path);\n\t\tif (watcher) {\n\t\t\tthis.trace(`stopping file watcher on ${watcher.request.path}`);\n\n\t\t\tthis.watchers.delete(path);\n\n\t\t\ttry {\n\t\t\t\tawait watcher.stop();\n\t\t\t} catch (error) {\n\t\t\t\tthis.error(`Unexpected error stopping watcher: ${toErrorMessage(error)}`, watcher);\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected normalizeRequests(requests: IRecursiveWatchRequest[], validatePaths = true): IRecursiveWatchRequest[] {\n\t\tconst requestTrie = TernarySearchTree.forPaths<IRecursiveWatchRequest>(!isLinux);\n\n\t\t// Sort requests by path length to have shortest first\n\t\t// to have a way to prevent children to be watched if\n\t\t// parents exist.\n\t\trequests.sort((requestA, requestB) => requestA.path.length - requestB.path.length);\n\n\t\t// Only consider requests for watching that are not\n\t\t// a child of an existing request path to prevent\n\t\t// duplication. In addition, drop any request where\n\t\t// everything is excluded (via `**` glob).\n\t\t//\n\t\t// However, allow explicit requests to watch folders\n\t\t// that are symbolic links because the Parcel watcher\n\t\t// does not allow to recursively watch symbolic links.\n\t\tfor (const request of requests) {\n\t\t\tif (request.excludes.includes(GLOBSTAR)) {\n\t\t\t\tcontinue; // path is ignored entirely (via `**` glob exclude)\n\t\t\t}\n\n\t\t\t// Check for overlapping requests\n\t\t\tif (requestTrie.findSubstr(request.path)) {\n\t\t\t\ttry {\n\t\t\t\t\tconst realpath = realpathSync(request.path);\n\t\t\t\t\tif (realpath === request.path) {\n\t\t\t\t\t\tthis.trace(`ignoring a path for watching who's parent is already watched: ${request.path}`);\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.trace(`ignoring a path for watching who's realpath failed to resolve: ${request.path} (error: ${error})`);\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Check for invalid paths\n\t\t\tif (validatePaths) {\n\t\t\t\ttry {\n\t\t\t\t\tconst stat = statSync(request.path);\n\t\t\t\t\tif (!stat.isDirectory()) {\n\t\t\t\t\t\tthis.trace(`ignoring a path for watching that is a file and not a folder: ${request.path}`);\n\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.trace(`ignoring a path for watching who's stat info failed to resolve: ${request.path} (error: ${error})`);\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\trequestTrie.set(request.path, request);\n\t\t}\n\n\t\treturn Array.from(requestTrie).map(([, request]) => request);\n\t}\n\n\tasync setVerboseLogging(enabled: boolean): Promise<void> {\n\t\tthis.verboseLogging = enabled;\n\t}\n\n\tprivate trace(message: string) {\n\t\tif (this.verboseLogging) {\n\t\t\tthis._onDidLogMessage.fire({ type: 'trace', message: this.toMessage(message) });\n\t\t}\n\t}\n\n\tprivate warn(message: string, watcher?: IParcelWatcherInstance) {\n\t\tthis._onDidLogMessage.fire({ type: 'warn', message: this.toMessage(message, watcher) });\n\t}\n\n\tprivate error(message: string, watcher: IParcelWatcherInstance | undefined) {\n\t\tthis._onDidLogMessage.fire({ type: 'error', message: this.toMessage(message, watcher) });\n\t}\n\n\tprivate toMessage(message: string, watcher?: IParcelWatcherInstance): string {\n\t\treturn watcher ? `[File Watcher (parcel)] ${message} (path: ${watcher.request.path})` : `[File Watcher (parcel)] ${message}`;\n\t}\n}\n"]}