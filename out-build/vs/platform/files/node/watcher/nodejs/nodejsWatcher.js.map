{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/files/node/watcher/nodejs/nodejsWatcher.ts"],"names":[],"mappings":"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","file":"nodejsWatcher.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event, Emitter } from 'vs/base/common/event';\nimport { patternsEquals } from 'vs/base/common/glob';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { isLinux } from 'vs/base/common/platform';\nimport { IDiskFileChange, ILogMessage, INonRecursiveWatchRequest, INonRecursiveWatcher } from 'vs/platform/files/common/watcher';\nimport { NodeJSFileWatcherLibrary } from 'vs/platform/files/node/watcher/nodejs/nodejsWatcherLib';\n\nexport interface INodeJSWatcherInstance {\n\n\t/**\n\t * The watcher instance.\n\t */\n\treadonly instance: NodeJSFileWatcherLibrary;\n\n\t/**\n\t * The watch request associated to the watcher.\n\t */\n\treadonly request: INonRecursiveWatchRequest;\n}\n\nexport class NodeJSWatcher extends Disposable implements INonRecursiveWatcher {\n\n\tprivate readonly _onDidChangeFile = this._register(new Emitter<IDiskFileChange[]>());\n\treadonly onDidChangeFile = this._onDidChangeFile.event;\n\n\tprivate readonly _onDidLogMessage = this._register(new Emitter<ILogMessage>());\n\treadonly onDidLogMessage = this._onDidLogMessage.event;\n\n\treadonly onDidError = Event.None;\n\n\tprotected readonly watchers = new Map<string, INodeJSWatcherInstance>();\n\n\tprivate verboseLogging = false;\n\n\tasync watch(requests: INonRecursiveWatchRequest[]): Promise<void> {\n\n\t\t// Figure out duplicates to remove from the requests\n\t\tconst normalizedRequests = this.normalizeRequests(requests);\n\n\t\t// Gather paths that we should start watching\n\t\tconst requestsToStartWatching = normalizedRequests.filter(request => {\n\t\t\tconst watcher = this.watchers.get(request.path);\n\t\t\tif (!watcher) {\n\t\t\t\treturn true; // not yet watching that path\n\t\t\t}\n\n\t\t\t// Re-watch path if excludes or includes have changed\n\t\t\treturn !patternsEquals(watcher.request.excludes, request.excludes) || !patternsEquals(watcher.request.includes, request.includes);\n\t\t});\n\n\t\t// Gather paths that we should stop watching\n\t\tconst pathsToStopWatching = Array.from(this.watchers.values()).filter(({ request }) => {\n\t\t\treturn !normalizedRequests.find(normalizedRequest => normalizedRequest.path === request.path && patternsEquals(normalizedRequest.excludes, request.excludes) && patternsEquals(normalizedRequest.includes, request.includes));\n\t\t}).map(({ request }) => request.path);\n\n\t\t// Logging\n\n\t\tif (requestsToStartWatching.length) {\n\t\t\tthis.trace(`Request to start watching: ${requestsToStartWatching.map(request => `${request.path} (excludes: ${request.excludes.length > 0 ? request.excludes : '<none>'}, includes: ${request.includes && request.includes.length > 0 ? JSON.stringify(request.includes) : '<all>'})`).join(',')}`);\n\t\t}\n\n\t\tif (pathsToStopWatching.length) {\n\t\t\tthis.trace(`Request to stop watching: ${pathsToStopWatching.join(',')}`);\n\t\t}\n\n\t\t// Stop watching as instructed\n\t\tfor (const pathToStopWatching of pathsToStopWatching) {\n\t\t\tthis.stopWatching(pathToStopWatching);\n\t\t}\n\n\t\t// Start watching as instructed\n\t\tfor (const request of requestsToStartWatching) {\n\t\t\tthis.startWatching(request);\n\t\t}\n\t}\n\n\tprivate startWatching(request: INonRecursiveWatchRequest): void {\n\n\t\t// Start via node.js lib\n\t\tconst instance = new NodeJSFileWatcherLibrary(request, changes => this._onDidChangeFile.fire(changes), msg => this._onDidLogMessage.fire(msg), this.verboseLogging);\n\n\t\t// Remember as watcher instance\n\t\tconst watcher: INodeJSWatcherInstance = { request, instance };\n\t\tthis.watchers.set(request.path, watcher);\n\t}\n\n\tasync stop(): Promise<void> {\n\t\tfor (const [path] of this.watchers) {\n\t\t\tthis.stopWatching(path);\n\t\t}\n\n\t\tthis.watchers.clear();\n\t}\n\n\tprivate stopWatching(path: string): void {\n\t\tconst watcher = this.watchers.get(path);\n\t\tif (watcher) {\n\t\t\tthis.watchers.delete(path);\n\n\t\t\twatcher.instance.dispose();\n\t\t}\n\t}\n\n\tprivate normalizeRequests(requests: INonRecursiveWatchRequest[]): INonRecursiveWatchRequest[] {\n\t\tconst requestsMap = new Map<string, INonRecursiveWatchRequest>();\n\n\t\t// Ignore requests for the same paths\n\t\tfor (const request of requests) {\n\t\t\tconst path = isLinux ? request.path : request.path.toLowerCase(); // adjust for case sensitivity\n\t\t\trequestsMap.set(path, request);\n\t\t}\n\n\t\treturn Array.from(requestsMap.values());\n\t}\n\n\tasync setVerboseLogging(enabled: boolean): Promise<void> {\n\t\tthis.verboseLogging = enabled;\n\n\t\tfor (const [, watcher] of this.watchers) {\n\t\t\twatcher.instance.setVerboseLogging(enabled);\n\t\t}\n\t}\n\n\tprivate trace(message: string): void {\n\t\tif (this.verboseLogging) {\n\t\t\tthis._onDidLogMessage.fire({ type: 'trace', message: this.toMessage(message) });\n\t\t}\n\t}\n\n\tprivate toMessage(message: string, watcher?: INodeJSWatcherInstance): string {\n\t\treturn watcher ? `[File Watcher (node.js)] ${message} (path: ${watcher.request.path})` : `[File Watcher (node.js)] ${message}`;\n\t}\n}\n"]}