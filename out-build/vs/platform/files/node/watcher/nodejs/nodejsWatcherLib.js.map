{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/files/node/watcher/nodejs/nodejsWatcherLib.ts"],"names":[],"mappings":"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","file":"nodejsWatcherLib.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { watch } from 'fs';\nimport { RunOnceWorker, ThrottledWorker } from 'vs/base/common/async';\nimport { CancellationToken, CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { isEqualOrParent } from 'vs/base/common/extpath';\nimport { Disposable, DisposableStore, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { normalizeNFC } from 'vs/base/common/normalization';\nimport { basename, dirname, join } from 'vs/base/common/path';\nimport { isLinux, isMacintosh } from 'vs/base/common/platform';\nimport { realcase } from 'vs/base/node/extpath';\nimport { Promises } from 'vs/base/node/pfs';\nimport { FileChangeType } from 'vs/platform/files/common/files';\nimport { IDiskFileChange, ILogMessage, coalesceEvents, INonRecursiveWatchRequest, parseWatcherPatterns } from 'vs/platform/files/common/watcher';\n\nexport class NodeJSFileWatcherLibrary extends Disposable {\n\n\t// A delay in reacting to file deletes to support\n\t// atomic save operations where a tool may chose\n\t// to delete a file before creating it again for\n\t// an update.\n\tprivate static readonly FILE_DELETE_HANDLER_DELAY = 100;\n\n\t// A delay for collecting file changes from node.js\n\t// before collecting them for coalescing and emitting\n\t// Same delay as used for the recursive watcher.\n\tprivate static readonly FILE_CHANGES_HANDLER_DELAY = 75;\n\n\t// Reduce likelyhood of spam from file events via throttling.\n\t// These numbers are a bit more aggressive compared to the\n\t// recursive watcher because we can have many individual\n\t// node.js watchers per request.\n\t// (https://github.com/microsoft/vscode/issues/124723)\n\tprivate readonly throttledFileChangesEmitter = this._register(new ThrottledWorker<IDiskFileChange>(\n\t\t{\n\t\t\tmaxWorkChunkSize: 100,\t// only process up to 100 changes at once before...\n\t\t\tthrottleDelay: 200,\t  \t// ...resting for 200ms until we process events again...\n\t\t\tmaxBufferedWork: 10000 \t// ...but never buffering more than 10000 events in memory\n\t\t},\n\t\tevents => this.onDidFilesChange(events)\n\t));\n\n\t// Aggregate file changes over FILE_CHANGES_HANDLER_DELAY\n\t// to coalesce events and reduce spam.\n\tprivate readonly fileChangesAggregator = this._register(new RunOnceWorker<IDiskFileChange>(events => this.handleFileChanges(events), NodeJSFileWatcherLibrary.FILE_CHANGES_HANDLER_DELAY));\n\n\tprivate readonly excludes = parseWatcherPatterns(this.request.path, this.request.excludes);\n\tprivate readonly includes = this.request.includes ? parseWatcherPatterns(this.request.path, this.request.includes) : undefined;\n\n\tprivate readonly cts = new CancellationTokenSource();\n\n\treadonly ready = this.watch();\n\n\tconstructor(\n\t\tprivate request: INonRecursiveWatchRequest,\n\t\tprivate onDidFilesChange: (changes: IDiskFileChange[]) => void,\n\t\tprivate onLogMessage?: (msg: ILogMessage) => void,\n\t\tprivate verboseLogging?: boolean\n\t) {\n\t\tsuper();\n\t}\n\n\tprivate async watch(): Promise<void> {\n\t\ttry {\n\t\t\tconst realPath = await this.normalizePath(this.request);\n\n\t\t\tif (this.cts.token.isCancellationRequested) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Watch via node.js\n\t\t\tconst stat = await Promises.stat(realPath);\n\t\t\tthis._register(await this.doWatch(realPath, stat.isDirectory()));\n\n\t\t} catch (error) {\n\t\t\tif (error.code !== 'ENOENT') {\n\t\t\t\tthis.error(error);\n\t\t\t} else {\n\t\t\t\tthis.trace(error);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async normalizePath(request: INonRecursiveWatchRequest): Promise<string> {\n\t\tlet realPath = request.path;\n\n\t\ttry {\n\n\t\t\t// First check for symbolic link\n\t\t\trealPath = await Promises.realpath(request.path);\n\n\t\t\t// Second check for casing difference\n\t\t\t// Note: this will be a no-op on Linux platforms\n\t\t\tif (request.path === realPath) {\n\t\t\t\trealPath = await realcase(request.path) ?? request.path;\n\t\t\t}\n\n\t\t\t// Correct watch path as needed\n\t\t\tif (request.path !== realPath) {\n\t\t\t\tthis.trace(`correcting a path to watch that seems to be a symbolic link or wrong casing (original: ${request.path}, real: ${realPath})`);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// ignore\n\t\t}\n\n\t\treturn realPath;\n\t}\n\n\tprivate async doWatch(path: string, isDirectory: boolean): Promise<IDisposable> {\n\n\t\t// macOS: watching samba shares can crash VSCode so we do\n\t\t// a simple check for the file path pointing to /Volumes\n\t\t// (https://github.com/microsoft/vscode/issues/106879)\n\t\t// TODO@electron this needs a revisit when the crash is\n\t\t// fixed or mitigated upstream.\n\t\tif (isMacintosh && isEqualOrParent(path, '/Volumes/', true)) {\n\t\t\tthis.error(`Refusing to watch ${path} for changes using fs.watch() for possibly being a network share where watching is unreliable and unstable.`);\n\n\t\t\treturn Disposable.None;\n\t\t}\n\n\t\tconst cts = new CancellationTokenSource(this.cts.token);\n\n\t\tconst disposables = new DisposableStore();\n\n\t\ttry {\n\t\t\tconst pathBasename = basename(path);\n\n\t\t\t// Creating watcher can fail with an exception\n\t\t\tconst watcher = watch(path);\n\t\t\tdisposables.add(toDisposable(() => {\n\t\t\t\twatcher.removeAllListeners();\n\t\t\t\twatcher.close();\n\t\t\t}));\n\n\t\t\tthis.trace(`Started watching: '${path}'`);\n\n\t\t\t// Folder: resolve children to emit proper events\n\t\t\tconst folderChildren = new Set<string>();\n\t\t\tif (isDirectory) {\n\t\t\t\ttry {\n\t\t\t\t\tfor (const child of await Promises.readdir(path)) {\n\t\t\t\t\t\tfolderChildren.add(child);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.error(error);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst mapPathToStatDisposable = new Map<string, IDisposable>();\n\t\t\tdisposables.add(toDisposable(() => {\n\t\t\t\tfor (const [, disposable] of mapPathToStatDisposable) {\n\t\t\t\t\tdisposable.dispose();\n\t\t\t\t}\n\t\t\t\tmapPathToStatDisposable.clear();\n\t\t\t}));\n\n\t\t\twatcher.on('error', (code: number, signal: string) => {\n\t\t\t\tthis.error(`Failed to watch ${path} for changes using fs.watch() (${code}, ${signal})`);\n\n\t\t\t\t// The watcher is no longer functional reliably\n\t\t\t\t// so we go ahead and dispose it\n\t\t\t\tthis.dispose();\n\t\t\t});\n\n\t\t\twatcher.on('change', (type, raw) => {\n\t\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\t\treturn; // ignore if already disposed\n\t\t\t\t}\n\n\t\t\t\tthis.trace(`[raw] [\"${type}\"] ${raw}`);\n\n\t\t\t\t// Normalize file name\n\t\t\t\tlet changedFileName = '';\n\t\t\t\tif (raw) { // https://github.com/microsoft/vscode/issues/38191\n\t\t\t\t\tchangedFileName = raw.toString();\n\t\t\t\t\tif (isMacintosh) {\n\t\t\t\t\t\t// Mac: uses NFD unicode form on disk, but we want NFC\n\t\t\t\t\t\t// See also https://github.com/nodejs/node/issues/2165\n\t\t\t\t\t\tchangedFileName = normalizeNFC(changedFileName);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (!changedFileName || (type !== 'change' && type !== 'rename')) {\n\t\t\t\t\treturn; // ignore unexpected events\n\t\t\t\t}\n\n\t\t\t\t// Folder\n\t\t\t\tif (isDirectory) {\n\n\t\t\t\t\t// Folder child added/deleted\n\t\t\t\t\tif (type === 'rename') {\n\n\t\t\t\t\t\t// Cancel any previous stats for this file if existing\n\t\t\t\t\t\tmapPathToStatDisposable.get(changedFileName)?.dispose();\n\n\t\t\t\t\t\t// Wait a bit and try see if the file still exists on disk\n\t\t\t\t\t\t// to decide on the resulting event\n\t\t\t\t\t\tconst timeoutHandle = setTimeout(async () => {\n\t\t\t\t\t\t\tmapPathToStatDisposable.delete(changedFileName);\n\n\t\t\t\t\t\t\t// Depending on the OS the watcher runs on, there\n\t\t\t\t\t\t\t// is different behaviour for when the watched\n\t\t\t\t\t\t\t// folder path is being deleted:\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t// -   macOS: not reported but events continue to\n\t\t\t\t\t\t\t//            work even when the folder is brought\n\t\t\t\t\t\t\t//            back, though it seems every change\n\t\t\t\t\t\t\t//            to a file is reported as \"rename\"\n\t\t\t\t\t\t\t// -   Linux: \"rename\" event is reported with the\n\t\t\t\t\t\t\t//            name of the folder and events stop\n\t\t\t\t\t\t\t//            working\n\t\t\t\t\t\t\t// - Windows: an EPERM error is thrown that we\n\t\t\t\t\t\t\t//            handle from the `on('error')` event\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t// We do not re-attach the watcher after timeout\n\t\t\t\t\t\t\t// though as we do for file watches because for\n\t\t\t\t\t\t\t// file watching specifically we want to handle\n\t\t\t\t\t\t\t// the atomic-write cases where the file is being\n\t\t\t\t\t\t\t// deleted and recreated with different contents.\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t// Same as with recursive watching, we do not\n\t\t\t\t\t\t\t// emit a delete event in this case.\n\t\t\t\t\t\t\tif (changedFileName === pathBasename && !await Promises.exists(path)) {\n\t\t\t\t\t\t\t\tthis.warn('Watcher shutdown because watched path got deleted');\n\n\t\t\t\t\t\t\t\t// The watcher is no longer functional reliably\n\t\t\t\t\t\t\t\t// so we go ahead and dispose it\n\t\t\t\t\t\t\t\tthis.dispose();\n\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// In order to properly detect renames on a case-insensitive\n\t\t\t\t\t\t\t// file system, we need to use `existsChildStrictCase` helper\n\t\t\t\t\t\t\t// because otherwise we would wrongly assume a file exists\n\t\t\t\t\t\t\t// when it was renamed to same name but different case.\n\t\t\t\t\t\t\tconst fileExists = await this.existsChildStrictCase(join(path, changedFileName));\n\n\t\t\t\t\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\t\t\t\t\treturn; // ignore if disposed by now\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Figure out the correct event type:\n\t\t\t\t\t\t\t// File Exists: either 'added' or 'updated' if known before\n\t\t\t\t\t\t\t// File Does not Exist: always 'deleted'\n\t\t\t\t\t\t\tlet type: FileChangeType;\n\t\t\t\t\t\t\tif (fileExists) {\n\t\t\t\t\t\t\t\tif (folderChildren.has(changedFileName)) {\n\t\t\t\t\t\t\t\t\ttype = FileChangeType.UPDATED;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\ttype = FileChangeType.ADDED;\n\t\t\t\t\t\t\t\t\tfolderChildren.add(changedFileName);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfolderChildren.delete(changedFileName);\n\t\t\t\t\t\t\t\ttype = FileChangeType.DELETED;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.onFileChange({ path: join(this.request.path, changedFileName), type });\n\t\t\t\t\t\t}, NodeJSFileWatcherLibrary.FILE_DELETE_HANDLER_DELAY);\n\n\t\t\t\t\t\tmapPathToStatDisposable.set(changedFileName, toDisposable(() => clearTimeout(timeoutHandle)));\n\t\t\t\t\t}\n\n\t\t\t\t\t// Folder child changed\n\t\t\t\t\telse {\n\n\t\t\t\t\t\t// Figure out the correct event type: if this is the\n\t\t\t\t\t\t// first time we see this child, it can only be added\n\t\t\t\t\t\tlet type: FileChangeType;\n\t\t\t\t\t\tif (folderChildren.has(changedFileName)) {\n\t\t\t\t\t\t\ttype = FileChangeType.UPDATED;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ttype = FileChangeType.ADDED;\n\t\t\t\t\t\t\tfolderChildren.add(changedFileName);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.onFileChange({ path: join(this.request.path, changedFileName), type });\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// File\n\t\t\t\telse {\n\n\t\t\t\t\t// File added/deleted\n\t\t\t\t\tif (type === 'rename' || changedFileName !== pathBasename) {\n\n\t\t\t\t\t\t// Depending on the OS the watcher runs on, there\n\t\t\t\t\t\t// is different behaviour for when the watched\n\t\t\t\t\t\t// file path is being deleted:\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// -   macOS: \"rename\" event is reported and events\n\t\t\t\t\t\t//            stop working\n\t\t\t\t\t\t// -   Linux: \"rename\" event is reported and events\n\t\t\t\t\t\t//            stop working\n\t\t\t\t\t\t// - Windows: \"rename\" event is reported and events\n\t\t\t\t\t\t//            continue to work when file is restored\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// As opposed to folder watching, we re-attach the\n\t\t\t\t\t\t// watcher after brief timeout to support \"atomic save\"\n\t\t\t\t\t\t// operations where a tool may decide to delete a file\n\t\t\t\t\t\t// and then create it with the updated contents.\n\t\t\t\t\t\t//\n\t\t\t\t\t\t// Different to folder watching, we emit a delete event\n\t\t\t\t\t\t// though we never detect when the file is brought back\n\t\t\t\t\t\t// because the watcher is disposed then.\n\n\t\t\t\t\t\tconst timeoutHandle = setTimeout(async () => {\n\t\t\t\t\t\t\tconst fileExists = await Promises.exists(path);\n\n\t\t\t\t\t\t\tif (cts.token.isCancellationRequested) {\n\t\t\t\t\t\t\t\treturn; // ignore if disposed by now\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// File still exists, so emit as change event and reapply the watcher\n\t\t\t\t\t\t\tif (fileExists) {\n\t\t\t\t\t\t\t\tthis.onFileChange({ path: this.request.path, type: FileChangeType.UPDATED }, true /* skip excludes/includes (file is explicitly watched) */);\n\n\t\t\t\t\t\t\t\tdisposables.add(await this.doWatch(path, false));\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// File seems to be really gone, so emit a deleted event and dispose\n\t\t\t\t\t\t\telse {\n\t\t\t\t\t\t\t\tthis.onFileChange({ path: this.request.path, type: FileChangeType.DELETED }, true /* skip excludes/includes (file is explicitly watched) */);\n\n\t\t\t\t\t\t\t\t// Important to flush the event delivery\n\t\t\t\t\t\t\t\t// before disposing the watcher, otherwise\n\t\t\t\t\t\t\t\t// we will loose this event.\n\t\t\t\t\t\t\t\tthis.fileChangesAggregator.flush();\n\n\t\t\t\t\t\t\t\tthis.dispose();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, NodeJSFileWatcherLibrary.FILE_DELETE_HANDLER_DELAY);\n\n\t\t\t\t\t\t// Very important to dispose the watcher which now points to a stale inode\n\t\t\t\t\t\t// and wire in a new disposable that tracks our timeout that is installed\n\t\t\t\t\t\tdisposables.clear();\n\t\t\t\t\t\tdisposables.add(toDisposable(() => clearTimeout(timeoutHandle)));\n\t\t\t\t\t}\n\n\t\t\t\t\t// File changed\n\t\t\t\t\telse {\n\t\t\t\t\t\tthis.onFileChange({ path: this.request.path, type: FileChangeType.UPDATED }, true /* skip excludes/includes (file is explicitly watched) */);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tif (await Promises.exists(path) && !cts.token.isCancellationRequested) {\n\t\t\t\tthis.error(`Failed to watch ${path} for changes using fs.watch() (${error.toString()})`);\n\t\t\t}\n\t\t}\n\n\t\treturn toDisposable(() => {\n\t\t\tcts.dispose(true);\n\t\t\tdisposables.dispose();\n\t\t});\n\t}\n\n\tprivate onFileChange(event: IDiskFileChange, skipIncludeExcludeChecks = false): void {\n\t\tif (this.cts.token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Logging\n\t\tif (this.verboseLogging) {\n\t\t\tthis.trace(`${event.type === FileChangeType.ADDED ? '[ADDED]' : event.type === FileChangeType.DELETED ? '[DELETED]' : '[CHANGED]'} ${event.path}`);\n\t\t}\n\n\t\t// Add to aggregator unless excluded or not included (not if explicitly disabled)\n\t\tif (!skipIncludeExcludeChecks && this.excludes.some(exclude => exclude(event.path))) {\n\t\t\tif (this.verboseLogging) {\n\t\t\t\tthis.trace(` >> ignored (excluded) ${event.path}`);\n\t\t\t}\n\t\t} else if (!skipIncludeExcludeChecks && this.includes && this.includes.length > 0 && !this.includes.some(include => include(event.path))) {\n\t\t\tif (this.verboseLogging) {\n\t\t\t\tthis.trace(` >> ignored (not included) ${event.path}`);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.fileChangesAggregator.work(event);\n\t\t}\n\t}\n\n\tprivate handleFileChanges(fileChanges: IDiskFileChange[]): void {\n\n\t\t// Coalesce events: merge events of same kind\n\t\tconst coalescedFileChanges = coalesceEvents(fileChanges);\n\t\tif (coalescedFileChanges.length > 0) {\n\n\t\t\t// Logging\n\t\t\tif (this.verboseLogging) {\n\t\t\t\tfor (const event of coalescedFileChanges) {\n\t\t\t\t\tthis.trace(`>> normalized ${event.type === FileChangeType.ADDED ? '[ADDED]' : event.type === FileChangeType.DELETED ? '[DELETED]' : '[CHANGED]'} ${event.path}`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Broadcast to clients via throttled emitter\n\t\t\tconst worked = this.throttledFileChangesEmitter.work(coalescedFileChanges);\n\n\t\t\t// Logging\n\t\t\tif (!worked) {\n\t\t\t\tthis.warn(`started ignoring events due to too many file change events at once (incoming: ${coalescedFileChanges.length}, most recent change: ${coalescedFileChanges[0].path}). Use 'files.watcherExclude' setting to exclude folders with lots of changing files (e.g. compilation output).`);\n\t\t\t} else {\n\t\t\t\tif (this.throttledFileChangesEmitter.pending > 0) {\n\t\t\t\t\tthis.trace(`started throttling events due to large amount of file change events at once (pending: ${this.throttledFileChangesEmitter.pending}, most recent change: ${coalescedFileChanges[0].path}). Use 'files.watcherExclude' setting to exclude folders with lots of changing files (e.g. compilation output).`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async existsChildStrictCase(path: string): Promise<boolean> {\n\t\tif (isLinux) {\n\t\t\treturn Promises.exists(path);\n\t\t}\n\n\t\ttry {\n\t\t\tconst pathBasename = basename(path);\n\t\t\tconst children = await Promises.readdir(dirname(path));\n\n\t\t\treturn children.some(child => child === pathBasename);\n\t\t} catch (error) {\n\t\t\tthis.trace(error);\n\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tsetVerboseLogging(verboseLogging: boolean): void {\n\t\tthis.verboseLogging = verboseLogging;\n\t}\n\n\tprivate error(error: string): void {\n\t\tif (!this.cts.token.isCancellationRequested) {\n\t\t\tthis.onLogMessage?.({ type: 'error', message: `[File Watcher (node.js)] ${error}` });\n\t\t}\n\t}\n\n\tprivate warn(message: string): void {\n\t\tif (!this.cts.token.isCancellationRequested) {\n\t\t\tthis.onLogMessage?.({ type: 'warn', message: `[File Watcher (node.js)] ${message}` });\n\t\t}\n\t}\n\n\tprivate trace(message: string): void {\n\t\tif (!this.cts.token.isCancellationRequested && this.verboseLogging) {\n\t\t\tthis.onLogMessage?.({ type: 'trace', message: `[File Watcher (node.js)] ${message}` });\n\t\t}\n\t}\n\n\toverride dispose(): void {\n\t\tthis.trace(`stopping file watcher on ${this.request.path}`);\n\n\t\tthis.cts.dispose(true);\n\n\t\tsuper.dispose();\n\t}\n}\n\n/**\n * Watch the provided `path` for changes and return\n * the data in chunks of `Uint8Array` for further use.\n */\nexport async function watchFileContents(path: string, onData: (chunk: Uint8Array) => void, onReady: () => void, token: CancellationToken, bufferSize = 512): Promise<void> {\n\tconst handle = await Promises.open(path, 'r');\n\tconst buffer = Buffer.allocUnsafe(bufferSize);\n\n\tconst cts = new CancellationTokenSource(token);\n\n\tlet error: Error | undefined = undefined;\n\tlet isReading = false;\n\n\tconst request: INonRecursiveWatchRequest = { path, excludes: [], recursive: false };\n\tconst watcher = new NodeJSFileWatcherLibrary(request, changes => {\n\t\t(async () => {\n\t\t\tfor (const { type } of changes) {\n\t\t\t\tif (type === FileChangeType.UPDATED) {\n\n\t\t\t\t\tif (isReading) {\n\t\t\t\t\t\treturn; // return early if we are already reading the output\n\t\t\t\t\t}\n\n\t\t\t\t\tisReading = true;\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\t// Consume the new contents of the file until finished\n\t\t\t\t\t\t// everytime there is a change event signalling a change\n\t\t\t\t\t\twhile (!cts.token.isCancellationRequested) {\n\t\t\t\t\t\t\tconst { bytesRead } = await Promises.read(handle, buffer, 0, bufferSize, null);\n\t\t\t\t\t\t\tif (!bytesRead || cts.token.isCancellationRequested) {\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tonData(buffer.slice(0, bytesRead));\n\t\t\t\t\t\t}\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\terror = new Error(err);\n\t\t\t\t\t\tcts.dispose(true);\n\t\t\t\t\t} finally {\n\t\t\t\t\t\tisReading = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t})();\n\t});\n\n\tawait watcher.ready;\n\tonReady();\n\n\treturn new Promise<void>((resolve, reject) => {\n\t\tcts.token.onCancellationRequested(async () => {\n\t\t\twatcher.dispose();\n\n\t\t\ttry {\n\t\t\t\tawait Promises.close(handle);\n\t\t\t} catch (err) {\n\t\t\t\terror = new Error(err);\n\t\t\t}\n\n\t\t\tif (error) {\n\t\t\t\treject(error);\n\t\t\t} else {\n\t\t\t\tresolve();\n\t\t\t}\n\t\t});\n\t});\n}\n"]}