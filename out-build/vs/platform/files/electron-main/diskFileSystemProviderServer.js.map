{"version":3,"sources":["vs/platform/files/electron-main/diskFileSystemProviderServer.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAgBhG,MAAa,IAA8B,SAAQ,kCAA8C;QAEhG,YACC,QAAa,EACb,UAAe,EACE,CAAuB;YAExC,KAAK,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;YAFX,MAAC,GAAD,CAAC,CAAsB;QAGzC,CAAC;QAEkB,CAAC,CAAiB,GAAY;YAChD,OAAO,YAAG,CAAmB;QAC9B,CAAC;QAEkB,CAAC,CAAiB,cAA+B,EAAE,SAAwB;YAC7F,OAAO,SAAG,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;QAC9B,CAAC;QAED,8DAA8D;QAE3C,KAAK,CAAC,CAAC,CAAM,cAA+B,EAAE,SAAwB,EAAE,IAAwB;YAClH,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;gBACnB,OAAO,KAAK,CAAC,CAAC,CAAM,cAAc,EAAE,SAAS,EAAE,IAAI,CAAC,CAAC;aACrD;YAED,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAiB,cAAc,EAAE,SAAS,CAAC,CAAC;YACnE,MAAM,QAAQ,GAAG,IAAA,UAAG,EAAO,QAAQ,CAAC,MAAM,CAAC,CAAC;YAC5C,IAAI;gBACH,MAAM,gBAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;aAChC;YAAC,OAAO,KAAK,EAAE;gBACf,MAAM,IAAA,WAAG,EAA2B,aAAE,CAAQ,CAAC,CAAC,IAAA,cAAQ,EAAC,CAAW,EAAE,IAAyC,EAAE,IAAA,UAAG,EAAM,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,IAAA,cAAQ,EAAC,CAAa,EAAE,IAAmC,EAAE,IAAA,UAAG,EAAM,QAAQ,CAAC,CAAC,EAAE,mCAA2B,CAAC,OAAO,CAAC,CAAC;aAC9P;QACF,CAAC;QAED,YAAY;QAEZ,uBAAuB;QAEb,CAAC,CAAwB,cAA+B,EAAE,OAAwC;YAC3G,OAAO,IAAI,kBAAkB,CAAC,cAAc,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC,EAAW,IAAI,CAAC,CAAC,CAAkB,CAAC;QAClG,CAAC;KAID;IA5CD,oBA4CC;IAED,MAAM,kBAAmB,SAAQ,kCAAG;QAE1B,KAAK,CAAC,GAAW,EAAE,QAAa,EAAE,IAAmB;YAC7D,IAAI,IAAI,CAAC,SAAS,EAAE;gBACnB,MAAM,IAAA,WAAG,EAA2B,qFAAqF,EAAE,mCAA2B,CAAC,WAAW,CAAC,CAAC;aACpK;YAED,OAAO,KAAK,CAAC,KAAK,CAAC,GAAG,EAAE,QAAQ,EAAE,IAAI,CAAC,CAAC;QACzC,CAAC;KACD","file":"diskFileSystemProviderServer.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { shell } from 'electron';\nimport { localize } from 'vs/nls';\nimport { isWindows } from 'vs/base/common/platform';\nimport { Emitter } from 'vs/base/common/event';\nimport { URI, UriComponents } from 'vs/base/common/uri';\nimport { IFileDeleteOptions, IFileChange, IWatchOptions, createFileSystemProviderError, FileSystemProviderErrorCode } from 'vs/platform/files/common/files';\nimport { DiskFileSystemProvider } from 'vs/platform/files/node/diskFileSystemProvider';\nimport { basename, normalize } from 'vs/base/common/path';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { AbstractDiskFileSystemProviderChannel, AbstractSessionFileWatcher, ISessionFileWatcher } from 'vs/platform/files/node/diskFileSystemProviderServer';\nimport { DefaultURITransformer, IURITransformer } from 'vs/base/common/uriIpc';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\n\nexport class DiskFileSystemProviderChannel extends AbstractDiskFileSystemProviderChannel<unknown> {\n\n\tconstructor(\n\t\tprovider: DiskFileSystemProvider,\n\t\tlogService: ILogService,\n\t\tprivate readonly environmentService: IEnvironmentService\n\t) {\n\t\tsuper(provider, logService);\n\t}\n\n\tprotected override getUriTransformer(ctx: unknown): IURITransformer {\n\t\treturn DefaultURITransformer;\n\t}\n\n\tprotected override transformIncoming(uriTransformer: IURITransformer, _resource: UriComponents): URI {\n\t\treturn URI.revive(_resource);\n\t}\n\n\t//#region Delete: override to support Electron's trash support\n\n\tprotected override async delete(uriTransformer: IURITransformer, _resource: UriComponents, opts: IFileDeleteOptions): Promise<void> {\n\t\tif (!opts.useTrash) {\n\t\t\treturn super.delete(uriTransformer, _resource, opts);\n\t\t}\n\n\t\tconst resource = this.transformIncoming(uriTransformer, _resource);\n\t\tconst filePath = normalize(resource.fsPath);\n\t\ttry {\n\t\t\tawait shell.trashItem(filePath);\n\t\t} catch (error) {\n\t\t\tthrow createFileSystemProviderError(isWindows ? localize('binFailed', \"Failed to move '{0}' to the recycle bin\", basename(filePath)) : localize('trashFailed', \"Failed to move '{0}' to the trash\", basename(filePath)), FileSystemProviderErrorCode.Unknown);\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region File Watching\n\n\tprotected createSessionFileWatcher(uriTransformer: IURITransformer, emitter: Emitter<IFileChange[] | string>): ISessionFileWatcher {\n\t\treturn new SessionFileWatcher(uriTransformer, emitter, this.logService, this.environmentService);\n\t}\n\n\t//#endregion\n\n}\n\nclass SessionFileWatcher extends AbstractSessionFileWatcher {\n\n\toverride watch(req: number, resource: URI, opts: IWatchOptions): IDisposable {\n\t\tif (opts.recursive) {\n\t\t\tthrow createFileSystemProviderError('Recursive file watching is not supported from main process for performance reasons.', FileSystemProviderErrorCode.Unavailable);\n\t\t}\n\n\t\treturn super.watch(req, resource, opts);\n\t}\n}\n"]}