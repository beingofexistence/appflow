{"version":3,"sources":["vs/platform/files/common/files.ts"],"names":[],"mappings":"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","file":"files.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { VSBuffer, VSBufferReadable, VSBufferReadableStream } from 'vs/base/common/buffer';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Event } from 'vs/base/common/event';\nimport { IExpression, IRelativePattern } from 'vs/base/common/glob';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { TernarySearchTree } from 'vs/base/common/ternarySearchTree';\nimport { sep } from 'vs/base/common/path';\nimport { ReadableStreamEvents } from 'vs/base/common/stream';\nimport { startsWithIgnoreCase } from 'vs/base/common/strings';\nimport { isNumber } from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { isWeb } from 'vs/base/common/platform';\nimport { Schemas } from 'vs/base/common/network';\nimport { IMarkdownString } from 'vs/base/common/htmlContent';\n\n//#region file service & providers\n\nexport const IFileService = createDecorator<IFileService>('fileService');\n\nexport interface IFileService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * An event that is fired when a file system provider is added or removed\n\t */\n\treadonly onDidChangeFileSystemProviderRegistrations: Event<IFileSystemProviderRegistrationEvent>;\n\n\t/**\n\t * An event that is fired when a registered file system provider changes its capabilities.\n\t */\n\treadonly onDidChangeFileSystemProviderCapabilities: Event<IFileSystemProviderCapabilitiesChangeEvent>;\n\n\t/**\n\t * An event that is fired when a file system provider is about to be activated. Listeners\n\t * can join this event with a long running promise to help in the activation process.\n\t */\n\treadonly onWillActivateFileSystemProvider: Event<IFileSystemProviderActivationEvent>;\n\n\t/**\n\t * Registers a file system provider for a certain scheme.\n\t */\n\tregisterProvider(scheme: string, provider: IFileSystemProvider): IDisposable;\n\n\t/**\n\t * Returns a file system provider for a certain scheme.\n\t */\n\tgetProvider(scheme: string): IFileSystemProvider | undefined;\n\n\t/**\n\t * Tries to activate a provider with the given scheme.\n\t */\n\tactivateProvider(scheme: string): Promise<void>;\n\n\t/**\n\t * Checks if this file service can handle the given resource by\n\t * first activating any extension that wants to be activated\n\t * on the provided resource scheme to include extensions that\n\t * contribute file system providers for the given resource.\n\t */\n\tcanHandleResource(resource: URI): Promise<boolean>;\n\n\t/**\n\t * Checks if the file service has a registered provider for the\n\t * provided resource.\n\t *\n\t * Note: this does NOT account for contributed providers from\n\t * extensions that have not been activated yet. To include those,\n\t * consider to call `await fileService.canHandleResource(resource)`.\n\t */\n\thasProvider(resource: URI): boolean;\n\n\t/**\n\t * Checks if the provider for the provided resource has the provided file system capability.\n\t */\n\thasCapability(resource: URI, capability: FileSystemProviderCapabilities): boolean;\n\n\t/**\n\t * List the schemes and capabilities for registered file system providers\n\t */\n\tlistCapabilities(): Iterable<{ scheme: string; capabilities: FileSystemProviderCapabilities }>;\n\n\t/**\n\t * Allows to listen for file changes. The event will fire for every file within the opened workspace\n\t * (if any) as well as all files that have been watched explicitly using the #watch() API.\n\t */\n\treadonly onDidFilesChange: Event<FileChangesEvent>;\n\n\t/**\n\t * An event that is fired upon successful completion of a certain file operation.\n\t */\n\treadonly onDidRunOperation: Event<FileOperationEvent>;\n\n\t/**\n\t * Resolve the properties of a file/folder identified by the resource. For a folder, children\n\t * information is resolved as well depending on the provided options. Use `stat()` method if\n\t * you do not need children information.\n\t *\n\t * If the optional parameter \"resolveTo\" is specified in options, the stat service is asked\n\t * to provide a stat object that should contain the full graph of folders up to all of the\n\t * target resources.\n\t *\n\t * If the optional parameter \"resolveSingleChildDescendants\" is specified in options,\n\t * the stat service is asked to automatically resolve child folders that only\n\t * contain a single element.\n\t *\n\t * If the optional parameter \"resolveMetadata\" is specified in options,\n\t * the stat will contain metadata information such as size, mtime and etag.\n\t */\n\tresolve(resource: URI, options: IResolveMetadataFileOptions): Promise<IFileStatWithMetadata>;\n\tresolve(resource: URI, options?: IResolveFileOptions): Promise<IFileStat>;\n\n\t/**\n\t * Same as `resolve()` but supports resolving multiple resources in parallel.\n\t *\n\t * If one of the resolve targets fails to resolve returns a fake `IFileStat` instead of\n\t * making the whole call fail.\n\t */\n\tresolveAll(toResolve: { resource: URI; options: IResolveMetadataFileOptions }[]): Promise<IFileStatResult[]>;\n\tresolveAll(toResolve: { resource: URI; options?: IResolveFileOptions }[]): Promise<IFileStatResult[]>;\n\n\t/**\n\t * Same as `resolve()` but without resolving the children of a folder if the\n\t * resource is pointing to a folder.\n\t */\n\tstat(resource: URI): Promise<IFileStatWithPartialMetadata>;\n\n\t/**\n\t * Finds out if a file/folder identified by the resource exists.\n\t */\n\texists(resource: URI): Promise<boolean>;\n\n\t/**\n\t * Read the contents of the provided resource unbuffered.\n\t */\n\treadFile(resource: URI, options?: IReadFileOptions, token?: CancellationToken): Promise<IFileContent>;\n\n\t/**\n\t * Read the contents of the provided resource buffered as stream.\n\t */\n\treadFileStream(resource: URI, options?: IReadFileStreamOptions, token?: CancellationToken): Promise<IFileStreamContent>;\n\n\t/**\n\t * Updates the content replacing its previous value.\n\t *\n\t * Emits a `FileOperation.WRITE` file operation event when successful.\n\t */\n\twriteFile(resource: URI, bufferOrReadableOrStream: VSBuffer | VSBufferReadable | VSBufferReadableStream, options?: IWriteFileOptions): Promise<IFileStatWithMetadata>;\n\n\t/**\n\t * Moves the file/folder to a new path identified by the resource.\n\t *\n\t * The optional parameter overwrite can be set to replace an existing file at the location.\n\t *\n\t * Emits a `FileOperation.MOVE` file operation event when successful.\n\t */\n\tmove(source: URI, target: URI, overwrite?: boolean): Promise<IFileStatWithMetadata>;\n\n\t/**\n\t * Find out if a move operation is possible given the arguments. No changes on disk will\n\t * be performed. Returns an Error if the operation cannot be done.\n\t */\n\tcanMove(source: URI, target: URI, overwrite?: boolean): Promise<Error | true>;\n\n\t/**\n\t * Copies the file/folder to a path identified by the resource. A folder is copied\n\t * recursively.\n\t *\n\t * Emits a `FileOperation.COPY` file operation event when successful.\n\t */\n\tcopy(source: URI, target: URI, overwrite?: boolean): Promise<IFileStatWithMetadata>;\n\n\t/**\n\t * Find out if a copy operation is possible given the arguments. No changes on disk will\n\t * be performed. Returns an Error if the operation cannot be done.\n\t */\n\tcanCopy(source: URI, target: URI, overwrite?: boolean): Promise<Error | true>;\n\n\t/**\n\t * Clones a file to a path identified by the resource. Folders are not supported.\n\t *\n\t * If the target path exists, it will be overwritten.\n\t */\n\tcloneFile(source: URI, target: URI): Promise<void>;\n\n\t/**\n\t * Creates a new file with the given path and optional contents. The returned promise\n\t * will have the stat model object as a result.\n\t *\n\t * The optional parameter content can be used as value to fill into the new file.\n\t *\n\t * Emits a `FileOperation.CREATE` file operation event when successful.\n\t */\n\tcreateFile(resource: URI, bufferOrReadableOrStream?: VSBuffer | VSBufferReadable | VSBufferReadableStream, options?: ICreateFileOptions): Promise<IFileStatWithMetadata>;\n\n\t/**\n\t * Find out if a file create operation is possible given the arguments. No changes on disk will\n\t * be performed. Returns an Error if the operation cannot be done.\n\t */\n\tcanCreateFile(resource: URI, options?: ICreateFileOptions): Promise<Error | true>;\n\n\t/**\n\t * Creates a new folder with the given path. The returned promise\n\t * will have the stat model object as a result.\n\t *\n\t * Emits a `FileOperation.CREATE` file operation event when successful.\n\t */\n\tcreateFolder(resource: URI): Promise<IFileStatWithMetadata>;\n\n\t/**\n\t * Deletes the provided file. The optional useTrash parameter allows to\n\t * move the file to trash. The optional recursive parameter allows to delete\n\t * non-empty folders recursively.\n\t *\n\t * Emits a `FileOperation.DELETE` file operation event when successful.\n\t */\n\tdel(resource: URI, options?: Partial<IFileDeleteOptions>): Promise<void>;\n\n\t/**\n\t * Find out if a delete operation is possible given the arguments. No changes on disk will\n\t * be performed. Returns an Error if the operation cannot be done.\n\t */\n\tcanDelete(resource: URI, options?: Partial<IFileDeleteOptions>): Promise<Error | true>;\n\n\t/**\n\t * An event that signals an error when watching for file changes.\n\t */\n\treadonly onDidWatchError: Event<Error>;\n\n\t/**\n\t * Allows to start a watcher that reports file/folder change events on the provided resource.\n\t *\n\t * Note: recursive file watching is not supported from this method. Only events from files\n\t * that are direct children of the provided resource will be reported.\n\t */\n\twatch(resource: URI, options?: IWatchOptions): IDisposable;\n\n\t/**\n\t * Frees up any resources occupied by this service.\n\t */\n\tdispose(): void;\n}\n\nexport interface IFileOverwriteOptions {\n\n\t/**\n\t * Set to `true` to overwrite a file if it exists. Will\n\t * throw an error otherwise if the file does exist.\n\t */\n\treadonly overwrite: boolean;\n}\n\nexport interface IFileUnlockOptions {\n\n\t/**\n\t * Set to `true` to try to remove any write locks the file might\n\t * have. A file that is write locked will throw an error for any\n\t * attempt to write to unless `unlock: true` is provided.\n\t */\n\treadonly unlock: boolean;\n}\n\nexport interface IFileAtomicReadOptions {\n\n\t/**\n\t * The optional `atomic` flag can be used to make sure\n\t * the `readFile` method is not running in parallel with\n\t * any `write` operations in the same process.\n\t *\n\t * Typically you should not need to use this flag but if\n\t * for example you are quickly reading a file right after\n\t * a file event occurred and the file changes a lot, there\n\t * is a chance that a read returns an empty or partial file\n\t * because a pending write has not finished yet.\n\t *\n\t * Note: this does not prevent the file from being written\n\t * to from a different process. If you need such atomic\n\t * operations, you better use a real database as storage.\n\t */\n\treadonly atomic: boolean;\n}\n\nexport interface IFileAtomicOptions {\n\n\t/**\n\t * The postfix is used to create a temporary file based\n\t * on the original resource. The resulting temporary\n\t * file will be in the same folder as the resource and\n\t * have `postfix` appended to the resource name.\n\t *\n\t * Example: given a file resource `file:///some/path/foo.txt`\n\t * and a postfix `.vsctmp`, the temporary file will be\n\t * created as `file:///some/path/foo.txt.vsctmp`.\n\t */\n\treadonly postfix: string;\n}\n\nexport interface IFileAtomicWriteOptions {\n\n\t/**\n\t * The optional `atomic` flag can be used to make sure\n\t * the `writeFile` method updates the target file atomically\n\t * by first writing to a temporary file in the same folder\n\t * and then renaming it over the target.\n\t */\n\treadonly atomic: IFileAtomicOptions | false;\n}\n\nexport interface IFileAtomicDeleteOptions {\n\n\t/**\n\t * The optional `atomic` flag can be used to make sure\n\t * the `delete` method deletes the target atomically by\n\t * first renaming it to a temporary resource in the same\n\t * folder and then deleting it.\n\t */\n\treadonly atomic: IFileAtomicOptions | false;\n}\n\nexport interface IFileReadLimits {\n\n\t/**\n\t * If the file exceeds the given size, an error of kind\n\t * `FILE_TOO_LARGE` will be thrown.\n\t */\n\tsize?: number;\n}\n\nexport interface IFileReadStreamOptions {\n\n\t/**\n\t * Is an integer specifying where to begin reading from in the file. If position is undefined,\n\t * data will be read from the current file position.\n\t */\n\treadonly position?: number;\n\n\t/**\n\t * Is an integer specifying how many bytes to read from the file. By default, all bytes\n\t * will be read.\n\t */\n\treadonly length?: number;\n\n\t/**\n\t * If provided, the size of the file will be checked against the limits\n\t * and an error will be thrown if any limit is exceeded.\n\t */\n\treadonly limits?: IFileReadLimits;\n}\n\nexport interface IFileWriteOptions extends IFileOverwriteOptions, IFileUnlockOptions, IFileAtomicWriteOptions {\n\n\t/**\n\t * Set to `true` to create a file when it does not exist. Will\n\t * throw an error otherwise if the file does not exist.\n\t */\n\treadonly create: boolean;\n}\n\nexport type IFileOpenOptions = IFileOpenForReadOptions | IFileOpenForWriteOptions;\n\nexport function isFileOpenForWriteOptions(options: IFileOpenOptions): options is IFileOpenForWriteOptions {\n\treturn options.create === true;\n}\n\nexport interface IFileOpenForReadOptions {\n\n\t/**\n\t * A hint that the file should be opened for reading only.\n\t */\n\treadonly create: false;\n}\n\nexport interface IFileOpenForWriteOptions extends IFileUnlockOptions {\n\n\t/**\n\t * A hint that the file should be opened for reading and writing.\n\t */\n\treadonly create: true;\n}\n\nexport interface IFileDeleteOptions {\n\n\t/**\n\t * Set to `true` to recursively delete any children of the file. This\n\t * only applies to folders and can lead to an error unless provided\n\t * if the folder is not empty.\n\t */\n\treadonly recursive: boolean;\n\n\t/**\n\t * Set to `true` to attempt to move the file to trash\n\t * instead of deleting it permanently from disk.\n\t *\n\t * This option maybe not be supported on all providers.\n\t */\n\treadonly useTrash: boolean;\n\n\t/**\n\t * The optional `atomic` flag can be used to make sure\n\t * the `delete` method deletes the target atomically by\n\t * first renaming it to a temporary resource in the same\n\t * folder and then deleting it.\n\t *\n\t * This option maybe not be supported on all providers.\n\t */\n\treadonly atomic: IFileAtomicOptions | false;\n}\n\nexport enum FileType {\n\n\t/**\n\t * File is unknown (neither file, directory nor symbolic link).\n\t */\n\tUnknown = 0,\n\n\t/**\n\t * File is a normal file.\n\t */\n\tFile = 1,\n\n\t/**\n\t * File is a directory.\n\t */\n\tDirectory = 2,\n\n\t/**\n\t * File is a symbolic link.\n\t *\n\t * Note: even when the file is a symbolic link, you can test for\n\t * `FileType.File` and `FileType.Directory` to know the type of\n\t * the target the link points to.\n\t */\n\tSymbolicLink = 64\n}\n\nexport enum FilePermission {\n\n\t/**\n\t * File is readonly. Components like editors should not\n\t * offer to edit the contents.\n\t */\n\tReadonly = 1,\n\n\t/**\n\t * File is locked. Components like editors should offer\n\t * to edit the contents and ask the user upon saving to\n\t * remove the lock.\n\t */\n\tLocked = 2\n}\n\nexport interface IStat {\n\n\t/**\n\t * The file type.\n\t */\n\treadonly type: FileType;\n\n\t/**\n\t * The last modification date represented as millis from unix epoch.\n\t */\n\treadonly mtime: number;\n\n\t/**\n\t * The creation date represented as millis from unix epoch.\n\t */\n\treadonly ctime: number;\n\n\t/**\n\t * The size of the file in bytes.\n\t */\n\treadonly size: number;\n\n\t/**\n\t * The file permissions.\n\t */\n\treadonly permissions?: FilePermission;\n}\n\nexport interface IWatchOptions {\n\n\t/**\n\t * Set to `true` to watch for changes recursively in a folder\n\t * and all of its children.\n\t */\n\treadonly recursive: boolean;\n\n\t/**\n\t * A set of glob patterns or paths to exclude from watching.\n\t * Paths can be relative or absolute and when relative are\n\t * resolved against the watched folder. Glob patterns are\n\t * always matched relative to the watched folder.\n\t */\n\texcludes: string[];\n\n\t/**\n\t * An optional set of glob patterns or paths to include for\n\t * watching. If not provided, all paths are considered for\n\t * events.\n\t * Paths can be relative or absolute and when relative are\n\t * resolved against the watched folder. Glob patterns are\n\t * always matched relative to the watched folder.\n\t */\n\tincludes?: Array<string | IRelativePattern>;\n}\n\nexport const enum FileSystemProviderCapabilities {\n\n\t/**\n\t * No capabilities.\n\t */\n\tNone = 0,\n\n\t/**\n\t * Provider supports unbuffered read/write.\n\t */\n\tFileReadWrite = 1 << 1,\n\n\t/**\n\t * Provider supports open/read/write/close low level file operations.\n\t */\n\tFileOpenReadWriteClose = 1 << 2,\n\n\t/**\n\t * Provider supports stream based reading.\n\t */\n\tFileReadStream = 1 << 4,\n\n\t/**\n\t * Provider supports copy operation.\n\t */\n\tFileFolderCopy = 1 << 3,\n\n\t/**\n\t * Provider is path case sensitive.\n\t */\n\tPathCaseSensitive = 1 << 10,\n\n\t/**\n\t * All files of the provider are readonly.\n\t */\n\tReadonly = 1 << 11,\n\n\t/**\n\t * Provider supports to delete via trash.\n\t */\n\tTrash = 1 << 12,\n\n\t/**\n\t * Provider support to unlock files for writing.\n\t */\n\tFileWriteUnlock = 1 << 13,\n\n\t/**\n\t * Provider support to read files atomically. This implies the\n\t * provider provides the `FileReadWrite` capability too.\n\t */\n\tFileAtomicRead = 1 << 14,\n\n\t/**\n\t * Provider support to write files atomically. This implies the\n\t * provider provides the `FileReadWrite` capability too.\n\t */\n\tFileAtomicWrite = 1 << 15,\n\n\t/**\n\t * Provider support to delete atomically.\n\t */\n\tFileAtomicDelete = 1 << 16,\n\n\t/**\n\t * Provider support to clone files atomically.\n\t */\n\tFileClone = 1 << 17\n}\n\nexport interface IFileSystemProvider {\n\n\treadonly capabilities: FileSystemProviderCapabilities;\n\treadonly onDidChangeCapabilities: Event<void>;\n\n\treadonly onDidChangeFile: Event<readonly IFileChange[]>;\n\treadonly onDidWatchError?: Event<string>;\n\twatch(resource: URI, opts: IWatchOptions): IDisposable;\n\n\tstat(resource: URI): Promise<IStat>;\n\tmkdir(resource: URI): Promise<void>;\n\treaddir(resource: URI): Promise<[string, FileType][]>;\n\tdelete(resource: URI, opts: IFileDeleteOptions): Promise<void>;\n\n\trename(from: URI, to: URI, opts: IFileOverwriteOptions): Promise<void>;\n\tcopy?(from: URI, to: URI, opts: IFileOverwriteOptions): Promise<void>;\n\n\treadFile?(resource: URI): Promise<Uint8Array>;\n\twriteFile?(resource: URI, content: Uint8Array, opts: IFileWriteOptions): Promise<void>;\n\n\treadFileStream?(resource: URI, opts: IFileReadStreamOptions, token: CancellationToken): ReadableStreamEvents<Uint8Array>;\n\n\topen?(resource: URI, opts: IFileOpenOptions): Promise<number>;\n\tclose?(fd: number): Promise<void>;\n\tread?(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number>;\n\twrite?(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number>;\n\n\tcloneFile?(from: URI, to: URI): Promise<void>;\n}\n\nexport interface IFileSystemProviderWithFileReadWriteCapability extends IFileSystemProvider {\n\treadFile(resource: URI): Promise<Uint8Array>;\n\twriteFile(resource: URI, content: Uint8Array, opts: IFileWriteOptions): Promise<void>;\n}\n\nexport function hasReadWriteCapability(provider: IFileSystemProvider): provider is IFileSystemProviderWithFileReadWriteCapability {\n\treturn !!(provider.capabilities & FileSystemProviderCapabilities.FileReadWrite);\n}\n\nexport interface IFileSystemProviderWithFileFolderCopyCapability extends IFileSystemProvider {\n\tcopy(from: URI, to: URI, opts: IFileOverwriteOptions): Promise<void>;\n}\n\nexport function hasFileFolderCopyCapability(provider: IFileSystemProvider): provider is IFileSystemProviderWithFileFolderCopyCapability {\n\treturn !!(provider.capabilities & FileSystemProviderCapabilities.FileFolderCopy);\n}\n\nexport interface IFileSystemProviderWithFileCloneCapability extends IFileSystemProvider {\n\tcloneFile(from: URI, to: URI): Promise<void>;\n}\n\nexport function hasFileCloneCapability(provider: IFileSystemProvider): provider is IFileSystemProviderWithFileCloneCapability {\n\treturn !!(provider.capabilities & FileSystemProviderCapabilities.FileClone);\n}\n\nexport interface IFileSystemProviderWithOpenReadWriteCloseCapability extends IFileSystemProvider {\n\topen(resource: URI, opts: IFileOpenOptions): Promise<number>;\n\tclose(fd: number): Promise<void>;\n\tread(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number>;\n\twrite(fd: number, pos: number, data: Uint8Array, offset: number, length: number): Promise<number>;\n}\n\nexport function hasOpenReadWriteCloseCapability(provider: IFileSystemProvider): provider is IFileSystemProviderWithOpenReadWriteCloseCapability {\n\treturn !!(provider.capabilities & FileSystemProviderCapabilities.FileOpenReadWriteClose);\n}\n\nexport interface IFileSystemProviderWithFileReadStreamCapability extends IFileSystemProvider {\n\treadFileStream(resource: URI, opts: IFileReadStreamOptions, token: CancellationToken): ReadableStreamEvents<Uint8Array>;\n}\n\nexport function hasFileReadStreamCapability(provider: IFileSystemProvider): provider is IFileSystemProviderWithFileReadStreamCapability {\n\treturn !!(provider.capabilities & FileSystemProviderCapabilities.FileReadStream);\n}\n\nexport interface IFileSystemProviderWithFileAtomicReadCapability extends IFileSystemProvider {\n\treadFile(resource: URI, opts?: IFileAtomicReadOptions): Promise<Uint8Array>;\n}\n\nexport function hasFileAtomicReadCapability(provider: IFileSystemProvider): provider is IFileSystemProviderWithFileAtomicReadCapability {\n\tif (!hasReadWriteCapability(provider)) {\n\t\treturn false; // we require the `FileReadWrite` capability too\n\t}\n\n\treturn !!(provider.capabilities & FileSystemProviderCapabilities.FileAtomicRead);\n}\n\nexport interface IFileSystemProviderWithFileAtomicWriteCapability extends IFileSystemProvider {\n\twriteFile(resource: URI, contents: Uint8Array, opts?: IFileAtomicWriteOptions): Promise<void>;\n}\n\nexport function hasFileAtomicWriteCapability(provider: IFileSystemProvider): provider is IFileSystemProviderWithFileAtomicWriteCapability {\n\tif (!hasReadWriteCapability(provider)) {\n\t\treturn false; // we require the `FileReadWrite` capability too\n\t}\n\n\treturn !!(provider.capabilities & FileSystemProviderCapabilities.FileAtomicWrite);\n}\n\nexport interface IFileSystemProviderWithFileAtomicDeleteCapability extends IFileSystemProvider {\n\tdelete(resource: URI, opts: IFileAtomicDeleteOptions): Promise<void>;\n}\n\nexport function hasFileAtomicDeleteCapability(provider: IFileSystemProvider): provider is IFileSystemProviderWithFileAtomicDeleteCapability {\n\treturn !!(provider.capabilities & FileSystemProviderCapabilities.FileAtomicDelete);\n}\n\nexport interface IFileSystemProviderWithReadonlyCapability extends IFileSystemProvider {\n\n\treadonly capabilities: FileSystemProviderCapabilities.Readonly & FileSystemProviderCapabilities;\n\n\t/**\n\t * An optional message to show in the UI to explain why the file system is readonly.\n\t */\n\treadonly readOnlyMessage?: IMarkdownString;\n}\n\nexport function hasReadonlyCapability(provider: IFileSystemProvider): provider is IFileSystemProviderWithReadonlyCapability {\n\treturn !!(provider.capabilities & FileSystemProviderCapabilities.Readonly);\n}\n\nexport enum FileSystemProviderErrorCode {\n\tFileExists = 'EntryExists',\n\tFileNotFound = 'EntryNotFound',\n\tFileNotADirectory = 'EntryNotADirectory',\n\tFileIsADirectory = 'EntryIsADirectory',\n\tFileExceedsStorageQuota = 'EntryExceedsStorageQuota',\n\tFileTooLarge = 'EntryTooLarge',\n\tFileWriteLocked = 'EntryWriteLocked',\n\tNoPermissions = 'NoPermissions',\n\tUnavailable = 'Unavailable',\n\tUnknown = 'Unknown'\n}\n\nexport interface IFileSystemProviderError extends Error {\n\treadonly name: string;\n\treadonly code: FileSystemProviderErrorCode;\n}\n\nexport class FileSystemProviderError extends Error implements IFileSystemProviderError {\n\n\tstatic create(error: Error | string, code: FileSystemProviderErrorCode): FileSystemProviderError {\n\t\tconst providerError = new FileSystemProviderError(error.toString(), code);\n\t\tmarkAsFileSystemProviderError(providerError, code);\n\n\t\treturn providerError;\n\t}\n\n\tprivate constructor(message: string, readonly code: FileSystemProviderErrorCode) {\n\t\tsuper(message);\n\t}\n}\n\nexport function createFileSystemProviderError(error: Error | string, code: FileSystemProviderErrorCode): FileSystemProviderError {\n\treturn FileSystemProviderError.create(error, code);\n}\n\nexport function ensureFileSystemProviderError(error?: Error): Error {\n\tif (!error) {\n\t\treturn createFileSystemProviderError(localize('unknownError', \"Unknown Error\"), FileSystemProviderErrorCode.Unknown); // https://github.com/microsoft/vscode/issues/72798\n\t}\n\n\treturn error;\n}\n\nexport function markAsFileSystemProviderError(error: Error, code: FileSystemProviderErrorCode): Error {\n\terror.name = code ? `${code} (FileSystemError)` : `FileSystemError`;\n\n\treturn error;\n}\n\nexport function toFileSystemProviderErrorCode(error: Error | undefined | null): FileSystemProviderErrorCode {\n\n\t// Guard against abuse\n\tif (!error) {\n\t\treturn FileSystemProviderErrorCode.Unknown;\n\t}\n\n\t// FileSystemProviderError comes with the code\n\tif (error instanceof FileSystemProviderError) {\n\t\treturn error.code;\n\t}\n\n\t// Any other error, check for name match by assuming that the error\n\t// went through the markAsFileSystemProviderError() method\n\tconst match = /^(.+) \\(FileSystemError\\)$/.exec(error.name);\n\tif (!match) {\n\t\treturn FileSystemProviderErrorCode.Unknown;\n\t}\n\n\tswitch (match[1]) {\n\t\tcase FileSystemProviderErrorCode.FileExists: return FileSystemProviderErrorCode.FileExists;\n\t\tcase FileSystemProviderErrorCode.FileIsADirectory: return FileSystemProviderErrorCode.FileIsADirectory;\n\t\tcase FileSystemProviderErrorCode.FileNotADirectory: return FileSystemProviderErrorCode.FileNotADirectory;\n\t\tcase FileSystemProviderErrorCode.FileNotFound: return FileSystemProviderErrorCode.FileNotFound;\n\t\tcase FileSystemProviderErrorCode.FileTooLarge: return FileSystemProviderErrorCode.FileTooLarge;\n\t\tcase FileSystemProviderErrorCode.FileWriteLocked: return FileSystemProviderErrorCode.FileWriteLocked;\n\t\tcase FileSystemProviderErrorCode.NoPermissions: return FileSystemProviderErrorCode.NoPermissions;\n\t\tcase FileSystemProviderErrorCode.Unavailable: return FileSystemProviderErrorCode.Unavailable;\n\t}\n\n\treturn FileSystemProviderErrorCode.Unknown;\n}\n\nexport function toFileOperationResult(error: Error): FileOperationResult {\n\n\t// FileSystemProviderError comes with the result already\n\tif (error instanceof FileOperationError) {\n\t\treturn error.fileOperationResult;\n\t}\n\n\t// Otherwise try to find from code\n\tswitch (toFileSystemProviderErrorCode(error)) {\n\t\tcase FileSystemProviderErrorCode.FileNotFound:\n\t\t\treturn FileOperationResult.FILE_NOT_FOUND;\n\t\tcase FileSystemProviderErrorCode.FileIsADirectory:\n\t\t\treturn FileOperationResult.FILE_IS_DIRECTORY;\n\t\tcase FileSystemProviderErrorCode.FileNotADirectory:\n\t\t\treturn FileOperationResult.FILE_NOT_DIRECTORY;\n\t\tcase FileSystemProviderErrorCode.FileWriteLocked:\n\t\t\treturn FileOperationResult.FILE_WRITE_LOCKED;\n\t\tcase FileSystemProviderErrorCode.NoPermissions:\n\t\t\treturn FileOperationResult.FILE_PERMISSION_DENIED;\n\t\tcase FileSystemProviderErrorCode.FileExists:\n\t\t\treturn FileOperationResult.FILE_MOVE_CONFLICT;\n\t\tcase FileSystemProviderErrorCode.FileTooLarge:\n\t\t\treturn FileOperationResult.FILE_TOO_LARGE;\n\t\tdefault:\n\t\t\treturn FileOperationResult.FILE_OTHER_ERROR;\n\t}\n}\n\nexport interface IFileSystemProviderRegistrationEvent {\n\treadonly added: boolean;\n\treadonly scheme: string;\n\treadonly provider?: IFileSystemProvider;\n}\n\nexport interface IFileSystemProviderCapabilitiesChangeEvent {\n\treadonly provider: IFileSystemProvider;\n\treadonly scheme: string;\n}\n\nexport interface IFileSystemProviderActivationEvent {\n\treadonly scheme: string;\n\tjoin(promise: Promise<void>): void;\n}\n\nexport const enum FileOperation {\n\tCREATE,\n\tDELETE,\n\tMOVE,\n\tCOPY,\n\tWRITE\n}\n\nexport interface IFileOperationEvent {\n\n\treadonly resource: URI;\n\treadonly operation: FileOperation;\n\n\tisOperation(operation: FileOperation.DELETE | FileOperation.WRITE): boolean;\n\tisOperation(operation: FileOperation.CREATE | FileOperation.MOVE | FileOperation.COPY): this is IFileOperationEventWithMetadata;\n}\n\nexport interface IFileOperationEventWithMetadata extends IFileOperationEvent {\n\treadonly target: IFileStatWithMetadata;\n}\n\nexport class FileOperationEvent implements IFileOperationEvent {\n\n\tconstructor(resource: URI, operation: FileOperation.DELETE | FileOperation.WRITE);\n\tconstructor(resource: URI, operation: FileOperation.CREATE | FileOperation.MOVE | FileOperation.COPY, target: IFileStatWithMetadata);\n\tconstructor(readonly resource: URI, readonly operation: FileOperation, readonly target?: IFileStatWithMetadata) { }\n\n\tisOperation(operation: FileOperation.DELETE | FileOperation.WRITE): boolean;\n\tisOperation(operation: FileOperation.CREATE | FileOperation.MOVE | FileOperation.COPY): this is IFileOperationEventWithMetadata;\n\tisOperation(operation: FileOperation): boolean {\n\t\treturn this.operation === operation;\n\t}\n}\n\n/**\n * Possible changes that can occur to a file.\n */\nexport const enum FileChangeType {\n\tUPDATED,\n\tADDED,\n\tDELETED\n}\n\n/**\n * Identifies a single change in a file.\n */\nexport interface IFileChange {\n\n\t/**\n\t * The type of change that occurred to the file.\n\t */\n\treadonly type: FileChangeType;\n\n\t/**\n\t * The unified resource identifier of the file that changed.\n\t */\n\treadonly resource: URI;\n}\n\nexport class FileChangesEvent {\n\n\tprivate readonly added: TernarySearchTree<URI, IFileChange> | undefined = undefined;\n\tprivate readonly updated: TernarySearchTree<URI, IFileChange> | undefined = undefined;\n\tprivate readonly deleted: TernarySearchTree<URI, IFileChange> | undefined = undefined;\n\n\tconstructor(changes: readonly IFileChange[], ignorePathCasing: boolean) {\n\n\t\tconst entriesByType = new Map<FileChangeType, [URI, IFileChange][]>();\n\n\t\tfor (const change of changes) {\n\t\t\tconst array = entriesByType.get(change.type);\n\t\t\tif (array) {\n\t\t\t\tarray.push([change.resource, change]);\n\t\t\t} else {\n\t\t\t\tentriesByType.set(change.type, [[change.resource, change]]);\n\t\t\t}\n\n\t\t\tswitch (change.type) {\n\t\t\t\tcase FileChangeType.ADDED:\n\t\t\t\t\tthis.rawAdded.push(change.resource);\n\t\t\t\t\tbreak;\n\t\t\t\tcase FileChangeType.UPDATED:\n\t\t\t\t\tthis.rawUpdated.push(change.resource);\n\t\t\t\t\tbreak;\n\t\t\t\tcase FileChangeType.DELETED:\n\t\t\t\t\tthis.rawDeleted.push(change.resource);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tfor (const [key, value] of entriesByType) {\n\t\t\tswitch (key) {\n\t\t\t\tcase FileChangeType.ADDED:\n\t\t\t\t\tthis.added = TernarySearchTree.forUris<IFileChange>(() => ignorePathCasing);\n\t\t\t\t\tthis.added.fill(value);\n\t\t\t\t\tbreak;\n\t\t\t\tcase FileChangeType.UPDATED:\n\t\t\t\t\tthis.updated = TernarySearchTree.forUris<IFileChange>(() => ignorePathCasing);\n\t\t\t\t\tthis.updated.fill(value);\n\t\t\t\t\tbreak;\n\t\t\t\tcase FileChangeType.DELETED:\n\t\t\t\t\tthis.deleted = TernarySearchTree.forUris<IFileChange>(() => ignorePathCasing);\n\t\t\t\t\tthis.deleted.fill(value);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Find out if the file change events match the provided resource.\n\t *\n\t * Note: when passing `FileChangeType.DELETED`, we consider a match\n\t * also when the parent of the resource got deleted.\n\t */\n\tcontains(resource: URI, ...types: FileChangeType[]): boolean {\n\t\treturn this.doContains(resource, { includeChildren: false }, ...types);\n\t}\n\n\t/**\n\t * Find out if the file change events either match the provided\n\t * resource, or contain a child of this resource.\n\t */\n\taffects(resource: URI, ...types: FileChangeType[]): boolean {\n\t\treturn this.doContains(resource, { includeChildren: true }, ...types);\n\t}\n\n\tprivate doContains(resource: URI, options: { includeChildren: boolean }, ...types: FileChangeType[]): boolean {\n\t\tif (!resource) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst hasTypesFilter = types.length > 0;\n\n\t\t// Added\n\t\tif (!hasTypesFilter || types.includes(FileChangeType.ADDED)) {\n\t\t\tif (this.added?.get(resource)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (options.includeChildren && this.added?.findSuperstr(resource)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// Updated\n\t\tif (!hasTypesFilter || types.includes(FileChangeType.UPDATED)) {\n\t\t\tif (this.updated?.get(resource)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (options.includeChildren && this.updated?.findSuperstr(resource)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// Deleted\n\t\tif (!hasTypesFilter || types.includes(FileChangeType.DELETED)) {\n\t\t\tif (this.deleted?.findSubstr(resource) /* deleted also considers parent folders */) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (options.includeChildren && this.deleted?.findSuperstr(resource)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Returns if this event contains added files.\n\t */\n\tgotAdded(): boolean {\n\t\treturn !!this.added;\n\t}\n\n\t/**\n\t * Returns if this event contains deleted files.\n\t */\n\tgotDeleted(): boolean {\n\t\treturn !!this.deleted;\n\t}\n\n\t/**\n\t * Returns if this event contains updated files.\n\t */\n\tgotUpdated(): boolean {\n\t\treturn !!this.updated;\n\t}\n\n\t/**\n\t * @deprecated use the `contains` or `affects` method to efficiently find\n\t * out if the event relates to a given resource. these methods ensure:\n\t * - that there is no expensive lookup needed (by using a `TernarySearchTree`)\n\t * - correctly handles `FileChangeType.DELETED` events\n\t */\n\treadonly rawAdded: URI[] = [];\n\n\t/**\n\t* @deprecated use the `contains` or `affects` method to efficiently find\n\t* out if the event relates to a given resource. these methods ensure:\n\t* - that there is no expensive lookup needed (by using a `TernarySearchTree`)\n\t* - correctly handles `FileChangeType.DELETED` events\n\t*/\n\treadonly rawUpdated: URI[] = [];\n\n\t/**\n\t* @deprecated use the `contains` or `affects` method to efficiently find\n\t* out if the event relates to a given resource. these methods ensure:\n\t* - that there is no expensive lookup needed (by using a `TernarySearchTree`)\n\t* - correctly handles `FileChangeType.DELETED` events\n\t*/\n\treadonly rawDeleted: URI[] = [];\n}\n\nexport function isParent(path: string, candidate: string, ignoreCase?: boolean): boolean {\n\tif (!path || !candidate || path === candidate) {\n\t\treturn false;\n\t}\n\n\tif (candidate.length > path.length) {\n\t\treturn false;\n\t}\n\n\tif (candidate.charAt(candidate.length - 1) !== sep) {\n\t\tcandidate += sep;\n\t}\n\n\tif (ignoreCase) {\n\t\treturn startsWithIgnoreCase(path, candidate);\n\t}\n\n\treturn path.indexOf(candidate) === 0;\n}\n\nexport interface IBaseFileStat {\n\n\t/**\n\t * The unified resource identifier of this file or folder.\n\t */\n\treadonly resource: URI;\n\n\t/**\n\t * The name which is the last segment\n\t * of the {{path}}.\n\t */\n\treadonly name: string;\n\n\t/**\n\t * The size of the file.\n\t *\n\t * The value may or may not be resolved as\n\t * it is optional.\n\t */\n\treadonly size?: number;\n\n\t/**\n\t * The last modification date represented as millis from unix epoch.\n\t *\n\t * The value may or may not be resolved as\n\t * it is optional.\n\t */\n\treadonly mtime?: number;\n\n\t/**\n\t * The creation date represented as millis from unix epoch.\n\t *\n\t * The value may or may not be resolved as\n\t * it is optional.\n\t */\n\treadonly ctime?: number;\n\n\t/**\n\t * A unique identifier that represents the\n\t * current state of the file or directory.\n\t *\n\t * The value may or may not be resolved as\n\t * it is optional.\n\t */\n\treadonly etag?: string;\n\n\t/**\n\t * File is readonly. Components like editors should not\n\t * offer to edit the contents.\n\t */\n\treadonly readonly?: boolean;\n\n\t/**\n\t * File is locked. Components like editors should offer\n\t * to edit the contents and ask the user upon saving to\n\t * remove the lock.\n\t */\n\treadonly locked?: boolean;\n}\n\nexport interface IBaseFileStatWithMetadata extends Required<IBaseFileStat> { }\n\n/**\n * A file resource with meta information and resolved children if any.\n */\nexport interface IFileStat extends IBaseFileStat {\n\n\t/**\n\t * The resource is a file.\n\t */\n\treadonly isFile: boolean;\n\n\t/**\n\t * The resource is a directory.\n\t */\n\treadonly isDirectory: boolean;\n\n\t/**\n\t * The resource is a symbolic link. Note: even when the\n\t * file is a symbolic link, you can test for `FileType.File`\n\t * and `FileType.Directory` to know the type of the target\n\t * the link points to.\n\t */\n\treadonly isSymbolicLink: boolean;\n\n\t/**\n\t * The children of the file stat or undefined if none.\n\t */\n\tchildren: IFileStat[] | undefined;\n}\n\nexport interface IFileStatWithMetadata extends IFileStat, IBaseFileStatWithMetadata {\n\treadonly mtime: number;\n\treadonly ctime: number;\n\treadonly etag: string;\n\treadonly size: number;\n\treadonly readonly: boolean;\n\treadonly locked: boolean;\n\treadonly children: IFileStatWithMetadata[] | undefined;\n}\n\nexport interface IFileStatResult {\n\treadonly stat?: IFileStat;\n\treadonly success: boolean;\n}\n\nexport interface IFileStatResultWithMetadata extends IFileStatResult {\n\treadonly stat?: IFileStatWithMetadata;\n}\n\nexport interface IFileStatWithPartialMetadata extends Omit<IFileStatWithMetadata, 'children'> { }\n\nexport interface IFileContent extends IBaseFileStatWithMetadata {\n\n\t/**\n\t * The content of a file as buffer.\n\t */\n\treadonly value: VSBuffer;\n}\n\nexport interface IFileStreamContent extends IBaseFileStatWithMetadata {\n\n\t/**\n\t * The content of a file as stream.\n\t */\n\treadonly value: VSBufferReadableStream;\n}\n\nexport interface IBaseReadFileOptions extends IFileReadStreamOptions {\n\n\t/**\n\t * The optional etag parameter allows to return early from resolving the resource if\n\t * the contents on disk match the etag. This prevents accumulated reading of resources\n\t * that have been read already with the same etag.\n\t * It is the task of the caller to makes sure to handle this error case from the promise.\n\t */\n\treadonly etag?: string;\n}\n\nexport interface IReadFileStreamOptions extends IBaseReadFileOptions { }\n\nexport interface IReadFileOptions extends IBaseReadFileOptions {\n\n\t/**\n\t * The optional `atomic` flag can be used to make sure\n\t * the `readFile` method is not running in parallel with\n\t * any `write` operations in the same process.\n\t *\n\t * Typically you should not need to use this flag but if\n\t * for example you are quickly reading a file right after\n\t * a file event occurred and the file changes a lot, there\n\t * is a chance that a read returns an empty or partial file\n\t * because a pending write has not finished yet.\n\t *\n\t * Note: this does not prevent the file from being written\n\t * to from a different process. If you need such atomic\n\t * operations, you better use a real database as storage.\n\t */\n\treadonly atomic?: boolean;\n}\n\nexport interface IWriteFileOptions {\n\n\t/**\n\t * The last known modification time of the file. This can be used to prevent dirty writes.\n\t */\n\treadonly mtime?: number;\n\n\t/**\n\t * The etag of the file. This can be used to prevent dirty writes.\n\t */\n\treadonly etag?: string;\n\n\t/**\n\t * Whether to attempt to unlock a file before writing.\n\t */\n\treadonly unlock?: boolean;\n\n\t/**\n\t * The optional `atomic` flag can be used to make sure\n\t * the `writeFile` method updates the target file atomically\n\t * by first writing to a temporary file in the same folder\n\t * and then renaming it over the target.\n\t */\n\treadonly atomic?: IFileAtomicOptions | false;\n}\n\nexport interface IResolveFileOptions {\n\n\t/**\n\t * Automatically continue resolving children of a directory until the provided resources\n\t * are found.\n\t */\n\treadonly resolveTo?: readonly URI[];\n\n\t/**\n\t * Automatically continue resolving children of a directory if the number of children is 1.\n\t */\n\treadonly resolveSingleChildDescendants?: boolean;\n\n\t/**\n\t * Will resolve mtime, ctime, size and etag of files if enabled. This can have a negative impact\n\t * on performance and thus should only be used when these values are required.\n\t */\n\treadonly resolveMetadata?: boolean;\n}\n\nexport interface IResolveMetadataFileOptions extends IResolveFileOptions {\n\treadonly resolveMetadata: true;\n}\n\nexport interface ICreateFileOptions {\n\n\t/**\n\t * Overwrite the file to create if it already exists on disk. Otherwise\n\t * an error will be thrown (FILE_MODIFIED_SINCE).\n\t */\n\treadonly overwrite?: boolean;\n}\n\nexport class FileOperationError extends Error {\n\tconstructor(\n\t\tmessage: string,\n\t\treadonly fileOperationResult: FileOperationResult,\n\t\treadonly options?: IReadFileOptions | IWriteFileOptions | ICreateFileOptions\n\t) {\n\t\tsuper(message);\n\t}\n}\n\nexport class TooLargeFileOperationError extends FileOperationError {\n\tconstructor(\n\t\tmessage: string,\n\t\toverride readonly fileOperationResult: FileOperationResult.FILE_TOO_LARGE,\n\t\treadonly size: number,\n\t\toptions?: IReadFileOptions\n\t) {\n\t\tsuper(message, fileOperationResult, options);\n\t}\n}\n\nexport class NotModifiedSinceFileOperationError extends FileOperationError {\n\n\tconstructor(\n\t\tmessage: string,\n\t\treadonly stat: IFileStatWithMetadata,\n\t\toptions?: IReadFileOptions\n\t) {\n\t\tsuper(message, FileOperationResult.FILE_NOT_MODIFIED_SINCE, options);\n\t}\n}\n\nexport const enum FileOperationResult {\n\tFILE_IS_DIRECTORY,\n\tFILE_NOT_FOUND,\n\tFILE_NOT_MODIFIED_SINCE,\n\tFILE_MODIFIED_SINCE,\n\tFILE_MOVE_CONFLICT,\n\tFILE_WRITE_LOCKED,\n\tFILE_PERMISSION_DENIED,\n\tFILE_TOO_LARGE,\n\tFILE_INVALID_PATH,\n\tFILE_NOT_DIRECTORY,\n\tFILE_OTHER_ERROR\n}\n\n//#endregion\n\n//#region Settings\n\nexport const AutoSaveConfiguration = {\n\tOFF: 'off',\n\tAFTER_DELAY: 'afterDelay',\n\tON_FOCUS_CHANGE: 'onFocusChange',\n\tON_WINDOW_CHANGE: 'onWindowChange'\n};\n\nexport const HotExitConfiguration = {\n\tOFF: 'off',\n\tON_EXIT: 'onExit',\n\tON_EXIT_AND_WINDOW_CLOSE: 'onExitAndWindowClose'\n};\n\nexport const FILES_ASSOCIATIONS_CONFIG = 'files.associations';\nexport const FILES_EXCLUDE_CONFIG = 'files.exclude';\nexport const FILES_READONLY_INCLUDE_CONFIG = 'files.readonlyInclude';\nexport const FILES_READONLY_EXCLUDE_CONFIG = 'files.readonlyExclude';\nexport const FILES_READONLY_FROM_PERMISSIONS_CONFIG = 'files.readonlyFromPermissions';\n\nexport interface IGlobPatterns {\n\t[filepattern: string]: boolean;\n}\n\nexport interface IFilesConfiguration {\n\tfiles: {\n\t\tassociations: { [filepattern: string]: string };\n\t\texclude: IExpression;\n\t\twatcherExclude: IGlobPatterns;\n\t\twatcherInclude: string[];\n\t\tencoding: string;\n\t\tautoGuessEncoding: boolean;\n\t\tdefaultLanguage: string;\n\t\ttrimTrailingWhitespace: boolean;\n\t\tautoSave: string;\n\t\tautoSaveDelay: number;\n\t\teol: string;\n\t\tenableTrash: boolean;\n\t\thotExit: string;\n\t\tsaveConflictResolution: 'askUser' | 'overwriteFileOnDisk';\n\t\treadonlyInclude: IGlobPatterns;\n\t\treadonlyExclude: IGlobPatterns;\n\t\treadonlyFromPermissions: boolean;\n\t};\n}\n\n//#endregion\n\n//#region Utilities\n\nexport enum FileKind {\n\tFILE,\n\tFOLDER,\n\tROOT_FOLDER\n}\n\n/**\n * A hint to disable etag checking for reading/writing.\n */\nexport const ETAG_DISABLED = '';\n\nexport function etag(stat: { mtime: number; size: number }): string;\nexport function etag(stat: { mtime: number | undefined; size: number | undefined }): string | undefined;\nexport function etag(stat: { mtime: number | undefined; size: number | undefined }): string | undefined {\n\tif (typeof stat.size !== 'number' || typeof stat.mtime !== 'number') {\n\t\treturn undefined;\n\t}\n\n\treturn stat.mtime.toString(29) + stat.size.toString(31);\n}\n\nexport async function whenProviderRegistered(file: URI, fileService: IFileService): Promise<void> {\n\tif (fileService.hasProvider(URI.from({ scheme: file.scheme }))) {\n\t\treturn;\n\t}\n\n\treturn new Promise(resolve => {\n\t\tconst disposable = fileService.onDidChangeFileSystemProviderRegistrations(e => {\n\t\t\tif (e.scheme === file.scheme && e.added) {\n\t\t\t\tdisposable.dispose();\n\t\t\t\tresolve();\n\t\t\t}\n\t\t});\n\t});\n}\n\n/**\n * Helper to format a raw byte size into a human readable label.\n */\nexport class ByteSize {\n\n\tstatic readonly KB = 1024;\n\tstatic readonly MB = ByteSize.KB * ByteSize.KB;\n\tstatic readonly GB = ByteSize.MB * ByteSize.KB;\n\tstatic readonly TB = ByteSize.GB * ByteSize.KB;\n\n\tstatic formatSize(size: number): string {\n\t\tif (!isNumber(size)) {\n\t\t\tsize = 0;\n\t\t}\n\n\t\tif (size < ByteSize.KB) {\n\t\t\treturn localize('sizeB', \"{0}B\", size.toFixed(0));\n\t\t}\n\n\t\tif (size < ByteSize.MB) {\n\t\t\treturn localize('sizeKB', \"{0}KB\", (size / ByteSize.KB).toFixed(2));\n\t\t}\n\n\t\tif (size < ByteSize.GB) {\n\t\t\treturn localize('sizeMB', \"{0}MB\", (size / ByteSize.MB).toFixed(2));\n\t\t}\n\n\t\tif (size < ByteSize.TB) {\n\t\t\treturn localize('sizeGB', \"{0}GB\", (size / ByteSize.GB).toFixed(2));\n\t\t}\n\n\t\treturn localize('sizeTB', \"{0}TB\", (size / ByteSize.TB).toFixed(2));\n\t}\n}\n\n// File limits\n\nexport function getLargeFileConfirmationLimit(remoteAuthority?: string): number;\nexport function getLargeFileConfirmationLimit(uri?: URI): number;\nexport function getLargeFileConfirmationLimit(arg?: string | URI): number {\n\tconst isRemote = typeof arg === 'string' || arg?.scheme === Schemas.vscodeRemote;\n\tconst isLocal = typeof arg !== 'string' && arg?.scheme === Schemas.file;\n\n\tif (isLocal) {\n\t\t// Local almost has no limit in file size\n\t\treturn 1024 * ByteSize.MB;\n\t}\n\n\tif (isRemote) {\n\t\t// With a remote, pick a low limit to avoid\n\t\t// potentially costly file transfers\n\t\treturn 10 * ByteSize.MB;\n\t}\n\n\tif (isWeb) {\n\t\t// Web: we cannot know for sure if a cost\n\t\t// is associated with the file transfer\n\t\t// so we pick a reasonably small limit\n\t\treturn 50 * ByteSize.MB;\n\t}\n\n\t// Local desktop: almost no limit in file size\n\treturn 1024 * ByteSize.MB;\n}\n\n//#endregion\n"]}