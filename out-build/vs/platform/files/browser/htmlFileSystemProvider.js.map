{"version":3,"sources":["vs/platform/files/browser/htmlFileSystemProvider.ts"],"names":[],"mappings":"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","file":"htmlFileSystemProvider.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { localize } from 'vs/nls';\nimport { URI } from 'vs/base/common/uri';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Event } from 'vs/base/common/event';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport { basename, extname, normalize } from 'vs/base/common/path';\nimport { isLinux } from 'vs/base/common/platform';\nimport { extUri, extUriIgnorePathCase } from 'vs/base/common/resources';\nimport { newWriteableStream, ReadableStreamEvents } from 'vs/base/common/stream';\nimport { createFileSystemProviderError, IFileDeleteOptions, IFileOverwriteOptions, IFileReadStreamOptions, FileSystemProviderCapabilities, FileSystemProviderError, FileSystemProviderErrorCode, FileType, IFileWriteOptions, IFileSystemProviderWithFileReadStreamCapability, IFileSystemProviderWithFileReadWriteCapability, IStat, IWatchOptions } from 'vs/platform/files/common/files';\nimport { WebFileSystemAccess } from 'vs/platform/files/browser/webFileSystemAccess';\nimport { IndexedDB } from 'vs/base/browser/indexedDB';\nimport { ILogService } from 'vs/platform/log/common/log';\n\nexport class HTMLFileSystemProvider implements IFileSystemProviderWithFileReadWriteCapability, IFileSystemProviderWithFileReadStreamCapability {\n\n\t//#region Events (unsupported)\n\n\treadonly onDidChangeCapabilities = Event.None;\n\treadonly onDidChangeFile = Event.None;\n\n\t//#endregion\n\n\t//#region File Capabilities\n\n\tprivate extUri = isLinux ? extUri : extUriIgnorePathCase;\n\n\tprivate _capabilities: FileSystemProviderCapabilities | undefined;\n\tget capabilities(): FileSystemProviderCapabilities {\n\t\tif (!this._capabilities) {\n\t\t\tthis._capabilities =\n\t\t\t\tFileSystemProviderCapabilities.FileReadWrite |\n\t\t\t\tFileSystemProviderCapabilities.FileReadStream;\n\n\t\t\tif (isLinux) {\n\t\t\t\tthis._capabilities |= FileSystemProviderCapabilities.PathCaseSensitive;\n\t\t\t}\n\t\t}\n\n\t\treturn this._capabilities;\n\t}\n\n\t//#endregion\n\n\n\tconstructor(\n\t\tprivate indexedDB: IndexedDB | undefined,\n\t\tprivate readonly store: string,\n\t\tprivate logService: ILogService\n\t) { }\n\n\t//#region File Metadata Resolving\n\n\tasync stat(resource: URI): Promise<IStat> {\n\t\ttry {\n\t\t\tconst handle = await this.getHandle(resource);\n\t\t\tif (!handle) {\n\t\t\t\tthrow this.createFileSystemProviderError(resource, 'No such file or directory, stat', FileSystemProviderErrorCode.FileNotFound);\n\t\t\t}\n\n\t\t\tif (WebFileSystemAccess.isFileSystemFileHandle(handle)) {\n\t\t\t\tconst file = await handle.getFile();\n\n\t\t\t\treturn {\n\t\t\t\t\ttype: FileType.File,\n\t\t\t\t\tmtime: file.lastModified,\n\t\t\t\t\tctime: 0,\n\t\t\t\t\tsize: file.size\n\t\t\t\t};\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\ttype: FileType.Directory,\n\t\t\t\tmtime: 0,\n\t\t\t\tctime: 0,\n\t\t\t\tsize: 0\n\t\t\t};\n\t\t} catch (error) {\n\t\t\tthrow this.toFileSystemProviderError(error);\n\t\t}\n\t}\n\n\tasync readdir(resource: URI): Promise<[string, FileType][]> {\n\t\ttry {\n\t\t\tconst handle = await this.getDirectoryHandle(resource);\n\t\t\tif (!handle) {\n\t\t\t\tthrow this.createFileSystemProviderError(resource, 'No such file or directory, readdir', FileSystemProviderErrorCode.FileNotFound);\n\t\t\t}\n\n\t\t\tconst result: [string, FileType][] = [];\n\n\t\t\tfor await (const [name, child] of handle) {\n\t\t\t\tresult.push([name, WebFileSystemAccess.isFileSystemFileHandle(child) ? FileType.File : FileType.Directory]);\n\t\t\t}\n\n\t\t\treturn result;\n\t\t} catch (error) {\n\t\t\tthrow this.toFileSystemProviderError(error);\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region File Reading/Writing\n\n\treadFileStream(resource: URI, opts: IFileReadStreamOptions, token: CancellationToken): ReadableStreamEvents<Uint8Array> {\n\t\tconst stream = newWriteableStream<Uint8Array>(data => VSBuffer.concat(data.map(data => VSBuffer.wrap(data))).buffer, {\n\t\t\t// Set a highWaterMark to prevent the stream\n\t\t\t// for file upload to produce large buffers\n\t\t\t// in-memory\n\t\t\thighWaterMark: 10\n\t\t});\n\n\t\t(async () => {\n\t\t\ttry {\n\t\t\t\tconst handle = await this.getFileHandle(resource);\n\t\t\t\tif (!handle) {\n\t\t\t\t\tthrow this.createFileSystemProviderError(resource, 'No such file or directory, readFile', FileSystemProviderErrorCode.FileNotFound);\n\t\t\t\t}\n\n\t\t\t\tconst file = await handle.getFile();\n\n\t\t\t\t// Partial file: implemented simply via `readFile`\n\t\t\t\tif (typeof opts.length === 'number' || typeof opts.position === 'number') {\n\t\t\t\t\tlet buffer = new Uint8Array(await file.arrayBuffer());\n\n\t\t\t\t\tif (typeof opts?.position === 'number') {\n\t\t\t\t\t\tbuffer = buffer.slice(opts.position);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (typeof opts?.length === 'number') {\n\t\t\t\t\t\tbuffer = buffer.slice(0, opts.length);\n\t\t\t\t\t}\n\n\t\t\t\t\tstream.end(buffer);\n\t\t\t\t}\n\n\t\t\t\t// Entire file\n\t\t\t\telse {\n\t\t\t\t\tconst reader: ReadableStreamDefaultReader<Uint8Array> = file.stream().getReader();\n\n\t\t\t\t\tlet res = await reader.read();\n\t\t\t\t\twhile (!res.done) {\n\t\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Write buffer into stream but make sure to wait\n\t\t\t\t\t\t// in case the `highWaterMark` is reached\n\t\t\t\t\t\tawait stream.write(res.value);\n\n\t\t\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tres = await reader.read();\n\t\t\t\t\t}\n\t\t\t\t\tstream.end(undefined);\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tstream.error(this.toFileSystemProviderError(error));\n\t\t\t\tstream.end();\n\t\t\t}\n\t\t})();\n\n\t\treturn stream;\n\t}\n\n\tasync readFile(resource: URI): Promise<Uint8Array> {\n\t\ttry {\n\t\t\tconst handle = await this.getFileHandle(resource);\n\t\t\tif (!handle) {\n\t\t\t\tthrow this.createFileSystemProviderError(resource, 'No such file or directory, readFile', FileSystemProviderErrorCode.FileNotFound);\n\t\t\t}\n\n\t\t\tconst file = await handle.getFile();\n\n\t\t\treturn new Uint8Array(await file.arrayBuffer());\n\t\t} catch (error) {\n\t\t\tthrow this.toFileSystemProviderError(error);\n\t\t}\n\t}\n\n\tasync writeFile(resource: URI, content: Uint8Array, opts: IFileWriteOptions): Promise<void> {\n\t\ttry {\n\t\t\tlet handle = await this.getFileHandle(resource);\n\n\t\t\t// Validate target unless { create: true, overwrite: true }\n\t\t\tif (!opts.create || !opts.overwrite) {\n\t\t\t\tif (handle) {\n\t\t\t\t\tif (!opts.overwrite) {\n\t\t\t\t\t\tthrow this.createFileSystemProviderError(resource, 'File already exists, writeFile', FileSystemProviderErrorCode.FileExists);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (!opts.create) {\n\t\t\t\t\t\tthrow this.createFileSystemProviderError(resource, 'No such file, writeFile', FileSystemProviderErrorCode.FileNotFound);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Create target as needed\n\t\t\tif (!handle) {\n\t\t\t\tconst parent = await this.getDirectoryHandle(this.extUri.dirname(resource));\n\t\t\t\tif (!parent) {\n\t\t\t\t\tthrow this.createFileSystemProviderError(resource, 'No such parent directory, writeFile', FileSystemProviderErrorCode.FileNotFound);\n\t\t\t\t}\n\n\t\t\t\thandle = await parent.getFileHandle(this.extUri.basename(resource), { create: true });\n\t\t\t\tif (!handle) {\n\t\t\t\t\tthrow this.createFileSystemProviderError(resource, 'Unable to create file , writeFile', FileSystemProviderErrorCode.Unknown);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Write to target overwriting any existing contents\n\t\t\tconst writable = await handle.createWritable();\n\t\t\tawait writable.write(content);\n\t\t\tawait writable.close();\n\t\t} catch (error) {\n\t\t\tthrow this.toFileSystemProviderError(error);\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region Move/Copy/Delete/Create Folder\n\n\tasync mkdir(resource: URI): Promise<void> {\n\t\ttry {\n\t\t\tconst parent = await this.getDirectoryHandle(this.extUri.dirname(resource));\n\t\t\tif (!parent) {\n\t\t\t\tthrow this.createFileSystemProviderError(resource, 'No such parent directory, mkdir', FileSystemProviderErrorCode.FileNotFound);\n\t\t\t}\n\n\t\t\tawait parent.getDirectoryHandle(this.extUri.basename(resource), { create: true });\n\t\t} catch (error) {\n\t\t\tthrow this.toFileSystemProviderError(error);\n\t\t}\n\t}\n\n\tasync delete(resource: URI, opts: IFileDeleteOptions): Promise<void> {\n\t\ttry {\n\t\t\tconst parent = await this.getDirectoryHandle(this.extUri.dirname(resource));\n\t\t\tif (!parent) {\n\t\t\t\tthrow this.createFileSystemProviderError(resource, 'No such parent directory, delete', FileSystemProviderErrorCode.FileNotFound);\n\t\t\t}\n\n\t\t\treturn parent.removeEntry(this.extUri.basename(resource), { recursive: opts.recursive });\n\t\t} catch (error) {\n\t\t\tthrow this.toFileSystemProviderError(error);\n\t\t}\n\t}\n\n\tasync rename(from: URI, to: URI, opts: IFileOverwriteOptions): Promise<void> {\n\t\ttry {\n\t\t\tif (this.extUri.isEqual(from, to)) {\n\t\t\t\treturn; // no-op if the paths are the same\n\t\t\t}\n\n\t\t\t// Implement file rename by write + delete\n\t\t\tconst fileHandle = await this.getFileHandle(from);\n\t\t\tif (fileHandle) {\n\t\t\t\tconst file = await fileHandle.getFile();\n\t\t\t\tconst contents = new Uint8Array(await file.arrayBuffer());\n\n\t\t\t\tawait this.writeFile(to, contents, { create: true, overwrite: opts.overwrite, unlock: false, atomic: false });\n\t\t\t\tawait this.delete(from, { recursive: false, useTrash: false, atomic: false });\n\t\t\t}\n\n\t\t\t// File API does not support any real rename otherwise\n\t\t\telse {\n\t\t\t\tthrow this.createFileSystemProviderError(from, localize('fileSystemRenameError', \"Rename is only supported for files.\"), FileSystemProviderErrorCode.Unavailable);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthrow this.toFileSystemProviderError(error);\n\t\t}\n\t}\n\n\t//#endregion\n\n\t//#region File Watching (unsupported)\n\n\twatch(resource: URI, opts: IWatchOptions): IDisposable {\n\t\treturn Disposable.None;\n\t}\n\n\t//#endregion\n\n\t//#region File/Directoy Handle Registry\n\n\tprivate readonly _files = new Map<string, FileSystemFileHandle>();\n\tprivate readonly _directories = new Map<string, FileSystemDirectoryHandle>();\n\n\tregisterFileHandle(handle: FileSystemFileHandle): Promise<URI> {\n\t\treturn this.registerHandle(handle, this._files);\n\t}\n\n\tregisterDirectoryHandle(handle: FileSystemDirectoryHandle): Promise<URI> {\n\t\treturn this.registerHandle(handle, this._directories);\n\t}\n\n\tget directories(): Iterable<FileSystemDirectoryHandle> {\n\t\treturn this._directories.values();\n\t}\n\n\tprivate async registerHandle(handle: FileSystemHandle, map: Map<string, FileSystemHandle>): Promise<URI> {\n\t\tlet handleId = `/${handle.name}`;\n\n\t\t// Compute a valid handle ID in case this exists already\n\t\tif (map.has(handleId) && !await map.get(handleId)?.isSameEntry(handle)) {\n\t\t\tconst fileExt = extname(handle.name);\n\t\t\tconst fileName = basename(handle.name, fileExt);\n\n\t\t\tlet handleIdCounter = 1;\n\t\t\tdo {\n\t\t\t\thandleId = `/${fileName}-${handleIdCounter++}${fileExt}`;\n\t\t\t} while (map.has(handleId) && !await map.get(handleId)?.isSameEntry(handle));\n\t\t}\n\n\t\tmap.set(handleId, handle);\n\n\t\t// Remember in IndexDB for future lookup\n\t\ttry {\n\t\t\tawait this.indexedDB?.runInTransaction(this.store, 'readwrite', objectStore => objectStore.put(handle, handleId));\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\n\t\treturn URI.from({ scheme: Schemas.file, path: handleId });\n\t}\n\n\tasync getHandle(resource: URI): Promise<FileSystemHandle | undefined> {\n\n\t\t// First: try to find a well known handle first\n\t\tlet handle = await this.doGetHandle(resource);\n\n\t\t// Second: walk up parent directories and resolve handle if possible\n\t\tif (!handle) {\n\t\t\tconst parent = await this.getDirectoryHandle(this.extUri.dirname(resource));\n\t\t\tif (parent) {\n\t\t\t\tconst name = extUri.basename(resource);\n\t\t\t\ttry {\n\t\t\t\t\thandle = await parent.getFileHandle(name);\n\t\t\t\t} catch (error) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\thandle = await parent.getDirectoryHandle(name);\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\t// Ignore\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn handle;\n\t}\n\n\tprivate async getFileHandle(resource: URI): Promise<FileSystemFileHandle | undefined> {\n\t\tconst handle = await this.doGetHandle(resource);\n\t\tif (handle instanceof FileSystemFileHandle) {\n\t\t\treturn handle;\n\t\t}\n\n\t\tconst parent = await this.getDirectoryHandle(this.extUri.dirname(resource));\n\n\t\ttry {\n\t\t\treturn await parent?.getFileHandle(extUri.basename(resource));\n\t\t} catch (error) {\n\t\t\treturn undefined; // guard against possible DOMException\n\t\t}\n\t}\n\n\tprivate async getDirectoryHandle(resource: URI): Promise<FileSystemDirectoryHandle | undefined> {\n\t\tconst handle = await this.doGetHandle(resource);\n\t\tif (handle instanceof FileSystemDirectoryHandle) {\n\t\t\treturn handle;\n\t\t}\n\n\t\tconst parentUri = this.extUri.dirname(resource);\n\t\tif (this.extUri.isEqual(parentUri, resource)) {\n\t\t\treturn undefined; // return when root is reached to prevent infinite recursion\n\t\t}\n\n\t\tconst parent = await this.getDirectoryHandle(parentUri);\n\n\t\ttry {\n\t\t\treturn await parent?.getDirectoryHandle(extUri.basename(resource));\n\t\t} catch (error) {\n\t\t\treturn undefined; // guard against possible DOMException\n\t\t}\n\t}\n\n\tprivate async doGetHandle(resource: URI): Promise<FileSystemHandle | undefined> {\n\n\t\t// We store file system handles with the `handle.name`\n\t\t// and as such require the resource to be on the root\n\t\tif (this.extUri.dirname(resource).path !== '/') {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst handleId = resource.path.replace(/\\/$/, ''); // remove potential slash from the end of the path\n\n\t\t// First: check if we have a known handle stored in memory\n\t\tconst inMemoryHandle = this._files.get(handleId) ?? this._directories.get(handleId);\n\t\tif (inMemoryHandle) {\n\t\t\treturn inMemoryHandle;\n\t\t}\n\n\t\t// Second: check if we have a persisted handle in IndexedDB\n\t\tconst persistedHandle = await this.indexedDB?.runInTransaction(this.store, 'readonly', store => store.get(handleId));\n\t\tif (WebFileSystemAccess.isFileSystemHandle(persistedHandle)) {\n\t\t\tlet hasPermissions = await persistedHandle.queryPermission() === 'granted';\n\t\t\ttry {\n\t\t\t\tif (!hasPermissions) {\n\t\t\t\t\thasPermissions = await persistedHandle.requestPermission() === 'granted';\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(error); // this can fail with a DOMException\n\t\t\t}\n\n\t\t\tif (hasPermissions) {\n\t\t\t\tif (WebFileSystemAccess.isFileSystemFileHandle(persistedHandle)) {\n\t\t\t\t\tthis._files.set(handleId, persistedHandle);\n\t\t\t\t} else if (WebFileSystemAccess.isFileSystemDirectoryHandle(persistedHandle)) {\n\t\t\t\t\tthis._directories.set(handleId, persistedHandle);\n\t\t\t\t}\n\n\t\t\t\treturn persistedHandle;\n\t\t\t}\n\t\t}\n\n\t\t// Third: fail with an error\n\t\tthrow this.createFileSystemProviderError(resource, 'No file system handle registered', FileSystemProviderErrorCode.Unavailable);\n\t}\n\n\t//#endregion\n\n\tprivate toFileSystemProviderError(error: Error): FileSystemProviderError {\n\t\tif (error instanceof FileSystemProviderError) {\n\t\t\treturn error; // avoid double conversion\n\t\t}\n\n\t\tlet code = FileSystemProviderErrorCode.Unknown;\n\t\tif (error.name === 'NotAllowedError') {\n\t\t\terror = new Error(localize('fileSystemNotAllowedError', \"Insufficient permissions. Please retry and allow the operation.\"));\n\t\t\tcode = FileSystemProviderErrorCode.Unavailable;\n\t\t}\n\n\t\treturn createFileSystemProviderError(error, code);\n\t}\n\n\tprivate createFileSystemProviderError(resource: URI, msg: string, code: FileSystemProviderErrorCode): FileSystemProviderError {\n\t\treturn createFileSystemProviderError(new Error(`${msg} (${normalize(resource.path)})`), code);\n\t}\n}\n"]}