{"version":3,"sources":["vs/platform/files/browser/indexedDBFileSystemProvider.ts"],"names":[],"mappings":"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","file":"indexedDBFileSystemProvider.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Throttler } from 'vs/base/common/async';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { ExtUri } from 'vs/base/common/resources';\nimport { isString } from 'vs/base/common/types';\nimport { URI, UriDto } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { createFileSystemProviderError, FileChangeType, IFileDeleteOptions, IFileOverwriteOptions, FileSystemProviderCapabilities, FileSystemProviderError, FileSystemProviderErrorCode, FileType, IFileWriteOptions, IFileChange, IFileSystemProviderWithFileReadWriteCapability, IStat, IWatchOptions } from 'vs/platform/files/common/files';\nimport { DBClosedError, IndexedDB } from 'vs/base/browser/indexedDB';\nimport { BroadcastDataChannel } from 'vs/base/browser/broadcast';\n\nexport type IndexedDBFileSystemProviderErrorDataClassification = {\n\towner: 'sandy081';\n\tcomment: 'Information about errors that occur in the IndexedDB file system provider';\n\treadonly scheme: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'IndexedDB file system provider scheme for which this error occurred' };\n\treadonly operation: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'operation during which this error occurred' };\n\treadonly code: { classification: 'SystemMetaData'; purpose: 'PerformanceAndHealth'; comment: 'error code' };\n};\n\nexport type IndexedDBFileSystemProviderErrorData = {\n\treadonly scheme: string;\n\treadonly operation: string;\n\treadonly code: string;\n};\n\n// Standard FS Errors (expected to be thrown in production when invalid FS operations are requested)\nconst ERR_FILE_NOT_FOUND = createFileSystemProviderError(localize('fileNotExists', \"File does not exist\"), FileSystemProviderErrorCode.FileNotFound);\nconst ERR_FILE_IS_DIR = createFileSystemProviderError(localize('fileIsDirectory', \"File is Directory\"), FileSystemProviderErrorCode.FileIsADirectory);\nconst ERR_FILE_NOT_DIR = createFileSystemProviderError(localize('fileNotDirectory', \"File is not a directory\"), FileSystemProviderErrorCode.FileNotADirectory);\nconst ERR_DIR_NOT_EMPTY = createFileSystemProviderError(localize('dirIsNotEmpty', \"Directory is not empty\"), FileSystemProviderErrorCode.Unknown);\nconst ERR_FILE_EXCEEDS_STORAGE_QUOTA = createFileSystemProviderError(localize('fileExceedsStorageQuota', \"File exceeds available storage quota\"), FileSystemProviderErrorCode.FileExceedsStorageQuota);\n\n// Arbitrary Internal Errors\nconst ERR_UNKNOWN_INTERNAL = (message: string) => createFileSystemProviderError(localize('internal', \"Internal error occurred in IndexedDB File System Provider. ({0})\", message), FileSystemProviderErrorCode.Unknown);\n\ntype DirEntry = [string, FileType];\n\ntype IndexedDBFileSystemEntry =\n\t| {\n\t\tpath: string;\n\t\ttype: FileType.Directory;\n\t\tchildren: Map<string, IndexedDBFileSystemNode>;\n\t}\n\t| {\n\t\tpath: string;\n\t\ttype: FileType.File;\n\t\tsize: number | undefined;\n\t};\n\nclass IndexedDBFileSystemNode {\n\tpublic type: FileType;\n\n\tconstructor(private entry: IndexedDBFileSystemEntry) {\n\t\tthis.type = entry.type;\n\t}\n\n\tread(path: string): IndexedDBFileSystemEntry | undefined {\n\t\treturn this.doRead(path.split('/').filter(p => p.length));\n\t}\n\n\tprivate doRead(pathParts: string[]): IndexedDBFileSystemEntry | undefined {\n\t\tif (pathParts.length === 0) { return this.entry; }\n\t\tif (this.entry.type !== FileType.Directory) {\n\t\t\tthrow ERR_UNKNOWN_INTERNAL('Internal error reading from IndexedDBFSNode -- expected directory at ' + this.entry.path);\n\t\t}\n\t\tconst next = this.entry.children.get(pathParts[0]);\n\n\t\tif (!next) { return undefined; }\n\t\treturn next.doRead(pathParts.slice(1));\n\t}\n\n\tdelete(path: string): void {\n\t\tconst toDelete = path.split('/').filter(p => p.length);\n\t\tif (toDelete.length === 0) {\n\t\t\tif (this.entry.type !== FileType.Directory) {\n\t\t\t\tthrow ERR_UNKNOWN_INTERNAL(`Internal error deleting from IndexedDBFSNode. Expected root entry to be directory`);\n\t\t\t}\n\t\t\tthis.entry.children.clear();\n\t\t} else {\n\t\t\treturn this.doDelete(toDelete, path);\n\t\t}\n\t}\n\n\tprivate doDelete(pathParts: string[], originalPath: string): void {\n\t\tif (pathParts.length === 0) {\n\t\t\tthrow ERR_UNKNOWN_INTERNAL(`Internal error deleting from IndexedDBFSNode -- got no deletion path parts (encountered while deleting ${originalPath})`);\n\t\t}\n\t\telse if (this.entry.type !== FileType.Directory) {\n\t\t\tthrow ERR_UNKNOWN_INTERNAL('Internal error deleting from IndexedDBFSNode -- expected directory at ' + this.entry.path);\n\t\t}\n\t\telse if (pathParts.length === 1) {\n\t\t\tthis.entry.children.delete(pathParts[0]);\n\t\t}\n\t\telse {\n\t\t\tconst next = this.entry.children.get(pathParts[0]);\n\t\t\tif (!next) {\n\t\t\t\tthrow ERR_UNKNOWN_INTERNAL('Internal error deleting from IndexedDBFSNode -- expected entry at ' + this.entry.path + '/' + next);\n\t\t\t}\n\t\t\tnext.doDelete(pathParts.slice(1), originalPath);\n\t\t}\n\t}\n\n\tadd(path: string, entry: { type: 'file'; size?: number } | { type: 'dir' }) {\n\t\tthis.doAdd(path.split('/').filter(p => p.length), entry, path);\n\t}\n\n\tprivate doAdd(pathParts: string[], entry: { type: 'file'; size?: number } | { type: 'dir' }, originalPath: string) {\n\t\tif (pathParts.length === 0) {\n\t\t\tthrow ERR_UNKNOWN_INTERNAL(`Internal error creating IndexedDBFSNode -- adding empty path (encountered while adding ${originalPath})`);\n\t\t}\n\t\telse if (this.entry.type !== FileType.Directory) {\n\t\t\tthrow ERR_UNKNOWN_INTERNAL(`Internal error creating IndexedDBFSNode -- parent is not a directory (encountered while adding ${originalPath})`);\n\t\t}\n\t\telse if (pathParts.length === 1) {\n\t\t\tconst next = pathParts[0];\n\t\t\tconst existing = this.entry.children.get(next);\n\t\t\tif (entry.type === 'dir') {\n\t\t\t\tif (existing?.entry.type === FileType.File) {\n\t\t\t\t\tthrow ERR_UNKNOWN_INTERNAL(`Internal error creating IndexedDBFSNode -- overwriting file with directory: ${this.entry.path}/${next} (encountered while adding ${originalPath})`);\n\t\t\t\t}\n\t\t\t\tthis.entry.children.set(next, existing ?? new IndexedDBFileSystemNode({\n\t\t\t\t\ttype: FileType.Directory,\n\t\t\t\t\tpath: this.entry.path + '/' + next,\n\t\t\t\t\tchildren: new Map(),\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\tif (existing?.entry.type === FileType.Directory) {\n\t\t\t\t\tthrow ERR_UNKNOWN_INTERNAL(`Internal error creating IndexedDBFSNode -- overwriting directory with file: ${this.entry.path}/${next} (encountered while adding ${originalPath})`);\n\t\t\t\t}\n\t\t\t\tthis.entry.children.set(next, new IndexedDBFileSystemNode({\n\t\t\t\t\ttype: FileType.File,\n\t\t\t\t\tpath: this.entry.path + '/' + next,\n\t\t\t\t\tsize: entry.size,\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\t\telse if (pathParts.length > 1) {\n\t\t\tconst next = pathParts[0];\n\t\t\tlet childNode = this.entry.children.get(next);\n\t\t\tif (!childNode) {\n\t\t\t\tchildNode = new IndexedDBFileSystemNode({\n\t\t\t\t\tchildren: new Map(),\n\t\t\t\t\tpath: this.entry.path + '/' + next,\n\t\t\t\t\ttype: FileType.Directory\n\t\t\t\t});\n\t\t\t\tthis.entry.children.set(next, childNode);\n\t\t\t}\n\t\t\telse if (childNode.type === FileType.File) {\n\t\t\t\tthrow ERR_UNKNOWN_INTERNAL(`Internal error creating IndexedDBFSNode -- overwriting file entry with directory: ${this.entry.path}/${next} (encountered while adding ${originalPath})`);\n\t\t\t}\n\t\t\tchildNode.doAdd(pathParts.slice(1), entry, originalPath);\n\t\t}\n\t}\n\n\tprint(indentation = '') {\n\t\tconsole.log(indentation + this.entry.path);\n\t\tif (this.entry.type === FileType.Directory) {\n\t\t\tthis.entry.children.forEach(child => child.print(indentation + ' '));\n\t\t}\n\t}\n}\n\nexport class IndexedDBFileSystemProvider extends Disposable implements IFileSystemProviderWithFileReadWriteCapability {\n\n\treadonly capabilities: FileSystemProviderCapabilities =\n\t\tFileSystemProviderCapabilities.FileReadWrite\n\t\t| FileSystemProviderCapabilities.PathCaseSensitive;\n\treadonly onDidChangeCapabilities: Event<void> = Event.None;\n\n\tprivate readonly extUri = new ExtUri(() => false) /* Case Sensitive */;\n\n\tprivate readonly changesBroadcastChannel: BroadcastDataChannel<UriDto<IFileChange>[]> | undefined;\n\tprivate readonly _onDidChangeFile = this._register(new Emitter<readonly IFileChange[]>());\n\treadonly onDidChangeFile: Event<readonly IFileChange[]> = this._onDidChangeFile.event;\n\n\tprivate readonly _onReportError = this._register(new Emitter<IndexedDBFileSystemProviderErrorData>());\n\treadonly onReportError = this._onReportError.event;\n\n\tprivate readonly mtimes = new Map<string, number>();\n\n\tprivate cachedFiletree: Promise<IndexedDBFileSystemNode> | undefined;\n\tprivate writeManyThrottler: Throttler;\n\n\tconstructor(readonly scheme: string, private indexedDB: IndexedDB, private readonly store: string, watchCrossWindowChanges: boolean) {\n\t\tsuper();\n\t\tthis.writeManyThrottler = new Throttler();\n\n\t\tif (watchCrossWindowChanges) {\n\t\t\tthis.changesBroadcastChannel = this._register(new BroadcastDataChannel<UriDto<IFileChange>[]>(`vscode.indexedDB.${scheme}.changes`));\n\t\t\tthis._register(this.changesBroadcastChannel.onDidReceiveData(changes => {\n\t\t\t\tthis._onDidChangeFile.fire(changes.map(c => ({ type: c.type, resource: URI.revive(c.resource) })));\n\t\t\t}));\n\t\t}\n\t}\n\n\twatch(resource: URI, opts: IWatchOptions): IDisposable {\n\t\treturn Disposable.None;\n\t}\n\n\tasync mkdir(resource: URI): Promise<void> {\n\t\ttry {\n\t\t\tconst resourceStat = await this.stat(resource);\n\t\t\tif (resourceStat.type === FileType.File) {\n\t\t\t\tthrow ERR_FILE_NOT_DIR;\n\t\t\t}\n\t\t} catch (error) { /* Ignore */ }\n\t\t(await this.getFiletree()).add(resource.path, { type: 'dir' });\n\t}\n\n\tasync stat(resource: URI): Promise<IStat> {\n\t\tconst entry = (await this.getFiletree()).read(resource.path);\n\n\t\tif (entry?.type === FileType.File) {\n\t\t\treturn {\n\t\t\t\ttype: FileType.File,\n\t\t\t\tctime: 0,\n\t\t\t\tmtime: this.mtimes.get(resource.toString()) || 0,\n\t\t\t\tsize: entry.size ?? (await this.readFile(resource)).byteLength\n\t\t\t};\n\t\t}\n\n\t\tif (entry?.type === FileType.Directory) {\n\t\t\treturn {\n\t\t\t\ttype: FileType.Directory,\n\t\t\t\tctime: 0,\n\t\t\t\tmtime: 0,\n\t\t\t\tsize: 0\n\t\t\t};\n\t\t}\n\n\t\tthrow ERR_FILE_NOT_FOUND;\n\t}\n\n\tasync readdir(resource: URI): Promise<DirEntry[]> {\n\t\ttry {\n\t\t\tconst entry = (await this.getFiletree()).read(resource.path);\n\t\t\tif (!entry) {\n\t\t\t\t// Dirs aren't saved to disk, so empty dirs will be lost on reload.\n\t\t\t\t// Thus we have two options for what happens when you try to read a dir and nothing is found:\n\t\t\t\t// - Throw FileSystemProviderErrorCode.FileNotFound\n\t\t\t\t// - Return []\n\t\t\t\t// We choose to return [] as creating a dir then reading it (even after reload) should not throw an error.\n\t\t\t\treturn [];\n\t\t\t}\n\t\t\tif (entry.type !== FileType.Directory) {\n\t\t\t\tthrow ERR_FILE_NOT_DIR;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn [...entry.children.entries()].map(([name, node]) => [name, node.type]);\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.reportError('readDir', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync readFile(resource: URI): Promise<Uint8Array> {\n\t\ttry {\n\t\t\tconst result = await this.indexedDB.runInTransaction(this.store, 'readonly', objectStore => objectStore.get(resource.path));\n\t\t\tif (result === undefined) {\n\t\t\t\tthrow ERR_FILE_NOT_FOUND;\n\t\t\t}\n\t\t\tconst buffer = result instanceof Uint8Array ? result : isString(result) ? VSBuffer.fromString(result).buffer : undefined;\n\t\t\tif (buffer === undefined) {\n\t\t\t\tthrow ERR_UNKNOWN_INTERNAL(`IndexedDB entry at \"${resource.path}\" in unexpected format`);\n\t\t\t}\n\n\t\t\t// update cache\n\t\t\tconst fileTree = await this.getFiletree();\n\t\t\tfileTree.add(resource.path, { type: 'file', size: buffer.byteLength });\n\n\t\t\treturn buffer;\n\t\t} catch (error) {\n\t\t\tthis.reportError('readFile', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync writeFile(resource: URI, content: Uint8Array, opts: IFileWriteOptions): Promise<void> {\n\t\ttry {\n\t\t\tconst existing = await this.stat(resource).catch(() => undefined);\n\t\t\tif (existing?.type === FileType.Directory) {\n\t\t\t\tthrow ERR_FILE_IS_DIR;\n\t\t\t}\n\t\t\tawait this.bulkWrite([[resource, content]]);\n\t\t} catch (error) {\n\t\t\tthis.reportError('writeFile', error);\n\t\t\tthrow error;\n\t\t}\n\t}\n\n\tasync rename(from: URI, to: URI, opts: IFileOverwriteOptions): Promise<void> {\n\t\tconst fileTree = await this.getFiletree();\n\t\tconst fromEntry = fileTree.read(from.path);\n\t\tif (!fromEntry) {\n\t\t\tthrow ERR_FILE_NOT_FOUND;\n\t\t}\n\n\t\tconst toEntry = fileTree.read(to.path);\n\t\tif (toEntry) {\n\t\t\tif (!opts.overwrite) {\n\t\t\t\tthrow createFileSystemProviderError('file exists already', FileSystemProviderErrorCode.FileExists);\n\t\t\t}\n\t\t\tif (toEntry.type !== fromEntry.type) {\n\t\t\t\tthrow createFileSystemProviderError('Cannot rename files with different types', FileSystemProviderErrorCode.Unknown);\n\t\t\t}\n\t\t\t// delete the target file if exists\n\t\t\tawait this.delete(to, { recursive: true, useTrash: false, atomic: false });\n\t\t}\n\n\t\tconst toTargetResource = (path: string): URI => this.extUri.joinPath(to, this.extUri.relativePath(from, from.with({ path })) || '');\n\n\t\tconst sourceEntries = await this.tree(from);\n\t\tconst sourceFiles: DirEntry[] = [];\n\t\tfor (const sourceEntry of sourceEntries) {\n\t\t\tif (sourceEntry[1] === FileType.File) {\n\t\t\t\tsourceFiles.push(sourceEntry);\n\t\t\t} else if (sourceEntry[1] === FileType.Directory) {\n\t\t\t\t// add directories to the tree\n\t\t\t\tfileTree.add(toTargetResource(sourceEntry[0]).path, { type: 'dir' });\n\t\t\t}\n\t\t}\n\n\t\tif (sourceFiles.length) {\n\t\t\tconst targetFiles: [URI, Uint8Array][] = [];\n\t\t\tconst sourceFilesContents = await this.indexedDB.runInTransaction(this.store, 'readonly', objectStore => sourceFiles.map(([path]) => objectStore.get(path)));\n\t\t\tfor (let index = 0; index < sourceFiles.length; index++) {\n\t\t\t\tconst content = sourceFilesContents[index] instanceof Uint8Array ? sourceFilesContents[index] : isString(sourceFilesContents[index]) ? VSBuffer.fromString(sourceFilesContents[index]).buffer : undefined;\n\t\t\t\tif (content) {\n\t\t\t\t\ttargetFiles.push([toTargetResource(sourceFiles[index][0]), content]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tawait this.bulkWrite(targetFiles);\n\t\t}\n\n\t\tawait this.delete(from, { recursive: true, useTrash: false, atomic: false });\n\t}\n\n\tasync delete(resource: URI, opts: IFileDeleteOptions): Promise<void> {\n\t\tlet stat: IStat;\n\t\ttry {\n\t\t\tstat = await this.stat(resource);\n\t\t} catch (e) {\n\t\t\tif (e.code === FileSystemProviderErrorCode.FileNotFound) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthrow e;\n\t\t}\n\n\t\tlet toDelete: string[];\n\t\tif (opts.recursive) {\n\t\t\tconst tree = await this.tree(resource);\n\t\t\ttoDelete = tree.map(([path]) => path);\n\t\t} else {\n\t\t\tif (stat.type === FileType.Directory && (await this.readdir(resource)).length) {\n\t\t\t\tthrow ERR_DIR_NOT_EMPTY;\n\t\t\t}\n\t\t\ttoDelete = [resource.path];\n\t\t}\n\t\tawait this.deleteKeys(toDelete);\n\t\t(await this.getFiletree()).delete(resource.path);\n\t\ttoDelete.forEach(key => this.mtimes.delete(key));\n\t\tthis.triggerChanges(toDelete.map(path => ({ resource: resource.with({ path }), type: FileChangeType.DELETED })));\n\t}\n\n\tprivate async tree(resource: URI): Promise<DirEntry[]> {\n\t\tconst stat = await this.stat(resource);\n\t\tconst allEntries: DirEntry[] = [[resource.path, stat.type]];\n\t\tif (stat.type === FileType.Directory) {\n\t\t\tconst dirEntries = await this.readdir(resource);\n\t\t\tfor (const [key, type] of dirEntries) {\n\t\t\t\tconst childResource = this.extUri.joinPath(resource, key);\n\t\t\t\tallEntries.push([childResource.path, type]);\n\t\t\t\tif (type === FileType.Directory) {\n\t\t\t\t\tconst childEntries = await this.tree(childResource);\n\t\t\t\t\tallEntries.push(...childEntries);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn allEntries;\n\t}\n\n\tprivate triggerChanges(changes: IFileChange[]): void {\n\t\tif (changes.length) {\n\t\t\tthis._onDidChangeFile.fire(changes);\n\n\t\t\tthis.changesBroadcastChannel?.postData(changes);\n\t\t}\n\t}\n\n\tprivate getFiletree(): Promise<IndexedDBFileSystemNode> {\n\t\tif (!this.cachedFiletree) {\n\t\t\tthis.cachedFiletree = (async () => {\n\t\t\t\tconst rootNode = new IndexedDBFileSystemNode({\n\t\t\t\t\tchildren: new Map(),\n\t\t\t\t\tpath: '',\n\t\t\t\t\ttype: FileType.Directory\n\t\t\t\t});\n\t\t\t\tconst result = await this.indexedDB.runInTransaction(this.store, 'readonly', objectStore => objectStore.getAllKeys());\n\t\t\t\tconst keys = result.map(key => key.toString());\n\t\t\t\tkeys.forEach(key => rootNode.add(key, { type: 'file' }));\n\t\t\t\treturn rootNode;\n\t\t\t})();\n\t\t}\n\t\treturn this.cachedFiletree;\n\t}\n\n\tprivate async bulkWrite(files: [URI, Uint8Array][]): Promise<void> {\n\t\tfiles.forEach(([resource, content]) => this.fileWriteBatch.push({ content, resource }));\n\t\tawait this.writeManyThrottler.queue(() => this.writeMany());\n\n\t\tconst fileTree = await this.getFiletree();\n\t\tfor (const [resource, content] of files) {\n\t\t\tfileTree.add(resource.path, { type: 'file', size: content.byteLength });\n\t\t\tthis.mtimes.set(resource.toString(), Date.now());\n\t\t}\n\n\t\tthis.triggerChanges(files.map(([resource]) => ({ resource, type: FileChangeType.UPDATED })));\n\t}\n\n\tprivate fileWriteBatch: { resource: URI; content: Uint8Array }[] = [];\n\tprivate async writeMany() {\n\t\tif (this.fileWriteBatch.length) {\n\t\t\tconst fileBatch = this.fileWriteBatch.splice(0, this.fileWriteBatch.length);\n\t\t\ttry {\n\t\t\t\tawait this.indexedDB.runInTransaction(this.store, 'readwrite', objectStore => fileBatch.map(entry => {\n\t\t\t\t\treturn objectStore.put(entry.content, entry.resource.path);\n\t\t\t\t}));\n\t\t\t} catch (ex) {\n\t\t\t\tif (ex instanceof DOMException && ex.name === 'QuotaExceededError') {\n\t\t\t\t\tthrow ERR_FILE_EXCEEDS_STORAGE_QUOTA;\n\t\t\t\t}\n\n\t\t\t\tthrow ex;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate async deleteKeys(keys: string[]): Promise<void> {\n\t\tif (keys.length) {\n\t\t\tawait this.indexedDB.runInTransaction(this.store, 'readwrite', objectStore => keys.map(key => objectStore.delete(key)));\n\t\t}\n\t}\n\n\tasync reset(): Promise<void> {\n\t\tawait this.indexedDB.runInTransaction(this.store, 'readwrite', objectStore => objectStore.clear());\n\t}\n\n\tprivate reportError(operation: string, error: Error): void {\n\t\tthis._onReportError.fire({ scheme: this.scheme, operation, code: error instanceof FileSystemProviderError || error instanceof DBClosedError ? error.code : 'unknown' });\n\t}\n\n}\n"]}