{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/commands/test/common/commands.test.ts"],"names":[],"mappings":"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","file":"commands.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\nimport * as assert from 'assert';\nimport { combinedDisposable } from 'vs/base/common/lifecycle';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { CommandsRegistry } from 'vs/platform/commands/common/commands';\n\nsuite('Command Tests', function () {\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('register command - no handler', function () {\n\t\tassert.throws(() => CommandsRegistry.registerCommand('foo', null!));\n\t});\n\n\ttest('register/dispose', () => {\n\t\tconst command = function () { };\n\t\tconst reg = CommandsRegistry.registerCommand('foo', command);\n\t\tassert.ok(CommandsRegistry.getCommand('foo')!.handler === command);\n\t\treg.dispose();\n\t\tassert.ok(CommandsRegistry.getCommand('foo') === undefined);\n\t});\n\n\ttest('register/register/dispose', () => {\n\t\tconst command1 = function () { };\n\t\tconst command2 = function () { };\n\n\t\t// dispose overriding command\n\t\tlet reg1 = CommandsRegistry.registerCommand('foo', command1);\n\t\tassert.ok(CommandsRegistry.getCommand('foo')!.handler === command1);\n\n\t\tlet reg2 = CommandsRegistry.registerCommand('foo', command2);\n\t\tassert.ok(CommandsRegistry.getCommand('foo')!.handler === command2);\n\t\treg2.dispose();\n\n\t\tassert.ok(CommandsRegistry.getCommand('foo')!.handler === command1);\n\t\treg1.dispose();\n\t\tassert.ok(CommandsRegistry.getCommand('foo') === undefined);\n\n\t\t// dispose override command first\n\t\treg1 = CommandsRegistry.registerCommand('foo', command1);\n\t\treg2 = CommandsRegistry.registerCommand('foo', command2);\n\t\tassert.ok(CommandsRegistry.getCommand('foo')!.handler === command2);\n\n\t\treg1.dispose();\n\t\tassert.ok(CommandsRegistry.getCommand('foo')!.handler === command2);\n\n\t\treg2.dispose();\n\t\tassert.ok(CommandsRegistry.getCommand('foo') === undefined);\n\t});\n\n\ttest('command with description', function () {\n\n\t\tconst r1 = CommandsRegistry.registerCommand('test', function (accessor, args) {\n\t\t\tassert.ok(typeof args === 'string');\n\t\t});\n\n\t\tconst r2 = CommandsRegistry.registerCommand('test2', function (accessor, args) {\n\t\t\tassert.ok(typeof args === 'string');\n\t\t});\n\n\t\tconst r3 = CommandsRegistry.registerCommand({\n\t\t\tid: 'test3',\n\t\t\thandler: function (accessor, args) {\n\t\t\t\treturn true;\n\t\t\t},\n\t\t\tdescription: {\n\t\t\t\tdescription: 'a command',\n\t\t\t\targs: [{ name: 'value', constraint: Number }]\n\t\t\t}\n\t\t});\n\n\t\tCommandsRegistry.getCommands().get('test')!.handler.apply(undefined, [undefined!, 'string']);\n\t\tCommandsRegistry.getCommands().get('test2')!.handler.apply(undefined, [undefined!, 'string']);\n\t\tassert.throws(() => CommandsRegistry.getCommands().get('test3')!.handler.apply(undefined, [undefined!, 'string']));\n\t\tassert.strictEqual(CommandsRegistry.getCommands().get('test3')!.handler.apply(undefined, [undefined!, 1]), true);\n\n\t\tcombinedDisposable(r1, r2, r3).dispose();\n\t});\n});\n"]}