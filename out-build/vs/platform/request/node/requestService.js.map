{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/request/node/requestService.ts"],"names":[],"mappings":"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","file":"requestService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as http from 'http';\nimport * as https from 'https';\nimport { parse as parseUrl } from 'url';\nimport { Promises } from 'vs/base/common/async';\nimport { streamToBufferReadableStream } from 'vs/base/common/buffer';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { CancellationError, getErrorMessage } from 'vs/base/common/errors';\nimport * as streams from 'vs/base/common/stream';\nimport { isBoolean, isNumber } from 'vs/base/common/types';\nimport { IRequestContext, IRequestOptions } from 'vs/base/parts/request/common/request';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { getResolvedShellEnv } from 'vs/platform/shell/node/shellEnv';\nimport { ILogService, ILoggerService } from 'vs/platform/log/common/log';\nimport { AbstractRequestService, IRequestService } from 'vs/platform/request/common/request';\nimport { Agent, getProxyAgent } from 'vs/platform/request/node/proxy';\nimport { createGunzip } from 'zlib';\n\ninterface IHTTPConfiguration {\n\tproxy?: string;\n\tproxyStrictSSL?: boolean;\n\tproxyAuthorization?: string;\n}\n\nexport interface IRawRequestFunction {\n\t(options: http.RequestOptions, callback?: (res: http.IncomingMessage) => void): http.ClientRequest;\n}\n\nexport interface NodeRequestOptions extends IRequestOptions {\n\tagent?: Agent;\n\tstrictSSL?: boolean;\n\tisChromiumNetwork?: boolean;\n\tgetRawRequest?(options: IRequestOptions): IRawRequestFunction;\n}\n\n/**\n * This service exposes the `request` API, while using the global\n * or configured proxy settings.\n */\nexport class RequestService extends AbstractRequestService implements IRequestService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate proxyUrl?: string;\n\tprivate strictSSL: boolean | undefined;\n\tprivate authorization?: string;\n\tprivate shellEnvErrorLogged?: boolean;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@INativeEnvironmentService private readonly environmentService: INativeEnvironmentService,\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@ILoggerService loggerService: ILoggerService\n\t) {\n\t\tsuper(loggerService);\n\t\tthis.configure();\n\t\tthis._register(configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (e.affectsConfiguration('http')) {\n\t\t\t\tthis.configure();\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate configure() {\n\t\tconst config = this.configurationService.getValue<IHTTPConfiguration | undefined>('http');\n\n\t\tthis.proxyUrl = config?.proxy;\n\t\tthis.strictSSL = !!config?.proxyStrictSSL;\n\t\tthis.authorization = config?.proxyAuthorization;\n\t}\n\n\tasync request(options: NodeRequestOptions, token: CancellationToken): Promise<IRequestContext> {\n\t\tconst { proxyUrl, strictSSL } = this;\n\n\t\tlet shellEnv: typeof process.env | undefined = undefined;\n\t\ttry {\n\t\t\tshellEnv = await getResolvedShellEnv(this.configurationService, this.logService, this.environmentService.args, process.env);\n\t\t} catch (error) {\n\t\t\tif (!this.shellEnvErrorLogged) {\n\t\t\t\tthis.shellEnvErrorLogged = true;\n\t\t\t\tthis.logService.error(`resolving shell environment failed`, getErrorMessage(error));\n\t\t\t}\n\t\t}\n\n\t\tconst env = {\n\t\t\t...process.env,\n\t\t\t...shellEnv\n\t\t};\n\t\tconst agent = options.agent ? options.agent : await getProxyAgent(options.url || '', env, { proxyUrl, strictSSL });\n\n\t\toptions.agent = agent;\n\t\toptions.strictSSL = strictSSL;\n\n\t\tif (this.authorization) {\n\t\t\toptions.headers = {\n\t\t\t\t...(options.headers || {}),\n\t\t\t\t'Proxy-Authorization': this.authorization\n\t\t\t};\n\t\t}\n\n\t\treturn this.logAndRequest(options.isChromiumNetwork ? 'electron' : 'node', options, () => nodeRequest(options, token));\n\t}\n\n\tasync resolveProxy(url: string): Promise<string | undefined> {\n\t\treturn undefined; // currently not implemented in node\n\t}\n}\n\nasync function getNodeRequest(options: IRequestOptions): Promise<IRawRequestFunction> {\n\tconst endpoint = parseUrl(options.url!);\n\tconst module = endpoint.protocol === 'https:' ? await import('https') : await import('http');\n\n\treturn module.request;\n}\n\nexport async function nodeRequest(options: NodeRequestOptions, token: CancellationToken): Promise<IRequestContext> {\n\treturn Promises.withAsyncBody<IRequestContext>(async (resolve, reject) => {\n\t\tconst endpoint = parseUrl(options.url!);\n\t\tconst rawRequest = options.getRawRequest\n\t\t\t? options.getRawRequest(options)\n\t\t\t: await getNodeRequest(options);\n\n\t\tconst opts: https.RequestOptions = {\n\t\t\thostname: endpoint.hostname,\n\t\t\tport: endpoint.port ? parseInt(endpoint.port) : (endpoint.protocol === 'https:' ? 443 : 80),\n\t\t\tprotocol: endpoint.protocol,\n\t\t\tpath: endpoint.path,\n\t\t\tmethod: options.type || 'GET',\n\t\t\theaders: options.headers,\n\t\t\tagent: options.agent,\n\t\t\trejectUnauthorized: isBoolean(options.strictSSL) ? options.strictSSL : true\n\t\t};\n\n\t\tif (options.user && options.password) {\n\t\t\topts.auth = options.user + ':' + options.password;\n\t\t}\n\n\t\tconst req = rawRequest(opts, (res: http.IncomingMessage) => {\n\t\t\tconst followRedirects: number = isNumber(options.followRedirects) ? options.followRedirects : 3;\n\t\t\tif (res.statusCode && res.statusCode >= 300 && res.statusCode < 400 && followRedirects > 0 && res.headers['location']) {\n\t\t\t\tnodeRequest({\n\t\t\t\t\t...options,\n\t\t\t\t\turl: res.headers['location'],\n\t\t\t\t\tfollowRedirects: followRedirects - 1\n\t\t\t\t}, token).then(resolve, reject);\n\t\t\t} else {\n\t\t\t\tlet stream: streams.ReadableStreamEvents<Uint8Array> = res;\n\n\t\t\t\t// Responses from Electron net module should be treated as response\n\t\t\t\t// from browser, which will apply gzip filter and decompress the response\n\t\t\t\t// using zlib before passing the result to us. Following step can be bypassed\n\t\t\t\t// in this case and proceed further.\n\t\t\t\t// Refs https://source.chromium.org/chromium/chromium/src/+/main:net/url_request/url_request_http_job.cc;l=1266-1318\n\t\t\t\tif (!options.isChromiumNetwork && res.headers['content-encoding'] === 'gzip') {\n\t\t\t\t\tstream = res.pipe(createGunzip());\n\t\t\t\t}\n\n\t\t\t\tresolve({ res, stream: streamToBufferReadableStream(stream) } as IRequestContext);\n\t\t\t}\n\t\t});\n\n\t\treq.on('error', reject);\n\n\t\tif (options.timeout) {\n\t\t\treq.setTimeout(options.timeout);\n\t\t}\n\n\t\t// Chromium will abort the request if forbidden headers are set.\n\t\t// Ref https://source.chromium.org/chromium/chromium/src/+/main:services/network/public/cpp/header_util.cc;l=14-48;\n\t\t// for additional context.\n\t\tif (options.isChromiumNetwork) {\n\t\t\treq.removeHeader('Content-Length');\n\t\t}\n\n\t\tif (options.data) {\n\t\t\tif (typeof options.data === 'string') {\n\t\t\t\treq.write(options.data);\n\t\t\t}\n\t\t}\n\n\t\treq.end();\n\n\t\ttoken.onCancellationRequested(() => {\n\t\t\treq.abort();\n\n\t\t\treject(new CancellationError());\n\t\t});\n\t});\n}\n"]}