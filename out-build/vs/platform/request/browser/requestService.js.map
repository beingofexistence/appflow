{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/request/browser/requestService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAShG;;;OAGG;IACI,IAAM,IAAI,GAAV,MAAM,IAAe,SAAQ,aAAG;QAItC,YACyC,CAAyB,EACjD,aAAkB;YAElC,KAAK,CAAC,aAAa,CAAC,CAAC;YAHmB,MAAC,GAAD,CAAC,CAAwB;QAIlE,CAAC;QAED,KAAK,CAAC,OAAO,CAAC,OAAwB,EAAE,KAAwB;YAC/D,IAAI,CAAC,OAAO,CAAC,kBAAkB,EAAE;gBAChC,OAAO,CAAC,kBAAkB,GAAG,IAAI,CAAC,CAAC,CAAoB,QAAQ,CAAS,yBAAyB,CAAC,CAAC;aACnG;YACD,OAAO,IAAI,CAAC,CAAC,CAAa,SAAS,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,IAAA,aAAG,EAAK,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;QAC9E,CAAC;QAED,KAAK,CAAC,YAAY,CAAC,GAAW;YAC7B,OAAO,SAAS,CAAC,CAAC,6BAA6B;QAChD,CAAC;KACD,CAAA;IArBY,oBAAI;mBAAJ,IAAI;QAKd,WAAA,mBAAG,CAAA;QACH,WAAA,SAAG,CAAA;OANO,IAAI,CAqBhB","file":"requestService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { request } from 'vs/base/parts/request/browser/request';\nimport { IRequestContext, IRequestOptions } from 'vs/base/parts/request/common/request';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ILoggerService } from 'vs/platform/log/common/log';\nimport { AbstractRequestService, IRequestService } from 'vs/platform/request/common/request';\n\n/**\n * This service exposes the `request` API, while using the global\n * or configured proxy settings.\n */\nexport class RequestService extends AbstractRequestService implements IRequestService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@ILoggerService loggerService: ILoggerService\n\t) {\n\t\tsuper(loggerService);\n\t}\n\n\tasync request(options: IRequestOptions, token: CancellationToken): Promise<IRequestContext> {\n\t\tif (!options.proxyAuthorization) {\n\t\t\toptions.proxyAuthorization = this.configurationService.getValue<string>('http.proxyAuthorization');\n\t\t}\n\t\treturn this.logAndRequest('browser', options, () => request(options, token));\n\t}\n\n\tasync resolveProxy(url: string): Promise<string | undefined> {\n\t\treturn undefined; // not implemented in the web\n\t}\n}\n"]}