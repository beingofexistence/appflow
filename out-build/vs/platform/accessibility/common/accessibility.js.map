{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/accessibility/common/accessibility.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMnF,QAAA,GAAG,GAAqB,IAAA,mBAAG,EAAoC,sBAAsB,CAAC,CAAC;IAgBpG,IAAkB,oBASjB;IATD,WAAkB,oBAAoB;QACrC;;WAEG;QACH,qEAAW,CAAA;QAEX,uEAAY,CAAA;QAEZ,qEAAW,CAAA;IACZ,CAAC,EATiB,oBAAoB,oCAApB,oBAAoB,QASrC;IAEY,QAAA,GAAG,GAAkC,IAAI,gBAAG,CAAoB,0BAA0B,EAAE,KAAK,CAAC,CAAC;IAOhH,SAAgB,GAAG,CAAwB,GAAQ;QAClD,OAAO,GAAG,IAAI,OAAO,GAAG,KAAK,QAAQ;eACjC,OAAO,GAAG,CAAC,KAAK,KAAK,QAAQ;eAC7B,CAAC,OAAO,GAAG,CAAC,IAAI,KAAK,WAAW,IAAI,OAAO,GAAG,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC;IACvE,CAAC;IAJD,kBAIC","file":"accessibility.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { RawContextKey } from 'vs/platform/contextkey/common/contextkey';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport const IAccessibilityService = createDecorator<IAccessibilityService>('accessibilityService');\n\nexport interface IAccessibilityService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChangeScreenReaderOptimized: Event<void>;\n\treadonly onDidChangeReducedMotion: Event<void>;\n\n\talwaysUnderlineAccessKeys(): Promise<boolean>;\n\tisScreenReaderOptimized(): boolean;\n\tisMotionReduced(): boolean;\n\tgetAccessibilitySupport(): AccessibilitySupport;\n\tsetAccessibilitySupport(accessibilitySupport: AccessibilitySupport): void;\n\talert(message: string): void;\n}\n\nexport const enum AccessibilitySupport {\n\t/**\n\t * This should be the browser case where it is not known if a screen reader is attached or no.\n\t */\n\tUnknown = 0,\n\n\tDisabled = 1,\n\n\tEnabled = 2\n}\n\nexport const CONTEXT_ACCESSIBILITY_MODE_ENABLED = new RawContextKey<boolean>('accessibilityModeEnabled', false);\n\nexport interface IAccessibilityInformation {\n\tlabel: string;\n\trole?: string;\n}\n\nexport function isAccessibilityInformation(obj: any): obj is IAccessibilityInformation {\n\treturn obj && typeof obj === 'object'\n\t\t&& typeof obj.label === 'string'\n\t\t&& (typeof obj.role === 'undefined' || typeof obj.role === 'string');\n}\n"]}