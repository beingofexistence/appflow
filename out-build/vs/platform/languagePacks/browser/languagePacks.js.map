{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/languagePacks/browser/languagePacks.ts"],"names":[],"mappings":"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","file":"languagePacks.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { URI } from 'vs/base/common/uri';\nimport { IExtensionGalleryService } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { IExtensionResourceLoaderService } from 'vs/platform/extensionResourceLoader/common/extensionResourceLoader';\nimport { ILanguagePackItem, LanguagePackBaseService } from 'vs/platform/languagePacks/common/languagePacks';\nimport { ILogService } from 'vs/platform/log/common/log';\n\nexport class WebLanguagePacksService extends LanguagePackBaseService {\n\tconstructor(\n\t\t@IExtensionResourceLoaderService private readonly extensionResourceLoaderService: IExtensionResourceLoaderService,\n\t\t@IExtensionGalleryService extensionGalleryService: IExtensionGalleryService,\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\tsuper(extensionGalleryService);\n\t}\n\n\tasync getBuiltInExtensionTranslationsUri(id: string, language: string): Promise<URI | undefined> {\n\n\t\tconst queryTimeout = new CancellationTokenSource();\n\t\tsetTimeout(() => queryTimeout.cancel(), 1000);\n\n\t\t// First get the extensions that supports the language (there should only be one but just in case let's include more results)\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await this.extensionGalleryService.query({\n\t\t\t\ttext: `tag:\"lp-${language}\"`,\n\t\t\t\tpageSize: 5\n\t\t\t}, queryTimeout.token);\n\t\t} catch (err) {\n\t\t\tthis.logService.error(err);\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst languagePackExtensions = result.firstPage.find(e => e.properties.localizedLanguages?.length);\n\t\tif (!languagePackExtensions) {\n\t\t\tthis.logService.trace(`No language pack found for language ${language}`);\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// Then get the manifest for that extension\n\t\tconst manifestTimeout = new CancellationTokenSource();\n\t\tsetTimeout(() => queryTimeout.cancel(), 1000);\n\t\tconst manifest = await this.extensionGalleryService.getManifest(languagePackExtensions, manifestTimeout.token);\n\n\t\t// Find the translation from the language pack\n\t\tconst localization = manifest?.contributes?.localizations?.find(l => l.languageId === language);\n\t\tconst translation = localization?.translations.find(t => t.id === id);\n\t\tif (!translation) {\n\t\t\tthis.logService.trace(`No translation found for id '${id}, in ${manifest?.name}`);\n\t\t\treturn undefined;\n\t\t}\n\n\t\t// get the resource uri and return it\n\t\tconst uri = this.extensionResourceLoaderService.getExtensionGalleryResourceURL({\n\t\t\t// If translation is defined then manifest should have been defined.\n\t\t\tname: manifest!.name,\n\t\t\tpublisher: manifest!.publisher,\n\t\t\tversion: manifest!.version\n\t\t});\n\t\tif (!uri) {\n\t\t\tthis.logService.trace('Gallery does not provide extension resources.');\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn URI.joinPath(uri, translation.path);\n\t}\n\n\t// Web doesn't have a concept of language packs, so we just return an empty array\n\tgetInstalledLanguages(): Promise<ILanguagePackItem[]> {\n\t\treturn Promise.resolve([]);\n\t}\n}\n"]}