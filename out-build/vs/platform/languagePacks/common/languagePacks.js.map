{"version":3,"sources":["vs/platform/languagePacks/common/languagePacks.ts"],"names":[],"mappings":"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","file":"languagePacks.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { language } from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { IQuickPickItem } from 'vs/platform/quickinput/common/quickInput';\nimport { localize } from 'vs/nls';\nimport { IExtensionGalleryService, IGalleryExtension } from 'vs/platform/extensionManagement/common/extensionManagement';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport function getLocale(extension: IGalleryExtension): string | undefined {\n\treturn extension.tags.find(t => t.startsWith('lp-'))?.split('lp-')[1];\n}\n\nexport const ILanguagePackService = createDecorator<ILanguagePackService>('languagePackService');\n\nexport interface ILanguagePackItem extends IQuickPickItem {\n\treadonly extensionId?: string;\n\treadonly galleryExtension?: IGalleryExtension;\n}\n\nexport interface ILanguagePackService {\n\treadonly _serviceBrand: undefined;\n\tgetAvailableLanguages(): Promise<Array<ILanguagePackItem>>;\n\tgetInstalledLanguages(): Promise<Array<ILanguagePackItem>>;\n\tgetBuiltInExtensionTranslationsUri(id: string, language: string): Promise<URI | undefined>;\n}\n\nexport abstract class LanguagePackBaseService extends Disposable implements ILanguagePackService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(@IExtensionGalleryService protected readonly extensionGalleryService: IExtensionGalleryService) {\n\t\tsuper();\n\t}\n\n\tabstract getBuiltInExtensionTranslationsUri(id: string, language: string): Promise<URI | undefined>;\n\n\tabstract getInstalledLanguages(): Promise<Array<ILanguagePackItem>>;\n\n\tasync getAvailableLanguages(): Promise<ILanguagePackItem[]> {\n\t\tconst timeout = new CancellationTokenSource();\n\t\tsetTimeout(() => timeout.cancel(), 1000);\n\n\t\tlet result;\n\t\ttry {\n\t\t\tresult = await this.extensionGalleryService.query({\n\t\t\t\ttext: 'category:\"language packs\"',\n\t\t\t\tpageSize: 20\n\t\t\t}, timeout.token);\n\t\t} catch (_) {\n\t\t\t// This method is best effort. So, we ignore any errors.\n\t\t\treturn [];\n\t\t}\n\n\t\tconst languagePackExtensions = result.firstPage.filter(e => e.properties.localizedLanguages?.length && e.tags.some(t => t.startsWith('lp-')));\n\t\tconst allFromMarketplace: ILanguagePackItem[] = languagePackExtensions.map(lp => {\n\t\t\tconst languageName = lp.properties.localizedLanguages?.[0];\n\t\t\tconst locale = getLocale(lp)!;\n\t\t\tconst baseQuickPick = this.createQuickPickItem(locale, languageName, lp);\n\t\t\treturn {\n\t\t\t\t...baseQuickPick,\n\t\t\t\textensionId: lp.identifier.id,\n\t\t\t\tgalleryExtension: lp\n\t\t\t};\n\t\t});\n\n\t\tallFromMarketplace.push(this.createQuickPickItem('en', 'English'));\n\n\t\treturn allFromMarketplace;\n\t}\n\n\tprotected createQuickPickItem(locale: string, languageName?: string, languagePack?: IGalleryExtension): IQuickPickItem {\n\t\tconst label = languageName ?? locale;\n\t\tlet description: string | undefined;\n\t\tif (label !== locale) {\n\t\t\tdescription = `(${locale})`;\n\t\t}\n\n\t\tif (locale.toLowerCase() === language.toLowerCase()) {\n\t\t\tdescription ??= '';\n\t\t\tdescription += localize('currentDisplayLanguage', \" (Current)\");\n\t\t}\n\n\t\tif (languagePack?.installCount) {\n\t\t\tdescription ??= '';\n\n\t\t\tconst count = languagePack.installCount;\n\t\t\tlet countLabel: string;\n\t\t\tif (count > 1000000) {\n\t\t\t\tcountLabel = `${Math.floor(count / 100000) / 10}M`;\n\t\t\t} else if (count > 1000) {\n\t\t\t\tcountLabel = `${Math.floor(count / 1000)}K`;\n\t\t\t} else {\n\t\t\t\tcountLabel = String(count);\n\t\t\t}\n\t\t\tdescription += ` $(cloud-download) ${countLabel}`;\n\t\t}\n\n\t\treturn {\n\t\t\tid: locale,\n\t\t\tlabel,\n\t\t\tdescription\n\t\t};\n\t}\n}\n"]}