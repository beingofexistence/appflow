{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/encryption/common/encryptionService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAInF,QAAA,GAAG,GAAkB,IAAA,mBAAG,EAAiC,mBAAmB,CAAC,CAAC;IAM9E,QAAA,GAAG,GAAsB,IAAA,mBAAG,EAAqC,uBAAuB,CAAC,CAAC;IAcvG,mEAAmE;IACnE,8DAA8D;IAC9D,wDAAwD;IACxD,IAAkB,sBAOjB;IAPD,WAAkB,sBAAsB;QACvC,6CAAmB,CAAA;QACnB,+CAAqB,CAAA;QACrB,yCAAe,CAAA;QACf,wDAA8B,CAAA;QAC9B,4DAAkC,CAAA;QAClC,yCAAe,CAAA;IAChB,CAAC,EAPiB,sBAAsB,sCAAtB,sBAAsB,QAOvC;IAED,+EAA+E;IAC/E,IAAkB,oBAoBjB;IApBD,WAAkB,oBAAoB;QACrC,2CAAmB,CAAA;QACnB,gDAAwB,CAAA;QAExB,QAAQ;QACR,8CAAsB,CAAA;QACtB,0DAAkC,CAAA;QAClC,sDAA8B,CAAA;QAC9B,2CAAmB,CAAA;QACnB,6CAAqB,CAAA;QACrB,6CAAqB,CAAA;QAErB,oEAAoE;QACpE,kDAAkD;QAElD,UAAU;QACV,uCAAe,CAAA;QAEf,QAAQ;QACR,0DAAkC,CAAA;IACnC,CAAC,EApBiB,oBAAoB,oCAApB,oBAAoB,QAoBrC;IAED,SAAgB,GAAG,CAAO,OAAe;QACxC,OAAO,OAAO,iDAAiC;eAC3C,OAAO,mDAAkC;eACzC,OAAO,mDAAkC,CAAC;IAC/C,CAAC;IAJD,kBAIC;IAED,SAAgB,GAAG,CAAK,OAAe;QACtC,OAAO,OAAO,oDAAkC;eAC5C,OAAO,gEAAwC;eAC/C,OAAO,4DAAsC,CAAC;IACnD,CAAC;IAJD,kBAIC","file":"encryptionService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport const IEncryptionService = createDecorator<IEncryptionService>('encryptionService');\nexport interface IEncryptionService extends ICommonEncryptionService {\n\tsetUsePlainTextEncryption(): Promise<void>;\n\tgetKeyStorageProvider(): Promise<KnownStorageProvider>;\n}\n\nexport const IEncryptionMainService = createDecorator<IEncryptionMainService>('encryptionMainService');\nexport interface IEncryptionMainService extends IEncryptionService { }\n\nexport interface ICommonEncryptionService {\n\n\treadonly _serviceBrand: undefined;\n\n\tencrypt(value: string): Promise<string>;\n\n\tdecrypt(value: string): Promise<string>;\n\n\tisEncryptionAvailable(): Promise<boolean>;\n}\n\n// The values provided to the `password-store` command line switch.\n// Notice that they are not the same as the values returned by\n// `getSelectedStorageBackend` in the `safeStorage` API.\nexport const enum PasswordStoreCLIOption {\n\tkwallet = 'kwallet',\n\tkwallet5 = 'kwallet5',\n\tgnome = 'gnome',\n\tgnomeKeyring = 'gnome-keyring',\n\tgnomeLibsecret = 'gnome-libsecret',\n\tbasic = 'basic'\n}\n\n// The values returned by `getSelectedStorageBackend` in the `safeStorage` API.\nexport const enum KnownStorageProvider {\n\tunknown = 'unknown',\n\tbasicText = 'basic_text',\n\n\t// Linux\n\tgnomeAny = 'gnome_any',\n\tgnomeLibsecret = 'gnome_libsecret',\n\tgnomeKeyring = 'gnome_keyring',\n\tkwallet = 'kwallet',\n\tkwallet5 = 'kwallet5',\n\tkwallet6 = 'kwallet6',\n\n\t// The rest of these are not returned by `getSelectedStorageBackend`\n\t// but these were added for platform completeness.\n\n\t// Windows\n\tdplib = 'dpapi',\n\n\t// macOS\n\tkeychainAccess = 'keychain_access',\n}\n\nexport function isKwallet(backend: string): boolean {\n\treturn backend === KnownStorageProvider.kwallet\n\t\t|| backend === KnownStorageProvider.kwallet5\n\t\t|| backend === KnownStorageProvider.kwallet6;\n}\n\nexport function isGnome(backend: string): boolean {\n\treturn backend === KnownStorageProvider.gnomeAny\n\t\t|| backend === KnownStorageProvider.gnomeLibsecret\n\t\t|| backend === KnownStorageProvider.gnomeKeyring;\n}\n"]}