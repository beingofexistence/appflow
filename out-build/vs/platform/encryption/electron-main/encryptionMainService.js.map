{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/encryption/electron-main/encryptionMainService.ts"],"names":[],"mappings":"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","file":"encryptionMainService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { safeStorage as safeStorageElectron, app } from 'electron';\nimport { isMacintosh, isWindows } from 'vs/base/common/platform';\nimport { KnownStorageProvider, IEncryptionMainService, PasswordStoreCLIOption } from 'vs/platform/encryption/common/encryptionService';\nimport { ILogService } from 'vs/platform/log/common/log';\n\n// These APIs are currently only supported in our custom build of electron so\n// we need to guard against them not being available.\ninterface ISafeStorageAdditionalAPIs {\n\tsetUsePlainTextEncryption(usePlainText: boolean): void;\n\tgetSelectedStorageBackend(): string;\n}\n\nconst safeStorage: typeof import('electron').safeStorage & Partial<ISafeStorageAdditionalAPIs> = safeStorageElectron;\n\nexport class EncryptionMainService implements IEncryptionMainService {\n\t_serviceBrand: undefined;\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService\n\t) {\n\t\t// if this commandLine switch is set, the user has opted in to using basic text encryption\n\t\tif (app.commandLine.getSwitchValue('password-store') === PasswordStoreCLIOption.basic) {\n\t\t\tsafeStorage.setUsePlainTextEncryption?.(true);\n\t\t}\n\t}\n\n\tasync encrypt(value: string): Promise<string> {\n\t\tthis.logService.trace('[EncryptionMainService] Encrypting value.');\n\t\ttry {\n\t\t\tconst result = JSON.stringify(safeStorage.encryptString(value));\n\t\t\tthis.logService.trace('[EncryptionMainService] Encrypted value.');\n\t\t\treturn result;\n\t\t} catch (e) {\n\t\t\tthis.logService.error(e);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tasync decrypt(value: string): Promise<string> {\n\t\tlet parsedValue: { data: string };\n\t\ttry {\n\t\t\tparsedValue = JSON.parse(value);\n\t\t\tif (!parsedValue.data) {\n\t\t\t\tthrow new Error(`[EncryptionMainService] Invalid encrypted value: ${value}`);\n\t\t\t}\n\t\t\tconst bufferToDecrypt = Buffer.from(parsedValue.data);\n\n\t\t\tthis.logService.trace('[EncryptionMainService] Decrypting value.');\n\t\t\tconst result = safeStorage.decryptString(bufferToDecrypt);\n\t\t\tthis.logService.trace('[EncryptionMainService] Decrypted value.');\n\t\t\treturn result;\n\t\t} catch (e) {\n\t\t\tthis.logService.error(e);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\tisEncryptionAvailable(): Promise<boolean> {\n\t\treturn Promise.resolve(safeStorage.isEncryptionAvailable());\n\t}\n\n\tgetKeyStorageProvider(): Promise<KnownStorageProvider> {\n\t\tif (isWindows) {\n\t\t\treturn Promise.resolve(KnownStorageProvider.dplib);\n\t\t}\n\t\tif (isMacintosh) {\n\t\t\treturn Promise.resolve(KnownStorageProvider.keychainAccess);\n\t\t}\n\t\tif (safeStorage.getSelectedStorageBackend) {\n\t\t\ttry {\n\t\t\t\tconst result = safeStorage.getSelectedStorageBackend() as KnownStorageProvider;\n\t\t\t\treturn Promise.resolve(result);\n\t\t\t} catch (e) {\n\t\t\t\tthis.logService.error(e);\n\t\t\t}\n\t\t}\n\t\treturn Promise.resolve(KnownStorageProvider.unknown);\n\t}\n\n\tasync setUsePlainTextEncryption(): Promise<void> {\n\t\tif (isWindows) {\n\t\t\tthrow new Error('Setting plain text encryption is not supported on Windows.');\n\t\t}\n\n\t\tif (isMacintosh) {\n\t\t\tthrow new Error('Setting plain text encryption is not supported on macOS.');\n\t\t}\n\n\t\tif (!safeStorage.setUsePlainTextEncryption) {\n\t\t\tthrow new Error('Setting plain text encryption is not supported.');\n\t\t}\n\n\t\tsafeStorage.setUsePlainTextEncryption(true);\n\t}\n}\n"]}