{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/theme/common/themeService.ts"],"names":[],"mappings":"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","file":"themeService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Codicon } from 'vs/base/common/codicons';\nimport { Color } from 'vs/base/common/color';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport * as platform from 'vs/platform/registry/common/platform';\nimport { ColorIdentifier } from 'vs/platform/theme/common/colorRegistry';\nimport { IconContribution, IconDefinition } from 'vs/platform/theme/common/iconRegistry';\nimport { ColorScheme } from 'vs/platform/theme/common/theme';\n\nexport const IThemeService = createDecorator<IThemeService>('themeService');\n\nexport function themeColorFromId(id: ColorIdentifier) {\n\treturn { id };\n}\n\nexport const FileThemeIcon = Codicon.file;\nexport const FolderThemeIcon = Codicon.folder;\n\nexport function getThemeTypeSelector(type: ColorScheme): string {\n\tswitch (type) {\n\t\tcase ColorScheme.DARK: return 'vs-dark';\n\t\tcase ColorScheme.HIGH_CONTRAST_DARK: return 'hc-black';\n\t\tcase ColorScheme.HIGH_CONTRAST_LIGHT: return 'hc-light';\n\t\tdefault: return 'vs';\n\t}\n}\n\nexport interface ITokenStyle {\n\treadonly foreground: number | undefined;\n\treadonly bold: boolean | undefined;\n\treadonly underline: boolean | undefined;\n\treadonly strikethrough: boolean | undefined;\n\treadonly italic: boolean | undefined;\n}\n\nexport interface IColorTheme {\n\n\treadonly type: ColorScheme;\n\n\treadonly label: string;\n\n\t/**\n\t * Resolves the color of the given color identifier. If the theme does not\n\t * specify the color, the default color is returned unless <code>useDefault</code> is set to false.\n\t * @param color the id of the color\n\t * @param useDefault specifies if the default color should be used. If not set, the default is used.\n\t */\n\tgetColor(color: ColorIdentifier, useDefault?: boolean): Color | undefined;\n\n\t/**\n\t * Returns whether the theme defines a value for the color. If not, that means the\n\t * default color will be used.\n\t */\n\tdefines(color: ColorIdentifier): boolean;\n\n\t/**\n\t * Returns the token style for a given classification. The result uses the <code>MetadataConsts</code> format\n\t */\n\tgetTokenStyleMetadata(type: string, modifiers: string[], modelLanguage: string): ITokenStyle | undefined;\n\n\t/**\n\t * List of all colors used with tokens. <code>getTokenStyleMetadata</code> references the colors by index into this list.\n\t */\n\treadonly tokenColorMap: string[];\n\n\t/**\n\t * Defines whether semantic highlighting should be enabled for the theme.\n\t */\n\treadonly semanticHighlighting: boolean;\n}\n\nexport interface IFileIconTheme {\n\treadonly hasFileIcons: boolean;\n\treadonly hasFolderIcons: boolean;\n\treadonly hidesExplorerArrows: boolean;\n}\n\nexport interface IProductIconTheme {\n\t/**\n\t * Resolves the definition for the given icon as defined by the theme.\n\t *\n\t * @param iconContribution The icon\n\t */\n\tgetIcon(iconContribution: IconContribution): IconDefinition | undefined;\n}\n\n\nexport interface ICssStyleCollector {\n\taddRule(rule: string): void;\n}\n\nexport interface IThemingParticipant {\n\t(theme: IColorTheme, collector: ICssStyleCollector, environment: IEnvironmentService): void;\n}\n\nexport interface IThemeService {\n\treadonly _serviceBrand: undefined;\n\n\tgetColorTheme(): IColorTheme;\n\n\treadonly onDidColorThemeChange: Event<IColorTheme>;\n\n\tgetFileIconTheme(): IFileIconTheme;\n\n\treadonly onDidFileIconThemeChange: Event<IFileIconTheme>;\n\n\tgetProductIconTheme(): IProductIconTheme;\n\n\treadonly onDidProductIconThemeChange: Event<IProductIconTheme>;\n\n}\n\n// static theming participant\nexport const Extensions = {\n\tThemingContribution: 'base.contributions.theming'\n};\n\nexport interface IThemingRegistry {\n\n\t/**\n\t * Register a theming participant that is invoked on every theme change.\n\t */\n\tonColorThemeChange(participant: IThemingParticipant): IDisposable;\n\n\tgetThemingParticipants(): IThemingParticipant[];\n\n\treadonly onThemingParticipantAdded: Event<IThemingParticipant>;\n}\n\nclass ThemingRegistry implements IThemingRegistry {\n\tprivate themingParticipants: IThemingParticipant[] = [];\n\tprivate readonly onThemingParticipantAddedEmitter: Emitter<IThemingParticipant>;\n\n\tconstructor() {\n\t\tthis.themingParticipants = [];\n\t\tthis.onThemingParticipantAddedEmitter = new Emitter<IThemingParticipant>();\n\t}\n\n\tpublic onColorThemeChange(participant: IThemingParticipant): IDisposable {\n\t\tthis.themingParticipants.push(participant);\n\t\tthis.onThemingParticipantAddedEmitter.fire(participant);\n\t\treturn toDisposable(() => {\n\t\t\tconst idx = this.themingParticipants.indexOf(participant);\n\t\t\tthis.themingParticipants.splice(idx, 1);\n\t\t});\n\t}\n\n\tpublic get onThemingParticipantAdded(): Event<IThemingParticipant> {\n\t\treturn this.onThemingParticipantAddedEmitter.event;\n\t}\n\n\tpublic getThemingParticipants(): IThemingParticipant[] {\n\t\treturn this.themingParticipants;\n\t}\n}\n\nconst themingRegistry = new ThemingRegistry();\nplatform.Registry.add(Extensions.ThemingContribution, themingRegistry);\n\nexport function registerThemingParticipant(participant: IThemingParticipant): IDisposable {\n\treturn themingRegistry.onColorThemeChange(participant);\n}\n\n/**\n * Utility base class for all themable components.\n */\nexport class Themable extends Disposable {\n\tprotected theme: IColorTheme;\n\n\tconstructor(\n\t\tprotected themeService: IThemeService\n\t) {\n\t\tsuper();\n\n\t\tthis.theme = themeService.getColorTheme();\n\n\t\t// Hook up to theme changes\n\t\tthis._register(this.themeService.onDidColorThemeChange(theme => this.onThemeChange(theme)));\n\t}\n\n\tprotected onThemeChange(theme: IColorTheme): void {\n\t\tthis.theme = theme;\n\n\t\tthis.updateStyles();\n\t}\n\n\tupdateStyles(): void {\n\t\t// Subclasses to override\n\t}\n\n\tprotected getColor(id: string, modify?: (color: Color, theme: IColorTheme) => Color): string | null {\n\t\tlet color = this.theme.getColor(id);\n\n\t\tif (color && modify) {\n\t\t\tcolor = modify(color, this.theme);\n\t\t}\n\n\t\treturn color ? color.toString() : null;\n\t}\n}\n\nexport interface IPartsSplash {\n\tzoomLevel: number | undefined;\n\tbaseTheme: string;\n\tcolorInfo: {\n\t\tbackground: string;\n\t\tforeground: string | undefined;\n\t\teditorBackground: string | undefined;\n\t\ttitleBarBackground: string | undefined;\n\t\tactivityBarBackground: string | undefined;\n\t\tsideBarBackground: string | undefined;\n\t\tstatusBarBackground: string | undefined;\n\t\tstatusBarNoFolderBackground: string | undefined;\n\t\twindowBorder: string | undefined;\n\t};\n\tlayoutInfo: {\n\t\tsideBarSide: string;\n\t\teditorPartMinWidth: number;\n\t\ttitleBarHeight: number;\n\t\tactivityBarWidth: number;\n\t\tsideBarWidth: number;\n\t\tstatusBarHeight: number;\n\t\twindowBorder: boolean;\n\t\twindowBorderRadius: string | undefined;\n\t} | undefined;\n}\n"]}