{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/theme/electron-main/themeMainService.ts"],"names":[],"mappings":"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","file":"themeMainService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BrowserWindow, nativeTheme } from 'electron';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { isLinux, isMacintosh, isWindows } from 'vs/base/common/platform';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IStateService } from 'vs/platform/state/node/state';\nimport { IPartsSplash } from 'vs/platform/theme/common/themeService';\nimport { IColorScheme } from 'vs/platform/window/common/window';\n\nconst DEFAULT_BG_LIGHT = '#FFFFFF';\nconst DEFAULT_BG_DARK = '#1E1E1E';\nconst DEFAULT_BG_HC_BLACK = '#000000';\nconst DEFAULT_BG_HC_LIGHT = '#FFFFFF';\n\nconst THEME_STORAGE_KEY = 'theme';\nconst THEME_BG_STORAGE_KEY = 'themeBackground';\nconst THEME_WINDOW_SPLASH = 'windowSplash';\n\nexport const IThemeMainService = createDecorator<IThemeMainService>('themeMainService');\n\nexport interface IThemeMainService {\n\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChangeColorScheme: Event<IColorScheme>;\n\n\tgetBackgroundColor(): string;\n\n\tsaveWindowSplash(windowId: number | undefined, splash: IPartsSplash): void;\n\tgetWindowSplash(): IPartsSplash | undefined;\n\n\tgetColorScheme(): IColorScheme;\n}\n\nexport class ThemeMainService extends Disposable implements IThemeMainService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidChangeColorScheme = this._register(new Emitter<IColorScheme>());\n\treadonly onDidChangeColorScheme = this._onDidChangeColorScheme.event;\n\n\tconstructor(@IStateService private stateService: IStateService, @IConfigurationService private configurationService: IConfigurationService) {\n\t\tsuper();\n\n\t\t// Color Scheme changes\n\t\tnativeTheme.on('updated', () => {\n\t\t\tthis._onDidChangeColorScheme.fire(this.getColorScheme());\n\t\t});\n\t}\n\n\tgetColorScheme(): IColorScheme {\n\t\tif (isWindows) {\n\t\t\t// high contrast is refelected by the shouldUseInvertedColorScheme property\n\t\t\tif (nativeTheme.shouldUseHighContrastColors) {\n\t\t\t\t// shouldUseInvertedColorScheme is dark, !shouldUseInvertedColorScheme is light\n\t\t\t\treturn { dark: nativeTheme.shouldUseInvertedColorScheme, highContrast: true };\n\t\t\t}\n\t\t} else if (isMacintosh) {\n\t\t\t// high contrast is set if one of shouldUseInvertedColorScheme or shouldUseHighContrastColors is set, reflecting the 'Invert colours' and `Increase contrast` settings in MacOS\n\t\t\tif (nativeTheme.shouldUseInvertedColorScheme || nativeTheme.shouldUseHighContrastColors) {\n\t\t\t\treturn { dark: nativeTheme.shouldUseDarkColors, highContrast: true };\n\t\t\t}\n\t\t} else if (isLinux) {\n\t\t\t// ubuntu gnome seems to have 3 states, light dark and high contrast\n\t\t\tif (nativeTheme.shouldUseHighContrastColors) {\n\t\t\t\treturn { dark: true, highContrast: true };\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\tdark: nativeTheme.shouldUseDarkColors,\n\t\t\thighContrast: false\n\t\t};\n\t}\n\n\tgetBackgroundColor(): string {\n\t\tconst colorScheme = this.getColorScheme();\n\t\tif (colorScheme.highContrast && this.configurationService.getValue('window.autoDetectHighContrast')) {\n\t\t\treturn colorScheme.dark ? DEFAULT_BG_HC_BLACK : DEFAULT_BG_HC_LIGHT;\n\t\t}\n\n\t\tlet background = this.stateService.getItem<string | null>(THEME_BG_STORAGE_KEY, null);\n\t\tif (!background) {\n\t\t\tconst baseTheme = this.stateService.getItem<string>(THEME_STORAGE_KEY, 'vs-dark').split(' ')[0];\n\t\t\tswitch (baseTheme) {\n\t\t\t\tcase 'vs': background = DEFAULT_BG_LIGHT; break;\n\t\t\t\tcase 'hc-black': background = DEFAULT_BG_HC_BLACK; break;\n\t\t\t\tcase 'hc-light': background = DEFAULT_BG_HC_LIGHT; break;\n\t\t\t\tdefault: background = DEFAULT_BG_DARK;\n\t\t\t}\n\t\t}\n\n\t\tif (isMacintosh && background.toUpperCase() === DEFAULT_BG_DARK) {\n\t\t\tbackground = '#171717'; // https://github.com/electron/electron/issues/5150\n\t\t}\n\n\t\treturn background;\n\t}\n\n\tsaveWindowSplash(windowId: number | undefined, splash: IPartsSplash): void {\n\n\t\t// Update in storage\n\t\tthis.stateService.setItems([\n\t\t\t{ key: THEME_STORAGE_KEY, data: splash.baseTheme },\n\t\t\t{ key: THEME_BG_STORAGE_KEY, data: splash.colorInfo.background },\n\t\t\t{ key: THEME_WINDOW_SPLASH, data: splash }\n\t\t]);\n\n\t\t// Update in opened windows\n\t\tif (typeof windowId === 'number') {\n\t\t\tthis.updateBackgroundColor(windowId, splash);\n\t\t}\n\t}\n\n\tprivate updateBackgroundColor(windowId: number, splash: IPartsSplash): void {\n\t\tfor (const window of BrowserWindow.getAllWindows()) {\n\t\t\tif (window.id === windowId) {\n\t\t\t\twindow.setBackgroundColor(splash.colorInfo.background);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tgetWindowSplash(): IPartsSplash | undefined {\n\t\treturn this.stateService.getItem<IPartsSplash>(THEME_WINDOW_SPLASH);\n\t}\n}\n"]}