{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/terminal/test/common/terminalRecorder.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAOhG,KAAK,UAAU,WAAW,CAAC,QAAc,EAAc,QAAuB;QAC7E,MAAM,MAAM,GAAG,CAAC,MAAM,QAAQ,CAAC,mBAAmB,EAAE,CAAC,CAAC,MAAM,CAAC;QAC7D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACzC,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;SAC/C;IACF,CAAC;IAED,KAAK,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC9B,IAAA,WAAG,GAAsC,CAAC;QAE1C,IAAI,CAAC,0BAA0B,EAAE,KAAK,IAAI,EAAE;YAC3C,MAAM,QAAQ,GAAG,IAAI,uBAAI,CAAa,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5C,MAAM,WAAW,CAAC,QAAQ,EAAE;gBAC3B,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE;aAC9B,CAAC,CAAC;YACH,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YACzB,QAAQ,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5B,MAAM,WAAW,CAAC,QAAQ,EAAE;gBAC3B,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,GAAG,EAAE;gBAC/B,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE;aAC9B,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,0CAA0C,EAAE,KAAK,IAAI,EAAE;YAC3D,MAAM,QAAQ,GAAG,IAAI,uBAAI,CAAa,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5C,MAAM,WAAW,CAAC,QAAQ,EAAE;gBAC3B,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE;aAC9B,CAAC,CAAC;YACH,QAAQ,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5B,MAAM,WAAW,CAAC,QAAQ,EAAE;gBAC3B,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE;aAC9B,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,kEAAkE,EAAE,KAAK,IAAI,EAAE;YACnF,MAAM,QAAQ,GAAG,IAAI,uBAAI,CAAa,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5C,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YACzB,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YACzB,QAAQ,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC5B,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YACzB,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC;YACzB,MAAM,WAAW,CAAC,QAAQ,EAAE;gBAC3B,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE;gBAChC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE;aAChC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"terminalRecorder.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { ReplayEntry } from 'vs/platform/terminal/common/terminalProcess';\nimport { TerminalRecorder } from 'vs/platform/terminal/common/terminalRecorder';\n\nasync function eventsEqual(recorder: TerminalRecorder, expected: ReplayEntry[]) {\n\tconst actual = (await recorder.generateReplayEvent()).events;\n\tfor (let i = 0; i < expected.length; i++) {\n\t\tassert.deepStrictEqual(actual[i], expected[i]);\n\t}\n}\n\nsuite('TerminalRecorder', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('should record dimensions', async () => {\n\t\tconst recorder = new TerminalRecorder(1, 2);\n\t\tawait eventsEqual(recorder, [\n\t\t\t{ cols: 1, rows: 2, data: '' }\n\t\t]);\n\t\trecorder.handleData('a');\n\t\trecorder.handleResize(3, 4);\n\t\tawait eventsEqual(recorder, [\n\t\t\t{ cols: 1, rows: 2, data: 'a' },\n\t\t\t{ cols: 3, rows: 4, data: '' }\n\t\t]);\n\t});\n\ttest('should ignore resize events without data', async () => {\n\t\tconst recorder = new TerminalRecorder(1, 2);\n\t\tawait eventsEqual(recorder, [\n\t\t\t{ cols: 1, rows: 2, data: '' }\n\t\t]);\n\t\trecorder.handleResize(3, 4);\n\t\tawait eventsEqual(recorder, [\n\t\t\t{ cols: 3, rows: 4, data: '' }\n\t\t]);\n\t});\n\ttest('should record data and combine it into the previous resize event', async () => {\n\t\tconst recorder = new TerminalRecorder(1, 2);\n\t\trecorder.handleData('a');\n\t\trecorder.handleData('b');\n\t\trecorder.handleResize(3, 4);\n\t\trecorder.handleData('c');\n\t\trecorder.handleData('d');\n\t\tawait eventsEqual(recorder, [\n\t\t\t{ cols: 1, rows: 2, data: 'ab' },\n\t\t\t{ cols: 3, rows: 4, data: 'cd' }\n\t\t]);\n\t});\n});\n"]}