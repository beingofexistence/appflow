{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/terminal/test/common/terminalProfiles.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAQhG,KAAK,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAC9B,IAAA,WAAG,GAAsC,CAAC;QAE1C,KAAK,CAAC,0BAA0B,EAAE,GAAG,EAAE;YACtC,IAAI,CAAC,yDAAyD,EAAE,GAAG,EAAE;gBACpE,IAAA,wBAAe,EAAC,IAAA,sBAAG,EAAsB,EAAE,CAAC,EAAE;oBAC7C,MAAM,EAAE;wBACP,IAAI;qBACJ;oBACD,oBAAoB,EAAE;wBACrB,kCAAkC;qBAClC;iBACD,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,wDAAwD,EAAE,GAAG,EAAE;gBACnE,MAAM,OAAO,GAAqB;oBACjC,WAAW,EAAE,MAAM;oBACnB,IAAI,EAAE,MAAM;oBACZ,SAAS,EAAE,IAAI;iBACf,CAAC;gBACF,IAAA,wBAAe,EAAC,IAAA,sBAAG,EAAsB,CAAC,OAAO,CAAC,CAAC,EAAE;oBACpD,MAAM,EAAE;wBACP,IAAI;wBACJ,MAAM;qBACN;oBACD,oBAAoB,EAAE;wBACrB,kCAAkC;wBAClC,gCAAgC;qBAChC;iBACD,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,qCAAqC,EAAE,GAAG,EAAE;gBAChD,MAAM,OAAO,GAAqB;oBACjC,WAAW,EAAE,MAAM;oBACnB,IAAI,EAAE,MAAM;oBACZ,SAAS,EAAE,IAAI;oBACf,IAAI,EAAE,CAAC,GAAG,EAAE,GAAG,CAAC;oBAChB,KAAK,EAAE,kBAAkB;oBACzB,GAAG,EAAE;wBACJ,CAAC,EAAE,GAAG;wBACN,CAAC,EAAE,GAAG;qBACN;oBACD,IAAI,EAAE,cAAG,CAAK,GAAG;oBACjB,YAAY,EAAE,IAAI;iBAClB,CAAC;gBACF,IAAA,wBAAe,EAAC,IAAA,sBAAG,EAAsB,CAAC,OAAO,CAAC,CAAC,EAAE;oBACpD,MAAM,EAAE;wBACP,IAAI;wBACJ,MAAM;qBACN;oBACD,oBAAoB,EAAE;wBACrB,kCAAkC;wBAClC,iIAAiI;qBACjI;iBACD,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,mEAAmE,EAAE,GAAG,EAAE;gBAC9E,MAAM,QAAQ,GAAqB;oBAClC,WAAW,EAAE,MAAM;oBACnB,IAAI,EAAE,MAAM;oBACZ,SAAS,EAAE,IAAI;iBACf,CAAC;gBACF,MAAM,QAAQ,GAAqB;oBAClC,WAAW,EAAE,KAAK;oBAClB,IAAI,EAAE,KAAK;oBACX,SAAS,EAAE,KAAK;iBAChB,CAAC;gBACF,IAAA,wBAAe,EAAC,IAAA,sBAAG,EAAsB,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,EAAE;oBAC/D,MAAM,EAAE;wBACP,IAAI;wBACJ,MAAM;wBACN,KAAK;qBACL;oBACD,oBAAoB,EAAE;wBACrB,kCAAkC;wBAClC,gCAAgC;wBAChC,8BAA8B;qBAC9B;iBACD,CAAC,CAAC;YACJ,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"terminalProfiles.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { deepStrictEqual } from 'assert';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { ITerminalProfile } from 'vs/platform/terminal/common/terminal';\nimport { createProfileSchemaEnums } from 'vs/platform/terminal/common/terminalProfiles';\n\nsuite('terminalProfiles', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('createProfileSchemaEnums', () => {\n\t\ttest('should return an empty array when there are no profiles', () => {\n\t\t\tdeepStrictEqual(createProfileSchemaEnums([]), {\n\t\t\t\tvalues: [\n\t\t\t\t\tnull\n\t\t\t\t],\n\t\t\t\tmarkdownDescriptions: [\n\t\t\t\t\t'Automatically detect the default'\n\t\t\t\t]\n\t\t\t});\n\t\t});\n\t\ttest('should return a single entry when there is one profile', () => {\n\t\t\tconst profile: ITerminalProfile = {\n\t\t\t\tprofileName: 'name',\n\t\t\t\tpath: 'path',\n\t\t\t\tisDefault: true\n\t\t\t};\n\t\t\tdeepStrictEqual(createProfileSchemaEnums([profile]), {\n\t\t\t\tvalues: [\n\t\t\t\t\tnull,\n\t\t\t\t\t'name'\n\t\t\t\t],\n\t\t\t\tmarkdownDescriptions: [\n\t\t\t\t\t'Automatically detect the default',\n\t\t\t\t\t'$(terminal) name\\n- path: path'\n\t\t\t\t]\n\t\t\t});\n\t\t});\n\t\ttest('should show all profile information', () => {\n\t\t\tconst profile: ITerminalProfile = {\n\t\t\t\tprofileName: 'name',\n\t\t\t\tpath: 'path',\n\t\t\t\tisDefault: true,\n\t\t\t\targs: ['a', 'b'],\n\t\t\t\tcolor: 'terminal.ansiRed',\n\t\t\t\tenv: {\n\t\t\t\t\tc: 'd',\n\t\t\t\t\te: 'f'\n\t\t\t\t},\n\t\t\t\ticon: Codicon.zap,\n\t\t\t\toverrideName: true\n\t\t\t};\n\t\t\tdeepStrictEqual(createProfileSchemaEnums([profile]), {\n\t\t\t\tvalues: [\n\t\t\t\t\tnull,\n\t\t\t\t\t'name'\n\t\t\t\t],\n\t\t\t\tmarkdownDescriptions: [\n\t\t\t\t\t'Automatically detect the default',\n\t\t\t\t\t`$(zap) name\\n- path: path\\n- args: ['a','b']\\n- overrideName: true\\n- color: terminal.ansiRed\\n- env: {\\\"c\\\":\\\"d\\\",\\\"e\\\":\\\"f\\\"}`\n\t\t\t\t]\n\t\t\t});\n\t\t});\n\t\ttest('should return a multiple entries when there are multiple profiles', () => {\n\t\t\tconst profile1: ITerminalProfile = {\n\t\t\t\tprofileName: 'name',\n\t\t\t\tpath: 'path',\n\t\t\t\tisDefault: true\n\t\t\t};\n\t\t\tconst profile2: ITerminalProfile = {\n\t\t\t\tprofileName: 'foo',\n\t\t\t\tpath: 'bar',\n\t\t\t\tisDefault: false\n\t\t\t};\n\t\t\tdeepStrictEqual(createProfileSchemaEnums([profile1, profile2]), {\n\t\t\t\tvalues: [\n\t\t\t\t\tnull,\n\t\t\t\t\t'name',\n\t\t\t\t\t'foo'\n\t\t\t\t],\n\t\t\t\tmarkdownDescriptions: [\n\t\t\t\t\t'Automatically detect the default',\n\t\t\t\t\t'$(terminal) name\\n- path: path',\n\t\t\t\t\t'$(terminal) foo\\n- path: bar'\n\t\t\t\t]\n\t\t\t});\n\t\t});\n\t});\n});\n"]}