{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/terminal/test/common/requestStore.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAUhG,KAAK,CAAC,cAAc,EAAE,GAAG,EAAE;QAC1B,IAAI,WAAgB,CAAa;QACjC,IAAI,oBAA0B,CAAqB;QAEnD,KAAK,CAAC,GAAG,EAAE;YACV,WAAW,GAAG,IAAI,eAAG,EAAc,CAAC;YACpC,oBAAoB,GAAG,IAAI,+BAAI,EAAsB,CAAC;YACtD,oBAAoB,CAAC,IAAI,CAAC,SAAG,EAAU,IAAI,gBAAG,CAAQ,IAAI,SAAG,EAAY,CAAC,CAAC,CAAC;QAC7E,CAAC,CAAC,CAAC;QAEH,QAAQ,CAAC,GAAG,EAAE;YACb,oBAAoB,CAAC,OAAO,EAAE,CAAC;YAC/B,WAAW,CAAC,OAAO,EAAE,CAAC;QACvB,CAAC,CAAC,CAAC;QAEH,IAAA,WAAG,GAAsC,CAAC;QAE1C,IAAI,CAAC,yBAAyB,EAAE,KAAK,IAAI,EAAE;YAC1C,MAAM,KAAK,GAAoD,WAAW,CAAC,GAAG,CAAC,oBAAoB,CAAC,cAAc,CAAC,CAAA,kBAA+C,CAAA,EAAE,SAAS,CAAC,CAAC,CAAC;YAChL,IAAI,SAAyD,CAAC;YAC9D,WAAW,CAAC,GAAG,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC;YAC3D,MAAM,OAAO,GAAG,KAAK,CAAC,aAAa,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC;YACpD,IAAA,oBAAW,EAAC,OAAO,SAAS,EAAE,SAAS,EAAE,QAAQ,CAAC,CAAC;YACnD,IAAA,oBAAW,EAAC,SAAS,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;YACnC,KAAK,CAAC,WAAW,CAAC,SAAU,CAAC,SAAS,EAAE,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;YACzD,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC;YAC7B,IAAA,oBAAW,EAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,sDAAsD,EAAE,KAAK,IAAI,EAAE;YACvE,MAAM,KAAK,GAAoD,WAAW,CAAC,GAAG,CAAC,oBAAoB,CAAC,cAAc,CAAC,CAAA,kBAA+C,CAAA,EAAE,CAAC,CAAC,CAAC,CAAC;YACxK,MAAM,OAAO,GAAG,KAAK,CAAC,aAAa,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,CAAC,CAAC;YACpD,IAAI,KAAK,GAAG,KAAK,CAAC;YAClB,IAAI;gBACH,MAAM,OAAO,CAAC;aACd;YAAC,OAAO,CAAC,EAAE;gBACX,KAAK,GAAG,IAAI,CAAC;aACb;YACD,IAAI,CAAC,KAAK,EAAE;gBACX,IAAA,aAAI,GAAE,CAAC;aACP;QACF,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"requestStore.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { fail, strictEqual } from 'assert';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { TestInstantiationService } from 'vs/platform/instantiation/test/common/instantiationServiceMock';\nimport { ConsoleLogger, ILogService } from 'vs/platform/log/common/log';\nimport { LogService } from 'vs/platform/log/common/logService';\nimport { RequestStore } from 'vs/platform/terminal/common/requestStore';\n\nsuite('RequestStore', () => {\n\tlet disposables: DisposableStore;\n\tlet instantiationService: TestInstantiationService;\n\n\tsetup(() => {\n\t\tdisposables = new DisposableStore();\n\t\tinstantiationService = new TestInstantiationService();\n\t\tinstantiationService.stub(ILogService, new LogService(new ConsoleLogger()));\n\t});\n\n\tteardown(() => {\n\t\tinstantiationService.dispose();\n\t\tdisposables.dispose();\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('should resolve requests', async () => {\n\t\tconst store: RequestStore<{ data: string }, { arg: string }> = disposables.add(instantiationService.createInstance(RequestStore<{ data: string }, { arg: string }>, undefined));\n\t\tlet eventArgs: { requestId: number; arg: string } | undefined;\n\t\tdisposables.add(store.onCreateRequest(e => eventArgs = e));\n\t\tconst request = store.createRequest({ arg: 'foo' });\n\t\tstrictEqual(typeof eventArgs?.requestId, 'number');\n\t\tstrictEqual(eventArgs?.arg, 'foo');\n\t\tstore.acceptReply(eventArgs!.requestId, { data: 'bar' });\n\t\tconst result = await request;\n\t\tstrictEqual(result.data, 'bar');\n\t});\n\n\ttest('should reject the promise when the request times out', async () => {\n\t\tconst store: RequestStore<{ data: string }, { arg: string }> = disposables.add(instantiationService.createInstance(RequestStore<{ data: string }, { arg: string }>, 1));\n\t\tconst request = store.createRequest({ arg: 'foo' });\n\t\tlet threw = false;\n\t\ttry {\n\t\t\tawait request;\n\t\t} catch (e) {\n\t\t\tthrew = true;\n\t\t}\n\t\tif (!threw) {\n\t\t\tfail();\n\t\t}\n\t});\n});\n"]}