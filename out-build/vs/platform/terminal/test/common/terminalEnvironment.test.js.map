{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/terminal/test/common/terminalEnvironment.test.ts"],"names":[],"mappings":"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","file":"terminalEnvironment.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { strictEqual } from 'assert';\nimport { OperatingSystem, OS } from 'vs/base/common/platform';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { collapseTildePath, sanitizeCwd } from 'vs/platform/terminal/common/terminalEnvironment';\n\nsuite('terminalEnvironment', () => {\n\tensureNoDisposablesAreLeakedInTestSuite();\n\n\tsuite('collapseTildePath', () => {\n\t\ttest('should return empty string for a falsy path', () => {\n\t\t\tstrictEqual(collapseTildePath('', '/foo', '/'), '');\n\t\t\tstrictEqual(collapseTildePath(undefined, '/foo', '/'), '');\n\t\t});\n\t\ttest('should return path for a falsy user home', () => {\n\t\t\tstrictEqual(collapseTildePath('/foo', '', '/'), '/foo');\n\t\t\tstrictEqual(collapseTildePath('/foo', undefined, '/'), '/foo');\n\t\t});\n\t\ttest('should not collapse when user home isn\\'t present', () => {\n\t\t\tstrictEqual(collapseTildePath('/foo', '/bar', '/'), '/foo');\n\t\t\tstrictEqual(collapseTildePath('C:\\\\foo', 'C:\\\\bar', '\\\\'), 'C:\\\\foo');\n\t\t});\n\t\ttest('should collapse with Windows separators', () => {\n\t\t\tstrictEqual(collapseTildePath('C:\\\\foo\\\\bar', 'C:\\\\foo', '\\\\'), '~\\\\bar');\n\t\t\tstrictEqual(collapseTildePath('C:\\\\foo\\\\bar', 'C:\\\\foo\\\\', '\\\\'), '~\\\\bar');\n\t\t\tstrictEqual(collapseTildePath('C:\\\\foo\\\\bar\\\\baz', 'C:\\\\foo\\\\', '\\\\'), '~\\\\bar\\\\baz');\n\t\t\tstrictEqual(collapseTildePath('C:\\\\foo\\\\bar\\\\baz', 'C:\\\\foo', '\\\\'), '~\\\\bar\\\\baz');\n\t\t});\n\t\ttest('should collapse mixed case with Windows separators', () => {\n\t\t\tstrictEqual(collapseTildePath('c:\\\\foo\\\\bar', 'C:\\\\foo', '\\\\'), '~\\\\bar');\n\t\t\tstrictEqual(collapseTildePath('C:\\\\foo\\\\bar\\\\baz', 'c:\\\\foo', '\\\\'), '~\\\\bar\\\\baz');\n\t\t});\n\t\ttest('should collapse with Posix separators', () => {\n\t\t\tstrictEqual(collapseTildePath('/foo/bar', '/foo', '/'), '~/bar');\n\t\t\tstrictEqual(collapseTildePath('/foo/bar', '/foo/', '/'), '~/bar');\n\t\t\tstrictEqual(collapseTildePath('/foo/bar/baz', '/foo', '/'), '~/bar/baz');\n\t\t\tstrictEqual(collapseTildePath('/foo/bar/baz', '/foo/', '/'), '~/bar/baz');\n\t\t});\n\t});\n\tsuite('sanitizeCwd', () => {\n\t\tif (OS === OperatingSystem.Windows) {\n\t\t\ttest('should make the Windows drive letter uppercase', () => {\n\t\t\t\tstrictEqual(sanitizeCwd('c:\\\\foo\\\\bar'), 'C:\\\\foo\\\\bar');\n\t\t\t});\n\t\t}\n\t\ttest('should remove any wrapping quotes', () => {\n\t\t\tstrictEqual(sanitizeCwd('\\'/foo/bar\\''), '/foo/bar');\n\t\t\tstrictEqual(sanitizeCwd('\"/foo/bar\"'), '/foo/bar');\n\t\t});\n\t});\n});\n"]}