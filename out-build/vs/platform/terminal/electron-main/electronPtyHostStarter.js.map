{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/terminal/electron-main/electronPtyHostStarter.ts"],"names":[],"mappings":"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","file":"electronPtyHostStarter.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IEnvironmentMainService } from 'vs/platform/environment/electron-main/environmentMainService';\nimport { parsePtyHostDebugPort } from 'vs/platform/environment/node/environmentService';\nimport { ILifecycleMainService } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { NullTelemetryService } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { IReconnectConstants, TerminalSettingId } from 'vs/platform/terminal/common/terminal';\nimport { IPtyHostConnection, IPtyHostStarter } from 'vs/platform/terminal/node/ptyHost';\nimport { UtilityProcess } from 'vs/platform/utilityProcess/electron-main/utilityProcess';\nimport { Client as MessagePortClient } from 'vs/base/parts/ipc/electron-main/ipc.mp';\nimport { IpcMainEvent } from 'electron';\nimport { validatedIpcMain } from 'vs/base/parts/ipc/electron-main/ipcMain';\nimport { Disposable, DisposableStore, toDisposable } from 'vs/base/common/lifecycle';\nimport { Emitter } from 'vs/base/common/event';\nimport { deepClone } from 'vs/base/common/objects';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { Schemas } from 'vs/base/common/network';\n\nexport class ElectronPtyHostStarter extends Disposable implements IPtyHostStarter {\n\n\tprivate utilityProcess: UtilityProcess | undefined = undefined;\n\n\tprivate readonly _onRequestConnection = new Emitter<void>();\n\treadonly onRequestConnection = this._onRequestConnection.event;\n\tprivate readonly _onWillShutdown = new Emitter<void>();\n\treadonly onWillShutdown = this._onWillShutdown.event;\n\n\tconstructor(\n\t\tprivate readonly _reconnectConstants: IReconnectConstants,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@IEnvironmentMainService private readonly _environmentMainService: IEnvironmentMainService,\n\t\t@ILifecycleMainService private readonly _lifecycleMainService: ILifecycleMainService,\n\t\t@ILogService private readonly _logService: ILogService\n\t) {\n\t\tsuper();\n\n\t\tthis._lifecycleMainService.onWillShutdown(() => this._onWillShutdown.fire());\n\t\t// Listen for new windows to establish connection directly to pty host\n\t\tvalidatedIpcMain.on('vscode:createPtyHostMessageChannel', (e, nonce) => this._onWindowConnection(e, nonce));\n\t\tthis._register(toDisposable(() => {\n\t\t\tvalidatedIpcMain.removeHandler('vscode:createPtyHostMessageChannel');\n\t\t}));\n\t}\n\n\tstart(): IPtyHostConnection {\n\t\tthis.utilityProcess = new UtilityProcess(this._logService, NullTelemetryService, this._lifecycleMainService);\n\n\t\tconst inspectParams = parsePtyHostDebugPort(this._environmentMainService.args, this._environmentMainService.isBuilt);\n\t\tconst execArgv = inspectParams.port ? [\n\t\t\t'--nolazy',\n\t\t\t`--inspect${inspectParams.break ? '-brk' : ''}=${inspectParams.port}`\n\t\t] : undefined;\n\n\t\tthis.utilityProcess.start({\n\t\t\ttype: 'ptyHost',\n\t\t\tentryPoint: 'vs/platform/terminal/node/ptyHostMain',\n\t\t\texecArgv,\n\t\t\targs: ['--logsPath', this._environmentMainService.logsHome.with({ scheme: Schemas.file }).fsPath],\n\t\t\tenv: this._createPtyHostConfiguration()\n\t\t});\n\n\t\tconst port = this.utilityProcess.connect();\n\t\tconst client = new MessagePortClient(port, 'ptyHost');\n\n\t\tconst store = new DisposableStore();\n\t\tstore.add(client);\n\t\tstore.add(toDisposable(() => {\n\t\t\tthis.utilityProcess?.kill();\n\t\t\tthis.utilityProcess?.dispose();\n\t\t\tthis.utilityProcess = undefined;\n\t\t}));\n\n\t\treturn {\n\t\t\tclient,\n\t\t\tstore,\n\t\t\tonDidProcessExit: this.utilityProcess.onExit\n\t\t};\n\t}\n\n\tprivate _createPtyHostConfiguration() {\n\t\tthis._environmentMainService.unsetSnapExportedVariables();\n\t\tconst config: { [key: string]: string } = {\n\t\t\t...deepClone(process.env),\n\t\t\tVSCODE_AMD_ENTRYPOINT: 'vs/platform/terminal/node/ptyHostMain',\n\t\t\tVSCODE_PIPE_LOGGING: 'true',\n\t\t\tVSCODE_VERBOSE_LOGGING: 'true', // transmit console logs from server to client,\n\t\t\tVSCODE_RECONNECT_GRACE_TIME: String(this._reconnectConstants.graceTime),\n\t\t\tVSCODE_RECONNECT_SHORT_GRACE_TIME: String(this._reconnectConstants.shortGraceTime),\n\t\t\tVSCODE_RECONNECT_SCROLLBACK: String(this._reconnectConstants.scrollback),\n\t\t};\n\t\tconst simulatedLatency = this._configurationService.getValue(TerminalSettingId.DeveloperPtyHostLatency);\n\t\tif (simulatedLatency && typeof simulatedLatency === 'number') {\n\t\t\tconfig.VSCODE_LATENCY = String(simulatedLatency);\n\t\t}\n\t\tconst startupDelay = this._configurationService.getValue(TerminalSettingId.DeveloperPtyHostStartupDelay);\n\t\tif (startupDelay && typeof startupDelay === 'number') {\n\t\t\tconfig.VSCODE_STARTUP_DELAY = String(startupDelay);\n\t\t}\n\t\tthis._environmentMainService.restoreSnapExportedVariables();\n\t\treturn config;\n\t}\n\n\tprivate _onWindowConnection(e: IpcMainEvent, nonce: string) {\n\t\tthis._onRequestConnection.fire();\n\n\t\tconst port = this.utilityProcess!.connect();\n\n\t\t// Check back if the requesting window meanwhile closed\n\t\t// Since shared process is delayed on startup there is\n\t\t// a chance that the window close before the shared process\n\t\t// was ready for a connection.\n\n\t\tif (e.sender.isDestroyed()) {\n\t\t\tport.close();\n\t\t\treturn;\n\t\t}\n\n\t\te.sender.postMessage('vscode:createPtyHostMessageChannelResult', nonce, [port]);\n\t}\n}\n"]}