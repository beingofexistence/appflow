{"version":3,"sources":["vs/platform/terminal/node/terminalProcess.ts"],"names":[],"mappings":"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","file":"terminalProcess.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { exec } from 'child_process';\nimport { timeout } from 'vs/base/common/async';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, toDisposable } from 'vs/base/common/lifecycle';\nimport * as path from 'vs/base/common/path';\nimport { IProcessEnvironment, isLinux, isMacintosh, isWindows } from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { Promises } from 'vs/base/node/pfs';\nimport { localize } from 'vs/nls';\nimport { ILogService, LogLevel } from 'vs/platform/log/common/log';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { FlowControlConstants, IShellLaunchConfig, ITerminalChildProcess, ITerminalLaunchError, IProcessProperty, IProcessPropertyMap as IProcessPropertyMap, ProcessPropertyType, TerminalShellType, IProcessReadyEvent, ITerminalProcessOptions, PosixShellType, IProcessReadyWindowsPty } from 'vs/platform/terminal/common/terminal';\nimport { ChildProcessMonitor } from 'vs/platform/terminal/node/childProcessMonitor';\nimport { findExecutable, getShellIntegrationInjection, getWindowsBuildNumber, IShellIntegrationConfigInjection } from 'vs/platform/terminal/node/terminalEnvironment';\nimport { WindowsShellHelper } from 'vs/platform/terminal/node/windowsShellHelper';\nimport { IPty, IPtyForkOptions, IWindowsPtyForkOptions, spawn } from 'node-pty';\n\nconst enum ShutdownConstants {\n\t/**\n\t * The amount of ms that must pass between data events after exit is queued before the actual\n\t * kill call is triggered. This data flush mechanism works around an [issue in node-pty][1]\n\t * where not all data is flushed which causes problems for task problem matchers. Additionally\n\t * on Windows under conpty, killing a process while data is being output will cause the [conhost\n\t * flush to hang the pty host][2] because [conhost should be hosted on another thread][3].\n\t *\n\t * [1]: https://github.com/Tyriar/node-pty/issues/72\n\t * [2]: https://github.com/microsoft/vscode/issues/71966\n\t * [3]: https://github.com/microsoft/node-pty/pull/415\n\t */\n\tDataFlushTimeout = 250,\n\t/**\n\t * The maximum ms to allow after dispose is called because forcefully killing the process.\n\t */\n\tMaximumShutdownTime = 5000\n}\n\nconst enum Constants {\n\t/**\n\t * The minimum duration between kill and spawn calls on Windows/conpty as a mitigation for a\n\t * hang issue. See:\n\t * - https://github.com/microsoft/vscode/issues/71966\n\t * - https://github.com/microsoft/vscode/issues/117956\n\t * - https://github.com/microsoft/vscode/issues/121336\n\t */\n\tKillSpawnThrottleInterval = 250,\n\t/**\n\t * The amount of time to wait when a call is throttles beyond the exact amount, this is used to\n\t * try prevent early timeouts causing a kill/spawn call to happen at double the regular\n\t * interval.\n\t */\n\tKillSpawnSpacingDuration = 50,\n\n\t/**\n\t * Writing large amounts of data can be corrupted for some reason, after looking into this is\n\t * appears to be a race condition around writing to the FD which may be based on how powerful\n\t * the hardware is. The workaround for this is to space out when large amounts of data is being\n\t * written to the terminal. See https://github.com/microsoft/vscode/issues/38137\n\t */\n\tWriteMaxChunkSize = 50,\n\t/**\n\t * How long to wait between chunk writes.\n\t */\n\tWriteInterval = 5,\n}\n\ninterface IWriteObject {\n\tdata: string;\n\tisBinary: boolean;\n}\n\nconst posixShellTypeMap = new Map<string, PosixShellType>([\n\t['bash', PosixShellType.Bash],\n\t['csh', PosixShellType.Csh],\n\t['fish', PosixShellType.Fish],\n\t['ksh', PosixShellType.Ksh],\n\t['sh', PosixShellType.Sh],\n\t['pwsh', PosixShellType.PowerShell],\n\t['zsh', PosixShellType.Zsh]\n]);\n\nexport class TerminalProcess extends Disposable implements ITerminalChildProcess {\n\treadonly id = 0;\n\treadonly shouldPersist = false;\n\n\tprivate _properties: IProcessPropertyMap = {\n\t\tcwd: '',\n\t\tinitialCwd: '',\n\t\tfixedDimensions: { cols: undefined, rows: undefined },\n\t\ttitle: '',\n\t\tshellType: undefined,\n\t\thasChildProcesses: true,\n\t\tresolvedShellLaunchConfig: {},\n\t\toverrideDimensions: undefined,\n\t\tfailedShellIntegrationActivation: false,\n\t\tusedShellIntegrationInjection: undefined\n\t};\n\tprivate static _lastKillOrStart = 0;\n\tprivate _exitCode: number | undefined;\n\tprivate _exitMessage: string | undefined;\n\tprivate _closeTimeout: any;\n\tprivate _ptyProcess: IPty | undefined;\n\tprivate _currentTitle: string = '';\n\tprivate _processStartupComplete: Promise<void> | undefined;\n\tprivate _windowsShellHelper: WindowsShellHelper | undefined;\n\tprivate _childProcessMonitor: ChildProcessMonitor | undefined;\n\tprivate _titleInterval: NodeJS.Timer | null = null;\n\tprivate _writeQueue: IWriteObject[] = [];\n\tprivate _writeTimeout: NodeJS.Timeout | undefined;\n\tprivate _delayedResizer: DelayedResizer | undefined;\n\tprivate readonly _initialCwd: string;\n\tprivate readonly _ptyOptions: IPtyForkOptions | IWindowsPtyForkOptions;\n\n\tprivate _isPtyPaused: boolean = false;\n\tprivate _unacknowledgedCharCount: number = 0;\n\tget exitMessage(): string | undefined { return this._exitMessage; }\n\n\tget currentTitle(): string { return this._windowsShellHelper?.shellTitle || this._currentTitle; }\n\tget shellType(): TerminalShellType | undefined { return isWindows ? this._windowsShellHelper?.shellType : posixShellTypeMap.get(this._currentTitle); }\n\tget hasChildProcesses(): boolean { return this._childProcessMonitor?.hasChildProcesses || false; }\n\n\tprivate readonly _onProcessData = this._register(new Emitter<string>());\n\treadonly onProcessData = this._onProcessData.event;\n\tprivate readonly _onProcessReady = this._register(new Emitter<IProcessReadyEvent>());\n\treadonly onProcessReady = this._onProcessReady.event;\n\tprivate readonly _onDidChangeProperty = this._register(new Emitter<IProcessProperty<any>>());\n\treadonly onDidChangeProperty = this._onDidChangeProperty.event;\n\tprivate readonly _onProcessExit = this._register(new Emitter<number>());\n\treadonly onProcessExit = this._onProcessExit.event;\n\n\tconstructor(\n\t\treadonly shellLaunchConfig: IShellLaunchConfig,\n\t\tcwd: string,\n\t\tcols: number,\n\t\trows: number,\n\t\tenv: IProcessEnvironment,\n\t\t/**\n\t\t * environment used for `findExecutable`\n\t\t */\n\t\tprivate readonly _executableEnv: IProcessEnvironment,\n\t\tprivate readonly _options: ITerminalProcessOptions,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@IProductService private readonly _productService: IProductService\n\t) {\n\t\tsuper();\n\t\tlet name: string;\n\t\tif (isWindows) {\n\t\t\tname = path.basename(this.shellLaunchConfig.executable || '');\n\t\t} else {\n\t\t\t// Using 'xterm-256color' here helps ensure that the majority of Linux distributions will use a\n\t\t\t// color prompt as defined in the default ~/.bashrc file.\n\t\t\tname = 'xterm-256color';\n\t\t}\n\t\tthis._initialCwd = cwd;\n\t\tthis._properties[ProcessPropertyType.InitialCwd] = this._initialCwd;\n\t\tthis._properties[ProcessPropertyType.Cwd] = this._initialCwd;\n\t\tconst useConpty = this._options.windowsEnableConpty && process.platform === 'win32' && getWindowsBuildNumber() >= 18309;\n\t\tthis._ptyOptions = {\n\t\t\tname,\n\t\t\tcwd,\n\t\t\t// TODO: When node-pty is updated this cast can be removed\n\t\t\tenv: env as { [key: string]: string },\n\t\t\tcols,\n\t\t\trows,\n\t\t\tuseConpty,\n\t\t\t// This option will force conpty to not redraw the whole viewport on launch\n\t\t\tconptyInheritCursor: useConpty && !!shellLaunchConfig.initialText\n\t\t};\n\t\t// Delay resizes to avoid conpty not respecting very early resize calls\n\t\tif (isWindows) {\n\t\t\tif (useConpty && cols === 0 && rows === 0 && this.shellLaunchConfig.executable?.endsWith('Git\\\\bin\\\\bash.exe')) {\n\t\t\t\tthis._delayedResizer = new DelayedResizer();\n\t\t\t\tthis._register(this._delayedResizer.onTrigger(dimensions => {\n\t\t\t\t\tthis._delayedResizer?.dispose();\n\t\t\t\t\tthis._delayedResizer = undefined;\n\t\t\t\t\tif (dimensions.cols && dimensions.rows) {\n\t\t\t\t\t\tthis.resize(dimensions.cols, dimensions.rows);\n\t\t\t\t\t}\n\t\t\t\t}));\n\t\t\t}\n\t\t\t// WindowsShellHelper is used to fetch the process title and shell type\n\t\t\tthis.onProcessReady(e => {\n\t\t\t\tthis._windowsShellHelper = this._register(new WindowsShellHelper(e.pid));\n\t\t\t\tthis._register(this._windowsShellHelper.onShellTypeChanged(e => this._onDidChangeProperty.fire({ type: ProcessPropertyType.ShellType, value: e })));\n\t\t\t\tthis._register(this._windowsShellHelper.onShellNameChanged(e => this._onDidChangeProperty.fire({ type: ProcessPropertyType.Title, value: e })));\n\t\t\t});\n\t\t}\n\t\tthis._register(toDisposable(() => {\n\t\t\tif (this._titleInterval) {\n\t\t\t\tclearInterval(this._titleInterval);\n\t\t\t\tthis._titleInterval = null;\n\t\t\t}\n\t\t}));\n\t}\n\n\tasync start(): Promise<ITerminalLaunchError | { injectedArgs: string[] } | undefined> {\n\t\tconst results = await Promise.all([this._validateCwd(), this._validateExecutable()]);\n\t\tconst firstError = results.find(r => r !== undefined);\n\t\tif (firstError) {\n\t\t\treturn firstError;\n\t\t}\n\n\t\tlet injection: IShellIntegrationConfigInjection | undefined;\n\t\tif (this._options.shellIntegration.enabled) {\n\t\t\tinjection = getShellIntegrationInjection(this.shellLaunchConfig, this._options, this._ptyOptions.env, this._logService, this._productService);\n\t\t\tif (injection) {\n\t\t\t\tthis._onDidChangeProperty.fire({ type: ProcessPropertyType.UsedShellIntegrationInjection, value: true });\n\t\t\t\tif (injection.envMixin) {\n\t\t\t\t\tfor (const [key, value] of Object.entries(injection.envMixin)) {\n\t\t\t\t\t\tthis._ptyOptions.env ||= {};\n\t\t\t\t\t\tthis._ptyOptions.env[key] = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (injection.filesToCopy) {\n\t\t\t\t\tfor (const f of injection.filesToCopy) {\n\t\t\t\t\t\tawait Promises.mkdir(path.dirname(f.dest), { recursive: true });\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tawait Promises.copyFile(f.source, f.dest);\n\t\t\t\t\t\t} catch {\n\t\t\t\t\t\t\t// Swallow error, this should only happen when multiple users are on the same\n\t\t\t\t\t\t\t// machine. Since the shell integration scripts rarely change, plus the other user\n\t\t\t\t\t\t\t// should be using the same version of the server in this case, assume the script is\n\t\t\t\t\t\t\t// fine if copy fails and swallow the error.\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._onDidChangeProperty.fire({ type: ProcessPropertyType.FailedShellIntegrationActivation, value: true });\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.setupPtyProcess(this.shellLaunchConfig, this._ptyOptions, injection);\n\t\t\tif (injection?.newArgs) {\n\t\t\t\treturn { injectedArgs: injection.newArgs };\n\t\t\t}\n\t\t\treturn undefined;\n\t\t} catch (err) {\n\t\t\tthis._logService.trace('node-pty.node-pty.IPty#spawn native exception', err);\n\t\t\treturn { message: `A native exception occurred during launch (${err.message})` };\n\t\t}\n\t}\n\n\tprivate async _validateCwd(): Promise<undefined | ITerminalLaunchError> {\n\t\ttry {\n\t\t\tconst result = await Promises.stat(this._initialCwd);\n\t\t\tif (!result.isDirectory()) {\n\t\t\t\treturn { message: localize('launchFail.cwdNotDirectory', \"Starting directory (cwd) \\\"{0}\\\" is not a directory\", this._initialCwd.toString()) };\n\t\t\t}\n\t\t} catch (err) {\n\t\t\tif (err?.code === 'ENOENT') {\n\t\t\t\treturn { message: localize('launchFail.cwdDoesNotExist', \"Starting directory (cwd) \\\"{0}\\\" does not exist\", this._initialCwd.toString()) };\n\t\t\t}\n\t\t}\n\t\tthis._onDidChangeProperty.fire({ type: ProcessPropertyType.InitialCwd, value: this._initialCwd });\n\t\treturn undefined;\n\t}\n\n\tprivate async _validateExecutable(): Promise<undefined | ITerminalLaunchError> {\n\t\tconst slc = this.shellLaunchConfig;\n\t\tif (!slc.executable) {\n\t\t\tthrow new Error('IShellLaunchConfig.executable not set');\n\t\t}\n\n\t\tconst cwd = slc.cwd instanceof URI ? slc.cwd.path : slc.cwd;\n\t\tconst envPaths: string[] | undefined = (slc.env && slc.env.PATH) ? slc.env.PATH.split(path.delimiter) : undefined;\n\t\tconst executable = await findExecutable(slc.executable!, cwd, envPaths, this._executableEnv);\n\t\tif (!executable) {\n\t\t\treturn { message: localize('launchFail.executableDoesNotExist', \"Path to shell executable \\\"{0}\\\" does not exist\", slc.executable) };\n\t\t}\n\n\t\ttry {\n\t\t\tconst result = await Promises.stat(executable);\n\t\t\tif (!result.isFile() && !result.isSymbolicLink()) {\n\t\t\t\treturn { message: localize('launchFail.executableIsNotFileOrSymlink', \"Path to shell executable \\\"{0}\\\" is not a file or a symlink\", slc.executable) };\n\t\t\t}\n\t\t\t// Set the executable explicitly here so that node-pty doesn't need to search the\n\t\t\t// $PATH too.\n\t\t\tslc.executable = executable;\n\t\t} catch (err) {\n\t\t\tif (err?.code === 'EACCES') {\n\t\t\t\t// Swallow\n\t\t\t} else {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t}\n\n\tprivate async setupPtyProcess(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\toptions: IPtyForkOptions,\n\t\tshellIntegrationInjection: IShellIntegrationConfigInjection | undefined\n\t): Promise<void> {\n\t\tconst args = shellIntegrationInjection?.newArgs || shellLaunchConfig.args || [];\n\t\tawait this._throttleKillSpawn();\n\t\tthis._logService.trace('node-pty.IPty#spawn', shellLaunchConfig.executable, args, options);\n\t\tconst ptyProcess = spawn(shellLaunchConfig.executable!, args, options);\n\t\tthis._ptyProcess = ptyProcess;\n\t\tthis._childProcessMonitor = this._register(new ChildProcessMonitor(ptyProcess.pid, this._logService));\n\t\tthis._childProcessMonitor.onDidChangeHasChildProcesses(value => this._onDidChangeProperty.fire({ type: ProcessPropertyType.HasChildProcesses, value }));\n\t\tthis._processStartupComplete = new Promise<void>(c => {\n\t\t\tthis.onProcessReady(() => c());\n\t\t});\n\t\tptyProcess.onData(data => {\n\t\t\t// Handle flow control\n\t\t\tthis._unacknowledgedCharCount += data.length;\n\t\t\tif (!this._isPtyPaused && this._unacknowledgedCharCount > FlowControlConstants.HighWatermarkChars) {\n\t\t\t\tthis._logService.trace(`Flow control: Pause (${this._unacknowledgedCharCount} > ${FlowControlConstants.HighWatermarkChars})`);\n\t\t\t\tthis._isPtyPaused = true;\n\t\t\t\tptyProcess.pause();\n\t\t\t}\n\n\t\t\t// Refire the data event\n\t\t\tthis._logService.trace('node-pty.IPty#onData', data);\n\t\t\tthis._onProcessData.fire(data);\n\t\t\tif (this._closeTimeout) {\n\t\t\t\tthis._queueProcessExit();\n\t\t\t}\n\t\t\tthis._windowsShellHelper?.checkShell();\n\t\t\tthis._childProcessMonitor?.handleOutput();\n\t\t});\n\t\tptyProcess.onExit(e => {\n\t\t\tthis._exitCode = e.exitCode;\n\t\t\tthis._queueProcessExit();\n\t\t});\n\t\tthis._sendProcessId(ptyProcess.pid);\n\t\tthis._setupTitlePolling(ptyProcess);\n\t}\n\n\tprivate _setupTitlePolling(ptyProcess: IPty) {\n\t\t// Send initial timeout async to give event listeners a chance to init\n\t\tsetTimeout(() => this._sendProcessTitle(ptyProcess));\n\t\t// Setup polling for non-Windows, for Windows `process` doesn't change\n\t\tif (!isWindows) {\n\t\t\tthis._titleInterval = setInterval(() => {\n\t\t\t\tif (this._currentTitle !== ptyProcess.process) {\n\t\t\t\t\tthis._sendProcessTitle(ptyProcess);\n\t\t\t\t}\n\t\t\t}, 200);\n\t\t}\n\t}\n\n\t// Allow any trailing data events to be sent before the exit event is sent.\n\t// See https://github.com/Tyriar/node-pty/issues/72\n\tprivate _queueProcessExit() {\n\t\tif (this._logService.getLevel() === LogLevel.Trace) {\n\t\t\tthis._logService.trace('TerminalProcess#_queueProcessExit', new Error().stack?.replace(/^Error/, ''));\n\t\t}\n\t\tif (this._closeTimeout) {\n\t\t\tclearTimeout(this._closeTimeout);\n\t\t}\n\t\tthis._closeTimeout = setTimeout(() => {\n\t\t\tthis._closeTimeout = undefined;\n\t\t\tthis._kill();\n\t\t}, ShutdownConstants.DataFlushTimeout);\n\t}\n\n\tprivate async _kill(): Promise<void> {\n\t\t// Wait to kill to process until the start up code has run. This prevents us from firing a process exit before a\n\t\t// process start.\n\t\tawait this._processStartupComplete;\n\t\tif (this._store.isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\t// Attempt to kill the pty, it may have already been killed at this\n\t\t// point but we want to make sure\n\t\ttry {\n\t\t\tif (this._ptyProcess) {\n\t\t\t\tawait this._throttleKillSpawn();\n\t\t\t\tthis._logService.trace('node-pty.IPty#kill');\n\t\t\t\tthis._ptyProcess.kill();\n\t\t\t}\n\t\t} catch (ex) {\n\t\t\t// Swallow, the pty has already been killed\n\t\t}\n\t\tthis._onProcessExit.fire(this._exitCode || 0);\n\t\tthis.dispose();\n\t}\n\n\tprivate async _throttleKillSpawn(): Promise<void> {\n\t\t// Only throttle on Windows/conpty\n\t\tif (!isWindows || !('useConpty' in this._ptyOptions) || !this._ptyOptions.useConpty) {\n\t\t\treturn;\n\t\t}\n\t\t// Use a loop to ensure multiple calls in a single interval space out\n\t\twhile (Date.now() - TerminalProcess._lastKillOrStart < Constants.KillSpawnThrottleInterval) {\n\t\t\tthis._logService.trace('Throttling kill/spawn call');\n\t\t\tawait timeout(Constants.KillSpawnThrottleInterval - (Date.now() - TerminalProcess._lastKillOrStart) + Constants.KillSpawnSpacingDuration);\n\t\t}\n\t\tTerminalProcess._lastKillOrStart = Date.now();\n\t}\n\n\tprivate _sendProcessId(pid: number) {\n\t\tthis._onProcessReady.fire({\n\t\t\tpid,\n\t\t\tcwd: this._initialCwd,\n\t\t\twindowsPty: this.getWindowsPty()\n\t\t});\n\t}\n\n\tprivate _sendProcessTitle(ptyProcess: IPty): void {\n\t\tif (this._store.isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tthis._currentTitle = ptyProcess.process;\n\t\tthis._onDidChangeProperty.fire({ type: ProcessPropertyType.Title, value: this._currentTitle });\n\t\t// If fig is installed it may change the title of the process\n\t\tconst sanitizedTitle = this.currentTitle.replace(/ \\(figterm\\)$/g, '');\n\t\tthis._onDidChangeProperty.fire({ type: ProcessPropertyType.ShellType, value: posixShellTypeMap.get(sanitizedTitle) });\n\t}\n\n\tshutdown(immediate: boolean): void {\n\t\tif (this._logService.getLevel() === LogLevel.Trace) {\n\t\t\tthis._logService.trace('TerminalProcess#shutdown', new Error().stack?.replace(/^Error/, ''));\n\t\t}\n\t\t// don't force immediate disposal of the terminal processes on Windows as an additional\n\t\t// mitigation for https://github.com/microsoft/vscode/issues/71966 which causes the pty host\n\t\t// to become unresponsive, disconnecting all terminals across all windows.\n\t\tif (immediate && !isWindows) {\n\t\t\tthis._kill();\n\t\t} else {\n\t\t\tif (!this._closeTimeout && !this._store.isDisposed) {\n\t\t\t\tthis._queueProcessExit();\n\t\t\t\t// Allow a maximum amount of time for the process to exit, otherwise force kill it\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tif (this._closeTimeout && !this._store.isDisposed) {\n\t\t\t\t\t\tthis._closeTimeout = undefined;\n\t\t\t\t\t\tthis._kill();\n\t\t\t\t\t}\n\t\t\t\t}, ShutdownConstants.MaximumShutdownTime);\n\t\t\t}\n\t\t}\n\t}\n\n\tinput(data: string, isBinary?: boolean): void {\n\t\tif (this._store.isDisposed || !this._ptyProcess) {\n\t\t\treturn;\n\t\t}\n\t\tfor (let i = 0; i <= Math.floor(data.length / Constants.WriteMaxChunkSize); i++) {\n\t\t\tconst obj = {\n\t\t\t\tisBinary: isBinary || false,\n\t\t\t\tdata: data.substr(i * Constants.WriteMaxChunkSize, Constants.WriteMaxChunkSize)\n\t\t\t};\n\t\t\tthis._writeQueue.push(obj);\n\t\t}\n\t\tthis._startWrite();\n\t}\n\n\tasync processBinary(data: string): Promise<void> {\n\t\tthis.input(data, true);\n\t}\n\n\tasync refreshProperty<T extends ProcessPropertyType>(type: T): Promise<IProcessPropertyMap[T]> {\n\t\tswitch (type) {\n\t\t\tcase ProcessPropertyType.Cwd: {\n\t\t\t\tconst newCwd = await this.getCwd();\n\t\t\t\tif (newCwd !== this._properties.cwd) {\n\t\t\t\t\tthis._properties.cwd = newCwd;\n\t\t\t\t\tthis._onDidChangeProperty.fire({ type: ProcessPropertyType.Cwd, value: this._properties.cwd });\n\t\t\t\t}\n\t\t\t\treturn newCwd as IProcessPropertyMap[T];\n\t\t\t}\n\t\t\tcase ProcessPropertyType.InitialCwd: {\n\t\t\t\tconst initialCwd = await this.getInitialCwd();\n\t\t\t\tif (initialCwd !== this._properties.initialCwd) {\n\t\t\t\t\tthis._properties.initialCwd = initialCwd;\n\t\t\t\t\tthis._onDidChangeProperty.fire({ type: ProcessPropertyType.InitialCwd, value: this._properties.initialCwd });\n\t\t\t\t}\n\t\t\t\treturn initialCwd as IProcessPropertyMap[T];\n\t\t\t}\n\t\t\tcase ProcessPropertyType.Title:\n\t\t\t\treturn this.currentTitle as IProcessPropertyMap[T];\n\t\t\tdefault:\n\t\t\t\treturn this.shellType as IProcessPropertyMap[T];\n\t\t}\n\t}\n\n\tasync updateProperty<T extends ProcessPropertyType>(type: T, value: IProcessPropertyMap[T]): Promise<void> {\n\t\tif (type === ProcessPropertyType.FixedDimensions) {\n\t\t\tthis._properties.fixedDimensions = value as IProcessPropertyMap[ProcessPropertyType.FixedDimensions];\n\t\t}\n\t}\n\n\tprivate _startWrite(): void {\n\t\t// Don't write if it's already queued of is there is nothing to write\n\t\tif (this._writeTimeout !== undefined || this._writeQueue.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._doWrite();\n\n\t\t// Don't queue more writes if the queue is empty\n\t\tif (this._writeQueue.length === 0) {\n\t\t\tthis._writeTimeout = undefined;\n\t\t\treturn;\n\t\t}\n\n\t\t// Queue the next write\n\t\tthis._writeTimeout = setTimeout(() => {\n\t\t\tthis._writeTimeout = undefined;\n\t\t\tthis._startWrite();\n\t\t}, Constants.WriteInterval);\n\t}\n\n\tprivate _doWrite(): void {\n\t\tconst object = this._writeQueue.shift()!;\n\t\tthis._logService.trace('node-pty.IPty#write', object.data);\n\t\tif (object.isBinary) {\n\t\t\tthis._ptyProcess!.write(Buffer.from(object.data, 'binary') as any);\n\t\t} else {\n\t\t\tthis._ptyProcess!.write(object.data);\n\t\t}\n\t\tthis._childProcessMonitor?.handleInput();\n\t}\n\n\tresize(cols: number, rows: number): void {\n\t\tif (this._store.isDisposed) {\n\t\t\treturn;\n\t\t}\n\t\tif (typeof cols !== 'number' || typeof rows !== 'number' || isNaN(cols) || isNaN(rows)) {\n\t\t\treturn;\n\t\t}\n\t\t// Ensure that cols and rows are always >= 1, this prevents a native\n\t\t// exception in winpty.\n\t\tif (this._ptyProcess) {\n\t\t\tcols = Math.max(cols, 1);\n\t\t\trows = Math.max(rows, 1);\n\n\t\t\t// Delay resize if needed\n\t\t\tif (this._delayedResizer) {\n\t\t\t\tthis._delayedResizer.cols = cols;\n\t\t\t\tthis._delayedResizer.rows = rows;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis._logService.trace('node-pty.IPty#resize', cols, rows);\n\t\t\ttry {\n\t\t\t\tthis._ptyProcess.resize(cols, rows);\n\t\t\t} catch (e) {\n\t\t\t\t// Swallow error if the pty has already exited\n\t\t\t\tthis._logService.trace('node-pty.IPty#resize exception ' + e.message);\n\t\t\t\tif (this._exitCode !== undefined &&\n\t\t\t\t\te.message !== 'ioctl(2) failed, EBADF' &&\n\t\t\t\t\te.message !== 'Cannot resize a pty that has already exited') {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tclearBuffer(): void {\n\t\tthis._ptyProcess?.clear();\n\t}\n\n\tacknowledgeDataEvent(charCount: number): void {\n\t\t// Prevent lower than 0 to heal from errors\n\t\tthis._unacknowledgedCharCount = Math.max(this._unacknowledgedCharCount - charCount, 0);\n\t\tthis._logService.trace(`Flow control: Ack ${charCount} chars (unacknowledged: ${this._unacknowledgedCharCount})`);\n\t\tif (this._isPtyPaused && this._unacknowledgedCharCount < FlowControlConstants.LowWatermarkChars) {\n\t\t\tthis._logService.trace(`Flow control: Resume (${this._unacknowledgedCharCount} < ${FlowControlConstants.LowWatermarkChars})`);\n\t\t\tthis._ptyProcess?.resume();\n\t\t\tthis._isPtyPaused = false;\n\t\t}\n\t}\n\n\tclearUnacknowledgedChars(): void {\n\t\tthis._unacknowledgedCharCount = 0;\n\t\tthis._logService.trace(`Flow control: Cleared all unacknowledged chars, forcing resume`);\n\t\tif (this._isPtyPaused) {\n\t\t\tthis._ptyProcess?.resume();\n\t\t\tthis._isPtyPaused = false;\n\t\t}\n\t}\n\n\tasync setUnicodeVersion(version: '6' | '11'): Promise<void> {\n\t\t// No-op\n\t}\n\n\tgetInitialCwd(): Promise<string> {\n\t\treturn Promise.resolve(this._initialCwd);\n\t}\n\n\tasync getCwd(): Promise<string> {\n\t\tif (isMacintosh) {\n\t\t\t// From Big Sur (darwin v20) there is a spawn blocking thread issue on Electron,\n\t\t\t// this is fixed in VS Code's internal Electron.\n\t\t\t// https://github.com/Microsoft/vscode/issues/105446\n\t\t\treturn new Promise<string>(resolve => {\n\t\t\t\tif (!this._ptyProcess) {\n\t\t\t\t\tresolve(this._initialCwd);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis._logService.trace('node-pty.IPty#pid');\n\t\t\t\texec('lsof -OPln -p ' + this._ptyProcess.pid + ' | grep cwd', { env: { ...process.env, LANG: 'en_US.UTF-8' } }, (error, stdout, stderr) => {\n\t\t\t\t\tif (!error && stdout !== '') {\n\t\t\t\t\t\tresolve(stdout.substring(stdout.indexOf('/'), stdout.length - 1));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._logService.error('lsof did not run successfully, it may not be on the $PATH?', error, stdout, stderr);\n\t\t\t\t\t\tresolve(this._initialCwd);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (isLinux) {\n\t\t\tif (!this._ptyProcess) {\n\t\t\t\treturn this._initialCwd;\n\t\t\t}\n\t\t\tthis._logService.trace('node-pty.IPty#pid');\n\t\t\ttry {\n\t\t\t\treturn await Promises.readlink(`/proc/${this._ptyProcess.pid}/cwd`);\n\t\t\t} catch (error) {\n\t\t\t\treturn this._initialCwd;\n\t\t\t}\n\t\t}\n\n\t\treturn this._initialCwd;\n\t}\n\n\tgetWindowsPty(): IProcessReadyWindowsPty | undefined {\n\t\treturn isWindows ? {\n\t\t\tbackend: 'useConpty' in this._ptyOptions && this._ptyOptions.useConpty ? 'conpty' : 'winpty',\n\t\t\tbuildNumber: getWindowsBuildNumber()\n\t\t} : undefined;\n\t}\n}\n\n/**\n * Tracks the latest resize event to be trigger at a later point.\n */\nclass DelayedResizer extends Disposable {\n\trows: number | undefined;\n\tcols: number | undefined;\n\tprivate _timeout: NodeJS.Timeout;\n\n\tprivate readonly _onTrigger = this._register(new Emitter<{ rows?: number; cols?: number }>());\n\tget onTrigger(): Event<{ rows?: number; cols?: number }> { return this._onTrigger.event; }\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._timeout = setTimeout(() => {\n\t\t\tthis._onTrigger.fire({ rows: this.rows, cols: this.cols });\n\t\t}, 1000);\n\t\tthis._register(toDisposable(() => clearTimeout(this._timeout)));\n\t}\n}\n"]}