{"version":3,"sources":["vs/platform/terminal/node/ptyHostMain.ts"],"names":[],"mappings":"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","file":"ptyHostMain.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { DefaultURITransformer } from 'vs/base/common/uriIpc';\nimport { ProxyChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { Server as ChildProcessServer } from 'vs/base/parts/ipc/node/ipc.cp';\nimport { Server as UtilityProcessServer } from 'vs/base/parts/ipc/node/ipc.mp';\nimport { localize } from 'vs/nls';\nimport { OPTIONS, parseArgs } from 'vs/platform/environment/node/argv';\nimport { NativeEnvironmentService } from 'vs/platform/environment/node/environmentService';\nimport { getLogLevel } from 'vs/platform/log/common/log';\nimport { LoggerChannel } from 'vs/platform/log/common/logIpc';\nimport { LogService } from 'vs/platform/log/common/logService';\nimport { LoggerService } from 'vs/platform/log/node/loggerService';\nimport product from 'vs/platform/product/common/product';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IReconnectConstants, TerminalIpcChannels } from 'vs/platform/terminal/common/terminal';\nimport { HeartbeatService } from 'vs/platform/terminal/node/heartbeatService';\nimport { PtyService } from 'vs/platform/terminal/node/ptyService';\nimport { isUtilityProcess } from 'vs/base/parts/sandbox/node/electronTypes';\nimport { timeout } from 'vs/base/common/async';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\n\nstartPtyHost();\n\nasync function startPtyHost() {\n\t// Parse environment variables\n\tconst startupDelay = parseInt(process.env.VSCODE_STARTUP_DELAY ?? '0');\n\tconst simulatedLatency = parseInt(process.env.VSCODE_LATENCY ?? '0');\n\tconst reconnectConstants: IReconnectConstants = {\n\t\tgraceTime: parseInt(process.env.VSCODE_RECONNECT_GRACE_TIME || '0'),\n\t\tshortGraceTime: parseInt(process.env.VSCODE_RECONNECT_SHORT_GRACE_TIME || '0'),\n\t\tscrollback: parseInt(process.env.VSCODE_RECONNECT_SCROLLBACK || '100')\n\t};\n\n\t// Sanitize environment\n\tdelete process.env.VSCODE_RECONNECT_GRACE_TIME;\n\tdelete process.env.VSCODE_RECONNECT_SHORT_GRACE_TIME;\n\tdelete process.env.VSCODE_RECONNECT_SCROLLBACK;\n\tdelete process.env.VSCODE_LATENCY;\n\tdelete process.env.VSCODE_STARTUP_DELAY;\n\n\t// Delay startup if needed, this must occur before RPC is setup to avoid the channel from timing\n\t// out.\n\tif (startupDelay) {\n\t\tawait timeout(startupDelay);\n\t}\n\n\t// Setup RPC\n\tconst _isUtilityProcess = isUtilityProcess(process);\n\tlet server: ChildProcessServer<string> | UtilityProcessServer;\n\tif (_isUtilityProcess) {\n\t\tserver = new UtilityProcessServer();\n\t} else {\n\t\tserver = new ChildProcessServer(TerminalIpcChannels.PtyHost);\n\t}\n\n\t// Services\n\tconst productService: IProductService = { _serviceBrand: undefined, ...product };\n\tconst environmentService = new NativeEnvironmentService(parseArgs(process.argv, OPTIONS), productService);\n\tconst loggerService = new LoggerService(getLogLevel(environmentService), environmentService.logsHome);\n\tserver.registerChannel(TerminalIpcChannels.Logger, new LoggerChannel(loggerService, () => DefaultURITransformer));\n\tconst logger = loggerService.createLogger('ptyhost', { name: localize('ptyHost', \"Pty Host\") });\n\tconst logService = new LogService(logger);\n\n\t// Log developer config\n\tif (startupDelay) {\n\t\tlogService.warn(`Pty Host startup is delayed ${startupDelay}ms`);\n\t}\n\tif (simulatedLatency) {\n\t\tlogService.warn(`Pty host is simulating ${simulatedLatency}ms latency`);\n\t}\n\n\tconst disposables = new DisposableStore();\n\n\t// Heartbeat responsiveness tracking\n\tconst heartbeatService = new HeartbeatService();\n\tserver.registerChannel(TerminalIpcChannels.Heartbeat, ProxyChannel.fromService(heartbeatService, disposables));\n\n\t// Init pty service\n\tconst ptyService = new PtyService(logService, productService, reconnectConstants, simulatedLatency);\n\tconst ptyServiceChannel = ProxyChannel.fromService(ptyService, disposables);\n\tserver.registerChannel(TerminalIpcChannels.PtyHost, ptyServiceChannel);\n\n\t// Register a channel for direct communication via Message Port\n\tif (_isUtilityProcess) {\n\t\tserver.registerChannel(TerminalIpcChannels.PtyHostWindow, ptyServiceChannel);\n\t}\n\n\t// Clean up\n\tprocess.once('exit', () => {\n\t\tlogService.trace('Pty host exiting');\n\t\tlogService.dispose();\n\t\theartbeatService.dispose();\n\t\tptyService.dispose();\n\t});\n}\n"]}