{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/terminal/node/terminalEnvironment.ts"],"names":[],"mappings":"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","file":"terminalEnvironment.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as os from 'os';\nimport { FileAccess } from 'vs/base/common/network';\nimport { getCaseInsensitive } from 'vs/base/common/objects';\nimport * as path from 'vs/base/common/path';\nimport { IProcessEnvironment, isMacintosh, isWindows } from 'vs/base/common/platform';\nimport * as process from 'vs/base/common/process';\nimport { format } from 'vs/base/common/strings';\nimport { isString } from 'vs/base/common/types';\nimport * as pfs from 'vs/base/node/pfs';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IShellLaunchConfig, ITerminalEnvironment, ITerminalProcessOptions } from 'vs/platform/terminal/common/terminal';\nimport { EnvironmentVariableMutatorType } from 'vs/platform/terminal/common/environmentVariable';\nimport { deserializeEnvironmentVariableCollections } from 'vs/platform/terminal/common/environmentVariableShared';\nimport { MergedEnvironmentVariableCollection } from 'vs/platform/terminal/common/environmentVariableCollection';\n\nexport function getWindowsBuildNumber(): number {\n\tconst osVersion = (/(\\d+)\\.(\\d+)\\.(\\d+)/g).exec(os.release());\n\tlet buildNumber: number = 0;\n\tif (osVersion && osVersion.length === 4) {\n\t\tbuildNumber = parseInt(osVersion[3]);\n\t}\n\treturn buildNumber;\n}\n\nexport async function findExecutable(command: string, cwd?: string, paths?: string[], env: IProcessEnvironment = process.env as IProcessEnvironment, exists: (path: string) => Promise<boolean> = pfs.Promises.exists): Promise<string | undefined> {\n\t// If we have an absolute path then we take it.\n\tif (path.isAbsolute(command)) {\n\t\treturn await exists(command) ? command : undefined;\n\t}\n\tif (cwd === undefined) {\n\t\tcwd = process.cwd();\n\t}\n\tconst dir = path.dirname(command);\n\tif (dir !== '.') {\n\t\t// We have a directory and the directory is relative (see above). Make the path absolute\n\t\t// to the current working directory.\n\t\tconst fullPath = path.join(cwd, command);\n\t\treturn await exists(fullPath) ? fullPath : undefined;\n\t}\n\tconst envPath = getCaseInsensitive(env, 'PATH');\n\tif (paths === undefined && isString(envPath)) {\n\t\tpaths = envPath.split(path.delimiter);\n\t}\n\t// No PATH environment. Make path absolute to the cwd.\n\tif (paths === undefined || paths.length === 0) {\n\t\tconst fullPath = path.join(cwd, command);\n\t\treturn await exists(fullPath) ? fullPath : undefined;\n\t}\n\t// We have a simple file name. We get the path variable from the env\n\t// and try to find the executable on the path.\n\tfor (const pathEntry of paths) {\n\t\t// The path entry is absolute.\n\t\tlet fullPath: string;\n\t\tif (path.isAbsolute(pathEntry)) {\n\t\t\tfullPath = path.join(pathEntry, command);\n\t\t} else {\n\t\t\tfullPath = path.join(cwd, pathEntry, command);\n\t\t}\n\n\t\tif (await exists(fullPath)) {\n\t\t\treturn fullPath;\n\t\t}\n\t\tif (isWindows) {\n\t\t\tlet withExtension = fullPath + '.com';\n\t\t\tif (await exists(withExtension)) {\n\t\t\t\treturn withExtension;\n\t\t\t}\n\t\t\twithExtension = fullPath + '.exe';\n\t\t\tif (await exists(withExtension)) {\n\t\t\t\treturn withExtension;\n\t\t\t}\n\t\t}\n\t}\n\tconst fullPath = path.join(cwd, command);\n\treturn await exists(fullPath) ? fullPath : undefined;\n}\n\nexport interface IShellIntegrationConfigInjection {\n\t/**\n\t * A new set of arguments to use.\n\t */\n\tnewArgs: string[] | undefined;\n\t/**\n\t * An optional environment to mixing to the real environment.\n\t */\n\tenvMixin?: IProcessEnvironment;\n\t/**\n\t * An optional array of files to copy from `source` to `dest`.\n\t */\n\tfilesToCopy?: {\n\t\tsource: string;\n\t\tdest: string;\n\t}[];\n}\n\n/**\n * For a given shell launch config, returns arguments to replace and an optional environment to\n * mixin to the SLC's environment to enable shell integration. This must be run within the context\n * that creates the process to ensure accuracy. Returns undefined if shell integration cannot be\n * enabled.\n */\nexport function getShellIntegrationInjection(\n\tshellLaunchConfig: IShellLaunchConfig,\n\toptions: ITerminalProcessOptions,\n\tenv: ITerminalEnvironment | undefined,\n\tlogService: ILogService,\n\tproductService: IProductService\n): IShellIntegrationConfigInjection | undefined {\n\t// Shell integration arg injection is disabled when:\n\t// - The global setting is disabled\n\t// - There is no executable (not sure what script to run)\n\t// - The terminal is used by a feature like tasks or debugging\n\tconst useWinpty = isWindows && (!options.windowsEnableConpty || getWindowsBuildNumber() < 18309);\n\tif (!options.shellIntegration.enabled || !shellLaunchConfig.executable || shellLaunchConfig.isFeatureTerminal || shellLaunchConfig.hideFromUser || shellLaunchConfig.ignoreShellIntegration || useWinpty) {\n\t\treturn undefined;\n\t}\n\n\tconst originalArgs = shellLaunchConfig.args;\n\tconst shell = process.platform === 'win32' ? path.basename(shellLaunchConfig.executable).toLowerCase() : path.basename(shellLaunchConfig.executable);\n\tconst appRoot = path.dirname(FileAccess.asFileUri('').fsPath);\n\tlet newArgs: string[] | undefined;\n\tconst envMixin: IProcessEnvironment = {\n\t\t'VSCODE_INJECTION': '1'\n\t};\n\n\tif (options.shellIntegration.nonce) {\n\t\tenvMixin['VSCODE_NONCE'] = options.shellIntegration.nonce;\n\t}\n\n\t// Windows\n\tif (isWindows) {\n\t\tif (shell === 'pwsh.exe' || shell === 'powershell.exe') {\n\t\t\tif (!originalArgs || arePwshImpliedArgs(originalArgs)) {\n\t\t\t\tnewArgs = shellIntegrationArgs.get(ShellIntegrationExecutable.WindowsPwsh);\n\t\t\t} else if (arePwshLoginArgs(originalArgs)) {\n\t\t\t\tnewArgs = shellIntegrationArgs.get(ShellIntegrationExecutable.WindowsPwshLogin);\n\t\t\t}\n\t\t\tif (!newArgs) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tnewArgs = [...newArgs]; // Shallow clone the array to avoid setting the default array\n\t\t\tnewArgs[newArgs.length - 1] = format(newArgs[newArgs.length - 1], appRoot, '');\n\t\t\t// TODO: Uncomment when suggestEnabled is ready for use\n\t\t\t// if (options.shellIntegration.suggestEnabled) {\n\t\t\t// \tenvMixin['VSCODE_SUGGEST'] = '1';\n\t\t\t// }\n\t\t\treturn { newArgs, envMixin };\n\t\t}\n\t\tlogService.warn(`Shell integration cannot be enabled for executable \"${shellLaunchConfig.executable}\" and args`, shellLaunchConfig.args);\n\t\treturn undefined;\n\t}\n\n\t// Linux & macOS\n\tswitch (shell) {\n\t\tcase 'bash': {\n\t\t\tif (!originalArgs || originalArgs.length === 0) {\n\t\t\t\tnewArgs = shellIntegrationArgs.get(ShellIntegrationExecutable.Bash);\n\t\t\t} else if (areZshBashLoginArgs(originalArgs)) {\n\t\t\t\tenvMixin['VSCODE_SHELL_LOGIN'] = '1';\n\t\t\t\taddEnvMixinPathPrefix(options, envMixin);\n\t\t\t\tnewArgs = shellIntegrationArgs.get(ShellIntegrationExecutable.Bash);\n\t\t\t}\n\t\t\tif (!newArgs) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tnewArgs = [...newArgs]; // Shallow clone the array to avoid setting the default array\n\t\t\tnewArgs[newArgs.length - 1] = format(newArgs[newArgs.length - 1], appRoot);\n\t\t\treturn { newArgs, envMixin };\n\t\t}\n\t\tcase 'fish': {\n\t\t\t// The injection mechanism used for fish is to add a custom dir to $XDG_DATA_DIRS which\n\t\t\t// is similar to $ZDOTDIR in zsh but contains a list of directories to run from.\n\t\t\tconst oldDataDirs = env?.XDG_DATA_DIRS ?? '/usr/local/share:/usr/share';\n\t\t\tconst newDataDir = path.join(appRoot, 'out/vs/workbench/contrib/terminal/browser/media/fish_xdg_data');\n\t\t\tenvMixin['XDG_DATA_DIRS'] = `${oldDataDirs}:${newDataDir}`;\n\t\t\taddEnvMixinPathPrefix(options, envMixin);\n\t\t\treturn { newArgs: undefined, envMixin };\n\t\t}\n\t\tcase 'pwsh': {\n\t\t\tif (!originalArgs || arePwshImpliedArgs(originalArgs)) {\n\t\t\t\tnewArgs = shellIntegrationArgs.get(ShellIntegrationExecutable.Pwsh);\n\t\t\t} else if (arePwshLoginArgs(originalArgs)) {\n\t\t\t\tnewArgs = shellIntegrationArgs.get(ShellIntegrationExecutable.PwshLogin);\n\t\t\t}\n\t\t\tif (!newArgs) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\t// TODO: Uncomment when suggestEnabled is ready for use\n\t\t\t// if (options.shellIntegration.suggestEnabled) {\n\t\t\t// \tenvMixin['VSCODE_SUGGEST'] = '1';\n\t\t\t// }\n\t\t\tnewArgs = [...newArgs]; // Shallow clone the array to avoid setting the default array\n\t\t\tnewArgs[newArgs.length - 1] = format(newArgs[newArgs.length - 1], appRoot, '');\n\t\t\treturn { newArgs, envMixin };\n\t\t}\n\t\tcase 'zsh': {\n\t\t\tif (!originalArgs || originalArgs.length === 0) {\n\t\t\t\tnewArgs = shellIntegrationArgs.get(ShellIntegrationExecutable.Zsh);\n\t\t\t} else if (areZshBashLoginArgs(originalArgs)) {\n\t\t\t\tnewArgs = shellIntegrationArgs.get(ShellIntegrationExecutable.ZshLogin);\n\t\t\t\taddEnvMixinPathPrefix(options, envMixin);\n\t\t\t} else if (originalArgs === shellIntegrationArgs.get(ShellIntegrationExecutable.Zsh) || originalArgs === shellIntegrationArgs.get(ShellIntegrationExecutable.ZshLogin)) {\n\t\t\t\tnewArgs = originalArgs;\n\t\t\t}\n\t\t\tif (!newArgs) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\tnewArgs = [...newArgs]; // Shallow clone the array to avoid setting the default array\n\t\t\tnewArgs[newArgs.length - 1] = format(newArgs[newArgs.length - 1], appRoot);\n\n\t\t\t// Move .zshrc into $ZDOTDIR as the way to activate the script\n\t\t\tlet username: string;\n\t\t\ttry {\n\t\t\t\tusername = os.userInfo().username;\n\t\t\t} catch {\n\t\t\t\tusername = 'unknown';\n\t\t\t}\n\t\t\tconst zdotdir = path.join(os.tmpdir(), `${username}-${productService.applicationName}-zsh`);\n\t\t\tenvMixin['ZDOTDIR'] = zdotdir;\n\t\t\tconst userZdotdir = env?.ZDOTDIR ?? os.homedir() ?? `~`;\n\t\t\tenvMixin['USER_ZDOTDIR'] = userZdotdir;\n\t\t\tconst filesToCopy: IShellIntegrationConfigInjection['filesToCopy'] = [];\n\t\t\tfilesToCopy.push({\n\t\t\t\tsource: path.join(appRoot, 'out/vs/workbench/contrib/terminal/browser/media/shellIntegration-rc.zsh'),\n\t\t\t\tdest: path.join(zdotdir, '.zshrc')\n\t\t\t});\n\t\t\tfilesToCopy.push({\n\t\t\t\tsource: path.join(appRoot, 'out/vs/workbench/contrib/terminal/browser/media/shellIntegration-profile.zsh'),\n\t\t\t\tdest: path.join(zdotdir, '.zprofile')\n\t\t\t});\n\t\t\tfilesToCopy.push({\n\t\t\t\tsource: path.join(appRoot, 'out/vs/workbench/contrib/terminal/browser/media/shellIntegration-env.zsh'),\n\t\t\t\tdest: path.join(zdotdir, '.zshenv')\n\t\t\t});\n\t\t\tfilesToCopy.push({\n\t\t\t\tsource: path.join(appRoot, 'out/vs/workbench/contrib/terminal/browser/media/shellIntegration-login.zsh'),\n\t\t\t\tdest: path.join(zdotdir, '.zlogin')\n\t\t\t});\n\t\t\treturn { newArgs, envMixin, filesToCopy };\n\t\t}\n\t}\n\tlogService.warn(`Shell integration cannot be enabled for executable \"${shellLaunchConfig.executable}\" and args`, shellLaunchConfig.args);\n\treturn undefined;\n}\n\n/**\n * On macOS the profile calls path_helper which adds a bunch of standard bin directories to the\n * beginning of the PATH. This causes significant problems for the environment variable\n * collection API as the custom paths added to the end will now be somewhere in the middle of\n * the PATH. To combat this, VSCODE_PATH_PREFIX is used to re-apply any prefix after the profile\n * has run. This will cause duplication in the PATH but should fix the issue.\n *\n * See #99878 for more information.\n */\nfunction addEnvMixinPathPrefix(options: ITerminalProcessOptions, envMixin: IProcessEnvironment): void {\n\tif (isMacintosh && options.environmentVariableCollections) {\n\t\t// Deserialize and merge\n\t\tconst deserialized = deserializeEnvironmentVariableCollections(options.environmentVariableCollections);\n\t\tconst merged = new MergedEnvironmentVariableCollection(deserialized);\n\n\t\t// Get all prepend PATH entries\n\t\tconst pathEntry = merged.getVariableMap({ workspaceFolder: options.workspaceFolder }).get('PATH');\n\t\tconst prependToPath: string[] = [];\n\t\tif (pathEntry) {\n\t\t\tfor (const mutator of pathEntry) {\n\t\t\t\tif (mutator.type === EnvironmentVariableMutatorType.Prepend) {\n\t\t\t\t\tprependToPath.push(mutator.value);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Add to the environment mixin to be applied in the shell integration script\n\t\tif (prependToPath.length > 0) {\n\t\t\tenvMixin['VSCODE_PATH_PREFIX'] = prependToPath.join('');\n\t\t}\n\t}\n}\n\nenum ShellIntegrationExecutable {\n\tWindowsPwsh = 'windows-pwsh',\n\tWindowsPwshLogin = 'windows-pwsh-login',\n\tPwsh = 'pwsh',\n\tPwshLogin = 'pwsh-login',\n\tZsh = 'zsh',\n\tZshLogin = 'zsh-login',\n\tBash = 'bash'\n}\n\nconst shellIntegrationArgs: Map<ShellIntegrationExecutable, string[]> = new Map();\n// The try catch swallows execution policy errors in the case of the archive distributable\nshellIntegrationArgs.set(ShellIntegrationExecutable.WindowsPwsh, ['-noexit', '-command', 'try { . \\\"{0}\\\\out\\\\vs\\\\workbench\\\\contrib\\\\terminal\\\\browser\\\\media\\\\shellIntegration.ps1\\\" } catch {}{1}']);\nshellIntegrationArgs.set(ShellIntegrationExecutable.WindowsPwshLogin, ['-l', '-noexit', '-command', 'try { . \\\"{0}\\\\out\\\\vs\\\\workbench\\\\contrib\\\\terminal\\\\browser\\\\media\\\\shellIntegration.ps1\\\" } catch {}{1}']);\nshellIntegrationArgs.set(ShellIntegrationExecutable.Pwsh, ['-noexit', '-command', '. \"{0}/out/vs/workbench/contrib/terminal/browser/media/shellIntegration.ps1\"{1}']);\nshellIntegrationArgs.set(ShellIntegrationExecutable.PwshLogin, ['-l', '-noexit', '-command', '. \"{0}/out/vs/workbench/contrib/terminal/browser/media/shellIntegration.ps1\"']);\nshellIntegrationArgs.set(ShellIntegrationExecutable.Zsh, ['-i']);\nshellIntegrationArgs.set(ShellIntegrationExecutable.ZshLogin, ['-il']);\nshellIntegrationArgs.set(ShellIntegrationExecutable.Bash, ['--init-file', '{0}/out/vs/workbench/contrib/terminal/browser/media/shellIntegration-bash.sh']);\nconst loginArgs = ['-login', '-l'];\nconst pwshImpliedArgs = ['-nol', '-nologo'];\n\nfunction arePwshLoginArgs(originalArgs: string | string[]): boolean {\n\tif (typeof originalArgs === 'string') {\n\t\treturn loginArgs.includes(originalArgs.toLowerCase());\n\t} else {\n\t\treturn originalArgs.length === 1 && loginArgs.includes(originalArgs[0].toLowerCase()) ||\n\t\t\t(originalArgs.length === 2 &&\n\t\t\t\t(((loginArgs.includes(originalArgs[0].toLowerCase())) || loginArgs.includes(originalArgs[1].toLowerCase())))\n\t\t\t\t&& ((pwshImpliedArgs.includes(originalArgs[0].toLowerCase())) || pwshImpliedArgs.includes(originalArgs[1].toLowerCase())));\n\t}\n}\n\nfunction arePwshImpliedArgs(originalArgs: string | string[]): boolean {\n\tif (typeof originalArgs === 'string') {\n\t\treturn pwshImpliedArgs.includes(originalArgs.toLowerCase());\n\t} else {\n\t\treturn originalArgs.length === 0 || originalArgs?.length === 1 && pwshImpliedArgs.includes(originalArgs[0].toLowerCase());\n\t}\n}\n\nfunction areZshBashLoginArgs(originalArgs: string | string[]): boolean {\n\treturn originalArgs === 'string' && loginArgs.includes(originalArgs.toLowerCase())\n\t\t|| typeof originalArgs !== 'string' && originalArgs.length === 1 && loginArgs.includes(originalArgs[0].toLowerCase());\n}\n"]}