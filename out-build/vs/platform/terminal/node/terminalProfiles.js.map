{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/terminal/node/terminalProfiles.ts"],"names":[],"mappings":"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","file":"terminalProfiles.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as cp from 'child_process';\nimport { Codicon } from 'vs/base/common/codicons';\nimport { basename, delimiter, normalize } from 'vs/base/common/path';\nimport { isLinux, isWindows } from 'vs/base/common/platform';\nimport { isString } from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport * as pfs from 'vs/base/node/pfs';\nimport { enumeratePowerShellInstallations } from 'vs/base/node/powershell';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ITerminalEnvironment, ITerminalExecutable, ITerminalProfile, ITerminalProfileSource, ITerminalUnsafePath, ProfileSource, TerminalIcon, TerminalSettingId } from 'vs/platform/terminal/common/terminal';\nimport { findExecutable, getWindowsBuildNumber } from 'vs/platform/terminal/node/terminalEnvironment';\nimport { ThemeIcon } from 'vs/base/common/themables';\nimport { dirname, resolve } from 'path';\n\nlet profileSources: Map<string, IPotentialTerminalProfile> | undefined;\nlet logIfWslNotInstalled: boolean = true;\n\nexport function detectAvailableProfiles(\n\tprofiles: unknown,\n\tdefaultProfile: unknown,\n\tincludeDetectedProfiles: boolean,\n\tconfigurationService: IConfigurationService,\n\tshellEnv: typeof process.env = process.env,\n\tfsProvider?: IFsProvider,\n\tlogService?: ILogService,\n\tvariableResolver?: (text: string[]) => Promise<string[]>,\n\ttestPwshSourcePaths?: string[]\n): Promise<ITerminalProfile[]> {\n\tfsProvider = fsProvider || {\n\t\texistsFile: pfs.SymlinkSupport.existsFile,\n\t\treadFile: pfs.Promises.readFile\n\t};\n\tif (isWindows) {\n\t\treturn detectAvailableWindowsProfiles(\n\t\t\tincludeDetectedProfiles,\n\t\t\tfsProvider,\n\t\t\tshellEnv,\n\t\t\tlogService,\n\t\t\tconfigurationService.getValue(TerminalSettingId.UseWslProfiles) !== false,\n\t\t\tprofiles && typeof profiles === 'object' ? { ...profiles } : configurationService.getValue<{ [key: string]: IUnresolvedTerminalProfile }>(TerminalSettingId.ProfilesWindows),\n\t\t\ttypeof defaultProfile === 'string' ? defaultProfile : configurationService.getValue<string>(TerminalSettingId.DefaultProfileWindows),\n\t\t\ttestPwshSourcePaths,\n\t\t\tvariableResolver\n\t\t);\n\t}\n\treturn detectAvailableUnixProfiles(\n\t\tfsProvider,\n\t\tlogService,\n\t\tincludeDetectedProfiles,\n\t\tprofiles && typeof profiles === 'object' ? { ...profiles } : configurationService.getValue<{ [key: string]: IUnresolvedTerminalProfile }>(isLinux ? TerminalSettingId.ProfilesLinux : TerminalSettingId.ProfilesMacOs),\n\t\ttypeof defaultProfile === 'string' ? defaultProfile : configurationService.getValue<string>(isLinux ? TerminalSettingId.DefaultProfileLinux : TerminalSettingId.DefaultProfileMacOs),\n\t\ttestPwshSourcePaths,\n\t\tvariableResolver,\n\t\tshellEnv\n\t);\n}\n\nasync function detectAvailableWindowsProfiles(\n\tincludeDetectedProfiles: boolean,\n\tfsProvider: IFsProvider,\n\tshellEnv: typeof process.env,\n\tlogService?: ILogService,\n\tuseWslProfiles?: boolean,\n\tconfigProfiles?: { [key: string]: IUnresolvedTerminalProfile },\n\tdefaultProfileName?: string,\n\ttestPwshSourcePaths?: string[],\n\tvariableResolver?: (text: string[]) => Promise<string[]>\n): Promise<ITerminalProfile[]> {\n\t// Determine the correct System32 path. We want to point to Sysnative\n\t// when the 32-bit version of VS Code is running on a 64-bit machine.\n\t// The reason for this is because PowerShell's important PSReadline\n\t// module doesn't work if this is not the case. See #27915.\n\tconst is32ProcessOn64Windows = process.env.hasOwnProperty('PROCESSOR_ARCHITEW6432');\n\tconst system32Path = `${process.env['windir']}\\\\${is32ProcessOn64Windows ? 'Sysnative' : 'System32'}`;\n\n\tlet useWSLexe = false;\n\n\tif (getWindowsBuildNumber() >= 16299) {\n\t\tuseWSLexe = true;\n\t}\n\n\tawait initializeWindowsProfiles(testPwshSourcePaths);\n\n\tconst detectedProfiles: Map<string, IUnresolvedTerminalProfile> = new Map();\n\n\t// Add auto detected profiles\n\tif (includeDetectedProfiles) {\n\t\tdetectedProfiles.set('PowerShell', {\n\t\t\tsource: ProfileSource.Pwsh,\n\t\t\ticon: Codicon.terminalPowershell,\n\t\t\tisAutoDetected: true\n\t\t});\n\t\tdetectedProfiles.set('Windows PowerShell', {\n\t\t\tpath: `${system32Path}\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe`,\n\t\t\ticon: Codicon.terminalPowershell,\n\t\t\tisAutoDetected: true\n\t\t});\n\t\tdetectedProfiles.set('Git Bash', {\n\t\t\tsource: ProfileSource.GitBash,\n\t\t\tisAutoDetected: true\n\t\t});\n\t\tdetectedProfiles.set('Command Prompt', {\n\t\t\tpath: `${system32Path}\\\\cmd.exe`,\n\t\t\ticon: Codicon.terminalCmd,\n\t\t\tisAutoDetected: true\n\t\t});\n\t\tdetectedProfiles.set('Cygwin', {\n\t\t\tpath: [\n\t\t\t\t{ path: `${process.env['HOMEDRIVE']}\\\\cygwin64\\\\bin\\\\bash.exe`, isUnsafe: true },\n\t\t\t\t{ path: `${process.env['HOMEDRIVE']}\\\\cygwin\\\\bin\\\\bash.exe`, isUnsafe: true }\n\t\t\t],\n\t\t\targs: ['--login'],\n\t\t\tisAutoDetected: true\n\t\t});\n\t\tdetectedProfiles.set('bash (MSYS2)', {\n\t\t\tpath: [\n\t\t\t\t{ path: `${process.env['HOMEDRIVE']}\\\\msys64\\\\usr\\\\bin\\\\bash.exe`, isUnsafe: true },\n\t\t\t],\n\t\t\targs: ['--login', '-i'],\n\t\t\ticon: Codicon.terminalBash,\n\t\t\tisAutoDetected: true\n\t\t});\n\t\tconst cmderPath = `${process.env['CMDER_ROOT'] || `${process.env['HOMEDRIVE']}\\\\cmder`}\\\\vendor\\\\bin\\\\vscode_init.cmd`;\n\t\tdetectedProfiles.set('Cmder', {\n\t\t\tpath: `${system32Path}\\\\cmd.exe`,\n\t\t\targs: ['/K', cmderPath],\n\t\t\t// The path is safe if it was derived from CMDER_ROOT\n\t\t\trequiresPath: process.env['CMDER_ROOT'] ? cmderPath : { path: cmderPath, isUnsafe: true },\n\t\t\tisAutoDetected: true\n\t\t});\n\t}\n\n\tapplyConfigProfilesToMap(configProfiles, detectedProfiles);\n\n\tconst resultProfiles: ITerminalProfile[] = await transformToTerminalProfiles(detectedProfiles.entries(), defaultProfileName, fsProvider, shellEnv, logService, variableResolver);\n\n\tif (includeDetectedProfiles && useWslProfiles) {\n\t\ttry {\n\t\t\tconst result = await getWslProfiles(`${system32Path}\\\\${useWSLexe ? 'wsl' : 'bash'}.exe`, defaultProfileName);\n\t\t\tfor (const wslProfile of result) {\n\t\t\t\tif (!configProfiles || !(wslProfile.profileName in configProfiles)) {\n\t\t\t\t\tresultProfiles.push(wslProfile);\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tif (logIfWslNotInstalled) {\n\t\t\t\tlogService?.info('WSL is not installed, so could not detect WSL profiles');\n\t\t\t\tlogIfWslNotInstalled = false;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn resultProfiles;\n}\n\nasync function transformToTerminalProfiles(\n\tentries: IterableIterator<[string, IUnresolvedTerminalProfile]>,\n\tdefaultProfileName: string | undefined,\n\tfsProvider: IFsProvider,\n\tshellEnv: typeof process.env = process.env,\n\tlogService?: ILogService,\n\tvariableResolver?: (text: string[]) => Promise<string[]>,\n): Promise<ITerminalProfile[]> {\n\tconst promises: Promise<ITerminalProfile | undefined>[] = [];\n\tfor (const [profileName, profile] of entries) {\n\t\tpromises.push(getValidatedProfile(profileName, profile, defaultProfileName, fsProvider, shellEnv, logService, variableResolver));\n\t}\n\treturn (await Promise.all(promises)).filter(e => !!e) as ITerminalProfile[];\n}\n\nasync function getValidatedProfile(\n\tprofileName: string,\n\tprofile: IUnresolvedTerminalProfile,\n\tdefaultProfileName: string | undefined,\n\tfsProvider: IFsProvider,\n\tshellEnv: typeof process.env = process.env,\n\tlogService?: ILogService,\n\tvariableResolver?: (text: string[]) => Promise<string[]>\n): Promise<ITerminalProfile | undefined> {\n\tif (profile === null) {\n\t\treturn undefined;\n\t}\n\tlet originalPaths: (string | ITerminalUnsafePath)[];\n\tlet args: string[] | string | undefined;\n\tlet icon: ThemeIcon | URI | { light: URI; dark: URI } | undefined = undefined;\n\t// use calculated values if path is not specified\n\tif ('source' in profile && !('path' in profile)) {\n\t\tconst source = profileSources?.get(profile.source);\n\t\tif (!source) {\n\t\t\treturn undefined;\n\t\t}\n\t\toriginalPaths = source.paths;\n\n\t\t// if there are configured args, override the default ones\n\t\targs = profile.args || source.args;\n\t\tif (profile.icon) {\n\t\t\ticon = validateIcon(profile.icon);\n\t\t} else if (source.icon) {\n\t\t\ticon = source.icon;\n\t\t}\n\t} else {\n\t\toriginalPaths = Array.isArray(profile.path) ? profile.path : [profile.path];\n\t\targs = isWindows ? profile.args : Array.isArray(profile.args) ? profile.args : undefined;\n\t\ticon = validateIcon(profile.icon);\n\t}\n\n\tlet paths: (string | ITerminalUnsafePath)[];\n\tif (variableResolver) {\n\t\t// Convert to string[] for resolve\n\t\tconst mapped = originalPaths.map(e => typeof e === 'string' ? e : e.path);\n\n\t\tconst resolved = await variableResolver(mapped);\n\t\t// Convert resolved back to (T | string)[]\n\t\tpaths = new Array(originalPaths.length);\n\t\tfor (let i = 0; i < originalPaths.length; i++) {\n\t\t\tif (typeof originalPaths[i] === 'string') {\n\t\t\t\tpaths[i] = resolved[i];\n\t\t\t} else {\n\t\t\t\tpaths[i] = {\n\t\t\t\t\tpath: resolved[i],\n\t\t\t\t\tisUnsafe: true\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t} else {\n\t\tpaths = originalPaths.slice();\n\t}\n\n\tlet requiresUnsafePath: string | undefined;\n\tif (profile.requiresPath) {\n\t\t// Validate requiresPath exists\n\t\tlet actualRequiredPath: string;\n\t\tif (isString(profile.requiresPath)) {\n\t\t\tactualRequiredPath = profile.requiresPath;\n\t\t} else {\n\t\t\tactualRequiredPath = profile.requiresPath.path;\n\t\t\tif (profile.requiresPath.isUnsafe) {\n\t\t\t\trequiresUnsafePath = actualRequiredPath;\n\t\t\t}\n\t\t}\n\t\tconst result = await fsProvider.existsFile(actualRequiredPath);\n\t\tif (!result) {\n\t\t\treturn;\n\t\t}\n\t}\n\n\tconst validatedProfile = await validateProfilePaths(profileName, defaultProfileName, paths, fsProvider, shellEnv, args, profile.env, profile.overrideName, profile.isAutoDetected, requiresUnsafePath);\n\tif (!validatedProfile) {\n\t\tlogService?.debug('Terminal profile not validated', profileName, originalPaths);\n\t\treturn undefined;\n\t}\n\n\tvalidatedProfile.isAutoDetected = profile.isAutoDetected;\n\tvalidatedProfile.icon = icon;\n\tvalidatedProfile.color = profile.color;\n\treturn validatedProfile;\n}\n\nfunction validateIcon(icon: string | TerminalIcon | undefined): TerminalIcon | undefined {\n\tif (typeof icon === 'string') {\n\t\treturn { id: icon };\n\t}\n\treturn icon;\n}\n\nasync function initializeWindowsProfiles(testPwshSourcePaths?: string[]): Promise<void> {\n\tif (profileSources && !testPwshSourcePaths) {\n\t\treturn;\n\t}\n\n\tconst [gitBashPaths, pwshPaths] = await Promise.all([getGitBashPaths(), testPwshSourcePaths || getPowershellPaths()]);\n\n\tprofileSources = new Map();\n\tprofileSources.set(\n\t\tProfileSource.GitBash, {\n\t\tprofileName: 'Git Bash',\n\t\tpaths: gitBashPaths,\n\t\targs: ['--login', '-i']\n\t});\n\tprofileSources.set(ProfileSource.Pwsh, {\n\t\tprofileName: 'PowerShell',\n\t\tpaths: pwshPaths,\n\t\ticon: Codicon.terminalPowershell\n\t});\n}\n\nasync function getGitBashPaths(): Promise<string[]> {\n\tconst gitDirs: Set<string> = new Set();\n\n\t// Look for git.exe on the PATH and use that if found. git.exe is located at\n\t// `<installdir>/cmd/git.exe`. This is not an unsafe location because the git executable is\n\t// located on the PATH which is only controlled by the user/admin.\n\tconst gitExePath = await findExecutable('git.exe');\n\tif (gitExePath) {\n\t\tconst gitExeDir = dirname(gitExePath);\n\t\tgitDirs.add(resolve(gitExeDir, '../..'));\n\t}\n\tfunction addTruthy<T>(set: Set<T>, value: T | undefined): void {\n\t\tif (value) {\n\t\t\tset.add(value);\n\t\t}\n\t}\n\n\t// Add common git install locations\n\taddTruthy(gitDirs, process.env['ProgramW6432']);\n\taddTruthy(gitDirs, process.env['ProgramFiles']);\n\taddTruthy(gitDirs, process.env['ProgramFiles(X86)']);\n\taddTruthy(gitDirs, `${process.env['LocalAppData']}\\\\Program`);\n\n\tconst gitBashPaths: string[] = [];\n\tfor (const gitDir of gitDirs) {\n\t\tgitBashPaths.push(\n\t\t\t`${gitDir}\\\\Git\\\\bin\\\\bash.exe`,\n\t\t\t`${gitDir}\\\\Git\\\\usr\\\\bin\\\\bash.exe`,\n\t\t\t`${gitDir}\\\\usr\\\\bin\\\\bash.exe` // using Git for Windows SDK\n\t\t);\n\t}\n\n\t// Add special installs that don't follow the standard directory structure\n\tgitBashPaths.push(`${process.env['UserProfile']}\\\\scoop\\\\apps\\\\git\\\\current\\\\bin\\\\bash.exe`);\n\tgitBashPaths.push(`${process.env['UserProfile']}\\\\scoop\\\\apps\\\\git-with-openssh\\\\current\\\\bin\\\\bash.exe`);\n\n\treturn gitBashPaths;\n}\n\nasync function getPowershellPaths(): Promise<string[]> {\n\tconst paths: string[] = [];\n\t// Add all of the different kinds of PowerShells\n\tfor await (const pwshExe of enumeratePowerShellInstallations()) {\n\t\tpaths.push(pwshExe.exePath);\n\t}\n\treturn paths;\n}\n\nasync function getWslProfiles(wslPath: string, defaultProfileName: string | undefined): Promise<ITerminalProfile[]> {\n\tconst profiles: ITerminalProfile[] = [];\n\tconst distroOutput = await new Promise<string>((resolve, reject) => {\n\t\t// wsl.exe output is encoded in utf16le (ie. A -> 0x4100)\n\t\tcp.exec('wsl.exe -l -q', { encoding: 'utf16le', timeout: 1000 }, (err, stdout) => {\n\t\t\tif (err) {\n\t\t\t\treturn reject('Problem occurred when getting wsl distros');\n\t\t\t}\n\t\t\tresolve(stdout);\n\t\t});\n\t});\n\tif (!distroOutput) {\n\t\treturn [];\n\t}\n\tconst regex = new RegExp(/[\\r?\\n]/);\n\tconst distroNames = distroOutput.split(regex).filter(t => t.trim().length > 0 && t !== '');\n\tfor (const distroName of distroNames) {\n\t\t// Skip empty lines\n\t\tif (distroName === '') {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// docker-desktop and docker-desktop-data are treated as implementation details of\n\t\t// Docker Desktop for Windows and therefore not exposed\n\t\tif (distroName.startsWith('docker-desktop')) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Create the profile, adding the icon depending on the distro\n\t\tconst profileName = `${distroName} (WSL)`;\n\t\tconst profile: ITerminalProfile = {\n\t\t\tprofileName,\n\t\t\tpath: wslPath,\n\t\t\targs: [`-d`, `${distroName}`],\n\t\t\tisDefault: profileName === defaultProfileName,\n\t\t\ticon: getWslIcon(distroName),\n\t\t\tisAutoDetected: false\n\t\t};\n\t\t// Add the profile\n\t\tprofiles.push(profile);\n\t}\n\treturn profiles;\n}\n\nfunction getWslIcon(distroName: string): ThemeIcon {\n\tif (distroName.includes('Ubuntu')) {\n\t\treturn Codicon.terminalUbuntu;\n\t} else if (distroName.includes('Debian')) {\n\t\treturn Codicon.terminalDebian;\n\t} else {\n\t\treturn Codicon.terminalLinux;\n\t}\n}\n\nasync function detectAvailableUnixProfiles(\n\tfsProvider: IFsProvider,\n\tlogService?: ILogService,\n\tincludeDetectedProfiles?: boolean,\n\tconfigProfiles?: { [key: string]: IUnresolvedTerminalProfile },\n\tdefaultProfileName?: string,\n\ttestPaths?: string[],\n\tvariableResolver?: (text: string[]) => Promise<string[]>,\n\tshellEnv?: typeof process.env\n): Promise<ITerminalProfile[]> {\n\tconst detectedProfiles: Map<string, IUnresolvedTerminalProfile> = new Map();\n\n\t// Add non-quick launch profiles\n\tif (includeDetectedProfiles) {\n\t\tconst contents = (await fsProvider.readFile('/etc/shells')).toString();\n\t\tconst profiles = (\n\t\t\t(testPaths || contents.split('\\n'))\n\t\t\t\t.map(e => {\n\t\t\t\t\tconst index = e.indexOf('#');\n\t\t\t\t\treturn index === -1 ? e : e.substring(0, index);\n\t\t\t\t})\n\t\t\t\t.filter(e => e.trim().length > 0)\n\t\t);\n\t\tconst counts: Map<string, number> = new Map();\n\t\tfor (const profile of profiles) {\n\t\t\tlet profileName = basename(profile);\n\t\t\tlet count = counts.get(profileName) || 0;\n\t\t\tcount++;\n\t\t\tif (count > 1) {\n\t\t\t\tprofileName = `${profileName} (${count})`;\n\t\t\t}\n\t\t\tcounts.set(profileName, count);\n\t\t\tdetectedProfiles.set(profileName, { path: profile, isAutoDetected: true });\n\t\t}\n\t}\n\n\tapplyConfigProfilesToMap(configProfiles, detectedProfiles);\n\n\treturn await transformToTerminalProfiles(detectedProfiles.entries(), defaultProfileName, fsProvider, shellEnv, logService, variableResolver);\n}\n\nfunction applyConfigProfilesToMap(configProfiles: { [key: string]: IUnresolvedTerminalProfile } | undefined, profilesMap: Map<string, IUnresolvedTerminalProfile>) {\n\tif (!configProfiles) {\n\t\treturn;\n\t}\n\tfor (const [profileName, value] of Object.entries(configProfiles)) {\n\t\tif (value === null || typeof value !== 'object' || (!('path' in value) && !('source' in value))) {\n\t\t\tprofilesMap.delete(profileName);\n\t\t} else {\n\t\t\tvalue.icon = value.icon || profilesMap.get(profileName)?.icon;\n\t\t\tprofilesMap.set(profileName, value);\n\t\t}\n\t}\n}\n\nasync function validateProfilePaths(profileName: string, defaultProfileName: string | undefined, potentialPaths: (string | ITerminalUnsafePath)[], fsProvider: IFsProvider, shellEnv: typeof process.env, args?: string[] | string, env?: ITerminalEnvironment, overrideName?: boolean, isAutoDetected?: boolean, requiresUnsafePath?: string): Promise<ITerminalProfile | undefined> {\n\tif (potentialPaths.length === 0) {\n\t\treturn Promise.resolve(undefined);\n\t}\n\tconst path = potentialPaths.shift()!;\n\tif (path === '') {\n\t\treturn validateProfilePaths(profileName, defaultProfileName, potentialPaths, fsProvider, shellEnv, args, env, overrideName, isAutoDetected);\n\t}\n\tconst isUnsafePath = typeof path !== 'string' && path.isUnsafe;\n\tconst actualPath = typeof path === 'string' ? path : path.path;\n\n\tconst profile: ITerminalProfile = {\n\t\tprofileName,\n\t\tpath: actualPath,\n\t\targs,\n\t\tenv,\n\t\toverrideName,\n\t\tisAutoDetected,\n\t\tisDefault: profileName === defaultProfileName,\n\t\tisUnsafePath,\n\t\trequiresUnsafePath\n\t};\n\n\t// For non-absolute paths, check if it's available on $PATH\n\tif (basename(actualPath) === actualPath) {\n\t\t// The executable isn't an absolute path, try find it on the PATH\n\t\tconst envPaths: string[] | undefined = shellEnv.PATH ? shellEnv.PATH.split(delimiter) : undefined;\n\t\tconst executable = await findExecutable(actualPath, undefined, envPaths, undefined, fsProvider.existsFile);\n\t\tif (!executable) {\n\t\t\treturn validateProfilePaths(profileName, defaultProfileName, potentialPaths, fsProvider, shellEnv, args);\n\t\t}\n\t\tprofile.path = executable;\n\t\tprofile.isFromPath = true;\n\t\treturn profile;\n\t}\n\n\tconst result = await fsProvider.existsFile(normalize(actualPath));\n\tif (result) {\n\t\treturn profile;\n\t}\n\n\treturn validateProfilePaths(profileName, defaultProfileName, potentialPaths, fsProvider, shellEnv, args, env, overrideName, isAutoDetected);\n}\n\nexport interface IFsProvider {\n\texistsFile(path: string): Promise<boolean>;\n\treadFile(path: string): Promise<Buffer>;\n}\n\ninterface IPotentialTerminalProfile {\n\tprofileName: string;\n\tpaths: string[];\n\targs?: string[];\n\ticon?: ThemeIcon | URI | { light: URI; dark: URI };\n}\n\nexport type IUnresolvedTerminalProfile = ITerminalExecutable | ITerminalProfileSource | null;\n"]}