{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/terminal/node/nodePtyHostStarter.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUzF,IAAM,GAAG,GAAT,MAAM,GAAmB,SAAQ,eAAG;QAC1C,YACkB,CAAwC,EACnB,CAAwB;YAE9D,KAAK,EAAE,CAAC;YAHS,MAAC,GAAD,CAAC,CAAuC;YACnB,MAAC,GAAD,CAAC,CAAuB;QAG/D,CAAC;QAED,KAAK;YACJ,MAAM,IAAI,GAAgB;gBACzB,UAAU,EAAE,UAAU;gBACtB,IAAI,EAAE,CAAC,gBAAgB,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC,CAAmB,QAAQ,CAAC,IAAI,CAAC,EAAE,MAAM,EAAE,iBAAO,CAAC,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC;gBAC/G,GAAG,EAAE;oBACJ,qBAAqB,EAAE,uCAAuC;oBAC9D,mBAAmB,EAAE,MAAM;oBAC3B,sBAAsB,EAAE,MAAM;oBAC9B,2BAA2B,EAAE,IAAI,CAAC,CAAC,CAAmB,SAAS;oBAC/D,iCAAiC,EAAE,IAAI,CAAC,CAAC,CAAmB,cAAc;oBAC1E,2BAA2B,EAAE,IAAI,CAAC,CAAC,CAAmB,UAAU;iBAChE;aACD,CAAC;YAEF,MAAM,YAAY,GAAG,IAAA,wBAAG,EAAmB,IAAI,CAAC,CAAC,CAAmB,IAAI,EAAE,IAAI,CAAC,CAAC,CAAmB,OAAO,CAAC,CAAC;YAC5G,IAAI,YAAY,EAAE;gBACjB,IAAI,YAAY,CAAC,KAAK,IAAI,YAAY,CAAC,IAAI,EAAE;oBAC5C,IAAI,CAAC,QAAQ,GAAG,YAAY,CAAC,IAAI,CAAC;iBAClC;qBAAM,IAAI,CAAC,YAAY,CAAC,KAAK,IAAI,YAAY,CAAC,IAAI,EAAE;oBACpD,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC,IAAI,CAAC;iBAC/B;aACD;YAED,MAAM,MAAM,GAAG,IAAI,YAAG,CAAI,aAAG,CAAQ,SAAS,CAAC,gBAAgB,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;YAE/E,MAAM,KAAK,GAAG,IAAI,eAAG,EAAc,CAAC;YACpC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;YAElB,OAAO;gBACN,MAAM;gBACN,KAAK;gBACL,gBAAgB,EAAE,MAAM,CAAC,gBAAgB;aACzC,CAAC;QACH,CAAC;KACD,CAAA;IA1CY,kBAAG;kBAAH,GAAG;QAGb,WAAA,iBAAG,CAAA;OAHO,GAAG,CA0Cf","file":"nodePtyHostStarter.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { FileAccess, Schemas } from 'vs/base/common/network';\nimport { Client, IIPCOptions } from 'vs/base/parts/ipc/node/ipc.cp';\nimport { IEnvironmentService, INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { parsePtyHostDebugPort } from 'vs/platform/environment/node/environmentService';\nimport { IReconnectConstants } from 'vs/platform/terminal/common/terminal';\nimport { IPtyHostConnection, IPtyHostStarter } from 'vs/platform/terminal/node/ptyHost';\n\nexport class NodePtyHostStarter extends Disposable implements IPtyHostStarter {\n\tconstructor(\n\t\tprivate readonly _reconnectConstants: IReconnectConstants,\n\t\t@IEnvironmentService private readonly _environmentService: INativeEnvironmentService\n\t) {\n\t\tsuper();\n\t}\n\n\tstart(): IPtyHostConnection {\n\t\tconst opts: IIPCOptions = {\n\t\t\tserverName: 'Pty Host',\n\t\t\targs: ['--type=ptyHost', '--logsPath', this._environmentService.logsHome.with({ scheme: Schemas.file }).fsPath],\n\t\t\tenv: {\n\t\t\t\tVSCODE_AMD_ENTRYPOINT: 'vs/platform/terminal/node/ptyHostMain',\n\t\t\t\tVSCODE_PIPE_LOGGING: 'true',\n\t\t\t\tVSCODE_VERBOSE_LOGGING: 'true', // transmit console logs from server to client,\n\t\t\t\tVSCODE_RECONNECT_GRACE_TIME: this._reconnectConstants.graceTime,\n\t\t\t\tVSCODE_RECONNECT_SHORT_GRACE_TIME: this._reconnectConstants.shortGraceTime,\n\t\t\t\tVSCODE_RECONNECT_SCROLLBACK: this._reconnectConstants.scrollback\n\t\t\t}\n\t\t};\n\n\t\tconst ptyHostDebug = parsePtyHostDebugPort(this._environmentService.args, this._environmentService.isBuilt);\n\t\tif (ptyHostDebug) {\n\t\t\tif (ptyHostDebug.break && ptyHostDebug.port) {\n\t\t\t\topts.debugBrk = ptyHostDebug.port;\n\t\t\t} else if (!ptyHostDebug.break && ptyHostDebug.port) {\n\t\t\t\topts.debug = ptyHostDebug.port;\n\t\t\t}\n\t\t}\n\n\t\tconst client = new Client(FileAccess.asFileUri('bootstrap-fork').fsPath, opts);\n\n\t\tconst store = new DisposableStore();\n\t\tstore.add(client);\n\n\t\treturn {\n\t\t\tclient,\n\t\t\tstore,\n\t\t\tonDidProcessExit: client.onDidProcessExit\n\t\t};\n\t}\n}\n"]}