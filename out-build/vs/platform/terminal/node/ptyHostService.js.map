{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/terminal/node/ptyHostService.ts"],"names":[],"mappings":"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","file":"ptyHostService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { IProcessEnvironment, OS, OperatingSystem, isWindows } from 'vs/base/common/platform';\nimport { ProxyChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { ILogService, ILoggerService, LogLevel } from 'vs/platform/log/common/log';\nimport { RemoteLoggerChannelClient } from 'vs/platform/log/common/logIpc';\nimport { getResolvedShellEnv } from 'vs/platform/shell/node/shellEnv';\nimport { IPtyHostProcessReplayEvent } from 'vs/platform/terminal/common/capabilities/capabilities';\nimport { RequestStore } from 'vs/platform/terminal/common/requestStore';\nimport { HeartbeatConstants, IHeartbeatService, IProcessDataEvent, IProcessProperty, IProcessPropertyMap, IProcessReadyEvent, IPtyHostLatencyMeasurement, IPtyHostService, IPtyService, IRequestResolveVariablesEvent, ISerializedTerminalState, IShellLaunchConfig, ITerminalLaunchError, ITerminalProcessOptions, ITerminalProfile, ITerminalsLayoutInfo, ProcessPropertyType, TerminalIcon, TerminalIpcChannels, TerminalSettingId, TitleEventSource } from 'vs/platform/terminal/common/terminal';\nimport { registerTerminalPlatformConfiguration } from 'vs/platform/terminal/common/terminalPlatformConfiguration';\nimport { IGetTerminalLayoutInfoArgs, IProcessDetails, ISetTerminalLayoutInfoArgs } from 'vs/platform/terminal/common/terminalProcess';\nimport { IPtyHostConnection, IPtyHostStarter } from 'vs/platform/terminal/node/ptyHost';\nimport { detectAvailableProfiles } from 'vs/platform/terminal/node/terminalProfiles';\nimport * as performance from 'vs/base/common/performance';\nimport { getSystemShell } from 'vs/base/node/shell';\nimport { StopWatch } from 'vs/base/common/stopwatch';\n\nenum Constants {\n\tMaxRestarts = 5\n}\n\n/**\n * This service implements IPtyService by launching a pty host process, forwarding messages to and\n * from the pty host process and manages the connection.\n */\nexport class PtyHostService extends Disposable implements IPtyHostService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate __connection?: IPtyHostConnection;\n\t// ProxyChannel is not used here because events get lost when forwarding across multiple proxies\n\tprivate __proxy?: IPtyService;\n\n\tprivate get _connection(): IPtyHostConnection {\n\t\tthis._ensurePtyHost();\n\t\treturn this.__connection!;\n\t}\n\tprivate get _proxy(): IPtyService {\n\t\tthis._ensurePtyHost();\n\t\treturn this.__proxy!;\n\t}\n\t/**\n\t * Get the proxy if it exists, otherwise undefined. This is used when calls are not needed to be\n\t * passed through to the pty host if it has not yet been spawned.\n\t */\n\tprivate get _optionalProxy(): IPtyService | undefined {\n\t\treturn this.__proxy;\n\t}\n\n\tprivate _ensurePtyHost() {\n\t\tif (!this.__connection) {\n\t\t\tthis._startPtyHost();\n\t\t}\n\t}\n\n\tprivate readonly _resolveVariablesRequestStore: RequestStore<string[], { workspaceId: string; originalText: string[] }>;\n\tprivate _wasQuitRequested = false;\n\tprivate _restartCount = 0;\n\tprivate _isResponsive = true;\n\tprivate _heartbeatFirstTimeout?: NodeJS.Timeout;\n\tprivate _heartbeatSecondTimeout?: NodeJS.Timeout;\n\n\tprivate readonly _onPtyHostExit = this._register(new Emitter<number>());\n\treadonly onPtyHostExit = this._onPtyHostExit.event;\n\tprivate readonly _onPtyHostStart = this._register(new Emitter<void>());\n\treadonly onPtyHostStart = this._onPtyHostStart.event;\n\tprivate readonly _onPtyHostUnresponsive = this._register(new Emitter<void>());\n\treadonly onPtyHostUnresponsive = this._onPtyHostUnresponsive.event;\n\tprivate readonly _onPtyHostResponsive = this._register(new Emitter<void>());\n\treadonly onPtyHostResponsive = this._onPtyHostResponsive.event;\n\tprivate readonly _onPtyHostRequestResolveVariables = this._register(new Emitter<IRequestResolveVariablesEvent>());\n\treadonly onPtyHostRequestResolveVariables = this._onPtyHostRequestResolveVariables.event;\n\n\tprivate readonly _onProcessData = this._register(new Emitter<{ id: number; event: IProcessDataEvent | string }>());\n\treadonly onProcessData = this._onProcessData.event;\n\tprivate readonly _onProcessReady = this._register(new Emitter<{ id: number; event: IProcessReadyEvent }>());\n\treadonly onProcessReady = this._onProcessReady.event;\n\tprivate readonly _onProcessReplay = this._register(new Emitter<{ id: number; event: IPtyHostProcessReplayEvent }>());\n\treadonly onProcessReplay = this._onProcessReplay.event;\n\tprivate readonly _onProcessOrphanQuestion = this._register(new Emitter<{ id: number }>());\n\treadonly onProcessOrphanQuestion = this._onProcessOrphanQuestion.event;\n\tprivate readonly _onDidRequestDetach = this._register(new Emitter<{ requestId: number; workspaceId: string; instanceId: number }>());\n\treadonly onDidRequestDetach = this._onDidRequestDetach.event;\n\tprivate readonly _onDidChangeProperty = this._register(new Emitter<{ id: number; property: IProcessProperty<any> }>());\n\treadonly onDidChangeProperty = this._onDidChangeProperty.event;\n\tprivate readonly _onProcessExit = this._register(new Emitter<{ id: number; event: number | undefined }>());\n\treadonly onProcessExit = this._onProcessExit.event;\n\n\tconstructor(\n\t\tprivate readonly _ptyHostStarter: IPtyHostStarter,\n\t\t@IConfigurationService private readonly _configurationService: IConfigurationService,\n\t\t@ILogService private readonly _logService: ILogService,\n\t\t@ILoggerService private readonly _loggerService: ILoggerService,\n\t) {\n\t\tsuper();\n\n\t\t// Platform configuration is required on the process running the pty host (shared process or\n\t\t// remote server).\n\t\tregisterTerminalPlatformConfiguration();\n\n\t\tthis._register(this._ptyHostStarter);\n\t\tthis._register(toDisposable(() => this._disposePtyHost()));\n\n\t\tthis._resolveVariablesRequestStore = this._register(new RequestStore(undefined, this._logService));\n\t\tthis._resolveVariablesRequestStore.onCreateRequest(this._onPtyHostRequestResolveVariables.fire, this._onPtyHostRequestResolveVariables);\n\n\t\t// Start the pty host when a window requests a connection, if the starter has that capability.\n\t\tif (this._ptyHostStarter.onRequestConnection) {\n\t\t\tEvent.once(this._ptyHostStarter.onRequestConnection)(() => this._ensurePtyHost());\n\t\t}\n\n\t\tthis._ptyHostStarter.onWillShutdown?.(() => this._wasQuitRequested = true);\n\t}\n\n\tprivate get _ignoreProcessNames(): string[] {\n\t\treturn this._configurationService.getValue<string[]>(TerminalSettingId.IgnoreProcessNames);\n\t}\n\n\tprivate async _refreshIgnoreProcessNames(): Promise<void> {\n\t\treturn this._optionalProxy?.refreshIgnoreProcessNames?.(this._ignoreProcessNames);\n\t}\n\n\tprivate async _resolveShellEnv(): Promise<typeof process.env> {\n\t\tif (isWindows) {\n\t\t\treturn process.env;\n\t\t}\n\n\t\ttry {\n\t\t\treturn await getResolvedShellEnv(this._configurationService, this._logService, { _: [] }, process.env);\n\t\t} catch (error) {\n\t\t\tthis._logService.error('ptyHost was unable to resolve shell environment', error);\n\n\t\t\treturn {};\n\t\t}\n\t}\n\n\tprivate _startPtyHost(): [IPtyHostConnection, IPtyService] {\n\t\tconst connection = this._ptyHostStarter.start();\n\t\tconst client = connection.client;\n\n\t\t// Log a full stack trace which will tell the exact reason the pty host is starting up\n\t\tif (this._logService.getLevel() === LogLevel.Trace) {\n\t\t\tthis._logService.trace('PtyHostService#_startPtyHost', new Error().stack?.replace(/^Error/, ''));\n\t\t}\n\n\t\t// Setup heartbeat service and trigger a heartbeat immediately to reset the timeouts\n\t\tconst heartbeatService = ProxyChannel.toService<IHeartbeatService>(client.getChannel(TerminalIpcChannels.Heartbeat));\n\t\theartbeatService.onBeat(() => this._handleHeartbeat());\n\t\tthis._handleHeartbeat(true);\n\n\t\t// Handle exit\n\t\tthis._register(connection.onDidProcessExit(e => {\n\t\t\tthis._onPtyHostExit.fire(e.code);\n\t\t\tif (!this._wasQuitRequested && !this._store.isDisposed) {\n\t\t\t\tif (this._restartCount <= Constants.MaxRestarts) {\n\t\t\t\t\tthis._logService.error(`ptyHost terminated unexpectedly with code ${e.code}`);\n\t\t\t\t\tthis._restartCount++;\n\t\t\t\t\tthis.restartPtyHost();\n\t\t\t\t} else {\n\t\t\t\t\tthis._logService.error(`ptyHost terminated unexpectedly with code ${e.code}, giving up`);\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\t// Create proxy and forward events\n\t\tconst proxy = ProxyChannel.toService<IPtyService>(client.getChannel(TerminalIpcChannels.PtyHost));\n\t\tthis._register(proxy.onProcessData(e => this._onProcessData.fire(e)));\n\t\tthis._register(proxy.onProcessReady(e => this._onProcessReady.fire(e)));\n\t\tthis._register(proxy.onProcessExit(e => this._onProcessExit.fire(e)));\n\t\tthis._register(proxy.onDidChangeProperty(e => this._onDidChangeProperty.fire(e)));\n\t\tthis._register(proxy.onProcessReplay(e => this._onProcessReplay.fire(e)));\n\t\tthis._register(proxy.onProcessOrphanQuestion(e => this._onProcessOrphanQuestion.fire(e)));\n\t\tthis._register(proxy.onDidRequestDetach(e => this._onDidRequestDetach.fire(e)));\n\n\t\tthis._register(new RemoteLoggerChannelClient(this._loggerService, client.getChannel(TerminalIpcChannels.Logger)));\n\n\t\tthis.__connection = connection;\n\t\tthis.__proxy = proxy;\n\n\t\tthis._onPtyHostStart.fire();\n\n\t\tthis._register(this._configurationService.onDidChangeConfiguration(async e => {\n\t\t\tif (e.affectsConfiguration(TerminalSettingId.IgnoreProcessNames)) {\n\t\t\t\tawait this._refreshIgnoreProcessNames();\n\t\t\t}\n\t\t}));\n\t\tthis._refreshIgnoreProcessNames();\n\n\t\treturn [connection, proxy];\n\t}\n\n\tasync createProcess(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tcwd: string,\n\t\tcols: number,\n\t\trows: number,\n\t\tunicodeVersion: '6' | '11',\n\t\tenv: IProcessEnvironment,\n\t\texecutableEnv: IProcessEnvironment,\n\t\toptions: ITerminalProcessOptions,\n\t\tshouldPersist: boolean,\n\t\tworkspaceId: string,\n\t\tworkspaceName: string\n\t): Promise<number> {\n\t\tconst timeout = setTimeout(() => this._handleUnresponsiveCreateProcess(), HeartbeatConstants.CreateProcessTimeout);\n\t\tconst id = await this._proxy.createProcess(shellLaunchConfig, cwd, cols, rows, unicodeVersion, env, executableEnv, options, shouldPersist, workspaceId, workspaceName);\n\t\tclearTimeout(timeout);\n\t\treturn id;\n\t}\n\tupdateTitle(id: number, title: string, titleSource: TitleEventSource): Promise<void> {\n\t\treturn this._proxy.updateTitle(id, title, titleSource);\n\t}\n\tupdateIcon(id: number, userInitiated: boolean, icon: TerminalIcon, color?: string): Promise<void> {\n\t\treturn this._proxy.updateIcon(id, userInitiated, icon, color);\n\t}\n\tattachToProcess(id: number): Promise<void> {\n\t\treturn this._proxy.attachToProcess(id);\n\t}\n\tdetachFromProcess(id: number, forcePersist?: boolean): Promise<void> {\n\t\treturn this._proxy.detachFromProcess(id, forcePersist);\n\t}\n\tshutdownAll(): Promise<void> {\n\t\treturn this._proxy.shutdownAll();\n\t}\n\tlistProcesses(): Promise<IProcessDetails[]> {\n\t\treturn this._proxy.listProcesses();\n\t}\n\tasync getPerformanceMarks(): Promise<performance.PerformanceMark[]> {\n\t\treturn this._optionalProxy?.getPerformanceMarks() ?? [];\n\t}\n\tasync reduceConnectionGraceTime(): Promise<void> {\n\t\treturn this._optionalProxy?.reduceConnectionGraceTime();\n\t}\n\tstart(id: number): Promise<ITerminalLaunchError | { injectedArgs: string[] } | undefined> {\n\t\treturn this._proxy.start(id);\n\t}\n\tshutdown(id: number, immediate: boolean): Promise<void> {\n\t\treturn this._proxy.shutdown(id, immediate);\n\t}\n\tinput(id: number, data: string): Promise<void> {\n\t\treturn this._proxy.input(id, data);\n\t}\n\tprocessBinary(id: number, data: string): Promise<void> {\n\t\treturn this._proxy.processBinary(id, data);\n\t}\n\tresize(id: number, cols: number, rows: number): Promise<void> {\n\t\treturn this._proxy.resize(id, cols, rows);\n\t}\n\tclearBuffer(id: number): Promise<void> {\n\t\treturn this._proxy.clearBuffer(id);\n\t}\n\tacknowledgeDataEvent(id: number, charCount: number): Promise<void> {\n\t\treturn this._proxy.acknowledgeDataEvent(id, charCount);\n\t}\n\tsetUnicodeVersion(id: number, version: '6' | '11'): Promise<void> {\n\t\treturn this._proxy.setUnicodeVersion(id, version);\n\t}\n\tgetInitialCwd(id: number): Promise<string> {\n\t\treturn this._proxy.getInitialCwd(id);\n\t}\n\tgetCwd(id: number): Promise<string> {\n\t\treturn this._proxy.getCwd(id);\n\t}\n\tasync getLatency(): Promise<IPtyHostLatencyMeasurement[]> {\n\t\tconst sw = new StopWatch();\n\t\tconst results = await this._proxy.getLatency();\n\t\tsw.stop();\n\t\treturn [\n\t\t\t{\n\t\t\t\tlabel: 'ptyhostservice<->ptyhost',\n\t\t\t\tlatency: sw.elapsed()\n\t\t\t},\n\t\t\t...results\n\t\t];\n\t}\n\torphanQuestionReply(id: number): Promise<void> {\n\t\treturn this._proxy.orphanQuestionReply(id);\n\t}\n\n\tinstallAutoReply(match: string, reply: string): Promise<void> {\n\t\treturn this._proxy.installAutoReply(match, reply);\n\t}\n\tuninstallAllAutoReplies(): Promise<void> {\n\t\treturn this._proxy.uninstallAllAutoReplies();\n\t}\n\tuninstallAutoReply(match: string): Promise<void> {\n\t\treturn this._proxy.uninstallAutoReply(match);\n\t}\n\n\tgetDefaultSystemShell(osOverride?: OperatingSystem): Promise<string> {\n\t\treturn this._optionalProxy?.getDefaultSystemShell(osOverride) ?? getSystemShell(osOverride ?? OS, process.env);\n\t}\n\tasync getProfiles(workspaceId: string, profiles: unknown, defaultProfile: unknown, includeDetectedProfiles: boolean = false): Promise<ITerminalProfile[]> {\n\t\tconst shellEnv = await this._resolveShellEnv();\n\t\treturn detectAvailableProfiles(profiles, defaultProfile, includeDetectedProfiles, this._configurationService, shellEnv, undefined, this._logService, this._resolveVariables.bind(this, workspaceId));\n\t}\n\tasync getEnvironment(): Promise<IProcessEnvironment> {\n\t\t// If the pty host is yet to be launched, just return the environment of this process as it\n\t\t// is essentially the same when used to evaluate terminal profiles.\n\t\tif (!this.__proxy) {\n\t\t\treturn { ...process.env };\n\t\t}\n\t\treturn this._proxy.getEnvironment();\n\t}\n\tgetWslPath(original: string, direction: 'unix-to-win' | 'win-to-unix'): Promise<string> {\n\t\treturn this._proxy.getWslPath(original, direction);\n\t}\n\n\tgetRevivedPtyNewId(workspaceId: string, id: number): Promise<number | undefined> {\n\t\treturn this._proxy.getRevivedPtyNewId(workspaceId, id);\n\t}\n\n\tsetTerminalLayoutInfo(args: ISetTerminalLayoutInfoArgs): Promise<void> {\n\t\treturn this._proxy.setTerminalLayoutInfo(args);\n\t}\n\tasync getTerminalLayoutInfo(args: IGetTerminalLayoutInfoArgs): Promise<ITerminalsLayoutInfo | undefined> {\n\t\t// This is optional as we want reconnect requests to go through only if the pty host exists.\n\t\t// Revive is handled specially as reviveTerminalProcesses is guaranteed to be called before\n\t\t// the request for layout info.\n\t\treturn this._optionalProxy?.getTerminalLayoutInfo(args);\n\t}\n\n\tasync requestDetachInstance(workspaceId: string, instanceId: number): Promise<IProcessDetails | undefined> {\n\t\treturn this._proxy.requestDetachInstance(workspaceId, instanceId);\n\t}\n\n\tasync acceptDetachInstanceReply(requestId: number, persistentProcessId: number): Promise<void> {\n\t\treturn this._proxy.acceptDetachInstanceReply(requestId, persistentProcessId);\n\t}\n\n\tasync freePortKillProcess(port: string): Promise<{ port: string; processId: string }> {\n\t\tif (!this._proxy.freePortKillProcess) {\n\t\t\tthrow new Error('freePortKillProcess does not exist on the pty proxy');\n\t\t}\n\t\treturn this._proxy.freePortKillProcess(port);\n\t}\n\n\tasync serializeTerminalState(ids: number[]): Promise<string> {\n\t\treturn this._proxy.serializeTerminalState(ids);\n\t}\n\n\tasync reviveTerminalProcesses(workspaceId: string, state: ISerializedTerminalState[], dateTimeFormatLocate: string) {\n\t\treturn this._proxy.reviveTerminalProcesses(workspaceId, state, dateTimeFormatLocate);\n\t}\n\n\tasync refreshProperty<T extends ProcessPropertyType>(id: number, property: T): Promise<IProcessPropertyMap[T]> {\n\t\treturn this._proxy.refreshProperty(id, property);\n\n\t}\n\tasync updateProperty<T extends ProcessPropertyType>(id: number, property: T, value: IProcessPropertyMap[T]): Promise<void> {\n\t\treturn this._proxy.updateProperty(id, property, value);\n\t}\n\n\tasync restartPtyHost(): Promise<void> {\n\t\tthis._disposePtyHost();\n\t\tthis._isResponsive = true;\n\t\tthis._startPtyHost();\n\t}\n\n\tprivate _disposePtyHost(): void {\n\t\tthis._proxy.shutdownAll();\n\t\tthis._connection.store.dispose();\n\t}\n\n\tprivate _handleHeartbeat(isConnecting?: boolean) {\n\t\tthis._clearHeartbeatTimeouts();\n\t\tthis._heartbeatFirstTimeout = setTimeout(() => this._handleHeartbeatFirstTimeout(), isConnecting ? HeartbeatConstants.ConnectingBeatInterval : (HeartbeatConstants.BeatInterval * HeartbeatConstants.FirstWaitMultiplier));\n\t\tif (!this._isResponsive) {\n\t\t\tthis._isResponsive = true;\n\t\t\tthis._onPtyHostResponsive.fire();\n\t\t}\n\t}\n\n\tprivate _handleHeartbeatFirstTimeout() {\n\t\tthis._logService.warn(`No ptyHost heartbeat after ${HeartbeatConstants.BeatInterval * HeartbeatConstants.FirstWaitMultiplier / 1000} seconds`);\n\t\tthis._heartbeatFirstTimeout = undefined;\n\t\tthis._heartbeatSecondTimeout = setTimeout(() => this._handleHeartbeatSecondTimeout(), HeartbeatConstants.BeatInterval * HeartbeatConstants.SecondWaitMultiplier);\n\t}\n\n\tprivate _handleHeartbeatSecondTimeout() {\n\t\tthis._logService.error(`No ptyHost heartbeat after ${(HeartbeatConstants.BeatInterval * HeartbeatConstants.FirstWaitMultiplier + HeartbeatConstants.BeatInterval * HeartbeatConstants.FirstWaitMultiplier) / 1000} seconds`);\n\t\tthis._heartbeatSecondTimeout = undefined;\n\t\tif (this._isResponsive) {\n\t\t\tthis._isResponsive = false;\n\t\t\tthis._onPtyHostUnresponsive.fire();\n\t\t}\n\t}\n\n\tprivate _handleUnresponsiveCreateProcess() {\n\t\tthis._clearHeartbeatTimeouts();\n\t\tthis._logService.error(`No ptyHost response to createProcess after ${HeartbeatConstants.CreateProcessTimeout / 1000} seconds`);\n\t\tif (this._isResponsive) {\n\t\t\tthis._isResponsive = false;\n\t\t\tthis._onPtyHostUnresponsive.fire();\n\t\t}\n\t}\n\n\tprivate _clearHeartbeatTimeouts() {\n\t\tif (this._heartbeatFirstTimeout) {\n\t\t\tclearTimeout(this._heartbeatFirstTimeout);\n\t\t\tthis._heartbeatFirstTimeout = undefined;\n\t\t}\n\t\tif (this._heartbeatSecondTimeout) {\n\t\t\tclearTimeout(this._heartbeatSecondTimeout);\n\t\t\tthis._heartbeatSecondTimeout = undefined;\n\t\t}\n\t}\n\n\tprivate _resolveVariables(workspaceId: string, text: string[]): Promise<string[]> {\n\t\treturn this._resolveVariablesRequestStore.createRequest({ workspaceId, originalText: text });\n\t}\n\tasync acceptPtyHostResolvedVariables(requestId: number, resolved: string[]) {\n\t\tthis._resolveVariablesRequestStore.acceptReply(requestId, resolved);\n\t}\n}\n"]}