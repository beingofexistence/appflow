{"version":3,"sources":["vs/platform/terminal/node/ptyService.ts"],"names":[],"mappings":"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","file":"ptyService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { execFile, exec } from 'child_process';\nimport { AutoOpenBarrier, ProcessTimeRunOnceScheduler, Promises, Queue, timeout } from 'vs/base/common/async';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { IProcessEnvironment, isWindows, OperatingSystem, OS } from 'vs/base/common/platform';\nimport { URI } from 'vs/base/common/uri';\nimport { getSystemShell } from 'vs/base/node/shell';\nimport { ILogService, LogLevel } from 'vs/platform/log/common/log';\nimport { RequestStore } from 'vs/platform/terminal/common/requestStore';\nimport { IProcessDataEvent, IProcessReadyEvent, IPtyService, IRawTerminalInstanceLayoutInfo, IReconnectConstants, IShellLaunchConfig, ITerminalInstanceLayoutInfoById, ITerminalLaunchError, ITerminalsLayoutInfo, ITerminalTabLayoutInfoById, TerminalIcon, IProcessProperty, TitleEventSource, ProcessPropertyType, IProcessPropertyMap, IFixedTerminalDimensions, IPersistentTerminalProcessLaunchConfig, ICrossVersionSerializedTerminalState, ISerializedTerminalState, ITerminalProcessOptions, IPtyHostLatencyMeasurement } from 'vs/platform/terminal/common/terminal';\nimport { TerminalDataBufferer } from 'vs/platform/terminal/common/terminalDataBuffering';\nimport { escapeNonWindowsPath } from 'vs/platform/terminal/common/terminalEnvironment';\nimport { Terminal as XtermTerminal } from 'xterm-headless';\nimport type { ISerializeOptions, SerializeAddon as XtermSerializeAddon } from 'xterm-addon-serialize';\nimport type { Unicode11Addon as XtermUnicode11Addon } from 'xterm-addon-unicode11';\nimport { IGetTerminalLayoutInfoArgs, IProcessDetails, ISetTerminalLayoutInfoArgs, ITerminalTabLayoutInfoDto } from 'vs/platform/terminal/common/terminalProcess';\nimport { getWindowsBuildNumber } from 'vs/platform/terminal/node/terminalEnvironment';\nimport { TerminalProcess } from 'vs/platform/terminal/node/terminalProcess';\nimport { localize } from 'vs/nls';\nimport { ignoreProcessNames } from 'vs/platform/terminal/node/childProcessMonitor';\nimport { TerminalAutoResponder } from 'vs/platform/terminal/common/terminalAutoResponder';\nimport { ErrorNoTelemetry } from 'vs/base/common/errors';\nimport { ShellIntegrationAddon } from 'vs/platform/terminal/common/xterm/shellIntegrationAddon';\nimport { formatMessageForTerminal } from 'vs/platform/terminal/common/terminalStrings';\nimport { IPtyHostProcessReplayEvent } from 'vs/platform/terminal/common/capabilities/capabilities';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { join } from 'path';\nimport { memoize } from 'vs/base/common/decorators';\nimport * as performance from 'vs/base/common/performance';\n\nexport function traceRpc(_target: any, key: string, descriptor: any) {\n\tif (typeof descriptor.value !== 'function') {\n\t\tthrow new Error('not supported');\n\t}\n\tconst fnKey = 'value';\n\tconst fn = descriptor.value;\n\tdescriptor[fnKey] = async function (...args: any[]) {\n\t\tif (this.traceRpcArgs.logService.getLevel() === LogLevel.Trace) {\n\t\t\tthis.traceRpcArgs.logService.trace(`[RPC Request] PtyService#${fn.name}(${args.map(e => JSON.stringify(e)).join(', ')})`);\n\t\t}\n\t\tif (this.traceRpcArgs.simulatedLatency) {\n\t\t\tawait timeout(this.traceRpcArgs.simulatedLatency);\n\t\t}\n\t\tlet result: any;\n\t\ttry {\n\t\t\tresult = await fn.apply(this, args);\n\t\t} catch (e) {\n\t\t\tthis.traceRpcArgs.logService.error(`[RPC Response] PtyService#${fn.name}`, e);\n\t\t\tthrow e;\n\t\t}\n\t\tif (this.traceRpcArgs.logService.getLevel() === LogLevel.Trace) {\n\t\t\tthis.traceRpcArgs.logService.trace(`[RPC Response] PtyService#${fn.name}`, result);\n\t\t}\n\t\treturn result;\n\t};\n}\n\ntype WorkspaceId = string;\n\nlet SerializeAddon: typeof XtermSerializeAddon;\nlet Unicode11Addon: typeof XtermUnicode11Addon;\n\nexport class PtyService extends Disposable implements IPtyService {\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _ptys: Map<number, PersistentTerminalProcess> = new Map();\n\tprivate readonly _workspaceLayoutInfos = new Map<WorkspaceId, ISetTerminalLayoutInfoArgs>();\n\tprivate readonly _detachInstanceRequestStore: RequestStore<IProcessDetails | undefined, { workspaceId: string; instanceId: number }>;\n\tprivate readonly _revivedPtyIdMap: Map<string, { newId: number; state: ISerializedTerminalState }> = new Map();\n\tprivate readonly _autoReplies: Map<string, string> = new Map();\n\n\tprivate _lastPtyId: number = 0;\n\n\tprivate readonly _onHeartbeat = this._register(new Emitter<void>());\n\treadonly onHeartbeat = this._traceEvent('_onHeartbeat', this._onHeartbeat.event);\n\n\tprivate readonly _onProcessData = this._register(new Emitter<{ id: number; event: IProcessDataEvent | string }>());\n\treadonly onProcessData = this._traceEvent('_onProcessData', this._onProcessData.event);\n\tprivate readonly _onProcessReplay = this._register(new Emitter<{ id: number; event: IPtyHostProcessReplayEvent }>());\n\treadonly onProcessReplay = this._traceEvent('_onProcessReplay', this._onProcessReplay.event);\n\tprivate readonly _onProcessReady = this._register(new Emitter<{ id: number; event: IProcessReadyEvent }>());\n\treadonly onProcessReady = this._traceEvent('_onProcessReady', this._onProcessReady.event);\n\tprivate readonly _onProcessExit = this._register(new Emitter<{ id: number; event: number | undefined }>());\n\treadonly onProcessExit = this._traceEvent('_onProcessExit', this._onProcessExit.event);\n\tprivate readonly _onProcessOrphanQuestion = this._register(new Emitter<{ id: number }>());\n\treadonly onProcessOrphanQuestion = this._traceEvent('_onProcessOrphanQuestion', this._onProcessOrphanQuestion.event);\n\tprivate readonly _onDidRequestDetach = this._register(new Emitter<{ requestId: number; workspaceId: string; instanceId: number }>());\n\treadonly onDidRequestDetach = this._traceEvent('_onDidRequestDetach', this._onDidRequestDetach.event);\n\tprivate readonly _onDidChangeProperty = this._register(new Emitter<{ id: number; property: IProcessProperty<any> }>());\n\treadonly onDidChangeProperty = this._traceEvent('_onDidChangeProperty', this._onDidChangeProperty.event);\n\n\tprivate _traceEvent<T>(name: string, event: Event<T>): Event<T> {\n\t\tevent(e => {\n\t\t\tif (this._logService.getLevel() === LogLevel.Trace) {\n\t\t\t\tthis._logService.trace(`[RPC Event] PtyService#${name}.fire(${JSON.stringify(e)})`);\n\t\t\t}\n\t\t});\n\t\treturn event;\n\t}\n\n\t@memoize\n\tget traceRpcArgs(): { logService: ILogService; simulatedLatency: number } {\n\t\treturn {\n\t\t\tlogService: this._logService,\n\t\t\tsimulatedLatency: this._simulatedLatency\n\t\t};\n\t}\n\n\tconstructor(\n\t\tprivate readonly _logService: ILogService,\n\t\tprivate readonly _productService: IProductService,\n\t\tprivate readonly _reconnectConstants: IReconnectConstants,\n\t\tprivate readonly _simulatedLatency: number\n\t) {\n\t\tsuper();\n\n\t\tthis._register(toDisposable(() => {\n\t\t\tfor (const pty of this._ptys.values()) {\n\t\t\t\tpty.shutdown(true);\n\t\t\t}\n\t\t\tthis._ptys.clear();\n\t\t}));\n\n\t\tthis._detachInstanceRequestStore = this._register(new RequestStore(undefined, this._logService));\n\t\tthis._detachInstanceRequestStore.onCreateRequest(this._onDidRequestDetach.fire, this._onDidRequestDetach);\n\t}\n\n\t@traceRpc\n\tasync refreshIgnoreProcessNames(names: string[]): Promise<void> {\n\t\tignoreProcessNames.length = 0;\n\t\tignoreProcessNames.push(...names);\n\t}\n\n\t@traceRpc\n\tasync requestDetachInstance(workspaceId: string, instanceId: number): Promise<IProcessDetails | undefined> {\n\t\treturn this._detachInstanceRequestStore.createRequest({ workspaceId, instanceId });\n\t}\n\n\t@traceRpc\n\tasync acceptDetachInstanceReply(requestId: number, persistentProcessId: number): Promise<void> {\n\t\tlet processDetails: IProcessDetails | undefined = undefined;\n\t\tconst pty = this._ptys.get(persistentProcessId);\n\t\tif (pty) {\n\t\t\tprocessDetails = await this._buildProcessDetails(persistentProcessId, pty);\n\t\t}\n\t\tthis._detachInstanceRequestStore.acceptReply(requestId, processDetails);\n\t}\n\n\t@traceRpc\n\tasync freePortKillProcess(port: string): Promise<{ port: string; processId: string }> {\n\t\tconst stdout = await new Promise<string>((resolve, reject) => {\n\t\t\texec(isWindows ? `netstat -ano | findstr \"${port}\"` : `lsof -nP -iTCP -sTCP:LISTEN | grep ${port}`, {}, (err, stdout) => {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn reject('Problem occurred when listing active processes');\n\t\t\t\t}\n\t\t\t\tresolve(stdout);\n\t\t\t});\n\t\t});\n\t\tconst processesForPort = stdout.split(/\\r?\\n/).filter(s => !!s.trim());\n\t\tif (processesForPort.length >= 1) {\n\t\t\tconst capturePid = /\\s+(\\d+)(?:\\s+|$)/;\n\t\t\tconst processId = processesForPort[0].match(capturePid)?.[1];\n\t\t\tif (processId) {\n\t\t\t\ttry {\n\t\t\t\t\tprocess.kill(Number.parseInt(processId));\n\t\t\t\t} catch { }\n\t\t\t} else {\n\t\t\t\tthrow new Error(`Processes for port ${port} were not found`);\n\t\t\t}\n\t\t\treturn { port, processId };\n\t\t}\n\t\tthrow new Error(`Could not kill process with port ${port}`);\n\t}\n\n\t@traceRpc\n\tasync serializeTerminalState(ids: number[]): Promise<string> {\n\t\tconst promises: Promise<ISerializedTerminalState>[] = [];\n\t\tfor (const [persistentProcessId, persistentProcess] of this._ptys.entries()) {\n\t\t\t// Only serialize persistent processes that have had data written or performed a replay\n\t\t\tif (persistentProcess.hasWrittenData && ids.indexOf(persistentProcessId) !== -1) {\n\t\t\t\tpromises.push(Promises.withAsyncBody<ISerializedTerminalState>(async r => {\n\t\t\t\t\tr({\n\t\t\t\t\t\tid: persistentProcessId,\n\t\t\t\t\t\tshellLaunchConfig: persistentProcess.shellLaunchConfig,\n\t\t\t\t\t\tprocessDetails: await this._buildProcessDetails(persistentProcessId, persistentProcess),\n\t\t\t\t\t\tprocessLaunchConfig: persistentProcess.processLaunchOptions,\n\t\t\t\t\t\tunicodeVersion: persistentProcess.unicodeVersion,\n\t\t\t\t\t\treplayEvent: await persistentProcess.serializeNormalBuffer(),\n\t\t\t\t\t\ttimestamp: Date.now()\n\t\t\t\t\t});\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\t\tconst serialized: ICrossVersionSerializedTerminalState = {\n\t\t\tversion: 1,\n\t\t\tstate: await Promise.all(promises)\n\t\t};\n\t\treturn JSON.stringify(serialized);\n\t}\n\n\t@traceRpc\n\tasync reviveTerminalProcesses(workspaceId: string, state: ISerializedTerminalState[], dateTimeFormatLocale: string) {\n\t\tconst promises: Promise<void>[] = [];\n\t\tfor (const terminal of state) {\n\t\t\tpromises.push(this._reviveTerminalProcess(workspaceId, terminal));\n\t\t}\n\t\tawait Promise.all(promises);\n\t}\n\n\tprivate async _reviveTerminalProcess(workspaceId: string, terminal: ISerializedTerminalState): Promise<void> {\n\t\tconst restoreMessage = localize('terminal-history-restored', \"History restored\");\n\t\t// TODO: We may at some point want to show date information in a hover via a custom sequence:\n\t\t//   new Date(terminal.timestamp).toLocaleDateString(dateTimeFormatLocale)\n\t\t//   new Date(terminal.timestamp).toLocaleTimeString(dateTimeFormatLocale)\n\t\tconst newId = await this.createProcess(\n\t\t\t{\n\t\t\t\t...terminal.shellLaunchConfig,\n\t\t\t\tcwd: terminal.processDetails.cwd,\n\t\t\t\tcolor: terminal.processDetails.color,\n\t\t\t\ticon: terminal.processDetails.icon,\n\t\t\t\tname: terminal.processDetails.titleSource === TitleEventSource.Api ? terminal.processDetails.title : undefined,\n\t\t\t\tinitialText: terminal.replayEvent.events[0].data + formatMessageForTerminal(restoreMessage, { loudFormatting: true })\n\t\t\t},\n\t\t\tterminal.processDetails.cwd,\n\t\t\tterminal.replayEvent.events[0].cols,\n\t\t\tterminal.replayEvent.events[0].rows,\n\t\t\tterminal.unicodeVersion,\n\t\t\tterminal.processLaunchConfig.env,\n\t\t\tterminal.processLaunchConfig.executableEnv,\n\t\t\tterminal.processLaunchConfig.options,\n\t\t\ttrue,\n\t\t\tterminal.processDetails.workspaceId,\n\t\t\tterminal.processDetails.workspaceName,\n\t\t\ttrue,\n\t\t\tterminal.replayEvent.events[0].data\n\t\t);\n\t\t// Don't start the process here as there's no terminal to answer CPR\n\t\tconst oldId = this._getRevivingProcessId(workspaceId, terminal.id);\n\t\tthis._revivedPtyIdMap.set(oldId, { newId, state: terminal });\n\t\tthis._logService.info(`Revived process, old id ${oldId} -> new id ${newId}`);\n\t}\n\n\t@traceRpc\n\tasync shutdownAll(): Promise<void> {\n\t\tthis.dispose();\n\t}\n\n\t@traceRpc\n\tasync createProcess(\n\t\tshellLaunchConfig: IShellLaunchConfig,\n\t\tcwd: string,\n\t\tcols: number,\n\t\trows: number,\n\t\tunicodeVersion: '6' | '11',\n\t\tenv: IProcessEnvironment,\n\t\texecutableEnv: IProcessEnvironment,\n\t\toptions: ITerminalProcessOptions,\n\t\tshouldPersist: boolean,\n\t\tworkspaceId: string,\n\t\tworkspaceName: string,\n\t\tisReviving?: boolean,\n\t\trawReviveBuffer?: string\n\t): Promise<number> {\n\t\tif (shellLaunchConfig.attachPersistentProcess) {\n\t\t\tthrow new Error('Attempt to create a process when attach object was provided');\n\t\t}\n\t\tconst id = ++this._lastPtyId;\n\t\tconst process = new TerminalProcess(shellLaunchConfig, cwd, cols, rows, env, executableEnv, options, this._logService, this._productService);\n\t\tconst processLaunchOptions: IPersistentTerminalProcessLaunchConfig = {\n\t\t\tenv,\n\t\t\texecutableEnv,\n\t\t\toptions\n\t\t};\n\t\tconst persistentProcess = new PersistentTerminalProcess(id, process, workspaceId, workspaceName, shouldPersist, cols, rows, processLaunchOptions, unicodeVersion, this._reconnectConstants, this._logService, isReviving && typeof shellLaunchConfig.initialText === 'string' ? shellLaunchConfig.initialText : undefined, rawReviveBuffer, shellLaunchConfig.icon, shellLaunchConfig.color, shellLaunchConfig.name, shellLaunchConfig.fixedDimensions);\n\t\tprocess.onProcessExit(event => {\n\t\t\tpersistentProcess.dispose();\n\t\t\tthis._ptys.delete(id);\n\t\t\tthis._onProcessExit.fire({ id, event });\n\t\t});\n\t\tpersistentProcess.onProcessData(event => this._onProcessData.fire({ id, event }));\n\t\tpersistentProcess.onProcessReplay(event => this._onProcessReplay.fire({ id, event }));\n\t\tpersistentProcess.onProcessReady(event => this._onProcessReady.fire({ id, event }));\n\t\tpersistentProcess.onProcessOrphanQuestion(() => this._onProcessOrphanQuestion.fire({ id }));\n\t\tpersistentProcess.onDidChangeProperty(property => this._onDidChangeProperty.fire({ id, property }));\n\t\tpersistentProcess.onPersistentProcessReady(() => {\n\t\t\tfor (const e of this._autoReplies.entries()) {\n\t\t\t\tpersistentProcess.installAutoReply(e[0], e[1]);\n\t\t\t}\n\t\t});\n\t\tthis._ptys.set(id, persistentProcess);\n\t\treturn id;\n\t}\n\n\t@traceRpc\n\tasync attachToProcess(id: number): Promise<void> {\n\t\ttry {\n\t\t\tawait this._throwIfNoPty(id).attach();\n\t\t\tthis._logService.info(`Persistent process reconnection \"${id}\"`);\n\t\t} catch (e) {\n\t\t\tthis._logService.warn(`Persistent process reconnection \"${id}\" failed`, e.message);\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t@traceRpc\n\tasync updateTitle(id: number, title: string, titleSource: TitleEventSource): Promise<void> {\n\t\tthis._throwIfNoPty(id).setTitle(title, titleSource);\n\t}\n\n\t@traceRpc\n\tasync updateIcon(id: number, userInitiated: boolean, icon: URI | { light: URI; dark: URI } | { id: string; color?: { id: string } }, color?: string): Promise<void> {\n\t\tthis._throwIfNoPty(id).setIcon(userInitiated, icon, color);\n\t}\n\n\t@traceRpc\n\tasync clearBuffer(id: number): Promise<void> {\n\t\tthis._throwIfNoPty(id).clearBuffer();\n\t}\n\n\t@traceRpc\n\tasync refreshProperty<T extends ProcessPropertyType>(id: number, type: T): Promise<IProcessPropertyMap[T]> {\n\t\treturn this._throwIfNoPty(id).refreshProperty(type);\n\t}\n\n\t@traceRpc\n\tasync updateProperty<T extends ProcessPropertyType>(id: number, type: T, value: IProcessPropertyMap[T]): Promise<void> {\n\t\treturn this._throwIfNoPty(id).updateProperty(type, value);\n\t}\n\n\t@traceRpc\n\tasync detachFromProcess(id: number, forcePersist?: boolean): Promise<void> {\n\t\treturn this._throwIfNoPty(id).detach(forcePersist);\n\t}\n\n\t@traceRpc\n\tasync reduceConnectionGraceTime(): Promise<void> {\n\t\tfor (const pty of this._ptys.values()) {\n\t\t\tpty.reduceGraceTime();\n\t\t}\n\t}\n\n\t@traceRpc\n\tasync listProcesses(): Promise<IProcessDetails[]> {\n\t\tconst persistentProcesses = Array.from(this._ptys.entries()).filter(([_, pty]) => pty.shouldPersistTerminal);\n\n\t\tthis._logService.info(`Listing ${persistentProcesses.length} persistent terminals, ${this._ptys.size} total terminals`);\n\t\tconst promises = persistentProcesses.map(async ([id, terminalProcessData]) => this._buildProcessDetails(id, terminalProcessData));\n\t\tconst allTerminals = await Promise.all(promises);\n\t\treturn allTerminals.filter(entry => entry.isOrphan);\n\t}\n\n\t@traceRpc\n\tasync getPerformanceMarks(): Promise<performance.PerformanceMark[]> {\n\t\treturn performance.getMarks();\n\t}\n\n\t@traceRpc\n\tasync start(id: number): Promise<ITerminalLaunchError | { injectedArgs: string[] } | undefined> {\n\t\tconst pty = this._ptys.get(id);\n\t\treturn pty ? pty.start() : { message: `Could not find pty with id \"${id}\"` };\n\t}\n\n\t@traceRpc\n\tasync shutdown(id: number, immediate: boolean): Promise<void> {\n\t\t// Don't throw if the pty is already shutdown\n\t\treturn this._ptys.get(id)?.shutdown(immediate);\n\t}\n\t@traceRpc\n\tasync input(id: number, data: string): Promise<void> {\n\t\treturn this._throwIfNoPty(id).input(data);\n\t}\n\t@traceRpc\n\tasync processBinary(id: number, data: string): Promise<void> {\n\t\treturn this._throwIfNoPty(id).writeBinary(data);\n\t}\n\t@traceRpc\n\tasync resize(id: number, cols: number, rows: number): Promise<void> {\n\t\treturn this._throwIfNoPty(id).resize(cols, rows);\n\t}\n\t@traceRpc\n\tasync getInitialCwd(id: number): Promise<string> {\n\t\treturn this._throwIfNoPty(id).getInitialCwd();\n\t}\n\t@traceRpc\n\tasync getCwd(id: number): Promise<string> {\n\t\treturn this._throwIfNoPty(id).getCwd();\n\t}\n\t@traceRpc\n\tasync acknowledgeDataEvent(id: number, charCount: number): Promise<void> {\n\t\treturn this._throwIfNoPty(id).acknowledgeDataEvent(charCount);\n\t}\n\t@traceRpc\n\tasync setUnicodeVersion(id: number, version: '6' | '11'): Promise<void> {\n\t\treturn this._throwIfNoPty(id).setUnicodeVersion(version);\n\t}\n\t@traceRpc\n\tasync getLatency(): Promise<IPtyHostLatencyMeasurement[]> {\n\t\treturn [];\n\t}\n\t@traceRpc\n\tasync orphanQuestionReply(id: number): Promise<void> {\n\t\treturn this._throwIfNoPty(id).orphanQuestionReply();\n\t}\n\n\t@traceRpc\n\tasync installAutoReply(match: string, reply: string) {\n\t\tthis._autoReplies.set(match, reply);\n\t\t// If the auto reply exists on any existing terminals it will be overridden\n\t\tfor (const p of this._ptys.values()) {\n\t\t\tp.installAutoReply(match, reply);\n\t\t}\n\t}\n\t@traceRpc\n\tasync uninstallAllAutoReplies() {\n\t\tfor (const match of this._autoReplies.keys()) {\n\t\t\tfor (const p of this._ptys.values()) {\n\t\t\t\tp.uninstallAutoReply(match);\n\t\t\t}\n\t\t}\n\t}\n\t@traceRpc\n\tasync uninstallAutoReply(match: string) {\n\t\tfor (const p of this._ptys.values()) {\n\t\t\tp.uninstallAutoReply(match);\n\t\t}\n\t}\n\n\t@traceRpc\n\tasync getDefaultSystemShell(osOverride: OperatingSystem = OS): Promise<string> {\n\t\treturn getSystemShell(osOverride, process.env);\n\t}\n\n\t@traceRpc\n\tasync getEnvironment(): Promise<IProcessEnvironment> {\n\t\treturn { ...process.env };\n\t}\n\n\t@traceRpc\n\tasync getWslPath(original: string, direction: 'unix-to-win' | 'win-to-unix' | unknown): Promise<string> {\n\t\tif (direction === 'win-to-unix') {\n\t\t\tif (!isWindows) {\n\t\t\t\treturn original;\n\t\t\t}\n\t\t\tif (getWindowsBuildNumber() < 17063) {\n\t\t\t\treturn original.replace(/\\\\/g, '/');\n\t\t\t}\n\t\t\tconst wslExecutable = this._getWSLExecutablePath();\n\t\t\tif (!wslExecutable) {\n\t\t\t\treturn original;\n\t\t\t}\n\t\t\treturn new Promise<string>(c => {\n\t\t\t\tconst proc = execFile(wslExecutable, ['-e', 'wslpath', original], {}, (error, stdout, stderr) => {\n\t\t\t\t\tc(error ? original : escapeNonWindowsPath(stdout.trim()));\n\t\t\t\t});\n\t\t\t\tproc.stdin!.end();\n\t\t\t});\n\t\t}\n\t\tif (direction === 'unix-to-win') {\n\t\t\t// The backend is Windows, for example a local Windows workspace with a wsl session in\n\t\t\t// the terminal.\n\t\t\tif (isWindows) {\n\t\t\t\tif (getWindowsBuildNumber() < 17063) {\n\t\t\t\t\treturn original;\n\t\t\t\t}\n\t\t\t\tconst wslExecutable = this._getWSLExecutablePath();\n\t\t\t\tif (!wslExecutable) {\n\t\t\t\t\treturn original;\n\t\t\t\t}\n\t\t\t\treturn new Promise<string>(c => {\n\t\t\t\t\tconst proc = execFile(wslExecutable, ['-e', 'wslpath', '-w', original], {}, (error, stdout, stderr) => {\n\t\t\t\t\t\tc(error ? original : stdout.trim());\n\t\t\t\t\t});\n\t\t\t\t\tproc.stdin!.end();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\t// Fallback just in case\n\t\treturn original;\n\t}\n\n\tprivate _getWSLExecutablePath(): string | undefined {\n\t\tconst useWSLexe = getWindowsBuildNumber() >= 16299;\n\t\tconst is32ProcessOn64Windows = process.env.hasOwnProperty('PROCESSOR_ARCHITEW6432');\n\t\tconst systemRoot = process.env['SystemRoot'];\n\t\tif (systemRoot) {\n\t\t\treturn join(systemRoot, is32ProcessOn64Windows ? 'Sysnative' : 'System32', useWSLexe ? 'wsl.exe' : 'bash.exe');\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t@traceRpc\n\tasync getRevivedPtyNewId(workspaceId: string, id: number): Promise<number | undefined> {\n\t\ttry {\n\t\t\treturn this._revivedPtyIdMap.get(this._getRevivingProcessId(workspaceId, id))?.newId;\n\t\t} catch (e) {\n\t\t\tthis._logService.warn(`Couldn't find terminal ID ${workspaceId}-${id}`, e.message);\n\t\t}\n\t\treturn undefined;\n\t}\n\n\t@traceRpc\n\tasync setTerminalLayoutInfo(args: ISetTerminalLayoutInfoArgs): Promise<void> {\n\t\tthis._workspaceLayoutInfos.set(args.workspaceId, args);\n\t}\n\n\t@traceRpc\n\tasync getTerminalLayoutInfo(args: IGetTerminalLayoutInfoArgs): Promise<ITerminalsLayoutInfo | undefined> {\n\t\tperformance.mark('code/willGetTerminalLayoutInfo');\n\t\tconst layout = this._workspaceLayoutInfos.get(args.workspaceId);\n\t\tif (layout) {\n\t\t\tconst doneSet: Set<number> = new Set();\n\t\t\tconst expandedTabs = await Promise.all(layout.tabs.map(async tab => this._expandTerminalTab(args.workspaceId, tab, doneSet)));\n\t\t\tconst tabs = expandedTabs.filter(t => t.terminals.length > 0);\n\t\t\tperformance.mark('code/didGetTerminalLayoutInfo');\n\t\t\treturn { tabs };\n\t\t}\n\t\tperformance.mark('code/didGetTerminalLayoutInfo');\n\t\treturn undefined;\n\t}\n\n\tprivate async _expandTerminalTab(workspaceId: string, tab: ITerminalTabLayoutInfoById, doneSet: Set<number>): Promise<ITerminalTabLayoutInfoDto> {\n\t\tconst expandedTerminals = (await Promise.all(tab.terminals.map(t => this._expandTerminalInstance(workspaceId, t, doneSet))));\n\t\tconst filtered = expandedTerminals.filter(term => term.terminal !== null) as IRawTerminalInstanceLayoutInfo<IProcessDetails>[];\n\t\treturn {\n\t\t\tisActive: tab.isActive,\n\t\t\tactivePersistentProcessId: tab.activePersistentProcessId,\n\t\t\tterminals: filtered\n\t\t};\n\t}\n\n\tprivate async _expandTerminalInstance(workspaceId: string, t: ITerminalInstanceLayoutInfoById, doneSet: Set<number>): Promise<IRawTerminalInstanceLayoutInfo<IProcessDetails | null>> {\n\t\ttry {\n\t\t\tconst oldId = this._getRevivingProcessId(workspaceId, t.terminal);\n\t\t\tconst revivedPtyId = this._revivedPtyIdMap.get(oldId)?.newId;\n\t\t\tthis._logService.info(`Expanding terminal instance, old id ${oldId} -> new id ${revivedPtyId}`);\n\t\t\tthis._revivedPtyIdMap.delete(oldId);\n\t\t\tconst persistentProcessId = revivedPtyId ?? t.terminal;\n\t\t\tif (doneSet.has(persistentProcessId)) {\n\t\t\t\tthrow new Error(`Terminal ${persistentProcessId} has already been expanded`);\n\t\t\t}\n\t\t\tdoneSet.add(persistentProcessId);\n\t\t\tconst persistentProcess = this._throwIfNoPty(persistentProcessId);\n\t\t\tconst processDetails = persistentProcess && await this._buildProcessDetails(t.terminal, persistentProcess, revivedPtyId !== undefined);\n\t\t\treturn {\n\t\t\t\tterminal: { ...processDetails, id: persistentProcessId },\n\t\t\t\trelativeSize: t.relativeSize\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tthis._logService.warn(`Couldn't get layout info, a terminal was probably disconnected`, e.message);\n\t\t\tthis._logService.debug('Reattach to wrong terminal debug info - layout info by id', t);\n\t\t\tthis._logService.debug('Reattach to wrong terminal debug info - _revivePtyIdMap', Array.from(this._revivedPtyIdMap.values()));\n\t\t\tthis._logService.debug('Reattach to wrong terminal debug info - _ptys ids', Array.from(this._ptys.keys()));\n\t\t\t// this will be filtered out and not reconnected\n\t\t\treturn {\n\t\t\t\tterminal: null,\n\t\t\t\trelativeSize: t.relativeSize\n\t\t\t};\n\t\t}\n\t}\n\n\tprivate _getRevivingProcessId(workspaceId: string, ptyId: number): string {\n\t\treturn `${workspaceId}-${ptyId}`;\n\t}\n\n\tprivate async _buildProcessDetails(id: number, persistentProcess: PersistentTerminalProcess, wasRevived: boolean = false): Promise<IProcessDetails> {\n\t\tperformance.mark(`code/willBuildProcessDetails/${id}`);\n\t\t// If the process was just revived, don't do the orphan check as it will\n\t\t// take some time\n\t\tconst [cwd, isOrphan] = await Promise.all([persistentProcess.getCwd(), wasRevived ? true : persistentProcess.isOrphaned()]);\n\t\tconst result = {\n\t\t\tid,\n\t\t\ttitle: persistentProcess.title,\n\t\t\ttitleSource: persistentProcess.titleSource,\n\t\t\tpid: persistentProcess.pid,\n\t\t\tworkspaceId: persistentProcess.workspaceId,\n\t\t\tworkspaceName: persistentProcess.workspaceName,\n\t\t\tcwd,\n\t\t\tisOrphan,\n\t\t\ticon: persistentProcess.icon,\n\t\t\tcolor: persistentProcess.color,\n\t\t\tfixedDimensions: persistentProcess.fixedDimensions,\n\t\t\tenvironmentVariableCollections: persistentProcess.processLaunchOptions.options.environmentVariableCollections,\n\t\t\treconnectionProperties: persistentProcess.shellLaunchConfig.reconnectionProperties,\n\t\t\twaitOnExit: persistentProcess.shellLaunchConfig.waitOnExit,\n\t\t\thideFromUser: persistentProcess.shellLaunchConfig.hideFromUser,\n\t\t\tisFeatureTerminal: persistentProcess.shellLaunchConfig.isFeatureTerminal,\n\t\t\ttype: persistentProcess.shellLaunchConfig.type,\n\t\t\thasChildProcesses: persistentProcess.hasChildProcesses,\n\t\t\tshellIntegrationNonce: persistentProcess.processLaunchOptions.options.shellIntegration.nonce\n\t\t};\n\t\tperformance.mark(`code/didBuildProcessDetails/${id}`);\n\t\treturn result;\n\t}\n\n\tprivate _throwIfNoPty(id: number): PersistentTerminalProcess {\n\t\tconst pty = this._ptys.get(id);\n\t\tif (!pty) {\n\t\t\tthrow new ErrorNoTelemetry(`Could not find pty on pty host`);\n\t\t}\n\t\treturn pty;\n\t}\n}\n\nconst enum InteractionState {\n\t/** The terminal has not been interacted with. */\n\tNone = 'None',\n\t/** The terminal has only been interacted with by the replay mechanism. */\n\tReplayOnly = 'ReplayOnly',\n\t/** The terminal has been directly interacted with this session. */\n\tSession = 'Session'\n}\n\nclass PersistentTerminalProcess extends Disposable {\n\n\tprivate readonly _bufferer: TerminalDataBufferer;\n\tprivate readonly _autoReplies: Map<string, TerminalAutoResponder> = new Map();\n\n\tprivate readonly _pendingCommands = new Map<number, { resolve: (data: any) => void; reject: (err: any) => void }>();\n\n\tprivate _isStarted: boolean = false;\n\tprivate _interactionState: MutationLogger<InteractionState>;\n\n\tprivate _orphanQuestionBarrier: AutoOpenBarrier | null;\n\tprivate _orphanQuestionReplyTime: number;\n\tprivate _orphanRequestQueue = new Queue<boolean>();\n\tprivate _disconnectRunner1: ProcessTimeRunOnceScheduler;\n\tprivate _disconnectRunner2: ProcessTimeRunOnceScheduler;\n\n\tprivate readonly _onProcessReplay = this._register(new Emitter<IPtyHostProcessReplayEvent>());\n\treadonly onProcessReplay = this._onProcessReplay.event;\n\tprivate readonly _onProcessReady = this._register(new Emitter<IProcessReadyEvent>());\n\treadonly onProcessReady = this._onProcessReady.event;\n\tprivate readonly _onPersistentProcessReady = this._register(new Emitter<void>());\n\t/** Fired when the persistent process has a ready process and has finished its replay. */\n\treadonly onPersistentProcessReady = this._onPersistentProcessReady.event;\n\tprivate readonly _onProcessData = this._register(new Emitter<string>());\n\treadonly onProcessData = this._onProcessData.event;\n\tprivate readonly _onProcessOrphanQuestion = this._register(new Emitter<void>());\n\treadonly onProcessOrphanQuestion = this._onProcessOrphanQuestion.event;\n\tprivate readonly _onDidChangeProperty = this._register(new Emitter<IProcessProperty<any>>());\n\treadonly onDidChangeProperty = this._onDidChangeProperty.event;\n\n\tprivate _inReplay = false;\n\n\tprivate _pid = -1;\n\tprivate _cwd = '';\n\tprivate _title: string | undefined;\n\tprivate _titleSource: TitleEventSource = TitleEventSource.Process;\n\tprivate _serializer: ITerminalSerializer;\n\tprivate _wasRevived: boolean;\n\tprivate _fixedDimensions: IFixedTerminalDimensions | undefined;\n\n\tget pid(): number { return this._pid; }\n\tget shellLaunchConfig(): IShellLaunchConfig { return this._terminalProcess.shellLaunchConfig; }\n\tget hasWrittenData(): boolean { return this._interactionState.value !== InteractionState.None; }\n\tget title(): string { return this._title || this._terminalProcess.currentTitle; }\n\tget titleSource(): TitleEventSource { return this._titleSource; }\n\tget icon(): TerminalIcon | undefined { return this._icon; }\n\tget color(): string | undefined { return this._color; }\n\tget fixedDimensions(): IFixedTerminalDimensions | undefined { return this._fixedDimensions; }\n\tget hasChildProcesses(): boolean { return this._terminalProcess.hasChildProcesses; }\n\n\tsetTitle(title: string, titleSource: TitleEventSource): void {\n\t\tif (titleSource === TitleEventSource.Api) {\n\t\t\tthis._interactionState.setValue(InteractionState.Session, 'setTitle');\n\t\t\tthis._serializer.freeRawReviveBuffer();\n\t\t}\n\t\tthis._title = title;\n\t\tthis._titleSource = titleSource;\n\t}\n\n\tsetIcon(userInitiated: boolean, icon: TerminalIcon, color?: string): void {\n\t\tif (!this._icon || 'id' in icon && 'id' in this._icon && icon.id !== this._icon.id ||\n\t\t\t!this.color || color !== this._color) {\n\n\t\t\tthis._serializer.freeRawReviveBuffer();\n\t\t\tif (userInitiated) {\n\t\t\t\tthis._interactionState.setValue(InteractionState.Session, 'setIcon');\n\t\t\t}\n\t\t}\n\t\tthis._icon = icon;\n\t\tthis._color = color;\n\t}\n\n\tprivate _setFixedDimensions(fixedDimensions?: IFixedTerminalDimensions): void {\n\t\tthis._fixedDimensions = fixedDimensions;\n\t}\n\n\tconstructor(\n\t\tprivate _persistentProcessId: number,\n\t\tprivate readonly _terminalProcess: TerminalProcess,\n\t\treadonly workspaceId: string,\n\t\treadonly workspaceName: string,\n\t\treadonly shouldPersistTerminal: boolean,\n\t\tcols: number,\n\t\trows: number,\n\t\treadonly processLaunchOptions: IPersistentTerminalProcessLaunchConfig,\n\t\tpublic unicodeVersion: '6' | '11',\n\t\treconnectConstants: IReconnectConstants,\n\t\tprivate readonly _logService: ILogService,\n\t\treviveBuffer: string | undefined,\n\t\trawReviveBuffer: string | undefined,\n\t\tprivate _icon?: TerminalIcon,\n\t\tprivate _color?: string,\n\t\tname?: string,\n\t\tfixedDimensions?: IFixedTerminalDimensions\n\t) {\n\t\tsuper();\n\t\tthis._interactionState = new MutationLogger(`Persistent process \"${this._persistentProcessId}\" interaction state`, InteractionState.None, this._logService);\n\t\tthis._wasRevived = reviveBuffer !== undefined;\n\t\tthis._serializer = new XtermSerializer(\n\t\t\tcols,\n\t\t\trows,\n\t\t\treconnectConstants.scrollback,\n\t\t\tunicodeVersion,\n\t\t\treviveBuffer,\n\t\t\tprocessLaunchOptions.options.shellIntegration.nonce,\n\t\t\tshouldPersistTerminal ? rawReviveBuffer : undefined,\n\t\t\tthis._logService\n\t\t);\n\t\tif (name) {\n\t\t\tthis.setTitle(name, TitleEventSource.Api);\n\t\t}\n\t\tthis._fixedDimensions = fixedDimensions;\n\t\tthis._orphanQuestionBarrier = null;\n\t\tthis._orphanQuestionReplyTime = 0;\n\t\tthis._disconnectRunner1 = this._register(new ProcessTimeRunOnceScheduler(() => {\n\t\t\tthis._logService.info(`Persistent process \"${this._persistentProcessId}\": The reconnection grace time of ${printTime(reconnectConstants.graceTime)} has expired, shutting down pid \"${this._pid}\"`);\n\t\t\tthis.shutdown(true);\n\t\t}, reconnectConstants.graceTime));\n\t\tthis._disconnectRunner2 = this._register(new ProcessTimeRunOnceScheduler(() => {\n\t\t\tthis._logService.info(`Persistent process \"${this._persistentProcessId}\": The short reconnection grace time of ${printTime(reconnectConstants.shortGraceTime)} has expired, shutting down pid ${this._pid}`);\n\t\t\tthis.shutdown(true);\n\t\t}, reconnectConstants.shortGraceTime));\n\t\tthis._register(this._terminalProcess.onProcessExit(() => this._bufferer.stopBuffering(this._persistentProcessId)));\n\t\tthis._register(this._terminalProcess.onProcessReady(e => {\n\t\t\tthis._pid = e.pid;\n\t\t\tthis._cwd = e.cwd;\n\t\t\tthis._onProcessReady.fire(e);\n\t\t}));\n\t\tthis._register(this._terminalProcess.onDidChangeProperty(e => {\n\t\t\tthis._onDidChangeProperty.fire(e);\n\t\t}));\n\n\t\t// Data buffering to reduce the amount of messages going to the renderer\n\t\tthis._bufferer = new TerminalDataBufferer((_, data) => this._onProcessData.fire(data));\n\t\tthis._register(this._bufferer.startBuffering(this._persistentProcessId, this._terminalProcess.onProcessData));\n\n\t\t// Data recording for reconnect\n\t\tthis._register(this.onProcessData(e => this._serializer.handleData(e)));\n\n\t\t// Clean up other disposables\n\t\tthis._register(toDisposable(() => {\n\t\t\tfor (const e of this._autoReplies.values()) {\n\t\t\t\te.dispose();\n\t\t\t}\n\t\t\tthis._autoReplies.clear();\n\t\t}));\n\t}\n\n\tasync attach(): Promise<void> {\n\t\tif (!this._disconnectRunner1.isScheduled() && !this._disconnectRunner2.isScheduled()) {\n\t\t\tthis._logService.warn(`Persistent process \"${this._persistentProcessId}\": Process had no disconnect runners but was an orphan`);\n\t\t}\n\t\tthis._disconnectRunner1.cancel();\n\t\tthis._disconnectRunner2.cancel();\n\t}\n\n\tasync detach(forcePersist?: boolean): Promise<void> {\n\t\t// Keep the process around if it was indicated to persist and it has had some iteraction or\n\t\t// was replayed\n\t\tif (this.shouldPersistTerminal && (this._interactionState.value !== InteractionState.None || forcePersist)) {\n\t\t\tthis._disconnectRunner1.schedule();\n\t\t} else {\n\t\t\tthis.shutdown(true);\n\t\t}\n\t}\n\n\tserializeNormalBuffer(): Promise<IPtyHostProcessReplayEvent> {\n\t\treturn this._serializer.generateReplayEvent(true, this._interactionState.value !== InteractionState.Session);\n\t}\n\n\tasync refreshProperty<T extends ProcessPropertyType>(type: T): Promise<IProcessPropertyMap[T]> {\n\t\treturn this._terminalProcess.refreshProperty(type);\n\t}\n\n\tasync updateProperty<T extends ProcessPropertyType>(type: T, value: IProcessPropertyMap[T]): Promise<void> {\n\t\tif (type === ProcessPropertyType.FixedDimensions) {\n\t\t\treturn this._setFixedDimensions(value as IProcessPropertyMap[ProcessPropertyType.FixedDimensions]);\n\t\t}\n\t}\n\n\tasync start(): Promise<ITerminalLaunchError | { injectedArgs: string[] } | undefined> {\n\t\tif (!this._isStarted) {\n\t\t\tconst result = await this._terminalProcess.start();\n\t\t\tif (result && 'message' in result) {\n\t\t\t\t// it's a terminal launch error\n\t\t\t\treturn result;\n\t\t\t}\n\t\t\tthis._isStarted = true;\n\n\t\t\t// If the process was revived, trigger a replay on first start. An alternative approach\n\t\t\t// could be to start it on the pty host before attaching but this fails on Windows as\n\t\t\t// conpty's inherit cursor option which is required, ends up sending DSR CPR which\n\t\t\t// causes conhost to hang when no response is received from the terminal (which wouldn't\n\t\t\t// be attached yet). https://github.com/microsoft/terminal/issues/11213\n\t\t\tif (this._wasRevived) {\n\t\t\t\tthis.triggerReplay();\n\t\t\t} else {\n\t\t\t\tthis._onPersistentProcessReady.fire();\n\t\t\t}\n\t\t\treturn result;\n\t\t}\n\n\t\tthis._onProcessReady.fire({ pid: this._pid, cwd: this._cwd, windowsPty: this._terminalProcess.getWindowsPty() });\n\t\tthis._onDidChangeProperty.fire({ type: ProcessPropertyType.Title, value: this._terminalProcess.currentTitle });\n\t\tthis._onDidChangeProperty.fire({ type: ProcessPropertyType.ShellType, value: this._terminalProcess.shellType });\n\t\tthis.triggerReplay();\n\t\treturn undefined;\n\t}\n\tshutdown(immediate: boolean): void {\n\t\treturn this._terminalProcess.shutdown(immediate);\n\t}\n\tinput(data: string): void {\n\t\tthis._interactionState.setValue(InteractionState.Session, 'input');\n\t\tthis._serializer.freeRawReviveBuffer();\n\t\tif (this._inReplay) {\n\t\t\treturn;\n\t\t}\n\t\tfor (const listener of this._autoReplies.values()) {\n\t\t\tlistener.handleInput();\n\t\t}\n\t\treturn this._terminalProcess.input(data);\n\t}\n\twriteBinary(data: string): Promise<void> {\n\t\treturn this._terminalProcess.processBinary(data);\n\t}\n\tresize(cols: number, rows: number): void {\n\t\tif (this._inReplay) {\n\t\t\treturn;\n\t\t}\n\t\tthis._serializer.handleResize(cols, rows);\n\n\t\t// Buffered events should flush when a resize occurs\n\t\tthis._bufferer.flushBuffer(this._persistentProcessId);\n\n\t\tfor (const listener of this._autoReplies.values()) {\n\t\t\tlistener.handleResize();\n\t\t}\n\t\treturn this._terminalProcess.resize(cols, rows);\n\t}\n\tasync clearBuffer(): Promise<void> {\n\t\tthis._serializer.clearBuffer();\n\t\tthis._terminalProcess.clearBuffer();\n\t}\n\tsetUnicodeVersion(version: '6' | '11'): void {\n\t\tthis.unicodeVersion = version;\n\t\tthis._serializer.setUnicodeVersion?.(version);\n\t\t// TODO: Pass in unicode version in ctor\n\t}\n\tacknowledgeDataEvent(charCount: number): void {\n\t\tif (this._inReplay) {\n\t\t\treturn;\n\t\t}\n\t\treturn this._terminalProcess.acknowledgeDataEvent(charCount);\n\t}\n\tgetInitialCwd(): Promise<string> {\n\t\treturn this._terminalProcess.getInitialCwd();\n\t}\n\tgetCwd(): Promise<string> {\n\t\treturn this._terminalProcess.getCwd();\n\t}\n\n\tasync triggerReplay(): Promise<void> {\n\t\tif (this._interactionState.value === InteractionState.None) {\n\t\t\tthis._interactionState.setValue(InteractionState.ReplayOnly, 'triggerReplay');\n\t\t}\n\t\tconst ev = await this._serializer.generateReplayEvent();\n\t\tlet dataLength = 0;\n\t\tfor (const e of ev.events) {\n\t\t\tdataLength += e.data.length;\n\t\t}\n\t\tthis._logService.info(`Persistent process \"${this._persistentProcessId}\": Replaying ${dataLength} chars and ${ev.events.length} size events`);\n\t\tthis._onProcessReplay.fire(ev);\n\t\tthis._terminalProcess.clearUnacknowledgedChars();\n\t\tthis._onPersistentProcessReady.fire();\n\t}\n\n\tinstallAutoReply(match: string, reply: string) {\n\t\tthis._autoReplies.get(match)?.dispose();\n\t\tthis._autoReplies.set(match, new TerminalAutoResponder(this._terminalProcess, match, reply, this._logService));\n\t}\n\n\tuninstallAutoReply(match: string) {\n\t\tconst autoReply = this._autoReplies.get(match);\n\t\tautoReply?.dispose();\n\t\tthis._autoReplies.delete(match);\n\t}\n\n\tsendCommandResult(reqId: number, isError: boolean, serializedPayload: any): void {\n\t\tconst data = this._pendingCommands.get(reqId);\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\tthis._pendingCommands.delete(reqId);\n\t}\n\n\torphanQuestionReply(): void {\n\t\tthis._orphanQuestionReplyTime = Date.now();\n\t\tif (this._orphanQuestionBarrier) {\n\t\t\tconst barrier = this._orphanQuestionBarrier;\n\t\t\tthis._orphanQuestionBarrier = null;\n\t\t\tbarrier.open();\n\t\t}\n\t}\n\n\treduceGraceTime(): void {\n\t\tif (this._disconnectRunner2.isScheduled()) {\n\t\t\t// we are disconnected and already running the short reconnection timer\n\t\t\treturn;\n\t\t}\n\t\tif (this._disconnectRunner1.isScheduled()) {\n\t\t\t// we are disconnected and running the long reconnection timer\n\t\t\tthis._disconnectRunner2.schedule();\n\t\t}\n\t}\n\n\tasync isOrphaned(): Promise<boolean> {\n\t\treturn await this._orphanRequestQueue.queue(async () => this._isOrphaned());\n\t}\n\n\tprivate async _isOrphaned(): Promise<boolean> {\n\t\t// The process is already known to be orphaned\n\t\tif (this._disconnectRunner1.isScheduled() || this._disconnectRunner2.isScheduled()) {\n\t\t\treturn true;\n\t\t}\n\n\t\t// Ask whether the renderer(s) whether the process is orphaned and await the reply\n\t\tif (!this._orphanQuestionBarrier) {\n\t\t\t// the barrier opens after 4 seconds with or without a reply\n\t\t\tthis._orphanQuestionBarrier = new AutoOpenBarrier(4000);\n\t\t\tthis._orphanQuestionReplyTime = 0;\n\t\t\tthis._onProcessOrphanQuestion.fire();\n\t\t}\n\n\t\tawait this._orphanQuestionBarrier.wait();\n\t\treturn (Date.now() - this._orphanQuestionReplyTime > 500);\n\t}\n}\n\nclass MutationLogger<T> {\n\tget value(): T { return this._value; }\n\tsetValue(value: T, reason: string) {\n\t\tif (this._value !== value) {\n\t\t\tthis._value = value;\n\t\t\tthis._log(reason);\n\t\t}\n\t}\n\n\tconstructor(\n\t\tprivate readonly _name: string,\n\t\tprivate _value: T,\n\t\tprivate readonly _logService: ILogService\n\t) {\n\t\tthis._log('initialized');\n\t}\n\n\tprivate _log(reason: string): void {\n\t\tthis._logService.debug(`MutationLogger \"${this._name}\" set to \"${this._value}\", reason: ${reason}`);\n\t}\n}\n\nclass XtermSerializer implements ITerminalSerializer {\n\tprivate readonly _xterm: XtermTerminal;\n\tprivate readonly _shellIntegrationAddon: ShellIntegrationAddon;\n\tprivate _unicodeAddon?: XtermUnicode11Addon;\n\n\tconstructor(\n\t\tcols: number,\n\t\trows: number,\n\t\tscrollback: number,\n\t\tunicodeVersion: '6' | '11',\n\t\treviveBufferWithRestoreMessage: string | undefined,\n\t\tshellIntegrationNonce: string,\n\t\tprivate _rawReviveBuffer: string | undefined,\n\t\tlogService: ILogService\n\t) {\n\t\tthis._xterm = new XtermTerminal({\n\t\t\tcols,\n\t\t\trows,\n\t\t\tscrollback,\n\t\t\tallowProposedApi: true\n\t\t});\n\t\tif (reviveBufferWithRestoreMessage) {\n\t\t\tthis._xterm.writeln(reviveBufferWithRestoreMessage);\n\t\t}\n\t\tthis.setUnicodeVersion(unicodeVersion);\n\t\tthis._shellIntegrationAddon = new ShellIntegrationAddon(shellIntegrationNonce, true, undefined, logService);\n\t\tthis._xterm.loadAddon(this._shellIntegrationAddon);\n\t}\n\n\tfreeRawReviveBuffer(): void {\n\t\t// Free the memory of the terminal if it will need to be re-serialized\n\t\tthis._rawReviveBuffer = undefined;\n\t}\n\n\thandleData(data: string): void {\n\t\tthis._xterm.write(data);\n\t}\n\n\thandleResize(cols: number, rows: number): void {\n\t\tthis._xterm.resize(cols, rows);\n\t}\n\n\tclearBuffer(): void {\n\t\tthis._xterm.clear();\n\t}\n\n\tasync generateReplayEvent(normalBufferOnly?: boolean, restoreToLastReviveBuffer?: boolean): Promise<IPtyHostProcessReplayEvent> {\n\t\tconst serialize = new (await this._getSerializeConstructor());\n\t\tthis._xterm.loadAddon(serialize);\n\t\tconst options: ISerializeOptions = {\n\t\t\tscrollback: this._xterm.options.scrollback\n\t\t};\n\t\tif (normalBufferOnly) {\n\t\t\toptions.excludeAltBuffer = true;\n\t\t\toptions.excludeModes = true;\n\t\t}\n\t\tlet serialized: string;\n\t\tif (restoreToLastReviveBuffer && this._rawReviveBuffer) {\n\t\t\tserialized = this._rawReviveBuffer;\n\t\t} else {\n\t\t\tserialized = serialize.serialize(options);\n\t\t}\n\t\treturn {\n\t\t\tevents: [\n\t\t\t\t{\n\t\t\t\t\tcols: this._xterm.cols,\n\t\t\t\t\trows: this._xterm.rows,\n\t\t\t\t\tdata: serialized\n\t\t\t\t}\n\t\t\t],\n\t\t\tcommands: this._shellIntegrationAddon.serialize()\n\t\t};\n\t}\n\n\tasync setUnicodeVersion(version: '6' | '11'): Promise<void> {\n\t\tif (this._xterm.unicode.activeVersion === version) {\n\t\t\treturn;\n\t\t}\n\t\tif (version === '11') {\n\t\t\tthis._unicodeAddon = new (await this._getUnicode11Constructor());\n\t\t\tthis._xterm.loadAddon(this._unicodeAddon);\n\t\t} else {\n\t\t\tthis._unicodeAddon?.dispose();\n\t\t\tthis._unicodeAddon = undefined;\n\t\t}\n\t\tthis._xterm.unicode.activeVersion = version;\n\t}\n\n\tasync _getUnicode11Constructor(): Promise<typeof Unicode11Addon> {\n\t\tif (!Unicode11Addon) {\n\t\t\tUnicode11Addon = (await import('xterm-addon-unicode11')).Unicode11Addon;\n\t\t}\n\t\treturn Unicode11Addon;\n\t}\n\n\tasync _getSerializeConstructor(): Promise<typeof SerializeAddon> {\n\t\tif (!SerializeAddon) {\n\t\t\tSerializeAddon = (await import('xterm-addon-serialize')).SerializeAddon;\n\t\t}\n\t\treturn SerializeAddon;\n\t}\n}\n\nfunction printTime(ms: number): string {\n\tlet h = 0;\n\tlet m = 0;\n\tlet s = 0;\n\tif (ms >= 1000) {\n\t\ts = Math.floor(ms / 1000);\n\t\tms -= s * 1000;\n\t}\n\tif (s >= 60) {\n\t\tm = Math.floor(s / 60);\n\t\ts -= m * 60;\n\t}\n\tif (m >= 60) {\n\t\th = Math.floor(m / 60);\n\t\tm -= h * 60;\n\t}\n\tconst _h = h ? `${h}h` : ``;\n\tconst _m = m ? `${m}m` : ``;\n\tconst _s = s ? `${s}s` : ``;\n\tconst _ms = ms ? `${ms}ms` : ``;\n\treturn `${_h}${_m}${_s}${_ms}`;\n}\n\ninterface ITerminalSerializer {\n\thandleData(data: string): void;\n\tfreeRawReviveBuffer(): void;\n\thandleResize(cols: number, rows: number): void;\n\tclearBuffer(): void;\n\tgenerateReplayEvent(normalBufferOnly?: boolean, restoreToLastReviveBuffer?: boolean): Promise<IPtyHostProcessReplayEvent>;\n\tsetUnicodeVersion?(version: '6' | '11'): void;\n}\n"]}