{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/terminal/common/terminalEnvironment.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAIhG;;;;OAIG;IACH,SAAgB,GAAG,CAAkB,IAAY;QAChD,IAAI,OAAO,GAAG,IAAI,CAAC;QACnB,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YAC3B,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;SACzC;QACD,MAAM,WAAW,GAAG,iCAAiC,CAAC;QACtD,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;QAC3C,OAAO,IAAI,OAAO,GAAG,CAAC;IACvB,CAAC;IARD,kBAQC;IAED;;;OAGG;IACH,SAAgB,GAAG,CAAe,IAAwB,EAAE,QAA4B,EAAE,SAAiB;QAC1G,IAAI,CAAC,IAAI,EAAE;YACV,OAAO,EAAE,CAAC;SACV;QACD,IAAI,CAAC,QAAQ,EAAE;YACd,OAAO,IAAI,CAAC;SACZ;QACD,wDAAwD;QACxD,IAAI,QAAQ,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE;YAC9B,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SAClD;QACD,MAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;QAC9D,MAAM,kBAAkB,GAAG,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;QACtE,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,kBAAkB,CAAC,EAAE;YACjD,OAAO,IAAI,CAAC;SACZ;QACD,OAAO,IAAI,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC;IAC1D,CAAC;IAjBD,kBAiBC;IAED;;;;OAIG;IACH,SAAgB,GAAG,CAAS,GAAW;QACtC,mEAAmE;QACnE,IAAI,GAAG,CAAC,KAAK,CAAC,cAAc,CAAC,EAAE;YAC9B,GAAG,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SACvC;QACD,yDAAyD;QACzD,IAAI,aAAE,oCAA4B,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;YAC5D,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;SAC/C;QACD,OAAO,GAAG,CAAC;IACZ,CAAC;IAVD,kBAUC","file":"terminalEnvironment.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { OperatingSystem, OS } from 'vs/base/common/platform';\n\n/**\n * Aggressively escape non-windows paths to prepare for being sent to a shell. This will do some\n * escaping inaccurately to be careful about possible script injection via the file path. For\n * example, we're trying to prevent this sort of attack: `/foo/file$(echo evil)`.\n */\nexport function escapeNonWindowsPath(path: string): string {\n\tlet newPath = path;\n\tif (newPath.includes('\\\\')) {\n\t\tnewPath = newPath.replace(/\\\\/g, '\\\\\\\\');\n\t}\n\tconst bannedChars = /[\\`\\$\\|\\&\\>\\~\\#\\!\\^\\*\\;\\<\\\"\\']/g;\n\tnewPath = newPath.replace(bannedChars, '');\n\treturn `'${newPath}'`;\n}\n\n/**\n * Collapses the user's home directory into `~` if it exists within the path, this gives a shorter\n * path that is more suitable within the context of a terminal.\n */\nexport function collapseTildePath(path: string | undefined, userHome: string | undefined, separator: string): string {\n\tif (!path) {\n\t\treturn '';\n\t}\n\tif (!userHome) {\n\t\treturn path;\n\t}\n\t// Trim the trailing separator from the end if it exists\n\tif (userHome.match(/[\\/\\\\]$/)) {\n\t\tuserHome = userHome.slice(0, userHome.length - 1);\n\t}\n\tconst normalizedPath = path.replace(/\\\\/g, '/').toLowerCase();\n\tconst normalizedUserHome = userHome.replace(/\\\\/g, '/').toLowerCase();\n\tif (!normalizedPath.includes(normalizedUserHome)) {\n\t\treturn path;\n\t}\n\treturn `~${separator}${path.slice(userHome.length + 1)}`;\n}\n\n/**\n * Sanitizes a cwd string, removing any wrapping quotes and making the Windows drive letter\n * uppercase.\n * @param cwd The directory to sanitize.\n */\nexport function sanitizeCwd(cwd: string): string {\n\t// Sanity check that the cwd is not wrapped in quotes (see #160109)\n\tif (cwd.match(/^['\"].*['\"]$/)) {\n\t\tcwd = cwd.substring(1, cwd.length - 1);\n\t}\n\t// Make the drive letter uppercase on Windows (see #9448)\n\tif (OS === OperatingSystem.Windows && cwd && cwd[1] === ':') {\n\t\treturn cwd[0].toUpperCase() + cwd.substring(1);\n\t}\n\treturn cwd;\n}\n"]}