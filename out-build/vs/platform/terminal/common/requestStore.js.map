{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/terminal/common/requestStore.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAQhG;;;OAGG;IACI,IAAM,GAAG,GAAT,MAAM,GAA6B,SAAQ,eAAG;QASpD;;;WAGG;QACH,YACC,OAA2B,EACd,CAAiC;YAE9C,KAAK,EAAE,CAAC;YAFsB,MAAC,GAAD,CAAC,CAAe;YAdvC,MAAC,GAAgB,CAAC,CAAC;YAEnB,MAAC,GAAsD,IAAI,GAAG,EAAE,CAAC;YACjE,MAAC,GAAwD,IAAI,GAAG,EAAE,CAAC;YAE1D,MAAC,GAAkB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAA2C,CAAC,CAAC;YAC9F,oBAAe,GAAG,IAAI,CAAC,CAAC,CAAgB,KAAK,CAAC;YAWtD,IAAI,CAAC,CAAC,GAAU,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC;YACxD,IAAI,CAAC,CAAC,CAAS,IAAA,eAAG,EAAU,GAAG,EAAE;gBAChC,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC,CAA0B,MAAM,EAAE,EAAE;oBACzD,IAAA,eAAG,EAAK,CAAC,CAAC,CAAC;iBACX;YACF,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAED;;;WAGG;QACH,aAAa,CAAC,IAAiB;YAC9B,OAAO,IAAI,OAAO,CAAI,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;gBACzC,MAAM,SAAS,GAAG,EAAE,IAAI,CAAC,CAAC,CAAc;gBACxC,IAAI,CAAC,CAAC,CAAgB,GAAG,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;gBAC9C,IAAI,CAAC,CAAC,CAAgB,IAAI,CAAC,EAAE,SAAS,EAAE,GAAG,IAAI,EAAE,CAAC,CAAC;gBACnD,MAAM,WAAW,GAAG,IAAI,kBAAG,EAAsB,CAAC;gBAClD,IAAA,WAAG,EAAK,IAAI,CAAC,CAAC,EAAS,WAAW,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,WAAW,SAAS,eAAe,IAAI,CAAC,CAAC,KAAY,CAAC,CAAC,CAAC;gBACpH,IAAI,CAAC,CAAC,CAA0B,GAAG,CAAC,SAAS,EAAE,CAAC,IAAA,eAAG,EAAU,GAAG,EAAE,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;YAC5F,CAAC,CAAC,CAAC;QACJ,CAAC;QAED;;;;WAIG;QACH,WAAW,CAAC,SAAiB,EAAE,IAAO;YACrC,MAAM,cAAc,GAAG,IAAI,CAAC,CAAC,CAAgB,GAAG,CAAC,SAAS,CAAC,CAAC;YAC5D,IAAI,cAAc,EAAE;gBACnB,IAAI,CAAC,CAAC,CAAgB,MAAM,CAAC,SAAS,CAAC,CAAC;gBACxC,IAAA,eAAG,EAAK,IAAI,CAAC,CAAC,CAA0B,GAAG,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;gBAC9D,IAAI,CAAC,CAAC,CAA0B,MAAM,CAAC,SAAS,CAAC,CAAC;gBAClD,cAAc,CAAC,IAAI,CAAC,CAAC;aACrB;iBAAM;gBACN,IAAI,CAAC,CAAC,CAAW,IAAI,CAAC,4EAA4E,SAAS,EAAE,CAAC,CAAC;aAC/G;QACF,CAAC;KACD,CAAA;IAzDY,kBAAG;kBAAH,GAAG;QAeb,WAAA,SAAG,CAAA;OAfO,GAAG,CAyDf","file":"requestStore.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { timeout } from 'vs/base/common/async';\nimport { CancellationTokenSource } from 'vs/base/common/cancellation';\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable, dispose, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { ILogService } from 'vs/platform/log/common/log';\n\n/**\n * A helper class to track requests that have replies. Using this it's easy to implement an event\n * that accepts a reply.\n */\nexport class RequestStore<T, RequestArgs> extends Disposable {\n\tprivate _lastRequestId = 0;\n\tprivate readonly _timeout: number;\n\tprivate _pendingRequests: Map<number, (resolved: T) => void> = new Map();\n\tprivate _pendingRequestDisposables: Map<number, IDisposable[]> = new Map();\n\n\tprivate readonly _onCreateRequest = this._register(new Emitter<RequestArgs & { requestId: number }>());\n\treadonly onCreateRequest = this._onCreateRequest.event;\n\n\t/**\n\t * @param timeout How long in ms to allow requests to go unanswered for, undefined will use the\n\t * default (15 seconds).\n\t */\n\tconstructor(\n\t\ttimeout: number | undefined,\n\t\t@ILogService private readonly _logService: ILogService\n\t) {\n\t\tsuper();\n\t\tthis._timeout = timeout === undefined ? 15000 : timeout;\n\t\tthis._register(toDisposable(() => {\n\t\t\tfor (const d of this._pendingRequestDisposables.values()) {\n\t\t\t\tdispose(d);\n\t\t\t}\n\t\t}));\n\t}\n\n\t/**\n\t * Creates a request.\n\t * @param args The arguments to pass to the onCreateRequest event.\n\t */\n\tcreateRequest(args: RequestArgs): Promise<T> {\n\t\treturn new Promise<T>((resolve, reject) => {\n\t\t\tconst requestId = ++this._lastRequestId;\n\t\t\tthis._pendingRequests.set(requestId, resolve);\n\t\t\tthis._onCreateRequest.fire({ requestId, ...args });\n\t\t\tconst tokenSource = new CancellationTokenSource();\n\t\t\ttimeout(this._timeout, tokenSource.token).then(() => reject(`Request ${requestId} timed out (${this._timeout}ms)`));\n\t\t\tthis._pendingRequestDisposables.set(requestId, [toDisposable(() => tokenSource.cancel())]);\n\t\t});\n\t}\n\n\t/**\n\t * Accept a reply to a request.\n\t * @param requestId The request ID originating from the onCreateRequest event.\n\t * @param data The reply data.\n\t */\n\tacceptReply(requestId: number, data: T) {\n\t\tconst resolveRequest = this._pendingRequests.get(requestId);\n\t\tif (resolveRequest) {\n\t\t\tthis._pendingRequests.delete(requestId);\n\t\t\tdispose(this._pendingRequestDisposables.get(requestId) || []);\n\t\t\tthis._pendingRequestDisposables.delete(requestId);\n\t\t\tresolveRequest(data);\n\t\t} else {\n\t\t\tthis._logService.warn(`RequestStore#acceptReply was called without receiving a matching request ${requestId}`);\n\t\t}\n\t}\n}\n"]}