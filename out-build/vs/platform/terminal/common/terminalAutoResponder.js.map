{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/terminal/common/terminalAutoResponder.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG;;;;OAIG;IACH,MAAa,IAAsB,SAAQ,eAAG;QAU7C,YACC,IAA2B,EAC3B,SAAiB,EACjB,QAAgB,EAChB,UAAe;YAEf,KAAK,EAAE,CAAC;YAfD,MAAC,GAAU,CAAC,CAAC;YACb,MAAC,GAAS,KAAK,CAAC;YAExB;;;eAGG;YACK,MAAC,GAAY,KAAK,CAAC;YAU1B,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE;gBACrC,IAAI,IAAI,CAAC,CAAC,IAAU,IAAI,CAAC,CAAC,EAAW;oBACpC,OAAO;iBACP;gBACD,MAAM,IAAI,GAAG,OAAO,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;gBAChD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;oBACrC,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,SAAS,CAAC,IAAI,CAAC,CAAC,CAAQ,EAAE;wBACzC,IAAI,CAAC,CAAC,EAAS,CAAC;qBAChB;yBAAM;wBACN,IAAI,CAAC,CAAC,EAAO,CAAC;qBACd;oBACD,uBAAuB;oBACvB,IAAI,IAAI,CAAC,CAAC,KAAY,SAAS,CAAC,MAAM,EAAE;wBACvC,UAAU,CAAC,KAAK,CAAC,sBAAsB,SAAS,iBAAiB,QAAQ,GAAG,CAAC,CAAC;wBAC9E,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;wBACrB,IAAI,CAAC,CAAC,GAAY,IAAI,CAAC;wBACvB,IAAA,WAAG,EAAK,IAAI,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,GAAY,KAAK,CAAC,CAAC;wBAClD,IAAI,CAAC,CAAC,EAAO,CAAC;qBACd;iBACD;YACF,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAEO,CAAC;YACR,IAAI,CAAC,CAAC,GAAU,CAAC,CAAC;QACnB,CAAC;QAED;;;WAGG;QACH,YAAY;YACX,IAAI,aAAE,EAAS;gBACd,IAAI,CAAC,CAAC,GAAS,IAAI,CAAC;aACpB;QACF,CAAC;QAED,WAAW;YACV,IAAI,CAAC,CAAC,GAAS,KAAK,CAAC;QACtB,CAAC;KACD;IA1DD,oBA0DC","file":"terminalAutoResponder.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { timeout } from 'vs/base/common/async';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { isWindows } from 'vs/base/common/platform';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ITerminalChildProcess } from 'vs/platform/terminal/common/terminal';\n\n/**\n * Tracks a terminal process's data stream and responds immediately when a matching string is\n * received. This is done in a low overhead way and is ideally run on the same process as the\n * where the process is handled to minimize latency.\n */\nexport class TerminalAutoResponder extends Disposable {\n\tprivate _pointer = 0;\n\tprivate _paused = false;\n\n\t/**\n\t * Each reply is throttled by a second to avoid resource starvation and responding to screen\n\t * reprints on Winodws.\n\t */\n\tprivate _throttled = false;\n\n\tconstructor(\n\t\tproc: ITerminalChildProcess,\n\t\tmatchWord: string,\n\t\tresponse: string,\n\t\tlogService: ILogService\n\t) {\n\t\tsuper();\n\n\t\tthis._register(proc.onProcessData(e => {\n\t\t\tif (this._paused || this._throttled) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst data = typeof e === 'string' ? e : e.data;\n\t\t\tfor (let i = 0; i < data.length; i++) {\n\t\t\t\tif (data[i] === matchWord[this._pointer]) {\n\t\t\t\t\tthis._pointer++;\n\t\t\t\t} else {\n\t\t\t\t\tthis._reset();\n\t\t\t\t}\n\t\t\t\t// Auto reply and reset\n\t\t\t\tif (this._pointer === matchWord.length) {\n\t\t\t\t\tlogService.debug(`Auto reply match: \"${matchWord}\", response: \"${response}\"`);\n\t\t\t\t\tproc.input(response);\n\t\t\t\t\tthis._throttled = true;\n\t\t\t\t\ttimeout(1000).then(() => this._throttled = false);\n\t\t\t\t\tthis._reset();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate _reset() {\n\t\tthis._pointer = 0;\n\t}\n\n\t/**\n\t * No auto response will happen after a resize on Windows in case the resize is a result of\n\t * reprinting the screen.\n\t */\n\thandleResize() {\n\t\tif (isWindows) {\n\t\t\tthis._paused = true;\n\t\t}\n\t}\n\n\thandleInput() {\n\t\tthis._paused = false;\n\t}\n}\n"]}