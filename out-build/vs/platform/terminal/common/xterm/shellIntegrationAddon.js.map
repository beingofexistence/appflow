{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/terminal/common/xterm/shellIntegrationAddon.ts"],"names":[],"mappings":"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","file":"shellIntegrationAddon.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { IShellIntegration, ShellIntegrationStatus } from 'vs/platform/terminal/common/terminal';\nimport { Disposable, dispose, IDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { TerminalCapabilityStore } from 'vs/platform/terminal/common/capabilities/terminalCapabilityStore';\nimport { CommandDetectionCapability } from 'vs/platform/terminal/common/capabilities/commandDetectionCapability';\nimport { CwdDetectionCapability } from 'vs/platform/terminal/common/capabilities/cwdDetectionCapability';\nimport { IBufferMarkCapability, ICommandDetectionCapability, ICwdDetectionCapability, ISerializedCommandDetectionCapability, TerminalCapability } from 'vs/platform/terminal/common/capabilities/capabilities';\nimport { PartialCommandDetectionCapability } from 'vs/platform/terminal/common/capabilities/partialCommandDetectionCapability';\nimport { ILogService } from 'vs/platform/log/common/log';\n// Importing types is safe in any layer\n// eslint-disable-next-line local/code-import-patterns\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { Emitter } from 'vs/base/common/event';\nimport { BufferMarkCapability } from 'vs/platform/terminal/common/capabilities/bufferMarkCapability';\n// Importing types is safe in any layer\n// eslint-disable-next-line local/code-import-patterns\nimport type { ITerminalAddon, Terminal } from 'xterm-headless';\nimport { URI } from 'vs/base/common/uri';\nimport { sanitizeCwd } from 'vs/platform/terminal/common/terminalEnvironment';\n\n\n/**\n * Shell integration is a feature that enhances the terminal's understanding of what's happening\n * in the shell by injecting special sequences into the shell's prompt using the \"Set Text\n * Parameters\" sequence (`OSC Ps ; Pt ST`).\n *\n * Definitions:\n * - OSC: `\\x1b]`\n * - Ps:  A single (usually optional) numeric parameter, composed of one or more digits.\n * - Pt:  A text parameter composed of printable characters.\n * - ST: `\\x7`\n *\n * This is inspired by a feature of the same name in the FinalTerm, iTerm2 and kitty terminals.\n */\n\n/**\n * The identifier for the first numeric parameter (`Ps`) for OSC commands used by shell integration.\n */\nconst enum ShellIntegrationOscPs {\n\t/**\n\t * Sequences pioneered by FinalTerm.\n\t */\n\tFinalTerm = 133,\n\t/**\n\t * Sequences pioneered by VS Code. The number is derived from the least significant digit of\n\t * \"VSC\" when encoded in hex (\"VSC\" = 0x56, 0x53, 0x43).\n\t */\n\tVSCode = 633,\n\t/**\n\t * Sequences pioneered by iTerm.\n\t */\n\tITerm = 1337,\n\tSetCwd = 7,\n\tSetWindowsFriendlyCwd = 9\n}\n\n/**\n * VS Code-specific shell integration sequences. Some of these are based on more common alternatives\n * like those pioneered in FinalTerm. The decision to move to entirely custom sequences was to try\n * to improve reliability and prevent the possibility of applications confusing the terminal. If\n * multiple shell integration scripts run, VS Code will prioritize the VS Code-specific ones.\n *\n * It's recommended that authors of shell integration scripts use the common sequences (eg. 133)\n * when building general purpose scripts and the VS Code-specific (633) when targeting only VS Code\n * or when there are no other alternatives.\n */\nconst enum VSCodeOscPt {\n\t/**\n\t * The start of the prompt, this is expected to always appear at the start of a line.\n\t * Based on FinalTerm's `OSC 133 ; A ST`.\n\t */\n\tPromptStart = 'A',\n\n\t/**\n\t * The start of a command, ie. where the user inputs their command.\n\t * Based on FinalTerm's `OSC 133 ; B ST`.\n\t */\n\tCommandStart = 'B',\n\n\t/**\n\t * Sent just before the command output begins.\n\t * Based on FinalTerm's `OSC 133 ; C ST`.\n\t */\n\tCommandExecuted = 'C',\n\n\t/**\n\t * Sent just after a command has finished. The exit code is optional, when not specified it\n\t * means no command was run (ie. enter on empty prompt or ctrl+c).\n\t * Based on FinalTerm's `OSC 133 ; D [; <ExitCode>] ST`.\n\t */\n\tCommandFinished = 'D',\n\n\t/**\n\t * Explicitly set the command line. This helps workaround performance and reliability problems\n\t * with parsing out the command, such as conpty not guaranteeing the position of the sequence or\n\t * the shell not guaranteeing that the entire command is even visible.\n\t *\n\t * The command line can escape ascii characters using the `\\xAB` format, where AB are the\n\t * hexadecimal representation of the character code (case insensitive), and escape the `\\`\n\t * character using `\\\\`. It's required to escape semi-colon (`0x3b`) and characters 0x20 and\n\t * below, this is particularly important for new line and semi-colon.\n\t *\n\t * Some examples:\n\t *\n\t * ```\n\t * \"\\\"  -> \"\\\\\"\n\t * \"\\n\" -> \"\\x0a\"\n\t * \";\"  -> \"\\x3b\"\n\t * ```\n\t *\n\t * An optional nonce can be provided which is may be required by the terminal in order enable\n\t * some features. This helps ensure no malicious command injection has occurred.\n\t *\n\t * Format: `OSC 633 ; E [; <CommandLine> [; <Nonce>]] ST`.\n\t */\n\tCommandLine = 'E',\n\n\t/**\n\t * Similar to prompt start but for line continuations.\n\t *\n\t * WARNING: This sequence is unfinalized, DO NOT use this in your shell integration script.\n\t */\n\tContinuationStart = 'F',\n\n\t/**\n\t * Similar to command start but for line continuations.\n\t *\n\t * WARNING: This sequence is unfinalized, DO NOT use this in your shell integration script.\n\t */\n\tContinuationEnd = 'G',\n\n\t/**\n\t * The start of the right prompt.\n\t *\n\t * WARNING: This sequence is unfinalized, DO NOT use this in your shell integration script.\n\t */\n\tRightPromptStart = 'H',\n\n\t/**\n\t * The end of the right prompt.\n\t *\n\t * WARNING: This sequence is unfinalized, DO NOT use this in your shell integration script.\n\t */\n\tRightPromptEnd = 'I',\n\n\t/**\n\t * Set an arbitrary property: `OSC 633 ; P ; <Property>=<Value> ST`, only known properties will\n\t * be handled.\n\t *\n\t * Known properties:\n\t *\n\t * - `Cwd` - Reports the current working directory to the terminal.\n\t * - `IsWindows` - Indicates whether the terminal is using a Windows backend like winpty or\n\t *   conpty. This may be used to enable additional heuristics as the positioning of the shell\n\t *   integration sequences are not guaranteed to be correct. Valid values: `True`, `False`.\n\t *\n\t * WARNING: Any other properties may be changed and are not guaranteed to work in the future.\n\t */\n\tProperty = 'P',\n\n\t/**\n\t * Sets a mark/point-of-interest in the buffer. `OSC 633 ; SetMark [; Id=<string>] [; Hidden]`\n\t * `Id` - The identifier of the mark that can be used to reference it\n\t * `Hidden` - When set, the mark will be available to reference internally but will not visible\n\t *\n\t * WARNING: This sequence is unfinalized, DO NOT use this in your shell integration script.\n\t */\n\tSetMark = 'SetMark',\n}\n\n/**\n * ITerm sequences\n */\nconst enum ITermOscPt {\n\t/**\n\t * Sets a mark/point-of-interest in the buffer. `OSC 1337 ; SetMark`\n\t */\n\tSetMark = 'SetMark',\n\n\t/**\n\t * Reports current working directory (CWD). `OSC 1337 ; CurrentDir=<Cwd> ST`\n\t */\n\tCurrentDir = 'CurrentDir'\n}\n\n/**\n * The shell integration addon extends xterm by reading shell integration sequences and creating\n * capabilities and passing along relevant sequences to the capabilities. This is meant to\n * encapsulate all handling/parsing of sequences so the capabilities don't need to.\n */\nexport class ShellIntegrationAddon extends Disposable implements IShellIntegration, ITerminalAddon {\n\tprivate _terminal?: Terminal;\n\treadonly capabilities = this._register(new TerminalCapabilityStore());\n\tprivate _hasUpdatedTelemetry: boolean = false;\n\tprivate _activationTimeout: any;\n\tprivate _commonProtocolDisposables: IDisposable[] = [];\n\tprivate _status: ShellIntegrationStatus = ShellIntegrationStatus.Off;\n\n\tget status(): ShellIntegrationStatus { return this._status; }\n\n\tprivate readonly _onDidChangeStatus = new Emitter<ShellIntegrationStatus>();\n\treadonly onDidChangeStatus = this._onDidChangeStatus.event;\n\n\tconstructor(\n\t\tprivate _nonce: string,\n\t\tprivate readonly _disableTelemetry: boolean | undefined,\n\t\tprivate readonly _telemetryService: ITelemetryService | undefined,\n\t\tprivate readonly _logService: ILogService\n\t) {\n\t\tsuper();\n\t\tthis._register(toDisposable(() => {\n\t\t\tthis._clearActivationTimeout();\n\t\t\tthis._disposeCommonProtocol();\n\t\t}));\n\t}\n\n\tprivate _disposeCommonProtocol(): void {\n\t\tdispose(this._commonProtocolDisposables);\n\t\tthis._commonProtocolDisposables.length = 0;\n\t}\n\n\tactivate(xterm: Terminal) {\n\t\tthis._terminal = xterm;\n\t\tthis.capabilities.add(TerminalCapability.PartialCommandDetection, this._register(new PartialCommandDetectionCapability(this._terminal)));\n\t\tthis._register(xterm.parser.registerOscHandler(ShellIntegrationOscPs.VSCode, data => this._handleVSCodeSequence(data)));\n\t\tthis._register(xterm.parser.registerOscHandler(ShellIntegrationOscPs.ITerm, data => this._doHandleITermSequence(data)));\n\t\tthis._commonProtocolDisposables.push(\n\t\t\txterm.parser.registerOscHandler(ShellIntegrationOscPs.FinalTerm, data => this._handleFinalTermSequence(data))\n\t\t);\n\t\tthis._register(xterm.parser.registerOscHandler(ShellIntegrationOscPs.SetCwd, data => this._doHandleSetCwd(data)));\n\t\tthis._register(xterm.parser.registerOscHandler(ShellIntegrationOscPs.SetWindowsFriendlyCwd, data => this._doHandleSetWindowsFriendlyCwd(data)));\n\t\tthis._ensureCapabilitiesOrAddFailureTelemetry();\n\t}\n\n\tgetMarkerId(terminal: Terminal, vscodeMarkerId: string) {\n\t\tthis._createOrGetBufferMarkDetection(terminal).getMark(vscodeMarkerId);\n\t}\n\n\tprivate _handleFinalTermSequence(data: string): boolean {\n\t\tconst didHandle = this._doHandleFinalTermSequence(data);\n\t\tif (this._status === ShellIntegrationStatus.Off) {\n\t\t\tthis._status = ShellIntegrationStatus.FinalTerm;\n\t\t\tthis._onDidChangeStatus.fire(this._status);\n\t\t}\n\t\treturn didHandle;\n\t}\n\n\tprivate _doHandleFinalTermSequence(data: string): boolean {\n\t\tif (!this._terminal) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Pass the sequence along to the capability\n\t\t// It was considered to disable the common protocol in order to not confuse the VS Code\n\t\t// shell integration if both happen for some reason. This doesn't work for powerlevel10k\n\t\t// when instant prompt is enabled though. If this does end up being a problem we could pass\n\t\t// a type flag through the capability calls\n\t\tconst [command, ...args] = data.split(';');\n\t\tswitch (command) {\n\t\t\tcase 'A':\n\t\t\t\tthis._createOrGetCommandDetection(this._terminal).handlePromptStart();\n\t\t\t\treturn true;\n\t\t\tcase 'B':\n\t\t\t\t// Ignore the command line for these sequences as it's unreliable for example in powerlevel10k\n\t\t\t\tthis._createOrGetCommandDetection(this._terminal).handleCommandStart({ ignoreCommandLine: true });\n\t\t\t\treturn true;\n\t\t\tcase 'C':\n\t\t\t\tthis._createOrGetCommandDetection(this._terminal).handleCommandExecuted();\n\t\t\t\treturn true;\n\t\t\tcase 'D': {\n\t\t\t\tconst exitCode = args.length === 1 ? parseInt(args[0]) : undefined;\n\t\t\t\tthis._createOrGetCommandDetection(this._terminal).handleCommandFinished(exitCode);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate _handleVSCodeSequence(data: string): boolean {\n\t\tconst didHandle = this._doHandleVSCodeSequence(data);\n\t\tif (!this._hasUpdatedTelemetry && didHandle) {\n\t\t\tthis._telemetryService?.publicLog2<{}, { owner: 'meganrogge'; comment: 'Indicates shell integration was activated' }>('terminal/shellIntegrationActivationSucceeded');\n\t\t\tthis._hasUpdatedTelemetry = true;\n\t\t\tthis._clearActivationTimeout();\n\t\t}\n\t\tif (this._status !== ShellIntegrationStatus.VSCode) {\n\t\t\tthis._status = ShellIntegrationStatus.VSCode;\n\t\t\tthis._onDidChangeStatus.fire(this._status);\n\t\t}\n\t\treturn didHandle;\n\t}\n\n\tprivate async _ensureCapabilitiesOrAddFailureTelemetry(): Promise<void> {\n\t\tif (!this._telemetryService || this._disableTelemetry) {\n\t\t\treturn;\n\t\t}\n\t\tthis._activationTimeout = setTimeout(() => {\n\t\t\tif (!this.capabilities.get(TerminalCapability.CommandDetection) && !this.capabilities.get(TerminalCapability.CwdDetection)) {\n\t\t\t\tthis._telemetryService?.publicLog2<{ classification: 'SystemMetaData'; purpose: 'FeatureInsight' }>('terminal/shellIntegrationActivationTimeout');\n\t\t\t\tthis._logService.warn('Shell integration failed to add capabilities within 10 seconds');\n\t\t\t}\n\t\t\tthis._hasUpdatedTelemetry = true;\n\t\t}, 10000);\n\t}\n\n\tprivate _clearActivationTimeout(): void {\n\t\tif (this._activationTimeout !== undefined) {\n\t\t\tclearTimeout(this._activationTimeout);\n\t\t\tthis._activationTimeout = undefined;\n\t\t}\n\t}\n\n\tprivate _doHandleVSCodeSequence(data: string): boolean {\n\t\tif (!this._terminal) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Pass the sequence along to the capability\n\t\tconst argsIndex = data.indexOf(';');\n\t\tconst sequenceCommand = argsIndex === -1 ? data : data.substring(0, argsIndex);\n\t\t// Cast to strict checked index access\n\t\tconst args: (string | undefined)[] = argsIndex === -1 ? [] : data.substring(argsIndex + 1).split(';');\n\t\tswitch (sequenceCommand) {\n\t\t\tcase VSCodeOscPt.PromptStart:\n\t\t\t\tthis._createOrGetCommandDetection(this._terminal).handlePromptStart();\n\t\t\t\treturn true;\n\t\t\tcase VSCodeOscPt.CommandStart:\n\t\t\t\tthis._createOrGetCommandDetection(this._terminal).handleCommandStart();\n\t\t\t\treturn true;\n\t\t\tcase VSCodeOscPt.CommandExecuted:\n\t\t\t\tthis._createOrGetCommandDetection(this._terminal).handleCommandExecuted();\n\t\t\t\treturn true;\n\t\t\tcase VSCodeOscPt.CommandFinished: {\n\t\t\t\tconst arg0 = args[0];\n\t\t\t\tconst exitCode = arg0 !== undefined ? parseInt(arg0) : undefined;\n\t\t\t\tthis._createOrGetCommandDetection(this._terminal).handleCommandFinished(exitCode);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcase VSCodeOscPt.CommandLine: {\n\t\t\t\tconst arg0 = args[0];\n\t\t\t\tconst arg1 = args[1];\n\t\t\t\tlet commandLine: string;\n\t\t\t\tif (arg0 !== undefined) {\n\t\t\t\t\tcommandLine = deserializeMessage(arg0);\n\t\t\t\t} else {\n\t\t\t\t\tcommandLine = '';\n\t\t\t\t}\n\t\t\t\tthis._createOrGetCommandDetection(this._terminal).setCommandLine(commandLine, arg1 === this._nonce);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcase VSCodeOscPt.ContinuationStart: {\n\t\t\t\tthis._createOrGetCommandDetection(this._terminal).handleContinuationStart();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcase VSCodeOscPt.ContinuationEnd: {\n\t\t\t\tthis._createOrGetCommandDetection(this._terminal).handleContinuationEnd();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcase VSCodeOscPt.RightPromptStart: {\n\t\t\t\tthis._createOrGetCommandDetection(this._terminal).handleRightPromptStart();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcase VSCodeOscPt.RightPromptEnd: {\n\t\t\t\tthis._createOrGetCommandDetection(this._terminal).handleRightPromptEnd();\n\t\t\t\treturn true;\n\t\t\t}\n\t\t\tcase VSCodeOscPt.Property: {\n\t\t\t\tconst arg0 = args[0];\n\t\t\t\tconst deserialized = arg0 !== undefined ? deserializeMessage(arg0) : '';\n\t\t\t\tconst { key, value } = parseKeyValueAssignment(deserialized);\n\t\t\t\tif (value === undefined) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t\tswitch (key) {\n\t\t\t\t\tcase 'Cwd': {\n\t\t\t\t\t\tthis._updateCwd(value);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'IsWindows': {\n\t\t\t\t\t\tthis._createOrGetCommandDetection(this._terminal).setIsWindowsPty(value === 'True' ? true : false);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tcase 'Task': {\n\t\t\t\t\t\tthis._createOrGetBufferMarkDetection(this._terminal);\n\t\t\t\t\t\tthis.capabilities.get(TerminalCapability.CommandDetection)?.setIsCommandStorageDisabled();\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tcase VSCodeOscPt.SetMark: {\n\t\t\t\tthis._createOrGetBufferMarkDetection(this._terminal).addMark(parseMarkSequence(args));\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// Unrecognized sequence\n\t\treturn false;\n\t}\n\n\tprivate _updateCwd(value: string) {\n\t\tvalue = sanitizeCwd(value);\n\t\tthis._createOrGetCwdDetection().updateCwd(value);\n\t\tconst commandDetection = this.capabilities.get(TerminalCapability.CommandDetection);\n\t\tcommandDetection?.setCwd(value);\n\t}\n\n\tprivate _doHandleITermSequence(data: string): boolean {\n\t\tif (!this._terminal) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst [command] = data.split(';');\n\t\tswitch (command) {\n\t\t\tcase ITermOscPt.SetMark: {\n\t\t\t\tthis._createOrGetBufferMarkDetection(this._terminal).addMark();\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\t// Checking for known `<key>=<value>` pairs.\n\t\t\t\t// Note that unlike `VSCodeOscPt.Property`, iTerm2 does not interpret backslash or hex-escape sequences.\n\t\t\t\t// See: https://github.com/gnachman/iTerm2/blob/bb0882332cec5196e4de4a4225978d746e935279/sources/VT100Terminal.m#L2089-L2105\n\t\t\t\tconst { key, value } = parseKeyValueAssignment(command);\n\n\t\t\t\tif (value === undefined) {\n\t\t\t\t\t// No '=' was found, so it's not a property assignment.\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tswitch (key) {\n\t\t\t\t\tcase ITermOscPt.CurrentDir:\n\t\t\t\t\t\t// Encountered: `OSC 1337 ; CurrentDir=<Cwd> ST`\n\t\t\t\t\t\tthis._updateCwd(value);\n\t\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Unrecognized sequence\n\t\treturn false;\n\t}\n\n\tprivate _doHandleSetWindowsFriendlyCwd(data: string): boolean {\n\t\tif (!this._terminal) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst [command, ...args] = data.split(';');\n\t\tswitch (command) {\n\t\t\tcase '9':\n\t\t\t\t// Encountered `OSC 9 ; 9 ; <cwd> ST`\n\t\t\t\tif (args.length) {\n\t\t\t\t\tthis._updateCwd(args[0]);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t}\n\n\t\t// Unrecognized sequence\n\t\treturn false;\n\t}\n\n\t/**\n\t * Handles the sequence: `OSC 7 ; scheme://cwd ST`\n\t */\n\tprivate _doHandleSetCwd(data: string): boolean {\n\t\tif (!this._terminal) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst [command] = data.split(';');\n\n\t\tif (command.match(/^file:\\/\\/.*\\//)) {\n\t\t\tconst uri = URI.parse(command);\n\t\t\tif (uri.path && uri.path.length > 0) {\n\t\t\t\tthis._updateCwd(uri.path);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\t// Unrecognized sequence\n\t\treturn false;\n\t}\n\n\tserialize(): ISerializedCommandDetectionCapability {\n\t\tif (!this._terminal || !this.capabilities.has(TerminalCapability.CommandDetection)) {\n\t\t\treturn {\n\t\t\t\tisWindowsPty: false,\n\t\t\t\tcommands: []\n\t\t\t};\n\t\t}\n\t\tconst result = this._createOrGetCommandDetection(this._terminal).serialize();\n\t\treturn result;\n\t}\n\n\tdeserialize(serialized: ISerializedCommandDetectionCapability): void {\n\t\tif (!this._terminal) {\n\t\t\tthrow new Error('Cannot restore commands before addon is activated');\n\t\t}\n\t\tthis._createOrGetCommandDetection(this._terminal).deserialize(serialized);\n\t}\n\n\tprotected _createOrGetCwdDetection(): ICwdDetectionCapability {\n\t\tlet cwdDetection = this.capabilities.get(TerminalCapability.CwdDetection);\n\t\tif (!cwdDetection) {\n\t\t\tcwdDetection = this._register(new CwdDetectionCapability());\n\t\t\tthis.capabilities.add(TerminalCapability.CwdDetection, cwdDetection);\n\t\t}\n\t\treturn cwdDetection;\n\t}\n\n\tprotected _createOrGetCommandDetection(terminal: Terminal): ICommandDetectionCapability {\n\t\tlet commandDetection = this.capabilities.get(TerminalCapability.CommandDetection);\n\t\tif (!commandDetection) {\n\t\t\tcommandDetection = this._register(new CommandDetectionCapability(terminal, this._logService));\n\t\t\tthis.capabilities.add(TerminalCapability.CommandDetection, commandDetection);\n\t\t}\n\t\treturn commandDetection;\n\t}\n\n\tprotected _createOrGetBufferMarkDetection(terminal: Terminal): IBufferMarkCapability {\n\t\tlet bufferMarkDetection = this.capabilities.get(TerminalCapability.BufferMarkDetection);\n\t\tif (!bufferMarkDetection) {\n\t\t\tbufferMarkDetection = this._register(new BufferMarkCapability(terminal));\n\t\t\tthis.capabilities.add(TerminalCapability.BufferMarkDetection, bufferMarkDetection);\n\t\t}\n\t\treturn bufferMarkDetection;\n\t}\n}\n\nexport function deserializeMessage(message: string): string {\n\treturn message.replaceAll(\n\t\t// Backslash ('\\') followed by an escape operator: either another '\\', or 'x' and two hex chars.\n\t\t/\\\\(\\\\|x([0-9a-f]{2}))/gi,\n\t\t// If it's a hex value, parse it to a character.\n\t\t// Otherwise the operator is '\\', which we return literally, now unescaped.\n\t\t(_match: string, op: string, hex?: string) => hex ? String.fromCharCode(parseInt(hex, 16)) : op);\n}\n\nexport function parseKeyValueAssignment(message: string): { key: string; value: string | undefined } {\n\tconst separatorIndex = message.indexOf('=');\n\tif (separatorIndex === -1) {\n\t\treturn { key: message, value: undefined }; // No '=' was found.\n\t}\n\treturn {\n\t\tkey: message.substring(0, separatorIndex),\n\t\tvalue: message.substring(1 + separatorIndex)\n\t};\n}\n\n\nexport function parseMarkSequence(sequence: (string | undefined)[]): { id?: string; hidden?: boolean } {\n\tlet id = undefined;\n\tlet hidden = false;\n\tfor (const property of sequence) {\n\t\t// Sanity check, this shouldn't happen in practice\n\t\tif (property === undefined) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (property === 'Hidden') {\n\t\t\thidden = true;\n\t\t}\n\t\tif (property.startsWith('Id=')) {\n\t\t\tid = property.substring(3);\n\t\t}\n\t}\n\treturn { id, hidden };\n}\n"]}