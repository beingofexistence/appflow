{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/terminal/common/capabilities/commandDetectionCapability.ts"],"names":[],"mappings":"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","file":"commandDetectionCapability.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { timeout } from 'vs/base/common/async';\nimport { debounce } from 'vs/base/common/decorators';\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ICommandDetectionCapability, TerminalCapability, ITerminalCommand, IHandleCommandOptions, ICommandInvalidationRequest, CommandInvalidationReason, ISerializedTerminalCommand, ISerializedCommandDetectionCapability } from 'vs/platform/terminal/common/capabilities/capabilities';\nimport { ITerminalOutputMatch, ITerminalOutputMatcher } from 'vs/platform/terminal/common/terminal';\n\n// Importing types is safe in any layer\n// eslint-disable-next-line local/code-import-patterns\nimport type { IBuffer, IBufferLine, IDisposable, IMarker, Terminal } from 'xterm-headless';\n\nexport interface ICurrentPartialCommand {\n\tpreviousCommandMarker?: IMarker;\n\n\tpromptStartMarker?: IMarker;\n\n\tcommandStartMarker?: IMarker;\n\tcommandStartX?: number;\n\tcommandStartLineContent?: string;\n\n\tcommandRightPromptStartX?: number;\n\tcommandRightPromptEndX?: number;\n\n\tcommandLines?: IMarker;\n\n\tcommandExecutedMarker?: IMarker;\n\tcommandExecutedX?: number;\n\n\tcommandFinishedMarker?: IMarker;\n\n\tcurrentContinuationMarker?: IMarker;\n\tcontinuations?: { marker: IMarker; end: number }[];\n\n\tcommand?: string;\n\n\t/**\n\t * Whether the command line is trusted via a nonce.\n\t */\n\tisTrusted?: boolean;\n\n\t/**\n\t * Something invalidated the command before it finished, this will prevent the onCommandFinished\n\t * event from firing.\n\t */\n\tisInvalid?: boolean;\n}\n\ninterface ITerminalDimensions {\n\tcols: number;\n\trows: number;\n}\n\nexport class CommandDetectionCapability extends Disposable implements ICommandDetectionCapability {\n\treadonly type = TerminalCapability.CommandDetection;\n\n\tprotected _commands: ITerminalCommand[] = [];\n\tprivate _exitCode: number | undefined;\n\tprivate _cwd: string | undefined;\n\tprivate _currentCommand: ICurrentPartialCommand = {};\n\tprivate _isWindowsPty: boolean = false;\n\tprivate _onCursorMoveListener?: IDisposable;\n\tprivate _commandMarkers: IMarker[] = [];\n\tprivate _dimensions: ITerminalDimensions;\n\tprivate __isCommandStorageDisabled: boolean = false;\n\tprivate _handleCommandStartOptions?: IHandleCommandOptions;\n\n\tget commands(): readonly ITerminalCommand[] { return this._commands; }\n\tget executingCommand(): string | undefined { return this._currentCommand.command; }\n\t// TODO: as is unsafe here and it duplicates behavor of executingCommand\n\tget executingCommandObject(): ITerminalCommand | undefined {\n\t\tif (this._currentCommand.commandStartMarker) {\n\t\t\treturn { marker: this._currentCommand.commandStartMarker } as ITerminalCommand;\n\t\t}\n\t\treturn undefined;\n\t}\n\tget currentCommand(): ICurrentPartialCommand | undefined {\n\t\treturn this._currentCommand;\n\t}\n\tget cwd(): string | undefined { return this._cwd; }\n\tprivate get _isInputting(): boolean {\n\t\treturn !!(this._currentCommand.commandStartMarker && !this._currentCommand.commandExecutedMarker);\n\t}\n\n\tget hasInput(): boolean | undefined {\n\t\tif (!this._isInputting || !this._currentCommand?.commandStartMarker) {\n\t\t\treturn undefined;\n\t\t}\n\t\tif (this._terminal.buffer.active.baseY + this._terminal.buffer.active.cursorY === this._currentCommand.commandStartMarker?.line) {\n\t\t\tconst line = this._terminal.buffer.active.getLine(this._terminal.buffer.active.cursorY)?.translateToString(true, this._currentCommand.commandStartX);\n\t\t\tif (line === undefined) {\n\t\t\t\treturn undefined;\n\t\t\t}\n\t\t\treturn line.length > 0;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate readonly _onCommandStarted = this._register(new Emitter<ITerminalCommand>());\n\treadonly onCommandStarted = this._onCommandStarted.event;\n\tprivate readonly _onBeforeCommandFinished = this._register(new Emitter<ITerminalCommand>());\n\treadonly onBeforeCommandFinished = this._onBeforeCommandFinished.event;\n\tprivate readonly _onCommandFinished = this._register(new Emitter<ITerminalCommand>());\n\treadonly onCommandFinished = this._onCommandFinished.event;\n\tprivate readonly _onCommandExecuted = this._register(new Emitter<void>());\n\treadonly onCommandExecuted = this._onCommandExecuted.event;\n\tprivate readonly _onCommandInvalidated = this._register(new Emitter<ITerminalCommand[]>());\n\treadonly onCommandInvalidated = this._onCommandInvalidated.event;\n\tprivate readonly _onCurrentCommandInvalidated = this._register(new Emitter<ICommandInvalidationRequest>());\n\treadonly onCurrentCommandInvalidated = this._onCurrentCommandInvalidated.event;\n\n\tconstructor(\n\t\tprivate readonly _terminal: Terminal,\n\t\tprivate readonly _logService: ILogService\n\t) {\n\t\tsuper();\n\t\tthis._dimensions = {\n\t\t\tcols: this._terminal.cols,\n\t\t\trows: this._terminal.rows\n\t\t};\n\t\tthis._register(this._terminal.onResize(e => this._handleResize(e)));\n\t\tthis._register(this._terminal.onCursorMove(() => this._handleCursorMove()));\n\t\tthis._setupClearListeners();\n\t}\n\n\tprivate _handleResize(e: { cols: number; rows: number }) {\n\t\tif (this._isWindowsPty) {\n\t\t\tthis._preHandleResizeWindows(e);\n\t\t}\n\t\tthis._dimensions.cols = e.cols;\n\t\tthis._dimensions.rows = e.rows;\n\t}\n\n\t@debounce(500)\n\tprivate _handleCursorMove() {\n\t\t// Early versions of conpty do not have real support for an alt buffer, in addition certain\n\t\t// commands such as tsc watch will write to the top of the normal buffer. The following\n\t\t// checks when the cursor has moved while the normal buffer is empty and if it is above the\n\t\t// current command, all decorations within the viewport will be invalidated.\n\t\t//\n\t\t// This function is debounced so that the cursor is only checked when it is stable so\n\t\t// conpty's screen reprinting will not trigger decoration clearing.\n\t\t//\n\t\t// This is mostly a workaround for Windows but applies to all OS' because of the tsc watch\n\t\t// case.\n\t\tif (this._terminal.buffer.active === this._terminal.buffer.normal && this._currentCommand.commandStartMarker) {\n\t\t\tif (this._terminal.buffer.active.baseY + this._terminal.buffer.active.cursorY < this._currentCommand.commandStartMarker.line) {\n\t\t\t\tthis._clearCommandsInViewport();\n\t\t\t\tthis._currentCommand.isInvalid = true;\n\t\t\t\tthis._onCurrentCommandInvalidated.fire({ reason: CommandInvalidationReason.Windows });\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _setupClearListeners() {\n\t\t// Setup listeners for when clear is run in the shell. Since we don't know immediately if\n\t\t// this is a Windows pty, listen to both routes and do the Windows check inside them\n\n\t\t// For a Windows backend we cannot listen to CSI J, instead we assume running clear or\n\t\t// cls will clear all commands in the viewport. This is not perfect but it's right most\n\t\t// of the time.\n\t\tthis._register(this.onBeforeCommandFinished(command => {\n\t\t\tif (this._isWindowsPty) {\n\t\t\t\tif (command.command.trim().toLowerCase() === 'clear' || command.command.trim().toLowerCase() === 'cls') {\n\t\t\t\t\tthis._clearCommandsInViewport();\n\t\t\t\t\tthis._currentCommand.isInvalid = true;\n\t\t\t\t\tthis._onCurrentCommandInvalidated.fire({ reason: CommandInvalidationReason.Windows });\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\t// For non-Windows backends we can just listen to CSI J which is what the clear command\n\t\t// typically emits.\n\t\tthis._terminal.parser.registerCsiHandler({ final: 'J' }, params => {\n\t\t\tif (!this._isWindowsPty) {\n\t\t\t\tif (params.length >= 1 && (params[0] === 2 || params[0] === 3)) {\n\t\t\t\t\tthis._clearCommandsInViewport();\n\t\t\t\t}\n\t\t\t}\n\t\t\t// We don't want to override xterm.js' default behavior, just augment it\n\t\t\treturn false;\n\t\t});\n\t}\n\n\tprivate _preHandleResizeWindows(e: { cols: number; rows: number }) {\n\t\t// Resize behavior is different under conpty; instead of bringing parts of the scrollback\n\t\t// back into the viewport, new lines are inserted at the bottom (ie. the same behavior as if\n\t\t// there was no scrollback).\n\t\t//\n\t\t// On resize this workaround will wait for a conpty reprint to occur by waiting for the\n\t\t// cursor to move, it will then calculate the number of lines that the commands within the\n\t\t// viewport _may have_ shifted. After verifying the content of the current line is\n\t\t// incorrect, the line after shifting is checked and if that matches delete events are fired\n\t\t// on the xterm.js buffer to move the markers.\n\t\t//\n\t\t// While a bit hacky, this approach is quite safe and seems to work great at least for pwsh.\n\t\tconst baseY = this._terminal.buffer.active.baseY;\n\t\tconst rowsDifference = e.rows - this._dimensions.rows;\n\t\t// Only do when rows increase, do in the next frame as this needs to happen after\n\t\t// conpty reprints the screen\n\t\tif (rowsDifference > 0) {\n\t\t\tthis._waitForCursorMove().then(() => {\n\t\t\t\t// Calculate the number of lines the content may have shifted, this will max out at\n\t\t\t\t// scrollback count since the standard behavior will be used then\n\t\t\t\tconst potentialShiftedLineCount = Math.min(rowsDifference, baseY);\n\t\t\t\t// For each command within the viewport, assume commands are in the correct order\n\t\t\t\tfor (let i = this.commands.length - 1; i >= 0; i--) {\n\t\t\t\t\tconst command = this.commands[i];\n\t\t\t\t\tif (!command.marker || command.marker.line < baseY || command.commandStartLineContent === undefined) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst line = this._terminal.buffer.active.getLine(command.marker.line);\n\t\t\t\t\tif (!line || line.translateToString(true) === command.commandStartLineContent) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tconst shiftedY = command.marker.line - potentialShiftedLineCount;\n\t\t\t\t\tconst shiftedLine = this._terminal.buffer.active.getLine(shiftedY);\n\t\t\t\t\tif (shiftedLine?.translateToString(true) !== command.commandStartLineContent) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\t// HACK: xterm.js doesn't expose this by design as it's an internal core\n\t\t\t\t\t// function an embedder could easily do damage with. Additionally, this\n\t\t\t\t\t// can't really be upstreamed since the event relies on shell integration to\n\t\t\t\t\t// verify the shifting is necessary.\n\t\t\t\t\t(this._terminal as any)._core._bufferService.buffer.lines.onDeleteEmitter.fire({\n\t\t\t\t\t\tindex: this._terminal.buffer.active.baseY,\n\t\t\t\t\t\tamount: potentialShiftedLineCount\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate _clearCommandsInViewport(): void {\n\t\t// Find the number of commands on the tail end of the array that are within the viewport\n\t\tlet count = 0;\n\t\tfor (let i = this._commands.length - 1; i >= 0; i--) {\n\t\t\tconst line = this._commands[i].marker?.line;\n\t\t\tif (line && line < this._terminal.buffer.active.baseY) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\t// Remove them\n\t\tif (count > 0) {\n\t\t\tthis._onCommandInvalidated.fire(this._commands.splice(this._commands.length - count, count));\n\t\t}\n\t}\n\n\tprivate _waitForCursorMove(): Promise<void> {\n\t\tconst cursorX = this._terminal.buffer.active.cursorX;\n\t\tconst cursorY = this._terminal.buffer.active.cursorY;\n\t\tlet totalDelay = 0;\n\t\treturn new Promise<void>((resolve, reject) => {\n\t\t\tconst interval = setInterval(() => {\n\t\t\t\tif (cursorX !== this._terminal.buffer.active.cursorX || cursorY !== this._terminal.buffer.active.cursorY) {\n\t\t\t\t\tresolve();\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\ttotalDelay += 10;\n\t\t\t\tif (totalDelay > 1000) {\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t}, 10);\n\t\t});\n\t}\n\n\tsetCwd(value: string) {\n\t\tthis._cwd = value;\n\t}\n\n\tsetIsWindowsPty(value: boolean) {\n\t\tthis._isWindowsPty = value;\n\t}\n\n\tsetIsCommandStorageDisabled(): void {\n\t\tthis.__isCommandStorageDisabled = true;\n\t}\n\n\tgetCwdForLine(line: number): string | undefined {\n\t\t// Handle the current partial command first, anything below it's prompt is considered part\n\t\t// of the current command\n\t\tif (this._currentCommand.promptStartMarker && line >= this._currentCommand.promptStartMarker?.line) {\n\t\t\treturn this._cwd;\n\t\t}\n\t\t// TODO: It would be more reliable to take the closest cwd above the line if it isn't found for the line\n\t\t// TODO: Use a reverse for loop to find the line to avoid creating another array\n\t\tconst reversed = [...this._commands].reverse();\n\t\treturn reversed.find(c => c.marker!.line <= line - 1)?.cwd;\n\t}\n\n\thandlePromptStart(options?: IHandleCommandOptions): void {\n\t\tthis._currentCommand.promptStartMarker = options?.marker || this._terminal.registerMarker(0);\n\t\tthis._logService.debug('CommandDetectionCapability#handlePromptStart', this._terminal.buffer.active.cursorX, this._currentCommand.promptStartMarker?.line);\n\t}\n\n\thandleContinuationStart(): void {\n\t\tthis._currentCommand.currentContinuationMarker = this._terminal.registerMarker(0);\n\t\tthis._logService.debug('CommandDetectionCapability#handleContinuationStart', this._currentCommand.currentContinuationMarker);\n\t}\n\n\thandleContinuationEnd(): void {\n\t\tif (!this._currentCommand.currentContinuationMarker) {\n\t\t\tthis._logService.warn('CommandDetectionCapability#handleContinuationEnd Received continuation end without start');\n\t\t\treturn;\n\t\t}\n\t\tif (!this._currentCommand.continuations) {\n\t\t\tthis._currentCommand.continuations = [];\n\t\t}\n\t\tthis._currentCommand.continuations.push({\n\t\t\tmarker: this._currentCommand.currentContinuationMarker,\n\t\t\tend: this._terminal.buffer.active.cursorX\n\t\t});\n\t\tthis._currentCommand.currentContinuationMarker = undefined;\n\t\tthis._logService.debug('CommandDetectionCapability#handleContinuationEnd', this._currentCommand.continuations[this._currentCommand.continuations.length - 1]);\n\t}\n\n\thandleRightPromptStart(): void {\n\t\tthis._currentCommand.commandRightPromptStartX = this._terminal.buffer.active.cursorX;\n\t\tthis._logService.debug('CommandDetectionCapability#handleRightPromptStart', this._currentCommand.commandRightPromptStartX);\n\t}\n\n\thandleRightPromptEnd(): void {\n\t\tthis._currentCommand.commandRightPromptEndX = this._terminal.buffer.active.cursorX;\n\t\tthis._logService.debug('CommandDetectionCapability#handleRightPromptEnd', this._currentCommand.commandRightPromptEndX);\n\t}\n\n\thandleCommandStart(options?: IHandleCommandOptions): void {\n\t\tthis._handleCommandStartOptions = options;\n\t\t// Only update the column if the line has already been set\n\t\tthis._currentCommand.commandStartMarker = options?.marker || this._currentCommand.commandStartMarker;\n\t\tif (this._currentCommand.commandStartMarker?.line === this._terminal.buffer.active.cursorY) {\n\t\t\tthis._currentCommand.commandStartX = this._terminal.buffer.active.cursorX;\n\t\t\tthis._logService.debug('CommandDetectionCapability#handleCommandStart', this._currentCommand.commandStartX, this._currentCommand.commandStartMarker?.line);\n\t\t\treturn;\n\t\t}\n\t\tif (this._isWindowsPty) {\n\t\t\tthis._handleCommandStartWindows();\n\t\t\treturn;\n\t\t}\n\t\tthis._currentCommand.commandStartX = this._terminal.buffer.active.cursorX;\n\t\tthis._currentCommand.commandStartMarker = options?.marker || this._terminal.registerMarker(0);\n\n\t\t// Clear executed as it must happen after command start\n\t\tthis._currentCommand.commandExecutedMarker?.dispose();\n\t\tthis._currentCommand.commandExecutedMarker = undefined;\n\t\tthis._currentCommand.commandExecutedX = undefined;\n\t\tfor (const m of this._commandMarkers) {\n\t\t\tm.dispose();\n\t\t}\n\t\tthis._commandMarkers.length = 0;\n\n\t\tthis._onCommandStarted.fire({ marker: options?.marker || this._currentCommand.commandStartMarker, markProperties: options?.markProperties } as ITerminalCommand);\n\t\tthis._logService.debug('CommandDetectionCapability#handleCommandStart', this._currentCommand.commandStartX, this._currentCommand.commandStartMarker?.line);\n\t}\n\n\tprivate _handleCommandStartWindows(): void {\n\t\tthis._currentCommand.commandStartX = this._terminal.buffer.active.cursorX;\n\n\t\t// On Windows track all cursor movements after the command start sequence\n\t\tthis._commandMarkers.length = 0;\n\t\t// HACK: Fire command started on the following frame on Windows to allow the cursor\n\t\t// position to update as conpty often prints the sequence on a different line to the\n\t\t// actual line the command started on.\n\t\ttimeout(0).then(() => {\n\t\t\tif (!this._currentCommand.commandExecutedMarker) {\n\t\t\t\tthis._onCursorMoveListener = this._terminal.onCursorMove(() => {\n\t\t\t\t\tif (this._commandMarkers.length === 0 || this._commandMarkers[this._commandMarkers.length - 1].line !== this._terminal.buffer.active.cursorY) {\n\t\t\t\t\t\tconst marker = this._terminal.registerMarker(0);\n\t\t\t\t\t\tif (marker) {\n\t\t\t\t\t\t\tthis._commandMarkers.push(marker);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis._currentCommand.commandStartMarker = this._terminal.registerMarker(0);\n\t\t\tif (this._currentCommand.commandStartMarker) {\n\t\t\t\tconst line = this._terminal.buffer.active.getLine(this._currentCommand.commandStartMarker.line);\n\t\t\t\tif (line) {\n\t\t\t\t\tthis._currentCommand.commandStartLineContent = line.translateToString(true);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._onCommandStarted.fire({ marker: this._currentCommand.commandStartMarker } as ITerminalCommand);\n\t\t\tthis._logService.debug('CommandDetectionCapability#_handleCommandStartWindows', this._currentCommand.commandStartX, this._currentCommand.commandStartMarker?.line);\n\t\t});\n\t}\n\n\thandleGenericCommand(options?: IHandleCommandOptions): void {\n\t\tif (options?.markProperties?.disableCommandStorage) {\n\t\t\tthis.setIsCommandStorageDisabled();\n\t\t}\n\t\tthis.handlePromptStart(options);\n\t\tthis.handleCommandStart(options);\n\t\tthis.handleCommandExecuted(options);\n\t\tthis.handleCommandFinished(undefined, options);\n\t}\n\n\thandleCommandExecuted(options?: IHandleCommandOptions): void {\n\t\tif (this._isWindowsPty) {\n\t\t\tthis._handleCommandExecutedWindows();\n\t\t\treturn;\n\t\t}\n\n\t\tthis._currentCommand.commandExecutedMarker = options?.marker || this._terminal.registerMarker(0);\n\t\tthis._currentCommand.commandExecutedX = this._terminal.buffer.active.cursorX;\n\t\tthis._logService.debug('CommandDetectionCapability#handleCommandExecuted', this._currentCommand.commandExecutedX, this._currentCommand.commandExecutedMarker?.line);\n\n\t\t// Sanity check optional props\n\t\tif (!this._currentCommand.commandStartMarker || !this._currentCommand.commandExecutedMarker || this._currentCommand.commandStartX === undefined) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Calculate the command\n\t\tthis._currentCommand.command = this.__isCommandStorageDisabled ? '' : this._terminal.buffer.active.getLine(this._currentCommand.commandStartMarker.line)?.translateToString(true, this._currentCommand.commandStartX, this._currentCommand.commandRightPromptStartX).trim();\n\t\tlet y = this._currentCommand.commandStartMarker.line + 1;\n\t\tconst commandExecutedLine = this._currentCommand.commandExecutedMarker.line;\n\t\tfor (; y < commandExecutedLine; y++) {\n\t\t\tconst line = this._terminal.buffer.active.getLine(y);\n\t\t\tif (line) {\n\t\t\t\tconst continuation = this._currentCommand.continuations?.find(e => e.marker.line === y);\n\t\t\t\tif (continuation) {\n\t\t\t\t\tthis._currentCommand.command += '\\n';\n\t\t\t\t}\n\t\t\t\tconst startColumn = continuation?.end ?? 0;\n\t\t\t\tthis._currentCommand.command += line.translateToString(true, startColumn);\n\t\t\t}\n\t\t}\n\t\tif (y === commandExecutedLine) {\n\t\t\tthis._currentCommand.command += this._terminal.buffer.active.getLine(commandExecutedLine)?.translateToString(true, undefined, this._currentCommand.commandExecutedX) || '';\n\t\t}\n\t\tthis._onCommandExecuted.fire();\n\t}\n\n\tprivate _handleCommandExecutedWindows(): void {\n\t\t// On Windows, use the gathered cursor move markers to correct the command start and\n\t\t// executed markers\n\t\tthis._onCursorMoveListener?.dispose();\n\t\tthis._onCursorMoveListener = undefined;\n\t\tthis._evaluateCommandMarkersWindows();\n\t\tthis._currentCommand.commandExecutedX = this._terminal.buffer.active.cursorX;\n\t\tthis._onCommandExecuted.fire();\n\t\tthis._logService.debug('CommandDetectionCapability#handleCommandExecuted', this._currentCommand.commandExecutedX, this._currentCommand.commandExecutedMarker?.line);\n\t}\n\n\tinvalidateCurrentCommand(request: ICommandInvalidationRequest): void {\n\t\tthis._currentCommand.isInvalid = true;\n\t\tthis._onCurrentCommandInvalidated.fire(request);\n\t}\n\n\thandleCommandFinished(exitCode: number | undefined, options?: IHandleCommandOptions): void {\n\t\tif (this._isWindowsPty) {\n\t\t\tthis._preHandleCommandFinishedWindows();\n\t\t}\n\n\t\tthis._currentCommand.commandFinishedMarker = options?.marker || this._terminal.registerMarker(0);\n\t\tlet command = this._currentCommand.command;\n\t\tthis._logService.debug('CommandDetectionCapability#handleCommandFinished', this._terminal.buffer.active.cursorX, this._currentCommand.commandFinishedMarker?.line, this._currentCommand.command, this._currentCommand);\n\t\tthis._exitCode = exitCode;\n\n\t\t// HACK: Handle a special case on some versions of bash where identical commands get merged\n\t\t// in the output of `history`, this detects that case and sets the exit code to the the last\n\t\t// command's exit code. This covered the majority of cases but will fail if the same command\n\t\t// runs with a different exit code, that will need a more robust fix where we send the\n\t\t// command ID and exit code over to the capability to adjust there.\n\t\tif (this._exitCode === undefined) {\n\t\t\tconst lastCommand = this.commands.length > 0 ? this.commands[this.commands.length - 1] : undefined;\n\t\t\tif (command && command.length > 0 && lastCommand?.command === command) {\n\t\t\t\tthis._exitCode = lastCommand.exitCode;\n\t\t\t}\n\t\t}\n\n\t\tif (this._currentCommand.commandStartMarker === undefined || !this._terminal.buffer.active) {\n\t\t\treturn;\n\t\t}\n\n\t\t// When the command finishes and executed never fires the placeholder selector should be used.\n\t\tif (this._exitCode === undefined && command === undefined) {\n\t\t\tcommand = '';\n\t\t}\n\n\t\tif ((command !== undefined && !command.startsWith('\\\\')) || this._handleCommandStartOptions?.ignoreCommandLine) {\n\t\t\tconst buffer = this._terminal.buffer.active;\n\t\t\tconst timestamp = Date.now();\n\t\t\tconst executedMarker = this._currentCommand.commandExecutedMarker;\n\t\t\tconst endMarker = this._currentCommand.commandFinishedMarker;\n\t\t\tconst newCommand: ITerminalCommand = {\n\t\t\t\tcommand: this._handleCommandStartOptions?.ignoreCommandLine ? '' : (command || ''),\n\t\t\t\tisTrusted: !!this._currentCommand.isTrusted,\n\t\t\t\tmarker: this._currentCommand.commandStartMarker,\n\t\t\t\tendMarker,\n\t\t\t\texecutedMarker,\n\t\t\t\ttimestamp,\n\t\t\t\tcwd: this._cwd,\n\t\t\t\texitCode: this._exitCode,\n\t\t\t\tcommandStartLineContent: this._currentCommand.commandStartLineContent,\n\t\t\t\thasOutput: () => !executedMarker?.isDisposed && !endMarker?.isDisposed && !!(executedMarker && endMarker && executedMarker?.line < endMarker!.line),\n\t\t\t\tgetOutput: () => getOutputForCommand(executedMarker, endMarker, buffer),\n\t\t\t\tgetOutputMatch: (outputMatcher: ITerminalOutputMatcher) => getOutputMatchForCommand(this._isWindowsPty && (executedMarker?.line === endMarker?.line) ? this._currentCommand.commandStartMarker : executedMarker, endMarker, buffer, this._terminal.cols, outputMatcher),\n\t\t\t\tmarkProperties: options?.markProperties\n\t\t\t};\n\t\t\tthis._commands.push(newCommand);\n\t\t\tthis._logService.debug('CommandDetectionCapability#onCommandFinished', newCommand);\n\n\t\t\tthis._onBeforeCommandFinished.fire(newCommand);\n\t\t\tif (!this._currentCommand.isInvalid) {\n\t\t\t\tthis._onCommandFinished.fire(newCommand);\n\t\t\t}\n\t\t}\n\t\tthis._currentCommand.previousCommandMarker = this._currentCommand.commandStartMarker;\n\t\tthis._currentCommand = {};\n\t\tthis._handleCommandStartOptions = undefined;\n\t}\n\n\tprivate _preHandleCommandFinishedWindows(): void {\n\t\tif (this._currentCommand.commandExecutedMarker) {\n\t\t\treturn;\n\t\t}\n\t\t// This is done on command finished just in case command executed never happens (for example\n\t\t// PSReadLine tab completion)\n\t\tif (this._commandMarkers.length === 0) {\n\t\t\t// If the command start timeout doesn't happen before command finished, just use the\n\t\t\t// current marker.\n\t\t\tif (!this._currentCommand.commandStartMarker) {\n\t\t\t\tthis._currentCommand.commandStartMarker = this._terminal.registerMarker(0);\n\t\t\t}\n\t\t\tif (this._currentCommand.commandStartMarker) {\n\t\t\t\tthis._commandMarkers.push(this._currentCommand.commandStartMarker);\n\t\t\t}\n\t\t}\n\t\tthis._evaluateCommandMarkersWindows();\n\t}\n\n\tprivate _evaluateCommandMarkersWindows(): void {\n\t\t// On Windows, use the gathered cursor move markers to correct the command start and\n\t\t// executed markers.\n\t\tif (this._commandMarkers.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tthis._commandMarkers = this._commandMarkers.sort((a, b) => a.line - b.line);\n\t\tthis._currentCommand.commandStartMarker = this._commandMarkers[0];\n\t\tif (this._currentCommand.commandStartMarker) {\n\t\t\tconst line = this._terminal.buffer.active.getLine(this._currentCommand.commandStartMarker.line);\n\t\t\tif (line) {\n\t\t\t\tthis._currentCommand.commandStartLineContent = line.translateToString(true);\n\t\t\t}\n\t\t}\n\t\tthis._currentCommand.commandExecutedMarker = this._commandMarkers[this._commandMarkers.length - 1];\n\t}\n\n\tsetCommandLine(commandLine: string, isTrusted: boolean) {\n\t\tthis._logService.debug('CommandDetectionCapability#setCommandLine', commandLine, isTrusted);\n\t\tthis._currentCommand.command = commandLine;\n\t\tthis._currentCommand.isTrusted = isTrusted;\n\t}\n\n\tserialize(): ISerializedCommandDetectionCapability {\n\t\tconst commands: ISerializedTerminalCommand[] = this.commands.map(e => {\n\t\t\treturn {\n\t\t\t\tstartLine: e.marker?.line,\n\t\t\t\tstartX: undefined,\n\t\t\t\tendLine: e.endMarker?.line,\n\t\t\t\texecutedLine: e.executedMarker?.line,\n\t\t\t\tcommand: this.__isCommandStorageDisabled ? '' : e.command,\n\t\t\t\tisTrusted: e.isTrusted,\n\t\t\t\tcwd: e.cwd,\n\t\t\t\texitCode: e.exitCode,\n\t\t\t\tcommandStartLineContent: e.commandStartLineContent,\n\t\t\t\ttimestamp: e.timestamp,\n\t\t\t\tmarkProperties: e.markProperties,\n\t\t\t\taliases: e.aliases\n\t\t\t};\n\t\t});\n\t\tif (this._currentCommand.commandStartMarker) {\n\t\t\tcommands.push({\n\t\t\t\tstartLine: this._currentCommand.commandStartMarker.line,\n\t\t\t\tstartX: this._currentCommand.commandStartX,\n\t\t\t\tendLine: undefined,\n\t\t\t\texecutedLine: undefined,\n\t\t\t\tcommand: '',\n\t\t\t\tisTrusted: true,\n\t\t\t\tcwd: this._cwd,\n\t\t\t\texitCode: undefined,\n\t\t\t\tcommandStartLineContent: undefined,\n\t\t\t\ttimestamp: 0,\n\t\t\t\tmarkProperties: undefined\n\t\t\t});\n\t\t}\n\t\treturn {\n\t\t\tisWindowsPty: this._isWindowsPty,\n\t\t\tcommands\n\t\t};\n\t}\n\n\tdeserialize(serialized: ISerializedCommandDetectionCapability): void {\n\t\tif (serialized.isWindowsPty) {\n\t\t\tthis.setIsWindowsPty(serialized.isWindowsPty);\n\t\t}\n\t\tconst buffer = this._terminal.buffer.normal;\n\t\tfor (const e of serialized.commands) {\n\t\t\tconst marker = e.startLine !== undefined ? this._terminal.registerMarker(e.startLine - (buffer.baseY + buffer.cursorY)) : undefined;\n\t\t\t// Check for invalid command\n\t\t\tif (!marker) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Partial command\n\t\t\tif (!e.endLine) {\n\t\t\t\tthis._currentCommand.commandStartMarker = marker;\n\t\t\t\tthis._currentCommand.commandStartX = e.startX;\n\t\t\t\tthis._cwd = e.cwd;\n\t\t\t\tthis._onCommandStarted.fire({ marker } as ITerminalCommand);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// Full command\n\t\t\tconst endMarker = e.endLine !== undefined ? this._terminal.registerMarker(e.endLine - (buffer.baseY + buffer.cursorY)) : undefined;\n\t\t\tconst executedMarker = e.executedLine !== undefined ? this._terminal.registerMarker(e.executedLine - (buffer.baseY + buffer.cursorY)) : undefined;\n\t\t\tconst newCommand: ITerminalCommand = {\n\t\t\t\tcommand: this.__isCommandStorageDisabled ? '' : e.command,\n\t\t\t\tisTrusted: e.isTrusted,\n\t\t\t\tmarker,\n\t\t\t\tendMarker,\n\t\t\t\texecutedMarker,\n\t\t\t\ttimestamp: e.timestamp,\n\t\t\t\tcwd: e.cwd,\n\t\t\t\tcommandStartLineContent: e.commandStartLineContent,\n\t\t\t\texitCode: e.exitCode,\n\t\t\t\thasOutput: () => !executedMarker?.isDisposed && !endMarker?.isDisposed && !!(executedMarker && endMarker && executedMarker.line < endMarker.line),\n\t\t\t\tgetOutput: () => getOutputForCommand(executedMarker, endMarker, buffer),\n\t\t\t\tgetOutputMatch: (outputMatcher: ITerminalOutputMatcher) => getOutputMatchForCommand(this._isWindowsPty && (executedMarker?.line === endMarker?.line) ? marker : executedMarker, endMarker, buffer, this._terminal.cols, outputMatcher),\n\t\t\t\tmarkProperties: e.markProperties,\n\t\t\t\twasReplayed: true\n\t\t\t};\n\t\t\tthis._commands.push(newCommand);\n\t\t\tthis._logService.debug('CommandDetectionCapability#onCommandFinished', newCommand);\n\t\t\tthis._onCommandFinished.fire(newCommand);\n\t\t}\n\t}\n}\n\nfunction getOutputForCommand(executedMarker: IMarker | undefined, endMarker: IMarker | undefined, buffer: IBuffer): string | undefined {\n\tif (!executedMarker || !endMarker) {\n\t\treturn undefined;\n\t}\n\tconst startLine = executedMarker.line;\n\tconst endLine = endMarker.line;\n\n\tif (startLine === endLine) {\n\t\treturn undefined;\n\t}\n\tlet output = '';\n\tlet line: IBufferLine | undefined;\n\tfor (let i = startLine; i < endLine; i++) {\n\t\tline = buffer.getLine(i);\n\t\tif (!line) {\n\t\t\tcontinue;\n\t\t}\n\t\toutput += line.translateToString(!line.isWrapped) + (line.isWrapped ? '' : '\\n');\n\t}\n\treturn output === '' ? undefined : output;\n}\n\nfunction getOutputMatchForCommand(executedMarker: IMarker | undefined, endMarker: IMarker | undefined, buffer: IBuffer, cols: number, outputMatcher: ITerminalOutputMatcher): ITerminalOutputMatch | undefined {\n\tif (!executedMarker || !endMarker) {\n\t\treturn undefined;\n\t}\n\tconst endLine = endMarker.line;\n\tif (endLine === -1) {\n\t\treturn undefined;\n\t}\n\tconst startLine = Math.max(executedMarker.line, 0);\n\tconst matcher = outputMatcher.lineMatcher;\n\tconst linesToCheck = typeof matcher === 'string' ? 1 : outputMatcher.length || countNewLines(matcher);\n\tconst lines: string[] = [];\n\tlet match: RegExpMatchArray | null | undefined;\n\tif (outputMatcher.anchor === 'bottom') {\n\t\tfor (let i = endLine - (outputMatcher.offset || 0); i >= startLine; i--) {\n\t\t\tlet wrappedLineStart = i;\n\t\t\tconst wrappedLineEnd = i;\n\t\t\twhile (wrappedLineStart >= startLine && buffer.getLine(wrappedLineStart)?.isWrapped) {\n\t\t\t\twrappedLineStart--;\n\t\t\t}\n\t\t\ti = wrappedLineStart;\n\t\t\tlines.unshift(getXtermLineContent(buffer, wrappedLineStart, wrappedLineEnd, cols));\n\t\t\tif (!match) {\n\t\t\t\tmatch = lines[0].match(matcher);\n\t\t\t}\n\t\t\tif (lines.length >= linesToCheck) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor (let i = startLine + (outputMatcher.offset || 0); i < endLine; i++) {\n\t\t\tconst wrappedLineStart = i;\n\t\t\tlet wrappedLineEnd = i;\n\t\t\twhile (wrappedLineEnd + 1 < endLine && buffer.getLine(wrappedLineEnd + 1)?.isWrapped) {\n\t\t\t\twrappedLineEnd++;\n\t\t\t}\n\t\t\ti = wrappedLineEnd;\n\t\t\tlines.push(getXtermLineContent(buffer, wrappedLineStart, wrappedLineEnd, cols));\n\t\t\tif (!match) {\n\t\t\t\tmatch = lines[lines.length - 1].match(matcher);\n\t\t\t}\n\t\t\tif (lines.length >= linesToCheck) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn match ? { regexMatch: match, outputLines: lines } : undefined;\n}\n\nexport function getLinesForCommand(buffer: IBuffer, command: ITerminalCommand, cols: number, outputMatcher?: ITerminalOutputMatcher): string[] | undefined {\n\tif (!outputMatcher) {\n\t\treturn undefined;\n\t}\n\tconst executedMarker = command.executedMarker;\n\tconst endMarker = command.endMarker;\n\tif (!executedMarker || !endMarker) {\n\t\treturn undefined;\n\t}\n\tconst startLine = executedMarker.line;\n\tconst endLine = endMarker.line;\n\n\tconst linesToCheck = outputMatcher.length;\n\tconst lines: string[] = [];\n\tif (outputMatcher.anchor === 'bottom') {\n\t\tfor (let i = endLine - (outputMatcher.offset || 0); i >= startLine; i--) {\n\t\t\tlet wrappedLineStart = i;\n\t\t\tconst wrappedLineEnd = i;\n\t\t\twhile (wrappedLineStart >= startLine && buffer.getLine(wrappedLineStart)?.isWrapped) {\n\t\t\t\twrappedLineStart--;\n\t\t\t}\n\t\t\ti = wrappedLineStart;\n\t\t\tlines.unshift(getXtermLineContent(buffer, wrappedLineStart, wrappedLineEnd, cols));\n\t\t\tif (lines.length > linesToCheck) {\n\t\t\t\tlines.pop();\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor (let i = startLine + (outputMatcher.offset || 0); i < endLine; i++) {\n\t\t\tconst wrappedLineStart = i;\n\t\t\tlet wrappedLineEnd = i;\n\t\t\twhile (wrappedLineEnd + 1 < endLine && buffer.getLine(wrappedLineEnd + 1)?.isWrapped) {\n\t\t\t\twrappedLineEnd++;\n\t\t\t}\n\t\t\ti = wrappedLineEnd;\n\t\t\tlines.push(getXtermLineContent(buffer, wrappedLineStart, wrappedLineEnd, cols));\n\t\t\tif (lines.length === linesToCheck) {\n\t\t\t\tlines.shift();\n\t\t\t}\n\t\t}\n\t}\n\treturn lines;\n}\n\n\nfunction getXtermLineContent(buffer: IBuffer, lineStart: number, lineEnd: number, cols: number): string {\n\t// Cap the maximum number of lines generated to prevent potential performance problems. This is\n\t// more of a sanity check as the wrapped line should already be trimmed down at this point.\n\tconst maxLineLength = Math.max(2048 / cols * 2);\n\tlineEnd = Math.min(lineEnd, lineStart + maxLineLength);\n\tlet content = '';\n\tfor (let i = lineStart; i <= lineEnd; i++) {\n\t\t// Make sure only 0 to cols are considered as resizing when windows mode is enabled will\n\t\t// retain buffer data outside of the terminal width as reflow is disabled.\n\t\tconst line = buffer.getLine(i);\n\t\tif (line) {\n\t\t\tcontent += line.translateToString(true, 0, cols);\n\t\t}\n\t}\n\treturn content;\n}\n\nfunction countNewLines(regex: RegExp): number {\n\tif (!regex.multiline) {\n\t\treturn 1;\n\t}\n\tconst source = regex.source;\n\tlet count = 1;\n\tlet i = source.indexOf('\\\\n');\n\twhile (i !== -1) {\n\t\tcount++;\n\t\ti = source.indexOf('\\\\n', i + 1);\n\t}\n\treturn count;\n}\n"]}