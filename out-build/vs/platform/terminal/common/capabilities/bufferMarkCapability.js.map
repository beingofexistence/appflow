{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/terminal/common/capabilities/bufferMarkCapability.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAShG;;;OAGG;IACH,MAAa,IAAqB,SAAQ,eAAG;QAU5C,YACkB,CAAmB;YAEpC,KAAK,EAAE,CAAC;YAFS,MAAC,GAAD,CAAC,CAAkB;YAT5B,SAAI,kDAA0C;YAE/C,MAAC,GAAsC,IAAI,GAAG,EAAE,CAAC;YACjD,MAAC,GAAyC,IAAI,GAAG,EAAE,CAAC;YAE3C,MAAC,GAAc,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAuB,CAAC,CAAC;YACtE,gBAAW,GAAG,IAAI,CAAC,CAAC,CAAY,KAAK,CAAC;QAM/C,CAAC;QAED,CAAC,OAAO;YACP,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC,CAAc,MAAM,EAAE,EAAE;gBAC7C,MAAM,CAAC,CAAC;aACR;YACD,KAAK,MAAM,CAAC,IAAI,IAAI,CAAC,CAAC,CAAiB,MAAM,EAAE,EAAE;gBAChD,MAAM,CAAC,CAAC;aACR;QACF,CAAC;QAED,OAAO,CAAC,UAA4B;YACnC,MAAM,MAAM,GAAG,UAAU,EAAE,MAAM,IAAI,IAAI,CAAC,CAAC,CAAS,cAAc,EAAE,CAAC;YACrE,MAAM,EAAE,GAAG,UAAU,EAAE,EAAE,CAAC;YAC1B,IAAI,CAAC,MAAM,EAAE;gBACZ,OAAO;aACP;YACD,IAAI,EAAE,EAAE;gBACP,IAAI,CAAC,CAAC,CAAc,GAAG,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;gBACpC,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAc,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;aACvD;iBAAM;gBACN,IAAI,CAAC,CAAC,CAAiB,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;gBAC9C,MAAM,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,CAAiB,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC;aACjE;YACD,IAAI,CAAC,CAAC,CAAY,IAAI,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,EAAE,YAAY,EAAE,UAAU,EAAE,YAAY,EAAE,CAAC,CAAC;QAC5G,CAAC;QAED,OAAO,CAAC,EAAU;YACjB,OAAO,IAAI,CAAC,CAAC,CAAc,GAAG,CAAC,EAAE,CAAC,CAAC;QACpC,CAAC;KACD;IA5CD,oBA4CC","file":"bufferMarkCapability.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IBufferMarkCapability, TerminalCapability, IMarkProperties } from 'vs/platform/terminal/common/capabilities/capabilities';\n// Importing types is safe in any layer\n// eslint-disable-next-line local/code-import-patterns\nimport type { IMarker, Terminal } from 'xterm-headless';\n\n/**\n * Manages \"marks\" in the buffer which are lines that are tracked when lines are added to or removed\n * from the buffer.\n */\nexport class BufferMarkCapability extends Disposable implements IBufferMarkCapability {\n\n\treadonly type = TerminalCapability.BufferMarkDetection;\n\n\tprivate _idToMarkerMap: Map<string, IMarker> = new Map();\n\tprivate _anonymousMarkers: Map<number, IMarker> = new Map();\n\n\tprivate readonly _onMarkAdded = this._register(new Emitter<IMarkProperties>());\n\treadonly onMarkAdded = this._onMarkAdded.event;\n\n\tconstructor(\n\t\tprivate readonly _terminal: Terminal\n\t) {\n\t\tsuper();\n\t}\n\n\t*markers(): IterableIterator<IMarker> {\n\t\tfor (const m of this._idToMarkerMap.values()) {\n\t\t\tyield m;\n\t\t}\n\t\tfor (const m of this._anonymousMarkers.values()) {\n\t\t\tyield m;\n\t\t}\n\t}\n\n\taddMark(properties?: IMarkProperties): void {\n\t\tconst marker = properties?.marker || this._terminal.registerMarker();\n\t\tconst id = properties?.id;\n\t\tif (!marker) {\n\t\t\treturn;\n\t\t}\n\t\tif (id) {\n\t\t\tthis._idToMarkerMap.set(id, marker);\n\t\t\tmarker.onDispose(() => this._idToMarkerMap.delete(id));\n\t\t} else {\n\t\t\tthis._anonymousMarkers.set(marker.id, marker);\n\t\t\tmarker.onDispose(() => this._anonymousMarkers.delete(marker.id));\n\t\t}\n\t\tthis._onMarkAdded.fire({ marker, id, hidden: properties?.hidden, hoverMessage: properties?.hoverMessage });\n\t}\n\n\tgetMark(id: string): IMarker | undefined {\n\t\treturn this._idToMarkerMap.get(id);\n\t}\n}\n"]}