{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/terminal/common/capabilities/cwdDetectionCapability.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,MAAa,IAAuB,SAAQ,eAAG;QAA/C;;YACU,SAAI,2CAAmC;YACxC,MAAC,GAAM,EAAE,CAAC;YACV,MAAC,GAAO,IAAI,GAAG,EAAsC,CAAC;YAS7C,MAAC,GAAiB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAc,CAAC,CAAC;YAChE,mBAAc,GAAG,IAAI,CAAC,CAAC,CAAe,KAAK,CAAC;QAgBtD,CAAC;QAxBA;;WAEG;QACH,IAAI,IAAI;YACP,OAAO,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAK,IAAI,EAAE,CAAC,CAAC;QACtC,CAAC;QAKD,MAAM;YACL,OAAO,IAAI,CAAC,CAAC,CAAI;QAClB,CAAC;QAED,SAAS,CAAC,GAAW;YACpB,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,KAAQ,GAAG,CAAC;YACpC,IAAI,CAAC,CAAC,GAAM,GAAG,CAAC;YAChB,MAAM,KAAK,GAAG,IAAI,CAAC,CAAC,CAAK,GAAG,CAAC,IAAI,CAAC,CAAC,CAAI,IAAI,CAAC,CAAC;YAC7C,IAAI,CAAC,CAAC,CAAK,MAAM,CAAC,IAAI,CAAC,CAAC,CAAI,CAAC,CAAC,iDAAiD;YAC/E,IAAI,CAAC,CAAC,CAAK,GAAG,CAAC,IAAI,CAAC,CAAC,EAAK,KAAK,GAAG,CAAC,CAAC,CAAC;YACrC,IAAI,SAAS,EAAE;gBACd,IAAI,CAAC,CAAC,CAAe,IAAI,CAAC,GAAG,CAAC,CAAC;aAC/B;QACF,CAAC;KACD;IA7BD,oBA6BC","file":"cwdDetectionCapability.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ICwdDetectionCapability, TerminalCapability } from 'vs/platform/terminal/common/capabilities/capabilities';\n\nexport class CwdDetectionCapability extends Disposable implements ICwdDetectionCapability {\n\treadonly type = TerminalCapability.CwdDetection;\n\tprivate _cwd = '';\n\tprivate _cwds = new Map</*cwd*/string, /*frequency*/number>();\n\n\t/**\n\t * Gets the list of cwds seen in this session in order of last accessed.\n\t */\n\tget cwds(): string[] {\n\t\treturn Array.from(this._cwds.keys());\n\t}\n\n\tprivate readonly _onDidChangeCwd = this._register(new Emitter<string>());\n\treadonly onDidChangeCwd = this._onDidChangeCwd.event;\n\n\tgetCwd(): string {\n\t\treturn this._cwd;\n\t}\n\n\tupdateCwd(cwd: string): void {\n\t\tconst didChange = this._cwd !== cwd;\n\t\tthis._cwd = cwd;\n\t\tconst count = this._cwds.get(this._cwd) || 0;\n\t\tthis._cwds.delete(this._cwd); // Delete to put it at the bottom of the iterable\n\t\tthis._cwds.set(this._cwd, count + 1);\n\t\tif (didChange) {\n\t\t\tthis._onDidChangeCwd.fire(cwd);\n\t\t}\n\t}\n}\n"]}