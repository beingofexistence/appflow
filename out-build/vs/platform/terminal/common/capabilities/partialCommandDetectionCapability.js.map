{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/terminal/common/capabilities/partialCommandDetectionCapability.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAShG,IAAW,SAKV;IALD,WAAW,SAAS;QACnB;;WAEG;QACH,uEAAuB,CAAA;IACxB,CAAC,EALU,SAAS,KAAT,SAAS,QAKnB;IAED;;;OAGG;IACH,MAAa,IAAkC,SAAQ,eAAG;QAKzD,IAAI,QAAQ,KAAyB,OAAO,IAAI,CAAC,CAAC,CAAS,CAAC,CAAC;QAK7D,YACkB,CAAmB;YAEpC,KAAK,EAAE,CAAC;YAFS,MAAC,GAAD,CAAC,CAAkB;YAV5B,SAAI,sDAA8C;YAE1C,MAAC,GAAsB,EAAE,CAAC;YAI1B,MAAC,GAAoB,IAAI,CAAC,GAAG,CAAC,IAAI,WAAG,EAAe,CAAC,CAAC;YAC9D,sBAAiB,GAAG,IAAI,CAAC,CAAC,CAAkB,KAAK,CAAC;YAM1D,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAS,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAO,CAAC,CAAC,CAAC,CAAC,CAAC;YACtD,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAS,MAAM,CAAC,kBAAkB,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE,MAAM,CAAC,EAAE;gBAC1E,IAAI,MAAM,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE;oBAC/D,IAAI,CAAC,CAAC,EAAyB,CAAC;iBAChC;gBACD,wEAAwE;gBACxE,OAAO,KAAK,CAAC;YACd,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAEO,CAAC,CAAO,IAAY;YAC3B,IAAI,IAAI,KAAK,MAAM,EAAE;gBACpB,IAAI,CAAC,CAAC,EAAS,CAAC;aAChB;QACF,CAAC;QAEO,CAAC;YACR,IAAI,CAAC,IAAI,CAAC,CAAC,EAAU;gBACpB,OAAO;aACP;YACD,IAAI,IAAI,CAAC,CAAC,CAAS,MAAM,CAAC,MAAM,CAAC,OAAO,yCAAiC,EAAE;gBAC1E,MAAM,MAAM,GAAG,IAAI,CAAC,CAAC,CAAS,cAAc,CAAC,CAAC,CAAC,CAAC;gBAChD,IAAI,MAAM,EAAE;oBACX,IAAI,CAAC,CAAC,CAAS,IAAI,CAAC,MAAM,CAAC,CAAC;oBAC5B,IAAI,CAAC,CAAC,CAAkB,IAAI,CAAC,MAAM,CAAC,CAAC;iBACrC;aACD;QACF,CAAC;QAEO,CAAC;YACR,wFAAwF;YACxF,IAAI,KAAK,GAAG,CAAC,CAAC;YACd,KAAK,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC,CAAS,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;gBACpD,IAAI,IAAI,CAAC,CAAC,CAAS,CAAC,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAS,MAAM,CAAC,MAAM,CAAC,KAAK,EAAE;oBAChE,MAAM;iBACN;gBACD,KAAK,EAAE,CAAC;aACR;YACD,cAAc;YACd,IAAI,CAAC,CAAC,CAAS,MAAM,CAAC,IAAI,CAAC,CAAC,CAAS,MAAM,GAAG,KAAK,EAAE,KAAK,CAAC,CAAC;QAC7D,CAAC;KACD;IAvDD,oBAuDC","file":"partialCommandDetectionCapability.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter } from 'vs/base/common/event';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { IPartialCommandDetectionCapability, TerminalCapability } from 'vs/platform/terminal/common/capabilities/capabilities';\n// Importing types is safe in any layer\n// eslint-disable-next-line local/code-import-patterns\nimport type { IMarker, Terminal } from 'xterm-headless';\n\nconst enum Constants {\n\t/**\n\t * The minimum size of the prompt in which to assume the line is a command.\n\t */\n\tMinimumPromptLength = 2\n}\n\n/**\n * This capability guesses where commands are based on where the cursor was when enter was pressed.\n * It's very hit or miss but it's often correct and better than nothing.\n */\nexport class PartialCommandDetectionCapability extends DisposableStore implements IPartialCommandDetectionCapability {\n\treadonly type = TerminalCapability.PartialCommandDetection;\n\n\tprivate readonly _commands: IMarker[] = [];\n\n\tget commands(): readonly IMarker[] { return this._commands; }\n\n\tprivate readonly _onCommandFinished = this.add(new Emitter<IMarker>());\n\treadonly onCommandFinished = this._onCommandFinished.event;\n\n\tconstructor(\n\t\tprivate readonly _terminal: Terminal,\n\t) {\n\t\tsuper();\n\t\tthis.add(this._terminal.onData(e => this._onData(e)));\n\t\tthis.add(this._terminal.parser.registerCsiHandler({ final: 'J' }, params => {\n\t\t\tif (params.length >= 1 && (params[0] === 2 || params[0] === 3)) {\n\t\t\t\tthis._clearCommandsInViewport();\n\t\t\t}\n\t\t\t// We don't want to override xterm.js' default behavior, just augment it\n\t\t\treturn false;\n\t\t}));\n\t}\n\n\tprivate _onData(data: string): void {\n\t\tif (data === '\\x0d') {\n\t\t\tthis._onEnter();\n\t\t}\n\t}\n\n\tprivate _onEnter(): void {\n\t\tif (!this._terminal) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._terminal.buffer.active.cursorX >= Constants.MinimumPromptLength) {\n\t\t\tconst marker = this._terminal.registerMarker(0);\n\t\t\tif (marker) {\n\t\t\t\tthis._commands.push(marker);\n\t\t\t\tthis._onCommandFinished.fire(marker);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _clearCommandsInViewport(): void {\n\t\t// Find the number of commands on the tail end of the array that are within the viewport\n\t\tlet count = 0;\n\t\tfor (let i = this._commands.length - 1; i >= 0; i--) {\n\t\t\tif (this._commands[i].line < this._terminal.buffer.active.baseY) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcount++;\n\t\t}\n\t\t// Remove them\n\t\tthis._commands.splice(this._commands.length - count, count);\n\t}\n}\n"]}