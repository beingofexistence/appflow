{"version":3,"sources":["vs/platform/terminal/common/terminalLogService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAWzF,IAAM,IAAI,GAAV,MAAM,IAAmB,SAAQ,eAAG;QAQ1C,IAAI,mBAAmB,KAAsB,OAAO,IAAI,CAAC,CAAC,CAAO,mBAAmB,CAAC,CAAC,CAAC;QAEvF,YACkC,CAAmB,EAC1B,uBAA4B,EACjC,kBAAuB;YAE5C,KAAK,EAAE,CAAC;YAJyB,MAAC,GAAD,CAAC,CAAkB;YAKpD,IAAI,CAAC,CAAC,GAAS,IAAI,CAAC,CAAC,CAAc,YAAY,CAAC,IAAA,eAAG,EAAM,kBAAkB,CAAC,QAAQ,EAAE,cAAc,CAAC,EAAE,EAAE,EAAE,EAAE,UAAU,EAAE,IAAI,EAAE,IAAA,cAAQ,EAAC,CAAoB,EAAE,IAAU,CAAC,EAAE,CAAC,CAAC;YAC7K,IAAI,CAAC,CAAC,CAAS,aAAK,CAAC,eAAe,CAAC,uBAAuB,CAAC,2BAA2B,EAAE,GAAG,EAAE;gBAC9F,IAAI,CAAC,CAAC,GAAc,uBAAuB,CAAC,YAAY,EAAE,CAAC,EAAE,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YAC/E,CAAC,CAAC,CAAC,CAAC;QACL,CAAC;QAED,QAAQ,KAAe,OAAO,IAAI,CAAC,CAAC,CAAO,QAAQ,EAAE,CAAC,CAAC,CAAC;QACxD,QAAQ,CAAC,KAAe,IAAU,IAAI,CAAC,CAAC,CAAO,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACjE,KAAK,KAAW,IAAI,CAAC,CAAC,CAAO,KAAK,EAAE,CAAC,CAAC,CAAC;QAEvC,KAAK,CAAC,OAAe,EAAE,GAAG,IAAW,IAAU,IAAI,CAAC,CAAC,CAAO,KAAK,CAAC,IAAI,CAAC,CAAC,CAAc,OAAO,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;QACxG,KAAK,CAAC,OAAe,EAAE,GAAG,IAAW,IAAU,IAAI,CAAC,CAAC,CAAO,KAAK,CAAC,IAAI,CAAC,CAAC,CAAc,OAAO,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;QACxG,IAAI,CAAC,OAAe,EAAE,GAAG,IAAW,IAAU,IAAI,CAAC,CAAC,CAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAc,OAAO,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;QACtG,IAAI,CAAC,OAAe,EAAE,GAAG,IAAW,IAAU,IAAI,CAAC,CAAC,CAAO,IAAI,CAAC,IAAI,CAAC,CAAC,CAAc,OAAO,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;QACtG,KAAK,CAAC,OAAuB,EAAE,GAAG,IAAW;YAC5C,IAAI,OAAO,YAAY,KAAK,EAAE;gBAC7B,IAAI,CAAC,CAAC,CAAO,KAAK,CAAC,IAAI,CAAC,CAAC,CAAc,EAAE,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;gBAC3D,OAAO;aACP;YACD,IAAI,CAAC,CAAC,CAAO,KAAK,CAAC,IAAI,CAAC,CAAC,CAAc,OAAO,CAAC,EAAE,IAAI,CAAC,CAAC;QACxD,CAAC;QAEO,CAAC,CAAc,OAAe;YACrC,IAAI,IAAI,CAAC,CAAC,CAAO,QAAQ,EAAE,KAAK,cAAQ,CAAC,KAAK,EAAE;gBAC/C,OAAO,IAAI,IAAI,CAAC,CAAC,KAAgB,OAAO,EAAE,CAAC;aAC3C;YACD,OAAO,OAAO,CAAC;QAChB,CAAC;KACD,CAAA;IA5CY,oBAAI;mBAAJ,IAAI;QAWd,WAAA,SAAG,CAAA;QACH,WAAA,eAAG,CAAA;QACH,WAAA,iBAAG,CAAA;OAbO,IAAI,CA4ChB","file":"terminalLogService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { Event } from 'vs/base/common/event';\nimport { localize } from 'vs/nls';\nimport { ILogger, ILoggerService, LogLevel } from 'vs/platform/log/common/log';\nimport { ITerminalLogService } from 'vs/platform/terminal/common/terminal';\nimport { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { joinPath } from 'vs/base/common/resources';\n\nexport class TerminalLogService extends Disposable implements ITerminalLogService {\n\tdeclare _serviceBrand: undefined;\n\tdeclare _logBrand: undefined;\n\n\tprivate readonly _logger: ILogger;\n\n\tprivate _workspaceId!: string;\n\n\tget onDidChangeLogLevel(): Event<LogLevel> { return this._logger.onDidChangeLogLevel; }\n\n\tconstructor(\n\t\t@ILoggerService private readonly _loggerService: ILoggerService,\n\t\t@IWorkspaceContextService workspaceContextService: IWorkspaceContextService,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t) {\n\t\tsuper();\n\t\tthis._logger = this._loggerService.createLogger(joinPath(environmentService.logsHome, 'terminal.log'), { id: 'terminal', name: localize('terminalLoggerName', 'Terminal') });\n\t\tthis._register(Event.runAndSubscribe(workspaceContextService.onDidChangeWorkspaceFolders, () => {\n\t\t\tthis._workspaceId = workspaceContextService.getWorkspace().id.substring(0, 7);\n\t\t}));\n\t}\n\n\tgetLevel(): LogLevel { return this._logger.getLevel(); }\n\tsetLevel(level: LogLevel): void { this._logger.setLevel(level); }\n\tflush(): void { this._logger.flush(); }\n\n\ttrace(message: string, ...args: any[]): void { this._logger.trace(this._formatMessage(message), args); }\n\tdebug(message: string, ...args: any[]): void { this._logger.debug(this._formatMessage(message), args); }\n\tinfo(message: string, ...args: any[]): void { this._logger.info(this._formatMessage(message), args); }\n\twarn(message: string, ...args: any[]): void { this._logger.warn(this._formatMessage(message), args); }\n\terror(message: string | Error, ...args: any[]): void {\n\t\tif (message instanceof Error) {\n\t\t\tthis._logger.error(this._formatMessage(''), message, args);\n\t\t\treturn;\n\t\t}\n\t\tthis._logger.error(this._formatMessage(message), args);\n\t}\n\n\tprivate _formatMessage(message: string): string {\n\t\tif (this._logger.getLevel() === LogLevel.Trace) {\n\t\t\treturn `[${this._workspaceId}] ${message}`;\n\t\t}\n\t\treturn message;\n\t}\n}\n"]}