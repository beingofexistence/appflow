{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/dialogs/test/common/testDialogService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAMhG,MAAa,IAAI;QAOhB,YAAoB,IAAwD,SAAS;YAAjE,MAAC,GAAD,CAAC,CAAgE;YAH5E,qBAAgB,GAAG,aAAK,CAAC,IAAI,CAAC;YAC9B,oBAAe,GAAG,aAAK,CAAC,IAAI,CAAC;YAI9B,MAAC,GAAgD,SAAS,CAAC;QAFsB,CAAC;QAG1F,gBAAgB,CAAC,MAA2B;YAC3C,IAAI,CAAC,CAAC,GAAe,MAAM,CAAC;QAC7B,CAAC;QAED,KAAK,CAAC,OAAO,CAAC,YAA2B;YACxC,IAAI,IAAI,CAAC,CAAC,EAAc;gBACvB,MAAM,aAAa,GAAG,IAAI,CAAC,CAAC,CAAa;gBACzC,IAAI,CAAC,CAAC,GAAe,SAAS,CAAC;gBAE/B,OAAO,aAAa,CAAC;aACrB;YAED,OAAO,IAAI,CAAC,CAAC,IAAuB,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;QAC1D,CAAC;QAKD,KAAK,CAAC,MAAM,CAAI,MAA+C;YAC9D,MAAM,aAAa,GAA2B,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,CAAC;YAC1E,IAAI,MAAM,CAAC,YAAY,IAAI,OAAO,MAAM,CAAC,YAAY,KAAK,QAAQ,IAAI,OAAO,MAAM,CAAC,YAAY,KAAK,SAAS,EAAE;gBAC/G,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;aACxC;YAED,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,eAAe,EAAE,KAAK,EAAE,CAAC,EAAE,CAAC;QAC5E,CAAC;QACD,KAAK,CAAC,IAAI,CAAC,OAAe,EAAE,MAAe;YAC1C,MAAM,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,kBAAQ,CAAC,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;QAC7D,CAAC;QAED,KAAK,CAAC,IAAI,CAAC,OAAe,EAAE,MAAe;YAC1C,MAAM,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,kBAAQ,CAAC,OAAO,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;QAChE,CAAC;QAED,KAAK,CAAC,KAAK,CAAC,OAAe,EAAE,MAAe;YAC3C,MAAM,IAAI,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,kBAAQ,CAAC,KAAK,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;QAC9D,CAAC;QACD,KAAK,CAAC,KAAK,KAA4B;YAAE,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC;SAAE,CAAC,CAAC;QACpF,KAAK,CAAC,KAAK,KAAoB,CAAC;KAChC;IAjDD,oBAiDC","file":"testDialogService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport Severity from 'vs/base/common/severity';\nimport { IConfirmation, IConfirmationResult, IDialogService, IInputResult, IPrompt, IPromptBaseButton, IPromptResult, IPromptResultWithCancel, IPromptWithCustomCancel, IPromptWithDefaultCancel } from 'vs/platform/dialogs/common/dialogs';\n\nexport class TestDialogService implements IDialogService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\treadonly onWillShowDialog = Event.None;\n\treadonly onDidShowDialog = Event.None;\n\n\tconstructor(private defaultConfirmResult: IConfirmationResult | undefined = undefined) { }\n\n\tprivate confirmResult: IConfirmationResult | undefined = undefined;\n\tsetConfirmResult(result: IConfirmationResult) {\n\t\tthis.confirmResult = result;\n\t}\n\n\tasync confirm(confirmation: IConfirmation): Promise<IConfirmationResult> {\n\t\tif (this.confirmResult) {\n\t\t\tconst confirmResult = this.confirmResult;\n\t\t\tthis.confirmResult = undefined;\n\n\t\t\treturn confirmResult;\n\t\t}\n\n\t\treturn this.defaultConfirmResult ?? { confirmed: false };\n\t}\n\n\tprompt<T>(prompt: IPromptWithCustomCancel<T>): Promise<IPromptResultWithCancel<T>>;\n\tprompt<T>(prompt: IPromptWithDefaultCancel<T>): Promise<IPromptResult<T>>;\n\tprompt<T>(prompt: IPrompt<T>): Promise<IPromptResult<T>>;\n\tasync prompt<T>(prompt: IPrompt<T> | IPromptWithCustomCancel<T>): Promise<IPromptResult<T> | IPromptResultWithCancel<T>> {\n\t\tconst promptButtons: IPromptBaseButton<T>[] = [...(prompt.buttons ?? [])];\n\t\tif (prompt.cancelButton && typeof prompt.cancelButton !== 'string' && typeof prompt.cancelButton !== 'boolean') {\n\t\t\tpromptButtons.push(prompt.cancelButton);\n\t\t}\n\n\t\treturn { result: await promptButtons[0]?.run({ checkboxChecked: false }) };\n\t}\n\tasync info(message: string, detail?: string): Promise<void> {\n\t\tawait this.prompt({ type: Severity.Info, message, detail });\n\t}\n\n\tasync warn(message: string, detail?: string): Promise<void> {\n\t\tawait this.prompt({ type: Severity.Warning, message, detail });\n\t}\n\n\tasync error(message: string, detail?: string): Promise<void> {\n\t\tawait this.prompt({ type: Severity.Error, message, detail });\n\t}\n\tasync input(): Promise<IInputResult> { { return { confirmed: true, values: [] }; } }\n\tasync about(): Promise<void> { }\n}\n"]}