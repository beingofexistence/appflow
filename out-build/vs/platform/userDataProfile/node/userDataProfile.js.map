{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/userDataProfile/node/userDataProfile.ts"],"names":[],"mappings":"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","file":"userDataProfile.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI, UriComponents, UriDto } from 'vs/base/common/uri';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IStateReadService, IStateService } from 'vs/platform/state/node/state';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { IUserDataProfilesService, UserDataProfilesService as BaseUserDataProfilesService, StoredUserDataProfile, StoredProfileAssociations } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { IStringDictionary } from 'vs/base/common/collections';\nimport { isString } from 'vs/base/common/types';\nimport { SaveStrategy, StateService } from 'vs/platform/state/node/stateService';\n\ntype StoredUserDataProfileState = StoredUserDataProfile & { location: URI | string };\n\nexport class UserDataProfilesReadonlyService extends BaseUserDataProfilesService implements IUserDataProfilesService {\n\n\tprotected static readonly PROFILE_ASSOCIATIONS_MIGRATION_KEY = 'profileAssociationsMigration';\n\n\tconstructor(\n\t\t@IStateReadService private readonly stateReadonlyService: IStateReadService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@INativeEnvironmentService private readonly nativeEnvironmentService: INativeEnvironmentService,\n\t\t@IFileService fileService: IFileService,\n\t\t@ILogService logService: ILogService,\n\t) {\n\t\tsuper(nativeEnvironmentService, fileService, uriIdentityService, logService);\n\t}\n\n\tprotected override getStoredProfiles(): StoredUserDataProfile[] {\n\t\tconst storedProfilesState = this.stateReadonlyService.getItem<UriDto<StoredUserDataProfileState>[]>(UserDataProfilesReadonlyService.PROFILES_KEY, []);\n\t\treturn storedProfilesState.map(p => ({ ...p, location: isString(p.location) ? this.uriIdentityService.extUri.joinPath(this.profilesHome, p.location) : URI.revive(p.location) }));\n\t}\n\n\tprotected override getStoredProfileAssociations(): StoredProfileAssociations {\n\t\tconst associations = this.stateReadonlyService.getItem<StoredProfileAssociations>(UserDataProfilesReadonlyService.PROFILE_ASSOCIATIONS_KEY, {});\n\t\tconst migrated = this.stateReadonlyService.getItem<boolean>(UserDataProfilesReadonlyService.PROFILE_ASSOCIATIONS_MIGRATION_KEY, false);\n\t\treturn migrated ? associations : this.migrateStoredProfileAssociations(associations);\n\t}\n\n\tprotected override getDefaultProfileExtensionsLocation(): URI {\n\t\treturn this.uriIdentityService.extUri.joinPath(URI.file(this.nativeEnvironmentService.extensionsPath).with({ scheme: this.profilesHome.scheme }), 'extensions.json');\n\t}\n\n}\n\nexport class UserDataProfilesService extends UserDataProfilesReadonlyService implements IUserDataProfilesService {\n\n\tconstructor(\n\t\t@IStateService protected readonly stateService: IStateService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@INativeEnvironmentService environmentService: INativeEnvironmentService,\n\t\t@IFileService fileService: IFileService,\n\t\t@ILogService logService: ILogService,\n\t) {\n\t\tsuper(stateService, uriIdentityService, environmentService, fileService, logService);\n\t}\n\n\tprotected override saveStoredProfiles(storedProfiles: StoredUserDataProfile[]): void {\n\t\tif (storedProfiles.length) {\n\t\t\tthis.stateService.setItem(UserDataProfilesService.PROFILES_KEY, storedProfiles.map(profile => ({ ...profile, location: this.uriIdentityService.extUri.basename(profile.location) })));\n\t\t} else {\n\t\t\tthis.stateService.removeItem(UserDataProfilesService.PROFILES_KEY);\n\t\t}\n\t}\n\n\tprotected override getStoredProfiles(): StoredUserDataProfile[] {\n\t\tconst storedProfiles = super.getStoredProfiles();\n\t\tif (!this.stateService.getItem<boolean>('userDataProfilesMigration', false)) {\n\t\t\tthis.saveStoredProfiles(storedProfiles);\n\t\t\tthis.stateService.setItem('userDataProfilesMigration', true);\n\t\t}\n\t\treturn storedProfiles;\n\t}\n\n\tprotected override saveStoredProfileAssociations(storedProfileAssociations: StoredProfileAssociations): void {\n\t\tif (storedProfileAssociations.emptyWindows || storedProfileAssociations.workspaces) {\n\t\t\tthis.stateService.setItem(UserDataProfilesService.PROFILE_ASSOCIATIONS_KEY, storedProfileAssociations);\n\t\t} else {\n\t\t\tthis.stateService.removeItem(UserDataProfilesService.PROFILE_ASSOCIATIONS_KEY);\n\t\t}\n\t}\n\n\tprotected override getStoredProfileAssociations(): StoredProfileAssociations {\n\t\tconst oldKey = 'workspaceAndProfileInfo';\n\t\tconst storedWorkspaceInfos = this.stateService.getItem<{ workspace: UriComponents; profile: UriComponents }[]>(oldKey, undefined);\n\t\tif (storedWorkspaceInfos) {\n\t\t\tthis.stateService.removeItem(oldKey);\n\t\t\tconst workspaces = storedWorkspaceInfos.reduce<IStringDictionary<string>>((result, { workspace, profile }) => {\n\t\t\t\tresult[URI.revive(workspace).toString()] = URI.revive(profile).toString();\n\t\t\t\treturn result;\n\t\t\t}, {});\n\t\t\tthis.stateService.setItem(UserDataProfilesService.PROFILE_ASSOCIATIONS_KEY, <StoredProfileAssociations>{ workspaces });\n\t\t}\n\t\tconst associations = super.getStoredProfileAssociations();\n\t\tif (!this.stateService.getItem<boolean>(UserDataProfilesService.PROFILE_ASSOCIATIONS_MIGRATION_KEY, false)) {\n\t\t\tthis.saveStoredProfileAssociations(associations);\n\t\t\tthis.stateService.setItem(UserDataProfilesService.PROFILE_ASSOCIATIONS_MIGRATION_KEY, true);\n\t\t}\n\t\treturn associations;\n\t}\n}\n\nexport class ServerUserDataProfilesService extends UserDataProfilesService implements IUserDataProfilesService {\n\n\tconstructor(\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@INativeEnvironmentService environmentService: INativeEnvironmentService,\n\t\t@IFileService fileService: IFileService,\n\t\t@ILogService logService: ILogService,\n\t) {\n\t\tsuper(new StateService(SaveStrategy.IMMEDIATE, environmentService, logService, fileService), uriIdentityService, environmentService, fileService, logService);\n\t}\n\n\toverride async init(): Promise<void> {\n\t\tawait (this.stateService as StateService).init();\n\t\treturn super.init();\n\t}\n\n}\n"]}