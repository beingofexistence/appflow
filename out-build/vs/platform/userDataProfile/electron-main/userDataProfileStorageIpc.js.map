{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/userDataProfile/electron-main/userDataProfileStorageIpc.ts"],"names":[],"mappings":"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","file":"userDataProfileStorageIpc.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, DisposableStore, IDisposable, MutableDisposable } from 'vs/base/common/lifecycle';\nimport { IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IProfileStorageChanges, IProfileStorageValueChanges } from 'vs/platform/userDataProfile/common/userDataProfileStorageService';\nimport { loadKeyTargets, StorageScope, TARGET_KEY } from 'vs/platform/storage/common/storage';\nimport { IBaseSerializableStorageRequest } from 'vs/platform/storage/common/storageIpc';\nimport { IStorageMain } from 'vs/platform/storage/electron-main/storageMain';\nimport { IStorageMainService } from 'vs/platform/storage/electron-main/storageMainService';\nimport { IUserDataProfile, IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\n\nexport class ProfileStorageChangesListenerChannel extends Disposable implements IServerChannel {\n\n\tprivate readonly _onDidChange: Emitter<IProfileStorageChanges>;\n\n\tconstructor(\n\t\tprivate readonly storageMainService: IStorageMainService,\n\t\tprivate readonly userDataProfilesService: IUserDataProfilesService,\n\t\tprivate readonly logService: ILogService\n\t) {\n\t\tsuper();\n\t\tconst disposable = this._register(new MutableDisposable<IDisposable>());\n\t\tthis._onDidChange = this._register(new Emitter<IProfileStorageChanges>(\n\t\t\t{\n\t\t\t\t// Start listening to profile storage changes only when someone is listening\n\t\t\t\tonWillAddFirstListener: () => disposable.value = this.registerStorageChangeListeners(),\n\t\t\t\t// Stop listening to profile storage changes when no one is listening\n\t\t\t\tonDidRemoveLastListener: () => disposable.value = undefined\n\t\t\t}\n\t\t));\n\t}\n\n\tprivate registerStorageChangeListeners(): IDisposable {\n\t\tthis.logService.debug('ProfileStorageChangesListenerChannel#registerStorageChangeListeners');\n\t\tconst disposables = new DisposableStore();\n\t\tdisposables.add(Event.debounce(this.storageMainService.applicationStorage.onDidChangeStorage, (keys: string[] | undefined, e) => {\n\t\t\tif (keys) {\n\t\t\t\tkeys.push(e.key);\n\t\t\t} else {\n\t\t\t\tkeys = [e.key];\n\t\t\t}\n\t\t\treturn keys;\n\t\t}, 100)(keys => this.onDidChangeApplicationStorage(keys)));\n\t\tdisposables.add(Event.debounce(this.storageMainService.onDidChangeProfileStorage, (changes: Map<string, { profile: IUserDataProfile; keys: string[]; storage: IStorageMain }> | undefined, e) => {\n\t\t\tif (!changes) {\n\t\t\t\tchanges = new Map<string, { profile: IUserDataProfile; keys: string[]; storage: IStorageMain }>();\n\t\t\t}\n\t\t\tlet profileChanges = changes.get(e.profile.id);\n\t\t\tif (!profileChanges) {\n\t\t\t\tchanges.set(e.profile.id, profileChanges = { profile: e.profile, keys: [], storage: e.storage });\n\t\t\t}\n\t\t\tprofileChanges.keys.push(e.key);\n\t\t\treturn changes;\n\t\t}, 100)(keys => this.onDidChangeProfileStorage(keys)));\n\t\treturn disposables;\n\t}\n\n\tprivate onDidChangeApplicationStorage(keys: string[]): void {\n\t\tconst targetChangedProfiles: IUserDataProfile[] = keys.includes(TARGET_KEY) ? [this.userDataProfilesService.defaultProfile] : [];\n\t\tconst profileStorageValueChanges: IProfileStorageValueChanges[] = [];\n\t\tkeys = keys.filter(key => key !== TARGET_KEY);\n\t\tif (keys.length) {\n\t\t\tconst keyTargets = loadKeyTargets(this.storageMainService.applicationStorage.storage);\n\t\t\tprofileStorageValueChanges.push({ profile: this.userDataProfilesService.defaultProfile, changes: keys.map(key => ({ key, scope: StorageScope.PROFILE, target: keyTargets[key] })) });\n\t\t}\n\t\tthis.triggerEvents(targetChangedProfiles, profileStorageValueChanges);\n\t}\n\n\tprivate onDidChangeProfileStorage(changes: Map<string, { profile: IUserDataProfile; keys: string[]; storage: IStorageMain }>): void {\n\t\tconst targetChangedProfiles: IUserDataProfile[] = [];\n\t\tconst profileStorageValueChanges = new Map<string, IProfileStorageValueChanges>();\n\t\tfor (const [profileId, profileChanges] of changes.entries()) {\n\t\t\tif (profileChanges.keys.includes(TARGET_KEY)) {\n\t\t\t\ttargetChangedProfiles.push(profileChanges.profile);\n\t\t\t}\n\t\t\tconst keys = profileChanges.keys.filter(key => key !== TARGET_KEY);\n\t\t\tif (keys.length) {\n\t\t\t\tconst keyTargets = loadKeyTargets(profileChanges.storage.storage);\n\t\t\t\tprofileStorageValueChanges.set(profileId, { profile: profileChanges.profile, changes: keys.map(key => ({ key, scope: StorageScope.PROFILE, target: keyTargets[key] })) });\n\t\t\t}\n\t\t}\n\t\tthis.triggerEvents(targetChangedProfiles, [...profileStorageValueChanges.values()]);\n\t}\n\n\tprivate triggerEvents(targetChanges: IUserDataProfile[], valueChanges: IProfileStorageValueChanges[]): void {\n\t\tif (targetChanges.length || valueChanges.length) {\n\t\t\tthis._onDidChange.fire({ valueChanges, targetChanges });\n\t\t}\n\t}\n\n\tlisten(_: unknown, event: string, arg: IBaseSerializableStorageRequest): Event<any> {\n\t\tswitch (event) {\n\t\t\tcase 'onDidChange': return this._onDidChange.event;\n\t\t}\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\tasync call(_: unknown, command: string): Promise<any> {\n\t\tthrow new Error(`Call not found: ${command}`);\n\t}\n\n}\n"]}