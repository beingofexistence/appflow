{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/userDataProfile/electron-main/userDataProfile.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAanF,QAAA,IAAI,GAA2B,IAAA,mBAAG,EAA4E,qBAAG,CAAsB,CAAC;IAS9I,IAAM,IAAI,GAAV,MAAM,IAA4B,SAAQ,qBAAG;QAEnD,YACgB,YAAiB,EACX,kBAAuB,EACjB,kBAAuB,EACpC,WAAgB,EACjB,UAAe;YAE5B,KAAK,CAAC,YAAY,EAAE,kBAAkB,EAAE,kBAAkB,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC;QACtF,CAAC;QAED,yBAAyB;YACxB,MAAM,YAAY,GAAgC,EAAE,CAAC;YACrD,KAAK,MAAM,EAAE,IAAI,IAAI,CAAC,CAAC,CAAc,YAAY,CAAC,IAAI,EAAE,EAAE;gBACzD,YAAY,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;aAC1B;YACD,OAAO,YAAY,CAAC;QACrB,CAAC;KAED,CAAA;IApBY,oBAAI;mBAAJ,IAAI;QAGd,WAAA,WAAG,CAAA;QACH,WAAA,iBAAG,CAAA;QACH,WAAA,iBAAG,CAAA;QACH,WAAA,WAAG,CAAA;QACH,WAAA,SAAG,CAAA;OAPO,IAAI,CAoBhB","file":"userDataProfile.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { refineServiceDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { IUserDataProfilesService, WillCreateProfileEvent, WillRemoveProfileEvent, IUserDataProfile } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { UserDataProfilesService } from 'vs/platform/userDataProfile/node/userDataProfile';\nimport { IAnyWorkspaceIdentifier, IEmptyWorkspaceIdentifier } from 'vs/platform/workspace/common/workspace';\nimport { IStateService } from 'vs/platform/state/node/state';\n\nexport const IUserDataProfilesMainService = refineServiceDecorator<IUserDataProfilesService, IUserDataProfilesMainService>(IUserDataProfilesService);\nexport interface IUserDataProfilesMainService extends IUserDataProfilesService {\n\tgetProfileForWorkspace(workspaceIdentifier: IAnyWorkspaceIdentifier): IUserDataProfile | undefined;\n\tunsetWorkspace(workspaceIdentifier: IAnyWorkspaceIdentifier, transient?: boolean): void;\n\tgetAssociatedEmptyWindows(): IEmptyWorkspaceIdentifier[];\n\treadonly onWillCreateProfile: Event<WillCreateProfileEvent>;\n\treadonly onWillRemoveProfile: Event<WillRemoveProfileEvent>;\n}\n\nexport class UserDataProfilesMainService extends UserDataProfilesService implements IUserDataProfilesMainService {\n\n\tconstructor(\n\t\t@IStateService stateService: IStateService,\n\t\t@IUriIdentityService uriIdentityService: IUriIdentityService,\n\t\t@INativeEnvironmentService environmentService: INativeEnvironmentService,\n\t\t@IFileService fileService: IFileService,\n\t\t@ILogService logService: ILogService,\n\t) {\n\t\tsuper(stateService, uriIdentityService, environmentService, fileService, logService);\n\t}\n\n\tgetAssociatedEmptyWindows(): IEmptyWorkspaceIdentifier[] {\n\t\tconst emptyWindows: IEmptyWorkspaceIdentifier[] = [];\n\t\tfor (const id of this.profilesObject.emptyWindows.keys()) {\n\t\t\temptyWindows.push({ id });\n\t\t}\n\t\treturn emptyWindows;\n\t}\n\n}\n"]}