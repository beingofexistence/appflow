{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/userDataProfile/electron-main/userDataProfilesHandler.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAUzF,IAAM,IAAI,GAAV,MAAM,IAAwB,SAAQ,eAAG;QAE/C,YACwB,oBAA0B,EACF,CAA6B,EACtC,CAAwB;YAE9D,KAAK,EAAE,CAAC;YAHuC,MAAC,GAAD,CAAC,CAA4B;YACtC,MAAC,GAAD,CAAC,CAAuB;YAG9D,IAAI,CAAC,CAAC,CAAS,oBAAoB,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE;gBACxD,IAAI,CAAC,CAAC,MAAM,4BAAoB,EAAE;oBACjC,IAAI,CAAC,CAAC,CAAwB,CAAC,CAAC,MAAM,CAAC,CAAC;iBACxC;YACF,CAAC,CAAC,CAAC,CAAC;YACJ,IAAI,CAAC,CAAC,CAAS,oBAAoB,CAAC,mBAAmB,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAwB,MAAM,CAAC,CAAC,CAAC,CAAC;YAC1G,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,CAAc,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,EAA+B,EAAE,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;QACzH,CAAC;QAEO,KAAK,CAAC,CAAC,CAAwB,MAAmB;YACzD,MAAM,SAAS,GAAG,IAAI,CAAC,CAAC,CAAY,MAAM,CAAC,CAAC;YAC5C,MAAM,OAAO,GAAG,IAAI,CAAC,CAAC,CAAuB,sBAAsB,CAAC,SAAS,CAAC,CAAC;YAC/E,IAAI,OAAO,EAAE,WAAW,EAAE;gBACzB,IAAI,CAAC,CAAC,CAAuB,cAAc,CAAC,SAAS,EAAE,OAAO,CAAC,WAAW,CAAC,CAAC;gBAC5E,IAAI,OAAO,CAAC,WAAW,EAAE;oBACxB,MAAM,IAAI,CAAC,CAAC,CAAuB,wBAAwB,EAAE,CAAC;iBAC9D;aACD;QACF,CAAC;QAEO,CAAC,CAAY,MAAmB;YACvC,OAAO,MAAM,CAAC,eAAe,IAAI,IAAA,eAAG,EAAmB,MAAM,CAAC,UAAU,EAAE,MAAM,CAAC,0BAA0B,CAAC,CAAC;QAC9G,CAAC;QAEO,CAAC;YACR,MAAM,sBAAsB,GAAG,IAAI,CAAC,CAAC,CAAuB,yBAAyB,EAAE,CAAC;YACxF,IAAI,sBAAsB,CAAC,MAAM,KAAK,CAAC,EAAE;gBACxC,OAAO;aACP;YACD,MAAM,gBAAgB,GAAG,IAAI,CAAC,CAAC,CAAkB,UAAU,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAY,MAAM,CAAC,CAAC,CAAC;YACvG,KAAK,MAAM,qBAAqB,IAAI,sBAAsB,EAAE;gBAC3D,IAAI,gBAAgB,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,eAAe,CAAC,EAAE,KAAK,qBAAqB,CAAC,EAAE,CAAC,EAAE;oBAC9F,SAAS;iBACT;gBACD,IAAI,CAAC,CAAC,CAAuB,cAAc,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;aAC1E;QACF,CAAC;KAED,CAAA;IA9CY,oBAAI;mBAAJ,IAAI;QAGd,WAAA,2BAAI,CAAA;QACJ,WAAA,sBAAI,CAAA;QACJ,WAAA,cAAI,CAAA;OALM,IAAI,CA8ChB","file":"userDataProfilesHandler.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ILifecycleMainService, } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\nimport { ICodeWindow, LoadReason } from 'vs/platform/window/electron-main/window';\nimport { IUserDataProfilesMainService } from 'vs/platform/userDataProfile/electron-main/userDataProfile';\nimport { IAnyWorkspaceIdentifier, toWorkspaceIdentifier } from 'vs/platform/workspace/common/workspace';\nimport { RunOnceScheduler } from 'vs/base/common/async';\nimport { IWindowsMainService } from 'vs/platform/windows/electron-main/windows';\n\nexport class UserDataProfilesHandler extends Disposable {\n\n\tconstructor(\n\t\t@ILifecycleMainService lifecycleMainService: ILifecycleMainService,\n\t\t@IUserDataProfilesMainService private readonly userDataProfilesService: IUserDataProfilesMainService,\n\t\t@IWindowsMainService private readonly windowsMainService: IWindowsMainService,\n\t) {\n\t\tsuper();\n\t\tthis._register(lifecycleMainService.onWillLoadWindow(e => {\n\t\t\tif (e.reason === LoadReason.LOAD) {\n\t\t\t\tthis.unsetProfileForWorkspace(e.window);\n\t\t\t}\n\t\t}));\n\t\tthis._register(lifecycleMainService.onBeforeCloseWindow(window => this.unsetProfileForWorkspace(window)));\n\t\tthis._register(new RunOnceScheduler(() => this.cleanUpEmptyWindowAssociations(), 30 * 1000 /* after 30s */)).schedule();\n\t}\n\n\tprivate async unsetProfileForWorkspace(window: ICodeWindow): Promise<void> {\n\t\tconst workspace = this.getWorkspace(window);\n\t\tconst profile = this.userDataProfilesService.getProfileForWorkspace(workspace);\n\t\tif (profile?.isTransient) {\n\t\t\tthis.userDataProfilesService.unsetWorkspace(workspace, profile.isTransient);\n\t\t\tif (profile.isTransient) {\n\t\t\t\tawait this.userDataProfilesService.cleanUpTransientProfiles();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate getWorkspace(window: ICodeWindow): IAnyWorkspaceIdentifier {\n\t\treturn window.openedWorkspace ?? toWorkspaceIdentifier(window.backupPath, window.isExtensionDevelopmentHost);\n\t}\n\n\tprivate cleanUpEmptyWindowAssociations(): void {\n\t\tconst associatedEmptyWindows = this.userDataProfilesService.getAssociatedEmptyWindows();\n\t\tif (associatedEmptyWindows.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tconst openedWorkspaces = this.windowsMainService.getWindows().map(window => this.getWorkspace(window));\n\t\tfor (const associatedEmptyWindow of associatedEmptyWindows) {\n\t\t\tif (openedWorkspaces.some(openedWorkspace => openedWorkspace.id === associatedEmptyWindow.id)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tthis.userDataProfilesService.unsetWorkspace(associatedEmptyWindow, false);\n\t\t}\n\t}\n\n}\n"]}