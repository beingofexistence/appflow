{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/userDataProfile/common/userDataProfileStorageService.ts"],"names":[],"mappings":"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","file":"userDataProfileStorageService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Disposable, MutableDisposable, isDisposable } from 'vs/base/common/lifecycle';\nimport { IStorage, IStorageDatabase, Storage } from 'vs/base/parts/storage/common/storage';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { AbstractStorageService, IStorageService, IStorageValueChangeEvent, StorageScope, StorageTarget, isProfileUsingDefaultStorage } from 'vs/platform/storage/common/storage';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IRemoteService } from 'vs/platform/ipc/common/services';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { ApplicationStorageDatabaseClient, ProfileStorageDatabaseClient } from 'vs/platform/storage/common/storageIpc';\nimport { IUserDataProfile, IUserDataProfilesService, reviveProfile } from 'vs/platform/userDataProfile/common/userDataProfile';\n\nexport interface IProfileStorageValueChanges {\n\treadonly profile: IUserDataProfile;\n\treadonly changes: IStorageValueChangeEvent[];\n}\n\nexport interface IProfileStorageChanges {\n\treadonly targetChanges: IUserDataProfile[];\n\treadonly valueChanges: IProfileStorageValueChanges[];\n}\n\nexport interface IStorageValue {\n\treadonly value: string | undefined;\n\treadonly target: StorageTarget;\n}\n\nexport const IUserDataProfileStorageService = createDecorator<IUserDataProfileStorageService>('IUserDataProfileStorageService');\nexport interface IUserDataProfileStorageService {\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Emitted whenever data is updated or deleted in a profile storage or target of a profile storage entry changes\n\t */\n\treadonly onDidChange: Event<IProfileStorageChanges>;\n\n\t/**\n\t * Return the requested profile storage data\n\t * @param profile The profile from which the data has to be read from\n\t */\n\treadStorageData(profile: IUserDataProfile): Promise<Map<string, IStorageValue>>;\n\n\t/**\n\t * Update the given profile storage data in the profile storage\n\t * @param profile The profile to which the data has to be written to\n\t * @param data Data that has to be updated\n\t * @param target Storage target of the data\n\t */\n\tupdateStorageData(profile: IUserDataProfile, data: Map<string, string | undefined | null>, target: StorageTarget): Promise<void>;\n\n\t/**\n\t * Calls a function with a storage service scoped to given profile.\n\t */\n\twithProfileScopedStorageService<T>(profile: IUserDataProfile, fn: (storageService: IStorageService) => Promise<T>): Promise<T>;\n}\n\nexport abstract class AbstractUserDataProfileStorageService extends Disposable implements IUserDataProfileStorageService {\n\n\t_serviceBrand: undefined;\n\n\treadonly abstract onDidChange: Event<IProfileStorageChanges>;\n\n\tconstructor(\n\t\t@IStorageService protected readonly storageService: IStorageService\n\t) {\n\t\tsuper();\n\t}\n\n\tasync readStorageData(profile: IUserDataProfile): Promise<Map<string, IStorageValue>> {\n\t\treturn this.withProfileScopedStorageService(profile, async storageService => this.getItems(storageService));\n\t}\n\n\tasync updateStorageData(profile: IUserDataProfile, data: Map<string, string | undefined | null>, target: StorageTarget): Promise<void> {\n\t\treturn this.withProfileScopedStorageService(profile, async storageService => this.writeItems(storageService, data, target));\n\t}\n\n\tasync withProfileScopedStorageService<T>(profile: IUserDataProfile, fn: (storageService: IStorageService) => Promise<T>): Promise<T> {\n\t\tif (this.storageService.hasScope(profile)) {\n\t\t\treturn fn(this.storageService);\n\t\t}\n\n\t\tconst storageDatabase = await this.createStorageDatabase(profile);\n\t\tconst storageService = new StorageService(storageDatabase);\n\t\ttry {\n\t\t\tawait storageService.initialize();\n\t\t\tconst result = await fn(storageService);\n\t\t\tawait storageService.flush();\n\t\t\treturn result;\n\t\t} finally {\n\t\t\tstorageService.dispose();\n\t\t\tawait this.closeAndDispose(storageDatabase);\n\t\t}\n\t}\n\n\tprivate getItems(storageService: IStorageService): Map<string, IStorageValue> {\n\t\tconst result = new Map<string, IStorageValue>();\n\t\tconst populate = (target: StorageTarget) => {\n\t\t\tfor (const key of storageService.keys(StorageScope.PROFILE, target)) {\n\t\t\t\tresult.set(key, { value: storageService.get(key, StorageScope.PROFILE), target });\n\t\t\t}\n\t\t};\n\t\tpopulate(StorageTarget.USER);\n\t\tpopulate(StorageTarget.MACHINE);\n\t\treturn result;\n\t}\n\n\tprivate writeItems(storageService: IStorageService, items: Map<string, string | undefined | null>, target: StorageTarget): void {\n\t\tstorageService.storeAll(Array.from(items.entries()).map(([key, value]) => ({ key, value, scope: StorageScope.PROFILE, target })), true);\n\t}\n\n\tprotected async closeAndDispose(storageDatabase: IStorageDatabase): Promise<void> {\n\t\ttry {\n\t\t\tawait storageDatabase.close();\n\t\t} finally {\n\t\t\tif (isDisposable(storageDatabase)) {\n\t\t\t\tstorageDatabase.dispose();\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected abstract createStorageDatabase(profile: IUserDataProfile): Promise<IStorageDatabase>;\n}\n\nexport class RemoteUserDataProfileStorageService extends AbstractUserDataProfileStorageService implements IUserDataProfileStorageService {\n\n\tprivate readonly _onDidChange: Emitter<IProfileStorageChanges>;\n\treadonly onDidChange: Event<IProfileStorageChanges>;\n\n\tconstructor(\n\t\tprivate readonly remoteService: IRemoteService,\n\t\tuserDataProfilesService: IUserDataProfilesService,\n\t\tstorageService: IStorageService,\n\t\tlogService: ILogService,\n\t) {\n\t\tsuper(storageService);\n\n\t\tconst channel = remoteService.getChannel('profileStorageListener');\n\t\tconst disposable = this._register(new MutableDisposable());\n\t\tthis._onDidChange = this._register(new Emitter<IProfileStorageChanges>({\n\t\t\t// Start listening to profile storage changes only when someone is listening\n\t\t\tonWillAddFirstListener: () => {\n\t\t\t\tdisposable.value = channel.listen<IProfileStorageChanges>('onDidChange')(e => {\n\t\t\t\t\tlogService.trace('profile storage changes', e);\n\t\t\t\t\tthis._onDidChange.fire({\n\t\t\t\t\t\ttargetChanges: e.targetChanges.map(profile => reviveProfile(profile, userDataProfilesService.profilesHome.scheme)),\n\t\t\t\t\t\tvalueChanges: e.valueChanges.map(e => ({ ...e, profile: reviveProfile(e.profile, userDataProfilesService.profilesHome.scheme) }))\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t},\n\t\t\t// Stop listening to profile storage changes when no one is listening\n\t\t\tonDidRemoveLastListener: () => disposable.value = undefined\n\t\t}));\n\t\tthis.onDidChange = this._onDidChange.event;\n\t}\n\n\tprotected async createStorageDatabase(profile: IUserDataProfile): Promise<IStorageDatabase> {\n\t\tconst storageChannel = this.remoteService.getChannel('storage');\n\t\treturn isProfileUsingDefaultStorage(profile) ? new ApplicationStorageDatabaseClient(storageChannel) : new ProfileStorageDatabaseClient(storageChannel, profile);\n\t}\n}\n\nclass StorageService extends AbstractStorageService {\n\n\tprivate readonly profileStorage: IStorage;\n\n\tconstructor(profileStorageDatabase: IStorageDatabase) {\n\t\tsuper({ flushInterval: 100 });\n\t\tthis.profileStorage = this._register(new Storage(profileStorageDatabase));\n\t}\n\n\tprotected doInitialize(): Promise<void> {\n\t\treturn this.profileStorage.init();\n\t}\n\n\tprotected getStorage(scope: StorageScope): IStorage | undefined {\n\t\treturn scope === StorageScope.PROFILE ? this.profileStorage : undefined;\n\t}\n\n\tprotected getLogDetails(): string | undefined { return undefined; }\n\tprotected async switchToProfile(): Promise<void> { }\n\tprotected async switchToWorkspace(): Promise<void> { }\n\thasScope() { return false; }\n}\n"]}