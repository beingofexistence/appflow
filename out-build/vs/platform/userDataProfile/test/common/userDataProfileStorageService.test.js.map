{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/userDataProfile/test/common/userDataProfileStorageService.test.ts"],"names":[],"mappings":"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","file":"userDataProfileStorageService.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { URI } from 'vs/base/common/uri';\nimport { InMemoryStorageDatabase, IStorageItemsChangeEvent, IUpdateRequest, Storage } from 'vs/base/parts/storage/common/storage';\nimport { AbstractUserDataProfileStorageService, IUserDataProfileStorageService } from 'vs/platform/userDataProfile/common/userDataProfileStorageService';\nimport { InMemoryStorageService, loadKeyTargets, StorageTarget, TARGET_KEY } from 'vs/platform/storage/common/storage';\nimport { IUserDataProfile, toUserDataProfile } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { runWithFakedTimers } from 'vs/base/test/common/timeTravelScheduler';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nclass TestStorageDatabase extends InMemoryStorageDatabase {\n\n\tprivate readonly _onDidChangeItemsExternal = new Emitter<IStorageItemsChangeEvent>();\n\toverride readonly onDidChangeItemsExternal = this._onDidChangeItemsExternal.event;\n\n\toverride async updateItems(request: IUpdateRequest): Promise<void> {\n\t\tawait super.updateItems(request);\n\t\tif (request.insert || request.delete) {\n\t\t\tthis._onDidChangeItemsExternal.fire({ changed: request.insert, deleted: request.delete });\n\t\t}\n\t}\n}\n\nexport class TestUserDataProfileStorageService extends AbstractUserDataProfileStorageService implements IUserDataProfileStorageService {\n\n\treadonly onDidChange = Event.None;\n\tprivate databases = new Map<string, InMemoryStorageDatabase>();\n\n\tprotected async createStorageDatabase(profile: IUserDataProfile): Promise<InMemoryStorageDatabase> {\n\t\tlet database = this.databases.get(profile.id);\n\t\tif (!database) {\n\t\t\tthis.databases.set(profile.id, database = new TestStorageDatabase());\n\t\t}\n\t\treturn database;\n\t}\n\n\tsetupStorageDatabase(profile: IUserDataProfile): Promise<InMemoryStorageDatabase> {\n\t\treturn this.createStorageDatabase(profile);\n\t}\n\n\tprotected override async closeAndDispose(): Promise<void> { }\n}\n\nsuite('ProfileStorageService', () => {\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\tconst profile = toUserDataProfile('test', 'test', URI.file('foo'), URI.file('cache'));\n\tlet testObject: TestUserDataProfileStorageService;\n\tlet storage: Storage;\n\n\tsetup(async () => {\n\t\ttestObject = disposables.add(new TestUserDataProfileStorageService(disposables.add(new InMemoryStorageService())));\n\t\tstorage = disposables.add(new Storage(await testObject.setupStorageDatabase(profile)));\n\t\tawait storage.init();\n\t});\n\n\n\ttest('read empty storage', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst actual = await testObject.readStorageData(profile);\n\n\t\tassert.strictEqual(actual.size, 0);\n\t}));\n\n\ttest('read storage with data', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tstorage.set('foo', 'bar');\n\t\tstorage.set(TARGET_KEY, JSON.stringify({ foo: StorageTarget.USER }));\n\t\tawait storage.flush();\n\n\t\tconst actual = await testObject.readStorageData(profile);\n\n\t\tassert.strictEqual(actual.size, 1);\n\t\tassert.deepStrictEqual(actual.get('foo'), { 'value': 'bar', 'target': StorageTarget.USER });\n\t}));\n\n\ttest('write in empty storage', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tconst data = new Map<string, string>();\n\t\tdata.set('foo', 'bar');\n\t\tawait testObject.updateStorageData(profile, data, StorageTarget.USER);\n\n\t\tassert.strictEqual(storage.items.size, 2);\n\t\tassert.deepStrictEqual(loadKeyTargets(storage), { foo: StorageTarget.USER });\n\t\tassert.strictEqual(storage.get('foo'), 'bar');\n\t}));\n\n\ttest('write in storage with data', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tstorage.set('foo', 'bar');\n\t\tstorage.set(TARGET_KEY, JSON.stringify({ foo: StorageTarget.USER }));\n\t\tawait storage.flush();\n\n\t\tconst data = new Map<string, string>();\n\t\tdata.set('abc', 'xyz');\n\t\tawait testObject.updateStorageData(profile, data, StorageTarget.MACHINE);\n\n\t\tassert.strictEqual(storage.items.size, 3);\n\t\tassert.deepStrictEqual(loadKeyTargets(storage), { foo: StorageTarget.USER, abc: StorageTarget.MACHINE });\n\t\tassert.strictEqual(storage.get('foo'), 'bar');\n\t\tassert.strictEqual(storage.get('abc'), 'xyz');\n\t}));\n\n\ttest('write in storage with data (insert, update, remove)', () => runWithFakedTimers<void>({ useFakeTimers: true }, async () => {\n\t\tstorage.set('foo', 'bar');\n\t\tstorage.set('abc', 'xyz');\n\t\tstorage.set(TARGET_KEY, JSON.stringify({ foo: StorageTarget.USER, abc: StorageTarget.MACHINE }));\n\t\tawait storage.flush();\n\n\t\tconst data = new Map<string, string | undefined>();\n\t\tdata.set('foo', undefined);\n\t\tdata.set('abc', 'def');\n\t\tdata.set('var', 'const');\n\t\tawait testObject.updateStorageData(profile, data, StorageTarget.USER);\n\n\t\tassert.strictEqual(storage.items.size, 3);\n\t\tassert.deepStrictEqual(loadKeyTargets(storage), { abc: StorageTarget.USER, var: StorageTarget.USER });\n\t\tassert.strictEqual(storage.get('abc'), 'def');\n\t\tassert.strictEqual(storage.get('var'), 'const');\n\t}));\n\n});\n"]}