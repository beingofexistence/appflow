{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/userDataProfile/test/electron-main/userDataProfileMainService.test.ts"],"names":[],"mappings":"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","file":"userDataProfileMainService.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { Schemas } from 'vs/base/common/network';\nimport { URI } from 'vs/base/common/uri';\nimport { joinPath } from 'vs/base/common/resources';\nimport { InMemoryFileSystemProvider } from 'vs/platform/files/common/inMemoryFilesystemProvider';\nimport { AbstractNativeEnvironmentService } from 'vs/platform/environment/common/environmentService';\nimport product from 'vs/platform/product/common/product';\nimport { UserDataProfilesMainService } from 'vs/platform/userDataProfile/electron-main/userDataProfile';\nimport { SaveStrategy, StateService } from 'vs/platform/state/node/stateService';\nimport { UriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentityService';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nconst ROOT = URI.file('tests').with({ scheme: 'vscode-tests' });\n\nclass TestEnvironmentService extends AbstractNativeEnvironmentService {\n\tconstructor(private readonly _appSettingsHome: URI) {\n\t\tsuper(Object.create(null), Object.create(null), { _serviceBrand: undefined, ...product });\n\t}\n\toverride get userRoamingDataHome() { return this._appSettingsHome.with({ scheme: Schemas.vscodeUserData }); }\n\toverride get extensionsPath() { return joinPath(this.userRoamingDataHome, 'extensions.json').path; }\n\toverride get stateResource() { return joinPath(this.userRoamingDataHome, 'state.json'); }\n\toverride get cacheHome() { return joinPath(this.userRoamingDataHome, 'cache'); }\n}\n\nsuite('UserDataProfileMainService', () => {\n\n\tconst disposables = ensureNoDisposablesAreLeakedInTestSuite();\n\tlet testObject: UserDataProfilesMainService;\n\tlet environmentService: TestEnvironmentService, stateService: StateService;\n\n\tsetup(async () => {\n\t\tconst logService = new NullLogService();\n\t\tconst fileService = disposables.add(new FileService(logService));\n\t\tconst fileSystemProvider = disposables.add(new InMemoryFileSystemProvider());\n\t\tdisposables.add(fileService.registerProvider(Schemas.vscodeUserData, fileSystemProvider));\n\n\t\tenvironmentService = new TestEnvironmentService(joinPath(ROOT, 'User'));\n\t\tstateService = disposables.add(new StateService(SaveStrategy.DELAYED, environmentService, logService, fileService));\n\n\t\ttestObject = disposables.add(new UserDataProfilesMainService(stateService, disposables.add(new UriIdentityService(fileService)), environmentService, fileService, logService));\n\t\tawait stateService.init();\n\t});\n\n\ttest('default profile', () => {\n\t\tassert.strictEqual(testObject.defaultProfile.isDefault, true);\n\t});\n\n\ttest('profiles always include default profile', () => {\n\t\tassert.deepStrictEqual(testObject.profiles.length, 1);\n\t\tassert.deepStrictEqual(testObject.profiles[0].isDefault, true);\n\t});\n\n\ttest('default profile when there are profiles', async () => {\n\t\tawait testObject.createNamedProfile('test');\n\t\tassert.strictEqual(testObject.defaultProfile.isDefault, true);\n\t});\n\n\ttest('default profile when profiles are removed', async () => {\n\t\tconst profile = await testObject.createNamedProfile('test');\n\t\tawait testObject.removeProfile(profile);\n\t\tassert.strictEqual(testObject.defaultProfile.isDefault, true);\n\t});\n\n\ttest('when no profile is set', async () => {\n\t\tawait testObject.createNamedProfile('profile1');\n\n\t\tassert.equal(testObject.getProfileForWorkspace({ id: 'id' }), undefined);\n\t\tassert.equal(testObject.getProfileForWorkspace({ id: 'id', configPath: environmentService.userRoamingDataHome }), undefined);\n\t\tassert.equal(testObject.getProfileForWorkspace({ id: 'id', uri: environmentService.userRoamingDataHome }), undefined);\n\t});\n\n\ttest('set profile to a workspace', async () => {\n\t\tconst workspace = { id: 'id', configPath: environmentService.userRoamingDataHome };\n\t\tconst profile = await testObject.createNamedProfile('profile1');\n\n\t\ttestObject.setProfileForWorkspace(workspace, profile);\n\n\t\tassert.strictEqual(testObject.getProfileForWorkspace(workspace)?.id, profile.id);\n\t});\n\n\ttest('set profile to a folder', async () => {\n\t\tconst workspace = { id: 'id', uri: environmentService.userRoamingDataHome };\n\t\tconst profile = await testObject.createNamedProfile('profile1');\n\n\t\ttestObject.setProfileForWorkspace(workspace, profile);\n\n\t\tassert.strictEqual(testObject.getProfileForWorkspace(workspace)?.id, profile.id);\n\t});\n\n\ttest('set profile to a window', async () => {\n\t\tconst workspace = { id: 'id' };\n\t\tconst profile = await testObject.createNamedProfile('profile1');\n\n\t\ttestObject.setProfileForWorkspace(workspace, profile);\n\n\t\tassert.strictEqual(testObject.getProfileForWorkspace(workspace)?.id, profile.id);\n\t});\n\n});\n"]}