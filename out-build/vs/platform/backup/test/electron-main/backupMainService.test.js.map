{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/backup/test/electron-main/backupMainService.test.ts"],"names":[],"mappings":"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","file":"backupMainService.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { createHash } from 'crypto';\nimport * as fs from 'fs';\nimport * as os from 'os';\nimport { Schemas } from 'vs/base/common/network';\nimport * as path from 'vs/base/common/path';\nimport * as platform from 'vs/base/common/platform';\nimport { isEqual } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { Promises } from 'vs/base/node/pfs';\nimport { flakySuite, getRandomTestPath } from 'vs/base/test/node/testUtils';\nimport { BackupMainService } from 'vs/platform/backup/electron-main/backupMainService';\nimport { ISerializedBackupWorkspaces, ISerializedWorkspaceBackupInfo } from 'vs/platform/backup/node/backup';\nimport { TestConfigurationService } from 'vs/platform/configuration/test/common/testConfigurationService';\nimport { EnvironmentMainService } from 'vs/platform/environment/electron-main/environmentMainService';\nimport { OPTIONS, parseArgs } from 'vs/platform/environment/node/argv';\nimport { HotExitConfiguration } from 'vs/platform/files/common/files';\nimport { ConsoleMainLogger } from 'vs/platform/log/common/log';\nimport product from 'vs/platform/product/common/product';\nimport { IFolderBackupInfo, isFolderBackupInfo, IWorkspaceBackupInfo } from 'vs/platform/backup/common/backup';\nimport { IWorkspaceIdentifier } from 'vs/platform/workspace/common/workspace';\nimport { InMemoryTestStateMainService } from 'vs/platform/test/electron-main/workbenchTestServices';\nimport { LogService } from 'vs/platform/log/common/logService';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\n\nflakySuite('BackupMainService', () => {\n\n\tfunction assertEqualFolderInfos(actual: IFolderBackupInfo[], expected: IFolderBackupInfo[]) {\n\t\tconst withUriAsString = (f: IFolderBackupInfo) => ({ folderUri: f.folderUri.toString(), remoteAuthority: f.remoteAuthority });\n\t\tassert.deepStrictEqual(actual.map(withUriAsString), expected.map(withUriAsString));\n\t}\n\n\tfunction toWorkspace(path: string): IWorkspaceIdentifier {\n\t\treturn {\n\t\t\tid: createHash('md5').update(sanitizePath(path)).digest('hex'),\n\t\t\tconfigPath: URI.file(path)\n\t\t};\n\t}\n\n\tfunction toWorkspaceBackupInfo(path: string, remoteAuthority?: string): IWorkspaceBackupInfo {\n\t\treturn {\n\t\t\tworkspace: {\n\t\t\t\tid: createHash('md5').update(sanitizePath(path)).digest('hex'),\n\t\t\t\tconfigPath: URI.file(path)\n\t\t\t},\n\t\t\tremoteAuthority\n\t\t};\n\t}\n\n\tfunction toFolderBackupInfo(uri: URI, remoteAuthority?: string): IFolderBackupInfo {\n\t\treturn { folderUri: uri, remoteAuthority };\n\t}\n\n\tfunction toSerializedWorkspace(ws: IWorkspaceIdentifier): ISerializedWorkspaceBackupInfo {\n\t\treturn {\n\t\t\tid: ws.id,\n\t\t\tconfigURIPath: ws.configPath.toString()\n\t\t};\n\t}\n\n\tfunction ensureFolderExists(uri: URI): Promise<void> {\n\t\tif (!fs.existsSync(uri.fsPath)) {\n\t\t\tfs.mkdirSync(uri.fsPath);\n\t\t}\n\n\t\tconst backupFolder = service.toBackupPath(uri);\n\t\treturn createBackupFolder(backupFolder);\n\t}\n\n\tasync function ensureWorkspaceExists(workspace: IWorkspaceIdentifier): Promise<IWorkspaceIdentifier> {\n\t\tif (!fs.existsSync(workspace.configPath.fsPath)) {\n\t\t\tawait Promises.writeFile(workspace.configPath.fsPath, 'Hello');\n\t\t}\n\n\t\tconst backupFolder = service.toBackupPath(workspace.id);\n\t\tawait createBackupFolder(backupFolder);\n\n\t\treturn workspace;\n\t}\n\n\tasync function createBackupFolder(backupFolder: string): Promise<void> {\n\t\tif (!fs.existsSync(backupFolder)) {\n\t\t\tfs.mkdirSync(backupFolder);\n\t\t\tfs.mkdirSync(path.join(backupFolder, Schemas.file));\n\t\t\tawait Promises.writeFile(path.join(backupFolder, Schemas.file, 'foo.txt'), 'Hello');\n\t\t}\n\t}\n\n\tfunction readWorkspacesMetadata(): ISerializedBackupWorkspaces {\n\t\treturn stateMainService.getItem('backupWorkspaces') as ISerializedBackupWorkspaces;\n\t}\n\n\tfunction writeWorkspacesMetadata(data: string): void {\n\t\tif (!data) {\n\t\t\tstateMainService.removeItem('backupWorkspaces');\n\t\t} else {\n\t\t\tstateMainService.setItem('backupWorkspaces', JSON.parse(data));\n\t\t}\n\t}\n\n\tfunction sanitizePath(p: string): string {\n\t\treturn platform.isLinux ? p : p.toLowerCase();\n\t}\n\n\tconst fooFile = URI.file(platform.isWindows ? 'C:\\\\foo' : '/foo');\n\tconst barFile = URI.file(platform.isWindows ? 'C:\\\\bar' : '/bar');\n\n\tlet service: BackupMainService & {\n\t\ttoBackupPath(arg: URI | string): string;\n\t\ttestGetFolderHash(folder: IFolderBackupInfo): string;\n\t\ttestGetWorkspaceBackups(): IWorkspaceBackupInfo[];\n\t\ttestGetFolderBackups(): IFolderBackupInfo[];\n\t};\n\tlet configService: TestConfigurationService;\n\tlet stateMainService: InMemoryTestStateMainService;\n\n\tlet environmentService: EnvironmentMainService;\n\tlet testDir: string;\n\tlet backupHome: string;\n\tlet existingTestFolder1: URI;\n\n\tsetup(async () => {\n\t\ttestDir = getRandomTestPath(os.tmpdir(), 'vsctests', 'backupmainservice');\n\t\tbackupHome = path.join(testDir, 'Backups');\n\t\texistingTestFolder1 = URI.file(path.join(testDir, 'folder1'));\n\n\t\tenvironmentService = new EnvironmentMainService(parseArgs(process.argv, OPTIONS), { _serviceBrand: undefined, ...product });\n\n\t\tawait Promises.mkdir(backupHome, { recursive: true });\n\n\t\tconfigService = new TestConfigurationService();\n\t\tstateMainService = new InMemoryTestStateMainService();\n\n\t\tservice = new class TestBackupMainService extends BackupMainService {\n\t\t\tconstructor() {\n\t\t\t\tsuper(environmentService, configService, new LogService(new ConsoleMainLogger()), stateMainService);\n\n\t\t\t\tthis.backupHome = backupHome;\n\t\t\t}\n\n\t\t\ttoBackupPath(arg: URI | string): string {\n\t\t\t\tconst id = arg instanceof URI ? super.getFolderHash({ folderUri: arg }) : arg;\n\t\t\t\treturn path.join(this.backupHome, id);\n\t\t\t}\n\n\t\t\ttestGetFolderHash(folder: IFolderBackupInfo): string {\n\t\t\t\treturn super.getFolderHash(folder);\n\t\t\t}\n\n\t\t\ttestGetWorkspaceBackups(): IWorkspaceBackupInfo[] {\n\t\t\t\treturn super.getWorkspaceBackups();\n\t\t\t}\n\n\t\t\ttestGetFolderBackups(): IFolderBackupInfo[] {\n\t\t\t\treturn super.getFolderBackups();\n\t\t\t}\n\t\t};\n\n\t\treturn service.initialize();\n\t});\n\n\tteardown(() => {\n\t\treturn Promises.rm(testDir);\n\t});\n\n\ttest('service validates backup workspaces on startup and cleans up (folder workspaces)', async function () {\n\n\t\t// 1) backup workspace path does not exist\n\t\tservice.registerFolderBackup(toFolderBackupInfo(fooFile));\n\t\tservice.registerFolderBackup(toFolderBackupInfo(barFile));\n\t\tawait service.initialize();\n\t\tassertEqualFolderInfos(service.testGetFolderBackups(), []);\n\n\t\t// 2) backup workspace path exists with empty contents within\n\t\tfs.mkdirSync(service.toBackupPath(fooFile));\n\t\tfs.mkdirSync(service.toBackupPath(barFile));\n\t\tservice.registerFolderBackup(toFolderBackupInfo(fooFile));\n\t\tservice.registerFolderBackup(toFolderBackupInfo(barFile));\n\t\tawait service.initialize();\n\t\tassertEqualFolderInfos(service.testGetFolderBackups(), []);\n\t\tassert.ok(!fs.existsSync(service.toBackupPath(fooFile)));\n\t\tassert.ok(!fs.existsSync(service.toBackupPath(barFile)));\n\n\t\t// 3) backup workspace path exists with empty folders within\n\t\tfs.mkdirSync(service.toBackupPath(fooFile));\n\t\tfs.mkdirSync(service.toBackupPath(barFile));\n\t\tfs.mkdirSync(path.join(service.toBackupPath(fooFile), Schemas.file));\n\t\tfs.mkdirSync(path.join(service.toBackupPath(barFile), Schemas.untitled));\n\t\tservice.registerFolderBackup(toFolderBackupInfo(fooFile));\n\t\tservice.registerFolderBackup(toFolderBackupInfo(barFile));\n\t\tawait service.initialize();\n\t\tassertEqualFolderInfos(service.testGetFolderBackups(), []);\n\t\tassert.ok(!fs.existsSync(service.toBackupPath(fooFile)));\n\t\tassert.ok(!fs.existsSync(service.toBackupPath(barFile)));\n\n\t\t// 4) backup workspace path points to a workspace that no longer exists\n\t\t// so it should convert the backup worspace to an empty workspace backup\n\t\tconst fileBackups = path.join(service.toBackupPath(fooFile), Schemas.file);\n\t\tfs.mkdirSync(service.toBackupPath(fooFile));\n\t\tfs.mkdirSync(service.toBackupPath(barFile));\n\t\tfs.mkdirSync(fileBackups);\n\t\tservice.registerFolderBackup(toFolderBackupInfo(fooFile));\n\t\tassert.strictEqual(service.testGetFolderBackups().length, 1);\n\t\tassert.strictEqual(service.getEmptyWindowBackups().length, 0);\n\t\tfs.writeFileSync(path.join(fileBackups, 'backup.txt'), '');\n\t\tawait service.initialize();\n\t\tassert.strictEqual(service.testGetFolderBackups().length, 0);\n\t\tassert.strictEqual(service.getEmptyWindowBackups().length, 1);\n\t});\n\n\ttest('service validates backup workspaces on startup and cleans up (root workspaces)', async function () {\n\n\t\t// 1) backup workspace path does not exist\n\t\tservice.registerWorkspaceBackup(toWorkspaceBackupInfo(fooFile.fsPath));\n\t\tservice.registerWorkspaceBackup(toWorkspaceBackupInfo(barFile.fsPath));\n\t\tawait service.initialize();\n\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\n\t\t// 2) backup workspace path exists with empty contents within\n\t\tfs.mkdirSync(service.toBackupPath(fooFile));\n\t\tfs.mkdirSync(service.toBackupPath(barFile));\n\t\tservice.registerWorkspaceBackup(toWorkspaceBackupInfo(fooFile.fsPath));\n\t\tservice.registerWorkspaceBackup(toWorkspaceBackupInfo(barFile.fsPath));\n\t\tawait service.initialize();\n\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\tassert.ok(!fs.existsSync(service.toBackupPath(fooFile)));\n\t\tassert.ok(!fs.existsSync(service.toBackupPath(barFile)));\n\n\t\t// 3) backup workspace path exists with empty folders within\n\t\tfs.mkdirSync(service.toBackupPath(fooFile));\n\t\tfs.mkdirSync(service.toBackupPath(barFile));\n\t\tfs.mkdirSync(path.join(service.toBackupPath(fooFile), Schemas.file));\n\t\tfs.mkdirSync(path.join(service.toBackupPath(barFile), Schemas.untitled));\n\t\tservice.registerWorkspaceBackup(toWorkspaceBackupInfo(fooFile.fsPath));\n\t\tservice.registerWorkspaceBackup(toWorkspaceBackupInfo(barFile.fsPath));\n\t\tawait service.initialize();\n\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\tassert.ok(!fs.existsSync(service.toBackupPath(fooFile)));\n\t\tassert.ok(!fs.existsSync(service.toBackupPath(barFile)));\n\n\t\t// 4) backup workspace path points to a workspace that no longer exists\n\t\t// so it should convert the backup worspace to an empty workspace backup\n\t\tconst fileBackups = path.join(service.toBackupPath(fooFile), Schemas.file);\n\t\tfs.mkdirSync(service.toBackupPath(fooFile));\n\t\tfs.mkdirSync(service.toBackupPath(barFile));\n\t\tfs.mkdirSync(fileBackups);\n\t\tservice.registerWorkspaceBackup(toWorkspaceBackupInfo(fooFile.fsPath));\n\t\tassert.strictEqual(service.testGetWorkspaceBackups().length, 1);\n\t\tassert.strictEqual(service.getEmptyWindowBackups().length, 0);\n\t\tfs.writeFileSync(path.join(fileBackups, 'backup.txt'), '');\n\t\tawait service.initialize();\n\t\tassert.strictEqual(service.testGetWorkspaceBackups().length, 0);\n\t\tassert.strictEqual(service.getEmptyWindowBackups().length, 1);\n\t});\n\n\ttest('service supports to migrate backup data from another location', async () => {\n\t\tconst backupPathToMigrate = service.toBackupPath(fooFile);\n\t\tfs.mkdirSync(backupPathToMigrate);\n\t\tfs.writeFileSync(path.join(backupPathToMigrate, 'backup.txt'), 'Some Data');\n\t\tservice.registerFolderBackup(toFolderBackupInfo(URI.file(backupPathToMigrate)));\n\n\t\tconst workspaceBackupPath = await service.registerWorkspaceBackup(toWorkspaceBackupInfo(barFile.fsPath), backupPathToMigrate);\n\n\t\tassert.ok(fs.existsSync(workspaceBackupPath));\n\t\tassert.ok(fs.existsSync(path.join(workspaceBackupPath, 'backup.txt')));\n\t\tassert.ok(!fs.existsSync(backupPathToMigrate));\n\n\t\tconst emptyBackups = service.getEmptyWindowBackups();\n\t\tassert.strictEqual(0, emptyBackups.length);\n\t});\n\n\ttest('service backup migration makes sure to preserve existing backups', async () => {\n\t\tconst backupPathToMigrate = service.toBackupPath(fooFile);\n\t\tfs.mkdirSync(backupPathToMigrate);\n\t\tfs.writeFileSync(path.join(backupPathToMigrate, 'backup.txt'), 'Some Data');\n\t\tservice.registerFolderBackup(toFolderBackupInfo(URI.file(backupPathToMigrate)));\n\n\t\tconst backupPathToPreserve = service.toBackupPath(barFile);\n\t\tfs.mkdirSync(backupPathToPreserve);\n\t\tfs.writeFileSync(path.join(backupPathToPreserve, 'backup.txt'), 'Some Data');\n\t\tservice.registerFolderBackup(toFolderBackupInfo(URI.file(backupPathToPreserve)));\n\n\t\tconst workspaceBackupPath = await service.registerWorkspaceBackup(toWorkspaceBackupInfo(barFile.fsPath), backupPathToMigrate);\n\n\t\tassert.ok(fs.existsSync(workspaceBackupPath));\n\t\tassert.ok(fs.existsSync(path.join(workspaceBackupPath, 'backup.txt')));\n\t\tassert.ok(!fs.existsSync(backupPathToMigrate));\n\n\t\tconst emptyBackups = service.getEmptyWindowBackups();\n\t\tassert.strictEqual(1, emptyBackups.length);\n\t\tassert.strictEqual(1, fs.readdirSync(path.join(backupHome, emptyBackups[0].backupFolder!)).length);\n\t});\n\n\tsuite('loadSync', () => {\n\t\ttest('getFolderBackupPaths() should return [] when workspaces.json doesn\\'t exist', () => {\n\t\t\tassertEqualFolderInfos(service.testGetFolderBackups(), []);\n\t\t});\n\n\t\ttest('getFolderBackupPaths() should return [] when folders in workspaces.json is absent', async () => {\n\t\t\twriteWorkspacesMetadata('{}');\n\t\t\tawait service.initialize();\n\t\t\tassertEqualFolderInfos(service.testGetFolderBackups(), []);\n\t\t});\n\n\t\ttest('getFolderBackupPaths() should return [] when folders in workspaces.json is not a string array', async () => {\n\t\t\twriteWorkspacesMetadata('{\"folders\":{}}');\n\t\t\tawait service.initialize();\n\t\t\tassertEqualFolderInfos(service.testGetFolderBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"folders\":{\"foo\": [\"bar\"]}}');\n\t\t\tawait service.initialize();\n\t\t\tassertEqualFolderInfos(service.testGetFolderBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"folders\":{\"foo\": []}}');\n\t\t\tawait service.initialize();\n\t\t\tassertEqualFolderInfos(service.testGetFolderBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"folders\":{\"foo\": \"bar\"}}');\n\t\t\tawait service.initialize();\n\t\t\tassertEqualFolderInfos(service.testGetFolderBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"folders\":\"foo\"}');\n\t\t\tawait service.initialize();\n\t\t\tassertEqualFolderInfos(service.testGetFolderBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"folders\":1}');\n\t\t\tawait service.initialize();\n\t\t\tassertEqualFolderInfos(service.testGetFolderBackups(), []);\n\t\t});\n\n\t\ttest('getFolderBackupPaths() should return [] when files.hotExit = \"onExitAndWindowClose\"', async () => {\n\t\t\tconst fi = toFolderBackupInfo(URI.file(fooFile.fsPath.toUpperCase()));\n\t\t\tservice.registerFolderBackup(fi);\n\t\t\tassertEqualFolderInfos(service.testGetFolderBackups(), [fi]);\n\t\t\tconfigService.setUserConfiguration('files.hotExit', HotExitConfiguration.ON_EXIT_AND_WINDOW_CLOSE);\n\t\t\tawait service.initialize();\n\t\t\tassertEqualFolderInfos(service.testGetFolderBackups(), []);\n\t\t});\n\n\t\ttest('getWorkspaceBackups() should return [] when workspaces.json doesn\\'t exist', () => {\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t});\n\n\t\ttest('getWorkspaceBackups() should return [] when folderWorkspaces in workspaces.json is absent', async () => {\n\t\t\twriteWorkspacesMetadata('{}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t});\n\n\t\ttest('getWorkspaceBackups() should return [] when rootWorkspaces in workspaces.json is not a object array', async () => {\n\t\t\twriteWorkspacesMetadata('{\"rootWorkspaces\":{}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"rootWorkspaces\":{\"foo\": [\"bar\"]}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"rootWorkspaces\":{\"foo\": []}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"rootWorkspaces\":{\"foo\": \"bar\"}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"rootWorkspaces\":\"foo\"}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"rootWorkspaces\":1}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t});\n\n\t\ttest('getWorkspaceBackups() should return [] when workspaces in workspaces.json is not a object array', async () => {\n\t\t\twriteWorkspacesMetadata('{\"workspaces\":{}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"workspaces\":{\"foo\": [\"bar\"]}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"workspaces\":{\"foo\": []}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"workspaces\":{\"foo\": \"bar\"}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"workspaces\":\"foo\"}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"workspaces\":1}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t});\n\n\t\ttest('getWorkspaceBackups() should return [] when files.hotExit = \"onExitAndWindowClose\"', async () => {\n\t\t\tconst upperFooPath = fooFile.fsPath.toUpperCase();\n\t\t\tservice.registerWorkspaceBackup(toWorkspaceBackupInfo(upperFooPath));\n\t\t\tassert.strictEqual(service.testGetWorkspaceBackups().length, 1);\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups().map(r => r.workspace.configPath.toString()), [URI.file(upperFooPath).toString()]);\n\t\t\tconfigService.setUserConfiguration('files.hotExit', HotExitConfiguration.ON_EXIT_AND_WINDOW_CLOSE);\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups(), []);\n\t\t});\n\n\t\ttest('getEmptyWorkspaceBackupPaths() should return [] when workspaces.json doesn\\'t exist', () => {\n\t\t\tassert.deepStrictEqual(service.getEmptyWindowBackups(), []);\n\t\t});\n\n\t\ttest('getEmptyWorkspaceBackupPaths() should return [] when folderWorkspaces in workspaces.json is absent', async () => {\n\t\t\twriteWorkspacesMetadata('{}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getEmptyWindowBackups(), []);\n\t\t});\n\n\t\ttest('getEmptyWorkspaceBackupPaths() should return [] when folderWorkspaces in workspaces.json is not a string array', async function () {\n\t\t\twriteWorkspacesMetadata('{\"emptyWorkspaces\":{}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getEmptyWindowBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"emptyWorkspaces\":{\"foo\": [\"bar\"]}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getEmptyWindowBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"emptyWorkspaces\":{\"foo\": []}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getEmptyWindowBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"emptyWorkspaces\":{\"foo\": \"bar\"}}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getEmptyWindowBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"emptyWorkspaces\":\"foo\"}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getEmptyWindowBackups(), []);\n\t\t\twriteWorkspacesMetadata('{\"emptyWorkspaces\":1}');\n\t\t\tawait service.initialize();\n\t\t\tassert.deepStrictEqual(service.getEmptyWindowBackups(), []);\n\t\t});\n\t});\n\n\tsuite('dedupeFolderWorkspaces', () => {\n\t\ttest('should ignore duplicates (folder workspace)', async () => {\n\n\t\t\tawait ensureFolderExists(existingTestFolder1);\n\n\t\t\tconst workspacesJson: ISerializedBackupWorkspaces = {\n\t\t\t\tworkspaces: [],\n\t\t\t\tfolders: [{ folderUri: existingTestFolder1.toString() }, { folderUri: existingTestFolder1.toString() }],\n\t\t\t\temptyWindows: []\n\t\t\t};\n\t\t\twriteWorkspacesMetadata(JSON.stringify(workspacesJson));\n\t\t\tawait service.initialize();\n\n\t\t\tconst json = readWorkspacesMetadata();\n\t\t\tassert.deepStrictEqual(json.folders, [{ folderUri: existingTestFolder1.toString() }]);\n\t\t});\n\n\t\ttest('should ignore duplicates on Windows and Mac (folder workspace)', async () => {\n\n\t\t\tawait ensureFolderExists(existingTestFolder1);\n\n\t\t\tconst workspacesJson: ISerializedBackupWorkspaces = {\n\t\t\t\tworkspaces: [],\n\t\t\t\tfolders: [{ folderUri: existingTestFolder1.toString() }, { folderUri: existingTestFolder1.toString().toLowerCase() }],\n\t\t\t\temptyWindows: []\n\t\t\t};\n\t\t\twriteWorkspacesMetadata(JSON.stringify(workspacesJson));\n\t\t\tawait service.initialize();\n\t\t\tconst json = readWorkspacesMetadata();\n\t\t\tassert.deepStrictEqual(json.folders, [{ folderUri: existingTestFolder1.toString() }]);\n\t\t});\n\n\t\ttest('should ignore duplicates on Windows and Mac (root workspace)', async () => {\n\t\t\tconst workspacePath = path.join(testDir, 'Foo.code-workspace');\n\t\t\tconst workspacePath1 = path.join(testDir, 'FOO.code-workspace');\n\t\t\tconst workspacePath2 = path.join(testDir, 'foo.code-workspace');\n\n\t\t\tconst workspace1 = await ensureWorkspaceExists(toWorkspace(workspacePath));\n\t\t\tconst workspace2 = await ensureWorkspaceExists(toWorkspace(workspacePath1));\n\t\t\tconst workspace3 = await ensureWorkspaceExists(toWorkspace(workspacePath2));\n\n\t\t\tconst workspacesJson: ISerializedBackupWorkspaces = {\n\t\t\t\tworkspaces: [workspace1, workspace2, workspace3].map(toSerializedWorkspace),\n\t\t\t\tfolders: [],\n\t\t\t\temptyWindows: []\n\t\t\t};\n\t\t\twriteWorkspacesMetadata(JSON.stringify(workspacesJson));\n\t\t\tawait service.initialize();\n\n\t\t\tconst json = readWorkspacesMetadata();\n\t\t\tassert.strictEqual(json.workspaces.length, platform.isLinux ? 3 : 1);\n\t\t\tif (platform.isLinux) {\n\t\t\t\tassert.deepStrictEqual(json.workspaces.map(r => r.configURIPath), [URI.file(workspacePath).toString(), URI.file(workspacePath1).toString(), URI.file(workspacePath2).toString()]);\n\t\t\t} else {\n\t\t\t\tassert.deepStrictEqual(json.workspaces.map(r => r.configURIPath), [URI.file(workspacePath).toString()], 'should return the first duplicated entry');\n\t\t\t}\n\t\t});\n\t});\n\n\tsuite('registerWindowForBackups', () => {\n\t\ttest('should persist paths to workspaces.json (folder workspace)', async () => {\n\t\t\tservice.registerFolderBackup(toFolderBackupInfo(fooFile));\n\t\t\tservice.registerFolderBackup(toFolderBackupInfo(barFile));\n\t\t\tassertEqualFolderInfos(service.testGetFolderBackups(), [toFolderBackupInfo(fooFile), toFolderBackupInfo(barFile)]);\n\n\t\t\tconst json = readWorkspacesMetadata();\n\t\t\tassert.deepStrictEqual(json.folders, [{ folderUri: fooFile.toString() }, { folderUri: barFile.toString() }]);\n\t\t});\n\n\t\ttest('should persist paths to workspaces.json (root workspace)', async () => {\n\t\t\tconst ws1 = toWorkspaceBackupInfo(fooFile.fsPath);\n\t\t\tservice.registerWorkspaceBackup(ws1);\n\t\t\tconst ws2 = toWorkspaceBackupInfo(barFile.fsPath);\n\t\t\tservice.registerWorkspaceBackup(ws2);\n\n\t\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups().map(b => b.workspace.configPath.toString()), [fooFile.toString(), barFile.toString()]);\n\t\t\tassert.strictEqual(ws1.workspace.id, service.testGetWorkspaceBackups()[0].workspace.id);\n\t\t\tassert.strictEqual(ws2.workspace.id, service.testGetWorkspaceBackups()[1].workspace.id);\n\n\t\t\tconst json = readWorkspacesMetadata();\n\t\t\tassert.deepStrictEqual(json.workspaces.map(b => b.configURIPath), [fooFile.toString(), barFile.toString()]);\n\t\t\tassert.strictEqual(ws1.workspace.id, json.workspaces[0].id);\n\t\t\tassert.strictEqual(ws2.workspace.id, json.workspaces[1].id);\n\t\t});\n\t});\n\n\ttest('should always store the workspace path in workspaces.json using the case given, regardless of whether the file system is case-sensitive (folder workspace)', async () => {\n\t\tservice.registerFolderBackup(toFolderBackupInfo(URI.file(fooFile.fsPath.toUpperCase())));\n\t\tassertEqualFolderInfos(service.testGetFolderBackups(), [toFolderBackupInfo(URI.file(fooFile.fsPath.toUpperCase()))]);\n\n\t\tconst json = readWorkspacesMetadata();\n\t\tassert.deepStrictEqual(json.folders, [{ folderUri: URI.file(fooFile.fsPath.toUpperCase()).toString() }]);\n\t});\n\n\ttest('should always store the workspace path in workspaces.json using the case given, regardless of whether the file system is case-sensitive (root workspace)', async () => {\n\t\tconst upperFooPath = fooFile.fsPath.toUpperCase();\n\t\tservice.registerWorkspaceBackup(toWorkspaceBackupInfo(upperFooPath));\n\t\tassert.deepStrictEqual(service.testGetWorkspaceBackups().map(b => b.workspace.configPath.toString()), [URI.file(upperFooPath).toString()]);\n\n\t\tconst json = readWorkspacesMetadata();\n\t\tassert.deepStrictEqual(json.workspaces.map(b => b.configURIPath), [URI.file(upperFooPath).toString()]);\n\t});\n\n\tsuite('getWorkspaceHash', () => {\n\t\t(platform.isLinux ? test.skip : test)('should ignore case on Windows and Mac', () => {\n\t\t\tconst assertFolderHash = (uri1: URI, uri2: URI) => {\n\t\t\t\tassert.strictEqual(service.testGetFolderHash(toFolderBackupInfo(uri1)), service.testGetFolderHash(toFolderBackupInfo(uri2)));\n\t\t\t};\n\n\t\t\tif (platform.isMacintosh) {\n\t\t\t\tassertFolderHash(URI.file('/foo'), URI.file('/FOO'));\n\t\t\t}\n\n\t\t\tif (platform.isWindows) {\n\t\t\t\tassertFolderHash(URI.file('c:\\\\foo'), URI.file('C:\\\\FOO'));\n\t\t\t}\n\t\t});\n\t});\n\n\tsuite('mixed path casing', () => {\n\t\ttest('should handle case insensitive paths properly (registerWindowForBackupsSync) (folder workspace)', () => {\n\t\t\tservice.registerFolderBackup(toFolderBackupInfo(fooFile));\n\t\t\tservice.registerFolderBackup(toFolderBackupInfo(URI.file(fooFile.fsPath.toUpperCase())));\n\n\t\t\tif (platform.isLinux) {\n\t\t\t\tassert.strictEqual(service.testGetFolderBackups().length, 2);\n\t\t\t} else {\n\t\t\t\tassert.strictEqual(service.testGetFolderBackups().length, 1);\n\t\t\t}\n\t\t});\n\n\t\ttest('should handle case insensitive paths properly (registerWindowForBackupsSync) (root workspace)', () => {\n\t\t\tservice.registerWorkspaceBackup(toWorkspaceBackupInfo(fooFile.fsPath));\n\t\t\tservice.registerWorkspaceBackup(toWorkspaceBackupInfo(fooFile.fsPath.toUpperCase()));\n\n\t\t\tif (platform.isLinux) {\n\t\t\t\tassert.strictEqual(service.testGetWorkspaceBackups().length, 2);\n\t\t\t} else {\n\t\t\t\tassert.strictEqual(service.testGetWorkspaceBackups().length, 1);\n\t\t\t}\n\t\t});\n\t});\n\n\tsuite('getDirtyWorkspaces', () => {\n\t\ttest('should report if a workspace or folder has backups', async () => {\n\t\t\tconst folderBackupPath = service.registerFolderBackup(toFolderBackupInfo(fooFile));\n\n\t\t\tconst backupWorkspaceInfo = toWorkspaceBackupInfo(fooFile.fsPath);\n\t\t\tconst workspaceBackupPath = service.registerWorkspaceBackup(backupWorkspaceInfo);\n\n\t\t\tassert.strictEqual(((await service.getDirtyWorkspaces()).length), 0);\n\n\t\t\ttry {\n\t\t\t\tawait Promises.mkdir(path.join(folderBackupPath, Schemas.file), { recursive: true });\n\t\t\t\tawait Promises.mkdir(path.join(workspaceBackupPath, Schemas.untitled), { recursive: true });\n\t\t\t} catch (error) {\n\t\t\t\t// ignore - folder might exist already\n\t\t\t}\n\n\t\t\tassert.strictEqual(((await service.getDirtyWorkspaces()).length), 0);\n\n\t\t\tfs.writeFileSync(path.join(folderBackupPath, Schemas.file, '594a4a9d82a277a899d4713a5b08f504'), '');\n\t\t\tfs.writeFileSync(path.join(workspaceBackupPath, Schemas.untitled, '594a4a9d82a277a899d4713a5b08f504'), '');\n\n\t\t\tconst dirtyWorkspaces = await service.getDirtyWorkspaces();\n\t\t\tassert.strictEqual(dirtyWorkspaces.length, 2);\n\n\t\t\tlet found = 0;\n\t\t\tfor (const dirtyWorkpspace of dirtyWorkspaces) {\n\t\t\t\tif (isFolderBackupInfo(dirtyWorkpspace)) {\n\t\t\t\t\tif (isEqual(fooFile, dirtyWorkpspace.folderUri)) {\n\t\t\t\t\t\tfound++;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (isEqual(backupWorkspaceInfo.workspace.configPath, dirtyWorkpspace.workspace.configPath)) {\n\t\t\t\t\t\tfound++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tassert.strictEqual(found, 2);\n\t\t});\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"]}