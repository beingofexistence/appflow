{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/backup/node/backup.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAShG,SAAgB,IAAI,CAAoB,GAAY;QACnD,MAAM,SAAS,GAAG,GAAyC,CAAC;QAE5D,OAAO,OAAO,SAAS,EAAE,YAAY,KAAK,QAAQ,CAAC;IACpD,CAAC;IAJD,oBAIC;IAQD,SAAgB,IAAI,CAAsB,0BAAuD;QAChG,IAAI,oBAAoB,GAA2B,EAAE,CAAC;QACtD,IAAI;YACH,IAAI,KAAK,CAAC,OAAO,CAAC,0BAA0B,CAAC,UAAU,CAAC,EAAE;gBACzD,oBAAoB,GAAG,0BAA0B,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE,CAAC,CAC7E;oBACC,SAAS,EAAE;wBACV,EAAE,EAAE,SAAS,CAAC,EAAE;wBAChB,UAAU,EAAE,SAAG,CAAC,KAAK,CAAC,SAAS,CAAC,aAAa,CAAC;qBAC9C;oBACD,eAAe,EAAE,SAAS,CAAC,eAAe;iBAC1C,CACD,CAAC,CAAC;aACH;SACD;QAAC,OAAO,CAAC,EAAE;YACX,gCAAgC;SAChC;QAED,OAAO,oBAAoB,CAAC;IAC7B,CAAC;IAnBD,oBAmBC;IAOD,SAAgB,IAAI,CAAmB,0BAAuD;QAC7F,IAAI,iBAAiB,GAAwB,EAAE,CAAC;QAChD,IAAI;YACH,IAAI,KAAK,CAAC,OAAO,CAAC,0BAA0B,CAAC,OAAO,CAAC,EAAE;gBACtD,iBAAiB,GAAG,0BAA0B,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC,CACpE;oBACC,SAAS,EAAE,SAAG,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC;oBACtC,eAAe,EAAE,MAAM,CAAC,eAAe;iBACvC,CACD,CAAC,CAAC;aACH;SACD;QAAC,OAAO,CAAC,EAAE;YACX,gCAAgC;SAChC;QAED,OAAO,iBAAiB,CAAC;IAC1B,CAAC;IAhBD,oBAgBC","file":"backup.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { IBaseBackupInfo, IFolderBackupInfo, IWorkspaceBackupInfo } from 'vs/platform/backup/common/backup';\n\nexport interface IEmptyWindowBackupInfo extends IBaseBackupInfo {\n\treadonly backupFolder: string;\n}\n\nexport function isEmptyWindowBackupInfo(obj: unknown): obj is IEmptyWindowBackupInfo {\n\tconst candidate = obj as IEmptyWindowBackupInfo | undefined;\n\n\treturn typeof candidate?.backupFolder === 'string';\n}\n\nexport interface ISerializedWorkspaceBackupInfo {\n\treadonly id: string;\n\treadonly configURIPath: string;\n\tremoteAuthority?: string;\n}\n\nexport function deserializeWorkspaceInfos(serializedBackupWorkspaces: ISerializedBackupWorkspaces): IWorkspaceBackupInfo[] {\n\tlet workspaceBackupInfos: IWorkspaceBackupInfo[] = [];\n\ttry {\n\t\tif (Array.isArray(serializedBackupWorkspaces.workspaces)) {\n\t\t\tworkspaceBackupInfos = serializedBackupWorkspaces.workspaces.map(workspace => (\n\t\t\t\t{\n\t\t\t\t\tworkspace: {\n\t\t\t\t\t\tid: workspace.id,\n\t\t\t\t\t\tconfigPath: URI.parse(workspace.configURIPath)\n\t\t\t\t\t},\n\t\t\t\t\tremoteAuthority: workspace.remoteAuthority\n\t\t\t\t}\n\t\t\t));\n\t\t}\n\t} catch (e) {\n\t\t// ignore URI parsing exceptions\n\t}\n\n\treturn workspaceBackupInfos;\n}\n\nexport interface ISerializedFolderBackupInfo {\n\treadonly folderUri: string;\n\tremoteAuthority?: string;\n}\n\nexport function deserializeFolderInfos(serializedBackupWorkspaces: ISerializedBackupWorkspaces): IFolderBackupInfo[] {\n\tlet folderBackupInfos: IFolderBackupInfo[] = [];\n\ttry {\n\t\tif (Array.isArray(serializedBackupWorkspaces.folders)) {\n\t\t\tfolderBackupInfos = serializedBackupWorkspaces.folders.map(folder => (\n\t\t\t\t{\n\t\t\t\t\tfolderUri: URI.parse(folder.folderUri),\n\t\t\t\t\tremoteAuthority: folder.remoteAuthority\n\t\t\t\t}\n\t\t\t));\n\t\t}\n\t} catch (e) {\n\t\t// ignore URI parsing exceptions\n\t}\n\n\treturn folderBackupInfos;\n}\n\nexport interface ISerializedEmptyWindowBackupInfo extends IEmptyWindowBackupInfo { }\n\nexport interface ILegacySerializedBackupWorkspaces {\n\treadonly rootURIWorkspaces: ISerializedWorkspaceBackupInfo[];\n\treadonly folderWorkspaceInfos: ISerializedFolderBackupInfo[];\n\treadonly emptyWorkspaceInfos: ISerializedEmptyWindowBackupInfo[];\n}\n\nexport interface ISerializedBackupWorkspaces {\n\treadonly workspaces: ISerializedWorkspaceBackupInfo[];\n\treadonly folders: ISerializedFolderBackupInfo[];\n\treadonly emptyWindows: ISerializedEmptyWindowBackupInfo[];\n}\n"]}