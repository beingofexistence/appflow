{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/opener/common/opener.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IASnF,QAAA,GAAG,GAAc,IAAA,mBAAG,EAA6B,eAAe,CAAC,CAAC;IA2G/E,SAAgB,GAAG,CAAW,MAAoB,EAAE,MAAc;QACjE,IAAI,SAAG,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE;YACtB,OAAO,IAAA,aAAG,EAAc,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;SAC/C;aAAM;YACN,OAAO,IAAA,aAAG,EAAkB,MAAM,EAAE,MAAM,GAAG,GAAG,CAAC,CAAC;SAClD;IACF,CAAC;IAND,kBAMC;IAED,SAAgB,GAAG,CAAe,MAAoB,EAAE,GAAG,OAAiB;QAC3E,OAAO,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,GAAG,CAAW,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;IAC9D,CAAC;IAFD,kBAEC;IAED;;;;;;OAMG;IACH,SAAgB,GAAG,CAAW,GAAQ,EAAE,SAA+B;QACtE,OAAO,GAAG,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,GAAG,SAAS,CAAC,eAAe,IAAI,SAAS,CAAC,WAAW,GAAG,SAAS,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,aAAa,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;IAC9M,CAAC;IAFD,kBAEC;IAED;;;;;;;;;OASG;IACH,SAAgB,GAAG,CAAc,GAAQ;QACxC,IAAI,SAAS,GAAqC,SAAS,CAAC;QAC5D,MAAM,KAAK,GAAG,2CAA2C,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QAC7E,IAAI,KAAK,EAAE;YACV,SAAS,GAAG;gBACX,eAAe,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACnC,WAAW,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC9C,aAAa,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS;gBACxD,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS;aACrE,CAAC;YACF,GAAG,GAAG,GAAG,CAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC,CAAC;SACjC;QACD,OAAO,EAAE,SAAS,EAAE,GAAG,EAAE,CAAC;IAC3B,CAAC;IAbD,kBAaC","file":"opener.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { equalsIgnoreCase, startsWithIgnoreCase } from 'vs/base/common/strings';\nimport { URI } from 'vs/base/common/uri';\nimport { IEditorOptions, ITextEditorSelection } from 'vs/platform/editor/common/editor';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport const IOpenerService = createDecorator<IOpenerService>('openerService');\n\nexport type OpenInternalOptions = {\n\n\t/**\n\t * Signals that the intent is to open an editor to the side\n\t * of the currently active editor.\n\t */\n\treadonly openToSide?: boolean;\n\n\t/**\n\t * Extra editor options to apply in case an editor is used to open.\n\t */\n\treadonly editorOptions?: IEditorOptions;\n\n\t/**\n\t * Signals that the editor to open was triggered through a user\n\t * action, such as keyboard or mouse usage.\n\t */\n\treadonly fromUserGesture?: boolean;\n\n\t/**\n\t * Allow command links to be handled.\n\t *\n\t * If this is an array, then only the commands included in the array can be run.\n\t */\n\treadonly allowCommands?: boolean | readonly string[];\n};\n\nexport type OpenExternalOptions = {\n\treadonly openExternal?: boolean;\n\treadonly allowTunneling?: boolean;\n\treadonly allowContributedOpeners?: boolean | string;\n\treadonly fromWorkspace?: boolean;\n};\n\nexport type OpenOptions = OpenInternalOptions & OpenExternalOptions;\n\nexport type ResolveExternalUriOptions = { readonly allowTunneling?: boolean };\n\nexport interface IResolvedExternalUri extends IDisposable {\n\tresolved: URI;\n}\n\nexport interface IOpener {\n\topen(resource: URI | string, options?: OpenInternalOptions | OpenExternalOptions): Promise<boolean>;\n}\n\nexport interface IExternalOpener {\n\topenExternal(href: string, ctx: { sourceUri: URI; preferredOpenerId?: string }, token: CancellationToken): Promise<boolean>;\n\tdispose?(): void;\n}\n\nexport interface IValidator {\n\tshouldOpen(resource: URI | string, openOptions?: OpenOptions): Promise<boolean>;\n}\n\nexport interface IExternalUriResolver {\n\tresolveExternalUri(resource: URI, options?: OpenOptions): Promise<{ resolved: URI; dispose(): void } | undefined>;\n}\n\nexport interface IOpenerService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Register a participant that can handle the open() call.\n\t */\n\tregisterOpener(opener: IOpener): IDisposable;\n\n\t/**\n\t * Register a participant that can validate if the URI resource be opened.\n\t * Validators are run before openers.\n\t */\n\tregisterValidator(validator: IValidator): IDisposable;\n\n\t/**\n\t * Register a participant that can resolve an external URI resource to be opened.\n\t */\n\tregisterExternalUriResolver(resolver: IExternalUriResolver): IDisposable;\n\n\t/**\n\t * Sets the handler for opening externally. If not provided,\n\t * a default handler will be used.\n\t */\n\tsetDefaultExternalOpener(opener: IExternalOpener): void;\n\n\t/**\n\t * Registers a new opener external resources openers.\n\t */\n\tregisterExternalOpener(opener: IExternalOpener): IDisposable;\n\n\t/**\n\t * Opens a resource, like a webaddress, a document uri, or executes command.\n\t *\n\t * @param resource A resource\n\t * @return A promise that resolves when the opening is done.\n\t */\n\topen(resource: URI | string, options?: OpenInternalOptions | OpenExternalOptions): Promise<boolean>;\n\n\t/**\n\t * Resolve a resource to its external form.\n\t * @throws whenever resolvers couldn't resolve this resource externally.\n\t */\n\tresolveExternalUri(resource: URI, options?: ResolveExternalUriOptions): Promise<IResolvedExternalUri>;\n}\n\nexport function matchesScheme(target: URI | string, scheme: string): boolean {\n\tif (URI.isUri(target)) {\n\t\treturn equalsIgnoreCase(target.scheme, scheme);\n\t} else {\n\t\treturn startsWithIgnoreCase(target, scheme + ':');\n\t}\n}\n\nexport function matchesSomeScheme(target: URI | string, ...schemes: string[]): boolean {\n\treturn schemes.some(scheme => matchesScheme(target, scheme));\n}\n\n/**\n * Encodes selection into the `URI`.\n *\n * IMPORTANT: you MUST use `extractSelection` to separate the selection\n * again from the original `URI` before passing the `URI` into any\n * component that is not aware of selections.\n */\nexport function withSelection(uri: URI, selection: ITextEditorSelection): URI {\n\treturn uri.with({ fragment: `${selection.startLineNumber},${selection.startColumn}${selection.endLineNumber ? `-${selection.endLineNumber}${selection.endColumn ? `,${selection.endColumn}` : ''}` : ''}` });\n}\n\n/**\n * file:///some/file.js#73\n * file:///some/file.js#L73\n * file:///some/file.js#73,84\n * file:///some/file.js#L73,84\n * file:///some/file.js#73-83\n * file:///some/file.js#L73-L83\n * file:///some/file.js#73,84-83,52\n * file:///some/file.js#L73,84-L83,52\n */\nexport function extractSelection(uri: URI): { selection: ITextEditorSelection | undefined; uri: URI } {\n\tlet selection: ITextEditorSelection | undefined = undefined;\n\tconst match = /^L?(\\d+)(?:,(\\d+))?(-L?(\\d+)(?:,(\\d+))?)?/.exec(uri.fragment);\n\tif (match) {\n\t\tselection = {\n\t\t\tstartLineNumber: parseInt(match[1]),\n\t\t\tstartColumn: match[2] ? parseInt(match[2]) : 1,\n\t\t\tendLineNumber: match[4] ? parseInt(match[4]) : undefined,\n\t\t\tendColumn: match[4] ? (match[5] ? parseInt(match[5]) : 1) : undefined\n\t\t};\n\t\turi = uri.with({ fragment: '' });\n\t}\n\treturn { selection, uri };\n}\n"]}