{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/opener/test/common/opener.test.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;IAMhG,KAAK,CAAC,kBAAkB,EAAE,GAAG,EAAE;QAE9B,IAAI,CAAC,4CAA4C,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,GAAG,GAAG,SAAG,CAAC,KAAK,CAAC,yBAAyB,CAAC,CAAC;YACjD,MAAM,CAAC,eAAe,CAAC,IAAA,YAAG,EAAc,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,eAAe,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,aAAa,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC;QAClJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,wDAAwD,EAAE,KAAK,IAAI,EAAE;YACzE,MAAM,GAAG,GAAG,SAAG,CAAC,KAAK,CAAC,0BAA0B,CAAC,CAAC;YAClD,MAAM,CAAC,eAAe,CAAC,IAAA,YAAG,EAAc,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,eAAe,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,aAAa,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC;QAClJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,uDAAuD,EAAE,KAAK,IAAI,EAAE;YACxE,MAAM,GAAG,GAAG,SAAG,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;YACpD,MAAM,CAAC,eAAe,CAAC,IAAA,YAAG,EAAc,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,eAAe,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,aAAa,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC;QACnJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mEAAmE,EAAE,KAAK,IAAI,EAAE;YACpF,MAAM,GAAG,GAAG,SAAG,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC;YACrD,MAAM,CAAC,eAAe,CAAC,IAAA,YAAG,EAAc,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,eAAe,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,aAAa,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,CAAC,CAAC;QACnJ,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YACnE,MAAM,GAAG,GAAG,SAAG,CAAC,KAAK,CAAC,4BAA4B,CAAC,CAAC;YACpD,MAAM,CAAC,eAAe,CAAC,IAAA,YAAG,EAAc,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,eAAe,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,aAAa,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;QACnI,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,8DAA8D,EAAE,KAAK,IAAI,EAAE;YAC/E,MAAM,GAAG,GAAG,SAAG,CAAC,KAAK,CAAC,8BAA8B,CAAC,CAAC;YACtD,MAAM,CAAC,eAAe,CAAC,IAAA,YAAG,EAAc,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,eAAe,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,aAAa,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;QACnI,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,6EAA6E,EAAE,KAAK,IAAI,EAAE;YAC9F,MAAM,GAAG,GAAG,SAAG,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC;YACrD,MAAM,CAAC,eAAe,CAAC,IAAA,YAAG,EAAc,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,eAAe,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,aAAa,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;QACnI,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,2EAA2E,EAAE,KAAK,IAAI,EAAE;YAC5F,MAAM,GAAG,GAAG,SAAG,CAAC,KAAK,CAAC,6BAA6B,CAAC,CAAC;YACrD,MAAM,CAAC,eAAe,CAAC,IAAA,YAAG,EAAc,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,eAAe,EAAE,EAAE,EAAE,WAAW,EAAE,CAAC,EAAE,aAAa,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,EAAE,CAAC,CAAC;QACnI,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,sCAAsC,EAAE,KAAK,IAAI,EAAE;YACvD,MAAM,GAAG,GAAG,SAAG,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC;YAC1D,MAAM,CAAC,eAAe,CAAC,IAAA,YAAG,EAAc,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,eAAe,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,aAAa,EAAE,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC;QACrI,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,kDAAkD,EAAE,KAAK,IAAI,EAAE;YACnE,MAAM,GAAG,GAAG,SAAG,CAAC,KAAK,CAAC,oCAAoC,CAAC,CAAC;YAC5D,MAAM,CAAC,eAAe,CAAC,IAAA,YAAG,EAAc,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,eAAe,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,aAAa,EAAE,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC;QACrI,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,oDAAoD,EAAE,KAAK,IAAI,EAAE;YACrE,MAAM,CAAC,eAAe,CAAC,IAAA,YAAG,EAAW,SAAG,CAAC,KAAK,CAAC,sBAAsB,CAAC,EAAE,EAAE,eAAe,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,CAAC,QAAQ,EAAE,EAAE,8BAA8B,CAAC,CAAC;QAC/J,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,mEAAmE,EAAE,KAAK,IAAI,EAAE;YACpF,MAAM,CAAC,eAAe,CAAC,IAAA,YAAG,EAAW,SAAG,CAAC,KAAK,CAAC,sBAAsB,CAAC,EAAE,EAAE,eAAe,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,aAAa,EAAE,EAAE,EAAE,CAAC,CAAC,QAAQ,EAAE,EAAE,iCAAiC,CAAC,CAAC;QACrL,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,8EAA8E,EAAE,KAAK,IAAI,EAAE;YAC/F,MAAM,CAAC,eAAe,CAAC,IAAA,YAAG,EAAW,SAAG,CAAC,KAAK,CAAC,sBAAsB,CAAC,EAAE,EAAE,eAAe,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,aAAa,EAAE,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC,QAAQ,EAAE,EAAE,sCAAsC,CAAC,CAAC;QACzM,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,qDAAqD,EAAE,KAAK,IAAI,EAAE;YACtE,IAAI,GAAG,GAAG,SAAG,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;YAE5C,MAAM,gBAAgB,GAAG,IAAA,YAAG,EAAW,SAAG,CAAC,KAAK,CAAC,sBAAsB,CAAC,EAAE,EAAE,eAAe,EAAE,EAAE,EAAE,WAAW,EAAE,EAAE,EAAE,aAAa,EAAE,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE,CAAC,CAAC;YACtJ,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,IAAA,YAAG,EAAc,gBAAgB,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;YAEtF,GAAG,GAAG,SAAG,CAAC,KAAK,CAAC,sBAAsB,CAAC,CAAC;YACxC,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,IAAA,YAAG,EAAc,GAAG,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC1E,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC","file":"opener.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { URI } from 'vs/base/common/uri';\nimport { extractSelection, withSelection } from 'vs/platform/opener/common/opener';\n\nsuite('extractSelection', () => {\n\n\ttest('extractSelection with only startLineNumber', async () => {\n\t\tconst uri = URI.parse('file:///some/file.js#73');\n\t\tassert.deepStrictEqual(extractSelection(uri).selection, { startLineNumber: 73, startColumn: 1, endLineNumber: undefined, endColumn: undefined });\n\t});\n\n\ttest('extractSelection with only startLineNumber in L format', async () => {\n\t\tconst uri = URI.parse('file:///some/file.js#L73');\n\t\tassert.deepStrictEqual(extractSelection(uri).selection, { startLineNumber: 73, startColumn: 1, endLineNumber: undefined, endColumn: undefined });\n\t});\n\n\ttest('extractSelection with startLineNumber and startColumn', async () => {\n\t\tconst uri = URI.parse('file:///some/file.js#73,84');\n\t\tassert.deepStrictEqual(extractSelection(uri).selection, { startLineNumber: 73, startColumn: 84, endLineNumber: undefined, endColumn: undefined });\n\t});\n\n\ttest('extractSelection with startLineNumber and startColumn in L format', async () => {\n\t\tconst uri = URI.parse('file:///some/file.js#L73,84');\n\t\tassert.deepStrictEqual(extractSelection(uri).selection, { startLineNumber: 73, startColumn: 84, endLineNumber: undefined, endColumn: undefined });\n\t});\n\n\ttest('extractSelection with range and no column number', async () => {\n\t\tconst uri = URI.parse('file:///some/file.js#73-83');\n\t\tassert.deepStrictEqual(extractSelection(uri).selection, { startLineNumber: 73, startColumn: 1, endLineNumber: 83, endColumn: 1 });\n\t});\n\n\ttest('extractSelection with range and no column number in L format', async () => {\n\t\tconst uri = URI.parse('file:///some/file.js#L73-L83');\n\t\tassert.deepStrictEqual(extractSelection(uri).selection, { startLineNumber: 73, startColumn: 1, endLineNumber: 83, endColumn: 1 });\n\t});\n\n\ttest('extractSelection with range and no column number in L format only for start', async () => {\n\t\tconst uri = URI.parse('file:///some/file.js#L73-83');\n\t\tassert.deepStrictEqual(extractSelection(uri).selection, { startLineNumber: 73, startColumn: 1, endLineNumber: 83, endColumn: 1 });\n\t});\n\n\ttest('extractSelection with range and no column number in L format only for end', async () => {\n\t\tconst uri = URI.parse('file:///some/file.js#73-L83');\n\t\tassert.deepStrictEqual(extractSelection(uri).selection, { startLineNumber: 73, startColumn: 1, endLineNumber: 83, endColumn: 1 });\n\t});\n\n\ttest('extractSelection with complete range', async () => {\n\t\tconst uri = URI.parse('file:///some/file.js#73,84-83,52');\n\t\tassert.deepStrictEqual(extractSelection(uri).selection, { startLineNumber: 73, startColumn: 84, endLineNumber: 83, endColumn: 52 });\n\t});\n\n\ttest('extractSelection with complete range in L format', async () => {\n\t\tconst uri = URI.parse('file:///some/file.js#L73,84-L83,52');\n\t\tassert.deepStrictEqual(extractSelection(uri).selection, { startLineNumber: 73, startColumn: 84, endLineNumber: 83, endColumn: 52 });\n\t});\n\n\ttest('withSelection with startLineNumber and startColumn', async () => {\n\t\tassert.deepStrictEqual(withSelection(URI.parse('file:///some/file.js'), { startLineNumber: 73, startColumn: 84 }).toString(), 'file:///some/file.js#73%2C84');\n\t});\n\n\ttest('withSelection with startLineNumber, startColumn and endLineNumber', async () => {\n\t\tassert.deepStrictEqual(withSelection(URI.parse('file:///some/file.js'), { startLineNumber: 73, startColumn: 84, endLineNumber: 83 }).toString(), 'file:///some/file.js#73%2C84-83');\n\t});\n\n\ttest('withSelection with startLineNumber, startColumn and endLineNumber, endColumn', async () => {\n\t\tassert.deepStrictEqual(withSelection(URI.parse('file:///some/file.js'), { startLineNumber: 73, startColumn: 84, endLineNumber: 83, endColumn: 52 }).toString(), 'file:///some/file.js#73%2C84-83%2C52');\n\t});\n\n\ttest('extractSelection returns original withSelection URI', async () => {\n\t\tlet uri = URI.parse('file:///some/file.js');\n\n\t\tconst uriWithSelection = withSelection(URI.parse('file:///some/file.js'), { startLineNumber: 73, startColumn: 84, endLineNumber: 83, endColumn: 52 });\n\t\tassert.strictEqual(uri.toString(), extractSelection(uriWithSelection).uri.toString());\n\n\t\turi = URI.parse('file:///some/file.js');\n\t\tassert.strictEqual(uri.toString(), extractSelection(uri).uri.toString());\n\t});\n});\n"]}