{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/window/electron-main/window.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IA4EhG,IAAkB,UAgBjB;IAhBD,WAAkB,UAAU;QAE3B;;WAEG;QACH,iDAAW,CAAA;QAEX;;WAEG;QACH,2CAAI,CAAA;QAEJ;;WAEG;QACH,+CAAM,CAAA;IACP,CAAC,EAhBiB,UAAU,0BAAV,UAAU,QAgB3B;IAED,IAAkB,YAqBjB;IArBD,WAAkB,YAAY;QAE7B;;WAEG;QACH,iDAAS,CAAA;QAET;;WAEG;QACH,+CAAI,CAAA;QAEJ;;WAEG;QACH,mDAAM,CAAA;QAEN;;WAEG;QACH,+CAAI,CAAA;IACL,CAAC,EArBiB,YAAY,4BAAZ,YAAY,QAqB7B;IAWM,MAAM,IAAI,GAAiB,UAAU,IAAI,4BAAoB;QACnE,OAAO;YACN,KAAK,EAAE,IAAI;YACX,MAAM,EAAE,GAAG;YACX,IAAI;SACJ,CAAC;IACH,CAAC,CAAC;IANW,QAAA,IAAI,QAMf;IAEF,IAAkB,UAKjB;IALD,WAAkB,UAAU;QAC3B,qDAAS,CAAA;QACT,+CAAM,CAAA;QACN,qDAAS,CAAA;QACT,uDAAU,CAAA;IACX,CAAC,EALiB,UAAU,0BAAV,UAAU,QAK3B;IAOD,IAAkB,WAgBjB;IAhBD,WAAkB,WAAW;QAE5B;;WAEG;QACH,6DAAgB,CAAA;QAEhB;;WAEG;QACH,6DAAgB,CAAA;QAEhB;;WAEG;QACH,6CAAQ,CAAA;IACT,CAAC,EAhBiB,WAAW,2BAAX,WAAW,QAgB5B","file":"window.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { BrowserWindow, Rectangle } from 'electron';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Event } from 'vs/base/common/event';\nimport { IDisposable } from 'vs/base/common/lifecycle';\nimport { ISerializableCommandAction } from 'vs/platform/action/common/action';\nimport { NativeParsedArgs } from 'vs/platform/environment/common/argv';\nimport { IUserDataProfile } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { INativeWindowConfiguration } from 'vs/platform/window/common/window';\nimport { ISingleFolderWorkspaceIdentifier, IWorkspaceIdentifier } from 'vs/platform/workspace/common/workspace';\n\nexport interface ICodeWindow extends IDisposable {\n\n\treadonly onWillLoad: Event<ILoadEvent>;\n\treadonly onDidSignalReady: Event<void>;\n\treadonly onDidTriggerSystemContextMenu: Event<{ x: number; y: number }>;\n\treadonly onDidClose: Event<void>;\n\treadonly onDidDestroy: Event<void>;\n\n\treadonly whenClosedOrLoaded: Promise<void>;\n\n\treadonly id: number;\n\treadonly win: BrowserWindow | null; /* `null` after being disposed */\n\treadonly config: INativeWindowConfiguration | undefined;\n\n\treadonly openedWorkspace?: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier;\n\n\treadonly profile?: IUserDataProfile;\n\n\treadonly backupPath?: string;\n\n\treadonly remoteAuthority?: string;\n\n\treadonly isExtensionDevelopmentHost: boolean;\n\treadonly isExtensionTestHost: boolean;\n\n\treadonly lastFocusTime: number;\n\n\treadonly isReady: boolean;\n\tready(): Promise<ICodeWindow>;\n\tsetReady(): void;\n\n\taddTabbedWindow(window: ICodeWindow): void;\n\n\tload(config: INativeWindowConfiguration, options?: { isReload?: boolean }): void;\n\treload(cli?: NativeParsedArgs): void;\n\n\tfocus(options?: { force: boolean }): void;\n\tclose(): void;\n\n\tgetBounds(): Rectangle;\n\n\tsend(channel: string, ...args: any[]): void;\n\tsendWhenReady(channel: string, token: CancellationToken, ...args: any[]): void;\n\n\treadonly isFullScreen: boolean;\n\ttoggleFullScreen(): void;\n\n\tisMinimized(): boolean;\n\n\tsetRepresentedFilename(name: string): void;\n\tgetRepresentedFilename(): string | undefined;\n\n\tsetDocumentEdited(edited: boolean): void;\n\tisDocumentEdited(): boolean;\n\n\thandleTitleDoubleClick(): void;\n\n\tupdateTouchBar(items: ISerializableCommandAction[][]): void;\n\n\tserializeWindowState(): IWindowState;\n\n\tupdateWindowControls(options: { height?: number; backgroundColor?: string; foregroundColor?: string }): void;\n}\n\nexport const enum LoadReason {\n\n\t/**\n\t * The window is loaded for the first time.\n\t */\n\tINITIAL = 1,\n\n\t/**\n\t * The window is loaded into a different workspace context.\n\t */\n\tLOAD,\n\n\t/**\n\t * The window is reloaded.\n\t */\n\tRELOAD\n}\n\nexport const enum UnloadReason {\n\n\t/**\n\t * The window is closed.\n\t */\n\tCLOSE = 1,\n\n\t/**\n\t * All windows unload because the application quits.\n\t */\n\tQUIT,\n\n\t/**\n\t * The window is reloaded.\n\t */\n\tRELOAD,\n\n\t/**\n\t * The window is loaded into a different workspace context.\n\t */\n\tLOAD\n}\n\nexport interface IWindowState {\n\twidth?: number;\n\theight?: number;\n\tx?: number;\n\ty?: number;\n\tmode?: WindowMode;\n\treadonly display?: number;\n}\n\nexport const defaultWindowState = function (mode = WindowMode.Normal): IWindowState {\n\treturn {\n\t\twidth: 1024,\n\t\theight: 768,\n\t\tmode\n\t};\n};\n\nexport const enum WindowMode {\n\tMaximized,\n\tNormal,\n\tMinimized, // not used anymore, but also cannot remove due to existing stored UI state (needs migration)\n\tFullscreen\n}\n\nexport interface ILoadEvent {\n\treadonly workspace: IWorkspaceIdentifier | ISingleFolderWorkspaceIdentifier | undefined;\n\treadonly reason: LoadReason;\n}\n\nexport const enum WindowError {\n\n\t/**\n\t * Maps to the `unresponsive` event on a `BrowserWindow`.\n\t */\n\tUNRESPONSIVE = 1,\n\n\t/**\n\t * Maps to the `render-process-gone` event on a `WebContents`.\n\t */\n\tPROCESS_GONE = 2,\n\n\t/**\n\t * Maps to the `did-fail-load` event on a `WebContents`.\n\t */\n\tLOAD = 3\n}\n"]}