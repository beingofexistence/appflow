{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/clipboard/test/common/testClipboardService.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAKhG,MAAa,IAAI;QAAjB;YAIS,MAAC,GAA0B,SAAS,CAAC;YAUrC,MAAC,GAA8B,SAAS,CAAC;YAUzC,MAAC,GAA8B,SAAS,CAAC;QAalD,CAAC;QA/BA,KAAK,CAAC,SAAS,CAAC,IAAY,EAAE,IAAa;YAC1C,IAAI,CAAC,CAAC,GAAM,IAAI,CAAC;QAClB,CAAC;QAED,KAAK,CAAC,QAAQ,CAAC,IAAa;YAC3B,OAAO,IAAI,CAAC,CAAC,IAAO,EAAE,CAAC;QACxB,CAAC;QAID,KAAK,CAAC,YAAY;YACjB,OAAO,IAAI,CAAC,CAAC,IAAW,EAAE,CAAC;QAC5B,CAAC;QAED,KAAK,CAAC,aAAa,CAAC,IAAY;YAC/B,IAAI,CAAC,CAAC,GAAU,IAAI,CAAC;QACtB,CAAC;QAID,KAAK,CAAC,cAAc,CAAC,SAAgB;YACpC,IAAI,CAAC,CAAC,GAAW,SAAS,CAAC;QAC5B,CAAC;QAED,KAAK,CAAC,aAAa;YAClB,OAAO,IAAI,CAAC,CAAC,IAAY,EAAE,CAAC;QAC7B,CAAC;QAED,KAAK,CAAC,YAAY;YACjB,OAAO,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAS,IAAI,IAAI,CAAC,CAAC,CAAS,MAAM,GAAG,CAAC,CAAC;QACnE,CAAC;KACD;IArCD,oBAqCC","file":"testClipboardService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\n\nexport class TestClipboardService implements IClipboardService {\n\n\t_serviceBrand: undefined;\n\n\tprivate text: string | undefined = undefined;\n\n\tasync writeText(text: string, type?: string): Promise<void> {\n\t\tthis.text = text;\n\t}\n\n\tasync readText(type?: string): Promise<string> {\n\t\treturn this.text ?? '';\n\t}\n\n\tprivate findText: string | undefined = undefined;\n\n\tasync readFindText(): Promise<string> {\n\t\treturn this.findText ?? '';\n\t}\n\n\tasync writeFindText(text: string): Promise<void> {\n\t\tthis.findText = text;\n\t}\n\n\tprivate resources: URI[] | undefined = undefined;\n\n\tasync writeResources(resources: URI[]): Promise<void> {\n\t\tthis.resources = resources;\n\t}\n\n\tasync readResources(): Promise<URI[]> {\n\t\treturn this.resources ?? [];\n\t}\n\n\tasync hasResources(): Promise<boolean> {\n\t\treturn Array.isArray(this.resources) && this.resources.length > 0;\n\t}\n}\n"]}