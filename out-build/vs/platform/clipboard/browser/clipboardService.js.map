{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/clipboard/browser/clipboardService.ts"],"names":[],"mappings":"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","file":"clipboardService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { isSafari, isWebkitWebView } from 'vs/base/browser/browser';\nimport { $, addDisposableListener } from 'vs/base/browser/dom';\nimport { DeferredPromise } from 'vs/base/common/async';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { URI } from 'vs/base/common/uri';\nimport { IClipboardService } from 'vs/platform/clipboard/common/clipboardService';\nimport { ILayoutService } from 'vs/platform/layout/browser/layoutService';\nimport { ILogService } from 'vs/platform/log/common/log';\n\nexport class BrowserClipboardService extends Disposable implements IClipboardService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly mapTextToType = new Map<string, string>(); // unsupported in web (only in-memory)\n\n\tconstructor(\n\t\t@ILayoutService private readonly layoutService: ILayoutService,\n\t\t@ILogService private readonly logService: ILogService) {\n\t\tsuper();\n\t\tif (isSafari || isWebkitWebView) {\n\t\t\tthis.installWebKitWriteTextWorkaround();\n\t\t}\n\t}\n\n\tprivate webKitPendingClipboardWritePromise: DeferredPromise<string> | undefined;\n\n\t// In Safari, it has the following note:\n\t//\n\t// \"The request to write to the clipboard must be triggered during a user gesture.\n\t// A call to clipboard.write or clipboard.writeText outside the scope of a user\n\t// gesture(such as \"click\" or \"touch\" event handlers) will result in the immediate\n\t// rejection of the promise returned by the API call.\"\n\t// From: https://webkit.org/blog/10855/async-clipboard-api/\n\t//\n\t// Since extensions run in a web worker, and handle gestures in an asynchronous way,\n\t// they are not classified by Safari as \"in response to a user gesture\" and will reject.\n\t//\n\t// This function sets up some handlers to work around that behavior.\n\tprivate installWebKitWriteTextWorkaround(): void {\n\t\tconst handler = () => {\n\t\t\tconst currentWritePromise = new DeferredPromise<string>();\n\n\t\t\t// Cancel the previous promise since we just created a new one in response to this new event\n\t\t\tif (this.webKitPendingClipboardWritePromise && !this.webKitPendingClipboardWritePromise.isSettled) {\n\t\t\t\tthis.webKitPendingClipboardWritePromise.cancel();\n\t\t\t}\n\t\t\tthis.webKitPendingClipboardWritePromise = currentWritePromise;\n\n\t\t\t// The ctor of ClipboardItem allows you to pass in a promise that will resolve to a string.\n\t\t\t// This allows us to pass in a Promise that will either be cancelled by another event or\n\t\t\t// resolved with the contents of the first call to this.writeText.\n\t\t\t// see https://developer.mozilla.org/en-US/docs/Web/API/ClipboardItem/ClipboardItem#parameters\n\t\t\tnavigator.clipboard.write([new ClipboardItem({\n\t\t\t\t'text/plain': currentWritePromise.p,\n\t\t\t})]).catch(async err => {\n\t\t\t\tif (!(err instanceof Error) || err.name !== 'NotAllowedError' || !currentWritePromise.isRejected) {\n\t\t\t\t\tthis.logService.error(err);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tif (this.layoutService.hasContainer) {\n\t\t\tthis._register(addDisposableListener(this.layoutService.container, 'click', handler));\n\t\t\tthis._register(addDisposableListener(this.layoutService.container, 'keydown', handler));\n\t\t}\n\t}\n\n\tasync writeText(text: string, type?: string): Promise<void> {\n\n\t\t// With type: only in-memory is supported\n\t\tif (type) {\n\t\t\tthis.mapTextToType.set(type, text);\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (this.webKitPendingClipboardWritePromise) {\n\t\t\t// For Safari, we complete this Promise which allows the call to `navigator.clipboard.write()`\n\t\t\t// above to resolve and successfully copy to the clipboard. If we let this continue, Safari\n\t\t\t// would throw an error because this call stack doesn't appear to originate from a user gesture.\n\t\t\treturn this.webKitPendingClipboardWritePromise.complete(text);\n\t\t}\n\n\t\t// Guard access to navigator.clipboard with try/catch\n\t\t// as we have seen DOMExceptions in certain browsers\n\t\t// due to security policies.\n\t\ttry {\n\t\t\treturn await navigator.clipboard.writeText(text);\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\t\t}\n\n\t\t// Fallback to textarea and execCommand solution\n\n\t\tconst activeElement = document.activeElement;\n\n\t\tconst textArea: HTMLTextAreaElement = document.body.appendChild($('textarea', { 'aria-hidden': true }));\n\t\ttextArea.style.height = '1px';\n\t\ttextArea.style.width = '1px';\n\t\ttextArea.style.position = 'absolute';\n\n\t\ttextArea.value = text;\n\t\ttextArea.focus();\n\t\ttextArea.select();\n\n\t\tdocument.execCommand('copy');\n\n\t\tif (activeElement instanceof HTMLElement) {\n\t\t\tactiveElement.focus();\n\t\t}\n\n\t\tdocument.body.removeChild(textArea);\n\n\t\treturn;\n\t}\n\n\tasync readText(type?: string): Promise<string> {\n\n\t\t// With type: only in-memory is supported\n\t\tif (type) {\n\t\t\treturn this.mapTextToType.get(type) || '';\n\t\t}\n\n\t\t// Guard access to navigator.clipboard with try/catch\n\t\t// as we have seen DOMExceptions in certain browsers\n\t\t// due to security policies.\n\t\ttry {\n\t\t\treturn await navigator.clipboard.readText();\n\t\t} catch (error) {\n\t\t\tconsole.error(error);\n\n\t\t\treturn '';\n\t\t}\n\t}\n\n\tprivate findText = ''; // unsupported in web (only in-memory)\n\n\tasync readFindText(): Promise<string> {\n\t\treturn this.findText;\n\t}\n\n\tasync writeFindText(text: string): Promise<void> {\n\t\tthis.findText = text;\n\t}\n\n\tprivate resources: URI[] = []; // unsupported in web (only in-memory)\n\n\tasync writeResources(resources: URI[]): Promise<void> {\n\t\tthis.resources = resources;\n\t}\n\n\tasync readResources(): Promise<URI[]> {\n\t\treturn this.resources;\n\t}\n\n\tasync hasResources(): Promise<boolean> {\n\t\treturn this.resources.length > 0;\n\t}\n}\n"]}