{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/state/node/state.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAInF,QAAA,GAAG,GAAiB,IAAA,mBAAG,EAAgC,kBAAkB,CAAC,CAAC;IAU3E,QAAA,GAAG,GAAa,IAAA,mBAAG,EAA4B,cAAc,CAAC,CAAC","file":"state.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport const IStateReadService = createDecorator<IStateReadService>('stateReadService');\nexport interface IStateReadService {\n\n\treadonly _serviceBrand: undefined;\n\n\tgetItem<T>(key: string, defaultValue: T): T;\n\tgetItem<T>(key: string, defaultValue?: T): T | undefined;\n\n}\n\nexport const IStateService = createDecorator<IStateService>('stateService');\nexport interface IStateService extends IStateReadService {\n\n\treadonly _serviceBrand: undefined;\n\n\tsetItem(key: string, data?: object | string | number | boolean | undefined | null): void;\n\tsetItems(items: readonly { key: string; data?: object | string | number | boolean | undefined | null }[]): void;\n\n\tremoveItem(key: string): void;\n\n\tclose(): Promise<void>;\n}\n"]}