{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/state/node/stateService.ts"],"names":[],"mappings":"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","file":"stateService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { ThrottledDelayer } from 'vs/base/common/async';\nimport { VSBuffer } from 'vs/base/common/buffer';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { isUndefined, isUndefinedOrNull } from 'vs/base/common/types';\nimport { URI } from 'vs/base/common/uri';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { FileOperationError, FileOperationResult, IFileService } from 'vs/platform/files/common/files';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IStateReadService, IStateService } from 'vs/platform/state/node/state';\n\ntype StorageDatabase = { [key: string]: unknown };\n\nexport const enum SaveStrategy {\n\tIMMEDIATE,\n\tDELAYED\n}\n\nexport class FileStorage extends Disposable {\n\n\tprivate storage: StorageDatabase = Object.create(null);\n\tprivate lastSavedStorageContents = '';\n\n\tprivate readonly flushDelayer: ThrottledDelayer<void> | undefined;\n\n\tprivate initializing: Promise<void> | undefined = undefined;\n\tprivate closing: Promise<void> | undefined = undefined;\n\n\tconstructor(\n\t\tprivate readonly storagePath: URI,\n\t\tsaveStrategy: SaveStrategy,\n\t\tprivate readonly logService: ILogService,\n\t\tprivate readonly fileService: IFileService,\n\t) {\n\t\tsuper();\n\n\t\tthis.flushDelayer = saveStrategy === SaveStrategy.IMMEDIATE ? undefined : this._register(new ThrottledDelayer<void>(100 /* buffer saves over a short time */));\n\t}\n\n\tinit(): Promise<void> {\n\t\tif (!this.initializing) {\n\t\t\tthis.initializing = this.doInit();\n\t\t}\n\n\t\treturn this.initializing;\n\t}\n\n\tprivate async doInit(): Promise<void> {\n\t\ttry {\n\t\t\tthis.lastSavedStorageContents = (await this.fileService.readFile(this.storagePath)).value.toString();\n\t\t\tthis.storage = JSON.parse(this.lastSavedStorageContents);\n\t\t} catch (error) {\n\t\t\tif ((<FileOperationError>error).fileOperationResult !== FileOperationResult.FILE_NOT_FOUND) {\n\t\t\t\tthis.logService.error(error);\n\t\t\t}\n\t\t}\n\t}\n\n\tgetItem<T>(key: string, defaultValue: T): T;\n\tgetItem<T>(key: string, defaultValue?: T): T | undefined;\n\tgetItem<T>(key: string, defaultValue?: T): T | undefined {\n\t\tconst res = this.storage[key];\n\t\tif (isUndefinedOrNull(res)) {\n\t\t\treturn defaultValue;\n\t\t}\n\n\t\treturn res as T;\n\t}\n\n\tsetItem(key: string, data?: object | string | number | boolean | undefined | null): void {\n\t\tthis.setItems([{ key, data }]);\n\t}\n\n\tsetItems(items: readonly { key: string; data?: object | string | number | boolean | undefined | null }[]): void {\n\t\tlet save = false;\n\n\t\tfor (const { key, data } of items) {\n\n\t\t\t// Shortcut for data that did not change\n\t\t\tif (this.storage[key] === data) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Remove items when they are undefined or null\n\t\t\tif (isUndefinedOrNull(data)) {\n\t\t\t\tif (!isUndefined(this.storage[key])) {\n\t\t\t\t\tthis.storage[key] = undefined;\n\t\t\t\t\tsave = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Otherwise add an item\n\t\t\telse {\n\t\t\t\tthis.storage[key] = data;\n\t\t\t\tsave = true;\n\t\t\t}\n\t\t}\n\n\t\tif (save) {\n\t\t\tthis.save();\n\t\t}\n\t}\n\n\tremoveItem(key: string): void {\n\n\t\t// Only update if the key is actually present (not undefined)\n\t\tif (!isUndefined(this.storage[key])) {\n\t\t\tthis.storage[key] = undefined;\n\t\t\tthis.save();\n\t\t}\n\t}\n\n\tprivate async save(): Promise<void> {\n\t\tif (this.closing) {\n\t\t\treturn; // already about to close\n\t\t}\n\n\t\tif (this.flushDelayer) {\n\t\t\treturn this.flushDelayer.trigger(() => this.doSave());\n\t\t}\n\n\t\treturn this.doSave();\n\t}\n\n\tprivate async doSave(): Promise<void> {\n\t\tif (!this.initializing) {\n\t\t\treturn; // if we never initialized, we should not save our state\n\t\t}\n\n\t\t// Make sure to wait for init to finish first\n\t\tawait this.initializing;\n\n\t\t// Return early if the database has not changed\n\t\tconst serializedDatabase = JSON.stringify(this.storage, null, 4);\n\t\tif (serializedDatabase === this.lastSavedStorageContents) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Write to disk\n\t\ttry {\n\t\t\tawait this.fileService.writeFile(this.storagePath, VSBuffer.fromString(serializedDatabase), { atomic: { postfix: '.vsctmp' } });\n\t\t\tthis.lastSavedStorageContents = serializedDatabase;\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t}\n\t}\n\n\tasync close(): Promise<void> {\n\t\tif (!this.closing) {\n\t\t\tthis.closing = this.flushDelayer\n\t\t\t\t? this.flushDelayer.trigger(() => this.doSave(), 0 /* as soon as possible */)\n\t\t\t\t: this.doSave();\n\t\t}\n\n\t\treturn this.closing;\n\t}\n}\n\nexport class StateReadonlyService extends Disposable implements IStateReadService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprotected readonly fileStorage: FileStorage;\n\n\tconstructor(\n\t\tsaveStrategy: SaveStrategy,\n\t\t@IEnvironmentService environmentService: IEnvironmentService,\n\t\t@ILogService logService: ILogService,\n\t\t@IFileService fileService: IFileService\n\t) {\n\t\tsuper();\n\n\t\tthis.fileStorage = this._register(new FileStorage(environmentService.stateResource, saveStrategy, logService, fileService));\n\t}\n\n\tasync init(): Promise<void> {\n\t\tawait this.fileStorage.init();\n\t}\n\n\tgetItem<T>(key: string, defaultValue: T): T;\n\tgetItem<T>(key: string, defaultValue?: T): T | undefined;\n\tgetItem<T>(key: string, defaultValue?: T): T | undefined {\n\t\treturn this.fileStorage.getItem(key, defaultValue);\n\t}\n}\n\nexport class StateService extends StateReadonlyService implements IStateService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tsetItem(key: string, data?: object | string | number | boolean | undefined | null): void {\n\t\tthis.fileStorage.setItem(key, data);\n\t}\n\n\tsetItems(items: readonly { key: string; data?: object | string | number | boolean | undefined | null }[]): void {\n\t\tthis.fileStorage.setItems(items);\n\t}\n\n\tremoveItem(key: string): void {\n\t\tthis.fileStorage.removeItem(key);\n\t}\n\n\tclose(): Promise<void> {\n\t\treturn this.fileStorage.close();\n\t}\n}\n"]}