{"version":3,"sources":["vs/platform/remoteTunnel/common/remoteTunnel.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAanF,QAAA,IAAI,GAAmB,IAAA,mBAAG,EAAmC,sBAAsB,CAAC,CAAC;IA6BrF,QAAA,IAAI,GAAuC,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC;IAO1E,IAAiB,YAAY,CAsB5B;IAtBD,WAAiB,YAAY;QAiBf,yBAAY,GAAG,CAAC,aAAoC,EAAgB,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,cAAc,EAAE,aAAa,EAAE,CAAC,CAAC;QACjH,sBAAS,GAAG,CAAC,IAAoB,EAAE,oBAA6B,EAAa,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,IAAI,EAAE,oBAAoB,EAAE,CAAC,CAAC;QACpI,uBAAU,GAAG,CAAC,QAAiB,EAAc,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,QAAQ,EAAE,CAAC,CAAC;QACnF,0BAAa,GAAkB,EAAE,IAAI,EAAE,eAAe,EAAE,CAAC;IAEvE,CAAC,EAtBgB,YAAY,4BAAZ,YAAY,QAsB5B;IASY,QAAA,IAAI,GAAuB,uBAAuB,CAAC;IACnD,QAAA,IAAI,GAA0B,YAAI,GAAuB,mBAAmB,CAAC;IAC7E,QAAA,IAAI,GAA8B,YAAI,GAAuB,eAAe,CAAC;IAE7E,QAAA,IAAI,GAAK,qBAAqB,CAAC;IAC/B,QAAA,IAAI,GAAU,IAAA,cAAQ,EAAC,CAAiB,EAAE,IAAuB,CAAC,CAAC","file":"remoteTunnel.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { Event } from 'vs/base/common/event';\nimport { localize } from 'vs/nls';\n\nexport interface IRemoteTunnelSession {\n\treadonly providerId: string;\n\treadonly sessionId: string;\n\treadonly accountLabel: string;\n\treadonly token?: string;\n}\n\nexport const IRemoteTunnelService = createDecorator<IRemoteTunnelService>('IRemoteTunnelService');\nexport interface IRemoteTunnelService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onDidChangeTunnelStatus: Event<TunnelStatus>;\n\tgetTunnelStatus(): Promise<TunnelStatus>;\n\n\tgetMode(): Promise<TunnelMode>;\n\treadonly onDidChangeMode: Event<TunnelMode>;\n\n\treadonly onDidTokenFailed: Event<IRemoteTunnelSession | undefined>;\n\tinitialize(mode: TunnelMode): Promise<TunnelStatus>;\n\n\tstartTunnel(mode: ActiveTunnelMode): Promise<TunnelStatus>;\n\tstopTunnel(): Promise<void>;\n\tgetTunnelName(): Promise<string | undefined>;\n\n}\n\nexport interface ActiveTunnelMode {\n\treadonly active: true;\n\treadonly session: IRemoteTunnelSession;\n\treadonly asService: boolean;\n}\n\nexport interface InactiveTunnelMode {\n\treadonly active: false;\n}\n\nexport const INACTIVE_TUNNEL_MODE: InactiveTunnelMode = { active: false };\n\n/** Saved mode for the tunnel. */\nexport type TunnelMode = ActiveTunnelMode | InactiveTunnelMode;\n\nexport type TunnelStatus = TunnelStates.Connected | TunnelStates.Disconnected | TunnelStates.Connecting | TunnelStates.Uninitialized;\n\nexport namespace TunnelStates {\n\texport interface Uninitialized {\n\t\treadonly type: 'uninitialized';\n\t}\n\texport interface Connecting {\n\t\treadonly type: 'connecting';\n\t\treadonly progress?: string;\n\t}\n\texport interface Connected {\n\t\treadonly type: 'connected';\n\t\treadonly info: ConnectionInfo;\n\t\treadonly serviceInstallFailed: boolean;\n\t}\n\texport interface Disconnected {\n\t\treadonly type: 'disconnected';\n\t\treadonly onTokenFailed?: IRemoteTunnelSession;\n\t}\n\texport const disconnected = (onTokenFailed?: IRemoteTunnelSession): Disconnected => ({ type: 'disconnected', onTokenFailed });\n\texport const connected = (info: ConnectionInfo, serviceInstallFailed: boolean): Connected => ({ type: 'connected', info, serviceInstallFailed });\n\texport const connecting = (progress?: string): Connecting => ({ type: 'connecting', progress });\n\texport const uninitialized: Uninitialized = { type: 'uninitialized' };\n\n}\n\nexport interface ConnectionInfo {\n\tlink: string;\n\tdomain: string;\n\ttunnelName: string;\n\tisAttached: boolean;\n}\n\nexport const CONFIGURATION_KEY_PREFIX = 'remote.tunnels.access';\nexport const CONFIGURATION_KEY_HOST_NAME = CONFIGURATION_KEY_PREFIX + '.hostNameOverride';\nexport const CONFIGURATION_KEY_PREVENT_SLEEP = CONFIGURATION_KEY_PREFIX + '.preventSleep';\n\nexport const LOG_ID = 'remoteTunnelService';\nexport const LOGGER_NAME = localize('remoteTunnelLog', \"Remote Tunnel Service\");\n"]}