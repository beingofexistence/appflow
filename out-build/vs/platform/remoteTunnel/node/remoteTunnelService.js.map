{"version":3,"sources":["vs/platform/remoteTunnel/node/remoteTunnelService.ts"],"names":[],"mappings":"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","file":"remoteTunnelService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CONFIGURATION_KEY_HOST_NAME, CONFIGURATION_KEY_PREVENT_SLEEP, ConnectionInfo, IRemoteTunnelSession, IRemoteTunnelService, LOGGER_NAME, LOG_ID, TunnelStates, TunnelStatus, TunnelMode, INACTIVE_TUNNEL_MODE, ActiveTunnelMode } from 'vs/platform/remoteTunnel/common/remoteTunnel';\nimport { Emitter } from 'vs/base/common/event';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { INativeEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { ILogger, ILoggerService, LogLevelToString } from 'vs/platform/log/common/log';\nimport { dirname, join } from 'vs/base/common/path';\nimport { ChildProcess, StdioOptions, spawn } from 'child_process';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { isMacintosh, isWindows } from 'vs/base/common/platform';\nimport { CancelablePromise, createCancelablePromise, Delayer } from 'vs/base/common/async';\nimport { ISharedProcessLifecycleService } from 'vs/platform/lifecycle/node/sharedProcessLifecycleService';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { localize } from 'vs/nls';\nimport { hostname, homedir } from 'os';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { isString } from 'vs/base/common/types';\nimport { StreamSplitter } from 'vs/base/node/nodeStreams';\nimport { joinPath } from 'vs/base/common/resources';\n\ntype RemoteTunnelEnablementClassification = {\n\towner: 'aeschli';\n\tcomment: 'Reporting when Remote Tunnel access is turned on or off';\n\tenabled?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'Flag indicating if Remote Tunnel Access is enabled or not' };\n\tservice?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'Flag indicating if Remote Tunnel Access is installed as a service' };\n};\n\ntype RemoteTunnelEnablementEvent = {\n\tenabled: boolean;\n\tservice: boolean;\n};\n\nconst restartTunnelOnConfigurationChanges: readonly string[] = [\n\tCONFIGURATION_KEY_HOST_NAME,\n\tCONFIGURATION_KEY_PREVENT_SLEEP,\n];\n\n// This is the session used run the tunnel access.\n// if set, the remote tunnel access is currently enabled.\n// if not set, the remote tunnel access is currently disabled.\nconst TUNNEL_ACCESS_SESSION = 'remoteTunnelSession';\n// Boolean indicating whether the tunnel should be installed as a service.\nconst TUNNEL_ACCESS_IS_SERVICE = 'remoteTunnelIsService';\n\n/**\n * This service runs on the shared service. It is running the `code-tunnel` command\n * to make the current machine available for remote access.\n */\nexport class RemoteTunnelService extends Disposable implements IRemoteTunnelService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate readonly _onDidTokenFailedEmitter = new Emitter<IRemoteTunnelSession | undefined>();\n\tpublic readonly onDidTokenFailed = this._onDidTokenFailedEmitter.event;\n\n\tprivate readonly _onDidChangeTunnelStatusEmitter = new Emitter<TunnelStatus>();\n\tpublic readonly onDidChangeTunnelStatus = this._onDidChangeTunnelStatusEmitter.event;\n\n\tprivate readonly _onDidChangeModeEmitter = new Emitter<TunnelMode>();\n\tpublic readonly onDidChangeMode = this._onDidChangeModeEmitter.event;\n\n\tprivate readonly _logger: ILogger;\n\n\t/**\n\t * \"Mode\" in the terminal state we want to get to -- started, stopped, and\n\t * the attributes associated with each.\n\t *\n\t * At any given time, work may be ongoing to get `_tunnelStatus` into a\n\t * state that reflects the desired `mode`.\n\t */\n\tprivate _mode: TunnelMode = INACTIVE_TUNNEL_MODE;\n\n\tprivate _tunnelProcess: CancelablePromise<any> | undefined;\n\n\tprivate _tunnelStatus: TunnelStatus;\n\tprivate _startTunnelProcessDelayer: Delayer<void>;\n\n\tprivate _tunnelCommand: string | undefined;\n\n\tprivate _initialized = false;\n\n\tconstructor(\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IProductService private readonly productService: IProductService,\n\t\t@INativeEnvironmentService private readonly environmentService: INativeEnvironmentService,\n\t\t@ILoggerService loggerService: ILoggerService,\n\t\t@ISharedProcessLifecycleService sharedProcessLifecycleService: ISharedProcessLifecycleService,\n\t\t@IConfigurationService private readonly configurationService: IConfigurationService,\n\t\t@IStorageService private readonly storageService: IStorageService\n\t) {\n\t\tsuper();\n\t\tthis._logger = this._register(loggerService.createLogger(joinPath(environmentService.logsHome, `${LOG_ID}.log`), { id: LOG_ID, name: LOGGER_NAME }));\n\t\tthis._startTunnelProcessDelayer = new Delayer(100);\n\n\t\tthis._register(this._logger.onDidChangeLogLevel(l => this._logger.info('Log level changed to ' + LogLevelToString(l))));\n\n\t\tthis._register(sharedProcessLifecycleService.onWillShutdown(() => {\n\t\t\tthis._tunnelProcess?.cancel();\n\t\t\tthis._tunnelProcess = undefined;\n\t\t\tthis.dispose();\n\t\t}));\n\n\t\tthis._register(configurationService.onDidChangeConfiguration(e => {\n\t\t\tif (restartTunnelOnConfigurationChanges.some(c => e.affectsConfiguration(c))) {\n\t\t\t\tthis._startTunnelProcessDelayer.trigger(() => this.updateTunnelProcess());\n\t\t\t}\n\t\t}));\n\n\t\tthis._mode = this._restoreMode();\n\t\tthis._tunnelStatus = TunnelStates.uninitialized;\n\t}\n\n\tpublic async getTunnelStatus(): Promise<TunnelStatus> {\n\t\treturn this._tunnelStatus;\n\t}\n\n\tprivate setTunnelStatus(tunnelStatus: TunnelStatus) {\n\t\tthis._tunnelStatus = tunnelStatus;\n\t\tthis._onDidChangeTunnelStatusEmitter.fire(tunnelStatus);\n\t}\n\n\tprivate setMode(mode: TunnelMode) {\n\t\tif (isSameMode(this._mode, mode)) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._mode = mode;\n\t\tthis._storeMode(mode);\n\t\tthis._onDidChangeModeEmitter.fire(this._mode);\n\t\tif (mode.active) {\n\t\t\tthis._logger.info(`Session updated: ${mode.session.accountLabel} (${mode.session.providerId}) (service=${mode.asService})`);\n\t\t\tif (mode.session.token) {\n\t\t\t\tthis._logger.info(`Session token updated: ${mode.session.accountLabel} (${mode.session.providerId})`);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._logger.info(`Session reset`);\n\t\t}\n\t}\n\n\tgetMode(): Promise<TunnelMode> {\n\t\treturn Promise.resolve(this._mode);\n\t}\n\n\tasync initialize(mode: TunnelMode): Promise<TunnelStatus> {\n\t\tif (this._initialized) {\n\t\t\treturn this._tunnelStatus;\n\t\t}\n\t\tthis._initialized = true;\n\t\tthis.setMode(mode);\n\t\ttry {\n\t\t\tawait this._startTunnelProcessDelayer.trigger(() => this.updateTunnelProcess());\n\t\t} catch (e) {\n\t\t\tthis._logger.error(e);\n\t\t}\n\t\treturn this._tunnelStatus;\n\t}\n\n\tprivate readonly defaultOnOutput = (a: string, isErr: boolean) => {\n\t\tif (isErr) {\n\t\t\tthis._logger.error(a);\n\t\t} else {\n\t\t\tthis._logger.info(a);\n\t\t}\n\t};\n\n\tprivate getTunnelCommandLocation() {\n\t\tif (!this._tunnelCommand) {\n\t\t\tlet binParentLocation;\n\t\t\tif (isMacintosh) {\n\t\t\t\t// appRoot = /Applications/Visual Studio Code - Insiders.app/Contents/Resources/app\n\t\t\t\t// bin = /Applications/Visual Studio Code - Insiders.app/Contents/Resources/app/bin\n\t\t\t\tbinParentLocation = this.environmentService.appRoot;\n\t\t\t} else {\n\t\t\t\t// appRoot = C:\\Users\\<name>\\AppData\\Local\\Programs\\Microsoft VS Code Insiders\\resources\\app\n\t\t\t\t// bin = C:\\Users\\<name>\\AppData\\Local\\Programs\\Microsoft VS Code Insiders\\bin\n\t\t\t\t// appRoot = /usr/share/code-insiders/resources/app\n\t\t\t\t// bin = /usr/share/code-insiders/bin\n\t\t\t\tbinParentLocation = dirname(dirname(this.environmentService.appRoot));\n\t\t\t}\n\t\t\tthis._tunnelCommand = join(binParentLocation, 'bin', `${this.productService.tunnelApplicationName}${isWindows ? '.exe' : ''}`);\n\t\t}\n\t\treturn this._tunnelCommand;\n\t}\n\n\tasync startTunnel(mode: ActiveTunnelMode): Promise<TunnelStatus> {\n\t\tif (isSameMode(this._mode, mode) && this._tunnelStatus.type !== 'disconnected') {\n\t\t\treturn this._tunnelStatus;\n\t\t}\n\n\t\tthis.setMode(mode);\n\n\t\ttry {\n\t\t\tawait this._startTunnelProcessDelayer.trigger(() => this.updateTunnelProcess());\n\t\t} catch (e) {\n\t\t\tthis._logger.error(e);\n\t\t}\n\t\treturn this._tunnelStatus;\n\t}\n\n\n\tasync stopTunnel(): Promise<void> {\n\t\tif (this._tunnelProcess) {\n\t\t\tthis._tunnelProcess.cancel();\n\t\t\tthis._tunnelProcess = undefined;\n\t\t}\n\n\t\tif (!this._mode.active) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Be careful to only uninstall the service if we're the ones who installed it:\n\t\tconst needsServiceUninstall = this._mode.asService;\n\t\tthis.setMode(INACTIVE_TUNNEL_MODE);\n\n\t\ttry {\n\t\t\tif (needsServiceUninstall) {\n\t\t\t\tthis.runCodeTunnelCommand('uninstallService', ['service', 'uninstall']);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis._logger.error(e);\n\t\t}\n\n\t\ttry {\n\t\t\tawait this.runCodeTunnelCommand('stop', ['kill']);\n\t\t} catch (e) {\n\t\t\tthis._logger.error(e);\n\t\t}\n\n\t\tthis.setTunnelStatus(TunnelStates.disconnected());\n\t}\n\n\tprivate async updateTunnelProcess(): Promise<void> {\n\t\tthis.telemetryService.publicLog2<RemoteTunnelEnablementEvent, RemoteTunnelEnablementClassification>('remoteTunnel.enablement', {\n\t\t\tenabled: this._mode.active,\n\t\t\tservice: this._mode.active && this._mode.asService,\n\t\t});\n\n\t\tif (this._tunnelProcess) {\n\t\t\tthis._tunnelProcess.cancel();\n\t\t\tthis._tunnelProcess = undefined;\n\t\t}\n\n\t\tlet output = '';\n\t\tlet isServiceInstalled = false;\n\t\tconst onOutput = (a: string, isErr: boolean) => {\n\t\t\tif (isErr) {\n\t\t\t\tthis._logger.error(a);\n\t\t\t} else {\n\t\t\t\toutput += a;\n\t\t\t}\n\t\t\tif (!this.environmentService.isBuilt && a.startsWith('   Compiling')) {\n\t\t\t\tthis.setTunnelStatus(TunnelStates.connecting(localize('remoteTunnelService.building', 'Building CLI from sources')));\n\t\t\t}\n\t\t};\n\n\t\tconst statusProcess = this.runCodeTunnelCommand('status', ['status'], onOutput);\n\t\tthis._tunnelProcess = statusProcess;\n\t\ttry {\n\t\t\tawait statusProcess;\n\t\t\tif (this._tunnelProcess !== statusProcess) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// split and find the line, since in dev builds additional noise is\n\t\t\t// added by cargo to the output.\n\t\t\tconst status: {\n\t\t\t\tservice_installed: boolean;\n\t\t\t\ttunnel: object | null;\n\t\t\t} = JSON.parse(output.trim().split('\\n').find(l => l.startsWith('{'))!);\n\n\t\t\tisServiceInstalled = status.service_installed;\n\t\t\tthis._logger.info(status.tunnel ? 'Other tunnel running, attaching...' : 'No other tunnel running');\n\n\t\t\t// If a tunnel is running but the mode isn't \"active\", we'll still attach\n\t\t\t// to the tunnel to show its state in the UI. If neither are true, disconnect\n\t\t\tif (!status.tunnel && !this._mode.active) {\n\t\t\t\tthis.setTunnelStatus(TunnelStates.disconnected());\n\t\t\t\treturn;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis._logger.error(e);\n\t\t\tthis.setTunnelStatus(TunnelStates.disconnected());\n\t\t\treturn;\n\t\t} finally {\n\t\t\tif (this._tunnelProcess === statusProcess) {\n\t\t\t\tthis._tunnelProcess = undefined;\n\t\t\t}\n\t\t}\n\n\t\tconst session = this._mode.active ? this._mode.session : undefined;\n\t\tif (session && session.token) {\n\t\t\tconst token = session.token;\n\t\t\tthis.setTunnelStatus(TunnelStates.connecting(localize({ key: 'remoteTunnelService.authorizing', comment: ['{0} is a user account name, {1} a provider name (e.g. Github)'] }, 'Connecting as {0} ({1})', session.accountLabel, session.providerId)));\n\t\t\tconst onLoginOutput = (a: string, isErr: boolean) => {\n\t\t\t\ta = a.replaceAll(token, '*'.repeat(4));\n\t\t\t\tonOutput(a, isErr);\n\t\t\t};\n\t\t\tconst loginProcess = this.runCodeTunnelCommand('login', ['user', 'login', '--provider', session.providerId, '--access-token', token, '--log', LogLevelToString(this._logger.getLevel())], onLoginOutput);\n\t\t\tthis._tunnelProcess = loginProcess;\n\t\t\ttry {\n\t\t\t\tawait loginProcess;\n\t\t\t\tif (this._tunnelProcess !== loginProcess) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tthis._logger.error(e);\n\t\t\t\tthis._tunnelProcess = undefined;\n\t\t\t\tthis._onDidTokenFailedEmitter.fire(session);\n\t\t\t\tthis.setTunnelStatus(TunnelStates.disconnected(session));\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tconst hostName = this._getTunnelName();\n\t\tif (hostName) {\n\t\t\tthis.setTunnelStatus(TunnelStates.connecting(localize({ key: 'remoteTunnelService.openTunnelWithName', comment: ['{0} is a tunnel name'] }, 'Opening tunnel {0}', hostName)));\n\t\t} else {\n\t\t\tthis.setTunnelStatus(TunnelStates.connecting(localize('remoteTunnelService.openTunnel', 'Opening tunnel')));\n\t\t}\n\t\tconst args = ['--accept-server-license-terms', '--log', LogLevelToString(this._logger.getLevel())];\n\t\tif (hostName) {\n\t\t\targs.push('--name', hostName);\n\t\t} else {\n\t\t\targs.push('--random-name');\n\t\t}\n\n\t\tlet serviceInstallFailed = false;\n\t\tif (this._mode.active && this._mode.asService && !isServiceInstalled) {\n\t\t\t// I thought about calling `code tunnel kill` here, but having multiple\n\t\t\t// tunnel processes running is pretty much idempotent. If there's\n\t\t\t// another tunnel process running, the service process will\n\t\t\t// take over when it exits, no hard feelings.\n\t\t\tserviceInstallFailed = await this.installTunnelService(args) === false;\n\t\t}\n\n\t\treturn this.serverOrAttachTunnel(session, args, serviceInstallFailed);\n\t}\n\n\tprivate async installTunnelService(args: readonly string[]) {\n\t\tlet status: number;\n\t\ttry {\n\t\t\tstatus = await this.runCodeTunnelCommand('serviceInstall', ['service', 'install', ...args]);\n\t\t} catch (e) {\n\t\t\tthis._logger.error(e);\n\t\t\tstatus = 1;\n\t\t}\n\n\t\tif (status !== 0) {\n\t\t\tconst msg = localize('remoteTunnelService.serviceInstallFailed', 'Failed to install tunnel as a service, starting in session...');\n\t\t\tthis._logger.warn(msg);\n\t\t\tthis.setTunnelStatus(TunnelStates.connecting(msg));\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate async serverOrAttachTunnel(session: IRemoteTunnelSession | undefined, args: string[], serviceInstallFailed: boolean) {\n\t\targs.push('--parent-process-id', String(process.pid));\n\n\t\tif (this._preventSleep()) {\n\t\t\targs.push('--no-sleep');\n\t\t}\n\n\t\tlet isAttached = false;\n\t\tconst serveCommand = this.runCodeTunnelCommand('tunnel', args, (message: string, isErr: boolean) => {\n\t\t\tif (isErr) {\n\t\t\t\tthis._logger.error(message);\n\t\t\t} else {\n\t\t\t\tthis._logger.info(message);\n\t\t\t}\n\n\t\t\tif (message.includes('Connected to an existing tunnel process')) {\n\t\t\t\tisAttached = true;\n\t\t\t}\n\n\t\t\tconst m = message.match(/Open this link in your browser (https:\\/\\/([^\\/\\s]+)\\/([^\\/\\s]+)\\/([^\\/\\s]+))/);\n\t\t\tif (m) {\n\t\t\t\tconst info: ConnectionInfo = { link: m[1], domain: m[2], tunnelName: m[4], isAttached };\n\t\t\t\tthis.setTunnelStatus(TunnelStates.connected(info, serviceInstallFailed));\n\t\t\t} else if (message.match(/error refreshing token/)) {\n\t\t\t\tserveCommand.cancel();\n\t\t\t\tthis._onDidTokenFailedEmitter.fire(session);\n\t\t\t\tthis.setTunnelStatus(TunnelStates.disconnected(session));\n\t\t\t}\n\t\t});\n\t\tthis._tunnelProcess = serveCommand;\n\t\tserveCommand.finally(() => {\n\t\t\tif (serveCommand === this._tunnelProcess) {\n\t\t\t\t// process exited unexpectedly\n\t\t\t\tthis._logger.info(`tunnel process terminated`);\n\t\t\t\tthis._tunnelProcess = undefined;\n\t\t\t\tthis._mode = INACTIVE_TUNNEL_MODE;\n\n\t\t\t\tthis.setTunnelStatus(TunnelStates.disconnected());\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate runCodeTunnelCommand(logLabel: string, commandArgs: string[], onOutput: (message: string, isError: boolean) => void = this.defaultOnOutput): CancelablePromise<number> {\n\t\treturn createCancelablePromise<number>(token => {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tif (token.isCancellationRequested) {\n\t\t\t\t\tresolve(-1);\n\t\t\t\t}\n\t\t\t\tlet tunnelProcess: ChildProcess | undefined;\n\t\t\t\tconst stdio: StdioOptions = ['ignore', 'pipe', 'pipe'];\n\n\t\t\t\ttoken.onCancellationRequested(() => {\n\t\t\t\t\tif (tunnelProcess) {\n\t\t\t\t\t\tthis._logger.info(`${logLabel} terminating(${tunnelProcess.pid})`);\n\t\t\t\t\t\ttunnelProcess.kill();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tif (!this.environmentService.isBuilt) {\n\t\t\t\t\tonOutput('Building tunnel CLI from sources and run\\n', false);\n\t\t\t\t\tonOutput(`${logLabel} Spawning: cargo run -- tunnel ${commandArgs.join(' ')}\\n`, false);\n\t\t\t\t\ttunnelProcess = spawn('cargo', ['run', '--', 'tunnel', ...commandArgs], { cwd: join(this.environmentService.appRoot, 'cli'), stdio });\n\t\t\t\t} else {\n\t\t\t\t\tonOutput('Running tunnel CLI\\n', false);\n\t\t\t\t\tconst tunnelCommand = this.getTunnelCommandLocation();\n\t\t\t\t\tonOutput(`${logLabel} Spawning: ${tunnelCommand} tunnel ${commandArgs.join(' ')}\\n`, false);\n\t\t\t\t\ttunnelProcess = spawn(tunnelCommand, ['tunnel', ...commandArgs], { cwd: homedir(), stdio });\n\t\t\t\t}\n\n\t\t\t\ttunnelProcess.stdout!.pipe(new StreamSplitter('\\n')).on('data', data => {\n\t\t\t\t\tif (tunnelProcess) {\n\t\t\t\t\t\tconst message = data.toString();\n\t\t\t\t\t\tonOutput(message, false);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\ttunnelProcess.stderr!.pipe(new StreamSplitter('\\n')).on('data', data => {\n\t\t\t\t\tif (tunnelProcess) {\n\t\t\t\t\t\tconst message = data.toString();\n\t\t\t\t\t\tonOutput(message, true);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\ttunnelProcess.on('exit', e => {\n\t\t\t\t\tif (tunnelProcess) {\n\t\t\t\t\t\tonOutput(`${logLabel} exit(${tunnelProcess.pid}): + ${e} `, false);\n\t\t\t\t\t\ttunnelProcess = undefined;\n\t\t\t\t\t\tresolve(e || 0);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\ttunnelProcess.on('error', e => {\n\t\t\t\t\tif (tunnelProcess) {\n\t\t\t\t\t\tonOutput(`${logLabel} error(${tunnelProcess.pid}): + ${e} `, true);\n\t\t\t\t\t\ttunnelProcess = undefined;\n\t\t\t\t\t\treject();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic async getTunnelName(): Promise<string | undefined> {\n\t\treturn this._getTunnelName();\n\t}\n\n\tprivate _preventSleep() {\n\t\treturn !!this.configurationService.getValue<boolean>(CONFIGURATION_KEY_PREVENT_SLEEP);\n\t}\n\n\tprivate _getTunnelName(): string | undefined {\n\t\tlet name = this.configurationService.getValue<string>(CONFIGURATION_KEY_HOST_NAME) || hostname();\n\t\tname = name.replace(/^-+/g, '').replace(/[^\\w-]/g, '').substring(0, 20);\n\t\treturn name || undefined;\n\t}\n\n\tprivate _restoreMode(): TunnelMode {\n\t\ttry {\n\t\t\tconst tunnelAccessSession = this.storageService.get(TUNNEL_ACCESS_SESSION, StorageScope.APPLICATION);\n\t\t\tconst asService = this.storageService.getBoolean(TUNNEL_ACCESS_IS_SERVICE, StorageScope.APPLICATION, false);\n\t\t\tif (tunnelAccessSession) {\n\t\t\t\tconst session = JSON.parse(tunnelAccessSession) as IRemoteTunnelSession;\n\t\t\t\tif (session && isString(session.accountLabel) && isString(session.sessionId) && isString(session.providerId)) {\n\t\t\t\t\treturn { active: true, session, asService };\n\t\t\t\t}\n\t\t\t\tthis._logger.error('Problems restoring session from storage, invalid format', session);\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis._logger.error('Problems restoring session from storage', e);\n\t\t}\n\t\treturn INACTIVE_TUNNEL_MODE;\n\t}\n\n\tprivate _storeMode(mode: TunnelMode): void {\n\t\tif (mode.active) {\n\t\t\tconst sessionWithoutToken = {\n\t\t\t\tproviderId: mode.session.providerId, sessionId: mode.session.sessionId, accountLabel: mode.session.accountLabel\n\t\t\t};\n\t\t\tthis.storageService.store(TUNNEL_ACCESS_SESSION, JSON.stringify(sessionWithoutToken), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t\tthis.storageService.store(TUNNEL_ACCESS_IS_SERVICE, mode.asService, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis.storageService.remove(TUNNEL_ACCESS_SESSION, StorageScope.APPLICATION);\n\t\t\tthis.storageService.remove(TUNNEL_ACCESS_IS_SERVICE, StorageScope.APPLICATION);\n\t\t}\n\t}\n}\n\nfunction isSameSession(a1: IRemoteTunnelSession | undefined, a2: IRemoteTunnelSession | undefined): boolean {\n\tif (a1 && a2) {\n\t\treturn a1.sessionId === a2.sessionId && a1.providerId === a2.providerId && a1.token === a2.token;\n\t}\n\treturn a1 === a2;\n}\n\nconst isSameMode = (a: TunnelMode, b: TunnelMode) => {\n\tif (a.active !== b.active) {\n\t\treturn false;\n\t} else if (a.active && b.active) {\n\t\treturn a.asService === b.asService && isSameSession(a.session, b.session);\n\t} else {\n\t\treturn true;\n\t}\n};\n"]}