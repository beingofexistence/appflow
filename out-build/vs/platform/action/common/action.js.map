{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/action/common/action.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAoDhG,SAAgB,GAAG,CAAwB,KAAkE;QAC5G,OAAO,KAAK,CAAC,CAAC,CAA4B,KAAM,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC;IAClF,CAAC;IAFD,kBAEC","file":"action.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI, UriDto } from 'vs/base/common/uri';\nimport { ContextKeyExpression } from 'vs/platform/contextkey/common/contextkey';\nimport { ThemeIcon } from 'vs/base/common/themables';\nimport { Categories } from './actionCommonCategories';\n\nexport interface ILocalizedString {\n\n\t/**\n\t * The localized value of the string.\n\t */\n\tvalue: string;\n\n\t/**\n\t * The original (non localized value of the string)\n\t */\n\toriginal: string;\n}\n\nexport interface ICommandActionTitle extends ILocalizedString {\n\n\t/**\n\t * The title with a mnemonic designation. && precedes the mnemonic.\n\t */\n\tmnemonicTitle?: string;\n}\n\nexport type Icon = { dark?: URI; light?: URI } | ThemeIcon;\n\nexport interface ICommandActionToggleInfo {\n\n\t/**\n\t * The condition that marks the action as toggled.\n\t */\n\tcondition: ContextKeyExpression;\n\n\ticon?: Icon;\n\n\ttooltip?: string;\n\n\t/**\n\t * The title that goes well with a a check mark, e.g \"(check) Line Numbers\" vs \"Toggle Line Numbers\"\n\t */\n\ttitle?: string;\n\n\t/**\n\t * Like title but with a mnemonic designation.\n\t */\n\tmnemonicTitle?: string;\n}\n\nexport function isICommandActionToggleInfo(thing: ContextKeyExpression | ICommandActionToggleInfo | undefined): thing is ICommandActionToggleInfo {\n\treturn thing ? (<ICommandActionToggleInfo>thing).condition !== undefined : false;\n}\n\nexport interface ICommandActionSource {\n\treadonly id: string;\n\treadonly title: string;\n}\n\nexport interface ICommandAction {\n\tid: string;\n\ttitle: string | ICommandActionTitle;\n\tshortTitle?: string | ICommandActionTitle;\n\tcategory?: keyof typeof Categories | ILocalizedString | string;\n\ttooltip?: string | ILocalizedString;\n\ticon?: Icon;\n\tsource?: ICommandActionSource;\n\tprecondition?: ContextKeyExpression;\n\n\t/**\n\t * The action is a toggle action. Define the context key expression that reflects its toggle-state\n\t * or define toggle-info including an icon and a title that goes well with a checkmark.\n\t */\n\ttoggled?: ContextKeyExpression | ICommandActionToggleInfo;\n}\n\nexport type ISerializableCommandAction = UriDto<ICommandAction>;\n"]}