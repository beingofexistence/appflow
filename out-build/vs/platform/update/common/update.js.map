{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/update/common/update.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAYhG;;;;;;;;;;;;;;;;OAgBG;IAEH,IAAkB,SAUjB;IAVD,WAAkB,SAAS;QAC1B,4CAA+B,CAAA;QAC/B,0BAAa,CAAA;QACb,kCAAqB,CAAA;QACrB,wDAA2C,CAAA;QAC3C,4DAA+C,CAAA;QAC/C,wCAA2B,CAAA;QAC3B,sCAAyB,CAAA;QACzB,kCAAqB,CAAA;QACrB,4BAAe,CAAA;IAChB,CAAC,EAViB,SAAS,yBAAT,SAAS,QAU1B;IAED,IAAkB,UAIjB;IAJD,WAAkB,UAAU;QAC3B,6CAAK,CAAA;QACL,iDAAO,CAAA;QACP,2CAAI,CAAA;IACL,CAAC,EAJiB,UAAU,0BAAV,UAAU,QAI3B;IAED,IAAkB,iBAOjB;IAPD,WAAkB,iBAAiB;QAClC,iEAAQ,CAAA;QACR,2FAAqB,CAAA;QACrB,iFAAgB,CAAA;QAChB,yFAAoB,CAAA;QACpB,yFAAoB,CAAA;QACpB,6EAAc,CAAA;IACf,CAAC,EAPiB,iBAAiB,iCAAjB,iBAAiB,QAOlC;IAcY,QAAA,GAAG,GAAK;QACpB,aAAa,EAAE,EAAE,IAAI,+CAAyB,EAAmB;QACjE,QAAQ,EAAE,CAAC,MAAyB,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,qCAAoB,EAAE,MAAM,EAAE,CAAa;QAC3F,IAAI,EAAE,CAAC,UAAsB,EAAE,KAAc,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,6BAAgB,EAAE,UAAU,EAAE,KAAK,EAAE,CAAS;QACvG,kBAAkB,EAAE,CAAC,QAAiB,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,2DAA8B,EAAE,QAAQ,EAAyB,CAAA;QACnH,oBAAoB,EAAE,CAAC,MAAe,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,+DAAgC,EAAE,MAAM,EAA2B,CAAA;QACrH,WAAW,EAAE,CAAC,MAAe,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,2CAAuB,EAAE,MAAM,EAAkB,CAAA;QAC1F,UAAU,EAAE,CAAC,MAAe,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,yCAAsB,EAAE,MAAM,EAAiB,CAAA;QACvF,QAAQ,EAAE,CAAC,MAAe,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,qCAAoB,EAAE,MAAM,EAAe,CAAA;QACjF,KAAK,EAAE,CAAC,MAAe,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,+BAAiB,EAAE,MAAM,EAAY,CAAA;KACxE,CAAC;IASW,QAAA,GAAG,GAAc,IAAA,mBAAG,EAA6B,eAAe,CAAC,CAAC","file":"update.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\n\nexport interface IUpdate {\n\tversion: string;\n\tproductVersion: string;\n\turl?: string;\n\thash?: string;\n}\n\n/**\n * Updates are run as a state machine:\n *\n *      Uninitialized\n *           ↓\n *          Idle\n *          ↓  ↑\n *   Checking for Updates  →  Available for Download\n *         ↓\n *     Downloading  →   Ready\n *         ↓               ↑\n *     Downloaded   →  Updating\n *\n * Available: There is an update available for download (linux).\n * Ready: Code will be updated as soon as it restarts (win32, darwin).\n * Downloaded: There is an update ready to be installed in the background (win32).\n */\n\nexport const enum StateType {\n\tUninitialized = 'uninitialized',\n\tIdle = 'idle',\n\tDisabled = 'disabled',\n\tCheckingForUpdates = 'checking for updates',\n\tAvailableForDownload = 'available for download',\n\tDownloading = 'downloading',\n\tDownloaded = 'downloaded',\n\tUpdating = 'updating',\n\tReady = 'ready',\n}\n\nexport const enum UpdateType {\n\tSetup,\n\tArchive,\n\tSnap\n}\n\nexport const enum DisablementReason {\n\tNotBuilt,\n\tDisabledByEnvironment,\n\tManuallyDisabled,\n\tMissingConfiguration,\n\tInvalidConfiguration,\n\tRunningAsAdmin,\n}\n\nexport type Uninitialized = { type: StateType.Uninitialized };\nexport type Disabled = { type: StateType.Disabled; reason: DisablementReason };\nexport type Idle = { type: StateType.Idle; updateType: UpdateType; error?: string };\nexport type CheckingForUpdates = { type: StateType.CheckingForUpdates; explicit: boolean };\nexport type AvailableForDownload = { type: StateType.AvailableForDownload; update: IUpdate };\nexport type Downloading = { type: StateType.Downloading; update: IUpdate };\nexport type Downloaded = { type: StateType.Downloaded; update: IUpdate };\nexport type Updating = { type: StateType.Updating; update: IUpdate };\nexport type Ready = { type: StateType.Ready; update: IUpdate };\n\nexport type State = Uninitialized | Disabled | Idle | CheckingForUpdates | AvailableForDownload | Downloading | Downloaded | Updating | Ready;\n\nexport const State = {\n\tUninitialized: { type: StateType.Uninitialized } as Uninitialized,\n\tDisabled: (reason: DisablementReason) => ({ type: StateType.Disabled, reason }) as Disabled,\n\tIdle: (updateType: UpdateType, error?: string) => ({ type: StateType.Idle, updateType, error }) as Idle,\n\tCheckingForUpdates: (explicit: boolean) => ({ type: StateType.CheckingForUpdates, explicit } as CheckingForUpdates),\n\tAvailableForDownload: (update: IUpdate) => ({ type: StateType.AvailableForDownload, update } as AvailableForDownload),\n\tDownloading: (update: IUpdate) => ({ type: StateType.Downloading, update } as Downloading),\n\tDownloaded: (update: IUpdate) => ({ type: StateType.Downloaded, update } as Downloaded),\n\tUpdating: (update: IUpdate) => ({ type: StateType.Updating, update } as Updating),\n\tReady: (update: IUpdate) => ({ type: StateType.Ready, update } as Ready),\n};\n\nexport interface IAutoUpdater extends Event.NodeEventEmitter {\n\tsetFeedURL(url: string): void;\n\tcheckForUpdates(): void;\n\tapplyUpdate?(): Promise<void>;\n\tquitAndInstall(): void;\n}\n\nexport const IUpdateService = createDecorator<IUpdateService>('updateService');\n\nexport interface IUpdateService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onStateChange: Event<State>;\n\treadonly state: State;\n\n\tcheckForUpdates(explicit: boolean): Promise<void>;\n\tdownloadUpdate(): Promise<void>;\n\tapplyUpdate(): Promise<void>;\n\tquitAndInstall(): Promise<void>;\n\n\tisLatestVersion(): Promise<boolean | undefined>;\n\t_applySpecificUpdate(packagePath: string): Promise<void>;\n}\n"]}