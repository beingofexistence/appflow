{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/update/electron-main/updateService.darwin.ts"],"names":[],"mappings":"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","file":"updateService.darwin.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as electron from 'electron';\nimport { memoize } from 'vs/base/common/decorators';\nimport { Event } from 'vs/base/common/event';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IEnvironmentMainService } from 'vs/platform/environment/electron-main/environmentMainService';\nimport { ILifecycleMainService, IRelaunchHandler, IRelaunchOptions } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IRequestService } from 'vs/platform/request/common/request';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IUpdate, State, StateType, UpdateType } from 'vs/platform/update/common/update';\nimport { AbstractUpdateService, createUpdateURL, UpdateNotAvailableClassification } from 'vs/platform/update/electron-main/abstractUpdateService';\n\nexport class DarwinUpdateService extends AbstractUpdateService implements IRelaunchHandler {\n\n\tprivate readonly disposables = new DisposableStore();\n\n\t@memoize private get onRawError(): Event<string> { return Event.fromNodeEventEmitter(electron.autoUpdater, 'error', (_, message) => message); }\n\t@memoize private get onRawUpdateNotAvailable(): Event<void> { return Event.fromNodeEventEmitter<void>(electron.autoUpdater, 'update-not-available'); }\n\t@memoize private get onRawUpdateAvailable(): Event<IUpdate> { return Event.fromNodeEventEmitter(electron.autoUpdater, 'update-available', (_, url, version) => ({ url, version, productVersion: version })); }\n\t@memoize private get onRawUpdateDownloaded(): Event<IUpdate> { return Event.fromNodeEventEmitter(electron.autoUpdater, 'update-downloaded', (_, releaseNotes, version, date) => ({ releaseNotes, version, productVersion: version, date })); }\n\n\tconstructor(\n\t\t@ILifecycleMainService lifecycleMainService: ILifecycleMainService,\n\t\t@IConfigurationService configurationService: IConfigurationService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IEnvironmentMainService environmentMainService: IEnvironmentMainService,\n\t\t@IRequestService requestService: IRequestService,\n\t\t@ILogService logService: ILogService,\n\t\t@IProductService productService: IProductService\n\t) {\n\t\tsuper(lifecycleMainService, configurationService, environmentMainService, requestService, logService, productService);\n\n\t\tlifecycleMainService.setRelaunchHandler(this);\n\t}\n\n\thandleRelaunch(options?: IRelaunchOptions): boolean {\n\t\tif (options?.addArgs || options?.removeArgs) {\n\t\t\treturn false; // we cannot apply an update and restart with different args\n\t\t}\n\n\t\tif (this.state.type !== StateType.Ready) {\n\t\t\treturn false; // we only handle the relaunch when we have a pending update\n\t\t}\n\n\t\tthis.logService.trace('update#handleRelaunch(): running raw#quitAndInstall()');\n\t\tthis.doQuitAndInstall();\n\n\t\treturn true;\n\t}\n\n\tprotected override async initialize(): Promise<void> {\n\t\tawait super.initialize();\n\t\tthis.onRawError(this.onError, this, this.disposables);\n\t\tthis.onRawUpdateAvailable(this.onUpdateAvailable, this, this.disposables);\n\t\tthis.onRawUpdateDownloaded(this.onUpdateDownloaded, this, this.disposables);\n\t\tthis.onRawUpdateNotAvailable(this.onUpdateNotAvailable, this, this.disposables);\n\t}\n\n\tprivate onError(err: string): void {\n\t\tthis.logService.error('UpdateService error:', err);\n\n\t\t// only show message when explicitly checking for updates\n\t\tconst message = (this.state.type === StateType.CheckingForUpdates && this.state.explicit) ? err : undefined;\n\t\tthis.setState(State.Idle(UpdateType.Archive, message));\n\t}\n\n\tprotected buildUpdateFeedUrl(quality: string): string | undefined {\n\t\tlet assetID: string;\n\t\tif (!this.productService.darwinUniversalAssetId) {\n\t\t\tassetID = process.arch === 'x64' ? 'darwin' : 'darwin-arm64';\n\t\t} else {\n\t\t\tassetID = this.productService.darwinUniversalAssetId;\n\t\t}\n\t\tconst url = createUpdateURL(assetID, quality, this.productService);\n\t\ttry {\n\t\t\telectron.autoUpdater.setFeedURL({ url });\n\t\t} catch (e) {\n\t\t\t// application is very likely not signed\n\t\t\tthis.logService.error('Failed to set update feed URL', e);\n\t\t\treturn undefined;\n\t\t}\n\t\treturn url;\n\t}\n\n\tprotected doCheckForUpdates(context: any): void {\n\t\tthis.setState(State.CheckingForUpdates(context));\n\t\telectron.autoUpdater.checkForUpdates();\n\t}\n\n\tprivate onUpdateAvailable(update: IUpdate): void {\n\t\tif (this.state.type !== StateType.CheckingForUpdates) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(State.Downloading(update));\n\t}\n\n\tprivate onUpdateDownloaded(update: IUpdate): void {\n\t\tif (this.state.type !== StateType.Downloading) {\n\t\t\treturn;\n\t\t}\n\n\t\ttype UpdateDownloadedClassification = {\n\t\t\towner: 'joaomoreno';\n\t\t\tversion: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'The version number of the new VS Code that has been downloaded.' };\n\t\t\tcomment: 'This is used to know how often VS Code has successfully downloaded the update.';\n\t\t};\n\t\tthis.telemetryService.publicLog2<{ version: String }, UpdateDownloadedClassification>('update:downloaded', { version: update.version });\n\n\t\tthis.setState(State.Ready(update));\n\t}\n\n\tprivate onUpdateNotAvailable(): void {\n\t\tif (this.state.type !== StateType.CheckingForUpdates) {\n\t\t\treturn;\n\t\t}\n\t\tthis.telemetryService.publicLog2<{ explicit: boolean }, UpdateNotAvailableClassification>('update:notAvailable', { explicit: this.state.explicit });\n\n\t\tthis.setState(State.Idle(UpdateType.Archive));\n\t}\n\n\tprotected override doQuitAndInstall(): void {\n\t\tthis.logService.trace('update#quitAndInstall(): running raw#quitAndInstall()');\n\t\telectron.autoUpdater.quitAndInstall();\n\t}\n\n\tdispose(): void {\n\t\tthis.disposables.dispose();\n\t}\n}\n"]}