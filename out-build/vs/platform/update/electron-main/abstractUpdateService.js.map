{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/update/electron-main/abstractUpdateService.ts"],"names":[],"mappings":"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","file":"abstractUpdateService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { timeout } from 'vs/base/common/async';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IEnvironmentMainService } from 'vs/platform/environment/electron-main/environmentMainService';\nimport { ILifecycleMainService, LifecycleMainPhase } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IRequestService } from 'vs/platform/request/common/request';\nimport { AvailableForDownload, DisablementReason, IUpdateService, State, StateType, UpdateType } from 'vs/platform/update/common/update';\n\nexport function createUpdateURL(platform: string, quality: string, productService: IProductService): string {\n\treturn `${productService.updateUrl}/api/update/${platform}/${quality}/${productService.commit}`;\n}\n\nexport type UpdateNotAvailableClassification = {\n\towner: 'joaomoreno';\n\texplicit: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'Whether the user has manually checked for updates, or this was an automatic check.' };\n\tcomment: 'This is used to understand how often VS Code pings the update server for an update and there\\'s none available.';\n};\n\nexport abstract class AbstractUpdateService implements IUpdateService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprotected url: string | undefined;\n\n\tprivate _state: State = State.Uninitialized;\n\n\tprivate readonly _onStateChange = new Emitter<State>();\n\treadonly onStateChange: Event<State> = this._onStateChange.event;\n\n\tget state(): State {\n\t\treturn this._state;\n\t}\n\n\tprotected setState(state: State): void {\n\t\tthis.logService.info('update#setState', state.type);\n\t\tthis._state = state;\n\t\tthis._onStateChange.fire(state);\n\t}\n\n\tconstructor(\n\t\t@ILifecycleMainService protected readonly lifecycleMainService: ILifecycleMainService,\n\t\t@IConfigurationService protected configurationService: IConfigurationService,\n\t\t@IEnvironmentMainService private readonly environmentMainService: IEnvironmentMainService,\n\t\t@IRequestService protected requestService: IRequestService,\n\t\t@ILogService protected logService: ILogService,\n\t\t@IProductService protected readonly productService: IProductService\n\t) {\n\t\tlifecycleMainService.when(LifecycleMainPhase.AfterWindowOpen)\n\t\t\t.finally(() => this.initialize());\n\t}\n\n\t/**\n\t * This must be called before any other call. This is a performance\n\t * optimization, to avoid using extra CPU cycles before first window open.\n\t * https://github.com/microsoft/vscode/issues/89784\n\t */\n\tprotected async initialize(): Promise<void> {\n\t\tif (!this.environmentMainService.isBuilt) {\n\t\t\tthis.setState(State.Disabled(DisablementReason.NotBuilt));\n\t\t\treturn; // updates are never enabled when running out of sources\n\t\t}\n\n\t\tif (this.environmentMainService.disableUpdates) {\n\t\t\tthis.setState(State.Disabled(DisablementReason.DisabledByEnvironment));\n\t\t\tthis.logService.info('update#ctor - updates are disabled by the environment');\n\t\t\treturn;\n\t\t}\n\n\t\tif (!this.productService.updateUrl || !this.productService.commit) {\n\t\t\tthis.setState(State.Disabled(DisablementReason.MissingConfiguration));\n\t\t\tthis.logService.info('update#ctor - updates are disabled as there is no update URL');\n\t\t\treturn;\n\t\t}\n\n\t\tconst updateMode = this.configurationService.getValue<'none' | 'manual' | 'start' | 'default'>('update.mode');\n\t\tconst quality = this.getProductQuality(updateMode);\n\n\t\tif (!quality) {\n\t\t\tthis.setState(State.Disabled(DisablementReason.ManuallyDisabled));\n\t\t\tthis.logService.info('update#ctor - updates are disabled by user preference');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.url = this.buildUpdateFeedUrl(quality);\n\t\tif (!this.url) {\n\t\t\tthis.setState(State.Disabled(DisablementReason.InvalidConfiguration));\n\t\t\tthis.logService.info('update#ctor - updates are disabled as the update URL is badly formed');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.setState(State.Idle(this.getUpdateType()));\n\n\t\tif (updateMode === 'manual') {\n\t\t\tthis.logService.info('update#ctor - manual checks only; automatic updates are disabled by user preference');\n\t\t\treturn;\n\t\t}\n\n\t\tif (updateMode === 'start') {\n\t\t\tthis.logService.info('update#ctor - startup checks only; automatic updates are disabled by user preference');\n\n\t\t\t// Check for updates only once after 30 seconds\n\t\t\tsetTimeout(() => this.checkForUpdates(false), 30 * 1000);\n\t\t} else {\n\t\t\t// Start checking for updates after 30 seconds\n\t\t\tthis.scheduleCheckForUpdates(30 * 1000).then(undefined, err => this.logService.error(err));\n\t\t}\n\t}\n\n\tprivate getProductQuality(updateMode: string): string | undefined {\n\t\treturn updateMode === 'none' ? undefined : this.productService.quality;\n\t}\n\n\tprivate scheduleCheckForUpdates(delay = 60 * 60 * 1000): Promise<void> {\n\t\treturn timeout(delay)\n\t\t\t.then(() => this.checkForUpdates(false))\n\t\t\t.then(() => {\n\t\t\t\t// Check again after 1 hour\n\t\t\t\treturn this.scheduleCheckForUpdates(60 * 60 * 1000);\n\t\t\t});\n\t}\n\n\tasync checkForUpdates(explicit: boolean): Promise<void> {\n\t\tthis.logService.trace('update#checkForUpdates, state = ', this.state.type);\n\n\t\tif (this.state.type !== StateType.Idle) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.doCheckForUpdates(explicit);\n\t}\n\n\tasync downloadUpdate(): Promise<void> {\n\t\tthis.logService.trace('update#downloadUpdate, state = ', this.state.type);\n\n\t\tif (this.state.type !== StateType.AvailableForDownload) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.doDownloadUpdate(this.state);\n\t}\n\n\tprotected async doDownloadUpdate(state: AvailableForDownload): Promise<void> {\n\t\t// noop\n\t}\n\n\tasync applyUpdate(): Promise<void> {\n\t\tthis.logService.trace('update#applyUpdate, state = ', this.state.type);\n\n\t\tif (this.state.type !== StateType.Downloaded) {\n\t\t\treturn;\n\t\t}\n\n\t\tawait this.doApplyUpdate();\n\t}\n\n\tprotected async doApplyUpdate(): Promise<void> {\n\t\t// noop\n\t}\n\n\tquitAndInstall(): Promise<void> {\n\t\tthis.logService.trace('update#quitAndInstall, state = ', this.state.type);\n\n\t\tif (this.state.type !== StateType.Ready) {\n\t\t\treturn Promise.resolve(undefined);\n\t\t}\n\n\t\tthis.logService.trace('update#quitAndInstall(): before lifecycle quit()');\n\n\t\tthis.lifecycleMainService.quit(true /* will restart */).then(vetod => {\n\t\t\tthis.logService.trace(`update#quitAndInstall(): after lifecycle quit() with veto: ${vetod}`);\n\t\t\tif (vetod) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.logService.trace('update#quitAndInstall(): running raw#quitAndInstall()');\n\t\t\tthis.doQuitAndInstall();\n\t\t});\n\n\t\treturn Promise.resolve(undefined);\n\t}\n\n\tasync isLatestVersion(): Promise<boolean | undefined> {\n\t\tif (!this.url) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst mode = this.configurationService.getValue<'none' | 'manual' | 'start' | 'default'>('update.mode');\n\n\t\tif (mode === 'none') {\n\t\t\treturn false;\n\t\t}\n\n\t\ttry {\n\t\t\tconst context = await this.requestService.request({ url: this.url }, CancellationToken.None);\n\t\t\t// The update server replies with 204 (No Content) when no\n\t\t\t// update is available - that's all we want to know.\n\t\t\treturn context.res.statusCode === 204;\n\n\t\t} catch (error) {\n\t\t\tthis.logService.error('update#isLatestVersion(): failed to check for updates');\n\t\t\tthis.logService.error(error);\n\t\t\treturn undefined;\n\t\t}\n\t}\n\n\tasync _applySpecificUpdate(packagePath: string): Promise<void> {\n\t\t// noop\n\t}\n\n\tprotected getUpdateType(): UpdateType {\n\t\treturn UpdateType.Archive;\n\t}\n\n\tprotected doQuitAndInstall(): void {\n\t\t// noop\n\t}\n\n\tprotected abstract buildUpdateFeedUrl(quality: string): string | undefined;\n\tprotected abstract doCheckForUpdates(context: any): void;\n}\n"]}