{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/debug/common/extensionHostDebugIpc.ts"],"names":[],"mappings":"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","file":"extensionHostDebugIpc.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IChannel, IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { IAttachSessionEvent, ICloseSessionEvent, IExtensionHostDebugService, IOpenExtensionWindowResult, IReloadSessionEvent, ITerminateSessionEvent } from 'vs/platform/debug/common/extensionHostDebug';\n\nexport class ExtensionHostDebugBroadcastChannel<TContext> implements IServerChannel<TContext> {\n\n\tstatic readonly ChannelName = 'extensionhostdebugservice';\n\n\tprivate readonly _onCloseEmitter = new Emitter<ICloseSessionEvent>();\n\tprivate readonly _onReloadEmitter = new Emitter<IReloadSessionEvent>();\n\tprivate readonly _onTerminateEmitter = new Emitter<ITerminateSessionEvent>();\n\tprivate readonly _onAttachEmitter = new Emitter<IAttachSessionEvent>();\n\n\tcall(ctx: TContext, command: string, arg?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'close':\n\t\t\t\treturn Promise.resolve(this._onCloseEmitter.fire({ sessionId: arg[0] }));\n\t\t\tcase 'reload':\n\t\t\t\treturn Promise.resolve(this._onReloadEmitter.fire({ sessionId: arg[0] }));\n\t\t\tcase 'terminate':\n\t\t\t\treturn Promise.resolve(this._onTerminateEmitter.fire({ sessionId: arg[0] }));\n\t\t\tcase 'attach':\n\t\t\t\treturn Promise.resolve(this._onAttachEmitter.fire({ sessionId: arg[0], port: arg[1], subId: arg[2] }));\n\t\t}\n\t\tthrow new Error('Method not implemented.');\n\t}\n\n\tlisten(ctx: TContext, event: string, arg?: any): Event<any> {\n\t\tswitch (event) {\n\t\t\tcase 'close':\n\t\t\t\treturn this._onCloseEmitter.event;\n\t\t\tcase 'reload':\n\t\t\t\treturn this._onReloadEmitter.event;\n\t\t\tcase 'terminate':\n\t\t\t\treturn this._onTerminateEmitter.event;\n\t\t\tcase 'attach':\n\t\t\t\treturn this._onAttachEmitter.event;\n\t\t}\n\t\tthrow new Error('Method not implemented.');\n\t}\n}\n\nexport class ExtensionHostDebugChannelClient extends Disposable implements IExtensionHostDebugService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(private channel: IChannel) {\n\t\tsuper();\n\t}\n\n\treload(sessionId: string): void {\n\t\tthis.channel.call('reload', [sessionId]);\n\t}\n\n\tget onReload(): Event<IReloadSessionEvent> {\n\t\treturn this.channel.listen('reload');\n\t}\n\n\tclose(sessionId: string): void {\n\t\tthis.channel.call('close', [sessionId]);\n\t}\n\n\tget onClose(): Event<ICloseSessionEvent> {\n\t\treturn this.channel.listen('close');\n\t}\n\n\tattachSession(sessionId: string, port: number, subId?: string): void {\n\t\tthis.channel.call('attach', [sessionId, port, subId]);\n\t}\n\n\tget onAttachSession(): Event<IAttachSessionEvent> {\n\t\treturn this.channel.listen('attach');\n\t}\n\n\tterminateSession(sessionId: string, subId?: string): void {\n\t\tthis.channel.call('terminate', [sessionId, subId]);\n\t}\n\n\tget onTerminateSession(): Event<ITerminateSessionEvent> {\n\t\treturn this.channel.listen('terminate');\n\t}\n\n\topenExtensionDevelopmentHostWindow(args: string[], debugRenderer: boolean): Promise<IOpenExtensionWindowResult> {\n\t\treturn this.channel.call('openExtensionDevelopmentHostWindow', [args, debugRenderer]);\n\t}\n}\n"]}