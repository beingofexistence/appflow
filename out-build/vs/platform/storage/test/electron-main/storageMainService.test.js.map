{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/storage/test/electron-main/storageMainService.test.ts"],"names":[],"mappings":"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","file":"storageMainService.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { notStrictEqual, strictEqual } from 'assert';\nimport { Schemas } from 'vs/base/common/network';\nimport { joinPath } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { generateUuid } from 'vs/base/common/uuid';\nimport { OPTIONS, parseArgs } from 'vs/platform/environment/node/argv';\nimport { NativeEnvironmentService } from 'vs/platform/environment/node/environmentService';\nimport { FileService } from 'vs/platform/files/common/fileService';\nimport { ILifecycleMainService } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport product from 'vs/platform/product/common/product';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { SaveStrategy, StateService } from 'vs/platform/state/node/stateService';\nimport { IS_NEW_KEY, StorageScope } from 'vs/platform/storage/common/storage';\nimport { IStorageChangeEvent, IStorageMain, IStorageMainOptions } from 'vs/platform/storage/electron-main/storageMain';\nimport { StorageMainService } from 'vs/platform/storage/electron-main/storageMainService';\nimport { currentSessionDateStorageKey, firstSessionDateStorageKey } from 'vs/platform/telemetry/common/telemetry';\nimport { UriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentityService';\nimport { IUserDataProfile } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { UserDataProfilesMainService } from 'vs/platform/userDataProfile/electron-main/userDataProfile';\nimport { TestLifecycleMainService } from 'vs/platform/test/electron-main/workbenchTestServices';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\n\nsuite('StorageMainService', function () {\n\n\tconst disposables = new DisposableStore();\n\n\tconst productService: IProductService = { _serviceBrand: undefined, ...product };\n\n\tconst inMemoryProfileRoot = URI.file('/location').with({ scheme: Schemas.inMemory });\n\tconst inMemoryProfile: IUserDataProfile = {\n\t\tid: 'id',\n\t\tname: 'inMemory',\n\t\tshortName: 'inMemory',\n\t\tisDefault: false,\n\t\tlocation: inMemoryProfileRoot,\n\t\tglobalStorageHome: joinPath(inMemoryProfileRoot, 'globalStorageHome'),\n\t\tsettingsResource: joinPath(inMemoryProfileRoot, 'settingsResource'),\n\t\tkeybindingsResource: joinPath(inMemoryProfileRoot, 'keybindingsResource'),\n\t\ttasksResource: joinPath(inMemoryProfileRoot, 'tasksResource'),\n\t\tsnippetsHome: joinPath(inMemoryProfileRoot, 'snippetsHome'),\n\t\textensionsResource: joinPath(inMemoryProfileRoot, 'extensionsResource'),\n\t\tcacheHome: joinPath(inMemoryProfileRoot, 'cache'),\n\t};\n\n\tclass TestStorageMainService extends StorageMainService {\n\n\t\tprotected override getStorageOptions(): IStorageMainOptions {\n\t\t\treturn {\n\t\t\t\tuseInMemoryStorage: true\n\t\t\t};\n\t\t}\n\t}\n\n\tasync function testStorage(storage: IStorageMain, scope: StorageScope): Promise<void> {\n\t\tstrictEqual(storage.isInMemory(), true);\n\n\t\t// Telemetry: added after init unless workspace/profile scoped\n\t\tif (scope === StorageScope.APPLICATION) {\n\t\t\tstrictEqual(storage.items.size, 0);\n\t\t\tawait storage.init();\n\t\t\tstrictEqual(typeof storage.get(firstSessionDateStorageKey), 'string');\n\t\t\tstrictEqual(typeof storage.get(currentSessionDateStorageKey), 'string');\n\t\t} else {\n\t\t\tawait storage.init();\n\t\t}\n\n\t\tlet storageChangeEvent: IStorageChangeEvent | undefined = undefined;\n\t\tdisposables.add(storage.onDidChangeStorage(e => {\n\t\t\tstorageChangeEvent = e;\n\t\t}));\n\n\t\tlet storageDidClose = false;\n\t\tdisposables.add(storage.onDidCloseStorage(() => storageDidClose = true));\n\n\t\t// Basic store/get/remove\n\t\tconst size = storage.items.size;\n\n\t\tstorage.set('bar', 'foo');\n\t\tstrictEqual(storageChangeEvent!.key, 'bar');\n\t\tstorage.set('barNumber', 55);\n\t\tstorage.set('barBoolean', true);\n\n\t\tstrictEqual(storage.get('bar'), 'foo');\n\t\tstrictEqual(storage.get('barNumber'), '55');\n\t\tstrictEqual(storage.get('barBoolean'), 'true');\n\n\t\tstrictEqual(storage.items.size, size + 3);\n\n\t\tstorage.delete('bar');\n\t\tstrictEqual(storage.get('bar'), undefined);\n\n\t\tstrictEqual(storage.items.size, size + 2);\n\n\t\t// IS_NEW\n\t\tstrictEqual(storage.get(IS_NEW_KEY), 'true');\n\n\t\t// Close\n\t\tawait storage.close();\n\n\t\tstrictEqual(storageDidClose, true);\n\t}\n\n\tteardown(() => {\n\t\tdisposables.clear();\n\t});\n\n\tfunction createStorageService(lifecycleMainService: ILifecycleMainService = new TestLifecycleMainService()): TestStorageMainService {\n\t\tconst environmentService = new NativeEnvironmentService(parseArgs(process.argv, OPTIONS), productService);\n\t\tconst fileService = disposables.add(new FileService(new NullLogService()));\n\t\tconst uriIdentityService = disposables.add(new UriIdentityService(fileService));\n\t\tconst testStorageService = disposables.add(new TestStorageMainService(new NullLogService(), environmentService, disposables.add(new UserDataProfilesMainService(disposables.add(new StateService(SaveStrategy.DELAYED, environmentService, new NullLogService(), fileService)), disposables.add(uriIdentityService), environmentService, fileService, new NullLogService())), lifecycleMainService, fileService, uriIdentityService));\n\n\t\tdisposables.add(testStorageService.applicationStorage);\n\n\t\treturn testStorageService;\n\t}\n\n\ttest('basics (application)', function () {\n\t\tconst storageMainService = createStorageService();\n\n\t\treturn testStorage(storageMainService.applicationStorage, StorageScope.APPLICATION);\n\t});\n\n\ttest('basics (profile)', function () {\n\t\tconst storageMainService = createStorageService();\n\t\tconst profile = inMemoryProfile;\n\n\t\treturn testStorage(storageMainService.profileStorage(profile), StorageScope.PROFILE);\n\t});\n\n\ttest('basics (workspace)', function () {\n\t\tconst workspace = { id: generateUuid() };\n\t\tconst storageMainService = createStorageService();\n\n\t\treturn testStorage(storageMainService.workspaceStorage(workspace), StorageScope.WORKSPACE);\n\t});\n\n\ttest('storage closed onWillShutdown', async function () {\n\t\tconst lifecycleMainService = new TestLifecycleMainService();\n\t\tconst storageMainService = createStorageService(lifecycleMainService);\n\n\t\tconst profile = inMemoryProfile;\n\t\tconst workspace = { id: generateUuid() };\n\n\t\tconst workspaceStorage = storageMainService.workspaceStorage(workspace);\n\t\tlet didCloseWorkspaceStorage = false;\n\t\tdisposables.add(workspaceStorage.onDidCloseStorage(() => {\n\t\t\tdidCloseWorkspaceStorage = true;\n\t\t}));\n\n\t\tconst profileStorage = storageMainService.profileStorage(profile);\n\t\tlet didCloseProfileStorage = false;\n\t\tdisposables.add(profileStorage.onDidCloseStorage(() => {\n\t\t\tdidCloseProfileStorage = true;\n\t\t}));\n\n\t\tconst applicationStorage = storageMainService.applicationStorage;\n\t\tlet didCloseApplicationStorage = false;\n\t\tdisposables.add(applicationStorage.onDidCloseStorage(() => {\n\t\t\tdidCloseApplicationStorage = true;\n\t\t}));\n\n\t\tstrictEqual(applicationStorage, storageMainService.applicationStorage); // same instance as long as not closed\n\t\tstrictEqual(profileStorage, storageMainService.profileStorage(profile)); // same instance as long as not closed\n\t\tstrictEqual(workspaceStorage, storageMainService.workspaceStorage(workspace)); // same instance as long as not closed\n\n\t\tawait applicationStorage.init();\n\t\tawait profileStorage.init();\n\t\tawait workspaceStorage.init();\n\n\t\tawait lifecycleMainService.fireOnWillShutdown();\n\n\t\tstrictEqual(didCloseApplicationStorage, true);\n\t\tstrictEqual(didCloseProfileStorage, true);\n\t\tstrictEqual(didCloseWorkspaceStorage, true);\n\n\t\tconst profileStorage2 = storageMainService.profileStorage(profile);\n\t\tnotStrictEqual(profileStorage, profileStorage2);\n\n\t\tconst workspaceStorage2 = storageMainService.workspaceStorage(workspace);\n\t\tnotStrictEqual(workspaceStorage, workspaceStorage2);\n\n\t\tawait workspaceStorage2.close();\n\t});\n\n\ttest('storage closed before init works', async function () {\n\t\tconst storageMainService = createStorageService();\n\t\tconst profile = inMemoryProfile;\n\t\tconst workspace = { id: generateUuid() };\n\n\t\tconst workspaceStorage = storageMainService.workspaceStorage(workspace);\n\t\tlet didCloseWorkspaceStorage = false;\n\t\tdisposables.add(workspaceStorage.onDidCloseStorage(() => {\n\t\t\tdidCloseWorkspaceStorage = true;\n\t\t}));\n\n\t\tconst profileStorage = storageMainService.profileStorage(profile);\n\t\tlet didCloseProfileStorage = false;\n\t\tdisposables.add(profileStorage.onDidCloseStorage(() => {\n\t\t\tdidCloseProfileStorage = true;\n\t\t}));\n\n\t\tconst applicationStorage = storageMainService.applicationStorage;\n\t\tlet didCloseApplicationStorage = false;\n\t\tdisposables.add(applicationStorage.onDidCloseStorage(() => {\n\t\t\tdidCloseApplicationStorage = true;\n\t\t}));\n\n\t\tawait applicationStorage.close();\n\t\tawait profileStorage.close();\n\t\tawait workspaceStorage.close();\n\n\t\tstrictEqual(didCloseApplicationStorage, true);\n\t\tstrictEqual(didCloseProfileStorage, true);\n\t\tstrictEqual(didCloseWorkspaceStorage, true);\n\t});\n\n\ttest('storage closed before init awaits works', async function () {\n\t\tconst storageMainService = createStorageService();\n\t\tconst profile = inMemoryProfile;\n\t\tconst workspace = { id: generateUuid() };\n\n\t\tconst workspaceStorage = storageMainService.workspaceStorage(workspace);\n\t\tlet didCloseWorkspaceStorage = false;\n\t\tdisposables.add(workspaceStorage.onDidCloseStorage(() => {\n\t\t\tdidCloseWorkspaceStorage = true;\n\t\t}));\n\n\t\tconst profileStorage = storageMainService.profileStorage(profile);\n\t\tlet didCloseProfileStorage = false;\n\t\tdisposables.add(profileStorage.onDidCloseStorage(() => {\n\t\t\tdidCloseProfileStorage = true;\n\t\t}));\n\n\t\tconst applicationtorage = storageMainService.applicationStorage;\n\t\tlet didCloseApplicationStorage = false;\n\t\tdisposables.add(applicationtorage.onDidCloseStorage(() => {\n\t\t\tdidCloseApplicationStorage = true;\n\t\t}));\n\n\t\tapplicationtorage.init();\n\t\tprofileStorage.init();\n\t\tworkspaceStorage.init();\n\n\t\tawait applicationtorage.close();\n\t\tawait profileStorage.close();\n\t\tawait workspaceStorage.close();\n\n\t\tstrictEqual(didCloseApplicationStorage, true);\n\t\tstrictEqual(didCloseProfileStorage, true);\n\t\tstrictEqual(didCloseWorkspaceStorage, true);\n\t});\n\n\tensureNoDisposablesAreLeakedInTestSuite();\n});\n"]}