{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/storage/common/storage.ts"],"names":[],"mappings":"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","file":"storage.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Promises, RunOnceScheduler, runWhenIdle } from 'vs/base/common/async';\nimport { Emitter, Event, PauseableEmitter } from 'vs/base/common/event';\nimport { Disposable, DisposableStore, dispose, MutableDisposable } from 'vs/base/common/lifecycle';\nimport { mark } from 'vs/base/common/performance';\nimport { isUndefinedOrNull } from 'vs/base/common/types';\nimport { InMemoryStorageDatabase, IStorage, IStorageChangeEvent, Storage, StorageHint, StorageValue } from 'vs/base/parts/storage/common/storage';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { isUserDataProfile, IUserDataProfile } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { IAnyWorkspaceIdentifier } from 'vs/platform/workspace/common/workspace';\n\nexport const IS_NEW_KEY = '__$__isNewStorageMarker';\nexport const TARGET_KEY = '__$__targetStorageMarker';\n\nexport const IStorageService = createDecorator<IStorageService>('storageService');\n\nexport enum WillSaveStateReason {\n\n\t/**\n\t * No specific reason to save state.\n\t */\n\tNONE,\n\n\t/**\n\t * A hint that the workbench is about to shutdown.\n\t */\n\tSHUTDOWN\n}\n\nexport interface IWillSaveStateEvent {\n\treadonly reason: WillSaveStateReason;\n}\n\nexport interface IStorageEntry {\n\treadonly key: string;\n\treadonly value: StorageValue;\n\treadonly scope: StorageScope;\n\treadonly target: StorageTarget;\n}\n\nexport interface IWorkspaceStorageValueChangeEvent extends IStorageValueChangeEvent {\n\treadonly scope: StorageScope.WORKSPACE;\n}\n\nexport interface IProfileStorageValueChangeEvent extends IStorageValueChangeEvent {\n\treadonly scope: StorageScope.PROFILE;\n}\n\nexport interface IApplicationStorageValueChangeEvent extends IStorageValueChangeEvent {\n\treadonly scope: StorageScope.APPLICATION;\n}\n\nexport interface IStorageService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Emitted whenever data is updated or deleted on the given\n\t * scope and optional key.\n\t *\n\t * @param scope the `StorageScope` to listen to changes\n\t * @param key the optional key to filter for or all keys of\n\t * the scope if `undefined`\n\t */\n\tonDidChangeValue(scope: StorageScope.WORKSPACE, key: string | undefined, disposable: DisposableStore): Event<IWorkspaceStorageValueChangeEvent>;\n\tonDidChangeValue(scope: StorageScope.PROFILE, key: string | undefined, disposable: DisposableStore): Event<IProfileStorageValueChangeEvent>;\n\tonDidChangeValue(scope: StorageScope.APPLICATION, key: string | undefined, disposable: DisposableStore): Event<IApplicationStorageValueChangeEvent>;\n\tonDidChangeValue(scope: StorageScope, key: string | undefined, disposable: DisposableStore): Event<IStorageValueChangeEvent>;\n\n\t/**\n\t * Emitted whenever target of a storage entry changes.\n\t */\n\treadonly onDidChangeTarget: Event<IStorageTargetChangeEvent>;\n\n\t/**\n\t * Emitted when the storage is about to persist. This is the right time\n\t * to persist data to ensure it is stored before the application shuts\n\t * down.\n\t *\n\t * The will save state event allows to optionally ask for the reason of\n\t * saving the state, e.g. to find out if the state is saved due to a\n\t * shutdown.\n\t *\n\t * Note: this event may be fired many times, not only on shutdown to prevent\n\t * loss of state in situations where the shutdown is not sufficient to\n\t * persist the data properly.\n\t */\n\treadonly onWillSaveState: Event<IWillSaveStateEvent>;\n\n\t/**\n\t * Retrieve an element stored with the given key from storage. Use\n\t * the provided `defaultValue` if the element is `null` or `undefined`.\n\t *\n\t * @param scope allows to define the scope of the storage operation\n\t * to either the current workspace only, all workspaces or all profiles.\n\t */\n\tget(key: string, scope: StorageScope, fallbackValue: string): string;\n\tget(key: string, scope: StorageScope, fallbackValue?: string): string | undefined;\n\n\t/**\n\t * Retrieve an element stored with the given key from storage. Use\n\t * the provided `defaultValue` if the element is `null` or `undefined`.\n\t * The element will be converted to a `boolean`.\n\t *\n\t * @param scope allows to define the scope of the storage operation\n\t * to either the current workspace only, all workspaces or all profiles.\n\t */\n\tgetBoolean(key: string, scope: StorageScope, fallbackValue: boolean): boolean;\n\tgetBoolean(key: string, scope: StorageScope, fallbackValue?: boolean): boolean | undefined;\n\n\t/**\n\t * Retrieve an element stored with the given key from storage. Use\n\t * the provided `defaultValue` if the element is `null` or `undefined`.\n\t * The element will be converted to a `number` using `parseInt` with a\n\t * base of `10`.\n\t *\n\t * @param scope allows to define the scope of the storage operation\n\t * to either the current workspace only, all workspaces or all profiles.\n\t */\n\tgetNumber(key: string, scope: StorageScope, fallbackValue: number): number;\n\tgetNumber(key: string, scope: StorageScope, fallbackValue?: number): number | undefined;\n\n\t/**\n\t * Retrieve an element stored with the given key from storage. Use\n\t * the provided `defaultValue` if the element is `null` or `undefined`.\n\t * The element will be converted to a `object` using `JSON.parse`.\n\t *\n\t * @param scope allows to define the scope of the storage operation\n\t * to either the current workspace only, all workspaces or all profiles.\n\t */\n\tgetObject<T extends object>(key: string, scope: StorageScope, fallbackValue: T): T;\n\tgetObject<T extends object>(key: string, scope: StorageScope, fallbackValue?: T): T | undefined;\n\n\t/**\n\t * Store a value under the given key to storage. The value will be\n\t * converted to a `string`. Storing either `undefined` or `null` will\n\t * remove the entry under the key.\n\t *\n\t * @param scope allows to define the scope of the storage operation\n\t * to either the current workspace only, all workspaces or all profiles.\n\t *\n\t * @param target allows to define the target of the storage operation\n\t * to either the current machine or user.\n\t */\n\tstore(key: string, value: StorageValue, scope: StorageScope, target: StorageTarget): void;\n\n\t/**\n\t * Allows to store multiple values in a bulk operation. Events will only\n\t * be emitted when all values have been stored.\n\t *\n\t * @param external a hint to indicate the source of the operation is external,\n\t * such as settings sync or profile changes.\n\t */\n\tstoreAll(entries: Array<IStorageEntry>, external: boolean): void;\n\n\t/**\n\t * Delete an element stored under the provided key from storage.\n\t *\n\t * The scope argument allows to define the scope of the storage\n\t * operation to either the current workspace only, all workspaces\n\t * or all profiles.\n\t */\n\tremove(key: string, scope: StorageScope): void;\n\n\t/**\n\t * Returns all the keys used in the storage for the provided `scope`\n\t * and `target`.\n\t *\n\t * Note: this will NOT return all keys stored in the storage layer.\n\t * Some keys may not have an associated `StorageTarget` and thus\n\t * will be excluded from the results.\n\t *\n\t * @param scope allows to define the scope for the keys\n\t * to either the current workspace only, all workspaces or all profiles.\n\t *\n\t * @param target allows to define the target for the keys\n\t * to either the current machine or user.\n\t */\n\tkeys(scope: StorageScope, target: StorageTarget): string[];\n\n\t/**\n\t * Log the contents of the storage to the console.\n\t */\n\tlog(): void;\n\n\t/**\n\t * Returns true if the storage service handles the provided scope.\n\t */\n\thasScope(scope: IAnyWorkspaceIdentifier | IUserDataProfile): boolean;\n\n\t/**\n\t * Switch storage to another workspace or profile. Optionally preserve the\n\t * current data to the new storage.\n\t */\n\tswitch(to: IAnyWorkspaceIdentifier | IUserDataProfile, preserveData: boolean): Promise<void>;\n\n\t/**\n\t * Whether the storage for the given scope was created during this session or\n\t * existed before.\n\t */\n\tisNew(scope: StorageScope): boolean;\n\n\t/**\n\t * Attempts to reduce the DB size via optimization commands if supported.\n\t */\n\toptimize(scope: StorageScope): Promise<void>;\n\n\t/**\n\t * Allows to flush state, e.g. in cases where a shutdown is\n\t * imminent. This will send out the `onWillSaveState` to ask\n\t * everyone for latest state.\n\t *\n\t * @returns a `Promise` that can be awaited on when all updates\n\t * to the underlying storage have been flushed.\n\t */\n\tflush(reason?: WillSaveStateReason): Promise<void>;\n}\n\nexport const enum StorageScope {\n\n\t/**\n\t * The stored data will be scoped to all workspaces across all profiles.\n\t */\n\tAPPLICATION = -1,\n\n\t/**\n\t * The stored data will be scoped to all workspaces of the same profile.\n\t */\n\tPROFILE = 0,\n\n\t/**\n\t * The stored data will be scoped to the current workspace.\n\t */\n\tWORKSPACE = 1\n}\n\nexport const enum StorageTarget {\n\n\t/**\n\t * The stored data is user specific and applies across machines.\n\t */\n\tUSER,\n\n\t/**\n\t * The stored data is machine specific.\n\t */\n\tMACHINE\n}\n\nexport interface IStorageValueChangeEvent {\n\n\t/**\n\t * The scope for the storage entry that changed\n\t * or was removed.\n\t */\n\treadonly scope: StorageScope;\n\n\t/**\n\t * The `key` of the storage entry that was changed\n\t * or was removed.\n\t */\n\treadonly key: string;\n\n\t/**\n\t * The `target` can be `undefined` if a key is being\n\t * removed.\n\t */\n\treadonly target: StorageTarget | undefined;\n\n\t/**\n\t * A hint how the storage change event was triggered. If\n\t * `true`, the storage change was triggered by an external\n\t * source, such as:\n\t * - another process (for example another window)\n\t * - operations such as settings sync or profiles change\n\t */\n\treadonly external?: boolean;\n}\n\nexport interface IStorageTargetChangeEvent {\n\n\t/**\n\t * The scope for the target that changed. Listeners\n\t * should use `keys(scope, target)` to get an updated\n\t * list of keys for the given `scope` and `target`.\n\t */\n\treadonly scope: StorageScope;\n}\n\ninterface IKeyTargets {\n\t[key: string]: StorageTarget;\n}\n\nexport interface IStorageServiceOptions {\n\treadonly flushInterval: number;\n}\n\nexport function loadKeyTargets(storage: IStorage): IKeyTargets {\n\tconst keysRaw = storage.get(TARGET_KEY);\n\tif (keysRaw) {\n\t\ttry {\n\t\t\treturn JSON.parse(keysRaw);\n\t\t} catch (error) {\n\t\t\t// Fail gracefully\n\t\t}\n\t}\n\n\treturn Object.create(null);\n}\n\nexport abstract class AbstractStorageService extends Disposable implements IStorageService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate static DEFAULT_FLUSH_INTERVAL = 60 * 1000; // every minute\n\n\tprivate readonly _onDidChangeValue = this._register(new PauseableEmitter<IStorageValueChangeEvent>());\n\n\tprivate readonly _onDidChangeTarget = this._register(new PauseableEmitter<IStorageTargetChangeEvent>());\n\treadonly onDidChangeTarget = this._onDidChangeTarget.event;\n\n\tprivate readonly _onWillSaveState = this._register(new Emitter<IWillSaveStateEvent>());\n\treadonly onWillSaveState = this._onWillSaveState.event;\n\n\tprivate initializationPromise: Promise<void> | undefined;\n\n\tprivate readonly flushWhenIdleScheduler = this._register(new RunOnceScheduler(() => this.doFlushWhenIdle(), this.options.flushInterval));\n\tprivate readonly runFlushWhenIdle = this._register(new MutableDisposable());\n\n\tconstructor(private readonly options: IStorageServiceOptions = { flushInterval: AbstractStorageService.DEFAULT_FLUSH_INTERVAL }) {\n\t\tsuper();\n\t}\n\n\tonDidChangeValue(scope: StorageScope.WORKSPACE, key: string | undefined, disposable: DisposableStore): Event<IWorkspaceStorageValueChangeEvent>;\n\tonDidChangeValue(scope: StorageScope.PROFILE, key: string | undefined, disposable: DisposableStore): Event<IProfileStorageValueChangeEvent>;\n\tonDidChangeValue(scope: StorageScope.APPLICATION, key: string | undefined, disposable: DisposableStore): Event<IApplicationStorageValueChangeEvent>;\n\tonDidChangeValue(scope: StorageScope, key: string | undefined, disposable: DisposableStore): Event<IStorageValueChangeEvent> {\n\t\treturn Event.filter(this._onDidChangeValue.event, e => e.scope === scope && (key === undefined || e.key === key), disposable);\n\t}\n\n\tprivate doFlushWhenIdle(): void {\n\t\tthis.runFlushWhenIdle.value = runWhenIdle(() => {\n\t\t\tif (this.shouldFlushWhenIdle()) {\n\t\t\t\tthis.flush();\n\t\t\t}\n\n\t\t\t// repeat\n\t\t\tthis.flushWhenIdleScheduler.schedule();\n\t\t});\n\t}\n\n\tprotected shouldFlushWhenIdle(): boolean {\n\t\treturn true;\n\t}\n\n\tprotected stopFlushWhenIdle(): void {\n\t\tdispose([this.runFlushWhenIdle, this.flushWhenIdleScheduler]);\n\t}\n\n\tinitialize(): Promise<void> {\n\t\tif (!this.initializationPromise) {\n\t\t\tthis.initializationPromise = (async () => {\n\n\t\t\t\t// Init all storage locations\n\t\t\t\tmark('code/willInitStorage');\n\t\t\t\ttry {\n\t\t\t\t\tawait this.doInitialize(); // Ask subclasses to initialize storage\n\t\t\t\t} finally {\n\t\t\t\t\tmark('code/didInitStorage');\n\t\t\t\t}\n\n\t\t\t\t// On some OS we do not get enough time to persist state on shutdown (e.g. when\n\t\t\t\t// Windows restarts after applying updates). In other cases, VSCode might crash,\n\t\t\t\t// so we periodically save state to reduce the chance of loosing any state.\n\t\t\t\t// In the browser we do not have support for long running unload sequences. As such,\n\t\t\t\t// we cannot ask for saving state in that moment, because that would result in a\n\t\t\t\t// long running operation.\n\t\t\t\t// Instead, periodically ask customers to save save. The library will be clever enough\n\t\t\t\t// to only save state that has actually changed.\n\t\t\t\tthis.flushWhenIdleScheduler.schedule();\n\t\t\t})();\n\t\t}\n\n\t\treturn this.initializationPromise;\n\t}\n\n\tprotected emitDidChangeValue(scope: StorageScope, event: IStorageChangeEvent): void {\n\t\tconst { key, external } = event;\n\n\t\t// Specially handle `TARGET_KEY`\n\t\tif (key === TARGET_KEY) {\n\n\t\t\t// Clear our cached version which is now out of date\n\t\t\tswitch (scope) {\n\t\t\t\tcase StorageScope.APPLICATION:\n\t\t\t\t\tthis._applicationKeyTargets = undefined;\n\t\t\t\t\tbreak;\n\t\t\t\tcase StorageScope.PROFILE:\n\t\t\t\t\tthis._profileKeyTargets = undefined;\n\t\t\t\t\tbreak;\n\t\t\t\tcase StorageScope.WORKSPACE:\n\t\t\t\t\tthis._workspaceKeyTargets = undefined;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Emit as `didChangeTarget` event\n\t\t\tthis._onDidChangeTarget.fire({ scope });\n\t\t}\n\n\t\t// Emit any other key to outside\n\t\telse {\n\t\t\tthis._onDidChangeValue.fire({ scope, key, target: this.getKeyTargets(scope)[key], external });\n\t\t}\n\t}\n\n\tprotected emitWillSaveState(reason: WillSaveStateReason): void {\n\t\tthis._onWillSaveState.fire({ reason });\n\t}\n\n\tget(key: string, scope: StorageScope, fallbackValue: string): string;\n\tget(key: string, scope: StorageScope): string | undefined;\n\tget(key: string, scope: StorageScope, fallbackValue?: string): string | undefined {\n\t\treturn this.getStorage(scope)?.get(key, fallbackValue);\n\t}\n\n\tgetBoolean(key: string, scope: StorageScope, fallbackValue: boolean): boolean;\n\tgetBoolean(key: string, scope: StorageScope): boolean | undefined;\n\tgetBoolean(key: string, scope: StorageScope, fallbackValue?: boolean): boolean | undefined {\n\t\treturn this.getStorage(scope)?.getBoolean(key, fallbackValue);\n\t}\n\n\tgetNumber(key: string, scope: StorageScope, fallbackValue: number): number;\n\tgetNumber(key: string, scope: StorageScope): number | undefined;\n\tgetNumber(key: string, scope: StorageScope, fallbackValue?: number): number | undefined {\n\t\treturn this.getStorage(scope)?.getNumber(key, fallbackValue);\n\t}\n\n\tgetObject(key: string, scope: StorageScope, fallbackValue: object): object;\n\tgetObject(key: string, scope: StorageScope): object | undefined;\n\tgetObject(key: string, scope: StorageScope, fallbackValue?: object): object | undefined {\n\t\treturn this.getStorage(scope)?.getObject(key, fallbackValue);\n\t}\n\n\tstoreAll(entries: Array<IStorageEntry>, external: boolean): void {\n\t\tthis.withPausedEmitters(() => {\n\t\t\tfor (const entry of entries) {\n\t\t\t\tthis.store(entry.key, entry.value, entry.scope, entry.target, external);\n\t\t\t}\n\t\t});\n\t}\n\n\tstore(key: string, value: StorageValue, scope: StorageScope, target: StorageTarget, external = false): void {\n\n\t\t// We remove the key for undefined/null values\n\t\tif (isUndefinedOrNull(value)) {\n\t\t\tthis.remove(key, scope, external);\n\t\t\treturn;\n\t\t}\n\n\t\t// Update our datastructures but send events only after\n\t\tthis.withPausedEmitters(() => {\n\n\t\t\t// Update key-target map\n\t\t\tthis.updateKeyTarget(key, scope, target);\n\n\t\t\t// Store actual value\n\t\t\tthis.getStorage(scope)?.set(key, value, external);\n\t\t});\n\t}\n\n\tremove(key: string, scope: StorageScope, external = false): void {\n\n\t\t// Update our datastructures but send events only after\n\t\tthis.withPausedEmitters(() => {\n\n\t\t\t// Update key-target map\n\t\t\tthis.updateKeyTarget(key, scope, undefined);\n\n\t\t\t// Remove actual key\n\t\t\tthis.getStorage(scope)?.delete(key, external);\n\t\t});\n\t}\n\n\tprivate withPausedEmitters(fn: Function): void {\n\n\t\t// Pause emitters\n\t\tthis._onDidChangeValue.pause();\n\t\tthis._onDidChangeTarget.pause();\n\n\t\ttry {\n\t\t\tfn();\n\t\t} finally {\n\n\t\t\t// Resume emitters\n\t\t\tthis._onDidChangeValue.resume();\n\t\t\tthis._onDidChangeTarget.resume();\n\t\t}\n\t}\n\n\tkeys(scope: StorageScope, target: StorageTarget): string[] {\n\t\tconst keys: string[] = [];\n\n\t\tconst keyTargets = this.getKeyTargets(scope);\n\t\tfor (const key of Object.keys(keyTargets)) {\n\t\t\tconst keyTarget = keyTargets[key];\n\t\t\tif (keyTarget === target) {\n\t\t\t\tkeys.push(key);\n\t\t\t}\n\t\t}\n\n\t\treturn keys;\n\t}\n\n\tprivate updateKeyTarget(key: string, scope: StorageScope, target: StorageTarget | undefined, external = false): void {\n\n\t\t// Add\n\t\tconst keyTargets = this.getKeyTargets(scope);\n\t\tif (typeof target === 'number') {\n\t\t\tif (keyTargets[key] !== target) {\n\t\t\t\tkeyTargets[key] = target;\n\t\t\t\tthis.getStorage(scope)?.set(TARGET_KEY, JSON.stringify(keyTargets), external);\n\t\t\t}\n\t\t}\n\n\t\t// Remove\n\t\telse {\n\t\t\tif (typeof keyTargets[key] === 'number') {\n\t\t\t\tdelete keyTargets[key];\n\t\t\t\tthis.getStorage(scope)?.set(TARGET_KEY, JSON.stringify(keyTargets), external);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _workspaceKeyTargets: IKeyTargets | undefined = undefined;\n\tprivate get workspaceKeyTargets(): IKeyTargets {\n\t\tif (!this._workspaceKeyTargets) {\n\t\t\tthis._workspaceKeyTargets = this.loadKeyTargets(StorageScope.WORKSPACE);\n\t\t}\n\n\t\treturn this._workspaceKeyTargets;\n\t}\n\n\tprivate _profileKeyTargets: IKeyTargets | undefined = undefined;\n\tprivate get profileKeyTargets(): IKeyTargets {\n\t\tif (!this._profileKeyTargets) {\n\t\t\tthis._profileKeyTargets = this.loadKeyTargets(StorageScope.PROFILE);\n\t\t}\n\n\t\treturn this._profileKeyTargets;\n\t}\n\n\tprivate _applicationKeyTargets: IKeyTargets | undefined = undefined;\n\tprivate get applicationKeyTargets(): IKeyTargets {\n\t\tif (!this._applicationKeyTargets) {\n\t\t\tthis._applicationKeyTargets = this.loadKeyTargets(StorageScope.APPLICATION);\n\t\t}\n\n\t\treturn this._applicationKeyTargets;\n\t}\n\n\tprivate getKeyTargets(scope: StorageScope): IKeyTargets {\n\t\tswitch (scope) {\n\t\t\tcase StorageScope.APPLICATION:\n\t\t\t\treturn this.applicationKeyTargets;\n\t\t\tcase StorageScope.PROFILE:\n\t\t\t\treturn this.profileKeyTargets;\n\t\t\tdefault:\n\t\t\t\treturn this.workspaceKeyTargets;\n\t\t}\n\t}\n\n\tprivate loadKeyTargets(scope: StorageScope): { [key: string]: StorageTarget } {\n\t\tconst storage = this.getStorage(scope);\n\n\t\treturn storage ? loadKeyTargets(storage) : Object.create(null);\n\t}\n\n\tisNew(scope: StorageScope): boolean {\n\t\treturn this.getBoolean(IS_NEW_KEY, scope) === true;\n\t}\n\n\tasync flush(reason = WillSaveStateReason.NONE): Promise<void> {\n\n\t\t// Signal event to collect changes\n\t\tthis._onWillSaveState.fire({ reason });\n\n\t\tconst applicationStorage = this.getStorage(StorageScope.APPLICATION);\n\t\tconst profileStorage = this.getStorage(StorageScope.PROFILE);\n\t\tconst workspaceStorage = this.getStorage(StorageScope.WORKSPACE);\n\n\t\tswitch (reason) {\n\n\t\t\t// Unspecific reason: just wait when data is flushed\n\t\t\tcase WillSaveStateReason.NONE:\n\t\t\t\tawait Promises.settled([\n\t\t\t\t\tapplicationStorage?.whenFlushed() ?? Promise.resolve(),\n\t\t\t\t\tprofileStorage?.whenFlushed() ?? Promise.resolve(),\n\t\t\t\t\tworkspaceStorage?.whenFlushed() ?? Promise.resolve()\n\t\t\t\t]);\n\t\t\t\tbreak;\n\n\t\t\t// Shutdown: we want to flush as soon as possible\n\t\t\t// and not hit any delays that might be there\n\t\t\tcase WillSaveStateReason.SHUTDOWN:\n\t\t\t\tawait Promises.settled([\n\t\t\t\t\tapplicationStorage?.flush(0) ?? Promise.resolve(),\n\t\t\t\t\tprofileStorage?.flush(0) ?? Promise.resolve(),\n\t\t\t\t\tworkspaceStorage?.flush(0) ?? Promise.resolve()\n\t\t\t\t]);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tasync log(): Promise<void> {\n\t\tconst applicationItems = this.getStorage(StorageScope.APPLICATION)?.items ?? new Map<string, string>();\n\t\tconst profileItems = this.getStorage(StorageScope.PROFILE)?.items ?? new Map<string, string>();\n\t\tconst workspaceItems = this.getStorage(StorageScope.WORKSPACE)?.items ?? new Map<string, string>();\n\n\t\treturn logStorage(\n\t\t\tapplicationItems,\n\t\t\tprofileItems,\n\t\t\tworkspaceItems,\n\t\t\tthis.getLogDetails(StorageScope.APPLICATION) ?? '',\n\t\t\tthis.getLogDetails(StorageScope.PROFILE) ?? '',\n\t\t\tthis.getLogDetails(StorageScope.WORKSPACE) ?? ''\n\t\t);\n\t}\n\n\tasync optimize(scope: StorageScope): Promise<void> {\n\n\t\t// Await pending data to be flushed to the DB\n\t\t// before attempting to optimize the DB\n\t\tawait this.flush();\n\n\t\treturn this.getStorage(scope)?.optimize();\n\t}\n\n\tasync switch(to: IAnyWorkspaceIdentifier | IUserDataProfile, preserveData: boolean): Promise<void> {\n\n\t\t// Signal as event so that clients can store data before we switch\n\t\tthis.emitWillSaveState(WillSaveStateReason.NONE);\n\n\t\tif (isUserDataProfile(to)) {\n\t\t\treturn this.switchToProfile(to, preserveData);\n\t\t}\n\n\t\treturn this.switchToWorkspace(to, preserveData);\n\t}\n\n\tprotected canSwitchProfile(from: IUserDataProfile, to: IUserDataProfile): boolean {\n\t\tif (from.id === to.id) {\n\t\t\treturn false; // both profiles are same\n\t\t}\n\n\t\tif (isProfileUsingDefaultStorage(to) && isProfileUsingDefaultStorage(from)) {\n\t\t\treturn false; // both profiles are using default\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprotected switchData(oldStorage: Map<string, string>, newStorage: IStorage, scope: StorageScope): void {\n\t\tthis.withPausedEmitters(() => {\n\t\t\t// Signal storage keys that have changed\n\t\t\tconst handledkeys = new Set<string>();\n\t\t\tfor (const [key, oldValue] of oldStorage) {\n\t\t\t\thandledkeys.add(key);\n\n\t\t\t\tconst newValue = newStorage.get(key);\n\t\t\t\tif (newValue !== oldValue) {\n\t\t\t\t\tthis.emitDidChangeValue(scope, { key, external: true });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (const [key] of newStorage.items) {\n\t\t\t\tif (!handledkeys.has(key)) {\n\t\t\t\t\tthis.emitDidChangeValue(scope, { key, external: true });\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\t// --- abstract\n\n\tabstract hasScope(scope: IAnyWorkspaceIdentifier | IUserDataProfile): boolean;\n\n\tprotected abstract doInitialize(): Promise<void>;\n\n\tprotected abstract getStorage(scope: StorageScope): IStorage | undefined;\n\n\tprotected abstract getLogDetails(scope: StorageScope): string | undefined;\n\n\tprotected abstract switchToProfile(toProfile: IUserDataProfile, preserveData: boolean): Promise<void>;\n\tprotected abstract switchToWorkspace(toWorkspace: IAnyWorkspaceIdentifier | IUserDataProfile, preserveData: boolean): Promise<void>;\n}\n\nexport function isProfileUsingDefaultStorage(profile: IUserDataProfile): boolean {\n\treturn profile.isDefault || !!profile.useDefaultFlags?.globalState;\n}\n\nexport class InMemoryStorageService extends AbstractStorageService {\n\n\tprivate readonly applicationStorage = this._register(new Storage(new InMemoryStorageDatabase(), { hint: StorageHint.STORAGE_IN_MEMORY }));\n\tprivate readonly profileStorage = this._register(new Storage(new InMemoryStorageDatabase(), { hint: StorageHint.STORAGE_IN_MEMORY }));\n\tprivate readonly workspaceStorage = this._register(new Storage(new InMemoryStorageDatabase(), { hint: StorageHint.STORAGE_IN_MEMORY }));\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis._register(this.workspaceStorage.onDidChangeStorage(e => this.emitDidChangeValue(StorageScope.WORKSPACE, e)));\n\t\tthis._register(this.profileStorage.onDidChangeStorage(e => this.emitDidChangeValue(StorageScope.PROFILE, e)));\n\t\tthis._register(this.applicationStorage.onDidChangeStorage(e => this.emitDidChangeValue(StorageScope.APPLICATION, e)));\n\t}\n\n\tprotected getStorage(scope: StorageScope): IStorage {\n\t\tswitch (scope) {\n\t\t\tcase StorageScope.APPLICATION:\n\t\t\t\treturn this.applicationStorage;\n\t\t\tcase StorageScope.PROFILE:\n\t\t\t\treturn this.profileStorage;\n\t\t\tdefault:\n\t\t\t\treturn this.workspaceStorage;\n\t\t}\n\t}\n\n\tprotected getLogDetails(scope: StorageScope): string | undefined {\n\t\tswitch (scope) {\n\t\t\tcase StorageScope.APPLICATION:\n\t\t\t\treturn 'inMemory (application)';\n\t\t\tcase StorageScope.PROFILE:\n\t\t\t\treturn 'inMemory (profile)';\n\t\t\tdefault:\n\t\t\t\treturn 'inMemory (workspace)';\n\t\t}\n\t}\n\n\tprotected async doInitialize(): Promise<void> { }\n\n\tprotected async switchToProfile(): Promise<void> {\n\t\t// no-op when in-memory\n\t}\n\n\tprotected async switchToWorkspace(): Promise<void> {\n\t\t// no-op when in-memory\n\t}\n\n\tprotected override shouldFlushWhenIdle(): boolean {\n\t\treturn false;\n\t}\n\n\thasScope(scope: IAnyWorkspaceIdentifier | IUserDataProfile): boolean {\n\t\treturn false;\n\t}\n}\n\nexport async function logStorage(application: Map<string, string>, profile: Map<string, string>, workspace: Map<string, string>, applicationPath: string, profilePath: string, workspacePath: string): Promise<void> {\n\tconst safeParse = (value: string) => {\n\t\ttry {\n\t\t\treturn JSON.parse(value);\n\t\t} catch (error) {\n\t\t\treturn value;\n\t\t}\n\t};\n\n\tconst applicationItems = new Map<string, string>();\n\tconst applicationItemsParsed = new Map<string, string>();\n\tapplication.forEach((value, key) => {\n\t\tapplicationItems.set(key, value);\n\t\tapplicationItemsParsed.set(key, safeParse(value));\n\t});\n\n\tconst profileItems = new Map<string, string>();\n\tconst profileItemsParsed = new Map<string, string>();\n\tprofile.forEach((value, key) => {\n\t\tprofileItems.set(key, value);\n\t\tprofileItemsParsed.set(key, safeParse(value));\n\t});\n\n\tconst workspaceItems = new Map<string, string>();\n\tconst workspaceItemsParsed = new Map<string, string>();\n\tworkspace.forEach((value, key) => {\n\t\tworkspaceItems.set(key, value);\n\t\tworkspaceItemsParsed.set(key, safeParse(value));\n\t});\n\n\tif (applicationPath !== profilePath) {\n\t\tconsole.group(`Storage: Application (path: ${applicationPath})`);\n\t} else {\n\t\tconsole.group(`Storage: Application & Profile (path: ${applicationPath}, default profile)`);\n\t}\n\tconst applicationValues: { key: string; value: string }[] = [];\n\tapplicationItems.forEach((value, key) => {\n\t\tapplicationValues.push({ key, value });\n\t});\n\tconsole.table(applicationValues);\n\tconsole.groupEnd();\n\n\tconsole.log(applicationItemsParsed);\n\n\tif (applicationPath !== profilePath) {\n\t\tconsole.group(`Storage: Profile (path: ${profilePath}, profile specific)`);\n\t\tconst profileValues: { key: string; value: string }[] = [];\n\t\tprofileItems.forEach((value, key) => {\n\t\t\tprofileValues.push({ key, value });\n\t\t});\n\t\tconsole.table(profileValues);\n\t\tconsole.groupEnd();\n\n\t\tconsole.log(profileItemsParsed);\n\t}\n\n\tconsole.group(`Storage: Workspace (path: ${workspacePath})`);\n\tconst workspaceValues: { key: string; value: string }[] = [];\n\tworkspaceItems.forEach((value, key) => {\n\t\tworkspaceValues.push({ key, value });\n\t});\n\tconsole.table(workspaceValues);\n\tconsole.groupEnd();\n\n\tconsole.log(workspaceItemsParsed);\n}\n"]}