{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/storage/common/storageIpc.ts"],"names":[],"mappings":"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","file":"storageIpc.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { UriDto } from 'vs/base/common/uri';\nimport { IChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { IStorageDatabase, IStorageItemsChangeEvent, IUpdateRequest } from 'vs/base/parts/storage/common/storage';\nimport { IUserDataProfile } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { ISerializedSingleFolderWorkspaceIdentifier, ISerializedWorkspaceIdentifier, IEmptyWorkspaceIdentifier, IAnyWorkspaceIdentifier } from 'vs/platform/workspace/common/workspace';\n\nexport type Key = string;\nexport type Value = string;\nexport type Item = [Key, Value];\n\nexport interface IBaseSerializableStorageRequest {\n\n\t/**\n\t * Profile to correlate storage. Only used when no\n\t * workspace is provided. Can be undefined to denote\n\t * application scope.\n\t */\n\treadonly profile: UriDto<IUserDataProfile> | undefined;\n\n\t/**\n\t * Workspace to correlate storage. Can be undefined to\n\t * denote application or profile scope depending on profile.\n\t */\n\treadonly workspace: ISerializedWorkspaceIdentifier | ISerializedSingleFolderWorkspaceIdentifier | IEmptyWorkspaceIdentifier | undefined;\n\n\t/**\n\t * Additional payload for the request to perform.\n\t */\n\treadonly payload?: unknown;\n}\n\nexport interface ISerializableUpdateRequest extends IBaseSerializableStorageRequest {\n\tinsert?: Item[];\n\tdelete?: Key[];\n}\n\nexport interface ISerializableItemsChangeEvent {\n\treadonly changed?: Item[];\n\treadonly deleted?: Key[];\n}\n\nabstract class BaseStorageDatabaseClient extends Disposable implements IStorageDatabase {\n\n\tabstract readonly onDidChangeItemsExternal: Event<IStorageItemsChangeEvent>;\n\n\tconstructor(\n\t\tprotected channel: IChannel,\n\t\tprotected profile: UriDto<IUserDataProfile> | undefined,\n\t\tprotected workspace: IAnyWorkspaceIdentifier | undefined\n\t) {\n\t\tsuper();\n\t}\n\n\tasync getItems(): Promise<Map<string, string>> {\n\t\tconst serializableRequest: IBaseSerializableStorageRequest = { profile: this.profile, workspace: this.workspace };\n\t\tconst items: Item[] = await this.channel.call('getItems', serializableRequest);\n\n\t\treturn new Map(items);\n\t}\n\n\tupdateItems(request: IUpdateRequest): Promise<void> {\n\t\tconst serializableRequest: ISerializableUpdateRequest = { profile: this.profile, workspace: this.workspace };\n\n\t\tif (request.insert) {\n\t\t\tserializableRequest.insert = Array.from(request.insert.entries());\n\t\t}\n\n\t\tif (request.delete) {\n\t\t\tserializableRequest.delete = Array.from(request.delete.values());\n\t\t}\n\n\t\treturn this.channel.call('updateItems', serializableRequest);\n\t}\n\n\toptimize(): Promise<void> {\n\t\tconst serializableRequest: IBaseSerializableStorageRequest = { profile: this.profile, workspace: this.workspace };\n\n\t\treturn this.channel.call('optimize', serializableRequest);\n\t}\n\n\tabstract close(): Promise<void>;\n}\n\nabstract class BaseProfileAwareStorageDatabaseClient extends BaseStorageDatabaseClient {\n\n\tprivate readonly _onDidChangeItemsExternal = this._register(new Emitter<IStorageItemsChangeEvent>());\n\treadonly onDidChangeItemsExternal = this._onDidChangeItemsExternal.event;\n\n\tconstructor(channel: IChannel, profile: UriDto<IUserDataProfile> | undefined) {\n\t\tsuper(channel, profile, undefined);\n\n\t\tthis.registerListeners();\n\t}\n\n\tprivate registerListeners(): void {\n\t\tthis._register(this.channel.listen<ISerializableItemsChangeEvent>('onDidChangeStorage', { profile: this.profile })((e: ISerializableItemsChangeEvent) => this.onDidChangeStorage(e)));\n\t}\n\n\tprivate onDidChangeStorage(e: ISerializableItemsChangeEvent): void {\n\t\tif (Array.isArray(e.changed) || Array.isArray(e.deleted)) {\n\t\t\tthis._onDidChangeItemsExternal.fire({\n\t\t\t\tchanged: e.changed ? new Map(e.changed) : undefined,\n\t\t\t\tdeleted: e.deleted ? new Set<string>(e.deleted) : undefined\n\t\t\t});\n\t\t}\n\t}\n}\n\nexport class ApplicationStorageDatabaseClient extends BaseProfileAwareStorageDatabaseClient {\n\n\tconstructor(channel: IChannel) {\n\t\tsuper(channel, undefined);\n\t}\n\n\tasync close(): Promise<void> {\n\n\t\t// The application storage database is shared across all instances so\n\t\t// we do not close it from the window. However we dispose the\n\t\t// listener for external changes because we no longer interested in it.\n\n\t\tthis.dispose();\n\t}\n}\n\nexport class ProfileStorageDatabaseClient extends BaseProfileAwareStorageDatabaseClient {\n\n\tconstructor(channel: IChannel, profile: UriDto<IUserDataProfile>) {\n\t\tsuper(channel, profile);\n\t}\n\n\tasync close(): Promise<void> {\n\n\t\t// The profile storage database is shared across all instances of\n\t\t// the same profile so we do not close it from the window.\n\t\t// However we dispose the listener for external changes because\n\t\t// we no longer interested in it.\n\n\t\tthis.dispose();\n\t}\n}\n\nexport class WorkspaceStorageDatabaseClient extends BaseStorageDatabaseClient implements IStorageDatabase {\n\n\treadonly onDidChangeItemsExternal = Event.None; // unsupported for workspace storage because we only ever write from one window\n\n\tconstructor(channel: IChannel, workspace: IAnyWorkspaceIdentifier) {\n\t\tsuper(channel, undefined, workspace);\n\t}\n\n\tasync close(): Promise<void> {\n\n\t\t// The workspace storage database is only used in this instance\n\t\t// but we do not need to close it from here, the main process\n\t\t// can take care of that.\n\n\t\tthis.dispose();\n\t}\n}\n\nexport class StorageClient {\n\n\tconstructor(private readonly channel: IChannel) { }\n\n\tisUsed(path: string): Promise<boolean> {\n\t\tconst serializableRequest: ISerializableUpdateRequest = { payload: path, profile: undefined, workspace: undefined };\n\n\t\treturn this.channel.call('isUsed', serializableRequest);\n\t}\n}\n"]}