{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/storage/common/storageService.ts"],"names":[],"mappings":"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","file":"storageService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Promises } from 'vs/base/common/async';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { Schemas } from 'vs/base/common/network';\nimport { joinPath } from 'vs/base/common/resources';\nimport { IStorage, Storage } from 'vs/base/parts/storage/common/storage';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IRemoteService } from 'vs/platform/ipc/common/services';\nimport { AbstractStorageService, isProfileUsingDefaultStorage, StorageScope, WillSaveStateReason } from 'vs/platform/storage/common/storage';\nimport { ApplicationStorageDatabaseClient, ProfileStorageDatabaseClient, WorkspaceStorageDatabaseClient } from 'vs/platform/storage/common/storageIpc';\nimport { isUserDataProfile, IUserDataProfile } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { IAnyWorkspaceIdentifier } from 'vs/platform/workspace/common/workspace';\n\nexport class RemoteStorageService extends AbstractStorageService {\n\n\tprivate readonly applicationStorageProfile = this.initialProfiles.defaultProfile;\n\tprivate readonly applicationStorage = this.createApplicationStorage();\n\n\tprivate profileStorageProfile = this.initialProfiles.currentProfile;\n\tprivate readonly profileStorageDisposables = this._register(new DisposableStore());\n\tprivate profileStorage = this.createProfileStorage(this.profileStorageProfile);\n\n\tprivate workspaceStorageId = this.initialWorkspace?.id;\n\tprivate readonly workspaceStorageDisposables = this._register(new DisposableStore());\n\tprivate workspaceStorage = this.createWorkspaceStorage(this.initialWorkspace);\n\n\tconstructor(\n\t\tprivate readonly initialWorkspace: IAnyWorkspaceIdentifier | undefined,\n\t\tprivate readonly initialProfiles: { defaultProfile: IUserDataProfile; currentProfile: IUserDataProfile },\n\t\tprivate readonly remoteService: IRemoteService,\n\t\tprivate readonly environmentService: IEnvironmentService\n\t) {\n\t\tsuper();\n\t}\n\n\tprivate createApplicationStorage(): IStorage {\n\t\tconst storageDataBaseClient = this._register(new ApplicationStorageDatabaseClient(this.remoteService.getChannel('storage')));\n\t\tconst applicationStorage = this._register(new Storage(storageDataBaseClient));\n\n\t\tthis._register(applicationStorage.onDidChangeStorage(e => this.emitDidChangeValue(StorageScope.APPLICATION, e)));\n\n\t\treturn applicationStorage;\n\t}\n\n\tprivate createProfileStorage(profile: IUserDataProfile): IStorage {\n\n\t\t// First clear any previously associated disposables\n\t\tthis.profileStorageDisposables.clear();\n\n\t\t// Remember profile associated to profile storage\n\t\tthis.profileStorageProfile = profile;\n\n\t\tlet profileStorage: IStorage;\n\t\tif (isProfileUsingDefaultStorage(profile)) {\n\n\t\t\t// If we are using default profile storage, the profile storage is\n\t\t\t// actually the same as application storage. As such we\n\t\t\t// avoid creating the storage library a second time on\n\t\t\t// the same DB.\n\n\t\t\tprofileStorage = this.applicationStorage;\n\t\t} else {\n\t\t\tconst storageDataBaseClient = this.profileStorageDisposables.add(new ProfileStorageDatabaseClient(this.remoteService.getChannel('storage'), profile));\n\t\t\tprofileStorage = this.profileStorageDisposables.add(new Storage(storageDataBaseClient));\n\t\t}\n\n\t\tthis.profileStorageDisposables.add(profileStorage.onDidChangeStorage(e => this.emitDidChangeValue(StorageScope.PROFILE, e)));\n\n\t\treturn profileStorage;\n\t}\n\n\tprivate createWorkspaceStorage(workspace: IAnyWorkspaceIdentifier): IStorage;\n\tprivate createWorkspaceStorage(workspace: IAnyWorkspaceIdentifier | undefined): IStorage | undefined;\n\tprivate createWorkspaceStorage(workspace: IAnyWorkspaceIdentifier | undefined): IStorage | undefined {\n\n\t\t// First clear any previously associated disposables\n\t\tthis.workspaceStorageDisposables.clear();\n\n\t\t// Remember workspace ID for logging later\n\t\tthis.workspaceStorageId = workspace?.id;\n\n\t\tlet workspaceStorage: IStorage | undefined = undefined;\n\t\tif (workspace) {\n\t\t\tconst storageDataBaseClient = this.workspaceStorageDisposables.add(new WorkspaceStorageDatabaseClient(this.remoteService.getChannel('storage'), workspace));\n\t\t\tworkspaceStorage = this.workspaceStorageDisposables.add(new Storage(storageDataBaseClient));\n\n\t\t\tthis.workspaceStorageDisposables.add(workspaceStorage.onDidChangeStorage(e => this.emitDidChangeValue(StorageScope.WORKSPACE, e)));\n\t\t}\n\n\t\treturn workspaceStorage;\n\t}\n\n\tprotected async doInitialize(): Promise<void> {\n\n\t\t// Init all storage locations\n\t\tawait Promises.settled([\n\t\t\tthis.applicationStorage.init(),\n\t\t\tthis.profileStorage.init(),\n\t\t\tthis.workspaceStorage?.init() ?? Promise.resolve()\n\t\t]);\n\t}\n\n\tprotected getStorage(scope: StorageScope): IStorage | undefined {\n\t\tswitch (scope) {\n\t\t\tcase StorageScope.APPLICATION:\n\t\t\t\treturn this.applicationStorage;\n\t\t\tcase StorageScope.PROFILE:\n\t\t\t\treturn this.profileStorage;\n\t\t\tdefault:\n\t\t\t\treturn this.workspaceStorage;\n\t\t}\n\t}\n\n\tprotected getLogDetails(scope: StorageScope): string | undefined {\n\t\tswitch (scope) {\n\t\t\tcase StorageScope.APPLICATION:\n\t\t\t\treturn this.applicationStorageProfile.globalStorageHome.with({ scheme: Schemas.file }).fsPath;\n\t\t\tcase StorageScope.PROFILE:\n\t\t\t\treturn this.profileStorageProfile?.globalStorageHome.with({ scheme: Schemas.file }).fsPath;\n\t\t\tdefault:\n\t\t\t\treturn this.workspaceStorageId ? `${joinPath(this.environmentService.workspaceStorageHome, this.workspaceStorageId, 'state.vscdb').with({ scheme: Schemas.file }).fsPath}` : undefined;\n\t\t}\n\t}\n\n\tasync close(): Promise<void> {\n\n\t\t// Stop periodic scheduler and idle runner as we now collect state normally\n\t\tthis.stopFlushWhenIdle();\n\n\t\t// Signal as event so that clients can still store data\n\t\tthis.emitWillSaveState(WillSaveStateReason.SHUTDOWN);\n\n\t\t// Do it\n\t\tawait Promises.settled([\n\t\t\tthis.applicationStorage.close(),\n\t\t\tthis.profileStorage.close(),\n\t\t\tthis.workspaceStorage?.close() ?? Promise.resolve()\n\t\t]);\n\t}\n\n\tprotected async switchToProfile(toProfile: IUserDataProfile): Promise<void> {\n\t\tif (!this.canSwitchProfile(this.profileStorageProfile, toProfile)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst oldProfileStorage = this.profileStorage;\n\t\tconst oldItems = oldProfileStorage.items;\n\n\t\t// Close old profile storage but only if this is\n\t\t// different from application storage!\n\t\tif (oldProfileStorage !== this.applicationStorage) {\n\t\t\tawait oldProfileStorage.close();\n\t\t}\n\n\t\t// Create new profile storage & init\n\t\tthis.profileStorage = this.createProfileStorage(toProfile);\n\t\tawait this.profileStorage.init();\n\n\t\t// Handle data switch and eventing\n\t\tthis.switchData(oldItems, this.profileStorage, StorageScope.PROFILE);\n\t}\n\n\tprotected async switchToWorkspace(toWorkspace: IAnyWorkspaceIdentifier, preserveData: boolean): Promise<void> {\n\t\tconst oldWorkspaceStorage = this.workspaceStorage;\n\t\tconst oldItems = oldWorkspaceStorage?.items ?? new Map();\n\n\t\t// Close old workspace storage\n\t\tawait oldWorkspaceStorage?.close();\n\n\t\t// Create new workspace storage & init\n\t\tthis.workspaceStorage = this.createWorkspaceStorage(toWorkspace);\n\t\tawait this.workspaceStorage.init();\n\n\t\t// Handle data switch and eventing\n\t\tthis.switchData(oldItems, this.workspaceStorage, StorageScope.WORKSPACE);\n\t}\n\n\thasScope(scope: IAnyWorkspaceIdentifier | IUserDataProfile): boolean {\n\t\tif (isUserDataProfile(scope)) {\n\t\t\treturn this.profileStorageProfile.id === scope.id;\n\t\t}\n\n\t\treturn this.workspaceStorageId === scope.id;\n\t}\n}\n"]}