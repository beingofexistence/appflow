{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/storage/electron-main/storageIpc.ts"],"names":[],"mappings":"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","file":"storageIpc.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { revive } from 'vs/base/common/marshalling';\nimport { IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { IBaseSerializableStorageRequest, ISerializableItemsChangeEvent, ISerializableUpdateRequest, Key, Value } from 'vs/platform/storage/common/storageIpc';\nimport { IStorageChangeEvent, IStorageMain } from 'vs/platform/storage/electron-main/storageMain';\nimport { IStorageMainService } from 'vs/platform/storage/electron-main/storageMainService';\nimport { IUserDataProfile } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { reviveIdentifier, IAnyWorkspaceIdentifier } from 'vs/platform/workspace/common/workspace';\n\nexport class StorageDatabaseChannel extends Disposable implements IServerChannel {\n\n\tprivate static readonly STORAGE_CHANGE_DEBOUNCE_TIME = 100;\n\n\tprivate readonly onDidChangeApplicationStorageEmitter = this._register(new Emitter<ISerializableItemsChangeEvent>());\n\n\tprivate readonly mapProfileToOnDidChangeProfileStorageEmitter = new Map<string /* profile ID */, Emitter<ISerializableItemsChangeEvent>>();\n\n\tconstructor(\n\t\tprivate readonly logService: ILogService,\n\t\tprivate readonly storageMainService: IStorageMainService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerStorageChangeListeners(storageMainService.applicationStorage, this.onDidChangeApplicationStorageEmitter);\n\t}\n\n\t//#region Storage Change Events\n\n\tprivate registerStorageChangeListeners(storage: IStorageMain, emitter: Emitter<ISerializableItemsChangeEvent>): void {\n\n\t\t// Listen for changes in provided storage to send to listeners\n\t\t// that are listening. Use a debouncer to reduce IPC traffic.\n\n\t\tthis._register(Event.debounce(storage.onDidChangeStorage, (prev: IStorageChangeEvent[] | undefined, cur: IStorageChangeEvent) => {\n\t\t\tif (!prev) {\n\t\t\t\tprev = [cur];\n\t\t\t} else {\n\t\t\t\tprev.push(cur);\n\t\t\t}\n\n\t\t\treturn prev;\n\t\t}, StorageDatabaseChannel.STORAGE_CHANGE_DEBOUNCE_TIME)(events => {\n\t\t\tif (events.length) {\n\t\t\t\temitter.fire(this.serializeStorageChangeEvents(events, storage));\n\t\t\t}\n\t\t}));\n\t}\n\n\tprivate serializeStorageChangeEvents(events: IStorageChangeEvent[], storage: IStorageMain): ISerializableItemsChangeEvent {\n\t\tconst changed = new Map<Key, Value>();\n\t\tconst deleted = new Set<Key>();\n\t\tevents.forEach(event => {\n\t\t\tconst existing = storage.get(event.key);\n\t\t\tif (typeof existing === 'string') {\n\t\t\t\tchanged.set(event.key, existing);\n\t\t\t} else {\n\t\t\t\tdeleted.add(event.key);\n\t\t\t}\n\t\t});\n\n\t\treturn {\n\t\t\tchanged: Array.from(changed.entries()),\n\t\t\tdeleted: Array.from(deleted.values())\n\t\t};\n\t}\n\n\tlisten(_: unknown, event: string, arg: IBaseSerializableStorageRequest): Event<any> {\n\t\tswitch (event) {\n\t\t\tcase 'onDidChangeStorage': {\n\t\t\t\tconst profile = arg.profile ? revive<IUserDataProfile>(arg.profile) : undefined;\n\n\t\t\t\t// Without profile: application scope\n\t\t\t\tif (!profile) {\n\t\t\t\t\treturn this.onDidChangeApplicationStorageEmitter.event;\n\t\t\t\t}\n\n\t\t\t\t// With profile: profile scope for the profile\n\t\t\t\tlet profileStorageChangeEmitter = this.mapProfileToOnDidChangeProfileStorageEmitter.get(profile.id);\n\t\t\t\tif (!profileStorageChangeEmitter) {\n\t\t\t\t\tprofileStorageChangeEmitter = this._register(new Emitter<ISerializableItemsChangeEvent>());\n\t\t\t\t\tthis.registerStorageChangeListeners(this.storageMainService.profileStorage(profile), profileStorageChangeEmitter);\n\t\t\t\t\tthis.mapProfileToOnDidChangeProfileStorageEmitter.set(profile.id, profileStorageChangeEmitter);\n\t\t\t\t}\n\n\t\t\t\treturn profileStorageChangeEmitter.event;\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(`Event not found: ${event}`);\n\t}\n\n\t//#endregion\n\n\tasync call(_: unknown, command: string, arg: IBaseSerializableStorageRequest): Promise<any> {\n\t\tconst profile = arg.profile ? revive<IUserDataProfile>(arg.profile) : undefined;\n\t\tconst workspace = reviveIdentifier(arg.workspace);\n\n\t\t// Get storage to be ready\n\t\tconst storage = await this.withStorageInitialized(profile, workspace);\n\n\t\t// handle call\n\t\tswitch (command) {\n\t\t\tcase 'getItems': {\n\t\t\t\treturn Array.from(storage.items.entries());\n\t\t\t}\n\n\t\t\tcase 'updateItems': {\n\t\t\t\tconst items: ISerializableUpdateRequest = arg;\n\n\t\t\t\tif (items.insert) {\n\t\t\t\t\tfor (const [key, value] of items.insert) {\n\t\t\t\t\t\tstorage.set(key, value);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\titems.delete?.forEach(key => storage.delete(key));\n\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tcase 'optimize': {\n\t\t\t\treturn storage.optimize();\n\t\t\t}\n\n\t\t\tcase 'isUsed': {\n\t\t\t\tconst path = arg.payload as string | undefined;\n\t\t\t\tif (typeof path === 'string') {\n\t\t\t\t\treturn this.storageMainService.isUsed(path);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error(`Call not found: ${command}`);\n\t\t}\n\t}\n\n\tprivate async withStorageInitialized(profile: IUserDataProfile | undefined, workspace: IAnyWorkspaceIdentifier | undefined): Promise<IStorageMain> {\n\t\tlet storage: IStorageMain;\n\t\tif (workspace) {\n\t\t\tstorage = this.storageMainService.workspaceStorage(workspace);\n\t\t} else if (profile) {\n\t\t\tstorage = this.storageMainService.profileStorage(profile);\n\t\t} else {\n\t\t\tstorage = this.storageMainService.applicationStorage;\n\t\t}\n\n\t\ttry {\n\t\t\tawait storage.init();\n\t\t} catch (error) {\n\t\t\tthis.logService.error(`StorageIPC#init: Unable to init ${workspace ? 'workspace' : profile ? 'profile' : 'application'} storage due to ${error}`);\n\t\t}\n\n\t\treturn storage;\n\t}\n}\n"]}