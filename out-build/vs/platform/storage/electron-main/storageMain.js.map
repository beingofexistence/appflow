{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/storage/electron-main/storageMain.ts"],"names":[],"mappings":"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","file":"storageMain.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { top } from 'vs/base/common/arrays';\nimport { DeferredPromise } from 'vs/base/common/async';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, IDisposable } from 'vs/base/common/lifecycle';\nimport { join } from 'vs/base/common/path';\nimport { StopWatch } from 'vs/base/common/stopwatch';\nimport { URI } from 'vs/base/common/uri';\nimport { Promises } from 'vs/base/node/pfs';\nimport { InMemoryStorageDatabase, IStorage, Storage, StorageHint, StorageState } from 'vs/base/parts/storage/common/storage';\nimport { ISQLiteStorageDatabaseLoggingOptions, SQLiteStorageDatabase } from 'vs/base/parts/storage/node/storage';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { ILogService, LogLevel } from 'vs/platform/log/common/log';\nimport { IS_NEW_KEY } from 'vs/platform/storage/common/storage';\nimport { IUserDataProfile, IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { currentSessionDateStorageKey, firstSessionDateStorageKey, lastSessionDateStorageKey } from 'vs/platform/telemetry/common/telemetry';\nimport { isSingleFolderWorkspaceIdentifier, isWorkspaceIdentifier, IAnyWorkspaceIdentifier } from 'vs/platform/workspace/common/workspace';\nimport { Schemas } from 'vs/base/common/network';\n\nexport interface IStorageMainOptions {\n\n\t/**\n\t * If enabled, storage will not persist to disk\n\t * but into memory.\n\t */\n\treadonly useInMemoryStorage?: boolean;\n}\n\n/**\n * Provides access to application, profile and workspace storage from\n * the electron-main side that is the owner of all storage connections.\n */\nexport interface IStorageMain extends IDisposable {\n\n\t/**\n\t * Emitted whenever data is updated or deleted.\n\t */\n\treadonly onDidChangeStorage: Event<IStorageChangeEvent>;\n\n\t/**\n\t * Emitted when the storage is closed.\n\t */\n\treadonly onDidCloseStorage: Event<void>;\n\n\t/**\n\t * Access to all cached items of this storage service.\n\t */\n\treadonly items: Map<string, string>;\n\n\t/**\n\t * Allows to join on the `init` call having completed\n\t * to be able to safely use the storage.\n\t */\n\treadonly whenInit: Promise<void>;\n\n\t/**\n\t * Provides access to the `IStorage` implementation which will be\n\t * in-memory for as long as the storage has not been initialized.\n\t */\n\treadonly storage: IStorage;\n\n\t/**\n\t * The file path of the underlying storage file if any.\n\t */\n\treadonly path: string | undefined;\n\n\t/**\n\t * Required call to ensure the service can be used.\n\t */\n\tinit(): Promise<void>;\n\n\t/**\n\t * Retrieve an element stored with the given key from storage. Use\n\t * the provided defaultValue if the element is null or undefined.\n\t */\n\tget(key: string, fallbackValue: string): string;\n\tget(key: string, fallbackValue?: string): string | undefined;\n\n\t/**\n\t * Store a string value under the given key to storage. The value will\n\t * be converted to a string.\n\t */\n\tset(key: string, value: string | boolean | number | undefined | null): void;\n\n\t/**\n\t * Delete an element stored under the provided key from storage.\n\t */\n\tdelete(key: string): void;\n\n\t/**\n\t * Whether the storage is using in-memory persistence or not.\n\t */\n\tisInMemory(): boolean;\n\n\t/**\n\t * Attempts to reduce the DB size via optimization commands if supported.\n\t */\n\toptimize(): Promise<void>;\n\n\t/**\n\t * Close the storage connection.\n\t */\n\tclose(): Promise<void>;\n}\n\nexport interface IStorageChangeEvent {\n\treadonly key: string;\n}\n\nabstract class BaseStorageMain extends Disposable implements IStorageMain {\n\n\tprivate static readonly LOG_SLOW_CLOSE_THRESHOLD = 2000;\n\n\tprotected readonly _onDidChangeStorage = this._register(new Emitter<IStorageChangeEvent>());\n\treadonly onDidChangeStorage = this._onDidChangeStorage.event;\n\n\tprivate readonly _onDidCloseStorage = this._register(new Emitter<void>());\n\treadonly onDidCloseStorage = this._onDidCloseStorage.event;\n\n\tprivate _storage = this._register(new Storage(new InMemoryStorageDatabase(), { hint: StorageHint.STORAGE_IN_MEMORY })); // storage is in-memory until initialized\n\tget storage(): IStorage { return this._storage; }\n\n\tabstract get path(): string | undefined;\n\n\tprivate initializePromise: Promise<void> | undefined = undefined;\n\n\tprivate readonly whenInitPromise = new DeferredPromise<void>();\n\treadonly whenInit = this.whenInitPromise.p;\n\n\tprivate state = StorageState.None;\n\n\tconstructor(\n\t\tprotected readonly logService: ILogService,\n\t\tprivate readonly fileService: IFileService\n\t) {\n\t\tsuper();\n\t}\n\n\tisInMemory(): boolean {\n\t\treturn this._storage.isInMemory();\n\t}\n\n\tinit(): Promise<void> {\n\t\tif (!this.initializePromise) {\n\t\t\tthis.initializePromise = (async () => {\n\t\t\t\tif (this.state !== StorageState.None) {\n\t\t\t\t\treturn; // either closed or already initialized\n\t\t\t\t}\n\n\t\t\t\ttry {\n\n\t\t\t\t\t// Create storage via subclasses\n\t\t\t\t\tconst storage = this._register(await this.doCreate());\n\n\t\t\t\t\t// Replace our in-memory storage with the real\n\t\t\t\t\t// once as soon as possible without awaiting\n\t\t\t\t\t// the init call.\n\t\t\t\t\tthis._storage.dispose();\n\t\t\t\t\tthis._storage = storage;\n\n\t\t\t\t\t// Re-emit storage changes via event\n\t\t\t\t\tthis._register(storage.onDidChangeStorage(e => this._onDidChangeStorage.fire(e)));\n\n\t\t\t\t\t// Await storage init\n\t\t\t\t\tawait this.doInit(storage);\n\n\t\t\t\t\t// Ensure we track whether storage is new or not\n\t\t\t\t\tconst isNewStorage = storage.getBoolean(IS_NEW_KEY);\n\t\t\t\t\tif (isNewStorage === undefined) {\n\t\t\t\t\t\tstorage.set(IS_NEW_KEY, true);\n\t\t\t\t\t} else if (isNewStorage) {\n\t\t\t\t\t\tstorage.set(IS_NEW_KEY, false);\n\t\t\t\t\t}\n\t\t\t\t} catch (error) {\n\t\t\t\t\tthis.logService.error(`[storage main] initialize(): Unable to init storage due to ${error}`);\n\t\t\t\t} finally {\n\n\t\t\t\t\t// Update state\n\t\t\t\t\tthis.state = StorageState.Initialized;\n\n\t\t\t\t\t// Mark init promise as completed\n\t\t\t\t\tthis.whenInitPromise.complete();\n\t\t\t\t}\n\t\t\t})();\n\t\t}\n\n\t\treturn this.initializePromise;\n\t}\n\n\tprotected createLoggingOptions(): ISQLiteStorageDatabaseLoggingOptions {\n\t\treturn {\n\t\t\tlogTrace: (this.logService.getLevel() === LogLevel.Trace) ? msg => this.logService.trace(msg) : undefined,\n\t\t\tlogError: error => this.logService.error(error)\n\t\t};\n\t}\n\n\tprotected doInit(storage: IStorage): Promise<void> {\n\t\treturn storage.init();\n\t}\n\n\tprotected abstract doCreate(): Promise<Storage>;\n\n\tget items(): Map<string, string> { return this._storage.items; }\n\n\tget(key: string, fallbackValue: string): string;\n\tget(key: string, fallbackValue?: string): string | undefined;\n\tget(key: string, fallbackValue?: string): string | undefined {\n\t\treturn this._storage.get(key, fallbackValue);\n\t}\n\n\tset(key: string, value: string | boolean | number | undefined | null): Promise<void> {\n\t\treturn this._storage.set(key, value);\n\t}\n\n\tdelete(key: string): Promise<void> {\n\t\treturn this._storage.delete(key);\n\t}\n\n\toptimize(): Promise<void> {\n\t\treturn this._storage.optimize();\n\t}\n\n\tasync close(): Promise<void> {\n\n\t\t// Measure how long it takes to close storage\n\t\tconst watch = new StopWatch(false);\n\t\tawait this.doClose();\n\t\twatch.stop();\n\n\t\t// If close() is taking a long time, there is\n\t\t// a chance that the underlying DB is large\n\t\t// either on disk or in general. In that case\n\t\t// log some additional info to further diagnose\n\t\tif (watch.elapsed() > BaseStorageMain.LOG_SLOW_CLOSE_THRESHOLD) {\n\t\t\tawait this.logSlowClose(watch);\n\t\t}\n\n\t\t// Signal as event\n\t\tthis._onDidCloseStorage.fire();\n\t}\n\n\tprivate async logSlowClose(watch: StopWatch) {\n\t\tif (!this.path) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tconst largestEntries = top(Array.from(this._storage.items.entries())\n\t\t\t\t.map(([key, value]) => ({ key, length: value.length })), (entryA, entryB) => entryB.length - entryA.length, 5)\n\t\t\t\t.map(entry => `${entry.key}:${entry.length}`).join(', ');\n\t\t\tconst dbSize = (await this.fileService.stat(URI.file(this.path))).size;\n\n\t\t\tthis.logService.warn(`[storage main] detected slow close() operation: Time: ${watch.elapsed()}ms, DB size: ${dbSize}b, Large Keys: ${largestEntries}`);\n\t\t} catch (error) {\n\t\t\tthis.logService.error('[storage main] figuring out stats for slow DB on close() resulted in an error', error);\n\t\t}\n\t}\n\n\tprivate async doClose(): Promise<void> {\n\n\t\t// Ensure we are not accidentally leaving\n\t\t// a pending initialized storage behind in\n\t\t// case `close()` was called before `init()`\n\t\t// finishes.\n\t\tif (this.initializePromise) {\n\t\t\tawait this.initializePromise;\n\t\t}\n\n\t\t// Update state\n\t\tthis.state = StorageState.Closed;\n\n\t\t// Propagate to storage lib\n\t\tawait this._storage.close();\n\t}\n}\n\nclass BaseProfileAwareStorageMain extends BaseStorageMain {\n\n\tprivate static readonly STORAGE_NAME = 'state.vscdb';\n\n\tget path(): string | undefined {\n\t\tif (!this.options.useInMemoryStorage) {\n\t\t\treturn join(this.profile.globalStorageHome.with({ scheme: Schemas.file }).fsPath, BaseProfileAwareStorageMain.STORAGE_NAME);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tconstructor(\n\t\tprivate readonly profile: IUserDataProfile,\n\t\tprivate readonly options: IStorageMainOptions,\n\t\tlogService: ILogService,\n\t\tfileService: IFileService\n\t) {\n\t\tsuper(logService, fileService);\n\t}\n\n\tprotected async doCreate(): Promise<Storage> {\n\t\treturn new Storage(new SQLiteStorageDatabase(this.path ?? SQLiteStorageDatabase.IN_MEMORY_PATH, {\n\t\t\tlogging: this.createLoggingOptions()\n\t\t}), !this.path ? { hint: StorageHint.STORAGE_IN_MEMORY } : undefined);\n\t}\n}\n\nexport class ProfileStorageMain extends BaseProfileAwareStorageMain {\n\n\tconstructor(\n\t\tprofile: IUserDataProfile,\n\t\toptions: IStorageMainOptions,\n\t\tlogService: ILogService,\n\t\tfileService: IFileService\n\t) {\n\t\tsuper(profile, options, logService, fileService);\n\t}\n}\n\nexport class ApplicationStorageMain extends BaseProfileAwareStorageMain {\n\n\tconstructor(\n\t\toptions: IStorageMainOptions,\n\t\tuserDataProfileService: IUserDataProfilesService,\n\t\tlogService: ILogService,\n\t\tfileService: IFileService\n\t) {\n\t\tsuper(userDataProfileService.defaultProfile, options, logService, fileService);\n\t}\n\n\tprotected override async doInit(storage: IStorage): Promise<void> {\n\t\tawait super.doInit(storage);\n\n\t\t// Apply telemetry values as part of the application storage initialization\n\t\tthis.updateTelemetryState(storage);\n\t}\n\n\tprivate updateTelemetryState(storage: IStorage): void {\n\n\t\t// First session date (once)\n\t\tconst firstSessionDate = storage.get(firstSessionDateStorageKey, undefined);\n\t\tif (firstSessionDate === undefined) {\n\t\t\tstorage.set(firstSessionDateStorageKey, new Date().toUTCString());\n\t\t}\n\n\t\t// Last / current session (always)\n\t\t// previous session date was the \"current\" one at that time\n\t\t// current session date is \"now\"\n\t\tconst lastSessionDate = storage.get(currentSessionDateStorageKey, undefined);\n\t\tconst currentSessionDate = new Date().toUTCString();\n\t\tstorage.set(lastSessionDateStorageKey, typeof lastSessionDate === 'undefined' ? null : lastSessionDate);\n\t\tstorage.set(currentSessionDateStorageKey, currentSessionDate);\n\t}\n}\n\nexport class WorkspaceStorageMain extends BaseStorageMain {\n\n\tprivate static readonly WORKSPACE_STORAGE_NAME = 'state.vscdb';\n\tprivate static readonly WORKSPACE_META_NAME = 'workspace.json';\n\n\tget path(): string | undefined {\n\t\tif (!this.options.useInMemoryStorage) {\n\t\t\treturn join(this.environmentService.workspaceStorageHome.with({ scheme: Schemas.file }).fsPath, this.workspace.id, WorkspaceStorageMain.WORKSPACE_STORAGE_NAME);\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tconstructor(\n\t\tprivate workspace: IAnyWorkspaceIdentifier,\n\t\tprivate readonly options: IStorageMainOptions,\n\t\tlogService: ILogService,\n\t\tprivate readonly environmentService: IEnvironmentService,\n\t\tfileService: IFileService\n\t) {\n\t\tsuper(logService, fileService);\n\t}\n\n\tprotected async doCreate(): Promise<Storage> {\n\t\tconst { storageFilePath, wasCreated } = await this.prepareWorkspaceStorageFolder();\n\n\t\treturn new Storage(new SQLiteStorageDatabase(storageFilePath, {\n\t\t\tlogging: this.createLoggingOptions()\n\t\t}), { hint: this.options.useInMemoryStorage ? StorageHint.STORAGE_IN_MEMORY : wasCreated ? StorageHint.STORAGE_DOES_NOT_EXIST : undefined });\n\t}\n\n\tprivate async prepareWorkspaceStorageFolder(): Promise<{ storageFilePath: string; wasCreated: boolean }> {\n\n\t\t// Return early if using inMemory storage\n\t\tif (this.options.useInMemoryStorage) {\n\t\t\treturn { storageFilePath: SQLiteStorageDatabase.IN_MEMORY_PATH, wasCreated: true };\n\t\t}\n\n\t\t// Otherwise, ensure the storage folder exists on disk\n\t\tconst workspaceStorageFolderPath = join(this.environmentService.workspaceStorageHome.with({ scheme: Schemas.file }).fsPath, this.workspace.id);\n\t\tconst workspaceStorageDatabasePath = join(workspaceStorageFolderPath, WorkspaceStorageMain.WORKSPACE_STORAGE_NAME);\n\n\t\tconst storageExists = await Promises.exists(workspaceStorageFolderPath);\n\t\tif (storageExists) {\n\t\t\treturn { storageFilePath: workspaceStorageDatabasePath, wasCreated: false };\n\t\t}\n\n\t\t// Ensure storage folder exists\n\t\tawait Promises.mkdir(workspaceStorageFolderPath, { recursive: true });\n\n\t\t// Write metadata into folder (but do not await)\n\t\tthis.ensureWorkspaceStorageFolderMeta(workspaceStorageFolderPath);\n\n\t\treturn { storageFilePath: workspaceStorageDatabasePath, wasCreated: true };\n\t}\n\n\tprivate async ensureWorkspaceStorageFolderMeta(workspaceStorageFolderPath: string): Promise<void> {\n\t\tlet meta: object | undefined = undefined;\n\t\tif (isSingleFolderWorkspaceIdentifier(this.workspace)) {\n\t\t\tmeta = { folder: this.workspace.uri.toString() };\n\t\t} else if (isWorkspaceIdentifier(this.workspace)) {\n\t\t\tmeta = { workspace: this.workspace.configPath.toString() };\n\t\t}\n\n\t\tif (meta) {\n\t\t\ttry {\n\t\t\t\tconst workspaceStorageMetaPath = join(workspaceStorageFolderPath, WorkspaceStorageMain.WORKSPACE_META_NAME);\n\t\t\t\tconst storageExists = await Promises.exists(workspaceStorageMetaPath);\n\t\t\t\tif (!storageExists) {\n\t\t\t\t\tawait Promises.writeFile(workspaceStorageMetaPath, JSON.stringify(meta, undefined, 2));\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tthis.logService.error(`[storage main] ensureWorkspaceStorageFolderMeta(): Unable to create workspace storage metadata due to ${error}`);\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport class InMemoryStorageMain extends BaseStorageMain {\n\n\tget path(): string | undefined {\n\t\treturn undefined; // in-memory has no path\n\t}\n\n\tprotected async doCreate(): Promise<Storage> {\n\t\treturn new Storage(new InMemoryStorageDatabase(), { hint: StorageHint.STORAGE_IN_MEMORY });\n\t}\n}\n"]}