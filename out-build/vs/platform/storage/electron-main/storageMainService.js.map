{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/storage/electron-main/storageMainService.ts"],"names":[],"mappings":"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","file":"storageMainService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { URI } from 'vs/base/common/uri';\nimport { once } from 'vs/base/common/functional';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { IStorage } from 'vs/base/parts/storage/common/storage';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IFileService } from 'vs/platform/files/common/files';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { ILifecycleMainService, LifecycleMainPhase, ShutdownReason } from 'vs/platform/lifecycle/electron-main/lifecycleMainService';\nimport { ILogService } from 'vs/platform/log/common/log';\nimport { AbstractStorageService, isProfileUsingDefaultStorage, IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { ApplicationStorageMain, ProfileStorageMain, InMemoryStorageMain, IStorageMain, IStorageMainOptions, WorkspaceStorageMain, IStorageChangeEvent } from 'vs/platform/storage/electron-main/storageMain';\nimport { IUserDataProfile, IUserDataProfilesService } from 'vs/platform/userDataProfile/common/userDataProfile';\nimport { IUserDataProfilesMainService } from 'vs/platform/userDataProfile/electron-main/userDataProfile';\nimport { IAnyWorkspaceIdentifier } from 'vs/platform/workspace/common/workspace';\nimport { IUriIdentityService } from 'vs/platform/uriIdentity/common/uriIdentity';\nimport { Schemas } from 'vs/base/common/network';\n\n//#region Storage Main Service (intent: make application, profile and workspace storage accessible to windows from main process)\n\nexport const IStorageMainService = createDecorator<IStorageMainService>('storageMainService');\n\nexport interface IProfileStorageChangeEvent extends IStorageChangeEvent {\n\treadonly storage: IStorageMain;\n\treadonly profile: IUserDataProfile;\n}\n\nexport interface IStorageMainService {\n\n\treadonly _serviceBrand: undefined;\n\n\t/**\n\t * Provides access to the application storage shared across all\n\t * windows and all profiles.\n\t *\n\t * Note: DO NOT use this for reading/writing from the main process!\n\t *       Rather use `IApplicationStorageMainService` for that purpose.\n\t */\n\treadonly applicationStorage: IStorageMain;\n\n\t/**\n\t * Emitted whenever data is updated or deleted in profile scoped storage.\n\t */\n\treadonly onDidChangeProfileStorage: Event<IProfileStorageChangeEvent>;\n\n\t/**\n\t * Provides access to the profile storage shared across all windows\n\t * for the provided profile.\n\t *\n\t * Note: DO NOT use this for reading/writing from the main process!\n\t *       This is currently not supported.\n\t */\n\tprofileStorage(profile: IUserDataProfile): IStorageMain;\n\n\t/**\n\t * Provides access to the workspace storage specific to a single window.\n\t *\n\t * Note: DO NOT use this for reading/writing from the main process!\n\t *       This is currently not supported.\n\t */\n\tworkspaceStorage(workspace: IAnyWorkspaceIdentifier): IStorageMain;\n\n\t/**\n\t * Checks if the provided path is currently in use for a storage database.\n\t *\n\t * @param path the path to the storage file or parent folder\n\t */\n\tisUsed(path: string): boolean;\n}\n\nexport class StorageMainService extends Disposable implements IStorageMainService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tprivate shutdownReason: ShutdownReason | undefined = undefined;\n\n\tprivate readonly _onDidChangeProfileStorage = this._register(new Emitter<IProfileStorageChangeEvent>());\n\treadonly onDidChangeProfileStorage = this._onDidChangeProfileStorage.event;\n\n\tconstructor(\n\t\t@ILogService private readonly logService: ILogService,\n\t\t@IEnvironmentService private readonly environmentService: IEnvironmentService,\n\t\t@IUserDataProfilesMainService private readonly userDataProfilesService: IUserDataProfilesMainService,\n\t\t@ILifecycleMainService private readonly lifecycleMainService: ILifecycleMainService,\n\t\t@IFileService private readonly fileService: IFileService,\n\t\t@IUriIdentityService private readonly uriIdentityService: IUriIdentityService\n\t) {\n\t\tsuper();\n\n\t\tthis.registerListeners();\n\t}\n\n\tprotected getStorageOptions(): IStorageMainOptions {\n\t\treturn {\n\t\t\tuseInMemoryStorage: !!this.environmentService.extensionTestsLocationURI // no storage during extension tests!\n\t\t};\n\t}\n\n\tprivate registerListeners(): void {\n\n\t\t// Application Storage: Warmup when any window opens\n\t\t(async () => {\n\t\t\tawait this.lifecycleMainService.when(LifecycleMainPhase.AfterWindowOpen);\n\n\t\t\tthis.applicationStorage.init();\n\t\t})();\n\n\t\tthis._register(this.lifecycleMainService.onWillLoadWindow(e => {\n\n\t\t\t// Profile Storage: Warmup when related window with profile loads\n\t\t\tif (e.window.profile) {\n\t\t\t\tthis.profileStorage(e.window.profile).init();\n\t\t\t}\n\n\t\t\t// Workspace Storage: Warmup when related window with workspace loads\n\t\t\tif (e.workspace) {\n\t\t\t\tthis.workspaceStorage(e.workspace).init();\n\t\t\t}\n\t\t}));\n\n\t\t// All Storage: Close when shutting down\n\t\tthis._register(this.lifecycleMainService.onWillShutdown(e => {\n\t\t\tthis.logService.trace('storageMainService#onWillShutdown()');\n\n\t\t\t// Remember shutdown reason\n\t\t\tthis.shutdownReason = e.reason;\n\n\t\t\t// Application Storage\n\t\t\te.join('applicationStorage', this.applicationStorage.close());\n\n\t\t\t// Profile Storage(s)\n\t\t\tfor (const [, profileStorage] of this.mapProfileToStorage) {\n\t\t\t\te.join('profileStorage', profileStorage.close());\n\t\t\t}\n\n\t\t\t// Workspace Storage(s)\n\t\t\tfor (const [, workspaceStorage] of this.mapWorkspaceToStorage) {\n\t\t\t\te.join('workspaceStorage', workspaceStorage.close());\n\t\t\t}\n\t\t}));\n\n\t\t// Prepare storage location as needed\n\t\tthis._register(this.userDataProfilesService.onWillCreateProfile(e => {\n\t\t\te.join((async () => {\n\t\t\t\tif (!(await this.fileService.exists(e.profile.globalStorageHome))) {\n\t\t\t\t\tawait this.fileService.createFolder(e.profile.globalStorageHome);\n\t\t\t\t}\n\t\t\t})());\n\t\t}));\n\n\t\t// Close the storage of the profile that is being removed\n\t\tthis._register(this.userDataProfilesService.onWillRemoveProfile(e => {\n\t\t\tconst storage = this.mapProfileToStorage.get(e.profile.id);\n\t\t\tif (storage) {\n\t\t\t\te.join(storage.close());\n\t\t\t}\n\t\t}));\n\t}\n\n\t//#region Application Storage\n\n\treadonly applicationStorage = this._register(this.createApplicationStorage());\n\n\tprivate createApplicationStorage(): IStorageMain {\n\t\tthis.logService.trace(`StorageMainService: creating application storage`);\n\n\t\tconst applicationStorage = new ApplicationStorageMain(this.getStorageOptions(), this.userDataProfilesService, this.logService, this.fileService);\n\n\t\tthis._register(once(applicationStorage.onDidCloseStorage)(() => {\n\t\t\tthis.logService.trace(`StorageMainService: closed application storage`);\n\t\t}));\n\n\t\treturn applicationStorage;\n\t}\n\n\t//#endregion\n\n\t//#region Profile Storage\n\n\tprivate readonly mapProfileToStorage = new Map<string /* profile ID */, IStorageMain>();\n\n\tprofileStorage(profile: IUserDataProfile): IStorageMain {\n\t\tif (isProfileUsingDefaultStorage(profile)) {\n\t\t\treturn this.applicationStorage; // for profiles using default storage, use application storage\n\t\t}\n\n\t\tlet profileStorage = this.mapProfileToStorage.get(profile.id);\n\t\tif (!profileStorage) {\n\t\t\tthis.logService.trace(`StorageMainService: creating profile storage (${profile.name})`);\n\n\t\t\tprofileStorage = this._register(this.createProfileStorage(profile));\n\t\t\tthis.mapProfileToStorage.set(profile.id, profileStorage);\n\n\t\t\tconst listener = this._register(profileStorage.onDidChangeStorage(e => this._onDidChangeProfileStorage.fire({\n\t\t\t\t...e,\n\t\t\t\tstorage: profileStorage!,\n\t\t\t\tprofile\n\t\t\t})));\n\n\t\t\tthis._register(once(profileStorage.onDidCloseStorage)(() => {\n\t\t\t\tthis.logService.trace(`StorageMainService: closed profile storage (${profile.name})`);\n\n\t\t\t\tthis.mapProfileToStorage.delete(profile.id);\n\t\t\t\tlistener.dispose();\n\t\t\t}));\n\t\t}\n\n\t\treturn profileStorage;\n\t}\n\n\tprivate createProfileStorage(profile: IUserDataProfile): IStorageMain {\n\t\tif (this.shutdownReason === ShutdownReason.KILL) {\n\n\t\t\t// Workaround for native crashes that we see when\n\t\t\t// SQLite DBs are being created even after shutdown\n\t\t\t// https://github.com/microsoft/vscode/issues/143186\n\n\t\t\treturn new InMemoryStorageMain(this.logService, this.fileService);\n\t\t}\n\n\t\treturn new ProfileStorageMain(profile, this.getStorageOptions(), this.logService, this.fileService);\n\t}\n\n\t//#endregion\n\n\n\t//#region Workspace Storage\n\n\tprivate readonly mapWorkspaceToStorage = new Map<string /* workspace ID */, IStorageMain>();\n\n\tworkspaceStorage(workspace: IAnyWorkspaceIdentifier): IStorageMain {\n\t\tlet workspaceStorage = this.mapWorkspaceToStorage.get(workspace.id);\n\t\tif (!workspaceStorage) {\n\t\t\tthis.logService.trace(`StorageMainService: creating workspace storage (${workspace.id})`);\n\n\t\t\tworkspaceStorage = this._register(this.createWorkspaceStorage(workspace));\n\t\t\tthis.mapWorkspaceToStorage.set(workspace.id, workspaceStorage);\n\n\t\t\tthis._register(once(workspaceStorage.onDidCloseStorage)(() => {\n\t\t\t\tthis.logService.trace(`StorageMainService: closed workspace storage (${workspace.id})`);\n\n\t\t\t\tthis.mapWorkspaceToStorage.delete(workspace.id);\n\t\t\t}));\n\t\t}\n\n\t\treturn workspaceStorage;\n\t}\n\n\tprivate createWorkspaceStorage(workspace: IAnyWorkspaceIdentifier): IStorageMain {\n\t\tif (this.shutdownReason === ShutdownReason.KILL) {\n\n\t\t\t// Workaround for native crashes that we see when\n\t\t\t// SQLite DBs are being created even after shutdown\n\t\t\t// https://github.com/microsoft/vscode/issues/143186\n\n\t\t\treturn new InMemoryStorageMain(this.logService, this.fileService);\n\t\t}\n\n\t\treturn new WorkspaceStorageMain(workspace, this.getStorageOptions(), this.logService, this.environmentService, this.fileService);\n\t}\n\n\t//#endregion\n\n\tisUsed(path: string): boolean {\n\t\tconst pathUri = URI.file(path);\n\n\t\tfor (const storage of [this.applicationStorage, ...this.mapProfileToStorage.values(), ...this.mapWorkspaceToStorage.values()]) {\n\t\t\tif (!storage.path) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (this.uriIdentityService.extUri.isEqualOrParent(URI.file(storage.path), pathUri)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n}\n\n//#endregion\n\n\n//#region Application Main Storage Service (intent: use application storage from main process)\n\nexport const IApplicationStorageMainService = createDecorator<IStorageMainService>('applicationStorageMainService');\n\n/**\n * A specialized `IStorageService` interface that only allows\n * access to the `StorageScope.APPLICATION` scope.\n */\nexport interface IApplicationStorageMainService extends IStorageService {\n\n\t/**\n\t * Important: unlike other storage services in the renderer, the\n\t * main process does not await the storage to be ready, rather\n\t * storage is being initialized while a window opens to reduce\n\t * pressure on startup.\n\t *\n\t * As such, any client wanting to access application storage from the\n\t * main process needs to wait for `whenReady`, otherwise there is\n\t * a chance that the service operates on an in-memory store that\n\t * is not backed by any persistent DB.\n\t */\n\treadonly whenReady: Promise<void>;\n\n\tget(key: string, scope: StorageScope.APPLICATION, fallbackValue: string): string;\n\tget(key: string, scope: StorageScope.APPLICATION, fallbackValue?: string): string | undefined;\n\n\tgetBoolean(key: string, scope: StorageScope.APPLICATION, fallbackValue: boolean): boolean;\n\tgetBoolean(key: string, scope: StorageScope.APPLICATION, fallbackValue?: boolean): boolean | undefined;\n\n\tgetNumber(key: string, scope: StorageScope.APPLICATION, fallbackValue: number): number;\n\tgetNumber(key: string, scope: StorageScope.APPLICATION, fallbackValue?: number): number | undefined;\n\n\tstore(key: string, value: string | boolean | number | undefined | null, scope: StorageScope.APPLICATION, target: StorageTarget): void;\n\n\tremove(key: string, scope: StorageScope.APPLICATION): void;\n\n\tkeys(scope: StorageScope.APPLICATION, target: StorageTarget): string[];\n\n\tswitch(): never;\n\n\tisNew(scope: StorageScope.APPLICATION): boolean;\n}\n\nexport class ApplicationStorageMainService extends AbstractStorageService implements IApplicationStorageMainService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\treadonly whenReady = this.storageMainService.applicationStorage.whenInit;\n\n\tconstructor(\n\t\t@IUserDataProfilesService private readonly userDataProfilesService: IUserDataProfilesService,\n\t\t@IStorageMainService private readonly storageMainService: IStorageMainService\n\t) {\n\t\tsuper();\n\t}\n\n\tprotected doInitialize(): Promise<void> {\n\n\t\t// application storage is being initialized as part\n\t\t// of the first window opening, so we do not trigger\n\t\t// it here but can join it\n\t\treturn this.storageMainService.applicationStorage.whenInit;\n\t}\n\n\tprotected getStorage(scope: StorageScope): IStorage | undefined {\n\t\tif (scope === StorageScope.APPLICATION) {\n\t\t\treturn this.storageMainService.applicationStorage.storage;\n\t\t}\n\n\t\treturn undefined; // any other scope is unsupported from main process\n\t}\n\n\tprotected getLogDetails(scope: StorageScope): string | undefined {\n\t\tif (scope === StorageScope.APPLICATION) {\n\t\t\treturn this.userDataProfilesService.defaultProfile.globalStorageHome.with({ scheme: Schemas.file }).fsPath;\n\t\t}\n\n\t\treturn undefined; // any other scope is unsupported from main process\n\t}\n\n\tprotected override shouldFlushWhenIdle(): boolean {\n\t\treturn false; // not needed here, will be triggered from any window that is opened\n\t}\n\n\toverride switch(): never {\n\t\tthrow new Error('Migrating storage is unsupported from main process');\n\t}\n\n\tprotected switchToProfile(): never {\n\t\tthrow new Error('Switching storage profile is unsupported from main process');\n\t}\n\n\tprotected switchToWorkspace(): never {\n\t\tthrow new Error('Switching storage workspace is unsupported from main process');\n\t}\n\n\thasScope(): never {\n\t\tthrow new Error('Main process is never profile or workspace scoped');\n\t}\n}\n"]}