{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/download/common/downloadIpc.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAQhG,MAAa,GAAG;QAEf,YAA6B,CAAY;YAAZ,MAAC,GAAD,CAAC,CAAW;QAAiB,CAAC;QAE3D,MAAM,CAAC,CAAU,EAAE,KAAa,EAAE,GAAS;YAC1C,MAAM,IAAI,KAAK,CAAC,gBAAgB,CAAC,CAAC;QACnC,CAAC;QAED,IAAI,CAAC,OAAY,EAAE,OAAe,EAAE,IAAU;YAC7C,QAAQ,OAAO,EAAE;gBAChB,KAAK,UAAU,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,CAAO,QAAQ,CAAC,SAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,SAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACxF;YACD,MAAM,IAAI,KAAK,CAAC,cAAc,CAAC,CAAC;QACjC,CAAC;KACD;IAdD,kBAcC;IAED,MAAa,GAAG;QAIf,YAAoB,CAAiB,EAAU,CAA+C;YAA1E,MAAC,GAAD,CAAC,CAAgB;YAAU,MAAC,GAAD,CAAC,CAA8C;QAAI,CAAC;QAEnG,KAAK,CAAC,QAAQ,CAAC,IAAS,EAAE,EAAO;YAChC,MAAM,aAAa,GAAG,IAAI,CAAC,CAAC,EAAkB,CAAC;YAC/C,IAAI,aAAa,EAAE;gBAClB,IAAI,GAAG,aAAa,CAAC,oBAAoB,CAAC,IAAI,CAAC,CAAC;gBAChD,EAAE,GAAG,aAAa,CAAC,oBAAoB,CAAC,EAAE,CAAC,CAAC;aAC5C;YACD,MAAM,IAAI,CAAC,CAAC,CAAO,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;QACjD,CAAC;KACD;IAdD,kBAcC","file":"downloadIpc.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Event } from 'vs/base/common/event';\nimport { URI } from 'vs/base/common/uri';\nimport { IURITransformer } from 'vs/base/common/uriIpc';\nimport { IChannel, IServerChannel } from 'vs/base/parts/ipc/common/ipc';\nimport { IDownloadService } from 'vs/platform/download/common/download';\n\nexport class DownloadServiceChannel implements IServerChannel {\n\n\tconstructor(private readonly service: IDownloadService) { }\n\n\tlisten(_: unknown, event: string, arg?: any): Event<any> {\n\t\tthrow new Error('Invalid listen');\n\t}\n\n\tcall(context: any, command: string, args?: any): Promise<any> {\n\t\tswitch (command) {\n\t\t\tcase 'download': return this.service.download(URI.revive(args[0]), URI.revive(args[1]));\n\t\t}\n\t\tthrow new Error('Invalid call');\n\t}\n}\n\nexport class DownloadServiceChannelClient implements IDownloadService {\n\n\tdeclare readonly _serviceBrand: undefined;\n\n\tconstructor(private channel: IChannel, private getUriTransformer: () => IURITransformer | null) { }\n\n\tasync download(from: URI, to: URI): Promise<void> {\n\t\tconst uriTransfomer = this.getUriTransformer();\n\t\tif (uriTransfomer) {\n\t\t\tfrom = uriTransfomer.transformOutgoingURI(from);\n\t\t\tto = uriTransfomer.transformOutgoingURI(to);\n\t\t}\n\t\tawait this.channel.call('download', [from, to]);\n\t}\n}\n"]}