{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/assignment/common/assignmentService.ts"],"names":[],"mappings":"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","file":"assignmentService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport type { IExperimentationTelemetry, ExperimentationService as TASClient, IKeyValueStorage } from 'tas-client-umd';\nimport { TelemetryLevel } from 'vs/platform/telemetry/common/telemetry';\nimport { IConfigurationService } from 'vs/platform/configuration/common/configuration';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { getTelemetryLevel } from 'vs/platform/telemetry/common/telemetryUtils';\nimport { AssignmentFilterProvider, ASSIGNMENT_REFETCH_INTERVAL, ASSIGNMENT_STORAGE_KEY, IAssignmentService, TargetPopulation } from 'vs/platform/assignment/common/assignment';\nimport { importAMDNodeModule } from 'vs/amdX';\n\nexport abstract class BaseAssignmentService implements IAssignmentService {\n\t_serviceBrand: undefined;\n\tprotected tasClient: Promise<TASClient> | undefined;\n\tprivate networkInitialized = false;\n\tprivate overrideInitDelay: Promise<void>;\n\n\tprotected get experimentsEnabled(): boolean {\n\t\treturn true;\n\t}\n\n\tconstructor(\n\t\tprivate readonly machineId: string,\n\t\tprotected readonly configurationService: IConfigurationService,\n\t\tprotected readonly productService: IProductService,\n\t\tprotected telemetry: IExperimentationTelemetry,\n\t\tprivate keyValueStorage?: IKeyValueStorage\n\t) {\n\n\t\tif (productService.tasConfig && this.experimentsEnabled && getTelemetryLevel(this.configurationService) === TelemetryLevel.USAGE) {\n\t\t\tthis.tasClient = this.setupTASClient();\n\t\t}\n\n\t\t// For development purposes, configure the delay until tas local tas treatment ovverrides are available\n\t\tconst overrideDelaySetting = this.configurationService.getValue('experiments.overrideDelay');\n\t\tconst overrideDelay = typeof overrideDelaySetting === 'number' ? overrideDelaySetting : 0;\n\t\tthis.overrideInitDelay = new Promise(resolve => setTimeout(resolve, overrideDelay));\n\t}\n\n\tasync getTreatment<T extends string | number | boolean>(name: string): Promise<T | undefined> {\n\t\t// For development purposes, allow overriding tas assignments to test variants locally.\n\t\tawait this.overrideInitDelay;\n\t\tconst override = this.configurationService.getValue<T>('experiments.override.' + name);\n\t\tif (override !== undefined) {\n\t\t\treturn override;\n\t\t}\n\n\t\tif (!this.tasClient) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tif (!this.experimentsEnabled) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tlet result: T | undefined;\n\t\tconst client = await this.tasClient;\n\n\t\t// The TAS client is initialized but we need to check if the initial fetch has completed yet\n\t\t// If it is complete, return a cached value for the treatment\n\t\t// If not, use the async call with `checkCache: true`. This will allow the module to return a cached value if it is present.\n\t\t// Otherwise it will await the initial fetch to return the most up to date value.\n\t\tif (this.networkInitialized) {\n\t\t\tresult = client.getTreatmentVariable<T>('vscode', name);\n\t\t} else {\n\t\t\tresult = await client.getTreatmentVariableAsync<T>('vscode', name, true);\n\t\t}\n\n\t\tresult = client.getTreatmentVariable<T>('vscode', name);\n\t\treturn result;\n\t}\n\n\tprivate async setupTASClient(): Promise<TASClient> {\n\n\t\tconst targetPopulation = this.productService.quality === 'stable' ?\n\t\t\tTargetPopulation.Public : (this.productService.quality === 'exploration' ?\n\t\t\t\tTargetPopulation.Exploration : TargetPopulation.Insiders);\n\n\t\tconst filterProvider = new AssignmentFilterProvider(\n\t\t\tthis.productService.version,\n\t\t\tthis.productService.nameLong,\n\t\t\tthis.machineId,\n\t\t\ttargetPopulation\n\t\t);\n\n\t\tconst tasConfig = this.productService.tasConfig!;\n\t\tconst tasClient = new (await importAMDNodeModule<typeof import('tas-client-umd')>('tas-client-umd', 'lib/tas-client-umd.js')).ExperimentationService({\n\t\t\tfilterProviders: [filterProvider],\n\t\t\ttelemetry: this.telemetry,\n\t\t\tstorageKey: ASSIGNMENT_STORAGE_KEY,\n\t\t\tkeyValueStorage: this.keyValueStorage,\n\t\t\tassignmentContextTelemetryPropertyName: tasConfig.assignmentContextTelemetryPropertyName,\n\t\t\ttelemetryEventName: tasConfig.telemetryEventName,\n\t\t\tendpoint: tasConfig.endpoint,\n\t\t\trefetchInterval: ASSIGNMENT_REFETCH_INTERVAL,\n\t\t});\n\n\t\tawait tasClient.initializePromise;\n\t\ttasClient.initialFetch.then(() => this.networkInitialized = true);\n\n\t\treturn tasClient;\n\t}\n}\n"]}