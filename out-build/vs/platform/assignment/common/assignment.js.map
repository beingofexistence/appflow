{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/assignment/common/assignment.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;IAKnF,QAAA,IAAI,GAAqB,0BAA0B,CAAC;IACpD,QAAA,IAAI,GAA0B,CAAC,CAAC,CAAC,aAAa;IAO3D,IAAY,gBAIX;IAJD,WAAY,gBAAgB;QAC3B,wCAAoB,CAAA;QACpB,qCAAiB,CAAA;QACjB,+CAA2B,CAAA;IAC5B,CAAC,EAJW,gBAAgB,gCAAhB,gBAAgB,QAI3B;IAED;;;;;;;;;;;;;MAaE;IACF,IAAY,OA8CX;IA9CD,WAAY,OAAO;QAClB;;WAEG;QACH,qCAA0B,CAAA;QAE1B;;WAEG;QACH,mCAAwB,CAAA;QAExB;;WAEG;QACH,qDAA0C,CAAA;QAE1C;;WAEG;QACH,mCAAwB,CAAA;QAExB;;WAEG;QACH,yCAA8B,CAAA;QAE9B;;WAEG;QACH,mDAAwC,CAAA;QAExC;;WAEG;QACH,yDAA8C,CAAA;QAE9C;;WAEG;QACH,yCAA8B,CAAA;QAE9B;;;WAGG;QACH,yDAA8C,CAAA;IAC/C,CAAC,EA9CW,OAAO,uBAAP,OAAO,QA8ClB;IAED,MAAa,IAAI;QAChB,YACS,CAAe,EACf,CAAe,EACf,CAAiB,EACjB,CAAkC;YAHlC,MAAC,GAAD,CAAC,CAAc;YACf,MAAC,GAAD,CAAC,CAAc;YACf,MAAC,GAAD,CAAC,CAAgB;YACjB,MAAC,GAAD,CAAC,CAAiC;QACvC,CAAC;QAEL,cAAc,CAAC,MAAc;YAC5B,QAAQ,MAAM,EAAE;gBACf,KAAK,OAAO,CAAC,kBAAkB;oBAC9B,OAAO,IAAI,CAAC,CAAC,CAAO,CAAC,yBAAyB;gBAC/C,KAAK,OAAO,CAAC,KAAK;oBACjB,OAAO,IAAI,CAAC,CAAC,CAAO,CAAC,0BAA0B;gBAChD,KAAK,OAAO,CAAC,QAAQ;oBACpB,OAAO,IAAI,CAAC,CAAC,CAAS;gBACvB,KAAK,OAAO,CAAC,QAAQ;oBACpB,OAAO,QAAQ,CAAC,EAAE,CAAO;gBAC1B,KAAK,OAAO,CAAC,aAAa;oBACzB,OAAO,aAAa,CAAC,CAAC,4CAA4C;gBACnE,KAAK,OAAO,CAAC,gBAAgB;oBAC5B,OAAO,UAAU,CAAC,CAAC,wEAAwE;gBAC5F,KAAK,OAAO,CAAC,gBAAgB;oBAC5B,OAAO,IAAI,CAAC,CAAC,CAAgB;gBAC9B;oBACC,OAAO,EAAE,CAAC;aACX;QACF,CAAC;QAED,UAAU;YACT,MAAM,OAAO,GAAqB,IAAI,GAAG,EAAe,CAAC;YACzD,MAAM,YAAY,GAAG,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YAC5C,KAAK,MAAM,KAAK,IAAI,YAAY,EAAE;gBACjC,OAAO,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;aAC/C;YAED,OAAO,OAAO,CAAC;QAChB,CAAC;KACD;IAtCD,oBAsCC","file":"assignment.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as platform from 'vs/base/common/platform';\nimport type { IExperimentationFilterProvider } from 'tas-client-umd';\n\nexport const ASSIGNMENT_STORAGE_KEY = 'VSCode.ABExp.FeatureData';\nexport const ASSIGNMENT_REFETCH_INTERVAL = 0; // no polling\n\nexport interface IAssignmentService {\n\treadonly _serviceBrand: undefined;\n\tgetTreatment<T extends string | number | boolean>(name: string): Promise<T | undefined>;\n}\n\nexport enum TargetPopulation {\n\tInsiders = 'insider',\n\tPublic = 'public',\n\tExploration = 'exploration'\n}\n\n/*\nBased upon the official VSCode currently existing filters in the\nExP backend for the VSCode cluster.\nhttps://experimentation.visualstudio.com/Analysis%20and%20Experimentation/_git/AnE.ExP.TAS.TachyonHost.Configuration?path=%2FConfigurations%2Fvscode%2Fvscode.json&version=GBmaster\n\"X-MSEdge-Market\": \"detection.market\",\n\"X-FD-Corpnet\": \"detection.corpnet\",\n\"X-VSCode-AppVersion\": \"appversion\",\n\"X-VSCode-Build\": \"build\",\n\"X-MSEdge-ClientId\": \"clientid\",\n\"X-VSCode-ExtensionName\": \"extensionname\",\n\"X-VSCode-ExtensionVersion\": \"extensionversion\",\n\"X-VSCode-TargetPopulation\": \"targetpopulation\",\n\"X-VSCode-Language\": \"language\"\n*/\nexport enum Filters {\n\t/**\n\t * The market in which the extension is distributed.\n\t */\n\tMarket = 'X-MSEdge-Market',\n\n\t/**\n\t * The corporation network.\n\t */\n\tCorpNet = 'X-FD-Corpnet',\n\n\t/**\n\t * Version of the application which uses experimentation service.\n\t */\n\tApplicationVersion = 'X-VSCode-AppVersion',\n\n\t/**\n\t * Insiders vs Stable.\n\t */\n\tBuild = 'X-VSCode-Build',\n\n\t/**\n\t * Client Id which is used as primary unit for the experimentation.\n\t */\n\tClientId = 'X-MSEdge-ClientId',\n\n\t/**\n\t * Extension header.\n\t */\n\tExtensionName = 'X-VSCode-ExtensionName',\n\n\t/**\n\t * The version of the extension.\n\t */\n\tExtensionVersion = 'X-VSCode-ExtensionVersion',\n\n\t/**\n\t * The language in use by VS Code\n\t */\n\tLanguage = 'X-VSCode-Language',\n\n\t/**\n\t * The target population.\n\t * This is used to separate internal, early preview, GA, etc.\n\t */\n\tTargetPopulation = 'X-VSCode-TargetPopulation',\n}\n\nexport class AssignmentFilterProvider implements IExperimentationFilterProvider {\n\tconstructor(\n\t\tprivate version: string,\n\t\tprivate appName: string,\n\t\tprivate machineId: string,\n\t\tprivate targetPopulation: TargetPopulation\n\t) { }\n\n\tgetFilterValue(filter: string): string | null {\n\t\tswitch (filter) {\n\t\t\tcase Filters.ApplicationVersion:\n\t\t\t\treturn this.version; // productService.version\n\t\t\tcase Filters.Build:\n\t\t\t\treturn this.appName; // productService.nameLong\n\t\t\tcase Filters.ClientId:\n\t\t\t\treturn this.machineId;\n\t\t\tcase Filters.Language:\n\t\t\t\treturn platform.language;\n\t\t\tcase Filters.ExtensionName:\n\t\t\t\treturn 'vscode-core'; // always return vscode-core for exp service\n\t\t\tcase Filters.ExtensionVersion:\n\t\t\t\treturn '999999.0'; // always return a very large number for cross-extension experimentation\n\t\t\tcase Filters.TargetPopulation:\n\t\t\t\treturn this.targetPopulation;\n\t\t\tdefault:\n\t\t\t\treturn '';\n\t\t}\n\t}\n\n\tgetFilters(): Map<string, any> {\n\t\tconst filters: Map<string, any> = new Map<string, any>();\n\t\tconst filterValues = Object.values(Filters);\n\t\tfor (const value of filterValues) {\n\t\t\tfilters.set(value, this.getFilterValue(value));\n\t\t}\n\n\t\treturn filters;\n\t}\n}\n"]}