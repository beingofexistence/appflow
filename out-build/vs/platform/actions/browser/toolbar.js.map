{"version":3,"sources":["vs/platform/actions/browser/toolbar.ts"],"names":[],"mappings":"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","file":"toolbar.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { addDisposableListener } from 'vs/base/browser/dom';\nimport { StandardMouseEvent } from 'vs/base/browser/mouseEvent';\nimport { IToolBarOptions, ToolBar } from 'vs/base/browser/ui/toolbar/toolbar';\nimport { IAction, Separator, SubmenuAction, toAction, WorkbenchActionExecutedClassification, WorkbenchActionExecutedEvent } from 'vs/base/common/actions';\nimport { coalesceInPlace } from 'vs/base/common/arrays';\nimport { BugIndicatingError } from 'vs/base/common/errors';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { DisposableStore } from 'vs/base/common/lifecycle';\nimport { localize } from 'vs/nls';\nimport { createAndFillInActionBarActions } from 'vs/platform/actions/browser/menuEntryActionViewItem';\nimport { IMenuActionOptions, IMenuService, MenuId, MenuItemAction, SubmenuItemAction } from 'vs/platform/actions/common/actions';\nimport { IContextKeyService } from 'vs/platform/contextkey/common/contextkey';\nimport { IContextMenuService } from 'vs/platform/contextview/browser/contextView';\nimport { IKeybindingService } from 'vs/platform/keybinding/common/keybinding';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\n\nexport const enum HiddenItemStrategy {\n\t/** This toolbar doesn't support hiding*/\n\tNoHide = -1,\n\t/** Hidden items aren't shown anywhere */\n\tIgnore = 0,\n\t/** Hidden items move into the secondary group */\n\tRenderInSecondaryGroup = 1,\n}\n\nexport type IWorkbenchToolBarOptions = IToolBarOptions & {\n\n\t/**\n\t * Items of the primary group can be hidden. When this happens the item can\n\t * - move into the secondary popup-menu, or\n\t * - not be shown at all\n\t */\n\thiddenItemStrategy?: HiddenItemStrategy;\n\n\t/**\n\t * Optional menu id which is used for a \"Reset Menu\" command. This should be the\n\t * menu id that defines the contents of this workbench menu\n\t */\n\tresetMenu?: MenuId;\n\n\t/**\n\t * Optional menu id which items are used for the context menu of the toolbar.\n\t */\n\tcontextMenu?: MenuId;\n\n\t/**\n\t * Optional options how menu actions are created and invoked\n\t */\n\tmenuOptions?: IMenuActionOptions;\n\n\t/**\n\t * When set the `workbenchActionExecuted` is automatically send for each invoked action. The `from` property\n\t * of the event will the passed `telemetrySource`-value\n\t */\n\ttelemetrySource?: string;\n\n\t/** This is controlled by the WorkbenchToolBar */\n\tallowContextMenu?: never;\n\n\t/**\n\t * Maximun number of items that can shown. Extra items will be shown in the overflow menu.\n\t */\n\tmaxNumberOfItems?: number;\n};\n\n/**\n * The `WorkbenchToolBar` does\n * - support hiding of menu items\n * - lookup keybindings for each actions automatically\n * - send `workbenchActionExecuted`-events for each action\n *\n * See {@link MenuWorkbenchToolBar} for a toolbar that is backed by a menu.\n */\nexport class WorkbenchToolBar extends ToolBar {\n\n\tprivate readonly _sessionDisposables = this._store.add(new DisposableStore());\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\tprivate _options: IWorkbenchToolBarOptions | undefined,\n\t\t@IMenuService private readonly _menuService: IMenuService,\n\t\t@IContextKeyService private readonly _contextKeyService: IContextKeyService,\n\t\t@IContextMenuService private readonly _contextMenuService: IContextMenuService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t) {\n\t\tsuper(container, _contextMenuService, {\n\t\t\t// defaults\n\t\t\tgetKeyBinding: (action) => keybindingService.lookupKeybinding(action.id) ?? undefined,\n\t\t\t// options (override defaults)\n\t\t\t..._options,\n\t\t\t// mandatory (overide options)\n\t\t\tallowContextMenu: true,\n\t\t\tskipTelemetry: typeof _options?.telemetrySource === 'string',\n\t\t});\n\n\t\t// telemetry logic\n\t\tconst telemetrySource = _options?.telemetrySource;\n\t\tif (telemetrySource) {\n\t\t\tthis._store.add(this.actionBar.onDidRun(e => telemetryService.publicLog2<WorkbenchActionExecutedEvent, WorkbenchActionExecutedClassification>(\n\t\t\t\t'workbenchActionExecuted',\n\t\t\t\t{ id: e.action.id, from: telemetrySource })\n\t\t\t));\n\t\t}\n\t}\n\n\toverride setActions(_primary: readonly IAction[], _secondary: readonly IAction[] = [], menuIds?: readonly MenuId[]): void {\n\n\t\tthis._sessionDisposables.clear();\n\t\tconst primary = _primary.slice();\n\t\tconst secondary = _secondary.slice();\n\t\tconst toggleActions: IAction[] = [];\n\t\tlet toggleActionsCheckedCount: number = 0;\n\n\t\tconst extraSecondary: IAction[] = [];\n\n\t\tlet someAreHidden = false;\n\t\t// unless disabled, move all hidden items to secondary group or ignore them\n\t\tif (this._options?.hiddenItemStrategy !== HiddenItemStrategy.NoHide) {\n\t\t\tfor (let i = 0; i < primary.length; i++) {\n\t\t\t\tconst action = primary[i];\n\t\t\t\tif (!(action instanceof MenuItemAction) && !(action instanceof SubmenuItemAction)) {\n\t\t\t\t\t// console.warn(`Action ${action.id}/${action.label} is not a MenuItemAction`);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (!action.hideActions) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// collect all toggle actions\n\t\t\t\ttoggleActions.push(action.hideActions.toggle);\n\t\t\t\tif (action.hideActions.toggle.checked) {\n\t\t\t\t\ttoggleActionsCheckedCount++;\n\t\t\t\t}\n\n\t\t\t\t// hidden items move into overflow or ignore\n\t\t\t\tif (action.hideActions.isHidden) {\n\t\t\t\t\tsomeAreHidden = true;\n\t\t\t\t\tprimary[i] = undefined!;\n\t\t\t\t\tif (this._options?.hiddenItemStrategy !== HiddenItemStrategy.Ignore) {\n\t\t\t\t\t\textraSecondary[i] = action;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// count for max\n\t\tif (this._options?.maxNumberOfItems !== undefined) {\n\t\t\tlet count = 0;\n\t\t\tfor (let i = 0; i < primary.length; i++) {\n\t\t\t\tconst action = primary[i];\n\t\t\t\tif (!action) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (++count >= this._options.maxNumberOfItems) {\n\t\t\t\t\tprimary[i] = undefined!;\n\t\t\t\t\textraSecondary[i] = action;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcoalesceInPlace(primary);\n\t\tcoalesceInPlace(extraSecondary);\n\t\tsuper.setActions(primary, Separator.join(extraSecondary, secondary));\n\n\t\t// add context menu for toggle actions\n\t\tif (toggleActions.length > 0) {\n\t\t\tthis._sessionDisposables.add(addDisposableListener(this.getElement(), 'contextmenu', e => {\n\t\t\t\tconst event = new StandardMouseEvent(e);\n\n\t\t\t\tconst action = this.getItemAction(event.target);\n\t\t\t\tif (!(action)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tevent.preventDefault();\n\t\t\t\tevent.stopPropagation();\n\n\t\t\t\tlet noHide = false;\n\n\t\t\t\t// last item cannot be hidden when using ignore strategy\n\t\t\t\tif (toggleActionsCheckedCount === 1 && this._options?.hiddenItemStrategy === HiddenItemStrategy.Ignore) {\n\t\t\t\t\tnoHide = true;\n\t\t\t\t\tfor (let i = 0; i < toggleActions.length; i++) {\n\t\t\t\t\t\tif (toggleActions[i].checked) {\n\t\t\t\t\t\t\ttoggleActions[i] = toAction({\n\t\t\t\t\t\t\t\tid: action.id,\n\t\t\t\t\t\t\t\tlabel: action.label,\n\t\t\t\t\t\t\t\tchecked: true,\n\t\t\t\t\t\t\t\tenabled: false,\n\t\t\t\t\t\t\t\trun() { }\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tbreak; // there is only one\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// add \"hide foo\" actions\n\t\t\t\tlet hideAction: IAction;\n\t\t\t\tif (!noHide && (action instanceof MenuItemAction || action instanceof SubmenuItemAction)) {\n\t\t\t\t\tif (!action.hideActions) {\n\t\t\t\t\t\t// no context menu for MenuItemAction instances that support no hiding\n\t\t\t\t\t\t// those are fake actions and need to be cleaned up\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\thideAction = action.hideActions.hide;\n\n\t\t\t\t} else {\n\t\t\t\t\thideAction = toAction({\n\t\t\t\t\t\tid: 'label',\n\t\t\t\t\t\tlabel: localize('hide', \"Hide\"),\n\t\t\t\t\t\tenabled: false,\n\t\t\t\t\t\trun() { }\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst actions = Separator.join([hideAction], toggleActions);\n\n\t\t\t\t// add \"Reset Menu\" action\n\t\t\t\tif (this._options?.resetMenu && !menuIds) {\n\t\t\t\t\tmenuIds = [this._options.resetMenu];\n\t\t\t\t}\n\t\t\t\tif (someAreHidden && menuIds) {\n\t\t\t\t\tactions.push(new Separator());\n\t\t\t\t\tactions.push(toAction({\n\t\t\t\t\t\tid: 'resetThisMenu',\n\t\t\t\t\t\tlabel: localize('resetThisMenu', \"Reset Menu\"),\n\t\t\t\t\t\trun: () => this._menuService.resetHiddenStates(menuIds)\n\t\t\t\t\t}));\n\t\t\t\t}\n\n\t\t\t\tthis._contextMenuService.showContextMenu({\n\t\t\t\t\tgetAnchor: () => event,\n\t\t\t\t\tgetActions: () => actions,\n\t\t\t\t\t// add context menu actions (iff appicable)\n\t\t\t\t\tmenuId: this._options?.contextMenu,\n\t\t\t\t\tmenuActionOptions: { renderShortTitle: true, ...this._options?.menuOptions },\n\t\t\t\t\tskipTelemetry: typeof this._options?.telemetrySource === 'string',\n\t\t\t\t\tcontextKeyService: this._contextKeyService,\n\t\t\t\t});\n\t\t\t}));\n\t\t}\n\t}\n}\n\n// ---- MenuWorkbenchToolBar -------------------------------------------------\n\n\nexport interface IToolBarRenderOptions {\n\t/**\n\t * Determines what groups are considered primary. Defaults to `navigation`. Items of the primary\n\t * group are rendered with buttons and the rest is rendered in the secondary popup-menu.\n\t */\n\tprimaryGroup?: string | ((actionGroup: string) => boolean);\n\n\t/**\n\t * Inlinse submenus with just a single item\n\t */\n\tshouldInlineSubmenu?: (action: SubmenuAction, group: string, groupSize: number) => boolean;\n\n\t/**\n\t * Should the primary group allow for separators.\n\t */\n\tuseSeparatorsInPrimaryActions?: boolean;\n}\n\nexport interface IMenuWorkbenchToolBarOptions extends IWorkbenchToolBarOptions {\n\n\t/**\n\t * Optional options to configure how the toolbar renderes items.\n\t */\n\ttoolbarOptions?: IToolBarRenderOptions;\n\n\t/**\n\t * Only `undefined` to disable the reset command is allowed, otherwise the menus\n\t * id is used.\n\t */\n\tresetMenu?: undefined;\n}\n\n/**\n * A {@link WorkbenchToolBar workbench toolbar} that is purely driven from a {@link MenuId menu}-identifier.\n *\n * *Note* that Manual updates via `setActions` are NOT supported.\n */\nexport class MenuWorkbenchToolBar extends WorkbenchToolBar {\n\n\tprivate readonly _onDidChangeMenuItems = this._store.add(new Emitter<this>());\n\treadonly onDidChangeMenuItems: Event<this> = this._onDidChangeMenuItems.event;\n\n\tconstructor(\n\t\tcontainer: HTMLElement,\n\t\tmenuId: MenuId,\n\t\toptions: IMenuWorkbenchToolBarOptions | undefined,\n\t\t@IMenuService menuService: IMenuService,\n\t\t@IContextKeyService contextKeyService: IContextKeyService,\n\t\t@IContextMenuService contextMenuService: IContextMenuService,\n\t\t@IKeybindingService keybindingService: IKeybindingService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t) {\n\t\tsuper(container, { resetMenu: menuId, ...options }, menuService, contextKeyService, contextMenuService, keybindingService, telemetryService);\n\n\t\t// update logic\n\t\tconst menu = this._store.add(menuService.createMenu(menuId, contextKeyService, { emitEventsForSubmenuChanges: true }));\n\t\tconst updateToolbar = () => {\n\t\t\tconst primary: IAction[] = [];\n\t\t\tconst secondary: IAction[] = [];\n\t\t\tcreateAndFillInActionBarActions(\n\t\t\t\tmenu,\n\t\t\t\toptions?.menuOptions,\n\t\t\t\t{ primary, secondary },\n\t\t\t\toptions?.toolbarOptions?.primaryGroup, options?.toolbarOptions?.shouldInlineSubmenu, options?.toolbarOptions?.useSeparatorsInPrimaryActions\n\t\t\t);\n\t\t\tsuper.setActions(primary, secondary);\n\t\t};\n\n\t\tthis._store.add(menu.onDidChange(() => {\n\t\t\tupdateToolbar();\n\t\t\tthis._onDidChangeMenuItems.fire(this);\n\t\t}));\n\t\tupdateToolbar();\n\t}\n\n\t/**\n\t * @deprecated The WorkbenchToolBar does not support this method because it works with menus.\n\t */\n\toverride setActions(): void {\n\t\tthrow new BugIndicatingError('This toolbar is populated from a menu.');\n\t}\n}\n"]}