{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/userDataSync/test/common/userDataSyncStoreService.test.ts"],"names":[],"mappings":"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","file":"userDataSyncStoreService.test.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport * as assert from 'assert';\nimport { timeout } from 'vs/base/common/async';\nimport { newWriteableBufferStream } from 'vs/base/common/buffer';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { Event } from 'vs/base/common/event';\nimport { isWeb } from 'vs/base/common/platform';\nimport { runWithFakedTimers } from 'vs/base/test/common/timeTravelScheduler';\nimport { ensureNoDisposablesAreLeakedInTestSuite } from 'vs/base/test/common/utils';\nimport { NullLogService } from 'vs/platform/log/common/log';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IRequestService } from 'vs/platform/request/common/request';\nimport { IUserDataSyncStoreService, SyncResource, UserDataSyncErrorCode, UserDataSyncStoreError } from 'vs/platform/userDataSync/common/userDataSync';\nimport { RequestsSession, UserDataSyncStoreService } from 'vs/platform/userDataSync/common/userDataSyncStoreService';\nimport { UserDataSyncClient, UserDataSyncTestServer } from 'vs/platform/userDataSync/test/common/userDataSyncClient';\n\nsuite('UserDataSyncStoreService', () => {\n\n\tconst disposableStore = ensureNoDisposablesAreLeakedInTestSuite();\n\n\ttest('test read manifest for the first time', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\t\tconst productService = client.instantiationService.get(IProductService);\n\n\t\tawait testObject.manifest(null);\n\n\t\tassert.strictEqual(target.requestsWithAllHeaders.length, 1);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-Client-Name'], `${productService.applicationName}${isWeb ? '-web' : ''}`);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-Client-Version'], productService.version);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], undefined);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], undefined);\n\t});\n\n\ttest('test read manifest for the second time when session is not yet created', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\tawait testObject.manifest(null);\n\t\tconst machineSessionId = target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'];\n\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\n\t\tassert.strictEqual(target.requestsWithAllHeaders.length, 1);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], machineSessionId);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], undefined);\n\t});\n\n\ttest('test session id header is not set in the first manifest request after session is created', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\tawait testObject.manifest(null);\n\t\tconst machineSessionId = target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'];\n\t\tawait testObject.writeResource(SyncResource.Settings, 'some content', null);\n\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\n\t\tassert.strictEqual(target.requestsWithAllHeaders.length, 1);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], machineSessionId);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], undefined);\n\t});\n\n\ttest('test session id header is set from the second manifest request after session is created', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\tawait testObject.manifest(null);\n\t\tconst machineSessionId = target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'];\n\t\tawait testObject.writeResource(SyncResource.Settings, 'some content', null);\n\t\tawait testObject.manifest(null);\n\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\n\t\tassert.strictEqual(target.requestsWithAllHeaders.length, 1);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], machineSessionId);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], undefined);\n\t});\n\n\ttest('test headers are send for write request', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\tawait testObject.manifest(null);\n\t\tconst machineSessionId = target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'];\n\t\tawait testObject.writeResource(SyncResource.Settings, 'some content', null);\n\t\tawait testObject.manifest(null);\n\t\tawait testObject.manifest(null);\n\n\t\ttarget.reset();\n\t\tawait testObject.writeResource(SyncResource.Settings, 'some content', null);\n\n\t\tassert.strictEqual(target.requestsWithAllHeaders.length, 1);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], machineSessionId);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], undefined);\n\t});\n\n\ttest('test headers are send for read request', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\tawait testObject.manifest(null);\n\t\tconst machineSessionId = target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'];\n\t\tawait testObject.writeResource(SyncResource.Settings, 'some content', null);\n\t\tawait testObject.manifest(null);\n\t\tawait testObject.manifest(null);\n\n\t\ttarget.reset();\n\t\tawait testObject.readResource(SyncResource.Settings, null);\n\n\t\tassert.strictEqual(target.requestsWithAllHeaders.length, 1);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], machineSessionId);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], undefined);\n\t});\n\n\ttest('test headers are reset after session is cleared ', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\tawait testObject.manifest(null);\n\t\tconst machineSessionId = target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'];\n\t\tawait testObject.writeResource(SyncResource.Settings, 'some content', null);\n\t\tawait testObject.manifest(null);\n\t\tawait testObject.manifest(null);\n\t\tawait testObject.clear();\n\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\n\t\tassert.strictEqual(target.requestsWithAllHeaders.length, 1);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], undefined);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], machineSessionId);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], undefined);\n\t});\n\n\ttest('test old headers are sent after session is changed on server ', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\tawait testObject.manifest(null);\n\t\tawait testObject.writeResource(SyncResource.Settings, 'some content', null);\n\t\tawait testObject.manifest(null);\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\t\tconst machineSessionId = target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'];\n\t\tconst userSessionId = target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'];\n\t\tawait target.clear();\n\n\t\t// client 2\n\t\tconst client2 = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client2.setUp();\n\t\tconst testObject2 = client2.instantiationService.get(IUserDataSyncStoreService);\n\t\tawait testObject2.writeResource(SyncResource.Settings, 'some content', null);\n\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\n\t\tassert.strictEqual(target.requestsWithAllHeaders.length, 1);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], undefined);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], machineSessionId);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], undefined);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], userSessionId);\n\t});\n\n\ttest('test old headers are reset from second request after session is changed on server ', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\tawait testObject.manifest(null);\n\t\tawait testObject.writeResource(SyncResource.Settings, 'some content', null);\n\t\tawait testObject.manifest(null);\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\t\tconst machineSessionId = target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'];\n\t\tconst userSessionId = target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'];\n\t\tawait target.clear();\n\n\t\t// client 2\n\t\tconst client2 = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client2.setUp();\n\t\tconst testObject2 = client2.instantiationService.get(IUserDataSyncStoreService);\n\t\tawait testObject2.writeResource(SyncResource.Settings, 'some content', null);\n\n\t\tawait testObject.manifest(null);\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\n\t\tassert.strictEqual(target.requestsWithAllHeaders.length, 1);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], undefined);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], machineSessionId);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], undefined);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], userSessionId);\n\t});\n\n\ttest('test old headers are sent after session is cleared from another server ', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\tawait testObject.manifest(null);\n\t\tawait testObject.writeResource(SyncResource.Settings, 'some content', null);\n\t\tawait testObject.manifest(null);\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\t\tconst machineSessionId = target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'];\n\t\tconst userSessionId = target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'];\n\n\t\t// client 2\n\t\tconst client2 = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client2.setUp();\n\t\tconst testObject2 = client2.instantiationService.get(IUserDataSyncStoreService);\n\t\tawait testObject2.clear();\n\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\n\t\tassert.strictEqual(target.requestsWithAllHeaders.length, 1);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], undefined);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], machineSessionId);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], undefined);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], userSessionId);\n\t});\n\n\ttest('test headers are reset after session is cleared from another server ', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\tawait testObject.manifest(null);\n\t\tawait testObject.writeResource(SyncResource.Settings, 'some content', null);\n\t\tawait testObject.manifest(null);\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\t\tconst machineSessionId = target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'];\n\n\t\t// client 2\n\t\tconst client2 = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client2.setUp();\n\t\tconst testObject2 = client2.instantiationService.get(IUserDataSyncStoreService);\n\t\tawait testObject2.clear();\n\n\t\tawait testObject.manifest(null);\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\n\t\tassert.strictEqual(target.requestsWithAllHeaders.length, 1);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], undefined);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], machineSessionId);\n\t\tassert.strictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], undefined);\n\t});\n\n\ttest('test headers are reset after session is cleared from another server - started syncing again', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\tawait testObject.manifest(null);\n\t\tawait testObject.writeResource(SyncResource.Settings, 'some content', null);\n\t\tawait testObject.manifest(null);\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\t\tconst machineSessionId = target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'];\n\t\tconst userSessionId = target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'];\n\n\t\t// client 2\n\t\tconst client2 = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client2.setUp();\n\t\tconst testObject2 = client2.instantiationService.get(IUserDataSyncStoreService);\n\t\tawait testObject2.clear();\n\n\t\tawait testObject.manifest(null);\n\t\tawait testObject.writeResource(SyncResource.Settings, 'some content', null);\n\t\tawait testObject.manifest(null);\n\t\ttarget.reset();\n\t\tawait testObject.manifest(null);\n\n\t\tassert.strictEqual(target.requestsWithAllHeaders.length, 1);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], undefined);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-Machine-Session-Id'], machineSessionId);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], userSessionId);\n\t\tassert.notStrictEqual(target.requestsWithAllHeaders[0].headers!['X-User-Session-Id'], undefined);\n\t});\n\n\ttest('test rate limit on server with retry after', async () => {\n\t\tconst target = new UserDataSyncTestServer(1, 1);\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\tawait testObject.manifest(null);\n\n\t\tconst promise = Event.toPromise(testObject.onDidChangeDonotMakeRequestsUntil);\n\t\ttry {\n\t\t\tawait testObject.manifest(null);\n\t\t\tassert.fail('should fail');\n\t\t} catch (e) {\n\t\t\tassert.ok(e instanceof UserDataSyncStoreError);\n\t\t\tassert.deepStrictEqual((<UserDataSyncStoreError>e).code, UserDataSyncErrorCode.TooManyRequestsAndRetryAfter);\n\t\t\tawait promise;\n\t\t\tassert.ok(!!testObject.donotMakeRequestsUntil);\n\t\t}\n\t});\n\n\ttest('test donotMakeRequestsUntil is reset after retry time is finished', async () => {\n\t\treturn runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\t\tconst client = disposableStore.add(new UserDataSyncClient(new UserDataSyncTestServer(1, 0.25)));\n\t\t\tawait client.setUp();\n\t\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\t\tawait testObject.manifest(null);\n\t\t\ttry {\n\t\t\t\tawait testObject.manifest(null);\n\t\t\t\tassert.fail('should fail');\n\t\t\t} catch (e) { }\n\n\t\t\tconst promise = Event.toPromise(testObject.onDidChangeDonotMakeRequestsUntil);\n\t\t\tawait timeout(300);\n\t\t\tawait promise;\n\t\t\tassert.ok(!testObject.donotMakeRequestsUntil);\n\t\t});\n\t});\n\n\ttest('test donotMakeRequestsUntil is retrieved', async () => {\n\t\tconst client = disposableStore.add(new UserDataSyncClient(new UserDataSyncTestServer(1, 1)));\n\t\tawait client.setUp();\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\tawait testObject.manifest(null);\n\t\ttry {\n\t\t\tawait testObject.manifest(null);\n\t\t} catch (e) { }\n\n\t\tconst target = disposableStore.add(client.instantiationService.createInstance(UserDataSyncStoreService));\n\t\tassert.strictEqual(target.donotMakeRequestsUntil?.getTime(), testObject.donotMakeRequestsUntil?.getTime());\n\t});\n\n\ttest('test donotMakeRequestsUntil is checked and reset after retreived', async () => {\n\t\treturn runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\t\tconst client = disposableStore.add(new UserDataSyncClient(new UserDataSyncTestServer(1, 0.25)));\n\t\t\tawait client.setUp();\n\t\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\n\t\t\tawait testObject.manifest(null);\n\t\t\ttry {\n\t\t\t\tawait testObject.manifest(null);\n\t\t\t\tassert.fail('should fail');\n\t\t\t} catch (e) { }\n\n\t\t\tawait timeout(300);\n\t\t\tconst target = disposableStore.add(client.instantiationService.createInstance(UserDataSyncStoreService));\n\t\t\tassert.ok(!target.donotMakeRequestsUntil);\n\t\t});\n\t});\n\n\ttest('test read resource request handles 304', async () => {\n\t\t// Setup the client\n\t\tconst target = new UserDataSyncTestServer();\n\t\tconst client = disposableStore.add(new UserDataSyncClient(target));\n\t\tawait client.setUp();\n\t\tawait client.sync();\n\n\t\tconst testObject = client.instantiationService.get(IUserDataSyncStoreService);\n\t\tconst expected = await testObject.readResource(SyncResource.Settings, null);\n\t\tconst actual = await testObject.readResource(SyncResource.Settings, expected);\n\n\t\tassert.strictEqual(actual, expected);\n\t});\n\n});\n\nsuite('UserDataSyncRequestsSession', () => {\n\n\tconst requestService: IRequestService = {\n\t\t_serviceBrand: undefined,\n\t\tasync request() { return { res: { headers: {} }, stream: newWriteableBufferStream() }; },\n\t\tasync resolveProxy() { return undefined; }\n\t};\n\n\ttest('too many requests are thrown when limit exceeded', async () => {\n\t\tconst testObject = new RequestsSession(1, 500, requestService, new NullLogService());\n\t\tawait testObject.request('url', {}, CancellationToken.None);\n\n\t\ttry {\n\t\t\tawait testObject.request('url', {}, CancellationToken.None);\n\t\t} catch (error) {\n\t\t\tassert.ok(error instanceof UserDataSyncStoreError);\n\t\t\tassert.strictEqual((<UserDataSyncStoreError>error).code, UserDataSyncErrorCode.LocalTooManyRequests);\n\t\t\treturn;\n\t\t}\n\t\tassert.fail('Should fail with limit exceeded');\n\t});\n\n\ttest('requests are handled after session is expired', () => runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\tconst testObject = new RequestsSession(1, 100, requestService, new NullLogService());\n\t\tawait testObject.request('url', {}, CancellationToken.None);\n\t\tawait timeout(125);\n\t\tawait testObject.request('url', {}, CancellationToken.None);\n\t}));\n\n\ttest('too many requests are thrown after session is expired', () => runWithFakedTimers({ useFakeTimers: true }, async () => {\n\t\tconst testObject = new RequestsSession(1, 100, requestService, new NullLogService());\n\t\tawait testObject.request('url', {}, CancellationToken.None);\n\t\tawait timeout(125);\n\t\tawait testObject.request('url', {}, CancellationToken.None);\n\n\t\ttry {\n\t\t\tawait testObject.request('url', {}, CancellationToken.None);\n\t\t} catch (error) {\n\t\t\tassert.ok(error instanceof UserDataSyncStoreError);\n\t\t\tassert.strictEqual((<UserDataSyncStoreError>error).code, UserDataSyncErrorCode.LocalTooManyRequests);\n\t\t\treturn;\n\t\t}\n\t\tassert.fail('Should fail with limit exceeded');\n\t}));\n\n});\n"]}