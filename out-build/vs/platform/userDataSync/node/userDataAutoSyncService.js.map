{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/userDataSync/node/userDataAutoSyncService.ts"],"names":[],"mappings":";;;;;;;;;;;;;IAeO,IAAM,IAAI,GAAV,MAAM,IAAwB,SAAQ,8BAA2B;QAEvE,YACkB,cAAmB,EACC,kCAAwC,EAClD,wBAA8B,EACzB,6BAAmC,EAC7C,mBAAyB,EAC3B,iBAAuB,EAClB,UAAgB,EACZ,gBAAsB,EAChC,gBAAqB,EACV,2BAAiC,EAC9C,cAAmB;YAEpC,KAAK,CAAC,cAAc,EAAE,kCAAkC,EAAE,wBAAwB,EAAE,6BAA6B,EAAE,mBAAmB,EAAE,UAAU,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,2BAA2B,EAAE,cAAc,CAAC,CAAC;YAErO,IAAI,CAAC,CAAC,CAAS,aAAK,CAAC,QAAQ,CAAmB,aAAK,CAAC,GAAG,CACxD,aAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,GAAG,EAAE,CAAC,aAAa,CAAC,EAClE,aAAK,CAAC,GAAG,CAAC,iBAAiB,CAAC,eAAe,EAAE,GAAG,EAAE,CAAC,YAAY,CAAC,CAChE,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QACrH,CAAC;KAED,CAAA;IAvBY,oBAAI;mBAAJ,IAAI;QAGd,WAAA,oBAAG,CAAA;QACH,WAAA,mBAAI,CAAA;QACJ,WAAA,mBAAI,CAAA;QACJ,WAAA,mBAAI,CAAA;QACJ,WAAA,mBAAI,CAAA;QACJ,WAAA,aAAI,CAAA;QACJ,WAAA,mBAAI,CAAA;QACJ,WAAA,0BAAI,CAAA;QACJ,WAAA,eAAG,CAAA;QACH,WAAA,2BAAI,CAAA;QACJ,YAAA,aAAG,CAAA;OAbO,IAAI,CAuBhB","file":"userDataAutoSyncService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n//\nimport { Event } from 'vs/base/common/event';\nimport { INativeHostService } from 'vs/platform/native/common/native';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IStorageService } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { UserDataAutoSyncService as BaseUserDataAutoSyncService } from 'vs/platform/userDataSync/common/userDataAutoSyncService';\nimport { IUserDataSyncEnablementService, IUserDataSyncLogService, IUserDataSyncService, IUserDataSyncStoreManagementService, IUserDataSyncStoreService } from 'vs/platform/userDataSync/common/userDataSync';\nimport { IUserDataSyncAccountService } from 'vs/platform/userDataSync/common/userDataSyncAccount';\nimport { IUserDataSyncMachinesService } from 'vs/platform/userDataSync/common/userDataSyncMachines';\n\nexport class UserDataAutoSyncService extends BaseUserDataAutoSyncService {\n\n\tconstructor(\n\t\t@IProductService productService: IProductService,\n\t\t@IUserDataSyncStoreManagementService userDataSyncStoreManagementService: IUserDataSyncStoreManagementService,\n\t\t@IUserDataSyncStoreService userDataSyncStoreService: IUserDataSyncStoreService,\n\t\t@IUserDataSyncEnablementService userDataSyncEnablementService: IUserDataSyncEnablementService,\n\t\t@IUserDataSyncService userDataSyncService: IUserDataSyncService,\n\t\t@INativeHostService nativeHostService: INativeHostService,\n\t\t@IUserDataSyncLogService logService: IUserDataSyncLogService,\n\t\t@IUserDataSyncAccountService authTokenService: IUserDataSyncAccountService,\n\t\t@ITelemetryService telemetryService: ITelemetryService,\n\t\t@IUserDataSyncMachinesService userDataSyncMachinesService: IUserDataSyncMachinesService,\n\t\t@IStorageService storageService: IStorageService,\n\t) {\n\t\tsuper(productService, userDataSyncStoreManagementService, userDataSyncStoreService, userDataSyncEnablementService, userDataSyncService, logService, authTokenService, telemetryService, userDataSyncMachinesService, storageService);\n\n\t\tthis._register(Event.debounce<string, string[]>(Event.any<string>(\n\t\t\tEvent.map(nativeHostService.onDidFocusWindow, () => 'windowFocus'),\n\t\t\tEvent.map(nativeHostService.onDidOpenWindow, () => 'windowOpen'),\n\t\t), (last, source) => last ? [...last, source] : [source], 1000)(sources => this.triggerSync(sources, true, false)));\n\t}\n\n}\n"]}