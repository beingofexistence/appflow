{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/userDataSync/common/userDataSyncAccount.ts"],"names":[],"mappings":"AAAA;;;gGAGgG;;;;;;;;;;;;;;IAYnF,QAAA,IAAI,GAA0B,IAAA,mBAAG,EAA0C,6BAA6B,CAAC,CAAC;IAWhH,IAAM,IAAI,GAAV,MAAM,IAA2B,SAAQ,eAAG;QAKlD,IAAI,OAAO,KAAuC,OAAO,IAAI,CAAC,CAAC,CAAQ,CAAC,CAAC;QASzE,YAC4B,CAA+C,EACjD,CAAiC;YAE1D,KAAK,EAAE,CAAC;YAHoC,MAAC,GAAD,CAAC,CAA6B;YAChC,MAAC,GAAD,CAAC,CAAe;YAVnD,MAAC,GAAqB,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAwC,CAAC,CAAC;YACrF,uBAAkB,GAAG,IAAI,CAAC,CAAC,CAAmB,KAAK,CAAC;YAErD,MAAC,GAAkC,IAAI,CAAC,CAAC,CAAS,IAAI,WAAG,EAAe,CAAC,CAAC;YACzE,kBAAa,GAAmB,IAAI,CAAC,CAAC,CAAc,KAAK,CAAC;YAE3D,MAAC,GAAyB,KAAK,CAAC;YAOvC,IAAI,CAAC,CAAC,CAAS,CAAC,CAAwB,aAAa,CAAC,IAAI,CAAC,EAAE;gBAC5D,IAAI,CAAC,CAAC,CAAU,IAAI,CAAC,iCAAiC,EAAE,IAAI,CAAC,OAAO,EAAE,wBAAwB,EAAE,IAAI,CAAC,CAAC,EAAe,IAAI,CAAC,CAAC;gBAC3H,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;gBAC9B,IAAI,IAAI,sDAAoC,EAAE;oBAC7C,IAAI,CAAC,CAAC,CAAc,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;iBACxD;qBAAM;oBACN,IAAI,CAAC,CAAC,CAAc,IAAI,CAAC,IAAI,CAAC,CAAC,CAAc,qCAAqC,CAAC,CAAC;iBACpF;gBACD,IAAI,CAAC,CAAC,GAAgB,IAAI,CAAC;YAC5B,CAAC,CAAC,CAAC,CAAC;YACJ,IAAI,CAAC,CAAC,CAAS,CAAC,CAAwB,cAAc,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,GAAgB,KAAK,CAAC,CAAC,CAAC;QAC5F,CAAC;QAED,KAAK,CAAC,aAAa,CAAC,OAAyC;YAC5D,IAAI,OAAO,IAAI,IAAI,CAAC,CAAC,CAAQ,CAAC,CAAC,OAAO,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAQ,KAAK,IAAI,OAAO,CAAC,wBAAwB,KAAK,IAAI,CAAC,CAAC,CAAQ,wBAAwB,CAAC,CAAC,CAAC,OAAO,KAAK,IAAI,CAAC,CAAC,EAAS;gBAChL,IAAI,CAAC,CAAC,GAAU,OAAO,CAAC;gBACxB,IAAI,IAAI,CAAC,CAAC,EAAS;oBAClB,IAAI,CAAC,CAAC,CAAwB,YAAY,CAAC,IAAI,CAAC,CAAC,CAAQ,KAAK,EAAE,IAAI,CAAC,CAAC,CAAQ,wBAAwB,CAAC,CAAC;iBACxG;gBACD,IAAI,CAAC,CAAC,CAAmB,IAAI,CAAC,OAAO,CAAC,CAAC;aACvC;QACF,CAAC;KAED,CAAA;IA1CY,oBAAI;mBAAJ,IAAI;QAed,WAAA,mBAAI,CAAA;QACJ,WAAA,mBAAI,CAAA;OAhBM,IAAI,CA0ChB","file":"userDataSyncAccount.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable } from 'vs/base/common/lifecycle';\nimport { createDecorator } from 'vs/platform/instantiation/common/instantiation';\nimport { IUserDataSyncLogService, IUserDataSyncStoreService, UserDataSyncErrorCode } from 'vs/platform/userDataSync/common/userDataSync';\n\nexport interface IUserDataSyncAccount {\n\treadonly authenticationProviderId: string;\n\treadonly token: string;\n}\n\nexport const IUserDataSyncAccountService = createDecorator<IUserDataSyncAccountService>('IUserDataSyncAccountService');\nexport interface IUserDataSyncAccountService {\n\treadonly _serviceBrand: undefined;\n\n\treadonly onTokenFailed: Event<boolean/*bail out*/>;\n\treadonly account: IUserDataSyncAccount | undefined;\n\treadonly onDidChangeAccount: Event<IUserDataSyncAccount | undefined>;\n\tupdateAccount(account: IUserDataSyncAccount | undefined): Promise<void>;\n\n}\n\nexport class UserDataSyncAccountService extends Disposable implements IUserDataSyncAccountService {\n\n\t_serviceBrand: any;\n\n\tprivate _account: IUserDataSyncAccount | undefined;\n\tget account(): IUserDataSyncAccount | undefined { return this._account; }\n\tprivate _onDidChangeAccount = this._register(new Emitter<IUserDataSyncAccount | undefined>());\n\treadonly onDidChangeAccount = this._onDidChangeAccount.event;\n\n\tprivate _onTokenFailed: Emitter<boolean> = this._register(new Emitter<boolean>());\n\treadonly onTokenFailed: Event<boolean> = this._onTokenFailed.event;\n\n\tprivate wasTokenFailed: boolean = false;\n\n\tconstructor(\n\t\t@IUserDataSyncStoreService private readonly userDataSyncStoreService: IUserDataSyncStoreService,\n\t\t@IUserDataSyncLogService private readonly logService: IUserDataSyncLogService,\n\t) {\n\t\tsuper();\n\t\tthis._register(userDataSyncStoreService.onTokenFailed(code => {\n\t\t\tthis.logService.info('Settings Sync auth token failed', this.account?.authenticationProviderId, this.wasTokenFailed, code);\n\t\t\tthis.updateAccount(undefined);\n\t\t\tif (code === UserDataSyncErrorCode.Forbidden) {\n\t\t\t\tthis._onTokenFailed.fire(true /*bail out immediately*/);\n\t\t\t} else {\n\t\t\t\tthis._onTokenFailed.fire(this.wasTokenFailed /* bail out if token failed before */);\n\t\t\t}\n\t\t\tthis.wasTokenFailed = true;\n\t\t}));\n\t\tthis._register(userDataSyncStoreService.onTokenSucceed(() => this.wasTokenFailed = false));\n\t}\n\n\tasync updateAccount(account: IUserDataSyncAccount | undefined): Promise<void> {\n\t\tif (account && this._account ? account.token !== this._account.token || account.authenticationProviderId !== this._account.authenticationProviderId : account !== this._account) {\n\t\t\tthis._account = account;\n\t\t\tif (this._account) {\n\t\t\t\tthis.userDataSyncStoreService.setAuthToken(this._account.token, this._account.authenticationProviderId);\n\t\t\t}\n\t\t\tthis._onDidChangeAccount.fire(account);\n\t\t}\n\t}\n\n}\n\n"]}