{"version":3,"sources":["vs/platform/userDataSync/common/userDataAutoSyncService.ts"],"names":[],"mappings":"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","file":"userDataAutoSyncService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { CancelablePromise, createCancelablePromise, disposableTimeout, ThrottledDelayer, timeout } from 'vs/base/common/async';\nimport { CancellationToken } from 'vs/base/common/cancellation';\nimport { toLocalISOString } from 'vs/base/common/date';\nimport { toErrorMessage } from 'vs/base/common/errorMessage';\nimport { isCancellationError } from 'vs/base/common/errors';\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, IDisposable, MutableDisposable, toDisposable } from 'vs/base/common/lifecycle';\nimport { isWeb } from 'vs/base/common/platform';\nimport { isEqual } from 'vs/base/common/resources';\nimport { URI } from 'vs/base/common/uri';\nimport { localize } from 'vs/nls';\nimport { IProductService } from 'vs/platform/product/common/productService';\nimport { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { IUserDataSyncTask, IUserDataAutoSyncService, IUserDataManifest, IUserDataSyncLogService, IUserDataSyncEnablementService, IUserDataSyncService, IUserDataSyncStoreManagementService, IUserDataSyncStoreService, UserDataAutoSyncError, UserDataSyncError, UserDataSyncErrorCode } from 'vs/platform/userDataSync/common/userDataSync';\nimport { IUserDataSyncAccountService } from 'vs/platform/userDataSync/common/userDataSyncAccount';\nimport { IUserDataSyncMachinesService } from 'vs/platform/userDataSync/common/userDataSyncMachines';\n\ntype AutoSyncClassification = {\n\towner: 'sandy081';\n\tcomment: 'Information about the sources triggering auto sync';\n\tsources: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Source that triggered auto sync' };\n\tproviderId: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Auth provider id used for sync' };\n};\n\ntype AutoSyncErrorClassification = {\n\towner: 'sandy081';\n\tcomment: 'Information about the error that causes auto sync to fail';\n\tcode: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'error code' };\n\tservice: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Settings sync service for which this error has occurred' };\n};\n\nconst disableMachineEventuallyKey = 'sync.disableMachineEventually';\nconst sessionIdKey = 'sync.sessionId';\nconst storeUrlKey = 'sync.storeUrl';\nconst productQualityKey = 'sync.productQuality';\n\nexport class UserDataAutoSyncService extends Disposable implements IUserDataAutoSyncService {\n\n\t_serviceBrand: any;\n\n\tprivate readonly autoSync = this._register(new MutableDisposable<AutoSync>());\n\tprivate successiveFailures: number = 0;\n\tprivate lastSyncTriggerTime: number | undefined = undefined;\n\tprivate readonly syncTriggerDelayer: ThrottledDelayer<void>;\n\tprivate suspendUntilRestart: boolean = false;\n\n\tprivate readonly _onError: Emitter<UserDataSyncError> = this._register(new Emitter<UserDataSyncError>());\n\treadonly onError: Event<UserDataSyncError> = this._onError.event;\n\n\tprivate lastSyncUrl: URI | undefined;\n\tprivate get syncUrl(): URI | undefined {\n\t\tconst value = this.storageService.get(storeUrlKey, StorageScope.APPLICATION);\n\t\treturn value ? URI.parse(value) : undefined;\n\t}\n\tprivate set syncUrl(syncUrl: URI | undefined) {\n\t\tif (syncUrl) {\n\t\t\tthis.storageService.store(storeUrlKey, syncUrl.toString(), StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis.storageService.remove(storeUrlKey, StorageScope.APPLICATION);\n\t\t}\n\t}\n\n\tprivate previousProductQuality: string | undefined;\n\tprivate get productQuality(): string | undefined {\n\t\treturn this.storageService.get(productQualityKey, StorageScope.APPLICATION);\n\t}\n\tprivate set productQuality(productQuality: string | undefined) {\n\t\tif (productQuality) {\n\t\t\tthis.storageService.store(productQualityKey, productQuality, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t} else {\n\t\t\tthis.storageService.remove(productQualityKey, StorageScope.APPLICATION);\n\t\t}\n\t}\n\n\tconstructor(\n\t\t@IProductService productService: IProductService,\n\t\t@IUserDataSyncStoreManagementService private readonly userDataSyncStoreManagementService: IUserDataSyncStoreManagementService,\n\t\t@IUserDataSyncStoreService private readonly userDataSyncStoreService: IUserDataSyncStoreService,\n\t\t@IUserDataSyncEnablementService private readonly userDataSyncEnablementService: IUserDataSyncEnablementService,\n\t\t@IUserDataSyncService private readonly userDataSyncService: IUserDataSyncService,\n\t\t@IUserDataSyncLogService private readonly logService: IUserDataSyncLogService,\n\t\t@IUserDataSyncAccountService private readonly userDataSyncAccountService: IUserDataSyncAccountService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IUserDataSyncMachinesService private readonly userDataSyncMachinesService: IUserDataSyncMachinesService,\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t) {\n\t\tsuper();\n\t\tthis.syncTriggerDelayer = this._register(new ThrottledDelayer<void>(this.getSyncTriggerDelayTime()));\n\n\t\tthis.lastSyncUrl = this.syncUrl;\n\t\tthis.syncUrl = userDataSyncStoreManagementService.userDataSyncStore?.url;\n\n\t\tthis.previousProductQuality = this.productQuality;\n\t\tthis.productQuality = productService.quality;\n\n\t\tif (this.syncUrl) {\n\n\t\t\tthis.logService.info('Using settings sync service', this.syncUrl.toString());\n\t\t\tthis._register(userDataSyncStoreManagementService.onDidChangeUserDataSyncStore(() => {\n\t\t\t\tif (!isEqual(this.syncUrl, userDataSyncStoreManagementService.userDataSyncStore?.url)) {\n\t\t\t\t\tthis.lastSyncUrl = this.syncUrl;\n\t\t\t\t\tthis.syncUrl = userDataSyncStoreManagementService.userDataSyncStore?.url;\n\t\t\t\t\tif (this.syncUrl) {\n\t\t\t\t\t\tthis.logService.info('Using settings sync service', this.syncUrl.toString());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}));\n\n\t\t\tif (this.userDataSyncEnablementService.isEnabled()) {\n\t\t\t\tthis.logService.info('Auto Sync is enabled.');\n\t\t\t} else {\n\t\t\t\tthis.logService.info('Auto Sync is disabled.');\n\t\t\t}\n\t\t\tthis.updateAutoSync();\n\n\t\t\tif (this.hasToDisableMachineEventually()) {\n\t\t\t\tthis.disableMachineEventually();\n\t\t\t}\n\n\t\t\tthis._register(userDataSyncAccountService.onDidChangeAccount(() => this.updateAutoSync()));\n\t\t\tthis._register(userDataSyncStoreService.onDidChangeDonotMakeRequestsUntil(() => this.updateAutoSync()));\n\t\t\tthis._register(userDataSyncService.onDidChangeLocal(source => this.triggerSync([source], false, false)));\n\t\t\tthis._register(Event.filter(this.userDataSyncEnablementService.onDidChangeResourceEnablement, ([, enabled]) => enabled)(() => this.triggerSync(['resourceEnablement'], false, false)));\n\t\t\tthis._register(this.userDataSyncStoreManagementService.onDidChangeUserDataSyncStore(() => this.triggerSync(['userDataSyncStoreChanged'], false, false)));\n\t\t}\n\t}\n\n\tprivate updateAutoSync(): void {\n\t\tconst { enabled, message } = this.isAutoSyncEnabled();\n\t\tif (enabled) {\n\t\t\tif (this.autoSync.value === undefined) {\n\t\t\t\tthis.autoSync.value = new AutoSync(this.lastSyncUrl, 1000 * 60 * 5 /* 5 miutes */, this.userDataSyncStoreManagementService, this.userDataSyncStoreService, this.userDataSyncService, this.userDataSyncMachinesService, this.logService, this.telemetryService, this.storageService);\n\t\t\t\tthis.autoSync.value.register(this.autoSync.value.onDidStartSync(() => this.lastSyncTriggerTime = new Date().getTime()));\n\t\t\t\tthis.autoSync.value.register(this.autoSync.value.onDidFinishSync(e => this.onDidFinishSync(e)));\n\t\t\t\tif (this.startAutoSync()) {\n\t\t\t\t\tthis.autoSync.value.start();\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis.syncTriggerDelayer.cancel();\n\t\t\tif (this.autoSync.value !== undefined) {\n\t\t\t\tif (message) {\n\t\t\t\t\tthis.logService.info(message);\n\t\t\t\t}\n\t\t\t\tthis.autoSync.clear();\n\t\t\t}\n\n\t\t\t/* log message when auto sync is not disabled by user */\n\t\t\telse if (message && this.userDataSyncEnablementService.isEnabled()) {\n\t\t\t\tthis.logService.info(message);\n\t\t\t}\n\t\t}\n\t}\n\n\t// For tests purpose only\n\tprotected startAutoSync(): boolean { return true; }\n\n\tprivate isAutoSyncEnabled(): { enabled: boolean; message?: string } {\n\t\tif (!this.userDataSyncEnablementService.isEnabled()) {\n\t\t\treturn { enabled: false, message: 'Auto Sync: Disabled.' };\n\t\t}\n\t\tif (!this.userDataSyncAccountService.account) {\n\t\t\treturn { enabled: false, message: 'Auto Sync: Suspended until auth token is available.' };\n\t\t}\n\t\tif (this.userDataSyncStoreService.donotMakeRequestsUntil) {\n\t\t\treturn { enabled: false, message: `Auto Sync: Suspended until ${toLocalISOString(this.userDataSyncStoreService.donotMakeRequestsUntil)} because server is not accepting requests until then.` };\n\t\t}\n\t\tif (this.suspendUntilRestart) {\n\t\t\treturn { enabled: false, message: 'Auto Sync: Suspended until restart.' };\n\t\t}\n\t\treturn { enabled: true };\n\t}\n\n\tasync turnOn(): Promise<void> {\n\t\tthis.stopDisableMachineEventually();\n\t\tthis.lastSyncUrl = this.syncUrl;\n\t\tthis.updateEnablement(true);\n\t}\n\n\tasync turnOff(everywhere: boolean, softTurnOffOnError?: boolean, donotRemoveMachine?: boolean): Promise<void> {\n\t\ttry {\n\n\t\t\t// Remove machine\n\t\t\tif (this.userDataSyncAccountService.account && !donotRemoveMachine) {\n\t\t\t\tawait this.userDataSyncMachinesService.removeCurrentMachine();\n\t\t\t}\n\n\t\t\t// Disable Auto Sync\n\t\t\tthis.updateEnablement(false);\n\n\t\t\t// Reset Session\n\t\t\tthis.storageService.remove(sessionIdKey, StorageScope.APPLICATION);\n\n\t\t\t// Reset\n\t\t\tif (everywhere) {\n\t\t\t\tthis.telemetryService.publicLog2<{}, { owner: 'sandy081'; comment: 'Reporting when settings sync is turned off in all devices' }>('sync/turnOffEveryWhere');\n\t\t\t\tawait this.userDataSyncService.reset();\n\t\t\t} else {\n\t\t\t\tawait this.userDataSyncService.resetLocal();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tthis.logService.error(error);\n\t\t\tif (softTurnOffOnError) {\n\t\t\t\tthis.updateEnablement(false);\n\t\t\t} else {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate updateEnablement(enabled: boolean): void {\n\t\tif (this.userDataSyncEnablementService.isEnabled() !== enabled) {\n\t\t\tthis.userDataSyncEnablementService.setEnablement(enabled);\n\t\t\tthis.updateAutoSync();\n\t\t}\n\t}\n\n\tprivate hasProductQualityChanged(): boolean {\n\t\treturn !!this.previousProductQuality && !!this.productQuality && this.previousProductQuality !== this.productQuality;\n\t}\n\n\tprivate async onDidFinishSync(error: Error | undefined): Promise<void> {\n\t\tif (!error) {\n\t\t\t// Sync finished without errors\n\t\t\tthis.successiveFailures = 0;\n\t\t\treturn;\n\t\t}\n\n\t\t// Error while syncing\n\t\tconst userDataSyncError = UserDataSyncError.toUserDataSyncError(error);\n\n\t\t// Log to telemetry\n\t\tif (userDataSyncError instanceof UserDataAutoSyncError) {\n\t\t\tthis.telemetryService.publicLog2<{ code: string; service: string }, AutoSyncErrorClassification>(`autosync/error`, { code: userDataSyncError.code, service: this.userDataSyncStoreManagementService.userDataSyncStore!.url.toString() });\n\t\t}\n\n\t\t// Session got expired\n\t\tif (userDataSyncError.code === UserDataSyncErrorCode.SessionExpired) {\n\t\t\tawait this.turnOff(false, true /* force soft turnoff on error */);\n\t\t\tthis.logService.info('Auto Sync: Turned off sync because current session is expired');\n\t\t}\n\n\t\t// Turned off from another device\n\t\telse if (userDataSyncError.code === UserDataSyncErrorCode.TurnedOff) {\n\t\t\tawait this.turnOff(false, true /* force soft turnoff on error */);\n\t\t\tthis.logService.info('Auto Sync: Turned off sync because sync is turned off in the cloud');\n\t\t}\n\n\t\t// Exceeded Rate Limit on Client\n\t\telse if (userDataSyncError.code === UserDataSyncErrorCode.LocalTooManyRequests) {\n\t\t\tthis.suspendUntilRestart = true;\n\t\t\tthis.logService.info('Auto Sync: Suspended sync because of making too many requests to server');\n\t\t\tthis.updateAutoSync();\n\t\t}\n\n\t\t// Exceeded Rate Limit on Server\n\t\telse if (userDataSyncError.code === UserDataSyncErrorCode.TooManyRequests) {\n\t\t\tawait this.turnOff(false, true /* force soft turnoff on error */,\n\t\t\t\ttrue /* do not disable machine because disabling a machine makes request to server and can fail with TooManyRequests */);\n\t\t\tthis.disableMachineEventually();\n\t\t\tthis.logService.info('Auto Sync: Turned off sync because of making too many requests to server');\n\t\t}\n\n\t\t// Method Not Found\n\t\telse if (userDataSyncError.code === UserDataSyncErrorCode.MethodNotFound) {\n\t\t\tawait this.turnOff(false, true /* force soft turnoff on error */);\n\t\t\tthis.logService.info('Auto Sync: Turned off sync because current client is making requests to server that are not supported');\n\t\t}\n\n\t\t// Upgrade Required or Gone\n\t\telse if (userDataSyncError.code === UserDataSyncErrorCode.UpgradeRequired || userDataSyncError.code === UserDataSyncErrorCode.Gone) {\n\t\t\tawait this.turnOff(false, true /* force soft turnoff on error */,\n\t\t\t\ttrue /* do not disable machine because disabling a machine makes request to server and can fail with upgrade required or gone */);\n\t\t\tthis.disableMachineEventually();\n\t\t\tthis.logService.info('Auto Sync: Turned off sync because current client is not compatible with server. Requires client upgrade.');\n\t\t}\n\n\t\t// Incompatible Local Content\n\t\telse if (userDataSyncError.code === UserDataSyncErrorCode.IncompatibleLocalContent) {\n\t\t\tawait this.turnOff(false, true /* force soft turnoff on error */);\n\t\t\tthis.logService.info(`Auto Sync: Turned off sync because server has ${userDataSyncError.resource} content with newer version than of client. Requires client upgrade.`);\n\t\t}\n\n\t\t// Incompatible Remote Content\n\t\telse if (userDataSyncError.code === UserDataSyncErrorCode.IncompatibleRemoteContent) {\n\t\t\tawait this.turnOff(false, true /* force soft turnoff on error */);\n\t\t\tthis.logService.info(`Auto Sync: Turned off sync because server has ${userDataSyncError.resource} content with older version than of client. Requires server reset.`);\n\t\t}\n\n\t\t// Service changed\n\t\telse if (userDataSyncError.code === UserDataSyncErrorCode.ServiceChanged || userDataSyncError.code === UserDataSyncErrorCode.DefaultServiceChanged) {\n\n\t\t\t// Check if default settings sync service has changed in web without changing the product quality\n\t\t\t// Then turn off settings sync and ask user to turn on again\n\t\t\tif (isWeb && userDataSyncError.code === UserDataSyncErrorCode.DefaultServiceChanged && !this.hasProductQualityChanged()) {\n\t\t\t\tawait this.turnOff(false, true /* force soft turnoff on error */);\n\t\t\t\tthis.logService.info('Auto Sync: Turned off sync because default sync service is changed.');\n\t\t\t}\n\n\t\t\t// Service has changed by the user. So turn off and turn on sync.\n\t\t\t// Show a prompt to the user about service change.\n\t\t\telse {\n\t\t\t\tawait this.turnOff(false, true /* force soft turnoff on error */, true /* do not disable machine */);\n\t\t\t\tawait this.turnOn();\n\t\t\t\tthis.logService.info('Auto Sync: Sync Service changed. Turned off auto sync, reset local state and turned on auto sync.');\n\t\t\t}\n\n\t\t}\n\n\t\telse {\n\t\t\tthis.logService.error(userDataSyncError);\n\t\t\tthis.successiveFailures++;\n\t\t}\n\n\t\tthis._onError.fire(userDataSyncError);\n\t}\n\n\tprivate async disableMachineEventually(): Promise<void> {\n\t\tthis.storageService.store(disableMachineEventuallyKey, true, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\tawait timeout(1000 * 60 * 10);\n\n\t\t// Return if got stopped meanwhile.\n\t\tif (!this.hasToDisableMachineEventually()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.stopDisableMachineEventually();\n\n\t\t// disable only if sync is disabled\n\t\tif (!this.userDataSyncEnablementService.isEnabled() && this.userDataSyncAccountService.account) {\n\t\t\tawait this.userDataSyncMachinesService.removeCurrentMachine();\n\t\t}\n\t}\n\n\tprivate hasToDisableMachineEventually(): boolean {\n\t\treturn this.storageService.getBoolean(disableMachineEventuallyKey, StorageScope.APPLICATION, false);\n\t}\n\n\tprivate stopDisableMachineEventually(): void {\n\t\tthis.storageService.remove(disableMachineEventuallyKey, StorageScope.APPLICATION);\n\t}\n\n\tprivate sources: string[] = [];\n\tasync triggerSync(sources: string[], skipIfSyncedRecently: boolean, disableCache: boolean): Promise<void> {\n\t\tif (this.autoSync.value === undefined) {\n\t\t\treturn this.syncTriggerDelayer.cancel();\n\t\t}\n\n\t\tif (skipIfSyncedRecently && this.lastSyncTriggerTime\n\t\t\t&& Math.round((new Date().getTime() - this.lastSyncTriggerTime) / 1000) < 10) {\n\t\t\tthis.logService.debug('Auto Sync: Skipped. Limited to once per 10 seconds.');\n\t\t\treturn;\n\t\t}\n\n\t\tthis.sources.push(...sources);\n\t\treturn this.syncTriggerDelayer.trigger(async () => {\n\t\t\tthis.logService.trace('activity sources', ...this.sources);\n\t\t\tconst providerId = this.userDataSyncAccountService.account?.authenticationProviderId || '';\n\t\t\tthis.telemetryService.publicLog2<{ sources: string[]; providerId: string }, AutoSyncClassification>('sync/triggered', { sources: this.sources, providerId });\n\t\t\tthis.sources = [];\n\t\t\tif (this.autoSync.value) {\n\t\t\t\tawait this.autoSync.value.sync('Activity', disableCache);\n\t\t\t}\n\t\t}, this.successiveFailures\n\t\t\t? this.getSyncTriggerDelayTime() * 1 * Math.min(Math.pow(2, this.successiveFailures), 60) /* Delay exponentially until max 1 minute */\n\t\t\t: this.getSyncTriggerDelayTime());\n\n\t}\n\n\tprotected getSyncTriggerDelayTime(): number {\n\t\treturn 2000; /* Debounce for 2 seconds if there are no failures */\n\t}\n\n}\n\nclass AutoSync extends Disposable {\n\n\tprivate static readonly INTERVAL_SYNCING = 'Interval';\n\n\tprivate readonly intervalHandler = this._register(new MutableDisposable<IDisposable>());\n\n\tprivate readonly _onDidStartSync = this._register(new Emitter<void>());\n\treadonly onDidStartSync = this._onDidStartSync.event;\n\n\tprivate readonly _onDidFinishSync = this._register(new Emitter<Error | undefined>());\n\treadonly onDidFinishSync = this._onDidFinishSync.event;\n\n\tprivate manifest: IUserDataManifest | null = null;\n\tprivate syncTask: IUserDataSyncTask | undefined;\n\tprivate syncPromise: CancelablePromise<void> | undefined;\n\n\tconstructor(\n\t\tprivate readonly lastSyncUrl: URI | undefined,\n\t\tprivate readonly interval: number /* in milliseconds */,\n\t\tprivate readonly userDataSyncStoreManagementService: IUserDataSyncStoreManagementService,\n\t\tprivate readonly userDataSyncStoreService: IUserDataSyncStoreService,\n\t\tprivate readonly userDataSyncService: IUserDataSyncService,\n\t\tprivate readonly userDataSyncMachinesService: IUserDataSyncMachinesService,\n\t\tprivate readonly logService: IUserDataSyncLogService,\n\t\tprivate readonly telemetryService: ITelemetryService,\n\t\tprivate readonly storageService: IStorageService,\n\t) {\n\t\tsuper();\n\t}\n\n\tstart(): void {\n\t\tthis._register(this.onDidFinishSync(() => this.waitUntilNextIntervalAndSync()));\n\t\tthis._register(toDisposable(() => {\n\t\t\tif (this.syncPromise) {\n\t\t\t\tthis.syncPromise.cancel();\n\t\t\t\tthis.logService.info('Auto sync: Cancelled sync that is in progress');\n\t\t\t\tthis.syncPromise = undefined;\n\t\t\t}\n\t\t\tthis.syncTask?.stop();\n\t\t\tthis.logService.info('Auto Sync: Stopped');\n\t\t}));\n\t\tthis.sync(AutoSync.INTERVAL_SYNCING, false);\n\t}\n\n\tprivate waitUntilNextIntervalAndSync(): void {\n\t\tthis.intervalHandler.value = disposableTimeout(() => this.sync(AutoSync.INTERVAL_SYNCING, false), this.interval);\n\t}\n\n\tsync(reason: string, disableCache: boolean): Promise<void> {\n\t\tconst syncPromise = createCancelablePromise(async token => {\n\t\t\tif (this.syncPromise) {\n\t\t\t\ttry {\n\t\t\t\t\t// Wait until existing sync is finished\n\t\t\t\t\tthis.logService.debug('Auto Sync: Waiting until sync is finished.');\n\t\t\t\t\tawait this.syncPromise;\n\t\t\t\t} catch (error) {\n\t\t\t\t\tif (isCancellationError(error)) {\n\t\t\t\t\t\t// Cancelled => Disposed. Donot continue sync.\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn this.doSync(reason, disableCache, token);\n\t\t});\n\t\tthis.syncPromise = syncPromise;\n\t\tthis.syncPromise.finally(() => this.syncPromise = undefined);\n\t\treturn this.syncPromise;\n\t}\n\n\tprivate hasSyncServiceChanged(): boolean {\n\t\treturn this.lastSyncUrl !== undefined && !isEqual(this.lastSyncUrl, this.userDataSyncStoreManagementService.userDataSyncStore?.url);\n\t}\n\n\tprivate async hasDefaultServiceChanged(): Promise<boolean> {\n\t\tconst previous = await this.userDataSyncStoreManagementService.getPreviousUserDataSyncStore();\n\t\tconst current = this.userDataSyncStoreManagementService.userDataSyncStore;\n\t\t// check if defaults changed\n\t\treturn !!current && !!previous &&\n\t\t\t(!isEqual(current.defaultUrl, previous.defaultUrl) ||\n\t\t\t\t!isEqual(current.insidersUrl, previous.insidersUrl) ||\n\t\t\t\t!isEqual(current.stableUrl, previous.stableUrl));\n\t}\n\n\tprivate async doSync(reason: string, disableCache: boolean, token: CancellationToken): Promise<void> {\n\t\tthis.logService.info(`Auto Sync: Triggered by ${reason}`);\n\t\tthis._onDidStartSync.fire();\n\n\t\tlet error: Error | undefined;\n\t\ttry {\n\t\t\tawait this.createAndRunSyncTask(disableCache, token);\n\t\t} catch (e) {\n\t\t\tthis.logService.error(e);\n\t\t\terror = e;\n\t\t\tif (UserDataSyncError.toUserDataSyncError(e).code === UserDataSyncErrorCode.MethodNotFound) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.logService.info('Auto Sync: Client is making invalid requests. Cleaning up data...');\n\t\t\t\t\tawait this.userDataSyncService.cleanUpRemoteData();\n\t\t\t\t\tthis.logService.info('Auto Sync: Retrying sync...');\n\t\t\t\t\tawait this.createAndRunSyncTask(disableCache, token);\n\t\t\t\t\terror = undefined;\n\t\t\t\t} catch (e1) {\n\t\t\t\t\tthis.logService.error(e1);\n\t\t\t\t\terror = e1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis._onDidFinishSync.fire(error);\n\t}\n\n\tprivate async createAndRunSyncTask(disableCache: boolean, token: CancellationToken): Promise<void> {\n\t\tthis.syncTask = await this.userDataSyncService.createSyncTask(this.manifest, disableCache);\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\t\tthis.manifest = this.syncTask.manifest;\n\n\t\t// Server has no data but this machine was synced before\n\t\tif (this.manifest === null && await this.userDataSyncService.hasPreviouslySynced()) {\n\t\t\tif (this.hasSyncServiceChanged()) {\n\t\t\t\tif (await this.hasDefaultServiceChanged()) {\n\t\t\t\t\tthrow new UserDataAutoSyncError(localize('default service changed', \"Cannot sync because default service has changed\"), UserDataSyncErrorCode.DefaultServiceChanged);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new UserDataAutoSyncError(localize('service changed', \"Cannot sync because sync service has changed\"), UserDataSyncErrorCode.ServiceChanged);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Sync was turned off in the cloud\n\t\t\t\tthrow new UserDataAutoSyncError(localize('turned off', \"Cannot sync because syncing is turned off in the cloud\"), UserDataSyncErrorCode.TurnedOff);\n\t\t\t}\n\t\t}\n\n\t\tconst sessionId = this.storageService.get(sessionIdKey, StorageScope.APPLICATION);\n\t\t// Server session is different from client session\n\t\tif (sessionId && this.manifest && sessionId !== this.manifest.session) {\n\t\t\tif (this.hasSyncServiceChanged()) {\n\t\t\t\tif (await this.hasDefaultServiceChanged()) {\n\t\t\t\t\tthrow new UserDataAutoSyncError(localize('default service changed', \"Cannot sync because default service has changed\"), UserDataSyncErrorCode.DefaultServiceChanged);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new UserDataAutoSyncError(localize('service changed', \"Cannot sync because sync service has changed\"), UserDataSyncErrorCode.ServiceChanged);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthrow new UserDataAutoSyncError(localize('session expired', \"Cannot sync because current session is expired\"), UserDataSyncErrorCode.SessionExpired);\n\t\t\t}\n\t\t}\n\n\t\tconst machines = await this.userDataSyncMachinesService.getMachines(this.manifest || undefined);\n\t\t// Return if cancellation is requested\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst currentMachine = machines.find(machine => machine.isCurrent);\n\t\t// Check if sync was turned off from other machine\n\t\tif (currentMachine?.disabled) {\n\t\t\t// Throw TurnedOff error\n\t\t\tthrow new UserDataAutoSyncError(localize('turned off machine', \"Cannot sync because syncing is turned off on this machine from another machine.\"), UserDataSyncErrorCode.TurnedOff);\n\t\t}\n\n\t\tconst startTime = new Date().getTime();\n\t\tawait this.syncTask.run();\n\t\tthis.telemetryService.publicLog2<{\n\t\t\tduration: number;\n\t\t}, {\n\t\t\towner: 'sandy081';\n\t\t\tcomment: 'Report when running a sync operation';\n\t\t\tduration: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; comment: 'Time taken to run sync operation' };\n\t\t}>('settingsSync:sync', { duration: new Date().getTime() - startTime });\n\n\t\t// After syncing, get the manifest if it was not available before\n\t\tif (this.manifest === null) {\n\t\t\ttry {\n\t\t\t\tthis.manifest = await this.userDataSyncStoreService.manifest(null);\n\t\t\t} catch (error) {\n\t\t\t\tthrow new UserDataAutoSyncError(toErrorMessage(error), error instanceof UserDataSyncError ? error.code : UserDataSyncErrorCode.Unknown);\n\t\t\t}\n\t\t}\n\n\t\t// Update local session id\n\t\tif (this.manifest && this.manifest.session !== sessionId) {\n\t\t\tthis.storageService.store(sessionIdKey, this.manifest.session, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t\t}\n\n\t\t// Return if cancellation is requested\n\t\tif (token.isCancellationRequested) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Add current machine\n\t\tif (!currentMachine) {\n\t\t\tawait this.userDataSyncMachinesService.addCurrentMachine(this.manifest || undefined);\n\t\t}\n\t}\n\n\tregister<T extends IDisposable>(t: T): T {\n\t\treturn super._register(t);\n\t}\n\n}\n"]}