{"version":3,"sources":["file:///workspace/appflow/src/vs/platform/userDataSync/common/userDataSyncEnablementService.ts"],"names":[],"mappings":"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","file":"userDataSyncEnablementService.js","sourceRoot":"file:///workspace/appflow/src","sourcesContent":["/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { Emitter, Event } from 'vs/base/common/event';\nimport { Disposable, DisposableStore } from 'vs/base/common/lifecycle';\nimport { isWeb } from 'vs/base/common/platform';\nimport { IEnvironmentService } from 'vs/platform/environment/common/environment';\nimport { IApplicationStorageValueChangeEvent, IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';\nimport { ITelemetryService } from 'vs/platform/telemetry/common/telemetry';\nimport { ALL_SYNC_RESOURCES, getEnablementKey, IUserDataSyncEnablementService, IUserDataSyncStoreManagementService, SyncResource } from 'vs/platform/userDataSync/common/userDataSync';\n\ntype SyncEnablementClassification = {\n\towner: 'sandy081';\n\tcomment: 'Reporting when Settings Sync is turned on or off';\n\tenabled?: { classification: 'SystemMetaData'; purpose: 'FeatureInsight'; isMeasurement: true; comment: 'Flag indicating if settings sync is enabled or not' };\n};\n\nconst enablementKey = 'sync.enable';\n\nexport class UserDataSyncEnablementService extends Disposable implements IUserDataSyncEnablementService {\n\n\t_serviceBrand: any;\n\n\tprivate _onDidChangeEnablement = new Emitter<boolean>();\n\treadonly onDidChangeEnablement: Event<boolean> = this._onDidChangeEnablement.event;\n\n\tprivate _onDidChangeResourceEnablement = new Emitter<[SyncResource, boolean]>();\n\treadonly onDidChangeResourceEnablement: Event<[SyncResource, boolean]> = this._onDidChangeResourceEnablement.event;\n\n\tconstructor(\n\t\t@IStorageService private readonly storageService: IStorageService,\n\t\t@ITelemetryService private readonly telemetryService: ITelemetryService,\n\t\t@IEnvironmentService protected readonly environmentService: IEnvironmentService,\n\t\t@IUserDataSyncStoreManagementService private readonly userDataSyncStoreManagementService: IUserDataSyncStoreManagementService,\n\t) {\n\t\tsuper();\n\t\tthis._register(storageService.onDidChangeValue(StorageScope.APPLICATION, undefined, this._register(new DisposableStore()))(e => this.onDidStorageChange(e)));\n\t}\n\n\tisEnabled(): boolean {\n\t\tswitch (this.environmentService.sync) {\n\t\t\tcase 'on':\n\t\t\t\treturn true;\n\t\t\tcase 'off':\n\t\t\t\treturn false;\n\t\t}\n\t\treturn this.storageService.getBoolean(enablementKey, StorageScope.APPLICATION, false);\n\t}\n\n\tcanToggleEnablement(): boolean {\n\t\treturn this.userDataSyncStoreManagementService.userDataSyncStore !== undefined && this.environmentService.sync === undefined;\n\t}\n\n\tsetEnablement(enabled: boolean): void {\n\t\tif (enabled && !this.canToggleEnablement()) {\n\t\t\treturn;\n\t\t}\n\t\tthis.telemetryService.publicLog2<{ enabled: boolean }, SyncEnablementClassification>(enablementKey, { enabled });\n\t\tthis.storageService.store(enablementKey, enabled, StorageScope.APPLICATION, StorageTarget.MACHINE);\n\t}\n\n\tisResourceEnabled(resource: SyncResource): boolean {\n\t\treturn this.storageService.getBoolean(getEnablementKey(resource), StorageScope.APPLICATION, true);\n\t}\n\n\tsetResourceEnablement(resource: SyncResource, enabled: boolean): void {\n\t\tif (this.isResourceEnabled(resource) !== enabled) {\n\t\t\tconst resourceEnablementKey = getEnablementKey(resource);\n\t\t\tthis.storeResourceEnablement(resourceEnablementKey, enabled);\n\t\t}\n\t}\n\n\tgetResourceSyncStateVersion(resource: SyncResource): string | undefined {\n\t\treturn undefined;\n\t}\n\n\tprivate storeResourceEnablement(resourceEnablementKey: string, enabled: boolean): void {\n\t\tthis.storageService.store(resourceEnablementKey, enabled, StorageScope.APPLICATION, isWeb ? StorageTarget.USER /* sync in web */ : StorageTarget.MACHINE);\n\t}\n\n\tprivate onDidStorageChange(storageChangeEvent: IApplicationStorageValueChangeEvent): void {\n\t\tif (enablementKey === storageChangeEvent.key) {\n\t\t\tthis._onDidChangeEnablement.fire(this.isEnabled());\n\t\t\treturn;\n\t\t}\n\n\t\tconst resourceKey = ALL_SYNC_RESOURCES.filter(resourceKey => getEnablementKey(resourceKey) === storageChangeEvent.key)[0];\n\t\tif (resourceKey) {\n\t\t\tthis._onDidChangeResourceEnablement.fire([resourceKey, this.isResourceEnabled(resourceKey)]);\n\t\t\treturn;\n\t\t}\n\t}\n}\n"]}